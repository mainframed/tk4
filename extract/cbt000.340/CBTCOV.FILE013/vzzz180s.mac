./ ADD  NAME=@CALL
         MACRO
&LA      @CALL &F
         AIF   ('&F' NE '1').A1
&LA      L     15,16                    CVT
         L     15,X'C4'(15)             SMCA
         L     15,X'80'(15)             SMCA-USER
         L     15,12(15)                JNCB
         LTR   15,15                    FIRST CALL ?
         BZ    @C1&SYSNDX               YES
         L     15,X'4C'(15)             ENTRY-POINT
         LTR   15,15                    FIRST CALL ?
         BNZ   @C2&SYSNDX               NO
@C1&SYSNDX DS  0H
         LOAD  EPLOC==CL8'SPDJC03'
         LR    15,0                     ENTRY-POINT
@C2&SYSNDX DS  0H
         BALR  14,15                    OF I/O-MODULE
         NOPR  &F                       FUNCTION-CODE
         DELETE EPLOC==CL8'SPDJC03'
         MEXIT
.A1      ANOP
&LA      L     15,16                    CVT
         L     15,X'C4'(15)             SMCA
         L     15,X'80'(15)             SMCA-USER
         L     15,12(15)                JNCB
         L     15,X'4C'(15)             ENTRY-POINT
         BALR  14,15                    OF I/O-MODULE
         NOPR  &F                       FUNCTION-CODE
         MEND
./ ADD  NAME=@CANJOB
         MACRO
&LA      @CANJOB &JOBID,&PURGE=NO
         AIF   (T'&JOBID EQ 'O').ERROR   JOBID
&LA      LOAD  EPLOC==CL8'SPDJC07'
         LR    15,0                      ENTRY POINT OF SPDJC07
         IMLADDR 1,&JOBID
         AIF   ('&PURGE' EQ 'YES').A10   PURGE
         SR    0,0                       NO PURGE
         AGO   .A20
.A10     ANOP
         LA    0,1                       PURGE
.A20     ANOP
         BALR  14,15                     CALL SPDJC07
         NOPR  0                         FUNCTION-CODE CANCEL
         DELETE EPLOC==CL8'SPDJC07'
         MEXIT
.ERROR   ANOP
         MNOTE 8,'*** INVALID SPECIFICATIONS ***'
         MEND
./ ADD  NAME=@DJCBLK
DJCBLK   DSECT                          * JOB-CONTROL-BLOCK
DJCID    DS    CL8                      * NETID
DJCERR   DS    F                        * ERROR-MESSAGE-ADRESS
DJCHC    DS    H                        * HOLD-COUNT
DJCOH    DS    CL3                      * OPERATOR HOLD
DJCNN    DS    CL3                      * OLD NET PURGE
DJCCC    DS    XL2                      * CONDITION-CODE
DJCDM    DS    CL3                      * DUMMY-JOB
DJCNR    DS    20CL9                    * NORMAL RELEASE JOBS
DJCAR    DS    20CL9                    * ABNORMAL RELEASE JOBS
DJCNC    DS    20CL9                    * NORMAL CANCEL JOBS
DJCAC    DS    20CL9                    * ABNORMAL CANCEL JOBS
DJCNE    DS    20CL8                    * NOT EXECUTEABLE
DJCEX    DS    20CL8                    * EXECUTABLE
         DS    0F                       * ALIGNMENT FOR WTO
DJCWTO1  DS    CL34                     * ERROR-MESSAGES
DJCLEN   EQU   *-DJCBLK                 * LENGTH OF DJCBLK
./ ADD  NAME=@DJCDS
BLOCKHDR DSECT               RESIDES IN EACH BLOCK AT LOCATION 0-7
BHRB00   DS    AL4           ADDRESS OF THIS BLOCK
BHNXTBLK DS    AL4           ADDRESS OF A CHAINED BLOCK × 0
BHLENGTH EQU   *-BLOCKHDR
POINTER  DSECT               RESIDES ONLY IN FIRST BLOCK (A=00000008)
PTNAVBLK DS    AL4           ADDR OF THE NEXT AVAILABLE BLOCK
PTLSTBLK DS    AL4           ADDR OF THE LAST BLOCK IN DATASET
PTLOCK   DS    XL4           LOCK, HELD BY THE CURRENT USER
PTNAVQUE DS    AL4           HIGHEST USED ADDR.FOR 'NETQUEUE'-ENTRY
PTSTATUS DS    XL2           STATUS-INDICATORS
PTFREE   DS    XL2           FREE
PTLENGTH EQU   *-POINTER
NETQUEUE DSECT               RESIDES IN BLOCK 0 (AFTER 'POINTER')
NQNETID  DS    CL8           JOBNETID
NQNETHDR DS    AL4           ADDR OF ASSOCIATED 'NETIDHDR'-ELEMENT
NQSTATUS DS    XL2           STATUS-INDICATORS
NQFREE   DS    XL2           FREE
NQLENGTH EQU   *-NETQUEUE
NETIDHDR DSECT               RESIDES IN A BLOCK AT LOCATION 8
NHNETID  DS    CL8           JOBNETID
NHNAVJSP DS    AL4           NEXT AVAILABLE SPACE FOR 'JOBQUEUE'- AND
*                            'JOBENTRY'-ELEMENTS
NHFIRSTJ DS    AL4           ADDR OF FIRST 'JOBQUEUE'-ELEMENT
NHCNTHLD DS    H             COUNTER FOR HELD JOBS
NHCNTREL DS    H             COUNTER FOR RELEASED JOBS
NHCNTOUT DS    H             COUNTER FOR READY JOBS
NHCNTPUR DS    H             COUNTER FOR PURGED JOBS
NHFNEJOB DS    AL4           ADDR OF FIRST 'NE'-JOBENTRY
NHFEXJOB DS    AL4           ADDR OF FIRST 'EX'-JOBENTRY
NHTSCREA DS    XL8           TIMESTAMP OF CREATION THIS NETIDHDR
NHTSLUPD DS    XL8           TIMESTAMP OF LAST USE THIS NETIDHDR
NHLENGTH EQU   *-NETIDHDR
JOBQUEUE DSECT               RESIDES IN ANY BLOCK (POINTED BY NETIDHDR)
JQJNAME  DS    CL8           JOBNAME
JQPREQUE DS    AL4           PREVIOUS ELEMENT IN JOBQUEUE
JQNXTQUE DS    AL4           NEXT ELEMENT IN JOBQUEUE
JQJNBR   DS    CL4           JES2 JOBNBR.
JQSTATUS DS    XL2           STATUS-INDICATORS
JQSUBST  DS    X             SUBSTITUTION BYTE (BIT-POSITION = &-POS.)
JQFREE1  DS    X             FREE
JQDJCHC  DS    H             HOLD-COUNT FROM *DJC-CARD
JQACCHC  DS    H             ACCUMULATED HOLD-COUNT
JQDJCCC  DS    XL2           COMPLETION-CODE FROM *DJC-CARD
JQHIGHCC DS    XL2           HIGHEST COMPLETION-CODE
JQNBRHLD DS    H             NUMBER OF HELD JOBS
JQNBRREL DS    H             NUMBER OF RELEASED JOBS
JQNBROUT DS    H             NUMBER OF READY JOBS
JQNBRPUR DS    H             NUMBER OF PURGED JOBS
JQTSHLD  DS    XL8           TIMESTAMP OF CREATING THIS ELEMENT
JQTSREL  DS    XL8           TIMESTAMP OF RELEASING THE JOB
JQTSOUT  DS    XL8           TIMESTAMP OF TERMINATING THE JOB
JQTSPUR  DS    XL8           TIMESTAMP OF PURGING THE JOB
JQFNRJOB DS    AL4           ADDR OF THE FIRST 'NR'-JOBENTRY
JQFARJOB DS    AL4           ADDR OF THE FIRST 'AR'-JOBENTRY
JQFNCJOB DS    AL4           ADDR OF THE FIRST 'NC'-JOBENTRY
JQFACJOB DS    AL4           ADDR OF THE FIRST 'AC'-JOBENTRY
JQLENGTH EQU   *-JOBQUEUE
JOBENTRY DSECT               RESIDES IN ANY BLOCK (POINTED TO BY
*                            'NETIDHDR' OR 'JOBQUEUE')
JEJNAME  DS    CL8           JOBNAME
JEPREQUE DS    AL4           PREVIOUS ELEMENT IN JOBENTRY-QUEUE
JENXTQUE DS    AL4           NEXT ELEMENT IN JOBENTRY-QUEUE
JESTATUS DS    XL2           STATUS-INDICATORS
JESUBST  DS    X             SUBSTITUTION BYTE (BIT-POSITION = &-POS.)
JEFREE   DS    X             FREE
JELENGTH EQU   *-JOBENTRY
./ ADD  NAME=@DUMP
         MACRO
&LA      @DUMP &NET,&JOB,&TEXT,&PARM,&ENTRYC
         LCLA  &K
         AIF   (T'&NET EQ 'O').ERR
         AIF   (T'&JOB EQ 'O').ERR
         AIF   (T'&TEXT EQ 'O').ERR
         AIF   (T'&PARM EQ 'O').ERR
         AIF   (K'&TEXT GT 32).ERR
&LA      LA    1,&PARM                  PARM-AREA
         IMLADDR 14,&NET
         ST    14,0(1)                  ADDRESS OF NETID
         IMLADDR 14,&JOB
         ST    14,4(1)                  ADDRESS OF JOBNAME
         BAL   14,@D1&SYSNDX
&K       SETA  K'&TEXT-2
         DC    AL1(&K),C&TEXT
@D1&SYSNDX DS  0H
         ST    14,8(1)                  ADDRESS OF MSG TEXT
         SR    0,0                      CLEAR R0
         AIF   (T'&ENTRYC EQ 'O').NOENTR
         IC    0,&ENTRYC                INSERT ENTRY-CODE
.NOENTR  ANOP
         @CALL 3
         MEXIT
.ERR     MNOTE 8,'*** INVALID SPECIFICATIONS ***'
         MEND
./ ADD  NAME=@GET
         MACRO
&LA      @GET  &A,&B,&L
         AIF   (T'&A EQ 'O').ERR
         AIF   ('&A' EQ 'LOCK' AND '&B' NE 'ON' AND '&B' NE 'OFF').ERR
         AIF   ('&A' EQ 'LOCK').A1
&LA      IMLADDR 0,&A
         AIF   (T'&L EQ 'O').A00
         LA    1,&L                     LENGTH GIVEN
         AGO   .A01
.A00     ANOP
         SR    1,1                      LENGTH NOT GIVEN
.A01     ANOP
         @CALL 0
         AIF   (T'&B EQ 'O').A0
         IMSADDR 1,&B
.A0      ANOP
         MEXIT
.A1      AIF   ('&B' NE 'ON').A2
&LA      @CALL 1
         MEXIT
.A2      AIF   ('&L' EQ '').A3
         AIF   ('&L' NE 'FAST').ERR
&LA      LA    R1,4                     FAST LOCK OFF (WITHOUT REWRITE)
         AGO   .A4
.A3      ANOP
&LA      SR    R1,R1                    NORMAL LOCK OFF
.A4      ANOP
         @CALL 2
         MEXIT
.ERR     MNOTE 8,'*** INVALID SPECIFICATIONS ***'
         MEND
./ ADD  NAME=@JNCB
JNCB     DSECT
JCSAVE   DS    18F                     SAVEAREA FOR I/O-MODULE
JCIDENT  DS    CL4                     IDENTIFICATION 'JNCB'
JCADDRIO DS    A                       ENTRY-POINT OF I/O-MODULE
JCREQU   DS    A                       FIRST REQUEST
JCSTATUS DS    XL2                     STATUS-INDICATORS
JCBLKREQ DS    H                       LENGTH OF REQUESTED SPACE
JCLSTBLK DS    AL4                     LAST BLOCK IN JOBNETDS
JCBLKLEN DS    H                       BLKSIZE OF JOBNETDS
JCBLKCNT DS    H                       NUMBER OF BLOCKS IN STORAGE
JCFIRBLK DS    A                       FIRST BLOCK IN STORAGE
JCBLKADR DS    XL4                     STORED BLOCK-ADDRESS
JCBLKIO  DS    A                       ADDRESS OF BUFFER FOR READ
         DS    X                       FREE
JCRELBLK DS    XL3                     RELATIVE BLOCK-ADDRESS
JCLOCK   DS    XL4                     CURRENT LOCK
JCJOBNAM DS    CL8                     JOB WHO IS HOLDING THE LOCK
JCLOCKTS DS    XL8                     TIMESTAMP OF OBTAINING THE LOCK
JCTIOADR DS    A                       ADDRESS OF TIOT FROM EXTRACT
JCUCBADR DS    A                       ADDRESS OF UCB FOR RESERVE/DEQ
JCGETMA  DS    A                       ADDRESS OF GETMAIN-AREA
JCNETDS  DS    CL104                   DCB BDAM FOR JOBNETDS
JCOPENL  DS    CL4                     OPEN LIST-FORM
JCCLOSEL DS    CL4                     CLOSE LIST-FORM
JCRDECB1 DS    CL28                    READ BDAM LIST-FORM
JCWDECB2 DS    CL28                    WRITE BDAM LIST-FORM
JCEXTRL  DS    CL12                    EXTRACT LIST-FORM
JCRESL   DS    CL16                    RESERVE LIST-FORM
JCDEQL   DS    CL16                    DEQ LIST-FORM
JCGETML  DS    CL12                    GETMAIN LIST-FORM
JCSDUMPL DS    CL40                    SDUMP LIST-FORM
JCWORK   DS    XL256
JCLENGTH EQU   *-JNCB
./ ADD  NAME=@RELJOB
         MACRO
&LA      @RELJOB &JOBID,&NETID,&WAIT
         AIF   (T'&JOBID EQ 'O').ERROR
         AIF   (T'&NETID EQ 'O').ERROR
         AIF   (T'&WAIT EQ 'O').A1
         AIF   ('&WAIT' NE 'WAIT').ERROR
.A1      ANOP
&LA      LOAD  EPLOC==CL8'SPDJC07'
         LR    15,0                    ENTRY POINT OF SPDJC07
         IMLADDR 1,&JOBID
         IMLADDR 0,&NETID
         BALR  14,15                   CALL SPDJC07
         AIF   ('&WAIT' EQ 'WAIT').A2
         NOPR  1                       FUNCTION-CODE RELEASE
         AGO   .A3
.A2      ANOP
         NOPR  2                       FUNCTION-CODE RELEASE AND WAIT
.A3      ANOP
         DELETE EPLOC==CL8'SPDJC07'
         MEXIT
.ERROR   ANOP
         MNOTE 8,'*** INVALID SPECIFICATIONS ***'
         MEND
./ ADD  NAME=ALLOCDS
//Z228068A JOB (6695,068,2),CLASS=1,MSGCLASS=O
// EXEC PGM=SPDJC05,PARM='4500'
//JOBNETDS DD DSN=OP.NETCTRL,DISP=(,CATLG),UNIT=3350,VOL=SER=DAX11,
// DCB=(RECFM=F,LRECL=2040,BLKSIZE=2040,DSORG=DA),LABEL=EXPDT=99365,
// SPACE=(CYL,10,,CONTIG)
//OXQUE EXEC PGM=LIBR
//SYSPRINT DD SYSOUT=*
//MASTER DD DSN=OP.JOBQUE,DISP=(,CATLG),UNIT=3350,VOL=SER=DAX11,
// DCB=(DSORG=DA,BLKSIZE=4628),LABEL=EXPDT=99365,SPACE=(CYL,1,,CONTIG)
//SYSIN DD *
-OPT INIT,DISK,COMPRESS=PART,NORESEQ,NOPC,SEQ=/73,8,10,10/,NOSEQUPD
./ ADD  NAME=BTCHDJC
//Z222068D JOB (6695,068,2),CLASS=1,MSGCLASS=T
/*JOBPARM SYSAFF=M268
// EXEC PGM=SPDJC08
//DJCOUT DD SYSOUT=*
//JOBNETDS DD DSN=OX.NETCTRL,DISP=SHR
//DJCIN DD *
DJC,D,TEST,ALL,LIBRDLM
//MASTER DD DSN=OX.JOBQUE,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSIN DD UNIT=SYSDA,SPACE=(TRK,1)
./ ADD  NAME=DALLO
         MACRO
&LAB     DALLO &DA=,&FILE=,&DISP=,&SYSOUT=,&ERROR=,                    *
               &UNIT=,&VOLUME=,&FREE=,&MEMBER=,&QNAME=,&SPACE=,        *
               &UCOUNT=,                                               *
               &FORM=,&OUTLIM=,&COPIES=,&LABEL=,&EXPDT=,&RETPD=,       *
               &FCB=,&HOLD=,&BLKSIZE=,&LRECL=,&RECFM=,&UCS=,&DSORG=,   *
               &USING=,&BFALN=,&BUFNO=,&DEN=,&EROPT=,&KEYLEN=,&OPTCD=, *
               &SPACE1=
         LCLA  &LGM,&IND1,&IND2,&MULT,&TP,&TU,&FILEPR,&DSNPR
         LCLA  &POI
         LCLC  &TAB,&C1,&DV,&TAB1(11),&TAB2(11),&C2
&C2      SETC  'MDA'.'&SYSNDX'
.*
.* FIRST CHECK OPERANDS AND COMPUTE LENGTH FOR WORK-AEREA
&LGM     SETA  24
&POI     SETA  24
         AIF   (T'&DA NE 'O' OR T'&FILE NE 'O').A1002
.A1001   ANOP
         MNOTE 04,'MISSING KEYWORD DA, FILE, OR ERROR'
         MEXIT
.*
.A1002   ANOP
         AIF   (T'&ERROR(1) EQ 'O').A1001
.*
         AIF   (T'&DA EQ 'O').A1009
         AIF   (K'&DA LT 47).A1004
.A1003   ANOP
         MNOTE 04,'INCORRECT ''DA'' VALUE'
         MEXIT
.*
.A1004   ANOP
         AIF   (N'&DA GT 2).A1003
         AIF   (N'&DA EQ 1).A1005
         AIF   (K'&DA(1) GT 1).A1003
         AIF   ('&DA(1)' NE 'R').A1003
         AIF   ('&DA(2)'(1,1) EQ '''').A1003
         AGO   .A1008
.*
.A1005   ANOP
         AIF   ('&DA'(1,1) NE '''').A1008
&IND1    SETA  2
&IND2    SETA  1
.A1006   ANOP
         AIF   ('&DA'(&IND1,1) NE '.').A1007
&IND2    SETA  1
&IND1    SETA  &IND1+1
         AGO   .A1006
.*
.A1007   ANOP
         AIF   ('&DA'(&IND1,1) EQ '''').A1008
         AIF   (&IND2 GT 8).A1003
&IND2    SETA  &IND2+1
&IND1    SETA  &IND1+1
         AGO   .A1006
.*
.A1008   ANOP
&LGM     SETA  &LGM+4+50
&POI     SETA  &POI+4
.A1009   ANOP
         AIF   (T'&FILE EQ 'O').A1013
         AIF   (K'&FILE LT 13).A1011
.A1010   ANOP
         MNOTE 04,'INCORRECT ''FILE'' VALUE'
         MEXIT
.*
.A1011   ANOP
         AIF   (N'&FILE GT 2).A1010
         AIF   (N'&FILE EQ 1).A1012
         AIF   ('&FILE(1)' NE 'R').A1010
         AIF   (K'&FILE(2) GT 8).A1010
.*
.A1012   ANOP
&LGM     SETA  &LGM+4+14
&POI     SETA  &POI+4
.*
.A1013   ANOP
         AIF   (N'&DISP LT 4).A1015
.A1014   ANOP
         MNOTE 04,'INCORRECT ''DISP'' VALUE'
         MEXIT
.*
.A1015   ANOP
         AIF   (T'&DISP(1) EQ 'O').A1016
         AIF   ('&DISP(1)'(1,1) NE '''').A1016
         AIF   ('&DISP(1)' NE '''OLD''' AND '&DISP(1)' NE '''MOD''' AND*
                '&DISP(1)' NE '''NEW''' AND '&DISP(1)' NE '''SHR''').A1*
               014
.A1016   ANOP
         AIF   (T'&DISP(2) EQ 'O').A1017
         AIF   ('&DISP(2)'(1,1) NE '''').A1017
         AIF   ('&DISP(2)' NE '''UNCATLG''' AND '&DISP(2)' NE '''CATLG'*
               '' AND '&DISP(2)' NE '''DELETE''' AND '&DISP(2)' NE '''K*
               EEP''').A1014
.A1017   ANOP
         AIF   (T'&DISP(3) EQ 'O').A1018
         AIF   ('&DISP(3)'(1,1) NE '''').A1018
         AIF   ('&DISP(3)' NE '''UNCATLG''' AND '&DISP(3)' NE '''CATLG'*
               '' AND '&DISP(3)' NE '''DELETE''' AND '&DISP(3)' NE '''K*
               EEP''').A1014
.A1018   ANOP
&MULT    SETA  N'&DISP
&POI     SETA  &POI+4*&MULT
&LGM     SETA  &LGM+(4*&MULT)+(7*&MULT)
.*
.A1019   ANOP
         AIF   (T'&SYSOUT EQ 'O').A1022
         AIF   ('&SYSOUT'(1,1) NE '''').A1021
         AIF   (K'&SYSOUT LT 4).A1021
.A1020   ANOP
         MNOTE 04,'INCORRECT ''SYSOUT'' VALUE'
         MEXIT
.A1021   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1022   ANOP
         AIF   (T'&UNIT EQ 'O').A1025
         AIF   ('&UNIT'(1,1) NE '''').A1024
         AIF   (K'&UNIT LT 9).A1024
.A1023   ANOP
         MNOTE 04,'INCORRECT ''UNIT'' VALUE'
         MEXIT
.*
.A1024   ANOP
&LGM     SETA  &LGM+4+12
&POI     SETA  &POI+4
.*
.A1025   ANOP
         AIF   (T'&VOLUME EQ 'O').A1028
         AIF   ('&VOLUME'(1,1) NE '''').A1027
         AIF   (K'&VOLUME LT 9).A1027
.A1026   ANOP
         MNOTE 04,'INCORRECT ''VOLUME'' VALUE'
         MEXIT
.A1027   ANOP
&LGM     SETA  &LGM+4+12
&POI     SETA  &POI+4
.*
.A1028   ANOP
         AIF   (T'&FREE EQ 'O').A1031
         AIF   ('&FREE'(2,5) EQ 'CLOSE').A1030
.A1029   ANOP
         MNOTE 04,'INCORRECT ''FREE'' VALUE'
         MEXIT
.A1030   ANOP
&LGM     SETA  &LGM+4+4
&POI     SETA  &POI+4
.*
.A1031   ANOP
         AIF   (T'&MEMBER EQ 'O').A1034
         AIF   ('&MEMBER'(1,1) NE '''').A1033
         AIF   (K'&MEMBER LT 11).A1033
.A1032   ANOP
         MNOTE 04,'INCORRECT ''MEMBER'' VALUE'
         MEXIT
.A1033   ANOP
&LGM     SETA  &LGM+4+14
&POI     SETA  &POI+4
.*
.A1034   ANOP
         AIF   (T'&QNAME EQ 'O').A1037
         AIF   ('&QNAME'(1,1) NE '''').A1036
         AIF   (K'&QNAME LT 11).A1036
.A1035   ANOP
         MNOTE 04,'INCORRECT ''QNAME'' VALUE'
         MEXIT
.A1036   ANOP
&LGM     SETA  &LGM+4+14
&POI     SETA  &POI+4
.*
.A1037   ANOP
         AIF   (T'&SPACE EQ 'O').A1047
         AIF   ('&SPACE'(1,1) EQ '(').A1039
.A1038   ANOP
         MNOTE 04,'INCORRECT ''SPACE'' VALUE'
         MEXIT
.A1039   ANOP
         AIF   (N'&SPACE GT 5 OR N'&SPACE LT 2).A1038
&LGM     SETA  &LGM+4+9
&POI     SETA  &POI+4
         AIF   (T'&SPACE(2) EQ 'O').A1038
         AIF   ('&SPACE(2)' NE '*').A1038
         AIF   (N'&SPACE1 GT 3).A1038
         AIF   (T'&SPACE1(1) EQ 'O').A1038
&LGM     SETA  &LGM+4+9
&POI     SETA  &POI+4
         AIF   (T'&SPACE1(2) EQ 'O').A1040
&LGM     SETA  &LGM+4+9
&POI     SETA  &POI+4
.A1040   ANOP
         AIF   (T'&SPACE1(3) EQ 'O').A1041
&LGM     SETA  &LGM+4+9
&POI     SETA  &POI+4
.A1041   ANOP
         AIF   (T'&SPACE(3) EQ 'O').A1043
         AIF   ('&SPACE(3)' NE '''RLSE''').A1038
.A1042   ANOP
&LGM     SETA  &LGM+4+4
&POI     SETA  &POI+4
.A1043   ANOP
         AIF   (T'&SPACE(4) EQ 'O').A1045
         AIF   ('&SPACE(4)'(1,1) NE '''').A1044
         AIF   ('&SPACE(4)'(2,6) NE 'CONTIG' AND '&SPACE(4)'(2,4) NE 'M*
               XIG' AND '&SPACE(4)'(2,3) NE 'ALX').A1038
.A1044   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.A1045   ANOP
         AIF   (T'&SPACE(5) EQ 'O').A1047
         AIF   ('&SPACE(5)'(2,5) NE 'ROUND').A1038
.A1046   ANOP
&LGM     SETA  &LGM+4+4
&POI     SETA  &POI+4
.A1047   ANOP
         AIF   (T'&FORM EQ 'O').A1050
         AIF   ('&FORM'(1,1) NE '''').A1049
         AIF   (K'&FORM LT 7).A1049
.A1048   ANOP
         MNOTE 04,'INCORRECT ''FORM'' VALUE'
         MEXIT
.A1049   ANOP
&LGM     SETA  &LGM+4+10
&POI     SETA  &POI+4
.*
.A1050   ANOP
         AIF   (T'&OUTLIM EQ 'O').A1051
&LGM     SETA  &LGM+4+9
&POI     SETA  &POI+4
.*
.A1051   ANOP
         AIF   (T'&COPIES EQ 'O').A1052
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1052   ANOP
         AIF   (T'&UCOUNT EQ 'O').A10525
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A10525  ANOP
         AIF   (N'&LABEL LT 5).A1054
.A1053   ANOP
         MNOTE 04,'INCORRECT ''LABEL'' VALUE'
         MEXIT
.A1054   ANOP
         AIF   (T'&LABEL(1) EQ 'O').A1055
&LGM     SETA  &LGM+4+8
&POI     SETA  &POI+4
.*
.A1055   ANOP
         AIF   (T'&LABEL(2) EQ 'O').A1057
         AIF   ('&LABEL(2)'(1,1) NE '''').A1056
         AIF   ('&LABEL(2)'(2,2) NE 'SL' AND '&LABEL(2)'(2,3) NE 'SUL' *
               AND '&LABEL(2)'(2,2) NE 'AL' AND '&LABEL(2)'(2,3) NE 'AU*
               L' AND '&LABEL(2)'(2,3) NE 'NSL' AND '&LABEL(2)'(2,2) NE*
                'NL' AND '&LABEL(2)'(2,3) NE 'BLP' AND '&LABEL(2)'(2,3)*
                NE 'LTM').A1053
.A1056   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1057   ANOP
         AIF   (T'&LABEL(3) EQ 'O').A1059
         AIF   ('&LABEL(3)'(1,1) NE '''').A1058
         AIF   ('&LABEL(3)'(2,8) NE 'PASSWORD' AND '&LABEL(3)'(2,8) NE *
               'NOPWREAD').A1053
.A1058   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1059   ANOP
         AIF   (T'&LABEL(4) EQ 'O').A1061
         AIF   ('&LABEL(4)'(1,1) NE '''').A1060
         AIF   ('&LABEL(4)'(2,2) NE 'IN' AND '&LABEL(4)'(2,3) NE 'OUT')*
               .A1053
.A1060   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.A1061   ANOP
         AIF   (T'&EXPDT EQ 'O').A1064
         AIF   ('&EXPDT'(1,1) NE '''').A1063
         AIF   (K'&EXPDT EQ 7).A1063
.*
.A1062   ANOP
         MNOTE 04,'INCORRECT ''EXPDT'' OR ''RETPD'' VALUE'
         MEXIT
.A1063   ANOP
&LGM     SETA  &LGM+4+11
&POI     SETA  &POI+4
.A1064   ANOP
         AIF   (T'&RETPD EQ 'O').A1066
         AIF   ('&RETPD'(1,1) NE '''').A1065
         AIF   (K'&RETPD GT 6).A1062
.*
.A1065   ANOP
&LGM     SETA  &LGM+4+8
&POI     SETA  &POI+4
.*
.A1066   ANOP
         AIF   (T'&FCB EQ 'O').A1072
         AIF   (N'&FCB LT 3).A1068
.A1067   ANOP
         MNOTE 04,'INCORRECT ''FCB'' VALUE'
         MEXIT
.A1068   ANOP
         AIF   (T'&FCB(1) EQ 'O').A1070
         AIF   ('&FCB(1)'(1,1) NE 'O').A1069
         AIF   (K'&FCB(1) GT 6).A1067
.*
.A1069   ANOP
&LGM     SETA  &LGM+4+10
&POI     SETA  &POI+4
.A1070   ANOP
         AIF   (T'&FCB(2) EQ 'O').A1072
         AIF   ('&FCB(2)'(1,1) NE '''').A1071
         AIF   ('&FCB(2)'(2,5) NE 'ALIGN' AND '&FCB(2)'(2,6) NE 'VERIFY*
               ').A1067
.A1071   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.A1072   ANOP
         AIF   (T'&HOLD EQ 'O').A1075
         AIF   ('&HOLD' EQ '''YES''').A1074
.A1073   ANOP
         MNOTE 04,'INCORRECT ''HOLD'' VAUE'
         MEXIT
.A1074   ANOP
&LGM     SETA  &LGM+4+4
&POI     SETA  &POI+4
.*
.A1075   ANOP
         AIF   (T'&BLKSIZE EQ 'O').A1076
&LGM     SETA  &LGM+4+8
&POI     SETA  &POI+4
.*
.A1076   ANOP
         AIF   (T'&LRECL EQ 'O').A1077
&LGM     SETA  &LGM+4+8
&POI     SETA  &POI+4
.*
.A1077   ANOP
         AIF   (T'&RECFM EQ 'O').A1083
         AIF   ('&RECFM'(1,1) NE '''').A1082
         AGO   .A1079
.A1078   ANOP
         MNOTE 04,'INCORRECT ''RECFM'' VALUE'
         MEXIT
.*
.A1079   ANOP
&TAB     SETC  'RMAGSBTDVFU'
&IND1    SETA  2
&IND2    SETA  1
.*
.A1080   ANOP
         AIF   ('&RECFM'(&IND1,1) EQ '&TAB'(&IND2,1)).A1081
         AIF   (&IND2 EQ 11).A1078
&IND2    SETA  &IND2+1
         AGO   .A1080
.*
.A1081   ANOP
&IND1    SETA  &IND1+1
         AIF   ('&RECFM'(&IND1,1) EQ '''').A1082
         AIF   ('&RECFM'(&IND1,1) EQ '').A1078
&IND2    SETA  1
         AGO   .A1080
.*
.A1082   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.A1083   ANOP
         AIF   (T'&UCS(1) EQ 'O').A1086
         AIF   ('&UCS(1)'(1,1) NE '''').A1085
         AIF   (K'&UCS(1) LT 7).A1085
.A1084   ANOP
         MNOTE 04,'INCORRECT ''UCS'' VALUE'
         MEXIT
.A1085   ANOP
&LGM     SETA  &LGM+4+10
&POI     SETA  &POI+4
.*
.A1086   ANOP
         AIF   (T'&UCS(2) EQ 'O').A1087
         AIF   ('&UCS(2)'(2,4) NE 'FOLD').A1084
&LGM     SETA  &LGM+4+4
&POI     SETA  &POI+4
.*
.A1087   ANOP
         AIF   (T'&UCS(3) EQ 'O').A1088
         AIF   ('&UCS(3)'(2,5) NE 'VERFY').A1084
&LGM     SETA  &LGM+4+4
&POI     SETA  &POI+4
.*
.A1088   ANOP
         AIF   (T'&USING EQ 'O').A1091
         AIF   ('&USING'(1,1) NE '''').A1090
         AIF   (K'&USING LT 11).A1090
.A1089   ANOP
         MNOTE 04,'INCORRECT ''USING'' VALUE'
         MEXIT
.A1090   ANOP
&LGM     SETA  &LGM+4+14
&POI     SETA  &POI+4
.*
.A1091   ANOP
         AIF   (T'&BFALN EQ 'O').A1093
         AIF   ('&BFALN'(1,1) NE '''').A1092
         AIF   ('&BFALN'(1,3) EQ '''D''' OR '&BFALN'(1,3) EQ '''F''').A*
               1092
         MNOTE 04,'INCORRECT ''BFALN'' VALUE'
         MEXIT
.A1092   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1093   ANOP
         AIF   (T'&BUFNO EQ 'O').A1095
         AIF   ('&BUFNO'(1,1) NE '''').A1094
         AIF   (K'&BUFNO LT 4).A1094
         MNOTE 04,'INCORRECT ''BUFNO'' VALUE'
         MEXIT
.A1094   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1095   ANOP
         AIF   (T'&DEN EQ 'O').A1099
         AIF   ('&DEN'(1,1) NE '''').A1098
         AIF   (K'&DEN EQ 3).A1097
.A1096   ANOP
         MNOTE 04,'INCORRECT ''DEN'' VALUE'
         MEXIT
.A1097   ANOP
         AIF   ('&DEN'(2,1) NE '0' AND '&DEN'(2,1) NE '1' AND '&DEN'(2,*
               1) NE '2' AND '&DEN'(2,1) NE '3' AND '&DEN'(2,1) NE '4')*
               .A1096
.A1098   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1099   ANOP
.************************ READY ********************
.*
.************** NOW GENERATION *********************
.B1000   ANOP
&LGM     SETA  &LGM+8+8
&POI     SETA  &POI+4
.*  GENERATE MACRO-LABEL
         AIF   ('&LAB' EQ '').B1005
&LAB     DS    0H
.*
.B1005   ANOP
.*  G E N E R A T E  INSTRUCTIONS
         GETMAIN R,LV=&LGM
         LR    14,1
         LR    0,1
         LA    14,0(0,14)
         LA    1,&LGM.(,0)
         XR    15,15
         MVCL  0,14
.*
         LA    1,4(,14)
         ST    1,0(,14)
         MVC   4(2,14),=X'1401'
         LA    1,24(,14)
         ST    1,12(,14)
         MVI   0(14),X'80'
.* FILE
&C1      SETC  '(,14)'
&TP      SETA  24
&TU      SETA  &POI
         AIF   (T'&FILE EQ 'O').B1020
* FILE
         LA    1,&TU&C1
         ST    1,&TP&C1
         AIF   (N'&FILE EQ 2).B1015
         AIF   ('&FILE'(1,1) NE '''').B1010
&IND1    SETA  K'&FILE-2
         MVC   &TU.(4,14),=X'00010001'
&TU      SETA  &TU+4
         MVC   &TU.(2,14),=H'&IND1.'
&TU      SETA  &TU+2
         MVC   &TU.(&IND1.,14),=C&FILE
&TU      SETA  &TU+&IND1
&TP      SETA  &TP+4
         AGO   .B1020
.*
.B1010   ANOP
         MVC   &TU.(4,14),=X'00010001'
&TU      SETA  &TU+4
         MVC   &TU.(10,14),&FILE
&TU      SETA  &TU+4
&TP      SETA  &TP+4
         AGO   .B1020
.*
.B1015   ANOP
         MVC   &TU.(14,14),=X'0055000100084040404040404040'
&TU      SETA  &TU+14
&TP      SETA  &TP+4
&FILEPR  SETA  &TU-10
.*
.B1020   ANOP
         AIF   (T'&DA EQ 'O').B1035
* DA
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         AIF   (N'&DA EQ 2).B1030
         MVC   &TU.(4,14),=X'00020001'
&TU      SETA  &TU+4
.*
         AIF   ('&DA'(1,1) NE '''').B1025
&IND1    SETA  K'&DA-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&DA
&TU      SETA  &TU+2+&IND1
         AGO   .B1035
.*
.B1025   ANOP
         MVC   &TU.(46,14),&DA
&TU      SETA  &TU+46
         AGO   .B1035
.*
.B1030   ANOP
         MVC   &TU.(6,14),=X'00560001002C'
         MVI   &TU.+6(14),X'40'
         MVC   &TU.+7(43,14),&TU.+6(14)
&DSNPR   SETA  &TU+4
&TU      SETA  &TU+50
.*
.B1035   ANOP
         AIF   (T'&MEMBER EQ 'O').B1045
* MEMBER
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00030001'
&TU      SETA  &TU+4
         AIF   ('&MEMBER'(1,1) NE '''').B1040
&IND1    SETA  K'&MEMBER-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&MEMBER
&TU      SETA  &TU+2+&IND1
         AGO   .B1045
.*
.B1040   ANOP
         MVC   &TU.(10,14),&MEMBER
&TU      SETA  &TU+10
.*
.B1045   ANOP
         AIF   (T'&DISP(1) EQ 'O').B1060
* DISP(1)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'000400010001'
&TU      SETA  &TU+6
         AIF   ('&DISP(1)'(1,1) NE '''').B1055
&DV      SETC  'X''01'''
         AIF   ('&DISP(1)'(2,3) EQ 'OLD').B1050
&DV      SETC  'X''02'''
         AIF   ('&DISP(1)'(2,3) EQ 'MOD').B1050
&DV      SETC  'X''04'''
         AIF   ('&DISP(1)'(2,3) EQ 'NEW').B1050
&DV      SETC  'X''08'''
.*
.B1050   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B1060
.*
.B1055   ANOP
         MVC   &TU.(1,14),&DISP(1)
&TU      SETA  &TU+1
.*
.B1060   ANOP
         AIF   (T'&DISP(2) EQ 'O').B1075
* DISP(2)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'000500010001'
&TU      SETA  &TU+6
         AIF   ('&DISP(2)'(1,1) NE '''').B1070
&DV      SETC  'X''01'''
         AIF   ('&DISP(2)'(2,7) EQ 'UNCATLG').B1065
&DV      SETC  'X''02'''
         AIF   ('&DISP(2)'(2,5) EQ 'CATLG').B1065
&DV      SETC  'X''04'''
         AIF   ('&DISP(2)'(2,6) EQ 'DELETE').B1065
&DV      SETC  'X''08'''
.*
.B1065   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B1075
.*
.B1070   ANOP
         MVC   &TU.(1,14),&DISP(2)
&TU      SETA  &TU+1
.*
.B1075   ANOP
         AIF   (T'&DISP(3) EQ 'O').B1090
* DISP(3)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'000600010001'
&TU      SETA  &TU+6
         AIF   ('&DISP(3)'(1,1) NE '''').B1085
&DV      SETC  'X''01'''
         AIF   ('&DISP(3)'(2,7) EQ 'UNCATLG').B1080
&DV      SETC  'X''02'''
         AIF   ('&DISP(3)'(2,5) EQ 'CATLG').B1080
&DV      SETC  'X''04'''
         AIF   ('&DISP(3)'(2,6) EQ 'DELETE').B1080
&DV      SETC  'X''08'''
.*
.B1080   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B1090
.*
.B1085   ANOP
         MVC   &TU.(1,14),&DISP(3)
&TU      SETA  &TU+1
.*
.B1090   ANOP
         AIF   (T'&SPACE EQ 'O').B0340
         AIF   (T'&SPACE(1) EQ 'O').B1110
* SPACE(1)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         AIF   ('&SPACE(1)'(1,1) EQ '''').B1095
         MVC   &TU.(9,14),&SPACE(1)
&TU      SETA  &TU+9
         AGO   .B1110
.*
.B1095   ANOP
         AIF   ('&SPACE(1)'(2,3) EQ 'TRK').B1100
         AIF   ('&SPACE(1)'(2,3) EQ 'CYL').B1105
         MVC   &TU.(6,14),=X'000900010003'
         L     1,=F&SPACE(1)
         STCM  1,7,&TU.+6(14)
&TU      SETA  &TU+9
         AGO   .B1110
.*
.B1100   ANOP
         MVC   &TU.(4,14),=X'00070000'
&TU      SETA  &TU+4
         AGO   .B1110
.*
.B1105   ANOP
         MVC   &TU.(4,14),=X'00080000'
&TU      SETA  &TU+4
.*
.B1110   ANOP
         AIF   (T'&SPACE1(1) EQ 'O').B1120
* SPACE(2,1)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         AIF   ('&SPACE1(1)'(1,1) NE '''').B1115
         MVC   &TU.(6,14),=X'000A00010003'
         L     1,=F&SPACE1(1)
         STCM  1,7,&TU.+6(14)
&TU      SETA  &TU+9
         AGO   .B1120
.*
.B1115   ANOP
         MVC   &TU.(6,14),=X'000A00010003'
         MVC   &TU.+6(3,14),&SPACE1(1).+1
&TU      SETA  &TU+9
.*
.B1120   ANOP
         AIF   (T'&SPACE1(2) EQ 'O').B1130
* SPACE(2,2)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'000B00010003'
&TU      SETA  &TU+6
         AIF   ('&SPACE1(2)'(1,1) NE '''').B1125
         L     1,=F&SPACE1(2)
         STCM  1,7,&TU.(14)
&TU      SETA  &TU+3
         AGO   .B1130
.*
.B1125   ANOP
         MVC   &TU.(3,14),&SPACE1(2).+1
&TU      SETA  &TU+3
.*
.B1130   ANOP
         AIF   (T'&SPACE1(3) EQ 'O').B1140
* SPACE(2,3)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'000C00010003'
&TU      SETA  &TU+6
         AIF   ('&SPACE1(3)'(1,1) NE '''').B1135
         L     1,=F&SPACE1(3)
         STCM  1,7,&TU.(14)
&TU      SETA  &TU+3
         AGO   .B1140
.*
.B1135   ANOP
         MVC   &TU.(3,14),&SPACE1(3).+1
&TU      SETA  &TU+3
.*
.B1140   ANOP
         AIF   (T'&SPACE(3) EQ 'O').B0300
* RLSE
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'000D0000'
&TU      SETA  &TU+4
.*
.B0300   ANOP
         AIF   (T'&SPACE(4) EQ 'O').B0330
* CONTIG,MIXG,ALX
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'000E00010001'
&TU      SETA  &TU+6
         AIF   ('&SPACE(4)'(1,1) NE '''').B0320
&DV      SETC  'X''02'''
         AIF   ('&SPACE(4)'(2,3) EQ 'ALX').B0310
&DV      SETC  'X''04'''
         AIF   ('&SPACE(4)'(2,4) EQ 'MIXG').B0310
&DV      SETC  'X''08'''
.*
.B0310   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B0330
.*
.B0320   ANOP
         MVC   &TU.(1,14),&SPACE(4)
&TU      SETA  &TU+1
.*
.B0330   ANOP
         AIF   (T'&SPACE(5) EQ 'O').B0340
* ROUND
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'000F0000'
&TU      SETA  &TU+4
.*
.B0340   ANOP
         AIF   (T'&VOLUME EQ 'O').B0360
* VOLUME
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00100001'
&TU      SETA  &TU+4
         AIF   ('&VOLUME'(1,1) NE '''').B0350
&IND1    SETA  K'&VOLUME-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&VOLUME
&TU      SETA  &TU+2+&IND1
         AGO   .B0360
.*
.B0350   ANOP
         MVC   &TU.(8,14),&VOLUME
&TU      SETA  &TU+8
.*
.B0360   ANOP
         AIF   (T'&UNIT EQ 'O').B0380
* UNIT
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00150001'
&TU      SETA  &TU+4
         AIF   ('&UNIT'(1,1) NE '''').B0370
&IND1    SETA  K'&UNIT-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&UNIT
&TU      SETA  &TU+2+&IND1
         AGO   .B0380
.*
.B0370   ANOP
         MVC   &TU.(8,14),&UNIT
&TU      SETA  &TU+8
.*
.B0380   ANOP
         AIF   (T'&UCOUNT EQ 'O').B0400
* UNIT COUNT
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'001600010001'
&TU      SETA  &TU+6
         AIF   ('&UCOUNT'(1,1) NE '''').B0390
         L     1,=F&UCOUNT
         STC   1,&TU.(,14)
&TU      SETA  &TU+1
         AGO   .B0400
.*
.B0390   ANOP
         MVC   &TU.(1,14),&UCOUNT.+3
&TU      SETA  &TU+1
.*
.B0400   ANOP
         AIF   (T'&SYSOUT EQ 'O').B0430
* SYSOUT
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(2,14),=X'0018'
&TU      SETA  &TU+2
         AIF   ('&SYSOUT'(1,1) NE '''').B0420
         AIF   ('&SYSOUT'(2,1) NE '*').B0410
         MVC   &TU.(2,14),=X'0000'
&TU      SETA  &TU+2
         AGO   .B0430
.*
.B0410   ANOP
         MVC   &TU.(4,14),=X'00010001'
         MVI   &TU.+4(14),C&SYSOUT
&TU      SETA  &TU+5
         AGO   .B0430
.*
.B0420   ANOP
         MVC   &TU.(5,14),&SYSOUT
&TU      SETA  &TU+5
.*
.B0430   ANOP
         AIF   (T'&FORM EQ 'O').B0450
* FORM
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'001A0001'
&TU      SETA  &TU+4
         AIF   ('&FORM'(1,1) NE '''').B0440
&IND1    SETA  K'&FORM-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&FORM
&TU      SETA  &TU+2+&IND1
         AGO   .B0450
.*
.B0440   ANOP
         MVC   &TU.(6,14),&FORM
&TU      SETA  &TU+6
.*
.B0450   ANOP
         AIF   (T'&OUTLIM EQ 'O').B0470
* OUTLIM
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'001B00010003'
&TU      SETA  &TU+6
         AIF   ('&OUTLIM'(1,1) NE '''').B0460
         L     1,=F&OUTLIM
         STCM  1,7,&TU.(14)
&TU      SETA  &TU+3
         AGO   .B0470
.*
.B0460   ANOP
         MVC   &TU.(3,14),&OUTLIM.+1
&TU      SETA  &TU+3
.*
.B0470   ANOP
         AIF   (T'&FREE EQ 'O').B0480
* FREE
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'001C0000'
&TU      SETA  &TU+4
.*
.B0480   ANOP
         AIF   (T'&DEN EQ 'O').B0510
* DEN
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'003B00010001'
&TU      SETA  &TU+6
         AIF   ('&DEN'(1,1) NE '''').B0500
&DV      SETC  'X''03'''
         AIF   ('&DEN'(2,1) EQ '0').B0490
&DV      SETC  'X''43'''
         AIF   ('&DEN'(2,1) EQ '1').B0490
&DV      SETC  'X''83'''
         AIF   ('&DEN'(2,1) EQ '2').B0490
&DV      SETC  'X''C3'''
         AIF   ('&DEN'(2,1) EQ '3').B0490
&DV      SETC  'X''D3'''
.*
.B0490   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B0510
.B0500   ANOP
         MVC   &TU.(1,14),&DEN
&TU      SETA  &TU+1
.*
.B0510   ANOP
         AIF   (T'&COPIES EQ 'O').B0530
* COPIES
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'001D00010001'
&TU      SETA  &TU+6
         AIF   ('&COPIES'(1,1) NE '''').B0520
         L     1,=F&COPIES
         STC   1,&TU.(,14)
&TU      SETA  &TU+1
         AGO   .B0530
.*
.B0520   ANOP
         MVC   &TU.(1,14),&COPIES.+3
&TU      SETA  &TU+1
.*
.B0530   ANOP
         AIF   (T'&LABEL(1) EQ 'O').B0550
* LABEL(1)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'001F00010002'
&TU      SETA  &TU+6
         AIF   ('&LABEL(1)'(1,1) NE '''').B0540
         MVC   &TU.(2,14),=H&LABEL(1)
&TU      SETA  &TU+2
         AGO   .B0550
.*
.B0540   ANOP
         MVC   &TU.(2,14),&LABEL(1)
&TU      SETA  &TU+2
.*
.B0550   ANOP
         AIF   (T'&LABEL(2) EQ 'O').B0580
* LABEL(2)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'001E00010001'
&TU      SETA  &TU+6
         AIF   ('&LABEL(2)'(1,1) NE '''').B0570
&DV      SETC  'X''01'''
         AIF   ('&LABEL(2)'(2,2) EQ 'NL').B0560
&DV      SETC  'X''02'''
         AIF   ('&LABEL(2)'(2,2) EQ 'SL').B0560
&DV      SETC  'X''04'''
         AIF   ('&LABEL(2)'(2,3) EQ 'NSL').B0560
&DV      SETC  'X''08'''
         AIF   ('&LABEL(2)'(2,3) EQ 'SUL').B0560
&DV      SETC  'X''10'''
         AIF   ('&LABEL(2)'(2,3) EQ 'BLP').B0560
&DV      SETC  'X''21'''
         AIF   ('&LABEL(2)'(2,3) EQ 'LTM').B0560
&DV      SETC  'X''40'''
         AIF   ('&LABEL(2)'(2,2) EQ 'AL').B0560
&DV      SETC  'X''48'''
.*
.B0560   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B0580
.*
.B0570   ANOP
         MVC   &TU.(1,14),&LABEL(2)
&TU      SETA  &TU+1
.*
.B0580   ANOP
         AIF   (T'&LABEL(3) EQ 'O').B0610
* LABEL(3)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'002000010001'
&TU      SETA  &TU+6
         AIF   ('&LABEL(3)'(1,1) NE '''').B0600
&DV      SETC  'X''10'''
         AIF   ('&LABEL(3)'(2,8) EQ 'PASSWORD').B0590
&DV      SETC  'X''30'''
.*
.B0590   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B0610
.*
.B0600   ANOP
         MVC   &TU.(1,14),&LABEL(3).+3
&TU      SETA  &TU+1
.*
.B0610   ANOP
         AIF   (T'&LABEL(4) EQ 'O').B0640
* LABEL(4)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'002100010001'
&TU      SETA  &TU+6
         AIF   ('&LABEL(4)'(1,1) NE '''').B0630
&DV      SETC  'X''40'''
         AIF   ('&LABEL(4)'(2,3) EQ 'OUT').B0620
&DV      SETC  'X''80'''
.*
.B0620   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B0640
.*
.B0630   ANOP
         MVC   &TU.(1,14),&LABEL(4).+3
&TU      SETA  &TU+1
.*
.B0640   ANOP
         AIF   (T'&EXPDT EQ 'O').B0660
* EXPDT
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'002200010005'
&TU      SETA  &TU+6
         AIF   ('&EXPDT'(1,1) NE '''').B0650
         MVC   &TU.(5,14),=C&EXPDT
&TU      SETA  &TU+5
         AGO   .B0660
.*
.B0650   ANOP
         MVC   &TU.(5,14),&EXPDT
&TU      SETA  &TU+5
.*
.B0660   ANOP
         AIF   (T'&RETPD EQ 'O').B0680
* RETPD
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'002300010002'
&TU      SETA  &TU+6
         AIF   ('&RETPD'(1,1) NE '''').B0670
         MVC   &TU.(2,14),=H&RETPD
&TU      SETA  &TU+2
         AGO   .B0680
.*
.B0670   ANOP
         MVC   &TU.(2,14),&RETPD
&TU      SETA  &TU+2
.*
.B0680   ANOP
         AIF   (T'&FCB(1) EQ 'O').B0700
* FCB(1)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00250001'
         AIF   ('&FCB(1)'(1,1) NE '''').B0690
&IND1    SETA  K'&FCB(1)-2
         MVC   &TU.+4(2,14),=H'&IND1.'
         MVC   &TU.+6(&IND1.,14),=C&FCB(1)
&TU      SETA  &TU+6+&IND1
         AGO   .B0700
.*
.B0690   ANOP
         MVC   &TU.+4(6,14),&FCB(1)
&TU      SETA  &TU+10
.*
.B0700   ANOP
         AIF   (T'&FCB(2) EQ 'O').B0730
* FCB(2)
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'002600010001'
&TU      SETA  &TU+6
         AIF   ('&FCB(2)'(1,1) NE '''').B0720
&DV      SETC  'X''04'''
         AIF   ('&FCB(2)'(2,6) EQ 'VERIFY').B0710
&DV      SETC  'X''08'''
.*
.B0710   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B0730
.*
.B0720   ANOP
         MVC   &TU.(1,14),&FCB(2)
&TU      SETA  &TU+1
.*
.B0730   ANOP
         AIF   (T'&HOLD EQ 'O').B0740
* HOLD
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00590000'
&TU      SETA  &TU+4
.*
.B0740   ANOP
         AIF   (T'&QNAME EQ 'O').B0760
* QNAME
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00270001'
&TU      SETA  &TU+4
         AIF   ('&QNAME'(1,1) NE '''').B0750
&IND1    SETA  K'&QNAME-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&QNAME
&TU      SETA  &TU+2+&IND1
         AGO   .B0760
.*
.B0750   ANOP
         MVC   TU.(10,14),&QNAME
&TU      SETA  &TU+10
.*
.B0760   ANOP
         AIF   (T'&LRECL EQ 'O').B0780
* LRECL
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'004200010002'
&TU      SETA  &TU+6
         AIF   ('&LRECL'(1,1) NE '''').B0770
         MVC   &TU.(2,14),=H&LRECL
&TU      SETA  &TU+2
         AGO   .B0780
.*
.B0770   ANOP
         MVC   &TU.(2,14),&LRECL
&TU      SETA  &TU+2
.*
.B0780   ANOP
         AIF   (T'&BLKSIZE EQ 'O').B0800
* BLKSIZE
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'003000010002'
&TU      SETA  &TU+6
         AIF   ('&BLKSIZE'(1,1) NE '''').B0790
         MVC   &TU.(2,14),=H&BLKSIZE
&TU      SETA  &TU+2
         AGO   .B0800
.*
.B0790   ANOP
         MVC   &TU.(2,14),&BLKSIZE
&TU      SETA  &TU+2
.*
.B0800   ANOP
         AIF   (T'&RECFM EQ 'O').C0000
* RECFM
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(7,14),=X'00490001000100'
&TU      SETA  &TU+6
         AIF   ('&RECFM'(1,1) EQ '''').B0810
         MVC   &TU.(1,14),&RECFM
&TU      SETA  &TU+1
         AGO   .C0000
.*
.B0810   ANOP
&TAB1(01) SETC 'M'
&TAB2(01) SETC 'X''02'''
&TAB1(02) SETC 'R'
&TAB2(02) SETC 'X''02'''
&TAB1(03) SETC 'A'
&TAB2(03) SETC 'X''04'''
&TAB1(04) SETC 'G'
&TAB2(04) SETC 'X''04'''
&TAB1(05) SETC 'S'
&TAB2(05) SETC 'X''08'''
&TAB1(06) SETC 'B'
&TAB2(06) SETC 'X''10'''
&TAB1(07) SETC 'D'
&TAB2(07) SETC 'X''20'''
&TAB1(08) SETC 'T'
&TAB2(08) SETC 'X''20'''
&TAB1(09) SETC 'V'
&TAB2(09) SETC 'X''40'''
&TAB1(10) SETC 'F'
&TAB2(10) SETC 'X''80'''
&TAB1(11) SETC 'U'
&TAB2(11) SETC 'X''C0'''
.*
&IND1    SETA  2
.B0820   ANOP
         AIF   ('&RECFM'(&IND1,1) EQ '''').B0860
&IND2    SETA  1
.B0830   ANOP
         AIF   ('&TAB1(&IND2)' NE '&RECFM'(&IND1,1)).B0850
         OI    &TU.(14),&TAB2(&IND2)
.B0840   ANOP
&IND1    SETA  &IND1+1
         AGO   .B0820
.*
.B0850   ANOP
         AIF   (&IND2 EQ 11).B0840
&IND2    SETA  &IND2+1
         AGO   .B0830
.*
.B0860   ANOP
&TU      SETA  &TU+1
.*******
.C0000   ANOP
*
         LA    1,&TU&C1
         ST    1,&TP&C1
         MVC   &TU.(4,14),=X'00520000'
*
         MVI   &TP.(14),X'80'
* SVC 99
         LR    1,14
         SVC   99
* ERROR-CODES
         XC    &ERROR(1).(4),&ERROR(1)
         LH    1,8(,14)
         STCM  1,3,&ERROR(1)
         LH    1,10(,14)
         STCM  1,3,&ERROR(1).+2
.*
         AIF   (T'&FILE EQ 'O').C0005
         AIF   (N'&FILE EQ 1).C0005
* RETURN FILE
         MVI   &FILE(2).,X'40'
         MVC   &FILE(2).+1(9),&FILE(2)
         MVC   &FILE(2).(2),&FILEPR.(14)
         XR    1,1
         ICM   1,3,&FILEPR.(14)
         LTR   1,1
         BZ    &C2.B
         BCTR  1,0
         EX    1,&C2.A
         B     &C2.B
&C2.A    MVC   &FILE(2).+2(0),&FILEPR.+2(14)
&C2.B    DS    0H
.*
.C0005   ANOP
         AIF   (T'&DA EQ 'O').C0010
         AIF   (N'&DA EQ 1).C0010
* RETURN DA
         MVI   &DA(2).,X'40'
         MVC   &DA(2).+1(45),&DA(2)
         MVC   &DA(2).(2),&DSNPR.(14)
         XR    1,1
         ICM   1,3,&DSNPR.(14)
         LTR   1,1
         BZ    &C2.D
         BCTR  1,0
         EX    1,&C2.C
         B     &C2.D
&C2.C    MVC   &DA(2).+2(0),&DSNPR.+2(14)
&C2.D    DS    0H
.*
.C0010   ANOP
* FREEMAIN
         LA    1,&LGM.(,0)
         AIF   ('&ERROR(2)' EQ 'FREE').FREMAIN
         LTR   15,15
         BNZ   &C2.E
         AGO   .FREMAIM
.FREMAIN ANOP
         ST    15,&ERROR(1).+4
.FREMAIM ANOP
         FREEMAIN R,LV=&LGM.,A=(14)
         AIF   ('&ERROR(2)' NE 'FREE').FREMAIO
         L     15,&ERROR(1).+4
.FREMAIO ANOP
&C2.E    DS    0H
         MEXIT
         MEND
./ ADD  NAME=DESCRIPT
//Z222068P JOB (6695,068,2),CLASS=R,MSGCLASS=A
//PRINT EXEC PGM=BASFGEN
//SYSPRINT DD DUMMY
//SYSIN DD *
*MOVE=1,MOVEL=' ',MOVE=71**
//SYSUT2 DD DCB=(RECFM=FBA,LRECL=80,BLKSIZE=80),COPIES=10,
//          SYSOUT=(F,,580)
//SYSUT1 DD *
1

















  JJJJJ     OOOO    BBBBBBB   NN    NN  EEEEEEEE  TTTTTTTT  ZZZZZZZZ
  JJJJJ    OOOOOO   BBBBBBBB  NNN   NN  EEEEEEEE  TTTTTTTT  ZZZZZZZZ
     JJ   OO    OO  BB    BB  NNNN  NN  EE           TT           ZZ
     JJ   OO    OO  BB    BB  NN NN NN  EE           TT          ZZ
     JJ   OO    OO  BBBBBBB   NN  NNNN  EEEEEE       TT         ZZ
     JJ   OO    OO  BBBBBBB   NN   NNN  EEEEEE       TT        ZZ
     JJ   OO    OO  BB    BB  NN    NN  EE           TT       ZZ
     JJ   OO    OO  BB    BB  NN    NN  EE           TT      ZZ
  JJJJJ    OOOOOO   BBBBBBBB  NN    NN  EEEEEEEE     TT     ZZZZZZZZ
  JJJJ      OOOO    BBBBBBB   NN    NN  EEEEEEEE     TT     ZZZZZZZZ
1






 INHALTSVERZEICHNIS                               STAND: 09.10.1979






 1. ZUSAMMENHAENGE DES JOBNETZ-SYSTEMS


 2. SYNTAX DER *DJC-KARTEN

    2.1 ALLGEMEINE BESCHREIBUNG

    2.2 BESCHREIBUNG DER EINZELNEN PARAMETER

    2.3 UEBERSCHREIBUNGS-MOEGLICHKEITEN

 3. COMMANDS ZUR UEBERWACHUNG UND STEUERUNG DER JOB-NETZE

    3.1 ALLGEMEINE BESCHREIBUNG

    3.2 BESCHREIBUNG DES DISPLAY-COMMANDS

    3.3 BESCHREIBUNG DES WARTUNGS-COMMANDS

    3.4 BESCHREIBUNG DES PURGE-COMMANDS

    3.5 BESCHREIBUNG DES NET-COMMANDS

    3.6 BESCHREIBUNG DES SWITCH-COMMANDS

    3.7 BESCHREIBUNG DES FORMAT-COMMANDS

    3.8 BESCHREIBUNG DES CHANGE-COMMANDS

 4. NACHRICHTEN UND ABEND-CODES


 5. ERKLAERUNG DER STATUS-BYTES


 6. INSTALLATIONS UND OPERATING-HINWEISE
1






 1. ZUSAMMENHAENGE DES JOBNETZ-SYSTEMS




    DIE ANGABE OB UND WIE EIN JOB IN JOBNETZ-ABHAENGIGKEIT LAUFEN SOLL

    ERFOLGT GRUNDSAETZLICH IN FOLGEKARTEN DER JOBKARTE (SIEHE PUNKT 2).



    VOM READER-EXIT WERDEN DIESE KARTEN INTERPRETIERT UND ZENTRAL IN

    DER 'OX.NETCTRL' GESPEICHERT. DIESE DATEI IST SHARED. DER GE-

    SPEICHERTE INHALT KANN UEBER OPERATOR-COMMANDS ANGEZEIGT WERDEN



    BEI STEP-TERMINATION WIRD DER CONDITION-CODE GEPRUEFT. JEWEILS DER

    HOECHSTE CONDITION-CODE EINES JOBS WIRD IN DER JOBNETZ-DATEI FEST-

    GEHALTEN.



    IST EIN JOB BEENDET (JOB-TERMINATION), WIRD ZUNAECHST GEPRUEFT, OB

    DER JOB IM SINNE DER JOBNETZ-VERARBEITUNG NORMAL ODER ABNORMAL

    FERTIGGESTELLT WURDE. DANACH WERDEN DIE ENTSPRECHENDEN NACHFOLGER

    DIESES JOBS ANGESTOSSEN.



    BEIM STARTEN EINES NACHFOLGENDEN JOBS WIRD ERST GEPRUEFT, OB DER

    JOB BEREITS EINGELESEN WURDE. FALLS DER JOB SICH NICHT IN DER QUEUE

    BEFINDET, WIRD VERSUCHT, IHN VON DER 'OX.JOBQUE' ZU LESEN. SOLLTE ER

    AUCH DORT NICHT GEFUNDEN WERDEN, SO WIRD DER OPERATOR INFORMIERT.

    DER JOB MUSS DANN MANUELL EINGELESEN WERDEN.

    WIRD EIN JOB ZU FRUEH GESTARTET (Z.B. DURCH MANUELLES RELEASE),

    SO WIRD ER VOM SMF JOBINITIATION-EXIT ABGEBROCHEN.
1
 2. SYNTAX DER *DJC-KARTEN


 2.1 ALLGEMEINE BESCHREIBUNG


    ALLE DJC-JOBS MUESSEN IN DER 8. STELLE DES JOBNAMENS EIN '$' HABEN,
    DA NUR SO DIE ORDNUNGSGEMAESSE VERARBEITUNG DURCH DEN KONVERTER
    SICHERGESTELLT IST.


    DIE *DJC-KARTEN SIND BESTANDTEIL DER JOBKARTE. SIE WERDEN VOM
    BETRIEBSSYSTEM ALS KOMMENTAR-KARTEN ANGESEHEN UND NUR VOM READER-
    EXIT (DJC-MODULE) INTERPRETIERT. *DJC-KARTEN MUESSEN ALS LETZTE
    FORTSETZUNG DER JOBKARTE ANGELEGT WERDEN.


    DIE ERSTE *DJC-KARTE MUSS IN DEN SPALTEN 1-15 '// TYPRUN=HOLD ',
    ALLE *DJC-KARTEN MUESSEN IN DEN SPALTEN 16-20 '*DJC ' ENTHALTEN.
    IN DEN SPALTEN 21-71 KOENNEN IN BELIEBIGER REIHENFOLGE DIE
    DJC-PARAMETER ANGEGEBEN WERDEN.




             SPALTEN × 1-15            × 16-20 × 21-71         × 72 ×
    KARTEN           ×                 ×       ×               ×    ×
    -----------------×-+-------------+-×-+---+-×---------------×-+--×
                     ×                 ×       ×               ×    ×
    1. DJC-KARTE     × // TYPRUN=HOLD  × *DJC  × DJC-PARAMETER × *  ×
                     ×                 ×       ×               ×    ×
    -----------------×-+-------------+-×-+---+-×---------------×-+--×
                     ×                 ×       ×               ×    ×
    DJC-FOLGEKARTE   × //              × *DJC  × DJC-PARAMETER × *  ×
                     ×                 ×       ×               ×    ×
    -----------------×-+-------------+-×-+---+-×---------------×-+--×
                     ×                 ×       ×               ×    ×
    LETZTE DJC-KARTE × //              × *DJC  × DJC-PARAMETER ×    ×
                     ×                 ×       ×               ×    ×
    -----------------×-+-------------+-×-+---+-×---------------×-+--×





    FOLGEKARTEN


    DAS VORHANDENSEIN EINER FOLGEKARTE WIRD DURCH BEENDIGUNG DES
    PARAMETER-STRINGS MIT ', ' (KOMMA/BLANK) ANGEZEIGT. DIE SPALTE 72
    MUSS EIN NONBLANK-CHARACTER ENTHALTEN. EINZELNE PARAMETER KOENNEN
    NUR NACH EINEM AUFTRETENDEN KOMMA GETRENNT WERDEN. BEISPIEL:


    // TYPRUN=HOLD *DJC ID=KKMTN01,HC=2,NR=(KK03401$,        *00000200
    //             *DJC KK04401$)                             00000300
1






 2.  SYNTAX DER *DJC-KARTEN


 2.2 BESCHREIBUNG DER EINZELNEN DJC-PARAMETER




    DIE BESCHREIBUNG DER EINZELNEN PARAMETER ERFOLGT AN DIESER STELLE
    IN DER ALPHABETISCHEN REIHENFOLGE.




    FOLGENDE PARAMETER SIND GUELTIG:



    AC = ABNORMAL CANCEL JOBS

    AR = ABNORMAL RELEASE JOBS

    CC = COMPLETION CODE

    DM = DUMMY JOB

    EX = EXECUTABLE JOBS

    HC = HOLD COUNT

    ID = JOBNET IDENTIFICATION

    NC = NORMAL CANCEL JOBS

    NE = NONEXECUTABLE JOBS

    NN = NEW NETID

    NR = NORMAL RELEASE JOBS

    OH = OPERATOR HOLD
12.  SYNTAX DER *DJC-KARTEN


 2.2 BESCHREIBUNG DER EINZELNEN DJC-PARAMETER



    AC = ABNORMAL CANCEL JOBS

         DIESER PARAMETER SPEZIFIZIERT DIE JOBS, DIE GECANCELT WERDEN
         SOLLEN, FALLS DER JOB ABNORMAL BEENDET WIRD.
         MAXIMAL 20 JOBNAMEN KOENNEN ANGEGEBEN WERDEN.
         DIE ANGABE DER JOBNAMEN ERFOLGT IMMER (AUCH BEI NUR EINEM
         NAMEN) IN KLAMMERN.

         DEFAULTS:   KEINE
         BEISPIEL:   ---,AC=(KK03201$,KK03301$),---


    AR = ABNORMAL RELEASE JOBS

         DURCH DIESEN PARAMETER WERDEN DIE JOBS ANGEGEBEN, DIE
         RELEASED WERDEN SOLLEN, FALLS DER JOB ABNORMAL BEENDET WIRD.
         ES KOENNEN BIS ZU 20 JOBNAMEN SPEZIFIZIERT WERDEN.
         DIE ANGABE DER JOBNAMEN ERFOLGT GRUNDSAETZLICH IN KLAMMERN.
         DEM JOBNAMEN KOENNEN ATTRIBUTE BEIGEFUEGT WERDEN (Z.B.
         'HOLD').

         DEFAULTS:   KEINE
         BEISPIEL:   ---,AR=(ER06401$(HOLD),ER09902$),---


    CC = COMPLETION CODE

         DIESER PARAMETER SPEZIFIZIERT DEN COMPLETION CODE, BEI DESSEN
         UEBERSCHREITUNG DER JOB ALS ABNORMAL BEENDET ANGESEHEN WIRD.
         DIE ANGABE ERFOLGT IN 4 HEXADEZIMALEN ZEICHEN.

         0000 - 0FFF = RETURN-CODES
         E...        = USER ABEND CODE
         F...        = SYSTEM ABEND CODE
         FFFF        = STEP NOT EXECUTED BZW. JOB GECANCELT

         DEFAULTS:   0FFF (D.H. ALLE RETURN-CODES SIND ALS NORMAL ZU
                          BEWERTEN)
         BEISPIEL:   ---,CC=000C,--- (RETURN-CODE 12)

         BESONDERER HINWEIS: WENN DER STEPNAME MIT '$HK$' BEGINNT, SO
         WIRD DIE ABFRAGE AUF 'STEP NOT EXECUTED' UMGANGEN.
         AUF DIESE WEISE FUEHREN Z.B. COND=ONLY STEPS NICHT ZUM
         JOB-ABBRUCH FALLS KEIN ABEND VORLAG.
12.  SYNTAX DER *DJC-KARTEN


 2.2 BESCHREIBUNG DER EINZELNEN DJC-PARAMETER



    DM = DUMMY JOB

         DIESER PARAMETER ZEIGT AN, DASS ES SICH BEI DEM JOB UM EINEN
         DUMMY JOB HANDELT, DER NUR DURCH EINE EX-ANGABE AKTIVIERT
         WIRD.
         ES KANN NUR 'YES' ODER 'NO' ANGEGEBEN WERDEN.

         DIESER JOB WIRD NUR AUSGEFUEHRT, WENN BEI ERREICHEN DESSELBEN
         EINE EX-ANWEISUNG FUER IHN VORLIEGT. IST DIESES NICHT DER FALL,
         SO WIRD EINE NORMALE BEENDIGUNG DIESES JOBS SIMULIERT.

         DEFAULTS:   NO
         BEISPIEL:   ---,DM=YES,---


    EX = EXECUTABLE JOBS

         DIESER PARAMETER SPEZIFIZIERT DIE DUMMY JOBS, DIE AUSGEFUEHRT
         WERDEN SOLLEN. DIE ANGABE VON JOBS, WELCHE NICHT 'DM=YES'
         ENTHALTEN WIRD IGNORIERT.
         BIS ZU 20 JOBNAMEN KOENNEN ANGEGEBEN WERDEN.
         DIE ANGABE DER JOBNAMEN ERFOLGT GRUNDSAETZLICH (AUCH BEI NUR
         EINEM JOBNAMEN) IN KLAMMERN.

         DEFAULTS:   KEINE
         BEISPIEL:   ---,EX=(VS00501$,VS04603$),---


    HC = HOLD COUNT

         DURCH DEN HC-PARAMETER WIRD DIE ANZAHL DER VORLAEUFER JEDES
         JOBS FESTGELEGT.
         ES GIBT ZWEI HOLDCOUNTS: DEN HOLDCOUNT AUS DER HC-ANGABE IN
         DER DJC-KARTE UND DEN AKKUMULIERTEN HOLDCOUNT IN DER NETCTRL-
         DATEI. IMMER WENN EIN JOB ENDET, WIRD DER AKKUMULIERTE HOLD-
         COUNT DER VON IHM ABHAENGIGEN JOBS UM EINS HOCHGEZAEHLT.
         ALLE JOBS, BEI DENEN DIE DIFFERENZ DER BEIDEN HOLDCOUNTS 0
         ERREICHT, WERDEN RELEASED, ES SEI DENN SIE HABEN OH=YES.
         DIE ANGABE VON 'HC=0' BEDEUTET, DASS DER JOB SOFORT GESTARTET
         WIRD.

         DEFAULTS:   1
         BEISPIEL:   ---,HC=2,---


    ID = JOBNET IDENTIFICATION

         DER ID-PARAMETER IST DER EINZIGE PARAMETER DER UNBEDINGT IN
         DEN DJC-PARAMETERN ENTHALTEN SEIN MUSS.
         ER BEZEICHNET DEN JOBNETZ-NAMEN, DER SELBSTVERSTAENDLICH
         EINDEUTIG SEIN MUSS. DIE SPEZIFIKATIONEN ENTSPRECHEN DENEN
         EINES JOBNAMENS. (1-8STELLIG, ALPHANUMERISCH)
         DER NAME 'POINTER' IST RESERVIERT UND DARF NICHT VERGEBEN
         WERDEN.
         ES MUSS EIN NETZ UNTER DIESEM NAMEN EXISTIEREN (AUSSER ES
         WIRD 'NN=YES' ANGEGEBEN).

         DEFAULTS:   KEINE
         BEISPIEL:   ---,ID=KKMTN01,---
12.  SYNTAX DER *DJC-KARTEN


 2.2 BESCHREIBUNG DER EINZELNEN DJC-PARAMETER



    NC = NORMAL CANCEL JOBS

         DIESER PARAMETER SPEZIFIZIERT DIE JOBS, DIE GECANCELT WERDEN
         SOLLEN, FALLS DER JOB NORMAL BEENDET WIRD.
         BIS ZU 20 JOBNAMEN KOENNEN ANGEGEBEN WERDEN.
         DIE ANGABE DER JOBNAMEN ERFOLGT IMMER IN KLAMMERN.

         DEFAULTS:   DIE ANGEGEBENEN AR-JOBS
         BEISPIEL:   ---,NC=(GT00201$),---


    NE = NOTEXECUTABLE JOBS

         DIESER PARAMETER SPEZIFIZIERT DIE JOBS, DIE NICHT AUSGEFUEHRT
         WERDEN SOLLEN, OBWOHL SIE IM JOBNETZ ENTHALTEN SIND.
         JEDER NE-JOB WIRD ALS NORMAL BEENDET SIMULIERT. ANGEGEBENE
         JOBNAMEN, DIE NICHT IM NETZ ENTHALTEN SIND, WERDEN IGNORIERT.
         MAXIMAL 20 JOBNAMEN KOENNEN ANGEGEBEN WERDEN.
         DIE ANGABE DER JOBNAMEN ERFOLGT GRUNDSAETZLICH (AUCH BEI NUR
         EINEM JOBNAMEN) IN KLAMMERN.

         DEFAULTS:   KEINE
         BEISPIEL:   ---,NE=(LO03301$),---


    NN = NEW NETID

         DER NN-PARAMETER SOLLTE NUR IM ERSTEN JOB EINES NETZES ANGE-
         GEBEN WERDEN. ER BEDEUTET, DASS EIN NEUES NETZ AUFGEBAUT WIRD.
         IST UNTER DEM ANGEGEBENEN NETZ-NAMEN (ID-PARAMETER) NOCH EIN
         NETZ IN DER JOBNETZ-DATEI, SO ERFOLGT JCL-ERROR.
         ES KANN NUR 'YES' ODER 'NO' ANGEGEBEN WERDEN.
         WIRD 'NN=NO' (DEFAULT) SPEZIFIZIERT UND DAS DURCH DEN ID-
         PARAMETER ANGEGEBENE NETZ IST NICHT VORHANDEN, SO ENDET DER
         JOB MIT JCL ERROR.

         DEFAULTS:   NO
         BEISPIEL:   ---,NN=YES,---


    NR = NORMAL RELEASE JOBS

         DURCH DIESEN PARAMETER WERDEN DIE JOBS ANGEGEBEN, DIE
         RELEASED WERDEN SOLLEN, FALLS DER JOB NORMAL BEENDET WIRD.
         ES KOENNEN BIS ZU 20 JOBNAMEN SPEZIFIZIERT WERDEN.
         DIE ANGABE DER JOBNAMEN ERFOLGT GRUNDSAETZLICH IN KLAMMERN.
         DEM JOBNAMEN KOENNEN ATTRIBUTE BEIGEFUEGT WERDEN (Z.B.
         'HOLD').

         DEFAULTS:   KEINE
         BEISPIEL:   ---,NR=(VI00901$(HOLD)),---
12.  SYNTAX DER *DJC-KARTEN


 2.2 BESCHREIBUNG DER EINZELNEN DJC-PARAMETER



    OH = OPERATOR HOLD

         DER OH-PARAMETER BESAGT, DAS DIESER JOB NICHT AUTOMATISCH
         GESTARTET WERDEN SOLL, SONDERN VOM OPERATOR RELEASED WIRD.
         STEHT DER JOB ZUR VERARBEITUNG AN, SO WIRD DER OPERATOR
         DARUEBER INFORMIERT UND KANN IHN RELEASEN.
         'YES' ODER 'NO' SIND DIE ANGABEN FUER DIESEN PARAMETER.

         DEFAULTS:   NO
         BEISPIEL:   ---,OH=YES,---
12.  SYNTAX DER *DJC-KARTEN


 2.3 UEBERSCHREIBUNGS-MOEGLICHKEITEN



    GENERELLE UEBERNAHME VON TEILEN DES JOBNAMENS IN JEDE KARTE.
    ------------------------------------------------------------


    DIE ANGABE '##N' (N = 1-8) WIRD DURCH DAS ENTSPRECHENDE ZEICHEN
    AUS DEM JOBNAMEN (1.-8. STELLE) ERSETZT.

    BEISPIEL:

    //KK03402$ JOB (6213,899,2,,,RRR),CLASS=C,
    // TYPRUN=HOLD *DJC ID=KKMTN0##7,HC=2,NR=(KK0440##7$,KK0450##7$)
    //STEP1  EXEC PGM=KK034,PARM=EINSATZ##7

    RESULTAT:

    //KK03402$ JOB (6213,899,2,,,RRR),CLASS=C,
    // TYPRUN=HOLD *DJC ID=KKMTN02,HC=2,NR=(KK04402$,KK04502$)
    //STEP1  EXEC PGM=KK034,PARM=EINSATZ2

    DIESE FUNKTION IST UNABHAENGIG VON DER JOBNETZ-VERARBEITUNG.



    VARIABLE NR- BZW. AR-JOBS.
    --------------------------


    IM NR- BZW. AR-PARAMETER KOENNEN DIE JOBNAMEN @'S ENTHALTEN. BEIM
    RELEASE WERDEN DIE @-CHARACTER DURCH DIE ENTSPRECHENDEN ZEICHEN AUS
    DEM JOBNAMEN ERSETZT UND VERSUCHT EINEN JOB MIT DEM SO GEWONNENEN
    NAMEN ZU FINDEN. FALLS DAS NICHT GELINGT, WIRD AUS DER 'OX.JOBQUE'
    DAS MEMBER MIT DEM URSPRUENGLICH ANGEGEBENEN NAMEN GELESEN UND DER
    SUBSTITUIERTE JOBNAME EINGESETZT.

    BEISPIEL:

    //KK03401$ JOB (6132,.....
    // TYPRUN=HOLD *DJC ID=KKMTN01,NR=(KK@@@02$)

    WIRD 'KK03402$' NICHT GEFUNDEN, SO WIRD 'KK@@@02$' GELESEN UND IN
    'KK03402$' UMFUNKTIONIERT.

    BEI MEHREREN GLEICHEN ARBEITSGEBIETEN (NUMMERNKREISEN) BRAUCHEN
    SOMIT DIE JOBS EINES NETZES NUR EINMAL VORHANDEN ZU SEIN. SOLLTE
    ES SICH JEDOCH ALS NOTWENDIG ERWEISEN, EINEN BESTIMMTEN NUMMERN-
    KREIS MIT ANDEREN PARAMETERN ZU FAHREN, SO SIND LEDIGLICH DIE
    UNTERSCHIEDLICHEN JOBS UNTER IHREM RICHTIGEN NAMEN ABZUSPEICHERN.

13. COMMANDS ZUR UEBERWACHUNG UND STEUERUNG DER JOB-NETZE




 3.1.   ALLGEMEINE BESCHREIBUNG


       COMMANDS KOENNEN UEBER XCNTRL, TSO, ROSCOE UND PER BATCH-JOB

       AN DAS ZENTRALE COMMAND-MODULE UEBERGEBEN WERDEN,

       OUTPUT ERFOLGT DANN WIEDERUM UEBER DAS INPUT-MEDIUM

       --COMMANDS UEBER XCNTRL / ROSCOE (NACH 'V XCN')

         F X,DJC,<COMMAND>,<PARM1>,<PARM2>,<PARM3>

       --COMMANDS UEBER TSO :       ---

         FX DJC,<COMMAND>,<PARM1>,<PARM2>,<PARM3>

       --BATCH-JOB :                ---

         //DJC    EXEC DJC<,PARM.DJC='DJC,.....'>
         //DJC.DJCIN DD *                        )  MUSS ENTFALLEN WENN
         DJC,<COMMAND>,<PARM1>,<PARM2>,<PARM3>   )  DJC-COMMAND UEBER
         /*                                      )  PARM-FELD KOMMT.


       COMMAND SYNTAX :


       NACH DEM STRING 'DJC' FOLGEN DURCH KOMMA GETRENNT BIS ZU
       4 POSITIONS-PARAMETER (DJC,<P1>,<P2>,<P3>,<P4>)

       --PARM1 : COMMAND (Z.B.(D(=DISPLAY)))
                 1 STELLIG ALPHABETHISCH

       --PARM2 : NETZ-NAME (Z.B. KKMTN01)
                 1-8 STELLIG ALPHANUMERISCH

       --PARM3 : JOB-NAME/ALL (Z.B. KK02401$)
                 1-8 STELLIG ALPHANUMERISCH

       --PARM4 : FUER SONDERFUNKTIONEN (Z.B LIBRDLM, CANCEL, PURGE)
                 1-8 STELLIG ALPHABETHISCH
1    ____________________________________
     ×-----------------------------------×
     ×                                   ×
 3.2.× D I S P L A Y  -  C O M M A N D   ×
     ×                                   ×
     ×-----------------------------------×
      -----------------------------------

    -- DJC,D×,POINTER
            ×,NETID
            ×,NETID,ALL
            ×,NETID,ALL<,LIBRDLM×,HCLO×,HCHE×,SHORT×,CCHI×,NOVL×
                        ,CANCEL×,EX×,PURGE>
            ×,NETID,JOBID

    --  DISPLAY BEI COMMAND DJC,D

        NETID    STATUS NUMBER OF JOBS           CREATION  LAST USE
        KKMTN01  0000   H=004 R=004 O=004 P=000  11091017  11091220
        DFTGN02  0000   H=017 R=017 O=017 P=000  11090909  11091140
        USMTN01  0000   H=008 R=008 O=008 P=000  10092021  11090832
        USTGN02  0000   H=006 R=006 O=006 P=000  11091212  11091555
        USTGN01  0000   H=013 R=013 O=013 P=000  11091340  11091350
        VSMTN01  0000   H=004 R=004 O=004 P=000  09090909  10091411

    --  DISPLAY BEI COMMAND DJC,D,KKMTN01

        NETID    STATUS NUMBER OF JOBS           CREATION  LAST USE
        KKMTN01  0000   H=004 R=004 O=004 P=000  11091017  11091220

    --  ERKLAERUNG DES OUTPUT'S :

        NETID         : NETZ-NAME
        STATUS        : SIEHE ERKLAERUNG NQSTATUS-BYTES
        NUMBER OF JOBS: H=XXX ANZAHL EINGELESENER JOBS/NETZ
                        R=XXX ANZAHL GESTARTETER JOBS/NETZ
                        O=XXX ANZAHL GEDRUCKTER JOBS/NETZ
                        P=XXX ANZAHL GEPURGTER JOBS/NETZ
        CREATION      : ERSTELLUNGS/DATUM/ZEIT DES NETZES
        LAST USE      : LETZE AENDERUNG DES NETZES DATUM/ZEIT

    --  DISPLAY BEI COMMAND DJC,D,POINTER

        PTNAVBLK  PTLSTBLK   PTLOCK    PTNAVQUE  PTSTATUS
        00110000  00630000   C1F6F8F4  0000010C  0000

     -- ERKLAERUNG DES OUTPUT'S :

        PTNAVBLK      : NAECHSTER VERFUEGBARER DATEN-BLOCK (HEXA)
        PTLSTBLK      : LETZTER VERFUEGBARER DATEN-BLOCK (HEXA)
        PTLOCK        : POINTER LOCK
        PTNAVQUE      : NAECHSTER VERFUEGBARER NETZ-ENTRY-EINTRAG (HEXA)
        PTSTATUS      : SIEHE ERKLAERUNG PTSTATUS-BYTES


    --  DISPLAY BEI COMMAND DJC,D,NETID,ALL

        NACHFOLGENDER OUTPUT WIRD BEI ANGABE DES PARAMETER'S  'ALL'
        FUER ALLE IN DIESEM NETZ BEFINDLICHE JOB'S ERSTELLT.
1    ×-----------------------------------×
     ×                                   ×
 3.2.× D I S P L A Y  -  C O M M A N D   ×
     × FORTSETZUNG                       ×
     ×-----------------------------------×
      -----------------------------------

        NETNAME  JOBNAME  STATUS  SUB DJCHC ACCHC DJCCC HIGHCC
        KKMTN01  KK03401$   0401   00  0000  0000  0FFF   0000

                    CREATING  RELEASING  TERMINATING  PURGING
        TIMESTAMP:  11091017   11091823     11091920 00000000
        JOB-SEQ. :      0001       0001         0001     0004
        NRJOBS   :KK03501$ KK03601$     ×
        JESTATUS :0000     0000         ×
        ARJOBS   :                      ×
        JESTATUS :                      ×
        NCJOBS   :                      ×    WIRD NUR ANGEZEIGT
        JESTATUS :                      >
        ACJOBS   :                      ×    WENN ENTSPRECHENDE
        JESTATUS :                      ×
        EXJOBS   :                      ×    INFORMATIONEN
        JESTATUS :                      ×
        NEJOBS   :                      ×    VERFUEGBAR
        JESTATUS :                      ×

    --  DISPLAY BEI COMMAND DJC,D,NETID,JOBID

        GLEICHER OUTPUT WIE IN VORHERGEHENDEN COMMAND JEDOCH
        NUR FUER DEM IM JOBID-PARAMETER SPEZIFIZIERTEN JOBNAME

    --  ERKLAERUNG DES OUTPUT'S :

        NETNAME       : NETZ-NAME
        JOBNAME       : JOB-NAME
        STATUS        : JOB-STATUS(SIEHE ERKLAERUNG JQSTATUS-BYTES)
        SUB           : SUBSTITIUTION-BYTE
        DJCHC         : HOLD-COUNT AUS JOB-KARTE
        ACCHC         : ACCUMULIERTER HOLD-COUNT
        DJCCC         : COMPLETION CODE AUS JOB-KARTE
        HIGHCC        : HOECHSTER COMPLETION-CODE DES JOB'S

        TIMSTAMP'S  ---------------------------
        CREATING      : JOB CREATION ZEIT
        RELEASING     : JOB RELEASE ZEIT
        TERMINATING   : JOB TERMINIERUNG ZEIT
        PURGING       : JOB PURGE ZEIT

        JOB-SEQ.    ---------------------------
        CREATING      : WURDE ALS X-TER JOB DES NETZES EINGELESEN
        RELEASING     : WURDE ALS X-TER JOB DES NETZES RELEASED
        TERMINATING   : WURDE ALS X-TER JOB DES NETZES TERMINIERT
        PURGING       : WURDE ALS X-TER JOB DES NETZES GEPURGED

        NRJOBS        : NORMAL RELEASE JOB'S
        ARJOBS        : ABNORMAL RELEASE JOB'S
        NCJOBS        : NORMAL CANCEL JOB'S
        ACJOBS        : ABNORMAL CANCEL JOB'S
        EXJOBS        : EXECUTABLE JOB'S
        NEJOBS        : NON-EXECUTEABLE JOB'S

        JESTATUS      : SIEHE ERKLAERUNG JESTATUS-BYTES
1    ×-----------------------------------×
     ×                                   ×
 3.2.× D I S P L A Y  -  C O M M A N D   ×
     × FORTSETZUNG                       ×
     ×-----------------------------------×
      -----------------------------------

 --  FUNKTION DER ZUSATZPARAMETER BEI DJC,D,NETID,ALL

 LIBRDLM: VERWENDUNG NUR BEI BATCH-AUFRUF (SPDJC08) ERLAUBT.
          BEI ANGABE DIESES PARAMETERS WERDEN ALLE IM NETZ BEFINDLICHEN
          JOBS AUS DER LIBRARIAN ZWISCHENQUEUE (OX.JOBQUE) ENTFERNT.
          ES WIRD KEINE LISTE AUSGEGEBEN.

 CANCEL:  VERWENDUNG NUR BEI BATCH-AUFRUF ERLAUBT. DISPLAY-AUSGABE WIE
          BEI DJC,D,NETID,ALL.
          DURCH ANGABE DIESES PARAMETERS WERDEN ALLE IM NETZ BEFIND-
          LICHEN JOBS, DIE BISHER NICHT NICHT BEENDET WURDEN, GECANCELLT
          HIERMIT KOENNEN Z.B. AM ENDE DES NETZES NICHT BENUTZTE JOBS
          ('LEICHEN') AUS DER JES2-QUEUE ENTFERNT WERDEN.

 PURGE:   WIE CANCEL, ABER STATT CANCEL WIRD JES2-PURGE CMD. GEGEBEN.

 SHORT:   GEKUERZTE DISPLAY-AUSGABE. PRO JOB ERSCHEINT NUR EINE ZEILE.

 HCLO:    AUSGABE WIE BEI SHORT. ES WERDEN NUR JENE JOBS ANGEZEIGT,
          DEREN HOLDCOUNT NOCH NICHT DEN GEFORDERTEN WERT (DJCHC)
          ERREICHT HAT UND DEMZUFOLGE NOCH NICHT ANLAUFEN KOENNEN.

 HCHE:    AUSGABE WIE BEI SHORT. ES WERDEN JEDOCH NUR JENE JOBS
          ANGEZEIGT, DEREN HOLDCOUNT (ACCHC) BEREITS GROESSER ODER
          GLEICH DEM IN DER DJC-KARTE GEFORDERTEN WERT IST,
          DEMZUFOLGE RELEASED SIND (FALLS NICHT OH=YES) UND
          ZUR VERARBEITUNG ANSTEHEN.

 CCHI:    AUSGABE WIE BEI SHORT. ES WERDEN JEDOCH NUR JENE JOBS
          ANGEZEIGT, DEREN CONDITION CODE GROESSER ALS DER IN DER DJC-
          KARTE MAXIMAL ZULAESSIGE IST UND DEMZUFOLGE IM SINNE
          DER NETZ-VERARBEITUNG ALS ABNORMAL BEENDIGT ANZUSEHEN
          SIND.

 NOVL:    ES WERDEN NUR DIE NICHT UEBERLAGERTEN JOBS ANGEZEIGT.
0EX:      ES WERDEN NUR DIE NAMEN DER JOBS ANGELISTET, FUER DIE EINE
          EX-ANWEISUNG VORLIEGT.
          ACHTUNG: NACH VERWENDUNG DES CHANGE-BEFEHLS FUER DEN DUMMY-
          STATUS (FX DJC,C,DM=YES/NO) WIRD DIE EX-ANWEISUNG IGNORIERT!
1     ___________________________________
     ×-----------------------------------×
     ×                                   ×
 3.3.× W A R T U N G S - C O M M A N D   ×
     ×                                   ×
     ×-----------------------------------×
      -----------------------------------

    --  DJC,M,× LOCKOFF×,FORCE
              × PASSWORT--->  NUR FUER SYSTEM-PROGRAMMIERUNG
              × STATUS
              × RESTART --->  NUR FUER SYSTEM-PROGRAMMIERUNG



        MIT COMMAND 'DJC,M,LOCKOFF' KANN BEI ERSCHEINEN DER
        MELDUNG DJC031I/DJC032I DAS LOCK AUF DIE JOB-NETZ-STEUER-DATEI
        AUFGEHOBEN WERDEN.
        BEI ANGABE DES PARAMETERS 'FORCE' WIRD EIN EVENTUELL
        BESTEHENDES LOCK VON EINEM ANDEREN SYSTEM IGNORIERT.
        DIESER PARAMETER MUSS ANGEGEBEN WERDEN, WENN AUF EIN NORMALES
        LOCKOFF DIE MELDUNG DJC032I ERFOLGT UND DAS ANDERE SYSTEM
        FUER LAENGERE ZEIT STEHT.



        MIT COMMAND 'DJC,M,STATUS' KANN ERMITTELT WERDEN VON WELCHEM
        JOB UND SEIT WELCHER ZEIT DAS LOCK GEHALTEN WIRD.


        MIT COMMAND 'DJC,M,PASSWORT' KANN DIE ADRESSE EINES DATEN-
        BLOCKES ANGEFORDERT WERDEN, UM ANSCHLIESSEND MIT F X,ALTR
        EINGRIFFE IN DEN DATEN VORNEHMEN ZU KOENNEN.


        MIT COMMAND 'DJC,M,RESTART' WIRD DIE KOMPLETTE CONTROL-
        BLOCK-STRUKTUR DER JOBNETZ-PROGRAMME NEU AUFGEBAUT.
1     ___________________________________
     ×-----------------------------------×
     ×                                   ×
 3.4.× P U R G E  - C O M M A N D        ×
     ×                                   ×
     ×-----------------------------------×
      -----------------------------------

    --  DJC,P,NETID

        MIT COMMAND 'DJC,P,NETID'  KANN DAS IN NETID-PARAMETER
        ANGEGEBENE NETZ VON DER JOB-NETZ-STEUER-DATEI ENTFERNT
        WERDEN.
1     ___________________________________
     ×-----------------------------------×
     ×                                   ×
 3.5.× N E T Z  - C O M M A N D          ×
     ×                                   ×
     ×-----------------------------------×
      -----------------------------------

    --  DJC,N,NETID,× ACTIVE      -->FUER SYSTEM-PROGRAMMIERUNG
                    × INACTIVE    -->UND SYSTEM-OPERATION






    - MIT COMMAND 'DJC,N,NETID,INACTIVE' KANN EIN NETZ ANGEHALTEN
      WERDEN.
    - EIN BEREITS GESTARTETER JOB WIRD DAVON NICHT BETROFFEN.
    - KEIN WEITERER JOB DES NETZES WIRD RELEASED.




    - MIT COMMAND 'DJC,N,NETID,ACTIVE' KANN EIN VORHER INAKTIV
      GESETZTES NETZ WIEDER AKTIVIERT WERDEN.
    - DER JOB VOR DESSEN AUSFUEHRUNG DAS NETZ INACTIVE GESETZT WURDE
      IST PER HAND ZU RELEASEN.
1     ___________________________________
     ×-----------------------------------×
     ×                                   ×
 3.6.× S W I T C H - C O M M A N D       ×
     ×                                   ×
     ×-----------------------------------×
      -----------------------------------

    --  DJC,I,PASSWORT,×ON --->  NUR FUER SYSTEM-PROGRAMMIERUNG
                       ×OFF

        -------------------------------------------------------------
        **** NUR IM AEUSSERSTEM NOTFALL ZU BENUTZEN!!!!         *****
        -------------------------------------------------------------


        MIT COMMAND 'DJC,I,PASSWORT,OFF' KOENNEN SAEMTLICHE IM SYSTEM
        BEFINDLICHE JOB-NETZ-ENTRIES AUF DUMMY GESETZT WERDEN.
        EINE JOB-NETZ-VERARBEITUNG IST NICHT MEHR MOEGLICH.


        MIT COMMAND 'DJC,I,PASSWORT,ON' KOENNEN SAEMTLICHE IM SYSTEM
        BEFINDLICHE JOB-NETZ-ENTRIES WIEDER AKTIVIERT WERDEN.
1     ___________________________________
     ×-----------------------------------×
     ×                                   ×
 3.7.× F O R M A T - C O M M A N D       ×
     ×                                   ×
     ×-----------------------------------×
      -----------------------------------

    --  DJC,F,PASSWORT,BLOCKZAHL -->   FUER SYSTEM-PROGRAMMIERUNG
                                       UND SYSTEM-OPERATION


    -------------------------------------------------------------------
    **** COMMAND NUR IN DRINGENDEN FAELLEN BENUTZEN !!!!!!!!      *****
    -------------------------------------------------------------------







        MIT COMMAND 'DJC,F,PASSWORT,BLOCKZAHL' DIENT ZUR NEUANLAGE
        DER JOB-NETZ-STEUER-DATEI.
        ALLE BEREITS VORHANDENEN INFORMATIONEN WERDEN GELOESCHT.
        -------------------------------------------------------

        BLOCKZAHL IST IMMER VIERSTELLIG MIT FUEHRENDEN NULLEN
        ANZUGEBEN, UND DARF NICHT < 10 SEIN.
1     ___________________________________
      ×-----------------------------------×
      ×                                   ×
  3.8.× C H A N G E - C O M M A N D       ×
      ×                                   ×
      ×-----------------------------------×
      -----------------------------------

    --  DJC,C,NETID,JOBNAME,×OH=YES
                            ×OH=NO
                            ×DM=YES
                            ×DM=NO

    OH=YES/NO  : DURCH DIESEN PARAMETER WIRD DAS OPERATOR-HOLD FLAG
                 GESETZT BZW. GELOESCHT.

    DM=YES/NO  : DURCH DIESEN PARAMETER WIRD DAS DUMMY-ATTRIBUT FUER
                 DEN JEWEILIGEN JOB GESETZT BZW. ENTFERNT.
                 WURDE DAS DUMMY-ATTRIBUT FUER EINEN JOB GEAENDERT,
                 SO WERDEN FUER DIESEN JOB ALLE EX-ANWEISUNGEN
                 AUS DEN DJC-KARTEN GRUNDSAETZLICH IGNORIERT!
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     ×                                           SPDJC01      ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC011D / OVERFLOW FIRST BLOCK                          ×
 × URSACHE   : ES SIND BEREITS 100 NETZE ANGELEGT,                     ×
 ×           : ALLE NET-QUEUE ENTRIES SIND BELEGT.                     ×
 × REAKTION  : *** SYSTEM-PROGRAMMIERUNG BENACHRICHTIGEN ***           ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC012D / NO SPACE AVAILABLE                            ×
 × URSACHE   : ES SIND ALLE VERFUEGBAREN DATEN-BLOECKE BELEGT          ×
 × REAKTION  : BEREITS ABGEARBEITETE NETZE LOESCHEN !                  ×
 ×           : *** SYSTEM-PROGRAMMIERUNG BENACHRICHTIGEN ***           ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC013E / NET IS STILL ACTIVE                           ×
 × URSACHE   : EIN JOB WURDE MIT NN=YES EINGELESEN UND EIN NETZ        ×
 ×           : GLEICHEN NAMENS WAR NOCH AKTIV.                         ×
 × REAKTION  : NETID AENDERN ODER ALTES NETZ ZUENDE LAUFEN LASSEN      ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC014I NETID NOT FOUND AND NN=NO                       ×
 × URSACHE   : EIN NEUES NETZ SOLLTE ERSTMALIG AUFGEBAUT WERDEN,       ×
 ×           : NN=YES WAR NICHT GESETZT.                               ×
 × REAKTION  : JOB NOCHMALS MIT PARAMETER NN=YES EINLESEN.             ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG                               SPDJC02      ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC021I / NET=XXXXXXXX JOB=XXXXXXXX NOT IN JOBQUEUE     ×
 × URSACHE   : JOB NICHT IN DER JES2-JOBQUEUE.                         ×
 × REAKTION  : KEINE - ES WIRD VERSUCHT, DEN JOB MIT DJCSUB AUS        ×
 ×           : DER OX.JOBQUE ZU LESEN.
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC022D / JOB NOT IN NETID                              ×
 × URSACHE   : JOB KONNTE NICHT IN SPEZIFIZIERTEN NETZ GEFUNDEN WERDEN.×
 × REAKTION  : BERICHTIGE UND STARTE ENTSPRECHENDEN JOB.               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC023D / NETID NOT FOUND                               ×
 × URSACHE   : NETZ KONNTE NICHT IN OX.NETCTRL GEFUNDEN WERDEN.        ×
 × REAKTION  : BERICHTIGE NETZ-NAME                                    ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC024I / NET=XXXXXXXX JOB=XXXXXXXX JCL-ERROR -         ×
 ×           : HOLDCOUNT IS TOO LOW                                    ×
 × URSACHE   : Z.B. JOB WURDE MANUELL RELEASED                         ×
 × REAKTION  : KEINE                                                   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC025I / JOB TERMINATED BY DJC BECAUSE OF CONDITION -  ×
 ×           : CODES                                                   ×
 × URSACHE   : BEI STEP-TERMINATION WAR DER CONDITION/ABEND - CODE     ×
 ×           : GROESSER ALS DER MAXIMAL ZULAESSIGE (CC=...)            ×
 × REAKTION  : CC BZW. JOB UEBERPRUEFEN. EV. STEPNAME = $HK$           ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC026I / NET=XXXXXXXX JOB=XXXXXXXX JCL-ERROR BECAUSE   ×
 ×           : JOB SHOULD HAVE BEEN CANCELLED.                         ×
 × URSACHE   : DJC CANCEL BEFEHL WURDE NICHT AUSGEFUEHRT, DA Z.B.      ×
 ×           : JES2 NICHT AKTIV WAR.                                   ×
 × REAKTION  : KEINE                                                   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG                               SPDJC03      ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC031I / JOBNETDS NOT AVAILABLE                        ×
 × URSACHE   : LOCK AUF DATA SET OX.NETCTRL WIRD VON DIESEM SYSTEM     ×
 ×           : GEHALTEN.                                               ×
 × REAKTION  : 3 MINUTEN WARTEN,FALLS MELDUNG WIEDERHOLT ERSCHEINT     ×
 ×           : BEFEHL 'DJC,M,LOCKOFF' AN DIESEM SYSTEM DURCHFUEHREN.   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC032I / JOBNETDS RESERVED FROM ANOTHER SYSTEM         ×
 × URSACHE   : LOCK AUF DATA SET OX.NETCTRL WIRD VOM ANDEREN SYSTEM    ×
 ×           : GEHALTEN.                                               ×
 × REAKTION  : 3 MINUTEN WARTEN,FALLS MELDUNG WIEDERHOLT ERSCHEINT     ×
 ×           : BEFEHL 'DJC,M,LOCKOFF' AM ANDEREN SYSTEM DURCHFUEHREN.  ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC033D / JOBNETDS OPEN FAILED                          ×
 × URSACHE   : JOB-NETZ STEUER-DATEI 'OX.NETCTRL' KONNTE NICHT         ×
 ×           : EROEFFNET WERDEN.                                       ×
 × REAKTION  : EVT. WURDE FALSCHES DD-STATEMENT ANGEGEBEN.             ×
 ×           : *** SYSTEM PROGRAMMIERUNG BENACHRICHTIGEN ***           ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC034D / PTLSTBLK IS ZERO                              ×
 × URSACHE   : POINTER-ELEMENT IST DEFEKT,DA LETZER VERFUEGBARER       ×
 ×           : BLOCK GELOESCHT WURDE.(ANGABE < 10 IST UNKORREKT)       ×
 × REAKTION  : *** SYSTEM PROGRAMMIERUNG BENACHRICHTIGEN ***           ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG                               SPDJC04      ×
     × MELDUNGEN BEI EINGABE VON COMMANDS                     ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC040I / NO JOBS AVAILABLE                             ×
 × URSACHE   : UNTER SPEZIFIZIERTEM NETZ WURDEN KEINE JOB-QUEUE-ENTRIES×
 ×           : GEFUNDEN.                                               ×
 × REAKTION  : ENTFAELLT                                               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC041I / INVALID COMMAND                               ×
 × URSACHE   : ES WURDE EIN UNGUELTIGER COMMAND-CODE EINGEGEBEN.       ×
 × REAKTION  : GIB BERICHTIGTEN COMMAND NOCHMALS EIN.                  ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC042I / JNCB NOT PRESENT - COMMAND IGNORED            ×
 × URSACHE   : JOB-NET-CONTROL-BLOCK NICHT VERFUEGBAR,                 ×
 ×           : EVT.IST ADRESSE IN DER SMCA DEFEKT.                     ×
 × REAKTION  : *** SYSTEM PROGRAMMIERUNG BENACHRICHTIGEN ***           ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC043I / NETID NOT FOUND                               ×
 × URSACHE   : SPEZIFIZIERTES NETZ IST NICHT VORHANDEN.                ×
 × REAKTION  : KORRIGIERE NETZ-ANGABE UND WIERDERHOLE COMMAND.         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC044I / JOB NOT FOUND                                 ×
 × URSACHE   : SPEZIFIZIERTER JOB KONNTE NICHT IM ANGEGEBENEN NETZ     ×
 ×           : GEFUNDEN WERDEN.                                        ×
 × REAKTION  : KORRIGIERE NETZ,BZW. JOB-ANGABE UND WIEDERHOLE COMMAND  ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC045I / INVALID REQUEST                               ×
 × URSACHE   : BEI M-COMMAND WURDEN FEHLERHAFTER SUB-COMMAND ANGEGEBEN.×
 × REAKTION  : KORRIGIERE UND WIEDERHOLE COMMAND                       ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC046I / XXXXXXXX AT LOCATION YYYYYYYY                 ×
 × URSACHE   : ANTWORT AUF COMMAND 'DJC,M,PASSWORT'                    ×
 × REAKTION  : ENTFAELLT                                               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC047I / NO NETIDS                                     ×
 × URSACHE   : OX.NETCTRL IST NEU FORMATISIERT UND ENTHAELT            ×
 ×           : NOCH KEINE NETZE.                                       ×
 × REAKTION  : ENTFAELLT                                               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC048I / FAST LOCKOFF SUCCESSFULLY ISSUED              ×
 × URSACHE   : COMMAND 'DJC,M,LOCKOFF' WURDE ERFOLGREICH DURCHGEFUEHRT.×
 × REAKTION  : ENTFAELLT                                               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC049I / JOBNET CONTROL BLOCK AVAILABLE                ×
 × URSACHE   : ANTWORT AUF COMMAND 'DJC,M,STATUS',                     ×
 ×           : JNCB IST VERFUEGBAR.                                    ×
 × REAKTION  : ENTFAELLT                                               ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG                               SPDJC04      ×
     × MELDUNGEN BEI EINGABE VON COMMANDS                     ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0410I/ JNCB LOCKED FROM XXXXXXXX AT YYYYYYYY         ×
 × URSACHE   : ANTWORT AUF COMMAND 'DJC,M,STATUS',                     ×
 ×           : XXXXXXXX=JOB VON DEM DAS LOCK GEHALTEN WIRD,            ×
 ×           : YYYYYYYY=ZEIT SEIT DER DAS LOCK GEHALTEN WIRD.          ×
 × REAKTION  : ENTFAELLT                                               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0411I/ INVALID SUBCOMMAND                            ×
 × URSACHE   : EIN UNGUELTIGER SUB-COMMAND WURDE SPEZIFIZIERT.         ×
 × REAKTION  : KORRIGIERE UND WIEDERHOLE COMMAND.                      ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0412I/ FORMAT SPECIFICATION ERROR                    ×
 × URSACHE   : BEI BENUTZUNG DES FORMAT COMMANDS WURDE EIN UNGUELTIGER ×
 ×             PARAMETER ANGEGEBEN.                                    ×
 × REAKTION  : KORRIGIERE ENTSPRECHENDE ANGABE UND WIEDERHOLE COMMAND. ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0413I/ JOB-NET SWITCH ON SUCCESSFULLY ISSUED         ×
 × URSACHE   : SWITCH ON WURDE ERFOLGREICH DURCHGEFUEHRT.              ×
 × REAKTION  : KEINE                                                   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0414I/ JOB-NET SWITCH OFF SUCCESSFULLY ISSUED        ×
 × URSACHE   : SWITCH OFF WURDE ERFOLGREICH DURCHGEFUEHRT.             ×
 × REAKTION  : KEINE                                                   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0415I/ SWITCH SPECIFICATION ERROR                    ×
 × URSACHE   : BEI BENUTZUNG DES SWITCH COMMNDS WURDE EIN UNGUELTIGER  ×
 ×             PARAMETER ANGEGEBEN.                                    ×
 × REAKTION  : KORRIGIERE ENTSPRECHENDE ANGABE UND WIEDERHOLE COMMAND. ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0416I/ PURGE SPECIFICATION ERROR                     ×
 × URSACHE   : BEI BENUTZUNG DES PURGE COMMNDS WURDE EIN UNGUELTIGER   ×
 ×             PARAMETER ANGEGEBEN.                                    ×
 × REAKTION  : KORRIGIERE ENTSPRECHENDE ANGABE UND WIEDERHOLE COMMAND. ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0417I/ NET-PURGE SUCCESSFULLY ISSUED                 ×
 × URSACHE   : DAS SPEZIFIZIERTE NETZ WURDE ERFOLGREICH GELOESCHT.     ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0418I/ NET XXXXXXXX NOW ACTIVE                       ×
 × URSACHE   : EIN NETZ WURDE MITTELS DJC,N,NETID,ACTIVE-COMMAND       ×
 ×             WIEDER IN AKTIV STATUS VERSETZT.                        ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0419I/ NET XXXXXXXX NOW INACTIVE                     ×
 × URSACHE   : EIN NETZ WURDE MITTELS DJC,N,NETID,INACTIVE-COMMAND     ×
 ×             AUF INAKTIV STATUS GESETZT.                             ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG                               SPDJC04      ×
     × MELDUNGEN BEI EINGABE VON COMMANDS                     ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0420I/ NET SPECIFICATION-ERROR                       ×
 × URSACHE   : BEI DER BENUTZUNG DES NET-COMMANDS WURDE EIN UNGUELTIGER×
 ×             PARAMETER ANGEGEBEN.                                    ×
 × REAKTION  : KORRIGIERE FEHLERHAFTE ANGABE UND WIEDERHOLE COMMAND.   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0421I/ FORMAT SUCCESSFULLY ISSUED                    ×
 × URSACHE   : DIE JOB-NETZ-STEUER-DATEI WURDE ERFOLGREICH FORMATISIERT×
 × REAKTION  : KEINE                                                   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0422I/ XXXXXXXX - DD-STMT. MISSING                   ×
 × URSACHE   : DD-KARTE FEHLT                                          ×
 × REAKTION  : DD-KARTE ANLEGEN UND COMMAND WIEDERHOLEN.               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0423I/ REQUESTED CHANGE HAS BEEN PERFORMED           ×
 × URSACHE   : DIE DURCH DJC,C,... ANGEFORDERTE AENDERUNG DER          ×
 ×           : JOBNETZ-KONTROLLDATEI WURDE ERFOLGREICH DURCHGEFUEHRT.  ×
 × REAKTION  : KEINE                                                   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0424I/ SMCA-EXTENSION NOT AVAILABLE                  ×
 × URSACHE   : SMF-EXIT IEFU83 NICHT AKTIV, ODER ES WURDE NOCH KEIN    ×
 ×           : SMF-SATZ GESCHRIEBEN.                                   ×
 × REAKTION  : SMFPRMXX (PARMLIB) UEBERPRUEFEN ODER FX DJC,M,RESTART   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC0425I/ RESTART PROCESSING COMPLETE                   ×
 × URSACHE   : ES WURDE EIN FX,DJC,M,RESTART - COMMAND GEGEBEN.        ×
 × REAKTION  : KEINE                                                   ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG                               SPDJC05      ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC051E / PARAMETER SPECIFICATION INVALID               ×
 × URSACHE   : ZUM FORMATISIEREN DES NETZES WURDE EINE UNGUELTIGE      ×
 ×           : BLOCK-ANGABE GEMACHT.                                   ×
 ×           : BLOCK-ANGABE = MIN.10,MAX.999/NUMERISCH                 ×
 × REAKTION  : KORRIGIERE ANGABE UND WIEDERHOLE FORMATIERUNG.          ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC052E / NUMBER OF BLOCKS < 10                         ×
 × URSACHE   : DIE ANZAHL DER ZU FORMATISIERENDEN BLOECKEN IST < 10 .  ×
 × REAKTION  : KORRIGIERE ANGABE UND WIEDERHOLE FORMATISIERUNG.        ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC053E / OPEN JOBNETDS UNSUCCESSFULL                  ×
 × URSACHE   :  FEHLER BEIM EROEFFNEN DER JOB-NETZ-STEUER-DATEI,       ×
 ×           :  'OX.NETCTRL'.                                          ×
 × REAKTION  :  KORRIGIERE EVT. FEHLER IM DD-STATEMENT.                ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG  SPDJC06/SPDJC07/SPDJC08/SPDJC09/SPDJC10   ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC061I / XX OPERAND INVALID                            ×
 × URSACHE   : FEHLERHAFTE ANGABE IN DJC-PARAMETERN                    ×
 ×           : XX = FEHLERHAFTER PARAMETER (ZB.(ID)).                  ×
 × REAKTION  : KORRIGIERE ENTSPRECHENDEN PARAMETER UND WIEDERHOLE JOB. ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC070I / NET XXXXXXXX NOT FOUND                        ×
 × URSACHE   : EIN JOB SOLLTE SUBMITTED WERDEN,DAS ANGEGEBENE NETZ     ×
 ×           : KONNTE NICHT GEFUNDEN WERDEN.                           ×
 × REAKTION  : *** SYSTEM PROGRAMMIERUNG BENACHRICHTIGEN ***           ×
 ×           :  EVT.JOB MANUELL STARTEN.                               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC071I / NET XXXXXXXX IS HELD                         ×
 × URSACHE   :  DAS SPEZIFIZIERTE NETZ WURDE GESTOPT.                  ×
 × REAKTION  :  NETZ IST WIEDER ZU STARTEN,UND ENTSPRECHENDER JOB      ×
 ×           :  IST ZU RELEASEN.                                       ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC072I / JOB XXXXXXXX NOT FOUND                       ×
 × URSACHE   :  EIN JOB SOLLTE SUBMITTED WERDEN ,ER KONNTE NICHT IM    ×
 ×           :  ANGEGEBENEN NETZ GEFUNDEN WERDEN.                      ×
 × REAKTION  : *** SYSTEM PROGRAMMIERUNG BENACHRICHTIGEN ***           ×
 ×           :  EVT.JOB MANUELL STARTEN.                               ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC073I / JOB XXXXXXXX HELD                            ×
 × URSACHE   :  SPEZIFIZIERTER JOB WURDE NICHT RELEASED DA PARAMETER   ×
 ×           :  OH=YES GESETZT WAR.                                    ×
 × REAKTION  :  RELEASE JOB MANUELL                                    ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC08XI / K E I N E  M E L D U N G E N  !!!            ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC09XI / K E I N E  M E L D U N G E N  !!!            ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC101E / LIBRARIAN ERROR ON OX.JOBQUE                 ×
 × URSACHE   :  LIBRARIAN BRACHTE UNERWARTETEN RETURN-CODE.            ×
 × REAKTION  :  SYSTEMOPERATION/-PROGRAMMIERUNG VERSTAENDIGEN.         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :  DJC102I / NET=XXXXXXXX JOB=XXXXXXXX NOT FOUND IN       ×
 ×           :  OX.JOBQUE                                              ×
 × URSACHE   :  JOB SOLLTE MIT DJCSUB EINGELESEN WERDEN UND WURDE      ×
 ×           :  NICHT GEFUNDEN.                                        ×
 × REAKTION  :  EVT. JOB MANUELL STARTEN.                              ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 4.0.× N A C H R I C H T E N  U N D  A B E N D - C O D E S    ×
     × FORTSETZUNG  SPDJC10/SPDJC99                           ×
     ×--------------------------------------------------------×
      --------------------------------------------------------

 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC103E / ERROR IN PARAMETER                            ×
 × URSACHE   : FEHLERHAFTES PARM-FELD WURDE AN DJCSUB UEBERGEBEN       ×
 × REAKTION  : SYSTEMPROGRAMMIERUNG VERSTAENDIGEN.                     ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT : DJC99XI / K E I N E   M E L D U N G E N                 ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
 ×---------------------------------------------------------------------×
 × NACHRICHT :                                                         ×
 × URSACHE   :                                                         ×
 × REAKTION  :                                                         ×
 ×---------------------------------------------------------------------×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 5.0.× E R K L A E R U N G  D E R  S T A T U S - B Y T E S    ×
     ×                                                        ×
     ×--------------------------------------------------------×
      --------------------------------------------------------


    -- PTSTATUS BYTE0      JOB-NETZ-POINTER

                1... ....  ×
                .1.. ....  ×
                ..1. ....  ×
                ...1 ....   > UNBENUTZT
                .... 1...  ×
                .... .1..  ×
                .... ..1.  ×
                .... ...1  ×


    -- PTSTATUS BYTE1      JOB-NETZ-POINTER

                1... ....  ×
                .1.. ....  ×
                ..1. ....  ×
                ...1 ....   > UNBENUTZT
                .... 1...  ×
                .... .1..  ×
                .... ..1.  ×
                .... ...1  ×


    -- NQSTATUS BYTE0      NETZ-QUEUE-ENTRY

                1... ....  NETZ STATUS IST HOLD
                .1.. ....  ×
                ..1. ....  ×
                ...1 ....   > UNBENUTZT
                .... 1...  ×
                .... .1..  ×
                .... ..1.  ×
                .... ...1  ×


    -- NQSTATUS BYTE1      NETZ-QUEUE-ENTRY

                1... ....  ×
                .1.. ....  ×
                ..1. ....  ×
                ...1 ....   > UNBENUTZT
                .... 1...  ×
                .... .1..  ×
                .... ..1.  ×
                .... ...1  ×
1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 5.0.× E R K L A E R U N G  D E R  S T A T U S - B Y T E S    ×
     ×                                                        ×
     ×--------------------------------------------------------×
      --------------------------------------------------------


    -- JQSTATUS BYTE0      JOB-QUEUE-ENTRY

                1... ....  OPERATOR HOLD (OH=YES) WURDE GESETZT
                .1.. ....  DUMMY-JOB (DM=YES) WURDE GESETZT
                ..1. ....  JOB GEPURGED OHNE JOB-TERMINATION
                ...1 ....  JOB WAR BEREITS EINGELESEN
                .... 1...  JOB IST GECANCELD
                .... .1..  JOB IST NORMAL GEENDET
                .... ..1.  JOB IST ABNORMAL GEENDET
                .... ...1  JOB WURDE BEI WIEDERHOLUNGSLAUF UEBERLAGERT


    -- JQSTATUS BYTE1      JOB-QUEUE-ENTRY

                1... ....  DUMMY JOB NICHT IN EX-QUEUE
                .1.. ....  JOB IN NE-QUEUE
                ..1. ....  ES ERFOLGTE CHANGE FUER OH
                ...1 ....  ES ERFOLGTE CHANGE FUER DM
                .... 1...  JCL-ERROR GESETZT DURCH DJC INIT. EXIT
                .... .1..  RELEASE PENDING DA NETZ INAKTIV WAR/IST
                .... ..1.  ×  UNBENUTZT
                .... ...1  JOB WURDE GEPURGED



    -- JESTATUS BYTE0      JOB-ENTRY

                1... ....  JOB-ATTRIBUTE IST HOLD (NR=(KK03401#(HOLD))
                .1.. ....  JOB WURDE DURCH DJCSUB EINGELESEN
                ..1. ....  ×UNBENUTZT
                ...1 ....  JOB NICHT IN DATEI 'OX.JOBQUE'
                .... 1...  JOB RELEASED
                .... .1..  JOB WURDE DURCH SPDJC02 EINGELESEN
                .... ..1.  JOB WIRD NICHT AUSGEFUEHRT(MUSS JEDOCH DURCH
                           DAS NETZ GESCHLEUST WERDEN)
                .... ...1  JOB IST GECANCELD


    -- JESTATUS BYTE1      JOB-ENTRY

                1... ....  ×
                .1.. ....  ×
                ..1. ....  ×
                ...1 ....   > UNBENUTZT
                .... 1...  ×
                .... .1..  ×
                .... ..1.  ×
                .... ...1  ×

1     ________________________________________________________
     ×--------------------------------------------------------×
     ×                                                        ×
 5.0.× E R K L A E R U N G  D E R  S T A T U S - B Y T E S    ×
     ×                                                        ×
     ×--------------------------------------------------------×
      --------------------------------------------------------


    -- JCSTATUS BYTE0      JOB-NET-CONTROLBLOCK

                1... ....  LOCKOFF,FORCE IN CONTROL
                .1.. ....  NODUMP-OPTION FUER @DUMP IST AKTIV
                ..1. ....
                ...1 ....
                .... 1...
                .... .1..
                .... ..1.
                .... ...1


    -- JCSTATUS BYTE1      JOB-NET-CONTROLBLOCK

                1... ....
                .1.. ....
                ..1. ....
                ...1 ....
                .... 1...
                .... .1..
                .... ..1.
                .... ...1
16.0 INSTALLATIONS- UND OPERATING HINWEISE
     -------------------------------------


 6.1 ALLOCATION DER JOBNETZ-DATEIEN

       IN DER DATEI Z222068.NETSRC.ASM STEHT UNTER DEM MEMBER-NAMEN
       ALLOCDS EIN JOB ZUR ALLOCATION DER JOBNETZ-DATEIEN ZUR
       VERFUEGUNG.
       FOLGENDES DD-STMT MUSS IN DIE PROCEDURES JES2 UND INIT
       EINGEFUEGT WERDEN:

        //JOBNETDS DD DSN=OX.NETCTRL,DISP=SHR,UNIT=3350,VOL=SER=DAX11


 6.2 VERLUST ODER DEFEKT DER JOBNETZ-DATEIEN

       BEI VERLUST ODER DEFEKT DER JOBNETZ-DATEIEN LAESST SICH
       WEDER JES2 NOCH EIN INIT HOCHFAHREN!

       ES MUSS FOLGENDERMASSEN VERFAHREN WERDEN:

          S JES2,SID=XX,NET='DUMMY '    (DUMMY IN GROSSBUCHSTABEN!)

       DANACH MUSS MITTELS TSO IN DEN PROCEDURES JES2 UND INIT
       (SYS1.PROCLIB) DIE DD-KARTE FUER DIE DATEI OX.NETCTRL
       IN EINE KOMMENTAR-KARTE (//*.....) GEAENDERT WERDEN.

       DIE NETWORK-SOFTWARE MUSS MIT F X,DJC,I,SWITCH,OFF
       DEAKTIVIERT WERDEN. JOBNET-JOBS KOENNEN ERST WIEDER LAUFEN,
       WENN DIE DATEIEN NEU ERSTELLT UND DIE PROZEDUREN ZURUECK-
       GEAENDERT WORDEN SIND.

       NACH REKONSTRUKTION DER DATEIEN UND PROCEDURES IST WIE
       FOLGT ZU VERFAHREN:

       . STOPPEN ALLER INITS
       . STOPPEN DES JES2 ($PJES2,ABEND)
       . STARTEN JES2
       . STARTEN DER INITS
       . F X,DJC,I,SWITCH,ON
./ ADD  NAME=DFREE
         MACRO
&LAB     DFREE &ERROR=,&FILE=,&DA=,&MEMBER=,&DISP=,&HOLD=,&SYSOUT=
         LCLA  &POI,&LGM,&IND1,&IND2,&TU,&TP
         LCLC  &C2,&C1,&DV
&C2      SETC  'GAD'.'&SYSNDX'
.*
.* FIRST CHECK OPERANDS AND COMPUTE LENGTH FOR WORK-AEREA
&LGM     SETA  24
&POI     SETA  24
         AIF   (T'&DA NE 'O' OR T'&FILE NE 'O').A1002
.A1001   ANOP
         MNOTE 04,'MISSING KEYWORD DA, FILE, OR ERROR'
         MEXIT
.*
.A1002   ANOP
         AIF   (T'&ERROR EQ 'O').A1001
.*
         AIF   (T'&DA EQ 'O').A1009
         AIF   (K'&DA LT 47).A1004
.A1003   ANOP
         MNOTE 04,'INCORRECT ''DA'' VALUE'
         MEXIT
.*
.A1004   ANOP
         AIF   (N'&DA NE 1).A1003
.*
.A1005   ANOP
         AIF   ('&DA'(1,1) NE '''').A1008
&IND1    SETA  2
&IND2    SETA  1
.A1006   ANOP
         AIF   ('&DA'(&IND1,1) NE '.').A1007
&IND2    SETA  1
&IND1    SETA  &IND1+1
         AGO   .A1006
.*
.A1007   ANOP
         AIF   ('&DA'(&IND1,1) EQ '''').A1008
         AIF   (&IND2 GT 8).A1003
&IND2    SETA  &IND2+1
&IND1    SETA  &IND1+1
         AGO   .A1006
.*
.A1008   ANOP
&LGM     SETA  &LGM+4+50
&POI     SETA  &POI+4
.A1009   ANOP
         AIF   (T'&FILE EQ 'O').A1013
         AIF   (K'&FILE LT 11).A1011
.A1010   ANOP
         MNOTE 04,'INCORRECT ''FILE'' VALUE'
         MEXIT
.*
.A1011   ANOP
         AIF   (N'&FILE GT 1).A1010
.*
.A1012   ANOP
&LGM     SETA  &LGM+4+14
&POI     SETA  &POI+4
.*
.A1013   ANOP
         AIF   (T'&MEMBER EQ 'O').A1016
         AIF   ('&MEMBER'(1,1) NE '''').A1015
         AIF   (K'&MEMBER LT 11).A1015
.*
.A1014   ANOP
         MNOTE 04,'INCORRECT ''MEMBER'' VALUE'
         MEXIT
.*
.A1015   ANOP
&LGM     SETA  &LGM+4+14
&POI     SETA  &POI+4
.*
.A1016   ANOP
         AIF   (T'&DISP EQ 'O').A1019
         AIF   ('&DISP'(1,1) NE '''').A1018
         AIF   ('&DISP'(2,7) NE 'UNCATLG' AND '&DISP'(2,5) NE 'CATLG' A*
               ND '&DISP'(2,6) NE 'DELETE' AND '&DISP'(2,4) NE 'KEEP').*
               A1017
         AGO   .A1018
.*
.A1017   ANOP
         MNOTE 04,'INCORRECT ''DISP'' VALUE'
         MEXIT
.*
.A1018   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.*
.A1019   ANOP
         AIF   (T'&HOLD EQ 'O').A1022
         AIF   ('&HOLD'(1,1) NE '''').A1021
         AIF   ('&HOLD'(2,3) NE 'YES' AND '&HOLD'(2,2) NE 'NO').A1020
         AGO   .A1021
.*
.A1020   ANOP
         MNOTE 04,'INCORRECT ''HOLD'' VALUE'
         MEXIT
.*
.A1021   ANOP
&LGM     SETA  &LGM+4+4
&POI     SETA  &POI+4+4
.*
.A1022   ANOP
         AIF   (T'&SYSOUT EQ 'O').B1000
         AIF   ('&SYSOUT'(1,1) NE '''').A1024
         AIF   (K'&SYSOUT LT 4).A1024
.*
.A1023   ANOP
         MNOTE 04,'INCORRECT ''SYSOUT'' VALUE'
         MEXIT
.*
.A1024   ANOP
&LGM     SETA  &LGM+4+7
&POI     SETA  &POI+4
.************************ READY ********************
.*
.************** NOW GENERATION *********************
.B1000   ANOP
&LGM     SETA  &LGM+8+8
&POI     SETA  &POI+4
.*  GENERATE MACRO-LABEL
         AIF   ('&LAB' EQ '').B1005
&LAB     DS    0H
.*
.B1005   ANOP
.*  G E N E R A T E  INSTRUCTIONS
         GETMAIN R,LV=&LGM
         LR    14,1
         LR    0,1
         LA    14,0(0,14)
         LA    1,&LGM.(,0)
         XR    15,15
         MVCL  0,14
.*
         LA    1,4(,14)
         ST    1,0(,14)
         MVC   4(2,14),=X'1402'
         LA    1,24(,14)
         ST    1,12(,14)
         MVI   0(14),X'80'
.* FILE
&C1      SETC  '(,14)'
&TP      SETA  24
&TU      SETA  &POI
         AIF   (T'&FILE EQ 'O').B1015
* FILE
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00010001'
&TU      SETA  &TU+4
         AIF   ('&FILE'(1,1) NE '''').B1010
&IND1    SETA  K'&FILE-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&FILE
&TU      SETA  &TU+2+&IND1
         AGO   .B1015
.*
.B1010   ANOP
         MVC   &TU.(10,14),&FILE
&TU      SETA  &TU+10
.*
.B1015   ANOP
         AIF   (T'&DA EQ 'O').B1025
* DA
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00020001'
         AIF   ('&DA'(1,1) NE '''').B1020
&IND1    SETA  K'&DA-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&DA
&TU      SETA  &TU+2+&IND1
         AGO   .B1025
.*
.B1020   ANOP
         MVC   &TU.(46,14),&DA
&TU      SETA  &TU+46
.*
.B1025   ANOP
         AIF   (T'&MEMBER EQ 'O').B1035
* MEMBER
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(4,14),=X'00030001'
&TU      SETA  &TU+4
         AIF   ('&MEMBER'(1,1) NE '''').B1030
&IND1    SETA  K'&MEMBER-2
         MVC   &TU.(2,14),=H'&IND1.'
         MVC   &TU.+2(&IND1.,14),=C&MEMBER
&TU      SETA  &TU+2+&IND1
         AGO   .B1035
.*
.B1030   ANOP
         MVC   &TU.(10,14),&MEMBER
&TU      SETA  &TU+10
.*
.B1035   ANOP
         AIF   (T'&DISP EQ 'O').B1050
* DISP
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'000500010001'
&TU      SETA  &TU+6
         AIF   ('&DISP'(1,1) NE '''').B1045
&DV      SETC  'X''01'''
         AIF   ('&DISP'(2,7) EQ 'UNCATLG').B1040
&DV      SETC  'X''02'''
         AIF   ('&DISP'(2,5) EQ 'CATLG').B1040
&DV      SETC  'X''04'''
         AIF   ('&DISP'(2,6) EQ 'DELETE').B1040
&DV      SETC  'X''08'''
.*
.B1040   ANOP
         MVI   &TU.(14),&DV
&TU      SETA  &TU+1
         AGO   .B1050
.*
.B1045   ANOP
         MVC   &TU.(1,14),&DISP
&TU      SETA  &TU+1
.*
.B1050   ANOP
         AIF   (T'&SYSOUT EQ 'O').B1060
* SYSOUT
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         MVC   &TU.(6,14),=X'001800010001'
&TU      SETA  &TU+6
         AIF   ('&SYSOUT'(1,1) NE '''').B1055
         MVI   &TU.(14),C&SYSOUT
&TU      SETA  &TU+1
         AGO   .B1060
.*
.B1055   ANOP
         MVC   &TU.(1,14),&SYSOUT
&TU      SETA  &TU+1
.*
.B1060   ANOP
         AIF   (T'&HOLD EQ 'O').C0000
* HOLD
         LA    1,&TU&C1
         ST    1,&TP&C1
&TP      SETA  &TP+4
         AIF   ('&HOLD'(1,1) NE '''').B1070
&DV      SETC  'X''000A0000'''
         AIF   ('&HOLD'(2,2) EQ 'NO').B1065
&DV      SETC  'X''00590000'''
.*
.B1065   ANOP
         MVC   &TU.(4,14),&DV
&TU      SETA  &TU+4
         AGO   .C0000
.*
.B1070   ANOP
         MVC   &TU.(4,14),&HOLD
&TU      SETA  &TU+4
.*******
.C0000   ANOP
*
         LA    1,&TU&C1
         ST    1,&TP&C1
         MVC   &TU.(4,14),=X'00070000'
*
         MVI   &TP.(14),X'80'
* SVC 99
         LR    1,14
         SVC   99
* ERROR-CODES
         XC    &ERROR.(4),&ERROR
         LH    1,8(,14)
         STCM  1,3,&ERROR
         LH    1,10(,14)
         STCM  1,3,&ERROR.+2
* FREEMAIN
         LA    1,&LGM.(,0)
         LTR   15,15
         BNZ   &C2.E
         FREEMAIN R,LV=&LGM.,A=(14)
&C2.E    DS    0H
         MEXIT
         MEND
./ ADD  NAME=DJC
DJC      TITLE 'T#DJC : XCNTL(XC) -> SPDJC04T'
***********************************************************************
*                                                                     *
*              P R O L O G                                            *
*                                                                     *
***********************************************************************
*                                                                     *
*              PGM-FUNKTION : DIESES MODULE RUFT DAS MODULE SPDJC04   *
*                             AUF (MIT LINK).ES UEBERGIBT DIE ADRESSE *
*                             EINER PARAMETER-LISTE                   *
*                             XCNTL UNTER TSO OUTPUT = TPUT           *
***********************************************************************
*                                                                     *
*              PARAMETER : R1 = A(XPARM)                              *
*                                                                     *
*              EXTERNE ROUTINEN : SPDJC04                             *
***********************************************************************
         EJECT
DJC      CSECT
         XSAVE R12,,DJC,WORKL
         SPACE 3
         REG
         SPACE 1
         USING WORK,R13
         SPACE 3
         LR    R3,R1                    * SAVE R1
         XC    ERROR,ERROR
         DFREE FILE='JOBNETDS',ERROR=ERROR
         CLC   0(4,R3),=CL4'TSO'
         BNE   NOTSO3
         L     R1,16
         L     R1,0(R1)
         L     R1,12(R1)
         L     R1,60(R1)
         LA    R15,TM
         SVC   250
         B     OVERSVC
TM       EQU   *
         L     R15,24(R1)
         BR    R14
OVERSVC  EQU   *
         ST    R15,ERROR
         TM    ERROR+1,X'80'
         BO    NOTSO3
         TPUT  SMGRMSG,70
         B     NOROS
SMGRMSG  DC    CL70'XDJC001 X-DJC ONLY SUPPORTED UNDER SESSION-MANAGER'
NOTSO3   DS    0F
         XC    ERROR,ERROR
         DALLO FILE='JOBNETDS',ERROR=ERROR,DA='OX.NETCTRL',            C
               DISP='SHR'
         LR    R1,R3                    * RESTORE R1
         CLC   0(4,R1),=CL4'TSO'
         BNE   TSTROSC
         MVI   WKZ,X'02'
         B     BAS001
TSTROSC  EQU   *
         CLC   0(4,R1),=CL4'ROSC'
         BNE   CONSOLE
         MVI   WKZ,X'04'
         LR    R2,R1
         SH    R2,=H'8'    POINT TO ROSCOE OUTPUT-CODE
         MVC   SAVEOUT(4),0(R2)   SAVE IT
         MVC   0(4,R2),=F'16'    FORCE OUTPUT TO AWS
         ST    R2,SAVEREG
         B     BAS001
CONSOLE  EQU   *
         MVI   WKZ,X'01'
BAS001   EQU   *
         MVC   WOUT,1(R1)               * OUTPUT-UNIT(CONSOLID)
         MVC   WTEXT,4(R1)              *
         LA    R2,WTEXT                 * ADDR.COMMAND DJC
         ST    R2,WATEXT                * COMMAND DJC
         CLI   WKZ,X'02'    TSO ?
         BNE   NOTSO1
         LA    R15,SVCTRANS
         SVC   250
NOTSO1   EQU   *
         LA    R1,WPARM                 * ADDR.PARAMETER-LISTE
         LR    R4,R13
         L     R13,4(R13)
         LR    R5,R13
         MVC   SAVE(72),0(R13)
         SPACE 3
         LINK  EP=SPDJC04
         LR    R13,R4
         MVC   0(72,R5),SAVE
         CLI   WKZ,X'02'
         BNE   NOTSO2
         LA    R15,SVCOK
         SVC   250
NOTSO2   EQU   *
         SPACE 3
         XC    ERROR,ERROR
         DFREE FILE='JOBNETDS',ERROR=ERROR
         CLI   WKZ,4
         BNE   NOROS
         L     R2,SAVEREG
         MVC   0(4,R2),SAVEOUT
NOROS    EQU   *
         SR    R15,R15
         XRETURN ,R
SVCTRANS EQU   *
         SYSEVENT DONTSWAP
         SVC   3
SVCOK    EQU   *
         SYSEVENT OKSWAP
         SVC   3
SAVE     DS    18F
         EJECT
***********************************************************************
*        GETMAIN - WORK - AREA                                        *
***********************************************************************
WORK     DSECT
WSAVE    DS    18F
ERROR    DS    F
SAVEOUT  DS    F
SAVEREG  DS    F
         SPACE 4
***********************************************************************
*        PARAMETER - LISTE                                            *
***********************************************************************
WPARM    DS    0F
WKZ      DS    C                        * OUTPUT-TYPE
WOUT     DS    CL3                      * OUTPUT-UNIT (CONSOLID)
WATEXT   DS    CL4                      * ADRESSE PARAMETER AREA
WTEXT    DS    CL80                     * PARM-AREA
WORKL    EQU   *-WORK
         END
./ ADD  NAME=DJCPROC
//DJC EXEC PGM=SPDJC08
//JOBNETDS DD DSN=OX.NETCTRL,DISP=SHR
//DJCOUT DD SYSOUT=*
//MASTER DD DSN=OX.JOBQUE,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSIN DD UNIT=DISK,SPACE=(TRK,1)
//OSJOB DD DUMMY
./ ADD  NAME=DJCXHELP
%%HISTORY.
DATE-WRITTEN. 00/00/00.
LAST UPDATE.  29/11/78.
REMARKS.
    AUTHORISATION CODE MUST BE 1.
%%SYNTAX.
F X,DJC,D<,POINTER>×<,NETID>×<,NETID,ALL>×<,NETID,JOBID>
F X,DJC,D<,NETID,ALL,PARM>
....POINTER:   DISPLAY STATISTICS ABOUT NETWORK-D.S.
....NETID:     NAME OF NETWORK ABOUT WHICH INFORMATION
               IS TO BE DISPLAYED
....ALL×JOBID: SELECTION FOR JOB(S) TO BE DISPLAYED
....PARM:      FURTHER SELECTION CRITERIONS:
    =LIBRDLM:  ONLY IN BATCH: GENERATES LIBRARIAN DLM-CARDS
               AND FINALLY LINKS TO LIBRARIAN TO CLEAN UP THE
               OX.JOBQUEUE DATASET.
    =CANCEL:   ONLY IN BATCH: SHOULD ONLY BE ISSUED IMMEDIATLY
               BEFORE PURGING A NETID. ALL JOBS THAT DID NOT
               END EITHER ABNORMALLY OR NORMALLY ARE CANCELLED
               FROM THE JES2-INPUT-QUEUE.
    =NOVL:     FULL PRINT, BUT OVERLAYED JOBS ARE SUPPRESSED.
    =HCLO:     SHORT PRINT OF ALL JOBS WITH THE ACCUMULATED
               HOLDCOUNT BEING LESS THEN THE HOLDCOUNT
               SPECIFIED IN THE *DJC - CONTROL CARD.
               (I.E.: ALL JOBS, THAT ARE NOT READY TO RUN)
    =HCHE:     SHORT PRINT OF ALL JOBS WITH THE ACCUMULATED
               HOLDCOUNT BEING HIGHER THEN OR EQUAL TO THE
               HOLDCOUNT IN THE *DJC - CONTROL CARD.
               (I.E.: ALL JOBS THAT ARE READY TO RUN)
    =CCHI:     SHORT PRINT OF ALL JOBS WITH THE CONDITION-
               CODE BEING HIGHER THAN ALLOWED IN THE
               *DJC - CONTROL CARD (CC-PARAMETER).
               (I.E.: ALL JOBS THAT ENDED ABNORMALLY IN
               TERMS OF DJC.)
    =SHORT:    SHORT PRINT OF ALL JOBS IN THE NETID.
               ONLY ONE LINE PER JOB WILL BE LISTED.
    =EX:       DISPLAYS ONLY JOBS THAT ARE IN THE EX-QUEUE.

F X,DJC,C,NETID,JOBNAME,<OH=YES×OH=NO×DM=YES×DM=NO>
....OH=YES:    SETS THE OPERATOR-HOLD-FLAG ON
....OH=NO:     RESETS THE OPERATOR-HOLD-FLAG
....DM=YES:    SETS THE DUMMY-INDICATOR FOR THE JOB
....DM=NO:     RESETS THE DUMMY-INDICATOR FOR THE JOB

F X,DJC,M,<LOCKOFF×STATUS×RESTART>
....LOCKOFF:        RELEASE LOCK IN NETWORK-D.S.
....LOCKOFF,FORCE:  ONLY FOR SYSTEM-PROGRAMMERS
....STATUS:         DISPLAY LOCK-STATUS
....RESTART:        ONLY FOR SYSTEM-PROGRAMMERS

F X,DJC,P,NETID: DELETE THE SPECIFIED NETWORK
               FROM THE NETWORK-D.S.

F X,DJC,N,<NETID>,<ACTIVE×INACTIVE>
....INACTIVE:  SET THE SPECIFIED NETWORK INACTIVE
               RUNNING JOBS ARE NOT AFFECTED!
....ACTIVE:    REACTIVE THE SPECIFIED NETWORK

F X,DJC,I,<PASSWORD>,<ON×OFF>
....PASSWORD:  PASSWORD FOR THIS FUNCTION
....OFF:       DEACTIVATE ALL NETWORK-ENTRIES
               NO FURTHER NETWORK-PROCESSING IS POSSIBLE
....ON:        REACTIVATE THE NETWORK-ENTRIES

F X,DJC,F,<PASSWORD>,<BLOCK-NO>
....BLOCK-NO:  NO OF BLOCKS TO BE INITIALISED
               IN THE NETWORK-D.S. (MUST BE 4 CHARACTERS)
%%FUNCTION.
THE COMMAND 'DJC' IS USED TO DISPLAY SOME INFORMATION ABOUT
ALL OR SPECIFIED ACTIVE NETWORKS. ADDITIONALY IT CAN
BE USED TO CONTROL THE NETWORK-SYSTEM AND TO
MAINTAIN THE NETWORK-DATASET.
%%
./ ADD  NAME=DMANF
         MACRO
&LABEL   DMANF &PGM=YES,&ALIAS=NO,&ENTRY=NO,&EXTRN=NO,                 *
               &BASREG=(12),&SAVE=YES,&XSAVE=NO,                       *
               &ATTRIB=REUS,&WSYMB=YES,&WREGS=(14,15),                 *
               &EXPARM=NO,&CSPARM=NO
.*
         LCLC  &PNAME,&DMANFDT
.*
&DMANFDT SETC  '&SYSDATE'(4,2)'&SYSDATE'(1,2)'&SYSDATE'(7,2)'&SYSTIME'(*
               1,2)
.*
         AIF   ('&PGM' EQ '').PGM1
         AIF   ('&PGM' EQ 'YES' AND '&LABEL' EQ '').PGM1
         AIF   (N'&BASREG GT 3).REG1
.*
&PNAME   SETC  '&PGM'
         AIF   ('&PNAME' NE '' AND '&PNAME' NE 'YES').CALL
&PNAME   SETC  '&LABEL'
         AIF   ('&PNAME' EQ '').PGM1
&PNAME   SETC  '&PNAME'(1,7)
         AGO   .CALL
.*
.PGM1    ANOP
         MNOTE 12,'KEIN PROGRAMM-NAME ANGEGEBEN, KEINE GENERIERUNG'
         MEXIT
.*
.REG1    ANOP
         MNOTE 12,'MEHR ALS 3 BASIS-REGISTER, KEINE GENERIERUNG'
         MEXIT
.*
.CALL    AIF   ('&ALIAS' EQ 'NO' AND '&ENTRY' EQ 'NO' AND              *
               '&EXTRN' EQ 'NO' AND '&SAVE' EQ 'YES' AND               *
               '&XSAVE' EQ 'NO' AND '&ATTRIB' EQ 'REUS').CALL1
         AGO   .CALL2
.CALL1   AIF   ('&WSYMB' EQ 'YES' AND '&WREGS' EQ '(14,15)' AND        *
               '&EXPARM' EQ 'NO' AND '&CSPARM' EQ 'NO').CALL3
.*
.CALL2   ANOP
         AIF   (K'&SYSECT NE 0).NOSSI1
         PUNCH ' SETSSI &DMANFDT COMPILE-DATE FOR &PGM (TTMMJJSS)'
.NOSSI1  ANOP
         AIF   ('&XSAVE' NE 'YES').OKAY
&LABEL   DMANF1 P10=&PGM,P11=YES,P12=&ALIAS,P13=&ENTRY,P14=&EXTRN,     *
               P15=&BASREG,P16=&SAVE,P17=YES,P18=NO,P19=4,             *
               P20=&ATTRIB,P21=&WREGS,P22=&WSYMB,P23=YES,P24=NO,       *
               P25=&EXPARM,P26=&CSPARM
.*
         MEXIT
.OKAY    ANOP
&LABEL   DMANF1 P10=&PGM,P11=YES,P12=&ALIAS,P13=&ENTRY,P14=&EXTRN,     *
               P15=&BASREG,P16=&SAVE,P17=YES,P18=NO,P19=&XSAVE,        *
               P20=&ATTRIB,P21=&WREGS,P22=&WSYMB,P23=YES,P24=NO,       *
               P25=&EXPARM,P26=&CSPARM
.*
         MEXIT
.CALL3   ANOP
         AIF   (K'&SYSECT NE 0).NOSSI2
         PUNCH ' SETSSI &DMANFDT COMPILE-DATE FOR &PNAME (TTMMJJSS)'
.NOSSI2  ANOP
&DMANFDT SETC  '&SYSDATE'(4,2)'.&SYSDATE'(1,3)'.'.'&SYSDATE'(7,2)
&PNAME   CSECT
         B     32(0,15)
         DC    AL1(28)
         DC    CL7'&PNAME'              CSECT-NAME
         DC    CL9' &DMANFDT'           UMWANDLUNGS-DATUM
         DC    CL11'/&SYSTIME UHR '     UMWANDLUNGS-ZEIT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         STM   14,12,12(13)             SAVE REGS
         LA    &BASREG(1),0(15)         SET UP BASEREG
         USING &PNAME,&BASREG(1)        ADDRESSIBILITY
         AIF   ('&BASREG(2)' EQ '').GEN
         LA    &BASREG(2),2048(&BASREG(1).) SET UP 2. BASREG
         LA    &BASREG(2),2048(&BASREG(2).)
         USING &PNAME.+4096,&BASREG(2)      ADDRESSIBILITY
         AIF   ('&BASREG(3)' EQ '').GEN
         LA    &BASREG(3),2048(&BASREG(2).) SET UP 3. BASREG
         LA    &BASREG(3),2048(&BASREG(3).)
         USING &PNAME.+8192,&BASREG(3)      ADDRESSIBILITY
.GEN     ANOP
         LA    14,SV01####              LOAD OWN SAVE-AREA
         LM    15,1,16(13)              RESTORE REGS 15, 0 + 1
         ST    14,8(13)                 LOWER SAVE-AREA
         ST    13,4(14)                 HIGHER SAVE-AREA
         LR    13,14                    LOAD OWN SAVE-AREA
         CNOP  0,4
         B     *+4+72                   BRANCH AROUND
SV01#### DC    18F'0'                   SAVE-AREA
         SPACE
         MEND
./ ADD  NAME=DMANF1
      MACRO
&P00  DMANF1   &P10=YES,                                               +
               &P11=YES,                                               +
               &P12=NO,                                                +
               &P13=NO,                                                +
               &P14=NO,                                                +
               &P15=YES,                                               +
               &P16=YES,                                               +
               &P17=YES,                                               +
               &P18=NO,                                                +
               &P19=NO,                                                +
               &P20=REUS,                                              +
               &P21=YES,                                               +
               &P22=NO,                                                +
               &P23=NO,                                                +
               &P24=NO,                                                +
               &P25=NO,                                                +
               &P26=NO
.*
.*
.*********************************************************************
.**                                                                  *
.**      SPECIFICATION OF MACRO-OPERANDS (GENERAL) :                 *
.**                                                                  *
.**      PROTOTYPE-SYMBOLS + DEFAULT-VALUES                          *
.**                                                                  *
.*********************************************************************
.*                                                                   *
.*                                                                   *
.*       P00 : LABEL   : MACRO LABEL/SYMBOL                          *
.*           = N/A                                                   *
.*                                                                   *
.*       P10 : CSNAME  : CONTROL-SECTION MAIN-ENTRY SYMBOL           *
.*           = YES                                                   *
.*                                                                   *
.*       P11 : CSIDENT : CONTROL-SECTION IDENTIFICATION              *
.*           = YES                                                   *
.*                                                                   *
.*       P12 : CSALIAS : CONTROL-SECTION ALIAS-ENTRY SYMBOL(S)       *
.*           = NO                                                    *
.*                                                                   *
.*       P13 : CSENTRY : ADDITIONAL ENTRY-POINT SYMBOL(S)            *
.*           = NO                                                    *
.*                                                                   *
.*       P14 : CSEXTRN : ADDITIONAL EXTRN-POINT SYMBOL(S)            *
.*           = NO                                                    *
.*                                                                   *
.*       P15 : CSBASE  : CONTROL-SECTION BASE-REGISTER(S)            *
.*           = YES                                                   *
.*                                                                   *
.*       P16 : RGSAVE  : SAVING OF CALLER'S REGISTERS                *
.*           = YES                                                   *
.*                                                                   *
.*       P17 : SACHAIN : CHAINING OF PGM'S SAVE-AREAS                *
.*           = YES                                                   *
.*                                                                   *
.*       P18 : SAFLAG  : FLAGGING OF CALLER'S SAVE-AREA              *
.*           = NO                                                    *
.*                                                                   *
.*       P19 : XINFO   : EXTENDED INFORMATION SAVE-AREA              *
.*           = NO                                                    *
.*                                                                   *
.*       P20 : TCODE   : TYPE OF MACRO-CODE GENERATED                *
.*           = REUS                                                  *
.*                                                                   *
.*       P21 : WREGS   : INTERNALLY-USED WORK-REGISTERS              *
.*           = YES                                                   *
.*                                                                   *
.*       P22 : WSYMB   : INTERNALLY-USED WORK-SYMBOL                 *
.*           = NO                                                    *
.*                                                                   *
.*       P23 : EQGPR   : EQUATION OF GEN-PURPOSE REGISTERS           *
.*           = NO                                                    *
.*                                                                   *
.*       P24 : EQFPR   : EQUATION OF FLOAT-POINT REGISTERS           *
.*           = NO                                                    *
.*                                                                   *
.*       P25 : EXPARM  : RESOLUTION OF EXEC-STMNT PARAMETERS         *
.*           = NO                                                    *
.*                                                                   *
.*       P26 : CSPARM  : RESOLUTION OF CONTROL-SECTION PARMS         *
.*           = NO                                                    *
.*                                                                   *
.*
.*
.*       DEFINITION OF MACRO GLOBAL-VARIABLES
.*
.*
         GBLB  &DMANF01      REGS EQU'D TO 'R'
.*
         GBLB  &DMANF02      RE-ENTR. CODE
.*
         GBLA  &DMANF03      N'FULLW XINFO
.*
.*********************************************************************
.**                                                                  *
.**      DEFINITION OF MACRO LOCAL-VARIABLES :                       *
.**                                                                  *
.**      MACRO-OPERAND VARIABLES                                     *
.**                                                                  *
.*********************************************************************
.*                                                                   *
.*                                                                   *
.*       P00 : LABEL   : MACRO LABEL/SYMBOL                          *
.*                                                                   *
.*             VP001     LABEL : NOGEN                               *
.*             VP002     LABEL : SYMBOL-ID.                          *
.*                                                                   @
         LCLB  &VP001
         LCLC  &VP002
.*                                                                   *
.*                                                                   *
.*       P10 : CSNAME  : CONTROL-SECTION MAIN-ENTRY SYMBOL           *
.*                                                                   *
.*             VP101     CSNAME : NOGEN                              *
.*             VP102     CSNAME : SYMBOL-ID.                         *
.*                                                                   *
         LCLB  &VP101
         LCLC  &VP102
.*                                                                   *
.*                                                                   *
.*       P11 : CSIDENT : CONTROL-SECTION IDENTIFICATION              *
.*                                                                   *
.*             VP111     CSIDENT : NOGEN                             *
.*             VP112     CSIDENT : USE LABEL-ID.                     *
.*             VP113     CSIDENT : USE STRING-ID.                    *
.*             VP114     CSIDENT : LABEL/STRING-LENGTH               *
.*                                                                   *
         LCLB  &VP111,&VP112,&VP113
         LCLA  &VP114
.*                                                                   *
.*                                                                   *
.*       P12 : CSALIAS : CONTROL-SECTION ALIAS-ENTRY SYMBOL(S)       *
.*                                                                   *
.*             VP121     CSALIAS : NOGEN                             *
.*             VP122     CSALIAS : ALIAS-NUMBER                      *
.*             VP123     CSALIAS : ALIAS SYMBOL(S)-ID.               *
.*                                                                   *
         LCLB  &VP121
         LCLA  &VP122
         LCLC  &VP123(16)
.*                                                                   *
.*                                                                   *
.*       P13 : CSENTRY : ADDITIONAL ENTRY-POINT SYMBOL(S)            *
.*                                                                   *
.*             VP131     CSENTRY : NOGEN                             *
.*             VP132     CSENTRY : ENTRY-NUMBER                      *
.*             VP132     CSENTRY : ENTRY-NUMBER                      *
.*             VP133     CSENTRY : ENTRY-POINT SYMBOL(S)             *
.*             VP134     CSENTRY : ENTRY-ROUTN SYMBOL(S)             *
.*                                                                   *
         LCLB  &VP131
         LCLA  &VP132
         LCLC  &VP133(16),&VP134(16)
.*                                                                   *
.*                                                                   *
.*       P14 : CSEXTRN : ADDITIONAL EXTRN-POINT SYMBOL(S)            *
.*                                                                   *
.*             VP141     CSEXTRN : NOGEN                             *
.*             VP142     CSEXTRN : EXTRN-NUMBER                      *
.*             VP143     CSEXTRN : EXTRN-POINT SYMBOL(S)             *
.*             VP144     CSEXTRN : EXTRN-ADCON SYMBOL(S)             *
.*                                                                   *
         LCLB  &VP141
         LCLA  &VP142
         LCLC  &VP143(16),&VP144(16)
.*                                                                   *
.*                                                                   *
.*       P15 : CSBASE  : CONTROL-SECTION BASE-REGISTER(S)            *
.*                                                                   *
.*             VP151     CSBASE : NOGEN                              *
.*             VP152     CSBASE : BASE-REG NUMBER                    *
.*             VP153     CSBASE : BASE-REG SYMBOL(S)                 *
.*                                                                   *
         LCLB  &VP151
         LCLA  &VP152
         LCLC  &VP153(6)
.*                                                                   *
.*                                                                   *
.*       P16 : RGSAVE  : SAVING OF CALLER'S REGISTERS                *
.*                                                                   *
.*             VP161     RGSAVE : NOGEN                              *
.*             VP162     RGSAVE : SAVE-AREA SYMBOL (4)               *
.*                                                                   *
         LCLB  &VP161
         LCLC  &VP162
.*                                                                   *
.*                                                                   *
.*       P17 : SACHAIN : CHAINING OF PGM'S SAVE-AREAS                *
.*                                                                   *
.*             VP171     SACHAIN : NOGEN                             *
.*             VP172     SACHAIN : FORWARD-CHAIN                     *
.*             VP173     SACHAIN : BACKWRD-CHAIN                     *
.*             VP174     SACHAIN : FWD/BKWD-CHAIN                    *
.*                                                                   *
         LCLB  &VP171,&VP172,&VP173,&VP174
.*                                                                   *
.*                                                                   *
.*       P18 : SAFLAG  : FLAGGING OF CALLER'S SAVE-AREA              *
.*                                                                   *
.*             VP181     SAFLAG : NOGEN                              *
.*             VP182     SAFLAG : FLAG-BYTE SYMBOL                   *
.*                                                                   *
         LCLB  &VP181
         LCLC  &VP182
.*                                                                   *
.*                                                                   *
.*       P19 : XINFO   : EXTENDED INFORMATION SAVE-AREA              *
.*                                                                   *
.*             VP191     XINFO : NOGEN                               *
.*             VP192     XINFO : NO-OF FULLWORDS                     *
.*             VP193     XINFO : INFO-AREA SYMBOL                    *
.*                                                                   *
         LCLB  &VP191
         LCLA  &VP192
         LCLC  &VP193
.*                                                                   *
.*                                                                   *
.*       P20 : TCODE   : TYPE OF MACRO-CODE GENERATED                *
.*                                                                   *
.*             VP201     TCODE : RE-USABLE                           *
.*             VP202     TCODE : RE-FRESHABLE                        *
.*             VP203     TCODE : RE-ENTRANT                          *
.*                                                                   *
         LCLB  &VP201,&VP202,&VP203
.*                                                                   *
.*                                                                   *
.*       P21 : WREGS   : INTERNALLY-USED WORK-REGISTERS              *
.*                                                                   *
.*             VP211     WREGS : REG-SYMBOL 1                        *
.*             VP212     WREGS : REG-SYMBOL 2                        *
.*                                                                   *
         LCLC  &VP211,&VP212
.*                                                                   *
.*                                                                   *
.*       P22 : WSYMB   : INTERNALLY-USED WORK-SYMBOL                 *
.*                                                                   *
.*             VP221     WSYMB : USE SYSINDEX-NUMBER                 *
.*             VP222     WSYMB : USE EXTERNAL-SYMBOL                 *
.*             VP223     WSYMB : WORK-SYMBOL IDENT.                  *
.*                                                                   *
         LCLB  &VP221,&VP222
         LCLC  &VP223
.*                                                                   *
.*                                                                   *
.*       P23 : EQGPR   : EQUATION OF GEN-PURPOSE REGISTERS           *
.*                                                                   *
.*             VP231     EQGPR : NOGEN                               *
.*             VP232     EQGPR : GPR-REG SYMBOL                      *
.*                                                                   *
         LCLB  &VP231
         LCLC  &VP232
.*                                                                   *
.*                                                                   *
.*       P24 : EQFPR   : EQUATION OF FLOAT-POINT REGISTERS           *
.*                                                                   *
.*             VP241     EQFPR : NOGEN                               *
.*             VP242     EQFPR : FPR-REG SYMBOL                      *
.*                                                                   *
         LCLB  &VP241
         LCLC  &VP242
.*                                                                   *
.*                                                                   *
.*       P25 : EXPARM  : RESOLUTION OF EXEC-STMNT PARAMETERS         *
.*                                                                   *
.*             VP251     EXPARM : NOGEN                              *
.*             VP252     EXPARM : SYMBOL OF LENGTH                   *
.*             VP253     EXPARM : SYMBOL OF ADDRESS                  *
.*                                                                   *
         LCLB  &VP251
         LCLC  &VP252,&VP253
.*                                                                   *
.*                                                                   *
.*       P26 : CSPARM  : RESOLUTION OF CONTROL-SECTION PARMS         *
.*                                                                   *
.*             VP261     CSPARM : NOGEN                              *
.*             VP262     CSPARM : SYMBOL OF NUMBER                   *
.*             VP263     CSPARM : SYMBOL OF ADDRESS                  *
.*                                                                   *
         LCLB  &VP261
         LCLC  &VP262,&VP263
.*                                                                   *
.*                                                                   *
.*********************************************************************
.**                                                                  *
.**      DEFINITION OF MACRO LOCAL-VARIABLES :                       *
.**                                                                  *
.**      INTERMEDIATELY-USED VARIABLES                               *
.**                                                                  *
.*********************************************************************
.*
.*
         LCLA  &VCA1,&VCA2,&VCA3
.*
         LCLB  &VCB1,&VCB2,&VCB3
.*
         LCLC  &VCC1,&VCC2,&VCC3
.*
         LCLA  &VGA1    CSECT-ENTRY DISPLACEMENT-COUNTER
.*
.*
.*
.R20000  ANOP
.*
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P00' (LABEL)                      *
.**                                                                  *
.**      ROUTINE R202-XX : MACRO LABEL/SYMBOL                        *
.**                                                                  *
.*********************************************************************
.*
.*
.R20200  ANOP
.*
         AIF   ('&P00' EQ '').R20210        LABEL=N/A
         AGO   .R20220                      LABEL-SYMBOL
.*
.**
.**      ROUTINE R202-10 : '&P00' (LABEL) = NOT APPLICABLE
.**
.*
.R20210  ANOP
.*
&VP001   SETB  (1)                LABEL=NOGEN
         AGO   .R20299            EXIT 202
.*       AGO   .R20299            EXIT 202
.**
.**      ROUTINE R202-20 : '&P00' (LABEL) = SYMBOL
.**
.*
.R20220  ANOP
.*
&VP001   SETB  (0)                LABEL=GEN
&VP002   SETC  '&P00'             LABEL=SYMBOL
         AGO   .R20299            EXIT 202
.*
.**
.**      ROUTINE R202-99 : '&P00' (LABEL) EXIT-ROUTINE
.**
.*
.R20299  ANOP
         AGO   .R20400            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P10' (CSNAME)                     *
.**                                                                  *
.**      ROUTINE R204-XX : CONTROL-SECTION MAIN-ENTRY SYMBOL         *
.**                                                                  *
.*********************************************************************
.*
.*
.R20400  ANOP
.*
         AIF   ('&P10' EQ 'YES').R20420     CSNAME='YES'
         AGO   .R20430
.*
.**
.**      ROUTINE R204-10 : '&P10' (CSNAME) = 'NO'
.**
.*
.*
&VP101   SETB  (1)                CSNAME=NOGEN
         AGO   .R20499            EXIT 204
.*
.**
.**      ROUTINE R204-20 : '&P10' (CSNAME) = 'YES'
.**
.*
.R20420  ANOP
.*
&VP101   SETB  (0)                CSNAME=GEN
&VP102   SETC  '&P00'             CSNAME=LABEL
         AGO   .R20499            EXIT 204
.*
.**
.**      ROUTINE R204-30 : '&P10' (CSNAME) = (SY4BOL)
.**
.*
.R20430  ANOP
.*
&VP101   SETB  (0)
         AIF   (K'&P10(1) GT 7).CUT
&VP102   SETC  '&P10(1)'
         AGO   .R20499
.CUT     ANOP
&VP102   SETC  '&P10(1)'(1,7)
         AGO   .R20499
.*
.**
.**      ROUTINE R204-40 : '&P10' (CSNAME) = INVALID
.**
.*
.R20440  ANOP
.*
&VP101   SETB  (1)                CSNAME=NOGEN                  ******
         AGO   .R20499            EXIT 204                      ******
.*
.**
.**      ROUTINE R204-99 : '&P10' (CSNAME) EXIT-ROUTINE
.**
.*
.R20499  ANOP
         AGO   .R20600            EVALUATE NEXT 6PERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P11' (CSIDENT'-                   *
.**                                                                  *
.**      ROUTINE R206-XX : CONTROL-SECTION IDENTIFICATION            *
.**                                                                  *
.*********************************************************************
.*
.*
.R20600  ANOP
.*
         AIF   ('&P11' EQ 'NO').R20610      CSID5NT='NO'
         AIF   ('&P11' EQ 'YES').R20620     CSIDENT='YES'
         AIF   ('&P11'(1,1) EQ '(').R20630  CSIDENT=(STRING)
         AGO   .R20640                      CSID5NT=INVALID
.*
.**
.**      ROUTINE R206-10 : '&P11' (CSIDENT) = 'NO'
.**
.*
.R20610  ANOP
.*
&VP111   SETB  (1)                CSIDENT=NOGEN
         AGO   .R20699            EXIT 206
.*
.**
.**      ROUTINE R206-20 : '&P11' (CSIDENT) = 'YES'
.**
.*
.R20620  ANOP
.*
&VP111   SETB  (0)                CSIDENT=GEN
&VP112   SETB  (1)                CSIDENT=LABEL-ID,
&VP113   SETB  (0)                        NOT STRING-ID.
&VP114   SETA  8                  CSIDENT STRING-LENGTH
         AGO   .R20699            EXIT 206
.*
.**
.**      ROUTINE R206-30 : '&P11' (CSIDENT) = (STRING)
.**
.*
.R20630  ANOP
.*
&VP111   SETB  (0)                CSIDENT=GEN
&VP113   SETB  (1)                CSIDENT=STRING-ID,
&VP112   SETB  (0)                        NOT LABEL-ID.
.*
         AIF   (K'&P11 LE 8).R20631    LENGTH =< 8
         AIF   (K'&P11 LE 12).R20632          =< 12
         AIF   (K'&P11 LE 16).R20633          =< 16
         AIF   (K'&P11 LE 20).R20634          =< 20
         AIF   (K'&P11 LE 24).R20635          =< 24
         AIF   (K'&P11 LE 28).R20636          =< 28
         AGO   .R20637                        =< 32
.*
.R20631  ANOP
&VP114   SETA  8                  STRING-LENGTH = 8
         AGO   .R20699
.*
.R20632  ANOP
&VP114   SETA  12                 STRING-LENGTH = 12
         AGO   .R20699
.*
.R20633  ANOP
&VP114   SETA  16                 STRING-LENGTH = 16
         AGO   .R20699
.*
.R20634  ANOP
&VP114   SETA  20                 STRING-LENGTH = 20
         AGO   .R20699
.*
.R20635  ANOP
&VP114   SETA  24                 STRING-LENGTH = 24
         AGO   .R20699
.*
.R20636  ANOP
&VP114   SETA  28                 STRING-LENGTH = 28
         AGO   .R20699
.*
.R20637  ANOP
&VP114   SETA  32                 STRING-LENGTH = 32
         AGO   .R20699
.*
.**
.**      ROUTINE R206-40 : '&P11' (CSIDENT) = INVALID
.**
.*
.R20640  ANOP
.*
&VP111   SETB  (1)                CSIDENT=NOGEN                 ******
         AGO   .R20699            EXIT 206                      ******
.*
.**
.**      ROUTINE R206-99 : '&P11' (CSIDENT) EXIT-ROUTINE
.**
.*
.R20699  ANOP
         AGO   .R20800            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P12' (CSALIAS)                    *
.**                                                                  *
.**      ROUTINE R208-XX : CONTROL-SECTION ALIAS-ENTRY SYMBOL(S)     *
.**                                                                  *
.*********************************************************************
.*
.*
.R20800  ANOP
.*
         AIF   ('&P12' EQ 'NO').R20810      CSALIAS='NO'
         AIF   ('&P12' EQ 'YES').R20820     CSALIAS='YES'
         AGO   .R20830
.*
.**
.**      ROUTINE R208-10 : '&P12' (CSALIAS) = 'NO'
.**
.*
.R20810  ANOP
.*
&VP121   SETB  (1)                CSALIAS=NOGEN
         AGO   .R20899            EXIT 208
.*
.**
.**      ROUTINE R208-20 : '&P12' (CSALIAS) = 'YES'
.**
.*
.R20820  ANOP
.*
&VP121   SETB  (0)                CSALIAS=GEN
&VP122   SETA  1                  CSALIAS-NUMBER
&VP123(1) SETC '#'.'&VP102'(1,7)  CSALIAS-SYMBOL
         AGO   .R20899            EXIT 208
.*
.**
.**      ROUTINE R208-30 : '&P12' (CSALIAS) = (SYMBOL(S))
.**
.*
.R20830  ANOP
.*
&VCA1    SETA  N'&P12             NUMB OF ALIAS-SYMBOLS
         AIF   (&VCA1 GT 15).R20833
.*
&VCA1    SETA  1                  POINTER = 1
.R20831  ANOP
         AIF   ('&P12(&VCA1)' EQ '').R20832 LAST SYMBOL
&VP123(&VCA1) SETC '&P12(&VCA1)'  SAVE ALIAS
&VCA1    SETA  &VCA1+1            POINTER + 1
         AGO   .R20831
.*
.R20832  ANOP
&VCA1    SETA  &VCA1-1            CORRECT POINTER
&VP122   SETA  &VCA1              SAVE N'ALIAS
&VP121   SETB  (0)                CSALIAS=GEN
         AGO   .R20899            EXIT 208
.*
.R20833  ANOP
&VP121   SETB  (1)                CSALIAS=NOGEN                 ******
         AGO   .R20899            EXIT 208                      ******
.*
.**
.**      ROUTINE R208-40 : '&P12' (CSALIAS) = INVALID
.**
.*
.R20840  ANOP
.*
&VP121   SETB  (1)                CSALIAS=NOGEN                 ******
         AGO   .R20899            EXIT 208                      ******
.*
.**
.**      ROUTINE R208-99 : '&P12' (CSALIAS) EXIT-ROUTINE
.**
.*
.R20899  ANOP
         AGO   .R21000            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P13' (CSENTRY)                    *
.**                                                                  *
.**      ROUTINE R210-XX : ADDITIONAL ENTRY-POINT SYMBOL(S)          *
.**                                                                  *
.*********************************************************************
.*
.*
.R21000  ANOP
.*
         AIF   ('&P13' EQ 'NO').R21010      CSENTRY='NO'
         AIF   ('&P13' EQ 'YES').R21020     CSENTRY='YES'
         AIF   ('&P13'(1,1) EQ '(').R21030  CSENTRY=(SYMBOL(S))
         AGO   .R21040                      CSENTRY=INVALID
.*
.**
.**      ROUTINE R210-10 : '&P13' (CSENTRY) = 'NO'
.**
.*
.R21010  ANOP
.*
&VP131   SETB  (1)                CSENTRY=NOGEN
         AGO   .R21099            EXIT 210
.*
.**
.**      ROUTINE R210-20 : '&P13' (CSENTRY) = 'YES'
.**
.*
.R21020  ANOP
.*
&VP131   SETB  (1)                CSENTRY=NOGEN                 ******
         AGO   .R21099            EXIT 210                      ******
.*
.**
.**      ROUTINE R210-30 : '&P13' (CSENTRY) = (SYMBOL(S))
.**
.*
.R21030  ANOP
.*
&VCA1    SETA  N'&P13             NO OF SUBLIST-OP
         AIF   (&VCA1 GT 30).R21033
&VCA1    SETA  1
&VCA2    SETA  1
.*
.R21031  ANOP
         AIF   ('&P13(&VCA1)' EQ '').R21032  LAST ENTRY
&VP133(&VCA2) SETC '&P13(&VCA1)'  SET EP-SYMBOL
&VCA1    SETA  &VCA1+1
&VP134(&VCA2) SETC '&P13(&VCA1)'  SET RT-SYMBOL
&VCA1    SETA  &VCA1+1
&VCA2    SETA  &VCA2+1
         AGO   .R21031
.*
.R21032  ANOP
&VCA2    SETA  &VCA2-1
&VP132   SETA  &VCA2              SET N'EP/RT-SYMBOLS
&VP131   SETB  (0)                CSENTRY=GEN
         AGO   .R21099            EXIT 210
.*
.R21033  ANOP
&VP131   SETB  (1)                CSENTRY=NOGEN
         AGO   .R21099            EXIT 210
.**
.**      ROUTINE R210-40 : '&P13' (CSENTRY) = INVALID
.**
.*
.R21040  ANOP
.*
&VP131   SETB  (1)                CSENTRY=NOGEN                 ******
         AGO   .R21099            EXIT 210                      ******
.*
.**
.**      ROUTINE R210-99 : '&P13' (CSENTRY) EXIT-ROUTINE
.**
.*
.R21099  ANOP
         AGO   .R21200            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P14' (CSEXTRN)                    *
.**                                                                  *
.**      ROUTINE R212-XX : ADDITIONAL EXTRN-POINT SYMBOL(S)          *
.**                                                                  *
.*********************************************************************
.*
.*
.R21200  ANOP
.*
         AIF   ('&P14' EQ 'NO').R21210      CSEXTRN='NO'
         AIF   ('&P14' EQ 'YES').R21220     CSEXTRN='YES'
         AIF   ('&P14'(1,1) EQ '(').R21230  CSEXTRN=(SYMBOL(S))
         AGO   .R21240                      CSEXTRN=INVALID
.*
.**
.**      ROUTINE R212-10 : '&P14' (CSEXTRN) = 'NO'
.**
.*
.R21210  ANOP
.*
&VP141   SETB  (1)                CSEXTRN=NOGEN
         AGO   .R21299            EXIT 212
.*
.**
.**      ROUTINE R212-20 : '&P14' (CSEXTRN) = 'YES'
.**
.*
.R21220  ANOP
.*
&VP141   SETB  (1)                CSEXTRN=NOGEN                 ******
         AGO   .R21299            EXIT 212                      ******
.*
.**
.**      ROUTINE R212-30 : '&P14' (CSEXTRN) = (SYMBOL(S))
.**
.*
.R21230  ANOP
.*
&VCA1    SETA  N'&P14             NO OF SUBLIST-OP
         AIF   (&VCA1 GT 30).R21233
&VCA1    SETA  1
&VCA2    SETA  1
.*
.R21231  ANOP
         AIF   ('&P14(&VCA1)' EQ '').R21232  LAST EXTRN
&VP143(&VCA2) SETC '&P14(&VCA1)'  SET EX-SYMBOL
&VCA1    SETA  &VCA1+1
&VP144(&VCA2) SETC '&P14(&VCA1)'  SET AD-SYMBOL
&VCA1    SETA  &VCA1+1
&VCA2    SETA  &VCA2+1
         AGO   .R21231
.*
.R21232  ANOP
&VCA2    SETA  &VCA2-1
&VP142   SETA  &VCA2              SET N'EP/RT-SYMBOLS
&VP141   SETB  (0)                CSEXTRN=GEN
         AGO   .R21299            EXIT 212
.*
.R21233  ANOP
&VP141   SETB  (1)                CSEXTRN=NOGEN
         AGO   .R21299            EXIT 212
.**
.**      ROUTINE R212-40 : '&P14' (CSEXTRN) = INVALID
.**
.*
.R21240  ANOP
.*
&VP141   SETB  (1)                CSEXTRN=NOGEN                 ******
         AGO   .R21299            EXIT 212                      ******
.*
.**
.**      ROUTINE R212-99 : '&P14' (CSEXTRN) EXIT-ROUTINE
.**
.*
.R21299  ANOP
         AGO   .R21400            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P15' (CSBASE)                     *
.**                                                                  *
.**      ROUTINE R214-XX : CONTROL-SECTION BASE-REGISTER(S)          *
.**                                                                  *
.*********************************************************************
.*
.*
.R21400  ANOP
.*
         AIF   ('&P15' EQ 'NO').R21410      CSBASE='NO'
         AIF   ('&P15' EQ 'YES').R21420     CSBASE='YES'
         AIF   ('&P15'(1,1) EQ '(').R21430  CSBASE=(SYMBOL(S))
         AGO   .R21440                      CSBASE=INVALID
.*
.**
.**      ROUTINE R214-20 : '&P15' (CSBASE) = 'YES'
.**
.*
.R21420  ANOP
.*
&VP151   SETB  (0)                CSBASE=GEN
.**
.**      ROUTINE R214-10 : '&P15' (CSBASE) = 'NO'
.**
.*
.R21410  ANOP
.*
&VP151   SETB  (1)                CSBASE=NOGEN
         AGO   .R21499            EXIT 214
.*
&VP152   SETA  1                  CSBASE-NUMBER
&VP153(1) SETC '12'               CSBASE-REGISTER
         AGO   .R21499            EXIT 214
.*
.**
.**      ROUTINE R214-30 : '&P15' (CSBASE) = (SYMBOL(S))
.**
.*
.R21430  ANOP
.*
         AIF   (N'&P15 GT 6).R21433    N'REGS > 6
&VCA1    SETA  1                       PTR TO SUBLIST
.*
.R21431  ANOP
         AIF   ('&P15(&VCA1)' EQ '').R21432  LAST DONE
&VP153(&VCA1) SETC '&P15(&VCA1)'             MOVE SYMBOL
         AIF   (&VCA1 EQ 6).R21432           LAST DONE
&VCA1    SETA  &VCA1+1                       INCR POINTER
         AGO   .R21431                       DO NEXT
.*
.R21432  ANOP
&VP152   SETA  &VCA1-1            N'REGS
&VP151   SETB  (0)                CSBASE=GEN
         AGO   .R21499            EXIT 214
.*
.R21433  ANOP
&VP151   SETB  (1)                CSBASE=NOGEN
         AGO   .R21499            EXIT 214
.*
.**
.**      ROUTINE R214-40 : '&P15' (CSBASE) = INVALID
.**
.*
.R21440  ANOP
.*
&VP151   SETB  (1)                CSBASE=NOGEN                  ******
         AGO   .R21499            EXIT 214                      ******
.*
.**
.**      ROUTINE R214-99 : '&P15' (CSBASE) EXIT-ROUTINE
.**
.*
.R21499  ANOP
         AGO   .R21600            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P16' (RGSAVE)                     *
.**                                                                  *
.**      ROUTINE R216-XX : SAVING OF CALLER'S REGISTERS              *
.**                                                                  *
.*********************************************************************
.*
.*
.R21600  ANOP
.*
         AIF   ('&P16' EQ 'NO').R21610      RGSAVE='NO'
         AIF   ('&P16' EQ 'YES').R21620     RGSAVE='YES'
         AGO   .R21630
.*
.**
.**      ROUTINE R216-10 : '&P16' (RGSAVE) = 'NO'
.**
.*
.R21610  ANOP
.*
&VP161   SETB  (1)                RGSAVE=NOGEN
         AGO   .R21699            EXIT 216
.*
.**
.**      ROUTINE R216-20 : '&P16' (RGSAVE) = 'YES'
.**
.*
.R21620  ANOP
.*
&VP161   SETB  (0)                RGSAVE=GEN
&VP162   SETC  'SV01'             RGSAVE-SYMBOL
         AGO   .R21699            EXIT 216
.*
.**
.**      ROUTINE R216-30 : '&P16' (RGSAVE) = (SYMBOL)
.**
.*
.R21630  ANOP
.*
         AIF   ('&P16(1)' EQ '').R21631  SYMBOL=NULL-STR.
         AIF   (K'&P16(1) GT 4).R21631   SYMBOL TOO LONG
&VP161   SETB  (0)                RSAVE=GEN
&VP162   SETC  '&P16(1)'          RSAVE-SYMBOL
         AGO   .R21699            EXIT 216
.*
.R21631  ANOP
&VP161   SETB  (1)                RGSAVE=NOGEN                  ******
         AGO   .R21699            EXIT 216                      ******
.*
.**
.**      ROUTINE R216-40 : '&P16' (RGSAVE) = INVALID
.**
.*
.R21640  ANOP
.*
&VP161   SETB  (1)                RGSAVE=NOGEN
         AGO   .R21699            EXIT 216
.*
.**
.**      ROUTINE R216-99 : '&P16' (RGSAVE) EXIT-ROUTINE
.**
.*
.R21699  ANOP
         AGO   .R21800            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P17' (SACHAIN)                    *
.**                                                                  *
.**      ROUTINE R218-XX : CHAINING OF PGM'S SAVE-AREAS              *
.**                                                                  *
.*********************************************************************
.*
.*
.R21800  ANOP
.*
         AIF   ('&P17' EQ 'NO').R21810      SACHAIN='NO'
         AIF   ('&P17' EQ 'YES').R21820     SACHAIN='YES'
         AIF   ('&P17'(1,1) EQ '(').R21830  SACHAIN=(SYMBOL)
         AGO   .R21840                      SACHAIN=INVALID
.*
.**
.**      ROUTINE R218-10 : '&P17' (SACHAIN) = 'NO'
.**
.*
.R21810  ANOP
.*
&VP171   SETB  (1)                SACHAIN=NOGEN
         AGO   .R21899            EXIT 218
.*
.**
.**      ROUTINE R218-20 : '&P17' (SACHAIN) = 'YES'
.**
.*
.R21820  ANOP
.*
&VP171   SETB  (0)                SACHAIN=GEN
&VP172   SETB  (1)                SACHAIN=FORWARD
&VP173   SETB  (1)                SACHAIN=BACKWRD
&VP174   SETB  (1)                SACHAIN=FWD/BKWD
         AGO   .R21899            EXIT 218
.*
.**
.**      ROUTINE R218-30 : '&P17' (SACHAIN) = (SYMBOL)
.**
.*
.R21830  ANOP
.*
         AIF   ('&P17(1)' EQ 'FWD').R21831
         AIF   ('&P17(1)' EQ 'BKW').R21832
         AIF   ('&P17(1)' EQ 'ALL').R21833
&VP171   SETB  (1)                SACHAIN=NOGEN
         AGO   .R21899            EXIT 218
.*
.R21831  ANOP
&VP171   SETB  (0)                SACHAIN=GEN
&VP172   SETB  (1)                SACHAIN=FORWARD
         AGO   .R21899            EXIT 218
.*
.R21832  ANOP
&VP171   SETB  (0)                SACHAIN=GEN
&VP173   SETB  (1)                SACHAIN=BACKWARD
         AGO   .R21899            EXIT 218
.*
.R21833  ANOP
&VP171   SETB  (0)                SACHAIN=GEN
&VP172   SETB  (1)                SACHAIN=FORW
&VP173   SETB  (1)                SACHAIN=BACK
&VP174   SETB  (1)                SACHAIN=FW/BKW
         AGO   .R21899            EXIT 218
.*
.**
.**      ROUTINE R218-40 : '&P17' (SACHAIN) = INVALID
.**
.*
.R21840  ANOP
.*
&VP171   SETB  (1)                SACHAIN=NOGEN                 ******
         AGO   .R21899            EXIT 218                      ******
.*
.**
.**      ROUTINE R218-99 : '&P17' (SACHAIN) EXIT-ROUTINE
.**
.*
.R21899  ANOP
         AGO   .R22000            EVALVATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P18' (SAFLAG)                     *
.**                                                                  *
.**      ROUTINE R220-XX : FLAGGING OF CALLER'S SAVE-AREA            *
.**                                                                  *
.*********************************************************************
.*
.*
.R22000  ANOP
.*
         AIF   ('&P18' EQ 'NO').R22010      SAFLAG='NO'
         AIF   ('&P18' EQ 'YES').R22020     SAFLAG='YES'
         AIF   ('&P18'(1,1) EQ '(').R22030  SAFLAG=(SYMBOL)
         AGO   .R22040                      SAFLAG=INVALID
.*
.**
.**      ROUTINE R220-10 : '&P18' (SAFLAG) = 'NO'
.**
.*
.R22010  ANOP
.*
&VP181   SETB  (1)                SAFLAG=NOGEN
         AGO   .R22099            EXIT 220
.*
.**
.**      ROUTINE R220-20 : '&P18' (SAFLAG) = 'YES'
.**
.*
.R22020  ANOP
.*
&VP181   SETB  (0)                SAFLAG=GEN
&VP182   SETC  'X''80'''          SAFLAG=X'80'
         AGO   .R22099            EXIT 220
.*
.**
.**      ROUTINE R220-30 : '&P18' (SAFLAG) = (SYMBOL)
.**
.*
.R22030  ANOP
.*
         AIF   (K'&P18(1) GT 5).R22031           INV.FLAG
         AIF   ('&P18(1)'(1,2) NE 'X''').R22031
&VP181   SETB  (0)                SAFLAG=GEN
&VP182   SETC  '&P18(1)'          SAFLAG-SYMBOL
         AGO   .R22099            EXIT 220
.*
.R22031  ANOP
&VP181   SETB  (1)                SAFLAG=NOGEN                  ******
         AGO   .R22099            EXIT 220                      ******
.*
.**
.**      ROUTINE R220-40 : &P18' (SAFLAG) = INVALID
.**
.*
.R22040  ANOP
.*
&VP181   SETB  (1)                SAFLAG=NOGEN                  ******
         AGO   .R22099            EXIT 220                      ******
.*
.**
.**      ROUTINE R220-99 : '&P18' (SAFLAG) EXIT-ROUTINE
.**
.*
.R22099  ANOP
         AGO   .R22200            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P19' (XINFO)                      *
.**                                                                  *
.**      ROUTINE R222-XX : EXTENDED INFORMATION SAVE-AREA            *
.**                                                                  *
.*********************************************************************
.*
.*
.R22200  ANOP
.*
         AIF   ('&P19' EQ 'NO').R22210      XINFO='NO'
         AIF   ('&P19' EQ 'YES').R22220     XINFO='YES'
         AGO   .R22230
.*
.**
.**
.**      ROUTINE R222-10 : '&P19' (XINFO) = 'NO'
.*
.R22210  ANOP
.*
&VP191   SETB  (1)                XINFO=NOGEN
         AGO   .R22299            EXIT 222
.*
.**
.**      ROUTINE R222-20 : '&P19' (XINFO) = 'YES'
.**
.*
.R22220  ANOP
.*
&VP191   SETB  (0)                XINFO=GEN
&VP192   SETA  4                  XINFO-N'FULLWORDS
         AGO   .R22299            EXIT 222
.*
.**
.**      ROUTINE R222-30 : '&P19' (XINFO) = (SYMBOL(S))
.**
.*
.R22230  ANOP
.*
         AIF   ('&P19(1)' EQ '').R22231  SYMBOL=NULL-STR.
         AIF   ('&P19(1)' LT '1').R22231  N'FULLW < 1
&VP191   SETB  (0)                        XINFO=GEN
&VP192   SETA  &P19(1)                    N'FULLWORDS
         AGO   .R22299                    EXIT 222
.*
.R22231  ANOP
&VP191   SETB  (1)                        XINFO=NOGEN           ******
         AGO   .R22299                    EXIT 222              ******
.*
.**
.**      ROUTINE R222-40 : '&P19' (XINFO) = INVALID
.**
.*
.R22240  ANOP
.*
&VP191   SETB  (1)                XINFO=NOGEN                   ******
         AGO   .R22299            EXIT 222                      ******
.*
.**
.**      ROUTINE R222-99 : '&P19' (XINFO) EXIT-ROUTINE
.**
.*
.R22299  ANOP
&DMANF03 SETA  &VP192
         AGO   .R22400            EVALVATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALVATION OF OPERAND : '&P20' (TCODE)                      *
.**                                                                  *
.**      ROUTINE R224-XX : TYPE OF MACRO-CODE GENERATED              *
.**                                                                  *
.*********************************************************************
.*
.*
.R22400  ANOP
.*
         AIF   ('&P20' EQ 'NO').R22410      TCODE='NO'
         AIF   ('&P20' EQ 'YES').R22420     TCODE='YES'
         AIF   ('&P20' EQ 'REUS').R22430    TCODE=RE-USABLE
         AIF   ('&P20' EQ 'RENT').R22440    TCODE=RE-ENTRANT
         AIF   ('&P20' EQ 'REFR').R22450    TCODE=RE-FRESHABLE
         AGO   .R22460                      TCODE=INVALID
.*
.**
.**      ROUTINE R224-10 : '&P20' (TCODE) = 'NO'
.**
.*
.R22410  ANOP
.*
&VP201   SETB  (1)                TCODE=RE-USABLE               ******
         AGO   .R22499            EXIT 224                      ******
.*
.**
.**      ROUTINE R224-20 : '&P20' (TCODE) = 'YES'
.**
.*
.R22420  ANOP
.*
&VP201   SETB  (1)                TCODE=RE-USABLE               ******
         AGO   .R22499            EXIT 224                      ******
.*
.**
.**      ROUTINE R224-30 : '&P20' (TCODE) = 'REUS'
.**
.*
.R22430  ANOP
.*
&VP201   SETB  (1)                TCODE=RE-USABLE
         AGO   .R22499            EXIT 224
.*
.**
.**      ROUTINE R224-40 : '&P20' (TCODE) = 'RENT'
.**
.*
.R22440  ANOP
.*
&VP203   SETB  (1)                TCODE=RE-ENTRANT
&DMANF02 SETB  (1)
         AGO   .R22499            EXIT 224
.*
.**
.**      ROUTINE R224-50 : '&P20' (TCODE) = 'REFR'
.**
.*
.R22450  ANOP
.*
&VP202   SETB  (1)                TCODE=RE-FRESHABLE
         AGO   .R22499            EXIT 224
.*
.**
.**      ROUTINE R224-60 : '&P20' (TCODE) = INVALID
.**
.*
.R22460  ANOP
.*
&VP201   SETB  (1)                TCODE=RE-USABLE               ******
         AGO   .R22499            EXIT 224                      ******
.*
.**
.**      ROUTINE R224-99 : '&P20' (TCODE) EXIT-ROUTINE
.**
.*
.R22499  ANOP
         AGO   .R22600            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P21' (WREGS)                      *
.**                                                                  *
.**      ROUTINE R226-XX : INTERNALLY-USED WORK-REGISTERS            *
.**                                                                  *
.*********************************************************************
.*
.*
.R22600  ANOP
.*
         AIF   ('&P21' EQ 'NO').R22610      WREGS='NO'
         AIF   ('&P21' EQ 'YES').R22620     WREGS='YES'
         AIF   ('&P21'(1,1) EQ '(').R22630  WREGS=(SYMBOLS)
         AGO   .R22640                      WREGS=INVALID
.*
.**
.**      ROUTINE R226-10 : '&P21' (WREGS) = 'NO'
.**
.*
.R22610  ANOP
.*
&VP211   SETC  '2'                WREGS=REG-SYMB1               ******
&VP212   SETC  '3'                WREGS=REG-SYMB2               ******
         AGO   .R22699            EXIT 226                      ******
.*
.**
.**      ROUTINE R226-20 : '&P12' (WREGS) = 'YES'
.**
.*
.R22620  ANOP
.*
&VP211   SETC  '2'                WREGS=REG-SYMB1
&VP212   SETC  '3'                WREGS=REG-SYMB2
         AGO   .R22699            EXIT 226
.*
.**
.**      ROUTINE R226-30 : '&P21' (WREGS) = (SYMBOLS)
.**
.*
.R22630  ANOP
.*
         AIF   ('&P21(1)'EQ '').R22631  SYMBOL=NULL-STR.
         AIF   ('&P21(2)' EQ '').R22631
&VP211   SETC  '&P21(1)'                 REG-SYMBOL 1
&VP212   SETC  '&P21(2)'                 REG-SYMBOL 2
         AGO   .R22699                   EXIT 226
.*
.R22631  ANOP
&VP211   SETC  '2'                       DEFAULT-REG            ******
&VP212   SETC  '3'                       DEFAULT-REG            ******
         AGO   .R22699                   EXIT 226
.*
.**
.**      ROUTINE R226-40 : '&P21' (WREGS) = INVALID
.**
.*
.R22640  ANOP
.*
&VP211   SETC  '2'                WREGS=REG-SYMB2               ******
&VP212   SETC  '3'                WREGS=REG-SYMB2               ******
         AGO   .R22699            EXIT 226                      ******
.*
.**
.**      ROUTINE R226-99 : '&P21' (WREGS) EXIT-ROUTINE
.**
.*
.R22699  ANOP
         AGO   .R22800            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P22' (WSYMB)                      *
.**                                                                  *
.**      ROUTINE R228-XX : INTERNALLY-USED WORK-SYMBOL               *
.**                                                                  *
.*********************************************************************
.*
.*
.R22800  ANOP
.*
         AIF   ('&P22' EQ 'NO').R22810      WSYMB='NO'
         AIF   ('&P22' EQ 'YES').R22820     WSYMB='YES'
         AGO   .R22830                      WSYMB=INVALID
.*
.**
.**      ROUTINE R228-10 : '&P22' (WSYMB) = 'NO'
.**
.*
.R22810  ANOP
.*
&VP221   SETB  (1)                WSYMB=SYSINDEX,
&VP222   SETB  (0)                 NOT EXTERNAL
&VP223   SETC  '&SYSNDX'          SET WORK-SYMBOL
         AGO   .R22899            EXIT 228
.*
.**
.**      ROUTINE R228-20 : '&P22' (WSYMB) = 'YES'
.**
.*
.R22820  ANOP
.*
&VP222   SETB  (1)                WSYMB=EXTERNAL,
&VP221   SETB  (0)                 NOT SYSINDEX
&VP223   SETC  '####'             SET WORK-SYMBOL
         AGO   .R22899            EXIT 228
.*
.**
.**      ROUTINE R228-30 : '&P22' (WSYMB) = (SYMBOL)
.**
.*
.R22830  ANOP
.*
         AIF   ('&P22(1)' EQ '').R22831  SYMBOL=NULL-STR.
         AIF   (K'&P22(1) GT 4).R22831   SYMBOL TOO LONG
&VP222   SETB  (1)                       WSYMB=EXTERNAL
&VP223   SETC  '&P22(1)'                WORK-SYMBOL
         AGO   .R22899                  EXIT 228
.*
.R22831  ANOP
&VP221   SETB  (1)                      WSYMB=SYSINDEX
&VP223   SETC  '&SYSNDX'    L           WORK-SYMBOL
         AGO   .R22899                  EXIT 228
.*
.**
.**      ROUTINE R228-40 : '&P22' (WSYMB) = INVALID
.**
.*
.R22840  ANOP
.*
&VP221   SETB  (1)                WSYMB=SYSINDEX                ******
&VP222   SETB  (0)                 NOT EXTERNAL                 ******
&VP223   SETC  '&SYSNDX'          SET WORK-SYMBOL               ******
         AGO   .R22899                 EXIT 228                ******
.*
.**
.**      ROUTINE R228-99 : '&P22' (WSYMB) EXIT-ROUTINE
.**
.*
.R22899  ANOP
         AGO   .R23000            EVALUATE NEXT OPERAND
.*
.*
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P23' (EQGPR)                      *
.**                                                                  *
.**      ROUTINE R230-XX : EQUATION OF GEN-PURPOSE REGISTERS         *
.**                                                                  *
.*********************************************************************
.*
.*
.R23000  ANOP
.*
         AIF   ('&P23' EQ 'NO').R23010      EQGPR='NO'
         AIF   ('&P23' EQ 'YES').R23020     EQGPR='YES'
         AIF   ('&P23'(1,1) EQ '(').R23030  EQGPR=(SYMBOL)
         AGO   .R23040                      EQGPR=INVALID
.*
.**
.**      ROUTINE R230-10 : '&P23' (EQGPR) = 'NO'
.**
.*
.R23010  ANOP
.*
&VP231   SETB  (1)                EQGPR=NOGEN
         AGO   .R23099            EXIT 230
.*
.**
.**      ROUTINE R230-20 : '&P23' (EQGPR) = 'YES'
.**
.*
.R23020  ANOP
.*
         AIF   (&DMANF01).R23010
&DMANF01 SETB  (1)
&VP231   SETB  (0)                EQGPR=GEN
&VP232   SETC  'R'                EQGPR-SYMBOL
         AGO   .R23099            EXIT 230
.*
.**
.**      ROUTINE R230-30 : '&P23' (EQGPR) = (SYMBOL)
.**
.*
.R23030  ANOP
.*
         AIF   ('&P23(1)' EQ '').R23031  SYMBOL=NULL-STR.
         AIF   (K'&P23(1) GT 4).R23031   SYMBOL TOO LONG
&VP231   SETB  (0)                       EQGPR=GEN
&VP232   SETC  '&P23(1)'                 EQGPR-SYMBOL
         AGO   .R23099                  EXIT 230
.*
.R23031  ANOP
&VP231   SETB  (1)                       EQGPR=NOGEN
         AGO   .R23099                   EXIT 230
.*
.**
.**      ROUTINE R230-40 : '&P23' (EQGPR) = INVALID
.**
.*
.R23040  ANOP
.*
&VP231   SETB  (1)                EQGPR=NOGEN                  ******
         AGO   .R23099            EXIT 230                     ******
.*
.**
.**      ROUTINE R230-99 : '&P23' (EQGPR) EXIT-ROUTINE
.**
.*
.R23099  ANOP
         AGO   .R23200            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P24' (EQFPR)                      *
.**                                                                  *
.**      ROUTINE R232-XX : EQUATION OF FLOAT-POINT REGISTERS         *
.*
.*
.R23200  ANOP
.*
         AIF   ('&P24' EQ 'NO').R23210     EQFPR='NO'
         AIF   ('&P24' EQ 'YES').R23220    EQFPR=HYES'
         AIF   ('&P24'(1,1) EQ '(').R23230  EQFPR=SYMBOL)
         AGO   .R23240                      EQFPR=INVALID
.*
.**
.**      ROUTINE R232-10 : '&P24' (EQFPR) = 'NO'
.**
.*
.R23210  ANOP
.*
&VP241   SETB  (1)                EQFPR=NOGEN
         AGO   .R23299            EXIT 232
.*
.**
.**      ROUTINE R232-20 : '&P24' (EQFPR) = 'YES'
.**
.*
.R23220  ANOP
.*
&VP241   SETB  (0)                EQFPR=GEN
&VP242   SETC  'FPR'              EQFPR-SYMBOL
         AGO   .R23299            EXIT 232
.*
.**
.**      ROUTINE R232-30 : '&P24' (EQFPR) = (SYMBOL)
.**
.*
.R23230  ANOP
.*
         AIF   ('&P24(1)' EQ '').R23231  SYMBOL=NULL-STR.
         AIF   (K'&P24(1) GT 4).R23231   SYMBOL TOO LONG
&VP241   SETB  (0)                       EQFPR-GEN
&VP242   SETC  '&P24(1)'                 EQFPR-SYMBOL
         AGO   .R23299                   EXIT 232
.*
.R23231  ANOP
&VP241   SETB  (1)                       EQFPR=NOGEN
         AGO   .R23299                   EXIT 232
.*
.**
.**      ROUTINE R232-40 : '&P24' (EQFPR) = INVALID
.**
.*
.R23240  ANOP
.*
&VP241   SETB  (1)                EQFPR=NOGEN
         AGO   .R23299            EXIT 232
.*
.**
.**      ROUTINE R232-99 : '&P24' (EQFPR) EXIT-ROUTINE
.**
.*
.R23299  ANOP
         AGO   .R23400            EVALUATE NEXT OPERAND
.*
.*
.*********************************************************************
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P25' (EXPARM)                     *
.**                                                                  *
.**      ROUTINE R234-XX : RESOLUTION OF EXEC-STNNT PARAMETERS       *
.**                                                                  *
.*********************************************************************
.*
.*
.R23400  ANOP
.*
         AIF   ('&P25' EQ 'NO').R23410      EXPARM='NO'
         AIF   ('&P25' EQ 'YES').R23420     EXPARM='YES'
         AIF   ('&P25'(1,1) EQ '(').R23430  EXPARM=(SYMBOLS)
         AGO   .R23440                      EXPARM=INVALID
.*
.**
.**      ROUTINE R234-10 : '&P25' (EXPARM) = 'NO'
.**
.*
.R23410  ANOP
.*
&VP251   SETB  (1)                EXPARM=NOGEN
         AGO   .R23499            EXIT 234
.*
.**
.**      ROUTINE R234-20 : '&P25' (EXPARM) = 'YES'
.**
.*
.R23420  ANOP
.*
&VP251   SETB  (0)                EXPARM=GEN
&VP252   SETC  'PM01'             LENGT#-SYMBOL
&VP253   SETC  'PM02'             ADDRESS-SYMBOL
         AGO   .R23499            EXIT 234
.*
.**
.**      ROUTINE R234-30 : '&P25' (EXPARM) = (SYMBOLS)
.**
.*
.R23430  ANOP
.*
         AIF   ('&P25(1)' EQ '').R23431   SYMBOL=NULL-STR.
         AIF   ('&P25(2)' EQ '').R23431
         AIF   (K'&P25(1) GT 4).R23431    SYMBOL TOO LONG
         AIF   (K'&P25(2) GT 4).R23431
&VP251   SETB  (0)                        EXPARM=GEN
&VP252   SETC  '&P25(1)'                  LENGTH-SYMBOL
&VP253   SETC  '&P25(2)'                  ADDRESS-SYMBOL
         AGO   .R23499                    EXIT 234
.*
.R23431  ANOP
&VP251   SETB  (1)                        EXPARM=NOGEN
         AGO   .R23499                    EXIT 234
.*
.**
.**      ROUTINE R234-40 : '&P25' (EXPARM) = INVALID
.**
.*
.R23440  ANOP
.*
&VP251   SETB  (1)                EXPARM=NOGEN                  ******
         AGO   .R23499            EXIT 234                      ******
.*
.**
.**      ROUTINE R234-99 : '&P25' (EXPARM) EXIT-ROUTINE
.**
.*
.R23499  ANOP
         AGO   .R23600            EVALUATE NEXT OPERAND
.*
.*
.**                                                                  *
.**      EVALUATION OF OPERAND : '&P26' (CSPARM)                     *
.**                                                                  *
.**                                                                  *
.*********************************************************************
.*
.*
.R23600  ANOP
.*
         AIF   ('&P26' EQ 'NO').R23610      CSPARM='NO'
         AIF   ('&P26' EQ 'YES').R23620     CSPARM='YES'
         AIF   ('&P26'(1,1) EQ '(').R23630  CSPARM=(SYMBOLS)
         AGO   .R23640                      CSPARM=INVALID
.*
.**
.**      ROUTINE R236-10 : '&P26' (CSPARM) = 'NO'
.**
.*
.R23610  ANOP
.*
&VP261   SETB  (1)                CSPARM=NOGEN
         AGO   .R23699            EXIT 236
.*
.**
.**      ROUTINE R236-20 : '&P26' (CSPARM) = 'YES'
.**
.*
.R23620  ANOP
.*
&VP261   SETB  (0)                CSPARM=GEN
&VP262   SETC  'PM01'             NUMBER-SYMBOL
&VP263   SETC  'PM02'             ADDRESS-SYMBOL
         AGO   .R23699            EXIT 236
.*
.**
.**      ROUTINE R236-30 : '&P26' (CSPARM) = (SYMBOLS)
.**
.*
.R23630  ANOP
.*
         AIF   ('&P26(1)' EQ '').R23631   SYMBOL=NULL-STR.
         AIF   ('&P26(2)' EQ '').R23631
         AIF   (K'&P26(1) GT 4).R23631    SYMBOL TOO LONG
         AIF   (K'&P26(2) GT 4).R23631
&VP261   SETB  (0)                        CSPARM=GEN
&VP262   SETC  '&P26(1)'                  NUMBER-SYMBOL
&VP263   SETC  '&P26(2)'                  ADDRESS-SYMBOL
         AGO   .R23699                    EXIT 236
.*
.R23631  ANOP
&VP261   SETB  (1)                        CSPARM=NOGEN
         AGO   .R23699                    EXIT 236
.*
.**
.**      ROUTINE R236-40 : '&P26' (CSPARM) = INVALID
.**
.*
.R23640  ANOP
.*
&VP261   SETB  (1)                CSPARM=NOGEN                 ******
         AGO   .R23699            EXIT 236                     ******
.*
.**
.**      ROUTINE R236-99 : '&P26' (CSPARM) EXIT-ROUTINE
.**
.*
.R23699  ANOP
         AGO   .R23800            EVALUATE NEXT OPERAND
.*
.*
.**                                                                  *
.**      OPEN-END FOR FURTHER OPERAND-EVALUATIONS                    *
.**                                                                  *
.*                                                                   *
.R23800  ANOP
         AGO   .R30000
.*                                                                   *
.*                                                                   *
.*
.*
.R30000  ANOP
         AGO   .R40000                                          ******
.*                                                              ******
.*
.*
.*
.*
.*
.R40000  ANOP
.*
.*
.*
.**
.**      ROUTINE R410 : GEN.OF CSECT-STATEMENT
.**
.*
.R410    ANOP
.*
         AIF   (&VP101).R420      NOGEN-EXIT
.*
&VP102   CSECT
         NOPR  0
         AGO   .R420              EXIT
.*
.*
.**
.**      ROUTINE R420 : GEN.OF CSECT-IDENTIFICATION
.**
.*
.R420    ANOP
.*
         AIF   (&VP111).R430      NOGEN-EXIT
.*
&VCA1    SETA  &VP114+4+2         CORRECT BRANCH-DISPL.
.*
         B     &VCA1.(15)
.*
         AIF   (&VP112).R421      USE LABEL-ID.
         AIF   (&VP113).R422      USE STRING-ID.
         AGO   .R430              ERROR/EXIT
.*
.R421    ANOP
.*
&VCC1    SETC  ''''               QUOTE-IDENT
         DC    AL1(&VP114)
&VCA1    SETA  &VP114-1
         DC    CL&VCA1&VCC1&VP102&VCC1
&VGA1    SETA  &VP114+4+2         SAVE DISPLACEMENT
         AGO   .R430              EXIT
.*
.R422    ANOP
.*
&VCC1    SETC  ''''               QUOTE-IDENT
         DC    CL&VP114&VCC1&P11&VCC1
&VGA1    SETA  &VP114+4+2         SAVE DISPLACEMENT
         AGO   .R430              EXIT
.*
.*
.**
.**      ROUTINE R430 : GEN.OF ALIAS-ENTRY STATEMENTS
.**
.*
.R430    ANOP
.*
         AIF   (&VP121).R440      NOGEN-EXIT
.*
&VCA1    SETA  &VP122             GET NO.OF ALIASES
&VCA2    SETA  1                  PTR TO ALIAS-SYMBOL
.R430A   ANOP
         ENTRY &VP123(&VCA2)
&VP123(&VCA2) NOPR  0
.*
&VCA1    SETA  &VCA1-1            NO.OF ALIAS -1
&VCA2    SETA  &VCA2+1            POINTER +1
         AIF   (&VCA1 NE 0).R430A NEXT ALIAS
         AGO   .R440              EXIT
.*
.*
.**
.**      ROUTINE R440 : GEN.OF ENTRY-POINT STATEMENTS
.**
.*
.R440    ANOP
.*
         AIF   (&VP131).R450      NOGEN-EXIT
.*
&VCA1    SETA  &VP132             GET NO.OF ENTRY-POINTS
&VCA2    SETA  1                  PTR TO EP-SYMBOL
&VCA3    SETA  1                  SET NOPR-REG COUNTER
.R440A   ANOP
         ENTRY &VP133(&VCA2)
&VP133(&VCA2) NOPR  &VCA3
.*
&VCA1    SETA  &VCA1-1            NO.OF EP-SYMB -1
&VCA2    SETA  &VCA2+1            POINTER +1
&VCA3    SETA  &VCA3+1            NOPR-REG CTR +1
         AIF   (&VCA1 NE 0).R440A NEXT EP-SYMB
         AGO   .R450              EXIT
.*
.*
.**
.**      ROUTINE R450 : GEN.OF EXTRN-POINT SYMBOLS
.**
.*
.R450    ANOP
.*
         AIF   (&VP141).R452      NOGEN-EXIT
.*
&VCA1    SETA  &VP142             GET NO.OF EXTRN-POINTS
&VCA2    SETA  1                  PTR TO EX-SYMBOL
.R450A   ANOP
         EXTRN &VP143(&VCA2)
.*
&VCA1    SETA  &VCA1-1            NO.OF EX-SYMB -1
&VCA2    SETA  &VCA2+1            POINTER +1
         AIF   (&VCA1 NE 0).R450A NEXT EX-SYMB
         AGO   .R452              EXIT
.*
.*
.**
.**      ROUTINE R452 : GEN.OF REGISTER-EQUATIONS
.**
.*
.R452    ANOP
.*
         AIF   (&VP231).R452A     NOGEN GPR
.*
&VP232.0 EQU   0
&VP232.1 EQU   1
&VP232.2 EQU   2
&VP232.3 EQU   3
&VP232.4 EQU   4
&VP232.5 EQU   5
&VP232.6 EQU   6
&VP232.7 EQU   7
&VP232.8 EQU   8
&VP232.9 EQU   9
&VP232.10 EQU   10
&VP232.11 EQU   11
&VP232.12 EQU   12
&VP232.13 EQU   13
&VP232.14 EQU   14
&VP232.15 EQU   15
.*
.R452A   ANOP
         AIF   (&VP241).R460      NOGEN FPR
.*
&VP242.0 EQU   0
&VP242.2 EQU   2
&VP242.4 EQU   4
&VP242.6 EQU   6
.*
         AGO   .R460
.*
.*
.**
.**      ROUTINE R460 : GEN.OF REGISTER-SAVING
.**
.*********************************************************************
.**
.*
.R460    ANOP
.*
         AIF   (&VP161).R470      NOGEN-EXIT
.*
         STM   14,12,12(13)
.R470    ANOP
.*
.*
.*
.**
.**      ROUTINE R520 : GEN.OF BASE-REGISTER LOADING
.**
.*
.R520    ANOP
.*
         AIF   (&VP151).R5209
         AIF   (&VP121 AND &VP131).R520B
.*
         BALR  &VP153(1),0
         USING *,&VP153(1)
         AGO   .R520C
.*
.R520B   ANOP
         LA    &VP153(1),0(15)
         USING &VP102,&VP153(1)
&VCC1    SETC  '&VP102'.'+'
         AGO   .R520D
.*
.R520C   ANOP
&VCC1    SETC  '*+'               USING-OP
.R520D   ANOP
&VCA3    SETA  4096               4K-VALUE
&VCA1    SETA  2                  POINTER=2
&VCA2    SETA  &VP152-1           NUMBER-REGS -1
.*
.R520A   ANOP
         AIF   (&VCA2 EQ 0).R521  LAST USING DONE
.*
         USING &VCC1&VCA3,&VP153(&VCA1)
.*
&VCA1    SETA  &VCA1+1            POINTER +1
&VCA2    SETA  &VCA2-1            NUMBER -1
&VCA3    SETA  &VCA3+4096         OFFSET +4K
         AGO   .R520A             DO NEXT USING
.*
.R521    ANOP
.*
&VCA1    SETA  2                  POINTER=2
&VCA2    SETA  &VP152-1           NUMB-REGS -1
.*
.R521A   ANOP
         AIF   (&VCA2 EQ 0).R5209  LAST LA DONE
.*
         LA    &VP153(&VCA1),2048(&VP153(&VCA1-1))
.*
         LA    &VP153(&VCA1),2048(&VP153(&VCA1))
.*
&VCA1    SETA  &VCA1+1            POINTER +1
&VCA2    SETA  &VCA2-1            NUMBER -1
         AGO   .R521A             DO NEXT LA
.R5209   ANOP
.*
.*
.*
.**
.**      ROUTINE R480 : GEN.OF SAVE-AREA CHAINING
.**
.*
.R480    ANOP
.*
         AIF   (&VP171).R490      NOGEN-EXIT
.*
&VCC1    SETC  '&VP162'.'&VP223'  S/A + WORK-SYMBOL
.*
         AIF   (&VP201 NE 1).R480C   CODE=NOT RE-US
         LA    &VP211,&VCC1
.R4801   ANOP
         LM    15,1,16(13)
         AIF   (&VP172 EQ 0).R480A NOT FORWARD-CHAIN
.*
         ST    &VP211,8(13)
         AGO   .R480A             EXIT
.*
.R480A   ANOP
.*
         AIF   (&VP173 EQ 0).R480B NOT BACKWRD-CHAIN
.*
         ST    13,4(&VP211)
         AGO   .R480B             EXIT
.*
.R480B   ANOP
.*
         LR    13,&VP211
.*
         AGO   .R490              EXIT
.*
.R480C   ANOP
         GETMAIN R,LV=&VP192*4+72
         AIF   (&VP192*4+72 GT 256).R480D
         XC    0(&VP192*4+72,1),0(1)
         AGO   .R480E
.R480D   ANOP
         XC    0(72,1),0(1)
.R480E   ANOP
         LR    &VP211,1
         AGO   .R4801
.*
.*
.**
.**      ROUTINE R490 : GEN.OF SAVE-AREA FLAGGING
.**
.*
.R490    ANOP
.*
         AIF   (&VP181).R500      NOGEN-EXIT
.*
         L     &VP211,4(13)
         MVI   16(&VP211),&VP182
         AGO   .R500              EXIT
.*
.*
.**
.**      ROUTINE R500 : GEN.OF SAVE-AREA DEFINITION
.**
.*
.R500    ANOP
.*
         AIF   (&VP161).R510      NOGEN-EXIT (RGSAVE)
.*
         AIF   (&VP201).R501      CODE = REUSABLE
         AIF   (&VP202).R510           = REFRESHABLE
         AIF   (&VP203).R510           = REENTRANT
         AGO   .R510              ERROR-EXIT
.*
.R501    ANOP
.*
         CNOP  0,4
         B     *+(&VP192*4+76)
.*
&VCC1    SETC  '&VP162'.'&VP223'  S/A + WORK-SYMBOL
&VCC1    DC    18F'0'
         AIF   (&VP191).R510
         DC    &VP192.F'0'
.R510    ANOP
.*
.*
.**
.**      ROUTINE R540 : GEN.OF EXTRN-ADCONS
.**
.*
.R540    ANOP
.*
         AIF   (&VP141).R550      NOGEN-EXIT
.*
&VCA1    SETA  1                  POINTER=1
&VCA2    SETA  &VP142             NUMB EXTRN-SYMB
.*
         CNOP  0,4
         B     *+4+(&VP142*4)
.R540A   ANOP
         AIF   (&VCA2 EQ 0).R550  LAST ADCON DONE
.*
&VP144(&VCA1) DC   A(&VP143(&VCA1))
.*
&VCA1    SETA  &VCA1+1            POINTER +1
&VCA2    SETA  &VCA2-1            NUMBER -1
         AGO   .R540A
.*
.*
.**
.**      ROUTINE R550 : GEN.OF EXEC-PARM RESOLUTION
.**
.*
.R550    ANOP
.*
         AIF   (&VP251).R560      NOGEN-EXIT
         CNOP  0,4
         B     *+12
&VCC1    SETC  '&VP252'.'&VP223'  LENGTH
&VCC2    SETC  '&VP253'.'&VP223'  ADDRESS
&VCC1    DC    F'0'
&VCC2    DC    A(0)
.*
         L     &VP211,4(13)
         L     &VP211,24(&VP211)
         L     &VP211,0(&VP211)
         LH    &VP212,0(&VP211)
         ST    &VP212,&VCC1
         LA    &VP211,2(&VP211)
         ST    &VP211,&VCC2
.*
         AGO   .R560              EXIT
.*
.*
.**
.**      ROUTINE R560 : GEN.OF CSECT-PARM RESOLUTION
.**
.*
.R560    ANOP
.*
         AIF   (&VP261).R570      NOGEN-EXIT
.*
         CNOP  0,4
         B     *+12
&VCC1    SETC  '&VP262'.'&VP223'  NUMBER
&VCC2    SETC  '&VP263'.'&VP223'  ADDRESS
&VCC1    DC    F'0'
&VCC2    DC    A(0)
.*
         L     &VP211,4(13)
         L     &VP211,24(&VP211)
         ST    &VP211,&VCC2
.*
         AGO   .R570              EXIT
.*
.*
.**
.**      ROUTINE R570 : GEN.OF ENTRY-POINT BRANCH-TABLE
.**
.*
.R570    ANOP
.*
         AIF   (&VP131).R580      NOGEN-EXIT
.*
         SR    &VP211,&VP211
         IC    &VP211,1(15)
         SLL   &VP211,2
         LA    &VP212,*+8
         B     0(&VP211,&VP212)
         B     GO01&SYSNDX
.*
&VCA1    SETA  &VP132             NUMBER EP-SYMB
&VCA2    SETA  1                  POINTER
.R570A   ANOP
.*
         B     &VP134(&VCA2)
.*
&VCA1    SETA  &VCA1-1            NUMBER -1
&VCA2    SETA  &VCA2+1            POINTER +1
         AIF   (&VCA1 NE 0).R570A DO NEXT BRANCH
.*
GO01&SYSNDX EQU   *
.*
         AGO   .R580              EXIT
.*
.*
.*
.*
.R580    ANOP
.*
.*
.*
.*
.*
         MEND
./ ADD  NAME=DMANF2
         MACRO
         DMANF2 &PGM=
****  DIESES MAKRO BENUTZT REGS 13,12,11 ALS BASIS (IMMER)     ***
         AIF   (K'&PGM GT 0).M10
         MNOTE 1,'** CSECT BZW PGMNAME FEHLT ***'
         MEXIT
.M10     ANOP
&PGM     CSECT
         USING *,15
         STM   14,12,12(13)
         L     1,SAVEAREA+18*4         @ SAVEAREA
         SPM   1                       OVERFLOW - ABEND
         ST    1,8(13)                 SAVEAREA-
         ST    13,4(1)                          VERKETTUNG
         B     SAVEAREA+19*4
         DC    CL8'&PGM'
         DROP  15
         DS    0F
         USING *,13
         USING *+4095,12
         USING *+2*4095,11
SAVEAREA DC    18F'0',B'1100',AL3(*-73)
         LR    13,1                    @ SAVE AREA,(LADEN 1. BASIS REG)
         L     1,4(1)                  @ HIGHER SAVE AREA
         L     1,24(1)                 INHALT REG 1 BEIM AUFRUF
         LA    12,4095(13)             LADEN 2. BASIS REG
         LA    11,4095(12)             LADEN 3. BASIS REG
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         SPACE 2
         MEND
./ ADD  NAME=DMEND
         MACRO
&LABEL   DMEND &RC=YES,&REG=NO
&LABEL   DMEND1 P10=&RC,P20=&REG
         MEND
./ ADD  NAME=DMEND1
         MACRO
&P00     DMEND1 &P10=NO,&P20=NO
         GBLB  &DMANF02                CODE REENT
         GBLA  &DMANF03                N'FULLW XINFO
         LCLB  &DMEND01                RC = REG + REENT
         LCLC  &TYP
         LCLA  &MENGE
         LCLA  &STREG
         AIF   (&DMANF02).RENT
&P00     L     13,4(13)                 NEXT HIGHER SAVEAREA
&STREG   SETA  13
         AGO   .RETREG
.RENT    ANOP
&STREG   SETA  14
&P00     L     14,4(13)                 NEXT HIGHER SAVEAREA
.RETREG  ANOP
         AIF   ('&P20' EQ 'NO').RETREG2
&MENGE   SETA  1
.RETREG1 AIF   (&MENGE GT N'&P20).RETREG2
         ST    &P20(&MENGE),20+&P20(&MENGE)*4(&STREG.)
&MENGE   SETA  &MENGE+1
         AGO   .RETREG1
.RETREG2 AIF   (NOT (&DMANF02)).EX
         AIF   ('&P10'(1,1) NE '(').FREE
         ST    &P10(1),16(&STREG.)
&DMEND01 SETB  1
.FREE    ANOP
         LR    1,13                     FOR FREEMAIN
&MENGE   SETA  &DMANF03*4+72
         FREEMAIN R,LV=&MENGE,A=(1)
         LR    13,14                    RESTORE R13
         AGO   .EX1
.EX      ANOP
         AIF   ('&P10'(1,1) EQ '(').R2
.EX1     ANOP
         AIF   ('&P10' EQ '').R1
         AIF   ('&P10' EQ 'NO').R1A
         AIF   ('&P10' EQ 'YES').R1
&TYP     SETC  T'&P10
         AIF   ('&TYP' EQ 'N').R3
         AIF   ('&TYP' EQ 'F').R4
         AIF   ('&TYP' EQ 'H').R5
         AGO   .R1
.R1      ANOP
         SR    15,15                    RETURN-CODE = 0
         AGO   .RX
.R1A     ANOP
         AGO   .RX
.R2      ANOP
         LR    15,&P10(1)               RETURN-CODE IN REGISTER
         AGO   .RX
.R3      ANOP
         LA    15,&P10(1)               RETURN-CODE
         AGO   .RX
.R4      ANOP
         L     15,&P10(1)               RETURN-CODE IN FULLWORD
         AGO   .RX
.R5      ANOP
         LH    15,&P10(1)               RETURN-CODE IN HALFWORD
         AGO   .RX
.RX      ANOP
         L     14,12(13)                LOAD RETURN-ADDRESS
         AIF   (&DMEND01).RX1
         LM    0,12,20(13)              RESTORE REGISTERS
         AGO   .RX2
.RX1     ANOP
         LM    15,12,16(13)             RESTORE REGISTERS
.RX2     ANOP
         BR    14                       RETURN
         MEND
./ ADD  NAME=DO
         MACRO
&LABEL   DO    &B,&BY=1
         GBLA  &QDOPSUB
         GBLA  &QDOLSUB
         GBLA  &QDOGSUB
         GBLA  &QDOSUM
         GBLA  &QDOSKSB
         GBLA  &QDODEF
         GBLC  &QDOLS(50)
         GBLC  &QDOGLAB(100)
         GBLC  &QDOPS(50)
         LCLA  &KK
         LCLA  &K3,&K4
         LCLA  &I,&N,&K,&L,&RS,&HS,&XXK,&XKK,&LX1,&L1,&XK,&SCH
         LCLB  &LABSW,&OR(45),&AND(45)
         LCLC  &MACRO,&CND,&CNDN
         LCLC  &OPA,&OP1,&COND,&OP2,&DEF,&DODEF,&EDOLAB,&DOLAB
         LCLC  &DOELAB,&H,&R,&X,&INNER,&D1,&K1,&K2,&LIT
         LCLA  &QBZ
         ACTR  16000
&MACRO   SETC  'DO'
.*
         QCOUNT DO
.*
&QBZ     SETA  1
         AIF   (T'&LABEL NE 'O').B1010
         AGO   .B1020
.B1010   ANOP
         MNOTE 12,'*** LABELANGABE NICHT ERLAUBT      BED. &QBZ M 01'
.B1020   ANOP
&QDOSUM  SETA  4
&N       SETA  N'&SYSLIST
         AIF   (&N GT 0).B1030
         MNOTE 12,'*** OPERAND/ HOCHKOMMA FEHLT       BED. &QBZ M02'
         AGO   .B1310
.B1030   ANOP
.*    UPDATEN DER ANSPRUNGSPUNKTE   ******
&QDOPSUB SETA  &QDOPSUB+1
&QDOPS(&QDOPSUB)  SETC  '&QDOSUM'
&QDOGSUB SETA  &QDOGSUB+1
&QDOSKSB SETA  &QDOSKSB+1
&QDOGLAB(&QDOGSUB)  SETC  'QDO&QDOSKSB'
&DOLAB  SETC  'QDO&QDOSKSB'            ANSPRUNG DO
&QDOSKSB SETA  &QDOSKSB+1
&QDOGSUB SETA  &QDOGSUB+1
&QDOGLAB(&QDOGSUB)  SETC  'QDO&QDOSKSB'
&DOELAB  SETC  'QDO&QDOSKSB'           RUECKSPRUNG EDO
&QDOSKSB SETA  &QDOSKSB+1
&QDOGSUB SETA  &QDOGSUB+1
&QDOGLAB(&QDOGSUB)  SETC  'QDO&QDOSKSB'
&EDOLAB  SETC  'QDO&QDOSKSB'             ENDE EDO
&I       SETA  1
.B1040   ANOP
         AIF   (&I+1 GT &N).B1070
         AIF   ('&SYSLIST(&I+1)' EQ 'AND' OR                           *
               '&SYSLIST(&I+1)' EQ '&&').B1060
         AIF   ('&SYSLIST(&I+1)' EQ 'OR' OR                            *
               '&SYSLIST(&I+1)' EQ '×').B1055
.B1050   ANOP
         MNOTE 12,'*** FALSCHE KETTUNG/ KLAMMER FEHLT BED. &QBZ M 05'
         AGO   .B1310
         AGO   .B1065
.B1055   ANOP
&OR(&I)  SETB  1
         AGO   .B1065
.B1060   ANOP
&AND(&I) SETB  1
.B1065   ANOP
&I       SETA  &I+2
         AGO   .B1040
.B1070   ANOP
&I       SETA  1
.***********************************************************
         AIF   (N'&SYSLIST(&I) EQ 3).B1125
&OP1     SETC  '&SYSLIST(&I,1)'
         AIF   ('&OP1'(1,1) EQ '(').B1120
&K       SETA  K'&SYSLIST(&I,1)
&KK      SETA  1
.B1075   ANOP
         AIF   ('&OP1'(&KK,1) GE '0' AND '&OP1'(&KK,1) LE '9').B1080
         MNOTE 12,'*** FALSCHER OPERAND               BED. &QBZ M 08'
         AGO   .B1310
.B1080   ANOP
         AIF   (&KK EQ &K).B1090
&KK      SETA  &KK+1
         AGO   .B1075
.B1085   ANOP
         MNOTE 12,'*** A N D ANGABE NICHT ERLAUBT     BED. &QBZ M 09'
         AGO   .B1310
.B1090   ANOP
         AIF   ('&SYSLIST(&I+1)' EQ 'AND' OR                           *
               '&SYSLIST(&I+1)' EQ '&&').B1085
&K       SETA  K'&SYSLIST(&I,1)
&OP1     SETC  '&SYSLIST(&I,1)'
&DEF     SETC  'P'''.'&OP1'(1,&K).''''
&LIT     SETC  '='.'&DEF'
&QDODEF  SETA  &QDODEF+1
&DODEF   SETC  'QDODF&QDODEF'
         ZAP   &DODEF,&LIT
         B     &DOLAB
&DODEF   DC    &DEF
&DOLAB   DS    0H
&D1      SETC  '2'
         SP    &DODEF,=P'&BY'
.B1100   ANOP
         BM    &EDOLAB
         AIF   (&I EQ &N).B1110
&I       SETA  &I+2
&QBZ     SETA  &QBZ+1
         AGO   .B1125
.B1110   ANOP
&D1      SETC  '1'
&QBZ     SETA   1
         MEXIT
.B1120   ANOP
         AIF   ('&SYSLIST(&I+1)' EQ 'AND' OR                           *
               '&SYSLIST(&I+1)' EQ '&&').B1085
&DOLAB   DS    0H
&D1      SETC  '2'
         SH    &OP1,=H'&BY'
         AGO   .B1100
.B1125  ANOP
&COND    SETC  '&SYSLIST(&I,2)'
         AIF   ('&COND' EQ 'OR' OR '&COND' EQ '×').B1130
         AIF   ('&COND' EQ 'AND' OR '&COND' EQ '&&').B1130
         AGO   .B1135
.B1130  ANOP
         MNOTE 12,'*** FALSCHE KETTUNG/ KLAMMER FEHLT BED. &QBZ M 10'
         AGO   .B1310
.B1135  ANOP
         AIF   (N'&SYSLIST(&I) EQ 3).B70100
         AIF   (N'&SYSLIST(&I) EQ 1).B1140
         MNOTE 12,'*** OPERANDEN UEBERPRUEFEN         BED. &QBZ M 06'
         AGO   .B1310
         COPY  QINNERB      BC CODE AUFBAUEN
.B1240   ANOP
         AIF   (&I EQ &N).B1290
         AIF   (&AND(&I)).B1260
         AIF   (&OR(&I)).B1280
.***************************************************
         MNOTE 12,'*** FALSCHER VERGL.D OPERAND       BED. &QBZ M 07'
         AGO   .B1310
.B1250   ANOP
&I       SETA  &I+2
&QBZ     SETA  &QBZ+1
         AGO   .B1125
.B1260   ANOP
         AIF   (&SCH EQ 1).B1270
&QDOSKSB SETA  &QDOSKSB+1
&INNER   SETC  'QDO&QDOSKSB'
&SCH     SETA  1
.B1270   ANOP
         &CNDN &INNER
         AGO   .B1250
.B1280   ANOP
         &CND  &EDOLAB
         AIF   (&SCH EQ 0).B1250
&INNER   DS    0H
&SCH     SETA  0
         AGO   .B1250
.B1290   ANOP
         &CND  &EDOLAB
         AIF   (&SCH EQ 0).B1300
&INNER   DS    0H
&SCH     SETA   0
.B1300   ANOP
&D1      SETC  '1'
&QBZ     SETA  1
         MEXIT
.B1310   ANOP
         AIF   ('&D1' EQ '2').B1320
&DOLAB   DS    0H
.B1320   ANOP
         MEXIT
.*******************************************************
.B70100  ANOP
         AIF   ('&D1' EQ '2').B70105
&DOLAB   DS    0H
&D1      SETC  '2'
.B70105  ANOP
&OP1     SETC  '&SYSLIST(&I,1)'
&COND    SETC  '&SYSLIST(&I,2)'
&OP2     SETC  '&SYSLIST(&I,3)'
         AGO   .B70108
         COPY  QINNERA          CHECK OPERANDS
         MEND
./ ADD  NAME=ECASE
         MACRO
         ECASE  &A
         GBLA  &QCAGSUB
         GBLA  &QCASKSB
         GBLA  &QCABER(50)
         GBLA  &QCABLK(50)
         GBLA  &QCABAK(50)
         GBLA  &QCACKE(50)
         GBLA  &INT
         GBLA  &QCAPSUB
         GBLA  &INTX
         GBLC  &QCAGLAB(100)
         LCLA  &QCAER
         LCLC  &ECALAB
         LCLC  &CAELAB
         LCLC  &ANZ
         AIF   (&QCAPSUB NE 0).B0005
         MNOTE 12,'*** FALSCHE PALZIERUNG VON ECASE        B0005 ***'
         MEXIT
.B0005   ANOP
.*
         QCOUNT ECASE
.*
&QCAPSUB  SETA  &QCAPSUB-1
         AIF  (&QCACKE(&INT) NE 0).B0010
&CAELAB SETC '&QCAGLAB(&QCAGSUB-(&QCABER(&INT))-2)'
&CAELAB  EQU   *
.*                                     PROG F  ANSPRUNG
&QCAER   SETA  &QCAER-1
&QCACKE(&INT)  SETA  0
.B0010   ANOP
&ECALAB  SETC  '&QCAGLAB(&QCAGSUB-(&QCABER(&INT))-1)'
&QCAGSUB  SETA  &QCAGSUB-3
&QCAGSUB  SETA  &QCAGSUB-(&QCABER(&INT))
&INTX    SETA  &INTX-(&QCABER(&INT)+1)
         AIF   (&QCABAK(&INT) EQ 0).B0020
&ANZ     SETC  '&QCABAK(&INT)'
         MNOTE 12,'***&ANZ VERARBEITUNGSTEIL(E) NICHT VORHANDEN ***'
.B0020   ANOP
&QCABER(&INT)  SETA  0
&QCACKE(&INT)  SETA  0
&INT     SETA   &INT-1
&ECALAB  EQU   *
.*                                     ECASE  ENDE ANSPRUNG
         MEND
./ ADD  NAME=EDCL
         MACRO
         EDCL
         GBLA  &QDCSKSB
         GBLA  &QDCGSUB
         GBLC  &QDCGLAB(100)
         LCLC  &LABEL
.*
         QCOUNT EDCL
.*
&LABEL   SETC  '&QDCGLAB(&QDCGSUB)'
         DS    0H
&LABEL   EQU   *
         MEND
./ ADD  NAME=EDO
         MACRO
         EDO
         GBLA  &QDOPSUB
         GBLA  &QDOGSUB
         GBLC  &QDOGLAB(100)
         LCLC  &EDOLAB
         LCLC  &DOLAB
         AIF   (&QDOPSUB NE 0).B0010
         MNOTE 4,'*** FALSCHE PLAZIERUNG VON EDO           B0010 ***'
         MEXIT
.B0010   ANOP
.*
         QCOUNT EDO
.*
&DOLAB   SETC  '&QDOGLAB(&QDOGSUB-2)'
&EDOLAB  SETC  '&QDOGLAB(&QDOGSUB)'
&QDOPSUB SETA  &QDOPSUB-1
&QDOGSUB SETA  &QDOGSUB-3
         B     &DOLAB
.B0075   ANOP
&EDOLAB  EQU   *
         MEND
./ ADD  NAME=EGRP
         MACRO
         EGRP  &LABEL
         GBLA  &QGRPC
         GBLC  &QGRPL(256)
         LCLA  &A
.*
         AIF   (&QGRPC LT 1).FLEVL
         AIF   ('&LABEL' EQ '').NOLABEL
&A       SETA  1
.LOOP    AIF   ('&QGRPL(&QGRPC)' EQ '&LABEL').FOUND
&QGRPC   SETA  &QGRPC-1
&A       SETA  &A+1
         AIF   (&QGRPC GT 0).LOOP
         MNOTE 12,'******  GRP-LABEL  NICHT GEFUNDEN *******'
         MEXIT
.FOUND   AIF   (&A LT 1).ENDE
         ENDE  GRP
         MEXIT
.NOLABEL ANOP
.*
         QCOUNT EGRP
.*
&QGRPL(&QGRPC) SETC ''
&QGRPC   SETA  &QGRPC-1
         MEXIT
.FLEVL   MNOTE 4,'****** G R O U P   -    MAKRO FEHLT ********'
.ENDE    MEND
./ ADD  NAME=EIF
         MACRO
         EIF
         GBLA  &QIFPSUB
         GBLA  &QIFLSUB
         GBLA  &QIFGSUB
         GBLA  &QIFSKSB
         GBLA  &QIF1DR
         GBLC  &QIFLS(50)
         GBLC  &QIFGLAB(100)
         GBLC  &QIFPS(50)
         LCLC  &MACRO
         LCLC  &HERE
         AIF   (&QIFPSUB NE 0).B0010
         MNOTE 4,'***   FALSCHE PLAZIERUNG VON EIF         B0010 ***'
         MEXIT
.B0010   ANOP
.*
         QCOUNT EIF
.*
&MACRO   SETC  '&QIFPS(&QIFPSUB)'(1,1)
         AIF   ('&MACRO' EQ '7').B0060
         MNOTE 4,'***   FALSCHE PLAZIERUNG VON EIF         B0010 ***'
         AIF   (&QIFPSUB GE 2).B0020
         AGO   .B0060
.B0020   ANOP
&MACRO   SETC  '&QIFPS(&QIFPSUB-1)'(1,1)
         AIF   ('&MACRO' EQ '7').B0030
         MNOTE 4,'***   WO IST DAS DAZUGEHOERIGE IF ?      B0020 ***'
         AGO   .B0060
.B0030   ANOP
         MNOTE 4,'***   NAECHSTER GEFUNDENER LABEL IST IF  B0030 ***'
         MNOTE '        LABEL WIRD ZURUECKGESETZT'
&QIFPSUB SETA  &QIFPSUB-1
         AGO   .B0060
.B0060   ANOP
&HERE    SETC  '&QIFGLAB(&QIFGSUB)'
&QIFGSUB SETA  &QIFGSUB-1
&MACRO   SETC  '&QIFPS(&QIFPSUB)'(1,1)
         AIF   ('&MACRO' EQ '7').B0090
.B0090   ANOP
&QIFPSUB SETA  &QIFPSUB-1
.B0095   ANOP
&HERE    EQU   *
         MEND
./ ADD  NAME=ELSE
         MACRO
         ELSE
         GBLA  &QIFPSUB
         GBLA  &QIFLSUB
         GBLA  &QIFGSUB
         GBLA  &QIFSKSB
         GBLA  &QIF1DR
         GBLC  &QIFLS(50)
         GBLC  &QIFGLAB(100)
         GBLC  &QIFPS(50)
         LCLC  &MACRO
         LCLC  &HERE,&THERE
         AIF   (&QIFPSUB NE 0).B0010
         MNOTE 4,'***  ELSE MUSS ZWISCHEN IF UND EIF LIEGEN   B0010*'
         MEXIT
.B0010   ANOP
.*
         QCOUNT ELSE
.*
&MACRO   SETC  '&QIFPS(&QIFPSUB)'(1,1)
         AIF   ('&MACRO' EQ '7').B0035
         MNOTE 4,'*** FALSCHE PLAZIERUNG VON ELSE          B0010$$$'
.B0035   ANOP
&QIFSKSB SETA  &QIFSKSB+1
&THERE   SETC  'QIF&QIFSKSB'
         B     &THERE
&HERE    SETC  '&QIFGLAB(&QIFGSUB)'
&HERE    EQU   *
&QIFGLAB(&QIFGSUB) SETC '&THERE'
&QIFPS(&QIFPSUB) SETC '&QIFPS(&QIFPSUB)'(1,1).'1'
         MEND
./ ADD  NAME=ENDE
         MACRO
         ENDE  &TYP
         GBLA  &QCOUNTR,&QMACTYP(256)
         LCLA  &A
         AIF   (&QCOUNTR LT 1).F1
         AIF   ('&TYP' EQ '').START
&A       SETA  9999
         AIF   ('&TYP' EQ '0').START
&A       SETA  10
         AIF   ('&TYP' EQ 'IF').START
&A       SETA  30
         AIF   ('&TYP' EQ 'CASE').START
&A       SETA  40
         AIF   ('&TYP' EQ 'PROG').START
&A       SETA  50
         AIF   ('&TYP' EQ 'DO').START
&A       SETA  60
         AIF   ('&TYP' EQ 'DCL').START
&A       SETA  70
         AIF   ('&TYP' EQ 'GRP').START
         MNOTE 12,'****** FALSCHER ENDE OPERAND (&TYP.) ******'
         MEXIT
.NEXT    AIF   (&A EQ 0).AUSGANG
         AIF   (&A NE &QMACTYP(&QCOUNTR)).START
&A       SETA  0
.START   AIF   (&QMACTYP(&QCOUNTR) EQ 10).EIF
         AIF   (&QMACTYP(&QCOUNTR) EQ 20).ELSE
         AIF   (&QMACTYP(&QCOUNTR) EQ 30).ECASE
         AIF   (&QMACTYP(&QCOUNTR) EQ 40).EPROG
         AIF   (&QMACTYP(&QCOUNTR) EQ 50).EDO
         AIF   (&QMACTYP(&QCOUNTR) EQ 60).EDCL
         AIF   (&QMACTYP(&QCOUNTR) EQ 70).EGRP
.*
.EIF     ANOP
         EIF
         AGO   .ENDE
.ELSE    ANOP
&QMACTYP(&QCOUNTR) SETA 0
&QCOUNTR SETA  &QCOUNTR-1
         AGO   .START
.ECASE   ANOP
         ECASE
         AGO   .ENDE
.EPROG   ANOP
         EPROG
         AGO   .ENDE
.EDO     ANOP
         EDO
         AGO   .ENDE
.EDCL    ANOP
         EDCL
         AGO   .ENDE
.EGRP    ANOP
         EGRP
.ENDE    ANOP
.* DIESE ANWEISUNGEN ERFOLGEN IN QCOUNT IN EDO,EPROG,EIF USW
.*&QMACTYP(&QCOUNTR) SETA 0
.*&QCOUNTR SETA  &QCOUNTR-1
.*
         AIF   (&A EQ 0).AUSGANG
         AIF   (&QCOUNTR GT 0).NEXT
         AIF   (&A EQ 9999).AUSGANG
.F1      MNOTE 4,'****** ZU ENDE-MACRO  FEHLT IF/DO/CASE/DCL ******'
         MEXIT
.AUSGANG ANOP
         MEND
./ ADD  NAME=EPROG
         MACRO
         EPROG &A
         GBLA  &QCAPSUB
         GBLA  &QCAGSUB
         GBLA  &QCASKSB
         GBLA  &QCABER(50)
         GBLA  &QCABLK(50)
         GBLA  &QCABAK(50)
         GBLA  &QCACKE(50)
         GBLA  &INT
         GBLC  &QCAGLAB(100)
         LCLC  &ECALAB
         AIF   (&QCAPSUB NE 0).B0010
         MNOTE 4,'*** FALSCHE PLAZIERUNG VON EPROG         B0010 ***'
         MEXIT
.B0010   ANOP
.*
         QCOUNT EPROG
.*
&ECALAB  SETC  '&QCAGLAB(&QCAGSUB-(&QCABER(&INT))-1)'
         B     &ECALAB
         MEND
./ ADD  NAME=EQUATE
         MACRO
         EQUATE
*
*        REGISTER EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
RA       EQU   R10
R11      EQU   11
RB       EQU   R11
R12      EQU   12
RC       EQU   R12
R13      EQU   13
RD       EQU   R13
R14      EQU   14
RE       EQU   R14
R15      EQU   15
RF       EQU   R15
         SPACE 2
         MEND
./ ADD  NAME=IEFACTRT
IEFACTRT CSECT
         XSAVE BASE,,IEFACTRT,WORKL
         USING WORK,R13
         USING DEVICES,DEVBAS
         USING MSGNAGES,MSGNBAS
         USING PREISTAB,PREISBAS
         USING CUED,CUEDBAS
         SR    R15,R15
         L     WORK2,0(R1)
         CLI   7(WORK2),C'$'
         BNE   NODJC
         LINK  EP=SPDJC02
NODJC    EQU   *
         XC    CLEARANF(CLEARLEN),CLEARANF
         ST    R15,RETCODE
         ST    R1,ORGR1SVA
         ST    LCTREG,LCTRSVA
         LA    WORK2,MSG               LCT VORBEREITEN
         ST    WORK2,36(LCTREG)        FUER VERWENDUNG
         MVC   42(2,LCTREG),=H'118'    DER ROUTINE 'IEFYS'
         L     MSGNBAS,=V(ACTRTMSG)
         ST    MSGNBAS,MSGBASSV
         L     WORK2,ORGR1SVA
         MVC   COMEXTAB,0(WORK2)
         L     WORK3,COMEXTAB
         MVC   COMUEDAT,32(WORK3)
         L     WORK3,36(WORK2)
         LA    WORK3,4(WORK3)
         ST    WORK3,RECADDR
         XC    30(2,WORK3),30(WORK3)
         L     WORK4,4(R13)
         TM    23(WORK4),X'10'
         BO    JOBEND
         MVI   MSG,C'*'
         MVC   MSG+1(117),MSG
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         MVC   MSGN,MSGN1
         L     WORK4,ORGR1SVA
         L     WORK5,28(WORK4)         STEP-NO.
         SR    R15,R15
         IC    R15,1(WORK5)
         CVD   R15,DBLWD
         UNPK  MSGN(2),DBLWD
         OI    MSGN+1,X'F0'
         LA    WORK3,MSGN+31
         L     WORK4,COMEXTAB
         LA    WORK2,12(WORK4)
         BAL   LINK,GETDAT
         MVC   MSGN+83(4),16(WORK4)
         L     R15,16
         SH    R15,=H'6'
         UNPK  MSGN+63(4),0(3,R15)
         MVI   MSGN+66,C' '
         MVC   PREISLOC,=CL8'PREIS'
         MVC   DEVLOC,=CL8'DEV'
         MVC   PREISLOC+5(2),16(WORK4)
         MVC   DEVLOC+3(2),16(WORK4)
         L     WORK5,RECADDR
         TM    83(WORK5),X'02'
         BO    TSTCC
RETCD    EQU   *
         MVC   MSGN+91(11),=CL11'RC ='
         MVC   DBLWD(2),51(WORK5)
         LH    R15,DBLWD
         CVD   R15,DBLWD
         UNPK  MSGN+96(3),DBLWD
         OI    MSGN+98,X'F0'
         B     NOCC
TSTCC    EQU   *
         TM    51(WORK5),X'80'
         BNO   SYSCC
         MVI   MSGN+96,C'U'
         MVC   DBLWD(2),51(WORK5)
         LH    R15,DBLWD
         SLL   R15,20
         SRL   R15,20
         CVD   R15,DBLWD
         UNPK  MSGN+99(3),DBLWD
         OI    MSGN+101,X'F0'
         B     NOCC
SYSCC    EQU   *
         UNPK  MSGN+99(4),51(3,WORK5)
         MVI   MSGN+102,X'40'
         TR    MSGN+99(3),CCTAB-240
NOCC     EQU   *
         BAL   LINK,WRITE
         MVC   MSGN,MSGN2
         MVC   MSGN+6(8),0(WORK4)
         LA    WORK2,39(WORK5)
         LA    WORK3,MSGN+32
         BAL   LINK,GETZEIT
         LOAD  EPLOC=PREISLOC
         ST    R0,PRBASSVA
         LR    PREISBAS,R0
         L     WORK2,CPUPR
         LA    WORK3,MSGN+63
         BAL   LINK,EDPREIS
         LR    WORK9,WORK2
         L     R12,ORGR1SVA
         L     WORK2,20(R12)
         L     WORK2,0(WORK2)
         SRL   WORK2,8
         L     R1,ORGR1SVA
         L     R1,0(R1)
         TM    29(R1),X'01'
         BNO   NOTSO4
         L     R1,RECADDR
         LH    WORK3,102(R1)
         LA    R1,102(WORK3,R1)
         MH    WORK2,=H'15'
         SR    WORK3,WORK3
         D     WORK3,=F'10'
         STCM  WORK2,7,1(R1)
NOTSO4   EQU   *
         MH    WORK2,CPULF
         SR    WORK3,WORK3
        D     WORK3,=F'1000'
         LA    WORK3,MSGN+84
         BAL   LINK,EDZTSTD
         MR    R2,WORK9
         D     R2,=F'360000'  CPUPR IN PF/STD
         L     R14,COMEXTAB
         TM    30(R14),X'E8'
         BNZ   BERDA
         L     R14,28(R12)
         CLI   1(R14),X'01'
         BH    BERDA
GETMAIN  GETMAIN R,LV=16,SP=255
         ST    R1,COMUEDAT
         L     R12,COMEXTAB
         ST    R1,32(R12)
         XC    0(16,R1),0(R1)
         LR    CUEDBAS,R1
BERDA    EQU   *
         BAL   LINK,ACCDMSTP
         CVD   WORK2,DBLWD
         ED    MSGN+102(10),DBLWD+4
         BAL   LINK,WRITE
         L     R1,ORGR1SVA
         L     R1,0(R1)
         TM    29(R1),X'01'
         BNO   NOTSO1
         LA    R0,61
         LA    R1,MSG+54
         SVC   93
NOTSO1   EQU   *
*                ERRECHNEN DER LAUFZEIT
         L     R12,RECADDR
         LH    WORK3,102(R12)
         BCTR  WORK3,0
         BCTR  WORK3,0
         SRL   WORK3,3
         LTR   WORK3,WORK3
         BZ    ENDLZ
         LOAD  EPLOC=DEVLOC
         ST    R0,DEVBASSV
         LR    DEVBAS,R0
         LA    WORK4,104(R12)
NXTDEV   EQU   *
         TM    2(WORK4),X'80'
         BNO   OVER2
         MVC   0(2,WORK4),=C'MS'
OVER2    EQU   *
         CLC   0(2,WORK4),DEVTYPE
         BE    ACCDEV
         LA    DEVBAS,40(DEVBAS)
         CLC   DEVCHNC(40),=XL40'00'
         BNE   NXTDEV
INCRUCB  EQU   *
         LA    WORK4,8(WORK4)
         L     DEVBAS,DEVBASSV
         BCT   WORK3,NXTDEV
         B     TCTEND
ACCDEV   EQU   *
         CLC   4(4,WORK4),=F'0'
         BE    TSTBEL
         TM    DEVSWT,X'20'
         BNO   KOK
         OI    SWITCH,X'20'
KOK      EQU   *
         OI    SWITCH,X'40'
         L     R15,DEVEXCPC
         A     R15,4(WORK4)
         ST    R15,DEVEXCPC
TSTBEL   EQU   *
         TM    DEVSWT,X'80'
         BNO   INCRUCB
         CLI   DEVTYPE,X'20'
         BNE   INCRBEL
         L     WORK2,16
         L     WORK2,40(WORK2)
NXTUCB   EQU   *
         BAL   WORK7,SEARCH
         UNPK  DBLWD(4),2(3,WORK4)
         TR    DBLWD(3),CCTAB-240
         CLC   DBLWD(3),13(WORK5)
         BE    UNITFND
         B     NXTUCB
SEARCH   EQU   *
         CLC   0(2,WORK2),=H'-1'
         BE    INCRUCB
         SR    WORK5,WORK5
         ICM   WORK5,3,0(WORK2)
         LA    WORK2,2(WORK2)
         LTR   WORK5,WORK5
         BZ    SEARCH
         BR    WORK7
UNITFND  EQU   *
         TM    34(WORK5),X'10'     PRIVATE- DASD-VOL  ?
         BNO   INCRUCB
         TM    3(WORK5),X'04'   PERM. RESIDENT?
         BO    INCRUCB
INCRBEL  EQU   *
         LA    R15,104(R12)
NXTPRIV  EQU   *
         CR    R15,WORK4
         BE    INCRBELX
         CLC   2(2,WORK4),2(R15)
         BE    INCRUCB
         LA    R15,8(R15)
         B     NXTPRIV
INCRBELX EQU   *
         L     R15,RECADDR
         SR    R1,R1
         CLI   DEVTYPE,X'80'
         BNE   NOTAP
         IC    R1,31(R15)
         LA    R1,1(R1)
         STC   R1,31(R15)
         B     NOLST
NOTAP    EQU   *
         CLI   DEVTYPE,X'20'
         BNE   NODISK
         IC    R1,30(R15)
         LA    R1,1(R1)
         STC   R1,30(R15)
         B     NOLST
NODISK   EQU   *
         CLC   DEVTYPE,=XL2'0810'
         BNE   NOLST
         OI    SWITCH,X'01'
NOLST    EQU   *
         LH    R15,DEVBELC
         LA    R15,1(R15)
         STH   R15,DEVBELC
         CLC   DEVTYPE(2),=CL2'MS'
         BNE   INCRUCB
         L     R15,MSSMNTIM
         AH    R15,MNTMSS
         ST    R15,MSSMNTIM
         B     INCRUCB
TCTEND   EQU   *
         TM    SWITCH,X'40'
         BNO   ENDLZ
         L     DEVBAS,DEVBASSV
DEVNEXT  EQU   *
         CLC   DEVCHNC(40),=XL40'00'
         BE    ENDLZ
         L     R14,DEVEXCPC
         L     R15,ZGSU
         AR    R15,R14
         ST    R15,ZGSU
         MH    R14,DEVZF
         A     R14,ERRLZ
         ST    R14,ERRLZ
         LA    DEVBAS,40(DEVBAS)
         B     DEVNEXT
ENDLZ    EQU   *
         L     WORK2,ERRLZ
         SR    R2,R2
         D     R2,=F'100'
         L     R1,RECADDR
         LH    WORK4,102(R1)
         LA    R1,103(WORK4,R1)
         L     WORK5,0(R1)    STEP RUN TIME
         SRL   WORK5,8
        MH    WORK5,CPULF
         SR    WORK4,WORK4
        D     WORK4,=F'1000'
         AR    WORK2,WORK5
         L     R15,RECADDR
         SR    R1,R1
         IC    R1,30(R15)
         MH    R1,MNTDSK
         AR    WORK2,R1
         SR    R1,R1
         IC    R1,31(R15)
         MH    R1,MNTTAP
         AR    WORK2,R1
         TM    SWITCH,X'01'
         BNO   NOLST1
         LH    R1,MNTLST
         AR    WORK2,R1
NOLST1   EQU   *
         A     WORK2,MSSMNTIM
         ST    WORK2,ERRLZ
         CLC   14(3,R15),=CL3'ONL'
         BNE   BATCH
         MVC   DBLWD,2(R15)
         L     WORK2,DBLWD
         MVC   DBLWD,39(R15)
         C     WORK2,DBLWD
         BH    TMEOK11
         A     WORK2,=F'8640000'
TMEOK11  EQU   *
         S     WORK2,DBLWD
         ST    WORK2,ERRLZ
BATCH    EQU   *
         MVC   MSGN,MSGN3
         L     WORK4,ORGR1SVA
         L     WORK5,4(WORK4)
         MVC   MSGN+6(8),0(WORK5)
         L     WORK5,RECADDR
         LA    WORK2,2(WORK5)
         LA    WORK3,MSGN+32
         BAL   LINK,GETZEIT
         BAL   LINK,WRITE
         MVC   MSGN,MSGN4
         MVC   MSGN+6(8),54(WORK5)
         MVC   DBLWD,2(WORK5)
         L     WORK2,DBLWD
         MVC   DBLWD,39(WORK5)
         L     WORK3,DBLWD
         CR    WORK3,WORK2
         BNH   TMEOK
         A     WORK2,=F'8640000'
TMEOK    EQU   *
         SR    WORK2,WORK3
         LA    WORK3,MSGN+29
         BAL   LINK,EDZTSTD
         BAL   LINK,WRITE
         MVC   MSGN,MSGN5
         SR    R15,R15
         IC    R15,53(WORK5)
         SH    R15,=H'11'
         SRL   R15,4
         CVD   R15,DBLWD
         UNPK  MSGN+8(2),DBLWD
         OI    MSGN+9,X'F0'
         LA    WORK3,MSGN+26
         L     WORK4,ORGR1SVA
         L     WORK2,24(WORK4)
         CLI   0(WORK2),X'00'
         BE    JOBACC
         BAL   LINK,GETACC
         B     ACCDA
JOBACC   EQU   *
         L     WORK2,16(WORK4)
         CLI   0(WORK2),X'00'
         BE    NOACC
         BAL   LINK,GETACC
         B     ACCDA
NOACC    EQU   *
         MVC   MSGN+28(4),=CL2'NA'
         MVC   MSGN+40(2),=CL2'NA'
ACCDA    EQU   *
         L     WORK2,ERRLZ
         LA    WORK3,MSGN+84
         BAL   LINK,EDZTSTD
         L     WORK2,LZPR
         LA    WORK3,MSGN+68
         BAL   LINK,EDPREIS
         M     R2,ERRLZ
         D     R2,=F'360000'   PREIS IN PF F. ERRLZ
         CVD   WORK2,DBLWD
         ED    MSGN+102(10),DBLWD+4
         BAL   LINK,ACCDMSTP
         BAL   LINK,WRITE
         L     R1,ORGR1SVA
         L     R1,0(R1)
         TM    29(R1),X'01'
         BNO   NOTSO2
         LA    R0,61
         LA    R1,MSG+54
         SVC   93
NOTSO2   EQU   *
         BAL   LINK,CLEARMSG
         BAL   LINK,WRITE
         TM    SWITCH,X'40'
         BZ    NOIO
         MVC   MSGN,MSGN6
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         BAL   LINK,WRITE
         TM    SWITCH,X'20'
         BZ    NOPREISZ
         MVC   MSGN,MSGN7
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         L     DEVBAS,DEVBASSV
NEWLINE  LA    WORK2,MSGN
         LA    WORK3,6
PRTDVPR  EQU   *
         TM    DEVSWT,X'20'
         BNO   NOTKOPF
         MVC   0(4,WORK2),DEVNAME
         MVI   4(WORK2),C':'
         LH    WORK4,DEVZGPR
         CVD   WORK4,DBLWD
         MVC   6(2,WORK2),=C'0.'
         UNPK  8(5,WORK2),DBLWD
         OI    12(WORK2),X'F0'
         LA    WORK2,16(WORK2)
NOTKOPF  EQU   *
         LA    DEVBAS,40(DEVBAS)
         CLC   DEVCHNC(40),=XL40'00'
         BE    WRKOPF1
         BCT   WORK3,PRTDVPR
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         B     NEWLINE
WRKOPF1  BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         BAL   LINK,WRITE
NOPREISZ EQU   *
         MVC   MSGN,MSGN8
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         L     DEVBAS,DEVBASSV
         LA    WORK4,MSGN
         LA    WORK5,3
         L     R7,RECADDR
         LH    R6,102(R7)
         BCTR  R6,0
         BCTR  R6,0
         SRL   R6,3
         LTR   R6,R6
         BZ    WRBLANK
         LA    R7,104(R7)
XA       EQU   *
         CLC   DEVTYPE,0(R7)
         BE    XC
         LA    DEVBAS,40(DEVBAS)
         CLC   DEVCHNC(40),=XL40'00'
         BE    XD
         B     XA
XC       EQU   *
         L     WORK2,4(R7)
         LTR   WORK2,WORK2
         BZ    XD
         MVC   0(4,WORK4),DEVNAME
         UNPK  5(4,WORK4),2(3,R7)
         MVI   8(WORK4),X'40'
         TR    5(3,WORK4),CCTAB-240
         CVD   WORK2,DBLWD
         UNPK  9(7,WORK4),DBLWD
         OI    15(WORK4),X'F0'
         MH    WORK2,DEVZGPR
         L     R14,EAPRSU
         AR    R14,WORK2
         ST    R14,EAPRSU
         SR    R2,R2
         D     R2,=F'1000'
         MVC   16(10,WORK4),=CL10' ½½ ½À½.½½'
         CVD   WORK2,DBLWD
         ED    16(10,WORK4),DBLWD+4
         LA    WORK4,33(WORK4)
         BCT   R5,XD
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         LA    WORK4,MSGN
         LA    WORK5,3
XD       EQU   *
         LA    R7,8(R7)
         L     DEVBAS,DEVBASSV
         BCT   R6,XA
         LA    R15,MSGN
         CR    WORK4,R15
         BE    WRBLANK
         BAL   LINK,WRITE
WRBLANK  EQU   *
         BAL   LINK,CLEARMSG
         BAL   LINK,WRITE
         MVC   MSGN,MSGN9
         L     WORK4,ZGSU
         CVD   WORK4,DBLWD
         UNPK  MSGN+63(9),DBLWD
         OI    MSGN+71,X'F0'
         L     WORK2,EAPRSU
         SR    R2,R2
         D     R2,=F'1000'
         BAL   LINK,ACCDMSTP
         CVD   WORK2,DBLWD
         ED    MSGN+102(10),DBLWD+4
         BAL   LINK,WRITE
         L     R1,ORGR1SVA
         L     R1,0(R1)
         TM    29(R1),X'01'
         BNO   NOIO
         LA    R0,70
         LA    R1,MSG+45
         SVC   93
         B     NOSYSIN
NOIO     EQU   *
         L     WORK2,RECADDR
         CLC   47(4,WORK2),=F'0'
         BE    NOSYSIN
         MVC   DBLWD,47(WORK2)
         L     WORK2,DBLWD
         CVD   WORK2,DBLWD
         MVC   MSGN,MSGN10
         ED    MSGN+40(7),DBLWD+5
         LH    WORK5,SINPR
         CVD   WORK5,DBLWD
         UNPK  MSGN+70(5),DBLWD
         OI    MSGN+74,X'F0'
         MH    WORK2,SINPR
         SR    R2,R2
         D     R2,=F'1000'
         BAL   LINK,ACCDMSTP
         CVD   WORK2,DBLWD
         ED    MSGN+102(10),DBLWD+4
         BAL   LINK,WRITE
NOSYSIN  EQU   *
*               BELEGUNGSPREISE AUSDRUCKEN
         L     DEVBAS,DEVBASSV
         LTR   DEVBAS,DEVBAS
         BZ    NOBEL
BELPRNXT EQU   *
         TM    DEVSWT,X'80'
         BNO   INCRDVBL
         CLC   DEVBELC,=H'0'
         BE    INCRDVBL
         MVC   MSGN,MSGN12
         LH    WORK2,DEVBELC
         CVD   WORK2,DBLWD
         UNPK  MSGN+63(2),DBLWD
         OI    MSGN+64,X'F0'
         M     WORK3,DEVBELPR     PREIS F. XX EINHEITEN IN PF. F. 1 STD
         M     WORK3,ERRLZ
         D     R2,=F'360000'
         BAL   LINK,ACCDMSTP
         CVD   WORK2,DBLWD
         ED    MSGN+102(10),DBLWD+4
         MVC   MSGN+66(15),DEVTEXT
         L     WORK4,DEVBELPR
         CVD   WORK4,DBLWD
         ED    MSGN+85(7),DBLWD+5
         BAL   LINK,WRITE
INCRDVBL EQU   *
         LA    DEVBAS,40(DEVBAS)
         CLC   DEVCHNC(40),=XL40'00'
         BNE   BELPRNXT
NOBEL    EQU   *
         BAL   LINK,CLEARMSG
         MVI   MSGN+98,C'-'
         MVC   MSGN+99(13),MSGN+98
         BAL   LINK,WRITE
         MVC   MSGN,MSGN13
         L     WORK2,DMSTEP
         CVD   WORK2,DBLWD
         LR    WORK7,WORK2
         ED    MSGN+102(10),DBLWD+4
         BAL   LINK,WRITE
         L     R1,ORGR1SVA
         L     R1,0(R1)
         TM    29(R1),X'01'
         BNO   NOTSO3
         MVC   MSGN+56(6),=C' SESS.'
         LA    R0,70
         LA    R1,MSG+45
         SVC   93
NOTSO3   EQU   *
         L     WORK7,COMEXTAB
         TM    30(WORK7),X'E8'
         BNZ   NOACC2
         L     WORK7,COMUEDAT
         A     WORK2,DMSUMME
         ST    WORK2,DMSUMME
NOACC2   EQU   *
         BAL   LINK,CLEARMSG
         MVI   MSGN+98,C'='
         MVC   MSGN+99(13),MSGN+98
         BAL   LINK,WRITE
         MVI   MSG,C'*'
         MVC   MSG+1(117),MSG
         BAL   LINK,WRITE
         L     R15,RECADDR
         LH    R14,102(R15)
         BCTR  R14,0
         BCTR  R14,0
         SRL   R14,3
         LTR   R14,R14
         BZ    DELPREIS
         L     DEVBAS,DEVBASSV
NXTXC    EQU   *
         XC    0(10,DEVBAS),0(DEVBAS)
         LA    DEVBAS,40(DEVBAS)
         CLC   DEVCHNC(40),=XL40'00'
         BNE   NXTXC
         DELETE EPLOC=DEVLOC
DELPREIS EQU   *
         DELETE EPLOC=PREISLOC
         L     R15,RECADDR
         LH    R14,102(R15)
         BCTR  R14,0
         BCTR  R14,0
         SRL   R14,3
         LTR   R14,R14
         BNP   RETURN
         LA    R15,104(R15)
RESETMS  EQU   *
         CLC   0(2,R15),=C'MS'
         BNE   INCRMS
         MVC   0(2,R15),=X'2009'
INCRMS   EQU   *
         LA    R15,8(R15)
         BCT   R14,RESETMS
RETURN   EQU   *
XRET     EQU   *
         L     R15,RETCODE
         XRETURN (R15),R
JOBEND   EQU   *
         MVI   MSG,C'*'
         MVC   MSG+1(117),MSG
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         MVC   MSGN,MSGN15
         L     WORK4,COMEXTAB
         MVC   MSGN+4(8),0(WORK4)
         LA    WORK2,12(WORK4)
         LA    WORK3,MSGN+25
         BAL   LINK,GETDAT
         MVC   MSGN+77(4),16(WORK4)
         L     R15,16
         SH    R15,=H'6'
         UNPK  MSGN+57(4),0(3,R15)
         MVI   MSGN+60,C' '
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         BAL   LINK,WRITE
         MVC   MSGN,MSGN16
         L     WORK5,RECADDR
         LA    WORK2,39(WORK5)
         LA    WORK3,MSGN+19
         BAL   LINK,GETZEIT
         MVC   MSGN+53(1),71(WORK5)
         BAL   LINK,WRITE
         MVC   MSGN,MSGN17
         LA    WORK2,2(WORK5)
         LA    WORK3,MSGN+19
         BAL   LINK,GETZEIT
         SR    R15,R15
         IC    R15,38(WORK5)
         CVD   R15,DBLWD
         UNPK  MSGN+52(2),DBLWD
         OI    MSGN+53,X'F0'
         BAL   LINK,WRITE
         MVC   MSGN,MSGN18
         MVC   DBLWD,2(WORK5)
         L     WORK2,DBLWD
         MVC   DBLWD,39(WORK5)
         L     WORK3,DBLWD
         CR    WORK3,WORK2
         BNH   *+8
         A     WORK2,=F'8640000'
         SR    WORK2,WORK3
         LA    WORK3,MSGN+16
         BAL   LINK,EDZTSTD
         LA    WORK2,22(WORK5)
         LA    WORK3,MSGN+44
         BAL   LINK,GETZEIT
         MVC   DBLWD,39(WORK5)
         L     WORK3,DBLWD
         MVC   DBLWD,54(WORK5)
         L     WORK2,DBLWD
         CR    WORK3,WORK2
         BH    *+8
         A     WORK3,=F'8640000'
         SR    WORK3,WORK2
         LR    WORK2,WORK3
         LA    WORK3,MSGN+86
         BAL   LINK,EDZTSTD
         BAL   LINK,WRITE
         MVC   MSGN,MSGN19
         MVC   DBLWD,113(WORK5)
         L     WORK2,DBLWD
         SRL   WORK2,8
         L     R1,ORGR1SVA
         L     R1,0(R1)
         TM    29(R1),X'01'
         BNO   NOTSO5
         L     R1,RECADDR
         MH    WORK2,=H'15'
         SR    WORK3,WORK3
         D     WORK3,=F'10'
         STCM  WORK2,7,113(R1)
NOTSO5   EQU   *
         LA    WORK3,MSGN+16
         BAL   LINK,EDZTSTD
         LA    WORK2,54(WORK5)
         LA    WORK3,MSGN+44
         BAL   LINK,GETZEIT
         LA    WORK2,117(WORK5)
         LA    WORK3,MSGN+67
         BAL   LINK,GETACC
         SR    R15,R15
         IC    R15,53(WORK5)
         CVD   R15,DBLWD
         UNPK  MSGN+97(2),DBLWD
         OI    MSGN+98,X'F0'
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         BAL   LINK,WRITE
         MVC   MSGN,MSGN20
         L     WORK2,COMEXTAB
         TM    30(WORK2),X'E8'
         BNZ   NOACC3
         L     CUEDBAS,COMUEDAT
         L     WORK2,DMSUMME
         CVD   WORK2,DBLWD
         ED    MSGN+28(12),DBLWD+3
         B     CHKREL
NOACC3   EQU   *
         MVC   MSGN+28(12),=CL12' '
CHKREL   EQU   *
         L     R15,16
         CLI   116(R15),X'13'
         BNE   TVS1
         MVC   MSGN+84(5),=CL5'  VS2'
         B     REL
TVS1     EQU   *
         CLI   116(R15),X'22'
         BNE   SYSUKNO
         MVC   MSGN+84(5),=CL5'  VS1'
         B     REL
SYSUKNO  EQU   *
         MVC   MSGN+84(5),=CL5'*****'
REL      EQU   *
         LA    R14,4
         SR    R15,R14
         MVC   MSGN+95(2),0(R15)
         MVI   MSGN+97,C'.'
         MVC   MSGN+98(1),2(R15)
         BAL   LINK,WRITE
         BAL   LINK,CLEARMSG
         MVI   MSGN+26,C'='
         MVC   MSGN+27(13),MSGN+26
         BAL   LINK,WRITE
         MVI   MSG,C'*'
         MVC   MSG+1(117),MSG
         BAL   LINK,WRITE
         MVI   MSG,X'40'
         MVC   MSG+1(117),MSG
         BAL   LINK,WRITE
         BAL   LINK,WRITE
         BAL   LINK,WRITE
         BAL   LINK,WRITE
         BAL   LINK,WRITE
         BAL   LINK,WRITE
         BAL   LINK,WRITE
         L     R1,COMEXTAB
         TM    30(R1),X'E8'
         BNZ   NOACC4
         L     R1,COMUEDAT
         FREEMAIN R,LV=16,A=(1),SP=255
NOACC4   EQU   *
         L     R15,COMEXTAB
         XC    32(4,R15),32(R15)
         B     RETURN
ACCDMSTP EQU   *
         L     R0,DMSTEP
         AR    R0,WORK2
         ST    R0,DMSTEP
         BR    LINK
WRITE    EQU   *
         LR    R0,R14
         L     R15,=V(IEFYS)
         L     R12,LCTRSVA
         LA    R13,SVA1
         BALR  R14,R15
         SH    R13,=H'72'
         LR    R14,R0
         BR    R14
EDPREIS  EQU   *    WORK2 = DM IN PFENNIGEN
*                   WORK3 = OUTPUT-LOCATION
         CVD   WORK2,DBLWD
         MVO   DBLWD,DBLWD(7)
         ED    0(8,WORK3),DBLWD+5
         MVI   8(WORK3),C'0'
         BR    LINK
GETDAT   EQU   *     WORK2= A(DATUM(PACKED)) WORK3 = A(OUTPUT)
         UNPK  10(3,WORK3),1(2,WORK2)
         MVI   12(WORK3),X'40'
         XC    DBLWD,DBLWD
         LH    R1,0(WORK2)
         SLL   R1,4
         ST    R1,DBLWD+4
         OI    DBLWD+7,X'0C'
         CVB   R1,DBLWD
         SR    R0,R0
         D     R0,=F'4'
         LTR   R0,R0
         BNZ   NOSCHALT
         MVC   MONATE+2(2),=H'29'
NOSCHALT EQU   *
         XC    DBLWD,DBLWD
         MVC   DBLWD+6(2),2(WORK2)
         CVB   WORK0,DBLWD
         ST    WORK0,DBLWD+4
         LA    WORK12,MONATE
         SR    WORK0,WORK0
         SR    R15,R15
NEXTMON  EQU   *
         AH    WORK0,0(R15,WORK12)
         C     WORK0,DBLWD+4
         BL    INCRMON
         SH    WORK0,0(R15,WORK12)
         SRL   R15,1
         LA    R15,1(R15)              R15 = MONAT
         L     WORK12,DBLWD+4
         SR    WORK12,WORK0            WORK12 = TAG
         CVD   WORK12,DBLWD
         UNPK  0(2,WORK3),DBLWD
         OI    1(WORK3),X'F0'
         CVD   R15,DBLWD
         UNPK  4(2,WORK3),DBLWD
         OI    5(WORK3),X'F0'
         BR    LINK
INCRMON  EQU   *
         LA    R15,2(R15)
         B     NEXTMON
CLEARMSG EQU   *
         MVI   MSG+1,X'40'
         MVC   MSG+2(115),MSG+1
         BR    LINK
GETZEIT  EQU   *  WORK2 = A(ZEIT), WORK3= A(OUTPUT-LOC.)
         MVC   DBLWD,0(WORK2)
         SR    R0,R0
         L     R1,DBLWD
         D     R0,=F'100'         ZEIT IN SEC.
CONT     EQU   *
         SR    R0,R0
         D     R0,=F'60'
         CVD   R0,DBLWD
        UNPK  8(2,WORK3),DBLWD
         OI    9(WORK3),X'F0'
         SR    R0,R0
         D     R0,=F'60'          SEKUNDEN
         CVD   R0,DBLWD
         UNPK  5(2,WORK3),DBLWD
        OI    6(WORK3),X'F0'
         CVD   R1,DBLWD
         UNPK  2(2,WORK3),DBLWD
         OI    3(WORK3),X'F0'
         BR    LINK
EDZTSTD  EQU   *
         LR    R1,WORK2
         SR    R0,R0
         D     R0,=F'100'
         CVD   R0,DBLWD
         UNPK  11(2,WORK3),DBLWD
         OI    12(WORK3),X'F0'
         B     CONT
GETACC   EQU   *
         SR    R15,R15
         CLI   0(WORK2),X'04'
         BH    L4
         IC    R15,0(WORK2)
         B     ARBOK
MVCEX01  MVC   0(0,WORK3),1(WORK2)
L4       EQU   *
         LA    R15,4
ARBOK    EQU   *
         BCTR  R15,0
         EX    R15,MVCEX01
         LA    WORK2,2(R15,WORK2)
         CLI   0(WORK2),X'00'
         BE    KZNA
         SR    R1,R1
         IC    R1,0(WORK2)
         LA    WORK2,1(R1,WORK2)
         CLI   0(WORK2),X'00'
         BE    KZNA
         MVC   15(1,WORK3),1(WORK2)
         BR    LINK
KZNA     EQU   *
         MVC   14(2,WORK3),=CL2'NA'
         BR    LINK
         REG
LINK     EQU   14
LCTREG   EQU   12
BASE     EQU   11
PREISBAS EQU   10
DEVBAS   EQU   9
MSGNBAS  EQU   8
CUEDBAS  EQU   7
WORK0    EQU   0
WORK2    EQU   3
WORK3    EQU   2
WORK4    EQU   4
WORK5    EQU   5
WORK7    EQU   7
WORK9    EQU   9
WORK12   EQU   12
CCTAB    DC    C'0123456789ABCDEF'
         LTORG
MONATE   DS    0H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DEVTAB
         PREISTAB
CUED     DSECT
DMSUMME  DS    F        SUMME ALLER PREISE
MSGNAGES DSECT
MSGN1    DS    CL113
MSGN2    DS    CL113
MSGN3    DS    CL113
MSGN4    DS    CL113
MSGN5    DS    CL113
MSGN6    DS    CL113
MSGN7    DS    CL113
MSGN8    DS    CL113
MSGN9    DS    CL113
MSGN10   DS    CL113
MSGN12   DS    CL113
MSGN13   DS    CL113
MSGN15   DS    CL113
MSGN16   DS    CL113
MSGN17   DS    CL113
MSGN18   DS    CL113
MSGN19   DS    CL113
MSGN20   DS    CL113
WORK     DSECT
SVA      DS    18F
SVA1     DS    45F
CLEARANF EQU   *
RETCODE  DS    F
DBLWD    DS    D
ZGSU     DS    F             SUMME DER E/A-OP.
ERRLZ    DS    F            ERRECHNETE LAUFZEIT IN 1/100 SEC.
EAPRSU   DS    F            SUMME DER PREISE FUER E/A-OP.
MSG      DS    CL132
         ORG   MSG+3
MSGN     DS    CL113
         ORG
SWITCH   DS    X
MSSMNTIM DS    F
DEVBASSV DS    F            SVA FUER BASISREG. V. DSECT DEVICES
PRBASSVA DS    F            SVA FUER BASISREG. V. DSECT PREISTAB
LCTRSVA  DS    F            SVA FUER A(LCT)
ORGR1SVA DS    F            SVA FUER URSPRUENGL. REG. 1
MSGBASSV DS    F            SVA FUER BASISREG. V. DSECT MSGNAGES
COMEXTAB DS    F            A(COMMON-EXIT-TABLE)
COMUEDAT DS    F            A(COMMON-USER-EXIT-DATA)
RECADDR  DS    F            ADDR. DES TYP 5 BZW. TYP 4 SMF-RECORDS
DMSTEP   DS    F
PREISLOC DS    CL8
DEVLOC   DS    CL8
CLEARLEN EQU   *-CLEARANF
WORKL    EQU   *-WORK
         DROP
ACTRTMSG CSECT
MESS1    DC    CL113'À½. STEP DES JOBS, GELAUFEN AM XX. XX. 19XX AUF DE*
               R ANLAGE 370/000 BASF-SYSTEM-NR. XX.     CC = S  000'
MESS2    DC    CL113'JOB   12345678   UHRZEIT-ANFANG = À½:½½:½½        *
                CPU-ZEIT (DM ½ ½À½.½½/STD)      =  XX.XX.XX,XX = DM ½½ *
               ½À½.½½'
MESS3    DC    CL113'STEP  12345678   UHRZEIT-ENDE   = À½:½½:½½'
MESS4    DC    CL113'PROGR 12345678   LAUFZEIT  =   XX.XX.XX,XX'
MESS5    DC    CL113'DPRTY = ½À       ARB-NR =          KZ =  X        *
                ERR. LAUFZEIT (DM ½ ½À½.½½/STD) =  XX.XX.XX,XX = DM ½½ *
               ½À½.½½'
MESS6    DC    CL113'------------------------------------  E / A   EINH*
               EITEN  ------------------------------------'
MESS7    DC    CL113'PREISE IN DM FUER JE EINE E/A-OPERATION:'
MESS8    DC    CL113'TYPE ADR E/A-OP.     DM          TYPE ADR E/A-OP. *
                   DM          TYPE ADR E/A-OP.     DM'
MESS9    DS    0CL113
         DC    CL42' '
         DC    CL71'PREIS FUER INSGESAMT ½ ½½½ ½À½ E/A-OPERATION(EN)   *
                    = DM ½½ ½À½.½½'
MESS10   DS    0CL113
         DC    CL41' '
         DC    CL72'½½ ½À½ SYSIN-KARTE(N) A DM 0.À½½½½                 *
                     = DM ½½ ½À½.½½'
MESS12   DS    0CL113
         DC    CL42' '
         DC    CL71'BELEGUNGSKOSTEN FUER XX                 (DM ½À½.½½/*
               STD) = DM ½½ ½À½.½½'
MESS13   DS    0CL113
         DC    CL42' '
         DC    CL71'PREIS F. DIESEN STEP (OHNE SYSOUT U. DYNAMIC DD)   *
                    = DM ½½ ½À½.½½'
MESS15   DC    CL113'JOB 12345678 GELAUFEN AM XX. XX. 19XX AUF DER ANLA*
               GE 370/000 BASF-SYSTEM-NR. XX.'
MESS16   DC    CL113'JOB-START-ZEIT =     À½:½½:½½   JOB-KLASSE        *
               =  X'
MESS17   DC    CL113'JOB-ENDE -ZEIT =     À½:½½:½½   ANZAHL DER STEPS  *
               = ½À'
MESS18   DC    CL113'JOB-LAUFZEIT   =  XX.XX.XX,XX   SYSIN-START = À½:½*
               ½:½½    QUEUE-VERWEILZEIT =           XX.XX.XX,XX'
MESS19   DC    CL113'JOB-CPU-ZEIT   =  XX.XX.XX,XX   SYSIN-ENDE  = À½:½*
               ½:½½    ARB-NR =          KZ =  X       PRTY = XX'
MESS20   DC    CL113'FUER DIESEN JOB WERDEN    DM ½½½½ ½À½.½½    VERREC*
               HNET. (OHNE SYSOUT)   OS-VERSION: 12345/REL. 1234'
         END
./ ADD  NAME=IEFUJI
IEFUJI   CSECT
         XSAVE R12,,IEFUJI
         REG
         SR    R6,R6
         L     R4,0(R1)
         CLI   7(R4),C'$'
         BNE   RETURN
         LR    R3,R0
         LA    R0,24
         L     R1,4(R13)
         ST    R0,20(R1)   STORE SPDJC02 ENTRY TYPE
         L     R1,4(R13)
         LM    R0,R1,20(R1)
         LINK  EP=SPDJC02
         L     R1,4(R13)
         LM    R0,R1,20(R1)
         LR    R6,R15
         L     R1,4(R13)
         ST    R3,20(R1)    RESTORE R0
RETURN   XRETURN (R6),R
         END
./ ADD  NAME=IEFUJP
         TITLE 'S P U J P 0 1 T : PURGE-EXIT'
***********************************************************************
*                                                                     *
*                                                                     *
*              P R O L O G :                                          *
*                                                                     *
*                                                                     *
***********************************************************************
*              PGM-NAME         : S P U J P 0 1 T (IEFUJP)            *
*                                                                     *
*              PROGRAMMIERER    : KERCZYNSKI                          *
*                                                                     *
*              ERSTELLUNGSDATUM : DEZEMBER 1977                       *
***********************************************************************
*                                                                     *
*              PGM-FUNKTION :   UEBERGIBT INFORMATIONEN AN            *
*                               CSECT SPDJC02(DEPENDEND-JOB-CONTROL)  *
*                                                                     *
***********************************************************************
*                                                                     *
*              REGISTER-BENUTZUNG : R0  = FUNKTIONS-CODE FUER SPDJC02T*
*                                   R1  = UEBERGABE ADRESSE           *
*                                         PARAMETER-LISTE             *
*                                   R2  = /                           *
*                                   R3  = /                           *
*                                   R4  = /                           *
*                                   R5  = /                           *
*                                   R6  = /                           *
*                                   R7  = /                           *
*                                   R8  = /                           *
*                                   R9  = /                           *
*                                   R10 = /                           *
*                                   R11 = /                           *
*                                   R12 = BASIS                       *
*                                   R13 = SAVE                        *
*                                   R14 = RETURN                      *
*                                   R15 = BRANCH / RETURN-CODE        *
*                                                                     *
***********************************************************************
         EJECT
IEFUJP   CSECT
         XSAVE R12,,IEFUJP.&SYSDATE_&SYSTIME,WORKLEN
         USING WORK,R13
         L     R4,0(R1)
         CLI   7(R4),C'$'
         BNE   RETURN
         SPACE 2
         LR    R3,R0                   SAVE REGISTER 0
         MODESET KEY=ZERO
         LA    R0,20                   SET ENTRY CODE
         L     R1,4(R13)               HSA
         ST    R0,20(R1)               PUT ENTRY CODE INTO HSA
         L     R1,4(R13)
         LM    R0,R1,20(R1)
         LINK  EP=SPDJC02
         L     R1,4(R13)
         LM    R0,R1,20(R1)
         L     R1,4(R13)               HSA
         ST    R3,20(R1)               RESTORE REGISTER 0 INTO HSA
         MODESET KEY=NZERO
         SPACE 2
RETURN   SR    R15,R15                 RETURN-CODE = 0
         XRETURN (R15),R
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
*        D E F I N I T I O N E N                                      *
*                                                                     *
*                                                                     *
***********************************************************************
WORK     DSECT
WSAVE    DS    18F                     * SAVE AREA
WORKLEN  EQU   *-WORK                  * L'WORK-AREA
         SPACE 2
         REG
         END
./ ADD  NAME=IEFUJV
SMF1     TITLE '                       S M F :   EXIT-ROUTINE IEFUJV  '
IEFUJV   START 0
         ISEQ  73,80
         SPACE 4
***********************************************************************
*                                                                     *
*  PROGRAMM-NAME: IEFUJV.                                             *
*  AUTOR: G. FUCHS.                                                   *
*  SCHREIBDATUM: MAERZ 1975.                                          *
*  INSTALLATION: BAYER AG, LEVERKUSEN-BAYERWERK, RECHENZENTRUM.       *
*                                                                     *
*  BEMERKUNGEN:                                                       *
*                                                                     *
*      DIE ROUTINE IEFUJV WIRD BEIM EINLESEN DES JOB-STROMS VOM       *
*      CONVERTER/INTERPRETER AUFGERUFEN.                              *
*                                                                     *
*      EINZELHEITEN UEBER DIE SMF-EXIT-ROUTINE IEFUJV SIND DER        *
*      DRUCKSCHRIFT DER IBM                                           *
*          OS/VS SYSTEM MANAGEMENT FACILITIES (SMF)                   *
*          FORM GC35-0004-5                                           *
*      ZU ENTNEHMEN.                                                  *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  REGISTER-ZUORDNUNG                                                 *
*                                                                     *
***********************************************************************
*                                                                     *
R0       EQU   0   ARBEITS-REGISTER
R1       EQU   1   REGISTER FUER JCL CARD SCAN
R2       EQU   2   ARBEITS-REGISTER : WIRD BEI 'TRT' BENUTZT
R3       EQU   3   ADRESSE DER DSECT COMPARMA
R4       EQU   4   ADRESSE DER VORGELEGTEN JCL-KARTE
R5       EQU   5   0 = 'JOB', 4 = 'EXEC', 8 = 'DD', 12 = 'PROC'
R6       EQU   6   ARBEITS-REGISTER (MEIST: 1. STELLE EINES BEGRIFFS)
R7       EQU   7   ARBEITS-REGISTER (MEIST: LAENGE EINES BEGRIFFS)
R8       EQU   8   ARBEITS-REGISTER
R9       EQU   9   ARBEITS-REGISTER
R10      EQU   10
BASE1    EQU   10  1. BASISREGISTER
R11      EQU   11
BASE2    EQU   11  2. BASISREGISTER
R12      EQU   12  ARBEITS-REGISTER (MEISTENS BAL-REGISTER)
BASE3    EQU   12  3. BASISREGISTER
R13      EQU   13  ADRESSE SAVEAREA UND ARBEITSBEREICH
R14      EQU   14  ARBEITS- UND LINK-REGISTER
R15      EQU   15  ARBEITS- UND LINK-REGISTER
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  EINGANG DER ROUTINE                                                *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,IEFUJV.&SYSDATE  REGISTER-INHALTE SICHERN
         LA    BASE1,0(,R15)       LADEN 1. BASISREGISTER
         USING IEFUJV,BASE1,BASE2  IEFUJV WIRD ADRESSIERBAR
         LR    BASE2,BASE1         LADEN
         AH    BASE2,KON4096         2. BASISREGISTER
         LM    R3,R5,0(R1)         LADEN ADRESSEN-LISTE
         USING COMPARMA,R3         DSECT COMPARMA WIRD ADRESSIERBAR
         USING JCLKARTE,R4         DSECT JCLKARTE WIRD ADRESSIERBAR
         USING ARBBER,R13          DSECT ARBBER WIRD ADRESSIERBAR
*
         CLC   CJOBNAME,JOBNOUJV   JOBNAME = "NO IEFUJV JCL VALIDATION"
         BE    AUSGANG1            JA - AUSGANG
         L     R2,CADRSBPL         ADRESSE DSECT ARBBER LADEN
         CLI   0(R5),X'20'
         BE    AUSGANG1
         CLI   0(R5),X'01'   JOB STMNT?
         BNE   AREAGOT
         CLC   72(4,R4),=CL4'JOB '
         BE    GETSTOR
         CLC   72(4,R4),=CL4'TSU '
         BE    GETSTOR
         CLC   72(4,R4),=CL4'STC '
         BNE   AREAGOT
GETSTOR  EQU   *
         CLI   CADRSBPL,X'FF'
         BE    AREAGOT
         GETMAIN R,LV=LGARBBER,SP=241
         ST    R1,CADRSBPL
         MVI   CADRSBPL,X'FF'
         ST    R13,4(R1)
         LR    R13,R1
         B     MODEST
AREAGOT  EQU   *
         ST    R13,4(R2)
         L     R13,CADRSBPL
MODEST   EQU   *
         CLI   CJOBNAME+7,C'$'
         BNE   DJCOK
         MODESET KEY=ZERO
         LOAD  EP=SPDJC01
         LR    R15,R0
         L     R1,4(R13)
         LM    R0,R1,20(R1)
         LA    R2,SPTYPRUN
         BALR  R14,R15
         LR    R9,R15
         DELETE EP=SPDJC01
         MODESET KEY=NZERO
         L     R1,4(R13)
         LM    R0,R1,20(R1)
         LTR   R9,R9
         BZ    DJCOK
         OI    CINDEX+1,X'01'
DJCOK    EQU   *
         XC    SAVEADDR,SAVEADDR
*
         TM    0(R5),B'00010000'   JOB ENQ ENTRY?
         BO    ENQENTRY            BR FALLS JA
         LA    R0,15               R0 = X'0000000F'
         IC    R5,0(,R5)           UMWANDELN JCL STATEMENT TYPE:
         NR    R5,R0                   JOB  -> R5 = 00
         IC    R5,JCLTYPET(R5)         EXEC -> R5 = 04
         B     SUCHSTMT            VERZWEIGEN ZUM SCAN-START
*                                                                     *
KON4096  DC    H'4096'
JOBNOUJV DC    C'SYS1NOJV'         JOBNAME, BEI DEM IEFUJV NICHT GILT
***********************************************************************
         SPACE 4
***********************************************************************
*                                                                     *
*  AUSGANG DER ROUTINE                                                *
*                                                                     *
***********************************************************************
AUSGANG  EQU   *
         L     R13,SAVER13
AUSGANG1 RETURN (14,12),RC=0       RUECKSPRUNG MIT RC=0
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  FESTSTELLEN, OB EINE FOLGEKARTE VORLIEGT; BESTIMMEN DER            *
*      ADRESSE DES ERSTEN OPERANDEN                                   *
*                                                                     *
***********************************************************************
SUCHSTMT EQU   *
         LA    R1,SP3
         LA    R0,69
SUCHST1  CLI   0(R1),C' '
         BE    SUCHST1E
         LA    R1,1(,R1)
         BCT   R0,SUCHST1
         B     AUSGANG
SUCHST1E BCTR  R0,0
         LA    R9,68               LAENGE
         SR    R9,R0                 BESTIMMEN
SUCHST2  CLI   1(R1),C' '
         BNE   SUCHST2E
         LA    R1,1(,R1)
         BCT   R0,SUCHST2
         B     AUSGANG
SUCHST2E BCTR  R0,0
SUCHST3  LR    R6,R5
         SLA   R6,2
         LA    R6,KSTMT(R6)
         SR    R7,R7
         IC    R7,0(,R6)
         EX    R7,VERGLCHS
         BE    SUCHST4
         L     R14,12(,R6)
         BR    R14
*                                                                     *
SUCHST4  EQU   *
         L     R14,8(,R6)
         LA    R1,1(R7,R1)
         SR    R0,R7
SUCHST5  CLI   1(R1),C' '
         BNER  R14
         LA    R1,1(,R1)
         BCT   R0,SUCHST5
*                                                                     *
VERGLCHS CLC   1(0,R1),1(R6)
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  ES LIEGT EINE 'JOB'-KARTE VOR                                      *
*                                                                     *
***********************************************************************
JOBSTMT  EQU   *                   JOB-KARTE
         LR    R8,R1               R1 ZW-SPEICHERN
         XC    TRTPARAM,TRTPARAM   TRT-PARAMETER LOESCHEN
         XC    CINDEX,CINDEX       FEHLER-INDICES LOESCHEN
         XC    SUCHTAB,SUCHTAB     TRT-TABELLE LOESCHEN
         XC    ANZSERNR(4),ANZSERNR  BAND-NUMMERN ANGABEN LOESCHEN
         L     R0,W1DDCARD         MAXIMALE LAENGE DD-ANGABEN
         ST    R0,SPDDCARD           SPEICHERN
         L     R0,W1SYPARM         MAXIMALE LAENGE SYMB. PARAMETER
         ST    R0,SPSYPARM           SPEICHERN
         MVI   JOBCAT,C' '         JOBCAT-DSNAMEN LOESCHEN
         MVI   SPOOLSW,0           SPOOL-SW AUS
         MVI   SPTYPRUN,C' '       DEFAULT TYPRUN-ANGABE
         MVI   SPMSGCLS,C'A'       DEFAULT MSGCLASS-ANGABE
         MVI   EXECSW,C'S'         SETZEN EXEC-SW
         MVI   SYSPRNR,C'N'        SETZEN SYSPRNR-SW
         MVI   TIMESW,C'N'         SETZEN TIMESW
         MVC   LEERB,LEERZEIL
         MVI   SPCLASS,C'A'   SET DEFAULT CLASS
         MVC   RJEPWD,SP1+63
         MVC   MSG1B,MSG1
         MVC   MSG2B,MSG2
         MVC   MSG3B,MSG3
         MVC   MSG4B,MSG4
         MVC   MSG1B+22(8),CJOBNAME
         MVC   MSG2B+16(8),CJOBNAME
         MVC   MSG3B+25(8),CJOBNAME
         MVC   MSG4B+31(8),CJOBNAME
         GETMAIN R,LV=5006
         ST    R1,MSGADR
         XC    4(2,R1),4(R1)
         LA    R14,6(R1)
         ST    R14,0(R1)
         MVI   MSGSW,C'N'
*  VERRECHNUNGS-INFORMATION SUCHEN UND PRUEFEN                        *
         LR    R1,R8               INHALT R1 RUECKSPEICHERN
         MVI   LBYTE,05            LAENGE BIS EINSCHL. '='
         MVC   OPERAND(5),=C'ACCT='  TEXT EINFUEGEN (POS PARM ACCT)
         MVI   ANZGLZ+1,01         ANZAHL '=' = 1
         MVI   LOPERAND+1,05       LAENGE
         MVI   LASTCHAR+1,C'='     LETZTES UNTERBRECHUNGS-BYTE
         B     WEITERJ
*                                                                     *
CJOBSTMT EQU   *
         LA    R6,SP16
         CR    R1,R6
         BNL   AUSGANG
*                                                                     *
WEITERJ  EQU   *
         BAL   R14,SUCHOPD
         BAL   R14,SUCHPARM
         DC    AL2(JOBSTMTA-STATEMTS)
*                                                                     *
AUSGANGJ XC    TRTPARAM,TRTPARAM
         CLI   0(R1),C' '
         BE    AUSGANG             ZURUECK
         LA    R8,SP71
         CR    R1,R8
         BNL   AUSGANG
         B     WEITERJ
***********************************************************************
         SPACE 4
***********************************************************************
*                                                                     *
*  SPEICHERN 'TYPRUN'-ANGABE                                          *
*                                                                     *
***********************************************************************
PRFTYPR  EQU   *
         MVC   SPTYPRUN,0(R6)  TYPRUN-ANGABE - H(OLD) × S(CAN) × C(OPY)
         BR    R12
***********************************************************************
         SPACE 3
PRFADDR  EQU   *
         OI    CINDEX+1,X'01'
         MVC   SP73#80,=CL8'*ADDRSP*'
         BR    R12
         SPACE 3
PRFPERF  EQU   *
         CLI   CJOBNAME,C'X'
         BER   R12
         OI    CINDEX+1,X'02'
         MVC   SP73#80,=CL8'*PERFRM*'
         BR    R12
         SPACE 3
PRFPRTY  EQU   *
         CLI   CJOBNAME,C'X'
         BER   R12
         OI    CINDEX+1,X'04'
         MVC   SP73#80,=CL8'*DPRTY**'
         BR    R12
         SPACE 3
PRFACCT  EQU   *
         TM    CSMFOPTS,FOREGRND
         BOR   R12
         CLC   LOPERAND,=H'17'
         BL    ACCTERR
         CLC   ANZU1P,=H'3'
         BL    ACCTERR
         CLI   U1PARM+2,X'04'
         BNE   ACCTERR
         CLI   U1PARM+6,X'03'
         BNE   ACCTERR
         CLI   U1PARM+10,X'02'
         BH    ACCTERR
         LA    R9,OPERAND
         SR    R7,R7
         IC    R7,U1PARM+3
         LA    R6,0(R7,R9)
         IC    R7,U1PARM+2
         BAL   R14,PRUEFNUM
         LTR   R15,R15
         BNZ   ACCTERR
         IC    R7,U1PARM+7
         LA    R6,0(R7,R9)
         MVC   MSG2B+51(3),0(R6)
         IC    R7,U1PARM+11
         LA    R6,0(R7,R9)
         CLI   0(R6),C'3'
         BE    ACCTERR
         IC    R7,U1PARM+10
         BAL   R14,PRUEFNUM
         LTR   R15,R15
         BZR   R12
ACCTERR  EQU   *
         OI    CINDEX+1,X'08'
         MVC   SP73#80,=CL8'**ACCT**'
         BR    R12
         SPACE 3
PRFCLASS EQU   *
         MVC   SPCLASS,0(R6)
         CLI   SPCLASS,C'U'
         BER   R12
         MVC   MSG2B+57(11),=CL11' '
         CLI   SPCLASS,C'2'
         BE    TSTRJE
         CLI   SPCLASS,C'3'
         BNER  R12
TSTRJE   EQU   *
         CLC   CJOBNAME+6(2),=CL2'BP'
         BER   R12
         CLC   CJOBNAME+2(3),=CL3'RTP'
         BER   R12
         CLC   RJEPWD,=CL8'RJE-JOB'
         BER   R12
CLSERR1  OI    CINDEX+1,X'08'
         MVC   SP73#80,=CL8'*CLASS**'
         BR    R12
         SPACE 3
PRFTIME  EQU   *
         CLI   CJOBNAME,C'X'
         BER   R12
         CH    R7,=H'4'
         BNER  R12
         CLC   0(4,R6),=CL4'1440'
         BNER  R12
         OI    CINDEX+1,X'08'
         MVC   SP73#80,=CL8'**TIME**'
         BR    R12
PRFTIMEJ EQU   *
         MVI   TIMESW,C'Y'
         CLI   CJOBNAME,C'X'
         BER   R12
         CH    R7,=H'4'
         BNER  R12
         CLC   0(4,R6),=CL4'1440'
         BNER  R12
         OI    CINDEX+1,X'08'
         MVC   SP73#80,=CL8'**TIME**'
         BR    R12
         EJECT
***********************************************************************
*                                                                     *
*  ES LIEGT EINE 'EXEC'-KARTE VOR                                     *
*                                                                     *
***********************************************************************
EXCSTMT  EQU   *                   EXEC-KARTE
         CLI   SPCLASS,C'R'
         BNE   NOR
         CLI   TIMESW,C'Y'
         BNE   NOR
         OI    CINDEX+1,X'08'
         MVC   SP73#80,=CL8'*CLASS**'
NOR      EQU   *
         XC    TRTPARAM,TRTPARAM   TRT-PARAMETER LOESCHEN
         LA    R0,8                MAX LAENGE EINES NAMEN
         CR    R9,R0               VERGLEICHEN LAENGE MIT MAX
         BNH   *+6                 BR FALLS ^>
         SR    R9,R9               LAENGE = 0
         STC   R9,ALPSTPNM         LAENGE SPEICHERN
         MVC   ZWPARM+7(8),BLANKS  ZW-SPEICHER LOESCHEN
         LTR   R9,R9               LAENGE = 0?
         BZ    EXCNNAME            BR FALLS JA
         BCTR  R9,0                LAENGE - 1 FUER EX MVC
         EX    R9,EXCENAME         NAMEN UEBERTRAGEN
EXCNNAME BAL   R14,VERARBDD        DD-ANGABEN VERARBEITEN
         CLC   1(4,R1),=C'PGM='    'EXEC PGM=........' ANGEGEBEN?
         BNE   EXPROCST            NEIN - ALSO 'EXEC <PROC=>........'
         MVI   EXECSW,C'E'         EXEC-SW = 'E' (PROCEDURE-STEP)
         MVI   STEPCAT,C' '        STEPCAT-DSNAMEN LOESCHEN
         MVC   PSTPNAME,ZWPARM+7   UEBERTRAGEN PROCSTEPNAMEN
         CLC   SP1#2,=C'//'        SPALTEN 1-2 = '//'?
         BNE   WEITERE             BR FALLS NEIN
         MVC   LLSYPARM,VIER       SPEICHER SYMB.PARM LOESCHEN
         MVI   EXECSW,C'S'         EXEC-SW = 'S' (KEIN PROCEDURE-STEP)
         B     WEITERE             PRUEFUNG STARTEN
EXPROCST MVC   LLSYPARM,VIER       SPEICHER SYMB.PARM LOESCHEN
         MVC   STEPNAME,ZWPARM+7   UEBERTRAGEN STEPNAMEN
         MVI   EXECSW,C'P'         EXEC-SW = 'P' (EXEC PROC)
         B     WEITERE             PRUEFUNG STARTEN
*                                                                     *
EXCENAME MVC   ZWPARM+7(0),SP3     EX MARKE
*                                                                     *
CEXCSTMT EQU   *
         LA    R6,SP16
         CR    R1,R6
         BNL   AUSGANG
*                                                                     *
WEITERE  EQU   *
         BAL   R14,SUCHOPD
         LA    R2,SPSYPARM         ADRESSE SPEICHER SYMB.PARM LADEN
         CLI   EXECSW,C'P'         'EXEC PROC' STATEMENT?
         BNE   *+8                 NEIN -
         BAL   R14,MOVEPARM        JA - PARAMETER SPEICHERN
         BAL   R14,SUCHPARM
         DC    AL2(EXCSTMTA-STATEMTS)
*                                                                     *
AUSGANGE EQU   *
         XC    TRTPARAM,TRTPARAM
         CLI   0(R1),C' '
         BE    AUSGANG
         LA    R8,SP71
         CR    R1,R8
         BNL   AUSGANG
         B     WEITERE
***********************************************************************
         SPACE 3
PRFPGM   EQU   *
         CLI   SPCLASS,C'S'
         BNER  R12
         LA    R14,VALDPGM
         BCTR  R7,0
NXTPGM   EQU   *
         CLI   0(R14),X'FF'
         BE    CLSERR1
         EX    R7,CLCPGM
         BE    PGMEQ
         LA    R14,10(R14)
         B     NXTPGM
PGMEQ    EQU   *
         CH    R7,0(R14)
         BER   R12
         B     CLSERR1
CLCPGM   CLC   0(0,R6),2(R14)
         EJECT
***********************************************************************
*                                                                     *
*  ES LIEGT EINE 'DD'-KARTE VOR                                       *
*                                                                     *
***********************************************************************
DDSTMT   EQU   *
         XC    TRTPARAM,TRTPARAM   TRT-PARAMETER LOESCHEN
         MVI   DDWKSW,C'J'         SCHALTER DD VERARBEITEN ANSETZEN
         CLC   SP1,SP2             SP 1-2 = '//' × 'XX' × '++'?
         BNE   WEITERD             BR FALLS NEIN
         CLC   SP1(8),=C'//###MSG'
         NOP   MSGPROC  CHANGE TO BE IF '###MSG' IS TO BE SUPP.
DDCONT   EQU   *
         ST    R9,SAVERX+9*4       R9 ZW-SPEICHERN
         BAL   R14,VERARBDD        OFFENSTEHENDE DD-ANGABEN VERARBEITEN
         L     R9,SAVERX+9*4       R9 ZURUECKHOLEN
         MVI   VOLSW,C'N'          VOL-SW LOESCHEN
         MVI   DDCCSW,C'J'         CONCATENATION-SW EIN
         MVI   DISPSW,C' '
         MVI   DISKSW,C'N'
         MVI   GDGSW,X'00'
         LTR   R9,R9               LAENGE DES DD-NAMEN = 0?
         BZ    DDNONAME            BR FALLS JA
         MVI   DDCCSW,C'N'         CONCATENATION-SW AUS
         MVC   DDNAME,BLANKS       DD-NAME LOESCHEN
         ST    R1,SAVER1Z          R1 ZW-SPEICHERN
         LA    R6,SP3-1            ADRESSE - 1 FUER TRT-START
         SR    R2,R2               R2 LOESCHEN VOR TRT
         EX    R9,DDTRTNM          DELIMITER SUCHEN
         LA    R0,8                TRT-WERT FUER '.'
         CR    R2,R0               DELIMITER =
         BL    DDNOPSNM            BLANK (R2 = 4)
         BH    DDLOADR1            NICHT '.' - FEHLER
         SR    R1,R6               R1 = LAENGE BIS '.'
         SR    R9,R1               LAENGE DD-NAME KORRIGIEREN
         AR    R6,R1               ADRESSE KORRIGIEREN
DDNOPSNM CR    R9,R0               LAENGE > 8?
         BNH   *+6                 BR FALLS NEIN
         SR    R9,R9               LAENGE LOESCHEN
         LTR   R9,R9               LAENGE = 0?
         BZ    DDLOADR1            BR FALLS JA
         BCTR  R9,0                LAENGE - 1 FUER EX MVC
         EX    R9,DDMVCNM          DD-NAMEN UEBERTRAGEN
DDLOADR1 L     R1,SAVER1Z          R1 ZURUECKHOLEN
DDNONAME CLC   SP1#2,=C'//'        SP 1- 2 = '//'?
         BNE   WEITERD             BR FALLS NEIN
         CLI   EXECSW,C'E'         LIEGT EIN PROCEDURE-STEP VOR?
         BNE   WEITERD             BR FALLS NEIN
         MVI   DDWKSW,C'N'         SCHALTER DD VERARBEITEN AUS
         B     WEITERD
*
DDTRTNM  TRT   1(0,R6),ALPHATAB    EX-MARKE DD-NAME SCAN
DDMVCNM  MVC   DDNAME(0),1(R6)     EX-MARKE DD-NAMEN UEBERTRAGEN
*
*                                                                     *
CDDSTMT  EQU   *
         LA    R6,SP16
         CR    R1,R6
         BNL   AUSGANG
*                                                                     *
WEITERD  EQU   *
         BAL   R14,SUCHOPD
         LA    R2,SPDDCARD
         BAL   R14,MOVEPARM
         BAL   R14,SUCHPARM
         DC    AL2(DDSTMTA-STATEMTS)
*                                                                     *
AUSGANGD EQU   *
         XC    TRTPARAM,TRTPARAM
         CLI   0(R1),C' '
         BNE   MARKED
         CLI   DDWKSW,C'J'         SCHALTER DD VERARBEITEN EIN?
         BNE   AUSGANG             BR FALLS NEIN
         BAL   R14,VERARBDD        DD-ANGABEN VERARBEITEN
         B     AUSGANG             FERTIG
MARKED   LA    R8,SP71
         CR    R1,R8
         BNL   AUSGANG
         B     WEITERD
***********************************************************************
         SPACE 3
MSGPROC  EQU   *
         L     R14,MSGADR
         CLC   4(2,R14),=H'100'
         BNL   DDCONT
         LH    R15,4(R14)
         LA    R15,1(R15)
         STH   R15,4(R14)
         L     R15,0(R14)
         MVC   0(50,R15),SP1+20
         LA    R15,50(R15)
         ST    R15,0(R14)
         MVI   MSGSW,C'Y'
         B     DDCONT
         SPACE 3
PRFSOUT  EQU   *
         CLC   LOPERAND(2),=H'19'
         BNER  R12
         CLC   OPERAND+10(6),=CL6'MLTOUT'
         BNER  R12
         L     R7,SAVENOPD
         MVC   7(1,R7),8(R7)
         LH    R8,16(R7)
         STH   R8,17(R7)
         MVC   8(9,R7),=CL9',COPIES=0'
         BR    R12
         EJECT
***********************************************************************
*                                                                     *
*  ES LIEGT EINE 'PROC'-KARTE VOR                                     *
*                                                                     *
***********************************************************************
PRCSTMT  EQU   *
         XC    TRTPARAM,TRTPARAM
         B     WEITERP
*                                                                     *
CPRCSTMT EQU   *
         LA    R6,SP16
         CR    R1,R6
         BNL   AUSGANG
*                                                                     *
WEITERP  EQU   *
         BAL   R14,SUCHOPD
         LA    R2,SPSYPARM         R2 = ADRESSE SPEICHER SYMB.PARM
         BAL   R14,MOVEPARM
         NOP   0
         BCR   0,0
*                                                                     *
AUSGANGP EQU   *
         XC    TRTPARAM,TRTPARAM
         CLI   0(R1),C' '
         BE    AUSGANG
         LA    R8,SP71
         CR    R1,R8
         BNL   AUSGANG
         B     WEITERP
*                                                                     *
***********************************************************************
         SPACE 2
         EJECT
***********************************************************************
*                                                                     *
*  PRUEFEN 'VOLUME'-ANGABE AUF 'SER'-ANGABE                           *
*                                                                     *
***********************************************************************
PRFVOLM  EQU   *
         MVI   VOLSW,C'J'          VOL-SW EIN
         SR    R7,R7               LOESCHEN FUER IC
         SR    R9,R9               LOESCHEN
SUCHSER  EQU   *                   SUCHEN SER-#
         IC    R7,U1PARM+3(R9)
         LA    R6,OPERAND(R7)      START-ADR U1-PARAMETER
         CLC   0(4,R6),=C'SER='    SER-# VORHANDEN?
         BE    SERGEFDN            JA - UNTERSUCHEN
         CLC   0(4,R6),=C'REF='    REF ANGEGEBEN?
         BNE   NOREF               BR FALLS NEIN
         CLC   4(2,R6),=CL2'*.'
         BNE   REFDSN
         MVI   VOLSW,C'D'
         B     NOREF
REFDSN   EQU   *
         IC    R7,U1PARM+1(R9)
         BCTR  R7,0
         SLL   R7,2
         LA    R15,U2PARM+2(R7)
         MVC   SVREFDSN(1),0(R15)
         SR    R6,R6
         IC    R6,U2PARM+3(R7)
         IC    R7,U2PARM+2(R7)
         BCTR  R7,0
         LA    R6,OPERAND(R6)
         EX    R7,MVREFDSN
         MVI   VOLSW,C'R'          VOL-SW = 'REF ANGEGEBEN'
NOREF    LA    R9,4(,R9)
         BCT   R8,SUCHSER          NAECHSTER U1-PARAMETER
         BR    R12                 KEINE SER-# ANGEGEBEN - RETURN
MVREFDSN MVC   SVREFDSN+1(0),0(R6)
SERGEFDN EQU   *
         SR    R8,R8               LOESCHEN FUER IC
         IC    R8,U1PARM+0(R9)     ANZAHL SER-#
         LTR   R8,R8                            = 0?
         STH   R8,SERCOUNT         SPEICHERN
         BCR   ZERO,R12            JA - RETURN
         MVI   VOLSW,C'S'          VOL-SW = 'SER ANGEGEBEN'
         IC    R9,U1PARM+1(R9)     START-INDEX ZUR 1. SER-NUMMER
         BCTR  R9,0
         SLL   R9,2
SERSCHLF EQU   *
         IC    R7,U2PARM+3(R9)
         STH   R7,ZWSPSER#+2(R9)   OFFSET SPEICHERN
         LA    R6,OPERAND(R7)      START-ADR SER-#
         IC    R7,U2PARM+2(R9)     LGE SER-#
         STH   R7,ZWSPSER#+0(R9)   LAENGE SPEICHERN
*
SERBCT   LA    R9,4(,R9)
         BCT   R8,SERSCHLF         NAECHSTE SER-#
         BR    R12                 RUECKSPRUNG
*
MULTKTOR EQU   *
SECHS    DC    H'6'      MULTIPLIKATOR ZUM 1. ZEICHEN DER SER-#
FUENF    DC    H'5'      MULTIPLIKATOR ZUM 2. ZEICHEN DER SER-#
VIER     DC    H'4'      MULTIPLIKATOR ZUM 3. ZEICHEN DER SER-#
DREI     DC    H'3'      MULTIPLIKATOR ZUM 4. ZEICHEN DER SER-#
ZWEI     DC    H'2'      MULTIPLIKATOR ZUM 5. ZEICHEN DER SER-#
*                                                                     *
EINS     DC    H'1'
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*   JOB-ENQUEUE-ENTRY                                                 *
*                                                                     *
***********************************************************************
ENQENTRY EQU   *
         CLI   CADRSBPL,X'FF'      WURDE GETMAIN GEGEBEN?
         BNE   AUSGANG1            NEIN (ODER SCHON FREEMAIN)
         TM    CSMFOPTS,FOREGRND
         BO    CLASSOK
         LA    R6,CLASSLL
         LA    R7,VALDCLAS
TSTCLS   EQU   *
         CLC   SPCLASS,0(R7)    IS THIS A VALID CLASS?
         BE    CLASSOK
         LA    R7,1(R7)
         BCT   R6,TSTCLS
         MVI   SPTYPRUN,C'S'
CLASSOK  EQU   *
         BAL   R14,VERARBDD        DD-ANGABEN VERARBEITEN
         XC    ENDINDEX,ENDINDEX
         MVC   ENDINDEX(2),CINDEX
TESTENDE EQU   *
         B     BANDREQ             BR FALLS NEIN
UJVENDE  EQU   *
         LR    R1,R13              LADEN ADRESSE FUER FREEMAIN
         L     R13,SAVER13         LADEN ADRESSE ALTE SAVEAREA
         FREEMAIN R,LV=LGARBBER,A=(1),SP=241
         CLC   ENDINDEX(2),=H'0'
         BE    AUSGANG1
         XC    ENDINDEX(4),ENDINDEX
         RETURN (14,12),RC=4       RUECKSPRUNG MIT CANCEL
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  FESTSTELLEN, OB EIN GEWUENSCHTER OPERAND VORLIEGT                  *
*                                                                     *
***********************************************************************
SUCHPARM EQU   *
         LH    R9,0(,R14)          OFFSET LADEN
         LA    R8,STATEMTS(R9)     ADRESSE LADEN
         L     R0,ANZPRFST(R5)     ANZAHL LADEN
         LTR   R0,R0               ANZAHL = 0?
         BZ    2(,R14)             BR FALLS JA
         SR    R7,R7               R7 LOESCHEN FUER IC
SUCHP    IC    R7,0(,R8)           R7 = LAENGE - 1 FUER EX CLC
         L     R12,0(,R8)          R12 = ADRESSE DER VERARB.ROUTINE
         EX    R7,VERGLCHP         VERGLEICHEN OPERAND MIT TAB.ELEMENT
         BE    VORPRUEF(R5)        VORPRUEFUNG DURCHFUEHREN, FALLS =
         LA    R8,12(,R8)          ADRESSE DES NAECHSTEN TAB.ELEMENTS
         BCT   R0,SUCHP            WEITERSUCHEN
         B     2(,R14)             NICHT GEFUNDEN: RUECKSPRUNG
*                                                                     *
VERGLCHP CLC   OPERAND(0),4(R8)
*                                                                     *
VORPRFGJ EQU   *
         B     PARMGFDN
*
VORPRFGE EQU   *
         CLI   EXECSW,C'E'         PROCEDURE-STEP?
         BNE   PARMGFDN            BR FALLS NEIN
         LA    R7,1(,R7)           LAENGE UM 1 ERHOEHEN
         STC   R7,ALZWPARM         LAENGE UND
         MVC   ZWPARM(8),4(R8)     OPERAND ALS SUCHBEGRIFF
         LA    R6,SPZWPARM         ADRESSE SUCHBEGRIFF LADEN
         LA    R2,SPSYPARM         ADRESSE SPEICHER SYMB.PARM LADEN
         ST    R14,SAVER14         R14 SICHERN
         BAL   R14,FINDPARM        SUCHEN OPERAND IM SPEICHER
         L     R14,SAVER14         R14 ZURUECKLADEN
         BNZ   2(,R14)             BR FALLS GEFUNDEN
         SR    R9,R9               R9 LOESCHEN FUER IC
         IC    R9,ALPSTPNM         R9 = LAENGE PROCSTEPNAME
         LTR   R9,R9               LAENGE = 0?
         BZ    PARMGFDN            BR FALLS LAENGE = 0
         LA    R8,SPZWPARM(R7)     ADRESSE DES BYTES FUER '.'
         MVI   0(R8),C'.'          '.' EINFUEGEN
         MVC   1(8,R8),PSTPNAME    PROCSTEPNAMEN EINFUEGEN
         LA    R9,1(R7,R9)         LAENGE SUCHBEGRIFF
         STC   R9,ALZWPARM           SPEICHERN
         LA    R8,SPZWPARM(R9)     ADRESSE DES BYTES FUER '='
         MVI   0(R8),C'='          '=' ANHAENGEN
         BAL   R14,FINDPARM        SUCHEN <OPERANDNAME>.<PROCSTEPNAME>=
         L     R14,SAVER14         ZURUECKLADEN R14
         BNZ   2(,R14)             BR FALLS GEFUNDEN
         B     PARMGFDN            WEITER
*
VORPRFGD EQU   *
         B     PARMGFDN
VORPRFGP EQU   *
         B     PARMGFDN
*
PARMGFDN EQU   *
         LH    R8,ANZU1P           ANZAHL U1-PARAMETER LADEN
         LTR   R8,R8               FALLS ANZAHL = 0,
         BZ    2(,R14)               NICHT VERARBEITEN
         SR    R7,R7               R7 LOESCHEN FUER IC
         IC    R7,U1PARM+3         R7 = START-OFFSET,
         LA    R6,OPERAND(R7)      R6 = ADRESSE DES 1. U1-PARAMETER
         IC    R7,U1PARM+2         R7 = LAENGE DES 1. U1-PARAMETER
         BALR  R12,R12             VERZWEIGEN ZUR PARAMETER-VERARB.
         B     ZURUECK(R5)           UND ZURUECK
*
*      R6 ENTHAELT DIE ADRESSE DES 1. UNTERPARAMETERS,
*      R7 DESSEN LAENGE,
*      R8 DIE ANZAHL DER UNTERPARAMETER
*
*      BEISPIEL: 'OPERAND' = C'SPACE=(CYL,(10,2,54))':
*          R6 = ADDR ('CYL'), R7 = 3, R8 = 2
*
***********************************************************************
         EJECT
STATEMTS DS    0F
*                                                                     *
*  ZU PRUEFENDE JOB-STATEMENT OPERANDEN                               *
*                                                                     *
JOBSTMTA EQU   *
         DC    AL1(7),AL3(PRFADDR),C'ADDRSPC='
         DC    AL1(4),AL3(PRFACCT),CL8'ACCT='
         DC    AL1(7),AL3(PRFPERF),C'PERFORM='
         DC    AL1(5),AL3(PRFCLASS),CL8'CLASS='
         DC    AL1(4),AL3(PRFTIMEJ),CL8'TIME='
         DC    AL1(6),AL3(PRFTYPR),CL8'TYPRUN='
JOBSTMTE EQU   *
*                                                                     *
*  ZU PRUEFENDE EXEC-STATEMENT OPERANDEN                              *
*                                                                     *
EXCSTMTA EQU   *
         DC    AL1(5),AL3(PRFPRTY),C'DPRTY=  '
         DC    AL1(5),AL3(PRFPRTY),C'DPRTY.  '
         DC    AL1(7),AL3(PRFADDR),C'ADDRSPC='
         DC    AL1(7),AL3(PRFADDR),C'ADDRSPC.'
         DC    AL1(7),AL3(PRFPERF),C'PERFORM='
         DC    AL1(7),AL3(PRFPERF),C'PERFORM.'
         DC    AL1(4),AL3(PRFTIME),CL8'TIME='
         DC    AL1(4),AL3(PRFTIME),CL8'TIME.'
         DC    AL1(3),AL3(PRFPGM),CL8'PGM='
EXCSTMTE EQU   *
*                                                                     *
*  ZU PRUEFENDE DD-STATEMENT OPERANDEN                                *
*                                                                     *
DDSTMTA  EQU   *
         DC    AL1(6),AL3(PRFVOLM),C'VOLUME= '
         DC    AL1(3),AL3(PRFVOLM),C'VOL=    '
         DC    AL1(6),AL3(PRFSOUT),C'SYSOUT= '
DDSTMTE  EQU   *
*                                                                     *
*  'VOLUME'-ANGABE UEBERSCHREIBENDE DD-PARAMETER                      *
*                                                                     *
KSTERN   DC    AL1(1),C'*      '
KDATA    DC    AL1(4),C'DATA   '
KDUMMY   DC    AL1(5),C'DUMMY  '
KDYNAM   DC    AL1(5),C'DYNAM  '
KSYSOUT  DC    AL1(7),C'SYSOUT='
KDDNAME  DC    AL1(7),C'DDNAME='
*                                                                     *
*  TABELLE DER UNIT-NAMEN FUER BAND                                   *
*                                                                     *
UNITBAND EQU   *
         DC    AL1(4),C'TAPE   '   ? ? ? ? ?
         DC    AL1(4),C'TAP8   '   ? ? ? ? ?
         DC    AL1(4),C'TAP7   '   ? ? ? ? ?
         DC    AL1(4),C'HDTP   '
         DC    AL1(6),C'3400-4 '
         DC    AL1(6),C'3400-2 '
         DC    AL1(6),C'3400-6 '
         DC    AL1(6),C'3400-3 '   ? ? ? ? ?
         DC    AL1(6),C'2400-3 '   ? ? ? ? ?
DISKNTRY DC    AL1(4),CL7'DISK'
         DC    AL1(5),CL7'SYSDA'
         DC    AL1(4),CL7'3330'
         DC    AL1(4),CL7'3311'
         DC    AL1(4),CL7'3350'
         DC    AL1(5),CL7'3330V'
         DC    AL1(6),CL7'3330-1'
ANZUBAND EQU   (*-UNITBAND)/8
VALDPGM  EQU   *
         DC    H'7',CL8'IKFCBL00'
         DC    H'5',CL8'EXTRDR'
         DC    H'7',CL8'IEQCBL00'
         DC    H'6',CL8'IEYFORT'
         DC    H'6',CL8'IGIFORT'
         DC    H'5',CL8'IEL0AA'
         DC    H'4',CL8'IEMAA'
         DC    H'7',CL8'BTSRC000'
         DC    H'3',CL8'INIT'
         DC    H'5',CL8'IEUASM'
         DC    H'5',CL8'ASMBLR'
         DC    H'3',CL8'HASM'
         DC    H'3',CL8'IEWL'
         DC    H'3',CL8'HEWL'
         DC    H'5',CL8'FTOUTP'
         DC    H'6',CL8'RELEASE'
         DC    H'3',CL8'LIBR'
         DC    H'4',CL8'ABEND'
         DC    H'6',CL8'CADFORT'
         DC    H'7',CL8'IALLINK7'
         DC    H'5',CL8'IAKFMT'
         DC    H'5',CL8'IAMASM'
         DC    H'6',CL8'IEFBR14'
         DC    H'5',CL8'IFOX00'
         DC    H'7',CL8'DFSILNK0'
         DC    H'5',CL8'CANCEL'
         DC    X'FFFF'
         EJECT
***********************************************************************
*                                                                     *
*  PRUEFEN EINE ZEICHENFOLGE AUF NUR-ZIFFERN                          *
*                                                                     *
*      VOR DEM AUFRUF (BAL  R14,PRUEFNUM):                            *
*          R6 = ADR (ZEICHENFOLGE)                                    *
*          R7 = LGE (ZEICHENFOLGE)                                    *
*      NACH DEM AUFRUF:                                               *
*          R15 = 0: ALLES O.K., = 4: MEHR ALS 9 ZEICHEN, = 8: NICHT NUM
*          R0  = WERT (BINAER): NUR BEI R15 = 0, SONST = 0            *
*                                                                     *
***********************************************************************
PRUEFNUM EQU   *
         SR    R15,R15
         LTR   R0,R7
         BCR   NOTHIGH,R14
         CH    R0,=H'9'
         BH    RC4
         LR    R15,R6
*                                                                     *
TESTNUM  CLI   0(R15),C'0'
         BL    RC8
         CLI   0(R15),C'9'
         BH    RC8
         LA    R15,1(,R15)
         BCT   R0,TESTNUM
*                                                                     *
         LR    R15,R7
         BCTR  R15,0
         EX    R15,PACKNUM
         CVB   R0,DPPLWORT
         SR    R15,R15
         BR    R14
*                                                                     *
RC4      SR    R0,R0
         LA    R15,4
         BR    R14
*                                                                     *
RC8      SR    R0,R0
         LA    R15,8
         BR    R14
*                                                                     *
PACKNUM  PACK  DPPLWORT,0(0,R6)
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  UNTERPROGRAMME (SICHERNA, AENDERN)                                 *
*                                                                     *
***********************************************************************
*                                                                     *
SICHERNA EQU   *
         L     R6,SAVEAOPD
         SR    R7,R7
         LTR   R6,R6
         BCR   ZERO,R14
         IC    R7,U1PARM+3
         AR    R6,R7
         IC    R7,U1PARM+2
         BR    R14
*                                                                     *
AENDERN  EQU   *
         LTR   R6,R6
         BCR   ZERO,R12
         CVD   R0,DPPLWORT
         OI    DPPLWORT+7,X'0F'
         BCTR  R7,0
         SLA   R7,4
         EX    R7,ERSATZ
         SRA   R7,4
         LA    R7,1(,R7)
         BR    R14
*                                                                     *
ERSATZ   UNPK  0(0,R6),DPPLWORT
*                                                                     *
ZURUECK  EQU   *
         B     AUSGANGJ
         B     AUSGANGE
         B     AUSGANGD
         B     AUSGANGP
*                                                                     *
VORPRUEF EQU   *
         B     VORPRFGJ
         B     VORPRFGE
         B     VORPRFGD
         B     VORPRFGP
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  UNTERPROGRAMME (MOVEPARM, FINDPARM)                                *
*                                                                     *
***********************************************************************
MOVEPARM EQU   *               UP ZUM SPEICHERN EINES PARAMETER
         LH    R0,LOPERAND         LAENGE DES GESAMTEN OPERANDEN
         LTR   R0,R0                 = 0?
         BCR   ZERO,R14            BR FALLS JA
         CLI   LBYTE,0             L1 = 0?
         BNE   *+8                 BR FALLS NEIN
         STC   R0,LBYTE            LAENGE ALS L1 SPEICHERN
         LA    R6,LBYTE            ADRESSE DES SUCHBEGRIFFS LADEN
         ST    R14,SAVER14         R14 SICHERN
         BAL   R14,FINDPARM        NACHSEHEN, OB PARAMETER EXISTIERT
         L     R14,SAVER14         ZURUECKHOLEN R14
         BNZ   6(,R14)             RUECKSPRUNG, DA PARAMETER EXISTIERT
*  ZUSATZPRUEFUNG BEI DD-ANGABEN DSNAME UND VOLUME
         LA    R0,8                KONSTANTE LADEN
         CR    R5,R0               DD-STATEMENT?
         BNE   MOVEPRM2            BR FALLS NEIN
         CLC   OPERAND(7),KDSNAME+1  'DSNAME'
         LA    R6,KDSN                =
         BE    MOVEPRM1              'DSN'
         CLC   OPERAND(7),KVOLUME+1  'VOLUME'
         LA    R6,KVOL                =
         BE    MOVEPRM1              'VOL'
         CLC   OPERAND(4),KDSN+1   'DSN'
         LA    R6,KDSNAME           =
         BE    MOVEPRM1            'DSNAME'
         CLC   OPERAND(4),KVOL+1   'VOL'
         LA    R6,KVOLUME           =
         BNE   MOVEPRM2            'VOLUME'
MOVEPRM1 BAL   R14,FINDPARM        NOCH EIN VERSUCH
         L     R14,SAVER14         ZURUECKHOLEN R14
         BNZ   6(,R14)             RUECKSPRUNG, DA PARAMETER EXISTIERT
*
MOVEPRM2 LH    R8,0(,R2)           AKTUELLE LAENGE DES SPEICHER LADEN
         LA    R6,0(R8,R2)         START-ADRESSE BESTIMMEN
         LH    R9,LOPERAND         ANZAHL BYTES PARAMETER
         LA    R0,3(,R9)             + 3 FUER LAENGENFELDER
         AR    R8,R0               ERGIBT NEUE AKTUELLE LAENGE
         CH    R8,2(,R2)           MIT MAXIMUM VERGLEICHEN
         BCR   HIGH,R14            RUECKSPRUNG, FALLS > MAX
         STH   R8,0(,R2)           AKTUELLE LAENGE SPEICHERN
         STH   R0,HALBWORT         LAENGE + 3 PARAMETER
         MVC   0(2,R6),HALBWORT      SPEICHERN
         EX    R9,MOVEPRM3         L1 + PARAMETER SPEICHERN
         BR    R14                 RUECKSPRUNG
*
MOVEPRM3 MVC   2(0,R6),LBYTE       EX MARKE L1 + OPERAND SPEICHERN
         EJECT
FINDPARM EQU   *               UP ZUM SUCHEN EINES PARAMETERS
         SR    R9,R9               R9 LOESCHEN FUER IC
         IC    R9,0(,R6)           L1 LADEN
         LA    R8,4                START-OFFSET LADEN
FINDPRM1 CH    R8,0(,R2)           OFFSET MIT AKT. LAENGE VERGLEICHEN
         BNL   FINDPRM4            NICHT GEFUNDEN, FALLS ^<
         LA    R15,0(R8,R2)        ADRESSE PARAMETER IM SPEICHER
         MVC   HALBWORT,0(R15)     LAENGEN-ANGABE AUF HALBWORT-GRENZE
         EX    R9,FINDPRM2         VERGLEICHEN
         BE    FINDPRM3            GEFUNDEN, FALLS =
         AH    R8,HALBWORT         NAECHSTES OFFSET
         B     FINDPRM1            UND WEITERSUCHEN
*
FINDPRM2 CLC   2(0,R15),0(R6)      EX MARKE VERGLEICHEN
*
FINDPRM3 LH    R8,HALBWORT         LAENGE DES PARAMETER IM SPEICHER
         SH    R8,DREI               - 3 FUER LAENGENFELDER
         SR    R8,R9                 - L1
         SLL   R8,24               ERGIBT ANZAHL BYTES HINTER '='
         LA    R15,3(R9,R15)       ADRESSE BYTE HINTER '='
         OR    R15,R8              LAENGE IN BITS 0-7
         BR    R14                 RUECKSPRUNG
*
FINDPRM4 SR    R15,R15             R15 = 0: NICHT GEFUNDEN
         BR    R14                 RUECKSPRUNG
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  VERARBEITEN DD-ANGABEN (BESTIMMEN DER ANGEFORDERTEN BAENDER)       *
*                                                                     *
***********************************************************************
VERARBDD EQU   *
         CLC   LLDDCARD,VIER       SPEICHER DD-ANGABEN LEER?
         BCR   EQUAL,R14           RUECKSPRUNG, FALLS JA
         LA    R2,SPDDCARD         ADRESSE SPEICHER DD-ANGABEN LADEN
         ST    R14,SAVER14A        R14 SICHERN
*
*      PRUEFUNG AUF BAND-ANFORDERUNG
*
         ST    R1,SAVER1Z          SICHERN R1
* 1) PRUEFEN AUF DD * BZW. DD DATA
         LA    R6,KSTERN           SUCHBEGRIFF '*'
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         BNZ   LOESCHDD            FERTIG - DD * DATEI
         LA    R6,KDATA            SUCHBEGRIFF 'DATA'
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         BNZ   LOESCHDD            FERTIG - DD DATA DATEI
* 2) PRUEFEN AUF DSNAME
         LA    R6,KDSNAME          SUCHBEGRIFF 'DSNAME='
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         BNZ   *+12                GEFUNDEN
         LA    R6,KDSN             SUCHBEGRIFF 'DSN='
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         ST    R15,SAVEADSN        LAENGE + ADRESSE SPEICHERN
         CLI   SAVEADSN,0          LAENGE DES DSNAMEN = 0?
         BE    VERARBVO            BR FALLS JA
         CLI   0(R15),C''''        DSNAME IN HOCHKOMMA EINGESCHLOSSEN?
         BE    VERARBD0            BR FALLS JA
         CLI   0(R15),C'('         DSNAME IN KLAMMERN EINGESCHLOSSEN?
         BNE   VERARBD1            BR FALLS NEIN
VERARBD0 LA    R15,1(,R15)         ADRESSE UM 1 ERHOEHEN
         SR    R0,R0               R0 LOESCHEN FUER IC
         IC    R0,SAVEADSN         R0 = LAENGE DSNAME
         SH    R0,ZWEI               - 2
         BNP   *+10                BR FALLS R0 ^> 0
         SLL   R0,24               LAENGE IN BITS 0-7
         OR    R15,R0              LAENGE IN BITS 0-7
         ST    R15,SAVEADSN        LAENGE + ADRESSE SPEICHERN
*   PRUEFEN AUF DSNAME=NULLFILE
VERARBD1 ST    R15,SDSN            SAVE FOR DSNAME-CONTROL
         CLI   SAVEADSN,8          LAENGE DSNAME = 8?
         BNE   *+14                NEIN - NAECHSTE ABFRAGE UEBERGEHEN
         CLC   0(8,R15),=C'NULLFILE'  DUMMY DATASET?
         BE    LOESCHDD            FERTIG FALLS JA
*+14   PRUEFEN DSNAME AUF MEMBER- BZW. AREA-NAME
         SR    R9,R9               R9 LOESCHEN FUER IC
         IC    R9,SAVEADSN         LAENGE LADEN
         BCTR  R9,0                FUER EX 1 ABZIEHEN
         EX    R9,VERARBTD         '(' SUCHEN
         BZ    VERARBVO            NICHT GEFUNDEN - WEITER
         LA    R2,SPDDCARD         ADRESSE SPEICHER DD-ANGABEN LADEN
         CLI   0(R1),C'('          '(' GEFUNDEN?
         BNE   VERARBVO            NEIN - WEITER
         CLI   1(R1),C'-'          GDG-INDEX?
         BE    VERARBVO            BR FALLS JA
         CLI   1(R1),C'+'          GDG-INDEX?
         BNE   VERARBD2       IF NOT, TEST FOR (0)
INHLOC   EQU   *              INHIBIT LOCATE IF (+..)
         OI    GDGSW,X'80'
         B     VERARBVO  GO PROCESS VOL-PARM
VERARBD2 EQU   *
         CLI   1(R1),C'0'   IS IT GDG?
         BE    VERARBVO       YES - PROCESS VOL-PARM
         BH    INHLOC         YES, BUT POSITIVE GEN.-NO. - INHIBIT LOC
*
*  DSNAME HAS A MEMBER-NAME APPENDED - REMOVE IT FOR LOCATE PROC.
*
         LA    R0,10
VERARBD4 EQU   *
         CLI   0(R1),C')'
         BE    VERARBD3
         LA    R1,1(R1)
         BCTR  R9,0
         BCT   R0,VERARBD4
VERARBD3 EQU   *
         STC   R9,SAVEADSN
* 3) VERARBEITEN DER VOLUME-ANGABEN
VERARBVO EQU   *
         LA    R6,KVOLUME          SUCHBEGRIFF 'VOLUME='
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         BNZ   *+12                BR FALLS GEFUNDEN
         LA    R6,KVOL             SUCHBEGRIFF 'VOL='
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         ST    R15,SAVEAVOL        ADRESSE SPEICHERN
         CLI   SAVEAVOL,0          VOLUME-ANGABE VORHANDEN?
         BE    VERARBWD            BR FALLS NEIN
         MVC   SAVEAVOL(1),0(R6)   L1 SPEICHERN
         CLI   VOLSW,C'D'
         BNE   TSTRF
         MVI   VOLSW,C'N'
         B     LOESCHDD
TSTRF    EQU   *
         CLI   VOLSW,C'R'
         BNE   NORF1
         LA    R15,SVREFDSN+1
         ST    R15,SAVEADSN
         MVC   SAVEADSN(1),SVREFDSN
         MVI   VOLSW,C'L'
         LA    R15,SVREFDSN+1
         B     VERARBD1
NORF1    EQU   *
* 4) PRUEFEN AUF 'DUMMY', 'DYNAM', 'DDNAME=', 'SYSOUT='
VERARBWD EQU   *
         LA    R6,KDUMMY           SUCHBEGRIFF 'DUMMY'
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         BZ    *+8                 NICHT GEFUNDEN - WEITER
         BAL   R14,VERARBXC        GENAU PRUEFEN
*+8
         LA    R6,KDYNAM           SUCHBEGRIFF 'DYNAM'
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         BZ    *+8                 NICHT GEFUNDEN - WEITER
         BAL   R14,VERARBXC        GENAU PRUEFEN
*+8
         LA    R6,KSYSOUT          SUCHBEGRIFF 'SYSOUT='
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         ST    R15,SAVER15         LAENGE + ADRESSE SPEICHERN
         CLI   SAVER15,0           LAENGE = 0?
         BE    *+8                 NICHT GEFUNDEN - WEITER
         BAL   R14,VERARBXC        GENAU PRUEFEN
*+8
         LA    R6,KDDNAME          SUCHBEGRIFF 'DDNAME='
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         ST    R15,SAVER15         LAENGE + ADRESSE SPEICHERN
         CLI   SAVER15,0           LAENGE = 0?
         BE    *+8                 NICHT GEFUNDEN - WEITER
         BAL   R14,VERARBXC        GENAU PRUEFEN
*+8
         LA    R6,KDISP
         BAL   R14,FINDPARM
         ST    R15,SAVER15
         CLI   SAVER15,0
         BE    DSPNEW
         CLI   0(R15),C'('
         BNE   NOKLAM
         LA    R15,1(R15)
NOKLAM   EQU   *
         CLI   0(R15),C','
         BE    DSPNEW
         CLC   0(3,R15),=CL3'NEW'
         BE    DSPNEW
         CLC   0(3,R15),=CL3'MOD'
         BNE   NODISP
         MVI   DISPSW,C'M'
         B     NODISP
DSPNEW   EQU   *
         MVI   DISPSW,C'N'
         L     R15,SDSN
         CLI   1(R15),C'X'
         BNE   NODISP
         CLI   SDSN,13
         BL    DSNERR
         CLC   1(3,R15),=CL3'X.A'
         BNE   DSNERR
         CLC   8(2,R15),=CL2'.I'
         BE    NODISP
         CLC   8(2,R15),=CL2'.F'
         BE    NODISP
DSNERR   EQU   *
         OI    CINDEX+1,X'08'
         MVC   SP73#80,=CL8'***DSN**'
         B     LOESCHDD
NODISP   EQU   *
* 5) PRUEFEN DER UNIT-ANGABE
VERARBUN EQU   *
         MVI   UNITSW,C'N'         UNIT-SW SETZEN
         LA    R6,KUNIT            SUCHBEGRIFF 'UNIT='
         BAL   R14,FINDPARM        SUCHROUTINE AUFRUFEN
         ST    R15,SAVER15         LAENGE + ADRESSE SPEICHERN
         CLI   SAVER15,0           LAENGE = 0?
         BE    VERARBCT            BR FALLS JA
         CLI   0(R15),C'('         1. ZEICHEN DER UNIT-ANGABE '('?
         BNE   *+8                 BR FALLS NEIN
         LA    R15,1(,R15)         ADRESSE UM 1 ERHOEHEN
         CLC   0(4,R15),=C'AFF='   UNIT-AFFINITY ANGEGEBEN?
         BNE   *+12                BR FALLS NEIN
         MVI   UNITSW,C'A'         UNIT-SW SETZEN
         B     VERARBCT            WEITER
*+12 PRUEFEN AUF UNIT=BAND (ODER AEQUIVALENT)
         SR    R9,R9               R9 LOESCHEN FUER IC
         IC    R9,SAVER15          LAENGE LADEN
         LA    R1,0(R9,R15)        R1 LADEN, FALLS CC TRT = 0
         BCTR  R9,0                FUER EX 1 ABZIEHEN
         EX    R9,VERARBTD         DELIMITER SUCHEN
         LA    R2,SPDDCARD         ADRESSE SPEICHER DD-ANGABEN LADEN
         LR    R7,R1               ADRESSE UMLADEN
         SR    R7,R15              LAENGE DER UNIT-ANGABE BESTIMMEN
         BZ    VERARBCT            BR FALLS LAENGE = 0
         MVI   UNITSW,C'J'         UNIT-SW = 'UNIT-NAME ANGEGEBEN'
*    UNIT-ANGABE MIT TABELLE FUER BAND-UNITNAMEN VERGLEICHEN
         LA    R0,ANZUBAND         ANZAHL TAB-ELEMENTE
         LA    R8,UNITBAND         ADRESSE DES 1. ELEMENTS
         LR    R9,R7               R9 = LAENGE
         BCTR  R9,0                  - 1 FUER EX CLC
VERARBU1 EX    R7,VERARBU3         LAENGEN-ANGABEN VERGLEICHEN
         BNE   VERARBU2            BR FALLS ^=
         EX    R9,VERARBU4         UNIT-NAMEN VERGLEICHEN
         BE    VERARBU5            BR FALLS =
VERARBU2 LA    R8,8(,R8)           ADRESSE NAECHSTES ELEMENT
         BCT   R0,VERARBU1         WEITERSUCHEN
         B     LOESCHDD            NICHT GEFUNDEN - UNIT ^= BAND
VERARBU3 CLI   0(R8),0             EX-MARKE LAENGENVERGLEICH
VERARBU4 CLC   1(0,R8),0(R15)      EX-MARKE NAMENVERGLEICH
VERARBU5 MVI   UNITSW,C'B'         UNIT-SW = BAND!
         C     R8,=A(DISKNTRY)  IS IT A DISK-UNIT?
         BL    NODISK         NO - CHECK DISP & LABEL
         MVI   DISKSW,C'Y'
         B     ENDLAB
NODISK   EQU   *
         CLI   SPCLASS,C'S'
         BE    CLSERR2
         CLI   SPCLASS,C'R'
         BNE   NOR3
CLSERR2  EQU   *
         OI    CINDEX+1,X'08'
         MVC   SP73#80,=CL8'*CLASS**'
         B     LOESCHDD
NOR3     EQU   *
         CLI   DISPSW,C'N'    IS IT DISP=NEW
         BE    TSTLAB
         CLI   DISPSW,C'M'
         BNE   ENDLAB
TSTLAB   EQU   *
         CLI   SAVEADSN,0
         BE    ENDLAB
         L     R15,SAVEADSN
         CLI   0(R15),C'&&'   IS IT A TEMPORARY DATASET
         BE    ENDLAB         YES, DONT TEST FOR LABEL-PARM.
         LA    R6,KLABEL
         BAL   R14,FINDPARM
         ST    R15,SAVER15
         CLI   SAVER15,0   IS LABEL-PARM PRESENT?
         BNE   ENDLAB         YES, GOON
         OI    CINDEX+1,X'10'
         MVC   SP73#80,=CL8'*LABEL**'
         B     LOESCHDD
ENDLAB   EQU   *
* 6) VERARBEITEN KATALOG-ANGABEN, FALLS NOETIG
VERARBCT EQU   *
         CLI   VOLSW,C'S'          VOLSER-NR ANGEGEBEN?
         BE    VERARBSR            BR FALLS JA
         CLI   VOLSW,C'L'   WAS VOL=REF=DSNAME SPECIFIED?
         BE    DOLOC           YES, DO LOCATE
         CLI   DISPSW,C'N'  WAS DISP=NEW SPECIFIED?
         BE    LOESCHDD       YES, RETURN
         TM    GDGSW,X'80'    WAS GDG WITH POS GEN.-NO. SPEC?
         BO    LOESCHDD       YES, RETURN
         L     R15,SAVEADSN
         CLI   0(R15),C'&&'  IS IT A TEMPORARY DATASET?
         BE    LOESCHDD       YES, RETURN
         CLI   SAVEADSN,0          DSNAME SPEZIFIZIERT?
         BE    LOESCHDD            BR FALLS NEIN
DOLOC    EQU   *
         SR    R9,R9               R9 LOESCHEN FUER IC
         IC    R9,SAVEADSN         LAENGE DSNAME LADEN
         LA    R0,44               MAX LAENGE LADEN
         CR    R9,R0               LAENGE > MAX?
         BH    LOESCHDD            BR FALLS JA
         MVI   DSNAME,C' '         DSNAMEN
         MVC   DSNAME+1(43),DSNAME   LOESCHEN
         L     R8,SAVEADSN         ADRESSE LADEN FUER EX MVC
         BCTR  R9,0                1 ABZIEHEN FUER EX MVC
         EX    R9,VERARBKE         DSNAMEN UEBERTRAGEN
         MVC   CAMEX,CAMLIST       LIST-FORM MACRO UEBERTRAGEN
         LA    R0,DSNAME           ADRESSE DSNAME
         ST    R0,CAMEX+4            SPEICHERN
         LA    R12,CATWTOWK        ADRESSE CATALOG WORKAREA
         ST    R12,CAMEX+12          SPEICHERN
         LOCATE CAMEX              LOCATE BY NAME
         LTR   R15,R15    RETURN-CODE EQ ZERO?
         BNZ   LOESCHDD       NO, END THIS DD-STMT.
         USING LOCBER,R12          CATALOG WORKAREA ADRESSIEREN
         CLI   VOLDEVTP+2,X'80'    DEVICE TYPE 'BAND'?
         BNE   TST20
         CLI   SPCLASS,C'R'
         BE    CLSERR2
         CLI   SPCLASS,C'S'
         BE    CLSERR2
         B     SETSW
TST20    EQU   *
         CLI   VOLDEVTP+2,X'20'
         BNE   LOESCHDD
         MVI   DISKSW,C'Y'
SETSW    EQU   *
         MVI   UNITSW,C'B'         UNIT 'BAND'!
         LH    R7,VOLCOUNT         ANZAHL VOLUMES LADEN
         LTR   R7,R7               ANZAHL = 0?
         BZ    LOESCHDD            BR FALLS JA
         LA    R0,20               MAX ANZAHL LADEN
         CR    R7,R0               ANZAHL > MAX?
         BNH   *+6                 BR FALLS NEIN
         LR    R7,R0               ANZAHL = MAX
         LA    R8,VOLSERNR         ADRESSE VOLSER-NR LADEN
VERARBK1 BAL   R14,VERARBNR        VOLSER-NR SPEICHERN
         LA    R8,12(,R8)          ADRESSE NAECHSTE VOLSER-NR
         BCT   R7,VERARBK1         UND WEITER
         B     LOESCHDD            FERTIG!
VERARBKE MVC   DSNAME(0),0(R8)     EX-MARKE DSNAME UEBERTRAGEN
         DROP  R12
* 7) VERARBEITEN VOL=SER=...-ANGABEN
VERARBSR EQU   *
         LH    R7,SERCOUNT         ANZAHL SER-NUMMERN LADEN
         L     R6,SAVEAVOL         ADRESSE VOLUME-ANGABE IM SPEICHER
         SR    R9,R9               R9 LOESCHEN FUER IC
         IC    R9,SAVEAVOL         L1 LADEN
         SR    R6,R9               ADRESSE MODIFIZIEREN
         SR    R9,R9               R9 = INDEX FUER SER-NR
VERARBS1 LH    R8,ZWSPSER#+2(R9)   OFFSET ZUR LFD SER-NR
         LA    R8,0(R8,R6)         ADRESSE ZUR LFD SER-NR
         LA    R0,6                MAX LAENGE FUER SER-NR LADEN
         CH    R0,ZWSPSER#+0(R9)   LAENGE MIT MAX VERGLEICHEN
         BL    LOESCHDD            BR FALLS > - FEHLER
         BH    VERARBS3            BR FALLS <
         BAL   R14,VERARBNR        SER-NR SPEICHERN
VERARBS2 LA    R9,4(,R9)           INDEX ERHOEHEN
         BCT   R7,VERARBS1         NAECHSTE SER-NR ABARBEITEN
         B     LOESCHDD            FERTIG!
VERARBS3 LH    R15,ZWSPSER#+0(R9)  LAENGE LFD SER-NR LADEN
         LTR   R15,R15             LAENGE = 0?
         BZ    VERARBS2            BR FALLS JA
         MVC   LFDSERNR,BLANKS     FELD LOESCHEN
         BCTR  R15,0               1 WENIGER FUER EX MVC
         EX    R15,VERARBS4        SER-NR ZW-SPEICHERN
         LA    R8,LFDSERNR         ADRESSE MITGEBEN
         BAL   R14,VERARBNR        SER-NR SPEICHERN
         B     VERARBS2            UND ZURUECK
VERARBS4 MVC   LFDSERNR(0),0(R8)   EX-MARKE SER-NR ZW-SPEICHERN
*
VERARBTD TRT   0(0,R15),SUCHTAB    EX-MARKE DELIMITER SUCHEN
*    VERARBEITEN VON SICH AUSSCHLIESSENDEN DD-ANGABEN
VERARBXC EQU   *
         CLI   SAVEADSN,0          DSNAME SPEZIFIZIERT?
         BE    VERARBXV            BR FALLS NEIN
         ST    R15,SAVER15         ADRESSE ZUM VERGLEICH SPEICHERN
         CLC   SAVEADSN+1(3),SAVER15+1  DSNAME ZUERST ANGEGEBEN?
         BH    LOESCHDD            BR FALLS NEIN
         BR    R14                 RUECKSPRUNG
VERARBXV CLI   SAVEAVOL,0          VOLUME SPEZIFIZIERT?
         BE    LOESCHDD            BR FALLS NEIN
         ST    R15,SAVER15         ADRESSE ZUM VERGLEICH SPEICHERN
         CLC   SAVEAVOL+1(3),SAVER15+1  VOLUME ZUERST ANGEGEBEN?
         BH    LOESCHDD            BR FALLS NEIN
         BR    R14                 RUECKSPRUNG
*    VOLSER-NR SPEICHERN
VERARBNR EQU   *
*
*  FIRST LOOK IF THE CURRENT VOLUME IS MOUNTED ON ANY DEVICE
*
         CLI   DISKSW,C'Y'
         BNE   UCBLOOK
         CLC   0(2,R8),=CL2'TS'     TSO-VOLUME?
         BER   R14
         CLC   0(3,R8),=CL3'DAX'    3350-VOLUME
         BER   R14
         CLC   0(2,R8),=CL2'VV'     VIRTUAL VOLUME?
         BER   R14
         CLC   0(2,R8),=CL2'RV'     SYSRES?
         BER   R14
         CLC   0(2,R8),=CL2'PG'     PAGE-VOLUME?
         BER   R14
         CLC   0(2,R8),=CL2'DL'     DLIB-VOLUME?
         BER   R14
         L     R2,=V(VOLTAB)
NEXTVOL  EQU   *
         CLC   0(6,R2),0(R8)    VOLSER EQUAL?
         BH    UCBLOOK
         BER   R14
         LA    R2,6(R2)
         B     NEXTVOL
UCBLOOK  EQU   *
         L     R2,16          CVT-ADDRESS
         L     R2,40(R2)      UCB-LOOKUP-TABLE
         XC    DPPLWORT,DPPLWORT
NEXTUCB  EQU   *
         CLC   0(2,R2),=X'FFFF'
         BE    ENDUCB
         CLC   0(2,R2),=X'0000'
         BNE   TESTUCB
INCUCB   EQU   *
         LA    R2,2(R2)       POINT TO NEXT UCB
         B     NEXTUCB
TESTUCB  EQU   *
         MVC   DPPLWORT+2(2),0(R2)
         L     R1,DPPLWORT
         CLC   28(6,R1),0(R8)  VOLSER EQUAL?
         BER   R14            YES - RETURN
         B     INCUCB         NO - TEST NEXT UCB
ENDUCB   EQU   *
         CLI   DISKSW,C'Y'
         BE    GOODCL
         CLI   SPCLASS,C'B'
         BE    CLASSERR
         CLI   SPCLASS,C'1'
         BE    CLASSERR
         CLI   SPCLASS,C'2'
         BE    CLASSERR
         CLI   SPCLASS,C'3'
         BE    CLASSERR
         B     GOODCL
CLASSERR EQU   *
         TM    0(R5),X'10'    ENQ?
         BO    NOMVC
         MVC   SP73#80,=CL8'*CLASS**'
NOMVC    EQU   *
         OI    CINDEX+1,X'08'
         BR    R14
GOODCL   EQU   *
         BR    R14   RETURN, WHEN LIBRARY-FETCH MSGS ARE NOT
*    REQUIRED. REMOVE THIS STMT. IF FETCH-MSGS ARE TO BE PRODUCED.
         LA    R2,SERNR10          ADRESSE DER ERSTEN 10 BANDNUMMERN
         USING SERNRBER,R2         DSECT ADRESSIEREN
VERARBN0 SR    R0,R0               R0 LOESCHEN FUER IC
VERARBN1 IC    R0,SP#SERNR         ANZAHL BANDNUMMERN IM LFD BEREICH
         LA    R1,SPSER#           ADRESSE DER ERSTEN BANDNUMMER
         LTR   R0,R0               ANZAHL = 0?
         BZ    VERARBN4            BR FALLS JA
VERARBN2 CLC   0(6,R1),0(R8)       BANDNUMMER SCHON VORGEKOMMEN?
         BCR   EQUAL,R14           BR FALLS JA
         LA    R1,6(,R1)           NAECHSTE BANDNUMMER
         BCT   R0,VERARBN2         UND WEITER VERGLEICHEN
         CLI   SP#SERNR,10         ANZAHL = MAX?
         BL    VERARBN4            BR FALLS NEIN
         CLC   SPAL3NXT,NULL       GIBT ES EINEN WEITEREN SPEICHER?
         BE    VERARBN3            BR FALLS NEIN
         L     R2,SPANXTSP         ADRESSE DES NACHFOLGERS LADEN
         B     VERARBN1            UND WEITER
VERARBN3 LA    R0,SERNRLGE         ANZAHL BYTES FUER EINEN NR-SPEICHER
         GETMAIN R,LV=(0)          HAUPTSPEICHER ANFORDERN
         ST    R1,SAVERX+1*4       ADRESSE ZW-SPEICHERN
         MVC   SPAL3NXT,SAVERX+1*4+1  UND UEBERTRAGEN
         LR    R2,R1               ADRESSE DES NEUEN SPEICHER LADEN
         XC    SPANXTSP,SPANXTSP   NUMMER UND ADRESSE LOESCHEN
         B     VERARBN0            UND WEITER
VERARBN4 MVC   0(6,R1),0(R8)       BAND-NR SPEICHERN
         IC    R0,SP#SERNR         LFD NR
         AH    R0,EINS               UM 1
         STC   R0,SP#SERNR             ERHOEHEN
         BR    R14                 UND ZURUECK
         DROP  R2
*
LOESCHDD MVC   LLDDCARD,VIER       SPEICHER DD-ANGABEN LOESCHEN
         L     R1,SAVER1Z          R1 ZURUECKLADEN
         L     R14,SAVER14A        R14 ZURUECKLADEN
         BR    R14                 RUECKSPRUNG
*
* 8) AUSGABE DER ANGEFORDERTEN BAND-NUMMERN AUF 2740-KONSOLE
BANDREQ  EQU   *
         CLI   ANZSERNR,0
         BNE   DOREQ
         CLI   SPCLASS,C'C'   IS JOBCLASS = C , D OR E
         BL    ASBEFORE
         CLI   SPCLASS,C'E'
         BH    ASBEFORE
         NOP   DOPRAY         ASK FOR RELEASE IF NO TAPES REQUIRED
*  CHANGE ABOVE NOP TO B IF FETCH-MSGS ARE REQUIRED.
ASBEFORE EQU   *
         CLI   MSGSW,C'N'
         BNE   DOREQ
         FREEMAIN R,LV=5006,A=MSGADR
         B     UJVENDE
DOPRAY   EQU   *
         LA    R1,MSG4B+31    POINT TO JOBNAME
         LA    R0,8           JOBNAME LENGTH
NUMLOOP  EQU   *
         CLI   0(R1),C'#'
         BE    ASBEFORE
         LA    R1,1(R1)       TEST NEXT CHARACTER
         BCT   R0,NUMLOOP     IF NO NUM-SIGN IS FOUND
         MVI   MSGSW,C'B'     INDICATE SPECIAL RELEASE MSG
DOREQ    EQU   *
         CLC   ENDINDEX(2),=H'0'     UJV-CANCEL BIT AN?
         BNE   SBERFREI              BR FALLS JA
* PRUEFEN, OB CONVERTER EINEN FEHLER FESTSTELLTE
         L     R12,SAVER13           ADRESSE CNV WORKAREA
         L     R12,68(,R12)            LADEN
         TM    X'0137'(R12),X'04'    JOB FAILED BIT AN?
         BO    SBERFREI              BR FALLS JA
         CLI   SPTYPRUN,C'S'         TYPRUN = 'SCAN'?
         BE    SBERFREI              BR FALLS JA
         CLI   SPTYPRUN,C'C'         TYPRUN = 'COPY'?
         BE    SBERFREI              BR FALLS JA
         BAL   R14,FINDKONS
KONSENQ  ST    R0,REG0               UCM ID SPEICHERN
         MVC   ENQEX,ENQLIST         ENQ-MACRO LIST-FORM UEBERTRAGEN
         ENQ   MF=(E,ENQEX)          ENQ ON CONSOLE
LOOPWTO  EQU   *
         BAL   R14,FINDKLNR
         CLC   0(6,R6),HIGHVAL
         BE    ENDWTO
         MVC   MSG1B+14(6),0(R6)
         L     R0,REG0
         WTO   MF=(E,MSG1B)
         MVC   0(6,R6),HIGHVAL
         B     LOOPWTO
ENDWTO   EQU   *
         CLI   MSGSW,C'N'
         BE    LASTMSG
         CLI   MSGSW,C'B'     IS RELEASE MESSAGE REQUIRED ?
         BNE   MSGWTO         MUST BE 'Y'
         L     R0,REG0        PICK UP CONSOLE ID
         WTO   MF=(E,MSG4B)
         B     LASTMSG
MSGWTO   EQU   *
         L     R6,MSGADR
         LH    R7,4(R6)
         LA    R6,6(R6)
MSGLOOP  EQU   *
         MVC   MSG3B+35(50),0(R6)
         L     R0,REG0
         WTO   MF=(E,MSG3B)
         LA    R6,50(R6)
         BCT   R7,MSGLOOP
LASTMSG  EQU   *
         L     R0,REG0
         WTO   MF=(E,MSG2B)
         CLI   LEERB+2,X'80'
         BE    NOPRTR
         LA    R6,4
LPLEER   EQU   *
         L     R0,REG0
         WTO   MF=(E,LEERB)
         BCT   R6,LPLEER
NOPRTR   EQU   *
KONSDEQ  EQU   *
         MVC   DEQEX,DEQLIST         DEQ-MACRO LIST-FORM UEBERTRAGEN
         DEQ   MF=(E,DEQEX)          DEQ KONSOLE
SBERFREI EQU   *
         FREEMAIN R,LV=5006,A=MSGADR
         L     R12,ANZSERNR          2. BANDNUMMERN-SPEICHER
         USING SERNRBER,R12            ADDRESSIEREN
SBERFRLP LA    R1,0(,R12)            BITS 0-7 LOESCHEN
         LTR   R1,R1                 ADRESSE = 0?
         BZ    UJVENDE               BR FALLS JA
         L     R12,SPANXTSP          FALLS NEIN, NAECHSTE ADRESSE
         LA    R0,SERNRLGE           ANZAHL BYTES FUER FREEMAIN
         FREEMAIN R,LV=(0),A=(1)     HAUPTSPEICHER FREIGEBEN
         B     SBERFRLP              UND WEITER
         DROP  R12
FINDKONS EQU   *
         L     R8,16          CVT ADRESSE LADEN
         L     R8,X'64'(R8)   UCM BASE ADRESSE LADEN
         LM    R6,R8,X'48'(R8) UCM ENTRY ADRESSEN LADEN
KONSLP1  EQU   *
         L     R2,X'0C'(R6)   UCM ADRESSE LADEN
         L     R0,=X'FFFF0000'
         NR    R0,R2
         BNZ   KONSLP2
         CLI   2(R2),X'FF'    STANDARD UCB?
         BNE   KONSLP2
         TM    3(R2),X'80'    DEVICE ONLINE?
         BZ    KONSLP2
         TM    X'19'(R6),X'10' ACTIVE CONSOLE?
         BZ    KONSLP2
         TM    X'18'(R6),X'70'
         BO    KONSLP2
         CLC   18(2,R2),=X'100A'
         BNE   KONSLP2
         SR    R0,R0
         IC    R0,X'1A'(R6)
         MVI   LEERB+2,X'40'
         MVI   MSG1B+2,X'40'
         MVI   MSG2B+2,X'40'
         MVI   MSG3B+2,X'40'
         BR    R14
KONSLP2  EQU   *
         AR    R6,R7
         CR    R6,R8          LAST UCM ENTRY
         BNH   KONSLP1
         MVI   LEERB+2,X'80'
         MVI   MSG1B+2,X'80'
         MVI   MSG2B+2,X'80'
         MVI   MSG3B+2,X'80'
         SR    R0,R0
         BR    R14
FINDKLNR EQU   *
         LA    R2,SERNR10            BAND-NUMMERN SPEICHER
         USING SERNRBER,R2             ADRESSIEREN
         LA    R6,HIGHVAL            R15 AUF 'NICHTS GEFUNDEN' SETZEN
         SR    R0,R0                 R0 LOESCHEN FUER IC
FINDKNR1 LA    R1,SPSER#             ADRESSE 1. BAND-NUMMER
         IC    R0,SP#SERNR           ANZAHL NUMMERN IN DIESEM SPEICHER
         LTR   R0,R0
         BZR   R14
FINDKNR2 CLC   0(6,R1),0(R6)         DIE KLEINSTE
         BNL   *+6                     BANDNUMMER
         LR    R6,R1                     BESTIMMEN
         LA    R1,6(,R1)             ADRESSE NAECHSTE NUMMER
         BCT   R0,FINDKNR2           UND WEITERSUCHEN
         CLC   SPAL3NXT,NULL         LETZTER BANDNUMMERN SPEICHER?
         BCR   EQUAL,R14             BR FALLS JA
         L     R2,SPANXTSP           FALLS NEIN, ADRESSE NAECHSTER SP.
         B     FINDKNR1              UND WEITERSUCHEN
*
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  BEREITSTELLEN DES GESAMTEN NAECHSTEN PARAMETERS                    *
*                                                                     *
*      VOR DEM AUFRUF (BAL   R14,SUCHOPD):                            *
*          R1 = ADR DES LETZTEN ABGEARBEITETEN ZEICHENS               *
*      NACH DEM AUFRUF:                                               *
*          IM BEREICH 'OPERAND' STEHT DER VOLLSTAENDIGE (}) PARAMETER *
*          OHNE DAS ABSCHLIESSENDE TRENNZEICHEN (',' ODER ' '),       *
*          'LOPERAND' ENTHAELT DESSEN LAENGE.                         *
*          ZUR NAEHEREN AUFSCHLUESSELUNG DIENEN DIE VEKTOREN 'U1PARM' *
*          UND 'U2PARM'. DIESE ENTHALTEN IN                           *
*              BYTE 0: ANZAHL ZUGEH. U2-PARAMETER (NICHT BEN. BEI U2P)*
*                   1: START-INDEX   U2-PARAMETER (NICHT BEN. BEI U2P)*
*                   2: LAENGE U1-PARAMETER        (BZW. U2-PARAMETER) *
*                   3: START-ADR U1-PARAMETER     (BZW. U2-PARAMETER) *
*          'ANZU1P' BZW. 'ANZU2P' GEBEN DIE ANZAHL DER U1- BZW. U2-   *
*          -PARAMETER AN.                                             *
*          BEISPIEL:                                                  *
*            'OPERAND': VOL=(PRIVATE,RETAIN,SER=(12345X,67890Y))      *
*            'LOPERAND': H'40'                                        *
*            'ANZU1P': H'3', 'ANZU2P': H'2'                           *
*            'U1PARM': X'00000705', X'0000060D', X'02011314'          *
*            'U2PARM': X'00000619', X'00000620'                       *
*                                                                     *
***********************************************************************
SUCHOPD  EQU   *
         CLI   1(R1),C' '     NOCH ETWAS ZU UNTERSUCHEN?
         BE    AUSGANG        NEIN - NAECHSTE KARTE
         MVI   SYMBSW,0       LOESCHEN SCHALTER
         LA    R0,1(,R1)
         ST    R0,SAVENOPD    START-ADR NEUER PARAMETER
         LA    R15,SP71       ANZAHL REST-BYTES IN DER JCL-KARTE
         SR    R15,R0           BESTIMMEN
         STH   R15,ANZRESTB     UND SPEICHERN
         CLC   ANZAPO,NULL
         BNE   TABAUFB2       ANZAHL APOSTROPH ^= 0
TABAUFB1 MVI   HEX40,04       BLANK
         MVI   HEX6B,08       KOMMA
         MVI   HEX7D,12       APOSTROPH
         MVI   HEX4D,16       KLAMMER-AUF
         MVI   HEX7E,20       '='-ZEICHEN
         MVI   HEX5D,24       KLAMMER-ZU
         MVI   HEX50,28       AMPERSAND
         B     TRTVORB
TABAUFB2 MVI   HEX40,00       BLANK
         MVI   HEX6B,00       KOMMA
         MVI   HEX7D,12       APOSTROPH
         MVI   HEX4D,00       KLAMMER-AUF
         MVI   HEX7E,00       '='-ZEICHEN
         MVI   HEX5D,00       KLAMMER-ZU
         MVI   HEX50,28       AMPERSAND
*                                                                     *
TRTVORB  LA    R15,1(,R1)
         ST    R15,SAVEZOPD
         LH    R7,ANZGLZ
         CH    R7,DREI
         BNH   *+8
         LH    R7,DREI
         SLL   R7,1
         LH    R9,ANZRESTB         ANZAHL NOCH ZU UNTERSUCHENDER BYTES
         LA    R1,2(R9,R1)         R1 SETZEN, FALLS CC TRT = 0
         LTR   R9,R9                 < 0?
         BM    FALLZERO            BR FALLS JA
         LR    R8,R1               R8 = R1
         SR    R2,R2               LOESCHEN R2 FUER TRT
         EX    R9,TRT              EXECUTE JCL CARD SCAN
         BZ    TRTCC0              CC TRT = 0: R8 IST SCHON GESETZT
         CLI   0(R1),C'&&'         UNTERBRECHUNG DURCH '&'?
         BE    TRTCCN0             BR FALLS JA
         MVC   LASTCHAR,LASTCHAR+1 VERSCHIEBEN
         MVC   LASTCHAR+1,0(R1)      UND SPEICHERN
TRTCCN0  LA    R8,1(,R1)           CC TRT ^= 0: R8 NEU LADEN
TRTCC0   SR    R8,R15              ANZAHL UNTERSUCHTER BYTES
         SR    R9,R8               ANZAHL REST-BYTES BESTIMMEN
         STH   R9,ANZRESTB           UND SPEICHERN
         B     ABSPRUNG(R2)        VERZWEIGEN ZUR BEARBEITUNGS-ROUTINE
*                                                                     *
TRT      TRT   0(0,R15),SUCHTAB    NAECHSTES UNTERBRECHUNGS-BYTE SUCHEN
*                                                                     *
ABSPRUNG EQU   *
         B     ALLZERO
         B     BLANK
         B     KOMMA
         B     APOSTRPH
         B     KLAUF
         B     GLEICHZ
         B     KLZU
         B     AMPSAND
*                                                                     *
ALLZERO  EQU   *              KEIN TRENNZEICHEN GEFUNDEN
         CLI   SYMBSW,C'S'         SCAN DURCH SYMB.PARM?
         BE    ALLZEROS            BR FALLS JA
         BAL   R15,PARMEND
FALLZERO EQU   *
         CLI   SYMBSW,C'S'         SCAN DURCH SYMB.PARM?
         BE    ALLZEROS            BR FALLS JA
         BAL   R15,AUFLGLZ
         BAL   R15,MOVEOPD
         CLI   SP72,C' '
         BNE   AUSGANG
         CLC   ANZAPO,NULL
         BNE   AUSGANG
         CLC   ANZKL,NULL
         BNE   AUSGANG
         BR    R14
ALLZEROS BAL   R15,MOVEOPD         BYTES UEBERTRAGEN
         B     TRTVORB             SCAN JCL-KARTE WIEDERAUFNEHMEN
*                                                                     *
BLANK    EQU   *              BLANK ALS TRENNZEICHEN
         BAL   R15,PARMEND
         BAL   R15,AUFLGLZ
         BAL   R15,MOVEOPD
         CLC   ANZKL,NULL
         BNE   AUSGANG
         BR    R14
*                                                                     *
KOMMA    EQU   *
         BAL   R15,PARMEND
         BAL   R15,AUFLGLZ
         CLC   ANZKL,NULL
         BE    KOMMAAT
         CLI   1(R1),C' '
         BE    KOMMAIT
         LA    R8,SP71
         CR    R8,R1
         BE    KOMMAIT
         BAL   R15,EPARMANF
         B     TABAUFB1
KOMMAAT  BAL   R15,MOVEOPD
         BR    R14
KOMMAIT  BAL   R15,PARMANF
         LA    R1,1(,R1)
         BAL   R15,MOVEOPD
         B     AUSGANG
*                                                                     *
APOSTRPH EQU   *
         CLC   ANZAPO,NULL
         BNE   APOSTR1
         MVC   ANZAPO,EINS
         BAL   R15,FPARMANF
         B     TABAUFB2
APOSTR1  CLI   1(R1),C''''
         BE    APOSTR2
         MVC   ANZAPO,NULL
         BAL   R15,FPARMEND
         B     TABAUFB1
APOSTR2  LA    R1,1(,R1)
         B     TRTVORB
*                                                                     *
KLAUF    EQU   *
         C     R1,SAVEZOPD
         BNE   KLAUFGLZ
         CLI   LASTCHAR,C'='
         BE    KLAUFWTR
KLAUFGLZ CH    R7,SECHS
         BNL   *+8
         AH    R7,ZWEI
         LH    R6,ANZGLZ
         LA    R6,1(,R6)
         STH   R6,ANZGLZ
KLAUFWTR BAL   R15,PARMANF
         LH    R6,ANZ0KL(R7)
         LA    R6,1(,R6)
         STH   R6,ANZ0KL(R7)
         B     TRTVORB
*                                                                     *
GLEICHZ  EQU   *
         LH    R6,ANZGLZ
         LTR   R6,R6          ANZAHL = 0?
         BNZ   *+8            BR FALLS NEIN
         STC   R8,LBYTE       L1 SPEICHERN
         LA    R6,1(,R6)
         STH   R6,ANZGLZ
         BAL   R15,PARMANF
         B     TRTVORB
*                                                                     *
KLZU     EQU   *
         BAL   R15,PARMEND
         BAL   R15,AUFLGLZ
         LH    R6,ANZ0KL(R7)
         SH    R6,EINS
         BM    AUSGANG
         STH   R6,ANZ0KL(R7)
         B     TRTVORB
*                                                                     *
AMPSAND  EQU   *                   AMPERSAND
         CLI   1(R1),C'&&'         ZWEI AMPERSANDS?
         BNE   AMPSAND1            NEIN - SYMB.PARAMETER
         LA    R1,1(,R1)           JA - IGNORIEREN
         B     TRTVORB             UND WEITER
AMPSAND1 ST    R1,SAVER1L          R1 SICHERN
         LA    R15,1(,R1)          START-ADRESSE FUER TRT
         LH    R9,ANZRESTB         ANZAHL BYTES FUER TRT
         SR    R2,R2               LOESCHEN R2 FUER TRT
         EX    R9,TRTSYMB          NAECHSTES NICHT-ALPHAM. ZEICHEN
         LR    R7,R1               ADRESSE DIESES ZEICHEN
         SR    R7,R15                - START ERGIBT LAENGE
         SR    R9,R7               ANZAHL REST-BYTES
         STH   R9,ANZRESTB           FESTHALTEN
         LA    R7,1(,R7)           LAENGE UM 1 (WEGEN '=') ERHOEHEN
         STC   R7,ALZWPARM         LAENGE SPEICHERN
         CLI   ALZWPARM,8          LAENGE > 8?
         BH    TRTVORB             BR FALLS JA
         CLI   ALZWPARM,0          LAENGE > 0?
         BNH   TRTVORB             BR FALLS NEIN
         EX    R7,MVCZWPRM         UEBERTRAGEN SYMB.PARM
         CLI   0(R1),C'.'          SYMB.PARM DURCH '.' BEENDET?
         BE    *+6                 BR FALLS JA
         BCTR  R1,0                FALLS NEIN, EIN BYTE ZURUECK
*
         LA    R6,SPZWPARM         ADRESSE DES SUCHBEGRIFFS
         LA    R15,SPZWPARM(R7)    ADRESSE DES BYTES FUER '='
         MVI   0(R15),C'='         '=' ANHAENGEN
         LA    R2,SPSYPARM         ADRESSE SPEICHER SYMB.PARM
         ST    R14,SAVER14         SICHERN R14 FUER UP-AUFRUF
         BAL   R14,FINDPARM        FESTSTELLEN, OB SYMB.PARM EXISTIERT
         L     R14,SAVER14         RUECKSPEICHERN R14
         BZ    TRTVORB             ZURUECK - SYMB.PARM NICHT GEFUNDEN
* ERSETZEN SYMBOLISCHEN DURCH AKTUELLEN PARAMETER
         ST    R15,SAVEZOPD        LAENGE + ADRESSE SPEICHERN
         ST    R1,SAVER1Z          R1 SICHERN
         L     R1,SAVER1L          R1 LADEN
         BAL   R15,MOVEOPD         INHALT BIS '&'-ZEICHEN SPEICHERN
         MVI   SYMBSW,C'S'         SYMB-SCHALTER SETZEN
         MVC   SVARESTB,ANZRESTB   ANZAHL REST-BYTES SICHERN
         SR    R9,R9               R9 LOESCHEN FUER IC
         IC    R9,SAVEZOPD         R9 = ANZAHL BYTES SYMB.PARM
         BCTR  R9,0                R9 = R9 - 1 FUER EX
         L     R1,SAVEZOPD         ADRESSE SYMB.PARM LADEN
         LA    R1,0(,R1)           BITS 0-7 = 0
         BCTR  R1,0                ADRESSE DES VORHERGEHENDEN BYTES
         CLI   1(R1),C''''         ERSTES ZEICHEN = HOCHKOMMA?
         BNE   AMPSAND2            BR FALLS NEIN
         SH    R9,ZWEI             ANZAHL BYTES UM ZWEI VERRINGERN
         LA    R1,1(,R1)           ADRESSE UM 1 ERHOEHEN
AMPSAND2 STH   R9,ANZRESTB         ANZAHL REST-BYTES SPEICHERN
         LA    R0,1(,R1)           ADRESSE 1. BYTE
         ST    R0,SAVENOPD           FESTHALTEN
         B     TRTVORB             SCAN IM SYMB.PARM FORTFUEHREN
*
MVCZWPRM MVC   ZWPARM(0),0(R15)    EX-MARKE SYMB.PARM UEBERTRAGEN
TRTSYMB  TRT   0(0,R15),ALPHATAB   EX-MARKE SYMB.PARM SCANNEN
*
PARMANF  EQU   *                   PARAMETER-ANFANG
         CLI   1(R1),C'('
         BCR   EQUAL,R15           WIRD NOCH AUSGEWERTET
EPARMANF CLI   1(R1),C''''
         BCR   EQUAL,R15           WIRD NOCH AUSGEWERTET
FPARMANF EQU   *                   FORCE PARAMETER-ANFANG
         LA    R6,SPRANF-4
         LA    R0,1(,R1)
         B     PARMALLG
SPRANF   EQU   *
         B     U1PANF
         B     U2PANF
U1PANF   EQU   *
         ST    R0,U1PARM+0(R8)     ANFANGSADRESSE DIESES U1-PARAMETERS
         BR    R15
U2PANF   EQU   *
         ST    R0,U2PARM+0(R9)     ANFANGSADRESSE DIESES U2-PARAMETERS
         BR    R15
*                                                                     *
PARMEND  EQU   *                   PARAMETER-ENDE
         C     R1,SAVEZOPD
         BNE   FPARMEND            NOCH NICHT AUSGEWERTET
         CLI   LASTCHAR,C''''
         BCR   EQUAL,R15           SCHON AUSGEWERTET
         CLI   LASTCHAR,C')'
         BCR   EQUAL,R15           SCHON AUSGEWERTET
FPARMEND EQU   *                   FORCE PARAMETER-ENDE
         LA    R6,SPREND-4
         LA    R0,0(,R1)
         B     PARMALLG
SPREND   EQU   *
         B     U1PEND
         B     U2PEND
U1PEND   EQU   *
         SH    R0,U1PARM+2(R8)
         STC   R0,U1PARM+2(R8)     LAENGE DIESES U1-PARAMETERS
         LH    R0,ANZU1P
         AH    R0,EINS
         STH   R0,ANZU1P           ANZAHL U1-PARAMETER ERHOEHEN
         BR    R15
U2PEND   EQU   *
         SH    R0,U2PARM+2(R9)
         STC   R0,U2PARM+2(R9)     LAENGE DIESES U2-PARAMETERS
         LH    R6,ANZU2P
         AH    R6,EINS
         STH   R6,ANZU2P           ANZAHL U2-PARAMETER ERHOEHEN
         IC    R0,U1PARM+0(R8)
         AH    R0,EINS
         STC   R0,U1PARM+0(R8)     ANZAHL ZUGEH. U2-PARAMETER ERHOEHEN
         IC    R0,U1PARM+1(R8)
         LTR   R0,R0
         BCR   NOTZERO,R15
         STC   R6,U1PARM+1(R8)     INDEX ZUM 1. ZUGEH. U2-PARAMETER
         BR    R15
*                                                                     *
PARMALLG EQU   *
         LH    R8,ANZGLZ
         CH    R8,EINS             ANZAHL '='-ZEICHEN < 1?
         BCR   LOW,R15             JA - RETURN
         CH    R8,ZWEI             ANZAHL'='-ZEICHEN > 2?
         BCR   HIGH,R15            JA - RETURN
         CLC   ANZ0KL,NULL         '(' VOR DEM 1. '='?
         BCR   NOTEQUAL,R15        JA - RETURN
         SLL   R8,2
         AR    R6,R8
         CLI   ANZU1P+1,MAXU1P     ANZAHL U1-PARAMETER = MAX?
         BCR   EQUAL,R15           JA - RETURN
         LH    R8,ANZU1P
         CLI   ANZU2P+1,MAXU2P     ANZAHL U2-PARAMETER = MAX?
         BCR   EQUAL,R15           JA - RETURN
         LH    R9,ANZU2P
         SLDL  R8,2                INDICES ZU DEN LFD. UX-PARAMETERN
         S     R0,SAVENOPD
         AH    R0,LOPERAND         END- BZW. ANF-ADRESSE
         BR    R6
*                                                                     *
AUFLGLZ  EQU   *                   ABARBEITEN '='-ZEICHEN
         SR    R0,R0
         CH    R0,ANZ0KL(R7)       ANZAHL KLAMMERN = 0?
         BCR   NOTEQUAL,R15        NEIN - NOCH NICHT ABGEARBEITET
         LH    R0,ANZGLZ
         SH    R0,EINS
         STH   R0,ANZGLZ
         LR    R7,R0
         CH    R7,DREI
         BNH   *+8
         LH    R7,DREI
         SLL   R7,1
         CH    R0,EINS
         BCR   NOTEQUAL,R15
         B     FPARMEND
*                                                                     *
MOVEOPD  EQU   *
         L     R0,SAVENOPD
         LH    R7,LOPERAND
         LTR   R7,R7
         BZ    MOVEOPD1
         SR    R0,R0
MOVEOPD1 ST    R0,SAVEAOPD
         LA    R6,OPERAND(R7)
         LR    R9,R1
         L     R8,SAVENOPD
         SR    R9,R8
         BNP   MOVESTH
         AR    R7,R9
         BCTR  R9,0
         LA    R0,L'OPERAND
         CR    R7,R0
         BNH   MOVEEX
         LR    R9,R0
         LH    R7,LOPERAND
         SR    R9,R7
         LR    R7,R0
         BNP   MOVESTH
MOVEEX   EX    R9,MVCOPD
MOVESTH  STH   R7,LOPERAND
         CLI   SYMBSW,C'S'         SCAN IM SYMB.PARM?
         BCR   NOTEQUAL,R15        BR FALLS NEIN
         MVI   SYMBSW,0            LOESCHEN SYMB-SW
         MVC   ANZRESTB,SVARESTB   ANZAHL REST-BYTES WIEDERHERSTELLEN
         L     R1,SAVER1Z          R1 LADEN
         LA    R0,1(,R1)           START-ADRESSE
         ST    R0,SAVENOPD           WIEDERHERSTELLEN
         BR    R15
*                                                                     *
MVCOPD   MVC   0(0,R6),0(R8)
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  KONSTANTEN                                                         *
*                                                                     *
***********************************************************************
*                                                                     *
NULL     DC    D'0'
HIGHVAL  DC    X'FFFFFFFFFFFFFFFF'
BLANKS   DC    CL16' '
*                                                                     *
LEERZEIL WTO   ' ',MCSFLAG=REG0,MF=L,ROUTCDE=5,DESC=2
MSG1     WTO   'UJV001A F 123456, ########',MF=L,MCSFLAG=REG0,         *
               ROUTCDE=5,DESC=2
MSG2     WTO   'UJV002I JOB ######## FINISHED SETUP  -  SBNR = XXX   ***
               * IMS ***',                                             *
               MF=L,MCSFLAG=REG0,ROUTCDE=5
MSG3     WTO  'UJV003I MSG FROM JOB ########:                          *
                                          ',                           *
               MF=L,MCSFLAG=REG0,ROUTCDE=5
MSG4     WTO  'UJV004I PLEASE RELEASE JOB ######## IMMEDIATELY',       *
               MF=L,MCSFLAG=REG0,ROUTCDE=5
*
CAMLIST  CAMLST NAME,0,,0         OS/VS CAMLIST - LOCATE BY NAME
*
ENQLIST  ENQ   (UJVQNAME,UJVRNAME,E,L'UJVRNAME,STEP),MF=L
DEQLIST  DEQ   (UJVQNAME,UJVRNAME,L'UJVRNAME,STEP),MF=L
*
UJVQNAME DC    CL8'IEFUJV'         QNAME FUER ENQ
UJVRNAME DC    C'BANDNUMMERN'      RNAME FUER ENQ
*
KSTMT    DS    0F        TABELLE DER BEHANDELTEN JCL-STATEMENTS
         DC    AL1(3),C'JOB    ',A(JOBSTMT),A(CJOBSTMT)
         DC    AL1(4),C'EXEC   ',A(EXCSTMT),A(CEXCSTMT)
         DC    AL1(2),C'DD     ',A(DDSTMT),A(CDDSTMT)
         DC    AL1(4),C'PROC   ',A(PRCSTMT),A(CPRCSTMT)
*
ANZPRFST DS   0F
         DC    AL4((JOBSTMTE-JOBSTMTA)/12)
         DC    AL4((EXCSTMTE-EXCSTMTA)/12)
         DC    AL4((DDSTMTE-DDSTMTA)/12)
         DC    AL4(0)
*
VALDCLAS DC    C'BCDEHILN5KUXYFG12SR3'
CLASSLL  EQU   *-VALDCLAS
         DS    0F
*
KDISP    DC   AL1(5),C'DISP=  '
KLABEL   DC    AL1(6),CL7'LABEL='
KUNIT    DC   AL1(5),C'UNIT=  '
KDSN     DC   AL1(4),C'DSN=   '
KVOL     DC   AL1(4),C'VOL=   '
KDSNAME  DC   AL1(7),C'DSNAME='
KVOLUME  DC   AL1(7),C'VOLUME='
*
JCLTYPET DS   0CL16                TR-TABELLE ZUM UMWANDELN JCL-TYPE
         DC    XL1'FF'             00: NULL-STATEMENT (FEHLER)
         DC    XL1'00'             01 - JOB
         DC    XL1'04'             02 - EXEC
         DC    XL1'FF'             03: FEHLER
         DC    XL1'08'             04 - DD
         DC   3XL1'FF'             05 - 07: FEHLER
         DC    XL1'0C'             08 - PROC
         DC   7XL1'FF'             09 - 15: FEHLER
*
W1SYPARM DC   AL2(4),AL2(L'S1SYPARM+4)  AKT + MAX LAENGE SPEICHER
W1DDCARD DC   AL2(4),AL2(L'S1DDCARD+4)  AKT + MAX LAENGE SPEICHER
*                                                                     *
ZERO     EQU   8
NOTZERO  EQU   7
EQUAL    EQU   8
NOTEQUAL EQU   7
HIGH     EQU   2
NOTHIGH  EQU   13
LOW      EQU   4
NOTLOW   EQU   11
NOTLCHAR EQU   13
MIXED    EQU   4
NOTMIXED EQU   11
ONES     EQU   1
NOTONES  EQU   14
*                                                                     *
         LTORG
*
ALPHATAB DS   0CL256               TRT-TABELLE FUER ALPHAM. ZEICHEN
         DC  64XL1'FF'
         DC    XL1'04'             BLANK
         DC  10XL1'FF'
         DC    XL1'08'             .
         DC    XL1'FF'
         DC    XL1'0C'             (
         DC    XL1'10'             +
         DC    XL1'FF'
         DC    XL1'14'             &
         DC  10XL1'FF'
         DC    XL1'00'                 $
         DC    XL1'18'             *
         DC    XL1'1C'             )
         DC   2XL1'FF'
         DC    XL1'20'             -
         DC    XL1'24'             /
         DC   9XL1'FF'
         DC    XL1'28'             ,
         DC  15XL1'FF'
         DC   2XL1'00'                 #@
         DC    XL1'2C'             '
         DC    XL1'30'             =
         DC  66XL1'FF'
         DC   9XL1'00'                 ABCDEFGHI
         DC   7XL1'FF'
         DC   9XL1'00'                 JKLMNOPQR
         DC   8XL1'FF'
         DC   8XL1'00'                 STUVWXYZ
         DC   6XL1'FF'
         DC  10XL1'00'                 0123456789
         DC   6XL1'FF'
*
***********************************************************************
         EJECT
VOLTAB   CSECT
         DC    XL6'FFFFFFFFFFFF'
         EJECT
***********************************************************************
*                                                                     *
*  COMMON EXIT PARAMETER AREA                                         *
*                                                                     *
***********************************************************************
COMPARMA DSECT
CJOBNAME DS    CL8                 JOBNAME
         DS    CL12
CIDFELD  DS    CL8                 BENUTZER: IDENTIFIKATIONS-FELD
CSTEPNR  DS    CL1                 STEP-NUMMER
CSMFOPTS DS    CL1                 SMF-OPTIONS
FOREGRND EQU   1                   FOREGROUND JOB BIT
         DS    CL2
ENDINDEX DS    0CL4                BENUTZER: KOMMUNIKATIONS-FELD
CADRSBPL DS    CL4                 ADRESSE ARBBEITS-BEREICH
*  DIE FOLGENDEN FELDER WERDEN NUR VERMUTET:
JCTUJVP  DS    A                   ADDRESS OF USER EXIT ROUTINE
JCTRDROF DS    F                   TIME OFF INPUT PROCESSOR
JCTRDTOF DS    F                   DATE OFF INPUT PROCESSOR
JCTJOBIN DS    F                   JOB SYSIN COUNT
JCTRDR   DS    XL2                 READER DEVICE TYPE AND CLASS
JCTJMOPT DS    BL1                 SMF OPTIONS
         DS    X                   RESERVED
*
***********************************************************************
         SPACE 4
***********************************************************************
*                                                                     *
*  JCL-KARTE                                                          *
*                                                                     *
***********************************************************************
JCLKARTE DSECT
SP1#2    DS   0CL2                 SPALTE 1-2
SP1      DS    CL1                 SPALTE 1
SP2      DS    CL1                 SPALTE 2
SP3      DS    CL1                 SPALTE 3
         DS    CL12                SPALTE 4-15
SP16     DS    CL1                 SPALTE 16
         DS    CL54                SPALTE 17-70
SP71     DS    CL1                 SPALTE 71
SP72     DS    CL1                 SPALTE 72
SP73#80  DS    CL8                 SPALTE 73-80
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  ARBEITSBEREICH FUER LOCATE                                         *
*                                                                     *
***********************************************************************
LOCBER   DSECT
LOCAREA  DS   0CL265               WORKAREA LOCATE
VOLLIST  DS   0CL256               VOLUME LIST
VOLCOUNT DS    H                   COUNT FIELD
VOLDESC1 DS   0CL12                1. VOLUME DESCRIPTION
VOLDEVTP DS    CL4                   DEVICE CODE
VOLSERNR DS    CL6                   VOLUME SERIAL NUMBER
VOLSEQNR DS    CL2                   DATA SEQUENCE NUMBER
VOLDESCN DS  19CL12                2. - 19. VOLUME DESCRIPTION
         DS    CL14
         DS    CL9
***********************************************************************
         SPACE 4
***********************************************************************
*                                                                     *
*  SPEICHER FUER 10 BAND-NUMMERN                                      *
*                                                                     *
***********************************************************************
SERNRBER DSECT
SPSER#   DS  10CL6                 1. - 10. BAND-NUMMER
SPANXTSP DS   0A                   ADRESSE DES NAECHSTEN SPEICHERS
SP#SERNR DS    AL1                 ANZAHL BAND-NUMMERN DIESES SPEICHERS
SPAL3NXT DS    AL3                 3-STELLIGE ADRESSE
SERNRLGE EQU   *-SERNRBER          LAENGE DIESES SPEICHERS
***********************************************************************
         SPACE 4
         EJECT
***********************************************************************
*                                                                     *
*  ARBEITS-BEREICH                                                    *
*                                                                     *
***********************************************************************
ARBBER   DSECT
SAVEAREA DS   0CL72 SAVEAREA
SAVEADSN DS    F    SAVEAREA A(DSN)
SAVER13  DS    F    SAVEAREA R13
SAVEAVOL DS    F    SAVEAREA A(VOL)
SAVER14  DS    F    SAVEAREA R14
SAVER15  DS    F    SAVEAREA R15
SAVERX   DS  13F    SAVEAREA R0 - R12
*
DPPLWORT DS    D    DOPPELWORT (FUER CVB, CVD, ETC.)
         DS    F    RESERVE
SDSN     DS    F
SAVER1L  DS    F    SICHERUNGSWORT R1 BEI LOAD, DELETE, SYMB.PARM
SAVER1Z  DS    F    SICHERUNGSWORT R1 BEI SYMB.PARM
SAVER14A DS    F    SAVEAREA R14 BEI LOCATE
SAVEZOPD DS    F    SICHERUNGSWORT: START-ADRESSE DES LETZTEN 'TRT'
SAVENOPD DS    F    SICHERUNGSWORT: START-ADRESSE NEUER PARAMETER
SAVEAOPD DS    F    SICHERUNGSWORT: = 0, WENN PARAMETER IN DER VORIGEN
SAVEADDR DS   0CL8                 JCL-KARTE BEGANN; SONST S. SAVENOPD
U1PARM   DS  18F    BYTE 1: ANZ-U2, 2: NR-U2, 3: LAENGE, 4: START-ADR
MAXU1P   EQU   (*-U1PARM)/4      MAX-ANZAHL U1-PARAMETER
U2PARM   DS  80F    BYTE 1: RES.,   2: RES.,  3: LAENGE, 4. START-ADR
MAXU2P   EQU   (*-U2PARM)/4      MAX-ANZAHL U2-PARAMETER
*
CINDEX   DS    CL2               SPEICHER FUER FEHLER-BITS
*
ANZRESTB DS    H                 ANZAHL NOCH ZU UNTERSUCHENDER BYTES
SVARESTB DS    H                 ZW-SPEICHER FUER DIESE ANZAHL
LASTCHAR DS   2CL1               ZW-SPEICHER FUER ZULETZT GEF. ZEICHEN
HALBWORT DS    H                 ZW-SPEICHER FUER HALBWORT-WERTE
*
TRTPARAM DS   0CL19              TRT-PARAMETER: VON ANZKL BIS LBYTE
ANZKL    DS   0CL8               4 SPEICHER FUER ANZAHL KLAMMER-AUF
ANZ0KL   DS    H                     VOR  1. '='-ZEICHEN
ANZ1KL   DS    H                     NACH 1. '='-ZEICHEN
ANZ2KL   DS    H                     NACH 2. '='-ZEICHEN
ANZXKL   DS    H                     NACH 3. '='-ZEICHEN
ANZGLZ   DS    H                 ANZAHL '='-ZEICHEN
ANZAPO   DS    H                 ANZAHL APOSTROPH
ANZU1P   DS    H                 ANZAHL U1-PARAMETER
ANZU2P   DS    H                 ANZAHL U2-PARAMETER
LOPERAND DS    H                 LAENGE DES GESAMTEN PARAMETER
*
CATWTOWK DS   0CL265             CATALOG WORKAREA, WTO WORKAREA
LBYTE    DS    CL1               BYTE FUER L1 (LAENGE BIS EINSCHL. '=')
OPERAND  DS    CL255             SPEICHER FUER DEN GESAMTEN PARAMETER
         DS    CL12              9 BYTES FUER REST CATWK
*
DSNAME   DS    CL44              SPEICHER DSNAME FUER LOCATE
JOBCAT   DS    CL44              SPEICHER DSNAME FUER JOBCAT
STEPCAT  DS    CL44              SPEICHER DSNAME FUER STEPCAT
ENQEX    DS   0CL12              EX-AREA FUER ENQ
DEQEX    DS   0CL12              EX-AREA FUER DEQ
CAMEX    DS    CL16              EX-AREA FUER LOCATE
SUCHTAB  DS    CL256             TRT-TABELLE FUER JCL CARD SCAN
HEX40    EQU   SUCHTAB+X'40'       POSITION BLANK
HEX4D    EQU   SUCHTAB+X'4D'       POSITION '('
HEX50    EQU   SUCHTAB+X'50'       POSITION '&'
HEX5D    EQU   SUCHTAB+X'5D'       POSITION ')'
HEX6B    EQU   SUCHTAB+X'6B'       POSITION ','
HEX7D    EQU   SUCHTAB+X'7D'       POSITION '''
HEX7E    EQU   SUCHTAB+X'7E'       POSITION '='
         DS    0F
MSG1B    DS    CL80
MSG2B    DS    CL80
MSG3B    DS    CL100
MSG4B    DS    CL80
LEERB    DS    CL80
*
VOLSW    DS    CL1
PGM2     DS    CL2
REG0     DS   0F
PNR      DS    F
AKZ      DS    CL5
SPOOLSW  DS    CL1
EXECSW   DS    CL1
SYMBSW   DS    CL1
ALPSTPNM DS    AL1
SPTYPRUN DS    CL1
SPCLASS  DS    CL1
RJEPWD   DS    CL8
SPMSGCLS DS    CL1
UNITSW   DS    CL1
DDWKSW   DS    CL1
DDCCSW   DS    CL1
SERCOUNT DS    H
FORMNAME DS    CL4
OUTCLASS DS    CL1
SYSPRNR  DS    CL1
*
STEPNAME DS    CL8            STEP-NAME
PSTPNAME DS    CL8            PROCEDURE-STEP-NAME
DDNAME   DS    CL8            DD-NAME
SPZWPARM DS   0CL18           ZW-SPEICHER FUER DIV. FUNKTIONEN
ALZWPARM DS    AL1            LAENGE
ZWPARM   DS    CL17           SPEICHER
*
         CNOP  2,4
LFDSERNR DS    CL6            LFD. VOLSER-NUMMER
SERNR10  DS  10CL6            SPEICHER FUER DIE ERSTEN 10 BAND-NUMMERN
ANZSERNR DS    AL1            ANZAHL (0-10) DER GESPEICHERTEN NUMMERN
ASERNR11 DS    AL3            ADRESSE SPEICHER FUER BAND-NUMMERN 11-20
*
SPDDCARD DS   0F              SPEICHER FUER DD-ANGABEN
LLDDCARD DS    H              AKTUELLE LAENGE DIESES SPEICHERS
MLDDCARD DS    H              MAXIMALE LAENGE DIESES SPEICHERS
S1DDCARD DS    CL1196         EIGENTLICHER SPEICHER
*
ZWSPSER# DS  80F              SPEICHER FUER OFFSET UND LAENGE DER
SVREFDSN DS    CL45
DISKSW   DS    C
DISPSW   DS    C
TIMESW   DS    C
GDGSW    DS    X
MSGSW    DS    C
MSGADR   DS    F
*                                 VORGEKOMMENEN SER-NUMMERN
SPSYPARM DS   0F              SPEICHER FUER SYMBOLISCHE PARAMETER
LLSYPARM DS    H              AKTUELLE LAENGE DIESES SPEICHERS
MLSYPARM DS    H              MAXIMALE LAENGE DIESES SPEICHERS
S1SYPARM DS    CL1196         EIGENTLICHER SPEICHER
*
LGARBBER EQU   *-DPPLWORT     LAENGE ARBEITSBEREICH
***********************************************************************
         SPACE 2
         END
./ ADD  NAME=IEFU83
IEFU83   CSECT
         REG
         SAVE  (14,12)
         LR    R12,R15
         USING IEFU83,R12
         L     R3,0(R1)      GET RECORD ADDRESS
         L     R7,16
         L     R7,X'C4'(R7)
         L     R8,X'80'(R7)
         LA    R8,0(R8)
         LTR   R8,R8
         BNZ   NOGETM
         GETMAIN R,LV=80,SP=245
         XC    0(80,R1),0(R1)
         ST    R1,X'80'(R7)
NOGETM   EQU   *
         USING SMFRCD30,R3
         USING SMF30PSS,R4
         CLI   SMF30RTY,30   IS IT TYPE 30?
         BNE   CHK40    NO, LOOK IF TYPE 40
         L     R4,SMF30SOF
         AR    R4,R3
         CLC   SMF30TYP,TYPE1       SUBTYPE = 1 ?
         BE    RETURN         YES, DON'T WRITE IT
         L     R2,SMF30IOF    OFFSET TO ID-SECTION
         AR    R2,R3
         USING SMF30ID,R2
         CLC   SMF30JBN,=CL8'INIT'
         BE    RETRN4   DON'T WRITE RECS. FOR INIT
         DROP  R2
         ICM   R2,7,SMF30EOF+1    ANY EXCP SECTION?
         BZ    RETURN
         ALR   R2,R3
         USING SMF30EXP,R2
         LH    R0,SMF30EON   NO OF EXCP SECTIONS
         LTR   R0,R0
         BZ    RETURN
         CLC   SMF30TYP,TYPE5   IS IT SUBTYPE 5?
         LR    R14,R0    SET NO OF SECTIONS
         BE    SRR0R14    IF TYPE 5 ---> DELETE SECTION
         SR    R14,R14    CLEAR WORK
         LR    R1,R2    SET RECORD POINTER
LWORK    EQU   *
         L     R15,SMF30BLK-SMF30EXP(R1)   GET EXCP COUNT
         LTR   R15,R15   ANY?
         BP    YESEXCP
         CLI   SMF30DEV-SMF30EXP(R1),X'80'    TAPE??
         BE    YESEXCP
         AH    R1,SMF30ELN   NEXT ELEMENT
         LA    R14,1(R14)   ONE TO COUNTER
SUBR0    EQU   *
         BCT   R0,LWORK
         LH    R0,SMF30EON
SRR0R14  EQU   *
         SR    R0,R14    MOVED ELEMENTS
         STH   R0,SMF30EON    STORE ACTIVE ELEMENTS
         MH    R14,SMF30ELN   LENGTH OF NOT MOVED
         LH    R0,SMF30LEN     RECORD LENGTH
         SR    R0,R14     REMAINING LENGTH
         STH   R0,SMF30LEN     INTO RECORD
         B     RETURN
YESEXCP  EQU   *
         CR    R1,R2     SAME AREA ADDR.?
         BE    LEAVE    YES, DON'T MOVE IT
         LH    R15,SMF30ELN   ELEMENT LENGTH
         BCTR  R15,R0
         EX    R15,MOVEEXCP   MOVE SECTION
LEAVE    EQU   *
         AH    R1,SMF30ELN
         AH    R2,SMF30ELN
         B     SUBR0
MOVEEXCP MVC   SMF30EXP(0),0(R1)
         DROP  R2
RETRN4   EQU   *
         LM    R14,R12,12(R13)
         LA    R15,4
         BR    R14
RETURN   EQU   *
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
CHK40    EQU   *
         DROP  R3
         DROP  R4
         USING SMFREC40,R3
         CLI   TDDRCDTY,40
         BNE   RETURN
         LH    R5,TDDVAR
         SH    R5,=H'2'
         SRL   R5,3
         LTR   R5,R5
         BNP   RETRN4
         LR    R6,R5
         SR    R14,R14
         LA    R1,TDDEXCP
         LR    R2,R1
NXTEXCP  EQU   *
         CLC   4(4,R1),=XL4'00'
         BNE   T40EXCP
         LA    R14,1(R14)
         LA    R1,8(R1)
T40SUB   EQU   *
         BCT   R5,NXTEXCP
         CR    R14,R6
         BE    RETRN4
         SLL   R14,3
         LH    R10,TDDVAR
         SR    R10,R14
         STH   R10,TDDVAR
         LH    R10,TDDRLEN
         SR    R10,R14
         STH   R10,TDDRLEN
         B     RETURN
T40EXCP  EQU   *
         CR    R1,R2
         BE    T40LV
         MVC   0(8,R2),0(R1)
T40LV    EQU   *
         LA    R1,8(R1)
         LA    R2,8(R2)
         B     T40SUB
         EJECT
TYPE4    DC    H'4'
TYPE1    DC    H'1'
TYPE5    DC    H'5'
SMFRCD30 DSECT
         IFASMFR3 30
SMFREC40 DSECT
         IFASMFR4 40
         END
./ ADD  NAME=IEFU84
IEFU84   CSECT
         REG
         SAVE  (14,12)
         LR    R12,R15
         USING IEFU84,R12
         L     R3,0(R1)      GET RECORD ADDRESS
         USING SMFRCD30,R3
         USING SMF30PSS,R4
         CLI   SMF30RTY,30   IS IT TYPE 30?
         BNE   CHK40    NO, LOOK IF TYPE 40
         L     R4,SMF30SOF
         AR    R4,R3
         CLC   SMF30TYP,TYPE1       SUBTYPE = 1 ?
         BE    RETURN         YES, DON'T WRITE IT
         L     R2,SMF30IOF    OFFSET TO ID-SECTION
         AR    R2,R3
         USING SMF30ID,R2
         CLC   SMF30JBN,=CL8'INIT'
         BE    RETRN4   DON'T WRITE RECS. FOR INIT
         DROP  R2
         ICM   R2,7,SMF30EOF+1    ANY EXCP SECTION?
         BZ    RETURN
         ALR   R2,R3
         USING SMF30EXP,R2
         LH    R0,SMF30EON   NO OF EXCP SECTIONS
         LTR   R0,R0
         BZ    RETURN
         CLC   SMF30TYP,TYPE5   IS IT SUBTYPE 5?
         LR    R14,R0    SET NO OF SECTIONS
         BE    SRR0R14    IF TYPE 5 ---> DELETE SECTION
         SR    R14,R14    CLEAR WORK
         LR    R1,R2    SET RECORD POINTER
LWORK    EQU   *
         L     R15,SMF30BLK-SMF30EXP(R1)   GET EXCP COUNT
         LTR   R15,R15   ANY?
         BP    YESEXCP
         CLI   SMF30DEV-SMF30EXP(R1),X'80'    TAPE??
         BE    YESEXCP
         AH    R1,SMF30ELN   NEXT ELEMENT
         LA    R14,1(R14)   ONE TO COUNTER
SUBR0    EQU   *
         BCT   R0,LWORK
         LH    R0,SMF30EON
SRR0R14  EQU   *
         SR    R0,R14    MOVED ELEMENTS
         STH   R0,SMF30EON    STORE ACTIVE ELEMENTS
         MH    R14,SMF30ELN   LENGTH OF NOT MOVED
         LH    R0,SMF30LEN     RECORD LENGTH
         SR    R0,R14     REMAINING LENGTH
         STH   R0,SMF30LEN     INTO RECORD
         B     RETURN
YESEXCP  EQU   *
         CR    R1,R2     SAME AREA ADDR.?
         BE    LEAVE    YES, DON'T MOVE IT
         LH    R15,SMF30ELN   ELEMENT LENGTH
         BCTR  R15,R0
         EX    R15,MOVEEXCP   MOVE SECTION
LEAVE    EQU   *
         AH    R1,SMF30ELN
         AH    R2,SMF30ELN
         B     SUBR0
MOVEEXCP MVC   SMF30EXP(0),0(R1)
         DROP  R2
RETRN4   EQU   *
         LM    R14,R12,12(R13)
         LA    R15,4
         BR    R14
RETURN   EQU   *
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
CHK40    EQU   *
         DROP  R3
         DROP  R4
         USING SMFREC40,R3
         CLI   TDDRCDTY,40
         BNE   RETURN
         LH    R5,TDDVAR
         SH    R5,=H'2'
         SRL   R5,3
         LTR   R5,R5
         BNP   RETRN4
         LR    R6,R5
         SR    R14,R14
         LA    R1,TDDEXCP
         LR    R2,R1
NXTEXCP  EQU   *
         CLC   4(4,R1),=XL4'00'
         BNE   T40EXCP
         LA    R14,1(R14)
         LA    R1,8(R1)
T40SUB   EQU   *
         BCT   R5,NXTEXCP
         CR    R14,R6
         BE    RETRN4
         SLL   R14,3
         LH    R10,TDDVAR
         SR    R10,R14
         STH   R10,TDDVAR
         LH    R10,TDDRLEN
         SR    R10,R14
         STH   R10,TDDRLEN
         B     RETURN
T40EXCP  EQU   *
         CR    R1,R2
         BE    T40LV
         MVC   0(8,R2),0(R1)
T40LV    EQU   *
         LA    R1,8(R1)
         LA    R2,8(R2)
         B     T40SUB
         EJECT
TYPE4    DC    H'4'
TYPE1    DC    H'1'
TYPE5    DC    H'5'
SMFRCD30 DSECT
         IFASMFR3 30
SMFREC40 DSECT
         IFASMFR4 40
         END
./ ADD  NAME=IF
         MACRO
&LABEL   IF    &B
         GBLA  &QIFPSUB
         GBLA  &QIFLSUB
         GBLA  &QIFGSUB
         GBLA  &QIFSUM
         GBLA  &QIFSKSB
         GBLA  &QIF1DR
         GBLC  &QIFLS(50)
         GBLC  &QIFGLAB(100)
         GBLC  &QIFPS(50)
         LCLA  &I
         LCLC  &MACRO,&CND,&CNDN
         LCLC  &OP1
         LCLC  &COND
         LCLC  &OP2
         LCLC  &PO2
         LCLC  &OPA
         LCLA  &N
         LCLB  &OR(45)
         LCLB  &AND(45)
         LCLB  &LABSW
         LCLC  &ELSE
         LCLC  &THEN
         LCLC  &H
         LCLC  &R
         LCLC  &X
         LCLC  &Y
         LCLA  &XK
         LCLC  &LIT
         LCLA  &K
         LCLA  &L
         LCLC  &INNER
         LCLA  &RS,&HS
         LCLA  &XXK
         LCLA  &XKK
         LCLC  &K1
         LCLA  &LX1
         LCLC  &K2
         LCLA  &L1
         LCLA  &SCH
         LCLA  &K3,&K4
         LCLA  &INN
         LCLA  &QBZ
         ACTR  16000
&MACRO   SETC  'IF'
.*
         QCOUNT IF
.*
&QBZ     SETA  1
&I       SETA  1
&SCH     SETA  1
         AIF   (T'&LABEL NE 'O').B1010
         AGO   .B1020
.B1010   ANOP
         MNOTE 12,'*** LABELANGABE NICHT ERLAUBT      BED. &QBZ M 01'
         AGO   .B1030
.B1020   ANOP
&QIFSUM  SETA  7
.B1030   ANOP
&QIFPSUB SETA &QIFPSUB+1
&QIFPS(&QIFPSUB) SETC  '&QIFSUM'
&QIFGSUB SETA  &QIFGSUB+1
&QIFSKSB SETA &QIFSKSB+1
&QIFGLAB(&QIFGSUB) SETC  'QIF&QIFSKSB'
&ELSE    SETC  'QIF&QIFSKSB'
&QIFSKSB  SETA  &QIFSKSB+1
&THEN    SETC  'QIF&QIFSKSB'
&N       SETA  N'&SYSLIST
         AIF   (&N NE 0).B1050
         MNOTE 12,'*** OPERAND/ HOCHKOMMA FEHLT       BED. &QBZ M 02'
         MEXIT
.B1050   ANOP
         AIF   ('&SYSLIST(&N)' EQ 'THEN').B1060
         MNOTE 12,'*** THEN ANGABE/ KLAMMER FEHLT     BED. &QBZ M 04'
         MEXIT
.B1060   ANOP
&N       SETA  &N-1
.*
.B1070   ANOP
.*    UPDATEN DER ANSPRUNGSPUNKTE   ******
.B1080   ANOP
         AIF   (&I+1 GT &N).B1120
         AIF   ('&SYSLIST(&I+1)' EQ 'AND' OR                           *
               '&SYSLIST(&I+1)' EQ '&&').B1100
         AIF   ('&SYSLIST(&I+1)' EQ 'OR' OR                            *
               '&SYSLIST(&I+1)' EQ '×').B1090
         MNOTE 12,'*** FALSCHE KETTUNG/ KLAMMER FEHLT BED. &QBZ M 05'
         MEXIT
.B1090   ANOP
&OR(&I)  SETB  1
&SCH     SETA  &SCH+1
         AGO   .B1110
.B1100   ANOP
&AND(&I) SETB  1
.B1110   ANOP
&I       SETA  &I+2
         AGO   .B1080
.B1120   ANOP
&I       SETA  1
.***********************************************************
.B1130  ANOP
         AIF   (N'&SYSLIST(&I) EQ 1).B1140
         AIF   (N'&SYSLIST(&I) EQ 3).B70100
         MNOTE 12,'**  OPERANDEN  UEBERPRUEFEN        BED. &QBZ M 06'
         MEXIT
         COPY  QINNERB     BC CODE AUFBAUEN
.B1240   ANOP
         AIF   (&I EQ &N).B1320
         AIF   (&OR(&I)).B1290
         AIF   (&LABSW).B1250
&LABSW   SETB  1
&QIFSKSB SETA  &QIFSKSB+1
&INNER   SETC  'QIF&QIFSKSB'
.B1250   ANOP
         AIF   (&AND(&I)).B1280
.B1260   ANOP
         &CNDN &INNER
.B1270   ANOP
&I       SETA  &I+2
&QBZ     SETA  &QBZ+1
         AGO   .B1130
.B1280   ANOP
         AIF   (&SCH GT 1).B1260
         &CNDN &ELSE
         AGO   .B1270
.B1290   ANOP
         AIF   (&SCH EQ 1).B1300
&SCH     SETA  &SCH-1
.B1300   ANOP
         &CND  &THEN
&INN     SETA  1
         AIF   (&LABSW).B1310
         AGO   .B1270
.B1310   ANOP
&INNER   DS    0H
&INN     SETA  1
&LABSW   SETB  0
         AGO   .B1270
.B1320   ANOP
         &CNDN &ELSE
&LABSW   SETB  0
&SCH     SETA  1
         AIF   (&INN EQ 0).B1330
&THEN    DS    0H
&INN     SETA  0
.B1330   ANOP
&QBZ     SETA   1
         MEXIT
.*******************************************************
.B70100  ANOP                   ********************************
&OP1     SETC  '&SYSLIST(&I,1)'
&COND    SETC  '&SYSLIST(&I,2)'
&OP2     SETC  '&SYSLIST(&I,3)'
         AGO   .B70108
.************************************************************
         COPY  QINNERA          CHECK OPERANDS
         MEND
./ ADD  NAME=IMLADDR
         MACRO
&LABEL   IMLADDR &R,&ADDR
         LCLC  &A
         LCLA  &Z
         AIF   ('&ADDR'(1,1) NE '(').A1
&Z       SETA  K'&ADDR-2
&A       SETC  '&ADDR'(2,&Z)
&LABEL   LR    &R,&A                    LOAD PARAMETER
         MEXIT
.A1      ANOP
&LABEL   LA    &R,&ADDR                 LOAD PARAMETER
         MEND
./ ADD  NAME=IMSADDR
         MACRO
&LABEL   IMSADDR &R,&ADDR
         LCLC  &A
         LCLA  &Z
         AIF   ('&ADDR'(1,1) NE '(').A1
&Z       SETA  K'&ADDR-2
&A       SETC  '&ADDR'(2,&Z)
&LABEL   LR    &A,&R                    LOAD PARAMETER
         MEXIT
.A1      ANOP
&LABEL   ST    &R,&ADDR                 STORE PARAMETER
         MEND
./ ADD  NAME=INSTALL
//Z222068L JOB (6695,068,2),CLASS=B,MSGCLASS=A
/*JOBPARM SYSAFF=M268
//SMP EXEC SMP,RES=RV1372,DLIBID=DL37A2
//SMP.SMPPTFIN DD *
++ PTF (SO00006) .
++ MOD (IEFACTRT)  LKLIB(SYSMOD) .
++ PTF (SO00005) .
++ MOD (IEFUJV) LKLIB(SYSMOD) .
++ PTF (SO00032) .
++ MOD (IEFUJI) LKLIB(SYSMOD) .
//SMP.SYSIN DD *
UCLIN.
DEL PTF (SO00006).
DEL PTF (SO00005).
ENDUCL.
RECEIVE S (SO00005,SO00006,SO00032).
APPLY   S (SO00005,SO00006,SO00032).
//COPY EXEC COPY
//COPY.SYSMOD DD DSN=SYS1.SYSMOD,DISP=SHR
//COPY.LPALIB DD DSN=SYS1.LPALIB,DISP=SHR
//COPY.SYSIN DD *
 C I=((SYSMOD,R)),O=LPALIB
 S M=IEFUJP
./ ADD  NAME=JES2CHNG
./ CHANGE NAME=$JQE
JQERDSID DS    CL4                                         EM060010
QUERDSID EQU   JQERDSID-JQEDSECT                           EM110010
./ CHANGE NAME=HASPNUC
         CLM   R15,1,=AL1($XEQ) CONVERTER?                 P0848010
         BNE   $QGETAFF                                    P0848011
         CLI   JQEJNAME+7,C'$'                             P0848012
         BNE   QIND                                        P0848013
         CLC   JQERDSID,$SID                               P0848014
         BNE   QNEXT                                       P0848015
         B     QIND                                        P0848017
./ CHANGE NAME=HASPRDR
         MVC   QUERDSID+JCTWORK,$SID                       R2496110
./ ADD  NAME=NETPRINT
NETPRINT CSECT
         REG
         XSAVE R12,SVA,NETPRINT01
         USING SVA,R13
         L     R1,0(,R1)               LOAD PARM ADDR
         ICM   R2,3,0(R1)              GET PARM LENGTH
         BZ    TSTSYSIN                IF ZERO, LOOK FOR SYSIN CARDS
         LA    R4,2(,R1)               POINT TO NAME
         CH    R2,=H'8'                > 8 ?
         BNH   MOVENAME                NO. GO ON
         SPACE 2
LENERR   EQU   *
         LA    R3,RET12                RET CODE FOR LENGTH ERROR
         MVC   LBERRTXT(47),=CL47'0 MBR-NAME LENGTH ERROR'
         B     LBRETX
         SPACE 2
XRET     EQU   *
         XRETURN (R15)
         EJECT
TSTSYSIN EQU   *
         OPEN  SYSIN
         LA    R15,RET16               RET CODE FOR MISSING DD-CARD
         TM    SYSIN+48,X'10'          OPEN SUCCESSFUL ?
         BZ    XRET                    NO. ERROR
         SPACE
         OI    FLAG,FSYSIN             INDICATE 'SYSIN-CARDS PRESENT'
         SPACE 3
LOOPSYN  EQU   *
         GET   SYSIN,CARD
         LA    R4,CARD
         LA    R3,9                    MAX. LENGTH OF NAME + 1
         XR    R2,R2                   REAL LENGTH OF NAME
         SPACE
LOOPNM   EQU   *
         CLI   0(R4),C' '              ×
         BE    NMEND                   ×
         LA    R4,1(,R4)               × FIND LENGTH OF MBR NAME
         LA    R2,1(,R2)               ×
         BCT   R3,LOOPNM               ×
         SPACE
         B     LENERR
         SPACE 2
NMEND    EQU   *
         LA    R4,CARD
         EJECT
MOVENAME EQU   *
         BCTR  R2,R0                   REDUCE FOR  EX
         EX    R2,M1                   MOVE MBR NAME TO ADD-CARD
         EX    R2,M2                   MOVE MBR NAME TO LIBFIND-PARM
         MVI   LBFINDNM+7,C'$'         NETNAME + '$' ==> 1ST JOBNAME
         TM    FLAG,FGETMAIN           FIRST TIME HERE ?
         BO    GOT1                    NO. GETMAIN IS DONE, ALREADY.
         SPACE
         LA    R2,TABLEN               LENGTH OF NR-TABLE
         GETMAIN R,LV=(R2)
         ST    R1,NTABSTA              START OF NR-TABLE
         LA    R1,0(R2,R1)             COMPUTE END OF TAB
         ST    R1,NTABEND              STORE IT
GOT1     EQU   *
         L     R10,NTABSTA             GET ADDR OF AREA, AGAIN
         USING JOBELEM,R10             × ESTABLISH ADDRESSABILITY
*                                      × FOR 1ST JOBNAME ELEMENT
         MVC   JOBELEM(JELEMLN),TABMASK FORMAT ENTRY
         MVC   JNAME,LBFINDNM
         OI    JFLAG,JLAST
         LR    R1,R10
         LA    R1,JELEMLN(,R1)         GET ADDR OF NEXT FREE ELEMENT
         ST    R1,NTABCURR             STORE IT
         SPACE 2
         TM    FLAG,FGETMAIN           FIRST TIME HERE ?
         BO    GOT2                    NO. GETMAIN IS DONE, ALREADY.
         OI    FLAG,FGETMAIN
         GETMAIN R,LV=(R2)
         ST    R1,ATABSTA              START OF AR-TABLE
         LA    R1,0(R2,R1)             COMPUTE END OF TAB
         ST    R1,ATABEND              STORE IT
GOT2     EQU   *
         L     R1,ATABSTA              GET AR-TAB ADDR, AGAIN
         ST    R1,ATABCURR             STORE IT AS NEXT FREE ELEMENT
         SPACE 2
         TM    SYSPRINT+48,X'10'       OUTPUT FILES ALREADY OPEN ?
         BO    LBRET12                 YES.
         OPEN  (SYSPRINT,(OUTPUT),NETLIST,(OUTPUT),NETLISTP,(OUTPUT))
         TM    NETLISTP+48,X'10'       OPEN SUCCESSFUL ?
         BO    GOON                    YES.
         OI    FLAG,FNOPRINT           NO PRINTED NETLIST DESIRED
GOON     EQU   *
         LA    R15,RET16               RET CODE FOR MISSING DD CARD
         TM    SYSPRINT+48,X'10'       OPEN SUCCESSFUL ?
         BZ    XRET                    NO.
         TM    NETLIST+48,X'10'        OPEN SUCCESSFUL ?
         BZ    XRET                    NO.
         BAL   R14,LIBINIT             GO INITIALIZE LIBIO FUNCTIONS
         B     LBRET0                  I/O-ERROR
         B     LBRET4                  INSUFFICIENT MEMORY
         B     LBRET8                  JCL-ERROR
         B     LBRET12                 OK.
         SPACE 3
LBRET0   EQU   *
         MVC   LBERRTXT(47),=CL47'1  LIBINIT: I/O-ERROR'
         B     LBRETX
         SPACE
LBRET4   EQU   *
         MVC   LBERRTXT(47),=CL47'1  LIBINIT: INSUFFICIENT MEMORY'
         B     LBRETX
         SPACE
LBRET8   EQU   *
         MVC   LBERRTXT(47),=CL47'1  LIBINIT: ROSLIB-XX  -  JCL-ERROR'
         SPACE
LBRETX   EQU   *
         LA    R3,RET4                 RET CODE FOR LIBIO-ERROR
LBRETX1  EQU   *
         LA    R1,LBERR
         WTO   MF=(E,(R1))             SEND ERROR MSG TO PROGRAMMER
         TM    FLAG,FNOTFND            IF ONLY A JOB COULD NOT BE READ,
         BO    NXTJOB                  GO ON.
         LR    R15,R3                  RET CODE
         B     ENDNETE
         EJECT
LBRET12  EQU   *
         SPACE
         TM    FLAG,FNOPRINT           NETLIST TO BE PRINTED, TOO ?
         BO    GOON1                   NO.
         PUT   NETLISTP,OUTLINPR       ISSUE HEADER LINE
GOON1    EQU   *
         SPACE 2
         PUT   NETLIST,ADDCARD         ISSUE CONTROL CARD FOR          *
                                       ROSLIB UPDATE
         SPACE 3
         LA    R6,1                    REG FOR LEVEL COUNT
NRLOOP   EQU   *
         MVC   CARD(8),LBFINDNM        ×
         MVC   CARD+8(2),=C': '        × PREPARE HEADER (JOBNAME)
         MVC   CARD+10(70),CARD+9      × CLEAR REMAINDER OF LINE
         PUT   SYSPRINT,CARDASA
         MVI   CARDASA,C' '
         NI    FLAG,255-FNOTFND
         XR    R14,R14
         XR    R15,R15
         LA    R14,AREA
         LA    R15,L'AREA
         XR    R8,R8
         XR    R9,R9
         MVCL  R14,R8
         LA    R1,LBFIND               ROSLIB MBR (JOB) TO BE LOCATED
         BAL   R14,LIBFIND             DO IT
         B     LBFNDX0                 I/O-ERROR
         DC    H'0,0'                  N/A (ONLINE ONLY)
         B     LBFNDX8                 OK.
         B     LBFNDX12                NOT FOUND
         SPACE 2
LBFNDX0  EQU   *
         MVC   LBERRTXT(47),=CL47'2  LIBFIND: I/O-ERROR'
         B     LBRETX
         SPACE
LBFNDX12 EQU   *
         MVC   NJOB(8),LBFINDNM
         MVC   LBERRTXT(47),JOBNFND
         OI    JFLAG,JPROC+JNOTFND
         OI    FLAG,FNOTFND
         MVC   CARD(9),CARD+10         ×
         MVC   CARD+9(31),=C'*** JOB NOT FOUND IN ROSLIB ***'
         PUT   SYSPRINT,CARDASA        × GIVE MESSAGE ONTO
         MVI   CARD,C' '               × *DJC CARD LIST
         MVC   CARD+1(80),CARD         ×
         B     LBRETX
         EJECT
LBFNDX8  EQU   *
         XC    TAB,TAB
         MVI   TAB+C' ',C' '
         OI    JFLAG,JPROC             SAY 'THIS JOB'S JCL IS READ'
         SPACE 2
         NI    FLAG,255-FDJC
         MVC   JNAME,LBFINDNM          MOVE JOBNAME
         SPACE
JOBLOOP  EQU   *
         LA    R1,CARD                 POINT TO AREA FOR JCL-CARD
         BAL   R14,LIBGET              GET A JCL CARD
         B     LBGETX0                 I/O-ERROR
         B     LBGETX4                 EOF
         B     LBGETX8                 OK.
         SPACE
LBGETX0  EQU   *
         MVC   LBERRTXT(47),=CL47'3  LIBGET: I/O-ERROR'
         B     LBRETX
         SPACE
LBGETX4  EQU   *
         TM    FLAG,FDJC               WERE DJC-CARDS WITHIN THIS JOB ?
         BO    PROCDJC                 YES. PROCESS THEM.
         MVC   NGJOB(8),LBFINDNM
         MVC   LBERRTXT(47),JOBNGET
         B     LBRETX
         EJECT
LBGETX8  EQU   *
         CLC   CARD+15(4),=C'*DJC'     IMPORTANT CARD ?
         BNE   JOBLOOP                 NO.  GET NEXT ONE
         SPACE
* PRINT DJC CARD AND MOVE IT TO DJC AREA
         PUT   SYSPRINT,CARDASA        OUTPUT DJC-CARD
         OI    FLAG,FDJC               INDICATE 'DJC CARD PRESENT'
         MVI   CARDASA,C' '            RESET PRINTER CONTROL
         LA    R3,CARD+20              POINT TO 1ST DJC OPERAND
         LA    R1,CARD+71
         TRT   0(51,R3),TAB            FIND 1ST BLANK CHAR
         SR    R1,R3                   GET LENGTH OF OPERAND
         BNP   INVDJC                  IF ZERO ==> ERROR
         BCTR  R1,R0                   REDUCE FOR EX
         SPACE
         ICM   R2,15,AREA              FIRST DJC-CARD ?
         BNZ   NXTDJC                  NO.
         LA    R2,AREA+4               POSITION FOR 1ST DJC-CARD
NXTDJC   EQU   *
         EX    R1,MVDJC
         LA    R2,1(R2,R1)             ADDRESS FOR NEXT DJC-CARD
         ST    R2,AREA                 SAVE IT FOR NEXT TIME
         B     JOBLOOP
         SPACE
MVDJC    MVC   0(0,R2),0(R3)
         SPACE 3
INVDJC   EQU   *
         PUT   SYSPRINT,=CL80'0****** ERROR:  INVALID DJC-CARD  ******'
         LA    R15,RET8
         B     ENDNETE
         EJECT
PROCDJC  EQU   *
* SCAN ALL DJC CARDS
         SPACE
         MVI   TAB+C',',C','           ×
         MVI   TAB+C')',C')'           × CORRECT TRANSLATE TABLE
         LA    R3,AREA+4               POINT TO FIRST DJC-OPERAND
         L     R4,AREA                 ADDR OF DJC END + 1
         SR    R4,R3                   GET DJC LENGTH
         SPACE
DJCLOOP  EQU   *
         CLC   0(3,R3),=C'AR='         'ABNORMAL RELEASE'-OPERAND ?
         BE    OPAR                    YES. PROCESS IT.
         CLC   0(3,R3),=C'NR='         'NORMAL RELEASE'-OPERAND ?
         BE    OPNR                    YES. PROCESS IT.
         CLC   0(6,R3),=C'DM=YES'      DUMMY JOB ?
         BE    OPDM                    YES.
         CLC   0(6,R3),=C'OH=YES'      OPERATOR HOLD ?
         BE    OPOH                    YES.
         SPACE 2
DJCINCR  EQU   *
         LA    R3,1(,R3)               NEXT CHAR IN DJC-OPERAND'S AREA
         BCT   R4,DJCLOOP
CMPLOOP2 EQU   *
         ICM   R3,7,ADDRNRTB           NR-JOBS PRESENT ?
         BZ    NXTJOB                  NO.
CMPLOOP1 EQU   *
         LR    R4,R3                   START ADDR OF NR-TABLE
         SPACE
COMPLOOP EQU   *
         SH    R4,=H'16'               NEXT ELEMENT IN NR-TABLE (IGNORE*
                                                             FIRST ONE)
         C     R4,NTABSTA              ACTUAL ELEMENT REACHED ?
         BE    NXTELEM                 YES.
         CLC   0(8,R3),0(R4)           JOB NAMES EQUAL ?
         BNE   COMPLOOP                NO.
         BAL   R7,NRROUT
         OI    NRROUT+1,X'F0'
         TM    8(R4),JPROC             JCL-CARDS ALREADY READ ?
         BZ    EMPTY                   NO.
         TM    8(R3),JLAST           WAS LAST FLAG SET BEFORE MOVE ?×
         MVC   8(4,R3),8(R4)           × MOVE ENTRY CONTENTS
         MVC   13(3,R3),13(R4)         × EXCEPT LEVEL NO.
         BO    WASLAST                                         YES. ×
         NI    8(R3),255-JLAST       SET IT OFF, AGAIN              ×
         B     WASNLAST              GO ON                          ×
WASLAST  EQU   *                                                    ×
         OI    8(R3),JLAST           FLAG NEW ENTRY AS LAST, AGAIN  ×
WASNLAST EQU   *                     ....CONTINUATION               ×
         NI    8(R3),255-JINV
EMPTY    EQU   *
         OI    8(R4),JINV              FLAG OLD ENTRY AS INVALID
         B     COMPLOOP                TRY OTHER JOBNAMES, TOO
         SPACE 2
NRROUT   NOPR R7
         LA    R5,NRLOOPX
         LR    R9,R4          SAVE JOB ENTRY
         SPACE
NRLOOPX  EQU   *
         L     R15,NTABCURR   GET FREE SPACE ADDR
         ICM   R14,7,9(R9)     GET DEPENDENT NR-JOB TAB
         BNZ   TESTNR         NR-JOB PRESENT
         LA    R5,TESTAR
         LR    R9,R4          GET BEGIN OF NR-TAB
         SPACE 2
TESTAR   EQU   *
         ICM   R14,7,13(R9)   GET DEPENDENT AR-JOB TAB
         BZR   R7             RETURN
         LA    R15,ATABCURR   GET FREE SPACE ADDR OF AR-TAB
         SPACE 2
TESTNR   EQU   *
         LR    R9,R14
         LA    R6,1(R6)       INCREASE LEVEL NUMBER BY ONE
         SPACE 2
MOVENR   EQU   *
         MVC   0(16,R15),0(R14) MOVE NEW ENTRY
         STC   R6,12(R15)     AND STORE IT BACK
         OI    8(R14),JINV    OLD ENTRY AS INVALID
         LA    R15,JELEMLN(,R15) GET NEXT FREE SPACE LOCATION
         ST    R15,NTABCURR   AND STORE IT BACK
         TM    8(R14),JLAST   COMPARE LAST FLAG
         BOR   R5
         LA    R14,JELEMLN(,R14)
         B     MOVENR
         SPACE 2
NXTELEM  EQU   *
         NI    NRROUT+1,X'0F'
         TM    8(R3),JLAST             LAST NR-JOBNAME ?
         LA    R3,JELEMLN(,R3)         (NEXT JOB IN NR-TABLE)
         BZ    CMPLOOP1                NO.
         SPACE
NXTJOB   EQU   *
         LA    R10,JELEMLN(,R10)       NEXT JOB IN NR-TABLE
         CL    R10,NTABCURR            MORE JOBS IN TAB ?
         BNE   PRENXJOB                YES. GO ON
         SPACE
         S     R10,=A(JELEMLN)         POINT TO LAST ELEMENT
         LR    R11,R10                 SAVE CURRENT POSITION IN NR-TAB
         ICM   R1,7,ADDRNRTB           THERE MUST NOT BE ANY NR-JOB
         BZ    PRINT                   OK. THERE ISN'T.
         SPACE
         MVC   ADDRNRTB,NTABCURR+1     SAVE NEW NRTAB ADDR
         ICM   R6,1,LVL                GET HIGHEST LEVEL NO.
         LA    R6,1(,R6)              INCREASE IT TO CREATE ANOTHER ONE
CORRLOOP EQU   *                       DO IT
         LA    R10,JELEMLN(,R10)       POINT TO FREE SPACE
         MVC   0(JELEMLN,R10),0(R1)    MOVE AN ENTRY
         STCM  R6,1,LVL                STORE NEW HIGHEST LEVEL NO.
         TM    8(R1),JLAST             LAST NR-JOB ?
         LA    R1,JELEMLN(,R1)         POINT TO NEXT NRJOB TO BE MOVED
         BZ    CORRLOOP                IF NOT LAST ONE, GO ON MOVING
         LA    R1,JELEMLN(,R10)        POINT TO FREE SPACE
         ST    R1,NTABCURR             SAVE ADDR
         LR    R10,R11                 SET BACK R10
         B     CMPLOOP2                DO THE COMPARISONS
         SPACE 2
PRENXJOB EQU   *
         TM    JFLAG,JINV+JPROC        JOBNAME DOUBLE OR ALREADY READ ?
         BNZ   NXTJOB                  YES.
         MVC   LBFINDNM,JNAME
         MVI   CARDASA,C'-'
         B     NRLOOP
         EJECT
OPAR     EQU   *
         L     R5,ATABCURR             POSITION  OF NEXT AR-ENTRY
         STCM  R5,7,ADDRARTB           STORE IT INTO CURRENT ENTRY
         LA    R7,ATABEND              ADDR(END OF TABLE)
         B     RJOBS
         SPACE
OPNR     EQU   *
         L     R5,NTABCURR             POSITION  OF NEXT NR-ENTRY
         STCM  R5,7,ADDRNRTB           STORE IT INTO CURRENT ENTRY
         LA    R7,NTABEND              ADDR(END OF TABLE)
         SPACE
RJOBS    EQU   *
         XR    R2,R2
         IC    R6,LVL
         LR    R14,R5         SAVE REG 5
         SH    R14,=H'4'      GET OLD LEVEL NUMBER
         LA    R6,1(R6)       INCREASE LEVEL NUMBER BY ONE
         CLM   R6,1,0(R14)    COMPARE LEVEL NUMBER
         BNL   GOONMOV
         SPACE 2
         IC    R6,0(R14)      GET OLD LEVEL NUMBER
         SPACE 2
GOONMOV  EQU   *
         NI    FLAG,255-FMULTIJ
         DROP  R10
         USING JOBELEM,R5              × ESTABLISH NEW ADDRESSABILITY
         LA    R3,3(,R3)               POINT TO FIRST NAME OR BRACKET
         SH    R4,=H'3'                REDUCE REMAINING OP-LENGTH
         LA    R15,RET20
         OI    JFLAG,JLAST             SAY 'LAST JOBNAME'
         CLI   0(R3),C'('              MULTIPLE JOB NAMES ?
         BNE   ONEJOB                  NO.
         OI    FLAG,FMULTIJ            YES. INDICATE IT.
         NI    JFLAG,255-JLAST         NOT LAST JOBNAME
         LA    R3,1(,R3)               1ST JOBNAME CHARACTER
         BCTR  R4,R0                   REDUCE REMAINING OP-LENGTH
         SPACE
ONEJOB   EQU   *
         TRT   0(9,R3),TAB             FIND SEPARATOR
         BZ    ENDNETE                 IF NOT FOUND, GO BACK WITH ERROR
         SR    R1,R3                   GET LENGTH OF JOBNAME
         SR    R4,R1                   REDUCE REMAINING OP-LENGTH
         BCTR  R1,R0                   REDUCE FOR EX
         MVC   JOBELEM(JELEMLN),TABMASK
         EX    R1,OPMOVE               MOVE JOBNAME TO AR/NR-TAB
         STCM  R6,1,LVL                STORE LEVEL OF THIS JOB
         LA    R3,2(R1,R3)             POINT TO NEXT JOBNAME
         LA    R5,JELEMLN(,R5)                 ''         ''    IN TAB
         CL    R5,0(R7)                END OF GETMAIN AREA ?
         BL    ENOUGH                  NO.
         ABEND 804,DUMP
         SPACE 2
ENOUGH   EQU   *
         ST    R5,4(R7)                STORE NEW FREE SPACE ADDR
         TM    FLAG,FMULTIJ            MORE THAN ONE JOBNAME ?
         BZ    DJCINCR                 NO. NO MORE SCANNING
         CLM   R2,1,=C')'              SEPARATOR = ')' ?
         BNE   ONEJOB                  NO. GOON
         S     R5,=A(JELEMLN)          GET ADDR OF ACTUAL ELEM., AGAIN
         OI    JFLAG,JLAST
         B     DJCINCR
         SPACE 2
         DROP  R5
         USING JOBELEM,R10             × ESTABLISH OLD ADDRESSABILITY
         SPACE 2
OPDM     EQU   *
         OI    JFLAG,JDM
         B     OPDMOH
         SPACE
OPOH     EQU   *
         OI    JFLAG,JOH
OPDMOH   EQU   *
         LA    R3,6(,R3)
         SH    R4,=H'6'
         LTR   R4,R4     TEST IF ZERO?
         BNZ   DJCINCR
         SPACE
         LA    R4,1(R4)
         B     DJCINCR
         SPACE 3
OPMOVE   MVC   0(0,R5),0(R3)
         EJECT
PRINT    EQU   *
*OUTPUT JOB NET
         L     R10,NTABSTA             START ADDR OF NR-TABLE
         L     R11,ATABSTA             START ADDR OF AR-TABLE
         XR    R6,R6
         XR    R7,R7
         BCTR  R6,0
         SPACE
PRLOOP   EQU   *
         IC    R7,12(R10)              × GET LEVEL NUMBER
         LA    R6,1(,R6)               × CONVERT LEVEL
         CVD   R6,D                    ×
         UNPK  LEVEL,D+6(2)            ×
         OI    LEVEL+2,240             ×
         SPACE
PRLOOP1  EQU   *
         MVC   JOBNM,JNAME
         TM    JFLAG,JNOTFND           COULD JOB BE FOUND ON ROSLIB ?
         BZ    GOONFLOW                YES.
         MVC   NRJOBS(31),=C'*** JOB NOT FOUND IN ROSLIB ***'
         LA    R4,1                    R4 MUST NOT BE ZERO.
         B     OUT
         SPACE
GOONFLOW EQU   *
         SPACE
         BAL   R9,GETFLOW              GO AND TRY TO FIND FLOW CHART #
         SPACE
         TM    JFLAG,JDM
         BZ    TSTOH
         MVC   INFO(2),=C'DM'
TSTOH    EQU   *
         TM    JFLAG,JOH
         BZ    OUTNR
         MVC   INFO+3(2),=C'OH'
         SPACE 3
OUTNR    EQU   *
         LA    R4,1                    R4 MUST NOT BE ZERO.
         ICM   R5,7,ADDRNRTB           ADDR OF NR-JOBNAMES
         BZ    OUT
         SPACE
NLOOP1   EQU   *
         LA    R3,NRJOBS               POSITION IN OUTLINE
         LA    R4,5                    MAX # OF JOBS PER OUTPUT LINE
         SPACE
NLOOP    EQU   *
         MVC   0(8,R3),0(R5)           MOVE JOBNAME TO OUTLINE
         TM    8(R5),JLAST             LAST NR-JOBNAME FOR THIS JOB ?
         BO    OUT                     YES.
         LA    R3,9(,R3)               NEXT POSITION IN OUTLINE
         LA    R5,JELEMLN(,R5)         NEXT NR-JOBNAME
         BCT   R4,NLOOP
         SPACE
OUT      EQU   *
         SPACE
         TM    FLAG,FNOPRINT           NETLIST TO BE PRINTED, TOO ?
         BO    GOON2                   NO.
         PUT   NETLISTP,OUTLNASA       ISSUE NETLIST LINE TO SYSOUT
GOON2    EQU   *
         SPACE
         PUT   NETLIST,OUTLINE
         MVI   OUTLINE,C' '
         MVC   OUTLINE+1(79),OUTLINE
         LTR   R4,R4                   ANY NR-/AR-JOBNAMES LEFT ?
         BZ    NLOOP1                  YES.
         SPACE
         ICM   R5,7,ADDRARTB           ADDR OF AR-JOBNAMES
         BZ    NXTNROUT                ZERO.
         XC    ADDRARTB,ADDRARTB       CLEAR FOR NEXT TIME
         MVI   INFO,C'*'
         B     NLOOP1
         SPACE 2
NXTNROUT EQU   *
         XR    R15,R15                 SAY 'NO ERROR RETURN CODE'
         LA    R10,JELEMLN(,R10)       NEXT JOB IN NR-TAB
         CL    R10,NTABCURR            END OF TAB REACHED ?
         BE    ENDNETE                 YES.
         SPACE
         TM    JFLAG,JINV              OUTPUT A LINE FOR THIS JOB ?
         BO    NXTNROUT                NO. JOB NAME COMES AGAIN.
         CLM   R7,1,12(R10)            DID LEVEL INCREASE ?
         BE    PRLOOP1                 NO. STILL THE SAME.
         SPACE 2
ARTHISLV EQU   *
         CL    R11,ATABCURR            AR-TAB AT END ?
         BE    PRLOOP                  YES.
         CLM   R7,1,12(R11)            LEVEL OF AR-TAB ELEMENT EQUAL ?
         BE    OUTAR                   YES. OUTPUT AR-JOBS.
         BL    PRLOOP                  NO.
ARINCR   EQU   *
         LA    R11,JELEMLN(,R11)       NEXT ELEM. OF AR TAB
         B     ARTHISLV
         SPACE 2
OUTAR    EQU   *
         MVC   JOBNM,0(R11)
         MVC   INFO(2),=C'AR'
         SPACE
         TM    FLAG,FNOPRINT           NETLIST TO BE PRINTED, TOO ?
         BO    GOON3                   NO.
         PUT   NETLISTP,OUTLNASA       ISSUE NETLIST LINE TO SYSOUT
GOON3    EQU   *
         SPACE
         PUT   NETLIST,OUTLINE
         MVI   OUTLINE,C' '
         MVC   OUTLINE+1(79),OUTLINE
         B     ARINCR
         EJECT
ENDNETE  EQU   *
         CL    R15,RET                 ×
         BNH   ENDNET                  ×
         ST    R15,RET                 × SAVE HIGHEST RET CODE
ENDNET   EQU   *
         TM    FLAG,FSYSIN             SYSIN PRESENT ?
         BZ    ENDIN                   NO.
         MVI   OUTLINE,C' '
         MVC   OUTLINE+1(79),OUTLINE
         MVI   CARDASA,C'1'
         MVC   LBFINDNM,OUTLINE
         MVC   ADDNAME,OUTLINE
         B     LOOPSYN
         SPACE 3
ENDIN    EQU   *
         CLOSE (SYSIN,,SYSPRINT,,NETLIST,,NETLISTP)
         L     R15,RET                 RETURN WITH HIGHEST RET CODE
         B     XRET
         EJECT
GETFLOW  EQU   *
         TM    FLAG,FNOEM              EM-DD-CARD PRESENT ?
         BO    EMINVA                  NO. FORGET FLOW CHART #
         TM    FLAG,FFLOW              TABLE ALREADY BUILT ?
         BO    FINDPGM                 YES.
         SPACE
         OPEN  EM
         SPACE
         TM    EM+48,X'10'             DD-CARD PRESENT ?
         BO    GETM                    YES.
         OI    FLAG,FNOEM              NO. INDICATE IT.
         B     EMINVA
GETM     LOAD  EP=RZGE121,DCB=EM
         LR    R3,R0                   GET AREA ADDRESS
         LA    R3,56(R3)               SAVE IT FOR LATER USE
         ST    R3,EMTAB                SAVE IT FOR LATER USE
         XR    R14,R14                 SAVE IT FOR LATER USE
         LA    R14,0(R1)               GET LENGTH OF MODUL
         SLL   R14,1                   MULTIPLY WITH 2
         SH    R14,=H'14'              GET LENGTH OF MODUL
         SRL   R14,2                   DIVIDE BY 4
         LR    R4,R14                  # OF EXPECTED ENTRIES
         ST    R14,EMTAB#              # OF EXPECTED ENTRIES
         XR    R5,R5
         SPACE
EMLOOP   EQU   *
         MVI   7(R3),C'$'              MAKE JOBNAME TO FIT
         SPACE
         LA    R5,1(,R5)               COUNT # OF RECORDS
         LA    R3,16(,R3)              POSITION OF NEXT ENTRY IN TAB
         BCT   R4,EMLOOP               GO READ NEXT EM RECORD.
         SPACE
ENDEM    EQU   *                       EODAD FOR EM-DCB
         L     R3,EMTAB                GET TAB START ADDRESS AGAIN
         ST    R5,EMPARM               STORE # ENTRIES
         CALL  LFDNR2DF,((R3),EMPARM)
         OI    FLAG,FFLOW              INDICATE 'TABLE CREATED'
         EJECT
FINDPGM  EQU   *
         L     R3,EMTAB                START OF TAB
         CALL  LFDNR2,(EMPARM,JOBNM,EMOFFSET)
         ICM   R5,15,EMOFFSET          GET OFFSET INTO TABLE
         BP    FOUNDPGM                TEST IF NOT FOUND
EMINVA   EQU   *
         LA    R5,EMINV-8              POINT TO INVALID FLOW #  -8
         B     EMMOV                   GO ON.
         SPACE
FOUNDPGM EQU   *
         XR    R4,R4
         BCTR  R5,R0
         M     R4,EMPARM+4             MULTIPLY ENTRY # BY ENTRY-LENGTH
         LA    R5,0(R3,R5)             POINT TO ENTRY
EMMOV    EQU   *
         MVC   BLATT#+1(8),8(R5)       MOVE FLOW CHART# INTO OUTPUT REC
         BR    R9                      GO BACK.
         EJECT
         LIBIO
         EJECT
* D E F I N I T I O N S
* = = = = = = = = = = =
SVA      DC    18F'0'
         SPACE
CARDASA  DC    C'1'
CARD     DS    CL80
         DC    CL52' '
ADDCARD  DS    0CL80
         DC    C'$ADD LIST=NONE,MAXSIZE=OFF,NAME='
ADDNAME  DC    CL8' '
         DC    CL40' '
         SPACE
P1       DC    P'1'
         SPACE
LBFIND   DS    0CL10
         DC    C'OX'
LBFINDNM DC    CL8' '
         SPACE
SORTPARM DS    H
         DC    H'16'
         DC    H'13'
         DC    H'+1'
         DC    H'14'
         DC    H'1'
         DC    H'+1'
         DC    H'8'
         DC    H'0'
D        DS    D
M1       MVC   ADDNAME(0),0(R4)
M2       MVC   LBFINDNM(0),0(R4)
         SPACE 3
FLAG     DC    X'00'
         SPACE
FSYSIN   EQU   128
FNOPRINT EQU   64
FNOEM    EQU   32
FFLOW    EQU   16
FGETMAIN EQU   8
FDJC     EQU   4
FMULTIJ  EQU   2
FNOTFND  EQU   1
         SPACE 3
RET4     EQU   4                       LIBIO ERROR
RET8     EQU   8                       MBR NOT FOUND
RET12    EQU   12                      INVALID MBR NAME
RET16    EQU   16                      MISSING DD-NAME
RET20    EQU   20                      INVALID JOBNAME IN AR/NR-OPERAND
         SPACE 2
RET      DC    F'0'
TABLEN   EQU   200*16  LENGTH OF NR-/AR-TABLE (# ENTRIES  * 16)
         EJECT
EMTABLEN DC    F'400000'         25000 ENTRIES
EMTAB#   DC    F'25000'
EMTAB    DS    F
EMPARM   DS    F                 # ENTRIES
         DC    F'16'             ENTRY-LENGTH
         DC    F'1'              SORT FIELD START
         DC    F'8'              SORT FIELD END
         DS    9F
         SPACE
EMOFFSET DC    F'0'
EMINV    DC    8C'*'
         EJECT
LBERR    WTO   'NETLSTX RHARBARBERHARBARBERHARBARBERHARBARBERHABARBER',*
               ROUTCDE=11,MF=L
         SPACE
LBERRTXT EQU   LBERR+10
         SPACE 2
JOBNFND  DC    CL47'2  LIBFIND: JOB ABCDEFGH NOT FOUND'
NJOB     EQU   JOBNFND+16
         SPACE
JOBNGET  DC    CL47'3  LIBGET:  JOB ABCDEFGH - UNEXPECTED EOF'
NGJOB    EQU   JOBNGET+16
         SPACE
TAB      DC    XL256'0'
         SPACE
NTABSTA  DC    F'0'
NTABEND  DC    F'0'
NTABCURR DC    F'0'
         SPACE
ATABSTA  DC    F'0'
ATABEND  DC    F'0'
ATABCURR DC    F'0'
         SPACE
TABMASK  DS    0CL16
         DC    CL8' '
         DC    XL8'0'
         EJECT
OUTLNASA DC    C' '
OUTLINE  DS    0CL80
LEVEL    DC    CL3' '
         DC    C' '
JOBNM    DC    CL8' '
BLATT#   DC    CL9' '
         DC    C' '
INFO     DC    CL5' '
         DC    CL2' '
NRJOBS   DC    5CL9' '
         DC    CL6' '
         DC    CL6' '
         SPACE 3
OUTLINPR DS    0CL80
         DC    C'1LVL '
         DC    CL9'JOBNAME'
         DC    CL9'ABLAUF#'
         DC    CL7'BEMERK.'
         DC    CL50'NR-/AR-JOBS'
         EJECT
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=80,BLKSIZE=80,  *
               RECFM=FBA
         EJECT
NETLIST  DCB   DDNAME=NETLIST,DSORG=PS,MACRF=PM,LRECL=80,BLKSIZE=8000, *
               RECFM=FB
         EJECT
NETLISTP DCB   DDNAME=NETLISTP,DSORG=PS,MACRF=PM,LRECL=80,BLKSIZE=80,  *
               RECFM=FBA
         EJECT
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=ENDIN,             *
               RECFM=FB,LRECL=80,BUFNO=1
         EJECT
EM       DCB   DDNAME=EM,DSORG=PS,MACRF=GL
         EJECT
         LTORG
         DS    0F
AREA     DS    0CL1024    51*20 + 4
         DC    F'0'
         DS    CL1020
         EJECT
JOBELEM  DSECT
JNAME    DS    CL8
JFLAG    DS    CL1
JDM      EQU   1
JOH      EQU   2
JLAST    EQU   4
JINV     EQU   8
JPROC    EQU   16
JNOTFND  EQU   32
ADDRNRTB DS    CL3
LVL      DS    CL1
ADDRARTB DS    CL3
JELEMLN  EQU   *-JOBELEM
         END
./ ADD  NAME=QCOUNT
         MACRO
         QCOUNT &OP
         GBLA  &QCOUNTR,&QMACTYP(256)
         LCLA  &A
.*
.*       DIESE S MAKRO KONTROLLIERT DIE  FOLGEN DER EROEFFNUNG UND
.*       DIE A BSCHLUESSE VON LEVELN (I F/EIF, DO/EDO USW.)
.*
&A       SETA  10
         AIF   ('&OP' EQ 'IF').AUF
&A       SETA  20
         AIF   ('&OP' EQ 'ELSE').AELSE
&A       SETA  30
         AIF   ('&OP' EQ 'CASE').AUF
&A       SETA  40
         AIF   ('&OP' EQ 'PROG').APROG
&A       SETA  50
         AIF   ('&OP' EQ 'DO').AUF
&A       SETA  60
         AIF   ('&OP' EQ 'DCL').AUF
&A       SETA  70
         AIF   ('&OP' EQ 'GRP').AUF
.*
&A       SETA  10
         AIF   ('&OP' EQ 'EIF').AEIF
&A       SETA  30
         AIF   ('&OP' EQ 'ECASE').AB
&A       SETA  40
         AIF   ('&OP' EQ 'EPROG').AB
&A       SETA  50
         AIF   ('&OP' EQ 'EDO').AB
&A       SETA  60
         AIF   ('&OP' EQ 'EDCL').AB
&A       SETA  70
         AIF   ('&OP' EQ 'EGRP').AB
.*
         MNOTE 12,'****** FALSCHE MAKRO -ANWEISUNG ******'
         MEXIT
.*
.AELSE   AIF   (&QMACTYP(&QCOUNTR) EQ 10).AUF
         MNOTE 12,'****** ''ELSE'' FOLGT NICHT AUF ''IF'' ******'
.FFOLG   MNOTE *,'****** FALSCHE MAKRO- FOLGE ******'
         MEXIT
.APROG   AIF   (&QMACTYP(&QCOUNTR) EQ 30).AUF
         MNOTE 12,'****** ''PROG'' FOLGT NICHT AUF ''CASE'' ******'
         AGO   .FFOLG
.*
.AUF     AIF   (&QCOUNTR GT 255).F1
&QCOUNTR SETA  &QCOUNTR+1
&QMACTYP(&QCOUNTR) SETA &A
         MEXIT
.*
.F1      MNOTE 12,'*** MEHR ALS 256 LEVELS (&QCOUNTR.)'
         MEXIT
.*
.AEIF    AIF   (&QCOUNTR LT 1).F2
         AIF   (&QMACTYP(&QCOUNTR) NE 20).AB
&QMACTYP(&QCOUNTR) SETA 0
&QCOUNTR SETA  &QCOUNTR-1
.AB      AIF   (&QCOUNTR LT 1).F2
         AIF   (&QMACTYP(&QCOUNTR) NE &A).F3
&QMACTYP(&QCOUNTR) SETA 0
&QCOUNTR SETA  &QCOUNTR-1
         MEXIT
.*
.F2      MNOTE 12,'****** LEVEL-COUNT <  1  (&QCOUNTR.) ******'
         MEXIT
.F3      MNOTE 12,'****** EROEFFNUNG VON LEVEL &A FEHLT ******'
         MEND
./ ADD  NAME=QINNERA
*          DATA SET QINNERIDB  AT LEVEL 040 AS OF 10/14/76
.* QINNERA  -   CHECK OPERANDS - AUFRUF VON  "IF" "DO" "CASE"
.************************************************************
.****                                                     ***
.****              COND  VERARBEITUNG                     ***
.****                                                     ***
.************************************************************
.B70108  ANOP
         AIF   ('&COND' EQ 'O' OR '&COND' EQ 'Z').B70110
         AIF   ('&COND' EQ 'NO' OR '&COND' EQ 'NZ').B70110
         AIF   ('&COND' EQ 'M' OR '&COND' EQ 'NM').B70110
         AIF   ('&COND' EQ 'NG' OR '&COND' EQ 'G').B72070
         AIF   ('&COND' EQ 'LU').B72070
         AGO   .B70240
.B70110  ANOP
         AIF   ('&OP1'(1,1) NE '(').B70120
         MNOTE 12,'*** SCHREIBWEISE OP1 FALSCH        BED. &QBZ M 11'
         AGO   .B72110
.B70120  ANOP
         AIF   ('&OP2'(1,1) EQ '(').B70130
         AIF   ('&OP2'(1,2) EQ 'B''').B70160
         AIF   ('&OP2'(1,2) EQ 'X''').B70170
         AIF   ('&OP2'(1,2) EQ 'C''').B70130
         AIF   ('&OP2'(1,2) EQ 'P''').B70130
         AIF   ('&OP2'(1,2) EQ 'H''').B70130
         AIF   ('&OP2'(1,2) EQ 'F''').B70130
         AIF   ('&OP2'(1,2) EQ 'V(').B70130
         AIF   ('&OP2'(1,2) EQ 'A(').B70130
         AIF   ('&OP2'(1,1) GE '0' AND '&OP2'(1,1) LE '9').B70130
         AIF   (T'&SYSLIST(&I,3) EQ 'U').B70140
.B70130  ANOP
         MNOTE 12,'*** VERGL. PARAMETER UEBERPRUEFEN  BED. &QBZ M 13'
         AGO   .B72110
.B70140  ANOP
         AIF   ('&OP1'(1,1) GE '0' AND '&OP1'(1,1) LE '9').B70180
.B70150  ANOP
         TM    &OP1,&OP2
         AGO   .B1150
.B70160  ANOP
&K       SETA  K'&SYSLIST(&I,3)
         AIF   (&K-3 LE 8).B70140
         MNOTE 12,'** LITERALLAENGE FALSCH            BED. &QBZ M 14'
         AGO   .B72110
.B70170  ANOP
&K       SETA  K'&SYSLIST(&I,3)
         AIF   (&K-3 LE 2).B70140
         MNOTE 12,'** LITERALLAENGE FALSCH            BED. &QBZ M 14'
         AGO   .B72110
.B70180  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  2
.B70190  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70210
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70200
         AGO   .B70190
.B70200  ANOP
         MNOTE 12,'*** SCHREIBWEISE OP1 FALSCH        BED. &QBZ M 11'
         AGO   .B72110
.B70210  ANOP
&XK      SETA  &XK+1
&XXK     SETA  &XK
&XK      SETA  &XK+1
&XKK     SETA  1
.B70220  ANOP
         AIF   ('&OP1'(&XK,1) EQ ',').B70230
&XK      SETA  &XK+1
&XKK     SETA  &XKK+1
         AIF   (&XK GT &K).B70150
         AGO   .B70220
.B70230  ANOP
&K1      SETC  '&OP1'(&XXK,&XKK)
         AIF   ('&K1' NE '1').B70200
&L       SETA  &XK
&XK      SETA  &XK+1
&OP1     SETC  '&OP1'(1,&XXK-1).'&OP1'(&XK,&K-&L)
         AGO   .B70150
.*************************************************************
.************************************************************
.****                                                     ***
.****              CLC  VERARBEITUNG                      ***
.****                                                     ***
.************************************************************
.B70240  ANOP
         AIF   ('&COND' EQ 'P').B70250
         AIF   ('&COND' EQ 'M').B70250
         AIF   ('&COND' EQ 'NP').B70250
         AIF   ('&COND' EQ 'NM').B70250
         AGO   .B70260
.B70250  ANOP
         MNOTE 12,'*** VERGL. PARAMETER UEBERPRUEFEN  BED. &QBZ M 13'
.B70260  ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'C').B70270
         AIF   (T'&SYSLIST(&I,1) EQ 'B').B70270
         AIF   (T'&SYSLIST(&I,1) EQ 'X').B70270
         AIF   (T'&SYSLIST(&I,1) EQ 'F').B70270
         AIF   (T'&SYSLIST(&I,1) EQ 'H').B70270
         AIF   (T'&SYSLIST(&I,1) EQ 'A').B70270
         AIF   (T'&SYSLIST(&I,1) EQ 'V').B70270
         AGO   .B71280
.B70270  ANOP
&LX1     SETA  1
         AIF   (T'&SYSLIST(&I,3) EQ 'N').B70580
         AIF   (T'&SYSLIST(&I,3) EQ 'U').B70580
         AIF   (T'&SYSLIST(&I,1) EQ 'C' AND T'&SYSLIST(&I,3) EQ 'C').B7*
               0510
         AIF   (T'&SYSLIST(&I,1) EQ 'X' AND T'&SYSLIST(&I,3) EQ 'X').B7*
               0510
         AIF   (T'&SYSLIST(&I,1) EQ 'B' AND T'&SYSLIST(&I,3) EQ 'B').B7*
               0510
         AIF   (T'&SYSLIST(&I,1) EQ 'F' AND T'&SYSLIST(&I,3) EQ 'F').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'H' AND T'&SYSLIST(&I,3) EQ 'H').B7*
               0470
         AIF   (T'&SYSLIST(&I,1) EQ 'F' AND T'&SYSLIST(&I,3) EQ 'H').B7*
               0370
         AIF   (T'&SYSLIST(&I,1) EQ 'H' AND T'&SYSLIST(&I,3) EQ 'F').B7*
               0440
         AIF   (T'&SYSLIST(&I,1) EQ 'F' AND T'&SYSLIST(&I,3) EQ 'A').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'F' AND T'&SYSLIST(&I,3) EQ 'V').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'H' AND T'&SYSLIST(&I,3) EQ 'A').B7*
               0440
         AIF   (T'&SYSLIST(&I,1) EQ 'H' AND T'&SYSLIST(&I,3) EQ 'V').B7*
               0440
         AIF   (T'&SYSLIST(&I,1) EQ 'A' AND T'&SYSLIST(&I,3) EQ 'A').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'V' AND T'&SYSLIST(&I,3) EQ 'V').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'A' AND T'&SYSLIST(&I,3) EQ 'F').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'V' AND T'&SYSLIST(&I,3) EQ 'F').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'A' AND T'&SYSLIST(&I,3) EQ 'H').B7*
               0370
         AIF   (T'&SYSLIST(&I,1) EQ 'V' AND T'&SYSLIST(&I,3) EQ 'H').B7*
               0370
         AIF   (T'&SYSLIST(&I,1) EQ 'A' AND T'&SYSLIST(&I,3) EQ 'V').B7*
               0290
         AIF   (T'&SYSLIST(&I,1) EQ 'V' AND T'&SYSLIST(&I,3) EQ 'A').B7*
               0290
         MNOTE 12,'*** DATENFORMAT/ SCHREIBWEISE FALSCH BED. &QBZ M 17'
         AGO   .B72110
.B70280 ANOP
&L       SETA  L'&SYSLIST(&I,1)
&L1      SETA  L'&SYSLIST(&I,3)
         AIF   (&L EQ 2 AND &L1 EQ 2).B70470
         AIF   (&L EQ 2 AND &L1 EQ 4).B70440
         AIF   (&L EQ 4 AND &L1 EQ 2).B70370
         AIF   (&L EQ 4 AND &L1 EQ 4).B70290
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B70290  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B70300  ANOP
         AIF   ('&OP1'(&XK,1) EQ '+').B70310
         AIF   ('&OP1'(&XK,1) EQ '(').B70340
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70360
         AGO   .B70300
.B70310  ANOP
         AIF   ('&OP1'(&XK+1,1) EQ '2').B70330
.B70320 ANOP
         MNOTE 12,'*** SCHREIBWEISE OP1 FALSCH        BED. &QBZ M 11'
         AGO   .B72110
.B70330 ANOP
&OP1     SETC  '&OP1'(1,&XK+1)
         AGO   .B70460
.B70340 ANOP
         AIF   ('&OP1'(&XK+1,2) EQ '2)').B70350
         AGO   .B70320
.B70350  ANOP
&OP1     SETC  '&OP1'(1,&XK-1)
         AGO   .B70460
.B70360  ANOP
         L     0,&OP1
         C     0,&OP2
         AGO   .B1150
.B70370  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B70380  ANOP
         AIF   ('&OP1'(&XK,1) EQ '+').B70390
         AIF   ('&OP1'(&XK,1) EQ '(').B70410
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70430
         AGO   .B70380
.B70390  ANOP
         AIF   ('&OP1'(&XK+1,1) EQ '2').B70400
         AGO   .B70490
.B70400  ANOP
&OP1     SETC  '&OP1'(1,&XK+1)
         AGO   .B70500
.B70410  ANOP
         AIF   ('&OP1'(&XK+1,2) EQ '2)').B70420
         AGO   .B70490
.B70420  ANOP
&OP1     SETC  '&OP1'(1,&XK-1)
         AGO   .B70500
.B70430  ANOP
         L     0,&OP1
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA  1
.B70432  ANOP
         AIF   ('&OP2'(&XK,1) EQ '(').B70506
         AIF   ('&OP2'(&XK,1) EQ '+').B70506
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70438
         AGO   .B70432
.B70438  ANOP
         CH    0,&OP2
         AGO   .B1150
.B70440  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA   1
.B70450  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70490
         AIF   ('&OP1'(&XK,1) EQ '+').B70490
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70460
         AGO   .B70450
.B70460  ANOP
         LH    0,&OP1
&K       SETA   K'&SYSLIST(&I,3)
&XK      SETA   1
.B70461  ANOP
         AIF   ('&OP2'(&XK,1) EQ '+').B70462
         AIF   ('&OP2'(&XK,1) EQ '(').B70465
&XK      SETA   &XK+1
         AIF   (&XK GT &K).B70469
         AGO   .B70461
.B70462  ANOP
         AIF   ('&OP2'(&XK+1,1) EQ '2').B70464
.B70463  ANOP
         MNOTE 12,'*** SCHREIBWEISE OP2 FALSCH        BED. &QBZ M 12'
         AGO   .B72110
.B70464  ANOP
&OP2     SETC   '&OP2'(1,&XK+1)
         AGO   .B70508
.B70465  ANOP
         AIF   ('&OP2'(&XK+1,2) EQ '2)').B70466
         AGO   .B70463
.B70466  ANOP
&OP2     SETC  '&OP2'(1,&XK-1)
         AGO   .B70508
.B70469  ANOP
         C     0,&OP2
         AGO   .B1150
.B70470  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B70480   ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70490
         AIF   ('&OP1'(&XK,1) EQ '+').B70490
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70500
         AGO   .B70480
.B70490 ANOP
         MNOTE 12,'*** SCHREIBWEISE OP1 FALSCH        BED. &QBZ M 11'
         AGO   .B72110
.B70500  ANOP
         LH    0,&OP1
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA   1
.B70502  ANOP
         AIF   ('&OP2'(&XK,1) EQ '(').B70506
         AIF   ('&OP2'(&XK,1) EQ '+').B70506
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70508
         AGO   .B70502
.B70506  ANOP
         MNOTE 12,'*** SCHREIBWEISE OP2 FALSCH        BED. &QBZ M 12'
         AGO   .B72110
.B70508  ANOP
         CH    0,&OP2
         AGO   .B1150
.B70510  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B70520  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70560
         AIF   ('&OP1'(&XK,1) EQ '+').B70560
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70530
         AGO   .B70520
.B70530  ANOP
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA  1
.B70540  ANOP
         AIF   ('&OP2'(&XK,1) EQ '+').B70560
         AIF   ('&OP2'(&XK,1) EQ '(').B70560
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70550
         AGO   .B70540
.B70550  ANOP
&L       SETA  L'&SYSLIST(&I,1)
&L1      SETA  L'&SYSLIST(&I,3)
         AIF   (&L EQ &L1).B70560
         AIF   (&L LT &L1).B70570
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B70560  ANOP
         CLC   &OP1,&OP2
         AGO   .B1150
.B70570 ANOP
         MNOTE  4,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B70560
.B70580  ANOP
         AIF   ('&OP2'(1,2) EQ 'F''').B70900
         AIF   ('&OP2'(1,1) GE '0' AND '&OP2'(1,1) LE '9').B71170
         AIF   ('&OP2'(1,2) EQ 'A(').B70900
         AIF   ('&OP2'(1,2) EQ 'V(').B70900
         AIF   ('&OP2'(1,2) EQ 'H''').B71040
         AIF   ('&OP2'(1,1) NE '(').B70590
         MNOTE 12,'*** SCHREIBWEISE OP2 FALSCH        BED. &QBZ M 12'
         AGO   .B72110
.B70590  ANOP
&K       SETA  0
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B70600  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70610
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70650
         AGO   .B70600
.B70610 ANOP
&XK      SETA  &XK+1
&XXK     SETA  &XK
&XK      SETA  &XK+1
&XKK     SETA  1
.B70620 ANOP
         AIF   ('&OP1'(&XK,1) EQ ')').B70630
&XK      SETA  &XK+1
&XKK     SETA  &XKK+1
         AGO   .B70620
.B70630 ANOP
&LX1     SETA  2
&K       SETA  0
&XK      SETA  0
&K1      SETC  '&OP1'(&XXK,&XKK)
         AIF   ('&K1' EQ '1').B70640
&X       SETC  'CL'.'&K1'
         AIF   ('&OP2'(1,2) EQ 'C''').B70670
&X       SETC  'XL'.'&K1'
         AIF   ('&OP2'(1,2) EQ 'X''').B70670
&X       SETC  'BL'.'&K1'
         AIF   ('&OP2'(1,2) EQ 'B''').B70670
         AGO   .B70690
.B70640 ANOP
&OP1     SETC  '&OP1'(1,&XXK-2)
         AGO   .B70700
.B70650  ANOP
&K       SETA  0
&XK      SETA  0
&XK      SETA  L'&SYSLIST(&I,1)
.B70660  ANOP
&X       SETC  'XL'.'&XK'
         AIF   ('&OP2'(1,2) EQ 'X''').B70670
&X       SETC  'BL'.'&XK'
         AIF   ('&OP2'(1,2) EQ 'B''').B70670
&X       SETC  'CL'.'&XK'
         AIF   ('&OP2'(1,2) EQ 'C''').B70670
         AGO   .B70690
.B70670  ANOP
&K       SETA  K'&SYSLIST(&I,3)
         AIF   (&XK  EQ 1).B70700
&OP2     SETC  '&X'.'&OP2'(2,&K-1)
&LIT     SETC  '='.'&OP2'
.B70680  ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'C' AND '&LIT'(2,1) EQ 'C').B70730
         AIF   (T'&SYSLIST(&I,1) EQ 'X' AND '&LIT'(2,1) EQ 'X').B70730
         AIF   (T'&SYSLIST(&I,1) EQ 'B' AND '&LIT'(2,1) EQ 'B').B70730
.B70690  ANOP
         MNOTE 12,'*** DATENFORMAT/ SCHREIBWEISE FALSCH BED. &QBZ M 17'
         AGO   .B72110
.B70700 ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'C' AND '&OP2'(1,1) EQ 'C').B70710
         AIF   (T'&SYSLIST(&I,1) EQ 'X' AND '&OP2'(1,1) EQ 'X').B70710
         AIF   (T'&SYSLIST(&I,1) EQ 'B' AND '&OP2'(1,1) EQ 'B').B70710
         AGO   .B70690
.B70710 ANOP
         CLI   &OP1,&OP2
         AGO   .B1150
.B70720  ANOP
         CLC   &OP1,&LIT
         AGO   .B1150
.B70730  ANOP
         AIF   (&LX1 GT 1).B70810
         AIF   ('&LIT'(2,1) EQ 'X').B70880
         AIF   ('&LIT'(2,1) EQ 'B').B70890
&K3      SETA 6
&K4      SETA &K-3
.B70740  ANOP
         AIF   ('&LIT'(&K3,2) EQ '&&').B70780
.B70750  ANOP
&K3      SETA  &K3+1
         AIF   (&K3-5 EQ &K4).B70760
         AIF   (&K3-5 GT &K4).B70760
         AGO   .B70740
.B70760  ANOP
&K3      SETA  0
&K4      SETA  0
         AIF   (&XK GE &K-3).B70800
.B70770  ANOP
         MNOTE 12,'** LITERALLAENGE FALSCH            BED. &QBZ M 14'
         AGO   .B72110
.B70780  ANOP
&K3      SETA  &K3+1
&K       SETA  &K-1
         AGO   .B70750
.B70790 ANOP
&K3      SETA  &K3+1
&K       SETA  &K-1
         AGO   .B70830
.B70800  ANOP
&LX1     SETA  1
         CLC   &OP1,&LIT
         AGO   .B1150
.B70810  ANOP
         AIF   ('&LIT'(2,1) EQ 'X').B70860
         AIF   ('&LIT'(2,1) EQ 'B').B70870
&K3      SETA  6
&K4      SETA  &K-3
.B70820 ANOP
         AIF   ('&LIT'(&K3,2) EQ '&&').B70790
.B70830 ANOP
&K3      SETA  &K3+1
         AIF   (&K3-5 GT &K4).B70840
         AGO   .B70820
.B70840 ANOP
&K3      SETA  0
&K4      SETA  0
&K       SETA  &K-3
&K2      SETC  '&K'
.B70850  ANOP
         AIF   ('&K1' GE '&K2').B70800
         AGO   .B70770
.B70860  ANOP
&K       SETA  (&K-3)/2
&K2      SETC  '&K'
         AGO   .B70850
.B70870  ANOP
&K       SETA  (&K-3)/8
&K2      SETC  '&K'
         AGO   .B70850
.B70880  ANOP
         AIF   (&XK GE (&K-3)/2).B70800
         AGO   .B70770
.B70890  ANOP
         AIF   (&XK GE (&K-3)/8).B70800
         AGO   .B70770
.B70900  ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'V').B70990
         AIF   (T'&SYSLIST(&I,1) EQ 'A').B70990
         AIF   (T'&SYSLIST(&I,1) EQ 'F').B70920
         AIF   (T'&SYSLIST(&I,1) EQ 'H').B71020
.B70910  ANOP
         MNOTE 12,'*** DATENFORMAT/ SCHREIBWEISE FALSCH BED. &QBZ M 17'
         AGO   .B72110
.B70920  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B70930   ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70970
         AIF   ('&OP1'(&XK,1) EQ '+').B70940
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B70990
         AGO   .B70930
.B70940  ANOP
         AIF   ('&OP1'(&XK+1,1) EQ '2').B70960
.B70950 ANOP
         MNOTE 12,'*** SCHREIBWEISE OP1 FALSCH        BED. &QBZ M 11'
         AGO   .B72110
.B70960  ANOP
&OP1     SETC  '&OP1'(1,&XK+1)
         AGO   .B71010
.B70970 ANOP
         AIF   ('&OP1'(&XK+1,2) EQ '2)').B70980
         AGO   .B70950
.B70980  ANOP
&OP1     SETC  '&OP1'(1,&XK-1)
         AGO   .B71010
.B70990  ANOP
         L     0,&OP1
&R       SETC  ' '
.B71000 ANOP
&LIT     SETC  '='.'&OP2'
         C     0,&LIT
         AGO   .B1150
.B71010 ANOP
         LH    0,&OP1
         AGO   .B71000
.B71020  ANOP
&K       SETA   K'&SYSLIST(&I,1)
&XK      SETA  1
.B71030  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70950
         AIF   ('&OP1'(&XK,1) EQ '+').B70950
&XK      SETA   &XK+1
         AIF   (&XK GT &K).B71010
         AGO   .B71030
.*
.B71040  ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'A').B71120
         AIF   (T'&SYSLIST(&I,1) EQ 'V').B71120
         AIF   (T'&SYSLIST(&I,1) EQ 'H').B71130
         AIF   (T'&SYSLIST(&I,1) EQ 'F').B71050
         AGO   .B70910
.B71050  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B71060   ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B71100
         AIF   ('&OP1'(&XK,1) EQ '+').B71070
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71120
         AGO   .B71060
.B71070  ANOP
         AIF   ('&OP1'(&XK+1,1) EQ '2').B71090
.B71080 ANOP
         MNOTE 12,'*** SCHREIBWEISE OP1 FALSCH        BED. &QBZ M 11'
         AGO   .B72110
.B71090  ANOP
&OP1     SETC  '&OP1'(1,&XK+1)
         AGO   .B71150
.B71100 ANOP
         AIF   ('&OP1'(&XK+1,2) EQ '2)').B71110
         AGO   .B71080
.B71110  ANOP
&OP1     SETC  '&OP1'(1,&XK-1)
         AGO   .B71150
.B71120 ANOP
         L     0,&OP1
&R       SETC  'H'
         AGO   .B71160
.B71130  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B71140  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B70950
         AIF   ('&OP1'(&XK,1) EQ '+').B70950
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71150
         AGO   .B71140
.B71150  ANOP
&R       SETC  'H'
         L&R   0,&OP1
.B71160  ANOP
&LIT     SETC  '='.'&OP2'
         C&R   0,&LIT
         AGO   .B1150
.B71170  ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'A').B71180
         AIF   (T'&SYSLIST(&I,1) EQ 'V').B71180
         AIF   (T'&SYSLIST(&I,1) EQ 'F').B71180
         AIF   (T'&SYSLIST(&I,1) EQ 'H').B71180
         AGO   .B70560
.B71180  ANOP
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA  1
.B71190  ANOP
         AIF   ('&OP2'(&XK,1) EQ '(').B71200
&XK      SETA   &XK+1
         AGO   .B71190
.B71200  ANOP
&XK      SETA   &XK+1
         AIF   ('&OP2'(&XK,2) EQ '2,').B71210
         AIF   ('&OP2'(&XK,2) EQ '4,').B71220
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B71210  ANOP
&R       SETC  'H'
         AGO   .B71230
.B71220  ANOP
&R       SETC  ' '
.B71230  ANOP
&XK      SETA  &XK+1
&L       SETA  &XK
&XK      SETA  &XK+1
&LIT     SETC  '0('.'&OP2'(&XK,&K-&L)
         AIF   (T'&SYSLIST(&I,1) EQ 'A' AND '&R' EQ ' ').B71240
         AIF   (T'&SYSLIST(&I,1) EQ 'V' AND '&R' EQ ' ').B71240
         AIF   (T'&SYSLIST(&I,1) EQ 'A' AND '&R' EQ 'H').B71250
         AIF   (T'&SYSLIST(&I,1) EQ 'V' AND '&R' EQ 'H').B71250
         AIF   (T'&SYSLIST(&I,1) EQ 'F' AND '&R' EQ ' ').B71240
         AIF   (T'&SYSLIST(&I,1) EQ 'F' AND '&R' EQ 'H').B71250
         AIF   (T'&SYSLIST(&I,1) EQ 'H' AND '&R' EQ 'H').B71260
         AIF   (T'&SYSLIST(&I,1) EQ 'H' AND '&R' EQ ' ').B71270
         AIF   ('&H' EQ ' ' AND '&R' EQ ' ').B71240
         AIF   ('&H' EQ 'H' AND '&R' EQ ' ').B71270
         AIF   ('&H' EQ 'H' AND '&R' EQ 'H').B71260
         AIF   ('&H' EQ ' ' AND '&R' EQ 'H').B71250
         MNOTE 12,'*** DATENFORMAT/ SCHREIBWEISE FALSCH BED. &QBZ M 17'
         AGO   .B72110
.B71240  ANOP
         L     0,&OP1
         C     0,&LIT
         AGO   .B1150
.B71250  ANOP
         L     0,&OP1
         CH    0,&LIT
         AGO   .B1150
.B71260  ANOP
         LH    0,&OP1
         CH    0,&LIT
         AGO   .B1150
.B71270  ANOP
         LH    0,&OP1
         C     0,&LIT
         AGO   .B1150
.************************************************************
.****                                                     ***
.****              FORMAT P VERARBEITUNG                  ***
.****                                                     ***
.************************************************************
.B71280  ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'P').B71290
         AGO   .B71410
.B71290  ANOP
         AIF   (T'&SYSLIST(&I,3) EQ 'P').B71340
&LIT     SETC  '='.'&OP2'
         AIF   ('&LIT'(2,2) EQ 'P''').B71360
         AIF   ('&OP2'(1,1) GE '0' AND '&OP2'(1,1) LE '9').B71320
         MNOTE 12,'*** DATENFORMAT/ SCHREIBWEISE FALSCH BED. &QBZ M 17'
         AGO   .B72110
.B71300  ANOP
         AIF   (&LX1 EQ 2).B71310
&K       SETA  K'&SYSLIST(&I,3)
         AIF   ('&LIT'(2,3) EQ 'P''-').B73115
         AIF   ('&LIT'(2,3) EQ 'P''+').B73115
.B73112  ANOP
&XK      SETA  L'&SYSLIST(&I,1)
         AIF   (&XK GE (&K-3)/2+1).B71310
         MNOTE 12,'** LITERALLAENGE FALSCH            BED. &QBZ M 14'
         AGO   .B72110
.B71310  ANOP
&LX1     SETA  1
         CP    &OP1,&LIT
         AGO   .B1150
.B73115  ANOP
&K       SETA  &K-1
         AGO   .B73112
.B71320  ANOP
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA  1
.B71330  ANOP
         AIF   ('&OP2'(&XK,1) EQ ',').B71340
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71350
         AGO   .B71330
.B71340  ANOP
         CP    &OP1,&OP2
         AGO   .B1150
.B71350  ANOP
         MNOTE 12,'*** LAENGENANGABE OP2 FEHLT        BED. &QBZ M 19'
         AGO   .B72110
.B71360  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK       SETA  1
.B71370  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B71380
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71300
         AGO   .B71370
.B71380  ANOP
&XK      SETA  &XK+1
&XXK     SETA  &XK
&XK      SETA  &XK+1
&XKK     SETA  1
.B71390  ANOP
         AIF  ('&OP1'(&XK,1) EQ ')').B71400
&XK      SETA  &XK+1
&XKK     SETA  &XKK+1
         AGO   .B71390
.B71400  ANOP
&LX1     SETA  2
&K       SETA  0
&K1      SETC  '&OP1'(&XXK,&XKK)
&K       SETA  K'&SYSLIST(&I,3)
         AIF   ('&LIT'(2,3) EQ 'P''-').B71405
         AIF   ('&LIT'(2,3) EQ 'P''+').B71405
.B71402  ANOP
&K       SETA  &K-3
&K       SETA  &K/2+1
&K2      SETC  '&K'
&K       SETA  0
         AIF   ('&K1' GE '&K2').B71300
         MNOTE 12,'** LITERALLAENGE FALSCH            BED. &QBZ M 14'
         AGO   .B72110
.B71405  ANOP
&K       SETA  &K-1
         AGO   .B71402
.************************************************************
.***                                                      ***
.***               REGISTER VERARBEITUNG                  ***
.***                                                      ***
.************************************************************
.B71410  ANOP
         AIF   ('&OP1'(1,1) EQ '(').B71420
         AGO   .B71570
.B71420  ANOP
&R       SETC  'R'
         AIF   ('&OP2'(1,1) EQ '(').B71430
&R       SETC  ' '
         AIF   (T'&SYSLIST(&I,3) EQ 'F' OR T'&SYSLIST(&I,3) EQ 'A').B71*
               430
         AIF   (T'&SYSLIST(&I,3) EQ 'V').B71430
&R       SETC  'H'
         AIF   (T'&SYSLIST(&I,3) EQ 'H').B71430
&R       SETC  ' '
         AIF   ('&OP2'(1,1) GE '0' AND '&OP2'(1,1) LE '9').B71440
         AIF   (T'&SYSLIST(&I,3) EQ 'U').B71520
         AIF   (T'&SYSLIST(&I,3) EQ 'N').B71520
         MNOTE 12,'*** DATENFORMAT/ SCHREIBWEISE FALSCH BED. &QBZ M 17'
         AGO   .B72110
         AGO   .B71530
.B71430  ANOP
         C&R   &OP1,&OP2
         AGO   .B1150
.B71440  ANOP
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA  1
.B71450  ANOP
         AIF   ('&OP2'(&XK,1) EQ '(').B71470
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71460
         AGO   .B71450
.B71460  ANOP
         MNOTE 12,'*** SCHREIBWEISE OP2 FALSCH        BED. &QBZ M 12'
         AGO   .B72110
.B71470  ANOP
&XK      SETA  &XK+1
         AIF   ('&OP2'(&XK,2) EQ '2,').B71480
         AIF   ('&OP2'(&XK,2) EQ '4,').B71490
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B71480  ANOP
&R       SETC  'H'
         AGO   .B71500
.B71490  ANOP
&R       SETC  ' '
.B71500  ANOP
&XK      SETA  &XK+1
&L       SETA  &XK
&XK      SETA  &XK+1
&OP2     SETC  '&OP2'(1,&XK-3).'&OP2'(&XK,&K-&L)
         AIF   ('&R' EQ 'H').B71510
         C     &OP1,&OP2
         AGO   .B1150
.B71510  ANOP
         CH    &OP1,&OP2
         AGO   .B1150
.B71520  ANOP
         AIF   ('&OP2'(1,2) EQ 'V(').B71530
         AIF   ('&OP2'(1,2) EQ 'F''').B71540
         AIF   ('&OP2'(1,2) EQ 'H''').B71560
         AIF   ('&OP2'(1,2) EQ 'A(').B71530
         MNOTE 12,'*** DATENFORMAT/ SCHREIBWEISE FALSCH BED. &QBZ M 17'
         AGO   .B72110
.B71530  ANOP
&K       SETA  K'&SYSLIST(&I,3)
&OP2     SETC  '&OP2'(1,&K)
&LIT     SETC  '='.'&OP2'
         C     &OP1,&LIT
         AGO   .B1150
.B71540   ANOP
&X       SETC  '=F'
.B71550   ANOP
&K       SETA  K'&SYSLIST(&I,3)
&OP2     SETC   '&OP2'(2,&K-1)
&LIT     SETC  '&X'.'&OP2'
         C&R   &OP1,&LIT
         AGO   .B1150
.B71560  ANOP
&R       SETC  'H'
&X       SETC  '=H'
         AGO   .B71550
.************************************************************
.****                                                     ***
.****              EXPLIZITE  VERARBEITUNG                ***
.****                                                     ***
.************************************************************
.B71570  ANOP
         AIF   ('&OP1'(1,1) GE '0' AND '&OP1'(1,1) LE '9').B71580
         MNOTE 12,'*** OP1 UNGUELTIG/ NICHT DEFINIERT BED. &QBZ M 20'
         AGO   .B72110
.B71580  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B71590  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B71610
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71600
         AGO   .B71590
.B71600  ANOP
         MNOTE 12,'*** SCHREIBWEISE OP1 FALSCH        BED. &QBZ M 11'
         AGO   .B72110
.B71610  ANOP
&XK      SETA  &XK+1
&XXK     SETA  &XK
&XK      SETA  &XK+1
&XKK     SETA  1
.B71620  ANOP
         AIF   ('&OP1'(&XK,1) EQ ',').B71640
&XK      SETA  &XK+1
&XKK     SETA  &XKK+1
         AIF   (&XK GT &K).B71630
         AGO   .B71620
.B71630  ANOP
&OPA     SETC  '&OP1'
         AGO   .B71660
.B71640  ANOP
&K1      SETC  '&OP1'(&XXK,&XKK)
&L       SETA  &XK
&XK      SETA  &XK+1
&OPA     SETC  '&OP1'(1,&XXK-1).'&OP1'(&XK,&K-&L)
         AIF   ('&OP2'(1,1) GE '0' AND '&OP2'(1,1) LE '9').B71680
         AIF   ('&K1' EQ '1').B71650
         AGO   .B71790
.B71650 ANOP
         AIF   (T'&SYSLIST(&I,3) EQ 'N').B71660
         AGO   .B71790
.B71660 ANOP
         AIF   ('&OP2'(1,2) EQ 'C''').B71670
         AIF   ('&OP2'(1,2) EQ 'B''').B71670
         AIF   ('&OP2'(1,2) EQ 'X''').B71670
         MNOTE 12,'*** OP1 - OP2 UEBERPRUEFEN         BED. &QBZ M 21'
         AGO   .B72110
.B71670 ANOP
         CLI   &OPA,&OP2
         AGO   .B1150
.B71680  ANOP
&K       SETA  0
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA  1
.B71690  ANOP
         AIF   ('&OP2'(&XK,1) EQ '(').B71700
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71740
         AGO   .B71690
.B71700  ANOP
&XK      SETA  &XK+1
&XXK     SETA  &XK
&XK      SETA  &XK+1
&XKK     SETA  1
.B71710  ANOP
         AIF  ('&OP2'(&XK,1) EQ ',').B71720
&XK      SETA  &XK+1
&XKK     SETA  &XKK+1
         AIF   (&XK GT &K).B71750
         AGO   .B71710
.B71720  ANOP
&K2      SETC  '&OP2'(&XXK,&XKK)
         AIF   ('&K1' GE '&K2').B71730
.B71730  ANOP
         CP    &OP1,&OP2
         AGO   .B1150
.B71740  ANOP
         MNOTE 12,'*** SCHREIBWEISE OP2 FALSCH        BED. &QBZ M 12'
         AGO   .B72110
.B71750  ANOP
         CLC   &OP1,&OP2
         AGO   .B1150
.B71760  ANOP
&K       SETA  0
&XK      SETA  0
&K       SETA  K'&SYSLIST(&I,3)
&XK      SETA  1
.B71770 ANOP
         AIF   ('&OP2'(&XK,1) EQ '(').B71750
         AIF   ('&OP2'(&XK,1) EQ '+').B71750
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B71780
         AGO   .B71770
.B71780 ANOP
&K       SETA  0
&XK      SETA  0
&L       SETA  L'&SYSLIST(&I,3)
&K2      SETC  '&L'
         AIF   ('&K1' LT '&K2').B71785
         AIF   ('&K1' EQ '&K2').B71750
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B71785  ANOP
         MNOTE  4,'*** UNTERSCHIEDLICHE FELDLAENGE    BED. &QBZ M 15'
         AGO   .B72110
.B71790  ANOP
         AIF   (T'&SYSLIST(&I,3) EQ 'B').B71760
         AIF   (T'&SYSLIST(&I,3) EQ 'C').B71760
         AIF   (T'&SYSLIST(&I,3) EQ 'X').B71760
         AIF   (T'&SYSLIST(&I,3) EQ 'P').B71730
         AIF   (T'&SYSLIST(&I,3) EQ 'F').B71810
         AIF   (T'&SYSLIST(&I,3) EQ 'H').B71850
         AIF   (T'&SYSLIST(&I,3) EQ 'A').B71880
         AIF   (T'&SYSLIST(&I,3) EQ 'V').B71880
.B71800  ANOP
&X       SETC  'XL'.'&K1'
         AIF   ('&OP2'(1,2) EQ 'X''').B71890
&X       SETC  'BL'.'&K1'
         AIF   ('&OP2'(1,2) EQ 'B''').B71890
&X       SETC  'CL'.'&K1'
         AIF   ('&OP2'(1,2) EQ 'C''').B71890
&X       SETC  'P'
         AIF   ('&OP2'(1,2) EQ 'P''').B71890
&X       SETC  'F'
         AIF   ('&OP2'(1,2) EQ 'F''').B71890
&X       SETC  'H'
         AIF   ('&OP2'(1,2) EQ 'H''').B71890
&X       SETC  'A'
         AIF   ('&OP2'(1,2) EQ 'A(').B71890
&X       SETC  'V'
         AIF   ('&OP2'(1,2) EQ 'V(').B71890
         MNOTE 12,'*** SCHREIBWEISE OP2 FALSCH        BED. &QBZ M 12'
         AGO   .B72110
.B71810  ANOP
         AIF   (&K1 EQ 4).B71830
         AIF   (&K1 EQ 2).B71840
.B71820 ANOP
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B71830  ANOP
         L     0,&OPA
         C     0,&OP2
         AGO   .B1150
.B71840 ANOP
         LH    0,&OPA
         C     0,&OP2
         AGO   .B1150
.B71850  ANOP
         AIF   (&K1 EQ 2).B71860
         AIF   (&K1 EQ 4).B71870
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B71860  ANOP
         LH    0,&OPA
         CH    0,&OP2
         AGO   .B1150
.B71870 ANOP
         L     0,&OPA
         CH    0,&OP2
         AGO   .B1150
.B71880 ANOP
         AIF   (&K1 EQ 4).B71830
         AIF   (&K1 EQ 2).B71840
         AGO   .B71820
.B71890  ANOP
&K       SETA  K'&SYSLIST(&I,3)
&OP2     SETC  '&X'.'&OP2'(2,&K-1)
&LIT     SETC  '='.'&OP2'
         AIF   ('&LIT'(2,1) EQ 'F').B71980
         AIF   ('&LIT'(2,1) EQ 'H').B72010
         AIF   ('&LIT'(2,1) EQ 'A').B71980
         AIF   ('&LIT'(2,1) EQ 'V').B71980
&K       SETA  &K-3
         AIF   ('&LIT'(2,1) EQ 'B').B72040
         AIF   ('&LIT'(2,1) EQ 'X').B72050
         AIF   ('&LIT'(2,1) EQ 'P').B72060
         AIF   ('&LIT'(2,1) EQ 'C').B71910
.B71900  ANOP
&K3      SETA  0
&K4      SETA  0
&K2      SETC  '&K'
         AIF   ('&K1' GE '&K2').B71950
         MNOTE 12,'** LITERALLAENGE FALSCH            BED. &QBZ M 14'
         AGO   .B72110
.B71910 ANOP
&K3      SETA 6
&K4      SETA  &K
.B71920 ANOP
         AIF   ('&LIT'(&K3,2) EQ '&&').B71940
.B71930 ANOP
&K3      SETA  &K3+1
         AIF   (&K3-5 EQ &K4).B71900
         AIF   (&K3-5 GT &K4).B71900
         AGO   .B71920
.B71940 ANOP
&K       SETA  &K-1
&K3      SETA  &K3+1
         AGO   .B71930
.B71950   ANOP
         AIF   ('&LIT'(2,1) EQ 'P').B71970
.B71960  ANOP
         CLC   &OP1,&LIT
         AGO   .B1150
.B71970  ANOP
         CP    &OP1,&LIT
         AGO   .B1150
.B71980  ANOP
         AIF   (&K1 EQ 4).B71990
         AIF   (&K1 EQ 2).B72000
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B71990  ANOP
         L     0,&OPA
         C     0,&LIT
         AGO   .B1150
.B72000  ANOP
         LH    0,&OPA
         C     0,&LIT
         AGO   .B1150
.B72010  ANOP
         AIF   (&K1 EQ 4).B72020
         AIF   (&K1 EQ 2).B72030
         MNOTE 12,'*** UNTERSCHIEDLICHE FELDLAENGEN   BED. &QBZ M 15'
         AGO   .B72110
.B72020  ANOP
         L     0,&OPA
         CH    0,&LIT
         AGO   .B1150
.B72030  ANOP
         LH    0,&OPA
         CH    0,&LIT
         AGO   .B1150
.B72040  ANOP
&K       SETA  &K/8
         AGO   .B71900
.B72050  ANOP
&K       SETA  &K/2
         AGO   .B71900
.B72060  ANOP
&K       SETA  &K/2+1
         AGO   .B71900
.***********************************************************
.*                                                         *
.*       T R T  VERARBEITUNG                               *
.*                                                         *
.***********************************************************
.B72070  ANOP
         AIF   (T'&SYSLIST(&I,1) EQ 'C').B72090
         AIF   (T'&SYSLIST(&I,1) EQ 'X').B72090
         AIF   ('&OP1'(1,1) GE '0' AND '&OP1'(1,1) LE '9').B72120
.B72080  ANOP
         MNOTE 12,'*** DATENF./ SCHREIBW. OP1 FALSCH  BEC. &QBZ M 16'
         AGO   .B72110
.B72090  ANOP
         AIF   (T'&SYSLIST(&I,3) EQ 'X').B72100
         MNOTE 12,'*** SCHREIBWEISE OP2 FALSCH        BED. &QBZ M 12'
         AGO   .B72110
.B72100  ANOP
         TRT   &OP1,&OP2
         AGO   .B1150
.B72110   ANOP
         AGO   .B1150
.B72120  ANOP
&K       SETA  K'&SYSLIST(&I,1)
&XK      SETA  1
.B72130  ANOP
         AIF   ('&OP1'(&XK,1) EQ '(').B72140
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B72080
         AGO   .B72130
.B72140  ANOP
&XK      SETA  &XK+1
.B72150  ANOP
         AIF   ('&OP1'(&XK,1) EQ ',').B72090
&XK      SETA  &XK+1
         AIF   (&XK GT &K).B72080
         AGO   .B72150
./ ADD  NAME=QINNERB
.************************************************************
.****                                                    ****
.****              BC  CODE  AUFBAUEN                    ****
.****                                                    ****
.************************************************************
.B1140  ANOP
&COND    SETC  '&SYSLIST(&I,1)'
.B1150  ANOP
         AIF   ('&COND' EQ 'H' OR '&COND' EQ '>' OR                    *
               '&COND' EQ 'GT').B1160H                             >
         AIF   ('&COND' EQ 'NH' OR '&COND' EQ '^>' OR                  *
               '&COND' EQ 'LE' OR '&COND' EQ '<=').B1160NH        ^>
         AIF   ('&COND' EQ 'L' OR '&COND' EQ '<' OR                    *
               '&COND' EQ 'LT').B1160L                             <
         AIF   ('&COND' EQ 'NL' OR '&COND' EQ '^<' OR                  *
               '&COND' EQ 'GE' OR '&COND' EQ '>=').B1160NL        ^<
         AIF   ('&COND' EQ 'E' OR '&COND' EQ '=' OR                    *
               '&COND' EQ 'EQ').B1160EQ                            =
         AIF   ('&COND' EQ 'NE' OR '&COND' EQ '^=').B1160NE       ^=
         AIF   ('&COND' EQ 'Z').B1160Z                     ZERO /  0
         AIF   ('&COND' EQ 'NZ').B1160NZ               NOT ZERO / ^0
         AIF   ('&COND' EQ 'O').B1160O                     ONES /  1
         AIF   ('&COND' EQ 'NO').B1160NO               NOT ONES / ^1
         AIF   ('&COND' EQ 'M').B1160M                 MIXED / MINUS
         AIF   ('&COND' EQ 'NM').B1160NM         NOT   MINUS / MIXED
         AIF   ('&COND' EQ 'P').B1160P                      POSITIVE
         AIF   ('&COND' EQ 'NP').B1160NP               NOT POSITIVE
         AIF   ('&COND' EQ 'G').B1160Z        (ZERO)    GUELTIG (TRT)
         AIF   ('&COND' EQ 'NG').B1160NZ          NICHT GUELTIG (TRT)
         AIF   ('&COND' EQ 'LU').B1160LU     LETZTES UNGUELTIG (TRT)
&CND     SETA  11
         MNOTE 12,'***  FALSCHER VERGL. OPERAND       BED. &QBZ M 07'
         AIF   ('&MACRO' EQ 'DO').B1310  GENERATE &DOLAB
         MEXIT
.B1160H  ANOP
&CND     SETC  'BH'
&CNDN    SETC  'BNH'
         AGO   .B1240
.B1160NH ANOP
&CND     SETC  'BNH'
&CNDN    SETC  'BH'
         AGO   .B1240
.B1160L  ANOP
&CND     SETC  'BL'
&CNDN    SETC  'BNL'
         AGO   .B1240
.B1160NL ANOP
&CND     SETC  'BNL'
&CNDN    SETC  'BL'
         AGO   .B1240
.B1160EQ ANOP
&CND     SETC  'BE'
&CNDN    SETC  'BNE'
         AGO   .B1240
.B1160NE ANOP
&CND     SETC  'BNE'
&CNDN    SETC  'BE'
         AGO   .B1240
.B1160Z  ANOP
&CND     SETC  'BZ'
&CNDN    SETC  'BNZ'
         AGO   .B1240
.B1160NZ ANOP
&CND     SETC  'BNZ'
&CNDN    SETC  'BZ'
         AGO   .B1240
.B1160O  ANOP
&CND     SETC  'BO'
&CNDN    SETC  'BNO'
         AGO   .B1240
.B1160NO ANOP
&CND     SETC  'BNO'
&CNDN    SETC  'BO'
         AGO   .B1240
.B1160M  ANOP
&CND     SETC  'BM'
&CNDN    SETC  'BNM'
         AGO   .B1240
.B1160NM ANOP
&CND     SETC  'BNM'
&CNDN    SETC  'BM'
         AGO   .B1240
.B1160P  ANOP
&CND     SETC  'BP'
&CNDN    SETC  'BNP'
         AGO   .B1240
.B1160NP ANOP
&CND     SETC  'BNP'
&CNDN    SETC  'BP'
         AGO   .B1240
.B1160LU ANOP
&CND     SETC  'B     2'
&CNDN    SETC  'B     13'
         AGO   .B1240
./ ADD  NAME=SMCAEXT
SMCAEXT  DSECT
DJCONOFF DS    X                   DJC-SWITCH (ON=X'00'/OFF=X'FF')
         DS    3X                  UNUSED
         DS    F                   UNUSED
SMCALOCK DS    F                   LOCKWORD FOR DJC (USED IN SPDJC03)
SMCAJNCB DS    A                   ADDRESS OF JOBNET-CONTROL-BLOCK
SMCAJCMD DS    A                   ADDRESS OF DJC COMMAND TO SUBMIT
SMCAIMSF DS    CL4                 SYSTEM-ID FOR SYSAFF=IMS
SMCATSOF DS    CL4                 SYSTEM-ID FOR SYSAFF=TSO
SMCABTCH DS    CL4                 SYSTEM-ID FOR SYSAFF=BTCH
         DS    12F                 UNUSED
./ ADD  NAME=SPDJC01
SPDJC01  TITLE 'JOB-NETZ READER EXIT MODULE'
***********************************************************************
*                                                                     *
*        P R O L O G :                                                *
*                                                                     *
***********************************************************************
*                                                                     *
*        PGM-FUNKTION :1.ERSETZT IM JCL-STATEMENT VORHANDENEN         *
*                        ##N-STRING DURCH EIN ZEICHEN AUS DEM JOB-NAME*
*                        WOBEI 'N' DIE POSITION DIESES ZEICHENS IM    *
*                        JOB-NAME ANGIBT                              *
*                      2.SELEKTIERT *DJC-WERTE AUS INPUT-STREAM UND   *
*                        UEBERGIBT DIESE ZUR PLAUSIBILITAETS-PRUEFUNG *
*                        UND DEM AUFBAU DES JOB-CONTROL-BLOCKES       *
*                        AN DIE CSECT SPDJC06.                        *
*                      3.BEI GUELTIGER PLAUSIBILITAET WERDEN DIE      *
*                        ENTSPRECHENDEN CONTROL-BLOECKE AUFGEBAUT     *
*                      4.BEI PLAUSIBILITAETS-FEHLER WTO-GESCHRIEBEN   *
*                        UND JCL-ERROR IM REGISTER 15 (4) GESETZT.    *
*                                                                     *
***********************************************************************
*                                                                     *
*        REGISTER-BENUTZUNG : R0   =                                  *
*                             R1   = UEBERGABE ADR.PARM-LISTE + TRT   *
*                                  = BASREG DSECT BLOCKHDR            *
*                             R2   = TRT + WORK                       *
*                             R3   = ADR.COMMON-EXIT-PARAMETER AREA   *
*                                  = BASREG DSECT JOBENTRY            *
*                             R4   = ADR.JCL-STATEMENT                *
*                             R5   = ADR.INDICATER JCL-STATEMENT      *
*                             R6   = BASREG DSECT DJCBLK              *
*                             R7   = BASREG DSECT POINTER             *
*                             R8   = BASREG DSECT NETQUEUE            *
*                             R9   = BASREG DSECT NETIDHDR            *
*                             R10  = BASREG DSECT JOBQUEUE            *
*                             R11  = BASREG                           *
*                             R12  = BASREG                           *
*                             R13  = SAVE-REG                         *
*                             R14  = CSECT-UPRO-RETURN                *
*                             R15  = RETURN-CODE                      *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
SPDJC01  CSECT
         SAVE  (14,12),,SPDJC01.&SYSDATE_&SYSTIME
         REG
         XC    16(4,R13),16(R13)        * LOESCHEN RETURN-CODE
         LR    R12,R15                  * LOAD
         LA    R11,2048(R12)            * BASE
         LA    R11,2048(R11)            * REGISTERS
         SPACE
         USING SPDJC01,R12,R11          * BASE-REGISTER 11/12
         USING WORK,R13                 *
         USING BLOCKHDR,R1
         USING JOBENTRY,R3
         USING DJCBLK,R6
         USING POINTER,R7
         USING NETQUEUE,R8
         USING NETIDHDR,R9
         USING JOBQUEUE,R10
         L     R6,16
         L     R6,X'C4'(R6)
         L     R6,X'80'(R6)
         LA    R6,0(R6)
         LTR   R6,R6
         BNZ   CHKFF
         MVI   19(R13),4
         B     CRTRN1
CHKFF    EQU   *
         CLI   0(R6),X'FF'
         BE    CRTRN1
         SPACE 2
         LR    R10,R1                   * SICHERN ADR.PARM-LISTE
         LM    R3,R5,0(R1)              * LADEN PARM-WERTE
         SPACE 2
         L     R6,24(R3)                * LOAD USER-COM-FIELD(SMF)
         SPACE
         CLM   R6,15,=CL4' '            * INITIALISIERT ?
         BNE   A100                     * JA
         CLI   0(R5),1                  * JOB-STATEMENT ?
         BNE   CRTRN1                   * NEIN
         GETMAIN R,LV=WORKLEN,SP=241
         ST    R1,24(R3)                * ADR.GETMAIN-AREA->COMMON-AREA
         LR    R6,R1                    * LOESCHEN DES
         LA    R7,WORKLEN               * GETMAIN-BEREICHES
         LA    R8,0                     * AUF BLANK
         LA    R9,0                     *
         ICM   R9,8,=X'40'              * FUELLZEICHEN
         MVCL  R6,R8                    *
         SPACE
A100     EQU   *
         LR    R7,R13                   * ADR.LOWER SAVE-AREA
         L     R13,24(R3)               * ADR.HIGHER SAVE-AREA
         ST    R7,4(R13)                *
         ST    R13,8(R7)                *
         ST    R10,PARMSAVE             * SICHERN ADR.PARM-LISTE
         CLC   WDJC(5),=C'*DJC '        * WDJC INITIALISIERT ?
         BE    A200                     * JA
         MVC   WDJC(5),=C'*DJC '        * WDJC INITIALISIEREN
         MVC   WJOBNAME,0(R3)           * JOB-NAME SICHERN
         MVI   WSTATUS,X'00'            * WSTATUS INITIALISIEREN
         SPACE 2
A200     EQU   *
         CLI   0(R5),0                  * NULL-STATEMENT
         BE    CRTRN                    * CSECT-RETURN
         CLI   0(R5),16                 * CONVERTER-ENDE ?
         BE    A400                     * JA
         BAL   R14,D01                  * BEARBEITEN ##N-STRING
         CLI   0(R5),1                  * JOB-STATEMENT ?
         BNE   CRTRN                    * CSECT-RETURN
         BAL   R14,D02                  * SUCHEN DJC-WERTE
CRTRN    EQU   *                        * CSECT-RETURN
         L     R13,4(R13)
CRTRN1   EQU   *
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
***********************************************************************
* BEI CONVERTER-ENDE WERDEN FOLGENDE FUNKTIONEN DURCHGEFUEHRT         *
*              1.INTERPRETIEREN UND AUFBEREITEN DER DJC-DATEN         *
*              2.BEI FEHLERHAFTER PARAMETER-ANGABE WIRD EINE          *
*                MITTEILUNG IM JOB-LOG GEDRUCKT UND JCL-ERROR IM      *
*                REGISTER 15 GESETZT                                  *
*              3.AUFBAU DER CONTROL-BLOECKE                           *
***********************************************************************
A400     EQU   *                        * CONVERTER-ENDE
         TM    WSTATUS,X'01'            * DJC-DATEN GEFUNDEN ?
         BNO   A900                     * NEIN
         CLI   0(R2),C'S'     TYPRUN=SCAN?
         BE    A900
         CLI   0(R2),C'C'     TYPRUN=COPY?
         BE    A900
         MVC   WLINK(8),LINKL           * LINK LIST FORM
         LA    R1,WDJC6                 * ADR.DJC-DATEN
         LINK  EPLOC=SPDJC06,SF=(E,WLINK) INTERPRETIEREN DJC-DATEN
         LR    R6,R15                   * ADR.DJCBLK
         L     R7,DJCERR                * ADR.WTO
         LTR   R7,R7                    * FELD DJCERR = 0 ?
         BZ    A550                     * KEIN FEHLER
         WTO   MF=(E,(R7))              * SCHREIBEN FEHLER-MELDUNG
         L     R15,4(R13)               * HIGHER SAVE AREA
         MVI   19(R15),4                * RC=4 JCL-FEHLER
         B     A800                     * CSECT-RETURN
         SPACE
A550     EQU   *
         @GET  LOCK,ON
         LA    R2,8                     * BLOCK-ADDR.POINTER
         LA    R3,0                     * REG.3 = 0
         @GET  (R2),(R7)                * GET REL.ADDR.POINTER
         LA    R8,PTLENGTH(R7)          * REL.ADDR.FIRST NETID-ENTRY
         LA    R2,PTLENGTH(R2)          * BLOCK-ADDR.FIRST NETID-ENTRY
         L     R4,PTNAVQUE              * NEXT AVAIL.SPACE NETID-ENTRY
         CLM   R4,3,=AL2(BHLENGTH+PTLENGTH) * FIRST ENTRY ?
         BNE   A555                         * NO
         ST    R2,PTNAVQUE              * BLOCK-ADDR.FIRST NETID-ENTRY
         B     A590
         SPACE 2
A555     EQU   *
         CLC   DJCNN,=C'YES'            * PURGE ?
         BNE   A560                     * NO
         BAL   R14,D06                  * PURGE OLD NET
         SPACE 2
A560     EQU   *
         CR    R2,R4                    * LAST ACTIV NETID-ENTRY ?
         BE    A590                     * NO
         CLI   NQNETID,X'00'            * NETID-ENTRY FREE ?
         BNE   A570                     * NO
         LTR   R3,R3                    * ADDR.FREE NETID-ENTRY AVAIL.?
         BNZ   A570                     * YES
         LR    R3,R8                    * SAVE ADDR.FREE NETID-ENTRY
         SPACE 2
A570     EQU   *
         CLC   NQNETID,DJCID            * NETID-ENTRY PRESENT ?
         BNE   A580                     * NO
         L     R2,NQNETHDR              * BLOCK-ADDR.ASSO.NETHDR-ENTRY
         @GET  (R2),(R9)                * GET REL.ADDR.NETHDR-ENTRY
         B     A610
         SPACE 2
A580     EQU   *
         LA    R2,NQLENGTH(R2)          * BLOCK ADDR.+L'NETID-ENTRY
         LA    R8,NQLENGTH(R8)          * REL.ADDR.+L'NETID-ENTRY
         B     A560
         SPACE 2
A590     EQU   *
         CLC   DJCNN,=C'YES'
         BE    A592
         LA    R7,INVID
         WTO   MF=(E,(R7))              * SCHREIBEN FEHLER-MELDUNG
         L     R15,4(R13)               * HIGHER SAVE AREA
         MVI   19(R15),4                * RC=4 JCL-FEHLER
         B     A750                     * CSECT-RETURN
A592     EQU   *
         LTR   R3,R3                    * FREE NETID-ENTRY AVAIL.?
         BZ    A595                     * NO
         LR    R8,R3                    * LOAD ADDR.FREE NETID-ENTRY
         B     A600
         SPACE 2
A595     EQU   *
         LA    R2,NQLENGTH(R2)          * BLOCK ADDR.+L'NETID-ENTRY
         CH    R2,=H'2040'              * BLOCK OVERFLOW ?
         BNH   A596                     * NO
         @DUMP DJCID,WJOBNAME,'DJC011D OVERFLOW FIRST BLOCK',WDUMP
         SPACE 2
A596     EQU   *
         ST    R2,PTNAVQUE              * BLOCK ADDR.NEXT A.N-ENTRY
         SPACE
A600     EQU   *
         MVC   NQNETID,DJCID
         SPACE
         L     R2,PTNAVBLK              *
         @GET  (R2),(R9)                * ADDR.NQNETHDR.
         L     R4,BHNXTBLK              *
         XC    BHNXTBLK,BHNXTBLK        * FOLGE-BLOCK = 0
         ST    R4,PTNAVBLK              * NAECHST.FREIER BLOCK
         LA    R9,BHLENGTH(R9)          * BLOCK+L'HDR
         LA    R2,BHLENGTH(R2)          *
         ST    R2,NQNETHDR              * ADDR.ASSO.NETIDHDR-ELEMENT
         XC    NETIDHDR(NHLENGTH),NETIDHDR
         MVC   NHNETID,DJCID            * NETID <- DJCBLK
         LA    R2,NHLENGTH(R2)          *
         ST    R2,NHNAVJSP              * NEXT AVAIL.SPACE JOB-ELEMENTE
         ST    R2,NHFIRSTJ              * FIRST JOBQUEUE-ENTRY
         LA    R2,NHTSCREA              * TIME-STAMP
         BAL   R14,D04                  * OF CREATION THIS NETIDHDR
         MVC   NHTSLUPD,NHTSCREA        * SAME AS LAST UPDATE T-STAMP
         SPACE
A610     EQU   *
         L     R2,NHFIRSTJ              * ADDR.FIRST JOBQUEUE-ELEMENT
         SPACE
A620     EQU   *
         @GET  (R2),(R10)
         ST    R2,ZWBAJQB               * BLOCK-ADRESSE
         ST    R10,ZWBAJQR              * RELATIVE ADRESSE
         CLC   JQJNAME,WJOBNAME         * JOB-ENTRY BEREITS VORHANDEN
         BNE   A625                     * NEIN
         TM    JQSTATUS,B'00010000'     * JOBQUEUE-ENTRY UPDATEN ?
         BO    A641                     * JA
         OI    JQSTATUS,X'01'           * OLD JOB-ENTRY
         SPACE
A625     EQU   *
         L     R2,JQNXTQUE              * ADDR.NEXT JOBQUEUE-ELEMENT
         LTR   R2,R2                    * LAST ACTIV-ELEMENT ?
         BZ    A630                     * JA
         B     A620
         SPACE
A630     EQU   *
         L     R2,NHNAVJSP              * NEXT AVAIL.SPACE
         @GET  (R2),(R10),JQLENGTH      * ADDR.NEXT JOBQUEUE-ELEMENT
         B     *+4(R15)                 * NOCH GENUEGEND PLATZ IM BLOCK
         B     A640                     * JA
         BAL   R14,D03                  * NEIN NAECHSTEN BLOCK HOLEN
         B     A630
         SPACE
A640     EQU   *
         XC    JOBQUEUE(JQLENGTH),JOBQUEUE
A641     EQU   *
         MVC   JQJNAME,WJOBNAME         * JOBNAME
         MVC   JQJNBR,WJOBNR            * JES2 JOBNR.
         MVC   JQDJCHC,DJCHC            * HOLD-COUNT
         MVC   JQDJCCC,DJCCC            * HIGHEST CONDITION-CODE
         CLI   DJCOH,C'Y'               * OPERATOR HOLD ?
         BNE   A642                     * NO
         OI    JQSTATUS,X'80'           * OH = L
A642     EQU   *
         CLI   DJCDM,C'Y'               * DUMMY JOB ?
         BNE   A643                     * NO
         OI    JQSTATUS,X'40'           * DM = L
A643     EQU   *
         TM    JQSTATUS,B'00010000'     * JOBQUEUE ENTRY UPDATEN ?
         BNO   A644                     * NEIN
         NI    JQSTATUS,B'11101111'     * UPDATE = 0
         B     A650
A644     EQU   *
         CLC   NHNAVJSP,NHFIRSTJ        * FIRST ENTRY JOBQUEUE
         BE    A645                     * JA
         LR    R4,R10                   * SAVE ADDR.THIS JOBQUEUE-ELEM
         L     R10,ZWBAJQR              * LOAD ADDR.PREV.JOBQUEUE-ELEM
         ST    R2,JQNXTQUE              * FORWARD CHAIN
         LR    R10,R4                   * LOAD ADDR.THIS JOBQUEUE-ELEM
         MVC   JQPREQUE,ZWBAJQB         * BACKWARD CHAIN
A645     EQU   *
         LA    R2,JQTSHLD               * TIME-STAMP
         BAL   R14,D04                  * OF CREATION THIS JOBQU.ENTRY
         LH    R2,NHCNTHLD              * COUNTER HELD-JOB'S
         LA    R2,1(R2)                 * + 1
         STH   R2,NHCNTHLD              *
         MVC   JQNBRHLD,NHCNTHLD        * NUMBER OF HELD-JOB
         L     R2,NHNAVJSP
         LA    R2,JQLENGTH(R2)
         ST    R2,NHNAVJSP
A650     EQU   *
         BAL   R14,D05
         MVC   ZWNET,NQNETID            * NETID
*
*
*        J O B - R E L E A S E - R O U T I N E
*
*
         CLC   JQDJCHC,JQACCHC          * *DJC-H-C. > ACC-H-C.
         BH    A750                     * YES / NO JOB RELEASE
         CLI   JQTSREL,X'00'            * JOB RELEASED ?
         BNE   A750                     * YES
         LA    R2,JQTSREL               * TIMESTAMP JOB RELEASED
         BAL   R14,D04
         LH    R2,NHCNTREL              * COUNTER RELEASED JOB
         LA    R2,1(R2)                 * COUNTER +1
         STH   R2,NHCNTREL              * SAVE COUNTER
         MVC   JQNBRREL,NHCNTREL        * NUMBER OF RELEASED JOB
         MVC   ZWJOB,JQJNAME            * JOBID
         SPACE 2
         @RELJOB ZWNET,ZWNET,WAIT
         SPACE 2
A750     EQU   *                        *
         @GET  LOCK,OFF
         SPACE 2
A800     EQU   *                        *
         FREEMAIN R,A=(R6),LV=DJCLEN,SP=241 * FREEMAIN DJCBLK
         SPACE 2
A900     EQU   *                        *
         L     R3,PARMSAVE              * ADDR.PARM-LISTE
         L     R3,0(R3)                 * ADDR.COMMON-EXIT-PARM-AREA
         SPACE
         MVC   20(8,R3),ZWNET           * NETID/BLANK-> CEPA
         SPACE
         LR    R7,R13                   * ADRESSE GETMAIN BEREICH
         L     R13,4(R13)               * ADR. LOWER SAVE-AREA
         FREEMAIN R,A=(R7),LV=WORKLEN,SP=241 * FREEMAIN WORK
         B     CRTRN1
         EJECT
***********************************************************************
*        D01#  SUCHT ##N-STRING UND ERSETZT DIESEN DURCH WERT AUS     *
*              DEM JOBNAMEN ,WOBEI N DAS DISPLACEMENT IM JOBNAMEN     *
*              ANGIBT                                                 *
***********************************************************************
D01      EQU   *
         ST    R14,D01SAVE
         LA    R7,70                    * L'FUER EXTRT1 -1
         LR    R9,R4                    * ANF.ADR.JCL-STATEMENT
D010010  EQU   *
         EX    R7,EXTRT1                * SUCHEN '#'
         BE    D01RTRN                  * NICHT GEFUNDEN
         MVC   WFELD#,2(R1)             * ZEICHEN # + 2 -> WFELD#
         CLC   0(2,R1),=C'##'           * '#' PAARIG ?
         BNE   D010020                  * NEIN
         CLI   WFELD#,C'1'              * < 1 ?
         BL    D010020                  * JA
         CLI   WFELD#,C'8'              * > 8 ?
         BNH   D010030                  * NEIN
D010020  EQU   *
         LA    R9,1(R1)                 * NAECHSTES ZEICHEN JCL-STAT.
         LA    R7,70(R4)                * END.ADR.JCL-STATEMENT
         SR    R7,R9                    * RESTL.LAENGE FUER EXTRT1
         BCTR  R7,0                     * L'FUER EXTRT1 - 1
         B     D010010
D010030  EQU   *
         NI    WFELD#,X'0F'             * DEZIMAL -> BINAER
         LR    R8,R3                    * ADR.COMMON-AREA(JOBNAME)
         LA    R7,0                     *
         ICM   R7,1,WFELD#              * DISP.FUER ZEICHEN IN JOBNAME
         AR    R8,R7                    * ADR.JOBNAME + DISP.
         BCTR  R8,0                     * -1
         MVC   0(1,R1),0(R8)            * UEBERTRAGEN ZEICHEN AUS JOBN.
*                                       * IN JOB-STRING(1.ZEICHEN #)
         LA    R1,1(R1)                 * ERHOEHEN ADR. 1.# + 1
         LR    R9,R1                    * ERHOEHEN SUCH-ADR.##N-STRING
         LA    R2,2(R1)                 * ERHOEHEN ADR. 1.# + 3
         LA    R8,70(R4)                * END-ADR.JCL-STATEMENT
         SR    R8,R1                    * ERRECHNEN L'FUER EXMOVE1
         BCTR  R8,0                     * -1
         EX    R8,EXMOVE1               * SHIFT LINKS UM 2 STELLEN
         LR    R7,R8                    * L'FUER NAECHSTEN EXTRT1
         MVC   69(2,R4),=C'  '          * RECHTS BLANK AUFFUELLEN
         B     D010010                  * SUCHEN WEITEREN ##N-STRING
D01RTRN  EQU   *
         L     R14,D01SAVE
         BR    R14
         SPACE 3
EXTRT1   TRT   0(0,R9),TAB#
EXMOVE1  MVC   0(0,R1),0(R2)
         SPACE 3
TAB#     DC    256XL1'00'               * TABELLE: SUCHEN ##N-STRING
         ORG   TAB#+C'#'
         DC    X'FF'
         ORG
         EJECT
***********************************************************************
*        D02 : SELEKTIERT DJC-DATEN AUS DEM JOB-STATEMENT UND STELLT  *
*              DIESE WERTE FUER DIE NACHFOLGENDE PLAUSIBILITAETS-     *
*              PRUEFUNG,SOWIE DEN AUFBAU DER ENTSPRECHENDEN KONTROLL- *
*              BLOECKE IN EINEN GETMAIN WORK-BEREICH                  *
***********************************************************************
D02      EQU   *
         ST    R14,D02SAVE
         CLI   2(R4),C' '
         BE    JOBCONT
         CLI   2(R4),C'*'
         BE    JOBCONT
         MVC   WJOBNR,76(R4)
JOBCONT  EQU   *
         CLC   15(5,R4),=C'*DJC '       * DJC-WERTE VORHANDEN ?
         BNE   D02RTRN                  * NEIN
         LA    R6,WDJC+5                * ANFANGSADR.SUCHEN BLANK
         LA    R7,5                     * LOOP TRT'S
D020010  EQU   *
         TRT   0(137,R6),TABB           * BLANK-GEFUNDEN ?
         BNE   D020020                  * JA
         LA    R6,137(R6)               * ERHOEHEN SUCH-ADRESSE
         BCT   R7,D020010               * LOOP
         B     D02FEHL                  * FEHLER
D020020  EQU   *
         LR    R6,R1                    * ADR.WOHIN FUER EX(MVC)
         TRT   20(51,R4),TABC           * SUCHEN 1.CHAR.^ BLANK
         BE    D02FEHL                  * FEHLER
         LR    R7,R1                    * ADDR.1.CHAR.^BLANK
         LA    R1,51(R4)                * END-ADDR.DJC-DATEN
         SR    R1,R7                    * L'FUER EXTRT2
         BCTR  R1,0                     * L'EXTRT2-1
         EX    R1,EXTRT2                * SUCHT 1.BLANK NACH DJC-DATEN
         SR    R1,R7                    * L'DJC-DATEN
         BCTR  R1,0                     * L'EXMOVE2-1
         OI    WSTATUS,X'01'            * DJC = L
         EX    R1,EXMOVE2               * UEBERTRAGEN DJC-WERTE
         B     D02RTRN
D02FEHL  EQU   *
         L     R15,4(R13)               * HIGHER SAVE-AREA
         MVI   19(R15),4                * CONDITIONEN-CODE
         LA    R15,4                    * FEHLER
D02RTRN  EQU   *
         L     R14,D02SAVE              * UPRO-RETURN
         BR    R14
         SPACE 3
EXTRT2   TRT   0(1,R7),TABB             * SUCHT 1.BLANK NACH DJC-DATEN
EXMOVE2  MVC   0(0,R6),0(R7)            * UEBERTRAGEN DJC-WERTE
         SPACE 3
TABB     DC    256XL1'00'               * TABELLE (BLANK)
         ORG   TABB+C' '
         DC    X'FF'
         ORG
         SPACE 3
TABC     DC    256XL1'FF'               * TABELLE (CHARACTER)
         ORG   TABC+C' '
         DC    X'00'
         ORG
         EJECT
***********************************************************************
* D03 STELLT BEI BLOCKUEBERLAUF DEN NAECHSTEN VERFUEGBAREN BLOCK      *
*     BEREIT UND KETTET DIESEN MIT DEM VORHERGEHENDEN                 *
***********************************************************************
D03      EQU   *
         ST    R14,D03SAVE
         SRL   R2,16                    * BLOCK-ANFANG DIESES BLOCKES
         SLL   R2,16
         @GET  (R2)                     * ANFANGSADRESSE BLOCK
         L     R4,PTNAVBLK              * NAECHSTER VERFUEGBARAER BLOCK
         ST    R4,BHNXTBLK              * KETTEN FOLGE BLOCK
         LTR   R4,R4                    * LETZTER BLOCK ?
         BNZ   D030010                  * NEIN
         @DUMP DJCID,WJOBNAME,'DJC012D NO SPACE AVAILABLE',WDUMP
         SPACE 2
D030010  EQU   *
         @GET  (R4)                     * ANFANGSADRESSE NAECHST.BLOCK
         L     R4,BHNXTBLK              * LADEN ADR.NAECHST.BLOCK
         XC    BHNXTBLK,BHNXTBLK        * LOESCHEN FOLGE-BLOVK ADR.
         ST    R4,PTNAVBLK              * SICHERN NAECHST.VERF.BLOCK
         L     R2,BHRB00                * LADEN NAECHST.VERF.SPACE
         LA    R2,BHLENGTH(R2)          * ERHOEHEN ADR. UM BLOCKHDR.
         ST    R2,NHNAVJSP              * NAECHST.FREIER SPACE
         L     R14,D03SAVE
         BR    R14
         EJECT
***********************************************************************
* D04 HOLT UHRZEIT+DATUM FUER TIMESTAMP                               *
***********************************************************************
D04      EQU   *
         ST    R14,D04SAVE
         TIME  DEC
         STM   R0,R1,0(R2)
         L     R14,D04SAVE
         BR    R14
         EJECT
***********************************************************************
* D05  STELLT JOB-ENTRY SPEZIFISCHE WERTE FUER D05A BEREIT            *
***********************************************************************
D05      EQU   *
D05NR    EQU   *                        * NR-JOBS
         ST    R14,D05SAVE              * SAVE UPRO-RETURN
         CLI   DJCNR,C' '               * NR-JOB(DJCBLK) VORHANDEN ?
         BE    D05AR                    * NEIN
         L     R2,NHNAVJSP              * NAECHST.VERFUEGBARER JE-SPACE
         BAL   R14,D05C                 * PRUEFUNG AUF BLOCK-UEBERLAUF
         ST    R2,JQFNRJOB              * WIRD ADDR.1.JOB-ENTRY NR.
         LA    R4,DJCNR                 * ADDR.JOBNAME(DJCBLK)
         LA    R5,20                    * MAX.JOBNAMEN
         MVC   HLENGTH,=H'9'            * L'JOB-ELEMENT NR.
         BAL   R14,D05A                 * ERSTELLEN NR-JOB-ENTRIES
D05AR    EQU   *                        * AR-JOBS
         CLI   DJCAR,C' '               * AR-JOB(DJCBLK) VORHANDEN ?
         BE    D05NC                    * NEIN
         L     R2,NHNAVJSP              * NAECHST.VERFUEGBARER JE-SPACE
         BAL   R14,D05C                 * PRUEFUNG AUF BLOCK-UEBERLAUF
         ST    R2,JQFARJOB              * WIRD ADDR.1.JOB-ENTRY AR
         LA    R4,DJCAR                 * ADDR.JOBNAME(DJCLBK)
         LA    R5,20                    * MAX.JOBNAMEN
         MVC   HLENGTH,=H'9'            * L'JOB-ELEMENT AR(DJCBLK)
         BAL   R14,D05A                 * ERSTELLEN AR-JOB-ENTRIES
D05NC    EQU   *                        * NC-JOBS
         CLI   DJCNE,C' '               * NC-JOB(DJCBLK) VORHANDEN ?
         BE    D05AC                    * NEIN
         L     R2,NHNAVJSP              * NAECHST.VERFUEGBARER JE-SPACE
         BAL   R14,D05C                 * PRUEFUNG AUF BLOCK-UEBERLAUF
         ST    R2,JQFNCJOB              * WIRD ADDR.1.JOB-ENTRY NC
         LA    R4,DJCNC                 * ADDR.JOBNAME(DJCBLK)
         LA    R5,20                    * MAX.JOBNAMEN
         MVC   HLENGTH,=H'9'            * L'JOB-ELEMENT NC (DJCBLK)
         BAL   R14,D05A                 * ERSTELLEN NC-JOB-ENTRIES
D05AC    EQU   *                        * AC-JOBS
         CLI   DJCAC,C' '               * AC-JOB(DJCBLK) VORHANDEN ?
         BE    D05NE                    * NEIN
         L     R2,NHNAVJSP              * NAECHST.VERFUEGBARER JE-SPACE
         BAL   R14,D05C                 * PRUEFUNG AUF BLOCK-UEBERLAUF
         ST    R2,JQFACJOB              * WIRD ADDR.1.JOB-ENTRY AC
         LA    R4,DJCAC                 * ADDR.JOBNAME(DJCBLK)
         LA    R5,20                    * MAX.JOBNAMEN
         MVC   HLENGTH,=H'9'            * L'JOB-ELEMENT AC(DJBLK)
         BAL   R14,D05A                 * ERSTELLEN AC-JOB-ENTRIES
D05NE    EQU   *                        * NE-JOBS
         CLI   DJCNE,C' '               * NE-JOB(DJCBLK) VORHANDEN ?
         BE    D05EX                    * NEIN
         L     R2,NHFNEJOB              * ADDR.1.JOB-ENTRY NE
         LTR   R2,R2                    * 1.JOB-ENTRY NE
         BNZ   D05NE10                  * NEIN
         L     R2,NHNAVJSP              * NAECHST.VERFUEGBARER JE-SPACE
         BAL   R14,D05C                 * PRUEFUNG AUF BLOCK-UEBERLAUF
         ST    R2,NHFNEJOB              * WIRD ADDR.1.JOB-ENTRY NE
D05NE10  EQU   *
         ST    R2,ZWFIRSTJ              * SICHERN ADDR.1.JOB-ENTRY NE
         LA    R4,DJCNE                 * ADDR.JOBNAMEN(DJCBLK)
         LA    R5,20                    * MAX.JOBNAMEN NE(DJCBLK)
         MVC   HLENGTH,=H'8'            * L'JOB-ELEMENT NE(DJCBLK)
         BAL   R14,D05A                 * ERSTELLEN NE-JOB-ENTRIES
D05EX    EQU   *                        * EX-JOBS
         CLI   DJCEX,C' '               * EX-JOB (DJCBLK) VORHANDEN
         BE    D05RTRN                  * NEIN
         L     R2,NHFEXJOB              * ADDR.1.JOB-ENTRY EX
         LTR   R2,R2                    * 1.JOB-ENTRY EX
         BNZ   D05EX10                  * NEIN
         L     R2,NHNAVJSP              * NAECHST.VERFUEGBARER JE-SPACE
         BAL   R14,D05C                 * PRUEFUNG AUF BLOCK-UEBERLAUF
         ST    R2,NHFEXJOB              * WIRD ADDR.1.JOB-ENTRY.EX
D05EX10  EQU   *
         ST    R2,ZWFIRSTJ              * SICHERN ADDR.1.JOB-ENTRY EX
         LA    R4,DJCEX                 * ADDR.JOBNAMEN(DJCBLK)
         LA    R5,20                    * MAX.JOBNAMEN EX(DJCBLK)
         MVC   HLENGTH,=H'8'            * L'JOB-ELEMENT EX (DJCBLK)
         BAL   R14,D05A                 * ERSTELLEN EX-JOB-ENTRIES
D05RTRN  EQU   *
         L     R14,D05SAVE              * UPRO-RETURN
         BR    R14
         EJECT
***********************************************************************
*  D05A  ERSTELLT JOB-ENTRY FUER NR,NC,AR,AC JOB'S                    *
***********************************************************************
D05A     EQU   *
         ST    R14,D05ASAVE
         CLC   ZWFIRSTJ,NHNAVJSP   * FIRST JOB-ENTRY
         BE    D05A2               * YES
D05A1    EQU   *            *** ONLY NE + EX JOB'S ***
         @GET  (R2),(R3)           * GET ADDR.JOB-ENTRY
         ST    R2,ZWBAJEB          * ADDR.PREVIOUS JOB-ENTRY/BLOCK-ADDR
         ST    R3,ZWBAJER          * ADDR.PREVIOUS JOB-ENTRY/RELATIV
         L     R2,JENXTQUE         * ADDR.NEXT JOB-ENTRY
         LTR   R2,R2               * LAST ENTRY
         BZ    D05A2               *
         B     D05A1
D05A2    EQU   *
         CLI   0(R4),C' '          * LAST JOB-NAME (DJCBLK)
         BE    D05A5               * YES
         L     R2,NHNAVJSP
         @GET  (R2),(R3),JELENGTH  * GET NEXT AVAIL.SPACE JOB-ENTRY
         B     *+4(R15)            * CHECK FOR ENOUGH SPACE
         B     D05A3               * SPACE IN THIS BLOCK AVAIL.
         ST    R4,R4SAVE           * SAVE REG.4
         BAL   R14,D03             * SPACE IN NEXT AVAIL.BLOCK
         L     R4,R4SAVE           * RETURN REG.4
         B     D05A2
D05A3    EQU   *
         XC    JOBENTRY(JELENGTH),JOBENTRY
         MVC   JEJNAME,0(R4)       * JOBNAME FROM DJCBLK
         SPACE
         BAL   R14,D05B            * ERSETZEN @-ZEICHEN
         SPACE
         CLC   HLENGTH,=H'8'       * NE,EX JOB'S ?
         BE    D05A31              * YES
         OC    JESTATUS(1),8(R4)   * JOB-ATTRIBUTE (DJCBLK)
D05A31   EQU   *
         CLC   ZWFIRSTJ,NHNAVJSP   * FIRST JOB-ENTRY
         BE    D05A4               * YES
         LR    R1,R3               * SAVE ADDR.THIS JOB-ENTRY
         L     R3,ZWBAJER          * LOAD ADDR.BACKWARD JOB-ENTRY
         ST    R2,JENXTQUE         * CHAIN FORWARD
         LR    R3,R1               * LOAD ADDR.THIS JOB-ENTRY
         MVC   JEPREQUE,ZWBAJEB    * CHAIN BACKWARD
D05A4    EQU   *
         ST    R2,ZWBAJEB          * ADDR.PREVIOUS JOB-ENTRY/BLOCK-ADDR
         ST    R3,ZWBAJER          * ADDR.PREVIOUS JOB-ENTRY/RELATIV
         LA    R2,JELENGTH(R2)     * ADDR.OF THIS JOB-ENTRY +
         ST    R2,NHNAVJSP         * L'JOB-ENTRY = NEXT AVAIL. SPACE
         AH    R4,HLENGTH          * ADDR.NEXT JOB-NAME (DJCBLK)
         BCT   R5,D05A2            * LOOP
D05A5    EQU   *
         L     R14,D05ASAVE        * UPRO-RETURN
         BR    R14
         EJECT
***********************************************************************
* D05B:SUCHT @-ZEICHEN UND ERSETZT DIESE DURCH IN DER SELBEN          *
*      POSITION STEHENDE ZEICHEN AUS DEM JOBNAME                      *
*      FUER DAS VERAENDERTE BYTE WIRD IM BYTE JESUBST DAS             *
*      ENTSPRECHENDE BIT AUF ON GESETZT                               *
***********************************************************************
D05B     EQU   *
         ST    R14,D05BSAVE
         STM   R1,R6,REGSAVE1
         L     R1,PARMSAVE
         L     R1,0(R1)            * ADR.JOBNAME COMMON-EXIT-AREA
         LA    R1,7(R1)            * ADDR.LETZTES BYTE JOBNAME
         LA    R2,JEJNAME+7        * ADR.JOBNAME JOB-ENTRY L.BYTE
         LA    R4,8                * L'JOBNAME(MAX)
         LA    R5,1                * BIT POSITION
         LA    R6,0                * WERTIGKEIT BYTE(JESUBST)
D05B010  EQU   *
         CLI   0(R2),C'@'          * @-ZECHEN ?
         BNE   D05B020             * NEIN
         OR    R6,R5               * SUB.BYTE SETZEN
         MVC   0(1,R2),0(R1)       * UEBERSCHREIBEN @-ZEICHEN
D05B020  EQU   *
         SLL   R5,1                * ERHOEHEN WERTIGKEIT
         BCTR  R1,0                * ADDR.JOBNAME C.E.A.-1
         BCTR  R2,0                * ADDR.JOBNAME JEJNAME -1
         BCT   R4,D05B010          * LOOP
         STCM  R6,1,JESUBST        * UEBERTRAGEN JESUBST
         LM    R1,R6,REGSAVE1
         L     R14,D05BSAVE
         BR    R14
         EJECT
***********************************************************************
* D05C PRUEFUNG AUF BLOCK-UEBERLAUF BEIM ERSTELLEN EINES JOB-ENTRIES  *
***********************************************************************
D05C     EQU   *
         ST    R14,D05CSAVE
         @GET  (R2),(R3),JELENGTH
         B     *+4(R15)            * BRANCH CONDITION
         B     D05C9               * 0 = ENOUGH SPACE IN THIS BLOCK
         BAL   R14,D03             * CHAIN THE NEXT BLOCK
D05C9    EQU   *
         ST    R2,ZWFIRSTJ         * SAVE ADDRESS OF FIRST JOB-ENTRY
         L     R14,D05CSAVE
         BR    R14
         EJECT
***********************************************************************
* D06:FUEHRT PURGE EINES NETZES DURCH,WENN DJCNN=YES UND DIE GLEICHE  *
*     NETID BEREITS VORHANDEN IST                                     *
***********************************************************************
D06      EQU   *
         ST    R14,D06SAVE
         STM   R2,R9,REGSAVE1          * SICHERN REGISTER
D0610    EQU   *
         CR    R2,R4                   * LAST ENTRY NET-QUEUE ?
         BE    D06RTRN                 * YES
         CLC   NQNETID,DJCID           * ACT. NET FOUND ?
         BE    D0620                   * YES
         LA    R2,NQLENGTH(R2)         * NEXT ENTRY
         LA    R8,NQLENGTH(R8)         * NEXT ENTRY
         B     D0610
         SPACE
D0620    EQU   *
         WTO   MF=(E,PRGERR)
         L     R15,4(R13)
         MVI   19(R15),4
         B     A750
D06RTRN  EQU   *
         LM    R2,R9,REGSAVE1          * RELOAD SAVED REGISTERS
         L     R14,D06SAVE
         BR    R14
         EJECT
***********************************************************************
*        DATEN-DEFINITIONEN                                           *
***********************************************************************
         SPACE 3
LINKL    LINK  EPLOC=*,SF=L            * LINK LIST FORM
SPDJC06  DC    CL8'SPDJC06 '
BLKLEN   EQU   2040                    * LENGTH OF NET-DATEN-BLOCK
         SPACE 2
INVID    WTO   'DJC014I NETID NOT FOUND AND NN=NO',ROUTCDE=11,MF=L
PRGERR   WTO   'DJC013E NET IS STILL ACTIVE',                          *
               ROUTCDE=11,MF=L
         SPACE 2
         LTORG
         SPACE 5
***********************************************************************
*        PATCH-AREA                                                   *
***********************************************************************
PATCH    DS    0D
         DC    10CL5'PATCH'
         EJECT
***********************************************************************
*        DATEN-DEFINITIONEN                                           *
***********************************************************************
WORK     DSECT
SAVE     DS    18F                      * SAVE-AREA
D01SAVE  DS    F                        * UPRO SAVE
D02SAVE  DS    F                        * UPRO SAVE
D03SAVE  DS    F                        * UPRO SAVE
D04SAVE  DS    F                        * UPRO SAVE
D05SAVE  DS    F                        * UPRO SAVE
D05ASAVE DS    F                        * UPRO SAVE
D05BSAVE DS    F                        * UPRO SAVE
D05CSAVE DS    F                        * UPRO SAVE
D06SAVE  DS    F                        * UPRO SAVE
REGSAVE1 DS    10F                      * REGISTER SAVE
REGSAVE2 DS    6F                       * REGISTER SAVE
R4SAVE   DS    F                        * REG.4 SAVE
PARMSAVE DS    F                        * ADDR.PARM-LISTE
ZWBAJQB  DS    F                        * BLOCK-ADDR.L.JOBQUEUE-ENTRY
ZWBAJQR  DS    F                        * RELATIVE-ADDR.L.JOBQUEUE-ENT.
ZWBAJEB  DS    F                        * BLOCK-ADDR.L.
ZWBAJER  DS    F                        * RELATIVE-ADDR.
ZWFIRSTJ DS    F                        * ADDR.1.ENTRY IN ENTSPR.QUEUE
WDUMP    DS    3F                       * DUMP FIELDS
WLINK    DS    2F                       * LINK LIST FORM
HLENGTH  DS    H                        * LAENGE JOB-ELEMENT(DJCBLK)
WFELD#   DS    C                        * WORK-FELD
ZWNET    DS    CL8                      * NETID PARM SPDJC07T
ZWJOB    DS    CL8                      * JOBID PARM SPDJC07T
WJOBNR   DS    CL4                      * JES2 JOBNR.
WSTATUS  DS    C                        * STATUS
WDJC6    EQU   *
WJOBNAME DS    CL8                      * JOBNAME
WDJC     DS    CL2048                   * DJC-WERTE AUS JOB-KARTE
         DS    0D                       * ALIGNMENT
WORKLEN  EQU   *-WORK                   * LENGTH WORK-AREA
         EJECT
         COPY  @DJCBLK
         SPACE 3
         COPY  @DJCDS
         END
./ ADD  NAME=SPDJC02
SPDJC02  TITLE 'IEFACTRT MODULE FOR DEPENDED JOB CONTROL'
***********************************************************************
*                                                                     *
*              P R O L O G                                            *
*                                                                     *
***********************************************************************
*                                                                     *
*              PARAMETERS     SAME AS FOR IEFACTRT                    *
*                             DESCRIPTION IN MANUAL  S M F            *
*                                                                     *
*              I/O            ALL I/O WILL BE MADE BY CALLING SPDJC03 *
*                                                                     *
*              MACROS         SAVE,GETMAIN,FREEMAIN,EQUATE,           *
*                             @GET,@READ,@WRITE,@DUMP,                *
*                             IF,DO,ENDE,ELSE                         *
*                                                                     *
*              DESCRIPTION    THIS MODULE IS CALLED BY THE            *
*                             SMF-EXIT IEFACTRT. ALSO IT CAN BE       *
*                             INSTALLED INSTEAD OF IEFACTRT.          *
*                             IT WILL BE OBSERVE THE COMPLETION CODE  *
*                             OF EACH JOBSTEP OF A DJC-JOB.           *
*                             THE HIGHEST COMPLETION CODE WILL BE     *
*                             MONITORED IN JOBNET DATASET.            *
*                             AT JOB TERMINATION IS THE HIGHEST CC    *
*                             COMPARED WITH THE GIVEN *DJC CC AND     *
*                             THEN THE REQUIRED ACTIONS WILL BE TAKEN.*
*                                                                     *
***********************************************************************
         EJECT
SPDJC02  CSECT
         SAVE  (14,12),,SPDJC02.&SYSDATE_&SYSTIME
         LR    R3,R15                  SAVE ENTRY-POINT
         SPACE 1
         USING SPDJC02,R3              ADDRESSIBILITY
         USING NETQUEUE,R6
         USING NETIDHDR,R7
         USING JOBQUEUE,R8
         USING JOBENTRY,R9
         USING POINTER,R10
         USING BLOCKHDR,R11
         SPACE 1
         LR    R4,R0                   SAVE ENTRY-CODE
*                                      12 = JOBSTEP TERMINATION
*                                      16 = JOB TERMINATION
*                                      20 = JOB PURGE EXIT
         LR    R5,R1                   SAVE PARAMETER
         USING SMFPARM,R5              ADDRESSIBILITY
         L     R6,SMFCEPA              COMMON EXIT PARAMETER AREA
         IF    (20(8,R6),=,C' '),THEN  *** ONLY FOR TEST ***
FASTRET  LM    R14,R12,12(R13)         RESTORE REGISTERS
         SR    R15,R15    REMAINING STEPS ARE TO BE EXECUTED
         BR    R14                     RETURN
         ENDE
         TM    30(R6),X'08'
         BNO   NOWARM
CANCEL   LM    R14,R12,12(R13)
         LA    R15,4
         BR    R14
NOWARM   EQU   *
         L     R1,16
         L     R1,X'C4'(R1)
         L     R1,X'80'(R1)
         LA    R1,0(R1)
         LTR   R1,R1
         BZ    CANCEL
         CLI   0(R1),X'FF'
         BE    FASTRET
         GETMAIN R,LV=WORKLEN          GET WORK-SPACE
         LR    R8,R1                   PREPARE
         LA    R9,WORKLEN                FOR MVCL
         MVCL  R8,R14                  CLEAR
         LR    R8,R1                   RESTORE
         ST    R13,4(R8)               HIGHER SAVEAREA
         ST    R8,8(R13)               LOWER SAVERA
         LR    R13,R8                  NEW SAVEAREA
         USING WORK,R13                ADDRESSIBILITY
         STC   R4,WENTRYC              SAVE ENTRY CODE
         CH    R4,=H'12'               EXAMINE ENTRY CODE
         BE    STEPTERM                STEP TERMINATION
         CH    R4,=H'16'
         BE    JOBTERM                 JOB TERMINATION
         CH    R4,=H'20'
         BE    JOBPURGE                JOB PURGE EXIT
         CH    R4,=H'24'
         BE    JOBINIT
         SPACE 3
RETURN   EQU   *
         L     R4,4(R13)               SAVE HIGHER SAVEAREA
         FREEMAIN R,LV=WORKLEN,A=(R13)
         LR    R13,R4                  HIGHER SAVEAREA
         LR    R15,R6                  EXECUTE REMAINING STEPS OR NOT
         L     R14,12(R13)             RESTORE REGISTERS
         LM    R0,R12,20(R13)
         BR    R14                     RETURN
         EJECT
***********************************************************************
*                                                                     *
*              STEPTERM                                               *
*                                                                     *
***********************************************************************
         SPACE 3
STEPTERM EQU   *                       STEP TERMINATION
         L     R7,SMFREC               RECORD ADDRESS (TYPE 4)
         LA    R7,4(R7)                SKIP RDW
         CLC   62(4,R7),=CL4'$HK$'
         BE    DNTWRY
         IF    (83(R7),O,X'01'),THEN   STEP WAS NOT EXECUTED
         MVC   WCONDC,=X'FFFF'
         ELSE
DNTWRY   EQU   *
         IF    (83(R7),O,X'02'),THEN   AN ABEND OCCURRED
         MVC   WCONDC,51(R7)           COMPLETION CODE
         IF    (WCONDC,O,X'80'),THEN
         OI    WCONDC,X'E0'            USER-CODE
         ELSE
         OI    WCONDC,X'F0'            SYSTEM-CODE
         ENDE
         ELSE
         MVC   WCONDC,51(R7)           COMPLETION CODE
         NI    WCONDC,X'0F'            CLEAR HIGH ORDER BITS
         ENDE
         ENDE
         IF    (WCONDC,^=,X'0'),THEN   JOBQUEUE MUST BE UPDATED
         MVC   WNETID,20(R6)           GET NETID FROM CEPA
         MVC   WJOBNAME,0(R6)          GET JOBNAME
         @GET  LOCK,ON
         BAL   R12,FINDJOB             GIVE ME THE ADDRESS OF JOBQUEUE
         SR    R6,R6                   RETURN-CODE = 0
         IF    (JQHIGHCC,^>,JQDJCCC),THEN
         IF    (JQHIGHCC,<,WCONDC),THEN
         MVC   JQHIGHCC,WCONDC         UPDATE COMPLETION CODE
         ENDE
         IF    (JQHIGHCC,>,JQDJCCC),THEN REMAINING STEPS ARE FLUSHED
         LA    R6,4                    RETURN-CODE = 4
         WTO   'DJC025I JOB TERMINATED BY DJC BECAUSE OF CONDITION-CODE*
               S',ROUTCDE=11
         ENDE
         ENDE
         @GET  LOCK,OFF
         ENDE
         B     RETURN
         EJECT
JOBINIT  EQU   *
         MVC   WNETID,20(R6)
         MVC   WJOBNAME,0(R6)
         SR    R6,R6
         @GET  LOCK,ON
         BAL   R12,FINDJOB
         TM    JQSTATUS,X'08'       SHOULD JOB HAVE BEEN CANCELLED?
         BNO   NOCNC
         MVC   WCNCWTO,CNCWTO
         LA    R1,WCNCWTO
         B     JCLERR
NOCNC    EQU   *
         LH    R1,JQACCHC
         LH    R0,JQDJCHC
         CR    R1,R0
         BNL   RETINIT
         MVC   WNRWTO,NRWTO
         LA    R1,WNRWTO
JCLERR   MVC   16(8,R1),WNETID
         MVC   29(8,R1),WJOBNAME
         SVC   35
         LA    R6,4
         OI    JQSTATUS+1,X'08'     INDICATE JCLERROR
RETINIT  EQU   *
         @GET  LOCK,OFF
         B     RETURN
         EJECT
***********************************************************************
*                                                                     *
*              JOBTERM                                                *
*                                                                     *
***********************************************************************
         SPACE 3
JOBTERM  EQU   *
         MVC   WNETID,20(R6)           GET NETID FROM CEPA
         MVC   WJOBNAME,0(R6)          GET JOBNAME
         @GET  LOCK,ON
         BAL   R12,FINDJOB             SEARCH FOR JOBQUEUE-ELEMENT
JOBTERMP EQU   *                       ENTRY FOR JOBPURGE-EXIT
         LH    R1,NHCNTOUT             COUNT FOR READY JOBS
         LA    R1,1(R1)                INCREASED BY 1
         STH   R1,NHCNTOUT             UPDATE COUNT
         STH   R1,JQNBROUT             UPDATE NUMBER OF READY JOBS
         IF    (JQDJCCC,<,JQHIGHCC),THEN
         OI    JQSTATUS,X'02'          ABNORMAL TERMINATION
         ELSE
         OI    JQSTATUS,X'04'          NORMAL TERMINATION
         ENDE
         TIME
         STM   R0,R1,JQTSOUT           TIMESTAMP JOB TERMINATED
         SPACE 1
*              CANCEL UNUSED JOBS
         SPACE 1
         TM    JQSTATUS+1,X'08'   DID JOB HAVE JCLERR BY DJC?
         BO    QDO9X   DO NOT RELEASE/CANCEL ANYTHING
         IF    (JQSTATUS,O,X'04'),THEN THE JOB HAS NORMAL TERMINATED
         L     R1,JQFNCJOB
         IF    ((R1),=,F'0'),THEN      AR-QUEUE WILL BE CANCELLED
         L     R5,JQFARJOB             ABNORMAL RELEASE
         ELSE
         L     R5,JQFNCJOB             NORMAL CANCEL
         ENDE
         ELSE
         L     R5,JQFACJOB             ABNORMAL CANCEL
         ENDE
         DO    ((R5),=,F'0')           LOOP UNTIL QUEUE IS EMPTY
         @GET  (R5),(R9)
         L     R4,NHFIRSTJ             FIRST JOBQUEUE ENTRY
         DO    ((R4),=,F'0')           LOOP UNTIL QUEUE IS EMPTY
         @GET  (R4),(R8)
         IF    (JEJNAME,=,JQJNAME),THEN
         IF    (JQSTATUS,Z,X'07'),THEN THE JOB IS ALREADY EXECUTED OR
         TIME
         STM   R0,R1,JQTSOUT           TIMESTAMP JOB TERMINATED
         OI    JQSTATUS,X'08'          JOB CANCELLED
         OI    JESTATUS,X'01'          JOB CANCELLED
         IF    (JQTSREL,=,X'0'),THEN
         MVC   ZWJOBNM,JQJNAME
         MVC   ZWJOBNR,JQJNBR
         @CANJOB WNETID,PURGE=YES
         ELSE
         MVC   ZWJOBNM,JQJNAME
         MVC   ZWJOBNR,JQJNBR
         @CANJOB WNETID,PURGE=NO
         ENDE
         ENDE
         ENDE
         L     R4,JQNXTQUE             NEXT JOBQUEUE ELEMENT
         ENDE
         OI    JESTATUS,X'02'          NOT EXECUTED (PREDECESSOR)
         L     R5,JENXTQUE             NEXT JOBENTRY ELEMENT
         ENDE
         SPACE 1
*              RELEASE REQUIRED JOBS
         SPACE 1
         L     R8,WJOBADDR             ADDRESS OF JOBQUEUE ELEMENT
         IF    (JQSTATUS,O,X'04'),THEN THE JOB HAS NORMAL TERMINATED
         L     R5,JQFNRJOB             NORMAL RELEASED JOBS
         ELSE
         L     R5,JQFARJOB             ABNORMAL RELEASED JOBS
         ENDE
QDO7X     EQU   *
         C     R5,=F'0'
         BE    QDO9X
         @GET  (R5),(R9)
         L     R4,NHFIRSTJ             FIRST JOB IN 'JOBQUEUE'
         DO    ((R4),=,F'0')           SEARCH JOB IN 'JOBQUEUE'
         @GET  (R4),(R8)
         ST    R4,WLASTENT             FOR 'PREVIOUS JOB'
         ST    R8,WLASTENT+4
         IF    (JEJNAME,=,JQJNAME),THEN
         IF    (JQSTATUS,Z,X'0F'),THEN
         IF    (JESTATUS,O,X'80'),THEN THE ATTRIBUTE 'HOLD' IS GIVEN
         OI    JQSTATUS,X'80'          SET OPERATOR HOLD
         ENDE
         LH    R1,JQACCHC              ACCUMULATED HOLD-COUNT
         LA    R1,1(R1)                INCREASE BY ONE
         STH   R1,JQACCHC              NEW HOLD-COUNT
         LH    R0,JQDJCHC              HOLD-COUNT FROM *DJC-CARD
         IF    ((R1),^<,(R0)),THEN     IS HOLD-COUNT REACHED
         IF    (JQTSREL,=,X'0'),THEN
         MVC   ZWJOBNM,JQJNAME
         MVC   ZWJOBNR,JQJNBR
         @RELJOB WNETID,WNETID         RELEASE THE JOB
         LH    R1,NHCNTREL             COUNT FOR RELEASED JOBS
         LA    R1,1(R1)                INCREASED BY 1
         STH   R1,NHCNTREL             UPDATE COUNT
         STH   R1,JQNBRREL             UPDATE NUMBER OF RELEASED JOBS
         OI    JESTATUS,X'08'          JOB IS RELEASED
         TIME
         STM   R0,R1,JQTSREL           SET TIMESTAMP
         ENDE
         ENDE
         B     NEXTJOB
         ENDE
         ENDE
         L     R4,JQNXTQUE             NEXT JOB IN QUEUE
         ENDE
         SPACE 1
*              JOB NOT YET IN 'JOBQUEUE'
         SPACE 1
NEWJOBQ  L     R4,NHNAVJSP             NEXT AVAILABLE SPACE
         @GET  (R4),(R8),JQLENGTH
         IF    ((R15),^=,F'0'),THEN    GET A NEW BLOCK
         ICM   R4,3,=H'0'              = BLOCK ORIGIN
         @GET  (R4),(R11)
         LA    R1,BHLENGTH             ADDR OF 'POINTER'
         @GET  (R1),(R10)
         L     R1,PTNAVBLK             NEXT AVAILABLE BLOCK
         @GET  (R1)
         ST    R0,BHNXTBLK             QUEUE IT TO THE FULL BLOCK
         L     R0,BHNXTBLK-BLOCKHDR(R1) THE NEXT ONE IS THE
         ST    R0,PTNAVBLK             NEW PTNAVBLK
         SR    R0,R0
         ST    R0,BHNXTBLK-BLOCKHDR(R1) END OF QUEUE
         L     R4,BHRB00-BLOCKHDR(R1)  ADDRESS OF THE NEW BLOCK
         LA    R4,BHLENGTH(R4)         + LENGTH OF BLOCKHDR
         ST    R4,NHNAVJSP             = NEXT AVAILABLE SPACE
         B     NEWJOBQ                 TRY IT AGAIN
         ENDE
         LR    R14,R4                  SAVE JOBQUEUE ADDRESS
         LA    R4,JQLENGTH(R4)         + LENGTH OF JOBQUEUE
         ST    R4,NHNAVJSP             = NEXT AVAILABLE SPACE
         XC    0(JQLENGTH,R8),0(R8)    CLEAR JOBQUEUE ENTRY
         MVC   JQJNAME,JEJNAME
         LM    R0,R1,WLASTENT          ADDRESSES FROM LAST ENTRY
         ST    R0,JQPREQUE             QUEUE THE NEW ENTRY
         ST    R14,JQNXTQUE-JOBQUEUE(R1) TO THE PREVIOUS
         OI    JQSTATUS,X'10'          INDICATOR FOR SPDJC01
         IF    (JESTATUS,O,X'80'),THEN THE ATTRIBUTE 'HOLD' IS GIVEN
         OI    JQSTATUS,X'80'          SET OPERATOR HOLD
         ENDE
         MVC   JQSUBST,JESUBST         MOVE SUBSTITUTION BYTE
         MVC   JQDJCHC,=X'0FFF'        WILL BE REPLACED LATER
         MVC   JQACCHC,=X'0001'        ACTUAL HOLD-COUNT
         TIME
         STM   R0,R1,JQTSHLD           TIMESTAMP
         LH    R1,NHCNTHLD             INCREASE COUNT HELD JOBS
         LA    R1,1(R1)
         STH   R1,NHCNTHLD
         STH   R1,JQNBRHLD             NUMBER HELD JOBS
         MVC   WJEJNAME,JEJNAME
         CLI   JQSUBST,X'00'
         BE    DJCSUBX
         SR    R14,R14
         SR    R15,R15
         ICM   R15,8,JQSUBST           SUBSTITUTION BYTE
         LA    R2,WJEJNAME             JOBNAME
         DO    ((R15),=,F'0')
         SLDL  R14,1
         IF    ((R14),^=,F'0'),THEN    ALTER THIS CHARACTER TO '@'
         MVI   0(R2),C'@'
         SR    R14,R14
         ENDE
         LA    R2,1(R2)                NEXT CHARACTER OF JOBNAME
         ENDE
DJCSUBX  OI    JESTATUS,X'40'          READ BY DJCSUB
         MVC   WDJCSUB,DJCSUB          LIST FORM
         MVC   WDJCSUB+16(8),WJEJNAME  JOBNAME
         LA    R1,9
         LA    R14,WDJCSUB+16
         DO    ((R1))
         IF    (0(R14),=,C' '),THEN    BLANK IS FOUND
         MVC   0(3,R14),=C',N='
         MVC   3(8,R14),JEJNAME        SUBSTITUTED NAME
         SR    R1,R1                   LEAVE DO-LOOP
         ENDE
         LA    R14,1(R14)              NEXT CHARACTER
         ENDE
         LA    R1,9
         LA    R14,3(R14)
         DO    ((R1))
         IF    (0(R14),=,C' '),THEN
         MVC   0(4,R14),=C',ID='
         MVC   4(8,R14),WNETID
         SR    R1,R1
         ENDE
         LA    R14,1(R14)
         ENDE
         LA    R1,WDJCSUB
         SR    R0,R0
         SVC   34
         MVC   WNFWTO,NFWTO            MOVE WTO LIST FORM
         LA    R1,WNFWTO
         MVC   16(8,R1),WNETID         MOVE NETID
         MVC   29(8,R1),JEJNAME        MOVE JOBNAME
         SVC   35
NEXTJOB  EQU   *
         L     R5,JENXTQUE             NEXT JOB TO RELEASE
         B     QDO7X
QDO9X     @GET  LOCK,OFF                RELEASE THE LOCK
         B     RETURN                  GO BACK
         EJECT
***********************************************************************
*                                                                     *
*              JOBPURGE                                               *
*                                                                     *
***********************************************************************
         SPACE 3
JOBPURGE EQU   *
         MVC   WNETID,20(R6)           GET NETID FROM CEPA
         MVC   WJOBNAME,0(R6)          GET JOBNAME
         @GET  LOCK,ON
         OI    WSWITCH,PURGE
         BAL   R12,FINDJOB             SEARCH FOR JOBQUEUE-ELEMENT
         NI    WSWITCH,255-PURGE
         IF    (JQSTATUS,Z,X'02'),AND,                                 C
               (JQSTATUS,Z,X'04'),THEN PURGE WITHOUT JOB TERMINATION
         L     R1,SMFSTEPN    GET ADDR. OF SMF-REC. 26
         CLC   56(4,R1),JQJNBR
         BNE   LOFF
         OI    JQSTATUS,X'20'          PURGE INDICATOR
         IF    (JQSTATUS+1,Z,X'C0'),THEN
         IF    (JQTSREL,=,X'0'),THEN   THE JOB ISN'T RELEASED
         B     LOFF
         MVC   JQHIGHCC,=X'FFFF'
         B     JOBTERMP                SIMULATE JOB TERMINATION
         ENDE
         ELSE
         MVC   JQHIGHCC,=X'0000'
         B     JOBTERMP                SIMULATE JOB TERMINATION
         ENDE
         ENDE
LOFF     @GET  LOCK,OFF
         B     RETURN
         EJECT
***********************************************************************
*                                                                     *
*              FINDJOB                                                *
*                                                                     *
***********************************************************************
         SPACE 3
FINDJOB  EQU   *
         LA    R2,BHLENGTH+PTLENGTH    FIRST ENTRY IN NETQUEUE
         DO    ((R2),>,F'2040')
         @GET  (R2),(R6)               GET 'NETQUEUE'
         IF    (NQNETID,=,WNETID),THEN THIS IS THE ONE WE SEARCH
         ST    R6,WNQADDR              SAVE ADDRESS OF NETQUEUE ENTRY
         L     R2,NQNETHDR             GET THE ASSOCIATED 'NETIDHDR'
         @GET  (R2),(R7)
         ST    R7,WNHADDR              SAVE ADDRESS OF NETIDHDR
         TIME
         STM   R0,R1,NHTSLUPD          SET TIMESTAMP 'LAST USE'
         L     R2,NHFIRSTJ             FIRST JOB IN 'JOBQUEUE'
         DO    ((R2),=,F'0')
         @GET  (R2),(R8)               GET 'JOBQUEUE'
         IF    (JQJNAME,=,WJOBNAME),THEN WE CATCHED THEM
         ST    R8,WJOBADDR             AND SAVE THE ADDRESS
         IF    (JQSTATUS,Z,X'01'),THEN THIS JOB ISN'T OVERLAYED
         BR    R12                     GO BACK TO CALLER
         ELSE
         IF    (WSWITCH,O,PURGE),AND,                                  C
               (JQSTATUS+1,Z,X'01'),THEN JOB IS NOT YET PURGED
         BR    R12                     GO BACK TO CALLER
         ENDE
         ENDE
         ENDE
         L     R2,JQNXTQUE             NEXT ENTRY IN 'JOBQUEUE'
         ENDE
         TM    WSWITCH,PURGE
         BO    FLOCKOFF
         MVC   WWTO1,WTO1
         MVC   WWTO1+16(8),WNETID
         MVC   WWTO1+29(8),WJOBNAME
         LA    R1,WWTO1
         SVC   35
         B     FLOCKOFF
         ENDE
         LA    R2,NQLENGTH(R2)         NEXT ENTRY IN 'NETQUEUE'
         ENDE
         TM    WSWITCH,PURGE
         BO    FLOCKOFF
         MVC   WWTO2,WTO2
         MVC   WWTO2+16(8),WNETID
         MVC   WWTO2+29(8),WJOBNAME
         LA    R1,WWTO2
         SVC   35
FLOCKOFF EQU   *
        @GET   LOCK,OFF,FAST
         B     RETURN
         EJECT
***********************************************************************
*                                                                     *
*              DEFINITIONS                                            *
*                                                                     *
***********************************************************************
         SPACE 3
         LTORG
         SPACE 3
NFWTO    WTO   'DJC021I NET=12345678 JOB=12345678 NOT IN JOBQUEUE ',   C
               ROUTCDE=11,MF=L
LNFWTO   EQU   *-NFWTO
DJCSUB   WTO   ' S DJCSUB,M=12345678                        ***DJC***',C
               ROUTCDE=11,MF=L
LDJCSUB  EQU   *-DJCSUB
NRWTO    WTO   'DJC024I NET=12345678 JOB=12345678 JCL-ERROR - HOLDCOUNT*
                IS TOO LOW',ROUTCDE=(2,11),MF=L
LNRWTO   EQU   *-NRWTO
CNCWTO   WTO   'DJC026I NET=12345678 JOB=12345678 JCL-ERROR BECAUSE IT *
               SHOULD HAVE BEEN CANCELLED',ROUTCDE=11,MF=L
LCNCWTO  EQU   *-CNCWTO
WTO1     WTO   'DJC022D NET=12345678 JOB=12345678 JOB NOT IN NETID',   *
               ROUTCDE=11,MF=L
WTO1L    EQU   *-WTO1
WTO2     WTO   'DJC023D NET=12345678 JOB=12345678 NETID NOT FOUND',    *
               ROUTCDE=11,MF=L
WTO2L    EQU   *-WTO2
         SPACE 3
WORK     DSECT
WSAVE    DS    18F
WJOBADDR DS    F
WDUMPP   DS    3A
WNQADDR  DS    A
WNHADDR  DS    A
WLASTENT DS    2F
WNETID   DS    CL8
ZWJOBNM  DS    CL8
ZWJOBNR  DS    CL4
WJOBNAME DS    CL8
WJEJNAME DS    CL8
WCONDC   DS    XL2
WSWITCH  DS    X
PURGE    EQU   X'80'
WENTRYC  DS    X
WNFWTO   DS    CL(LNFWTO)
WDJCSUB  DS    CL(LDJCSUB)
WNRWTO   DS    CL(LNRWTO)
WCNCWTO  DS    CL(LCNCWTO)
WWTO1    DS    CL(WTO1L)
WWTO2    DS    CL(WTO2L)
         DS    0D
WORKLEN  EQU   *-WORK
         SPACE 3
SMFPARM  DSECT
SMFCEPA  DS    A
SMFSTEPN DS    A
SMFPRGMR DS    A
SMFCPUJ  DS    XL3,X
SMFACCTJ DS    A
SMFCPUS  DS    XL3,X
SMFACCTS DS    A
SMFINDST DS    A
SMFCONDC DS    A
SMFREC   DS    A
         SPACE 3
         REG
         SPACE 3
         COPY  @DJCDS
         SPACE 3
         COPY  SMCAEXT
         END
./ ADD  NAME=SPDJC03
SPDJC03  TITLE 'I/O-MODULE FOR DEPENDED JOB CONTROL'
***********************************************************************
*                                                                     *
*              P R O L O G                                            *
*                                                                     *
***********************************************************************
*                                                                     *
*              PARAMETERS     NOPR-INSTRUCTION IN R14                 *
*                             0700 = GET BLKADDR                      *
*                             0701 = GET LOCK                         *
*                             0702 = RELEASE LOCK                     *
*                             0703 = TERMINATE WITH DUMP              *
*                                                                     *
*              I/O  UPDATE    JOBNETDS  BDAM (READ,WRITE)             *
*                             DCB=(RECFM=F,BLKSIZE=...)               *
*                                                                     *
*              MACROS         OPEN,CLOSE,READ WRITE,SAVE,             *
*                             GETMAIN,FREEMAIN,RESERVE,DEQ,           *
*                             IF,DO,ENDE,ELSE                         *
*                                                                     *
*              DESCRIPTION    THIS IS THE I/O-MODULE FOR ALL DJC-     *
*                             PROGRAMS. IT IS CALLED VIA THE @GET-    *
*                             AND @WRITE-MACRO.                       *
*                             AT THE FIRST CALL THE 'JOBNETCB' IS     *
*                             CREATED IN CSA; SMCAEXT.JOBNETCB POINTS *
*                             TO IT.                                  *
*                                                                     *
***********************************************************************
         EJECT
SPDJC03  CSECT
         SAVE  (14,12),,SPDJC03.&SYSDATE_&SYSTIME
         LR    R3,R15                   SAVE ENTRY-POINT
         USING SPDJC03,R3               ADDRESSIBILITY
         USING SMCAEXT,R2               ADDRESSIBILITY SMCA-EXTENTION
         USING HSA,R12                  ADDRESSIBILITY HIGHER SAVEAREA
AGAIN    L     R2,16                    CVTPTR
         L     R2,X'C4'(R2)             SMCA
         L     R2,X'80'(R2)             SMCAEXT
         SR    R14,R14            CHECK THAT
         LA    R15,1              NO ONE ELSE
         CS    R14,R15,SMCALOCK    LOADS THE JNCB
         BE    LOAD               AT THIS TIME
         STIMER WAIT,BINTVL=LOCKWT
         B     AGAIN
LOAD     EQU   *
         L     R4,SMCAJNCB              POINTER TO JOBNETCB
         USING JNCB,R4                  ADDRESSIBILITY (TEMPORARY)
         IF    ((R4),=,F'0'),THEN       CREATE JOBNETCB
         LOAD  EPLOC=SPDJC99            CSECT WHO DEFINES JOBNETCB
         LR    R6,R0                    LOAD START-ADDRESS
         LR    R4,R0                    TEMPORARY ADDRESSIBILITY
         GETMAIN EU,LV=JCLENGTH,A=JCGETMA,BNDRY=PAGE,MF=(E,JCGETML)
         L     R4,JCGETMA               A(JOBNETCB)
         LR    R14,R4                   PREPARE FOR MVCL
         LA    R15,JCLENGTH             L'JOBNETCB
         LR    R7,R15                   LOAD IMPLICID LENGTH
         MVCL  R14,R6                   MOVE INTO CSA
         DELETE EPLOC=SPDJC99
         ST    R4,SMCAJNCB              POINTS TO JOBNETCB
         ST    R3,JCADDRIO-JNCB(R4)     ADDRESS OF I/O-MODULE
         ENDE
         XC    SMCALOCK(4),SMCALOCK
         L     R5,12(R13)               LOAD RETURN-ADDR (NOPR-INSTR.)
         IF    (1(R5),=,X'01'),THEN     THIS IS A LOCK-ON-REQUEST
         GETMAIN R,LV=72,SP=241
         LR    R4,R1
         XC    0(72,R4),0(R4)           CLEAR INTERIM SAVEAREA
         ENDE
         ST    R4,8(R13)                CHAIN LOWER SA
         LM    R0,R1,20(R13)            RELOAD R0/R1
         ST    R13,4(R4)                CHAIN HIGHER SA
         LR    R12,R13                  SAVE ADDRESS OF SAVEAREA
         LR    R13,R4                   NEW SA
         DROP  R4
         USING JNCB,R13                 ADDRESSIBILITY JOBNETCB
         SR    R2,R2                    CLEAR
         IC    R2,1(R5)                 NOPR - CODE
         SLA   R2,2                     * 4 FOR BRANCHTABLE
         B     *+4(R2)                  NOPR-CODE
         B     @GETBLK                  0
         B     @GETLOCK                 1
         B     @GETLREL                 2
         B     @DUMP                    3
         SPACE 3
RETURN   EQU   *
         L     R13,4(R13)               HIGHER SAVEAREA
         LM    R14,R12,12(R13)          RESTORE REGISTERS
         BR    R14                      RETURN
         EJECT
***********************************************************************
*                                                                     *
*              @GETBLK                                                *
*                                                                     *
***********************************************************************
         SPACE 3
@GETBLK  EQU   *
*                                       R0 = BLOCK ADDRESS
*                                       R1 = BYTES REQUIRED
         ST    R0,JCBLKADR              REQUIRED BLOCK
         STH   R1,JCBLKREQ              R1 = 0 × L'SPACE REQUIRED
         LH    R4,JCLSTBLK              LAST BLOCK IN JOBNETDS
         IF    ((R4),=,F'0'),THEN
         OI    JCSTATUS,X'40'
         @DUMP UNKNOWN,UNKNOWN,'DJC034D PTLSTBLK IS ZERO',JCWORK
         ENDE
         SRL   R0,16                    CONVERT ADDR TO BLKADDR
         IF    ((R0),>,(R4)),THEN       THIS IS AN INVALID REQUEST
         LA    R15,8                    RETURN CODE
         ST    R15,HSRETCD
         MVC   HSREG1,FFFFFF            FEEDBACK = FFFFFF
         B     RETURN                   RETURN TO CALLER
         ENDE
         L     R4,JCFIRBLK              FIRST BLOCK IN STORAGE
         IF    ((R4),=,F'0'),THEN       THIS IS THE FIRST CALL
         LH    R0,JCBLKLEN              BLKSIZE OF JOBNETDS
         AH    R0,=H'8'                 + BLKPOINTER
         SLA   R0,2                     MULTIPLY BY 4
         GETMAIN EU,LV=(0),A=JCGETMA,BNDRY=PAGE,MF=(E,JCGETML)
         L     R4,JCGETMA               FIRST BLOCK IN STORAGE
         ST    R4,JCFIRBLK
         LH    R1,JCBLKLEN              BLKSIZE OF JOBNETDS
         SR    R6,R6                    CLEAR R6
         LA    R8,3                     DO THREE TIMES
         DO    ((R8))                   R8 = 3
         LA    R7,8(R1,R4)              ADDR. OF NEXT BUFFER
         ST    R7,0(R4)                 STORE IN PREV. BUFFER-POINTER
         ST    R6,4(R4)                 CLEAR REMAINDER OF BUFFER-POINT
         MVI   7(R4),1                  SET STATUS = EMPTY
         LR    R4,R7                    ADDR. OF NEXT BUFFER
         ENDE
         ST    R6,0(R4)                 NO BUFFER FOLLOWS
         ST    R6,4(R4)                 CLEAR REMAINDER
         MVI   7(R4),1                  SET STATUS = EMPTY
         L     R4,JCFIRBLK              FIRST BLOCK IN STORAGE
         MVC   JCBLKCNT,=H'4'           INITIAL BLOCKCOUNT
         ENDE
         SPACE 2
@GETFIND EQU   *
         DO    ((R4),=,F'0')            UNTIL END OF QUEUE IS REACHED
         IF    (7(R4),^=,X'01'),THEN
         LA    R7,8(R4)                 ADDR. OF BLOCKHDR
         LH    R0,0(R7)                 ADDRESS OF THIS BLOCK
         LH    R14,JCBLKADR             BLOCKNUMBER REQUIRED
         IF    ((R0),=,(R14)),THEN
         LH    R15,JCBLKADR+2           DISPLACEMENT
         AH    R15,JCBLKREQ             + LENGTH OF SPACE REQ.
         IF    ((R15),>,JCBLKLEN),THEN
         LA    R15,4                    RETURN-CODE = 4
         MVC   HSREG1,FFFFFF            PARAMETER = FFFFFF
         ELSE
         SR    R15,R15                  RETURN-CODE = 0
         AH    R7,JCBLKADR+2            ADD DISPLACEMENT
         ST    R7,HSREG1                R1 OF HIGHER SAVEAREA
         ENDE
         ST    R15,HSRETCD              RETURN-CODE
         B     RETURN                   BLOCK FOUND - RETURN
         ENDE
         ENDE
         L     R4,0(R4)                 NEXT BLOCK
         ENDE
         EJECT
*              BLOCK IS NOT IN STORAGE = FIND AN EMPTY BUFFER
         SPACE
@GETAGAI L     R4,JCFIRBLK              FIRST BUFFER IN STORAGE
         DO    ((R4),=,F'0')            UNTIL END OF QUEUE IS REACHED
         IF    (7(R4),=,X'01'),THEN     INDICATES EMPTY
         ST    R4,JCBLKIO               SAVE ADDR. FOR READ
         B     @GETREAD
         ENDE
         L     R4,0(R4)                 NEXT BUFFER
         ENDE
         L     R4,JCFIRBLK              FIRST BUFFER
         DO    ((R4),=,F'0')            UNTIL END OF QUEUE IS REACHED
         IF    (7(R4),Z,X'06'),THEN     INDICATES ^MODIFY AND ^FIX
         ST    R4,JCBLKIO               SAVE ADDR. FOR READ
         B     @GETREAD
         ENDE
         L     R4,0(R4)                 NEXT BUFFER
         ENDE
         SPACE 3
*              GET ADDITIONAL BUFFERS
         SPACE
         LH    R0,JCBLKLEN              BLKSIZE OF JOBNETDS
         AH    R0,8                     + BLKPOINTER
         SLA   R0,1                     MULTIPLY BY 2
         GETMAIN EU,LV=(0),A=JCGETMA,BNDRY=PAGE,MF=(E,JCGETML)
         L     R5,JCGETMA               FIRST ADDITIONAL BUFFER
         LH    R1,JCBLKLEN              BLKSIZE OF JOBNETDS
         SR    R6,R6                    CLEAR
         LA    R7,8(R1,R5)              ADDR. OF SECOND BUFFER
         ST    R7,0(R5)                 CHAINED IN FIRST BUFFER
         ST    R6,4(R5)                 CLEAR REMAINDER
         MVI   7(R5),1                  SET STATUS = EMPTY
         LH    R6,JCBLKCNT              INCREASE
         LA    R6,2(R6)                 BLOCKCOUNT
         STH   R6,JCBLKCNT              BY 2
         XC    0(7,R7),0(R7)            CLEAR SECOND BUFFER-POINTER
         MVI   7(R7),1                  SET STATUS = EMPTY
         L     R4,JCFIRBLK              FIRST BLOCK IN STORAGE
         L     R7,0(R4)                 NEXT BLOCK
         DO    ((R7),=,F'0')            UNTIL NEXTBLK = 0
         L     R4,0(R4)                 NEXT BLOCK
         L     R7,0(R4)
         ENDE
         ST    R5,0(R4)                 QUEUE THE NEW BUFFERS AFTER THE
         B     @GETAGAI                 LAST OLD AND TRY IT AGAIN
         SPACE 3
*              READ BLOCK IN BUFFER
         SPACE
@GETREAD EQU   *
         LH    R5,JCBLKADR              ADDR. OF BLOCK TO BE READ
         STCM  R5,7,JCRELBLK            CONVERTED TO RELATIVE BLKADDR.
         L     R6,JCBLKIO               IO-AREA (BUFFER) FOR INPUT
         MVI   7(R6),4                  THIS BUFFER IS IN USE
         LA    R6,8(R6)                 LENGTH OF BLK-POINTER
         READ  JCRDECB1,DI,JCNETDS,(R6),,,JCRELBLK,MF=E
         CHECK JCRDECB1
         B     @GETFIND
         EJECT
***********************************************************************
*                                                                     *
*              @GETLOCK                                               *
*                                                                     *
***********************************************************************
         SPACE 3
@GETLOCK EQU   *
         SR    R2,R2                    COUNTER FOR STIMER (WTO)
@GETLSTI EQU   *                        GET JNCB ADDRESS
         LA    R2,1(R2)                 INCREASE COUNTER
         L     R5,16                    CVT ADDRESS
         L     R5,X'C4'(R5)             SMCA ADDRESS
         L     R5,X'80'(R5)             SMCAUSER
         L     R5,12(R5)                JNCB ADDRESS
         L     R1,=F'-1'                X'FFFFFFFF'
         L     R4,JCREQU-JNCB(R5)       LOCKWORD
         IF    ((R4),^=,F'0'),THEN      THE LOCK ISN'T AVAILABLE
         STIMER WAIT,DINTVL=FIVESEC
         IF    ((R2),>,F'12'),THEN      = 1 MINUTE
         SR    R2,R2                    ZERO COUNTER
         WTO   'DJC031I JOBNETDS NOT AVAILABLE',                       *
               ROUTCDE=(1,11)
         ENDE
         B     @GETLSTI                 TRY IT AGAIN
         ENDE
         CS    R4,R1,JCREQU-JNCB(R5)    CHANGE THE LOCKWORD
         BNZ   @GETLSTI                 TRY IT AGAIN
         SPACE 3
*              NOW WE CAN GET THE LOCK
         SPACE
         LR    R1,R13                   ADDRESS OF INTERIM SAVEAREA
         LR    R13,R5                   JNCB ADDRESS
         L     R4,4(R1)                 HIGHER SAVEAREA
         ST    R13,8(R4)                CHAIN LOWER SAVEAREA
         ST    R4,4(R13)                CHAIN HIGHER SAVEAREA
         FREEMAIN R,LV=72,A=(1),SP=241
         ST    R3,JCADDRIO              ENTRY POINT
         SPACE
         OPEN  (JCNETDS,(UPDAT)),MF=(E,JCOPENL)
         IF    (JCNETDS+48,Z,X'10'),THEN OPEN WAS UNSUCCESSFUL
*        OI    JCSTATUS,X'40'     INDICATE NO DUMP REQU.
         @DUMP UNKNOWN,UNKNOWN,'DJC033D JOBNETDS OPEN FAILED',JCWORK
         ENDE
         LH    R1,JCNETDS+62            = BLKSIZE
         STH   R1,JCBLKLEN              IN JOBNET-CONTROL-BLOCK
         SR    R2,R2                    CLEAR COUNTER
@GETLAGA EQU   *
         LA    R2,1(R2)                 INCREASE COUNTER
         EXTRACT JCTIOADR,FIELDS=TIOT,MF=(E,JCEXTRL)
         L     R1,JCTIOADR
         AH    R1,JCNETDS+40            = DD-ENTRY
         SR    R4,R4
         ICM   R4,7,17(R1)              = UCB-ADDRESS
         ST    R4,JCUCBADR              SAVE UCB-ADDRESS
         RESERVE (QNAME,RNAME,,19,SYSTEMS),UCB=JCUCBADR,MF=(E,JCRESL)
         XC    JCRELBLK,JCRELBLK        BLOCK 0 IS TO BE
         L     R4,JCFIRBLK              READ INTO FIRST BLOCK
         IF    ((R4),=,F'0'),THEN       THIS IS THE FIRST CALL
         LH    R0,JCBLKLEN              BLKSIZE OF JOBNETDS
         AH    R0,=H'8'                 + BLKPOINTER
         SLA   R0,2                     MULTIPLY BY 4
         GETMAIN EU,LV=(0),A=JCGETMA,BNDRY=PAGE,MF=(E,JCGETML)
         L     R4,JCGETMA               FIRST BLOCK IN STORAGE
         ST    R4,JCFIRBLK
         LH    R1,JCBLKLEN              BLKSIZE OF JOBNETDS
         SR    R6,R6                    CLEAR R6
         LA    R8,3                     DO THREE TIMES
         DO    ((R8))                   R8 = 3
         LA    R7,8(R1,R4)              ADDR. OF NEXT BUFFER
         ST    R7,0(R4)                 STORE IN PREV. BUFFER-POINTER
         ST    R6,4(R4)                 CLEAR REMAINDER OF BUFFER-POINT
         MVI   7(R4),1                  SET STATUS = EMPTY
         LR    R4,R7                    ADDR. OF NEXT BUFFER
         ENDE
         ST    R6,0(R4)                 NO BUFFER FOLLOWS
         ST    R6,4(R4)                 CLEAR REMAINDER
         MVI   7(R4),1                  SET STATUS = EMPTY
         L     R4,JCFIRBLK              FIRST BLOCK IN STORAGE
         MVC   JCBLKCNT,=H'4'           INITIAL BLOCKCOUNT
         ENDE
         LA    R6,8(R4)                 BLK-POINTER-LENGTH
         READ  JCRDECB1,DI,JCNETDS,(R6),,,JCRELBLK,MF=E
         CHECK JCRDECB1
         L     R1,16                    CVT
         L     R1,X'C4'(R1)             SMCA
         MVC   JCLOCK,16(R1)            SYSTEM-ID = LOCK
         USING POINTER,R7
         LA    R7,BHLENGTH(R6)          BLOCKHDR
         TM    JCSTATUS,X'80'    LOCKOFF,FORCE IN CONTROL??
         BNO   NOFORCE
         NI    JCSTATUS,X'7F'
         B     FORCE
NOFORCE  EQU   *
         IF    (PTLOCK,=,X'0'),OR,(PTLOCK,=,JCLOCK),THEN
FORCE    MVC   PTLOCK,JCLOCK            MOVE LOCK
         WRITE JCWDECB2,DI,JCNETDS,(R6),,,JCRELBLK,MF=E    WRITE BACK
         CHECK JCWDECB2
         MVC   JCLSTBLK,PTLSTBLK        LAST BLOCK IN JOBNETDS
         LH    R4,JCLSTBLK
         IF    ((R4),=,F'0'),THEN
         OI    JCSTATUS,X'40'
         @DUMP UNKNOWN,UNKNOWN,'DJC034D PTLSTBLK IS ZERO',JCWORK
         ENDE
         DROP  R7
         LA    R4,JCUCBADR
         DEQ   (QNAME,RNAME,19,SYSTEMS),UCB=(R4),MF=(E,JCDEQL)
         SH    R6,=H'8'                 BUFFER-POINTER
         MVI   7(R6),0
         OI    7(R6),2+4                BUFFERSTATUS=FIXED+MODIFIED
         ELSE
         DEQ   (QNAME,RNAME,,SYSTEMS),UCB=JCUCBADR,MF=(E,JCDEQL)
         STIMER WAIT,DINTVL=FIVESEC
         IF    ((R2),>,F'12'),THEN      = 1 MINUTE
         SR    R2,R2                    ZERO COUNTER
         WTO   'DJC032I JOBNETDS RESERVED FROM ANOTHER SYSTEM',        *
               ROUTCDE=(1,11)
         ENDE
         B     @GETLAGA
         ENDE
         L     R14,JCTIOADR             TIOT ADDRESS
         MVC   JCJOBNAM,0(R14)          SAVE JOBNAME
         TIME
         STM   R0,R1,JCLOCKTS           TIMESTAMP OBTAINING THE LOCK
         XC    HSRETCD,HSRETCD          RETURN-CODE
         B     RETURN
         EJECT
***********************************************************************
*                                                                     *
*              @GETLREL                                               *
*                                                                     *
***********************************************************************
         SPACE 3
@GETLREL EQU   *
*                                       R1 = 0 -> NORMAL LOCK OFF
*                                       R1 = 4 -> FAST LOCK OFF
*                                       R1 = 8 -> FAST LOCK OFF AND
*                                                 TERMINATION
         LR    R8,R1                    SAVE ENTRY CODE
         L     R4,JCFIRBLK              FIRST BLK IN STORAGE
         DO    ((R4),=,F'0')            WRITE BACK ALL MODIFIED BLOCKS
         IF    (7(R4),^=,X'01'),THEN    BUFFER NOT EMPTY
         IF    (7(R4),O,X'04'),THEN     BLOCK IS MODIFIED
         IF    ((R8),=,F'0'),THEN       IT ISN'T A FAST LOCK OFF
         LA    R5,8(R4)                 I/O-BUFFER FOR WRITE
         USING BLOCKHDR,R5
         MVC   JCRELBLK+1(2),BHRB00     RELATIV BLOCK-ADDRESS
         WRITE JCWDECB2,DI,JCNETDS,(R5),,,JCRELBLK,MF=E
         CHECK JCWDECB2
         ENDE
         ENDE
         ENDE
         MVI   7(R4),1                  BUFFER-STATUS IS EMPTY
         L     R4,0(R4)                 NEXT BUFFER
         ENDE
         RESERVE (QNAME,RNAME,,19,SYSTEMS),UCB=JCUCBADR,MF=(E,JCRESL)
         XC    JCRELBLK,JCRELBLK        BLOCK 0 IS TO BE READ
         L     R6,JCFIRBLK              FIRST BUFFER IN STORAGE
         LA    R6,8(R6)                 I/O-ADDRESS FOR READ
         READ  JCRDECB1,DI,JCNETDS,(R6),,,JCRELBLK,MF=E
         CHECK JCRDECB1
         LA    R7,BHLENGTH(R6)          ADDRESS OF POINTER-SEGMENT
         USING POINTER,R7
         XC    PTLOCK,PTLOCK            CLEAR LOCK = AVAILABLE
         DROP  R7
         WRITE JCWDECB2,DI,JCNETDS,(R6),,,JCRELBLK,MF=E
         CHECK JCWDECB2
         DEQ   (QNAME,RNAME,19,SYSTEMS),UCB=JCUCBADR,MF=(E,JCDEQL)
         CLOSE (JCNETDS),MF=(E,JCCLOSEL)
         SPACE
         MVC   JCJOBNAM,=CL8' '         CLEAR JOBNAME
         L     R4,JCREQU                LOCKWORD
         SR    R1,R1                    0 = AVAILABLE
         CS    R4,R1,JCREQU
         XC    HSRETCD,HSRETCD          RETURN-CODE
         IF    ((R8),=,F'8'),THEN       TERMINATE THIS TASK
         ABEND 1000
         ENDE
         B     RETURN
         EJECT
***********************************************************************
*                                                                     *
*              @DUMP                                                  *
*                                                                     *
***********************************************************************
         SPACE 3
@DUMP    EQU   *                       TERMINATE WITH DUMP
*                                      R1 = ADDRESS OF THREE FULLWORDS
*                                           1. ADDRESS OF NETID
*                                           2. ADDRESS OF JOBNAME
*                                           3. ADDRESS OF ERROR MSG
*                                              (LENGTH(ONE BYTE),TEXT)
*                                      R0 = ENTRY-CODE (20 = PURGE)
         ST    R0,JCWORK+252           SAVE ENTRY-CODE
         LM    R5,R7,0(R1)             LOAD PARAMETERS
         LA    R4,JCWORK               WORKAREA FOR DUMP-HEADER
         MVI   0(R4),C' '              CLEAR
         MVC   1(49,R4),0(R4)
         USING DUMPHDR,R4              ADDRESSIBILITY
         MVC   DHNETID,0(R5)           BUILD DUMP-HEADER FOR SDUMP
         MVC   DHJOBNAM,0(R6)
         SR    R5,R5                   CLEAR
         IC    R5,0(R7)                LENGTH FROM @DUMP MACRO
         BCTR  R5,0                    - 1 FOR EXECUTE
         EX    R5,MOVETEXT
         LA    R5,20(R5)               CALCULATE LENGTH
         STC   R5,DHLENGTH
         TM    JCSTATUS,X'40'     NODUMP-OPTION?
         BNO   TKDUMP
         NI    JCSTATUS,X'BF'
         B     NODUMP
TKDUMP   EQU   *
         SDUMP HDRAD=(R4),MF=(E,JCSDUMPL)
NODUMP   LA    R1,JCWORK+52            WTO WORK AREA
         LA    R5,4(R5)
         STH   R5,0(R1)                LENGTH OF ENTIRE WTO
         MVC   2(2,R1),=X'8000'        FLAGS
         SH    R5,=H'5'                LENGTH OF TEXT
         EX    R5,MOVEWTO
         LA    R5,5(R5,R1)             END OF TEXT
         MVC   0(4,R5),=X'40004000'    DESC AND ROUTCDE
         SVC   35
         L     R0,JCWORK+252           RESTORE ENTRY-CODE
         XC    JCWORK,JCWORK           CLEAR WORKAREA
         IF    ((R0),^=,H'20'),THEN    THE ISSUER IS THE PURGE EXIT
         LA    R1,8                    INDICATES A FAST LOCK OFF AND
         B     @GETLREL                TERMINATION
         ELSE
         LA    R1,4                    INDICATES ONLY FAST LOCKOFF
         B     @GETLREL
         ENDE
*
MOVETEXT MVC   DHTEXT(0),1(R7)         R7 = TEXT FROM @DUMP MACRO
MOVEWTO  MVC   4(0,R1),1(R4)           R4 = TEXT FROM DUMP HEADER
*
         DROP  R4
         EJECT
         LTORG
         SPACE 2
LOCKWT   DC    F'50'
SPDJC99  DC    CL8'SPDJC99 '
QNAME    DC    CL8'JOBNETDS'
RNAME    DC    CL19'RESERVE.FOR.LOCKING'
UNKNOWN  DC    CL8'UNKNOWN'
FIVESEC  DC    0D'0'
         DC    C'00000500'
FFFFFF   DC    X'00FFFFFF'
         SPACE 2
PATCH    DS    0D
         DC    10CL5'PATCH'
         EJECT
CARDEOF  EQU   X'80'
CVTMAP   EQU   0
CVTBTERM EQU   X'34'
         EQUATE
DUMPHDR  DSECT
DHLENGTH DS    X
DHNETID  DS    CL8,C
DHJOBNAM DS    CL8,CL2
DHTEXT   DS    CL30
HSA      DSECT
         DS    4A
HSRETCD  DS    A
HSREG0   DS    A
HSREG1   DS    A
         DS    11A
         COPY  @JNCB
         COPY  @DJCDS
         COPY  SMCAEXT
         END
./ ADD  NAME=SPDJC04
SPDJC04  TITLE 'OPERATOR COMMANDS FOR DJC'
***********************************************************************
*                                                                     *
*        P R O L O G :                                                *
*                                                                     *
***********************************************************************
*                                                                     *
*        PGM-FUNKTION :  SPDJC04 ERMOEGLICH OPERATOR EINGRIFFE ZUR    *
*                        STEUERUNG,BZW UEBERWACHUNG DER JOBNETZE.     *
*                                                                     *
***********************************************************************
*                                                                     *
*        REGISTER-BENUTZUNG : R0   =  %                               *
*                             R1   =  WORK                            *
*                             R2   =  WORK                            *
*                             R3   =  WORK                            *
*                             R4   =  WORK                            *
*                             R5   =  WORK                            *
*                             R6   =  BASREG DSECT POINTER            *
*                             R7   =  BASREG DSECT NETQUEUE           *
*                             R8   =  BASREG DSECT NETIDHDR           *
*                             R9   =  BASREG DSECT JOBQUEUE           *
*                             R10  =  BASREG                          *
*                             R11  =  BASREG                          *
*                             R12  =  BASREG                          *
*                             R13  =  SAVE-AREA/GETMAIN-AREA          *
*                             R14  =  CSECT-UPRO-RETURN               *
*                             R15  =  BRANCH                          *
*                                                                     *
***********************************************************************
         EJECT
SPDJC04  CSECT
         XSAVE (R12,R11,R10),,SPDJC04,WORKLEN
         EQUATE
         USING WORK,R13
         USING BLOCKHDR,R5
         USING POINTER,R6
         USING NETQUEUE,R7
         USING NETIDHDR,R8
         USING JOBQUEUE,R9
         SPACE 3
         ST    R1,WTIME
         LR    R1,R12
         LR    R0,R13
         LA    R15,SVCROUT
         SVC   250
         TM    SWITCH,LIBRDLM
         BNO   XRET
         LA    R1,LIBRPARM
         LINK  EP=LIBR
XRET     EQU   *
         DEQ   (SECMAJ,SECMIN,,SYSTEMS),RET=HAVE
         XRETURN 0,R
SVCROUT  EQU   *
         LR    R12,R1
         LR    R13,R0
         LA    R11,X'FFF'
         LA    R11,1(R11,R12)
         L     R1,WTIME
         XC    WSTATUS1(2),WSTATUS1     * LOESCHEN STATUS BYTES
         MVC   WWTO1(WTOLEN),WTO1       * WTO-LIST-FORM->GETMAIN-AREA
         MVI   MSG04,C' '               * LOESCHEN OUTPUT-AREA
         MVC   MSG04+1(L'MSG04-1),MSG04
         L     R14,16
         L     R14,X'C4'(R14)
         L     R14,X'80'(R14)
         LA    R14,0(R14)
         LTR   R14,R14
         BNZ   EXTOK
         MVC   MSG04+1(L'DJC0423),DJC0423
         LA    R15,MSG04
         BAL   R14,D10MSG
         B     D06015
EXTOK    EQU   *
         BAL   R14,D11PARM              * AUFBEREITEN PARAMETER-LISTE
         TIOTSCAN JOBNETDS
         LTR   R15,R15
         BNZ   CHECK1
X1       EQU   *
         MVC   MSGXX+10(8),=CL8'JOBNETDS'
X2       EQU   *
         LA    R15,MSGXX
         BAL   R14,D10MSG
         B     SPDJC04R
CHECK1   EQU   *
         L     R15,12(R15)
         SRL   R15,8
         LA    R15,16(R15)
         CLC   0(44,R15),=CL44'OX.NETCTRL'
         BNE   X1
         LA    R2,KTABE                 * ENTRIES COMMAND-TABELLE
         LA    R3,KTAB                  * ANFANGSADR.COMMAND-TABELLE
         DO    ((R2))
         IF    (WCOMMAND,=,0(R3)),THEN
         IF    (WCOMMAND,^=,C'M'),THEN  * MAINTENANCE COMMAND
         IF    (WCOMMAND,^=,C'I'),THEN  * SWITCH COMMAND
         IF    (WCOMMAND,^=,C'F'),THEN  * FORMAT COMMAND
         ENQ   (SECMAJ,SECMIN,E,,SYSTEMS)
         @GET  LOCK,ON
         ENDE
         ENDE
         ENDE
         SR    R15,R15                  * LOESCHEN REGISTER
         ICM   R15,7,1(R3)              * LADEN UPRO-ADRESSE
         BALR  R14,R15                  * BEARBEITEN COMMAND
         @GET  LOCK,OFF
SPDJC04R EQU   *
         TM    SWITCH,LIBRDLM
         BNO   NODLM2
         TM    SYSIN+48,X'10'
         BO    PUTEND
         NI    SWITCH,255-LIBRDLM
         B     NODLM2
PUTEND   EQU   *
         PUT   SYSIN,ENDCD
         CLOSE (SYSIN)
NODLM2   EQU   *
         L     R2,TABAD
         LTR   R2,R2
         BZ    NOFREE
         FREEMAIN R,LV=96028,A=(R2)
         XC    TABAD,TABAD
NOFREE   EQU   *
         XR    R15,R15
         SVC   3
         ENDE
         LA    R3,KTABEL(R3)            * NAECHSTES COMMAND-ENTRY
         ENDE
ERROR    MVC   MSG04+1(L'DJC041),DJC041 * FEHLER-MELDUNG
         LA    R15,MSG04                * ADRESSE FEHLER-MELDUNG
         BAL   R14,D10MSG               * INVALID COMMAND-CODE
         B     SPDJC04R
         EJECT
***********************************************************************
* D 0 1        F O R M A T - C O M M A N D                            *
*                                                                     *
*              DJC,F,PASSWORT,BLOCKZAHL : BEISPIEL (DJC,F,BLOCK,100)  *
*                                                                     *
***********************************************************************
         SPACE 3
D01      EQU   *
         CLC   WPARM1(6),=C'BLOCK '     * PASSWORT VALID ?
         BNE   D01ERROR                 * NO
         TRT   WPARM2(4),TABNUM1        * BLOCK-COUNT NUMERICAL ?
         BNE   D01ERROR                 * NO
         CLC   WPARM2(4),=C'0010'       * BLOCK-COUNT < 10 ?
         BL    D01ERROR                 * YES
         SPACE 2
         LA    R1,4                     * LENGTH OF PARAMETER
         STH   R1,WPARM5L               * LENGTH -> WPARM5
         MVC   WPARM5B,WPARM2           * BLOCK-COUNT -> WPARM5
         LA    R1,WPARM5                * ADDRESS OF PARM-AREA
         ST    R1,WAPARM5               * SAVE ADDRESS
         LA    R1,WAPARM5               * ADDRESS OF ADRESS PARAMETER
         MVC   WLINKE(8),LINKLST        * LINK LIST-FORM->GETMAIN-AREA
         LINK  EPLOC=SPDJC05,SF=(E,WLINKE)   * LINK PGM SPDJC05
         MVC   MSG04+1(L'DJC0421),DJC0421     * MESSAGE
         B     D0190                    * PRINT MESSAGE
         SPACE 2
D01ERROR EQU   *
         MVC   MSG04+1(L'DJC0412),DJC0412     * MESSAGE
         SPACE 2
D0190    EQU   *
         LA    R15,MSG04                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         SPACE 2
D01RTRN  EQU   *
         B     SPDJC04R                 * GO BACK TO CALLER
         EJECT
***********************************************************************
* D 0 2        P U R G E - C O M M A N D (NETZ-PURGE)                 *
*                                                                     *
*              DJC,P,NETID : BEISPIEL (DJC,P,ACCT)                    *
*                                                                     *
***********************************************************************
         SPACE 3
D02      EQU   *
         ST    R14,D02SAVE
         LA    R5,8                    * GET ADDR.POINTER
         @GET  (R5),(R6)
         LA    R5,PTLENGTH(R5)         * ADDR.FIRST NETIDHDR
         LA    R7,PTLENGTH(R6)         *
         L     R3,PTNAVQUE             * ADDR.LAST NETIDHDR
D0210    EQU   *
         CR    R5,R3                   * LAST ENTRY NET-QUEUE ?
         BNE   D0215                   * NO
         B     D02ERROR
D0215    EQU   *
         CLC   NQNETID,WPARM1          * ACT. NET FOUND ?
         BE    D0220                   * YES
         LA    R5,NQLENGTH(R5)         * NEXT ENTRY
         LA    R7,NQLENGTH(R7)         * NEXT ENTRY
         B     D0210
         SPACE
D0220    EQU   *
         L     R3,NQNETHDR             * ASSO.NETIDHDR-ELEMENT
         SRL   R3,16                   * CLEAR LOW ORDER BYTES
         SLL   R3,16                   * WITH HEX'00'
         XC    NETQUEUE(NQLENGTH),NETQUEUE * CLEAR NETQUEUE-ELEMENT
         @GET  (R3),(R5)
         LTR   R15,R15                 * ERROR ?
         BNZ   D02ERROR                * YES
         L     R2,PTNAVBLK             * NEXT AVAIL.BLOCK IS
         ST    R3,PTNAVBLK             * PURGED BLOCK
         SPACE
D0230    EQU   *
         L     R3,BHNXTBLK             * LOAD ADDRESS OF CHAINED BLOCK
         L     R4,BHRB00               * SAVE ADDRESS OF THIS BLOCK
         LR    R6,R5                   * ADDRESS OF BLOCK
         LA    R7,BLKLEN               * LENGTH OF BLOCK
         LA    R8,0                    *
         LA    R9,0                    *
         MVCL  R6,R8                   * CLEAR BLOCK WITH HEXA'00'
         SPACE
         ST    R3,BHNXTBLK             * LOAD ADDRESS OF CHAINED BLOCK
         ST    R4,BHRB00               * SAVE ADDRESS OF THIS BLOCK
         SPACE
         LTR   R3,R3                   * CHAIN BLOCK ?
         BZ    D0250                   * NO
         @GET  (R3),(R5)
         LTR   R15,R15                 * ERROR ?
         BZ    D0230                   * NO/CLEAR CHAINED BLOCK
D02ERROR EQU   *
         MVC   MSG04+1(L'DJC0416),DJC0416
         B     D0260
D0250    EQU   *
         ST    R2,BHNXTBLK             *
         MVC   MSG04+1(L'DJC0417),DJC0417
D0260    EQU   *
         LA    R15,MSG04               * ADDRESS OF MESSAGE
         BAL   R14,D10MSG              * PRINT MESSAGE
D02RTRN  EQU   *
         L     R14,D02SAVE
         BR    R14
         EJECT
***********************************************************************
*  D 0 3       D I S P L A Y - C O M M A N D                          *
*                                                                     *
*              DJC,D ×BLANK            (DJC,D)                        *
*                    ×,NETID           (DJC,D,ACCT)                   *
*                    ×,NETID,ALL       (DJC,D,ACCT,ALL)               *
*                    ×,NETID,JOBID     (DJC,D,ACCT,P00AC030)          *
*                    ×,POINTER         (DJC,D,POINTER)                *
***********************************************************************
         SPACE 3
D03      EQU   *
         XC    SWITCH,SWITCH
         ST    R14,D03SAVE
         CLI   WKZ,X'03'
         BNE   NOLIBR
         CLC   WPARM1(8),=CL8'POINTER'
         BE    NOLIBR
         CLC   WPARM2(3),=C'ALL'
         BNE   NOLIBR
         CLC   WPARM3(7),=CL7'LIBRDLM'
         BNE   NOLIBR
         OPEN  (SYSIN,(OUTPUT))
         PUT   SYSIN,OPTCD
         OI    SWITCH,LIBRDLM
NOLIBR   EQU   *
         CLC   WPARM3(6),=C'CANCEL'
         BE    CNC1
         CLC   WPARM3(5),=C'PURGE'
         BNE   NOCNC
CNC1     EQU   *
         GETMAIN              R,LV=96028
         ST    R1,TABAD
         LINK  EP=JES2JOBQ
NOCNC    EQU   *
         LA    R5,8                     *
         @GET  (R5),(R6)                * GET ADDR.POINTER
         IF    (WPARM1,=,C'POINTER '),THEN POINTER ANLISTEN ?
         BAL   R14,D03C                 * AUFBEREITEN LISTE
         B     D03RTRN
         ENDE
         LA    R5,PTLENGTH(R5)          * ADDR.1.NETIDHDR
         LA    R7,PTLENGTH(R6)          * ADDR.1.NETIDHDR
         SPACE
D03025   EQU   *
         L     R3,PTNAVQUE              * ADDR.LAST ENTRY NETIDHDR
         CR    R5,R3                    * LAST NETIDHDR.ENTRY ?
         BNE   D03030                   * NEIN
         TM    WSTATUS1,X'01'           * NETIDHDR-INFORMATION GEDRUCKT
         BO    D03RTRN                  * JA
         MVC   MSG04+1(L'DJC043),DJC043 * FEHLER-MELDUNG
         IF    (WPARM1,=,C' '),THEN     * NO NETIDS GIVEN
         MVC   MSG04+1(L'DJC047),DJC047 * MESSAGE
         ENDE
         LA    R15,MSG04                * ADRESSE FEHLER-MELDUNG
         BAL   R14,D10MSG               * NETID NOT FOUND
         B     D03RTRN
D03030   EQU   *
         CLC   WPARM1,BLANKS            * NET-ANGABE ?
         BE    D03040                   * NO/PRINT ALL NET-INFORM.
         CLC   NQNETID,WPARM1           * NET-ANGABE GEFUNDEN ?
         BNE   D03050                   * NEIN
         CLC   WPARM2,BLANKS            * JOB-ANGABE ?
         BNE   D03100                   * NEIN
         BAL   R14,D03A                 * NETIDHDR-INFORMATION DRUCKEN
         B     D03RTRN
D03040   EQU   *
         CLI   NQNETID,X'00'            * FREE-ENTRY ?
         BE    D03050                   * JA
         BAL   R14,D03A                 * INFORMATION AUSGEBEN
         SPACE
D03050   EQU   *
         LA    R5,NQLENGTH(R5)          * NAECHSTES NET-ENTRY
         LA    R7,NQLENGTH(R7)          * NAECHSTES NET-ENTRY
         B     D03025
         SPACE
D03100   EQU   *
         L     R3,NQNETHDR              * ADDR.OF ASSOC.'NETIDHDR'
         @GET  (R3),(R8)                * GET ADDRESS
         L     R3,NHFIRSTJ              * ADDR.FIRST JOBQUEUE-ENTRY
         LTR   R3,R3                    * JOBQUEUE-ENTRY AVAIL.?
         BNZ   D03110                   * YES
         MVC   MSG04+1(L'DJC040),DJC040 * MESSAGE
         LA    R15,MSG04                * ADDRESS MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         B     D03RTRN
         SPACE
D03110   EQU   *
         @GET  (R3),(R9)                * GET ADDRESS
         CLC   WPARM2(3),=C'ALL'        * ALL JOB-INFO/NET PRINT ?
         BE    D03120                   * YES
         TM    JQSTATUS,X'01'
         BO    D03111
         CLC   WPARM2,JQJNAME           * JOBNAME FOUND ?
         BE    D03120                   * YES
D03111   L     R3,JQNXTQUE              * ADDR.NEXT ENTRY
         LTR   R3,R3                    * LAST ENTRY JOBQUEUE ?
         BNZ   D03110                   * NO
         MVC   MSG04+1(L'DJC044),DJC044 * MESSAGE
         LA    R15,MSG04                * ADDRESS MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         B     D03RTRN
         SPACE
**********************************************************************
* AUFBEREITEN + AUSGEBEN DER ZEILEN MSG01A + MSG06
**********************************************************************
D03120   EQU   *
         CLC   WPARM3(4),=CL4'EX'
         BE    EXONLY
         CLC   WPARM3(6),=C'CANCEL'
         BE    D03122
         CLC   WPARM3(5),=C'PURGE'
         BE    D03122
         CLC   WPARM3(8),=CL8' '
         BE    D03122
         TM    JQSTATUS,X'01'
         BO    D03130
D03122   EQU   *
         CLI   WKZ,X'03'
         BNE   D03124
         CLC   WPARM3(6),=C'CANCEL'
         BE    CNC2
         CLC   WPARM3(5),=C'PURGE'
         BNE   D03124
CNC2     EQU   *
         TM    JQSTATUS,X'2E'
         BNZ   D03124
         TM    JQSTATUS+1,X'01'
         BNZ   D03124
         L     R1,16
         L     R1,0(R1)
         L     R1,4(R1)
         L     R1,12(R1)
         CLC   0(8,R1),JQJNAME
         BE    D03124
         L     R1,TABAD
         L     R15,=F'6000'  NO. OF JOBS
         LA    R1,28(R1)    SKIP QSES
NXTENT   EQU   *
         PACK  ZWI1,0(5,R1)
         PACK  ZWI2,JQJNBR(5)
         CLC   ZWI1(2),ZWI2
         BE    FND
NEWENT   LA    R1,16(R1)
         BCT   R15,NXTENT
         B     D03124
FND      EQU   *
         CLC   4(8,R1),JQJNAME
         BNE   NEWENT
         MVC   CCMD+8(4),JQJNBR
         MVI   CCMD+6,C'C'
         CLC   WPARM3(5),=C'PURGE'
         BNE   CNC3
         MVI   CCMD+6,C'P'
CNC3     EQU   *
         LA    R1,CCMD
         SR    R0,R0
         SVC   34
         OI    JQSTATUS,X'08'
D03124   EQU   *
         CLC   WPARM3(4),=C'HCLO'
         BNE   D031241
         OI    SWITCH,SHORT
         CLC   JQACCHC,JQDJCHC
         BNL   D03130
         B     D031243
D031241  EQU   *
         CLC   WPARM3(4),=C'HCHE'
         BNE   D031242
         OI    SWITCH,SHORT
         CLC   JQACCHC,JQDJCHC
         BL    D03130
         B     D031243
D031242  EQU   *
         CLC   WPARM3(4),=C'CCHI'
         BNE   D031244
         OI    SWITCH,SHORT
         CLC   JQHIGHCC,JQDJCCC
         BNH   D03130
         B     D031243
D031244  EQU   *
         CLC   WPARM3(5),=C'SHORT'
         BNE   D031243
         OI    SWITCH,SHORT
D031243  EQU   *
         MVC   MSG06,BLANKS
         MVC   M06NET,WPARM1            * NETID
         MVC   M06JOB,JQJNAME           * JOBNAME
         MVC   M06JOB#,JQJNBR           * JOBNUMBER
         TM    SWITCH,LIBRDLM
         BNO   NOPUT
         MVC   SELCD+5(8),JQJNAME
         PUT   SYSIN,SELCD
         B     D03130
NOPUT    EQU   *
         SPACE
         LH    R4,JQSTATUS              * JOB-STATUS BYTES
         LA    R7,M06STAT               * EMPFANGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         IC    R4,JQSUBST               * SUBSTITIUTION BYTE
         LA    R7,M06SUBST              * EMPFANGSFELD
         LA    R3,2                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         LH    R4,JQDJCHC               * DJC-HOLD-COUNT
         LA    R7,M06DJCHC              * EMPFANGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         LH    R4,JQACCHC               * ACC-HOLD-COUNT
         LA    R7,M06ACCHC              * EMPFANGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         LH    R4,JQDJCCC               * DJC-COMP-CODE
         LA    R7,M06DJCCC              * EMPFANGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         LH    R4,JQHIGHCC              * HIGHEST-COMP-CODE
         LA    R7,M06HCC                * EMPFANGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE 2
         TM    WSTATUS1,X'02'           * FIRST JOB-INFORMATION
         BO    D03125                   * NO
         MVC   MSG04,MSG01A             * KOPFZEILE -> GETMAIN-AREA
D03125   EQU   *
         TM    SWITCH,SHORT
         BNO   D031251
         TM    SWITCH,SHRTHDR
         BO    D031252
D031251  EQU   *
         LA    R15,MSG04                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         OI    SWITCH,SHRTHDR
D031252  EQU   *
         SPACE 2
         LA    R15,MSG06                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         TM    SWITCH,SHORT
         BO    D03130
         SPACE
**********************************************************************
* AUFBEREITEN + AUSGEBEN DER ZEILEN MSG01B + MSG07 + MSG08
**********************************************************************
         MVC   MSG07,BLANKS
         MVC   M07TITLE(10),=C'TIMESTAMP:'
         LA    R7,JQTSHLD               * CREATION-TIME-STAMP
         LA    R6,M07TSCRE              * EMPFANGSFELD
         BAL   R14,D03F                 * FELD AUFBEREITEN
         SPACE
         LA    R7,JQTSREL               * RELEASE-TIME-STAMP
         LA    R6,M07TSREL              * EMPFANGSFELD
         BAL   R14,D03F                 * FELD AUFBEREITEN
         SPACE
         LA    R7,JQTSOUT               * TERMINATE-TIME-STAMP
         LA    R6,M07TSTER              * EMPFANGSFELD
         BAL   R14,D03F                 * FELD AUFBEREITEN
         SPACE
         LA    R7,JQTSPUR               * PURGE-TIME-STAMP
         LA    R6,M07TSPUR              * EMPFANGSFELD
         BAL   R14,D03F                 * FELD AUFBEREITEN
         SPACE 2
         LA    R15,MSG01B               * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         SPACE 2
         LA    R15,MSG07                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         SPACE 2
         MVC   MSG08,BLANKS
         MVC   M08TITLE(10),=C'JOB-SEQ. :'
         LH    R4,JQNBRHLD              * NUMBER OF JOB-CREATION
         LA    R7,M08JSCRE              * EMPFAMGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         LH    R4,JQNBRREL              * NUMBER OF JOB-RELEASING
         LA    R7,M08JSREL              * EMPFAMGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         LH    R4,JQNBROUT              * NUMBER OF JOB-TERMINATION
         LA    R7,M08JSTER              * EMPFAMGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE
         LH    R4,JQNBRPUR              * NUMBER OF JOB PURGING
         LA    R7,M08JSPUR              * EMPFAMGSFELD
         LA    R3,4                     * L'AUSGABE
         BAL   R14,D03D                 * FELD AUFBEREITEN
         SPACE 2
         LA    R15,MSG08                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         MVC   MSG07,BLANKS             * CLEAR MSG07 WITH BLANKS
         SPACE 2
         L     R3,JQFNRJOB              * ADDRESS OF FIRST NR-JOB
         MVC   MSG08,BLANKS
         MVC   M08TITLE,=C'NRJOBS   :'  * TITLE
         LA    R5,4                     * MAX.LINES
         BAL   R14,D03B                 * EDITING THE LINE
         SPACE
         L     R3,JQFARJOB              * ADDRESS OF FIRST AR-JOB
         MVC   MSG08,BLANKS
         MVC   M08TITLE,=C'ARJOBS   :'  * TITLE
         LA    R5,4                     * MAX.LINES
         BAL   R14,D03B                 * EDITING THE LINE
         SPACE
         L     R3,JQFNCJOB              * ADDRESS OF FIRST NC-JOB
         MVC   MSG08,BLANKS
         MVC   M08TITLE,=C'NCJOBS   :'  * TITLE
         LA    R5,4                     * MAX.LINES
         BAL   R14,D03B                 * EDITING THE LINE
         SPACE
         L     R3,JQFACJOB              * ADDRESS OF FIRST AC-JOB
         MVC   MSG08,BLANKS
         MVC   M08TITLE,=C'ACJOBS   :'  * TITLE
         LA    R5,4                     * MAX.LINES
         BAL   R14,D03B                 * EDITING THE LINE
         SPACE
EXONLY   TM    WSTATUS1,X'02'           * FIRST JOB-INFORMATION ?
         BO    D03130                   * NO
         OI    WSTATUS1,X'02'           * FOLLOWING JOB = L
         CLC   WPARM3(4),=CL4'EX'
         BE    EXONLY1
         MVI   MSG04,C'-'               * CHANGE ASA CHARACTER
         L     R3,NHFNEJOB              * ADDRESS OF FIRST NE-JOB
         MVC   MSG08,BLANKS
         MVC   M08TITLE,=C'NEJOBS   :'  * TITLE
         LA    R5,10                    * MAX.LINES
         BAL   R14,D03B                 * EDITING THE LINE
         SPACE
EXONLY1  L     R3,NHFEXJOB              * ADDRESS OF FIRST EX-JOB
         MVC   MSG08,BLANKS
         MVC   M08TITLE,=C'EXJOBS   :'  * TITLE
         LA    R5,10                    * MAX.LINES
         BAL   R14,D03B                 * EDITING THE LINE
         SPACE
D03130   EQU   *
         CLC   WPARM2(3),=C'ALL'        * ALL JOB-INFO ?
         BNE   D03RTRN                  * NO
         L     R3,JQNXTQUE              * NEXT JOB-QUEUE-ENTRY
         LTR   R3,R3                    * LAST ENTRY ?
         BNZ   D03110                   * NO
D03RTRN  EQU   *
         L     R14,D03SAVE
         BR    R14
         EJECT
***********************************************************************
*        D03A   : ERSTELLT OUTPUT-SATZ NETID-INFORMATIONEN            *
***********************************************************************
         SPACE 3
D03A     EQU   *
         ST    R14,D03ASAVE
         STM   R4,R7,WSAVER             * SAVE REGISTER'S
         MVC   MSG04,BLANKS
         MVC   MNETID,NQNETID           * NET-ID
         LH    R4,NQSTATUS
         LA    R7,MSTATUS
         LA    R3,4
         BAL   R14,D03D
         LM    R4,R7,WSAVER             * RELOAD REGISTER'S
         L     R3,NQNETHDR              * ASSO.NETIDHDR
         @GET  (R3),(R8)                * GET ADDR.ASSO.NETQUEUE ENTRY
         SPACE
         LA    R7,NHTSCREA              * CREATION TIMESTAMP
         LA    R6,MTCREA                * EMPFANGSFELD
         BAL   R14,D03F                 * EDIT THE TIMESTAMP
         SPACE
         LA    R7,NHTSLUPD              * LAST UPDATE TIMESTAMP
         LA    R6,MTLUSE                * EMPFANGSFELD
         BAL   R14,D03F                 * EDIT THE TIMESTAMP
         SPACE
         MVC   MNBOJH,=C'H='            * HELD JOB'S
         SR    R3,R3
         ICM   R3,3,NHCNTHLD
         CVD   R3,WDOWO
         UNPK  MNBOJHZ,WDOWO+6(2)
         OI    MNBOJHZ+2,X'F0'
         MVC   MNBOJR,=C'R='            * RELEASE JOB'S
         ICM   R3,3,NHCNTREL
         CVD   R3,WDOWO
         UNPK  MNBOJRZ,WDOWO+6(2)
         OI    MNBOJRZ+2,X'F0'
         MVC   MNBOJO,=C'O='            * OUTPUT JOB'S
         ICM   R3,3,NHCNTOUT
         CVD   R3,WDOWO
         UNPK  MNBOJOZ,WDOWO+6(2)
         OI    MNBOJOZ+2,X'F0'
         MVC   MNBOJP,=C'P='            * PURGED JOB'S
         ICM   R3,3,NHCNTPUR
         CVD   R3,WDOWO
         UNPK  MNBOJPZ,WDOWO+6(2)
         OI    MNBOJPZ+2,X'F0'
         TM    WSTATUS1,X'01'           * KOPF-ZEILE BEREITS AUSGEGEBEN
         BO    D03A200                  * JA
         LA    R15,MSG03
         BAL   R14,D10MSG
         OI    WSTATUS1,X'01'           * KOPF=L
         SPACE
D03A200  EQU   *
         LA    R15,MSG04                * DATEN ZEILE AUSGEBEN
         BAL   R14,D10MSG               *
         SPACE
D03ARTRN EQU   *
         LM    R4,R7,WSAVER
         L     R14,D03ASAVE
         BR    R14
         EJECT
***********************************************************************
* D 0 3 B      EDITION OF NR-AR-/NC-AC/EX-NE JOB-ENTRY'S              *
***********************************************************************
         SPACE 3
D03B     EQU   *
         ST    R9,SAVE9
         DROP  R9
         USING JOBENTRY,R9
         ST    R14,D03BSAVE
         ST    R8,WSAVER2               * SAVE REG.8
D03B05   EQU   *
         LTR   R3,R3                    * JOB-ENTRY AVAILABLE ?
         BZ    D03BRTRN                 * NO
         MVC   M07TITLE,=C'JESTATUS :'  *
         LA    R8,MSG08+11              * START ADDRESS OUTPUT-LINE
         LA    R7,MSG07+11              * START ADDRESS OUTPUT-LINE
         MVC   0(49,R8),BLANKS
         MVC   0(49,R7),BLANKS
         LA    R6,5                     * JOBNAMES / OUTPUT-LINE
D03B10   EQU   *
         @GET  (R3),(R9)                * GET ADDRESS
         MVC   0(L'JEJNAME,R8),JEJNAME  * JOBNAME
         LA    R8,9(R8)                 *
         SPACE 2
         LH    R4,JESTATUS              * JESTATUS-BIT'S
         LA    R3,4                     * L'RECEIVED FIELD
         BAL   R14,D03D                 * EDITION OF FIELD
         LA    R7,9(R7)                 * *
         SPACE 2
         BCT   R6,D03B20                * LOOP JOBNAMES/OUTPUT-LINE
         SPACE
         LA    R15,MSG08                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         SPACE
         CLC   WPARM3(4),=CL4'EX'
         BE    OVER1
         LA    R15,MSG07                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         SPACE
OVER1    BCT   R5,D03B30                * LOOP LINES/JOB-TYPE
         B     D03BRTRN                 *
D03B15   EQU   *
         LA    R15,MSG08                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         SPACE
         CLC   WPARM3(4),=CL4'EX'
         BE    D03BRTRN
         LA    R15,MSG07                * ADDRESS OF MESSAGE
         BAL   R14,D10MSG               * PRINT MESSAGE
         B     D03BRTRN
         SPACE
D03B20   EQU   *
         L     R3,JENXTQUE              * ADDRESS OF NEXT JOB-ENTRY
         LTR   R3,R3                    * LAST JOB-ENTRY ?
         BNZ   D03B10                   * NO
         B     D03B15
         SPACE
D03B30   EQU   *
         L     R3,JENXTQUE              * ADDRESS OF NEXT JOB-ENTRY
         LTR   R3,R3                    * LAST JOB-ENTRY ?
         BZ    D03BRTRN                 * YES
         B     D03B05                   * NO INIT.NEXT LINE
         SPACE
D03BRTRN EQU   *
         L     R9,SAVE9
         DROP  R9
         USING JOBQUEUE,R9
         L     R8,WSAVER2               * RELOAD REG.8
         L     R14,D03BSAVE
         BR    R14
         EJECT
***********************************************************************
* D03C ANLISTEN POINTER-ELEMENT                                       *
***********************************************************************
         SPACE 3
D03C     EQU   *
         ST    R14,D03CSAVE
         MVC   MSG05,BLANKS
         SPACE
         L     R4,PTNAVBLK              * AUSZUGEBENDES FELD
         LA    R7,PTRF1                 * AUSGABE BEREICH
         LA    R3,8                     * LAENGE
         BAL   R14,D03D                 * AUFBEREITEN FELD
         SPACE
         L     R4,PTLSTBLK              * AUSZUGEBENDES FELD
         LA    R7,PTRF2                 * AUSGABE BEREICH
         LA    R3,8                     * LAENGE
         BAL   R14,D03D                 * AUFBEREITEN FELD
         SPACE
         L     R4,PTLOCK                * AUSZUGEBENDES FELD
         LA    R7,PTRF3                 * AUSGABE BEREICH
         LA    R3,8                     * LAENGE
         BAL   R14,D03D                 * AUFBEREITEN FELD
         SPACE
         L     R4,PTNAVQUE              * AUSZUGEBENDES FELD
         LA    R7,PTRF4                 * AUSGABE BEREICH
         LA    R3,8                     * LAENGE
         BAL   R14,D03D                 * AUFBEREITEN FELD
         SPACE
         LH    R4,PTSTATUS              * AUSZUGEBENDES FELD
         LA    R7,PTRF5                 * AUSGABE BEREICH
         LA    R3,4                     * LAENGE
         BAL   R14,D03D                 * AUFBEREITEN FELD
         SPACE
         LA    R15,MSG02                * ADRESSE MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
         SPACE
         LA    R15,MSG05                * ADRESSE MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
D03CRTRN EQU   *
         L     R14,D03CSAVE
         BR    R14
         EJECT
***********************************************************************
* D 0 3 D      CONVERTIEREN HEXA.->CHARACTER                          *
***********************************************************************
         SPACE 3
D03D     EQU   *
         ST    R14,D03DSAVE
         STM   R5,R8,WSAVER1            * SAVE REGISTER'S
         LR    R8,R3                    * SICHERN LAENGE FELD
         BCTR  R8,0                     * L'FUER EXECUTE TR
         AR    R7,R8                    * ADR.FELD+L'FELD-1
D03D010  EQU   *
         SRDL  R4,4                     *
         SRL   R5,4                     *
         STCM  R5,8,0(R7)               *
         BCT   R3,D03D020               * LOOP/ZEICHEN
         B     D03D030
D03D020  EQU   *
         BCTR  R7,0
         B     D03D010
D03D030  EQU   *
         EX    R8,EXTR01                * HEX.WERTE CONVERTIEREN
D03DRTRN EQU   *
         LM    R5,R8,WSAVER1            * RELOAD REGISTER'S
         L     R14,D03DSAVE
         BR    R14
         SPACE 3
EXTR01   TR    0(0,R7),TABCHAR
         EJECT
***********************************************************************
* D 0 3 E      CONVERTIEREN CHARACTER->HEXA.                          *
***********************************************************************
         SPACE 3
D03E     EQU   *
         ST    R14,D03ESAVE
         LR    R4,R3                    * L'FELD
         BCTR  R4,0                     * L'FELD - 1 FUER EXTR02
         EX    R4,EXTR02                * CONVERTIEREN FELD
         LA    R2,WFELD                 * ADRESSE FELD
         SR    R4,R4                    * LOESCHEN REGISTER
         SR    R5,R5                    * LOESCHEN REGISTER
D03E010  EQU   *
         ICM   R5,8,0(R2)               * LADEN CHARACTER
         SLDL  R4,4                     * VIER BIT'S VERSCHIEBEN
         LA    R2,1(R2)                 * ADRESSE NAECHSTEN CHARACTER
         BCT   R3,D03E010               * LOOP CHARACTER(FELD)
         L     R14,D03ESAVE             * RETURN ADRESSE
         BR    R14
         SPACE 2
EXTR02   TR    WFELD,TABHEX             * CONVERTIEREN CHARACTER->HEXA.
         EJECT
***********************************************************************
* D 0 3 F      EDITION OF ALL TIMESTAMP'S                             *
***********************************************************************
         SPACE 3
D03F     EQU   *
         ST    R14,D03FSAVE
         SPACE
         CLC   0(8,R7),=XL8'00'         * TIMESTAMP AVAILABLE ?
         BNE   D03F10                   * YES
         MVC   2(8,R6),=CL8'00000000'   * TIMESTAMP = 0
         B     D03FRTRN
         SPACE
D03F10   EQU   *
         ICM   R3,7,0(R7)               * CURRENT TIMESTAMP
         ICM   R3,1,=X'C0'
         SRL   R3,4
         ST    R3,WTIME
         MVC   WTABMON(24),TABMON      MONTH TABLE
         SR    R3,R3
         ICM   R3,7,4(R7)              00YYDD
         ICM   R3,1,=X'C0'             00YYC0
         SRL   R3,4                    00000YYC
         ZAP   WDOWO,=P'0'
         ST    R3,WDOWO+4
         SR    R3,R3
         CVB   R2,WDOWO                000000YY
         SRDL  R2,2                    DIVIDE BY 4
         CLM   R3,8,=X'00'             SCHALTJAHR ?
         BNE   *+10                    NEIN
         MVC   WTABMON+2(2),=H'29'     SCHALTJAHR
         ZAP   WDOWO,6(2,R7)           DDDS
         LA    R2,WTABMON
         CVB   R3,WDOWO                00000DDD
         SR    R14,R14
         DO    ((R3),<,H'1')
         SH    R3,0(R2)
         LA    R2,2(R2)                NEXT MONTH
         LA    R14,1(R14)
         ENDE
         SH    R2,=H'2'                LAST MONTH
         AH    R3,0(R2)
         CVD   R3,WDOWO
         OI    WDOWO+7,X'0F'
         UNPK  2(2,R6),WDOWO
         CVD   R14,WDOWO
         OI    WDOWO+7,X'0F'
         UNPK  4(2,R6),WDOWO
         UNPK  6(4,R6),WTIME
         OI    9(R6),X'F0'
D03FRTRN EQU   *
         L     R14,D03FSAVE
         BR    R14
         EJECT
***********************************************************************
* D 0 4        N E T - C O M M A N D (ACTIVE,INACTIVE)                *
*                                                                     *
*              DJC,N,NETID,×ACTIVE                                    *
*                          ×INACTIVE                                  *
***********************************************************************
         SPACE 3
D04      EQU   *
         ST    R14,D04SAVE
         LA    R5,8                    * GET ADDR.POINTER
         @GET  (R5),(R6)
         LA    R5,PTLENGTH(R5)         * ADDR.FIRST NETIDHDR
         LA    R7,PTLENGTH(R6)         *
         L     R3,PTNAVQUE             * ADDR.LAST NETIDHDR
D0410    EQU   *
         CR    R5,R3                   * LAST ENTRY NET-QUEUE ?
         BNE   D0415                   * NO
         B     D04ERROR
D0415    EQU   *
         CLC   NQNETID,WPARM1          * ACT. NET FOUND ?
         BE    D0420                   * YES
         LA    R5,NQLENGTH(R5)         * NEXT ENTRY
         LA    R7,NQLENGTH(R7)         * NEXT ENTRY
         B     D0410
         SPACE
D0420    EQU   *
         CLC   WPARM2(7),=C'ACTIVE ' * PARM=ACTIVE
         BNE   D0430                 * NO
         NI    NQSTATUS,X'7F'        * SET NET-STATUS ACTIVE
         L     R3,NQNETHDR
         @GET  (R3),(R8)
         L     R3,NHFIRSTJ
         LTR   R3,R3        ANY JOBS IN NET?
         BZ    D0429         NO, EXIT
D0422    EQU   *
         @GET  (R3),(R9)    GET NEXT JOB-QUEUE RECORD
         TM    JQSTATUS+1,X'04'   IS A RELEASE PENDING?
         BNO   D0424         NO, GO GET NEXT JOB
         MVC   ZWJOBNM,JQJNAME   MOVE JOBNAME TO WORKAREA
         MVC   ZWJOBNR,JQJNBR    MOVE JOB-NR. TO WORKAREA
         MVC   WNETID,WPARM1     MOVE NETID TO WORKAREA
         @RELJOB WNETID,WNETID   RELEASE THE JOB
D0424    EQU   *
         L     R3,JQNXTQUE     GET ADDR. OF NEXT JOB
         LTR   R3,R3         END OF QUEUE?
         BNZ   D0422         NO, GO GET NEXT JOB
D0429    EQU   *
         MVC   MSG04+1(L'DJC0418),DJC0418
         MVC   MSG04+14(8),WPARM1    * NETID->MESSAGE
         B     D0490
D0430    EQU   *
         CLC   WPARM2,=C'INACTIVE'   * PARM=INACTIVE
         BNE   D04ERROR              * NO
         OI    NQSTATUS,X'80'        * SET NET-STATUS INAKTIV
         MVC   MSG04+1(L'DJC0419),DJC0419
         MVC   MSG04+14(8),WPARM1    * NETID->MESSAGE
         B     D0490
D04ERROR EQU   *
         MVC   MSG04+1(L'DJC0420),DJC0420
D0490    EQU   *
         LA    R15,MSG04             * ADDRESS OF MESSAGE
         BAL   R14,D10MSG            * PRINT MESSAGE
D04RTRN  EQU   *
         L     R14,D04SAVE
         BR    R14
         EJECT
***********************************************************************
* D 0 5        S W I T C H  - C O M M A N D (ON/OFF)                  *
*                                                                     *
*              DJC,I,SWITCH,×ON                                       *
*                           ×OFF                                      *
***********************************************************************
         SPACE 3
D05      EQU   *
         CLC   WPARM1(6),=C'SWITCH'  * PASSWORT VALID ?
         BNE   D05ERROR              * NO
         CLC   WPARM2(3),=C'ON '     * JOB-NET-VERARBEITUNG STARTEN?
         BNE   D0510                 * NO
         L     R2,16
         L     R2,X'C4'(R2)
         L     R2,X'80'(R2)      SMCAUSER
         MVI   0(R2),X'00'           * NETZ-VERARBEITUNG=AKTIV
         MVC   MSG04+1(L'DJC0413),DJC0413
         B     D0590
D0510    EQU   *
         CLC   WPARM2(4),=C'OFF '    * JOB-NET-VERARBEITUNG STARTEN?
         BNE   D05ERROR              * NO
         L     R2,16
         L     R2,X'C4'(R2)
         L     R2,X'80'(R2)    SMCAUSER
         MVI   0(R2),X'FF'           * NETZ-VERARBEITUNG=INAKTIV
         MVC   MSG04+1(L'DJC0414),DJC0414
         B     D0590
D05ERROR EQU   *
         MVC   MSG04+1(L'DJC0415),DJC0415
D0590    EQU   *
         LA    R15,MSG04
         BAL   R14,D10MSG
         B     SPDJC04R              * GO BACK TO CALLER
         EJECT
***********************************************************************
* D 0 6        M AI N T E N A N C E - C O M M A N D                   *
*              DJC,M,×RESERVE                                         *
*                    ×STATUS                                          *
*                    ×LOCKOFF                                         *
*                    ×RESTART                                         *
***********************************************************************
         SPACE 3
D06      EQU   *
         ST    R14,D06SAVE
         SPACE
         CLC   WPARM1,=CL8'RESERVE'     * GUELTIGES PASS-WORT ?
         BE    D06020                   * JA
         CLC   WPARM1,=CL8'STATUS'      * STATUS DISPLAY ?
         BE    D06050                   * JA
         CLC   WPARM1,=CL8'RESTART'
         BE    D06RST
         CLC   WPARM1,=CL8'LOCKOFF'     * FAST LOCK OFF REQUIRED
         BNE   D06010
         LOAD  EP=SPDJC99              INITIAL JNCB
         LR    R14,R0                  START ADDRESS
         LA    R15,0(R1)               LENGTH IN DOUBLEWORDS
         SLL   R15,3                   LENGTH IN BYTES
         L     R1,16                   CVT
         L     R1,X'C4'(R1)            SMCA ADDRESS
         L     R1,X'80'(R1)            SMCAUSER
         USING SMCAEXT,R1
         L     R2,SMCAJNCB             ADDRESS OF JOBNET CONTROL BLOCK
         IF    ((R2),=,F'0'),THEN
         MVC   MSG04+1(L'DJC042),DJC042 * FEHLER-MELDUNG
         LA    R15,MSG04                * ADRESSE FEHLER-MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
         B     D06015
         ENDE
         LR    R3,R15                  LENGTH IN BYTES
         DROP  R1
         USING JNCB,R2
         LR    R4,R2                   SAVE JNCB ADDRESS
         L     R5,JCFIRBLK             FIRST IO-BLOCK
         DO    ((R5),E,F'0')
         MVI   7(R5),1                 INDICATES BLOCK IS EMPTY
         L     R5,0(R5)                NEXT BLOCK
         ENDE
         L     R5,JCFIRBLK             SAVE ADDRESS OF FIRST BLOCK
         MVCL  R2,R14                  INITIALYZE JNCB
         LR    R2,R4                   ADDRESS OF JNCB
         ST    R5,JCFIRBLK             RESET FIRST IO-BLOCK
         CLC   WPARM2,=CL8'FORCE'
         BNE   NFRC
         OI    JCSTATUS,X'80'
NFRC     EQU   *
         DROP  R2
         @GET  LOCK,ON
         @GET  LOCK,OFF
         MVC   MSG04+1(L'DJC048),DJC048 * FEHLER-MELDUNG
         LA    R15,MSG04                * ADRESSE FEHLER-MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
         B     D06015
         SPACE
D06010   EQU   *
         MVC   MSG04+1(L'DJC045),DJC045 * FEHLER-MELDUNG
         LA    R15,MSG04                * ADRESSE FEHLER-MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
D06015   EQU   *
         XR    R15,R15
         SVC   3
         SPACE
D06020   EQU   *
         CLI   WKZ,X'01'
         BNE   D06010
         @GET  LOCK,ON                  *
         SPACE 2
D06030   EQU   *
         SR    R0,R0                    * LOESCHEN REGISTER 0
         ICM   R0,7,WOUT                * CONSOLID
         LA    R3,WREPLY                * ADRESSE ANTWORT
         LA    R4,WECB01                * ADRESSE ECB
         XC    WREPLY,WREPLY            * LOESCHEN BEREICH
         XC    WECB01,WECB01            * LOESCHEN ECB
         MVC   WWTOR1(WTORLEN),WTOR1    * WTOR1->GETMAIN-BEREICH
         LA    R5,WWTOR1                * ADRESSE WTOR1
         SPACE 2
         WTOR  ,(R3),,(R4),MF=(E,(R5))  * W T O R
         WAIT  ECB=(R4)
         OC    WREPLY,=CL8' '           * GROSSBUCHSTABEN
         SPACE 2
         CLC   WREPLY(3),=C'END'        * WARTUNG BEENDET ?
         BE    D06RTRN                  * JA
         TRT   WREPLY,TABNUM            * GUELTIGE EINGABE
         BNE   D06030                   * NEIN
         MVC   WFELD,WREPLY             * FELD LADEN
         LA    R3,8                     * L'FELD
         BAL   R14,D03E                 * CONVERTIEREN->HEXA.
         SPACE 2
         @GET  (R4)
         LTR   R15,R15                  * FEHLER
         BZ    D06040                   * NEIN
         MVC   MSG04+1(L'DJC045),DJC045 * FEHLER-MELDUNG
         LA    R15,MSG04                * ADRESSE FEHLER-MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
         B     D06030
         SPACE 2
D06040   EQU   *
         ST    R1,WBLKNR                * ADRESSE IN HEXA
         MVC   MSG04+1(L'DJC046),DJC046 * MELDUNG
         MVC   MSG04+9(8),WREPLY        * MOD.MELDUNG
         L     R4,WBLKNR                * ADRESSE EINGABE FELD
         LA    R7,MSG04+35              * ADRESSE AUSGABE FELD
         LA    R3,8                     * LAENGE FELD
         BAL   R14,D03D                 * KONVERTIEREN->CHAR.
         LA    R15,MSG04                * ADRESSE MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
         B     D06030
         SPACE
D06050   EQU   *
         L     R1,16                   CVT
         L     R1,X'C4'(R1)            SMCA ADDRESS
         L     R1,X'80'(R1)            SMCAUSER
         USING SMCAEXT,R1
         L     R2,SMCAJNCB             ADDRESS OF JOBNET CONTROL BLOCK
         IF    ((R2),=,F'0'),THEN
         MVC   MSG04+1(L'DJC042),DJC042 * FEHLER-MELDUNG
         LA    R15,MSG04                * ADRESSE FEHLER-MELDUNG
         BAL   R14,D10MSG               * MELDUNG AUSGEBEN
         B     D06015
         ENDE
         DROP  R1
         USING JNCB,R2
         L     R1,JCREQU
         IF    ((R1),=,F'0'),THEN
         MVC   MSG04+1(L'DJC049),DJC049
         ELSE
         MVC   MSG04+1(L'DJC0410),DJC0410
         MVC   MSG04+27(8),JCJOBNAM
         L     R4,JCLOCKTS
         LA    R7,MSG04+39
         LA    R3,8
         BAL   R14,D03D
         ENDE
         LA    R15,MSG04
         BAL   R14,D10MSG
         DROP  R2
         B     D06015
         SPACE
D06RTRN  EQU   *
         L     R14,D06SAVE
         BR    R14
D06RST   EQU   *
         GETMAIN R,LV=80,SP=245
         XC    0(80,R1),0(R1)
         L     R14,16
         L     R14,X'C4'(R14)
         ST    R1,X'80'(R14)
         @GET  LOCK,ON
         @GET  LOCK,OFF
         MVC   MSG04+1(L'DJC0424),DJC0424
         LA    R15,MSG04
         BAL   R14,D10MSG
         B     D06RTRN
         EJECT
D07      EQU   *
         ST    R14,D07SAVE
         CLC   WPARM1,=CL8' '
         BE    D07ERR
         CLC   WPARM2,=CL8' '
         BE    D07ERR
         CLC   WPARM3,=CL8' '
         BE    D07ERR
         LA    R5,8
         @GET  (R5),(R6)
         LA    R5,PTLENGTH(R5)
         LA    R7,PTLENGTH(R6)
         L     R3,PTNAVQUE
D0710    EQU   *
         CR    R5,R3
         BNE   D0715
         B     D07ERROR
D0715    EQU   *
         CLC   NQNETID,WPARM1
         BE    D0720
         LA    R5,NQLENGTH(R5)
         LA    R7,NQLENGTH(R7)
         B     D0710
D07ERROR EQU   *
         MVC   MSG04+1(L'DJC0420),DJC0420
D0790    EQU   *
         LA    R15,MSG04
         BAL   R14,D10MSG
D07RTRN  EQU   *
         L     R14,D07SAVE
         BR    R14
D0720    EQU   *
         L     R3,NQNETHDR
         @GET  (R3),(R8)
         L     R3,NHFIRSTJ
         LTR   R3,R3
         BNZ   D07110
         MVC   MSG04+1(L'DJC040),DJC040
         B     D0790
D07110   EQU   *
         @GET  (R3),(R9)
         TM    JQSTATUS,X'01'
         BO    D07111
         CLC   WPARM2,JQJNAME
         BE    D07120
D07111   EQU   *
         L     R3,JQNXTQUE
         LTR   R3,R3
         BNZ   D07110
         MVC   MSG04+1(L'DJC044),DJC044
         B     D0790
D07120   EQU   *
         CLC   WPARM3(6),=CL6'OH=YES'
         BNE   D07125
         OI    JQSTATUS,X'80'
         OI    JQSTATUS+1,X'20'
         B     D07300
D07125   EQU   *
         CLC   WPARM3(5),=CL5'OH=NO'
         BNE   D07130
         NI    JQSTATUS,X'7F'
         OI    JQSTATUS+1,X'20'
         B     D07300
D07130   EQU   *
         CLC   WPARM3(6),=CL6'DM=YES'
         BNE   D07135
         OI    JQSTATUS,X'40'
         OI    JQSTATUS+1,X'10'
         B     D07300
D07135   EQU   *
         CLC   WPARM3(5),=CL5'DM=NO'
         BNE   D07ERR
         NI    JQSTATUS,X'BF'
         OI    JQSTATUS+1,X'10'
D07300   EQU   *
         MVC   MSG04+1(L'DJC0422),DJC0422
         B     D0790
D07ERR   EQU   *
         MVC   MSG04+1(L'DJC045),DJC045
         B     D0790
         EJECT
***********************************************************************
*  D10MSG : AUSGABE NACH ENTSPRECHENDER OUTPUT-KLASSE                 *
***********************************************************************
         SPACE 3
D10MSG   EQU   *
         ST    R14,D10SAVE
         SR    R2,R2
         IC    R2,WKZ
         SLL   R2,2
         LR    R3,R15
         SPACE
         LTR   R2,R2                    * FEHLERHAFTE OUTPUT-ANGABE ?
         BZ    D10RTRN                  * JA
         B     *(R2)
         B     D10100                   * WTO/X-CONTROL
         B     D10200                   * TPUT/TSO
         B     D10300                   * PUT/LISTE
         B     D10400                   * ROSCOE
         SPACE
D10100   EQU   *
         LA    R15,1(R15)               * NO ASA
         SR    R0,R0                    * LOESCHEN REGISTER 0
         ICM   R0,7,WOUT                * CONSOL-IDENDIFEKATION
         MVC   WWTO1+4(MSGLEN-1),0(R15) * MODIFIZIEREN WTO-MESSAGE
         LA    R2,WWTO1                 *
         WTO   MF=(E,(R2))              *
         B     D10900
         SPACE 1
D10200   EQU   *
         LA    R15,1(R15)               * NO ASA
         TPUT  (R15),MSGLEN-1           * TPUT/TSO
         B     D10900
         SPACE 1
D10300   EQU   *
         SR    R2,R2                    * LOESCHEN-REGISTER
         ICM   R2,7,WOUT
         PUT   (R2),(R15)               * PUT LISTE
         SPACE 1
D10900   EQU   *
         CLI   0(R3),C' '               * KONSTANTE (UEBERSCHRIFT) ?
         BNE   D10RTRN                  * JA NICHT LOESCHEN
         MVI   0(R3),C' '               * LOESCHEN OUTPUT-AREA
         MVC   1(MSGLEN-1,R3),0(R3)
         SPACE 1
D10RTRN  EQU   *
         L     R14,D10SAVE
         BR    R14
D10400   EQU   *
         STM   R14,R12,12(R13)   SAVE ALL REGS
         LA    R0,MSGLEN-1      MESSAGE LENGTH
         STC   R0,0(R15)
         LR    R0,R15
         L     R13,4(R13)
         ST    R0,76(R13)
         OI    76(R13),X'80'
         L     R15,100(R13)
         LA    R1,76(R13)
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R2,R12,28(R13)
         BR    R14
         EJECT
***********************************************************************
* D11PARM AUFBEREITEN DER UEBERGEBENEN PARAMETER                      *
***********************************************************************
         SPACE 3
D11PARM  EQU   *
         ST    R14,D11SAVE
         LR    R3,R1                   * SAVE PARM-ADDR.
         USING PARM,R3
         MVC   WCOMMAND(80),BLANKS
         MVC   WPARM,PARM              *
         LA    R4,75
         L     R5,PATEXT               * ADDR.TEXT
         DO    ((R4))
         IF    (0(4,R5),=,C'DJC,'),THEN DJC FOUND
         IF    (5(R5),=,C' '),OR,                                      C
               (5(R5),=,C','),THEN
         MVC   WCOMMAND,4(R5)
         IF    (5(R5),=,C','),THEN     FURTHER PARAMETERS GIVEN
         LA    R5,6(R5)                SETUP
         SR    R2,R2
         TRT   0(71,R5),TRTTAB         SEARCH FOR COMMA OR BLANK
         LA    R4,0(R1)
         SR    R4,R5                   LENGTH
         IF    ((R4),>,H'0'),THEN      NETID GIVEN
         IF    ((R4),>,H'8'),THEN      INVALID LENGTH
         B     ERROR
         ENDE
         BCTR  R4,0
         EX    R4,MOVE1                MOVE NETID
         ENDE
         LA    R5,1(R1)                SETUP
         TRT   0(71,R5),TRTTAB         SEARCH FOR COMMA OR BLANK
         LA    R4,0(R1)
         SR    R4,R5                   LENGTH
         IF    ((R4),>,H'0'),THEN      JOBNAME GIVEN
         IF    ((R4),>,H'8'),THEN      INVALID LENGTH
         B     ERROR
         ENDE
         BCTR  R4,0
         EX    R4,MOVE2                MOVE JOBNAME
         ENDE
         LA    R5,1(R1)                SETUP
         TRT   0(71,R5),TRTTAB         SEARCH FOR COMMA OR BLANK
         LA    R4,0(R1)
         SR    R4,R5                   LENGTH
         IF    ((R4),>,H'0'),THEN      ACTION GIVEN
         IF    ((R4),>,H'63'),THEN     INVALID LENGTH
         B     ERROR
         ENDE
         BCTR  R4,0
         EX    R4,MOVE3                MOVE ACTION
         ENDE
         LA    R5,1(R1)                SETUP
         ENDE
         ENDE
         L     R14,D11SAVE
         BR    R14
         ENDE
         LA    R5,1(R5)                * ERHOEHEN PARM-LISTE
         ENDE
         L     R14,D11SAVE
         BR    R14
         SPACE 3
MOVE1    MVC   WPARM1(0),0(R5)         MOVE NETID
MOVE2    MVC   WPARM2(0),0(R5)         MOVE JOBNAME
MOVE3    MVC   WPARM3(0),0(R5)         MOVE ACTION
         EJECT
***********************************************************************
*        DATEN-DEFINITIONEN (KONSTANTEN)                              *
***********************************************************************
         SPACE 3
JOBNETDS DC    CL8'JOBNETDS'
TABAD    DC    F'0'
KTAB     EQU   *                        * COMMAND-TABELLE
         DC    C'F',AL3(D01)            * FORMAT 'N0.C.JOBNETDS'
         DC    C'P',AL3(D02)            * PURGE NETZ
         DC    C'D',AL3(D03)            * DISPLAY
         DC    C'N',AL3(D04)            * NETZ  STOP/START
         DC    C'I',AL3(D05)            * JOB-NET-VERARBEITUNG ON/OFF
         DC    C'M',AL3(D06)            * MAINTENANCE
         DC    C'C',AL3(D07)            * CHANGE STATUS
KTABEND  EQU   *                        * COMMAND-TABELLE-ENDE
KTABEL   EQU   4                        * L'ENTRY
KTABE    EQU   ((KTABEND-KTAB)/KTABEL)  * ENTRIES COMMAND-TABELLE
BLANKS   DC    CL80' '
WTO1     WTO   '                                                       *
                    ',MCSFLAG=REG0,MF=L
WTOLEN   EQU   *-WTO1
WTOR1    WTOR  'DJC047D ENTER NEXT STATEMENT OR END',*,8,*,            *
               MCSFLAG=REG0,MF=L
WTORLEN  EQU   *-WTOR1
MSG01A   DS    0CL60
         DC    C'1'
         DC    C'NETNAME  JOBNAME  JOB# STATUS SUB DJCHC ACCHC DJCCC HI*
               GHCC '
MSG01B   DS    0CL60
         DC    C'-'
         DC    C'            CREATING  RELEASING  TERMINATING     PURGI*
               NG   '
MSG02    DS    0CL60
         DC    C'1'
         DC    C'PTNAVBLK  PTLSTBLK  PTLOCK    PTNAVQUE  PTSTATUS      *
                    '
MSG03    DS    0CL60
         DC    C'1'
         DC    C'NETID    STATUS NUMBER OF JOBS           CREATION  LAS*
               T USE'
MSGLEN   EQU   60
         SPACE 2
LINKLST  LINK  EPLOC=*,SF=L                * LINK-LIST-FORMAT
SPDJC05  DC    CL8'SPDJC05 '
CCMD     DS    0F
         DC    H'52,0'
         DC    CL48' $CJ1234  **** INTERNAL CANCEL FROM DJC **** '
         SPACE 2
TABCHAR  DC    CL16'0123456789ABCDEF'      * TR-TABELLE
TABMON   DC    H'31,28,31,30,31,30,31,31,30,31,30,31'
TABNUM   DC    256XL1'FF'
         ORG   TABNUM+C'A'
         DC    6XL1'00'
         ORG   TABNUM+C'0'
         DC    10XL1'00'
         ORG
TRTTAB   DC    256X'0'
         ORG   TRTTAB+C' '
         DC    X'01'
         ORG   TRTTAB+C','
         DC    X'02'
         ORG
TABHEX   DC    256XL1'FF'
         ORG   TABHEX+C'A'
         DC    X'A0B0C0D0E0F0'
         ORG   TABHEX+C'0'
         DC    X'00102030405060708090'
         ORG
ZWI1     DS    CL3
ZWI2     DS    CL3
         SPACE 5
DJC040   DC    C'DJC040I NO JOBS AVAILABLE'
DJC041   DC    C'DJC041I INVALID COMMAND'
DJC042   DC    C'DJC042I JNCB NOT PRESENT - COMMAND IGNORED'
DJC043   DC    C'DJC043I NETID NOT FOUND'
DJC044   DC    C'DJC044I JOB NOT FOUND'
DJC045   DC    C'DJC045I INVALID REQUEST'
DJC046   DC    C'DJC046I XXXXXXXX AT HEXA LOCATION XXXXXXXX'
DJC047   DC    C'DJC047I NO NETIDS'
DJC048   DC    C'DJC048I FAST LOCK OFF SUCCESSFULLY ISSUED '
DJC049   DC    C'DJC049I JOBNET CONTROL BLOCK AVAILABLE '
DJC0410  DC    C'DJC0410I JNCB LOCKED FROM 12345678 AT 12345678'
DJC0411  DC    C'DJC0411I INVALID SUB-COMMAND'
DJC0412  DC    C'DJC0412I FORMAT SPECIFICATION-ERROR'
DJC0413  DC    C'DJC0413I JOB-NET SWITCH ON SUCCESFULLY ISSUED'
DJC0414  DC    C'DJC0414I JOB-NET SWITCH OFF SUCCESSFULLY ISSUED'
DJC0415  DC    C'DJC0415I SWITCH SPECIFICATION-ERROR'
DJC0416  DC    C'DJC0416I PURGE SPECIFICATION-ERROR'
DJC0417  DC    C'DJC0417I NET-PURGE SUCCESFULLY ISSUED'
DJC0418  DC    C'DJC0418I NET XXXXXXXX NOW ACTIVE'
DJC0419  DC    C'DJC0419I NET XXXXXXXX NOW INACTIVE'
DJC0420  DC    C'DJC0420I NET SPECIFICATION-ERROR'
DJC0421  DC    C'DJC0421I FORMAT SUCCESSFULLY ISSUED'
DJC0422  DC    C'DJC0423I REQUESTED CHANGE HAS BEEN PERFORMED'
DJC0423  DC    C'DJC0424I SMCA-EXTENSION NOT AVAILABLE'
DJC0424  DC    C'DJC0425I RESTART PROCESSING COMPLETE'
MSGXX    DC    CL60'-DJC0422I XXXXXXXX - DD-STMT. MISSING'
         SPACE 2
BLKLEN   EQU   2040        * LENGTH BLOCK
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,LRECL=80,                *
               RECFM=FB,BLKSIZE=4000
OPTCD    DC    CL80'-OPT  NOLIST,NOPUNCH,NOEXEC'
SELCD    DC    CL80'-DLM'
ENDCD    DC    CL80'-END'
SECMAJ   DC    CL8'XDJCCMD'
SECMIN   DC    C'SERIALISATION'
LIBRPARM DS    0F
         DC    X'80',AL3(LIBRPRM)
         CNOP  2,4
LIBRPRM  DC    AL2(4),C'NJTA'
         SPACE 5
         LTORG
TABNUM1  DC    256XL1'FF'
         ORG   TABNUM1+C'0'
         DC    10XL1'00'
         ORG
         EJECT
***********************************************************************
*        DATEN-DEFINITIONEN (VARIABLE)                                *
***********************************************************************
         SPACE 3
WORK     DSECT
WSAVE    DS    18F                      * SAVE-AREA
WPARM    DS    0F                       * PARAMETER-LISTE
WKZ      DS    C                        * COMMAND-CODE
WOUT     DS    CL3                      * ADRESSE DCB/KONSOLE
WCOMMAND DS    C                        * PARAMETER 1
WPARM1   DS    CL8                      * PARAMETER 2
WPARM2   DS    CL8                      * PARAMETER 3
WPARM3   DS    CL80
SAVE9    DS    F
SWITCH   DS    X
LIBRDLM  EQU   X'80'
SHORT    EQU   X'40'
SHRTHDR  EQU   X'20'
WNETID   DS    CL8
ZWJOBNM  DS    CL8
ZWJOBNR  DS    CL4
         SPACE 2
WPARM5   DS    0F                       * PARAMETER-> SPDJC05
WPARM5L  DS    H                        * LENGTH OF PARAMETER
WPARM5B  DS    CL4                      * BLOCK-COUNT
WAPARM5  DS    F                        * ADDRESS OF PARM-AREA
         SPACE 2
WLINKE   DS    2F                       * LINK-EXECUTE-FORM
         SPACE 2
WTIME    DS    F                        * WORK-FELD
WTABMON  DS    12H
WSAVER   DS    5F                       * WORK-FELD
WSAVER1  DS    5F                       * WORK-FELD
WSAVER2  DS    2F                       * WORK-FELD
WDOWO    DS    D                        * WORK-FELD
WSTATUS1 DS    X                        * STATUS-BYTE 1
WSTATUS2 DS    X                        * STATUS-BYTE 2
ZWFIRSTJ DS    F                        * ZWISCHEN-FELD ADRESSE
D01SAVE  DS    F                        *
D02SAVE  DS    F                        *
D03SAVE  DS    F                        *
D03ASAVE DS    F                        *
D03BSAVE DS    F                        *
D03CSAVE DS    F                        *
D03DSAVE DS    F                        *
D03ESAVE DS    F                        *
D03FSAVE DS    F                        *
D04SAVE  DS    F                        *
D05SAVE  DS    F                        *
D06SAVE  DS    F                        *
D07SAVE  DS    F                        *
D10SAVE  DS    F                        *
D11SAVE  DS    F                        *
WECB01   DS    F                        * ECB FUER WTOR01
WBLKNR   DS    F                        * BLOCK-NUMMER BINAER
WWTO1    DS    CL(WTOLEN)               * WTO LIST-FORM
WWTOR1   DS    CL(WTORLEN)              * WTOR LIST-FORM
MSG04    DS    0CL60
         DS    C
MNETID   DS    CL8
         DS    CL1
MSTATUS  DS    CL5
         DS    CL2
MNBOJH   DS    CL2
MNBOJHZ  DS    CL3
         DS    C
MNBOJR   DS    CL2
MNBOJRZ  DS    CL3
         DS    C
MNBOJO   DS    CL2
MNBOJOZ  DS    CL3
         DS    C
MNBOJP   DS    CL2
MNBOJPZ  DS    CL3
MTCREA   DS    CL10
MTLUSE   DS    CL10
         SPACE 2
MSG05    DS    0CL60
         DS    C
PTRF1    DS    CL8
         DS    CL2
PTRF2    DS    CL8
         DS    CL2
PTRF3    DS    CL8
         DS    CL2
PTRF4    DS    CL8
         DS    CL2
PTRF5    DS    CL4
         DS    CL15
         SPACE 2
MSG06    DS    0CL60
         DS    C
M06NET   DS    CL8
         DS    C
M06JOB   DS    CL8
         DS    CL1
M06JOB#  DS    CL4
         DS    CL3
M06STAT  DS    CL4
         DS    CL2
M06SUBST DS    CL2
         DS    CL2
M06DJCHC DS    CL4
         DS    CL2
M06ACCHC DS    CL4
         DS    CL2
M06DJCCC DS    CL4
         DS    CL3
M06HCC   DS    CL4
         DS    CL6
         SPACE 2
MSG07    DS    0CL60
         DS    C
M07TITLE DS    CL10
M07TSCRE DS    CL10
         DS    CL1
M07TSREL DS    CL10
         DS    CL3
M07TSTER DS    CL10
         DS    CL2
M07TSPUR DS    CL10
         DS    CL3
         SPACE 2
MSG08    DS    0CL60
         DS    C
M08TITLE DS    CL10
         DS    CL6
M08JSCRE DS    CL4
         DS    CL7
M08JSREL DS    CL4
         DS    CL9
M08JSTER DS    CL4
         DS    CL8
M08JSPUR DS    CL4
         DS    CL3
         SPACE
WREPLY   DS    CL8                      * EINGABE KONSOLE
WFELD    DS    CL8                      *
WORKLEN  EQU   *-WORK
         EJECT
***********************************************************************
*              D S E C T '  S                                         *
***********************************************************************
         SPACE 3
PARM     DSECT               * DSECT UEBERGEBENE PARAMETER
PKZ      DS    C
POUT     DS    CL3
PATEXT   DS    CL4
PTEXT    DS    CL80
         SPACE 3
         COPY  @DJCDS
         COPY  @JNCB
         COPY  SMCAEXT
         END
./ ADD  NAME=SPDJC05
SPDJC05  TITLE 'FORMAT JOBNET-DATASET'
***********************************************************************
*                                                                     *
*              P R O L O G                                            *
*                                                                     *
***********************************************************************
*                                                                     *
*              PARAMETERS     FORM EXEC-CARD: NUMBER OF BLOCKS        *
*                                             NUMERIC 3 DIGITS        *
*                                                                     *
*              I/O  INPUT     NONE                                    *
*                   OUTPUT    JOBNETDS  QSAM (PUT MOVE)               *
*                             DCB=(RECFM=F,BLKSIZE=&BLKSIZE)          *
*                                                                     *
*              MACROS         XSAVE,XTRETURN,OPEN,CLOSE,PUT,WTO,ABEND,*
*                             IF,DO,ENDE,@DJCDS,                      *
*                             GETMAIN,FREEMAIN                        *
*                                                                     *
*              DESCRIPTION    THIS ROUTINE FORMATS THE JOBNET-DATASET.*
*                             IN EACH BLOCK THE 'BLOCKHDR' IS         *
*                             INITIALIZED, IN THE FIRST BLOCK THE     *
*                             'POINTER' IS INITIALIZED TOO.           *
*                                                                     *
***********************************************************************
         SPACE 3
         GBLA  &BLKSIZE                GLOBAL-CONSTANT
&BLKSIZE SETA  2040                    = CURRENT LENGTH
         EJECT
SPDJC05  CSECT
         XSAVE R3,,SPDJC05,WORKLEN     HOUSEKEEPING
         USING WORK,R13
         L     R4,0(R1)                CHECK PARAMETER
         LH    R5,0(R4)                L'PARM
         CH    R5,=H'4'
         BH    QIF2
         CH    R5,=H'1'
         BNL   QIF1
QIF2     WTO   'DJC051E PARAMETER SPECIFICATION INVALID',ROUTCDE=(1,11)
         ABEND 1
QIF1     EQU   *
         BCTR  R5,0                    L'PARM - 1 FOR EX-INSTRUCTION
         EX    R5,MOVEPARM             PACK WDOUBLE,2(0,R4)
         CVB   R4,WDOUBLE              R4 = NUMBER OF BLOCKS TO FORMAT
         C     R4,=F'10'
         BNL   QIF3
         WTO   'DJC052E NUMBER OF BLOCKS < 10',ROUTCDE=(1,11)
         ABEND 2
QIF3     EQU   *
         SPACE 3
*              GET SPACE FOR BLOCK
         SPACE
         LH    R7,=H'&BLKSIZE'         L'BLOCK
         GETMAIN R,LV=(R7)
         LR    R6,R1                   A(BLOCK)
         MVCL  R6,R14                  CLEAR BLOCK
         LR    R6,R1                   RESET AFTER MOVELONG
         USING BLOCKHDR,R6             ADDRESSIBILITY
         LA    R7,BHLENGTH(R6)
         USING POINTER,R7
         SPACE 3
*              INITIALYZE BLOCKHDR AND POINTER
         SPACE
         MVC   BHRB00,ZEROS            FIRST BLOCK = 0
         MVC   BHNXTBLK,ZEROS          NEXT BLOCK = 1
         MVC   PTNAVBLK,=X'00010000'   NEXT AVAILABLE BLOCK FOR NETIDS
         LR    R14,R4                  NUMBER OF BLOCKS TO FORMAT
         BCTR  R14,0                   - 1
         SLL   R14,16                  CONVERT TO BLKADDR
         ST    R14,PTLSTBLK            LAST BLOCK IN DATASET
         MVC   PTLOCK,ZEROS            LOCK (0 = AVAILABLE)
         LA    R14,BHLENGTH+PTLENGTH   FIRST AVAILABLE SPACE
         ST    R14,PTNAVQUE            FOR 'NETQUEUE'-ELEMENTS
         MVC   PTSTATUS,ZEROS          STATUS-INDICATORS
         MVC   PTFREE,ZEROS            FREE
         SPACE 3
*              WRITE FIRST BLOCK (0)
         SPACE
         MVC   WDCB,JOBNETDS           MODEL-DCB INTO WORKAREA
         MVC   WLISTF,OPENL            OPEN LIST-FORM
         OPEN  (WDCB,(OUTPUT)),MF=(E,WLISTF)
         TM    WDCB+48,X'10'
         BO    QIF5
         WTO   'DJC053E OPEN JOBNETDS UNSUCCESSFUL',ROUTCDE=(1,11)
         ABEND 3
QIF5     EQU   *
         PUT   WDCB,(R6)               WRITE FIRST BLOCK
         XC    POINTER(PTLENGTH),POINTER CLEAR
         SPACE 3
*              WRITE ALL OTHER BLOCKS EXCEPT THE LAST ONE
         SPACE
         L     R5,ONE                  SECOND BLOCK (ADDRESS = 1)
         SH    R4,=H'1'                ONE BLOCK IS ALREADY WRITTEN
         BCTR  R4,0                    - 1 FOR THE LAST ONE
QDO1     EQU   *
         SH    R4,=H'1'
         BM    QDO3
         ST    R5,BHRB00               ADDR. OF THIS BLOCK
         A     R5,ONE                  INCREMENT BY ONE
         ST    R5,BHNXTBLK             ADDR. OF THE NEXT BLOCK
         PUT   WDCB,(R6)
         BCT   R4,QDO1
QDO3     EQU   *
         SPACE 3
*              WRITE THE LAST BLOCK
         SPACE
         ST    R5,BHRB00               ADDR. OF THE LAST BLOCK
         MVC   BHNXTBLK,ZEROS          END OF CHAIN
         PUT   WDCB,(R6)
         SPACE 3
*              CLOSE AND RETURN
         SPACE
         MVC   WLISTF,CLOSEL
         CLOSE (WDCB),MF=(E,WLISTF)
         LH    R0,=H'&BLKSIZE'
         LR    R1,R6
         FREEMAIN R,LV=(0),A=(1)
         XRETURN 0,R
         TITLE 'DEFINITIONEN'
         LTORG
MOVEPARM PACK  WDOUBLE,2(0,R4)
ONE      DS    0F
         DC    X'00010000'
ZEROS    DC    XL4'0'
OPENL    OPEN  (JOBNETDS,(OUTPUT)),MF=L
CLOSEL   CLOSE (JOBNETDS),MF=L
         PRINT NOGEN
JOBNETDS DCB   DDNAME=JOBNETDS,                                        C
               DSORG=PS,                                               C
               MACRF=PM,                                               C
               RECFM=F,                                                C
               BLKSIZE=&BLKSIZE
         SPACE 3
         REG
WORK     DSECT
WSAVE    DS    18F
WDOUBLE  DS    D
WLISTF   DS    F
WDCB     DS    CL96
         DS    0D
WORKLEN  EQU   *-WORK
         COPY  @DJCDS
         END
./ ADD  NAME=SPDJC06
SPDJC06  TITLE 'ANALYSIEREN DER *DJC-KARTEN'
***********************************************************************
*                                                                     *
*              P R O L O G :                                          *
*                                                                     *
***********************************************************************
*                                                                     *
*              PGM-FUNKTION:  ANALYSIEREN UND BEREITSTELLEN DER       *
*                             '*DJC' WERTE                            *
*              INPUT        : EIN VARIABLER STRING BEGINNEND MIT      *
*                             '*DJC ',DAS ENDE WIRD DURCH BLANK GE-   *
*                             KENNZEICHNET.(ADRESSE IM REGISTER1)     *
*              OUTPUT       : EIN DATENBLOCK DESSEN FELDER AUF        *
*                             PLAUSIBILITAET GEPRUEFT SIND            *
*                             ADRESSE (GETMAIN-AREA) WIRD IM REGISTER *
*                             15 UEBERGEBEN.                          *
***********************************************************************
         EJECT
SPDJC06  CSECT
         SAVE  (14,12),,SPDJC06.&SYSDATE_&SYSTIME
         EQUATE
         LR    R12,R15
         LR    R2,R1                    * SAVE REGISTER 2
         USING SPDJC06,R12              * BASREG
         LA    R3,13(R1)                * START ADRESSE PARM-LISTE
         GETMAIN R,LV=WORKLEN,SP=241
         XC    0(WORKLEN,R1),0(R1)      * CLEAR WORK-AREA
         ST    R1,8(R13)                * SA DOWN CHAIN
         ST    R13,4(R1)                * SA UP CHAIN
         LR    R13,R1                   * LOAD SA ADDRESS
         USING WORK,R13                 * BASREG DSECT WORK
         GETMAIN R,LV=DJCLEN,SP=241
         LR    R6,R1                    * ADDRESS GETMAIN AREA(DJCBLK)
         USING DJCBLK,R6                * BASREG DSECT  DJCBLK
         LA    R5,DJCLEN                * L'DJCBLK  (MVCL)
         LA    R7,DJCLEN                * L'DJCBLK  (MVCL)
         LA    R4,KDJCBLK               * KONSTANTEN DJCBLK
         MVCL  R6,R4                    * INIT JOB-CONTROL-BLOCK
         LR    R6,R1                    * ADDRESS GETMAIN AREA(DJCBLK)
         MVC   WJOBNAME,0(R2)           * SAVE JOB-NAME
         SPACE
A00      EQU   *
         CLI   0(R3),C' '               * PARM-LISTE ENDE ?
         BE    CENDE                    * NEIN
         CLI   0(R3),C'='               * PARAMETER-BEGINN
         BE    A02                      * JA
         LA    R3,1(R3)                 * ERHOEHEN ADRESSE
         B     A00
         SPACE
A02      EQU   *
         LH    R4,PARMTAB               * ANZ.PARAMETER IN TABELLE
         LA    R5,PARMTAB+2             * ANFANGSADRESSE PARM-TABELLE
         LR    R10,R3                   * PARM-SCHLUESSEL=SUCH-ARG
         SH    R10,=H'2'
         SPACE 1
A10      EQU   *
         CLC   0(3,R5),0(R10)           * AKT. PARM GEFUNDEN ?
         BE    A20                      * JA
         LA    R5,5(R5)                 * NAECHSTES ELEMENT TAB
         BCT   R4,A10                   * LOOP
         B     FEHLER                   * FEHLERHAFTE PARM-ANGABE
         SPACE 1
A20      EQU   *
         MVC   DJCWTO1+12(2),0(R10)     * MODIFIZIEREN WTO MIT PARM-ID
         MVC   WINSTR,=X'41B00000'      * LA INSTR
         MVC   WINSTR+2(2),3(R5)        * S-ADDRESS
         EX    0,WINSTR                 * EXECUTE LA INSTR
         SR    R15,R15                  * RC = 0
         MVC   WFELD1,BLANK             * LOESCHEN WORK-FELD
         MVI   WSTEUER,X'00'            * LOESCHEN STEUER-BYTE
         SPACE 1
         BALR  R14,R11                  * PRUEFEN + LADEN AKT.PARM
         B     A30(R15)
A30      EQU   *
         B     A00                      * NAECHSTE PARM-ANGABE
         B     FEHLER1                  * FEHLERHAFTE PARM-ANGABE
         SPACE 1
CENDE    EQU   *
         CLI   DJCID,C' '               * ID-FELD VORHANDEN ?
         BNE   CRTRN                    * NEIN FEHLER
         MVC   DJCWTO1+12(2),=C'ID'     * MODIFIZIEREN WTO
         B     FEHLER1
FEHLER   EQU   *
         MVC   DJCWTO1+12(2),=C'XX'     * MODIFIZIEREN WTO ALLGEM.FEHL.
FEHLER1  EQU   *
         LA    R11,DJCWTO1              * ADRESSE FEHLER-MELDUNG
         ST    R11,DJCERR               * -> DJCBLK
         SPACE 1
CRTRN    EQU   *
         LR    R7,R13                   * ADDRESS GETMAIN-AREA
         L     R13,4(R13)               * HIGHER SAVE-AREA
         FREEMAIN R,A=(R7),LV=WORKLEN,SP=241
         LR    R15,R6                   * ADDRESS DJCBLK UEBERGEBEN
         RETURN (14,12),RC=(15)
         EJECT
***********************************************************************
*        D01ID      PARAMETER  ID=                                    *
***********************************************************************
D01ID    EQU   *
         ST    R14,D01SAVE              *
         LA    R7,8                     * L'PARM-ANGABE
         LA    R8,DJCID                 * EMPFANGSFELD
         BAL   R14,D09                  * LADEN FELD
         SPACE 1
         B     D010010(R15)
D010010  EQU   *
         B     D010100                  * PLAUSIBILITAETS-PRUEFUNG
         B     D01RTRN                  * FEHLER
         SPACE 1
D010100  EQU   *
         TRT   DJCID(1),TABA            * 1.ZEICHEN ALPHA ?
         BNE   D01FEHL                  * NEIN FEHLER
         TRT   DJCID(8),TABAN           * RESTLICHE ZEICHEN ALPHA/NUM
         BE    D01RTRN                  * JA
         SPACE 1
D01FEHL  EQU   *
         LA    R15,4                    * PARAMETER FALSCH
         SPACE 1
D01RTRN  EQU   *
         L     R14,D01SAVE              *
         BR    R14
         EJECT
***********************************************************************
*        D02OH      PARAMETER  OH=                                    *
*        D02DM                 DM=                                    *
*        D02NN                 NN=                                    *
***********************************************************************
D02OH    EQU   *
         LA    R8,DJCOH                 * EMPFANGSFELD DJCOH
         B     D02
         SPACE 1
D02NN    EQU   *
         LA    R8,DJCNN                 * EMPFANGSFELD DJCNN
         B     D02
         SPACE 1
D02DM    EQU   *
         LA    R8,DJCDM                 * EMPFANGSFELD DJCDM
         SPACE 1
D02      EQU   *
         ST    R14,D02SAVE
         LA    R7,3                     * MAX.L'FELD'
         SPACE 1
         BAL   R14,D09                  * LADEN FELD
         B     D020010(R15)
D020010  EQU   *
         B     D020100                  * PLAUSIBILITAETS-PRUEFUNG
         B     D02FEHL                  * PARAMETER-FALSCH
         SPACE 1
D020100  EQU   *
         CLC   0(3,R8),=C'NO '          * PARAMETER KORREKT ?
         BE    D02RTRN                  * JA
         CLC   0(3,R8),=C'YES'          * PARAMETER KORREKT ?
         BE    D02RTRN                  * JA
         SPACE 1
D02FEHL  EQU   *
         LA    R15,4                    * FEHLERHAFTE PARM-ANGABE
         SPACE 1
D02RTRN  EQU   *
         L     R14,D02SAVE
         BR    R14
         EJECT
***********************************************************************
*        D03HC      PARAMETER  HC=                                    *
***********************************************************************
D03HC    EQU   *
         ST    R14,D03SAVE
         LA    R7,3                     * L'HC+BEGRENZUNG
         LA    R8,WFELD1                * ADR.WORK-FELD
         SPACE 1
         BAL   R14,D09                  * LADEN FELD
         B     D030010(R15)
D030010  EQU   *
         B     D030100                  * PLAUSIBILITAETS-PRUEFUNG
         B     D03FEHL                  * FELD LAENGEN-FEHLER
         SPACE 1
D030100  EQU   *
         ICM   R9,7,WFELD1              * LADEN FELD HC
D030150  EQU   *
         ICM   R9,8,=C'0'               * FUEHRENDE NULL
         CLM   R9,1,=C' '               * RECHTS BLANK ?
         BNE   D030200                  * NEIN
         SRL   R9,8                     * RECHTS SHIFT
         B     D030150
         SPACE 1
D030200  EQU   *
         STCM  R9,7,WFELD1              * HC =RECHTSBUENDIG
         TRT   WFELD1(3),TABN           * PRUEFUNG NUMERISCH
         BNE   D03FEHL                  * FEHLER
         PACK  WDOWO,WFELD1(3)          * HC-> DOWO
         CVB   R9,WDOWO                 * CONVERTIEREN
         STCM  R9,3,DJCHC               * WERT -> DJCHC
         B     D03RTRN
         SPACE 1
D03FEHL  EQU   *
         LA    R15,4                    * FEHLER
         SPACE 1
D03RTRN  EQU   *
         L     R14,D03SAVE
         BR    R14
         EJECT
***********************************************************************
*        D04CC      PARAMETER  CC=                                    *
***********************************************************************
D04CC    EQU   *
         ST    R14,D04SAVE
         LA    R7,4                     * L'PARAMETER+BEGRENZUNG
         LA    R8,WFELD1                * EMPFANGSFELD
         SPACE 1
         BAL   R14,D09                  * LADEN FELD
         B     D040010(R15)
D040010  EQU   *
         B     D040100                  * PLAUSIBILITAETS-PRUEFUNG
         B     D04FEHL                  * FELD LAENGEN-FEHLER
D040100  EQU   *
         ICM   R10,15,WFELD1            * LADEN FELD CC
D040150  EQU   *
         CLM   R10,1,=C' '              * RECHTS BLANK ?
         BNE   D040200                  * NEIN
         SRL   R10,8                    * RECHTS SHIFT
         ICM   R10,8,=C'0'              * FUEHRENDE NULL
         B     D040150
         SPACE 1
D040200  EQU   *
         LA    R7,4                     * LOOP
D040300  EQU   *
         CLM   R10,1,=C'A'              * < A
         BL    D04FEHL                  * JA
         CLM   R10,1,=C'F'              * > F
         BH    D040310                  * JA
         LA    R9,183                   * ALPHA
         B     D040320
D040310  EQU   *
         CLM   R10,1,=C'0'             * < 0
         BL    D04FEHL                 * JA
         CLM   R10,1,=C'9'             * > 9
         BH    D04FEHL                 * JA
         LA    R9,240                  * NUMERISCH
D040320  EQU   *
         SR    R10,R9                   * KONVERT -> HEX
         SRDL  R10,4                    * NUMERISCHE TEIL SICHER
         SRL   R10,4                    * ZONEN TEILEN UNTERDRUECKEN
         BCT   R7,D040300
         STCM  R11,12,DJCCC             * CC-PARAMETER -> DJC
         B     D04RTRN
         SPACE 1
D04FEHL  EQU   *
         LA    R15,4                    * FEHLER-CODE
         SPACE 1
D04RTRN  EQU   *
         L     R14,D04SAVE
         BR    R14
         EJECT
***********************************************************************
*        D05NR      PARAMETER  NR=                                    *
*        D05NC                 NC=                                    *
*        D05AR                 AR=                                    *
*        D05AC                 AC=                                    *
*        D05NE                 NE=                                    *
*        D05EX                 EX=                                    *
***********************************************************************
D05NR    EQU   *
         LA    R8,DJCNR                 * ADR.EMPFANGSFELD
         B     D05X                     *
         SPACE 1
D05NC    EQU   *
         LA    R8,DJCNC                 * ADR.EMPFANGSFELD
         B     D05X                     *
         SPACE 1
D05AR    EQU   *
         LA    R8,DJCAR                 * ADR.EMPFANGSFELD
         B     D05X
         SPACE 1
D05AC    EQU   *
         LA    R8,DJCAC                 * ADR.EMPFANGSFELD
         B     D05X                     *
         SPACE 1
D05NE    EQU   *
         LA    R8,DJCNE                 * ADR.EMPFANGSFELD
         B     D05                      *
         SPACE 1
D05EX    EQU   *
         LA    R8,DJCEX                 * ADR.EMPFANGSFELD
         SPACE 1
D05      EQU   *
         LA    R9,20                    * LOOP-ZAEHLER FELDER MAXIMAL
         B     D050010                  * GLEICHE VERARBEITUNG
         SPACE 1
D05X     EQU   *
         LA    R9,20                    * LOOP-ZAEHLER FELDER MAXIMAL
         OI    WSTEUER,X'01'
         SPACE 1
D050010  EQU   *
         ST    R14,D05SAVE              * RUECKSPRUNG-ADRESSE
         LA    R10,1                    * ZAEHLER (  + 1
         LA    R11,0                    * ZAEHLER )  = 0
         LA    R3,1(R3)                 * ADR.AUF PARAMETER STELLEN
         SPACE 1
D050020  EQU   *
         MVC   WFELD1,BLANK             * LOESCHEN WORK-FELD
         LA    R7,8                     * MAX.L'FELD
         SPACE 1
         BAL   R14,D09                  * LADEN FELD
         B     D050030(R15)             *
D050030  EQU   *
         B     D050040                  * PLAUSIBILITAETSPRUEFUNG
         B     D05FEHL                  * FEHLERHAFTE PARM-ANGABE
         SPACE 1
D050040  EQU   *
         TRT   0(1,R8),TABA             * 1.ZEICHEN ALPHA ?
         BNE   D05FEHL                  * NEIN FEHLER
         TRT   0(8,R8),TABAN            * RESTL.ZEICHEN ALPHA/NUM.?
         BNE   D05FEHL                  * NEIN FEHLER
         SPACE 1
D050045  EQU   *
         SR    R2,R2                    * LOESCHEN REGISTER
         IC    R2,WTRZ                  * DISP.FUER BRANCH-TAB.
         B     D050050(R2)              * BRANCH AKT.TRENNZEICHEN
D050050  EQU   *
         B     D05FEHL                  DATEN
         B     D05FEHL                  BLANK
         B     D05FEHL                  =
         B     D050060                  (
         B     D050070                  )
         B     D050080                  ,
         SPACE 1
D050060  EQU   *
         LA    R10,1(R10)               * ZAEHLER '(' + 1
         B     D050100                  *
         SPACE 1
D050070  EQU   *
         LA    R11,1(R11)               * ZAEHLER ')' + 1
         CR    R10,R11                  * ZAEHLER')' = ZAEHLER ')' ?
         BE    D05RTRN                  * PARAMETER-ENDE
         LA    R3,1(R3)                 * ADR.AUF NAECHSTES ZEICHEN
         CLI   0(R3),C')'               * ')' ?
         BNE   D050075                  * NEIN
         LA    R11,1(R11)               * ZAEHLER ')' + 1
         CR    R11,R10                  * ZAEHLER ')' = ZAEHLER ')' ?
         BE    D05RTRN                  * PARAMETER-ENDE
         B     D05FEHL                  * JETZT FEHLERHAFTE PARM-ANGABE
         SPACE 1
D050075  EQU   *
         CLI   0(R3),C','               * ',' ?
         BNE   D05FEHL                  * FEHLER UNGUELTIGE ZEICHEN
         CLI   WFELD1,C' '              * ATTRIBUT-ANGABE VORHANDEN ?
         BNE   D050200                  * JA
         B     D05FEHL                  * NEIN UNGUELTIGES ZEICHEN
         SPACE 1
D050080  EQU   *
         TM    WSTEUER,X'01'            * ATTRIBUT = L ?
         BO    D050200                  * JA
         B     D050250                  * NEIN
         SPACE 1
D050100  EQU   *
         TM    WSTEUER,X'01'            * ATTRIBUT = L  ?
         BNO   D05FEHL                  * NEIN FEHLER
         LA    R7,4                     * L'ATTRIBUT
         LR    R5,R8                    * SICHERN REGISTER 8
         LA    R8,WFELD1                * EMPFANGSFELD
         SPACE 1
         BAL   R14,D09                  * LADEN FELD
         CLC   WFELD1(4),=C'HOLD'       * GUELTIGE PARM-ANGABE ?
         BNE   D05FEHL                  * NEIN
         LR    R8,R5                    * RUECKLADEN REGISTER 8
         OI    8(R8),B'10000000'        * ATRIBUT -> DJCB = L
         B     D050045                  * PRUEFEN TRENNZEICHEN
         SPACE 1
D050200  EQU   *
         LA    R8,1(R8)                 * ADR.PARM(DJCB) + 1
         SPACE 1
D050250  EQU   *
         LA    R8,8(R8)                 * ADR.PARM(DJCB) + 8
         BCT   R9,D050020               * LOOP
         SPACE 1
D05FEHL  EQU   *
         LA    R15,4                    * FEHLER IN PARM-ANGABE
         SPACE 1
D05RTRN  EQU   *
         L     R14,D05SAVE              * UPRO-RETURN
         BR    R14
         EJECT
***********************************************************************
*        D09   PARAMETER-WERTE LADEN
***********************************************************************
D09      EQU   *
         ST    R14,D09SAVE
         LA    R3,1(R3)                 * ADR.PARM-LISTE + 1
         TRT   0(10,R3),TABTRZ          * TRENNZEICHEN GEFUNDEN ?
         BE    D09FEHL                  * NEIN
         LR    R4,R1                    * SICHER ADR.NAECHSTES TRENNZ.
         SR    R1,R3                    * ERRECHNEN LAENGE FELD
         CR    R1,R7                    * FELD-LAENGE KORREKT ?
         BH    D09FEHL                  * NEIN
         LTR   R1,R1                    * FELD-LAENGE = 0
         BZ    D09FEHL                  * FEHLER
         BCTR  R1,0                     * FELD-LAENGE - 1 FUER EXECUTE
         EX    R1,EXMOVE                * UEBERTRAGEN FELD
         LR    R3,R4                    * LADEN ADR.NAECHSTES TRENNZ.
         STC   R2,WTRZ                  * TRENNZEICHEN (DISP.)
         B     D09RTRN
D09FEHL  EQU   *
         LA    R15,4                    * SETZEN FELD-LAENGEN-FEHLER
D09RTRN  EQU   *
         L     R14,D09SAVE
         BR    R14
EXMOVE   MVC   0(0,R8),0(R3)
         EJECT
***********************************************************************
*        DATEN-DEFINITIONEN                                           *
***********************************************************************
         DS    0H
PARMTAB  DC    AL2((PARMTEND-PARMTAB)/5)     PARMETER-TABELLE
         DC    C'ID=',SL2(D01ID)
         DC    C'OH=',SL2(D02OH)
         DC    C'HC=',SL2(D03HC)
         DC    C'CC=',SL2(D04CC)
         DC    C'NR=',SL2(D05NR)
         DC    C'AR=',SL2(D05AR)
         DC    C'NC=',SL2(D05NC)
         DC    C'AC=',SL2(D05AC)
         DC    C'DM=',SL2(D02DM)
         DC    C'NN=',SL2(D02NN)
         DC    C'NE=',SL2(D05NE)
         DC    C'EX=',SL2(D05EX)
PARMTEND EQU   *
         SPACE 3
         DS    0F
KDJCBLK  DC    CL8' '                   * DJCID
         DC    F'0'                     *    ERR
         DC    H'1'                     *    HC
         DC    CL3'NO '                 *    OH
         DC    CL3'NO '                 *    NN
         DC    XL2'0FFF'                *    CC
         DC    CL3'NO '                 *    DM
         DC    20XL9'404040404040404000' *   NR 1-20  + STATUS
         DC    20XL9'404040404040404000' *   AR 1-20  + STATUS
         DC    20XL9'404040404040404000' *   NC 1-20  + STATUS
         DC    20XL9'404040404040404000' *   AC 1-20  + STATUS
         DC    20CL8' '                 *    NE 1-20
         DC    20CL8' '                 *    EX 1-20
         WTO   'DJC061I ID OPERAND INVALID',ROUTCDE=(11),MF=L
         SPACE 3
TABTRZ   DC    256XL1'00'               * TRENN-ZEICHEN-TABELLE
         ORG   TABTRZ+C' '              BLANK
         DC    X'04'
         ORG   TABTRZ+C'='              =
         DC    X'08'
         ORG   TABTRZ+C'('              (
         DC    X'0C'
         ORG   TABTRZ+C')'              )
         DC    X'10'
         ORG   TABTRZ+C','              ,
         DC    X'14'
         ORG
         SPACE 3
TABN     DC    256XL1'FF'               * TABELLE NUMERISCH
         ORG   TABN+C'0'
         DC    10XL1'00'
         ORG
         SPACE 3
TABA     DC    256XL1'FF'               * TABELLE ALPHA
         ORG   TABA+C'A'
         DC    9XL1'00'
         ORG   TABA+C'J'
         DC    9XL1'00'
         ORG   TABA+C'S'
         DC    8XL1'00'
         ORG
         SPACE 3
TABAN    DC    256XL1'FF'               * TAB.ALPHA,NUMERISCH,BLANK,@
         ORG   TABAN+C' '
         DC    X'00'
         ORG   TABAN+C'@'
         DC    X'00'
         ORG   TABAN+C'A'
         DC    9XL1'00'
         ORG   TABAN+C'J'
         DC    9XL1'00'
         ORG   TABAN+C'S'
         DC    8XL1'00'
         ORG   TABAN+C'0'
         DC    10XL1'00'
         ORG   TABAN+C'#'
         DC    X'00'
         ORG   TABAN+C'$'
         DC    X'00'
         ORG
         SPACE 3
         LTORG
         SPACE 3
BLANK    DC    CL10' '
         EJECT
***********************************************************************
*              JOB-CONTROL-BLOCK                                      *
***********************************************************************
         COPY  @DJCBLK
         EJECT
***********************************************************************
*        WORK-BEREICHE                                                *
***********************************************************************
WORK     DSECT
WSAVE    DS    18F                      * SAVE AREA
WDOWO    DS    D                        * WORK-AREA
D01SAVE  DS    F
D02SAVE  DS    F
D03SAVE  DS    F
D04SAVE  DS    F
D05SAVE  DS    F
D09SAVE  DS    F
WINSTR   DS    F                        * LA-INSTR.MIT S-CON/EXECUTE
WFELD1   DS    CL10                     * WORK-AREA
WSTEUER  DS    C                        * SCHALTER
WTRZ     DS    C                        * WERT AUS TABTRZ
WJOBNAME DS    CL8                      * JOB-NAME
WORKLEN  EQU   *-WORK
         END
./ ADD  NAME=SPDJC07
SPDJC07  TITLE 'JOB-NETZ RELEASE/CANCEL ROUTINE'
***********************************************************************
*                                                                     *
*        P R O L O G :                                                *
*                                                                     *
***********************************************************************
*                                                                     *
*        PARAMETER : NOPR-INSTRUKTION IN REGISTER 14                  *
*                    0700 = CANCEL                                    *
*                    0701 = RELEASE                                   *
*                    0702 = RELEASE + WAIT                            *
*                                                                     *
*        PARAMETER/CANCEL : R1=A(JOBNAME)                             *
*                           R0=0(NOPURGE)                             *
*                           R0=1(PURGE)                               *
*        PARAMETER/RELEASE: R1=A(JOBNAME)                             *
*                           R0=A(NETID)                               *
*                                                                     *
*        REGISTER-BENUTZUNG : R0  = RESERVIERT SVC 34                 *
*                             R1  = RESERVIERT SVC 34                 *
*                             R2  = WORK                              *
*                             R3  = SAVE ADDR.                        *
*                             R4  = SAVE ADDR.                        *
*                             R5  = WORK                              *
*                             R6  = BASREG POINTER                    *
*                             R7  = BASREG NETQUEUE                   *
*                             R8  = BASREG NETIDHDR                   *
*                             R9  = BASREG JOBQUEUE                   *
*                             R10 = BASREG JOBENTRY                   *
*                             R11 = FREI                              *
*                             R12 = BASREG CSECT                      *
*                             R13 = WORK-AREA(GETMAIN)                *
*                             R14 =                                   *
*                             R15 =                                   *
*                                                                     *
***********************************************************************
         EJECT
SPDJC07  CSECT
         XSAVE R12,,SPDJC07.&SYSTIME._,WORKLEN
         EQUATE
         SPACE
         USING WORK,R13
         USING POINTER,R6
         USING NETQUEUE,R7
         USING NETIDHDR,R8
         USING JOBQUEUE,R9
         USING JOBENTRY,R10
         SPACE
         XC    WSWITCH,WSWITCH
         MVC   WWTO1(LWTO1),WTO1
         MVC   WWTO2(LWTO2),WTO2
         LR    R3,R0                    * SICHERN REGISTER  NETID
         LR    R4,R1                    * SICHERN REGISTER  JOBID
         SPACE 3
         SR    R2,R2                    * LOESCHEN REG.
         ICM   R2,1,1(R14)              * LADEN WERT NOPR+1
         SLL   R2,2                     * MULTIPLIKATION MIT 4
         B     *+4(R2)                  *
         B     CANJOB                   * JOB-CANCEL-ROUTINE
         B     RELJOB                   * JOB-RELEASE-ROUTINE
         B     RELJOBW                  * JOB-RELEASE-ROUTINE + WAIT
         SPACE 5
CRTRN    EQU   *
         XRETURN 0,R
         SPACE 5
CANJOB   EQU   *
         MVC   WWTO1+20(8),8(R4)
         MVC   WWTO1+33(8),0(R4)
         MVC   WWTO1+4(3),=C' $C'       * JES COMMAND CODE = $C
         MVC   WWTO1+8(4),16(R4)        * JOBNAME
         LTR   R3,R3                    * CANCEL MIT PURGE ?
         BZ    COMMAND                  * NEIN
         MVC   WWTO1+12(2),=C',P'       * SUBCOMMAND = P
         B     COMMAND
         EJECT
RELJOBW  EQU   *
         OI    WSWITCH,WAITREQ          *
RELJOB   EQU   *
         LA    R2,BHLENGTH
         LA    R2,PTLENGTH(R2)          * ADDR.FIRST NET-QUEUE-ENTRY
         LA    R5,NQENTRY               * NUMBER OF NET-QUEUE-ENTRIES
         SPACE
RELJ100  EQU   *
         @GET  (R2),(R7)                *
         CLC   NQNETID,0(R3)            * NETID FOUND ?
         BE    RELJ110                  * YES
         LA    R2,NQLENGTH(R2)          * NEXT NET-QUEUE-ENTRY
         BCT   R5,RELJ100               *
         SPACE
         MVC   WWTO2+4(30),=C'DJC070I NET XXXXXXXX NOT FOUND'
         MVC   WWTO2+16(8),0(R3)
         LA    R2,WWTO2
         WTO   MF=(E,(R2))
         B     CRTRN
         SPACE
RELJ110  EQU   *
         TM    NQSTATUS,B'10000000'     * NET-STATUS = HOLD ?
         BNO   RELJ120                  * NEIN
         MVC   WWTO2+4(30),=C'DJC071I NET XXXXXXXX IS HELD  '
         MVC   WWTO2+16(L'NQNETID),0(R3)
         LA    R2,WWTO2
         WTO   MF=(E,(R2))
         OI    WSWITCH,NETINACT
         SPACE
RELJ120  EQU   *
         L     R2,NQNETHDR              * ADDR.NET.QUEUE HEADER
         @GET  (R2),(R8)                *
         L     R2,NHFIRSTJ              * ADDR.FIRST JOB-QUEUE-ENTRY
         SPACE
RELJ130  EQU   *
         @GET  (R2),(R9)
         CLC   JQJNAME,8(R4)            * JOB-QUEUE-ENTRY FOUND ?
         BE    RELJ140                  * YES
RELJ135  EQU   *
         L     R2,JQNXTQUE              * ADDR.NEXT JOB-QUEUE-ENTRY
         LTR   R2,R2                    * LAST ENTRY IN JOB-QUEUE ?
         BNZ   RELJ130                  * NO
         MVC   WWTO2+4(30),=C'DJC072I JOB XXXXXXXX NOT FOUND'
         MVC   WWTO2+16(8),8(R4)
         LA    R2,WWTO2
         WTO   MF=(E,(R2))
         B     CRTRN
         SPACE
RELJ140  EQU   *
         TM    JQSTATUS,X'01'           * JOB UEBERLAGERT DURCH
         BO    RELJ135                  * WIEDERHOLUNGSLAUF
         TM    JQSTATUS,B'01000000'     * DUMMY-JOB ?
         BNO   RELJ150                  * NO
         TM    JQSTATUS+1,X'10'   IF CHANGE-CMD FOR DUMMY WAS GIVEN
         BO    RELJ143      THEN IGNORE THE EX-QUEUE.
         L     R2,NHFEXJOB              * ADDR.FIRST ENTRY EX-EQUEUE
         LTR   R2,R2
         BZ    RELJ143
         SPACE
RELJ142  EQU   *
         @GET  (R2),(R10)
         CLC   JEJNAME,8(R4)            * JOB-NAME FOUND?
         BE    RELJ150                  * YES
         L     R2,JENXTQUE              * ADDR.NEXT ENTRY EX-QUEUE
         LTR   R2,R2                    * LAST ENTRY ?
         BNZ   RELJ142                  * NO
RELJ143  OI    JQSTATUS+1,X'80'         * INFORM PURGE EXIT / REASON
         OI    JESTATUS,X'01'    INDICATE CANCEL
         OI    JQSTATUS,X'08'    INDICATE CANCEL
         LA    R3,1                     * CANCEL/PURGE JOB
         B     CANJOB                   * CANCEL
         SPACE
RELJ150  EQU   *
         L     R2,NHFNEJOB              * ADDR.FIRST ENTRY NE-QUEUE
         LTR   R2,R2
         BZ    RELJ155
         SPACE 1
RELJ152  EQU   *
         @GET  (R2),(R10)
         CLC   JEJNAME,8(R4)            * JOB-NAME FOUND ?
         BNE   RELJ154                  * NO
         OI    JESTATUS,X'01'    INDICATE CANCEL
         OI    JQSTATUS,X'08'    INDICATE CANCEL
         OI    JQSTATUS+1,X'40'         * REASON FOR PURGE EXIT
         SR    R3,R3                    * CANCEL JOB/NO PURGE
         B     CANJOB                   * CANEL JOB
         SPACE 1
RELJ154  EQU   *
         L     R2,JENXTQUE              * ADDR.NEXT ENTRY NE-QUEUE
         LTR   R2,R2                    * LAST ENTRY ?
         BNZ   RELJ152                  * NO
RELJ155  TM    JQSTATUS,B'10000000'     * OPERATER-HOLD = L ?
         BNO   RELJ160                  * NO
         MVC   WWTO2+4(30),=C'DJC073I JOB XXXXXXXX IS HELD  '
         MVC   WWTO2+16(L'JEJNAME),8(R4)
         LA    R2,WWTO2
         WTO   MF=(E,(R2))
         B     CRTRN
         SPACE 1
RELJ160  EQU   *
         MVC   WWTO1+4(3),=C' $A'       * JES-COMMAND-CODE=A(RELEASE)
         MVC   WWTO1+8(4),16(R4)        * JOBNAME
         MVC   WWTO1+20(8),8(R4)
         MVC   WWTO1+33(8),0(R4)
         TM    WSWITCH,NETINACT
         BNO   COMMAND
         OI    JQSTATUS+1,X'04'
         B     CRTRN
         EJECT
***********************************************************************
*        COMMAND - SCHEDULING                                         *
***********************************************************************
         SPACE 3
COMMAND  EQU   *
         LA    R1,WWTO1
         IF    (WSWITCH,Z,WAITREQ),THEN  NO IS REQUIRED
         SR    R0,R0                    CONSOLID=0
         SVC   34                       SUBMIT THE COMMAND
         B     CRTRN
         ENDE
         L     R1,16                    CVT
         L     R1,X'C4'(R1)             SMCA
         L     R11,X'80'(R1)            SMCA-USER
         USING SMCAEXT,R11
         L     R1,SMCAJCMD            ADDRESS OF COMMAND  TO SUBMIT
         IF    ((R1),^=,F'0'),THEN
         TTIMER CANCEL
         STIMER WAIT,BINTVL==F'1000'
         L     R1,SMCAJCMD            ADDRESS OF COMMAND  TO SUBMIT
         IF    ((R1),^=,F'0'),THEN
         SR    R0,R0
         SVC   34
         L     R1,SMCAJCMD
         MVC   0(LWTO1,R1),WWTO1      COMMAND
         B     COMTIME
         ENDE
         ENDE
         GETMAIN R,LV=LWTO1,SP=241
         MVC   0(LWTO1,R1),WWTO1      COMMAND
         ST    R1,SMCAJCMD            SAVE THE ADDRESS
COMTIME  STIMER REAL,WAITEXIT,BINTVL==F'1000' ASYNCHRONOUS EXIT WILL
*                                     GET CONTROL SIX SECOND(REAL)
         B     CRTRN
         EJECT
***********************************************************************
*        DATEN-DEFINITIONEN (KONSTANTEN)                              *
***********************************************************************
WTO1     WTO   ' $CJ1234    JOB=12345678 NET=12345678    ***DJC***',   *
               ROUTCDE=11,MF=L
LWTO1    EQU   *-WTO1
         SPACE 1
WTO2     WTO   '                              ',ROUTCDE=11,MF=L
LWTO2    EQU   *-WTO2
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*        ASYNCHRON EXIT FROM STIMER (TO SCHEDULE COMMANDS)            *
***********************************************************************
         SPACE 3
WAITEXIT DS    0H
         USING *,R3
         LR    R3,R15             BASE REGISTER
         SAVE  (14,12)
         L     R1,16              CVT
         L     R1,X'C4'(R1)       SMCA
         L     R11,X'80'(R1)      SMCA-USER
         L     R1,SMCAJCMD        ADDRESS OF THE COMMAND
         SR    R0,R0              CONSOLID = 0
         SVC   34
         L     R1,SMCAJCMD
         FREEMAIN R,LV=LWTO1,A=(R1),SP=241
         SR    R1,R1              CLEAR
         ST    R1,SMCAJCMD        COMMAND ADDRESS
         LM    R14,R12,12(R13)    RESTORE REGISTERS
         SR    R15,R15            RC
         BR    R14                RETURN
         EJECT
***********************************************************************
*        DATEN-DEFINITIONEN (VARIABLE)                                *
***********************************************************************
WORK     DSECT
SAVE     DS    18F
WSWITCH  DS    X
WAITREQ  EQU   X'80'
NETINACT EQU   X'40'
         DS    0F
WWTO1    DS    CL(LWTO1)
         DS    0F
WWTO2    DS    CL(LWTO2)
WORKLEN  EQU   *-WORK
         SPACE 5
***********************************************************************
*        D S E C T  'S                                                *
***********************************************************************
         COPY  @DJCDS
         SPACE 2
         COPY  SMCAEXT
NQENTRY  EQU   ((2048-BHLENGTH)/NQLENGTH) *NUMBER OF NETQ-ENTRIES
         END
./ ADD  NAME=SPDJC08
         TITLE  'S P D J C 0 8 T : BATCH->SPDJC04T'
***********************************************************************
*
*      P R O L O G :
*
***********************************************************************
*      PGM-FUNKTION     : SPDJC08T RUFT DAS PROGRAMM SPDJC04 AUF
*                         UND UEBERGIBT DIE ADRESSE EINER
*                         PARAMETER-LISTE
***********************************************************************
         SPACE 3
         DMANF PGM=SPDJC08T,BASREG=12
         LR    R3,R1
         OPEN  (SYSIN,(INPUT),SYSPRINT,(OUTPUT))
         TM    SYSPRINT+48,X'10'
         BO    OUTOK
         WTO   'DJC0422I DJCOUT   - DD-STMT. MISSING',ROUTCDE=11
         B     CENDE
OUTOK    EQU   *
A100     EQU   *
         TM    SYSIN+48,X'10'
         BNO   NOSYSIN
         GET   SYSIN,WTEXT
         B     LINK
NOSYSIN  EQU   *
         L     R3,0(R3)
         LH    R4,0(R3)
         LTR   R4,R4
         BZ    CENDE
         BCTR  R4,0
         EX    R4,MVCEX1
         B     LINK
MVCEX1   MVC   WTEXT(0),2(R3)
LINK     EQU   *
         SYSEVENT DONTSWAP
         LA    R1,WPARM
         LINK  EP=SPDJC04
         SYSEVENT OKSWAP
         TM    SYSIN+48,X'10'
         BNO   CENDE
         B     A100
CENDE    EQU   *
         CLOSE (SYSIN,,SYSPRINT)
         DMEND
         SPACE 3
***********************************************************************
*       DATEN-DEFINITIONEN
***********************************************************************
WPARM    DS    0F
WKZ      DC    X'03'
WOUT     DC    AL3(SYSPRINT)
WATEXT   DC    AL4(WTEXT)
WTEXT    DC    CL80' '
         SPACE 3
***********************************************************************
*        D C B ' S
***********************************************************************
SYSIN    DCB   DDNAME=DJCIN,DSORG=PS,MACRF=(GM),EODAD=CENDE
         SPACE 3
SYSPRINT DCB   DDNAME=DJCOUT,DSORG=PS,MACRF=(PM),                      *
               LRECL=60,RECFM=FBA,BLKSIZE=600
         END
./ ADD  NAME=SPDJC09
SPDJC09  START
         ABEND 111,DUMP
         END
./ ADD  NAME=SPDJC10
SPDJC10  START
         REG
         XSAVE R12,SVA,SPDJC10
         L     R1,0(R1)
         LH    R2,0(R1)
         CH    R2,=H'4'
         BH    PRMOK
PRMERR   EQU   *
         WTO   MF=(E,WTO2L)
RETURN   EQU   *
         SR    R1,R1
         CALL  MASTCLS
         XRETURN 0
PRMOK    EQU   *
         CH    R2,=H'26'
         BH    PRMERR
         LA    R3,2(R1)
         SR    R4,R4
         LR    R5,R3
LOOP1    EQU   *
         CLI   0(R3),C','
         BE    FND1
         LA    R4,1(R4)
         LA    R3,1(R3)
         B     LOOP1
FND1     EQU   *
         LA    R6,2(R4)
         BCTR  R4,0
         EX    R4,MVCEX1
         LA    R3,1(R3)
         LR    R5,R3
         SR    R4,R4
LOOP2    EQU   *
         CLI   0(R3),C','
         BE    FND2
         LA    R4,1(R4)
         LA    R3,1(R3)
         B     LOOP2
FND2     EQU   *
         LA    R6,0(R4,R6)
         BCTR  R4,0
         EX    R4,MVCEX2
         SR    R2,R6
         BCTR  R2,0
         LA    R5,1(R3)
         EX    R2,MVCEX3
         CALL  MASTOPN,(0,LIBRRC,0,PARM4),VL
         CLI   LIBRRC,C'0'
         BE    OPNOK
LIBRERR  EQU   *
         WTO  'DJC101E LIBRARIAN-ERROR ON OX.JOBQUE',ROUTCDE=2
         B     RETURN
OPNOK    EQU   *
         CALL  MASTMOD,(SEARCH1,LIBRRC),VL
         CLI   LIBRRC,C'0'
         BE    OPNRDR
         CLI   LIBRRC,C'1'
         BH    LIBRERR
         CLC   SEARCH1,SEARCH2
         BNE   TRYAGAIN
WTO1     EQU   *
         MVC   WTO1L+16(8),NETID
         MVC   WTO1L+29(8),SEARCH1
         WTO   MF=(E,WTO1L)
         B     RETURN
TRYAGAIN EQU   *
         CALL  MASTMOD,(SEARCH2,LIBRRC),VL
         CLI   LIBRRC,C'0'
         BE    OPNRDR
         CLI   LIBRRC,C'1'
         BE    WTO1
         BH    LIBRERR
OPNRDR   EQU   *
         OPEN  (INTRDR,(OUTPUT))
NEXTREC  EQU   *
         CALL  MASTRCD,(LIBRREC,LIBRRC),VL
         CLI   LIBRRC,C'1'
         BH    LIBRERR
         BE    CLOSE
         CLC   LIBRREC+2(8),SEARCH2
         BNE   PUT
         MVC   LIBRREC+2(8),SEARCH1
PUT      EQU   *
         PUT   INTRDR,LIBRREC
         B     NEXTREC
CLOSE    EQU   *
         B     RETURN
SEARCH1  DC    CL8' '
SEARCH2  DC    CL8' '
NETID    DC    CL8' '
PARM4    DC    C'2'
WTO1L    WTO  'DJC102I NET=12345678 JOB=12345678 NOT FOUND ON OX.JOBQUE*
               ',ROUTCDE=2,DESC=2,MF=L
INTRDR   DCB   DDNAME=INTRDR,DSORG=PS,LRECL=80,RECFM=FB,               *
               BLKSIZE=80,MACRF=PM
LIBRREC  DC    CL100' '
LIBRRC   DC    C'0'
WTO2L    WTO   'DJC103E ERROR IN PARAMETER',ROUTCDE=2,MF=L
MVCEX1   MVC   SEARCH1(0),0(R5)
MVCEX2   MVC   SEARCH2(0),0(R5)
MVCEX3   MVC   NETID(0),0(R5)
         END
./ ADD  NAME=SPDJC99
SPDJC99  CSECT
JDSAVE   DC    18F'0'
JDIDENT  DC    CL4'JNCB'
JDADDRIO DC    A(0)
JDREQU   DC    A(0)
JDSTATUS DC    XL2'0'
JDBLKREQ DC    H'0'
JDLSTBLK DC    A(0)
JDBLKLEN DC    H'0'
JDBLKCNT DC    H'0'
JDFIRBLK DC    A(0)
JDBLKADR DC    A(0)
JDBLKIO  DC    A(0)
         DC    X'0'
JDRELBLK DC    XL3'0'
JDLOCK   DC    XL4'0'
JDJOBNAM DC    CL8' '
JDLOCKTS DC    XL8'0'
JDTIOADR DC    A(0)
JDUCBADR DC    A(0)
JDGETMA  DC    A(0)
JDNETDS  DCB   DDNAME=JOBNETDS,                                        C
               DSORG=DA,                                               C
               MACRF=(RIC,WIC),                                        C
               OPTCD=RW
JDOPENL  OPEN  (*),MF=L
JDCLOSEL CLOSE (*),MF=L
JDRDECB1 READ  DECB1,DI,,,'S',0,MF=L
JDWDECB2 WRITE DECB2,DI,,,'S',0,MF=L
JDEXTRL  EXTRACT *,FIELDS=TIOT,MF=L
JDRESL   RESERVE (*,*,E,19,SYSTEMS),UCB=*,RET=HAVE,MF=L
JDDEQL   DEQ   (*,*,19,SYSTEMS),UCB=*,RET=HAVE,MF=L
JDGETML  GETMAIN EU,LV=0,A=*,SP=241,BNDRY=PAGE,MF=L
JDSDUMPL SDUMP SDATA=(RGN,LPA,CSA),MF=L
JDWORK   DC    XL256'0'
         EJECT
         COPY  @JNCB
         EJECT
         COPY  @DJCDS
         EJECT
         COPY  @DJCBLK
         SPACE 3
         COPY  SMCAEXT
         END
