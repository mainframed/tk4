**********************************************************************
*              REGISTER EQUATES                                      *
**********************************************************************
         SPACE
         REQUATEN
         EJECT
**********************************************************************
*              START PROGRAM                                         *
**********************************************************************
         SPACE
SPFETPDD CSECT
         LCNVE *,12
         SPACE
         LR    R11,R1                  PARM ADDRESS FROM PMD
         EJECT
**********************************************************************
*              GET THE WORK AREA, GET ENTRY POINTS OF SPF SUB-       *
*              MODULES AND COMPUTE TLS -BODY-LENGTH                  *
**********************************************************************
         SPACE
         INIT  R9,(WORKC,WORKLEN)      GET WORK AREA
         SPACE
         USING WORKC,R9
         XC    REFBITS,REFBITS         DELETE REFERENCE BITS
         OI    REFBITS,B'00000001'     SET REFERENCE BIT / WORKAREA IS
*                                      ALLOCATED
         L     R10,0(R11)              GET THE TLD ADDRESS FROM PMD
         ST    R10,TLDADDR             SAVE THE ADDRESS OF TLD
         L     R1,4(R11)               GET THE ADDRESS OF MENU
         MVC   MHAFMT0,0(R1)           SAVE THE MENU NAME
         L     R1,8(R10)               POINT TO THE TSI
         L     R1,12(R1)               POINT TO THE TSC
         L     R15,36(R1)              POINT TO THE COMMON SUBROUTINE
         ST    R15,CDISPL              CDISPL AND SAVE THE ADDRESS
         L     R15,28(R1)              POINT TO THE COMMON SUBROUTINE
         ST    R15,CSCROLL             CSCROLL AND SAVE THE ADDRESS
         LH    R2,42(R10)              MAXIMUM PHYSICAL SCREEN SIZE
         SRDA  R2,32                   COMPUTE THE TLS-BODY-LENGTH
         D     R2,=F'80'               DIVIDE THROUGH BYTES PER LINE
         SH    R3,=H'3'                MINUS 3 TITLE LINES
         STH   R3,PGLEN
         EJECT
**********************************************************************
*              SHOW THE PRIMARY MENU                                 *
**********************************************************************
         SPACE
DISPLAY1 SPFMH MHAPARMS,MHAFMT0,MHAOPT1,MHAP1,MHAFMT1,MHAFMT2,MEHMSG
         EJECT
**********************************************************************
*              DID THE USER PRESS PFK3 ?                             *
**********************************************************************
         SPACE
ENDTEST  TM    29(R10),B'00000100'     END KEY PFK3 HAS BEEN PRESSED ?
         BNO   ET01                    THE END OF PROGRAMM
         NI    29(R10),B'11111011'     TURN OFF THE END BIT (PFK3)
         B     EXIT
ET01     NI    REFBITS,B'11011111'     TURN OFF REFERENCE BIT
         TM    REFBITS,B'00010000'     ALL RECORDS HAS BEEN READ
         BO    READTBL                 SEARCH RECORD IN TABLE
         CLI   MHAP1,C' '              DID THE USER ENTER A DSN ?
         BNE   FINDDSN                 FIND REQUESTED DATA SET
         EJECT
**********************************************************************
*              READ ALL RECORDS FOR THE PASSWORD DATASET IN          *
*              THE RECORD BUFFER AREA                                *
**********************************************************************
         SPACE
         OI    REFBITS,B'00100000'     SET REFERENCE BIT / REQUESTED
*                                      DATASET NAME HAS BEEN FOUND
         BAL   R14,GETRBA              GET A RECORD BUFFER AREA
RLOOP1   BAL   R14,READ                READ A RECORD FROM THE PASSWORD
*                                      DATA SET
         LH    R1,MAXLINE              MAXLINE SHOW THE NUMBER OF LINES
         AH    R1,=H'1'                HAS BEEN READ
         STH   R1,MAXLINE
         L     R2,BUFPTR               LOAD BUFFER ADDRESS FOR THE NEXT
*                                      ENTRY
         MVC   0(52,R2),WORKA          PUT THE DSNAME AND PASSWORD IN
*                                      THE RECORD BUFFER
         LA    R2,52(R2)               INCREASE THE BUFFER POINTER
         C     R2,BUFEND               NOT ENOUGH SPACE IN THE AREA ?
         BH    ERROR1                  SHOW ERROR MESSAGE
         ST    R2,BUFPTR               STORE NEXT BUFFER ENTRY
         B     RLOOP1                  READ NEXT RECORD
EOF      TM    REFBITS,B'00100000'     REQUESTED DSNAME HAS BEEN FOUND
         BNO   ERROR2                  REQUESTED DSNAME NOT FOUND
*                                      SHOW THE ERROR MESSAGE
         OI    REFBITS,B'00010000'     SET REFERENCE BIT / ALL RECORDS
*                                      HAS BEEN READ IN THE WORK AREA
         B     SHOWBUF                 SHOW THE CONTENTS OF RECORD BUF.
         EJECT
**********************************************************************
*              ALL RECORDS HAS BEEN READ FROM THE PASSWORD DATASET.  *
*              FOR NEXT USER REQUEST SHOW THE CONTENTS OF THE        *
*              RECORD BUFFER AREA                                    *
**********************************************************************
         SPACE
READTBL  CLI   MHAP1,C' '              DID THE USER ENTER A DSN ?
         BE    SHOWBUF                 SHOW THE CONTENTS OF THE RECORD
*                                      BUFFER AREA
         L     R2,BUFAD                RECORD BUFFER AREA ADDRESS
         LH    R3,MAXLINE              NUMBER OF RECORDS IN BUFFER
CLCTBL   CLC   0(44,R2),MHAP1          FIND THE REQUESTED DSNAME
         BNE   CLCLOOP                 SHOW THE REQUESTED DSNAME
         MVC   MHAP1,BLANK             CLAER THE INPUT AREA
         MVC   MHAP2,0(R2)             FILL THE OUTPUT AREA
         MVC   MHAP3,44(R2)            FILL THE OUTPUT AREA
         B     DISPLAY2                SHOW THE MENU
CLCLOOP  LA    R2,52(R2)               INCREASE TO THE NEXT ENTRY
         BCT   R3,CLCTBL               MAKE A LOOP FOR THE NEXT ENTRY
         B     ERROR2                  REQUESTED DSNAME NOT FOUND
         SPACE 2
**********************************************************************
*              FIND A REQUESTED DATA SET NAME & PASSAWORD            *
**********************************************************************
         SPACE
FINDDSN  BAL   R14,READ                READ THE NEXT RECORD
         CLC   WORKA(44),MHAP1         SEARCH REQUESTED DSN
         BNE   FINDDSN                 READ THE NEXT RECORD
         SPACE
         POINT DCBPASS,TTR             SET ON START ADDRESS
         SPACE
SHOWDSN  MVC   MHAP1,BLANK             CLEAR THE INPUT FILED
         MVC   MHAP2(52),WORKA         MOVE THE REQUESTED DSN & PW
         EJECT
**********************************************************************
*              SHOW THE REQUESTED DSNAME & PASSWORD                  *
**********************************************************************
         SPACE
DISPLAY2 SPFMH MHAPARMS,MHAFMT1,MHAOPT1,MHAP1,MHAP2,MHAP3
         SPACE
         B     ENDTEST
         EJECT
**********************************************************************
*              GET MENU IN THE TLD / NON DISPLAY                     *
**********************************************************************
         SPACE
SHOWBUF  SPFMH MHAPARMS,MHAFMT2,MHAOPT2
         SPACE
         L     R8,48(R10)              POINT TO THE TLS
         LA    R1,240(R8)              POINT TO THE TLSBODY AND SAVE
         ST    R1,TLSBODY              THE ADDRESS
         MVC   64(4,R10),155(R8)       STORE THE SCROLL AMOUNT LABEL
*                                      FROM THE TLS TO THE TLD
         LH    R2,40(R10)              CURRENT PHYSICAL SCREEN SIZE
         SRDA  R2,32                   COMPUTE THE CURRENT PHYSICAL
         D     R2,=F'80'               NUMBER OF LINE BEING DISPLAYED
         SH    R3,=H'3'                ON THE SCREEN
         STH   R3,TLDCPSSZ
         MVC   BUFPTR,BUFAD            SET BUFFER POINTER
         MVC   NOLTBD,PGLEN            NUMBER OF LINES TO BE DISPLAY
         MVC   30(2,R10),TLDCSR        CURSOR OFFSET
         EJECT
**********************************************************************
*              DELETE AND FILL THE TLSBODY                           *
*              AND SHOW THE CURRENT CONTENTS OF TLD                  *
**********************************************************************
         SPACE
MOVEBODY LH    R2,PGLEN                NUMBER OF LINES IN THE TLSBODY
         SRDA  R2,32                   COMPUTE THE LENGTH IN BYTES OF
         M     R2,=F'80'               THE TLSBODY
         L     R2,TLSBODY              ADDRESS OF THE TSLBODY
         LR    R4,R2                    "      "   "   "
         IC    R5,=C' '                FILL THE PATTERN CHARACTER
         SLL   R5,24                   CLEAR SECOND LENGTH REGISTER AND
         MVCL  R2,R4                   SCRATCH THE AREA OF TLSBODY
         LH    R3,NOLTBD               NUMBER OF LINES TO BE DISPLAY
         L     R4,BUFPTR               POINT TO THE CURRENT LINE
         L     R2,TLSBODY              ADDRESS OF TLSBODY
NEXTLINE MVC   3(44,R2),0(R4)          MOVE THE DSNAME IN THE TLSBODY
         MVC   52(8,R2),44(R4)         MOVE THE PASSWORD IN THE TLSBODY
         LA    R2,80(R2)               INCREASE THE NEXT DISPLAY LINE
*                                      THE TLSBODY
         LA    R4,52(R4)               INCREASE THE NEXT LINE IN THE
*                                      WORK AREA
         BCT   R3,NEXTLINE             MOVE NEXT LINE IN THE TLSBODY
         TM    REFBITS,B'01000000'     LAST PAGE TO BE DISPLAY
         BNO   SETMDT                  SET MOD DATA TAG
ENDLINE  MVC   3(8,R2),ENDMSG          MOVE THE END MESSAGE IN THE TLS
         MVI   0(R2),X'07'             SET ATTRIBUTE BYTE
         NI    REFBITS,B'10111111'     TURN OFF LAST PAGE INDICATOR BIT
SETMDT   LA    R1,0                    MOD DATA TAG COUNT AND STORE IT
         STCM  R1,3,46(R10)            IN THE TLD
         MVC   44(2,R10),42(R10)       MAXIMUM LOGICAL SCREEN SIZE
DISPLAY3 LA    R1,TLDADDR              PARM FOR CDISPL
         L     R15,CDISPL              ENTRY POINT TO THE COMMON SUB-
*                                      ROUTINE CDISPL
         BALR  R14,R15                 SHOW THE CURRENT CONTENTS OF THE
*                                      TLD/TLS
         EJECT
**********************************************************************
*              TEST THE PFK FUNCTIONS, THE SCROLL AMOUNT LABEL AND   *
*              COMPUTE THE CURRENT PHYSICAL NUMBER OF LINES          *
**********************************************************************
         SPACE
ANALYZE  TM    29(R10),B'00000100'     DID THE USER PRESSED THE PFK3
         BNO   PFKTEST                 TEST ATTENTION ID
         NI    29(R10),B'11111011'     TURN OFF THE END BIT
         LA    R1,1                    SET TOPLINE POINTER ON FIRST
         STH   R1,TOPLINE              LINE IN THE RECORD BUFFER AREA
         MVC   BUFPTR,BUFAD            RESET THE RECORD BUFFER POINTER
         B     DISPLAY1                SHOW THE PRIMARY MENU
PFKTEST  CLI   28(R10),X'F7'           DID THE USER PRESSED THE PFK7 ?
         BE    SALTEST                 COMPUTE THE SCROLLING
         CLI   28(R10),X'F8'           DID THE USER PRESSED THE PFK8 ?
         BE    SALTEST                 COMPUTE THE SCROLLING
         NI    29(R10),B'11101111'     TURN OFF THE SCROLLING BIT
         MVC   155(4,R8),SAMTL         SCROLL AMOUNT LABEL
         MVC   30(2,R10),TLDCSR        CURSOR OFFSET
         B     DISPLAY3                RESHOW THE SCREEN
SALTEST  CLI   155(R8),C'P'            TEST THE VALID OF SCROLL AMOUNT
         BE    SCROLL                  LABEL.
         CLI   155(R8),C'H'            VALID SCROLL AMOUNT LABELS ARE-
         BE    SCROLL                  PAGE, HALF, MAX AND A NUMERIC
         CLI   155(R8),C'M'
         BE    SCROLL
         TM    155(R8),X'F0'           TEST ON NUMERIC
         BNO   ERROR4                  SHOW THE ERROR MESSAGE
SCROLL   MVC   64(4,R10),155(R8)       STORE THE SCROLL AMOUNT LABEL
*                                      FROM THE TLS TO THE TLD
         LH    R2,40(R10)              CURRENT PHYSICAL SCREEN SIZE
         SRDA  R2,32                   COMPUTE THE CURRENT PHYSICAL
         D     R2,=F'80'               NUMBER OF LINE BEING DISPLAYED
         SH    R3,=H'3'                ON THE SCREEN
         STH   R3,TLDCPSSZ
         EJECT
**********************************************************************
*              CALL THE COMMON SUBROUTINE- CDISPL AND COMPUTE THE    *
*              TOPLINE ADDRESS FOR SCROLLING UP AND DOWN             *
**********************************************************************
         SPACE
         LA    R1,CSCRPARM             PARM FOR CSCROLL
         ST    R10,0(R1)               SAVE THE TLD ADDRESS
         LA    R2,TOPLINE              FIRST LINE TO BE DISPLAY
         ST    R2,4(R1)                STORE IT IN THE PARMAREA
         LA    R2,MAXLINE              MAXIMUM VALID LINE NUMBER TO BE
         ST    R2,8(R1)                VIEWED / STORE IT IN THE PARM
         LA    R2,TLDCPSSZ             CURRENT NUMBER OF LINES PER
         ST    R2,12(R1)               LOGICAL PAGE / STORE IT THE PARM
         L     R15,CSCROLL             ENTRY POINT TO CSCROLL
         BALR  R14,R15                 GET THE COMMON SUBROUTINE
         LTR   R15,R15                 ANY RETURN CODES
         BNZ   ERROR3                  SHOW THE ERROR MESSAGE
         CLI   64(R10),C'M'            LAST SCROLL AMOUNT LABEL MAX ?
         BNE   NOMAX
         MVC   155(4,R8),=C'PAGE'      RESET THE SCROLL AMOUNT LABEL
NOMAX    MVC   SAMTL,155(R8)           STORE THE SCROLL AMOUNT LABEL
         MVC   NOLTBD,PGLEN            NUMBER OF LINES TO BE DISPLAY
         LH    R1,MAXLINE              MAXIMUM VALID LINE NUMBER TO BE
*                                      VIEWED
         LH    R2,TOPLINE              FIRST LINE NUMBER TO BE DISPLAY
         CR    R2,R1                   IS THE TOPLINE THE LAST LINE ?
         BE    CBPTR                   COMPUTE THE BUFFER POINTER
         AR    R2,R1                   ADD MAXLINE TO TOPLINE
         CR    R2,R1                   COPARE MAXLINE WITH R2
         BL    LLTBD
         SR    R2,R1                   SUBTRACT MAXLINE FROM R2
         B     CBPTR                   COMPUTE THE BUFFER POINTER
         EJECT
**********************************************************************
*              COMPUTE THE RECORD BUFFER AREA POINTER                *
**********************************************************************
         SPACE
LLTBD    AH    R2,=H'1'                ADD TO TOPLINE 1 / LAST PAGE
CBPTR    STH   R2,TOPLINE              STORE THE LINE NUMBER
         SR    R1,R2                   SUBTRACT TOPLINE FROM MAXLINE
         BNZ   NLLINE
         LA    R1,1                    ONLY LAST LINE TO BE DISPLAY
NLLINE   CH    R1,PGLEN                COMPARE THE REST OF LINES
         BNL   NLPAGE
         STH   R1,NOLTBD               NUMBER OF LINES TO BE DISPLAY
         OI    REFBITS,B'01000000'     SET REFERENCE BIT / LAST PAGE
NLPAGE   SRDA  R2,32                   COMPUTE THE BUFFER POINTER
         M     R2,=F'52'               NUMBER OF BYTES PER LINE
         SH    R3,=H'52'               MINUS ONE LINE
         L     R1,BUFAD                START ADDRESS OF BUFFER AREA
         AR    R1,R3                   NUMBER OF BYTES NOT DISPLAY
         ST    R1,BUFPTR               STORE ADDRESS OF THE FIRST LINE
         B     MOVEBODY                MOVE THE LINES IN THE TLSBODY
         EJECT
**********************************************************************
*              END ROUTINE                                           *
**********************************************************************
         SPACE
EXIT     TM    REFBITS,B'00000010'
         BNO   NOCLEAN
         L     R2,BUFAD                START ADDRESS OF RECORD BUFFER
         LR    R4,R2                   FROM ADDRESS WILL DO
         L     R3,BUFLEN               SET TO SPACE IN FULL LENGTH
         IC    R5,=C' '                PADDING CHARACTER
         SLL   R5,24                   SHIFT LEFT TO FIRST BYTE
         MVCL  R2,R4                   CLEAR THE RECORD BUFFER AREA
NOCLEAN  TM    REFBITS,B'00001000'     IS THE PASSWORD DATASET OPEN ?
         BNO   EALLOC
         SPACE
         CLOSE (DCBPASS),MF=(E,OPENL)
         SPACE
EALLOC   TM    REFBITS,B'00000100'
         BNO   EFREE1
         MVC   DDSL(2),=X'0001'        DDNAME SPECIFICATION
         SPACE
         SETXP TEXTPTRS,DDSL           FREE THIS DATA SET
         EJECT
**********************************************************************
*              END ROUTINE                                           *
**********************************************************************
         SPACE
         SETRB UNAL,RBPTR,TEXTPTRS
         SPACE
         DYNALLOC
         SPACE
EFREE1   TM    REFBITS,B'00000010'
         BNO   EFREE2
         L     R0,BUFLEN
         L     R1,BUFAD
         SPACE
         FREEMAIN R,A=(1),LV=(0)       DROP THE WORK AREA
         EJECT
**********************************************************************
*              END ROUTINE                                           *
**********************************************************************
         SPACE
EFREE2   TM    REFBITS,B'00000001'
         BNO   END
         LA    R0,WORKLEN              SIZE OF THE WORK AREA
         SPACE
         FREEMAIN R,A=(9),LV=(0)       DROP THE WORK AREA
         SPACE
END      LEXIT
         EJECT
**********************************************************************
*              READ THE PASSWORD DATA SET                            *
*              ALLOCATE THE ETERNIT PASSWORD DATA SET                *
**********************************************************************
         SPACE
READ     STM   R14,R13,SAVEAREA
         SPACE
         TM    REFBITS,B'00000100'
         BO    OPEN
         SPACE
         SETXP TEXTPTRS,DSNPASS,DDSL,U3330,MVSRES,OLD,KEEP1,KEEP2
         SPACE
         SETRB DSNA,RBPTR,TEXTPTRS
         EJECT
**********************************************************************
*              READ THE PASSWORD DATA SET                            *
*              ALLOCATE THE ETERNIT PASSWORD DATA SET                *
**********************************************************************
         SPACE
         DYNALLOC
         LTR   R15,R15                 ANY RETURN CODE ?
         BNZ   ERROR0                  ALLOCATION ERROR, TELL THE USER
         SPACE
         OI    REFBITS,B'00000100'     SET REFERENCE BIT / DATASET IS
*                                      ALLOCATED
         MVC   DCBPASS+40(8),SYSLIB    PUT THE DDNAME INTO THE DCB
OPEN     TM    REFBITS,B'00001000'
         BO    GETREC
         SPACE
         OPEN  (DCBPASS),MF=(E,OPENL)
         SPACE
         OI    REFBITS,B'00001000'     SET REFERENCE BIT / DATASET IS
*                                      OPEN
         EJECT
**********************************************************************
*              READ THE ETERNIT PASSWORD DATA SET                    *
**********************************************************************
         SPACE
GETREC   READ  DECB1,SF,DCBPASS,WORKA,MF=E
         SPACE
         CHECK DECB1
         SPACE
         LM    R14,R13,SAVEAREA
         BR    R14
         EJECT
**********************************************************************
*              GET RECORD BUFFER AREA                                *
**********************************************************************
         SPACE
GETRBA   STM   R14,R13,SAVEAREA
         L     R0,BUFLEN               GET ENOUGH SPACE FOR WORK AREA
         SPACE
         GETMAIN R,LV=(0)
         SPACE
         OI    REFBITS,B'00000010'     SET REFERENCE BIT / RECORD BUF.
*                                      IS ALLOCATED
         ST    R1,BUFAD                SAVE THE ADDRESS
         ST    R1,BUFPTR               INITIALISE POINTER
         LR    R2,R1                   GET TO ADDRESS FOR MVCL
         L     R3,BUFLEN               SET TO SPACE IN FULL LENGTH
         AR    R1,R3                   ADD TO START OF BUFFER
         ST    R1,BUFEND               TO GET END ADDRESS
         LR    R4,R2                   FROM ADDRESS WILL DO
         IC    R5,=C' '                PADDING CHARACTER
         SLL   R5,24                   SHIFT LEFT TO FIRST BYTE
         MVCL  R2,R4                   CLEAR THE AREA
         LM    R14,R13,SAVEAREA
         BR    R14
         EJECT
**********************************************************************
*              PUT THE ERROR MESSAGE- E330                           *
*              DYNAMIC ALLOCATION ERROR                              *
**********************************************************************
         SPACE
ERROR0   MVI   MEHMSG+3,C'0'           MOVE THE MESSAGE ID
         STH   R15,MEHP2               STORE RETURN CODE
         SPACE
         SPFEM MEHPARMS,MEHMSG,MEHOPT0,MEHP2,RBERRCD,RBINFO
         SPACE
         OI    29(R10),B'00000100'     SET THE END BIT (PFK3)
         CLI   28(R10),X'7D'           DID THE USER PRESSED ENTER ?
         BE    EXIT
         B     ERROR0                  RESHOW THE ERROR MESSAGE
         EJECT
**********************************************************************
*              PUT THE ERROR MESSAGE- E331                           *
*              NOT ENOUGH SPACE IN RECORD BUFFER AREA                *
**********************************************************************
         SPACE
ERROR1   MVI   MEHMSG+3,C'1'           MOVE THE MESSAGE ID
         SPACE
         SPFEM MEHPARMS,MEHMSG,MEHOPT0
         SPACE
         OI    29(R10),B'00000100'     SET THE END BIT (PFK3)
         CLI   28(R10),X'7D'           DID THE USER PRESSED ENTER ?
         BE    EXIT
         B     ERROR1                  RESHOW THE ERROR MESSAGE
         EJECT
**********************************************************************
*              PUT THE ERROR MESSAGE- E332                           *
*              THE REQUESTED DATA SET IS NOT PROTECTED               *
**********************************************************************
         SPACE
ERROR2   MVI   MEHMSG+3,C'2'           MOVE THE MESSAGE ID
         SPACE
         SPFEM MEHPARMS,MEHMSG,MEHOPT1,MEHP1
         SPACE
         TM    REFBITS,B'00010000'     ALL RECORDS HAS BEEN READ ?
         BO    ENDTEST
         SPACE
         POINT DCBPASS,TTR             SET ON START BLOCK
         SPACE
         B     ENDTEST
         EJECT
**********************************************************************
*              PUT THE ERROR MESSAGE- E333                           *
*              CSCROLL ENDED WITH RC NOT EQUAL ZERO                  *
**********************************************************************
         SPACE
ERROR3   MVI   MEHMSG+3,C'3'           MOVE THE MESSAGE ID
         STH   R15,MEHP2               STORE THE RETURN CODE
         SPACE
         SPFEM MEHPARMS,MEHMSG,MEHOPT0,MEHP2
         SPACE
         OI    29(R10),B'00000100'     SET THE END BIT (PFK3)
         CLI   28(R10),X'7D'           DID THE USER PRESSED ENTER ?
         BE    EXIT
         B     ERROR3                  RESHOW THE ERROR MESSAGE
         EJECT
**********************************************************************
*              PUT THE ERROR MESSAGE- E334                           *
*              INVALID SCROLL AMOUNT LABEL                           *
**********************************************************************
         SPACE
ERROR4   MVI   MEHMSG+3,C'4'           MOVE THE MESSAGE ID
         SPACE
         SPFEM MEHPARMS,MEHMSG,MEHOPT0
         SPACE
         B     ANALYZE
         EJECT
**********************************************************************
*              DEFINITIONS                                           *
**********************************************************************
         SPACE
         DS    0D
TTR      DC    X'00000100'
TLDCSR   DC    H'155'
BUFLEN   DC    A(300*52)
MEHOPT0  DC    A(0)
MEHOPT1  DC    A(1)
MHAOPT1  DC    A(1)
MHAOPT2  DC    A(2)
ENDMSG   DC    CL8'***END**'
BLANK    DC    CL80' '
         EJECT
**********************************************************************
*              DEFINITIONS / LITERALS                                *
**********************************************************************
         SPACE
         LTORG
         EJECT
**********************************************************************
*              DEFINITIONS                                           *
**********************************************************************
         SPACE
WORKC    CSECT
         DS    0D
MHAPARMS DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
MEHPARMS DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
CSCRPARM DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
CDISPL   DC    A(0)
CSCROLL  DC    A(0)
BUFAD    DC    A(0)
BUFPTR   DC    A(0)
BUFEND   DC    A(0)
TLDADDR  DC    A(0)
TLSBODY  DC    A(0)
SAVEAREA DC    16A(0)
         EJECT
**********************************************************************
*              DEFINITIONS                                           *
**********************************************************************
         SPACE
TOPLINE  DC    H'1'
MAXLINE  DC    H'0'
TLDCPSSZ DC    H'0'
PGLEN    DC    H'0'
NOLTBD   DC    H'0'
SAMTL    DC    C'PAGE'
REFBITS  DC    X'00'
U3330    DC    X'001500010004'
         DC    C'3330'
MVSRES   DC    X'001000010006'
         DC    C'MVS37A'
DSNPASS  DC    X'00020001'
         DC    X'0008'
         DC    CL44'PASSWORD'
DDSL     DC    X'00550001'
         DC    X'0008'
SYSLIB   DC    CL8' '
SHR      DC    X'00040001000108'
         DS    0H
PERM     DC    X'00520000'      PERMANENTLY ALLOCATED
OLD      DC    X'00040001000101'
         DS    0H
KEEP1    DC    X'00050001000108'
         DS    0H
KEEP2    DC    X'00060001000108'
         DS    0F
RBPTR    DC    A(0)
RB       DC    X'14'
RBCODE   DC    X'01'  RB ACTION CODE 1=DSN ALLOC
RBFLGS1  DC    X'0000'
RBERRCD  DC    X'0000'
RBINFO   DC    X'0000'
         EJECT
**********************************************************************
*              DEFINITIONS                                           *
**********************************************************************
         SPACE
TEXTPTR  DC    A(0)
         DC    A(0)
FLAGS2   DC    A(0)
TEXTPTRS DC    20F'0'
MHAFMT0  DC    CL8' '
MHAFMT1  DC    CL8' '
MHAFMT2  DC    CL8' '
MEHMSG   DC    CL4' '
MEHP2    DC    H'0'
MEHP1    DS    0CL46
         DC    CL1' '
MHAP1    DC    CL44' '
         DC    CL1' '
MHAP2    DC    CL44' '
MHAP3    DC    CL8' '
WORKA    DS    CL132
         SPACE
         PRINT NOGEN
         SPACE
OPENL    OPEN  (,),MF=L
         READ  DECB1,SF,DCBPASS,MF=L
DCBPASS  DCB   DSORG=PS,DDNAME=DD1,EODAD=EOF,KEYLEN=52,LRECL=80,       *
               BLKSIZE=80,RECFM=F,MACRF=RP
WORKLEN  EQU   *-WORKC
         SPACE 2
SPFETPDD CSECT
         END
