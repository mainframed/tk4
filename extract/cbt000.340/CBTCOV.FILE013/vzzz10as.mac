//*=******** IDAV050  TRANSFERRED FROM DLL  MARCH 20, 1980 ***********
*/IDATRACE JOB MSGLEVEL=1,CLASS=A,REGION=300K
*/DOIT EXEC  ASMFCL
*/ASM.SYSIN  DD *
IGC0005I  CSECT
* ********************************************************************
* *** VERSION 5.0 ****************************************************
* ********************************************************************
* *** READ PROLOG CAREFULLY.  MOST PROBLEMS ARE CAUSED BY NOT    *****
* *** INSTALLING IDATRACE CORRECTLY.                             *****
* ********************************************************************
*                                                                    *
* --- WHAT IS IDATRACE-----------------------------------------------*
*                                                                    *
* IDATRACE IS A SERVICE AID DESIGN TO PRINT VSAM CONTROL BLOCKS      *
* WHILE A PROGRAM USING VSAM IS EXECUTING.  THIS IS ACCOMPLISHED     *
* WITHOUT IMPACTING THE SYSTEM, JOB OR DATA BASE.                    *
*                                                                    *
* IDATRACE RUNS AS A TYPE 2 OR 3 SVC ROUTINE.  THE SVC NUMBER USED   *
* TO INVOKE IT IS DETERMINED WHEN IDATRACE IS INSTALLED.  AN SVC IS  *
* PLACED IN THE VSAM CODE USING STORAGE ALTERATION OR ZAP.  THIS SVC *
* CAN BE PLANTED ANYWHERE WITHIN VSAM CODE.  WHEN THE SVC IS         *
* EXECUTED, IDATRACE GETS CONTROL.  THE FIRST TIME IT IS ENTERED     *
* VARIOUS PROMPTING IS DONE FOR INFORMATION NEEDED BY IDATRACE.      *
* DEPENDING ON THE REPLIES TO THESE PROMPTS, PRINTING OF THE CONTROL *
* BLOCKS BEGIN.  BSAM IS USED TO WRITE THESE RECORDS.  IF AN ERROR   *
* IS ENCOUNTERED, THE OPERATOR HAS THE OPTION TO ABEND OR CANCEL THE *
* JOB, OR TURN IDATRACE OFF.  AFTER THE CONTROL BLOCKS ARE WRITTEN,  *
* IDATRACE RETURNS TO VSAM SO THE USERS REQUEST CAN BE COMPLETED.    *
* SVC'S MAY BE PLANTED AT MORE THAN ONE LOCATION.  EACH ENCOUNTER    *
* WILL CAUSE WRITING OF THE REQUESTED CONTROL BLOCKS.                *
*                                                                    *
* VERSION 1 WILL WORK WITH NON-ENHANCED VSAM                         *
* VERSION 2 IF YOU HAVE THIS VERSION, LOTS OF LUCK.                  *
* VERSION 3 WILL WORK WITH ENHANCED VSAM (NO CATALOG SUPPORT)        *
* VERSION 4 WILL WORK WITH ENHANCED VSAM (HAS CATALOG SUPPORT)       *
* VERSION 5 HAS AIX AND CATALOG SUPPORT FOR ENHANCED VSAM            *
*                                                                    *
* IDATRACE WILL CAUSE SOME PERFORMANCE DEGRADATION.  THE AMOUNT      *
* DEPENDS ON THE AMOUNT OF CONTROL BLOCKS THAT ARE TRACED.  IT WILL  *
* REQUIRE 12K OF CORE FOR THE BASE ROUTINE, 64K FOR BUFFERS AND 4K   *
* FOR WORK AREA.  IF AN IRB CAUSES RE-ENTRY, AN ADDITIONAL 4K IS     *
* GETMAINED.                                                         *
*                                                                    *
*                                                                    *
*                                                                    *
*--- PREPARING IDATRACE FOR USE -------------------------------------*
*                                                                    *
*                                                                    *
* IDATRACE IS EITHER SHIPED FROM SAN JOSE FIELD SUPPORT ON A 9 TRK   *
* 1600 BPI NON-LABELED TAPE (BLKSIZE=3200, LRECL=80), OR FROM        *
* RETAIN/370 DLL.                                                    *
* READ EITHER 'VS1' OR 'VS2' DEPENDING ON THE SYSTEM YOU WILL BE     *
* INSTALLING THE SERVICE AID ON.                                     *
* ONE HINT: IF YOUR SYSTEM DOESN'T HAPPEN TO HAVE A SPARE SVC LAYING *
* AROUND.  SVC 59 (X'3B') IS FOR OLTEP.  IF YOU RENAME IGC0005I TO   *
* SOMETING ELSE YOU CAN THEN INSTALL IDATRACE AS SVC 59 BY CHANGING  *
* IT'S CSECT CARD TO IGC0005I.  LATER OF COURSE YOU CAN RENAME IT    *
* AND GET OLTEP BACK AND GET THE HARDWARE CE'S OFF YOUR BACK.        *
*                                                                    *
* VS1 (TYPE 2 SVC ROUTINE)                                           *
*                                                                    *
* 1. OBTAIN AN UNUSED SVC NUMBER AND CHANGE THE CSECT CARD ON THE    *
*    DECK TO IGCNNX WHERE NNX IS THE DECIMAL SVC NUMBER WITH ZONE.   *
* 2. ASSEMBLE IDATRACE AND LINK THE OUTPUT ALONG WITH THE LINKEDIT   *
*    STATEMENT'S FROM THE SYSGEN TO CREATE A NEW NUCLUES.  THE LINK  *
*    EDIT JCL NEEDED FOR THIS OPERATION CAN BE FOUND IN THE STAGE 1  *
*    SYSGEN OUTPUT.  IT MAYBE WISE TO CREATE AN ALTERNATE NUCLUES.   *
*                                                                    *
* VS1 (TYPE 3 SVC ROUTINE)                                           *
*                                                                    *
* 1. OBTAIN AN UNUSED TYPE 3 NUMBER AND CHANGE THE CSECT CARD ON THE *
*    DECK TO IGC00NNX WHERE NNX IS THE DECIMAL SVC NUMBER WITH THE   *
*    ZONE BIT ADDED TO THE UNITS POSITION, I.E. 0AFF=IGC0025E.       *
* 2. ASSEMBLE IDATRACE AND LINK OUTPUT INTO SVCLIB.                  *
* 3. DUE TO THE FACT IDATRACE IS LARGER THAN 2K, IT MUST BE PLACED   *
*    ON THE RESIDENT SVC LIST.  THIS IS DONE WITH THE FOLLOWING JOB: *
*      //          EXEC  PGM=IEBUPDTE,PARM=NEW                       *
*      //SYSPRINT  DD  SYSOUT=A                                      *
*      //SYSUT1    DD  DSNAME=SYS1.PARMLIB,DISP=SHR                  *
*      //SYSUT2    DD  DSNAME=SYS1.PARMLIB,DISP=SHR                  *
*      //SYSIN     DD  *                                             *
*      ./  ADD  NAME=IEARSV01,LIST=ALL                               *
*        SYS1.SVCLIB  IGC00NNX                                       *
*      /*                                                            *
*                                                                    *
* VS2 (TYPE 2 SVC ROUTINE)                                           *
*                                                                    *
* 1. OBTAIN AN UNUSED SVC NUMBER THAT WAS ASSIGNED WHEN THE SYSTEM   *
*    GEN-ED.                                                         *
* 2. CHANGE THE CSECT CARD NAME TO IGCNNN WHERE NNN IS THE DECIMAL   *
*    SVC NUMBER.                                                     *
* 3. ASSEMBLE IDATRACE AND RE-LINK THE NUCLUES TO INCLUDE IDATRACE.  *
*    IT MAY BE WISE TO CREATE A UNIQUE NUCLEUS WHICH CAN BE IPL'ED   *
*    WHEN THE SERVICE AID IS NEEDED.                                 *
*                                                                    *
* VS2 (TYPE 3 SVC ROUTINE)                                           *
*                                                                    *
* 1. OBTAIN AN UNUSED TYPE 3 SVC NUMBER.                             *
* 2. CHANGE CSECT CARD IN THE DECK TO IGC00NNX WHERE NNX IS THE SVC  *
*    NUMBER IN DECIMAL WITH THE ZONE BIT ADDED.                      *
* 3. ASSEMBLE IDATRACE AND LINK OUTPUT INTO LPALIB.                  *
*                                                                    *
* THE FOLLOWING JOB MUST BE RUN IF IDATRACE IS A TYPE 3 SVC ROUTINE. *
*  //PGFIX     JOB   MSGLEVEL=1                                      *
*  //          EXEC  PGM=IEBUPDTE,PARM=MOD                           *
*  //SYSPRINT  DD    SYSOUT=A                                        *
*  //SYSUT1    DD    DSN=SYS1.PARMLIB,DISP=SHR                       *
*  //SYSUT2    DD    DSN=SYS1.PARMLIB,DISP=SHR                       *
*  ./       ADD  NAME=IEAFIX00,LIST=ALL                              *
*  SYS1.LPALIB  IGC0005I                  (IDATRACE NAME)            *
*  /*                                                                *
*                                                                    *
* THIS JOB WILL ADD IDATRACE TO THE IPL FIX LIST.  THIS MEMBER OF    *
* PARMLIB WILL BE USED IF YOUR IEASYSXX MEMBER CONTAINS IEAFIX00 OR  *
* IF AT IPL TIME THE OPERATOR REPLYS  R 00,CLPA,FIX=00  AT IPL TIME. *
* IF IEAFIX00 ALL READY EXIST AND HAS A SYS1.LPALIB NAME IN IT, YOU  *
* SHOULD PUNCH IT OFF AND ADD THIS CSECT NAME TO THE SYS1.LPALIB     *
* STATMENT.  OTHERWISE, THIS ADD MAY WIPE OUT YOUR FIXLIST IN        *
* IEAFIX00.  SEE THE INITIALIZATION AND TUNING GUIDE (GC28-0755)     *
* FOR MORE INFORMATION ABOUT IEAFIX00.                               *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*--- USING IDATRACE -------------------------------------------------*
*                                                                    *
* **IMPORTANT NOTE**                                                 *
* IF THE JOB YOU ARE GOING TO TRACE IS RUNNING ASYNCHRONOUS          *
* (RPL=ASY) THEN YOU MUST USE TAPE FOR IDATRACE OUTPUT.  OTHERWISE   *
* SYSOUT WRITER WILL GO INTO A WAIT STATE.                           *
*                                                                    *
* IDATRACE OUTPUT IS DIRECTED TO A DD CARD NAMED TRACE.  YOU MUST    *
* ADD THIS DD CARD TO YOUR JOB.                                      *
* IF THE OUTPUT IS GOING TO TAPE TO EITHER BE MAILED WITH AN APAR    *
* OR BE PRINTED LATER, USE;                                          *
*  //TRACE  DD  UNIT=2400,DISP=(,KEEP),LABEL=(,NL),                  *
*  //           DCB=(BLKSIZE=2660,RECFM=FB,NCP=20)                   *
*                                                                    *
* IF THE OUTPUT IS GOING TO BE PRINTED DIRECTLY, USE THE FOLLOWING   *
* DD STATMENT;                                                       *
*  //TRACE DD  SYSOUT=A,SPACE=(CYL,(10,2)),                          *
*  //          DCB=(BLKSIZE=2660,LRECL=133,RECFM=FB,NCP=20           *
*                                                                    *
* IF YOU ARE GOING TO USE THE RECREATE OPTION, QSAM IS USED TO       *
*  WRITE THE RECORDS TO TAPE.  HERE YOU MUST SET THE DCB TO QSAM VIA *
*   //   DCB=(BLKSIZE=NOTE1,BUFNO=10,REFCM=VBA,MACRF=P)              *
*   WHERE NOTE1 IS THE MAX RECORD LENGTH (MIN=512) IN THE DATA SET.  *
*                                                                    *
* GENERALLY, IT IS EASIER TO ALTER CORE TO PUT THE SVC IN.  THIS     *
* CAN BE DONE IF AN OLD CORE DUMP IS AROUND.  VSAM IS LOADED BY      *
* NIP SINCE THEY ARE PART OF NIP'S RESIDENT SVC LIST.  IN VS1        *
* THIS WORKS FINE SINCE THE PAGE WILL NOT BE REFREASHED FROM THE     *
* PACK BUT IN VS2 YOU WILL HAVE TO DO A 'CORE ZAP' OR DSS SINCE THE  *
* FIRST PAGE IN WILL WIPE OUT YOUR SVC.                              *
* FIND THE PLACE YOU WANT THE TRACE TO TAKE PLACE AT, INSERT A       *
* BRANCH TO THE PATCH AREA (ALL VSAM MODULES HAVE ONE).  IN THE      *
* PATCH AREA, RESTORE THE INSTRUCTION YOU CLOBBERED WITH THE BRANCH, *
* ISSUES THE SVC AND BRANCH BACK TO THE MAINLINE CODE.  SOME         *
* EXAMPLES ARE SHOWN LATER IN THIS PROLOG.                           *
* WHEN CONTROL IS RECIEVED BY IDATRACE, ONE OF THE FOLLOWING         *
* MUST EXIST FOR IT TO RUN.                                          *
*  1.  REG 0 POINTING TO ACB                                         *
*  2.  REG 1 POINTING TO AN RPL OR CPL IF CATALOG SUPPORTED          *
*  3.  REG 2 POINTING TO A PLH                                       *
*  4.  REG B POINTING TO AN AMB OR A CCA IF CATALOG SUPPORTED        *
*                                                                    *
* THESE ARE THE ONLY RESTRICTIONS ON WHERE YOU CAN PLACE THE SVC.    *
* IF NONE OF THESE REGISTERS ARE VALID OR IF ANY ERRORS OCCURS,      *
* CONTROL IS RETURNED TO THE CALLER AFTER A MESSAGE IS ISSUED.       *
* YOU MAY PLANT AS MANY SVC'S AS YOU WANT.  IF YOU PLANT SVCS IN     *
* CATALOG MANAGEMENT AND RECORD MANAGEMENT YOU MUST GIVE THE RECORD  *
* MANAGEMENT PARAMETER LIST FIRST.  SEE MESSAGE 'IDATRACE: CATALOG   *
* CB'S FOUND.  ENTER CATALOG (FC) PARAMETER LIST'.                   *
*                                                                    *
* ONCE CONTROL IS RECEIVED BY THIS SERVICE AID, 3 PROMPTS ARE MADE.  *
* THESE PROMPTS AND OTHER MESSAGES ARE DESCRIBED IN THE MESSAGE      *
* SECTION OF THIS PROLOG.  THE IDATRACE OUTPUT WILL BE PRINTED WHEN  *
* THE JOB TERMINATES, NORMALLY OR ABNORMALLY!                        *
* THE PROMPTS IN IDATRACE ARE ISSUED TO THE OPERATORS CONSOLE.       *
* THE ROUTE CODE FOR THE WTOR IS AT LABEL 'ROUTCDE'.  YOU CAN CHANGE *
* THIS IF YOU DESIRE THE MESSAGE TO GO TO ANOTHER TERMINAL.          *
*                                                                    *
* THE IDATRACE HOOK MAY BE INSTALLED IN THE CVT (CVTAMFF).  THIS IS  *
* DONE SO USING THE EXISTING CODE IN CATALOG MANAGEMANT, OR NEW CODE *
* IN RECORD MANAGEMENT CAN HAVE A SWITCH TO TEST TO SEE IF IDATRACE  *
* SHOULD BE CALLED.  HENCE, WITH THIS LOGIC YOU CAN TURN ON TRACEING *
* BY JUST TURNING ON A BIT IN THE CVT.  OF COURSE THE JOB STILL MUST *
* HAVE THE TRACE DD CARD.                                            *
* THE CODE IN CATALOG ALREADY EXIST FOR THIS LOGIC.  YOU CAN ZAP IT  *
* INTO RECORD MANAGEMENT (IDA019R1 OR IDA019R3) AND IT WILL DO       *
* NOTHING UNTIL YOU TURN ON THE SWITCH IN THE CVT.  JUST TEST FOR    *
* THE CVT +X'108' TO HAVE BIT 3 ON (X'10').  IF YES, BRANCH TO THE   *
* CVT +X'10A' (BAL R14,266(CVT) ).  THIS CODE IS ALREADY IN CATALOG. *
* WITH THIS IN, SET THE CVT +108 TO X'10010AXX' AND IDATRACE WILL    *
* GET CALLED AND DO IT'S THING AND RETURN TO THE CODE THAT BAL TO    *
* THE CVT.                                                           *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*--- IDATRACE MESSAGES ----------------------------------------------*
*                                                                    *
*                                                                    *
* IDATRACE: ALTERING ADDRESS __ WILL CAUSE TRACE TO RESET/RESTART.   *
*                                                                    *
* IF THIS ADDRESS IS CHANGED TO X'FF', IDATRACE WILL CLEAR ALL INPUT *
* AND START ALL OVER AGAIN AND REPROMPT YOUR FOR NEW JOBNAME, DDNAME *
* AND PARMLIST.  IF THIS BYTE IS SET TO X'11', IDATRACE WILL FREE    *
* IT'S CORE AND GO TO SLEEP.  TO GET IT STARTED AGAIN, YOU WILL NEED *
* TO GO INTO THE CVT +X'108' AND TURN OFF TO 4 BIT (X'08').  THIS    *
* WILL ALLOW IDATRACE TO RESTART AGAIN.  THIS IS THE SAME THING THAT *
* HAPPENS IF YOU RESPOND 'S' TO ANY OF THE ERROR MESSAGES.           *
*                                                                    *
*                                                                    *
*    IDATRACE: ENTER JOBNAME TO BE TRACED.  (8 CHARACTERS).          *
*                                                                    *
* ENTER IN THE JOB NAME (WITHOUT QUOTES).  THIS NAME WILL BE COMPARED*
* AGAINST THE TIOT  AND IF NOT EQUAL, CONTROL IS RETURNED TO THE     *
* CALLER OF IDATRACE.                                                *
*                                                                    *
*                                                                    *
*   IDATRACE: ENTER DDNAME OF THE DATA SET TO BE TRACED.             *
*                                                                    *
* THIS MESSAGE IS USED TO DETERMINE WHICH DATA SET TO TRACE.  ENTER  *
* IN THE DDNAME WITHOUT QUOTES.  IF YOU REPLY WITH AN EOB, IDATRACE  *
* WILL TRACE EACH ENTRY REGARDLESS OF THE DATA SET.  THIS COULD MEAN *
* TONS OF PAPER.                                                     *
*                                                                    *
*                                                                    *
*   IDATRACE: ENTER PARAMETER LIST.                                  *
*                                                                    *
* THERE ARE 4 VALID PARAMETER LIST;                                  *
*     FE-COUNT - COUNT MODE                                          *
*     FC...... - CATALOG MANAGEMENT TRACING (NOT VERSION 3)          *
*     FD...... - RECREATE MODE                                       *
*     FE...... - RECORD MANAGEMENT TRACING                           *
*                                                                    *
* EACH PARAMETER LIST, THIER OPTIONS AND FUTHER PROMPTS DEALING WITH *
* THEM IS DESCRIBED IN THE PARAMETER LIST SECTION OF THIS PROLOG.    *
* THIS MESSAGE MAY APPEAR TWICE.  IF SO, YOU NEED TO REPLY TO BOTH   *
* OF THEM WITH THE SAME DATA.  THIS IS A BUG IN THE CODE THAT I      *
* HAVEN'T FIGURED OUT HOW TO FIX.  NO APARS WILL BE EXCEPTED.        *
* IF A VALID PARM LIST ID IS NOT ENTERED, THIS PROMPT WILL REOCCUR.  *
*                                                                    *
*                                                                    *
*  IDATRACE: COUNT FIELD AT ADDRESS _________.                       *
*                                                                    *
* THIS MESSAGE IS ISSUED WHEN THE FE-COUNT PARAMETER LIST IS USED.   *
* THE ADDRESS GIVEN IS A FULL WORD HEX COUNTER.  EVERY TIME IDATRACE *
* IS ENTERED FOR A GIVEN DATA SET, THIS COUNTER IS ADVANCED BY 1.    *
* DISPLAY THIS ADDRESS AFTER A FAILURE OR END OF JOB TO SEE HOW MANY *
* TIMES THE SVC WAS HIT.  THIS ALONG WITH THE COUNT OPTION OF THE    *
* PARM LIST CAN BE USED TO LIMIT THE TRACE ON A LONG JOB TO JUST     *
* THE REQUEST AROUND THE FAILURE POINT.                              *
*                                                                    *
*                                                                    *
*   IDATRACE: ENTER ONE BYTE ERROR CODE OR ANY                       *
*                                                                    *
* THIS MESSAGE IS ISSUED AS A RESULT OF AN OPTION IN THE FE PARM     *
* LIST.  THE REPLY WILL BE USED TO CHECK THE RPL ERROR CODE.  IF THE *
* ERROR CODES MATCH, THE PRINT TAKES PLACE.  IF 'ANY' IS THE REPLY,  *
* THE PRINT TAKES PLACE ON ANY ERROR.                                *
*                                                                    *
*                                                                    *
*     IDATRACE: ENTER START COUNT VALUE IN HEX.                      *
*     IDATRACE: ENTER END COUNT VALUE IN HEX.                        *
*                                                                    *
* THESE MESSAGES ARE ISSUED AS A RESULTS OF AN OPTION OF THE 'FE'    *
* PARAMETER LIST.  PRINTING STARTS WHEN THE START VALUE IS HIT AND   *
* TERMINATES WHEN THE END VALUE IS REACHED.  THE MESSAGES ARE THEN   *
* RE-ISSUED AFTER THE END VALUE IS HIT SO YOU MAY RESET THE VALUES.  *
* A REPLY OF FFFF TO THE START VALUE EFFECTIVELY TURNS OFF PRINTING. *
* THIS ALLOWS YOU TO TRACE WITHIN A RANGE OF REQUEST.                *
*                                                                    *
*                                                                    *
*     IDATRACE: INTERUPT  IRB CAUSING FOLLOWING PRINT.               *
*                                                                    *
*  DURING PRINT OF A REQUEST, AN IRB WAS SCHEDULED AND CAUSED        *
* IDATRACE TO BE RE-ENTERED.  THE PRINT IS STOPPED AND THE CB'S      *
* UNDER THE IRB ARE PRINTED.  WHEN THIS IS FINISHED, THE NORMAL      *
* PRINT IS COMPLETED.  THIS IS DONE THIS WAY BECAUSE THE IRB HAS A   *
* HIGHER PRIORTY THEN THE FIRST REQUEST TO IDATRACE.                 *
* THIS MESSAGE IS NOT WRITTEN ON THE CONSOLE, IT IS FOUND ON THE     *
* OUTPUT.                                                            *
*                                                                    *
*                                                                    *
*     IDATRACE: CATALOG CB'S FOUND.  ENTER CATALOG (FC) PARM LIST.   *
*                                                                    *
* IF YOU HAVE SVC'S IN BOTH RECORD MANAGEMENT AND IN CATALOG         *
* MANAGEMENT, OR IF YOU REPLY TO THE FIRST PARM PROMPT WITH A 'FE'   *
* TYPE PARAMETER LIST AND THE SVC IS IN CATALOG CODE, THIS MESSAGE   *
* WILL APPEAR.  IT MEANS IDATRACE HAS FOUND CATALOG CONTROL BLOCKS   *
* (CCA, CPL, ETC) BUT YOU ASKED TO TRACE RECORD MANAGEMENT BLOCKS.   *
* IDATRACE NEEDS TO KNOW WHAT TO DO WITH THEM.  IF YOU HAVE INDEED   *
* PLACED SVCS IN BOTH CAT AND R/M, ALWAYS REPLY TO THE PARAM PROMPT  *
* WITH A 'FE' LIST AND LET THIS MESSAGE GET THE SECOND LIST.         *
*                                                                    *
*                                                                    *
*     IDATRACE: ERROR CODE=*. ENTER A C OR S (ABEND CONTINUE STOP)   *
*                                                                    *
* THE ABOVE MESSAGE IS ISSUED FOR ALL ERROR CONDITIONS DETECTED BY   *
* IDATRACE.  THE CODES ARE EXPLAINED BELOW.  THE RESPONSES ARE;      *
*  'A' CAUSES IDATRACE TO ISSUE 'ABEND  201,DUMP'                    *
*  'C' CAUSES IDATRACE TO EXIT NORMALLY.  WILL BE RE-CALLED.         *
*  'S' CAUSES IDATRACE TO DO A SUPER RESET.  WILL STOP UNTIL RESET.  *
* THE 'C' OPTION MAY JUST CAUSE THE MESSAGE TO RE-APPEAR (SUCH AS IF *
* AN OPEN ERROR OCCURED).  THE 'S' OPTION WILL TURN OFF IDATRACE     *
* (SEE RESET/RESTART MESSAGE)                                        *
*                                                                    *
*     IDATRACE: ERROR CODE = 4.                                      *
*                                                                    *
* THIS MESSAGE IS ISSUED IF NONE OF THE REGISTERS NEEDED TO FIND     *
* CONTROL BLOCKS (SEE PARAMETER LIST) IS VALID.  EXAMINE THE PLACE   *
* YOU PUT THE IDATRACE SVC.  REPLY 'A' (ABEND) TO GET A VAILD DUMP.  *
*                                                                    *
*     IDATRACE: ERROR CODE = 7.                                      *
*                                                                    *
* A GETMAIN WAS ISSUED AND AN ERROR CODE WAS RETURNED IN REG 15.     *
* GETMAINS ARE ISSUED FOR 1K AND 56K IN SUBPOOL 0 (VS1) OR SUBPOOL   *
* 241 (VS2).  INSURE ENOUGHT CORE IS AVAILABLE.  THE REG15 ERROR     *
* CODE WILL BE IN REG6 IN A DUMP.                                    *
*                                                                    *
*     IDATRACE: ERROR CODE = 5.                                      *
*                                                                    *
* OPEN FOR THE TRACE DCB FAILED.  INSURED THE TRACE DD CARD IS       *
* CORRECT AND WITH THIS JOB.                                         *
*                                                                    *
*                                                                    *
*      IDATRACE: ENTER PARM LIST FOR PATH/UPGRADE SUPPORT.           *
*                                                                    *
*   THIS PROMPT OCCURS BECAUSE OF A BIT IN THE 'FE' PARAMETER LIST.  *
* THE PARAMETER LIST ENTERED HERE WILL CONTROL THE TRACING OF ALL    *
* THE CLUSTERS VSAM CAUSED TO BE OPEN, NOT THE ONES THE USER OPENED. *
* IF THE USER OPENS A PATH NAME (AIX), VSAM WILL OPEN THE BASE AND   *
* ANY UPGRADE SET ASSOCIATED WITH IT.  THIS PARM LIST THEN CONTROL   *
* THE BASE AND UPG SETS AS VSAM OPENED THEM.                         *
*  TO ELEMINATE DUPLICATE INFORMATION, BYTE 5 IN THE 2ND PARM LIST   *
* IS USED.  IN THIS BYTE, BITS 0 THRU 3 ARE THE SAME AS IN THE       *
* NORMAL 'FE' PARM LIST.  BITS 4 THRU 7 ARE DESCRIBED BELOW.         *
*   .... 1... BIT4 - NO UPG SETS                                     *
* WITH THIS BIT ON NO UPG SETS WILL BE TRACED, ONLY THE AIX AND THE  *
* BASE.  YOU DO NOT NEED TO USE THIS BIT TO TRACE A USER OPEN BASE   *
* (NO AIX) THAT HAS UPG SETS.  JUST USE THE NORMAL 'FE' LIST WITHOUT *
* TURNING ON THE RE-PROMPT BIT.                                      *
*   .... .1.. BIT5 - PRINT ALL WHEN CALLING ENTRY IS PATH/AIX        *
* IF IDATRACE IS CALLED WHEN VSAM IS PROCESSING A VSAM OPENED DATA   *
* SET, IDATRACE WILL RETURN.  IF CALLED WHEN VSAM IS PROCESSING THE  *
* USER OPENED DATA SET (AIX OR BASE WITH UPG), IT WILL BE TRACED     *
* ACCORDING TO THE 1ST PARM LIST AND ALL VSAM OPENED CLUSTERS WILL   *
* BE TRACED ACCORDING TO THE 2ND PARM LIST.                          *
*   .... ..1. BIT6 - PRINT ONLY CALLING ENTRY                        *
* WITH THIS BIT ON, ONLY THE CLUSTER BEING PROCESSED BY VSAM AT THE  *
* TIME OF THE CALL IS TRACED.  IF AN UPGRADE DATA SET IS IN CONTROL  *
* IDATRACE WILL EXIT. ONCE AGAIN, THE 1ST PARM LIST CONTROL THE USER *
* OPENED DATA SET, THE 2ND CONTROL THE VSAM OPENED.                  *
*   .... ...1 BIT7 - PRINT ALL ON ALL CALLS                          *
* WITH THIS BIT ON, ON EACH ENTRY TO IDATRACE, ALL THE AIX'S, BASE,  *
* AND UPG SETS WILL BE TRACED, REGARDLESS OF WHICH CLUSTER WAS BEING *
* PROCESSED BY VSAM WHEN THE CALL WAS MADE.  THIS BIT CAN CAUSE TONS *
* OF PAPER TO BE USED EACH CALL.  THE ONLY REALLY GOOD PLACE TO USE  *
* IS IF THE SVC IS IN IDA019R1 EXIT.                                 *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*--- PARAMETER LIST AND OPTIONS -------------------------------------*
*                                                                    *
*                                                                    *
* THE PARAMETER LIST INFORMS IDATRACE OF THE TYPE OF WORK TO BE DONE *
* AND SPECIFIES OPTIONS TO BE USED.  ONLY THE 'FE' AND 'FC' PARM     *
* LIST HAVE OPTIONS.  EACH OF THE FOUR PARAMETER LIST ARE ENTERED    *
* AS A RESPONSE TO THE MESSAGE IDATRACE: ENTER PARAMETER LIST.       *
*                                                                    *
* FE......  RECORD MANAGEMENT TRACE MODE ----------------------------*
*                                                                    *
* BYTE1                                                              *
*  .... ....  X'FE' ID BYTE FOR RECORD MANAGEMENT CONTROL BLOCKS     *
*                                                                    *
* BYTE 2                                                             *
*  1... ....  PRINT DATA COMPONENT CONTROL BLOCKS                    *
*  .1.. ....  PRINT INDEX COMPONENT CONTROL BLOCKS                   *
*  ..1. ....  PRINT RPL                                              *
*  ...1 ....  PRINT ACB                                 (SEE NOTE 1) *
*  .... 1...  PRINT PLH                                              *
*  .... .1..  PRINT ALL OF THE REQUESTED CONTROL BLOCKS              *
*  .... ..1.  PRINT BUFFC                                            *
*  .... ...1  PRINT AMBL                                (SEE NOTE 1) *
*                                                                    *
* BYTE 3                                                             *
*  1... ....  PRINT BUFFER                                           *
*  .1.. ....  PRINT IOB (IOMB IOSB)                                  *
*  ..1. ....  PRINT CPA                                              *
*  ...1 ....  PRINT ICWA - IMWA  AND/OR DIWA                         *
*  .... 1...  PRINT AMB                                              *
*  .... .1..  PRINT AMDSB                                            *
*  .... ..1.  PRINT ARDB - EDB - LPMB                                *
*  .... ...1  PRINT DEB                                              *
*                                                                    *
* BYTE 4                                                             *
*  1... ....  PRINT BSPH                                             *
*  .1.. ....  PRINT UPT                                              *
*  ..1. ....  PRINT BIB                                              *
*  ...1 ....  PRINT HEB                                 (SEE NOTE 1) *
*  .... 1...  PRINT VAT AND VMT                         (SEE NOTE 1) *
*  .... .1..  PRINT VSRT                                (SEE NOTE 1) *
*  .... ..1.  PRINT USER'S RECORD AREA                  (SEE NOTE 2) *
*  .... ...1  PRINT USER'S SEARCH ARGUMENT              (SEE NOTE 2) *
*                                                                    *
* BYTE 5                                                             *
*  1... ....  PRINT REGISTERS AT TIME OF SVC                         *
*  .1.. ....  PRINT IICB AND DCB  (ISAM INTERFACE PROCESSING ONLY)   *
*  ..1. ....  OUTPUT IN DLS FORMAT                                   *
*  ...1 ....  PAPER SAVER                               (SEE NOTE 3) *
*  .... 1...  LIMIT PRINT                               (SEE NOTE 1) *
*  .... .1..  REPROMPT FOR AIX/UPGRADE SUPPORT          (SEE NOTE 4) *
*  .... ..1.  SET COUNT VALUES                          (SEE NOTE 5) *
*  .... ...1  PROMPT OPERATOR FOR R/M ERROR CODE        (SEE NOTE 6) *
*                                                                    *
* NOTE 1                                                             *
*  IF THE LIMIT PRINT OPTION IS SELECTED, THOSE CONTROL BLOCKS WITH  *
*  NOTE1 ARE PRINTED ONLY ON THE FIRST 2 TRACES AS THEY DO NOT       *
*  CHANGE DURING VSAM PROCESSING.                                    *
*                                                                    *
* NOTE 2                                                             *
*  WHERE YOU PLACE THE SVC WILL DETERMINE THE CONTENTS OF THESE      *
*  FIELDS.  IN SEQUENTUAL MODE, THE SEARCH ARGUMENT MAY ALWAYS BE    *
*  ZERO.  THE RECORD AREA IS BLANK IN LOCATE MODE, ETC...            *
*                                                                    *
* NOTE 3                                                             *
*  WITH THIS OPTION SPACES BETWEEN BLOCKS AND OTHER NICE THINGS ARE  *
*  OMITTED FROM THE PRINT OUTPUT.                                    *
*                                                                    *
* NOTE 4                                                             *
*  THIS BIT WILL CAUSE A REPROMPT FOR ANOTHER PARAMETER LIST.  THIS  *
*  LIST IS FOR THE OPTIONS TO BE USED WHEN TRACING AN AIX'S BASE     *
*  CLUSTER (WHEN OPEN VIA A PATH) OR A BASE CLUSTER'S UPG (UPGRADE)  *
*  SET.  IN THE CASE WHERE A PATH OPEN HAS OPENED AN AIX, BASE AND   *
*  UPG SET, THIS 2ND PARM LIST CONTROL THE BASE AND UPG.  IN SHORT,  *
*  THE 1ST PARM LIST CONTROLS THE CLUSTER THE USER OPENED, THE 2ND   *
*  CONTROLS THE CLUSTERS THAT VSAM OPENED.                           *
*  THE 2ND PARM LIST IS THE SAME FORMAT AS THE 1ST EXCEPT FOR THE    *
*  LAST BYTE (BYTE 5).                                               *
*   1111 ....  SAME AS NORMAL 'FE' PARM LIST                         *
*   .... 1...  NO UPG SETS                                           *
*   .... .1..  PRINT ALL WHEN CALLING ENTRY IS PATH/AIX              *
*   .... ..1.  PRINT ONLY CALLING ENTRY                              *
*   .... ...1  PRINT ALL ON ALL CALLS.                               *
*                                                                    *
*  SEE MESSAGE IDATRACE: ENTER PARM LIST FOR PATH/UPGRADE SUPPORT    *
*  FOR FUTHER INFORMATION.                                           *
*                                                                    *
* NOTE 5                                                             *
*  THE OPERATOR IS PROMPTED FOR A 'START COUNT' AND 'END COUNT'.     *
*  TRACING WILL BEGIN WHEN THIS ROUTINE HAS BEEN CALLED AS MANY TIMES*
*  AS IN THE 'START COUNT' AND TERMINATE WHEN 'END COUNT' IS REACHED.*
*  ENTER IN THE VALUES IN HEX.   (2C = 44 TIMES)                     *
*  IF YOU DESIRE TO FIND OUT HOW MANY TIMES IDATRACE IS CALLED BUT   *
*  DON'T WANT TRACING, ENTER IN 'FE-COUNT' FOR THE PARAMETER LIST.   *
*  THE VIRTUAL STORAGE ADDRESS OF THE COUNT FIELD WILL BE PRINTED OUT*
*  WHEN THE JOB TERMINATES, EITHER FROM A DUMP OR THE CONSOLE, LOCATE*
*  THE ADDRESS AND YOU WILL FIND THE COUNT VALUE.  REGARDLESS, THIS  *
*  VALUE IS ALWAYS AVAILABLE IN THE FIELD LABELED 'COUNT'.           *
*                                                                    *
* NOTE 6                                                             *
*  THE OPERATOR WILL BE PROMPTED ONLY ONCE FOR AN ERROR CODE.  THE   *
*  PRINT THEN WILL OCCUR ONLY WHEN THIS ERROR CONDITION OCCURS.  IF  *
*  THE OPERATOR REPLYS WITH 'ANY', THE PRINT OCCURS WITH ANY ERROR.  *
*                                                                    *
*                                                                    *
*                                                                    *
*-FD......   RECREATE MODE ------------------------------------------*
*                                                                    *
*BYTE 1                                                              *
* .... ....   X'FD'  ID BYTE FOR RECREATE                            *
*                                                                    *
*BYTE 2 THRU 4 ARE UNUSED                                            *
*                                                                    *
*  THIS BIT ON CAUSES A SPECIAL OUTPUT RECORD TO BE PUT TO DDNAME    *
*  'TRACE'.     THE RECORD CONSIST OF THE REQUEST TYPE, OPTIONS, AND *
*  ANY SEARCH ARGUMENTS.  SINCE THE LRECL ISN'T KNOWN, THE DD CARD   *
*  MUST PROVIDE IT.  THE FOLLOWING DD STATEMENT IS REQUIRED;         *
*   //TRACE     DD  UNIT=TAPE,DCB=(BLKSIZE=NNN,BUFNO=20,MACRF=(P),   *
*   //              RECFM=VB),DISP=NEW                               *
*   NNN = MAX RECORESIZE AS DEFINED IN THE CLUSTER BEING PROCESSED.  *
*   BLKSIZE=100 IS MINIMUM.                                          *
*  THE IDATRACE SVC NORMALLY WILL BE IN THE 1ST 20 BYTES OF IDA019R1.*
*  SJFS AND SDD HAVE A PROGRAM TO READ AND USE THIS SPECIAL TAPE.    *
*                                                                    *
*                                                                    *
*                                                                    *
* FC......   CATALOG MANAGEMENT CONTROL BLOCK TRACING ---------------*
*            ***THIS OPTION IS NOT AVAILABLE IN VERSION 3 ***        *
*                                                                    *
* IF A CATALOG MANAGEMENT CONTROL BLOCK IS FOUND IN A REG OR IF THE  *
* PARAMETER LIST ID IS 'FC', CATALOG CONTROL BLOCKS ARE PRINTED. THE *
* CONTROL BLOCKS SELECTED FOR PRINT ARE DETERMINED FROM THE CALLERS  *
* PARAMETER LIST.                                                    *
*                                                                     *
* BYTE 1                                                              *
*  FC.. ....  FC IS THE LIST TYPE ID                                  *
*                                                                     *
* BYTE 2                                                              *
*  1... ....  PRINT CCA  (DEFAULT)                                    *
*  .1.. ....  PRINT CPL  (DEFAULT)                                    *
*  ..1. ....  PRINT CURRENT BUFFER (RAB)                              *
*  ...1 ....  PRINT ALL BUFFERS (6 RABS)                              *
*  .... 1...  PRINT FVT                                               *
*  .... .1..  PRINT FPL                                               *
*  .... ..1.  PRINT CAXWA                                             *
*  .... ...1  PRINT REGISTERS                                         *
*                                                                     *
* BYTE 3                                                              *
*  1... ....  PRINT COMPLETE CPL FIELDS                               *
*  .1.. ....  PRINT CMS WORK AREA                                     *
*  ..1. ....  UNUSED                                                  *
*  ...1 ....  UNUSED                                                  *
*  .... 1...  UNUSED                                                  *
*  .... .1..  UNUSED                                                  *
*  .... ..1.  UNUSED                                                  *
*  .... ...1  FOLLOWING BYTE CONTAINS AN ERROR CODE.  PRINT THE ABOVE *
*             ONLY IF THIS ERROR CODE IS FOUND.  IF THIS BIT IS ON    *
*             AND FLAG4 IS BLANK, PRINT OCCURS ON ANY ERROR ONLY.     *
*                                                                     *
* BYTE 4                                                              *
*  ---- ----  ERROR CODE IN HEX                                       *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*--- EXAMPLES OF PARAMETER LIST --------------------------------------*
*                                                                     *
*                                                                     *
*  R 06,FE82800000                                                    *
*    A PROMPT WILL BE MADE FOR THE DDNAME AND THEN ONLY THE CURRENT   *
*    DATA BUFC AND BUFFER WILL BE TRACED.                             *
*                                                                     *
*  R 06,FE86800002                                                    *
*    A PROMPT WILL BE MADE FOR THE DDNAME AND START/STOP COUNT        *
*    VALUES.  WHEN IDATRACE HAS BEEN CALLED THE AMOUNT TIMES          *
*    SPECIFIED IN THE START VALUE, 'ALL' DATA BUFC AND BUFFERS WILL   *
*    BE TRACED.  WHEN THE STOP VALUE IS REACHED, PROMPTS WILL BE MADE *
*    AGAIN FOR NEW START/STOP VALUES.                                 *
*                                                                     *
*  R 07,FEDBFFFF01                                                    *
*    PROMPT WILL BE DONE FOR AN ERROR CODE.  IF NO DDNAME             *
*    WAS SPECIFIED, ANY RPL WITH THE CORRECT ERROR CODE WILL CAUSE    *
*    THE PRINTING OF THE REQUESTED CONTROL BLOCKS.  SINCE ALL OF THE  *
*    REQUESTED CONTROL BLOCKS ISN'T ON, ONLY THE CURRENT PLH, BUFC,   *
*    DATA BUFFER, INDEX BUFFER AND RPL WILL BE PRINTED.               *
*                                                                     *
*  R 14,FCE8                                                          *
*    (NOT ON VER 3) NO FUTHER PROMPTS.  CATALOG CONTROL BLOCKS ARE    *
*    TRACED.  THE FVT WAS REQUESTED BUT ONLY ALTER AND DEFINE REQUEST *
*    HAVE FVT'S.  ONLY THOSES TYPES OF REQUEST WILL THEN HAVE THEM    *
*    PRINTED.  FPL'S WILL BE PRINTED FOR ALL REQUEST.                 *
*                                                                     *
*  R 28,FD                                                            *
*    RECREATE MODE IS SET AFTER THE PROMPT FOR THE DDNAME             *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*--- EXAMPLES OF USE -------------------------------------------------*
*                                                                     *
*  RECORD MANAGEMENT IS ENTERED AND EXITS FROM IDA019R1.  THE         *
*  FOLLOWING IS THE EXIT POINT AND A GOOD PLACE TO TRACE.             *
*    ++PRE(X040,X050,X060) PRE(UX06815)                               *
*    NAME IDA019L1  IDA019R1                                          *
*    VER 017E 98EC,D00C,07FE       RETURN TO USER CODE                *
*    VER 09CC 0000,0000            PATCH AREA                         *
*    REP 017E 47F0,B9B0            BR TO PATCH                        *
*    REP 09CC 98EC,D00C,0AXX,07FE  IDATRACE SVC                       *
*                                                                     *
*    ++VER(Y017) PRE(UY75721,UY99911)   VSAM ICR                      *
*    NAME IDA019L1 IDA019R1                                           *
*    VER 0156 98EC,D00C                                               *
*    VER 0B6C 0000,0000                 PATCH AREA                    *
*    REP 0156 47F0,BB50                                               *
*    REP 0B6C 98EC,D00C,0A3B,07FE       IDATRACE SVC                  *
*                                                                     *
*    ++VER(Z030,Z037) PRE(UZ03193)       NAR807                       *
*    ++VER(Z037) PRE(UZ08067,UZ80700)    AR807                        *
*    NAME IDA019L1 IDA019R1                                           *
*    VER 017E 98EC,D00C                                               *
*    VER 0A3C 0000,0000                                               *
*    REP 017E 47F0,BA20                                               *
*    REP 0A3C 0AXX,98EC,D00C,07FE                                     *
*                                                                     *
* FOR RECREATE MODE AND/OR TO TRACE REQUEST AS THEY ARE GIVEN TO      *
* VSAM, TRACE AT THE ENTRY TO VSAM RECORD MANAGEMENT CODE AS FOLLOWS; *
*    ++VER(ALL SYSTEMS)                                               *
*    NAME IDA019L1 IDA019R1                                           *
*    VER 0000 47F0,F016        THE BRANCH AROUND THE MODULE NAME      *
*    REP 0000 47F0,F014                                               *
*    REP 0014 0AXX             OVERLAY PART OF NAME WITH SVC          *
*                                                                     *
*  IDA019R3 ISSUES THE EXCPVR FOR VSAM.  THE FOLLOWING ZAP IS GOOD TO *
*  TRACE I/O ACTIVITY TO THE DISK.  THIS POINT IS BEFORE THE CALL     *
*  TO IOS SO ONLY WRITES SHOULD BE TRACE HERE.  THE ZAP WILL CALL     *
*  IDATRACE ONLY IF THE I/O IS FOR A WRITE.                           *
*   (NOTE; OFFSET 0E30 AND 0E34 CHECK FOR INDEX.  DELETE IF YOU       *
*    WANT TO CHECK DATA WRITES.)                                      *
*    ++VER(X040,X050,X060) PRE(UX06655)                               *
*    NAME IDA019L1 IDA019R3                                           *
*    VER 0C92 5830,C014                                               *
*    VER 0E2C 0000,0000                                               *
*    REP 0C92 47F0,BE14                                               *
*    REP 0E2C 5830,C014           RESTORE INSTRUCTON                  *
*    REP 0E30 9140,3019           (FOR INDEX PROBLEMS) IS THIS INDEX? *
*    REP 0E34 4780,BC7E           NO, RETURN                          *
*    REP 0E38 9180,4002           IS MUST WRITE ON IN BUFFC?          *
*    REP 0E3C 4780,BC7E           NO, RETURN                          *
*    REP 0E40 0AXX,47F0,BC7E      WRITE, CALL IDATRACE                *
*                                                                     *
*    ++VER(Y017) PRE(UY99911)     ENHANCED VSAM ICR FOR SVS           *
*    NAME IDA019L1 IDA019R3                                           *
*    VER 0E14 5830,C014                                               *
*    VER 0FAC 0000,0000                                               *
*    REP 0E14 47F0,BF94                                               *
*    REP 0FAC 5830,C014,9180,4002,4780,BE00,0AXX,47F0,BE00            *
*                                                                     *
*    ++VER(Z037) PRE(UZ04642,UZ80700)                                 *
*    NAME IDA019L1 IDAM19R3                                           *
*    VER 0064 1802,181C                                               *
*    VER 00D8 0000,0000                                               *
*    REP 0064 47F0,B0C0                                               *
*    REP 00D8 1802,181C           RESTORE INSTRUCTIONS                *
*    REP 00DC 9180,4002           MUST WRITE ON IN BUFFC?             *
*    REP 00E0 4780,B050           NO, RETURN                          *
*    REP 00E4 0AXX,47F0,B050      YES, CALL IDATRACE                  *
*                                                                     *
*                                                                     *
* SPECIAL NOTE ABOUT CATALOG MANAGEMENT.  TO TRACE CATALOG I/O IN     *
* RECORD MANAGEMENT YOU CAN USE THE DDNAME OF STEPCAT OR JOBCAT       *
* FOR THE DDNAME PROMPT.  HENCE SINCE CATALOG MANAGEMENT ISSUES GET'S *
* AND PUT'S, THIS WILL ALLOW TRACING OF CATALOG R/M BLOCKS.           *
* THE MASTER CATALOG IS ANOTHER STORY.  SINCE IT DOESN'T HAVE A       *
* DDNAME AS WE KNOW IT, YOU NEED TO HANDLE IT AS A SPECIAL CASE.  FOR *
* THIS, ADD A DUMMY DD CARD TO THE JOB, SAY 'DDX  DD  SYSOUT=A' AND   *
* MAKE IT THE FIRST DD CARD IN THE JOB.  SINCE THE MASTER CATALOG'S   *
* ACB ALWAYS HAS A TIOT OFFSET OF 0, USING THIS DDNAME IN THE PROMPT  *
* WILL CAUSE IDATRACE TO TRACE MASTER CATALOG REQUEST.                *
*                                                                     *
*                                                                     *
*   THIS CODE IS NOT SUPPORTED BY ANYONE.  ANY COMMENTS OR QUESTIONS  *
*   ABOUT THIS PROGRAM SHOULD BE DIRECTED TO SAN JOSE FIELD SUPPORT.  *
*   PEND=SZ10,  CM QUEUE=SZ1                                          *
*                                                                     *
***********************************************************************
         EJECT
R0       EQU   0                   CONVERT INPUT
R1       EQU   1
R2       EQU   2
R3       EQU   3                   AMBL, CCA
R4       EQU   4                   CLPREG, RPLREG
R5       EQU   5                   ACBREG
R6       EQU   6                   CURRECT PLH, BUFFC
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11                  2ND BASE REG
R12      EQU   12                  1ST BASE REG
R13      EQU   13                  3RD BASE REG
R14      EQU   14                  TRANSPORTION REG
R15      EQU   15
PLHREG   EQU   R2
AMBLREG  EQU   R3
CCAREG   EQU   R3
CPLREG   EQU   R4
AMBREG   EQU   R4
RPLREG   EQU   R4
ACBREG   EQU   R5
         USING RPL,R4
         USING PHASE1,R12,R11
         EJECT
**********************************************************************
* PHASE1 SETS UP ADDRESSIBILTY, GETS AND CHECKS THE PARAMETER LIST.  *
* THE BASIC VSAM CONTROL BLOCKS ARE FOUND AND ANY PROMPTING NEEDED   *
* IS DONE.                                                           *
* PHASE2 AND 3 LOCATE AND SET UP CONTROL BLOCKS FOR PRINTING.        *
* PHASE4 SETS UP AND CONTROLS PRINTING OF CATALOG CONTROL BLOCKS.    *
* PHASE5 CONTAINS SUPPORT FUNCTIONS SUCH AS THE CONVERT ROUTINE AND  *
* PRINT ROUTINE.                                                     *
**********************************************************************
PHASE1   LR    R12,R6
         B     PHASE1A
         DC    C'IDATRACE V50 77/10/27    '
         DS    0F
PHASE1A  LA    R11,4095(R12)
         LA    R11,1(R11)
         L     R13,WORKSAVE
         USING R13BASE,R13
         SR    R10,R10
         TM    29(R4),X'C0'        IS ABEND IN PROGRESS?
         BO    EXIT4               YES, GET OUT QUICK
         TM    182(R3),X'10'       IS NIP IN CONTROL?
         BO    EXIT4
         TM    264(R3),X'20'       HAS SUPER RESET BEEN INVOKED?
         BO    EXIT4               YES, GET OUT
         TM    RESET,X'FF'         HAS RESET BEEN INVOKED?
         BNZ   RESET2              YES, GO TRY THE LOCK
         TS    LOCK                LOCK FOR RE-ENTRY
         BNZ   EXIT3
LOCKER   TM    FLAG,RESETFLG       INIALIZED?
         BZ    RESET1              NO, GET JOBNAME
RESTART  MVI   LOCK,X'00'          TURN OFF MAIN LOCK
         L     R10,12(R4)          TIOT'S JOB NAME ADDR
         CLC   JOBNAME(8),0(R10)   CORRECT JOB?
         BNE   EXIT3               NO, GET OUT
         TM    FLAG,OPENBAD        DCB PROBLEMS?
         BO    EXIT3               YES, GET OUT
         TM    STATUS,HOT          WAS AN OPEN ISSUED?
         BZ    WORKAREA            NO, CONTINUE
         TM    TRACE+48,X'10'      AND IS DCB STILL OPEN?
         BO    WORKAREA            YES, CONTINUE
         TM    STATUS,MVS          IS THIS MVS?
         BO    WORKAREA            NO NEED TO RE-GET CORE FOR MVS
         XC    BUFFCORE,BUFFCORE   NO, THEN ASSUME CORE WAS FREED.
         XC    CORE(40),CORE       CLEAN OUT 10 CORE ADDRESS
WORKAREA LA    R10,10
         LA    R9,CORE
FINDCORE TS    0(R9)               IS THIS BLOCK FREE?
         BNZ   NEXTCORE            NO, TRY NEXT BLOCK
         ICM   R1,7,1(R9)          IS THERE AN ADDRESS?
         BZ    GETMAIN             NO, GET SOME CORE
         C     R9,0(R1)            DOES CORE POINT BACK TO ME?
         BE    GOTCORE             YES, IT'S MINE
         B     GETMAIN             NO, GET IT AGAIN
NEXTCORE LA    R9,4(R9)            POINT TO NEXT BLOCK
         BCT   R10,FINDCORE        ALLOW UP TO 10 BLOCKS OF KEPT CORE.
         B     EXIT3               EXCEDED THE IRB RE-ENTRY COUNT
GETMAIN  TM    STATUS,MVS          IS THIS MVS?
         BO    GETMAIN1            NO, GETMAIN
         MVI   GETMAIN1+13,X'00'   SET SUBPOOL TO 00 FOR VS1
GETMAIN1 GETMAIN EC,LV=GETEND-SAVE,A=COREADR,SP=241
         LTR   R15,R15             ALL OK?
         BNZ   GETFAIL             NO, DEAD
         L     R1,COREADR
GOTCORE  LA    R13,0(R1)           SET NEW BASE
         STCM  R1,7,1(R9)          SAVE BLOCK ADDRESS
         ST    R9,0(R13)           REMEMBER FOR FREEMAIN
         L     R7,MOVELGN          PREPARE TO MOVE NEEDED DATA TO
         LR    R9,R7               NEW CORE BLOCK.
         LR    R6,R1
         LA    R6,76(R6)           POINT PAST SAVE AREA
         L     R8,WORKSAVE         START OF MOVE ADDRESS
         LA    R8,76(R8)           DON'T MOVE THE SAVE AREA
         MVCL  R6,R8
         ST    R5,SVRB
         L     R6,12(R4)           PICK UP TIOT ADDR
         ST    R6,TIOTADR          SAVE TIOT ADDRESS
         B     PARMPMT
***********************************************************************
**** UPDATE COUNTS, RESTORE REGS FROM SVRB AND RETURN TO VSAM *********
***********************************************************************
EXIT1    NI    FLAG1,X'0F'         TURN OFF FOUND FLAGS
         L     R5,SVRB
         L     R6,0(R13)           GET BLOCK ADR
         C     R6,=A(CORE)         IS THIS THE LAST EXIT?
         BE    EXIT2
         TM    STATUS2,GOOD        WAS THIS A GOOD ENTRY?
         BZ    EXIT2
         L     R0,IRBCOUNT
         BAL   R14,CONVERT
         MVC   OUTLINE(13),SVCADR+8
         MVC   OUTLINE+15(27),CONTMSG
         MVC   OUTLINE+43(17),SVCMSG
         MVC   OUTLINE+56(4),UNPACK+4
         MVC   OUTLINE+61(35),SVCADR+8
         LA    R2,3
         BAL   R3,PUT              TELL USER THAT THE IRB PRINT IS DONE
EXIT2    MVI   0(R6),X'00'         RESET BLOCKS LOCK (AVAILABLE)
         CLI   COUNT+3,X'02'
         BNE   EXIT3
         L     R13,RFLAG1
         TM    4(R13),NOTE1        SINGLE PRINTS?
         BZ    EXIT3
         NI    1(R13),X'EE'        TURN OFF ACB AND AMBL
         NI    3(R13),X'C3'        AND THE OTHERS
         NI    7(R13),X'EE'        SAME FOR AIX PARMS
         NI    9(R13),X'C3'
EXIT3    L     R6,COUNT2
         LA    R6,1(R6)            TOTAL TIMES IDATRACE HAS BEEN CALLED
         ST    R6,COUNT2
EXIT4    L     R6,16(R0)           GET CVT
         TM    264(R6),X'10'       SPECIAL EXIT?
         BZ    *+14                NO, DON'T CHANGE RESUME PSW
         L     R4,28(R5)           LOCATE LAST SVRB
         MVC   21(3,R4),89(R5)     CHANGE RESUME POINT TO = R14
         LM    0,15,32(R5)         RESTORE REGS
         SVC   3                   THE END
         EJECT
**********************************************************************
* THE FOLLOWING CODE PROMPTS FOR THE VARIOUS INPUT PARAMETERS.  THE  *
* AMOUNT OF PROMPTING DONE IS DEPENDENT ON THE FIRST PARAMETER GIVEN.*
**********************************************************************
PARMPMT  L     R5,SVRB             GET SVRB ADDRESS
         L     R5,28(R5)           GET PREVIOUS SVRB ADDRESS
         MVC   SVCADDR(4),20(R5)   GET SVC ADDRESS
         L     R5,SVRB             FIND USERS REGS
         LA    R5,32(R5)
         ST    R5,WORK4            SAVE USERS REGS ADDRRESS FOR LATER
         TM    FLAG,PARMS          HAVE I GOTTEN THE PARM LIST?
         BO    REGFIND
         TM    CFLAG1,CATPARM      DO WE HAVE A CATALOG PARM LIST?
         BO    CATCB
         LA    R1,PARMPRMT
         BAL   R14,PROMPT          GET THE PARM LIST.
         OI    FLAG,PARMS
         CLC   FECNT,REPLY         IS THIS COUNT ONLY
         BNE   PARMPMT1
         OI    FLAG,COUNTOLY       COUNT ONLY FLAG
         LA    R0,COUNT            TELL USER WHERE THE COUNT FIELD IS.
         BAL   R14,CONVERT
         MVC   COUNTMSG+36(8),UNPACK
         LA    R1,MSGLNG           R1 POINTS TO WTO PARM LIST
         MVC   MSGLNG(2),COUNTMSG
         MVC   MESSAGES(40),COUNTMSG+2
         SVC   35
         B     DDPMT               GO GET DDNAME
PARMPMT1 BAL   R14,PACKER
         CLI   REPLY,X'FC'
         BE    PARMPMT2
         BL    DEFAULT             BAD INPUT.  TRY AGAIN
         MVC   FLAG1(5),REPLY
         TM    FLAG5,AIXX          WANT AIX RE-PROMPT?
         BZ    DDPMT               NO, CONTINUE
         LA    R1,AIXPARM
         BAL   R14,PROMPT          GO GET AIX LIST
         BAL   R14,PACKER
         MVC   AIXIN(4),REPLY+1    SAVE PARM LIST
         CLI   REPLY,X'FE'         WAS A VALID PARM LIST GOTTEN?
         BE    DDPMT               YES, CONTINUE
         NI    FLAG,X'FF'-PARMS    WE WILL START THIS OVER
         B     PARMPMT
PARMPMT2 MVC   CFLAG2(3),REPLY+1
         OI    CFLAG1,CATPARM
DDPMT    LA    R1,DDPRMT
         BAL   R14,PROMPT          PROMPT FOR DDNAME.
         TM    CFLAG1,CATPARM
         BO    CDDPMT
         XC    DDNAME,DDNAME       CLEAR OUT DDNAME FIELD
         MVC   DDNAME,REPLY        GET UN-PADED DDNAME
         CLI   DDNAME,X'00'        WAS ONE GIVEN?
         BE    RMLIST              NO, TRACE ALL
         OI    FLAG,UNIQUE         HAVE DDNAME TO CHECK
         B     DDPMT2
CDDPMT   XC    CDDNAME,CDDNAME     CLEAR OUT CATALOG DDNAME
         CLI   REPLY,X'00'
         BE    CDDPMT2
         MVC   HOLDREGS(8),DDNAME  SAVE R/M'S DDNAME
         MVC   DDNAME,REPLY
         OI    CFLAG1,CUNIQUE      REMENBER TO CHECK CAT DDNAME
DDPMT2   LA    R6,8                SET COUNT FOR DDNAME EDIT
         LA    R7,DDNAME
DDLOOP   CLI   0(R7),X'00'
         BNE   *+8
         MVI   0(R7),X'40'
         LA    R7,1(R7)
         BCT   R6,DDLOOP
         TM    CFLAG1,CATPARM       WERE WE DOING THIS FOR CATALOG?
         BZ    RMLIST              NO, GET OUT
         MVC   CDDNAME,DDNAME      GET CATALOG DDNAME
         MVC   DDNAME,HOLDREGS     RESTORE R/M'S DDNAME
CDDPMT2  L     R14,RCFLAG1         SAVE THE CAT PARMS IN REAL FLAGS
         MVC   0(4,R14),CFLAG1
         TM    CFLAG1,SETCAT       WAS THIS A SPECIAL PROMPT?
         BO    CPARMOK             YES, RETURN TO PHASE4
         NI    FLAG,X'FF'-PARMS    TURN OFF RM LIST AS THIS IS CAT ONLY
         B     CATCB               NO, SEE IF WE HAVE CATALOG BLOCKS
RMLIST   CLI   FLAG1,X'FD'         RECREATE?
         BNE   DEFAULT
         OI    FLAG,PARKER         TURN ON RECREATE FLAG
         MVI   FLAG1,X'00'
         B     SAVEFLAG            GO START RECREATING
DEFAULT  CLI   FLAG1,X'FE'         R/M LIST?
         BE    ERRORPMT
         TM    CFLAG1,SETCAT       WAS THIS ERROR DURING SPECIAL PROMPT
         BO    CATPROMT            YES, LET PHASE4 RETRY PROMPT
         TM    FLAG,COUNTOLY       IS THIS COUNT ONLY?
         BO    REGFIND             YES, NO ERROR.
         NI    FLAG,X'FF'-PARMS    TURN OFF GOT PARAMETERS
         B     PARMPMT             ERROR, TRY FOR PARMS AGAIN.
ERRORPMT MVI   FLAG1,X'00'         CLEAR CONTROL FLAGS
         TM    FLAG5,ERRCDPMT      WANT ERROR CODE PROMPT?
         BZ    CNTPMT
         LA    R1,ERRPRMT
         BAL   R14,PROMPT          PROMPT FOR ERROR CODE
         OI    FLAG1,RMERRCD
         CLI   REPLY,X'C1'         WAS REPLY 'ANY'?
         BE    CNTPMT              YES,DON'T STORE IT.
         BAL   R14,PACKER
         MVC   FLAG6,REPLY         SAVE ERROR CODE
CNTPMT   TM    FLAG5,COUNTX        WANT COUNT VALUES SET?
         BZ    SAVEFLAG
         MVC   CNTPRMTS+18(5),=C'START'
         LA    R1,CNTPRMTS
         BAL   R14,PROMPT          GET START VALUE
         BAL   R14,PACKER
         BAL   R14,PACKSHFT        RIGHT JUSTIFY INPUT
         MVC   COUNTS,REPLY        SAVE START VALUE
         MVC   CNTPRMTS+18(5),=C'END  '
         LA    R1,CNTPRMTS
         BAL   R14,PROMPT          GET END COUNT VALUE
         BAL   R14,PACKER
         BAL   R14,PACKSHFT        RIGHT JUSTIFY INPUT
         MVC   COUNTE,REPLY        SAVE END COUNT VALUE
         TM    FLAG1,COUNTING      AM I RESETING THE COUNT VALUES
*                                  BECAUSE THE END VALUE WAS HIT, OR
*                                  IS THIS THE FIRST TIME THERE SET?
         BO    CONDIT3+12          YES, BEEN HERE BEFORE
         OI    FLAG1,COUNTING
SAVEFLAG L     R14,RFLAG1          SAVE INPUT VALUES IN THE REAL FLAGS
         MVC   0(11,R14),FLAG1
**********************************************************************
*        END OF PROMPT CODE                                          *
**********************************************************************
         EJECT
**********************************************************************
* LOCATE CONTROL BLOCKS NEEDED FOR IDATRACE OPETATION.  CHECK FOR A  *
* PLH, RPL OR ACB WITH AMBL.  IF NOTHING FOUND, BRANCH TO CATCB TO   *
* SEE IF CATALOG CB'S CAN BE FOUND.                                  *
**********************************************************************
         SPACE 1
REGFIND  L     R6,WORK4            GET POINTER TO USERS REGS
         L     R8,52(R6)           GET OLD REG 13
         L     R9,44(R6)           GET OLD REG 11
         CR    R8,R9               IS OLD R13 GREATER THAN OLD REG 11?
         BL    RPLFIND             NO, DON'T TRY CATALOG LOGIC
         SH    R8,=X'046C'
         CR    R8,R9               NOW IS IT LESS THAN OLD R11?
         BH    RPLFIND             NO, DON'T TRY CATALOG LOGIC
         CLI   0(R9),X'AC'         DID OLD REG 11 POINT TO A CCA?
         BE    CATCB               YES, THEN CHECK FOR CATALOG BLOCKS
RPLFIND  L     RPLREG,4(R6)        GET OLD REG 1
         CLI   RPLIDWD,X'00'       IS THIS AN RPL?
         BNE   PLHFIND             NO, LOOK FOR PLH
         CLI   RPLLEN,X'4C'        IS THIS AN RPL?
         BE    RPLFOUND
         ICM   ACBREG,15,RPLDACB   GET ASSUMED ACB ADDRESS.
         BZ    PLHFIND             GOT NONE, MOVE ON
         CLI   0(ACBREG),X'A0'     ACB ID THERE?
         BNE   PLHFIND
         CLI   3(ACBREG),X'4C'     HAVE ACB LENGTH IN IT?
         BNE   PLHFIND
RPLFOUND OI    FLAG1,RPLFLG        FOUND THE RPL.
         ICM   PLHREG,15,RPLPLHPT  NOW HOW ABOUT AN PLH?
         BZ    ACBCHECK
         C     RPLREG,16(PLHREG)   DOES ASSUMED PLH POINT TO RPL?
         BNE   ACBCHECK            RPL DOESNT POINT TO PLH HENCE NO PLH
         OI    FLAG1,PLHFLG        GOT PLH
         ST    PLHREG,CPLH         SAVE CURRENT PLH FOR AIX PROCESSING
         B     ACBCHECK
PLHFIND  ICM   R2,7,9(R6)          GET OLD REG2 (ONLY IF RPL NOT FOUND)
         BZ    ACBCHECK
         ICM   R4,15,16(PLHREG)
         BZ    ACBCHECK
         CLI   3(R4),X'4C'         DOES PLH POINT TO AN RPL?
         BE    PLHFOUND
         ICM   R5,15,RPLDACB       SEE IF ASSUMED RPL POINTS TO ACB
         BZ    ACBCHECK            NO PLH
         CLI   0(R5),X'A0'         IS THIS AN ACB?
         BNE   ACBCHECK
PLHFOUND OI    FLAG1,PLHFLG        FOUND PLH
         TM    FLAG1,RPLFLG        WAS RPL FOUND?
         BO    ACBCHECK            YES IT WAS.
         ICM   RPLREG,15,16(PLHREG) NO, MAYBE NOW WE HAVE IT.
         BZ    ACBCHECK
         OI    FLAG1,RPLFLG        GOT SOMTHING NOW
ACBCHECK TM    FLAG1,RPLFLG        WAS A RPL FOUND?
         BZ    ACBFIND             NO
         L     ACBREG,RPLDACB      YES- GET ACB ADDR FROM RPL
         OI    FLAG1,ACBFLG        FOUND ACB
         B     AMBLFIND
ACBFIND  ICM   ACBREG,15,0(R6)     GET OLD REG 0
         BZ    CATCB               NO R/M CB'S. CHECK FOR CATALOGS
         CLI   0(ACBREG),X'A0'     CHECK ID
         BNE   CATCB               NO R/M CB'S. CHECK FOR CATALOGS
         OI    FLAG1,ACBFLG        FOUND ACB
AMBLFIND L     AMBLREG,4(ACBREG)
         LTR   AMBLREG,AMBLREG
         BZ    NOCB                SHOULD HAVE AMBL
         OI    FLAG1,AMBLFLG       AMBL WAS FOUND
         LA    R14,CONDITON
AMBLSTOR ST    AMBLREG,AMBL        SAVE AMBL ADDRESS FOR LATER
         MVC   DAMB,52(AMBLREG)    GET DATA AMB ADDRESS
         MVC   IAMB,56(AMBLREG)    GET INDEX AMB ADDRESS
         BR    R14
         EJECT
**********************************************************************
* CHECK FOR THE VARIOUS CONDITIONS NEEDED TO CONTINUE.  CORRECT      *
* DDNAME, CORRECT COUNT, ERROR CODES, ETC...                         *
**********************************************************************
CONDITON TM    FLAG5,AIXX          WANT AIX CHECK?
         BZ    CONDIT1             NO, GO CHECK DDNAME
         TM    30(AMBLREG),X'40'   UPG?
         BO    EXIT1               YES, GET OUT
         TM    30(AMBLREG),X'80'   IS THIS A PATH?
         BZ    *+12                NO
         OI    STATUS2,AIXDONE
         B     CONDIT1
         TM    AIXOPT,AIXPATH      NO, BASE.  WANT IT?
         BO    EXIT1               NO, EXIT
         ICM   R6,15,232(PLHREG)   ANY AIX/BASE AROUND?
         BZ    CONDIT1             NO, HAVE BASE AND UPG'S ONLY
         OI    STATUS2,BASEDONE+SWAPED
         BAL   R14,SWAP            YES, THIS IS SOME AIX'X BASE WE HAVE
CONDIT1  TM    FLAG,UNIQUE         NEED TO CHECK DDNAME?
         BZ    CONDIT2             NO, GO CHECK RECREATE
         LH    R6,40(ACBREG)       GET TIOT OFFSET
         A     R6,TIOTADR          NEED TIOT TO CHECK DDNAME
         CLC   4(8,R6),DDNAME
         BNE   EXIT1               WRONG DDNAME, EXIT
CONDIT2  ICM   R0,15,IAMB          DO WE HAVE AN INDEX TYPE DATA SET?
         BNZ   *+8                 YES, SKIP NEXT INSTRUCTION
         NI    FLAG2,X'FF'-INDEXCB TURN OFF INDEX PRINT, NONE FOUND
         TM    FLAG,PARKER         RECREATE MODE?
         BO    RECREATE
CONDIT3  L     R6,COUNT            UPDATE COUNT VALUE FOR THIS DDNAME
         LA    R6,1(R6)
         ST    R6,COUNT
         TM    FLAG,COUNTOLY
         BO    EXIT1               COUNT ONLY, GET OUT HERE
         TM    FLAG1,COUNTING      AM I COUNTING?
         BZ    CONDIT4             NO, DO ERROR CHECK
         CLC   COUNTS,COUNT
         BH    EXIT1               HAVEN'T BEEN CALLED ENOUGHT. GET OUT
         CLC   COUNTE,COUNT
         BE    CNTPMT              HIT END VALUE.  GET NEW VALUES
CONDIT4  TM    FLAG1,RMERRCD       NEED TO CHECK ERROR CODE?
         BZ    PHASE2              NO, GO PRINT
         TM    FLAG1,RPLFLG        DO WE HAVE AN RPL?
         BZ    NOCB                NEED IT TO CHECK ERROR CODE.
         CLI   FLAG6,X'00'         IS THIS AN ANY CONDITION?
         BNE   CONDIT5
         CLI   15(RPLREG),X'00'    IS THERE AN ERROR?
         BE    EXIT1               NO, EXIT THEN.
         B     PHASE2              YES, GO PRINT.
CONDIT5  CLC   FLAG6,15(RPLREG)    SUPPLIED CODE = RPLERCD?
         BNE   EXIT1
         B     PHASE2              EVERY THING OK, START PRINT
         EJECT
**********************************************************************
*  AT THIS POINT IT IS ASSUMED THAT WE ARE WORKING WITH CATALOG      *
*  CONTROL BLOCKS SINCE NO R/M CB'S COULD BE FOUND.                  *
* IF TRUE, GO TO PHASE4 TO PRINT CATALOG CB'S.  THIS OCCURES IF THE  *
* PARAMETER LIST HAS 'FC' AS THE ID.                                 *
**********************************************************************
CATCB    L     R8,COUNT            UPDATE THE COUNT FIELD
         LA    R8,1(R8)
         ST    R8,COUNT
         L     R8,WORK4            POINT TO USER'S REGS
         L     CCAREG,44(R8)       FIND OLD REG 11
         CLC   0(2,CCAREG),=X'ACCA'  DOES IT POINT TO A CCA?
         BNE   *+16                NO CCA, TRY CPL NEXT
         OI    CFLAG1,CCAFLG       FOUND CCA
         ICM   CPLREG,15,28(CCAREG)    GET CPL ADDRESS
         BNZ   CPLCHECK
         ICM   CPLREG,15,4(R8)        GET OLD REG 1
         BZ    NOCPL
         TM    2(CPLREG),X'01'
         BNO   NOCB                NOTHING TO PRINT
         CLI   2(CPLREG),X'10'     CHECK REQUEST TYPE
         BNH   NOCB                NOT A VSAM TYPE
         CLI   2(CPLREG),X'90'
         BNL   NOCB                NOT A VSAM TYPE
CPLCHECK MVC   RTYPE(1),2(CPLREG)  GET REQUEST TYPE
         NI    RTYPE,X'F0'
         CLI   RTYPE,X'80'         CMS TYPE OF CPL?
         BNE   NONCMS              NO, CHECK FOR NO-OP
         CLI   16(CPLREG),X'08'    MUST BE CMS CPL, CHECK
         BL    NOCPL
         CLI   16(CPLREG),X'30'
         BH    NOCPL
         OI    CFLAG1,CPLFLG       FOUND CPL
         CLI   16(CPLREG),X'10'    ALTER OR DEFINE TYPE?
         BNL   PHASE4              NO, GO PRINT
         OI    CFLAG1,FVTTYPE      NEED FVT PRINTED ALSO
         B     PHASE4
NONCMS   CLI   RTYPE,X'00'         A NO-OP TYPE CPL?
         BE    NOCPL
         OI    CFLAG1,CPLFLG
         B     PHASE4
NOCPL    TM    CFLAG3,CPLCTL       FIRST SHOT?
         BO    NCPL                NO, TRY CCA
         TM    CFLAG1,CCAFLG       CCA?
         BZ    NOCB                NO, TRY TO EXIT1
         OI    CFLAG3,CPLCTL       2ND TRY
         ICM   CPLREG,15,368(CCAREG)  FIND 2ND CPL ADDRESS
         BZ    NCPL                NOTHING, GET OUT
         B     CPLCHECK
NCPL     NI    CFLAG3,X'FF'-CPLCTL
         TM    CFLAG1,CCAFLG       HAVE A CCA?
         BZ    NOCB                NO, ERROR OUT.
         ICM   CPLREG,15,28(CCAREG)
         BZ    NOCB                DO WE HAVE A DUMMY CPL TO PRINT?
         NI    CFLAG2,X'F3'        CAN NOT PRINT FVT OR FPL
         B     PHASE4
         SPACE 3
**********************************************************************
*  THIS ROUTINE DETERMINES IF THE ERROR MESSAGE NEEDS TO BE ISSUED   *
*  BECAUSE OF SOME ERROR CONDITION AND TAKES CORRECT ACTION FOR IT.  *
**********************************************************************
AIXERROR LA    R0,8                EC=8
         NI    FLAG5,X'FF'-AIXX    TURN OFF AIX PRINT OPTION
         TM    STATUS2,SWAPED      IS PARM LIST WRONG?
         BZ    ABEND1
         LA    R14,ABEND1
         B     SWAP
GETFAIL  LA    R0,7                EC=7
         LR    R6,R15
         OI    STATUS,MAJORBUG
         B     ABEND1
WRTERR   LA    R0,6                EC=6
         B     ABEND1
OPENFAIL LA    R0,5                EC=5
         B     ABEND1
NOCB     TM    STATUS,NOBLKS       HAVE WE ALREAY INFORMED USER OF ERRO
         BO    EXIT1               YES, NORMAL EXIT
         OI    STATUS,NOBLKS
         LA    R0,4                EC=4
         B     ABEND1
ABEND1   BAL   R14,CONVERT         CONVERT ERROR CODE TO PRINTABLE STUF
         MVC   ERRORMSG+21(1),UNPACK+7
         LA    R1,ERRORML
ABEND2   BAL   R14,PROMPT
         CLI   REPLY,C'S'          WANT TO STOP IDATRACE?
         BNE   ABEND3
         MVI   RESET,X'11'         YES
         B     RESET2
ABEND3   CLI   REPLY,C'C'          WANT TO CONTINUE?
         BNE   ABEND4
         TM    STATUS,MAJORBUG     IS THIS A MAJOR PROBLEM?
         BZ    EXIT1               NO, CAN ATTEMPT TO FREE CORE
         B     EXIT3               YES, GET OUT QUICK
ABEND4   CLI   REPLY,C'A'          WANT ABEND?
         BNE   ABEND1
         ABEND 201,DUMP
         EJECT
**********************************************************************
********* PHASE 2 DOES PLH COMMON BLOCK PRINTING *********************
**********************************************************************
         SPACE 1
PHASE2   LA    R14,REGPRT          SET DUMMY RETURN POINT
OPENDCB  STM   R0,R15,PRTSAVE
         TM    TRACE+48,X'10'      HAS DCB BEEN OPENED YET?
         BO    SVCPRT              YES, START PRINTING
         TM    FLAG,PARKER         IS THIS RECREATE?
         BO    OPEN                YES, OPEN QSAM. NO, OPEN BSAM
         MVI   TRACE+36,X'00'      SET DCB TO BSAM
         MVI   TRACE+51,X'20'
         MVI   TRACE+72,X'14'      SET NCP
OPEN     TM    STATUS,OPENING      IS ANOTHER CALL OPENING THE DCB?
         BO    EXIT1               YES, GET OUT.
         OI    STATUS,OPENING
         OPEN  (TRACE,(OUTPUT))
         TM    TRACE+48,X'10'      DID IT OPEN OK?
         BO    OPEN2               YES, CONTINUE
         OI    FLAG,OPENBAD
         B     OPENFAIL
OPEN2    NI    STATUS,X'FF'-OPENING
         OI    STATUS,HOT          REMEMBER WE DID AN OPEN
         TM    FLAG,PARKER         IS THIS RECREATE?
         BO    SVCPRT              YES, DON'T BUILD THE BUFFER POOL
         TM    STATUS,MVS          VS1?
         BO    *+8
         MVI   GETBUF+13,X'00'     RESET SUBPOOL TO 00 FOR VS1
GETBUF   GETMAIN EC,LV=53600,A=BUFFCORE,SP=241
         LTR   R15,R15             OK?
         BNZ   GETFAIL             NO, GO DIE
         L     R8,BUFFCORE
         SR    R9,R9
         LA    R1,400(R8)          R1 POINTS TO FIRST BUFFER
         LA    R6,20
         ST    R1,BUFFER1
         ST    R1,CURREC           SET CURRENT RECORD POINTER
         LA    R14,DECBT
         ST    R14,CURDECBT
BLDLOOP  ST    R8,0(R9,R14)        SAVE DECB ADDRESS INTO DECB TABLE
         MVC   0(20,R8),REALDECB   MOVE DECB INTO CORE
         ST    R1,12(R8)           STORE THIS DECB'S BUFFER ADDRESS IN
         LA    R1,2660(R1)         POINT TO NEXT BUFFER
         LA    R9,4(R9)            NEXT DECB TABLE ENTRY
         LA    R8,20(R8)           NEXT DECB
         BCT   R6,BLDLOOP          BUILD 20 DECBS IN BUFFER POOL
*
***** WRITE OUT SVC ADDRESS
*
SVCPRT   NI    STATUS,X'FF'-OPENING
         LM    R0,R15,PRTSAVE
         TM    FLAG,PARKER         IS THIS A RECREATE OPEN?
         BZ    SVCPRT1             NO, CONTINUE
         BR    R14
SVCPRT1  OI    STATUS2,GOOD        THIS WILL BE A GOOD PRINT
         CLC   0(4,R13),=A(CORE)   NEED TO PRINT IRB MESSAGE?
         BNE   *+14                YES, CONTINUE
         MVC   IRBCOUNT,COUNT
         B     SVCPRT2
         XC    OUTLINE,OUTLINE     SET UP FOR SPACES
         LA    R2,3
         BAL   R3,PUT
         MVC   HEADER(13),SVCADR+8 SET UP INTERUPT MESSAGE
         MVC   HEADER+15(38),INTERMSG
         MVC   HEADER+61(35),SVCADR+8
         LA    R2,2
         BAL   R3,PUT              WRITE OUT THE IRB MESSAGE
SVCPRT2  XC    HEADER,HEADER       CLEAR OUTPUT AREA
         L     R0,COUNT            SET UP COUNT FIELD IN SVC MESSAGE
         BAL   R14,CONVERT
         MVC   SVCMSG+13(4),UNPACK+4
         ICM   R0,7,SVCADDR+1
         BAL   R14,CONVERT
         MVC   SVCADR(8),UNPACK
         MVC   HEADER+1(33),SVCADR+8
         MVC   HEADER+34(33),SVCADR+8
         MVC   HEADER+63(19),SVCADR+8
         LA    R2,1
         BAL   R3,PUT
         MVC   HEADER+1(62),SVCMSG
         MVC   HEADER+62(20),HEADER+42
         LA    R2,1                ZERO SPACES FOR A HEADER
         TM    CFLAG1,NODDNAME
         BZ    SVCLOOP
         MVC   HEADER+63(25),NODDMSG
         TM    FLAG5,DLL           IS THIS DLL TYPE OUTPUT?
         BZ    SVCLOOP             NO, CONTINUE
         MVC   HEADER+1(5),HEADER+6
         MVI   HEADER+6,C'='
         MVC   HEADER+7(4),HEADER+14
         XC    HEADER+11(6),HEADER+11
         L     R0,SVRB
SVCLOOP  BAL   R3,PUT              PRINT HEADER RECORD
         MVC   HEADER+1(33),SVCADR+8
         MVC   HEADER+34(33),SVCADR+8
         MVC   HEADER+63(19),SVCADR+8
         LA    R2,2
         BAL   R3,PUT
         LM    R0,R15,PRTSAVE
         BR    R14
*
***** PRINT THE CALLERS REGISTERS
*
REGPRT   TM    FLAG5,REGX          WANT CALLER'S REGS PRINTED?
         BZ    ACBPRT              NO, TRY ACB
         MVC   HEADER+1(51),REGMSG
         LA    R1,64               X'40' BYTES LENGTH FOR REGS
         L     R0,WORK4            GET ADDRESS OF THE SAVED REGS
         BAL   R14,PRINT
*
***** PRINT ACB
*
ACBPRT   TM    FLAG1,ACBFLG        DO WE HAVE AN ACB?
         BZ    RPLPRT              NO- TRY RPL
         TM    FLAG2,ACBX          WANT ACB PRINTED?
         BZ    RPLPRT              NO- TRY RPL
         LR    R0,ACBREG
         BAL   R14,CONVERT         GO CONVERT ADDRESS.
         MVC   ACBADR(8),UNPACK    MOVE IT INTO MESSAGE.
         SR    R1,R1
         LH    R1,2(ACBREG)        GET ACB LENGTH
         MVC   HEADER+1(24),ACBMSG SET UP PRINT HEADER
         BAL   R14,PRINT           PRINT THE ACB
**
***** PRINT RPL
**
RPLPRT   TM    FLAG1,RPLFLG        DO WE HAVE A RPL?
         BZ    RECPRT              NO, TRY NEXT CB.
         TM    FLAG2,RPLX          WANT RPL?
         BZ    RECPRT              NO, TRY NEXT CB.
         LR    R0,RPLREG
         BAL   R14,CONVERT
         MVC   RPLADR(8),UNPACK    GET CONVERTED ADDRESS
         LA    R1,76               GET RPL LENGTH
         MVC   HEADER+1(24),RPLMSG SET UP PRINT HEADER
         BAL   R14,PRINT           GO PRINT THE RPL.
*
***** PRINT USER'S RECORD AREA
*
RECPRT   TM    FLAG4,RECDX         WANT USER'S RECORD PRINTED?
         BZ    KEYPRT
         TM    FLAG1,RPLFLG        NEED RPL TO DO IT.
         BZ    KEYPRT
         ICM   R0,15,RPLAREA       GET RECORD ADDRESS
         BZ    KEYPRT
         L     R1,RPLRLEN
         BAL   R14,CONVERT
         MVC   RECADR(8),UNPACK
         L     R0,RPLRLEN          SET DUMP LENGTH
         BAL   R14,CONVERT         NEED LRECL
         MVC   RECADR+25(4),UNPACK+4
         L     R0,RPLAREA          GET RECORD ADDRESS
         MVC   HEADER+1(56),RECMSG
         BAL   R14,PRINT
*
***** PRINT USER'S SEARCH ARGUMENT
*
KEYPRT   TM    FLAG4,KEYX          WANT KEY PRINTED?
         BZ    PLHPRT
         TM    FLAG1,RPLFLG        NEED RPL.
         BZ    PLHPRT
         L     R5,RPLARG           GET KEY ADDR.
         LTR   R0,R5               GET ONE?
         BZ    PLHPRT
         BAL   R14,CONVERT
         MVC   KEYADR(8),UNPACK
         SR    R1,R1
         LH    R1,RPLKEYL          GET KEY LENGTH
         LTR   R1,R1               IS THERE AN RPL KEYLENGTH?
         BO    KEYPRT2             YES, USE IT
         L     R6,52(AMBLREG)      GET AMB
         L     R6,20(R6)           GET AMDSB
         SR    R1,R1
         LH    R1,8(R6)            GET AMDSB KEY LENGTH
KEYPRT2  LR    R0,R1
         BAL   R14,CONVERT
         MVC   KEYADR+24(4),UNPACK+4
         LR    R0,R5
         MVC   HEADER+1(66),KEYMSG
         BAL   R14,PRINT
**
***** PRINT PLH
**
PLHPRT   LR    R10,PLHREG          SAVE PLHREG
         TM    FLAG2,PLHX          DOES CALLER WANT THE PLH?
         BZ    AMBLPRT
         LA    R8,1                SET DEFAULT COUNT
         LA    R9,256(R0)          SET PLH DEFAULT LENGTH.
         ICM   R7,15,DAMB          DATA AMB POINTS TO PLH HEADER
         BZ    PLHPRT2
         L     R7,12(R7)
         CLI   0(R7),X'30'         DID WE GET THE PLH HEADER?
         BNE   PLHPRT3             NO, TAKE DEFAULT
         LH    R9,2(R7)            R9 NOW HAS THE LENGTH
         IC    R8,1(R7)            R8 HAS THE COUNT OF PLH'S
PLHPRT2  TM    FLAG2,ALLCB         WANT ALL PLH'S?
         BO    PLHPRT4             YES, GO AHEAD
         TM    FLAG1,PLHFLG        NEED PLH TO DO ONE.
         BZ    PLHPRT4             NO PLH, MUST DO ALL
         LA    R8,1                PRINT COUNT IS ONE.
         B     PLHLOOP             GO PRINT IT.
PLHPRT3  TM    FLAG1,PLHFLG        NEED PLH TO DO SINGLE
         BZ    AMBLPRT             CAN'T DO ALL OR SINGLE
PLHPRT4  L     R7,DAMB             DOING ALL PLH'S AT THIS POINT
         L     R7,12(R7)           GET PLH HEADER.
         LR    R0,R7
         BAL   R14,CONVERT
         MVC   PLHADR,UNPACK
         MVC   HEADER+1(24),PLHMSG
         LR    R1,R9
         LA    R1,16(R1)
         LA    PLHREG,16(R7)
         B     PLHLOOP3
PLHLOOP  LR    R0,PLHREG
         BAL   R14,CONVERT
         MVC   PLHADR(8),UNPACK
         MVC   HEADER+1(24),PLHMSG SET UP NON-'CURRENT' MESSAGE.
         CR    R10,PLHREG          IS THIS THE CURRENT PLH?
         BNE   PLHLOOP2            NO, PRINT THIS ONE
         MVC   HEADER+9(24),PLHMSG
         MVC   HEADER+1(8),CURRNT  SET UP 'CURRENT' MESSAGE
PLHLOOP2 LR    R1,R9               GET LENGTH OF PLH
PLHLOOP3 BAL   R14,PRINT
         ICM   PLHREG,7,113(PLHREG) POINT TO NEXT PLH.
         BZ    AMBLPRT
         BCT   R8,PLHLOOP
**
***** PRINT AMBL
**
AMBLPRT  LR    PLHREG,R10          RESTORE PLH REG
         TM    FLAG1,AMBLFLG       DO WE HAVE AN AMBL?
         BZ    NOAMBL              MUST HAVE TO GET OTHERS
         TM    FLAG2,AMBLX         WANT IT PRINTED?
         BZ    BUFFCPRT            NO, TRY NEXT.
         L     AMBLREG,AMBL        RESTORE AMBL REG
         LTR   R0,AMBLREG
         BZ    BUFFCPRT            NEED ADDRESS
         BAL   R14,CONVERT
         MVC   AMBLADR(8),UNPACK
         SR    R1,R1
         IC    R1,34(AMBLREG)      GET AMBL LENGTH
         MVC   HEADER+1(25),AMBLMSG
         BAL   R14,PRINT
         B     BUFFCPRT
NOAMBL   NC    FLAG1(4),=X'FFFAE0FF'  TURN OFF THOSE THAT CAN'T BE DONE
**
***** PRINT BUFFC
**
BUFFCPRT SR    R9,R9
         TM    FLAG2,BUFFCX        WANT BUFFC PRINTED?
         BZ    BUFFPRT
         NI    FLAG1,X'FF'-INDXPROC
         LR    R8,R9
         LR    R7,R8
         MVC   BUFFCMSG(5),DATA    SET UP DATA BUFFC MESSAGE.
         MVC   BUFCMSG1+8(5),DATA
         TM    FLAG2,ALLCB         ALLCB  GETS ALL BUFFC ALSO OR-
         BO    ALLBUFFC            NO PLH WAS FOUND.
         TM    FLAG2,DATACB        WANT DATA CONTROL BLOCKS?
         BZ    IBUFFCPT
         L     R0,52(PLHREG)
         LTR   R0,R0               GET BUFFC ADDRESS?
         BZ    IBUFFCPT            NO, TRY INDEX BUFFC
         BAL   R14,CONVERT
         MVC   BUFCADR1,UNPACK
         LA    R1,64(R0)           SET BUFFC LENGTH.
         MVC   HEADER+1(40),BUFCMSG1   SET 'CURRENT' MESSAGE
         BAL   R14,PRINT
IBUFFCPT L     R0,188(R2)          GET INDEX BUFC ADDR
         TM    FLAG2,INDEXCB       WANT INDEX CONTROL BLOCKS?
         BZ    BUFFPRT
         ICM   R0,15,188(R2)       GET INDEX BUFFC ADDRESS?
         BZ    BUFFPRT             NO, GO TO BUFFER PRINT.
         BAL   R14,CONVERT
         MVC   BUFCADR1,UNPACK
         LA    R1,64               GET LENGTH
         MVC   BUFCMSG1+8(5),INDEX
         MVC   HEADER+1(40),BUFCMSG1
         LA    R14,BUFFPRT         FAKE RETURN POINT
         B     PRINT
*
***** ROUTINE FOR PRINTING ALL BUFFC'S
*
ALLBUFFC TM    FLAG1,AMBLFLG       NEED AMBL TO DO ALL.
         BO    ALLBFC2
         NI    FLAG2,X'FF'-ALLCB   CAN'T DO ALL WITHOUT THE AMBL.
         B     BUFFCPRT            GO TRY CURRENT ONLY
ALLBFC2  SR    R10,R10
         NI    FLAG1,X'FF'-INDXPROC   WORKING ON DATA NOW
         TM    FLAG2,DATACB        WANT DATA CONTROL BLOCKS?
         BZ    ALLIBFC             NO, TRY ALL INDEX BUFFC
         MVC   BUFCHDR(5),DATA     SET UP MESSAGE FOR DATA.
         MVC   BUFFCMSG(5),DATA
         MVC   BUFCMSG1+8(5),DATA
         TM    FLAG1,PLHFLG        DO WE HAVE A CURRENT?
         BZ    *+8                 BR IF NO.
         L     R10,52(PLHREG)      YES, GET THE DATA BUFFC NOW IN USE
         L     R9,52(AMBLREG)
ALLBFC3  L     R9,8(R9)            GET BUFFC HEADER
         LA    R1,16               SET NORMAL BUFC LENGTH
         SR    R7,R7
         IC    R7,1(R9)            GET NORMAL BUFC COUNT
         CLI   0(R9),X'70'         IS THIS A NORMAL BUFC?
         BE    *+12                YES, CONTINUE
         LH    R7,12(R9)           GET BSPH BUFC COUNT
         LH    R1,2(R9)            SET BSPH LENGTH
         LR    R0,R9
         LA    R1,16
         BAL   R14,CONVERT
         MVC   BUFCHDRA(8),UNPACK
         MVC   HEADER+1(39),BUFCHDR
         BAL   R14,PRINT           GO PRINT THE BUFFC HEADER.
         CLI   0(R9),X'70'         NORMAL BUFC?
         BNE   *+12
         L     R9,12(R9)           POINT TO FIRST BUFFC
         B     BFCLOOP
         L     R9,16(R9)           POINT TO 1ST BUFC FROM BSPH
         B     BFCLOOP
ALLIBFC  OI    FLAG1,INDXPROC      DOING INDEX DATA NOW
         TM    FLAG2,INDEXCB       WANT INDEX BUFFC?
         BZ    BUFFPRT
         L     R10,188(PLHREG)     GET CURRENT BUFFC
         L     R9,56(AMBLREG)      NEED AMB.
         MVC   BUFCHDR(5),INDEX
         MVC   BUFFCMSG(5),INDEX
         MVC   BUFCMSG1+8(5),INDEX
         B     ALLBFC3
BFCLOOP  LR    R0,R9               ROUTINE FOR PRINTING MORE THAN ONE.
         LA    R1,60               SET BUFFC LENGTH.
         BAL   R14,CONVERT
         MVC   BUFCADR(8),UNPACK
         MVC   BUFCADR1,UNPACK
         MVC   HEADER+1(32),BUFFCMSG
         CR    R0,R10              IS THIS THE CURRENT BUFFC?
         BNE   BFCLOOP1            NO, JUST PRINT MESSAGE
         MVC   HEADER+1(40),BUFCMSG1
BFCLOOP1 BAL   R14,PRINT
         ICM   R9,15,48(R9)        GET NEXT BUFFC.
         BZ    BUFCEND             GET OUT IF CHAIN IS BROKE
         BCT   R7,BFCLOOP          DO IT AGAIN.
BUFCEND  TM    FLAG1,INDXPROC      ARE WE DOING INDEX?
         BZ    ALLIBFC             NO, THEN NOW DO INDEX BUFFC.
         NI    FLAG1,X'FF'-INDXPROC
*
***** PRINT BUFFERS
*
BUFFPRT  TM    FLAG3,BUFFX         WANT BUFFERS PRINTED?
         BZ    IOBPRT
         TM    FLAG1,RPLFLG
         BZ    IOBPRT
         NI    FLAG1,X'FF'-INDXPROC   WORKING ON DATA NOW
         SR    R9,R9
         SR    R8,R8
         SR    R7,R7
         TM    FLAG1,AMBLFLG
         BZ    DEFAULTD            TAKE THE DEFAULT
         L     R10,DAMB            GET DATA AMB
         L     R9,IAMB             GET INDEX AMB
         L     R10,20(R10)         GET DATA AMDSB
         L     R9,20(R9)           GET INDEX AMDSB
         CLI   0(R10),X'60'        DID WE GET THE DATA AMDSB?
         BNE   DEFAULTD            TAKE THE DEFAULT
         MVC   DBUFFLEN,20(R10)    GET BUFFER LENGTH
         CLI   0(R9),X'60'         GET THE INDEX AMDSB?
         BNE   DEFAULTI            TAKE THE DEFAULT
         MVC   IBUFFLEN,20(R9)     GET THE INDEX BUFFER SIZE
         B     BUFFPRT2
DEFAULTD MVC   DBUFFLEN,=X'00001000'
DEFAULTI MVC   IBUFFLEN,=X'00000400'
BUFFPRT2 TM    FLAG2,DATACB        CALLER WANT DATA BUFFER PRINTED?
         BZ    IBUFF               NO, TRY INDEX BUFFER
         NI    FLAG1,X'FF'-INDXPROC    DOING DATA BUFFER NOW.
         MVC   BUFFLEN,DBUFFLEN    SWAP IN DATA BUFFER LENGTH.
         MVC   BUFFMSG(5),DATA
         MVC   BUFFMSG1+8(5),DATA
         L     R10,DAMB            GET DATA AMB
         L     R7,8(R10)
         TM    FLAG2,ALLCB         PLHALL GETS ALL BUFFERS ALSO
         BO    ALLBUFF
         LTR   PLHREG,PLHREG       NEED PLH TO FIND BUFFER
         BZ    IBUFF               NO PLH, FORGET BUFFER
         L     R6,52(PLHREG)       GET BUFFC
BUFFPRT3 LTR   R10,R6              GET BUFFC ADDRESS?
         BZ    IBUFF               NO, FORGET BUFFER
         L     R10,20(R10)
         LTR   R0,R10              DID WE GET A BUFFER ADDRESS?
         BZ    IBUFF               NO, FORGET BUFFER
         L     R1,BUFFLEN
         BAL   R14,CONVERT
         MVC   BUFFADR1(8),UNPACK
         MVC   HEADER+1(41),BUFFMSG1
         TM    FLAG5,PAPSAVE       WANT PAPER SAVE OPTION?
         BZ    IBUFF-4             NO, GO PRINT WHAT WE HAVE
         CLI   0(R10),X'00'        IS BUFFER EMPTY?
         BNE   IBUFF-4             NO, GO PRINT IT.
         CLC   0(249,R10),1(R10)   IS COMPLETE BUFFER EMPTY?
         BNE   IBUFF-4             NO, GO PRINT IT.
         SR    R1,R1               SET UP FOR EMPTY PRINT.
         MVC   BUFEMADR,BUFFADR1   SET EMPTY MESSAGE
         XC    HEADER+1,HEADER+1
         MVC   HEADER+1(30),BUFEMSG
         BAL   R14,PRINT
IBUFF    TM    FLAG1,INDXPROC      HAVE WE BEEN HERE BEFORE?
         BO    IOBPRT
         OI    FLAG1,INDXPROC      WE ARE DOING INDEX NOW.
         TM    FLAG2,INDEXCB       DOES CALLER WANT INDEX BUFFERS?
         BZ    IOBPRT              NO, GET OUT.
         MVC   BUFFMSG(5),INDEX
         MVC   BUFFMSG1+8(5),INDEX
         MVC   BUFFLEN,IBUFFLEN    SWAP CI SIZE.
         L     R6,188(PLHREG)      GET BUFFC ADDR
         L     R10,IAMB            GET INDEX AMB
         L     R7,8(R10)
         TM    FLAG2,ALLCB
         BZ    BUFFPRT3            GO TO COMMON OR FALL TO ALLBUFF
**
***** ROUTINE FOR PRINTING ALL BUFFERS
*
ALLBUFF  XC    IBUFFC,IBUFFC
         XC    DBUFFC,DBUFFC
         TM    FLAG1,PLHFLG        NEED PLH IF WE ARE TO HAVE A CURRENT
         BZ    ALLBUFF2
         L     R9,188(PLHREG)
         MVC   IBUFFC,20(R9)       GET CURRENT BUFFER ADDRESS
         L     R9,52(PLHREG)
         MVC   DBUFFC,20(R9)       GET CURRENT BUFFER ADDRESS
ALLBUFF2 SR    R9,R9
         IC    R9,1(R7)            GET BUFC COUNT
         CLI   0(R7),X'72'         IS THIS A BSPH?
         BNE   BUFFLOOP-4          NO, GET GOOD BUFC POINTER
         LH    R9,12(R7)           GET BSPH BUFC COUNT
         L     R7,16(R7)           POINT TO FIRST BUFC
         TM    FLAG1,INDXPROC
         BZ    BUFFLOOP
         CLC   DBUFFLEN,IBUFFLEN   INDEX = DATA LEN, ALREADY DID INDEX
         BE    IOBPRT
         B     BUFFLOOP
         L     R7,12(R7)           POINT TO 1ST BUFC FROM NORMAL BUFCHD
BUFFLOOP ICM   R0,15,20(R7)        GET BUFFER ADDRESS
         BZ    BFFLOOP5            DIDN'T GET ONE, TRY NEXT
         L     R1,BUFFLEN          GET BUFFER LENGTH
         BAL   R14,CONVERT
         MVC   BUFFADR(8),UNPACK
         MVC   BUFFADR1(8),UNPACK
         C     R0,IBUFFC           DO WE HAVE THE CURRENT INDEX BUFFER?
         BE    BFFLOOP2
         C     R0,DBUFFC           DO WE HAVE THE CURRENT DATA BUFFER?
         BE    BFFLOOP2
         MVC   HEADER+1(33),BUFFMSG    GET NORMAL MESSAGE
         B     BFFLOOP3
BFFLOOP2 MVC   HEADER+1(41),BUFFMSG1   GET 'CURRENT' MESSAGE
BFFLOOP3 TM    FLAG5,PAPSAVE       WANT PAPER SAVE OPTION?
         BZ    BFFLOOP4            NO, PRINT WHAT WE HAVE
         LR    R14,R0
         CLI   0(R14),X'00'        LOOK LIKE EMPTY BUFFER?
         BNE   BFFLOOP4            NO, PRINT IT.
         CLC   0(249,R14),1(R14)   IS BUFFER EMPTY?
         BNE   BFFLOOP4            NO, GO PRINT IT.
         SR    R1,R1               SET 0 LENGTH.
         XC    HEADER+1,HEADER+1   CLEAR OUT OLD MESSAGE.
         MVC   BUFEMADR,BUFFADR
         MVC   HEADER+1(30),BUFEMSG
BFFLOOP4 BAL   R14,PRINT
BFFLOOP5 L     R7,48(R7)           GET NEXT BUFFC.
         BCT   R9,BUFFLOOP         DO IT AGAIN?
         B     IBUFF               FINISHED, IBUFF HAS EXIT CODE.
*
***** PRINT IOB
*
IOBPRT   LTR   PLHREG,PLHREG       NEED PLH TO PRINT IOB AND CPA
         BZ    PHASE3
         TM    FLAG3,IOBX          WANT IOB PRINTED?
         BZ    CPAPRT
         L     R0,76(PLHREG)       GET IOB ADDR
         LR    R9,R0
         BAL   R14,CONVERT
         MVC   IOBADR(8),UNPACK
         LA    R1,X'4C'            IOB LENGTH
         TM    STATUS,MVS          MVS?
         BZ    IOBPRT1
         MVC   IOBMSG(4),IOMB      MVS HAS AN IOMB
         LA    R1,X'78'            AND IT IS BIGGER
IOBPRT1  MVC   HEADER+1(25),IOBMSG
         BAL   R14,PRINT
         TM    STATUS,MVS          MVS?
         BZ    CPAPRT              NO, FORGET IOSB
         CLI   IOBMSG+2,C'S'       HAS IOSB MESSAGE BEEN GIVEN?
         BE    CPAPRT
         ICM   R0,15,36(R9)        GET IOSB ADDR FROM IOMB
         BZ    CPAPRT
         MVC   IOBMSG(4),IOSB
         LA    R1,84
         BAL   R14,CONVERT
         MVC   IOBADR(8),UNPACK
         B     IOBPRT1
*
***** PRINT CPA
*
CPAPRT   TM    FLAG3,CPAX          WANT CPA PRINTED?
         BZ    PHASE3
         OI    FLAG1,INDXPROC
         TM    FLAG2,INDEXCB       WANT INDEX CPA PRINTED?
         BZ    DCPAPRT
         ICM   R1,15,188(PLHREG)   BUFFC HAS INDEX CPA ADDRESS.
         BZ    DCPAPRT             BAD PLH-CPA POINTER, TRY DATA
         MVC   CPAMSG(5),INDEX
CPALOOP  L     R0,16(0,R1)         GET BUFC CPA AREA
         BAL   R14,CONVERT
         MVC   CPAADR(8),UNPACK
         LR    R1,R0
         CLI   0(R1),X'71'         IS THIS A CPA?
         BNE   DCPAPRT
         LH    R1,2(R1)            GET CPA LENGTH
         MVC   HEADER+1(53),CPAMSG
         BAL   R14,PRINT
DCPAPRT  TM    FLAG2,DATACB        WANT DATA CPA PRINTED?
         BZ    PHASE3
         TM    FLAG1,INDXPROC      BEEN HERE BEFORE?
         BZ    PHASE3
         NI    FLAG1,X'FF'-INDXPROC
         MVC   CPAMSG(5),DATA
         ICM   R1,15,52(PLHREG)    BUFFC HAS CPA ADDRESS
         BNZ   CPALOOP             GO PRINT IT.
**********************************************************************
*        END PHASE2 CODE                                             *
**********************************************************************
         EJECT
*********************************************************************
* PHASE 3 PRINTS AMB RELATED CONTROL BLOCKS.  SINCE THE PLH IS NO    *
* LONGER USED, THE PLHREG (R2) IS LOADED WITH THE ADDRESS OF THE AMB *
*********************************************************************
PHASE3   L     AMBLREG,AMBL        RESTORE THE AMBL REG
         ST    R4,RPLSAVE
*
***** PRINT AMB
*
AMBPRT   TM    FLAG3,AMBX          WANT AMB PRINTED?
         BZ    AMDSBPRT
         NI    FLAG1,X'FF'-INDXPROC
         TM    FLAG2,DATACB        WANT DATA AMB?
         BZ    IAMBPRT             NO, TRY INDEX AMB.
         MVC   AMBMSG(5),DATA
         L     AMBREG,DAMB         GET DATA AMB
AMBLOOP  CLI   0(AMBREG),X'40'     IS THIS AN AMB?
         BNE   IAMBPRT
         LR    R0,AMBREG
         BAL   R14,CONVERT
         MVC   AMBADR(8),UNPACK
         SR    R1,R1
         LH    R1,2(AMBREG)        GET AMB LENGTH.
         MVC   HEADER+1(30),AMBMSG
         BAL   R14,PRINT
IAMBPRT  TM    FLAG2,INDEXCB       WANT INDEX AMB?
         BZ    AMDSBPRT
         TM    FLAG1,INDXPROC      BEEN HERE BEFORE?
         BO    AMDSBPRT            YES, BRANCH
         OI    FLAG1,INDXPROC      WELL WE ARE HERE NOW.
         CLI   0(R6),X'60'         IS THIS AN AMDSB?
         MVC   AMBMSG(5),INDEX
         L     AMBREG,IAMB         GET INDEX AMB
         B     AMBLOOP
*
***** PRINT AMDSB
*
AMDSBPRT TM    FLAG3,AMDSBX        WANT AMDSB PRINTED?
         BZ    ICWAPRT
         NI    FLAG1,X'FF'-INDXPROC
         TM    FLAG2,DATACB        WANT DATA AMDSB?
         BZ    IAMDSB
         MVC   AMDSBMSG(5),DATA
         L     AMBREG,DAMB         GET DATA AMB
AMDSBLOP L     R6,20(AMBREG)       GET AMDSB
         CLI   0(R6),X'60'         GET AMDSB?
         BNE   IAMDSB
         LR    R0,R6
         BAL   R14,CONVERT
         MVC   AMDSBADR(8),UNPACK
         LH    R1,2(R6)            GET AMDSB LENGTH.
         MVC   HEADER+1(32),AMDSBMSG
         BAL   R14,PRINT
IAMDSB   TM    FLAG2,INDEXCB       WANT INDEX AMDSB PRINTED?
         BZ    ICWAPRT
         TM    FLAG1,INDXPROC      BEEN HERE BEFORE?
         BO    ICWAPRT
         OI    FLAG1,INDXPROC      HERE NOW.
         MVC   AMDSBMSG(5),INDEX
         L     AMBREG,IAMB         GET INDEX AMB
         B     AMDSBLOP
*
***** PRINT ICWA
*
ICWAPRT  TM    FLAG3,ICWAX         WANT ICWA, IMWA OR DIWA?
         BZ    ARDBPRT
         TM    FLAG2,INDEXCB       WANT ICWA?
         BZ    DIWAPRT
         L     AMBREG,IAMB         GET INDEX AMB
         L     R6,64(AMBREG)       GET ICWA
ICWA2    CLI   0(R6),X'42'         IS THIS AN IMWA?
         BE    IMWAPRT             YES, GO PRINT IT
         CLI   0(R6),X'43'         IS THIS AN ICWA?
         BNE   DIWAPRT             NO, NEITHER SO GET OUT.
         LR    R0,R6
         BAL   R14,CONVERT
         MVC   ICWAADR(8),UNPACK
         LH    R1,2(R6)            GET LENGTH
         MVC   HEADER+1(25),ICWAMSG
         B     ICWA3
IMWAPRT  LR    R0,R6
         BAL   R14,CONVERT
         MVC   IMWAADR(8),UNPACK
         LH    R1,2(R6)            GET LENGTH
         MVC   HEADER+1(25),IMWAMSG
ICWA3    BAL   R14,PRINT           GO PRINT WHAT EVER WE GOT
         ICM   R6,15,4(R6)         GET NEXT WHAT EVER
         BNZ   ICWA2               AND IF SOME THING THERE, GO PRINT IT
*
***** PRINT DIWA
*
DIWAPRT  TM    FLAG2,DATACB        WANT DIWA?
         BZ    ARDBPRT
         L     AMBREG,DAMB         GET DATA AMB
         L     R6,64(AMBREG)       GET DIWA
         LTR   R0,R6               DID WE GET ONE?
         BZ    ARDBPRT
         BAL   R14,CONVERT
         MVC   DIWAADR(8),UNPACK
         LH    R1,2(R6)            GET LENGTH
         MVC   HEADER+1(25),DIWAMSG
         BAL   R14,PRINT
*
***** PRINT ARDB
*
ARDBPRT  TM    FLAG3,ARDBX         WANT ARDB PRINTED?
         BZ    DEBPRT
         NI    FLAG1,X'FF'-INDXPROC
         TM    FLAG2,DATACB        WANT DATA ARDB?
         BZ    IARDB
         MVC   ARDBMSG(5),DATA
         L     AMBREG,DAMB         GET DATA AMB
ARDBLOOP L     R6,20(AMBREG)       GET AMDSB
         L     R6,36(R6)           GET ARDB
ARDBLOPP LTR   R0,R6               DO WE HAVE AN ADDRESS?
         BZ    IARDB
         CLI   0(R6),X'61'         IS THIS AN ARDB?
         BNE   IARDB
         BAL   R14,CONVERT
         MVC   ARDBADR,UNPACK
         LH    R1,2(R6)            GET LENGTH
         MVC   HEADER+1(31),ARDBMSG
         BAL   R14,PRINT
         L     R6,4(R6)            GET NEXT ARDB.
         B     ARDBLOPP
IARDB    TM    FLAG2,INDEXCB       WANT INDEX ARDB?
         BZ    EDBPRT
         TM    FLAG1,INDXPROC      BEEN HERE BEFORE?
         BO    EDBPRT
         OI    FLAG1,INDXPROC
         L     AMBREG,IAMB         GET INDEX AMB
         MVC   ARDBMSG(5),INDEX
         B     ARDBLOOP
*
***** PRINT EDB
*
EDBPRT   NI    FLAG1,X'FF'-INDXPROC
         TM    FLAG2,DATACB        WANT DATA EDB?
         BZ    IEDB
         L     AMBREG,DAMB         GET DATA AMB
         L     R6,52(AMBREG)
         MVC   EDBMSG(5),DATA
EDBLOOP1 CLI   0(R6),X'90'
         BNE   IEDB
         SR    R1,R1
         LR    R7,R1
         IC    R7,1(R6)            GET COUNT
         LA    R1,24(R0)           GET LENGTH
         LA    R6,8(R6)            POINT TO EDB.
EDBLOOP  LTR   R0,R6
         BZ    IEDB
         BAL   R14,CONVERT
         MVC   EDBADR,UNPACK
         MVC   HEADER+1(30),EDBMSG
         BAL   R14,PRINT
*
***** PRINT LPMB
*
LPMBPRT  EQU   *                   R6 HAS EDB ADDRESS
         L     R0,4(R6)            GET ADDRESS
         LR    R14,R0
         LH    R1,2(R14)           GET LENGTH
         BAL   R14,CONVERT
         MVC   LPMBADR,UNPACK
         MVC   HEADER+1(39),LPMBMSG
         BAL   R14,PRINT
         LA    R6,24(R6)           GET NEXT EDB ADDRESS
         BCT   R7,EDBLOOP          DO DATA OR INDEX TELL COUNT ZERO.
IEDB     TM    FLAG2,INDEXCB
         BZ    DEBPRT
         TM    FLAG1,INDXPROC      BEEN HERE BEFORE?
         BO    DEBPRT
         OI    FLAG1,INDXPROC
         L     AMBREG,IAMB         GET INDEX AMB
         L     R6,52(AMBREG)       GET EDB
         MVC   EDBMSG(5),INDEX
         B     EDBLOOP1
*
***** PRINT DEB
*
DEBPRT   TM    FLAG3,DEBX          WANT DEB?
         BZ    IICBPRT             NO, TRY IICB
         NI    FLAG1,X'FF'-INDXPROC
         TM    FLAG2,DATACB        WANT DATA DEB?
         BZ    IDEB
         MVC   DEBMSG(5),DATA
         L     AMBREG,DAMB         GET DATA AMB
DEBLOOP  ICM   R0,15,44(AMBREG)    GET THE DEB.
         BZ    IDEB                NO DEB ADDRESS, GET OUT
         SH    R0,=X'0024'
         LA    R1,100
         BAL   R14,CONVERT
         MVC   DEBADR,UNPACK
         MVC   HEADER+1(30),DEBMSG
         BAL   R14,PRINT
IDEB     TM    FLAG1,INDXPROC      BEEN HERE BEFORE?
         BO    IICBPRT             YES, FINISHED WITH DEB
         TM    FLAG2,INDEXCB       WANT INDEX DEB?
         BZ    IICBPRT             NO, TRY IICB
         OI    FLAG1,INDXPROC
         MVC   DEBMSG(5),INDEX
         L     AMBREG,IAMB         GET INDEX AMB
         B     DEBLOOP
*
***** PRINT IICB
*
IICBPRT  L     R4,RPLSAVE          GET RPL ADDRESS BACK
         CLI   RPLLEN,X'4C'        DO WE HAVE AN IICB?
         BNH   BSPHPRT             NO, TRY BSPH
         TM    FLAG5,IICBX         WANT IICB?
         BZ    BSPHPRT
         L     R5,76(RPLREG)       GET IICB ADDR.
         LTR   R0,R5
         BZ    BSPHPRT             NO IICB, DONE.
         SR    R1,R1
         LH    R1,2(R5)
         BAL   R14,CONVERT
         MVC   IICBADR,UNPACK
         MVC   HEADER+1(25),IICBMSG
         BAL   R14,PRINT
*
***** PRINT THE DCB
*
DCBPRT   L     R5,76(RPLREG)       GET IICB.
         L     R5,4(R5)            GET DCB.
         LTR   R0,R5
         BZ    BSPHPRT             NO, TRY BSPH
         LA    R1,70
         BAL   R14,CONVERT
         MVC   DCBADR,UNPACK
         MVC   HEADER+1(28),DCBMSG
         BAL   R14,PRINT           GO PRINT DCB
*
**** PRINT THE VAT
*
VATPRT   TM    FLAG4,VATX+VSRTX    WANT VAT OR VSRT?
         BZ    BSPHPRT             NO, TRY NEXT
         L     R7,16(R0)           GET CVT
         L     R7,0(R7)            TCB WORDS
         L     R7,4(R7)            TCB ADDRESS
         ICM   R7,15,180(R7)       GET JSCB FROM TCB
         BZ    BSPHPRT             NONE, EXIT
         ICM   R7,15,196(R7)       GET VAT FROM JSCBSHR
         BZ    BSPHPRT
         CLI   0(R7),X'11'         VAT ID?
         BNE   BSPHPRT
         ST    R7,VATADDR
         TM    FLAG4,VATX          WANT THE VAT?
         BZ    BSPHPRT             NO, TRY NEXT
VATLOOP  LR    R0,R7
         BAL   R14,CONVERT
         MVC   VATADR(8),UNPACK
         MVC   HEADER+1(24),VATMSG
         LH    R1,2(R7)            GET VAT LENGTH
         BAL   R14,PRINT
         ICM   R7,15,4(R7)         ANOTHER VAT?
         BNZ   VATLOOP             PRINT THE NEXT VAT
*
**** PRINT BSPH
*
BSPHPRT  NI    FLAG1,X'FF'-INDXPROC
         L     AMBREG,DAMB
         TM    84(AMBREG),X'60'    LSR OR GSR?
         BZ    VSRTPRT             NO, THEN NO BSPH
         TM    FLAG4,BSPHX         DO WE WANT BSPH?
         BZ    VSRTPRT             NO, DO NEXT
         TM    FLAG2,DATACB        WANT DATA BSPH?
         BZ    IBSPHPRT            NO, TRY INDEX
         MVC   BSPHMSG(5),DATA     SET DATA MESSAGE
BSPHLOOP L     R5,8(AMBREG)
         CLI   0(R5),X'72'         DO WE HAVE A BSPH?
         BNE   IBSPHPRT            NO, TRY INDEX SIDE.
         LR    R0,R5
         LH    R1,2(R5)            GET BSPH LENGTH
         BAL   R14,CONVERT
         MVC   BSPHADR(8),UNPACK
         MVC   HEADER+1(31),BSPHMSG
         BAL   R14,PRINT
IBSPHPRT TM   FLAG1,INDEXCB        WANT INDEX SIDE?
         BZ    VSRTPRT             NO, TRY NEXT
         TM    FLAG1,INDXPROC      BEEN HERE BEFORE?
         BO    VSRTPRT             YES, EXIT
         OI    FLAG1,INDXPROC
         MVC   BSPHMSG(5),INDEX    SET MESSAGE FOR INDEX
         ICM   AMBREG,15,IAMB
         BZ    VSRTPRT             NO INDEX AMB, NO INDEX BSPH
         B     BSPHLOOP
*
**** PRINT VSRT
*
VSRTPRT  TM    FLAG4,VSRTX         WANT VSRT?
         BZ    BIBPRT              NO, TRY NEXT
         L     R5,DAMB
         TM    84(R5),X'80'        GSR OR LSR?
         BO    VSRTPRT1            GO TO GSR CODE
         ICM   R5,15,VATADDR       GET VAT ADDRESS (FROM VATPRT)
         BZ    BIBPRT
         LA    R5,12(R5)
         LA    R10,2
         B     VSRTLOOP+4
VSRTPRT1 L     R5,16(R0)           GET CVT ADDRESS
         ICM   R5,15,256(R5)       GET AMCBS
         BZ    BIBPRT              NO AMCBS, NO VSRT
         LA    R5,28(R5)           POINT TO FIRST VSRT
         LA    R10,7               COUNT OF VSRT ENTRIES
VSRTLOOP LA    R5,8(R5)            POINT TO NEXT VSRT
         BCT   R10,*+8
         B     BIBPRT              VSRT PRINT EXIT POINT
         ICM   R6,15,0(R5)         GET FIRST VSRT (OR VAT) ENTRY
         BZ    VSRTLOOP            NO ENTRY, TRY NEXT
         LR    R0,R6
         BAL   R14,CONVERT
         MVC   VSRTADR(8),UNPACK
         LH    R1,2(R6)
         MVC   HEADER+1(25),VSRTMSG
         BAL   R14,PRINT
         B     VSRTLOOP
*
**** PRINT THE BIB
*
BIBPRT   TM    FLAG4,BIBX+UPTX+HEBX DO WE NEED THE BIB AT ALL?
         BZ    SUBEXIT
         L     R5,AMBL
         ICM   R5,15,60(R5)        GET BIB ADDRESS
         BZ    SUBEXIT             NO BIB, NO UPT OR HEB
         CLI   0(R5),X'10'         IS IT A BIB?
         BNE   SUBEXIT             SAME AS ABOVE
         TM    FLAG4,BIBX          WANT BIB?
         BZ    UPTPRT              NO, TRY UPT
         LR    R0,R5
         BAL   R14,CONVERT
         MVC   BIBADR(8),UNPACK
         MVC   HEADER+1(24),BIBMSG
         LH    R1,2(R5)
         BAL   R14,PRINT           GO PRINT THE BIB
UPTPRT   TM    FLAG4,UPTX          WANT UPT
         BZ    HEBPRT
         ICM   R6,15,8(R5)         GET UPT ADDRESS
         BZ    HEBPRT              NONE, EXIT
         LR    R0,R6
         BAL   R14,CONVERT
         MVC   UPTADR(8),UNPACK
         MVC   HEADER+1(24),UPTMSG
         LH    R1,2(R6)            SET UPT LENGTH
         BAL   R14,PRINT
HEBPRT   TM    FLAG4,HEBX          WANT THE HEB?
         BZ    SUBEXIT             NO, EXIT
         ICM   R6,15,32(R5)        GET HEB FROM BIB
         BZ    SUBEXIT
HEBLOOP  LR    R0,R6
         BAL   R14,CONVERT
         MVC   HEBADR(8),UNPACK
         MVC   HEADER+1(24),HEBMSG
         LH    R1,2(R6)            SET LENGTH
         BAL   R14,PRINT
         ICM   R6,15,4(R6)         MORE HEBS?
         BNZ   HEBLOOP             YES, DO NEXT ONE.  OTHERWISE, FINISH
*
**** EXIT ROUTINE DETERMINES IF THERE IS AN AIX TO DO
*
SUBEXIT  TM    FLAG5,AIXX          WANT AIX STUFF CHECK
         BZ    EXIT1
         TM    AIXOPT,AIXONE       SINGLE DATA SET TRACE?
         BO    EXIT1
         TM    STATUS2,AIXDONE     HAVE WE DONE THE AIX?
         BZ    SUBEXIT2            NO, GO TRY IT
         TM    STATUS2,BASEDONE    HAVE WE DONE THE BASE?
         BO    SUBEXIT3            YES, TRY UPG'S
SUBEXIT1 TM    STATUS2,SWAPED      AIX'S BASE SWAP CODE
         BZ    *+8
         BAL   R14,SWAP
         OI    STATUS2,SWAPED+BASEDONE
         ICM   R7,15,232(PLHREG)   GET WAX ADDRESS FROM AIX PLH
         BZ    AIXERROR
         LR    R0,R7
         BAL   R14,CONVERT
         MVC   WAXADR,UNPACK
         MVC   HEADER+1(47),WAXMSG
         MVC   HEADER+50(30),SVCADR+8
         LH    R1,2(R7)            SET WAX LENGTH
         BAL   R14,PRINT           PRINT WAX AND TELL OF SWAP
         L     RPLREG,8(R7)        GET BASE RPL FROM WAX
         L     ACBREG,24(RPLREG)   GET BASE ACB
         L     AMBLREG,4(ACBREG)   GET BASE ACB
         ICM   PLHREG,15,28(R7)    GET PLH FROM WAX
         BNZ   *+8
         L     PLHREG,4(RPLREG)    NOT IN WAX, GET FROM RPL
         BAL   R14,AMBLSTOR
         B     ACBPRT              START PRINT OF AIX'S BASE DS
SUBEXIT2 ICM   R7,15,24(AMBLREG)   SWAP BASE TO AIX CODE.
         BNZ   SUBEXT2A
         ICM   R7,15,232(PLHREG)   TRY OTHER DOOR FOR AIX
         BZ    SUBEXIT3
         ICM   R7,15,232(R7)       TRY FOR WAX
         BZ    SUBEXIT3
         CLI   0(R7),X'73'         WAX?
         BNE   SUBEXIT3
         ICM   R7,15,12(R7)        TRY FOR USERS RPL
         BZ    SUBEXIT3
         L     R7,24(R7)           AIX ACB
         L     R7,4(R7)            AIX AMBL
SUBEXT2A BAL   R14,SWAP            PUT REAL PARM LIST BACK
         NI    STATUS2,X'FF'-SWAPED
         MVC   HEADER+1(38),AIXMSG
         MVC   HEADER+42(34),SVCADR+8
         SR    R1,R1
         BAL   R14,PRINT
         LR    AMBLREG,R7
         BAL   R14,AMBLSTOR        GET AIX AMBL
         L     PLHREG,232(PLHREG)  GET AIX PLH
         L     RPLREG,16(PLHREG)   GET AIX RPL
         L     ACBREG,24(RPLREG)   GET AIX ACB
         OI    STATUS2,AIXDONE
         B     ACBPRT
SUBEXIT3 TM    AIXOPT,AIXNOUPG     SWAP WHAT EVER TO UPGRADE PRINT
         BO    EXIT1               DOESN'T WANT UPG
         ICM   R7,15,UPGPTR        ARE WE ALREADY DOING A UPG?
         BNZ   SUBEXIT5
         ICM   R7,15,60(AMBLREG)   GET THE BIB
         BZ    SUBEXIT4            NO BIB, TRY OTHER AMBL
         ICM   R7,15,8(R7)         IS THERE A UPG TABLE?
         BNZ   SUBEXIT5            YES, PROCESS IT
SUBEXIT4 ICM   AMBLREG,15,24(AMBLREG)   IS THERE ANOTHER AMBL?
         BZ    EXIT1               NO, NO UPG TO DO.
         ICM   R7,15,60(AMBLREG)
         ICM   R7,15,8(R7)         DOES THIS AMBL HAVE A UPG TABLE
         BZ    EXIT1               NO, NO UPG'S
SUBEXIT5 ST    R7,UPGPTR
         SR    R8,R8
         IC    R8,UPGCOUNT
         LA    R8,1(R8)
         STC   R8,UPGCOUNT
         CLC   UPGCOUNT,13(R7)     HAVE WE DONE ALL THE UPGS?
         BH    EXIT1               YES, EXIT
         TM    STATUS2,SWAPED
         BO    *+12
         BAL   R14,SWAP
         OI    STATUS2,SWAPED
         IC    R9,TABLE(R8)
         STC   R9,UPGCNT+19
         MVC   HEADER+1(67),UPGMSG
         MVC   HEADER+70(28),SVCADR+8
         SR    R1,R1
         BAL   R14,PRINT
         LA    R7,88(R7)           R7 POINT TO FIRST UPG TABLE ENTRY
SUBEXIT6 BCT   R8,*+8
         B     SUBEXIT7
         LA    R7,12(R7)           POINT TO NEXT UPG TABLE ENTRY
         B     SUBEXIT6
SUBEXIT7 L     RPLREG,0(R7)        GET UPG RPL
         L     ACBREG,24(RPLREG)   GET UPG ACB
         L     AMBLREG,4(ACBREG)   GET UPG AMBL
         BAL   R14,AMBLSTOR
         ICM   PLHREG,15,4(RPLREG) GET UPG PLH
         BNZ   SUBEXIT8
         NI    FLAG1,X'FF'-PLHFLG
SUBEXIT8 B     ACBPRT
*
SWAP     XC    FLAG2(3),AIXIN      SWAP REAL PARM LIST AND AIX LIST
         XC    AIXIN(3),FLAG2
         XC    FLAG2(3),AIXIN
         BR    R14
**********************************************************************
*        END PHASE3 CODE                                             *
**********************************************************************
         EJECT
***********************************************************************
* PHASE 4 IS USED TO PRINT CATALOG MANAGEMENT CONTROL BLOCKS.         *
***********************************************************************
         SPACE   3
PHASE4   STM   R3,R4,CATREGS
         TM    CFLAG1,CATPARM      IS THERE A PARM LIST?
         BO    CPARMOK
CATPROMT LA    R1,CATFOUND         SPECIAL CONDITION.  NEED CAT PARM LI
         BAL   R14,PROMPT          GO GET IT
         OI    CFLAG1,SETCAT
         B     PARMPMT1
CPARMOK  LM    R3,R4,CATREGS
         TM    CFLAG3,CATCODE      IS THIS A CONDITIONAL PRINT?
         BZ    CDDCHECK            GO SEE IF WE NEED A DDNAME.
CATCOND  CLI   CATCDE,X'00'        IS THIS A 'ANY' CONDITION?
         BE    ANYERROR
         CLC   CATCDE,7(CCAREG)    IS SUPPLIED ERROR = TO CCA ERROR?
         BNE   EXIT1               NO, NO CB PRINT
         B     CDDCHECK            YES, CONTINUE
ANYERROR CLI   7(CCAREG),X'00'
         BE    EXIT1               EXIT, CCA +7 SHOWS NO ERROR.
CDDCHECK CLI   CDDNAME,X'00'       NEED TO CHECK CATALOG DDNAME?
         BE    CATCHK              NO, BRANCH OUT.
         TM    CFLAG1,CCAFLG       DO WE HAVE A CCA?
         BZ    CPLACB              NO, NEED TO GET ACB FROM CPL
         ICM   R5,15,32(CCAREG)    DOES CCA HAVE ACB POINTER?
         BZ    CPLACB              NO, CHECK CPL
         B     CATACBCK
CPLACB   TM    CFLAG1,CPLFLG       HAVE CPL?
         BZ    NODD                NO, CAN'T FIND ACB TO CHECK DDNAME
         ICM   R5,15,8(CPLREG)     GET CPL ACB POINTER
         BZ    NODD
         CLI   0(R5),X'A0'         ACB?
         BNE   NODD
CATACBCK L     R6,TIOTADR
         AH    R6,40(R5)           GET TIOT OFFSET
         CLC   4(8,R6),CDDNAME     CORRECT DDNAME?
         BNE   EXIT1
         B     CATCHK
NODD     OI    CFLAG1,NODDNAME
CATCHK   LA    R14,CREGPRT         DUMMY RETURN POINT
         BAL   R14,OPENDCB
         NI    CFLAG1,X'FF'-NODDNAME
         LM    R3,R4,CATREGS
*
***** PRINT CATALOG MANAGEMENT REGISTERS
*
CREGPRT  TM    CFLAG2,CREG         WANT REGS PRINTED?
         BZ    CCAPRT              NO, TRY CCA NEXT
         MVC   HEADER+1(51),REGMSG
         LA    R1,64               X'40' BYTES FOR REG PRINT
         L     R0,WORK4            GET ADDRESS OF THE SAVED REGS
         BAL   R14,PRINT
*
***** PRINT THE CCA
*
CCAPRT   TM    CFLAG1,CCAFLG       DO WE HAVE A CCA?
         BZ    CPLPRINT            NO, TRY CPL NEXT
         TM    CFLAG2,CCA          WANT CCA?
         BZ    RABPRT              NO, TRY RAB'S NEXT
         LR    R0,CCAREG
         SR    R1,R1
         LH    R1,2(CCAREG)        GET CCA LENGTH
         LA    R14,3072            LENGTH OF 6 RABS
         SR    R1,R14              SET NEW CCA LENGTH
         BAL   R14,CONVERT
         MVC   CCAADR,UNPACK
         MVC   HEADER+1(24),CCAMSG
         BAL   R14,PRINT
*
***** PRINT EITHER ONE RAB OR THE BUNCH
*
RABPRT   TM    CFLAG2,RABALL       WANT ALL RABS PRINTED?
         BZ    RAB1
         ICM   R0,15,92(CCAREG)    GET FIRST RAB POINTER
         BZ    CPLPRINT
         LA    R1,3072             SET THE LENGTH OF 6 RABS
         MVC   HEADER+1(27),RABMSG
         B     RAB2                PRINT AND OUT
RAB1     TM    CFLAG2,RAB          WANT JUST CURRENT RAB PRINTED?
         BZ    CPLPRINT            NO, DO CPL NEXT
         ICM   R1,15,40(CCAREG)    GET CURRENT RAB POINTER
         BZ    CPLPRINT            NO, TRY CPL NEXT
         ICM   R1,15,4(R1)         GET BUFFER ADDRESS
         BZ    CPLPRINT
         LR    R0,R1
         LA    R1,512              SET BUFFER LENGTH
         MVC   HEADER+1(11),CRABMSG
RAB2     BAL   R14,PRINT
*
***** PRINT THE CPL
*
CPLPRINT TM    CFLAG1,CPLFLG       DO WE HAVE A CPL ?
         BZ    CAXWAPRT            NO, SKIP IT
         TM    CFLAG2,CPL          WANT CPL?
         BZ    CPLFLD
         LR    R0,CPLREG
         BAL   R14,CONVERT
         MVC   CPLADR,UNPACK
         SR    R7,R7
         IC    R7,19(CPLREG)       GET LENGTH
         SLL   R7,2                X 4
         LA    R1,28               STANDARD LENGTH OF CPL
         AR    R1,R7               ADD IN VARIABLE LENGTH
         MVC   HEADER+1(24),CPLMSG
         BAL   R14,PRINT
*
***** PRINT THE COMPLETE CPL
*
CPLFLD   TM    CFLAG3,CPLFIELD     WANT COMPLETE FIELDS?
         BZ    FVTPRT
         ICM   R0,15,4(CPLREG)
         BZ    CPLCAT              NO CTGENT FIELD.
         MVC   HEADER+1(19),CTENTMSG
         LA    R1,50               GET A LENGTH LARGE ENOUGHT TO HANDLE
         BAL   R14,PRINT
CPLCAT   ICM   R0,15,8(CPLREG)     DO WE HAVE CTGCAT?
         BZ    CPLDDN              NO, TRY NEXT.
         MVC   HEADER+1(19),CTGCTMSG
         LA    R1,44               GET A NORMAL LENGTH
         TM    0(CPLREG),X'02'     IS CTGCAT AN ACB ADDRESS?
         BZ    *+8                 NO, GOT GOOD LENGTH
         LA    R1,76               SET ACB LENGTH
         BAL   R14,PRINT
CPLDDN   ICM   R0,15,20(CPLREG)    GET CPLDDN
         BZ    FVTPRT              NONE, GET OUT.
         MVC   HEADER+1(19),CTGDDMSG
         LA    R1,44               STANDARD LENGTH
         BAL   R14,PRINT
         B     EXIT1               FINISHED
*
***** PRINT THE FVT IF REQUEST HAS ONE
*
FVTPRT   TM    CFLAG1,FVTTYPE      FVT TYPE OF CPL?
         BZ    FPLPRT
         TM    CFLAG2,FVT          WANT FVT?
         BZ    CAXWAPRT            NO, NO FPL EITHER SINCE FVT TYPE.
         ICM   R5,15,4(CPLREG)     GET PRIMARY FVT
         BZ    CAXWAPRT
         BAL   R10,FVTPRINT        GO PRINT FVT.
         BAL   R10,FVTFPL          GO PRINT THE FVT'S FPLS
         L     R5,4(CPLREG)        GET PRIMARY FVT.
         L     R5,4(R5)            GET THE NEXT FVT
         BAL   R10,FVTPRINT
         BAL   R10,FVTFPL
         L     R5,4(CPLREG)        GET PRIMARY FVT
         L     R5,8(R5)            GET NEXT FVT
         BAL   R10,FVTPRINT
         BAL   R10,FVTFPL
         B     CAXWAPRT
*
***** FVT SUBROUTINE THAT PRINTS FVT POINTED TO BY REG 5.
*
FVTPRINT LTR   R0,R5               HAVE ADDRESS?
         BNZ   *+10
         LA    R10,4(R10)          SET ERROR EXIT
         BR    R10                 RETURN
         BAL   R14,CONVERT
         MVC   FVTADR,UNPACK
         LA    R1,72(R0)           SET FVT LENGTH
         MVC   HEADER+1(38),FVTMSG
         ICM   R14,15,20(R5)       PICK UP ENTRY NAME
         BZ    *+10
         MVC   HEADER+39(44),0(R14)
         LR    R14,R10             DUMMY PRINT RETURN
         B     PRINT
*
***** FVT SUBROUTINE USED TO PRINT ALL THE FPLS POINTED TO BY THE FVT.
*
FVTFPL   LA    R5,24(R5)           POINT TO FIRST FVY-FPL ADDRESS
         L     R6,0(R5)            GET FPL ADDRESS
         LA    R7,4(R0)            COUNT OF CONSEQUITIVES FPLS
         BAL   R9,FVTFPLLP         GO DO PRINT
         LA    R5,4(R5)            POINT TO FIRST SET OF FPLS
         L     R6,0(R5)            PICK UP ADDRESS
         LA    R7,7                COUNT OF CONSEQUITIVE FPLS
         LR    R9,R10              DUMMY RETURN
FVTFPLLP LTR   R0,R6               DO WE HAVE AN FPL?
         BZ    FVTFPLNX            TRY NEXT FVT-FPL POINTER
         CLI   0(R6),X'08'         DUMMY FPL?
         BH    FVTFPLNX            YES, TRY NEXT FVT-FPL POINTER
         BAL   R15,FPLPRINT        GO PRINT FPL
FVTFPLNX LA    R5,4(R5)            POINT TO NEXT SET OF FPLS
         L     R6,0(R5)            PICK UP ADDRESS
         BCT   R7,FVTFPLLP         TRY NEXT FPL POINTER
         BR    R9                  DONE, RETURN
*
***** FPL PRINT ROUTINE
*
FPLPRT   TM    CFLAG1,FVTTYPE      FVT TYPE OF FPL?
         BO    CAXWAPRT            YES, NO PRINT VIA FPL.  MUST USE FVT
         TM    CFLAG2,FPL          WANT FPL?
         BZ    CAXWAPRT
         SR    R10,R10
         ICM   R10,1,19(CPLREG)    GET FPL COUNT
         BZ    CAXWAPRT            NO COUNT, SPECIAL OPEN CALL
         LA    R6,28(CPLREG)       R6 POINTS TO FIRST FPL POINTER
FPLPRTLP ST    R6,WORK7            SAVE CURRENT FPL POINTER
         L     R6,0(R6)            POINT TO AN FPL
         BAL   R15,FPLPRINT        GO PRINT FPL
         L     R6,WORK7            RESTORE R6
         LA    R6,4(R6)            GET NEXT FPL ADDRESS
         BCT   R10,FPLPRTLP        DO IT AGAIN
         B     CAXWAPRT            DONE WITH FPLS
FPLPRINT LTR   R0,R6               DID CALLER PROVIDE AN FPL ADDRESS?
         BZR   R15                 NO, RETURN
         BAL   R14,CONVERT
         MVC   FPLADR,UNPACK
         SR    R14,R14
         IC    R14,0(R6)           GET WORK AREA COUNT
         LR    R8,R14              SET COUNT FOR LOOP
         SLA   R14,3(R0)           TIMES 8.
         LA    R1,16(R0)           SET BASE LENGTH
         AR    R1,R14              FINIAL LENGTH
         MVC   HEADER+1(24),FPLMSG
         BAL   R14,PRINT
         CLI   0(R6),X'00'         IS THERE AT LEAST ONE FIELD NAME?
         BE    FPLPRNT2+4          NO, TRY FOR TEST FPL
         ICM   R0,15,8(R6)         GET FIELD NAME
         BZ    FPLFIELD            NONE, TRY WORK AREA.
         BAL   R14,CONVERT
         MVC   FPLNMADR(8),UNPACK
         LR    R1,R0
         MVC   FPLNAME1(8),0(R1)   MOVE IN FIELD NAME
         LA    R1,0                SET UP FOR JUST HEADER PRINT
         MVC   HEADER+1(69),FPLNAME
         BAL   R14,PRINT
FPLFIELD LA    R8,1(R8)            R8 HAS COUNT OF WORK AREA POINTERS
         LA    R2,16(R6)           R2 POINTS TO FIRST FIELD (WORK AREA)
FPLPRNT2 BCT   R8,FPLPRNT3         DO WHILE COUNT OF FIELDS IS VALID
         ICM   R6,15,12(R6)        IS THERE A TEST FPL?
         BZR   R15                 NO, RETURN
         B     FPLPRINT            YES, GO PRINT IT
         BR    R15                 NO MORE, RETURN
FPLPRNT3 ICM   R0,15,4(R2)         GET FIELD ADDRESS
         BZR   R15
         BAL   R14,CONVERT
         MVC   FPLWKADR,UNPACK
         MVC   HEADER+1(36),FPLWORK
         L     R1,0(R2)            GET WORK AREA LENGTH
         LA    R2,8(R2)            SET FOR NEXT WORK AREA
         LA    R14,FPLPRNT2        DUMMY RETURN
         B     PRINT
*
*****  PRINT CAXWA
*
CAXWAPRT TM    CFLAG1,CCAFLG       NEED CCA
         BZ    CEXIT               NO, DONE
         ICM   R5,15,32(CCAREG)    GET ACB ADDRESS
         BZ    CMSPRT              NO ADDRESS, GET OUT
         TM    CFLAG2,CAXWA        WANT CAXWA?
         BZ    CMSPRT              NO, DONE
         L     R5,64(R5)           GET CAXWA
         CLI   0(R5),X'CA'         CAXWA?
         BNE   CMSPRT              NO, DONE
         LR    R0,R5
         BAL   R14,CONVERT
         MVC   CAXWAADR,UNPACK
         LA    R1,108(R0)          SET CAXWA LENGTH
         MVC   HEADER+1(26),CAXWAMSG
         BAL   R14,PRINT
*
***** PRINT THE CMS WORK AREA
*
CMSPRT   TM    CFLAG3,CMSWA
         BZ    CEXIT
         ICM   R0,15,316(CCAREG)   GET 1ST CMS WORK AREA POINTER
         BZ    CMSPRT3
CMSPRT2  BAL   R14,CONVERT
         MVC   CMSADR(8),UNPACK
         MVC   HEADER+1(25),CMSMSG
         LA    R1,100
         BAL   R14,PRINT
CMSPRT3  ICM   R0,15,320(CCAREG)
         BNZ   CMSPRT2
*
CEXIT    NI    CFLAG1,X'0F'        TURN OFF FOUND FLAGS
         B     EXIT1
**********************************************************************
*        END CATALOG PRINT CODE                                      *
**********************************************************************
**********************************************************************
         EJECT
**********************************************************************
********* CONVERT ADDRESS IN REG 0 TO PRINTABLE CHARACTERS ***********
**********************************************************************
         SPACE 1
CONVERT  EQU   *
         ST    R0,UNPACK
         UNPK  UNPACK(9),UNPACK(5)
         TR    UNPACK(8),TABLE-240
         BR    R14
         SPACE 3
**********************************************************************
* REG1 POINTS TO A MESSAGE WHICH THIS ROUTINE WILL WRITE TO THE      *
* OPERATOR (WTOR).  AFTER THE WAIT IS POSTED, 'REPLY' CONTAINS THE   *
* INPUTED DATA.                                                      *
**********************************************************************
PROMPT   STM   4,7,HOLDREGS        SAVE WORKING REGS
         SR    R7,R7
         LH    R7,0(0,R1)          GET MESSAGE LENGTH
         STH   R7,MSGLNG
         SH    R7,=X'0004'
         XC    MESSAGES,MESSAGES   CLEAR OUT MESSAGE AREA
         XC    REPLY,REPLY         CLEAR OUT REPLY AREA
         EX    R7,MOVEMSG          MOVE MESSAGE TO OUTPUT AREA
         L     R6,ROUTCDE
         ST    R6,MESSAGES(R7)     STORE THE ROUTE CODE
         LA    R1,REPLYMSG         R1 HAS WTO PARM LIST
         LA    R6,REPLY
         STCM  R6,7,REPLYIN
         XC    ECB,ECB
         LA    R6,ECB
         ST    R6,REPLYECB
         SVC   35                  WTO SVC
         WAIT  1,ECB=ECB
         LM    4,7,HOLDREGS
         BR    R14
MOVEMSG  MVC   MESSAGES(0),2(R1)
         EJECT
**********************************************************************
* RESET1 IS CALLED THE 1ST TIME IDATRACE IS ENTERED.  IT PUT OUT THE *
* RESET MESSAGE.  RESET2 IS CALLED IF THE CORE LOCATION IN THE RESET *
* MESSAGE IS ALTERED.  IT CLEANS EVERYTHING UP WHICH WILL CAUSE      *
* THE NEXT ENTRY TO CALL RESET1                                      *
**********************************************************************
RESET2   TS    LOCK                SEE IF WE ARE ALREADY HERE
         BNZ   EXIT3               YES, GET OUT
         L     R10,RFLAG1
         XC    0(16,R10),0(R10)    CLEAR OUT THE PARM LIST
         TM    TRACE+48,X'10'      IS DCB OPEN?
         BZ    RESET2A
         CLOSE (TRACE)
RESET2A  CLI   RESET,X'11'         DETERMINE THE TYPE OF RESET.
         BNE   *+8
         OI    264(R3),X'20'       SET SUPER RESET ON IN CVT.
         TM    STATUS,MVS          IS THIS MVS?
         BZ    RESET2E
         ICM   R8,15,BUFFCORE
         BZ    RESET2B
         FREEMAIN E,LV=53600,A=BUFFCORE,SP=241
RESET2B  LA    R9,CORE
         LA    R7,10               START TO FREE WORKAREA CORE.
RESET2C  ICM   R8,15,0(R9)         ANY CORE TO FREE?
         BZ    RESET2D
         CLI   0(R9),X'FF'         IS THIS CORE IN USE?
         BE    RESET2D             YES, CAN'T FREE IT.
         FREEMAIN E,LV=GETEND-SAVE,A=(R9),SP=241
RESET2D  LA    R9,4(R9)
         BCT   R7,RESET2C          TRY NEXT CORE
RESET2E  MVI   STATUS,X'00'
         XC    FLAG(WORKSAVE-FLAG),FLAG RESET ALL CONTROL FLAGS
         MVI   RESET,X'00'         CLEAR AND FALL TO RESET1 TO RESTART
         TM    264(R3),X'20'       SUPER RESET? R3=CVT
         BO    EXIT4               YES, GET OUT FOR GOOD
RESET1   TM    116(R3),X'10'       IS THIS MVS? (R3=CVT FROM SVCFLIH)
*
**** NOTE; THE FOLLOWING BRANCH HAS BEEN CHANGED FOR A 'BZ' TO A 'B'
****       SO THIS PROGRAM WILL GET STORAGE FROM SUBPOOL 0 INSTEAD
****       OF SUBPOOL 241 AS NEEDED IN MVS.   JACK PARKER 2/22/79
*
         B     NOTMVS              NO, DON'T BOTHER WITH PGFIX.
         OI    STATUS,MVS
NOTMVS   LA    R0,RESET
         BAL   R14,CONVERT
         MVC   RESETMSG+29(6),UNPACK+2
         LA    R1,MSGLNG           R1 HAS WTO PARM LIST
         MVC   MSGLNG(2),RESETMSG  GET THE MESSAGE LENGTH
         MVC   MESSAGES(77),RESETMSG+2
         SVC   35
         OI    FLAG,RESETFLG       MESSAGE ISSUED
JOBPMT   LA    R1,JOBPRMT          GO GET JOB NAME TO TRACE
         BAL   R14,PROMPT
         MVC   JOBNAME(8),REPLY
         LA    R6,8                SET COUNT FOR JOB NAME EDIT
         LA    R7,JOBNAME
JOBLOOP  CLI   0(R7),X'00'         IF BYTE IS 00, CHANGE TO 40
         BNE   *+8
         MVI   0(R7),X'40'
         LA    R7,1(R7)
         BCT   R6,JOBLOOP
         B     RESTART             NOW SEE IF THIS IS THE CORRECT JOB.
         SPACE 3
**********************************************************************
* PACKER TAKES THE DATA IN 'REPLY' AND CONVERTS THE 8 BYTES OF       *
* EBCDIC TO 4 BYTES OF HEX.  FOR INSTANCE, X'C6C5F1F2F3F4F5F6' IN    *
* REPLY WOULD BECOME X'FE12345600000000' IN REPLY.                   *
**********************************************************************
PACKER   LA    R7,REPLY            START ADDRESS
         SR    R8,R8
         LA    R6,10               LOOP COUNT
PACKERL  TM    0(R7),X'FF'         IS THIS BYTE BLANK?
         BZ    PACKERE             YES, DON'T TRANSLATE
         TM    0(R7),X'30'         IS BYTE NUMERIC?
         BO    PACKERN
         NI    0(R7),X'0F'         STRIP OFF ALPA ZONE
         TR    0(1,R7),TABLE2
         B     PACKERE-4
PACKERN  NI    0(R7),X'0F'         JUST STRIP ZONE OFF FOR NUMERIC
         LA    R8,4(R8)            COUNT OF HALF BYTES PROCESSED
PACKERE  LA    R7,1(R7)            NEXT BYTE
         BCT   R6,PACKERL
         MVI   REPLY+11,X'FF'
         PACK  REPLY(11),REPLY(11)
         MVC   REPLY(8),REPLY+2
         LM    R0,R1,REPLY
         STH   R8,INLENGTH
         XC    REPLY,REPLY
         SLDL  R0,24(R0)           SHIFT OUT THE UNUSED BYTES
         STM   R0,R1,REPLY
         BR    R14
PACKSHFT LA    R8,32               32 BITS IN A WORD
         SH    R8,INLENGTH         MINIS LENGTH OF INPUT
         L     R0,REPLY            GET INPUT
         SRL   R0,0(R8)            SHIFT OUT UNUSED BYTES
         ST    R0,REPLY
         BR    R14                 RETURN TO CALLER
TABLE2   DC    X'000A0B0C0D0E0F'
         EJECT
**********************************************************************
*  PRINT ROUTINE
*    R0  STARTING ADDRESS TO BE SNAPED.
*    R1  LENGTH OF SNAP
*    R14 RETURN POINT
**********************************************************************
         SPACE 1
PRINT    STM   R0,R15,PRTSAVE
         ST    R1,WORK6
         SLL   R0,8                CLEAR ANY HIGH ORDER BYTES.
         SRL   R0,8
         AR    R1,R0               DETERMINE THE STOP ADDRESS
         ST    R1,WORK5            SAVE IT
         L     R1,WORK6            RESTORE THE LENGTH
*
***** WRITE HEADER  ***************
*
         LA    R2,1
         BAL   R3,PUT
         LTR   R1,R1               ZERO LENGTH?
         BZ    FINISH+8            HEADER WRITTEN, GET OUT.
*
*
***** FORMAT THE FIRST LINE *******
*
         ST    R0,WORK1
         N     R0,=X'00FFFFE0'     START ON LINE BOUNDRY.
         BAL   R14,CONVERT
         ST    R0,WORK2
         MVC   ADDRESS(6),UNPACK+2 GET CORE ADDRESS INTO LINE
         MVC   DISPLACE(3),=C'000'
*
***** FIND START POINT ON FIRST LINE **********
*
         LA    R7,LINE1
         TM    WORK1+3,X'10'
         BZ    *+8
         LA    R7,LINE2
         TM    WORK1+3,X'08'
         BZ    *+8
         LA    R7,18(R7)
         TM    WORK1+3,X'04'
         BZ    *+8
         LA    R7,9(R7)
*
***** FIND NEXT DISPLACEMENT VALUE **********
*
         L     R6,WORK2
         LA    R6,32(R6)           ADD 20
         S     R6,WORK1
         ST    R6,WORK3            STORE NEXT DISPLACE VALUE.
         SR    R6,R6
         L     R3,WORK1
         B     LINELOOP            GO PRINT FIRST LINE
*
***** CHECK FOR BLANK LINES AND SUPPRESS THIER PRINTING
*
ZEROCHCK L     R6,0(R3)            GET FIRST WORD
         C     R6,0(0,R3)          R3 = CURRENT DUMP POINT
         BNE   ZCHECK2             NON-ZERO WORD. FINISHED ZERO CHECK
         BXLE  R3,R8,ZEROCHCK+4    TRY NEXT WORD
ZCHECK2  LR    R2,R3               CHECK IF LESS THAN 1 LINE OF ZEROS
         S     R2,ZEROLINE         ZEROLINE HAS START VALUE
         CH    R2,=X'0020'         R2 HAS COUNT OF ZERO WORDS
         BL    ZEXIT2              LESS THAN 20 BYTES, SKIP THE MESSAGE
ZCHECK3  SRL   R3,5                UPDATE CURRENT ADDRESS
         SLL   R3,5
         ST    R3,WORK1            WORK1 IS CURRENT DUMP POINT
         L     R8,WORK5            UPDATE COUNT TO GO
         SR    R8,R3               (END ADDR - CURRENT ADDR)
         ST    R8,WORK6            WORK6 IS COUNT TO GO
         S     R3,ZEROLINE         UPDATE DISPLACE VALUE
         A     R3,WORK3            (CURRENT ADDR - LAST ZERO + OLD DISP
         ST    R3,WORK3
         L     R0,ZEROLINE         SET UP ZERO MESSAGE
         BAL   R14,CONVERT
         MVC   ZEROLINE(8),UNPACK
         L     R0,WORK1            GET NEW START POINT
         ST    R0,WORK2            UPDATE LINELOOP'S START POINT
         BAL   R14,CONVERT
         MVC   ZEROLINE+12(8),UNPACK
         LR    R0,R6
         BAL   R14,CONVERT
         MVC   ZEROLINE+29(8),UNPACK
         MVC   OUTLINE+14(37),ZEROLINE
         XC    ADDRESS(10),ADDRESS CLEAR OUT OLD DATA.
         CLC   WORK5,WORK1         IS THIS ALSO THE END OF THE CB?
         BNH   FINISH              YES, PRINT ZERO MESSAGE AND GET OUT
         LA    R2,1                NO, MUST PRINT IT HERE.
         BAL   R3,PUT              GO PRINT IT.
         MVC   ADDRESS(6),ZEROLINE+14  RESTORE PRINT LINE
         L     R0,WORK3
         BAL   R14,CONVERT
         MVC   DISPLACE(3),UNPACK+5    RESTORE DISPLACEMENT VALUE
ZEXIT2   LA    R7,LINE1
         L     R3,WORK1
         L     R0,WORK3            GET OLD DISP VALUE
         A     R0,=X'00000020'     ADD 20 TO DISPLACE VALUE.
         ST    R0,WORK3
         SR    R6,R6
*
***** BUILD FIRST LINE OF DUMP ****
*
LINELOOP L     R0,0(R3)            GET STUFF TO BE DUMPED.
         BAL   R14,CONVERT
         MVC   0(8,R7),UNPACK      PUT IT INTO THE OUT PUT RECORD.
         LA    R6,4(R6)            KEEP COUNT
         L     R1,WORK6            GET LENGTH COUNT
         SH    R1,=X'0004'         4 FROM PRINT LENGTH.
         LTR   R1,R1               ARE WE DONE?
         BNP   DONE
         ST    R1,WORK6            UPDATE LENGTH
         LA    R14,OUTLINE+71      IS THIS THE LAST ENTRY FOR THE LINE?
         CR    R7,R14              IF R7 IS LARGER IT IS.
         BH    ENDLINE
         LA    R14,OUTLINE+40      ARE WE AT THE 3 EXTRA SPACES?
         CR    R7,R14
         BNE   *+8
         LA    R7,3(R7)
         LA    R7,9(R7)
         LA    R3,4(R3)
         B     LINELOOP            DO IT AGAIN.
*
***** FINISH UP AND PRINT THE LINE
*
ENDLINE  LA    R9,ENGLISH+32
         SR    R9,R6               R9 WAS START OF XLATED OUTPUT ADDRES
         L     R8,WORK1
         BCTR  R6,R0               CORRECT MOVE LENGTH ****
         EX    R6,MOVE             MOVE OUTPUT TO XLATE AREA.
         TR    ENGLISH(32),XLATE   TRANSLATE THE STUFF.
         MVI   ENGLISH-1,C'*'
         MVI   ENGLISH+32,C'*'
         LA    R3,4(R3)
         ST    R3,WORK1            UPDATE START POINT
         LA    R2,1                SPACE CONTROL
         BAL   R3,DLLCHECK         GO PRINT THE RECORD
         LA    R7,LINE1
         L     R0,WORK3            GET DISPLACE VALUE
         BAL   R14,CONVERT
         MVC   DISPLACE(3),UNPACK+5
         SR    R6,R6               RESET THE COUNT
         MVC   ZEROLINE(4),WORK1   SAVE START ADDR
         LA    R8,4                BXLE VALUE
         L     R9,WORK5            GET END ADDRESS FOR ZEROCHCK
         L     R0,WORK2            GET THE ALIGNED CORE ADDRESS.
         A     R0,=X'00000020'
         BAL   R14,CONVERT
         MVC   ADDRESS(6),UNPACK+2 GET CORE ADDRESS INTO LINE
         ST    R0,WORK2
         L     R3,WORK1            SET NEW START POINT
         B     ZEROCHCK            SEE IF LINE IS BLANK
DONE     LA    R9,ENGLISH
         L     R8,WORK1
         BCTR  R6,R0
         EX    R6,MOVE
         MVI   ENGLISH-1,C'*'
         MVI   ENGLISH+32,C'*'
         TR    ENGLISH(32),XLATE
FINISH   LA    R2,3
         BAL   R3,DLLCHECK
         LM    R0,R15,PRTSAVE      RESTORE THE REGS
         BR    R14                 RETURN
*
***** DLL FORMAT CHECK ROUTINE.  TAKES ONE 133 BYTE LINE AND MAKES
***** TWO 66 BYTE LINE FROM IT.
*
DLLCHECK TM    FLAG5,DLL           WANT LINE SPLIT?
         BZ    PUT                 NO, FORGET NEXT LOGIC
         OI    FLAG5,PAPSAVE       FORCE PAPER SAVE FOR DLL RUNS
         MVC   DLLLINE(10),ADDRESS SAVE 2ND HALF OF LINE
         MVC   DLLLINE+12(36),LINE2
         MVC   DLLLINE+49(17),ENGLISH+16
         CLI   LINE1,X'00'         1ST HALF USED?
         BNE   DLL1
         CLC   LINE1(36),LINE1+1
         BE    DLL2                NO 1ST HALF, TRY 2ND
DLL1     SR    R14,R14
         IC    R14,DLLLINE+8       ADD 10 TO THE OFFSET
         IC    R14,XLATE+1(R14)
         STC   R14,DLLLINE+8
         MVC   LINE2-3(17),ENGLISH-1
         MVI   LINE2+14,C'*'
         XC    LINE2+15(66),LINE2+15
         ST    R3,OPENRET          SAVE RETURN REG ACROSS PUT CALL
         BAL   R3,PUT              WRITE 1ST HALF OF RECORD
         L     R3,OPENRET
DLL2     CLI   DLLLINE+12,X'00'    2ND HALF OF LINE USED?
         BNE   DLL3
         CLC   DLLLINE+12(36),DLLLINE+13
         BER   R3                  NOT USED, RETURN
DLL3     XC    OUTLINE,OUTLINE     CLEAR OUTPUT AREA
         SR    R14,R14
         IC    R14,DLLLINE+4       ADD 10 TO THE ADDRESS
         IC    R14,XLATE+1(R14)
         STC   R14,DLLLINE+4
         MVI   DLLLINE+48,C'*'
         MVC   ADDRESS(66),DLLLINE SET UP 2ND HALF OF MESSAGE
         B     PUT
*
***** GENERAL PUT ROUTINE
*
PUT      TM    TRACE+48,X'10'      IS DCB OPEN?
         BZR   R3                  DCB IS CLOSED FOR SOME REASON.
         STM   R0,R7,HOLDR         SAVE REGS ACCROSS THE PUT
PUT2     LM    R6,R7,CURREC        R6 = CURREC . R7 = CURDECBT
         CLI   CURREC,X'14'        COME TO THE END OF A BUFFER?
         BNL   WRITE               BR IF YES
         MVC   1(132,R6),OUTLINE+1
         MVI   0(R6),X'09'         PRINTER CONTROL CHARACTER
         LR    R4,R6
         A     R4,=X'01000085'     UP THE CURRENT POINTER AND COUNT
         CS    R6,R4,CURREC
         BNE   PUT2                SOMEONE ELSE GOT OUR SPOT
         B     PUTOUT
* CURREC CROSSED A BUFFER BOUNDRY.  TRY TO WRITE OLD BUFFER
WRITE    TS    0(R7)               LOCK DECB FOR WRITE
         BNZ   NEXTDECB
         L     R1,0(R7)            R1 = A(DECB)
         CLI   0(R1),X'00'         IS WRITE OUTSTANDING?
         BE    NEXTDECB-4
         LA    R15,TRACE
         L     R15,48(0,R15)       GET BSAM ADDRESS
         XC    0(4,R1),0(R1)       CLEAR ECB
         BALR  R14,R15             GO TO BSAM
         NI    0(R7),X'40'         TURN OFF LOCK ON DECB
* FIND NEXT DECB TO BE CURRENT
NEXTDECB LA    R4,0(R6)            CLEAR COUNT
         LA    R5,4(R7)            NEXT DECBT ENTRY
         C     R5,=A(DECB20)       END OF DECBS?
         BNH   CHECK1
         L     R4,BUFFER1
         LA    R5,DECBT
*CHECK STATUS OF THIS NEW DECB
CHECK1   TS    0(R5)               OK TO CHECK?
         BE    CHECK2              BR IF YES
         LA    R4,2660(R4)         NO, TRY NEXT
         LA    R5,4(R5)
         B     NEXTDECB+8
CHECK2   L     R2,0(R5)            R2 = A(ECB)
         TM    0(R2),X'7F'
         BO    DECBOK
         BZ    WAIT
         CLI   0(R2),X'48'
         BE    PURGE
         CLI   0(R2),X'41'
         BNE   WRTERR
EOV      LA    R1,TRACE
         L     R14,0(R5)           R14 = A(DECB)
         L     R0,16(R14)
         SH    R0,=X'0008'
         SVC   55
         LTR   R15,R15
         B     CHECK2
PURGE    LR    R1,R2               GO RESTART THIS PURGED I/O
         B     WRITE+12
WAIT     LA    R1,0(R2)            CLEAR HIGH BYTE FOR WAIT
         LA    R0,1(R0)
         SVC   1
         B     CHECK2
DECBOK   CDS   R6,R4,CURREC
         NI    0(R5),X'20'         TURN OFF LOCK OF DECBT ENTRY
         B     PUT2                GOT BUFFER, NOW TRY MOVE
PUTOUT   LM    R0,R7,HOLDR         RESTORE CALLERS REGS
         XC    OUTLINE,OUTLINE
         TM    FLAG5,PAPSAVE       WANT PAPER SAVE OPTION.
         BCR   1,R3
         BCT   R2,PUT              DO SPACES IF NEEDED
         BR    R3                  RETURN
*
MOVE     MVC   0(0,R9),0(R8)       MOVE DATA TO PRINT AREA
         DS    0F
**********************************************************************
*        END OF PRINT CODE                                           *
**********************************************************************
         EJECT
**********************************************************************
**********************************************************************
*
RESET    DC    X'00'
STATUS   DC    X'00'
NOBLKS   EQU   128
MVS      EQU   64
HOT      EQU   32
OPENING  EQU   8
MAJORBUG EQU   1
FLAG     DC    X'00'
COUNTOLY EQU   128
OPENBAD  EQU   64
RESETFLG EQU   32
PARMS    EQU   16
PARKER   EQU   8
GETCORE  EQU   4
UNIQUE   EQU   1
LOCK     DC    X'00'
COREADR  DC    F'0'
IRBCOUNT DC    F'0'
COUNTS   DC    F'0'
COUNTE   DC    F'0'
COUNT2   DC    F'0'
COUNT    DC    F'0'
BUFFCORE DC    F'0'
BUFFER1  DC    F'0'
CDDNAME  DC    XL8'0'
JOBNAME  DC    XL8'0'
DDNAME   DC    XL8'0'
CORE     DC    10F'0'           CORE TABLE FOR UP TO 10 WORK AREAS
DECBT    DC    19F'0'           DECB TABLE
DECB20   DC    F'0'             LAST DECB
         DS    0D           ALIGN FOR CDS INSTRUCTION
CURREC   DC    F'0'
CURDECBT DC    F'0'
WORKSAVE DC    A(R13BASE)
DECBTBL  DC    A(DECBT)
RFLAG1   DC    A(FLAG1)
MOVELGN  DC    A(GETEND-SAVE-76)
RCFLAG1  DC    A(CFLAG1)
**********************************************************************
TRACE    DCB   DDNAME=TRACE,DSORG=PS,MACRF=PM,RECFM=FBA
**********************************************************************
**********************************************************************
* THIS AREA WILL BE MOVE TO AN AREA THAT IS GETMAIN-ED AND WILL BE   *
* ADDRESSED BY REG13.                                                *
**********************************************************************
         SPACE 1
         DS    0D                  ALIGN FOR GET AND FREE MAINS.
R13BASE  EQU   *
SAVE     DS    19F
FLAG1    DC    X'08'
PLHFLG   EQU   128                 PLH FOUND -ALWAYS PRINTED
RPLFLG   EQU   64                  RPL FOUND -ALWAYS PRINTED
ACBFLG   EQU   32                  ACB FOUND -ALWAYS PRINTED
AMBLFLG  EQU   16                  AMBL FOUND
INDXPROC EQU   4                   ON WHEN DOING INDEX WORK
RMERRCD  EQU   2                   HAVE SUPPLIED ERROR CODE
COUNTING EQU   1                   DO COUNT VALUES
FLAG2    DC    X'00'
DATACB   EQU   128                 WANTS DATA CB'S
INDEXCB  EQU   64                  WANTS INDEX CB'S
RPLX     EQU   32                  WANTS RPL
ACBX     EQU   16                  WANTS ACB
PLHX     EQU   8                   WANTS PLH
ALLCB    EQU   4                   WANTS ALL CB'S PRINTED
BUFFCX   EQU   2                   WANTS BUFFC PRINT
AMBLX    EQU   1                   WANTS AMBL PRINT
FLAG3    DC    X'00'
BUFFX    EQU   128                 WANTS BUFFER PRINT
IOBX     EQU   64                  WANTS IOB PRINT
CPAX     EQU   32
ICWAX    EQU   16                  WANTS ICWA, IMWA OR DIWA (IF DATA)
AMBX     EQU   8                   WANTS AMB PRINT
AMDSBX   EQU   4                   WANTS AMDSB PRINT
ARDBX    EQU   2                   WANTS ARDB, EDB, LPMB PRINT
DEBX     EQU   1                   WANTS DEB
FLAG4    DC    X'00'
BSPHX    EQU   128                 WANTS BSPH PRINT
UPTX     EQU   64                  WANTS UPT PRINT
BIBX     EQU   32                  WANTS BIB AND CMB PRINT
HEBX     EQU   16                  WANTS HEB PRINT
VATX     EQU   8                   WANTS VAT AND VMT PRINT
VSRTX    EQU   4                   WANTS VSRT PRINT
RECDX    EQU   2                   WANTS USER RECORD
KEYX     EQU   1                   WANTS SEARCH ARGUMENT
FLAG5    DC    X'00'
REGX     EQU   128                 WANTS REGS
IICBX    EQU   64                  WANTS IICB AND DCB
DLL      EQU   32                  WANTS OUTPUT IN DLL FORMAT
PAPSAVE  EQU   16                  WANTS PAPER SAVED
NOTE1    EQU   8                   SINGLE PRINT OPTION
AIXX     EQU   4                   WANTS REPROMPT FOR AIX STUFF
COUNTX   EQU   2                   COUNT MODE
ERRCDPMT EQU   1                   PROMPT FOR ERROR CODE
FLAG6    DC    X'00'               ERROR CODE FROM OPERATOR
RTYPE    DC    XL1'0'
AIXIN    DC    XL3'00'             AIX PARM LIST
AIXOPT   DC    X'00'               UNIQUE INFO FOR AIX
AIXNOUPG EQU   8
AIXPATH  EQU   4
AIXONE   EQU   2
AIXALL   EQU   1
UPGCOUNT DC    X'00'
**********************************************************************
*********** CATALOG PRINT FLAGS *************************************
**********************************************************************
CFLAG1   DC    X'00'
CCAFLG   EQU   128
CPLFLG   EQU   64
CMSTYPE  EQU   32
FVTTYPE  EQU   16
CUNIQUE  EQU   8
NODDNAME EQU   4
CATPARM  EQU   2
SETCAT   EQU   1
CFLAG2   DC    X'00'
CCA      EQU   128
CPL      EQU   64
RAB      EQU   32
RABALL   EQU   16
FVT      EQU   8
FPL      EQU   4
CAXWA    EQU   2
CREG     EQU   1
CFLAG3   DC    X'00'
CPLFIELD EQU   128
CMSWA    EQU   64
CPLCTL   EQU   32
CATCODE  EQU   1
CFLAG4   DC    X'00'
STATUS2  DC    X'00'
GOOD     EQU   32
SWAPED   EQU   16
AIXDONE  EQU   8
BASEDONE EQU   4
UGPDONE  EQU   2
CATCDE   EQU   CFLAG4
**********************************************************************
************************************************* EVEN WORD DC/DS ****
**********************************************************************
         DS    0F
BUFFLEN  DC    C'JACK'
IBUFFLEN DC    F'0'
DBUFFLEN DC    F'0'
IBUFFC   DC    F'0'
DBUFFC   DC    F'0'
RPLSAVE  EQU   DBUFFC
OPENRET  DC    F'0'
TIOTADR  DC    F'0'                   ADDRESS OF TIOT
WORK1    DC    F'0'                   START DUMP ADDRESS
WORK2    DC    F'0'                   ALIGNED DUMP ADDRESS
WORK3    DC    F'0'                   DDD VALUE (LAST 3 BYTES)
WORK4    DC    F'0'                   POINTER TO CALLERS REGS
WORK5    DC    F'0'                   END OF DATA FOR ZEROCHECK
WORK6    DC    F'0'                   CURRENT PRINT LENGTH
WORK7    DC    F'0'                   SAVE FOR POINTER TO FPL POINTER
VATADDR  DC    F'0'
CPLH     DC    F'0'
SVCADDR  DC    F'0'
SVRB     DC    F'0'
AMBL     DC    F'0'                   AMBL ADDRESS
IAMB     DC    F'0'                   INDEX AMB
DAMB     DC    F'0'                   DATA AMB
UPGPTR   DC    F'0'
INLENGTH DC    XL4'0'
HOLDREGS DC    7F'0'
HOLDR    DC    8F'0'
ECB      DC    F'0'                NORMAL WTOR ECB
CATREGS  DC    2F'0'
UNPACK   DC    XL12'0'
FECNT    DC    C'FE-COUNT'
ROUTCDE  DC    X'00004020'         ROUTING CODE FOR WTO
REPLY    DC    XL11'0'
REPLY2   DC    XL5'0'
* WTO PARAMETER LIST
         DS    0F
REPLYMSG EQU   *
REPLYLYL DC    AL1(10)
REPLYIN  DC    AL3(REPLY)
REPLYECB DC    A(ECB)
MSGLNG   DS    XL2
         DC    X'8000'
MESSAGES DS    CL120
**********************************************************************
********************************************MESSAGE BUILD AREA *******
**********************************************************************
OUTLINE  DC    XL133'0'            PRINT LINE
HEADER   EQU   OUTLINE
ADDRESS  EQU   OUTLINE+1
DISPLACE EQU   OUTLINE+8           DDD VALUE
LINE1    EQU   OUTLINE+13          FIRST SECTION OF DUMP
LINE2    EQU   OUTLINE+52          SECOND SECTION OF DUMP
ENGLISH  EQU   OUTLINE+90          TRANSLATED PART OF DUMP
DLLLINE  DC    XL66'0'             2ND PRINT LINE FOR DLL FORMAT
**********************************************************************
************************************************* SAVE AREA **********
**********************************************************************
*
         DS    0F
PRTSAVE  DS    16F
TABLE    DC    C'0123456789ABCDEF'
XLATE    DC    C'................'
         DC    C'................'
         DC    C'................'
         DC    C'................'
         DC    C' ............(+.'
         DC    C'...........$*)..'
         DC    C'-/.........,....'
         DC    C'..........:..''=.'
         DC    C'................'
         DC    C'................'
         DC    C'................'
         DC    C'................'
         DC    C'.ABCDEFGHI......'
         DC    C'.JKLMNOPQR......'
         DC    C'..STUVWXYZ......'
         DC    C'0123456789*.....'
**********************************************************************
**********************************************************************
         EJECT
**********************************************************************
* FOR RECREATE TO WORK, THE IDATRACE SVC MUST BE IN THE FIRST 20     *
* BYTES OF IDA019R1.                                                 *
**********************************************************************
         SPACE 2
RECREATE TM    FLAG1,RPLFLG+ACBFLG NEED RPL AND ACB FOR RECREATE
         BNO   NOCB                IF ONE MISSING, GIVE ERROR MESSAGE.
         BAL   R14,OPENDCB         MAKE SURE DCB IS OPEN
         TM    48(ACBREG),X'01'    O/C IN CONTROL?
         BO    ACBWRITE            YES, MUST WRITE ACB
         CLI   CFLAG4,X'FF'        FIRST TIME?
         BE    RPLWRITE            NO, DON'T WRITE ACB
ACBWRITE MVI   CFLAG4,X'FF'        NOT FIRST TIME
         LR    R6,ACBREG
         SH    R6,=X'0004'         BACK UP ONE WORD
         L     R7,0(R6)            SAVE USER CODE
         ST    R6,0(R6)            STORE ACB ADDRESS
         MVI   0(R6),C'A'          PUT IN ACB ID BYTE
         PUT   TRACE,(6)           1ST TIME THE ACB.
         ST    R7,0(R6)            RESTORE THE USER'S CODE.
TRACK    L     R8,WORK4
         MVC   1(2,RPLREG),2(R8)   MOVE IN REQUEST TYPE
         LR    R8,RPLREG
         SH    R8,=X'0004'
         L     R9,0(R8)            SAVE USER CODE
         ST    RPLREG,0(R8)        SAVE RPL ADDRESS
         MVI   0(R8),C'R'          PUT IN RPL ID
RPLWRITE PUT   TRACE,(8)           PUT OUT THE RECORD
         ST    R9,0(R8)            RESTORE USER'S CODE
         CLI   2(RPLREG),X'04'     IS THIS A GET, PUT, POINT?
         BNL   REOUT
         CLI   2(RPLREG),X'02'     IS THIS A CHECK?
         BE    REOUT               YES, ALL DONE.
         CLI   2(RPLREG),X'01'     IS THIS A PUT?
         BE    RECPUT              YES, PUT THE OUTPUT RECORD
KEYPUT   L     R5,36(RPLREG)       MUST BE A POINT OR GET.  KEY ONLY
         SH    R5,=X'0004'         BACK UP ONE WORD
         L     R8,0(R5)
         MVI   0(R5),C'K'          SET KEY ID
         SR    R6,R6
         L     R6,16(RPLREG)
         LA    R6,4(R6)            LRECL+4
         PUT   TRACE,(5)           PUT OUT THE RECOUD
         ST    R8,0(R5)            RESTORE USER'S CORE
         B     REOUT               HAVE PUT RPL AND KEY, NOW FINISHED
RECPUT   L     R5,32(RPLREG)       PUT REQUEST NEEDS RECORD
         SH    R5,=X'0004'         BACK UP ONE WORD
         L     R8,0(R5)            SAVE USER'S CORE
         MVI   0(R5),C'R'          SET RECORD ID
         L     R6,48(RPLREG)
         LA    R6,4(R6)            LRECL+4
         PUT   TRACE,(5)
         ST    R8,0(R5)            RESTORE USER'S CORE
REOUT    ICM   RPLREG,15,44(RPLREG) IS THERE A CHAIN OF RPLS?
         BNZ   TRACK
         B     EXIT1               HAVE DONE RPL AND RECORD FOR PUT REQ
         EJECT
ZEROLINE DC    C'         TO          CONTAIN 00000000'
DATA     DC    C'DATA '
INDEX    DC    C'INDEX'
CURRNT   DC    C'CURRENT '
IOMB     DC    C'IOMB'
IOSB     DC    C'IOSB'
REGMSG   DC    C'REGISTERS WHEN SVC ISSUED FROM SVRB (REG 0 THRU 15)'
SVCMSG   DC    C'**** COUNT =      SVC ISSUED AT '
SVCADR   DC    C'      ************************************'
NODDMSG  DC    C'NO DDNAME FOUND TO CHECK.'
ACBMSG   DC    C'ACB AT LOCATION '
ACBADR   DC    XL8'0'
AMBLMSG  DC    C'AMBL AT LOCATION '
AMBLADR  DC    XL8'0'
RPLMSG   DC    C'RPL AT LOCATION '
RPLADR   DC    XL8'0'
PLHMSG   DC    C'PLH AT LOCATION '
PLHADR   DC    XL8'0'
BUFCMSG1 DC    C'CURRENT DATA  BUFFC AT LOCATION '
BUFCADR1 DC    XL8'0'
BUFFCMSG DC    C'DATA  BUFFC AT LOCATION '
BUFCADR  DC    XL8'0'
BUFCHDR  DC    C'      BUFFC HEADER AT LOCATION '
BUFCHDRA DC    XL8'0'
BUFFMSG1 DC    C'CURRENT DATA  BUFFER AT LOCATION '
BUFFADR1 DC    XL8'0'
BUFFMSG  DC    C'DATA  BUFFER AT LOCATION '
BUFFADR  DC    XL8'0'
BUFEMSG  DC    C'EMPTY BUFFER FOUND AT '
BUFEMADR DC    XL8'0'
IOBMSG   DC    C' IOB AT LOCATION '
IOBADR   DC    XL8'0'
CPAMSG   DC    C'DATA  CHANNEL PROGRAM AREA (CPA) AT LOCATION '
CPAADR   DC    XL8'0'
AMBMSG   DC    C'DATA  AMB AT LOCATION '
AMBADR   DC    XL8'0'
AMDSBMSG DC    C'DATA  AMDSB AT LOCATION '
AMDSBADR DC    XL8'0'
ICWAMSG  DC    C'ICWA AT LOCATION '
ICWAADR  DC    XL8'0'
DIWAMSG  DC    C'DIWA AT LOCATION '
DIWAADR  DC    XL8'0'
IMWAMSG  DC    C'IMWA AT LOCATION '
IMWAADR  DC    XL8'0'
LPMBMSG  DC    C'PREVIOUS EDB''S LPMB AT LOCATION '
LPMBADR  DC    XL8'0'
EDBMSG   DC    C'DATA  EDB AT LOCATION '
EDBADR   DC    XL8'0'
ARDBMSG  DC    C'DATA  ARDB AT LOCATION '
ARDBADR  DC    XL8'0'
DEBMSG   DC    C'      DEB AT LOCATION '
DEBADR   DC    XL8'0'
IICBMSG  DC    C'IICB AT LOCATION '
IICBADR  DC    XL8'0'
DCBMSG   DC    C'IIP DCB AT LOCATION '
DCBADR   DC    XL8'0'
BSPHMSG  DC    C'      BSPH AT LOCATION '
BSPHADR  DC    XL8'0'
VSRTMSG  DC    C'VSRT AT LOCATION '
VSRTADR  DC    XL8'0'
BIBMSG   DC    C'BIB AT LOCATION '
BIBADR   DC    XL8'0'
UPTMSG   DC    C'UPT AT LOCATION '
UPTADR   DC    XL8'0'
HEBMSG   DC    C'HEB AT LOCATION '
HEBADR   DC    XL8'0'
VATMSG   DC    C'VAT AT LOCATION '
VATADR   DC    XL8'0'
AIXMSG   DC    C'FOLLOWING PRINT IS AIX FOR ABOVE BASE.'
WAXMSG   DC    C'FOLLOWING IS AIX''S BASE PRINT.  WAX AT '
WAXADR   DC    XL8'0'
UPGMSG   DC    C'FOLLOWING PRINT IS UPGRADE CLUSTER FOR ABOVE. '
UPGCNT   DC    C'THIS IS UPG NUMBER  .'
KEYMSG   DC    C'USER''S SEARCH ARGUMENT (KEY) AT LOCATION '
KEYADR   DC    C'         . KEY LENGTH =     '
RECMSG   DC    C'USER I/O RECORD AT LOCATION '
RECADR   DC    C'         RECORD LENGTH =     '
CCAMSG   DC    C'CCA AT LOCATION '
CCAADR   DS    CL8
RABMSG   DC    C'6 RAB''S.  X''200'' BYTES EACH'
CRABMSG  DC    C'CURRENT RAB'
CPLMSG   DC    C'CPL AT LOCATION '
CPLADR   DS    CL8
CTENTMSG DC    C'CPL''S CTGENT FIELD.'
CTGDDMSG DC    C'CPL''S CTGDDN FIELD.'
CTGCTMSG DC    C'CPL''S CTGCAT FIELD.'
CRPLMSG  DC    C'CURRENT CATALOG RPL AT '
CRPLADR  DS    CL8
FVTMSG   DC    C'FVT AT ADDRESS '
FVTADR   DS    CL8
FVTNAME  DC    C'FVT ENTRY NAME='
FPLMSG   DC    C'FPL AT LOCATION '
FPLADR   DS    CL8
FPLWORK  DC    C'PREVIOUS FPL''S WORK AREA AT '
FPLWKADR DS    CL8
FPLNAME  DC    C'PREVIOUS FPL''S FIELD NAME AT '
FPLNMADR DC    C'        .  FIELD NAME = '
FPLNAME1 DC    C'                .'
CAXWAMSG DC    C'CAXWA AT LOCATION '
CAXWAADR DS    CL8
CMSMSG   DC    C'CMS WORK AREA AT '
CMSADR   DS    CL8
JOBPRMT  DC    X'0037'
         DC    C'IDATRACE: ENTER JOB NAME TO BE TRACED BY IDATRACE. '
PARMPRMT DC    X'0026'
         DC    C'IDATRACE: ENTER IN PARAMETER LIST.'
COUNTMSG DC    X'002C'
         DC    C'IDATRACE: COUNT FIELD AT ADDRESS       .'
ERRPRMT  DC    X'0039'
         DC    C'IDATRACE: ENTER IN ONE BYTE ERROR CODE IN HEX OR ANY.'
DDPRMT   DC    X'0034'
         DC    C'IDATRACE: ENTER DDNAME OF DATA SET TO BE TRACED.'
CNTPRMTS DC    X'002D'
         DC    C'IDATRACE: ENTER START COUNT VALUE IN HEX.'
RESETMSG DC    X'004C'
         DC    C'IDATRACE: ALTERING ADDRESS         WILL CAUSE '
         DC    C'IDATRACE TO RESET/RESTART.'
INTERMSG DC    C'INTERUPT!  IRB CAUSING FOLLOWING PRINT'
CATFOUND DC    X'0045'
         DC    C'IDATRACE: CATALOG CB''S FOUND. ENTER CATALOG (FC) '
         DC    C'PARAMETER LIST.'
CONTMSG  DC    C'INTERUPTED TRACE CONTINUING'
AIXPARM  DC    X'0037'
         DC    C'IDATRACE: ENTER PARM LIST FOR PATH/UPGRADE SUPPORT.'
ERRORML  DC    X'0044'
ERRORMSG DC    C'IDATRACE: ERROR CODE=  . ENTER A C OR S (ABEND, '
         DC    C'CONTINUE, STOP).'
**
****DECB WRITE ECB1,SF,TRACE,BUFFER1,2660,MF=L
REALDECB DS    0F
ECB1     DC    X'7F000000'
         DC    X'00'          TYPE FIELD
         DC    X'20'          MORE TYPE
         DC    AL2(2660)      BUFFER LENGTH
         DC    A(TRACE)       DCB ADDRESS
         DC    A(BUFFER1)     BUFFER ADDRESS
         DC    A(0)           RECORD POINTER
         LTORG
         DS    0F             ALIGN
         DS    0D             ALIGN FOR GETMAIN
GETEND   EQU   *
         EJECT
RPL      DSECT
RPLIDWD  DS    0F
RPLID    DS    C
RPLSTYP  DS    C
RPLREQ   DS    C
RPLLEN   DS    C
RPLPLHPT DC    F'0'
RPLECB   DC    F'0'
RPLWAIT  EQU   128
RPLPOST  EQU   64
RPLSTAT  DS    C
RPLCHK1  EQU   64
RPLEDRQI EQU   32
RPLFDBK  DS    C
RPLCNDCD DS    H
RPLCMPON EQU   RPLCNDCD
RPLERRCD EQU   RPLCNDCD+1
RPLKEYL  DS    H
RPLSTRID DS    H
RPLCCHAR DC    F'0'
RPLDACB  DC    F'0'
RPLTCBPT DC    F'0'
RPLAREA  DC    F'0'
RPLARG   DC    F'0'
RPLOPTCD DC    F'0'
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   128
RPLDIR   EQU   64
RPLSEQ   EQU   32
RPLSKP   EQU   16
RPLASY   EQU   8
RPLKGE   EQU   4
RPLGEN   EQU   2
RPLECBSW EQU   1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   128
RPLCNV   EQU   32
RPLUPD   EQU   2
RPLNSP   EQU   1
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLCHAIN DC    F'0'
RPLRLEN  DC    F'0'
RPLBUFL  DC    F'0'
         DC    F'0'
RPLRBAR  DS    2F
         DS    C
RPLACTIV DS    C
RPLEMLEN DS    H
RPLERMSA DC    F'0'
*
**
**
         END    PHASE1
*/LKED.SYSLMOD DD DSNAME=SYS1.LPALIB(IGC0005I),DISP=SHR
*   /* CARD


