 /*   X 0 0 1 3 1 0   -   SMP TAPE EDIT  */
-TAPEDIT: PROCEDURE (PARM) OPTIONS (MAIN)  REORDER;
    DECLARE WRONG        CHARACTER(3) INITIAL('NO ');
    DECLARE PTFLIST      FILE SEQUENTIAL;  /* ALREADY ON THE SYSTEM */
    DECLARE PTFTAPE      FILE SEQUENTIAL; /* NEW TAPE INPUT */
    DECLARE PARM      CHAR(120) VARYING;
    DECLARE PAGENUM      FIXED BINARY (15) INITIAL(1);
    DECLARE TAPENUM      CHARACTER(30);
    DECLARE PROBFLAG     CHARACTER(3);
    DECLARE J            FIXED BINARY(15);
    DECLARE ZAPSINSYSTEM (8000) CHARACTER(8);
    DECLARE ALREADYIN    CHARACTER (10);
    DECLARE ZAPS_END     FIXED BINARY (15) INITIAL(1);
    DECLARE CURRENTMODS  (4000) CHARACTER (21);
    DECLARE CURRENTMODS_END
                         FIXED BINARY(15) INITIAL(1);
    DECLARE PROBLEMS     (200) CHARACTER (7);
    DECLARE PROBLEMS_END FIXED BINARY (15) INITIAL(1);
    DECLARE ACCEPT       (100) CHARACTER(7);
    DECLARE ACCEPT_END   FIXED BINARY (15) INITIAL(1);
    DECLARE I            FIXED BINARY (15);
    DECLARE RECORD       CHAR(160)  INITIAL('')  STATIC;
            /* INPUT AREA OF DOUBLE LENGTH, RIGHT HALF ALWAYS BLANK, */
            /* BASED STRING 'SCAN' CAN THUS BE FREELY SHIFTED OVER   */
            /* 'RECORD'.                                             */
    DCL     SCAN  CHAR(80)  BASED ($SCAN),
            POS(80) CHAR(1)  BASED(ADDR(RECORD));
    DECLARE RECIN        CHAR(80)   DEF (RECORD)  POS(1),
            SEQNBR       CHAR(8)    DEF (RECORD)  POS(73);
    DECLARE CROSSES      CHARACTER (2) DEFINED (RECORD) POS(1);
    DECLARE RLSENUM      CHARACTER (4);
    DECLARE PTF          CHARACTER (3) DEFINED (RECORD) POS(4);
    DECLARE ACCEPTABLE   CHARACTER (10) INITIAL ('PTF OR PTF');
    DECLARE DONE         CHARACTER (3) INITIAL ('NO ');
    DECLARE INDEXPRE     FIXED BINARY (15);
    DECLARE FIXEDTABLE   (500) CHARACTER(7);
    DECLARE FIXEDEND     FIXED BINARY(15) INITIAL (1);
    DECLARE TEMP_PTF     CHARACTER(7);
    DECLARE TEMP_RLSE    CHARACTER(4);
    DECLARE TEMP_COMP    CHARACTER(5);
    DECLARE PTFEND       FIXED BINARY (15) INITIAL (1);
    DECLARE INDEXSUP     FIXED BINARY (15);
    DECLARE SUPTABLE     (300) CHARACTER(7);
    DECLARE SUPEND       FIXED BINARY(15) INITIAL(1);
    DECLARE PRETABLE     (300) CHARACTER(7);
    DECLARE PREEND       FIXED BINARY (15) INITIAL (1);
 %SKIP(2);
 DCL    MORE_STATEMENTS  BIT(1);
0DCL    (OLD_STMT ,NEW_STMT)  CHAR(7)  INIT('')  STATIC;
0DCL    MODULE  CHAR(10);
0DCL   PTFPRINT  PRINT INTERNAL;
0DCL   OLD_PTF   CHAR(7)  INIT('')  STATIC;
0DCL   OLD_COMP   CHAR(5)  INIT('')  STATIC;
    DECLARE TEMPSTRING       CHARACTER(132) INITIAL ((132)' ');
    DECLARE OUTSTRING      CHARACTER(132);
    DECLARE STAR0          CHARACTER(1) DEFINED (OUTSTRING) POS(1);
    DECLARE PTFNUM         CHARACTER(7) DEFINED (OUTSTRING) POS(3);
    DECLARE WRONGER        CHARACTER(13) DEFINED (OUTSTRING) POS(12);
    DECLARE COMPONENT      CHARACTER(5) DEFINED (OUTSTRING) POS(28);
    DECLARE STAR1          CHARACTER(1) DEFINED (OUTSTRING) POS(34);
    DECLARE PREREQ1        CHARACTER(7) DEFINED (OUTSTRING) POS(36);
    DECLARE PREREQ2        CHARACTER(7) DEFINED (OUTSTRING) POS(44);
    DECLARE PREREQ3        CHARACTER(7) DEFINED (OUTSTRING) POS(52);
    DECLARE STAR2          CHARACTER(1) DEFINED (OUTSTRING) POS(60);
    DECLARE SUPERCEDES1    CHARACTER(7) DEFINED (OUTSTRING) POS(62);
    DECLARE SUPERCEDES2    CHARACTER(7) DEFINED (OUTSTRING) POS(70);
    DECLARE SUPERCEDES3    CHARACTER(7) DEFINED (OUTSTRING) POS(78);
    DECLARE STAR3          CHARACTER(1) DEFINED (OUTSTRING) POS(86);
    DECLARE APARS_FIXED1   CHARACTER(7) DEFINED (OUTSTRING) POS(88);
    DECLARE APARS_FIXED2   CHARACTER(7) DEFINED (OUTSTRING) POS(96);
    DECLARE APARS_FIXED3   CHARACTER(7) DEFINED (OUTSTRING) POS(104);
    DECLARE STAR4          CHARACTER(1) DEFINED (OUTSTRING) POS(112);
    DECLARE ACCEPT_RESTORE CHARACTER(7) DEFINED (OUTSTRING) POS(114);
    DECLARE ACTION_CHAR    CHARACTER(1) DEFINED (OUTSTRING) POS(121);
    DECLARE STAR5          CHARACTER(1) DEFINED (OUTSTRING) POS(122);
    DECLARE PROBLEM        CHARACTER(7) DEFINED (OUTSTRING) POS(124);
    DECLARE STAREND        CHARACTER(1) DEFINED (OUTSTRING) POS(132);
0DCL   PARM_ERROR  BIT(1)  INIT(''B)  STATIC;
0DCL   (PTFLAST ,LOGIC ,MODLOG)  ENTRY;
1   OPEN FILE (PTFPRINT) PRINT LINESIZE (132);
-  IF  LENGTH(PARM) ^< LENGTH(RLSENUM)
   THEN DO;
     I  =  INDEX (PARM,  ','  );
   IF  I ^= 0
   THEN DO;
     RLSENUM  =  SUBSTR(PARM,1,I-1);
     PARM_ERROR  =  I-1 < LENGTH(RLSENUM);
     TAPENUM  =  SUBSTR(PARM,I+1);
        END;
   ELSE
     PARM_ERROR  =  '1'B;
        END;
   ELSE
     PARM_ERROR  =  '1'B;
0  IF  PARM_ERROR
   THEN DO;
     PUT   LIST ('*** ERROR IN PARM STRING:  ->'××PARM××'<-')
           SKIP(5);
     PUT  LIST ('*** RUN TERMINATED')  SKIP(1);
     STOP;
        END;
-    CALL  PTFLAST (ZAPS_END,CURRENTMODS_END,ZAPSINSYSTEM,
                    CURRENTMODS);
    OPEN FILE (PTFTAPE) INPUT;
     CALL   HEDDR;   /* PRINT PAGE HEADER */
     MORE_STATEMENTS = '1'B;
 %SKIP(5);
 DO  WHILE (MORE_STATEMENTS);
-    CALL   NEXT_STATEMENT;/* GET NEXT STATEMENT FROM PTFTAPE,     */
                              /* ANALYZE IT SYNTACTICALLY AND SAVE    */
                              /* ESSENTIAL OPERANDS.                  */
                              /* SKIP TEXT BETWEEN STATEMENTS.        */
-  IF  NEW_STMT = '++VER'  &  WRONG = 'NO'
   THEN DO;
     DO   J  =  1  TO  ZAPS_END-1
                WHILE (TEMP_PTF ^= SUBSTR(ZAPSINSYSTEM(J),1,7));
     /* SEE IF PTF IS ALREADY IN SYSTEM */
     END;
   IF  J > ZAPS_END-1  /* PTF NOT IN SYSTEM */
   THEN DO;  /* CHECK PREREQUSITES AND SUPERSEDES */
     CALL  LOGIC (PRETABLE, SUPTABLE, FIXEDTABLE, ACCEPT, PROBLEMS,
                  ZAPSINSYSTEM, CURRENTMODS,
                  PREEND, SUPEND, FIXEDEND, ACCEPT_END, PROBLEMS_END,
                  ZAPS_END, CURRENTMODS_END);
        END; /* CHECK PRE & SUP */
   ELSE ALREADYIN = 'ALREADY IN';
        END; /* RELEASE APPLICABLE */
-  IF  NEW_STMT = '++PTF' × NEW_STMT = '++END'
       /* PTF & NOT FIRST STMT × END-OF-FILE */
   THEN DO;  /* PRINT OLD PTF, INIT NEW PTF */
   IF  OLD_STMT ^= ''   /* NOT FIRST PTF */
   THEN DO;
     CALL  OUTIT;   /* PRINT OLD PTF */
        END;
     OLD_PTF  =  TEMP_PTF;
     ALREADYIN = 'NOT IN';
     OLD_COMP = TEMP_COMP;
     FIXEDEND ,PREEND ,SUPEND ,PROBLEMS_END ,ACCEPT_END  =  1;
     PRETABLE = '';   SUPTABLE = '';   FIXEDTABLE = '';
     PROBLEMS = '';   ACCEPT = '';
  END; /* PRINT OLD PTF, INIT NEW PTF */
-  IF  (NEW_STMT = '++MOD' × NEW_STMT = '++MAC' × NEW_STMT = '++ZAP'
     × NEW_STMT = '++UPDTE'  /* MODULE REFERENCING STMTS */ )
       & WRONG = 'NO' & ALREADYIN ^= 'ALREADY IN'
   THEN DO;  /* CHECK FOR PROBLEMS WITH SPECIFIC MODULE */
     CALL   MODLOG (MODULE,
                  PRETABLE, SUPTABLE, FIXEDTABLE, ACCEPT, PROBLEMS,
                  ZAPSINSYSTEM, CURRENTMODS,
                  PREEND, SUPEND, FIXEDEND, ACCEPT_END, PROBLEMS_END,
                  ZAPS_END, CURRENTMODS_END);
        END; /* CHECK FOR PROBLEMS WITH SPECIFIC MODULE */
   IF  NEW_STMT = '++END'  /* END-OF-FILE */
   THEN   MORE_STATEMENTS = ''B;
     OLD_STMT  =  NEW_STMT;
 END; /* MORE STATEMENTS */
      STOP;
 %PAGE;
 NEXT_STATEMENT:   PROC;
0DCL   FRESH_RECORD  BIT(1)  INIT(''B)  STATIC;
-ON   CHECK(CHECK_COMMENT)
     BEGIN;
     PUT   LIST ('--->'××RECIN××'<---')  SKIP(1);
     PUT   SKIP(1);
     END;
-DCL   CARD_PENDING  BIT(1)  INIT(''B)  STATIC;
0DCL   (PRE_NOT_FOUND ,SUP_NOT_FOUND ,NOT_COMMENT ,NOT_END)  BIT(1);
 %SKIP(4);
 ON   ENDFILE(PTFTAPE)
     BEGIN;    DCL  SECOND  BIT(1)  INIT(''B)  STATIC;
     RECIN  =  '++END';
     IF  SECOND  /* ENDFILE RAISED MORE THAN ONCE */
     THEN   SIGNAL  ERROR;
     SECOND  =  '1'B;
     END;
-  IF  CARD_PENDING
   THEN  CARD_PENDING = ''B;
   ELSE DO;
     READ  FILE(PTFTAPE)  INTO(RECIN);
     FRESH_RECORD = '1'B;
         END;
0  DO  WHILE (CROSSES ^= '++');
     READ  FILE(PTFTAPE)  INTO(RECIN);
     FRESH_RECORD = '1'B;
   END;
0  DO   J  =  3  TO  72  WHILE(POS(J) = '');  /* FIND 1ST NON-BLANK */
   END;
   DO  K = J TO 72  WHILE(POS(K)^='' & POS(K)^='(');
   END;
   NEW_STMT = '++' ×× SUBSTR(RECIN,J,K-J);  /* THIS IS STMT TYPE */
 %SKIP(4);
   IF  NEW_STMT = '++PTF'
   THEN DO;
     J  =  INDEX(RECIN, '('  );   /* FIND PARENTHESIS */
     DO   J  =  J+1  TO  72   WHILE(POS(J) = ''); END; /* SKIP BL */
     TEMP_PTF = SUBSTR(RECIN,J,7);  /* EXTRACT PTF NBR */
     READ   FILE(PTFTAPE)  INTO(RECIN);    FRESH_RECORD = '1'B;
     DO  WHILE(CROSSES^= '//'  &  CROSSES^= '++' );
         /* FIND JCL STMT OR NEXT SMP STMT */
       READ  FILE(PTFTAPE)  INTO(RECIN);
       FRESH_RECORD = '1'B;
     END;
0  IF  CROSSES = '//'  /* JCL STMT FOUND */
   THEN DO;
     J  =  INDEX(RECIN,',');  /* COMPONENT ID AFTER 1ST COMMA */
     TEMP_COMP = SUBSTR(RECIN,J+1,5);
        END; /* JCL STMT */
   ELSE DO;  /* NEXT SMP STMT */
     TEMP_COMP = 'DUMMY';
     CARD_PENDING = '1'B;
        END; /* NEXT SMP STMT (DUMMY PTF) */
        END; /* PTF STMT */
-  IF  NEW_STMT = '++VER'
   THEN DO;  /* VER STMT */
   IF  OLD_STMT = '++PTF'  /* FIRST VER AFTER PTF STMT */
   THEN   WRONG = 'YES';  /* ASSUME WRONG RELEASE UNTIL VER STMT    */
                          /* SHOWS OTHERWISE.                       */
     J  =  INDEX (RECIN,  RLSENUM);  /* CHECK FOR RELEASE NBR */
0  IF  J ^= 0  /* RELEASE NBR MATCHES */
   THEN DO;  /* CORRECT RELEASE */
     WRONG = 'NO';
0    PRE_NOT_FOUND ,SUP_NOT_FOUND ,NOT_COMMENT ,NOT_END  =  '1'B;
     CALL   CHECK_COMMENT_INIT;   /* INIT COMMENT PROCESSING */
     CALL   CHECK_COMMENT;   /* SCAN CARD FOR COMMENT ---           */
            /* JC CONTAINS STARTING POSITION,                       */
            /* KC CONTAINS ENDING POSITION OF COMMENT               */
            /* NO COMMENT ................. JC = 73    KC = 0       */
            /* ENTIRE CARD IS COMMENT ..... JC = -1    KC = 73      */
            /* CONTINUED COMMENT ENDING ... JC = -1    KC < 73      */
            /* STARTED COMMENT CONTINUING . JC > 0     KC = 73      */
   DO   WHILE ((PRE_NOT_FOUND × SUP_NOT_FOUND) & NOT_COMMENT
                                               & NOT_END);
0  IF  PRE_NOT_FOUND
   THEN DO;
     FRESH_RECORD = ''B;
   J  =  INDEX(RECIN,  'PRE'  );
   IF  J ^= 0  & J < JC
   THEN DO;CALL  SCAN_FILE_LIST (PRETABLE ,PREEND ,J);  /* SCAN FILE */
           /* FOR ALL PRE ENTRIES AND PUT THEM INTO PRETABLE.        */
           PRE_NOT_FOUND = ''B;
        END;
        END;
0  IF  SUP_NOT_FOUND
   THEN DO;
     FRESH_RECORD = ''B;
     K  =  INDEX(RECIN,  'SUP'  );
   IF  K ^= 0 & K < JC
   THEN DO;
     SUP_NOT_FOUND = ''B;
     CALL   SCAN_FILE_LIST (SUPTABLE ,SUPEND ,K);
        END;
        END;
   IF  (PRE_NOT_FOUND × SUP_NOT_FOUND) &  ^FRESH_RECORD
   THEN DO;
     READ   FILE(PTFTAPE) INTO(RECIN);
     FRESH_RECORD = '1'B;
     CALL   CHECK_COMMENT;
        END;
     NOT_COMMENT  =  (SUP_NOT_FOUND × PRE_NOT_FOUND)  &
                     (KC<JC /* NO COMMENT ON THIS CARD */  ×
                      JC>0 × KC<73 /* THERE IS SPACE OUTSIDE COMM. */);
     K  =  INDEX (RECIN,  '.'  );  /* LOOK FOR STMT TERMINATOR */
     NOT_END  =  K=0 × K<KC;
  END; /* DO WH */
-  IF  NOT_COMMENT
   THEN ;
   ELSE   CALL  SCAN_FILE_APARS;  /* SCAN INSIDE COMMENT FOR APARS */
                                  /* FIXED.                        */
        END; /* CORRECT RELEASE */
        END; /* VER STMT */
-  IF  NEW_STMT = '++MOD' × NEW_STMT = '++MAC' × NEW_STMT = '++ZAP' ×
       NEW_STMT = '++UPDTE'
   THEN DO;  /* MODULE MODIFICATION STMT */
     J  =  INDEX(RECIN,  '('  );
     DO   J  =  J+1  TO  72   WHILE(POS(J) = '');   END;
     DO   K  =  J+1  TO  72   WHILE(POS(K) ^= '' & POS(K) ^= ')');  END;
     MODULE  =  SUBSTR (RECIN,J,K-J);
        END; /* MOD STMT */
 %PAGE;
 CHECK_COMMENT:   PROC;
-  IF  KC < 73  /* PREVIOUS CARD CONTAINS NO OPEN COMMENT */
   THEN DO;
     JC  =  INDEX (RECIN,  '/*'  );
     KC  =  INDEX (RECIN,  '*/'  );
   IF  JC = 0  /* NO COMMENT STARTING */
   THEN DO;
     JC = 73;  KC = 0;
        END;
   ELSE
   IF  KC = 0  /* COMMENT NOT ENDING */
   THEN   KC = 73;
        END;
   ELSE DO;
     JC  =  -1;
     KC  =  INDEX (RECIN,  '*/'  );
   IF  KC = 0
   THEN   KC = 73;
        END;
0RETURN;
 %SKIP(5);
 CHECK_COMMENT_INIT:  ENTRY;   /* INITIALIZE POSITION VALUES */
-    JC  =  73;
     KC  =  0;   /* INDICATES NO COMMENT */
-END;  /* CHECK_COMMENT */
 %PAGE;
 SCAN_FILE_LIST:   PROC  (TABLE ,END ,K);
-DCL   TABLE (*)   CHAR(7)  CONNECTED   ,(END ,K)  BIN(15,0);
0DCL   NOT_END  BIT(1)   ,(J ,H ,F)  BIN(15,0);
-ON  CHECK(RETURN)
     PUT LIST('*** PRE/SUP ***', (TABLE(J) DO J = 1 TO END-1)) SKIP(2);
 %SKIP(5);
     SEQNBR = '';  /* ERASE SEQUENCE NBR FOR SCANNING */
     H  =  HBOUND(TABLE,1);
     $SCAN  =  ADDR (POS(K+3)); /* POSITION STRING 'SCAN' AFTER     */
                              /* 'PRE' OR 'SUP' KEYWORD.            */
     L  =  INDEX (SCAN,  '('  ) ;
-    NOT_END = '1'B;
0DO   WHILE (NOT_END);
     DO   J  =  L+1  TO  72  WHILE($SCAN->POS(J) = '' ×
                                   $SCAN->POS(J) = ',');
          /* SKIP BLANKS AND COMMAS TO FIND BEGINNING OF NEXT ITEM */
     END;
     $SCAN  =  ADDR ($SCAN->POS(J));
0  IF  J ^> 72
   THEN DO;
     DO   L  =  1  TO  72   WHILE($SCAN->POS(L)^=','  &
                                  $SCAN->POS(L)^=' '  &
                                  $SCAN->POS(L)^=')'  );
     END;
     NOT_END  =  $SCAN->POS(L) ^= ')';
   IF  END ^> H
   THEN DO;
     TABLE(END)  =  SUBSTR(SCAN,1,L-1);
     END = END + 1;
       END;
   ELSE DO;
     NOT_END = ''B;
        END;
        END;
   ELSE DO;
     READ  FILE(PTFTAPE)  INTO(RECIN);
     FRESH_RECORD = '1'B;
     CALL   CHECK_COMMENT;
     L = 0;
     $SCAN  =  ADDR(RECIN);
        END;
0END; /* DO  WHILE  NOT_END */
 RETURN:
-END; /* SCAN_FILE_LIST */
 %PAGE;
 SCAN_FILE_APARS:   PROC;   /* SCAN FILE FOR APARS FIXED INSIDE COMM. */
-DCL   NOT_END  BIT(1)  INIT('1'B)   ,FOUND  BIT(1);
0DCL   (J ,K                                                 ) AUTO;
-ON  CHECK(RETURN)
     PUT LIST('*** APARS ***', (FIXEDTABLE(J) DO J = 1 TO FIXEDEND-1))
         SKIP(2);
     SEQNBR = '';  /* ERASE SEQUENCE NBRS FOR SCANNING */
0DO   WHILE (NOT_END);
     $SCAN  =  ADDR (POS(JC+2));  /* POSITION AFTER BEGINNING OF  */
                                  /* COMMENT.                     */
     J  =  INDEX (SCAN,  'APAR'  );  /* SEARCH FOR APARS FIXED */
     FOUND = ''B;
0  IF  J ^= 0  /* WORD 'APAR' FOUND */
   THEN DO;
     $SCAN  =  ADDR($SCAN->POS(J+5));  /* POSITION AFTER 'APAR' OR */
                                       /* 'APARS'.                 */
     DO   K  =  1  TO  72   WHILE ($SCAN->POS(K) = '');  END;
   IF  SUBSTR(SCAN,K,3) = 'FIX'
   THEN DO;  /* ASSUME  BEGINNING OF APARS FIXED LIST FOUND */
     $SCAN  =  ADDR ($SCAN->POS(K+5)); /* POSITION AFTER 'FIX.' OR  */
                                       /* 'FIXED'.                  */
     FOUND = '1'B;
        END;
        END;
0  IF   FOUND   /* KEYWORDS 'APARS FIXED' FOUND */
   THEN DO;
     DO   J  =  1  TO  72;   /*  ERASE COLONS & HYPHENS, SO THAT  */
             /* THE LOGIC FOR THE FIRST ITEM WILL BE THE SAME AS  */
             /* THAT FOR THE OTHER ITEMS.                         */
     IF  $SCAN->POS(J) = ':'   THEN   $SCAN->POS(J) = '';
     IF  $SCAN->POS(J) = '-'   THEN   $SCAN->POS(J) = '';
     END;
-DO   WHILE (NOT_END);  /* BREAK DOWN LIST OF APARS FIXED */
0    J  =  INDEX (SCAN,  'OZ'  );  /* FIND NEXT APAR */
0  IF  J = 0   /* NOT FOUND */
   THEN DO;
     READ  FILE(PTFTAPE)  INTO(RECIN);
     FRESH_RECORD = '1'B;
     $SCAN  =  ADDR (RECIN);
     CALL   CHECK_COMMENT;
     NOT_END  =  KC > JC  &  CROSSES ^= '++'; /* STILL COMMENT ON    */
                          /* THIS CARD & NOT A NEW STMT.          */
     CARD_PENDING  =  ^NOT_END; /* ONE CARD TOO MANY READ */
        END;
   ELSE DO;  /* 'OZ' FOUND */
   DO   K  =  1  TO  J-1;
   IF  $SCAN->POS(K)^=' ' & $SCAN->POS(K)^=','
   THEN
   IF  FIXEDEND > 1  ×  $SCAN->POS(K) ^= '('  /* ALLOW AN OPENING */
                        /* PARENTHESIS TO PRECEDE FIRST ITEM.     */
   THEN
     NOT_END = ''B;  /* ASSUME END OF APARS FIXED */
   END;
   IF  NOT_END
   THEN DO;
     FIXEDTABLE(FIXEDEND)  =  SUBSTR(SCAN,J,7);
     FIXEDEND = FIXEDEND + 1;
     $SCAN  =  ADDR($SCAN->POS(J+7));
        END;
        END; /* 'OZ' FOUND */
0END; /* DO WHILE NOT_END OF APARS FIXED LIST */
        END; /* 'APARS FIXED' FOUND */
0  ELSE DO;
     READ   FILE(PTFTAPE)  INTO(RECIN);
     FRESH_RECORD = '1'B;
     CALL   CHECK_COMMENT;
     $SCAN  =  ADDR (RECIN);
     NOT_END  =  KC > JC;  /* STILL INSIDE COMMENT */
     CARD_PENDING  =  ^NOT_END;  /* ONE CARD TOO MANY READ */
        END;
0END; /* DO WHILE NOT_END OF APARS FIXED PART */
 RETURN:
-END; /* SCAN_FILE_APARS */
-END; /* NEXT_STATEMENT */
1OUTIT: PROCEDURE;
    DECLARE MAXVAL         FIXED BINARY (15);
    DECLARE COUNTER        FIXED BINARY (15);
    ON ENDPAGE (SYSPRINT)
    BEGIN;
         CALL HEDDR;
         END;
    CALL SHUFFLE (ACCEPT,ACCEPT_END);
    CALL SHUFFLE (PROBLEMS,PROBLEMS_END);
    OUTSTRING = TEMPSTRING;
    STAR0 = 'I';
    STAREND = 'I';
    STAR1 = 'I';
    STAR2 = 'I';
    STAR3 = 'I';
    STAR4 = 'I';
    STAR5 = 'I';
    PTFNUM = OLD_PTF;
    COMPONENT = OLD_COMP;
    IF SUPEND >= PREEND THEN MAXVAL = SUPEND;
                        ELSE MAXVAL = PREEND;
    IF MAXVAL < FIXEDEND THEN MAXVAL = FIXEDEND;
    IF MAXVAL < (PROBLEMS_END - 1)*3
    THEN MAXVAL = (PROBLEMS_END - 1)*3;
    IF MAXVAL < (ACCEPT_END - 1)*3 THEN
    MAXVAL = (ACCEPT_END - 1)*3;
    PREREQ1 = PRETABLE(1);
    PREREQ2 = PRETABLE(2);
    PREREQ3 = PRETABLE(3);
    SUPERCEDES1 = SUPTABLE(1);
    SUPERCEDES2 = SUPTABLE(2);
    SUPERCEDES3 = SUPTABLE(3);
    APARS_FIXED1 = FIXEDTABLE(1);
    APARS_FIXED2 = FIXEDTABLE(2);
    APARS_FIXED3 = FIXEDTABLE(3);
    ACCEPT_RESTORE = ACCEPT(1);
    PROBLEM = PROBLEMS(1);
    COUNTER = 4;
    IF LINENO(PTFPRINT)+((MAXVAL+5)/3)> 60  THEN CALL HEDDR;
    IF WRONG = 'YES' THEN WRONGER = 'WRONG RELEASE';
    IF ALREADYIN = 'ALREADY IN' THEN WRONGER = '  ALREADY IN ';
    IF WRONG = 'YES'  THEN
    DO;
         APARS_FIXED1 = '       ';
         APARS_FIXED2 = '       ';
         APARS_FIXED3 = '       ';
         ACCEPT_RESTORE = '       ';
         PROBLEM = '       ';
         END;
    PUT EDIT (OUTSTRING) (COL(1),A)  FILE(PTFPRINT);
    OUTSTRING = ' ';
    STAR0 = 'I';
    STAREND = 'I';
    STAR1 = 'I';
    STAR2 = 'I';
    STAR3 = 'I';
    STAR4 = 'I';
    STAR5 = 'I';
    DO WHILE (COUNTER   <= MAXVAL);
         PREREQ1 = PRETABLE(COUNTER);
         PREREQ2 = PRETABLE(COUNTER+1);
         PREREQ3 = PRETABLE(COUNTER+2);
         SUPERCEDES1 = SUPTABLE(COUNTER);
         SUPERCEDES2 = SUPTABLE(COUNTER+1);
         SUPERCEDES3 = SUPTABLE(COUNTER+2);
         APARS_FIXED1 = FIXEDTABLE(COUNTER);
         APARS_FIXED2 = FIXEDTABLE(COUNTER+1);
         APARS_FIXED3 = FIXEDTABLE(COUNTER+2);
         ACCEPT_RESTORE = ACCEPT((COUNTER+2)/3);
         PROBLEM = PROBLEMS((COUNTER+2)/3);
         PUT EDIT (OUTSTRING) (COL(1),A)  FILE(PTFPRINT);
         COUNTER = COUNTER + 3;
         OUTSTRING = TEMPSTRING;
    STAR0 = 'I';
    STAREND = 'I';
         STAR1 = 'I';
         STAR2 = 'I';
         STAR3 = 'I';
         STAR4 = 'I';
         STAR5 = 'I';
         END;
    PUT EDIT ('I',(32)'-','I',(25)'-','I',(25)'-','I',(25)'-','I',
         (9)'-','I',(9)'-','I') (COL(1),A,A,A,A,A,A,A,A,A,A,A,A,A)
         FILE(PTFPRINT);
    RETURN;
1SHUFFLE: PROCEDURE(TABLE1,TABLE_STOP);
    DECLARE (I,J,K) FIXED BINARY (15);
    DECLARE TABLE1 (*) CHARACTER(7)  CONNECTED;
    DECLARE TABLE_STOP FIXED BINARY (15);
    I = 1;
    DO WHILE ( I < TABLE_STOP);
         J = I + 1;
         DO WHILE (J < TABLE_STOP);
              IF TABLE1(I) = TABLE1(J) THEN
              DO;
                   K = I;
                   DO WHILE (K < TABLE_STOP - 1);
                        TABLE1(K) =  TABLE1(K + 1);
                        K = K + 1;
                        END;
                   I = I - 1;
                   TABLE1(TABLE_STOP - 1) = '       ';
               J,  TABLE_STOP = TABLE_STOP - 1;
                   END;
              J = J + 1;
              END;
         I = I + 1;
         END;
    END SHUFFLE;
    END OUTIT;
1HEDDR: PROCEDURE;
    DECLARE TIME BUILTIN;
    DECLARE DATE BUILTIN;
  DCL   RZID  ENTRY  RETURNS(CHAR(28) VAR);
    PUT  PAGE EDIT ('TAPE ',TAPENUM,'PAGE ',PAGENUM)
    (COL(5),A,A,COL(126),A,F(2))   FILE(PTFPRINT);
    PAGENUM = PAGENUM + 1;
         PUT       EDIT ('SWISS BANK CORPORATION') (COL(51),A)
                   FILE(PTFPRINT);
         PUT EDIT ('REL. ' ,RLSENUM ,RZID ,
         'DATE ',SUBSTR(DATE,1,2),SUBSTR(DATE,3,2),SUBSTR(DATE,5,2))
         (COL(5) ,A ,A
         ,COL(49+(28-LENGTH(RZID))/2),A,COL(115),A,COL(121),A
         ,COL(124),A,COL(127),A)
         FILE(PTFPRINT);
         PUT EDIT ('TIME ',SUBSTR(TIME,1,2),SUBSTR(TIME,3,2))
         (COL(115),A,COL(121),A,COL(124),A)  FILE(PTFPRINT);
         PUT SKIP(1) EDIT ('SUMMARY OF PTF TAPE INFORMATION')
              (COL(47),A)  FILE(PTFPRINT);
         PUT SKIP(2) EDIT ((132)'*') (COL(1),A)  FILE(PTFPRINT);
         PUT EDIT ('*',(32)' ','*',(3)'                         *',
              '         *         *') (COL(1),A,A,A,A,A)
              FILE(PTFPRINT);
         PUT EDIT ('*  PTF    SW  PE  FIX FOR   COMP *      ',
              'PREREQUISITES      *        SUPERCEDES       ',
              '*       APARS FIXED       * ACCEPT  * PROBLEMS*')
              (COL(1),A,A,A)   FILE(PTFPRINT);
         PUT EDIT ('*  NUM    NUM       PE           *',
              (3)'                         *',' RESTORE *         *')
              (COL(1),A,A,A)   FILE(PTFPRINT);
         PUT EDIT ('*',(32)' ','*',(3)'                         *',
              '         *         *') (COL(1),A,A,A,A,A) FILE(PTFPRINT);
         PUT EDIT ((132)'*') (COL(1),A)  FILE(PTFPRINT);
    END HEDDR;
    END TAPEDIT;
*PROCESS;
-LOGIC:  PROC (PRETABLE, SUPTABLE, FIXEDTABLE, ACCEPT, PROBLEMS,
               ZAPSINSYSTEM, CURRENTMODS,
               PREEND, SUPEND,FIXEDEND,ACCEPT_END, PROBLEMS_END,
               ZAPS_END, CURRENTMODS_END)   REORDER;
-   DECLARE ZAPSINSYSTEM (*)  CHAR(8)  CONNECTED;
    DECLARE ZAPS_END     FIXED BINARY (15);
    DECLARE CURRENTMODS (*)  CHAR(21)  CONNECTED;
    DECLARE CURRENTMODS_END
                         FIXED BINARY(15);
    DECLARE PROBLEMS (*)  CHAR(7)  CONNECTED;
    DECLARE PROBLEMS_END FIXED BINARY (15);
    DECLARE ACCEPT (*)  CHAR(7)  CONNECTED;
    DECLARE ACCEPT_END   FIXED BINARY (15);
    DECLARE FIXEDTABLE (*)  CHAR(7)  CONNECTED;
    DECLARE FIXEDEND     FIXED BINARY(15);
    DECLARE SUPTABLE (*)  CHAR(7)  CONNECTED;
    DECLARE SUPEND       FIXED BINARY(15) ;
    DECLARE PRETABLE (*)  CHAR(7)  CONNECTED;
    DECLARE PREEND       FIXED BINARY (15);
    DECLARE PROBFLAG     CHAR(3);
  DCL   (I ,J ,K);
    /* COMPARE PREREQUISITES AGAINST ZAPS IN THE SYSTEM */
 DO   I  =  1  TO  PREEND-1;
         PROBFLAG = 'YES';
 DO   J  =  1  TO  ZAPS_END-1;
              IF PRETABLE(I) = SUBSTR(ZAPSINSYSTEM(J),1,7)  THEN
              DO;
                   PROBFLAG = 'NO ';
                   IF SUBSTR(ZAPSINSYSTEM(J),8,1) = '*' THEN
                   DO;
                        ACCEPT(ACCEPT_END) = SUBSTR(ZAPSINSYSTEM(J)
                                                                 ,1,7);
                        ACCEPT_END = ACCEPT_END+1;
                        END;
                   J = ZAPS_END;
                   END;
              END;
         IF PROBFLAG = 'YES' THEN
         DO;
                   PROBLEMS(PROBLEMS_END) = PRETABLE(I);
              PROBLEMS_END = PROBLEMS_END + 1;
              END;
         END;
    RETURN;
1MODLOG:  ENTRY (INMOD, PRETABLE, SUPTABLE, FIXEDTABLE, ACCEPT,
                  PROBLEMS, ZAPSINSYSTEM, CURRENTMODS,
                  PREEND, SUPEND, FIXEDEND, ACCEPT_END, PROBLEMS_END,
                  ZAPS_END, CURRENTMODS_END);
0DCL   INMOD  CHAR(10)   ,CMOD  CHAR(10)   ,CZAP  CHAR(7)
      ,CSTAR  CHAR(1);
 DCL   FOUND  BIT(1);
 %SKIP(4);
 DO   I  =  1  TO  CURRENTMODS_END-1;  /* SEARCH MODULE TABLE */
0    CMOD  =  CURRENTMODS(I);
0  IF  CMOD = INMOD   /* MODULE FOUND IN TABLE */
   THEN DO;
     CZAP  =  SUBSTR(CURRENTMODS(I),15,7);  /* EXTRACT ZAP/PTF */
     CSTAR =  SUBSTR(CURRENTMODS(I),14,1);  /* '*' = NOT ACPT  */
0  IF  CSTAR = '*'   /* THIS PTF HAS NOT BEEN ACCEPTED */
   THEN DO;
     ACCEPT(ACCEPT_END)  =  CZAP;
     ACCEPT_END  =  ACCEPT_END + 1;
        END;
0  IF  SUBSTR(CZAP,1,2) = 'BZ' /* MODULE CONTAINS USER ZAP */  ×
       SUBSTR(CZAP,1,2) = 'LZ' /* MODULE CONTAINS LOCAL ZAP */
   THEN DO;
     PROBLEMS(PROBLEMS_END)  =  CZAP;
     PROBLEMS_END  =  PROBLEMS_END + 1;
        END;
0  ELSE
   IF  SUBSTR(CZAP,1,2) = 'AZ'  /* MODULE CONTAINS A ZAP */
   THEN DO;
      /* SUCH A ZAP MUST EITHER BE AN APAR FIXED OR A SUPERSEDED PTF */
     DO J = 1 TO FIXEDEND-1  WHILE(SUBSTR(CZAP,2)^=
                                   SUBSTR(FIXEDTABLE(J),2));
        /* NUMERICAL PART OF APAR NBR MUST BE IDENTICAL */
     END;
     FOUND  =  J < FIXEDEND;
   IF  FOUND
   THEN ;
   ELSE  DO J = 1 TO SUPEND-1  WHILE(CZAP^=SUPTABLE(J));
         END;
     FOUND  =  FOUND × J < SUPEND;
   IF  FOUND
   THEN ;
   ELSE DO;
     PROBLEMS(PROBLEMS_END)  =  CZAP;
     PROBLEMS_END  =  PROBLEMS_END + 1;
        END;
        END; /* AZ-PTF */
0  ELSE
   IF  SUBSTR(CZAP,1,2) = 'UZ'  /* MODULE HAS BEEN REPLACED BY PTF */
   THEN DO;

       /* SUCH A PTF MUST BE EITHER A PREREQUISITE OR A SUPERSEDE */
     DO  J = 1 TO SUPEND-1  WHILE(CZAP^=SUPTABLE(J));
     END;
     FOUND  =  J < SUPEND;
   IF  FOUND
   THEN ;
   ELSE  DO  J = 1 TO PREEND-1  WHILE(CZAP^=PRETABLE(J));
         END;
     FOUND  =  FOUND × J < PREEND;
   IF  FOUND
   THEN ;
   ELSE DO;
     PROBLEMS(PROBLEMS_END)  =  CZAP;
     PROBLEMS_END  =  PROBLEMS_END + 1;
        END;
        END; /* UZ-PTF */
        END; /* MATCHING MODULE */
0  ELSE
   IF  CMOD > INMOD
   THEN
     I  =  CURRENTMODS_END;  /* STOP MODULE SEARCH */
0END; /* MODULE SEARCH */
    END;
*PROCESS;
-PTFLAST: PROC (ZAPS_END ,CURRENTMODS_END ,ZAPSINSYSTEM
               ,CURRENTMODS)  REORDER;
    DECLARE ZAPSINSYSTEM (*)  CHAR(8) CONNECTED;
    DECLARE ZAPS_END     FIXED BINARY (15) ;
    DECLARE CURRENTMODS (*)  CHAR(21) CONNECTED;
    DECLARE CURRENTMODS_END
                         FIXED BINARY(15);
    DECLARE PTFDAT FILE SEQUENTIAL;
    DECLARE PTFPOINT POINTER;
    DECLARE PTFREC CHARACTER (121);
    DECLARE ZAP CHARACTER (7) DEFINED (PTFREC) POS(2);
    DECLARE DATE CHARACTER (6) DEFINED (PTFREC) POS(13);
    DECLARE STATUS CHARACTER(17) DEFINED (PTFREC) POS(22);
    DECLARE SUPNO CHARACTER(7) DEFINED (PTFREC) POS(41);
    DECLARE MOD(6) CHARACTER (10) DEFINED (PTFREC) POS(62);
    DECLARE HEADPOINT POINTER;
    DECLARE NULL BUILTIN;
    DECLARE DUMCHAR CHAR(1);
    DECLARE 1 PTFINFO BASED (PTFPOINT),
                 2 ENTRYDATA CHAR (30),
                 2 LEFTSON POINTER,
                 2 RIGHTSON POINTER;
    DECLARE SEARCHPOINT POINTER;
    DECLARE PGE FIXED BINARY (15) INITIAL(1);
    DECLARE I FIXED BINARY (15) INITIAL(1);
    DECLARE SAVDAT CHARACTER (10) INITIAL ('**********');
    DECLARE ZAP1 CHARACTER (38);
    DECLARE OUTFILE CHARACTER (132) VARYING;
    DECLARE ZIP CHARACTER (38) DEFINED (PTFREC) POS(1);
    DECLARE EDAT2 CHAR(20) DEFINED (EDAT) POS(11);
    DECLARE EDAT1 CHAR(10) DEFINED (EDAT) POS(1);
    DECLARE EDAT3 CHAR(8) DEFINED (EDAT) POS(23);
    DECLARE EDAT4 CHAR(8) DEFINED (EDAT) POS(14);
    DECLARE EDAT CHAR (30);
    DECLARE DUMVAR CHAR(21);
    DECLARE SAVEPOINT POINTER;
    DCL   (IN ,OUT)  BIT(1) INIT('1'B) STATIC;
    DCL   (TABIN ,TABOUT)  INTERNAL STREAM FILE;
 DCL   MORE_LINES  BIT(1)  INIT('1'B)  STATIC;
-   ON ENDFILE (PTFDAT) BEGIN;
    SEARCHPOINT = HEADPOINT;
    CALL RITETREE (SEARCHPOINT);
    GO TO CLOSER;
    STOP;
    END;
-ON  UNDF(TABIN)   IN = ''B;
 ON  UNDF(TABOUT)  OUT = ''B;
-    OPEN   FILE(TABIN) INPUT   ,FILE(TABOUT)  OUTPUT;
-  IF  IN  /* FILE TABIN AVAILABLE */
   THEN DO;
     ON  ENDFILE(TABIN)  GOTO  LOAD;
     GET FILE(TABIN) LIST(ZAPS_END,CURRENTMODS_END,ZAPSINSYSTEM,
                           CURRENTMODS);
 RETURN:
     RETURN;
        END;
-LOAD:
    OPEN FILE (PTFDAT) INPUT;
    READ FILE (PTFDAT) INTO (PTFREC);
    HEADPOINT = NULL;
    DO WHILE (MORE_LINES);
         IF SUBSTR (ZAP,2,1) = 'Z' THEN
         DO;
              IF INDEX(STATUS,'ACPT') = 0 THEN
              ZAPSINSYSTEM(ZAPS_END) = ZAP ×× '*';
              ELSE ZAPSINSYSTEM(ZAPS_END) = ZAP ×× ' ';
              ZAPS_END = ZAPS_END + 1;
              ZAP1 = ZIP;
              CALL SORTTREE;
              READ FILE (PTFDAT) INTO (PTFREC);
     MORE_LINES  =  SUBSTR(PTFREC,2,27) ^=
                    '**** LIST REQUEST COMPLETED';
              DO WHILE ((SUBSTR(ZAP,2,1) ^= 'Z') &
                   MORE_LINES);
                   ZIP = ZAP1;
                   CALL SORTTREE;
                   READ FILE (PTFDAT) INTO (PTFREC);
     MORE_LINES  =  SUBSTR(PTFREC,2,27) ^=
                    '**** LIST REQUEST COMPLETED';
                   END;
              END;
         ELSE DO;
              READ FILE (PTFDAT) INTO (PTFREC);
     MORE_LINES  =  SUBSTR(PTFREC,2,27) ^=
                    '**** LIST REQUEST COMPLETED';
        END;
         END;
    SEARCHPOINT = HEADPOINT;
    CALL RITETREE (SEARCHPOINT);
-   CLOSER: CLOSE FILE (PTFDAT);
0  IF  OUT  /* FILE TABOUT AVAILABLE */
   THEN DO;
     PUT FILE(TABOUT)LIST(ZAPS_END,CURRENTMODS_END,ZAPSINSYSTEM,
                           CURRENTMODS);
     CLOSE   FILE(TABOUT);
         END;
     IF  ZAPS_END-1 > HBOUND(ZAPSINSYSTEM,1) ×
         CURRENTMODS_END-1 > HBOUND(CURRENTMODS,1)
     THEN DO;
       PUT LIST('*** TABLE OVERFLOW - RUN TERMINATED')  SKIP(5);
       PUT LIST('ZAPS:' ,ZAPS_END-1 ,'MODULES:' ,CURRENTMODS_END-1);
       STOP;
          END;
1SORTTREE: PROCEDURE;
    DECLARE PTFNUM CHARACTER(7) INITIAL ('       ');
    DECLARE FLAG CHAR (3);
    DECLARE DATECHANGED CHARACTER (6);
    DECLARE PTFSTAT CHAR(17);
    DECLARE MODNAME CHARACTER(10);
    DECLARE I FIXED BINARY (15);
    DUMCHAR = SUBSTR(MOD(1),1,1);
    FLAG = 'NO ';
    IF DUMCHAR >= 'A' & DUMCHAR <= 'I' THEN FLAG = 'YES';
    IF DUMCHAR >= 'J' & DUMCHAR <= 'R' THEN FLAG = 'YES';
    IF DUMCHAR >= 'S' & DUMCHAR <= 'Z' THEN FLAG = 'YES';
    IF DUMCHAR = '$' × DUMCHAR = '@' × DUMCHAR = '#' THEN
    FLAG = 'YES';
    IF FLAG = 'YES' THEN
    DO;
         IF ZAP = '       ' THEN ZAP = PTFNUM;
         IF ZAP ^= '       ' THEN
         DO;
              PTFNUM = ZAP;
              PTFSTAT = STATUS;
              DATECHANGED = DATE;
              MODNAME = MOD(1);
              I = 1;
              DO WHILE (MODNAME ^= '          ' & I <= 6);
                   CALL TREEBILD;
                   I = I + 1;
                   MODNAME = MOD(I);
                   END;
              END;
         END;
1TREEBILD: PROCEDURE;
    DECLARE STAR CHARACTER (1) INITIAL('*');
    DECLARE BLANK CHARACTER (1) INITIAL (' ');
    IF INDEX (PTFSTAT,'ACPT') = 0 THEN
         EDAT = MODNAME ×× '   ' ×× STAR ×× ' ' ×× DATECHANGED ×× '  '
         ×× ZAP;
    ELSE
         EDAT = MODNAME ×× '     ' ×× DATECHANGED ×× '  ' ×× ZAP;
    IF HEADPOINT = NULL THEN
    DO;
         ALLOCATE PTFINFO SET (HEADPOINT);
         HEADPOINT -> ENTRYDATA = EDAT;
         HEADPOINT -> LEFTSON = NULL;
         HEADPOINT -> RIGHTSON = NULL;
         END;
    ELSE
    DO;
         SEARCHPOINT = HEADPOINT;
         DO WHILE (SEARCHPOINT ^= NULL);
              SAVEPOINT = SEARCHPOINT;
              IF EDAT < SAVEPOINT -> ENTRYDATA THEN
                   SEARCHPOINT = SEARCHPOINT -> LEFTSON;
              IF EDAT > SAVEPOINT -> ENTRYDATA THEN
                   SEARCHPOINT = SEARCHPOINT -> RIGHTSON;
                        IF EDAT = SAVEPOINT -> ENTRYDATA THEN
                        DO;
                             SEARCHPOINT = NULL;
                             PUT EDIT ('ERROR - EQUAL ENTRIES')
                                      (COL(1),A);
                             END;
              END;
         DO;
              IF EDAT < SAVEPOINT -> ENTRYDATA THEN
              DO;
                   ALLOCATE PTFINFO SET (PTFPOINT);
                   SAVEPOINT -> LEFTSON = PTFPOINT;
                   PTFPOINT -> LEFTSON = NULL;
                   PTFPOINT -> RIGHTSON = NULL;
                   PTFPOINT -> ENTRYDATA = EDAT;
                   END;
              ELSE
              DO;
                   ALLOCATE PTFINFO SET (PTFPOINT);
                   SAVEPOINT -> RIGHTSON = PTFPOINT;
                   PTFPOINT -> LEFTSON = NULL;
                   PTFPOINT -> RIGHTSON = NULL;
                   PTFPOINT -> ENTRYDATA = EDAT;
                   END;
              END;
         END;
    END TREEBILD;
    END SORTTREE;
1RITETREE: PROCEDURE (SEARCHPOINT) RECURSIVE;
    DECLARE SEARCHPOINT POINTER;
    IF SEARCHPOINT -> LEFTSON ^= NULL THEN
         CALL RITETREE (SEARCHPOINT -> LEFTSON);
    EDAT = SEARCHPOINT -> ENTRYDATA;
    DUMVAR = (SUBSTR(EDAT,1,14) ×× SUBSTR(EDAT,24,7));
         CURRENTMODS(CURRENTMODS_END) = DUMVAR;
         CURRENTMODS_END = CURRENTMODS_END + 1;
    IF SEARCHPOINT -> RIGHTSON ^= NULL THEN
         CALL RITETREE (SEARCHPOINT -> RIGHTSON);
    END RITETREE;
    END PTFLAST;
*PROCESS;
 /*   R Z I D   ---   GET 'RZ' IDENTIFICATION OF CURRENT SYSTEM */
-RZID:    PROC   RETURNS(CHAR(28) VAR)   REORDER;
0DCL   $A  PTR   ,VA  BIN(31,0)  BASED(ADDR($A))   ,J;
0DCL   SMFID  CHAR(4)  BASED($A);
0DCL   RZTEXT (4)  CHAR(28) VAR  STATIC  INIT
         ('TEST CENTER GOLDENER LOEWEN'
         ,'REGIONALZENTRALE ZUERICH'
         ,'REGIONALZENTRALE BASEL'
         ,'CENTRALE REGIONALE DE GENEVE'
         )
      ,RZCODE (4)  CHAR(1)  STATIC  INIT
         ('T' ,'Z' ,'B' ,'G')
      ;
-    VA  =  16;    /* A(CVT PTR) */
     VA  =  $A->VA;    /* A(CVT) */
     VA  =  VA + 196;
     VA  =  $A->VA;
     VA  =  VA + 16;
-DO   J  =  1  TO  HBOUND(RZCODE,1);
     IF  RZCODE(J) = SUBSTR(SMFID,1,1)
     THEN   RETURN (RZTEXT(J));
 END;
-    RETURN ('SYSTEM ' ×× SMFID);  /* IF NOT FOUND IN TABLE */
-END; /* OF PROGRAM */
