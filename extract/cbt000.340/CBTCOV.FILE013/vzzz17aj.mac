 PROC 0
 GLOBAL &HEXVALUE
 GLOBAL &VALUE
 /*********************************************************************/
 /*     H     H   EEEEEEE    AAAAA    DDDDDD    EEEEEEE   RRRRRR      */
 /*     H     H   E         A     A   D     D   E         R     R     */
 /*     HHHHHHH   EEEEEEE   AAAAAAA   D     D   EEEEEEE   RRRRRR      */
 /*     H     H   E         A     A   D     D   E         R   R       */
 /*     H     H   EEEEEEE   A     A   DDDDDD    EEEEEEE   R     R     */
 /*                                                                   */
 /*********************************************************************/
 /*  CLIST NAME: VSAMDIAG          REL/DATE: 1.0/01.__.79             */
 /*                                                                   */
 /*  DOC: THIS CLIST WILL SCAN ALL THE TCB'S OF THE ASID GIVEN TO     */
 /*       FIND ANY TCB THAT CONTAINS VSAM DATA WHEN THE ACB IS FOUND  */
 /*       IT WILL FIND THS PLH HEADER, THE ACTIVE PST'S , THE RPL'S   */
 /*       FOR THAT PST AND DISPLAY THEM AS WELL AS PRINT IF THE PRINT */
 /*       OPTION IS SELECTED. WHEN IT FINISHES WITH THE SELECTED      */
 /*       ASID IT WILL ASK IF YOU WISH TO ANALYZE ANOTHER ASID OR     */
 /*       EXIT THIS CLIST.                                            */
 /*                                                                   */
 /*  SYMBOLS EQUATED: THE SYMBOLS THAT ARE EQUATED ARE VALID FOR      */
 /*        THAT ASID IF YOU SELECT ANOTHER ASID THE SAME SYMBOL NAMES */
 /*        ARE REUSED.                                                */
 /*        ASVTADDR=ASVT ADDRESS, ASCBADDR=ASCB ADDRESS, ASXBADDR=    */
 /*        ASXB ADDRESS, TCBADDR=TCB ADDRESS, DEB#=DEB ADDRESS,       */
 /*        ACB=ACB ADDRESS, AMBL=AMBL ADDRESS, DATAAMB=DATA AMB       */
 /*        ADDRESS, INAMB=INDEX AMB ADDRESS, PLHDR=PLH HEADER ADDRESS */
 /*        PLH#=PLH ADDRESS, RPL#=RPL ADDRESS.                        */
 /*                                                                   */
 /*  SYMBOLS FOUND:ASVT, ASCB, ASXB, TCB, ALL THE DEB IN A TCB,       */
 /*        THE ACB, THE AMBL FOR AN ASID, DATA AMB, INDEX AMB,        */
 /*        PLH HEADER, RPLS FOR ONE TCB                               */
 /*                                                                   */
 /*                                                                   */
 /*  RETURN: THIS CLIST PASES A SYMBOLIC &VALUE TO CLIST 'HEX'        */
 /*        AND RECEIVES A SYMBOLIC &HEXVALUE FRON CLIST 'HEX'         */
 /*                                                                   */
 /*  DEPENDENCIES: 1) THIS CLIST REQUIRES THAT TSO COMMAND            */
 /*                   CLEAR BE INSTALLED IN YOUR ENVIRONMENT.       */
 /*                                                                   */
 /*                2) THIS CLIST REQUIRES THAT CLIST 'HEX'            */
 /*                   BE INSTALLED AND CONCATENATED TO YOUR LOGON.    */
 /*                                                                   */
 /*  USE: WHEN EXECUTED THIS CLIST WILL ASK IF YOU REQUIRE THE PRINT  */
 /*        OPTION IF YOU REPLY YES ALL CONTROL BLOCKS FOUND WILL BE   */
 /*        PUT TO THE PRINT DATASET. THIS CLIST ALSO REQUIRES THAT    */
 /*        YOU SUPPLY THE ASID YOU WISH TO ANALYZE. WHEN IT COMPLETES */
 /*        ANALYIZATION OF THE SELECTED ASID YOU MAY EITHER EXIT OR   */
 /*        SELECT ANOTHER ASID. IF YOU SELECT ANOTHER ASID THE        */
 /*        EQUATES DONE FOR THE FIRST ASID ARE REPLACED BY THE        */
 /*        EQUATES FROM THE SECOND ASID SELECTED.                     */
 /*                                                                   */
 /*                                                                   */
 /*     NOTE: MEMBERS NAMES INCLUDED IN THIS PACKAGE ARE:             */
 /*            VSAMDIAG                                               */
 /*                                                                   */
 /*SJM*****************************************************************/
  BEGIN: +
           SET &FOUNDIT=0
           WRITENR DO YOU WISH THE PRINT OPTION? (Y)/N ===>
           READ &ANS
           IF &ANS^=N THEN DO
           SETD PRINT
           END
           SET &DEBNUM=1
           SET &PLHNUM=1
           WRITE ENTER ASID, IN DECIMAL, YOU WISH VSAMDIAG TO CHECK.
           WRITENR (IE.1 OR 10 OR 28 ETC.) ===>
           READ &ASID
           SETD ASID(&ASID) FLAG(SEVERE) /* ASID NUMBER*/
           IF &LASTCC^=0 THEN DO
           WRITE ASID &ASID NOT AVAILABLE
           GOTO ENDALL
           END
           EQ ASVTADDR CVT+22C% PTR LE(4) ASID(&ASID) /*ASVT ADDRESS*/
           SET &ASVTOFFS=&ASID*4
           EQ ASCBADDR ASVTADDR+20C+&ASVTOFFS.N%  /* CREATE ASCB ADDR*/
           EQ ASXBADDR ASCBADDR+6C% PTR LE(4)     /*    "   ASXB   " */
           EQ TCBADDR ASXBADDR+4%+74%+74%+74% PTR LE(4)
           GOTO START
    CONTIN:EVAL TCBADDR+74 LE(4)
           SET &CK=&LASTCC
           IF &CK^=0 THEN DO
           EQ TCBADDR TCBADDR+74% LE(4) PTR
           IF &CK=12 THEN GOTO ENDIT
           GOTO START
           END
     ENDIT:WRITE ALL TCBS HAVE BEEN CHECKED FOR ASID &ASID.
            IF &FOUNDIT=0 THEN +
           WRITE THERE WERE NO VSAM ACBS FOUND
           GOTO ENDALL
     START:EVAL TCBADDR+8 LE(4)
           IF &LASTCC=0 THEN GOTO CONTIN
           EVAL TCBADDR+8% LE(4)
           IF &LASTCC=12 THEN GOTO CONTIN
           EQ DEB&DEBNUM TCBADDR+8% LE(4) PTR /*GET DEB QUEUE */
   ANALYZE:EQ DCB DEB&DEBNUM+18% LE(4) PTR   /* GET DCB ADDRESS */
           EVAL DEB&DEBNUM+18 LE(4)
           SET &DCBADDR=&LASTCC
           IF &DCBADDR=0  THEN GOTO CONTIN
           EVAL DEB&DEBNUM+18% LE(4)
           IF &LASTCC=12 THEN GOTO CONTIN
           %HEX &DCBADDR
           SET &DCBADDR=&HEXVALUE
           COMPARE ADDR(DCB+0) LEN(1) +
           WITH(VALUE(X'A0') LEN(1)      /* IS THIS A VSAM ACB */
           IF &LASTCC^=0 THEN GOTO D2         /* NO FIND NEXT DEB */
           EVAL DCB+2 LE(2)                    /* FIND LENGTH OF ACB */
           SET &ACBLEN=&LASTCC
           EQ ACB DCB LEN(&ACBLEN) STR(ACB)    /* EQUATE ACB */
           NOTE 'THE ACB IS AT &DCBADDR  '
           LIST ACB NOTERMINAL
           SET &FOUNDIT=1
           EVAL ACB+4 LEN(4)                   /* GET AMBL ADDRESS */
           SET &AMBLADDR=&LASTCC
           IF &AMBLADDR=0 THEN DO
           NOTE 'THERE IS NO AMBL ADDRESS'
           GOTO CONTIN
           END
           %HEX &AMBLADDR
           SET &AMBLADDR=&HEXVALUE             /* FIND LEN OF AMBL */
           EVAL &AMBLADDR..+22 LE(2)
           SET &AMBLLEN=&LASTCC
           EQ AMBL &AMBLADDR.. LE(&AMBLLEN) PTR   /* EQUATE AMBL */
           NOTE 'AMBL IS AT ADDRESS &AMBLADDR '
           EVAL AMBL+34 LE(4)                  /* GET DATA AMB ADDRESS*/
           %HEX &LASTCC
           SET &AMB=&HEXVALUE
           EVAL &AMB..+2 LE(2)
           SET &AMBLEN=&LASTCC                 /* FIND LEN OF DATA AMB*/
           EQ DATAAMB &AMB.. LE(&AMBLEN) PTR  /* EQUATE DATA AMB */
           NOTE 'THE DATA AMB IS AT ADDRESS &AMB '
           EVAL AMBL+38 LE(4)             /* IS THERE AN INDEX AMB */
           SET &INAMB=&LASTCC
           IF &INAMB^=0 THEN DO               /* IF YES GET ADDR */
           %HEX &INAMB
           SET &INAMB=&HEXVALUE
           EVAL &INAMB..+2 LE(2)            /* FIND LEN OF INDEX AMB */
           SET &INAMBLE=&LASTCC
           EQ INAMB &INAMB.. LE(&INAMBLE) PTR /* EQUATE INDEX AMB */
           END
           EVAL DATAAMB+C LEN(4)     /* GET ADDRESS OF PLH HEADER */
           %HEX &LASTCC
           SET &PLHDR=&HEXVALUE
           EQ PLHDR &PLHDR.. LEN(100) PTR  /* EQUATE PLH HEADER */
           NOTE 'THE PLH HEADER IS AT ADDRESS &PLHDR '
           EVAL PLHDR+A LEN(1)                 /* ARE THERE ANY PLH'S*/
           IF &LASTCC=0 THEN DO                /* NO */
           NOTE 'THERE ARE NO ACTIVE PLH"S FOR THIS DATASET'
           GOTO D2
           END
           EVAL &PLHDR..+2 LEN(2)              /* FIND LENGTH OF PLHS */
           SET &PLHLEN=&LASTCC
           EVAL PLHDR+10 LEN(4)                /* GET 1ST PLH ADDRESS */
           %HEX &LASTCC
           SET &PLH=&HEXVALUE
           EQ PLH&PLHNUM.. LEN(&PLHLEN) PTR   /* EQUATE 1ST PLH */
    F1:    COMPARE ADDR(PLH&PLHNUM) LEN(1) +
           WITH(VALUE(X'FF) LEN(1)             /* IS PLH ACTIVE */
           IF &LASTCC^=0 THEN DO               /* NO */
           NOTE 'PLH&PLHNUM AT ADDRESS &PLH IS NOT ACTIVE '
    F3:    EVAL PLH&PLHNUM+70 LE(4)         /* IS THERE ANOTHER PLH */
           SET &PLHNUM=&LASTCC
           IF &PLHNUM=0 THEN GOTO D2            /* NO */
           %HEX &PLHNUM
           SET &PLHNUM=&PLHNUM+1
           SET &PLH=&HEXVALUE               /* GET NEXT PLH ADDRESS */
           EQ PLH&PLHNUM &PLH.. LEN(&PLHLEN) PTR /* EQUATE NEXT PLH */
           GOTO F1
           END
           LIST PLH&PLHNUM                     /* DISPLAY PLH */
           EVAL PLH&PLHNUM+10 LEN(4)           /* GET CURRENT RPL */
           %HEX &&LASTCC
           SET &RPL=&HEXVALUE
           EVAL &RPL..+3 LEN(1)                /* FIND RPL LEN */
           SET &RPLEN=&LASTCC
           COMPARE ADDR(&RPL..+4) LE(4) +
           WITH(VALUE(&PLH)                    /* DOES THIS RPL POINT */
           IF &LASTCC^=0 THEN GOTO F3          /* TO THIS PLH */
           SET &RPLNUM=&RPLNUM+1
           EQ RPL&RPLNUM &RPL.. LEN(&RPLEN) PTR /* EQUATE RPL#  */
           LIST RPL&RPLNUM                     /* DISPLAY RPL */
           GOTO F3                             /* GO GET NEXT PLH */
   D2:     EVAL DEB&DEBNUM+4  LEN(4)           /* FIND NEXT DEB */
           SET &DEB=&LASTCC
           IF &DEB=0 THEN GOTO CONTIN      /* NO MORE END */
           EVAL DEB&DEBNUM+4% LEN(4)
           IF &LASTCC=12 THEN GOTO CONTIN  /* NO MORE END */
           %HEX &DEB
           SET &DEBNUM=&DEBNUM+1
           SET &DEB=&HEXVALUE
           EQ DEB&DEBNUM &DEB.. LEN(4) PTR    /* EQUATE NEXT DEB */
           GOTO ANALYZE                        /* GO ANALYZE */
 ENDALL:   WRITE
           WRITENR ENTER Y TO REPEAT FOR ANOTHER ASID OR X TO EXIT ==>
           READ &ANS
           IF &ANS^=X THEN GOTO BEGIN
