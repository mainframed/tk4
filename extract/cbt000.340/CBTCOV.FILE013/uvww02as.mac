*  THIS IS SOURCE CODE OF VW SPECIAL SEQUENTIAL RANDOMIZER
*** VALID RANGES ***
* 1) KEYS    ACCEPTS KEYS OF FORM  PREFIX-METRIC
*            WHERE PREFIX IS 0-4 CHARS
*                  METRIC 1S 1-8 NUMERICS  (ZONED OR UNZONED)
* 2) DBD SPECS
*   DBD MUST SPECIFY NUMBER OF BLOCKS IN RANGE 2 TO (2**24)-1
*    AND MUST SPECIFY NUMBER OF RAPS SUCH THAT
*    RAPS X BLOCKS IN RANGE 2 TO (2**31)-1
* RE-ENTRANT. IF CALLED THROUGH DL/I REG7 POINTS TO PST ON ENTRY AND
*    FIRST DWORD USED FOR WORKSPACE.
*   IF CALLED FROM A USER PROGRAM REG7 MUST POINT TO A WRK AREA.
* DOES NOT RANDOMISE TO BLOCK 1 WHICH IS ALWAYS BIT MAP. LATER BIT MAP
* BLOCKS NOT AVOIDED BUT THIS SHOULD HAVE NELIGIBLE PERFORMANCE EFFECT
* REGISTERS AT ENTRY.  SEE SH20-0911 FOR DL/I INTERFACE.
* FOLLOW THEDE CONVENTIONS IF CALLING MODULE DIRECTLY FROM A USER PROG
* R1 POINTS TO
* ...   DS   2F  NOT USED BY MODULE
* ...   DS   X   KEY LENGTH-1.     NOT USED AS EX LENGTH=7 ASSUMED
*...    DS   CL5 NOT USED BY MODULE
*       DS   H   NUMBER ROOT ANCHOR POINTS PER BLOCK
*       DS   F   NUMBER BLOCKS IN ROOT ADDRESSABLE AREA
* ...   DS   2F  NOT USED BY MODULE
*       DS   F   BLOCK-RAP (BBBR) RETURNED BY MODULE
*
* REG7 POINTS TO DS D. WORK AREA FOR MODULE
* REG9 POINTS TO FIRST BYTE OF KEY
* R13- R15    STANDARD OS CONVENTIONS
         SPACE 3
****** SPECIAL CONVENTION FOR PEDATIS DB SPLITTING         ***********
**  NUMBER OF BLOCKS IN RAA TESTED FOR ODD OR EVEN                  **
**     EVEN = SPLIT DB. ONLY ONE TYPE KEY CONTAINING        **
**            IN FIRST POSITION EITHER   A  B  C  D                 **
**                                                                  **
**     ODD  = MIXED KEY GROUPS.  ALL PREFIXES PRESENT.      **
**                                                                  **
**     NOTE   YOU MAY NOT HAVE 2 OR 3 PREFIXES ONLY - UNLESS YOU    **
**            ALLOCATE ODD BLOCKS AS IF ALL PRESENT.                **
*******                                                     **********
         EJECT
         GBLA  &A,&B,&C,&D
R1       EQU   01                ADDR DMBDACS
R2       EQU   02
R3       EQU   03
R4       EQU   04                EVEN/ODD PAIR
R5       EQU   05                OF REGS.
R6       EQU   06
RWRK     EQU   07                ADDR WORK AREA PASSED
RPRE     EQU   08                ADDRESS CURRENT PREFIX BLOCK.
RKEY     EQU   09                ADDR OF KEY PASSED
RDAT     EQU   10                ADRESS CURRENT DATA BLOCK.
RCNT     EQU   11                COUNTING REGISTER
R12      EQU   12                FOR SAVING PASSED KEY ADDR
R13      EQU   13
R14      EQU   14
R15      EQU   15
DMBDACS  DSECT
         DS    CL8
DMBDAKL  DS    X
         DS    CL5
DMBDARAP DS    H
DMBDABLK DS    F
         DS    2F
DMBDACP  DS    F
**** PREFIX BLOCK
PREBLOCK DSECT
NUMPRECS DS    F                 NUMBER OF RECORDS CONTROLLED BY  BLOCK
LNPENT   DS    C                 LENGTH THIS BLOCK.  'FF'=DUMMY LAST
LNPRE    DS    C                 EXECUTABLE PREFIX LENGTH. 'FF'=NO PRE
LNDATA   DS    C                 LENGTH ANY DATA BLOCK CHAINED OFF THIS
LNMETRIC DS    C                 EXECUTABLE METRIC KEY LENGTH.
OFFSET   DS    H                 OFFSET TO FIRST DATA BLOCK
NUMDATA  DS    H                 NUMBER DATA BLOCKS.
PREFIX   DS    CL2,CL2           START OF PREFIX
PRESIZE  EQU   *-PREBLOCK
**** DATA BLOCK
DATBLOCK DS    0C
MEANDIST DS    H                 MEAN INTER-RECORD DISTANCE * 16
NUMDRECS DS    FL3               NUMBER OF RECORDS CONTROLLED BY BLOCK.
LOWMET   DS    FL3               LOWEST METRIC CONTROLLED BY BLOCK.
DATSIZE  EQU   *-DATBLOCK
&B       SETA  L'LOWMET
&A       SETA  4-&B
&D       SETA  L'NUMDRECS
&C       SETA  4-&D
         EJECT
HDAMSEQ  CSECT
         B     12(0,15)
         DC    AL1(7)
         DC    CL7'HDAMSEQ'
         STM   14,12,12(13)
         USING HDAMSEQ,R15
         USING DMBDACS,R1
         SPACE 2
* INITIALISATION
         L     RPRE,=V(TABS)     SET ADDRESSABILITY TO START OF
         A     RPRE,0(RPRE)      PREFIX BLOCKS.
         USING PREBLOCK,RPRE
         LR    RDAT,RPRE         SET ADDRESSABILITY TO START OF
         USING DATBLOCK,RDAT     DATA BLOCKS.
         SR    RCNT,RCNT         CLEAR REG USED TO ACCUMULATE COUNTS
         SR    R2,R2             CLEAR FOR IC INSTRUCTIONS.
         SR    R3,R3             CLEAR FOR IC INSTRUCTIONS.
         LR    R12,RKEY          SAVE KEY ADRESS
         SPACE 2
*1. FIND PREFIX BLOCK.           **************
PRENEXT  IC    R3,LNPENT         LENGTH OF THIS PREFIX BLOCK.STEP TO
         AR    RPRE,R3           NEXT. (PASS OVER FIRST CONTROL BLOCK)
         CLI   LNPENT,X'FF'      EXIT IF DUMMY PREFIX BLOCK
         BE    NOFIND            AS NO SUCH PREFIX EXISTS.
         CLI   LNPRE,X'FF'       EXECUTABLE LENGTH 'FF' MEANS NO PREFIX
         BE    NOPREFIX          AND RKEY POINTS AT KEY METRIC.
         IC    R2,LNPRE          EXECUTABLE LENGTH AND
         EX    R2,PRETEST        CHECK IF  PREFIX BLOCK.
         BNL   PREHIT      (PRETEST IS BOTH DIRECT AND EXECUTABLE)
         SPACE 1
* BLOCK DOES NOT DESCRIBE FULLY QUALIFIED PREFIX AND WILL BE PASSED
* OVER. HOWEVER WE MAY NEED TO COUNT THE RECORDS BEING PASSED.
         TM    DMBDABLK+3,X'01'  CHECK IF NUMBER BLOCKS IN RAA ODD
         BO    PREADD            ODD=MERGED, COUNT ALL PASSED RECORDS.
         SPACE 1
PRETEST  CLC   PREFIX(1),0(RKEY) EVEN=SINGLE PREFIX. CHECK IF THIS
         BNE   PRENEXT           BLOCK DESCRIBES ALL OR PART OF THE
*                                PREFIX, IF YES COUNT PASSED RECORDS.
PREADD   A     RCNT,NUMPRECS     UPDATE COUNT OF RECORDS PASSED OVER.
         B     PRENEXT           GO LOOK FOR FULLY QUALIFIED HIT.
         SPACE 3
         EJECT
** FULLY QUALIFIED PREFIX HIT ***
*2. NOW FIND DATA BLOCK.          ******************
         SPACE 1
PACK1    PACK  0(8,RWRK),0(1,RKEY)  EXEC    PACK                 S1-8
         SPACE 2
CHKEY10  OC    0(1,9),=CL8'00000000'                     CHECK KEY
         SPACE 2
CHKEY15  MVC   0(1,9),=CL8'00000000'                     CHECK KEY
         SPACE 2
PREHIT   LA    RKEY,1(RKEY,R2)   STEP OVER PREFIX.
NOPREFIX IC    R2,LNDATA         LENGTH OF A DATA BLOCK.
         IC    R3,LNMETRIC       EXECUTABLE METRIC LENGTH.
         SPACE 1
CHKEY20  LR    R5,R3                                     CHECK KEY
         EX    R5,CHKEY10                                CHECK KEY
         LA    R4,0(R5,RKEY)                             CHECK KEY
CHKEY40  CLI   0(R4),X'F9'                               CHECK KEY
         BH    CHKEY90                                   CHECK KEY
         BCTR  R4,0                                      CHECK KEY
         BCT   R5,CHKEY40                                CHECK KEY
         CLI   0(R4),X'F9'                               CHECK KEY
         BH    CHKEY90                                   CHECK KEY
         B     CHKEY99                                   CHECK KEY
CHKEY90  EX    R3,CHKEY15         SET KEY TO ZERO        CHECK KEY
CHKEY99  EX    R3,PACK1           CONVERT KEY METRIC TO BINARY   S1-8
         CVB   R5,0(RWRK)                                        S1-8
         ST    R5,0(RWRK)        .                               S1-8
         SPACE 1
         LR    R4,RDAT           SAVE AREA START ADDR.
         AH    RDAT,OFFSET       SET ADDRESSABILITY DATA BLOCK
         TM    NUMDATA+1,X'07'   CHECK IF MORE THAN 7 DATA BLOCKS
         BNZ   METNEXT           IF NOT DO SEQUENTIAL SCAN
         SPACE 3
         SPACE 3
METNEXT  AR    RDAT,R2           STEP TO NEXT ENTRY.-START AT 2ND-
         CLC   LOWMET,&A.(RWRK)
         BL    METNEXT           GO USE NEXT ENTRY. -LAST ENTRY IS  FF.
         BH    FINDD             ENTRY OVERSHOT
         SR    R5,R5             DIRECT HIT. SET OFFSET WITHIN DATA
         B     METEQ             BLOCK TO ZERO.
         SPACE 2
* DATA BLOCK LOCATED.GO CALCULATE OFFSET USING CODE SPECIFIC TO
FINDD    BAL   R14,FINDOFF       DATA BASE AND PUT RESULT IN R5.
METEQ    DS    0H                DIRECT HIT ENTRY R5 ALREADY SET =0.
** NOW SITTING ON BOTH BLOCKS.  HAVE AN OFFSET CALC WITHIN DATA BLOCK
*    IN  R5 AND COUNT OF RECORDS PASSED OVER PLUS CURRENT IN RCNT.
         EJECT
**COMPUTE INTERNAL I-VALUE
         XC    0(4,RWRK),0(RWRK)
         MVC   &C.(&D,RWRK),NUMDRECS
         A     R5,0(RWRK)       FIND OFFSET OF DATA BLOCK LOW METRIC
         AR    RDAT,R2          WITHIN PREFIX AND ADD TO OFFSET
         MVC   &C.(&D,RWRK),NUMDRECS   WITHIN DATA BLOCK.
         C     R5,0(RWRK)       DO NOT ALLOW CALC TO EXCEED OFFSET AT
         BL    OKI              START OF NEXT DATA BLOCK.
         L     R5,0(RWRK)
** THE FOLLOWING 3 INSTRS CAN BE REMOVED WHEN ANALYSER MODIFIED.
         C     R5,=F'0'         CHECK FOR LOWER THAN LOWEST
         BE    OKI
         BCTR  R5,0             SUBTRACT IN CASE HIGHER THAN HIGHEST
         SPACE 1
OKI      AR    R5,RCNT           ADD PASSED OVER RECORD COUNT.
         SR    R4,R4             PRODUCE I-VALUE.
         SLDL  R4,31             MULT BY 2**31
         TM    DMBDABLK+3,X'01'  IF RAA BLOCKS ODD THEN MERGEDAND
         BO    MERGED            OK TO DIVIDE BY TOTAL RECORD COUNT.
         SPACE 1
* HOWEVER IF SINGLE PREFIX MUST FIRST FIND TOTAL RECS FOR THAT PREFIX
* BY SUMMING SUB GROUPS
FULLSUM  CLI   LNPRE,X'FF'       IF NO PREFIX USER SHOULD HAVE GIVEN
         BE    MERGED            ODD- BUT ALLOW FOR MISTAKE.
         A     RCNT,NUMPRECS     ADD IN NEXT SUB GROUP-STARTING
         IC    R3,LNPENT         AT HIT.
         AR    RPRE,R3           STEP TO NEXT PREFIX GROUP
         CLC   PREFIX(1),0(R12)  IS IT SAME   R12=ADDR OF KEY-PREFIX
         BE    FULLSUM           IF SO ACCUMULATE IT
         DR    R4,RCNT           RCNT HAS NOW ACCUMULATED ALL FOR
         B     RANGE             THIS PREFIX
         SPACE 2
MERGED   L     RPRE,=V(TABS)     IN WHICH CASE DIVIDE BY TOTAL RECS IN
         A     RPRE,0(RPRE)      DB. COUNT IN DUMMY FIRST PREFIX.
         D     R4,NUMPRECS
         EJECT
**  STANDARD EXIT CODE USED IN ALL RANGE RATIO METHOD RANDOMISERS **
*    (EG SEE DFSHDC40)
RANGE    L     R2,DMBDABLK       NUMBER BLOCKS
         BCTR  R2,0              MINUS 1
         MH    R2,DMBDARAP       NUMBER RAPS X (BLOCKS-1)
         MR    R4,R2             R5 DEFINED AS 0-1 RANGE WITH POINT
         SRDL  R4,31             BEFORE BIT1. AFTER MULT EXTRACT THE
         LH    R3,DMBDARAP                THE NUMERIC PART
         DR    R4,R3             THEN DIVIDE BY RAPS
         SLL   R5,8              GIVING RAP IN R4 AND BLOCK IN R5.
         LA    R4,513(R4)        ADD 2 TO BLOCK AND 1 TO RAP
         ALR   R5,R4
         ST    R5,DMBDACP
GOBACK   LM    14,12,12(13)
         BR    14
         SPACE 2
** IF PREFIX NOT VALID RETURN HIGHEST BLOCK-RAP
NOFIND   MVC   DMBDACP(3),DMBDABLK+1
         MVC   DMBDACP+3(1),DMBDARAP+1
         B     GOBACK
         EJECT
**** GENERAL SPECIFICATIONS FOR ANY SPECIFIC CODE ****
*ON ENTRY FOLLOWING ADDRESSES MUST BE SET
*  RWRK=DOUBLE WORD WORK AREA.      RPRE=PREFIX BLOCK
*  RKEY=KEY METRIC                  RDAT=DATA BLOCK PLUS 1.
*ALSO ON ENTRY
*  R14 =RETURN ADDRESS              R3  =EXECUTABLE METRIC LENGTH
*ON EXIT FOLLOWING MUST BE SET
* ABOVE REGS AS ON ENTRY EXCEPT    RDAT=DATA BLOCK
*  R5  =OFFSET I-VALUE WITHIN DATA BLOCK
*     R4 R5 R6 CAN BE DESTROYED BY GENERAL ROUTINE
         SPACE 2
FINDOFF  SR    RDAT,R2            POINT TO DATA BLOCK
         SPACE 1
************  SPECIFIC CODE SECTION   **************
* THIS CODE VALID IFF METRIC IS 1 TO 8 BYTES ZONED OR UNZONED NUMERIC.
*     ** THUS  VALID FOR PEDATIS **
         XC    0(4,RWRK),0(RWRK)
         MVC   &A.(&B,RWRK),LOWMET
         S     R5,0(RWRK)        CALCULATE 16 TIMES DIFFERENCE
         SLL   R5,4              MAXIMUM POSSIBLE =1.6 10**9
         SR    R4,R4
         LH    R6,MEANDIST
         N     R6,LOWBITS        SET TO TRUE BINARY
         DR    R4,R6             DIVIDE DIFFERENCE BY MEAN TIMES 16.
         BR    R14
         LTORG
LOWBITS  DS    0F
         DC    X'0000FFFF'
         END
