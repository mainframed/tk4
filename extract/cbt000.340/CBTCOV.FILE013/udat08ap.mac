./ ADD NAME=SPQUIC01
    /*           ***  QUIC  ***             */


 /* NOTE: THE FIRST RECORD OF FILE "OUTPUT" HAS CONTROL VARIABLES IN IT
              THESE ARE USED IN STEP 3 DURNING THE PRINTING OF THE FILES
               PRODUCED BY STEP 1    */




   /*   OVERALL STRUCTURE IS AS FOLLOWS:
      QUIC
      ×  OPTIONS
      ×  TITLE_CARDS
      ×  ×  STOP_RECORDS
      ×  ×  AUTHOR_RECORD
      ×  ×  PROCESS_TITLE
      ×  END TITLE_CARDS
      END QUIC
      SORT
      PRINT                  */

 QUIC: PROCEDURE OPTIONS (MAIN);
 TITLE_BUFFER = ' ';
 DCL (ONSOURCE,ONCHAR) BUILTIN;
 ON CONVERSION SNAP BEGIN;
 PUT LIST (ONCHAR,ONSOURCE);
 SIGNAL ERROR;
 END;
   DECLARE
      AUTHOR_FLAG  BIT(1)  INITIAL('0'B),
       (ALPHA_ONE, ALPHA_OUT, INDEX_TEMP, S_CHAR, SEC_TEMP, TEMP,
          ALPHA_THREE) CHAR (80) INIT ('') VAR,
       (INDEX_IGNORE_1,BIB_IGNORE_1) CHAR (160) INIT ('') VAR,
       (ALPHA_PART3,INDEX_IGNORE_PART3,BIB_IGNORE_PART3) CHAR (40) INIT
          ('') VAR,
       (BIB_IGNORE_3, INDEX_IGNORE_3) CHAR (640) INIT ('') VAR,
       (INDEX_SORT, INDEX_TYPE) CHAR (500) INIT ('') VAR,
       INDEXABLE CHAR (900) INIT ('') VAR,
       (REMOVE_COMMA, ONE_OR_THREE, ONLY_ONE_CHAR, OFF, NO_INDEX_PRINT,
          SEPARATE_INDEX_SEC) BIT (1) INIT ('0'B),
       ON BIT (1) INIT ('1'B),
       (GET_VALUE_OUT, START_INDEX, START_IGNORE_3) FIXED BIN INIT (0),
       CARD CHAR (80) DEF BUFFER,
       CARD_NUM CHAR (3) DEF CARD#,
      1 BUFFER,
         2 TEXT  CHAR(60),
         2 CODE  CHAR(12),
         2 CARD#,
            3 CARD_TYPE  CHAR(1),
            3 SEQUENCE  CHAR(2),
         2 REF  CHAR(5),
      TITLE_BUFFER CHAR (80) DEF BUFFER,
       BREAK_CHARS CHAR (256) VAR INIT (''),
    STANDARD_CHARS CHAR (70) VARYING INITIAL ('. ()-;:?",'''),
       (  GO_WORDS,    AUTHOR_SECTIONS,INDEX_IGNORE,BIB_IGNORE) BIT (1)
                   INIT ('0'B),
       NUM_BREAKS FIXED BIN,
      HEAD_FLAG  BIT(1)  INITIAL('0'B),
      PRINT_FLAG  BIT(1)  INITIAL('0'B),
      COPIES FIXED BIN INIT(1),
      STOP_SORT CHAR (40) VAR INIT (''),
       I_CHAR CHAR (1) INIT ('');
  DCL
      BIB_COUNT FIXED BIN INIT (0),
      BIB_COPIES FIXED BIN INIT (1),
      N2 INIT(80),
      PAGE_SIZE FIXED BIN INIT(60),
      OUTPUT FILE PRINT ENV(F RECSIZE(134)),
        INDEXED FILE PRINT ENV(F RECSIZE(134)),
      TAPE_FILE BIT (1) INIT ('0'B),
      TYPESW BIT (1) INIT ('0'B),
      CTEXT CHAR (81) INIT (''),
      LSORT CHAR (1),
      STOP_WORD (500) CHAR (10) VAR,
      RECORD_COUNT BIN FIXED(31) INIT(0),
      FAKE_ARRAY BIT (20000) INIT('0'B),
      STOP_WORD_USAGE (40,500) BIT (1)        DEF FAKE_ARRAY,
      BIB_PRINT BIT (1) INIT ('0'B),
      STOP_WORD_COUNT  BIN FIXED INITIAL (0);
  DCL
      01  PLITABS STATIC EXTERNAL,
          02  (OFFSET INIT(6),
              PAGESIZE INIT(60),
              LINESIZE INIT(120),
              NO_OF_TABS INIT(5),
              TAB1 INIT(25),
              TAB2 INIT(49),
              TAB3 INIT(73),
              TAB4 INIT(97),
              TAB5 INIT(121)) FIXED BIN (15,0);
 ON ENDPAGE (OUTPUT)  /*  DO NOTHING, PLEASE?  */      ;
 ON FINISH BEGIN;

    PUT SKIP (2) EDIT (RECORD_COUNT,' INDEXED LINES WILL BE SORTED AND P
 RINTED.') (F(6),A);
    PUT SKIP EDIT (BIB_COUNT,' LINES OF BIBLIOGRAPHY WILL BE PRINTED.')
                   (F(6),A);
    PUT SKIP (4) EDIT ('A TOTAL OF',RECORD_COUNT*COPIES +
                  BIB_COUNT*BIB_COPIES + RECORD_COUNT / (PAGE_SIZE -3),
    ' LINES WILL BE PRINTED.') (A,F(8),A);
    END;



                   /* LOGICAL START OF QUIC */

   CALL OPTIONS;

      CALL TYPE;

   CALL TITLE_CARDS;

         GO TO OUT;



                   /* THIS IS THE LOGICAL END OF QUIC */



 OPTIONS: PROCEDURE;    /* CALLED BY QUIC(MAIN) */


                   /* LOGICAL START OF OPTIONS */

 INFORM:     FORMAT (A(60),A(12),A(1),A(2),A(5));
   PUT PAGE LIST ('   OPTIONS IN USE:');
                CTEXT = TITLE_BUFFER;
 READ_OPTIONS:   GET EDIT(BUFFER)(R(INFORM));
   PUT SKIP EDIT(BUFFER)(R(INFORM));
   IF INDEX (CARD,'TITLE') > 0
      THEN RETURN;
   I= INDEX (CARD,'LENGTH');
   IF I > 0
      THEN DO;
         CALL GET_VALUE;
         N2 = GET_VALUE_OUT;
         IF N2 < 20
            THEN N2 = 80;
         IF N2 > 132
            THEN N2 = 132;
         GO TO READ_OPTIONS;
         END;

   I= INDEX (CARD,'PAGE');
   IF I > 0
      THEN DO;
         CALL GET_VALUE;
         PAGE_SIZE = GET_VALUE_OUT;
         IF PAGE_SIZE < 1
            THEN PAGE_SIZE = 60  ;
         IF PAGE_SIZE > 32767
            THEN PAGE_SIZE = 60;
         GO TO READ_OPTIONS;
         END;

   IF INDEX (CARD,'TAPE') > 0
      THEN DO;
         TAPE_FILE = ON;
         GO TO READ_OPTIONS;
         END;

   IF INDEX (CARD,'STOP') > 0
      THEN DO;
    STOP_OPTION:
         PUT SKIP;
         GO TO READ_STOP_WORDS;
         END;


  IF INDEX (CARD,'GO') >0
    THEN DO;
      GO_WORDS = ON;
      GO TO STOP_OPTION;
      END;


   I = INDEX (CARD,'BREAK');
   IF I > 0
      THEN DO;
         CALL ALPHA_GET;
         BREAK_CHARS = BREAK_CHARS ×× ALPHA_OUT;
         GO TO READ_OPTIONS;
         END;


   IF INDEX (CARD,'INDEX') > 0
      THEN DO;

         IF INDEX (CARD,'AUT') > 0
            THEN DO;
              AUTHOR_FLAG = ON;
              NO_INDEX_PRINT = OFF;
               I = INDEX (CARD,'SEC');     /* SECTION */
               IF I > 0
                  THEN DO;
                     REMOVE_COMMA = ON;
                     CALL ALPHA_GET;
                     IF J > 1
                         THEN AUTHOR_SECTIONS = ON;
                     J = LENGTH (ALPHA_OUT);
                     IF J > 0
                        THEN DO;
                           DO I = 1 TO J;
                            INDEX_TYPE = INDEX_TYPE ×× '1' ;
                           END;
                        INDEX_SORT = INDEX_SORT ×× ALPHA_OUT;
                        END;
                     ELSE DO;
                         INDEX_TYPE = INDEX_TYPE ×× '1' ;
                        INDEX_SORT = INDEX_SORT ×× 'I' ;
                        END;
                  END;
                  ELSE IF INDEX (CARD,'SEP') > 0  /* SEPARATE */
                     THEN DO;
                         INDEX_TYPE = INDEX_TYPE ×× '1' ;
                     INDEX_SORT = INDEX_SORT ×× 'A' ;
                     END;
                  ELSE DO;
                         INDEX_TYPE = INDEX_TYPE ×× '1' ;
                     INDEX_SORT = INDEX_SORT ×× 'I' ;
                     END;
               GO TO READ_OPTIONS;
               END;

         I = INDEX (CARD,'TYPE');
         IF I > 0
          THEN IF INDEX (CARD,'PRINT') = 0
            THEN DO;
              NO_INDEX_PRINT = OFF;
               ONLY_ONE_CHAR = ON;
               CALL ALPHA_GET;
               INDEX_TEMP = ALPHA_OUT ×× ',' ;
               I = INDEX (CARD, 'SEC') ; /* SECTION */
               IF I > 0
                  THEN DO;
                     CALL ALPHA_GET;
                     SEC_TEMP = ALPHA_OUT ×× ',' ×× (40) 'I,' ;
                     END;
                  ELSE SEC_TEMP = (40) 'I,' ;
            INDEX_LOOP:
               I_CHAR = SUBSTR (INDEX_TEMP,1,1);
               IF I_CHAR = ','
                  THEN GO TO READ_OPTIONS;
               TEMP = SUBSTR (INDEX_TEMP,2);
               INDEX_TEMP = TEMP;
               I = INDEX (SEC_TEMP,',') ;
               IF I = 1
                  THEN DO;
                      INDEX_TYPE = INDEX_TYPE ×× I_CHAR ;
                     INDEX_SORT = INDEX_SORT ×× 'I' ;
                     TEMP = SUBSTR (SEC_TEMP,2);
                     SEC_TEMP = TEMP;
                     GO TO INDEX_LOOP;
                     END;
               S_CHAR = SUBSTR (SEC_TEMP,1,I-1);
               TEMP = SUBSTR (SEC_TEMP,I+1);
               SEC_TEMP = TEMP;
               J = LENGTH (S_CHAR);
               DO I=1 TO J;
                 INDEX_TYPE = INDEX_TYPE ×× I_CHAR ;
                  END;
               INDEX_SORT = INDEX_SORT ×× S_CHAR;
               GO TO INDEX_LOOP;
               END;
         END;


   IF INDEX (CARD,'PRINT') > 0
      THEN DO;
         IF INDEX (CARD,'BIB') > 0
            THEN DO;
              BIB_PRINT = ON;
               IF INDEX (CARD, 'ONLY') > 0
                  THEN NO_INDEX_PRINT = ON;
               I = INDEX (CARD,'COP');
               IF I > 0
                  THEN DO;
                     CALL GET_VALUE;
                     BIB_COPIES = GET_VALUE_OUT;
                     END;
               I = INDEX (CARD,'IGN');
               IF I > 0
                  THEN DO;
                     BIB_IGNORE = ON;
                     ONE_OR_THREE = ON;
                     CALL ALPHA_GET;
                     BIB_IGNORE_1 = BIB_IGNORE_1 ×× ALPHA_ONE;
                     BIB_IGNORE_3 = BIB_IGNORE_3 ×× ALPHA_THREE;
                     BIB_IGNORE_PART3 = BIB_IGNORE_PART3 ×× ALPHA_PART3;
                     END;
               GO TO READ_OPTIONS;
               END;

         IF INDEX (CARD,'INDEX') > 0
            THEN DO;
              NO_INDEX_PRINT = OFF;
               IF INDEX (CARD,'SEP') > 0 /* SEPARATE */
                  THEN SEPARATE_INDEX_SEC = ON;
               I = INDEX (CARD,'COP'); /* COPIES */
               IF I > 0
                  THEN DO;
                     CALL GET_VALUE;
                     COPIES = GET_VALUE_OUT;
                     END;
               I = INDEX (CARD,'IGN'); /* IGNORE */
               IF I > 0
                  THEN DO;
                      INDEX_IGNORE = ON;
                     ONE_OR_THREE = ON;
                     CALL ALPHA_GET;
                     INDEX_IGNORE_1 = INDEX_IGNORE_1 ×× ALPHA_ONE;
                     INDEX_IGNORE_3 = INDEX_IGNORE_3 ×× ALPHA_THREE;
                     INDEX_IGNORE_PART3 = INDEX_IGNORE_PART3 ××
                                               ALPHA_PART3;
                     END;
               GO TO READ_OPTIONS;
               END;
         END;


   I = INDEX (CARD,'COP');
   IF I > 0
      THEN DO;
         CALL GET_VALUE;
         COPIES = GET_VALUE_OUT;
         GO TO READ_OPTIONS;
         END;



 GET_VALUE: PROC;
      GET STRING (SUBSTR (CARD,I-1+INDEX(SUBSTR(CARD,I),' '))) LIST
                 (GET_VALUE_OUT) ;
      RETURN;
      END GET_VALUE;

   ALPHA_GET: PROC;
   DCL
      (ALPHA,ALPHA_CHAR) CHAR (80) INIT ('') VAR
      ;  /* END DCL */

         ALPHA_OUT = '' ;
         ALPHA_ONE = '' ;
         ALPHA_THREE = '' ;
         ALPHA_PART3 = '' ;
         GET STRING (SUBSTR(CARD,I-1+INDEX(SUBSTR(CARD,I),''''))) LIST
                     (ALPHA);
         IF ^ (ONE_OR_THREE × REMOVE_COMMA × ONLY_ONE_CHAR )
            THEN DO;
               ALPHA_OUT = ALPHA;
               RETURN;
               END;
         ALPHA = ALPHA ×× ',' ;
      SEARCH:
         I = INDEX (ALPHA,',');
         IF I ^= 0
            THEN DO;
               ALPHA_CHAR = '' ;
               IF I ^= 1
                  THEN ALPHA_CHAR = SUBSTR (ALPHA,1,I-1);
               J = LENGTH (ALPHA_CHAR);
               IF ONE_OR_THREE
                  THEN DO;
                     IF J = 1
                        THEN ALPHA_ONE = ALPHA_ONE ×× ALPHA_CHAR;
                     IF J = 3
                        THEN DO;
                           ALPHA_THREE = ALPHA_THREE ×× ALPHA_CHAR ××
                                              ',' ;
                           ALPHA_PART3 = ALPHA_PART3 ×× SUBSTR (ALPHA_CH
 AR,1,1);
                           END;
                     END;
               IF ONLY_ONE_CHAR
                  THEN IF J ^= 0
                     THEN ALPHA_OUT = ALPHA_OUT ×× SUBSTR (ALPHA_CHAR,1,
 1);
               IF REMOVE_COMMA
                  THEN ALPHA_OUT = ALPHA_OUT ×× ALPHA_CHAR;
               J = LENGTH (ALPHA);
               IF I < J
                  THEN DO;
                     TEMP = SUBSTR (ALPHA,I+1);
                     ALPHA = TEMP;
                     GO TO SEARCH;
                     END;
               END;
          ONE_OR_THREE,REMOVE_COMMA,ONLY_ONE_CHAR  = OFF;
         RETURN;
      END ALPHA_GET;

   PUT SKIP(2) LIST ('THE ABOVE IS AN INCORRECT CONTROL CARD');
   IF SUBSTR(TEXT,19)=''&CODE=''&CARD_TYPE=''&SEQUENCE=''
      THEN DO;
      PUT SKIP LIST (' IT WILL BE CONSIDERED AS THE FIRST STOP WORD.');
         PUT SKIP;
         GO TO STORE_STOP_WORD;   END;
      ELSE DO;
      PUT SKIP LIST (' IT WILL BE CONSIDERED AS THE FIRST BIBLIOGRAPHY C
 ARD');
         HEAD_FLAG = '1'B;
         RETURN;
      END;
 READ_STOP_WORDS:     GET EDIT(BUFFER)(R(INFORM));
 STORE_STOP_WORD:
     IF INDEX (CARD,'TITLE') > 0
      THEN DO;
         PUT SKIP EDIT(BUFFER)(R(INFORM));
         RETURN;   END;
         /*
          I = INDEX (CTEXT,'WORD');
         IF (SUBSTR(CARD ,I-1+INDEX(SUBSTR(CARD,I),' '))) ^= ' '
         */
         IF SUBSTR(CARD,INDEX(SUBSTR(CARD,1),' ')) ^= ' '
      THEN DO;
   PUT SKIP EDIT(BUFFER)(R(INFORM));
      PUT SKIP(2) LIST ('THE ABOVE IS AN INCORRECT STOP WORD CARD');
      PUT SKIP    LIST ('IT WILL BE CONSIDERED AS THE FIRST BIBLIOGRAPHY
  CARD');
      HEAD_FLAG = '1'B;
      RETURN;
      END;
   IF STOP_WORD_COUNT > 500
      THEN DO;
      PUT SKIP(2) LIST ('STOP WORD LIMIT OF 500 EXCEEDED');
      PUT SKIP LIST ('USE THE CONTROL CARD ''TITLES'' TO INDICATE THE EN
 D OF STOP WORDS');
      GO TO OUT;   END;
   STOP_WORD_COUNT = STOP_WORD_COUNT + 1;
   STOP_WORD(STOP_WORD_COUNT) = SUBSTR(TEXT,1,MIN(INDEX(TEXT,' '),10));
   PUT EDIT(STOP_WORD(STOP_WORD_COUNT))(X(2),A(10));
   GO TO READ_STOP_WORDS;
 END OPTIONS;





 TYPE: PROC;
 DCL TYPES CHAR (256) VAR INIT (''),
       STOP_LIST CHAR (80) VAR,
      TYPE_OUT CHAR (512) VAR,
      FIRST BIT (1)
 ;
      IF TAPE_FILE
         THEN DO;
           CLOSE FILE (SYSIN);
           OPEN FILE (SYSIN) TITLE ('TAPE');
           END;


   IF (INDEX(INDEX_IGNORE_1,'2')=0) & (INDEX(INDEX_TYPE,'2')=0)
      THEN DO;
         INDEX_TYPE = INDEX_TYPE ×× '2';
         INDEX_SORT = INDEX_SORT ×× 'I' ;
         END;


   IF (INDEX(INDEX_IGNORE_1,' ')=0) & (INDEX(INDEX_TYPE,' ')=0)
      THEN DO;
         INDEX_TYPE = INDEX_TYPE ×× ' ';
         INDEX_SORT = INDEX_SORT ×× 'I' ;
         END;


  INDEXABLE = INDEX_IGNORE_1 ×× INDEX_IGNORE_PART3 ×× INDEX_TYPE ;
   START_IGNORE_3 = LENGTH (INDEX_IGNORE_1) ;
   START_INDEX = LENGTH (INDEX_IGNORE_PART3) + START_IGNORE_3 ;


   OPEN FILE(OUTPUT)
      LINESIZE(133) PAGESIZE(PAGE_SIZE);


      OPEN FILE (INDEXED) LINESIZE (133) PAGESIZE (PAGE_SIZE);
      N = (N2-20)/2;
      LINE = 2*N+20;


 PUT PAGE EDIT ('THE TOTAL LIST OF OPTIONS TO BE USED ARE:') (A);

       I = 1;
       J = MIN (40,LENGTH (INDEX_SORT));
    GET_SORT_CHAR:
       IF I >= J
          THEN GO TO GOT_SORT_CHAR;
       I_CHAR = SUBSTR (INDEX_SORT,I,1);
       IF INDEX (STOP_SORT,I_CHAR) = 0
          THEN STOP_SORT = STOP_SORT ×× I_CHAR;
       I = I +1;
       GO TO GET_SORT_CHAR;
    GOT_SORT_CHAR:
       NUM_OUTPUTS = LENGTH (STOP_SORT);


 PUT SKIP (2) EDIT ('INPUT WILL BE FROM FILE ') (A);
 IF TAPE_FILE
    THEN PUT EDIT ('"TAPE".') (A);
    ELSE PUT EDIT ('"SYSIN".') (A);


 PUT SKIP (2) EDIT ('EACH OUTPUT PAGE WILL BE',PAGE_SIZE,' LINES LONG;')
                      (A,F(4),A);
 PUT SKIP EDIT ('EACH LINE WILL BE ',LINE,' CHARACTERS WIDE (',LINE/10
          +.05, ' INCHES).') (A,F(3),A,F(4,1),A);


 IF AUTHOR_FLAG
    THEN DO;
       PUT SKIP (2) EDIT ('AUTHORS WILL BE INDEXED') (A);
            PUT EDIT (' INTO SECTION') (A);
             IF AUTHOR_SECTIONS
                THEN PUT EDIT ('S') (A);
               PUT EDIT (' ''') (A);
             II = 1;
             FIRST = ON;
       AUTHOR_DO:
             I = INDEX (SUBSTR(INDEX_TYPE,II),'1');
             IF I = 0
                THEN GO TO AUTHOR_END;
              IF ^ FIRST
                   THEN PUT EDIT (',') (A);
               FIRST = OFF;
               I = I + II -1;
             PUT EDIT (SUBSTR(INDEX_SORT,I,1))     (A);
             II = I+1;
             GO TO AUTHOR_DO;
       AUTHOR_END:
             PUT EDIT ('''') (A);
       PUT EDIT ('.') (A);
       END;


 IF STOP_WORD_COUNT > 0
    THEN DO;
       PUT SKIP (2) EDIT ('THE',STOP_WORD_COUNT) (A,F(4));
       IF GO_WORDS
         THEN PUT EDIT (' GO') (A);
         ELSE PUT EDIT (' STOP') (A);
      PUT EDIT (' WORDS TO BE USED ARE:','<---')(A,X(50),A);
       IF GO_WORDS
         THEN PUT EDIT (' GO') (A);
         ELSE PUT EDIT (' STOP') (A);
       PUT EDIT (' WORDS  ***') (A);
       PUT SKIP;
       DO I = 1 TO STOP_WORD_COUNT;
             PUT EDIT (STOP_WORD(I)) (A(12));
          END;
       END;
    ELSE PUT SKIP (2) EDIT ('THERE ARE NO STOP WORDS FOR USE.') (A);


   IF LENGTH (BREAK_CHARS) = 0
       THEN BREAK_CHARS = STANDARD_CHARS;
       NUM_BREAKS = LENGTH (BREAK_CHARS);
   PUT SKIP(2) EDIT ('  THE' ,NUM_BREAKS,' BREAK CHARACTERS TO BE USED '
                     ,'ARE: ''',BREAK_CHARS,'''')(A,F(3),A,A,A,A);




 IF BIB_PRINT & BIB_COPIES ^= 0
    THEN DO;
       PUT SKIP (2) EDIT (BIB_COPIES,' COP') (F(4),A);
      IF BIB_COPIES > 1
         THEN PUT EDIT ('IES') (A);
         ELSE PUT EDIT ('Y') (A);
      PUT EDIT (' OF THE BIBLIOGRAPHY WILL BE PRINTED') (A);
       IF BIB_IGNORE
           THEN DO;
                TYPES = BIB_IGNORE_1;
              CALL COMMA;
               PUT EDIT (', IGNORING CARD TYPES ''',TYPE_OUT) (A);
               IF LENGTH (BIB_IGNORE_3) > 0
                   THEN PUT EDIT (',',BIB_IGNORE_3,'''')(A);
                   ELSE PUT EDIT ('''') (A);
               END;
      PUT EDIT ('.') (A);
       END;
    ELSE PUT SKIP (2) EDIT ('THE BIBLIOGRAPHY WILL NOT BE PRINTED.')(A);


 IF ^ NO_INDEX_PRINT & COPIES ^= 0
    THEN DO;
       PUT SKIP (2) EDIT (COPIES,' COP') (F(4),A);
      IF COPIES > 1
         THEN PUT EDIT ('IES') (A);
         ELSE PUT EDIT ('Y') (A);
      PUT EDIT (' OF THE INDEX WILL BE PRINTED') (A);
       IF SEPARATE_INDEX_SEC
          THEN DO;
               PUT EDIT (', SEPARATED INTO SECTIONS') (A);
               IF INDEX_IGNORE
                   THEN PUT EDIT (',') (A);
               END;
       IF INDEX_IGNORE
         THEN DO;
              TYPES = INDEX_IGNORE_1;
              CALL COMMA;
              PUT EDIT (' IGNORING CARD TYPES ''',TYPE_OUT)(A);
               IF LENGTH (INDEX_IGNORE_3) > 0
                   THEN PUT EDIT (',',INDEX_IGNORE_3,'''')(A);
                   ELSE PUT EDIT ('''') (A);
               END;
      PUT EDIT ('.') (A);

   TYPES = STOP_SORT;
    CALL COMMA;
     STOP_LIST = TYPE_OUT;
   I = 1;
   J= MIN (256,LENGTH(INDEX_TYPE));
    TYPES = '';
   GET_INDX_CHAR:
  IF I > J
      THEN GO TO GOT_INDX_CHAR;
   I_CHAR = SUBSTR (INDEX_TYPE,I,1);
      IF INDEX (TYPES,I_CHAR) = 0
         THEN TYPES = TYPES ×× I_CHAR;
      I = I +1;
      GO TO GET_INDX_CHAR;
   GOT_INDX_CHAR:
   CALL COMMA;
      PUT SKIP (2) EDIT ('INDEX SECTIONS ''',STOP_LIST,''' WILL CONTAIN'
      ,' CARD TYPES ''',
    TYPE_OUT,
      ''' AS SHOWN IN THE FOLLOWING TABLE.') (A);
      PUT SKIP (3) EDIT ('INDEX SECTION','CARD TYPE') (X(10),A);
               PUT SKIP(0) EDIT ((13)'_',(9)'_')(X(10),A);
      DO I = 1 TO NUM_OUTPUTS;
         PUT SKIP (2) EDIT (SUBSTR(STOP_SORT,I,1))(X(16),A);
         PUT EDIT ((17)' ','''') (A);
         FIRST = ON;
         J=1;
      LOOP:
         JJ = INDEX(SUBSTR(INDEX_SORT,J),SUBSTR(STOP_SORT,I,1));
         IF JJ = 0
            THEN GO TO LOOP_END;
         IF ^ FIRST
               THEN PUT EDIT (',') (A);
         FIRST = OFF;
         PUT EDIT (SUBSTR(SUBSTR(INDEX_TYPE,J),JJ,1))(A);
               J = J + JJ;
         IF J <= LENGTH (INDEX_SORT)
           THEN GO TO LOOP;
               LOOP_END:
         PUT EDIT ('''') (A);
         END;
       END;
    ELSE PUT SKIP (2) EDIT ('THE INDEX WILL NOT BE PRINTED.') (A);


   PUT SKIP (2);
  RETURN;

       COMMA: PROC;
       TYPE_OUT = '';
       I = LENGTH (TYPES);
       FIRST = ON;
       IF I ^= 0
              THEN DO J=1 TO I;
                   IF ^ FIRST
                        THEN TYPE_OUT = TYPE_OUT ×× ',';
                   FIRST = OFF;
                   TYPE_OUT = TYPE_OUT ×× SUBSTR (TYPES,J,1);
                   END;
       END COMMA;
 END TYPE;



 TITLE_CARDS: PROCEDURE;  /* CALLED BY QUIC(MAIN) */

           /* THIS COMMENT MAKES UP FOR
                   THE CARDS THAT WERE
                   REMOVED IN MAKING
                   TITLE_CARDS
                     FASTER,
                       SMALLER,
                         AND LESS BUGGY.




                                          */
   ON ENDFILE (SYSIN) GO TO SOURCE_FINISHED;
 INFORM:     FORMAT (A(60),A(12),A(1),A(2),A(5));
   DECLARE
      HEAD  CHAR(70)  INITIAL((70)' '),
      LCODE  CHAR(12),
      LINE_COUNT BIN FIXED,
      LREF  CHAR(5),
      PAGE_COUNT BIN FIXED INITIAL(0),
      1 RECORD,
         2 BL3 CHAR (1),
         2 SORT CHAR (1),
         2 BL1 CHAR(56-N),
         2 RREF  CHAR(5),
         2 X  CHAR(1),
         2 TTEXT,
            3 LTEXT  CHAR(N),
            3 RTEXT  CHAR(N),
         2 SPACE  CHAR(2),
         2 CCODE  CHAR(12),
         2 BL2 CHAR(56-N),
      OLD_CARD_TYPE  CHAR (1),
      NEW_ITEM BIT (1) INITIAL ('0'B),
      LAST_CARD_TYPE CHAR (1) INIT ('?'),
      SHIFT_FLAG  BIT(1)  INITIAL('0'B),
      TITLE_COUNT BIN FIXED INITIAL (0),
    TITLE_TEXT CHAR(6000) VARYING INITIAL('');
   DCL BREAK (NUM_BREAKS) BIN FIXED CTL,
       BCHAR (NUM_BREAKS)CHAR (1) CTL;

                   /* LOGICAL START OF TITLE_CARDS */

   ALLOCATE BREAK; ALLOCATE BCHAR;
   DO I=1 TO NUM_BREAKS;
      BCHAR (I) = SUBSTR (BREAK_CHARS,I,1);
      END;
   PUT FILE(OUTPUT)LIST(LINE,COPIES,BIB_COPIES,PAGE_SIZE,SEPARATE_INDEX_
 SEC);
      LINE_COUNT=PAGE_SIZE;
   IF HEAD_FLAG
      THEN GO TO FIRST_TITLE;
   HEAD = SUBSTR(TITLE_BUFFER,11,70);
   HEAD_FLAG = '1'B;
   GET EDIT(BUFFER)(R(INFORM));
   GO TO FIRST_TITLE;



  READ:
       LAST_CARD_TYPE = CARD_TYPE;
       GET EDIT (BUFFER) (R(INFORM));

       IF CARD_TYPE ^= LAST_CARD_TYPE
         THEN DO;
           IF SHIFT_FLAG
              THEN CALL PROCESS_TITLE;
           END;
         IF REF ^= LREF × LCODE ^= CODE × CARD_NUM = ''
          THEN DO;
            IF SHIFT_FLAG
              THEN CALL PROCESS_TITLE;
 FIRST_TITLE:
            LREF = REF;
            LCODE = CODE;
            NEW_ITEM = '1'B;
            END;

      IF BIB_PRINT
              THEN IF INDEX (BIB_IGNORE_1,CARD_TYPE) = 0
                   THEN IF INDEX (BIB_IGNORE_3,CARD_NUM) = 0
                        THEN GO TO BIB_PRT;

      CHECK_INDEX:
      IF NO_INDEX_PRINT
          THEN GO TO READ;
      I = INDEX (INDEXABLE,CARD_TYPE);
      IF I < START_IGNORE_3
         THEN GO TO READ;
      IF I > START_INDEX
         THEN GO TO INDEXER;
      IF INDEX (INDEX_IGNORE_3,CARD_NUM) > 0
         THEN GO TO READ;
         IF INDEX (INDEX_TYPE,CARD_TYPE) = 0
      THEN GO TO READ;
   INDEXER:
      IF AUTHOR_FLAG
         THEN IF CARD_TYPE = '1'
            THEN DO;
                   LAST_CARD_TYPE = CARD_TYPE;
               CALL AUTHOR_RECORD;
               GO TO READ;
               END;
      GO TO SHIFT;


   SOURCE_FINISHED:
   IF SHIFT_FLAG  THEN CALL PROCESS_TITLE;
   IF STOP_WORD_COUNT > 0   THEN CALL STOP_RECORDS;

 PUT SKIP EDIT ('THE TITLE TO BE USED IS: ''',HEAD,'''') (A);
          PUT FILE (INDEXED)          EDIT (HEAD,'PAGE')
                         (X(56-N),X(N-30),A(MIN(70,LINE-10)),X(N-30),
                        X(1),A(4));
         RETURN;

                   /* THIS IS THE LOGICAL END OF TITLE_CARDS */


  BIB_PRT:
         IF NEW_ITEM
            THEN DO;
              LINE_COUNT = LINE_COUNT +3;
              BIB_COUNT = BIB_COUNT +3;
              END;
            ELSE DO;
              LINE_COUNT = LINE_COUNT +1;
              BIB_COUNT = BIB_COUNT +1;
              END;
             IF LINE_COUNT >= PAGE_SIZE
                  THEN
                   HEADING:
                    DO;
                BIB_COUNT = BIB_COUNT +4;
                 LINE_COUNT=4;
                 PAGE_COUNT=PAGE_COUNT+1;
                 PUT FILE(OUTPUT) EDIT (HEAD,'PAGE',PAGE_COUNT)
                    (PAGE,X(56-N),X(N-30),A(MIN(70,LINE-10)),X(N-30),
                        X(1),A(4),F(5));
                 PUT FILE(OUTPUT) LINE(3);
             END; /*  HEADING */

         IF NEW_ITEM
             THEN
         PUT FILE(OUTPUT) EDIT (REF,TEXT,CODE)
         (SKIP(3),X(56-N),A(6),A(62),A(12));
             ELSE
                  PUT FILE(OUTPUT) EDIT(TEXT)(SKIP,X(56-N),X(6),
                        A(MIN(60,LINE-6)));
         NEW_ITEM = '0'B;
       GO TO CHECK_INDEX;



 SHIFT:
   SHIFT_FLAG = '1'B;
        TITLE_TEXT=TITLE_TEXT××TEXT;
   CHECK:I=INDEX(TITLE_TEXT,(9)' ');
   IF I^=0
      THEN DO;
         TITLE_TEXT=SUBSTR(TITLE_TEXT,1,I)××SUBSTR(TITLE_TEXT,I+9);
         GO TO CHECK;
         END;
   GO TO READ;


   STOP_RECORDS: PROCEDURE;   /* CALLED BY TITLE_CARDS    */
      RECORD = '';
      SUBSTR(LTEXT   ,N ,1) = '''';
      DO I = 1 TO STOP_WORD_COUNT;
      RTEXT = STOP_WORD(I) ×× ''' NOT INDEXED';
       DO I_STOP =1 TO NUM_OUTPUTS;
         IF STOP_WORD_USAGE (I_STOP,I)
              THEN DO;
                   SORT = SUBSTR ( STOP_SORT,I_STOP,1);
                   WRITE FILE (INPUT) FROM (RECORD);
                   RECORD_COUNT = RECORD_COUNT +1;
                   END;
         END;
      END;
      END STOP_RECORDS;

 AUTHOR_RECORD:    PROCEDURE;    /* CALLED BY TITLE_CARDS */
   RECORD = '';
   CCODE = CODE;
   RREF = REF;
   IF SUBSTR(TEXT,17,2) = '  '
      THEN DO;
         RTEXT = SUBSTR(TEXT,1,18);
   CALL WRITER;
         IF SUBSTR(TEXT,19,1) ^= ' '
      THEN DO;
         CCODE = CODE;
         RREF = REF;
         RTEXT = SUBSTR(TEXT,19);
   CALL WRITER;
      END;
         RETURN;
      END;
   RTEXT = TEXT;
   CALL WRITER;
 END AUTHOR_RECORD;


 PROCESS_TITLE:    PROCEDURE;      /* CALLED BY TITLE_CARDS */
   TITLE_COUNT = TITLE_COUNT+1;
   DECLARE
      WORD  CHAR(10),
      WORD_LENGTH  BIN FIXED;

   TITLE_TEXT=TITLE_TEXT××' ';
                     I,J = 1;
         CLOSE_UP:   I = INDEX(SUBSTR(TITLE_TEXT,J),'  ');
                     IF I = 0   THEN GO TO MARK;
                                ELSE J = I+J-1;
                  TITLE_TEXT = SUBSTR(TITLE_TEXT,1,J) ××
                        SUBSTR(TITLE_TEXT,J+2);
                     GO TO CLOSE_UP;

   MARK:   SUBSTR(TITLE_TEXT,LENGTH(TITLE_TEXT),1) = '#';

   FIRST_WORD: NEXT = 0;
      DO I = 1 TO NUM_BREAKS;
         BREAK (I) = 0;   END;

   NEXT_WORD:   NOW = NEXT;  NEXT =9999;
            IF NOW =9999   THEN DO;
               TITLE_TEXT = '';  SHIFT_FLAG = '0'B;  RETURN;  END;

      DO I = 1 TO NUM_BREAKS;
         IF BREAK (I) = 0
            THEN DO;
 /*
               I1 = LENGTH(TITLE_TEXT);
               BREAK(I) = 0;
               DO I2 = NOW+1 TO I1;
                  IF SUBSTR(TITLE_TEXT,I2,1) = BCHAR(I) THEN DO;
                     BREAK(I) = I2;
                     I2 = I1 + 1;
                  END;
               END;
                                                                   */
               BREAK(I) = INDEX(SUBSTR(TITLE_TEXT,NOW+1),BCHAR(I));
               IF BREAK (I) = 0
                   THEN BREAK (I) =9999;
                  ELSE BREAK(I) = BREAK(I)+NOW;
            END;
         IF BREAK (I) < NEXT
            THEN DO;
               NEXT = BREAK(I);
               INEXT = I;
            END;
      END;

      BREAK(INEXT) = 0;

         IF NEXT =9999
            THEN DO;
               WORD_LENGTH=LENGTH(TITLE_TEXT)-NOW-1;
               IF WORD_LENGTH<=0
                  THEN GO TO NEXT_WORD;
               END;
            ELSE WORD_LENGTH = NEXT-NOW-1;

         IF WORD_LENGTH <= 0
            THEN GO TO NEXT_WORD;
         IF WORD_LENGTH > 10
            THEN WORD_LENGTH = 10;
         WORD = SUBSTR(TITLE_TEXT,NOW+1,WORD_LENGTH);
         DO I = 1 TO STOP_WORD_COUNT;
         IF WORD = STOP_WORD (I)
            THEN DO;
                   IF GO_WORDS
                         THEN GO TO MAKE_RECORD;
                   JJ = 1;
                KEEP_GO:
                   I_SORT = INDEX (SUBSTR(INDEX_TYPE,MIN(JJ,500)),
                          LAST_CARD_TYPE);
                   IF I_SORT = 0
                      THEN GO TO NEXT_WORD;
     I_SORT = I_SORT + JJ -1;
                   JJ = I_SORT +1;
                      /* NOW FIND THE FIRST OCCURANCE OF THE SORT CHAR
                                      TO BE USED */
                   II_SORT = INDEX (STOP_SORT,
                                       SUBSTR(INDEX_SORT,I_SORT,1));
                   STOP_WORD_USAGE(II_SORT,I) = ON;
                   GO TO KEEP_GO;
                   END;
         END;

      IF GO_WORDS
         THEN GO TO NEXT_WORD;
   MAKE_RECORD:

      RECORD='';
      RREF = LREF;
      CCODE = LCODE;
          RTEXT = SUBSTR (TITLE_TEXT,NOW+1);

      IF NOW < N-2
         THEN DO;
         LEEWAY = N-2-NOW;
 IF NOW+N+1 <= LENGTH (TITLE_TEXT)
   THEN
          LTEXT = SUBSTR (TITLE_TEXT,NOW +N +1);
          IF ( LENGTH(TITLE_TEXT) -NOW -N) > LEEWAY
              THEN SUBSTR (LTEXT,LEEWAY+1,2) = '/ ';
 IF NOW > 0
  THEN
          SUBSTR (LTEXT,LEEWAY+3,NOW) = TITLE_TEXT;
         GO TO WRITE;
         END;

      SUBSTR (LTEXT,MAX(1,N-NOW+1))= SUBSTR (TITLE_TEXT,MAX(1,NOW-N+1));

   WRAP:  IF LENGTH(TITLE_TEXT) < NOW+N
      THEN DO;
         LEEWAY = NOW+N-2-LENGTH(TITLE_TEXT);
         IF LEEWAY < NOW-N
            THEN DO;
               SUBSTR (RTEXT,N-LEEWAY,1) = '/';
               SUBSTR(RTEXT,N+1-LEEWAY,LEEWAY) = SUBSTR (TITLE_TEXT,
                             NOW-LEEWAY-N+1);
               END;
               ELSE SUBSTR(RTEXT,2*N+1-NOW,NOW-N) = TITLE_TEXT;
         END;


     WRITE:
      CALL WRITER;
      GO TO NEXT_WORD;
 END PROCESS_TITLE;


  WRITER:   PROC;
         J = 1;
     KEEP_GOING:
         I_SORT = INDEX (SUBSTR(INDEX_TYPE,MIN(J,500)),LAST_CARD_TYPE);
         IF I_SORT = 0
              THEN RETURN;
         I_SORT = I_SORT + J -1 ;
                   J = I_SORT +1;
         SORT = SUBSTR (INDEX_SORT,I_SORT,1);
         RECORD_COUNT = RECORD_COUNT +1;
         WRITE FILE (INPUT) FROM (RECORD);
         GO TO KEEP_GOING;
   END WRITER;



 END TITLE_CARDS;

 OUT: END QUIC;
./ ADD NAME=SPQUIC02
 PRINT: PROC OPTIONS (MAIN);
   DCL COPIES FIXED BIN INIT(1),
      BIB_COPIES FIXED BIN INIT (1),
      (I_PLACE,PLACE) FIXED BIN,
      PAGE_SIZE FIXED BIN,
      INDEX_TO_BE_SECTIONED BIT (1),
      LINE CHAR(134);

 /* GET THE CONTROL VARIABLES FROM THE FIRST RECORD OF FILE OUTPUT */

         READ FILE (OUTPUT) INTO (LINE);
    GET STRING(SUBSTR(LINE,2))LIST(LENGTH,COPIES,BIB_COPIES,PAGE_SIZE,
                          INDEX_TO_BE_SECTIONED);
         I_PLACE = (138-LENGTH)/2;
         PLACE = (136-LENGTH)/2;
 START: BEGIN;
         IF COPIES = BIB_COPIES
                   THEN GO TO SAME;
      DCL 1 STRANGE DEF LINE ,
            2 CC CHAR(1),
            2 SORT CHAR (1),
            2 SPACE CHAR(132   ),
         OLD_SORT CHAR (1),

      1 BIB_END,
         2 CX CHAR (1) INIT (' '),
         2 BH CHAR (20) INIT ('END OF BIBLIOGRAPHY.'),
         2 BLAST CHAR (LENGTH-20) INIT (' '),

      1 INDEXEND ,
         2 IC CHAR (1) INIT (' '),
         2 IMSG CHAR (16) INIT ('END OF SECTION '''),
         2 ICHAR CHAR (1) INIT (' '),
         2 ILAST CHAR (1) INIT (''''),
         2 IREST CHAR (LENGTH-18) INIT (' '),

      1 HEAD_LINE ,
        2 HC CHAR (1) INIT ('1'),
        2 HR CHAR (LENGTH-5),
        2 HW CHAR (5),

      1 FILE_TYPE ,
        2 FC CHAR (1) INIT (' '),
        2 FM CHAR (9) INIT ('SECTION '''),
        2 HEAD_CHAR CHAR (1) INIT (' '),
        2 FN CHAR (1) INIT (''''),
        2 F_REST CHAR (LENGTH-11) INIT (''),


      1 BLANK ,
        2 BC CHAR (1) INIT ('0'),
      2 BR CHAR (LENGTH) INIT (''),
      PAGE_COUNT  FIXED BIN INIT (1),
      W FIXED BIN,

         1 PRINT_LINE ,
            2 CONTROL CHAR(1),
            2 REST CHAR(LENGTH);

 BIB_PRINT:
         BIB_COPIES = BIB_COPIES -1;
         IF BIB_COPIES < 0
              THEN GO TO INDEX_PRINT;
         CALL BIB_PRT;
         READ FILE (OUTPUT) INTO (LINE);
         GO TO BIB_PRINT;

 INDEX_PRINT:
         COPIES = COPIES -1;
         IF COPIES < 0
              THEN GO TO STOP;
         CALL INDEX;
         GO TO INDEX_PRINT;

 SAME:
         COPIES = COPIES -1;
         IF COPIES < 0
              THEN GO TO STOP;
         CALL BIB_PRT;
         READ FILE (OUTPUT) INTO (LINE);
         CALL INDEX;
         GO TO SAME;

 BIB_PRT: PROC;
         ON ENDFILE (OUTPUT) GO TO END_FILE;
 READ:
         READ FILE (OUTPUT) INTO (LINE);
         CONTROL = CC;
         REST = SUBSTR (LINE,PLACE,LENGTH);
         WRITE FILE (PRINTER) FROM (PRINT_LINE);
         GO TO READ;
 END_FILE:
         WRITE FILE (PRINTER) FROM (BLANK) ;
         WRITE FILE (PRINTER) FROM (BIB_END);
         CLOSE FILE (OUTPUT);
         RETURN;

 END BIB_PRT;


 INDEX: PROC;
         ON ENDFILE (INDEXED) GO TO END_FILE;
         PAGE_COUNT = 1;
 FIRST_READ:
         READ FILE (INDEXED) INTO (LINE);
         HR = SUBSTR (LINE,PLACE,LENGTH);
         READ FILE (INDEXED) INTO (LINE);
         OLD_SORT = SORT;
                   HEAD_CHAR = SORT;
         GO TO PAGE;

 READ:
         OLD_SORT = SORT;
         READ FILE (INDEXED) INTO (LINE);
         IF SORT ^= OLD_SORT
              THEN DO;
                   IF INDEX_TO_BE_SECTIONED
                        THEN  PAGE_COUNT = 1;
                   CALL RITE;
                   HEAD_CHAR = SORT;
                   GO TO PAGE;
                   END;
         LINE_COUNT = LINE_COUNT +1;
         IF LINE_COUNT >= PAGE_SIZE
              THEN DO;
         PAGE:     PUT STRING (HW) EDIT (PAGE_COUNT) (F(5));
                   WRITE FILE (PRINTER) FROM (HEAD_LINE);
                   WRITE FILE (PRINTER) FROM (FILE_TYPE);
                   WRITE FILE (PRINTER) FROM (BLANK);
                   PAGE_COUNT = PAGE_COUNT +1;
                   LINE_COUNT =3;
                   END;
         CONTROL = CC;
         REST = SUBSTR (LINE,I_PLACE,LENGTH);
         WRITE FILE (PRINTER) FROM (PRINT_LINE);
         GO TO READ;

 END_FILE:
         CALL RITE;
         CLOSE FILE (INDEXED);
 RITE: PROC;
         ICHAR = HEAD_CHAR;
         WRITE FILE (PRINTER) FROM (BLANK) ;
         WRITE FILE (PRINTER) FROM (INDEXEND);
    END RITE;
 END INDEX;

 STOP:
         END PRINT;

