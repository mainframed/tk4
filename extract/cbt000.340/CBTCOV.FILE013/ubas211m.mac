*/ ADD  NAME=ACCHGPER
001580*    ANZAHL DER GESPEICHERTEN PERIODEN VERRINGERN/VERGROESSERN
001590     PERFORM READSATZ.
001600     IF   ERR NOT = 0 GO TO CHANGE-PER-E.
001610     SUBTRACT NPER IN S-ASTKOR FROM NPER IN S-ASTSUM
001615         GIVING SHIFT.
001620     IF NPER IN S-ASTKOR < NPER IN S-ASTSUM
001625         PERFORM RSHIFT VARYING J
001626             FROM 1 BY 1 UNTIL J > NPER IN S-ASTKOR
001630     ELSE
001640         SUBTRACT NPER IN S-ASTSUM FROM NPER IN S-ASTKOR
001650                GIVING LOOP-END
001670         PERFORM RSHIFT
001680             VARYING J FROM NPER IN S-ASTKOR BY -1 UNTIL
001685             J = LOOP-END
001687         PERFORM ZEROTODISK VARYING I FROM 1 BY 1 UNTIL
001688             I > LOOP-END.
001690     MOVE NPER IN S-ASTKOR TO NPER IN S-ASTSUM.
001700     MOVE KORPER TO KTYP-ZWI.
001710     SET PIX TO NPER IN S-ASTSUM.
001720     PERFORM MOVELOG.
001730     PERFORM REWRITESATZ.
001740 CHANGE-PER-E.
001750     EXIT.
*/ ADD  NAME=ACCTD
012020* WERT U.BERICHTSZEIT AUS KARTE --> ASTSUM
012040     SET PIX TO NPER-I.
012050     MOVE BERZT IN S-ASTKOR TO BERZT IN S-ASTSUM (PIX).
012060     MOVE AWERT IN S-ASTKOR TO AWERT IN S-ASTSUM (PIX).
012070     MOVE NEU               TO FLAG  IN S-ASTSUM (PIX).
012080     SUBTRACT 1 FROM NPER-I.
*/ ADD  NAME=ACDATDF
000010 01  DATCOPY.
000020     02  DATCOPY-C      COMP.
000030     05  ERR                 PIC  S9(8).
000040     05  NPER-I              PIC  S9(4).
000050     05  I                   PIC  S9(4).
000060     05  J                   PIC  S9(4).
000065     05  LOOP-END            PIC  S9(4).
000066     05  SHIFT               PIC  S9(4).
000070     02  DATCOPY-D.
000080     05  ASUMNRZ.
000090         10  ALISTENNR       PIC X(8).
000100         10  APOSNR          PIC XX.
000110     05  K2                  PIC  X      VALUE '2'.
000120     05  FLAGDEF.
000130       10  INIT              PIC X VALUE '0'.
000140       10  NEU               PIC X VALUE '1'.
000150       10  WIEDER            PIC X VALUE '3'.
000160       10  REP               PIC X VALUE '2'.
000170       10  DEL               PIC X VALUE '4'.
000180       10  DELPER            PIC X VALUE '5'.
000185       10  KORPER            PIC X VALUE '6'.
000187       10  INSPER            PIC X VALUE '7'.
000190       10  KTYP-ZWI          PIC X.
000200     05  TIMUSA.
000210         10  ST              PIC XX.
000220         10  MN              PIC XX.
000230         10  SC              PIC XX.
000240     05  DATUSA.
000250         10  TT              PIC XX.
000260         10  FILLER          PIC X.
000270         10  MM              PIC XX.
000280         10  FILLER          PIC X.
000290         10  JJ              PIC XX.
000295     05  STAT                PIC XX   VALUE SPACES.
000296     05  STAT24              PIC X    VALUE '0'.
000297         88  REORG                    VALUE '1'.
000300     02  DATCOPY-C3 COMP-3.
000310     05  ZEIZAE              PIC S9(3)   VALUE +100.
000320     05  SEIZAE              PIC S9(5)   VALUE  +0.
*/ ADD  NAME=ACDELE
000010* ABSTIMMSUMMENSATZ ENTFERNEN
000020     PERFORM READSATZ.
000030     IF  ERR = 6
000040         MOVE 8 TO ERR
000050         GO TO DELETE-E.
000060     MOVE HIGH-VALUE TO LFLAG IN S-ASTSUM.
000070     SET PIX TO NPER IN S-ASTSUM.
000080     MOVE DEL  TO KTYP-ZWI.
000090     PERFORM MOVELOG.
000100     PEROFRM REWRITESATZ.
000110 DELETE-E.
000120     EXIT.
*/ ADD  NAME=ACDELEV
000010* ABSTIMMSUMMENSATZ ENTFERNEN
000020     PERFORM READSATZ.
000030     IF  ERR = 6
000040         MOVE 8 TO ERR
000050         GO TO DELETE-E.
000060     MOVE HIGH-VALUE TO LFLAG IN S-ASTSUM.
000070     SET PIX TO NPER IN S-ASTSUM.
000080     MOVE DEL  TO KTYP-ZWI.
000090     PERFORM MOVELOG.
000100     DELETE D-ASTSUM.
000105     PERFORM WRITELOG.
000110 DELETE-E.
000120     EXIT.
*/ ADD  NAME=ACDLP
000010* 1 PERIODE AUS ABSTIMMSUMMENSATZ ENTFERNEN
000020     PERFORM READSATZ
000030     IF  ERR NOT = 0 GO TO DEL-PER-E.
000040     ADD NPER IN S-ASTSUM    NPER IN S-ASTKOR GIVING NPER-I.
000050     IF  NPER-I < 1 OR NPER-I > NPER IN S-ASTSUM
000060         MOVE 9 TO ERR
000070         GO TO DEL-PER-E.
000080     SET PIX TO NPER-I.
000090     MOVE DELPER TO KTYP-ZWI.
000100     PERFORM MOVELOG.
000110     MOVE AWERT IN S-ASTLOG TO WERTN.
000120     IF  NPER-I = 1 GO TO DEL-PER6.
000125     MOVE -1 TO SHIFT.
000130     PERFORM RSHIFT
000140         VARYING J FROM NPER-I BY -1 UNTIL J = 1.
000150 DEL-PER6.
000160     MOVE 1 TO I.
000170     PERFORM ZEROTODISK.
000180     PERFORM REWRITESATZ.
000190 DEL-PER-E.
000200     EXIT.
*/ ADD  NAME=ACDRU
020010* EINGABEKARTEN MIT KOMMENTAR LISTEN
020030     IF  ZEIZAE > 50 PERFORM SCHR-UEB.
           MOVE ZERO TO VORSCH.
           IF  ERR > 0 AND (ERR < 3 OR ERR > 6)
               MOVE S-ASTKOR TO KARTENL
               GO TO DRUCKEN1.
           MOVE BERZT IN S-ASTKOR TO BERZT IN ZEILE1.
           MOVE KTYP IN S-ASTKOR TO KTYP IN ZEILE1.
020044     MOVE NPERR TO NPER IN ZEILE1.
           MOVE SPACES TO WERTX.
020050     IF  ERR = 2    OR DEL-K
020060         MOVE NWERT IN S-ASTKOR TO WERTX  ELSE
               IF  REP-K MOVE AWERTA IN S-ASTKOR TO WERTN ELSE
               IF  DLP-K NEXT SENTENCE ELSE
                   IF  PER-K NEXT SENTENCE ELSE
020080         MOVE AWERT IN S-ASTKOR TO WERTN.
020090     MOVE ' ' TO KZ.
020100     IF  ERR = 0 GO TO DRUNOERR.
       DRUCKEN1.
020110     MOVE FHLTXT (ERR) TO KOMMENTAR.
020120     MOVE STAT   TO KZ.
           IF  STAT = SPACES OR STAT = '00'
               MOVE 'X' TO KZ.
           IF STAT = '24' MOVE '1' TO STAT24.
020130     WRITE S-ASTPRINT FROM ZEILE1.
020140     ADD 2 TO ZEIZAE.
           MOVE SPACES TO KARTE.
020150     IF  ERR NOT = 4 GO TO DRUCKEN-E.
021020     MOVE AWERT IN S-ASTSUM (PIX) TO WERTN2.
021030     MOVE 'WERT DATEI' TO KOM3.
021040     WRITE S-ASTPRINT FROM ZEILE2.
021050     ADD 1 TO ZEIZAE.
021070     GO TO DRUCKEN-E.
021090 DRUNOERR.
021100     IF  REP-K
021110         MOVE 'WERT ALT' TO KOMMENTAR   ELSE
           IF  NEU-K
               MOVE 'INITIALISIERT' TO KOMMENTAR  ELSE
           IF  INS-K
               MOVE 'PERIODE EINGESCHOBEN' TO KOMMENTAR ELSE
           IF  DLP-K
               MOVE 'PERIODE ENTFERNT' TO KOMMENTAR ELSE
           IF PER-K
               MOVE 'PERIODENANZ. VERAENDERT' TO KOMMENTAR ELSE
           IF  DEL-K
               MOVE 'SATZ ENTFERNT' TO KOMMENTAR
021160         MOVE SPACES TO WERTX.
021170     WRITE S-ASTPRINT FROM ZEILE1.
021180     ADD 2 TO ZEIZAE.
022010     IF  NOT REP-K
022020         GO TO DRUCKEN-E.
           MOVE AWERT IN S-ASTSUM (PIX) TO WERTN2.
022050     MOVE 'WERT NEU' TO KOM3.
022060     WRITE S-ASTPRINT FROM ZEILE2.
022070     ADD 1 TO ZEIZAE.
            MOVE SPACES TO STAT.
022080 DRUCKEN-E.
022090     EXIT.
*/ ADD  NAME=ACDRUDF
000010 01  DRUDEF.
000020 02  FHLTXT1.
000030     05  FHLTXT2.
000040         10  FILLER    PIC X(24) VALUE 'ABST.SUM.NR. FALSCH     '.
000050         10  FILLER    PIC X(24) VALUE 'BETRAG NICHT NUMERISCH  '.
000060         10  FILLER    PIC X(24) VALUE 'FALSCH SORTIERT         '.
000070         10  FILLER    PIC X(24) VALUE 'WERT KARTE UNGLEICH     '.
000080         10  FILLER    PIC X(24) VALUE 'SATZ SCHON VORHANDEN    '.
000090         10  FILLER    PIC X(24) VALUE 'SATZ NICHT INITIALISIERT'.
000100         10  FILLER    PIC X(24) VALUE 'FUNKTION FALSCH         '.
000110         10  FILLER    PIC X(24) VALUE 'SATZ SCHON ENTFERNT     '.
000120         10  FILLER    PIC X(24) VALUE 'PERIODE FALSCH          '.
000130     05  FHLTXT  REDEFINES FHLTXT2 PIC X(24) OCCURS 9.
000140 02  ZEILE1.
000150     05  VORSCH              PIC X       VALUE '0'.
000160     05  KTYP                PIC XXX.
000170     05  FILLER              PIC XX      VALUE ' '.
000180     05  ASUMNR.
000190         10  ALISTENNR       PIC X(8).
000200         10  FILLER          PIC XXX     VALUE SPACES.
000210         10  APOSNR          PIC XX.
000220     05  FILLER              PIC X(6)    VALUE SPACES.
000230     05  NPER                PIC XXX.
000240     05  FILLER              PIC XXXX    VALUE SPACES.
000250     05  BERZT               PIC X(15).
000260     05  WERT.
000270         10  WERTN           PIC BZZZBZZZBZZZBZZZBZZ9.999-.
000280         10  WERTX   REDEFINES WERTN  PIC X(25).
000290     05  FILLER              PIC XXX     VALUE SPACES.
000300     05  KOMMENTAR           PIC X(24).
000310     05  FILLER              PIC XX      VALUE SPACES.
000320     05  KZ                  PIC XX.
000330 02  KARTE REDEFINES ZEILE1.
000340         05  FILLER          PIC X.
000350         05  KARTENL         PIC X(80).
000360 02  ZEILE2.
000370         05  FILLER          PIC X(48)   VALUE SPACES.
000380         05  WERTN2          PIC ZZZBZZZBZZZBZZZBZZ9.999-.
000390         05  FILLER          PIC XXX     VALUE SPACES.
000400         05  KOM3            PIC X(24).
000410         05  FILLER          PIC XXXX    VALUE SPACES.
000411 02  ENDZEILE1.
000412     05  FILLER              PIC X       VALUE SPACES.
000413     05  FILLER              PIC X(40)
000414         VALUE 'ASTSUM MUSS REORGANISIERT WERDEN'.
000420 02  UEB1.
000430     05  FILLER              PIC X       VALUE '1'.
000440     05  PGM                 PIC X(8).
000445     05  FILLER              PIC X(5)   VALUE ' L 01'.
000450     05  FILLER              PIC X(19)   VALUE SPACES.
000460     05  UEBTXT              PIC X(15).
000470     05  FILLER              PIC X(31)   VALUE
000480                               ' DER ABSTIMMSUMMENDATEI'.
000500     05  FILLER              PIC X(13)   VALUE SPACES.
000510     05  FILLER              PIC X(5)    VALUE 'SEITE'.
000520     05  SEITE               PIC ZZZZ9.
000530 02  UEB2.
000540     05  FILLER              PIC X(83)   VALUE SPACES.
000550     05  DATUM               PIC X(10).
000560     05  FILLER              PIC XX      VALUE SPACES.
000570     05  ZEIT                PIC X(8).
000580 02  UEB3.
000590     05  FILLER              PIC X(44)   VALUE
000600                 '0   ABSTIMMSUMMEN-NR.  PERIODE  BERICHTSZEIT'.
000610     05  FILLER              PIC X(20)   VALUE SPACES.
000620     05  FILLER              PIC X(6)    VALUE 'BETRAG'.
000630     05  FILLER              PIC X(30)   VALUE SPACES.
000640     05  FILLER              PIC XXX     VALUE 'FEH'.
000650 02  UEB4.
000660     05  FILLER              PIC X(21)   VALUE
000670                 '       ALISTE    POS.'.
000680     05  FILLER              PIC X(79)   VALUE SPACES.
000690     05  FILLER              PIC XXX     VALUE 'LER'.
000700 02  UEB5.
000710     05  FILLER              PIC X       VALUE SPACES.
000720     05  STRICH              PIC X(102).
*/ ADD  NAME=ACEIN
001610* PERIODE EINSCHIEBEN AN LAUT PER DEFINIERTER STELLE.
001620* AELTERE PERIODEN WERDEN NACH LINKS VERSCHOBEN.
001630*
001640     PERFORM READSATZ.
001650     IF  ERR NOT = 0 GO TO EINSCH-E.
001660     ADD NPER IN S-ASTSUM NPER IN S-ASTKOR GIVING NPER-I.
001670     IF  NPER-I < 1 OR NPER-I > NPER IN S-ASTSUM
001680         MOVE 9 TO ERR
001690         GO TO EINSCH-E.
001700     MOVE 1 TO SHIFT.
001710     PERFORM RSHIFT
001720         VARYING J FROM 1 BY 1 UNTIL J = NPER-I.
001730     PERFORM CARDTODISK.
001740     MOVE INSPER TO FLAG IN S-ASTSUM (PIX).
001750     MOVE INSPER TO KTYP-ZWI.
001760     PERFORM MOVELOG.
001770     PERFORM REWRITESATZ
001780 EINSCH-E.
001790     EXIT.
*/ ADD  NAME=ACHINZ
000010* ABSTIMMSUMMENSATZ INITIALISIEREN
000020     MOVE LOW-VALUE TO LFLAG IN S-ASTSUM.
000030     MOVE CORRESPONDING S-ASTKOR TO S-ASTSUM.
000040     MOVE ASUMNRZ TO ASUMNR IN S-ASTSUM.
000050     COMPUTE NPER-I = NPER IN S-ASTSUM.
000060     IF  NWERT IN S-ASTKOR NOT = SPACES
000070         PERFORM CARDTODISK
000080         ELSE MOVE ZERO TO AWERT IN S-ASTKOR.
000090     PERFORM ZEROTODISK
000100         VARYING I FROM 1 BY 1 UNTIL I > NPER-I.
000110     SET PIX TO NPER IN S-ASTSUM.
000120     MOVE INIT TO KTYP-ZWI.
000130     PERFORM MOVELOG.
000140     PERFORM SCHRSUM.
000150     MOVE ASUMNR IN S-ASTSUM TO ASUMNRZ.
000160 HINZUF-E.
000170     EXIT.
*/ ADD  NAME=ACKORDF
000010 01  S-ASTKOR.
000020*  BESCHREIBUNG DER INITIALISIERUNGS-(ADD-)KARTE UND
000030*               DER KORREKTUR-(REP-)KARTE
000040     05  KTYP                PIC XXX.
000050         88  NEU-K           VALUE 'ADD'.
000060         88  REP-K           VALUE 'REP'.
000070         88  DEL-K           VALUE 'DEL'.
000080         88  DLP-K           VALUE 'DLP'.
000085         88  PER-K           VALUE 'PER'.
000086         88  INS-K           VALUE 'INS'.
000090     05  ASUMNR.
000100         10  ALISTNR         PIC X(8).
000110         10  APOSNR          PIC X(2).
000120     05  NPER                PIC S99  SIGN IS TRAILING SEPARATE.
000130     05  NPERR REDEFINES NPER.
000140         10  KNPER           PIC 99.
000150         10  VNPER           PIC X.
000160     05  BERZT               PIC X(15).
000170     05  WERT.
000180         10  AWERT           PIC S9(15)V999
000190                             SIGN IS TRAILING SEPARATE.
000200         10  NWERT  REDEFINES AWERT  PIC X(19).
000210         10  RWERT  REDEFINES AWERT.
000220             15  KWERT       PIC 9(18).
000230             15  VWERT       PIC X.
000240         10  AWERTA          PIC S9(15)V999
000250                             SIGN IS TRAILING SEPARATE.
000260         10  NWERTA REDEFINES AWERTA .
000270             15  KWERTA      PIC 9(18).
000280             15  VWERTA      PIC X.
000290     05  FILLER              PIC X(11).
*/ ADD  NAME=ACKORR
000010* ABSTIMMSUMMENSATZ KORRIGIEREN
000020     PERFORM READSATZ.
000030     IF  ERR NOT = 0
000040         GO TO KORR-E.
000050     COMPUTE NPER-I =
000060                   NPER IN S-ASTSUM + NPER IN S-ASTKOR.
000070     IF  NPER-I < 1
000080         OR NPER-I > NPER IN S-ASTSUM
000090         MOVE 9 TO ERR
000100         GO TO KORR-E.
000110     SET PIX TO NPER-I
000120     IF  AWERTA IN S-ASTKOR NOT = AWERT IN S-ASTSUM (PIX)
000130         MOVE 4 TO ERR
000140         GO TO KORR-E.
000150     MOVE REP               TO FLAG  IN S-ASTSUM (PIX).
000160     MOVE AWERT IN S-ASTKOR TO AWERT IN S-ASTSUM (PIX).
000170     MOVE BERZT IN S-ASTKOR TO BERZT IN S-ASTSUM (PIX).
000180     MOVE REP  TO KTYP-ZWI.
000190     PERFORM MOVELOG.
000200     PERFORM REWRITESATZ.
000210 KORR-E.
000220     EXIT.
*/ ADD  NAME=ACKORRD
000010* INITIALISIERUNGSKARTEN LESEN
000020     READ D-ASTKOR AT END GO TO ENDE.
000030     IF  NOT DEL-K AND NOT REP-K AND NOT NEU-K
000040         MOVE 7 TO ERR
000050         GO TO LESKOR9.
000060     CALL 'MODAST' USING
000070          ASUMNR IN S-ASTKOR, ASUMNRZ, K2, ERR.
000080     IF  ERR > 0 GO TO LESKOR9.
000090     IF  DEL-K
000100         IF  NPER IN S-ASTKOR = SPACES
000110             GO TO LESKOR9
000120         ELSE MOVE 'DLP' TO KTYP IN S-ASTKOR
000130              GO TO LESKOR5.
000140     IF  AWERT IN S-ASTKOR = SPACES
000150        IF  NEU-K  GO TO LESKOR4 ELSE
000160         MOVE 2 TO ERR
000170     ELSE  EXAMINE NWERT IN S-ASTKOR
000180         REPLACING LEADING ' ' BY '0'
000190             IF  KWERT IN S-ASTKOR NOT NUMERIC
000200                     MOVE 2 TO ERR
000210                     GO TO LESKOR9.
000220     IF VWERT NOT = '-' MOVE '+' TO VWERT.
000230     IF  REP-K GO TO LESKOR5.
000240 LESKOR4.
000250     MOVE 6 TO NPER IN S-ASTKOR.
000260     GO TO LESKOR9.
000270 LESKOR5.
000280     IF  NPER IN S-ASTKOR = SPACES
000290        MOVE 9 TO ERR
000300        GO TO LESKOR9.
000310     EXAMINE NPERR IN S-ASTKOR REPLACING LEADING ' ' BY '0'.
000320     IF  KNPER NOT NUMERIC MOVE 9 TO ERR ELSE
000330     IF  VNPER NOT = '-' MOVE '+' TO VNPER.
000340     IF  DLP-K GO TO LESKOR9.
000350     IF  AWERTA IN S-ASTKOR = SPACES
000360             MOVE 2 TO ERR
000370         ELSE  EXAMINE NWERTA IN S-ASTKOR
000380               REPLACING LEADING ' ' BY '0'
000390               IF KWERTA IN S-ASTKOR NOT NUMERIC
000400                     MOVE 2 TO ERR.
000410     IF  VWERTA NOT = '-' MOVE '+' TO VWERTA.
000420 LESKOR9.
000430     EXIT.
*/ ADD  NAME=ACKORRDV
000010* INITIALISIERUNGSKARTEN LESEN
000020     READ D-ASTKOR AT END GO TO ENDE.
000030     IF  NOT DEL-K AND NOT REP-K AND NOT NEU-K AND NOT PER-K
000031                   AND NOT INS-K
000040         MOVE 7 TO ERR
000050         GO TO LESKOR9.
000060     CALL 'MODAST' USING
000070          ASUMNR IN S-ASTKOR, ASUMNRZ, K2, ERR.
000080     IF  ERR > 0 GO TO LESKOR9.
000090     IF  DEL-K
000100         IF  NPER IN S-ASTKOR = SPACES
000110             GO TO LESKOR9
000120         ELSE MOVE 'DLP' TO KTYP IN S-ASTKOR
000130              GO TO LESKOR5.
000140     IF  PER-K  GO TO LESKOR5.
000145* NEUER WERT (AWERT) PRUEFEN
000150     IF  AWERT IN S-ASTKOR = SPACES
000160        IF  NEU-K  GO TO LESKOR5 ELSE
000170         MOVE 2 TO ERR
000180     ELSE  EXAMINE NWERT IN S-ASTKOR
000190         REPLACING LEADING ' ' BY '0'
000200             IF  KWERT IN S-ASTKOR NOT NUMERIC
000210                     MOVE 2 TO ERR
000220                     GO TO LESKOR9.
000230     IF VWERT NOT = '-' MOVE '+' TO VWERT.
000240 LESKOR5.
000250     IF  NPER IN S-ASTKOR = SPACES
000260        MOVE 9 TO ERR
000270        GO TO LESKOR9.
000280     EXAMINE NPERR IN S-ASTKOR REPLACING LEADING ' ' BY '0'.
000290     IF  KNPER NOT NUMERIC MOVE 9 TO ERR ELSE
000300     IF  VNPER NOT = '-' MOVE '+' TO VNPER.
000310     IF  DLP-K OR INS-K GO TO LESKOR9.
000320     IF  REP-K  GO TO LESKOR7.
000322*  BEI PER UND ADD MUSS PERIODE > 0 SEIN
000330     IF  NPER IN S-ASTKOR < 1 OR NPER IN S-ASTKOR > 15
000340         MOVE 9 TO ERR.
000350     GO TO LESKOR9.
000360 LESKOR7.
000365* BEI REP ALTEN WERT (AWERTA) PRUEFEN
000370     IF  AWERTA IN S-ASTKOR = SPACES
000380             MOVE 2 TO ERR
000390         ELSE  EXAMINE NWERTA IN S-ASTKOR
000400               REPLACING LEADING ' ' BY '0'
000410               IF KWERTA IN S-ASTKOR NOT NUMERIC
000420                     MOVE 2 TO ERR.
000430     IF  VWERTA NOT = '-' MOVE '+' TO VWERTA.
000440 LESKOR9.
000450     EXIT.
*/ ADD  NAME=ACLOGDF
000010*  LOGSATZ
000020 01  S-ASTLOG.
000030     05  SORTBEGRIFF.
000040         10  LOGUHR          PIC  9(7)   COMP-3.
000050         10  LOGDAT          PIC  9(7)   COMP-3.
000060     05  LFLAG               PIC X.
000070     05  KTYP                PIC X.
000080     05  ASUMNR.
000090         10  ALISTNR         PIC X(8).
000100         10  APOSNR          PIC XX.
000110     05  NPER                PIC S9(4)   COMP.
000120     05  LOGPER.
000130         10  FLAG            PIC X.
000140         10  BERZT           PIC X(15).
000150         10  AWERT           PIC S9(15)V999 COMP-3.
000160         10  AWERTA  REDEFINES AWERT
000170                             PIC S9(15)V999 COMP-3.
000180         10  NWERT  REDEFINES AWERT PIC X(10).
*/ ADD  NAME=ACRSHIFT
000010     ADD SHIFT  J GIVING I.
000020     MOVE PERDEF IN S-ASTSUM (I) TO PERDEF IN S-ASTSUM (J).
*/ ADD  NAME=ACSUMDF
003150 01  S-ASTSUM.
001020*  SATZBESCHREIBUNG DER ABSTIMMSUMMENDATEI
001025   05  LFLAG                 PIC XX.
001030   05  ASUMNR.
001040     10  ALISTNR         PIC X(8).
001050     10  APOSNR          PIC XX.
001060   05  NPER              PIC S9999       COMP SYNC.
001070   05  PERDEF            OCCURS 6  INDEXED BY PIX.
001080     10  FLAG            PIC X.
001090*          NONE          VALUE '0'.
001100*          NEU           VALUE '1'.
001110*          REP           VALUE '2'.
001190     10  BERZT           PIC X(15).
001200     10  AWERT           PIC S9(15)V999  COMP-3.
*/ ADD  NAME=ACSUMDFV
000422 01  S-ASTSUM.
000424     05  LFLAG                  PIC XX.
000425 05  ASUMNR.
000426         10  ALISTNR            PIC X(8).
000428         10  APOSNR             PIC XX.
000430     05  NPER                   PIC S9999   COMP SYNC.
000432     05  PERDEF                 OCCURS 1 TO 15 DEPENDING ON NPER
000433                 IN S-ASTSUM
000434                                INDEXED BY PIX.
000436         10  FLAG               PIC X.
000438         10  BERZT              PIC X(15).
000439         10  AWERT              PIC S9(15)V999  COMP-3.
*/ ADD  NAME=ACSUMRD
000010* ABSTIMMSUMMENSATZ LESEN
000015     MOVE ASUMNRZ TO ASUMNR IN S-ASTSUM.
000020     READ D-ASTSUM
000023        INVALID KEY MOVE 6 TO ERR.
000030*    IF  LFLAG IN S-ASTSUM = HIGH-VALUE MOVE 6 TO ERR.
000040     IF STAT NOT = '00' MOVE 6 TO ERR.
*/ ADD  NAME=ACSUMRW
000010* REWRITE ABSTIMMSUMMENSATZ
000020     REWRITE S-ASTSUM.
000030     PERFORM WRITELOG.
*/ ADD  NAME=ACSUMWT
000010* ABSTIMMSUMMEN-SATZ SCHREIBEN
000020     WRITE S-ASTSUM  INVALID KEY GO TO A1.
000030     PERFORM WRITELOG.
000040      GO TO A2.
000050 A1.   MOVE 5 TO ERR.
000060 A2.   EXIT.
*/ ADD  NAME=ACUEB
023040     ADD 1 TO SEIZAE.
023050     MOVE 0 TO ZEIZAE.
023060     MOVE SEIZAE TO SEITE.
023080     WRITE S-ASTPRINT FROM UEB1.
023090     WRITE S-ASTPRINT FROM UEB2.
023100     WRITE S-ASTPRINT FROM UEB3.
023110     WRITE S-ASTPRINT FROM UEB4.
023120     WRITE S-ASTPRINT FROM UEB5.
023130 SCHR-UEB-E.
023140     EXIT.
*/ ADD  NAME=ACVOR
           MOVE CURRENT-DATE TO DATUSA.
           STRING TT, '.', MM, '.19', JJ DELIMITED BY SIZE INTO DATUM.
           MOVE TIME-OF-DAY  TO TIMUSA.
           STRING ST, ',', MN, ',', SC DELIMITED BY SIZE INTO ZEIT.
           CALL 'ASA'  USING D-ASTPRINT.
008030     OPEN OUTPUT D-ASTPRINT.
*/ ADD  NAME=ACZTD
012120* ASTSUM INITIALISIEREN
012140     MOVE SPACES TO BERZT IN S-ASTSUM (I).
012150     MOVE ZERO TO AWERT IN S-ASTSUM (I).
012160     MOVE INIT TO FLAG  IN S-ASTSUM (I).
*/ ADD  NAME=AENTRY
         MACRO
         AENTRY
*                                                                     *
*    BESCHREIBUNG DER MOEGLICHEN AUFRUFE DER ABSTIMMUNG               *
*    --------------------------------------------------               *
*                                                                     *
*    AUFRUF    = CALL COBAST,(RETCODE,BERZEIT,AT1,AT2,...,ATN),VL     *
*                     ------                                          *
*    KZCALL    =X'0FF'                                                *
*                                                                     *
*    ZWECK     = DURCHFUEHRUNG DER GESAMTEN ABSTIMMUNG MIT            *
*                ABSTIMMKARTEN LESEN,                                 *
*                EXTERNE U. INTERNE VERGLEICHE DURCHFUEHREN,          *
*                ABSTIMMLISTE DRUCKEN,                                *
*                UPDATE DER ABSTIMMSUMMENDATEI                        *
*                                                                     *
*    AUFRUF    = CALL PL1AST,(SIEHE COBAST),VL                        *
*                     ------                                          *
*    KZCALL    = X'1FF'                                               *
*                                                                     *
*    ZWECK     = SIEHE COBAST                                         *
*                                                                     *
*    AUFRUF    = CALL FORAST,(SIEHE COBAST),VL                        *
*                     ------                                          *
*    KZCALL    = X'2FF'                                               *
*                                                                     *
*    ZWECK     = SIEHE COBAST                                         *
*                                                                     *
*    AUFRUF    = CALL COBAPARM,(SIEHE COBAST),VL                      *
*                     --------                                        *
*    KZCALL    = X'001'                                               *
*                                                                     *
*    ZWECK     = UEBERGABE DER ABSTIMMSUMMEN-TABELLEN-ADRESSE         *
*                UND DER BERICHTSZEIT-ADRESSE,                        *
*                EINLESEN DER ABSTIMMKARTEN                           *
*                                                                     *
*    AUFRUF    = CALL PL1APARM,(SIEHE COBAST),VL                      *
*                     --------                                        *
*    KZCALL    = X'101'                                               *
*                                                                     *
*    ZWECK     = SIEHE COBAPARM                                       *
*                                                                     *
*    AUFRUF    = CALL COBACOMP,(ARGTYP,SUM1,SUM2,...,SUMN),VL         *
*                     --------                                        *
*    KZCALL    = X'002'                                               *
*                                                                     *
*    ZWECK     = EXTERNEN BZW. INTERNEN ABSTIMMVERGLEICH              *
*                ALLER ODER DER IN DER AUFRUFLISTE ANGEFUEHRTEN       *
*                ABSTIMMSUMMEN DURCHFUEHREN                           *
*                                                                     *
*    AUFRUF    = CALL PL1ACOMP,(SIEHE COBACOMP),VL                    *
*                     --------                                        *
*    KZCALL    = X'102'                                               *
*                                                                     *
*    ZWECK     = SIEHE COBACOMP                                       *
*                                                                     *
*    KZCALL    = X'006'                                               *
*                     --------                                        *
*    AUFRUF    = CALL COBALIST                                        *
*                                                                     *
*    ZWECK     = DRUCKEN DER ABSTIMMLISTE MIT ABSTIMMERGEBNIS,        *
*                DIE BIS DAHIN NOCH NICHT DURCHGEFUEHRTEN             *
*                ABSTIMMVERGLEICHE WERDEN AUSGEFUEHRT                 *
*                                                                     *
*    AUFRUF    CALL PL1ALIST                                          *
*                   --------                                          *
*    KZCALL    = X'106'                                               *
*                                                                     *
*    ZWECK     = SIEHE COBALIST                                       *
*                                                                     *
*    AUFRUF    = CALL COBAUPDT,(SIEHE COBACOMP),VL                    *
*                     --------                                        *
*    KZCALL    = X'008'                                               *
*                                                                     *
*    ZWECK     = SCHREIBEN ALLER ODER DER IN DER AUFRUFLISTE          *
*                ANGEFUEHRTEN ABSTIMMSUMMEN AUF DIE ABSTIMM=          *
*                SUMMENDATEI                                          *
*                                                                     *
*    AUFRUF    = CALL PL1AUPDT,(SIEHE COBACOMP),VL                    *
*                                                                     *
*    KZCALL    = X'108'                                               *
*                                                                     *
*    ZWECK     = SIEHE COBAUPDT                                       *
*                                                                     *
*    AUFRUF    = CALL ASTTXT,(TXTKZ,TXT1,TXT2,...TXTN),VL             *
*                                                                     *
*    KZCALL    = X'300'                                               *
*                                                                     *
*    ZWECK     = ADRESSUEBERGABE DER VARIABLEN TEXTE                  *
*                CONDITION CODE IMMER SETZEN                          *
*
*    AUFRUF    = CALL ASTTXTOP,(TXTKZ,TXT1,TXT2,...TXTN),VL           *
*                                                                     *
*    KZCALL    = X'400'                                               *
*                                                                     *
*    ZWECK     = ADRESSUEBERGABE DER VARIABLEN TEXTE                  *
*                                                                     *
*    AUFRUFVARIABLE =                                                 *
*                                                                     *
*        H     RETCODE = RETURNCODE  = 00  KEIN FEHLER                *
*                                    = 22  PARAMETERKARTEN-FEHLER     *
*                                    = 33  KEINE ABSTIMMLISTE, DA     *
*                                          DDKARTE FEHLT              *
*                                    = 44  KEIN UPDATE ERLAUBT ODER   *
*                                          UPDATE UNVOLLSTAENDIG      *
*                                    = 66  INT.ABSTIMMUNG FALSCH      *
*                                    = 77  EXT.ABSTIMMUNG FALSCH      *
*                                    = 88  AUFRUF-FEHLER              *
*                   TRETEN MEHRERE FEHLER AUF, GILT FOLGENDE RANGFOLGE*
*                        44, 33, 66, 77, 22                           *
*                   BEI RETCODE = 88 WIRD OHNE WEITERE VERARBEITUNG   *
*                   INS AUFRUFENDE PROGRAMM GESPRUNGEN                *
*                                                                     *
*        CL15  BERZEIT = BERICHTSZEIT DER ABZUSTIMMENDEN DATEN        *
*                                                                     *
*        A     AT1    )                                               *
*              AT2    )  ABSTIMMSUMMENTABELLEN (MAX 15)               *
*               .     )= JEDE TABELLE ENTHAELT BELIEBIG VIELE         *
*               .     )  ABSTIMMSUMMEN GLEICHER LAENGE                *
*              ATN    )                                               *
*                                                                     *
*        CL1   ARGTYP  =  0  ALLE ABSTIMMSUMMEN WERDEN BEARBEITET     *
*                      >  0  IN AUFRUFLISTE AUFGEFUEHRTE ABSTIMM-     *
*                            SUMMEN WERDEN BEARBEITET                 *
*        CL4   SUM1   )  ZU BEARBEITENDE ABSTIMMSUMMEN                *
*        ODER  SUM2   )  BESTIMMT DURCH                               *
*        CL2    .     )=  1. ARGTYP=1 -->  TABLLENINDEX+SUMMENINDEX CL4
*               .     )   2. ARGTYP=2 -->  POSITIONS-NR             CL2
*              SUMN   )      BEIDE ANGABEN OHNE VORZEICHEN Z.B.X'F0F1'
*                                                                     *
*        H     TXTKZ  =  0  VOLLSTAENDIGES ABST.BLATT MIT VAR. TEXTEN
*                        1  NUR VAR.TEXTE OHNE ABST.BLATT
*                       -1  KEINE VAR.TEXTE UEBERGEBEN
*
*        A     TXT1...TXTN  =  VARIABLE TEXTE BELIBIGER LAENGE
*
**************************************************************
         MEND
*/ ADD  NAME=AREG
         MACRO
         AREG
*  REGISTER-DEFINITIONEN
R0       EQU   0       N
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
*/ ADD  NAME=GETTIME
         MACRO
         GETTIME &WO
         SPACE 1
*  ZEITPUNKT ERFASSEN
         TIME  DEC
         L     1,=V(PTRZEIT)
         L     2,0(1)
         MVC   0(4,2),=CL4'&WO'
         ST    0,4(2)
         LA    2,8(2)
         ST    2,0(1)
         MEND
*/ ADD  NAME=MASATZ
         MACRO
         MASATZ
*  BESCHREIBUNG DES ABSTIMMSUMMANSATZES
*  ------------------------------------
*
*
*  DIE FELDER FLAG BIS AWERT WIEDERHOLEN SICH NPER MAL
DASATZ   DSECT
LFLAG    DS    XL2                      LOESCH-FLAG
ASUMNR   DS    0CL10                    ABSTIMMSUMMEN-NR
ALISTNR  DS    CL8                      ABSTIMMLISTEN-NR
APOSNR   DS    CL2                      POSITIONS-NR
NPER     DS    H                        ANZAHL DER FOLGENDEN PERIODEN
PERDEF   DS    0CL1
FLAG     DS    CL1
NONE     EQU   C'0'                     KEIN INHALT
NEU      EQU   C'1'                     SUMME HINZUGEFUEGT
REP      EQU   C'2'                     SUMME KORRIGIERT
WIEDER   EQU   C'3'                    SUMME BEI WIEDERHOLUNG ERSETZT
BERZT    DS    CL15                     BERICHTSZEIT
AWERT    DS    PL10                     ABSTIMMSUMME
PEREND   DS    0CL1
PERLN    EQU   PEREND-FLAG              LAENGE DER PERIODENEINTRAGUNG
VORLN    EQU   PERDEF-LFLAG
         MEND
*/ ADD  NAME=MATAB
         MACRO
         MATAB
***********************************************************************
*                                                                     *
*    BESCHREIBUNG VON ALLGEMEIN INTERESSANTEN FELDERN                 *
*                                                                     *
***********************************************************************
         SPACE 2
DATAB    DSECT
PARM     DS    0CL1                PARAMETERLISTE DES ABSTIMM-UP-AUFRUF
HPSUMN   DS    F                   ANZAHL DER SUMMEN-TABELLEN
PRETURN  DS    A                   --> RETURNWORT
PBZEIT   DS    A                   --> BERICHTSZEIT
PHPSUM   DS    15A                 --> SUMMEN-TABELLEN
PHSUME   DS    15A                 SUMTAB-ERGAENZUNG
*                                  LINKES HALBWORT = ANZ.D.SUM.IN TAB.
*                                  RECHTES HWORT   = LAENGE D.SUM.
TABANZ   EQU   15                  ANZAHL DER ABSTIMMTABELLEN
         SPACE 1
PKTAB    DS    A                   --> KTAB-ANFANG
PKTABE   DS    A                   --> KTAB (LETZTES WORT)
PSTAB    DS    A                   --> STAB-ANFANG
PSTABE   DS    A                   --> STAB (LETZTES WORT)
         SPACE 1
LDCBSW   DS    CL1                      ALISTE-DCB-SWITCH
DCBCLOSE EQU   0                        DCB CLOSED
DCBOPEN  EQU   1                        DCB OPENED
DDFEHLT  EQU   3                        DDKARTE FEHLT
DCBTEST  EQU   3                        DCB-TESTBYTE
*  ANGABEN AUS DER KOPFKARTE
APGM     DS    CL9                 PROGRAMMNAME
AUEB     DS    CL33                ABSTIMMLISTE-UEBERSCHRIFT
AAST     DS    CL8                 ABSTIMMLISTEN-NR        T
AASTC    DS    CL8                 AAST NORMIERT
DATUM    DS    CL10                     DATUM   )  WANN ABST.LISTE
UHRZEIT  DS    CL8                      UHRZEIT )  ERSTELLT WIRD
ASPRACHE DS    CL1            SPRACHE DES AUFRUFENDEN PGM
COBOL    EQU   0                 = COBOL
PL1      EQU   1                 = PL/1
FORTRAN  EQU   2                 = FORTRAN
AUPDTE   DS    CL1            UPDATE IN ABST.SUDATEI GENERELL ERLAUBT
ADCBSW   DS    CL1            KENNUNG, OB DD-KARTE ASTSUM VORHANDEN
AERGI    DS    CL1                     GENERELLES ERGEBNIS INT.ABST.
AERGE    DS    CL1                     GENERELLES ERGEBNIS EXT.ABST.
SAODER   EQU   2              ODER-BEDINGUNG
AREPEAT  DS    CL1                     WIEDERHOLUNGSLAUF
RLEER    EQU   0                       = NICHT GESETZT
RNO      EQU   1                       = NEIN
RYES     EQU   2                       = JA
AASTOLD  DS    CL8                     ALTE ALIST-NR
ACCT     DS        CL1       ERGEBNIS ACCOUNTING ANALYSE
ATXTP    DS    A              --> VAR. TEXTE
*                             = 0 --> KEINE VAR.TEXTE
*        AUFBAU TEXTBEREICH :
*              H  ANZ TEXTE
*              H  ANZ TEXTE UNGLEICH NULL
*              A  -->1. FREIER PLATZ
*         N*CL50  TEXTE
ATXTKZ   DS    H
*                              0  KOMPL.ABSTIMMLISTE MIT VAR.TEXTEN
*                              1  NUR VAR.TEXTE DRUCKEN
ALCOPY   DS    CL1            KENNUNG LISTENKOPIE
ALCNR    DS    CL3            LISTENNR FUER KOPIE
ASWITCH  DS    XL1            KENNUNGEN
ALOGID   EQU   X'01'          MASCH-ID AN LOGNAME ANHAENGEN
ALOGIDNO EQU   X'FE'          LOESCHEN ALOGID
ASUMNEU  EQU   X'02'          DSNAME ASTSUM ABAENDERN
LKARTE   EQU   X'04'          L-KARTE VORHANDEN
LCALL    EQU   X'08'          OP023 AUFRUFEN
CCALL    EQU   X'10'          CLEARTAPE AUFRUFEN
ASBZT    DS    CL8            ZUSAETZLICHE BERICHTSZEIT
SEIZAE   DS    PL1            ASTBLATT SEITENZAEHLER
ZEIZAE   DS    PL3            ASTBLATT ZEILENZAEHLER
DATABE   DS    0CL1
LATAB    EQU   DATABE-DATAB
         MEND
L
*/ ADD  NAME=MKTAB
         MACRO
         MKTAB
***********************************************************************
*                                                                     *
*    BESCHREIBUNG DER TABELLE KTAB, DIE DIE DATEN FUER DIE            *
*    ABSTIMMLISTE ENTHAELT                                            *
*                                                                     *
***********************************************************************
         SPACE 2
DKTAB    DSECT
KNEXT    DS    0F
         DS    XL1           KARTENKENNUNG
KFILE    EQU   C'F'               = FILEKARTE
KCOMMENT EQU   C'*'               = KOMMENTARKARTE
KSUM     EQU   C'S'               = SUMMENKARTE
KLISTE   EQU   C'L'               = LISTENKARTE
         DS    AL3            --> NAECHSTE KTAB-EINTRAGUNG
*                             LETZTE EINTRAGUNG = -1
*
*  FILEKARTE
TFDDN    DS    CL8            DDNAME
TFCLEAR  DS    CL1            RYES=TAPCLEAR AUFRUFEN
KTABFEND DS    0F
LKTABF   EQU   KTABFEND-KNEXT LAENGE FILEKARTE-DATEN
*
*  LISTENKARTE
         ORG   TFDDN
TLDDN    DS    CL8            DDNAME
TLNR     DS    CL3            LISTEN-NR.
TLSADR   DS    A              -->SEITENANZAHL
TLSLENG  DS    H              LAENGE DES FELDES SEITENANZAHL
TLSDEZ   DS    H              ANZAHL DER DEZIMALSTELLEN
KTABLEND DS    0F
LKTABL   EQU   KTABLEND-KNEXT  LAENGE LISTENKARTE-DATEN
*
*  KOMMENTARKARTE
         ORG   TFDDN
TKOM     DS    CL66
KTABKEND DS    0F             TEXT
LKTABK   EQU   KTABKEND-KNEXT LAENGE KOMMENTARKARTE-DATEN
*
*  SUMMENKARTE
         ORG   TFDDN
TSTAB    DS    A                   --> ZUGEHOERIGE STAB
TSETAB   DS    A             --> ZUGEHOERIGE SETAB
TSBEZ    DS    CL34           VOR, NR, BEZEICHNUNG
TSMIT    DS    CL24           ABST.ERG., ABZUST.MIT
TSDEZ    DS    H              DEZIMALSTELLE
KTABSEND DS    0F
LKTABS   EQU   KTABSEND-KNEXT LAENGE SUMMENKARTE-DATEN
         MEND
*/ ADD  NAME=MSTAB
         MACRO
         MSTAB
***********************************************************************
*                                                                     *
*    BESCHREIBUNG DER TABELLE STAB, DIE ANGABEN UEBER DIE             *
*    ABZUSTIMMENDEN SUMMEN ENTHAELT                                   *
*                                                                     *
*        DSTAB   BESCHREIBT ABSTIMMSUMME                              *
*        DSETAB  BESCHREIBT DIE SUMME, MIT DER ABGESTIMMT WERDEN SOLL *
*                                                                     *
*                 NACH DSTAB FOLGT NTABE MAL DSETAB                   *
*                                                                     *
***********************************************************************
DSTAB    DSECT
*****
SNEXT    DS    A              --> NAECHSTE DSTAB-EINTRAGUNG
*                                 -1 NACH LETZTER EINTRAGUNG
SIX      DS    CL4            TABELLEN-INDEX D. ABSTIMMSUMME
SADR     DS    A              --> ABSTIMMSUMME
SLENG    DS    H                        ABSTIMMSUMMENLAENGE
SPOS     DS    CL2            POSITIONS-NR
NSETAB   DS    H              ANZAHL DER FOLGENDEN EINTRAGUNGEN UEBER
*                             DIE SUMMEN, MIT DENEN ABGESTIMMT WIRD
SDEZ     DS    H              ANZAHL DER DEZIMALSTELLEN
SAERG    DS    CL1            ABSTIMMERGEBNIS
SANO     EQU   0                   NICHT ABGESTIMMT
SAOK     EQU   1                   ABST. RICHTIG
SAIMPOS  EQU   4                   ABST. NICHT MOEGLICH
SAFALSE  EQU   8                   ABST. FALSCH
SAVAR    EQU   X'10'          VARIABLE SUMMEN
SUPDTE   DS    CL1            UPDATE DER ABST.SUMMENDATEI
SUNO     EQU   0                   NICHT ERLAUBT
SUYES    EQU   1                   ERLAUBT
SUOK     EQU   2                   UPDATE ERFOLGREICH DURCHGEFUEHRT
SUIMPOS  EQU   4                   UPDATE NICHT MOEGLICH
SSUMDA   DS    CL1                 KENNUNG, OB SSUM GEFUELLT
SSUM     DS    PL10           ABSTIMMSUMME                S9(15)V999 C3
SVERSUM  DS    PL10           BERECHNETE VERGLEICHSSUMME  S9(15)V999 C3
SAVERNR  DS    XL1                 NR D.LETZTEN VERGL.BEI ODER
*
SEND     DS    0F
LSTAB    EQU   SEND-SNEXT     LAENGE DSTAB
         SPACE 2
DSETAB   DSECT
******
         SPACE 1
SEANF    DS    0F
SEMITTXT DS    2F,H           FELD 'ABZUSTIMMEN MIT' KOMPRIMIERT
         ORG   SEMITTXT
*                                EXTERNE ABST.     / INT.ABST.
SEMITTX1 DS    CL8            HINWEIS ABSTIMMBLATT / --> STAB
SEMITTX2 DS    CL2            POSITIONS-NR.        /    ---
SEOP     DS    H              OPERATION
ODER     EQU   1
SEPER    DS    H              PERIODE, MIT DER ABZUST. IST
*                             = 1  LETZTE PERIODE
*                             = 2  VORLETZTE PERIODE   USW.
SATYP    DS    CL1            ABSTIMM-TYP
*                             = '0' KEINE ABSTIMMUNG
SAINT    EQU   C'I'           = 'I' INTERNE ABST.
SAEXT    EQU   C'E'           = 'E' EXTERNE ABST.
SESUM    DS    PL10           ABSTIMMSUMME
SESUMDA  DS    CL1            KENNUNG, OB ABZUST.MIT-SUMME GEFUNDEN W.
*                             SANO = NICHT GEFUNDEN
*                             SAOK = GEFUNDEN
SEKZ     DS    CL1
SEDO     EQU   X'01'          BEI RECHNUNG BERUECKSICHTIGEN
SEDOERR  EQU   X'02'          NUR BEI FEHLER LISTEN
*
SEEND    DS    0F
LSETAB   EQU   SEEND-SEANF    LAENGE DESTAB
         MEND
*/ ADD  NAME=MVCABST
         MACRO
         MVCABST
         SPACE 2
*  ABSTIMMSUMME AUS AUFRUFENDEN PROGRAMM NACH STAB UEBERTRAGEN
*   R2  RUECKSPRUNGADRESSE
*   R3  --> WOHIN UEBERTRAGEN
MVCABST  EQU   *
         L     R4,SADR                  --> VON
         CLI   ASPRACHE,FORTRAN
         BNE   MVCABST5
         L     R1,0(R4)                ABST.SUM BINAER
         CVD   R1,DWMVC                ABST.SUM GEPACKT
         LA    R4,DWMVC                NEUES -->VON
MVCABST5 EQU   *
         LH    R1,SLENG
         BCTR  R1,0                     MVC-LAENGE
         EX    R1,MVC                   VON --> NACH
         LA    R1,4                     3 - DEZIMALSTELLEN = ANZAHL DER
         SH    R1,SDEZ                  LINKSVERSCHIEBUNGEN, UM 3 DEZ.
         B     LOOPMVCE                 STELLEN ZU ERREICHEN
LOOPMVC  EQU   *                   VERSCHIEBUNG, DAMIT EMPFANGENDES
         MVC   ZWIP,0(R3)          FELD 3 DEZIMALSTELLEN HAT
         MVO   0(10,R3),ZWIP
         NI    9(R3),X'0F'         VERSETZTES VORZEICHEN LOESCHEN
LOOPMVCE EQU   *
         BCT   R1,LOOPMVC          NOCH NICHT 3 DEZIMALSTELLEN
         BR    R2
         SPACE 1
DWMVC    DS    D                       ARBEITSFELD
MVC      ZAP   0(10,R3),0(0,R4)         VON --> NACH
ZWIP     DS    PL10
         MEND
*/ ADD  NAME=OP023ARG
         MACRO
&NM      OP023ARG
         LCLC  &N
&N       SETC  '&NM'
&N       DSECT
         DS    0D
OP023ANF EQU   *
OPLIST#  DS    0CL12      LISTEN#
OPPGM    DS    CL9
OPLNR    DS    CL3
OPDSN    DS    CL44       DSNAME DER DRUCKDATEI
OPBERZ   DS    CL8        BERICHTSZEIT
OPERSTTG DS    CL10       ERSTELLUNGSTAG (TAG DES PROGRAMMLAUFS)
OPERSTTM DS    CL8        ERSTELLUNGSUHRZEIT
OPPAGES  DS    XL4        ANZAHL SEITEN DIESER LISTE
OPVOLCNT DS    XL2        ANZAHL VOLUMES DER DRUCKDATEI
OPVOLSER DS    5CL6       DIE ERSTEN 5 VOLSER#
OPDDN    DS    CL8        DDNAME DER DRUCKDATEI
OP023END EQU   *-OP023ANF
         MEND
*/ ADD  NAME=REG
         MACRO
         REG
*
*        REGISTER EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
RA       EQU   R10
R11      EQU   11
RB       EQU   R11
R12      EQU   12
RC       EQU   R12
R13      EQU   13
RD       EQU   R13
R14      EQU   14
RE       EQU   R14
R15      EQU   15
RF       EQU   R15
         SPACE 2
         MEND
*/ ADD  NAME=TIOTSCAN
         MACRO
&NM      TIOTSCAN  &DDNM,&JOBNM,&PROCNM,&STEPNM,&TIOT=
.*  TIOTSCAN INFORMES ABOUT EXISTENCE OF DDNAME IN THE TIOT.
.*  WHEN ASKD,THIS MACRO CAN EXTRACT JOBNAME,PROCNAME,STEPNAME
.*  FROM TIOT AND STORE THEM IN THE OUTSIDE OF MACRO DEFINIED FIELDS
.*  THE TIOT ADDRESS MAY BE SPECIFIED IN A FULLWORD,
.*  WHEN MACRO EXTRACT USED BEFORE.
.*  &DDNAME-THE ADDRESS OF IT MAY BE SPECIFIED IN THE FORM:
.*          FULLWORD OR (REGISTER)
.*  &JOBNAME-THE ADDRESS OF THE ASSIGNED FIELD MUST BE SPECIFIED IN
.*           THE FORM:FULLWORD OR (REGISTER) OR DISPLACEMENT(REGISTER)
.*  THE SAME FOR &PROCNAME AND &STEPNAME.
         LCLA  &L
         LCLB  &DN,&JN,&PN,&SN,&COUNT,&CN,&TI
         LCLC  &GNAME,&GNAME1,&GNAME2,&REG,&FELD,&SYM,&NHM
&GNAME   SETC  'IHB'.'&SYSNDX'
&GNAME1  SETC  '&GNAME'.'A'
&GNAME2  SETC  '&GNAME'.'E'
         AIF   (T'&NM EQ 'O').PEDR
&NHM     SETC  '&NM'
&NHM     EQU   *
.PEDR    AIF   (T'&DDNM EQ 'O').ERROR
&DN      SETB  (1)
         SR    0,0           CLEAN  REG
         AIF   ('&DDNM'(1,1) NE '(').LOAD
         LR    1,&DDNM       LOAD A(DDNAME)
         AGO   .ERROR
.LOAD    LA    1,&DDNM       LOAD  A(DDNAME)
         AGO   .ERROR
.LAOP    AIF   (T'&TIOT EQ 'O').NFND
&TI      SETB  (1)
         L     14,&TIOT      LOAD A(TIOT)
         AIF   (NOT &DN).LOOK
.NFND    ANOP
         AIF   (&TI).LAST
         L     14,16         A(CVT)
         L     14,0(14)      A(CVTTCB)
         L     14,4(14)      A(CURRTCB)
         L     14,12(14)     A(TIOT)
         AIF   (NOT &DN).LOOK
.LAST    LA    15,24(14)     FIRST  TIOT  ENTRY
&GNAME1  CLC   4(8,15),0(1)  DDNAME  EQUAL?
         BE    &GNAME        YES,RETURN
         IC    0,0(15)       GET ENTRY LENGHT
         LTR   0,0           LAST  ONE
         BZ    &GNAME2       YES,RETURN WITH CODE 0
         AR    15,0          NO,DO NEXT ONE
         B     &GNAME1
&GNAME2  SR    15,15         CLEAR REG
&GNAME   EQU   *
.ERROR   ANOP
         AIF   (&CN).LOOK
&CN      SETB  (1)
         AIF   (T'&JOBNM NE 'O').PAL1
.XP      AIF   (T'&PROCNM NE 'O').PAL2
.XS      AIF   (T'&STEPNM NE 'O').PAL3
         AIF   (&DN OR &JN OR &PN).LAOP
         MNOTE 12,'ALL NAMES OMITTED'
         MEXIT
.PAL1    ANOP
&JN      SETB  (1)
&COUNT   SETB  (1)
         AGO   .XP
.PAL2    ANOP
&PN      SETB  (1)
&COUNT   SETB  (1)
         AGO   .XS
.PAL3    ANOP
&SN      SETB  (1)
&COUNT   SETB  (1)
         AGO   .LAOP
.LOOK    AIF   (NOT &JN).PROC
         AIF   (T'&JOBNM EQ 'U').POX
         AIF   ('&JOBNM'(1,1) EQ '(').POLX
&SYM     SETC  '&JOBNM'
         AIF   (T'&JOBNM EQ 'N').ERR
         MVC   &JOBNM,0(14)  MOVE  JOBNAME
         AGO   .PROC
.POLX    ANOP
&REG     SETC  '&JOBNM(1)'
         MVC   0(8,&REG),0(14)      MOVE  JOBNAME
         AGO   .PROC
.POX     ANOP
&L       SETA  K'&JOBNM
.KLAM    AIF   ('&JOBNM'(&L,1) EQ '(').FND
&L       SETA  &L-1
         AGO   .KLAM
.FND     ANOP
&FELD    SETC  '&JOBNM'(1,&L).'8,'
&FELD    SETC  '&FELD'.'&JOBNM'(&L+1,K'&JOBNM-&L)
         MVC   &FELD,0(14)   MOVE  JOBNAME
.PROC    AIF   (NOT &PN).STEP
         AIF   (T'&PROCNM EQ 'U').POY
         AIF   ('&PROCNM'(1,1) EQ '(').POLY
&SYM     SETC  '&PROCNM'
         AIF   (T'&PROCNM EQ 'N').ERR
         MVC   &PROCNM,8(14)      MOVE PROCNAME
         AGO   .STEP
.POLY    ANOP
&REG     SETC  '&PROCNM(1)'
         MVC   0(8,&REG),8(14)        MOVE  PROCNAME
         AGO   .STEP
.POY     ANOP
&L       SETA  K'&PROCNM
.KLM     AIF   ('&PROCNM'(&L,1) EQ '(').FOND
&L       SETA  &L-1
         AGO   .KLM
.FOND    ANOP
&FELD    SETC  '&PROCNM'(1,&L).'8,'
&FELD    SETC  '&FELD'.'&PROCNM'(&L+1,K'&PROCNM-&L)
         MVC   &FELD,8(14)           MOVE PROCNAME
.STEP    AIF   (NOT &SN).ENDO
         AIF   (T'&STEPNM EQ 'U').POZ
         AIF   ('&STEPNM'(1,1) EQ '(').POLZ
&SYM     SETC  '&STEPNM'
         AIF   (T'&STEPNM EQ 'N').ERR
         MVC   &STEPNM,16(14)  MOVE  STEPNAME
         AGO   .ENDO
.POLZ    ANOP
&REG     SETC  '&STEPNM(1)'
         MVC   0(8,&REG),16(14)       MOVE  STEPNAME
         AGO   .ENDO
.POZ     ANOP
&L       SETA  K'&STEPNM
.KLAME   AIF   ('&STEPNM'(&L,1) EQ '(').FOUND
&L       SETA  &L-1
         AGO   .KLAME
.FOUND   ANOP
&FELD    SETC  '&STEPNM'(1,&L).'8,'
&FELD    SETC  '&FELD'.'&STEPNM'(&L+1,K'&STEPNM-&L)
         MVC   &FELD,16(14)            MOVE  STEPNAME
         AGO   .ENDO
.ERR     ANOP
         MNOTE 8,'INCORRECT  SYMBOL &SYM'
.ENDO    MEND
*/ ADD  NAME=XRETURN
         MACRO
&SYM     XRETURN &RC,&MODE,&SP=0
.*
.*                 EXTENDED RETURN MACRO
.*                 RESTORES REGISTERS
.*                 MAY PROVIDE RETURNCODE
.*
         GBLB  &XSAVSA,&XSAVNSA,&XSAV
         GBLC  &XSAVSP,&XSAVNAM
         LCLA  &C
         LCLB  &NC,&CF,&OM,&OS
         LCLC  &R,&NM,&XMODE,&XSP
&OM      SETB  (T'&MODE NE 'O')
&XMODE   SETC  ''
         AIF   (T'&MODE EQ 'O' OR '&MODE' EQ 'R'                       *
                               OR '&MODE' EQ '0').CONT
         MNOTE 8,'UNKNOWN OPERAND'
         MEXIT
.CONT    ANOP
         AIF   (T'&SP EQ 'N').SPFIX
         MNOTE 8,'SUBPOOL NUMBER NOT A SELF-DEFINING TERM'
         MEXIT
.SPFIX   ANOP
         AIF   ('&SP' NE '0' AND '&MODE' NE 'R').SPERR
.XSA     ANOP
         AIF   (NOT &XSAV).SETS
.SETMODE ANOP
         AIF   (&OM OR '&SP' NE '0').TESTSP
&OS      SETB  (1)
         AIF   (NOT &XSAVNSA).SETMODA
&XMODE   SETC  '0'
         MNOTE *,'NO MODE SPECIFICATION, 0 ASSUMED'
         AGO   .TESTSP
.SETMODA ANOP
         AIF   (&XSAVSA).TESTSP
&XMODE   SETC  'R'
         MNOTE *,'NO MODE SPECIFICATION, R ASSUMED'
.TESTSP  ANOP
         AIF   ('&XSAVSP' EQ '&SP').BRANCH
         AIF   ('&SP' EQ '0').SETSP
         MNOTE 8,'SUBPOOL NUMBER &SP NOT EQUAL SUBPOOL NUMBER &XSAVSP I*
               N XSAVE &XSAVNAM'
         MEXIT
.SETSP   ANOP
         MNOTE *,'SUBPOOL NUMBER &XSAVSP FROM XSAVE &XSAVNAM ASSUMED'
.BRANCH  ANOP
&XSP     SETC  '&XSAVSP'
         AIF   (&OS).SETM
.TESTSVA ANOP
         AIF   (&XSAVNSA).TESTMOD
         AIF   (&XSAVSA AND T'&MODE EQ 'O').SETM
         AIF   (NOT &XSAVSA AND '&MODE' EQ 'R').SETM
         AGO   .ERRMODE
.TESTMOD ANOP
         AIF   ('&MODE' EQ '0').SETM
.ERRMODE ANOP
         MNOTE 8,'MODE SPECIFICATION INVALID WITH REGARD TO SAVE AREA S*
               PECIFICATION IN XSAVE &XSAVNAM'
         MEXIT
.SETS    ANOP
&XSP     SETC  '&SP'
.SETM    ANOP
&XSAV    SETB  (0)
         AIF   ('&XMODE' NE '').NOERR
&XMODE   SETC  '&MODE'
.NOERR   ANOP
&NM      SETC  '&SYM'
         AIF   (T'&RC NE 'O').CODE
&NC      SETB  (1)
         AGO   .NOCODE
.CODE    ANOP
&R       SETC  '15'
         AIF   ('&RC'(1,1) EQ '(').REG
         AIF   (T'&RC EQ 'N').FIX
&NM      L     15,&RC                  LOAD CODE
&NM      SETC  ''
         AGO   .NOCODE
.FIX     ANOP
&CF      SETB  (1)
         AGO   .NOCODE
.REG     ANOP
&R       SETC  '&RC'(2,K'&RC-2)
.NOCODE  ANOP
         AIF   ('&XMODE' EQ '0').NSVA
&NM      L     13,4(0,13)              GET HIGH SA ADDR
&NM      SETC  ''
.NSVA    ANOP
         AIF   (&NC OR &CF).NOSTORE
&NM      ST    &R,16(0,13)             STORE CODE
.NOSTORE ANOP
         AIF   ('&XMODE' NE 'R').NORENT
         L     1,8(0,13)               GET LOW SA ADDR
         LH    0,2(1)                  GET LENGTH
         AIF   ('&XSP' EQ '0').FM
         LA    2,&XSP                  WANTED SUBPOOL NUMBER
         SLL   2,24          INSERT SUBPOOL NUMBER INTO R2 HIGH BYTE
         OR    0,2           R0: SP-NO, LENGTH TO BE FREED
.FM      ANOP
         FREEMAIN  R,LV=(0),A=(1)
.NORENT  LM    14,12,12(13)            RESTORE REGS
         AIF   (NOT &CF).EXIT
         LA    15,&RC                  LOAD CODE
&C       SETA  &RC
         AIF   (&C/4*4 EQ &C).EXIT
         MNOTE 0,'UNUSUAL CODE'
.EXIT    MVI   12(13),X'FF'            FORTRAN REQUIREMENT
         SPM   14                      RESTORE PGM MASK AND CC
         BR    14
         MEXIT
.SPERR   ANOP
         MNOTE 4,'SUBPOOL SPECIFICATION INVALID WITHOUT FREEMAIN FUNCTI*
               ON, IGNORED'
         AGO   .XSA
         MEND
*/ ADD  NAME=XSAVE
         MACRO
&SYM     XSAVE &BASE,&AREA,&ID,&LEN,&SP=0
.*
.*                 EXTENDED SAVE MACRO
.*                 ASSUMES ENTRYPOINT ADDRESS IN REGISTER 15
.*                 SAVES REGISTERS 14 THROUGH 12
.*                 LOADS BASE REGISTER AND CHAINES SAVEAREAS
.*                 MAY PRODUCE REENTRANT CODE
.*
         GBLB  &XSAVSA,&XSAVNSA,&XSAV
         GBLC  &XSAVSP,&XSAVNAM
         LCLA  &OFFSET,&BASEOFF,&LLID,&DISPL,&I
         LCLA  &NREG,&REGIX,&LCH
         LCLC  &NM,&REG,&BL
         LCLC  &PREV,&IT
&XSAV    SETB  (1)
&XSAVSA  SETB  (T'&AREA NE 'O')
&XSAVNSA SETB  ('&AREA' EQ '0')
&XSAVSP  SETC  '&SP'
&XSAVNAM SETC  '&SYM'
&OFFSET  SETA  4
&NM      SETC  '&SYM'
&REG     SETC  '15'
&BL      SETC  ''
&IT      SETC  '&ID'
         AIF   (T'&SP EQ 'N').SPFIX
         MNOTE 8,'SUBPOOL NUMBER NOT A SELF-DEFINING TERM'
         MEXIT
.SPFIX   ANOP
         AIF   ('&SP' NE '0' AND T'&AREA NE 'O').SPERR
.NOERR   ANOP
         AIF   (T'&ID EQ 'O').NOID
         AIF   ('&ID' NE '*').SETLL
&I       SETA  8
         AIF   ('&NM' EQ '').SECT
&IT      SETC  '&NM'.'          '
         AGO   .FINDL
.SECT    ANOP
&IT      SETC  '&SYSECT'.'          '
.FINDL   ANOP
         AIF   ('&IT'(&I,1) NE ' ').IDEND
&I       SETA  &I-1
         AIF   (&I NE 0).FINDL
&I       SETA  5
&IT      SETC  'XSAVE'
         AGO   .XID
.IDEND   ANOP
&IT      SETC  '&IT'(1,&I)
.XID     ANOP
&LLID    SETA  &I
         AGO   .ODDEV
.SETLL   ANOP
&LLID    SETA  K'&ID
.ODDEV   ANOP
         AIF   (&LLID NE &LLID/2*2).OVBL
&BL      SETC  ' '
&LLID    SETA  &LLID+1   BLANK
.OVBL    ANOP
&LLID    SETA  &LLID+8   DATE
&DISPL   SETA  4+1+&LLID   B,X,(DATE,ID)
&NM      B     &DISPL.(0,15)
         DC    AL1(&LLID)
         AIF   ('&ID' NE '*' AND '&ID' NE '').IDDEF
         DC    C'&IT&BL'     PGM-ID.
         AGO   .SDATE
.IDDEF   ANOP
         DC    C'&ID&BL'     PGM-ID.
.SDATE   ANOP
         DC    C'&SYSDATE'
&OFFSET  SETA  4+4+1+&LLID   B,STM,X,(DATE,ID)
&NM      SETC  ''
.NOID    ANOP
&NM      STM   14,12,12(13)            SAVE REGS
         AIF   (T'&BASE EQ 'O').NOBASE
         AIF   ('&BASE'(1,1) NE '(').LOAD
&REGIX   SETA  1
&NREG    SETA  N'&BASE
&REG     SETC  '&BASE(&REGIX)'
         LR    &REG,15
&OFFSET  SETA  &OFFSET+2
.LOOP    ANOP
         USING *-&OFFSET+&BASEOFF,&REG
&REGIX   SETA  &REGIX+1
         AIF   ('&REGIX' GT '&NREG').SETUSE
&PREV    SETC  '&REG'
&REG     SETC  '&BASE(&REGIX)'
         LA    &REG,X'FFF'
         LA    &REG,1(&REG,&PREV)
&OFFSET  SETA  &OFFSET+8
&BASEOFF SETA  &BASEOFF+4096
         AGO   .LOOP
.LOAD    LR    &BASE,15                LOAD BASE REG
&OFFSET  SETA  &OFFSET+2
&REG     SETC  '&BASE'
.NOBASE  ANOP
         USING *-&OFFSET,&REG
.SETUSE  ANOP
         AIF   (T'&AREA NE 'O').NORENT
         AIF   ('&SP' EQ '0').SEELEN
         BAL   1,*+8         SKIP DEFINITION
         DC    AL1(&SP)      SPECIFIED SUBPOOL NUMBER
         AIF   (T'&LEN NE 'O').SPEC
         DC    AL3(72)       LENGTH FOR 1 SAVE AREA
         AGO   .LOAD0
.SPEC    DC    AL3(&LEN)     SPECIFIED LENGTH INCLUDING SAVE AREA
.LOAD0   L     0,0(,1)       GET R0 READY FOR GETMAIN
         AGO   .COMP
.SEELEN  ANOP
         AIF   (T'&LEN NE 'O').NOTZERO
         LA    0,72                    GET LENGTH
         AGO   .COMP
.NOTZERO ANOP
         L     0,=A(&LEN)             GET LENGTH
.COMP    ANOP
         GETMAIN   R,LV=(0)
         XC    0(3*4,1),0(1)           ZERO CHAIN ADDRESSES
         AIF   (T'&LEN NE 'O').GET
         LA    0,72                    GET LENGTH
         AGO   .NOSTH
.GET     ANOP
         L     0,=A(&LEN)              GET LENGTH
.NOSTH   ANOP
         STH   0,2(1)                  STORE LENGTH
         AGO   .COM
.NORENT  ANOP
         AIF   ('&AREA' NE '0').SVA
         MEXIT
.SVA     ANOP
         LA    1,&AREA                 GET SA ADDR
.COM     ST    1,8(0,13)               SA DOWN CHAIN
         ST    13,4(0,1)               SA UP CHAIN
         LR    13,1                    LOAD SA REG
         L     1,4(0,13)               GET HIGH SA
         LM    0,1,20(1)               RESTORE REGS 0 AND 1
         AIF   (T'&AREA NE 'O').DBL
         MEXIT
.DBL     AIF   (T'&LEN EQ 'O').TEST
         MNOTE 4,'SAVE AREA ID AND LENGTH MUTUALLY EXCLUSIVE, LENGTH IG*
               NORED'
.TEST    AIF   (T'&AREA EQ 'U').DEFINE
         MEXIT
.SPERR   ANOP
         MNOTE 4,'SUBPOOL SPECIFICATION INVALID WITHOUT GETMAIN FUNCTIO*
               N, IGNORED'
         AGO   .NOERR
.DEFINE  B     &AREA+72                BRANCH AROUND SAVEAREA
&AREA    DC    18F'0'                  SAVEAREA
         MEND
