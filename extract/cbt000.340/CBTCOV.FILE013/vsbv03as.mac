             TITLE ' D E S C R I P T I O N'
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                    D E S C R I P T I O N                            *
*                   -----------------------                           *
*      THIS ROUTINE WORKS AS A HOME ADDRESS SPACE FOR ALL             *
*      CURRENT AND FUTURE TASK IN THE SYSTEM.                         *
*                                                                     *
*      IT HOLDS ALL DIRECTORY ENTRIES OF ALL(IF YOU WISH)             *
*      LIBRARIES CONCATENATED TO SYS1.LINKLIB.                        *
*                                                                     *
*      IT IS USED INSTEAD OF IBM FIX BLDL LIST AND SAVES YOU          *
*      A LOT OF EXCP'S IN YOUR SYSTEM.                                *
*                                                                     *
*      IT IS ACTIVATED THRU THE ZAP DESCRIBED BELOW.                  *
*                                                                     *
*      WHEN LLA IS STARTED, IT READS ALL LNKLSTXX DIRECTORIES         *
*      AND BUILDS THE REQUIRED BLDL-LISTS. IT HOLDS THEM IN ITS       *
*      INTERNAL CONTROL BLOCKS (ONE PER LIB) WHICH ARE                *
*      CHAINED TOGOTHER. THEN IT BUILDS ALL REQ. CONTROL BLOCKS       *
*      FOR CROSSMEMORY SERVICES AND WAITS ON A WTOR.                  *
*                                                                     *
*      ======> C A U T I O N <=========                               *
*                                                                     *
*      YOU NEED TO HAVE BLDLF ACTIVE TO GET LLA WORKING !!!!!         *
*                                                                     *
*                                                                     *
*      WTOR                                                           *
*      ----                                                           *
*      TWO REPLIES TO THE WTOR ARE POSSIBLE:                          *
*          1. REFR=LIB.  ---> THE 'LIB' IS READ IN AND A              *
*                             NEW CONTROL BLOCK IS CREATED AND        *
*                             CHAINED.                                *
*                             THIS IS NECESSARY IF YOU LINKED         *
*                             OR COPIED MODULES INTO THIS LIB !       *
*                                                                     *
*          2. END        ---> LLA WILL TERMINATE                      *
*                                                                     *
*      MODIFY COMMAND :                                               *
*     -----------------                                               *
*      THERE IS A MOD.-CMD SUPPORTED. THE COMMANDS TO BE ENTERED      *
*      ARE THE SAME AS DESCRIBED ABOVE.                               *
*      EXAMPLE :   F LLA,REFR=LIB                                     *
*              OR  F LLA,END                                          *
*              OR  P LLA                                              *
*              OR  F LLA,REFR=DSNAME--> LIB TO REFRESH                *
*                                                                     *
*      CAUTION :  IF THE MOD-CMD FACILITY IS GENERATED                *
*                 THERE IS NO WTOR !!!!!!!!!!                         *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      PARM                                                           *
*      ----                                                           *
*      THERE ARE TWO POSSIBILITIES FOR A START PARM :                 *
*          1. PARM=           IF THERE IS NO PARM CODED LLA           *
*                             WILL USE LNKLST00.                      *
*                                                                     *
*          2. PARM=88         LLA WILL USE LNKLST88                   *
*                                                                     *
*      SYS1.PARMLIB                                                   *
*      ------------                                                   *
*      THERE IS ONE DEFENCY IN CODING LNKLSTXX:                       *
*          CODE ONE LIB PER CARD !!!                                  *
*              LNKLSTXX :                                             *
*                        SYS1.LINKLIB,   <================= !!!       *
*                        SYS1.CMDLIB,                                 *
*                        SYS1.USERLIB,                                *
*                        ,SYS2.USER,                                  *
*                       ---.                                          *
*                          .                                          *
*                          .                                          *
*                                                                     *
*      NOTE :                                                         *
*           IF YOU WANT TO LEAVE OUT A SPECIFIC LIB                   *
*           BECAUSE OF A LOT OF UPDATE,                               *
*           CODE A KOMMA IN COL. 1. E.G. ,SYS1.LIB !!!                *
*                                                                     *
*                                                                     *
*      LINK                                                           *
*      ----                                                           *
*      LLA MUST BE LINKEDIT INTO A CONCATENATED LIB WITH              *
*      AC=1 AND SHOULD RUN AS A STARTED TASK WITHOUT A STEPLIB !!!!   *
*                                                                     *
*      CVT                                                            *
*      ---                                                            *
*      LLA USESES A USERCVT WHICH IS POINTED BY SMCAUSER.             *
*      YOU PROBABLY HAVE TO MODIFY THE MODULE AND THE ZAP BELOW !     *
*                                                                     *
*                                                                     *
*                                                                     *
*      MESSAGES                                                       *
*      --------                                                       *
*                                                                     *
*      LLA001:  LLA IS FULLY INITIALIZED                              *
*      LLA002:  LLA WAS STOPPED                                       *
*      LLA003:  A LIBRARY TO REFRESH WAS NOT LOADED BEFORE            *
*      LLA005:  PARMLIB OR LNK-LIB COULD NOT BE OPENED                *
*      LLA006:  LLA ALLREADY ACTIVE                                   *
*      LLA007:  LLA HAD A PGM-CHECK OR WAS CANCELED                   *
*      LLA008:  LIB WAS ALLOCATED TO ANOTHER JOB OR USER              *
*      LLA009:  DATASET XXXX WAS LOADED                               *
*      LLA010:  LLA ACTIVE  (WTOR IN CASE OF PROBLEMS)                *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*      JCL                                                            *
*      ---                                                            *
*                                                                     *
*      //LLA   EXEC   PGM=LLA                                         *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*++ USERMOD (SO10024) .
*++ VER (Z038) FMID(JDM1139) PRE(UZ57895).
*++ ZAP (IGC018) .
*  EXPAND IGC018(384)
*NAME IGC018
*VER 04B0 48409000            LH   RSTUB,RESNUM      FROM 0 TO RESNUM-1
*REP 04B0 4550CBFE            B    EXPAND AREA
*VER 0C00 00000000
*REP 0C00 90ECD00C            STM  R14,R12,12(R13)   SAVE ALL REGS
*REP 0C04 48409000            LH   RSTUB,RESNUM      REPEAT INSTR.
*REP 0C08 41000001            LA   R0,1              GET 1 FOR COMPARE
*REP 0C0C 19200725            CR   R2,R0             MORE THAN 1 ?
**                            BHR  R5                YES RETURN
*REP 0C10 58F00010            L    R15,16            GET CVT
*REP 0C14 58F0F0C4            L    R15,CVTUSER(R15)  GET SMCA
*REP 0C18 58F0F080            L    R15,SMCAUSER(R15) GET SMCAUSER
*REP 0C1C 12FF0785            LTR  R15,R15           USERCVT EXISTING ?
**                            BZR  R5                NO
*REP 0C20 9180F003            TM   3(R15),LLAACT     LLA ACTIVE ?
*REP 0C24 07850700            BZR  R5                NO RETURN
*REP 0C28 9500D159            CLI  CONCAT#,0         CALL 1. TIME ?
*REP 0C2C 07750700            BNER R5                NO RETURN
*REP 0C30 B20A0000            SPKA 0(R0)             GET KEY 0
*REP 0C34 58B0F004            L    R11,SMCALLAC(R15) GET SSB
*REP 0C38 18F10700            LR   R15,R1            LENGTH OF USR DATA
*REP 0C3C 5800A004            L    R0,4(R10)         1.HALF MBR.
*REP 0C40 5810A008            L    R1,8(R10)         2.HALF OF MBR.
*REP 0C44 4160A00C            LA   R6,12(R10)        A(USER DATA)
*REP 0C48 B2270020            ESAR R2
*REP 0C4C 5020D010            ST   R2,16(R13)        SAVE REG 2
*REP 0C50 5820B014            L    R2,PC#            GET PC NUMBER
*REP 0C54 B2182000            PC   0(R2)             CALL USER
*REP 0C58 5820D010            L    R2,16(R13)        RESTORE R2
*REP 0C5C 58E0D00C            L    R14,12(R13)       RESTORE R14
*REP 0C60 B2250020            SSAR R2
*REP 0C64 980CD014            LM   R0,R12,20(R13)    RESTORE REGS
*REP 0C68 91806061            TM   61(R6),128        SHOULD WE IN 0 ?
*REP 0C6C 4710CC7A            BO   SKIP              YES
*REP 0C70 43606060            IC   R6,'60'(R6)       GET CALLERS KEY
**                                                   FROM EXSKEY
*REP 0C74 B20A6000            SPKA 0(R6)             INTO CALLERS KEY
*REP 0C78 5860D02C            L    R6,44(R13)        RESTORE R6
*REP 0C7C 42F0D158 SKIP       STC  R15,ERCODE        SAVE RETURN CC
*REP 0C80 47F0C578            B    ENDRES            MAINLINE
*-------------------------------27.05.83/C.HEIDEKRUEGER---------------*
         TITLE 'M A I N  L I N E  C O D E'
LLA      START
         XSAVE (R12,R11),SVA,LLA
         REG
         L     R2,0(R1)              GET PARM
         SPACE
         ENQ   (QN,RN,E,,SYSTEM),RET=USE    ACTIVE ?
         LTR   R15,R15
         BNZ   ALLACT                       YES
         SPACE 3
         EXTRACT COMM,FIELDS=COMM
         SPACE 2
         USING SYMBCMPA,R14
         USING SYMBCIB,R15
         L     R14,COMM                   GET CSCB
         LA    R1,1                       1 OCCURENCE
         LNR   R1,R1
         LA    R0,COMMCIB
         LNR   R0,R0
         SVC   34
         SPACE
         LTR   R15,R15
         BNZ   CIBNOK                NOT OK USE WTOR !!!
         SPACE
         BAL   R7,CIBOUT             DELETE START CINB
         L     R0,COMMECB            GET ECB TO WAIT ON
         STCM  R0,7,MODECB+1
         OI    SW,CIBOK              IND. OK FOR CIB
         SPACE 2
CIBNOK   EQU   *
         LH    R14,0(R2)             ANY PARM ?
         LTR   R14,R14
         BZ    NOPARM
         SPACE
         MVC   SYSID,2(R2)           MOVE SUFFIX
NOPARM   EQU   *
         SPACE 2
         BAL   R7,KEY0               GET KEY 0 AND SUP
         BAL   R7,DYNASYS            ALLOC LNKLSTXX
         BAL   R7,KEYN0              SWAP BACK
         SPACE 2
         OPEN  PARMLIB
         SPACE 2
         TM    PARMLIB+48,X'10'      OK ?
         BZ    NOOPEN                NO
         LA    R5,SAVEAR             LOAD TARGET POINTER
NXTPARM  EQU   *
         SPACE
         BAL   R7,GETPARM            GET DSN
         CLI   0(R1),KOMMA           NO LIB ?
         BE    NXTPARM1              YES
         SPACE
         MVC   DSN,0(R1)             MOVE DSN
         BAL   R7,FINDKOMM           REMOVE KOMMA
REFR1    EQU   *
         BAL   R7,KEY0               GET KEY 0 AND SUP
         BAL   R7,DYNLIBA            ALLOC LIB
         BAL   R7,KEYN0              SWAP BACK
         SPACE 2
         OPEN  LIBDCB                OPEN CONCAT LIB
         SPACE
         TM    LIBDCB+48,X'10'          OK ?
         BZ    NOOPEN                NO
         LA    R3,0                  # DIR ENTRIES
         LA    R8,0                  # DIR BLOCKS
         SPACE
GETDIR1  EQU   *
         BAL   R7,GETDIR             READ BLOCK
         CLC   =X'FFFFFFFF',2(R1)    END ?
         BE    ENDDIR
         ICM   R0,15,2(R1)           UNUSED ?
         BZ    ENDDIR
         SPACE
         LA    R8,1(R8)              BUMP ENTRY COUNTER
         CLI   SAVELOW,0             LOWEST STORED ?
         BNE   GETDIR2               YES
         MVC   SAVELOW,2(R1)         STORE LOWEST MEMBER FOR THIS LIB
GETDIR2  EQU   *
         SPACE
         BAL   R7,FINDMBR            FIND HIGHEST MEMBER IN BLOCK
         B     GETDIR1               READ NEXT
         SPACE 3
NXTPARM1 EQU   *
         MVC   DSN,1(R1)             SAVE DSN --> BEHIND KOMMA
         OI    SW,EMPTY              SET NOLIB
         LA    R2,AREAPRFL           SET TO PREFIX LENGTH
         SR    R3,R3
         SR    R6,R6                 INDICATE NO MEMBERS
         B     ENDDIR1
LK       EQU   *
ENDDIR   EQU   *
         LR    R6,R3                 SAVE COUNTER
         L     R14,SAVEMBR           GET # MEMBER
         AR    R14,R6                ADD NEW LIB
         ST    R14,SAVEMBR           SAVE NEW #
         SPACE
         MH    R3,=AL2(ENTRYLL)      * LL OF DIR ENTRY + COUNTER
         CLOSE LIBDCB
         SPACE 3
         FREEPOOL LIBDCB
         SPACE 3
         USING LIBDSECT,R3
ENDDIR1  EQU   *
         LA    R3,AREAPRFL(R3)       TOTAL LL
         LR    R2,R3                 SAVE LL OF AREA
         BAL   R7,GETM               GET AREA
         ST    R2,LIBLL              SAVE LENGTH OF AREA
         STH   R6,LIBMBRNO           SAVE # ENTRIES
         LA    R0,ENTRYLL            LENGTH ENTRY
         STH   R0,LIBENTLL           LENGTH
         SPACE
         MVC   LIBDSN,DSN            STORE DSN INTO PREFIX
         MVC   LIBLOW,SAVELOW        STORE LOWEST MEMBER
         MVC   LIBHIGH,SAVEHIGH      AND HIGHEST
         XC    SAVELOW,SAVELOW
         TM    SW,FRESH              WAS REFRESH ?
         BO    REFR2                 YES
         L     R0,0(R5)              GET PREV. POINTER
         CS    R0,R3,0(R5)           CHAIN IT
         L     R0,LIBPREV
         CS    R0,R5,LIBPREV         TO PREV.
         SPACE
REFR2    EQU   *
         LR    R5,R3                 SET CURRENT
         TM    SW,EMPTY              WAS EMPTY LIB
         BO    ENDDIR2               YES  JUST PREFIX
         SPACE 3
         OPEN  LIBDCB
         TM    LIBDCB+48,X'10'
         BZ    NOOPEN
         SPACE 2
         LA    R3,MBRLIST            A(1.MEMBER BLOCK
NEXTGET  BAL   R7,GETDIR             READ BLOCK
         LH    R0,0(R1)              LENGTH OF BLOCK
         BCTR  R0,R0
         BCTR  R0,R0
         LA    R1,2(R1)              POINT TO 1. MEMBER
         BAL   R7,MOVEMBR            MOVE BLOCK
         BCT   R8,NEXTGET            GET NEXT BLOCK
         SPACE 2
         CLOSE LIBDCB
         SPACE 3
         FREEPOOL LIBDCB
         SPACE 3
         BAL   R7,UNALLLIB           UNALLOC LIB
         MVI   DSN,64
         MVC   DSN+1(43),DSN
         SPACE 5
         BLDL  0,LIBMBRNO-LIBDSECT(R5) FILL LIST
         SPACE
         STCK  LIBSTRTT-LIBDSECT(R5) SET TIME CREATED
         TM    SW,FRESH              WAS REFRESH ?
         BO    REFR3                 YES
         B     NXTPARM               NEXT LIB
         SPACE 3
ENDDIR2  EQU   *
         NI    SW,255-EMPTY          CLEAR SWITCH
         MVI   LIBLOW,X'FF'          SET HIGH VALUE
         MVC   LIBLOW+1(15),LIBLOW
         XC    SAVELOW,SAVELOW
         MVI   DSN,C' '
         MVC   DSN+1(43),DSN         CLEAR DSN FIELD
         LR    R5,R3                 SAVE LAST AREA
         B     NXTPARM               GET NEXT PARM
         SPACE 2
EOF      CLOSE PARMLIB
         SPACE 2
         FREEPOOL PARMLIB
         SPACE 2
         BAL   R7,HASHSET                    SET HASH TABLE
         SPACE 2
         L     R0,HASHTBLA                   GET ACTIVE TABLE
         L     R1,HASHTBL                    GET NEW TABLE
         CS    R0,R1,HASHTBLA                SET NEW TABLE
         MVC   SAVEMBRA,SAVEMBR              DIVISOR ACTIVE
         SPACE 2
         ESTAE EXIT,TERM=YES
   SPACE 2
         BAL   R7,KEY0                       GET KEY 0
   SPACE 2
         SYSEVENT DONTSWAP
         L     R14,16
         L     R14,X'C4'(R14)    GET A(SMCA)
         L     R14,X'80'(R14)    GET A(SMCAUSER)
         L     R10,4(R14)        GET SMCALLAC
         BNZ   NOLXRES
         LA    R1,241
         SLL   R1,24
         LA    R0,SSBLKL
         OR    R0,R1
         GETMAIN R,LV=(0)
         USING SSBLOCK,R10
         LR    R10,R1
         XC    SSBLOCK(SSBLKL),SSBLOCK
         SPACE 2
         LA    R2,1
         ST    R2,LXCOUNT
         LXRES LXLIST=LXL,SYSTEM=YES
         SPACE 3
NOLXRES  EQU   *
         LA    R2,1
         AXSET AX=(R2)
         SPACE 2
         ETCRE ENTRIES=ETDESC
         ST    R0,TKVALUE
         L     R1,LXVALUE
         LA    R2,0(R1)                  VALUE FOR SERVICE 1
         ST    R2,SERVICE1
         LA    R2,1(R1)                  VALUE FOR SERVICE 2
         ST    R2,SERVICE2
    SPACE 3
         LA    R2,1
         ST    R2,TKCOUNT
         ETCON LXLIST=LXL,TKLIST=TKL
         SPACE 2
         L     R14,16
         L     R14,X'C4'(R14)                 GET A(SMCA)
         L     R14,X'80'(R14)                 GET A(SMCAUSER)
         ST    R10,4(R14)
         OI    3(R14),128                     SET LLA ACTIVE
         STCK  STRTCLCK                       SAVE START TIME
         SPACE 2
         BAL   R7,KEYN0
         SPACE 2
NEWWTOR  STIMER REAL,TIMEEX,DINTVL=MIN30
         SPACE 2
         MVI   REPL,X'40'              CLEAR REPLY AREA
         MVC   REPL+1(48),REPL
         TM    SW,CIBOK                WTOR USED ?
         BO    NOWTOR                  NO
         WTOR  'LLA010I LLA ACTIVE',REPL,49,ECB,ROUTCDE=1
         SPACE 2
NOWTOR1  EQU   *
         WAIT  ECBLIST=ECBLIST
         SPACE 3
         LA    R1,ECBLIST
TMR14    EQU   *
         L     R14,0(R1)               FIND ECB POSTED
         TM    0(R14),64               COMPLETE ?
         BO    COMPL
         LA    R1,4(R1)                NEXT ECB
         B     TMR14
         SPACE 2
NOWTOR   EQU   *
         WTO   'LLA001I LLA READY',ROUTCDE=1
         B     NOWTOR1
         SPACE 3
COMPL    EQU   *
         LR    R15,R14                 COPY ECB
         SLL   R15,1                   DELETE HO-BIT
         SRL   R15,25
         CH    R15,=H'4'               MOD CMD ?
         BE    MODECBC                 YES
         MVI   0(R14),0
         SPACE 2
MODRPL   EQU   *
         CLC   =C'REFR',REPL           WAS REFR REQ.
         BE    REFR                    YES
         CLC   REPL(L'END),END         TERMINATE ?
         BNE   NEWWTOR                 ERROR
         SPACE 5
MODEND   EQU   *
         WTO   'LLA002I LLA STOPPED',ROUTCDE=1
         STCK  STOPCLCK                SET STOP TIME
         SPACE 2
         BAL   R7,KEY0
         SPACE 2
         L     R14,16
         L     R14,X'C4'(R14)        GET A(SMCA)
         L     R14,X'80'(R14)        GET A(SMCAUSER)
         NI    3(R14),255-LLAACT     SET LLA INACTIVE
         STIMER WAIT,DINTVL=TIME
         SPACE 2
         ETDES TOKEN=TKVALUE,PURGE=YES
         SPACE 2
         SR    R2,R2
         AXSET AX=(R2)
         SPACE 5
EMAIN    EQU   *
         XRETURN 0
         SPACE 3
MODECBC  EQU   *
         L     R14,COMM
         L     R15,COMMCIB
         LA    R15,0(R15)
         LTR   R15,R15
         BNZ   MODECB1
         DC    H'0'                     SHOULD NOT OCCUR
MODECB1  EQU   *
         TM    CIBVERB,CIBMODFY         MODIFY ?
         BO    MODIFY
         TM    CIBVERB,CIBSTOP          STOP ?
         BO    MODEND                   YES
         L     R15,CIBNEXT              GET NEXT
         B     MODECB1
         SPACE 2
MODIFY   EQU   *
         LH    R1,CIBDATLN              LL OF DATA
         BCTR  R1,R0
         CH    R1,=H'48'                MAX LENGTH
         BNH   *+8
         LA    R1,48
         EX    R1,MOVECMD
         BAL   R7,CIBOUT
         B     MODRPL
MOVECMD  MVC   REPL(0),CIBDATA
         SPACE 5
         TITLE 'SUB ROUTINES'
REFR     EQU   *
         L     R3,SAVEAR               GET AREA
REFRC    EQU   *
         CLC   LIBDSN,REPL+5           DSN TO REFRESH ?
         BE    LIBFND                  YES
         ICM   R3,15,LIBNEXT           GET NEXT
         BNZ   REFRC
         SPACE 2
         WTO   'LLA003I LIBRARY NOT FOUND, REENTER',ROUTCDE=1
         B     NEWWTOR
         SPACE 5
LIBFND   EQU   *
         L     R7,SAVEMBR             GET TOTAL #
         SH    R7,LIBMBRNO            - REFRESH LIB
         ST    R7,SAVEMBR             SAVE IT
         SPACE
         MVC   DSN,LIBDSN              STORE DSN
         OI    SW,FRESH                IND. REFRESH
         ST    R3,SAVER3               SAVE AREA
         B     REFR1                   MAINLINE
         SPACE 3
         DC    F'0'
HASHSET  EQU   *
         ST    R7,*-4                  SAVE RETURN
         LA    R3,LLELENG              LENGTH OF ELEMENT
         L     R2,SAVEMBR              # MEMBERS
         MR    R2,R2
         ST    R3,HASHLL               SAVE AREA LENGTH
         SPACE
         BAL   R7,GETM                 GET STORAGE
         ST    R3,HASHTBL              SAVE ITS ADDR
         LR    R2,R3
         USING LLALLE,R8
         LA    R3,SAVEAR               GET DIR BUFFERS
         SPACE 2
HASHSET4 EQU   *
         ICM   R3,15,LIBNEXT           GET NEXT
         BZ    HASHSET1                LAST
         LH    R14,LIBMBRNO            GET NO
         LTR   R14,R14                 EMPTY CNTLB ?
         BZ    HASHSET4                YES --> GET NEXT LIB
         SPACE
         LA    R15,MBRLIST
         USING MBRLIST,R15
HASHSET3 EQU   *
         LM    R0,R1,PDSNAME           GET NAME
         SR    R8,R8
         LR    R9,R0                   LEFT HALF
         XR    R9,R1
         D     R8,SAVEMBR              / # MBRS
         LA    R9,LLELENG              L'ELEMENT
         MR    R8,R8
         LR    R8,R9
         AR    R8,R2                   FIND SLOT
         SPACE 2
         CLI   LLENAME,0               FREE ?
         BNE   HASHSET2                NO
HASHSET5 EQU   *
         STM   R0,R1,LLENAME           FILL IT
         ST    R15,LLEDIRA             DIR ENTRY ADDR
         LA    R15,ENTRYLL(R15)        NEXT
         BCT   R14,HASHSET3            GET NEXT
         B     HASHSET4
         SPACE 2
HASHSET2 EQU   *
         ICM   R4,15,LLENEXT           ALREADY NEXT ?
         BNZ   HASHSET8                YES
         SPACE
         LR    R4,R2                   SAVE AREA ADDR
HASHSET7 CLI   LLENAME-LLALLE(R4),0    FIND FREE SLOT
         BNE   HASHSET6
         ST    R4,LLENEXT              STORE NEXT INTO PREV.
         LR    R8,R4                   FILL REST
         B     HASHSET5
         SPACE
HASHSET8 EQU   *
         LR    R8,R4                   UPDATE POINTER
         B     HASHSET2
         SPACE 1
HASHSET6 EQU   *
         LA    R4,LLELENG(R4)          GET NEXT SLOT
         B     HASHSET7
         SPACE
HASHSET1 L     R7,HASHSET-4
         BR    R7
         DROP  R8,R15
         SPACE 5
REFR3    EQU   *
         TTIMER CANCEL                 CANCEL STIMER
         SPACE 2
         NI    SW,255-FRESH            CLEAR SWITCH
         L     R3,SAVER3               GET OLD AREA
        MVC   LIBNEXT-LIBDSECT(8,R5),LIBNEXT MOVE NEXT AND PREV TO NEW
         L     R1,LIBNEXT              GET NEXT
         LTR   R1,R1                   LAST IN CHAIN ?
         BZ    LASTENT
         L     R0,LIBPREV-LIBDSECT(R1) GET PREV AGAIN
         CS    R0,R5,LIBPREV-LIBDSECT(R1) CHAIN NEW TO NEXT
LASTENT  EQU   *
         SPACE 2
         L     R3,LIBPREV              GET OLD PREV
         L     R0,LIBNEXT              GET OLD NEXT
         CS    R0,R5,LIBNEXT           CHAIN NEW AREA
         SPACE 2
         LM    R0,R1,HASHLL            GET LENGTH AND TABLE
         STM   R0,R1,12(R13)           SAVE IT AROUND
         SPACE
         BAL   R7,HASHSET              SET NEW HASHTABLE
         SPACE
         L     R0,HASHTBLA             GET OLD TABLE
         L     R1,SAVEMBRA             GET # MEMBERS
         L     R14,HASHTBL             GET NEW TABLE
         L     R15,SAVEMBR             GET NEW # MEMBERS
         CDS   R0,R14,HASHTBLA         SWAP TABLE AND # MBRS
         SPACE 2
         STIMER WAIT,DINTVL=SEC1       WAIT 1 SECOND
         SPACE 2
         LM    R0,R1,12(R13)           RESET OLD TABLE AND LENGTH
         FREEMAIN R,LV=(0),A=(1)       FREE IT
         SPACE 2
         L     R1,SAVER3               GET OLD AREA
         L     R0,LIBLL-LIBDSECT(R1)   GET LENGTH
         FREEMAIN R,LV=(0),A=(1)
         B     NEWWTOR                 TO MAINLINE
         SPACE 5
FINDMBR  EQU   *
         LH    R0,0(R1)                GET LENGTH OF BLOCK
         BCTR  R0,R0
         BCTR  R0,R0
         LA    R1,2(R1)                1. BLOCK
FINDMBR1 EQU   *
         CLI   0(R1),X'FF'             END OF BLOCK ?
         BE    ENDDIR                  YES
         IC    R14,11(R1)              LENGTH OF USER DATA
         SLL   R14,27
         SRL   R14,26                  * 2
         CLI   0(R1),0
         BER   R7
         LA    R3,1(R3)                BUMP ENTRY COUNTER
         MVC   SAVEHIGH,0(R1)          SAVE HIGHEST SO FAR
         LA    R1,12(R14,R1)           A(NEXT MEMBER)
         LA    R14,12(R14)             LENGTH OF THIS ENTRY
         SR    R0,R14
         BNPR  R7                      END OF BLOCK
         B     FINDMBR1
         SPACE 5
CIBOUT   EQU   *
         L     R14,COMM
         LA    R0,COMMCIB
         L     R1,COMMCIB
         LNR   R1,R1
         SVC   34
         BR    R7
         SPACE 5
DYNASYS  EQU   *
         LA    R1,RBLOCK
         SVC   99
         LTR   R15,R15
         BZR   R7
         SPACE 2
         MVC   WTO1+15(L'DSNB),DSNB
         B     WTO1
         SPACE 5
GETPARM  EQU   *
         GET   PARMLIB
         BR    R7
         SPACE 5
MOVEMBR  EQU   *
         CLI   0(R1),X'FF'             END OF BLOCK
         BER   R7
         CLI   0(R1),0
         BER   R7
         IC    R14,11(R1)              GET # BYTES USER DATA
         SLL   R14,27
         SRL   R14,26
         LA    R14,12(R14)             LENGTH FOR MOVE
         MVC   0(8,R3),0(R1)           MOVE MEMBER NAME
         SPACE
         LA    R1,0(R14,R1)            POINT TO NEXT WITHIN BLOCK
         LA    R3,ENTRYLL(R3)          NEXT ELEMENT
         SR    R0,R14                  GET REMAINDER
         BP    MOVEMBR                 GET NEXT
         BR    R7                      RETURN TO CALLER
         SPACE 5
FINDKOMM EQU   *
         LA    R0,71
         LA    R14,DSN
KOMM1    CLI   0(R14),C','
         BE    KOMM2
         LA    R14,1(R14)
         BCT   R0,KOMM1
         BR    R7
         SPACE
KOMM2    MVI   0(R14),64
         BR    R7
         SPACE 5
DYNLIBA  EQU   *
         LA    R1,RBLIB
         SVC   99
         LTR   R15,R15
         BZR   R7
         SPACE 2
         MVC   WTO1+16(20),DSN     MOVE DSN INTO MESSAGE
WTO1     WTO   'LLA008I                     NOT ALLOCATED',ROUTCDE=1
         SPACE 2
         ABEND 1,DUMP
         SPACE 5
GETDIR   EQU   *
         GET   LIBDCB
         BR    R7
         SPACE 5
         SPACE 5
KEY0     EQU   *
         MODESET KEY=ZERO,MODE=SUP
         BR    R7
         SPACE 2
KEYN0    EQU   *
         MODESET KEY=NZERO,MODE=PROB
         BR    R7
         SPACE 5
GETM     EQU   *
         GETMAIN R,LV=(R3)
         LR    R0,R1
         LR    R1,R3                LENGTH
         LR    R3,R0                SAVE ADDR.
         SR    R15,R15
         MVCL  R0,R14               CLEAR AREA
         BR    R7
         SPACE 5
UNALLLIB EQU   *
         LA    R1,UNRB
         SVC   99
         LTR   R15,R15
         BNZ   EOF
         BR    R7
         SPACE 5
NOOPEN   EQU   *
         WTO 'LLA005I OPEN ERROR',ROUTCDE=1
         SPACE 2
         ABEND 1,DUMP
         SPACE 5
ALLACT   EQU   *
         WTO 'LLA006I LLA ALLREADY ACTIVE',ROUTCDE=1
         B     EMAIN
         LTORG
         TITLE 'PCLINK ROUTINE (BIN SEARCH)'
*-------------------------------
*
*   R0  =  1 HALF OF MEMBER
*   R1  =  2 HALF OF MEMBER
*   R6  =  A(USER AREA)
*   R15 =  LENGTH OF USER DATA
*
*
*
*-------------------------------
         SPACE 2
         DROP  R12
         DS    0D
HASHSRCH PCLINK STACK,SAVE=NO
         LR    R10,R14               SAVE TOKEN
         BALR  R12,R0                NEW BASE
         USING *,R12
         USING LLALLE,R8
         SPACE 5
         SPACE 2
         SR    R8,R8
         LR    R9,R0                 TAKE LEFT HALF OF NAME
         XR    R9,R1                 HASH WITH RIGHT HALF
         D     R8,SAVEMBRA           DEVIDE BY # MEMBERS
         LA    R9,LLELENG            LENGTH OF EACH ENTRY
         MR    R8,R8
         LR    R8,R9
         A     R8,HASHTBLA           FIND POS. WITHIN TABLE
MBRFND1  EQU   *
         CL    R0,LLENAME               FOUND ?
         BNE   MBRNFND
         CL    R1,LLENAME+4             FOUND ?
         BE    FOUND
         SPACE
MBRNFND  EQU   *
         ICM   R8,15,LLENEXT            TRY NEXT
         BZ    NOTFOUND                 NOT FOUND
         B     MBRFND1
         SPACE 5
NOTFOUND EQU   *
         LA    R4,SAVENFND                  CNT FOR NOT FOUND
         BAL   R7,CNTADD                    BUMP COUNTER
NOTFND1  LA    R15,4
         B     PTUSER
         SPACE
         SPACE
FOUND    EQU   *
         L     R8,LLEDIRA                   GET ADDR. OF DIR ENTRY
         LA    R4,SAVEFND                   CNT FOR FOUND TOTAL
         BAL   R7,CNTADD                    BUMP COUNTER
         SPACE
         LA    R4,MBRCNT-MBRLIST(R8)        GET PROPER COUNT FIELD
         BAL   R7,CNTADD                    BUMP COUNTER
         LA    R7,52                        *** MAX POSSIBLE LENGTH
         CR    R7,R15                       EXCEEDED ?
         BH    TAKE15                       NO
         LR    R15,R7                       YES
TAKE15   EQU   *
         SPACE
         MVCS  0(R15,R6),USERDATA(R8),R2       MOVE ELEMENT TO USER
         SR    R15,R15
PTUSER   EQU   *
         LR    R14,R10                  RELOAD TOKEN STACK
         SPACE 2
         PCLINK UNSTACK,THRU=(R14)
         SPACE 2
         PT    R3,R14
         SPACE 2
CNTADD   EQU   *
         L     R14,0(R4)                GET COUNTER
CNTADD1  EQU   *
         LA    R5,1                     +1
         ALR   R5,R14                   BUMP COUNTER
         CS    R14,R5,0(R4)             SET COUNTER
         BER   R7                       OK
         B     CNTADD1                  TRY AGAIN
         TITLE 'PCLINK ROUTINE (DISPLAY)'
*---------------------------------------------------------------------*
*                                                                     *
*   INPUT PARAMETERS :                                                *
*                    R1 = A(USER AREA)                                *
*                    R0 = LENGTH REQUIRED                             *
*                    R15= FUNCTION                                    *
*                    R6 = FROM ADDR. (IF LIB MOVE)                    *
*                                                                     *
*   FUNCTION :                                                        *
*                                                                     *
*                    R15=0 (IN LOBS) --> LIB PREFIX REQ.              *
*                    R15=# (IN HOBS) --> # LIB REQ.                   *
*                                                                     *
*   EXAMPLE :        R15=00010000 ---> MOVE PREFIX OF LIB 1           *
*                    R15=00020000 ---> MOVE PREFIX OF LIB 2           *
*                    ETC.                                             *
*                                                                     *
*                    R15=4 (IN LOBS) --> MOVE ALL DIR. FROM           *
*                    R6 (AUS PREFIX !!)                               *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*   OUTPUT PARAMETERS :                                               *
*                                                                     *
*                     R15 = RC                                        *
*                           RC = 0  --> OK                            *
*                           RC = 4  --> OK,BUT LAST MOVED             *
*                           RC = 8  --> NOT OK                        *
*                           RC =12  --> PARAMETER ERROR               *
*                                                                     *
*                                                                     *
*                     R0  = A(CURRENT AREA) --> IF RC = 0             *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         DROP  R12
         DS    0H
DISPLAY  PCLINK STACK,SAVE=NO
         SPACE 3
         BALR  R12,R0
         USING *,R12
         LTR   R8,R15                  VALID PARM
         BZ    ERROR12                 NO
         SPACE
         SRL   R8,16                   MOVE LIB# TO LOBS
         SLL   R15,16
         SRL   R15,16                  CLEAR HOBS
         LTR   R15,R15
         BNZ   CHCK4                   COULD BE 4
         SPACE 3
         LA    R3,SAVEAR               A(1.PREFIX)
CHCK01   EQU   *
         L     R3,LIBNEXT              GET NEXT
         LTR   R3,R3                   LAST
         BZ    ERROR8                  YES
         BCT   R8,CHCK01
         SPACE 2
         LA    R15,AREAPRFL            L'PREFIX
         MVCS  0(R15,R1),0(R3),R2      MOVE PREFIX TO USER
         LR    R0,R3                   PASS FROM ADDR
OKRTN    EQU   *
         SR    R15,R15
         B     UNSTACK
         SPACE 3
INVFUNC  EQU   *
         LA    R15,16
         B     UNSTACK
         SPACE 3
ERROR12  EQU   *
         LA    R15,12
         B     UNSTACK
         SPACE 3
CHCK4    EQU   *
         LA    R14,4
         CLR   R14,R15                 GOOD FUNCTION
         BNE   INVFUNC
         LA    R14,256                 MAX. LL MOVE POSSIBLE
COMPLL   EQU   *
         CLR   R0,R14                   LENGTH > 256
         BH    HIGH                     YES
         LR    R15,R0                   TAKE LAST LENGTH
         MVCS  0(R15,R1),0(R6),R2       MOVE REST
         SR    R15,R15
         B     UNSTACK
         SPACE 2
HIGH     EQU   *
         MVCS  0(R14,R1),0(R6),R2       MOVE LOT TO USER
         LA    R6,0(R14,R6)             INCR. MY AREA
         LA    R1,0(R14,R1)             INCR. USER AREA
         SR    R0,R14                   NEXT LOT
         BNP   OKRTN                    FINISHED
         B     COMPLL
         SPACE 3
ERROR8  EQU    *
         LA    R15,8
UNSTACK  EQU   *
         LR    R14,R10                  RELOAD TOKEN
         SPACE 2
         PCLINK UNSTACK,THRU=(R14)
         SPACE 3
         PT    R3,R14
         DROP  R12
         DS    0D
HASHTBLA DC    F'0'
SAVEMBRA DC    F'0'
SAVENFND DC    F'0'
SAVEFND  DC    F'0'
SAVEAR   DC    F'0'
SAVEMBR  DC    F'0'
HASHLL   DC    F'0'
HASHTBL  DC    F'0'
         TITLE 'DYNALLOC LIST'
RBLOCK   DS    0F
         DC    AL1(128),AL3(RBP)
RBP      DC    AL1(20),X'1',AL2(0)
         DC    A(0)
         DC    A(TXT)
         DC    A(0)
         DC    AL1(64),AL3(0)             WAIT
TXT      DC    A(DSNA,DISP,FREE,MBR,DDNPRM)
         ORG   *-4
         DC    X'80'
         ORG
DDNPRM   DC    X'0001',X'0001',AL2(8)
         DC    CL8'PARMLIB'
DSNA     DC    X'0002',X'0001',AL2(12)
DSNB     DC    C'SYS1.PARMLIB'
DISP     DC    X'0004',AL2(1),AL2(1),X'8'
FREE     DC    X'001C',AL2(0)
MBR      DC    X'0003',X'0001',AL2(8)
IEA      DC    C'LNKLST'
SYSID    DC    C'00'
         SPACE 5
PARMLIB  DCB   DSORG=PS,MACRF=GL,DDNAME=PARMLIB,EODAD=EOF
LIBDCB   DCB   DSORG=PS,MACRF=GL,DDNAME=LIB,EODAD=LK,LRECL=264,        X
               KEYLEN=8,RECFM=U,BLKSIZE=264
RBLIB    DS    0F
         DC    AL1(128),AL3(LIB)
LIB      DC    AL1(20),X'1',AL2(0)
         DC    A(0)
         DC    A(LIBTXT)
         DC    A(0)
         DC    AL1(64),AL3(0)             WAIT
LIBTXT   DC    A(DSNTXT,DISP,DDNLIB)
         ORG   *-4
         DC    X'80'
         ORG
DDNLIB   DC    X'0001',X'0001',AL2(8)
         DC    CL8'LIB'
DSNTXT   DC    X'0002',X'0001',AL2(44)
DSN      DC    CL44' '
UNRB     DS    0F
         DC    AL1(128),AL3(UNLIB)
UNLIB    DC    AL1(20),X'2',AL2(0)
         DC    A(0)
         DC    A(LIBTXT1)
         DC    A(0,0)
LIBTXT1  DC    A(DSNTXT,DDNLIB)
         ORG   *-4
         DC    X'80'
         ORG
SW       DC    X'0'
EMPTY    EQU   128
FRESH    EQU   64
CIBOK    EQU   32
RSWVO    EQU   16
KOMMA    EQU   C','
SAVELOW  DC    XL8'00'
SAVEHIGH DC    XL8'00'
ECBLIST  DS    0F
         DC    A(ECB)
MODECB   DC    AL1(4+128),AL3(0)
         SPACE 2
ECB      DC    F'0'
COMM     DC    F'0'
SAVER3   DC    F'0'
REPL     DC    CL49' '
END      DC    C'END'
QN       DC    C'LLA'
RN       DC    C'LLA'
         SPACE 3
ETDESC   DS    0D
         DC    X'0'
         DC    X'0'
         DC    H'2'
*--------------------------
         DC    X'0'
         DC    X'C0'
         DC    H'0'
         DC    A(0)
         DC    A(HASHSRCH)
         DC    X'FFFF'
         DC    X'FFFF'
         DC    F'0'
*--------------------------
         DC    X'1'
         DC    X'C0'
         DC    H'0'
         DC    A(0)
         DC    A(DISPLAY)
         DC    X'FFFF'
         DC    X'FFFF'
         DC    F'0'
*--------------------------
         TITLE 'STIMER EXIT ROUTINE'
         DS    0H
TIMEEX   EQU   *
         USING *,R15
         LR    R2,R14                   SAVE RETURN
         SPACE
         STIMER REAL,TIMEEX,DINTVL=MIN30
         SPACE
         LR    R14,R2
         BR    R14
         DROP  R15
         TITLE 'ESTAE EXIT ROUTINE'
EXIT     EQU   *
         LR    R2,R14
         BALR  R12,R0
         USING *,R12
         SPACE 2
         WTO   'LLA007I LLA ABENDED',ROUTCDE=1
         SPACE 3
         MODESET KEY=ZERO,MODE=SUP
         SPACE 2
         L     R14,16
         L     R14,X'C4'(R14)          GET A(SMCA)
         L     R14,X'80'(R14)          GET A(SMCAUSER)
         NI    3(R14),255-LLAACT       SET LLA INACTIVE
         SPACE 2
         STIMER WAIT,DINTVL=TIME
         SPACE 2
         LR    R14,R2
         SR    R15,R15
         BR    R14
TIME     DS    0D
         DC    C'00000500'          5 SEC. WAIT
SEC1     DC    C'00000100'          1 SEC. WAIT
MIN30    DC    C'00300000'          30 MIN.
STRTCLCK DC    D'0'
STOPCLCK DC    D'0'
RESNAME1 EQU   0
RESNAME2 EQU   4
USERDATA EQU   8
         SPACE 5
*-------------------------------
         TITLE 'DSECT'
         SPACE 5
SYMBCIB  DSECT
CIBNEXT  DS    A
CIBVERB  DS    AL1
CIBSTART EQU   X'04'
CIBMODFY EQU   X'44'
CIBSTOP  EQU   X'40'
CIBLEN   DS    AL1
         DS    XL6
CIBCONID DS    AL1
         DS    X
CIBDATLN DS    AL2
CIBDATA  DS    CL8
SYMBCMPA DSECT
COMMECB  DS    A
COMMCIB  DS    A
LLALLE   DSECT
LLENEXT  DS    F
LLENAME  DS    CL8
LLEDIRA  DS    F
LLELENG  EQU   *-LLALLE
         SPACE 5
LIBDSECT DSECT
LIBNEXT  DS    F               NEXT POINTER
LIBPREV  DS    F               PREV POINTER
LIBLOW   DS    CL8             LOWEST ENTRY
LIBHIGH  DS    CL8             HIGHEST ENTRY
LIBSTRTT DS    D               CREATE TIME FOR LIB
LIBMFND  DS    F               CNT FOR MEMBER FOUND
LIBMNFND DS    F               CNT FOR MEMBER NOT FOUND
LIBDSN   DS    CL44            LIBRARY
LIBLL    DS    F               LENGTH OF AREA
LIBFLAG  DS    X               FLAG BYTE
LIBRES   DS    3X              RESERVED
LIBMBRNO DS    H               NO. OF MEMBERS IN LIST
LIBENTLL DS    H               LENGTH OF EACH ENTRY
AREAPRFL EQU   *-LIBDSECT
MBRLIST  DS    0C              # MEMBERS
PDSNAME  DS    CL8             MEMBER NAME
DIRENTRY DS    52X             MAX. LENGTH
MBRCNT   DS    F               ACCESS COUNT PER MEMBER
ENTRYLL  EQU   *-MBRLIST       LENGTH OF EACH ENTRY
         SPACE 5
         SMCAEXT                     USER CVT
         SPACE 5
SSBLOCK  DSECT
LXL      DS    0F            LXLIST
LXCOUNT  DS    F             # LXS REQ.
LXVALUE  DS    F             LX RETURNED
AXL      DS    0F            AXLIST
AXCOUNT  DS    H             # AXS REQ.
AXVALUE  DS    H             AX RETURNED
TKL      DS    0F            TOKEN LIST
TKCOUNT  DS    F             # ETS CREATED
TKVALUE  DS    F             TOKEN RETURNED BY ETCRE
PCTAB    DS    0F            PC NO.'S TO CALL
SERVICE1 DS    F             PC NO FOR 1. (BINSEARCH)
SERVICE2 DS    F             PC NO FOR 2. (DISPLAY)
SSBLKL   EQU   *-SSBLOCK
         SPACE 5
         CVT DSECT=YES
         DCBD  DSORG=PS
         END
