./ ADD NAME=UICR04
         TITLE 'XQCB                             X-COMMAND QCB'
QCB      CSECT
         SPACE 3
***********************************************************************
*                                                                     *
*      IDENTIFICATION DIVISION.                                       *
*                                                                     *
*      PROGRAM-ID. QCB.                                               *
*      AUTHOR. EHNERT.                                                *
*      INSTALLATION. BAYER AG, LEVERKUSEN, RECHENZENTRUM.             *
*      DATE-WRITTEN. 3.7.1974.                                        *
*      REMARKS.                                                       *
*          DAS X-COMMAND QCB ZEIGT MOEGLICHE ZUKUENFTIGE ODER BE-     *
*          REITS BESTEHENDE KONFLIKTSITUATIONEN VON TASKS AN.         *
*                                                                     *
*          WIRD KEIN PARAMETER ANGEGEBEN, SO WERDEN ALLE TASKS ANGE-  *
*          ZEIGT, DIE EXCLUSIVEN ZUGRIFF AUF EINE DATEI HABEN, WENN   *
*          NOCH ANDERE TASKS GLEICHZEITIG AUF DIE DATEI WARTEN.       *
*                                                                     *
*          WIRD DER PARAMETER 'ALL' ANGEGEBEN, SO WERDEN ALLE EXCLU-  *
*          SIVEN REQUESTS ANGEZEIGT. IN DIESEM FALL KANN UEBER DAS    *
*          BESTEHEN EINER KONFLIKTSITUATION KEINE AUSSAGE GETROFFEN   *
*          WERDEN.                                                    *
*          WIRD DER PARAMETER '<JOBNAME>' ANGEGEBEN, SO WERDEN ALLE   *
*          REQUESTS DIESES JOBS ANGEZEIGT.                            *
*          WIRD DER PARAMETER '<Q-NAME>' ANGEGEBEN, SO WERDEN ALLE    *
*          BESTEHENDEN QCB MIT DEM NAMEN <Q-NAME> AUSGEGEBEN.         *
*          WIRD DER PARAMETER '<MAJOR-QCB>' ANGEGEBEN, WERDEN ALLE    *
*          BESTEHENDEN QCB MIT DEM MANJOR-NAME <MAJOR-QCB>            *
*          AUSGEGEBEN.                                                *
*          (ICR)                                                      *
*                                                                     *
*          JOB- UND STEPNAMEN WERDEN UNTER VS2,REL2 MIT HILFE DES     *
*          UNTERPROGRAMMS FASID AUFGESUCHT.                           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*      PROCEDURE DIVISION.                                            *
*                                                                     *
***********************************************************************
         SPACE 3
*
*      SICHERN DER REGISTER, ZUORDNUNG DER BASISREGISTER UND
*      SPEICHERPLATZANFORDERUNG FUER DIE ARBEITSBEREICHE.
*
         SPACE 2
         XSAVE R12,,QCB,ABERL
         LR    R11,R1        BASISREG. FUER DSECT PARMAREA INITIAL.
         USING PARMAREA,R11  BASISREG. FUER DSECT PARMAREA ZUORDNEN
         USING ABER,R13      BASISREG. FUER DSECT ABER ZUORDNEN
         SPIE  MF=(E,PICA)   FEHLERROUTINE AUFSETZEN
         EJECT
         XC    MSGCNT(4),MSGCNT
         MVI   JOBBYTE,X'00' SCHALTER LOESCHEN
         MVI   MQNBYTE,X'00' SCHALTER LOESCHEN
         MVI   ALLBYTE,X'00' SCHALTER LOESCHEN
         MVI   SWITCH+1,X'F0'
         MVI   SWITCH1+1,X'F0'
         CLC   TEXT+4(4),=C'ALL ' PARAMETER = 'ALL' ?
         BNE   *+12          NEIN, VERZWEIGEN
         MVI   ALLBYTE,X'FF' SCHALTER SETZEN
         B     ASKSYS        VERZWEIGEN
         CLC   TEXT+3(3),=C',,,'  Q. MAJOR QCBNAME ANGEGEBEN        ICR
         BNE   NCLC               A. NO                             ICR
         MVC   SYSDSN,TEXT+6      A. YES - MOVE MAJOR-QCB-N SEARCH  ICR
         MVI   MQNBYTE,X'FF'         GLEICH WIE MINOR-QCB-HANDLING  ICR
         MVI   MQNB+1,X'00'          UEBERGEHEN MINOR-QCB-ABFRAGE   ICR
         B     ASKSYS                                               ICR
NCLC     EQU   *                                                    ICR
         CLC   TEXT+3(2),=C',,' QCB NAME ANGEGEBEN ?
         BNE   *+16          NEIN, VERZWEIGEN
         MVI   MQNBYTE,X'FF' SCHALTER SETZEN
         MVI   SWITCH+1,X'00'
         B     ASKSYS        VERZWEIGEN
         CLC   TEXT+4(8),=CL8' ' KEIN PARAMETER ANGEGEBEN ?
         BE    ASKSYS        JA, VERZWEIGEN
         MVI   JOBBYTE,X'FF' SCHALTER SETZEN
         SPACE 2
*
*      ABFRAGE DES SYSTEMS.
*
         SPACE 1
ASKSYS   EQU   *
         MVI   SCH,X'00'     SCHALTER LOESCHEN
         GETMAIN R,LV=204800
         ST    R1,TABAD
         LR    R8,R1
         L     R9,=F'79920'
         AR    R9,R8
         ST    R9,TABEND
         OI    SCH,X'40'     BIT FUER MVS SETZEN
         L     R3,16
         EJECT
***********************************************************************
*                                                                     *
*      ROUTINE ZUM DURCHLAUFEN DER QCB-KETTEN IN VS2 (MVS).           *
*                                                                     *
***********************************************************************
         SPACE 3
MVS      EQU   *
         LA    R0,ASID       ADRESSE DER ASID LADEN
         LA    R1,JOBNAME    ADRESSE DES JOBNAMEN LADEN
         LA    R2,STEPNAME   ADRESSE DES STEPNAMEN LADEN
         STM   R0,R2,PARMLIST ADRESSEN IN DIE PARAMETERLISTE UEBERTR.
         MVI   LASTPARM,X'80' BIT FUER LETZTEN PARAMETER SETZEN
         L     R4,640(R3)
         LTR   R4,R4
         BZ    SP3ROUT
         LA    R3,640(R3)    POINTER ZUM ERSTEN MAJOR-QCB LADEN
         SPACE 3
*
*      DURCHLAUFEN DER MAJOR-QCB-KETTE.
*
         SPACE 2
NXTMAJVS EQU   *
         L     R3,0(R3)      ADRESSE DES MAJOR-QCB LADEN
         LA    R3,0(R3)      ERSTES BYTE IN R3 LOESCHEN
         LTR   R3,R3         ENDE DER MAJOR-QCB'S ?
         BZ    RETURN        JA, VERZW. ZUM ABSCHLUSS
         SPACE 1
         LA    R4,8(R3)      POINTER ZUM ERSTEN MINOR-QCB LADEN
         MVC   MAJNAM,16(R3)
         SPACE 3
*
*      DURCHLAUFEN DER MINOR-QCB-KETTE.
*
         SPACE 2
NXTMINVS EQU   *
         L     R4,0(R4)      ADRESSE DES MINOR-QCB LADEN
         LA    R4,0(R4)      ERSTES BYTE IN R4 LOESCHEN
         LTR   R4,R4         ENDE DER MINOR-QCB'S ERREICHT ?
         BZ    NXTMAJVS      JA, VERZW. ZUR VERARB. DER MAJOR-QCB'S
         SPACE 1
         EJECT
*
*      VERARBEITUNG DER QEL'S.
*
         SPACE 2
NXTQELVS EQU   *
         L     R5,8(R4)      ADRESSE DES QEL LADEN
         LA    R5,0(R5)      ERSTES BYTE IN R5 LOESCHEN
         LTR   R5,R5         ENDE DER QEL'S ERREICHT ?
         BZ    NXTMINVS      JA, VERZW. ZUR VERARB. DER MINOR-QCB'S
         SPACE 1
         TM    ALLBYTE,X'FF' PARAMETER = 'ALL' ?
         BNZ   WTORVS        JA, VERZWEIGEN
         TM    JOBBYTE,X'FF' PARAMETER = '<JOBNAME>' ?
         BNZ   WTORVS        JA, VERZWEIGEN
         TM    MQNBYTE,X'FF' PARAMETER = '<Q-NAME>' ?
         BNZ   WTORVS        JA, VERZWEIGEN
         CLC   16(8,R3),=CL8'SYSIEFSD' MAJOR-QCB-NAME = 'SYSIEFSD' ?
         BE    WTORVS        JA, VERZWEIGEN
         TM    12(R5),X'10'
         BO    WTORVS
         SPACE 1
         CLC   1(3,R5),=XL3'000000' FOLGT NOCH EIN QEL ?
         BE    NXTMINVS      NEIN, VERZW. ZUR VERARB. DER MINOR-QCB'S
         SPACE 1
         TM    12(R5),X'80'  SHARED REQUEST ?
         BZ    WTORVS        NEIN, VERZWEIGEN
         SPACE 1
         LR    R6,R5         POINTER ZUM NAECHSTEN QEL LADEN
         SPACE 3
*
*      ABFRAGE AUF EXCLUSIVEN REQUEST.
*
         SPACE 2
TESTVS   EQU   *
         L     R6,0(R6)      ADRESSE DES NAECHSTEN QEL LADEN
         LA    R6,0(R6)      ERSTES BYTE IN R6 LOESCHEN
         LTR   R6,R6         ENDE DER QEL'S ERREICHT ?
         BZ    NXTMINVS      JA, VERZW. ZUR VERARB. DER MINOR-QCB'S
         SPACE 1
         TM    12(R6),X'80'  SHARED REQUEST ?
         BO    TESTVS        JA, VERZWEIGEN
         EJECT
*
*      AUFSUCHEN VON JOB- UND STEPNAMEN.
*
         SPACE 2
WTORVS   EQU   *
         MVC   WTO(LENMSG01),MSG01 NACHRICHT1 UEBERTRAGEN
         MVC   ASID,14(R5)   ASID UEBERTRAGEN
         LA    R1,PARMLIST   ADRESSE DER PARAMETERLISTE LADEN
         L     R15,=V(FASID) ADRESSE DES UNTERPROGRAMMS LADEN
         BALR  R14,R15       VERZWEIGEN ZUM UNTERPROGRAMM FASID
         MVC   MAJQCBNM(8),MAJNAM
         SPACE 1
         LTR   R15,R15       UNTERPROGRAMM ERFOLGREICH BEENDET ?
         BNZ   FEHLR15       NEIN, VERZWEIGEN ZUR FEHLERROUTINE
         SPACE 3
*
*      UEBERTRAGEN DES MINOR-QCB-NAMEN.
*
         SPACE 2
         SR    R2,R2         R2 LOESCHEN
         IC    R2,16(R4)     LAENGE DES MINOR-QCB-NAMEN LADEN
         LA    R6,22         R6 INITIALISIEREN
         CR    R2,R6         LAENGE DES NAMEN > 22 ?
         BNH   *+6           NEIN, VERZWEIGEN
         SPACE 1
         LR    R2,R6         NEUE LAENGE LADEN
         BCTR  R2,0          R2 UM EINS VERMINDERN
         EX    R2,UEBERTR1   LAENGE MODIFIZIEREN
         TM    12(R5),X'80'  SHARED REQUEST ?
         BO    TSTMC
         MVI   WTO+39,C'E'
TSTMC    EQU   *
         TM    12(R5),X'40'
         BNO   TSTRSV
         MVI   WTO+40,C'M'
TSTRSV   EQU   *
         TM    12(R5),X'10'
         BNO   SCHRVS
         MVI   WTO+41,C'R'
         L     R14,24(R5)
         TM    7(R14),X'10'
         BNO   SCHRVS
         CLI   36(R14),X'00'
         BE    SCHRVS
         MVC   WTO+30(2),=CL8'R='
         MVC   WTO+32(6),28(R14)
         B     SCHRVS
         SPACE 1
UEBERTR1 EQU   *
         MVC   MINQCBNM(0),20(R4) MINOR QCB NAME UEBERTRAGEN
         EJECT
*
*      AUSGABE DER NACHRICHT.
*
         SPACE 2
SCHRVS   EQU   *
         TM    JOBBYTE,X'FF' PARAMETER = '<JOBNAME>' ?
         BZ    MARKE1        NEIN, VERZWEIGEN
         CLC   JOBNAME,TEXT+4 JOBNAME = PARAMETER ?
         BNE   MARKE3        NEIN, VERZWEIGEN
         B     MARKE2        VERZWEIGEN
MARKE1   EQU   *
         TM    MQNBYTE,X'FF' PARAMETER = '<Q-NAME>' ?
         BZ    MARKE2        NEIN, VERZWEIGEN
         CLC   MINQCBNM,TEXT+5 Q-NAME = PARAMETER ?
         BNE   MARKE3        NEIN, VERZWEIGEN
MARKE2   EQU   *
         L     R0,REG4       ADRESSE DES AUFRUFERS LADEN
         BAL   R14,WTOROUT
         OI    SCH,X'80'     BIT FUER AUSGABE SETZEN
MARKE3   EQU   *
         L     R5,0(R5)      ADRESSE DES NAECHSTEN QEL LADEN
         LA    R5,0(R5)      ERSTES BYTE IN R5 LOESCHEN
         LTR   R5,R5         ENDE DER QEL'S ERREICHT ?
         BZ    NXTMINVS      JA, VERZW. ZUR VERARB. DER MINOR-QCB'S
         B     WTORVS
         EJECT
***********************************************************************
*                                                                     *
*      ABSCHLUSSROUTINEN.                                             *
*                                                                     *
***********************************************************************
         SPACE 3
RETURN   EQU   *
         TM    SCH,X'80'     BIT FUER AUSGABE GESETZT ?
         BO    END           JA, VERZWEIGEN
         SPACE 1
         L     R0,REG4       ADRESSE DES AUFRUFERS LADEN
         TM    ALLBYTE,X'FF' PARAMETER = 'ALL' ?
         BZ    RETM1         NEIN, VERZWEIGEN
         MVC   WTO,MSG07
         BAL   R14,WTOROUT
         B     END           VERZWEIGEN
RETM1    EQU   *
         TM    JOBBYTE,X'FF' PARAMETER = '<JOBNAME>' ?
         BZ    RETM2         NEIN, VERZWEIGEN
         MVC   WTO(LENMSG08),MSG08 NACHRICHTENZEILE UEBERTRAGEN
         MVC   WTO+34(8),TEXT+4 JOBNAME UEBERTRAGEN
         BAL   R14,WTOROUT
         B     END           VERZWEIGEN
RETM2    EQU   *
         TM    MQNBYTE,X'FF' PARAMETER = '<Q-NAME>' ?
         BZ    RETM3         NEIN, VERZWEIGEN
         MVC   WTO(LENMSG09),MSG09
         BAL   R14,WTOROUT
         B     END           VERZWEIGEN
RETM3    EQU   *
         MVC   WTO(LENMSG06),MSG06
         BAL   R14,WTOROUT
         SPACE 3
*
*      SPEICHERPLATZFREIGABE, LADEN DER REGISTER UND RUECKSPRUNG.
*
         SPACE 2
END      EQU   *
         L     R8,TABAD
NXTWTO   EQU   *
         CLC   0(4,R8),=XL4'00'
         BE    ENDWTO
         LR    R1,R8
         L     R0,REG4
         BAL   R14,WTOR1
         LA    R8,80(R8)
         B     NXTWTO
ENDWTO   EQU   *
         L     R3,TABAD
         FREEMAIN R,LV=204800,A=(R3)
         XRETURN ,R
         EJECT
***********************************************************************
*                                                                     *
*      FEHLERROUTINEN.                                                *
*                                                                     *
***********************************************************************
         SPACE 3
*
*      ROUTINE BEI FEHLER IM UNTERPROGRAMM FASID.
*
         SPACE 2
FEHLR15  EQU   *
         MVC   WTO(46),MSG03 NACHRICHT4 UEBERTRAGEN
         SRL   R15,4
         LTR   R15,R15       RC = 8 ?
         BNZ   *+14          NEIN, VERZWEIGEN
         SPACE 1
         MVC   WTO+44(2),=CL2'08' RC UEBERTRAGEN
         B     SCHRVS        VERZW. ZUR AUSGABE DER NACHRICHT
         SPACE 1
         MVC   WTO+44(2),=CL2'16' RC UEBERTRAGEN
         B     SCHRVS        VERZW. ZUR AUSGABE DER NACHRICHT
         SPACE 3
*
*      ROUTINE BEI UNGUELTIGER TCB-ADRESSE.
*
         SPACE 3
*
*      ROUTINE BEI ADRESSIERUNGSFEHLER.
*
         SPACE 2
ERROR    EQU   *
         L     R0,REG4       ADRESSE DES AUFRUFERS LADEN
         MVC   WTO(LENMSG04),MSG04
         BAL   R14,WTOROUT
         B     END           VERZWEIGEN ZUM ABSCHLUSS
         EJECT
***********************************************************************
*                                                                     *
*      WTO-NACHRICHTENAUSGABE.                                        *
*                                                                     *
***********************************************************************
         SPACE 3
WTOROUT  EQU   *
         MVC   0(80,R8),WTO
         LA    R8,80(R8)
         C     R8,TABEND
         BH    RETURN
         MVC   0(4,R8),=XL4'00'
         BR    R14
WTOR1    EQU   *
         ST    R14,SAVE14
         L     R0,REG4
         C     R0,=CL4'ROSC'
         BNE   NOROS
         STM   R14,R12,12(R13)                   SAVE ALL REGS IN SA
*
*              NOW WE CAN ADDRESS DUMMYSECTION IN XMON
*
         LH    R0,0(R1)      LOAD LENGTH OF WTO
         SH    R0,=H'4'      DECREMENT BY 4
         STC   R0,3(R1)      INSERT LENGTH TO MESSAGE FOR USE BY ROSCOE
         LA    R0,3(R1)      LOAD MESSAGE ADDRESS
         L     R13,4(R13)    R13 --> SA IN XMON
         ST    R0,76(R13)    STORE IT IN DYN AREA OF XMON = INAREA
         OI    76(R13),X'80' SET HIGHORDER BIT ON
         L     R15,100(R13)  LOAD ROSCOE-CODE <<OUTCODE>>
         LA    R1,76(R13)    LOAD PARAMETER REGISTER
         L     R13,4(R13)    R13 --> SA IN ROSCOE
         L     R14,12(R13)   LOAD RETURNADDRESS
         LM    R2,R12,28(R13)                    LOAD REMAINDER
         BR    R14           RETURN DIRECT TO ROSCOE
NOROS    EQU   *
         C     R0,=CL4'TSO'
         BNE   DOWTO
         LH    R0,0(R1)
         SH    R0,=H'4'
         LA    R1,4(R1)
         SVC   93             TPUT
         L     R14,SAVE14
         BR    R14
DOWTO    EQU   *
         WTO   MF=(E,(1))
         L     R14,SAVE14
         BR    R14
         TITLE ' X - QCB: MVS/SP REL. 3 SECTION'
SP3ROUT  EQU   *
         USING RIB,R7
         USING RIBVAR,R8
         USING RIBE,R10
         TM    JOBBYTE,X'FF'
         BZ    TSTALL
         MVI   SWITCH1+1,X'00'
         B     ALLSP3
TSTALL   TM    ALLBYTE,X'FF'
         BZ    NOTALL
ALLSP3   L     R1,TABAD
         GQSCAN AREA=((R1),204800),REQLIM=MAX,SCOPE=ALL
         B     CHKCODE
NOTALL   EQU   *
         CLI   MQNBYTE,X'FF'
         BNE   NOQNM
         L     R1,TABAD
         GQSCAN AREA=((R1),204800),REQLIM=MAX,SCOPE=ALL,               *
               RESNAME=SYSDSN
         LTR   R15,R15
         BZ    PROCRIB
         CH    R15,=H'4'
         BNE   CHK8
         MVC   WTO(LENMSG09),MSG09
         LA    R1,WTO
         BAL   R14,WTOR1
         B     ENDWTO
NOQNM    EQU   *
         L     R1,TABAD
         GQSCAN AREA=((R1),204800),REQLIM=MAX,SCOPE=ALL
CHKCODE  LTR   R15,R15
         BZ    PROCRIB
         CH    R15,=H'4'
         BNE   CHK8
OUT6     MVC   WTO(LENMSG06),MSG06
         LA    R1,WTO
         BAL   R14,WTOR1
         B     ENDWTO
CHK8     EQU   *
         CH    R15,=H'8'
         BNE   SCANERR
         MVC   WTO(LENMSG11),MSG11
         LA    R1,WTO
         BAL   R14,WTOR1
         B     PROCRIB
SCANERR  EQU   *
         MVC   WTO(LSCANMSG),SCANMSG
         LA    R1,WTO
         BAL   R14,WTOR1
         ABEND 111,DUMP
PROCRIB  EQU   *
         ST    R0,FULLWD
         LH    R2,FULLWD    LENGTH OF FIXED RIB
         LH    R3,FULLWD+2  LENGTH OF EACH RIBE
         LR    R4,R1        NUBER OF RIB'S RETURNED
         L     R7,TABAD     A(1. RIB)
RIBLP    EQU   *
         MVI   RIBBYTE,X'00'
         CLI   JOBBYTE,X'FF'
         BE    WAITING
         CLI   ALLBYTE,X'FF'
         BE    WAITING
         CLI   MQNBYTE,X'FF'
         BE    WAITING
         L     R15,RIBNTWE
         A     R15,RIBNTWS
         LTR   R15,R15
         BNZ   WAITING
         CLC   RIBQNAME,=CL8'SYSIEFSD'
         BE    WAITING
         MVI   RIBBYTE,X'FF'
WAITING  EQU   *
         L     R5,RIBNRIBE  NO. OF RIBE'S FOR THIS RIB
         LH    R10,RIBVLEN
         LA    R8,0(R2,R7)     ADDR. OF RIBVAR
         LA    R10,0(R10,R8)   ADDR. OF 1. RIBE
         MVC   WTO(LENMSG1X),MSG01X
         MVC   WTO+36(8),RIBQNAME
         SR    R15,R15
         IC    R15,RIBRNMLN
         CH    R15,=H'30'
         BNH   NOEX
         LA    R15,30
NOEX     EQU   *
         BCTR  R15,0
         EX    R15,MVCEXRIB
RIBELP   EQU   *
         MVC   WTO+12(8),RIBEJBNM
         L     R15,RIBEUCB
         LTR   R15,R15
         BZ    NORES
         TM    7(R15),X'10'
         BNO   NORES
         CLI   36(R15),X'00'
         BE    NORES
         MVC   WTO+22(2),=C'R='
         MVC   WTO+24(6),28(R15)
         B     RESOK
NORES    EQU   *
         MVC   WTO+22(8),=CL8'ENQUEUES'
RESOK    EQU   *
         TM    RIBERFLG,RIBETYPE
         BO    SHR
         MVI   WTO+31,C'E'
         B     EXCL
SHR      EQU   *
         MVI   WTO+31,C'S'
EXCL     EQU   *
         TM    RIBERFLG,RIBEMC
         BO    MC
         MVI   WTO+32,C'0'
         B     NOMC
MC       EQU   *
         MVI   WTO+32,C'M'
NOMC     EQU   *
         TM    RIBERFLG,RIBERESV
         BO    RES1
         MVI   WTO+33,C'0'
         B     NORES1
RES1     EQU   *
         MVI   WTO+33,C'R'
NORES1   EQU   *
         TM    RIBESFLG,RIBESTAT
         BO    OWN
         MVI   WTO+34,C'W'
         B     WAIT
OWN      EQU   *
         MVI   WTO+34,C'O'
WAIT     EQU   *
         CLI   MQNBYTE,X'FF'
         BNE   NOQNM1
         CLC   WTO+45(30),TEXT+5
MQNB     BNE   NOOUT
         MVI   SWITCH+1,X'F0'
NOQNM1   EQU   *
         TM    JOBBYTE,X'FF'
         BZ    NOJOBSP3
         CLC   WTO+12(8),TEXT+4
         BNE   NOOUT
         MVI   SWITCH1+1,X'F0'
NOJOBSP3 EQU   *
         CLI   RIBBYTE,X'FF'
         BE    NOOUT
         L     R1,MSGCNT
         LA    R1,1(R1)
         ST    R1,MSGCNT
         LA    R1,WTO
         BAL   R14,WTOR1
NOOUT    LA    R10,0(R3,R10)   GET ADDR. OF NEXT RIBE
         BCT   R5,RIBELP
NXTRIB   EQU   *
         LR    R7,R10
         BCT   R4,RIBLP
         CLC   TEXT+4(8),=CL8' '
         BNE   SWITCH
         CLC   MSGCNT(4),=F'0'
         BNE   ENDWTO
         BE    OUT6
SWITCH   NOP   SWITCH1
         MVC   WTO(LENMSG09),MSG09
         LA    R1,WTO
         BAL   R14,WTOR1
         B     ENDWTO
SWITCH1  NOP   ENDWTO
         MVC   WTO(LENMSG08),MSG08
         MVC   WTO+34(8),TEXT+4
         LA    R1,WTO
         BAL   R14,WTOR1
         B     ENDWTO
***********************************************************************
*                                                                     *
*      DATA DIVISION.                                                 *
*                                                                     *
***********************************************************************
         SPACE 3
*
*      NACHRICHTEN.
*
         SPACE 2
MSG01    WTO   'XQCB001                   ENQUEUES S00 12345678/       *
                               ',                                      *
               MF=L,MCSFLAG=(REG0)
LENMSG01 EQU   *-MSG01
MSG01X   WTO   'XQCB001           ENQUEUES S000 12345678/              *
                               ',                                      *
               MF=L,MCSFLAG=(REG0)
LENMSG1X EQU   *-MSG01X
SCANMSG  WTO   'XQCB010 ERROR ENCOUNTERED IN GQSCAN-FUNCTION',         *
               MF=L,MCSFLAG=(REG0)
LSCANMSG EQU   *-SCANMSG
MSG02    WTO   'XQCB002 INVALID TCB-ADDR',                             *
               MF=L,MCSFLAG=(REG0)
LENMSG02 EQU   *-MSG02
MSG03    WTO   'XQCB003 JOB- AND STEPNAME NOT FOUND, RC=99',           *
               MF=L,MCSFLAG=(REG0)
LENMSG03 EQU   *-MSG03
MSG04    WTO   'XQCB004 QCB ABNORMALLY TERMINATED. TRY IT AGAIN',      *
               MF=L,MCSFLAG=(REG0)
LENMSG04 EQU   *-MSG04
         EJECT
MSG05    WTOR  'XQCB005 REPLY ''Y'' (YES) OR ''N'' (NO) TO CONTINUE',  *
               MF=L,MCSFLAG=(REG0)
LENMSG05 EQU   *-MSG05
MSG06    WTO   'XQCB006 NO JOBS IN CONFLICT SITUATION',                *
               MF=L,MCSFLAG=(REG0)
LENMSG06 EQU   *-MSG06
MSG07    WTO   'XQCB007 NO EXISTING QCB''S',                           *
               MF=L,MCSFLAG=(REG0)
LENMSG07 EQU   *-MSG07
MSG08    WTO   'XQCB008 NO EXISTING QCB''S FOR *JOBNAME',              *
               MF=L,MCSFLAG=(REG0)
LENMSG08 EQU   *-MSG08
MSG09    WTO   'XQCB009 NO EXISTING QCB''S OF SPECIFIED NAME FOUND',   *
               MF=L,MCSFLAG=(REG0)
LENMSG09 EQU   *-MSG09
MSG11    WTO   'XQCB011 TABLE OVERFLOW FOR GQSCAN-FUNCTION',           *
               MF=L,MCSFLAG=(REG0)
LENMSG11 EQU   *-MSG11
MVCEXRIB MVC   WTO+45(0),RIBRNAME
SYSDSN   DC    CL8'SYSDSN'
MSGCNT   DC    F'0'
         EJECT
*
*      PROGRAM INTERRUPTION CONTROL AREA.
*
         SPACE 2
PICA     SPIE  ERROR,(4,5),MF=L
         SPACE 3
*
*      REGISTER EQUATES.
*
         SPACE 2
R0       EQU   0             ENTHAELT ADRESSE DES AUFRUFERS BEI WTO
R1       EQU   1             ZEIGT AUF PARAMETERBEREICH
R2       EQU   2             ZEIGT AUF TCB / TIOT
R3       EQU   3             ZEIGT AUF MAJOR-QCB'S
R4       EQU   4             ZEIGT AUF MINOR-QCB'S
R5       EQU   5             ZEIGT AUF QEL'S
R6       EQU   6             ARBEITSREGISTER
R7       EQU   7             WTO-COUNT
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11            BASISREGISTER FUER DSECT PARMAREA
R12      EQU   12            BASISREGISTER FUER CSECT QCB
R13      EQU   13            BASISREGISTER FUER DSECT ABER
R14      EQU   14            ENTHAELT RUECKSPRUNGADRESSEN
R15      EQU   15            ENTHAELT EINGANGSADRESSEN
         EJECT
*
*      ARBEITSBEREICHE.
*
         SPACE 2
ABER     DSECT
SAVEAREA DS    18F           SAVEAREA FUER REGISTER
SAVE14   DS    F
TABAD    DS    F
TABEND   DS    F
WTO      DS    0F            BEREICH FUER NACHRICHTEN
         ORG   WTO+12
JOBNAME  DS    CL8           JOB NAME
         DS    C
STEPNAME DS    CL8           STEP NAME
         DS    CL14
MAJQCBNM DS    CL9
MINQCBNM DS    CL22          MINOR QCB NAME
         ORG   WTO+120
         SPACE 1
PARMLIST DS    0F
ADDRASID DS    A(ASID)       ADRESSE DER ASID
ADDRJOBN DS    A(JOBNAME)    ADRESSE DES JOBNAMEN
LASTPARM DS    C             = X'80'
ADDRSTPN DS    AL3(STEPNAME) ADRESSE DES STEPNAMEN
MAJNAM   DS    CL8
FULLWD   DS    F
         SPACE 1
ASID     DS    H
SCH      DS    C             BEREICH FUER SCHALTER-BITS
JOBBYTE  DS    C             PARAMETER-SCHALTER
RIBBYTE  DS    C             PARAMETER-SCHALTER
MQNBYTE  DS    C             PARAMETER-SCHALTER
ALLBYTE  DS    C             PARAMETER-SCHALTER
ABERL    EQU   *-ABER        LAENGE DES ARBEITSBEREICHS
         SPACE 3
*
*      PARAMETERBEREICH.
*
         SPACE 2
         XPARM
         EJECT
         ISGRIB
         END   QCB
