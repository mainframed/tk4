 TITLE '--   I E F S E P R 2   --JOB SEPARATOR ROUTINE FOR MVT/MFT2'
         PRINT GEN
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CHARACTERS, AND INSERTS AN I.D. BLOCK ON THE TOP LINE AFTER THE     *
* JOBNAME.  THE FIRST LINE CONTAINS THE JOBNAME; THE SECOND, THE      *
* ACCOUNT NUMBER; THE THIRD, THE PROGRAMMER NAME, AND THE FOURTH,     *
* THE TIME AND DATE                                                   *
*                                                                     *
*      INPUT  --                                                      *
*                                                                     *
*              AN ADDRESS IN REG1 POINTS TO STD. IEFSEPAR PARMLIST.   *
*              R6 POINTS TO IEFSD078 PARM LIST, WHICH HAS THE         *
*              FIRST SMB POINTER AT +14 INTO THE PARM LIST.           *
*                                                                     *
*      OUTPUT --                                                      *
*                                                                     *
*        JOB SEPARATOR PAGES PRINTED WITH BLOCK CHARACTERS            *
*        WITH JOBNAME, ACCOUNT NUMBER, PROGRAMMER NAME, AND           *
*        TIME/DATE ON EACH PAGE.  IT USES IEFSD195, A SPECIAL         *
*        BLOCK CHARACTER ROUTINE TO FORMAT THE OUTPUT LINES IN        *
*        A FASHION SIMILAR TO IEFSD095, THE IBM-SUPPLIED BLOCK        *
*        CHARACTER ROUTINE.                                           *
*                                                                     *
*      EXITS --                                                       *
*                                                                     *
*        EXIT IS MADE VIA A 'BR 14' BACK TO IEFSD078, THE CALLING     *
*        ROUTINE IN THE SYSOUT WRITER.                                *
*                                                                     *
*      ATTRIBUTES --                                                  *
*                                                                     *
*              REENTRANT.                                             *
*                                                                     *
*      NOTES --                                                       *
*                                                                     *
*        THIS MODULE USES 'IEFSD195', A NON-STANDARD BLOCK CHARACTER  *
*        ROUTINE THAT GENERATES 9X10 CHARACTERS OUT OF '*'S.          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*      FOLLOWING IS A SAMPLE WRITER PROCEDURE SHOWING HOW THE JOB     *
*      SEPARATOR PROGRAM IS INVOKED.                                  *
*                                                                     *
*        ./     ADD   NAME=WTR2,LIST=ALL                              *
*        //IEFPROC EXEC  PGM=IEFSD080,PARM='PACD,IEFSEPR2'            *
*        //IEFRDER  DD UNIT=1403,DCB=(BUFNO=6,BUFL=133,LRECL=133,     *
*        //  BLKSIZE=133,RECFM=FM)                                    *
*        /*                                                           *
*                                                                     *
*      THIS WOULD PRINT SYSOUT CLASSES 'A', 'C', AND 'D' WITH THE     *
*      JOB SEPARATOR PROGRAM 'IEFSEPR2'.                              *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SPACE  1
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*      THE USER MUST SPECIFY THE FOLLOWING TWO SYMBOLS AS EXPLAINED   *
*      BELOW --                                                       *
*                                                                     *
*      '&NUMBR' IS A CONSTANT SET TO THE NUMBER OF PAGES OF SEPARATOR *
*      OUTPUT YOU WISH.  (IBM-SUPPLIED ROUTINE GIVES 3, FOR EXAMPLE). *
*                                                                     *
         LCLA  &NUMBR             # OF SEPARATOR PAGES TO PRINT.      *
*                                                                     *
*      '&SKIP'  IS SET TO 'YES' OR 'NO' TO SPECIFY WHETHER OR NOT YOU *
*      WISH THE SEPARATOR PROGRAM TO SUPPRESS OUTPUT FOR SYSTEM TASKS *
*      (SUCH AS 'MOUNT', 'WTR', ETC. )                                *
*        'YES'  MEANS TO SKIP PRINTING SEP. PAGES FOR SYS TASKS       *
*        'NO'   MEANS PRINT SEPARATOR PAGES FOR EVERYTHING.           *
*                                                                     *
         LCLC  &SKIP              SKIP OVER SYSTEM TASK JOBNAMES      *
*                                                                     *
*      THE SET CARDS ARE LOCATED  RIGHT AFTER 'IEFSEPR2 CSECT' CARD   *
*      BELOW.                                                         *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SPACE 2
*      DSCOR  --  DSECT TO FORMAT MY GETMAIN AREA
*      THE FIRST FIVE WORDS ARE THE PARM LIST FOR SD195.
  SPACE 1
ENDPAGE  EQU   X'FF'
FRONTPAG EQU   X'00'
DSCOR    DSECT
DSCHA    DS    F                  ADDRESS OF CHAR STRING INPUT
DSLNA    DS    F                  ADDRESS OF CURRENT LINE #
DSOPA    DS    F                  ADDRESS OF OUTPUT AREA
DSCCA    DS    F                  ADDRESS OF THE # OF CHARS TO CONVERT
DSJWKA   DS    A                  ADDRESS OF CL12 WORK AREA FOR SD195
DSCCT    DS    F                  CHARACTER COUNT WORD
DSLINE   DS    F                  RELATIVE LINE NUMBER
DSRGSV   DS    18F                STD. REG SAVE AREA
DSPTME   DS    CL8                TIME WORK AREA
DSTME    DS    CL12               TIME/DATE BUILD AREA
DSJWK    DS    CL12               WORK AREA FOR SD195
DSWCH    DS    CL1                SWITCH USED BY JOBCARD SCAN
DSCLASS  DS    C                  CLASS OF SYSOUT
DSJOBNM  DS    CL8                JOBNAME
         DS    CL2
DSDATUM  DS    CL12
DW       DS    D
DSZEIT   DS    CL12
DSPGMR   DS    CL12               PROGRAMMER NAME
DSSAV67  DS    2F       SAVEAREA R6,R7
DSSWITCH DS    X
         DS    0D
EPJLM    DS    A                A(JLM-EP)
ZWSEARCH DS    A                SAVE
LPGMR    DS    H
ODSPARM  DS    0F
WTOAREA  DS    CL50             CORE FOR WTO
XIOBLOCK DS    1072C      SAVE FIR IO-WORK-AREA
XJLEPA   DS    XL8        SAVE JLEPA
RACTDER  DS    XL176      RECORD-AREA
JACTTTR  EQU   RACTDER+X'6C'
ACTPGR   EQU   RACTDER+8
         SPACE 2
         DS    0D
DSEND    EQU   *     END OF TABLE
  SPACE 2
         PRINT NOGEN
         DCBD  DSORG=PS,DEVD=DA
         PRINT GEN
   EJECT
IEFWTRWK DSECT                 WRITER-WORK-AREA
WTRACB   DS    CL192           ACB, ETC.
CSCB     DS    CL176           CSCB FOR COMMANDS
DSBIN    DS    CL176           AREA FOR DSB
SAVE1    DS    18F
PARECBL  DS    41F             ECB-LIST
         DS    CL8
DEVCLASS DS    C               DEV-CLASS
UNITTYPE DS    C
COPYCT   DS    C               MULTIPLE COPIES
COPYCT1  DS    C
PARWORK2 DS    CL8
JSEPSWIT DS    C               OUTPUT DEVICE
JSEPPGNO DS    C               NO. SEPARATOR PAGES
         DS    C
JSEPIND  DS    C               IND. FOR SEP. ENTRY
JSEPODCB DS    F               A(OUTPUT-DCB)
JSEPJOBN DS    F               A(JOBNAME)
JSEPCLAS DS    F               A(OUTPUT-CLASS)
PARJSNM  DS    2F              SEP. ROUTINE NAME
LCRB     DS    30F
MSGAREA  DS    26F
SAVE2    DS    18F
TTROFDER DS    F               TTR OF DER
PARFORM  DS    F
LCCPTR   DS    F
DSDTTRS  DS    F
SMF      DS    CL69            SMF RECORD AREA
         DS    CL3
TTRBYTEN DS    10F             SMF RECORD AREA
TTRBYONE DS    10F             SMF RECORD AREA
         DS    2F
         DS    CL5
EOJSEPR  DS    CL1
         DS    CL2
         DS    2H
GETPARM  DS    20F
         DS    CL16
MSGCODE  DS    H
MSGRPL   DS    H
         DS    15F
         ORG   IEFWTRWK+X'134'
JLPA     DS    0X
JLPOP    EQU   *
         DS    F,X
JLPFWAA  DS    XL3
         ORG   IEFWTRWK+X'30C'
JLEPA    DS    0XL8
QINAREA  DS    F
QTTR     DS    F
         ORG   JLPA+X'24'
JLPEIA   DS    F
         ORG   IEFWTRWK+X'338'
JLFWA    DS    XL4
JLPFWIDD DS    CL4
         ORG
JLPREAD  EQU   X'04'
WTRWKEND EQU   *
         SPACE 3
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
    SPACE 2
IEFSEPR2 CSECT
   SPACE 1
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*      USER MAY VARY THE BELOW SYMBOLS AS EXPLAINED ABOVE WHERE THEY  *
*      WERE DEFINED.                                                  *
*                                                                     *
&SKIP    SETC  'YES'              BYPASS PRINTING FOR SYS TASKS       *
*                                                                     *
&NUMBR   SETA  2                  TWO PAGES OF OUTPUT                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  SPACE 1
GO       SAVE  (14,12)            SAVE REGS
         LR    R8,R15             LOAD BASE
         USING GO,R8              MY BASEREG--TELL ASMBLR.
         USING IEFWTRWK,R12       WRITER WORK-AREA
         L    R11,4(R1)           GET SYSOUT DCB ADDRESS
         USING IHADCB,R11         TELL ASMBLR ABOUT DCB ADDR.
   SPACE 1
*      FIRST TEST OUTPUT DCB FOR PUNCH-DESTINATION OUTPUT, THIS
*      PROGRAM DOES NOT HANDLE THAT.
  SPACE 1
         TM    0(R1),X'60'        TEST FOR SYSOUT=PUNCH
         BO    RETURN1            QUIT IF SO.
  SPACE 1
*      TEST PASSED DCB FOR PROPER PARAMETERS
  SPACE 1
         CLC   DCBLRECL,H133      IS LRECL = 133?
         BE    TESTRF             BRANCH IF LRECL O.K.
RETURN1  RETURN (14,12),RC=0      OTHERWISE RETURN; COMMON EXIT.
  SPACE 1
TESTRF   TM    DCBRECFM,X'82'     TEST FOR RECFM=FM OR FBM
         BC    14,RETURN1         RETURN IF DCB NOT O.K.
DCBOK    LR    R4,R1              SAVE INITIAL CONTENTS OF R1.
    SPACE 1
         AIF   ('&SKIP' NE 'YES').BYPASS . SKIP OVER UNECESS. INSTNS
  SPACE 1
*      THE FOLLOWING CODE IS INCLUDED BY SETTING THE 'SKIP' OPTION
*      TO 'YES'.  IF INCLUDED, THIS CODE WILL CHECK THE JOBNAME
*      FOR SUCH THINGS AS 'MOUNT', 'RDR', ETC., OR ANY USER DESIGNATED
*      WORDS, SO THAT SEPARATOR PAGES WILL NOT BE WRITTEN.
*      ADDITIONAL NAMES, SAY OF AN INSTALLATION'S SPECIAL READER
*      PROCS, MAY BE ADDED TO THE LIST AT SYMBOL 'NMTAB'.
  SPACE 1
         L     R2,8(R4)           GET ADDRESS OF JOBNAME.
         CLI   0(R2),C'#'        NUMMERNZEICHEN
         BE    RETURN1
         CLC   0(3,R2),=C'RDR'
         BE    RETURN1
         CLC   0(3,R2),=C'WTR'
         BE    RETURN1
         CLC   0(3,R2),=C'INI'
         BE    RETURN1
         LA    R14,8              LOAD INCREMENT REG.
         LA    R7,NMTAB           LOAD FIRST OPERAND REG.
         LA    R15,NMTABEND       LOAD END COMPARAND.
NMCLC    CLC   0(8,R2),0(R7)      IS THIS A SPECIAL NAME IN THE LIST
         BE    RETURN1            BR IF YES--NO SEPARATOR PAGES.
         BXLE  R7,R14,NMCLC       STEP THRU ALL OF LIST...
*      FALL THRU IF NAME NOT ON RSVD LIST. 'NMTAB'.
         B     NMEND              JUMP OVER LIST, PART OF COND. ASMBLY
  SPACE 1
*      NMTAB -- THE TABLE OF NAMES THAT WILL BE BYPASSED BY
*      THE SEPARATOR PROGRAM.  PREVENTS WASTED PAPER.....
  SPACE 1
NMTAB    DC    CL8'DSO'
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
         DC    CL8' '
NMTABEND EQU   *                  END OF NAME TABLE.
         DC    CL8' '
   SPACE 1
NMEND    DS    0H                 RETURN TO MAINLINE E/P.
.BYPASS  ANOP         ,           NAME CHECK BYPASS
  SPACE 1
*      SET SYNAD ADDRESS IN PASSED DCB FOR I/O ERR.
  SPACE 1
         LA    R2,SYNADR          GET SYNAD ADDRESS
         ST    R2,DCBSYNAD        SET SYNAD FOR RTN.
  SPACE 1
*      NOW GET CORE FOR WORK AREAS.
  SPACE 1
         LA    R0,DSEND-DSCOR      LOAD GETMAIN SIZE PARM.
         GETMAIN R,LV=(0)         ISSUE SVC
  SPACE 1
         LR    R3,R1              LOAD POINTER REG, THE 'DSCOR' BASE.
         USING DSCOR,R3           MY WORKAREA BASEREG.
    SPACE 1
*      NOW SAVE JOBNAME AND SYSOUT CLASS IDENT IN GOTTEN CORE.
    SPACE 1
         L     R2,8(R4)           GET JOBNAME POINTER
         MVC   DSJOBNM,0(R2)      MOVE JOBNAME TO GOTTEN CORE
         L     R2,12(R4)          GET CLASS I D
         MVC   DSCLASS,0(R2)      SYSOUT CLASS TO GOTTEN CORE
         ST    R13,DSRGSV+4       SAVE REG 13.
         LA    R13,DSRGSV         LOAD ADDR OF S/A IN R13.
   EJECT
*      FOLLOWING CODE WILL FETCH THE FIRST SMB (THE ONE CONTAINING THE
*      THE JOB CARD), AND PICK OUT THE FIRST 12 ACCOUNTING CHARACTERS
*      AND THE FIRST 12 CHARACTERS OF THE PROGRAMMER NAME FOR
*      LATER USE.  UPON ENTRY, REG 6 POINTS TO A PARM LIST.  AT +20 IN
*      THE LIST IS A POINTER TO THE CURRENT SMB THAT IEFSD078 HAS.  IT
*      CONTAINS THE JOB CARDIMAGE  IN COMPRESSED TEXT.
*      OTHER ROUTINES BELOW, STARTING WITH SYMBOL 'JSCAN' ARE USED
*      AS SCANNING SUBROUTINES, TO GET OVER THE VARIABLE PARAMETERS
*      POSSIBLE ON THE JOB CARD.  BASICALLY THE ROUTINES WILL
*      LOOK FOR COMMAS OUTSIDE OF TEXT DELIMITERS, PARENS AND QUOTES.
*      ANY PROPER OS JOB CARDS SHOULD WORK OK.  IF A CARD HAS A BAD
*      ACCOUNTING FIELD FORMAT (ONE WITH UNBALANCED PARENS, QUOTES,
*      OR IMBEDDED SINGLE QUOTES) THE PROGRAMMER NAME MAY NOT BE
*      PICKED UP PROPERLY.  SINCE OS WILL FLUSH SUCH A JOB ANYWAY,
*      THIS IS NOT CONSIDERED A DRASTIC LIMITATION
*      THIS ROUTINE WILL PROPERLY HANDLE MISSING PARAMETERS IF SO
*      INDICATED BY COMMAS-- //JOB1 JOB 12345,,MSGLEVEL=1  WILL HAVE
*      THE PROGRAMMER NAME FIELD BLANK, WHILE THE FOLLOWING--
*      //JOB2 JOB ,'O''NEIL, T.',MSGLEVEL=1 WILL HAVE THE ACCOUNTING
*      FIELD ON THE SEPARATOR OUTPUT BLANK.
         SPACE 2
WEIT     EQU   *
  SPACE 1
SKIPAP   DS    0H                 END OF PARAMETER SCAN.
   EJECT
*      GET TIME AND DATE AND CONVERT TO 'HH:MM--YYDDD' AND STORE IT
*      IN DSTME.
  SPACE 1
         BAL   R14,UPTMDAT
         MVC   DSPGMR,=CL12'UNKNOWN'
         MVC   LPGMR,=H'7'
  SPACE 1
*      SET UP PARM LIST FOR IEFSD195, THE BLOCK CHAR RTN.
  SPACE 1
*      PARAMETER 1, ADDRESS OF CHARACTERS, IS SET UP LATER IN LOOPS.
  SPACE 1
*      2ND PARM, THE RELATIVE LINE NUMBER POINTER.
  SPACE 1
         LA    R1,DSLINE          2ND PARM, THE REL LINE #
         ST    R1,DSLNA           STORE IN LIST.
  SPACE 1
*      3RD PARAMETER, OUTPUT ADDRESS, IS SET LATER IN 'PPUT' ROUTINE.
  SPACE 1
*      4TH PARAMETER, ADDRESS OF CHARACTER COUNT FIELD.
  SPACE 1
         LA    R1,DSCCT           ADDR OF CHAR CT FIELD
         ST    R1,DSCCA           STORE IN LIST.
  SPACE 1
*      5TH PARAMETER, THE ADDRESS OF A CL12 WORK AREA FOR SD195 USE.
  SPACE 1
         LA    R2,DSJWK           WORKAREA POINTER FOR SD195.
         ST    R2,DSJWKA          STORE THE POINTER.
  SPACE 1
*      PARM LIST FOR MY BLOCK CHARACTER ROUTINE IS NOW SET UP.
*      IT OCCUPIES THE FIRST FIVE WORDS OF THE GOTTEN CORE AREA.
*      REGS CURRENTLY IN USE ARE-
*                            R3 - DSCOR AREA PTR.
*                            R8 - BASEREG
*                            R11- DCB ADDRESS
  SPACE 1
*      CONVLOOP  MAIN PROGRAM LOOP, ENTERED ONCE PER FULL PAGE OF O/P.
   SPACE 1
         MVI   DSSWITCH,ENDPAGE
         SLR   R5,R5
         IC    R5,EOJSEPR
         TM    0(R4),X'02'        EXIT FOR END-PAGE
         BO    CONVLOOP            YES, BRANCH
         MVI   DSSWITCH,FRONTPAG   SET SWITCH FOR FRONT-PAGES
         SLR   R5,R5               SET NUMBER OF FRONT-PAGES
         IC    R5,1(,R4)              IN REG. 5
         L     R15,16              CVT
         L     R15,X'128'(,R15)    JESCT
         L     R15,X'EC'(,R15)     JLM
         ST    R15,EPJLM   EP(JLM) SAVE FOR LATER USE
*
*  SAVE
         MVC   XJLEPA,JLEPA        EXTPA
         LA    R14,XIOBLOCK        WOHIN
         LA    R15,1072            L'NACH
         L     R0,JLPEIA           WOHER
         LR    R1,R15              L'VON
         MVCL  R14,R0              SAVE IO-BLOCK
*  END-SAVE
         MVI   JLPA,JLPREAD
         LA    R14,RACTDER         RECORD-AREA
         ST    R14,QINAREA         RECORD-AREA
         MVC   QTTR,TTROFDER       TTR(DER)
         L     R15,EPJLM           EP(JLM)
         LA    R1,JLPA
         BALR  R14,R15
         LTR   R15,R15
         BNZ   FREAD1
*
         MVC   QTTR,JACTTTR        TTR(ACT)
         L     R15,EPJLM           EP(JLM)
         BALR  R14,R15
         LTR   R15,R15
         BNZ   FREAD2
         MVC   DSPGMR,ACTPGR       MOVE PGMR-NAME
*  RESTORE
         MVC   JLEPA,XJLEPA
         L     R14,JLPEIA          WOHIN
         LA    R1,1072             L'VON
         LR    R15,R1              L'NACH
         LA    R0,XIOBLOCK         WOHER
         MVCL  R14,R0
*  END-RESTORE
         SPACE 2
         MVC   LPGMR,=H'12'            LENGTH 12
CONVLOOP DS    0H
         BAL   R9,PUT
         MVC   0(2,R1),=X'CB40'
         MVC   2(131,R1),1(R1)
         BAL   R9,PUT
         MVC   0(2,R1),=X'015C'
         MVC   2(131,R1),1(R1)
         BAL   R9,PUT
         MVC   0(2,R1),=X'015C'
         MVC   2(131,R1),1(R1)
         BAL   R9,PUT
  SPACE 1
*      FIRST, FORCE OUT LAST PAGE WITH A SKIP TO CHANNEL 1.
  SPACE 1
         MVC   0(2,R1),=X'8940'   MOVE CC AND BLANK TO BUFFER
         MVC   2(131,R1),1(R1)    PROPAGATE BLANKS
         BAL   R9,PUT             GET BUF
  SPACE 1
*      THIS SETS UP THE 'TEAR' LINE AT TOP OF PAGE.
 SPACE 1
         MVC   0(2,R1),=X'1960'   CC=WRITE & SKIP 3.    DATA='-'
         MVC   2(9,R1),1(R1)      PROPAGATE DASHES IN COLS 1-10.
         MVC   6(1,R1),DSCLASS    CLASS ID IN MIDDLE OF DASHES.
         MVC   11(121,R1),1(R1)   AND PROPAGATE PATTERN THRU BUFFER
         BAL   R9,PUT             GET QSAM BUFFER.
         MVC   0(2,R1),=X'1140'   CC=SKIP 2
         MVC   2(131,R1),1(R1)    BLANK THE BUFFER.
   SPACE  1
   SPACE 1
*      JOBNAME LOOP - PUT OUT BLOCK W/JOBNAME.
  SPACE 1
         LA    R1,DSJOBNM         GET JOB NAME ADDRESS,
         ST    R1,DSCHA           AND STORE FOR SD195.
         LA    R1,8               JOBN=8 CHARACTERS.
         ST    R1,DSCCT           CHARACTER COUNT FOR SD195.
         OI    DSCHA,X'80'        TURN SWCH ON FOR PRINT ID ON LINE 1.
         BAL   R10,PPUT           LINK TO SUBRTN FOR 10 CALLS TO SD195
    SPACE 1
*      PGMR-NAME   LOOP --  PUT OUT PGMRNAME
  SPACE 1
         LH    R1,LPGMR           STORE LENGTH
         ST    R1,DSCCT           OF STRING
         LA    R1,DSPGMR          STORE ADDR.
         ST    R1,DSCHA           OF CHARACTER-STR. CONT. PGMR'S NM
*
         CLI   DSSWITCH,FRONTPAG
         BE    ACCPUT
         MVC   DSPGMR,=CL12' END OF JOB'
         LA    R1,DSPGMR          A('END')
         ST    R1,DSCHA           SET ADR. OF STRING
         LA    R1,11
         ST    R1,DSCCT           NEW LENGTH
         SPACE 1
ACCPUT   DS    0H
         BAL   R10,PPUT           LINK TO PUT MOD.
   SPACE 2
*      TIME - LOOP
  SPACE 1
         LA    R1,DSZEIT          GET PROGRAMMER NAME ADDRESS,
         ST    R1,DSCHA           AND STORE FOR SD195.
         LA    R1,12
         ST    R1,DSCCT           STORE LENGTH OF STRING
         BAL   10,PPUT
  SPACE 2
*      DATE - LOOP
  SPACE 1
         LA    R1,DSDATUM
         ST    R1,DSCHA
         MVI   DSCHA,X'40'        SET TO SKIP FORCING OUT LAST LINES
         BAL   R10,PPUT
  SPACE 1
         BCT   R5,CONVLOOP        LOOP # OF TIMES  SPECIFIED IN &NUMBR
  SPACE 1
         L     R13,DSRGSV+4        LOAD OLD R13 VALUE
         LA    R0,DSEND-DSCOR     LOAD FREEMAIN SIZE
         LR    R1,R3              LOAD REG FOR FREEMAIN
         FREEMAIN R,LV=(0),A=(1)  FREE GOTTEN CORE
         B     RETURN1            AND EXIT.
FREAD1   DS    0H                 READ1 FAILED
         LA    R1,WTOAREA
         MVC   0(L'TEXT+4,R1),TEXTL
FREADN   CVD   R15,DW
         OI    DW+7,X'0F'
         UNPK  DW(3),DW+6(2)
         MVC   4+10(2,R1),DW+1    MOVE RETURN-CODE
         SVC   35                 WTO
         B     CONVLOOP
*
FREAD2   DS    0H
         LA    R1,WTOAREA
         MVC   0(L'TEXT+4,R1),TEXTL
         MVI   4+5(R1),C'2'
         B     FREADN
TEXTL    DC    AL2(L'TEXT+4),AL2(0)
TEXT     DC    C'READ=1,RC=  '
         DS    0H
*        R4 -  WORKREG
  EJECT
*       PPUT -- ROUTINE TO GENERATE CALLS TO BLOCK CHAR. RTN, IEFSD195.
*      THIS ALTERNATE BLOCK CHARACTER RTN WILL MAKE 9W X 10H CHARS.,
*      RATHER THAN THE IBM-SUPPLIED 12X12 FROM IEFSD095.
*      CURRENT REGISTER USAGE -04876   SPACE 1
*        R3 - DSCOR BASE (GOTTEN CORE)
*        R4 -  WORKREG
*        R5 - BCT REG
*        R6 - RELATIVE LINE COUNTER IN PPUT
*        R7 -  WORKREG
*        R8 -  BASEREG
*        R9 -  INTERNAL LINKS TO 'PUT'
*        R10 - INTERNAL LINKS TO 'PPUT'.
*        R11 - DCB ADDRESS
*        R13 - SAVE AREA (IN GOTTEN CORE)
   SPACE 1
PPUT     XR    R6,R6              INIT RELATIVE LINE COUNTER
PPUTLA   LA    R6,1(R6)           STEP COUNTER
         ST    R6,DSLINE          AND STORE FOR SD195.
         BAL   R9,PUT             GET A QSAM BUFFER
         MVC   0(2,R1),=X'0940'   CC=WRITE AND SKIP1
         MVC   2(131,R1),1(R1)    BLANK OUT BUFFER
         LR    R4,R1              SAVE I/O AREA POINTER
         LA    R1,1(R1)           STEP OVER CC IN BUFFER
         ST    R1,DSOPA           STORE FOR SD195.
         LR    R1,R3              LOAD PARAMETER REGISTER FOR SD195.
         L     R15,=A(IEFSD195)   LOAD SUBRTN ADDRESS
         BALR  R14,R15            AND GO.
         LR    R1,R4              GET I/O POINTER BACK
         TM    DSCHA,X'80'        TEST FOR SWITCH
         BZ    SKIPID             SKIP THE ID IF SWCH=OFF
  SPACE 1
*      GENERATE AN I.D. FOR LISTINGS, TO BE IN THE LAST THREE
*      BLOCK CHARACTER POSITIONS ON LINE 1, TO THE RIGHT
*      OF THE JOBNAME.
  SPACE 1
         LR    R7,R6              GET CURRENT COUNT
         MH    R7,H37             MPY BY INDEX
         LA    R4,PRNTID-37       INDEX IS 1 .LT. R6, USE APPROP. PTR.
         AR    R4,R7              ADD BASE TO INDEX
         MVC   94(37,R1),0(R4)    MOVE PRNTID LINE OUT.
   SPACE 1
SKIPID   CH    R6,H10             LAST LINE?
         BL    PPUTLA             NO, ITERATE FOR LINES 1-10.
         MVI   0(R1),X'19'        SET LAST LINE CC=WRITE & SKIP 3.
  SPACE 1
*      THIS TEST  PREVENTS THE EXTRA BLANK LINES AFTER A ROW OF
*      BLOCK CHARACTERS HAS BEEN PRINTED, USED FOR LAST LINE ONLY TO
*      PREVENT GOING TO NEXT PAGE.
  SPACE 1
         TM    DSCHA,X'40'        TEST FOR SPACING SKIP REQUESTED.
         BO    EXIT               BR IF SO
         BAL   R9,PUT             GET BUF
         MVC   0(2,R1),=X'1140'   CC=WRITE AND SKIP 2.
         MVC   2(131,R1),1(R1)    CLEAR BUF
EXIT     BR    R10                BACK TO CALLER
  SPACE 2
*      PUT -- A ROUTINE TO LINK TO THE QSAM PUT/LOCATE MODULE.
  SPACE 1
PUT      LR    R1,R11             DCB ADDRESS TO REG1.
         L     R15,DCBPUT         GET RDWR ADDRESS
         STM   R6,R7,DSSAV67      STORE R6,R7 NACH DSSAV67
         L     R6,4(13)     ALTES R13 NACH R6 LADEN
         L     R7,48(6)  R7 AUF URSPRUENGLICHEN WERT LADEN
         BALR  R14,R15            AND GO.
         LM    R6,R7,DSSAV67       WERTE R6,R7 ZURUECKLADEN
         BR    R9                 NOW BACK TO USER, NEXTBUF IN R1.
   SPACE 2
*      SYNAD RTN GETS CTL IF I/O ERR. SET RC=8 AND PUNT.
   SPACE 1
SYNADR   LA    15,8               SET PRM I/O ERROR
         BR    14                 AND QUIT.
          EJECT
UPTMDAT   ST    R14,ZWSEARCH      SAVE RET
          MVC   DSZEIT,=X'4021204B20204B202040C1D4'
          TIME  DEC
          CL    R0,=X'12000000'
          BL    PMORN
          MVI   DSZEIT+10,C'P'    USE PM
          SL    R0,=X'12000000'
PMORN     DS    0H
          ST    R0,DW
          CLI   DW,X'00'          CHANGE 00 TO 12
          BNE   *+8
          MVI   DW,X'12'
          TM    DW,X'08'          TEST ADJUSTMENT ERROR
          BZ    *+8
          NI    DW,X'09'
          ED    DSZEIT(9),DW      TIME IS CREATED
          MVC   DSDATUM-2(14),=X'402021204B404040402120202020'
          LR    R14,R1
          SRL   R14,12            YEAR TO RIGHT
          O     R14,=X'0001900F'
          ST    R14,DW+4
          ED    DSDATUM+6(6),DW+5 EDIT
          MVI   DSDATUM+6,C'.'
          ST    R1,DW+4
          MVC   ODSPARM(PYEAREND-PYEARTAB),PYEARTAB
          TM    DW+5,X'01'         TEST
          BO    *+16                 FOR
          TM    DW+5,X'12'             LEAP
          BM    *+8                      YEAR
          MVI   ODSPARM+4,29
*
          XC    DW(6),DW
          CVB   R1,DW
          LA    R14,ODSPARM-4
          SLR   R0,R0
PRIDATE   SR    R1,R0
          LA    R14,4(,R14)
          IC    R0,0(,R14)
          CLR   R0,R1
          BL    PRIDATE
          CVD   R1,DW
          ED    DSDATUM-2(4),DW+6
          MVC   DSDATUM+4(3),1(R14)  MOVE MONTH
          L     R14,ZWSEARCH
         BR    R14
PYEARTAB DS    0H
         DC    AL1(31),CL3'JAN'
         DC    AL1(28),CL3'FEB'
         DC    AL1(31),CL3'MAR'
         DC    AL1(30),CL3'APR'
         DC    AL1(31),CL3'MAY'
         DC    AL1(30),CL3'JUN'
         DC    AL1(31),CL3'JUL'
         DC    AL1(31),CL3'AUG'
         DC    AL1(30),CL3'SEP'
         DC    AL1(31),CL3'OCT'
         DC    AL1(30),CL3'NOV'
         DC    AL1(31),CL3'DEC'
PYEAREND DS    0H
         EJECT
         LTORG
  SPACE 2
H10      DC    H'10'
H37      DC    H'37'
H133     DC    H'133'
   SPACE 2
PRNTID  DC    C'* * * * * * * * * * * * * * * * * * *'
         DC    C'*                                   *'
         DC    C'*    *****ZENTRALSPARKASSE*****     *'
         DC    C'*    *******DATENZENTRUM*******     *'
         DC    C'*                                   *'
         DC    C'*    SYSTEMGRUPPE    HR.I.NOVAK     *'
         DC    C'*    HR.FUCHS        HR.WIMMER      *'
         DC    C'*                                   *'
         DC    C'*         VS1       REL.4.0         *'
         DC    C'* * * * * * * * * * * * * * * * * * *'
 TITLE '   I E F S D 1 9 5   -- BLOCK CHARACTER ROUTINE'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                I E F S D 1 9 5   -- NEW BLOCK CHARACTER ROUTINE     *
*                                                                     *
* THIS CSECT IS A REPLACEMENT FOR THE IBM-SUPPLIED BLOCK CHARACTER    *
* ROUTINE. THIS MODULE PUTS OUT CHARACTERS THAT ARE 9 WIDE, BY 10 HIGH*
* RATHER THAN THE 12X12 THAT IEFSD095 PUTS OUT.  THIS PERMITS UP TO   *
* TWELVE CHARACTERS PER LINE RATHER THAN 9.  INTER CHARACTER SPACING  *
* REMAINS AT TWO, SO THE CHARACTERS TAKE UP (11*N-2) POSITIONS, WHERE *
* 'N' IS THE NUMBER OF CHARACTERS PER LINE.  THE IEFSD195             *
* CALLING SEQUENCE IS THE SAME, BALR 14,15 , AFTER LOADING REG1 WITH  *
* AN IDENTICAL PARM LIST. SEE SYS PROG GUIDE FOR FORMAT.              *
* NOTE THAT THE LINE # POINTED TO BY THE PARM LIST NOW RUNS FROM 1-10 *
* RATHER THAN 1-12 WITH IEFSD095.                                     *
*      SPECIAL CHARACTERS HAVE BEEN ADDED TO THE ALPHAMERICS THAT THE *
* ROUTINE PRINTS-- ':','-','/',AND '.'.
*                                                                     *
*      INPUT --                                                       *
*                                                                     *
*        REGISTER 1 POINTS TO A 5-WORD PARM LIST                      *
*           1. A(CHARACTER STRING)                                    *
*           2. A(LINE # WORD)                                         *
*           3. A(OUTPUT AREA)                                         *
*           4. A(CHAR COUNT WORD)                                     *
*           5. A(WORK AREA)    CL12
*                                                                     *
*        REGISTER 13 POINTS TO A STD. SAVE AREA.                      *
*                                                                     *
*      OUTPUT --                                                      *
*                                                                     *
*        THE PATTERNS NECESSARY TO PRINT A LINE OF CHARACTERS         *
*        ARE MOVED TO THE OUTPUT AREA.  ONE LINE (FROM 1-10)          *
*        IS PRODUCED PER CALL.  THIS IS A LOWEST LEVEL RTN.           *
*                                                                     *
*      EXITS --                                                       *
*        EXIT IS TO CALLING ROUTINE, IEFSEPR2, VIA BR 14.             *
*                                                                     *
*      ERRORS --                                                      *
*                                                                     *
*        RETURN TO CALLING RTN IF PARAMETERS OUT OF RANGE.  INVALID   *
*        CHARACTERS ARE TRANSLATED TO BLANKS.                         *
*            LINE NUMBER: RANGE 1-10                                  *
*            CHARACTER COUNT: RANGE 1-12 CHARACTERS                   *
*                                                                     *
*      ATTRIBUTES --
*        REENTRANT.                                                   *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   SPACE 2
         DROP  R3,R8,R11
MYAREA   DSECT
         DS    CL12   PASSED WORK AREA
  SPACE 2
IEFSD195 CSECT
  SPACE 1
         SAVE  (14,12)            SAVE REGS
         BALR  R12,R0
         USING *,R12
         USING DSCOR,R1
         L     R2,DSJWKA          LOAD WORKAREA ADDRESS
         USING MYAREA,R2          PASSED WORK AREA ADDRESS.
         L     R6,DSCHA           GET ADDRESS OF CHARACTERS
         L     R7,DSLNA           GET ADDRESS OF LINE #
         L     R7,0(R7)           GET LINE # IN REG 7.
         CH    R7,H10X            TEST FOR INVALID LINE #.
         BH    RET
         BCTR  R7,R0              SUBTR 1 FOR INTERNAL USE
         L     R8,DSOPA           GET OUTPUT ADDRESS
         L     R9,DSCCA           GET ADDRESS OF COUNT
         DROP  R1
         L     R9,0(R9)          GET THE COUNT
         CH    R9,H1
         BL    RET                EXIT IF COUNT .LT. 1.
         CH    R9,H12             TEST FOR HIGH COUNT VALUE
         BH    RET                MAX COUNT IS TWELVE.
         LR    R5,R9              COUNT TO R5.
         BCTR  R5,R0              SUBTRACT ONE.
         EX    R5,MOVE            GET THE CHARACTERS IN MY AREA.
         EX    R5,TRANSL          XLATE TO MY INTERNAL CODES.
         LA    R6,MYAREA
  SPACE 1
*      END OF INITIALIZATION.  THE CONVERT LOOP FOLLOWS.
  SPACE 1
CNVLOOP  XR    R4,R4              CLEAR WORKREG
         XR    R5,R5              CLEAR WORKREG.
         IC    R5,0(R6)           GET CHAR'S INTERNAL CODE.
         MH    R5,H10X            MPY BY 10, GIVES INDEX TO 'PXTAB'.
         AR    R5,R7              ADD CURRENT LINE # (0-9) TO INDEX.
         IC    R4,PXTAB(R5)       GET PATTERN # FROM 'PXTAB'.
         MH    R4,H9              GENERATE INDEX TO 'PTAB'.
         LA    R5,PTAB            GET ADDRESS OF PATTERN TABLE
         AR    R5,R4             ADD BASE OF PTAB & INDEX.
         MVC   0(9,R8),0(R5)      MOVE PATTERN TO USER'S AREA.
         LA    R8,11(R8)          STEP THE OUTPUT POINTER.
         LA    R6,1(R6)           STEP THE INPUT  POINTER.
         BCT   R9,CNVLOOP
  SPACE 1
RET      RETURN (14,12)
  SPACE 1
MOVE     MVC   MYAREA(1),0(R6)    MVC FOR EXECUTE INSN.
TRANSL   TR    MYAREA(1),TRTAB    A TR INSTN FOR EXECUTE.
   SPACE 1
H1       DC    H'1'
H9       DC    H'9'
H10X     DC    H'10'
H12      DC    H'12'
  SPACE 1
*      TRTAB -- A TRANSLATE TABLE TO GET ALL CHARS INTO MY INTERNAL
*               CODE TO USE AS INDEX TO THE PATTERN INDEX TABLE.
  SPACE 1
TRTAB    DC    75X'00'                 ILLEGAL - CHARACTERS TO BLANKS
         DC    X'26'                   PERIOD
         DC    15X'00'                 ILLEGAL
         DC    X'2A'                    DOLLAR
         DC    4X'00'                   ILLEGAL
         DC    X'27'                    DASH
         DC    X'29'                   SLASH
         DC    9X'00'
         DC    X'25'                   COMMA
         DC    14X'00'
         DC    X'28'                   COLON
         DC    70X'00'
         DC    X'010203040506070809'   A - I
         DC    7X'00'                  ILLEGAL
         DC    X'0A0B0C0D0E0F101112'   J - R
         DC    8X'00'                  ILLEGAL
         DC    X'131415161718191A'     S - Z
         DC    6X'00'                  ILLEGAL
         DC    X'1B1C1D1E1F2021222324' 0 - 9
         DC    6X'00'                  ILLEGAL
         DC    AL2(*-TRTAB)  SHOULD BE = X'0100' (256)
   EJECT
*      PXTAB -- THE PATTERN INDEX TABLE.  THE TRANSLATED CHARACTERS
*      PLUS THE RELATIVE LINE NUMBER IS A INDEX TO THIS TABLE,
*      WHICH THEN PROVIDES THE INDEX TO THE PATTERN TABLE.
  SPACE 1
*                 1 2 3 4 5 6 7 8 910  CORRESPONDS TO LETTER-
PXTAB    DC    X'30303030303030303030' BLANK
         DC    X'0E0F1009090000090909' A
         DC    X'11000909111109090011' B
         DC    X'12000901010101090012' C
         DC    X'11000909090909090011' D
         DC    X'00000101131301010000' E
         DC    X'00000101131301010101' F
         DC    X'12000901011414090012' G
         DC    X'09090909000009090909' H
         DC    X'15150404040404041515' I
         DC    X'08080808080808090012' J
         DC    X'09161718191918171609' K
         DC    X'01010101010101010000' L
         DC    X'34093536222109090909' M
         DC    X'1A091C0D0A0B0C1D091B' N
         DC    X'12000909090909090012' O
         DC    X'11000909001101010101' P
         DC    X'120009090909270C1128' Q
         DC    X'11000909001118171609' R
         DC    X'12000901111E08090012' S
         DC    X'11110404040404040404' T
         DC    X'09090909090909090012' U
         DC    X'090909090909101F0E20' V
         DC    X'09090909090921222324' W
         DC    X'0909101F0E0E1F100909' X
         DC    X'16161625260404040404' Y
         DC    X'00000706050403020000' Z
         DC    X'0F12090909090909120F' 0
         DC    X'29050E05050505052A2A' 1
         DC    X'12000907060504031E00' 2
         DC    X'000016062E2F08090012' 3
         DC    X'2B062C2D1F2500000606' 4
         DC    X'000001111E0808090012' 5
         DC    X'12000901110009090012' 6
         DC    X'00001606050403030303' 7
         DC    X'12000909121209090012' 8
         DC    X'12000909001E08090012' 9
         DC    X'30303030303030310132' , COMMA
         DC    X'30303030303030313131' . PERIOD
         DC    X'30303030121230303030' - DASH
         DC    X'30300E0E30300E0E3030' : CPLON
         DC    X'33080706050403020132' / SLASH
         DC    X'05371E381237391E1205' $ DOLLAR
*      SLASH ABOVE IS AT RELATIVE +29 (HEX) IN THE TABLE.  THE NEXT
*      SLOT IS +2A IF YOU WANT TO ADD ANY CHARS.  THE '29' OF THE
*      SLASH WILL APPEAR IN ITS PLACE IN THE TRANSLATE TABLE, TRTAB.
   EJECT
PTAB     DC    C'*********'  THE PATTERN TABLE FROM WHICH EACH LINE
         DC    C'**       '  OF CHARACTERS IS BUILT.  (01)
         DC    C' **      '  02
         DC    C'  **     '  03
         DC    C'   **    '  04
         DC    C'    **   '  05
         DC    C'     **  '  06
         DC    C'      ** '  07
         DC    C'       **'  08
         DC    C'**     **'  09
         DC    C'** **  **'  0A
         DC    C'**  ** **'  0B
         DC    C'**   ****'  0C
         DC    C'****   **'  0D
         DC    C'   ***   '  0E
         DC    C'  *****  '  0F
         DC    C' **   ** '  10
         DC    C'******** '  11
         DC    C' ******* '  12
         DC    C'******   '  13
         DC    C'**   ****'  14
         DC    C' ******  '  15
         DC    C'**    ** '  16
         DC    C'**   **  '  17
         DC    C'**  **   '  18
         DC    C'****     '  19
         DC    C'*      **'  1A
         DC    C'**      *'  1B
         DC    C'***    **'  1C
         DC    C'**    ***'  1D
         DC    C' ********'  1E
         DC    C'  ** **  '  1F
         DC    C'    *    '  20
         DC    C'**  *  **'  21
         DC    C'** *** **'  22
         DC    C' *** *** '  23
         DC    C'  *   *  '  24
         DC    C' **  **  '  25
         DC    C'  ****   '  26
         DC    C'**   * **'  27
         DC    C' ****** *'  28
         DC    C'     *   '  29
         DC    C'  ****** '  2A
         DC    C'      *  '  2B
         DC    C'    ***  '  2C
         DC    C'   ****  '  2D
         DC    C'    **** '  2E
         DC    C'   ******'  2F
         DC    C'         '  30  THIS IS A BLANK
         DC    C'***      '  31
         DC    C'*        '  32
         DC    C'        *'  33
         DC    C'*       *' 34
         DC    C'***   ***' 35
         DC    C'**** ****' 36
*      ANY USER PATTERNS FOLLOW HERE AND WOULD BE IDENTIFIED IN THE
*      PATTERN INDEX TABLE WITH NUMBERS STARTING WITH '37'.
         DC    C'  *******' 37
         DC    C' ** **   ' 38
         DC    C'    ** **' 39
         END
