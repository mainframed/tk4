*------------------------------------------------------------------
*                T A P E C O P Y
*
* FUNCTION/OPERATION:
* TAPECOPY COPIES THE CONTENTS OF AN INPUT TAPE TO AN OUTPUT TAPE
* IF THE VOLUME LABEL OF THE MOUNTED TAPE IS STANDARD, ITS VOL
* SER-# IS COMPARED WITH THAT FOUND IN JFCB. THE OPERATOR IS ASKED
* FOR ACTION IF THEY ARE NOT EQUAL (DONE FOR INPUT AND OUTPUT TAPE)
* POSSIBLE ACTIONS ARE: 'U'   -  USE THIS TAPE IN SPITE OF OTHER
*                             VOL-SER-# FOUND IN JFCB, AND DO
*                             NOT CHANGE VOLUME LABEL OF OUTTAPE
*                       'M'   -  MOUNT A NEW TAPE
*                       'C'   -  CANCEL COPY
* INCASE OF THE REPLY 'M' A MESSAGE 'TSC011' IS ROUTED TO THE
* TAPECONSOLE (ROUTCODE 5,6) TO MOUNT A NEW TAPE. MOST ERRORS
* LEAD TO AN ABEND USER1 WHICH IS ACCOMPANIED BY AN INFORMATION
* ABOUT WHICH OPERATION FAILED.
*
* LABELS ARE HANDLED IN THE FOLLOWING WAY:
*          IF NO PARM INFORMATION IS PROVIDED ON THE EXEC CARD THEN
*             IF INTAPE = SL AND OUTTAPE = SL THEN
*                         VOLUME LABEL OF OUTTAPE IS NOT CHANGED
*             IF INTAPE = NL AND OUTTAPE = NL THEN
*                         INTAPE IS COPIED COMPLETELY
*             IF INTAPE = SL AND OUTTAPE = NL THEN
*                         COPY VOLUME LABEL FOR OUTTAPE FROM DD-CARD
*                         (OUTTAPE IS SL AFTER COPY)
*             IF INTAPE = NL AND OUTTAPE = SL THEN
*                         OUTTAPE IS CHANGED TO NL, INTAPE IS COPIED
*                                                          COMPLETELY
*          IF PARM=CL IS CODED ON THE EXEC CARD THEN
*             INTAPE IS COPIED COMPLETELY INCLUDING VOLUME LABEL
*                                            ( IF PRESENT )
*             IN THIS CASE THE OPERATOR IS ASKED
*             TO EXPLICITLY ALLOW THIS.
*             POSSIBLE ACTIONS ARE :
*                    'U' - ALLOW LABEL TO BE COPIED
*                    'C' - CANCEL COPY
* WARNING:
*          LABEL PROCESSING REQUIRES THAT BOTH TAPES CONTAIN
*          AT LEAST ONE BLOCK OR TAPEMARK TO AVOID UNRAPPING
*          OF TAPE BY FIRST READ OPERATION.
*
* ENTRY POINTS :  TAPECOPY
*
* INPUT:
*             PARM='CL'   FOR COPY TAPE COMPLETELY, (INCLUDING
*                         VOLUME LABEL IF PRESENT)
*             NONE        OTHERWISE
*
* DD STATEMENTS:
*             INTAPE   DEFINES THE TAPE TO BE COPIED
*             OUTTAPE  DEFINES THE OUTPUT TAPE
*
*             SYSPRINT DEFINES THE OUTPUT DATA SET
*                      DCB=(RECFM=FBA,LRECL=121,BLKSIZE=3146)
*                      IS PROVIDED BY PROGRAM
*
* EXIT NORMAL  :  VIA REGISTER 14
*
* EXIT ERROR   :  ABEND
*
* RETURN CODES :  0 - INPUT TAPE WITH SL
*                 4 - INPUT TAPE NOT WITH SL
*
* TABLES/WORK AREAS :
*                DCB, ECB, IOB, JFCB
*
* ATTRIBUTES  : REUSSABLE, NOT REENTRABLE,
*              EXCP USING WITH OPEN AND CLOSE (TYPE=J)
*
* RESTRICTIONS : SHOULD BE LINKED WITH AC=1 IN VS SYSTEMS
*
* RELATED PGMS: TAPESCAN,TAPESKIM
*
* STORAGE: TOTAL < 40K
* STATUS   :  CHANGE LEVEL : 1.3  SCHEID 26JAN76
*                                 COMPARE MOUNTED VOL-SER-#
*                         WITH REQUIRED VOL-SER-# FOUND IN JFCB
*                            1.4  SCHEID 27JUL76
*                                 CHANGE LENGTH OF READ CCW TO
*                              AVOID ABEND
*                            1.5  BIRKENBIHL 27AUG76
*                                 COPY TAPES STARTING WITH EOF
*                            1.6  SCHEID 25JAN77
*                                 CORRECT CANCEL AND MOUNT PASSUS
*
* NOTES : NONE
* AUTHOR: V.BLASIUS
*------------------------------------------------------------------
         EJECT
         SPACE 5
         MACRO
&LABEL   JFCBD
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                         00JAN00-PAHL
.*  JOB FILE CONTROL BLOCK (OS/360 DATA MANAGEMENT)        03NOV72-PAHL
.*
         AIF   ('&LABEL' EQ '').DSECT
&LABEL   DS    0F
         AGO   .A
.DSECT   ANOP
JFCB     DSECT
.A       ANOP
JFCBDSNM DS    CL44                DATA SET NAME
JFCBELNM DS    CL8                 ELEMENT NAME;REL.GEN.NO.;TYPE OF AR.
JFCBTSDM DS    X                   JOB MNGMT-DATA MNGMT INTERFACE BYTE
JFCBSYSC DS    XL13                SYSTEM CODE
JFCBLTYP DS    X                   LABEL TYPE
         DS    X                   RESERVED
JFCBFLSQ DS    H                   FILE SEQUENCE NUMBER
JFCBVLSQ DS    H                   VOLUME SEQUENCE NUMBER
JFCBMASK DS    XL8                 DATA MANAGEMENT MASK
JFCBCRDT DS    XL3                 DATA SET CREATION DATE
JFCBXPDT DS    XL3                 DATA SET EXPIRATION DATE
JFCBIND1 DS    X                   INDICATOR BYTE 1
JFCBIND2 DS    X                   INDICATOR BYTE 2
JFCBUFNO DS    X
JFCBUFRQ EQU   JFCBUFNO            QTAM:
JFCBFTEK DS    X
JFCBFALN EQU   JFCBFTEK
JFCBHIAR EQU   JFCBFTEK
JFCBUFL  DS    H
JFCEROPT DS    X
JFCTRTCH DS    X                   DEVD=TA: TAPE REC TECHNQ FOR 7TR
JFCKEYLE EQU   JFCTRTCH            DEVD=DA: DIRECT ACCESS KEY LENGTH
JFCDEN   DS    X                   TAPE DENSITY
JFCLIMCT DS    XL3                 BDAM; SEARCH LIMITS
JFCDSORG DS    XL2                 DATA SET ORGANIZATION
JFCRECFM DS    X
JFCOPTCD DS    X
JFCBLKSI DS    H
JFCLRECL DS    H
JFCNCP   DS    X
JFCNTM   DS    X
*   NORMAL 108 SEGMENT
JFCRKP   DS    H                   RELATIVE KEY POSITION
JFCCYLOF DS    X
JFCPBUFN DS    X                   RESERVED
JFCINTVL DS    X                   QTAM:
*
JFCCPRI  DS    X                   QTAM:
JFCSOWA  DS    H                   QTAM:
         DS    X                   RESERVED
JFCBNVOL DS    X                   NUMBER OF VOLUME SERIAL NUMBERS
JFCBVOLS DS    5CL6                VOLUME SERIAL NUMBERS
JFCBEXTL DS    X                   RESERVED
JFCBEXAD DS    XL3                 TTR OF FIRST JFCB EXTENSION BLOCK
JFCBPQTY DS    FL3                 PRIMARY QUANTITY OF D.A. STORAGE
JFCBCTRI DS    X                   SPACE PARAMETERS
JFCBSQTY DS    FL3                 SECONDARY QUANTITY OF D.A. STORAGE
         DS    X                   RESERVED
JFCBDQTY DS    FL3                 DIRECTORY QUANTITY
JFCBSPNM DS    AL3
JFCBABST DS    XL2
JFCBSBNM DS    AL3
JFCBDRLH DS    FL3                 AVERAGE DATA BLOCK LENGTH
JFCBVLCT DS    X                   VOLUME COUNT
JFCBSPTN DS    X
         SPACE
         MEND
         SPACE 5
         MACRO
&LABEL   BMCLA   &REG,&PAR
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                        16MAR70-GEIST
.*  LOAD REGISTER &REG WITH &PAR                          12JUN72-PAHL
.*
.*  &REG    : ABS.EXPR<16   REGISTER TO BE LOADED.
.*  &PAR    : RX-ADDR×(REG)×<RX-ADDR>   ADDR/VALUE TO BE LOADED INTO
.*            REGISTER.
.*
         LCLC  &C1,&C2
         AIF   ('&PAR' EQ '').NAMEIT
         AIF   ('&PAR'(1,1) EQ '(').LR
         AIF   ('&PAR'(1,1) EQ '<').L
.*  &PAR = RX-ADDR
         AIF   ('&PAR' EQ '0').LA0
&LABEL   LA    &REG,&PAR
         MEXIT
.LA0     ANOP
&LABEL   SR    &REG,&REG
         MEXIT
.*  &PAR = (REG)
.LR      AIF   ('&PAR(1)' EQ '&REG(1)').NAMEIT
&LABEL   LR    &REG,&PAR(1)
         MEXIT
.*  &PAR = <RX-ADDR>
.L       AIF   (K'&PAR GT 10).LTWO
&C1      SETC  '&PAR'(2,K'&PAR-2)
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&PAR'(2,8)
&C2      SETC  '&PAR'(10,K'&PAR-10)
.LOAD    ANOP
&LABEL   L     &REG,&C1&C2
         MEXIT
.NAMEIT  AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   PROLOG  &BASE=10,&ID=,&DSA=,&SSA=,&COPYR=YES,                 *
               &EP=*,&NAME=,&LEN=             OLDIES FOR COMPATIBILITY
.*             COPYRIGHT GMD RZ.BN   1975
.*                                                         00JAN69-
.*  STANDARD PROGRAM INITIATION                            19JUL73-PAHL
.*
.*  &BASE   : REG212×(REG212,...,REG212)   BASE REGISTER(S) FOR PROGRAM
.*            ARE SET WITH 4K-DIFFERENCE BEGINNING AT FIRST BYTE OF
.*            MACRO EXPANSION.
.*  &ID     : CHAR.STR×'CHAR.STR'       ENTRY POINT IDENTIFICATION
.*            DEFAULT: &LABEL, IF OMITTED, &SYSECT.
.*  &DSA    : DSANAM×(DSANAM,LEN)×(,LEN)×*   REQUESTS THAT A DYNAMIC
.*            SAVE/WORK AREA BE OBTAINED.
.*   DSANAM : SYMBOL   NAMING THE DSECT DESCRIBING THE SAVE/WORK AREA
.*            IF NOT OMITTED, A 'USING DSANAM,13' IS ALSO GENERATED.
.*      LEN : ABS.EXPR   GIVES THE LENGTH OF THE DYNAMIC SAVE/WORK AREA
.*            IF IT IS OMITTED BUT DSANAM IS SPECIFIED, THE STANDARD
.*            LENGTH SYMBOL 'DSANAM.#' IS ASSUMED.
.*        * : ONLY THE MINIMUM SAVE AREA OF 72 BYTES IS TO BE OBTAINED.
.*  &SSA    : *×A-SYMBOL×(GPR0-14)×<RX-ADDR>  INDICATES THAT A STATIC
.*            SAVE AREA IS TO BE USED.  IF "*" IS SPECIFIED, A MINIMUM
.*            (72B) SAVE AREA IS GENERATED INLINE, THE OTHER NOTATIONS
.*            SPECIFY THE ADDRESS OF THE SAVE AREA TO BE USED.
.*  &DSA AND &SSA ARE EXCLUSIVE.  IF BOTH OMITTED, DSA=* IS ASSUMED.
.*  THE SAVE AREA IS CHAINED TO THE ACTIVE SAVE AREA CHAIN, THE END
.*  OF WHICH MUST BE ADDRESSED BY (R13) AT POINT OF MACRO CALL.
.*
.*  &COPYR  : YES×NO   GENERATE A GMD RZ COPYRIGHT NOTICE APPENDED TO
.*            THE EP ID?
.*--OLD KEYWORDS STILL SUPPORTED JUST FOR COMPATIBILITY--
.*  &EP     : ALTERNATE ENTRY POINT NAME, AFFECTS BASE REGISTER USING
.*            STATEMENTS ONLY.
.*  &NAME   : FORMER NAME OF ID KEYWORD.
.*  &LEN    : EQ. TO &DSA(2).
.*
         LCLA  &NA,&NB
         LCLC  &C
         AIF   ('&NAME' NE '').ONAME   ***OLD***
.GO1     AIF   ('&LEN' NE '').OLEN     ***OLD***
         DS    0H
.GO2     AIF   ('&BASE' EQ '').YBASE
         USING &EP,&BASE(1)            PROGRAM BASE
.USE2    AIF   (&NA+1 GE N'&BASE).USE15
&NA      SETA  &NA+1
         USING &EP+&NA*4096,&BASE(&NA+1)
         AGO   .USE2
.USE15   USING &EP,15
&LABEL   B     BMC&SYSNDX
         DC    AL1(BMC&SYSNDX.A-*-1)   ID LENGTH
         AIF   ('&ID' NE '').ID
&C       SETC  '&LABEL'                 IF NO EXTRA ID, USE LABEL
         AIF   ('&C' NE '').DID
&C       SETC  '&SYSECT'               IF NO LABEL EITHER, USE CSECT NM
         AIF   ('&C' NE '').DID
&C       SETC  '?'                     NO CSECT NAME EITHER.
         MNOTE 4,'****** PROLOG: NO ENTRY ID'
.DID     DC    C'&C'
         AGO   .COPYR
.ID      AIF   ('&ID'(1,1) EQ '''').IDQ
         AIF   ('&ID'(K'&ID,1) EQ '''').IDC
         DC    C'&ID'
         AGO   .COPYR
.IDC     DC    &ID
         AGO   .COPYR
.IDQ     DC    C&ID
.COPYR   AIF   ('&COPYR' NE 'YES').COPYR1
         DC    C' COPYRIGHT GMD RZ.BN &SYSDATE'
         AGO   .IDEND
.COPYR1  AIF   ('&COPYR' EQ '' OR '&COPYR' EQ 'NO').IDEND
         BMCERMAC PROLOG,123,COPYR,&COPYR,NO
.IDEND   ANOP
BMC&SYSNDX.A EQU *
         AIF   ('&SSA' NE '').SSA
.*
.*  DYNAMIC SAVE AREA SET-UP
.*
.DSA     DC    V($5GCORE)
         AIF   ('&DSA(2)' NE '').DSA2
&C       SETC  '72'                    MINIMUM/DEFAULT LENGTH
         AIF   ('&DSA(1)' EQ '' OR '&DSA(1)' EQ '*').DSA72
&C       SETC  '&DSA(1)'(1,7)'#'       STANDARD LENGTH SYMBOL
.DSA72   DC    A(&C)                   LENGTH OF SAVE/WORK AREA
         AGO   .DSA3
.DSA2    DC    A(&DSA(2))              SAVE/WORK AREA LENGTH
.DSA3    ANOP
BMC&SYSNDX STM 14,12,12(13)
         LM    14,15,*-12
         BALR  10,14                   CALL PROLOGUE MODULE
         AGO   .BASE
.*
.*  STATIC SAVE AREA SET-UP
.*
.SSA     AIF   ('&DSA' NE '').YSA
         AIF   ('&SSA' NE '*').SSAL
         DC    18F'0'                  STATIC SAVE AREA
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S REGISTERS
         LA    14,*-19*4               -> STATIC SAVE AREA
         AGO   .SACHAIN
.SSAL    AIF   ('&SSA'(1,1)  NE '<' AND '&SSA'(1,1) NE '(').SSAADDR
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S  REGISTERS
         BMCLA 14,&SSA                 -> STATIC SAVE AREA
         AGO   .SACHAIN
.SSAADDR DC    A(&SSA)
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S REGISTERS
         L     14,*-8                  -> STATIC SAVE AREA
.SACHAIN MVC   8(4,14),8(13)           LSA(NEW) = LSA(OLD)
         ST    13,4(,14)               HSA(NEW) = OLD
         ST    14,8(,13)               LSA(OLD) = NEW
         LR    13,14                   -> NEW SAVE AREA
.*
.*  BASE REGISTER(S)
.*
.BASE    AIF   ('&BASE(1)' EQ '15').BASE1
         DROP  15                      DROP TEMPORARY BASE
         LR    &BASE(1),15             LOAD FIRST BASE REGISTER
.BASE1   AIF   (N'&BASE LT 2).DSAUSE
         LA    &BASE(N'&BASE),2048
.BASE2   LA    &BASE(&NB+2),2048(&BASE(N'&BASE),&BASE(&NB+1))
&NB      SETA  &NB+1
         AIF   (&NB+1 LT N'&BASE).BASE2
         AGO   .DSAUSE
.DSAUSE  AIF   ('&DSA(1)' EQ '' OR '&DSA(1)' EQ '*').END
         USING &DSA(1),13
         MEXIT
.*
.YSA     BMCERMAC PROLOG,34,DSA/SSA,SSA  EXCLUSIVE OPERANDS, SSA IGNORD
         AGO   .DSA
.YBASE   BMCERMAC PROLOG,110,BASE
         MEXIT
.*
.*  *** OLD VERSIONS COMPATIBILITY ***
.*
.ONAME   AIF   ('&ID' NE '').YNAME
&LABEL   PROLOG BASE=&BASE,ID=&NAME,DSA=&DSA,SSA=&SSA,COPYR=&COPYR,EP=&-
               EP,LEN=&LEN
         MEXIT
.YNAME   BMCERMAC PROLOG,40,NAME
         AGO   .GO1
.OLEN    AIF   ('&SSA' NE '' OR '&DSA(2)' NE '').YLEN
&LABEL   PROLOG BASE=&BASE,ID=&ID,DSA=(&DSA(1),&LEN),SSA=&SSA,COPYR=&CO-
               PYR,EP=&EP
         MEXIT
.YLEN    BMCERMAC PROLOG,40,LEN
         AGO   .GO2
.END     MEND
         SPACE 5
         MACRO
&LABEL   EPILOG  &SA=D,&RC=0,&DROP=,&LTORG=YES
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                         13MAR70-PAHL
.*  PROGRAM EPILOGUE: UNCHAIN SA (+RELEASE IF DYNAMIC) AND RETURN
.*                                                         19JUL73-PAHL
.*  &SA     : 'D'×'S'   TYPE OF SAVE AREA: DYNAMIC×STATIC
.*            CORRESPONDS TO &DSA RESP. &SSA PARAMETER OF MACRO PROLOG
.*  &RC     : (15)×(REG)×ABS.EXPR<4096   RETURN CODE
.*  &DROP   : REG×LIST OF REGS   BASE REGISTER(S) TO BE DROPPED
.*  &LTORG  : 'YES'×'NO'   GENERATE (NO) 'LTORG'
.*
         LCLA  &N
         AIF   ('&SA' EQ '').YSA0
         AIF   ('&SA'(1,1) EQ 'S').STATIC
         AIF   ('&SA'(1,1) NE 'D').YSA1
.*  GENERATE PROPER CNOP FOR ALIGNMENT OF V-CON
.DYNAMIC AIF   ('&RC' EQ '0' OR '&RC(1)' NE '&RC' AND '&RC' NE '(15)').-
               CNOP2
         CNOP  0,4
         AGO   .RCLOAD
.CNOP2   CNOP  2,4
.*  FETCH RC AND CALL EPILOGUE MODULE TO DO THE WORK FOR SA=DYNAMIC
.RCLOAD  ANOP
&LABEL   BMCLA 15,&RC
         BALR  14,0
         DC    X'58E0E006'             L  14,6(,14)
         BR    14
         DC    V($5FCORE)
         AGO   .DROP
.*  STATIC SAVE AREA
.STATIC  ANOP
&LABEL   BMCLA 15,&RC
         L     14,4(,13)               -> HIGH SAVE AREA
         MVC   8(4,14),8(13)           RESTORE OLD LSA POINTER
         LR    13,14
         L     14,12(,13)
         LM    0,12,20(13)
         BR    14
.*   DROP BASE REGISTERS AS SPECIFIED
.DROP    AIF   ('&DROP' EQ 'NO').LTORG                            (OLD)
.DROP1   AIF   (&N GE N'&DROP).LTORG
&N       SETA  &N+1
         DROP  &DROP(&N)
         AGO   .DROP1
.*   REQUEST LITERAL POOL IF SPECIFIED
.LTORG   AIF   ('&LTORG' EQ '' OR '&LTORG' EQ 'NO').MEND
         AIF   ('&LTORG' NE 'YES').YLTORG
         LTORG
         MEXIT
.YSA0    BMCERMAC EPILOG,113,SA,,D
         AGO   .DYNAMIC
.YSA1    BMCERMAC EPILOG,23,SA,&SA,D
         AGO   .DYNAMIC
.YLTORG  BMCERMAC EPILOG,123,LTORG,&LTORG,NO
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   OPENED &DCB,&YESBR,&NOBR
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                         00JAN69-PAHL
.*  INQUIRE OPEN FLAG BIT IN DCB AND BRANCH ON RESULT      09JAN73-PAHL
.*
         AIF   ('&DCB' EQ '').YDCB
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
&LABEL   TM    48+&DCB,X'10'           TEST OPEN FLAG BIT
         AGO   .BRANCH
.DCBREG  ANOP
&LABEL   TM    48&DCB,X'10'            TEST OPEN FLAG BIT
.BRANCH  AIF   ('&YESBR' EQ '').BRANCH2
         BO    &YESBR
.BRANCH2 AIF   ('&NOBR' EQ '').MEND
         BZ    &NOBR
         MEXIT
.YDCB    BMCERMAC OPENED,10,FIRST(DCB),,,&LABEL
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   IOBD  &LBLID=IOB,&AM=EXCP,&DEVD=
.*             COPYRIGHT GMD-I6 1971,1973
.*                                                 01JUN71/15NOV72-PAHL
.*  INPUT/OUTPUT BLOCK (OS/360 I/O SUPERVISOR/DATA MANAGEMENT, REL.19.6
.*  &AM     : CODE SPECIFYING THE ACCESS METHOD
.*            'EXCP' - IOB FOR EXCP
.*  &DEVD   : CODE SPECIFYING THE DEVICE TYPE
.*                    - IOB WITHOUT DEVICE EXTENSION
.*            'DA'    - IOB WITH D.A. DEVICE EXTENSION
.*            'TRMNL' - IOB WITH TERMINAL DEVICE EXTENSION
.*
         LCLB  &DA,&TRMNL
         LCLC  &L
         AIF   ('&LABEL' EQ '').DSECT
&LABEL   DS    0F
&L       SETC  '&LBLID'(1,3)
         AIF   (K'&LBLID LE 3).GO
         BMCERMAC IOBD,146
         AGO   .GO
.DSECT   ANOP
IOB      DSECT
&L       SETC  'IOB'
         AIF   ('&LBLID' EQ 'IOB').GO
         BMCERMAC IOBD,140
.GO      AIF   ('&AM' EQ 'EXCP').SETDEVD
         BMCERMAC IOBD,73,AM,&AM,EXCP
.SETDEVD ANOP
&DA      SETB  ('&DEVD(1)' EQ 'DA')
&TRMNL   SETB  ('&DEVD(1)' EQ 'TRMNL')
         AIF   ('&DEVD' EQ '' OR N'&DEVD EQ 1 AND (&DA OR &TRMNL)).A
         BMCERMAC IOBD,70,DEVD,&DEVD
.*
.A       ANOP
.*
&L.FLAG1 DS    B                   FLAG BYTE 1
&L.FLAG2 DS    B                   FLAG BYTE 2
&L.SENS0 DS    B                   FIRST SENSE BYTE
&L.SENS1 DS    B                   SECOND SENSE BYTE
&L.ECBCC DS    0X                  COMPLETION CODE FOR ECB
&L.ECBPT DS    A                   -> ECB TO BE POSTED UPON COMPLETION
&L.FLAG3 DS    0B                  I/O SPVR ERR RTN FLAG BYTE
&L.CSW   DS    0XL8,B,XL7          LOW ORDER 7 BYTES OF LAST CSW
&L.SIOCC DS    0X                  CONDITION CODE OF 'SIO' FOR THIS I/O
&L.START DS    A                   -> CHANNEL PROGRAM TO BE EXECUTED
         DS    0X                  RESERVED
&L.DCBPT DS    A                   -> DCB ASSOCIATED WITH THIS IOB
&L.RESTR DS    A
&L.INCAM DS    H
&L.ERRCT DS    H                   RETRY COUNT USED BY I/O SPVR ERR RTN
         AIF   (NOT &DA).NOTDA
*   DIRECT-ACCESS STORAGE DEVICES EXTENSION
&L.SEEK  DS    XL8                 D.A. SEEK ADDRESS (MBBCCHHR)
         AGO   .MEND
.NOTDA   AIF   (NOT &TRMNL).MEND
*   TERMINAL DEVICES EXTENSION
&L.UCBX  DS    X                   UCB INDEX
.MEND    SPACE
         MEND
         SPACE 5
         MACRO
&L       XCP   &X,&CP,&EOF=
         LCLC  &EOFLAB
&EOFLAB  SETC  '&EOF(1)'                                       1.5
&L       LA    1,&CP
         ST    1,&X.START              A(CHANNEL PROGRAM) TO IOB
@&SYSNDX EXCP  &X.IOB
         WAIT  ECB=&X.ECB              WAIT FOR COMPLETION OF I/O
         CLI   &X.ECB,X'7F'            OK ?
         BE    #&SYSNDX                YES
         CLI   &X.ECB,X'44'            TRY AGAIN?
         BE    @&SYSNDX                YES
         AIF   ('&EOF' EQ '').OUTERR
         CLI   &X.ECB,X'41'            NO, HARDWARE TROUBLE ?
         BNE   DUMP&SYSNDX             NO, SOMETHING FUNNY
         CLI   &X.CSW+4,X'0D'          YES, EOF READ ?
         BNE   DUMP&SYSNDX             NO, ERROR
         AIF   ('&X' EQ 'OUT' OR '&EOF(2)' EQ '$').END     NL   1.5
         XCP   OUT,WTM                 YES, WRITE AN EOF
         TM    SLBIT,X'01'             TEST IF SL PROCESSING
         BNO   EOF&SYSNDX
         A     3,=F'1'                 SL, ADD # EOF
         C     3,=F'3'                 TEST IF END OF TAPE POSSIBLE
         BL    &EOFLAB                                            1.5
EOF&SYSNDX TM  F1,X'80'                END OF TAPE ?
         BO    END
         LA    Y,1(,Y)                 COUNT FILES                1.4
         CLC   RECORD(3),=CL3'EOV'     EOV READ?                  1.4
         BE    END
         OI    F1,X'80'                NO, SET 'LAST RECORD WAS EOF'
.END     B     &EOFLAB                                            1.5
.OUTERR  ANOP
DUMP&SYSNDX PUT SYSPRINT,&CP.ERR
         CLOSE SYSPRINT
         B     ABEND1
         AIF   ('&X' EQ 'OUT' OR '&CP' NE 'READ' OR '&EOF' EQ '').END1
#&SYSNDX TM    SLBIT,X'01'             TEST IF SL PROCESSING
         BNO   OK&SYSNDX
         C     3,=F'3'                         ''
         BL    OK&SYSNDX
         SR    3,3
OK&SYSNDX NI   F1,X'7F'                RESET EOF BIT
         AGO   .MEND
.END1    ANOP
#&SYSNDX OI   F1,X'00'                DON'T CHANGE EOF BIT
.MEND    MEND
         SPACE 2
         MACRO
&LABEL   VOLTST &X,&BR1,&BR2,&BR3
&LABEL   L     0,&X.CSW+4
         N     0,=X'00007FFF'          GET RES. COUNT            1.4
         BNZ   &X.READ                 >0 OK
         TM    &X.CSW+5,X'40'          =0,INCORRECT LEN?
         BZ    &X.READ
         PUT   SYSPRINT,BUFERR         RECORD LONGER THAN BUFFER
         CLOSE SYSPRINT
         B     ABEND1
         SPACE
&X.READ  L     1,READ+4                GET LEN OF RECORD
         N     1,=X'00007FFF'                                   1.4
         SR    1,0
         CH    1,=H'80'                TEST IF LEN OF RECORD =80
         BNE   &BR1
         CLC   RECORD(4),=CL4'VOL1'    SL?
         BNE   &BR1                    NO SL
         CLC   VOLSERNO,JFCBVOLS       TEST IF EQUAL LABELS
         BE    &BR2                    YES SET SLBIT
         SPACE
         XC   WTORECB(4),WTORECB    CLEAR ECB FOR WTO
         MVC   WTORMES+WTORVOLO(6),VOLSERNO NO WRITE MESSAGE
         MVC   WTORMES+WTORVOLN(6),JFCBVOLS
         WTOR  ,WTORREP,1,WTORECB,MF=(E,WTORMES)
         WAIT  ECB=WTORECB
         SPACE
         CLI   WTORREP,C'U'            UPDATE LABEL
         BE    &BR2
         SPACE
         CLI   WTORREP,C'M'            NEW LABEL
         BNE   &X.CNL                                            1.6
         XCP   &X,UNL                                            1.6
         MVC   MOUNT+4+12(6),VOLSERNO                            1.6
         MVC   MOUNT+4+42(6),JFCBVOLS                            1.6
         WTO   MF=(E,MOUNT)                                      1.6
         B     &BR3                    RESTART FUNCTION
         SPACE
&X.CNL   CLOSE &X.DCB                  CANCEL JOB                1.6
         AIF   ('&X' EQ 'INP').GO
         CLOSE INPDCB                                            1.6
.GO      ANOP
         MVC   TAPENTF1,JFCBVOLS
         PUT   SYSPRINT,TAPENOTF
         CLOSE    SYSPRINT
         B     ABEND1
         MEND
         EJECT
TAPECOPY CSECT
Y        EQU   5                                                 1.4
         PRINT NOGEN
         PROLOG SSA=*,ID='TAPECOPY-27AUG76-SCHEID-1.5',BASE=(12,11)
*
* RJFCB :TEST VOL LABEL
*
*
         LTR   1,1                        TEST IF ANY PARM
         BZ    *+12                       NO
         L     2,0(,1)                    SAVE PARM INFO
         B     *+6
         SR    2,2                        SET TO 'NO PARM'
         OPEN  (SYSPRINT,OUTPUT)
         SPACE
         LTR   2,2
         BZ    RESTART
         CLC   2(2,2),=CL2'CL'            TEST IF WTO
         BNE   RESTART
         XC    WTORECB(4),WTORECB         CLEAR ECB FOR WTO
         WTOR  ,WTORREP,1,WTORECB,MF=(E,WTORCL)
         WAIT  ECB=WTORECB
         CLI   WTORREP,C'U'            TEST IF ALLOWED
         BE    RESTART                 YES
         PUT   SYSPRINT,PARMERR
         CLOSE SYSPRINT
         B     ABEND1
         SPACE
RESTART  RDJFCB INPDCB
         SR    3,3                    CLEAR COUNT FOR EOFS
         SR    Y,Y                    CLEAR FILE COUNT            1.4
         MVI   SLBIT,0                CLEAR SL BIT
         CLI   JFCBNVOL,X'FF'         SCAN # OF FOUND JFCB
         MVI   JFCBLTYP,X'10'         BLP
         BE    ABEND1
         OPEN  (INPDCB,(INPUT,LEAVE)),TYPE=J
         OPENED INPDCB,INOPEN
         PUT   SYSPRINT,INPERR
         CLOSE SYSPRINT                INPUT DCB NOT OPEN
         B     ABEND1
INOPEN   XCP   INP,REW                 REWIND INPUT TAPE
         XCP   INP,READ,EOF=(OPENOUT,$) READ VOL LABEL IF ANY
         VOLTST INP,OPENOUT,OPENOUT0,INOPEN                      1.6
         SPACE 4
OPENOUT0 OI    SLBIT,X'01'             SET SLBIT FOR INPUT
OPENOUT  RDJFCB OUTDCB
         CLI   JFCBNVOL,X'FF'               SCAN FOUND JFCB
         MVI   JFCBLTYP,X'10'               BLP
         BE    ABEND1                       NO, GO TO ABEND
         OPEN  (OUTDCB,(INPUT,LEAVE)),TYPE=J
         OPENED OUTDCB,OUTOPEN
         PUT   SYSPRINT,OUTERR
         CLOSE SYSPRINT                OUTPUT DCB NOT OPEN
         B     ABEND1
OUTOPEN  XCP   OUT,REW
         LTR   2,2                     TEST IF PARM
         BZ    TESTO                   NO
         CLC   2(2,2),=CL2'CL'         TEST IF COPY NL
         BE    LOOP                    YES
TESTO    XCP   OUT,READ,EOF=WRITETP1   READ 1.BLOCK
         SPACE
         VOLTST OUT,WRITETP1,WRITETP,OUTOPEN                     1.6
         SPACE 1
WRITETP  OI    SLBIT,X'02'      SET SL FOR OUTPUT
WRITETP1 TM    SLBIT,X'01'             TEST IF SL INPUT
         BO    WRSL                    YES
         SPACE 1
         XCP   INP,REW
         XCP   OUT,REW
         B     LOOP                    NO LABEL
         SPACE
WRSL     XCP   OUT,REW
         MVC   RECORD(4),=CL4'VOL1'    WRITE VOL LABEL FROM JFCB
         TM    SLBIT,X'02'             TEST IF SL FOR OUTPUT
         BO    VOLSEROK                KEEP READ VOLSER
         MVC   RECORD+4(6),JFCBVOLS    VOL  SER NO
VOLSEROK MVC   WRITE+6(2),=X'0050'     LEN OF RECORD
         XCP   OUT,WRITE
         SPACE
LOOP     XCP   INP,READ,EOF=LOOP       READ ONE RECORD
LOOP2    L     0,INPCSW+4
         N     0,=X'00007FFF'          GET RESIDUAL COUNT FROM CSW  1.4
         BNZ   READOK                  >0, OK
         TM    INPCSW+5,X'40'          =0, INCORRECT LENGTH ?
         BZ    READOK                  NO, OK
         PUT   SYSPRINT,BUFERR         YES, RECORD LONGER THAN BUFFER
         CLOSE SYSPRINT
         B     ABEND1
READOK   L     1,READ+4
         N     1,=X'00007FFF'          GET READ LENGTH FROM CCW     1.4
         SR    1,0
         STH   1,WRITE+6               RECORD LENGTH TO WRITE CCW
         XCP   OUT,WRITE               WRITE RECORD TO OUTPUT TAPE
         B     LOOP                    GO READ NEXT RECORD
         SPACE 1
END      CVD   Y,T8                    PREPARE # OF FILE FOR PRINT  1.4
         ED    MESREC+1(4),T8+6                                     1.4
         MVC   MESREC+27(6),JFCBVOLS   MOVE SER#                    1.4
         PUT   SYSPRINT,MESREC                                      1.4
         SR    6,6                                                  1.4
         TM    SLBIT,X'01'
         BO    *+8
         LA    6,4                                                  1.4
         CLOSE (INPDCB,REREAD,OUTDCB,REREAD)
SYSPCLOS CLOSE SYSPRINT
         FREEPOOL SYSPRINT
         EPILOG SA=S,RC=(6)                                         1.4
         SPACE 2
ABEND1   ABEND 1,DUMP
         EJECT
F1       DC    X'00'                   X'80' = LAST RECORD WAS EOF
SLBIT    DS    X
T8       DS    D
         SPACE 3
INPDCB   DCB   DDNAME=INTAPE,MACRF=E,DEVD=TA,EXLST=EXLIST
EXLIST   DC    0A(0),X'87',AL3(JFCB)             PARMLST FOR JFCB
         SPACE 2
         DS    0F
INPECB   DS    F
INPIOB   IOBD  LBLID=INP,AM=EXCP
         ORG   INPFLAG1                FLAG1/2, SENS0/1, ECBPT
         DC    X'02000000'
         DC    A(INPECB)
         ORG   INPDCBPT                DCBPT
         DC    A(INPDCB)
         ORG   ,
         SPACE 3
OUTDCB   DCB   DDNAME=OUTTAPE,MACRF=E,EXLST=EXLIST
OUTECB   DS    F
OUTIOB   IOBD  LBLID=OUT,AM=EXCP
         ORG   OUTFLAG1                FLAG1/2, SENS0/1, ECBPT
         DC    X'02000000'
         DC    A(OUTECB)
         ORG   OUTDCBPT                DCBPT
         DC    A(OUTDCB)
         ORG   ,
         SPACE 3
REW      CCW   X'07',0,X'20',1
RVOL1    CCW   X'02',VOL1,0,80         READ VOLUME LABEL
WVOL1    CCW   X'01',VOL1,X'20',80     WRITE VOLUME LABEL
READ     CCW   X'02',RECORD,X'20',X'7FFF'   READ ONE RECORD      1.4
WRITE    CCW   X'01',RECORD,X'20',0    WRITE ONE RECORD
UNL      CCW   X'0F',0,X'20',1         REW AND UNLD
WTM      CCW   X'1F',0,X'20',1         WRITE TM
         SPACE 3
VOL1     DS    CL80                    VOLUME LABEL
         SPACE 3
*
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=121,  -
               BLKSIZE=3146
         SPACE
WTORECB  DC    F'0'
         PRINT GEN
WTORMES  WTOR  'TCP001 MOUNTED: XXXOLD, REQUESTED : XXXNEW. REPLY ''U''-
               , ''M'' OR ''C''',MF=L
WTORCL   WTOR  'TCP002 BYPASS LABEL TESTING. REPLY ''U'' OR ''C''',MF=L
         PRINT NOGEN
WTORREP  DS    C
WTORVOLO EQU   12+16
WTORVOLN EQU   12+36
MOUNT    WTO   ' WRONG TAPE XXXOLD MOUNTED - PLEASE MOUNT XXXNEW',ROUTC-
               DE=(5,6),MF=L                                      1.6
ECB      DS    F
TAPENOTF DC    CL121' '
         ORG   TAPENOTF
         DC    C'1JOB CANCELLED BY OPERATOR TAPE '
TAPENTF1 DC    CL6'XXXNEW',C' NOT FOUND.'
         ORG
MESREC   DC    CL121' '
         ORG   MESREC
         DC    C'1',X'40202021',C' FILES COPIED TO TAPE XXXXXX ******'
         ORG
         SPACE
INPERR   DC    CL121' '
         ORG   INPERR
         DC    C'1INPUT DCB COULD NOT BE OPENED'
         ORG
OUTERR   DC    CL121' '
         ORG   OUTERR
         DC    C'1OUTPUT DCB COULD NOT BE OPENED'
         ORG
BUFERR   DC    CL121' '
         ORG   BUFERR
         DC    C'1RECORD READ LONGER THAN BUFFER'
         ORG
REWERR   DC    CL121' '
         ORG   REWERR
         DC    C'1NOT POSSIBLE TO REWIND TAPE'
         ORG
RVOL1ERR DC    CL121' '
         ORG   RVOL1ERR
         DC    C'1READING VOLUME LABEL UNSUCCESSFUL'
         ORG
WVOL1ERR DC    CL121' '
         ORG   WVOL1ERR
         DC    C'1WRITING VOLUME LABEL UNSUCCESSFUL'
         ORG
READERR  DC    CL121' '
         ORG   READERR
         DC    C'1READING RECORD FROM TAPE UNSUCCESSFUL'
         ORG
WRITEERR DC    CL121' '
         ORG   WRITEERR
         DC    C'1WRITING RECORD TO TAPE UNSUCCESSFUL'
         ORG
UNLERR   DC    CL121' '
         ORG   UNLERR
         DC    C'1TAPE REWIND AND UNLOAD NOT SUCCESSFUL'
         ORG
WTMERR   DC    CL121' '
         ORG   WTMERR
         DC    C'1TAPE MARK COULD BE WRITTEN'
         ORG
PARMERR  DC    CL121' '
         ORG   PARMERR
         DC    C'1BYPASS LABEL TESTING NOT ALLOWED'
         ORG
JFCB     JFCBD
*
RECORD   DS    CL(X'7FFF')             I/O BUFFER FOR ONE RECORD  1.4
         ORG   RECORD+4
VOLSERNO DS    CL6
         ORG
*
         DCBD  DSORG=BS,DEVD=TA
         END   TAPECOPY
