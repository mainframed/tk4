./  ADD  NAME=X001520
X001520  TITLE 'PROGRAM TO SQUISH A DISK VOLUME'
         SPACE
*        REGION SIZE
         SPACE
*              512K FOR 3350 SQUISH
         SPACE 2
*        DDNAMES
         SPACE
*              SYSIN     -  INPUT FOR DSNAMES TO BE PUT NEXT TO THE
*                           VTOC
         SPACE
*              SYSPRINT  -  OUTPUT FOR STATISTICS
         SPACE
*              SYSUT1    -  INPUT VOLUME TO BE COPIED
         SPACE
*              SYSUT2    -  TARGET VOLUME
         SPACE 2
*        FORMAT OF PREFERED DSNAMES OF SYSIN DATA SET
         SPACE
*              CC 1      -  PRIORITY  -  1 - 7 WHERE:
*                              7  -  IS THE HIGHEST PRIORITY
*                              1 -   IS THE LOWEST PRIORITY
*                              BLANK DEFAULTS TO PRIORITY 1
*
*              CC 2 - 45 -  DSNAME OF PRIORITY DATA SET
*
*         FORMAT OF EXCLUDE CARD :
*                   XDSN      --->  'DSN' WILL NOT BE COPIED
*                   ODSN      --->   ONLY THAT 'DSN' WILL BE COPIED
*              NOTE:  45 CARDS MAX WITH 1 DSN PER CARD
         SPACE 2
*        DEVICE SUPPORT
         SPACE
*              3380
*              3350
*              3330,3330-1
*              2314
*              2305-1,2305-2
         SPACE 2
*        DATASET SUPPORT
         SPACE
*              VSAM
*              ISAM
*              UNMOVEABLE DATASETS
         SPACE 2
*        ORDER OF COPY
         SPACE
*              VSAM, ISAM, UNMOVEABLE DATASETS
*              SYSCATLG
*              PRIORITY DATASETS -  PRIORITY 7 THROUGH PRIORITY 1
*              CYLINDER ALLOCATED DATASETS
*              TRACK ALLOCATED DATASETS
         SPACE 2
*        ORDER OF OUTPUT DISK IF NO PRTY CARD SPECIFIED
*
*              THE OUTPUT DISK WILL HAVE THE SAME ORDER AS THE
*              INPUT DISK !!!
   SPACE 2
*        ORDER OF OUTPUT DISK IF PRTY CARD SPECIFIED
         SPACE
*              UNMOVEABLE DATASETS WILL BE PLACED WHERE THEY WERE
         SPACE
*              SYSCATLG DATASET WILL BE PLACED BELOW THE VTOC
         SPACE
*              PRIORITY DATASETS WILL BE PLACED IN ORDER BELOW SYSCTLG
         SPACE
*              NON-PRIORITY DATASETS WILL BE ALLOCATED FROM THE TOP OF
*              THE OUTPUT VOLUME
         SPACE
*              NOTE:  THERE MUST BE ENOUGH SPACE BELOW THE VTOC FOR THE
*                    SYSCTLG AND PRIORITY DATASETS OR SQUISH WILL ABEND
         SPACE
*              NOTE:  THE POSITION AND SIZE OF THE OUTPUT VTOC IS
*                     DETERMINED BY THE INPUT VOLUME.  I.E. THE OUTPUT
*                     VTOC IS IN THE SAME PLACE AND THE SAME SIZE AS IT
*                     WAS ON THE INPUT VOLUME BEFORE THE MOVE.
*
*              NOTE:  IF YOU HAPPEN TO COPY SYS1.LOGREC, SQUISH WILL
* LINK TO IFCDIP00 TO CLEAR THE DATASET.
*
*
*
*
*  PARAMETER :
*              IF YOU SPECIFY 'CSYS' ALL SYS-DSN WILL BE COPIED
*              ALSO.
*              IF YOU SPECIFY MERGE, THE DATASETS WILL BE MERGED
*              ON THE TARGET VOLUME.
**             IF YOU SPECIFY 'COMP',THE DATASETS WILL BE COMPACTED,
**             THAT MEANS IF MORE THAN ONE EXTENT EXISTS ON THE INPUT
**             DISK, THEY WILL BE COMPACTED TO ONE ON THE TARGET
**             VOLUME.
*              IF YOU LEAVE THE PARM BLANK NO SYS DSN WILL BE
*              COPIED.
         TITLE 'PGM TO COPY A DISK VOLUME-MVS OR SINGLE DATASETS'
         EJECT
X001520 INSQUISH
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
R10      EQU   10                                             WMT 12/75
R11      EQU   11                                             WMT 12/75
R12      EQU   12                                             WMT 12/75
R13      EQU   13                                             WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
R14      EQU   14
R15      EQU   15
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
RF       EQU   15                                             WMT 12/75
         DROP  15
*
*        ORIGINALLY WRITTEN BY KARL BARHARDT (LOC-CB)
*        THIS VERSION REVISED FOR MVS REL 3 BY
*        B. A. RADD
*        SECURITY PACIFIC NATIONAL BANK (2-98)
*        611 NORTH BRAND BLVD
*        GLENDALE, CALIFORNIA 91203
*        (213) 956-3027
*
*        THIS PROGRAM WAS CORRECTED AND EXPANDED BY
*        C.HEIDEKRUEGER AND A.BIMBOES OF SWISS BANK CORPORATION
*        IN  BASEL, ENGELGASSE 12.  TEL 0041-61-203122
*        IT IS NOW A VERY HELPFULL TOOL FOR THE RECOVERY
*        OF OUR DATA BASES WHICH RESIDE ON 3350.
*
*        ALL OUR MODIFICATIONS ARE HIGHLIGHTED WITH  *** SBV
*
*        THIS VERSION WAS FINISHED AT 20. OF MAR. 80 !
*        (THANK GOODNESS)
*
*
START    EQU   *
         SAVE  (14,R12)
*                                                             WMT 12/75
*        SET UP ADDRESSABILITY                                WMT 12/75
*                                                             WMT 12/75
         USING X001520,RF                                     WMT 12/75
         BALR  RC,0               GET BASE ADDR.             WMT 04/76
         USING *,RC,R7            SET UP ADDRESSING.         WMT 04/76
         LA    R7,4095(RC)
         LA    R7,1(R7)
         DROP RF                  DROP 15                     WMT 12/75
         LR    R2,RD              SAVE R13                    WMT 12/75
         LA    RD,SAVE            SET UP SAVE AREA           WMT 04/76
         USING SAVE,RD                                        WMT 12/75
BEGINR12 ST    R2,4(0,RD)         SET BACK CHAIN.             WMT 12/75
         ST    RD,8(0,R2)         SET FORWARD CHAIN.          WMT 12/75
         MVI   FMT2,255                USE FMT2 AS PARM FLAG
         L     R2,0(R1)                GET PARM ADDRESS
         SPACE
         LA    R0,REC          LENGTH FOR GETMAIN
         GETMAIN R,LV=(0)      GET CORE FOR RECORD        *** SBV
         ST    R1,AREC54       SAVE REC ADDR.
         LR    R3,R1           SAVE ADDR.                 *** SBV
         XC    0(REC,R1),0(R1)  CLEAR REC.                 *** SBV
         USING SMFREC,R3
         MVI   RECTYPE,RECT      SET TYPE                 *** SBV
         MVI   RECSTYPE,SUBTYPE  SAVE SUBTYPE             *** SBV
         MVI   RECHEAD,RECVS2    MVS ID                   *** SBV
         LA    R0,REC            GET LENGTH               *** SBV
         STH   R0,RECL           STORE IT INTO REC.       *** SBV
        SPACE
         L     R1,PSAAOLD-FLC(0) GET CURRENT ASCB         *** SBV
         ICM   R14,15,ASCBJBNI-ASCBEGIN(R1) JOB   PTR    *** SBV
         BNZ   JOBFND            FOUND                    *** SBV
         ICM   R14,15,ASCBJBNS-ASCBEGIN(R1)
JOBFND   EQU   *
         MVC   RECJOBNM,0(R14)   STORE JOBNAME INTO REC   *** SBV
         SPACE
         TIME
         STCM  R0,15,RECSTIME  SAVE START TIME AND DATE   *** SBV
         STCM  R1,15,RECSDATE  SAVE START TIME AND DATE   *** SBV
         CLC   0(2,R2),=H'4'           SEE IF 4 BYTES LONG
         BNE   NOPARM                  IF NOT, THEN FORGET IT
         SPACE
         CLC   2(4,R2),=C'COMP'      COMPACT SPECIFIED ?    *** SBV
         BE    COMPR                 YES                    *** SBV
         SPACE
         CLC   2(4,R2),=C'CSYS'        DSYS MEANS DON'T COPY TEMP DSS
         BNE   NOPARM                  IF NOT, THEN FORGET IT
         MVI   FMT2,0                  RESET FLAG
         OI    RECMODE,RECCSYS
NOPARM   EQU   *
         CLC   0(2,R2),=H'5'      SEE IF 5 BYTES LONG.        WMT 12/75
         BNE   NOPARM1            IF NOT FORGET IT.           WMT 12/75
         CLC   2(5,R2),=C'MERGE'  SEE IF MERGE.               WMT 12/75
         BNE   NOPARM1            IF NOT FORGET IT.           WMT 12/75
         MVI   MRGSW,C'M'         SET MERGE SWITCH.           WMT 12/75
         OI    RECMODE,RECMERG
         SPACE
         B     NOPARM0            CONTINUE                    *** SBV
COMPR    EQU   *                                              *** SBV
         MVI   MRGSW,C'C'         SET COMPACT SWITCH          *** SBV
         OI    RECMODE,RECCOMP
NOPARM0  EQU   *                                              *** SBV
         OI    CARDSW,X'80'       LIKE PRTY SPECIFIED         *** SBV
         SPACE 2
NOPARM1  DS    0H                                             WMT 12/75
         CLI   MRGSW,C'M'         WAS 'MERGE' ?               *** SBV
         BE    NOPARM2            YES                         *** SBV
         SPACE 2
         WTOR  'SQUISH --> PARM UNEQUAL MERGE,REPLY OK OR N', *** SBV  X
               REPL,2,INECB,ROUTCDE=1                         *** SBV
         SPACE 2
         WAIT  1,ECB=INECB                                    *** SBV
         SPACE 2
         MVI   INECB,0                                        *** SBV
         CLI   REPL,C'N'                                      *** SBV
         BE    NOCLOS             CANCEL                      *** SBV
         CLC   =C'OK',REPL        OK ?                        *** SBV
         BNE   NOPARM1            INVALID REPLY               *** SBV
NOPARM2  EQU   *                                              *** SBV
         SPACE 2
         CALL  QX001010,(SYSIN+40),VL   FIND DDCARD        *** SBV
         LTR   R15,R15
         BZ    OPSYSIN                  DDCARD FOUND --> OPEN *** SBV
         OI    RECMODE,RECCOPY
    SPACE 2
         OPEN  (SYSPRINT,(OUTPUT))      *** SBV
         B     CONTOPEN                 PRINT HEADER *** SBV
         SPACE 2
OPSYSIN  EQU   *
         OPEN  (SYSIN,,SYSPRINT,(OUTPUT)) *** SBV
         TM    SYSIN+48,X'10'        OPEN OK ? *** SBV
         BNO   CONTOPEN              NO *** SBV
     SPACE 2
         PUT   SYSPRINT,PRTAREA *** SBV
         MVI   PRTAREA,64 *** SBV
         MVC   PRTAREA+1(80),PRTAREA *** SBV
         SPACE 2
         GETMAIN R,LV=2048 *** SBV
         SPACE
         ST    R1,DSNTABA *** SBV
         LR    R2,R1 *** SBV
  SPACE
READCRD  EQU   * *** SBV
         GET   SYSIN *** SBV
         SPACE
         BAL   R14,PRINT *** SBV
         CLI   0(R1),C'X'            EXCLUDE ? *** SBV
         BE    EXCLUDE               YES *** SBV
         CLI   0(R1),C'O'            ONLY THAT DS ?       *** SBV
         BE    ONLY                  YES MOVE             *** SBV
         SPACE
         CLI   0(R1),X'40'           DEFAULT PRTY ?       *** SBV
         BE    NOPRTY                YES ACCEPT THIS INPUT *** SBV
         TM    0(R1),X'F0'           IS IT NUMERIC ?       *** SBV
         BNO   NOTNUM                NO  ERROR             *** SBV
NOPRTY   EQU   *
   SPACE
         OI    CARDSW,X'80'          INDICATE INPUT CARD *** SBV
         MVC   0(45,R2),0(R1)        MOVE DSN *** SBV
         NI    0(R2),X'07' *** SBV
         CLI   0(R2),X'00' *** SBV
         BNE   READCRD1 *** SBV
         OI    0(R2),X'01'     SET DEFAULT *** SBV
READCRD1 EQU   * *** SBV
         LA    R2,45(R2)                                  *** SBV
         OI    RECMODE,RECPRTY
         B     READCRD                                    *** SBV
         SPACE 2
ONLY     EQU   *                                          *** SBV
         LR    R4,R1                       A(RECORD)      *** SBV
         ICM   R14,15,ONLTAB               ONLY CARD ?    *** SBV
         BNZ   ONLYEX                      WAS ALREADY ONE *** SBV
     SPACE 1
         GETMAIN R,LV=2204                                 *** SBV
     SPACE 1
         ST    R1,ONLTAB                   SAVE ADDR.       *** SBV
         ST    R1,ONLTABEX                                  *** SBV
ONLYEX   L     R14,ONLTABEX                GET REAL ADDR.   *** SBV
         MVC   0(44,R14),1(R4)             ONLY THAT ONE ?  *** SV
         LA    R14,44(R14)                 NEXT ENTRY       *** SBV
         ST    R14,ONLTABEX                SAVE FOR NEXT    *** SBV
         OI    RECMODE,RECONLY
         B     READCRD                     READ NEXT RECORD *** SBV
   SPACE 2
NOTNUM   EQU   *                                            *** SBV
         LA    R1,ERRCON                   LOAD ERROR TEXT  *** SBV
         BAL   R14,PRINT                   AND PRINT        *** SBV
         B     READCRD                     READ NEXT CARD   *** SBV
   SPACE 2
         DC   F'0'                                           *** SBV
PRINT    ST   R14,*-4                                        *** SBV
         LR   R4,R1                                          *** SBV
         MVC  PRTAREA+1(80),0(R4)                            *** SBV
         SPACE
         PUT   SYSPRINT,PRTAREA                              *** SBV
         SPACE
         MVI   PRTAREA+R1,64                                 *** SBV
         MVC   PRTAREA+1(80),PRTAREA                         *** SBV
         LR    R1,R4                                         *** SBV
         L     R14,PRINT-4                                   *** SBV
         BR    R14                                           *** SBV
         SPACE 2
EXCLUDE  ICM   R14,15,XTAB                                   *** SBV
         LR    R4,R1                                         *** SBV
         BNZ   EXC1                                          *** SBV
         SPACE 2
         GETMAIN R,LV=2204                                   *** SBV
         ST    R1,EXTAB                                      *** SBV
         ST    R1,XTAB                                       *** SBV
         SPACE 2
EXC1     L     R14,EXTAB                                     *** SBV
         MVC   0(44,R14),1(R4)                               *** SBV
         LA    R14,44(R14)                                   *** SBV
         ST    R14,EXTAB                                     *** SBV
         OI    RECMODE,RECEXCL
         B     READCRD                                       *** SBV
    SPACE
DATEV    DC    AL2(4800)            GETMAIN SIZE             *** SBV
DATEVL   DC    AL2((4800/12)+1)     NUMBER ELEMENTS          *** SBV
LK       MVC   0(4,R2),=F'-1'                                *** SBV
         ICM   R1,15,EXTAB                                   *** SBV
         BZ    EXC2                                          *** SBV
         MVC   0(4,R1),=F'-1'                                *** SBV
EXC2     EQU   *                                             *** SBV
    SPACE 2
         ICM   R1,15,ONLTABEX           WAS ONLY CARD ?  *** SBV
         BZ    EXC5                     NO               *** SBV
         MVC   0(4,R1),=F'-1'           SET END          *** SBV
EXC5     EQU   *
         CLOSE SYSIN                                      *** SBV
CONTOPEN EQU   *                                          *** SBV
    SPACE 2
         LH    R0,DATEV
         GETMAIN R,LV=(0)                                 *** SBV
         ST    R1,PFMT5AD           SAVE ADDR             *** SBV
         SPACE 2
         LR    R0,R1                                      *** SBV
         LR    R14,R0                                     *** SBV
         LH    R1,DATEV                                   *** SBV
         SR    R15,R15                                    *** SBV
         MVCL  R0,R14                                     *** SBV
         SPACE 2
         CALL  QX001010,(INDISK+40,ENTADR),VL GET TIOT ENTRY *** SBV
         LTR   R15,R15
         BNZ   DUMP
         L     R15,ENTADR                   GET DD-ENTRY *** SBV
         SR    R5,R5
         ICM   R5,3,18(R15)                 UCB ADDR.    *** SBV
         SPACE 2
         XC    IXSW,IXSW            CLEAR INDEX SWITCH
         CVAFTST UCB=(R5)           TEST IF IXVTOC
         SPACE 2
         CH    R15,=H'8'            INPUT DISK INDEXED ?
         BE    MSGCVAFI             YES
         CH    R15,=H'16'           DASD ?
         BNE   NOINDEXI             OK
MSGCVAFI EQU   *
         SPACE 2
         WTO   ' SQUISH -- > NOTE :  FROM DISK HAS INDEXED VTOC'
         OI    IXSW,IX              INDICATE SQUISH TERMINATE
         SPACE 2
NOINDEXI DS    0H
         SPACE 2
         CALL  QX001010,(OUTDISK+40,ENTADR),VL GET TIOT ENTRY *** SBV
         LTR   R15,R15
         BNZ   DUMP
         L     R15,ENTADR                   GET DD-ENTRY *** SBV
         SR    R4,R4
         ICM   R4,3,18(R15)                 UCB ADDR.    *** SBV
         SPACE 2
         CVAFTST UCB=(R4)           TEST IF IXVTOC
         SPACE 2
         CH    R15,=H'8'            INPUT DISK INDEXED ?
         BE    MSGCVAFO             YES
         CH    R15,=H'16'           DASD ?
         BNE   NOINDEXO             OK
MSGCVAFO EQU   *
         SPACE 2
         OI    IXSW,IX              INDICATE SQUISH TERMINATE
         WTO   ' SQUISH -- > NOTE :  TO DISK HAS INDEXED VTOC'
NOINDEXO DS    0H
         TM    IXSW,IX              ANY DISK INDEXED ?
         BO    CLOSESYS             YES,TERMINATE
         SPACE 2
         MVC   RECFVOL,28(R5)          SAVE IT IN RECORD     *** SBV
         MVC   RECTVOL,28(R4)          SAVE IT IN RECORD     *** SBV
         MVC   RECNVOL,28(R4)          SAVE IT IN CASE       *** SBV
         DROP  R3
         MVC   OLDVOL,28(R5)           MOVE VOL SER #  *SDS*
         MVC   TAGVOL,28(R4)           MOVE VOL SER #  *SDS*
         MVC   VOLSER,TAGVOL           MOVE VOL SER #        *** SBV
         MVC   VOLIDID,16(R4)          MOVE DEVICE ID        *** SBV
         MVC   WTOR+48(6),28(R5)       MOVE VOL SER #  *SDS*
         CLC   18(2,4),18(R5) SEE IF UCBS THE SAME   *SDS*
         BE    UCBSMTCH        IF SO, GOODIE
         CLI   19(R4),X'0D'       IS IT A MOD 11 DRIVE.       WMT 12/75
         BE    UCBSMTCH           YES ALLOW IT TO GO.         WMT 12/75
DUMP     EQU   *
         ABEND 1,DUMP         OTHERWISE BLAST OUT
         SPACE 2
UCBSMTCH EQU   *
         CLI   18(R4),X'20'    MAKE SURE DIRECT ACCESS
         BNE   DUMP            IF NOT, THEN FORGET IT
 SPACE
CLI38R4  EQU   *
         TM    17(R4),SHARED      SHARED DEVICE ?             *** SBV
         BNO   NSHAR1             NO                          *** SBV
         CLI   38(R4),2           TWO ALLOWD ?                *** SBV
         BNH   ONLYONE            YES                         *** SBV
CLIMRGSW CLI   MRGSW,C'M'       IS IT MERGE ?                  *** SBV
         BE    ONLYONE          YES COULD BE MORE THAN ONE USER ***SBV
   SPACE 2
         WTOR  'SQUISH --> MORE THAN 1 USER ON TARGET VOL, ENTER -RETRY-
               - OR -NO-',REPL,6,INECB,ROUTCDE=1               *** SBV
     SPACE 2
         WAIT  1,ECB=INECB
  SPACE 2
         MVI   INECB,0            CLEAR ECB
         OC    REPL,=CL6' '       UPPER CASE
         CLC   REPL(L'RETRY),RETRY WAS IT RETRY ?
         BE    CLI38R4             TRY AGAIN
         CLC   REPL(L'IGNOR),IGNOR WAS IT IGNORE ?
         BE    CLIWTO              GIVE MSG
         B     CLOSESYS            NO TERMINATE
   SPACE
IGNOR    DC    C'IGNORE'
CANC     DC    C'CANCEL'
NSHAR1   CLI   38(R4),1         MORE THAN ONE USER ?           *** SBV
         BNH   ONLYONE          NO --> THATS OK                *** SBV
         B     CLIMRGSW
         SPACE 2
CLIWTO   WTO   'SQUISH --> NOTE YOU HAVE IGNORED OTHER USERS',   *******
               ROUTCDE=1
         SPACE 2
ONLYONE  EQU   *
         SPACE 2
         TM    34(R4),UCBPRV          TARGET VOL PRIVATE ?
         BO    PRIVATOK               YES OK
         CLI   MRGSW,C'M'             NO BUT IS IT MERGE ?
         BE    PRIVATOK               YES
         SPACE
         MVI   INECB,0
         WTOR  'SQUISH--> TARGET VOL NOT PRIVATE MOUNTED, ENTER -RETRY O
               OR CANCEL -',REPL,6,INECB,ROUTCDE=1
         SPACE
         WAIT  1,ECB=INECB
         SPACE
         OC    REPL,=CL6' '
         CLC   REPL(L'RETRY),RETRY      WAS RETRY ?
         BE    ONLYONE                  TRY AGAIN
         CLC   REPL(L'CANC),CANC        WAS CANCEL ?
         BE    CLOSESYS
         B     ONLYONE                  REISSUE WTOR
  SPACE
PRIVATOK EQU   *
         TM    17(R4),SHARED       DEVICE SHARED ?         *** SBV
         BNO   NOTSHR              NO --> ONLY ENQ         *** SBV
        SPACE
         RESERVE MF=(E,ENQL1)      SET DEVICE RESERVED     *** SBV
       SPACE 2
         WTO   'SQUISH --> NOTE : VTOC OF TAGVOL IS RESERVED',         X
               ROUTCDE=1
         B     ASKOP                                       *** SBV
       SPACE 2
NOTSHR   ENQ   MF=(E,ENQL1)                            *** SBV
         SPACE
         WTO   'SQUISH --> NOTE : VTOC OF TAGVOL IS ENQUEUED',         X
               ROUTCDE=1
         SPACE
ASKOP    EQU   *
         LOAD  EP=QX01530
         ST    R0,AQX01530            SAVE ENTRY
    SPACE 2
         MVI   INECB,0         CLEAR ECB
         SPACE 2
         MVC   UNITXXX+38(3),13(R5)     FROM UNIT
         MVC   UNITXXX+50(3),13(R4)     TO UNIT
UNITXXX  WTO   'SQUISH --> YOU COPY FROM UNIT XXX TO UNIT XXX',        X
               ROUTCDE=1
         SPACE 2
         WTOR  MF=(E,WTOR)     SAK HIM
         SPACE 2
         WAIT  ECB=INECB       WAIT FOR ANSWER
         SPACE 2
         OC    REPL,=CL6' '    UP CASE REPLY    *SDS*
         CLC   REPL,TAGVOL     DID HE GIVE SAME VOL *SDS*
         BE    OPSDYES         GOODIE
         CLI   REPL,C'N'       DID HE SAY NO
         BNE   ASKOP           IF NOT, THEN ASK HIM AGAIN
 SPACE
         LA    R1,BDOPMES      GET ADDRESS OF MESSAGE
         L     RF,=V(QX01527)     CALL PRINT ROUTINE.        WMT 04/76
         BALR RB,RF               CALL QX01527.               WMT 04/76
   SPACE
         DEQ   MF=(E,ENQL1)
CLOSESYS EQU   *
         CLOSE SYSPRINT                                    *** SBV
 SPACE
         CLI   DSNTABA,X'FF'      WAS OPEN FOR SYSIN ?     *** SBV
         BE    NOCLOS             NO  DONT CLOSE           *** SBV
         SPACE
         CLOSE SYSIN
   SPACE
NOCLOS   EQU   *
         SPACE 2
  SPACE
         L     R13,4(R13)
         RETURN (14,R12),RC=8  RETURN WITH BAD RETURN CODE
SHARED   EQU   X'20'               DEVICE SHARED            *** SBV
UCBPRV   EQU   X'10'               DEVICE PRIVATE           *** SBV
         LTORG
 SPACE
OPSDYES  DS    0H                                             WMT 12/75
 EJECT
         LA    R14,VTOCIN             GET AREA         *** SBV
         LA    R1,X'F4'               FORMAT 4         *** SBV
         SLL   R1,24                  INTO HOB         *** SBV
         OR    R1,R14                 LOAD ADDR        *** SBV
         LA    R0,OLDVOL              VOLSER           *** SBV
         L     R15,AQX01530           GET VTOC         *** SBV
         BALR  R14,R15                LINK TO QX01530  *** SBV
         LTR   R15,R15                RC=0             *** SBV
         BZ    VTOCOK                 YES              *** SBV
         SPACE 2
         WTO   'SQUISH --> NO VTOC ON INPUT VOL',ROUTCDE=1
         B     CRASH
VTOCOK   EQU   *
    SPACE 2
         SR    R5,R5           CLEAR 5
         IC    R5,19(R4)      GET LAST PART OD DEVICE TYPE
*        CLI   17(R4),X'01'       IS IT MOD 11.               GJG 10/76
*        BE    NOTMOD11           NO DON'T CHANGE.            GJG 10/76
*        IC    R5,=X'0D'          YES ALTER DEVICE TYPE.      GJG 10/76
* TMOD11 DS    0H                                             GJG 10/76
         SLL   R5,1           MULT BY 2
         LH    R5,DACYLS(R5)   GET # OF CYLS
         STH   R5,INCYLS
         STH   R5,OUTCYLS
         MH    R5,TRKPCYL      GET TOTAL # OF TRACKS
         STH   R5,#TRKS        SAVE # OF TRACKS
         ST    R5,ALLTRKS      SAVE NO. OF TRACKS              *** SBV
         LA    R0,1(R5)        +1                              *** SBV
         ST    R0,LFREE        AND SAVE IT                     *** SBV
         MVC   ABSAD,VTOCIN+45 GET TTR
         SR    0,0             OF LAST FMT 1
         MVC   VSAMSAVE,VTOCIN+76  SAVE VSAM FMT4 INFO ** BAR **
         SPACE 2
 EJECT
         MVC   INDKAD,VTOCIN+45        MOVE LAST DS ADDRESS
         LH    R5,INDKAD       GET CYL #
         MH    R5,TRKPCYL      GET TRACK #
         AH    R5,INDKAD+2     NOW HAVE REL TRK #
         MVC   OTDKAD,VTOCIN+107       MOVE EXTENT START
         LH    R6,OTDKAD       GET CYL # OF START
         MH    R6,TRKPCYL      GET TRACK #
         AH    R6,OTDKAD+2     NOW HAVE REL TRK # OF START
         LA    R5,1(R5)       UP 1 FOR SUBTRACT
         SR    R5,R6            5 HAS # OF TRACKS
         SR    R6,R6            CLEAR 6
         IC    R6,VTOCIN+74    GET DSCBS PER TACK
         MR    R4,R6            GET # OF DSCBS IN 5
         MH    R5,=H'12'       MULT 5 BY 12(TTR+FLAG+CCHHR)  *** SBV
         SPACE 2
         GETMAIN R,LV=(R5)     GET CORE FOR DSCB LIST
         LA    R1,0(R1)        CLEAR HIGH BYTE
         S     R1,=F'12'       REDUCE BY 12                   *** SBV
         ST    R1,DSLSTAD      SAVE ADDRESS-4
 EJECT
         L     R2,DSLSTAD      POINT TO DSLST
VTOCRD2  EQU   *
         LA    R2,12(R2)        UP TO BEGINNING         **** SBV
         LH    R1,NRDSNIN       GET NO. DATASETS (IN)   *** SBV
         LA    R1,1(R1)         +1                      *** SBV
         STH   R1,NRDSNIN       SAVE IT                 *** SBV
         SPACE
VTOCRD   EQU   *
         TM    LASTF1,X'80'     LAST ENTRY ?            *** SBV
         BO    LFM1            IF SO, THEN START WORK
         SPACE 2
         LA    R1,FMT1          GET AREA ADDR.          *** SBV
         SR    R0,R0                                    *** SBV
         L     R15,AQX01530           GET VTOC         *** SBV
         BALR  R14,R15                LINK TO QX01530  *** SBV
         SPACE 2
         LTR   R15,R15         RC=0 ?                   *** SBV
         BZ    F1OK            NO -->   OK              *** SBV
         CH    R15,=H'4'       HIGHER ?                 *** SBV
         BH    CRASH           YES
         OI    LASTF1,X'80'    INDICATE ALL READ        *** SBV
F1OK     EQU   *                                        *** SBV
         XC    0(12,R2),0(R2)  CLEAR JUST IN CASE       *** SBV
         ST    R0,0(R2)        SAVE FOR FUTURE
         MVC   4(5,R2),0(R1)   SAVE CCHHR               *** SBV
         CLI   FMT1+44,X'F1'   SEE IF TYPE 1
         BNE   VTOCRD          IF NOT, READ AGAIN
         ICM   R14,15,VSAMLIST ALLREADY ALLOCATED ?     *** SBV
         BNZ   SETVSAM         YES                      *** SBV
         LA    R1,SVSAMLN      GET LENGTH OF ELEMENT    *** SBV
         LH    R15,MAXVSAM     GET MAX NUMBER OF DSN    *** SBV
         MR    R14,R1          AREA LENGTH              *** SBV
         ST    R15,VSAMLISL    SAVE LENGTH              *** SBV
         LR    R0,R15                                   *** SBV
    SPACE 2
         GETMAIN R,LV=(0)      GET STORAGE              *** SBV
         ST    R1,VSAMLIST     SAVE FOR LATER           *** SBV
         SPACE 2
SETVSAM  EQU   *                                        *** SBV
         TM    FMT1+83,8       VSAM ?                   *** SBV
         BZ    NOVSAM          NO                       *** SBV
         LH    R1,VSAMCNT      YES                      *** SBV
         LR    R0,R1                                    *** SBV
         AH    R0,=H'1'        ADD 1                    *** SBV
         STH   R0,VSAMCNT      SAVE IT                  *** SBV
         CH    R0,MAXVSAM      ENOUGH SPACE ?           *** SBV
         BNH   ENOUGH          YES                      *** SBV
         SPACE 2
         WTO   'SQUISH --> TOO MANY VSAM DATASETS ON VOLUME', *** SBV  X
               ROUTCDE=1
         B     DUMP
         SPACE 2                                        *** SBV
ENOUGH   EQU   *                                        *** SBV
         LA    R15,SVSAMLN      LENGTH OF ELEMENT       *** SBV
         MR    R0,R15           FIND CORRECT POS.       *** SBV
         L     R15,VSAMLIST     START OF AREA           *** SBV
         LA    R15,0(R1,R15)    CORRECT SPACE           *** SBV
       SPACE
         USING SVSAM,R15        ESTABLISH ADDR.         *** SBV
         MVC   SVSAMDSN,FMT1    COPY DSN                *** SBV
         MVC   SVSAMCCH,4(R2)   SAVE CCHHR              *** SBV
         DROP  R15
NOVSAM   EQU   *
   SPACE 2
         CLI   FMT2,255                TEST FOR TEMP DSNAME?
         BNE   NOTMPTST                IF NOT, THEN COPY IT
         SPACE 2
         CALL  QX01524,(FMT1)          CALL THE ROUTINE
         LTR   R15,R15                  SEE IF WE COPY IT
         BNZ   VTOCRD                  IF NON-ZERO RETURN, DON'T COPY
         SPACE 2
NOTMPTST EQU  *
         MVI   3(R2),0         CLEAR ENDING BYTE
         ICM   R14,15,XTAB                                 *** SBV
         BZ    EXC4                                        *** SBV
         SPACE
EXC3     EQU   *                                              *** SBV
         CLI   0(R14),X'FF'                                   *** SBV
         BE    EXC4                                           *** SBV
         CLC   0(44,R14),FMT1                                 *** SBV
         BE    VTOCRD                                         *** SBV
         LA    R14,44(R14)                                    *** SBV
         B     EXC3                                           *** SBV
         SPACE
EXC4     CLI   DSNTABA,X'FF'                                  *** SBV
         BE    NTCTC022                                       *** SBV
         L     R1,DSNTABA                                     *** SBV
         B     LOOKDSN1                                       *** SBV
         SPACE
LOOKDSN  CLC   1(44,R1),FMT1                                  *** SBV
         BE    FNDNAME                                        *** SBV
         LA    R1,45(R1)                                      *** SBV
LOOKDSN1 CLC   0(4,R1),=F'-1'                                 *** SBV
         BE    NTCTC022                                       *** SBV
         B     LOOKDSN                                        *** SBV
         SPACE
FNDNAME  EQU   *                                              *** SBV
         OC    3(1,R2),0(R1)
NTCTC022 EQU   *
  SPACE
         ICM   R14,15,ONLTAB           WAS ONLY CARD ?    *** SBV
         BZ    NOONLY                  NO  FORGET IT      *** SBV
EXC6     CLI   0(R14),X'FF'            END OF TABLE ?     *** SBV
         BE    VTOCRD                  YES READ AGAIN     *** SBV
         CLC   0(44,R14),FMT1          SAME DSNAME ?      *** SBV
         BE    NOONLY                  YES COPY IT        *** SBV
         LA    R14,44(R14)             NEXT ENTRY         *** SBV
         B     EXC6                    TRY NEXT           *** SBV
NOONLY   EQU   *
   SPACE 2
         TM    FMT1+82,X'80'   IS THIS IS DATA SET
         BZ    NTIS01          IF NOT, SKIP SETTING BIT
         OI    3(R2),X'80'     TURN ON IS BIT
NTIS01   EQU   *
         TM    FMT1+82,X'01'   IS IT UNMOVABLE
         BZ    NTVSM01         IF NOT, DON'T FLIP BIT
NTABS02  EQU   *
         LA    R15,FMT1+9      FIRST POS. FOR .SYM
         LA    R14,30(R15)     LAST POS. FOR .SYM
NTIS022  CLC   0(5,R15),=C'.SYM '  LOOK FOR FOR COBAL SYM
         BE    NTABS01         YES MAKE MOVABLE
         LA    R15,1(R15)      LOOK FOR NEXT BYTE
         CR    R14,R15          END ?
         BE    OIUNM
         CLI   0(R15),C' '     END OF NAME
         BNE   NTIS022
OIUNM    OI    3(R2),X'40'     TURN ON BIT TO SHOW UNMOVABLE
NTVSM01  TM    FMT1+83,X'08'      TEST FOR VSAM DSN.
         BZ    NTABS01            BR IF NOT VSAM.
         CLC   VSAMMARK(5),4(R2)     GET CCHHR             *** SBV
         BH    VSAMMOK                                     *** SBV
         MVC   VSAMMARK(5),4(R2)  GET CCHHR                *** SBV
VSAMMOK  EQU   *                                           *** SBV
   SPACE 5
         OI    VSAMSW,X'01'        INDICATE VSAM DS               *BAR*
         OI    9(R2),TRKOVERF      SET OVERFLOW               *** SBV
         OI    3(R2),X'40'         TURN ON UNMOVABLE
         SPACE
NTABS01  EQU   *
         CLC   CTLG,FMT1           IS IT SYSCTLG DS ?         *** SBV
         BNE   NOCTLG              NO                         *** SBV
         OI    3(R2),X'20'         INDICATE CTLG              *** SBV
         OI    VSAMSW,X'02'        INDICATE FOR LATER         *** SBV
NOCTLG   EQU   *                                              *** SBV
    SPACE
         TM    FMT1+84,TRKOVERF     WAS OVERFLOW ?            *** SBV
         BNO   NOTRKOV              NO                        *** SBV
         OI    9(R2),TRKOVERF       SET OVERFLOW              *** SBV
NOTRKOV  EQU   *
         CLI   FMT1+82,X'40'        PS DATA SET ?             *** SBV
         BNE   UNMOV11              YES COPY WHOLE DATASET    *** SBV
         CLC   FMT1+51(2),=H'1'     NOT 1. VOL EXTENT ?       *** SBV
         BH    UNMOV1
UNMOV11  EQU   *
         TM    3(R2),X'C0'          IS IT SET UNMOVABLE       *** SBV
         BNZ   UNMOV1               YES COPY ALL              *** SBV
         OI    9(R2),COPYUSED       COPY ONLY USED SPACE      *** SBV
UNMOV1   EQU   *
         TM    CARDSW,X'80'         WAS INPUT CARD ?        *** SBV
         BO    YESCARD              YES                     *** SBV
         OI    3(R2),X'40'          NO --> SET UNMOVEABLE   *** SBV
         B     VTOCRD2              GET NEXT ENTRY          *** SBV
   SPACE 2
YESCARD  EQU   *                    NORMAL PROCESSING       *** SBV
         SPACE
NOTCT01  EQU   *
NOTCT02  EQU   *
         TM    FMT1+94,X'C0'   SEE IF CYLINDER ALLOCATION
         BNO   NOTCYL01        IF NOT, DON'T FLIP BIT
         OI    3(R2),X'10'     TURN ON CYLINDER BIT
         B     VTOCRD2         GO INCR AND READ
NOTCYL01 EQU   *
         OI    3(R2),X'08'     TURN ON TRACK BIT
         B     VTOCRD2
         EJECT
LFM1     EQU   *
         MVC   0(4,R2),ZEROES  MOVE ZEROES TO END OF LIST
         LA    R1,255          FOR CLOSE OF INPUT           *** SBV
         SLL   R1,24           TO HOB                       *** SBV
         SR    R0,R0
         L     R15,AQX01530    CLOSE INPUT                  *** SBV
         BALR  R14,R15
   SPACE 2
         LA   R14,VTOCOUT      GET SPACE FOR F4 (OUT)       *** SBV
         LA    R1,X'F4'                                     *** SBV
         SLL   R1,24           TO HOB                       *** SBV
         OR    R1,R14          OPEN                         *** SBV
         LA    R0,TAGVOL       SER OF TARGET VOL            *** SBV
       SPACE
         L     R15,AQX01530    OPEN OUTPUT                  *** SBV
         BALR  R14,R15
         SPACE 2
         LTR   R15,R15         ANY F4 ?                     *** SBV
         BZ    YESVTOC         YES                          *** SBV
         SPACE 1
NOFORMAT EQU   *
         WTO   'SQUISH--> NO VTOC ON TAGVOL',ROUTCDE=1      *** SBV
    SPACE 2
         ABEND 1
  SPACE
YESVTOC  EQU   *
         MVC   DSCBHIGH,VTOCOUT+74   NO.DSCBS ON TRK        *** SBV
         MVC   STAD,VTOCOUT+107        GET VTOC START
         MVC   ENDAD,VTOCOUT+111       VTOC END
   SPACE
         LH    R0,STAD                GET START ADDR. CC    *** SBV
         MH    R0,TRKPCYL             NOW REL. TRACK ADDR.  *** SBV
         AH    R0,STAD+2              + TRACK START         *** SBV
   SPACE
         LH    R1,ENDAD               GET END   ADDR. CC    *** SBV
         MH    R1,TRKPCYL             NOW REL. TRACK ADDR.  *** SBV
         AH    R1,ENDAD+2             + TRACK END           *** SBV
         SR    R1,R0                  NOW NO TRACK IN VTOC  *** SBV
         SR    R0,R0                  CLEAR WORK            *** SBV
         SR    R14,R14                DTO                   *** SBV
         IC    R14,VTOCOUT+74         NO. DSCBS PER TRACK   *** SBV
         MR    R0,R14                 TOTAL NO. DSN POSSIBLE*** SBV
         CH    R1,NRDSNIN             HIHGER ?              *** SBV
         BNL   DSNINOK                YES OK                *** SBV
    SPACE 2
         WTO   'SQUISH --> NOT ENOUGH FREE DSCBS ON TARGET-VOL',       *
               ROUTCDE=1
         B     CLOSESYS               TERMINATE             *** SBV
   SPACE 2
DSNINOK  EQU   *
         LA    R1,FMT5         GET F5                       *** SBV
         SR    R0,R0           FOR READ ROUTINE             *** SBV
         L     R15,AQX01530    GET FORMAT 5                 *** SBV
         BALR  R14,R15         LINK
         CH    R15,=H'4'       ANY F5 ?                     *** SBV
         BH    NOFORMAT        NO                           *** SBV
   SPACE 2
         CLI   MRGSW,C'M'       MERGE ?            *** SBV
         BNE   NONEXT5          NO                 *** SBV
         LA    R4,FMT5          ORIGN F5           *** SBV
CLC135   CLC   135(5,R4),ZEROES ANOTHER ONE ?      *** SBV
         BE    NONEXT5          NO                 *** SBV
         L     R2,INPUT5        GET LAST POINTER   *** SBV
         MVC   SAVECCHH(5),135(R4) SAVE CHAINING   *** SBV
   SPACE
         GETMAIN R,LV=150        GET SPACE FOR F5  *** SBV
         XC    0(150,R1),0(R1)   CLEAR AREA        *** SBV
         ST    R1,INPUT5         SAVE ADDR.        *** SBV
         ST    R2,0(R1)          CHAIN             *** SBV
         LA    R1,4(R1)          ADDR. OF F5       *** SBV
         LR    R4,R1             SAVE ADDR.        *** SBV
         LA    R0,SAVECCHH       CCHHR             *** SBV
   SPACE 2
         L     R15,AQX01530    GET FORMAT 5                 *** SBV
         BALR  R14,R15         LINK
         LTR   R15,R15           OK ?              *** SBV
         BNZ   CRASH1            NO                *** SBV
         MVC   140(5,R4),0(R1)   SAVE HIS CCHHR    *** SBV
         B     CLC135            CHECK AGAIN       *** SBV
  SPACE 2
CRASH1   EQU   *
         WTO   'SQUISH --> WRONG F5 POINTER ON TAGVOL',ROUTCDE=1
         B     CRASH
      SPACE 5
NONEXT5  EQU   *
         MVC   SAVEF5(4),INPUT5  SAVE LAST F5      *** SBV
         EJECT
ALLSET   EQU   *
*        INITIALIZE FREE SPACE
*        MARK TRACK ZERO AS ALLOCATED
   SPACE 2
         L     R0,LFREE              MAX TRK PER DISK       *** SBV
         GETMAIN R,LV=(0)            GET CORE               *** SBV
         ST    R1,FREESPAC           SAVE ADDR.             *** SBV
     SPACE
         LR    R0,R1                 LOAD FOR CLEAR         *** SBV
         LR    R14,R0                  DTO                  *** SBV
         L     R1,LFREE              LENGTH FOR CLEAR       *** SBV
         SR    R15,R15                                      *** SBV
         MVCL  R0,R14                CLEAR AREA             *** SBV
  SPACE
         L     R1,FREESPAC           GET AREA ADDR.         *** SBV
         MVI   0(R1),X'FF'           MARK TRK 0 ALLOC.      *** SBV
         L     R14,LFREE             GET LENGHT             *** SBV
         AR    R1,R14                BEHIND END             *** SBV
         BCTR  R1,R0                 -1                     *** SBV
         MVI   0(R1),X'FF'            MARK END              *** SBV
         MVC   BLOCKAD(4),STAD        CCHH                  *** SBV
         MVI   BLOCKAD+4,3            FIRST DSCB OTHER F4 F5 *** SBV
  SPACE 2
         LA    R1,STAD         1 POINTS TO EXTENT
         CALL  QX01523                                       *** SBV
         LTR   RF,RF              TEST RETURN CODE.          WMT 04/76
         BNZ   INC1                                          WMT 04/76
         SPACE 2
         LH    R14,ENDAD        GET VTOC ENDING CYLINDER
         MH    R14,TRKPCYL      GET TRACK NUMBER
         AH    R14,ENDAD+2      ADD IN TRACK
         STH   R14,OTVTCEND     SAVE LAST TRACK NUMBER IN OUTPUT VTOC
         SPACE 2
         CLI   MRGSW,X'D4'        IS IT A MERGE.              WMT 12/75
         BNE   BYPASS             NO GO AROUND.               WMT 12/75
         CLC   FMT4+45(5),ZEROES  FRESH INIT DISK ?           *** SBV
         BE    BYPASS             YES                         *** SBV
         SPACE
         MVC   BLOCKAD,FMT4+45    GET ABSOLUTE ADDR LAST FMT1 *** SBV
TRYNXT   SR    R14,R14                                      *** SBV
         IC    R14,BLOCKAD+4   REC #                        *** SBV
         LA    R14,1(R14)      NEXT                         *** SBV
         CLM   R14,1,DSCBHIGH  REACHED ?                    *** SBV
         BH    NXTTRK          YES SWITCH TO NEXT TRK       *** SBV
         STC   R14,BLOCKAD+4   STORE                        *** SBV
         B     GETNXT          GET NEXT                     *** SBV
   SPACE 2
NXTTRK   EQU   *
         MVI   BLOCKAD+4,1     REC # 1                      *** SBV
         ICM   R14,3,BLOCKAD+2 GET HH                       *** SBV
         LA    R14,1(R14)      NEXT TRK                     *** SBV
         CLM   R14,3,VTOCOUT+64 HIGH TRACK REACHED ?        *** SBV
         BNL   NXTCYL           YES NEXT CYL                *** SBV
         STCM  R14,3,BLOCKAD+2 STORE NEXT TRACK             *** SBV
         B     GETNXT          GET NEXT                     *** SBV
   SPACE 2
CRASH2   EQU   *
         WTO   'SQUISH --> PROBABLE NOT ENOUGH DSCBS ON TAGVOL',       *
               ROUTCDE=1
         B     CRASH
   SPACE 2
NXTCYL   EQU   *
         ICM   R14,3,BLOCKAD   GET CYL                      *** SBV
         LA    R14,1(R14)      NEXT                         *** SBV
         SLL   R14,16          TO HOB                       *** SBV
         STCM  R14,15,BLOCKAD  NEXT                         *** SBV
  SPACE
GETNXT   EQU   *
         LA    R0,BLOCKAD       GET CCHHR OF NEXT           *** SBV
         LA    R1,FMT1          AREA                        *** SBV
         L     R15,AQX01530     READ NEXT                   *** SBV
         BALR  R14,R15
         LTR   R15,R15          CRASH ?                     *** SBV
         BNZ   CRASH2           YES                         *** SBV
         CLI   FMT1+44,0        FREE DSCB ?                 *** SBV
         BNE   TRYNXT           NO GET NEXT ONE             *** SBV
         EJECT
BYPASS   DS    0H                                             WMT 12/75
         LA    R1,255                 GET CLOSE OPTION    *** SBV
         SLL   R1,24                  TO  HOB             *** SBV
         SR    R0,R0                                      *** SBV
         L     R15,AQX01530     READ NEXT                   *** SBV
         BALR  R14,R15
   SPACE 2
         LA    R14,VTOCIN             GET AREA         *** SBV
         LA    R1,X'F4'               FORMAT 4         *** SBV
         SLL   R1,24                  INTO HOB         *** SBV
         OR    R1,R14                 LOAD ADDR        *** SBV
         LA    R0,OLDVOL              VOLSER           *** SBV
         L     R15,AQX01530     READ NEXT                   *** SBV
         BALR  R14,R15
         LTR   R15,R15                RC=0             *** SBV
         BNZ   CRASH                   NO              *** SBV
    SPACE 2
         RDJFCB (INDISK,,OUTDISK)                             *** SBV
    SPACE 2
         MVI   INJFCB,4             SET VTOC AS DSNAME       *** SBV
         MVC   INJFCB+1(43),INJFCB                           *** SBV
         MVC   OUTJFCB(44),INJFCB   SET VTOC AS DSNAME       *** SBV
    SPACE
         OI    INJFCB+52,8          DONT WRITE BACK          *** SBV
         OI    OUTJFCB+52,8         DONT WRITE BACK          *** SBV
  SPACE 2
         OPEN  (OUTDISK,UPDAT,INDISK),TYPE=J  OPEN DISK PACKS
         SPACE
*  THIS CODE IS USED TO CHANGE THE DEB TO ALLOW ACCESS            *BAR*
*  TO THE ENTIRE DISK PACK EXCLUDING TRACK ZERO AND               *BAR*
*  ALTERNATE TRACKS                                               *BAR*
    SPACE
         MODESET  KEY=ZERO,MODE=SUP  GET SUPERVISOR STATE         *BAR*
    SPACE
         L     R1,INDISK+44        PICK UP DEB ADDRESS
         XC    38(4,R1),38(R1)     WIPE OUT EXTENT START
         MVI   41(R1),1            START AT TRACK 1
         MVC   42(6,R1),=3X'7FFF'  SET HIGH BOUND
         L     R1,OUTDISK+44       PICK UP DEB ADDRESS
         XC    38(4,R1),38(R1)     WIPE OUT EXTENT START
         MVI   41(R1),1            START AT TRACK 1
         MVC   42(6,R1),=3X'7FFF'  SET HIGH BOUND
    SPACE
         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROB STATE
         EJECT
         XC    TRKALC,TRKALC   CLEAR WORK
         GETMAIN R,LV=400*8    GET SPACE FOR READ COUNTS AND DATA
         LA    R1,0(R1)        WIPE OUT HIGH BYTE
         ST    R1,RDCNTAD      SAVE ADDRESS
         SPACE 2
         MVI   RDCNTAD,X'08'   REPLACE TIC CCW
         LA    R2,1600(R1)    POINT 2 AT COUNT AREA
         LA    R3,199         SET UP 199 READ COUNT CCWS
         LA    R4,8           DATA LENGTH OF 8
         SPACE 2
INITCCW  ST    R2,0(R1)        STORE DATA ADDRESS IN CCW
         ST    R4,4(R1)        STORE LENGTH
         MVI   0(R1),X'12'     MOVE IN READ COUNT CCW
         MVI   4(R1),X'40'     PUT IN COMMAND CHAINING
         LA    R1,8(R1)        INCREMENT TO NEXT CCW
         LA    R2,8(R2)        INCREMENT TO NEXT DATA AREA
         BCT   R3,INITCCW      KEEP DOING IT
         ST    R3,0(R1)        PUT IN ADDRESS
         MVI   0(R1),X'03'     PUT IN NO-OP CCW
         ST    R4,4(R1)        PUT IN ANY LENGTH
         MVI   4(R1),X'20'     TURN ON SILI BIT
         SPACE 2
         L     R0,=F'51200'    GET LENGTH
         GETMAIN R,LV=(0)      GET CORE FOR DATA AND CCWS
         SPACE 1
         ST    R1,DACCWADI     SAVE ADDRESS
         SPACE 2
         MVI   DACCWADI,X'08'  PUT BACK TIC
         LA    R1,1600(R1)    POINT TO DATA AREA
         ST    R1,DATADI       SAVE IT
         SPACE 2
         L     R0,=F'51200'    GET LENGTH
         GETMAIN R,LV=(0)      GET CORE FOR OUTPUT DATA & CCWS
         ST    R1,DACCWADO     SAVE CCW ADDRESS
         SPACE 2
         MVI   DACCWADO,X'08' PUT TIC OP CODE BACK
         LA    R1,1600(R1)    GET 1 UP TO DATA AREA
         ST    R1,DATADO       SAVE ADDRESS OF DATA AREA
         EJECT
         L     R4,DSLSTAD      POINT TO DSLST
INC1     LA    R4,12(R4)        UPDATE 12              *** SBV
         CLC   0(4,R4),ZEROES   ARE WE THROUGH
         BE    GETCTLG         IF SO, GO FIND AND COPY SYSCTLG
         TM    3(R4),X'C0'     IS IT UNMOVABLE
         BZ    INC1            IF NOT, THEN LOOK AGAIN
         SPACE 2
*        QX01522 IS CALLED AS IF IT WERE BAL IN THIS ROUTINEWMT 04/76
         L     RF,=V(QX01522)     STARTING ADDRESS.          WMT 04/76
         BALR  RB,RF              CALL QX01522.              WMT 04/76
         SR    0,0             CLEAR 0
         LA    R1,INEXTS       GET EXTENT ADDRESS
         LA    R2,16          16 MAX EXTENTS
ABSTST1  EQU   *
         CLC   0(8,R1),ZEROES  ARE WE FINISHED
         BE    ABSOUT1         IF SO, DON'T DO IT AGAIN
         SPACE 1
*        QX01523 IS CALLED AS IF IT WERE BAL IN THIS ROUTINE. WMT 04/76
         L     RF,=V(QX01523)     STARTING ADDRESS.
         BALR  RE,RF              CALL QX01523.              WMT 04/76
         LTR   RF,RF              TEST RETURN CODE.          WMT 04/76
         BNZ   INC1                                          WMT 04/76
         SPACE 1
         AH    0,TRKALC        ACCUM TRACKS ALLOCATED
         LA    R1,8(R1)        INCR. 1
         BCT   R2,ABSTST1      KEEP IT UP
         SPACE
ABSOUT1  MVC   OUTEXTS(16*8),INEXTS    MOVE ALL EXTENTS
         STH   0,TRKUSD        SAVE FOR QX01528
         SPACE 1
         TM    9(R4),COPYUSED  ONLY USED SPACE TO COPY ?     *** SBV
         BZ    NOUSED          NO                            *** SBV
         ICM   R15,7,FMT1+98   ANY SPACE USED ?              *** SBV
         MVC   TRKUSD,TRKALC   ALLOC=USED                    *** SBV
         BZ    NOUSED          COPY WHOLE DATASET            *** SBV
         LH    R15,FMT1+98     GET TRKS USED                 *** SBV
         LA    R15,1(R15)      +1                            *** SBV
         ICM   R11,1,FMT1+100  LAST BLOCK USED ?             *** SBV
         BZ    NOADDUS         NO                            *** SBV
         ICM   R11,15,FMT1+86  LRECL OR BLKSIZE ?            *** SBV
         BZ    NOADDUS         NO DONT COPY EXTRA TRACK      *** SBV
         LA    R15,1(R15)      ADD FOR EOF REC.              *** SBV
NOADDUS  STH   R15,TRKUSD      SAVE FOR QX01528              *** SBV
NOUSED   EQU   *
         SPACE 1
*        QX01528 IS CALLED AS IF IT WERE BAL IN THIS ROUTINE. WMT 04/76
         L     RF,=V(QX01528)     START ADDRESS.             WMT 04/76
         BALR RB,RF               CALL QX01528.              WMT 04/76
         SPACE 1
         MVI   3(R4),0         CLEAR LIST
         B     INC1            GO LOOK FOR NEXT
         EJECT
GETCTLG  EQU   *
         SR    R4,R4
         L     R2,PFMT5AD      GET FMT 5 ADDRESS
         LH    R15,#TRKS        GET # OF TRKS
         LA    R14,1
         L     R3,FREESPAC      POINT PAST LAST TRACK *** SBV
         AR    R3,R15           DTO.                       *** SBV
         MVI   0(R3),X'FF'     SET AS ALLOCATED
         BCTR  R15,0            REDUCE TO LAST TRACK
         SR    R3,R3
         SPACE 2
LKFREE1  L     R5,FREESPAC     GET ADDRESS OF NEXT TRACK *** SBV
         AR    R5,R3           DTO.                          *** SBV
         CLI   0(R5),X'FF'     SEE IF ALLOCATED
         BNE   FFREE           IF SO, GOODIE
LKUP1    BXLE  R3,R14,LKFREE1  KEEP LOOKING
         B     PFMT5OUT        GET OUT IF ALL TRACKS
         SPACE 2
FFREE    EQU   *
         STH   R3,4(R2)        SAVE EXTENT START
LKFREE2  LA    R3,1(R3)       UPDATE 3
         L     R5,FREESPAC     GET ADDRESS OF NEXT TRACK *** SBV
         AR    R5,R3           DTO.                         *** SBV
         CLI   0(R5),X'FF'     IS THIS FREE
         BNE   LKFREE2         IF SO, KEEP GOING
         LR    R6,R3
         LH    R9,4(R2)        GET STARTING TRACK IN 9
         LH    R10,TRKPCYL      GET TRACK PER CYL
         AR    R9,R10          ADD TO 9
         BCTR  R9,0            REDUCE BY 1
         SR    R8,R8           CLEAR 8 FOR DIVIDE
         DR    R8,R10
         MR    R8,R10          NOW REG 9 HAS NEXT HIGHEST CYL ADDRESS
         SH    R6,4(R2)        GET TOTAL TRACKS
         SH    R9,4(R2)        GET # TRKS BEFORE CYL
         CR    R9,R6            SEE WHICH IS BIGGER
         BNH   FIGR1           IF MORE THAN 1 CYL BRANCH
         STH   R6,6(R2)        STORE THE #
         B     LKINC1
         SPACE 2
FIGR1    EQU   *
         STH   R9,6(R2)        SAVE TRKS BEFORE CYL
         LCR   R9,R9           SET 9 NEGATIVE
         AR    R9,R6            NOW HAVE TRACKS LEFT
         DR    R8,R10          GET CY  S AGAIN
         STH   R8,10(R2)       SAVE TRKS AFTER LAST CYL
         MR    R8,R10          GET BACK TO TRACKS ON CYL
         STH   R9,8(R2)        SAVE TRKS ON CYL BOUND
LKINC1   LA    R2,12(R2)      INCR. 2
         LA    R4,1(R4)       INCR. EXT #
         CH    R4,DATEVL       ARE WE PAST TABLE END?          *** SBV
         BL    LKUP1           NO, KEEP GOING                  DART4/78
         LA    R1,WARNING     YES, PRINT WARNING              DART4,78
         ST    RB,RBSAVE       SAVE JUST IN CASE               DART4,78
         SPACE
         L     RF,=V(QX01527)  ADDRESS OF PRINT ROUTINE        DART4/78
         BALR  RB,RF           GO PRINT WARNING                DART4/78
         SPACE
         L     RB,RBSAVE       GO RELOAD REG 11                DART4/78
         MVI   CONTAMIN,X'84' SET CONTAMINATE BITS ON         DART4/78
PFMT5OUT EQU   *
         STH   R4,#FREXTS      SAVE # OF FREE EXTENTS
         LTR   R4,R4           NO FREE EXTENTS ?            *** DATEV
         BZ    STR2            YES                          *** DATEV
         L     R9,PFMT5AD      GET EXTENT POINTER
         LA    R8,12(R9)      8POINTS TO NEXT ONE
         LR    R6,R4           SET UP LOOP FOR FORWARD THREAD  DART4/78
*        BCTR  R6,0            CHAIN OF FREE SPACE ELEMENTS *** DATEV
FRSETUP  ST    R8,0(R9)
         LA    R9,12(R9)      INCR 9
         LA    R8,12(R8)      INCR 8
*        LTR   R6,R6                                         *** DATEV
*        BZ    STR2                                          *** DATEV
         BCT   R6,FRSETUP      DO IT FOR ALL
STR2     ST    R2,FPFMT5AD     SAVE FIRST FREE POINTER
         SH    R2,=H'12'       GET TO LAST USED ELEMENT
         XC    0(4,R2),0(R2)   WIPE OUT CHAIN POINTER
         EJECT
         SR    R6,6            CLEAR REG 6
         LA    R5,NBRTEST      GO THROUGH 3 TIMES
GETDS    EQU   *
         XC    TRKALC,TRKALC   CLEAR WORK
         STM   R5,6,R5R6       SAVE REGS 5 & 6
         L     R4,DSLSTAD      POINT TO DSLST
INC2     LA    R4,12(R4)        INCR LIST POINTER
         CLC   0(4,R4),ZEROES   ARE WE AT END OF LIST
         BE    THISDONE
         L     R6,R5R6+4       RESTORE REG 6
         EX    R0,TEST(R6)      MAKE THE TEST
BNO      BNO   INC2            BRANCH TO LOOK AT NEXT DS     *** SBV
   SPACE
*        QX01522 CALLED AS IF IT WERE BAL IN THIS ROUTINE.   WMT 04/76
         L     RF,=V(QX01522)     START ADDRESS.             WMT 04/76
         BALR  RB,RF              CALL QX01522.              WMT 04/76
   SPACE
         XC    OUTEXT(16*8),OUTEXT     CLEAR EXTENT AREA
         LH    R11,FMT1+98     GET TTR OF LAST WRITTEN BLOCK
         LA    R0,1(R11)        NOW HAVE # OF TRACKS USED
         TM    FMT1+105,X'40'     TEST FOR SUL.               WMT 04/76
         BO    X10                BR IF SUL.                  WMT 04/76
         CLC   CTLG,FMT1          IS IT SYSCTLG               *** SBV
         BNE   GOON99             NO                          *** SBV
X10      DS    0H                                             WMT 04/76
         SR    R0,R0                                          *** SBV
         ICM   R0,3,BIGGIE  GET A BIG NUMBER FOR TRACKS USER  *** SBV
GOON99   EQU   *
         STCM  R0,3,TRKUSD        SAVE FOR LATER
         SPACE 2
*        CLI   MRGSW,C'C'       WAS COMPACT SPECIFIED ?       *** SBV
*        BNE   NOCOMP           NO, SO FORGET IT              *** SBV
         CLI   FMT1+59,1        MORE THAN ONE EXTENT ?        *** SBV
         BNH   NOCOMP           NO, FORGET IT AS WELL         *** SBV
         L     RF,=V(QX01532)   CALL COMPACT ROUTINE          *** SBV
         BALR  RE,RF                                          *** SBV
         LTR   RF,RF            HAVE WE BEEN SUCCESSFUL ?     *** SBV
         BNZ   NOCOMP           NO, CONTINUE NORMAL PROC.     *** SBV
         SPACE
         LA    R15,1            1 EXTENT                      *** SBV
         LH    R0,TRKUSD        LOAD TRK USED                 *** SBV
         B     SHR0             GO TO MOVE                    *** SBV
         SPACE 2
NOCOMP   EQU   *                                              *** SBV
         SR    R15,R15          CLEAR 15
         SR    R1,R1           CLEAR 1
         LA    R2,16          MAX @ OF EXTENTS
CYLEXT1  SR    R3,R3            CLEAR 3
         C     R3,INEXT(R1)    IS THIS EXTENT GOOD
         BE    SHR0            IF NOT, THEN WE'RE FINISHED
         ST    RF,RGSAV           SAVE RF.                    WMT 04/76
         SPACE
*        QX01525 IS CALLED AS IF IT WERE BAL IN THIS ROUTINE. WMT 04/76
         L     RF,=V(QX01525)     START ADDRESS.             WMT 04/76
         BALR RE,RF               CALL QX01525.              WMT 04/76
         SPACE
         LTR   RF,RF          EVERYTHING OK ?                 *** SBV
         BZ    NOCRASH        YES PROCEED                     *** SBV
         SPACE 2
         MVC   WTOERR+19(44),FMT1  MOVE DSNAME                *** SBV
WTOERR   WTO   'SQUISH -->                                             *
                 COULD NOT BE COPIED,NOT ENOUGH SPACE',ROUTCDE=1
         SPACE 2
         LA    R1,WTOERR+18          GET MESSAGE TO PRINT     *** SBV
         L     R15,=V(QX01527)       PRINT                    *** SBV
         BALR  R14,R15                                        *** SBV
         MVI   RCFIELD,4             SET RETURN CC            *** SBV
         B     GOON101
      SPACE 2
NOCRASH  L     RF,RGSAV       RESTORE R15                     *** SBV
         SPACE
         LA    R15,1(R15)       INCR EXTENT REG
         LA    R1,8(R1)        INCR EXTENT POINTER
         BCT   R2,CYLEXT1      KEEP IT UP
SHR0     SH    R0,TRKALC        SUBTRACT TRK ALLOC            *** SBV
         BZ    CYLOUT           IF ZERO DATA FITS ON THIS EXT.*** SBV
*        BM    ADD1TRK          IF MINUS ADD 1 FOR EOF        *** SBV
   SPACE
         ICM   R1,15,FMT1+86   LRECL OR BLKSIZE ?            *** SBV
         BZ    CYLOUT          NO DONT COPY EXTRA TRACK      *** SBV
         LH    R1,TRKUSD        GET USED TRACKS
         LA    R1,1(R1)         ADD 1
         STH   R1,TRKUSD        AND SAVE FOR COPIER
CYLOUT   EQU   *
         STC   R15,FMT1+59      SAVE # OF EXTENTS
         TM    FMT1+105,X'40'     TEST FOR SUL.               WMT 04/76
         BO    X11                BR IF SUL.                  WMT 04/76
         CLC   CTLG,FMT1          IS IT SYSCTLG               *** SBV
         BNE   GOON100            NO                          *** SBV
X11      DS    0H                                             WMT 04/76
         LCR   R0,R0             MAKE NUM NEGATIVE
         SR    R15,R15          CLEAR WORK                    *** SBV
         ICM   R15,3,BIGGIE     GET BIG NO                    *** SBV
         AR    R0,R15           NOW REG 0 HAS TRACKS ALLOCATED
         STH   R0,TRKUSD        MOVE DS WILL USE THIS NUMBER
         SPACE 2
GOON100  EQU   *
         TM    9(R4),COPYUSED   ONLY USED SPACE TO COPY ?     *** SBV
         BZ    COPYALL          NO                            *** SBV
         ICM   R15,7,FMT1+98    ANY TRKS USED ?                *** SBV
         BNZ   GOON100A         YES                            *** SBV
COPYALL  EQU   *
         MVC   TRKUSD,TRKALC    COPY WHOLE DATASET             *** SBV
GOON100A EQU   *                                               DART4/78
*        QX01528 IS CALLED AS IF IT WERE BAL IN THIS ROUTINE. WMT 04/76
         L     RF,=V(QX01528)     START ADDRESS.             WMT 04/76
         BALR RB,RF               CALL QX01528               WMT 04/76
GOON101  DS    0H                                             WMT 12/75
         XC    TRKALC,TRKALC   CLEAR COUNTER                  *** SBV
         MVI   3(R4),0         CLEAR FLAG BYTE
         B     INC2            LOOK FOR NEXT DATA SET
         SPACE 2
THISDONE EQU   *
         LM    R5,R6,R5R6       REATORE REGS 5 & 6
         LA    R6,4(R6)        INCR REG 6
         CH    R6,=H'36'                                      *** SBV
         BNE   NOCLI                                          *** SBV
         MVI   BNO+1,X'80'                                    *** SBV
NOCLI    BCT   R5,GETDS        KEEP GOING
         B     PDONE           WE'RE FINISHED COPYING DATA SETS
 SPACE
TEST     TM    3(R4),X'20'     IS THIS THE SYSCTLG DATA SET
         TM    3(R4),X'07'     PRTY = 7 ?                      *** SBV
         TM    3(R4),X'06'     PRTY = 6 ?                      *** SBV
         TM    3(R4),X'05'     PRTY = 5 ?                      *** SBV
         TM    3(R4),X'04'     PRTY = 4 ?                      *** SBV
         TM    3(R4),X'03'     PRTY = 3 ?                      *** SBV
         TM    3(R4),X'02'     PRTY = 2 ?                      *** SBV
         TM    3(R4),X'01'     PRTY = 1 ?                      *** SBV
         TM    3(R4),X'10'     IS THIS CYLINDER ALLOCATION     *** SBV
         CLI   3(R4),0         HAS THIS BEEN COPIED            *** SBV
NBRTEST  EQU   (*-TEST)/4                                      *** SBV
 EJECT
PDONE    EQU   *
         XC    FMT5(140),FMT5  WIPE OUT FORMAT 5 DSCB
         LA    R8,FMT5+5       FIRST EXTENT LOC
         L     R9,PFMT5AD      GET FIRST FORMAT 5 POINTER
LAR1426  LA    R14,26         MAX # OF FREE EXTENTS IN FORMAT 5 ***SBV
         LH    R15,TRKPCYL      GET TRAKS PER CYL
         SPACE
EXTST10  LTR   R9,R9           SEE IF GOOD EXTENT
         BZ    FMT5DONE        IF FINISHED GET OUT
         MVC   0(2,R8),4(R9)   MOVE EXTENT START
         SR    R10,R10          CLEAR 10
         LH    R11,8(R9)       GET TRKS ON CYL
         DR    R10,R15          GET CYLS
         STH   R11,TCYL        STORE
         MVC   2(2,R8),TCYL    MOVE TO EXTENT
         LH    R11,6(R9)       GET TRAKS BEFORE CYL
         AH    R11,10(R9)     ADD TRACKS AFTER LAST CYL
         STC   R11,4(R8)       SAVE IN EXTENT
         LA    R8,5(R8)        POINT TO NEXT EXTENT
         L     R9,0(R9)        POINT TO NEXT EXTENT
         BCT   R14,EXTST10      KEEP MOVING
         SPACE 2
         L     R10,NEXTF5      GET NEXT POINTER          *** SBV
         GETMAIN R,LV=144      GET STOR. FOR F5+POINTER  *** SBV
         SPACE
         XC    0(144,R1),0(R1) CLEAR STOR.               *** SBV
         STCM  R1,7,NEXTF5+1   SAVE LAST POINTER         *** SBV
         ST    R10,0(R1)       PRIVIOS                   *** SBV
         IC    R15,NEXTF5      GET COUNTER               *** SBV
         LA    R15,1(R15)      +1                        *** SBV
         STC   R15,NEXTF5      SAVE IT                   *** SBV
         LA    R8,9(R1)        A(REAL F5)                *** SBV
         B     LAR1426         TRY AGAIN                 *** SBV
         SPACE
FMT5DONE EQU   *
         SPACE 3
         TM    RECSW,NOREC        WAS AT LEAST ONE DS ?      *** SBV
         BZ    SKIPVS             NO WRITE TRACK ZERO        *** SBV
         CLC   VSAMMARK(5),HWMARK                            *** SBV
         BH    HIGHM                                         *** SBV
         MVC   FMT4+45(5),HWMARK  RESET HIGHEST USED HW-MARK *** SBV
SR88     EQU   *
   SPACE 3
         SR    R8,R8           CLEAR 8
         XC    FMT2(140),FMT2  WIPE OUT BIG AREA
         SPACE 2
         LA    R1,FMT2          USE FOR FORMAT 0              *** SBV
         ST    R1,DACCWADO      PUT INTO CCW CHAIN            *** SBV
         MVI   DACCWADO,X'0D'   WRITE DATA                    *** SBV
         LA    R1,140           LENGTH OF DSCB                *** SBV
         ST    R1,DACCWADO+4    STORE INTO CCW                *** SBV
  SPACE 2
         MVC   INPUT5,SAVEF5    RESTORE LAST F5               *** SBV
DELF5    EQU   *
         ICM   R1,7,INPUT5+1    ANY OLD F5 ?                  *** SBV
         BZ    WRTNEWF5         NO WRITE THE NEW ONES         *** SBV
         CLI   MRGSW,C'M'       WAS IT MERGE ?                *** SBV
         BNE   WRTNEWF5         NO DONT CARE                  *** SBV
         L     R0,0(R1)         GET NEXT ONE                  *** SBV
         ST    R0,INPUT5        SAVE IT                       *** SBV
         MVC   OUTCCHH(5),144(R1) SAVE ITS CCHHR FOR DELETE   *** SBV
         MVI   OUTECB,0         CLEAR ECB                     *** SBV
         LA    R1,OUTIOB        GET IOB                       *** SBV
  SPACE
         EXCP  (1)              DELETE OLD F5                 *** SBV
    SPACE
         WAIT  ECB=OUTECB       WAIT FOR COMPLETION           *** SBV
    SPACE
         CLI   OUTECB,X'7F'     OK ?                          *** SBV
         BE    DELF5            YES                           *** SBV
         SPACE 2
         WTO   'SQUISH --> I/O-ERROR BY DELETETING OLD F5',ROUTCDE=1
         B     DELF5            TAKE NEXT TO DELETE           *** SBV
         SPACE
WRTNEWF5 EQU   *
         MVC   OUTCCHH(5),BLOCKAD    STORE A(F0)              *** SBV
WRT0     EQU   *
         ICM   R1,7,NEXTF5+1    MORE THAN ONE F5 ?            *** SBV
         BZ    ONLY1F5          NO ONLY ONE                   *** SBV
         ICM   R14,7,1(R1)      PREVIOS ?                     *** SBV
         BZ    FINISHF5         NO                            *** SBV
         SPACE
         MVC   139(5,R14),OUTCCHH   SAVE ITS CCHHR            *** SBV
         B     STCMR14                                        *** SBV
    SPACE
FINISHF5 EQU   *
         MVC   FMT5+135(5),OUTCCHH  CCHHR INTO ORIGN          *** SBV
STCMR14  STCM  R14,7,NEXTF5+1    SAVE PREVIOS                 *** SBV
         LA    R1,4(R1)           POINTER OF F5               *** SBV
         MVC   4(40,R1),5(R1)     RESET                       *** SBV
         MVI   44(R1),X'F5'       ID                          *** SBV
         MVI   0(R1),5            KEY                         *** SBV
         MVC   1(3,R1),0(R1)      KEY                         *** SBV
         BCTR  R8,0               -1                          *** SBV
         IC    R0,NEXTF5          COUNTER                     *** SBV
         BCTR  R0,R0              -1                          *** SBV
         STC   R0,NEXTF5          STORE AGAIN                 *** SBV
         STCM  R1,7,DACCWADO+1    SAVE IN CCW
   SPACE
ONLY1F5  EQU   *
         MVI   OUTECB,0        CLEAR ECB                      *** SBV
         LA    R1,OUTIOB       IOB                            *** SBV
   SPACE
         EXCP  (1)               WRITE DSCB                   *** SBV
     SPACE
         WAIT  ECB=OUTECB      WAIT FOR COMPL.                *** SBV
    SPACE
         CLI   OUTECB,X'7F'    OK ?                           *** SBV
         BNE   CRASH           NO SHIT                        *** SBV
         CLI   NEXTF5,0        MORE LEFT                      *** SBV
         BNE   ONLYF51         YES                            *** SBV
         LA   R1,FMT2          LOAD ORIGN POINTER             *** SBV
         STCM  R1,7,DACCWADO+1   INTO CCW                     *** SBV
ONLYF51  EQU   *
         LA    R8,1(R8)       ONE MORE GOOD FMT 0
        SPACE
         SR    R1,R1
         IC    R1,OUTCCHH+4      GET REC. #                   *** SBV
         LA    R1,1(R1)          NEXT REC.                    *** SBV
         CLM   R1,1,DSCBHIGH     LAST ON TRK ?                *** SBV
         BH    NEXTTRK           YES                          *** SBV
         STC   R1,OUTCCHH+4      SAVE INTO CCHHR              *** SBV
ADDR8    EQU   *
         CLC   ENDAD(5),OUTCCHH  END REACHED ?                *** SBV
         BL    NOMORE            YES GOOUT                    *** SBV
         SPACE 2
         B     WRT0            GO TRY AGAIN
         SPACE
NEXTTRK  EQU   *
         MVI   OUTCCHH+4,1      REC. # 1                      *** SBV
         IC    R1,OUTCCHH+3     GET HH                        *** SBV
         LA    R1,1(R1)         + 1                           *** SBV
         CLM   R1,1,TRKPCYL+1   HIGH TRACK ?                  *** SBV
         BE    NEXTCYL          YES                           *** SBV
         STC   R1,OUTCCHH+3     SAVE IN CCHH                  *** SBV
         B     ADDR8
   SPACE 2
NEXTCYL  EQU   *
         ICM   R1,3,OUTCCHH     GET CC                        *** SBV
         LA    R1,1(R1)         + 1                           *** SBV
         SLL   R1,16            HOB                           *** SBV
         STCM  R1,15,OUTCCHH    NEXT CYL                      *** SBV
         B     ADDR8                                          *** SBV
  SPACE 2
HIGHM    MVC   FMT4+45(R5),VSAMMARK                             *** SBV
         B    SR88                                              *** SBV
         SPACE 2
NOMORE   STH   R8,FMT4+50      SAVE # OF AVAIL DSCB'S
         MVC   FMT5+4(40),FMT5+5       SET UP FMT5
         MVI   FMT5+44,X'F5'   PUT IN ID
         MVI   FMT5,5
         MVC   FMT5+1(3),FMT5 NOW HAVE GOOD FORMAT 5
         SPACE 2
         LA    R1,FMT5                 GET ADDR OF FORMAT 5   *** SBV
         STCM  R1,7,DACCWADO+1         PUT INTO WRITE CCW     *** SBV
         MVC   OUTCCHH,STAD            GET START OF VTOC      *** SBV
         MVI   OUTCCHH+4,2             REC.# 2 FOR F5         *** SBV
         MVI   OUTECB,0                CLEAR ECB              *** SBV
         LA    R1,OUTIOB               IOB                    *** SBV
    SPACE
         EXCP  (1)                     WRITE F5               *** SBV
     SPACE
         WAIT  ECB=OUTECB              WAIT FOR COMPL.        *** SBV
   SPACE
         OC    FMT4+58(1),CONTAMIN  SET CONTAMINATE BIT IN    DART4/78
         TM    VSAMSW,X'01'  VSAM DS ON VOL?  ** BAR **
         BZ    NOMORE2             NO ** BAR **
         MVC   FMT4+76(22),VSAMSAVE  RESTORE VSAM FMT4 INFO ** BAR **
         MVI   VSFLAG,X'FF'       SET VSAM FLAG.
         SPACE 2
NOMORE2  EQU   *
         LA    R1,FMT4               GET F4                  *** SBV
         STCM  R1,7,DACCWADO+1       INTO CCW                *** SBV
         MVI   OUTECB,0              CLEAR ECB               *** SBV
         MVI   OUTCCHH+4,1           SET REC# 1              *** SBV
         LA    R1,OUTIOB             IOB                     *** SBV
         SPACE
         EXCP  (1)                   WRITE F4                *** SBV
    SPACE
         WAIT  ECB=OUTECB            WAIT FOR COMPL.         *** SBV
         SPACE 2
         NI    OUTDISK+X'30',X'7F'     TURN OFF WRITE FLAG FOR CLOSE
 SPACE
         CLOSE (INDISK,,OUTDISK)       CLOSE BIGGIES
 SPACE
         SPACE 2
         LA    R1,ENDMES       GET ADDRESS OF ENDING MESSAGE
*        QX01527 IS CALLED AS IF IT WERE BAL IN THIS ROUTINE WMT 04/76
         L     RF,=V(QX01527)     START ADDRESS.
         BALR RB,RF               CALL QX01527.              WMT 04/76
         SPACE 2
         CLOSE SYSPRINT
         SPACE 2
         CALL  TRKTOT
         SPACE 2
         LA    R1,255              FF FOR CLOSE             *** SBV
         SR    R0,R0                                        *** SBV
         SLL   R1,24               SHIFT TO HOB             *** SBV
         L     R15,AQX01530        CLOSE DS                 *** SBV
         BALR  R14,R15
       SPACE 2
         L     R14,DATADO          LOAD SUBPOOL             *** SBV
         LA    R15,1600            LOAD CONSTANT            *** SBV
         SR    R14,R15             TO ENTRY
         ST    R14,DACCWADO        INTO CCW                 *** SBV
         MVI   DACCWADO,8          TIC                      *** SBV
   SPACE 2
*                                                            *WMT 12/75
*        REPOSITION VSAM FORMAT 1'S.                         *WMT 12/75
*                                                            *WMT 12/75
         CLI   VSFLAG,X'FF'       TEST FOR VSAM.
         BNE   SKIPVS             BR IF NO VSAM.
         SPACE 2
         CALL QX01526             CALL VSAM ROUTINE  *** SBV  WMT 12/75
         SPACE 2
SKIPVS   DS    0H
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        COPY TRACK ZERO ONTO TARGET VOLUME                           *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
   SPACE
         CALL  QX01529             CALL TRACK ZERO       *** SBV
         LR    R4,R15              SAVE RETURN CODE
         SPACE 2
         DEQ   MF=(E,ENQL1)           DEQ TARGET VOL
         SPACE 2
         ICM   R2,15,IOERRARA      WAS I/O ERROR ?       *** SBV
         BZ    NOSCR               NO                    *** SBV
    SPACE 2
MVCDSN   MVC   DSNDSN,0(R2)        MOVE DATASET NAME     *** SBV
         SCRATCH DELDSN
  SPACE
         LTR   R15,R15
         BNZ   WORN                GIVE WARNING           *** SBV
WORN1    EQU   *
         LA    R2,44(R2)           NEXT DSN               *** SBV
         CLI   0(R2),0             ANY MORE LEFT          *** SBV
         BNE   MVCDSN              YES  TRY AGAIN         *** SBV
NOSCR    EQU   *
         L     R2,AREC54           GET REC ADDR.          *** SBV
         USING SMFREC,R2           ADDRESSABLILITY        *** SBV
         MVC   RECRET,RCFIELD      RETURN CODE            *** SBV
     SPACE 2
         TIME  BIN
  SPACE
         STCM  R0,15,RECTIMEB      TIME WE ARE FINISHED   *** SBV
         STCM  R1,15,RECDATE       DATE  DTO.             *** SBV
         L     R14,16              CVT
         L     R14,X'C4'(R14)      SMCA
         MVC   RECSID,16(R14)      MOVE SYSID             *** SBV
NOPXX    NOP   NOPREC54            INST. TO ZAP           *** SBV
         SPACE
         SMFWTM (R2)               WRITE SMFRECORD        *** SBV
  SPACE
NOPREC54 EQU   *
         DROP  R2
         LTR   R4,R4                WAS TRACK ZERO COPIED ? *** SBV
         BZ    NOOFF                NO
         TM    VSAMSW,X'04'         WAS NEW VOLID ?        *** SBV
         BZ    NOOFF                NO DONT SET OFFLINE    *** SBV
         SPACE 2
         MODESET KEY=ZERO,MODE=SUP
    SPACE
         NI    3(R4),255-(128+32)   SET OFFLINE
         XC    28(6,R4),28(R4)      CLEAR VOLSER
        SPACE
         MODESET KEY=NZERO,MODE=PROB
     SPACE 2
         WTO   'SQUISH --> TARGET DEVICE IS SET OFFLINE',ROUTCDE=1
     SPACE 2
NOOFF    EQU   *
         SPACE 2
         SR    R15,R15                                *** SBV
         IC    R15,RCFIELD         SET RC              *** SBV
         L     RD,SAVE+4          RESTORE OLD SAVE.           WMT 04/76
         RETURN (14,R12),,RC=(15)   RETURN TO SYSTEM           *** SBV
         SPACE
WORN     EQU   *
         MVC   WTOXXXX+16(44),0(R2)         SET DSNAME INTO MESSAGE
WTOXXXX  WTO   '                                            WAS NOT SCRX
               ATCHED',ROUTCDE=1
         B     WORN1
    SPACE
   SPACE 2
         LTORG
IXSW     DC    X'00'
IX       EQU   X'01'
         DS   0D
A        DC   ((8192)-(*-X001520))X'00'
         EJECT
         SQUISHSV DSECT=NO        DEFINITIONES               WMT 04/76
         SPACE 3
         IHAPSA
         IHAASCB
SVSAM    DSECT
SVSAMDSN DS   CL44
SVSAMCCH DS   CL5
SVSAMLN  EQU  *-SVSAM
  SPACE 4
TVSAM    DSECT
TVSAMDSN DS   CL44             DSN OF TARGET DSCB         *** SBV
TVSAMTP  DS   CL1              TYPE OF DSCB
TVSAMCCH DS   XL5              ITS CCHHR
TVSAMPT  DS   XL5              POINTER
TVSAMLN  EQU  *-TVSAM          LENGTH
         SMFREC SUB=3
         END   X001520
./  ADD  NAME=QX01521
QX01521  TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (SQUSTAT)'
QX01521  INSQUISH
         ENTRY R0WRT,TRKWRT,TRKTOT
         USING SAVE,R13
R0WRT    DS    0H
         USING *,15
         SAVE  (14,12)
         LA    2,R0TOT
         B     SCOMMON
         DROP  15
TRKWRT   DS    0H
         USING *,15
         SAVE  (14,12)
         LA    2,TKTOT
         DROP  15
SCOMMON  BALR  12,0
         USING *,12
         L     3,0(2)
         LA    3,1(3)
         ST    3,0(2)
         RETURN                        (14,12),RC=0
         DROP  12
TRKTOT   DS    0H
         SAVE  (14,12)
         LR    12,15
         USING TRKTOT,12
         L     2,R0TOT
         CVD   2,DBWD
         MVC   R0CNT(8),=X'4020202020202120'
         ED    R0CNT(8),DBWD+4
         L     2,TKTOT
         CVD   2,DBWD
         MVC   TRKCNT(8),=X'4020202020202120'
         ED    TRKCNT(8),DBWD+4
         WTO   MF=(E,WTP)
         SPACE 2
         L     R2,AREC54           GET REC 54 ADDR.
         USING SMFREC,R2
         MVC   RECNTRKS,TKTOT      SAVE TOTAL NBR.
         MVC   RECRECZ,R0TOT       REC. ZERO NBR.
         DROP  R2
    SPACE 2
         RETURN (14,12),RC=0
R2       EQU   2
R0       EQU   0
R15      EQU   15
R13      EQU   13
DBWD     DS    D
R0TOT    DC    F'0'
TKTOT    DC    F'0'
WTP      WTO   'XXXXXXXX TRACKS WRITTEN;YYYYYYYY R0 WRITTEN',          +
               ROUTCDE=11,MF=L
TRKCNT   EQU   WTP+4
R0CNT    EQU   WTP+28
         LTORG
         SQUISHSV
LK       EQU    *
         SMFREC SUB=3
         END
./  ADD  NAME=QX01522
QX01522  TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (GETVTOCS)'
QX01522 INSQUISH                                              WMT 04/76
         USING QX01522,RF         SET UP INITIAL ADDR.        WMT 04/76
         ST    RC,X5              SAVE OLD BASE REGISTER.     WMT 04/76
         ST    R7,X7              SAVE OLD BASE REGISTER.     WMT 04/76
         ST    RB,XXX000          SAVE RETURN ADDRESS.        WMT 06/76
         DROP RF                  DROP TEMP BASE.             WMT 04/76
         LR    RC,RF              GET STARTING ADDR.          WMT 04/76
         USING QX01522,RC         SET UP ADDRESSING.          WMT 04/76
         USING SAVE,RD            SET UP COMMON ADDR.         WMT 04/76
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
R14      EQU   14
RF       EQU   15                                             WMT 12/75
R15      EQU   15                                             WMT 12/75
*        THIS IS THE QX01522 SUBROUTINE
         LA    R1,FMT1         GET AREA ADDR                  *** SBV
         LA    R0,4(R4)        GET CCHHR ADDR                 *** SBV
         BAL   R14,QX01530     READ THE DSCB
         XC    INEXTS(16*8),INEXTS     CLEAR EXTENTS
         LA    9,FMT1+105      POINT TO FIRST EXTENT
         LA    10,INEXTS       POINT TO IN CORE LIST
         LA    8,3             MAX OF THREE EXTENTS IN FMT 1
MVEXT11  MVC   0(8,10),2(9)    MOVE THE EXTENT
         LA    10,8(10)        INCR. 10
         LA    9,10(9)         INCR 9
         BCT   8,MVEXT11       KEEP IT UP
         LA    3,FMT1+135      ADDRESS FOR FMT 3 DSCB
         TM    3(4),X'80'      SEE IF IS
         BZ    NOTIS1          IF NOT, THEN FORGET IT
         CLC   0(L'ABSAD,3),ZEROES     IS THIS A ZERO CCHHR
         BE    NOTIS1                  IF SO THEN DON'T MESS
         LA    R1,FMT2         GET AREA ADDR                  *** SBV
         LA    R0,0(R3)        GET CCHHR                      *** SBV
         BAL   R14,QX01530     READ DSCB                      *** SBV
         LA    3,FMT2+135      POINT TO FMT 3 DSCB
NOTIS1   CLC   0(5,3),ZEROES   IS THERE A FMT 3
         BE    GETOUT             IF NONE GO BACK.            WMT 04/76
         LA    R1,FMT3         GET AREA ADDR                  *** SBV
         LA    R0,0(R3)        GET CCHHR                      *** SBV
         BAL   R14,QX01530     READ DSCB                      *** SBV
         LA    8,4             4 EXTENTS
         LA    9,FMT3+4        START OF 4TH EXTENT
MVEXT21  MVC   0(8,10),2(9)    MOVE AN EXTENT
         LA    10,8(10)        INCR 10
         LA    9,10(9)         INCR 9
         BCT   8,MVEXT21       KEEP IT UP
         LA    8,9             9 EXTENTS
         LA    9,FMT3+45       START OF 8TH EXTENT
MVEXT22  MVC   0(8,10),2(9)    MOVE THE EXTENT
         LA    10,8(10)        UPDATE 10
         LA    9,10(9)         UPDATE 9
         BCT   8,MVEXT22       KEEP IT UP
GETOUT   DS    0H                                             WMT 04/76
         L     RB,XXX000          RESTORE RETURN ADDR.        WMT 06/76
         L     R7,X7              RESTORE OLD BASE.           WMT 04/76
         L     RC,X5              RESTORE OLD BASE.           WMT 04/76
         BR    11              AND RETURN
         SPACE 2
         DC    F'0'
QX01530  ST    R14,*-4                 SAVE RETURN            *** SBV
         L     R15,AQX01530            GET EP
         BALR  R14,R15                 LINK
         CH    R15,=H'4'               ERROR ?                *** SBV
         BH    CRASH                   ABEND                  *** SBV
         L     R14,QX01530-4           RETURN ADDR            *** SBV
         BR    R14                     RETURN
         SPACE 2
X5       DC    F'0'               RC SAVE AREA.               WMT 04/76
X7       DC    F'0'               RC SAVE AREA.               WMT 04/76
XXX000   DC    F'0'               SAVE RETURN ADDR.           WMT 06/76
         LTORG
         EJECT
         SQUISHSV                 WMT 04/76
LK       EQU   *         DUMMY ENTRY       *** SBV
         END   QX01522                                        WMT 04/76
./  ADD  NAME=QX01523
QX01523  TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (ABSALC)'
QX01523  INSQUISH                                            WMT 04/76
         USING QX01523,RF         SET UP ADDRESSING.         WMT 04/76
         ST RC,X5                 SAVE OLD BASE REGISTER.    WMT 04/76
         ST R7,X7                 SAVE OLD BASE REGISTER.    WMT 04/76
         ST    RE,XXX000          SAVE RETURN ADDR.           WMT 06/76
         DROP RF                  DROP OLD BASE.             WMT 04/76
         LR    RC,RF              GET START ADDR.            WMT 04/76
         USING QX01523,RC         SET UP ADDRESSING.         WMT 04/76
         USING SAVE,RD            SET UP COMMON ADDR.        WMT 04/76
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
R10      EQU   10                                             WMT 12/75
R11      EQU   11                                             WMT 12/75
R12      EQU   12                                             WMT 12/75
R13      EQU   13                                             WMT 12/75
R14      EQU   14                                             WMT 12/75
R15      EQU   15                                             WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
RF       EQU   15                                             WMT 12/75
         ST    RE,SAV14          SAVE RETURN ADDRESS.         WMT 12/75
         LH    RB,0(0,R1)         GET STARTING CYL.           WMT 12/75
         MH    11,TRKPCYL
         AH    11,2(1)         GET STARTING TRL
         LH    10,4(1)         GET ENDING CYL
         MH    10,TRKPCYL
         AH    10,6(1)         ADD ENDING TRK
         LA    10,1(10)        INCR.
         SR    10,11           GET LENGTH
         STH   10,TRKALC       SAVE # OF TRACKS IN EXTENT
         L     R15,FREESPAC    GET FREE SPACE
         AR    R11,R15         GET TRK ADDR.
ABSLOOP  EQU   *
         CLI   0(11),X'FF'     IS THIS TRACK ALREADY ALLOCATED
         BE    BADNEWS         IF SO, VTOC PROBABLY HERE
         MVI   0(11),X'FF'     SET IT ALLOCATED
         LA    11,1(11)        INCR. 11
         BCT   10,ABSLOOP      KEEP    IT UP
         LA    R15,FMT5           LOAD F5                     *** SBV
         CLI   MRGSW,X'D4'        IS IS MERGE?                WMT 12/75
         BNE   ENDLOOP            GO AROUND.                  WMT 12/75
         LA    R14,STAD           IS LOADED IF VTOC ALLOCATE  *** SBV
         CR    R14,R1             IS THIS THE VTOC ALLOCATE?  *** SBV
         BNE   ENDLOOP            NO RETURN.                  *** SBV
         L     R9,FREESPAC        MOVE 'FF' TO FREESPACE.     WMT 12/75
         L     R2,ALLTRKS                                     WMT 12/75
ALOCLOOP DS    0H                                             WMT 12/75
         MVI   0(R9),X'FF'        ALLOCATE SPACE.             WMT 12/75
         LA    R9,1(0,R9)         INCR REG R9.                WMT 12/75
         BCT   R2,ALOCLOOP        KEEP ON DOING IT.           WMT 12/75
LR6ALL   L     R6,ALLTRKS         SAY THEY ARE ALL ALLOCATED. WMT 12/75
         L     R9,FREESPAC        LOAD R9 WITH ADDR FRESPACE  WMT 12/75
         LA    R2,8               8 EXTENTS.                  WMT 12/75
         LA    R3,4(R15)          LOAD ADDR OF FREESPACE.     WMT 12/75
         BAL   R4,FREEIT          CLEAR FREE SPACE.           WMT 12/75
         LA    R2,18              18 MORE EXTENTS.            WMT 12/75
         LA    R3,45(R15)         START OF MORE FREE EXTENTS. WMT 12/75
         BAL   R4,FREEIT          CLEAR THE REST.             WMT 12/75
        SPACE 2
GNF5     EQU   *                                         *** DATEV
         ICM   R15,15,INPUT5      GET NEXT F5                 *** SBV
         BZ    ENDLOOP            FINISH                      *** SBV
         L     R4,0(R15)          GET NEXT                    *** SBV
         ST    R4,INPUT5          SAVE FOR LATER              *** SBV
         LA    R15,4(R15)         DROP CHAIN FIELD       *** DATEV
         B     LR6ALL             TRY AGAIN                   *** SBV
   SPACE 2
ENDLOOP  DS    0H                                             WMT 12/75
         XR    RF,RF              CLEAR RETURN CODE.         WMT 04/76
ENDLP1   DS    0H                                            WMT 04/76
         L     RE,SAV14           LOAD RETURN ADDRESS.        WMT 12/75
         L     RE,XXX000          RESTORE RETURN ADDR.        WMT 06/76
         L     R7,X7              RESTORE OLD BASE ADDR.     WMT 04/76
         L     RC,X5              RESTORE OLD BASE ADDR.     WMT 04/76
         BR    RE                 RETURN.                     WMT 12/75
FREEIT   DS    0H                                             WMT 12/75
         CLC   0(5,R3),ZEROES     EXTENT ZERO?                WMT 12/75
         BE    GNF5               TRY NEXT                *** DATEV
         LH    RA,0(0,R3)         LOAD EXTENT BEG.            WMT 12/75
         AR    RA,R9              POINT TO FREESPACE AREA.    WMT 12/75
         LH    RB,2(0,R3)         LOAD NO OF CYLS.            WMT 12/75
         MH    RB,TRKPCYL         MAKE IT TRACKS.             WMT 12/75
         SR    R5,R5              CLEAR R5.                   WMT 12/75
         IC    R5,4(R3)           INSERT LEFT OVER TRACKS.    WMT 12/75
         AR    RB,R5              TOTAL NO FREE TRKSL.        WMT 12/75
FREELOOP DS    0H                                             WMT 12/75
         MVI   0(RA),X'00'                                    WMT 12/75
         SH    R6,=H'1'           DECREMENT NUMBER OF TRKS ALCWMT 12/75
         LA    RA,1(0,RA)         INCR REG A.                 WMT 12/75
         BCT   RB,FREELOOP                                    WMT 12/75
         LA    R3,5(0,R3)         LOAD NEXT EXTENT.           WMT 12/75
         BCT   R2,FREEIT                                      WMT 12/75
         STH   R6,TRKALC          SAVE NUMBER OF TRKS ALLOCATEWMT 12/75
         BR    R4                                             WMT 12/75
 SPACE
BADNEWS  EQU   *
         MVC   BADCPY,FMT1        MOVE DATA SET NAME.         WMT 12/75
         LA    1,BADCPY-1         MSG FOR BAD COPY.           WMT 12/75
*        CALL QX01527 AS IF IT WERE BAL FROM THIS ROUTINE.    WMT 04/76
         L     RF,=V(QX01527)     GET STARTING ADDRESS.       WMT 04/76
         BALR  RB,RF              CALL QX01527.               WMT 04/76
         MVI   3(4),0             SAY WE COPYED IT.           WMT 12/75
         SPACE 2
         MVC   WTO+19(44),FMT1
WTO      WTO   'SQUISH -->                                             X
                WOULD CAUSE OVERLAY,TERMINATED',ROUTCDE=1
     SPACE 2
         LA    RF,4               SET ERROR RC.              WMT 04/76
         B     ENDLP1                                        WMT 04/76
         EJECT
X5       DC    F'0'               RC SAVE AREA.              WMT 04/76
X7       DC    F'0'               RC SAVE AREA.              WMT 04/76
XXX000   DC    F'0'               RETURN ADDRESS.             WMT 06/76
         LTORG
         EJECT
         SQUISHSV                                            WMT 04/76
LK       EQU  *                   DUMMY ENTRY        *** SBV
         END QX01523                                         WMT 04/76
./  ADD  NAME=QX01524
QX01524  TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (TMPTST)'
QX01524  INSQUISH
         SAVE  (14,12)                 SAVE REGS
         BALR  12,0                    12 IS BASE
         USING *,12
         ST    13,SAVE+4
         LA    13,SAVE
         L     2,0(1)                  ADDR. OF DATA SET NAME IN 2
         SR    15,15                   INITIALIZE RETURN CODE
         CLC   0(3,2),=C'SYS'          SEE IF SYS
         BNE   GOBACK                  IF NOT, THEN GET OUT
         CLC   8(2,2),=C'.T'
         BNE   GOBACK
         CLI   16(2),C'.'
         BNE   GOBACK
         PACK  DTEMP(4),3(6,2)         PACK THE NUMBER
         UNPK  ZTEMP(6),DTEMP(4)       UNPACK THE SAME NUMBER
         CLC   3(5,2),ZTEMP            IF EQUAL ORIG ARE NUMBERS
         BNE   GOBACK
         PACK  DTEMP(4),10(7,2)
         UNPK  ZTEMP(7),DTEMP(4)
         CLC   10(6,2),ZTEMP
         BNE   GOBACK
* IF WE GET HERE, ASSUME A TEMPOARY SYSTEM DATA SET
         LA    15,4                    SET RETURN CODE TO 4
GOBACK   EQU   *
         L     13,4(13)                RESTORE REG. 13
         RETURN (14,12),RC=(15)
SAVE     DS    18F
DTEMP    DS    CL4
ZTEMP    DS    CL7
         END
./  ADD  NAME=QX01525
QX01525  TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (ALCDS)'
QX01525  INSQUISH                                             WMT 04/76
         USING QX01525,RF         SET UP TEMP BASE.           WMT 04/76
         ST    RC,X5              SAVE OLD BASE ADDR.         WMT 04/76
         ST    R7,X7              SAVE OLD BASE ADDR.         WMT 04/76
         ST    RE,XXX000          SAVE RETURN ADDR.           WMT 06/76
         DROP RF                  DROP OLD BASE.              WMT 04/76
         LR    RC,RF              SET UP START ADDR.          WMT 04/76
         USING QX01525,RC         SET UP ADDRESSING.          WMT 04/76
         USING SAVE,RD            SET UP COMMON ADDRESSING.   WMT 04/76
         L     RF,RGSAV           RESTORE RF                  WMT 04/76
         XC    SULFLAG,SULFLAG    CLEAR FLAG.                 WMT 04/76
         TM    FMT1+105,X'40'     TEST FOR SUL.               WMT 04/76
         BZ    NOTSUL             BR IF NOT SUL.              WMT 04/76
         MVI   SULFLAG,X'FF'      TURN ON SUL FLAG.           WMT 04/76
NOTSUL   DS    0H                                             WMT 04/76
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
RF       EQU   15                                             WMT 12/75
R15      EQU   15                                             WMT 12/75
R10      EQU   10                                             WMT 12/75
R11      EQU   11                                             WMT 12/75
R12      EQU   12                                             WMT 12/75
R13      EQU   13                                             WMT 12/75
R14      EQU   14                                             WMT 12/75
         STM   R15,R2,RGSAV      SAVE 15-2
         SPACE 2
         LTR   R1,R1           FIRST TIME ENTERED ?           *** SBV
         BNZ   NOCHCK          CHECKED ALLREADY               *** SBV
         CL    R1,INEXT+8      2. EXTENT IN DATASET ?         *** SBV
         BE    NOCHCK          NO  DONT CHECK                 *** SBV
         SPACE 2
         CALL  QX01533         LINK TO CHECK ROUTINE          *** SBV
         LTR   R15,R15         ALLOC POSSIBLE                 *** SBV
         BNZ   BLASTOUT        NO  SEND MESSAGE               *** SBV
         SPACE 2
NOCHCK   EQU   *
         LH    R10,TRKPCYL      GET TRACKS PER CYLINDER IN 10
         L     R11,=F'-1'
         AR    R11,R10           11 HAS LAST TRACK ADDR. ON CYL
         LH    R3,INEXT+4(R1)    GET ENDING CYL
         MR    R2,R10            GET REL CYL START
         CLI   SULFLAG,X'FF'      TEST FLAG.                  WMT 04/76
         BE    JUSTAD             BR IF SUL.                  WMT 04/76
         TM    3(R4),X'28'      NOT CYLINDER?
         BNZ   JUSTAD          IF NOT, ADD IN TRACKS
         AR    R3,R11            GET UP TO LAST TRK
         B     ALCOMM
JUSTAD   AH    R3,INEXT+6(R1)    ADD IN LAST TRACK
ALCOMM   LA    R3,1(R3)          NOW HAVE # OF LAST TRACK
         LH    R7,INEXT(R1)      GET STARTING CYL
         MR    R6,R10            GET REL CYL START
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    X10                BR IF SUL.                  WMT 04/76
         TM    3(R4),X'28'      CYLINDER?
         BZ    ALNOAD1         IF SO, BRANCH
X10      DS    0H                                             WMT 04/76
         AH    R7,INEXT+2(R1)    ADD IN FIRST TRK
ALNOAD1  SR    R3,R7             3 HAS # OF TRKS TO ALLOCATE
         AH    R3,TRKALC        TAKE TOAL NUMBER OF TRACKS *** SBV ***
         STH   R3,TRKALC        SAVE TRACKS ALLOCATED
         L     R6,PFMT5AD       GET START OF FREE EXTENT LIST
         LA    R15,PFMT5AD      GET ADDRESS OF FORMAT 5 ADDRESS
SPCLOK1  EQU   *
         TM    3(R4),X'20'      SYSCTLG DATA SET?
         BZ    NTCTLG02        IF NOT, NORMAL ALLOC
         CLC   OTVTCEND,4(R6)   SEE IF EXTENT PAST VTOC
         BNL   LKNXTFRE        IF NOT, LOOK AT NEXT FREE EXTENT
NTCTLG02 EQU   *
         LH    R5,8(R6)          GET TRKS ON CYL
         AH    R5,10(R6)         ADD LEFT OVER TRKS O END
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    X11                BR IF SUL.                  WMT 04/76
         TM    3(R4),X'10'      IS THIS FOR CYLINDER
         BO    ALNOAD2
X11      DS    0H                                             WMT 04/76
         AH    R5,6(R6)          ADD IN TRKS BEFORE CYL
ALNOAD2  CR    R3,R5             SEE IF ENOUGH SPACE
         BNH   SPCFND1         IF SO, WE'RE IN
LKNXTFRE EQU   *
         LR    R15,R6           SAVE REG. 6
         L     R6,0(R15)         POINT TO NEXT  FREE EXTENT
         LTR   R6,R6             MAKE SURE SOME LEFT
         BNZ   SPCLOK1         OH GOODIE
         SPACE
         LA    RF,4            YES, RC=4               *** SBV
         B     BLASTOUT        RETURN                  *** SBV
         SPACE
SPCFND1  LH    R9,4(R6)          GET EXTENT START
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    ALNOAD3            BR IF SUL.                  WMT 04/76
         TM    3(R4),X'10'      IS IT CYLINDER
         BNO   ALNOAD3
         AH    R9,6(R6)          ADD TRKS BEFORE CYL
ALNOAD3  LR    R0,R9             SAVE #
         SR    R8,R8             CLEAR 8 FOR DIVIDE
         DR    R8,R10            GET STARTING EXTENT ADDRESS
         STH   R9,OUTEXT(R1)     SAVE CYL START
         STH   R8,OUTEXT+2(R1)   & TRK START
         LR    R9,R0             GET START BACK
         AR    R9,R3             ADD IN # OF TRKS
         BCTR  R9,R0             REDUCE TO LAST TRACK ADDRESS
         SR    R8,R8             CLEAR 8 AGAIN
         DR    R8,R10            GET ENDING TRACK ADDRESS
         STH   R9,OUTEXT+4(R1)   SAVE ENDING CYL
         STH   R8,OUTEXT+6(R1)   SAVE    ENDING TRACK
         L     R7,FPFMT5AD      GET START OF FERE AREA
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    NOHDTRKS                                       WMT 04/76
         TM    3(R4),X'10'      SEE IF CYLINDER ALLOCATION
         BNO   NOHDTRKS        IF NOT,AT BEGINNING
         SR    R8,R8             CLEAR 8 FOR COMPARE
         CH    R8,6(R6)          SEE IF TRKS BEFORE CYL IS ZERO
         BE    NOHDTRKS        IF NOT, THEN GET OUT
         LH    R2,4(R6)          GET EXTENT START
         AH    R2,6(R6)          ADD TRKS BEFORE CYL
         AR    R2,R3             ADD TRACKS ALLOCATED
         STH   R2,4(R7)          SAVE START OF NEW EXTENT
         LH    R2,8(R6)          GET # OF CYLS BEFORE ALLOC
         SR    R2,R3             SUBTRACT THOSE ALLOC
         STH   R2,8(R7)          SAVE THEM IN NEW EXTENT
         AH    R2,10(R6)         ADD IN EXTRA TRACKS
         BZ    FXTHSEXT        IF ZERO, NO NEW EXTENT
         MVC   10(2,R7),10(R6)   MOVE EXTRA TRACKS OVER
*        ST    R7,0(R6)          KEEP LINKING                *** DATEV
*        LA    R7,12(R7)       GET NEXT EXTENT             *** DATEV
*        ST    R7,FPFMT5AD     STORE POINTER               *** DATEV
*        L     R7,0(R6)        RELOAD POINTER              *** DATEV
*        MVC   0(4,R7),FPFMT5AD RESET POINTER              *** DATEV
         SPACE
*        MVC   FPFMT5AD,0(R7)   MOVE FREE POINTER           *** DATEV
*        MVC   0(4,R7),0(R6)     MOVE EXT POINTER            *** DATEV
*        XC    6(2,R7),6(R7)     WIPE OUT TRKS BEFORE CYL
         L     R15,0(R6)       GET NEXT POINTER            *** SBV
         XC    6(2,R7),6(R7)     WIPE OUT TRKS BEFORE CYL
         ST    R7,0(R6)        STORE NEW POINTER           *** SBV
         ST    R15,0(R7)       AND CHAIN OLD POINTER       *** SBV
         LA    R7,12(R7)       GET NEXT EXTENT             *** SBV
         ST    R7,FPFMT5AD     STORE POINTER               *** SBV
FXTHSEXT XC    8(4,R6),8(R6)     WIPE OUT CYLS & EXT TRKS
         LA    RF,0            RC=0                    *** SBV
         B     BLASTOUT        GO BACK
NOHDTRKS EQU   *
         LH    R2,4(R6)          GE T EXTENT START
         AR    R2,R3             UP TO WHERE EXTENT WOULD END
         STH   R2,4(R6)          SAVE NEW EXTENT START
         LH    R2,8(R6)          GET # OF ORIG TRKS
         AH    R2,6(R6)          ADD IN TRKS BEFORE CYL
         SR    R2,R3             SUBTRACT THOSE ALLOCATEDC
         BP    HITIT1          IF A GOOD NUMBER, USE IT
         AH    R2,10(R6)         ADD IN TRKS AFTER CYL
         MVC   8(4,R6),ZEROES   CLEAR IT AND ONE BEFORE
         BP    HITIT2          GO STORE TRLS
         BZ    GIVEBACK        GIVE BACK EXTENT IF ZERO
         SPACE
         CLI   MRGSW,C'C'      COMPACT SPECIFIED ?     *** SBV
         BNE   CRASH           NO                      *** SBV
         LA    RF,4            YES, RC=4               *** SBV
         B     BLASTOUT        RETURN                  *** SBV
HITIT1   EQU   *
         LR    R3,R2             LOAD 3 WITH LEFT OVER TRACKS
         SR    R2,R2             CLEAR 2 FOR DIVIDE
         DR    R2,R10            GET CYLS AND LEFT OVER TRACKS
         MH    R3,TRKPCYL       GET BACK TRACKS ON CYL BOUNDARY
         STH   R3,8(R6)          STORE TRACKS ON CYL BOUNDARY
HITIT2   EQU   *
         STH   R2,6(R6)          STORE TRACKS BEFORE CYL
         LA    RF,0            RC=0                    *** SBV
         B     BLASTOUT        GET OUT
GIVEBACK EQU   *
*        IF ZERO WE JUST USED UP AN EXTENT & HAVE TO GIVE IT BACK
         XC    4(8,R6),4(R6)     WIPE OUT EXTENT INFO
         L     R2,0(R6)          GET NEXT ENTRY POINTER
         ST    R2,0(R15)         STORE IT IN LAST ENTRY
         ST    R7,0(R6)          SAVE IN MINE
         ST    R6,FPFMT5AD      MAKE NEW START
         LA    RF,0            RC=0                    *** SBV
BLASTOUT EQU   *
         LM    R0,R2,RGSAV+4    RESTORE 0-2                  *** SBV
         L     RE,XXX000          RESTORE RETURN ADDR.        WMT 06/76
         L     R7,X7              RESTORE OLD BASE.           WMT 04/76
         L     RC,X5              RESTORE OLD BASE.           WMT 04/76
         BR    R14              &RETURN
X5       DC    F'0'               RC SAVE AREA.               WMT 04/76
X7       DC    F'0'               R7 SAVE AREA.               *** SBV
XXX000   DC    F'0'               RETURN ADDR.                WMT 06/76
SULFLAG  DC    XL1'00'            SUL FLAG.                   WMT 04/76
         LTORG
         EJECT
         SQUISHSV                                             WMT 04/76
LK       EQU   *
         END QX01525                                          WMT 04/76
./  ADD  NAME=QX01526
QX01526  TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (VSAM)'
QX01526  INSQUISH
         DROP  R15
         STM   R14,R12,12(R13)   SAVE ALL REGS
         LR    R11,R15          LOAD BASE
         USING QX01526,R11
         USING SAVE,R13         SAVE AREA
         SPACE 2
         REGDEF R
  SPACE 2
         WTO   MF=(E,MSG2)        WRITE STARTING MESSAGE.
         RDJFCB (SYSUT1,,SYSUT2)  GET JFCBS.
         LTR   R15,R15            TEST RETURN CODE.
         BZ    JFCBOK             BR IF OK.
         WTO   MF=(E,MSG3)        WRITE ERROR MESSAGE.
         B     X                  EXIT.
JFCBOK   DS    0H
         OI    JFCB1+52,X'08'     DON'T REWRITE JFCB.
         OI    JFCB2+52,X'08'     DON'T REWRITE JFCB.
         MVC   JFCB1(44),DSNAME1  SET UP DSNAME.
         MVC   JFCB2(44),DSNAME1  SET UP DSNAME.
         OPEN  (SYSUT1,(INPUT),SYSUT2,(UPDAT)),TYPE=J OPEN.
         TM    SYSUT1+48,X'10'    TEST OPEN.
         BO    OPEN1              BR IF OPEN OK.
         WTO   MF=(E,MSG4)        WRITE ERROR MESSAGE.
         B     X
OPEN1    DS    0H
         TM    SYSUT2+48,X'10'    TEST OPEN.
         BO    OPEN2              BR IF OPEN OK.
         WTO   MF=(E,MSG5)        WRITE ERROR MESSAGE.
         B     X                  EXIT.
OPEN2    DS    0H
         L     R1,SYSUT2+44       GET DEB ADDRESS.
         L     R2,32(0,R1)        GET UCB ADDRESS.
         OC    VSAMCNT,VSAMCNT    TEST FOR NO VSAM  DSN.
         BNZ   HAVEVS             BR IF HAVE VSAM.
         WTO   MF=(E,MSG6)        WRITE MESSAGE.
         B     RETURN             BR TO EXIT.
HAVEVS   DS    0H
         L     R5,SYSUT2+44       ADDRESS OF DEB.
         MVC  CCHHR1(4),X'26'(R5) GET STARTING CCHH.
         MVI   R,X'01'            SET UP FOR RECORD 1.
         LA    R0,READCCW         GET READ CCW.
         ST    R0,IOB2CCW         SET UP FOR READ.
         LA    R1,IOB2            GET IOB ADDRESS OF SYSUT2.
         BAL   R14,IODISK         READ 1ST  RECORD.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         MVC   TRKCYL(2),DSCB+64  GET TRACKS/CYLINDER.
         XR    R15,R15            CLEAR FOR IC INSTRUCTION.
         IC    R15,DSCB+74        GET # DSCB'S/TRACK.
         STH   R15,DSCBTRK        SAVE FOR LATER.
         LH    R3,X'2A'(0,R5)     GET END OF EXTENT CC.
         LH    R4,TRKCYL          GET NUMBER OF TRKS/CYLINDER.
         MR    R2,R4
         AH    R3,X'2C'(0,R5)     ADD END OF EXTENT END TRK.
         LH    R7,X'26'(0,R5)     GET START OF EXTENT CC.
         MR    R6,R4
         AH    R7,X'28'(0,R5)     ADD START OF EXTENT TRACK.
         SR    R3,R7              GET TOTAL TRACKS - 1.
         A     R3,KBF1            GET TOTAL TRACK.
         MR    R14,R3
         STH   R15,TOTDSCB        SAVE FOR LATER.
         LA    R1,TVSAMLN         GET LENGTH OF EACH ENTRY.
         MR    R14,R1             COMPUTE GETMAIN LENGTH.
         ST    R15,TDSCBLN        SAVE LENGTH.
         GETMAIN R,LV=(15)        GET CORE FOR LIST.
         ST    R1,TDSCBLST        SAVE ADDRESS OF LIST.
         MVC   DSCBCNT,TOTDSCB    SET DSCB COUNTER.
         LH    R15,DSCBTRK        GET NUM DSCB PER TRACK.
         STC   R15,R              SET R TO HIGHEST RECORD.
         LR    R9,R1              SET TARGET LIST.
         USING TVSAM,R9           SET UP ADDRESSING.
SECREAD  DS    0H
         LA    R1,IOB2            GET IOB.
         BAL   R14,IODISK         READ DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         MVC   TVSAMDSN,DSCB      GET DATA SET NAME.
         MVC   TVSAMTP,DSCB+44    GET DSCB TYPE.
*                                                                     *
*        TEST FOR VSAM DSN.                                         *
*                                                                     *
         MVC   TVSAMCCH,CCHHR1    SAVE CCHHR OF DSCB.
         MVC   TVSAMPT,DSCB+135   GET POINTER.
         LA    R9,TVSAMLN(0,R9)   POINT TO NEXT ENTRY.
         BAL   R14,CNR            COMPUTE NEXT RECORD.
         LTR   R15,R15            TEST RETURN CODE.
         BZ    SECREAD            BR IF MORE DATA.
         DROP  R9
         L     R8,VSAMLIST        SET UP VSAM LIST.
         LH    R7,VSAMCNT         GET NUMBER OF VSAM DSN.
SWITCHLP DS    0H
         BAL   R12,SWITCH         SWITCH DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         LA    R8,SVSAMLN(0,R8)   POINT TO NEXT SOURCE ENTRY.
         BCT   R7,SWITCHLP        BR IF MORE DATA.
RETURN   DS    0H
         L     R2,VSAMLISL        GET LENGTH OF VSAM SOURCE LIST.
         LTR   R2,R2              TEST LENGTH.
         BZ    NOFREE1            BR IF NO CORE.
         L     R1,VSAMLIST        GET ADDRESS.
         SPACE 2
         FREEMAIN R,LV=(2),A=(1)
NOFREE1  DS    0H
         L     R2,TDSCBLN         GET DSCB TABLE LENGTH.
         LTR   R2,R2              TEST LENGTH.
         BZ    NOFREE2            BR IF NO CORE.
         L    R1,TDSCBLST         GET ADDRESS OF CORE.
         SPACE 2
         FREEMAIN R,LV=(2),A=(1)
NOFREE2  DS    0H
         TM    SYSUT1+48,X'10'    TEST OPEN.
         BNO   NOTOPEN1           BR IF NOT OPEN.
         SPACE 2
         CLOSE (SYSUT1)           CLOSE THE FILE.
         SPACE 2
NOTOPEN1 DS    0H
         TM    SYSUT2+48,X'10'    TEST OPEN.
         BNO   NOTOPEN2           BR IF NOT OPEN.
         CLOSE (SYSUT2)           CLOSE THE FILE.
NOTOPEN2 DS    0H
         LA    R1,MSG7            GET ENDING ADDRESS.
         CLI   RUN,X'00'          TEST RUN FLAG.
         BE    ALLOK              BR IF ALL VSAM REPOSITIONED.
         LA    R1,MSGH            GET ALTERNATE ENDING ADDRESS.
ALLOK    DS    0H
         WTO   MF=(E,(R1))        WRITE ENDING MESSAGE.
         SPACE 2
         RETURN (14,12)
  SPACE 2
X        DS    0H
         WTO   MF=(E,MSG8)        WRITE BAD MESSAGE.
         DC    XL2'0000'          ABEND.
         EJECT
*                                                                     *
*        COMPUTE NEXT RECORD.                                         *
*                                                                     *
*        R0,R1 SCRATCH.                                               *
*        R14   RETURN ADDRESS.                                        *
*        R15   RETURN CODE. 0=OK, 4=EOF.                              *
*                                                                     *
CNR      DS    0H
         XR    R1,R1              CLEAR FOR IC INSTRUCTION.
         IC    R1,R               GET RECORD NUMBER.
         BCT   R1,RECOK           BR IF ON THIS TRACK.
         LH    R1,DSCBTRK         GET NUMBER OF DSCB/TRK.
         LH    R0,HH              GET HEAD NUMBER.
         A     R0,KBF1            ADD 1 TO HEAD.
         STH   R0,HH              SAVE HEAD NUMBER.
         CH    R0,TRKCYL          GONE OVER CYLINDER.
         BL    RECOK              BR IF ON THIS CYLINDER.
         XC    HH,HH              SET HEAD TO ZERO.
         LH    R0,CC              GET CYLINDER NUMBER.
         A     R0,KBF1            ADD 1.
         STH   R0,CC              SAVE CYLINDER NUMBER.
RECOK    DS    0H
         STC   R1,R               SAVE RECORD NUMBER.
         LH    R1,DSCBCNT         GET DSCB COUNTER.
         XR    R15,R15            CLEAR RETURN CODE.
         BCT   R1,MORE            BR IF MORE DATA.
         LA    R15,4              SET END OF DATA RETURN CODE.
MORE     DS    0H
         STH   R1,DSCBCNT         SAVE DSCB COUNTER.
         BR    R14                RETURN TO THE CALLER.
         EJECT
*                                                                     *
*        SWITCH FMT-1.                                                *
*                                                                     *
SWITCH   DS    0H
         XC    PNTA,PNTA          CLEAR POINTER A.
         XC    RPA,RPA            CLEAR REPLACEMENT A.
         LH    R1,TOTDSCB          GET NUM DSCB'S.
         L     R15,TDSCBLST       GET TARGET DSCB TOTAL.
SWLP1    DS    0H
         USING SVSAM,R8           SET UP ADDRESSING.
         USING TVSAM,R15          SET UP ADDRESSING.
         CLC   SVSAMCCH,TVSAMCCH  EQUAL CCHHR. AS S VSAM.
         BE    HAVEVCC            YES.
         LA    R15,TVSAMLN(0,R15) POINT TO NEXT ENTRY.
         BCT   R1,SWLP1           BR IF MORE ENTRIES.
         MVC   MSGA+14(44),SVSAMDSN    GET DSN.
         MVI   RUN,X'FF'          SET ERROR FLAG.
         LA    R1,MSGA            SET UP MSG ADDR.
         B     XS                 EXIT OK.
HAVEVCC  DS    0H
         ST    R15,VSAMA          SAVE ADDR.
         LH    R1,TOTDSCB         GET TOTAL NUMBER OF DSCBS.
         L     R15,TDSCBLST      GET LIST TARGET DSCBS.
SWLP2    DS    0H
         CLC   TVSAMDSN,SVSAMDSN  DSN'S EQUAL.
         BE    SAMEDSN            BR IF SO.
         LA    R15,TVSAMLN(0,R15) POINT TO NEXT ENTRY.
         BCT   R1,SWLP2           BR IF MORE ENTRIES IN THE LIST.
         MVC   MSGB+14(44),SVSAMDSN MOVE IN DSN.
         MVI   RUN,X'FF'          SET ERROR FLAG.
         LA    R1,MSGB            GET ADDRESS OF MSG.
         B     XS                 ERROR OK.
SAMEDSN  DS    0H
         ST    R15,RPA            SAVE ADDRESS.
         CLC   SVSAMCCH,TVSAMCCH  TEST CCHHR.
         BNE   NOTSAME            BR IF NOT THE SAME.
         MVC   MSGC+14(44),SVSAMDSN   MOVE IN DSN.
         LA    R1,MSGC            SET WTO.
         B     XS                 EXIT.
NOTSAME  DS    0H
         L     R15,VSAMA          SAVE POSSIBLE F2   *** SBV
         CLI   TVSAMTP,X'F1'      TEST TYPE.
         BE    TYPE1              BR IF TYPE 1.
         CLI   TVSAMTP,X'00'      TEST FOR TYPE 0.
         BE    TYPE1              BR IF TYPE 0.
         LA    R14,TVSAMCCH        SAVE ADDRESS OF T CCHHR.
         LH    R1,TOTDSCB         GET TOTAL DSCB.
         L     R15,TDSCBLST       GET START OF LIST.
SWLP3    DS    0H
         CLC   0(5,R14),TVSAMPT   TEST POINT = CCHHR.
         BE    THISONE            BR IF THIS ONE.
         LA    R15,TVSAMLN(0,R15) POINT TO NEXT ENRY.
         BCT   R1,SWLP3           BR IF MORE DATA IN LIST.
         MVC   MSGD+14(44),SVSAMDSN MOVE IN DSN.
         MVI   RUN,X'FF'          SET ERROR FLAG.
         WTO   MF=(E,MSGD)
         WTO   MF=(E,MSGE)        WRITE ERROR MESSAGE.
         B     BADSW              ERROR.
THISONE  DS    0H
         ST    R15,PNTA           SAVE ADDRESS.
  SPACE
TYPE1    DS    0H
         L     R15,VSAMA           GET POSSIBLE F2 *** SBV
         LA    R14,READCCW        GET READ CCW.
         ST    R14,IOB2CCW        STORE IN IOB.
         MVC  CCHHR1(5),SVSAMCCH  SET UP TO READ REPLACED DSCB.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         READ.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              BR IF ERROR.
         MVC   DSCBB,DSCB         SAVE DSCB.
         L     R15,RPA            GET CURRENT VSAM LOCATION.
         MVC  CCHHR1(5),TVSAMCCH  SET UP CCHHR.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         READ.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              ERROR.
         MVC   DSCBA,DSCB         SAVE DSCB.
         L     R15,PNTA           GET POINTER ADDRESS.
         LTR   R15,R15            TEST FOR ADDRESS.
         BZ    NOPOINT            BR IF NO POINTER.
         MVC  CCHHR1(5),TVSAMCCH  GET CCHHR OF DSCB.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         READ DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              BR IF ERROR.
         L     R15,RPA            GET REPLACE DSCB ADDR.
         MVC   DSCB+135(5),TVSAMCCH SET POINTER CCHHR.
         L     R15,PNTA           LOAD F1-EXTENDED            *** SBV
         MVC   TVSAMPT,DSCB+135   RESET F3/F2 POINTER         *** SBV
         LA    R1,WRITECCW        GET ADDR OF WRITE CCW.
         ST    R1,IOB2CCW         SET IOB.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         WRITE DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              ERROR.
NOPOINT  DS    0H
         LA    R1,WRITECCW         GET READ CCW.
         ST    R1,IOB2CCW         SET IOB.
         MVC   DSCB,DSCBB         GET REPLACED DSCB.
         L     R15,RPA            GET RPA ADDRESS.
         MVC  CCHHR1(5),TVSAMCCH  SET CCHHR.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         WRITE DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              ERROR.
         MVC   DSCB,DSCBA         GET VSAM DSCB.
         MVC  CCHHR1(5),SVSAMCCH  GET VSAM CCHHR.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         WRITE DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              BR IF ERROR.
         MVC   MSGF+14(44),SVSAMDSN MOVE IN DSN.
         LA    R1,MSGF
         L     R15,RPA                  GET REPLACE ADDRESS.
         L     R14,VSAMA
         MVC   XXXX(45),0(R15)
         MVC   XXXX+45(5),50(R15)
         MVC   0(045,R15),0(R14)  SAVE
         MVC   50(5,R15),50(R14)
         MVC   0(045,R14),XXXX    SAVE
         MVC   50(5,R14),XXXX+45
XS       DS    0H
         WTO   MF=(E,(R1))
         XR    R15,R15            CLEAR RETURN CODE.
         B     RETS
BADSW    DS    0H
         LA    R15,4              SET ERROR CODE.
RETS     DS    0H
         BR    R12                RETURN TO THE CALLER
         DROP R8
         DROP R15
         EJECT
*                                                                     *
*        IODISK                                                       *
*        R1    CONTAINS THE IOB ADDRESS.                              *
*        R14   RETURN ADDRESS.                                        *
*        R15   RETURN CODE, 0= I/O OK, 4= ERROR.                      *
IODISK   DS    0H
         ST    R14,SAVER14        SAVE RETURN ADDRESS.
         MVC   35(5,R1),CCHHR1    SET CCHHR.
         XC    ECB,ECB            CLEAR ECB FOR I/O.
*        EXCP  (R1)               SIMULATE EXCP.
         SVC   0                  ISSUE I/O.
         WAIT  1,ECB=ECB          WAIT FOR COMPLETION.
         XR    R15,R15            CLEAR RETURN CODE.
         CLI   ECB,X'7F'          TEST I/O.
         BE    IODISKR            BR IF OK.
         WTO   MF=(E,MSG1)        I/O ERROR MESSAGE.
         LA    R15,4              SET ERROR RETURN CODE.
IODISKR  DS    0H
         L     R14,SAVER14        GET RETURN ADDRESS.
         BR    R14                RETURN TO CALLER.
         TITLE 'H A L F    W O R D    D A T A    A R E A S.'
*                                                                     *
*        MESSAGES.                                                    *
*                                                                     *
MSG1     WTO   ' SQUISH   I/O ERROR IN VSAM CHECK.',MF=L,              X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG2     WTO   ' SQUISH   VSAM CHECK STARTING.',MF=L,                  X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG3     WTO   ' SQUISH   ERROR IN READING JFCB''S.',MF=L,             X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG4     WTO   ' SQUISH   ERROR IN OPEN FOR SYSUT1.',MF=L,             X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG5     WTO   ' SQUISH   ERROR IN OPEN FOR SYSUT2.',MF=L,             X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG6     WTO   ' SQUISH   NO VSAM DATA SETS FOUND ON SYSUT1',          X
               MF=L,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG7     WTO   ' SQUISH   VSAM CHECK FININSHED NORMALLY.',MF=L,        X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG8     WTO   ' SQUISH   VSAM CHECK ENDED ABNORMALLY.',MF=L,          X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG9     WTO   ' SQUISH   VSAM CHECK HAS MORE THAN 100 VSAM DATA SETS',X
               MF=L,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGA     WTO   ' SQUISH   12345678901234567890123456789012345678901234 X
               NOT REPOSITIONED, VTOC WAS MOVED.',MF=L,                X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGB     WTO   ' SQUISH   12345678901234567890123456789012345678901234 X
               NOT REPOSITIONED, NOT FOUND ON TARGET PACK.',MF=L,      X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGC     WTO   ' SQUISH   12345678901234567890123456789012345678901234 X
               WAS ALREADY IN THE CORRECT POSITION IN THE VTOC.',MF=L, X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGD     WTO   ' SQUISH   12345678901234567890123456789012345678901234 X
               NOT REPOSITIONED, ERROR IN VTOC.',MF=L,                 X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGE     WTO   ' SQUISH   ERROR ON TARGET PACK AT CCHHR FOR VSAM DSN.',X
               MF=L,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGF     WTO   ' SQUISH   12345678901234567890123456789012345678901234 X
               SUCESSFULLY REPOSITIONED.',MF=L,                        X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGH     WTO   ' SQUISH   NOT ALL VSAM DATA WERE REPOSITIONED, CHECK THX
               E LISTING.',MF=L,                                       X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
TOTDSCB  DC    H'0'               TOTAL NUMBER OF DSCB'S IN VTOC.
DSCBTRK  DC    H'0'               NUMBER OF DSCB'S PER TRACK.
DSCBCNT  DC    H'0'               DSCB LOOP COUNTER.
TRKCYL   DC    H'0'               NUMBER OF TRACKS PER CYLINDER.
SECTOR   DC    H'0'               ONLY FIRST BYTE USED.
         TITLE 'F U L L     W O R D     D A T A     A R E A S.'
CCHHR1   DS    0F
CC       DC    XL2'0000'          CYLINDER ADDRESS.
HH       DC    XL2'0000'          HEAD ADDRESS.
R        DC    XL1'00'            RECORD NUMBER.
RUN      DC    XL1'00'            ^=0 NOT ALL REPOSTIONED.
ECB      DC    F'0'               EVENT CONTROL BLOCK.
SAVER14  DC    F'0'               SAVE AREA FOR REGISTER 14.
KBF1     DC    F'1'               CONSTANT 1.
         DS    0F
LIST1    DC    XL1'87',AL3(JFCB1)
LIST2    DC    XL1'87',AL3(JFCB2)
*                                                                     *
DSCB     DC    XL140'00'          I/O DSCB.
*                                                                     *
DSCBA    DC    XL140'00'          HOLDS VSAM DSCB.
*                                                                     *
DSCBB    DC    XL140'00'          HOLDS REPLACED DSCB.
*                                                                     *
JFCB1    DC    44F'0'             JFCB FOR SYSUT1.
JFCB2    DC    44F'0'             JFCB FOR SYSUT2.
TDSCBLST DC    AL4(0)             ADDRESS OF DSCB LIST.
TDSCBLN  DC    F'0'               LENGTH OF DSCB LIST.
DSNAME1  DC    44XL1'04'          VTOC DSNAME.
PNTA     DC    AL4(0)             POINTER ADDRESS.
RPA      DC    AL4(0)             REPLACED ADDRESS.
VSAMA    DC    AL4(0)             VSAM ADDR.
         EJECT
SYSUT1   DCB   DDNAME=SYSUT1,IOBAD=IOB1,MACRF=(E),EXLST=LIST1
         EJECT
SYSUT2   DCB   DDNAME=SYSUT2,IOBAD=IOB2,MACRF=(E),EXLST=LIST2
         TITLE 'D O U B L E     W O R D     D A T A     A R E A S.'
*                                                                     *
*        READ CCW'S.                                                  *
*                                                                     *
READCCW  CCW   X'31',CC,X'40',X'0005' SEARCH FOR ID EQUAL.
         CCW   X'08',READCCW,X'00',X'0000' TIC TO SEARCH.
         CCW   X'0E',DSCB,X'00',X'008C'  READ KEY AND DATA.
*                                                                     *
*        WRITE CCW'S.                   *
*                                                                     *
WRITECCW CCW   X'31',CC,X'40',X'0005' SEARCH FOR ID EQUAL.
         CCW   X'08',WRITECCW,X'00',X'0000' TIC TO SEARCH.
         CCW   X'0D',DSCB,X'00',X'008C' WRITE DSCB.
*                                                                     *
*        IOB FOR SYSUT1.                                              *
*                                                                     *
IOB1     DC    5D'0'
         ORG   IOB1
         DC    XL2'4200'
         ORG   IOB1+5
         DC    AL3(ECB)
         ORG   IOB1+16
IOB1CCW  DC    AL4(0)             STARTING CCW.
         ORG   IOB1+21
         DC    AL3(SYSUT1)
         ORG
*                                                                     *
*        SYSUT2 IOB.                                                  *
*                                                                     *
IOB2     DC    5D'0'
         ORG   IOB2
         DC    XL2'4200'
         ORG   IOB2+5
         DC    AL3(ECB)           ECB POINTER.
         ORG   IOB2+16
IOB2CCW  DC    AL4(0)             STARTING CCW.
         ORG   IOB2+21
         DC    AL3(SYSUT2)
         ORG
XXXX     DC    CL55' '
         TITLE 'D S E C T S.'
SVSAM    DSECT
SVSAMDSN DS    CL44               SOURCE VSAME DSN.
SVSAMCCH DS    XL5                CCHHR OF SOURCE FMT-1 DSCB.
SVSAMLN  EQU   *-SVSAM            LENGTH OF 1 ENTRY.
         SPACE 5
TVSAM    DSECT
TVSAMDSN DS    CL44               TARGET DATA SET NAME.
TVSAMTP  DS    CL1                TYPE OF DSCB.
TVSAMCCH DS    XL5                CCHHR OF TARGET FMT-1 DSCB.
TVSAMPT  DS    XL5                CCHHR OF TARGET FMT-1 POINTER.
TVSAMLN  EQU   *-TVSAM            LENGTH OF 1 ENTRY.
         SQUISHSV
LK       EQU   *
         END   QX01526
./  ADD  NAME=QX01527
QX01527  TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (WRTLINE)'
QX01527  INSQUISH                                             WMT 04/76
         USING QX01527,RF         SET UP TEMP BASE.           WMT 04/76
         ST    RC,X5              SAVE OLD BASE ADDR.         WMT 04/76
         ST    R7,X7              SAVE OLD BASE ADDR.         WMT 04/76
         ST    RB,XXX000          SAVE RETURN ADDR.           WMT 06/76
         DROP RF                  DROP TEMP BASE.             WMT 04/76
         LR    RC,RF              SET UP NEW BASE.            WMT 04/76
         USING QX01527,RC         SET UP ADDRESSING.          WMT 04/76
         USING SAVE,RD            SET UP ADDR FOR COMMON.     WMT 04/76
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
RF       EQU   15                                             WMT 12/75
R15      EQU   15                                             WMT 12/75
         LR    6,1             SAVE PARM REG
         IC    7,0(6)          GET ORIG CC
         CP    LINE#,=P'55'    SEE IF PAST END OF PAGE
         BNH   LINEOK
         AP    PAGE#,=P'1'     ADD 1 TO PAGE NUMBER
         OI    PAGE#+L'PAGE#-1,X'0F'   MAKE LAST DIGIT READABLE
         UNPK  PAGE#UP,PAGE#
         PUT   SYSPRINT,HEADER WRITE HEADER PAGE
         MVI   0(6),C'-'       MOVE IN PROPER CC
         ZAP   LINE#,=P'1'     START LINE # AT 1
         B     PUTIT           GO WRITE IT
LINEOK   EQU   *
         AP    LINE#,=P'1'
         CLI   0(6),C' '       SEE IF ONE LINE
         BE    PUTIT           IF  SO, THEN GO DO IT
         AP    LINE#,=P'1'     ADD ANOTHER
PUTIT    PUT   SYSPRINT,(6)    WRITE THE LINE
         STC   7,0(6)          RESTORE ORIGINAL CC
         L     RB,XXX000          RESTORE RETURN ADDR.        WMT 06/76
         L     R7,X7              RESTORE OLD BASE REG.       WMT 04/76
         L     RC,X5              RESTORE OLD BASE REG.       WMT 04/76
         BR    11              AND RETURN
X5       DC    F'0'               RC SAVE AREA.               WMT 04/76
X7       DC    F'0'               RC SAVE AREA.               WMT 04/76
XXX000   DC    F'0'               SAVE RETURN ADDR.           WMT 06/76
         LTORG                                                WMT 04/76
         EJECT
         SQUISHSV                                             WMT 04/76
LK       EQU   *           ONLY TO SATISFY ASS.     *** SBV
         END   QX01527                                        WMT 04/76
./  ADD  NAME=QX01528
QX01528  TITLE 'PGM TO COPY A DISK VOLUME-MVS OR A SINGLE DATASET'
QX01528  INSQUISH                                             WMT 04/76
         USING QX01528,RF         SET UP TEMP ADDR.           WMT 04/76
         ST    RC,X5              SAVE OLD BASE ADDR.         WMT 04/76
         ST    R7,X7              SAVE OLD BASE ADDR.         WMT 04/76
         ST    RB,XXX000          SAVE RETURN ADDR.           WMT 06/76
         DROP RF                  DROP TEMP BASE.             WMT 04/76
         LR    RC,RF              SET UP START ADDRESS.       WMT 04/76
         USING QX01528,RC         SET UP ADDRESSING.          WMT 04/76
         USING SAVE,RD            SET UP COMMON ADDR.         WMT 04/76
         SPACE 2
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
R14      EQU   14
R15      EQU   15
RF       EQU   15                                             WMT 12/75
         SPACE 2
         ST    RB,R111         SAVE REGISTER 11.
PUTVTOCS LA    2,FMT1
         TM    3(4),X'80'      IS IT IS
         BZ    PTNOIS1         IF NOT, THEN FORGET IT
         LA    2,FMT2          GET FMT2 ADDRESS I N 2
         SPACE 2
PTNOIS1  EQU   *
         XC    135(5,2),135(2) WIPE OUT FMT 3 POINTER
         CLI   FMT1+59,3       ARE THERE MORE THAN 3 EXTENTS
         BNH   PTNOFMT3        IF <= 3 - NO FORMAT 3
         LA    5,FMT3+4        POINT TO FIRST
         LA    6,OUTEXTS+3*8   POINT TO THIRD EXTENT
         LA    7,4             FOUR EXTENTS
         SPACE 2
PT3MV1   MVC   2(8,5),0(6)     MOVE AN EXTENT
         CLC   0(8,6),ZEROES   SEE IF EXTENT IS ZERO
         BNE   GOON1           IF NOT, THEN GOOD
         XC    0(2,5),0(5)     WIPE OUT FIRST TWO BYTES
         SPACE 2
GOON1    EQU   *
         LA    5,10(5)         INCR 10
         LA    6,8(6)          INCR 6
         BCT   7,PT3MV1        KEEP IT UP
         LA    5,FMT3+45
         LA    7,9             9 EXTENTS DOWN HERE
         SPACE 2
PT3MV2   MVC   2(8,5),0(6)     MOVE AN EXTENT
         CLC   0(8,6),ZEROES   SEE IF EXTENT IS ZERO
         BNE   GOON2           IF NOT, THEN GOOD
         XC    0(2,5),0(5)     WIPR OUT FIRST TWO BYTES
GOON2    EQU   *
         LA    5,10(5)         INCR 5
         LA    6,8(6)          INCR 6
         BCT   7,PT3MV2
         SPACE 2
         LA    R1,FMT3          GET ADDR. TO WRITE         *** SBV
         MVC   135(5,R2),BLOCKAD  STORE ITS ADDR. IN F1 OR F2 *** SBV
         BAL   R14,WRTDSCB     WRITE DSCB                  *** SBV
         SPACE 2
PTNOFMT3 TM    3(4),X'80'      SEE IF IS
         BZ    PTNOIS2         IF NOT, THEN FORGET IT
    SPACE
         CLC   FMT1+135(5),ZEROES  SEE IF FMT2 ?          *** SBV
         BE    PTNOIS2         NO DONT WRITE FORMAT 2     *** SBV
*                              PROBABLY NOT FIRST EXTENT OF DS *** SBV
    SPACE
         LA    R1,FMT2         GET ADDR. OF F2             *** SBV
         MVC   FMT1+135(5),BLOCKAD CCHHR OF ITS F2         *** SBV
         BAL   R14,WRTDSCB     WRITE DSCB                   *** SBV
PTNOIS2  EQU   *
         LA    6,OUTEXT        POINT TO OUT EXTENT
         LA    5,FMT1+105      IN DSCB TOO
         LA    7,3             ONLY THREE EXTENTS IN FMT1
         MVI   HFLG,0                   FIRST CLEAR *SDS*
         CLI   0(5),X'40'               IS EXT 1 FOR SUL *SDS*
         BNE   PT3MV3                   NO OK               *SDS*
         MVI   HFLG,255                 YES, SET FLAG   *SDS*
         SPACE 2
PT3MV3   MVC   2(8,5),0(6)     MOVE THE EXTENT
         CLC   0(8,6),ZEROES   SEE IF EXTENT IS ZERO
         BNE   GOON3           IF NOT, THEN GOOD
         XC    0(2,5),0(5)     WIPE OUT FIRST TWO BYTES
         SPACE 2
GOON3    EQU   *
         LA    6,8(6)          INCR 6
         LA    5,10(5)         INCR 5
         BCT   7,PT3MV3            KEEP MOVING
         SPACE 2
* SUL NUM OF EXTENTS DOES NOT COUNT THE LABEL EXTENT.   ** WMT **
         TM    FMT1+105,X'40'      TEST FOR SUL        ** WMT **
         BZ    NORMAL              R IF NOT SUL ** WMT **
* SUB 1 FROM NUMBER OF EXTENTS. ** WMT **
         XR    1,1                 CLEAR R1 FO IC  ** WMT **
         IC    1,FMT1+59           GET # OF EXTENTS  ** WMT **
         BCTR  1,0                 SUBTRACT 1  ** WMT **
         STC   1,FMT1+59           SAVE NEW NUM OF EXTENTS ** WMT **
         SPACE 2
NORMAL   DS    0H
         CLC   HWMARK(5),BLOCKAD   HW HIGHER ?    *** SBV
         BH    HWOK                YES OK         *** SBV
         MVC   HWMARK(5),BLOCKAD   MOVE IT FOR LATE  *** SBV
HWOK     EQU   *
         LA    R1,FMT1             ADDR. OF F1               *** SBV
         BAL   R14,WRTDSCB         WRITE IT                  *** SBV
   SPACE 5
      SPACE 5
*  TEST FOR SUL   ** WMT **
         TM    FMT1+105,X'40'      TEST FOR SUL  ** WMT **
         BZ    NORM1               BR IF NOT SUL  ** WMT **
         XR    1,1                 CLEAR R1 FOR IC  ** WMT **
         IC    1,FMT1+59           GET EXTENT COUNT ** WMT **
         LA    1,1(0,1)            BUMP BY 1 ** WMT **
         STC   1,FMT1+59           SAVE EXTENT CNT ** WMT **
         SPACE 2
NORM1    DS    0H
         CLI   FMT1+59,0       ARE THERE NO EXTENTS
         BE    TELLDS          IF SO, JUST SAY WE COPIED IT
         EJECT
*        THIS CODE WILL COPY THE DATASET TRACK BY TRACK
         MVI   FKEOF,0        CLEAR FAKE END OF FILE SWITCH
         LA    5,INEXT         GET INPUT EXTENT ADDRESSS IN 5
         LA    6,OUTEXT        GET OUT EXTENT ADDRESS IN 6
         MVC   INDKAD,INEXT    MOVE FIRST EXTENT
         MVC   OTDKAD,OUTEXT   MOVE OUTPUT EXTENT
         MVC   FRSTSW,ZEROES   CLEAR SWITCHES
         SPACE 2
MVTRK    EQU   *
         STM   5,6,SVR5R6      SAVE REGS 5 & 6
         LA    7,RDCNTCCW      GET ADDRESS OF READ COUNT CCWS
         ST    7,INCCWAD       STORE IN IOB
         MVC   INCCHH,INDKAD   MOVE FIRST TRACK ADDRESS TO IOB
         CLC   INCCHH,ZEROES  SEE IF TRACK ZERO
         BNE   FRSTREAD       IF NOT, LET THE READ GO
         CLI   FKEOF,255      ONE FAKE EOF ALREADY?
         BE    IOABEND        IF SO, KILL US
         MVI   FKEOF,255      TURN ON FAKE EOF
         L     2,DACCWADI     GET ADDRESS OF READ R0
         MVI   16(2),3        PUT IN NO-OP AT 3RD CCW
         MVI   20(2),X'20'    TURN ON SLI BIT IN NO-OP CCW
         MVC   14(2,2),=H'8'  MOVE IN LENGTH FOR EOF RECORD
         MVI   23(2),1        MAKE LENGTH AT LEAST 1 IN NO-OP CCW
         L     3,DATADI       ADDRESS OF DATA
         XC    0(24,3),0(3)   WIPE OUT DATA AREA
         MVI   12(3),1         PUT IN RECORD 1
         B     NOALT          GO LOOK AT LAST WRITE
         SPACE 2
FRSTREAD EQU   *
         MVI   INECB,0         CLEAR ECB
         MVI   INIOB,X'42'     SET CC & UNREL BITS
         SPACE 2
         TM    9(R4),TRKOVERF  IS OVERFLOW ?             *** SBV
         BO    NOTRKOV         YES                       *** SBV
         L     R2,DACCWADI     CCW'S                     *** SBV
         L     R3,DATADI       INPUT AREA                *** SBV
         LA    R9,8            LENGTH                    *** SBV
         ST    R3,0(R2)        STORE INPUT AREA          *** SBV
         MVI   0(R2),X'06'     READ DATA (R0)            *** SBV
         ST    R9,4(R2)        LENGTH                    *** SBV
         MVI   4(R2),X'40'     CC                        *** SBV
         AR    R3,R9           NEXT AREA                 *** SBV
         ST    R3,8(R2)        NEXT INPUT AREA           *** SBV
         MVI   8(R2),X'5E'     FULL TRACK READ           *** SBV
         SR    R9,R9           CLEAR WORK                *** SBV
         ICM   R9,3,BIGGIE     BIG LENGTH                *** SBV
         ST    R9,12(R2)       INTO CCW                  *** SBV
         MVI   12(R2),X'20'    SLI                       *** SBV
         L     R9,RDCNTAD      SAVE READ COUNT CCW       *** SBV
         STCM  R2,7,RDCNTAD+1  CHAIN                     *** SBV
     SPACE
         EXCP  INIOB           READ                      *** SBV
    SPACE 2
         WAIT  ECB=INECB                                 *** SBV
  SPACE
         STCM  R9,7,RDCNTAD+1  RESET POINTER              *** SBV
         CLI   INECB,127       OK ?                      *** SBV
         BNE   CRASH                                     *** SBV
         LA    R8,1600(R9)     COUNT AREA                *** SBV
         SR    R9,R9           CLEAR WORK                *** SBV
         ICM   R9,3,BIGGIE     BIG LENGTH                *** SBV
         SR    R7,R7           CLEAR WORK                *** SBV
         ICM   R7,3,INCSW+6    RESIDUAL LENGTH           *** SBV
         SR    R9,R7           EFFECTIVE LENGTH          *** SBV
         STCM  R9,3,TOTRDLG    SAVE READ LENGTH          *** SBV
         LA    R0,8            L'COUNT                   *** SBV
         L     R14,8(R2)       1.COUNT                   *** SBV
MOVECNT  MVC   0(8,R8),0(R14)  MOVE COUNT DATA           *** SBV
         SR    R1,R1                                     *** SBV
         IC    R1,5(R14)       KEYLENGTH                 *** SBV
         AH    R1,6(R14)       DATA LENGTH               *** SBV
         AR    R1,R0           + COUNT                   *** SBV
         LA    R14,0(R1,R14)   NEXT COUNT                *** SBV
         LA    R8,8(R8)        NEXT SPACE                *** SBV
         SR    R9,R1           ANY LEFT ?                *** SBV
         BP    MOVECNT         YES NEXT ONE              *** SBV
         B     NOALT           WRITE DATA                *** SBV
         SPACE 2
NOTRKOV  EQU   *
         EXCP  INIOB           READ COUNTS ON THIS TRACK
         SPACE 2
         WAIT  ECB=INECB       WAIT FOR I/O TO COMPLETE
         SPACE 2
         CLI   INECB,X'41'     SEE IF ERROR DETECTED
         BNE   IOABEND         IF NOT, THEN SOMETHING WRONG
         CLI   INIOB+3,X'08'   SEE IF NO RECORD FOUND
         BNE   IOABEND         IF NOT, THEN KILL
         L     7,INCSW         GET LAST CCWADDRESS+8
         LA    7,0(7)          CLEAR HIGH BYTE
         L     8,RDCNTAD       GET COUNT AREA ADDRESS
         LA    8,0(8)          CLEAR I/O OP CODE
         SR    7,8             SUBTRACT STARTING ADDRESS
         BNP   IOABEND         IF NOT POSITIVE KILL
         SRL   7,3             DIVIDE BY 8
         LR    11,7            SAVE REG 7
         L     3,DATADI        GET INPUT DATA ADDRESS IN O
         L     2,DACCWADI      GET ADDRESS OF INPUT CCWS
         L     8,RDCNTAD       GET ADDRESS OF FIRST CCWS
         LA    8,1600(8)       POINT TO COUNT AREAS
         LA    9,8             DATA LENGTH OF RECORD 0
         ST    3,0(2)          STORE ADDRESS
         MVI   0(2),X'06'      PUT IN READ DATA
         SR    15,15                   CLEAR 15 FOR RECORD # COMPARE
         B     ADDLNGTH        GO TO MAIN ROUTINE
         SPACE 2
INSETUP  EQU   *
         LA    15,1(15)                INCR. 15 FOR RECORD # COMPARE
         EX    15,RECOMP               MAKE SURE RECORD NUMBER THE SAME
         BNE   CNTDN                   IF NOT THE SAME THEN QUIT
         ST    3,0(2)          STORE DATA ADDRESS INTO CCW
         MVI   0(2),X'1E'      PUT IN READ CKD
         LA    9,8             START COUNT WITH 8 BYTES CCHHRKDD
         SR    1,1             CLEAR 1 FOR IC
         IC    1,5(8)          GET KEYLENGTH IN 1
         LH    10,6(8)         GET DATA LENGTH
         LA    8,8(8)          POINT 8 AT NEXT COUNT AREA
         AR    1,10            GET KEY+DATA IN
         LTR   10,10           SEE IF DATA LENGTH NON-ZERO
         BNZ   LNGTHOK         IF NOT EOF GOODIE
         SR    1,1             CLEAR 1
         MVI   0(2),X'12'      CHANGE TO READ COUNT
         CLI   HFLG,255                 IS THIS SUL  *SDS*
         BNE   LNGTHOK                  NO       *SDS*
         LA    3,4(3)                   ALLOW FOR KEY IN SUL  *SDS*
         SPACE 2
LNGTHOK  AR    9,1             GET TOTAL LENGTH IN 9
ADDLNGTH EQU   *
         ST    9,4(2)          STORE LENGTH IN CCW
         MVI   4(2),X'40'      TURN ON CC BIT
         AR    3,9             GET 3 UP TO NEXT DATA AREA
         ST    R2,LASTCCW      SAVE LAST CCW                   *** SBV
         LA    2,8(2)          POINT 2 AT NEXT CCW
         BCT   7,INSETUP       KEEP GENERATING
         L     R2,LASTCCW      RELOAD LAST CCW
         MVI   4(R2),X'20'     SLI                             *** SBV
         LH    R7,6(R2)        GET LENGTH                      *** SBV
         LA    R7,1(R7)        +1                             *** SBV
         STH   R7,6(R2)        RESET CNTNER                    *** SBV
         LA    R2,8(R2)        FOR NEXT CCW                    *** SBV
   SPACE 2
CNTDN    EQU   *
         XC    0(8,2),0(2)     CLEAR NEXT CCW
         MVI   0(2),X'03'      SET UP NO-OP
         ST    9,4(2)          MAKE LENGTH NON-ZERO
         MVI   4(2),X'20'      TURN ON SLI BIT
         SPACE 2
TRYRAGN  EQU   *
         L     2,DATADI        GET ADDRESS OF INPUT
         MVI   INECB,0         CLEAR ECB
         MVI   INIOB,X'42'     TURN ON CC&UNRELATED BIT
         LA    15,RDDACCW      GET DATA READ CCW ADDRESS
         ST    15,INCCWAD      STORE INTO INPUT IOB
         SPACE 2
         EXCP  INIOB           READ THE WHOLE TRACK
         SPACE 2
         WAIT  ECB=INECB       WAIT FOR IT
         SPACE 2
         CLI   INECB,X'7F'     LOOK GOOD?
         BNE   IOABEND         KILL US                     *** SBV
         ICM   R14,3,INCSW+6   RESIDUAL COUNT ?            *** SBV
         BNZ   NOALT11         YES -- NO OVERFLOW          *** SBV
         MVI   OVSW,255        TURN ON OVERFLOW SWITCH
         SPACE 2
NOALT11  L     R2,LASTCCW      LAST READ CCW               *** SBV
         LH    R15,6(R2)       CCW CNT OF LAST READ        *** SBV
         BCTR  R15,0           -1                          *** SBV
         STH   R15,6(R2)       RESET COUNTER               *** SBV
         SPACE 2
NOALT    EQU   *
         CLI   FRSTSW,0        SEE IF WE'VE WRITTEN YET
         BE    ARND1           IF NOT, THEN DON'T WAIT ON LAST
         SPACE 2
OWAIT    EQU   *
         TM    OUTECB,X'40'    HAS LAST WRITE FINISHED
         BO    NOWAIT          IF SO, THEN GO AROUND WAIT
         SPACE 2
         WAIT  ECB=OUTECB      WAIT FOR WRITE TO FINISH
         SPACE 2
NOWAIT   EQU   *
         CLI   OUTECB,X'7F'    WAS LAST WRITE GOOD
         BNE   IOABEND         IF NOT, THEN KILL THYSELF
         L     7,DATADO        GET STARTING ADDRESS OF OUTPUT R0 DATA
         L     6,DACCWADO      GET ADDRESS OF WRITE CCWS
         CLC   INR0DATA,0(7)   SEE IF EQUAL TO INPUT
         BE    OTR0GOOD        IF SO, WE'RE HAPPY
         MVC   0(8,7),INR0DATA         MOVE ALL OF R0 DATA
         CLI   R0FLAG,255              SEE IF FIRST PART IS DASD ADDR
         BNE   STWRTR0                 IF NOT, THEN START WRITE
         MVC   0(4,7),OUTCCHH          MOVE IN OUTPUT DASD ADDR
STWRTR0  EQU   *
         MVI   0(6),X'05'      CHANGE TO WRITE DATA
         MVI   4(6),X'00'      TURN OFF COMMAND CHAIN
         MVI   OUTIOB,X'42'    SET CC & UNRELATED
         SPACE 2
         CALL  R0WRT
         SPACE 2
         EXCP  OUTIOB          WRITE R0 DATA
         SPACE 2
         WAIT  ECB=OUTECB      WAIT FOR IT TO STOP
         SPACE 2
         CLI   OUTECB,X'7F'    SEE IF GOOD
         BNE   IOABEND         IF NOT, WIPE OUT
         SPACE 2
OTR0GOOD EQU   *
         CLI   LSTSW,0         SEE IF THAY WAS
         BNE   DSCOMPLT        IF SO, WE'RE FINISHED
         CLC   OTDKAD,ZEROES   IS OUTPUT ADDRESS ZERO
         BE    DSCOMPLT        IF SO, NO MORE OF THIS DATA SET
         SPACE 2
ARND1    EQU   *
         TM    9(R4),TRKOVERF  IS OVERFLOW ?                 *** SBV
         BO    NOTRKOV1        YES                           *** SBV
   SPACE
    SR    R9,R9
         ICM   R9,3,TOTRDLG    LOAD LENGTH                   *** SBV
         L     R14,DATADI      INPUT AREA                    *** SBV
         L     R7,DATADO       OUTPUT AREA                   *** SBV
         L     R6,DACCWADO     OUTPUT CCWS                   *** SBV
         ST    R7,0(R6)        ADDR. R0                      *** SBV
         MVI   4(R6),X'40'     CCS                           *** SBV
         LA    R15,8           L'R0                          *** SBV
         STCM  R15,7,5(R6)     LENGTH                        *** SBV
         LA    R7,8(R7)        BEHIND R0                     *** SBV
         LA    R14,8(R14)      BEHIND R0                     *** SBV
         LA    R6,8(R6)        NEXT CCW                      *** SBV
   SPACE
STR7     ST    R7,0(R6)        1.CCW                         *** SBV
         MVI   0(R6),X'1D'     WRITE CKD                     *** SBV
         SR    R15,R15                                       *** SBV
         IC    R15,5(R14)      KEYLENGTH                     *** SBV
         AH    R15,6(R14)      + LENGTH                      *** SBV
         LA    R15,8(R15)      L'COUNT                       *** SBV
         ST    R15,4(R6)       INTO CCW                      *** SBV
         MVC   0(4,R14),OTDKAD OUTPUT TRACK ADDR.            *** SBV
         MVI   4(R6),X'40'     CC                            *** SBV
         AR    R7,R15          NEXT CKD                      *** SBV
         AR    R14,R15         NEXT CKD                      *** SBV
         LA    R6,8(R6)        NEXT CCW                      *** SBV
         SR    R9,R15          MORE DATA ?                   *** SBV
         BP    STR7            YES                           *** SBV
   SPACE
         LA    R15,8           -8                            *** SBV
         SR    R6,R15                                        *** SBV
         MVI   4(R6),X'00'     LAST CCW                      *** SBV
         B     NOOV1                                         *** SBV
NOTRKOV1 EQU   *                                             *** SBV
         SPACE 3
         L     7,DATADO        GET ADDRESS OF TRACK OUTPUT DATA
         L     6,DACCWADO      GET ADDRESS OF WRITE CCWS
         L     2,DACCWADI      GET ADDRESS OF READ CCWS
         LA    1,UHL1-4                 FOR SUL KEY IF NEEDED *SDS*
         B     GSOCCW          GO PAST SOME CODE THE FIRST TIME
         SPACE 2
GENOCCW  EQU   *
         L     3,0(2)          GET CCHH AREA OF COUNT IN INPUT DATA
         MVC   0(4,3),OTDKAD   PUT IN NEW DASD ADDRESS
         SPACE 2
GSOCCW   EQU   *
         ST    7,0(6)          SAVE DATA ADDRESS IN OUPUT CCW
         CLI   HFLG,255                 IS SUL EXTENT *SDS*
         BNE   NOSUL                              *SDS*
         CLI   0(2),X'12'               WAS IT A EOF *SDS*
         BNE   BUMPSUL                  NO NEED TO SET KEY  *SDS*
         L     11,0(2)                  INPUT DATA AREA *SDS*
         MVC   8(4,11),0(1)             SET KEY     *SDS*
         LA    11,12                    FOR COUNT AND KEY  *SDS*
         STH   11,6(2)                  NEW LENGTH   *SDS*
         LA    1,UHL8                   UPDATE    *SDS*
         SPACE 2
BUMPSUL  LA    1,4(1)                   NEXT KEY   *SDS*
NOSUL    MVI   0(6),X'1D'      PUT IN WRTIE CKD CCW  *SDS*
         LH    9,6(2)          GET LENGTH FROM READ CCW
         ST    9,4(6)          STORE IN WRTIE CCW
         MVI   4(6),X'40'      TURN ON CC BIT
         AR    7,9             7 NOW POINTS AT NEXT DATA AREA
         LA    6,8(6)          POINT 6 AT NEXT OUTPUT CCW
         LA    2,8(2)          POINT 2 AT NEXT INPUT CCW
         CLI   0(2),X'03'      IS THIS A NO-OP CCW
         BNE   GENOCCW         IF NOT, KEEP GENERATING
         CLI   OVSW,255        SEE IF WE HAVE AN OVERFLOW SEGMENT
         BNE   NOOV            IF NOT, THEN FORGET IT
         L     1,=F'-8'        SET UP 1
         AR    1,6             POINT 1 TO LAST WRITE CCW
         MVI   0(1),X'01'      CHANGE TO SPECIAL WRITE CKD
         MVI   OVSW,0          CLEAR THE SWITCH
         SPACE 2
NOOV     EQU   *
         MVC   0(8,6),0(2)     MOVE THE NO-OP CCW
NOOV1    EQU   *                                             *** SBV
         L     3,DACCWADO      GET ADDRESS OF FIRST OUTPUT CCW
         MVI   0(3),X'06'      CHANGE TO READ OUTPUT TRACK R0
         L     6,DATADO        GET START OF OUTPUT DATA
         L     2,DATADI        GET START OF INPUT ADDRESS IN 2
         SR    7,6             GET LENGTH OF TRACK DATA IN R7
         LR    3,7             GET LENGTH IN 3 ALSO
         MVCL  6,2             MOVE A TRACKS WORTH OF DATA
         MVC   OUTCCHH,OTDKAD  MOVE NEXT TRACK ADDRESS TO IOB
         MVI   OUTECB,0        CLEAR ECB
         MVI   OUTIOB,X'42'    SET CC & UNRELATED
         MVI   OUTCCHH+4,0     CLEAR REC#                    *** SBV
         SPACE 2
         CALL  TRKWRT
         SPACE 2
         EXCP  OUTIOB          WRITE THE WHOLE TRACK
         SPACE 2
         L     15,DATADI       GET ADDRESS OF INPUT DATA
         MVC   INR0DATA,0(15)  MOVE INPUT R0 DATA
         MVI   R0FLAG,0                CLEAR R0 FLAG
         CLC   INCCHH,INR0DATA         SEE IF TRACK ADDR IN R0
         BNE   NTTRKAD                 IF NOT, THEN FORGET IT
         MVI   R0FLAG,255              TURN ON THE FLAG
         SPACE 2
NTTRKAD  DS    0H
         MVI   FRSTSW,X'FF'    RESET FIRST WRITE SWITCH
         LH    9,TRKUSD        GET TRACKS USED
         BCT   9,NXTRK         REDUCE BY 1
         MVI   LSTSW,X'FF'     SET LAST WRITE SWITCH
         B     OWAIT           GO WAIT FOR LAST WRITE TO STOP
         SPACE 2
NXTRK    EQU   *
         STH   9,TRKUSD        SAVE REMAINING TRACKS
         LM    5,6,SVR5R6      RESTORE REGS 5 & 6
         LH    9,INDKAD+2      GET INPUT TRACK ADDR
         LA    9,1(9)          INCR BY 1
         CH    9,TRKPCYL       CHECK WITH HIGHEST TRACK
         BL    INTRKGD         IF LOW, GOOS
         LH    9,INDKAD        GET CYL #
         LA    9,1(9)          INCR
         STH   9,INDKAD        STORE BACK
         SR    9,9             CLEAR TRK #
         SPACE 2
INTRKGD  STH   9,INDKAD+2      SAVE TRACK #
         CLC   INDKAD,4(5)     CHECK EXTENT
         BNH   INEXTOK         IF NOT HIGH THIS EXTENT STILL GOOD
         MVI   HFLG,0                   CLEAR FOR OTHER EXTENTS *SDS*
         LA    5,8(5)          POINT AT NEXT EXTENT
         MVC   INDKAD,0(5)     MOVE FIRST TRACK ADDR OF THIS EXTENT
         SPACE 2
INEXTOK  EQU   *
         LH    9,OTDKAD+2      GET OUTPUT TRACK #
         LA    9,1(9)          INCR
         CH    9,TRKPCYL       CHECK WITH HIGHEST TRACK
         BL    OTTRKGD         IF LOW, GOOD
         LH    9,OTDKAD        GET CYLINDER #
         LA    9,1(9)          INCR
         STH   9,OTDKAD        STORE CYL# BACK
         SR    9,9             CLEAR 9
         SPACE 2
OTTRKGD  EQU   *
         STH   9,OTDKAD+2      SAVE TRK
         CLC   OTDKAD,4(6)     CHECK WITH EXTENT END
         BNH   MVTRK           IF NOT HIGH, ALL IS WELL
         LA    6,8(6)          POINT TO NEXT EXTENT
         MVC   OTDKAD,0(6)     MOVE NEW EXTENT START
         B     MVTRK
         SPACE 2
RECOMP   CLI   4(8),0                  MAKE RECORD # COMPARE
         SPACE 2
DSCOMPLT EQU   *               FINISHED COPYING DATA SET
TELLDS   EQU   *
         MVC   DSNAME,FMT1     MOVE DATA SET NAME
         MVC   MSGWTO+26(44),DSNAME    MOVE DSN INTO WTO   *** SBV
   SPACE 2
         NOP   CLCLOG          TO BE ZAPPED IF WTO UNNECESSARY *** SBV
MSGWTO   WTO   'SQUISH COPIED -->                                      *
                         ',ROUTCDE=1
    SPACE 2
CLCLOG   EQU   *
         OI    RECSW,NOREC       SET RECORD COPIED            *** SBV
         CLC   LOGREC,FMT1       IS IT LOGREC ?               *** SBV
         BNE   NOLOGREC          THIS IS NOT THE LOGREC DSN   *** SBV
     SPACE
         CALL  QX01531           CLEAR LOGREC WITH DIP00      *** SBV
   SPACE
NOLOGREC EQU   *                                              *** SBV
         LA    R9,3               MAX 3 EXTENTS IN FMT1 *** SBV
         LA    R14,FMT1+107       A(1.EXTENT) *** SBV
         SR    R3,R3                          *** SBV
SRR1R1   EQU   *
         SR    R1,R1                          *** SBV
         ICM   R1,3,0(R14)        GET CC      *** SBV
         CVD   R1,INEXTS          CONV        *** SBV
         OI    INEXTS+7,X'0F'                 *** SBV
         UNPK  DSNAME+68(3),INEXTS+6(2)        *** SBV
         ICM   R1,3,2(R14)        GET TRK     *** SBV
         CVD   R1,INEXTS          CONV        *** SBV
         OI    INEXTS+7,X'0F'                 *** SBV
         UNPK  DSNAME+71(2),INEXTS+6(2)        *** SBV
         MVI   DSNAME+73,C'-'                  *** SBV
         ICM   R1,3,4(R14)        GET CYL     *** SBV
         CVD   R1,INEXTS          CONV        *** SBV
         OI    INEXTS+7,X'0F'                 *** SBV
         UNPK  DSNAME+74(3),INEXTS+6(2)        *** SBV
         ICM   R1,3,6(R14)        GET TRK     *** SBV
         CVD   R1,INEXTS          CONV        *** SBV
         OI    INEXTS+7,X'0F'                 *** SBV
         UNPK  DSNAME+77(2),INEXTS+6(2)        *** SBV
         LA    1,DSNAME-1      GET ADDRESS
         ST    R14,SAVEFMT     SAVE CURRENT ADDR *** SBV
    SPACE 2
         L     R14,AREC54      GET SMF REC ADDR.           *** SBV
         USING SMFREC,R14
         ICM   R15,3,RECNDSN   GET NBR. DATA SETS COPIED   *** SBV
         LA    R15,1(R15)      +1                          *** SBV
         STCM  R15,3,RECNDSN   AND STORE NEW NBR.          *** SBV
         DROP  R14
    SPACE 2
*        CALL QX01527 AS IF IT WERE BAL IN THIS ROUTINE.      WMT 04/76
CALLWRT  DS    0H                                             WMT 04/76
         L     RF,=V(QX01527)     GET START ADDR.             WMT 04/76
         BALR RB,RF               CALL QX01527.               WMT 04/76
         SPACE 2
         MVI   DSNAME,64           CLEAR DSNAME FIELD *** SBV
         MVC   DSNAME+1(43),DSNAME                    *** SBV
         L     R14,SAVEFMT          RESTORE ADDR.     *** SBV
         LTR   R14,R14             TEST IF IO-ERROR   *** SBV
         BM    RETCALL             RETURN             *** SBV
         LA    R14,10(R14)         A(NEXT EXT.)       *** SBV
         ICM   R1,7,0(R14)         ANY MORE ?         *** SBV
         BZ    RETCALL             NO RETURN          *** SBV
         BCT   R9,SRR1R1           PROCESS IT         *** SBV
         SPACE
         LTR   R3,R3               FIRST TIME FMT3 ?  *** SBV
         BNZ   SRR1CONT            NO, BYPASS F3-LOAD *** SBV
         LA    R14,FMT3+6          GET A(MORE EXTENTS) *** SBV
SRR1CONT EQU   *
         SPACE
         LA    R3,1(R3)            ADD 1 TO FMT3      *** SBV
         LA    R9,1(R9)            NOOP BCT ABOVE     *** SBV
         CH    R3,=H'5'            THE 5TH FMT3 ?     *** SBV
         BNE   SRR1R1              NO, CONITNUE       *** SBV
         LA    R14,1(R14)     YES,BYPASS FORMAT IDENT *** SBV
         SPACE
         B     SRR1R1              PROCESS IT         *** SBV
         SPACE 2
RETCALL  EQU   *
         L     RB,R111            RESTORE R11.                WMT 04/76
         L     RB,XXX000          RESTORE RETURN ADDR.        WMT 06/76
         L     R7,X7              RESTORE OLD BASE.           WMT 04/76
         L     RC,X5              RESTORE OLD BASE.           WMT 04/76
         BR    RB                 RETURN TO THE CALLER.       WMT 04/76
         SPACE 2
IOABEND  DS    0H                                             WMT 04/76
         MVI   RCFIELD,12         SET RETURN CODE             *** SBV
         MVC   WTORXX+16(44),FMT1  SET DSNAME                  *** SBV
   SPACE
WTORX    EQU   *
         MVI   ECB,0                CLEAR ECB
WTORXX   WTOR  '                                             I/O ERROR -
               -->REPLY -Y- TO CONTINUE',RPLY,1,ECB,ROUTCDE=1
         SPACE 2
         WAIT  1,ECB=ECB                                     *** SBV
         OI    RPLY,64               SET UPPER               *** SBV
         SPACE
         L     R1,AREC54             GET SMF REC ADDR.       *** SBV
         USING SMFREC,R1
         ICM   R14,3,RECNDIO         DATASETS I/O-ERROR      *** SBV
         LA    R14,1(R14)            +1                      *** SBV
         STCM  R14,3,RECNDIO         AND STORE IT            *** SBV
         DROP  R1
         SPACE
         CLI   RPLY,C'Y'             CONTINUE ?               *** SBV
         BE    NDUMP                 YES                      *** SBV
        SPACE
AB       EQU   *
         ABEND 1,DUMP                                         *** SBV
   SPACE
         DC    F'0'
WRTDSCB  ST    R14,*-4                SAVE RETURN           *** SBV
         MVC   SAVECCWA,DACCWADO      SAVE A(CCWS)          *** SBV
         MVI   OUTECB,0               CLEAR ECB             *** SBV
         MVC   OUTCCHH(5),BLOCKAD     STORE ADDR.           *** SBV
         ST    R1,DACCWADO            A(DATA)               *** SBV
         MVI   DACCWADO,X'0D'         WRITE DATA            *** SBV
         LA    R1,140                 LENGTH                *** SBV
         ST    R1,DACCWADO+4          INTO CCW              *** SBV
  SPACE
         EXCP  OUTIOB                 WRITE DSCB            *** SBV
   SPACE
         WAIT  ECB=OUTECB             WAIT FOR COMPL.       *** SBV
   SPACE
         CLI   OUTECB,127             OK ?                  *** SBV
         BNE   CRASH                  NO                    *** SBV
         SR    R1,R1                                        *** SBV
         IC    R1,BLOCKAD+4           REC#                  *** SBV
         LA    R1,1(R1)               NEXT REC.             *** SBV
         CLM   R1,1,DSCBHIGH          LIMIT REACHED ?       *** SBV
         BH    NEXTTRK                YES NEXT TRACK        *** SBV
         STC   R1,BLOCKAD+4           NO GOON               *** SBV
         B     LOADR14                RETURN                *** SBV
  SPACE 2
NEXTTRK  EQU   *
         MVI   BLOCKAD+4,1            REC. 1 ON NEXT TRACK  *** SBV
         IC    R1,BLOCKAD+3           TRACK NO.             *** SBV
         LA    R1,1(R1)               NEXT                  *** SBV
         LH    R14,TRKPCYL            TRACKS PER CYL.       *** SBV
         BCTR  R14,R0                 -1                    *** SBV
         CR    R1,R14                 NEXT CYL ?            *** SBV
         BH    NEXTCYL                YES                   *** SBV
         STC   R1,BLOCKAD+3           STORE NEW TRACK       *** SBV
         B     LOADR14                RETURN                *** SBV
   SPACE 2
NEXTCYL  EQU   *
         ICM   R1,3,BLOCKAD           GET CC                *** SBV
         LA    R1,1(R1)               +1                    *** SBV
         SLL   R1,16                  INTO HOBS             *** SBV
         STCM  R1,15,BLOCKAD          INTO BLOCKAD          *** SBV
  SPACE
LOADR14  EQU   *
         MVC   DACCWADO(4),SAVECCWA      RESTORE ORIGN ADDR.   *** SBV
         L     R14,WRTDSCB-4          LOAD RETURN           *** SBV
         BR    R14                    RETURN                *** SBV
   SPACE 2
NDUMP    EQU   *
         ICM   R2,15,IOERRARA        ALLREADY ALLOC ?     *** SBV
         BNZ   NOGETM                YES                   *** SBV
         SPACE
         LA    R0,1024               GET SPACE FOR 23 ENTRIES *** SBV
         GETMAIN R,LV=(0)
         ST    R1,IOERRARA           SAVE FOR LATER         *** SBV
         LR    R2,R1                 DTO                    *** SBV
         LR    R0,R1                 DTO                    *** SBV
         LR    R14,R1                DTO                    *** SBV
         LA    R1,1024               LENGTH                 *** SBV
         SR    R15,R15               CLEAR                  *** SBV
         MVCL  R14,R0
         SPACE
NOGETM   EQU   *
         LA    R15,23                23 ENTRIES POSSIBLE    *** SBV
ICMR14   ICM   R14,15,0(R2)          ALLREADY AN ENTRY      *** SBV
         BZ    NEXTDSN               YES TRY NEXT           *** SBV
         LA    R2,44(R2)             NEXT SPACE             *** SBV
         BCT   R15,ICMR14            TRY AGAIN              *** SBV
    SPACE 2
         WTO   'SQUISH --> TOO MANY I/O-ERROR',ROUTCDE=1    *** SBV
         B     AB                    TERMINATE              *** SBV
         SPACE 2
NEXTDSN  EQU   *
         MVC   0(44,R2),FMT1          SAVE DSNAME           *** SBV
         OI    SAVEFMT,X'80'          MAKE NEGATIVE         *** SBV
         MVC   BADCPY,FMT1              MOVE DATA SET NAME *SDS*
         LA    1,BADCPY-1               FOR MSG WRITE ROUT *SDS*
         B     CALLWRT            CALL PRINT ROUTINE.         WMT 04/76
         SPACE 2
X5       DC    F'0'               RC SAVE AREA.               WMT 04/76
X7       DC    F'0'               RC SAVE AREA.               WMT 04/76
ECB      DC    F'0'               ECB                         *** SBV
SAVEFMT  DC    F'0'                                     *** SBV
SAVECCWA DC    F'0'
XXX000   DC    F'0'               RETURN ADDRESS.             WMT 06/76
TOTRDLG  DC    H'0'               TOTAL LENGTH READ      *** SBV
RPLY     DC    C' '                                      *** SBV
LOGREC   DC    C'SYS1.LOGREC'                            *** SBV
         LTORG
         EJECT
         SQUISHSV                                             WMT 04/76
LK       EQU   *
         SMFREC SUB=3
         END   QX01528                                        WMT 04/76
./  ADD  NAME=QX01529
QX01529 TITLE 'TRACK ZERO COPY'
QX01529 INSQUISH
        DROP  R15
     SPACE 2
        REGDEF R
  SPACE 2
        SAVE (14,12)
        USING SAVE,R13           PASSED BY CALLER
        USING QX01529,R12
        LR    R12,R15            ESTABLISH BASE
        TM    VSAMSW,X'02'       WAS SYSCTLG ?
        BNO   WTORAG             NO
  SPACE
        WTO  'SQUISH --> YOU COPIED SYSCTLG---THE TARGET VOLSER SHOULD *
               BE EQUAL THE IN-VOLSER',ROUTCDE=1
   SPACE 2
    SPACE
WTORAG  EQU  *
        XC   WTORECB,WTORECB
        WTOR 'SQUISH --> TRACK ZERO TO COPY ?? --> ENTER YES OR NO',   X
               REPLY,3,WTORECB,ROUTCDE=1
    SPACE 2
        WAIT  ECB=WTORECB
   SPACE 2
        OC   REPLY,BLANK
        CLC  REPLY(L'YES),YES
        BE   COPY1
        CLC  REPLY(L'NO),NO
        BNE  WTORAG
        SPACE 2
        WTO 'SQUISH --> YOU DID NOT WANT TO COPY TRACK ZERO',ROUTCDE=1
      SPACE 2
RETURN  EQU  *
*       DEQ  MF=(E,ENQL1)                DEQ VTOC
   SPACE 2
        RETURN (14,12),,RC=0
   EJECT
COPY1   EQU   *
        MVC   READCCW+6(2),TRKCAP        TRACK CAPACITY
        LA    R2,INDISK
        RDJFCB ((R2))     READ JFCB
        MVI   INJFCB,4   SAY VTOC
        MVC   INJFCB+1(43),INJFCB
        OI    INJFCB+52,X'08'      DONT WRITE BACK
       SPACE
   SPACE 2
        LA    R3,OUTDISK
        RDJFCB ((R3))
        MVI   OUTJFCB,4       SAY VTOC
        MVC   OUTJFCB+1(43),OUTJFCB
        OI    OUTJFCB+52,X'08'      DONT WRITE BACK
      SPACE
        LA    R2,INDISK         INPUT DCB
        LA    R3,OUTDISK        OUTPUT DCB
        OPEN  ((R2),,(R3),(UPDAT)),TYPE=J
    SPACE 3
        MODESET KEY=ZERO,MODE=SUP
   SPACE
        L    R1,INDISK+44        GET DEB
        MVC  INEXT9,38(R1)        SAVE EXTENT
        XC   38(4,R1),38(R1)     EXTENT
        MVI  41(R1),0            LOWER BOUND
        MVC  42(6,R1),=3X'7FFF'  UPPER BOUND
        L    R1,OUTDISK+44        GET DEB
        MVC  OUTEXT9,38(R1)        SAVE EXTENT
        XC   38(4,R1),38(R1)     EXTENT
        MVI  41(R1),0            LOWER BOUND
        MVC  42(6,R1),=3X'7FFF'  UPPER BOUND
        SPACE 2
        MODESET KEY=NZERO,MODE=PROB
   SPACE 2
        XC   INCCHH(5),INCCHH   CLEAR
        XC   OUTCCHH(5),OUTCCHH  CLEAR
        MVI  INECB,0            CLEAR ECB
        MVI  OUTECB,0
        LA   R1,CCWIN           GET INPUT CCWS
        ST   R1,INCCWAD         AND STORE IT
        L    R1,DACCWADI        INPUT AREA
        STCM R1,7,READCCW+1     AND STORE IT
  SPACE 2
        EXCP INIOB              READ TRACK ZERO
        SPACE 2
        WAIT ECB=INECB
    SPACE 2
        CLI  INECB,X'7F'        COMPLETE ?
        BE   CCOK
        SPACE 2
        ABEND 1,DUMP
        SPACE 2
CCOK    EQU   *
        SR    R2,R2             CLEAR WORK                 *** SBV
        ICM   R2,3,INIOB+14     RESIDUAL COUNT
        SR    R3,R3             CLEAR WORK                 *** SBV
        ICM   R3,3,READCCW+6    TOTAL LENGTH
        SR    R3,R2             EFFECTIVE LENGTH READ
        L     R4,DACCWADO       OUTPUT AREA
        STCM  R4,7,CCWTIC+1     UPDATE TIC
        MVC   0(ENDCCW,R4),CCWOUT1 COPY OUT CCWS
        LA    R15,OUTCCW1-CCWOUT1(R4)  BEHIND LAST CCW
        L     R14,READCCW       DATA ADDR
        SPACE 2
STCM    STCM  R14,7,1(R15)      MODIFY ADDR
        CLI   4(R14),3          VOL REC ?
        BNE   *+8               NO
        LA    R5,16(R14)        SAVE ADDR OF VOL
        SR    R0,R0
        IC    R0,5(R14)         KEYLENGTH
        LH    R1,6(R14)         DATA LENGTH
        LA    R1,8(R1)          +8
        AR    R1,R0             TOTAL LENGTH TO WRITE
        STH   R1,6(R15)         STORE INTO CCW
        SR    R3,R1             MORE ?
        BNP   FINISH            NO
        MVC   8(8,R15),0(R15)   COPY LAST CCW
        LA    R15,8(R15)
        AR    R14,R1            A(NEXT REC.)
        B     STCM              NEXT CCW
        SPACE 3
FINISH  EQU   *
        MVI   4(R15),X'20'      NO COMMAND CHAINING
        ST    R4,OUTCSW+8       A(OUTCCW)
        MVC   REPLY,BLANK       CLEAR REPLY FIELD
     SPACE 2
        MVI   WTORECB,0
        MVC   OLDVOLX+62(6),OLDVOL
OLDVOLX WTOR 'SQUISH --> ENTER VOLID FOR TARGET-VOL (OLDVOL=XXXXXX)',  X
               REPLY,6,WTORECB,ROUTCDE=1
   SPACE 2
        WAIT  ECB=WTORECB
     SPACE 2
        OC    REPLY,BLANK        UPPSER
        MVC   0(6,R5),REPLY      STORE NEW VOLID
        CLC   TAGVOL,REPLY
        BE    NOSET
        OI    VSAMSW,X'04'       INDICATE NEW VOL
NOSET   EQU   *
        SPACE
        L     R1,AREC54          GET REC54 ADDR.
        MVC   RECNVOL-REC54(L'RECNVOL,R1),REPLY    SAVE NEW VOLID
        SPACE 2
        EXCP  OUTIOB             WRITE TRACK ZERO
   SPACE 2
        WAIT  ECB=OUTECB
      SPACE 2
        CLI   OUTECB,X'7F'       CC OK ?
        BE    NODMP
      SPACE 2
        ABEND 2,DUMP
      SPACE 2
NODMP   EQU   *
        MODESET KEY=ZERO,MODE=SUP
   SPACE 2
        L     R1,INDISK+44         DEB
        MVC   38(L'INEXT9,R1),INEXT9 RESTORE EXTENTS
        L     R1,OUTDISK+44        DEB
        L     R4,32(R1)            GET UCB
        MVC   38(L'OUTEXT9,R1),OUTEXT9 RESTORE EXTENTS
  SPACE
        MODESET KEY=NZERO,MODE=PROB
        SPACE 2
        LA    R2,INDISK
        LA    R3,OUTDISK
        CLOSE ((R2),,(R3))
   SPACE 2
*       DEQ  MF=(E,ENQL1)                DEQ VTOC
   SPACE 2
        LR    R15,R4
        RETURN (14,12),,RC=(15)
        TITLE 'STORAGE'
WTORECB DC    F'0'
REPLY   DC    CL6' '
BLANK   DC    6C' '
YES     DC    C'YES'
NO      DC    C'NO'
SEEK    DC    5X'0'
INEXT9  DC    CL10' '
OUTEXT9 DC    CL10' '
        DS    0D
CCWIN   CCW   X'31',SEEK,X'60',5      SEARCH ID EQUAL
        CCW   X'08',*-8,X'60',1       TIC
READCCW CCW   X'5E',0,X'20',0         MAX LENGTH  IS STORED  *** SBV
CCWOUT1 CCW   X'31',SEEK,X'60',5
CCWTIC  CCW   X'08',*-8,X'60',1
OUTCCW1 CCW   X'1D',0,X'60',0
ENDCCW  EQU   *-CCWOUT1
        LTORG
     SPACE 3
        TITLE 'DUMMY SECTIONS'
        SQUISHSV
LK      EQU    *         JUST TO TREAT THE ASS                *** SBV
        SMFREC SUB=3
         END
./  ADD  NAME=QX01531
QX01531  INSQUISH
   SPACE 2
         DROP  R15
         SAVE  (14,12)
  SPACE
         LR    R12,R15                LOAD BASE
         USING QX01531,R12
         USING SAVE,R13               BASE FOR WORK
         MVC   SER,TAGVOL             SET TARGET VOLID
         LR    R14,R13                SAVE SA ADDR.
         LA    R13,SAVE31
         ST    R14,4(R13)
         LA    R1,PARM99              DYNALLOC PARM
         SVC   99
         SPACE
         LTR   R15,R15
         BZ    OK99                   DYNALLOC OK
   SPACE
         WTO   'SQUISH --> DYN ALLOC OF LOGREC NOT SUCCESSFUL',        *
               ROUTCDE=1
         B     EMAIN
   SPACE 2
OK99     EQU   *
         LA    R1,DIP00PRM
         LINK  EP=IFCDIP00            CALL EREP
   SPACE 2
         L     R14,PSAPCCAV-FLC(0)    GET PCCA
         CLC   12(L'SYS303X,R14),SYS303X  303X SYSTEM ?
         BNE   EMAIN                  DONT MESSAGE
         SPACE
         WTO   'SQUISH --> LOGREC ON 303X SYSTEM CLEARED,ALLOC FRAMES',X
               ROUTCDE=1
         SPACE 2
EMAIN    EQU   *
         L     R13,4(R13)
         RETURN (14,12)
         TITLE 'STORAGE FOR DYNALLOC'
DIP00PRM DC    A(DIP)
DIP      DC    A(0)
SAVE31   DC    18F'0'
SYS303X  DC    C'303'
         DS    0F
PARM99   DC    AL1(128),AL3(RB)
RB       DC    AL1(20),X'01',H'0'
ERRCODE  DC    H'0'
INFO     DC    H'0'
         DC    A(TEXT),2F'0'
TEXT     DC    A(DSN),A(DDN),A(DISP1),A(DISP2),A(VOL),A(UNIT)
         DC    AL1(128),AL3(UNALL)
  SPACE 3
DSN      DC    X'0002',X'0001',AL2(11),C'SYS1.LOGREC'
DDN      DC    X'0001',X'0001',AL2(7),C'SERERDS'
DISP1    DC    X'0004',AL2(1),AL2(1),X'01'   OLD
DISP2    DC    X'0005',AL2(1),AL2(1),X'08'   KEEP
VOL      DC    X'0010',AL2(1),AL2(6)
SER      DC    CL6' '
UNIT     DC    X'0015',AL2(1),AL2(4),C'3350'
UNALL    DC    X'001C',AL2(0)
     SPACE 5
         REGDEF R
         TITLE 'DUMMY SECTION'
         SQUISHSV
LK       EQU   *             JUST TO SATISFY ASS           *** SBV
         IHAPSA
         END
./  ADD  NAME=QX01532
QX01532  TITLE 'SQUISH -- COMPACT ROUTINE'
***********************************************************************
*                                                                     *
*        QX01532 IS THE SQUISH COMPACT ROUTINE. IT GETS CONTROL FROM  *
*        THE SQUISH MAIN MODULE (X001250) IF THE DATASET TO BE COPIED *
*        CONSISTS OF MORE THAN ONE EXTENT.                            *
*        IT LOOPS THROUGH ALL EXTENTS AND SO CALCULATES THE TOTAL     *
*        SPACE REQUIRED,ADDS THE VALUE TO THE STARTING-ADDRESS IN     *
*        ORDER TO GET THE ENDING-ADDRESS. THESE TWO ADDRESSES ARE     *
*        INPUT TO QX01525 (ALLOCATION ROUTINE).                       *
*        THE COMPACT FACILITY IS INVOKED VIA PARAMETER :              *
*        // EXEC PGM=PX001520,PARM=COMP                               *
*                                              S. LAAGER, SBV-BASEL   *
*                                                                     *
***********************************************************************
QX01532  INSQUISH
         SAVE  (14,12)
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         USING QX01532,R12
         LR    R12,R15                  BASE
         DROP  R15
         USING SAVE,R13                 ADDRESSING
         MVC   EXT(16*8),INEXT          SAVE EXTENTS
         LA    R2,16                    MAX. NUMBER OF EXTENTS
         LA    R1,EXT                   EXTENT TABLE
         XC    TRKEXT,TRKEXT            CLEAR COUNT
         SPACE 2
LOOP     EQU   *
         ICM   R11,15,0(R1)             NO MORE EXTENTS ?
         BZ    ALLOC                    NO,GO PREPARE FOR ALLOC
         LH    R11,0(R1)                CYL START ADDR.
         MH    R11,TRKPCYL              MULTIPLY WITH TRKS/CYL
         AH    R11,2(R1)                ADD TRACK START ADDR.
         LH    R10,4(R1)                CYL END ADDR.
         MH    R10,TRKPCYL              MULITPLY WITH TRKS/CYL
         AH    R10,6(R1)                ADD TRACK END ADDR.
         LA    R10,1(R10)               PLUS 1
         SR    R10,R11                  GET NUMBER OF TRACKS
         AH    R10,TRKEXT               ADD # OF TRKS OF LAST EXTENTS
         STH   R10,TRKEXT               SAVE IT
         LA    R1,8(R1)                 GET NEXT EXTENT IN TABLE
         BCT   R2,LOOP                  LOOP THROUGH EXTENTS
         SPACE 2
ALLOC    EQU   *
         LH    R2,TRKPCYL               TRKS/CYL
         LR    R3,R2                    TRKS/CYL INTO R3
         BCTR  R3,0                    -1
         SR    R10,R10                  CLEAR
         LH    R11,TRKEXT               GET NUMBER OF TRKS
         DR    R10,R2                   CALC. NUMBER OF CYLS
         LTR   R10,R10                  ARE THERE ANY TRKS RESTING ?
         BNZ   ALLOC0                   NO, CONTINUE NORMALLY
         BCTR  R11,0                    YES, ADJUST CYL VALUE (-1)
         LR    R10,R2                   AND TRK AS WELL (+TRKPCYL)
         SPACE 2
ALLOC0   EQU   *
         AH    R11,INEXT                ADD START ADDR. TO RESULT
         AH    R10,INEXT+2              ADD START TRK ADDR. TO REST
         BCTR  R10,0                    NUMBER OF TRKS (-1)
         CR    R10,R3                   MORE THAN 1 CYL ?
         BH    ADD1CYL                  YES, CORRECT IT
         SPACE
ALLOC1   EQU   *
         STH   R11,INEXT+4              STORE NEW ..
         STH   R10,INEXT+6              ENDING ADDR.
         XC    INEXT+8(8),INEXT+8       CLEAR 2. EXTENT FOR QX01525
         SR    R1,R1
         L     R15,=V(QX01525)          TRY TO ALLOCATE
         BALR  R14,R15
         LTR   R15,R15                  DID IT WORK ?
         BZ    LEAVE                    WOW !
         LA    R1,WTOLST                SORRY, NO
         MVC   33(44,R1),FMT1           MOVE DS-NAME INTO WTOLST
         WTO   MF=(E,(1))
         LA    R15,4                    RC=4
         SPACE 2
LEAVE    EQU   *
         MVC   INEXT(16*8),EXT          MOVE OLD EXTENTS BACK
         RETURN (14,12),RC=(15)
         SPACE 2
ADD1CYL  EQU   *
         LA    R11,1(R11)               ADD 1 TO CYL END ADDR
         SR    R10,R2                   AND SUBTRACT IT FROM TRKS
         B     ALLOC1                   GO TO ALLOC
         TITLE 'DEFINITIONS'
EXT      DC    16D'0'                   INEXT-SA
TRKEXT   DC    H'0'                     TRACK-COUNT
WTOLST   WTO   'SQUISH --> UNABLE TO COMPACT                           *
                                    ',MF=L,ROUTCDE=1
         LTORG
         SQUISHSV
LK       EQU   *
         END   QX01532
./  ADD  NAME=QX01533
QX01533  TITLE 'PGM TO CHECK THE EXTENTS TO ALLOCATE'
QX01533  INSQUISH                                             WMT 04/76
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
R14      EQU   14
R10      EQU   10
R11      EQU   11
R13      EQU   13
R12      EQU   12
RF       EQU   15                                             WMT 12/75
R15      EQU   15                                             WMT 12/75
         SPACE 2
         USING QX01533,RF         SET UP TEMP BASE.           WMT 04/76
         STM   R14,R12,SAVE33     SAVE CALLERS REG.
         DROP RF                  DROP OLD BASE.              WMT 04/76
         LR    RC,RF              SET UP START ADDR.          WMT 04/76
         USING QX01533,RC         SET UP ADDRESSING.          WMT 04/76
         USING SAVE,RD            SET UP COMMON ADDRESSING.   WMT 04/76
         XC    SULFLAG,SULFLAG    CLEAR FLAG.                 WMT 04/76
         TM    FMT1+105,X'40'     TEST FOR SUL.               WMT 04/76
         BZ    NOTSUL             BR IF NOT SUL.              WMT 04/76
         MVI   SULFLAG,X'FF'      TURN ON SUL FLAG.           WMT 04/76
NOTSUL   DS    0H                                             WMT 04/76
         SR    R1,R1
         LA    R15,PFMT5AD        GET F5 TABLE
LOADNEXT L     R15,0(R15)         GET NEXT ELEM.
         LA    R1,1(R1)           ADD TO COUNTER
         LTR   R15,R15            LAST ?
         BNZ   LOADNEXT
         SPACE
         LR    R0,R1               LOAD COUNTER
         MH    R0,=H'12'         *  LENGTH OF ELEM.
         ALR   R0,R0             DOUBLE IT
         STH   R0,TABLEN         SAVE FOR FREEMAIN
         SPACE 2
         GETMAIN R,LV=(0)
         ST    R1,TABADDR        SAVE
         ST    R1,TABORIGN       SAVE
     SPACE
         L     R15,PFMT5AD       SAVE F5 ELEMENT ADDR.
MOVEEL   MVC   0(12,R1),0(R15)   MOVE ELEMENT
         LA    R14,12(R1)        NEXT ADDR.
         ST    R14,0(R1)         CHAIN IT
         LR    R1,R14            NEXT ELEMENT
         L     R15,0(R15)        GET NEXT OF ORIGN
         LTR   R15,R15           LAST
         BNZ   MOVEEL            NO  MOVE NEXT
        SPACE
         ST    R14,TABFREE       SAVE FREE POINTER
         SH    R14,=H'12'        PAST LAST
         SR    R1,R1
         ST    R1,0(R14)         MARK AS LAST
         SPACE 3
NOCHCK   EQU   *
         LH    R10,TRKPCYL      GET TRACKS PER CYLINDER IN 10
         L     R11,=F'-1'
         AR    R11,R10           11 HAS LAST TRACK ADDR. ON CYL
         LH    R3,INEXT+4(R1)    GET ENDING CYL
         MR    R2,R10            GET REL CYL START
         CLI   SULFLAG,X'FF'      TEST FLAG.                  WMT 04/76
         BE    JUSTAD             BR IF SUL.                  WMT 04/76
         TM    3(R4),X'28'      NOT CYLINDER?
         BNZ   JUSTAD          IF NOT, ADD IN TRACKS
         AR    R3,R11            GET UP TO LAST TRK
         B     ALCOMM
JUSTAD   EQU   *
         AH    R3,INEXT+6(R1)    ADD IN LAST TRACK
ALCOMM   LA    R3,1(R3)          NOW HAVE # OF LAST TRACK
         LH    R7,INEXT(R1)      GET STARTING CYL
         MR    R6,R10            GET REL CYL START
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    X10                BR IF SUL.                  WMT 04/76
         TM    3(R4),X'28'      CYLINDER?
         BZ    ALNOAD1         IF SO, BRANCH
X10      DS    0H                                             WMT 04/76
         AH    R7,INEXT+2(R1)    ADD IN FIRST TRK
ALNOAD1  SR    R3,R7             3 HAS # OF TRKS TO ALLOCATE
         STH   R3,TRKALC        SAVE TRACKS ALLOCATED
         L     R6,TABADDR       GET START OF FREE EXTENT LIST
         LA    R15,TABADDR      GET ADDRESS OF FORMAT 5 ADDRESS
SPCLOK1  EQU   *
         TM    3(R4),X'20'      SYSCTLG DATA SET?
         BZ    NTCTLG02        IF NOT, NORMAL ALLOC
         CLC   OTVTCEND,4(R6)   SEE IF EXTENT PAST VTOC
         BNL   LKNXTFRE        IF NOT, LOOK AT NEXT FREE EXTENT
NTCTLG02 EQU   *
         LH    R5,8(R6)          GET TRKS ON CYL
         AH    R5,10(R6)         ADD LEFT OVER TRKS O END
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    X11                BR IF SUL.                  WMT 04/76
         TM    3(R4),X'10'      IS THIS FOR CYLINDER
         BO    ALNOAD2
X11      DS    0H                                             WMT 04/76
         AH    R5,6(R6)          ADD IN TRKS BEFORE CYL
ALNOAD2  CR    R3,R5             SEE IF ENOUGH SPACE
         BNH   SPCFND1         IF SO, WE'RE IN
LKNXTFRE EQU   *
         LR    R15,R6           SAVE REG. 6
         L     R6,0(R15)         POINT TO NEXT  FREE EXTENT
         LTR   R6,R6             MAKE SURE SOME LEFT
         BNZ   SPCLOK1         OH GOODIE
         SPACE
         LA    RF,4            YES, RC=4               *** SBV
         B     BLASTOUT        RETURN                  *** SBV
         SPACE
SPCFND1  LH    R9,4(R6)          GET EXTENT START
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    ALNOAD3            BR IF SUL.                  WMT 04/76
         TM    3(R4),X'10'      IS IT CYLINDER
         BNO   ALNOAD3
         AH    R9,6(R6)          ADD TRKS BEFORE CYL
ALNOAD3  LR    R0,R9             SAVE #
         SR    R8,R8             CLEAR 8 FOR DIVIDE
         DR    R8,R10            GET STARTING EXTENT ADDRESS
         STH   R9,OUTEXT(R1)     SAVE CYL START
         STH   R8,OUTEXT+2(R1)   & TRK START
         LR    R9,R0             GET START BACK
         AR    R9,R3             ADD IN # OF TRKS
         BCTR  R9,R0             REDUCE TO LAST TRACK ADDRESS
         SR    R8,R8             CLEAR 8 AGAIN
         DR    R8,R10            GET ENDING TRACK ADDRESS
         STH   R9,OUTEXT+4(R1)   SAVE ENDING CYL
         STH   R8,OUTEXT+6(R1)   SAVE    ENDING TRACK
         L     R7,TABFREE       GET START OF FERE AREA
         CLI   SULFLAG,X'FF'      TEST FOR SUL.               WMT 04/76
         BE    NOHDTRKS                                       WMT 04/76
         TM    3(R4),X'10'      SEE IF CYLINDER ALLOCATION
         BNO   NOHDTRKS        IF NOT,AT BEGINNING
         SR    R8,R8             CLEAR 8 FOR COMPARE
         CH    R8,6(R6)          SEE IF TRKS BEFORE CYL IS ZERO
         BE    NOHDTRKS        IF NOT, THEN GET OUT
         LH    R2,4(R6)          GET EXTENT START
         AH    R2,6(R6)          ADD TRKS BEFORE CYL
         AR    R2,R3             ADD TRACKS ALLOCATED
         STH   R2,4(R7)          SAVE START OF NEW EXTENT
         LH    R2,8(R6)          GET # OF CYLS BEFORE ALLOC
         SR    R2,R3             SUBTRACT THOSE ALLOC
         STH   R2,8(R7)          SAVE THEM IN NEW EXTENT
         AH    R2,10(R6)         ADD IN EXTRA TRACKS
         BZ    FXTHSEXT        IF ZERO, NO NEW EXTENT
         MVC   10(2,R7),10(R6)   MOVE EXTRA TRACKS OVER
         L     R15,0(R6)       GET NEXT POINTER            *** SBV
         XC    6(2,R7),6(R7)     WIPE OUT TRKS BEFORE CYL
         ST    R7,0(R6)        STORE NEW POINTER           *** SBV
         ST    R15,0(R7)       AND CHAIN OLD POINTER       *** SBV
         LA    R7,12(R7)       GET NEXT EXTENT             *** SBV
         ST    R7,TABFREE      STORE POINTER               *** SBV
FXTHSEXT XC    8(4,R6),8(R6)     WIPE OUT CYLS & EXT TRKS
         LA    RF,0            RC=0                    *** SBV
         B     BLASTOUT        GO BACK
NOHDTRKS EQU   *
         LH    R2,4(R6)          GE T EXTENT START
         AR    R2,R3             UP TO WHERE EXTENT WOULD END
         STH   R2,4(R6)          SAVE NEW EXTENT START
         LH    R2,8(R6)          GET # OF ORIG TRKS
         AH    R2,6(R6)          ADD IN TRKS BEFORE CYL
         SR    R2,R3             SUBTRACT THOSE ALLOCATEDC
         BP    HITIT1          IF A GOOD NUMBER, USE IT
         AH    R2,10(R6)         ADD IN TRKS AFTER CYL
         MVC   8(4,R6),ZEROES   CLEAR IT AND ONE BEFORE
         BP    HITIT2          GO STORE TRLS
         BZ    GIVEBACK        GIVE BACK EXTENT IF ZERO
         SPACE
         LA    RF,4            YES, RC=4               *** SBV
         B     BLASTOUT        RETURN                  *** SBV
HITIT1   EQU   *
         LR    R3,R2             LOAD 3 WITH LEFT OVER TRACKS
         SR    R2,R2             CLEAR 2 FOR DIVIDE
         DR    R2,R10            GET CYLS AND LEFT OVER TRACKS
         MH    R3,TRKPCYL       GET BACK TRACKS ON CYL BOUNDARY
         STH   R3,8(R6)          STORE TRACKS ON CYL BOUNDARY
HITIT2   EQU   *
         STH   R2,6(R6)          STORE TRACKS BEFORE CYL
         LA    RF,0            RC=0                    *** SBV
         B     BLASTOUT        GET OUT
GIVEBACK EQU   *
*        IF ZERO WE JUST USED UP AN EXTENT & HAVE TO GIVE IT BACK
         XC    4(8,R6),4(R6)     WIPE OUT EXTENT INFO
         L     R2,0(R6)          GET NEXT ENTRY POINTER
         ST    R2,0(R15)         STORE IT IN LAST ENTRY
         ST    R7,0(R6)          SAVE IN MINE
         ST    R6,TABFREE       MAKE NEW START
         LA    RF,0            RC=0                    *** SBV
BLASTOUT EQU   *
         LTR   R15,R15         WAS RC ?
         BNZ   RETCALL         NO RETURN
         LA    R1,8(R1)        GET NEXT EXTENT
         C     R15,INEXT(R1)
         BNE   NOCHCK
RETCALL  ST    R15,SAVE33+4   SAVE REC
         LH    R0,TABLEN      GET LENGTH
         L     R1,TABORIGN    GET AREA
   SPACE
         FREEMAIN R,LV=(0),A=(1)
         SPACE
         XC    TRKALC,TRKALC          CLEAR WORK
         LM    R14,R12,SAVE33 RESTORE REGS
         BR    R14
         SPACE 5
SAVE33   DC    15F'0'
TABADDR  DC    F'0'
TABORIGN DC    F'0'
TABFREE  DC    F'0'
TABLEN   DC    H'0'
SULFLAG  DC    XL1'00'            SUL FLAG.                   WMT 04/76
         LTORG
         EJECT
         SQUISHSV                                             WMT 04/76
LK       EQU   *
         END QX01533                                          WMT 04/76
