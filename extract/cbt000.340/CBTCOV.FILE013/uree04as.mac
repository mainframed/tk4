LISTICF  TITLE 'VERSION 1.1 ==> LISTCAT(SHORT) FOR ICF CATALOG'
*$
*$.      +1
*$       AENDERUNGSSTAND
*$
*$       ERSTELLUNGSDATUM:   20.02.83       VERSION 1.0
*$       GEAENDERT:          18.11.83       VERSION 1.1
*$
*$       VERANTWORTLICH:     R. MEYER / SYSTEMPROGRAMMIERUNG
*$
*$
*$.      +1
*$       AUFGABE DES PROGRAMMS
*$
*$       DIESES PROGRAMM LISTET DIE WICHTIGSTEN INFORMATIONEN
*$       AUS DEN EINTRAEGEN IN EINEM ICF-KATALOG IN KOMPRI-
*$       MIERTER FORM AN; D.H. PRO DATEI WIRD EINE ZEILE GEDRUCKT.
*$       ES KOENNEN IN EINEM LAUF MEHRERE KATALOGE ANGELISTET
*$       WERDEN. FUER JEDEN KATALOG IST EIN DD-STATEMENT UND EINE
*$       EINE EINGABEKARTE ERFORDERLICH.
*$
*$
*$.      +1
*$       EIN-/AUSGABE
*$
*$       SYSPRINT ==> LISTE
*$       SYSIN    ==> ANGABE DER DDNAMEN DER KATALOGE
*$                    SPALTE  1 - 8    DDNAME
*$                    SPALTE  9 - 16   PASSWORD (SOWEIT ERFORDERLICH)
*$                                     (DEFAULT => 'ICFCAT         ')
*$                    SPALTE 17 - 22   ENTRY - AUSWAHL
*$                                     17 = 1  ==> ALIAS
*$                                     18 = 1  ==> CLUSTER
*$                                     19 = 1  ==> GDG
*$                                     20 = 1  ==> NONVSAM
*$                                     21 = 1  ==> PATH
*$                                     22 = 1  ==> USERCAT
*$                                     (DEFAULT => '111111')
*$
*$       ICFCAT   ==> ZU LISTENDER KATALOG
*$
*$
*$.      +1
*$       AUFGERUFENE UNTERROUTINEN
*$
*$       DATECHNG ==> DATUMS-UMRECHNUNG
*$       VSMERROR ==> VSAM-FEHLER AUFBEREITUNG
         EJECT
***********************************************************************
*                                                                     *
*   ANFANG    EROEFFNUNG VON ASSEMBLER-PROGRAMMEN                     *
*             LETZTE AENDERUNG :  12.03.80                            *
*                                                                     *
***********************************************************************
         MACRO
&NAME    ANFANG &V,&CD=C,&LC=0,&BR=1,&EP=,&L=0
         MNOTE  *,'        ***   VERSION VOM 12.03.80   ***'
.*
.* V   WIRD *V* ANGEGEBEN UND IST *BR>=1*, ERFOLGT DIE ADRESSIERUNG DER
.*     ERSTEN INSTRUKTION SCHON UEBER DAS BASISREG. 3, SONST UEBER R15.
.*     WIRD *R* ANGEGEBEN, WERDEN BIS ZUR DEFINITION DER SAVEAREA R15,
.*     VON DORT AB R13 UND NACH DESSEN ERSCHOEPFUNG MIT DEM PARAMETER
.*     *BR= * EVTL. AUSSERDEM VERLANGTE REGISTER ALS BASISREGISTER
.*     VERWENDET.
.*     WIRD *O* ANGEGEBEN ODER WIRD DER PARAMETER AUSGELASSEN UND IST
.*     *BR>=1*, WERDEN BIS ZUR BEENDIGUNG DES SAVEAREA HANDLINGS R15,
.*     VON DORT AB R3 UND SPAETER MIT DEM PARAMETER *BR= * EVENTUELL
.*     AUSSERDEM VERLANGTE REGISTER ALS BASISREGISTER VERWENDET. IST
.*     *BR=0*, WIRD DURCHGEHEND R15 ALS BASISREGISTER VERWENDET.
.*     DER PARAMETER *O* BEWIRKT AUSSERDEM, DASS FEHLER IN EINER ASS.-
.*     UNTERROUTINE EINES PL/I-OPT. HAUPTPROGRAMMS VOM PL/I-ERRORHAND-
.*     LER BEHANDELT UND FEHLERMELDUNGEN, DIE DIE FEHLERQUELLE IDENTI-
.*     FIZIEREN, AUSGEGEBEN WERDEN.
.* CD= STANDARDWERT IST *C* WIE *CSECT*
.*     ZULAESSIG IST AUCH *S* WIE *START*
.* LC= STANDARDWERT IST *0*, SETZT DEN ZUORDNUNGZAEHLER (AUF 0).
.*     SOWIE *NO*, WENN WEDER CSECT NOCH START ERSCHEINEN SOLL
.*     NUR ZULAESSIG IN VERBINDUNG MIT *START*, SIEHE CD=
.* BR= STANDARDWERT IST *1*, GIBT DIE ANZAHL DER BASISREGISTER AN.
.*     ZULAESSIG SIND *0*,*1*,*2* ODER *3*. ES WERDEN DANN ENTWEDER
.*     KEINE ODER IN DER REIHENFOLGE R3,R4,R5 DIE ANGEGEBENE ANZAHL AN
.*     BASISREGISTERN GENERIERT.ZULAESSIG SIND AUCH DIE FORMEN
.*     BR=(X)  BR=(X,Y)  BR=(X,Y,Z)
.*     WOBEI X,Y,Z JEWEILS FUER DIE REGISTER STEHEN, DIE ALS BASIS-
.*     REGISTER DIENEN SOLLEN, Z.B.  BR=(R5,R6)
.* EP= NAME DES EINGANGSPUNKTES. ANGABE EMPFEHLENSWERT, WENN OBERPRO-
.*     GRAMM IN PL/1 GESCHRIEBEN
.* L=  LETZTES ZEICHEN DES LABELS, DER DEN BEGINN DER BASISREGISTER-
.*     ZUORDNUNG KENNZEICHNET (=BASIS&L, WENN &L ^= 0).
.*
.* GLOBALE VARIABLE ZUM TEST GEGEN DOPPELDEFINITIONEN DER REGISTER
         GBLB  &GLBIT  BETROFFEN SIND DIE EQU'S
         GBLA  &GLBR
         LCLA  &SETBR  ZUM TESTEN FUER BR=
         LCLA  &SL,&OFS
         LCLC  &MM,&NN,&BR1,&BR2,&BR3
.*
         AIF   (T'&NAME NE 'O').M005
         MNOTE 12,'UNBENANNTE CONTROL-SECTION'
         AGO   .M130
.M005    ANOP
&NN      SETC  '&NAME'
         AIF   ('&EP' NE '&NAME').M010
         AIF   ('&V' NE 'O').M010
         AIF   (K'&NAME EQ 8).M007
&MM      SETC  '1'
         AGO   .M010
.M007    ANOP
&NN      SETC  '&NAME'(1,7)
&MM      SETC  '$'
.M010    ANOP
         AIF   ('&CD' EQ 'C').M020
         AIF   ('&CD' EQ 'S').M030
         AIF   ('&CD' EQ 'NO').M040
         MNOTE 4,'CD= IST UNGUELTIG'
.M020    ANOP
&NN&MM   CSECT
         AGO   .M042
.M030    ANOP
&NN&MM   START &LC
         AGO   .M042
.M040    ANOP
&NN&MM   DS    0F
.M042    ANOP
         AIF   ('&BR'(1,1) EQ '(').M043
&SETBR   SETA  &BR
&BR1     SETC  'R3'
&BR2     SETC  'R4'
&BR3     SETC  'R5'
         AGO   .M044
.M043    ANOP
&SETBR   SETA N'&BR
&BR1     SETC  '&BR(1)'
         AIF   (&SETBR LT 2).M044
&BR2     SETC  '&BR(2)'
         AIF   (&SETBR LT 3).M044
&BR3     SETC  '&BR(3)'
.M044    ANOP
         AIF   (&GLBIT).M045
*
*
R0       EQU   0 PARAMETER-REGISTER
R1       EQU   1 PARAMETER-REGISTER
R2       EQU   2 ARBEITSREGISTER
R3       EQU   3 ARBEITSREGISTER
R4       EQU   4 ARBEITSREGISTER
R5       EQU   5 ARBEITSREGISTER
R6       EQU   6 ARBEITSREGISTER
R7       EQU   7 ARBEITSREGISTER
R8       EQU   8 ARBEITSREGISTER
R9       EQU   9 ARBEITSREGISTER
R10      EQU   10 LINK-REGISTER
R11      EQU   11 3. BASISREGISTER
R12      EQU   12 2. BASISREGISTER
R13      EQU   13 1. BASISREGISTER
R14      EQU   14 RUECKKEHR-REGISTER
R15      EQU   15 VERZWEIG-REGISTER
*
*
         MNOTE *,'SYMBOLISCHE REGISTER GENERIERT'
*
*
.M045    AIF   ('&V' EQ 'V').M200
         AIF   ('&V' EQ 'R').M050
         AIF   ('&V' EQ 'O').M055
         AIF   (T'&V EQ 'O').M050
         MNOTE 4,'UNGUELTIGER POSITIONSPARAMETER'
.M050    ANOP
         USING *,R15
.M055    ANOP
&SL      SETA  K'&EP
         AIF   (T'&EP EQ 'O').M100
         AIF   ('&V' NE 'O').M080
         ENTRY &EP
         AIF   (&SL/2 NE (&SL+1)/2).M077
         DC    C' &EP'
         AGO   .M078
.M075    ANOP
         B     *+7+8+5+2*((&SL-1)/2)
         DC    AL1(&SL)
.M077    ANOP
         DC    C'&EP'
.M078    ANOP
         AIF   ('&V' NE 'O').M090
         DC    AL1(&SL)
         CNOP  0,4
         USING *,R15
&EP      EQU   *
         AGO   .M095
.M080    ANOP
         AIF   ('&EP' EQ '&NAME').M075
         ENTRY &EP
&EP      DS    0H
         AGO   .M075
.M090    ANOP
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
.M095    ANOP
*
*
         MNOTE *,'ENTRY - EINGANGSPUNKT GENERIERT'
*
*
.M100    ANOP
         AIF   ('&V' NE 'O').M104
         STM   R14,R12,12(R13) .  SAVE REGISTERS
         B     *+12               BRANCH AROUND CONSTANT
         DC    A(88)              LENGTH OF DSA
         DC    A(0)
         L     R0,*-8
         LR    R4,R1 .            SAVE ANY PARAMETERLIST-ADDR.
         L     R1,76(0,R13) .     ADDR. OF NEXT AVAILABLE BYTE IN STOR.
         ALR   R0,R1
         CL    R0,12(0,R12) .     COMP. WITH LAST AVAIL. BYTE IN STOR.
         BNH   *+10
         L     R15,116(0,R12) .   PL/I STORAGE OVERFLOW ROUTINE
         BALR  R14,R15 .          ATTEMPT TO OBTAIN MORE STORAGE
         ST    R0,76(0,R1) .      ADDR. OF NEXT AVAIL. BYTE IN STOR.
         ST    R13,4(0,R1)
         ST    R1,8(0,R13)
         MVC   72(4,R1),72(R13) . COPY ADDR. OF LIBRARY WORKSPACE
         LR    R13,R1
         MVI   0(R13),X'80'
         MVI   86(R13),X'91'
         MVI   87(R13),X'C0'
         LR    R1,R4
*
*
*        ENDE DES SAVEAREA-HANDLINGS
*
*
         AGO   .M200
.M104    ANOP
         CNOP  2,4
         STM   R14,R12,12(R13) .  SAVE REGISTERS
         ST    R13,*+14
         LR    R11,R13
         BAL   R13,*+19*4
         AIF   ('&V' NE 'R').M105
         USING *,R13
.M105    ANOP
ANFA&SYSNDX DS 0F   WORT 0 NUR VON PL1 VERWENDET
         DC    X'0080'
         DC    AL2(72)
         DC    F'0' WORT 1 A(SAVEAREA IM RUFENDEN PROGRAMM)
         DC    F'0' WORT 2 A(SAVEAREA IM GERUFENEN PROGRAMM)
         DC    F'0' WORT 3 R14
         DC    F'0' WORT 4 R15
         DC    F'0' WORT 5 R0        ** BEI         R14
         DC    F'0' WORT 6 R1        ** ZUGRIFFS-   R15
         DC    F'0' WORT 7 R2        ** ROUTINEN    R0
         DC    F'0' WORT 8 R3 BASIS1 ** WERDEN      R1
         DC    F'0' WORT 9 R4 BASIS2 ** HIER        R2
         DC    F'0' WORT10 R5 BASIS3 ** FOLGENDE    R3
         DC    F'0' WORT11 R6        ** REGISTER    R4
         DC    F'0' WORT12 R7        ** VON DER     R5
         DC    F'0' WORT13 R8        ** ZUGRIFFS-   R6
         DC    F'0' WORT14 R9        ** ROUTINE     R7
         DC    F'0' WORT15 R10       ** GESPEICHERT R8
         DC    F'0' WORT16 R11
         DC    F'0' WORT17 R12
*
         ST    R13,8(0,R11)
*
*
*        ENDE DES SAVEAREA-HANDLINGS
*
*
         AIF   ('&V' NE 'V').M200
         AGO   .M120
.M110    ANOP
.M120    AIF   (&GLBR GT &SETBR).M130
&GLBR    SETA  &SETBR
         AIF   ('&V' EQ 'V').M130
         DROP  R15
.M130    ANOP
&GLBIT   SETB  1
*
*
*        ENDE DES VORSPANNS
*
*
         MEXIT
.M200    AIF   (&SETBR NE 0).M220
         MNOTE *,'KEINE BASISREGISTER GENERIERT'
         AIF   ('&V' EQ 'V').M050
         AGO   .M110
.M220    AIF   ('&V' EQ 'R').M250
         BALR  &BR1,0
         AIF   ('&L' EQ '0').M222
BASIS&L  EQU   *
.M222    USING *+&OFS,&BR1
         AIF   (&GLBR GT 0).M225
.M225    AIF   (&SETBR GE 2).M240
.M230    AIF   ('&V' EQ 'V').M055
         AGO   .M110
.M240    LA    &BR2,4095(,&BR1)
         USING *+&OFS+4091,&BR2
         AIF   (&GLBR GT 1).M245
.M245    AIF   (&SETBR EQ 2).M230
         LA    &BR3,4095(,&BR2)
         USING *+&OFS+2*4091,&BR3
         AIF   (&GLBR GT 2).M230
         AGO   .M230
.M250    LA    &BR1,4095(,R13)
&OFS     SETA  4095-80
         AGO   .M222
         MEND
         EJECT
***********************************************************************
*                                                                     *
*   ENDE      ABSCHLUSS VON ASSEMBLER-PROGRAMMEN                      *
*             LETZTE AENDERUNG :  12.03.80                            *
*                                                                     *
***********************************************************************
         MACRO
&NAME    ENDE &L,&R1,&RC=
         MNOTE  *,'      ***   VERSION VOM 12.03.80   *** '
*
         LCLC  &ENDEC1,&ENDEC2
         AIF   (T'&RC EQ 'O').S040
         AIF   ('&RC'(1,1) EQ '(').S010 REG.NOTATION
         AIF   ('&RC'(1,1) LT '0').S020
&NAME    LA    R15,&RC            RETURNCODE LADEN
         AGO   .S030
.S010    ANOP
&NAME    LA    R15,0(,&RC(1))     RETURNCODE LADEN
         AGO   .S030
.S020    ANOP
&NAME    L     R15,&RC            RETURNCODE LADEN
.S030    L     R13,4(,R13)        A(SAVEAREA IM RUFENDEN PROGRAMM)
&ENDEC1  SETC  'R0'
&ENDEC2  SETC  '20'
         AGO   .S050
.S040    ANOP
&NAME    L     R13,4(,R13)        A(SAVEAREA IM RUFENDEN PROGRAMM)
.S050    AIF   (T'&R1 EQ 'O').S060
         AIF   ('&R1' NE 'R1').S900
&ENDEC1  SETC  'R2'
&ENDEC2  SETC  '28'
.S060    AIF   (T'&R1 EQ 'O' AND T'&RC EQ 'O').S070
         L     R14,12(,R13)       ALTE REG.STAENDE WIEDERHERSTELLEN
         LM    &ENDEC1,R12,&ENDEC2.(R13)
         AGO   .S080
.S070    LM    R14,R12,12(R13)    ALTE REG.STAENDE WIEDERHERSTELLEN
.S080    BR    R14                RETURN
         AIF   (T'&L EQ 'O').S090
         AIF   ('&L' NE 'L').S910
         AGO   .S920
.S090    MEXIT
.S900    IHBERMAC 37,,&R1         INVALID OPERAND
         MEXIT
.S910    AIF   (K'&L GT 1).S090
         IHBERMAC 183,&L,L
.S920    LTORG
         MEND
         EJECT
LISTICF  ANFANG R,BR=(R12)
         SPACE 5
RC       EQU   R15
RL       EQU   R11
         EJECT
*        *********************************
*        *     GET INPUT CARDS           *
*        *********************************
         SPACE
         OPEN  KARTE
READC    DS    0H
         GET   KARTE,CARDAREA
         AP    CRDCOUNT,=P'1'          INCREASE COUNTER
         SPACE
         CLC   CARDDDN,=CL8' '         DDNAME PRESENT ?
         BE    INPUTERR                NO ==> RC = 8
         MVC   ICFCAT+40(8),CARDDDN    MOVE DDNAME INTO ACB
         MVC   PASSWORD,CARDPSWD       MOVE PASSWORD TO FIELD
         CLC   CARDAUSW,BLANKS         AUSWAHL OPTIONS ?
         BNE   DSNOPEN                 YES ==> USE THIS
         MVC   CARDAUSW,=CL6'111111'   MOVE DEFAULT VALUE
         B     DSNOPEN                 GO ON
         SPACE 2
CARDEOF  DS    0H
         OI    SWITCH,CARDENDE         SET SWITCH
         CP    CRDCOUNT,=P'0'          ANY CARD READ ?
         BNE   NEXTCARD                YES ==> GO ON
         MVC   CARDAUSW,=CL6'111111'   NO ==> MOVE DEFAULT VALUE
         B     DSNOPEN                        AND USE IT
         SPACE
NEXTCARD DS    0H
         TM    SWITCH,CARDENDE         EOF SWITCH SET ?
         BNO   READC                   NO ==> GET THE NEXT
         SPACE
NOMOREWK DS    0H
         XR    RC,RC                   SET RETURN CODE TO ZERO
         B     ENDE01                  GO TO PRM-ENDE
         EJECT
*        *********************************
*        *     PREPARE HEADER LINES      *
*        *********************************
         SPACE
DSNOPEN  EQU   *
         OPEN  (PROT,OUTPUT)
         SPACE
PREPHEAD EQU   *
         LA    R0,16                   LOAD FUNCTION CODE
         LINK  EP=DATECHNG
         SPACE
         LTR   RC,RC                   DATECHNG OK ?
         BNZ   DATERROR                NO ===> MESSAGE
         ST    R1,DATE                 YES ==> SAVE RESULT
         SPACE
         TIME
         SRL   R0,4                    ADJUST TO SECONDS
         ST    R0,TIME                 SAVE RESULT
         OI    TIME+3,X'0C'            CONVERT TO PACKED FORMAT
         SPACE 3
         MVC   HDATUM,MASK2            FILL MASK IN HEADER
         MVC   HZEIT,MASK2             FILL MASK IN HEADER
         ED    HDATUM,DATE             EDIT DATE
         ED    HZEIT,TIME              EDIT TIME
         SPACE 3
         MVC   JFCBDCB+40(8),ICFCAT+40   GET DDNAME OF CATALOG
         RDJFCB (JFCBDCB)
         MVC   TITCATN,JFCBAREA
         MVC   TITVOLS,JFCBAREA+118
         SPACE 3
         MVC   PROTREC,BLANKS          CLEAR PROT RECORD
         SPACE
         OPEN  ICFCAT
         EJECT
*        *********************************
*        *     READ CATALOG RECORDS      *
*        *********************************
         SPACE
READCAT  DS    0H
         GET   RPL=VSAMSEQ
         LTR   RC,RC                   GET OK ?
         BNZ   GETERROR                NO ==> ABEND
         SPACE
         L     R3,VSAMAREA             LOAD RECORD POINTER
         SPACE
**************************************************************
*        CODING TO SNAP THE VSAM RECORDS                     *
*                                                            *
SNAPNOP1 NOP   GETSNAP1
         OPEN  (SNAP,OUTPUT)
         OI    SNAPNOP1+1,X'F0'         SET BRANCH
GETSNAP1 DS    0H
         LR    R4,R3                   COPY RECORD POINTER
         MVC   HW,0(R4)                MOVE RECORD LENGTH
         AH    R4,HW                   AND ADD IT TO RECORD POINTER
         A     R4,=F'1'
         SNAP  DCB=SNAP,PDATA=(REGS),STORAGE=((3),(4)),ID=01
*                                                            *
*                                                            *
**************************************************************
         SPACE
         MVI   CATRASA,C'0'            SPACE LINE FOR NEW COMPONENT
         SPACE
         XR    R8,R8                   CLEAR WORK REGISTER
         MVC   HW,0(R3)                SAVE RECORD LENGTH
         LH    R8,HW                       INTO R8
         SH    R8,=H'2'                    AND SUBTRACT OWN LENGTH FLD
         SPACE
         CLI   4(R3),C'A'              RECORD TYPE = A ?
         BNE   *+16                    NO ==> TRY NEXT
         CLI   CARDNVSA,C'1'           NONVSAM FLAG PRESENT ?
         BNE   READCAT                 NO ==> READ NEXT RECORD
         B     NVSAM                   YES ==> PROCESS NONVSAM RECORD
         CLI   4(R3),C'C'              RECORD TYPE = C ?
         BNE   *+16                    NO ==> TRY NEXT
         CLI   CARDCLUS,C'1'           CLUSTER FLAG PRESENT ?
         BNE   READCAT                 NO ==> READ NEXT RECORD
         B     CLUSTER                 YES ==> PROCESS CLUSTER RECORD
         CLI   4(R3),C'X'              RECORD TYPE = X ?
         BNE   *+16                    NO ==> TRY NEXT
         CLI   CARDALIA,C'1'           ALIAS FLAG PRESENT ?
         BNE   READCAT                 NO ==> READ NEXT RECORD
         B     ALIAS                   YES ==> PROCESS ALIAS RECORD
         CLI   4(R3),C'U'              RECORD TYPE = U ?
         BNE   *+16                    NO ==> TRY NEXT
         CLI   CARDUCAT,C'1'           UCAT FLAG PRESENT ?
         BNE   READCAT                 NO ==> READ NEXT RECORD
         B     UCAT                    YES ==> PROCESS USERCAT RECORD
         CLI   4(R3),C'B'              RECORD TYPE = B ?
         BNE   *+16                    NO ==> TRY NEXT
         CLI   CARDGDG,C'1'            GDG FLAG PRESENT ?
         BNE   READCAT                 NO ==> READ NEXT RECORD
         B     GDGBASE                 YES ==> PROCESS GDGBASE RECORD
         CLI   4(R3),C'R'              RECORD TYPE = R ?
         BNE   *+16                    NO ==> TRY NEXT
         B     PATH                    YES ==> PROCESS PATH RECORD
         CLI   CARDPATH,C'1'           PATH FLAG PRESENT ?
         BNE   READCAT                 NO ==> READ NEXT RECORD
         B     READCAT                 READ NEXT VSAM RECORD
         EJECT
*        *********************************
*        *     END OF FILE ICFCAT        *
*        *********************************
         SPACE
VSMEODAD DS    0H
         CLOSE (PROT,,ICFCAT)
         ZAP   PGECOUNT,=P'0'          RESET PAGE COUNTER
         ZAP   LNECOUNT,=P'99'         RESET LINE COUNTER
         B     NEXTCARD                PROCESS NEXT INPUT CARD
         EJECT
*        *********************************
*        *     LOGICAL ERROR ROUTINE     *
*        *********************************
         SPACE
VSMLERAD DS    0H
         L     R0,12(R7)               LOAD RPL ADDRESS
         LA    R1,VSAMMESS
         LINK  EP=VSMERROR
         SPACE
         ST    R1,FW                   SAVE FDBK CODE
         SPACE
         BAL   R1,VSAMWTO
         DC    AL2(121)
         DC    XL2'0000'
VSAMMESS DS    CL121
VSAMWTO  DS    0H
         SVC   35
         SPACE
         B     UABEND
         EJECT
*        *********************************
*        *     PROGRAMM EXITS/ABENDS     *
*        *********************************
         SPACE
ENDE01   DS    0H
         ENDE  RC=(R15)
         EJECT
DATERROR DS    0H
         WTO   'LISTICF ==> ERROR ON DATE CONVERSION - ABEND WITH DUMP'
         B     UABEND
         SPACE 2
DYNERROR DS    0H
         WTO   'LISTICF ==> ERROR ALLOCATING VVDS - ABEND WITH DUMP'
         B     UABEND
         SPACE 2
GETERROR DS    0H
         WTO   'LISTICF ==> ERROR ON VSAM GET - ABEND WITH DUMP'
         B     UABEND
         SPACE 2
GENCBERR DS    0H
         WTO   'LISTICF ==> ERROR ON VSAM GENCB - ABEND WITH DUMP'
         B     UABEND
         SPACE 2
INPUTERR DS    0H
         WTO   'LISTICF ==> INVALID INPUT CARD - RC = 8'
         LA    RC,8
         B     ENDE01
         SPACE 2
MODCBERR DS    0H
         WTO   'LISTICF ==> ERROR ON VSAM MODCB - ABEND WITH DUMP'
         B     UABEND
         SPACE 2
OPENERR  DS    0H
         WTO   'LISTICF ==> ERROR ON VSAM OPEN - ABEND WITH DUMP'
         B     UABEND
         SPACE 2
UABEND   DS    0H
         ABEND 1111,DUMP
         EJECT
*        *********************************
*        *     NONVSAM CATALOG RECORD    *
*        *********************************
         SPACE
NVSAM    DS    0H
         MVC   CATRTYPE,=CL8'NONVSAM'  RECORD TYPE
         LA    R5,2(R3)                POINT TO ALIAS CELL
         USING TYPE$A,R5               ESTABLISH ADDRESSABILITY
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),NVKEYLN         GET LENGTH OF ALINAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVENVSN             MOVE ALIAS NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVENVSN DS    0H
         MVC   CATRDSN(0),NVNAME
         SPACE
         MVC   HW,NVCELEN              LENGTH OF COMPLETE CELL
         SPACE
         AH    R5,HW                   POINT TO ASSOCIATION CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         CLI   2(R5),X'03'             ASSOCIATION CELL ?
         BNE   NVSAM010                NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
NVSAM010 DS    0H
         USING TYPE$04,R5
         MVC   CATRVOL,VOLSERN         MOVE VOLSER
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         LTR   R8,R8                   END OF RECORD ?
         BZ    NVSAM099                YES ==> END
         CLI   2(R5),X'04'             VOLUME CELL ?
         BE    NVSAM010                YES ==> PROCESS IT
         SPACE
NVSAM099 DS    0H
         B     READCAT                 GET NEXT CAT RECORD
         DROP  R5
         EJECT
*        *********************************
*        *     CLUSTER CATALOG RECORD    *
*        *********************************
         SPACE
CLUSTER  DS    0H
         MVC   CATRTYPE,=CL8'CLUSTER'  RECORD TYPE
         SPACE
         LA    R5,2(R3)                POINT TO CLUSTER CELL
         USING TYPE$C,R5               ESTABLISH ADDRESSABILITY
         SPACE
         CLC   CLNAME(5),=X'0000000000'   CHECK IF CAT SELFDEF. REC
         BNE   *+14                    NO ==> GO ON
         MVC   CATRDSN,HEXZERO         MOVE ZEROS
         B     CLUS005                 SKIP THE OTHER STUFF
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),CLNMLEN         GET LENGTH OF CLUSTER NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVECLNM             MOVE ALIAS NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVECLNM DS    0H
         MVC   CATRDSN(0),CLNAME
         SPACE
CLUS005  DS    0H
         MVC   HW,0(R5)                GET CELL LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         CLI   2(R5),X'02'             SECURITY CELL ?
         BNE   CLUS010                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS010  DS    0H
         CLI   2(R5),X'03'             ASSOCIATION CELL ?
         BNE   CLUS011                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS011  DS    0H
         CLI   2(R5),X'06'             RELATION CELL ?
         BNE   CLUS012                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS012  DS    0H
         DROP  R5
         SPACE
         BAL   RL,PRINT
         SPACE
         MVC   CATRTYPE,=CL8'  DATA '  RECORD TYPE
         USING TYPE$D,R5
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),DIDKEYLN        GET LENGTH OF DATA NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEDTNM             MOVE DATA NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEDTNM DS    0H
         MVC   CATRDSN(0),DIDKEY
         SPACE
         MVC   HW,0(R5)                GET CELL LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         CLI   2(R5),X'02'             SECURITY CELL ?
         BNE   CLUS020                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS020  DS    0H
         DROP  R5
         USING TYPE$04,R5
CLUS025  DS    0H
         MVC   CATRVOL,VOLSERN         MOVE VOLSER
         SPACE
         BAL   RL,READVVDS             GET VVDS INFORMATIONS
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         CLI   2(R5),X'04'             VOLUME CELL ?
         BNE   CLUS029                 NO ==> GO ON WITH INDEX
         TM    VOLFLAG1,VOLSSQWD       SEQ SET WITH DATA ?
         BNO   CLUS025                 NO ==> PROCESS IT
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         DROP  R5
         SPACE
CLUS029  DS    0H
         MVC   CATRTYPE,=CL8'  INDEX'  RECORD TYPE
         USING TYPE$D,R5
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),DIDKEYLN        GET LENGTH OF DATA NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEIXNM             MOVE DATA NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEIXNM DS    0H
         MVC   CATRDSN(0),DIDKEY
         SPACE
         MVC   HW,0(R5)                GET CELL LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         CLI   2(R5),X'02'             SECURITY CELL ?
         BNE   CLUS030                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS030  DS    0H
         DROP  R5
         USING TYPE$04,R5
CLUS035  DS    0H
         MVC   CATRVOL,VOLSERN         MOVE VOLSER
         SPACE
         BAL   RL,READVVDS             GET VVDS INFORMATIONS
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         CLI   2(R5),X'04'             VOLUME CELL ?
         BNE   CLUS039                 NO ==> GO ON WITH AIX
         TM    VOLFLAG1,VOLSSQWD       SEQ SET WITH DATA ?
         BNO   CLUS035                 NO ==> PROCESS IT
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         DROP  R5
         SPACE
CLUS039  DS    0H
         USING TYPE$G,R5
         MVC   CATRTYPE,=CL8' AIX   '  RECORD TYPE
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),AIXKYLEN        GET LENGTH OF AIX NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEAXNM             MOVE ALIAS NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEAXNM DS    0H
         MVC   CATRDSN(0),AIXKEY
         SPACE
         MVC   HW,0(R5)                GET CELL LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         CLI   2(R5),X'02'             SECURITY CELL ?
         BNE   CLUS040                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS040  DS    0H
         CLI   2(R5),X'03'             ASSOCIATION CELL ?
         BNE   CLUS041                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS041  DS    0H
         CLI   2(R5),X'06'             RELATION CELL ?
         BNE   CLUS042                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS042  DS    0H
         DROP  R5
         SPACE
         BAL   RL,PRINT
         SPACE
         MVC   CATRTYPE,=CL8'  DATA '  RECORD TYPE
         USING TYPE$D,R5
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),DIDKEYLN        GET LENGTH OF DATA NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEADXM             MOVE DATA NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEADXM DS    0H
         MVC   CATRDSN(0),DIDKEY
         SPACE
         MVC   HW,0(R5)                GET CELL LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         CLI   2(R5),X'02'             SECURITY CELL ?
         BNE   CLUS050                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS050  DS    0H
         DROP  R5
         USING TYPE$04,R5
CLUS055  DS    0H
         MVC   CATRVOL,VOLSERN         MOVE VOLSER
         SPACE
         BAL   RL,READVVDS             GET VVDS INFORMATIONS
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         CLI   2(R5),X'04'             VOLUME CELL ?
         BNE   CLUS059                 NO ==> GO ON WITH AIX INDEX
         TM    VOLFLAG1,VOLSSQWD       SEQ SET WITH DATA ?
         BNO   CLUS055                 NO ==> PROCESS IT
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         DROP  R5
         SPACE
CLUS059  DS    0H
         USING TYPE$D,R5
         SPACE
         MVC   CATRTYPE,=CL8'  INDEX'  RECORD TYPE
         USING TYPE$D,R5
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),DIDKEYLN        GET LENGTH OF DATA NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEAIXM             MOVE DATA NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEAIXM DS    0H
         MVC   CATRDSN(0),DIDKEY
         SPACE
         MVC   HW,0(R5)                GET CELL LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         CLI   2(R5),X'02'             SECURITY CELL ?
         BNE   CLUS060                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
CLUS060  DS    0H
         DROP  R5
         USING TYPE$04,R5
CLUS065  DS    0H
         MVC   CATRVOL,VOLSERN         MOVE VOLSER
         SPACE
         BAL   RL,READVVDS             GET VVDS INFORMATIONS
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         CLI   2(R5),X'04'             VOLUME CELL ?
         BNE   CLUS099                 NO ==> GO ON WITH NEXT RECORD
         TM    VOLFLAG1,VOLSSQWD       SEQ SET WITH DATA ?
         BNO   CLUS065                 NO ==> PROCESS IT
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         C     R8,=F'0'                END OF RECORD ?
         BNH   CLUS099                 YES ==> END
         SPACE
CLUS099  DS    0H
         B     READCAT                 GET NEXT CAT RECORD
         DROP  R5
         EJECT
*        *********************************
*        *     ALIAS CATALOG RECORD      *
*        *********************************
         SPACE
ALIAS    DS    0H
         MVC   CATRTYPE,=CL8'ALIAS'    RECORD TYPE
         SPACE
         LA    R5,2(R3)                POINT TO ALIAS CELL
         USING TYPE$X,R5               ESTABLISH ADDRESSABILITY
         SPACE
         CLI   ALIRTYPE,C'U'
         BNE   *+14
         MVC   RLTYPE,=CL7'USERCAT'
         B     ALIAS010
         CLI   ALIRTYPE,C'A'
         BNE   *+14
         MVC   RLTYPE,=CL7'NONVSAM'
         SPACE
ALIAS010 DS    0H
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),ALIKYLEN        GET LENGTH OF ALINAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEALIN             MOVE ALIAS NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEALIN DS    0H
         MVC   CATRDSN(0),ALINAME
         SPACE
         MVC   HW,ALICELN              LENGTH OF COMPLETE CELL
         SPACE
         AH    R5,HW                   POINT TO ASSOCIATION CELL
         DROP  R5
         USING TYPE$03,R5
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),ASCKYLEN        LENGTH OF ASC.NAME
         LH    R6,HW                   GET LENGTH INTO R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEASCN             MOVE RELATED NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEASCN DS    0H
         MVC   CATRKLNG+1(0),ASCKEY
         SPACE
         LA    R9,CATRKLNG+1           LOAD ADDRESS OF RELATE NAME
         AH    R9,HW                   ADD LENGTH OF NAME
         MVI   0(R9),C'('
         MVC   1(7,R9),RLTYPE          INSERT TYPE OF RELATED OBJECT
         MVI   8(R9),C')'
         MVC   RLTYPE,BLANKS           CLEAR WORK FIELD
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         B     READCAT                 GET NEXT CAT RECORD
         DROP  R5
         EJECT
*        *********************************
*        *     USERCAT CATALOG RECORD    *
*        *********************************
         SPACE
UCAT     DS    0H
         MVC   CATRTYPE,=CL8'USERCAT'  RECORD TYPE
         LA    R5,2(R3)                POINT TO ALIAS CELL
         USING TYPE$U,R5               ESTABLISH ADDRESSABILITY
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),COKEYLN         GET LENGTH OF USERCAT NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEUCNM             MOVE ALIAS NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEUCNM DS    0H
         MVC   CATRDSN(0),CONAME
         SPACE
         TM    COFLAG,COCATYPE         IS IT ICF CATALOG ?
         BO    *+14
         MVC   CATRVOL+8(14),=CL14'(VSAM CATALOG)'
         B     *+10
         MVC   CATRVOL+8(13),=CL13'(ICF CATALOG)'
         SPACE
         MVC   HW,COCELEN              LENGTH OF COMPLETE CELL
         SPACE
         AH    R5,HW                   POINT TO ASSOCIATION CELL
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         CLI   2(R5),X'03'             ASSOCIATION CELL ?
         BNE   UCAT010                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
UCAT010  DS    0H
         USING TYPE$04,R5
         MVC   CATRVOL,VOLSERN         MOVE VOLSER
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         B     READCAT                 GET NEXT CAT RECORD
         DROP  R5
         EJECT
*        *********************************
*        *     GDGBASE CATALOG RECORD    *
*        *********************************
         SPACE
GDGBASE  DS    0H
         NI    SWITCH,256-EMPTYGDG     RESET SWITCH
         MVC   CATRTYPE,=CL8'GDG BASE' RECORD TYPE
         SPACE
         LA    R5,2(R3)                POINT TO GDGBASE CELL
         MVC   GDGBASEL,0(R5)          SAVE LENGTH OF GDG BASE CELL
         USING TYPE$B,R5               ESTABLISH ADDRESSABILITY
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),GDGKYLEN        GET LENGTH OF BASE NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'1'                CORRECT FOR MOVE
         STH   R6,GDGBNML              SAVE LENGTH
         S     R6,=F'1'                CORRECT FOR MOVE
         EX    R6,MOVEGDBN             MOVE ALIAS NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEGDBN DS    0H
         MVC   CATRDSN(0),GDGNAME
         SPACE
         MVC   GDGBNAME,CATRDSN        SAVE BASE NAME
         MVC   HW,GDGCELLN             LENGTH OF COMPLETE CELL
         SPACE
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         DROP  R5
         USING TYPE$05,R5
         XR    R6,R6                   CLEAR WORK REGISTER
         ICM   R6,1,GATLIMIT           INSERT LIMIT
         CVD   R6,DW                   CONVERT TO DECIMAL
         MVC   CATRKLNG,MASK1          INSERT MASK
         ED    CATRKLNG,CL3            UNPK GDG LIMIT
         TM    GATATTR,GATDELET        TEST FLAGS
         BNO   *+14
         MVC   CATRARLN,=CL6'EMPTY'
         B     *+10
         MVC   CATRARLN,=CL6'NOEMP'
         TM    GATATTR,GATSCRTH
         BNO   *+14
         MVC   CATRMRLN,=CL6'SCR  '
         B     *+10
         MVC   CATRMRLN,=CL6'NOSCR'
         XR    R7,R7                   CLEAR WORK REGISTER
         ICM   R7,1,GATCNT             INSERT NUMBER OF ENTRIES
         CVD   R7,DW                   CONVERT TO DECIMAL
         MVC   CATRSPRM,MASK1          INSERT MASK
         ED    CATRSPRM,CL3            UNPK CURRENT NUMBER OF ENTRIES
         SPACE
         LTR   R7,R7                   EMPTY GDG BASE ?
         BNZ   *+8                     NO PROCESS GDS CELLS
         OI    SWITCH,EMPTYGDG         SET SWITCH
         B     GDGB010                 GO ON
         DROP  R5
         SPACE
GDGB010  DS    0H
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         TM    SWITCH,EMPTYGDG         ARE THERE GDS CELLS ?
         BO    GDGB099                 NO ==> ENDE
         SPACE
         MVC   HW,0(R5)                LENGTH OF PREVIOUS ENTRY
         AH    R5,HW                   POINT TO NEXT ENTRY
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         SPACE
GDGB020  DS    0H
         SPACE
         MVC   CATRTYPE,=CL8'   D-SET' RECORD TYPE
         USING TYPE$H,R5               ESTABLISH ADDRESSABILITY
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW,GDGBNML              GET LENGTH OF BASE NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'1'                CORRECT FOR MOVE
         EX    R6,MOVEGDSN             MOVE ALIAS NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEGDSN DS    0H
         MVC   CATRDSN(0),GDGBNAME
         SPACE
         TRT   CATRDSN,BLANKTAB        FIND FIRST BLANK IN NAME
         LR    R2,R1                   SAVE THE ADDRESS
         MVC   HW,GDSGENO              GET GENERATION NUMBER
         XR    R9,R9                   CLEAR WORK REGISTER
         LH    R9,HW                   GET GEN NUMBER
         CVD   R9,DW
         UNPK  1(5,R2),DW+5(3)         UNPK
         OI    5(R2),X'F0'             AND CORRECT SIGN
         MVC   HW,GDSVERNO             GET VERSION NUMBER
         XR    R9,R9                   CLEAR WORK REGISTER
         LH    R9,HW                   GET GEN NUMBER
         CVD   R9,DW
         UNPK  6(3,R2),DW+6(2)         UNPK
         OI    8(R2),X'F0'             AND CORRECT SIGN
         MVI   0(R2),C'.'              INSERT PERIOD
         MVI   1(R2),C'G'              INSERT PERIOD
         MVI   6(R2),C'V'              INSERT 'V'
         SPACE
         MVC   HW,GDSCELEN             LENGTH OF COMPLETE CELL
         AH    R5,HW                   POINT TO ASSOCIATION CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         LTR   R8,R8                   END OF RECORD ?
         BZ    GDGB099                 YES ==> END
         CLI   2(R5),X'01'             OWNERSHIP CELL ?
         BNE   GDGB025                 NO ==> GO ON
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         LTR   R8,R8                   END OF RECORD ?
         BZ    GDGB099                 YES ==> END
GDGB025  DS    0H
         CLI   2(R5),X'03'             ASSOCIATION CELL ?
         BNE   GDGB030                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         LTR   R8,R8                   END OF RECORD ?
         BZ    GDGB099                 YES ==> END
GDGB030  DS    0H
         DROP  R5
         USING TYPE$04,R5
         MVC   CATRVOL,VOLSERN         MOVE VOLSER
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         LTR   R8,R8                   END OF RECORD ?
         BZ    GDGB099                 YES ==> END
         CLI   2(R5),X'04'             VOLUME CELL ?
         BE    GDGB030                 YES ==> PROCESS IT
         SPACE
         BCT   R7,GDGB020              LOOP FOR GDS CELLS
         SPACE
GDGB099  DS    0H
         B     READCAT                 GET NEXT CAT RECORD
         DROP  R5
         EJECT
*        *********************************
*        *     PATH CATALOG RECORD       *
*        *********************************
         SPACE
PATH     DS    0H
         MVC   CATRTYPE,=CL8'PATH'     RECORD TYPE
         LA    R5,2(R3)                POINT TO ALIAS CELL
         USING TYPE$R,R5               ESTABLISH ADDRESSABILITY
         SPACE
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),PATHKYLN        GET LENGTH OF PATH NAME
         LH    R6,HW                   LOAD LENGTH IN R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEPTHN             MOVE PATH NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEPTHN DS    0H
         MVC   CATRDSN(0),PATHNAME
         SPACE
         MVC   HW,PATHCELN             LENGTH OF COMPLETE CELL
         SPACE
         AH    R5,HW                   POINT TO ASSOCIATION CELL
         DROP  R5
         USING TYPE$01,R5
         SPACE
         MVC   CATRCDTE,MASK1          INSERT MASK
         ED    CATRCDTE,OWNCREDT       UNPK CREATION DATE
         MVC   HW,0(R5)                LENGTH 0F OWNERSHIP CELL
         AH    R5,HW                   POINT TO NEXT CELL
         CLI   2(R5),X'02'             SECURITY CELL ?
         BNE   PATH010                 NO ==> GO ON
         MVC   HW,0(R5)                LOAD LENGTH
         AH    R5,HW                   POINT TO NEXT CELL
PATH010  DS    0H
         DROP  R5
         USING TYPE$03,R5
         XC    HW,HW                   CLEAR HALFWORD
         MVC   HW+1(1),ASCKYLEN        LENGTH OF ASC.NAME
         LH    R6,HW                   GET LENGTH INTO R6
         S     R6,=F'2'                CORRECT FOR MOVE
         EX    R6,MOVEPASN             MOVE RELATED NAME
         B     *+10                    SKIP EXECUTE OPERATION
         SPACE
MOVEPASN DS    0H
         MVC   CATRKLNG+1(0),ASCKEY
         SPACE
         BAL   RL,PRINT                PRINT RECORD
         SPACE
         B     READCAT                 GET NEXT CAT RECORD
         DROP  R5
         EJECT
*        *********************************
*        *     OBTAIN INFORMATION FROM   *
*        *           V  V  D  S          *
*        *********************************
         SPACE
READVVDS DS    0H
         STM   R0,R15,OWNSAVE          SAVE ALL REGISTERS
         SPACE
         LA    R7,VVDSTAB              LOAD TABLE POINTER
         USING VVDSTBL,R7
         USING TYPE$04,R5
         USING VVR,R6
         SPACE
VVDS010  DS    0H
         CLC   0(6,R7),=X'FFFFFFFFFFFF' END OF TABLE
         BE    VVDS090                 YES ==> SKIP INFORMATION
         CLC   0(6,R7),=X'000000000000' END OF USED TABLE
         BE    VVDS015                 YES ==> BUILD NEW ENTRY
         CLC   0(6,R7),CATRVOL         VOLSER ENTRY PRESENT
         BE    VVDS020                 YES ==> GO ON
         LA    R7,16(R7)               SKIP TO NEXT ENTRY
         B     VVDS010                 AND TRY THIS
         SPACE
VVDS015  DS    0H
         MVC   0(6,R7),CATRVOL         FILL VOLSER
         SPACE
         BAL   RL,DYNAVVDS             ALLOCATE VVDS
         LTR   R15,R15                 DYNALLOC OK ?
         BZ    VVDS018                 YES ==> OPEN VVDS
         SPACE
         XC    0(6,R7),0(R7)           CLEAR VOLUME TABLE ENTRY
         B     VVDS099                 AND SKIP IT
         SPACE
VVDS018  DS    0H
         L     R4,8(R7)                LOAD ACB ADDRESS
         OPEN  ((R4))
         LTR   R15,R15                 OPEN OK ?
         BNZ   OPENERR                 NO ==> ABEND
         SPACE
VVDS020  DS    0H
         MVC   VVDSRBA,VOLVVRBA        INSERT RBA OF VVR
         SPACE
VVDS025  DS    0H
         L     R1,12(R7)               LOAD RPL ADDRESS
         GET   RPL=(R1)
         LTR   R15,R15                 GET OK ?
         BNZ   GETERROR                NO ==> ABEND
         SPACE
         L     R3,VVDSAREA             GET RECORD POINTER
         LR    R6,R3                   POINT TO FIRST CELL IN RECORD
         TM    VOLFLAG1,VOLVPCI        POINTER TO PRIMARY VVR
         BNO   *+16                    NO ==> TRY SECONDARY
         CLI   4(R6),C'Z'              PRIMARY VVR ?
         BNE   VVDS028                 NO ==> GET NEXT RECORD
         B     VVDS027                 YES ==> PROCESS IT
         CLI   4(R6),C'Q'              SECUNDARY VVR ?
         BNE   VVDS028                 NO ==> GET NEXT RECORD
         SPACE
VVDS027  DS    0H
         TRT   CATRDSN,BLANKTAB        FIND FIRST BLANK
         LA    R4,CATRDSN              START OF DSN
         SR    R1,R4                   LENGTH IN R1
         BCTR  R1,0                    MINUS 1 FOR COMPARE
         EX    R1,COMPNAME             COMPARE NAME
         BE    VVDS030                 RICHTIGER SATZ
         SPACE
VVDS028  DS    0H
         L     R1,12(R7)               LOAD RPL ADDRESS
         MODCB RPL=(R1),OPTCD=(ADR,SEQ,LOC)
         LTR   R15,R15                 MODCB OK ?
         BNZ   MODCBERR                NO ==> ABEND
         SPACE
         B     VVDS025                 TRY NEXT RECORD
         SPACE
COMPNAME DS    0H
         CLC   CATRDSN(0),VVRCMPNM
         SPACE
VVDS030  DS    0H
         L     R1,12(R7)               LOAD RPL ADDRESS
         MODCB RPL=(R1),OPTCD=(ADR,DIR,LOC,NSP)
         LTR   R15,R15                 MODCB OK ?
         BNZ   MODCBERR                NO ==> ABEND
         SPACE
         LA    R6,2(R6)                SKIP VVR RECORD LENGTH FIELD
         OI    VVDSSWCH,VVDSNCL        SET SWITCH FOR HEADER NAME CELL
         MVC   HW,0(R6)                LENGTH OF HEADER CELL
         AH    R6,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         SPACE
         CLI   2(R6),X'21'             DATASET INFORMATION CELL ?
         BNE   VVDS040                 NO ==> GO ON
         DROP  R6
         USING TYPE$21,R6
         XC    FW,FW
         MVC   FW+1(3),VVRPRISP        LOAD PRIM SPACE
         L     R9,FW                   INTO WORK REGISTER
         CVD   R9,DW                   CONVERT TO DECIMAL
         MVC   CATRSPRM,MASK1          INSERT MASK
         ED    CATRSPRM,CL3            UNPK PRIMARY SPACE
         MVC   FW+1(3),VVRSECSP        LOAD PRIM SPACE
         L     R9,FW                   INTO WORK REGISTER
         CVD   R9,DW                   CONVERT TO DECIMAL
         MVC   CATRSSEC,MASK1          INSERT MASK
         ED    CATRSSEC,CL3            UNPK SECONDARY SPACE
         SPACE
         TM    VVRSPCFG,VVRSPCYL       ALLOCATION IN CYLS
         BNO   *+12                    TRY FOR TRACK ALLOC
         MVI   CATRSPT,C'C'
         B     VVDS031
         TM    VVRSPCFG,VVRSPTRK       ALLOC IN TRKS ?
         BNO   *+12                    NO ==> THEN IN RECORDS
         MVI   CATRSPT,C'T'
         B     VVDS031
         MVI   CATRSPT,C'R'            ALLOC IN RECORDS
VVDS031  DS    0H                      SHARE OPTION CROSS REGION
         TM    VVRATTR2,X'C0'          SHARE OPTION 4 ?
         BNO   *+12                    NO ==> TRY AGAIN
         MVI   CATRSHRO,C'4'
         B     VVDS032
         TM    VVRATTR2,X'80'          SHARE OPTION 3 ?
         BNO   *+12                    NO ==> TRY AGAIN
         MVI   CATRSHRO,C'3'
         B     VVDS032
         TM    VVRATTR2,X'40'          SHARE OPTION 4 ?
         BNO   *+12                    NO ==> TRY AGAIN
         MVI   CATRSHRO,C'2'
         B     VVDS032
         MVI   CATRSHRO,C'1'
VVDS032  DS    0H                      SHARE OPTION CROSS SYSTEM
         TM    VVRATTR2,X'30'          SHARE OPTION 4 ?
         BNO   *+12                    NO ==> TRY AGAIN
         MVI   CATRSHRO+1,C'4'
         B     VVDS033
         MVI   CATRSHRO+1,C'3'
VVDS033  DS    0H
         MVC   FW,VVRLRECL             AVRG RECLENGTH
         L     R9,FW                   LOAD INTO WORK REGISTER
         CVD   R9,DW                   CONVERT TO DECIMAL
         MVC   CATRARLN,MASK1          INSERT MASK
         ED    CATRARLN,CL3            UNPK AVR RECORD LENGTH
         OI    VVDSSWCH,VVDST21        SET SWITCH FOR SUBTYPE X'21'
         MVC   HW,0(R6)                LENGTH OF HEADER CELL
         AH    R6,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         LTR   R8,R8                   END OF RECORD ?
         BZ    VVDS060
         SPACE
VVDS040  DS    0H
         CLI   2(R6),X'60'             DATASET INFORMATION CELL ?
         BNE   VVDS050                 NO ==> GO ON
         DROP  R6
         USING TYPE$60,R6
         SPACE
         MVC   FW,VVRAMLCL             MAX. RECORD LENGTH
         L     R9,FW                   LOAD INTO WORK REGISTER
         CVD   R9,DW                   CONVERT TO DECIMAL
         MVC   CATRMRLN,MASK1          INSERT MASK
         ED    CATRMRLN,CL3            UNPK MAX RECORD LENGTH
         SPACE
         XR    R9,R9
         ICM   R9,3,VVRAMRKP           GET REL KEY POSITION
         CVD   R9,DW                   CONVERT TO DECIMAL
         MVC   CATRRKP,MASK1           INSERT MASK
         ED    CATRRKP,CL3             UNPK RELATIVE KEY POSITION
         SPACE
         XR    R9,R9
         ICM   R9,3,VVRAMKLN           GET KEY LENGTH
         CVD   R9,DW                   CONVERT TO DECIMAL
         MVC   CATRKLNG,MASK1          INSERT MASK
         ED    CATRKLNG,CL3            UNPK KEY LENGTH
         SPACE
         XR    R9,R9
         ICM   R9,1,VVRAMPCA           GET % FREE CI'S IN CA
         CVD   R9,DW                   CONVERT TO DECIMAL
         UNPK  CATRFCAS-1(3),DW+6(2)   UNPK
         OI    CATRFCAS+1,X'F0'        CORRECT SIGN
         MVI   CATRFCAS-1,C' '         FILL IN BLANK
         CLI   CATRFCAS,C'0'           FIRST DIGIT = 0 ?
         BNE   *+8                     NO ==> SKIP MOVE
         MVI   CATRFCAS,C' '           INSERT LEADING BLANK
         SPACE
         XR    R9,R9
         ICM   R9,1,VVRAMPCI           GET % FREE BYTES IN CI
         CVD   R9,DW                   CONVERT TO DECIMAL
         UNPK  CATRFCIS-1(3),DW+6(2)   UNPK
         OI    CATRFCIS+1,X'F0'        CORRECT SIGN
         MVI   CATRFCIS-1,C' '         FILL IN BLANK
         CLI   CATRFCIS,C'0'           FIRST DIGIT = 0 ?
         BNE   *+8                     NO ==> SKIP MOVE
         MVI   CATRFCIS,C' '           INSERT LEADING BLANK
         SPACE
         XR    R9,R9
         ICM   R9,15,VVRAMCIS          GET NUMBER OF CI SPLITS
         CVD   R9,DW                   CONVERT TO DECIMAL
         UNPK  CATRCISP-1(3),DW+6(2)   UNPK
         OI    CATRCISP+1,X'F0'        CORRECT SIGN
         MVI   CATRCISP-1,C' '         INSERT BLANK
         CLI   CATRCISP,C'0'           FIRST DIGIT = 0 ?
         BNE   *+8                     NO ==> SKIP MOVE
         MVI   CATRCISP,C' '           INSERT LEADING BLANK
         SPACE
         XR    R9,R9
         ICM   R9,15,VVRAMCAS          GET NUMBER OF CI SPLITS
         CVD   R9,DW                   CONVERT TO DECIMAL
         UNPK  CATRCASP-1(3),DW+6(2)   UNPK
         OI    CATRCASP+1,X'F0'        CORRECT SIGN
         MVI   CATRCASP-1,C' '         INSERT BLANK
         CLI   CATRCASP,C'0'           FIRST DIGIT = 0 ?
         BNE   *+8                     NO ==> SKIP MOVE
         MVI   CATRCASP,C' '           INSERT LEADING BLANK
         SPACE
         XR    R9,R9
         ICM   R9,15,VVRAMNLR          GET NUMBER OF RECORDS
         CVD   R9,DW                   CONVERT TO DECIMAL
         MVC   CATRNREC,MASK1          INSERT MASK
         ED    CATRNREC,CL3            UNPK NUMBER OF RECORDS
         SPACE
         OI    VVDSSWCH,VVDST60        SET SWITCH FOR SUBTYPE X'60'
         MVC   HW,0(R6)                LENGTH OF HEADER CELL
         AH    R6,HW                   POINT TO NEXT CELL
         SH    R8,HW                   SUBTRACT FROM RECORD LENGTH
         LTR   R8,R8                   END OF RECORD ?
         BZ    VVDS060                 YES ==> TRY Q TYPE
         SPACE
VVDS050  DS    0H
         CLI   2(R6),X'23'             DATASET INFORMATION CELL ?
         BNE   VVDS060                 NO ==> GO ON
         DROP  R6
         USING TYPE$23,R6
         SPACE
         XR    R9,R9
         ICM   R9,1,VVRNOEXT           GET NUMBER OF EXTENTS
         CVD   R9,DW                   CONVERT TO DECIMAL
         UNPK  CATRNOXT-1(3),DW+6(2)   UNPACK
         OI    CATRNOXT+1,X'F0'        CORRECT SIGN
         MVI   CATRNOXT-1,C' '         FILL IN BLANK
         CLI   CATRNOXT,C'0'           FIRST DIGIT = 0 ?
         BNE   *+8                     NO ==> SKIP MOVE
         MVI   CATRNOXT,C' '           INSERT LEADING BLANK
         OI    VVDSSWCH,VVDST23        SET SWITCH FOR SUBTYPE X'23'
         SPACE
VVDS060  DS    0H
         TM    VVDSSWCH,VVDSALL        ALL SUBTYPES PROCESSED ?
         BNO   VVDS028                 NO ==> TRY NEXT RECORD
         B     VVDS099                 GO TO RETURN
         SPACE
VVDSEOF  DS    0H
         L     R4,12(R7)                LOAD ACB ADDRESS
         XC    VVDSRBA,VVDSRBA          RBA = 0
         POINT RPL=(R4)
*        CLOSE ((R4))
*        OPEN  ((R4))
*        WTO   'LISTICF ==> VVDS END OF FILE - CALL SYSTEMS'
         B     VVDS099                 GO TO RETURN
VVDS090  DS    0H
         WTO   'LISTICF ==> VVDS TABLE OVERFLOW - CALL SYSTEMS'
         B     VVDS099                 GO TO RETURN
         SPACE
VVDS099  DS    0H
         MVI   VVDSSWCH,X'00'          RESET SWITCH
         SPACE
         LM    R0,R15,OWNSAVE          RESTORE ALL REGISTERS
         BR    RL                      RETURN
         EJECT
*        *********************************
*        *     DYNALLOC VVDS             *
*        *********************************
         SPACE
         DS    F
DYNAVVDS DS    0H
         ST    RL,*-4                  SAVE LINK REGISTER
         SPACE
         MVC   DYNVOL,CATRVOL
         LA    R1,DYNCBP               LOAD CB-CHAIN START ADDR.
         SPACE
         DYNALLOC
         LTR   R15,R15                 DYNALLOC OK ?
         BZ    GENACB                  YES ==> GO ON
         SPACE
         MVC   CATRRELT(18),=C'VVDS ALLOCATION ER'
         MVC   CATRRELT+18(14),=C'ROR - CODE => '
         LH    R1,DYNCB+4
         BAL   RL,CODECONV
         ST    R1,FW
         MVC   CATRRELT+32(4),FW
         LA    R15,4
*        ABEND 999,DUMP        =========>   ONLY FOR TEST   <==========
         B     DYNVVDSE
         SPACE
GENACB   GENCB BLK=ACB,                                                *
               EXLST=VVDSEXLS,                                         *
               MACRF=(ADR,DIR,SEQ,IN)
         LTR   R15,R15                 GENCB OK ?
         BNZ   GENCBERR                NO ==> ABEND
         MVC   40(8,R1),DYNDNAME       INSERT DDNAME
         ST    R1,8(R7)                SAVE ACB ADDRESS
         SPACE
GENRPL   GENCB BLK=RPL,                                                *
               ACB=(R1),                                               *
               AREA=VVDSAREA,                                          *
               AREALEN=4,                                              *
               ARG=VVDSRBA,                                            *
               OPTCD=(ADR,DIR,LOC,NSP)
         LTR   R15,R15                 GENCB OK ?
         BNZ   GENCBERR                NO ==> ABEND
         ST    R1,12(R7)
         XR    R15,R15
         SPACE
DYNVVDSE DS    0H
         L     RL,DYNAVVDS-4           RESTORE LINK REGISTER
         BR    RL                      RETURN
         EJECT
*        *********************************
*        *     PRINT TITEL LINES         *
*        *********************************
         SPACE
         DS    F
TITEL    EQU   *
         ST    RL,*-4                  SAVE LINK REGISTER
         SPACE
         AP    PGECOUNT,=P'1'          INCREASE PAGE COUNT
         MVC   HPAGE,MASK1             LOAD MASK
         ED    HPAGE,PGECOUNT          EDIT PAGE NUMBER
         SPACE
         PUT   PROT,HEADER1
         PUT   PROT,HEADER3
         PUT   PROT,HEADER4
         PUT   PROT,HEADER5
         PUT   PROT,HEADER2
         SPACE
         ZAP   LNECOUNT,=P'7'          INCREASE LINE COUNT
         SPACE
         L     RL,TITEL-4              RESTORE LINK REGISTER
         BR    RL                      RETURN
         EJECT
*        *********************************
*        *     PRINT THE PROTOCOL        *
*        *********************************
         SPACE
         DS    F
PRINT    EQU   *
         ST    RL,*-4
         SPACE
         CP    LNECOUNT,=P'55'         PAGE FILLED ?
         BNH   *+8                     NO ==> SKIP NEW PAGE
         BAL   RL,TITEL                NEW PAGE
         SPACE
         PUT   PROT,PROTREC
         SPACE
         CLI   PROTREC,C' '            ASA = ' ' ?
         BNE   *+14                    NO ==> GO ON
         AP    LNECOUNT,=P'1'          YES ==> LINE COUNTER + 1
         B     PRTENDE
         SPACE
         CLI   PROTREC,C'0'            ASA = '0' ?
         BNE   *+14                    NO ==> GO ON
         AP    LNECOUNT,=P'2'          YES ==> LINE COUNTER + 2
         B     PRTENDE
         SPACE
         CLI   PROTREC,C'-'            ASA = '-' ?
         BNE   *+14                    NO ==> GO ON
         AP    LNECOUNT,=P'3'          YES ==> LINE COUNTER + 3
         B     PRTENDE
         SPACE
PRTENDE  EQU   *
         MVC   PROTREC,BLANKS          CLEAR OUTPUT RECORD
         L     RL,PRINT-4              RESTORE LINK REGISTER
         BR    RL                      RETURN
         EJECT
*        *********************************
*        *     CONVERT HEX CODE TO CHAR  *
*        *********************************
         SPACE
         DS    F
CODECONV EQU   *
         ST    RL,*-4
         SPACE
         XC    FW,FW
         STH   R1,FW+2
         XR    R1,R1
         ICM   R1,8,FW+2
         SRL   R1,4
         STCM  R1,8,FW
         SLL   R1,8
         SRL   R1,4
         STCM  R1,8,FW+1
         ICM   R1,8,FW+3
         SRL   R1,4
         STCM  R1,8,FW+2
         SLL   R1,8
         SRL   R1,4
         STCM  R1,8,FW+3
         TR    FW,TRTAB
         SPACE
         L     R1,FW
         SPACE
         L     RL,CODECONV-4           RESTORE LINK REGISTER
         BR    RL                      RETURN
         EJECT
*        *********************************
*        *     QSAM CONTROL BLOCKS       *
*        *********************************
         SPACE
         PRINT NOGEN
PROT     DCB   DDNAME=SYSPRINT,MACRF=PM,LRECL=133,RECFM=FBA,DSORG=PS
         SPACE 2
SNAP     DCB   DDNAME=SYSSNAP,MACRF=(W),LRECL=125,RECFM=VBA,DSORG=PS,  *
               BLKSIZE=882
         SPACE 2
KARTE    DCB   DDNAME=SYSIN,MACRF=GM,LRECL=80,RECFM=FB,DSORG=PS,       *
               EODAD=CARDEOF
         SPACE 2
JFCBDCB  DCB   DDNAME=ICFCAT,MACRF=GM,DSORG=PS,EXLST=JFCBEXIT
         EJECT
ICFCAT   ACB   DDNAME=ICFCAT,AM=VSAM,                                  *
               PASSWD=PSWD,                                            *
               EXLST=VSMEXLST,MACRF=(KEY,SEQ,IN)
         SPACE
*        *********************************
*        *     VSAM CONTROL BLOCKS       *
*        *********************************
         SPACE
VSMEXLST EXLST EODAD=VSMEODAD,LERAD=VSMLERAD
         SPACE
VVDSEXLS EXLST EODAD=VVDSEOF,LERAD=VSMLERAD
         SPACE
VSAMSEQ  RPL   ACB=ICFCAT,AM=VSAM,                                     *
               AREA=VSAMAREA,AREALEN=4,ARG=VSAMKEY,                    *
               OPTCD=(KEY,SEQ,NUP,KGE,LOC)
         PRINT GEN
         EJECT
*        *********************************
*        *     LITERAL POOL              *
*        *********************************
         SPACE
         LTORG
         EJECT
*        *********************************
*        *     SAVE AREAS / CONSTANTS    *
*        *********************************
         SPACE
         DS    0D
DW       DS    0D
         DS    F
FW       DS    0F
         DS    X
CL3      DS    XL3
         SPACE
DATE     DS    F
TIME     DS    F
VSAMAREA DS    F
VVDSAREA DS    F
VVDSRBA  DS    F
OWNSAVE  DS    16F                     OWN SAVE AREA
GDGBASEL DS    H
GDGBNML  DS    H
HW       DS    H
         SPACE 2
PSWD     DC    FL1'8'
PASSWORD DC    CL8' '
         SPACE 2
SWITCH   DC    X'00'                   PROCESSING SWITCH
CARDENDE EQU   X'80'                   EOF INPUT
EMPTYGDG EQU   X'40'                   EMPTY GDG BASE
         SPACE
VVDSSWCH DC    X'00'                   PROCESSING SWITCH FOR VVDS
VVDSALL  EQU   X'F0'                   VVR ALL SUBTYPES
VVDSNCL  EQU   X'80'                   VVR HEADER CELL
VVDST21  EQU   X'40'                   VVR TYPE X'21'
VVDST23  EQU   X'20'                   VVR TYPE X'23'
VVDST60  EQU   X'10'                   VVR TYPE X'60'
         SPACE 2
         DS    0F
JFCBEXIT DC    X'07'
         DC    AL3(JFCBAREA)
JFCBAREA DS    CL176
         SPACE
GDGBNAME DS    CL44
RLTYPE   DC    CL7' '
         SPACE
BLANKTAB DS    0F
         DC    64X'00'
         DC    X'40'                   BALNK POSITION
         DC    191X'00'
         SPACE
MASK1    DC    XL6'402020202120'
MASK2    DC    XL10'402120204B20204B2020'
TRTAB    DC    C'0123456789ABCDEF'
         SPACE 2
LNECOUNT DC    PL3'99'
PGECOUNT DC    PL3'0'
CRDCOUNT DC    PL3'0'
         EJECT
*        *********************************
*        *     INPUT/OUTPUT AREAS/CONST. *
*        *********************************
         SPACE
CARDAREA DS    0CL80
CARDDDN  DS    CL8
CARDPSWD DS    CL8
CARDAUSW DS    0CL6
CARDALIA DS    C
CARDCLUS DS    C
CARDGDG  DS    C
CARDNVSA DS    C
CARDPATH DS    C
CARDUCAT DS    C
CARDRSV  DS    CL58
         SPACE
VSAMKEY  DC    44X'00'
         SPACE
BLANKS   DC    133C' '
HEXZERO  DC    44C'0'
         SPACE
PROTREC  DS    0CL133
CATRECD  DS    0CL133
CATRASA  DS    C
CATRTYPE DS    CL8                     ENTRY TYP
         DS    C
CATRDSN  DS    CL44                    DSNAME
         DS    C
CATRRELT DS    0CL44                   RELATED NAME (BEI USERCATS)
CATRVOL  DS    CL6                     VOLSER
CATRCDTE DS    CL6                     CREATION DATE
CATRKLNG DS    CL6                     KEY LENGTH
CATRRKP  DS    CL6                     RELATIVE KEY POSITION
CATRARLN DS    CL6                     AVG RECORD LENGTH
CATRMRLN DS    CL6                     MAXIMUM RECORD LENGTH
         DS    C
CATRSPT  DS    C                       SPACE ALLOCATION UNIT (R/T/C)
         DS    C
CATRSPRM DS    CL6                     PRIMARY QUANTITY
         DS    C
CATRSSEC DS    CL6                     SECONDARY QUANTITY
         DS    C
CATRNOXT DS    CL2                     NUMBER OF EXTENTS
         DS    C
CATRFCIS DS    CL2                     % FREE BYTES PER CI
         DS    C
CATRFCAS DS    CL2                     % FREE CI'S PER CA
         DS    C
CATRNREC DS    CL6                     NO OF RECORDS
         DS    C
CATRCISP DS    CL2                     NUMBER OF CI SPLITS
         DS    C
CATRCASP DS    CL2                     NUMBER OF CA SPLITS
         DS    C
CATRSHRO DS    CL2                     SHR OPTIONS
         DS    C
         EJECT
*        *********************************
*        *     TITLE LINES               *
*        *********************************
         SPACE
HEADER1  DS    0CL133
         DC    CL16'1LISTICF V1.1  '
         DC    CL5'VOL: '
TITVOLS  DC    CL6' '
         DC    CL11'  KATALOG: '
TITCATN  DC    CL44' '
         DC    C' '
         DC    C'  DATUM:'
HDATUM   DS    CL10
         DC    C'   ZEIT:'
HZEIT    DS    CL10
         DC    CL2' '
         DC    C'SEITE'
HPAGE    DS    CL6
         DC    CL1' '
         SPACE
HEADER2  DS    0CL133
         DC    C'0'
         DC    132C'-'
         SPACE
HEADER3  DS    0CL133
         DC    C'0'
         DC    CL79' '
         DC    CL37'   LRECL   SPACE-ALLOCATION EX %FREE'
         DC    CL16'RECORD SPLTS SH'
         SPACE
HEADER4  DS    0CL133
         DC    C' '
         DC    CL8'  TYPE  '
         DC    C' '
         DC    CL44'  D S N A M E '
         DC    C' '
         DC    CL6'VOLSER'
         DC    C' '
         DC    CL5'CREDT'
         DC    C' '
         DC    CL5'KEYLN'
         DC    C' '
         DC    CL5'  RKP'
         DC    C' '
         DC    CL11'  AVG   MAX'
         DC    CL17'TYP   PRIM   SEC '
         DC    CL2'NO'
         DC    C' '
         DC    C'CI CA'
         DC    C' '
         DC    CL6'NUMBER'
         DC    C' '
         DC    CL5'CI CA'
         DC    C' '
         DC    CL3'OP '
         SPACE
HEADER5  DS    0CL133
         DC    CL68' '
         DC    CL12'LIMIT/RELATE'
         DC    CL15' '
         DC    CL9'CURR.ENTR'
         DC    CL29' '
         EJECT
*        *********************************
*        *     DYNALLOC CONTROL BLOCKS   *
*        *********************************
         SPACE
DYNCBP   DS    0F
         DC    X'80'
         DC    AL3(DYNCB)
         SPACE
DYNCB    DC    X'1401'                 ALLOCATE
         DC    3H'0'
         DC    A(DYNCBTXT)             TEXT POINTER
         DC    2F'0'
         SPACE
DYNCBTXT DS    0F
         DC    A(DYNDDN)
         DC    A(DYNDSN)
         DC    X'80'
         DC    AL3(DYNDISP)
         SPACE
DYNDDN   DC    X'005500010008'         DDNAME = VARIABLE
DYNDNAME DC    CL8' '
         SPACE
DYNDSN   DC    X'000200010011'         DSN=SYS1.VVDS.VVOLSER
         DC    C'SYS1.VVDS.V'
DYNVOL   DC    CL6'      '
         SPACE
DYNDISP  DC    X'00040001000108'       DISP=SHR
         EJECT
*        *********************************
*        *     VVDS ALLOCATION TABLE     *
*        *********************************
         SPACE
VVDSTAB  DS    0F
         DC    640X'00'
         DC    16X'FF'                 END OF TABLE INDIKATOR
         SPACE 3
VVDSTBL  DSECT
VVDSVOLS DS    0CL16
VVDSVOL  DS    CL6                     VOLSER
         DS    CL2                     RESERVED
VVDSACB  DS    F                       ADDR OF ACB
VVDSRPL  DS    F                       ADDR OF RPL
         EJECT
TYPE$C   DSECT
***********************************************************************
*                                                                     *
*        V S A M   C L U S T E R   N A M E   C E L L                  *
*                                                                     *
***********************************************************************
VCNC     DS    0CL52                   VSAM CLUSTER NAME CELL
CLCELLN  DS    CL2                     LENGTH OF VCNC INCLUDING ITSELF
CLTYPE   DS    C                       TYPE 'C' FOR CLUSTER
CLCOMPLN DS    CL2                     LENGTH OF THE CLUSTER COMPONENT
CLNOEXT  DS    C                       NUMBER OF EXTENTION RECORDS
CLNMLEN  DS    C                       LENGTH OF THE CLUSTER KEY (45)
CLNAME   DS    CL44                    CLUSTER NAME PART OF KEY
CLNMPAD  DS    C                       PAD VALUE, SET TO BINARY ZERO
         EJECT
TYPE$D   DSECT
***********************************************************************
*                                                                     *
*        D A T A / I N D E X   N A M E   C E L L                      *
*                                                                     *
***********************************************************************
DINC     DS    0CL7                    DATA OR INDEX NAME CELL
DIDLEN   DS    CL2                     LENGTH OF DINC
DIDTYPE  DS    C                       TYPE 'D' OR 'I' FOR DATA/INDEX
DIDCMPLN DS    CL2                     LENGTH OF DINC COMPONENT
DIDIRFLG DS    C                       INTERRUPTION RECOGNITION FLAGS
DIDELETE EQU   X'80'                   DELETE IN PROGRESS
DIDUPDAT EQU   X'40'                   UPDATE-EXTENT IN PROGRESS
DIDSRMU  EQU   X'20'                   SUS-REC MOVE AND UPDATE IN PROG.
DIDRSV   EQU   X'1F'                   RESERVED
DIDKEYLN DS    C                       CONDENSED KEY LENGTH
DIDKEY   DS    0CL45                   CONDENSED KEY
         EJECT
TYPE$G   DSECT
***********************************************************************
*                                                                     *
*        A L T E R N A T E   I N D E X  N A M E   C E L L             *
*                                                                     *
***********************************************************************
ANC      DS    0CL7                    ALTERNATE INDEX NAME CELL
AIXCELN  DS    CL2                     LENGTH OF ANC
AIXTYPE  DS    C                       TYPE 'G' FOR ALTERNATE INDEX
AIXCMPLN DS    CL2                     LENGTH OF AIX COMPONENT
AIXFLG   DS    C                       FLAG BYTE
AIXUPG   EQU   X'80'                   AIX IS MEMBER OF UPGRADE SET
AIXRSV   EQU   X'7F'                   RESERVED
AIXKYLEN DS    C                       CONDENSED KEY LENGTH
AIXKEY   DS    0CL45                   CONDENSED KEY
         EJECT
TYPE$R   DSECT
***********************************************************************
*                                                                     *
*        P A T H  N A M E   C E L L                                   *
*                                                                     *
***********************************************************************
PNC      DS    0CL52                   PATH NAME CELL
PATHCELN DS    CL2                     LENGTH OF PNC
PATHTYPE DS    C                       TYPE 'R' FOR PATH
PATHRESV DS    CL2                     RESERVED
PATHATTR DS    C                       PATH ATTRIBUTES
PATHUPG  EQU   X'80'                   UPGRADE IF RELATED TO AIX
PATHUPD  EQU   X'40'                   UPDATE IF RELATED TO CLUSTER
PATHPSV1 EQU   X'20'                   RESERVED
PATHREL  EQU   X'10'                   0 RELATED TO AIX, 1 TO CLUSTER
PATHRSV  EQU   X'0F'                   RESERVED
PATHKYLN DS    C                       LENGTH OF PATH KEY
PATHNAME DS    CL44                    PATH NAME PART OF KEY
PATHPAD  DS    C                       PAD VALUE (BINARY ZERO)
         EJECT
TYPE$A   DSECT
***********************************************************************
*                                                                     *
*        N O N V S A M   N A M E   C E L L                            *
*                                                                     *
***********************************************************************
NVNC     DS    0CL52                   NONVSAM NAME CELL
NVCELEN  DS    CL2                     LENGTH OF NVNC
NVTYPE   DS    C                       TYPE 'A' FOR NONVSAM
NVRESV   DS    C                       RESERVED
NVOLCNT  DS    CL2                     NO. OF VOLUME CELLS (UP TO 255)
NVKEYLN  DS    C                       LENGTH OF NVSAM KEY
NVNAME   DS    CL44                    NONVSAM NAME
NVPAD    DS    C                       PAD VALUE (BINARY ZERO)
         EJECT
TYPE$B   DSECT
***********************************************************************
*                                                                     *
*        G E N E R A T I O N   D A T A   G R O U P   N A M E   C E L L*
*                                                                     *
***********************************************************************
GDGNC    DS    0CL52                   GENERATION DATA GROUP NAME CELL
GDGCELLN DS    CL2                     LENGTH OF GDGNC
GDGTYPE  DS    C                       TYPE 'B' FOR GDG
GDGCMPLN DS    CL2                     LENGTH OF GDG COMPONENT
GDGNOEXT DS    C                       NO. OF EXTENTION RECORDS
GDGKYLEN DS    C                       LENGTH OF GDG KEY
GDGKEY   DS    0CL45                   GDG KEY (NAME + PAD)
GDGNAME  DS    CL44                    GDG NAME
GDGPAD   DS    C                       PAD VALUE (BINARY ZERO)
         EJECT
TYPE$H   DSECT
***********************************************************************
*                                                                     *
*        G E N E R A T I O N   D A T A   S E T   N A M E   C E L L    *
*                                                                     *
***********************************************************************
GDSNC    DS    0CL10                   GENERATION DATA SET NAME CELL
GDSCELEN DS    CL2                     LENGTH OF GDSNC
GDSTYPE  DS    C                       TYPE 'H' FOR GDG DSN
GDSCMPLN DS    CL2                     LENGTH OF GDS COMPONENT
GDSGENO  DS    CL2                     GENERATION NUMBER OF GDS
GDSVERNO DS    C                       VERSION NUMBER OF GDS
GDSVOLCT DS    CL2                     NUMBER OF VOL CELLS IN GDS
         EJECT
TYPE$T   DSECT
***********************************************************************
*                                                                     *
*        T R U E N A M E   N A M E   C E L L                          *
*                                                                     *
***********************************************************************
TNC      DS    0CL52                   TRUENAME NAME CELL
TRUCELN  DS    CL2                     LENGTH OF GDSNC
TRUTYPE  DS    C                       TYPE 'T' FOR TRUENAME
TRURESV  DS    CL2                     RESERVED
TRUNTYPE DS    C                       TRUENAME REC FOR 'D',  'G', 'I'
TRUKEYLN DS    C                       TRUENAME KEY LENGTH
TRUNAME  DS    CL44                    DATA, INDEX OR AIX NAME
TRUPAD   DS    C                       PAD VALUE (BINARY ZERO)
         EJECT
TYPE$E   DSECT
***********************************************************************
*                                                                     *
*        E X T E N T I O N   N A M E   C E L L                        *
*                                                                     *
***********************************************************************
ENC      DS    0CL52                   EXTENTION NAME CELL
EXTCELN  DS    CL2                     LENGTH OF ENC
EXTTYPE  DS    C                       TYPE 'E' FOR VSAM, 'J' FOR GDG
EXTRESV  DS    CL3                     RESERVED
EXTNMLEN DS    C                       EXTENTION KEY LENGTH
EXTKEY   DS    0CL45                   EXTENTION KEY
EXTNAME  DS    CL44                    SHERE NAME PADDED WITH BLANKS
EXTPAD   DS    C                       PAD VALUE X'01' ==> 'FF'
         EJECT
TYPE$U   DSECT
***********************************************************************
*                                                                     *
*        I C F   C O N N E C T O R   N A M E   C E L L                *
*                                                                     *
***********************************************************************
ICFCNC   DS    0CL52                   ICF CONNECTOR NAME CELL
COCELEN  DS    CL2                     LENGTH OF ICFCNC
COTYPE   DS    C                       TYPE 'U' FOR ICF CONNECTOR
CORESV   DS    CL2                     RESERVED
COFLAG   DS    C                       FLAG BYTE
COCATYPE EQU   X'80'                   0 => VSAM, 1 => ICF
COKEYLN  DS    C                       CATALOG KEY LENGTH
CONAME   DS    CL44                    CATALOG NAME PART OF KEY
COPAD    DS    C                       PAD VALUE (BINARY ZERO)
         EJECT
TYPE$X   DSECT
***********************************************************************
*                                                                     *
*        A L I A S   N A M E   C E L L                                *
*                                                                     *
***********************************************************************
ALNC     DS    0CL52                   ALIAS NAME CELL
ALICELN  DS    CL2                     LENGTH OF ALNC
ALITYPE  DS    C                       TYPE 'X' FOR ALIAS
ALIRESV  DS    CL2                     RESERVED
ALIRTYPE DS    C                       TYPE OF RELATED NAME
ALIKYLEN DS    C                       LENGTH OF ALIAS KEY
ALINAME  DS    CL44                    ALIAS NAME PART OF KEY
ALIPAD   DS    C                       PAD VALUE (BINARY ZERO)
         EJECT
TYPE$01  DSECT
***********************************************************************
*                                                                     *
*        O W N E R S H I P   C E L L                                  *
*                                                                     *
***********************************************************************
OWNERC   DS    0CL18                   OWNERSHIP CELL
OWNCELLN DS    CL2                     LENGTH OF OWNERC
OWNTYPE  DS    C                       TYPE X'01' FOR OWNERSHIP CELL
OWNID    DS    CL8                     OWNER IDENTIFICATION
OWNFLAG  DS    C                       FLAG BYTE
OWNRACF  EQU   X'80'                   RACF PROTECTION
OWNKSDS  EQU   X'40'                   INDEX COMPONENT DATASET
OWNREUS  EQU   X'20'                   REUSEABLE DATASET
OWNERASE EQU   X'10'                   ERASE SPECIFIED
OWNRESV  EQU   X'0C'                   RESERVED
OWNSWAP  EQU   X'02'                   SWAP SPACE
OWNPAGE  EQU   X'01'                   PAGE SPACE
OWNCREDT DS    CL3                     CREATION DATE
OWNEXPDT DS    CL3                     EXPIRATION DATE
         EJECT
TYPE$02  DSECT
***********************************************************************
*                                                                     *
*        S E C U R I T Y   C E L L                                    *
*                                                                     *
***********************************************************************
SECURITY DS    0CL55                   SECURITY CELL
SECELLN  DS    CL2                     LENGTH OF SECURITY CELL
SECTYPE  DS    C                       TYPE X'02' FOR SECURITY CELL
SECPSWD  DS    0CL32                   PASSWORDS
SECMSTR  DS    CL8                     MASTER PASSWORD
SECCI    DS    CL8                     CONTROL INTERVAL PASSWORD
SECUPDTE DS    CL8                     UPDATE PASSWORD
SECREAD  DS    CL8                     READ PASSWORD
SECPMTCD DS    CL8                     PASSWORD PROMPTING CODE
SECATMP  DS    CL2                     MAX. NO. OF ATTEMPTS
SECVRMOD DS    CL8                     USER SECURITY VERIFICATION MOD
SECRCDLN DS    CL2                     USER AUTHORISATION RECORD LENGTH
SECRCD   DS    0CL256                  USER AUTHORISATION RECORD
         EJECT
TYPE$03  DSECT
***********************************************************************
*                                                                     *
*        A S S O C I A T I O N   C E L L                              *
*                                                                     *
***********************************************************************
ASSOCC   DS    0CL5                    ASSOCIATION CELL
ASCLEN   DS    CL2                     LENGTH OF ASSOCIATION CELL
ASCTYPE  DS    C                       TYPE X'03' FOR ASSOCIATION CELL
ASCOUNT  DS    CL2                     COUNT OF ASSOCIATIONS (MAX. 64K)
ASCKEYS  DS    0CL2                    REPEATED ASCOUNT TIMES
ASCFLAG  DS    C                       FLAG BYTE
ASCREUS  EQU   X'80'                   USED IN RELATION CELL ONLY
ASCRESV  EQU   X'7F'                   RESERVED
ASCKYLEN DS    C                       ASSOCIATION KEY LENGTH
ASCKEY   DS    0CL45                   CONDENSED ASSOCIATION KEY
         EJECT
TYPE$04  DSECT
***********************************************************************
*                                                                     *
*        V O L U M E   C E L L                                        *
*                                                                     *
***********************************************************************
VOLCELL  DS    0CL28                   VOLUME CELL
VOLLEN   DS    CL2                     LENGTH OF VOLUME CELL
VOLTYPE  DS    C                       TYPE X'04' FOR VOLUME CELL
VOLOFSET DS    C                       NOT USED
VOLSERN  DS    CL6                     VOLUME SERIAL NUMBER
VOLDEVTP DS    CL4                     DEVICE TYPE
VOLFLAG1 DS    C                       VOLUME FLAG1
VOLPRIME EQU   X'80'                   PRIME VOLUME ALLOCATED SPACE
VOLCANDI EQU   X'40'                   CANDIDATE VOLUME - NO SPACE
VOLOFLOW EQU   X'20'                   OVERFLOW KEYRANGE ONLY
VOLCONV  EQU   X'10'                   CONVERTED VSAM DATASET VOLUME
VOLNVSAM EQU   X'08'                   NONVSAM VOLUME CELL
VOLKYRNG EQU   X'04'                   KEYRANGE QUALIFIER PRESENT
VOLVPCI  EQU   X'02'                   PRIMARY VVR CI
VOLSSQWD EQU   X'01'                   SEQUENCE SET WITH DATA
VOLFLAG2 DS    C                       RESERVED
VOLVVRBA DS    0CL4                    RELATIVE BYTE ADDRESS OF VVR
VOLDSTTR DS    CL3                     NONVSAM FORMAT 1 DSCB TTR
VOLRSV01 DS    C                       RESERVED
VOLFLSEQ DS    CL2                     NONVSAM FILE SEQ. NUMBER (TAPE)
VOLKRQL  DS    0CL4                    KEYRANGE QUALIFIER (VSAM ONLY)
VOLRSV02 DS    CL4                     RESERVED FOR NONVSAM
VOLLKYLN DS    CL2                     LENGTH OF LOW KEY RANGE KEY
VOLLOWKY DS    0CL64                   1- 64 BYTES LOW KEY
         ORG   VOLCELL
VOLHKYLN DS    CL2                     LENGTH OF HIGH KEY RANGE KEY
VOLHIKY  DS    0CL64                   1 - 64 BYTES HIGH KEY
         EJECT
TYPE$05  DSECT
***********************************************************************
*                                                                     *
*        G E N E R A T I O N   A G I N G   T A B L E   C E L L        *
*                                                                     *
***********************************************************************
GATC     DS    0CL6                    GENERATION AGING TABLE CELL
GATCELN  DS    CL2                     LENGTH OF GAT CELL
GATYPE   DS    C                       TYPE X'05' FOR GAT CELL
GATATTR  DS    C                       ATTRIBUTES
GATDELET EQU   X'80'                   0 => OLDEST, 1 => ALL ENTRIES
GATSCRTH EQU   X'40'                   0 => NOSCR, 1 => SCR IF MOUNTED
GATRESV  EQU   X'3F'                   RESERVED
GATLIMIT DS    C                       MAX. GDG ENTRIES IN GDG BASE
GATCNT   DS    C                       CURRENT NO. OF ENTRIES IN GAT
GAT      DS    0CL4                    GAT ENTRY (FOR EVERY CUR. ENTRY)
GATEXTNO DS    C                       EXTENTION RECORD SEQ. NO.
GATGEN   DS    CL2                     GENERATION NUMBER OF GDS
GATWRAP  EQU   X'80'                   NUMBER EXCEEDS 9999
GATVER   DS    C                       VERSION NUMBER OF GDS
         EJECT
TYPE$06  DSECT
***********************************************************************
*                                                                     *
*        R E L A T I O N S H I P   C E L L                            *
*                                                                     *
***********************************************************************
RELCELL  DS    0CL5                    RELATIONSHIP CELL
RELLEN   DS    CL2                     LENGTH OF RELATIONSHIP CELL
RELTYPE  DS    C                       TYPE X'06' FOR RELATIONSHIP CELL
RELRESV1 DS    C                       RESERVED
RELCNT   DS    C                       COUNT OF RELKEYS
         ORG   RELCELL
RELKEYS  DS    0CL2                    REPEATED RELCNT TIMES
RELFLAG  DS    C                       FLAG BYTE
RELUPG   EQU   X'80'                   USED IN RELATION CELL ONLY
RELRESV2 EQU   X'7F'                   RESERVED
RELGLEN  DS    C                       LENGTH OF AIX CONDENSED KEY
RELGKEY  DS    0CL45                   CONDENSED AIX KEY
         EJECT
TYPE$Z   DSECT
***********************************************************************
*                                                                     *
*        V V R   H E A D E R   C E L L                                *
*                                                                     *
***********************************************************************
VVR      DS    0CL11                   VVR HEADER CELL
VVRLEN   DS    CL2                     LENGTH OF ENTIRE VVR
VVRHDR   DS    0CL9                    VVR HEADER
VVRHDLEN DS    CL2                     LENGTH OF HEADER CELL
VVRTYPE  DS    C                       TYPE 'Z' OR 'Q'
VVRFLAG  DS    C                       HEADER FLAG
VVRRESV1 EQU   X'80'                   RESERVED
VVRSELFD EQU   X'40'                   SELV DESCRIBING VVR FOR VVDS
VVRCATSD EQU   X'20'                   CATALOG SELFDESCRIBING VVR
VVRRESV2 EQU   X'10'                   RESERVED
VVRCOMPT EQU   X'08'                   COMP-TYPE 0 => 'D', 1 => 'I'
VVRRESV3 EQU   X'07'                   RESERVED
VVRKRQ   DS    CL4                     KEY RANGE QUALIFIER
VVRV1    DS    0C                      RESERVED
VVRCMPNL DS    C                       COMPONENT NAME LENGTH
VVRCMPNM DS    CL45                    COMPONENT NAME
         ORG   VVR
VVRKEYL  DS    C                       LENGTH OF KEY (<= 45)
VVRKEY   DS    CL45                    KEY (CLUSTER NAME + PAD)
         ORG   VVR
VVRCATNL DS    C                       CATALOG NAME LENGTH
VVRCATNM DS    CL45                    CATALOG NAME
         ORG   VVR
VVRBSENL DS    C                       LENGTH OF AIX NAME
VVRBSENM DS    CL45                    AIX NAME
         EJECT
TYPE$21  DSECT
***********************************************************************
*                                                                     *
*        V V R   D A T A S E T   I N F O R M A T I O N   C E L L      *
*                                                                     *
***********************************************************************
VVRDSINF DS    0CL53                   VVR DS INFO CELL
VVRDSLEN DS    CL2                     LENGTH OF DS INFO CELL
VVRDSTYP DS    C                       TYPE X'21' FOR VVR DS INFO CELL
VVRATTR1 DS    C                       DATA SET ATRIBUTES
VVRA1SPD EQU   X'80'                   SPEED
VVRA1UNQ EQU   X'40'                   UNIQUE
VVRA1REU EQU   X'20'                   REUSE
VVRA1ERS EQU   X'10'                   ERASE
VVRA1RSV EQU   X'08'                   RESERVED
VVRA1IUP EQU   X'04'                   INHIBIT UPDATE
VVRA1TEX EQU   X'02'                   TEMPORARY EXPORT
VVRA1TRO EQU   X'01'                   TRACK OVERFLOW
VVRATTR2 DS    C                       SHARE ATTRIBUTES
VVRA2REG EQU   X'C0'                   REGIONAL SHARING ATTRIBUTES
VVRA2SYS EQU   X'30'                   SYSTEM SHARING ATTRIBUTES
VVRA2RSV EQU   X'0C'                   RESERVED
VVRA2INT EQU   X'02'                   INTERNAL SYSTEM DATA SET
VVRA2NUS EQU   X'01'                   COMPONENT IS NOT USABLE
VVROPIND DS    C                       OPEN INDICATOR
VVRBUFSZ DS    CL4                     MINIMUM BUFFER SIZE
VVRSPACE DS    0CL7                    SPACE
VVRPRISP DS    CL3                     PRIMARY SPACE ALLOCATION
VVRSECSP DS    CL3                     SECONDARY SPACE ALLOCATION
VVRSPCFG DS    C                       SPACE FLAGS
VVRSPCOP EQU   X'C0'                   SPACE OPTIONS
VVRSPTRK EQU   X'80'                   TRACK ALLOCATION
VVRSPCYL EQU   X'C0'                   CYLINDER ALLOCATION
VVRSPCRS EQU   X'3F'                   RESERVED
VVRDSHU  DS    CL4                     DATASET HI USED RBA
VVRDSHA  DS    CL4                     DATASET HI ALLOC RBA
VVRLRECL DS    CL4                     AVG LOGICAL RECORD LENGTH
VVRDSRSV DS    CL2                     RESERVED
VVREXCPX DS    CL8                     EXCEPTION EXIT
VVRDSHK  DS    CL4                     DATASET HI KEY RBA
VVRCLSFG DS    C                       CLUSTER ATTRIBUTE FLAG
VVRCLRSV EQU   X'FC'                   RESERVED
VVRCFSWS EQU   X'02'                   CLUSTER DESCRIBES SWAPSPACE
VVRCFPGS EQU   X'01'                   CLUSTER DESCIBES PAGESPACE
VVRAIXFG DS    C                       AIX ATTRIBUTE FLAG
VVRAIUPG EQU   X'80'                   UPGRADE AIX
VVRAIRSV EQU   X'7F'                   RESERVED
VVRTMSTP DS    CL8                     TIMESTAMP
         EJECT
TYPE$23  DSECT
***********************************************************************
*                                                                     *
*        V V R   V O L U M E   I N F O R M A T I O N   C E L L        *
*                                                                     *
***********************************************************************
VVRVOLIN DS    0CL38                   VVR VOL INFO CELL
VVRVOLLN DS    CL2                     LENGTH OF VOL INFO CELL
VVRVOLTP DS    C                       TYPE X'23' FOR VOL INFO CELL
VVRVOLFG DS    C                       VOLUME FLAGS
VVRPRIME EQU   X'80'                   PRIME VOLUME
VVRVRSV1 EQU   X'40'                   RESERVED
VVROVFLW EQU   X'20'                   OVERFLOW VOLUME
VVRVRSV2 EQU   X'1F'                   RESERVED
VVRNOEXT DS    C                       EXT-NO. FOR DSET ON VOLUME
VVRHKRBA DS    CL4                     HIGH KEY RBA
VVRHURBA DS    CL4                     HIGH USED RBA
VVRHARBA DS    CL4                     HIGH ALLOCATED RBA
VVRBLKSZ DS    CL4                     BLOCKSIZE
VVRBLKTK DS    CL2                     NUMBER OF BLOCKS PER TRACK
VVRTRKAU DS    CL2                     TRACKS PER ALLOCATION UNIT
VVRTPEXT DS    C                       EXTENT TYPE FLAG
VVRSSDAT EQU   X'80'                   SEQUENCE SET WITH DATA
VVRNOPFM EQU   X'40'                   EXTENTS NOT PREFORMATTED
VVRCONV  EQU   X'20'                   CONVERTED VSAM DATASET VOLUME
VVRTPRSV EQU   X'1F'                   RESERVED
VVRTKCYL DS    CL2                     TRACKS PER CYLINDER
VVRBYTTK DS    CL4                     BYTES PER TRACK
VVRBYTAU DS    CL4                     BYTES PER ALLOCATION UNIT
VVRLOKYL DS    CL2                     LOW KEY LENGTH
VVRLOKYV DS    CL45                    LOW KEY ON VOLUME
         ORG   VVRVOLIN
VVRXTENT DS    0CL2                    EXTENT DESCRIBTION
VVRXTNTL DS    CL2                     LENGTH OF EXTENT SECTION
VVRXTNT  DS    0CL20                   EXTENTS (ONE OR MORE SETS)
VVRX     DS    0CL20                   INDIVIDUAL EXTENT
VVRXSEQN DS    CL2                     SEQUENCE NUMBER
VVRXSCH  DS    0CL4                    STARTING CCHH
VVRXSC   DS    CL2                     STARTING CC
VVRXSH   DS    CL2                     STARTING HH
VVRXECH  DS    0CL4                    ENDING CCHH
VVRXEC   DS    CL2                     ENDING CC
VVRXEH   DS    CL2                     ENDING HH
VVRXNTRK DS    CL2                     NUMBER OF TRACKS
VVRXSRBA DS    CL4                     STARTING RBA
VVRXERBA DS    CL4                     ENDING RBA
         EJECT
TYPE$60  DSECT
***********************************************************************
*                                                                     *
*        V V R   A M D S B   C E L L                                  *
*                                                                     *
***********************************************************************
VVRAMDCL DS    0CL98                   VVR AMDSB CELL
VVRAMDCN DS    CL2                     LENGTH OF ENTIRE VVR AMDSB CELL
VVRAMCAT DS    0CL96
VVRAMSB1 DS    0CL6
VVRAMID  DS    C                       TYPE X'60' FOR VVR AMDSB CELL
VVRAMATR DS    C                       ATTRIBUTES
VVRAMDST EQU   X'80'                   1 => KSDS, 0 => ESDS
VVRAMWCK EQU   X'40'                   WRITE CHECK
VVRAMSDT EQU   X'20'                   SEQUENCE SET WITH DATA
VVRAMREP EQU   X'10'                   REPLICATION
VVRAMORD EQU   X'08'                   USE VOLUMES IN LIST ORDER
VVRAMRGE EQU   X'04'                   KEY RANGE DATA SET
VVRAMRDS EQU   X'02'                   RRDS
VVRAMSPN EQU   X'01'                   SPANNED RECORDS ARE ALLOWED
VVRAMLEN DS    CL2                     LENGTH OF AMDSB
VVRAMNST DS    0CL2                    NUMBER OF ENTRIES IN IDX SECTION
VVRAMAKP DS    CL2                     ALTERNATE KEY RKP
VVRAMKEY DS    0CL4                    KEY DESCRIBTION
VVRAMRKP DS    CL2                     RELATIVE KEY POSITION
VVRAMKLN DS    CL2                     KEY LENGTH
VVRAMSB2 DS    0CL10
VVRAMPCA DS    CL1                     % FREE CI IN CA
VVRAMPCI DS    CL1                     % FREE BYTES IN CI
VVRAMCCA DS    CL2                     NUMBER OF CI'S PER CA
VVRAMFCA DS    CL2                     FREE CI'S  IN CA
VVRAMFCI DS    CL4                     FREE BYTES PER CI
VVRAMCIR DS    0CL8
VVRAMCIV DS    CL4                     CONTROL INTERVAL SIZE
VVRAMLCL DS    CL4                     MAXIMUM RECORD SIZE
VVRAMSB3 DS    0CL68
VVRAMHLR DS    0CL4                     RBA OF HIGH LEVEL INDEX RECORD
VVRAMSLT DS    CL4                     RECORD SLOTS PER CI
VVRAMSSR DS    0CL4                     RBA OF FIRST SEQ.SET RECORD
VVRAMMRR DS    CL4                     MAX. RELATIVE RECORD NUMBER
VVRAMARD DS    CL4                     PONTER TO FIRST ARDB
VVRAMAT3 DS    C                       ATTRIBUTES
VVRAMUNQ EQU   X'80'                   NON-UNIQUE OR UNIQUE KEYS
VVRAMFLT EQU   X'40'                   CYLINDER FAULT ON MSS OR STAGE
VVRAMBND EQU   X'20'                   BIND OR DO NOT BIND ON MSS
VVRAMWAT EQU   X'10'                   WAIT OR NOR-WAIT ON RELINQUISH
VVRAMLM  EQU   X'08'                   LOAD MODE OR DATASET LOADED
VVRAMRS1 EQU   X'07'                   RESERVED
VVRAMSNO DS    C                       NUMBER OF CONCURRENT REQUESTS
VVRAMRS2 DS    CL4                     RESERVED
VVRAMBFI DS    0CL2                    NUMBER OF INDEX BUFFERS
VVRAMBFD DS    CL2                     NUMBER OF DATA BUFFERS
VVRAMSTS DS    CL8                     SYSTEM TIME STAMP
VVRAMNIL DS    CL2                     NUMBER OF INDEX LEVELS
VVRAMNXT DS    CL2                     NUMBER OF EXTENTS
VVRAMNLR DS    CL4                     NUMBER OF LOGICAL RECORDS
VVRAMDLR DS    CL4                     NUMBER OF DELETED RECORDS
VVRAMILR DS    CL4                     NUMBER OF INSERTED RECORDS
VVRAMULR DS    CL4                     NUMBER OF UPDATED RECORDS
VVRAMRLR DS    CL4                     NUMBER OF RETRIEVED RECORDS
VVRAMASP DS    CL4                     BYTES OF FREE SPACE IN DATASET
VVRAMCIS DS    CL4                     NUMBER OF CI SPLITS
VVRAMCAS DS    CL4                     NUMBER OF CA SPLITS
VVRAMEXC DS    CL4                     NUMBER OF EXCP'S
         END
