 /*  MSGEXTR1  MESSAGE EXTRACTOR  V . R. MORDSTEIN 8.6.78 MODIF CSFA */
 (STRINGRANGE, SUBSCRIPTRANGE, SIZE):
0MSGXTR1:
 PROCEDURE (PAPA) OPTIONS (MAIN);
0    DCL
          INFILE         FILE RECORD INPUT
                         ENV (VB RECSIZE(160)),
          PRINTFL        FILE RECORD OUTPUT
                         ENV (CTLASA FB RECSIZE(163) BLKSIZE(163)),
          SYSIN          FILE RECORD INPUT,
          SYSPRINT       FILE PRINT,
0         INRECORD       CHAR (200) VARYING,
        1 INRECXX        UNALIGNED  DEF INRECORD,
          3 X0       BIN FIXED(15),
          3 INTAG        FIXED(13),
          3 X1           CHAR (1),
          3 INJOB        CHAR (5),
          3 INACT        CHAR (1),
          3 INTXT        CHAR (160),
0       1 LOOK_ARRAY (100),
          3 FUNCTION     CHAR (1),
          3 NFIELDS      PIC  '9',
          3 COMPFIELDS (4) CHAR (40) VARYING,
          3 LOOKPOS      PIC  '99',
          3 NJOBID       PIC  '99',
          3 JOBID (80)   CHAR (5),
0         PAPA           CHAR (90) VARYING,
          PARM           CHAR (90) VARYING,
                /* ×YYDDDHHMM-YYDDDHHMM×,LINECOUNT=XX,PAGECOUNT=XXX
                   ×DDMMJJHHMM-DDMMJJHHMM                             */
0         CHAPA          PIC  '9999999999999',
          AMIGO (2)      CHAR (12),
          CARALHO        CHAR (10) VARYING,
          INREC (50)     CHAR (80),
         (NCARDS,NCARDS1),
          DELIMITER      CHAR (1),
          RC         BIN FIXED(15),
          HELP           CHAR (200) VARYING,
         (TAGTO,TAGFROM) FIXED(13),
          LINELIMIT      PIC  '99' INIT (68),
          PAGELIMIT      PIC  '999' INIT (50),
         (P, P1)     BIN FIXED(15) ,
         (X,Y,Z)     BIN FIXED(15),
          PARMOK         FIXED(1)  INIT (0),
          ERROR          FIXED(1)  INIT (0),
          FOUND          FIXED(1)  INIT (-9),
          FIELDFOUND     PIC  '9',
          JOBIDFOUND     PIC  '9',
          RECCNT (4) BIN FIXED(31) INIT ((4)0),
          REPLY_# (0:99) PIC  '9'  INIT ((100)0),
          PLIXOPT    CHAR (90) VAR STATIC EXTERNAL INIT ('NR,ISA(64K)'),
0         CDRHEXA        ENTRY  RETURNS (CHAR (600) VARYING),
0         INDEX          BUILTIN,
          HBOUND         BUILTIN,
          DATE           BUILTIN,
          LENGTH         BUILTIN,
          SUBSTR         BUILTIN,
          TRANSLATE      BUILTIN,
          UNSPEC         BUILTIN,
          VERIFY         BUILTIN,
          ;
-    ON ERROR SNAP
        BEGIN;
              ON ERROR SYSTEM;
              PUT SKIP LIST ('******** ERROR UNIT CXSYSM@3 ********');
              PUT SKIP DATA (INRECORD);
              PUT SKIP LIST (LENGTH(INRECORD), 'IS THE LENGTH');
              PUT SKIP LIST (CDRHEXA(UNSPEC(INRECORD)));
              PUT DATA;
              SIGNAL ERROR;
        END;
0    ON STRINGRANGE SIGNAL ERROR;
0    ON SUBSCRIPTRANGE SIGNAL ERROR;
0    ON SIZE SIGNAL ERROR;
0    ON TRANSMIT (INFILE)
        BEGIN;
              ON ERROR SYSTEM;
              PUT SKIP (3) LIST ('*** TRANSMIT ERROR ON INPUT FILE, ' ××
                                 'RUN ABORTED ***');
              GO TO EOF2;
        END;
0    ON ENDFILE (SYSIN)  GO TO EOF1;
0    ON UNDEFINEDFILE (SYSIN) GO TO EOF1;
0    ON ENDFILE (INFILE) GO TO EOF2;
-/******************* BEDIENUNGSANLEITUNGEN AM ENDE *******************/
1/*  PARAMETER VALIDATION AND PROCESSING                              */
     PARM = PAPA;
     IF LENGTH (PARM) > 18 &
        SUBSTR (PARM,10,1) = '-'  /* DATE IN JULIAN */
        THEN DO;
                IF VERIFY (SUBSTR(PARM,01,9),'0123456789') > 0 ×
                   VERIFY (SUBSTR(PARM,11,9),'0123456789') > 0 ×
                   SUBSTR (PARM,01,2) < '78' ×
                   SUBSTR (PARM,01,2) > SUBSTR (DATE(),1,2) ×
                   SUBSTR (PARM,03,3) < '001' ×
                   SUBSTR (PARM,03,3) > '365' ×
                   SUBSTR (PARM,11,2) < '78' ×
                   SUBSTR (PARM,11,2) > SUBSTR (DATE(),1,2) ×
                   SUBSTR (PARM,13,3) < '001' ×
                   SUBSTR (PARM,13,3) > '365' ×
                   SUBSTR (PARM,06,2) > '23' ×
                   SUBSTR (PARM,08,2) > '59' ×
                   SUBSTR (PARM,16,2) > '23' ×
                   SUBSTR (PARM,18,2) > '59'
                   THEN PARMOK = 0;
                   ELSE DO;
                           CHAPA = SUBSTR (PARM,01,9) ×× '0000';
                           TAGFROM = CHAPA;
                           AMIGO (1) = TRANSLATE ('12.345 67:89',
                                       SUBSTR(CHAPA,1,9),'123456789');
                           CHAPA = SUBSTR (PARM,11,9) ×× '0000';
                           TAGTO = CHAPA;
                           AMIGO (2) = TRANSLATE ('12.345 67:89',
                                       SUBSTR(CHAPA,1,9),'123456789');
                           PARMOK = 1;
                        END;
             END;
     IF LENGTH (PARM) > 20 &
        SUBSTR (PARM,11,1) = '-'  /* DATE IN DDMMYY */
        THEN DO;
                IF SUBSTR (PARM,16,2) = 'XX'
                   THEN SUBSTR (PARM,16,2) = SUBSTR (DATE(),1,2);
                IF VERIFY (SUBSTR(PARM,01,10),'0123456789') > 0 ×
                   VERIFY (SUBSTR(PARM,12,10),'0123456789') > 0 ×
                   SUBSTR (PARM,01,2) < '01' ×
                   SUBSTR (PARM,01,2) > '31' ×
                   SUBSTR (PARM,03,2) < '01' ×
                   SUBSTR (PARM,03,2) > '12' ×
                   SUBSTR (PARM,05,2) < '78' ×
                   SUBSTR (PARM,05,2) > SUBSTR (DATE(),1,2) ×
                   SUBSTR (PARM,12,2) < '01' ×
                   SUBSTR (PARM,12,2) > '31' ×
                   SUBSTR (PARM,14,2) < '01' ×
                   SUBSTR (PARM,14,2) > '12' ×
                   SUBSTR (PARM,16,2) < '78' ×
                   SUBSTR (PARM,16,2) > SUBSTR (DATE(),1,2) ×
                   SUBSTR (PARM,07,2) > '23' ×
                   SUBSTR (PARM,09,2) > '59' ×
                   SUBSTR (PARM,18,2) > '23' ×
                   SUBSTR (PARM,20,2) > '59'
                   THEN PARMOK = 0;
                   ELSE DO;
                           CHAPA = JULIAN (SUBSTR(PARM,01,6)) ××
                                           SUBSTR(PARM,07,4) ×× '0000';
                           TAGFROM = CHAPA;
                           AMIGO (1) = TRANSLATE ('12.345 67:89',
                                       SUBSTR(CHAPA,1,9),'123456789');
                           CHAPA = JULIAN (SUBSTR(PARM,12,6)) ××
                                           SUBSTR(PARM,18,4) ×× '0000';
                           TAGTO = CHAPA;
                           AMIGO (2) = TRANSLATE ('12.345 67:89',
                                       SUBSTR(CHAPA,1,9),'123456789');
                           PARMOK = 1;
                        END;
             END;
     HELP = PARM;
     Z = INDEX (HELP,',LINECOUNT=');
     IF Z > 0
        THEN DO;
                IF VERIFY (SUBSTR(HELP,Z+11,2),'0123456789') > 0 ×
                   SUBSTR (HELP,Z+11,2) < '48'
                   THEN PARMOK = 0;
                   ELSE LINELIMIT = SUBSTR (HELP,Z+11,2);
             END;
     Z = INDEX (HELP,',PAGECOUNT=');
     IF Z > 0
        THEN DO;
                IF VERIFY (SUBSTR(HELP,Z+11,3),'0123456789') > 0 ×
                   SUBSTR (HELP,Z+11,3) < '001'
                   THEN PARMOK = 0;
                   ELSE PAGELIMIT = SUBSTR (HELP,Z+11,3);
             END;
     IF PARMOK = 0
        THEN DO;
                PUT SKIP (3) LIST (PARM ××
                                    ' *** WRONG PARM, FUCK OFF ***');
                RETURN;
             END;
1/*  SYSIN INPUT VALIDATION AND PROCESSING                            */
     NCARDS = 0;
     NCARDS1 = 0;
     INREC (*) = '';
     DO Z = 1 TO HBOUND (INREC,1);
        READ FILE (SYSIN) INTO (INREC(Z));
        IF INREC (Z) = ' '
           THEN GO TO EOF1;
        NCARDS = NCARDS + 1;
        NCARDS1 = NCARDS1 + 1;
        LOOKPOS (NCARDS) = 0;
        FUNCTION (Z) = SUBSTR (INREC(Z),1,1);
        DELIMITER = SUBSTR (INREC(Z),2,1);
        P = 2;
        DO Y = 1 TO 4;
           IF SUBSTR (INREC(Z),P+1) = ' '
              THEN GO TO LASTFIELD;
           P1 = INDEX (SUBSTR(INREC(Z),P+1),DELIMITER) + P;
           IF P1 = P × P1 = P + 1
           THEN GO TO LASTFIELD;
           NFIELDS (Z) = NFIELDS (Z) + 1;
           COMPFIELDS (Z,NFIELDS(Z)) = SUBSTR (INREC(Z),P+1,P1-P-1);
           P = P1;
        END;
        LASTFIELD:
     END;
     EOF1:
     PUT SKIP LIST ('*** SUPER FILTER HAS THE PLEASURE TO INFORM: ***');
     PUT SKIP (2) LIST ('PARM FOR THIS RUN: ' ×× PARM);
     PUT SKIP (2) LIST ('EXTRACT FROM ' ×× AMIGO (1) ×× ' - ' ××
                                           AMIGO (2) );
     PUT SKIP (1) LIST ('LINECOUNT: ' ×× LINELIMIT ××
                     '   PAGELIMIT: ' ×× PAGELIMIT);
     PUT SKIP (1);
     IF NCARDS = 0
        THEN PUT SKIP (2) LIST ('NO SELECTION CARDS SUPPLIED');
     DO Z = 1 TO NCARDS;
        IF NFIELDS (Z) = 1
           THEN CARALHO = ' FIELD:';
           ELSE CARALHO = ' FIELDS:';
        PUT SKIP (2) LIST (INREC (Z));
        PUT SKIP LIST ('FUNCTION: ' ×× FUNCTION (Z) ××
                   ' FOR THE FOLLOWING ' ×× NFIELDS(Z) ×× CARALHO);
        IF (FUNCTION (Z) = 'P' × FUNCTION (Z) = 'X') &
           NFIELDS (Z) = 2 &
           LENGTH (COMPFIELDS(Z,1)) = 2 &
           VERIFY (COMPFIELDS(Z,1),'0123456789') = 0 &
           COMPFIELDS (Z,1) > 00 &
           COMPFIELDS (Z,1) < 20
           THEN LOOKPOS (Z) = COMPFIELDS (Z,1);
        IF (FUNCTION (Z) ^= 'E' & FUNCTION (Z) ^= 'I' &
            FUNCTION (Z) ^= 'M' & FUNCTION (Z) ^= 'J' &
            FUNCTION (Z) ^= 'P' & FUNCTION (Z) ^= 'X') ×
           (FUNCTION (Z) = 'J' & NFIELDS (Z) ^= 1) ×
           (FUNCTION (Z) = 'M' & NFIELDS (Z) ^= 1) ×
           (FUNCTION (Z) = 'P' & NFIELDS (Z) ^= 2) ×
           (FUNCTION (Z) = 'P' & LOOKPOS (Z) = 0)  ×
           (FUNCTION (Z) = 'X' & NFIELDS (Z) ^= 2) ×
           (FUNCTION (Z) = 'X' & LOOKPOS (Z) = 0)  ×
            NFIELDS (Z) < 1
            THEN DO;
                    ERROR = 1;
                    PUT LIST ('*** THIS CARD IN ERROR ***');
                 END;
        DO Y = 1 TO NFIELDS (Z);
           PUT SKIP LIST (COMPFIELDS (Z,Y));
        END;
     END;
     IF ERROR = 1
        THEN DO;
                PUT SKIP LIST ('*** ERRORS, FUCK OFF ***');
                RETURN;
             END;
1/*  MAIN PROCESSING                                                  */
     LOOP:
     READ FILE (INFILE) INTO (INRECORD);
     IF INTAG < TAGFROM
        THEN GO TO LOOP;
     IF INTAG > TAGTO
        THEN GO TO EOF2;
     RECCNT (1) = RECCNT (1) + 1;
     FOUND = 0;
     RC = 0;
     DO Z = 1 TO NCARDS;
        FIELDFOUND = 0;
        HELP = SUBSTR (INRECORD,9,LENGTH(INRECORD)-8);
        IF FUNCTION (Z) = 'M'
           THEN DO;
                   IF LENGTH (INRECORD) >= LENGTH (COMPFIELDS(Z,1))
                                           + 14 &
                      SUBSTR (INTXT,1,LENGTH(COMPFIELDS(Z,1))) =
                      COMPFIELDS (Z,1)
                      THEN FIELDFOUND = 1;
                   GO TO TEST_IF_FOUND;
                END;
        IF FUNCTION (Z) = 'P'
           THEN DO;
                   IF LENGTH (INRECORD) >= LENGTH (COMPFIELDS(Z,1))
                                           + 13 + LOOKPOS(Z) &
                      SUBSTR(INTXT,LOOKPOS(Z),LENGTH(COMPFIELDS(Z,2))) =
                      COMPFIELDS (Z,2)
                      THEN FIELDFOUND = 2;
                    GO TO TEST_IF_FOUND;
                 END;
        IF FUNCTION (Z) = 'X'
           THEN DO;
                   IF LENGTH (INRECORD) >= LENGTH (COMPFIELDS(Z,1))
                                           + 13 + LOOKPOS(Z) &
                      SUBSTR(INTXT,LOOKPOS(Z),LENGTH(COMPFIELDS(Z,2))) =
                      COMPFIELDS (Z,2)
                      THEN FIELDFOUND = 2;
                    GO TO TEST_IF_FOUND;
                END;
        DO Y = 1 TO NFIELDS (Z);
           IF INDEX (HELP, COMPFIELDS(Z,Y)) > 0
              THEN FIELDFOUND = FIELDFOUND + 1;
        END;
        TEST_IF_FOUND:
        IF FIELDFOUND = NFIELDS (Z)
           THEN DO;
                   FOUND = 1;
                   IF FUNCTION (Z) = 'M'
                      THEN DO;
                              RC = 0;
                           END;
                   IF FUNCTION (Z) = 'P'
                      THEN DO;
                              RC = 0;
                           END;
                   IF FUNCTION (Z) = 'X'
                      THEN DO;
                              RC = 4;
                              GO TO END_LOOK;
                           END;
                   IF FUNCTION (Z) = 'E'
                      THEN DO;
                              RC = 4;
                              GO TO END_LOOK;
                           END;
                   IF FUNCTION (Z) = 'J'
                      THEN DO;
                              IF INACT = '*' &
                                 SUBSTR (INTXT,3,1) = ' ' &
                                 VERIFY (SUBSTR(INTXT,1,2),
                                 '0123456789') = 0 &
                                 REPLY_# (SUBSTR(INTXT,1,2))
                                 = 0
                                 THEN DO;
                                         NCARDS = NCARDS+1;
                                         FUNCTION(NCARDS)
                                         = 'P';
                                         NFIELDS(NCARDS)=2;
                                         REPLY_#
                                                 (SUBSTR(INTXT,1,2))
                                                       = 1;
                                         COMPFIELDS
                                         (NCARDS,1) = '01';
                                          COMPFIELDS
                                         (NCARDS,2) = 'R '
                                         ××SUBSTR(INTXT,1,2);
                                         LOOKPOS(NCARDS)
                                                       = 01;
                                       END;
                              IF INJOB = ' '
                                 THEN GO TO NO_JOBID;
                              RC = 0;
                              JOBIDFOUND = 0;
                              DO X = 1 TO NJOBID (Z);
                                 IF INJOB = JOBID (Z,X)
                                    THEN JOBIDFOUND = 1;
                              END;
                              IF JOBIDFOUND = 0
                                 THEN DO;
                                         NJOBID (Z) = NJOBID (Z) + 1;
                                         JOBID (Z,NJOBID(Z)) = INJOB;
                                         NCARDS = NCARDS + 1;
                                         FUNCTION (NCARDS) = 'I';
                                         NFIELDS (NCARDS) = 1;
                                         COMPFIELDS (NCARDS,1) = INJOB;
                                      END;
                              NO_JOBID:
                              GO TO END_LOOK;
                           END;
                   IF FUNCTION (Z) = 'I'
                      THEN DO;
                              RC = 0;
                              IF INJOB ^= ' ' & INACT = '*' &
                                 SUBSTR (INTXT,3,1) = ' ' &
                                 VERIFY (SUBSTR(INTXT,1,2),'0123456789')
                                        = 0 &
                                 REPLY_# (SUBSTR(INTXT,1,2)) = 0
                                 THEN DO;
                                         NCARDS = NCARDS + 1;
                                         FUNCTION (NCARDS) = 'P';
                                         NFIELDS (NCARDS) = 2;
                                         REPLY_# (SUBSTR
                                                  (INTXT,1,2)) = 1;
                                         COMPFIELDS (NCARDS,1) = '01';
                                         COMPFIELDS (NCARDS,2) =
                                            'R ' ×× SUBSTR (INTXT,1,2);
                                         LOOKPOS (NCARDS) = 01;
                                      END;
                           END;
                END;
     END;
0    END_LOOK:
     IF NCARDS > 0 & FOUND = 0 & RC = 0      /* NOT FOUND */
        THEN RC = 5;
     IF RC = 0
        THEN DO;
                CALL PRINT_ROUTINE ('PRT');
                RECCNT (2) = RECCNT (2) + 1;
             END;
     IF RC = 4
        THEN RECCNT (3) = RECCNT (3) + 1;
     IF RC = 5
        THEN RECCNT (4) = RECCNT (4) + 1;
     GO TO LOOP;
-    EOF2:
     CALL PRINT_ROUTINE ('END');
     IF NCARDS1 ^= NCARDS
        THEN DO;
                DO Z = NCARDS1 + 1 TO NCARDS;
                   IF FUNCTION (Z) = 'I'
                      THEN DO;
                              PUT SKIP (2) LIST
                                  ('FUNCTION: I GENERATED FOR:');
                              PUT SKIP LIST (COMPFIELDS (Z,1));
                           END;
                   IF FUNCTION (Z) = 'P'
                      THEN DO;
                              PUT SKIP (2) LIST
                                  ('FUNCTION: P (01) GENERATED FOR:');
                              PUT SKIP LIST (COMPFIELDS (Z,2));
                           END;
                END;
             END;
     PUT SKIP (3) LIST ('RECORDS THROUGH FILTER:', RECCNT(1));
     PUT SKIP (1) LIST ('RECORDS INCLUDED (I): ', RECCNT(2));
     PUT SKIP (1) LIST ('RECORDS EXCLUDED (E): ', RECCNT(3));
     PUT SKIP (1) LIST ('OTHER EXCLUDED:       ', RECCNT(4));
1/*  PRINT ROUTINE                                                    */
0  PRINT_ROUTINE:
   PROCEDURE (GO);
0    ON ERROR SNAP BEGIN;
        ON ERROR SYSTEM;
        PUT DATA;
        SIGNAL ERROR;
     END;
0    DCL
0       1 HEAD                     STATIC,
          3 X1           CHAR (24) INIT ((24)'='),
          3 X2           CHAR (2)  INIT ('  '),
          3 H1JUL        CHAR (6),
          3 X3           CHAR (2)  INIT ('  '),
          3 H1DAT        CHAR (8),
          3 X4           CHAR (2)  INIT ('  '),
          3 H1DAY        CHAR (10),
          3 X5           CHAR (2)  INIT ('  '),
          3 X6           CHAR (24) INIT ((24)'='),
          HEADX          CHAR (80) DEF HEAD,
0       1 DETAIL                   STATIC,
          3 D1TIM        CHAR (4),
          3 X1           CHAR (1)  INIT (' '),
          3 D1REST       CHAR (75),
          DETAILX        CHAR (80) DEF DETAIL,
0       1 PRINT_RECORD             STATIC,
          3 PRASA        CHAR (1),
          3 PRREST       CHAR (162),
0         GO             CHAR (3),
          DAY_TAB (0:6)  CHAR (10) STATIC INIT ('MONTAG','DIENSTAG',
                                                'MITTWOCH','DONNERSTAG',
                                                'FREITAG','SAMSTAG',
                                                'SONNTAG'),
          LINE (198)     CHAR (80) INIT ((198)(80)'') STATIC,
          DAY            CHAR (6)  STATIC,
          PRINT_TAG      PIC  '99999' STATIC,
          FIRSTFLAG      PIC  '9'  INIT (1) STATIC,
          HEADFLAG   BIN FIXED(15) INIT (1)  STATIC,
          I          BIN FIXED     STATIC,
          LINEPOS    BIN FIXED(15) INIT (1)  STATIC,
0         CHAPA_TAG      PIC  '99999' STATIC,
        1 CHAPA_TAGX     DEF CHAPA_TAG,
          3 YY           PIC  '99',
          3 DDD          PIC  '999',
0         INT            ENTRY (FLOAT(16)) RETURNS (BIN FIXED(31)),
          MOD            BUILTIN,
          ;
1    IF GO = 'END'
        THEN DO;
                IF LINEPOS = 1
                   THEN RETURN;
                   ELSE DO;
                           CALL PRINT_PAGE;
                           RETURN;
                        END;
             END;
     CHAPA = INTAG;
     CHAPA_TAG = SUBSTR (CHAPA,1,5);
     IF FIRSTFLAG ^= 1 & CHAPA_TAG ^= PRINT_TAG
        THEN HEADFLAG = 1;
     FIRSTFLAG = 0;
     PRINT_TAG = CHAPA_TAG;
     IF HEADFLAG = 1
        THEN DO;
                H1JUL = SUBSTR (CHAPA,1,2) ×× '.' ××
                        SUBSTR (CHAPA,3,3);
                H1DAT = NOJULIAN (SUBSTR(CHAPA,1,5));
                H1DAY = DAY_TAB
                        (MOD (INT((YY-1)/4)+6+DDD+YY*365, 7));
                LINE (LINEPOS) = HEADX;
                LINEPOS = LINEPOS + 1;
                HEADFLAG = 0;
             END;
     D1TIM = SUBSTR (CHAPA,6,4);
     D1REST = SUBSTR (INRECORD,9);
     LINE (LINEPOS) = DETAILX;
     LINEPOS = LINEPOS + 1;
     IF LINEPOS > LINELIMIT * 2
        THEN CALL PRINT_PAGE;
     RETURN;
-/*  PRINT A FULL PAGE                                                */
0   PRINT_PAGE:
    PROCEDURE;
0    DCL  PAGECOUNT      PIC  '999' INIT (0) STATIC,
          NO_MORE        PIC  '9'   INIT (0) STATIC;
0    PRASA = '1';
     PAGECOUNT = PAGECOUNT + 1;
     IF PAGECOUNT > PAGELIMIT
        THEN DO;
                IF NO_MORE = 0
                   THEN PUT SKIP (2) LIST
                           ('*** PAGE LIMIT REACHED, RUN ABORTED ***');
                NO_MORE = 1;
                TAGTO = 000000000;
                GO TO NO_PRINT;
             END;
     DO I = 1 TO LINELIMIT;
        PRREST = LINE (I) ×× '  ' ×× LINE (I+LINELIMIT);
        WRITE FILE (PRINTFL) FROM (PRINT_RECORD);
        PRASA = ' ';
     END;
     NO_PRINT:
     LINE (*) = '';
     HEADFLAG = 1;
     LINEPOS = 1;
    END;
0  END;
1/*  CONVERT DATE DDMMYY TO JULIAN                                    */
0  JULIAN:
   PROCEDURE (DAT) RETURNS (CHAR (5));
0    DCL  DAT            CHAR (6),  /* DDMMYY */
         (YY,MM,DD)      PIC  '99' STATIC,
          DAY            PIC  '999'STATIC,
          DAY_TAB (12)   PIC  '99' STATIC INIT (31,28,31,30,31,30,
                                                31,31,30,31,30,31),
          MOD            BUILTIN,
          I          BIN FIXED(15) STATIC,
          ;
-    YY = SUBSTR (DAT,5,2);
     MM = SUBSTR (DAT,3,2);
     DD = SUBSTR (DAT,1,2);
     DAY = DD;
     IF MOD (YY,4) = 0 & YY ^= 00
        THEN DAY_TAB (2) = 29;
     DO I = 1 TO MM-1;
        DAY = DAY + DAY_TAB (I);
     END;
     RETURN (YY ×× DAY);
   END;
1/*  CONVERT JULIAN DATE TO DDMMYY                                    */
0  NOJULIAN:
   PROCEDURE (JULIAN) RETURNS (CHAR (8));
0    DCL  JULIAN         CHAR (5),  /* YYDDD */
          DAY_TAB (12)   PIC  '99' AUTO INIT (31,28,31,30,31,30,
                                              31,31,30,31,30,31),
          DAY_CUM (0:12) PIC  '999' AUTO INIT (0,31,59,90,120,151,181,
                                               212,243,273,304,334,365),
         (YY,MM,DD)      PIC  '99' STATIC,
          DAYS           PIC  '999'STATIC,
          I          BIN FIXED(15) STATIC,
          MOD            BUILTIN,
          ;
-    YY = SUBSTR (JULIAN,1,2);
     DAYS = SUBSTR (JULIAN,3,3);
     IF MOD (YY,4) = 0 & YY ^= 00
        THEN DO;
                DAY_TAB (2) = 29;
                DO I = 2 TO 12;
                   DAY_CUM (I) = DAY_CUM (I) + 1;
                END;
             END;
     DO I = 1 TO 12;
        IF DAYS <= DAY_CUM (I)
           THEN DO;
                   MM = I;
                   DD = DAYS - DAY_CUM (I-1);
                   GO TO FUCK_OFF;
                END;
     END;
     FUCK_OFF:
     RETURN (DD ×× '.' ×× MM ×× '.' ×× YY);
   END;
0END;
1/*
           MESSAGE EXTRACTOR MIT SUPER FILTER
           ---------------------------------

 FILTER 1: DATUM/ZEIT VON - DATUM/ZEIT BIS
           DATUM KANN ALS MASCHINENDATUM (YYDDD) ODER
           IN DER FORM DDMMYY EINGEGEBEN WERDEN

 FILTER 2: SYSTEM (A, B ODER BEIDE)
           BEIDE (@ EINGEBEN) NUR FUER ALTEN SYSLOG MOEGLICH

 FILTER 3: CURRENT/OLD SYSLOG

 FILTER 4: SELEKTIONS-KARTEN
           SIND KEINE VORHANDEN IST DIESER INAKTIV

           SYNTAX DER SELEKTION  (IMMER AB KOL. 1)

           I*KEY1*(KEY2*..........KEYN*)         INCLUDE
           E*KEY1*(KEY2*..........KEYN*)         EXCLUDE
           J*KEY*                                INCLUDE JOB/TSU/STC
           M*KEY*                                INCLUDE MESSAGE
           P*POS*KEY*                            INCLUDE KEY AT POSITION
           X*POS*KEY*                            EXCLUDE KEY AT POSITION

           DEFINITIONEN

           *    SEPARATOR, IRGENDEIN ZEICHEN, GILT IMMER NUR FUER
                DIESE KARTE
           KEY  KANN BELIEBIGE LAENGE HABEN, ALLE ZEICHEN ERLAUBT.
                SIND MEHRERE KEYS AUF EINER KARTE ANGEGEBEN, SO SIND
                SIE 'UND'-VERKNUEPFT, DASS HEISST, ALLE KEYS DIESER
                KARTE MUESSEN IM RECORD VORHANDEN SEIN DAMIT DIE
                INCLUDE BZW. EXCLUDE FUNCTION STATTFINDET
           POS  POSITION DES KEYS IM RECORD, MUSS 2-STELLIG SEIN.
                POSITION 1 IST DIE STELLE IM RECORD IN DER IN DER
                REGEL DIE MESSAGES ANFANGEN

           FUNKTIONEN

           I   TREFFEN ALLE KEYS EINER I-KARTE FUER EINEN RECORD ZU,
               SO WIRD DIESER SELEKTIERT, ALSO AUFGELISTET - ES SEI,
               EINE E-KARTE GILT AUCH FUER DIESEN RECORD.
               GESUCHT WIRD AB DER STELLE DIE SICH UNMITTELBAR NACH
               DER ZEIT-ANGABE BEFINDET
           E   TREFFEN ALLE KEYS EINER E-KARTE FUER EINEN RECORD ZU,
               SO WIRD DIESER NICHT SELEKTIERT.
               GESUCHT WIRD WIE UNTER 'I' BESCHRIEBEN
           J   ALS KEY DIENT DER NAME BZW NAMENSTEIL EINES JOB/TSU/STC
               ALLE RECORDS DIE DIESEN JOB/TSU/STC BETREFFEN WERDEN
               WIE UNTER 'I' BESCHRIEBEN SELEKTIERT
           M   ALS KEY DIENT EIN MESSAGE-IDENTIFIER ODER ANFANGSTEIL
               DAVON. ES WIRD AB POS 1 IM RECORD GESUCHT
           P   RECORDS MIT DIESEM KEY IN DER ANGEGEBENEN POSITION WERDEN
               SELEKTIERT. GESUCHT WIRD AB DER ANGEGEBENEN POSITION
               IM RECORD, SOFERN DER RECORD DIE NOTWENDIGE MINDEST-
               LAENGE HAT
           X   RECORDS MIT DIESEM KEY IN DER ANGEGEBENEN POSITION WERDEN
               NICHT SELEKTIERT. SIEHE UNTER "P" UND "E"
 */
