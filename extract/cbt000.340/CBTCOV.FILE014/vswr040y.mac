//*********************************************************************
//* COPY MEMBER IGC0003F -> YGC0003F IN DSN=SYS1.LPALIB               *
//*********************************************************************
//COPYA   EXEC PGM=IEBCOPY
//SYSPRINT  DD SYSOUT=A
//FROM      DD DISP=SHR,DSN=SYS1.LPALIB
//TO        DD UNIT=SYSDA,DSN=&&TEMP,DISP=(,PASS,DELETE),
//             SPACE=(CYL,(20,,10))
//SYSIN     DD *
 C I=FROM,O=TO
 S MEMBER=((IGC0003F,YGC0003F))
//COPYB   EXEC PGM=IEBCOPY
//SYSPRINT  DD SYSOUT=A
//TO        DD DISP=SHR,DSN=SYS1.LPALIB
//FROM      DD DSN=&&TEMP,DISP=(SHR,DELETE)
//SYSIN     DD *
 C I=FROM,O=TO
 S MEMBER=((YGC0003F,,R))
//*********************************************************************
//* APPLY USERMOD                                                     *
//*********************************************************************
//SMP    EXEC  SMPXXX
//SMP.SMPPTFIN DD DATA
++USERMOD(SR00005).
++VER(Z038) FMID(EBB1102).
++JCLIN.
//LINK    EXEC PGM=HEWL,PARM='LIST,LET,MAP,XREF,REUS,RENT,AC=1'
//SYSLMOD   DD DSN=SYS1.LPALIB,DISP=SHR
//SYSIN     DD *
 NAME YGC0003F(R).
//LINK    EXEC PGM=HEWL,PARM='LIST,LET,MAP,XREF,REUS,RENT,AC=1'
//SYSLMOD   DD DSN=SYS1.LPALIB,DISP=SHR
//SYSIN     DD *
 ORDER SREMB804
 ORDER IEEMB804
 ENTRY SREMB804
 NAME  IGC0003F(R)
++SRC(SREMB804).
SREMB804 TITLE '&SYSDATE &SYSTIME SWISSAIR CEOPI/BRUNNER     WRITE-TO-L+
               OG SVC-36 PROCESSOR'
***********************************************************************
*                                                                     *
*        S R E M B 8 0 4   (WRITE-TO-LOG SVC-36 PROCESSOR)            *
*        -------------------------------------------------            *
*                                                                     *
***********************************************************************
*                                                                     *
*  FUNCTION      : THIS MODULE SREMB804 (SVC 36 - WTL) WILL PLACE THE *
*                  SYSTEM-ID, THE SYSTEM-DATE AND THE SYSTEM-TIME IN  *
*                  FRONT OF ANY WTL-PARAMETER-TEXT. THEN IT CALLS     *
*                  THE ORIGINAL IBM-WTL-MODULE (IEEMB804) TO SATISFY  *
*                  THE 'WRITE-TO-LOG' REQUEST.                        *
*                                                                     *
*  INPUT-RECORD  : LLCC**********TEXT(UP TO 126 CHARACTERS)********** *
*                                                                     *
*  MODIFY-RECORD : LLCCIYYDDDHHMMSSTH***TEXT(UP TO 112 CHARACTERS)*** *
*                                                                     *
*                  LL       = LENGTH OF WTL-TEXT                      *
*                  CC       = MCS-ROUTING-CODES                       *
*                  I        = SYSTEM-IDENTIFICATION OR '?'            *
*                  YYDDD    = DATE WHEN WTL ISSUED                    *
*                  HHMMSSTH = TIME WHEN WTL ISSUED                    *
*                  TEXT     = WTL-MESSAGE (XXX WTL 'TEXT')            *
*                                                                     *
*  REGISTERS     : R0  = *NOT APPLICABLE*    R8  = A(WTL-PARM-LIST)   *
*                  R1  = A(WTL-PARM-LIST)    R9  = *NOT APPLICABLE*   *
*                  R2  = *NOT APPLICABLE*    R10 = A(CPU-TABLE)       *
*                  R3  = A(CVT)              R11 = *NOT APPLICABLE*   *
*                  R4  = A(TCB)              R12 = WORK-REGISTER      *
*                  R5  = A(SVRB)             R13 = A(DSECT)           *
*                  R6  = A(ENTRY-POINT/BASE) R14 = RETURN-ADDRESS     *
*                  R7  = A(ASCB)             R15 = RETURN-CODE (0000) *
*                                                                     *
*  RETURN-CODES  : RC=0000.                                           *
*                                                                     *
*  USED MACROS   : GETMAIN,FREEMAIN,TIME.                             *
*                                                                     *
*  LINK-OPTIONS  : REUS,RENT,AC(1).                                   *
*                                                                     *
*  SPECIAL NOTES : LINK THIS CSECT SREMB804 IN FRONT WITH IBM-CSECT-  *
*                  MODULE IEEMB804 TOGETHER AS IGC0003F (SVC-36).     *
*                                                                     *
*  ORIGINATOR    : 10/MAY/1979               SWISSAIR - CEOPI/BRUNNER *
*                                                                     *
*  UPDATED       : 07/JUL/1980               SWISSAIR - CEOPI/BRUNNER *
*                                                                     *
***********************************************************************
         EJECT
*---------------------------------------------------------------------*
*        INITIALIZATION                                               *
*---------------------------------------------------------------------*
SREMB804 CSECT
         BALR  6,0                 BE SURE TO HAVE A SVC-BASE
         USING *,6                 USE REG6 AS BASE FOR THIS MODULE
         B     SREMBSTR            BRANCH AROUND ID/DATE/TIME
         DC    AL1(51)             LENGTH OF CONSTANTS
         DC    CL009'SREMB804'     PROGRAM-NAME
         DC    CL009'&SYSDATE'     DATE OF ASSEMBLY
         DC    CL006'&SYSTIME'     TIME OF ASSEMBLY
         DC    CL009'SWISSAIR'     COMPANY / COPYRIGHT
         DC    CL018'CEOPI/BRUNNER' ORIGINATOR / UPDATER
SREMBSTR EQU   *                   *
         LR    8,1                 SAVE REG1 (A(PARM-LIST)) TO REG8
         USING WTLINPUT,8          ESTABLISH ADRESSABILITY
         GETMAIN R,LV=200          GET 200 BYTES FROM SUBPOOL 00
         LR    13,1                SET UP BASE FOR DSECT
         USING WTLDSCT,13          USE REG13 AS DSECT/SAVEAREA
*---------------------------------------------------------------------*
*        MAINLINE PROCESSING                                          *
*---------------------------------------------------------------------*
         MVC   WTLOMCS(2),WTLIMCS  SET MCS-FLAGS IN NEW WTL
         STIDP STIDP               GET CPU-MODEL/SERIAL
         LA    10,CPUTABLE         LOAD ADDRESS OF CPU-TABLE
         MVI   WTLOSYS,C'?'        SET DEFAULT : SYSTEM=?
CPULOOK  EQU   *                   *
         CLI   0(10),X'FF'         END OF CPU-TABLE ?
         BE    CPUEND              BIY, CONTINUE WITH DEFAULT
         CLC   0(5,10),CPUSER      CPU-SERIAL/MODEL FOUND ?
         BE    CPUFOUND            BIY, FOUND AND CONTINUE
         LA    10,6(10)            FORWARD IN TABLE
         B     CPULOOK             SEARCH UNTIL END-OF-TABLE
CPUFOUND EQU   *                   *
         MVC   WTLOSYS(1),5(10)    MOVE SYS-ID (TABLE TO WTL)
CPUEND   EQU   *                   *
         TIME  DEC                 GET SYSTEM-TIME/DATE
         ST    1,DATE              SAVE PACKED SYSTEM-DATE ('00YYDDDF')
         UNPK  WTLODATE(5),DATX(3) UNPACK DATE
         OI    WTLODATX,X'F0'      CORRECT ZONE TO 'YYDDD'
         ST    0,TIME              SAVE SYSTEM-TIME ('HHMMSSTH')
         MVC   WTLOTIME(8),TIMEED  MOVE TIME-PATTERN
         ED    WTLOTIME(8),TIME    EDIT THE TIME
         CLI   WTLOTIME,X'F0'      FIRST DIGIT LESS THEN 0 ?
         BNL   NOEDIT              BIN, DON'T CORRECT
         MVI   WTLOTIME,X'F0'      SET TIME TO '0HMMSSTH'
NOEDIT   EQU   *                   *
         LH    10,WTLILEN          LOAD LENGTH OF ORIGINAL WTL
         LA    10,14(10)           INCREASE LENGHT (SYS-ID/DATE/TIME)
         LA    12,130              LOAD 130 IN REG12
         CR    12,10               WTL-MSG > 130 CHARACTERS ?
         BNL   NOTRUNC             BIN, CONTINUE - NORMAL
         LR    10,12               SET MAX WTL-LENGTH = 130
NOTRUNC  EQU   *                   *
         STH   10,WTLOLEN          SET LENGTH OF NEW WTL
         LA    12,15               LOAD DECREMENT VALUE
         SR    10,12               DECRESE LENGTH FOR 'EX-INSTR.'
         EX    10,WTLMOVE          MOVE ORIGINAL WTL-MESSAGE
         MVC   WTLOINST(8),WTLIINST MOVE 3 INSTRUCTIONS
         LA    1,WTLRETUR          GET ADDRESS OF RETURN-POINT
         ST    1,WTLRETAD          STORE RETURN-ADDRESS IN DSECT
         LA    1,WTLDSCT           GET ADDRESS OF DSECT
         ST    1,WTLOADDR          STORE IT IN DSECT (!!!)
*---------------------------------------------------------------------*
*        CALL 'WRITE-TO-LOG SVC-36' MODULE (IEEMB804)                 *
*---------------------------------------------------------------------*
         LA    1,WTLOTEXT          LOAD REG1 WITH NEW WTL-MESSAGE
         L     6,VWTLEP            LOAD ENTRY-POINT OF IEEMB804
         ST    14,WTLR14           SAVE RETURN-ADDRESS (THIS MODULE)
         LA    14,WTLOINST         SET RETURN-POINT TO 3 INSTR (DSECT)
         BR    6                   *** CALL IEEMB804 ***
         DROP  13                  BASE LOST FOR DSECT
WTLRETUR EQU   *                   *
         L     13,0(1)             RESTORE REG13 (DSECT-ADDRESS)
         USING WTLDSCT,13          USE REG13 AS BASE FOR DSECT
         L     14,WTLR14           RESTORE REG14 FROM DSECT
         FREEMAIN R,LV=200,A=(13)  RELEASE GETMAIN-STORAGE
         BR    14                  RETURN TO CALLER
*---------------------------------------------------------------------*
*        TABLE WITH CPU-SERIAL/MODEL AND SYSTEM-IDENTIFICATIONS       *
*---------------------------------------------------------------------*
CPUTABLE EQU   *                      CPU-TABLE
         DC    XL005'0710560168',C'R' SERIAL/MOD FOR SYS=R
         DC    XL005'0710840168',C'B' SERIAL/MOD FOR SYS=B
         DC    XL005'0812993033',C'W' SERIAL/MOD FOR SYS=W
         DC    XL005'0813743033',C'M' SERIAL/MOD FOR SYS=M
         DC    XL005'5108320158',C'Y' SERIAL/MOD FOR SYS=Y
         DC    XL005'5105400158',C'G' SERIAL/MOD FOR SYS=G
         DC    XL005'0000000000',C'?' SERIAL/MOD FOR FUTURE SYSTEM
         DC    XL005'0000000000',C'?' SERIAL/MOD FOR FUTURE SYSTEM
         DC    XL005'0000000000',C'?' SERIAL/MOD FOR FUTURE SYSTEM
         DC    XL005'0000000000',C'?' SERIAL/MOD FOR FUTURE SYSTEM
         DC    XL005'0000000000',C'?' SERIAL/MOD FOR FUTURE SYSTEM
         DC    XL005'0000000000',C'?' SERIAL/MOD FOR FUTURE SYSTEM
         DC    XL001'FF'              END OF CPU-TABLE
*---------------------------------------------------------------------*
*        DECLARES                                                     *
*---------------------------------------------------------------------*
WTLIINST BALR  14,0                ***** DON'T CHANGE INSTRUCTION *****
         L     14,10(14)           ***** DON'T CHANGE INSTRUCTION *****
         BALR  1,14                ***** DON'T CHANGE INSTRUCTION *****
WTLMOVE  MVC   WTLOMSG(*-*),WTLIMSG MOVE WTL-MESSAGE-STRINGE
TIMEED   DC    XL008'2120202020202020' PATTERN FOR TIME-EDIT
VWTLEP   DC    V(IEEMB804)         ENTRY-POINT OF ORIGINAL WTL (SVC-36)
*---------------------------------------------------------------------*
*        DSECT FOR WTL-INPUT-PARAMETER                                *
*---------------------------------------------------------------------*
WTLINPUT DSECT                     INPUT-PARAMETER
         DS    0CL130              LENGTH OF WTL-TEXT
WTLILEN  DS    XL002               TOTAL LENGTH OF WTL
WTLIMCS  DS    XL002               MCS-FLAGS
WTLIMSG  DS    CL112               WTL-MESSAGE
         DS    CL014               LAST 14 BYTES WILL BE TRUNCATED (!)
*---------------------------------------------------------------------*
*        WORK / PARAMETER AREA (200 BYTES GETMAINED/FREEMAINED)       *
*---------------------------------------------------------------------*
WTLDSCT  DSECT                     GETMAIN AREA
WTLOINST DS    XL008 ->THREE INSTR ************************************
WTLOADDR DS    F     ->A(DSECT)    *** THESE DECLARATIONS MUST BE   ***
WTLRETAD DS    F     ->A(WTLRETUR) *** IN FRONT OF THIS DSECT (!!!) ***
WTLR14   DS    F     ->SAVE REG14  ************************************
STIDP    DS    D                   STIDP RESULT (CPU-SERIAL/MODEL)
CPUSER   EQU   STIDP+1             CPU-SERIAL AND MODEL
TIME     DS    F                   SYSTEM-TIME 'HHMMSSTH'
DATE     DS    F                   PACKED SYSTEM-DATE '00YYDDDF'
DATX     EQU   DATE+1              EQUATE FOR PACKED DATE 'YYDDDF'
WTLOTEXT DS    0CL130              WTL-TEXT
WTLOLEN  DS    XL002               TOTAL LENGTH OF WTL
WTLOMCS  DS    XL002               MCS-FLAGS
WTLOSYS  DS    CL001               SYSTEM-IDENTIFICATION (R/G/Y/?)
WTLODATE DS    CL005               SYSTEM-DATE (YYDDD)
WTLODATX EQU   WTLODATE+4          EQUATE FOR ZONE IN DATE
WTLOTIME DS    CL008               SYSTEM-TIME (HHMMSSTH)
WTLOMSG  DS    CL112               WTL-MESAGE-STRING
         END   SREMB804
/*
//SMP.SYSIN     DD *
UCLIN CDS.
REP MOD(IEEMB804) LMOD(IGC0003F,YGC0003F).
ADD SRC(SREMB804) DLIB(USRDSRC) SYSLIB(USERSRC) FMID(EBB1102).
ADD MOD(SREMB804) DLIB(USRDLIB) LMOD(IGC0003F) FMID(EBB1102).
ENDUCL.
RECEIVE S(SR00005).
APPLY   S(SR00005).
