* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        MODULE NAME =  STDIO                                         *
*                                                                     *
*        DESCRIPTIVE NAME =  STRESS TEST FOR DASD DEVICES,            *
*                            I/O - MODULE                             *
*                                                                     *
*        AUTHOR : M.BURKHARDT                                         *
*                 ZUERCHER KANTONALBANK                               *
*                 DEPT. EDV - SE                                      *
*                 P.O.BOX                                             *
*                 CH 8022 ZUERICH                                     *
*                                                                     *
*                 PHONE : 01/275 71 11  EXT. 7149                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        CREATION DATE 05. AUGUST 1983                                *
*                                                                     *
*        FUNCTION =  PERFORMS SEEKS AND                               *
*                    FULL TRACK I/O ON DASD DEVICES                   *
*                                                                     *
*        NOTES =  FOR USE OF DEVTYPE MACRO SEE:                       *
*                 OS/VS2 SYSTEM PROGRAMMING LIBRARY: DATA MANAGEMENT  *
*                                                                     *
*                                                                     *
*        MODULE TYPE = CSECT    (FORTRAN SUBROUTINE)                  *
*                                                                     *
*        PROCESSOR = ASM                                              *
*                                                                     *
*        ENTRY POINTS =  SINGLE ENTRY POINT                           *
*                                                                     *
*        CALLS TO OTHER ROUTINES =  NONE                              *
*                                                                     *
*        REGISTER CONVENTIONS = STANDARD CONVENTIONS FOR FORTRAN      *
*                               SUBROUTINES                           *
*                                                                     *
*           REGISTER  0       =     UNUSED                            *
*           REGISTER  1       =     ADDRESS OF ARGUMENT LIST          *
*           REGISTER  2       =     UNUSED                            *
*           REGISTER  3       =     ADDRESS OF ARGUMENT LIST          *
*           REGISTER  4       =     WORK, ADDR OF FIRST ARGUMENT      *
*           REGISTER  5       =     WORK, SECOND ARGUMENT             *
*           REGISTER  6       =     WORK, FIRST ARGUMENT              *
*           REGISTER  7       =     WORK                              *
*           REGISTER  8       =     LINKREG TO I/O CODE               *
*           REGISTER  9       =     POINTER TO DEB,DEB-DA SECTION     *
*           REGISTER  10      =     BASEREG                           *
*           REGISTER  11      =     UNUSED                            *
*           REGISTER  12      =     UNUSED                            *
*           REGISTER  13      =     SAVE AREA POINTER                 *
*           REGISTER  14      =     RETURN REGISTER                   *
*           REGISTER  15      =     ENTRY POINT REGISTER              *
*                                                                     *
*                                                                     *
*        OPERATION =                                                  *
*                    THIS PROGRAM PERFORMS SEEKS AND READ-WRITE       *
*                    OPERATIONS ON A DASD-DEVICE.                     *
*                                                                     *
*                    ON FIRST ENTRY SUBROUTINE STDIO PICKS UP THE     *
*                    CHARACTERISTICS OF THE DEVICE AND ALLOCATED      *
*                    SPACE.                                           *
*                                                                     *
*                    ON FURTHER ENTRIES, BASED ON A RANDOMLY          *
*                    CALCULATED BLOCK (TRACK) ADDRESS A SEEK IS SET   *
*                    UP. IF THE CALCULATED TRACK LIES IN THE SAME     *
*                    CYLINDER AS THE PREVIOUS TRACK, THE COMMAND-     *
*                    CHAIN BIT OF THE NOP-CCW IS SET ON               *
*                    THE TRACK IS READ IN, THE ACCESS COUNTER         *
*                    (FIRST 4 BYTES OF THE BLOCK) IS UPDATED          *
*                    AND THE BLOCK WRITTEN BACK.                      *
*                                                                     *
*                    NO ERROR RECOVERY IS DONE. IN CASE OF AN         *
*                    I/O-ERROR A SNAP-DUMP (ID=02) OF THE RELEVANT    *
*                    CONTROL BLOCKS IS TAKEN AND CONTROL IS           *
*                    GIVEN BACK TO THE MAIN MODULE                    *
*                                                                     *
*        ENTRY POINT =  STDIO                                         *
*                                                                     *
*           LINKAGE =   STANDARD FORTRAN LINKAGE CONVENTIONS          *
*                                                                     *
*           INPUT   =   ARGUMENT LIST                                 *
*                                                                     *
*           OUTPUT  =   ON DD-NAMES SYSUT2 AND SNAP                   *
*                                                                     *
*           EXIT - NORMAL = AT PROGRAM END RETURN TO CALLING PROGRAM  *
*                                                                     *
*           EXIT - ABNORMAL = ABEND 111 AND SNAP DUMP ID=03           *
*                             IF SPACE NOT ALLOCATED IN CONTIG CYLS   *
*                                                                     *
*                             ABEND 222 AND SNAP DUMP ID=04           *
*                             IF I/O AREA TO SMALL                    *
*                                                                     *
*                                                                     *
*                                                                     *
*        RETURN CODES =  NONE                                         *
*                                                                     *
*        EXTERNAL - REFERENCES = NONE                                 *
*                                                                     *
*        MACROS = ABEND,DCB,DEVTYPE,EXCP,OPEN,SNAP                    *
*                                                                     *
*        CONTROL BLOCKS = IOB                                         *
*                                                                     *
*        MESSAGES = NONE                                              *
*                                                                     *
*        CHANGE ACTIVITY = NONE                                       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         PRINT ON,NOGEN
STDIO    CSECT
*---------------------------------------------------------------------*
*        EQUATES                                                      *
*---------------------------------------------------------------------*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
DCBDEBAD EQU   44                      ADDR OF DEB IN DCB
DCBOFOPN EQU   X'10'                   OPEN BIT
DCBDDNAM EQU   X'28'                   OFFSET TO DDNAME
DCBOFLGS EQU   48                      OFFSET TO OPENFLAGS
DEBDASEC EQU   32                      OFFSET OF DA SECTION
DEBSTRCC EQU   6                       START CC
DEBSTRHH EQU   8                       START HH
DEBNMEXT EQU   16                      OFFSET TO # OF EXTENDS
DEBNMTRK EQU   X'E'                    OFFSET TO # OF TRKS PER CYLINDER
         EJECT
*---------------------------------------------------------------------*
*        STANDARD LINKAGE FOR FORTRAN SUBPROGRAM.                     *
*        SEE FORTRAN PROGRAMMERS GUIDE                                *
*---------------------------------------------------------------------*
         B     5+1+4(R15)              BRANCH AROUND NAME
         DC    X'5'                    LENGTH OF MODULE NAME
         DC    CL5'STDIO'              MODULE NAME
         STM   R14,R12,12(R13)
         BALR  R10,0
         USING *,R10
         LR    R6,R13
         LA    R13,AREA
         ST    R13,8(0,R6)
         ST    R6,4(0,R13)
         B     BEG
AREA     DS    9D
BEG      DS    0H
         LR    R3,R1                       LOAD PARM REG TO R3
         TM    SNAPDCB+DCBOFLGS,DCBOFOPN   IS DCB OPEN ?
         BO    ISOPEN                      YES, GO TO MAIN SECTION
         EJECT
*---------------------------------------------------------------------*
*        INITIALISATION SECTION                                       *
*---------------------------------------------------------------------*
         OPEN (SNAPDCB,(OUTPUT))
*---------------------------------------------------------------------*
*        PICK UP DEVICE CHARACTERISTICS                               *
*---------------------------------------------------------------------*
         LA    R4,SYSUT2               LOAD ADDR OF DCB
         MVC   DDN1,DCBDDNAM(R4)       PICK UP DDNAME
         DEVTYPE DDN1,DDW1,DEVTAB,RPS
*---------------------------------------------------------------------*
*        CALCULATE MAX BLKSIZE                                        *
*---------------------------------------------------------------------*
         TM    DDW14+1,X'10'           IS BIT 3 BYTE 1 WORD 4 ON ?
         BO    LX00                    YES, MODULO DEVICE
*---------------------------------------------------------------------*
*        THIS IS NOT A 3375 OR 3380, SO THE TRACK CAPACITY            *
*        IS LESS THEN THE MAX BLOCKSIZE ALLOWED BY THE OS             *
*---------------------------------------------------------------------*
         L     R4,DDW11                LOAD MAX BLOCK LENGTH
         B     LX01
*---------------------------------------------------------------------*
*        THIS IS A 3375 OR 3380 SO CALCULATE THE CAPACITY             *
*        OF THE TRACK.                                                *
*        THIS VALUE IS GREATER THAN THE MAX BLOCKSIZE                 *
*        ALLOWED BY THE OS                                            *
*---------------------------------------------------------------------*
LX00     DS    0H
         SLR   R4,R4                   CLEAR  FOR INSERT
         ICM   R4,B'0001',DDW14        PICK UP MODULO FACTOR
         S     R4,ONE                  SUBTRACT 1
         SLR   R5,R5                   CLEAR  FOR INSERT
         ICM   R5,B'0011',DDW13        LOAD BYTES 0 AND 1 OF WORD 3
         AR    R4,R5
         ICM   R5,B'0011',DDW14+2      LOAD BYTES 2 AND 3 OF WORD 4
         SR    R4,R5
         ICM   R5,B'0011',DDW13+2      LOAD BYTES 2 AND 3 OF WORD 3
         SR    R4,R5
         EJECT
*---------------------------------------------------------------------*
*        COMPLETE  CCW                                                *
*---------------------------------------------------------------------*
LX01     DS    0H
         STCM  R4,B'0011',CCW5+6       STORE IN CCW5
         L     R5,LOUT                 LOAD LENGTH OF IOAREA
         CR    R5,R4                   IOAREA GE BLOCKLENGTH ?
         BL    LX04                    NO, GO ABEND
*---------------------------------------------------------------------*
*        OPEN  DATASETS                                               *
*---------------------------------------------------------------------*
         OPEN (SYSUT2,(UPDATE))
*---------------------------------------------------------------------*
*        CHECK IF CONTIG EXTEND                                       *
*---------------------------------------------------------------------*
         L     R9,SYSUT2+DCBDEBAD      LOAD ADDR OF DEB
         CLI   DEBNMEXT(R9),X'01'      IS IT A CONTIG SPACE ?
         BNE   LX05                    NO, GO ABEND
         LA    R9,DEBDASEC(R9)         LOAD ADDR OF FIRST DA SECTION
         CLC   HZERO,DEBSTRHH(R9)      DOES SPACE BEGIN ON CYL BOUND ?
         BNE   LX05                    NO, GO ABEND
         L     R4,0(R3)                LOAD ADDR OF FIRST ARG
         SLR   R6,R6                   CLEAR  FOR INSERT
         STCM  R6,B'0011',IOBSARG      STORE CCHH EQU 0000
         ICM   R6,B'0011',DEBSTRCC(R9) LOAD CC
         ST    R6,0(R4)                STORE CC IN FIRST ARG
         L     R4,4(R3)                LOAD ADDR OF SECOND ARG
         SLR   R6,R6                   CLEAR  FOR INSERT
         ICM   R6,B'0011',DEBNMTRK(R9) LOAD NUMTRACK OF SPACE
         ST    R6,0(R4)                STORE IN SECOND ARG
         L     R4,8(R3)                LOAD ADDR OF THIRD ARG
         SLR   R6,R6                   CLEAR  FOR INSERT
         ICM   R6,B'0011',DDW12+2      LOAD NUMTRACK/CYL
         ST    R6,0(R4)                STORE IN THIRD ARG
*        STM   R0,R15,REGS
*        SNAP  DCB=SNAPDCB,ID=01,STORAGE=(SNAPBEG,SNAPEND)
         B     RET
         EJECT
*---------------------------------------------------------------------*
*        MAIN SECTION                                                 *
*---------------------------------------------------------------------*
ISOPEN   DS    0H
         L     R4,0(R3)                LOAD ADDR OF FIRST ARG
         L     R6,0(R4)                LOAD FIRST ARG
         L     R5,4(R3)                LOAD ADDR OF SECOND ARG
         L     R5,0(R5)                LOAD SECOND ARG
*---------------------------------------------------------------------*
*        R4 CONTAINS ADDR OF FIRST ARG                                *
*        R6 CONTAINS FIRST ARG                                        *
*        R5 CONTAINS SECOND ARG                                       *
*---------------------------------------------------------------------*
         CLM   R6,B'0011',IOBCC        COMPARE CC OF LAST SEEK
         BE    L0100                   EQUAL, GO READ AND WRITE
         STCM  R6,B'0011',IOBCC        STORE CC IN IOB
         STCM  R5,B'0011',IOBHH        STORE HH IN IOB
         MVI   CCW2+4,X'20'            SET CMD CHAIN OFF,SLI ON
         BAL   R8,STARTIO              GO START SEEK
         B     RET
*---------------------------------------------------------------------*
*        PREPARE READ AND WRITE                                       *
*---------------------------------------------------------------------*
L0100    DS    0H
         STCM  R5,B'0011',IOBHH        STORE HH IN IOB
         MVI   CCW2+4,X'60'            SET CMD CHAIN ON,SLI ON
         MVI   CCW5,X'06'              SET READ DATA
         BAL   R8,STARTIO              GO START SEEK
         L     R7,IOAREA               LOAD FIRST WORD READ IN
         LA    R7,1(R7)                INCREMENT ONE
         ST    R7,IOAREA               STORE BACK
         MVI   CCW5,X'05'              SET WRITE DATA
         BAL   R8,STARTIO              GO START SEEK
         B     RET
STARTIO  DS    0H
         XC    ECB,ECB                 CLEAR ECB
         EXCP  IOB
         WAIT  ECB=ECB                 AWAIT IO COMPLETION
         CLI   ECB,X'7F'               IO OK ?
         BER   R8                      YES, RETURN TO CALLER OF SIO
         STM   R0,R15,REGS
         SNAP  DCB=SNAPDCB,ID=02,STORAGE=(SNAPBEG,SNAPEND)
         BR    R8                      RETURN TO CALLER OF SIO
*---------------------------------------------------------------------*
*        RETURN TO FORTRAN                                            *
*---------------------------------------------------------------------*
RET      DS    0H                      RETURN TO FORTRAN
         L     R13,AREA+4
         LM    R14,R12,12(R13)
         MVI   12(R13),X'FF'
         BR    R14
         EJECT
LX04     DS    0H
         SNAP  DCB=SNAPDCB,ID=03,STORAGE=(SNAPBEG,SNAPEND)
         ABEND 111
LX05     DS    0H
         SNAP  DCB=SNAPDCB,ID=04,STORAGE=(SNAPBEG,SNAPEND)
         ABEND 222
SNAPDCB  DCB   DSORG=PS,MACRF=(W),BLKSIZE=1632,LRECL=125,RECFM=VBA,    X
               DDNAME=SNAP
SNAPBEG  DS    0H
SYSUT2   DCB   DDNAME=SYSUT2,MACRF=E,DSORG=DA
IOB      DS    0D
         DC    X'42'                   UNRELATED FLAG + CMD-CHAINING
         DC    3X'00'
         DC    X'00'
         DC    AL3(ECB)
         DC    4X'00'
         DC    X'00'
         DC    4X'00'
IOBSTRTB DC    AL3(CCW1)
         DC    AL4(SYSUT2)
         DC    8X'00'
IOBM     DC    X'00'                   FIRST IOBEXTEND -> 0
         DC    2X'00'                  BB
IOBSARG  DS    0X
IOBCC    DC    X'FFFF'                 CC
IOBHH    DC    X'FFFF'                 HH
         DC    X'01'                   SEARCH FOR RECORD 1
ECB      DC    F'0'
CCW1     CCW   X'23',SECTOR,X'40',X'01'
CCW2     CCW   X'03',X'00',X'00',X'01'     CHAIN BIT SET IF R/W WANTED
         CCW   X'31',IOBSARG,X'40',X'05'
         CCW   X'08',*-8,X'00',X'00'
CCW5     CCW   X'00',IOAREA,X'60',X'FFFF'  READ OR WRITE TRACK
         CCW   X'22',SECTOR,X'00',X'01'    READ SECTOR
SECTOR   DC    X'00'                   FOR FIRST I/O SET SECTOR -> 0
HZERO    DC    H'0'                    CONSTANT
ONE      DC    F'1'                    CONSTANT
LOUT     DC    A(IOEND-IOAREA)         LENGTH OF I/O-AREA
         DC    C'REGS'                 EYE CATCHER
REGS     DS    16F                     REGISTER AREA
         EJECT
*---------------------------------------------------------------------*
*        AREA FOR DEVTYPE MACRO                                       *
*---------------------------------------------------------------------*
DDN1     DC    CL8'XXXXXXXX'
DDW1     DS    0F
DDW10    DS    F
DDW11    DS    F
DDW12    DS    F
DDW13    DS    F
DDW14    DS    F
DDW15    DS    F
*---------------------------------------------------------------------*
*        I/O - AREA                                                   *
*---------------------------------------------------------------------*
         DS    0D
IOAREA   DS    10F
SNAPEND  DS    0H
         DS    30000C
         DS    30000C
IOEND    DS    0H
         END
