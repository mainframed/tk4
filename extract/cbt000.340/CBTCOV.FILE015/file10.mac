*        READ/WRITE DASD RECORD
         PRINT  NOGEN
DASDVTOC CSECT
         SAVE  (14,12),,*
         BALR  R10,0
         USING *,R10
BASE     LA    R3,SAV
         ST    R13,4(R3)
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         STAX  STAXEXIT,OBUF=(OW,L'OW)
         SPACE
         GETMAIN R,LV=32760        AREA FOR RECORD
         ST    R1,ATRACK
         STCM  R1,7,RR+1          INTO READ CKD COMMAND
         STCM  R1,7,CPWRITE+1     INTO SEACH ID= FOR WRITE KD
         LA    R1,8(R1)           A(KEY AREA)
         STCM  R1,7,WR+1          INTO WRITE KD COMMAND
         SPACE 2
GETCOM   DS    0H                 GET,PROCESS COMMAND
         CLI   ENDSW,0            IF ATTENTION HAS BEEN HIT
         BNE   RETURN             THEN GET OUT
         MVC   LINE(L'CCOM),CCOM
         BAL   R9,PUT             COMMAND?
         BAL   R9,GET             READ COMMAND
         SPACE
*        LOOK  AT COMMAND
         CLC   =C'END',CMD
         BE    RETURN             TERMINATE
         CLC   =C'VOL=',CMD
         BE    CMVOL
         CLC   =C'CCHHR=',CMD     READ + DISPLAY RECORD
         BE    CMCCHHR
         CLC   =C'REP ',CMD       VERIFY/REPLACE - REP DISP/OLD/NEW
         BE    CMREP
         CLC   =C'BASE=',CMD      SET BASE FOR TTR  (CCHH - DEFAULT IS
*                                                    CYL 0 TRK 0)
         BE    CMBASE
         CLC   =C'TTR=',CMD       READ + DISPLAY RECORD
         BE    CMTTR
         SPACE
         MVC   LINE(L'ICOM),ICOM  LIST
         BAL   R9,PUT
         B     GETCOM
         SPACE 3
RETURN   DS    0H
         BAL   R9,CLOSED          GO CLOSE DASD DEVICE
         SPACE
         CLI   STAXSW,0           IF STAX ALREADY CANCELLED
         BNE   NOSTCAN
         STAX  ,                  CANCEL
NOSTCAN  L     R13,4(R13)
         RETURN (14,12),RC=0
         SPACE 3
CMVOL    DS    0H                 SETUP REQUIRED VOLUME - VOL=YYYYYY
         BAL   R9,CLOSED          CLOSE PREVIOUS ONE IF OPEN
         MVC   VOL,CMD+4          MOVE IN NEW VOLUME
         BAL   R9,OPEND           OPEN NEW VOLUME
         B     GETCOM
         SPACE 2
CMCCHHR  DS    0H                 READ AND PRINT
         LA    R1,CMD+6           PAST CCHHR=
         ST    R1,INPTR
         BAL   R9,GETHEX          GET CCHHR
         LTR   R4,R4              ANY DIGITS FOUND
         BZ    NODIG
         STM   R2,R3,MBBCCHHR
HAVADDR  SR    R1,R1
         IC    R1,MBBCCHHR+7      GET R
         LTR   R1,R1
         BZ    NOREC0             DONT' ALLOW TO READ/WRITE R0
         STC   R1,RECORD          KEEP REQD RECORD NUMBER
         BCTR  R1,0               DO SEACH ID= TO PREVIOUS RECORD
         MVC   IOBSEEK,MBBCCHHR
         STC   R1,IOBSEEK+7
         BAL   R6,READD           GO READ RECORD
         SPACE
         LTR   R15,R15            IF WE HAD EXCP ERROR
         BNE   HADRERR            THEN DONT LOOK FURTHER
         L     R1,ATRACK          A(RECORD AREA)
         CLC   RECORD,4(R1)       MAKE SURE WE DID NOT WRAP BACK
         BE    HADRERR            TO RECORD 1
         MVC   0(8,R1),=XL8'00'   SETUP AS NO RECORD FOUND
         MVC   LINE(L'NOREC),NOREC
         BAL   R9,PUT
         SPACE
HADRERR  BAL   R6,PRINTR          PRINT RECORD
         SPACE
         B     GETCOM
         SPACE
READD    LA    R1,CPREAD          READ CHANNEL PROGRAM
         ST    R1,IOBSTART        INTO IOB
         L     R1,ATRACK          PUT A DUMMY RECORD INTO
         MVC   0(8,R1),=XL8'00'   RECORD AREA
         BAL   R9,EXCP
         BR    R6
         SPACE
WRITED   LA    R1,CPWRITE         WRITE CHANNEL PROGRAM
         ST    R1,IOBSTART        INTO IOB
         BAL   R9,EXCP
         BR    R6
         SPACE
CMREP    DS    0H                 UPDATE RECORD
*
*        REP DISP/OLD/NEW
         LA    R1,CMD+3
         LA    R15,16
CMREP1   CLI   0(R1),C' '
         BNE   CMREP2
         LA    R1,1(R1)           LOOK FOR NON-BLANK
         BCT   R15,CMREP1
         B     NODIG              NO DATA
CMREP2   ST    R1,INPTR
         BAL   R9,GETHEX          GET DISPLACMENT
         LTR   R4,R4
         BZ    NODIG              INVALID HEX
         LTR   R2,R2
         BNZ   TOOBIG
         ST    R3,REPDISP         KEEP DISPLACEMENT
         BAL   R6,GETSTR
         STH   R4,REPLEN          LENGTH OF 'OLD' DATA
         STM   R2,R3,REPOLD       OLD DATA
         BAL   R6,GETSTR
         CH    R4,REPLEN          OLD LEN SAME AS NEW?
         BNE   IREPSTR            NO
         STM   R2,R3,REPNEW       NEW DATA
         BAL   R6,READD           RE-READ RECORD
         LTR   R15,R15            ANY PROBLEMS
         BNE   GETCOM             THEN SKIP RE-WRITE
         SPACE
         L     R1,ATRACK          RECORD AREA
         SR    R15,R15
         ICM   R15,3,6(R1)        DATA LENGTH FROM COUNT
         SR    R0,R0
         IC    R0,5(R1)           KL
         AR    R15,R0             TOTAL LEN
         STCM  R15,3,WR+6         LENGTH FOR WRITE KEY+DATA
         L     R14,REPDISP        DISPLACEMENT
         AH    R14,REPLEN         +LENGTH
         CR    R14,R15            CHECK WITHIN RECORD
         BH    TOOBIG
         A     R1,REPDISP         ADDR TO VER/REP (LESS 8 - COUNT)
         LH    R15,REPLEN
         BCTR  R15,0              EX LENGTH
         EX    R15,COMPARE        VERIFY
         BNE   VERNOGO
         EX    R15,MOVE           REPLACE
         SPACE
         BAL   R6,WRITED          RE-WRITE KEY AND DATA
         BAL   R6,PRINTR
         B     GETCOM
         SPACE
COMPARE  CLC   8(1,R1),REPOLD
MOVE     MVC   8(1,R1),REPNEW
         SPACE
GETSTR   DS    0H                 GET VER OR REP STRING
         L     R1,INPTR
         CLI   0(R1),C'/'         /...
         BNE   IREPSTR
         LA    R1,1(R1)           PAST /
         ST    R1,INPTR
         BAL   R9,GETHEX
         LTR   R4,R4              ANY VALID HEX?
         BE    IREPSTR            NO
         ST    R4,WORK
         TM    WORK+3,X'01'       ODD NUMBER OF HEX DIGITS
         BO    IREPSTR
         LA    R1,16              MAX NO OF DIGITS
         SR    R1,R4              16-(NUMBER OF DIGITS)
         SLL   R1,2               4 BITS PER DIGIT
         SLDL  R2,0(R1)           THROW OUT LEADING ZEROS
         SRL   R4,1               NUMBER OF BYTES
         BR    R6
         SPACE 2
CMBASE   DS    0H                 BASE=CCHH
         LA    R1,CMD+5           PAST '='
         ST    R1,INPTR
         BAL   R9,GETHEX          GET CCHH
         LTR   R4,R4              ANY DATA
         BE    NODIG
         LTR   R2,R2              EXPECT ONY 4 BYTES
         BNZ   TOOMUCH            MORE THAN CCHH??
         ST    R3,WORK            CCHH
         SRL   R3,16              00CC
         MH    R3,DEBENDHH        * NUMBER OF TRACKS/CYL
         AH    R3,WORK+2          +HH
         ST    R3,BASET           REL TRACK
         B     GETCOM
         SPACE 2
CMTTR    DS    0H                 READ + PRINT (TTR SUPPLIED)
         LA    R1,CMD+4           TTR=TTR
         ST    R1,INPTR
         BAL   R9,GETHEX          GET TTR
         LTR   R4,R4
         BZ    NODIG
         STC   R3,MBBCCHHR+7      R
         SRL   R3,8               THROW OUT R
         A     R3,BASET           ADD ON BASE TRACK
         SR    R2,R2              ENSURE 0 FOR DIVIDE
         LH    R1,DEBENDHH        HI TRACK NUMBER
         DR    R2,R1              R2=TRACK R3=CYL
         XC    MBBCCHHR(3),MBBCCHHR MBB=000
         STCM  R3,3,MBBCCHHR+3    MBBCCXXR
         STCM  R2,3,MBBCCHHR+5    MBBCCHHR
         B     HAVADDR            GO READ + PRINT
         SPACE  2
TOOMUCH  MVC   LINE(L'BASEM),BASEM  MORE THAN CCHH SPECIFIED?
         B     EOUT
         SPACE 2
IREPSTR  MVC   LINE(L'IREP),IREP  INVALID STRINGS
         B     EOUT
VERNOGO  MVC   LINE(L'IVER),IVER  NOT VERIFIED
         BAL   R9,PUT
         BAL   R6,PRINTR
         B     GETCOM
TOOBIG   MVC   LINE(L'BIG),BIG
         B     EOUT
NODIG    MVC   LINE(L'MISI),MISI  DATA REQUIRED
EOUT     BAL   R9,PUT
         B     GETCOM
NOREC0   MVC   LINE(L'REC0),REC0  RECORD 0 NOT ALLOWED
         B     EOUT
         SPACE 2
PRINTR   DS    0H                 PRINT RECORD IN TRACK AREA
         L     R2,ATRACK
         SR    R3,R3              FOR LENGTH TO PRINT
         ICM   R3,3,6(R2)         DL
         SR    R1,R1
         IC    R1,5(R2)           KL
         AR    R3,R1              KEY+DATA
         SPACE
         MVC   LINE+1(5),=C'COUNT'
         L     R1,0(R2)           CCHH
         BAL   R9,ADCON           HEX-IFY
         MVC   LINE+7(8),ADDR     HEX CCHH
         L     R1,4(R2)           R KL DL DL
         BAL   R9,ADCON
         MVC   LINE+15(2),ADDR    R
         MVC   LINE+18(2),ADDR+2  KL
         MVC   LINE+21(4),ADDR+4  DL
         BAL   R9,PUT             PRINT COUNT
         SPACE
         LA    R2,8(R2)           KEY,DATA
         XC    DISP,DISP          DISPLACEMENT
PRINTL   LTR   R3,R3
         BNPR  R6                 DONE
         L     R1,DISP
         BAL   R9,ADCON
         MVC   CDSP,ADDR+2        LO ORDER 3 BYTES
         MVC   CCHR,0(R2)         CHAR FORM
         TR    CCHR,PTAB          KILL UNPRINTABLES
         LA    R4,4               NUMBER OF GROUPS
         LA    R5,CGRP            FIRST GROUP
PRINTG   L     R1,0(R2)           BYTES TO PRINT
         BAL   R9,ADCON
         MVC   0(8,R5),ADDR
         LA    R2,4(R2)           FOR NEXT 4
         LA    R5,L'CGRP(R5)      IN LINE
         BCT   R4,PRINTG
         SPACE
         SH    R3,=H'16'          LENGTH REMAINING
         BNM   PRINTP             FULL LINE
         LPR   R1,R3              NUMBER TOO FAR
         LA    R4,CCHR+L'CCHR-1   LAST IN CHARS
PRINTOC  MVI   0(R4),C'-'         NOT PART OF RECORD
         BCTR  R4,0               BACK TO PREV
         BCT   R1,PRINTOC         REMOVE ALL NOT PART OF RECORD
         LR    R15,R3
         AH    R15,=H'16'         NUMBER OF BYTES IN THIS LINE
         LA    R4,4               NUMBER OF GROUPS
         LA    R5,CGRP            1ST GROUP
PRINTOH  LR    R1,R5              START FOR THIS GROUP
         LA    R14,4              NUMBER IN GROUP
PRINTOG  LTR   R15,R15            IF WITHIN RECORD
         BP    NOREM              THEN LEAVE IT
         MVC   0(2,R1),=C'--'     ELSE TAKE OUT
NOREM    LA    R1,2(R1)
         BCTR  R15,0
         BCT   R14,PRINTOG
         LA    R5,L'CGRP(R5)      NEXT GROUP
         BCT   R4,PRINTOH         FOR 4 GROUPS
         SPACE
PRINTP   BAL   R9,PUT             LINE OUT
         L     R1,DISP            INCREASE DISPLACEMENT
         AH    R1,=H'16'
         ST    R1,DISP
         B     PRINTL             CHECK FOR MORE
         SPACE 2
ADCON    ST    R1,WORK
         BAL   R14,HCON
         STCM  R1,3,ADDR+6
         IC    R1,WORK+2
         BAL   R14,HCON
         STCM  R1,3,ADDR+4
         IC    R1,WORK+1
         BAL   R14,HCON
         STCM  R1,3,ADDR+2
         IC    R1,WORK
         BAL   R14,HCON
         STCM  R1,3,ADDR
         BR    R9
         SPACE 2
HCON     DS    0H                  CONVERTS THE LO ORDER BYTE OF R1
*                                  TO A 2 BYTE PRINTABLE HEX VALUE
*                                  IN THE 2 LO BYTES OF R1
         N     R1,=F'255'          IGNORE TOP 3 BYTES
         LR    R15,R1              COPY BYTE TO R15
         N     R1,=F'15'           CLEAR 4 HI BITS OF LO BYTE
         IC    R1,HTAB(R1)         LO NYBBLE CHARACTER
         SRL   R15,4               THROW OUT 4 LO BITS
         LA    R15,HTAB(R15)       POINT TO HI NYBBLE CHARACTER
         ICM   R1,2,0(R15)         AND PUT IT INTO R1
         BR    R14
         SPACE  3
GETHEX   DS    0H                 GET UP TO 8 BYTES (16 HEX DIGITS)
*                                 RETURN DATA IN R2:R3, NUMBER OF
*                                 HEX DIGITS IN R4
*                                 DATA TAKEN FROM 'INPTR' LOCATION
         SR    R4,R4              DIGIT COUNTER
         SR    R2,R2              HEX ACCUMULATOR HI
         SR    R3,R3              HEX ACCUMULATOR LO
         L     R1,INPTR           INPUT POINTER
         SPACE
GETHEX1  CLI   0(R1),C'9'         CHECK RANGE
         BH    GETHEX2
         CLI   0(R1),C'0'
         BL    GETHEX3
         LA    R0,C'0'            TO CORRECT VALUE
GETHEX4  SR    R15,R15
         IC    R15,0(R1)          GET HEX DIGIT (CHARACTER)
         SR    R15,R0             CORRECT VALUE
         ST    R15,WORK
         LA    R4,1(R4)           ONE MORE HEX DIGIT
         SLDL  R2,4               MOVE THE REST UP
         O     R3,WORK            INCLUDE THIS DIGIT
         LA    R1,1(R1)           NEXT INPUT
         CH    R4,=H'16'          CHECK FOR MAX NO OF DIGITS
         BNE   GETHEX1            LOOK FOR MORE
GETHEX2  ST    R1,INPTR           NEXT FIELD
         BR    R9                 (R4 HAS NO OF DIGITS, MAY BE 0)
GETHEX3  CLI   0(R1),C'A'
         BL    GETHEX2
         CLI   0(R1),C'F'
         BH    GETHEX2
         LA    R0,C'A'-10         TO GET CORRECT VALUE
         B     GETHEX4
         SPACE 3
EXCP     XC    ECB,ECB
         SPACE
         L     R1,DEBUCB-1        IF DEVICE HAS
         TM    3(R1),X'80'        GONE OFFLINE
         BNO   NOTONL             THEN REJECT REQUEST
         SPACE
         MVI   EXCPSW,1           INDICATE EXCP ACTIVE
         CLI   ENDSW,0            IF ATTN HIT
         BNE   RETURN             THEN GET OUT
         EXCP  IOB
         WAIT  ECB=ECB
         MVI   EXCPSW,0           EXCP NOT ACTIVE
         SR    R15,R15            OK
         CLI   ECB,X'7F'
         BER   R9
         ST    R9,EXCPRET         KEEP RETURN ADDR
         MVC   LINE(L'EERR),EERR  PRINT PART OF IOB
         L     R1,IOB             INCLUDING ECB CC,SENSE0,1,CSW
         BAL   R9,ADCON           HEX
         MVC   LINE+L'EERR+1(8),ADDR
         L     R1,IOB+4
         BAL   R9,ADCON           HEX
         MVC   LINE+L'EERR+10(8),ADDR
         L     R1,IOB+8
         BAL   R9,ADCON           HEX
         MVC   LINE+L'EERR+19(8),ADDR
         L     R1,IOB+12
         BAL   R9,ADCON           HEX
         MVC   LINE+L'EERR+28(8),ADDR
         BAL   R9,PUT
         CLI   ECB,X'41'          CHECK FOR MOST COMMON RETURNS
         BNE   NOMSG
         TM    IOBCSW+3,X'01'     UE
         BNO   NOTEOF
         MVC   LINE(L'EOF),EOF    END OF FILE
         BAL   R9,PUT
         B     NOMSG
NOTEOF   TM    IOBCSW+3,X'02'     UC
         BNO   NOMSG
         TM    IOBSENS1,X'08'     NRF?
         BNO   NOMSG
         MVC   LINE(L'NOREC),NOREC NO RECORD FOUND
         BAL   R9,PUT
NOMSG    L     R9,EXCPRET
         L     R15,4
         BR    R9
         SPACE 3
OPEND    DS    0H
         TM    DCB+48,X'10'       IF ALREADY OPEN
         BOR   R9                 THEN SKIP OPEN
         SPACE
*        FIND UCB FOR REQUIRED VOLUME
         L     R2,CVTPTR           A(CVT)
         USING  CVT,R2
         L     R2,CVTILK2          A(UCB ADDRESS LIST) - CVTILK2
         DROP  R2
         SR    R3,R3               CLEAR FOR ICM
         SPACE
GETAUCB  ICM   R3,3,0(R2)          A(UCB)
         BZ    GETNEXTU            BYPASS DUMMY (0) ENTRIES
         CLM   R3,3,=X'FFFF'       END OF LIST MARKED BY X'FFFF'
         BE    NOTONL              B IF END OF LIST REACHED
         TM    3(R3),X'80'         IF DEVICE IS NOT ONLINE (UCBONLI)
         BNO   GETNEXTU            THEN DONT LOOK AT IT
         TM    3(R3),X'40'         IF DEVICE IS PENDING OFFLINE
         BO    GETNEXTU            THEN DONT LOOK AT IT EITHER
         CLC   VOL,28(R3)          IF THE VOLID IS THE SAME (UCBVOLI)
         BE    SAMEID              THEN GO STORE ADDR
GETNEXTU LA    R2,2(R2)            ELSE GET NEXT ENTRY IN UCB LIST
         B     GETAUCB             AND TRY AGAIN
         SPACE
NOTONL   MVC   LINE+1(6),VOL       REQUIRED VOLUME NOT ONLINE
         MVC   LINE+8(L'NOTOL),NOTOL
         B     PUT                ISSUE MESSAGE
         SPACE
SAMEID   STCM  R3,7,DEBUCB         KEEP UCB ADDR
         SPACE
         L     R2,CVTPTR          A(CVT)
         L     R2,64(R2)          I/O DEV TAB  (CVTZDTAB)
         SR    R1,R1
         IC    R1,19(R3)          UCBTBYT4
         IC    R1,0(R1,R2)        DEVICE OFFSET
         LA    R1,0(R1,R2)        ADDR OF ENTRY
         MVC   DEBENDCC(4),0(R1)  HI CYL,TRACK
         SPACE
         ST    R1,DCB+12          ADDR OF ENT INTO DCBDVTBA
         OI    DCB+48,X'10'       DCBOFLG
         MVI   DCB+36,X'C0'       RECFM U
         XC    BASET,BASET        RESET TTR BASE TO ZERO
         SPACE
         L     R2,CVTPTR          CVT
         L     R2,0(R2)           CTVTCBP
         MVC   DEBTCB,4(R2)       MOVE A(TCB)
         SPACE
         LINK  EP=AON
         MODESET MODE=SUP,KEY=ZERO
         SPACE
*        SET UP FOR BRANCH ENTRY GETMAIN
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,RELATED=(GLL)
         L     R4,CVTPTR          CVT
         L     R4,0(R4)           CVTTCBP
         L     R7,12(R4)          ASCB
         L     R4,4(R4)           TCB
         GETMAIN RC,LV=DEBEND-DEBP,SP=230,KEY=5,BRANCH=YES
         LTR   R15,R15            GETMAIN OK?
         BZ    HAVDEB
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=(FLL)
         MODESET MODE=PROB,KEY=NZERO
         ABEND 97                 GETMAIN FAILED
HAVDEB   LR    R3,R1
         MVC   0(DEBEND-DEBP,R3),DEBP COPY
         STCM  R3,7,DEBAPPAD-DEBP+1(R3) APPENDAGE VECTOR ADDR
         LA    R3,DEBTCB-DEBP(R3) PAST PREFIX
         STCM  R3,7,DCB+45        DEB ADDR INTO DCB
         SPACE
*        CHAIN DEB ONTO TCB
         L     R2,CVTPTR          CVT
         L     R2,0(R2)           CVTTCBP
         L     R2,4(R2)           A(TCB)
         L     R4,8(R2)           TCBDEB
ONTCB    ST    R4,4(R3)           NEXT DEB    DEBDEBB
         CS    R4,R3,8(R2)        CHAIN ON
         BNE   ONTCB
         SPACE
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=(FLL)
         SPACE
         DEBCHK DCB,TYPE=ADD,AM=EXCP
         LR    R3,R15             KEEP RC
         MODESET MODE=PROB,KEY=NZERO
         LINK  EP=AOFF
         LTR   R3,R3
         BER   R9
         ABEND 99                 DEBCHK FAILED
         SPACE 3
CLOSED   DS    0H
         TM    DCB+48,X'10'       IF NOT OPEN
         BNOR  R9                 THEN GET OUT
         SPACE
         LINK  EP=AON
         MODESET MODE=SUP,KEY=ZERO
         L     R3,DCB+44          A(DEB)
         LA    R3,0(R3)           ENSURE +VE
         DEBCHK DCB,TYPE=DELETE
         SPACE
*        TAKE DEB OFF CHAIN
         L     R2,CVTPTR          CVT
         L     R2,0(R2)           CVTTCBP
         L     R2,4(R2)           A(TCB)
         LA    R2,4(R2)           SETUP LIKE DEB
FINDDEB  CLM   R3,7,5(R2)         IS THIS THE POINTER
         BE    OFFTCB             YES - GO TAKE DEB OFF
         L     R2,4(R2)           NEXT DEB
         LA    R2,0(R2)
         LTR   R2,R2              IF MORE KEEP GOING
         BNZ   FINDDEB
         ABEND 98                 DEB GONE???
         SPACE
OFFTCB   L     R4,4(R3)           DEBDEBB
         LA    R4,0(R4)
         L     R5,4(R2)           TCBDEB OR DEBDEBB
         CS    R5,R4,4(R2)        TAKE OFF DEB CHAIN
         BNE   OFFTCB
         SPACE
         SH    R3,=AL2(DEBTCB-DEBP) BACK OVER PREFIX
         SPACE
*        SET UP FOR BRANCH ENTRY FREEMAIN
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,RELATED=(GLL)
         L     R4,CVTPTR          CVT
         L     R4,0(R4)           CVTTCBP
         L     R7,12(R4)          ASCB
         L     R4,4(R4)           TCB
         FREEMAIN RC,A=(R3),LV=DEBEND-DEBP,SP=230,KEY=5,BRANCH=YES
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=(FLL)
         SPACE
         MODESET MODE=PROB,KEY=NZERO
         SPACE
         LINK  EP=AOFF            DROP AUTH
         SPACE
         NI    DCB+48,X'FF'-X'10' NOT OPEN
         BR    R9
         SPACE 2
PUT      DS    0H                 WRITE 'LINE'
         TPUT  LINE,L'LINE
         LTR   R15,R15
         BNE   PUT
         MVC   LINE,LINE-1        CLEAR
         BR    R9                 RETURN
         SPACE  3
GET      DS    0H                 READ A LINE
         TGET  CMD,L'CMD
         LTR   R15,R15
         BNE   GET
         TR    CMD,UTAB           TO UPPER CASE
         BR    R9
         SPACE 3
STAXEXIT DS    0H                 ATTENTION EXIT
         USING *,R15
         L     R10,=A(BASE)       GET MAIN RTN BASE
         DROP  R15
         ST    R14,STAXRET
         MVI   ENDSW,1            REQUEST TERMINATION
         CLI   EXCPSW,0           IF EXCP ACTIVE DON'T REMOVE DEB
         BNE   NODEBR
         SPACE
         BAL   R9,CLOSED          'CLOSE'
         STAX  ,                  CANCEL
         MVI   STAXSW,1           DON'T CANCEL IT AGAIN
NODEBR   L     R14,STAXRET
         BR    R14                RETURN FROM ATTENTION EXIT
         SPACE 3
BR14     BR    R14
STAXRET  DS    A
SAV      DS    18F
VOL      DC    CL6'XXXXXX'
MBBCCHHR DC    D'0'
WORK     DS    F
ADDR     DS    CL8
IOB      GENIOB DCBPT=DCB,ECBPT=ECB,START=CPREAD
ATRACK   DS    A                   ADDR OF AREA
ECB      DS    F
DEBP     DC    5A(BR14)           NO APPENDAGES
         DC    4F'0'              DSCB,NO PREFIX,ETC
DEBTCB   DC    F'0'               A(TCB)
         DC    F'0'
         DC    X'68000000'        OLD,LAST EXT
         DC    X'00001000'        EXCP
         DC    X'01000000'        1 EXTENT
         DC    X'FF000000'        PRTY
         DC    X'8F'
DEBDCB   DC    AL3(DCB)
DEBAPPAD DC    A(DEBP)            APP VECTOR
         DC    X'00'              FILE MASK  (SET THIS TO X'58' TO
*                                             PREVENT WRITE OR SEEKS)
DEBUCB   DC    AL3(0)             A(UCB)
         DC    H'0'               BIN
DEBSTRCC DC    H'0'               START CYL
DEBSTRHH DC    H'0'               START TRACK
DEBENDCC DC    H'0'               END CYL
DEBENDHH DC    H'0'               END TRACK
DEBNMTRK DC    X'7FFF'            NUMBER OF TRACKS
DEBEND   EQU   *
DISP     DS    F
INPTR    DS    A                  SCAN POINTER
EXCPRET  DS    A
BASET    DS    F                  TTR BASE (TRACK NUMBER)
         SPACE
REPOLD   DS    D                  OLD DATA FOR VERIFY
REPNEW   DS    D                  NEW DATA
REPDISP  DS    F                  DISPLACEMENT
REPLEN   DS    H                  LENGTH TO REPLACE
         SPACE
CMD      DS    CL80               *                      *
         DC    C' '               *  KEEP THESE TOGETHER *
LINE     DC    CL80' '            *                      *
         ORG   LINE+1
CDSP     DS    CL6
         DS    CL3
CGRP     DS    4CL9
         DS    CL2
CCHR     DS    CL16
         ORG
         SPACE
ENDSW    DC    X'00'
EXCPSW   DC    X'00'
STAXSW   DC    X'00'
RECORD   DS    X                  REQUIRED RECORD NUMBER
         SPACE
OW       DC    C'ATTN RECEIVED'
CCOM     DC    C'COMMAND?'
ICOM     DC    CL80'CCHHR=,TTR=,BASE=,VOL=,REP,END'
NOTOL    DC    C'NOT ONLINE'
MISI     DC    C'REQUIRED DATA MISSING'
REC0     DC    C'RECORD 0 NOT ALLOWED'
EERR     DC    C'EXCP ERROR - IOB ='
BIG      DC    C'DISPLACEMENT TOO LARGE'
IREP     DC    C'INVALID OLD/NEW STRINGS'
IVER     DC    C'DATA NOT VERIFIED'
BASEM    DC    C'REQUIRES CCHH ONLY'
NOREC    DC    C'RECORD NOT FOUND'
EOF      DC    C'END OF FILE RECORD'
         SPACE  2
DCB      DCB   DSORG=DA,DDNAME=SYSLIB,MACRF=E
CPREAD   CCW   X'31',IOBSEEK+3,X'40',5  SEARCH ID=
         CCW   X'08',*-8,0,0
RR       CCW   X'1E',0,X'20',X'7FFF' READ MCKD SLI ON
         DC    4XL8'00'           SPACE FOR EXTRA CCW'S
         SPACE
CPWRITE  CCW   X'31',0,X'40',5  SEARCH ID=
         CCW   X'08',*-8,0,0
WR       CCW   X'0D',0,0,0    WRITE KEY+DATA
         DC    4XL8'00'           SPACE FOR EXTRA CCW'S
         LTORG
         SPACE  2
HTAB     DC    C'0123456789ABCDEF' FOR CONV TO PRINTABLE HEX
PTAB     DC    256C'.'
         ORG   PTAB+C' '
         DC    C' '
         ORG   PTAB+C'A'
         DC    C'ABCDEFGHI'
         ORG   PTAB+C'J'
         DC    C'JKLMNOPQR'
         ORG   PTAB+C'S'
         DC    C'STUVWXYZ'
         ORG   PTAB+C'0'
         DC    C'0123456789'
         ORG
         SPACE
UTAB     DC    256AL1(*-UTAB)     TR TO UC
         ORG   UTAB+129
         DC    C'ABCDEFGHI'
         ORG   UTAB+145
         DC    C'JKLMNOPQR'
         ORG   UTAB+162
         DC    C'STUVWXYZ'
         ORG
         SPACE  2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         CVT   DSECT=YES
         SPACE 2
FLC      EQU   0                  USED IN SETLOCK
PSALITA  EQU   764                      "
         END
