.im textpr
.ad 11;.hs 1;.hm 3;.fs 1;.fm 2
.tm 7
.bm 7
.tt ///&SYSDATE/
.bt //-%-//
.pi 3
.ss
.ll 65
.tr ÷ 40
.ud on "
.ce
.us PROGRAMMING÷DISPLAY÷SCREENS÷FOR÷"3270"÷TERMINALS
.tt //
.fi
.sp 5
  A macro called PANEL is available on the system which allows
the Assembler programmer to symbolically program display panels for
IBM 3270 compatible terminals. The macro also provides for special
display features available on the BRAEGEN terminals.

  The PANEL macro allows the programmer to define the format of the
display with easy to use keywords and simple "define-constant" type
expressions that may be coded as operands of the macro.
Screen addresses are specified as decimal row and column
numbers and all commands are coded mnemonically. Field attributes
are established with keywords following a START-FIELD (SF) command.
These keywords may be coded in any order.

  The PANEL macro is used in conjunction with another macro called
BPUT. Once a panel has been formatted with PANEL, BPUT is used to
write the panel on the terminal. BPUT has two operands both of which are
required. The first operand is the address of the area where the panel
has been defined. This will usually be the name that was specified in
the label field of the first PANEL statement, but may be any
expression valid in an A-TYPE address constant. The second operand is
the length of the display buffer. This operand is usually coded as a
symbol that has been given the value of the length by means of an
equate as illustrated in the examples. Any other expression that is
valid in an A-TYPE address constant may also be used.

 The PANEL macro has no special required or positional operands.
There are, however, a few exceptions to the free-format way in which
the operands may be coded :

 When a WRITE operand is coded, it should be followed immediately by
any applicable options such as ALARM, RESTORE, etc. The actual order
of these options does not matter.

 Operands that require buffer addresses (SBA, EUA, RA, etc.) expect
the buffer address to immediately follow them. The row and column
numbers are specified as decimal numbers separated by a comma.

 The options pertaining to a Start-Field (SF) operand should all be
coded after the SF and should not be intermixed with other operands.
For example:  SF,HIGH,PROT,NUM  is correct but  SF,HIGH,SBA,PROT  is
not and PANEL will flag "PROT" as an invalid operand.
.pa
  Following is a list of all the PANEL operands and an explanation
of their function:
.sp 2
.ce
--- WRITE ---

 The WRITE operand and its associated keywords define the command
code necessary to write a panel to the terminal. The WRITE operand
should always be the first operand on the first PANEL macro issued.

 When WRITE with no further operands is coded, a default write
control character ( X'C3' ) is supplied by PANEL.
.sp 2
 The WRITE options avaiable are as follows:

.pi 0
.hi 13
RESTORE   - After writing the panel to the terminal, the keyboard
            is restored (INPUT INHIBIT is turned off). This is
            the default option.

NORESTORE - When  this  keyword  is  coded,  the keyboard is  not
            restored after the panel is displayed.

ALARM     - This causes the audible alarm to  be  sounded  at the
            terminal when the panel is written.

RESET     - All Modified Data Tags for all fields are reset.
.sp 3
.pi 3
.hi 0

.ce
--- CLEAR ---

 The CLEAR operand causes the screen to be cleared and the buffer
address to be reset to 1,1 (row 1, col 1).
.sp 2
.ce
---   IC  ---

 The Insert Cursor (IC) operand causes the cursor to appear at the
current buffer address.
.sp 2
.ce
---  ICA  ---

 The insert cursor at address (ICA) operand works like IC except
a buffer address is specified after the operand to indicate where
the cursor is to appear. EXAMPLE:  ICA,10,5  (This would insert the
cursor at row 10 col. 5).
.pa
.ce
---  EUA  ---

 This operand, Erase Unprotected to Address, causes all unprotected
fields up to the address specified after EUA to be erased.
EXAMPLE:  EUA,20,45  (This would erase all unprotected fields up to
row 20 col. 45).

.ce
---   RA  ---

 Repeat to Address (RA) is followed by a buffer address and a character
and causes the specified character to be repeated on the screen up to
the specified address. The character may be specified explicitly or
may be specified in hexadecimal format ( X'45' ). EXAMPLE: To repeat
a blank to row 15, col. 40,  RA,15,40  or RA,15,40,X'40' could be used.

.ce
---  SBA  ---

 Set Buffer Address (SBA) causes the buffer address to be set to
the row and column specified after the operand.
EXAMPLE:  SBA,1,5 (This would set the buffer address to row 1,
col. 5).

.ce
---   SF  ---

 Start Field, (SF), is used to establish the different fields in
the display panel and to describe the field attributes which are
to be associated  with them. The field is started at the current buffer
address and continues until delimited by another start field command.
 SF is usually followed by operands desribing the desired field
attributes. These operands, if coded, must immediately follow the
SF command. They may appear in any order and there may be as many
or as few of them as necessary.
 If no SF options are specified a default attribute of X'40' will be
supplied by PANEL. This attribute provides a low-intensity,unprotected,
alpha-numeric field.

 Following is a list of SF options which may be specified after the
start-field order and an explanation of each.

.ce
---  HIGH ---

 Specifies that the displayed field will be high-intensity.

.ce
---  PROT ---

 Specifies that the displayed field is to be protected.

.ce --- SKIP ---

SKIP causes an "automatic skip" of the specified field.
.pa
.ce
--- BLINK ---

 On the BRAEGEN terminals, the BLINK option causes the designated field
to blink in addition to any other options which may have been specified.

.ce
--- REVERSE ---

 If reverse is specified, and the panel is sent to a BRAEGEN terminal,
the displayed field will appear as black characters against a green
background.
.sp 2
***  NOTE  ***

 If both the BLINK and REVERSE features are desired, the options must
be coded together. Either  BLINK,REVERSE or REVERSE,BLINK is
acceptable.
.sp 2
.ce
--- NOPRINT ---

 The NOPRINT option will create a field that is print inhibited.
Any characters entered in a print inhibited field will not be
displayed on the users terminal.

.ce
---  MDT  ---

 This option causes the Modified Data Tag for the field to be set.

.ce
---  NUM  ---

 NUM specifies that the field is to be numeric; The only characters
that may be entered in a numeric field are numbers (0-9) and the
period (.) .

.ce
---  LOW  ---

 LOW indicates that the field will be displayed as a low-intensity
field. This option is set by default.

.ce
--- UNPROT ---

 Specifies that a field is to be an unprotected field. This option
is set by default.

.ce
---  ALPHA ---

 The ALPHA option creates an alpha-numeric display field in which any
character (numbers, letters, or special characters) may be entered
or displayed. The alpha option is the default.
.pa
.ce --- IN-LINE DC's ---

 This option creates define constant statements that are expanded
inline with the other data and control characters. Any expression that
is valid in an Assembler "DC" statement may be coded here
(see examples).

.ce
--- TAGS ---

 In order to reference locations within the data stream that PANEL
generates, an operand called TAG has been provided. TAG is coded
as follows :

               ... ,TAG(string), ...

Where "string" is any valid Assembler name. TAG may be coded anywhere
among the PANEL operands as long as it's not in the middle of a buffer
address, SF options, or WRITE keywords.

.us Full÷Screen÷Support

 Normally, for 3270 type devices, the TCAM/TSO message handler keeps
track of the current line or row position on the display screen.
This enables subsequent output operations to the terminal to appear
on successive lines on the screen. This count causes the cursor position
on the screen to be adjusted every time an input (usually "ENTER")
occurs. After what TSO believes to be the screen size has been filled,
the familiar three asterisk (***) prompt is displayed and you must
hit enter to receive more data.

 Formerly this line counting operation could only be defeated by using
the FIELD MARK or PA-2 key on the keyboard. This is the so-called
"hardware full screen mode" familiar to most users. Support is now in
TCAM to allow "full screen mode" to be controlled directly by the
user by manipulating the data stream that is sent to the terminal.

 This facility has two modes of operation which are controlled
by certain strings of hex data appearing as the first data in the buffer
being sent to the terminal. The two types of these "signal strings"
are listed below (in hex) :

       Case 1)  11 5D7F 11 XXXX
       Case 2)  11 5D7E 11 XXXX

            Where :  The hex 11's are 3270 Set Buffer Address
                     (SBA) orders, hex 5D7F represents screen
                     location 24,80 (row 24,col 80), hex 5D7E
                     is screen location 24,79 and the XXXX's
                     represent a user supplied screen address
.pa
 Since two SBA's in a row would not normally be encountered in a data
stream, it is assumed that non "full screen" data will not contain
these strings. Whenever a "signal string" is detected, TCAM resets
the TSO line count as described below.

 For case 1 the line count is set to 2 causing  subsequent "line"
(non full screen) messages to appear on line 3 of the screen. For
case 2 the line count is set to the position indicated by the second
SBA (XXXX in the strings above). This allows the user program to
control the location in which the "line" messages appear.

 Further processing done by TCAM is also dependent on the string
being used. For string 1 TCAM displays the line message on line 3
and then causes a "prompt for simulated attention" which results in
the three asterisks (***) being displayed. The audible alarm is also
sounded if the terminal has that feature. TCAM then generates a
simulated PA-3 interrupt as if that key had been hit on the terminal.
CAUTION - If your program has an outstanding TGET, it will be satisfied
by the PA-3 and the data you get may not be what was expected. For a
TGET using the ASIS operand, an AID byte of X'6B' will be received.
For a non-ASIS TGET the effect will be that of a null line being
entered. (And you thought this was going to be complicated !)

 For string 2 TCAM will cause line messages to appear at the user
specified location. No prompt (***) or PA-3 interrupt will be generated
and any pending output will be sent immediately. In both cases "ENTERS"
from the terminal do not affect the line count and as long as the data
streams sent contain the "signal strings", the terminal will remain
in "full screen mode" . Normal data or non full screen TPUTs will
restore TCAM/TSO's default line counting scheme.

 For those wishing to use the "full screen" abilities discussed above
there are two PANEL operands designed to implement this support:

.ce --- FULLSCR ---

 This operand generates a "Case 1" signal string as described above.
Since the signal string must be the first data sent, FULLSCR is
coded immediately after WRITE and any associated WRITE keywords
(see examples) .

.ce --- FULLSCR2 ---

 FULLSCR2 generates a "Case 2" signal string and is used like FULLSCR
except it is followed immediately by the row-column address where the
line messages are to appear. Coding restrictions are the same as for
FULLSCR.
.sp 10
.CE
--- CODING EXAMPLES ---
.SP 2
 The following pages contain sample programs that illustrate the
use of the PANEL and BPUT macros. Each program is explained and then
a listing of the program is given. As many different options and
features as possible have been included in the examples to fully
illustrate the features of the macros.
.pa
 In this program it is desired to display several different fields on
the terminal. This will be accomplished by using a single PANEL macro
and coding inline "DC's".
.sp
 The first field will be a high intensity protected field which will
start at row 5, col. 10.
This field will be followed by a high intensity blinking field which
will start at row 8, col. 20.
.sp
 The next field defined will be a reversed field in which the
characters will appear as black characters against a green
background. This field will start at row 11, col. 30.
.sp
 The last field to be defined will be a default field
(e.g. low intensity,unprotected), which acts as terminator
to end the reversed field established before it. If this were
not included, the rest of the screen following the words "REVERSED
FIELD" would appear green.
.sp 5
 The following is a listing of the program used to display the
fields described above :
.sp 2
.nf
.un
.hi 0
.pi 0
SCREEN   INIT
*
* ISSUE BPUT TO WRITE PANEL ON TERMINAL
*
         BPUT  SCRN,LENGTH
         QUIT
*
* SET UP SCREEN FORMAT WITH PANEL MACRO
*
SCRN     PANEL WRITE,CLEAR,SBA,5,10,SF,HIGH,PROT,           +
               C'PANEL macro test program......',           +
               SBA,8,20,SF,BLINK,HIGH,                      +
               C'High Intensity Blinking Field',            +
               SBA,11,30,SF,HIGH,REVERSE,                   +
               C'REVERSED FIELD',                           +
               SF
LENGTH   EQU *-SCRN
         END
.pa
.fi
.pi 3
  This program illustrates the use of the Repeat To Address option
and the creation of a numeric field. When a numeric field is displayed
on the terminal, any character may be displayed in this field
initially. However, if the field is to be changed, only the digits
0-9 and a period (.) may be entered in this field.
.sp
 The first PANEL macro issued will clear the screen and sound the
audible alarm (beep) at the terminal.
.sp
 The next PANEL is used to create a row of asterisks beginning at
row 7, col. 20 and continuing to row 7, col. 61. This frees the
programmer from actually having to code each asterisk.
.sp
 The next PANEL is used to establish a numeric field beginning at
row 13, col. 31. Notice that no other SF option is used to terminate
the numeric field. This means that the rest of the screen will be a
numeric field also. The message to be printed is coded as an
inline "DC".
.sp 4
.nf
.un
.hi 0
.pi 0
SCREEN2   INIT
*
* BPUT is used as before to display screen
*
          BPUT   SCRN2,LENGTH
          QUIT
*
* necessary PANEL calls to set up screen
*
SCRN2     PANEL  WRITE,ALARM,CLEAR
          PANEL  SBA,7,20,RA,7,61,*
          PANEL  SBA,13,31,SF,HIGH,NUM,                   +
                 C'Numeric Field .....  1234567890'
LENGTH    EQU    *-SCRN2
          END
.pa
.fi
.pi 3
 This example uses both the FULLSCR and TAG operands and creates
several different types of fields. The TAG'd areas will be used
for input (variable) fields that the TGET will return. Although
not demonstrated in this example, another interesting use of TAG
could be to modify a particular attribute under program control. This
can be accomplished by inserting a TAG in front of the desired SF.
.sp 5
.pi 0;.hi 0;.nf
SCREEN3  INIT
*
*        BPUT FOLLOWED BY TGET
*
         BPUT     SCRN3,L3
         TGET     DATA,20
         QUIT
*
*        PANEL DEFINITION
*
SCRN3    PANEL    WRITE,ALARM,FULLSCR,CLEAR,SBA,2,10,          +
                  SF,HIGH,PROT,10CL2'*',SBA,4,1,               +
                  C'A TITLE',SBA,7,1,C'VARIABLE DATA ->',      +
                  SF,LOW,TAG(DATA),CL20' ',SF,PROT,SBA,10,1,   +
                  C'MORE DATA ->',SF,LOW,TAG(MORESTUF),        +
                  CL10' ',SF,PROT,ICA,7,18
L3        EQU     *-SCRN3
