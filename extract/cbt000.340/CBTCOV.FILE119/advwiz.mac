C  ADVENTURES
C  CURRENT LIMITS:
C      9800 WORDS OF MESSAGE TEXT (LINES, LINSIZ).
C       750 TRAVEL OPTIONS (TRAVEL, TRVSIZ).
C       300 VOCABULARY WORDS (KTAB, ATAB, TABSIZ).
C       150 LOCATIONS (LTEXT, STEXT, KEY, COND, ABB, ATLOC, LOCSIZ).
C       100 OBJECTS (PLAC, PLACE, FIXD, FIXED, LINK (TWICE), PTEXT,
C                    PROP).
C        35 "ACTION" VERBS (ACTSPK, VRBSIZ).
C       205 RANDOM MESSAGES (RTEXT, RTXSIZ).
C        12 DIFFERENT PLAYER CLASSIFICATIONS (CTEXT, CVAL, CLSMAX).
C        20 HINTS, LESS 3 (HINTLC, HINTED, HINTS, HNTSIZ).
C        35 MAGIC MESSAGES (MTEXT, MAGSIZ).
C  THERE ARE ALSO LIMITS WHICH CANNOT BE EXCEEDED DUE TO THE STRUCTURE
C  OF THE DATABASE.  (E.G., THE VOCABULARY USES N/1000 TO DETERMINE WORD
C  TYPE, SO THERE CAN'T BE MORE THAN 1000 WORDS.)  THESE UPPER LIMITS
C  ARE:
C      1000 NON-SYNONYMOUS VOCABULARY WORDS
C       300 LOCATIONS
C       100 OBJECTS
C
      IMPLICIT INTEGER(A-Z)
      LOGICAL DSEEN,BLKLIN,HINTED,YES,START
      COMMON /TXTCOM/ RTEXT,LINES
      COMMON /VOCCOM/ KTAB,ATAB,TABSIZ
      COMMON /PLACOM/ ATLOC,LINK,PLACE,FIXED,COND,PROP,LOC,LAMP,HOLDNG
      COMMON /MTXCOM/ MTEXT
      COMMON /PTXCOM/ PTEXT
      COMMON /ABBCOM/ ABB
      COMMON /WIZCOM/ WKDAY,WKEND,HOLID,HBEGIN,HEND,HNAME,
     1SHORT,MAGIC,MAGNM,LATNCY,SAVED,SAVET,SETUP
      COMMON /IOSCOM/ TTYI,TTYO,BLKLIN,DBFI,DBINIT,DBSAVE
      COMMON /MTDCOM/ MTDTXT
      COMMON /RANCOM/ R
      COMMON /MSCCOM/ TRAVEL,LTEXT,STEXT,KEY,ACTSPK,
     1CTEXT,CVAL,HINTLC,HINTED,HINTS,DSEEN,DLOC,CLSSES,HNTMAX,
     2PLAC,FIXD,MAXTRS,TALLY,TALLY2,
     3KEYS,GRATE,CAGE,ROD,ROD2,STEPS,BIRD,DOOR,PILLOW,SNAKE,
     4FISSUR,TABLET,CLAM,OYSTER,MAGZIN,DWARF,KNIFE,FOOD,BOTTLE,
     5WATER,OIL,PLANT,PLANT2,AXE,MIRROR,DRAGON,CHASM,TROLL,TROLL2,
     6BEAR,MESSAG,VEND,BATTER,NUGGET,COINS,CHEST,EGGS,TRIDNT,VASE,
     7EMRALD,PYRAM,PEARL,RUG,CHAIN,BACK,LOOK,CAVE,NULL,ENTRNC,
     8DPRSSN,SAY,LOCK,THROW,FIND,INVENT,CHLOC,CHLOC2,DFLAG,DALTLC,
     9SUSPND,TURNS,LMWARN,IWEST,KNFLOC,DETAIL,ABBNUM,SCORNG,NUMDIE,
     1DKILL,FOOBAR,BONUS,CLOCK1,CLOCK2,CLOSNG,PANIC,
     2DEMO,HINT,LIMIT,NEWLOC,OBJ,ODLOC,OLDLC2,OLDLOC,SCORE,
     3SPICES,STICK,VERB,WD1,WD1X,WD2,WD2X,WZDARK,
     4ATTACK,DTOTAL,FOO,HINTM3,I,J,K,K1,K2,KK,KQ,L,LL,MXSCOR,SPK,TK,
     5YEA,CLOSED,GAVEUP,MAXDIE,XXD,XXT,YYD,YYT
C
      DIMENSION LINES(9800)
      DIMENSION TRAVEL(750)
      DIMENSION KTAB(300),ATAB(300)
      DIMENSION LTEXT(150),STEXT(150),KEY(150),COND(150),ABB(150),
     1ATLOC(150)
      DIMENSION PLAC(100),PLACE(100),FIXD(100),FIXED(100),LINK(200),
     1PTEXT(100),PROP(100)
      DIMENSION ACTSPK(35)
      DIMENSION RTEXT(205)
      DIMENSION CTEXT(12),CVAL(12)
      DIMENSION HINTLC(20),HINTED(20),HINTS(20,4)
      DIMENSION MTEXT(35)
      DIMENSION TK(20),DSEEN(6),DLOC(6),ODLOC(6),HNAME(20)
      DIMENSION MTDTXT(100)
      DIMENSION TEXT(70),FNAME(10),FDUMMY(10)
      DATA LINSIZ/9800/,TRVSIZ/750/,LOCSIZ/150/,
     1VRBSIZ/35/,RTXSIZ/205/,CLSMAX/12/,HNTSIZ/20/,MAGSIZ/35/
      DATA BLANK/' '/
C
C  SOME FUNCTIONS
C
C
C  TOTING(OBJ)  = TRUE IF THE OBJ IS BEING CARRIED
C  HERE(OBJ)    = TRUE IF THE OBJ IS AT "LOC" (OR IS BEING CARRIED)
C  AT(OBJ)      = TRUE IF ON EITHER SIDE OF TWO-PLACED OBJECT
C  LIQ(DUMMY)   = OBJECT NUMBER OF LIQUID IN BOTTLE
C  LIQLOC(LOC)  = OBJECT NUMBER OF LIQUID (IF ANY) AT LOC
C  BITSET(L,N)  = TRUE IF COND(L) HAS BIT N SET (BIT 0 IS UNITS BIT)
C  FORCED(LOC)  = TRUE IF LOC MOVES WITHOUT ASKING FOR INPUT (COND=2)
C  DARK(DUMMY)  = TRUE IF LOCATION "LOC" IS DARK
C  PCT(N)       = TRUE N% OF THE TIME (N INTEGER FROM 0 TO 100)
C
C  WZDARK SAYS WHETHER THE LOC HE'S LEAVING WAS DARK
C  LMWARN SAYS WHETHER HE'S BEEN WARNED ABOUT LAMP GOING DIM
C  CLOSNG SAYS WHETHER ITS CLOSING TIME YET
C  PANIC SAYS WHETHER HE'S FOUND OUT HE'S TRAPPED IN THE CAVE
C  CLOSED SAYS WHETHER WE'RE ALL THE WAY CLOSED
C  GAVEUP SAYS WHETHER HE EXITED VIA "QUIT"
C  SCORNG INDICATES TO THE SCORE ROUTINE WHETHER WE'RE DOING A "SCORE"
C         COMMAND
C  DEMO IS TRUE IF THIS IS A PRIME-TIME DEMONSTRATION GAME
C  YEA IS RANDOM YES/NO REPLY
C
      LOGICAL TOTING,HERE,AT,BITSET,DARK,WZDARK,LMWARN,CLOSNG,PANIC,
     1CLOSED,GAVEUP,SCORNG,DEMO,YEA,FORCED,PCT
C
C IBM FORTRAN G1 COMPILER CANNOT HANDLE STATEMENT FUNCTIONS WITH
C ARRAY ELEMENTS SO THESE HAVE BEEN MADE STANDALONE FUNCTIONS.
C     TOTING(OBJ)=PLACE(OBJ).EQ.-1
C     HERE(OBJ)=PLACE(OBJ).EQ.LOC.OR.TOTING(OBJ)
C     AT(OBJ)=PLACE(OBJ).EQ.LOC.OR.FIXED(OBJ).EQ.LOC
C     LIQ2(PBOTL)=(1-PBOTL)*WATER+(PBOTL/2)*(WATER+OIL)
C     LIQ(DUMMY)=LIQ2(MAX0(PROP(BOTTLE),-1-PROP(BOTTLE)))
C     LIQLOC(LOC)=LIQ2((MOD(COND(LOC)/2*2,8)-5)*MOD(COND(LOC)/4,2)+1)
C     BITSET(L,N)=AND(COND(L),SHIFT(1,N)).NE.0
C     FORCED(LOC)=COND(LOC).EQ.2
C     DARK(DUMMY)=MOD(COND(LOC),2).EQ.0.AND.(PROP(LAMP).EQ.0.OR.
C    1.NOT.HERE(LAMP))
C     PCT(N)=RAN(100).LT.N
C
C
C
C
C
C
C  DESCRIPTION OF THE DATABASE FORMAT
C
C
C  THE DATA FILE CONTAINS SEVERAL SECTIONS.  EACH BEGINS WITH A LINE
C  CONTAINING A NUMBER IDENTIFYING THE SECTION, AND ENDS WITH A LINE
C  CONTAINING "-1".
C
C  SECTION 1: LONG FORM DESCRIPTIONS.  EACH LINE CONTAINS A LOCATION
C       NUMBER, A TAB, AND A LINE OF TEXT.  THE SET OF (NECESSARILY
C       ADJACENT) LINES WHOSE NUMBERS ARE X FORM THE LONG DESCRIPTION OF
C       LOCATION X.
C  SECTION 2: SHORT FORM DESCRIPTIONS.  SAME FORMAT AS LONG FORM.  NOT
C       ALL PLACES HAVE SHORT DESCRIPTIONS.
C  SECTION 3: TRAVEL TABLE.  EACH LINE CONTAINS A LOCATION NUMBER (X), A
C       SECOND LOCATION NUMBER (Y), AND A LIST OF MOTION NUMBERS (SEE
C       SECTION 4).  EACH MOTION REPRESENTS A VERB WHICH WILL GO TO Y IF
C       CURRENTLY AT X.  Y, IN TURN, IS INTERPRETED AS FOLLOWS:
C       LET M=Y/1000, N=Y MOD 1000.
C               IF N<=300       IT IS THE LOCATION TO GO TO.
C               IF 300<N<=500   N-300 IS USED IN A COMPUTED GOTO TO
C                                       A SECTION OF SPECIAL CODE.
C               IF N>500        MESSAGE N-500 FROM SECTION 6 IS PRINTED,
C                                       AND HE STAYS WHEREVER HE IS.
C       MEANWHILE, M SPECIFIES THE CONDITIONS ON THE MOTION.
C            IF M=0          IT'S UNCONDITIONAL.
C            IF 0<M<100      IT IS DONE WITH M% PROBABILITY.
C            IF M=100        UNCONDITIONAL, BUT FORBIDDEN TO DWARVES.
C            IF 100<M<=200   HE MUST BE CARRYING OBJECT M-100.
C            IF 200<M<=300   MUST BE CARRYING OR IN SAME ROOM AS M-200.
C            IF 300<M<=400   PROP(M MOD 100) MUST *NOT* BE 0.
C            IF 400<M<=500   PROP(M MOD 100) MUST *NOT* BE 1.
C            IF 500<M<=600   PROP(M MOD 100) MUST *NOT* BE 2, ETC.
C       IF THE CONDITION (IF ANY) IS NOT MET, THEN THE NEXT *DIFFERENT*
C       "DESTINATION" VALUE IS USED (UNLESS IT FAILS TO MEET *ITS*
C       CONDITIONS, IN WHICH CASE THE NEXT IS FOUND, ETC.).  TYPICALLY,
C       THE NEXT DEST WILL BE FOR ONE OF THE SAME VERBS, SO THAT ITS
C       ONLY USE IS AS THE ALTERNATE DESTINATION FOR THOSE VERBS.  FOR
C       INSTANCE:
C            15      110022  29      31      34      35      23      43
C            15      14      29
C       THIS SAYS THAT, FROM LOC 15, ANY OF THE VERBS 29, 31, ETC., WILL
C       TAKE HIM TO 22 IF HE'S CARRYING OBJECT 10, AND OTHERWISE WILL GO
C       TO 14.
C            11      303008  49
C            11      9       50
C       THIS SAYS THAT, FROM 11, 49 TAKES HIM TO 8 UNLESS PROP(3)=0, IN
C       WHICH CASE HE GOES TO 9.  VERB 50 TAKES HIM TO 9 REGARDLESS OF
C       PROP(3).
C  SECTION 4: VOCABULARY.  EACH LINE CONTAINS A NUMBER (N), A TAB, AND A
C       FIVE-LETTER WORD.  CALL M=N/1000.  IF M=0, THEN THE WORD IS A
C       MOTION VERB FOR USE IN TRAVELLING (SEE SECTION 3).  ELSE, IF
C       M=1, THE WORD IS AN OBJECT.  ELSE, IF M=2, THE WORD IS AN ACTION
C       VERB (SUCH AS "CARRY" OR "ATTACK").  ELSE, IF M=3, THE WORD IS A
C       SPECIAL CASE VERB (SUCH AS "DIG") AND N MOD 1000 IS AN INDEX
C       INTO SECTION 6.  OBJECTS FROM 50 TO (CURRENTLY, ANYWAY) 79 ARE
C       CONSIDERED TREASURES (FOR PIRATE, CLOSEOUT).
C  SECTION 5: OBJECT DESCRIPTIONS.  EACH LINE CONTAINS A NUMBER (N), A
C       TAB, AND A MESSAGE.  IF N IS FROM 1 TO 100, THE MESSAGE IS THE
C       "INVENTORY" MESSAGE FOR OBJECT N.  OTHERWISE, N SHOULD BE 000,
C       100, 200, ETC., AND THE MESSAGE SHOULD BE THE DESCRIPTION OF THE
C       PRECEDING OBJECT WHEN ITS PROP VALUE IS N/100.  THE N/100 IS
C       USED ONLY TO DISTINGUISH MULTIPLE MESSAGES FROM MULTI-LINE
C       MESSAGES; THE PROP INFO ACTUALLY REQUIRES ALL MESSAGES FOR AN
C       OBJECT TO BE PRESENT AND CONSECUTIVE.  PROPERTIES WHICH PRODUCE
C       NO MESSAGE SHOULD BE GIVEN THE MESSAGE ">$<".
C  SECTION 6: ARBITRARY MESSAGES.  SAME FORMAT AS SECTIONS 1, 2, AND 5,
C       EXCEPT THE NUMBERS BEAR NO RELATION TO ANYTHING (EXCEPT FOR
C       SPECIAL VERBS IN SECTION 4).
C  SECTION 7: OBJECT LOCATIONS.  EACH LINE CONTAINS AN OBJECT NUMBER AND
C       ITS INITIAL LOCATION (ZERO (OR OMITTED) IF NONE).  IF THE OBJECT
C       IS IMMOVABLE, THE LOCATION IS FOLLOWED BY A "-1".  IF IT HAS TWO
C       LOCATIONS (E.G. THE GRATE) THE FIRST LOCATION IS FOLLOWED WITH
C       THE SECOND, AND THE OBJECT IS ASSUMED TO BE IMMOVABLE.
C  SECTION 8: ACTION DEFAULTS.  EACH LINE CONTAINS AN "ACTION-VERB"
C       NUMBER AND THE INDEX (IN SECTION 6) OF THE DEFAULT MESSAGE FOR
C       THE VERB.
C  SECTION 9: LIQUID ASSETS, ETC.  EACH LINE CONTAINS A NUMBER (N) AND
C       UP TO 20 LOCATION NUMBERS.  BIT N (WHERE 0 IS THE UNITS BIT) IS
C       SET IN COND(LOC) FOR EACH LOC GIVEN.  THE COND BITS CURRENTLY
C       ASSIGNED ARE:
C               0       LIGHT
C               1       IF BIT 2 IS ON: ON FOR OIL, OFF FOR WATER
C               2       LIQUID ASSET, SEE BIT 1
C               3       PIRATE DOESN'T GO HERE UNLESS FOLLOWING PLAYER
C       OTHER BITS ARE USED TO INDICATE AREAS OF INTEREST TO "HINT"
C       ROUTINES:
C               4       TRYING TO GET INTO CAVE
C               5       TRYING TO CATCH BIRD
C               6       TRYING TO DEAL WITH SNAKE
C               7       LOST IN MAZE
C               8       PONDERING DARK ROOM
C               9       AT WITT'S END
C       COND(LOC) IS SET TO 2, OVERRIDING ALL OTHER BITS, IF LOC HAS
C       FORCED MOTION.
C  SECTION 10: CLASS MESSAGES.  EACH LINE CONTAINS A NUMBER (N), A TAB,
C       AND A MESSAGE DESCRIBING A CLASSIFICATION OF PLAYER.  THE
C       SCORING SECTION SELECTS THE APPROPRIATE MESSAGE, WHERE EACH
C       MESSAGE IS CONSIDERED TO APPLY TO PLAYERS WHOSE SCORES ARE
C       HIGHER THAN THE PREVIOUS N BUT NOT HIGHER THAN THIS N.  NOTE
C       THAT THESE SCORES PROBABLY CHANGE WITH EVERY MODIFICATION (AND
C       PARTICULARLY EXPANSION) OF THE PROGRAM.
C  SECTION 11: HINTS.  EACH LINE CONTAINS A HINT NUMBER (CORRESPONDING
C       TO A COND BIT, SEE SECTION 9), THE NUMBER OF TURNS HE MUST BE AT
C       THE RIGHT LOC(S) BEFORE TRIGGERING THE HINT, THE POINTS DEDUCTED
C       FOR TAKING THE HINT, THE MESSAGE NUMBER (SECTION 6) OF THE
C       QUESTION, AND THE MESSAGE NUMBER OF THE HINT.  THESE VALUES ARE
C       STASHED IN THE "HINTS" ARRAY.  HNTMAX IS SET TO THE MAX HINT
C       NUMBER (<= HNTSIZ).  NUMBERS 1-3 ARE UNUSABLE SINCE COND BITS
C       ARE OTHERWISE ASSIGNED, SO 2 IS USED TO REMEMBER IF HE'S READ
C       THE CLUE IN THE REPOSITORY, AND 3 IS USED TO REMEMBER WHETHER HE
C       ASKED FOR INSTRUCTIONS (GETS MORE TURNS, BUT LOSE POINTS).
C  SECTION 12: MAGIC MESSAGES. IDENTICAL TO SECTION 6 EXCEPT PUT IN A
C       SEPARATE SECTION FOR EASIER REFERENCE.  MAGIC MESSAGES ARE USED
C       BY THE STARTUP, MAINTENANCE MODE, AND RELATED ROUTINES.
C  SECTION 0: END OF DATABASE.
C
C
C
C
C  READ THE DATABASE IF WE HAVE NOT YET DONE SO............
C  CLEAR OUT THE VARIOUS TEXT-POINTER ARRAYS.  ALL TEXT IS STORED IN
C  ARRAY LINES; EACH LINE IS PRECEDED BY A WORD POINTING TO THE NEXT
C  POINTER (I.E.  THE WORD FOLLOWING THE END OF THE LINE).  THE POINTER
C  IS NEGATIVE IF THIS IS FIRST LINE OF A MESSAGE.  THE TEXT-POINTER
C  ARRAYS CONTAIN INDICES OF POINTER-WORDS IN LINES.  STEXT(N) IS SHORT
C  DESCRIPTION OF LOCATION N.  LTEXT(N) IS LONG DESCRIPTION.  PTEXT(N)
C  POINTS TO MESSAGE FOR PROP(N)=0.  SUCCESSIVE PROP MESSAGES ARE FOUND
C  BY CHASING POINTERS.  RTEXT CONTAINS SECTION 6'S STUFF.  CTEXT(N)
C  POINTS TO A PLAYER-CLASS MESSAGE.  MTEXT IS FOR SECTION 12.  WE ALSO
C  CLEAR COND.  SEE DESCRIPTION OF SECTION 9 FOR DETAILS.
C
C
C
C     EXECUTABLE CODE STARTS HERE
C
C
C
      CALL IOINIT(0)
      WRITE(TTYO,1000)
1000  FORMAT(' INITIALIZING...')
      TABSIZ=300
      R=0
      DO 1 I=1,RTXSIZ
1     RTEXT(I) = 0
      DO 2 I=1,LINSIZ
2     LINES(I) = 0
      DO 3 I=1,TABSIZ
      KTAB(I) = 0
3     ATAB(I) = 0
      DO 4 I=1,LOCSIZ
      LTEXT(I) = 0
      STEXT(I) = 0
      KEY(I) = 0
      COND(I) = 0
      ABB(I) = 0
4     ATLOC(I) = 0
      DO 5 I=1,100
      PLAC(I) = 0
      PLACE(I) = 0
      FIXD(I) = 0
      FIXED(I) = 0
      LINK(I) = 0
      LINK(I+100) = 0
      PTEXT(I) = 0
      PROP(I) = 0
5     MTDTXT(I) = 0
      DO 6 I=1,TRVSIZ
6     TRAVEL(I) = 0
      DO 7 I=1,VRBSIZ
7     ACTSPK(I) = 0
      DO 8 I=1,CLSMAX
      CTEXT(I) = 0
8     CVAL(I) = 0
      DO 9 I=1,HNTSIZ
      HINTS(I,1) = 0
      HINTS(I,2) = 0
      HINTS(I,3) = 0
9     HINTS(I,4) = 0
      DO 10 I=1,MAGSIZ
10    MTEXT(I) = 0
      DO 11 I=1,6
      DLOC(I) = 0
11    ODLOC(I) = 0
      DO 12 I=1,20
      TK(I) = 0
12    HNAME(I) = 0
      SETUP=1
      LINUSE=1
      TRVS=1
      CLSSES=1
C  START NEW DATA SECTION.  SECT IS THE SECTION NUMBER.
1002  READ(DBFI,1003)SECT
1003  FORMAT(I8)
      OLDLOC=-1
      SECT1=SECT+1
      WRITE(TTYO,1001)SECT
1001  FORMAT(' PROCESSING SECTION NUMBER =',I3)
      GOTO(1100,1004,1004,1030,1040,1004,1004,1050,1060,1070,1004,
     11080,1004),SECT1
C           (0)  (1)  (2)  (3)  (4)  (5)  (6)  (7)  (8)  (9)  (10)
C     (11) (12)
      CALL BUG(9,SECT,0)
C  SECTIONS 1, 2, 5, 6, 10, 12.  READ MESSAGES AND SET UP POINTERS.
1004  READ(DBFI,1005)LOC,TEXT,KK
1005  FORMAT(1I8,70A1,A1)
      IF(KK.NE.BLANK)CALL BUG(0,SECT,LOC)
      IF(LOC.EQ.-1)GOTO 1002
      DO 1006 K=1,70
      KK=71-K
      IF(TEXT(KK).NE.BLANK)GOTO 1007
1006  CONTINUE
      CALL BUG(1,SECT,LOC)
1007  KK=(KK+4)/5
      DO 10071 K=1,KK
      K1=LINUSE+K
      K2=5*(K-1)+1
      LINES(K1)=CODE2(TEXT(K2))
10071 CONTINUE
      KK=LINUSE+KK
      LINES(LINUSE)=KK+1
      IF(LOC.EQ.OLDLOC)GOTO 1020
      LINES(LINUSE)=-LINES(LINUSE)
      IF(SECT.EQ.12)GOTO 1013
      IF(SECT.EQ.10)GOTO 1012
      IF(SECT.EQ.6)GOTO 1011
      IF(SECT.EQ.5)GOTO 1010
      IF(SECT.EQ.1)GOTO 1008
      STEXT(LOC)=LINUSE
      GOTO 1020
1008  LTEXT(LOC)=LINUSE
      GOTO 1020
1010  IF(LOC.GT.0.AND.LOC.LE.100)PTEXT(LOC)=LINUSE
      GOTO 1020
1011  IF(LOC.GT.RTXSIZ)CALL BUG(6,1011,LOC)
      RTEXT(LOC)=LINUSE
      GOTO 1020
1012  CTEXT(CLSSES)=LINUSE
      CVAL(CLSSES)=LOC
      CLSSES=CLSSES+1
      GOTO 1020
1013  IF(LOC.GT.MAGSIZ)CALL BUG(6,1013,LOC)
      MTEXT(LOC)=LINUSE
1020  LINUSE=KK+1
      LINES(LINUSE)=-1
      OLDLOC=LOC
      IF(LINUSE+14.GT.LINSIZ)CALL BUG(2,SECT,LOC)
      GOTO 1004
C
C  THE STUFF FOR SECTION 3 IS ENCODED HERE.  EACH "FROM-LOCATION" GETS A
C  CONTIGUOUS SECTION OF THE "TRAVEL" ARRAY.  EACH ENTRY IN TRAVEL IS
C  NEWLOC*1000 + KEYWORD (FROM SECTION 4, MOTION VERBS), AND IS NEGATED
C  IF THIS IS THE LAST ENTRY FOR THIS LOCATION.  KEY(N) IS THE INDEX IN
C  TRAVEL OF THE FIRST OPTION AT LOCATION N.
C
1030  READ(DBFI,1031)LOC,NEWLOC,(TK(I),I=1,8)
1031  FORMAT(10I8)
      IF(LOC.EQ.-1)GOTO 1002
      IF(KEY(LOC).NE.0)GOTO 1033
      KEY(LOC)=TRVS
      GOTO 1035
1033  TRAVEL(TRVS-1)=-TRAVEL(TRVS-1)
1035  DO 1037 L=1,8
      IF(TK(L).EQ.0)GOTO 1039
      TRAVEL(TRVS)=NEWLOC*1000+TK(L)
      TRVS=TRVS+1
      IF(TRVS.EQ.TRVSIZ)CALL BUG(3,SECT,LOC)
1037  CONTINUE
1039  TRAVEL(TRVS-1)=-TRAVEL(TRVS-1)
      GOTO 1030
C  HERE WE READ IN THE VOCABULARY.  KTAB(N) IS THE WORD NUMBER, ATAB(N)
C  IS THE CORRESPONDING WORD.  THE -1 AT THE END OF SECTION 4 IS LEFT IN
C  KTAB AS AN END-MARKER.  THE WORDS ARE GIVEN A MINIMAL HASH TO MAKE
C  READING THE CORE-IMAGE HARDER.  NOTE THAT '/7-08' HAD BETTER NOT BE
C  IN THE LIST, SINCE IT COULD HASH TO -1.
1040  DO 1042 TABNDX=1,TABSIZ
1043  READ(DBFI,1041)KTAB(TABNDX),(TEXT(I),I=1,5)
1041  FORMAT(I8,5A1)
      IF(KTAB(TABNDX).EQ.-1)GOTO 1002
1042  ATAB(TABNDX)=SCRMBL(CODE2(TEXT(1)))
      CALL BUG(4,SECT,0)
C  READ IN THE INITIAL LOCATIONS FOR EACH OBJECT.  ALSO THE IMMOVABILITY
C  INFO.  PLAC CONTAINS INITIAL LOCATIONS OF OBJECTS.  FIXD IS -1 FOR
C  IMMOVABLE OBJECTS (INCLUDING THE SNAKE), OR = SECOND LOC FOR
C  TWO-PLACED OBJECTS.
1050  READ(DBFI,1031)OBJ,J,K
      IF(OBJ.EQ.-1)GOTO 1002
      PLAC(OBJ)=J
      FIXD(OBJ)=K
      GOTO 1050
C  READ DEFAULT MESSAGE NUMBERS FOR ACTION VERBS, STORE IN ACTSPK.
1060  READ(DBFI,1031)VERB,J
      IF(VERB.EQ.-1)GOTO 1002
      ACTSPK(VERB)=J
      GOTO 1060
C  READ INFO ABOUT AVAILABLE LIQUIDS AND OTHER CONDITIONS, STORE IN
C  COND.
1070  READ(DBFI,1031)K,(TK(I),I=1,9)
      IF(K.EQ.-1)GOTO 1002
      DO 1071 I=1,9
      LOC=TK(I)
      IF(LOC.EQ.0)GOTO 1070
      IF(BITSET(LOC,K))CALL BUG(8,SECT,LOC)
1071  COND(LOC)=COND(LOC)+SHIFT(1,K)
      GOTO 1070
C  READ DATA FOR HINTS.
1080  HNTMAX=0
1081  READ(DBFI,1031)K,(TK(I),I=1,4)
      IF(K.EQ.-1)GOTO 1002
      IF(K.EQ.0)GOTO 1081
      IF(K.LT.0.OR.K.GT.HNTSIZ)CALL BUG(7,SECT,K)
      DO 1083 I=1,4
1083  HINTS(K,I)=TK(I)
      HNTMAX=MAX0(HNTMAX,K)
      GOTO 1081
C
C  FINISH CONSTRUCTING INTERNAL DATA FORMAT
C  IF SETUP=2 WE DON'T NEED TO DO THIS.  IT'S ONLY NECESSARY IF WE
C  HAVEN'T DONE IT AT ALL OR IF THE PROGRAM HAS BEEN RUN SINCE THEN.
1100  CONTINUE
C  HAVING READ IN THE DATABASE, CERTAIN THINGS ARE NOW CONSTRUCTED.
C  PROPS ARE SET TO ZERO.  WE FINISH SETTING UP COND BY CHECKING FOR
C  FORCED-MOTION TRAVEL ENTRIES.  THE PLAC AND FIXD ARRAYS ARE USED TO
C  SET UP ATLOC(N) AS THE FIRST OBJECT AT LOCATION N, AND LINK(OBJ) AS
C  THE NEXT OBJECT AT THE SAME LOCATION AS OBJ.  (OBJ>100 INDICATES THAT
C  FIXED(OBJ-100)=LOC; LINK(OBJ) IS STILL THE CORRECT LINK TO USE.)  ABB
C  IS ZEROED; IT CONTROLS WHETHER THE ABBREVIATED DESCRIPTION IS
C  PRINTED.  COUNTS MOD 5 UNLESS "LOOK" IS USED.
      DO 1101 I=1,100
      PLACE(I)=0
      PROP(I)=0
      LINK(I)=0
1101  LINK(I+100)=0
      DO 1102 I=1,LOCSIZ
      ABB(I)=0
      IF(LTEXT(I).EQ.0.OR.KEY(I).EQ.0)GOTO 1102
      K=KEY(I)
      IF(MOD(IABS(TRAVEL(K)),1000).EQ.1)COND(I)=2
1102  ATLOC(I)=0
C  SET UP THE ATLOC AND LINK ARRAYS AS DESCRIBED ABOVE.  WE'LL USE THE
C  DROP SUBROUTINE, WHICH PREFACES NEW OBJECTS ON THE LISTS.  SINCE WE
C  WANT THINGS IN THE OTHER ORDER, WE'LL RUN THE LOOP BACKWARDS.  IF THE
C  OBJECT IS IN TWO LOCS, WE DROP IT TWICE.  THIS ALSO SETS UP "PLACE"
C  AND "FIXED" AS COPIES OF "PLAC" AND "FIXD".  ALSO, SINCE TWO-PLACED
C  OBJECTS ARE TYPICALLY BEST DESCRIBED LAST, WE'LL DROP THEM FIRST.
      DO 1106 I=1,100
      K=101-I
      IF(FIXD(K).LE.0)GOTO 1106
      CALL DROP(K+100,FIXD(K))
      CALL DROP(K,PLAC(K))
1106  CONTINUE
      DO 1107 I=1,100
      K=101-I
      FIXED(K)=FIXD(K)
1107  IF(PLAC(K).NE.0.AND.FIXD(K).LE.0)CALL DROP(K,PLAC(K))
C  TREASURES, AS NOTED EARLIER, ARE OBJECTS 50 THROUGH MAXTRS (CURRENTLY
C  79).  THEIR PROPS ARE INITIALLY -1, AND ARE SET TO 0 THE FIRST TIME
C  THEY ARE DESCRIBED.  TALLY KEEPS TRACK OF HOW MANY ARE NOT YET FOUND,
C  SO WE KNOW WHEN TO CLOSE THE CAVE.  TALLY2 COUNTS HOW MANY CAN NEVER
C  BE FOUND (E.G. IF LOST BIRD OR BRIDGE).
      MAXTRS=79
      TALLY=0
      TALLY2=0
      DO 1200 I=50,MAXTRS
      IF(PTEXT(I).NE.0)PROP(I)=-1
1200  TALLY=TALLY-PROP(I)
C  CLEAR THE HINT STUFF.  HINTLC(I) IS HOW LONG HE'S BEEN AT LOC WITH
C  COND BIT I.  HINTED(I) IS TRUE IFF HINT I HAS BEEN USED
      DO 1300 I=1,HNTMAX
      HINTED(I)=.FALSE.
1300  HINTLC(I)=0
C  DEFINE SOME HANDY MNEMONICS.  THESE CORRESPOND TO OBJECT NUMBERS.
      KEYS=VOCAB(CODE1('KEYS '),1)
      LAMP=VOCAB(CODE1('LAMP '),1)
      GRATE=VOCAB(CODE1('GRATE'),1)
      CAGE=VOCAB(CODE1('CAGE '),1)
      ROD=VOCAB(CODE1('ROD  '),1)
      ROD2=ROD+1
      STEPS=VOCAB(CODE1('STEPS'),1)
      BIRD=VOCAB(CODE1('BIRD '),1)
      DOOR=VOCAB(CODE1('DOOR '),1)
      PILLOW=VOCAB(CODE1('PILLO'),1)
      SNAKE=VOCAB(CODE1('SNAKE'),1)
      FISSUR=VOCAB(CODE1('FISSU'),1)
      TABLET=VOCAB(CODE1('TABLE'),1)
      CLAM=VOCAB(CODE1('CLAM '),1)
      OYSTER=VOCAB(CODE1('OYSTE'),1)
      MAGZIN=VOCAB(CODE1('MAGAZ'),1)
      DWARF=VOCAB(CODE1('DWARF'),1)
      KNIFE=VOCAB(CODE1('KNIFE'),1)
      FOOD=VOCAB(CODE1('FOOD '),1)
      BOTTLE=VOCAB(CODE1('BOTTL'),1)
      WATER=VOCAB(CODE1('WATER'),1)
      OIL=VOCAB(CODE1('OIL  '),1)
      PLANT=VOCAB(CODE1('PLANT'),1)
      PLANT2=PLANT+1
      AXE=VOCAB(CODE1('AXE  '),1)
      MIRROR=VOCAB(CODE1('MIRRO'),1)
      DRAGON=VOCAB(CODE1('DRAGO'),1)
      CHASM=VOCAB(CODE1('CHASM'),1)
      TROLL=VOCAB(CODE1('TROLL'),1)
      TROLL2=TROLL+1
      BEAR=VOCAB(CODE1('BEAR '),1)
      MESSAG=VOCAB(CODE1('MESSA'),1)
      VEND=VOCAB(CODE1('VENDI'),1)
      BATTER=VOCAB(CODE1('BATTE'),1)
C  OBJECTS FROM 50 THROUGH WHATEVER ARE TREASURES.  HERE ARE A FEW.
      NUGGET=VOCAB(CODE1('GOLD '),1)
      COINS=VOCAB(CODE1('COINS'),1)
      CHEST=VOCAB(CODE1('CHEST'),1)
      EGGS=VOCAB(CODE1('EGGS '),1)
      TRIDNT=VOCAB(CODE1('TRIDE'),1)
      VASE=VOCAB(CODE1('VASE '),1)
      EMRALD=VOCAB(CODE1('EMERA'),1)
      PYRAM=VOCAB(CODE1('PYRAM'),1)
      PEARL=VOCAB(CODE1('PEARL'),1)
      RUG=VOCAB(CODE1('RUG  '),1)
      CHAIN=VOCAB(CODE1('CHAIN'),1)
      SPICES=VOCAB(CODE1('SPICE'),1)
C  THESE ARE MOTION-VERB NUMBERS.
      BACK=VOCAB(CODE1('BACK '),0)
      LOOK=VOCAB(CODE1('LOOK '),0)
      CAVE=VOCAB(CODE1('CAVE '),0)
      NULL=VOCAB(CODE1('NULL '),0)
      ENTRNC=VOCAB(CODE1('ENTRA'),0)
      DPRSSN=VOCAB(CODE1('DEPRE'),0)
C  AND SOME ACTION VERBS.
      SAY=VOCAB(CODE1('SAY  '),2)
      LOCK=VOCAB(CODE1('LOCK '),2)
      THROW=VOCAB(CODE1('THROW'),2)
      FIND=VOCAB(CODE1('FIND '),2)
      INVENT=VOCAB(CODE1('INVEN'),2)
      SUSPND=VOCAB(CODE1('SUSPE'),2)
C  INITIALIZE THE DWARVES.  DLOC IS LOC OF DWARVES, HARD-WIRED IN.
C  ODLOC IS PRIOR LOC OF EACH DWARF, INITIALLY GARBAGE.  DALTLC IS
C  ALTERNATE INITIAL LOC FOR DWARF, IN CASE ONE OF THEM STARTS OUT ON
C  TOP OF THE ADVENTURER.  (NO 2 OF THE 5 INITIAL LOCS ARE ADJACENT.)
C  DSEEN IS TRUE IF DWARF HAS SEEN HIM.  DFLAG CONTROLS THE LEVEL OF
C  ACTIVATION OF ALL THIS:
C       0     NO DWARF STUFF YET (WAIT UNTIL REACHES HALL OF MISTS)
C       1     REACHED HALL OF MISTS, BUT HASN'T MET FIRST DWARF
C       2     MET FIRST DWARF, OTHERS START MOVING, NO KNIVES THROWN YET
C       3     A KNIFE HAS BEEN THROWN (FIRST SET ALWAYS MISSES)
C       3+    DWARVES ARE MAD (INCREASES THEIR ACCURACY)
C  SIXTH DWARF IS SPECIAL (THE PIRATE).  HE ALWAYS STARTS AT HIS CHEST'S
C  EVENTUAL LOCATION INSIDE THE MAZE.  THIS LOC IS SAVED IN CHLOC FOR
C  REF.  THE DEAD END IN THE OTHER MAZE HAS ITS LOC STORED IN CHLOC2.
      CHLOC=114
      CHLOC2=140
      DO 1700 I=1,6
1700  DSEEN(I)=.FALSE.
      DFLAG=0
      DLOC(1)=19
      DLOC(2)=27
      DLOC(3)=3
      DLOC(4)=44
      DLOC(5)=64
      DLOC(6)=CHLOC
      DALTLC=18
C  OTHER RANDOM FLAGS AND COUNTERS, AS FOLLOWS:
C       TURNS   TALLIES HOW MANY COMMANDS HE'S GIVEN (IGNORES YES/NO)
C       LIMIT   LIFETIME OF LAMP (NOT SET HERE)
C       IWEST   HOW MANY TIMES HE'S SAID "WEST" INSTEAD OF "W"
C       KNFLOC  0 IF NO KNIFE HERE, LOC IF KNIFE HERE, -1 AFTER CAVEAT
C       DETAIL  HOW OFTEN WE'VE SAID "NOT ALLOWED TO GIVE MORE DETAIL"
C       ABBNUM  HOW OFTEN WE SHOULD PRINT NON-ABBREVIATED DESCRIPTIONS
C       MAXDIE  NUMBER OF REINCARNATION MESSAGES AVAILABLE (UP TO 5)
C       NUMDIE  NUMBER OF TIMES KILLED SO FAR
C       HOLDNG  NUMBER OF OBJECTS BEING CARRIED
C       DKILL   NUMBER OF DWARVES KILLED (UNUSED IN SCORING, NEEDED FOR
C               MSG)
C       FOOBAR  CURRENT PROGRESS IN SAYING "FEE FIE FOE FOO".
C       BONUS   USED TO DETERMINE AMOUNT OF BONUS IF HE REACHES CLOSING
C       CLOCK1  NUMBER OF TURNS FROM FINDING LAST TREASURE TILL CLOSING
C       CLOCK2  NUMBER OF TURNS FROM FIRST WARNING TILL BLINDING FLASH
C       LOGICALS WERE EXPLAINED EARLIER
      TURNS=0
      LMWARN=.FALSE.
      IWEST=0
      KNFLOC=0
      DETAIL=0
      ABBNUM=5
      DO 1800 I=1,5
1800  IF(RTEXT(2*(I-1)+81).NE.0)MAXDIE=I
      NUMDIE=0
      HOLDNG=0
      DKILL=0
      FOOBAR=0
      BONUS=0
      CLOCK1=30
      CLOCK2=50
      SAVED=0
      CLOSNG=.FALSE.
      PANIC=.FALSE.
      CLOSED=.FALSE.
      GAVEUP=.FALSE.
      SCORNG=.FALSE.
C  IF SETUP=1, REPORT ON AMOUNT OF ARRAYS ACTUALLY USED, TO PERMIT
C  REDUCTIONS.
      SETUP=2
      DO 1998 K=1,LOCSIZ
      KK=LOCSIZ+1-K
      IF(LTEXT(KK).NE.0)GOTO 1997
1998  CONTINUE
      OBJ=0
1997  DO 1996 K=1,100
1996  IF(PTEXT(K).NE.0)OBJ=OBJ+1
      DO 1995 K=1,TABNDX
1995  IF(KTAB(K)/1000.EQ.2)VERB=KTAB(K)-2000
      DO 1994 K=1,RTXSIZ
      J=RTXSIZ+1-K
      IF(RTEXT(J).NE.0)GOTO 1993
1994  CONTINUE
1993  DO 1992 K=1,MAGSIZ
      I=MAGSIZ+1-K
      IF(MTEXT(I).NE.0)GOTO 1991
1992  CONTINUE
1991  K=100
      WRITE(TTYO,1999)LINUSE,LINSIZ,TRVS,TRVSIZ,TABNDX,TABSIZ,KK
     1,LOCSIZ,OBJ,K,VERB,VRBSIZ,J,RTXSIZ,CLSSES,CLSMAX
     2,HNTMAX,HNTSIZ,I,MAGSIZ
1999  FORMAT (' TABLE SPACE USED:',/
     1' ',I6,' OF ',I6,' WORDS OF MESSAGES',/
     2' ',I6,' OF ',I6,' TRAVEL OPTIONS',/
     3' ',I6,' OF ',I6,' VOCABULARY WORDS',/
     4' ',I6,' OF ',I6,' LOCATIONS',/
     5' ',I6,' OF ',I6,' OBJECTS',/
     6' ',I6,' OF ',I6,' ACTION VERBS',/
     7' ',I6,' OF ',I6,' RTEXT MESSAGES',/
     8' ',I6,' OF ',I6,' CLASS MESSAGES',/
     9' ',I6,' OF ',I6,' HINTS',/
     1' ',I6,' OF ',I6,' MAGIC MESSAGES',/
     2)
C  FINALLY, SINCE WE'RE CLEARLY SETTING THINGS UP FOR THE FIRST TIME...
      CALL POOF
19990 CALL MAINT
      WRITE(TTYO,19991)
19991 FORMAT(' INITIALIZATION COMPLETED.')
      STOP
      END
