//WSER07J  JOB ...
//*
//*  ASM1 -- ASSEMBLES DSAT (YOU MAY OPTIONALLY CHANGE ASMA90 TO IFOX00)
//*  LINK -- LINKS DSAT INTO 'SYS1.CMDLIB(DSAT)'
//*  COPY -- COPIES DSAT HELP TO 'SYS2.HELP(DSAT)'
//*          USING IEBGENER AND SHARED ALLOCATION
//*
//*
//*  LIMITS IN ICF CATALOGS:
//*
//*   IF GDG OPTION IS USED, ONLY THE GDG BASE NAME IS DISPLAYED
//*   WITH THE MESSAGE ' GDG -- IN ICF CATALOG'
//*
//*
//ASM1  EXEC  PGM=ASMA90,REGION=2048K,
//             PARM=('DECK,NOOBJECT,NORLD,RENT,TERM,XREF(SHORT)')
//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR
//         DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,
//         DCB=BLKSIZE=3120
//SYSPRINT DD  SYSOUT=*
//SYSTERM  DD  SYSOUT=*
//SYSIN    DD  *
*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227
*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227
*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227
*                                        MVT
*                                        SVS  (OS/VS2 RELEASE 1)
*                                        MVS  (OS/VS2 RELEASE 3)
*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87
         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'
***********************************************************************
*                                                                     *
*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *
*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *
*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *
*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *
*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *
*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *
*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *
*     ENVIRONMENT.                                                    *
*                                                                     *
*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *
*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *
*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *
*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *
*                                                                     *
*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *
*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *
*     MAY CAUSE AT THE USER'S INSTALLATION.                           *
*                                                                     *
*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *
*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *
*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *
*              COORDINATOR OF TECHNICAL SYSTEMS                       *
*              SYSTEMS & PROGRAMMING DEPARTMENT                       *
*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *
*              P. O. BOX  529100                                      *
*              MIAMI, FLORIDA  33152                                  *
*                                                                     *
*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *
*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *
*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *
*                                                                     *
* INSTALLATION INSTRUCTIONS                                           *
*                                                                     *
*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *
*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *
*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *
*     ALIAS OF THE MODULE.                                            *
*                                                                     *
*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *
*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *
*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *
*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *
*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *
*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *
*                                                                     *
*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *
*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *
*                                                                     *
*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *
*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *
*                                                                     *
***********************************************************************
DSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'
***********************************************************************
*                                                                     *
*  SS0802         ALIAS DSAT                                          *
*                                                                     *
*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *
*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *
*                 DEVICE.                                             *
*                                                                     *
*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *
*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *
*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *
*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *
*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *
*                 BE DISPLAYED.                                       *
*                                                                     *
*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *
*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *
*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *
*                 UNCATALOGED DATA SETS.                              *
*                                                                     *
*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *
*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *
*                 SPECIFYING KEYWORD OPERANDS.                        *
*                                                                     *
*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *
*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *
*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *
*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *
*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *
*                 SPECIFYING NOPRINT.                                 *
*                                                                     *
*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *
*                 DISPLAYED BY ENTERING KEYWORDS.                     *
*                                                                     *
*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *
*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *
*                  2. FILE SEQUENCE NUMBER.                           *
*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *
*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *
*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *
*                  6. DATA SET ORGANIZATION.                          *
*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *
*                  8. CREATION DATE.                                  *
*                  9. EXPIRATION DATE.                                *
*                 10. FULLY QUALIFIED DATA SET NAME.                  *
*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *
*                 12. GENERATION DATA GROUP DATA.                     *
*                 13. PDS DIRECTORY INFORMATION.                      *
*                                                                     *
*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *
*                                   DSORG/NODSORG     DCB/NODCB       *
*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *
*                                   LASTREF/NOLASTREF
*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *
*                                   HEADER/NOHEADER   ALL/DAONLY      *
*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *
*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *
*                                   CCHHR/NOCCHHR     PDS/NOPDS       *
*                                   SECONDARY/NOSECONDARY             *
*                                   GENERIC           DSONLY          *
*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *
*                                   RC(TALLOC/TUSED/TDIFF/            *
*                                      LALLOC/LUSED/LDIFF/NUM/        *
*                                      PREVIOUS/DSORG/DIRALLOC/       *
*                                      DIRUSED/ENTRIES/ALIASES/       *
*                                      MEMBERS)                       *
*                                                                     *
*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *
*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *
*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *
*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *
*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *
*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*
*                                                                     *
*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*
*                             EXDATE    PDS     DEVICE           ABL94*
*                             GDGDATA   LASTREF SECONDARY        ABL94*
*                             CCHHR                              ABL94*
*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*
*                                                                     *
*  SAMPLE OUTPUTS:                                               ABL94*
*>DSAT LIB.CNTL                                                       *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *
*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*
*                                                                     *
*>DSAT LIB.CNTL LAST                                                  *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*
*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*
*                                                                     *
*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *
*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL
*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3
*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *
*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*
*                                                                     *
*>DSAT LINK                                                           *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *
*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*
*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*
*MIGRAT                                                WSER07.LINK.USE*
*        1370   652                                       3 DATA SETS *
*                                                                     *
*>DSAT LIB.CNTL EXTENTS                                               *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *
*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*
*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*
*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *
*      1   052A,0000  19830   052C,0008  19868      39  DATA          *
*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *
*                                                                     *
*                                                                     *
*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *
*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *
*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *
*                             DATA SETS UNDER THAT LEVEL WILL BE      *
*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *
*                             THE PREFIX WILL BE USED.  FOR MVT AND   *
*                             SVS, THIS IS THE USERID.  FOR MVS,      *
*                             THE PREFIX MAY BE SPECIFIED WITH THE    *
*                             PROFILE COMMAND.  IF NO NAME IS         *
*                             SPECIFIED AND THE PROFILE SPECIFIES     *
*                             NOPREFIX, THE USERID WILL BE USED.      *
*                                                                     *
*                             NOTE - IF A KEYWORD IS ENTERED,         *
*                                    NAME-LIST MUST BE SPECIFIED.  IF *
*                                    NAME-LIST IS OMITTED, IT WILL    *
*                                    NOT DEFAULT TO THE PREFIX, BUT   *
*                                    THE KEYWORD WILL BE INTERPRETED  *
*                                    AS THE NAME-LIST, NOT A KEYWORD. *
*                                                                     *
*                 SERIAL/NOSERIAL                                     *
*                             SPECIFIES WHETHER OR NOT THE VOLUME     *
*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *
*                             SET.                                    *
*                                                                     *
*                 SEQNO/NOSEQNO                                       *
*                             SPECIFIES WHETHER OR NOT THE FILE       *
*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *
*                             IF NOSERIAL IS SPECIFIED, THE FILE      *
*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *
*                                                                     *
*                 DEVTYPE/NODEVTYPE                                   *
*                             SPECIFIES WHETHER OR NOT THE DEVICE     *
*                             CODE FROM THE CATALOG ENTRY IS TO BE    *
*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *
*                             THE DEVICE TYPE IS OBTAINED FROM THE    *
*                             UCB.                                    *
*                                                                     *
*                 DEVICE/NODEVICE                                     *
*                             SPECIFIES WHETHER OR NOT THE NAME OF    *
*                             THE DEVICE (3330, 2314, ETC.) IS TO     *
*                             BE DISPLAYED.  THIS VALUE IS ONLY       *
*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *
*                                                                     *
*                 ALLOC/NOALLOC                                       *
*                             SPECIFIES WHETHER OR NOT ALLOCATION     *
*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *
*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *
*                             DISPLAYED.                              *
*                                                                     *
*                 SECONDARY/NOSECONDARY                               *
*                             SPECIFIES WHETHER OR NOT SECONDARY      *
*                             ALLOCATION INFORMATION (AMOUNT OF       *
*                             SECONDARY SPACE AND UNITS) IS TO BE     *
*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *
*                             NO SECONDARY ALLOCATION INFORMATION     *
*                             WILL BE DISPLAYED.                      *
*                                                                     *
*                 DSORG/NODSORG                                       *
*                             SPECIFIES WHETHER OR NOT DATA SET       *
*                             ORGANIZATION IS TO BE DISPLAYED.        *
*                                                                     *
*                 PDS/NOPDS                                           *
*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *
*                             INFORMATION IS DISPLAYED.  SELECTION    *
*                             OF THE PDS OPTION WILL RESULT IN        *
*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *
*                             READING OF THE PDS.  THESE OPERATIONS   *
*                             WILL RESULT IN PERFORMANCE DEGRADATION. *
*                                                                     *
*                             THE MESSAGE "DATA SET IN USE" INDICATES *
*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *
*                             THE DATA SET AND DSAT COULD NOT         *
*                             ALLOCATE IT.                            *
*                                                                     *
*                             IF AN ERROR OCCURS DURING PROCESSING OF *
*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *
*                             WILL APPEAR IN THE PDS DATA FIELDS.     *
*                               RC =   RETURN CODE FROM DAIR          *
*                               DARC = DYNAMIC ALLOCATION RETURN CODE *
*                               CTRC = CATALOG RETURN CODE            *
*                                                                     *
*                 DCB/NODCB                                           *
*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*
*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *
*                             DISPLAYED.                              *
*                                                                     *
*                 CRDATE/NOCRDATE                                     *
*                             SPECIFIES WHETHER OR NOT THE CREATION   *
*                             DATE IS TO BE DISPLAYED.                *
*                                                                     *
*                 EXDATE/NOEXDATE                                     *
*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *
*                             DATE IS TO BE DISPLAYED.                *
*                                                                     *
*                 LASTREF/NOLASTREF                                   *
*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *
*                             REFERENCED IS TO BE DISPLAYED.  MVS     *
*                             SU 60 REQUIRED.                         *
*                                                                     *
*                 CCHHR/NOCCHHR                                       *
*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *
*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *
*                                                                     *
*                 TOTALS/NOTOTALS                                     *
*                             SPECIFIES WHETHER OR NOT ALLOCATION     *
*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*
*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *
*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *
*                                                                     *
*                 PRINT/NOPRINT                                       *
*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*
*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*
*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *
*                             USED TO SET THE RETURN CODE.  ERROR     *
*                             MESSAGES ARE NOT SUPPRESSED.            *
*                                                                     *
*                 HEADER/NOHEADER                                     *
*                             SPECIFIES WHETHER OR NOT THE HEADER     *
*                             LINE IS TO BE SUPPRESSED.               *
*                                                                     *
*                 ALL/DAONLY                                          *
*                             SPECIFIES WHETHER OR NOT DATA SETS      *
*                             ON NON-DIRECT ACCESS DEVICES OR         *
*                             ON UNMOUNTED DEVICES ARE TO BE          *
*                             DISPLAYED.                              *
*                                                                     *
*                 FULL/NOFULL                                         *
*                             SPECIFIES WHETHER OR NOT MOST OF THE    *
*                             AVAILABLE DATA SET INFORMATION SHOULD   *
*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *
*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *
*                             AND CCHHR KEYWORDS.                     *
*                                                                     *
*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *
*                             SPECIED AFTER FULL TO TURN OFF          *
*                             OPTIONS SELECTIVELY.                    *
*                                                                     *
*                 EXTENTS/NOEXTENTS                                   *
*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *
*                             EXTENTS SHOULD BE FORMATTED WITH THE    *
*                             FOLLOWING FIELDS:                       *
*                               EXT#       - EXTENT NUMBER (0 TO 122) *
*                               START/CCHH - STARTING CCHH HEX ADDRESS*
*                               S/TRK      - STARTING CCHH IN DECIMAL *
*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *
*                               E/TRK      - ENDING CCHH IN DECIMAL   *
*                               LENGTH     - SIZE OF EXTENT IN TRACKS *
*                               TYPE       - COMMENTS ON EXTENT USE   *
*                                            CYL - CYLINDER ALLOCATION*
*                                            SHR - SHARING CYLINDER   *
*                                            USR LBL - USER LABELS    *
*                                            IS INDX - ISAM INDEX     *
*                                            IS OVFL - ISAM OVERFLOW  *
*                                            DATA    - USER DATA/PRIME*
*                                                                     *
*                 GDGDATA/NOGDGDATA                                   *
*                             SPECIFIES WHETHER OR NOT GENERATION     *
*                             DATA GROUP DATA IS TO BE DISPLAYED.     *
*                             IF GDGDATA IS SPECIFIED, THE            *
*                             INFORMATION DISPLAYED IS -              *
*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *
*                                         INDEX WAS BUILT.            *
*                                         E INDICATES EMPTY,          *
*                                         D INDICATES DELETE.         *
*                               CURRENT - NUMBER OF GENERATION DATA   *
*                                         SETS CURRENTLY CATALOGED    *
*                                         UNDER THE INDEX.            *
*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *
*                                         WHICH MAY EXIST AT ONE      *
*                                         TIME.                       *
*                                                                     *
*                             NOTE: THIS OPTION IS INOPERATIVE IN     *
*                                   MVS IF THE DATA MANAGMENT SU (8)  *
*                                   IS NOT INSTALLED.  THIS OPERAND   *
*                                   IS ALSO INOPERATIVE FOR           *
*                                   GENERATION INDICES IN VSAM        *
*                                   CATALOGS.  IF THE KEYWORD IS      *
*                                   ENTERED, IT WILL BE IGNORED.  NO  *
*                                   ERROR MESSAGE WILL BE GENERATED.  *
*                                                                     *
*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *
*                             TO BE USED AS A GENERIC KEY TO LOCATE   *
*                             DATA SET NAMES.  ALL DATA SETS WHICH    *
*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *
*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *
*                             THIS OPTION IS VALID FOR MVS ONLY       *
*                             AND ENTRIES IN A VSAM CATALOG.          *
*                                                                     *
*                             GENERIC IS IGNORED IF DSONLY IS         *
*                             SPECIFIED.                              *
*                                                                     *
*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *
*                             REPRESENT DATA SET NAMES ONLY.  IF      *
*                             A NAME SPECIFIED IS FOUND TO BE AN      *
*                             INDEX, DSAT WILL TREAT IT AS NOT        *
*                             FOUND.                                  *
*                                                                     *
*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *
*                             OF THE VOLUME TO BE SEARCHED FOR        *
*                             THE SPECIFIED DATA SETS.  DSAT WILL     *
*                             ASSUME THAT THE NAME-LIST CONSISTS      *
*                             OF DATA SET NAMES, NOT INDEX NAMES.     *
*                                                                     *
*                 HARDCOPY(DDNAME)                                    *
*                             SPECIFIES THAT A HARD COPY LISTING      *
*                             OF THE DSAT OUTPUT IS DESIRED.          *
*                             DDNAME SPECIFIES THE DDNAME OF A        *
*                             PRE-ALLOCATED DATA SET WHERE THE        *
*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *
*                             ATTRIBUTES WILL BE                      *
*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *
*                                                                     *
*                 RC                                                  *
*                             SPECIFIES THE RETURN CODE SETTING.  IF  *
*                             RC IS NOT SPECIFIED, THE RETURN CODE    *
*                             WILL BE SET TO:                         *
*                              4 - SUCCESSFUL COMPLETION.             *
*                             16 - UNABLE TO INTERPRET COMMAND.       *
*                                                                     *
*                             THE RC OPERAND PERMITS THE USER TO      *
*                             SPECIFY THAT THE RETURN CODE IS TO BE   *
*                             SET TO A VALUE DEPENDING ON THE         *
*                             ALLOCATION OF THE DATA SETS.            *
*                             TALLOC   - TOTAL TRACKS ALLOCATED       *
*                             TUSED    - TOTAL TRACKS USED            *
*                             TDIFF    - TOTAL OVERALLOCATION         *
*                                        (TALLOC-TUSED)               *
*                             LALLOC   - TRACKS ALLOCATED BY LAST     *
*                                        DATA SET                     *
*                             LUSED    - TRACKS USED BY LAST DATA SET *
*                             LDIFF    - LAST DATA SET OVERALLOCATION *
*                                        (LALLOC-LUSED)               *
*                             NUM      - NUMBER OF DATA SETS DISPLAYED*
*                                        (INCLUDES DATA SETS NOT      *
*                                        FOUND, ETC.)                 *
*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *
*                                        THE PREVIOUS COMMAND.        *
*                             DSORG    - SETS THE RETURN CODE BASED   *
*                                        ON THE DATA SET ORGANIZATION *
*                                        OF THE DATA SETS DISPLAYED.  *
*                                        1 - ALL DATA SETS WERE SEQ.  *
*                                        2 - ALL DATA SETS WERE PDS   *
*                                        3 - DATA SETS WERE MIXED PDS *
*                                            AND SEQUENTIAL           *
*                                        4 - AN ERROR OCCURRED OR A   *
*                                            DATA SET OTHER THAN PDS  *
*                                            OR SEQUENTIAL WAS        *
*                                            PROCESSED                *
*                             DIRALLOC - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF DIRECTORY BLOCKS   *
*                                        ALLOCATED.                   *
*                             DIRUSED  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF DIRECTORY BLOCKS   *
*                                        USED.                        *
*                             ENTRIES  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF ENTRIES IN THE     *
*                                        DIRECTORY (MEMBERS AND       *
*                                        ALIASES).                    *
*                             ALIASES  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF ALIASES.           *
*                             MEMBERS  - SETS THE RETURN CODE TO      *
*                                        ENTRIES-ALIASES.             *
*                                                                     *
*                                                                     *
*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *
*                                    RETURN CODE FOR TALLOC, TUSED,   *
*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *
*                                    WILL BE ZERO.                    *
*                                                                     *
*                                    IF NODSORG IS SPECIFIED, THE     *
*                                    RETURN CODE FOR DSORG WILL BE    *
*                                    ZERO.                            *
*                                                                     *
*                                    IF NOPDS IS SPECIFIED OR THE     *
*                                    LAST OR ONLY DATA SET IS NOT     *
*                                    A PDS, THE RETURN CODE FOR       *
*                                    DIRALLOC, DIRUSED, ENTRIES,      *
*                                    ALIASES, AND MEMBERS WILL BE     *
*                                    ZERO.                            *
*                                                                     *
*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *
*                                                                     *
*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *
*                                                                     *
*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *
*                                                                     *
*                 DSAT                                                *
*                                                                     *
*                                                                     *
*                 DISPLAY ALL "FPL" DATA SETS.  DISPLAY EXPIRATION    *
*                 DATES.                                              *
*                                                                     *
*                 DSAT 'FPL' EXDATE                                   *
*                                                                     *
*                                                                     *
*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *
*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *
*                 COMPRESS IT.                                        *
*                                                                     *
*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *
*                 WHEN SYSRC(GT 20) END                               *
*                 COMPRESS 'SS.MACLIB'                                *
*                 END                                                 *
*                                                                     *
*                                                                     *
*  FPL MACROS USED                                                    *
*                                                                     *
*        $ENTER            ENTRY CODING                               *
*        $RTRN             EXIT CODING                                *
*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *
*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *
*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *
*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *
*                                                                     *
*  IBM MACROS USED                                                    *
*                                                                     *
*        GETMAIN           OBTAIN WORKING STORAGE                     *
*        FREEMAIN          RELEASE WORKING STORAGE                    *
*        LINK              INVOKE SERVICE ROUTINE                     *
*        LOCATE            READ CATALOG                               *
*        OBTAIN            READ VTOC                                  *
*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *
*        OPEN              OPEN PDS DIRECTORY                         *
*        CLOSE             CLOSE PDS DIRECTORY                        *
*        READ              READ PDS DIRECTORY                         *
*        CHECK             WAIT FOR COMPLETION OF READ                *
*        PUT               WRITE A RECORD                             *
*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *
*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *
*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *
*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *
*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *
*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *
*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *
*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *
*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *
*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *
*        IKJECT            MAP ECT                                    *
*        IKJUPT            MAP UPT                                    *
*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *
*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*
*                                                                     *
*  TSO SERVICE ROUTINES USED                                          *
*                                                                     *
*        IKJPARS           INTERPRET COMMAND OPERANDS                 *
*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *
*        IKJDAIR           DYNAMIC ALLOCATION                         *
*                                                                     *
*  REGISTER ASSIGNMENTS                                               *
*                                                                     *
*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *
*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *
*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *
*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *
*        R4  - WORK REGISTER                                          *
*        R5  - WORK REGISTER                                          *
*        R6  - WORK REGISTER                                          *
*        R7  - WORK REGISTER                                          *
*        R8  - WORK REGISTER                                          *
*        R9  - BASE REGISTER FOR PCL AND PDL                          *
*        R10 - BASE REGISTER FOR CPPL                                 *
*        R11 - PROGRAM BASE REGISTER 1                                *
*        R12 - PROGRAM BASE REGISTER 2                                *
*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *
*        R14 - LINKAGE REGISTER                                       *
*        R15 - LINKAGE REGISTER/RETURN CODE                           *
*                                                                     *
*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *
*  ROUTINES.                                                          *
*                                                                     *
*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *
*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *
*  BEGINNING OF THIS MODULE.                                          *
*                                                                     *
*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *
*  PRATT & WHITNEY AIRCRAFT.                                          *
*                                                                     *
*                                                GORDON P. WEST 09/76 *
***********************************************************************
         TITLE 'UPDATE LOG'
***********************************************************************
*                                                                     *
*  UPDATE LOG                                                         *
*                                                                     *
*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *
*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *
*            ENHANCEMENT.                                             *
*                                                                     *
*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *
*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *
*                                                                     *
*  11/16/76  CCHHR OPTION ADDED.                                      *
*                                                                     *
*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *
*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *
*            DEVTYPE OPTION ADDED.                                    *
*                                                                     *
*  04/25/77  DSONLY OPTION ADDED.                                     *
*                                                                     *
*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *
*                                                                     *
*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *
*                                                                     *
*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *
*                                                                     *
*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *
*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *
*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *
*                                                                     *
*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*
*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *
*                                                                     *
*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *
*                 PDS PROCESSING.                                     *
*                                                                     *
*  03/10/78  ADD HARDCOPY OPTION.                                     *
*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *
*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *
*                                                                     *
*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *
*                 REQUIRED).                                          *
*                                                                     *
*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*
*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*
*                                                                     *
*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*
*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*
*                                                                     *
*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*
*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*
*                                                                     *
*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*
*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*
*                                                                     *
*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*
*                                                                     *
*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*
*            THE HARDCOPY OUTPUT DCB.                              ABL*
*                                                                     *
*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*
*                                                                     *
*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*
*                                                                     *
*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*
*                                                                     *
*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG
*                                                                     *
*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL
*                                                                     *
*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL
*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL
*                                                                     *
*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*
*                                                                     *
*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*
*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*
*                                                                     *
*   8/03/94  CHANGED TO ADD "FULL" TO TURN ON MOST KEYWORDS.     ABL94*
*                                                                ABL94*
*            CHANGED TO SKIP "VOLUME NOT MOUNTED" FOR MIGRAT.    ABL94*
*                                                                ABL94*
*            CHANGED TO ADD "EXTENTS" SIMILAR TO LENARD WOREN'S  ABL94*
*            VERSION OF DSAT AT USC.                             ABL94*
*                                                                ABL94*
*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*
*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*
*                                                                ABL94*
*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*
*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*
***********************************************************************
***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*                                                                     *
* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *
* CONCERNING THIS PROGRAM TO:                                         *
*                                                                     *
*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *
*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *
*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *
*     BURLINGAME, CA  94010                                           *
*     (415) 696-1800                       HOME (408) 997-2366        *
*     INTERNET: BRUCE_LELAND@SERENA.COM                               *
*                                                                     *
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
         TITLE 'FPL MACROS'
         MACRO
&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +
               &CHAIN=YES
         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'
.**********************************************************************
.*                                                                    *
.* $ENTER                                                             *
.*                                                                    *
.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *
.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *
.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *
.*                                                                    *
.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *
.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *
.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *
.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *
.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *
.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *
.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *
.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *
.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *
.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *
.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *
.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *
.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *
.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *
.*                REGISTER 3 IS R3).                                  *
.*                                                                    *
.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *
.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *
.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *
.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *
.*                THE ROUTINE HAS BEEN USED.                          *
.*                                                                    *
.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *
.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *
.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *
.*                THE PROGRAM MASK WILL BE UNALTERED.                 *
.*                                                                    *
.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *
.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *
.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *
.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *
.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *
.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *
.*                                                                    *
.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *
.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *
.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *
.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *
.*                                                                    *
.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *
.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *
.*                                                                    *
.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *
.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *
.*                AN ENTRY STATEMENT WILL BE GENERATED.               *
.*                                                                    *
.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *
.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *
.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *
.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *
.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *
.*                                                                    *
.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *
.*                                   CSECT=NO                         *
.*                                   SAVE=SYM                         *
.*                                   RENT=LEN                         *
.*                                   SP=NUMBER                        *
.*                                   SPM=NO                           *
.*                                   CHAIN=NO                         *
.*                                                                    *
.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *
.*                         INSTRUCTION GENERATED.                     *
.*                                                                    *
.*                BASE   - THE REGISTERS TO BE USED AS BASE           *
.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *
.*                         REGISTER SPECIFIED WILL CONTAIN THE        *
.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *
.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *
.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *
.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *
.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *
.*                         R3 FOR REGISTER 3).                        *
.*                                                                    *
.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *
.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *
.*                         GENERATED.                                 *
.*                                                                    *
.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *
.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *
.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *
.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *
.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *
.*                         WORK AREA.                                 *
.*                                                                    *
.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *
.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *
.*                         AREA TO BE OBTAINED BY A GETMAIN.          *
.*                                                                    *
.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *
.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *
.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *
.*                                                                    *
.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *
.*                         NO TO BE ALTERED.                          *
.*                                                                    *
.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *
.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *
.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *
.*                         MODULES WHERE THE OVERHEAD OF              *
.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *
.*                                                                    *
.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *
.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *
.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *
.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *
.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *
.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *
.*                THE MACRO WILL EXPAND.                              *
.*                                                                    *
.*                                                                    *
.* EXAMPLE        EX1      $ENTER                                     *
.*                                                                    *
.*                EX2      $ENTER CSECT=NO                            *
.*                                                                    *
.*                EX3      $ENTER BASE=(R3,R4,R5)                     *
.*                                                                    *
.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                NAME     TYPE  USE                                  *
.*                                                                    *
.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *
.*                               GENERATED TO PREVENT EQUIVALENCES    *
.*                               FROM BEING GENERATED FOR LATER USES. *
.*                                                                    *
.* MACROS USED                                                        *
.*                                                                    *
.*                GETMAIN                                             *
.*                                                                    *
.* UPDATE SUMMARY                                                     *
.*                                                                    *
.*      VERSION   DATE     CHANGE                                     *
.*                                                                    *
.*        003   04/29/76   CHAIN KEYWORD ADDED                        *
.*                                                                    *
.*                                                                    *
.**********************************************************************
.*
         GBLA  &ENCOUNT
.*
         LCLA  &PARMNO,&REGNO
         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST
.*
&ID      SETC  '&NAME'
         AIF   ('&NAME' NE '').CKCSECT
&ID      SETC  '$ENT&SYSNDX'
         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+
               D.'
.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT
         AIF   ('&SYSECT' NE '').CKEQU
         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'
.CSECT   ANOP
         SPACE
&ID      CSECT
.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU
         SPACE
***********************************************************************
*                                                                     *
*                      REGISTER EQUIVALENCES                          *
*                                                                     *
***********************************************************************
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.*
&ENCOUNT SETA  1
         SPACE
.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2
         AIF   ('&SYSECT' EQ '').CSECT2
.*-------ENTRY POINT
         ENTRY &ID
         USING &ID,R15                  DEFINE BASE REGISTER
&ID      B     14(R15)                  BRANCH AROUND ID
         DC    AL1(8)                   IDENTIFIER LENGTH
         DC    CL8'&ID'                 ENTRY POINT NAME
         DC    CL1' '                   SPACER
         AGO   .STREGS
.*-------CSECT
.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER
         B     28(0,R15)                BRANCH AROUND ID
         DC    AL1(23)                  IDENTIFIER LENGTH
         DC    CL8'&ID'                 CSECT NAME
         DC    CL1' '                   SPACER
         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY
         DC    CL1' '                   SPACER
         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY
.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS
&PARMNO  SETA  1                        INITIALIZE COUNTER
.CKBASE  ANOP
&REG     SETC  '&BASE(&PARMNO)'(1,3)
         AIF   ('&REG'(1,1) NE 'R').SKIPBAS
&TEMP    SETC  '&REG'(2,2)
&REGNO   SETA  &TEMP
         AIF   (&REGNO LT 2).BADBASE
         AIF   (&REGNO GT 12).BADBASE
         AIF   (&REGNO NE 2).SETBASE
         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+
               ST INSTRUCTION WILL DESTROY CONTENTS.'
.SETBASE ANOP
         AIF   ('&FIRST' NE '').SETBAS2
         LR    &REG,R15                 LOAD BASE ADDRESS
&FIRST   SETC  '&REG'                   SAVE REGISTER
         AGO   .SETLAST
.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE
         LA    &REG,1(&REG)             ADD 1 MORE
.SETLAST ANOP
&LAST    SETC  '&REG'
&USING   SETC  '&USING.,&REG'
         AGO   .NEXTBAS
.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'
         AGO   .NEXTBAS
.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'
.NEXTBAS ANOP
&PARMNO  SETA  &PARMNO+1
         AIF   (&PARMNO LE N'&BASE).CKBASE
         DROP  R15                      DISCONTINUE R15 BASE
         USING &ID.&USING               DEFINE BASE REGISTERS
.*-------SEE IF PROGRAM MASK IS TO BE SET
         AIF   ('&SPM' EQ 'NO').NOSPM
         LA    R15,15                   LOAD PGM MASK SETTING
         SLA   R15,24                   SHIFT TO BITS 4-7
         SPM   R15                      SET PGM MASK AND COND
.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE
         AIF   ('&RENT' NE '').GETMAIN
         LR    R15,R13                  SAVE OLD SAVEAREA ADDR
         AIF   ('&SAVE' NE '').LOADSAV
         CNOP  0,4                      FULL WORD ALIGNMENT
         BAL   R13,*+76                 LOAD SAVEAREA ADDR
         DC    18F'0'                   SAVE AREA
         AGO   .CHAIN
.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR
         AGO   .CHAIN
.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'
         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE
* END OF GETMAIN - $ENTER
         LR    R15,R13                  SAVE OLD SAVEAREA ADDR
         LR    R13,R1                   LOAD STORAGE ADDRESS
         USING &SAVE,R13                DEFINE BASE REGISTER
         L     R1,24(R15)               RESTORE REG 1 CONTENTS
.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS
         ST    R13,8(R15)
.DONE    ANOP
         MEND
         SPACE 3
         MACRO
&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES
         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'
.**********************************************************************
.*                                                                    *
.* $RTRN                                                              *
.*                                                                    *
.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *
.*                CALLING PROGRAM.                                    *
.*                                                                    *
.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *
.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *
.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *
.*                RE-ENTRANT CODE IS SUPPORTED.                       *
.*                                                                    *
.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *
.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *
.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *
.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *
.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *
.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *
.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *
.*                                                                    *
.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *
.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *
.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *
.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *
.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *
.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *
.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *
.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *
.*                PROGRAM MASK WILL NOT BE ALTERED.                   *
.*                                                                    *
.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *
.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *
.*                REGISTER 2 AS A BASE REGISTER.                      *
.*                                                                    *
.* SYNTAX         NAME     $RTRN     RC=NUM1                          *
.*                                      (R15)                         *
.*                                   RENT=LEN                         *
.*                                   SP=NUM2                          *
.*                                   SPM=NO                           *
.*                                   REST01=NO                        *
.*                                                                    *
.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *
.*                         INSTRUCTION GENERATED.                     *
.*                                                                    *
.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *
.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *
.*                         OR (R15) INDICATES THAT THE RETURN CODE    *
.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *
.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *
.*                                                                    *
.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *
.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *
.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *
.*                         OBTAINED FROM REGISTER 13.                 *
.*                                                                    *
.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *
.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *
.*                         IN $ENTER.  THE DEFAULT IS 1.              *
.*                                                                    *
.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *
.*                         IS NOT TO BE ALTERED.                      *
.*                                                                    *
.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *
.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *
.*                         RESTORED.  THIS OPTION SHOULD BE           *
.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *
.*                         BACK TO THE CALLING PROGRAM IN             *
.*                         REGISTERS 0 AND 1.                         *
.*                                                                    *
.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *
.*                                                                    *
.* EXAMPLE        EX1      $RTRN                                      *
.*                                                                    *
.*                EX2      $RTRN  RC=4                                *
.*                                                                    *
.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                NONE                                                *
.*                                                                    *
.* MACROS CALLED                                                      *
.*                                                                    *
.*                FREEMAIN                                            *
.*                                                                    *
.* UPDATE SUMMARY                                                     *
.*                                                                    *
.*      VERSION   DATE     CHANGE                                     *
.*                                                                    *
.*        002   04/29/76   REST01 KEYWORD ADDED                       *
.*                                                                    *
.**********************************************************************
.*
         AIF   ('&RENT' EQ '').REGULAR
&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS
         BALR  R2,0                     ESTABLISH BASE REG
         USING *,R2                     DEFINE BASE REGISTER
         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR
         LR    R4,R15                   SAVE RETURN CODE
.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'
         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE
* END FREEMAIN - $RTRN
         AIF   ('&RC' NE '(R15)').RESSAV
         LR    R15,R4                   RESTORE RETURN CODE
.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA
         DROP  R2
         AGO   .COMMON
.REGULAR ANOP
&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA
.COMMON  AIF   ('&RC' EQ '(R15)').RES14
         LA    R15,&RC                  SET RETURN CODE
.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS
         AIF   ('&REST01' EQ 'NO').REST2
         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12
         AGO   .SETFLAG
.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12
.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG
.*-------TEST FOR SPM RESET
         AIF   ('&SPM' EQ 'NO').NOSPM
         SPM   R14                      RESTORE PROGRAM MASK
.NOSPM   BR    R14                      RETURN
         MEND
         SPACE 3
         MACRO
&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=
         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'
.**********************************************************************
.*                                                                    *
.* #TSOBLKS                                                           *
.*                                                                    *
.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *
.*                COMMAND PROCESSORS.                                 *
.*                                                                    *
.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *
.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *
.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *
.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *
.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *
.*                                                                    *
.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *
.*                                                                    *
.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *
.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *
.*                       INITIALIZED TO ZERO.                         *
.*                                                                    *
.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *
.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *
.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *
.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *
.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *
.*                                                                    *
.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *
.*                       THE REGISTER TO BE USED AS THE PPL BASE      *
.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *
.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *
.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *
.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *
.*                       ALSO BE SPECIFIED.                           *
.*                                                                    *
.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *
.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *
.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *
.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *
.*                                                                    *
.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *
.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *
.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *
.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *
.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *
.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *
.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *
.*                                                                    *
.* SYNTAX         NAME     #TSOBLKS  DSECT                            *
.*                                   CPPL=(REG1,REG2)                 *
.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *
.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *
.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *
.*                                   ECB=SYM11                        *
.*                                                                    *
.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *
.*                         INSTRUCTION GENERATED.                     *
.*                                                                    *
.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *
.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *
.*                                                                    *
.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *
.*                         REQUIRED SUBPARAMETERS.                    *
.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *
.*                              REGISTER.                             *
.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *
.*                                                                    *
.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *
.*                         SUBPARAMETERS AND ONE OPTIONAL             *
.*                         SUBPARAMETER.                              *
.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *
.*                               REGISTER.                            *
.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *
.*                               AREA TO BE USED FOR IOPL.            *
.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *
.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *
.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *
.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *
.*                               PUTGET OR STACK MACRO.               *
.*                                                                    *
.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *
.*                         SUBPARAMETERS AND ONE OPTIONAL             *
.*                         SUBPARAMETER.                              *
.*                         1.  - REGISTER TO BE USED AS PPL BASE      *
.*                               REGISTER.                            *
.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *
.*                               AREA TO BE USED FOR PPL.             *
.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *
.*                               FIELD OF IKJPARM MACRO.              *
.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *
.*                               FULLWORD WHERE ANSWER LIST (PDL)     *
.*                               ADDRESS WILL BE PLACED.              *
.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *
.*                                                                    *
.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *
.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *
.*                         SUBPARAMETER.                              *
.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *
.*                               REGISTER.                            *
.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *
.*                               TO BE USED FOR DAPL.                 *
.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *
.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *
.*                               BEFORE INVOKING IKJDAIR.             *
.*                                                                    *
.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *
.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *
.*                         USED AS AN ECB.                            *
.*                                                                    *
.*                                                                    *
.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *
.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*
.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *
.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *
.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *
.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *
.*                                                                    *
.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *
.*                               CPPL=(R11,R1),                     X *
.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *
.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *
.*                              .                                     *
.*                              .                                     *
.*                              .                                     *
.*                DSATIOPL DS    0F       ALIGNMENT                   *
.*                         ORG   *+IOPLLEN                            *
.*                DSATPPL  DS    0F                                   *
.*                         ORG   *+PPLLEN                             *
.*                DSATECB  DS    F                                    *
.*                DSATANS  DS    A                                    *
.*                DSATPTPB PUTLINE MF=L                               *
.*                              .                                     *
.*                              .                                     *
.*                              .                                     *
.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                NONE                                                *
.*                                                                    *
.* MACROS CALLED                                                      *
.*                                                                    *
.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &IER                     ERROR INDICTOR
.*
&IER     SETA  0                        INITIALIZE ERROR INDICATOR
         AIF   (N'&CPPL EQ 2).CKIOPL
         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'
&IER     SETA  1                        SET ERROR INDICATOR
.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL
         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'
&IER     SETA  1                        SET ERROR INDICATOR
.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL
         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'
&IER     SETA  1                        SET ERROR INDICATOR
.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB
         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'
&IER     SETA  1                        SET ERROR INDICATOR
.CKECB   AIF   ('&ECB' NE '').CKERR
         MNOTE 8,'*** ECB PARAMETER MISSING'
&IER     SETA  1                        SET ERROR INDICATOR
.CKERR   AIF   (&IER EQ 0).PARMSOK
         MEXIT
.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING
         MNOTE *,' IKJCPPL'
         IKJCPPL
* END IKJCPPL - #TSOBLKS
         SPACE 4
         AIF   ('&IOPL' EQ '').IKJPPL
         MNOTE *,' IKJIOPL'
         IKJIOPL
* END IKJIOPL - #TSOBLKS
IOPLLEN  EQU   *-IOPL
         SPACE 4
.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL
         MNOTE *,' IKJPPL'
         IKJPPL
* END IKJPPL  - #TSOBLKS
PPLLEN   EQU   *-PPL
         SPACE 4
.IKJDAPL AIF   ('&DAPL' EQ '').EJECT
         MNOTE *,' IKJDAPL'
         IKJDAPL
* END IKJDAPL - #TSOBLKS
DAPLLEN  EQU   *-DAPL
.EJECT   EJECT
&SYSECT  CSECT                          CONTINUE USER CSECT
.USING   ANOP
***********************************************************************
*                                                                     *
*                     SET UP TSO CONTROL BLOCKS                       *
*                                                                     *
***********************************************************************
&NAME    XC    &ECB.(4),&ECB            ZERO ECB
         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS
         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER
         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED
         LA    &IOPL(1),&IOPL(2)
         USING IOPL,&IOPL(1)
.UPPL    AIF   ('&PPL' EQ '').UDAPL
         LA    &PPL(1),&PPL(2)
         USING PPL,&PPL(1)
.UDAPL   AIF   ('&DAPL' EQ '').SETUP
         LA    &DAPL(1),&DAPL(2)
         USING DAPL,&DAPL(1)
.SETUP   ANOP
         AIF   ('&IOPL' EQ '').BLDPPL
*--------BUILD IOPL
         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS
         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS
         LA    R1,&ECB                  GET ECB ADDRESS
         ST    R1,IOPLECB
         AIF   ('&IOPL(3)' EQ '').BLDPPL
         LA    R1,&IOPL(3)              GET IOPB ADDRESS
         ST    R1,IOPLIOPB
.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL
*--------BUILD PPL
         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS
         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS
         LA    R1,&ECB                  GET ECB ADDRESS
         ST    R1,PPLECB
         L     R1,=V(&PPL(3))           GET PCL ADDRESS
         ST    R1,PPLPCL
         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS
         ST    R1,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS
         AIF   ('&PPL(5)' EQ '').BLDDAPL
         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS
         ST    R1,PPLUWA
.BLDDAPL AIF   ('&DAPL' EQ '').DONE
*--------BUILD DAPL
         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS
         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS
         LA    R1,&ECB                  GET ECB ADDRESS
         ST    R1,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS
         AIF   ('&DAPL(3)' EQ '').DONE
         LA    R1,&DAPL(3)              GET DAPB ADDRESS
         ST    R1,DAPLDAPB
.DONE    MEND
         SPACE 3
         MACRO
         #VTCFMT1
         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'
.**********************************************************************
.*                                                                    *
.* #VTCFMT1                                                           *
.*                                                                    *
.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *
.*                                                                    *
.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *
.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *
.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *
.*                                                                    *
.* SYNTAX                    #VTCFMT1                                 *
.*                                                                    *
.* ERRORS           NO ERRORS ARE INDICATED.                          *
.*                                                                    *
.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *
.*                           #VTCFMT1                                 *
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                  NONE                                              *
.*                                                                    *
.* MACROS CALLED                                                      *
.*                                                                    *
.*                  NONE                                              *
.*                                                                    *
.* UPDATE LOG                                                         *
.*                                                                    *
.*      DATE    VERSION     CHANGES                                   *
.*    03/20/78    002       SU60 FIELDS ADDED                         *
.*                                                                    *
.**********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        FORMAT 1 DSCB DESCRIPTION                                    *
*                                                                     *
***********************************************************************
         SPACE 2
DS1DSNAM DS    CL44                     DSNAME
DS1FMTID DS    X                        FORMAT 1 IDENTIFIER
DS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER
DS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER
DS1CREDT DS    XL3                      CREATION DATE
DS1EXPDT DS    XL3                      EXPIRATION DATE
DS1NOPEV DS    X                        NUMBER OF EXTENTS
DS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL
         DS    X                        RESERVED
DS1SYSCD DS    CL13                     SYSTEM CODE
DS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60
DS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92
DS1PDSE  EQU   X'08'                    PDSE DATA SET         ABL NOV92
         DS    XL3                      RESERVED              ABL NOV92
DS1DSORG DS    XL2                      DATA SET ORGANIZATION
DS1RECFM DS    X                        RECORD FORMAT
DS1OPTCD DS    X                        OPTION CODE
DS1BLKL  DS    XL2                      BLOCKSIZE
DS1LRECL DS    XL2                      RECORD LENGTH
DS1KEYL  DS    X                        KEY LENGTH
DS1RKP   DS    XL2                      RELATIVE KEY POSITION
DS1DSIND DS    X                        DATA SET INDICATORS
*              X'80'                      LAST VOLUME FOR DATA SET
*              X'40'                      RACF DEFINED
*              X'20'                      BLOCK LEN MULT OF 8
*              X'10'                      READ/WRITE PASSWORD
*              X'08'                      RESERVED
*              X'04'                      MORE PASSWORD INDICATORS
*              X'02'                      UPDATED - SU 60
*              X'01'                      RESERVED
DS1SCALO DS    XL4                      ALLOCATION PARAMETERS
DS1LSTAR DS    XL3                      LAST BLOCK POINTER
DS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR
         DS    XL2                      RESERVED
DS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION
DS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION
DS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION
DS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB
         MEND
         SPACE 3
         MACRO
         #VTCFMT3
         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'
.**********************************************************************
.*                                                                    *
.* #VTCFMT3                                                           *
.*                                                                    *
.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *
.*                                                                    *
.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *
.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *
.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *
.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *
.*                                                                    *
.* SYNTAX                    #VTCFMT3                                 *
.*                                                                    *
.* ERRORS           NO ERRORS ARE INDICATED.                          *
.*                                                                    *
.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *
.*                           #VTCFMT3                                 *
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                  NONE                                              *
.*                                                                    *
.* MACROS CALLED                                                      *
.*                                                                    *
.*                  NONE                                              *
.*                                                                    *
.**********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        FORMAT 3 DSCB DESCRIPTION                                    *
*                                                                     *
*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *
*        DATA SET                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
DS3KEY   DS    XL4                      KEY - 03030303
DS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION
DS3EXT02 DS    XL10                             5
DS3EXT03 DS    XL10                             6
DS3EXT04 DS    XL10                             7
DS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'
DS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION
DS3EXT06 DS    XL10                             9
DS3EXT07 DS    XL10                            10
DS3EXT08 DS    XL10                            11
DS3EXT09 DS    XL10                            12
DS3EXT10 DS    XL10                            13
DS3EXT11 DS    XL10                            14
DS3EXT12 DS    XL10                            15
DS3EXT13 DS    XL10                            16
DS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92
         MEND
         SPACE 3
         MACRO
         #CTGPL
         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'
.**********************************************************************
.*                                                                    *
.* #CTGPL                                                             *
.*                                                                    *
.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *
.*                                                                    *
.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *
.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *
.*                  MANAGMENT LOGIC - SY26-3826-1                     *
.*                                                                    *
.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *
.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *
.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *
.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *
.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *
.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *
.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *
.*                  BY REGISTER 1.                                    *
.*                                                                    *
.* SYNTAX                    #CTGPL                                   *
.*                                                                    *
.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *
.*                                                                    *
.* EXAMPLE                   DS    0F          ALIGNMENT              *
.*                           #CTGPL                                   *
.*                                                                    *
.* GLOBAL SYMBOLS   NONE                                              *
.*                                                                    *
.* MACROS CALLED    NONE                                              *
.*                                                                    *
.**********************************************************************
CTGPL    DS    0D
*
CTGOPTN1 DS    X              FIRST OPTION BYTE:
CTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY
CTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD
CTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD
CTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD
CTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD
CTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR
*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER
CTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS
*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS
CTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST
*
CTGOPTN2 DS    X              SECOND OPTION BYTE:
CTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)
CTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)
CTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)
CTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)
CTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)
CTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)
CTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV
CTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)
CTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)
CTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)
CTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)
CTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)
*                    .... ...X  RESERVED
*
CTGOPTN3 DS    0X             THIRD OPTION BYTE
CTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION
CTGLOC   EQU   X'20' 001. ....    LOCATE
CTGLSP   EQU   X'40' 010. ....    LSPACE
CTGUPDAT EQU   X'60' 011. ....    UPDATE
CTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS
CTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION
CTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL
CTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY
*                    .... .0..  SEARCH USER CATALOGS FIRST
*                    .... ..X.  RESERVED
CTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST
*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST
*
CTGOPTN4 DS    X              FOURTH OPTION BYTE
CTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)
CTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.
*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG
*                    ..XX XXXX  RESERVED
*
CTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER
CTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV
*
CTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB
CTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME
*
CTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA
*
CTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE
*
CTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION
CTGDEFIN EQU   X'08' 0000 1...  DEFINE
CTGALTER EQU   X'10' 0001 0...  ALTER
CTGDELET EQU   X'18' 0001 1...  DELETE
CTGLTCAT EQU   X'20' 0010 0...  LISTCAT
*                    .... .XXX    RESERVED
*
         DS    X              RESERVED
*
CTGTYPE  DS    X              TYPE OF CATALOG RECORD
CTGTALIN EQU   C'A'             NON-VSAM DATA SET
CTGTGBS  EQU   C'B'             GDG BASE RECORD
CTGTCL   EQU   C'C'             CLUSTER
CTGTDATA EQU   C'D'             DATA SET
CTGTINDX EQU   C'I'             INDEX
CTGTMCAT EQU   C'M'             MASTER CATALOG
CTGTPGS  EQU   C'P'             PAGE DATA SET
CTGTUCAT EQU   C'U'             USER CATALOG
CTGTVOL  EQU   C'V'             VOLUME
CTGTANM  EQU   C'X'             ALIAS NAME
*
CTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD
*
CTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)
CTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)
CTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)
CTGFBFLG DS    X              FLAGS (SUPERLOCATE)
CTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT
CTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP
CTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED
CTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)
*                    .... XXXX  RESERVED
         DS    X              RESERVED
*
CTGJSCB  DS    0A             ADDRESS OF JSCB
CTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD
*
CTGFIELD EQU   *              VARIABLE LENGTH FIELD
*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY
*                               EACH CATALOG FIELD TO BE PROCESSED.
*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE
*                               TIMES 4.
*
CTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL
         MEND
         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'
***********************************************************************
*                                                                     *
*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *
*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *
*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *
*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *
*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *
*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *
*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *
*     ENVIRONMENT.                                                    *
*                                                                     *
*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *
*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *
*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *
*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *
*                                                                     *
*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *
*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *
*     MAY CAUSE AT THE USER'S INSTALLATION.                           *
*                                                                     *
*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *
*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *
*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *
*              COORDINATOR OF TECHNICAL SYSTEMS                       *
*              SYSTEMS & PROGRAMMING DEPARTMENT                       *
*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *
*              P. O. BOX  529100                                      *
*              MIAMI, FLORIDA  33152                                  *
*                                                                     *
*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *
*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *
*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *
*                                                                     *
* INSTALLATION INSTRUCTIONS                                           *
*                                                                     *
*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *
*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *
*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *
*     ALIAS OF THE MODULE.                                            *
*                                                                     *
*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *
*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *
*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *
*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *
*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *
*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *
*                                                                     *
*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *
*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *
*                                                                     *
*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *
*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *
*                                                                     *
***********************************************************************
DSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'
***********************************************************************
*                                                                     *
*  SS0802         ALIAS DSAT                                          *
*                                                                     *
*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *
*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *
*                 DEVICE.                                             *
*                                                                     *
*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *
*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *
*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *
*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *
*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *
*                 BE DISPLAYED.                                       *
*                                                                     *
*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *
*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *
*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *
*                 UNCATALOGED DATA SETS.                              *
*                                                                     *
*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *
*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *
*                 SPECIFYING KEYWORD OPERANDS.                        *
*                                                                     *
*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *
*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *
*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *
*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *
*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *
*                 SPECIFYING NOPRINT.                                 *
*                                                                     *
*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *
*                 DISPLAYED BY ENTERING KEYWORDS.                     *
*                                                                     *
*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *
*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *
*                  2. FILE SEQUENCE NUMBER.                           *
*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *
*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *
*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *
*                  6. DATA SET ORGANIZATION.                          *
*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *
*                  8. CREATION DATE.                                  *
*                  9. EXPIRATION DATE.                                *
*                 10. FULLY QUALIFIED DATA SET NAME.                  *
*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *
*                 12. GENERATION DATA GROUP DATA.                     *
*                 13. PDS DIRECTORY INFORMATION.                      *
*                                                                     *
*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *
*                                   DSORG/NODSORG     DCB/NODCB       *
*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *
*                                   LASTREF/NOLASTREF
*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *
*                                   HEADER/NOHEADER   ALL/DAONLY      *
*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *
*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *
*                                   CCHHR/NOCCHHR     PDS/NOPDS       *
*                                   SECONDARY/NOSECONDARY             *
*                                   GENERIC           DSONLY          *
*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *
*                                   RC(TALLOC/TUSED/TDIFF/            *
*                                      LALLOC/LUSED/LDIFF/NUM/        *
*                                      PREVIOUS/DSORG/DIRALLOC/       *
*                                      DIRUSED/ENTRIES/ALIASES/       *
*                                      MEMBERS)                       *
*                                                                     *
*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *
*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *
*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *
*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *
*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *
*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*
*                                                                     *
*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*
*                             EXDATE    PDS     DEVICE           ABL94*
*                             GDGDATA   LASTREF SECONDARY        ABL94*
*                             CCHHR                              ABL94*
*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*
*                                                                     *
*  SAMPLE OUTPUTS:                                               ABL94*
*>DSAT LIB.CNTL                                                       *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *
*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*
*                                                                     *
*>DSAT LIB.CNTL LAST                                                  *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*
*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*
*                                                                     *
*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *
*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL
*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3
*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *
*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*
*                                                                     *
*>DSAT LINK                                                           *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *
*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*
*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*
*MIGRAT                                                WSER07.LINK.USE*
*        1370   652                                       3 DATA SETS *
*                                                                     *
*>DSAT LIB.CNTL EXTENTS                                               *
*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *
*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*
*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*
*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *
*      1   052A,0000  19830   052C,0008  19868      39  DATA          *
*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *
*                                                                     *
*                                                                     *
*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *
*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *
*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *
*                             DATA SETS UNDER THAT LEVEL WILL BE      *
*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *
*                             THE PREFIX WILL BE USED.  FOR MVT AND   *
*                             SVS, THIS IS THE USERID.  FOR MVS,      *
*                             THE PREFIX MAY BE SPECIFIED WITH THE    *
*                             PROFILE COMMAND.  IF NO NAME IS         *
*                             SPECIFIED AND THE PROFILE SPECIFIES     *
*                             NOPREFIX, THE USERID WILL BE USED.      *
*                                                                     *
*                             NOTE - IF A KEYWORD IS ENTERED,         *
*                                    NAME-LIST MUST BE SPECIFIED.  IF *
*                                    NAME-LIST IS OMITTED, IT WILL    *
*                                    NOT DEFAULT TO THE PREFIX, BUT   *
*                                    THE KEYWORD WILL BE INTERPRETED  *
*                                    AS THE NAME-LIST, NOT A KEYWORD. *
*                                                                     *
*                 SERIAL/NOSERIAL                                     *
*                             SPECIFIES WHETHER OR NOT THE VOLUME     *
*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *
*                             SET.                                    *
*                                                                     *
*                 SEQNO/NOSEQNO                                       *
*                             SPECIFIES WHETHER OR NOT THE FILE       *
*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *
*                             IF NOSERIAL IS SPECIFIED, THE FILE      *
*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *
*                                                                     *
*                 DEVTYPE/NODEVTYPE                                   *
*                             SPECIFIES WHETHER OR NOT THE DEVICE     *
*                             CODE FROM THE CATALOG ENTRY IS TO BE    *
*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *
*                             THE DEVICE TYPE IS OBTAINED FROM THE    *
*                             UCB.                                    *
*                                                                     *
*                 DEVICE/NODEVICE                                     *
*                             SPECIFIES WHETHER OR NOT THE NAME OF    *
*                             THE DEVICE (3330, 2314, ETC.) IS TO     *
*                             BE DISPLAYED.  THIS VALUE IS ONLY       *
*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *
*                                                                     *
*                 ALLOC/NOALLOC                                       *
*                             SPECIFIES WHETHER OR NOT ALLOCATION     *
*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *
*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *
*                             DISPLAYED.                              *
*                                                                     *
*                 SECONDARY/NOSECONDARY                               *
*                             SPECIFIES WHETHER OR NOT SECONDARY      *
*                             ALLOCATION INFORMATION (AMOUNT OF       *
*                             SECONDARY SPACE AND UNITS) IS TO BE     *
*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *
*                             NO SECONDARY ALLOCATION INFORMATION     *
*                             WILL BE DISPLAYED.                      *
*                                                                     *
*                 DSORG/NODSORG                                       *
*                             SPECIFIES WHETHER OR NOT DATA SET       *
*                             ORGANIZATION IS TO BE DISPLAYED.        *
*                                                                     *
*                 PDS/NOPDS                                           *
*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *
*                             INFORMATION IS DISPLAYED.  SELECTION    *
*                             OF THE PDS OPTION WILL RESULT IN        *
*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *
*                             READING OF THE PDS.  THESE OPERATIONS   *
*                             WILL RESULT IN PERFORMANCE DEGRADATION. *
*                                                                     *
*                             THE MESSAGE "DATA SET IN USE" INDICATES *
*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *
*                             THE DATA SET AND DSAT COULD NOT         *
*                             ALLOCATE IT.                            *
*                                                                     *
*                             IF AN ERROR OCCURS DURING PROCESSING OF *
*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *
*                             WILL APPEAR IN THE PDS DATA FIELDS.     *
*                               RC =   RETURN CODE FROM DAIR          *
*                               DARC = DYNAMIC ALLOCATION RETURN CODE *
*                               CTRC = CATALOG RETURN CODE            *
*                                                                     *
*                 DCB/NODCB                                           *
*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*
*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *
*                             DISPLAYED.                              *
*                                                                     *
*                 CRDATE/NOCRDATE                                     *
*                             SPECIFIES WHETHER OR NOT THE CREATION   *
*                             DATE IS TO BE DISPLAYED.                *
*                                                                     *
*                 EXDATE/NOEXDATE                                     *
*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *
*                             DATE IS TO BE DISPLAYED.                *
*                                                                     *
*                 LASTREF/NOLASTREF                                   *
*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *
*                             REFERENCED IS TO BE DISPLAYED.  MVS     *
*                             SU 60 REQUIRED.                         *
*                                                                     *
*                 CCHHR/NOCCHHR                                       *
*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *
*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *
*                                                                     *
*                 TOTALS/NOTOTALS                                     *
*                             SPECIFIES WHETHER OR NOT ALLOCATION     *
*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*
*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *
*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *
*                                                                     *
*                 PRINT/NOPRINT                                       *
*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*
*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*
*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *
*                             USED TO SET THE RETURN CODE.  ERROR     *
*                             MESSAGES ARE NOT SUPPRESSED.            *
*                                                                     *
*                 HEADER/NOHEADER                                     *
*                             SPECIFIES WHETHER OR NOT THE HEADER     *
*                             LINE IS TO BE SUPPRESSED.               *
*                                                                     *
*                 ALL/DAONLY                                          *
*                             SPECIFIES WHETHER OR NOT DATA SETS      *
*                             ON NON-DIRECT ACCESS DEVICES OR         *
*                             ON UNMOUNTED DEVICES ARE TO BE          *
*                             DISPLAYED.                              *
*                                                                     *
*                 FULL/NOFULL                                         *
*                             SPECIFIES WHETHER OR NOT MOST OF THE    *
*                             AVAILABLE DATA SET INFORMATION SHOULD   *
*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *
*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *
*                             AND CCHHR KEYWORDS.                     *
*                                                                     *
*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *
*                             SPECIED AFTER FULL TO TURN OFF          *
*                             OPTIONS SELECTIVELY.                    *
*                                                                     *
*                 EXTENTS/NOEXTENTS                                   *
*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *
*                             EXTENTS SHOULD BE FORMATTED WITH THE    *
*                             FOLLOWING FIELDS:                       *
*                               EXT#       - EXTENT NUMBER (0 TO 122) *
*                               START/CCHH - STARTING CCHH HEX ADDRESS*
*                               S/TRK      - STARTING CCHH IN DECIMAL *
*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *
*                               E/TRK      - ENDING CCHH IN DECIMAL   *
*                               LENGTH     - SIZE OF EXTENT IN TRACKS *
*                               TYPE       - COMMENTS ON EXTENT USE   *
*                                            CYL - CYLINDER ALLOCATION*
*                                            SHR - SHARING CYLINDER   *
*                                            USR LBL - USER LABELS    *
*                                            IS INDX - ISAM INDEX     *
*                                            IS OVFL - ISAM OVERFLOW  *
*                                            DATA    - USER DATA/PRIME*
*                                                                     *
*                 GDGDATA/NOGDGDATA                                   *
*                             SPECIFIES WHETHER OR NOT GENERATION     *
*                             DATA GROUP DATA IS TO BE DISPLAYED.     *
*                             IF GDGDATA IS SPECIFIED, THE            *
*                             INFORMATION DISPLAYED IS -              *
*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *
*                                         INDEX WAS BUILT.            *
*                                         E INDICATES EMPTY,          *
*                                         D INDICATES DELETE.         *
*                               CURRENT - NUMBER OF GENERATION DATA   *
*                                         SETS CURRENTLY CATALOGED    *
*                                         UNDER THE INDEX.            *
*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *
*                                         WHICH MAY EXIST AT ONE      *
*                                         TIME.                       *
*                                                                     *
*                             NOTE: THIS OPTION IS INOPERATIVE IN     *
*                                   MVS IF THE DATA MANAGMENT SU (8)  *
*                                   IS NOT INSTALLED.  THIS OPERAND   *
*                                   IS ALSO INOPERATIVE FOR           *
*                                   GENERATION INDICES IN VSAM        *
*                                   CATALOGS.  IF THE KEYWORD IS      *
*                                   ENTERED, IT WILL BE IGNORED.  NO  *
*                                   ERROR MESSAGE WILL BE GENERATED.  *
*                                                                     *
*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *
*                             TO BE USED AS A GENERIC KEY TO LOCATE   *
*                             DATA SET NAMES.  ALL DATA SETS WHICH    *
*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *
*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *
*                             THIS OPTION IS VALID FOR MVS ONLY       *
*                             AND ENTRIES IN A VSAM CATALOG.          *
*                                                                     *
*                             GENERIC IS IGNORED IF DSONLY IS         *
*                             SPECIFIED.                              *
*                                                                     *
*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *
*                             REPRESENT DATA SET NAMES ONLY.  IF      *
*                             A NAME SPECIFIED IS FOUND TO BE AN      *
*                             INDEX, DSAT WILL TREAT IT AS NOT        *
*                             FOUND.                                  *
*                                                                     *
*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *
*                             OF THE VOLUME TO BE SEARCHED FOR        *
*                             THE SPECIFIED DATA SETS.  DSAT WILL     *
*                             ASSUME THAT THE NAME-LIST CONSISTS      *
*                             OF DATA SET NAMES, NOT INDEX NAMES.     *
*                                                                     *
*                 HARDCOPY(DDNAME)                                    *
*                             SPECIFIES THAT A HARD COPY LISTING      *
*                             OF THE DSAT OUTPUT IS DESIRED.          *
*                             DDNAME SPECIFIES THE DDNAME OF A        *
*                             PRE-ALLOCATED DATA SET WHERE THE        *
*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *
*                             ATTRIBUTES WILL BE                      *
*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *
*                                                                     *
*                 RC                                                  *
*                             SPECIFIES THE RETURN CODE SETTING.  IF  *
*                             RC IS NOT SPECIFIED, THE RETURN CODE    *
*                             WILL BE SET TO:                         *
*                              0 - SUCCESSFUL COMPLETION.             *
*                              8 - AT LEAST ONE DATASET NOT FOUND     *
*                             16 - UNABLE TO INTERPRET COMMAND.       *
*                                                                     *
*                             THE RC OPERAND PERMITS THE USER TO      *
*                             SPECIFY THAT THE RETURN CODE IS TO BE   *
*                             SET TO A VALUE DEPENDING ON THE         *
*                             ALLOCATION OF THE DATA SETS.            *
*                             TALLOC   - TOTAL TRACKS ALLOCATED       *
*                             TUSED    - TOTAL TRACKS USED            *
*                             TDIFF    - TOTAL OVERALLOCATION         *
*                                        (TALLOC-TUSED)               *
*                             LALLOC   - TRACKS ALLOCATED BY LAST     *
*                                        DATA SET                     *
*                             LUSED    - TRACKS USED BY LAST DATA SET *
*                             LDIFF    - LAST DATA SET OVERALLOCATION *
*                                        (LALLOC-LUSED)               *
*                             NUM      - NUMBER OF DATA SETS DISPLAYED*
*                                        (INCLUDES DATA SETS NOT      *
*                                        FOUND, ETC.)                 *
*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *
*                                        THE PREVIOUS COMMAND.        *
*                             DSORG    - SETS THE RETURN CODE BASED   *
*                                        ON THE DATA SET ORGANIZATION *
*                                        OF THE DATA SETS DISPLAYED.  *
*                                        1 - ALL DATA SETS WERE SEQ.  *
*                                        2 - ALL DATA SETS WERE PDS   *
*                                        3 - DATA SETS WERE MIXED PDS *
*                                            AND SEQUENTIAL           *
*                                        4 - AN ERROR OCCURRED OR A   *
*                                            DATA SET OTHER THAN PDS  *
*                                            OR SEQUENTIAL WAS        *
*                                            PROCESSED                *
*                             DIRALLOC - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF DIRECTORY BLOCKS   *
*                                        ALLOCATED.                   *
*                             DIRUSED  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF DIRECTORY BLOCKS   *
*                                        USED.                        *
*                             ENTRIES  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF ENTRIES IN THE     *
*                                        DIRECTORY (MEMBERS AND       *
*                                        ALIASES).                    *
*                             ALIASES  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF ALIASES.           *
*                             MEMBERS  - SETS THE RETURN CODE TO      *
*                                        ENTRIES-ALIASES.             *
*                                                                     *
*                                                                     *
*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *
*                                    RETURN CODE FOR TALLOC, TUSED,   *
*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *
*                                    WILL BE ZERO.                    *
*                                                                     *
*                                    IF NODSORG IS SPECIFIED, THE     *
*                                    RETURN CODE FOR DSORG WILL BE    *
*                                    ZERO.                            *
*                                                                     *
*                                    IF NOPDS IS SPECIFIED OR THE     *
*                                    LAST OR ONLY DATA SET IS NOT     *
*                                    A PDS, THE RETURN CODE FOR       *
*                                    DIRALLOC, DIRUSED, ENTRIES,      *
*                                    ALIASES, AND MEMBERS WILL BE     *
*                                    ZERO.                            *
*                                                                     *
*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *
*                                                                     *
*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *
*                                                                     *
*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *
*                                                                     *
*                 DSAT                                                *
*                                                                     *
*                                                                     *
*                 DISPLAY ALL "FPL" DATA SETS.  DISPLAY EXPIRATION    *
*                 DATES.                                              *
*                                                                     *
*                 DSAT 'FPL' EXDATE                                   *
*                                                                     *
*                                                                     *
*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *
*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *
*                 COMPRESS IT.                                        *
*                                                                     *
*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *
*                 WHEN SYSRC(GT 20) END                               *
*                 COMPRESS 'SS.MACLIB'                                *
*                 END                                                 *
*                                                                     *
*                                                                     *
*  FPL MACROS USED                                                    *
*                                                                     *
*        $ENTER            ENTRY CODING                               *
*        $RTRN             EXIT CODING                                *
*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *
*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *
*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *
*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *
*                                                                     *
*  IBM MACROS USED                                                    *
*                                                                     *
*        GETMAIN           OBTAIN WORKING STORAGE                     *
*        FREEMAIN          RELEASE WORKING STORAGE                    *
*        LINK              INVOKE SERVICE ROUTINE                     *
*        LOCATE            READ CATALOG                               *
*        OBTAIN            READ VTOC                                  *
*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *
*        OPEN              OPEN PDS DIRECTORY                         *
*        CLOSE             CLOSE PDS DIRECTORY                        *
*        READ              READ PDS DIRECTORY                         *
*        CHECK             WAIT FOR COMPLETION OF READ                *
*        PUT               WRITE A RECORD                             *
*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *
*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *
*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *
*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *
*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *
*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *
*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *
*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *
*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *
*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *
*        IKJECT            MAP ECT                                    *
*        IKJUPT            MAP UPT                                    *
*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *
*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*
*                                                                     *
*  TSO SERVICE ROUTINES USED                                          *
*                                                                     *
*        IKJPARS           INTERPRET COMMAND OPERANDS                 *
*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *
*        IKJDAIR           DYNAMIC ALLOCATION                         *
*                                                                     *
*  REGISTER ASSIGNMENTS                                               *
*                                                                     *
*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *
*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *
*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *
*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *
*        R4  - WORK REGISTER                                          *
*        R5  - WORK REGISTER                                          *
*        R6  - WORK REGISTER                                          *
*        R7  - WORK REGISTER                                          *
*        R8  - WORK REGISTER                                          *
*        R9  - BASE REGISTER FOR PCL AND PDL                          *
*        R10 - BASE REGISTER FOR CPPL                                 *
*        R11 - PROGRAM BASE REGISTER 1                                *
*        R12 - PROGRAM BASE REGISTER 2                                *
*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *
*        R14 - LINKAGE REGISTER                                       *
*        R15 - LINKAGE REGISTER/RETURN CODE                           *
*                                                                     *
*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *
*  ROUTINES.                                                          *
*                                                                     *
*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *
*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *
*  BEGINNING OF THIS MODULE.                                          *
*                                                                     *
*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *
*  PRATT & WHITNEY AIRCRAFT.                                          *
*                                                                     *
*                                                GORDON P. WEST 09/76 *
***********************************************************************
         TITLE 'UPDATE LOG'
***********************************************************************
*                                                                     *
*  UPDATE LOG                                                         *
*                                                                     *
*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *
*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *
*            ENHANCEMENT.                                             *
*                                                                     *
*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *
*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *
*                                                                     *
*  11/16/76  CCHHR OPTION ADDED.                                      *
*                                                                     *
*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *
*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *
*            DEVTYPE OPTION ADDED.                                    *
*                                                                     *
*  04/25/77  DSONLY OPTION ADDED.                                     *
*                                                                     *
*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *
*                                                                     *
*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *
*                                                                     *
*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *
*                                                                     *
*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *
*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *
*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *
*                                                                     *
*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*
*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *
*                                                                     *
*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *
*                 PDS PROCESSING.                                     *
*                                                                     *
*  03/10/78  ADD HARDCOPY OPTION.                                     *
*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *
*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *
*                                                                     *
*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *
*                 REQUIRED).                                          *
*                                                                     *
*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*
*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*
*                                                                     *
*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*
*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*
*                                                                     *
*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*
*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*
*                                                                     *
*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*
*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*
*                                                                     *
*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*
*                                                                     *
*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*
*            THE HARDCOPY OUTPUT DCB.                              ABL*
*                                                                     *
*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*
*                                                                     *
*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*
*                                                                     *
*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*
*                                                                     *
*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG
*                                                                     *
*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL
*                                                                     *
*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL
*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL
*                                                                     *
*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*
*                                                                     *
*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*
*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*
*                                                                     *
*   8/03/94  CHANGED TO ADD "FULL" TO TURN ON MOST KEYWORDS.     ABL94*
*                                                                ABL94*
*            CHANGED TO SKIP "VOLUME NOT MOUNTED" FOR MIGRAT.    ABL94*
*                                                                ABL94*
*            CHANGED TO ADD "EXTENTS" SIMILAR TO LEONARD WOREN'S ABL94*
*            VERSION OF DSAT AT USC.                             ABL94*
*                                                                ABL94*
*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*
*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*
*                                                                ABL94*
*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*
*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*
*                                                                ABL94*
*
*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99
*
*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99
*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99
*                               16 - UNABLE TO INTERPRET CMD   HD JAN99
*
*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99
*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99
*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99
*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99
*                                                                ABL99*
*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*
*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*
*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*
***********************************************************************
***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*                                                                     *
* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *
* CONCERNING THIS PROGRAM TO:                                         *
*                                                                     *
*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *
*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *
*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *
*     BURLINGAME, CA  94010                                           *
*     (650) 696-1800                       HOME (541) 347-9137        *
*     INTERNET: BRUCE_LELAND@SERENA.COM                               *
*                                                                     *
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL
         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL
&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT       HD JAN99
* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD
&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL
* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL
         TITLE 'ENTRY CODING'
DSAT     $ENTER BASE=(R11,R12),                                        +
               RENT=DSECTLEN,                                          +
               SAVE=DSATSAVE
         TITLE 'SET UP TSO CONTROL BLOCKS'
***********************************************************************
*                                                                     *
*        CONSTRUCT TSO CONTROL BLOCKS                                 *
*                                                                     *
***********************************************************************
         #TSOBLKS DSECT,ECB=DSATECB,                                   +
               CPPL=(R10,R1),                                          +
               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +
               IOPL=(R8,DSATIOPL,DSATPTPB),                            +
               DAPL=(R7,DSATDAPL)
         DROP  R7
         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB
         MVC   DSATHEDR(4),MODLINE
         MVI   FLAGS,X'00'             CLEAR FLAGS
         MVI   FLAGS2,X'00'
         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE
         DROP  R8                      DROP IOPL BASE REGISTER
*--------GET CATALOG WORKAREA
         L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL
         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA
         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA
         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA
         TITLE 'PARSE COMMAND OPERANDS'
***********************************************************************
*                                                                     *
*                  PARSE THE COMMAND                                  *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR
         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99
         LTR   R15,R15                  TEST RETURN CODE
         BNZ   ERRPARS
         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS
         USING DSATPDL,R9               DEFINE PDE BASE REGISTER
************************************************************
*                                                          *
*        PROCESS 'PDSCALL' KEYWORD                         *
*                                                          *
************************************************************
         SPACE 1
         L     R1,CPPLCBUF           GET ADDRESS OF CBUF
         LH    R14,0(,R1)            GET THE LENGTH
         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE
         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?
         BNE   NOPDSCAL              NO
         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS
         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?
         BNE   *+8                   YES, BRANCH
         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT
NOPDSCAL EQU   *
         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'
***********************************************************************
**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *
**  IN CASE SOMETHING MOVES!                                          *
***********************************************************************
         SPACE 1
IOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+
               RETCODE=ICRETN,                                 HD JAN99+
               RSNCODE=ICRSN,                                  HD JAN99+
               MF=(E,IOCLIST,COMPLETE)                         HD JAN99
         SPACE 1
         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99
         BE    SEARS               YES, CONTINUE               HD JAN99
         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99
         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99
         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99
         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99
         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99
         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99
         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99
         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99
         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99
         TITLE 'SET UP CAMLST CONTROL BLOCKS'
***********************************************************************
*                                                                     *
*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *
*                                                                     *
***********************************************************************
         SPACE 2
*--------SET UP CAMLIST'S
SEARS    DS    0H                                              HD JAN99
         LM    R1,R4,SEARCH            OBTAIN, SEARCH
         LA    R2,DSNAME
         LA    R3,DSATSER
         LA    R4,DSATFMT1
         STM   R1,R4,DSATDCB1
         LM    R1,R4,SEEK              OBTAIN, SEEK
         LA    R2,DS1PTRDS
         LA    R3,DSATSER
         LA    R4,DSATFMT3
         STM   R1,R4,DSATDCB3
         LM    R1,R4,NAME              LOCATE, NAME
         LA    R2,DSNAME
         LA    R4,CATBLOCK
         STM   R1,R4,LOCLIST
         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL
         LA    R2,DSNAME
         LA    R3,CVOL
         LA    R4,CATBLOCK
         STM   R1,R4,LOCLIST2
         LM    R1,R4,TTRLOC            LOCATE, TTR
         LA    R2,TTR
         LA    R3,CVOL
         STM   R1,R4,LOCBYTTR
         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL
         OI    CTGOPTN1,CTGNAME+CTGCNAME
         OI    CTGOPTN3,CTGSUPLT+CTGAM0
         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS
         ST    R1,CTGENT
         L     R1,WORKAREA             SET UP WORK AREA ADDRESS
         ST    R1,CTGWKA
         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED
         BNZ   ZEROTOT
         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE
ZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS
         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED
         BZ    SETUPHDR
         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR
         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?
         BNE   *+8                     YES, BRANCH
         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT
         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS
         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS
         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS
         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH
         BCTR  R1,0                    REDUCE LENGTH BY 1
         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB
         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS
         LA    R2,HARDCPY              LOAD DCB ADDRESS
         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET
         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN
         BO    SETUPHDR
         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE
         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)
         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR
         TITLE 'SET UP HEADER LINE'
***********************************************************************
*                                                                     *
*        SET UP HEADER LINE                                           *
*                                                                     *
***********************************************************************
         SPACE 2
SETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS
         MVC   OUTLINE,BLANKS          BLANK THE LINE
         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL
         BE    TRYDEV
         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER
         LA    R2,7(R2)                INCREMENT POINTER
         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO
         BE    TRYDEV
         MVC   0(4,R2),=C' SEQ'        SET UP HEADER
         LA    R2,5(R2)                INCREMENT POINTER
TRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE
         BE    TRYDEVIC
         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER
         LA    R2,9(R2)                INCREMENT POINTER
TRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE
         BE    TRYALLOC
         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER
         LA    R2,7(R2)                INCREMENT POINTER
TRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS
         CLC   ALLOC,=H'2'             TEST FOR NOALLOC
         BE    TRYDSORG
         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER
         LA    R2,15(R2)               INCREMENT POINTER
         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY
         BE    TRYDSORG
         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER
         LA    R2,11(R2)               INCREMENT POINTER
TRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG
         BE    TRYPDS
         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER
         LA    R2,6(R2)                INCREMENT POINTER
TRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS
         BE    TRYDCB
         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS
*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '
         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT
*        LA    R2,20(R2)               INCREMENT POINTER
         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT
TRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB
         BE    TRYCRDAT
         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER
         LA    R2,17(R2)               INCREMENT POINTER
TRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE
         BE    TRYEXDAT
         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99
         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99
TRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE
         BE    TRYLREFD
         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99
         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99
TRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF
         BNE   TRYCCHHR
         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS
         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99
         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99
TRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR
         BE    DODSNAME
         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER
         LA    R2,11(R2)               INCREMENT POINTER
DODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD
         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE
         CR    R2,R1                   COMPARE TO POINTER
         BH    DSNFLDOK
         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR
DSNFLDOK LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN
         CR    R2,R1                   SEE IF WE'RE PAST IT
*        BH    TOOLONG                 WHAT NONSENSE
         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER
         CLC   HEADER,=H'2'            TEST FOR HEADER
         BE    BUILDDSN
         BAL   R2,PUTL                 DISPLAY LINE
         TITLE 'CONSTRUCT DSNAME'
***********************************************************************
*                                                                     *
*        CONSTRUCT DSNAME                                             *
*                                                                     *
***********************************************************************
         SPACE 2
BUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS
SETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD
         MVC   OUTLINE,BLANKS
         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG
         LA    R2,DSNAME               SET POINTER TO DSNAME
*--------SEE IF NAME ENCLOSED IN QUOTES
         TM    6(R3),X'40'
         BNZ   MOVEREST
*--------APEND PREFIX TO NAME
         L     R1,CPPLUPT              LOAD UPT ADDRESS
         USING UPT,R1                  DEFINE UPT ADDRESSABILITY
         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY
         CLI   UPTPREFL,0              TEST FOR NOPREFIX
         BNE   GETLEN
         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED
         BNZ   MOVEREST
         DROP  R1
         L     R4,CPPLPSCB             LOAD USERID ADDRESS
         CLI   7(R4),0                 SEE IF NO USERID (BATCH)
         BE    NOID
GETLEN   SR    R1,R1                   CLEAR REGISTER 1
         IC    R1,7(R4)                LOAD PREFIX LENGTH
         BCTR  R1,R0                   REDUCE LENGTH BY 1
         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD
         LA    R2,1(R1,R2)             INCREMENT PAST USERID
         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED
         BZ    LOCATE
         MVI   0(R2),C'.'              ADD .
         LA    R2,1(R2)                INCREMENT PAST .
*--------FULLY QUALIFIED NAME SPECIFIED
MOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT
         LH    R1,4(R3)                LOAD LENGTH
         BCTR  R1,R0                   REDUCE LENGTH BY 1
         EX    R1,MOVENAME             COPY NAME
         TITLE 'SEARCH CATALOG FOR DSNAME'
***********************************************************************
*                                                                     *
*        LOCATE CATALOG BLOCK                                         *
*                                                                     *
***********************************************************************
         SPACE 2
LOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA
         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT
         BNZ   COPYSER
         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION
         BNZ   PROCGRP
         LOCATE LOCLIST                LOCATE BY NAME
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   CHECK8
         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED
         BE    OBTAIN1
         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED
         BNE   PROCGRP
         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL
         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME
         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL
         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR
         BE    PROCTTR
         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,
         BE    PROCGRP                    SU 8 NOT INSTALLED
         B     LOCERROR
CHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE
         BNE   CHECK12
         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE
         BNE   PROCGRP
         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE
         BNE   PROCGRP
*--------EMPTY INDEX STRUCTURE
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),INDEX          COPY INDEX NAME
         BAL   R2,PUTL                 DISPLAY LINE
         B     ENDGRP
         SPACE 2
.TESTNDX ANOP
*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)
CHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME
         BNE   LOCERROR
         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'
***********************************************************************
*                                                                     *
*        PROCESS DATA SET GROUP VIA TTR                               *
*                                                                     *
***********************************************************************
         SPACE 2
PROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED
         BNZ   LOCERROR
         OI    FLAGS,DSATGRP           SET DSGROUP FLAG
         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL
         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS
         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS
         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS
         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY
         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS
         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK
         LA    R4,INDEX                LOAD INDEX NAME
FINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER
         CLI   0(R4),C' '              TEST FOR BLANK
         BNE   FINDEND1
         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS
         B     PROCNTRY                LOAD INDEX NAME
FINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER
         CLI   0(R4),C' '              TEST FOR BLANK
         BNE   FINDEND
         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS
READCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS
         LA    R2,8(R1)                LOAD WORK AREA ADDRESS
         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST
         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH
         ST    R2,0(R1)                INITIALIZE POINTER
         LOCATE LOCBYTTR               LOCATE BY TTR
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   LOCERROR
         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
PROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY
         BE    LNKENTRY
         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL
         BE    DSATNEXT
         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES
         BE    DSNOVER5
         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY
         BE    NDXENTRY
         CLI   11(R2),X'02'            TEST FOR GDG ENTRY
         BNE   DSNENTRY
*--------GENERATION INDEX
         OI    FLAGS,GDG               INDICATE GDG
         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED
         BE    NDXENTRY
         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE
         L     R15,ENDNAME             LOAD END OF INDEX NAME
         MVI   0(R15),C'.'             ADD .
         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER
         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE
         SR    R15,R15                 LOAD MAXIMUM ENTRIES
         IC    R15,13(R2)
         CVD   R15,DSATPDEC            CONVERT MAX
         OI    DSATPDEC+7,X'0F'        SET SIGN CODE
         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK
         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE
         LH    R15,14(R2)              LOAD CURRENT
         CVD   R15,DSATPDEC            CONVERT TO DECIMAL
         OI    DSATPDEC+7,X'0F'        SET SIGN CODE
         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK
         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE
         TM    12(R2),X'03'            TEST FLAG BYTE
         BZ    PUTGDG
         BM    GDGEORD
         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE
         B     PUTGDG
GDGEORD  MVC   OUTLINE+15(4),=C'E   '
         TM    12(R2),X'01'
         BNZ   PUTGDG
         MVI   OUTLINE+15,C'D'
PUTGDG   LR    R4,R2                   SAVE R2
         BAL   R2,PUTL                 DISPLAY LINE
         LR    R2,R4                   RESTORE R2
         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA
*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK
NDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS
         MVI   0(R4),C'.'
         MVC   1(8,R4),0(R2)           ADD INDEX NAME
         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR
         MVC   TTR,8(R2)               COPY TTR
         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK
         B     FINDEND
*--------INDEX LINK ENTRY
LNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR
         BZ    ENDLEVEL
         MVC   TTR,8(R2)               COPY TTR
         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
         B     READCTLG
*--------END OF INDEX LEVEL
ENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX
         BNZ   TESTDONE
         TM    FLAGS,GDG               TEST FOR GDG
         BNZ   MTGDG
         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE
         B     PUTEMPTY
MTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE
PUTEMPTY L     R2,DSNFLD               LOAD DSNAME FIELD
         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE
         BAL   R2,PUTL                 DISPLAY MESSAGE
         MVC   OUTLINE,BLANKS          CLEAR LINE
TESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY
         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR
         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE
         BE    ENDGRP
         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME
FINDDOT  BCTR  R4,0
         CLI   0(R4),C'.'
         MVI   0(R4),C' '
         BNE   FINDDOT
         ST    R4,ENDNAME
         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK
         S     R1,=F'264'
         ST    R1,CURRBLK
*--------NEXT ENTRY
DSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
         L     R2,0(R1)                LOAD POINTER
         SR    R15,R15                 LOAD HALFWORD COUNT
         IC    R15,11(R2)
         SLA   R15,1                   DOUBLE TO GET BYTES
         LA    R2,12(R15,R2)           12 BYTES FOR HEADER
         ST    R2,0(R1)                SAVE POINTER
         B     PROCNTRY
*--------DATA SET ENTRY WITH OVER 5 VOLUMES
DSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY
         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME
         L     R1,ENDNAME              GET INDEX NAME LENGTH
         LA    R15,INDEX
         SR    R1,R15
         LA    R1,DSNAME(R1)           POINT TO END OF NAME
         MVI   0(R1),C'.'
         MVC   1(8,R1),0(R2)           ADD NAME
         TM    2(R1),X'F0'             TEST FOR GDG NAME
         BNZ   LOCATE2
         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER
LOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         LOCATE LOCLIST                LOCATE BY NAME
         LTR   R15,R15                 TEST RETURN CODE
         BZ    OBTAIN1
         B     LOCERROR
*--------DATA SET ENTRY
DSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY
         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME
         L     R1,ENDNAME
         LA    R15,INDEX
         SR    R1,R15                  GET LENGTH OF INDEX
         LA    R1,DSNAME(R1)           POINT TO END OF NAME
         MVI   0(R1),C'.'
         MVC   1(8,R1),0(R2)           ADD NAME
         TM    2(R1),X'F0'             TEST FOR GDG NAME
         BNZ   DSNMVC
         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER
DSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         B     LDVOLCNT
         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'
***********************************************************************
*                                                                     *
*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *
*                                                                     *
***********************************************************************
         SPACE 2
PROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED
         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS
BACKUP   BCTR  R1,0                    DECREMENT POINTER
         CLI   0(R1),C' '              TEST FOR BLANK
         BE    BACKUP
         LR    R7,R1                   SAVE ADDRESS
         LA    R15,INDEX               LOAD INDEX ADDRESS
         SR    R7,R15                  GET LENGTH OF INDEX NAME
         LA    R7,1(R7)
         NC    DSONLY,DSONLY           TEST FOR DSONLY
         BNZ   SAVELEN
         NC    GENERIC,GENERIC         TEST FOR GENERIC
         BNZ   SAVELEN
         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99
         BNE   SAVELEN                 NO, BRANCH                 ABL99
         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD
         MVI   1(R1),C'.'              ADD THE PERIOD
SAVELEN  STC   R7,INDEXLEN
RETRYLOC L     R15,WORKAREA            LOAD WORK AREA
         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS
         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA
         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL
         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL
         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL
         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES
         LOCATE CTGPL                  LOCATE ALL DSNAMES
         LTR   R15,R15                 TEST RETURN CODE
         BZ    PROCDATA
         SPACE 2
***********************************************************************
*                                                                     *
*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *
*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *
*        AS COULD BE HELD HAVE BEEN RETURNED.                         *
*                                                                     *
*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *
*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *
*        WERE RETURNED.                                               *
*                                                                     *
*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *
*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *
*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *
*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *
*                                                                     *
*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *
*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *
*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *
*        RETURNED.                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL
         BE    PARTIAL
         CH    R15,=H'40'
         BNE   LOCERROR
*--------GET NEW, BIGGER WORK AREA
         L     R1,WORKAREA             LOAD WORK AREA ADDRESS
         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL
         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL
         ST    R0,4(,R1)               STORE LENGTH USED            ABL
         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL
         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL
         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL
         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA
         LR    R0,R2                   LOAD LENGTH NEEDED
         ICM   R0,B'1000',=X'01'       SUBPOOL 1
         GETMAIN  R,LV=(0)             GET NEW WORK AREA
         ST    R2,WORKLEN              SAVE WORK AREA LENGTH
         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS
         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL
         B     RETRYLOC
*--------TOO MANY NAMES FOR WORK AREA
PARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE
         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL
         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL
         BAL   R2,PUTL                 DISPLAY LINE                 ABL
         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL
         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL
*--------PROCESS DATA SETS
PROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR
         L     R15,WORKAREA            LOAD WORK AREA ADDRESS
         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL
         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS
         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL
         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR
         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL
         B     DSATPROC
DSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED
         LA    R7,45(R7)               INCREMENT TO NEXT NAME
DSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA
         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99
         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY
         MVC   DSNAME,1(R7)            COPY DSNAME
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD
         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE
         LOCATE LOCLIST                LOCATE BY NAME
         LTR   R15,R15                 TEST RETURN CODE
         BZ    OBTAIN1                 OK, BRANCH
         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG
         BE    GDGMSGL                 YES, BRANCH                  SPG
         CLI   0(R7),C'B'              GDG BASE RECORD?
         BNE   LOCERROR                NO, BRANCH
         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT
         LA    R1,100                      LENGTH OF SHOWCAT AREA
         STH   R1,SHOWCATA                 LENGTH OF AREA
         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)
         L     R1,SHOWCATA                 START OF SHOWCAT AREA
         B     LOCERROR
SHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L
LSHOWCAT EQU   *-SHOWCATF
TESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE
         BZ    ENDGRP
***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL
***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL
***      BAL   R2,PUTL                 DISPLAY LINE                 ABL
***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL
         B     ENDGRP
         TITLE 'SEARCH VTOC'
***********************************************************************
*                                                                     *
*        OBTAIN DSCB'S                                                *
*                                                                     *
***********************************************************************
         SPACE 2
COPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL
         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH
         BCTR  R1,0                    REDUCE BY 1
         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS
         L     R4,VOLSER               LOAD SOURCE ADDRESS
         EX    R1,MOVENAME             COPY VOLUME SERIAL
         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT
         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD
         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER
         CLI   0(R4),C'*'              TEST FOR * ENTERED
         BNE   OBTAIN1
         XC    UWORK,UWORK           START UCB SEARCH OVER
         EJECT
***********************************************************************
**                                                                   **
**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **
**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **
**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **
**                                                                   **
***********************************************************************
         SPACE 1
NEXTSER  UCBSCAN COPY,                                         HD JAN99+
               WORKAREA=UWORK,                                 HD JAN99+
               UCBAREA=UCBAR,                                  HD JAN99+
               DYNAMIC=YES,                                    HD JAN99+
               RANGE=ALL,                                      HD JAN99+
               DEVCLASS=DASD,                                  HD JAN99+
               RETCODE=USRETN,                                 HD JAN99+
               RSNCODE=USRSN,                                  HD JAN99+
               IOCTOKEN=TOKEN,                                 HD JAN99+
               MF=(E,UCBLIST,COMPLETE)                         HD JAN99
         SPACE 1
         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99
         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99
         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99
         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99
         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99
         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99
         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99
         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99
         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99
         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99
         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99
         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99
         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99
NEXT01   DS    0H                                              HD JAN99
         LA    R15,UCBAR             START OF THIS UCB         HD JAN99
         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99
*                                    CHECK FOR NOT-READY       HD JAN99
         BO    NEXTSER               YES, IGNORE
         B     THISVOL
         SPACE 1
ENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL
         BO    ENDGRP2
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME
         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE
         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE
         B     ENDGRP2
THISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99
         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME
         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99
*                                      COPY UCBTYPE FIELD      HD JAN99
         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99
*                                      COPY SERIAL
         ST    R1,SERPTR               STORE UCB TABLE POINTER
         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
OBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS
LDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA
         LH    R1,HALF                 LOAD VOLUME COUNT
         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD
         CH    R1,=H'20'               TEST AGAINST MAX COUNT
         BNH   GETSER
         LA    R1,20                   SET MAX COUNT
GETSER   C     R1,=F'1'                TEST VOLUME COUNT
         BL    BADVOLCT                BAD VOLUME COUNT
         BE    STOREVCT
         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME
STOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT
         MVC   DSATSER,4(R8)           COPY SERIAL
         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL
         BE    TESTDEV
         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS
         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE
         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO
         BE    TESTDEV
         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA
         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER
         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE
TESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE
         BE    TESTDA
         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE
         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC
         L     R2,DEVFLD               LOAD OUTPUT ADDRESS
         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE
TESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS
         BNE   NOTDASD
         SR    R1,R1                   CLEAR REG 1
         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD
TESTTYPE CH    R1,=H'15'               TEST AGAINST MAX
         BH    NOTDASD
         SLA   R1,3                    MULTIPLY BY 8
         SR    R0,R0
         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL
         STH   R0,TRKPRCYL             SAVE IT
         LTR   R0,R0                   TEST IT
         BNZ   TESTDEV2
*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB
         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99
         EJECT
***********************************************************************
**                                                                   **
**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **
**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **
**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **
**                                                                   **
***********************************************************************
         SPACE 1
NEXTDEV  UCBSCAN COPY,                                         HD JAN99+
               WORKAREA=UWORK,                                 HD JAN99+
               UCBAREA=UCBAR,                                  HD JAN99+
               DYNAMIC=YES,                                    HD JAN99+
               RANGE=ALL,                                      HD JAN99+
               DEVCLASS=DASD,                                  HD JAN99+
               RETCODE=USRETN,                                 HD JAN99+
               RSNCODE=USRSN,                                  HD JAN99+
               IOCTOKEN=TOKEN,                                 HD JAN99+
               MF=(E,UCBLIST,COMPLETE)                         HD JAN99
         SPACE 1
         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99
         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99
         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99
         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99
         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99
         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99
         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99
         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99
         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99
         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99
         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99
         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99
         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99
         SPACE 1                                               HD JAN99
NEXTDEV1 DS    0H                                              HD JAN99
         LA    R15,UCBAR                START OF THIS UCB      HD JAN99
         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99
         BNE   NEXTDEV                                         HD JAN99
         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99
*                                    CHECK FOR NOT-READY       HD JAN99
         BO    NOTUP
         SR    R1,R1
         IC    R1,19(R15)              INSERT TYPE CODE
         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED
         BZ    TESTTYPE
         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY
         B     TESTTYPE
NOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4
         B     DSNERR
TESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE
         BE    GETFMT1
         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS
         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS
         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE
GETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   DSNERR
         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB
         BZ    PROCESS
         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   DSNERR
         TITLE 'PROCESS THE DSCB'
***********************************************************************
*                                                                     *
*        PROCESS THE DSCB                                             *
*                                                                     *
***********************************************************************
         SPACE 2
PROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET
         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND
         CLC   ALLOC,=H'2'             TEST FOR NOALLOC
         BE    PROCDSRG
         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE
         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS
         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME
         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME
         STM   R4,R5,TOTLS+8           SAVE TOTALS
PROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG
         BE    PROCPDS
         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE
PROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS
         BE    PROCDCB
         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO
         BZ    PROCDCB
         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS
         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE
PROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB
         BE    PROCCRDT
         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE
PROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE
         BE    PROCEXDT
         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE
PROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE
         BE    PROCLREF
         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE
PROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF
         BNE   PROCCHHR
         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE
PROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR
         BE    PUTLINE
         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE
PUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE
RESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE
         SPACE 2
***********************************************************************
*                                                                     *
*        ACCUMULATE TOTALS                                            *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME
         LH    R1,VOLCNT               LOAD VOLUME COUNT
         BCT   R1,GETSER               LOOP FOR MORE VOLUMES
         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS
         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC
         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE
         TM    FLAGS,COUNT             COUNT IT?
         BZ    SAVETOTL
         LA    R8,1(R8)                INCREMENT DATA SET COUNT
SAVETOTL STM   R4,R8,TOTLS             STORE TOTALS
         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94
         BE    NOEXTENT                YES, BRANCH                ABL94
         TM    FLAGS,COUNT             COUNT IT?                  ABL94
         BZ    NOEXTENT                NO, BRANCH                 ABL94
         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94
         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94
         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94
NOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94
         SPACE 2
***********************************************************************
*                                                                     *
*        PROCESS NEXT DATA SET                                        *
*                                                                     *
***********************************************************************
         SPACE 2
ENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99
         BZ    ENDGRP
         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE
         BZ    DSATNEXT                GET NEXT DSNAME
         B     DSATNXT2                GET NEXT DSNAME
         SPACE 2
ENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG
         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT
         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED
         BZ    ENDGRP2
         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS
         CLI   0(R1),C'*'              TEST FOR ASTERISK
         BE    NEXTSER
ENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE
         LA    R3,0(,R3)
         LTR   R3,R3                   END OF CHAIN?
         BNZ   SETUPNXT                NO, BRANCH
         TITLE 'DISPLAY TOTALS'
***********************************************************************
*                                                                     *
*        DISPLAY TOTALS IF REQUESTED                                  *
*                                                                     *
***********************************************************************
         SPACE 2
         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED
         BE    RETURN
         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE
         LM    R4,R8,TOTLS             LOAD TOTALS
         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS
         MVC   DSATDEC,=X'4020202020202120'
         ED    DSATDEC,DSATPDEC+4      EDIT
         L     R2,DSNFLD               LOAD DATA SET NAME FIELD
         MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE
         MVC   5(19,R2),=C'DATA SETS DISPLAYED'
         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS
         BH    CNVTALOC
         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME
         BZ    RETURN
         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR
         MVC   5(19,R2),=C'DATA SET DISPLAYED '
CNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED
         BE    DISPLAYT
         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS
         SH    R2,=H'2'                BACK UP BY TWO             ABL94
         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC
         MVC   DSATDEC,=X'4020202020202120'
         ED    DSATDEC,DSATPDEC+4      EDIT
*        MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE
         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94
         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'
         ED    DSATDEC,DSATPDEC+4      EDIT
*        MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE
         MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94
DISPLAYT BAL   R2,PUTL                 DISPLAY LINE
         TITLE 'SET UP RETURN CODE'
***********************************************************************
*                                                                     *
*        SET UP RETURN CODE                                           *
*                                                                     *
***********************************************************************
         SPACE 2
RETURN   LM    R4,R8,TOTLS             LOAD TOTALS
         LH    R15,RC                  LOAD RETURN CODE
         C     R15,=F'10'              SEE IF A PDS CODE
         BL    BRANCH
         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS
BRANCH   SLA   R15,2                   MULTIPLY BY 4
         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE
BRTABLE  B     RC0                                             HD JAN99
         B     RCTALLOC
         B     RCTUSED
         B     RCLALLOC
         B     RCLUSED
         B     RCTDIFF
         B     RCLDIFF
         B     RCNUM
         B     RCPREV
         B     RCDSORG
         B     RCDIRA
         B     RCDIRU
         B     RCENTR
         B     RCMEMB
RCALIAS  LR    R15,R7                  NUMBER OF ALIASES
         B     EXIT
RCMEMB   LR    R15,R6                  NUMBER OF ENTRIES
         SR    R15,R7                  MINUS ALIASES = MEMBERS
         B     EXIT
RCENTR   LR    R15,R6                  NUMBER OF ENTRIES
         B     EXIT
RCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED
         B     EXIT
RCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED
         B     EXIT
RCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS
         LA    R15,4                   SET COMPLETION CODE
         TM    FLAGS,$NOTPOPS
         BNZ   EXIT
         IC    R15,FLAGS               LOAD FLAGS AS RC
         B     EXIT
RCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS
         USING ECT,R15
         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE
         DROP  R15
         B     EXIT
RCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED
         B     EXIT
RCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC
         SR    R15,R5                  LESS TOTAL TRACKS FREE
         B     EXIT
RCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS
         B     EXIT
RCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS
         SR    R15,R7                  LESS TOTAL TRACKS FREE
         B     EXIT
*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED
RCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED
         B     EXIT
*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS
RCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS
         B     EXIT
RCNUM    LR    R15,R8                  LOAD DATA SET COUNT
         B     EXIT
RC4      LA    R15,4                   SET RETURN CODE TO 4
         B     EXIT                                            HD JAN99
RC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99
         B     EXIT                                            HD JAN99
RC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99
         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99
         BO    RC8                     YES, RETURN CODE=8      HD JAN99
         B     EXIT                                            HD JAN99
         TITLE 'EXIT CODING'
***********************************************************************
*                                                                     *
*        RELEASE STORAGE AND RETURN                                   *
*                                                                     *
***********************************************************************
         SPACE 2
EXIT     LR    R3,R15                  SAVE RETURN CODE
         IKJRLSA DSATANS               RELEASE PARSE STORAGE
         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION
         BZ    EXIT2
         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS
         LA    R2,HARDCPY              LOAD DCB ADDRESS
         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB
EXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS
         L     R2,WORKLEN              LOAD WORK AREA LENGTH
         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA
         LR    R15,R3                  RESTORE RETURN CODE
         $RTRN RENT=DSECTLEN,RC=(R15)
         TITLE 'GET ALLOCATION INFORMATION'
***********************************************************************
*                                                                     *
*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *
*                                                                     *
***********************************************************************
*                                                                     *
*        R2        - OUTPUT AREA ADDRESS                              *
*        R3        - RESERVED (DSNAME PDE POINTER)                    *
*        R4        - NUMBER OF EXTENTS (COUNTER)                      *
*        R5        - EXECUTE TABLE POINTER                            *
*        R6        - TRACKS ALLOCATED                                 *
*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *
*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *
*                                                                     *
***********************************************************************
         SPACE 2
*--------GET TRACK ALLOCATION
$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS
         SR    R4,R4                   CLEAR REGISTER 4
         SR    R5,R5                   CLEAR REGISTER 5
         SR    R6,R6                   CLEAR REGISTER 6
         SR    R7,R7                   CLEAR REGISTER 7
         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS
         LTR   R4,R4                   TEST NUMBER OF EXTENTS
         BZ    ALLOCEND
         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92
         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92
         SR    R0,R15                  EXTENTS LEFT           ABL NOV92
         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92
         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92
         BL    DSATTRKS                YES, BRANCH            ABL NOV92
         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92
DSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK
         CLI   0(R7),X'00'
         BE    DSATUTRK
         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK
         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER
         LH    R1,HALF
         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER
         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING
         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL
         MVC   HALF(2),6(R7)           LOAD ENDING TRACK
         AH    R1,HALF                 ADD TO TRACK COUNT
         MVC   HALF(2),2(R7)           LOAD STARTING TRACK
         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT
         AR    R6,R1                   ACCUMULATE TOTAL
         LA    R6,R1(R6)               ADD 1 TRACK
         LA    R5,4(R5)
         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT
         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92
         BZ    DSATUTRK                NO, DONE               ABL NOV92
         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92
         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92
         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92
         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92
         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92
         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92
         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92
         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92
         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92
         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92
         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92
         SR    R0,R15                  EXTENTS LEFT           ABL NOV92
         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92
         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92
         BL    DSATTRKS                YES, BRANCH            ABL NOV92
         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92
         B     DSATTRKS                CONTINUE               ABL NOV92
         SPACE 3                                              ABL NOV92
DSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE
*--------GET TRACKS USED
         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL
         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO
         BZ    DSATXNTS
         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL
         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL
         LA    R1,1(R1)                ADD 1                        ABL
         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL
         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL
         CVD   R7,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE
*--------GET NUMBER OF EXTENTS
DSATXNTS SR    R1,R1
         IC    R1,DS1NOPEV             LOAD EXTENTS
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE
         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92
         BNH   ALLOCEND                NO, BRANCH             ABL NOV92
         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92
ALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY
         BE    NOSECOND
         LA    R2,15(R2)               INCREMENT FIELD POINTER
         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE
         BM    TRKALLOC
         BO    CYLALLOC
         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION
         B     SECAMT
CYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION
         B     SECAMT
TRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS
         BZ    BLKALLOC
         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION
         B     SECAMT
BLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION
SECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA
         L     R1,WORK                 LOAD ALLOCATION WORD
         LA    R1,0(R1)                ZERO OUT HIGH BYTE
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   0(4,R2),DSATDEC+4
NOSECOND BR    R14                     RETURN
         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94
***********************************************************************
*                                                                ABL94*
*        FORMAT SECONDARY EXTENTS                                ABL94*
*                                                                ABL94*
***********************************************************************
*                                                                ABL94*
*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*
*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*
*        R5        - EXECUTE TABLE POINTER                       ABL94*
*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*
*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*
*                                                                ABL94*
***********************************************************************
         SPACE 2                                                  ABL94
$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94
         SR    R4,R4                   CLEAR REGISTER 4           ABL94
         SR    R5,R5                   CLEAR REGISTER 5           ABL94
         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94
         LTR   R4,R4                   ANY EXTENTS?               ABL94
         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94
         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94
         BE    $ALLEX99                YES, BRANCH                ABL94
         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94
         BE    $ALLEX99                YES, BRANCH                ABL94
         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94
         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94
         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94
         LA    R15,3                   EXTENTS TO PROCESS         ABL94
         LR    R0,R4                   TOTAL EXTENTS              ABL94
         SR    R0,R15                  EXTENTS LEFT               ABL94
         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94
         CH    R4,=H'3'                CAN WE DO ALL?             ABL94
         BL    $ALLEX10                YES, BRANCH                ABL94
         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94
$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94
         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94
         CLI   0(R7),X'00'                                        ABL94
         BE    $ALLEX20                                           ABL94
         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94
         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94
*                                                                 ABL94
         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94
         BNO   NOT$CYL                  NO - SKIP                 ABL94
         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94
         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94
         B     YES$CYL                  SKIP AROUND               ABL94
*                                                                 ABL94
NOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94
         BZ    *+4+6+4                  NO - SKIP                 ABL94
         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94
         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94
*                                                                 ABL94
YES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94
         BZ    *+4+6+4                  NO - SKIP                 ABL94
         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94
         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94
*                                                                 ABL94
         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94
         BZ    *+4+6+4                  NO - SKIP                 ABL94
         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94
         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94
*                                                                 ABL94
         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94
         BZ    *+4+6+4                  NO - SKIP                 ABL94
         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94
         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94
*                                                                 ABL94
         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94
         BZ    *+4+6+4                  NO - SKIP                 ABL94
         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94
         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94
*                                                                 ABL94
         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94
         SR    R0,R0                    CLEAR FOR IC              ABL94
         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94
         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94
         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94
*--- EXTENT STARTING ADDRESS (HEX)                                ABL94
         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94
         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94
         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94
         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94
         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94
*--- EXTENT STARTING ADDRESS (DEC)                                ABL94
         LH    R0,2(,R1)                GET START CC              ABL94
         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94
         AH    R0,4(,R1)                ADD START HH              ABL94
         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94
         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94
*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94
         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94
         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94
         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94
         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94
         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94
*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94
         LH    R0,6(,R1)                GET END CC                ABL94
         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94
         AH    R0,8(,R1)                ADD END HH                ABL94
         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94
         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94
*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94
         LH    R15,6(,R1)               GET END CC                ABL94
         SH    R15,2(,R1)               SUB START CC              ABL94
         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94
         AH    R15,8(,R1)               ADD END HH                ABL94
         SH    R15,4(,R1)               SUB START HH              ABL94
         LA    R0,1(,R15)               FUDGE FACTOR              ABL94
         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94
         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94
         BAL   R2,PUTL                  DISPLAY LINE              ABL94
         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94
         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94
         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94
         BZ    $ALLEX20                NO, DONE                   ABL94
         LA    R5,3*4                  POINTER TO NEXT 13         ABL94
         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94
         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94
         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94
         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94
         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94
         LTR   R15,R15                 GOOD RETURN CODE?          ABL94
         BNZ   DSNERR                  NO, SOME ERROR             ABL94
         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94
         LA    R15,13                  EXTENTS TO PROCESS         ABL94
         LR    R0,R4                   TOTAL EXTENTS              ABL94
         SR    R0,R15                  EXTENTS LEFT               ABL94
         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94
         CH    R4,=H'13'               CAN WE DO ALL?             ABL94
         BL    $ALLEX10                YES, BRANCH                ABL94
         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94
         B     $ALLEX10                CONTINUE                   ABL94
         SPACE 3                                                  ABL94
$ALLEX20 DS    0H                                                 ABL94
$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94
         BR    R14                     RETURN                     ABL94
CONVDEC0 CVD   R0,DECWORK                                         ABL94
         MVC   DECNUM(12),DECMASK                                 ABL94
         ED    DECNUM(12),DECWORK+2                               ABL94
         BR    R14                                                ABL94
DECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94
HEXTAB   EQU   *-C'0'                                             ABL94
         DC    C'0123456789ABCDEF'                                ABL94
HEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$
               TYPE-------------------------'                     ABL94
         EJECT
*--------LOAD EXTENT DESCRIPTIONS
DSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>
         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>
         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>
         TITLE 'DSORG PROCESSING'
***********************************************************************
*                                                                     *
*        GET DSORG                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS
         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY
         BZ    DSORG001
         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS
         MVC   0(1,R2),0(R1)           COPY TYPE CODE
         MVI   1(R2),C'-'
         LA    R2,1(R2)                INCREMENT OVER TYPE CODE
DSORG001 LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS
         LA    R4,4                    LOAD LENGTH OF ENTRY
         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS
         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE
         BZ    DSORGCLC
         MVI   3(R2),C'U'              INDICATE UMMOVABLE
         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT
DSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE
         BE    DSORGMVC
         BXLE  R1,R4,DSORGCLC
         MVC   1(2,R2),=C'**'          UNDEFINED DSORG
         B     DSORGBAD                RETURN
DSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE
         CLC   1(2,R2),=C'PO'          TEST FOR PDS
         BE    DSORGPO
         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL
         BE    DSORGPS
DSORGBAD OI    FLAGS,$NOTPOPS
         B     DSORGRTN
DSORGPO  OI    FLAGS,$DSPO             PARTITIONED
         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92
         BNO   DSORGRTN                NO, BRANCH             ABL NOV92
         MVI   2(R2),C'E'              YES, CHANGE TO "PE"    ABL NOV92
         B     DSORGRTN
DSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL
DSORGRTN BR    R14                     RETURN
         TITLE 'DCB PROCESSING'
***********************************************************************
*                                                                     *
*        GET DCB ATTRIBUTES                                           *
*                                                                     *
***********************************************************************
         SPACE 2
$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS
         LR    R5,R2
         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM
         BZ    DSATT
         TM    DS1RECFM,X'40'          TEST FOR F RECFM
         BNZ   DSATUORV
         MVI   0(R5),C'F'              MOVE F INTO MESSAGE
         LA    R5,1(R5)                INCREMENT POINTER
         B     DSATT
DSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM
         BZ    DSATV
         MVI   0(R5),C'U'              RECFM IS U
         LA    R5,1(R5)                INCREMENT POINTER
         B     DSATT
DSATV    MVI   0(R5),C'V'              RECFM IS V
         LA    R5,1(R5)                INCREMENT POINTER
DSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM
         BZ    DSATB
         MVI   0(R5),C'T'              RECFM IS T
         LA    R5,1(R5)                INCREMENT POINTER
DSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING
         BZ    DSATS
         MVI   0(R5),C'B'              ADD B TO RECFM
         LA    R5,1(R5)                INCREMENT POINTER
DSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS
         BZ    DSATA
         MVI   0(R5),C'S'              ADD S TO RECFM
         LA    R5,1(R5)                INCREMENT POINTER
DSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS
         BZ    DSATM
         MVI   0(R5),C'A'              ADD A TO RECFM
         LA    R5,1(R5)                INCREMENT POINTER
DSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS
         BZ    DSATBLK
         MVI   0(R5),C'M'              ADD M TO RECFM
*--------GET BLOCKSIZE
DSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE
*--------GET LRECL
         LH    R1,DS1LRECL             LOAD LRECL
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE
         BR    R14                     RETURN
         TITLE 'CREATION DATE PROCESSING'
***********************************************************************
*                                                                     *
*        CREATION DATE                                                *
*                                                                     *
***********************************************************************
         SPACE 2
$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE
         BAL   R5,DATECONV             CONVERT IT
         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS
         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99
         BR    R14                     RETURN
         TITLE 'EXPIRATION DATE PROCESSING'
***********************************************************************
*                                                                     *
*        EXPIRATION DATE                                              *
*                                                                     *
***********************************************************************
         SPACE 2
$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE
         SRA   R1,8                    SHIFT RIGHT 1 BYTE
         BAL   R5,DATECONV             CONVERT IT
         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS
         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99
         BR    R14                     RETURN
         TITLE 'LAST DATE REFERENCED PROCESSING'
***********************************************************************
*                                                                     *
*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *
*                                                                     *
***********************************************************************
         SPACE 2
$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD
         L     R1,DSATDEC              LOAD DATE LAST REFERENCED
         BAL   R5,DATECONV             CONVERT IT
         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS
         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99
         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON
         BZ    REFRTRN
         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99
REFRTRN  BR    R14                     RETURN
         TITLE 'DATE CONVERSION ROUTINE'
***********************************************************************
*                                                                     *
*        DATE CONVERSION ROUTINE                                      *
*                                                                     *
*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *
*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *
*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *
*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *
*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *
*             CONFORM TO THIS ROUTINE.                                *
*                                                                     *
***********************************************************************
         SPACE 2
DATECONV LA    R1,0(R1)                ZERO HIGH BYTE
         ST    R1,WORK                 STORE IT
         ST    R1,DSATPDEC             SAVE IT AGAIN
         SRA   R1,16                   GET YEAR IN LOW BYTE
         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99
         MH    R1,=H'1000'             MULTIPLY BY 1000
         AH    R1,WORK+2               ADD DAY
         CVD   R1,DSATDEC              CONVERT TO DECIMAL
         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD
*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS
*--------      IF IT THINKS THAT THE DATA SET IS VSAM
*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE
*--------      FIELD TO INSURE THAT IT IS A VALID PACKED
*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE
*--------      ON IT AND RISK AN 0C7.
*--------IF DATE IS INVALID, DISPLAY IT IN HEX.
DATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE
         OI    DSATDEC+7,X'F0'         SET ZONE FIELD
         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS
         BNE   BADDAY
         TM    WORK+3,X'08'            VALIDATE SIGN
         BZ    BADDAY
         TM    WORK+3,X'06'
         BZ    BADDAY
*--------DATE IS VALID DECIMAL FORM
         CP    DAY,=P'366'             TEST MAX
         BH    BADDAY
         CP    DATE,=P'0'              TEST FOR ZERO DATE
         BE    NODATE
         UNPK  JULIAN,DATE             UNPACK DATE
         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99
         MVI   BLANK,C' '              SET BLANK
         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99
         MVO   YEAR2,YEAR              0Y YY YC
         DP    TARGET,=P'4'            0Q QC RC
         CP    REM,=P'0'               TEST REMAINDER
         BE    LEAP
         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29
         BNH   LEAP
         AP    DAY,=P'1'               ADJUST TO LEAP YEAR
LEAP     CP    DAY,=P'1'               TEST MINIMUM DAY
         BL    BADDAY
         CP    DAY,=P'366'             TEST MAXIMUM DAY
         BH    BADDAY
         LA    R6,CALTABLE             LOAD TABLE ADDRESS
         USING CALENDAR,R6             SET BASE ADDRESS
         ZAP   MONTHP,=P'1'            SET MONTH TO 1
LOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH
         BNH   OUT
         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH
         AP    MONTHP,=P'1'            ADD 1 TO MONTH
         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH
         B     LOOP
OUT      UNPK  MO,MONTHP               UNPACK MONTH
         OI    MO+1,X'F0'              SET ZONE
         UNPK  DA,DAY                  UNPACK DAY
         OI    DA+1,X'F0'              SET ZONE
         MVI   SLASH1,C'/'             SET SLASH
         MVI   SLASH2,C'/'             SET SLASH
         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98
         B     DATERTRN
NODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD
         B     DATERTRN
*--------DATE INVALID, DISPLAY IT IN HEX
BADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD
         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC
         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA
         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE
DATERTRN BR    R5                      RETURN
         SPACE
***********************************************************************
*                                                                     *
*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *
*                                                                     *
***********************************************************************
         SPACE
CALTABLE DC    PL2'31'                 JANUARY
         DC    PL2'29'                 FEBRUARY
         DC    PL2'31'                 MARCH
         DC    PL2'30'                 APRIL
         DC    PL2'31'                 MAY
         DC    PL2'30'                 JUNE
         DC    PL2'31'                 JULY
         DC    PL2'31'                 AUGUST
         DC    PL2'30'                 SEPTEMBER
         DC    PL2'31'                 OCTOBER
         DC    PL2'30'                 NOVEMBER
         DC    PL2'31'                 DECEMBER
         SPACE 2
***********************************************************************
*                                                                     *
*        CALENDAR TABLE DSECT                                         *
*                                                                     *
***********************************************************************
         SPACE
CALENDAR DSECT
DAYS     DS    PL2                     DAYS IN MONTH
LEN      EQU   *-DAYS                  LENGTH OF ENTRY
         SPACE 2
DSAT     CSECT
         TITLE 'CCHHR PROCESSING'
***********************************************************************
*                                                                     *
*        CCHHR PROCESSING                                             *
*                                                                     *
***********************************************************************
         SPACE 2
$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE
         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER
         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS
         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE
         BR    R14                     RETURN
         TITLE 'ERROR PROCESSING'
***********************************************************************
*                                                                     *
*        ERRORS                                                       *
*                                                                     *
***********************************************************************
         SPACE 2
*--------ERROR IN PARSE ROUTINE
ERRPARS  MVC   OUTLINE(28),DSATERR1
         B     SETERROR
*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)
NOID     MVC   OUTLINE(32),DSATERR7
         B     RLSA
*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'
TOOLONG  MVC   OUTLINE,BLANKS
         MVC   OUTLINE(44),DSATERR4
RLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA
*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE
SETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR
         BAL   R2,PUTL2                PUT MESSAGE
         LA    R3,16                   SET CONDITION CODE
         B     EXIT2
*--------ERROR IN LOCATE MACRO
LOCERROR DS    0H                                              HD JAN99
         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99
         BNE   LOCERR                                          HD JAN99
         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99
LOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8
         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE
         OI    FLAGS,$NOTPOPS          INDICATE ERROR
PUTMSG   BAL   R2,PUTL                 PRINT IT
         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME
*--------NOT A DIRECT ACCESS DEVICE
NOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED
         BE    RESETLIN
         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE
         B     PUTLINE                 PRINT THE LINE
*--------ERROR IN OBTAIN MACRO
DSNERR   CH    R15,=H'8'               TEST RETURN CODE
         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL
         BE    TESTVALL
         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED
         BE    RESETLIN
         OI    FLAGS,COUNT             COUNT THIS DATA SET
         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94
         BE    PUTLINE                 YES, BRANCH                ABL94
         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94
         BE    PUTLINE                 YES, BRANCH                ABL94
         B     DSNERR1
TESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)
         CLI   0(R1),C'*'
         BE    RESETLIN
         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL
DSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR
         SLA   R15,3                   MULTIPLY RETURN CODE BY 8
         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE
         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99
         B     PUTLINE                 PRINT IT
*--------VOLUME COUNT IS NEGATIVE OR ZERO
BADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE
         MVC   VOLCNT,=H'1'            SET COUNT TO 1
         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR
         B     PUTLINE                 DISPLAY MESSAGE
GDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG
         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG
         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG
         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG
         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL
         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL
         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL
         B     PUTLINE                 DISPLAY MESSAGE              SPG
         TITLE 'DISPLAY LINES'
***********************************************************************
*                                                                     *
*        DISPLAY LINE                                                 *
*                                                                     *
***********************************************************************
         SPACE 2
PUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT
         BE    PUTLHPDS
PUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)
PUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS
         BZ    NOTPDS                  NO
         LA    R1,OUTLINE-1            START OF MESSAGE
         SR    R0,R0                   FOR ICM                  ABL-PDS
         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS
         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS
         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS
         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE
         LTR   R15,R15                 SUCCESSFUL OUTPUT?
         BNZ   RETURN                  NO, **ATTENTION** EXIT
         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS
NOTPDS   DS    0H
PUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY
         BZ    PUTLBACK
         PUT   HARDCPY,OUTLINE         PRINT LINE
PUTLBACK BR    R2                      RETURN
         TITLE 'DCB EXIT ROUTINE'
***********************************************************************
*                                                                     *
*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *
*                                                                     *
***********************************************************************
EXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START
DCBEXIT  LA    R15,80                     DEFAULT LRECL
         LH    R0,82(,R1)                 LRECL
         LTR   R0,R0                      ANY LRECL
         BNZ   *+8                        YES, BRANCH
         STH   R15,82(,R1)                NO, USE THE DEFAULT
         LA    R15,3120                   DEFAULT BLKSIZE
         LH    R0,62(,R1)                 BLKSIZE
         LTR   R0,R0                      ANY BLKSIZE
         BNZ   *+8                        YES, BRANCH
         STH   R15,62(,R1)                NO, USE THE DEFAULT
         BR    R14                         EXIT
         TITLE 'CONSTANT DATA - LITERAL POOL'
***********************************************************************
*                                                                     *
*        CONSTANT DATA                                                *
*                                                                     *
***********************************************************************
         SPACE 2
         LTORG
         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'
NAME     CAMLST NAME,0,,0
NAMECVOL CAMLST NAME,0,0,0
TTRLOC   CAMLST BLOCK,0,0,0
SEARCH   CAMLST SEARCH,0,0,0
SEEK     CAMLST SEEK,0,0,0
DIGITMSK EQU   *-X'F0'
         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING
*                                                  INVALID DEC DIGITS
TRTABLE  EQU   *-X'F0'
         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE
MOVENAME MVC   0(0,R2),0(R4)
MODLPTPB PUTLINE MF=L
ENDPTPB  EQU   *
HARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +
               MACRF=PM,                                               +
               DSORG=PS,                                               +
               RECFM=FB,                                               +
               EXLST=EXITDCB                                  ABL FEB87
         OPEN  (,),MF=L
HARDLEN  EQU   *-HARDDCB
         TITLE 'DEVICE TABLE'
***********************************************************************
*                                                                     *
*        DEVICE TABLE                                                 *
*                                                                     *
*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *
*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *
*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *
*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *
*                                                                     *
***********************************************************************
         SPACE 4
TRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED
         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK
         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM
         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM
         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99
         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL
         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1
         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2
         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK
         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK
         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED
         DC    AL1(030),CL7'3350   '   11 (0B) - 3350
         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK
         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK
         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK
         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK
         TITLE 'DATA SET ORGANIZATION TABLE'
***********************************************************************
*                                                                     *
*        DATA SET ORGANIZATION TABLE                                  *
*                                                                     *
***********************************************************************
         SPACE 2
DSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL
         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL
         DC    X'2000',C'DA'           DIRECT ACCESS
         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION
DSORGEND DC    X'0008',C'AM'           VSAM
         TITLE 'CONSTANT DATA - MESSAGES'
MODLINE  DC    H'204,0'                                           ABL94
BLANKS   DC    CL200' '                                           ABL94
GDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'
GDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG
DSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'
DSATERR2 DC    CL32'                                '
DSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL
DSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'
DSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'
DSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'
DSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '
DSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99
DSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99
RCPT     EQU   17                                              HD JAN99
RSPT     EQU   25                                              HD JAN99
EMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '
EMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'
NOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '
DSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04
         DC    CL32'NOT ON VOLUME                   '  ORC08
         DC    CL32'INVALID WORK AREA POINTER       '  ORC12
         DC    CL32'CCHH NOT IN VTOC                '  ORC16
LOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04
         DC    CL32'NAME NOT FOUND                  '  LRC08
         DC    CL32'INDEX NAME SPECIFIED            '  LRC12
         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16
         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20
         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24
         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28
         DC    CL32'INVALID WORK AREA POINTER       '  LRC32
         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36
         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40
         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44
         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48
         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52
         DC    CL32'PASSWORD NOT CORRECT            '  LRC56
         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60
         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'
***********************************************************************
*                                                                     *
*        PDS DIRECTORY PROCESSING SUBROUTINE                          *
*                                                                     *
*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *
*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *
*                                                                     *
*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *
*        REQUESTED AND A PDS IS ENCOUNTERED.                          *
*                                                                     *
*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *
*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *
*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *
*            PARAMETERS ARE PASSED.                                   *
*                                                                     *
*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *
*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *
*                                                                     *
*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *
*        AN ERROR MESSAGE.                                            *
*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *
*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *
*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *
*                                                                     *
*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *
*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *
*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *
*                                                                     *
***********************************************************************
         EJECT
DSATPDS  $ENTER BASE=R12,                                              +
               SAVE=SAVE2
         EJECT
***********************************************************************
*                                                                     *
*              SET UP TSO CONTROL BLOCKS                              *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R11,4(R13)              LOAD WORK AREA ADDRESS
         USING DSATSAVE,R11            DSECT ADDRESSABILITY
         DROP  R13                     I DON'T WANT IT TO USE 13
         LA    R10,DSATDAPL            LOAD DAPL ADDRESS
         USING DAPL,R10                DAPL ADDRESSABILITY
         SPACE 2
*--------SET UP DAPB'S
         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS
         USING DAPB18,R9               DEFINE BASE REGISTER
         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK
         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE
         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER
         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME
         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME
         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS
         MVI   DA18DPS2,DA18KEEP       DISP=KEEP
         MVI   DA18CTL,DA18PERM
         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME
         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS
         USING DAPB08,R9               DEFINE BASE REGISTER
         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK
         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE
         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS
         ST    R1,DA08PDSN             SAVE IT
         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME
         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING
         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD
         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL
         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME
         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD
         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME
         DROP  R9
*--------GET DSNAME LENGTH
         LA    R1,DSNAME-1             LOAD START ADDR - 1
         LA    R2,44                   LOAD MAXIMUM DSNANME LEN
PDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR
         CLI   0(R15),C' '             TEST FOR BLANK
         BNE   PDSSAVE
         BCT   R2,PDSEND               DECREMENT COUNTER
PDSSAVE  STH   R2,DSNLEN               SAVE LENGTH
*--------SET UP OPEN LIST FORM
         MVC   OPENLIST(OPENLEN),MODLOPEN
         EJECT
***********************************************************************
*                                                                     *
*              ALLOCATE THE DATA SET                                  *
*                                                                     *
***********************************************************************
*--------SET UP ALLOCATE DAPB
SETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS
         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST
         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              LINK TO DAIR
         LTR   R15,R15                 TEST RETURN CODE
         BZ    TESTORG
         C     R15,=F'20'              TEST FOR FILE IN USE
         BNE   ERRDAIR
         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS
         ST    R1,DAPLDAPB             STORE IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              FREE THE FILE
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   ERRDAIR
         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS
         ST    R1,DAPLDAPB             STORE IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              FREE THE FILE
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   ERRDAIR
         SPACE 2
***********************************************************************
*                                                                     *
*              BE SURE DSORG PO                                       *
*                                                                     *
***********************************************************************
TESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED
         BZ    ERRDSORG
*--------INITIALIZE DCB
         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB
         EJECT
***********************************************************************
*                                                                     *
*              OPEN DATA SET                                          *
*                                                                     *
***********************************************************************
         SPACE
*--------OPEN THE DATA SET
         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM
         LA    R2,DSATDCB              LOAD DCB ADDRESS
         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET
         TM    DSATDCB+48,X'10'        SEE IF IT OPENED
         BZ    ERROPEN
         EJECT
***********************************************************************
*                                                                     *
*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *
*                                                                     *
***********************************************************************
         SPACE
         LM    R2,R5,PDSTOTLS          ZERO TOTALS
         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT
NEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK
         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ
         SPACE
         LA    R6,PDSREC               LOAD RECORD ADDRESS
         LA    R2,1(R2)                COUNT BLOCK
         LH    R0,8(R6)                LOAD COUNT
         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD
         LA    R6,10(R6)               BUMP PASE KEY AND COUNT
         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT
         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT
         SPACE
NEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK
         BNP   NEXTBLK
         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES
         BNE   PROCENTR
         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT
         LR    R3,R2                   SET USED = TOTAL
         B     NEXTBLK
PROCENTR LA    R4,1(R4)                COUNT ENTRY
         TM    11(R6),X'80'            TEST FOR ALIAS
         BZ    DIRLEN
         LA    R5,1(R5)                COUNT ALIAS
DIRLEN   SR    R1,R1
         NI    11(R6),X'1F'            ZERO INDICATOR BITS
         IC    R1,11(R6)               LOAD LENGTH
         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES
         LA    R1,12(R1)               ADD FIXED FIELD LENGTH
         AR    R6,R1                   INCREMENT POINTER
         SR    R0,R1                   DECREMENT BYTE COUNT
         B     NEXTENT
*--------END OF DATA
DIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS
         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS
         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN
         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE
*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN
         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92
         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN
         CVD   R3,DSATPDEC             CONVERT BLOCKS USED
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE
         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT
         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE
*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE
         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT
         CVD   R5,DSATPDEC             CONVERT ALIASES
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE
         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT
*--------CLOSE THE DATA SET
CLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM
         LA    R2,DSATDCB              LOAD DCB ADDRESS
         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE
*--------FREE THE DATA SET
FREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS
         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              LINK TO DAIR
         B     PDSRTRN
*--------ERROR IN DYNAMIC ALLOCATION
ERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD
         L     R1,DAPLDAPB             LOAD DAPB ADDRESS
         USING DAPB08,R1               ADDRESSABILITY
         C     R15,=F'12'              TEST FOR RETURN CODE 12
         BNE   CTLGERR
         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE
         BNE   DYNALCER
         MVC   0(16,R2),=CL16' DATA SET IN USE'
         B     PDSRTRN
DYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC
         TR    DSATDEC(4),TRTABLE2
         MVC   0(14,R2),=CL14'RC=000C, DARC='
         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE
         B     PDSRTRN
CTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR
         BNE   OTHERERR
         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC
         TR    DSATDEC(4),TRTABLE2
         MVC   0(14,R2),=CL14'RC=0008, CTRC='
         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE
         B     PDSRTRN
OTHERERR ST    R15,DSATPDEC            STORE RETURN CODE
         UNPK  DSATDEC(5),DSATPDEC+2(3)
         MVC   0(14,R2),=CL14'DAIR ERROR RC='
         MVC   14(4,R2),DSATDEC
         B     PDSRTRN
*--------OPEN ERROR
ERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'
         B     PDSRTRN
*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR
ERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'
         B     PDSRTRN
         EJECT
***********************************************************************
*                                                                     *
*              END OF ROUTINE                                         *
*                                                                     *
***********************************************************************
         SPACE 2
PDSRTRN  $RTRN RC=0
         EJECT
***********************************************************************
*                                                                     *
*              CONSTANTS                                              *
*                                                                     *
***********************************************************************
         SPACE
ENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY
PSDCB    DCB   DDNAME=DSATDDN,                                         +
               DSORG=PS,                                               +
               KEYLEN=8,                                               +
               RECFM=F,                                                +
               BLKSIZE=256,                                            +
               EODAD=DIREOD,                                           +
               MACRF=R
DCBLEN   EQU   *-PSDCB
MODLOPEN OPEN  (,),MF=L
OPENLEN  EQU   *-MODLOPEN
         SPACE 2
TRTABLE2 EQU   *-X'F0'
         DC    C'0123456789ABCDEF'
         SPACE
***********************************************************************
*                                                                     *
*              LITERAL POOL                                           *
*                                                                     *
***********************************************************************
         SPACE
         LTORG
         TITLE 'PARSE CONTROL BLOCKS'
***********************************************************************
*                                                                     *
*        PARSE CONTROL BLOCKS                                         *
*                                                                     *
***********************************************************************
         SPACE 4
DSATPCL  IKJPARM  DSECT=DSATPDL
DSN      IKJPOSIT DSNAME,LIST
SERIAL   IKJKEYWD DEFAULT='SERIAL'
         IKJNAME  'SERIAL'
         IKJNAME  'NOSERIAL'
ALLOC    IKJKEYWD DEFAULT='ALLOC'
         IKJNAME  'ALLOC'
         IKJNAME  'NOALLOC'
SECOND   IKJKEYWD DEFAULT='NOSECONDARY'
         IKJNAME  'SECONDARY'
         IKJNAME  'NOSECONDARY'
DSORG    IKJKEYWD DEFAULT='DSORG'
         IKJNAME  'DSORG'
         IKJNAME  'NODSORG'
DCB      IKJKEYWD DEFAULT='DCB'
         IKJNAME  'DCB'
         IKJNAME  'NODCB'
CRDATE   IKJKEYWD DEFAULT='CRDATE'
         IKJNAME  'CRDATE'
         IKJNAME  'NOCRDATE'
EXDATE   IKJKEYWD DEFAULT='NOEXDATE'
         IKJNAME  'EXDATE'
         IKJNAME  'NOEXDATE'
LASTREF  IKJKEYWD DEFAULT='NOLASTREF'
         IKJNAME  'LASTREF'
         IKJNAME  'NOLASTREF'
TOTALS   IKJKEYWD DEFAULT='TOTALS'
         IKJNAME  'TOTALS'
         IKJNAME  'NOTOTALS'
PRINT    IKJKEYWD
         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99
         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99
HEADER   IKJKEYWD DEFAULT='HEADER'
         IKJNAME  'HEADER'
         IKJNAME  'NOHEADER'
DAONLY   IKJKEYWD DEFAULT='ALL'
         IKJNAME  'ALL'
         IKJNAME  'DAONLY'
GDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'
         IKJNAME  'GDGDATA'
         IKJNAME  'NOGDGDATA'
FULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94
         IKJNAME  'FULL',                                         ABL94X
               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94
         IKJNAME  'NOFULL'                                        ABL94
EXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94
         IKJNAME  'EXTENTS'                                       ABL94
         IKJNAME  'NOEXTENTS'                                     ABL94
SEQNO    IKJKEYWD DEFAULT='NOSEQNO'
         IKJNAME  'SEQNO'
         IKJNAME  'NOSEQNO'
DEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'
         IKJNAME  'DEVTYPE'
         IKJNAME  'NODEVTYPE'
DEVICE   IKJKEYWD DEFAULT='NODEVICE'
         IKJNAME  'DEVICE'
         IKJNAME  'NODEVICE'
CCHHR    IKJKEYWD DEFAULT='NOCCHHR'
         IKJNAME  'CCHHR'
         IKJNAME  'NOCCHHR'
PDS      IKJKEYWD DEFAULT='NOPDS'
         IKJNAME  'PDS'
         IKJNAME  'NOPDS'
GENERIC  IKJKEYWD
         IKJNAME  'GENERIC'
DSONLY   IKJKEYWD
         IKJNAME  'DSONLY'
VOLUME   IKJKEYWD
         IKJNAME  'VOLUME',SUBFLD=VOLSUB
HARDCOPY IKJKEYWD
         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB
RCODE    IKJKEYWD
         IKJNAME  'RC',SUBFLD=RCSUB
VOLSUB   IKJSUBF
VOLSER   IKJIDENT 'VOLUME SERIAL',                                     +
               ASTERISK,                                               +
               MAXLNTH=6,                                              +
               FIRST=ALPHANUM,                                         +
               OTHER=ALPHANUM,                                         +
               PROMPT='VOLUME SERIAL'
DDNSUB   IKJSUBF
DDNAME   IKJIDENT 'DDNAME',                                            +
               MAXLNTH=8,                                              +
               FIRST=ALPHANUM,                                         +
               OTHER=ALPHANUM,                                         +
               PROMPT='DDNAME FOR HARDCOPY OUTPUT'
RCSUB    IKJSUBF
RC       IKJKEYWD
         IKJNAME 'TALLOC'
         IKJNAME 'TUSED'
         IKJNAME 'LALLOC'
         IKJNAME 'LUSED'
         IKJNAME 'TDIFF'
         IKJNAME 'LDIFF'
         IKJNAME 'NUM'
         IKJNAME 'PREVIOUS'
         IKJNAME 'DSORG'
         IKJNAME 'DIRALLOC'
         IKJNAME 'DIRUSED'
         IKJNAME 'ENTRIES'
         IKJNAME 'MEMBERS'
         IKJNAME 'ALIASES'
         IKJENDP
         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'
***********************************************************************
*                                                                     *
*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *
*                                                                     *
***********************************************************************
         SPACE 2
         IKJDAP18
DA18LEN  EQU   *-DAPB18                 DAPB LENGTH
         SPACE
         IKJDAP08
DA08LEN  EQU   *-DAPB08                 DAPB LENGTH
         SPACE
         TITLE 'WORK AREA DSECT'
***********************************************************************
*                                                                     *
*                  WORK AREA DSECT                                    *
*                                                                     *
***********************************************************************
         SPACE 4
DSATDS   DSECT
DSATSAVE DS    18A                     SAVE AREA
SAVE2    DS    18F                     SAVE AREA
DSATDCB1 CAMLST SEARCH,0,0,0
DSATDCB3 CAMLST SEEK,0,0,0
LOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME
LOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL
LOCBYTTR CAMLST BLOCK,0,0,0            LOCATE BY TTR
*                                                              HD JAN99
IOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99
*                                                              HD JAN99
UCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99
*                                                              HD JAN99
DSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE
DSATIOPL DS    0A                      ALIGN TO FULLWORD
         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK
DSATPPL  DS    0A                      ALIGN TO FULLWORD
         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK
DSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA
DSATECB  DS    F                       EVENT CONTROL BLOCK
         SPACE
DSATDAPL DS    0F                      FULLWORD ALIGNMENT
         ORG   *+DAPLLEN
         SPACE
DA18DAPB DS    0F                      FULLWORD ALIGNMENT
         ORG   *+DA18LEN
         SPACE
DA08DAPB DS    0F                      FULLWORD ALIGNMENT
         ORG   *+DA08LEN
CURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK
ENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA
TOTLS    DS    F                       TOTAL TRACKS ALLOCATED
         DS    F                       TOTAL TRACKS FREE
         DS    F                       LAST DATA SET TRACKS ALLOCATED
         DS    F                       LAST DATA SET TRACKS FREE
         DS    F                       NUMBER OF DATA SETS DISPLAYED
PDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED
         DS    F                       NUMBER OF DIR BLOCKS USED
         DS    F                       NUMBER OF DIRECTORY ENTRIES
         DS    F                       NUMBER OF ALIASES
RETURNRG DS    F                       RETURN REGISTER SAVE       ABL94
DECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94
DECNUM   DS    CL12                    RESULT AREA                ABL94
VOLCNT   DS    H                       VOLUME COUNT
TRKPRCYL DS    H                       TRACKS PER CYLINDER
SERFLD   DS    A                       ADDRESS OF SERIAL FIELD
DEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD
DEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD
ALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD
DSORGFLD DS    A                       ADDRESS OF DSORG FIELD
PDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD
DCBFLD   DS    A                       ADDRESS OF DCB FIELD
CRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD
EXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD
LREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD
DSNFLD   DS    A                       ADDRESS OF DSNAME FIELD
ERRFLD   DS    A                       ADDRESS OF ERROR FIELD
CCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD
PDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE
SERPTR   DS    A                       SERIAL TABLE POINTER
LASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS
EXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92
FLAGS    DS    X                       INDICATORS
NOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY
GDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED
COUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET
DSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS
$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET
$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO
$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED
$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL
RESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK
FLAGS2   DS    X                       MORE INDICATORS
$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS
$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES
$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND
$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED
$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND
*                     .... .XXX          NOT USED              HD JAN99
UNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99
         SPACE 1                                               HD JAN99
TOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99
ICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99
ICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99
USRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99
USRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99
*                                                              HD JAN99
*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99
*                                                              HD JAN99
UWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99
UCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99
*                                                              HD JAN99
DSATSER  DS    CL6                     SERIAL
INDEXLEN DS    X                       LENGTH OF INDEX NAME
INDEX    DS    CL44                    INDEX NAME
         DS    0F
DSNLEN   DS    H                       LENGTH OF DSNAME (PDS)
DSNAME   DS    CL44                    DSNAME
         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES
DSATHEDR DS    H,H                     MESSAGE HEADER
OUTLINE  DS    CL200                   OUTPUT LINE                ABL94
         ORG   OUTLINE+4                                          ABL94
OL@XTNT  DS    CL3,CL3                                            ABL94
OL@START DS    CL9,CL2                                            ABL94
OL@STRK  DS    CL5,CL3                                            ABL94
OL@END   DS    CL9,CL2                                            ABL94
OL@ETRK  DS    CL5,CL3                                            ABL94
OL@LNTH  DS    CL5,CL2                                            ABL94
OL@XTYPE DS    CL29                                               ABL94
         ORG   ,                                                  ABL94
HALF     DS    H                       HALFWORD ALIGNED WORK AREA
DSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION
DSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION
DATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION
MO       DS    CL2                     MONTH
SLASH1   DS    C                       SLASH
DA       DS    CL2                     DAY
SLASH2   DS    C                       SLASH
YRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98
JULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98
YR       DS    CL4                     YEAR   0YYYY            HD JUL98
JULDAY   DS    CL3                     JULIAN DAY
BLANK    DS    C                       BLANK
WORK     DS    0F                      DATE                    HD JAN99
DATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99
YEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99
DAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99
MONTHP   DS    PL2                     0M MS
TARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99
         DS    C                       0Q     PART OF QUOTIENT HD JAN99
YEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99
         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99
REM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99
DSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)
DSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)
CATBLOCK DS    0D,265C                 CATALOG BLOCK
CVOL     DS    CL6                     CONTROL VOLUME SERIAL
TTR      DS    XL3                     TTR OF CATALOG BLOCK
FIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK
ENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME
         #CTGPL
WORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA
WORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA
*
*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN
*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG
*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:
*
*                 A                      POINTER TO ENTRY PROCESSED
*                 A                      NOT USED (NEEDED TO ALIGN)
*                 CL256                  CATALOG BLOCK
*
*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS
*        45 BYTE DSNAME ENTRIES.
*                 EACH 45 BYTE ENTRY CONSISTS OF -
*                 A  1 BYTE TYPE CODE
*                 A 44 BYTE DSNAME
*
HARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +
               MACRF=PM,                                               +
               DSORG=PS,                                               +
               RECFM=FB,                                               +
               EXLST=*-*                                      ABL FEB87
HARDOPEN OPEN  (,),MF=L
         SPACE
OPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM
         SPACE
         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ
         SPACE
DSATDCB  DCB   DDNAME=DSATDDN,                                         +
               DSORG=PS,                                               +
               KEYLEN=8,                                               +
               RECFM=F,                                                +
               BLKSIZE=256,                                            +
               EODAD=DIREOD,                                           +
               MACRF=R
         SPACE
PDSREC   DS    264X                    DIRECTORY RECORD
ENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT
SHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L
SHOWCATA DS    CL100          SHOWCAT AREA
         DS    0D
DSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA
         TITLE 'FORMAT 1 DSCB MAP'
         ORG   DSATFMT1-44
         #VTCFMT1
         TITLE 'FORMAT 3 DSCB MAP'
         ORG   DSATFMT3
         #VTCFMT3
         TITLE 'ECT MAP'
         IKJECT
         TITLE 'UPT MAP'
         IKJUPT
         TITLE 'CVT MAP'                                       HD JAN99
         CVT  LIST=YES,DSECT=YES                               HD JAN99
         TITLE 'UCB MAP'                                       HD JAN99
         IEFUCBOB LIST=YES                                     HD JAN99
         END
//*
//LINK   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)
//SYSLMOD  DD  DISP=SHR,DSN=SYS1.CMDLIB(DSAT)
//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))
//*
//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  DSN=SYS2.HELP(DSAT),DISP=SHR
//SYSIN    DD  *
//SYSUT1   DD  *
)F FUNCTION -
               THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION
               INFORMATION FOR DATA SETS ON A DIRECT ACCESS
               DEVICE.

               DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE
               ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION
               INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE
               OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS
               AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL
               BE DISPLAYED.

               THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING
               THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.
               THIS OPTION PERMITS DISPLAYING INFORMATION FOR
               UNCATALOGED DATA SETS.

               THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY
               THE USER WHEN HE ENTERS THE DSAT COMMAND BY
               SPECIFYING KEYWORD OPERANDS.

               THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES
               TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF
               DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED
               VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE
               WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY
               SPECIFYING NOPRINT.  THE HARDCOPY KEYWORD MAY BE USED
               TO DIRECT THE OUTPUT TO A PRE-ALLOCATED DATA SET.

               THE USER MAY CHOOSE WHAT INFORMATION WILL BE
               DISPLAYED BY ENTERING KEYWORDS.

               THE INFORMATION THAT MAY BE DISPLAYED IS:
                1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.
                2. FILE SEQUENCE NUMBER.
                3. DEVICE TYPE CODE FROM CATALOG ENTRY.
                4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).
                5. SECONDARY ALLOCATION (AMOUNT AND UNITS).
                6. DATA SET ORGANIZATION.
                7. DCB (RECFM, BLKSIZE, AND LRECL).
                8. CREATION DATE.
                9. EXPIRATION DATE.
               10. LAST DATE REFERENCED (MVS SU 60).
               11. FULLY QUALIFIED DATA SET NAME.
               12. CCHHR OF THE FORMAT 1 DSCB.
               13. GENERATION DATA GROUP DATA.
               14. PDS DIRECTORY INFORMATION.
)X SYNTAX -
               DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC
                                 DSORG/NODSORG     DCB/NODCB
                                 CRDATE/NOCRDATE   EXDATE/NOEXDATE
                                 LASTREF/NOLASTREF
                                 TOTALS/NOTOTALS   PRINT/NOPRINT
                                 HEADER/NOHEADER   ALL/DAONLY
                                 GDGDATA/NOGDGDATA SEQNO/NOSEQNO
                                 DEVTYPE/NODEVTYPE DEVICE/NODEVICE
                                 CCHHR/NOCCHHR     PDS/NOPDS
                                 SECONDARY/NOSECONDARY
                                 GENERIC           DSONLY
                                 HARDCOPY(DDNAME)  VOLUME(SERIAL)
                                 RC(TALLOC/TUSED/TDIFF/
                                    LALLOC/LUSED/LDIFF/NUM/
                                    PREVIOUS/DSORG/DIRALLOC/
                                    DIRUSED/ENTRIES/ALIASES/
                                    MEMBERS)

               DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX
                           SERIAL   ALLOC   DSORG    DCB    CRDATE
                           NOEXDATE TOTALS  PRINT    HEADER ALL
                           NOPDS    NOSEQNO NODEVICE NODEVTYPE
                           NOGDGDATA    NOLASTREF    NOSECONDARY
                           NOCCHHR      NOEXTENTS    NOFULL
               NOTE: IF HARDCOPY IS SPECIFIED, NOPRINT IS THE DEFAULT

               WITH FULL - SAME AS DEFAULTS ABOVE WITH:
                           EXDATE    PDS     DEVICE
                           GDGDATA   LASTREF SECONDARY
                           CCHHR
                           NODEVTYPE NOSEQNO NOEXTENTS


   SAMPLE OUTPUTS:
 1. DSAT LIB.CNTL
 SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-
 STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNT

 2. DSAT LIB.CNTL LAST
 SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   LAST REF    -D
 STR849   280    36  3  PO   FB   23440    80 05/04/1994 08/03/1994* WS

 3. DSAT LIB.CNTL FULL  (NOTE: OUTPUT BELOW WRAPS TO ABOUT 160 BYTES)
 SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL
 STR849 3380     280    36  3   60  TRK   PO     90      78     465   3
   -DCB ATTRIBUTES- CR. DATE   EX. DATE   LAST REF     C C H H R -DSNAM
   FB   23440    80 05/04/1994 05/06/1994 08/03/1994* 0000000930 WSER07.

 4. DSAT LINK
 SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-
 STR80P    20    18  1 X-PO  U    32760    80 07/19/1994 WSER07.LINK.AL
 STR81Z  1350   634  5 A-PO  U    32760    80 11/13/1993 WSER07.LINK.LO
 MIGRAT                                                  WSER07.LINK.US
         1370   652                                       3 DATA SETS

 5. DSAT LIB.CNTL EXTENTS
 SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-
 STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNTL
     EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE-----------
       0   02CB,0004  10729   02D7,0004  10909     181  DATA
       1   052A,0000  19830   052C,0008  19868      39  DATA
       2   07D6,0000  30090   07D9,000E  30149      60  DATA


)O OPERANDS -
               NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL
                           NAMES. TSO NAMING CONVENTIONS ARE USED.
                           IF A SPECIFIED NAME IS AN INDEX NAME,
                           DATA SETS UNDER THAT LEVEL WILL BE
                           DISPLAYED.  IF NO NAME IS SPECIFIED,
                           THE PREFIX WILL BE USED.  FOR MVT AND
                           SVS, THIS IS THE USERID.  FOR MVS,
                           THE PREFIX MAY BE SPECIFIED WITH THE
                           PROFILE COMMAND.  IF NO NAME IS
                           SPECIFIED AND THE PROFILE SPECIFIES
                           NOPREFIX, THE USERID WILL BE USED.

                           NOTE - IF A KEYWORD IS ENTERED,
                                  NAME-LIST MUST BE SPECIFIED.  IF
                                  NAME-LIST IS OMITTED, IT WILL
                                  NOT DEFAULT TO THE PREFIX, BUT
                                  THE KEYWORD WILL BE INTERPRETED
                                  AS THE NAME-LIST, NOT A KEYWORD.
))SERIAL        LIST VOLUME SERIALS.
))NOSERIAL      DO NOT LIST VOLUME SERIALS.
))SEQNO         LIST FILE SEQUENCE NUMBERS.
))NOSEQNO       DO NOT LIST FILE SEQUENCE NUMBERS.
))DEVTYPE       DISPLAY DEVICE TYPE CODE.
))NODEVTYPE     DO NOT DISPLAY DEVICE TYPE CODE.
))DEVICE        LIST DEVICE NAME (3330, 3350, ETC.).
))NODEVICE      DO NOT LIST DEVICE NAME.
))ALLOC         LIST ALLOCATION INFORMATION (TRACKS ALLOCATED,
                TRACKS FREE, AND EXTENTS).
))NOALLOC       DO NOT LIST ALLOCATION INFORMATION.
))SECONDARY     DISPLAY SECONDARY ALLOCATION INFORMATION.
))NOSECONDARY   DO NOT DISPLAY SECONDARY ALLOCATION INFORMATION.
))DSORG         LIST DATA SET ORGANIZATION.
))NODSORG       DO NOT LIST DATA SET ORGANIZATION.
))PDS           LIST PDS DIRECTORY INFORMATION (BLOCKS ALLOC, USED,
                ENTRIES, AND ALIASES).
))NOPDS         DO NOT LIST PDS DIRECTORY INFORMATION.
))DCB           LIST DCB INFORMATION (RECFM, BLKSIZE, AND LRECL).
))NODCB         DO NOT LIST DCB INFORMATION.
))CRDATE        LIST CREATION DATE.
))NOCRDATE      DO NOT LIST CREATION DATE.
))EXDATE        LIST EXPIRATION DATE.
))NOEXDATE      DO NOT LIST EXPIRATION DATE.
))LASTREF       DISPLAY LAST DATE REFERENCED (MVS SU 60).
))NOLASTREF     DO NOT DISPLAY LAST DATE REFERENCED.
))CCHHR         DISPLAY FORMAT 1 DSCB ADDRESS.
))NOCCHHR       DO NOT DISPLAY CCHHR.
))TOTALS        DISPLAY TOTALS (TRACKS ALLOCATED, TRACKS FREE,
                AND DATA SETS DISPLAYED).
))NOTOTALS      DO NOT DISPLAY TOTALS.
))PRINT         OUTPUT IS TO BE DISPLAYED.
))NOPRINT       OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.
))LIST          OUTPUT IS TO BE DISPLAYED.
))NOLIST        OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.
))HEADER        DISPLAY OUTPUT HEADER LINE.
))NOHEADER      DO NOT DISPLAY HEADER LINE.
))ALL           DISPLAY ALL DATA SET NAMES UNDER AN INDEX LEVEL.
))DAONLY        DISPLAY DATA SETS ON MOUNTED DIRECT ACCESS
                DEVICES.
))GDGDATA       INFORMATION ON GENERATION DATA GROUP INDEXES IS TO
                BE DISPLAYED.
))NOGDGDATA     GENERATION DATA GROUP DATA WILL NOT BE DISPLAYED.
))GENERIC       NAME SPECIFIES A GENERIC KEY.         ** MVS ONLY **
))DSONLY        TREAT NAMES AS DATA SET NAMES, NOT INDEX NAMES.
))VOLUME        SPECIFIES THE VOLUME TO BE SEARCHED FOR THE DATA SET.
))HARDCOPY      SPECIFIES THE DDNAME A PRE-ALLOCATED DATA SET TO
                RECEIVE A COPY OF DSAT OUTPUT.
))FULL          FORMAT ADDITIONAL INFORMATION FOR EACH DATA SET: PDS,
                EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.

                OTHER KEYWORDS (LIKE NOPDS) MAY BE SPECIED AFTER FULL
                TO TURN OFF OPTIONS SELECTIVELY.
))NOFULL        DO NOT FORMAT ADDITIONAL INFORMATION.
))EXTENTS       FORMAT EXTENT INFORMATION FOR EACH DATA SET FOLLOWING
                THE DATA SET DISPLAY LINE.

                THE FOLLOWING FIELDS ARE FORMATTED FOR EACH EXTENT:
                    EXT#       - EXTENT NUMBER (0 TO 122)
                    START/CCHH - STARTING CCHH HEX ADDRESS
                    S/TRK      - STARTING CCHH IN DECIMAL
                    END/CCHH   - ENDING CCHH HEX ADDRESS
                    E/TRK      - ENDING CCHH IN DECIMAL
                    LENGTH     - SIZE OF EXTENT IN TRACKS
                    TYPE       - COMMENTS ON EXTENT USE
                                 CYL     - CYLINDER ALLOCATION
                                 SHR     - SHARING CYLINDER
                                 USR LBL - USER LABELS
                                 IS INDX - ISAM INDEX
                                 IS OVFL - ISAM OVERFLOW
))NOEXTENTS     DO NOT FORMAT EXTENT INFORMATION.
))RC            SPECIFIES HOW THE RETURN CODE IS TO BE SET:
                RC NOT SPECIFIED:  0 - SUCCESSFUL COMPLETION
                                   8 - ONE OR MORE DATA SETS NOT FOUND
                                  16 - UNABLE TO INTERPRET COMMAND
                TALLOC               - TOTAL TRACKS USED
                TUSED                - TOTAL TRACKS USED
                TDIFF                - TOTAL OVERALLOCATION
                                       (TALLOC-TUSED)
                LALLOC               - TRACKS ALLOCATED BY LAST
                                       DATA SET
                LUSED                - TRACKS USED BY LAST DATA SET
                LDIFF                - LAST DATA SET OVERALLOCATION
                                       (LALLOC-LUSED)
                NUM                  - NUMBER OF DATA SETS DISPLAYED
                                       (INCLUDES DATA SETS NOT
                                       FOUND, ETC.)
                PREVIOUS             - ASSUMES THE RETURN CODE OF
                                       THE PREVIOUS COMMAND.
                DSORG                - SETS THE RETURN CODE BASED
                                       ON THE DATA SET ORGANIZATION
                                       OF THE DATA SETS DISPLAYED.
                                       1 - ALL DATA SETS WERE SEQ.
                                       2 - ALL DATA SETS WERE PDS
                                       3 - DATA SETS WERE MIXED PDS
                                           AND SEQUENTIAL
                                       4 - AN ERROR OCCURRED OR A
                                           DATA SET OTHER THAN PDS
                                           OR SEQUENTIAL WAS
                                           PROCESSED
                DIRALLOC - SETS THE RETURN CODE TO THE
                           NUMBER OF DIRECTORY BLOCKS
                           ALLOCATED.
                DIRUSED  - SETS THE RETURN CODE TO THE
                           NUMBER OF DIRECTORY BLOCKS
                           USED.
                ENTRIES  - SETS THE RETURN CODE TO THE
                           NUMBER OF ENTRIES IN THE
                           DIRECTORY (MEMBERS AND
                           ALIASES).
                ALIASES  - SETS THE RETURN CODE TO THE
                           NUMBER OF ALIASES.
                MEMBERS  - SETS THE RETURN CODE TO
                           ENTRIES-ALIASES.
//
