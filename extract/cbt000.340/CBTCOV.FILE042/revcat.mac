         TITLE '  R E V C A T   '
***********************************************************************
*                                                                     *
*         REVCAT - TSO COMMAND FOR EXAMINING AN OS CATALOG            *
*                  (SYSCTLG) ON A 3270 DISPLAY STATION SCREEN         *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY: GREG PRICE, PRYCROFT SIX PTY LTD
*        DATE WRITTEN: DECEMBER 6 1988.
*        DATE UPDATED: DECEMBER 6 1988.
*        ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)
*        LOCAL MACROS USED: DCS. (DEFINE CONSTANTS FOR SCREEN.)
*        DESCRIPTION:
*         THIS TSO COMMAND DISPLAYS A SYSCTLG ON A 3270 TERMINAL
*         IN FULLSCREEN MODE.
*
*         LOG OF CHANGES.
*         DDMMMYY - ????
*
***********************************************************************
         SPACE 2
***********************************************************************
*
*         IF YOU ENCOUNTER ANY PROBLEMS WITH THIS COMMAND THEN DON'T
*         BE SURPRISED.  YOU MAY CHOOSE TO
*          A) FIX IT                   -OR-
*          B) IGNORE IT                -OR-
*          C) SEND DETAILS TO ME SO THAT I CAN
*             A) FIX IT                   -OR-
*             B) IGNORE IT                -OR-
*             C) NOT BE SURPRISED.
*
*      GREG PRICE OF PRYCROFT SIX PTY LTD
*         (FORMERLY OF THE STATE ELECTRICITY COMMISSION OF VICTORIA)
*         C/- SYSTEMS CONTROL PROGRAMMING PTY LTD (MELBOURNE BRANCH),
*         220 ALBERT ROAD,
*         SOUTH MELBOURNE,
*         VICTORIA, 3205.
*         AUSTRALIA.               PHONE (03) 695 9777
*
***********************************************************************
         SPACE 2
***********************************************************************
*
*         SYNTAX - REVCAT DSNAME {VOLUME(..) UNIT(..)} {QUICK}
*
*        ("REVCAT 'SYSCTLG.VVOLSER'" IS SUFFICIENT.)
*
***********************************************************************
         EJECT
***********************************************************************
*
*         PROGRAM FUNCTION KEYS
*
*         SOME OF THE SUBCOMMANDS DO NOT HAVE TO BE TYPED IN
*         IF THE TERMINAL IS EQUIPPED WITH PROGRAM FUNCTION KEYS.
*
*         HERE ARE THE MEANINGS ASSIGNED TO EACH PF KEY.
*
*         ----------------------------------------------------
*         I                I                I                I
*         I      PF1       I      PF2       I      PF3       I
*         I                I                I                I
*         I      TOP       I     BOTTOM     I      END       I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I      PF4       I      PF5       I      PF6       I
*         I                I                I                I
*         I      EXIT      I                I                I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I      PF7       I      PF8       I      PF9       I
*         I                I                I                I
*         I      UP        I      DOWN      I                I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I      PF10      I      PF11      I      PF12      I
*         I                I                I                I
*         I                I                I                I
*         I                I                I                I
*         ----------------------------------------------------
*
***********************************************************************
         SPACE 2
***********************************************************************
*
*         IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE
*         CATALOG MUST BE READ TWICE, ONCE TO APPEND A
*         TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING
*         ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING
*         THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,
*         OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,
*         PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER
*         AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A
*         FULLY QUALIFIED NAME.
*
***********************************************************************
         EJECT
         MACRO
&NAME    DCS
.**********************************************************************
.*                                                                    *
.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *
.*                                                                    *
.*        WRITTEN BY BILL GODFREY                                     *
.*        PLANNING RESEARCH CORPORATION                               *
.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *
.*        DATE WRITTEN: JANUARY 8 1981.                               *
.*        DATE UPDATED: MARCH 18 1982. (ROW AND COL IN PARENS)        *
.*        GP@P6          JULY 25 1986. (EXTENDED ATTRS, MEDIUM INTENS)*
.*        GP@P6     SEPTEMBER 23 1986. (ESCAPES, WRITES, RA, MFA, MF) *
.*        GP@P6        AUGUST 24 1987. (EAU, WSF, RB, RM, RMA)        *
.*                                                                    *
.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *
.*                                                                    *
.*        SAMPLE                                                      *
.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *
.*                                                                    *
.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *
.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *
.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *
.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *
.*           SO YOU DON'T HAVE TO KNOW THE HEX CODES FOR THEM,        *
.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *
.*           (A SET OF RESERVED NAMES) SO YOU DON'T HAVE TO KNOW      *
.*           THE HEX CODES FOR THEM.                                  *
.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *
.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *
.*                                                                    *
.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *
.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *
.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *
.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *
.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *
.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *
.*                                                                    *
.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *
.*        ANY COMBINATION OF THE FOLLOWING.                           *
.*                                                                    *
.*        .  AN ESCAPE CHARACTER.                                     *
.*           VALID ESCAPE CHARACTERS ARE:                             *
.*           ESC - ESCAPE                                             *
.*           GE  - GRAPHIC ESCAPE                                     *
.*        .  A WRITE COMMAND.                                         *
.*           VALID WRITE COMMANDS ARE:                                *
.*           WR  - WRITE (WRT)                                        *
.*           EW  - ERASE/WRITE                                        *
.*           EWA - ERASE/WRITE ALTERNATE                              *
.*           EAU - ERASE ALL UNPROTECTED                              *
.*           WSF - WRITE STRUCTURED FIELD                             *
.*        .  A READ COMMAND.                                          *
.*           VALID READ COMMANDS ARE:                                 *
.*           RB  - READ BUFFER                                        *
.*           RM  - READ MODIFIED                                      *
.*           RMA - READ MODIFIED ALL                                  *
.*        .  AN ORDER.                                                *
.*           VALID ORDERS ARE:                                        *
.*           SBA, SF, RA (RTA), IC, PT, EUA, SA, SFE, MF (MFA).       *
.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *
.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *
.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *
.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *
.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *
.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *
.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *
.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *
.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *
.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *
.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *
.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *
.*           THE ORIGINAL VERSION OF THIS MACRO.                      *
.*        .  AN ATTRIBUTE BYTE.                                       *
.*           VALID ATTRIBUTE BYTES ARE:                               *
.*           UNPLO  - UNPROTECTED NORMAL INTENSITY                    *
.*           UNPMD  - UNPROTECTED MEDIUM INTENSITY                    *
.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *
.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *
.*           PROLO  - PROTECTED NORMAL INTENSITY                      *
.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *
.*           PROMD  - PROTECTED MEDIUM INTENSITY                      *
.*           PROMDS - PROTECTED MEDIUM INTENSITY AUTO-SKIP            *
.*           PROHI  - PROTECTED HIGH INTENSITY                        *
.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *
.*        .  AN EXTENDED ATTRIBUTE TYPE.                              *
.*           VALID ATTRIBUTE TYPES ARE:                               *
.*           FIELD, HILITE, COLOUR AND PGMSYM.                        *
.*        .  AN EXTENDED HIGHLIGHTING SPECIFICATION.                  *
.*           VALID HIGHLIGHTINGS ARE:                                 *
.*           NORMAL, BLINK, REVERSE AND USCORE.                       *
.*        .  AN EXTENDED COLOUR SPECIFICATION.                        *
.*           VALID COLOURS ARE:                                       *
.*           BLUE, RED, PINK, GREEN, TURQ, YELLOW, WHITE AND NORMAL.  *
.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *
.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *
.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *
.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *
.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *
.*                                                                    *
.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *
.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *
.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *
.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *
.*                                                                    *
.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *
.*        SCREEN SIZE OF 24 ROWS BY 80 COLUMNS. FOR SCREENS           *
.*        OF OTHER DIMENSIONS (43 BY 80, 12 BY 40) THE MACRO          *
.*        NEEDS ONLY A FEW CHANGES.                                   *
.*                                                                    *
.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *
.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *
.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *
.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *
.*                                                                    *
.*        PROGRAMMING NOTE:                                           *
.*        SA,NORMAL,NORMAL     WILL DO IN THREE BYTES WHAT            *
.*        SA,HILITE,NORMAL,SA,COLOUR,NORMAL,SA,PGMSYM,NORMAL          *
.*                             WILL DO IN NINE BYTES.                 *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &R,&C,&P,&Q
         LCLA  &AN,&AS,&AL
         LCLB  &B,&NUMERIC,&INTEGER
         LCLC  &T(64)
         LCLC  &N,&ROW,&COL
         LCLC  &CS,&STRING
&T(1)    SETC  '40'
&T(2)    SETC  'C1'
&T(3)    SETC  'C2'
&T(4)    SETC  'C3'
&T(5)    SETC  'C4'
&T(6)    SETC  'C5'
&T(7)    SETC  'C6'
&T(8)    SETC  'C7'
&T(9)    SETC  'C8'
&T(10)   SETC  'C9'
&T(11)   SETC  '4A'
&T(12)   SETC  '4B'
&T(13)   SETC  '4C'
&T(14)   SETC  '4D'
&T(15)   SETC  '4E'
&T(16)   SETC  '4F'
.*
&T(17)   SETC  '50'
&T(18)   SETC  'D1'
&T(19)   SETC  'D2'
&T(20)   SETC  'D3'
&T(21)   SETC  'D4'
&T(22)   SETC  'D5'
&T(23)   SETC  'D6'
&T(24)   SETC  'D7'
&T(25)   SETC  'D8'
&T(26)   SETC  'D9'
&T(27)   SETC  '5A'
&T(28)   SETC  '5B'
&T(29)   SETC  '5C'
&T(30)   SETC  '5D'
&T(31)   SETC  '5E'
&T(32)   SETC  '5F'
.*
&T(33)   SETC  '60'
&T(34)   SETC  '61'
&T(35)   SETC  'E2'
&T(36)   SETC  'E3'
&T(37)   SETC  'E4'
&T(38)   SETC  'E5'
&T(39)   SETC  'E6'
&T(40)   SETC  'E7'
&T(41)   SETC  'E8'
&T(42)   SETC  'E9'
&T(43)   SETC  '6A'
&T(44)   SETC  '6B'
&T(45)   SETC  '6C'
&T(46)   SETC  '6D'
&T(47)   SETC  '6E'
&T(48)   SETC  '6F'
.*
&T(49)   SETC  'F0'
&T(50)   SETC  'F1'
&T(51)   SETC  'F2'
&T(52)   SETC  'F3'
&T(53)   SETC  'F4'
&T(54)   SETC  'F5'
&T(55)   SETC  'F6'
&T(56)   SETC  'F7'
&T(57)   SETC  'F8'
&T(58)   SETC  'F9'
&T(59)   SETC  '7A'
&T(60)   SETC  '7B'
&T(61)   SETC  '7C'
&T(62)   SETC  '7D'
&T(63)   SETC  '7E'
&T(64)   SETC  '7F'
.*
&N       SETC  '&NAME'
&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS
&AS      SETA  0
&B       SETB  0 FALSE
.EACH    AIF   (&AN EQ 0).EPILOG
&AS      SETA  &AS+1
&CS      SETC  '&AS'
&AL      SETA  K'&SYSLIST(&AS)
         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT
         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR
&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')
         AIF   (&NUMERIC AND &INTEGER).ROWCOL
         AIF   (NOT &B).ROWCOLX
         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'
&B       SETB  0 FALSE
.ROWCOLX ANOP
&STRING  SETC  '&SYSLIST(&AS)'
.*             ESCAPES
         AIF   ('&STRING' EQ 'ESC').ESC
         AIF   ('&STRING' EQ 'GE').GE
.*             WRITES
         AIF   ('&STRING' EQ 'WR').WR
         AIF   ('&STRING' EQ 'WRT').WR
         AIF   ('&STRING' EQ 'EW').EW
         AIF   ('&STRING' EQ 'EWA').EWA
         AIF   ('&STRING' EQ 'EAU').EAU
         AIF   ('&STRING' EQ 'WSF').WSF
.*             READS
         AIF   ('&STRING' EQ 'RB').RB
         AIF   ('&STRING' EQ 'RM').RM
         AIF   ('&STRING' EQ 'RMA').RMA
.*             ORDERS
         AIF   ('&STRING' EQ 'SBA').SBA
         AIF   ('&STRING' EQ 'SF').SF
         AIF   ('&STRING' EQ 'RA').RA
         AIF   ('&STRING' EQ 'RTA').RA
         AIF   ('&STRING' EQ 'IC').IC
         AIF   ('&STRING' EQ 'PT').PT
         AIF   ('&STRING' EQ 'EUA').EUA
         AIF   ('&STRING' EQ 'SA').SA
         AIF   ('&STRING' EQ 'MF').MF
         AIF   ('&STRING' EQ 'MFA').MF
.*             ATTRIBUTES
         AIF   ('&STRING' EQ 'UNPLO').UNPLO
         AIF   ('&STRING' EQ 'UNPMD').UNPMD
         AIF   ('&STRING' EQ 'UNPHI').UNPHI
         AIF   ('&STRING' EQ 'UNPNP').UNPNP
         AIF   ('&STRING' EQ 'PROLO').PROLO
         AIF   ('&STRING' EQ 'PROLOS').PROLOS
         AIF   ('&STRING' EQ 'PROMD').PROMD
         AIF   ('&STRING' EQ 'PROMDS').PROMDS
         AIF   ('&STRING' EQ 'PROHI').PROHI
         AIF   ('&STRING' EQ 'PROHIS').PROHIS
.*             EXTENDED ATTRIBUTE TYPES
         AIF   ('&STRING' EQ 'FIELD').FIELD
         AIF   ('&STRING' EQ 'HILITE').HILITE
         AIF   ('&STRING' EQ 'COLOUR').COLOUR
         AIF   ('&STRING' EQ 'PGMSYM').PGMSYM
.*             HIGHLIGHTING
         AIF   ('&STRING' EQ 'NORMAL').NORMAL
         AIF   ('&STRING' EQ 'BLINK').BLINK
         AIF   ('&STRING' EQ 'REVERSE').REVERSE
         AIF   ('&STRING' EQ 'USCORE').USCORE
.*             COLOURS
         AIF   ('&STRING' EQ 'BLUE').BLUE
         AIF   ('&STRING' EQ 'RED').RED
         AIF   ('&STRING' EQ 'PINK').PINK
         AIF   ('&STRING' EQ 'GREEN').GREEN
         AIF   ('&STRING' EQ 'TURQ').TURQ
         AIF   ('&STRING' EQ 'YELLOW').YELLOW
         AIF   ('&STRING' EQ 'WHITE').WHITE
.*             CONSTANTS
.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS
.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.
.DC      ANOP
&N       DC    &STRING
         AGO   .NEXT
.ESC     ANOP
&N       DC    X'27'               ESCAPE
         AGO   .NEXT
.GE      ANOP
&N       DC    X'08'               GRAPHIC ESCAPE
         AGO   .NEXT
.WR      ANOP
&N       DC    X'F1'               WRITE
         AGO   .NEXT
.EW      ANOP
&N       DC    X'F5'               ERASE/WRITE
         AGO   .NEXT
.EWA     ANOP
&N       DC    X'7E'               ERASE/WRITE ALTERNATE
         AGO   .NEXT
.EAU     ANOP
&N       DC    X'6F'               ERASE ALL UNPROTECTED
         AGO   .NEXT
.WSF     ANOP
&N       DC    X'F3'               WRITE STRUCTURED FIELD
         AGO   .NEXT
.RB      ANOP
&N       DC    X'F2'               READ BUFFER
         AGO   .NEXT
.RM      ANOP
&N       DC    X'F6'               READ MODIFIED
         AGO   .NEXT
.RMA     ANOP
&N       DC    X'6E'               READ MODIFIED ALL
         AGO   .NEXT
.SBA     ANOP
&N       DC    X'11'               SET BUFFER ADDRESS
         AGO   .NEXT
.SF      ANOP
&N       DC    X'1D'               START FIELD
         AGO   .NEXT
.RA      ANOP
&N       DC    X'3C'               REPEAT TO ADDRESS
         AGO   .NEXT
.IC      ANOP
&N       DC    X'13'               INSERT CURSOR
         AGO   .NEXT
.PT      ANOP
&N       DC    X'05'               PROGRAM TAB
         AGO   .NEXT
.EUA     ANOP
&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS
         AGO   .NEXT
.SA      ANOP
&N       DC    X'28'               SET ATTRIBUTE
         AGO   .NEXT
.SFE     ANOP
&N       DC    X'29'               START FIELD EXTENDED
         AGO   .NEXT
.MF      ANOP
&N       DC    X'2C'               MODIFY FIELD ATTRIBUTES
         AGO   .NEXT
.UNPLO   ANOP
&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY
         AGO   .NEXT
.UNPMD   ANOP
&N       DC    X'C4'               UNPROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.UNPHI   ANOP
&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY
         AGO   .NEXT
.UNPNP   ANOP
&N       DC    X'4C'               UNPROTECTED NO-DISPLAY
         AGO   .NEXT
.PROLO   ANOP
&N       DC    X'60'               PROTECTED NORMAL INTENSITY
         AGO   .NEXT
.PROLOS  ANOP
&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP
         AGO   .NEXT
.PROMD   ANOP
&N       DC    X'E4'               PROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.PROMDS  ANOP
&N       DC    X'F4'               PROTECTED MEDIUM INTENSITY SKIP
         AGO   .NEXT
.PROHI   ANOP
&N       DC    X'E8'               PROTECTED HIGH INTENSITY
         AGO   .NEXT
.PROHIS  ANOP
&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP
         AGO   .NEXT
.FIELD   ANOP
&N       DC    X'C0'               FIELD ATTRIBUTE
         AGO   .NEXT
.HILITE  ANOP
&N       DC    X'41'               EXTENDED HIGHLIGHTING
         AGO   .NEXT
.COLOUR  ANOP
&N       DC    X'42'               EXTENDED COLOUR
         AGO   .NEXT
.PGMSYM  ANOP
&N       DC    X'43'               PROGRAMMED SYMBOLS
         AGO   .NEXT
.NORMAL  ANOP
&N       DC    X'00'               CHARACTER ATTRIBUTE RESET (DEFAULT)
         AGO   .NEXT
.BLINK   ANOP
&N       DC    X'F1'               BLINK HIGHLIGHTING
         AGO   .NEXT
.REVERSE ANOP
&N       DC    X'F2'               REVERSE VIDEO HIGHLIGHTING
         AGO   .NEXT
.USCORE  ANOP
&N       DC    X'F4'               UNDERSCORE HIGHLIGHTING
         AGO   .NEXT
.BLUE    ANOP
&N       DC    X'F1'               BLUE COLOUR
         AGO   .NEXT
.RED     ANOP
&N       DC    X'F2'               RED COLOUR
         AGO   .NEXT
.PINK    ANOP
&N       DC    X'F3'               PINK COLOUR
         AGO   .NEXT
.GREEN   ANOP
&N       DC    X'F4'               GREEN COLOUR
         AGO   .NEXT
.TURQ    ANOP
&N       DC    X'F5'               TURQUOISE COLOUR
         AGO   .NEXT
.YELLOW  ANOP
&N       DC    X'F6'               YELLOW COLOUR
         AGO   .NEXT
.WHITE   ANOP
&N       DC    X'F7'               WHITE COLOUR
         AGO   .NEXT
.**********************************************************************
.PAIR    ANOP
         AIF   (N'&SYSLIST(&AS) NE 2).PERR1
&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&R       SETA  &SYSLIST(&AS,1)
&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&C       SETA  &SYSLIST(&AS,2)
         AIF   (&R LT 1 OR &R GT 24).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'
         MEXIT
.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'
         MEXIT
.**********************************************************************
.ROWCOL  ANOP
         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED
&R       SETA  &SYSLIST(&AS)
&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED
         AGO   .NEXTR
.COL     ANOP
&C       SETA  &SYSLIST(&AS)
&B       SETB  0 FALSE             RESET SWITCH
         AIF   (&R LT 1 OR &R GT 24).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 24'
         AGO   .NEXT
.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'
.NEXT    ANOP
&N       SETC  ''                  TURN OFF NAME
.NEXTR   ANOP
&AN      SETA  &AN-1
         AGO   .EACH
.EPILOG  ANOP
         MEND
         SPACE 3
         MACRO
&NAME    MSG   &MSG
&NAME    DC    AL2(&NAME.L-2)
         DC    C&MSG
&NAME.L  EQU   *-&NAME
         MEND
         SPACE 3
         GBLB  &MVS
&MVS     SETB  1                   1 - MVS      0 - SVS,MVT
         GBLC  &SYSSPLV
&SYSSPLV SETC  '1'                 1 - ANY MVS  2 - MVS/XA ONLY
         TITLE '  R E V C A T   -   P H A S E   1  '
REVCAT   START
         USING *,R10,R11,R12
CSECT1   EQU   *
         B     @PROLOG-*(,R15)
         DC    AL1(27),CL11'REVCATALOG '
         DC    CL16' &SYSDATE &SYSTIME '
         DC    CL32'7-COLOUR SYSCTLG REVIEWER  '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
@PROLOG  STM   R14,R12,12(R13)
         LR    R10,R15             BASE
         LA    R15,1
         LA    R11,4095(R15,R10)   BASE
         LA    R12,4095(R15,R11)   BASE
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1
         USING @DATA,R9
         ST    R13,4(,R1)          CHAIN SAVEAREA
         ST    R1,8(,R13)          CHAIN SAVEAREA
         LR    R13,R1              NEW SAVEAREA
         SPACE 1
         MVC   SIZE,@SIZE
         ST    R2,CPPLPTR
         MVI   STATUS,0
         MVI   STATUS,0
         MVI   MODE,0
         MVI   SACHAR,X'28'        ASSUME IBM 3270 SET ATTRIBUTE
         LA    R0,SACHAR           POINT TO SET ATTIBUTE CHAR
         ST    R0,CBPRM4           SAVE IN REVCMPBF PLIST
         OI    CBPRM4,X'80'        DENOTE LAST PARAMETER IN LIST
         XC    LINKAREA(8),LINKAREA
         SLR   R15,R15
         STH   R15,RC              SET RC = 0
         ST    R15,TTR             SET Z = 0 (IN TTRZ)
         XC    MSG(2),MSG
         XC    MYANS,MYANS         IN CASE IKJRLSA BEFORE PARSE
         SPACE
************************************************************
*                                                          *
*         SET UP IOPL FOR PUTLINE                          *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         AIF   (NOT &MVS).SKIP1
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
.SKIP1   ANOP
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
************************************************************
*                                                          *
*         CHECK TERMINAL SCREEN SIZE                       *
*                                                          *
************************************************************
         SPACE
         LA    R1,GOTTERM          PRIMARY SCREEN SIZE AREA
         ST    R1,TERMPRM          SAVE IT IN PARAMETER LIST
         LA    R1,GOTTERM+2        ALTERNATE SCREEN SIZE AREA
         ST    R1,TERMALT          SAVE IT IN PARAMETER LIST
         LA    R1,GOTTERM+4        SCREEN ATTRIBUTES AREA
         ST    R1,TERMATTR         SAVE IT IN PARAMETER LIST
         GTTERM MF=(E,TERMPRM)     GET TERMINAL CHARACTERISTICS
         GTSIZE
         LTR   R0,R0               IS THIS A VDU?
         BZ    ERRTERM             NO
         CH    R1,=H'80'           80 COLUMNS?
         BE    TERMOK              YES, REVCAT CAN HANDLE IT
         STSIZE SIZE=80,LINE=24    NO, SO CHANGE TO IT
         LA    R1,ERASEWRT         PERFORM A VTAM ERASE/WRITE
         LA    R0,L'ERASEWRT       GET INTO 24 BY 80 MODE
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           CHANGE TO PRIMARY MODE
         OI    STATUS,SETSIZED     FLAG FOR STSIZE ON EXIT
         LA    R0,24               FORCE 24-LINE MODE
TERMOK   ST    R0,SCRNLNES         SAVE PARAMETER 2 FOR REVCMPBF
         SPACE
************************************************************
*                                                          *
*         SET UP PPL FOR PARSE                             *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=A(REVPCL)
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*         CALL THE PARSE SERVICE ROUTINE                   *
*                                                          *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP2
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
.SKIP2   ANOP
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BZ    PARSEOK
         LA    R1,MSG01
         LA    R0,L'MSG01
         BAL   R14,PUTMSG
         LA    R15,12
         B     EXIT
PARSEOK  EQU   *
         SPACE
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
************************************************************
*                                                          *
*         FILL IN ALL INFO FROM PARSE                      *
*                                                          *
************************************************************
         SPACE
         MVC   QUICKV,QUICKW
         LA    R6,DSN
         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?
         BO    OKDSN               YES - BRANCH
         LA    R1,MSG05            NO - JUST MEMBER NAME
         LA    R0,L'MSG05
         BAL   R14,PUTMSG
         B     EXITA12
         SPACE
OKDSN    EQU   *
         MVC   UDSNAME(4),4(R6)    COPY LENGTH AND QUOTE FLAGS
         LA    R15,UDSNAME+4
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         L     R14,0(,R6)          POINT TO DSN VALUE
         LH    R1,4(,R6)           GET LENGTH
         STH   R1,UDSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
         TM    14(R6),X'80'        MEMBER SPECIFIED?
         BO    CVOLERR             YES - CAN'T BE A CATALOG
         SPACE
         MVC   $PASSWRD,=CL8' '
         TM    22(R6),X'80'        PASSWORD SPECIFIED?
         BZ    PARSEPX             NO - BRANCH
         LH    R1,20(,R6)          GET LENGTH OF PSWD
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,16(,R6)         GET ADDRESS OF PSWD
         B     *+10
         MVC   $PASSWRD(0),0(R14)  MOVE PSWD
         EX    R1,*-6
PARSEPX  EQU   *
         MVC   $VOLSER,=CL8' '     (6 BYTES)
         MVC   $UNIT,=CL8' '
         LA    R6,VOL
         TM    6(R6),X'80'         VOLUME SPECIFIED?
         BZ    PARSEVX             NO, LEAVE VOL AND UNIT BLANK
         L     R14,0(,R6)          POINT TO VOL VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   $VOLSER(0),0(R14)   <<< EXECUTED >>>
         EX    R1,*-6              MOVE VOLUME
         MVC   $UNIT,=CL8'SYSALLDA'
         LA    R6,UNIT
         TM    6(R6),X'80'         UNIT SPECIFIED?
         BZ    PARSEUX             NO, BRANCH
         MVC   $UNIT,=CL8' '       ERASE 'SYSALLDA'
         L     R14,0(,R6)          POINT TO UNITNAME VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   $UNIT(0),0(R14)     <<< EXECUTED >>>
         EX    R1,*-6              MOVE UNIT NAME
PARSEUX  EQU   *
PARSEVX  EQU   *
         DROP  R3                  IKJPARMD
         IKJRLSA MYANS
         XC    MYANS,MYANS
         SPACE
************************************************************
*                                                          *
*         QUALIFY THE DSNAME IF NECESSARY                  *
*                                                          *
************************************************************
         SPACE
         LA    R15,$DSNAME+2
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         SLR   R1,R1
         STH   R1,$DSNAME          ZERO DSNAME LENGTH
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BO    NOPREF              YES, SKIP PREFIXING
         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX
         L     R14,CPPLUPT         POINT TO UPT
         USING UPT,R14
         IC    R1,UPTPREFL         GET LENGTH OF PREFIX
         LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),UPTPREFX
         DROP  R14                 UPT
.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID
         L     R14,CPPLPSCB        POINT TO PSCB
         USING PSCB,R14
         IC    R1,PSCBUSRL         GET LENGTH OF USERID
         LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),PSCBUSER
         DROP  R14                 PSCB
.SKIPU   ANOP
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
         LA    R15,0(R1,R15)       POINT PAST USERID
         MVI   0(R15),C'.'         APPEND PERIOD
         LA    R15,1(,R15)         POINT PAST PERIOD
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         STH   R1,$DSNAME          STORE LENGTH OF USERID PLUS 1
NOPREF   EQU   *
         LH    R1,UDSNAME          GET LENGTH
         LR    R0,R1
         AH    R0,$DSNAME          ADD LENGTH OF PREFIX OR ZERO
         STH   R0,$DSNAME          SET COMBINED LENGTH
         LA    R14,UDSNAME+4       POINT TO DSN VALUE
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
         TM    UDSNAME+2,X'40'     IS DSNAME QUOTED?
         BO    DEFX                YES - SKIP DEFAULT SERVICE
         CLI   $VOLSER,C' '        IS VOLUME SPECIFIED?
         BNE   DEFX                YES - SKIP DEFAULT SERVICE
         CLI   QUICKV+1,1          IS QUICK SPECIFIED?
         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         LA    R14,MYDFPB
         ST    R14,IOPLIOPB
         USING DFPB,R14
         XC    0(20,R14),0(R14)
         LA    R0,$DSNAME
         ST    R0,DFPBDSN
         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI
         MVC   DFPBPSCB,CPPLPSCB
*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME
         DROP  R14,R15             DFPB, IOPL
         SPACE
         LR    R1,R15              POINT TO IOPL
         AIF   (NOT &MVS).SKIP4
         L     R15,16              CVTPTR
         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   EHDEFLNK               THEN DO LINK, NOT CALL
         L     R15,736(,R15)       CVTEHDEF
         BALR  R14,R15             CALL IKJEHDEF
         B     EHDEFEXT            SKIP AROUND LINK
EHDEFLNK EQU   *
.SKIP4   ANOP
         LINK  EP=IKJDFLT,SF=(E,LINKAREA)   *KNOWN ALIAS IN MVS AND F4*
EHDEFEXT EQU   *
         SPACE
         B     DEFCODE(R15)
DEFCODE  B     DEF00               SUCCESS
         B     EXITA12              MSG ALREADY ISSUED
         B     DEF08               INVALID NAME GT 44
         B     EXITA12              MSG ALREADY ISUED
         B     DEF16               NOT IN CATALOG
         B     DEF20               NOT IN CATALOG
         B     DEF24               IMPOSSIBLE
         B     DEF28               COMMAND SYSTEM ERROR
         B     DEF32               IMPOSSIBLE
         B     DEF36               ?
DEF08    EQU   *
DEF16    EQU   *
         B     DEF24
DEF20    EQU   *
LOCERR   EQU   *
         MVC   MSG(L'MSG02),MSG02
         LA    R15,MSG+L'MSG02
         LA    R14,$DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         EX    R1,LOCERR02
         LA    R15,1(R1,R15)
         MVC   0(L'MSG02A,R15),MSG02A
         LA    R0,L'MSG02+L'MSG02A+1(,R1)
LOCERRX  LA    R1,MSG
         BAL   R14,PUTMSG
         B     EXITA12
LOCERR02 MVC   MSG+L'MSG02(0),2(R14) <<< EXECUTED >>>
DEF24    EQU   *
DEF28    EQU   *
DEF32    EQU   *
DEF36    EQU   *
         LA    R1,MSG03
         LA    R0,L'MSG03
         BAL   R14,PUTMSG
         B     EXITA12
         SPACE
DEF00    EQU   *
DEFX     EQU   *
         SPACE
************************************************************
*                                                          *
*         CHECK FOR SYSCTLG                                *
*                                                          *
************************************************************
         SPACE
         CLC   $DSNAME(2),=H'15'   DSN LONGER THAN 'SYSCTLG.VXXXXXX'?
         BH    SYSCTLGX            YES
         CLC   $DSNAME(2),=H'10'   DSN SHORTER THAN 'SYSCTLG.VX'?
         BL    SYSCTLGX            YES
         CLC   $DSNAME+2(9),=C'SYSCTLG.V'
         BNE   SYSCTLGX            PROBABLY A COPYCAT CVOL COPY
         MVI   $DSNAME+1,7         SUPPLY NEW DATA SET NAME LENGTH
         MVC   $VOLSER,$DSNAME+11  SUPPLY VOLUME SERIAL FROM DSN
         MVC   $DSNAME+9(8),=CL8' ' ERASE '.VXXXXXX'
         CLI   $UNIT,C' '          ANY UNIT SPECIFIED?
         BNE   SYSCTLGX            YES, LEAVE IT
         MVC   $UNIT,=CL8'SYSALLDA' NO, SUPPLY IT
SYSCTLGX EQU   *
         SPACE
************************************************************
*                                                          *
*         ALLOCATE THE DATASET                             *
*                                                          *
************************************************************
         SPACE
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R15,MYDAPB
         ST    R15,DAPLDAPB
         DROP  R1                  DAPL
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,$UNIT
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '     NEVER ALLOCATE WITH MEMBER
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         LA    R1,MYDAPL
         SPACE
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BZ    OKDAIR
         BAL   R14,DAIRFAIL
         B     EXITA12
OKDAIR   EQU   *
         OI    STATUS,STALLOC      TELL CLEANUP TO FREE IT
         LA    R15,MYDAPB
         MVC   $DDNAME,DA08DDN
         DROP  R15                 DAPB08
         SPACE
************************************************************
*                                                          *
*         GET THE UCB ADDRESS AND VOLUME SERIAL            *
*                                                          *
************************************************************
         SPACE
         XC    ATTNLST(ATTNLEN),ATTNLST   ZERO ATTN LIST
*        STAX  ATTN,REPLACE=NO,USADDR=STATUS,MF=(E,ATTNLST)
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,12(,R1)          TIOT
         LA    R1,24(,R1)          TIOENTRY
DDLOOP   CLI   0(R1),0             END OF TIOT?
         BE    EXITA12             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R1),$DDNAME     DOES DDNAME MATCH?
         BE    DDFOUND
         SLR   R15,R15
         IC    R15,0(,R1)
         LA    R1,0(R15,R1)
         B     DDLOOP
DDFOUND  L     R15,16(,R1)         TIOEFSRT-1
         MVC   $VOLSER,28(R15)     UCBVOLI
         ST    R15,$UCBAD          OKAY FOR 24 BIT ADDRESSING MODE
         SPACE
************************************************************
*                                                          *
*         OBTAIN THE DSCB FROM THE VTOC                    *
*                                                          *
************************************************************
         SPACE
OBTDSCB  LA    R1,OBTAINW
         MVC   0(OBTAINL,R1),OBTAIN
         LA    R0,$DSNAME+2        DSN FOR OBTAIN
         ST    R0,4(,R1)
         LA    R0,$VOLSER          VOLUME FOR OBTAIN
         ST    R0,8(,R1)
         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN
         ST    R0,12(,R1)
         OBTAIN (1)
         LTR   R15,R15             WAS OBTAIN SUCCESSFUL?
         BZ    OKDSCB              YES, BRANCH
         SPACE
*               OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT
*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY
*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL
*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW
*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.
         SPACE
         TM    STATUS,STLOCAT      HAS LOCATE BEEN TRIED ALREADY?
         BZ    OBTALIAS            NO, GO TRY IT
OBTERR   LA    R1,MSG09            UNABLE TO OBTAIN DSCB
         LA    R0,L'MSG09
         BAL   R14,PUTMSG
         B     EXITA12
CVOLERR  LH    R1,$DSNAME          NOT AN OS CATALOG
         LR    R14,R1
         MVC   MSG(44),$DSNAME+2
         LA    R15,MSG(R1)
         MVC   0(L'MSG16,R15),MSG16
         MVC   L'MSG16(6,R15),$VOLSER
         LA    R0,L'MSG16+6(,R14)
         B     LOCERRX
OBTALIAS OI    STATUS,STLOCAT      TRIP THE SWITCH
         LA    R1,LOCATEW
         MVC   0(LOCATEL,R1),LOCATE
         LA    R0,$DSNAME+2        DSNAME FOR LOCATE
         ST    R0,4(,R1)
         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE
         ST    R0,12(,R1)
         LOCATE (1)
         LTR   R15,R15             WAS LOCATE SUCCESSFUL?
         BNZ   OBTERR              NO, ISSUE MESSAGE
         LA    R0,44               YES, GET MAX DATA SET NAME LENGTH
         LA    R1,$DSNAME+45       POINT TO LAST DSN CHARACTER
DSNLENLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NEW$DSNL            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,DSNLENLP         DECREMENT LENGTH AND TEST PREVIOUS
NEW$DSNL STH   R0,$DSNAME          SAVE REAL DATA SET NAME LENGTH
         B     OBTDSCB             GO OBTAIN AGAIN
         SPACE
OKDSCB   NI    STATUS,255-STLOCAT  TURN OFF LOCATE SWITCH
         SPACE
************************************************************
*                                                          *
*         INVOKE OS CATALOG FORMAT AND DISPLAY ROUTINE     *
*                                                          *
************************************************************
         SPACE
         CLC   MYDSCB-44+98(3),=X'0000FF' CHECK DS1LSTAR
         BNE   CVOLERR             BRANCH IF NOT OS/CATALOG
         BAL   R14,QUERYTRM        DETERMINE INITIAL DISPLAY MODE
         L     R15,=V(REVCVOL)         AND DISPLAY ENTRY LIST
         BALR  R14,R15             CALL REVCVOL
         B     EXITA##             EXIT REVCAT
         SPACE
************************************************************
*                                                          *
*         ISSUE READ PARTITION TO TSO TERMINAL             *
*                                                          *
************************************************************
         SPACE
QUERYTRM L     R1,16               POINT TO CVT
         CLI   116(R1),X'12'       OSIV/F4?  (SURELY NOT OS/VS2 SVS!?)
         BNE   QRYORNOT            NO
         MVI   SACHAR,X'0E'        YES, LOAD 668X SET ATTRIBUTE CODE
QRYORNOT TM    GOTTERM+7,X'01'     IS THE QUERY BIT ON?
         BZR   R14                 NO, CAN'T DO A QUERY
         ST    R14,DOUBLE          YES, SAVE RETURN ADDRESS
         LA    R1,RESETAID         RESET THE TERMINAL AID
         LA    R0,L'RESETAID             BEFORE ISSUING THE
         ICM   R1,8,=X'03'               READ PARTITION
         TPUT  (1),(0),R           TPUT FULLSCR,WAIT,NOHOLD
         MVC   CATINPUT(TPGL),TPG  FULLSCREEN I/O IMMINENT SO DO QUERY
         TPG   QUERY,L'QUERY,NOEDIT,WAIT,MF=(E,CATINPUT)
         OI    MODE,DIDQRY         REMEMBER THAT A QUERY WAS ISSUED
         LA    R1,CATINPUT         TEMPORARY TGET BUFFER FOR RESPONSE
         LA    R0,512                        FROM READ PARTITION
         ICM   R1,8,=X'81'         FLAGS FOR TGET ASIS,WAIT
         TGET  (1),(0),R           TGET ASIS,WAIT
         CLI   CATINPUT,X'88'      QUERY RESPONSE AID?
         BNE   QUERYOFF            NO, TURN OFF QUERY BIT COPY
         SLR   R0,R0               CLEAR FOR INSERTS
         LA    R15,CATINPUT+1      POINT PAST THE AID
         BCT   R1,QUERYPRS         DECREMENT ONE FOR AID
         B     QUERYOFF            JUST IN CASE
QUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?
         BNE   QUERYOFF            NO, UNEXPECTED DATA
         CLI   3(R15),X'86'        QUERY REPLY COLOUR ID?
         BE    QUERYCLR            YES
         CLI   3(R15),X'87'        QUERY REPLY HIGHLIGHTING ID?
         BE    QUERYHLT            YES
         CLI   3(R15),X'85'        QUERY REPLY SYMBOL SETS ID?
         BE    QUERYSYM            YES
NXTSBFLD ICM   R0,3,0(R15)         LOAD SUB-FIELD LENGTH
         SR    R1,R0               SUBTRACT FROM TGET LENGTH
         BZ    QUERYEND            END OF QUERY REPLY DATA STREAM
         AR    R15,R0              POINT TO NEXT SUB-FIELD
         B     QUERYPRS            EXAMINE IT
QUERYCLR CLI   5(R15),8            AT LEAST EIGHT COLOUR PAIRS?
         BL    NXTSBFLD            NO, NO 7-COLOUR SUPPORT
         CLC   8(14,R15),=CL14'11223344556677' YES, ALL 7 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    MODE,COLOR          YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYHLT CLI   4(R15),4            AT LEAST FOUR HIGHLIGHTING PAIRS?
         BL    NXTSBFLD            NO, NO EXTENDED HIGHLIGHTING SUPPORT
         CLC   6(7,R15),=CL7'0112244'  YES, ALL 3 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    MODE,HILITE         YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYSYM OI    MODE,SYMSET         SYMBOL SETS SUB-FIELD RETURNED
         TM    4(R15),X'80'        GRAPHIC ESCAPE SUPPORTED?
         BZ    NXTSBFLD            NO
         OI    MODE,GEOK           YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYEND TM    MODE,SYMSET         WAS THERE A SYMBOL SETS SUB-FIELD?
         BZ    HAVSACHR            NO, DON'T CHANGE SA CODE
         MVI   SACHAR,X'28'        YES, MUST BE IBM 3270 EVEN ON F4
HAVSACHR TM    MODE,COLOR+HILITE   7-COLOUR AND HIGHLIGHTING OK?
         BO    QUERYX              YES, USE 7-COLOUR MODE
QUERYOFF NI    GOTTERM+7,X'FE'     ENSURE COPY OF QUERY BIT IS OFF
QUERYX   L     R14,DOUBLE          RESTORE RETURN ADDRESS
         BR    R14
         SPACE
************************************************************
*                                                          *
*         RETURN FROM PHASE 2 TO TERMINATE                 *
*                                                          *
************************************************************
         SPACE
EXITA12  LA    R15,12
EXITA##  STH   R15,RC
EXITARC  TM    STATUS,STALLOC      FREE REQUIRED?
         BZ    NOFREE
         LA    R1,MYDAPL
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         BAL   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-STALLOC  UNALLOCATED
         DROP  R15                 DAPB18
NOFREE   EQU   *
         SPACE
         IKJRLSA MYANS
         SPACE
         CLI   RC+1,0              IS RC ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  EQU   *
         TM    STATUS,FSMODE       STILL IN FULL SCREEN MODE?
         BZ    FSMODEX             NO
         STLINENO LINE=1,MODE=OFF  YES, TURN IT OFF
         NI    STATUS,255-FSMODE   FULL SCREEN MODE NOW OFF
FSMODEX  EQU   *
         SPACE
         CLI   SYNADSW,X'FF'       SYNAD EXIT TAKEN?
         BNE   SYNADX              NO
         LA    R1,SYNADMSG
         LA    R0,L'SYNADMSG
         BAL   R14,PUTMSG
SYNADX   EQU   *
         SPACE
         LH    R15,RC
         B     EXIT
         SPACE
************************************************************
*                                                          *
*         EXIT TO CALLER                                   *
*                                                          *
************************************************************
         SPACE
ERRTERM  LA    R1,MSGTERM
         LA    R0,L'MSGTERM
         BAL   R14,PUTMSG
         B     EXITA12
         SPACE
EXIT     LR    R2,R15
*        STAX  ,                  DELETE ATTENTION EXIT
         TM    STATUS,SETSIZED    NEED TO RESTORE SCREEN SIZE?
         BZ    NOSTSIZE           NO
         MVC   GOTTERM+7(1),GOTTERM+2
         XC    GOTTERM(3),GOTTERM
         XC    GOTTERM+4(3),GOTTERM+4
         STSIZE SIZELOC=GOTTERM,LINELOC=GOTTERM+4
NOSTSIZE LR    R1,R13
         L     R0,SIZE
         L     R13,4(,R13)
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
************************************************************
*                                                          *
*         CALL IKJDAIR SERVICE ROUTINE                     *
*                                                          *
************************************************************
          SPACE
CALLDAIR ST    R14,DAIRREGS
         AIF   (NOT &MVS).SKIP6
         L     R15,16
         TM    732(R15),X'80'     CVTDAIR
         BNO   DAIRLINK
         L     R15,732(,R15)
         BALR  R14,R15
         B     DAIRFINI
DAIRLINK EQU   *
.SKIP6   ANOP
         LINK  EP=IKJDAIR,SF=(E,LINKAREA)
DAIRFINI L     R14,DAIRREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*         DYNAMIC ALLOCATION FAILURE ROUTINE               *
*                                                          *
************************************************************
         SPACE
DAIRFAIL ST    R14,MYDFREGS
         LA    R1,MYDFPARM
*        USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,4(,R1)          DFRCP
         LA    R15,MYDAPL
         ST    R15,0(,R1)          DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,8(,R1)          DFJEFF02
         LA    R15,1               DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,12(,R1)         DFIDP
         MVC   16(4,R1),CPPLPTR    DFCPPLP
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
*        DROP  R1                  DFDSECTD
         L     R15,MYDFRC
         L     R14,MYDFREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*         PUTMSG ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         EX    R14,PUTMSGMV        MOVE MESSAGE IN
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
PUTMSGMV MVC   0(0,R15),0(R1)      <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         ATTENTION EXIT                                   *
*                                                          *
************************************************************
         SPACE
         USING ATTN,R15        ESTABLISH ADDRESSABILITY
ATTN     STM   R14,R12,12(R13) SAVE REGISTERS
         L     R3,8(,R1)       GET INTERRUPT FLAG ADDRESS
         OI    0(R3),FLAGI     SET INTERRUPT REQUEST FLAG
         STFSMODE ON           RESTORE FULL SCREEN MODE
         LM    R14,R12,12(R13) RESTORE REGISTERS
         BR    R14             RETURN
         DROP  R15             ATTN
         EJECT
************************************************************
*                                                          *
*         PHASE 1 CONSTANTS                                *
*                                                          *
************************************************************
         SPACE
         LTORG
         SPACE
OBTAIN   CAMLST SEARCH,2,3,4
OBTAINL  EQU   *-OBTAIN
         SPACE
LOCATE   CAMLST NAME,2,,4
LOCATEL  EQU   *-LOCATE
         SPACE
TPG      TPG   QUERY,L'QUERY,NOEDIT,WAIT,MF=L
TPGL     EQU   *-TPG
         SPACE
ERASEWRT DC    X'27F540'          ESCAPE + ERASE/WRITE + WCC
RESETAID DC    X'27F1C3'          ESCAPE + WRITE + WCC
QUERY    DC    X'F3000501FF02'    WRITE STRUCTURED FIELD + QUERY
         SPACE
MSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'
MSG02    DC    C'IKJ58503I DATA SET '
MSG02A   DC    C' NOT IN CATALOG'
MSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'
MSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+
               IED'
MSG09    DC    C'UNABLE TO OBTAIN DSCB FOR DATA SET'
MSG14    DC    C'FILENAME '
MSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS          '
MSG14B   DC    C' IS NOT CURRENTLY ALLOCATED               '
MSG14C   DC    C' NOT ALLOCATED TO A DASD DATA SET         '
MSG16    DC    C' IS NOT AN OS CATALOG (CVOL) '
*SGRECFM DC    C'RECORD FORMAT U NOT SUPPORTED'
MSGTERM  DC    C'TERMINAL IS NOT A 3270 DISPLAY' WITH 24 LINES
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
*                   DC    (((*-C-1)/N)*N+N+C-*)X'00'
*                 WHERE N IS BOUNDARY (I.E. 256, 4096, ...)
*                 AND C IS THE BEGINNING OF THE CSECT.
         DC    (((*-CSECT1-1)/256)*256+256+CSECT1-*)X'00'
         DS    0D
         SPACE 2
         PRINT NOGEN
REVPCL   IKJPARM
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
UNITKW   IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=UNITSF
VOLKW    IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSF
QUICKW   IKJKEYWD
         IKJNAME 'QUICK'
UNITSF   IKJSUBF
UNIT     IKJIDENT 'UNIT NAME',                                         +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +
               PROMPT='UNIT NAME'
VOLSF    IKJSUBF
VOL      IKJIDENT 'VOLUME SERIAL',                                     +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +
               PROMPT='VOLUME SERIAL'
         IKJENDP
         PRINT GEN
         TITLE '  R E V C A T   -   D S E C T S  '
************************************************************
*                                                          *
*         DSECTS                                           *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
SIZE     DS    F                   SIZE OF THIS AREA
CPPLPTR  DS    F
LINKAREA DS    2F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256            USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   ADDRESS OF IKJPUTL
MYSTPB   DS    0F                  5 WORDS USED BY STACK DELETE
MYDAPL   DS    5F
MYDAPB   DS    21F
MYDFPB   DS    5F
UDSNAME  DS    2H,CL44
$DSNAME  DS    H,CL44
$PASSWRD DS    CL8
$DDNAML  DS    H                   THESE TWO
$DDNAME  DS    CL8                  TOGETHER
$UCBAD   DS    F
$VOLSER  DS    CL6
$UNIT    DS    CL8
LOCATEW  DS    0F
OBTAINW  DS    4F
LOCBUF   DS    0D                  USES NEXT 265 BYTES
MYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR
MSG      DS    CL128
STATUS   DS    X                   STATUS FLAGS
STALLOC  EQU   X'80'
STOPEN   EQU   X'40'
STLOCAT  EQU   X'20'
SETSIZED EQU   X'10'               RESTORE SCREEN SIZE ON EXIT
FLAGI    EQU   X'08'               INTERRUPT OCCURRED
FSMODE   EQU   X'04'               FULL-SCREEN MODE IS ACTIVE
MODE     DS    X                   DISPLAY FORMAT FLAGS
DIDQRY   EQU   X'10'               TURNED ON IF QUERY WAS DONE
COLOR    EQU   X'08'               7-COLOUR DEFINITELY SUPPORTED
HILITE   EQU   X'04'               EXTENDED HILITING SURE IS OK
SYMSET   EQU   X'02'               SYMBOL SETS SUB-FIELD RETURNED
GEOK     EQU   X'01'               GRAPHIC ESCAPE DEFINITELY OK
RC       DS    H
MYDFPARM DS    5F                  USED BY DAIRFAIL
MYDFREGS DS    F                   USED BY DAIRFAIL
MYDFRC   DS    F                   USED BY DAIRFAIL
MYJEFF02 DS    F                   USED BY DAIRFAIL
MYDFID   DS    H                   USED BY DAIRFAIL
QUICKV   DS    H
DOUBLE   DS    D
CATINPUT DS    CL256               SYSCTLG BLOCK & TGET BUFFER
GOTTERM  DS    D                   RESULTS FROM GTTERM MACRO
TERMPRM  DS    F                   PARAMETER LIST FOR GTTERM
TERMALT  DS    F
TERMATTR DS    F
DAIRREGS DS    F
OPEND    DS    0F
CLOSED   DS    F
DYNEXLST DS    2F
DYNDCBW  DS    0D,XL(CATDCBL)
DYNDECBW DS    0F,XL(DYNDECBL)
GMVCW    DS    0F,XL(GMVCL)
TTR      DS    F
SACHAR   DS    X                   ORDER CODE FOR SET ATTRIBUTE
BUFFSIZE DS    F                   LENGTH OF TPUT BUFFER
SCRNLNES DS    F                   NUMBER OF SCREEN LINES
CBPRM1   DS    F                   POINTER TO BUFFSIZE
CBPRM2   DS    F                   POINTER TO SCRNLNES
CBPRM3   DS    F                   POINTER TO BUFFER (UPDATED IN PLACE)
CBPRM4   DS    F                   POINTER TO SACHAR
ATTNLST  STAX  ATTN,MF=L
ATTNLEN  EQU   *-ATTNLST
SYNADSW  DS    H
SYNADMSG DS    CL78
DEVDATA  DS    2F
JFCB     DS    0F,CL176
@DATAEND DS    0D
@DATAL   EQU   *-@DATA
         TITLE '  R E V C V O L  '
************************************************************
*                                                          *
*         OS CATALOG FORMAT AND DISPLAY ROUTINE            *
*                                                          *
************************************************************
         SPACE
REVCVOL  CSECT                     DISPLAY CVOL CONTENTS
         B     @CVOL-*(,R15)
         DC    AL1(7),CL7'REVCVOL'
@CVOL    STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R15,1
         LA    R11,4095(R15,R10)
         USING REVCVOL,R10,R11
         LR    R4,R13              SAVE SAVE AREA POINTER
         LA    R2,CATGMLIM         POINT TO BOUNDS OF GETMAIN LENGTH
         LA    R3,DOUBLE           POINT TO RESULTS AREA
         MVC   GMVCW(GMVCL),GMVC
         GETMAIN VC,LA=(R2),A=(R3),MF=(E,GMVCW)
         LTR   R15,R15             DID GETMAIN WORK?
         BZ    USEDYN              YES, PROCEED
         LA    R1,DIRRDMSG         NO, POINT TO ERROR MESSAGE
         LA    R0,L'DIRRDMSG-1     GET ERROR MESSAGE LENGTH
         TPUT  (1),(0),R           DISPLAY MESSAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,20              SET RETURN CODE
         BR    R14                 RETURN
USEDYN   L     R12,DOUBLE+4        GET LENGTH OF GETMAINED AREA
         L     R13,DOUBLE          GET ADDRESS OF GETMAINED AREA
         USING @DYNAREA,R13
         ST    R13,8(,R4)
         ST    R4,4(,R13)          CHAIN SAVE AREAS
         STM   R12,R13,FREEMRGS    SAVE FREEMAIN VALUES
         MVC   DYNDCBW(CATDCBL),CATDCB
         MVC   DYNDECBW(DYNDECBL),DYNDECB
         LA    R0,1
         STH   R0,LEVEL            INITIALIZE QUALIFIER LEVEL
         LA    R0,X'100'           LOAD FIRST TTRZ
         ST    R0,CVOLTTRS         SAVE THE FIRST TTR
         LA    R0,BUFFSIZE         INITIALIZE REVCMPBF PARAMETER LIST
         ST    R0,CBPRM1           ADDRESS OF BUFFER LENGTH VARIABLE
         LA    R0,SCRNLNES
         ST    R0,CBPRM2           ADDRESS OF LINES-ON-SCREEN VARIABLE
         AR    R12,R13             GET ADDRESS ABOVE GETMAINED AREA
         SH    R12,=H'60'          TAKE A PUNT
         ST    R12,MAXADDR         SAVE HIGHEST USEABLE ADDRESS
         LA    R0,CATSCRN          TARGET ADDRESS
         ST    R0,CBPRM3           ADDRESS OF TPUT BUFFER FOR REVCMPBF
         LA    R1,STMONOLN         TARGET SIZE
         LA    R14,STATMONO        SOURCE ADDRESS
         LA    R15,STMONOLN        SOURCE SIZE (NULL PAD BYTE)
         TM    GOTTERM+7,X'01'     IS THIS A COLOUR SCREEN?
         BZ    INITPANL            NO, LOAD MONOCHROME HEADER
         LA    R0,DYNSCRN          TARGET ADDRESS
         ST    R0,CBPRM3           ADDRESS OF TPUT BUFFER FOR REVCMPBF
         LA    R1,STCOLRLN         TARGET SIZE
         LA    R14,STATCOLR        SOURCE ADDRESS
         LA    R15,STCOLRLN        SOURCE SIZE (NULL PAD BYTE)
INITPANL MVCL  R0,R14              INITIALIZE SCREEN HEADINGS
         CLC   $DSNAME+2(8),=CL8'SYSCTLG '
         BNE   CATNAMOK
         MVC   $DSNAME+9(2),=C'.V'
         MVC   $DSNAME+11(6),$VOLSER
         MVI   $DSNAME+1,15        SHOW CVOL ID IN DSNAME
CATNAMOK LA    R7,DYNDCBW
         USING IHADCB,R7
         MVC   DCBDDNAM,$DDNAME    LOAD FILE NAME INTO DCB
         DROP  R7                  R7 POINTS TO DYNDCBW UNTIL CLOSED
         MVI   OPEND,X'80'         OPEN SYSCTLG DATA SET
         LH    R1,$DSNAME          GET DATA SET NAME LENGTH
         EX    R1,GTCATNAM         LOAD DSN INTO HEADING
         OPEN  ((R7),INPUT),MF=(E,OPEND)
         XC    SELENTRY,SELENTRY   ZERO ENTRY NAME TO SEARCH FOR
REDOENTS SLR   R8,R8               INITIALIZE ENTRY COUNTER
         LA    R3,CATENTS-1024
         LA    R3,1024(,R3)        POINT TO FIRST ENTRY
         ST    R3,TOPIDXAD         IN CASE OF SORT FOR CONCATENATED MEM
         SLR   R6,R6               CLEAR WORK REGISTER
         ST    R6,BLKREADS         INITIALIZE BLOCK READ COUNTER
READBLK  READ  DYNDECBW,SF,(R7),CATINPUT,'S',MF=E
         CHECK DYNDECBW            READ A SYSCTLG BLOCK
         CLI   SYNADSW,X'FF'       WAS THE SYNAD EXIT TAKEN?
         BE    FREENDGO            YES, TERMINATE REVCAT
         LA    R2,1
         A     R2,BLKREADS         INCREMENT BLOCK READ COUNTER
         ST    R2,BLKREADS         SAVE NEW BLOCK READ COUNTER VALUE
         LH    R2,CATINPUT         GET BLOCK USED-BYTE-COUNT
         LTR   R2,R2               VALIDATE COUNTER
         BNP   NULLBLOK            PROBABLY POINTING TO EMPTY BLOCK
*        BCTR  R2,0
*        BCTR  R2,0                SUBTRACT 2 FOR COUNTER HALFWORD
         LA    R4,CATINPUT+2       POINT TO FIRST ENTRY IN BLOCK
NXTENTRY CLC   LASTNAME(12),0(R4)  END OF INDEX LEVEL?
         BE    EOCATLVL            YES
         CLC   LASTNAME(8),0(R4)   NO, INDEX LINK ENTRY?
         BNE   MORINBLK            NO
         MVC   TTR(3),8(R4)        YES, GET ADDRESS OF NEXT BLOCK
         POINT (R7),TTR            POINT TO IT
         B     READBLK
LOADENTY MVC   14(0,R3),12(R4)     <<< EXECUTED >>>
MORINBLK LA    R8,1(,R8)           INCREMENT ENTRY COUNTER
         MVC   0(12,R3),0(R4)      SAVE NODE NAME, TTR AND COUNT
         LA    R5,14               IN CORE ENTRY IS FOURTEEN BYTES LONG
         SLR   R1,R1
         IC    R1,11(,R4)          LOAD THE USERDATA HALFWORD COUNT
         SLA   R1,1                CONVERT TO A BYTE COUNT
         BZ    DONENTRY            NO USER SO ENTRY NOW LOADED
         BCTR  R1,0                LESS ONE FOR EXECUTE
         EX    R1,LOADENTY         LOAD IN THE "USERDATA"
         LA    R5,3(R1,R5)         GET TOTAL IN CORE ENTRY LENGTH
         STH   R5,15(R1,R3)        SAVE IN LAST HLAFWORD OF ENTRY
DONENTRY STH   R5,12(,R3)          SAVE IN SEVENTH HALFWORD OF ENTRY
         AR    R3,R5               POINT TO NEXT IN-CORE TABLE ENTRY
         TM    STATUS,FLAGI        ATTENTION INTERRUPT?
         BO    READATTN            YES, TERMINATE READ
         C     R3,MAXADDR          IS IN-CORE TABLE ALMOST EXHAUSTED?
         BNH   MAKENTRY            NO, CREATE THIS ENTRY
         MVC   CATHDG(55),STATHDG  YES, LOAD ERROR MESSAGE INTO HEADING
         MVC   CATHDG(L'DIRRDMSG),DIRRDMSG
         B     EOCATLVL            CORE FULL SO STOP READING
READATTN MVC   CATHDG(55),STATHDG  LOAD ERROR MESSAGE INTO HEADING
         MVC   CATHDG(9),INRPTMSG
         B     EOCATLVL            ATTENTION HIT SO STOP READING
MAKENTRY IC    R5,11(,R4)          GET USER DATA HALFWORD COUNT
         SLL   R5,1                CONVERT TO NUMBER OF USER BYTES
         LA    R5,12(,R5)          GET TOTAL BYTES USED BY ENTRY
*        SR    R2,R5               UPDATE BYTES-TO-DO-IN-THIS-BLOCK
*        BNP   READBLK             IF ZERO GET ANOTHER BLOCK
         LA    R4,0(R5,R4)         POINT TO NEXT ENTRY NAME
         B     NXTENTRY
EOCATLVL CVD   R8,DOUBLE           GET NUMBER OF ENTRIES IN LEVEL
         LA    R1,ENTRYCNT+5       POINT TO LAST DIGIT
         MVC   ENTRYCNT,ENTRYMSK   LOAD EDIT MASK
         EDMK  ENTRYCNT,DOUBLE+5   REPORT UP TO 99999 ENTRIES CORRECTLY
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         MVI   0(R1),C' '          TIDY UP HEADING
         MVC   0(14,R3),LASTNAME   DENOTE END OF ENTRY LIST
         MVC   LEVELNUM,LEVEL+1    DISPLAY QUALIFIER LEVEL NUMBER
         TR    LEVELNUM,CVOLHEX    MAKE DISPLAYABLE CHARACTER
         ST    R3,LASTADDR         SAVE ADDRESS OF LAST ENTRY
         MVC   PUTCURSR,PRIMINIT   INITIALIZE CURSOR POSITIONER
         TM    STATUS,FSMODE       HAVE WE BEEN HERE BEFORE?
         BO    FINDENTY            YES, IN FULL SCREEN MODE
         STFSMODE ON,INITIAL=YES   NO, GET INTO FULL SCREEN MODE
         OI    STATUS,FSMODE       FLAG FULL SCREEN MODE
FINDENTY LA    R3,CATENTS-1024
         LA    R3,1024(,R3)        POINT TO FIRST ENTRY
         OC    SELENTRY,SELENTRY   NON-ZERO ENTRY NAME TO LOCATE?
         BZ    THISENTY            NO, GO TO TOP
TRYENTRY CLC   SELENTRY,0(R3)      UP TO REQUIRED ENTRY?
         BE    THISENTY            YES, FOUND IT
         BL    PREVENTY            NO, PASSED IT SO BACK-UP ONE
NEXTENTY AH    R3,12(,R3)          NOT YET, POINT TO NEXT ENTRY
         B     TRYENTRY
PREVENTY LA    R2,CATENTS-1024
         LA    R2,1024(,R2)        GET FIRST ENTRY ADDRESS
         CR    R2,R3               AT FIRST ENTRY?
         BE    THISENTY            YES, CAN'T GO BACK ONE
         LR    R2,R3               NO, POINT TO THIS ENTRY
         BCTR  R2,0                POINT TO LAST HALFWORD
         BCTR  R2,0                         OF PREVIOUS ENTRY
         SH    R3,0(,R2)           POINT TO PREVIOUS ENTRY
THISENTY L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         LA    R2,MONOENTS         ASSUME MONOCHROME SCREEN IMAGE
         TM    GOTTERM+7,X'01'     REALLY IN COLOUR MODE?
         BZ    *+8                 NO, RIGHT FIRST TIME
         LA    R2,COLRENTS         YES, GET SAME ADDRESS FOR COLOUR
         ST    R3,TOPIDXAD         SAVE TOP ENTRY ENTRY ADDRESS
         XC    SELENTRY,SELENTRY   CLEAR ENTRY NAME IN READINESS
LODQALNM CLC   LASTNAME(12),0(R3)
         BE    EOIDXLST            CATER FOR END OF ENTRY LIST
         MVC   0(8,R2),ENTATLST
         TM    GOTTERM+7,X'01'     QUERY BIT ON?
         BZ    ENTATTRS            NO
         LA    R2,3(,R2)           YES, COUNT EXTRA ATTRIBUTE BYTES
ENTATTRS LA    R2,5(,R2)           POINT TO ENTRY DETAILS AREA
         MVC   0(8,R2),0(R3)       LOAD QUALIFIER NAME
         TR    0(8,R2),CATXLATE    MAKE SCREEN BEHAVE PROPERLY
         MVI   8(R2),C' '
         MVC   9(68,R2),8(R2)      BLANK REST OF LINE
         UNPK  10(7,R2),8(4,R3)    SHOW TTR IN HEX
         TR    10(6,R2),CVOLHEX-C'0'
         MVI   16(R2),C' '         ERASE RUBBISH
         UNPK  18(3,R2),11(2,R3)   SHOW HALFWORD COUNT IN HEX
         TR    18(2,R2),CVOLHEX-C'0'
         MVI   20(R2),C' '         ERASE RUBBISH
         CLI   11(R3),0            INDEX POINTER ENTRY?
         BZ    ENTLODED            YES, NOTHING ELSE TO FORMAT
         CLI   11(R3),1            VOLUME CONTROL BLOCK POINTER?
         BE    VCBPENTY            YES, FORMAT IT
         CLI   11(R3),2            GENERATION INDEX POINTER ENTRY?
         BE    GIPENTRY            YES, FORMAT IT
         CLI   11(R3),3            INDEX CONTROL ENTRY?
         BE    ICENTRY             YES, FORMAT IT
         CLI   11(R3),4            ALIAS NAME ENTRY?
         BE    ALNENTRY            YES, FORMAT IT
         CLI   11(R3),5            VOLUME INDEX CONTROL ENTRY?
         BE    VICENTRY            YES, FORMAT IT
         CLI   11(R3),6            DATA SET POINTER ENTRY?
         BH    DSPENTRY            YES, FORMAT IT
         UNPK  22(13,R2),14(7,R3)  NO, UNKNOWN ENTRY TYPE
         UNPK  34(13,R2),20(7,R3)  SHOW THE ASSOCIATED DATA IN HEX
         TR    22(24,R2),CVOLHEX-C'0'
         MVI   46(R2),C' '         ERASE RUBBISH
         B     ENTLODED            FORMATTING DONE
VCBPENTY CLI   0(R3),C'G'          GENERATION DATA GROUP MEMBER?
         BNE   ENTLODED            NO
         CLI   5(R3),C'V'          GENERATION DATA GROUP MEMBER?
         BNE   ENTLODED            NO
         TM    1(R3),X'F0'         ONE'S COMPLEMENT?
         BNZ   ENTLODED            NO
         MVC   0(8,R2),0(R3)       RELOAD QUALIFIER NAME
         XC    1(4,R2),LASTNAME    MAKE DISPLAYABLE NUMERIC CHARACTERS
         TR    0(8,R2),CATXLATE    MAKE SCREEN BEHAVE PROPERLY
         B     ENTLODED            FORMATTING DONE
GIPENTRY LH    R0,16(,R3)          GET CURRENT GENERATION COUNT
         CVD   R0,DOUBLE
         MVC   22(4,R2),ED3
         ED    22(4,R2),DOUBLE+6
         MVC   27(11,R2),=C'GDG MEMBERS'
         IC    R0,15(,R3)          GET MAXIMUM GENERATION COUNT
         CVD   R0,DOUBLE
         MVC   40(4,R2),ED3
         ED    40(4,R2),DOUBLE+6
         MVC   45(7,R2),=C'MAXIMUM'
         TM    14(R3),X'02'        DELETE OPTION?
         BZ    DELORNOT            NO
         MVC   60(7,R2),=C'DELETE'
DELORNOT TM    14(R3),X'01'        EMPTY OPTION?
         BZ    ENTLODED            NO
         MVC   70(5,R2),=C'EMPTY'
         B     ENTLODED            FORMATTING DONE
ICENTRY  CLC   FL8ONE,0(R3)        REALLY AN INDEX CONTROL ENTRY?
         BNE   CPENTRY             NO, DON'T KNOW WHAT IT IS
         MVC   0(8,R2),=CL8'(FL8''1'')'
         MVC   25(12,R2),=C'FIRST TTR IS'
         UNPK  38(7,R2),14(4,R3)
         TR    38(6,R2),CVOLHEX-C'0'
         MVI   44(R2),C' '         ERASE RUBBISH
         B     ENTLODED            FORMATTING DONE
ALNENTRY MVC   30(8,R2),=C'ALIAS OF'
         MVC   39(8,R2),14(R3)     DISPLAY REAL QUALIFIER
         TR    39(8,R2),CATXLATE   MAKE SCREEN BEHAVE PROPERLY
         B     ENTLODED            FORMATTING DONE
VICENTRY CLC   FL8ONE,0(R3)        REALLY A VOLUME INDEX CONTROL ENTRY?
         BNE   CPENTRY             NO, IT IS A CVOL POINTER ENTRY
         MVC   0(8,R2),=CL8'(FL8''1'')'
         MVC   26(11,R2),=C'HIGH TTR IS'
         UNPK  38(7,R2),14(4,R3)
         TR    38(6,R2),CVOLHEX-C'0'
         MVI   44(R2),C' '         ERASE RUBBISH
         B     ENTLODED            FORMATTING DONE
CPENTRY  UNPK  22(9,R2),14(5,R3)   SHOW DEVICE TYPE OF CONTROL VOLUME
         TR    22(8,R2),CVOLHEX-C'0'    NO CVOL CHAINING IN MVS
         MVI   30(R2),C' '         ERASE RUBBISH
         MVC   38(6,R2),4(R15)     LOAD VOLUME SERIAL NUMBER
         TR    38(6,R2),CATXLATE   MAKE SCREEN BEHAVE PROPERLY
         B     ENTLODED            FORMATTING DONE
DSPENTRY CLI   0(R3),C'G'          GENERATION DATA GROUP MEMBER?
         BNE   NOTGEN              NO
         CLI   5(R3),C'V'          GENERATION DATA GROUP MEMBER?
         BNE   NOTGEN              NO
         TM    1(R3),X'F0'         ONE'S COMPLEMENT?
         BNZ   NOTGEN              NO
         MVC   0(8,R2),0(R3)       RELOAD QUALIFIER NAME
         XC    1(4,R2),LASTNAME    MAKE DISPLAYABLE NUMERIC CHARACTERS
         TR    0(8,R2),CATXLATE    MAKE SCREEN BEHAVE PROPERLY
NOTGEN   UNPK  22(9,R2),16(5,R3)   SHOW DEVICE TYPE OF FIRST VOLUME
         TR    22(8,R2),CVOLHEX-C'0'
         LH    R0,26(,R3)          LOAD FIRST VOLUME FILE SEQUENCE NO.
         CVD   R0,DOUBLE           CLEAR FOR INSERT CHARACTERS
         MVC   30(6,R2),ED5Z
         ED    30(6,R2),DOUBLE+5   DISPLAY NON-ZERO VALUE
         ICM   R0,3,14(R3)         LOAD VOLUME COUNT
         BZ    ENTLODED            CATER FOR ERRONEOUS NULLS
         LA    R14,38(,R2)         GET FIRST TARGET ADDRESS
         LA    R15,16(,R3)         GET FIRST SOURCE ADDRESS
DSNVOLLP MVC   0(6,R14),4(R15)     LOAD VOLUME SERIAL NUMBER
         TR    0(6,R14),CATXLATE   MAKE SCREEN BEHAVE PROPERLY
         LA    R14,8(,R14)         POINT TO NEXT TARGET AREA
         LA    R15,12(,R15)        POINT TO NEXT SOURCE VOLUME ENTRY
         BCT   R0,DSNVOLLP
ENTLODED LA    R2,77(,R2)          POINT TO NEXT DETAIL SCREEN LINE
         AH    R3,12(,R3)          POINT TO NEXT ENTRY NAME
         BCT   R1,LODQALNM
         B     CMPRSCAT
EOIDXLST MVC   0(CATMSGLN,R2),EOCATMSG
         TM    GOTTERM+7,X'01'     IS THIS A COLOUR SCREEN?
         BZ    NOYELLOW            NO, WE'VE DONE THE RIGHT THING
         MVC   0(CATMSG2L,R2),EOCATYEL
         LA    R2,CATMSG2L-CATMSGLN(,R2)
NOYELLOW LA    R2,CATMSGLN(,R2)    POINT PAST **END**
         MVI   0(R2),C' '
         MVC   1(69,R2),0(R2)      BLANK THE REST OF THE LINE
MODBITOK LA    R2,63(,R2)          POINT PAST PROGRAM END STATISTICS
DONENDST MVC   0(4,R2),BLNKREST    BLANK THE REST OF THE SCREEN
         LA    R2,4(,R2)           POINT PAST END OF DATA STREAM
CMPRSCAT L     R1,CBPRM3           POINT TO START OF DATA STREAM
         SR    R2,R1               COMPUTE SIZE OF SCREEN
         ST    R2,BUFFSIZE
         LA    R1,CBPRM1           POINT TO PARAMETER LIST
         L     R15,=V(REVCMPBF)
         BALR  R14,R15             CALL BUFFER COMPRESS ROUTINE
DSPLYIDX L     R2,BUFFSIZE         GET COMPRESSED BUFFER LENGTH
         L     R4,CBPRM3           GET BUFFER ADDRESS
         AR    R2,R4               POINT PAST END OF COMPRESSED DATA
         MVC   0(4,R2),PUTCURSR    TACK ON CURSOR POSITION
         LA    R1,X'03'            LOAD FULLSCREEN TPUT FLAGS
         SLL   R1,24               SHIFT TO TOP BYTE
         LA    R0,4(,R2)           GET END OF DISPLAY DATA
         OR    R1,R4               PUT INTO CORRECT REGISTER
         SR    R0,R4               GET LENGTH OF DISPLAY DATA
         NI    STATUS,255-FLAGI    CLEAR ATTENTION FLAG
         TPUT  (1),(0),R           DISPLAY ENTRY SELECTION LIST
         XC    CATINPUT,CATINPUT   CLEAR BUFFER FOR INPUT
         LA    R1,X'81'            LOAD TGET FLAGS
         SLL   R1,24               SHIFT TO TOP BYTE
         LA    R0,CATINPUT         GET INPUT BUFFER ADDRESS
         OR    R1,R0               PUT INTO CORRECT REGISTER
         LA    R0,L'CATINPUT       GET MAXIMUM INPUT LENGTH
         TGET  (1),(0),R           GET SELECTION
         CH    R15,=H'12'          WAS THE BUFFER TOO SMALL?
         BNE   DIRINQOK            NO, SKIP A SUPERVISOR CALL
         TCLEARQ INPUT             YES, FLUSH EXTRA INPUT
DIRINQOK CLI   CATINPUT+1,0        PA KEY HIT?  (ONLY AID READ?)
         BE    DSPLYIDX            YES, REFRESH SCREEN
         MVC   CATHDG(55),STATHDG  RE-INITIALIZE HEADING
         LH    R1,$DSNAME          GET DATA SET NAME LENGTH
         EX    R1,GTCATNAM         RE-LOAD DSN INTO HEADING
         MVC   PUTCURSR,PRIMINIT       AND PUT CURSOR AT HOME
         NI    CATINPUT,X'0F'      GET PFK NUMBER
         CLI   CATINPUT,1          TOP?
         BE    IDXTOP              YES
         CLI   CATINPUT,2          BOTTOM?
         BE    IDXBOTOM            YES
         CLI   CATINPUT,3          GO BACK A LEVEL?
         BE    POPLEVEL            YES
         CLI   CATINPUT,4          END?
         BE    FREENDGO            YES
         CLI   CATINPUT,5          REPORT THE NUMBER OF BLOCKS READ?
         BE    PUTBCNTR            YES
         CLI   CATINPUT,7          SCROLL UP?
         BE    IDXUPCMD            YES
         CLI   CATINPUT,8          SCROLL DOWN?
         BE    THISENTY            YES
         CLI   CATINPUT,12         OTHER PFK?
         BH    WASENTER            NO, INVALID KEY?  NO, IT WAS ENTER
         MVC   CATHDG(55),STATHDG  YES, LOAD ERROR MESSAGE INTO HEADING
         MVC   CATHDG(L'INVPFMSG),INVPFMSG
         B     DSPLYIDX
PUTBCNTR MVC   CATHDG(55),STATHDG  LOAD MESSAGE INTO HEADING
         MVC   CATHDG(L'ED5+L'BLKSREAD),ED5 + BLKSREAD
         MVI   CATHDG,C'-'
         L     R1,BLKREADS         GET READ (OR READ GET) COUNTER
         CVD   R1,DOUBLE
         LA    R1,CATHDG+L'ED5-1
         EDMK  CATHDG(L'ED5),DOUBLE+5
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         MVI   0(R1),C' '
         B     DSPLYIDX
WASENTER CLI   CATINPUT+3,X'11'    SBA?
         BNE   DSPLYIDX            NO, NULL OR FUNNY INPUT
         LA    R1,CATINPUT+3       YES, POINT TO IT
         CLC   1(2,R1),PRIMADDR    PRIMARY INPUT AREA USED?
         BNE   SELCDCHK            NO, CHECK ENTRY SELECTION CODE
         LA    R5,8                GET MAXIMUM ENTRY NAME LENGTH
         LA    R1,CATINPUT+6       STARTING POSITION FOR SOURCE
         LA    R6,DOUBLE           STARTING POSITION FOR TARGET
         XC    DOUBLE,DOUBLE       CLEAR ANY PREVIOUS NAME
SBACHECK CLI   0(R1),X'11'         SBA FOUND?
         BE    FOLDWORK            YES
         MVC   0(1,R6),0(R1)       LOAD A CHARACTER
         LA    R6,1(,R6)           POINT TO TARGET NEXT BYTE
         LA    R1,1(,R1)           POINT TO SOURCE NEXT BYTE
         BCT   R5,SBACHECK               AND LOOP
FOLDWORK OC    DOUBLE(8),=CL8' '   CONVERT TEXT TO UPPER CASE
         CLC   DOUBLE(8),=CL8' '   BLANK INPUT?
         BNE   LEFTJUST            NO, PROCESS IT
         CLI   0(R1),X'11'         YES, SBA FOUND?
         BNE   DSPLYIDX            NO, RESHOW SCREEN
         B     SELCDCHK            YES, CHECK ENTRY SELECTION CODE
LEFTJUST CLI   DOUBLE,C' '         FIRST CHARACTER BLANK?
         BNE   GOTPRIME            NO, HAVE PRIMARY INPUT FIELD AT LAST
         MVC   DOUBLE(7),DOUBLE+1
         MVI   DOUBLE+7,C' '       SHIFT LEFT ONE BYTE AND ADD A BLANK
         B     LEFTJUST            CHECK FOR ANOTHER LEADING BLANK
GOTPRIME MVC   SELENTRY,DOUBLE     YES, LOAD ENTRY NAME TO SEARCH FOR
         B     FINDENTY                 AND GO SEARCH FOR IT
         SPACE
SELCDCHK CLI   3(R1),X'11'         ANOTHER SBA CODE?
         BE    NULLSEL             YES
         OI    3(R1),C' '          FOLD SELECTION CODE TO UPPER CASE
         CLI   3(R1),C'S'          CORRECT SELECTION CODE FOR REVIEW?
         BE    SELCODOK            YES
         CLI   3(R1),C' '          BLANK CODE?
         BE    BLANKSEL            YES
         MVC   CATHDG(55),STATHDG  NO, LOAD ERROR MESSAGE INTO HEADING
         MVC   CATHDG(L'INVCDMSG),INVCDMSG
         MVC   PUTCURSR+1(2),1(R1) POINT TO WHERE OFFENDING CODE WAS
         B     DSPLYIDX
BLANKSEL CLI   4(R1),X'11'         DOES ANOTHER SELECTION FOLLOW?
         BNE   DSPLYIDX            NO
         LA    R1,4(,R1)           YES, POINT TO IT
         B     SELCDCHK            PROCESS IT
NULLSEL  LA    R1,3(,R1)           YES, POINT TO IT
         B     SELCDCHK            PROCESS IT
         SPACE
IDXTOP   LA    R3,CATENTS-1024
         LA    R3,1024(,R3)        POINT TO FIRST ENTRY
         B     THISENTY
         SPACE
IDXBOTOM L     R3,LASTADDR         POINT TO **END**
         LA    R3,12(,R3)          POINT TO **END**'S LENGTH INDICATOR
         B     IDXSCRUP                  AND SCROLL UP ONE PAGE
         SPACE
IDXUPCMD L     R3,TOPIDXAD         POINT TO CURRENT TOP ENTRY NAME
         BCTR  R3,0                POINT TO LENGTH OF PREVIOUS ENTRY
         BCTR  R3,0
IDXSCRUP L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         LA    R2,CATENTS-1024
         LA    R2,1024(,R2)        POINT TO FIRST ENTRY
UPONEMEM CR    R3,R2               POINTING TO BEFORE FIRST ENTRY?
         BL    FNDUPMEM            YES, USE FIRST ENTRY
         SH    R3,0(,R3)           NO, BACK UP ONE ENTRY
         BCT   R1,UPONEMEM
FNDUPMEM LA    R3,2(,R3)           POINT TO START OF ENTRY
         B     THISENTY
         SPACE
GTCATNAM MVC   CATHDG(0),$DSNAME+2 <<< EXECUTED >>>
         SPACE
SELCODOK SLR   R5,R5
         IC    R5,2(,R1)           GET LOW ORDER SCREEN ADDRESS BYTE
         SLL   R5,2                SHIFT OUT "PARITY" BITS
         ICM   R5,2,1(R1)          GET HIGH ORDER SCREEN ADDRESS BYTE
         SLL   R5,18               SHIFT OUT "PARITY" BITS
         SRL   R5,20               MAKE BINARY INTEGER
         SLR   R4,R4               PREPARE FOR DIVIDE
         LA    R0,80               GET BYTES PER SCREEN LINE
         DR    R4,R0               DIVIDE SCREEN ADDR BY 80 TO GET LINE
         SH    R5,=H'3'            ADJUST FOR THREE HEADING LINES
         BNM   ESVALID             IF NEGATIVE THEN INVALID INPUT,
         MVC   CATHDG(55),STATHDG     SCREEN HAD BEEN CLEARED
         MVC   CATHDG(L'SCRERMSG),SCRERMSG
         B     DSPLYIDX
ESVALID  L     R4,TOPIDXAD         GET CURRENT TOP ENTRY ADDRESS
         BZ    SELDINDX            IN CASE FIRST SHOWN ENTRY CHOSEN
ESLOOP   AH    R4,12(,R4)          POINT TO NEXT ENTRY
         BCT   R5,ESLOOP
SELDINDX CLI   11(R4),0            INDEX POINTER ENTRY?
         BE    VALIDTYP            YES, SELECTION ALLOWED
         CLI   11(R4),2            GENERATION INDEX POINTER ENTRY?
         BE    VALIDTYP            YES, SELECTION ALLOWED
         CLI   11(R4),4            ALIAS NAME ENTRY?
         BE    VALIDTYP            YES, SELECTION ALLOWED
         MVC   CATHDG(55),STATHDG     SCREEN HAD BEEN CLEARED
         MVC   CATHDG(L'INVALMSG),INVALMSG
         B     DSPLYIDX
VALIDTYP MVC   TTR(3),8(R4)        GET TTR OF NEXT QUALIFIER
         POINT (R7),TTR            POINT TO IT
         LH    R1,LEVEL            GET CURRENT LEVEL
         LA    R0,1(,R1)           GET NEXT LEVEL NUMBER
         STH   R0,LEVEL            SAVE NEW CURRENT LEVEL NUMBER
         BCTR  R1,0
         MH    R1,=H'12'           GET INDEX TO SAVE AREA
         LA    R1,CVOLTTRS(R1)     POINT TO THIS LEVEL'S TTR ENTRY
         MVC   4(8,R1),0(R4)       SAVE THE QUALIFIER NAME
         MVC   12(4,R1),TTR        SAVE THE STARTING TTR OF NEXT LEVEL
         B     REDOENTS            LOAD ENTRIES OF THIS LEVEL
NULLBLOK MVC   CATHDG(55),STATHDG  INVALID USED BLOCK STRUCTURE
         MVC   CATHDG(L'MTBLKMSG),MTBLKMSG
POPLEVEL LH    R1,LEVEL            GET CURRENT LEVEL
         BCTR  R1,0                DECREMENT
         LTR   R1,R1               STILL POSITIVE?
         BNP   FREENDGO            NO, EXIT
         STH   R1,LEVEL            SAVE NEW LEVEL
         BCTR  R1,0
         MH    R1,=H'12'           GET INDEX TO SAVE AREA
         LA    R1,CVOLTTRS(R1)     POINT TO STARTING TTR
         MVC   TTR,0(R1)
         MVC   SELENTRY,4(R1)      RESTORE THE QUALIFIER NAME
         POINT (R7),TTR            POINT TO IT
         B     REDOENTS            LOAD ENTRIES OF THIS LEVEL
FREENDGO MVI   CLOSED,X'80'        CLOSE SYSCTLG
         CLOSE ((R7)),MF=(E,CLOSED)
         LM    R0,R1,FREEMRGS      PREPARE FOR FREEMAIN
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE @DYNAREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SLR   R15,R15
         STH   R15,RC              OVERWRITE PREVIOUS NON-ZERO RC
         BR    R14                 RETURN
         SPACE
************************************************************
*                                                          *
*         SYNAD EXIT                                       *
*                                                          *
************************************************************
         SPACE
*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO
*        IF AN I/O ERROR OCCURS.
         SPACE
DYNSYNAD EQU   *
         SYNADAF ACSMETH=BSAM
         MVC   SYNADMSG(78),50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14
         SPACE
         TITLE '  R E V C V O L   -   S T A T I C   A R E A  '
PRIMADDR DCS   (2,14)              SCREEN ADDRESS OF PRIMARY INPUT AREA
LASTNAME DC    XL8'FFFFFFFFFFFFFFFF',2AL2(0),AL2(14)
CVOLHEX  DC    C'0123456789ABCDEFGHIJLK'
INVCDMSG DC    C'INVALID SELECTION CODE '
INVALMSG DC    C'INVALID ENTRY TYPE SELECTED '
INVPFMSG DC    C'INVALID PROGRAM FUNCTION KEY '
SCRERMSG DC    C'SCREEN INPUT ERROR - INPUT IGNORED '
DIRRDMSG DC    C'REGION FULL - CATALOG READ TERMINATED '
INRPTMSG DC    C'INTERRUPT - CATALOG READ TERMINATED '
MTBLKMSG DC    C'EMPTY OR INVALID BLOCK WAS READ '
EOCATMSG DCS   SF,PROHI,C'  **END**'
CATMSGLN EQU   *-EOCATMSG
EOCATYEL DCS   SF,PROHI,SA,COLOUR,YELLOW,C'  **END**'
CATMSG2L EQU   *-EOCATYEL
BLNKREST DCS   RTA,(1,1),C' '
PRIMINIT DCS   SBA,(2,14),IC       RETURN CURSOR TO PRIMARY INPUT AREA
ENTATLST DCS   SF,UNPHI,X'00',SF,PROLO,SA,COLOUR,PINK
ED3      DC    X'40202120'
ENTRYMSK DC    X'602020202020'
ED5Z     DC    X'402020202020'
ED5      DC    X'402020202120'
BLKSREAD DC    C' SYSCTLG BLOCKS READ '
ED9      DC    X'40202020202020202120'
CATGMLIM DC    F'8192',F'32768'
GMVC     GETMAIN VC,MF=L
GMVCL    EQU   *-GMVC
FL8ONE   DC    FL8'1'
         SPACE
         LTORG
         SPACE
         PRINT NOGEN
         SPACE
CATDCB   DCB   DSORG=PS,MACRF=RP,RECFM=F,LRECL=256,BLKSIZE=256,        X
               DDNAME=DYNAM,EODAD=EOCATLVL,SYNAD=DYNSYNAD
CATDCBL  EQU   *-CATDCB
         SPACE
DYNREAD  READ  DYNDECB,SF,0,0,'S',MF=L
DYNDECBL EQU   *-DYNDECB
         SPACE
         PRINT GEN
         SPACE 2
*              FULL 3270 EBCDIC TRANSLATION         (COPIED FROM FULLT)
CATXLATE DC    X'00010203044B064B4B4B4B4B0C0D4B4B'
         DC    X'104B4B4B141516174B194B4B1C4B1E4B'
         DC    X'4B4B4B4B4B4B26274B4B4B4B4B2D4B4B'
         DC    X'4B4B4B4B4B4B4B374B4B4B4B4B3D4B4B'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'
         SPACE
STATMONO DCS   X'C1',SBA,(1,1),SF,PROHI
STATHDG  DC    60C'-',C' ENTRIES AT LEVEL # LOCATE ===>'
         DCS   SF,UNPHI,RTA,(2,22),X'00',SF,PROLO
         DC    C' PF1-TOP  PF2-BOTTOM  PF3-END  PF4-EXIT  PF7-UP  PF8-DX
               OWN '
         DC    CL80'  QUALIFIER   TTR    CT  DEVTYPE1  FSN1  -VOL1-  -VX
               OL2-  -VOL3-  -VOL4-  -VOL5- '
STMONOLN EQU   *-STATMONO
STATCOLR DCS   X'C1',SA,COLOUR,WHITE,SBA,(1,1),SF,PROHI
         DC    60C'-',C' ENTRIES AT LEVEL # LOCATE ===>'
         DCS   SF,UNPHI,SA,COLOUR,RED,SA,HILITE,USCORE,RTA,(2,22),X'00'
         DCS   SA,HILITE,NORMAL,SF,PROLO,SA,COLOUR,TURQ
         DC    C' PF1-TOP  PF2-BOTTOM  PF3-END  PF4-EXIT  PF7-UP  PF8-DX
               OWN '
         DCS   SA,COLOUR,YELLOW
         DC    CL80'  QUALIFIER   TTR    CT  DEVTYPE1  FSN1  -VOL1-  -VX
               OL2-  -VOL3-  -VOL4-  -VOL5- '
STCOLRLN EQU   *-STATCOLR
         DS    0D                  END OF CSECT
         DROP  R10,R11             REVCVOL
         TITLE '  R E V C V O L   -   D Y N A M I C   A R E A  '
@DYNAREA DSECT                   MAPPING OF START OF DYNAMIC AREA
         DS    18F
FREEMRGS EQU   *,8               FREEMAIN REGISTER VALUES
FREEMRG0 DS    F                 FREEMAIN REGISTER 0 VALUE
FREEMRG1 DS    F                 FREEMAIN REGISTER 1 VALUE
TOPIDXAD DS    F                 TOP ENTRY ENTRY ADDRESS SAVE AREA
LASTADDR DS    F                 LAST ENTRY ENTRY ADDRESS SAVE AREA
MAXADDR  DS    F                 TOP USABLE ADDRESS OF CATENTS
BLKREADS DS    F                 SYSCTLG BLOCK READ COUNTER
PUTCURSR DS    XL4               CURSOR POSITION TRAILER
SELENTRY DS    CL8               USER SELECTED ENTRY
CVOLTTRS DS    66F               STARTING TTRS OF EACH LEVEL
LEVEL    DS    H                 CURRENT LEVEL NUMBER
         SPACE
DYNSCRN  DS    XL3               ROOM FOR COLOUR PREFIX
CATSCRN  DCS   X'C1',SBA,(1,1),SF,PROHI
CATHDG   DC    54C'-'
ENTRYCNT DC    X'602020202120',C' ENTRIES AT LEVEL '
LEVELNUM DC    C'#',C' LOCATE ===>'
         DCS   SF,UNPHI,RTA,(2,22),X'00',SF,PROLO
         DC    C' PF1-TOP  PF2-BOTTOM  PF3-END  PF4-EXIT  PF7-UP  PF8-DX
               OWN '
         DC    CL80'  QUALIFIER   TTR    CT  DEVTYPE1  FSN1  -VOL1-  -VX
               OL2-  -VOL3-  -VOL4-  -VOL5- '
MONOENTS DS    41CL82            UP TO 43 LINES FOR AN 80 COLUMN SCREEN
         ORG   DYNSCRN           ALLOCATE SPACE FOR EXTENDED ATTRIBUTES
         DCS   X'C1',SA,COLOUR,WHITE,SBA,(1,1),SF,PROHI
         DC    60C'-',C' ENTRIES AT LEVEL # LOCATE ===>'
         DCS   SF,UNPHI,SA,COLOUR,RED,SA,HILITE,USCORE,RTA,(2,22),X'00'
         DCS   SA,HILITE,NORMAL,SF,PROLO,SA,COLOUR,TURQ
         DC    C' PF1-TOP  PF2-BOTTOM  PF3-END  PF4-EXIT  PF7-UP  PF8-DX
               OWN '
         DCS   SA,COLOUR,YELLOW
         DC    CL80'  QUALIFIER   TTR    CT  DEVTYPE1  FSN1  -VOL1-  -VX
               OL2-  -VOL3-  -VOL4-  -VOL5- '
COLRENTS DS    41CL88            UP TO 43 LINES FOR AN 80 COLUMN SCREEN
CATENTS  DS    0D                IN-CORE ENTRY LIST STARTS HERE
         EJECT
************************************************************
*                                                          *
*         FORMAT FOR REVCAT IN-CORE CVOL ENTRIES           *
*                                                          *
************************************************************
         SPACE
*        COMMON BASE SECTION
*        +0    INDEX NODE NAME
*        +8    ASSOCIATED TTR
*        +B    EXTRA HALFWORD COUNT OF ENTRY
*        +C    TOTAL LENGTH OF THIS ENTRY (H'14' FOR INDEX POINTER)
*        +E    END OF STANDARD INTERNAL ENTRY
         SPACE
*        EXTENSION SECTION
*        +E    EXTRA USER DATA
*              TOTAL LENGTH OF THIS ENTRY (BYTE COUNT IN A HALFWORD)
         TITLE '  R E V C A T   -   C O N T R O L   B L O C K S  '
IHADCB   DSECT
         DS    16XL1
DCBKEYLE DS    XL1
         DS    15XL1
DCBBFTEK DS    XL1
DCBEODAD DS    AL3
DCBRECFM DS    X
DCBEXLSA DS    AL3
DCBDDNAM DS    CL8
DCBDEBAD EQU   *-4,4
DCBOFLGS DS    X
         DS    7XL1
         DS    X
DCBSYNAD DS    AL3
DCBBLKSI EQU   IHADCB+62,2
DCBLRECL EQU   IHADCB+82,2
         SPACE
         IKJCPPL
         SPACE 3
         IKJPPL
         SPACE
         IKJDFPB
         SPACE 2
         IKJUPT
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJDAPL
         SPACE 2
         IKJDAP08
         SPACE 2
         IKJDAP18
         SPACE 2
         IKJPSCB
         SPACE 2
         IKJECT
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         END
