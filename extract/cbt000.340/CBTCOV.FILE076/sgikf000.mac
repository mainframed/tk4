*$MODULE       IKFCBL01
*//      IKFCBL01  VERSION 00012 LAST TAPE 00011 CURRENT TAPE 00
         MACRO
         SGIKF000  &SOURCE,&DECK,&LOAD,&SEQCHK,&FLAGEW,&LIB,      51886X
               &SPACE,&LINE,&BUF,&SIZE,&QUOT,&DMAP,&SUPMAP,&PMAP,      X
               &TRUNC,&XREF,&CLIST,&VERB                          51886
         LCLC  &SPCHAR
PH01     TITLE     'IKFCBL01'
         IHBCOB
*
*TITLE:
*
*        'IKFCBL01'
*
*STATUS:
*   CHANGE LEVEL 000
*
*FUNCTION/OPERATION:
*
*   PERFORMS COMPILER INITIALIZATION.  DETERMINES BUFFER AREA.
*   PROCESSES THE EXEC CARD OR THE CALL, LINK, XCTL OR ATTACH MACRO
*     COMPILATION PARAMETERS.  OBTAINS STORAGES FOR TABLES, THE
*   DICTIONARY AND THE BUFFERS.
*   PERFORMS THE BASIS AND COPY FUNCTIONS.
*
*ENTRY POINTS:
*
*        'IKFCBL01'
*
*INPUT - INTERNAL:
*
*        COMPILATION PARAMETERS FROM PHASE 00
*
*INPUT - EXTERNAL:
*   (ONLY FOR BASIS AND COPY FUNCTIONS)
*   SYSIN - SOURCE PROGRAM
*   SYSLIB - SOURCE PROGRAM
*
*OUTPUT - INTERNAL:
*
*   MODIFIED DCB
*   SWITCH INDICATING THE COMPILATION OPTIONS
*   LINE COUNT INDICATION
*   INDICATION OF DIFFERENCE BETWEEN THA MAX AMOUNT OF CORE STORAGE
*   REQUESTED AND THE AMOUNT ACTUALLY RECEIVED FOR TABLES, DICTIONA
*   AND BUFFERS.
*   BUFFERS ADDRESSES AND LENGTHS
*   SYSUT3  E-TEXT FOR BASIS AND COPY STATEMENTS
*   SYSUT4  SOURCE PROGRAM FOR PHASE 1 SCAN IF LIB OPTION
*           IS IN EFFECT
*
*OUTPUT - EXTERNAL:
*
*   SYSPRINT  SOURCE PROGRAM LISTING (IF LIB OPTION IS IN EFFECT)
*
*EXTERNAL ROUTINES:
*
*   PHASE 00  LINK TO I-O AND INTERPHASE COMMON REGION
*   PRIME  ASSIGN AN AREA IN A TABLE REGION
*   TAMEIN  TAMER INITIALIZATION ROUTINE
*   INSERT  GET ROOM FOR AN ENTRY IN A TABLE
*   TABREL  RELEASE TABLE, FREE AREA IF NO LONGER NEEDED
*   STATIC  NOTE NO NEW ENTRY TO BE MADE
*
*EXITS NORMAL:
*
*   RETURNS TO PHASE 00
*
*EXISTS - ERROR:
*
*   RETURN TO PHASE 00
*TABLE/WORK AREAS:
*
*   REPTAB (REPLACING TABLE) FOR THE COPY FUNCTION
*        WITH THE REPLACING OPTION
*
*ATTRIBUTES:
*
*   NOT REUSABLE
*
*NOTES:
*
*   GENERAL ORGANIZATION:
*   1.   EQU'S
*   2.   CONSTANTS
*   3.   PHASE 01 HOUSEKEEPING AND INITIALIZATION
*   4.   SUBROUTINES
*   5.   BASIS AND COPY ROUTINES
*
*
*   GENERAL CONSIDERATION IN PHASE 01:
*   PHASE 01 IS LOGICALLY A SUBSET OF PHASE 00, BUT IT IS A SEPARAT
*   LOAD MODULE, SINCE IT IS NOT NEEDED IN CORE STORAGE THROUGHOUT
*   COMPILATION.
*
*
*   THE BUFFER AND TAMER TABLES ARE DESCRIBED IN DETAIL IN PLM
*   AND LISTING.
*
*
*
       EJECT
IKFCBL01 CSECT
* (SEE THE SECTION LABELED 'BUFFERS'
*     THESE ARE  THE REGISTER EQUATES
R0     EQU   0
R1     EQU   1
R2     EQU   2
R3     EQU   3
R4     EQU   4
R5     EQU   5
R6     EQU   6
R7     EQU   7
R8     EQU   8
R9     EQU   9
R10    EQU   10
R11    EQU   11
R12    EQU   12
R13    EQU   13
R14    EQU   14
R15    EQU   15
*
HEXFF    EQU   255                                                46891
*
*
*
*
*
&SPCHAR  SETC  ' '                     SET FOR SINGLE SPACE
         AIF   (&SPACE NE 01).SPTWO    IS TRIPLE SPACE REQUESTED
&SPCHAR  SETC  '-'                     YES, SET 3 SPACE CHAR
         AGO   .BEGIN
.SPTWO   AIF   (&SPACE NE 10).BEGIN    IS DOUBLE SPACE REQUESTED
&SPCHAR  SETC  '0'                     YES, SET 2 SPACE CHAR
.BEGIN   ANOP
START  STM   14,12,12(13)
       BALR  R5,0
       USING *,R5
         USING MYSAVE,R13
         MVC   COSADR(L44),D0(R1)       MOVE LINK PARMS           40329
         B     GO
         DC    C'IKFCBL01'
         DC    C'B'
         DC    X'1C'
IKFPATCH DS    0F                  PATCH AREA
         B     IKFPATCH            EASES CODING OF BRANCH ADDRESS
         DC    24F'0'
COSADR DS    F
BUFAD  DS    F
LISTAD DS    F
DCBAD  DS    F
BUFXAD DS    F
ADSWIT   DS    F           ADRESS OF PARAMETER SWITCH
ERRSEV1  DS    F
SEGSAVE  DS    F
APCBSPT  DS    F
ZALNKNPT DS    F     ADDR OF 1ST VARIABLE PORTION OF LINKNAME USED BY
*    BLDL ROUT = A(LINKNAME+10) IN PHASE00                        9330
ADECBLIB DS    F     ADDR OF DECB FOR LIB                         40329
L44      EQU   44                                                 40329
D36      EQU   36                                                 40329
D8       EQU   8                                                  40329
UNDEF    EQU   X'C0'                                              40329
SAVER13 DS   F
EIGHT  DC    H'8'
ADD80  DC    AL3(LIST80)
ADD80P   DC    AL3(LIST80P)
ADDIN  DC    AL3(LISTIN)
ADDOU  DC    AL3(LISTOU)
DDCOM  SH    R4,EIGHT
       BC    12,HEADER
       LA    R15,8(R15)
       CLC   ZEROES,0(R15)
       BCR   8,R11       NO NEW DD
       BR    R12         NEW DD
DS1    EQU   0
DS2    EQU   88          LOCATIONS  OF DCB'S RELATIVE TO DS1
DS3    EQU   176
DS4    EQU   264
SPILL1   EQU   352
IN     EQU   440
OUT    EQU   528
LIB    EQU   616
PCH    EQU   704
GOF    EQU   792
DDNTBL EQU   880         LOC OF SYATBL RELATIVE TO DS1
DNAME  EQU   40          DO NAME  FIELD
XLST   EQU   37          EXLIST FIELD
BLKSZE EQU   62
D0       EQU   0                                                  9330
D1       EQU   1                                                  9330
D2       EQU   2                                                  9330
D3       EQU   3                                                  9330
D4       EQU   4                                                  9330
D6       EQU   6                                                  9330
D11      EQU   11                                                 9330
D16      EQU   16                                                 9330
D20      EQU   20                                                 9330
D40      EQU   40                                                 9330
L0       EQU   0                                                  9330
L40      EQU   40                                                 9330
MVTBIT   EQU   X'10'                                              9330
CONFIG   EQU   116                                                9330
         DS    0F
LIST80 DC    X'85'
       DC    AL3(EDIT80)
LIST80P  DC    X'85'
         DC    AL3(EDIT80P)
LISTIN DC    X'85'
       DC    AL3(EDITIN)
LISTOU DC    X'85'
       DC    AL3(EDITOU)
ZEROES DC    F'0'
EDITOU LH    R4,ONE21
       B     EDINOU
EDITIN LH    R4,EIGHTY
         MVI   D20(R1),D0   ZERO OUT BUFNO BYTE IN DCB            7643
EDINOU LA    R6,4095
       B     EDIT8B
EDIT80P  LA    R6,4095
         B     EDIT8A
EDIT80   LA    R6,40
EDIT8A LH    R4,EIGHTY
EDIT8B SR    R2,R2
       LH    R3,BLKSZE(1)
       LTR   R3,R3
       BZ    EDIT8D
       DR    R2,R4            NOTE R2+R3 MUST BE EVEN/ODD PAIR
       LTR   R2,R2
       BC    7,EDIT8C      NOT AN EVEN MULTIPLE
       CR    R3,R6
       BNH   EDIT8E
EDIT8C BAL   R7,TERMINAT
EDIT8D STH   R4,BLKSZE(1)
EDIT8E RETURN
EIGHTY DC    H'80'
ONE21  DC    H'121'
TERMINAT LH  R6,BLKSZE(1)               SENDS WARNING MESSAGES
       CVD   R6,TERMWK                  ON INPROPER BLOCK SIZES
       MVC   MES1,MASK1
       ED    MES1,TERMWK+5
       STM   R14,R15,TERMWK
       LA    R15,MESA
       BAL   R14,QUE
       LM    R14,R15,TERMWK
       BR    R7
MESA     DC    H'48'
         DC    C'IKF0005I-'
MES1   DS    CL6
       DC    C' INVALID BLOCKSIZE,DEFAULT USED'
TERMWK DS    D
MASK1  DC    X'402020202020'
CONVERT TM   0(R6),X'F0'           THIS ROUTINE COVERTS EXTERNAL
       BO    CONVERTA              DECIMAL TO PACKED DECIMAL AND
       LA    R6,1(R6)              BINARY, R6  POINTS  TO SCAN AREA
       BCT   R4,CONVERT            R2 CONTAINS BINARY  VALUE
       BR    R11  ERROR EXIT       PARWK CONTAINS INTERNAL DECIMAL
CONVERTA LR  R2,R6                 R4 THE MAX SCAN LENGTH
CONVA  TM    0(R2),X'F0'
       BO    CONVB
CONVW    LA    R4,1(R4)
       SR    R2,R6
CONVX  XC    PARWK,PARWK
       BCTR  R2,0
       EX      R2,PARPACK
       AR    R6,R2
       CVB   R2,PARWK
         CLI   1(R6),C'K'
         BNE   CONVXBR
         SLL   R2,10
         BCTR  R4,0
         LA    R6,1(R6)
CONVXBR  BR    R15
PARPACK PACK  PARWK,0(0,R6)
PARWK  DS    1D
CONVB  LA    R2,1(R2)
         BCT    R4,CONVA
         B     CONVW
* THIS  ROUTINE  TESTS'NO' IN PARAMS
* IT EXITS TO  R15 IF YES,TO R14 IF NO
NOTEST BCTR  R6,0
       NI    NOSW,X'00'
       CLI   0(R6),C'O'
       BNE   NOTSTA
       OI    NOSW,X'FF'
NOTSTA LA    R6,1(R6)
       TM    NOSW,X'FF'
       BO    NOTESTB
       BR    R15
NOTESTB BR   R14   IT IS A NO ENVIRONMENT
NOSW   DC    X'00'
       CNOP  0,4
PARMS    DC    C'CNT '
       DC    A(COUNT)
       DC   C'SEQ '
         DC    A(SEQ1)
       DC   C'LAG '
       DC    A(NOWARN)
       DC   C'SIZ '
         DC    A(SIZE1)
       DC   C'BUF '
       DC    A(BUF)
       DC   C'SOU '
       DC    A(SOURCE)
       DC   C'DEC '
       DC    A(DEC)
       DC   C'LOA '
       DC   A(LOAD)
          DC   C'ACE '
         DC    A(SPACE)
         DC    C'PMA '
         DC    A(PMAP)
         DC    C'DMA '
         DC    A(DMAP)
         DC    C'SUP '
         DC    A(SUPMAP)
         DC    C'CLI '
         DC    A(CLIST1)
         DC    C'XRE '
         DC    A(XREF1)
         DC    C'TRUN'
         DC    A(TRUNC1)
         DC    C'ZWB '
         DC    A(ZWB1)
         DC    C'APO '
         DC    A(APOST1)
         DC    C'QUO '
         DC    A(QUOT)
         DC    C'LIB '
         DC    A(LIB1)
         DC    C'VER '
         DC    A(VERB1)
PARMLIM  EQU   (*-PARMS)/8
THREE    DC    H'3'
*
*
SCANA    LA    R8,PARMLIM         SET SCAN FOR 19 PARAMS
       LA    R7,PARMS                   EXEC PARAMS
SCANB  CLC   0(3,R6),0(R7)
       BE    SCANC
       LA    R7,8(R7)
       BCT   R8,SCANB
SCAND  LA    R6,1(R6)
         BCT   R4,SCANA
       BR    R11
SCANC  L     R15,4(R7)
       BR    R15                                         ASUMED
SCANE    LA    R6,3(R6)
         SH    R4,THREE
         BCR   12,R11
         B     SCANA
* * * * * * * * * * * * *
*                       *
* PHZSW  FORMAT         *
* BIT 0  SOURCE         *
*     1  PMAP           *
*     2  DECK           *
*     3  LOAD           *
*     4  SEQ            *
*     5  FLAGW          *
*     6  LIB            *                                         51886
*     7  ZWB
*                       *
* PHZSW1 FORMAT         *
* BIT 0  XREF           *
* BIT 1  CLIST          *
* BIT 2  DMAP           *
* BIT 5  APOST          *
* BIT 6  SUPMAP         *
* BIT 7  TRUNC          *
*                       *
* PHZSW2 FORMAT         *
* NOT USED              *
*                       *                                         51886
* PHZSW3 FORMAT         *                                         51886
* BIT 7  VERB           *                                         51886
* * * * * * * * * * * * *
SOURCEQ  EQU   X'80'
PMAPQ    EQU   X'40'
DECKQ    EQU   X'20'
LOADQ    EQU   X'10'
SEQQ     EQU   X'08'
FLAGWQ   EQU   X'04'
XREFQ    EQU   X'80'
CLISTQ   EQU   X'40'
DMAPQ    EQU   X'20'
PDTQ     EQU   X'10'
LIBRQ    EQU   X'02'
APOSTQ   EQU   X'04'
SUPMAPQ  EQU   X'02'
VERBRQ   EQU   X'01'
TRUNCQ   EQU   X'01'
ZWBSW    EQU   X'01'
*
*                                  ASUMED  OPTIONS
ASUMED   DC    B'&SOURCE&PMAP&DECK&LOAD&SEQCHK&FLAGEW&LIB.1'      51886
ASUMED1  DC    B'&XREF&CLIST&DMAP.00&QUOT&SUPMAP&TRUNC'           51886
ASUMED3  DC    B'0000000&VERB'     USE FOR PHZSW3
SPACE    CLI   3(R6),C'2'
         BE    SPACEA
         CLI   3(R6),C'3'
         BNE   SPACEB
         MVI   BLANK1,C'-'
         B     SCANE
SPACEB   CLI   3(R6),C'1'
         BNE   SCANE
         MVI   BLANK1,C' '
         B     SCANE
SPACEA   MVI   BLANK1,C'0'
         B     SCANE
COUNT  BAL   R15,CONVERT
       MVC   SIXTY,PARWK+6         NEW LINE COUNT
       B     SCAND
SEQ1     LA    R15,SEQA
       BAL   R14,NOTEST
         NI    ASUMED,255-SEQQ     TURN OFF SEQ    BIT
         B     SCANE
SEQA     OI    ASUMED,SEQQ         TURN ON  SEQ    BIT
         B     SCANE
NOWARN   CLI   3(R6),C'W'
       BE    NOWARNA
         NI    ASUMED,255-FLAGWQ   TURN OFF FLAGW  BIT
         B     SCANE
NOWARNA OI     ASUMED,FLAGWQ       TURN ON  FLAGW  BIT
         B     SCANE
SIZE1    BAL   R15,CONVERT
       ST    R2,CORE
         OI    BFGVSW,X'0F'
       B     SCAND
BFGVSW   DC    X'00'
CORE     DC    F'&SIZE'
*
BUFSZ    DC    F'&BUF'
SIXTY    DC    X'&LINE.C'
BLANK1   DC    C'&SPCHAR'
BUF    BAL   R15,CONVERT
       ST    R2,BUFSZ
         OI    BFGVSW,X'F0'
       B     SCAND
SOURCE   LA    R15,SOURCEA
       BAL   R14,NOTEST
         NI    ASUMED,255-SOURCEQ  TURN OFF SOURCE BIT
         B     SCANE
SOURCEA OI     ASUMED,SOURCEQ      TURN ON  SOURCE BIT
         B     SCANE
*
DEC    LA    R15,DECA
       BAL   R14,NOTEST
         NI    ASUMED,255-DECKQ    TURN OFF DECK   BIT
         B     SCANE
DECA     OI    ASUMED,DECKQ        TURN ON  DECK   BIT
         B     SCANE
LOAD   LA    R15,LOADA
       BAL   R14,NOTEST
         NI    ASUMED,255-LOADQ    TURN OFF LOAD   BIT
         B     SCANE
LOADA    OI    ASUMED,LOADQ        TURN ON  LOAD   BIT
         B     SCANE
PMAP     LA    R15,PMAPA
         BAL   R14,NOTEST
         NI    ASUMED,255-PMAPQ    TURN OFF PMAP BIT
         B     SCANE
PMAPA    OI    ASUMED,PMAPQ        TURN ON  PMAP BIT
         NI    ASUMED1,255-CLISTQ  TURN OFF CLIST BIT
         B     SCANE
DMAP     LA    R15,DMAPA
         BAL   R14,NOTEST
         NI    ASUMED1,255-DMAPQ   TURN OFF DMAP   BIT
         B     SCANE
DMAPA    OI    ASUMED1,DMAPQ       TURN ON  DMAP   BIT
         B     SCANE
CLIST1   LA    R15,CLISTA
         BAL   R14,NOTEST
         NI    ASUMED1,255-CLISTQ  TURN OFF CLIST  BIT
         B     SCANE
CLISTA   OI    ASUMED1,CLISTQ      TURN ON  CLIST  BIT
         NI    ASUMED,255-PMAPQ    TURN OFF PMAP BIT
         B     SCANE
SUPMAP   LA    R15,SUPMAPA
         BAL   R14,NOTEST
         NI    ASUMED1,255-SUPMAPQ TURN ON SUPMAP BIT
         B     SCANE
SUPMAPA  OI    ASUMED1,SUPMAPQ     TURN OFF SUPMAP BIT
         B     SCANE
XREF1    LA    R15,XREFA
         BAL   R14,NOTEST
         NI    ASUMED1,255-XREFQ
         B     SCANE
XREFA    OI    ASUMED1,XREFQ
         B     SCANE
TRUNC1   LA    R15,TRUNCA
         BAL   R14,NOTEST
         NI    ASUMED1,255-TRUNCQ  TURN OFF TRUNC BIT
         B     SCANE               SCAN FOR NEXT PARM
TRUNCA   OI    ASUMED1,TRUNCQ      TURN ON  TRUNC BIT
         B     SCANE               SCAN FOR NEXT PARM
ZWB1     LA    R15,ZWBA
         BAL   R14,NOTEST          CHECK FOR NOZWB
         NI    ASUMED,255-ZWBSW
         B     SCANE               CONTINUE
ZWBA     OI    ASUMED,ZWBSW
         B     SCANE               CONTINUE
APOST1   OI    ASUMED1,APOSTQ      TURN ON APOST BIT
         B     SCANE               SCAN FOR NEXT PARM
QUOT     NI    ASUMED1,255-APOSTQ  TURN OFF APOST BIT
         B     SCANE               SCAN FOR NEXT PARM
LIB1     LA    R15,LIBRA
         BAL   R14,NOTEST
         NI    ASUMED,BITSET-LIBRQ TURN OFF BIT
         B     SCANE
LIBRA    OI    ASUMED,LIBRQ        TURN ON LIB BIT
         B     SCANE
VERB1    LA    R15,VERBA
         BAL   R14,NOTEST
         NI    ASUMED3,BITSET-VERBRQ TURN OFF LISTING A-TEXT BIT
         B     SCANE               SCAN NEXT PARM
VERBA    OI    ASUMED3,VERBRQ      TURN ON LISTING A-TEXT BIT
         B     SCANE               SCAN NEXT PARM
*
*  THAT IS ALL OF THE EXEC PARAMETERS SCAN
*
MYSAVAD  DC    A(MYSAVE)
FOUR     DC     H'4'
INDATE DS    H
GO     ST    13,SAVER13
         L     R13,MYSAVAD
         ST    R11,ZSAVE11    SAVE R11                            9330
         L     R11,ZABLDL01    ***                                9330
         BR    R11    BR TO DO BLDL                               9330
ZSAVE11  DS    F   SAVE FOR R11                                   9330
ZABLDL01 DC    A(ZBLDL01)   ADCON TO BLDL CSECT                   9330
ZBLDLRET DS    0H                                                 9330
         L     R11,ZSAVE11   RESTORE R11 AT RETURN FROM BLDL      9330
       L     R6,BUFAD
       LR    R15,R6
       LA    R15,0(R15)
       SH    R15,EIGHT
       ST    R15,BUFAD        ADDRESS OF BUFFER CTL BLOCKS
       LH    R4,0(R6)
       LA    R6,2(R6)
         OI    ASUMED,ZWBSW
       LTR   R4,R4
       BZ    NEWDDS
         BAL   R11,SCANA
CORELEFT EQU 128
NEWDDS L     R6,BUFAD
       L     R6,CORELEFT(R6)
       TM    0(R6),X'80'
       BO    LASTPARM
       LA    R6,4(R6)
       L     R6,0(R6)
       LH    R4,0(R6)
       LA    R15,2(R6)
       L     R8,DCBAD
       AH    R4,EIGHT
       SH    R15,EIGHT
       LA    R11,DDA
       BAL   R12,DDCOM
       MVC   GOF+DNAME(8,R8),0(R15)         NEW SYSLIN
DDA    LA    R11,DDB
       LA    R15,16(R15)
       SH    R4,EIGHT
       SH    R4,EIGHT
       BAL   R12,DDCOM
       MVC   LIB+DNAME(8,R8),0(R15)         NEW LIB
DDB    LA    R11,DDC
       BAL   R12,DDCOM
       MVC   IN+DNAME(8,R8),0(R15)          NEW SYSIN
DDC    LA    R11,DDD
       BAL   R12,DDCOM
       MVC   OUT+DNAME(8,R8),0(R15)         NEW SYSPRINT
DDD    LA    R11,DDE
       BAL   R12,DDCOM
       MVC   PCH+DNAME(8,R8),0(R15)         NEW SYSPUNCH
DDE    LA    R11,DDF
       BAL   R12,DDCOM
       MVC   DS1+DNAME(8,R8),0(R15)          SYSUT1
         MVC   SPILL1+DNAME(8,R8),0(R15) AND SPILL
       MVC   DDX,0(R15)
*
*
DDF    LA    R11,DDG
       BAL   R12,DDCOM
       MVC   DS2+DNAME(8,R8),0(R15)          SYSUT2
       MVC   DDX+8,0(R15)
DDG    LA    R11,DDH
       BAL   R12,DDCOM
       MVC   DS3+DNAME(8,R8),0(R15)          SYSUT3
       MVC   DDX+16,0(R15)
DDH    LA    R12,HEADER
       BAL   R12,DDCOM
       MVC   DS4+DNAME(8,R8),0(R15)          SYSUT4
       MVC   DDX+24,0(R15)
HEADER L     R6,BUFAD
       L     R6,CORELEFT(R6)
       LA    R6,4(R6)
       TM    0(R6),X'80'
       BO    LASTPARM
         L     R6,4(R6)
       LH    R4,0(R6)
       LTR   R4,R4
       BZ    LASTPARM
       L     R7,BUFAD
       L     R7,0(R7)
       ST    R6,0(R7)         NEW  OVERFLOW INFO
       LA    R2,4
       LA    R6,2(R6)
       BAL   R15,CONVX
       L     R6,BUFAD
       L     R6,0(R6)
       MVC   10(3,R6),PARWK+5
LASTPARM L   R6,BUFAD
       L     R6,0(R6)
         SP    SIXTY(2),PCON3(1)
         MVC   13(3,R6),SIXTY
       B     DATER
PCON3    DC    X'3C'
DATE1    DC    CL15'JAN  5,1966'
TABLE  DC    C'JAN'
       DC    X'031C'
       DC    C'FEB'
       DC    X'028C'
       DC    C'MAR'
       DC    X'031C'
       DC    C'APR'
       DC    X'030C'
       DC    C'MAY'
       DC    X'031C'
       DC    C'JUN'
       DC    X'030C'
       DC    C'JUL'
       DC    X'031C'
       DC    C'AUG'
       DC    X'031C'
       DC    C'SEP'
       DC    X'030C'
       DC    C'OCT'
       DC    X'031C'
       DC    C'NOV'
       DC    X'030C'
       DC    C'DEC'
       DC    X'031C'
DEPACK STC   R1,0(R2)                        DEPACK SUBROUTINE
       SRL   R1,4
       OI    0(R2),X'F0'
       BCTR  R2,0
       BR    R6
DATER  TIME  DEC
         LA    R2,DATE1+10
       LR    R7,R1
       SRL   R1,16
       BAL   R6,DEPACK        PUT IN YEAR
       BAL   R6,DEPACK
       BCTR  R2,0
       BCTR  R2,0
       BCTR  R2,0
       LR    R1,R7
       SLL   R1,16
       SRL   R1,20
         TM    DATE1+10,X'01'
       BO    NOLEAP
         TM    DATE1+9,X'01'
       BO    DATDECOD    DECADE ODD
         TM    DATE1+10,X'02'
       BO    NOLEAP
       B     LEAP
DATDECOD TM    DATE1+10,X'02'
       BZ    NOLEAP
LEAP   LA    R4,156
       STC   R4,TABLE+9
NOLEAP SLL   R1,4
       LA    R1,12(1)    PUT IN PACKED SIGN
       STH   R1,INDATE
       LA    R6,TABLE
       LA    R12,12
DATEA  CP    INDATE(2),3(2,R6)
       BNH   DATEB
       SP    INDATE(2),3(2,R6)
       LA    R6,5(R6)
       BCT   R12,DATEA
DATEB  LH    R1,INDATE
       SRL   R1,4
         MVC   DATE1(3),0(R6)
       BAL   R6,DEPACK
       LTR   R1,R1
       BZ    DATEC
       BAL   R6,DEPACK
DATEC  L     R6,BUFAD
       L     R6,4(R6)
         MVC   0(15,R6),DATE1
* THIS  FINISHES THE DATE ROUTINE
*  MOVE DD NAMES TO TABLE
       L     R8,DCBAD
       MVC   DDNTBL(8,R8),DNAME+DS1(R8)
       MVC   DDNTBL+8(8,R8),DNAME+DS2(R8)
       MVC   DDNTBL+16(8,R8),DNAME+DS3(R8)
       MVC   DDNTBL+24(8,R8),DNAME+DS4(R8)
         MVC   DDNTBL+32(8,R8),DNAME+SPILL1(R8)
       MVC   DDNTBL+40(8,R8),DNAME+IN(R8)
       MVC   DDNTBL+48(8,R8),DNAME+OUT(R8)
       MVC   DDNTBL+56(8,R8),DNAME+LIB(R8)
       MVC   DDNTBL+64(8,R8),DNAME+PCH(R8)
       MVC   DDNTBL+72(8,R8),DNAME+GOF(R8)
*  NOW CHECK THE FILES
       MVC   HOUT,OUT+XLST(R8)
       MVC   HSIN,IN+XLST(8)
       MVC   HPCH,PCH+XLST(R8)
       MVC   HGOF,GOF+XLST(R8)
       MVC   OUT+XLST(3,R8),ADDOU
       MVC   IN+XLST(3,R8),ADDIN
         MVC   PCH+XLST(3,R8),ADD80P
       MVC   GOF+XLST(3,R8),ADD80
       L     R1,LISTAD
       LA    R1,4(R1)
       OI    8(R1),X'80'
       LR    R8,R1
*OPEN  DS2, DS3, DS4
       OPEN  MF=(E,(1))
*
*
       LA    R8,8(R8)
       NI    0(R8),X'7F'
       LA    R8,4(R8)
       LR    R1,R8
       OPEN  MF=(E,(1))
*OPEN  GOF,PCH,OUT,IN,LIB,SPILL
*
*
* MUST  RECLOSE GOF AND  PCH
       L     R8,DCBAD
       MVC   OUT+XLST(3,R8),HOUT        EXTINGUISH  EXLISTS
       MVC   IN+XLST(3,8),HSIN
       MVC   PCH+XLST(3,R8),HPCH
       MVC   GOF+XLST(3,R8),HGOF
       B     OPEN
HOUT   DS    CL3
HSIN   DS    CL3
HPCH   DS    CL3
HGOF   DS    CL3
OPEN   DS    0H
       MVC   BUFVAL+2,IN+BLKSZE(R8)
       MVC   BUFVAL,OUT+BLKSZE(R8)
       MVC   BUFVAL+4,LIB+BLKSZE(R8)
       MVC   BUFVAL+6,PCH+BLKSZE(R8)
       MVC   BUFVAL+8,GOF+BLKSZE(R8)
       B     OPENB
BUFVAL DC    H'121'      SYSPRINT       EDITING  FACTORS
       DC    H'80'       SYSIN
       DC    H'80'       SYSLIB
       DC    H'80'       SYSPUNCH
       DC    H'80'       SYSLIN
*
*NOW WE TEST THE STATUS OF OPENS
OPENOK EQU   48
OPENB  DS    0H
       L     R8,DCBAD
       LA    R9,9
OPENK2 LA    R8,88(R8)   START WITH OS2 AND INCREMENT
       TM    OPENOK(R8),X'10'
       BO    OPENK1
       LR    R15,R9
       BCTR  R15,0
       SLL   R15,2
       LA    R15,NOPED(R15)
         L     R15,0(R15)
       BR    R15
OPENK1 BCT   R9,OPENK2
       B     CLOSEDS
NOPED  DC    A(NOSYSGF)       COULD  NOT OPEN  DATA SET     SYSLIN
       DC    A(NOSYSPH)                                     SYSPUNC
       DC    A(NOSYSLB)                                     SYSLIB
       DC    A(NOSYSPR)                                     SYSPUNC
       DC    A(NOSYSIN)                                     SYSIN
       DC    A(NODS1)                                       SYSUT1
       DC    A(NODS4)                                       SYSUT4
       DC    A(NODS3)                                       SYSUT5
       DC    A(NODS2)                                       SYSUT6
IKF011   CSECT
MYSAVE   DS    18F
* THIS ROUTINE GUES MESSAGES TO WRITE ON SYSPRINT OR CONSOLE
* IF SYSPRINT IS NOT OPENABLE
*
* RETURN IS  VIA  REG 14 (R14)
* REGISTER 15 (R15) POINTS TO MESSAGE
* FORMAT OF  MESSAGE IS
*      LENGTH - HALF WORD
*      TEXT  FOLOWING
*
QUE    STM   R10,R11,QUESAVE
       LH    R10,MSUSED
       AH    R10,0(R15)
       LA    R10,2(R10)
       CH    R10,MSLNGTH
       BH    QUEB
*
QUEA   LA    R11,MSGS
       AH    R11,MSUSED
       STH   R10,MSUSED
       LH    R10,0(R15)
       LA    R10,1(R10)
       EX    R10,MOVEQUE
QUEB   LM    R10,R11,QUESAVE
       BR    R14
QUESAVE DS   2F
MSUSED  DC   H'0'
MSLNGTH  DC     H'999'
MOVEQUE  MVC  0(0,R11),0(R15)
NODS1  MVC   MESSB,MSYSD1
NODS1A OI    NORUN,X'FF'
       LA    R15,MESSAX
       BAL   R14,QUE
       B     OPENK1
MESSAX   DC    H'60'
         DC    C'IKF0006I-'
MESSB    DS    CL8
         DC    CL1' '
       DC    C'DATASET NOT USABLE,JOB STEP CANNOT EXECUTE'
MSYSD1 DC    CL8'SYSUT1'
MSYSD2 DC    CL8'SYSUT2'
MSYSD3 DC    CL8'SYSUT3'
MSYSD4 DC    CL8'SYSUT4'
MSYSOU DC    CL8'SYSPRINT'
MSYSIN DC    CL8'SYSIN'
NODS2  MVC   MESSB,MSYSD2
       B     NODS1A
NODS3  MVC   MESSB,MSYSD3
       B     NODS1A
NODS4  MVC   MESSB,MSYSD4
       B     NODS1A
NOSYSIN MVC  MESSB,MSYSIN
       B     NODS1A
NOSYSPR MVC  MESSB,MSYSOU
         OI    NOPR,X'FF'
       B     NODS1A
NOSYSGF  TM  ASUMED,X'10'
       BZ    OPENK1
       NI    ASUMED,X'EF'
         MVC   BUFVAL+8,ZERO
       LA    R15,NOGOF
       LA    R14,OPENK1
       B     QUE
NOGOF    DC    H'53'               MESSAGE LENGTH
         DC    C'IKF0007I-W SYSLIN   NOT USABLE, LOAD OPTION CANCELLED'
NOSYSPH  TM  ASUMED,X'20'
       BZ    OPENK1
       LA    R15,NODEC
       LA    R14,OPENK1
       NI    ASUMED,X'DF'
       MVC   BUFVAL+6,ZERO
       B     QUE
NOPR   DC    X'00'
NORUN  DC    X'00'
NODEC    DC    H'52'
         DC    C'IKF0008I-W SYSPUNCH NOT USABLE, DECK OPTION CANCELLED'
NOSYSLB  NI    ASUMED,X'FD'
         MVC   BUFVAL+4,ZERO
         OI    NOLIB,X'FF'
         B     OPENK1
NOLIB    DC    X'00'
CLOSEDS L    R8,LISTAD
       LA    R1,16(R8)
       OI    20(R8),X'80'
       CLOSE MF=(E,(1))       CLOSE SYSPUNCH,SYSLIN
       NI    20(R8),X'7F'
         L     R1,ADECBLIB   GET ADDR OF DECB FOR SYSLIB          40329
         L     R8,D8(R1)  GET  ADDR OF SYSLIB DCB                 40329
         TM    D36(R8),UNDEF    IS REC FORMAT UNDEFINED           40329
         BNO   CLOSEDS1        NO, BRANCH                         40329
         MVC   D6(D2,R1),BLKSZE(R8)   MOVE BLKSIZE TO SYSLIB DECB 40329
CLOSEDS1 DS    0H                                                 40329
*
*
*
*
*
*
*
*                                                                *
*
         LA    R10,4
         LA    9,DDX
DEVB     MVC   DATASET,0(R9)
         LA    R9,8(R9)
         DEVTYPE  DATASET,INFO
         L     R7,INFO+4
         C     R7,MINDEV
         BH    DEVC
         ST    R7,MINDEV
DEVC     BCT   R10,DEVB
         B     CORAVAL
*
*
*
DATASET  DS  CL8
INFO   DS    1F
       DC    F'3600'
MINDEV DC    F'65000'
DDX    DC    CL8'SYSUT1'
       DC    CL8'SYSUT2'
       DC    CL8'SYSUT3'
       DC    CL8'SYSUT4'
*
*
*        CALCULATE AMOUNT OF CORE AVAILABLE FOR TABLE SPACE, BUFFER
*                AND DICTIONARY SPACE.
*        TABLE, DICTIONARY AND BUFFER SIZE =
*               ALLOCATED CORE SIZE   MINUS
*              (LENGTH OF PH00 + LENGTH OF PHASE 5
*               + DATA MANAGEMENT SPACE
*               + SUPERVISOR WORK AREA )
*
*
*        TABLE AND DICTIONARY SPACE MUST BE AT LEAST 5174 BYTES
*
         SPACE 2
CORAVAL  TM    NORUN,HEXFF         NO RUN?                        46891
         BO    EOJMSG                                             46891
         L     R15,CORE            GET SIZE PARAMETER             46891
         C     R15,ASSUMSIZ
         BNL   BCB
*   SIZE IS LESS THAN ASSUMED.
*  THIS IS NOW TREATED AS AN ERROR.  AN ERROR MESSAGE IS GIVEN AND
*   THE MINIMUM SIZE IS USED
         LA    R15,SZBFIG  MESSAGE ADDRESS
       MVC SZBFIG+37(7),CMIN
         MVC   SZBFIG+13(4),CSIZE
         BAL   R14,QUE  PUT IN PRINT QUE
       MVC   CORE,ASSUMSIZ        USE MINIMUM SIZE
         B     BUFGVN
BCB      TM    BFGVSW,X'FF'        TEST IF BUFF AND SIZE GIVEN
         BC    9,BUFGVN            BRANCH IF BOTH OR NONE
         TM    BFGVSW,X'F0'      TEST IF BUFF GIVEN
         BO    BUFGVN            YES
         L     R15,CORE
         S     R15,ASSUMSIZ   GIVE 1/4 CORE ABOVE 80K TO BUFFERS
         BC    12,BUFDEFLT
         SRL   R15,2
         A     R15,NORMBUF   ADD IN DEFAULT BUFFER SIZE           41505
         ST    R15,BUFSZ
COR1     L     R15,CORE
         S     R15,LONGPHSE        SUBTRACT LONG PHASE AND PHSE 00
         S     R15,DATAMAN         SUBTRACT DATA MAN SPACE + SUP WK
         ST    R15,CORENEED        STORE AMOUNT AVAIL FOR GETMAIN
         S     R15,BUFSZ           SUBTRACT BUFFER SIZE GIVEN
         C     R15,MINSP           IS MINIMUM TABLE SPACE AVAIL
         BNL   BUFFERS             BRANCH IF YES
         A     R15,BUFSZ                ADD BACK BUFSZ
         S     R15,NORMBUF              SUBTRACT USER DEFAULT BUFSI
         C     R15,MINSP                IS MINIMUM SPACE AVAILABLE
         BL    USEMIN                   IF STILL NO,MUST USE MINBUF
         MVC   BUFSZ,NORMBUF            OTHERWISE,USE NORMBUF
         MVC   SZBFIG+37(7),CDEFLT      MOVE WORD DEFAULT TO MESSAG
         B     USEMIN+12
USEMIN   MVC   BUFSZ,MINBUF             MOVE MINIMUM BUF TO BUFSZ
         MVC   SZBFIG+37(7),CMIN        MOVE WORD MINIMUM TO MESSAG
         LA    R15,SZBFIG          LOAD ADDRESS OF MESSAGE,IGNORE B
         MVC   SZBFIG+13(4),CBUFFER     MOVE BUFFER WORD TO MESSAGE
         BAL   R14,QUE
         B     BUFFERS
*
*
* NOW  WE ARE  READY TO BUILD THE BUFFERS
*
CDEFLT   DC    C'DEFAULT'
CMIN     DC    C'MINIMUM'
MINSP    DC    F'2048'      MININUM SPACE FOR TABLES
         DS    0F
DATAMAN  DC    XL4'1C00'  THIS CONSTANT IS ASSEMBLED FOR MFT OR PCP
SIXK     DC    F'6144'         6K
CSIZE    DC    C'SIZE'
CBUFFER  DC    C' BUF'
SZBFIG   DC    H'48'
         DC    C'IKF0009I-W SIZE PARAMETER IGNORED, DEFAULT USED.'
BUFMIN   DC    F'1280'
SAVE15   DS    F
BUFERR   DC    H'75'
         DC    C'IKF0015I-C BUF PARM TOO SMALL FOR DD-CARD BLKSIZES - CX
               OMPILATION ABANDONED.'
*
ZERO   DC    F'0'
BUFFERS  TM  ASUMED,X'20'     NO DECK
       BO    BA                              SET DEFAULTED  DATASET
       MVC   BUFVAL+6,ZERO                   BLOCKSIZES TO  ZERO
BA     TM    ASUMED,X'10'
       BO    BB
       MVC   BUFVAL+8,ZERO    NO  LOAD
BB     TM    NOLIB,X'FF'      NO   LIBRARY
       BZ    BC
       MVC   BUFVAL+4,ZERO
*
* NOW  WE DETERMINE THE SIZE OF BUFFER SIX
*
*
BC     LH    R14,BUFVAL    SYSPRINT
       LR    R15,R14
       AH    R14,BUFVAL+2    R14=SYSPRINT+SYSIN+SYSLIB
       AH    R14,BUFVAL+4
       AH    R15,BUFVAL+6     R15=SYSPRINT+SYSPUNCH+SYSLIN
       AH    R15,BUFVAL+8
       SLDL  R14,1
       CR    R14,R15
       BH    BCA
       ST    R15,SZSIX        SIZE OF BUFFER SIX
         B     BCC
SZSIX  DS    F
BCA    ST    R14,SZSIX
BCC      B     BUFGIVEN
ASSUMSIZ DC    F'81920'
BUF6   DC    F'6'
BUF5   DC    F'5'
SZFIVE DS    F
SZBUF  DS    F
BUFGIVEN L   R15,BUFSZ
       SR    R14,R14          COMPUTE  A=B/6
       D     R14,BUF6
       ST    R15,SZFIVE
       C     R15,SZSIX        IS   D GT OR  EQ  BUFFER6
       BNL   C
       L     R15,BUFSZ
         S     R15,SZSIX                SUBTRACT FROM TOTAL BUF BUF
         C     R15,BUFMIN               DO WE HAVE SPACE FOR BUF1-B
         BNL   BUFOK                    IF ENOUGH SPACE,BYPASS ERRO
         ST    R15,SAVE15               SAVE BUF
         LA    R15,BUFERR               PICK UP ERROR MESSAGE WITH
         BAL   R14,QUE                  BRANCH AND LINK R14 TO QUE
         OI    NORUN,X'FF'
EOJMSG   LH    R15,BUFVAL          BUFF FOR OUT/TERM              46891
         CH    R15,ONE21
         BE    PRNTSPCE
         L     R15,DCBAD
         MVC   OUT+BLKSZE(2,R15),ONE21
PRNTSPCE GETMAIN VU,LA=EOJMINSP,A=CORENEED
         LA    R2,BUFCTLS+48
         L     R3,CORENEED
         LA    R4,ONE21
         BAL   R14,ECOMM           BUILD SYSPRINT BUFFER CONTROL
         BAL   R14,ECOMM                       BLOCKS
         L     R8,BUFAD
         MVC   SPRINT(16,R8),BUFCTLS+48
         OI    BUFGOT,BYES  SIGNAL THAT GETMAIN IS DONE           40616
         B     CE
EOJMINSP DC    F'248'
EOJMAXSP DC    F'2048'
BUFOK    SR    R14,R14                  CLEAR R14 TO ZERO
         D     R14,BUF5                 DIVIDE REMAINING BUF BY 5
       ST    R15,SZFIVE       SET  D=(A-B)/5
C      L     R15,SZFIVE
       C     R15,MINDEV
       BL    CA
       MVC   SZFIVE,MINDEV
CA     L     R15,SZFIVE
       C     R15,SZSIX
       BL    CB
       ST    R15,SZSIX        MAKE SIX= ONE-FIVE
CB     SLL   R15,2
       A     R15,SZFIVE
       A     R15,SZSIX        COMPUTE  D=5XEN+LAREROF(EN OR C)
       ST    R15,SZBUF
       TM    SZBUF+3,X'03'      TEST IF TOTAL BUF FACTOR OF 4
       BZ    CC                 BRANCH IF YES
       SRL   R15,2              ADD TO
       SLL   R15,2                  MAKE SIZE
       LA    R15,4(R15)                    MULTPLE OF 4
       ST    R15,SZBUF
       B     CC
BUFGVN   L     R15,MINBUF    LOAD R15 WITH BUFFER MINIMUM
*                             IS SPECIFIED BUFFER ENOUGH
       C     R15,BUFSZ        IF NOT-DEFAULT
         BNH   COR1
         LA    R15,SZBFIG
         MVC   SZBFIG+13(4),CBUFFER
         MVC   SZBFIG+37(7),CMIN
         BAL   R14,QUE
BUFDEFLT L     R15,MINBUF         MINIMUM BUFFERS
         ST    R15,BUFSZ
         B     COR1
         DS    0F
BUFGOT   DC    X'00'   INDICATES IF BUF SPACE WAS GETMAINED       40616
BYES     EQU   X'FF'                                              40616
LONGPHSE DC    F'0'             LONG PHASE = PH00 + LONGEST PHASE 9330
COREXTRA DC  F'0'
NORMBUF  DC    F'&BUF'
MINBUF   DC    F'2768'
CORENEED DS  1D
ADRESS   DS  F
RESULTS EQU  ADRESS
LENGTH   DS  F
CC       L     R0,CORENEED         LOAD REG WITH AMOUNT OF CORE NEE
         SRL   R0,3                ROUND TO NEAREST DOUBLE WORD
         SLL   R0,3
         ST    R0,RESULTS+4        STORE AMOUNT
         L     R0,SZBUF
         A     R0,MINSP
         SRL   R0,3
         SLL   R0,3
         ST    R0,RESULTS
         CLI   MVTSW,MVTYES  IS IT MVT                            9330
         BNE   CD     NO IT MFT OR PCP                            9330
         L     R7,RESULTS         R7 EQUALS MINIMUM LENGTH REQUIRED
         AH    R7,MVTROUND        ROUND MINIMUM LENGTH REQUIRED
         SRL   R7,11              UP TO 2K MULTIPLE
         SLL   R7,11              TO HELP INSURE CONTIGUOUS
         ST    R7,RESULTS         MAIN FREE AREA
         L     R7,RESULTS+4       R7 EQUALS MAXIMUM LENGTH REQUIRED
         AH    R7,MVTROUND        ROUND MAXIMUM LENGTH REQUIRED
         SRL   R7,11              UP TO 2K MULTIPLE
         SLL   R7,11              TO HELP INSURE CONTIGUOUS
         A     R7,SIXK  ADD IN AMOUNT NEEDED FOR MVT
         ST    R7,RESULTS+4       MAIN FREE AREA
CD       GETMAIN  VU,LA=RESULTS,A=CORENEED
CE       L     R0,CORENEED+4       R0 = LENGTH OF GETMAINED AREA
         L     R1,CORENEED
         ST    R1,TAMERUSE
         AR    R0,R1
         ST    R0,TAMERUSE+8
         TM    BUFGOT,BYES  IS PRINT BUFFER BUILT                 40616
         BO    E3   YES - NEED SYSPRINT BUFFER ONLY
         S     R0,SZBUF
         ST    R0,TAMERUSE+4
         ST    R0,RESULTS
*
*
       B     E1
TAMERUSE DS  F           START  TAMER AREA
         DS  F           END OF TAMER AREA
         DS    F                  ADDRESS OF END OF GETMAINED AREA
* THIS  SUBROUTINE  BUILDS  BUFFER CTL BLOCKS AND STORES THEM
*      R2=   WHERE TO  STORE  BUFCTLBLOCKS
*      R3=   ADD  BUFFER
*      R4=   POINTS TO HALF WORD LENGTH
*      RETURN   VIA  REG 14
*      UPDATES  R3
ECOMM  ST    R3,0(R2)
       LH    R15,0(R4)
       ST    R15,4(R2)
       LA    R2,8(R2)
       AR    R3,R15
       BR    R14
BUFCTLS  DS  16D
BUFSVE   DS  F
*
*
*
E1        L     R4,SZFIVE
         SRL   R4,2
          SLL   R4,2
          ST   R4,SZFIVE
         LA     R4,SZFIVE+2
       LA    R2,BUFCTLS
       L     R3,RESULTS       SET UP BUFFERS  1-5
       LA    R9,5
E2     BAL   R14,ECOMM
       BCT   R9,E2
       ST    R3,BUFSVE
*
       BAL   R14,ECOMM        SET  BUF  SIX AS A WHOLE
       L     R3,BUFSVE
       LA    R4,BUFVAL
       BAL   R14,ECOMM        SYSOUT
       BAL   R14,ECOMM        SYSOUT
       ST    R3,BUFSVE
       LA    R4,2(R4)
       BAL   R14,ECOMM        SYSIN
       BAL   R14,ECOMM        SYSIN
       LA    R4,2(R4)
*
       BAL   R14,ECOMM     SYSLIB
       BAL   R14,ECOMM     SYSLIB
       LA    R4,2(R4)
       L     R3,BUFSVE
       BAL   R14,ECOMM     SYSPUNCH
       BAL   R14,ECOMM     SYSPUNCH
       LA    R4,2(R4)
       BAL   R14,ECOMM     SYSLIN
       BAL   R14,ECOMM     SYSLIN
* ALL  BUFFERS  BUILT
*      NOW   WE MOVE THE  PARAMS TO  PHASE0
E3       L     R8,BUFAD
       MVC   0(8,R8),BUFCTLS+120
         MVC   8(120,R8),BUFCTLS
         MVC   INBUF(LX2,R8),DX78(R8) STORE SYSIN BLKSIZE         40329
         MVC   LIBSIZE(LX2,R8),DX94(R8) STORE SYSLIB BLKSIZE      40329
         MVC   132(8,R8),TAMERUSE  TAMER START,END
       MVC   128(4,R8),TAMERUSE+8
         L     R8,ADSWIT
         MVI   0(R8),X'80'  ACTIVATE PRINTER
         LA    2,IDENTMS
         MVC   IDATE+5(11),DATE1
         TM    NOPR,X'FF'         WAS PRINTER OPENED
         BO    F                  NO, DON'T PRINT
         BAL   11,PRINT            PRINT HEADER
         LA    2,BLKPRNT
         BAL   11,PRINT
         L     R2,DCBAD            LOAD REG WITH DCB1 ADD IN PH00
         SH    R2,EIGHT            SUBTRACT EIGHT
         L     R2,0(R2)            GET ADDRESS OF CARRIAGE CONT CHA
         MVI   0(R2),X'F1'         MOVE SKIP PAGE CHARACTER
       B      F
* THIS  ROUTINE PRINTS OUT  ACCUMULATED  MESAGES
PRINT  SR    R3,R3
       IC    R3,1(R2)
       L     R1,COSADR
       LA    R2,2(R2)
       BALR  0,R1
       DC    X'16'
       L     R1,COSADR
       BALR  0,R1
       DC    X'86'
       BCTR  R2,0
       BCTR  R2,0
       BR    R11
TYPE   MVC   TYPEA,0(R2)
       SR    R1,R1
       IC    R1,1(R2)
       BCTR  R1,0
       STC   R1,MOVET+1
         LA    R1,TYPEA
MOVET  MVC   TYPEB,2(R2)
       LH    R15,TYPEA
       LA    R15,4(R15)
       STH   R15,TYPEA
       SVC   35
       BR    R11
PUT    TM    NOPR,X'FF'                 PUT OUT  MESAGES
       BO    PUTA
       BAL   R11,PRINT
       B     PUTB
PUTA   BAL   R11,TYPE
PUTB   BCTR  R4,0
       BCTR  R4,0
       SR    R15,R15
       IC    R15,1(R2)
       SR    R4,R15
       BC    12,G
       AR    R2,R15
       LA    R2,2(R2)
       B     PUT
F        LH    R4,MSUSED
       LTR   R4,R4
       BC    12,G
         L     R2,COSADR
         L     R2,ERRSEV1
         MVI   0(R2),X'04'
       LA    R2,MSGS
       B     PUT
G        EQU   *
         TM    NORUN,X'FF'
         BZ    H
         TM    NOPR,X'FF'
         BZ    K
         NI    0(R8),X'7F'        DE-ACTIVATE PRINTER
K        L     R1,COSADR          INDICATE END OF JOB
         BALR  0,R1
         DC    X'B1'
H        L     R8,BUFAD
         MVC   140(1,R8),NOLIB
         USING COS,R1
         L     R1,COSADR
         TM    ASUMED,PMAPQ        PMAP
         BO    HI                  YES
         TM    ASUMED1,CLISTQ      CLIST
         BO    HI                  YES
         NI    ASUMED3,BITSET-VERBRQ TURN OFF LISTING A-TEXT
HI       MVC   PHZSW,ASUMED        FIRST PHASE SWITCH SWITCH TO COMMON
         MVC   PHZSW1,ASUMED1      SECOND PHASE SWITCH TO COMMON
         MVC   PHZSW3,ASUMED3      THIRD PHASE SWITCH TO COMMON
* * *
*                                  CONVERT SPACING TO ZONED DECIMAL
* * *
         CLI   BLANK1,C'-'
         BNE   BL1
         MVI   TEMPBLNK,X'F3'
         B     MOVEBLNK
BL1      CLI   BLANK1,C'0'
         BNE   BL2
         MVI   TEMPBLNK,X'F2'
         B     MOVEBLNK
* * *
*                                  IT MUST BE EITHER 1 OR BLANK
*
BL2      MVI   TEMPBLNK,X'F1'
MOVEBLNK MVC   SPACING,TEMPBLNK
* * *
*                                  CONVERT CORESIZE AND BUFFERSIZE
*                                  PACKED DECIMAL; LINECNT CONVERTE
*                                  TO ZONED DECIMAL
* * *
         L     R11,CORE
         CVD   R11,PARWK
         MVC   CORESZ(4,R1),PARWK+4
         L     R11,BUFSZ
         CVD   R11,PARWK
         MVC   BUFFSIZE(4,R1),PARWK+4
         UNPK  CNTLINE(D2),SIXTY
         TM    ASUMED,LIBRQ
         BNO   PH01OUT             RETURN TO PH00
         L     R1,COSADR           PASS ADDR OF COS TO PREPROC
         L     R14,APBEG03         ADDR OF PREPROCESSOR
         BR    R14                 PERFORM BASIS/COPY FUNCTION
         DROP  R1
APBEG03  DC    A(PBEG03)           ADDR OF PREPROC
PH01OUT  BALR  0,R1
         DC    X'A1'
*
*
*                                  MVT CONSTANTS FOR COBOL SPACE
*
*                                  KEEP FOLLOWING 10 CARDS TOGETHER
         DS    0F
MVTCONST DC    XL4'2800'           MVT COBOL SPACE PH1A
         DC    XL4'7800'           MVT COBOL SPACE PH1B
         DC    XL4'2800'           MVT COBOL SPACE PH20
         DC    XL4'B800'           MVT COBOL SPACE PH30
         DC    XL4'5000'           MVT COBOL SPACE PH40
         DC    XL4'0000'           MVT COBOL SPACE PH50
         DC    XL4'7800'           MVT COBOL SPACE PH60
         DC    XL4'E000'           MVT COBOL SPACE PH6A
         DC    XL4'4000'           MVT COBOL SPACE PH70
         DC    XL4'4000'           MVT COBOL SPACE PH70 CONSTANT
TYPEA  DC    AL2(0)
       DC    AL2(0)
TYPEB  DC    CL72' '
BLKPRNT  DC    H'4'
         DC    C'    '
TEMPBLNK DC    X'00'
BUFFSIZE EQU   X'1E4'
CORESZ   EQU   X'1E8'
MVTYES   EQU   X'FF'
INBUF    EQU   X'90'               IN PHASE 00                    40329
LIBSIZE  EQU   X'8E'               IN PHASE 00                    40329
DX78     EQU   78                                                 40329
DX94     EQU   94                                                 40329
SPRINT   EQU   X'38'
BITSET   EQU   255
IDENTMS  DC    H'120'
         DC    CL41'  CB545 V2 LVL78 01MAY72'  COBOL HEADER
         DC    CL62'IBM OS AMERICAN NATIONAL STANDARD COBOL'   X
IDATE    DC    CL17'DATE'                      X
MSGS     DS    CL999
MVTSW    DC    X'00'
MVTROUND DC    H'2047'            EQUALS 2K-1
         EJECT                                                    9330
**********************************************************************
**********************************************************************
**THIS ROUTINE CALCULATES THE VALUE OF LONGPHSE AND SETS THE COBOL9330
**SPACE CONSTANTS IN PHASE00.                                     9330
**********************************************************************
**********************************************************************
*                                                                 9330
**BUILD LIST OF ALL PHASE NAMES IN THIS COMPILER , WITH THE EXCEPTION
** OF PHASE01 ,WHOSE SIZE IS NOT NEEDED.                          9330
*                                                                 9330
         USING ZBLDL01,R11                                        9330
ZBLDL01  CSECT                                                    9330
         STM   R0,R15,ZBSAVE                                      9330
         MVI   ZLL+D1,ZNTRYLEN    SET ENTRY LENGTH IN LIST        9330
         L     R10,ZALNKNPT       PT TO 1ST 2-BYTE VARIABLE PORTION
*                                  OF LINKNAME IN PHASE00         9330
         MVC   TEMPLIST(40),D0(R10)                               9330
         LA    R6,TEMPLIST                                        9330
         LA    R8,D1              ENTRY CTR. PH00 ENTRY IS ASSEMBLED.
         LA    R9,ZNAME2          PT TO NAME FIELD IN 2ND ENTRY   9330
ZB00     L     R10,ZALNKNPT             GET ADDR OF PHASE NAMES   9330
         SR   R7,R7                                               9330
         LR    R3,R6   SAVE  ADDR OF TEMPLIST                     9330
ZB01     CLC   D0(D2,R6),D2(R3) ARE TWO LINK VARIABLES IN SEQUENCE
         BNH   ZB01A     YES BRANCH                               9330
         XC    D0(D2,R6),D2(R3) INTERCHANGE
         XC    D2(D2,R3),D0(R6) THESE TWO
         XC    D0(D2,R6),D2(R3) NAMES
ZB01A    CLI   D2(R3),ZXFF     IS IT THE LAST LINK VARIABLE       9330
         BE    ZB02   YES  GO TO STORE THAT NAME IN BLDL LIST     9330
         LA    R3,D2(R3)                                          9330
         B     ZB01    CHECK NEXT NAME                            9330
ZB02     CLC   D0(D2,R10),D0(R6) FIND MATCH IN ORIGINAL LINK
         BE    ZB02A     BRANCH ON HIT TO SAVE POSITION BEFORE SORT
         LA    R10,D2(R10)                                        9330
         LA    R7,D1(R7)                                          9330
         B     ZB02                                               9330
ZB02A    SLA   R7,D2                                              9330
         STC   R7,INVERSE-D1(R8)                                  9330
         MVC   D0(D6,R9),ZNAME1
         MVC   D6(D2,R9),D0(R6)
         LA    R8,D1(R8)                                          9330
         CLI   D2(R6),ZXFF                                        9330
         BE    ZB02B                                              9330
         LA    R6,D2(R6)                                          9330
         LA    R9,ZNTRYLEN(R9)    PT TO NEXT ENTRY                9330
*                                                                 9330
*                                                                 9330
         BNE   ZB00               NO                              9330
*                                                                 9330
**THE LIST HAS NOW BEEN BUILT.  ISSUE BLDL AND MOVE SIZES TO WORK AREA.
ZB02B    DS    0H    *                                            9330
         STH   R8,ZFF             SET NUM OF ENTRIES              9330
*                                                                 9330
         BLDL  0,ZBLIST                                           9330
*                                                                 9330
         LM    R0,R15,ZBSAVE                                      9330
*                                                                 9330
         LA    R10,ZPH00SIZ+ZNTRYLEN PNT TO 2ND MOD SIZE IN LIST  9330
         SR    R3,R3    CLEAR  R3                                 9330
         MVC   ZPHSIZES+1(D3),ZPH00SIZ MOVE PH0 SIZE INTO WORKAREA
         LH    R8,ZFF             GET NUM OF ENTRIES              9330
        BCTR  R8,R0                                               9330
         SR    R7,R7                                              9330
         LA    R6,INVERSE                                         9330
ZB03     DS    0H      *                                          9330
         LA    R9,ZPHSIZES+4  POINT TO 2ND ENTRY IN WORKAREA      9330
         IC    R3,INVERSE(R7)  LOCATE ORIGINAL POSITION FOR EACH PHASE
         AR    R9,R3  BEFORE THE SORT AND ADD IT TO WORK AREA     9330
         MVC   D1(D3,R9),D0(R10)
         CLC   D1(D3,R9),ZLONG+D1
         BNH   ZB04               *                               9330
         MVC   ZLONG+D1(D3),D1(R9)
ZB04     DS    0H                 *                               9330
         LA    R10,ZNTRYLEN(R10)                                  9330
         LA    R7,D1(R7)                                          9330
         BCT   R8,ZB03            *                               9330
*
*
*
*                                                                 9330
**WE NOW HAVE ALL PHASE SIZES AND LONGEST PHASE SIZE.             9330
*                                                                 9330
*                                                                 9330
         SR    R1,R1                                              9330
         L     R2,D16(R1)     POINT TO CVT                        9330
         TM    CONFIG(D2),MVTBIT                                  9330
         BNO   ZB07  THIS IS NOT MVT
         L     R1,AMVTSW                                          9330
         MVI   D0(R1),MVTYES                                      9330
         L     R1,ADATAMAN  GET ADDR OF DATA MAN CON
         MVC   D0(D4,R1),MVTDAMAN  MOVE 6K TO DATAMAN  FOR MVT
*ROUND UP TO 2K MULTIPLE                                          9330
         LH    R8,ZFF                                             9330
         LA    R10,ZPHSIZES                                       9330
ZB05     DS    0H                 *                               9330
         L     R9,D0(R10)                                         9330
         AH    R9,ZMVTRND                                         9330
         SRL   R9,D11                                             9330
         SLL   R9,D11                                             9330
         ST    R9,D0(R10)                                         9330
         LA    R10,D4(R10)                                        9330
         BCT   R8,ZB05            *                               9330
         L     R9,ZLONG                                           9330
         AH    R9,ZMVTRND                                         9330
         SRL   R9,D11                                             9330
         SLL   R9,D11                                             9330
         ST    R9,ZLONG                                           9330
*                                                                 9330
**SET LONGPHSE (= PH00 + LONGEST PHASE) AND COBOL SPACE CONSTANTS.9330
*                                                                 9330
ZB06     DS    0H                 *                               9330
ZB07     DS    0H                 *                               9330
         L     R9,ZLONG   LONGEST PHASE
         A     R9,ZPH00LEN   ADD IN PHASE0
         ST    R9,LONGPHSE    STORE IN LONG PHASE
ZB08     DS    0H                 *                               9330
         XC    ZPH00LEN(D4),ZPH00LEN NO COBOL SPACE CONST FOR PH00
         L     R10,APCBSPT        PT TO COBOL SPACE CONSTANTS IN PH00
         L     R10,0(R10)           *                             9330
         LA    R9,ZPHSIZES        PT TO SIZES IN WORK AREA        9330
         LH    R8,ZFF             NUM OF ENTRIES                  9330
ZB09     DS    0H                 *                               9330
         CLC   D0(D4,R9),ZZEROES
         BE    ZB10               NO COBOL SPACE CONSTANT FOR THIS PH
         L     R7,ZLONG                                           9330
         S     R7,D0(R9)          COBOL SPACE = LONGEST PH - THIS PH
         ST    R7,D0(R10)                                         9330
         LA    R10,D4(R10)                                        9330
ZB10     DS    0H                 *                               9330
         LA    R9,D4(R9)                                          9330
         BCT   R8,ZB09            *                               9330
         SH    R10,ZHW4           LAST CONSTANT IS REPEATED       9330
         MVC   D4(D4,R10),D0(R10)
         LM    R0,R15,ZBSAVE      RESTORE REGS                    9330
         B     ZBLDLRET           AND RETURN                      9330
*                                                                 9330
ZBSAVE   DS    16F                *                               9330
ZPHSIZES DC    21F'0'             ALLOW FOR 21 PHASES             9330
ZPH00LEN EQU   ZPHSIZES           *                               9330
ZLONG    DC    F'0'                                               9330
ZZEROES  DC    F'0'               *                               9330
ZMVTRND  DC    H'2047' *                                          9330
ZHW4     DC    H'4'               *                               9330
*                                                                 9330
ZBLIST   DS    0H                 BLDL LIST                       9330
ZFF      DS    H                  NUMBER OF ENTRIES               9330
ZLL      DC    H'0'               LENGTH OF EACH ENTRY (MUST BE EVEN)
ZNAME1   DC    CL8'IKFCBL00'      FIRST ENTRY IN LIST             9330
         DS    6X                 *                               9330
ZUSERDAT EQU   *                                                  9330
         DS    10X                *                               9330
ZPH00SIZ DS    3X     MODULE SIZE IN BYTES 23,24,25               9330
*                                                                 9330
         DS    X                  *                               9330
ZNAME2   DS    20XL28             ALLOW FOR MAX OF 20 MORE ENTRIES9330
TEMPLIST DC    40X'00'     *                                      9330
INVERSE  DC    20X'00'  *                                         9330
AMVTSW   DC    A(MVTSW)        ADCON                              9330
ADATAMAN DC    A(DATAMAN)    ADCON
MVTDAMAN DC    F'6144'   DATAMAN CON FOR MVT IS 6K
ZXFF     EQU   X'FF'                                              9330
ZNTRYLEN EQU   28                                                 9330
*
IKF012   CSECT
***
*                      PREPROCESSOR EQUATES
***
*****
*        GENERAL REGISTER SYMBOLIC EQUATES
*****
C0       EQU   0    WORK REGISTERS
C1       EQU   1
C2       EQU   2
C3       EQU   3
C13      EQU   13   SAVEAREA REGISTER
C4       EQU   14
C5       EQU   15
B1       EQU   5    BASE REGISTERS
B2       EQU   6
B3       EQU   7
B4       EQU   9
W1       EQU   10   WORK REGISTERS
W2       EQU   11
W3       EQU   12
L1       EQU   8    BRANCH AND LINK REGISTER
S1       EQU   4    INPUT POINTER
*****
*        AFTER TEST UNDER MASK INSTRUCTIONS
*****
ALLON    EQU   1
MIXED    EQU   4
ALLOFF   EQU   8
*****
*        AFTER COMPARE INSTRUCTIONS
*****
EQ       EQU   8
NE       EQU   7
GT       EQU   2
LT       EQU   4
GE       EQU   11
LE       EQU   13
*****
*        AFTER ARITHMETIC INSTRUCTIONS
*****
TZERO    EQU   8
NZERO    EQU   7
PLUS     EQU   2
MINUS    EQU   4
OVFL     EQU   1
NPLUS    EQU   13
NMINUS   EQU   11
*****
*        DISPLACEMENT AND LENGTH EQUATES
*****
DX0      EQU   0
DX1      EQU   1
DX2      EQU   2
DX3      EQU   3
DX4      EQU   4
DX5      EQU   5
DX6      EQU   6
DX7      EQU   7
DX8      EQU   8
DX11     EQU   11
DX12     EQU   12
DX13     EQU   13
DX24     EQU   24
DX25     EQU   25
DX60     EQU   60
DX61     EQU   61
LX66     EQU   66
DX71     EQU   71
DX72     EQU   72
         SPACE 1
LX0      EQU   0
LX1      EQU   1
LX2      EQU   2
LX3      EQU   3
LX4      EQU   4
LX5      EQU   5
LX6      EQU   6
LX7      EQU   7
LX8      EQU   8
LX9      EQU   9
LX10     EQU   10
LX15     EQU   15
LX16     EQU   16
LX20     EQU   20
LX47     EQU   47
LX49     EQU   49
LX65     EQU   65
LX72     EQU   72
LX77     EQU   77
LX80     EQU   80
LX88     EQU   88
LX132    EQU   132
LX198    EQU   198
         EJECT
*        ENTRY TO PREPROCESSOR - HOUSEKEEPING
*
PBEG03   EQU   *
         BALR  B1,C0               SET UP ADDR IN BASE REG 1
         USING *,B1,B2,B3,B4       ESTABLISH ADDRESSABILITY
*        BASE REGISTER ASSIGNMENT AND LOAD FOR PREPROCESSOR
PREPROC  L     B2,BASE2            SET UP ADDR IN BASE REG 2
         L     B3,BASE3            SET UP ADDR IN BASE REG 3
         L     B4,BASE4            SET UP ADDR IN BASE REG 4
*        I M P O R T A N T -
*              REG15 (C5) SHOULD ALWAYS POINT TO COS SO THAT
*              PH0 AND THE COMMUNICATION AREA CAN BE REFERENCED
*
*     SAVE ADDRESS OF COS IN PHASE0
         USING COS,C5
         ST    C1,COSADDR          SAVE ADDR OF COS
         L     C5,COSADDR          GET ADDR OF COS
         MVC   ADPRIM(LX20),APRIME
*
*     INITIALIZE TAMER
         L     C5,ADTAMN           CALL TAMEIN
         BALR  C4,C5               BRANCH TO TAMEIN
*     PRIME THE COPY...REPLACING TABLE (TIB 29)
         LA    C1,PARREP           REPLACING TABLE
         L     C5,ADPRIM           ADDR OF PRIME
         BALR  C4,C5               PRIME TABLE
         L     C5,COSADDR          GET ADDR OF COS
         B     STARTPP BEGIN PROCESSING
IKFPATCI DS    0F                  PATCH AREA
         B     IKFPATCI            EASES CODING OF BRANCH ADDRESS
         DC    24F'0'
***********************************************************************
*
*        ADCONS
*
***********************************************************************
BASE2    DC    A(PREPROC+4096)     ADDR FOR BASE REG 2
BASE3    DC    A(PREPROC+8192)     ADDR FOR BASE REG 3
BASE4    DC    A(PREPROC+12288)    ADDR FOR BASE REG 4
COSADDR  DC    A(0)                ADDRESS OF COS
*
*        TAMER EQUATES
*
PRIME    EQU   APRIME-COS          PRIME
INSERTA  EQU   AINSRT-COS          INSERT
STATIC   EQU   ADSTAT-COS          STATIC
TABREL   EQU   RELADD-COS          RELEASE
TAMEIN   EQU   TAMNAD-COS          TAMEIN
*
ADPRIM   DC    A(PRIME)            PRIME
ADSERT   DC    A(INSERTA)          INSERT
ADSTAC   DC    A(STATIC)           STATIC
ADTREL   DC    A(TABREL)           RELEASE
ADTAMN   DC    A(TAMEIN)           TAMEIN
*
         DS    0F
REPTAB   EQU   TIB29-COS
CRPCON   EQU   *
PARREP   DC    X'00'               PARAM FOR REPLACING TABLE
         DC    AL3(REPTAB)         TIB ADDR
         DC    X'00640000'         100 BYTES
*
*
*
         EJECT
STARTPP  BAL   L1,GETCARD          GET THE FIRST CARD
*
*     REGISTER S1 CONTAINS THE ADDRESS OF COLUMN 7 (FROM GETCARD)
*
         L     W2,AIOA1I           ADDRESS OF COL1 IN BUFFER
         LA    W1,LIBWORK          LIBWORK IS INITIALLY BLANKED OUT
         SR    C1,C1               CLEAR REG1 FOR TRT
         TRT   DX0(LX72,W2),TRTTAB SCAN BUFFER FOR NON BLANK
         BC    ALLOFF,STARTPP      BLANK CARD
         CLC   DX0(LX5,C1),BASISK  IS IT BASIS
         BNE   NOTBASIS            CANNOT POSSIBLY BE BASIS
START0   XC    SEQSAVE(LX6),SEQSAVE BASIS ON 1ST SCAN- ZERO SEQSAVE
         MVC   DX7(LX5,W1),DX0(C1) MOVE BASIS TO COL 8
START1   OI    ABASISW,INBASIS     INDICATE READ FROM LIBRARY
         TRT   DX6(LX65,C1),TRTTAB SCAN BUFFER FOR LIBNAME
         MVC   DX13(LX8,W1),DX0(C1) MOVE LIBNAME TO COL 14
         ST    W1,AIOA1I           SAVE ADDRESS FOR WRITE ROUTINE
         LR    W2,C1               SAVE LIBNAME ADDRESS
         SR    W3,W3               CLEAR
START2   LA    W3,DX1(W3)          KEEP COUNT OF CHARACTERS IN LIBNAME
         LA    C1,1(C1)            INCREMENT ADDRESS
         CLI   DX0(C1),BLANK       CHECK FOR END OF LIBNAME
         BNE   START2              NOT END, CONTINUE COUNTING
         STC   W3,SIZE             ELSE STORE SIZE
         BCTR  W3,0                DECREMENT TO
         EX    W3,MVBASIS          MOVE NAME TO WORD
         BAL   L1,EXTNAME          CHECK EXTERNAL NAME
         MVC   WORD(LX8),BLANKS    INVALID EXTERNAL NAME RETURN
         LH    W3,SIZEWORD         GET SIZE OF LIBNAME
         BCTR  W3,0                DECREMENT TO
         EX    W3,MVBASIS1         MOVE LIBNAME TO BASIS CALL
         OI    PH1BYTE,BASIS       SET BASIS BIT IN COMMON
         OI    ABASISW,IDELCARD    INDICATE INSERT/DELETE CARDS
         BAL   L1,IDREAD           READ SYSIN FOR INSERT/DELETE
         OI    ASWITCH,WRITESUP    INDICATE NO WRITE FOR BASIS CARD
         BAL   L1,GETCARD          READ FIRST RECORD FROM BASIS
NOTBASIS LA    W2,ID10             LOAD STARTING STRING ADDR
*
*   REGISTER S1 CONTAINS THE ADDRESS OF COLUMN 7 FOR GETWORD
*   AS A RESULT OF GOING THROUGH GETCARD ROUTINE
*
         ST    W2,NXTSTRNG         SAVE IT IN NEXT STRING ADDR
DRIVER   BAL   L1,GETWORD          GET A WORD
DRIVER1  TM    ASWITCH,KEYWORD     IS IT A KEYWORD
         BC    ALLOFF,DRIVER       NO, THUS CANT CONTAIN A COPY STMT
NEXT     IC    C3,0(W2)            INSERT FIRST BYTE OF STRING      DA1
         SLL   C3,28               GET RID OF 1ST HALF              DA1
         SRL   C3,27               MULTIPLY ORIGINAL CONNECTOR BY 2
         LH    C2,CONTAB(C3)       PIXK UP ADDR OF FALSE TEST RETURN
         STH   C2,FALSE+2          AND SAVE IT IF TEST PROVES FALSE
         SR    C3,C3               CLEAR AGAIN FOR TEST ADDR        DA1
         IC    C3,0(W2)            INSERT FIRST BYTE OF STRING      DA1
         SRA   C3,4                GET RID OF 2ND HALF              DA1
         SLA   C3,1           MULTIPLY BY TWO
         LH    C2,TESTTAB(C3)      PICK UP ADDR OF TEST ROUTINE
         STH   C2,TEST+2           MOVE TO BR INST
         EX    C0,TEST             BRANCH TO CORRECT TEST ROUTINE
         SPACE 1
*   THE FOLLOWING INSTRUCTIONS ARE TO BE EXECUTED
MVBASIS  MVC   WORD(LX0),DX0(W2)   MOVE LIBNAME TO WORD
MVBASIS1 MVC   BASNAM(LX0),WORD    MOVE LIBNAME TO BASIS CALL
TEST     B     TESTTAB             BR ADDR IS REPLACED WITH S-CON
*
         SPACE 1                                                    DA1
*        ROUTINE TO CALCULATE ACTION AND UPDATE FOR NEXT STRING     DA1
*                                                                   DA1
CALCACT  SR    C3,C3               CLEAR FOR CALCULATING ACTION RT  DA1
         ST    W2,NOWSTRNG         SAVE ENTRY PTR-POSSIBLY MORE
*                                  THAN ONE CLAUSE OF THIS TYPE
         IC    C3,1(W2)            INSERT ACTION BYTE FROM STRING   DA1
         LA    C3,ACTTAB(C3)       ADD STARTING ADDR OF ACTION TBL  DA1
         MVC   ACTION+2(2),0(C3)   STORE S-CON OF ACTION ROUTINE IN DA1
*                                  INSTRUCTION TO BE EX'ED          DA1
CALCACT0 SR    C3,C3               CLEAR
         TM    DX0(W2),K14         TEST FOR ERROR BYTE PRESENT
         BC    ALLOFF,CALCACT1     IF ZERO OR ONE, NOT AN ERROR BYTE
         LA    C3,1                ADD 1 FOR ERROR BYTE             DA1
CALCACT1 CLI   0(W2),K80           TEST FOR RESERVED WORD TYPE STRING
         BNL   CALCACT2            NOT A RESERVED WORD STRING       DA1
         LA    W2,2(W2)            RSVD WORD TYPE, THUS 2 BYTES EXTRA
CALCACT2 TM    2(W2),FF            IS RETURN TO NEXT STRING         DA1
         BC    ALLON+MIXED,CALCACT4 NO, CALCULATE                   DA1
         LA    W2,3(W2)            UPDATE TO NEXT STRING            DA1
         AR    W2,C3               ADD ERRBYTE IF THERE             DA1
CALCACT3 EX    0,ACTION                                             DA1
         SPACE 1                                                    DA1
CALCACT4 SR    C2,C2               CLEAR                            DA1
         LA    C3,DX3(W2)          PTR MAIN STRING- ASVPTR RTN
         IC    C2,2(W2)            GET INCREMENT TO CURRENT STRING  DA1
         LA    W2,ID10             GET CURRENT STRING
         AR    W2,C2               ADD INCREMENT                    DA1
         B     CALCACT3            CALCULATE REST                   DA1
*        THIS INSTRUCTION IS EX'ED                                  DA1
ACTION   B     ACTTAB              BR ADDR IS REPLACED WITH S-CON   DA1
*                                  OF ACTION ROUTINE                DA1
         EJECT
**********************************************************************
****                          TEST TABLE                            DA1
*                                                                   DA1
*                   POINTERS TO ROUTINES TO TEST CURRENT WORD       DA1
*     STRING HAS 1ST HALFBYTE OF                                    DA1
TESTTAB  EQU   *                   STARTING ADDRESS                 DA1
         DC    S(TMARGINA)    00   TEST MARGIN A
         DC    S(TNMARGA)     10   TEST NON-MARGIN A
         DC    S(EITHERAB)    20   TEST EITHER MARGIN A OR B
         DC    S(CHGPTR)      30   NO TEST, CHANGE STARTING POINTER
         DC    S(TEXNAME)     40   TEST VALID EXTERNAL NAME
         DC    S(DNM)         50   TEST VALID DATA-NAME
         DC    S(PROCNM)      60   PROCEDURE NAME TEST
         DC    S(REPWRD1)     70   WORD1 COPY REPLACING TEST
         DC    S(REPWRD2)     80   WORD2 COPY REPLACING TEST
***********************************************************************
*                                                                   DA1
*                             TEST  ROUTINES                        DA1
*                                                                   DA1
***********************************************************************
TMARGINA OI    MISCSW,TSTMARGA     TURN ON MUST BE MARGIN A SW
EITHERAB LA    W3,COBOLWDS         SET UP FOR COMPARE TO RESRVD WD  DA1
         SR    C3,C3               CLEAR
         IC    C3,2(W2)            GET LENGTH OF RESERVED WORD
         SRA   C3,4                SHIFT FOR COMPARE
         MVC   FULLWORD+2(2),2(W2) MOVE DISP IN RESERVED WORD TABL  DA1
         NI    FULLWORD+2,K15      TURN OFF LENGTH BITS
         AH    W3,FULLWORD+2       TO BOUNDRY AND ADD TO TBL ADDR   DA1
         LH    C2,SIZEWORD         SIZE OF WORD
         CR    C3,C2               COMPARE FOR SAME LENGTH
         BNE   UPDATE
         BCTR  C2,0                DECR FOR EX INSTRUCTION
         EX    C2,RWCOMP           COMPARE TO RESERVED WORD
         BNE   UPDATE              NOT A MATCH, UPDATE STRING
         TM    MISCSW,TSTMARGA     WAS IT SUPPOSED TO BE MARGIN A
         BC    ALLON,CHKMARGA      YES, CHECK THAT IT WAS
         TM    MISCSW,TSTMARGB     WAS IT SUPPOSED TO BE MARGB
         BC    ALLON,CHKMARGB      YES, CHECK THAT IT WAS
         B     CALCACT             DIDN'T MATTER, WORD IS OK
         SPACE 1
UPDATE   NI    MISCSW,FF-TSTMARGA-TSTMARGB TURN OFF REQ SWITCHES
         TM    0(W2),K15
         BC    ALLOFF,UPDATEB      OPTIONAL
UPDATEA  EX    C0,FALSE            GO TO DIAGNOSTIC ROUTINE
         SPACE 1
UPDATEB  LA    W2,5(W2)            UPDATE TO NEXT ELEMENT IN STRING
         B     NEXT                GO TO STRINGS
*                                                                   DA1
RWCOMP   CLC   WORD(0),0(W3)       THIS INST IS EX'ED               DA1
FALSE    B     CONTAB              THIS INSTRUCTION IS EX'ED
*                                                                   DA1
TNMARGA  OI    MISCSW,TSTMARGB     TURN ON MUST BE MARGIN B SW
         B     EITHERAB            CHECK WORD
         SPACE 1
CHKMARGA TM    ASWITCH,MARGA       IS IT IN MARGIN A
         BC    ALLON,CALCACT       YES, CONTINUE
         B     DRIVER              GET A KEYWORD
         SPACE 1
CHKMARGB TM    ASWITCH,MARGA       IS IT IN MARGIN A
         BC    ALLOFF,CKMARGB1     NO, WORD IS OK
MSG1087  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'01'               W-LEVEL, 1 INSERT IN WORD
         DC    X'57'               MESSAGE NUMBER 1087
CKMARGB1 TM    REPWD2SW,WD2MRGB    DO WE RETURN TO WORD2 TEST
         BC    ALLOFF,CALCACT      NO, PERFORM ACTION
         BR    C2                  RETURN TO WORD2 TEST
         SPACE 1
         SPACE 1                                                    DA1
EXTNAME  OI    MISCSW,TSTNAME      INDICATE TEST FOR BASIS LIBNAME
         ST    L1,ENAMSVL1         SAVE LINK REGISTER
TEXNAME  CLC   WORD(LX1),LITSIGN        CHECK FOR QUOTES
         BC    NE,TEXNAME0              AROUND EXTERNAL NAME
         LH    C3,SIZEWORD              IF THERE ARE NO QUOTES
         LA    C4,WORD-DX1(C3)          CONT. WITH TEST
         CLC   DX0(LX1,C4),LITSIGN         OTHERWISE-
         BC    NE,TEXNAME0              REMOVE QUOTES BY
         SH    C3,TWO                   DECREMENTING CNT FOR
         STC   C3,SIZE                  WORD AND SHIFTING THE
         EX    C3,MOVELIT               FIRST QUOTE OUT OF WORD
TEXNAME0 BAL   C2,PNM0                  DO PGM NAME TEST
         B     MSG1015             INVALID EXTERNAL NAME RETURN
         CLI   SIZE,K8             IS NAME GREATER THAN 8 CHARACTERS
         BNH   TEXNAME1            NO
         MVI   SIZE,K8             YES, TRUNCATE TO 8
TEXNAME1 CLI   WORD,EXTZERO        IS FIRST CHARACTER NUMERIC
         LA    C3,K7               INITIALIZE REGISTER
         BE    TEXNAME4            YES, ZERO
         BH    TEXNAME5            YES, HIGHER
TEXNAME2 LA    C4,WORD(C3)         GET LAST CHARACTER
         CLI   DX0(C4),HYPHEN      IS CHARACTER A HYPHEN
         BNE   TEXNAME3            NO, VALID
         MVI   DX0(C4),EXTZERO     REPLACE WITH ZERO
TEXNAME3 BCT   C3,TEXNAME2         NO, CONTINUE SCAN
         TM    MISCSW,TSTNAME      ARE WE CHECKING BASIS LIBNAME
         BC    ALLOFF,CHKMARGB     NO CHECK FOR MARGIN B
         NI    MISCSW,FF-TSTNAME   TURN OFF BASIS LIBNAME SWITCH
         L     L1,ENAMSVL1         RESTORE LINK REGISTER
         B     DX6(L1)             VALID EXTERNAL NAME ROUTINE
         SPACE 1
MOVELIT  MVC   WORD(LX0),WORD+DX1        REMOVE QUOTES
TEXNAME4 MVI   WORD,J              MOVE IN THE LETTER J
         B     TEXNAME2            CONTINUE SCAN
         SPACE 1
TEXNAME5 MVZ   WORD(LX1),A         MOVE PLUS ZONE TO NUMERIC
         B     TEXNAME2            CONTINUE SCAN
         SPACE 1
MSG1015  BAL   L1,DIAGNOSE         INVALID EXTERNAL NAME
         DC    X'21'               E-LEVEL  1 INSERT
         DC    X'0F'               MESSAGE 15
         TM    MISCSW,TSTNAME      ARE WE CHECKING BASIS LIBNAME
         BC    ALLOFF,UPDATE       NO GO TO DIAGNOSTIC ROUTINE
         NI    MISCSW,FF-TSTNAME   TURN OFF BASIS LIBNAME SWITCH
         MVI   SIZE,K8             LENGTH FOR INVALID BASIS NAME MV
         L     L1,ENAMSVL1         RESTORE LINK REGISTER
         BR    L1                  INVALID EXTERNAL NAME RETURN
         SPACE 1
DNM      BAL   C2,DNM0             DO DATA-NAME TEST
         B     UPDATE1             INVALID - RECOVER IN MAIN STRING
         TM    MISCSW,FNDALPHA     WAS ALPHABETIC FOUND
         BC    ALLOFF,CALCACT      NO-ASSUME VALID,PHASE1 WILL DIAGNOSE
         B     CALCACT             DATANAME IS OK
         SPACE 1                                                    DA1
UPDATE1  TM    0(W2),K15           WAS IT AN OPTIONAL TEST
         BC    ALLON+MIXED,UPDATEA NO, ERROR
         LA    W2,3(W2)            YES, UPDATE TO NEXT STRING
         B     NEXT                GO TO STRINGS
         SPACE 1
DNM0     EQU   *                   VALID DATA-NAME TEST
         TM    ASWITCH,RESWORD     IS IT A RESERVED WORD
         BC    ALLOFF,DNM1         CHECK VALID FORMAT
         TM    COPYSW,CPYSTMT+INCPYLIB PROCESSING COPY
         BC    MIXED,DX0(C2)       YES - DNM INVALID
         CLC   WORD(L'FILLER),FILLER IS IT FILLER
         BNE   UPDATE1             INVALID                          DA1
DNM1     LH    C3,SIZEWORD         SIZE OF WORD
         LA    C4,WORD-1(C3)       GET ADDR OF CHAR TO BE TESTED
         NI    MISCSW,FF-FNDALPHA  TURN OFF FOUND ALPHA SW
         CLI   WORD,HYPHEN         DOES IT START WITH HYPHEN
         BE    DX0(C2)             INVALID EXTNAME RETURN
         CLI   0(C4),HYPHEN        DOES IT END WITH HYPHEN
         BE    DX0(C2)             INVALID EXTNAME RETURN
DNM2     LA    C4,WORD-1(C3)       GET ADDR OF CURRENT CHARACTER
         CLI   0(C4),A             IS IT HIGHER THAN A
         BNL   DNM4
         CLI   0(C4),HYPHEN        IS IT A HYPHEN
         BNE   DX0(C2)             INVALID EXTNAME RETURN
DNM3     BCT   C3,DNM2             CHECK NEXT CHARACTER
         B     DX4(C2)             VALID RETURN
         SPACE 1                                                    DA1
DNM4     CLI   0(C4),EXTZERO       CHECK NUMERIC
         BNL   DNM3                YES
         OI    MISCSW,FNDALPHA     INDICATE ALPHABETIC FOUND
         B     DNM3
         SPACE 1
CHGPTR   TM    DX0(W2),K1          SHOULD WE SKIP TO NEXT KEYWORD
         BC    ALLON,CHGPTR1       YES - THIS KEY WORD IS AN ERROR
CHGPTR2  L     W2,NXTSTRNG         GET NEXT MAIN STRING POINTER
         TM    MISCSW2,PROCSW      PROCEDURE DIVISION PROCESSING
         BC    ALLON,NEXT          YES - PROCESS FROM STRING ID80
         B     DRIVER1             CHECK IF THIS IS A KEYWORD
CHGPTR1  L     W2,NXTSTRNG         GET NEXT MAIN STRING POINTER
         B     DRIVER              GET ANOTHER KEYWORD
         SPACE 1
PNM      TM    MISCSW2,PROCSW      IN PROCEDURE DIVISION
         BC    ALLOFF,DNM0         NO - CHECK VALID DNM
PNM0     TM    ASWITCH,RESWORD     IS IT A RESERVED WORD
         BC    ALLOFF,DNM1         CHECK VALID FORMAT
         CLC   WORD(L'LEVEL01),LEVEL01 IS IT 01
         BE    DX4(C2)             PERMISSIBLE PROCEDURE NAME
         CLC   WORD(L'LEVEL1),LEVEL1 IS IT 1
         BE    DX4(C2)             PERMISSIBLE PROCEDURE NAME
         CLC   WORD(L'LEV77),LEV77 IS IT 77
         BE    DX4(C2)             PERMISSIBLE PROCEDURE NAME
         BNE   DX0(C2)             INVALID PNM OR DNM
PROCNM0  BAL   L1,GETWORD          GET A WORD
         TM    ASWITCH,MARGA       IS IT IN MARGIN A
         BC    ALLOFF,PROCNM0      NO- GET ANOTHER WORD
PROCNM   BAL   C2,PNM0             CHECK FOR PROCEDURE NAME
         B     PROCNM0             INVALID - GET ANOTHER WORD
         B     CALCACT             PERFORM ACTION
         SPACE 1                                                    DA1
REPWRD1  EQU   *                   WORD1 COPY REPLACING OPTION TEST
         BAL   C2,PNM              DO DNM/PNM TEST
         B     UPDATE              INVALID - RECOVER IN MAIN STRING
         TM    MISCSW2,PROCSW      IS COPY STMT IN PROCEDURE DIV
         BC    ALLON,CHKMARGB      YES(MAY BE NUMERIC PROC NAME)
         TM    MISCSW,FNDALPHA     WAS ALPHABETIC FOUND
         BC    ALLOFF,UPDATE       NO - GO TO DIAGNOSTIC RTN
         B     CHKMARGB            OTHERWISE - CHECK MARGIN B,CONTINUE
         SPACE 1
REPWRD2  EQU   *                   WORD2 COPY REPLACING OPTION TEST
         CLC   WORD(LX1),LITSIGN   IS WORD2 A ALPHANUMERIC LITERAL
         BC    EQ,CHKMARGB         YES - CHECK MARGIN-B PERFORM ACTION
*   NOT AN ALPHANUMERIC LITERAL - NOW CHECK FOR A NUMERIC LITERAL
*        A SYNTAX CHECK FOR FIXED-POINT AND FLOATING POINT LITERAL
*        IS MADE HERE. NO CHECK IS MADE FOR THE MAXIMUM SIZE
*        REPRESENTED BY A FLOATING-POINT LITERAL(.72E+76) - THIS
*        CHECK IS MADE BY PHASE 1. PREPROCESSOR ASSUMES OK.
*        THE SAME IS TRUE FOR A FIXED-POINT NUMERIC LITERAL.
         NI    REPWD2SW,K0         INITIALIZE WORD 2 SWITCH
         LH    C3,SIZEWORD         GET WORD SIZE AND
         LA    C3,WORD(C3)         MOVE A BLANK AT
         MVI   DX0(C3),BLANK       THE END OF WORD
         SR    C3,C3               INITIALIZE COUNT REGISTER
         LA    C4,WORD             GET ADDRESS OF WORD 2
         BAL   C2,SIGNSCAN         CHECK FOR + OR - SIGN
         OI    REPWD2SW,SIGNSW     INDICATE SIGN FOUND
REPWD2A  BAL   C2,DIGITSCN         CHECK FOR DIGITS
         CLC   DX0(LX1,C4),DECPNT  IS THIS CHARACTER A DECIMAL-PT
         BNE   REPWD2B             NO - SAVE NUMBER COUNT
         TM    REPWD2SW,POINTSW    HAS DECIMAL ALREADY BEEN FOUND
         BC    ALLON,MSG1017       YES - INVALID WORD 2
         OI    REPWD2SW,POINTSW    INDICATE DECIMAL FOUND
         LA    C4,DX1(C4)          INCREMENT WORD POINTER
         B     REPWD2A             CONTINUE SCANNING DIGITS
REPWD2B  STH   C3,MANTISSA         SAVE NUMBER COUNT
         CLI   DX0(C4),E           IS CHARACTER AN E
         BE    REPWD2F             YES - CHECK FOR FLOPNT NUMBER
         CLI   DX0(C4),BLANK       IS CHARACTER A BLANK
         BE    REPWD2C             YES - CHECK VALID NUMERIC LIT
         TM    REPWD2SW,SIGNSW+POINTSW ANY WORD 2 SWITCHES SET
         BC    ALLON+MIXED,MSG1017 YES - INVALID WORD 2
         B     WORD2ID             OTHERWISE CHECK FOR VALID DNM
*
*      CHECK IF WORD2 IS A VALID FIXED-POINT NUMERIC LITERAL
*
REPWD2C  CH    C3,H18              IS NUMBER GREATER THAN 18 DIGITS
         BC    GT,REPWD2D          YES - CHECK IF PROCEDURE NAME
         LTR   C3,C3               ARE THERE ANY DIGITS AT ALL
         BC    TZERO,MSG1017       NO - INVALID WORD 2
         TM    REPWD2SW,SIGNSW+POINTSW ANY WORD 2 SWITCHES SET
         BC    ALLON+MIXED,CHKMARGB YES - CANNOT BE QUAL PROC NAME
         TM    MISCSW2,PROCSW      ARE WE PROCESSING IN PROC DIV
         BC    ALLOFF,CHKMARGB     NO - PERFORM ACTION
         B     REPWD2E             CHECK FOR NUMERIC QUAL PROC NAME
*
REPWD2D  TM    REPWD2SW,SIGNSW+POINTSW ANY WORD 2 SWITCHES SET
         BC    ALLON+MIXED,MSG1082 YES - LITERAL TOO LONG
         TM    MISCSW2,PROCSW      ARE WE PROCESSING IN PROC DIV
         BC    ALLON,REPWD2E       CHECK FOR NUMERIC QUAL PROC NAME
MSG1082  BCTR  C4,0                POINT TO LAST CHARACTER
         SH    C3,H18              SUBTRACT AMOUNT OVER 18 DIGITS
         SR    C4,C3               AND ADJUST WORD POINTER
         CLC   DX0(LX1,C4),DECPNT  IS LAST CHARACTER DECIMAL-POINT
         BNE   MSG1082A            NO - STORE SIZE
         LA    C3,DX1(C3)          INCREASE COUNT TO DECREMENT
MSG1082A LH    C2,SIZEWORD         GET WORD SIZE
         SR    C2,C3               ADJUST SIZE
         STH   C2,SIZEWORD         TO PROPER LENGTH
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERT
         DC    X'52'               MESSAGE 1082
         B     CHKMARGB            PERFORM ACTION
*
*    CHECK FOR A QUALIFIED NUMERIC PROCEDURE NAME
*              PROCEDURE MAY HAVE ONLY ONE QUALIFIER
*
REPWD2E  OI    REPWD2SW,WD2MRGB    SET FOR RETURN FROM MARGINB TEST
         BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         LA    W1,WORD             ADDRESS OF CURRENT WORD
         LA    W3,REPWRK+DX1       ADDRESS OF TEMP SAVE FOR TABSERT
         BAL   C2,WRD2MOV1         MOVE WORD TO TEMPORARY SAVE
         BAL   L1,GETWORD          GET NEXT WORD
         BAL   L1,QUALCHK          CHECK FOR QUALIFICATION
         B     REPWD2E2            NO QUAL RETURN
         BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         BAL   C2,WRD2MOVE         MOVE BLANK AND WORD TO TEMP SAVE
         BAL   L1,GETWORD          GET NEXT WORD
         BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         BAL   C2,PNM0             CHECK FOR VALID PNM QUALIFIER
         B     UPDATE              INVALID RETURN
         BAL   C2,WRD2MOVE         MOVE BLANK AND WORD TO TEMP SAVE
REPWD2E1 LA    W1,REPWRK+DX1       SUBTRACT BEGINNING OF WORD
         SR    W3,W1               FROM END TO GET SIZE
         STC   W3,REPWRK           SAVE SIZE
         OI    MISCSW4,WORD2SW     INDICATE WORD IN REPWRK BUFFER
         B     CALCACT             PERFORM ACTION
REPWD2E2 OI    MISCSW,DUMMYGET     INDICATE HAVE WORD TO GETWORD
         B     REPWD2E1            CALCULATE LENGTH
*
*    CHECK FOR A FLOATING POINT NUMERIC LITERAL
*
REPWD2F  CLC   MANTISSA(LX2),HZERO ANY DIGITS IN MANTISSA         53544
         BE    WORD2ID             NO - CHECK FOR VALID DNM       53544
         OI    REPWD2SW,FLOPTSW    INDICATE POSSIBLE FLOPNT NUMBER53544
         ST    C4,FLOPTSAV         SAVE 'E' POINTER
         LA    C4,DX1(C4)          INCREMENT WORD POINTER
         SR    C3,C3               INITIALIZE EXPONENT COUNT
REPWD2F1 BAL   C2,SIGNSCAN         CHECK FOR + OR - SIGN
         OI    REPWD2SW,SIGNSW2    INDICATE FLOPNT SIGN
REPWD2F2 BAL   C2,DIGITSCN         CHECK FOR EXPONENT
         TM    REPWD2SW,POINTSW    WAS DECIMAL-POINT FOUND
         BC    ALLON,REPWD2G       YES - SEE IF AT END OF LITERAL
         TM    REPWD2SW,SIGNSW+SIGNSW2 WERE THERE ANY SIGNS
         BC    ALLON+MIXED,MSG1017 YES - INVALID WORD2
         B     WORD2ID             OTHERWISE CHECK FOR VALID DNM
REPWD2G  CLI   DX0(C4),BLANK       IS CHARACTER A BLANK           53544
         BE    REPWD2H             CHECK VALID SIZE
         LTR   C3,C3               ANY EXPONENT DIGITS
         BC    NZERO,MSG1072       YES - FOUND AN INVALID CHARACTER
         TM    REPWD2SW,SIGNSW2    WAS THERE AN EXPONENT SIGN
         BC    ALLOFF,MSG1073      NO - 'E' FOLLOWED BY INVALID CHAR
         B     MSG1074             YES - INVALID CHARACTER AFTER SIGN
*
REPWD2H  LTR   C3,C3               EXPONENT SPECIFIED             53544
         BZ    MSG1017             NO - INVALID WORD2             53544
         CH    C3,TWO              IS EXPONENT GREATER THAN TWO   53544
         BC    LE,REPWD2J          NO - CHECK FOR MANTISSA GT 16
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'47'               MESSAGE 1071
         SH    C3,TWO              EXPONENT IS GREATER THAN TWO
         LH    C2,SIZEWORD         MUST TRUNCATE TO TWO
         SR    C2,C3               AND ADJUST THE SIZE OF
         STH   C2,SIZEWORD         THE LITERAL
*
REPWD2J  CLC   MANTISSA(LX2),H16   IS MANTISSA GREATER THAN 16
         BC    LE,CHKMARGB         NO - PERFORM ACTION
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'46'               MESSAGE 1070
         LH    C3,MANTISSA         GER MANTISSA LENGTH,
         L     C4,FLOPTSAV         POINTER TO 'E',
         LH    C2,SIZEWORD         AND WORD SIZE
         SH    C3,H16              ADJUST THE WORD
         SR    C2,C3               SIZE FOR A MANTISSA
         STH   C2,SIZEWORD         LENGTH OF 16
         LA    C2,DX4              NUMBER OF CHARACTERS TO MOVE
REPWD2K  BCTR  C4,C0               POINT TO CHARACTER BEFORE 'E'
         CLC   DX0(LX1,C4),DECPNT  IS IT A DECIMAL POINT
         BE    REPWD2K             YES - DECREMENT POINTER
         EX    C2,SHIFTLIT         SHIFT OVER MANTISSA (E+NN SHIFTED)
         BCT   C3,REPWD2K          IS MANTISSA STILL TO LARGE
         B     CHKMARGB            PERFORM ACTION
*
MSG1072  TM    REPWD2SW,MSG72SW    HAS MSG BEEN ISSUED
         BC    ALLON,MSG1072A      YES - ADJUST WORD ONLY
         OI    REPWD2SW,MSG72SW    INDICATE MSG72 ISSUED
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'48'               MESSAGE 1072
MSG1072A BAL   L1,CHARADEL         DELETE INVALID CHARACTER,DECR SIZE
         B     REPWD2F2            CONTINUE SCANNING
*
MSG1073  TM    REPWD2SW,MSG73SW    HAS MSG BEEN ISSUED
         BC    ALLON,MSG1073A      YES - ADJUST WORD ONLY
         OI    REPWD2SW,MSG73SW    INDICATE MSG7& ISSUED
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'49'               MESSAGE 1073
MSG1073A BAL   L1,CHARADEL         DELETE INVALID CHARACTER,DECR SIZE
         B     REPWD2F1            CONTINUE SCANNING
*
MSG1074  TM    REPWD2SW,MSG74SW    HAS MSG BEEN ISSUED
         BC    ALLON,MSG1074A      YES - ADJUST WORD ONLY
         OI    REPWD2SW,MSG74SW    INDICATE MSG74 ISSUED
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'4A'               MESSAGE 1074
MSG1074A BAL   L1,CHARADEL         DELETE INVALID CHARACTER,DECR SIZE
         B     REPWD2F2            CONTINUE SCANNING
*
CHARADEL LR    C2,C4               GET WORD POINTER
CHARDEL1 LA    C2,DX1(C2)          INCREMENT AND
         CLI   DX0(C2),BLANK       SCAN FOR THE BLANK
         BNE   CHARDEL1            DELIMITER
         SR    C2,C4               GET NUMBER OF CHARACTERS
         EX    C2,SHIFTLIT         TO SHIFT
         LH    C2,SIZEWORD         SAVE THE NEW SIZE
         BCTR  C2,0                AFTER DECREMENTING
         STH   C2,SIZEWORD         FOR INVALID CHARACTER
         BR    L1                  RETURN
         SPACE 1
SHIFTLIT MVC   DX0(LX0,C4),DX1(C4) SHIFT OVER THE INVALID CHARACTER
*
*
SIGNSCAN CLI   DX0(C4),CPLUS       IS CHARACTER + SIGN
         BE    SIGNSCN1            YES - INCREMENT WORD POINTER
         CLI   DX0(C4),CMINUS      IS CHARACTER - SIGN
         BE    SIGNSCN1            YES - INCREMENT WORD POINTER
         B     DX4(C2)             NEITHER + NOT - SIGN  RETURN
SIGNSCN1 LA    C4,DX1(C4)          INCREMENT WORD POINTER
         BR    C2                  RETURN AND SET APPROPRIATE SIGN SW
*
DIGITSCN CLI   DX0(C4),EXTZERO     IS THE CHARACTER
         BL    DX0(C2)             A NUMERIC CHARACTER
         CLI   DX0(C4),EXTNINE     IF NOT, RETURN
         BH    DX0(C2)             OTHERWISE
         LA    C4,DX1(C4)          INCREMENT THE WORD POINTER
         LA    C3,DX1(C3)          INCREMENT NUMBER COUNT
         B     DIGITSCN            CONTINUE SCANNING
*
QUALCHK  CLI   SIZE,K2             IS WORD SIZE = TWO
         BNE   DX0(L1)             NO, NOT A QUALIFIER
         CLC   WORD(LX2),OF        IS WORD 'OF'
         BE    DX4(L1)             YES, PREPARE FOR QUALIFICATION
         CLC   WORD(LX2),INCON     IS WORD 'IN'
         BE    DX4(L1)             YES, PREPARE FOR QUALIFICATION
         BR    L1                  NO QUALIFICATION RETURN
*
WRD2MOVE MVI   DX0(W3),BLANK       MOVE A BLANK TO SAVEAREA
         LA    W3,DX1(W3)          INCREMENT SAVEAREA POINTER
WRD2MOV1 LH    C3,SIZEWORD         GET CURRENT WORD SIZE
         BCTR  C3,C0               DECREMENT FOR EXECUTE
         EX    C3,MOVEWD2          EXECUTE MOVE TO SAVEAREA
         LA    W3,DX1(C3,W3)       BUMP POINTER TO NEXT AVAIL PLACE
         BR    C2                  RETURN
*
MOVEWD2  MVC   DX0(LX0,W3),DX0(W1) MOVE WORD TO SAVEAREA
*
*
*   NOT AN ALPHANUMERIC LITERAL NOR A NUMERIC LITERAL
*        CHECK FOR A DATANAME OR AN IDENTIFIER(QUALIFIED BY WORDS
*        'OF' OR 'IN', SUBSCRIPTED, OR INDEXED)
*
WORD2ID  OI    REPWD2SW,WD2MRGB    SET FOR RETURN FROM MARGINB TEST
         LA    W1,WORD             ADDRESS OF CURRENT WORD
         LA    W3,REPWRK+DX1       ADDRESS OF TEMP SAVE FOR TABSERT
WORD2ID1 BAL   C2,DNM0             CHECK FOR VALID DATANAME
         B     UPDATE              INVALID RETURN
         TM    MISCSW,FNDALPHA     WAS ALPHABETIC FOUND
         BC    ALLOFF,UPDATE       NO - INVALID DATANAME
         BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         BAL   C2,WRD2MOV1         MOVE WORD TO TEMPORARY SAVEAREA
         BAL   L1,GETWORD          GET NEXT WORD
         BAL   L1,QUALCHK          CHECK FOR QUALIFICATION
         B     WORD2ID2            NO QUAL - CHECK IF INDEX/SUBSCRIPT
         BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         BAL   C2,WRD2MOVE         MOVE BLANK AND WORD TO TEMP SAVE
         BAL   L1,GETWORD          GET NEXT WORD
         MVI   DX0(W3),BLANK       MOVE BLANK TO TEMP
         LA    W3,DX1(W3)          INCREMENT TEMP PTR
         B     WORD2ID1            CHECK FOR DATANAME
*
WORD2ID2 CLI   WORD,LPAREN         IS WORD A LEFT PARENTHESIS
         BNE   REPWD2E2            NO - WRAP UP WORD2
         MVI   DX0(W3),LPAREN      YES - MUST BE INDEXED/SUBSCRIPTED
         LA    W3,DX1(W3)          INCREMENT TEMP SAVE POINTER
WORD2ID3 BAL   L1,GETWORD          GET NEXT WORD
WORD2IDA CLC   WORD(L'TALLY),TALLY IS SUBSCRIPT TALLY
         BE    WORD2IDC            MOVE WORD TO TEMP AREA
         BAL   C2,DNM0             CHECK FOR A VALID DATANAME
         B     WORD2IDB            NOT DNM - CHECK FOR NUM SUBSCRIPT
         TM    MISCSW,FNDALPHA     WAS ALPHABETIC FOUND
         BC    ALLOFF,WORD2IDB     NO - CHECK FOR NUMERIC SUBSCRIPT
WORD2ID4 BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         BAL   C2,WRD2MOV1         MOVE WORD TO TEMPORARY SAVE
         BAL   L1,GETWORD          GET NEXT WORD
         BAL   L1,QUALCHK          CHECK FOR QUALIFICATION
         B     WORD2ID5            NO QUAL RETURN
         BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         BAL   C2,WRD2MOVE         MOVE BLANK AND WORD TO TEMP SAVE
         BAL   L1,GETWORD          GET NEXT WORD
         BAL   C2,DNM0             CHECK FOR A VALID DATANAME
         B     UPDATE              INVALID
         TM    MISCSW,FNDALPHA     WAS ALPHABETIC FOUND
         BC    ALLOFF,UPDATE       NO - INVALID DATANAME
         MVI   DX0(W3),BLANK       MOVE BLANK TO TEMP
         LA    W3,DX1(W3)          INCREMENT TEMP POINTER
         B     WORD2ID4            CONTINUE
*
WORD2IDB LH    C2,SIZEWORD         GET WORD SIZE
         CLI   WORD,CPLUS          IS FIRST CHARACTER '+' SIGN
         BNE   WORD2ID7            NO - CONTINUE LIT CHECK
         LA    C3,WORD+DX1         POINT TO NEXT CHARACTER
         BCTR  C2,C0               DECREMENT WORD COUNT
         LTR   C2,C2               ANY MORE CHARACTERS
         BC    TZERO,UPDATE        NO - INVALID
WORD2ID7 BAL   L1,WRD2SCN1         CHECK FOR INTERNAL NUMERIC LIT
         B    WORD2IDE             NOT A SUBSCRIPT/INDEX - CHECK RPAREN
         B     WORD2IDC            MOVE WORD TO TEMP AREA
WORD2IDE CLI   WORD,RPAREN         IS WORD A RIGHT PAREN
         BNE   UPDATE              INVALID SUBSCRIPT/INDEX
         B     WORD2IDD            MOVE RPAREN AND WRAP UP
*
WORD2ID5 CLI   SIZE,K1             IF WORD IS LARGER THAN ONE
         BNE   WORD2ID6            CHARACTER, CHECK IF VALID
         CLI   WORD,CPLUS          IS WORD A PLUS SIGN
         BNE   WORD2ID6            NO, CHECK FOR VALID SUBSCRIPT/INDEX
         CLI   WORD,CMINUS         IS WORD A MINUS SIGN
         BNE   WORD2ID6            NO, CHECK FOR VALID SUBSCRIPT/INDEX
         BAL   C2,WRD2MOVE         MOVE BLANK AND SIGN TO TEMP SAVE
         BAL   L1,GETWORD          GET NEXT WORD
         BAL   L1,WRD2SCN          CHECK FOR INTEGRAL NUMERIC LIT
         B     UPDATE              NO - INVALID RETURN
         MVI   DX0(W3),BLANK       MOVE A BLANK TO TEMP AND
         LA    W3,DX1(W3)          INCREMENT PTR TO NEXT AVAIL PLACE
WORD2IDC BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         BAL   C2,WRD2MOV1         MOVE WORD TO TEMPORARY SAVE
         MVI   DX0(W3),COMMA       MOVE COMMA
         MVI   DX1(W3),BLANK       MOVE BLANK
         LA    W3,DX2(W3)          INCREMENT PTR TO NEXT AVAIL PLACE
         B     WORD2ID3            GET NEXT SUBSCRIPT/INDEX
*
WORD2ID6 BAL   C2,CHKMARGB         CHECK IF WORD IS IN MARGINB
         MVI   DX0(W3),COMMA       MOVE COMMA TO TEMP
         MVI   DX1(W3),BLANK       MOVE BLANK TO TEMP
         LA    W3,DX2(W3)          INCREMENT PTR TO NEXT AVAIL PLACE
         CLI   WORD,RPAREN         IS WORD A RIGHT PAREN
         BNE   WORD2IDA            CONTINUE PROCESSING SUBSCRIPT/INDEX
WORD2IDD SH    W3,TWO              DECREMENT TEMP PTR
         MVI   DX0(W3),RPAREN      MOVE RIGHT PAREN TO TEMP
         LA    W3,DX1(W3)          INCREMENT PTR
         B     REPWD2E1            WRAP UP
*
WRD2SCN  LH    C2,SIZEWORD         GET SIZE OF WORD
         LA    C3,WORD             ADDRESS OF CURRENT WORD
WRD2SCN1 CLI   DX0(C3),EXTZERO     CHECK FOR  AN INTEGRAL
         BL    DX0(L1)             NUMERIC LITERAL
         CLI   DX0(C3),EXTNINE     IF NOT,
         BH    DX0(L1)             RETURN INVALID
         LA    C3,DX1(C3)          IF SO,
         BCT   C2,WRD2SCN1         RETURN IS VALID
         B     DX4(L1)             VALID RETURN
*
         EJECT
**********************************************************************
****                          ACTION TABLE                          DA1
*                                                                   DA1
*                   POINTERS TO ROUTINES TO DO THE ACTION           DA1
***********************************************************************
ACTTAB   EQU   *                   STARTING ADDRESS
TSUBDC   DC    S(ASUBDC)           SUBSTITUTE DATE COMPILED
TREMARKS DC    S(AREMARKS)         SKIP PAST REMARKS SECTION
TNOWPTR  DC    S(ANOWPTR)          SAVE PRESENT  ENTRY POINTER
TSVPTR   DC    S(ASVPTR)           SAVE MAIN STRING POINTER
TNOACT   DC    S(AGET)             GET NEXT WORD AND NEXT STRING ENTRY
TDECPNT  DC    S(ADECPNT)          CHANGE DECIMAL POINT TO COMMA
TFDPTR   DC    S(AFDPTR)           SAVE FD POINTER AND SET FD SWITCH
TSDPTR   DC    S(ASDPTR)           SAVE SD POINTER AND SET SD SWITCH
TWSPTR   DC    S(AWSPTR)           SAVE WORKING-STORAGE PTR, WRKSTSW
TRDPTR   DC    S(ARDPTR)           SAVE RD POINTER AND SET RD SWITCH
TREDEF   DC    S(AREDEF)           REDEFINES ROUTINE
TLEVEL   DC    S(ALEVEL)           LEVEL 01 ROUTINE
TSAVDNM  DC    S(ASAVDNM)          SAVE 01 LEVEL DATANAME
TPROC    DC    S(APROC)            PROCEDURE DIVISION ACTION
TSECT    DC    S(ASECT)            CHECK FOR PRIORITY NUMBER
TCOPYCLS DC    S(ACOPYCLS)         INDICATE COPY STATEMENT IN PROCESS
TLIB     DC    S(ALIB)             SAVE COPY LIBRARY NAME
TSUPP    DC    S(ASUPP)            TURN ON SUPPRESS INDICATOR
TREP     DC    S(AREP)             PREPARE REPLACING TABLE
TSETCPY  DC    S(ASETCPY)          START COPY PROCESSING
TWORD1   DC    S(AWORD1)           WORD1 TO REPLACING TABLE
TWORD2   DC    S(AWORD2)           WORD2 TO REPLACING TABLE
         EJECT
***********************************************************************
*                                                                   DA1
*                             ACTION ROUTINES                       DA1
*                                                                   DA1
***********************************************************************
         SPACE 1                                                    DA1
ASUBDC   TM    MISCSW2,DCOMPILE    WAS DATE-COMPILED REACHED ALREADY
         BC    ALLON,DRIVER        GET A KEYWORD
         OI    MISCSW2,DCOMPILE    INDICATE DATE-COMPILED FOUND
         L     C2,AIOA1I           LOAD ADDRESS OF INPUT BUFFER
         MVI   DX24(C2),BLANK      BLANK OUT POSSIBLE 1ST COL AFTER
         MVC   DX25(LX47,C2),DX24(C2) PERIOD, THEN BLANK OUT REST
         MVI   DX1(S1),BLANK       BLANK POSITION BEFORE DATE
         MVC   DX2(LX15,S1),DATE   MOVE IN DATE FROM COMMON
         MVI   DX13(S1),PERIOD     MOVE A PERIOD
         BAL   L1,WRITE            WRITE DATE-COMPILED
ASUBDC1  BAL   L1,GETIPT           GET NEXT RECORD
         NI    MISCSW,FF-LP-RP     OFF LP, RP IN ORDER TO GET 1ST WD
         NI    ASWITCH,FF-EOS      OFF END OF STMT INDICATOR
         BAL   L1,SKPEJECT              CHK FOR SKIP OR EJECT
         B     ASUBDC1                  GET AGAIN-SKIP/EJECT
         CLI   DX6(S1),ASTERISK    IS IT A COMMENT
         BE    ASUBDC1             GET AGAIN
         LA    S1,DX6(S1)          UPDATE TO COLUMN 7 OF CARD
         CLI   DX0(S1),HYPHEN      IS IT CONTINUATION CARD        52763
         BE    ASUBDC1             YES,NOT MERGA RESERVED WORD    52763
         OI    MISCSW3,CDSURP      PREVENT GETWORD'S GETTING CARD 52763
         BAL   L1,GETWORD          GET A WORD
         TM    ASWITCH,MARGA+RESWORD IS IT RESERVED WORD IN MARGINA
         BC    ALLOFF+MIXED,ASUBDC1 NO GET NEXT RECORD - NO PRINT
         ST    S1,NBLKPTR          SAVE GETWORD POINTER           53113
         L     S1,AIOA1I           GET COL 1 ADDR                 53113
         LA    L1,ASUBDC2          SAVE THE RETURN ADDRESS        53113
         ST    L1,GCSAVEL1         FROM GETCARD ROUTINE           53113
         BAL   L1,GC4              CHECK SEQ AND INSERT INDICATOR 53113
ASUBDC2  L     S1,NBLKPTR          RESTORE GETWORD POINTER        53113
         NI    MISCSW3,FF-CDSURP   OFF GETCARD SUPPRESS           52763
         LA    W2,ID10             SET RETURN TO DATE-COMPILED STRING
         B     DRIVER1             GET A KEYWORD
         SPACE 1
AREMARKS OI    ASWITCH,WRITESUP    SUPPRESS WRITE TO PHASE 1
         BAL   L1,GETCARD          GET NEXT RECORD
         NI    MISCSW,FF-LP-RP     OFF LP, RP IN ORDER TO GET 1ST WD
         NI    ASWITCH,FF-EOS      OFF END OF STMT INDICATOR
         CLI   DX0(S1),HYPHEN      IS IT CONTINUATION CARD        52763
         BE    AREMARKS            YES,NOT MERGA RESERVED WORD    52763
         OI    MISCSW3,CDSURP      PREVENT GETWORD'S GETTING CARD 52763
         BAL   L1,GETWORD          GET A WORD
         TM    ASWITCH,MARGA+RESWORD IS IT RESERVED WORD IN MARGIN A
         BC    ALLOFF+MIXED,AREMARKS NO, GET NEXT WORD
         NI    MISCSW3,FF-CDSURP   OFF GETCARD SUPPRESS           52763
         LA    W2,ID10             SET RETURN TO DATE-COMPILED STRING
         B     DRIVER1             GET A KEYWORD
         SPACE 1
ASDPTR   OI    MISCSW2,FDSDSW      SET THE SD SWITCH
         LA    C3,ID12             GET LAST STRING ENTRY
         B     OFFLEV1             SINCE SD MAY OCCUR BEFORE AN FD)
         SPACE 1
AFDPTR   OI    MISCSW2,FDSDSW      SET THE FD SWITCH
ANOWPTR  L     C3,NOWSTRNG         RETURN TO PRESENT STRING ENTRY
OFFLEV1  NI    MISCSW2,FF-LEV1SW   TURN OFF LEVEL 1 SWITCH
         NI    MISCSW,FF-REDEF     TURN OFF REDEFINES SWITCH
ASVPTR   ST    C3,NXTSTRNG         SAVE NEXT MAIN STRING POINTER
AGET     BAL   L1,GETWORD          GET A WORD
         B     NEXT                TRUE TEST RETURN- ALTERNATE STRING
         SPACE 1
AWSPTR   NI    MISCSW2,FF-FDSDSW-LEV1SW NO MORE FD OR SD ITEMS
         NI    MISCSW,FF-REDEF     TURN OFF REDEFINES SWITCH
         OI    MISCSW2,WRKSTSW     SET WORKING-STORAGE SWITCH
         ST    W2,NXTSTRNG         SAVE ID15 PTR (INLINE AFTER W-S)
         B     DRIVER              GET A KEYWORD
         SPACE 1
ARDPTR   NI    MISCSW2,FF-FDSDSW-WRKSTSW NO MORE FD, SD, OR W-S ITEMS
         OI    MISCSW2,RDSW        SET THE RD SWITCH
         B     ANOWPTR             SAVE THIS STRING PTR, OFF LEV1SW
         SPACE 1
ADECPNT  MVI   DECPNT,COMMA        CHANGE DECIMAL POINT TO COMMA
         B     NEXT                FOR WORD2 REPLACING OPTION TEST
         SPACE 1
ASAVDNM  LH    C3,SIZEWORD         GET DATANAME SIZE
         TM    MISCSW,REDEF        WAS REDEFINES SPECIFIED
         BC    ALLON,ASAVDNM1      YES - MOVE REDEFINED DATANAME
         EX    C3,MOVDNM1          SAVE DATANAME FOR COPY
         B     AGET                GET NEXT WORD
ASAVDNM1 EX    C3,MOVDNM2          SAVE REDEFINED DATANAME
         B     AGET                GET NEXT WORD
*
MOVDNM1  MVC   DATANAM1(LX0),SIZE  MOVE SIZE AND WORD
MOVDNM2  MVC   DATANAM2(LX0),SIZE  MOVE SIZE AND WORD
         SPACE 1
AREDEF   OI    MISCSW,REDEF        INDICATE REDEFINES SPECIFIED
         B     AGET                GET NEXT WORD
         SPACE 1
ALEVEL   OI    MISCSW2,LEV1SW      INDICATE A LEVEL 1 ITEM
         NI    MISCSW,FF-REDEF          TURN OFF REDEF SW
         TM    MISCSW2,FDSDSW      ARE WE WITHIN FD OR SD
         BC    ALLON,AGET          YES - CONTINUE SCAN
         TM    MISCSW2,RDSW        ARE WE WITHIN RD
         BC    ALLON,AGET          YES - CONTINUE SCAN
ALEVELA  TM    MISCSW2,WRKSTSW     ARE WE WITHIN WORKING-STORAGE
         BC    ALLON,AGET          YES - CONTINUE SCAN
         TM    ASWITCH,MARGA       IS IT A MARGIN A WORD
         BC    ALLON,ALEVELB       YES - ASSUME WORKING-STORAGE
         NI    MISCSW2,FF-LEV1SW   TURN OFF LEVEL 01 SWITCH
*DEL
         B     CHGPTR1             GET A KEYWORD
ALEVELB  OI    MISCSW2,WRKSTSW     ASSUME WORKING-STORAGE
         LA    C3,ID15             CHANGE MAIN STRING POINTER
         B     ASVPTR              SAVE PTR AND CONTINUE SCAN
         SPACE 1
APROC    OI    MISCSW2,PROCSW      INDICATE WITHIN PROCEDURE DIV
         NI    MISCSW2,FF-LEV1SW   TURN OFF LEVEL 01 SWITCH
         NI    MISCSW,FF-REDEF     TURN OFF REDEFINES SWITCH
         ST    W2,NXTSTRNG         UPDATE MAIN STRING PTR - ID80
APROC1   BAL   L1,GETWORD          GET A WORD
         TM    ASWITCH,MARGA       IS IT IN MARGIN A
         BC    ALLOFF,APROC1       NO-GET ANOTHER WORD
         B     NEXT                GO TO NEXT STRING
         SPACE 1
ASECT    BAL   L1,GETWORD          GET A WORD
         CLI   SIZE,K2             IS WORD MORE THAN 2 CHARACTERS
         BC    GT,NEXT             YES - NOT A PRIORITY NUMBER
         LH    C2,SIZEWORD         GET WORD SIZE
         LA    C3,WORD             GET ADDRESS OF WORD
ASECT1   CLI   DX0(C3),EXTZERO     IS CHARACTER GREATER THAN 0
         BL    NEXT                NO - NOT A PRIORITY NUMBER
         CLI   DX0(C3),EXTNINE     IS CHARACTER LESS THAN 9
         BH    NEXT                NO - NOT A PRIORITY NUMBER
         BCT   C2,ASECT1           CONTINUE TEST
         TM    ASWITCH,MARGA       IS WORD A PROCEDURE NAME
         BC    ALLON,CHGPTR2       YES - PROCESS FROM STRING ID80
         B     AGET                PRIORITY NUMBER - GET ANOTHER WORD
         SPACE 1
ACOPYCLS OI    COPYSW,CPYSTMT      INDICATE COPY STMT SCAN IN EFFECT
         B     AGET                GET NEXT WORD
         SPACE 1
ALIB     MVC   CPYLNAM(LX8),BLANKS BLANK OUT NAME FIELD IN CALLING SEQ
         MVC   CPYLNAM2(LX8),BLANKS BLANK OUT NAME FIELD IN CALLING SEQ
         LH    C2,SIZEWORD         GET THE SIZE OF COPY LIB NAME
         BCTR  C2,0                AND DECREMENT FOR EXECUTE
         EX    C2,CPYMOVE          EXECUTE MOVE TO CALLING SEQUENCES
         EX    C2,CPYMOV2          EXECUTE MOVE TO 2ND CALL TO COPY
         L     C2,CRPCON           TIB ADDR (REPLACING TABLE)     53556
         L     C3,DX0(C2)          TAMM ADDR                      53556
         MVC   DX4(LX2,C3),HZERO   ZERO TABLE DISPLACEMENT IN TAMM53556
         B     AGET                GET NEXT WORD
*
CPYMOVE  MVC   CPYLNAM(LX0),WORD   MOVE NAME TO LIBNAME FIELD
CPYMOV2  MVC   CPYLNAM2(LX0),WORD  MOVE NAME TO 2ND LIBNAME FIELD
         SPACE 1
ASUPP    OI    COPYSW,CPYSUPP      INDICATE COPY SUPPRESS
         B     AGET                GET NEXT WORD
         SPACE 1
AREP     OI    COPYSW,CPYREP       INDICATE COPY REPLACING
         B     AGET                GET NEXT WORD
         SPACE 1
AWORD1   LA    W3,SIZE             ADDR OF ENTRY
         LH    W1,SIZEWORD         GET SIZE OF WORD
AWORD21  LA    W1,DX1(W1)          SIZE + 1 FOR COUNT
         BAL   L1,TABSERT          ENTER WORD INTO REP TABLE
         B     AGET                GET NEXT WORD
*
AWORD2   TM    MISCSW4,WORD2SW     IS REPLACING WORD IN WORK BUFFER
         BC    ALLOFF,AWORD1       NO
         NI    MISCSW4,FF-WORD2SW  INIT INDICATOR FOR WORD2
         SR    W1,W1               CLEAR REG
         IC    W1,REPWRK           GET WORD SIZE
         LA    W3,REPWRK           GET ADDRESS OF ENTRY
         NI    REPWD2SW,FF-WD2MRGB TURN OFF MARGINB TEST INDICATOR
         B     AWORD21             ENTER INTO REP TABLE
         SPACE 3
***********************************************************************
*                                                                     *
*     INSERT ROUTINE FOR THE COPY...REPLACING TABLE                   *
*              C1 = A(REPLACING TABLE) C5 = A(INSERT ROUTINE)
*              C0 AND W1 = SIZE OF ENTRY
*              W3 = POINTER TO ENTRY (SIZE AND WORD)
*                                                                     *
***********************************************************************
TABSERT  L     C1,CRPCON           REPLACING TABLE ADDR
         L     C5,ADSERT           ADDR OF INSERT
         MVI   DX0(C1),K0          SET TIB 'N' TO 0
         LR    C0,W1               SIZE OF ENTRY
         BALR  C4,C5               CALL INSERT IN TAMER
         L     C5,COSADDR          RESTORE COS ADDR
         LA    C2,DX0(C2)          CLEARS HI-ORDER BYTE
         BCTR  W1,C0               REDUCE SIZE FOR EXECUTE
         EX    W1,TIBMOVE          EXECUTE MOVE TO OUTPUT
         BR    L1                  RETURN
         SPACE 1
TIBMOVE  MVC   DX0(LX0,C2),DX0(W3) MOVE WORD TO OUTPUT
***********************************************************************
         SPACE 1
ASETCPY  LA    W1,DX2              SIZE OF HALFWORD ZEROES        53556
         LA    W3,HZERO            ADDRESS OF ZERO ENTRY
         BAL   L1,TABSERT          STORE ZERO TO END REP TABLE
ASETCPY1 OI    COPYSW,INCPYLIB     INDICATE READING FROM COPY LIB
         MVC   SIZEWORD(LX2),HZERO CLEAR SIZEWORD
ASETCPY2 BAL   L1,GETCARD          WRITE COPY STMT, GET 1ST LIB CARD
         TM    MISCSW2,LEV1SW      IS THIS COPY FOR A DATA LEVEL ITEM
         BC    ALLON,ASETCPY3      YES - PROCEED TO REPLACE DATA ITEM
         TM    COPYSW,CPYREP       IS THE REPLACING OPTION IN EFFECT
         BC    ALLOFF,ASETCPY2     NO - WRITE AND GET ANOTHER RECORD
*
*     INITIALIZE WORK AREAS FOR REPLACING OPTION AND LEVEL
*      NUMBER DATA ITEMS. REG W2 (STRING PTR REGISTER) IS
*      USED BUT IS RESTORED TO POINT TO THE PROPER SYNTAX
*      STRING WHEN COPY REPLACING PROCESSING IS COMPLETE.
*
ASETCPY3 MVI   CPYHYP,BLANK        INITIALIZE COPY...REPLACING
         MVC   REPWRK(LX198),CPYHYP WORKAREAS WITH
         MVC   REPWRK4(LX65),CPYHYP BLANKS
         L     W2,CRPCON           TIB ADDRESS
         L     W2,DX0(W2)          TAMM ADDRESS
         L     W2,DX0(W2)          START OF TABLE
         LA    W2,DX0(W2)          ZERO HI-ORDER BYTE
         LA    W1,REPWRK           ADDR OF REPLACING WORKAREA
         LH    W3,H65              SET SIZE OF WORKAREA
         TM    MISCSW3,FULLBUFS    WERE ALL WORKAREAS USED FOR
         BC    ALLOFF,ASETCPYA     THIS CARD - NO, PROCESS NEW CARD
         NI    MISCSW3,FF-FULLBUFS TURN OFF INDICATOR
         TM    MISCSW4,LASTWRD     PROCESSING LAST WORD ON CARD
         BC    ALLON,ASETEXTB      YES - SETUP MOVE TO WORK
         B     ASTNTAB2            PROCESS LAST WORD OBTAINED
ASETCPYA DS    0H                  GET FIRST WORD ON CARD
         BAL   L1,CGETWRD          GET FIRST WORD ON CARD
         L     C2,NBLKPTR          ADDR OF 1ST WORD ON CARD
*
*   CHECK FOR DEBUG STATEMENT TO SEE IF DEBUG LOCATION
*   IS TO BE REPLACED.
         TM    MISCSW2,DBUGSW      IS THIS A DEBUG CARD
         BC    ALLON,ASETDBUG      SET IF LOCATION TO BE REPLACED
ASETCPY4 S     C2,COLUMN8          GET DISP OF WORD FROM COL 8
         LA    W1,DX0(C2,W1)       ADDR FOR 1ST ENTRY IN WORKAREA
         SR    W3,C2               REMAINING SPACE IN WORKAREA
*   CHECK FOR A LEVEL NUMBER DATA ITEM (01, 1, OR 77)
*   FOR DATANAME REPLACEMENT
*
ASETCPY5 TM    MISCSW2,LEV1SW      EXPECTING LEVEL NUMBER ITEM
         BC    ALLON,ASETLEV       YES - REPLACE DATANAME
*
*   CHECK EACH WORD ON A CARD FOR REPLACEMENT PROCESSING. IF THE
*     WORD IS A BCD NAME, SCAN THE REPLACING TABLE FOR A MATCH AND
*     REPLACEMENT. OTHERWISE, MOVE CURRENT WORD TO THE COPY...REP
*     WORKAREA AND GET THE NEXT WORD. REPEAT PROCESS UNTIL END OF
*     CARD.
ASETSCN1 BAL   L1,BCDSCAN          IS WORD A BCD NAME
         B     ASETSEEK            BCD RETURN - SEARCH REP TABLE
ASETNTAB BAL   L1,CGETWRD          NO BCD RETURN - GET NEXT WORD
ASTNTAB1 L     C1,NBLKPTR          ADDR OF NEW WORD IN BUFFER
         SR    C1,C2               DISP OF WORD FROM LAST WORD
ASTNTAB2 SR    W3,C1               CAN IT FIT IN PRESENT WORKAREA
         BM    ASETSIZ1            NO - MAY HAVE TO START NEW WORK
ASTNTABX BCTR  C1,C0               REDUCE SIZE FOR EXECUTE
         EX    C1,BCDREP           MOVE WORD TO WORKAREA
         LA    W1,DX1(C1,W1)       POINT TO NEXT AVAIL POSITION
         TM    COPYSW,REPHIT       JUST REPLACED A WORD
         BC    ALLOFF,ASETCPY5     NO - CONTINUE WITH NEXT WORD
         NI    COPYSW,FF-REPHIT    ELSE TURN OFF INDICATOR
         CLI   SIZE,K1             COULD A RIGHT PAREN
         BNE   ASTNTAB3            OR PERIOD POSSIBLY FOLLOW
         CLI   WORD,PERIOD         IF SO DO NOT
         BE    ASETCPY5            INCREMENT WORKAREA POINTER
         CLI   WORD,RPAREN         NOR DECREMENT COUNT
         BE    ASETCPY5            CONTINUE
ASTNTAB3 LA    W1,DX1(W1)          INCREMENT WORKAREA POINTER
         BCTR  W3,C0               DECREMENT WORKAREA COUNT
         B     ASETCPY5            CONTINUE
*
*  BCDSCAN CHECKS FOR A VALID DATANAME TO BE REPLACED- RETURN ON L1
*  DNM1 ROUTINE USES REGS C3 AND C2  -   NOT NECESSARY TO SAVE THEM
BCDSCAN  TM    MISCSW4,PNOTESW+SNOTESW IS THIS A NOTE STATEMENT
         BC    ALLOFF,BCDSCAN1     NO - CONTINUE
         NI    MISCSW3,FF-COBCLAUS DONT RECOGNIZE CLAUSE IN NOTE
         B     BCDSCAN5            NO REPLACEMENT
BCDSCAN1 NI    MISCSW4,FF-MAYBNOTE INITIALIZE MARGIN-A NOTE SWITCH
         BAL   C2,PNM              CHECK VALID NAME REPLACEMENT
         B     BCDSCAN5            INVALID RETURN
         TM    MISCSW3,COBCLAUS    WORD MAY BE NUMERIC PROC NAME
         BC    ALLON,BCDSCAN3      YES - CONTINUE
         TM    MISCSW2,PROCSW      IN PROCEDURE DIVISION
         BC    ALLOFF,BCDSCAN4     NO - NOT A PROCEDURE NAME
         TM    ASWITCH,MARGA       ELSE CHECK FOR PROC NAME
         BC    ALLOFF,BCDSCAN4     NOT MARGA - CHECK ALPHABETIC
         OI    MISCSW4,MAYBNOTE    SET MARGIN-A SWITCH FOR NOTE
BCDSCAN2 L     C2,NBLKPTR          SET UP WORD POINTER
         BR    L1                  RETURN
BCDSCAN3 CLC   SAVECLS(L'PIC),PIC  IS WORD A PICTURE
         BNE   BCDSCAN2            NO - VALID REPLACING ITEM
         B     BCDSCAN5            PICTURE NOT REPLACING ITEM
BCDSCAN4 TM    MISCSW,FNDALPHA     IS ALPHABETIC IN WORD
         BC    ALLON,BCDSCAN2      VALID BCD
BCDSCAN5 LA    L1,DX4(L1)          SET UP NON-BCD RETURN
         B     BCDSCAN2            RETURN
*
*
BCDREP   MVC   DX0(LX0,W1),DX0(C2) MOVE TO WORKAREA
ASETCOMP CLC   DX0(LX0,C3),DX0(C4) COMPARE BCD NAME TO TABLE ARGUMENT
*
*
*  THE FOLLOWING ROUTINE CHECKS THE CURRENT WORD AGAINST THE
*  REPLACING TABLE (TIB29) TO SEE IF REPLACEMENT IS NECESSARY
ASETSEEK LA    C3,SIZE             ADDR OF WORD SIZE
ASETSEK1 LR    C4,W2               TABLE ADDR TO REG
         SR    C1,C1               CLEAR REG
ASETSEK2 IC    C1,DX0(C4)          SIZE OF BCD NAME IN TABLE
         EX    C1,ASETCOMP         TAB ARG = BCD NAME
         BNE   ASETNFND            NOT FOUND
         LA    C2,DX1(C1,C4)       ADDR OF TAB FUNCTION CNT BYTE
         IC    C1,DX0(C2)          SIZE OF TAB FUNCTION
         STC   C1,SIZE             SIZE OF REPLACED WORD IN SIZE
         LA    C2,DX1(C2)          ADDR OF FUNCTION
ASETSEK3 OI    COPYSW,REPHIT       INDICATE REPLACED WORD
         TM    MISCSW4,LASTWRD     LAST WORD
         BC    ALLON,ASTNTAB2      YES - PROCESS LAST WORD
         BAL   L1,CGETWRD          GET NEXT WORD
         B     ASTNTAB2            ENTER INTO WORKAREA
*
ASETNFND CH    C1,HZERO            END OF TABLE
         BNE   ASETNEND            NO - SEARCH AGAIN
         IC    C1,DX0(C3)          SIZE OF BCD NAME
         TM    MISCSW4,LASTWRD     LAST WORD TO BE PROCESSED
         BC    ALLON,ASTNTAB2      YES - ENTER INTO WORKAREA
         B     ASETNTAB            GET A WORD
*
ASETNEND LA    C4,DX1(C1,C4)       ADDR OF FUNCTION SIZE BYTE
         IC    C1,DX0(C4)          SIZE OF FUNCTION
         LA    C4,DX1(C1,C4)       LOC OF NXT ARG IN TAVLE
         B     ASETSEK2            CONTINUE TABLE SEARCH
*
*  THE FOLLOWING ROUTINE SETS UP THE DEBUG CARD FOR POSSIBLE
*  REPLACEMENT OF THE PROC NAME. BCDSCAN SETS UP WORD POINTER
ASETDBUG OI    MISCSW3,COBCLAUS    DEBUG MAY HAVE NUMERIC PROC NAME
         C     C2,COLUMN8          DOES PROC NAME BEGIN AFTER COL8
         BE    ASETCPY4            COL8 - DEBUG CARD OK
         BH    ASTDBUG2            AFTER COL 8 - MOVE DEBUG TO WORK
         LA    C4,WORD             ADDR OF WORD
         LH    C3,SIZEWORD         BEFORE COL 8 -  MUST BE COL7
         BCTR  C3,C0               GET PROC NAME SIZE
         STC   C3,ASTDBUG1+DX1     AND MOVE TO
ASTDBUG1 MVC   DX1(LX0,C2),DX0(C4) COL8
         MVI   DX0(C2),BLANK       BLANK OUT COL7 SO WONT SHOW
         LA    C2,DX1(C2)          IN PRINTOUT
         ST    C2,NBLKPTR          INCREMENT WORD POINTER
         LA    S1,DX1(S1)          INCREMENT INPUT PTR
         B     ASETCPY4            DEBUG CARD READY
ASTDBUG2 LR    C3,C2               SAVE NONBLANK PTR
         S     C3,COLUMN8          DISPLACEMENT FROM COL8
         BCTR  C3,C0               DECREMENT FOR EXECUTE
         L     C2,COLUMN8          GET COL8 PTR
         EX    C3,BCDREP           MOVE THAT PART OF 'DEBUG' PAST
         LA    C2,DX1(C3,C2)       COL8 TO WORK - RESTORE NBLKPTR
         B     ASETCPY4            DEBUG READY
*
*  THE FOLLOWING ROUTINE REPLACES DATA LEVEL NAME IN THE LIBRARY
*  WITH THE DATANAME SPECIFIED ON THE COPY STATEMENT
ASETLEV  LH    C3,LEVINDX          GET LEVEL TABLE INDEX
         LA    C4,DX1(C3)          INCREMENT FOR NEXT TIME THIS RTN
         STH   C4,LEVINDX          SAVE NEW INDEX
         SLL   C3,LX2              MULTIPLY INDEX BY FOUR
         L     C3,LEVTAB(C3)       ADDR OF LEVEL TABLE
         BR    C3                  GET RTN ADDR -BRANCH
*
ASETL1   CLC   WORD(L'LEVEL01),LEVEL01 IS IT 01
         BE    ASETSCN1            RESET C2 - MOVE TO WORK
         CLC   WORD(L'LEVEL1),LEVEL1 IS IT 01
         BE    ASETSCN1            RESET C2 - MOVE TO WORK
         CLC   WORD(L'LEV77),LEV77 IS IT 77
         BE    ASETSCN1            RESET C2 - MOVE TO WORK
ASETEST  NI    MISCSW2,FF-LEV1SW   OFF LEVEL ITEM INDICATOR
         XC    LEVINDX(LX2),LEVINDX REINIT LEVEL INDEX
         B     ASETSCN1            CONTINUE PROCESSING
*
ASETL2   BAL   C2,DNM0             CHECK VALID DNM
         B     ASETEST             INVALID
         CLI   SIZE,K30            DOES WORD EXCEED 30 CHARACTERS
         BH    ASETEST             INVALID
         LA    C2,DATANAM1         ADDR OF REPLACING DNM
         TM    MISCSW,REDEF        REDEFINES SPECIFIED
         BC    ALLOFF,ASETL21      NO - JUST REPLACE DNM
         OI    MISCSW,DUMMYGET     DONT GETWORD - MUST PROCESS REDEF
         B     ASETL22             CONTINUE
ASETL21  NI    MISCSW2,FF-LEV1SW   OFF LEVEL ITEM INDICATOR
         XC    LEVINDX(LX2),LEVINDX REINIT LEVEL INDEX
ASETL22  SR    C1,C1               CLEAR REG
         IC    C1,DX0(C2)          LENGTH OF REPLACING DNM
         LA    C2,DX1(C2)          PTR TO DNM
         B     ASETSEK3            MOVE TO WORKAREA
*
ASETL3   OI    MISCSW,DUMMYGET     SET DUMMYGET FOR DATANAM2 REP
         LA    C2,REDEFINE         ADDR OF WORD
         LA    C1,LX9              LENGTH OF WORD
         B     ASETSEK3            MOVE TO WORKAREA
*
ASETL4   NI    MISCSW,FF-DUMMYGET  MAKE SURE GETWORD - REDEF COMPLETE
         LA    C2,DATANAM2         ADDR OF REDEFINED DNM
         NI    MISCSW2,FF-LEV1SW OFF LEVEL ITEM INDICATOR
         XC    LEVINDX(LX2),LEVINDX REINIT LEVEL TABLE INDEX
         B     ASETL22             MOVE TO WORKAREA
*
LEVTAB   DC    A(ASETL1)           ADDR OF LEVEL RTN
         DC    A(ASETL2)           ADDR OF DNM1 RTN
         DC    A(ASETL3)           ADDR OF REDEF RTN
         DC    A(ASETL4)           ADDR OF DNM2 RTN
*
*
*   THE FOLLOWING ROUTINE WILL SET UP ALTERNATE WORKAREAS
*   IF THE FIRST WORKAREA IS FILLED IN PROCESSING A CARD.
ASETSIZ1 NI    MISCSW3,FF-REPQUOT  INIT CONT QUOTE SW
         TM    COPYSW,REPHIT       TRYING TO FIT A REPLACING WORD
         BC    ALLON,ASETSIZE      GET NEW WORKAREA
         AR    W3,C1               GET AREA LEFT BY ADDING SIZE BACK
         LH    C1,SAVSIZ           GET ACTUAL WORD SIZE
         SR    W3,C1               DOES ACTUAL WORD FIT IN WORKAREA
         BM    ASETSIZP            CHECK FOR CONT PERIOD
         OI    COPYSW,REPHIT       SET INDICATOR TO UP WORK PTR
         B     ASTNTABX            AFTER MOVING WORD TO WORK
ASETSIZP CLI   SAVSIZ+DX1,K1       LENGTH OF ONE
         BNE   ASETSIZE            NO - CONTINUE
         CLI   DX0(C2),PERIOD      IS IT PERIOD
         BE    ASIZMOV1            SET CONTINUATION
         CLI   DX0(C2),RPAREN      IS IT RPAREN
         BE    ASIZMOV1            SET CONTINUATION
ASETSIZE NI    MISCSW4,FF-CONTSW   INIT CONTINUATION SWITCH
         LA    W3,DX61             SIZE OF WORKAREA
         CR    C1,W3               IS WORD SIZE GREATER THAN WORK
         BNH   ASETSIZ2            NO - CONTINUE
         OI    MISCSW4,CONTSW      SET CONTINUATION SWITCH
ASETSIZ2 SR    C3,C3               CLEAR REG
         IC    C3,REPINDX          GET BUFFER TABLE INDEX
         SLL   C3,DX2              MULTIPLY INDEX BY 4
         L     C4,CBUFTAB(C3)      ADDR OF BUF RTN TO PROCESS
         SRL   C3,DX2              RESET INDEX
         LA    C3,DX1(C3)          INCREMENT INDEX
         STC   C3,REPINDX          AND SAVE
         BR    C4                  BRANCH TO RTN
*
ASETSIZ3 LA    W1,REPWRK2+4        ADDR OF COL 12 WORK2
         OI    MISCSW3,REPBUF2     INDICATE 2ND WORK BEING USED
         CLC   DX0(LX1,C2),LITSIGN ALPHA LITERAL
         BNE   ASIZMOVE            MOVE TO WORK
         TM    MISCSW4,CONTSW      IS CONTINUATION NECESSARY
         BC    ALLOFF,ASETSIZD     NO - CONTINUE
         OI    MISCSW3,REPQUOT     CONTINUATION QUOTE WILL BE NEC
ASETSIZD LA    W3,DX1(W3)          IS SIZE OF WORD
         CR    C1,W3               62 CHARACTERS
         BNE   ASETSIZA            NO - CONTINUE
         LA    W1,DX1(W1)          ADJUST BUFFER PTR AND MOVE CNT
         BCTR  W3,C0               SO QUOTE ONLY IS NOT IN NXT BUF
ASETSIZA BCTR  W3,C0               DECREMENT TO ORIGINAL COUNT
         B     ASIZMOVE            MOVE TO WORK
*
ASETSIZ4 LA    W1,REPWRK3+4        ADDR OF COL 12 WORK3
         OI    MISCSW3,REPBUF3     INDICATE 3RD WORK BEING USED
ASETSIZC TM    MISCSW3,REPQUOT     SHOULD THERE BE CONT-QUOTE
         BC    ALLOFF,ASIZMOVE     NO - MOVE TO WORK
         CR    C1,W3               IS WORD 61 CHARACTERS
         BNE   ASETSIZB            NO - CONTINUE
         OI    MISCSW4,CONTSW      SET CONTINUATION SWITCH
         LA    W1,DX1(W1)          ADJUST BUFFER PTR AND MOVE CNT
         BCTR  W3,C0               SO QUOTE ONLY IS NOT IN NXT BUF
ASETSIZB MVC   DX0(LX1,W1),LITSIGN MOVE CONT QUOTE TO WORK
         LA    W1,DX1(W1)          UP WORK POINTER
         BCTR  W3,C0               DECREMENT MOVE COUNT
         B     ASIZMOVE            MOVE TO WORK
*
ASETSIZ5 LA    W1,REPWRK4+4        ADDR OF COL 12 WORK4
         OI    MISCSW3,REPBUF4     INDICATE 4TH WORK BEING USED
         B     ASETSIZC            CHECK FOR CONT QUOTE
*
ASIZMOVE TM    MISCSW4,CONTSW      IS CONTINUATION SW,ON
         BC    ALLOFF,ASTNTAB2     NO - CONTINUE SCAN
         BCTR  W3,C0               DECREMENT FOR EXECUTE
         EX    W3,BCDREP           MOVE TO WORKAREA
         LA    W3,DX1(W3)          RESTORE LENGTH
         SR    C1,W3               REDUCE SIZE BY AMOUNT MOVED
         AR    C2,W3               INCREMENT PTF BY AMOUNT MOVED
         TM    MISCSW3,REPQUOT     PROCESSING CONT ALPHA NUM LIT
         BC    ALLON,ASIZMOV1      MOVE HYPHEN TO NEXT WORK
         CLI   DX0(C2),BLANK       IS NXT CHAR TO MOVE A BLANK
         BE    ASETSIZE            YES-CONTINUE (NO HYPHEN)
         BCTR  C2,C0               LOOK AT LAST CHAR MOVED
         CLI   DX0(C2),BLANK       IS IT A BLANK
         LA    C2,DX1(C2)          RESTORE PTF
         BE    ASETSIZE            YES-CONTINUE (NO HYPHEN)
ASIZMOV1 CLI   REPINDX,K1          CONT FOR WORK3
         BH    ASIZMOV2            OR WORK4
         BL    ASIZMOV3            OR WORK 2
         MVI   CPYHYP3,HYPHEN      HYPHEN TO COL7 FOR WORK3
         B     ASETSIZE            CONTINUE
ASIZMOV2 MVI   CPYHYP4,HYPHEN      HYPHEN TO COL7 FOR WORK4
         B     ASETSIZE            CONTINUE
ASIZMOV3 MVI   CPYHYP2,HYPHEN      SET HYPHEN FOR WORK 2
         B     ASETSIZE            CONTINUE
*
ASETSIZ6 OI    MISCSW3,FULLBUFS    INDICATE WORKAREAS FILLED
         STM   C1,C2,C1C2SAVE      SAVE POINTER REGS FOR CARD
         MVC   LIBWORK(LX80),CPYWRK1 SAVE THE CURRENT LIB CARD
         B     ASETOUT             SHIFT WORKAREAS
ASETEXT  NI    MISCSW4,FF-LASTWRD  RESET LAST WORD SWITCH
ASETOUT  MVC   CPYWRK1+DX7(LX65),REPWRK WORKAREA TO GETCARD BUFF
         MVC   CPYHYP(LX198),CPYHYP2 SHIFT WORK AREAS
         B     ASETCPY2            WRITE STMTS AND GET NEW CARD
*
CBUFTAB  DC    A(ASETSIZ3)         RTN FOR REPWRK2
         DC    A(ASETSIZ4)         RTN FOR REPWRK3
         DC    A(ASETSIZ5)         RTN FOR REPWRK4
         DC    A(ASETSIZ6)         RTN TO CLEAN UP
*
*
*  THE FOLLOWING ROUTINE SETS THE CARD SURPRESS SW AND GETS A WORD
*  IF A NEW CARD MUST BE READ, GETWORD RETURNS WITHOUT GETTING THE
*  CARD AND TURNS OFF THE SWITCH. GET WORD SAVES W1,W2,W3 REGS.
CGETWRD  ST    L1,ENAMSVL1         SAVE LINK REGISTER
         STM   C1,C2,C1C2SAVE      SAVE WROD POINTER REGS
         MVC   SAVSIZ(LX2),SIZEWORD SAVE WORD SIZE
         OI    MISCSW3,CDSURP      SET GETCARD SURPRESS
         BAL   L1,GETWORD          GET A WORD
         LM    C1,C2,C1C2SAVE      RESTORE REGS
         TM    MISCSW3,CDSURP      NEED A NEW CARD
         BC    ALLOFF,ASETEXIT     YES - SET BUFFERS AND EXIT
CGETWRD1 L     L1,ENAMSVL1         RESTORE LINK REG
         BR    L1                  RETURN
*
*  THE FOLLOWING ROUTINE GETS CONTROL WHEN WE HAVE REACHED THE END
*  OF THE CARD IMAGE IN GETWORD. IF SIZE=0, LASTWRD SWITCH IS SET
*  AND THE LAST WORD IS PROCESSED. IF SIZE NE 0, THE LAST WORD IS
*  EITHER CONTINUED OR IT ENDS IN COL 72, IN THIS CASE THE NEXT TO
*  LAST WORD IS PROCESSED. SINCE THE INPUT PTR IS PAST COL 72, THE
*  NEXT CALL TO GETWORD RETURNS A SIZE=0. THE LASTWORD IS THEN
*  PROCESSED.
ASETEXIT TM    MISCSW4,LASTWRD     HAS LAST WORD BEEN PROCESSED
         BO    ASETEXTA            YES - SEE IF CONT PERIOD
         CLI   SIZE,K0             CONT WORD OR WORD ENDING COL 72
         BNE   ASETEXT1            YES - BRANCH
         LH    C3,SAVSIZ           IS ANYTHING IN THE WORKAREA
         LTR   C3,C3               OR ANYTHING TO BE MOVED
         BZ    ASETCPY2            NO - GET NEXT CARD
         OI    MISCSW4,LASTWRD     INDICATE LAST WORD
         MVI   SIZE,K0             STOPPER FOR SEARCH OF TABLE
         TM    COPYSW,REPHIT       IS CURRENT WORD BEING REPLACED
         BC    ALLOFF,ASETEXTB     NO - GET WORD
         MVI   SIZE,K1             MOVE PERIOD TO WORD SO
         MVI   WORD,PERIOD         WORKAREA POINTER IS NOT
         B     ASTNTAB2            INCREMENTED IF CONTPER IS SET
ASETEXTB LH    C1,SAVSIZ           GET SIZE OF CURRENT WORD
ASETEXTD LA    C2,WORD             POINT TO WORD
         TM    MISCSW4,CONTLIT     IS LAST WORD A CONT LIT
         BC    ALLOFF,ASTNTAB2     NO - MOVE WORD TO WORK
         CR    W3,C1               DOES CONT LIT FIT IN WORKAREA
         BNL   ASETEXTC            YES - MOVE TO SAME RELATIVE POS
         CLI   REPINDX,K2          IS THERE ANOTHER WORKAREA
         BH    ASETSIZ6            TO PUT CONT LIT. NO - GET OUT
         NI    MISCSW3,FF-REPQUOT  INDICATE NO CONT QUOTE
         NI    MISCSW4,FF-CONTLIT  TURN OFF INDICATOR
         LA    W3,DX61             SIZE OF WORKAREA
         SR    W3,C1               SUBTRACT WORD SIZE
         LA    W1,WORD(W3)         SAME RELATIVE POS IN WORD
         BCTR  C1,C0               DECREMENT FOR MOVE
         EX    C1,BCDREP           C2 HAS NBLKPTR OF WORD
         MVI   WORD,BLANK          MOVE A BLANK BEFORE WORD
         BCTR  W3,C0               DECREMENT COUNT
         LA    C1,DX61             SIZE TO BE MOVED
         LA    C2,WORD             ADDR OF DATA TO MOVE
         LTR   W3,W3               MUST WE PAD WITH ANYMORE BLANKS
         BZ    ASETSIZE            NO - GET WORKAREA AND MOVE DATA
         LA    W1,DX1(C2)          NEXT POS TO PAD WITH BLANKS
         BCTR  W3,C0               DECREMENT FOR EXECUTE
         EX    W3,BCDREP           PAD WITH BLANKS
         B     ASETSIZE            GET WORKAREA AND MOVE DATA
*
ASETEXTC NI    MISCSW4,FF-CONTLIT  TURN OFF INDICATOR
         SR    W3,C1               SUBTRACT WORD SIZE
         LA    W1,DX0(W3,W1)       SAME REL POS IN WORK AS BUFFER
         LR    W3,C1               SIZE OF CONT LIT
         B     ASTNTAB2            C2 HAS NBLKPTR - MOVE TO WORK
ASETEXTA TM    MISCSW4,CONTPER     PERIOD AFTER CONT WORD
         BC    ALLOFF,ASETEXT      NO
         NI    MISCSW4,FF-CONTPER  TURN OFF EOS INDICATOR
         LA    C1,DX1              SIZE OF PERIOD
         MVI   WORD,PERIOD         PERIOD TO WORD
         B     ASETEXTD            SET WORD PTR
*
ASETEXT1 CLC   WORD(LX1),LITSIGN   IS WORD A LITERAL
         BE    ASETEXT7            INDICATE CONT LIT
         CLI   CPYWRK2+DX6,HYPHEN  IS THIS A CONTINUED WORD
         BNE   CGETWRD1            NO  - RETURN
         MVI   CPYWRK2+DX6,BLANK   BLANK OUT CONTINUATION
         LA    C3,CPYWRK2+DX6      ADDR OF COL 7 2ND BUFFER
ASETEXT2 LA    C3,DX1(C3)          NEXT COLUMN
         CLI   DX0(C3),BLANK       IS IT BLANK
         BE    ASETEXT2            CONTINUE
         LA    C4,CPYWRK2+DX72     ADDR OF COL 73
         CR    C3,C4               COL 72 HIT
         BNL   CGETWRD1            YES - RETURN
         LH    C4,SIZEWORD         GET SIZE OF WORD IN WORD
         LR    L1,C4               GET WORD SIZE
         LA    C4,WORD(C4)         POINT TO END OF WORD
ASETEXT3 CLI   DX0(C3),BLANK       POINTING TO BLANK
         BE    ASETEXT6            END OF CONT WORD
         MVC   DX0(LX1,C4),DX0(C3) MOVE TO CHARACTER TO WORD
         MVI   DX0(C3),BLANK       BLANK OUT BUFFER 2
         CLI   DX0(C4),PERIOD      WAS CHARACTER A PERIOD
         BNE   ASETEXT4            NO - CONTINUE
         CLI   DX1(C3),BLANK       IS IT FOLLOWED BY A BLANK
         BNE   ASETEXT4            NO - CONTINUE
         OI    MISCSW4,CONTPER     END OF SENTENCE
         B     ASETEXT6            SAVE SIZE
ASETEXT4 LA    C3,DX1(C3)          UP BUFFER PTR
         LA    L1,DX1(L1)          UP COUNT
         LA    C4,DX1(C4)          UP WORD PTR
         B     ASETEXT3            CONTINUE
ASETEXT6 STC   L1,SIZE             SAVE SIZE
         B     CGETWRD1            RETURN
ASETEXT7 OI    MISCSW4,CONTLIT     INDICATE CONTINUED LITERAL
         B     CGETWRD1            RETURN
         EJECT
**********************************************************************
*
*                             CONNECTOR TABLE
*
*              2ND HALFBYTE OF 1ST BYTE IN STRING ENTRY CONTAINS A
*              POINTER TO FALSE TEST ROUTINE IN THIS TABLE
*
*
***********************************************************************
CONTAB   EQU   *                   STARTING ADDR
         DC    S(NEXT)        00   OPTIONAL WORD
         DC    S(CHGPTR1)     01   REQ COND, PHASE 1 WILL DIAGNOSE
         DC    S(IGNORE)      02   E-LEVEL, 0 INSERT SKIP TO KEYWORD
         DC    S(IGNORE1)     03   E-LEVEL, 1 INSERT SKIP TO KEYWORD
         DC    S(IGNORE2)     04   E-LEVEL, 2 INSERT SKIP TO KEYWORD
***********************************************************************
*
*                             ERROR RECOVERY ROUTINES
*
***********************************************************************
IGNOREB  MVC   MSGNO,K3(W2)        MOVE MSG NUMBER TO DIAGNOSTIC CALL
         B     DIAG123             GO TO DIAGNOSTIC CALL
*
IGNORE   MVI   LEVINSRT,X'20'      E-LEVEL, NO INSERTS
         B     IGNOREA             FINISH DIAGNOSTIC CALL
*
IGNORE1  MVI   LEVINSRT,X'21'      E-LEVEL, ONE INSERT
         B     IGNOREA             FINISH DIAGNOSTIC CALL
*
IGNORE2  MVI   LEVINSRT,X'24'      E-LEVEL, TWO INSERTS (2ND IS COPY)
*
IGNOREA  CLI   DX0(W2),K80         TEST FOR RESERVED WORD TYPE ENTRY
         BNL   IGNOREB             NOT A RESERVED TYPE
         MVC   MSGNO,K5(W2)        MOVE MSG NUMBER TO DIAGNOSTIC CALL
DIAG123  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
LEVINSRT DS    1C                  LEVEL AND NUMBER OF INSERTS
MSGNO    DS    1C                  MESSAGE NUMBER
*
         NI    COPYSW,K0           INDICATE COPY NOT IN EFFECT
         NI    REPWD2SW,K0         REINITIALIZE WORD2 INDICATORS
         OI    MISCSW5,BADCOPY     INDICATE BAD COPY STATEMENT
IGNOREC  BAL   L1,GETWORD          COPY INVALID - GET A WORD
         TM    ASWITCH,MARGA       MARGIN A WORD
         BC    ALLON,CHGPTR2       RETURN TO STRING PROCESSING
         CLI   SIZE,K1             UNTIL THE END
         BNE   IGNOREC             OF SENTENCE
         CLI   WORD,PERIOD         WHEN END OF
         BNE   IGNOREC             SENTENCE IS FOUND
         BAL   L1,GETCARD          GET NEXT CARD
         BAL   L1,GETWORD          GET A WORD
         B     CHGPTR2             RETURN TO STRING PROCESSING
         EJECT
****                          INTERPRETIVE STRINGS                 ****
*
*                   EACH ENTRY IS MADE UP OF 1 TO 6 BYTES
*                   WHICH LOOK AS FOLLOWS
*
*                   / 1   / 2   / 3 4   / 5   / 6   /
*                  /X'JK'/X'LL'/X'MNNN'/X'PP'/X'QQ'/
*
*                   WHERE
*                   J = DISPLACEMENT INTO TESTTAB -LIST OF ROUTINES
*                       WHICH DO TESTS ON WORDS
*                   K = DISPLACEMENT INTO CONNECTOR TABLE (CONTAB)
*                       IF TEST PROVES FALSE, CONTAB ADDRESS
*                       DETERMINES WHETHER ALLOWABLE AND WHERE TO GO
*                       TO DO THE SYSTEM ACTION ROUTINE
*                       THIS HALFBYTE HAS SPECIAL MEANING FOR THE
*                       CHANGE-STRING-POINTER ROUTINE (J = 3)
*                   LL = DISPLACEMENT INTO ACTION TABLE (ACTTAB)
*                       IF TEST IS TRUE, ACTTAB GIVES ADDRESS OF
*                       ROUTINE TO BRANCH TO
*                   (MNNN ARE OPTIONAL BYTES, MISSING IF TEST IS NOT
*                   FOR A RESERVED WORD)
*                   M = LENGTH OF WORD (2 THRU F)
*                  NNN= DISPLACEMENT INTO RESERVED WORD LIST FOR
*                       COMPARE OF CURRENT WORD
*                   PP= IF NON ZERO IT IS POINTER TO NEXT STRING
*                       IF ZERO, USE NEXT STRING IN LINE
*                   (QQ IS AN OPTIONAL BYTE, MISSING IF FAILURE TO
*                    SATISFY THE TEST DOES NOT CONSTITUTE AN ERROR
*                    FOR A COPY STATEMENT)
*                   QQ= ERROR BYTE WHICH CONTAINS THE MESSAGE NUMBER
*                       FOR DIAGNOSTICS IF THE TEST ROUTINE WAS NOT
*                       SATISFIED
*
*                   THE CHANGE-STRING-POINTER ROUTINE IS A ONE
*                   BYTE ENTRY
*
*                   REFERENCE TO THE LAST STRING LABEL MUST NOT
*                   EXCEED X'FF' SINCE PP= 1-BYTE.IF THE STRING GROWS
*                   SUCH THAT A POINTER TO THE LAST LABEL EXCEEDS
*                   X'FF', A SPLITTING OF THE STRING IS NECESSARY.
*                   THIS REQUIRES A CHANGE TO THE CALCACT4 ROUTINE
*                   WHICH GETS THE BEGINNING OF THE CURRENT STRING
*                   TO DETERMINE WHICH ENTRY TO BRANCH TO WITHIN
*                   THE STRING. ALSO THE STRING WITHIN WHICH
*                   PROCESSING IS TAKING PLACE AT ANY TIME, SHOULD
*                   HAVE HAD ITS BEGINNING ADDRESS SAVED IN ORDER
*                   TO REFERENCE ANY LABELS WITHIN THAT STRING
***********************************************************************
ID10     DC    X'00'               MARGIN A TEST, OPTIONAL
         DC    AL1(TSUBDC-ACTTAB)  SUBSTITUTE DATE-COMPILED ROUTINE
         DC    AL2(L13+DATECOMP-COBOLWDS) DISP OF DATE-COMPILED LN 13
         DC    X'00'               DUMMY RETURN - SET BY ACTION RTN
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TREMARKS-ACTTAB) SKIP REMARKS SECTION
         DC    AL2(L7+REMARKS-COBOLWDS) DISP OF REMARKS - LENGTH 7
         DC    X'00'               DUMMY RETURN - SET BY ACTION RTN
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSVPTR-ACTTAB)  SAVE STRING POINTER
         DC    AL2(L15+SOURCECM-COBOLWDS) DISP OF SOURCE-COMPUTER L15
         DC    AL1(ID20-ID10)      RETURN TO STRING ID20
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSVPTR-ACTTAB)  SAVE STRING POINTER
         DC    AL2(L15+OBJECTCM-COBOLWDS) DISP OF OBJECT-COMPUTER L15
         DC    AL1(ID20-ID10)      RETURN TO STRING ID20
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSVPTR-ACTTAB)  SAVE STRING POINTER
         DC    AL2(L13+SPECIALN-COBOLWDS) DISP OF SPECIAL-NAMES LN 13
         DC    AL1(ID20-ID10)      RETURN TO STRING ID20
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSVPTR-ACTTAB)  SAVE STRING POINTER
         DC    AL2(L13+DECPOINT-COBOLWDS) DISP OF DECIMAL-POINT  LN 13
         DC    AL1(ID30-ID10)      RETURN TO STRING ID30
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSVPTR-ACTTAB)  SAVE STRING POINTER
         DC    AL2(L12+FILECON-COBOLWDS) DISP OF FILE-CONTROL LN 12
         DC    AL1(ID20-ID10)      RETURN TO STRING ID20
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TNOWPTR-ACTTAB) SAVE THIS PTR-MAY BE SELECT AGAIN
         DC    AL2(L6+SELECT-COBOLWDS) DISP OF SELECT - LENGTH 6
         DC    AL1(ID40-ID10)      RETURN TO STRING ID40
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSVPTR-ACTTAB)  SAVE STRING POINTER
         DC    AL2(L11+IOCONTRL-COBOLWDS) DISP OF I-O-CONTROL LN 11
         DC    AL1(ID20-ID10)      RETURN TO STRING ID20
         SPACE 1
ID12     DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TFDPTR-ACTTAB)  SAVE THIS PTR- MAY BE FD,SD,01 AGAIN
         DC    AL2(L2+FD-COBOLWDS) DISP OF FD - LENGTH 2
         DC    AL1(ID50-ID10)      RETURN TO STRING ID50
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSDPTR-ACTTAB)  SAVE LAST ENTRY PTR (FD ENTRY)
         DC    AL2(L2+SD-COBOLWDS) DISP OF SD - LENGTH 2
         DC    AL1(ID50-ID10)      RETURN TO STRING ID50
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TLEVEL-ACTTAB)  DISP OF LEVEL 01,77 OR 1 ROUTINE
         DC    AL2(L2+LEVEL01-COBOLWDS) DISP OF 01 - LENGTH 2
         DC    AL1(ID50-ID10)      RETURN TO STRING ID50
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TLEVEL-ACTTAB)  DISP OF LEVEL 01,77 OR 1 ROUTINE
         DC    AL2(LN+LEVEL1-COBOLWDS) DISP OF 1 - LENGTH 1
         DC    AL1(ID50-ID10)      RETURN TO STRING ID50
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TWSPTR-ACTTAB)  SAVE PTR, GET KEYWORD, SET WRSTSW
         DC    AL2(L15+WORKSTOR-COBOLWDS) DISP OF WORKING-STORAGE L 15
         DC    X'00'               RETURN TO FOLLOWING STRING
         SPACE 1
ID15     DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TLEVEL-ACTTAB)  DISP OF LEVEL 77 ROUTINE
         DC    AL2(L2+LEV77-COBOLWDS) DISP OF 77 - LENGTH 2
         DC    AL1(ID60-ID10)      RETURN TO STRING ID60          52763
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TLEVEL-ACTTAB)  DISP OF LEVEL 01,77 OR 1 ROUTINE
         DC    AL2(L2+LEVEL01-COBOLWDS) DISP OF 01 - LENGTH 2
         DC    AL1(ID60-ID10)      RETURN TO STRING ID60
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TLEVEL-ACTTAB)  DISP OF LEVEL 01,77 OR 1 ROUTINE
         DC    AL2(LN+LEVEL1-COBOLWDS) DISP OF 1 - LENGTH 1
         DC    AL1(ID60-ID10)      RETURN TO STRING ID60
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TRDPTR-ACTTAB)  SAVE THIS PTR- MAY BE RD,01 AGAIN
         DC    AL2(L2+RD-COBOLWDS) DISP OF RD - LENGTH 2
         DC    AL1(ID70-ID10)      RETURN TO STRING ID70
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TLEVEL-ACTTAB)  DISP OF LEVEL 01,77 OR 1 ROUTINE
         DC    AL2(L2+LEVEL01-COBOLWDS) DISP OF 01 - LENGTH 2
         DC    AL1(ID75-ID10)      RETURN TO STRING ID75
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TLEVEL-ACTTAB)  DISP OF LEVEL 01,77 OR 1 ROUTINE
         DC    AL2(LN+LEVEL1-COBOLWDS) DISP OF 1 - LENGTH 1
         DC    AL1(ID75-ID10)      RETURN TO STRING ID75
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TPROC-ACTTAB)   PROCEDURE DIVISION ACTION
         DC    AL2(L9+PROCED-COBOLWDS) DISP OF PROCEDURE - LENGTH 9
         DC    AL1(ID80-ID10)      RETURN TO STRING ID80
         SPACE 1
         DC    X'31'               GET KEYWORD AND CHANGE STRING PTR
         SPACE 1
ID20     DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    AL2(LN+CPERIOD-COBOLWDS) DISP OF PERIOD - LENGTH 1
         DC    X'00'               RETURN TO STRING FOLLOWING
         SPACE 1
         DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TCOPYCLS-ACTTAB) COPY CLAUSE ROUTINE
         DC    AL2(L4+COPY-COBOLWDS) DISP OF COPY - LENGTH 4
         DC    AL1(CPY1-ID10)      RETURN TO STRING CPY1
         SPACE 1
         DC    X'30'               GET KEYWORD AND CHANGE STRING PTR
         SPACE 1
ID30     DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    AL2(L2+IS-COBOLWDS) DISP OF IS - LENGTH 2
         DC    X'00'               RETURN TO STRING FOLLOWING
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TDECPNT-ACTTAB) DECIMAL-POINT ROUTINE
         DC    AL2(L5+COMMA5-COBOLWDS) DISP OF COMMA - LENGTH 5
         DC    X'00'               RETURN TO STRING
         SPACE 1
         DC    X'30'               GET KEYWORD AND CHANGE STRING PTR
         SPACE 1
ID40     DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    AL2(L8+OPTIONAL-COBOLWDS) DISP OF OPTIONAL - LENGTH 8
         DC    X'00'               RETURN TO FOLLOWING STRING
         SPACE 1
ID50     DC    X'51'               VALID DATA-NAME TEST, REQ COND
         DC    AL1(TSAVDNM-ACTTAB) SAVE DATANAME FOR POSSIBLE COPY
         DC    X'00'               RETURN TO FOLLOWING STRING
         SPACE 1
         DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TCOPYCLS-ACTTAB) COPY CLAUSE ROUTINE
         DC    AL2(L4+COPY-COBOLWDS) DISP OF COPY - LENGTH 4
         DC    AL1(CPY1-ID10)      RETURN TO STRING CPY1
         SPACE 1
         DC    X'30'               GET KEYWORD AND CHANGE STRING PTR
         SPACE 1
ID60     DC    X'51'               VALID DATA-NAME TEST, REQ COND
         DC    AL1(TSAVDNM-ACTTAB) SAVE DATANAME FOR POSSIBLE COPY
         DC    X'00'               RETURN TO FOLLOWING STRING
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TREDEF-ACTTAB)  SET REDEFINES SWITCH
         DC    AL2(L9+REDEFINE-COBOLWDS) DISP OF REDEFINES - LENGTH 9
         DC    AL1(ID50-ID10)      RETURN TO STRING ID50
         SPACE 1
         DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TCOPYCLS-ACTTAB) COPY CLAUSE ROUTINE
         DC    AL2(L4+COPY-COBOLWDS) DISP OF COPY - LENGTH 4
         DC    AL1(CPY1-ID10)      RETURN TO STRING CPY1
         SPACE 1
         DC    X'30'               GET KEYWORD AND CHANGE STRING PTR
         SPACE 1
ID70     DC    X'51'               VALID DATA-NAME TEST, REQ COND
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    X'00'               RETURN TO FOLLOWING STRING
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    AL2(L4+WITH-COBOLWDS) DISP OF WITH - LENGTH 4
         DC    X'00'               RETURN TO FOLLOWING STRING
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    AL2(L4+CODE-COBOLWDS) DISP OF CODE - LENGTH 4
         DC    AL1(ID50-ID10)      RETURN TO STRING ID75
         SPACE 1
         DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TCOPYCLS-ACTTAB) COPY CLAUSE ROUTINE
         DC    AL2(L4+COPY-COBOLWDS) DISP OF COPY - LENGTH 4
         DC    AL1(CPY1-ID10)      RETURN TO STRING CPY1
         SPACE 1
         DC    X'30'               GET KEYWORD AND CHANGE STRING PTR
         SPACE 1
ID75     DC    X'50'               VALID DATA-NAME TEST, OPTIONAL
         DC    AL1(TSAVDNM-ACTTAB) SAVE DATANAME FOR POSSIBLE COPY
         DC    X'00'               RETURN TO FOLLOWING STRING
         SPACE 1
         DC    X'10'               NON-MAEGIN A TEST, OPTIONAL
         DC    AL1(TCOPYCLS-ACTTAB) COPY CLAUSE ROUTINE
         DC    AL2(L4+COPY-COBOLWDS) DISP OF COPY - LENGTH 4
         DC    AL1(CPY1-ID10)      RETURN TO STRING CPY1
         SPACE 1
         DC    X'30'               GET KEYWORD AND CHANGE STRING PTR
         SPACE 1
ID80     DC    X'60'               PROCEDURE NAME TEST
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    X'00'               RETURN TO STRING FOLLOWING
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TSECT-ACTTAB)   CHECK FOR PRIORITY NUMBER
         DC    AL2(L7+SECTION-COBOLWDS) DISP OF SECTION - LENGTH 7
         DC    X'00'               RETURN TO STRING FOLLOWING
         SPACE 1
         DC    X'20'               EITHER MARGIN A OR B, OPTIONAL
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    AL2(LN+CPERIOD-COBOLWDS) DISP OF PERIOD - LENGTH 1
         DC    X'00'               RETURN TO STRING FOLLOWING
         SPACE 1
         DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TCOPYCLS-ACTTAB) COPY CLAUSE ROUTINE
         DC    AL2(L4+COPY-COBOLWDS) DISP OF COPY - LENGTH 4
         DC    AL1(CPY1-ID10)      RETURN TO STRING CPY1
         SPACE 1
         DC    X'30'               CHANGE STRING PTR
         SPACE 1
CPY1     DC    X'42'               VALID EXTERNAL NAME, REQ COND
         DC    AL1(TLIB-ACTTAB)    SAVE COPY LIBRARY NAME
         DC    X'00'               RETURN TO FOLLOWING STRING
         DC    X'13'               ERROR 1019
         SPACE 1
         DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TSUPP-ACTTAB)   TURN ON SUPPRESS INDICATOR
         DC    AL2(L8+SUPPRESS-COBOLWDS) DISP OF SUPPRESS - LENGTH 8
         DC    X'00'               RETURN TO STRING FOLLOWING
         SPACE 1
         DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TREP-ACTTAB)    INITIALIZE FOR REPLACING OPTION
         DC    AL2(L9+REPLACE-COBOLWDS) DISP OF REPLACING - LENGTH 9
         DC    AL1(CPY3-ID10)      RETURN TO STRING CPY3
         SPACE 1
         DC    X'14'               NON-MARGIN A TEST, REQ COND
         DC    AL1(TSETCPY-ACTTAB) SET COPY INDICATORS - DO COPY
         DC    AL2(LN+CPERIOD-COBOLWDS) DISP OF PERIOD - LENGTH 1
         DC    X'00'               DUMMY RETURN- SET BY ASETCPY
         DC    X'11'               MESSAGE 1017
         SPACE 1
         SPACE 1
CPY2     DC    X'10'               NON-MARGIN A TEST, OPTIONAL
         DC    AL1(TSETCPY-ACTTAB) SET COPY INDICATORS - DO COPY
         DC    AL2(LN+CPERIOD-COBOLWDS) DISP OF PERIOD - LENGTH 1
         DC    X'00'               DUMMY RETURN- SET BY ASETCPY
         SPACE 1
CPY3     DC    X'73'               WORD1 TEST, REQ COND
         DC    AL1(TWORD1-ACTTAB)  SET UP WORD1 IN REP TABLE
         DC    X'00'               RETURN TO STRING FOLLOWING
         DC    X'3E'               MESSAGE 1062
         SPACE 1
         DC    X'14'               NON-MARGIN A TEST, REQ COND
         DC    AL1(TNOACT-ACTTAB)  NO ACTION REQUIRED
         DC    AL2(L2+BY-COBOLWDS) DISP OF BY - LENGTH 2
         DC    X'00'               RETURN TO STRING FOLLOWING
         DC    X'11'               MESSAGE 1017
         SPACE 1
         DC    X'83'               WORD2 TEST, REQ COND
         DC    AL1(TWORD2-ACTTAB)  SET UP WORD2 IN REP TABLE
         DC    AL1(CPY2-ID10)      RETURN TO STRING CPY2
         DC    X'3E'               MESSAGE 1062
         EJECT
***********************************************************************
*
*                        DIAGNOSTIC ROUTINE
*
*        CALLED AS FOLLOWS:
*              BAL L1,DIAGNOSE
*              DC  X'AB'      WHERE A=0 FOR W-LEVEL  B=0 FOR NO INSERT
*              DC  X'YY'              1 FOR C-LEVEL    1 FOR 1  INSERT
*                                     2 FOR E-LEVEL    2 FOR CARD IMAGE
*                                                            INSERT
*                                                      4 FOR 2 INSERTS
*                             YY=MESSAGE NUMBER
*        MESSAGES AND PARAMETERS ARE WRITTEN VIA:
*              LA   C2,ADDRESS-OF-RECORD
*              BALR C0,C5     WHERE C5= A(COS)
*              DC   X'23'     WRITE ON FILE 3
*
*        RETURN TO CALLING ROUTINE VIA L1 REGISTER
*
***********************************************************************
DIAGNOSE STM   C1,C3,DIAGSAVE           SAVE REGS USED BY DIAG.
         ST    L1,WRSAVEL1         SAVE THE LINK REGISTER
         TM    DX0(L1),K2          IS THIS AN INSERT/DELETE MESSAGE
         BC    ALLON,DIAG          YES, PREPARE PARAM TEXT FOR MSG
         TM    MISCSW,TSTNAME      MSG FOR BASIS EXTERNAL NAME
         BC    ALLON,DIAG00        YES - WRITE E-TEXT
         TM    COPYSW,CPYSTMT      IS COPY STMT SCAN IN EFFECT
         BC    ALLOFF,DX2(L1)      NO - PHASE 1 WILL DIAGNOSE
DIAG00   TM    DX0(L1),K5          ARE THERE ANY INSERTS
         BC    ALLOFF,DIAG0        NO - PREPARE ERROR MSG TEXT
         B     DIAG3               PREPARE COPY MSG TEXT - NO INSERTS
DIAG     EQU   *                   PREPARE INSERT/DELETE PARAMETER
         MVC   MSGGCN,HZERO        ZERO OUT SEQUENCE NUMBER FIELD
         MVI   EPARNN+DX1,K74      MOVE BYTE COUNT TO PARAM TEXT
         MVC   EPARAM(LX2),CODECNT MOVE CODE/COUNT TO PARAM TEXT
         LA    C3,IDELWORK         GET ADDR OF BUFFER
         MVC   EPARAM+DX2(LX72),DX0(C3) MOVE CARD IMAGE TO PARAM TEXT
         B     DIAG1               PREPARE REST OF E-TEXT
DIAG0    EQU   *                   PREPATE GEN SEQ NUMBER
         MVC   MSGGCN(LX2),CURGCN  MOVE GEN SEQ NUMBER
DIAG1    MVC   MSGNUM+DX1(LX1),DX1(L1) MOVE MSG NUMBER TO E-TEXT
         MVZ   MSGSP(LX1),DX0(L1)  MOVE SEVERITY CODE IN E-TEXT
*
*     WRITE ERROR MESSAGE
*
         LA    C2,MSGDEF           MESSAGE TEXT AREA
         BALR  C0,C5               CALL TO PHASE 0 TO WRITE
         DC    X'23'               MESSAGE ON FILE 3
*
         TM    DX0(L1),K7          IS THERE PARAMETER TEXT AFTER MSG
         BC    ALLOFF,DIAG2        NO RETURN
         LA    C2,EPARNN           PARAMETER TEXT AREA
         BALR  C0,C5               CALL TO PHASE 0 TO WRITE
         DC    X'23'               MSG PARAMETER ON FILE 3
         TM    DX0(L1),K4          ARE THERE TWO INSERTS
         BC    ALLOFF,DIAG2        NO - RETURN
         MVI   EPARNN+DX1,K6       TOTAL LENGTH OF PARAMETER
         MVI   EPARAM,X'23'        SET UP BCD NAME CODE
         MVI   EPARAM+DX1,K4       LENGTH OF WORD
         MVC   EPARAM+DX2(LX4),COPY COPY CLAUSE MESSAGE
         BALR  C0,C5               WRITE PARAM  C2=A(PARAM) C5=A(COS)
         DC    X'23'               MSG PARAMETER ON FILE 3
DIAG2    LM    C1,C3,DIAGSAVE              RESTORE REGS
         L     L1,WRSAVEL1         RESTORE LINK REGISTER
         B     DX2(L1)             RETURN
         SPACE 1                                                    DA1
DIAG3    EQU   *                   INSERT IS IN WORD
         LA    C3,WORD             ADDRESS OF WORD
         LH    C2,SIZEWORD         SIZE OF WORD
         CLC   WORD(LX1),LITSIGN   IS WORD ALPHANUMERIC
         BE    DIAG5               YES - SET UP AS ALPHANUMERIC
         MVI   EPARAM,X'23'        SET UP AS EBCDIC NAME
DIAG4    BCTR  C2,0                DECREMENT FOR EXECUTE
         EX    C2,MVETEXT          MOVE WORD TO TEXT
         LA    C2,DX1(C2)          RESTORE SIZE
         STC   C2,EPARAM+DX1       STORE IN ETEXT
         LA    C2,DX2(C2)          ADJUST LENGTH FOR 'N' AND CODE
         STC   C2,EPARNN+DX1       STORE IN ETEXT
         B     DIAG0               WRITE MESSAGE AND PARAMETER TEXT
DIAG5    MVI   EPARAM,X'34'        ALPHANUMERIC CODE
         LA    C3,DX1(C3)          POINT PAST QUOTE IN WORD
         SH    C2,TWO              ADJUST SIZE W/O QUOTES
         B     DIAG4               PREPARE E-TEXT
         SPACE 1
MVETEXT  MVC   EPARAM+DX2(LX0),DX0(C3) MOVE WORD TO PARAMETER TEXT
         SPACE 1
*
MSG1010  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'00'               W-LEVEL, NO INSERTS
         DC    X'0A'               MESSAGE 1010
         BR    C2                  RETURN
*
MSG1017  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC FOR COPY WORD2
         DC    X'24'               E-LEVEL, 2 INSERTS
         DC    X'11'               MESSAGE 1017
         B     IGNORE1             ISSUE MSG 1062, TURN OFF COPY SW
*
MSG1078  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'00'               W-LEVEL, NO INSERTS
         DC    X'4E'               MESSAGE 1078
         BR    C2                  RETURN
         SPACE 1
MSG1077  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'4D'               MESSAGE 1077
         BR    C2                  RETURN, ASSUME OK
*
MSG1160  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'20'               E-LEVEL, NO INSERTS
         DC    X'A0'               MESSAGE 1160
         B     GW6                 RETURN - ASSUME B MARGIN
*
         EJECT
***********************************************************************
*                                                                     *
*                        GET WORD SUBROUTINE                          *
*                                                                     *
*              REGISTERS SAVED:  L1  -  LINK REGISTER                 *
*                                W2  -  STRING POINTER REG (USED BY   *
*                                       ALL STRING PROCESSING RTNS)   *
*              WORD BEING PROCESSED IS PLACED IN 'WORD'. IF WORD      *
*                   IS AN ALPHANUMERIC LITERAL, THE QUOTES ARE        *
*                   INCLUDED. THE WORD SIZE IS PLACED IN 'SIZE'.      *
*                                                                     *
***********************************************************************
GETWORD  ST    L1,GWSAVEL1         SAVE LINK REGISTER               DA1
         NI    MISCSW,FF-TSTMARGA-TSTMARGB TURN OFF  REQ MARG SWS
         TM    MISCSW,DUMMYGET     IS WORD ALREADY THERE
         BC    ALLON,GETWORDU      YES
         STM   W1,W3,SVW1W2W3      SAVE WORD2 REGS AND STRING PTR
GETWORDA NI     ASWITCH,FF-MARGA-RESWORD-TRUNCATE-NOSPACE-KEYWORD
         MVI   RESCODE,K0          INIT RESERVED WORD STATUS
         SR    W1,W1               CLEAR                            DA1
         STC   W1,SIZE             INITIALIZE WORD SIZE TO ZERO
         TM    ASWITCH,EOS         TEST FOR END OF STATEMENT
         BC    ALLON,GETWORDQ      END OF STMT IS THE CASE
         TM    MISCSW,RP           DID RIGHT PAREN END LAST WORD
         BC    ALLON,ENDWORD       YES, MUST NOW OUTPUT IT
GETNEXT  CLI   DX0(S1),BLANK       FIRST CHAR SHOULD BE BLANK
         BE    SCANAA              UNLESS PRECEDED BY LIT OR PAREN
         TM    MISCSW,RP+LP        RPAREN OR LPAREN RECEIVED
         BC    ALLOFF,GETWORDP     NO, MUST BE FORMER OR ERROR
         B     NONBLANK            START A NEW WORD
SCANAA   NI    MISCSW,FF-RP        TURN OFF RIGHT PAREN SWITCH
         TM    MISCSW,LP           WAS LAST GET A LEFT PAREN
         BC    ALLOFF,SCAN         NO, CONTINUE
         BAL   C2,MSG1010          YES, SHOULD NOT HAVE SPACE FOLLOWING
SCAN     LA    S1,1(S1)            UPDATE TO NEXT COLUMN            DA1
         CL    S1,COLUMN72         END OF CARD                      DA1
         BH    SCAN1               YES, GET NEXT CARD               DA1
         CLI   0(S1),BLANK         SCAN TO FIRST NON-BLANK          DA1
         BNE   NONBLANK            NON-BLANK FOUND                  DA1
         B     SCAN                CONTINUE SCAN                    DA1
         SPACE 1                                                    DA1
SCAN1    NI    MISCSW,FF-LP-RP     REINITIALIZE SWITCHES
         TM    MISCSW3,CDSURP      CARD SURPRESS ON (COPY...REP)
         BC    NZERO,GWEXIT1       RETURN WITHOUT GETTING CARD
         BAL   L1,GETCARD          GET A NEW CARD
         B     SCAN                RESUME SCAN                      DA1
         SPACE 1                                                    DA1
NONBLANK ST    S1,NBLKPTR          SAVE NONBLANK ADDR OF CARD
         SR    W1,W1               CLEAR REG
NONBLNK  CL    S1,MARGINB          SEE IF WORD IN B MARGIN
         BNL   MOVE                YES, IN MARGIN B                 DA1
         OI    ASWITCH,MARGA       NO, SET MARGIN A SW
         NI    MISCSW4,FF-PNOTESW  TERMINATE POSSIBLE NOTE PARAGRAPH
MOVE     LA    W2,WORD(W1)         POINT TO PLACE TO INSERT CHAR    DA1
         MVC   0(1,W2),0(S1)       INSERT CHAR                      DA1
         CLI   DX0(W2),RPAREN      FIRST CHARACTER A RIGHT PAREN
         BE    FOUNDRP             VALID IF MULTIPLE RP'S
         TM    MISCSW,RP           WAS LAST GET A RP
         BC    ALLOFF,MOVEA        NO, CONTINUE
         CLI   DX0(W2),PERIOD      IS IT EOS
         BE    GETWORDQ            YES, OK
         CLI   DX0(W2),COMMA       IS IT A COMMA
          B    ENDCLAS0            YES, OK                        51899
         CLI   DX0(W2),SEMICOL     IS IT A SEMICOLON
          B    ENDCLAS0            YES, OK                        51899
         OI    ASWITCH,NOSPACE     DIAGNOSE MISSING SPACE
MOVEA    CLI   DX0(W2),LPAREN      IS FIRST CHARACTER A LEFT PAREN
         BE    FOUNDLP             YES, RETURN
         NI    MISCSW,FF-LP        TURN OFF LEFT PAREN SWITCH
         CLC   DX0(LX1,W2),DECPNT  IS FIRST CHARACTER A DECIMAL
         BE    GETWORDB            YES, KEEP SCANNING
         CLI   DX0(W2),COMMA       FIRST CHARACTER A COMMA
         BE    NOMOVE              YES, SHOULD NOT BE PRECEDED BY SPACE
         CLI   DX0(W2),SEMICOL     FIRST CHARACTER A SEMICOLON
         BNE   GETWORDB            NO, CONTINUE
NOMOVE   LA    S1,DX1(S1)          INCREMENT TO NEXT COLUMN
         B     MSG1084             SPACE SHOULD NOT PRECEDE COMMA
GETWORDB LA    S1,1(S1)            INCREMENT TO NEXT COLUMN         DA1
         CH    W1,K120             IS WORD TOO LONG
         BH    TRUNCIT             WORD MUST BE TRUNCATED
GW1      CL    S1,COLUMN72         END OF CARD
         LA    W1,1(W1)            INCREMENT TO NEXT POS OF WORD    DA1
         LA    W2,WORD(W1)         POINT TO PLACE TO INSERT CHAR
         BH    CHKLIT              YES, CHECK WORD
         MVC   0(1,W2),0(S1)       INSERT CHAR                      DA1
         CLC   WORD(1),LITSIGN     ARE WE IN A LITERAL              DA1
         BNE   NONLIT              NO, PROCESS AS REGULAR WORD      DA1
         CLC   0(1,W2),LITSIGN     YES, BUT DOES THIS END IT        DA1
         BNE   GETWORDB            NO, CONTINUE SCAN                DA1
GW2      LA    W1,1(W1)            ADD 1 TO GET CORRECT SIZE
GETWORDC LA    S1,1(S1)            UPDATE COLUMN FOR NEXT TIME      DA1
GW3      STC   W1,SIZE             STORE SIZE OF WORD OBTAINED      DA1
         CLC   WORD(1),LITSIGN     WAS IT A LITERAL WE FOUND        DA1
         BE    LITFOUND            YES, SEE IF SIZE OK              DA1
         CLI   SIZE,K2             SEE IF RESERVE WORD TEST NEC     DA1
         BL    SIZEONE             NOT NECESSARY                    DA1
         CLI   SIZE,K15            MAY STILL NOT BE NECESSARY       DA1
         BH    GWEXIT              JUST EXIT                        DA1
         LA    C4,SIZE             PARAMETER OOR RESERVED WORD ROUT DA1
         BAL   L1,RESWDTST         DO THE TEST                      DA1
         BAL   L1,GETNOTE          CHECK FOR A NOTE STMT
GWEXIT   CLI   SIZE,K30            DOES WORD EXCEED 30 CHARACTERS
         BNH   GWEXIT2             NO, NORMAL EXIT
         TM    COPYSW,INCPYLIB     READING FROM COPY LIBRARY
         BC    ALLON,GWEXIT2       YES-DO NOT TAKE CORRECTIVE ACTION
         MVI   SIZE,K30            TRUNCATE TO 30
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'55'               MESSAGE NUMBER 1085
GWEXIT2  TM    ASWITCH,NOSPACE     MUST WE PUT OUT MESSAGE
         BC    ALLOFF,GWEXIT3      NO
         BAL   L1,DIAGNOSE         YES, ISSUE DIAGNOSTIC
         DC    X'01'               W-LEVEL, ONE INSERT
         DC    X'07'               MESSAGE NUMBER 1007
GWEXIT3  L     L1,GWSAVEL1         RESTORE RETURN REGISTERS
         LM    W1,W3,SVW1W2W3      RESTORE WORD2 REGS AND STRING PTR
         BR    L1                  RETURN
         SPACE 1                                                    DA1
GWEXIT1  STC   W1,SIZE             STORE NUMBER OF CHARACTERS RECEIVED
         NI    MISCSW3,FF-CDSURP   SET CARD SURPRESS INDICATOR OFF
         B     GWEXIT3             RETURN
*
TRUNCIT  CLC   WORD(LX1),LITSIGN   ARE WE IN A LITERAL
         BNE   BYPASS              NO,BYPASS MESSAGE
         TM    ASWITCH,TRUNCATE    IS WORD ALREADY BEING TRUNCATED
         BC    ALLON,BYPASS        YES,DONT PUT OUT MESSAGE AGAIN
         OI    ASWITCH,TRUNCATE    TURN ON TRUNCATE SW
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'4C'               MESSAGE NUMBER 1076
BYPASS   BCT   W1,GW1              GO BACK
SIZEONE  CLC   WORD(LX1),LEVEL1    IS WORD A LEVEL 1
         BNE   SIZEONEA            NO - BRANCH
         MVI   RESCODE,K85         INDICATE LEVEL 1 CODE
         OI    ASWITCH,RESWORD+KEYWORD INDICATE KEY RESERVED WORD
         B     GWEXIT3             EXIT
SIZEONEA CLI   WORD,PERIOD         IS IT A SINGLE PERIOD          51899
         BNE   GWEXIT              EXIT                             DA1
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC                 DA1
         DC    X'00'               W-LEVEL, NO INSERTS
         DC    X'50'               MESSAGE NUMBER 1080
         B     GETWORDQ            EXIT
MSG1084  BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'54'               MESSAGE 1084
ENDCLAS0 MVI   WORD,RPAREN         ENCODE ) PRECEDING , FOR COPY  51899
*                                    ....REPLACING                51899
ENDCLAUS NI    MISCSW,FF-LP-RP     REINITIALIZE SWITCHES
         B     GETWORDA
         SPACE 1                                                    DA1
LITFOUND CLI   SIZE,K2             LENGTH MUST BE GREATER THAN 2    DA1
         BH    GWEXIT2             IT IS
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'4F'               MESSAGE NUMBER 1079
         MVI   WORD+1,BLANK        MOVE BLANK TO WORD               DA1
         MVC   WORD+2(1),LITSIGN   MOVE LITERAL SIGN TO WORD        DA1
         MVI   SIZE,K3             SIZE OF 3                        DA1
         B     GWEXIT              EXIT                             DA1
         SPACE 1                                                    DA1
FOUNDLP  OI    MISCSW,LP           INDICATE LP FOUND
         B     GW2                 RETURN ( IN WORD AREA
FOUNDLP1 BCTR  W2,C0               GO BACK ONE CH ARACTER
         CLI   DX0(W2),CPLUS       UNARY PLUS PRECEDES IT
         BE    FOUNDLP2            YES, OK NO SPACE
         CLI   DX0(W2),CMINUS      UNARY MINUS PRECEDES IT
         BE    FOUNDLP2            YES, OK NO SPACE
         OI    ASWITCH,NOSPACE     NO, THEN SPACE MISSING
FOUNDLP2 OI    MISCSW2,LP          INDICATE LP FOUND
         B     GW3                 LEAVE S1 POINTING TO (
         SPACE 1
NONLIT   CLI   DX0(W2),A           IF A-Z OR 0-9
         BNL   GETWORDB            THEN CONTINUE
         CLI   DX0(W2),BLANK       IS WORD DELIMITED
         BE    NLITEND             YES, BY BLANK (SEE IF AFTER DEC) DA1
         CLI   0(W2),SEMICOL       OR IS IT SEMICOLON               DA1
         BE    GETWORDC            SAME AS IF COMMA                 DA1
         CLC   0(1,W2),LITSIGN     IS LITERAL SIGN NEXT
         BE    GW3                 NO SPACE BEFORE LITERAL
         CLC   SAVECLS(3),PIC      ARE WE PROCESSING PICTURE CLAUSE DA1
         BE    GETWORDB            ONLY BLANK OR ; VALID DELIMITER  DA1
         CLC   SAVECLS(5),VALUE    ARE WE PROCESSING VALUE CLAUSE
         BE    GETWORDB            YES, THEREFORE MAY NOT BE EOS
         CLI   DX0(W2),LPAREN      IS IT A LEFT PARENTHESIS
         BE    FOUNDLP1            SEE WHY NOT FIRST CHARACTER
         CLI   DX0(W2),RPAREN      IS IT RIGHT PARENTHESIS
         BE    ENDER1              YES, WRAP UP
         CLC   DX0(LX1,W2),DECPNT  CHARACTER FOR DECIMAL
         BE    DECLIT              YES, SEE IF IN MIDDLE OF LITERAL
         CLI   DX0(W2),COMMA       NOT A PICTURE, WAS IT A COMMA
         BE    GETWORDC            YES, WRAP UP                     DA1
         CLI   0(W2),PERIOD        WAS IT A PERIOD                  DA1
         BNE   GETWORDB            NO, CONTINUE                     DA1
         OI    ASWITCH,EOS         YES, INDICATE END OF SENTENCE
         B     GW3                 WRAP UP
             SPACE 1                                                DA1
DECLIT   CLI   WORD,EXTZERO        IS THE FIRST CHARACTER
         BC    LT,DECLIT1          A DIGIT
         CLI   WORD,EXTNINE        IF NOT, CHECK FOR + - OR .
         BC    GT,DECLIT1          IF YES, THEN ASSUME THIS IS A
         B     GETWORDB            NUMERIC LITERAL AND CONTINUE
DECLIT1  CLI   WORD,CPLUS          IS FIRST CHARACTER
         BE    GETWORDB            IS + SIGN
         CLI   WORD,MINUS          OR - SIGN
         BE    GETWORDB            OR A PERIOD
         CLI   WORD,PERIOD         THEN ASSUME NUMERIC LITERAL
         BE    GETWORDB            AND CONTINUE PROCESSING
         CLI   DX0(W2),PERIOD      IF PRESENT CHARACTER NOT A
         BNE   GETWORDC            PERIOD, TREAT AS COMMA
ENDER    OI    ASWITCH,EOS         SET END OF SENTENCE SWITCH
         B     GW3                 WRAP UP
ENDER1   OI    MISCSW,RP           INDICATE RP FOUND
         B     GW3                 WRAP UP
         SPACE 1
CHKLIT   CLC   WORD(1),LITSIGN     WERE WE PROCESSING LITERAL
         BE    GETWORDH            YES, CHECK NEXT CARD FOR CONTIN
NLITEND  LR    W2,S1               POINTER TO BLANK THAT DELIMITED
         BCTR  W2,0                GO BACK ONE CHARACTER
         CLI   0(W2),COMMA         WAS COMMA AT END OF WORD         DA1
         BE    NLITEND1            YES, SUBTRACT 1 FROM COUNT       DA1
         CLI   0(W2),PERIOD        WAS PERIOD AT END OF WORD
         BNE   GETWORDG            NO, NORMAL BLANK DELIMITER       DA1
         OI    ASWITCH,EOS         YES, ASSUME END OF SENTENCE
         BCTR  S1,C0               MOVE SCAN POINTER BACK TO PERIOD
NLITEND1 BCTR  W1,0                LENGTH - 1 FOR PUNCTUATION
         B     GW3
         SPACE 1                                                    DA1
GETWORDG CL    S1,COLUMN72         SCAN TO FIRST NON-BLANK OR END   DA1
         BH    GETWORDH            END - GET A NEW CARD
         CLI   DX0(S1),BLANK       IS IT BLANK
         BNE   GW4                 NON-BLANK, WRAP UP
         LA    S1,DX1(S1)          TRY NEXT COLUMN
         B     GETWORDG            CONTINUE SCAN
GW4      BCT   S1,GW3              DECR POINTER TO BLANK
GETWORDH TM    MISCSW3,CDSURP      CARD SURPRESS ON (COPY...REP)
         BC    NZERO,GWEXIT1       RETURN WITHOUT GETTING CARD
         BAL   L1,GETCARD          GET A NEW CARD
         CLI   0(S1),HYPHEN        IS IT A CONTINUATION
         BE    GETWORDL            YES, SEE IF OK
         CLC   WORD(1),LITSIGN     WERE WE PROCESSING A LITERAL     DA1
         BNE   GW3                 NO, DO NON-LITERAL ENDING        DA1
GETWORDI LA    S1,DX1(S1)          UPDATE TO COLUMN 8
         CL    S1,COLUMN72         FIND FIRST NON-BLANK
         BH    GETWORDH            THIS CARD MUST BE BLANK
         CLI   0(S1),BLANK         IS THIS COLUMN BLANK             DA1
         BNE   GETWORDJ            NO, DO NON LITERAL ENDING        DA1
         B     GETWORDI            TRY AGAIN                        DA1
         SPACE 1                                                    DA1
GETWORDJ CLC   0(1,S1),LITSIGN     IS IT A LITERAL SIGN             DA1
         BNE   GETWORDK            NO, DIAGNOSE
         BAL   C2,MSG1078          ISSUE DIAGNOSTIC
GETWRDJJ BCT   W1,GETWORDB         ASSUME PRESENT
GETWORDK SH    S1,TWO              SUBTRACT FOR NEXT GETWORD
         MVC   0(1,W2),LITSIGN     END LITERAL ON LAST CARD
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'10'               C-LEVEL, NO INSERTS
         DC    X'62'               MESSAGE 1098
         B     GW2                 GET CORRECT SIZE
         SPACE 1
GETWORDL CLC   WORD(1),LITSIGN     IS IT A CONTINUED LITERAL        DA1
         BE    GW5                 YES, SCAN TO FIRST NON-BLANK     DA1
         CLC   1(4,S1),BLANKS      NOT LITERAL, CHECK MARGIN A
         BNE   MSG1160             DIAGNOSE, BUT ASSUME B
GW6      LA    S1,DX1(S1)          INCREMENT COLUMN
         CL    S1,COLUMN72         END OF CARD
         BH    GETWORDH            GET ANOTHER CARD
         CLI   DX0(S1),BLANK       SCAN TO FIRST NON-BLANK
         BNE   NONBLNK             CONTINUE WORD SCAN
         B     GW6                 TRY AGAIN
         SPACE 1                                                    DA1
GETWORDM CL    S1,COLUMN72         SCAN FOR LITERAL SIGN            DA1
         BH    GETWORDH            THIS CARD MUST BE BLANK          DA1
         CLI   0(S1),BLANK         IS THIS COLUMN BLANK             DA1
         BNE   GETWORDN            NO, SEE IF LITSIGN               DA1
GW5      LA    S1,1(S1)            UPDATE TO NEXT COLUMN            DA1
         B     GETWORDM            REPEAT SCAN                      DA1
         SPACE 1                                                    DA1
GETWORDN EQU   *                                                    DA1
         BCTR  W1,0                DECR COUNT BY 1 FOR LITERAL      DA1
         CLC   0(1,S1),LITSIGN     DOES CONTINUED LIT HAVE LITSIGN  DA1
         BE    GETWORDO            YES, CHECK MARGIN
         BAL   C2,MSG1078          ISSUE DIAGNOSTIC
         CL    S1,MARGINB          SEE IF WORD IN MARGIN A OR B
         BNL   GW1                 CONTINUATION OK
         BAL   C2,MSG1077          ERROR, DIAGNOSE
         B     GW1                 ASSUME PRESENT
GETWORDO CL    S1,MARGINB          CONTINUATION OK, MOVE REST OF LIT
         BNL   GETWORDB            NOT IN MARGIN A
         BAL   C2,MSG1077          ERROR, DIAGNOSE
         B     GETWORDB            MOVE REST OF LIT
         SPACE 1
         SPACE 1                                                    DA1
GETWORDP CL    S1,COLUMN72         ARE WE AT END OF CARD
         BH    SCAN1               YES, GET NEW CARD
         CL    S1,COLUMN7          IS IT COLUMN 7
         BE    SCAN                YES, IGNORE
         CLI   0(S1),PERIOD        IS NONBLANK CHAR A PERIOD
         BE    GETWORDQ             YES, THEN IT IS OK, PROCESS     DA1
         CLI   0(S1),COMMA         IS IT A COMMA                    DA1
         BE    SCAN                YES, IGNORE IT                   DA1
         CLI   0(S1),SEMICOL       SAME FOR SEMICOLON               DA1
         BE    SCAN                PROCESS NEX COLUMN               DA1
         CLI   DX0(S1),RPAREN      IS IT A RIGHT PAREN
         BE    FOUNDRP1            YES
         OI    ASWITCH,NOSPACE     INDICATE MSG1007 TO BE PUT OUT
         B     NONBLANK            PROCESS
FOUNDRP  TM    MISCSW,RP           IN A SERIES OF PARENS
         BC    ALLON,FOUNDRP2      YES - OK
         BAL   L1,DIAGNOSE         RIGHT PAREN PRECEDED BY SPACE
         DC    X'00'               W-LEVEL, NO INSERTS
         DC    X'08'               MESSAGE 1008
FOUNDRP1 OI    MISCSW,RP           INDICATE RP FOUND
FOUNDRP2 ST    S1,NBLKPTR          SAVE ) ADDR FOR COPY...REP
         LA    S1,DX1(S1)          INCREMENT WORD POINTER
         B     ENDWORD1            MOVE PAREN TO WORD
*
ENDWORD  TM    MISCSW3,RPOUT       WAS RIGHT PAREN PUT OUT
         BC    ALLON,ENDWORD2      YES - CONTINUE SCAN
         B     FOUNDRP2            SAVE ) ADDR FOR COPY...REP
ENDWORD1 MVI   WORD,RPAREN         MOVE RPAREN TO WORD
         MVI   SIZE,K1             INDICATE SIZE OF WORD
         OI    MISCSW3,RPOUT       INDICATOR FOR RIGHT PAREN IN WORD
         B     GWEXIT2             WRAP UP
ENDWORD2 NI    MISCSW3,FF-RPOUT    INITIALIZE RP INDICATOR
         B     GETNEXT             SCAN NEXT WORD
         SPACE 1                                                    DA1
GETWORDQ ST    S1,NBLKPTR          SAVE ADDR OF PERIOD FOR COPY
         LA    S1,DX1(S1)          UPDATE TO NEXT COLUMN
         NI    ASWITCH,FF-EOS      TURN OFF END OF STMT SW
         NI    MISCSW,FF-LP-RP     INITIALIZE PAREN SWITCHES
         NI    MISCSW3,FF-COBCLAUS INITIALIZE CLAUSE SWITCH
         NI    MISCSW4,FF-SNOTESW  TERMINATE POSSIBLE NOTE SENTENCE
         MVI   SIZE,K1             MOVE SIZE OF 1 TO WORD           DA1
         MVI   WORD,PERIOD         MOVE PERIOD TO WORD              DA1
         B     GWEXIT              EXIT
         SPACE 1
GETWORDU NI    MISCSW,FF-DUMMYGET  TURN OFF DUMMYGET SW
         BR    L1                  RETURN
*
GETNOTE  TM    MISCSW2,PROCSW      IN PROCEDURE DIVISION
         BC    ALLOFF,DX0(L1)      NO - CANNOT BE NOTE
         CLC   SAVECLS(L'NOTE),NOTE IS WORD 'NOTE'
         BNE   DX0(L1)             NO - RETURN
         MVI   SAVECLS,BLANK       INIT SAVECLS
         TM    MISCSW4,MAYBNOTE    NOTE PARAGRAPH
         BC    ALLOFF,GETNOTE1     NO - NOTE SENTENCE
         XI    MISCSW4,MAYBNOTE+PNOTESW OFF MRGA SW , ON PARA NOTE
         BR    L1                  RETURN
GETNOTE1 OI    MISCSW4,SNOTESW     INDICATE NOTE SENTENCE
         BR    L1                  RETURN
         EJECT
***********************************************************************
*                                                                   DA1
*                        GET CARD SUBROUTINE                        DA1
*                                                                   DA1
***********************************************************************
GETCARD  EQU   *                   ENTRY POINT                      DA1
         STM   W1,W3,CDW1W2W3      SAVE WORK REGS
         ST    L1,GCSAVEL1         SAVE LINK REGISTER               DA1
         TM    ASWITCH,NOTFIRST    IS THIS THE FIRST GET
         BC    ALLON,GETCARD4      NO, PROCEED WITH GETCARD         DA1
         OI    ASWITCH,NOTFIRST    TURN ON NOT FIRST TIME SW
         TM    PHZSW1,APOST        TEST FOR A SINGLE QUOTE
         BC    ALLON,GETCARD1      APOSTROPHE ALREADY ASSUMED       DA1
         MVI   LITSIGN,QUOTE       REPLACE WITH X'7F' FOR QUOTE     DA1
GETCARD1 BAL   L1,GETIPT           GET A CARD - RETURN REG3=A(INPUT)
GC       BAL   L1,SKPEJECT         CHECK FOR SKIP OR EJECT
         B     GETCARD1                 GET ANOTHER CARD
GC4      BAL   L1,GETGCN           GET GCN AND CHECK NUM OPTION
         TM    COPYSW,INCPYLIB     ARE WE IN COPY LIBRARY
         BC    ALLON,GC2           YES - BYPASS SEQ CHECK
         MVC   SEQIND,BLANKS       INIT SEQUENCE INDICATOR
         TM    PHZSW,SEQ           MUST WE CHECK SEQUENCE
         BC    ALLOFF,GC1          NO, RETURN
         CLC   0(6,S1),BLANKS      IS  SEQUENCE BLANK               DA1
         BE    GC1                 YES, DONT BOTHER CHECKING
         CLC   0(6,S1),SEQSAVE     IS IT HIGHER THAN PREVIOUS       DA1
         BH    GETCARD2            YES, SAVE NEW SEQ NO             DA1
         MVC   SEQIND,STARS        INDICATOR TO SHOW OUT OF SEQ     DA1
         LH    W3,SEQERR           UPDATE NUMBER OF
         LA    W3,DX1(W3)          ERRORS ENCOUNTERED
         STH   W3,SEQERR           IN SEQUENCE
GETCARD2 MVC   SEQSAVE,0(S1)       SAVE NEW SEQUENCE                DA1
GC1      TM    ABASISW,ININSERT    IS IT BASIS-INSERT MODE
         BC    ALLOFF,GC2          NO
         MVI   SEQIND,C'I'         MOVE I FOR LISTING
GC2      TM    MISCSW2,DBUGSW      IS THIS DEBUG CARD
         BC    ALLOFF,GC21         NO
         L     S1,DBUGPTR          YES - RESTORE ADDR OF DEBUG LOC
         B     GC22                RETURN
GC21     CLI   DX6(S1),ASTERISK    IS IT A COMMENT
         BE    GETCARD3            YES - GET ANOTHER CARD
         LA    S1,DX6(S1)          UPDATE TO COLUMN 7 OF CARD
GC22     LM    W1,W3,CDW1W2W3      RESTORE WORK REGS
         L     L1,GCSAVEL1         RESTORE REGISTER                 DA1
         BR    L1                  EXIT                             DA1
         SPACE 1                                                    DA1
GETCARD3 OI    ASWITCH,WRITESUP    SUPPRESS WRITE TO PHASE 1
GETCARD4 BAL   L1,WRITE            PRINT PREVIOUS CARD
GC3      BAL   L1,GETIPT           GET A CARD - RETURN OF INPUT
         B     GC                  BUFFER IN REG 3
         SPACE 1
***                                                                 ***
*   THE FOLLOWING ROUTINE UPDATES THE INTERNAL GENERATED SEQUENCE     *
*        NUMBER AND CHECKS THE NUM OPTION                             *
**                                                                  ***
GETGCN   LH    W3,CURGCN           CURRENT SEQ NO (INTERNAL)
         LA    W3,DX1(W3)          INCREMENT BY ONE AND
         STH   W3,CURGCN           STORE NEW INTERNAL CARD NO.
         BR    L1                  RETURN
*****************************************************************
*        THE FOLLOWING ROUTINE CHECKS FOR COMMENTS(* IN COL 7), *
*              SKIP1, SKIP2, SKIP3, OR EJECT. THESE STATEMENTS  *
*              MAY APPEAR ANYWHERE IN A SOURCE PROGRAM, EVEN    *
*              BEFORE THE IDENTIFICATION DIVISION CARD. IF THE   *
*              STATEMENT IS A COMMENT, WE RETURN TO INCREMENT   *
*              THE INTERNAL SEQUENCE NUMBER AND GET A CARD. IF  *
*              IT IS A SKIP OR EJECT, WE GET A CARD.            *
*****************************************************************
SKPEJECT CLI   DX6(S1),ASTERISK    IS IT A COMMENT
         BE    DX4(L1)                  YES-RETURN VIA REG8
         LA    W3,DX72(S1)         SET COL 73 AS SCAN LIMIT
         TRT   DX7(LX80,S1),TRTTAB SCAN TO NON BLANK
         BC    ALLOFF,DX4(L1)      BLANK CARD
         CR    C1,W3               PAST COL 73
         BNL   DX4(L1)                    A BLANK CARD
         LR    W2,C1               SAVE BEGINNING ADDRESS OF NON BLANK
         LA    C1,DX5(C1)          SKIPN OR EJECT LENGTH
         TRT   DX0(LX80,C1),TRTTAB SCAN TO NON BLANK
         BC    ALLOFF,SKPEJT2      CARD BLANK
         CR    C1,W3               IS CARD BLANK
         BL    DX4(L1)                      NO, RETURN
SKPEJT2  SR    W3,W3               CLEAR
          CLC   DX0(LX5,W2),EJECT   IS WORD EJECT
         BE    SKPEJT1             IT IS EJECT
         LA    W3,DX1(W3)          UPDATE FOR COMPILER DIRECTING CODE
         CLC   DX0(LX5,W2),SKIP1   IS WORD SKIP1
         BE    SKPEJT1             YES CALL TO SKIP 1 LINE
         LA    W3,DX1(W3)          UPDATE FOR COMPILER DIRECTING CODE
         CLC   DX0(LX5,W2),SKIP2   IS WORD SKIP2
         BE    SKPEJT1             YES CALL TO SKIP 2 LINES
         LA    W3,DX1(W3)          UPDATE FOR COMPILER DIRECTING CODE
         CLC   DX0(LX5,W2),SKIP3   IS WORD SKIP3
         BNE   DX4(L1)                  NO-RET YES-CALL TO SKP 3 LINES
SKPEJT1  TM    COPYSW,CPYSURP      COPY SUPPRESS IN EFFECT
         BC    ALLON,DX0(L1)            RETURN TO GET A CARD
         TM    PHZSW,LIST          SOURCE REQUESTED
         BC    ALLOFF,DX0(L1)           NO, GET A CARD
*DEL
*DEL
         STC   W3,SKIP+DX3         INSERT CODE FOR SKIP
SKIP     BALR  C0,C5               REQUEST SKIP-CALL PH0
         DC    X'D600'                  2ND BYTE IS NO. OF LINES
         BR    L1                       RETURN TO GET A CARD
*DEL
*DEL
*DEL
         SPACE 3
***********************************************************************
*              DEBUG SCAN                                             *
*                   THE FOLLOWING ROUTINE CHECKS TO SEE IF A DEBUG    *
*                   CARD WAS READ. IF IT IS A DEBUG CARD, A CHECK     *
*                   IS MADE TO SEE IF IT IS WITHIN COL 6 IN WHICH     *
*                   CASE DBUGC6 IS SET FOR THE GETCARD SEQUENCE       *
*                   CHECKING ROUTINE                                  *
***********************************************************************
DEBUGSCN EQU   *                   CHECK FOR DEBUG STATEMENT
         TM    MISCSW2,PROCSW      ARE WE IN PROCEDURE DIVISION
         BC    ALLOFF,DX0(L1)      NO - THEN DONT CHECK FOR DEBUG
         LA    W1,DX5(S1)          COL 6 ADDR FOR DEBUG IN SEQ FIELD
         LA    W3,DX71(S1)         SET COL 73 AS A SCAN LIMIT
         TRT   DX0(LX80,S1),TRTTAB SCAN TO NON BLANK
         BC    ALLOFF,DX0(L1)      BLANK CARD RETURN
         CR    C1,W3               PAST COL 73
         BNL   DX0(L1)             BLANK CARD - RETURN
         CR    W1,C1               HIT ADDRESS IS PAST COL 6
         BC    LT,DEBUGSN1         YES - SEE IF IT IS DEBUG
         CLC   DX0(LX6,C1),DEBUG   SEE IF DEBUG IS WITHIN COL 6
         BE    DEBUGSN2            YES - SET DEBUG-WITHIN-COL6 SW
         B     DX0(L1)             RETURN
DEBUGSN1 CLC   DX0(LX6,C1),DEBUG   SEE IF DEBUG
         BNE   DX0(L1)             NO - RETURN
         B     DEBUGSN3            SET SWITCHES
DEBUGSN2 OI    MISCSW2,DBUGC6      INDICATE DEBUG WITHIN COL 6
DEBUGSN3 OI    MISCSW2,DBUGSW      SET DEBUG SWITCH
         LA    C1,DX5(C1)          POINT BEYOND SWITCH
         ST    C1,DBUGPTR          SAVE THIS AS GETWORD PTR
         B     DX0(L1)             RETURN FOR DEBUG WITHIN COL 6
         EJECT
*****************************************************************
*        CALL TO PHASE 0 TO GET A CARD FROM SYSIN
*              C0 POINTS TO CALLING PARAMETER VIA BALR INST
*              C5 HAS THE ADDRESS OF PHASE 0
*        RETURNS
*              C0+2      LAST CARD NOT READ  C0 =ADDR OF INPUT
*              C0+6      LAST CARD READ
*****************************************************************
GETIPT   ST    L1,RDSAVEL1         SAVE LINK REGISTER
         NI    MISCSW2,FF-DBUGC6-DBUGSW TURN OFF DEBUG INDICATORS
         TM    COPYSW,INCPYLIB     ARE WE IN COPY LIBRARY
         BC    ALLON,GETCOPY       READ COPY MEMBER
         NI    COPYSW,FF-CPYSURP   OFF COPY SUPPRESS (SET IN CPYEND)
         TM    ABASISW,INBASIS     ARE WE IN BASIS LIBRARY
         BC    ALLON,GETBASIS      READ FROM LIBRARY
         BALR  C0,C5               READ CARD FROM SYSIN
         DC    X'75'                   FROM SYSIN
         BC    NZERO,GETIPT2       NOT LAST CARD - BRANCH
         B     LASTCARD            READ LAST CARD ALREADY
*
*        THE FOLLOWING ROUTINE SAVES THE ADDRESS OF THE
*              INPUT BUFFER, MARGIN B, AND COLUMN 72
*
GETIPT2  EQU   *
         LR    S1,C0               ADDRESS OF INPUT BUFFER
GETIPT21 BAL   L1,DEBUGSCN         CHECK FOR DEBUG
GETIPT3  ST    S1,AIOA1I           SAVE INPUT BUFFER ADDRESS
         LA    W3,DX6(S1)          UPDATE TO COLUMN7
         ST    W3,COLUMN7          SAVE IT
         LA    W3,DX1(W3)          UPDATE TO COLUMN 8
         ST    W3,COLUMN8          SAVE IT
         LA    W3,DX4(W3)          UPDATE TO COLUMN 12
         ST    W3,MARGINB          SAVE FOR MARGINB COMPARE
         LA    W3,DX60(W3)         UPDATE TO COLUMN 72
         ST    W3,COLUMN72         SAVE FOR END OF CARD COMPARE
         TM    MISCSW2,DBUGC6      IS THIS DEBUG WITHIN COL 6
         BC    ALLOFF,GETIPT4      NO
         LA    S1,BLANKS           YES- POINT TO BLANKS FOR
         B     GC4                 SEQUENCE CHECK IN GETCARD RTN
GETIPT4  L     L1,RDSAVEL1         RESTORE LINK REGISTER
         BR    L1                  RETURN TO CALLING RTN
*        RETURN TO CALLING ROUTINE VIA L1 (REG8)
*
         EJECT
***********************************************************************
*              LASTCARD ROUTINE                                       *
*                1  LASTCARD GETS CONTROL WHEN THE LAST RECORD FROM   *
*                   SYSIN OR SYSLIB(BASIS) HAS BEEN READ.             *
*                2  IF WE ARE PROCESSING FROM BASIS, A CHECK IS MADE  *
*                   FOR ANY PENDING INSERT OR DELETE. IF AN INSERT    *
*                   OR DELETE IS PENDING, IT IS IN ERROR.             *
*                3  THE REPLACING TABLE IS RELEASED AND A
*                   RETURN TO PHASE 0 IS MADE
***********************************************************************
LASTCARD OI    MISCSW5,LSTBASIS    INDICATE LAST BASIS READ
         TM    ABASISW,IDELCARD    INSERT OR DELETE IN EFFECT
         BC    ALLOFF,LSTCARD2     NO - WRITE LAST RECORD
         MVC   SEQSAVE(LX6),BASWORK GET LAST BASIS READ SEQ NUM
         TM    ABASISW,INDELETE    IS DELETE IN EFFECT
         BC    ALLOFF,LSTCARD1     NO-CHECK INSERT
         BAL   L1,DIAGNOSE         DELETE NUMBER GREATER THAN LAST
         DC    X'22'               SEVERITY E
         DC    X'75'               MESSAGE 117
         B     LSTCARD2            WRITE LAST RECORD
LSTCARD1 CLC   SEQSAVE(LX6),INSNUM INSERT AFTER LAST CARD
         BC    GE,GETBAS9          YES - DO INSERT
         BAL   L1,DIAGNOSE         INSERT NUMBER GREATER THAN LAST
         DC    X'22'               SEVERITY E
         DC    X'76'               MESSAGE 118
*
LSTCARD2 EQU   *                   PREPARE FOR RETURN TO PHASE 0
         L     C5,ADTREL           ADDR OF RELEASE (TAMER)
         L     C1,CRPCON           ADDR OF REPLACING TABLE
         BALR  C4,C5               RELEASE TABLE
         L     C5,COSADDR          GET ADDR OF COS
         BALR  C0,C5               PURGE
         DC    X'F4'               FILE 4
         DC    X'CC'               *
         BALR  C0,C5               TCLOSE FILE FOUR
         DC    X'64'               FOR PHASE1 READS
         BALR  C0,C5               END OF PREPROCESSOR
         DC    X'A0'               RETURN TO PHASE 0
         EJECT
***********************************************************************
*        CALL TO PHASE 0 TO GET A CARD FROM THE COPY LIBRARY          *
*              C0 POINTS TO CALLING PARAMETER VIA BALR INST           *
*              C5 HAS THE ADDRESS OF PHASE 0                          *
*        RETURNS                                                      *
*              C0+10      GOOD READ                                   *
*                         IF CONDITION CODE = 0,LAST CARD             *
*                         WAS READ                                    *
*            C0+14        NO LIBRARY
*            C0+18        BAD TRACK
*            C0+22        NO MEMBER
*        TWO BUFFERS ARE MAINTAINED BECAUSE OF THE REPLACING          *
*              OPTION AND THE REPLACING OF 01 AND 77 LEVEL DATA       *
*              ITEMS.                                                 *
***********************************************************************
GETCOPY  TM    MISCSW3,REPBUF2     2 BUFFERS USED BY COPY REP
         BC    ALLOFF,GETCPY3      NO - CHECK IF 4 WORKAREAS USED
         NI    MISCSW3,FF-REPQUOT  INIT CONTINUATION QUOTE SWITCH
         XC    REPINDX(LX1),REPINDX INIT TABLE INDEX
         MVC   CPYWRK1+6(LX66),CPYHYP WORKAREA TO GETCARD BUFFER
         TM    MISCSW3,REPBUF3     3 BUFFERS USED BY COPY REP
         BC    ALLON,GETCPY1       YES - MOVE BUFFERS
         NI    MISCSW3,FF-REPBUF2  SET OFF BUFFER 2 SW
GETCPY1  MVC   CPYHYP(LX132),CPYHYP2 SHIFT WORKAREAS
         TM    MISCSW3,REPBUF4     4 BUFFERS USED BY COPY REP
         BC    ALLON,GETCPY2       YES
         NI    MISCSW3,FF-REPBUF3  SET OFF BUFFER 3 SW
GETCPY2  NI    MISCSW3,FF-REPBUF4  SET OFF BUFFER 4 SW
         BAL   L1,GETGCN           SET GENERATED SEQUENCE NUM
         B     GETCARD4            WRITE AND GET ANOTHER RECORD
GETCPY3  TM    MISCSW3,FULLBUFS    ALL WORKAREAS USED
         BC    ALLOFF,GETCPY4      NO - SCAN A NEW CARD
         MVC   CPYWRK1(LX80),LIBWORK RESTORE ORIGINAL CARD
         BAL   L1,GETGCN           GET GENERATED SEQ NUM
         LM    C1,C2,C1C2SAVE      RESTORE POINTER REGS FOR WORD
         B     ASETCPY3            CONTINUE PROCESSING CARD
GETCPY4  TM    COPYSW,LASTCPY      WAS LAST COPY READ
         BC    NZERO,CPYEND        YES - END COPY PROCESSING
         TM    COPYSW,DBLCPY       2 BUFFERS PRESENTLY USED
         BC    TZERO,CPYRD1        NO - READ 1ST COPY MEMBER
         LA    C4,CPYWRK2          ADDR OF 2ND BUFFER
         B     CPYRD2              MOVE CARD IMAGE TO 1ST COPY AREA
*
CPYRD1   BALR  C0,C5               READ CARD
         DC    X'09'               FROM COPY
CPYLNAM  DC    CL8'0'              LIBRARY-NAME
         B     CPYLST              GOOD READ
         B     CPYNOLIB            NO LIBRARY
         B     CPYBADTK            BAD TRACK
         BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'20'               E-LEVEL, NO INSERTS
         DC    X'2E'               MESSAGE 1046
         B     CPYEND1             TERMINATE COPY PROCESSING
CPYNOLIB BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'20'               E-LEVEL, NO INSERTS
         DC    X'2F'               MESSAGE 1047
         B     CPYEND1             TERMINATE COPY PROCESSING
CPYBADTK BAL   L1,DIAGNOSE         ISSUE DIAGNOSTIC
         DC    X'20'               E-LEVEL, NO INSERTS
         DC    X'30'               MESSAGE 1048
CPYEND1  OI    MISCSW5,NOCPYMEM    INDICATE NO MEMBER ON 1ST STMT
*                                  AFTER COPY STMT
         B     CPYEND              TERMINATE COPY PROCESSING
*
CPYLST   BC    NZERO,CPYRDSUP      NOT LAST CARD - CONTINUE COPY
CPYEND   NI    COPYSW,K0           RESET COPY SWITCHES
         NI    MISCSW3,FF-CDSURP   RESET COPY SWITCHES
         OI    COPYSW,CPYSURP      SUPPRESS PRINTING AND WRITING
         OI    ASWITCH,WRITESUP    TO AVOID LAST COPY REC TWICE
         BAL   L1,GETCARD          GET A CARD (SYSIN OR BASIS)
         NI    COPYSW,FF-CPYSURP   RESET COPY SWITCH
         BAL   L1,GETWORD          GET A WORD
         B     CHGPTR2             RETURN TO STRING PROCESSING
*
CPYRDSUP NI    COPYSW,FF-CPYSTMT   SUPPRESS 'CO' INDICATOR IN PRINT
         OI    COPYSW,DBLCPY       INDICATE DOUBLE COPY READ
         TM    COPYSW,CPYSUPP      IF THE SUPPRESS OPTION
         BC    ALLOFF,CPYRDSP1     WAS SPECIFIED INDICATE TO
         OI    COPYSW,CPYSURP      WRITE ROUTINE TO SUPPRESS PRINT
CPYRDSP1 LR    C4,C0               ADDR OF CARD IN BUFFER
CPYRD2   MVC   CPYWRK1(LX80),DX0(C4) MOVE CARD IMAGE 1ST COPY AREA
         MVC   SEQIND(LX2),CBLANK  SAVE LISTING INDICATOR FOR PRINT
         LA    S1,CPYWRK1          ADDR OF COPY RECORD WORK AREA
*
         BALR  C0,C5               SECOND READ
         DC    X'09'               FOR COPY
CPYLNAM2 DC    CL8'0'              LIBRARY NAME
         BC    NZERO,CPYRD2MV      NOT LAST CARD
         OI    COPYSW,LASTCPY      LAST COPY RECORD READ
         MVI   CPYWRK2+DX6,BLANK   BLANK OUT COL 7 IN DBL BUFFER
         B     GETIPT21            SAVE INPUT BUFFER ADDRESS
CPYRD2MV LR    C4,C0               ADDR OF BUFFER
         MVC   CPYWRK2(LX80),DX0(C4) MOVE CARD IMAGE TO 2ND COPY AREA
         B     GETIPT21            SAVE INPUT BUFFER ADDRESS
         EJECT
***********************************************************************
*              CALL TO PHASE 0 TO GET A RECORD FROM THE BASIS LIBRARY *
*                   C0 POINTS TO CALLING PARAMETER VIA BALR INST      *
*                   C5 HAS THE ADDRESS OF PHASE 0                     *
*              RETURNS                                                *
*                   C0+10      GOOD READ                              *
*                              IF CONDITION CODE = 0,LAST CARD        *
*                              WAS READ                               *
*              LINK REGISTER IS SAVED SINCE IT IS USED IN ROUTINE     *
***********************************************************************
GETBASIS DS    0H
         TM    ABASISW,ININSERT    ARE WE INSERTING NOW
         BC    ALLOFF,GETBAS1      NO-READ FROM BASIS
         NI    ABASISW,FF-ININSERT YES-TURN OFF INSERT NOW SWITCH
         B     GETBAS3             CHECK IF INSERT/DELETE NOW
*
GETBAS1  BALR  C0,C5               READ CARD
         DC    X'09'               FROM BASIS
BASNAM   DC    CL8'0'              LIBRARY MEMBER NAME
         DC    C'B'                TELLS PHASE 0 IT IS BASIS READ
         BC    NZERO,GETBAS2       NOT LAST CARD - GOOD READ
*        B     *                   (NO LIBRARY)
*        B     *                   (BAD TRACK)
*        B     *                   (NO MEMBER)
         B     LASTCARD            LAST CARD READ
*
*
*   THIS CARD IS SAVED SO THAT IT CAN BE PROCESSED AFTER ANY
*   INSERT OR DELETE THAT MAY BE IN EFFECT.
*
GETBAS2  LR    S1,C0               ADDR OF CARD
         MVC   BASWORK(LX80),DX0(S1) SAVE CARD READ FROM LIBRARY
*
*   CHECK IF ANY INSERTS OR DELETES ARE IN EFFECT
*
GETBAS3  TM    ABASISW,IDELCARD    INSERT/DELETE CARDS IN SYSIN
         BC    ALLOFF,GETBAS10     NO- PROCESS CARD READ FROM BASIS
         TM    ABASISW,DELNOW      DELETE THRU IN PROGRESS
         BC    ALLON,GETBAS6       YES-SEE IF REACHED LAST CARD
         TM    ABASISW,INDELETE    IS DELETE CARD IN EFFECT
         BC    ALLOFF,GETBAS8      NO-THEN ARE WE INSERTING
         TM    ABASISW,DELTHRU     IS DELETE THRU CARD IN EFFECT
         BC    ALLON,GETBAS5       YES-CHECK IF FIRST CARD REACHED
*
         CLC   BASWORK(LX6),DEL1NUM IS THIS THE CARD TO BE DELETED
         BC    LT,GETBAS10         NOT YET REACHED
         BC    GT,GETBAS7          NOT FOUND
GETBAS4  NI    ABASISW,FF-INDELETE-DELTHRU-DELNOW FOUND - DELETE NO
*                                                 LONGER IN EFFECT
         BAL   L1,IDREADX          CHECK FOR DELETE
         B     GETBASIS            READ FROM BASIS
GETBAS5  CLC   BASWORK(LX6),DEL1NUM IS THIS THE FIRST CARD TO DELETE
         BC    LT,GETBAS10         NOT YET REACHED
         OI    ABASISW,DELNOW      INDICATE DELETE THRU IN PROGRESS
GETBAS6  CLC   BASWORK(LX6),DEL2NUM IS THIS THE LAST CARD TO DELETE
         BC    LT,GETBASIS         NOT YET REACHED
         BC    EQ,GETBAS4          REACHED-CHECK FOR MORE DELETES
GETBAS7  NI    ABASISW,FF-INDELETE-DELTHRU-DELNOW DELETE NO LONGER
         BAL   L1,IDREADX          CHECK FOR DELETE
         B     GETBAS3             CHECK IF TIME TO INSERT/DELETE
GETBAS8  CLC   SEQSAVE(LX6),INSNUM INSERT AFTER LAST CARD
         BC    EQ,GETBAS9          YES-INSERT CARD INLINE
         CLC   BASWORK(LX6),INSNUM INSERT BEFORE CURRENT CARD
         BC    LE,GETBAS10         NO- CARD FROM BASIS INLINE
GETBAS9  MVC   LIBWORK(LX80),IDELWORK MOVE INSERTING CARD INLINE
         OI    ABASISW,ININSERT    INDICATE INSERTING THIS CARD
         BAL   L1,IDREAD           READ INSERT/DELETE CARD
         LA    S1,LIBWORK          INPUT BUFFER ADDRESS
         B     GETIPT21            CHECK FOR DEBUG
GETBAS10 LA    S1,BASWORK          INPUT BUFFER ADDRESS
         TM    MISCSW5,LSTBASIS    LAST BASIS READ
         BC    ALLOFF,GETIPT21     NO - RETURN
         B     LASTCARD            YES - MUST BE AT EOP
*
         SPACE 3
***********************************************************************
*              INSERT/DELETE READ AND SCAN SUBROUTINE                 *
*                                                                     *
*        CALL TO PHASE 0 TO GET A CARD FROM SYSIN                     *
*              C0 POINTS TO CALLING PARAMETER VIA BALR INST           *
*              C5 HAS THE ADDRESS OF PHASE 0                          *
*        RETURNS FROM PHASE 0                                         *
*              C0+2      LAST CARD NOT READ - SCAN FOR INSERT/DELETE  *
*                        C0 = ADDR OF INPUT                           *
*              C0+6      LAST CARD READ                               *
*        THE LINK REGISTER IS SAVED SINCE IT IS USED EXTENSIVELY
*              THROUGHOUT THE INSERT/DELETE SCAN
***********************************************************************
IDREAD   ST    L1,IDSAVEL1         SAVE LINK REG
IDREAD1  BALR  C0,C5               CALL PHASE 0 TO
         DC    X'75'               READ SYSIN FILE
         BC    NZERO,IDREAD2       NOT LAST CARD-SCAN
IDREADL  NI    ABASISW,FF-IDELCARD INDICATE NO MORE CARDS FROM SYSIN
         L     L1,IDSAVEL1         RESTORE LINK REG
         BR    L1                  RETURN
IDREAD2  EQU   *
         LR    C4,C0               ADDR OF BUFFER
         MVC   IDELWORK(LX80),DX0(C4) SAVE BUFFER ADDRESS
         TRT   IDELWORK(LX80),TRTTAB SCAN TO NONBLANK
         BC    ALLOFF,IDREAD1      BLANK CARD - READ ANOTHER CARD
IDREADA  LR    C4,C1               HIT ADDRESS INTO C4
         CLC   DX0(LX7,C4),INSERT  IS IT INSERT
         BE    IDREAD3             YES-SCAN INSERT CARD
         CLC   DX0(LX7,C4),DELETE  IS IT DELETE
         BE    IDREAD7             YES-SCAN DELETE CARD
         B     IDREAD23            SEE IF WITHIN INSERT/DELETE
*
*              INSERT CARD SCAN
*
IDREAD3  TRT   DX7(LX65,C4),TRTTAB SCAN TO NON-BLANK
         BC    ALLOFF,IDREAD1      EMPTY CARD - READ ANOTHER CARD
         LR    C4,C1               SAVE START ADDR OF SCAN
         LA    W3,DX6(C1)          ADDR WHERE NUMBER SHOULD END
         BAL   L1,NUMSCAN          CHANGE TRTTAB FOR DIGIT SCAN
         TRT   DX0(LX65,C1),TRTTAB SCAN NUMBER FIELD
         BAL   L1,NBLKSCN          CHANGE TRTTAB FOR NONBLK SCAN
         CLR   W3,C1               IS SIZE SIX
         BC    EQ,IDREAD4          SIZE IF OK
         BAL   L1,DIAGNOSE         INCORRECT SIZE
         DC    X'22'               SEVERITY E
         DC    X'71'               MESSAGE 113
         B     IDREAD6             GO INDICATE ERROR,READ AGAIN
IDREAD4  CLC   DX0(LX6,C4),INSNUM  IS INSERT IN SEQUENCE
         BC    LT,IDREAD5          NO OUT OF SEQUENCE
         MVC   INSNUM(LX6),DX0(C4) HOLD INSERT SEQUENCE NUMBER
         OI    ABASISW,IDELSRC     INDICATE SOURCE CARDS MAY FOLLOW
         NI    ABASISW,FF-IDELERR  TURN OFF ERROR INDICATOR
         B     IDREAD1             READ ANOTHER CARD
IDREAD5  BAL   L1,DIAGNOSE         OUT OF SEQUENCE
         DC    X'22'               SEVERITY E
         DC    X'59'               MESSAGE 89
IDREAD6  OI    ABASISW,IDELERR     SET ERROR INDICATOR
         NI    ABASISW,FF-INDELETE-IDELSRC OFF DELETE AND BYPASS SOURCE
         B     IDREAD1             READ ANOTHER CARD
*
*              DELETE CARD SCAN
*
IDREAD7  LA    C1,DX6(C4)          POINT WORD DELETE
         MVI   IDELWORK+DX72,QUOTE      STOPPER FOR TRT INST.
         B     IDREAD8             GO SCAN REMAINDER OF CARD
*
IDREADX  ST    L1,IDSAVEL1         SAVE LINK REG
         L     C1,DELPTRSV         GET DELETE POINTER - NEXT ADDR
*
IDREAD8  TRT   DX0(LX80,C1),TRTTAB SCAN TO NON-BLANK
         LA    W3,IDELWORK+DX71    COLUMN 72
         CR    C1,W3               END OF CARD
         BC    GE,IDREAD1          YES READ ANOTHER CARD
         CLI   DX0(C1),EXTZERO     IS THE NEXT CHARACTER
         BL    IDREAD9             A DIGIT
         CLI   DX0(C1),EXTNINE     IF SO SCAN FOR NUMBER
         BC    LE,IDREAD11         ON DELETE STATEMENT
IDREAD9  CLI   DX0(C1),COMMA       IS CHARACTER A COMMA
         BC    EQ,IDREAD10         IF SO, IT IS EXTRANEOUS
         CLI   DX0(C1),HYPHEN      IS CHARACTER A HYPHEN
         BC    EQ,IDREAD10         IF SO, IT IS EXTRANEOUS
         LA    C1,DX6(C1)          UPDATE TO NEXT POSSIBLE NUMBER
         B     IDREAD12            PUT OUT MESSAGE 113
IDREAD10 BAL   L1,DIAGNOSE         EXTRANEOUS CHARACTER MSG
         DC    X'10'               SEVERITY C  NO INSERT
         DC    X'72'               MESSAGE 114
         LA    C1,DX1(C1)          SET UP ADDR
         B     IDREAD22            INDICATE ERROR,CONTINUE SCAN
*
IDREAD11 LR    C4,C1               SAVE SCAN ADDR
         LA    W3,DX6(C1)          ADDR WHERE SCAN SHOULD END
         BAL   L1,NUMSCAN          CHANGE TRTTAB FOR DIGIT SCAN
         TRT   DX1(LX65,C1),TRTTAB SCAN NUMBER FIELD
         BAL   L1,NBLKSCN          CHANGE TRTTAB FOR NONBLK SCAN
         CLR   W3,C1               IS SIZE SIX
         BC    EQ,IDREAD14         SIZE IS OK
IDREAD12 BAL   L1,DIAGNOSE         EXPECTING SIX DIGIT NUMBER
         DC    X'22'               SEVERITY E
         DC    X'71'               MESSAGE 113
IDREAD13 BAL   L1,NOLDHSCN         SET TRTTAB FOR NON-LETTER,DIGIT,HYP
         TRT   DX0(LX80,C1),TRTTAB SCAN
         BAL   L1,NBLKSCAN         RESET TRTTAB FOR NONBLK SCAN
         B     IDREAD22            GO SET SWITCHES
*
IDREAD14 CLC   DX0(LX6,C4),INSNUM  IS NUMBER IN SEQUENCE
         BC    LT,IDREAD21         NO SEQUENCE ERROR
         MVC   DEL1NUM(LX6),DX0(C4) SET UP DEL1NUM
         MVC   INSNUM(LX6),DX0(C4) SET UP INSERT NUMBER
         OI    ABASISW,INDELETE    DELETE INDICATOR
IDREAD15 CLI   DX0(C1),BLANK       IS IT A BLANK
         BC    EQ,IDREAD17         GO SET SWITCHES, RETURN
         CLI   DX0(C1),COMMA       IS IT A COMMA
         BC    EQ,IDREAD16         GO SET UP ADDR, RETURN
         CLI   DX0(C1),HYPHEN      IS IT A HYPHEN
         BC    EQ,IDREAD18         CONTINUE SCAN
         BAL   L1,DIAGNOSE         NO PUNCTUATION-ASSUME BLANK
         DC    X'22'               SEVERITY E
         DC    X'73'               MESSAGE 115
IDREAD16 LA    C1,DX1(C1)          SET UP ADDR
IDREAD17 ST    C1,DELPTRSV         SAVE DELETE POINTER
         OI    ABASISW,IDELSRC     INDICATE SOURCE CARDS MAY FOLLOW
         NI    ABASISW,FF-IDELERR  SET OFF ERROR INDICATOR
IDREADR  L     L1,IDSAVEL1         RESTORE LINK REGISTER
         BR    L1                  RETURN
IDREAD18 LA    C4,DX1(C1)          SAVE START ADDR
         LA    W3,DX7(C1)          ADDR WHERE SCAN SHOULD END
         BAL   L1,NUMSCAN          CHANGE TRTTAB FOR DIGIT SCAN
         TRT   DX1(LX65,C1),TRTTAB SCAN TO NON DIGIT
         BAL   L1,NBLKSCN          CHANGE TRTTAB FOR NONBLK SCAN
         CLR   W3,C1               IS SIZE SIX
         BC    EQ,IDREAD19         SIZE IS OK
         BAL   L1,DIAGNOSE         IGNORE DELETE THRU NUMBER
         DC    X'22'               SEVERITY E
         DC    X'74'               MESSAGE 116
         NI    ABASISW,FF-INDELETE TURN OFF DELETE INDICATOR
         B     IDREAD13            CONTINUE SCAN
*
IDREAD19 CLC   DX0(LX6,C4),INSNUM  IS NUMBER IN SEQUENCE
         BC    GE,IDREAD20         SEQUENCE IS OK
         BAL   L1,DIAGNOSE         DELETE THRU NUMBER OUT OF SEQ
         DC    X'22'               SEVERITY E
         DC    X'5A'               MESSAGE 90
         B     IDREAD22            GO SET SWITCHES
IDREAD20 MVC   DEL2NUM(LX6),DX0(C4) SET UP DELETE THRU NUMBER
         MVC   INSNUM(LX6),DX0(C4) SET UP INSERT NUMBER
         OI    ABASISW,DELTHRU     INDICATE DELETE THRU IN EFFECT
         B     IDREAD15            CONTINUE SCAN
IDREAD21 BAL   L1,DIAGNOSE         NUMBER IS OUT OF SEQUENCE
         DC    X'22'               SEVERITY E
         DC    X'59'               MESSAGE 89
IDREAD22 OI    ABASISW,IDELERR     INDICATE ERROR
         NI    ABASISW,FF-IDELSRC  INDICATE SOURCE SHOULD BE BYPASSED
         B     IDREAD8             CONTINUE SCAN
*
IDREAD23 TM    ABASISW,IDELSRC     SHOULD WE INS/DEL THIS SOURCE CARD
         BC    ALLON,IDREADR       YES THEN RETURN
         TM    ABASISW,IDELERR     IS ERROR INDICATOR ON
         BC    ALLON,IDREAD1       YES-THEN READ ANOTHER CARD
         OI    ABASISW,IDELERR     ELSE INDICATE ERROR
IDREAD24 BAL   L1,DIAGNOSE         MISSING INSERT/DELETE CARD
         DC    X'22'               SEVERITY E
         DC    X'58'               MESSAGE 88
         B     IDREAD1             READ ANOTHER CARD
         SPACE 3
*****************************************************************
*        CALL TO PHASE 0 TO PRINT A RECORD
*              C0 POINTS TO CALLING PARAMETER VIA BALR INST
*              C5 HAS THE ADDRESS OF PHASE 0
*              C2 HAS ADDRESS OF RECORD TO PRINT
*              C3 HAS THE SIZE OF THE RECORD
*****************************************************************
         SPACE
WRITE    ST    L1,WRSAVEL1         SAVE LINK REG                    DA1
         TM    PHZSW,LIST          IS SOURCE LISTING REQUESTED
         BC    ALLOFF,PH1WRITE     NO, WRITE TO PHASE 1
         TM    COPYSW,CPYSURP      PRINT SUPPRESSED
         BC    ALLON,PH1WRITE      YES, WRITE TO PHASE 1
WRITE1   LH    W3,CURGCN           LOAD GENERATED SEQUENCE NUMBER
         CVD   W3,DOUBLE           CONVERT TO DECIMAL
         MVC   PINTSEQ(LX7),EDITMASK MOVE EDITMASK TO PRINT BUFFER
         ED    PINTSEQ(LX7),DOUBLE+DX4 AND EDIT INTERNAL SEQUENCE
WRITE2   MVC   PSTARS,SEQIND       MOVE SEQ ERROR INDICATOR
         L     W3,AIOA1I           GET ADDRESS OF CARD IMAGE
         MVC   PCARD(LX80),DX0(W3) MOVE CARD IMAGE TO LISTING
*                                  WORK AREA
         LA    C2,PINTSEQ+DX2      ADDR OF CARD BUFFER
         LA    C3,LX88             SIZE OF CARD BUFFER
         BALR  C0,C5               CALL PH0 TO MOVE CARD
         DC    X'16'               BUFFER TO PRINT AREA
*
         BALR  C0,C5               CALL PH0 TO
         DC    X'86'               PRINT A SOURCE LINE
*
*      ROUTINE WHICH SETS UP TO WRITE A RECORD TO PHASE 1
*
PH1WRITE TM    ASWITCH,WRITESUP    WRITE TO PHASE 1 SUPPRESSED
         BC    ALLON,PH1WRTB       YES - RETURN TO CALLER
         L     W3,AIOA1I           GET ADDRESS OF CARD IMAGE
         MVC   PH1CARD(LX77),DX0(W3) MOVE CARD IMAGE TO PH1 RECORD
         MVC   PH1ISEQ+DX1(LX2),CURGCN MOVE GCN TO PH1 RECORD
PH1WRTA  MVC   PH1ID(LX2),HZERO    INITIALIZE ID AREA
         TM    COPYSW,CPYSTMT      IS COPY STMT IN EFFECT
         BC    ALLOFF,PH1WRTAA     NO WRITE RECORD
         MVC   PH1ID(LX2),CO       INDICATE TO PHASE 1 THIS IS COPY
PH1WRTAA TM    MISCSW5,BADCOPY     BAD COPY STMT
         BC    ALLOFF,PH1WRTAB     NO WRITE RECORD
         NI    MISCSW5,FF-BADCOPY  OFF BAD COPY INDICATOR
         MVC   PH1ID(LX2),CP       INDICATE BAD COPY TO PHASE 1
PH1WRTAB TM    MISCSW5,NOCPYMEM    COPY MEMBER FOUND
         BC    ALLOFF,PH1WRTAC     YES
         NI    MISCSW5,FF-NOCPYMEM    OFF NO MEMBER FOUND
         MVC   PH1ID(LX2),CN       INDICATE NO MEMBER
PH1WRTAC LA    C2,PH1CARD          ADDRESS OF PH1 RECORD
         LA    C3,LX80             LENGTH OF RECORD
         BALR  C0,C5               CALL PH0 TO
         DC    X'14'               WRITE ON FILE FOUR
PH1WRTB  NI    ASWITCH,FF-WRITESUP TURN OFF SUPPRESS SWITCH
         L     L1,WRSAVEL1         RESTORE LINK REG                 DA1
         BR    L1                  RETURN TO CALLER                 DA1
         EJECT
***********************************************************************
*        TRTTAB AND ROUTINES WHICH ALTER TRTTAB                       *
*              TRTTAB IS SET UP TO SCAN FOR NON-BLANK                 *
*              ENTRY POINTS-                                          *
*                   NOLDHSCN - CHANGES TABLE TO SCAN NON LETTER,      *
*                                  DIGIT, HYPHEN                      *
*                   NUMSCAN - CHANGES TABLE TO SCAN TO NON-DIGIT      *
*                   NBLKSCAN,NBLKSCN - REINITIALIZE TABLE             *
***********************************************************************
TRTTAB   EQU   *
         DC    64X'01'             *
TRTBLK   DC    X'00'               BLANK
         DC    31X'01'             *
TRTHYP   DC    X'01'               HYPHEN
         DC    96X'01'             *
TRTLT1   DC    9X'01'              LETTERS A-I
         DC    7X'01'              *
TRTLT2   DC    9X'01'              LETTERS J-R
         DC    8X'01'              *
TRTLT3   DC    8X'01'              LETTERS S-Z
         DC    6X'01'              *
TRTNUM   DC    10X'01'             NUMBERS
         DC    6X'01'              *
*
*
NOLDHSCN NI    TRTHYP,K0                ALTER TRTTAB
         XC    TRTLT1(LX9),TRTLT1            TO BYPASS
         XC    TRTLT2(LX9),TRTLT2                HYPHEN
         XC    TRTLT3(LX8),TRTLT3                LETTERS
NUMSCAN  XC    TRTNUM(LX10),TRTNUM               NUMBERS
         MVI   TRTBLK,K1                     TO RECOGNIZE BLANKS
         BR    L1                       RETURN
*
*
NBLKSCAN MVI   TRTHYP,K1                REINITIALIZE TRTTAB
         MVC   TRTLT1(LX9),TRTLT1-DX1        TO RECOGNIZE
         MVC   TRTLT2(LX9),TRTLT1                HYPHEN
         MVC   TRTLT3(LX8),TRTLT1                LETTERS
NBLKSCN  MVC   TRTNUM(LX10),TRTNUM-DX1           NUMBERS
         MVI   TRTBLK,K0                     TO BYPASS BLANKS
         BR    L1                  RETURN
***********************************************************************
*                                                                   DA1
*                           RESERVED WORD TEST                      DA1
*                                                                   DA1
***********************************************************************
RESWDTST EQU   *                                                    DA1
         SR    W2,W2                                                DA1
         IC    W2,DX0(C4)          GET LENGTH OF TEST WORD
         SH    W2,TWO              TO GET DISP INTO ADCOB, SUB 2
         SLL   W2,LX1              THEN MULTIPLY BY 2
         LH    W1,ADCOB(W2)        GET LOWER BOUND DISP FROM COBOLWDS
         LH    W3,ADCOB+DX2(W2)    GET UPPER BOUND DISP FROM COBOLWDS
         LA    W2,COBOLWDS(W1)     GET ADDR OF LOWER BOUND          DA1
         LA    W3,COBOLWDS(W3)     GET ADDR OF UPPER BOUND          DA1
         SR    W1,W1               NO LONGER NEED ADDR OF ADCOB     DA1
         IC    W1,DX0(C4)          GET LENGTH OF TEST WORD AGAIN
         BCTR  W1,0                SUB 1 FOR EX INSTRUCTION         DA1
COBTST   EX    W1,COMPWD           COMPARE TEST WORD TO RESERVED WORD
         BE    COBCODE             A RESERVED WORD, GO SAVE CODE    DA1
         BCR   LT,L1               RETURN                           DA1
         LA    W2,DX2(W1,W2)       ADD LENGTH+2-1 TO ADDR
         CR    W2,W3               DOES LOWER BD = UPPER BD         DA1
         BCR   EQ,L1               WORD PAST RANGE, RETURN          DA1
         B     COBTST              NO, COMPARE WITH NEXT RESERVED WORD
         SPACE 1                                                    DA1
***                                                                 DA1
COMPWD   CLC   DX1(LX0,C4),DX0(W2) COMPARE TEST WORD TO RESERVED WORD
MVCOBWD  MVC   SAVECLS(LX0),DX1(C4) MOVE CLAUSE TO SAVEAREA
***                                                                 DA1
COBCODE  AR    W2,W1               ADD LENGTH-1 FACTOR TO ADDR      DA1
         MVC   RESCODE(LX1),DX1(W2) SAVE 1-BYTE CODE
         TM    DX1(W2),KEIGHTY     IS RESERVED WORD A KEYWORD
         BC    ALLOFF,COBCODE1     NO
         OI    ASWITCH,KEYWORD     TURN ON KEYWORD FOUND SW
COBCODE1 TM    DX1(W2),K1          IS THIS A COBOL CLAUSE
         BC    ALLOFF,COBCODE2     NO
         MVI   SAVECLS,BLANK       INITIALIZE SAVEAREA FOR CLAUSE
         NI    MISCSW3,FF-COBCLAUS INITIALIZE SW FOR COPY..REP
         TM    DX1(W2),K80         IS THIS CLAUSE CONSIDERED BY
         BC    ALLOFF,COBCODE2     GETWORD OR COPY...REPLACING
         EX    W1,MVCOBWD          SAVE CLAUSE
         OI    MISCSW3,COBCLAUS    SET SWITCH FOR COPY...REPLACING
COBCODE2 OI    ASWITCH,RESWORD     TURN ON RESWORD FOUND SW
         BR    L1                  GO BACK INLINE                   DA1
         SPACE 1                                                    DA1
***********************************************************************
*                                                                   DA1
*        SAVE AREAS                                                 DA1
*                                                                   DA1
***********************************************************************
         DS    0D                                                   DA1
DOUBLE   DS    D                   FOR CONVERSION IN GETCARD
AIOA1I   DS    F                   ADDRESS OF INPUT AREA
COLUMN7  DS    F                   SAVE AREA FOR COLUMN 7
COLUMN8  DS    F                   SAVE AREA FOR COLUMN 8
MARGINB  DS    F                   ADDR OF MARGIN B                 DA1
COLUMN72 DS    F                   ADDR OF END OF CARD              DA1
NBLKPTR  DS    F                   ADDR OF BEGINNING OF WORD ON CARD
IDSAVEL1 DS    F                   SAVE LINK REG FOR INSERT/DELETE
GWSAVEL1 DS    F                   SAVE LINK REG FOR GETWORD        DA1
RDSAVEL1 DS    F                   SAVE LINK REG FOR GET ROUTINE
WRSAVEL1 DS    F                   SAVE LINK REG FOR PRINT          DA1
GCSAVEL1 DS    F                   SAVE LINK REG FOR GETCARD        DA1
CDW1W2W3 DS    3F                  SAVE WORK REGS IN GETCARD
SVW1W2W3 DS    3F                  SAVES WD2 AND STRING REGS IN GETWORD
C1C2SAVE DS    2F                  REGISTER SAVE FOR COPY...REP
DIAGSAVE DS    3F                       DIAG. RTN REGISTER SAVE
ENAMSVL1 DS    F                   SAVE LINK REG FOR BASIS NAME TEST
NXTSTRNG DS    F                   SAVE ADDR OF NEXT MAIN STRING
NOWSTRNG DS    F                   SAVE ADDR OF THIS MAIN STRING
FLOPTSAV DS    F                   POINTER TO 'E' IN FLOPNT LITERAL
DELPTRSV DS    F                   SAVES ADDR OF DELETE POINTER
DBUGPTR  DS    F                   DEBUG LOCATION PTR
FULLWORD DC    F'0'                FOR ALIGNING TO BOUNDARY         DA1
SIZEWORD DS    0H                  USE THIS NAME FOR LOADING SIZE
         DC    X'00'               MUST ALWAYS BE ZERO
*                                  SIZE AND WORD MUST BE CONTIGUOUS DA1
SIZE     DS    CL1                 SIZE OF WORD FROM GETWORD        DA1
WORD     DS    CL122               ACTUAL WORD-LITERAL SIGNS        DA1
*                                  INCLUDED IF LITERAL              DA1
MANTISSA DS    H                   SIZE OF MANTISSA OF FLOPNT LITERAL
INSNUM   DC    3H'0'               NUMBER TO INSERT AFTER
DEL1NUM  DC    3H'0'               NUMBER TO DELETE FROM
DEL2NUM  DC    3H'0'               NUMBER TO DELETE THRU
CURGCN   DC    H'0'                GENERATED CARD SEQ NUMBER(INTERNAL)
LEVINDX  DC    H'0'                INDEX FOR COPY LEVEL ITEM RTN
SAVSIZ   DC    H'0'                SIZEWORD SAVE FOR COPY...REP
BASWORK  DS    CL80                SAVEAREA FOR BASIS READ
IDELWORK DS    CL80                SAVEAREA FOR INSERT/DELETE
LIBWORK  DC    CL80' '             INITIALIZED TO BLANKS FOR BASIS
SEQSAVE  DC    XL6'00'             SAVES PROGRAMMER'S SEQ NO-COL1-6 DA1
DATANAM1 DS    31C                 SAVE LEVEL DATANAME FOR COPY
DATANAM2 DS    31C                 SAVE REDEFINED DNM FOR COPY
SAVECLS  DS    CL15                SAVES CURRENT CLAUSE FOR DIAGNOSTIC
*
*   THE FOLLOWING SAVEAREAS ARE USED FOR COPY AND COPY...REPLACING
*
CPYWRK1  DS    CL80                COPY BUFFER 1
CPYWRK2  DS    CL80                COPY BUFFER 2
*
CPYHYP   DS    CL1                 CONTINUATION COLUMN WORK 1
REPWRK   DS    CL65                COPY...REPLACING WORKAREA 1
CPYHYP2  DS    CL1                 CONTINUATION COLUMN WORK 2
REPWRK2  DS    CL65                COPY...REPLACING WORKAREA 2
CPYHYP3  DS    CL1                 CONTINUATION COLUMN WORK 3
REPWRK3  DS    CL65                COPY...REPLACING WORKAREA 3
CPYHYP4  DS    CL1                 CONTINUATION COLUMN WORK 4
REPWRK4  DS    CL65                COPY...REPLACING WORKAREA 4
*
***********************************************************************
*                                                                   DA1
*        SWITCHES                                                   DA1
*                                                                   DA1
***********************************************************************
ABASISW  DC    X'00'               BASIS/INSERT/DELETE SWITCH
INBASIS  EQU   X'80'               READ FROM BASIS LIB IF ON
IDELCARD EQU   X'40'               ON IF INSERT/DELETE CARDS IN SYSIN
IDELSRC  EQU   X'20'               ON IF IN THE INSERT MODE
INDELETE EQU   X'10'               ON IF DELETE IS IN EFFECT
DELTHRU  EQU   X'08'               ON IF DELETE THRU IS IN EFFECT
IDELERR  EQU   X'04'               ON IF INSERT/DELETE ERROR
DELNOW   EQU   X'02'               ON IF DELETE THRU IS IN PROGRESS
ININSERT EQU   X'01'               ON IF INSERTING IS IN PROGRESS
*
COPYSW   DC    X'00'               COPY SWITCH
CPYSTMT  EQU   X'80'               ON IF COPY STMT SCAN IN EFFECT
CPYSUPP  EQU   X'40'               ON IF SUPPRESS OPTION SPECIFIED
CPYREP   EQU   X'20'               ON IF REPLACING OPTION SPECIFIED
INCPYLIB EQU   X'10'               ON IF READING COPY MEMBER
LASTCPY  EQU   X'08'               ON IF LAST COPY WAS READ
DBLCPY   EQU   X'04'               ON IF DOUBLE BUFFER COPY
CPYSURP  EQU   X'02'               ON IF PRINT SUPPRESS FOR COPY
REPHIT   EQU   X'01'               ON IF JUST REPLACED A WORD
*
REPWD2SW DC    X'00'               COPY REPLACING WORD 2 SWITCH
SIGNSW   EQU   X'80'               ON IF MANTISSA SIGN FOUND
POINTSW  EQU   X'40'               ON IF DECIMAL POINT FOUND
FLOPTSW  EQU   X'20'               ON IF 'E' FOUND
SIGNSW2  EQU   X'10'               ON IF EXPONENT SIGN FOUND
MSG72SW  EQU   X'08'               ON IF MSG1072 ALREADY ISSUED
MSG73SW  EQU   X'04'               ON IF MSG1073 ALREADY ISSUED
MSG74SW  EQU   X'02'               ON IF MSG1074 ALREADY ISSUED
WD2MRGB  EQU   X'01'               ON IF WORD2 CHECK FOR MARGINB NEC
*
ASWITCH  DC    X'00'               ALL SWITCHES ARE CONTAINED HERE
NOTFIRST EQU   X'01'               ON AFTER FIRST GET EXECUTED      DA1
MARGA    EQU   X'02'               ON IF WORD FOUND IN COLS 8-11    DA1
EOS      EQU   X'04'               ON IF LAST GET WAS A '. '        DA1
RESWORD  EQU   X'08'               ON IF WORD PASSES RES WORD TEST  DA1
NOSPACE  EQU   X'10'               ON IF MSG 1007 TO BE PUT OUT
KEYWORD  EQU   X'20'               ON IF RESERVED WORD IS A KEY WORD
WRITESUP EQU   X'40'               ON FOR WRITE SUPPRESS
TRUNCATE EQU   X'80'               ON TO TRUNCATE LARGER THAN 120 LIT
*
MISCSW   DC    X'00'               MISCELLANEOUS SWITCH
FNDALPHA EQU   X'01'               ON IF ALPHABETIC FOUND
TSTMARGA EQU   X'02'               ON IF WORD MUST BE IN AREA A
TSTMARGB EQU   X'04'               ON IF WORD MUST BE IN AREA B
RP       EQU   X'08'               ON IF A RIGHT PAREN WAS FOUND
DUMMYGET EQU   X'10'               ON IF ALREADY HAVE WORD
REDEF    EQU   X'20'               ON IF REDEFINES FOR COPY
LP       EQU   X'40'               ON IF A LEFT PAREN WAS FOUND
TSTNAME  EQU   X'80'               ON IF EXTNAME TEST FOR BASIS
*
MISCSW2  DC    X'00'               MISCELLANEOUS SWITCH
DCOMPILE EQU   X'80'               ON IF DATA-COMPILED WAS CHANGED
LEV1SW   EQU   X'40'               ON IF LEVEL 01 DNM TO BE SAVED
FDSDSW   EQU   X'20'               ON IF WITHIN FD OR SD
WRKSTSW  EQU   X'10'               ON IF WITHIN WORKING-STORAGE
RDSW     EQU   X'08'               ON IF WITHIN RD
PROCSW   EQU   X'04'               ON IF WITHIN PROCEDURE DIVISION
DBUGC6   EQU   X'02'               ON IF DEBUG WITHIN COL 6
DBUGSW   EQU   X'01'               ON IF A DEBUG CARD IN PROCESS
*
MISCSW3  DC    X'00'               MISCELLANEOUS SWITCH
COBCLAUS EQU   X'80'               ON IF COBOL CLAUSE WITH CODE 41
RPOUT    EQU   X'40'               ON IF RPAREN ALREADY PUT IN WORD
CDSURP   EQU   X'20'               ON FOR CARD SUPP OF CPY REP GETWORD
REPQUOT  EQU   X'10'               ON IF CONT QUOTE NECESSARY
FULLBUFS EQU   X'08'               ON IF ALL WORKAREAS USED
REPBUF4  EQU   X'04'               ON IF WORKAREA 4 USED
REPBUF3  EQU   X'02'               ON IF WORKAREA 3 USED
REPBUF2  EQU   X'01'               ON IF WORKAREA 2 USED
*
MISCSW4  DC    X'00'               MISCELLANEOUS SWITCH
CONTSW   EQU   X'80'               ON IF ANOTHER WORKAREA NECESSARY
LASTWRD  EQU   X'40'               ON IF LAST WORD ON CARD-CPY REP
CONTPER  EQU   X'20'               ON IF PERIOD ENDS CONT WORD (COPY)
CONTLIT  EQU   X'10'               ON IF CONT WORD IS ALPHA LITERAL
PNOTESW  EQU   X'08'               ON IF IN NOTE PARAGRAPH
SNOTESW  EQU   X'04'               ON IF IN NOTE SENTENCE
MAYBNOTE EQU   X'02'               ON IF MRGA WORD JUST COPY...REP'ED
WORD2SW  EQU   X'01'               ON IF WORD2 IS IN WORK BUFFER
*
MISCSW5  DC    X'00'               MISCELLANEOUS SWITCH
LSTBASIS EQU   X'80'               ON IF LAST BASIS RECORD READ
BADCOPY  EQU   X'40'               ON IF BAD COPY STMT FOUND
NOCPYMEM EQU   X'20'               ON IF NO COPY MEMBER FOUND
***********************************************************************
*                                                                   DA1
*        CONSTANTS                                                  DA1
*                                                                   DA1
***********************************************************************
         DS    0H                                                   DA1
HZERO    DC    H'0'                CONSTANT OF ZERO
TWO      DC    H'2'                CONSTANT OF TWO
H65      DC    H'65'               CONSTANT 65 FOR COPY WORK LENGTH
K120     DC    H'120'              TO COMPARE AGAINST LARGEST LITERAL
H16      DC    H'16'               CONSTANT 16 FOR WORD2 CHECK
H18      DC    H'18'               CONSTANT 18 FOR WORD2 CHECK
DEBUG    DC    C'DEBUG '           FOR DEBUG SCAN
DELETE   DC    C'DELETE '          DELETE CONSTANT
INSERT   DC    C'INSERT '          INSERT CONSTANT
CO       DC    C'CO'               COPY IDENTIFIER FOR PHASE 1
CP       DC    C'CP'               BAD COPY IDENTIFIER FOR PHASE 1
CN       DC    C'CN'               NO COPY MEMBER INDICATOR FOR PHASE 1
CBLANK   DC    C'C '               COPY INDICATOR FOR LISTING
STARS    DC    C'**'               FOR OUT OF SEQUENCE ON LIST      DA1
BLANKS   DC    CL8' '              FOR TESTING MARGA OR SEQ BLANK   DA1
SEQIND   DC    CL2' '              FOR COLUMNS 15-16 ON LIST        DA1
EDITMASK DC    X'20212020202020'   FOR GENERATED SEQUENCE NUMBER
CODECNT  DC    X'2348'             CONSTANT FOR INS/DEL ERROR TEXT
REPINDX  DC    X'00'               INDEX FOR COPY WRKAREA PTOCESSING
RESCODE  DC    X'00'                                                DA1
DECPNT   DC    C'.'                FOR WORD2 TEST - CHANGED BY ADECPNT
LITSIGN  DC    X'7D'               APOSTROPHE FOR LITERALS -        DA1
QUOTE    EQU   X'7F'               OVERLAID WITH X'7F' IF QUOTE     DA1
BLANK    EQU   X'40'               FOR SCANNING TO NON-BLANK        DA1
K0       EQU   X'00'               CONSTAND OT ZERO
K1       EQU   X'01'               CONSTANT                         DA1
K2       EQU   X'02'               FOR COMPARING SIZE OF WORD       DA1
K3       EQU   X'03'               FOR COMPARING SIZE OF WORD
K4       EQU   X'04'               FOR TESTING BIT 5 ON
K5       EQU   X'05'               FOR COMPARING SIZE OF WORD
K6       EQU   X'06'               CONSTANT OF 6                    DA1
K7       EQU   X'07'               FOR COMPARING SIZE OF WORD
K8       EQU   X'08'
K10      EQU   10                  FOR COMPARING SIZE OF WORD       DA1
K14      EQU   X'0E'               FOR ERROR BYTE TEST IN CALCACT RTN
K15      EQU   X'0F'               FOR COMPARING SIZE OF WORD       DA1
K16      EQU   X'10'               FOR TURNING ON BIT 3             DA1
K25      EQU   25                  CONSTANT OF 25                   DA1
K30      EQU   30                  CONSTANT OF 30
K74      EQU   X'4A'               CONSTANT OF 74
KEIGHTY  EQU   X'80'               FOR COBOL CLAUSE CHECK
K80      EQU   X'40'               FOR COMPARING TEST TYPE
K85      EQU   X'85'
FF       EQU   X'FF'               FOR IMMEDIATE INSTRUCTIONSS      DA1
LPAREN   EQU   C'('                LEFT PAREN
RPAREN   EQU   C')'                RIGHT PAREN
COMMA    EQU   C','                FOR COMPARING SINGLE CHAR WORD   DA1
CPLUS    EQU   C'+'                PLUS SIGN
CMINUS   EQU   C'-'                MINUS SIGN
PERIOD   EQU   C'.'                FOR COMPARING SINGLE CHAR WORD   DA1
HYPHEN   EQU   X'60'               FOR TESTING CONTINUATION         DA1
ASTERISK EQU   C'*'                FOR COMMENT COMPARE              DA1
SEMICOL  EQU   X'5E'               FOR FINDING DELIMITER            DA1
EXTONE   EQU   X'F1'               EXTERNAL ONE-UNPACKED            DA1
A        EQU   C'A'                CHARACTER A
E        EQU   C'E'                CHARACTER E
J        EQU   C'J'                CHARACTER J
EXTZERO  EQU   X'F0'               EXTERNAL ZERO-UNPACKED           DA1
EXTNINE  EQU   X'F9'               EXTERNAL NINE-UNPACKED           DA1
LN       EQU   4096                LENGTH OF 1 FOR STRINGS
L2       EQU   8192                LENGTH OF 2 FOR STRINGS
L3       EQU   12288               LENGTH OF 3 FOR STRINGS
L4       EQU   16384               LENGTH OF 4 FOR STRINGS
L5       EQU   20480               LENGTH OF 5 FOR STRINGS
L6       EQU   24576               LENGTH OF 6 FOR STRINGS
L7       EQU   28672               LENGTH OF 7 FOR STRINGS
L8       EQU   32768               LENGTH OF 8 FOR STRINGS
L9       EQU   36864               LENGTH OF 9 FOR STRINGS
L10      EQU   40960               LENGTH OF 10 FOR STRINGS
L11      EQU   45056               LENGTH OF 11 FOR STRINGS
L12      EQU   49152               LENGTH OF 12 FOR STRINGS
L13      EQU   53248               LENGTH OF 13 FOR STRINGS
L14      EQU   57344               LENGTH OF 14 FOR STRINGS
L15      EQU   61440               LENGTH OF 15 FOR STRINGS
         EJECT
***********************************************************************
*
*        COBOL RESERVED WORD TABLE
*
*              THE COBOL RESERVED WORDS ARE LISTED ACCORDING TO
*              SIZE AND MUST BE IN ALPHABETICAL
*              ORDER.THE BITS OF THE CODE BYTE FOLLOWING EACH
*              WORD HAVE THE FOLLOWING MEANING:
*
*              B'10000000'    KEYWORD - SEARCHED BY COPY SYNTAX SCAN
*              B'01000000'    PARAGRAPH NAME, PIC, AND VALUE CLAUSES
*              B'00100000'    NOT USED
*              B'00010000'    WORD RESERVED FOR FUTURE USE
*              B'00001000'    ONLY LEGAL WITHIN THE PROCEDURE DIVISION
*              B'00000100'    MARGIN-A MAJOR RESERVED WORD
*              B'00000010'    MINOR WORD - OCCURS WITHIN A CLAUSE
*              B'00000001'    BEGINNING OF A COBOL CLAUSE
*
*              WHEN THOSE WORDS WHICH ARE RESERVED FOR FUTURE USE ARE
*              IMPLEMENTED, THEIR CODES SHOULD BE CHANGED TO THE
*              PROPER CODE AS ILLUSTRATED ABOVE.
*
***********************************************************************
COBOLWDS EQU   *                                                    DA1
*                                                                   DA1
*        LENGTH OF 2                                                DA1
*                                                                   DA1
COB2     DC    C'AT'               AT                               DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
BY       DC    C'BY'               BY                               DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'CF'               CF
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'CH'               CH
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'DE'               DE
         DC    X'01'                    BEGINNING OF CLAUSE
FD       DC    C'FD'               FD                               DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
         DC    C'GO'               GO                               DA1
         DC    X'49'                    PROC DIV CLAUSE (COPY...REP)
ID       DC    C'ID'               ID SAME AS IDENTIFICATION        DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'IF'               IF                               DA1
         DC    X'09'                    PROC DIV CLAUSE
INCON    DC    C'IN'                    IN
         DC    X'02'                    MINOR WORD                  DA1
IS       DC    C'IS'               IS                               DA1
         DC    X'02'                    MINOR WORD                  DA1
NO       DC    C'NO'               NO                               DA1
         DC    X'02'                    MINOR WORD                  DA1
OF       DC    C'OF'               OF                               DA1
         DC    X'02'                    MINOR WORD                  DA1
ON       DC    C'ON'               ON                               DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'OR'               OR                               DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'PF'               PF
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'PH'               PH
         DC    X'01'                    BEGINNING OF CLAUSE
RD       DC    C'RD'               RD
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
         DC    C'RF'               RF
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'RH'               RH
         DC    X'01'                    BEGINNING OF CLAUSE
SD       DC    C'SD'               SD
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
TO       DC    C'TO'               TO                               DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'UP'               UP                               DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
LEVEL01  DC    C'01'               LEVEL 01
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
LEV77    DC    C'77'               LEVEL 77
         DC    X'85'               MARGIN A RESWORD AND KEYWORD
*                                                                   DA1
*        LENGTH OF 3                                                DA1
*                                                                   DA1
COB3     DC    C'ADD'              ADD                              DA1
         DC    X'09'                    PROC DIV CLAUSE
ALL      DC    C'ALL'              ALL
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'AND'              AND                              DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
ARE      DC    C'ARE'              ARE                              DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'CSP'              CSP                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C01'              C01                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C02'              C02                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C03'              C03                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C04'              C04                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C05'              C05                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C06'              C06                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C07'              C07                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C08'              C08                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C09'              C09                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C10'              C10                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C11'              C11                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'C12'              C12                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'END'              END                              DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'EOP'              EOP  SAME AS END-OF-PAGE         DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
FOR      DC    C'FOR'              FOR                              DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'I-O'              I-O                              DA1
         DC    X'08'               ONLY LEGAL IN PROC DIVISION
KEY      DC    C'KEY'              KEY                              DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'NOT'              NOT                              DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
OFF      DC    C'OFF'              OFF                              DA1
         DC    X'02'                    MINOR WORD                  DA1
PIC      DC    C'PIC'              PIC  SAME AS PICTURE             DA1
         DC    X'41'                    BEGINNING OF CLAUSE(COPY REP)
         DC    C'RUN'              RUN                              DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'SET'              SET                              DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'SUM'              SUM
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'S01'              S01                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'S02'              S02                              DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'USE'              USE                              DA1
         DC    X'09'                    PROC DIV CLAUSE
*                                                                   DA1
*        LENGTH OF 4                                                DA1
*                                                                   DA1
COB4     EQU   *                                                    DA1
AREA     DC    C'AREA'             AREA SAME AS AREAS               DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'CALL'             CALL                             DA1
         DC    X'09'                    PROC DIV CLAUSE
CODE     DC    C'CODE'             CODE
         DC    X'01'                    BEGINNING OF CLAUSE
COMP     DC    C'COMP'             COMP SAME AS COMPUTATIONAL       DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
COPY     DC    C'COPY'             COPY                             DA1
         DC    X'01'               BEGINNING OF CLAUSE
         DC    C'CORR'             CORR SAME AS CORRESPONDING       DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
DATA     DC    C'DATA'             DATA                             DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'DISP'             DISP
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'DOWN'             DOWN                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'ELSE'             ELSE SAME AS OTHERWISE           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'EXIT'             EXIT                             DA1
         DC    X'09'                    PROC DIV CLAUSE
FILE     DC    C'FILE'             FILE                             DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'FROM'             FROM                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'INTO'             INTO                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
JUST     DC    C'JUST'             JUST SAME AS JUSTIFIED           DA1
         DC    X'01'               BEGINNING OF CLAUSE
         DC    C'LAST'             LAST
         DC    X'01'                    BEGINNING OF CLAUSE
LEFT     DC    C'LEFT'             LEFT                             DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'LESS'             LESS                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'LINE'             LINE NOT SAME AS LINES           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'LOCK'             LOCK                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
MODE     DC    C'MODE'             MODE                             DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'MOVE'             MOVE                             DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'NEXT'             NEXT                             DA1
         DC    X'01'                    BEGINNING OF CLAUSE
NOTE     DC    C'NOTE'             NOTE
         DC    X'49'                    PROC DIV CLAUSE (COPY...REP)
         DC    C'OPEN'             OPEN                             DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'PAGE'             PAGE
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'PLUS'             PLUS
         DC    X'02'                    MINOR WORD
         DC    C'READ'             READ                             DA1
         DC    X'09'                    PROC DIV CLAUSE
REEL     DC    C'REEL'             REEL                             DA1
         DC    X'02'                    MINOR WORD                  DA1
SAME     DC    C'SAME'             SAME                             DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'SEEK'             SEEK                             DA1
         DC    X'09'                    PROC DIV CLAUSE
SIGN     DC    C'SIGN'             SIGN                             DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
SIZE4    DC    C'SIZE'             SIZE                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'SORT'             SORT
         DC    X'49'                    PROC DIV CLAUSE (COPY...REP)
         DC    C'STOP'             STOP                             DA1
         DC    X'09'                    PROC DIV CLAUSE
SYNC     DC    C'SYNC'             SYNC SAME AS SYNCHRONIZED        DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
TAPE     DC    C'TAPE'                                              DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'THAN'             THAN                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'THEN'             THEN                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
THRU     DC    C'THRU'             THRU SAME AS THROUGFH
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'TYPE'             TYPE
         DC    X'01'                    BEGINNING OF CLAUSE
UNIT     DC    C'UNIT'             UNIT                             DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'UPON'             UPON                             DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
WHEN     DC    C'WHEN'             WHEN                             DA1
         DC    X'02'                    MINOR WORD                  DA1
WITH     DC    C'WITH'             WITH
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
ZER      DC    C'ZERO'             ZERO                             DA1
         DC    X'02'                    MINOR WORD                  DA1
*                                                                   DA1
*        LENGTH OF 5                                                DA1
*                                                                   DA1
COB5     DC    C'AFTER'            AFTER                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'ALTER'            ALTER                            DA1
         DC    X'49'                    PROC DIV CLAUSE (COPY...REP)
APPLY    DC    C'APPLY'            APPLY                            DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
AREAS    DC    C'AREAS'            AREAS SAME AS AREA               DA1
         DC    X'02'                    MINOR WORD                  DA1
BASISK   DC    C'BASIS'            BASIS
         DC    X'01'                    BEGINNING OF CLAUSE
BLNK     DC    C'BLANK'            BLANK                            DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
BLOCK    DC    C'BLOCK'            BLOCK                            DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'CLOSE'            CLOSE                            DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'COBOL'            COBOL
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
COMMA5   DC    C'COMMA'            COMMA                            DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'DEBUG'            DEBUG                            DA1
         DC    X'49'                    PROC DIV CLAUSE (COPY...REP)
EJECT    DC    C'EJECT'            EJECT
         DC    X'01'               MAJOR RESERVED WORD
         DC    C'ENTER'            ENTER                            DA1
         DC    X'49'                    PROC DIV CLAUSE (COPY...REP)
         DC    C'ENTRY'            ENTRY                            DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'EQUAL'            EQUAL                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'ERROR'            ERROR                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
EVERY    DC    C'EVERY'            EVERY                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'FINAL'            FINAL
         DC    X'02'                    MINOR WORD
         DC    C'FIRST'            FIRST                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'GROUP'            GROUP
         DC    X'01'                    BEGINNING OF CALUSE
         DC    C'INDEX'            INDEX
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'INPUT'            INPUT                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
LABEL    DC    C'LABEL'            LABEL                            DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'LEAVE'            LEAVE
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'LIMIT'            LIMIT
         DC    X'02'                    MINOR WORD
         DC    C'LINES'            LINES NOT SAME AS LINE           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'NAMED'            NAMED                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'QUOTE'            QUOTE                            DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'READY'            READY                            DA1
         DC    X'09'                    PROC DIV CLAUSE
RERUN    DC    C'RERUN'            RERUN                            DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'RESET'            RESET                            DA1
         DC    X'09'                    PROC DIV CLAUSE
RIGHT    DC    C'RIGHT'            RIGHT                            DA1
         DC    X'02'                    MINOR WORD                  DA1
SKIP1    DC    C'SKIP1'            SKIP1
         DC    X'01'               MAJOR RESERVED WORD
SKIP2    DC    C'SKIP2'            SKIP2
         DC    X'01'               MAJOR RESERVED WORD
SKIP3    DC    C'SKIP3'            SKIP3
         DC    X'01'               MAJOR RESERVED WORD
         DC    C'SPACE'            SPACE                            DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'START'            START                            DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'SYSIN'            SYSIN
         DC    X'01'                    BEGINNING OF CLAUSE
TALLY    DC    C'TALLY'            TALLY
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
TIMES    DC    C'TIMES'            TIMES                            DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'TRACE'            TRACE                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'TRACK'            TRACK
         DC    X'02'                    MINOR WORD
         DC    C'UNTIL'            UNTIL                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
USAGE    DC    C'USAGE'            USAGE                            DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'USING'            USING                            DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
VALUE    DC    C'VALUE'            VALUE SAME AS VALUES             DA1
         DC    X'41'                    BEGINNING OF CLAUSE
WORDS    DC    C'WORDS'            WORDS                            DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'WRITE'            WRITE                            DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'ZEROS'            ZEROS SAME AS ZERO AND ZEROES    DA1
         DC    X'02'                    MINOR WORD                  DA1
*                                                                   DA1
*        LENGTH OF 6                                                DA1
*                                                                   DA1
COB6     DC    C'ACCEPT'           ACCEPT                           DA1
         DC    X'09'                    PROC DIV CLAUSE
ACCESS   DC    C'ACCESS'           ACCESS                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
ACTUAL   DC    C'ACTUAL'           ACTUAL                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
ASSIGN   DC    C'ASSIGN'           ASSIGN                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
AUTHOR   DC    C'AUTHOR'                AUTHOR                      DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'BEFORE'           BEFORE                           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'COLUMN'           COLUMN
         DC    X'01'                    BEGINNING OF CLAUSE
COMP1    DC    C'COMP-1'           COMP-1                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
COMP2    DC    C'COMP-2'           COMP-2                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
COMP3    DC    C'COMP-3'           COMP-3                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'CYCLES'           CYCLES
         DC    X'02'                    MINOR WORD
         DC    C'DELETE'           DELETE
         DC    X'02'                    MINOR WORD
         DC    C'DETAIL'           DETAIL
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'DIVIDE'           DIVIDE                           DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'ENDING'           ENDING                           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
FILLER   DC    C'FILLER'           FILLER
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'GIVING'           GIVING                           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'GOBACK'           GOBACK                           DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'INSERT'           INSERT
         DC    X'02'                    MINOR WORD
         DC    C'LIMITS'           LIMITS
         DC    X'02'                    MINOR WORD
MEMORY   DC    C'MEMORY'           MEMORY                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'NUMBER'           NUMBER
         DC    X'02'                    MINOR WORD
OCCURS   DC    C'OCCURS'           OCCURS                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'OUTPUT'           OUTPUT                           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'QUOTES'           QUOTES SAME AS QUOTE             DA1
         DC    X'02'                    MINOR WORD                  DA1
RANDOM   DC    C'RANDOM'           RANDOM                           DA1
         DC    X'02'                    MINOR WORD                  DA1
RECORD   DC    C'RECORD'           RECORD                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'REPORT'           REPORT
         DC    X'05'                    MARGIN A MAJOR RESERVED WORD
         DC    C'REREAD'           REREAD
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'RETURN'           RETURN
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'REWIND'           REWIND                           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'SEARCH'           SEARCH
         DC    X'09'                    PROC DIV CLAUSE
SELECT   DC    C'SELECT'           SELECT                           DA1
         DC    X'85'               RESERVED WORD AND KEYWORD MRGA TYPE
         DC    C'SOURCE'           SOURCE
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'SPACES'           SPACES SAME AS SPACE             DA1
         DC    X'02'                    MINOR WORD                  DA1
STATUS   DC    C'STATUS'           STATUS                           DA1
         DC    X'02'                    MINOR WORD                  DA1
SYSIPT   DC    C'SYSIPT'           SYSIPT                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'SYSLST'           SYSLST                           DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'SYSOUT'           SYSOUT
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'SYSPCH'           SYSPCH NOT SAME AS SYSPUNCH      DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
TRACKS   DC    C'TRACKS'           TRACKS                           DA1
         DC    X'02'                    MINOR WORD                  DA1
VALUES   DC    C'VALUES'           VALUES SAME AS VALUE             DA1
         DC    X'41'                    BEGINNING OF CLAUSE
         DC    C'ZEROES'           ZEROES SAME AS ZERO AND ZEROS    DA1
         DC    X'02'                    MINOR WORD                  DA1
*                                                                   DA1
*        LENGTH OF 7                                                DA1
*                                                                   DA1
COB7     DC    C'ADDRESS'          ADDRESS
         DC    X'02'               MINOR WORD
         DC    C'CHANGED'               CHANGED
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'COMPUTE'          COMPUTE                          DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'CONSOLE'          CONSOLE                          DA1
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'CONTROL'          CONTROL
         DC    X'01'                    BEGINNING OF CLAUSE
DISPLAY  DC    C'DISPLAY'          DISPLAY                          DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'EXAMINE'          EXAMINE                          DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'EXHIBIT'          EXHIBIT                          DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'FOOTING'          FOOTING
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'GREATER'          GREATER                          DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'HEADING'          HEADING
         DC    X'01'                    BEGINNING OF CLAUSE
INDEXED  DC    C'INDEXED'          INDEXED                          DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'INVALID'          INVALID                          DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
LEADING  DC    C'LEADING'          LEADING                          DA1
         DC    X'02'                    MINOR WORD                  DA1
LINKAGE  DC    C'LINKAGE'          LINKAGE                          DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
MODULES  DC    C'MODULES'          MODULES                          DA1
         DC    X'02'                    MINOR WORD                  DA1
NOMINAL  DC    C'NOMINAL'          NOMINAL                          DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'NUMERIC'          NUMERIC                          DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
OMITTED  DC    C'OMITTED'          OMITTED                          DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'PERFORM'          PERFORM                          DA1
         DC    X'49'                    PROC DIV CLAUSE (COPY...REP)
PICT     DC    C'PICTURE'          PICTURE SAME AS PIC              DA1
         DC    X'41'                    BEGINNING OF CLAUSE(COPY REP)
         DC    C'PROCEED'          PROCEED                          DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'PROGRAM'          PROGRAM                          DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
RECORDS  DC    C'RECORDS'          RECORDS                          DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'RELEASE'          RELEASE
         DC    X'09'                    PROC DIV CLAUSE
REMARKS  DC    C'REMARKS'               REMARKS                     DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
RENAMES  DC    C'RENAMES'          RENAMES                          DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'REPORTS'          REPORTS
         DC    X'01'                    BEGINNING OF CLAUSE
RESERVE  DC    C'RESERVE'          RESERVE                          DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'REWRITE'          REWRITE                          DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'ROUNDED'          ROUNDED                          DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
SECTION  DC    C'SECTION'          SECTION                          DA1
         DC    X'02'                    MINOR WORD                  DA1
THROUGH  DC    C'THROUGH'          THROUGH SAME AS THRU
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'TOTALED'          TOTALED
         DC    X'01'                    BEGINNING OF CLAUSE
         DC    C'VARYING'          VARYING                          DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
*                                                                   DA1
*        LENGTH OF 8                                                DA1
*                                                                   DA1
COB8     EQU   *                                                    DA1
CONTAINS DC    C'CONTAINS'         CONTAINS                         DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'CONTROLS'         CONTROLS
         DC    X'01'                    BEGINNING OF CLAUSE
CURRENCY DC    C'CURRENCY'         CURRENCY                         DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
DIVISION DC    C'DIVISION'         DIVISION  PAST PROCEDURE DIVISION
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'GENERATE'         GENERATE
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'INDICATE'         INDICATE
         DC    X'02'                    MINOR WORD
         DC    C'INITIATE'         INITIATE
         DC    X'09'                    PROC DIV CLAUSE
MULTIPLE DC    C'MULTIPLE'         MULTIPLE                         DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'MULTIPLY'         MULTIPLY                         DA1
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'NEGATIVE'         NEGATIVE                         DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
OPTIONAL DC    C'OPTIONAL'         OPTIONAL                         DA1
         DC    X'02'                    MINOR WORD                  DA1
POSITION DC    C'POSITION'         POSITION                         DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'POSITIVE'         POSITIVE                         DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'REVERSED'         REVERSED                         DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
SECURITY DC    C'SECURITY'         SECURITY                         DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'SENTENCE'         SENTENCE                         DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
STANDARD DC    C'STANDARD'         STANDARD                         DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'SUBTRACT'         SUBTRACT                         DA1
         DC    X'09'                    PROC DIV CLAUSE
SUPPRESS DC    C'SUPPRESS'         SUPPRESS                         DA1
         DC    X'02'                    MINOR WORD                  DA1
SYSPUNCH DC    C'SYSPUNCH'         SYSPUNCH NOT SAME AS SYSPCH      DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'TALLYING'         TALLYING                         DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'TOTALING'         TOTALING
         DC    X'01'                    BEGINNING OF CLAUSE
*                                                                   DA1
*        LENGTH OF 9                                                DA1
*                                                                   DA1
COB9     DC    C'ADVANCING'        ADVANCING                        DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
ALTERNAT DC    C'ALTERNATE'        ALTERNATE                        DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'ASCENDING'        ASCENDING
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'BEGINNING'        BEGINNING                        DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
CYLIND   DC    C'CYL-INDEX'        CYL-INDEX                        DA1
         DC    X'02'                    MINOR WORD                  DA1
DEPENDNG DC    C'DEPENDING'        DEPENDING                        DA1
         DC    X'02'                    MINOR WORD                  DA1
JUSTI    DC    C'JUSTIFIED'        JUSTIFIED                        DA1
         DC    X'01'               BEGINNING OF CLAUSE
         DC    C'LOW-VALUE'        LOW-VALUE SAME AS LOW-VALUES     DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'OTHERWISE'        OTHERWISE SAME AS ELSE           DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
PROCED   DC    C'PROCEDURE'        PROCEDURE PAST PROCEDURE DIVISION
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
RECORDNG DC    C'RECORDING'        RECORDING                        DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
REDEFINE DC    C'REDEFINES'        REDEFINES                        DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'REMAINDER'        REMAINDER                        DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
REPLACE  DC    C'REPLACING'        REPLACING
         DC    X'02'                    MINOR WORD
         DC    C'REPORTING'        REPORTING
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'TERMINATE'        TERMINATE
         DC    X'09'                    PROC DIV CLAUSE
         DC    C'TRANSFORM'        TRANSFORM                        DA1
         DC    X'09'                    PROC DIV CLAUSE
*                                                                   DA1
*        LENGTH OF 10                                               DA1
*                                                                   DA1
COB10    DC    C'ALPHABETIC'       ALPHABETIC                       DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
CHARCTRS DC    C'CHARACTERS'       CHARACTERS                       DA1
         DC    X'02'                    MINOR WORD                  DA1
COREINDX DC    C'CORE-INDEX'       CORE-INDEX
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'DESCENDING'       DESCENDING
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
DISPST   DC    C'DISPLAY-ST'       DISPLAY-ST                       DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
FILELIM  DC    C'FILE-LIMIT'       FILE-LIMIT SAME AS FILE-LIMITS   DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'HIGH-VALUE'       HIGH-VALUE SAME AS HIGH-VALUES   DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'LOW-VALUES'       LOW-VALUES SAME AS LOW-VALUE     DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'NSTD-REELS'       NSTD-REELS                       DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
PROCESNG DC    C'PROCESSING'       PROCESSING                       DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'PROGRAM-ID'       PROGRAM-ID
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
SEQNTIAL DC    C'SEQUENTIAL'       SEQUENTIAL                       DA1
         DC    X'02'                    MINOR WORD                  DA1
TRKAREA  DC    C'TRACK-AREA'       TRACK-AREA                       DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
WRITONLY DC    C'WRITE-ONLY'       WRITE-ONLY                       DA1
         DC    X'02'                    MINOR WORD                  DA1
*                                                                   DA1
*        LENGTH OF 11                                               DA1
*                                                                   DA1
COB11    DC    C'CLOCK-UNITS'      CLOCK-UNITS
         DC    X'02'                    MINOR WORD
         DC    C'END-OF-PAGE'      END-OF-PAGE SAME AS EOP
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
ENVIRON  DC    C'ENVIRONMENT'      ENVIRONMENT                      DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
FILELIMS DC    C'FILE-LIMITS'      FILE-LIMITS SAME AS FILE-LIMIT   DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
         DC    C'HIGH-VALUES'      HIGH-VALUES SAME AS HIGH-VALUE   DA1
         DC    X'02'                    MINOR WORD                  DA1
IOCONTRL DC    C'I-O-CONTROL'      I-O-CONTROL                      DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
         DC    C'MORE-LABELS'      MORE-LABELS                      DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'POSITIONING'      POSITIONING                      DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'RETURN-CODE'      RETURN-CODE
         DC    C'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'SORT-RETURN'      SORT-RETURN
         DC    X'08'                    ONLY LEGAL IN PROC DIV
         DC    C'TIME-OF-DAY'      TIME-OF-DAY                      DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'TRACK-LIMIT'      TRACK-LIMIT
         DC    X'01'                    BEGINNING OF CLAUSE
*                                                                   DA1
*        LENGTH OF 12                                               DA1
*                                                                   DA1
COB12    EQU   *                                                    DA1
         DC    C'CURRENT-DATE'     CURRENT-DATE                     DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
CYLOFLOW DC    C'CYL-OVERFLOW'     CYL-OVERFLOW                     DA1
         DC    X'02'                    MINOR WORD                  DA1
DATEWRIT DC    C'DATE-WRITTEN'     DATE-WRITTEN                     DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'DECLARATIVES'     DECLARATIVES                     DA1
         DC    X'09'                    PROC DIV CLAUSE
FILECON  DC    C'FILE-CONTROL'     FILE-CONTROL                     DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
INOUT    DC    C'INPUT-OUTPUT'     INPJT-OUTPUT                     DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
INSTALL  DC    C'INSTALLATION'     INSTALLATION                     DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'LABEL-RETURN'     LABEL-RETURN
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
         DC    C'LINE-COUNTER'     LINE-COUNTER
         DC    X'08'                    ONLY LEGAL IN PROC DIV
MASTIND  DC    C'MASTER-INDEX'     MASTER-INDEX                     DA1
         DC    X'02'                    MINOR WORD                  DA1
         DC    C'PAGE-COUNTER'     PAGE-COUNTER
         DC    X'08'                    ONLY LEGAL IN PROC DIV
         DC    C'PRINT-SWITCH'     PRINT-SWITCH
         DC    X'08'                    ONLY LEGAL IN PROC DIV
SYNCHRON DC    C'SYNCHRONIZED'     SYNCHRONIZED                     DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
WRITVRFY DC    C'WRITE-VERIFY'     WRITE-VERIFY                     DA1
         DC    X'02'                    MINOR WORD                  DA1
*                                                                   DA1
*        LENGTH OF 13                                               DA1
*                                                                   DA1
COB13    EQU   *                                                    DA1
COMPUTAT DC    C'COMPUTATIONAL'    COMPUTATIONAL                    DA1
         DC    X'02'                    MINOR WORD                  DA1
CONFIGUR DC    C'CONFIGURATION'    CONFIGURATION                    DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'CORRESPONDING'    CORRESPONDING SAME AS CORR       DA1
         DC    X'08'                    ONLY LEGAL IN PROC DIVISION
DATECOMP DC    C'DATE-COMPILED'    DATE-COMPILED                    DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
DECPOINT DC    C'DECIMAL-POINT'    DECIMAL-POINT                    DA1
         DC    X'81'               RESERVED WORD AND KEYWORD
         DC    C'SEGMENT-LIMIT'    SEGMENT-LIMIT
         DC    X'01'                    BEGINNING OF CLAUSE
SPECIALN DC    C'SPECIAL-NAMES'    SPECIAL-NAMES                    DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
*                                                                   DA1
*        LENGTH OF 14                                               DA1
*                                                                   DA1
COB14    EQU   *                                                    DA1
IDENT    DC    C'IDENTIFICATION'   IDENTIFICATION                   DA1
         DC    X'05'               MARGIN A MAJOR RESERVED WORD
         DC    C'REORG-CRITERIA'   REORG-CRITERIA
         DC    X'02'                    MINOR WORD
         DC    C'SORT-CORE-SIZE'   SORT-CORE-SIZE
         DC    X'08'                    ONLY LEGAL IN PROC DIV
         DC    C'SORT-FILE-SIZE'   SORT-FILE-SIZE
         DC    X'08'                    ONLY LEGAL IN PROC DIV
         DC    C'SORT-MODE-SIZE'   SORT-MODE-SIZE
         DC    X'08'                    ONLY LEGAL IN PROC DIV
*                                                                   DA1
*        LENGTH OF 15                                               DA1
*                                                                   DA1
COB15    EQU   *                                                    DA1
COMPUT1  DC    C'COMPUTATIONAL-1'  COMPUTATIONAL-1                  DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
COMPUT2  DC    C'COMPUTATIONAL-2'  COMPUTATIONAL-2                  DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
COMPUT3  DC    C'COMPUTATIONAL-3'  COMPUTATIONAL-3                  DA1
         DC    X'01'                    BEGINNING OF CLAUSE         DA1
EXTSRCH  DC    C'EXTENDED-SEARCH'  EXTENDED-SEARCH                  DA1
         DC    X'02'                    MINOR WORD                  DA1
OBJECTCM DC    C'OBJECT-COMPUTER'  OBJECT-COMPUTER                  DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
         DC    C'RECORD-OVERFLOW'  RECORD-OVERFLOW
         DC    X'02'                    MINOR WORD
SOURCECM DC    C'SOURCE-COMPUTER'  SOURCE-COMPUTER                  DA1
         DC    X'85'               MARGIN-A RESWORD AND KEYWORD
WORKSTOR DC    C'WORKING-STORAGE'  WORKING-STORAGE                  DA1
         DC    X'85'               MARGIN A RESWORD AND KEYWORD
COBEND   DS    0C                  END OF TABLE                     DA1
*                                                                   DA1
CPERIOD  DC    C'.'                PERIOD
LEVEL1   DC    C'1'                CONSTANT OF 1                    DA1
*        TABLE FOR LOCATING ADDRESS OF PROPER LENGTH COBOL WORD     DA1
*                                                                   DA1
*        TO GET DISPLACEMENT IN THIS TABLE:   ((LENGTH - 2) * 2))   DA1
*                                                                   DA1
ADCOB    DS    0F                                                   DA1
         DC    AL2(COB2-COBOLWDS)  START OF 2 CHAR RESERVED WORDS   DA1
         DC    AL2(COB3-COBOLWDS)  START OF 3 CHAR RESERVED WORDS   DA1
         DC    AL2(COB4-COBOLWDS)  START OF 4 CHAR RESERVED WORDS   DA1
         DC    AL2(COB5-COBOLWDS)  START OF 5 CHAR RESERVED WORDS   DA1
         DC    AL2(COB6-COBOLWDS)  START OF 6 CHAR RESERVED WORDS   DA1
         DC    AL2(COB7-COBOLWDS)  START OF 7 CHAR RESERVED WORDS   DA1
         DC    AL2(COB8-COBOLWDS)  START OF 8 CHAR RESERVED WORDS   DA1
         DC    AL2(COB9-COBOLWDS)  START OF 9 CHAR RESERVED WORDS   DA1
         DC    AL2(COB10-COBOLWDS) START OF 10 CHAR RESERVED WORDS  DA1
         DC    AL2(COB11-COBOLWDS) START OF 11 CHAR RESERVED WORDS  DA1
         DC    AL2(COB12-COBOLWDS) START OF 12 CHAR RESERVED WORDS  DA1
         DC    AL2(COB13-COBOLWDS) START OF 13 CHAR RESERVED WORDS  DA1
         DC    AL2(COB14-COBOLWDS) START OF 14 CHAR RESERVED WORDS  DA1
         DC    AL2(COB15-COBOLWDS) START OF 15 CHAR RESERVED WORDS  DA1
         DC    AL2(COBEND-COBOLWDS) END OF TABLE OF RESERVED WORDS  DA1
*
         EJECT
TABLES   DS    0F
***********************************************************************
*      INPUT-RECORD WORK AREA FOR LISTING
PINTSEQ  DC    XL7'00'             INTERNAL SEQUENCE NUMBER
PBLANK   DC    X'40'               BLANK
PSTARS   DC    CL2' '              '**' FOR OUT OF SEQUENCE
PCARD    DC    5CL16' '            ACTUAL CARD IMAGE
***********************************************************************
*
***********************************************************************
*              MESSAGE E-TEXT AND PARAMETER WORK AREA
MSGDEF   DC    X'000600'           MSG CODE
MSGNUM   DC    X'0000'             MSG NUMBER
MSGGCN   DC    X'0000'             GEN SEQ NUMBER
MSGSP    DC    X'01'               SEVERITY - PHASE NUMBER 1
EPARNN   DC    X'0000'             E-TEXT PARAMETER
EPARAM   DC    X'0000'             -PARAMETER
         DS    CL120                    CONTINUED
***********************************************************************
*
***********************************************************************
*     INPUT-RECORD AREA FOR WRITE TO PHASE 1
PH1CARD  DS    CL77                COL 1 TO 77 OF CARD IMAGE
PH1ID    EQU   PH1CARD+74          COL 75-76 FOR 'CO' ID
PH1ISEQ  DC    X'000000'           COL 78 TO 80 HAS INTERNAL SEQNUM
***********************************************************************
         MEND
