         MACRO
&NAME    IEAQNU &TIMER,&MOD,&SER,&SVHI,&SVLO,&TRACER,&DSIM,&TSTRN, MTS0C
               &TIMESL,&M65MP,&SMF,&EMU,&RERP,&DDRSYS,&TSO,       20021C
               &CHANLOG                                           19E03
.*023630-023750,043170-043180,061638-061650,061793-061797,        21014
.*062370-062380,067959-067960,068295-068301,088370-088380,        21014
.*023630-023750,043170-043180,061638-0616500,061793-061797,       21014
.*248700-248900,265250-265350                                     21014
.*0200,000350-000520                                               SMF
.*0200,174000-180200                                               I251
.*002900,003020-003060                                            M4970
.*129440,130400                                                  A40746
.*066272,066314                                                   M0116
.*065800                                                          M0132
.*179300                                                          M1174
.*085300-085450,166153-166156                                     M0772
.*099650                                                         A36617
.*165306-165336                                                   21472
.*155300                                                          21472
.*039866-039867,081800-081920,082400                              M0581
.*081716-081728                                                  A52223
.*050400                                                         A46343
.*081660                                                         A53993
.*062397                                                         A53361
.*062392                                                          M4917
.*177900-178800,180800                                           A55639
         LCLC  &TAG
         LCLB  &MAINLNE,&JSTIME
         LCLA  &HILMT
         LCLA  &LOLMT
         LCLB  &QNOTMP,&QM65MP
&QM65MP  SETB  ('&M65MP' EQ '1'  OR  '&M65MP' EQ 'M65MP')
&QNOTMP  SETB  (NOT &QM65MP)
&HILMT   SETA  &SVHI*4
&LOLMT   SETA  &SVLO*4
         TITLE '             OPTION 4 NUCLEUS'
IEAQNU00 START 0
         SPACE 2
         TITLE '             COMMUNICATIONS VECTOR TABLE'
*...COMMUNICATION VECTOR TABLE- C.V.T...
CVTSECT  DSECT
         CVT
         AIF   (&TIMESL EQ 0).NOTS02                              M4970
*              TIME SLICE CONTROL ELEMENT                          MTS0
         IHBTSCE                                                   MTS0
NEXTTSCE EQU   16                                                  MTS0
.NOTS02  ANOP                                                      MTS0
         AIF   ('&TSO' NE '1').TSO                                20021
         IKJTSCVT
.TSO     ANOP                                                     20021
         TITLE '             LOW CORE LOCATIONS'
         IEAQFX &MOD,&SER,&M65MP,&CHANLOG                         19E03
IEAQNU00 CSECT
         TITLE '             MODULE EQUATES'
* MODULE USING STATEMENTS.
         USING IEAQFX00,0                                          0539
         SPACE 2
*   GENERAL NAMES FOR REGISTERS, COUNTS, BCR MASKS, ETC.
         SPACE 1
C0       EQU   0                       .0
C1       EQU   1                       .1
C2       EQU   2                       .2
C3       EQU   3                       .3
C4       EQU   4                       .4
C5       EQU   5                       .5
C6       EQU   6                       .6
C7       EQU   7                       .7
C8       EQU   8                       .8
C9       EQU   9                       .9
CA       EQU   10                      .10
CB       EQU   11                      .11
CC       EQU   12                      .12
CD       EQU   13                      .13
CE       EQU   14                      .14
CF       EQU   15                      .15
C20      EQU   20                      .20
C48      EQU   48                      .48
C56      EQU   56                      .56
C60      EQU   60                      .60
C64      EQU   64                       .64
C240     EQU   240                     .X'F0'
C255     EQU   255                     .X'FF'
         SPACE 2
*...TASK CONTROL BLOCK- T.C.B...
         SPACE
TCBFRS0  EQU   0             .FLOATING POINT REG 0.
TCBFRS2  EQU   8             .FLOATING POINT REG 2.
TCBFRS4  EQU   16            .FLOATING POINT REG 4.
TCBFRS6  EQU   24            .FLOATING POINT REG 6.
TCBRBP   EQU   0             .ADDRESS OF CURRENT RB.
TCBPIE   EQU   4             .ADDRESS OF P.I.E.
TCBTRN   EQU   20            .TESTRAN FLD-(HI.BYTE USED BY 94 EMUL)EM94
TCBPKF   EQU   28            .PROTECT KEY FOR TASK.
TCBFLGS  EQU   29            .TCB FLAG BYTES.
TCBWAIT  EQU   32            .NON-DISPATCHABLE BITS.
TCBDSP   EQU   35            .DISPATCHING PRIORITY.
TCBGRS   EQU   48            .REG SAVE AREA.
TCBTCB   EQU   116           .TCB LINK FIELD.
TCBTME   EQU   120           .ADDR OF TIMER ELEMENT.
TCBJSTCB EQU   124           .JOB STEP TCB.
TCBNTC   EQU   128                     .SISTER TASK.              20021
TCBOTC   EQU   132           .ORIGIN TCB.
TCBLTC   EQU   136                     .LOWER THAN CURRENT.        MTS0
TCBTSFLG EQU   148                                                20021
TCBATT   EQU   X'20'         .ATTENTION EXITS SHOULD NOT BE SCH.  20021
         AIF   (&SMF NE 1).NSMFEXA                                  SMF
TCBTCT   EQU   164           .TCT ADDRESS                           SMF
.NSMFEXA ANOP                                                       SMF
         SPACE 2
*...TCB FLAGS...
         SPACE
         AIF   (&TIMESL EQ 0).NOTS15                               MTS0
TCBFTS   EQU   X'01'         .TEST FOR T/S TASK                    MTS0
*                                       TASK.                      MTS0
.NOTS15  ANOP                                                      MTS0
TCBFSIRB EQU   X'20'         .TCB SIRB MASK.
TCBFX    EQU   X'01'         .TCB IRB SUPPRESSION MASK.
TCBFRO   EQU   X'10'         .TCB ROLLOUT MASK.
TCBFCD1  EQU   X'02'         .TCB NO CORE MASK.
TCBFSMC  EQU   X'10'         .SYS MUST COMPLETE FLAG.
TCBFJMC  EQU   X'08'         .STEP MUST COMPLETE FLAG.
         SPACE 3
*...CDE DISPLACEMENTS...                                          19017
         SPACE
CDENEXT  EQU   0                   .CHAIN PTR-NEXT CDE.           19017
CDENAM2  EQU   12                  .MODULE NAME-LAST 4 CHAR.      19017
CDEEPNT  EQU   17                  .MODULE ENTRY POINT ADDR.      19017
         SPACE 3
*...REQUEST BLOCK DISPLACEMENTS...
         SPACE
RBEXRTNM EQU   0             .ERROR RTN NAME
RBSVADDR EQU   0             .ADDR OF SAVE AREA.
RBNAME   EQU   0             .RB NAME.
RBSIZE   EQU   8             .RB SIZE FIELD (DOUBLE WORDS).
RBSTAB   EQU   10            .STATUS ATTRIBUTE BITS.
RBSTAB1  EQU   11             .2ND BYTE-STATUS ATTRIBUTE BITS.    20021
RBATTN   EQU   X'20'         .INDICATES ATTENTION EXIT ROUTINE.   20021
RBEP     EQU   12            .ENTRY POINT OF ASYNCH. RTNS.
RBOPSW   EQU   16            .OLD PSW SAVED AT INTERRUPT.
RBIQUE   EQU   24            .QUEUE FIELD FOR IQE'S AND RQE'S.
RBWCF    EQU   28            .WAIT COUNT
RBLINK   EQU   28            .RB LINK FIELD.
RBGRSAVE EQU   32            .REG SAVE AREA.
         SPACE 2
*...RB FLAGS...
         SPACE
RBFACTV  EQU   X'40'         .RB ACTIVE MASK.
         SPACE 3
*...PIE DISPLACEMENTS...
         SPACE
PIEPICA  EQU   0                  .PICA ADDR IN PIE.
PIEPSW   EQU   4                  .PSW IN PIE.
PIEREG1  EQU   24                  .REGISTER 1 IN PIE SAVE AREA    9570
         SPACE 3
*...TIMER QUEUE ELEMENT DISPLACEMENTS...
         SPACE
TQEFLGS  EQU   0                  .TQE FLAG BYTE.
TQEVAL   EQU   12                       .TQE LENGTH FIELD.         MTS0
TQESAV   EQU   20                           .JST TIMER SAVE AREA.  MTS0
         SPACE 2
*...TIMER QUEUE ELEMTNT FLAG BITS (TQEFLGS)...
TQEOFFQ  EQU   X'80'                   .1 IF TQE IS OFF-QUEUE.
         SPACE 2
* IQE EQUATES
IQELNK   EQU   0                       .4 BYTE LINK FIELD.
IQEPARAM EQU   4                       .4 BYTE PARAMETER.
IQEIRB   EQU   8                       .4 BYTE IRB ADDR.
IQETCB   EQU   12                      .4 BYTE TCB ADDR.
         SPACE
* RQE EQUATES
RQELNK   EQU   0                       .2 BYTE LINK FIELD.
RQEUCB   EQU   2                       .2 BYTE UCB ADDR.
RQEDEB   EQU   8                       .4 BYTE DEB ADDR.
RQETCB   EQU   12                      .4 BYTE TCB ADDR.
         SPACE
* DEB EQUATES
DEBTCBAD EQU   0                       .TCB ADDR IN DEB.           045
DEBIRB   EQU   8                       .IRB ADDR IN DEB.
         SPACE
* UCB EQUATES
UCBTAB   EQU   8                       .ERROR CODE.
         AIF   (&SMF NE 1).NSMFEXC                                  SMF
         SPACE 3                                                    SMF
*...TIMING CONTROL TABLE DISPLACEMENTS- TCT...                      SMF
         SPACE 1                                                    SMF
TCTUCBP  EQU   0             .DISPLACEMENT TO UCB ADDRESS           SMF
TCTDCBTD EQU   0             .DISP TO DD ENTRY DISPLACEMENT         SMF
TCTSCTR  EQU   2             .DISPLACEMENT TO NUMBER OF UCB'S       SMF
TCTIOTSD EQU   2             .DISPLACEMENT TO SLOT                  SMF
TCTSW    EQU   3             .TCT OPTION SWITCHES                   SMF
TCTDCTR  EQU   4             .DISPLACEMENT TO EXCP COUNTER          SMF
TCTCOMIO EQU   8             .COMMON AREA FOR I/O TABLE             SMF
TCTIOTBL EQU   12            .I/O TABLE ADDRESS                     SMF
         SPACE 2                                                    SMF
*...TCT FLAGS...                                                    SMF
         SPACE 2                                                    SMF
NOCOUNT  EQU   X'40'         .EXCP COUNT/NON-COUNT INDICATOR        SMF
CSVRB    EQU   X'C0'         .SVRB TEST MASK                        SMF
         SPACE 3                                                    SMF
*...DCB DISPLACEMENTS...                                            SMF
         SPACE 1                                                    SMF
DCBTIOT  EQU   40            .DD ENTRY OFFSET                       SMF
DCBOFLGS EQU   48            .OPEN/CLOSE FLAGS                      SMF
         SPACE 2                                                    SMF
*...DCB FLAGS...                                                    SMF
         SPACE 1                                                    SMF
OB       EQU   X'11'               .DCB OPENED/BUSY FLAGS           SMF
.NSMFEXC ANOP                                                       SMF
         TITLE '             OPTION 4 NUCLEUS REGISTERS'
         SPACE
* EXTERNAL FLIH.
XXRET    EQU   2
XXBASE   EQU   10
*              14            .EX FLIH BASE REG.
XXTCB    EQU   15
XXRB     EQU   15
        AIF   (&SMF NE 1).NOSMF1                                   SMF
EXFLRET  EQU   11             .LINK REGISTER                      M3335
.NOSMF1  ANOP                                                      SMF
         SPACE 2
* I/O FLIH
XIOSBASE EQU   5
XIOS     EQU   6
XBS      EQU   10
XA       EQU   14
XB       EQU   15            .MUST BE XA+1
XIOTCB   EQU   14
XIORB    EQU   13
        AIF   (&SMF NE 1).NOSMF11                                  SMF
IOFLRET  EQU   11             .LINK REGISTER                      M3335
         SPACE 2                                                    SMF
* SMF SYS WAIT TIME COLLECTION                                      SMF
SYSWBASE EQU   10             .BASE REGISTER                        SMF
CURRENT  EQU   4              .'CURRENT' TCB                        SMF
SYSWTCB  EQU   5              .ADDR SYS WAIT TCB                    SMF
INTIMVAL EQU   6              .VALUE IN TIMER                       SMF
TIMESAVE EQU   7              .SAVE FIELD                           SMF
TIMERACC EQU   8              .ACC SYS WAIT TIME FIELD              SMF
FLIHRET  EQU   11             .RETURN REGISTER                    M3335
INTTIME  EQU   80             .TIMER LOCATION                       SMF
.NOSMF11 ANOP                                                      SMF
         SPACE 2
* PI FLIH
XNPIPIE  EQU   1
XNPI1    EQU   10
*              11            .BASE REG.
* CC     EQU   12                      .REG 12
* CD     EQU   13                      .REG 13
XNPIX    EQU   14
         SPACE 2
* MONITOR CALL INTERFACE.                                         21014
IEACVT   EQU   3              .CVT ADDR REG.                      21014
IEARE    EQU   14             .RETURN REG.                        21014
IEARF    EQU   15             .LINK REG.                          21014
         SPACE 2
* STAGE 2 OF EXIT EFFECTOR.
X2QE     EQU   1             .QE ADDR. REG.
X2WK     EQU   10            .WORK REG.
X2BASE   EQU   11            .BASE REG.
*              14            .RETURN REG.
         SPACE 2
* TASK SWITCH
XPTCB    EQU   10            .INPUT TCB.
XN       EQU   11            .WORK REG.
*              12            .BASE REG.
XRET     EQU   14            .RETURN REG.
         SPACE 2
* DISPATCHER
XDSTQE   EQU   1             .TQE ADDR.
XDSLNK   EQU   2
XBR      EQU   2             .JST- LINKAGE REG.
X2       EQU   2
        AIF   (&SMF NE 1).NOSMF8                                   SMF
         AIF   (&QNOTMP).NTMP02                                   M4774
TIMERVAL EQU   11             .VALUE IN INTERVAL TIMER            19018
         AGO   .NOSMF8                                            M4774
.NTMP02  ANOP                                                     M4774
TIMERVAL EQU   10             .VALUE IN INTERVAL TIMER            M4774
.NOSMF8  ANOP                                                      SMF
         AIF   (&TIMESL EQ 0).NOTS01                               MTS0
TSREGSAV EQU   0                                                   MTS0
TSTQEREG EQU   6                        TQE ADDR REGISTER          MTS0
TSTASK   EQU   10                                                  MTS0
TSREG    EQU   7                                                   MTS0
.NOTS01  ANOP                                                      MTS0
XSEARCH  EQU   8             .JST- SEARCH START.
XTQESAVE EQU   9                       .SAVE ADDRESS OF TQE.       MTS0
XDSNEW   EQU   10            .'NEW' REG.
XDSOLD   EQU   XDSNEW+1      .'OLD' REG.
XDSRB    EQU   12
R15      EQU   15            EP TO TIMER ENQ/DEQ RTN
XNDBITS  EQU   12            .TEST FOR NON-DISPATCHABLE BITS.
XSBR     EQU   12            .JST- LINKAGE REG.
XJSTCB   EQU   13            .JST
XDSWKTCB EQU   13
XDSFP    EQU   13                 FLOATING POINT REGISTER DISP.
         AIF   ('&EMU' NE 'EMUY').NOEMEQU                          EM94
EMBIT    EQU   X'10' .        MASK TO TEST EMULATOR TCB.BIT        EM94
EMMCW    EQU   56                . EMMCW DISPL IN MSB             19019
MSBPTR   EQU   224               . MSB PTR DISPL IN CVT           19019
R9MSB    EQU   9 .            MSB REG                              EM94
.NOEMEQU ANOP                                                      EM94
         SPACE 2
* STAGE 3 OF EXIT EFFECTOR.
*              0             .IQE ADDR.
*              1             .PARAM VALUE.
X3PREV   EQU   2
X3CURR   EQU   3
X3DEB    EQU   4
X3IRBIQE EQU   6
X3UCB    EQU   6
X3WR     EQU   6
X3IQE    EQU   7
X3IRB    EQU   8
XSIRB    EQU   8
X3RET    EQU   9
X3TCB    EQU   10
X3WKX    EQU   13
X3WK15   EQU   15
         AIF   ('&TSO' NE '1').NOTSO0                             20021
*                                                                 20021
* TIME SHARING OPTION (TSO) EQUATES FOR ATTENTION EXIT HANDLING   20021
*                                                                 20021
T1       EQU   1        .GEN.PURPOSE REGS.USED IN STAGE 3-TSO-    20021
.NOTSO0  ANOP                                                     20021
         SPACE 2
* SVC FLIH
XERRNO   EQU   1
SVCPOST  EQU   X'02' .                 SVC NUMBER FOR POST        M0581
SVCEXCP  EQU   X'00' .                 SVC NUMBER FOR EXCP        M0581
XSVCEP   EQU   6
XSVCNO   EQU   6
XTBORG   EQU   7
XTRX     EQU   7
XHIIBM   EQU   8
XTREP    EQU   12
XABTERM  EQU   13
*              14                 .RETURN REG FOR ABTERM.
*              15                 .BASE REG FOR PART OF RTN.
         SPACE 2
         AIF   (&SMF NE 1).NSMFEXD                                  SMF
* EXCP COUNTER.                                                     SMF
R0       EQU   0                                                  19028
ADDRIQE  EQU   1                        .IQE ADDR                 19028
IRBADDR  EQU   1                                                  19028
XSQPTR   EQU   1                                                  19028
LIMOFF   EQU   2                      .OUTLM OFFSET SAVEREG       19028
XSCMMTBL EQU   3                                                  19028
TCBSAVE  EQU   4                      .TCB SAVEREG                19028
XTCBPASS EQU   0                  .PASSED TCB POINTER               SMF
XDCBPAS  EQU   4                   .PASSED DCB POINTER              SMF
XUCBPTR  EQU   7                  .UCB POINTER                      SMF
GMBRNCH  EQU   5                        .GETMAIN  BRANCH          19028
XSEXTEFT EQU   5                                                  19028
XS1      EQU   6                                                  19028
DCBSAVE  EQU   7                      .DCB SAVEREG                19028
IQEADDR  EQU   8                                                  19028
SMCAADR  EQU   9                        .SMCA ADDRESS             M3261
XDCBPTR  EQU   10                  .REAL PP DCB POINTER             SMF
XTIOTD   EQU   10                 .CONTAINS TIOT DD ENTRY DISP.     SMF
XTCBPTR  EQU   11                 .TCB POINTER                      SMF
XTCTPTR  EQU   11                 .TCT POINTER                      SMF
XRWRK    EQU   12                 .WORK REGISTER                    SMF
XTCTSRC  EQU   13                 .LOOK UP TABLE SEARCH POINTER     SMF
XSYSTRTN EQU   10                       .ASYSNCH RTN              19028
XRWRK2   EQU   13                       .WORK REGISTER            19028
XRTN     EQU   14                 .RETURN REGISTER                  SMF
R14      EQU   14                                                 19028
XRWRK4   EQU   14                       .WORK REGISTER            19028
BASESMF  EQU   15                  .EXCP COUNTER ROUTINE BASE     M3261
C96      EQU   96                       .IQE ADDR OFFSET IN IRB   19028
IQEDCB   EQU   16                       .4 BYTE DCB ADDR          19028
IQEOUTLM EQU   20                       .4 BYTE OUTLIM OFFSET    19028
XBASE    EQU   15                 .EXCP COUNTER ROUTINE BASE        SMF
VTCTINIT EQU   4                        .INITIATOR TCB ADDR IN TCT19028
IRBLNGTH EQU   144                      .IRB/IQE LENGTH           19028
STABSIZE EQU   8                        .SIZE(STAB OFSET IN IRB)  19028
ENTRY    EQU   12                       .ENTRY POINT IN IRB       19028
EXITS    EQU   X'20'                    .MASKS FOR SMF EXITS      M3261
DEC56    EQU   56                      DEC OFFSET OF BIN 0       A30586
CELLCTR  EQU   3                       BIN NO COUNTER REG        A30586
CNT11    EQU   11                      INITIAL COUNTER VALUE      20472
DEC16    EQU   16                      DEC OFFSET OF EACH BIN    A30586
         SPACE 2                                                    SMF
.NSMFEXD ANOP                                                       SMF
* SVC TYPE 1 EXIT
X1TCB    EQU   2
*              3
*XRB     EQU   5
*              14
         SPACE 2
* FETCH SEQUENCE
X0       EQU   0
X1       EQU   1
XFWK     EQU   7
XFRETN   EQU   8
XFEP     EQU   9
REGX14   EQU   14                                                 19022
REGX15   EQU   15                                                 19022
ONE      EQU   1                                                  19022
ZERO     EQU   0                                                  19022
FIVE     EQU   5                                                  19022
RERPNM   EQU   7                       . ERP NAME LAST 4 CHAR    M0044
         SPACE 2
         AIF   (&RERP EQ 0).RERP1                                 19017
*                                                                M0044
RERPSR   EQU   8                   .SRCH REG - RERP CDE CHAIN.    19017
.RERP1   ANOP                                                     19017
* MODULE REGISTERS
XTRBASE  EQU   10
XTRET    EQU   11
XCVT     EQU   3             .CVT ADDRESS
XTCB     EQU   4             .TCB ADDRESS OF CURRENT TASK.
XRB      EQU   5             .RB ADDRESS OF CURRENT TASK.
         SPACE 2
*...SVC EQUATES...
         SPACE
EXIT     EQU   3                  .SVC 3...EXIT SERVICE RTN.
         AIF   (&QNOTMP).M65MP00
         TITLE 'ADDITIONAL EQUATES FOR MODEL-65 MULTIPROCESSING'   MP65
TCBABTRM EQU   X'20'                   .ABTERM FLAG                MP65
*...FAIL-SOFT EXTERNAL FLIH FLAGS TO EXIT FROM MALFUNCTION ALERT   MP65
FSIOFLAG EQU   X'01'         .SPINNING ON LOCK IN I/O FLIH.        MP65
FSEXFLAG EQU   X'02'         .SPINNING ON LOCK IN EXTRNAL FLIH.    MP65
FSPIFLAG EQU   X'04'         .SPINNING ON LOCK IN PROGRAM CHECK FL MP65
* EXTERNAL FLIH                                                    MP65
XEXPREF2 EQU   1                       .PREFIX FOR OTH CPU'S PSA.  MP65
XMPCVT   EQU   8                       .MPCVT BASE REG.            MP65
* IO FLIH                                                          MP65
* XMPCVT EQU   8                                                   MP65
* PI FLIH (INCLUDING SSM PROCESSING)                               MP65
XPIRHPSW EQU   2                       .RHPSW TO REEX SSM OR EX.   MP65
XPILOC   EQU   4                       .LOC OF SSM OR EX INSTR     MP65
XPILOC2  EQU   5                       .LOC OF MASK OR SSM INSTR   MP65
XPIR2    EQU   6                       .EXEC-TIME CONT OF R2 REG.  MP65
* XMPCVT EQU   8                       .BASE REG FOR MPCVT.        MP65
XPITCB   EQU   9                       .CURR TCB.                  MP65
XPIRB    EQU   10                      .CURR RB.                   MP65
XPIAFFLK EQU   14                      .INIT AFFLK FOR SSM TRACE.  MP65
* CF     EQU   15                                                  MP65
* TASK-SWITCH AND RELATIVE-PRIORITY SUBROUTINES                    MP65
XRP1     EQU   1                       .TCB1 FOR RELPRIOR          MP65
XRP2     EQU   XRP1+1                  .TCB2 FOR RELPRIOR          MP65
XRP3     EQU   XRP1+2                  .T3B3 FOR RELPRIOR (VAR TCB MP65
XRP4     EQU   XRP1+3                  .RET REG FOR RELPRIOR       MP65
XRP5     EQU   XRP1+4                  .(TSKSW) REG FOR PREFIX2    MP65
* DISPATCHER                                                       MP65
XDSPREF2 EQU   5                       .PREFIX FOR OTHER CPU'S PSA MP65
XDSNEW2  EQU   8                       .'NEW' FOR OTHER CPU (NEW2) MP65
XDSOLD2  EQU   XDSNEW2+1               .'OLD' FOR OTHER CPU (OLD2) MP65
* XMPCVT EQU   8                                                   MP65
* EXIT EFFECTOR STAGE 3                                            MP65
XAEQBASE EQU   5                       .BASE FOR AEQ POINTERS      MP65
X3OLD2   EQU   11                      .HOLD OLD2 FOR CHECKING     MP65
* TYPE 1 SVC EXIT                                                  MP65
* XDSPREF2 EQU 5                                                   MP65
* XMPCVT EQU   8                                                   MP65
* SVC FLIH                                                         MP65
* XMPCVT EQU   8                                                   MP65
* EXTERNAL FLIH SHOULDER TAP MASK EQUATES                          MP65
* (BITS NOT CONSIDERED IN IEAQNU REPRESENTED BY COMMENT CARDS)     MP65
         SPACE 1                                                   MP65
* BYTE 0 - PENDING FLAG, HALT I/O, ETC.                            MP65
WRDPEND  EQU   X'80'                                               MP65
* WRDWTBEL EQU X'20'                                               MP65
* WRDWTCCH EQU X'10'                                               MP65
* WRDWTHIO EQU X'01'                                               MP65
* BYTE 1 - (NOT NOW USED)                                          MP65
* BYTE 2 - FAIL-SOFT (QUIESCE AND VARY-OFF)                        MP65
WRDQUIES EQU   X'80'                                               MP65
WRDDSTOP EQU   X'40'                                               MP65
* BYTE 3 - I/O COMPLETION (CHANNELS 0-6)                           MP65
* (EXFLIH CONSIDERS ONLY WHOLE BYTE)                               MP65
* WRDCHAN0 EQU X'80'                                               MP65
* WRDCHAN1 EQU X'40'                                               MP65
* WRDCHAN2 EQU X'20'                                               MP65
* WRDCHAN3 EQU X'10'                                               MP65
* WRDCHAN4 EQU X'08'                                               MP65
* WRDCHAN5 EQU X'04'                                               MP65
* WRDCHAN6 EQU X'02'                                               MP65
         SPACE 2                                                   MP65
* MISC. IMMEDIATE-FIELD EQUATES                                    MP65
SSMCODE  EQU   X'12'                   .VAL OF PIOPSW+3 FOR SSM.   MP65
SSM      EQU   X'80'                   .OPCODE FOR SSM.            MP65
WRDSHTAP EQU   X'10'                   .WRD MASK FOR SHOLDTAP.     MP65
.M65MP00 ANOP
ENABMASK EQU   X'FF' .                 .ALL BITS 'ENABLED'        M0581
DISABMSK EQU   X'00' .                 .ALL BITS 'DISABLED'       M0581
         AIF   (&QNOTMP).M65MPCV
         MPCVT
IEAQNU00 CSECT                                                     MP65
         USING IEAMPCVT,XMPCVT                                     MP65
.M65MPCV ANOP
         TITLE '             OPTION 4...EXTERNAL FLIH'
         SPACE
*                            EXTERNAL FLIH
         SPACE
         ENTRY IEAQEX00
         AIF   (&QNOTMP).M65MP01
         ENTRY IEAQEXIO                                            65MP
         SPACE 1                                                   65MP
.M65MP01 ANOP
IEAQEX00 DS    0H
         STM   14,15,IEASAV            .SAVE 2 REGS
         BALR  14,0
         USING *,14
         AIF   (&QNOTMP).M65MP02
* FIND IF INTERRUPT OCCURRED IN A FLIH SPIN                        MP65
         TM    FLRETFLG,FSIOFLAG+FSEXFLAG+FSPIFLAG                 MP65
         BZ    EXNORMAL                .B IF NO.                   MP65
         TM    FLRETFLG,FSEXFLAG       .TEST FOR NESTED EXT INT.   MP65
         BZ    EXINFLIH                .B IF NO.                   MP65
         OC    EXOPSW+3(C1),RNEXCODE   .OTHWSE, ACCUMULATE         MP65
         B     EXSVCOND                . INT-CODE BITS.            MP65
EXINFLIH STM   C0,CD,RNSAVGPR          .SAVE OTHER FLIH'S REGS.    MP65
         MVC   RNSAVGPR+C56(C8),IEASAV .INCLD REGS TEMP SAVD BY EX MP65
         MVC   RNSAVPSW(C8),EXOPSW     .SAVE RETN ADDR TO OTH FLIH MP65
EXSVCOND MVC   RNEXCODE(C1),EXOPSW+3   .STORE INT CODE IN PSA.     MP65
         TM    FLRETFLG,FSIOFLAG+FSPIFLAG .INT IN FLIH SPIN.       MP65
         BZ    EXFLIH1                 .B IF NO.                   MP65
         OI    FLRETFLG,FSEXFLAG       .FLAG NESTED EXT INT.       MP65
         B     EXFSREST                . AND RESUME INT'D FLIH.    MP65
EXNORMAL MVC   RNEXCODE(C1),EXOPSW+3   .STORE INT CODE IN PSA.     MP65
.M65MP02 ANOP
         L     XXTCB,IEATCBP+4         .REF CURR TCB.
         STM   0,13,TCBGRS(XXTCB)      .SAVE REGS.
         AIF   (&QM65MP).NOSMF3                                   M3335
        AIF   (&SMF NE 1).NOSMF3                                   SMF
         BAL   EXFLRET,IEAQWAIT   .GO TO SMF SYS WAIT TIME RTN      SMF
.NOSMF3  ANOP                                                      SMF
         MVC   TCBGRS+56(8,XXTCB),IEASAV
         L     XXRB,TCBRBP(0,XXTCB)    .REF CURR RB.
         MVC   RBOPSW(8,XXRB),EXOPSW   .SAVE EX OPSW.
         AIF   (&QNOTMP).M65MP03
EXFLIH1  L     XMPCVT,MPCVTPTR         .BASE REG FOR M65MP CVT     MP65
EXFLIHTS TS    CVTAFFLK+1              .TEST LOCK BYTE             MP65
         BZ    EXFLIHLK                .IF OFF, LOCK AND BRANCH    MP65
         CLC   CVTAFFLK(C1),CPUID      .OTHWSE, CHECK CPU AFFIN    MP65
         BE    EXFLGCLR                .BRANCH IF THIS CPU         MP65
         OI    FLRETFLG,FSEXFLAG       .INDICATE SPINNING IN EX FL MP65
         CNOP  C4,C8                   .INSURE PSW DBL-WD BOUND.   MP65
         LPSW  *+4                     .ENABLE THIS CPU FOR EXTERN MP65
         DC    X'01040000'             .PSW ENABLED FOR EXTERNAL I MP65
         DC    A(*+4)                  .ADDR OF ENABLED INSTR      MP65
         CNOP  C4,C8                   .INSURE PSW DBL-WD BOUND.   MP65
         LPSW  *+4                     .DISABLE EXTERN AND REPEAT  MP65
         DC    X'00040000'             .PSW DISABLED EXCEPT MACH C MP65
         DC    A(EXFLIHTS)             .ADDR OF EX SPIN ON LOCK    MP65
EXFLIHLK MVC   CVTAFFLK(C1),CPUID      .SET AFFINITY BYTE          MP65
EXFLGCLR NI    FLRETFLG,C255-FSEXFLAG  .DELETE EXFLIH-SPIN FLAG.   MP65
         AIF   (&SMF NE 1).M65MP03                                M3335
         BAL   EXFLRET,IEAQWAIT    .GO TO SMF SYS WAIT TIME RTN   M3335
.M65MP03 ANOP
         AIF   (T'&TRACER EQ 'O').GTF01                           21014
* TRACE INTERFACE.
         AIF   (&QNOTMP).M65MP04
         ENTRY EXTRACE                                             TRMP
EXTRACE  NOP   EXTRACE9      .B IF EXFLIH TRACE SUPPRESSED.        TRMP
         L     CF,IEASAV+4             .RESTORE REG FOR TRACE.     TRMP
.M65MP04 ANOP
.GTF01   ANOP                                                     21014
*  ISSUE HOOK FOR EXTERNAL TRACE                                  21014
         HOOK  EID=IHLMEXT    .ISSUE HOOK FOR EXTERNAL TRACE      21014
         AIF   (T'&TRACER EQ 'O').NOTR0                           21014
         L     XTRBASE,ATREX
         BALR  XTRET,XTRBASE
         AIF   (&QNOTMP).MPEXTR9
EXTRACE9 DS    0H                      .(LABEL FOR TRACE BYPASS)   TRMP
.MPEXTR9 ANOP
* END TRACE INTERFACE.
.NOTR0   ANOP
         SPACE
* TEST FOR KEY INTERRUPTS.
         TM    EXOPSW+3,X'40'          .TEST FOR KEY.
         BZ    *+10                    .BR IF NOT.
         L     XXBASE,ASLKEY           .GET SLIH ADDR.
         BALR  XXRET,XXBASE            .TO KEY SLIH.
         BALR  14,0
         USING *,14
         SPACE
* TEST FOR TIMER INTERRUPTS.
         TM    EXOPSW+3,X'80'          .TEST FOR TIMER.
         AIF   (&QM65MP).NOTMP00
         BZ    EXTIMER9                .B IF NOT.
.NOTMP00 ANOP
         AIF   (&QNOTMP).M65MP05
         BZ    EXTIMER9                .B IF NOT                   MP65
         NC    PREFTMRA(C4),PREFTMRA   .Q WHICH TIMER (CPU)        MP65
         BNZ   EXTIMER9                .NO SLIH IF BACKUP-TIMER EX MP65
.M65MP05 ANOP
         L     XXBASE,ASLTIMER         .GET SLIH ADDR.
         BALR  XXRET,XXBASE            .TO TIMER SLIH.
EXTIMER9 DS    0H                      .(LABEL FOE TIMER-SLIH BYP)
         BALR  14,0
         USING *,14
        AIF   (&SMF NE 1).NOSMF30                                  SMF
* HANDLES THE SITUATION WHERE THE SYSTEM WAIT TCB WAS CURRENT TCB,  SMF
* A TIME EXPIRATION OCCURRED, AND NO TASK SWITCH OCCURS             SMF
         AIF   (&QNOTMP).NMPSMF1                                  M3335
         L     INTIMVAL,PREFTMRA        LOAD PREFIX TIMER DISP    M3335
         L     INTIMVAL,TIMER-IEAQFX00(INTIMVAL)                  M3335
         AGO   .MPSMF01                                           M3335
.NMPSMF1 ANOP                                                     M3335
         L     INTIMVAL,INTTIME    .READ OUT INTERVAL TIMER         SMF
.MPSMF01 ANOP                                                     M3335
         ST    INTIMVAL,SYSWSAVE   .STORE VALUE IN INT TIMER INTO   SMF
*                                  .SYS WAIT START FIELD            SMF
.NOSMF30 ANOP                                                       SMF
         SPACE
         AIF   (&QM65MP).NOTMP01
         B     IEA0DS                  .TO DISPATCHER.
         SPACE 2
.NOTMP01 ANOP
         AIF   (&QNOTMP).M65MP06
* ACCEPT SHOULDER TAPS, IF ANY                                     MP65
         L     XEXPREF2,PREFIX2        .PREFIX FOR OTHER CPU'S PSA MP65
         NI    STMASK-IEAQFX00(XEXPREF2),C255-WRDPEND              MP65
         SR    CF,CF                                               MP65
         C     CF,STMASK-IEAQFX00(XEXPREF2)                        MP65
         BE    EXDISP        .B IF DISPATCHER SHOULDER-TAP ONLY    MP65
         TM    STMASK+3-IEAQFX00(XEXPREF2),C255                    MP65
         BZ    EXFSCOND                .B IF NOT                   MP65
         OI    IEA0IO01+1,C240         .SET NESTED-IO FLAG         MP65
         L     CF,AECISHTP             .IOS SHOULDER-TAP HANDLER   MP65
         BR    CF                                                  MP65
IEAQEXIO L     XEXPREF2,PREFIX2        .(RESTORE)                  MP65
         NI    IEA0IO01+1,CF           .RESET NESTED-IO FLAG       MP65
EXFSCOND BALR  CE,C0                   .TEST FOR QUIESCE SHTAP.    MP65
         USING *,CE                                                MP65
         TM    STMASK+2-IEAQFX00(XEXPREF2),C255                    MP65
         BZ    EXDISP        .B IF NO FAIL-SOFT SHOULDER TAPS      MP65
         TM    STMASK+2-IEAQFX00(XEXPREF2),WRDQUIES                MP65
         BZ    EXVRYOF                 .B IF NOT                   MP65
         NI    STMASK+2-IEAQFX00(XEXPREF2),C255-WRDQUIES           MP65
         L     CF,AEEMPS00                                         MP65
         BALR  CE,CF                   .'QUIENT' RETURNS WHEN REAW MP65
         L     XEXPREF2,PREFIX2        .(RESTORE)                  MP65
EXVRYOF  BALR  CE,C0                   .TEST FOR VARY-CPU OFF.     MP65
         USING *,CE                                                MP65
         TM    STMASK+2-IEAQFX00(XEXPREF2),WRDDSTOP                MP65
         BZ    EXDISP                  .B IF NO VARY-OFF SHTAP.    MP65
         NI    STMASK+2-IEAQFX00(XEXPREF2),C255-WRDDSTOP           MP65
         L     CF,AVARYOFF             .LOAD EP ADDR OF LOCKSTOP   MP65
         BR    CF                      . AND ENTER.                MP65
EXDISP   BALR  CE,C0                   .CHECK FOR INT'D FLIH SPIN. MP65
         USING *,CE                                                MP65
         NI    RNEXCODE,C0             .CLEAR ACCUM INT CODE.      MP65
         TM    FLRETFLG,C255           .Q INT IN A FLIH SPIN.      MP65
         BZ    IEA0DS                  .B IF NO.                   MP65
EXFSREST LM    C0,CF,RNSAVGPR          .RESTORE REGS AND           MP65
         LPSW  RNSAVPSW                .RETN TO FLIH WHICH GOT EX  MP65
         TITLE '     SHOULDER-TAPPING SUBROUTINE (SHOLDTAP)     '  MP65
         SPACE 2                                                   MP65
*                   SHOULDER-TAPPING SUBROUTINE (SHOLDTAP)         MP65
         SPACE 2                                                   MP65
         ENTRY SHOLDTAP                                            MP65
SHOLDTAP BALR  CF,C0                                               MP65
         USING *,CF                                                MP65
         TM    STMASK,WRDPEND          .IF PREV SHTAP PENDING,     MP65
         BCR   C1,CE                   . RETURN                    MP65
         OI    STMASK,WRDPEND          .OTHWSE, SET PENDING FLAG,  MP65
         WRD   ENABL,WRDSHTAP         .ISSUE SHOULDER TAP          MP65
         BR    CE                      . AND RETURN                MP65
         DROP  CF                                                  MP65
         SPACE
ENABL    DC    X'FF'
.M65MP06 ANOP
         TITLE '    CONSTANTS USED BY EXTERNAL FLIH'
         EXTRN IEEBC1PE,IEA0TI00
ASLKEY   DC    A(IEEBC1PE)             .CONSOLE-SWITCH ROUTINE
ASLTIMER DC    A(IEA0TI00)             .TIMER SLIH.
         AIF   (T'&TRACER EQ 'O').TREXCON
         EXTRN TREX
ATREX    DC    A(TREX)                 .TRACE EP FOR EX FLIH
.TREXCON ANOP
         AIF   (&QNOTMP).MPEXCON
         EXTRN IECISHTP,IEEMPS00
AECISHTP DC    A(IECISHTP)             .CHAN-SHOULDER-TAP ROUTINE. MP65
AEEMPS00 DC    A(IEEMPS00)             .VARY-CPU-PFFLINE ROUTINE.  MP65
AVARYOFF DC    V(LOCKSTOP)             .EP FOR VARY CPU OFFLINE.   MP65
.MPEXCON ANOP
         TITLE '             OPTION 4... I/O FLIH'
         SPACE 2
*                     - I/O FLIH -
         SPACE 2
*       .IOS ENTERS THIS POINT UPON COMPLETION. THE ORIGINAL I/O FLIH
*        ENVIRONMENT IS RESTORED AND THE DISPATCHER IS ENTERED UNLESS
*        PSEUDO DISABLED IS SET IN WHICH CASE THE CODE WHICH WAS
*        INTERRUPTED IS REENTERED.
         ENTRY DISMISS
         USING *,XBS
DISMISS  NI    IEA0IO01+1,X'0F'   .RESET I/O ORIG SWITCH.
         ENTRY IEA0IO02
IEA0IO02 NOP   PDRETRN                 .PSEUDO DISABLE SWITCH.
         L     XIOTCB,IEATCBP .   GET NEW TCB ADDR               A46343
         C     XIOTCB,0(XIOTCB) . Q.NEW = PSEUDO-WAIT TASK       A46343
         BNE   IEA0DS .           NO.GO TO DISPATCHER            A46343
         L     XSBR,TRANSREF .    YES.GO TO XNST REFRESH         A46343
         BR    XSBR .                                            A46343
PDRETRN  DS    0H
         L     XIOTCB,IEATCBP+4   .GET CURRENT TCB ADDRESS.
         L     XIORB,TCBRBP(0,XIOTCB)  .GET CURRENT RB ADDRESS.
         MVC   IOOPSW(8),RBOPSW(XIORB) .MOVE PSW TO LOW 4K CORE.
         AIF   (&QNOTMP).M65MP09
         CLI   IOOPSW,ENABMASK         .IF IOOPSW NOT ENABLED,     MP65
         BNE   IORESTOR                . DO NOT UNLOCK             MP65
         L     XMPCVT,MPCVTPTR         .BASE REG FOR M65MP CVT     MP65
         XC    CVTAFFLK(C2),CVTAFFLK   . CLEAR AFFIN AND LOCK BYTE MP65
IORESTOR DS    0H                      .(LABEL FOR UNLOCK BYPASS)  MP65
.M65MP09 ANOP
         LM    0,15,TCBGRS(XIOTCB)     .RESTORE ALL REGS.
         AIF   (&MOD LT 100).R11                                 A70116
         NI    IOOPSW+1,247            SET BC MODE               A70116
.R11     ANOP                                                    A70116
         LPSW  IOOPSW                  .TO INTERRUPTED CODE.
         EJECT
         DROP  XBS
*       .ENTRY POINT FROM I/O INTERRUPT
         ENTRY IEAQIO00
IEAQIO00 DS    0H
         STM   XA,XB,IEASAV       .SAVE 2 REGS IN LOW 4K.
         BALR  XB,0
         USING *,XB
         AIF   (&QM65MP).NOTMP04
*       .THE FOLLOWING INSTRUCTION IS THE I/O ORIGINAL INTERRUPT
*        SWITCH. IT IS SET AS A NOP WHEN AN ORIGINAL I/O INTERRUPT
*        OCCURS BUT ON SUBSEQUENT NESTED INTERRUPTS IT IS SET TO BR.
         ENTRY IORGSW
IORGSW   DS    0H
         ENTRY IEA0IO01
IEA0IO01 NOP   NIOS
.NOTMP04 ANOP
         AIF   (&QNOTMP).M65MP10
         TM    IEA0IO01+1,C240         .TEST NESTING FLAG          MP65
         BNZ   NIOS                    .B IF NESTED INTERRUPT.     MP65
.M65MP10 ANOP
         OI    IEA0IO01+1,X'F0'   .SET ORIG I/O SW TO BRANCH.
         L     XIOTCB,IEATCBP+4   .GET ADDR OF CURRENT TASK'S TCB.
         STM   0,13,TCBGRS(XIOTCB)     .STORE REGS IN CURRENT TCB.
         AIF   (&QM65MP).NOSMF4                                   M3335
        AIF   (&SMF NE 1).NOSMF4                                   SMF
         BAL   IOFLRET,IEAQWAIT   .GO TO SMF SYS WAIT TIME RTN      SMF
.NOSMF4  ANOP                                                      SMF
         MVC   TCBGRS+56(8,XIOTCB),IEASAV   .SAVE ORIG 2 REGS IN TCB.
         L     XIORB,TCBRBP(0,XIOTCB)  .GET CURRENT RB ADDRESS.
         MVC   RBOPSW(8,XIORB),IOOPSW  .SAVE PSW IN CURRENT RB.
         AIF   (&QNOTMP).M65MP11
         L     XMPCVT,MPCVTPTR         .BASE REG FOR M65MP CVT     MP65
IOFLIHTS TS    CVTAFFLK+1              .TEST LOCK BYTE             MP65
         BZ    IOFLIHLK                .IF OFF, LOCK AND BRANCH    MP65
         CLC   CVTAFFLK(C1),CPUID      .CHECK CPU AFFINITY         MP65
         BE    IOFLGCLR                .SKIP OUT IF THIS CPU       MP65
         OI    FLRETFLG,FSIOFLAG       .FLAG IO-FLIH SPIN.         MP65
         CNOP  C4,C8                   .INSURE PSW DBL-WD BOUND.   MP65
         LPSW  *+4                     .ENABLE THIS CPU FOR EXTERN MP65
         DC    X'01040000'             .PSW ENABLED FOR EXT INT.   MP65
         DC    A(*+4)                  .ADDR OF ENABLED INSTR      MP65
         CNOP  C4,C8                   .INSURE PSW DBL-WD BOUND.   MP65
         LPSW  *+4                     .DISABLE EXTERN AND REPEAT  MP65
         DC    X'00040000'             .PSW DISAB EXC MACH CHK.    MP65
         DC    A(IOFLIHTS)             .ADDR OF I/O SPIN ON LOCK   MP65
IOFLIHLK MVC   CVTAFFLK(C1),CPUID      .SET AFFINITY BYTE          MP65
IOFLGCLR NI    FLRETFLG,C255-FSIOFLAG  .SET OFF I/O FLIH SPIN FLAG MP65
         AIF   (&SMF NE 1).M65MP11                                M3335
         BAL   IOFLRET,IEAQWAIT    .GO TO SMF SYS WAIT TIME RTN   M3335
.M65MP11 ANOP
*       .SET UP TO ENTER IOS
NIOS     DS    0H
         SPACE
         AIF   (T'&TRACER EQ 'O').NOTR1
*       .TRACE INTERFACE
         AIF   (&QNOTMP).M65MP12
         ENTRY IOTRACE                                             TRMP
IOTRACE  NOP   IOTRACE9                .B IF IOFL TRACE SUPPRESSED TRMP
.M65MP12 ANOP
         L     XTRBASE,ATRIO      .GET I/O TRACE ENTRY ADDRESS.
         BALR  XTRET,XTRBASE      .TO TRACE RTN.
         AIF   (&QNOTMP).MPIOTR9
IOTRACE9 DS    0H                      .(LABEL FOR TRACE BYPASS)   TRMP
.MPIOTR9 ANOP
         SPACE
.NOTR1   ANOP
         LM    XIOSBASE,XIOS,AIOS      .GET IOS BASE VALUE AND EP ADDR.
         BR    XIOS               .TO IOS.
         DROP  XB
         EXTRN IECINT
AIOS     DC    F'4096'                 .BASE ADDRESS FOR IOS.
         DC    A(IECINT)          .IOS INTERRUPT EP.
         SPACE
         EXTRN TRIO
ATRIO    DC    A(TRIO)            .I/O TRACE EP
        AIF   (&SMF NE 1).NOSMF10                                  SMF
         TITLE '              OPTION 4... SMF WAIT TIME COLLECTION' SMF
         SPACE 2                                                    SMF
*                     - SMF WAIT TIME COLLECTION -                  SMF
         SPACE 2                                                    SMF
         ENTRY SYSWSAVE                                             SMF
         SPACE 2
IEAQWAIT DS    0H                                                   SMF
         BALR  SYSWBASE,0                                           SMF
         USING *,SYSWBASE                                           SMF
         L     CURRENT,IEATCBP+4       .GET 'CURRENT' TCB           SMF
         L     SYSWTCB,WAITCBA         .ADDR SYS WAIT TCB         M2187
         CR    CURRENT,SYSWTCB         .Q.'CURRENT' = SYS WAIT TCB  SMF
         BCR   7,FLIHRET               .RETURN IF NO TO CALLER      SMF
         AIF   (&QNOTMP).NMPSMF2                                  M3335
         CLI   CPUSTAT,X'00'            IF NOT MP MODE DO NOT     M3335
         BNE   UNIPROC                  TEST OTHER CPU 'OLD'      M3335
         L     CURRENT,PREFIX2       OBTAIN OTHER OLD             M3335
         L     CURRENT,IEATCBP+4-IEAQFX00(CURRENT)                M3335
         CR    CURRENT,SYSWTCB        HAVE BOTH CPUS BEEN WAIT    M3335
         BCR   7,FLIHRET         IF NOT  RETURN                   M3335
UNIPROC  L     INTIMVAL,PREFTMRA        LOAD PREFIX TIMER DISP    M3335
         L     INTIMVAL,TIMER-IEAQFX00(INTIMVAL)                  M3335
         AGO   .MPSMF02                                           M3335
.NMPSMF2 ANOP                                                     M3335
         L     INTIMVAL,INTTIME         .READ OUT INT TIMER         SMF
.MPSMF02 ANOP                                                     M3335
         LM    TIMESAVE,TIMERACC,SYSWSAVE .INT TIMER VALUES         SMF
         LTR   TIMESAVE,TIMESAVE   .Q. SYS WAIT START TIME ZERO     SMF
         BZ    NCOLLECT            .YES RETURN TO CALLER            SMF
         L     INTIMVAL,SYSWSAVE+8     VALUE BEFORE RESET        A60581
         LTR   INTIMVAL,INTIMVAL       WAS TIMER RESET           A60581
         BC    0,RESET                                         @SA74540
         L     INTIMVAL,INTTIME                                  A60581
RESET    XC    SYSWSAVE+8(4),SYSWSAVE+8                          A60581
         SR    TIMESAVE,INTIMVAL       .GET ELAPSED SYS WAIT TIME   SMF
         BM    INT                                               A60581
         AR    TIMERACC,TIMESAVE       .INCREASE ACC SYS WAIT TIME  SMF
         BM    INT                                               A60581
         ST    TIMERACC,SYSWSAVE+4      .SAVE ACC SYS WAIT TIME     SMF
* TO ENSURE CURRENT VALUE IN INT TIMER IS STORED IN SYS WAIT START  SMF
* FIELD AFTER AN I/O OR CONSOLE INTERRUPT                           SMF
INT      MVC   SYSWSAVE(4),INTTIME     STORE VALUE IN INT TIMER  A60581
*                                  .SYS WAIT START FIELD            SMF
NCOLLECT BR    FLIHRET                  .RETURN TO CALLER           SMF
         SPACE
WAITCBA  DC    A(WAITTCB) .       ADDR OF PSUEDO-WAIT TCB         M2187
.NOSMF10 ANOP                                                      SMF
         TITLE '             OPTION 4...PROGRAM CHECK FLIH'
         SPACE
*                            PROGRAM CHECK FLIH
         SPACE 2
*...THIS SVC  EXIT INSTRUCTION IS USED FOR RETURNING FROM USER SUPPLIED
*   PROGRAM ERROR HANDLING ROUTINES. ITS PLACEMENT IMMEDIATELY
*   PRECEEDING THE PI FLIH IS SIGNIFICANT. EXIT USES THE SVC OLD PSW
*   SAVED AT INTERRUPT TIME TO COMPARE WITH THE PI NEW PSW TO IDENTIFY
*   ERROR RTN RETURNS.
         SPACE
PIEXIT   SVC   EXIT          .USED FOR PI ERROR RTN RETURNS ONLY.
         SPACE
         ENTRY IEAQPK00
         ENTRY ENTRY2
IEAQPK00 DS    0H
         STM   0,15,IEAPKSAV      .SAVE REGISTERS.
ENTRY2   BALR  11,0
         USING *,11
         AIF   (&QNOTMP).M65MP13
PIBASE   DS    0H                      .(PI FLIH BASE ADDR)        MP65
         L     XMPCVT,MPCVTPTR         .BASE REG FOR M65MP CVT     MP65
         CLI   PIOPSW+3,SSMCODE        .TEST FOR SSM OR TRVE PI    MP65
         BE    PIFLSSM             .B IF SSM                      M1522
PIFLTS   TS    CVTAFFLK+1              .(TRUE PI) TEST LOCK        MP65
         BZ    PIFLIHLK                .IF OFF, LOCK AND BRANCH    MP65
         CLC   CVTAFFLK(C1),CPUID      .FIND WHICH CPV             MP65
         BE    PIFLGCLR                .IF THIS CPU, CLEAR SPIN +  MP65
         OI    FLRETFLG,FSPIFLAG       .FLAG PI-FLIH SPIN.         MP65
         CNOP  C4,C8                   .INSURE PSW DBL-WD BOUND.   MP65
         LPSW  *+4                     .ENABLE THIS CPU FOR EXTERN MP65
         DC    X'01040000'             .PSW ENABLED FOR EXT INT.   MP65
         DC    A(*+4)                  .ADDR OF ENABLED INSTR      MP65
         CNOP  C4,C8                   .INSURE PSW DBL-WD BOUND.   MP65
         LPSW  *+4                     .DISABLE EXTERN AND REPEAT  MP65
         DC    X'00040000'             .PSW DISAB EXC MACH CHK.    MP65
         DC    A(PIFLTS)               .ADDR OF PI SPIN ON LOCK    MP65
PIFLIHLK MVC   CVTAFFLK(C1),CPUID      .SET AFFINITY BYTE          MP65
PIFLGCLR NI    FLRETFLG,C255-FSPIFLAG  .SET OFF PI FLIH SPIN FLAG  MP65
.M65MP13 ANOP
         L     IEARF,IEACON             .LINK TO IHLMCIH FOR      21014
         BALR  IEARE,IEARF              .POSSIBLE HOOK PROCESSING 21014
         AIF   (&DSIM EQ 0).NOTDSIM
         LM    12,13,PIOPSW  .GET PI OLD PSW.
         EXTRN REGS                DESTINATION FOR THE SAVED REGISTERS
IEAAPKDS LA    10,IEAAPKND         GET LOC OF TESTRAN SOURCE TEST IN
         LR    1,12                    GET INTERRUPT CODE
         N     1,CUMAK                 Q. OP CODE INTERRUPT
         BCTR  1,10                    IF NOT, GO TO TESTRAN CHECK
         TM    PIOPSW+4,X'C0'      Q. INSTRUCTION TYPE WAS S/S
         BC    14,IEAAPKET         IF NOT, GO TO EXECUTE TEST ROUTINE
         LR    1,13                PUT INSTRUCTION COUNTER IN WORK REG
         S     1,CON6              ACCESS OP CODE OF INTERRUPTING INSTR
IEAAPKEX CLI   0(1),X'F8'          Q. OP CODE IS LESS THAN ANY D. I.
         BCR   4,10                IF SO, RETURN TO PROG INT ROUT
         CLI   0(1),X'FE'          Q. OP CODE IS GREATER THAN ANY D. I.
         BCR   10,10               IF SO, RETURN TO PROG INT. ROUT
DECGO    L     4,DECREGS         SIMULATOR ADDRESS LINKAGE.
         USING REGS,4
         MVC   REGS(64),IEAPKSAV  .STORE REGS IN DECSIM AREA
         MVC   REGS+66(6),0(1)     PUT DECIMAL INSTRUCTION IN FREELIST
         DROP  4
         L     15,TODESIM          GET DEC SIM ENTRY ADDRESS LINKAGE
         BR    15                GO TO DEC.SIM.ROUTINE
IEAAPKET TM    PIOPSW+4,X'80'      Q. INSTRUCTION LENGTH WAS 2
         BCR   8,10                IF NOT, GO TO TESTRAN INTERFACE TEST
         LR    2,13                PUT INSTRUCTION COUNTER IN WORK REG
         S     2,CON4              ACCESS OP CODE OF INTERRUPTING INSTR
         CLI   0(2),X'44'          Q. INTERRUPTING INSTR WAS EXECUTE
         BCR   7,10                IF NOT, GO TO TESTRAN INTERFACE TEST
         MVC   TEMP(4),0(2)
         L     3,TEMP              PUT EXECUTE INSTR ITSELF IN REG 3
         N     3,IEAAPKAL              ISOLATE EX TARGET DISPLACEMENT
         O     3,IEAAPKLA          MASK IN LOAD ADDRESS OP CODE AND R1
         ST    3,IEAAPKWK          PUT CREATED INSTRUCTION IN WORK AREA
         L     6,TEMP                  GET THE EXECUTE INSTRUCTION
         SLL   6,16                    ISOLATE EXECUTE TARGET B + D
         SRL   6,28                    ISOLATE TARGET BASE
         LTR   4,6                     Q. TARGET BASE ZERO
         BC    8,GETINDEX              YES, BYPASS BASE REG SET UP
         SLL   6,2                     MAKE  BASE WORD DISPLACEMENT
         L     4,IEAPKSAV(6)           GET TARGET BASE CONTENTS
GETINDEX L     6,TEMP                  GET THE EXECUTE INSTRUCTION
         SLL   6,12                    ISOLATE EX TARGET INDEX, B + D
         SRL   6,28                   ISOLATE TARGET INDEX
         LTR   5,6                     Q. TARGET INDEX REG ZERO
         BC    8,GETADR                YES, BYPASS INDEX REG SET UP
         SLL   6,2                     MAKE INDEX WORD DISPLACEMENT
         L     5,IEAPKSAV(6)           GET TARGET INDEX REG CONTENTS
GETADR   EX    0,IEAAPKWK              GET TARGET INSTRUCTION ADDRESS
         CLI   0(1),X'F8'        IS OPCODE LESS THAN ANY DEC.INSTR.
         BCR   4,10              YES-RETURN TO PROG.INT.ROUTINE.
         CLI   0(1),X'FE'        IS OPCODE GREATER THAN DEC.INSTR.
         BCR   10,10             YES-RETURN TO PROG.INT.ROUTINE.
         L     3,TEMP            LOAD 3 WITH P/P EXECUTE INSTRUCTION.
         N     3,MASKX1          ONLY SAVE R1 FIELD.
         SRL   3,20              RIGHT ALIGN.
         C     3,ZEROX           WAS REG 0 SPECIFIED IN P/P EX INSTR.
         BC    8,DECGO                 YES, NO MODIFICATION OF L1-L2
         SLL   3,2           SET INDEX FOR P/P EX BASE
         LA    2,IEAPKSAV+3(3)    SET ADDRESS OF P/P L1-L2
         MVC   TEMPX(6),0(1)      PLACE DECIMAL INSTR IN TEMPX
         OC    TEMPX+1(1),0(2)    SET L1-L2
         LA    1,TEMPX           ADDR.OF MODIFIED DEC.INSTR.IN REG 1.
         BC    15,DECGO          SET UP FOR DEC.SIMULATOR.
         DS    0F
IEAAPKAL DC    X'00000FFF'             CLEAR ALL BUT DISPLACEMENT
IEAAPKLA DC    X'41145000'             EXECUTED LA INSTRUCTION
IEAAPKWK DS    F                   AREA FROM WHICH LA INSTR IS EXECUTED
CON4     DC    F'4'                BINARY 4 USED TO FIND EXECUTE INSTR
CON6     DC    F'6'                BINARY 6 USED TO FIND DECIMAL OPCODE
DECREGS  DC    A(REGS)             DEC SIM FREELIST-STORAGE ADDRESS
TODESIM  DC    V(DECENT)           DEC SIM ENTRY ADDRESS
MASKX1   DC    X'00F00000'       CLEAR ALL BUT R1 FIELD OF EX INSTR.
ZEROX    DC    F'0'
CUMAK    DC    X'0000000F'
TEMPX    DS    6C                MODIFIED P/P DECIMAL INSTRUCTION.
TEMP     DS    F
         SPACE 1
IEAAPKND LM    0,2,IEAPKSAV            RESTORE ALTERED REGS
         LM    14,15,IEAPKSAV+56
.NOTDSIM AIF   (T'&TRACER EQ 'O').GTF02                           21014
*...PI TRACE INTERFACE...
         AIF   (&QNOTMP).M65MP14
         ENTRY PITRACE                                             TRMP
PITRACE  NOP   PITRACE9                .B IF PI TRACE SUPPRESSED.  TRMP
.M65MP14 ANOP
.GTF02   ANOP                                                     21014
*  ISSUE HOOK FOR PROGRAM TRACE                                   21014
         HOOK  EID=IHLMPI,TYPE=S   .ISSUE HOOK FOR PROGRAM TRACE  21014
         LM    C0,C1,IEAPKSAV .        RESTORE ALTERED REGS    BD M1436
         LM    CE,CF,IEAPKSAV+C56 .     FOR TRACE ROUTINE        A53361
         AIF   (T'&TRACER EQ 'O').NOTR2                           M4917
         L     XTRBASE,ATRPI           .GET PI TRACE EP.
         BALR  XTRET,XTRBASE           .TO TRACE RTN.
         USING *,11
         AIF   (&QNOTMP).M65MP15
         L     CB,APIBASE              .RESTORE PIFLIH BASE REG.   TRMP
         USING PIBASE,CB                                           TRMP
PITRACE9 DS    0H                      .(LABEL FOR TRACE BYPASS)   TRMP
.M65MP15 ANOP
*........................
         SPACE
.NOTR2   AIF   (&MOD EQ 91).NOT91A                               A33079
         LM    12,13,PIOPSW  .GET PI OLD PSW.
.NOT91A  ANOP
         AIF   (&MOD LT 100).R31                                 A70116
         NI    PIOPSW+1,247            SET BC MODE               A70116
.R31     ANOP                                                    A70116
         TM    PIOPSW+1,X'01' .IS INTERRUPT IN SUPERVISORY CODE.
         AIF     (T'&TRACER EQ 'O').NOTRA01                       20472
         BZ    DUPTEST             YES.BRANCH                     20472
         AGO   .NOTRA12                                           20472
.NOTRA01 ANOP                                                     20472
         BC    8,PLOGADR           .YES TAKE BRANCH
.NOTRA12 ANOP                                                     20472
         L     XNPI1,IEATCBP+4 .GET ADDR OF CURRENT TCB.
         AIF   ((&TSTRN EQ 0) OR (&MOD NE 91)).NOTT               19E08
         LR    9,XNPI1             TCB ADDRESS
         L     9,20(9)             TESTRAN INDICATOR
         LTR   9,9                 TEST FOR MINUS, IF MINUS TESTRAN
         BNM   TESTSPI             IS IN USE WITH P/P
         MVC   452(4,9),444(9)     SET UP PSW FOR RETURN TO TESTRAN
         LPSW  448(9)
.NOTT    ANOP
TESTSPI  L     XNPI1,TCBPIE(0,XNPI1)   .GET PIE ADDR. FROM TCB
         LTR   XNPI1,XNPI1        .IS THERE A PIE SPECIFIED.
         BC    12,PLOGADR              .NO, TAKE BRANCH.
         LR    XNPIPIE,XNPI1 . SET STD REG FOR PIE ADDR            MTS0
         L     XNPI1,PIEPICA(0,XNPI1) .GET PICA ADDR FROM PIE.     MTS0
         LTR   XNPI1,XNPI1        .IS PICA NOT IN EFFECT OR IN     MTS0
*                                 PROCESS                          MTS0
         BC    12,PLOGADR         .YES, TAKE BRANCH.               MTS0
         MVI   0(XNPIPIE),X'80' .SET PIE BUSY INDICATOR          A28405
         STM   12,2,PIEPSW(XNPIPIE) .ST PSW AND REGS 14-2 IN PIE   MTS0
         MVC   PIEREG1(4,XNPIPIE),IEAPKSAV+4 .GET REGISTER 1       9570
*                                  FROM PROG CHECK SAVE AREA       9570
         LM    15,0,0(XNPI1)      .LOAD ENTRY POINT AND MASKS.     MTS0
         AIF   (&MOD LT 91).NOT91B                                M0132
         AIF   (&MOD EQ 135).NOT91B                               21B72
         AIF   (&MOD EQ 145).NOT91B                               M0132
         AIF   (&MOD EQ 155).NOT91B                               19E07
         AIF   (&MOD EQ 165).NOT91B                               19E08
         AIF   (&MOD EQ 158).NOT91B                            BD 21122
         AIF   (&MOD EQ 168).NOT91B                            BD 21122
         L     2,IEAAPKAI          LOAD MASK FOR INTERRUPT CODE
         NR    2,12                EXTRACT IMPRECISE INTERRUPT CODES
         LTR   2,2                 Q. THIS INTERRUPT IS PRECISE
         BC    8,IEAAPKPR          IF SO GO TO PREC INT HAND ROUT
         L     3,IEAAPK49          LOAD MASK FOR IMPRECISE INT 4-9
         NR    3,2                 EXTRACT 4-9
         SLL   3,2                 ORIENT 4-9 RELATIVE TO 12-15
         L     4,IEAAPKCF          LOAD MASK FOR 12-15
         NR    4,2                 EXTRACT 12-15
         OR    3,4                 MERGE 4-9 AND 12-15
         L     5,IEAAPKDI          LOAD MASK FOR 10-11            M0116
         NR    5,2                 EXTRACT 10-11                  M0116
         SLL   5,6                 ORIENT 10-11 TO 4-9 & 12-15    M0116
         OR    3,5                 MERGE 10-11 WITH 4-9 & 12-15   M0116
         SLL   3,10                ORIENT 4-15 TO PICA INTER      M0116
         LR    4,0                 SAVE PICA INTERRUPTION MASK
         OR    4,3                 SUPERIMPOSE INTERRUPTS ON PICA
         CLR   0,4                 Q. THE INTERRUPTS WHICH OCCUR ARE
         BC    8,IEAAPKSX          ALL IN THE PICA INTERRUPT CODE
         B     PLOGADR
         DS    0F
IEAAPKAI DC    X'0000FFF0'         ALL INTERRUPTS                 M0116
IEAAPKDI DC    X'00000030'         INTERRUPTS 10-11 ONLY          M0116
IEAAPK49 DC    X'0000FC00'         INTERRUPTS 4-9 ONLY
IEAAPKCF DC    X'000003C0'         INTERRUPTS 12-15 ONLY
ADDRS    DC    F'0'                    PIE INDICATOR SAVE
IEAAPKPR SLL   0,0(12)             BY THE PICA MASK
         ST    0,ADDRS                 SAVE PIE INDICATOR
         TM    ADDRS,X'80'             IS PIE BUSY
         BC    8,PLOGADR               NO, GO TO SET UP ABTERM PROLOG
IEAAPKSX ST    15,PIOPSW+4         SET UP ENTRY POINT PSW FOR EXIT
         L     14,APIEXIT         .SET RETURN ADDRESS.
         LM    2,13,IEAPKSAV+8         RESTORE WORKING REGS
         LPSW  PIOPSW             .TO ERROR RTN.
         AGO   .IS91A
.NOT91B  ANOP
         SLL   0,0(12)            .TEST IF INTERRUPT TYPE TO BE HANDLED
         LTR   0,0                .BR TO PROLOGUE IF NOT HANDLED.
         BC    10,PLOGADR              .TO BE HANDLED,TAKE BRANCH.
         AIF   (&QNOTMP).M65MP16
         L     XPITCB,IEATCBP+4        .GET ADDR CURR TCB          MP65
         TM    TCBFLGS+2(XPITCB),TCBABTRM   .IF TASK ABTERMED,     MP65
         BNZ   IEA0DS                  .TO DISP UNL EXT INT PENDG. MP65
.M65MP16 ANOP
         MVC   8(4),PIOPSW         BUILD PSW TO LOAD            NU00680
         ST    15,12                         IN LOW CORE        NU00680
         AIF   (&QM65MP).NOTMP05
         L     14,APIEXIT         .SET RETURN ADDRESS.
         LM    10,13,IEAPKSAV+40  .RESTORE 4 REGS.
         LPSW  8                   TO ERROR ROUTINE             NU00680
.NOTMP05 ANOP
         AIF   (&QNOTMP).M65MP17
         L     XPIRB,TCBRBP(XPITCB)    .GET CURR RB.               MP65
         MVC   RBOPSW(C8,XPIRB),PIOPSW .MOVE ERROR-ROUTINE ADDR    MP65
         STM   C0,C1,TCBGRS(XPITCB)    .0,1 SETUP BY PI FLIH.      MP65
         MVC   TCBGRS+C8(C48,C9),IEAPKSAV+C8     .SAVE REGS.       MP65
         L     C2,APIEXIT              .LOAD RETURN ADDRESS.       MP65
         ST    C2,TCBGRS+C56(XPITCB)   .REG 14.                    MP65
         ST    CF,TCBGRS+C60(XPITCB)   .ENTRY ADDR.                MP65
         B     IEA0DS                  .TO DISP UNL EXT INT PENDG. MP65
.M65MP17 ANOP
.IS91A   ANOP
PLOGADR  L     XNPIX,APROLOG           .SET UP ABTERM PROLOGUE.
         BR    XNPIX                   .BRANCH TO PROLOGUE.
         AIF     (T'&TRACER EQ 'O').NOTRA02                       20472
DUPTEST  EQU   *                                                  M1191
         CLI   PIOPSW+3,PROGCHK0 Q.IMPRECISE P.C. OR SSM IF MP65  M1191
         BE    PLOGADR            YES.DON'T CHECK FOR LOOP        M1191
         LA    13,0(13) .         CLEAR OFF ILC,CC, PROG MASK     20472
         CL    13,PCSAVE          Q.BEGINNING OF PROG CHK LOOP    20472
         BE    HANGUP             YES.BRANCH                      20472
         ST    13,PCSAVE          NO.STORE ADDR OF PROG CHK       20472
         B     PLOGADR            GO TO INLINE P.C. PROCESSING    20472
         SPACE 1
*     THIS SECTION OF CODE WILL TURN OFF THE TRACE TABLE IF IT    20472
*        WAS DETERMINED THAT SUPERVISOR-STATE CODE PROGRAM-       20472
*        CHECKED IN THE SAME LOCATION TWICE, ONE RIGHT AFTER      20472
*        THE OTHER.  THIS IS TO PREVENT THE TRACE TABLE FROM      20472
*        BEING FILLED UP BY A PROGRAM CHECK LOOP.                 20472
         SPACE 1
HANGUP   L     C9,STOPTRA         GET ADDR OF TRACE NOP           20472
         OI    1(C9),X'F0'        TURN OFF TRACE TABLE            20472
         SR    C9,C9                                              20472
         ST    C9,PCSAVE          RE-INIT SAVE AREA               20472
         B     PLOGADR            GO TO INLINE P.C. PROCESSING    20472
         SPACE
         EXTRN IECXTRA                                            20472
STOPTRA  DC    A(IECXTRA)                                         20472
PCSAVE   DC    F'0'                                               20472
PROGCHK0 EQU   0            TO CHECK FOR 0C0 PROGRAM INTERRRUPT   M1191
         SPACE
.NOTRA02 ANOP                                                     20472
         EXTRN IEA0PL00
APROLOG  DC    A(IEA0PL00)              .PROLOGUE ADDRESS
APIEXIT  DC    V(PIXT2)                 .ADDRESS OF SVC FOR PIE  TNITEL
         SPACE
         EXTRN TRPI
ATRPI    DC    A(TRPI)                  .PI TRACE EP
IEACON   DC    V(IHLMCIH)               .ADDR OF MONITER CALL IH  21014
IEACON2  DC    V(IHLBHOOK)              .ENTRY PT FOR HOOK PROCESS21014
         SPACE
         SPACE
         AIF   (&QNOTMP).M65MP99
APIBASE  DC    A(PIBASE)                                           MP65
.M65MP99 ANOP
         AIF   (&QNOTMP).M65MP18
         TITLE '   SSM-INTERRUPT PROCESSING'                       MP65
PIFLSSM  L     XPIRHPSW,PIOPSW+4       .LOAD RH PIOPSW.            MP65
         SL    XPIRHPSW,AF4            .ADDR-4 (FOR REEXEC IF NEC) MP65
         LA    XPILOC,C0(XPIRHPSW)     .ISOL ADDR OF SSM OR EX.    MP65
PIFLSSM0 SR    XPIR2,XPIR2             .(CONV R2-D2 FIELD TO ABS   MP65
         IC    XPIR2,C2(XPILOC)        .ADDR WITHOUT USING R2 REG) MP65
         SRA   XPIR2,C4                .ISOLATE R2 FIELD           MP65
         BZ    PIFLSSMA                .B IF ZERO (NO BASE REG).   MP65
         SLL   XPIR2,C2                .GET REL LOC OF REG IN SAVE MP65
         L     XPIR2,IEAPKSAV(XPIR2)   .EXEC-TIME CONTS OF R2 REG  MP65
         LA    XPIR2,0(XPIR2) .   CLEAR HIGH BYTE                 20472
PIFLSSMA LH    XPILOC2,C2(XPILOC)      .R2 FIELD OF SSM OR EX      MP65
         N     XPILOC2,DISPFLD .  CLEAR OFF BASE REG              20472
         AR    XPILOC2,XPIR2           .ABS ADDR OF MASK OR SSM.   MP65
         CLI   C0(XPILOC),SSM          .DOES XPILOC POINT TO SSM  M2959
         BE    PIFLSSM1                .B IF SSM                  M2959
         LA    C7,INDEXMSK .      GET MASK TO ISOLATE INDEX REG   20472
         IC    XPIR2,1(XPILOC) .  GET BYTE CONTAINING INDEX REG   20472
         NR    XPIR2,C7 .         CLEAR OFF 1ST 4 BITS            20472
         BZ    NOINDEX .          BRANCH IF INDEX REG = 0         20472
         SLL   XPIR2,2 .          GET INDEX OFFSET IN REGSAVE     20472
         L     XPIR2,IEAPKSAV(XPIR2) . GET INDEX CONTENTS         20472
         LA    XPIR2,0(XPIR2) .   CLEAR HIGH BYTE                 20472
         AR    XPILOC2,XPIR2 .    SUM THE ADDRESSES               20472
NOINDEX  EQU   *                                                  20472
         LR    XPILOC,XPILOC2           .OTHWSE,GET SSM INST       MP65
         B     PIFLSSM0                . AND REPEAT ABOVE SECTION  MP65
PIFLSSM1 TM    C0(XPILOC2),ENABMASK    .TEST MASK                  MP65
         AIF   (T'&TRACER EQ 'O').NOTRSSJ
         IC    XPIAFFLK,CVTAFFLK       .INIT AFFLK FOR TRACE.      MPTR
.NOTRSSJ ANOP
         BO    PIFLSSM3                . B IF ENABLE               MP65
SMFLIHTS TS    CVTAFFLK+1              .TEST FOR LOCKOUT           MP65
         BNZ   PIFLSSM2                . BRANCH IF YES             MP65
         MVC   CVTAFFLK(C1),CPUID      .SET AFFINITY BYTE          MP65
         B     PIFLSSM8                                            MP65
PIFLSSM2 CLC   CVTAFFLK(C1),CPUID      .FIND LOCKING CPU           MP65
         BE    PIFLSSM8                .B IF THIS CPU              MP65
         ST    XPIRHPSW,PIOPSW+4       .SET OPSW TO REEXECUTE INST MP65
         TM    PIOPSW,C1                                           MP65
         BO    SSMEXIT                 .B IF EXT INT ENABLED       MP65
* LOCKED-OUT SSM DISABLED FOR EXTERNAL INTERRUPTS.                 MP65
         L     XPITCB,IEATCBP+4                                    MP65
         MVC   TCBGRS(C64,XPITCB),IEAPKSAV  .STORE REGS IN TCB     MP65
         L     XPIRB,TCBRBP(XPITCB)                                MP65
         MVC   RBOPSW(C8,XPIRB),PIOPSW .SET RB TO REEXECUTE SSM    MP65
         OI    FLRETFLG,FSEXFLAG                                   MP65
         MVC   EXOPSW+C5(C3),PIOPSW+5       .SET UP SPIN IN EX FLI MP65
         MVI   EXOPSW+3,C0             .DELETE SSM-INTERRUPT CODE  MP65
         LPSW  EXNEWPSW                                            MP65
PIFLSSM3 CLC   CVTAFFLK(C1),CPUID      .(SSM ENABLE)               MP65
         BNE   PIFLSSM8                . B IF LOCKOUT BY OTHER CPU MP65
         XC    CVTAFFLK(C2),CVTAFFLK        .CLEAR AFFIN AND LOCK  MP65
PIFLSSM8 MVC   PIOPSW(C1),C0(XPILOC2)  .INSERT MASK IN PIOPSW      MP65
         ENTRY SSMTRACE                                            MPTR
***  SSM TRACING NOW ALLOWED FOR GTF. HOWEVER OS TRACE BYPASSED.  M1522
SSMTRACE NOP   SSMEXIT       NOP TO ALLOW GTF TRACE OF SSM        M1522
SSMTRTS  TS    CVTAFFLK+1              .ASSURE TRACE LOCKOUT       MPTR
         BZ    SSMTRLK                                             MPTR
         CLC   CVTAFFLK(C1),CPUID                                  MPTR
         BNE   SSMEXIT       .NO TRACE IF LOCKOUT BY OTHER CPU     MPTR
SSMTRLK  MVC   CVTAFFLK(C1),CPUID                                  MPTR
*  ISSUE A HOOK FOR SSM                                           21014
SSMTRSSM HOOK  EID=IHLMSSM,TYPE=S    .ISSUE HOOK FOR SSM TRACE    21014
         AIF   (T'&TRACER EQ 'O').GTF2SSM                         M1522
         B     SSMNOTRC           BYPASS OS TRACE OF SSM          M1522
         L     XTRBASE,ATRSSM                                     21014
         BALR  XTRET,XTRBASE           .CALL TRACE ROUTINE         MPTR
         USING *,XTRET                                             MPTR
SSMNOTRC EQU   *                                                  M1522
.GTF2SSM ANOP                                                     M1522
         BALR  11,0               RESET ADDRESSABILITY IN CASE    M1522
         USING *,11               BRANCH TO OS TRACE CHANGED REG11M1522
         TM    PIOPSW,ENABMASK         .UNLOCK IF SSM ENABLE       MPTR
         BNO   SSMTRAC9                                            MPTR
         XC    CVTAFFLK(C2),CVTAFFLK                               MPTR
SSMTRAC9 DS    0H                      .(LABEL FOR TRACE BYPASS)   MPTR
.NOTRSSM ANOP
SSMEXIT  LM    C0,CF,IEAPKSAV          .RESTORE REGISTERS          MP65
         MVI   PIOPSW+3,C0             .DELETE SSM-INTERRUPT CODE  MP65
         LPSW  PIOPSW                  .RESUME PROG OR REEX SSM OR MP65
         SPACE 2
         EXTRN TRSSM                                               TRMP
ATRSSM   DC    A(TRSSM)            .SSM TRACE ENTRY POINT          TRMP
AF4      DC    F'4'                .LENGTH OF SSM OR EX INSTR      MP65
DISPFLD  DC    X'00000FFF' .      VALUE TO ISOLATE DISPLACEMENT   20472
INDEXMSK EQU   X'0F' .            MASK TO ISOLATE INDEX REG       20472
.M65MP18 ANOP
         TITLE '             OPTION 4...STAGE 2 OF EXIT EFFECTOR'
         DROP  11
         SPACE
         ENTRY IEA0EF00
IEA0EF00 DS    0H
         MVC   PINPSW+2(1),PINPSW+1 .  SAVE CURRENT AMWP FIELD    M2352
SETON    OI    PINPSW+1,X'04' ZAP X'04' TO X'06' TO SET WAIT BIT  M2352
         STM   X2WK,X2BASE,IEASAV+4                              A64481
         BALR  X2BASE,0
         USING *,X2BASE
         AIF   (&QNOTMP).AEQBAS1
         ST    XAEQBASE,EFGRSAVE       .SAVE REG USED AS           MP65
         L     XAEQBASE,VECIERLC       . BASE FOR AEQ PTRS         MP65
         USING IECIERLC,XAEQBASE                                   MP65
.AEQBAS1 ANOP
         LTR   X2QE,X2QE               .TEST FOR IQE.
         BC    4,EFIQE                 .BR IF YES.
         LH    X2WK,AEQB               QUEUE 16* RQE
         CR    X2WK,X2QE               SAME REQUEST              A68623
         BNE   SETON1                  NO                        A68623
         STH   X2QE,RQE                SAVE RQE                  A68623
         ST    14,RET                  SAVE RETURN               A68623
         B     SETON4                                            A68623
SETON1   EQU   *                                                 A68623
         MVC   0(2,X2QE),0(X2WK)
         STH   X2QE,0(0,X2WK)
         STH   X2QE,AEQB
         LH    X2WK,AEQA               VALIDATE THE AEQ          A68623
SETON2   CH    X2WK,AEQC               LAST                      A68623
         BE    EFEXIT                                            A68623
         CH    X2WK,0(X2WK)            INVALID                   A68623
         BE    SETON3                  YES                       A68623
         LH    X2WK,0(X2WK)            NEXT                      A68623
         B     SETON2                  CONTINUE                  A68623
SETON3   MVC   0(2,X2WK),AEQB          RE INITIALIZE             A68623
         STH   X2WK,RQE                SAVE BAD RQE ADDRESS      A68623
         ST    14,RET                  SAVE RETURN               A68623
         OI    RET,X'0F'               INDICATE SEARCH           A68623
         LH    X2WK,AEQB                                       @SA76107
         MVC   0(2,X2WK),AEQC          INIT LAST                 A68623
         LH    X2WK,RQE                                          A68623
SETON4   MVC   RQE+2(2),2(X2WK)        UCB ADDRESS               A68623
         MVC   RTCB(4),IQETCB(X2WK)    TCB                       A68623
EFEXIT   MVI   IEA0DS01+1,X'F0'        .SET SW IN DISP TO ENTER STG 3.
         AIF   (&QNOTMP).AEQBAS2
         L     XAEQBASE,EFGRSAVE       .(RESTORE)                  MP65
.AEQBAS2 ANOP
         LM    X2WK,X2BASE,IEASAV+4                              A64481
SETOFF   MVC   PINPSW+1(1),PINPSW+2 .  RESTORE ORIGINAL AMWP      M2352
         MVI   PINPSW+2,X'00' .        NEATNESS COUNTS            M2352
         BR    14                      .RETURN TO CALLER.
RET      DC    F'0'                    RETURN                    A68623
RQE      DC    F'0'                    RQE UCB SAVE              A68623
RTCB     DC    F'0'                    RQETCB                    A68623
         SPACE
* IQE (NON-16*) HANDLING.
EFIQE    LCR   X2QE,X2QE               .RECOMPLEMENT IQE ADDR.
         LA    X2WK,AEQK                                         A68764
         CR    X2QE,X2WK               INVALID REQUEST           A68764
         BNL   EFI01                   NO                        A68764
EFI0A    ST    X2QE,EFI1               SAVE ERROR IQE            A68764
         ST    14,EFI2                 SAVE RETURN               A68764
         BR    14                      NO SCHEDULE               A68764
EFI01    L     X2WK,IQEIRB(1)                                     68764
*                                                              @SA75841
         L     X2WK,AEQK               .QUEUE IQE.
         CR    X2QE,X2WK               SCHEDULE SAME             A64483
         BE    EFI0A                   YES DO NOT SCHEDULE       A64483
         MVC   0(4,X2QE),0(X2WK)
         ST    X2QE,0(0,X2WK)
         ST    X2QE,AEQK
         L     X2WK,AEQJ                                         A68764
         LA    X2QE,AEQJ                                         A68764
         ST    X2QE,EFI4                                         A68764
EFI02    L     X2WK,IQEIRB(X2WK)       IRB POINTER                68764
         TM    IQELNK+10(X2WK),X'C0'                           @SA75841
         L     X2WK,0(X2QE)            INIT POINTER               68764
         BC    11,EFI03                                        @SA75841
         CLC   1(3,X2WK),EFI4+1        LAST                       68764
         BE    EFEXIT                  YES                        68764
         LR    X2QE,X2WK               PREV POINTER               68764
         L     X2WK,0(X2QE)            NEXT                       68764
         B     EFI02                                              68764
EFI03    MVC   0(4,X2QE),AEQK          INITIALIZE                A68764
         ST    X2WK,EFI1               SAVE ERROR                A68764
         ST    14,EFI2                 SAVE RETURN               A68764
         L     X2QE,AEQK                                         A68764
         MVC   0(4,X2QE),EFI4          INITIALIZE LAST           A68764
         MVI   0(X2QE),X'FF'                                     A68764
         L     X2WK,16                 CVT                       A68764
         L     X2WK,0(X2WK)            OLD NEW                   A68764
         MVC   EFI3(4),4(X2WK)         CURRENT TASK              A68764
         B     EFEXIT
EFI1     DC    F'0'                    ERROR IQE                 A68764
EFI2     DC    F'0'                    ERROR RETURN              A68764
EFI3     DC    F'0'                    TASK                      A68764
EFI4     DC    F'0'                    RE INIT                   A68764
         DROP  X2BASE
         AIF   (&QNOTMP).AEQBAS3
         DROP  XAEQBASE                                            MP65
EFGRSAVE DC    F'0'          .SAVE REG USED FOR AEQ PTRS           MP65
.AEQBAS3 ANOP
         TITLE '             TASK SWITCH ROUTINE'
         ENTRY IEA0DS02
IEA0DS02 DS    0H
         ST    12,IEASAV+8             .SAVE ONE REG.
         BALR  12,0
         USING *,12
         AIF   (&QM65MP).NOTMP06
         LA    XPTCB,C0(C0,XPTCB) .    ZERO HI BYTE OF PASSED TCB ADDR
         L     XN,IEATCBP              .GET 'NEW'.
         LTR   XN,XN                   .IS 'NEW' = 0.
         BC    7,SW01                  .BR IF NOT.
         L     XN,IEATCBP+4            .GET 'OLD'.
SW01     CLC   TCBDSP(1,XN),TCBDSP(XPTCB)   .CHECK DISP PRIORITIES.
         BH    SWRET                   .RETURN IF 'NEW' IS HI.
         BL    SWSETNEW
         AIF   (&TIMESL NE 1).NOTS16                               MTS0
         TM    TCBFLGS+1(XPTCB),TCBFTS  IS TCB A TIME-SLICE TASK   MTS0
         BC    7,SWRET                 IF SO, DON'T ALTER 'NEW'    MTS0
.NOTS16  ANOP                                                      MTS0
* EQUAL PRIORITIES.
SWNEXT   L     XN,TCBTCB(0,XN)         .GET NEXT TCB.
         LTR   XN,XN                   .IS THIS LAST TCB.
         BZ    SWSETNEW                .BR IF YES.
         CLC   TCBDSP(1,XN),TCBDSP(XPTCB)   .CHK DISP PRIORITIES.
         BNE   SWSETNEW                .BR IF NOT EQUAL.
         CR    XN,XPTCB                .ARE TCB'S ONE AND THE SAME.
         BNE   SWNEXT                  .BR IF NOT.
         B     SWRET
SWSETNEW DS    0H
         LH    XN,TCBWAIT(0,XPTCB)     .GET NON-DISPATCHABLE BITS.
         LTR   XN,XN                   .IS TASK NON-DISPATCHABLE.
         BC    7,SWRET                 .BR IF YES.
         L     XN,TCBRBP(0,XPTCB)      .GET CURRENT RB.
         CLI   RBWCF(XN),0             .IS RB WAITING.
         BNE   SWRET                   .BR IF YES.
         ST    XPTCB,IEATCBP           .SET 'NEW' = INPUT TCB.
SWRET    L     12,IEASAV+8             .RESTORE REG.
         BR    XRET                    .RETURN TO CALLER.
.NOTMP06 ANOP
         AIF   (&QNOTMP).M65MP19
SWBASE   LA    XPTCB,C0(XPTCB)         .CLEAR BYTE ZERO.           MP65
         STM   XRP1,XRP5,SWGRSAVE       CSAVE REGS.                MP65
         LH    XRP4,TCBWAIT(XPTCB)      IF GIVEN TCB               MP65
         LTR   XRP4,XRP4               . NON-DISPATCHABLE,         MP65
         BNZ   SWRET                   . RETURN                    MP65
         L     XRP4,TCBRBP(XPTCB)      .IF CURRENT RB              MP65
         CLI   RBWCF(XRP4),C0          . WAITING,                  MP65
         BNE   SWRET                   . RETURN                    MP65
         L     XRP5,PREFIX2            .PREFIX FOR OTHER OPU       MP65
         L     XRP1,IEATCBP            .NEW1                       MP65
         CLR   XPTCB,XRP1              .IF GIVEN TCB IS NEW1,      MP65
         BE    SWRET                   . RESTORE AND RETURN        MP65
         LTR   XRP1,XRP1                                           MP65
         BNZ   SWNEW1NZ                .B IF NEW1 NOT ZERO         MP65
         ST    XRP1,IEATCBP-IEAQFX00(,XRP5)      .OTHWSE, SET NEW2 MP65
         B     SWRET                   . AND RETURN (AFTER REG RES MP65
SWNEW1NZ L     XRP2,IEATCBP-IEAQFX00(,XRP5)      .NEW2             MP65
         CLR   XPTCB,XRP2              .IF GIVEN TCB IS NEW2,      MP65
         BE    SWRET                   . RESTORE AND RETURN        MP65
         LTR   XRP2,XRP2                                           MP65
         BNZ   SWNEW2NZ                .B IF NEW2 NOT ZERO         MP65
         ST    XRP2,IEATCBP            .OTHWSE, SET NEW1 ALSO ZERO MP65
         B     SWRET                   . AND RETURN (AFTER REG RES MP65
SWNEW2NZ BAL   XRP4,RELPRIOR           .FIND REL TCB-QUEUE POS     MP65
         BP    SWNEW2LO                .B IF NEW1 HIGHER THAN NEW2 MP65
         AIF   (&TIMESL EQ 0).MPTSSW
         BM    SWNEW1LO                .B IF NEW2 HIGHER THAN NEW1 MPTS
* NEW1 AND NEW2 IN COMMON TIME-SLICING GROUP OR BOTH = WAITTCB.    MPTS
         CLC   TCBDSP(C1,XPTCB),TCBDSP(XRP1)                       MPTS
         BH    SWCHNEW1                .B IF GIV TCB HIGHER DSP    MPTS
         B     SWRET                                               MPTS
.MPTSSW  ANOP
* NEW1 LOWER THAN NEW2.                                            MP65
SWNEW1LO LR    XRP2,XPTCB              . COMPARE                   MP65
         BAL   XRP4,RELPRIOR           . NEW1 WITH GIVEN TCB       MP65
         BNL   SWRET                   .B IF NEW1 HIGHER.          MP65
SWCHNEW1 ST    XPTCB,IEATCBP           .OTHWSE, SET NEW1 = GIVTCB. MP65
         CL    XPTCB,IEATCBP+4-IEAQFX00(,XRP5)   .IF NE OTHER OLD, MP65
         BNE   SWRET                   . LEAVE TASKSWCH.           MP65
         B     SWINTCHG                . INTERCHANGE NEW1 AND NEW2 MP65
* NEW2 LOWER THAN NEW1.                                            MP65
SWNEW2LO LR    XRP1,XPTCB              .COMPARE                    MP65
         BAL   XRP4,RELPRIOR           . GIVEN TCB AND NEW2        MP65
         BNH   SWRET                   .RETURN IF GIVEN TCB NOT HI MP65
SWCHNEW2 ST    XPTCB,IEATCBP-IEAQFX00(,XRP5)     .SET NEW2=GIVTCB  MP65
         CL    XPTCB,IEATCBP+4         .IF NOT SAME AS OTHER OLD,  MP65
         BNE   SWRET                   . LEAVE TASKSWCH.           MP65
* CHANGED 'NEW' SAME AS OTHER 'OLD'.                               MP65
SWINTCHG L     XRP1,IEATCBP                 .LOAD NEW1             MP65
         L     XRP2,IEATCBP-IEAQFX00(,XRP5) . AND NEW2             MP65
         ST    XRP1,IEATCBP-IEAQFX00(,XRP5) . FOR                  MP65
         ST    XRP2,IEATCBP                 . INTERCHANGE.         MP65
SWRET    LM    XRP1,XRP5,SWGRSAVE      .RESTORE                    MP65
         L     CC,IEASAV+C8              REGISTERS                 MP65
         BR    XRET                    .RETURN                     MP65
SWGRSAVE DS    5F                      .REGISTER-SAVE AREA         MP65
         SPACE 1                                                   MP65
* RELATIVE-PRIORITY SUBROUTINE     (USING SWBASE,CC)               MP65
         SPACE 1                                                   MP65
RELPRIOR CLC   TCBDSP(C1,XRP1),TCBDSP(XRP2) .COMPARE DISP PRIORS.  MP65
         BCR   C7,XRP4                      .RETURN IF UNEQUAL.    MP65
         CLR   XRP1,XRP2               .COMPARE TCB ADDRS.         MP65
         BCR   C8,XRP4                 .RETURN IF SAME TCB         MP65
         AIF   (&TIMESL EQ 0).MPTSRP
         TM    TCBFLGS+1(XRP1),TCBFTS  .IF COMMON DSP TIMESL'D,    MPTS
         BCR   C1,XRP4                 . RETURN WITH CC=3.         MPTS
.MPTSRP  ANOP
* FIND IF XRP2 BELOW XRP1.                                         MP65
         LR    XRP3,XRP1               .SEARCH FROM XRP1 FOR XRP2. MP65
RPNEXT   L     XRP3,TCBTCB(,XRP3)      .NEXT LOWER TCB             MP65
         LTR   XRP3,XRP3                                           MP65
         BZ    RPEND                        .B IF END OF TCB QUEUE MP65
         CLR   XRP3,XRP2                                           MP65
         BE    RPXRP1HI                     .B IF XRP2 FOUND.      MP65
         CLC   TCBDSP(C1,XRP3),TCBDSP(XRP2) .IF NEW XRP3 SAME DSP, MP65
         BE    RPNEXT                       . CONTINUE SEARCH      MP65
         BR    XRP4                         .OTHWSE, RETURN (XRP1  MP65
RPEND    CL    XRP2,WAITPRB                 .(END OF QUEUE)        MP65
         BNE   RPXRP2HI                     .B IF XRP2 NOT 'WAIT'. MP65
RPXRP1HI LTR   XRP2,XRP2                    .SET CC=2 (FOR XRP1 HI MP65
         BR    XRP4                         . AND RETURN           MP65
RPXRP2HI CLR   XRP3,XRP2                    .SET CC=1 (FOR XRP2 HI MP65
         BR    XRP4                         . AND RETURN           MP65
.M65MP19 ANOP
         DROP  12
         TITLE '             OPTION 4...TYPE 1 SVC EXIT'
* TYPE 1 SVC EXIT
         ENTRY IEA0XE00
IEA0XE00 DS    0H
         BALR  14,0
         USING *,14
XEBASE   DS    0H                      .(BASE ADDRESS)             MP65
         CLI   IEATYPE1,X'FF'                                    A68543
         BE    XEB                                               A68543
XEB      EQU   *                                                 A68543
         MVI   IEATYPE1,0                                        A68543
         AIF   (&QM65MP).YESMP99                                  M0581
         L     X1TCB,IEATCBP+4         .GET CURRENT TCB.
         LA    XRB,WAITTCB                                       A64491
         CR    X1TCB,XRB                                         A64491
         BE    TYPE1RET                                          A64491
         C     X1TCB,IEATCBP           .IS THERE A TASK SWITCH.
         BE    TYPE1RET .              NO.RETURN TO CALLER        M0581
         CLI   SVCOPSW+3,1             WAIT                      M00013
         BE    TSWITCH                 YES                       M00013
         AGO   .NOTMP98                                           M0581
.YESMP99 ANOP                                                     M0581
         L     X1TCB,IEATCBP+4 .       .GET CURRENT TCB.         A53993
         TM    FLRETFLG,C255 .         .IF FLIH-SPIN INTERRUPTED,  MP65
         BNZ   TSWITCH .               . SET TCB,RB, GO TO EXFLIH. MP65
         C     X1TCB,IEATCBP .         .IS THERE A TASK SWITCH.   M0581
         BE    CPU2TSW .               NO.BRANCH                 A52223
.NOTMP98 ANOP                                                     M0581
         LH    3,TCBFLGS+3(X1TCB) .    GET NON-DISP BITS         A52223
         LTR   3,3 .                   Q.ANY BITS SET            A52223
         BNZ   TSWITCH .               YES.HONOR THE TASKSWITCH  A52223
         CLI   SVCOPSW,ENABMASK .      Q.REQUESTOR FULLY ENABLED  M0581
         BE    TSWITCH .               YES.ALLOW THE TASKSWITCH   M0581
         CLI   SVCOPSW+3,SVCPOST .     Q.POST CAUSED TASKSWITCH   M0581
         BE    TSWITCH .               YES.ALLOW THE TASKSWITCH   M0581
         AIF   (NOT &QM65MP).NOTMP99                              M0581
CPU2TSW  EQU   * .                                                M0581
         ST    15,IEASCSAV+X'3C' .     SAVE REG 15 OVER SHOLDTAP  M0581
         L     XDSPREF2,PREFIX2 .                                 M0581
         L     C6,IEATCBP-IEAQFX00(XDSPREF2) .                    M0581
         C     C6,IEATCBP+4-IEAQFX00(XDSPREF2) .                  M0581
         BE    COLDSHLD .          NEW2=OLD2.DON'T SHOULDER TAP   M0581
         SPACE 1
* LINKAGE TO SHOULDER-TAPPING SUBROUTINE.                         M0581
         SPACE 1
         L     13,ASHTAP .                                        M0581
         BALR  CE,13 .                 .ISSUE SHOULDER TAP        M0581
         USING *,CE .                                             M0581
         L     CE,AXEBASE .            .RESTORE EXIT BASE REG.    M0581
         USING XEBASE,CE .                                        M0581
COLDSHLD EQU   * .                                                M0581
         CLI   SVCOPSW,ENABMASK .      Q.PSW FULLY ENABLED        M0581
         BNE   TYPE1RET .              .B IF UNLOCK NOT REQUIRED  M0581
         L     XMPCVT,MPCVTPTR .       .BASE REG FOR M65MP CVT    M0581
         XC    CVTAFFLK(C2),CVTAFFLK . .CLEAR AFFIN AND LOCK      M0581
TYPE1RET DS    0H .                    .EP FOR SVC REEXECUTION.   M0581
         LM    2,15,IEASCSAV+8 .       PICK UP REGS FROM LOW CORE M0581
         AGO   .YESMP88                                           M0581
.NOTMP99 ANOP                                                     M0581
TYPE1RET DS    0H .                                               M0581
         LM    2,14,IEASCSAV+8         .LOAD REGS FROM LOW CORE.
.YESMP88 ANOP                                                     M0581
         AIF   (&MOD LT 100).R21                                 A70116
         NI    SVCOPSW+1,247           SET BC MODE               A70116
.R21     ANOP                                                    A70116
         LPSW  SVCOPSW                 .RETURN TO CALLER OF SVC.
         SPACE 2
* TASK SWITCH HANDLING.
TSWITCH  DS    0H
         L     XRB,TCBRBP(0,X1TCB)     .GET CURRENT RB.
         LM    3,4,SVCOPSW             .SAVE SVC OPSW IN RB.
         STM   3,4,RBOPSW(XRB)
         LM    3,14,IEASCSAV+12         .SAVE REGS IN TCB.
         STM   0,15,TCBGRS(X1TCB)
         MVC   TCBGRS+8(4,X1TCB),IEASCSAV+8
         AIF   (&SMF NE 1).NOSMF12                                  SMF
         BALR  14,0                .RE-ESTABLISH                    SMF
         USING *,14                .ADDRESSABILITY                  SMF
         B     IEA0DS              .BR TO DISPATCHER                SMF
.NOSMF12 ANOP                                                       SMF
         DROP  14
         TITLE '              OPTION 4...DISPATCHER'
         SPACE
*                             DISPATCHER
         SPACE
         AIF   (&SMF NE 1).NIXSMF1                                M2178
         DC    A(SYSWSAVE)         .ADDR OF SYS WAIT FLDS         M2178
.NIXSMF1 ANOP                                                     M2178
         SPACE
         ENTRY IEA0DS
IEA0DS   DS    0H
         BALR  14,0
DSBASE   DS    0H
         USING *,14
         ENTRY IEA0DS01                                          A64911
         AIF   (&QNOTMP).M65MPDS
         TM    FLRETFLG,C255           .IF FLIH-SPIN INTERRUPTED,  MP65
         BZ    DS00                                                MP65
         LPSW  EXNEWPSW                . GO TO EX FLIH.            MP65
DS00     DS    0H                      .DISP ENRTY ADDR FOR FLIH'S MP65
.M65MPDS ANOP
         AIF   (&MOD EQ 65 OR '&SER' NE 'MCH').NORMS01
         ENTRY IEARMSSW                                           19E02
*RMS MODIFIES NOP TO GET CONTROL                                  19E02
IEARMSSW NOP   RMSCODE                 .NOP FOR RMS               19E02
.NORMS01 ANOP
IEA0DS01 NOP   IEA0EF03                .STAGE 3 SWITCH.
DSWTST   EQU   *                                                  20021
         AIF   ('&TSO' NE '1').NOTSO1                             20021
*                                                                 20021
* TEST TO SEE IF THE TIME SHARING OPTION IS STARTED. IF SO, BALR  20021
* TO THE TIME SHARING DISPATCHER (PACKAGED IN IKJEAI00-TSIP).     20021
*                                                                 20021
         L     R15,CVTPTR              .PTR.TO CVT.               20021
         USING CVTSECT,R15                                        20021
         TM    CVTTSFLG,CVTTSRDY     Q.IS TIME SHARING ACTIVE.    20021
         BZ    DSWTSTZ                  .NO PROCEED               20021
         L     XDSNEW,CVTTSCVT         .PTR TO TSO SEC. CVT.      20021
         DROP  R15                                                20021
         USING TSCVT,XDSNEW                                       20021
         L     R15,TSCVTI02            .FIRST TS DISPATCHER ENT.  20021
         DROP  XDSNEW                                             20021
         BALR  XRET,R15               .TO TIME SHARING DISPAT.    20021
         USING *,XRET                                             20021
         L     XRET,ADSBASE           .REESTABLISH ADDRESSAB.     20021
         USING DSBASE,XRET                                        20021
DSWTSTZ  EQU   *                                                  20021
.NOTSO1  ANOP                                                     20021
         LM    XDSNEW,XDSOLD,IEATCBP                              20021
         AIF   (&QNOTMP).M65MP21
         L     XDSPREF2,PREFIX2        .PREFIX FOR OTHER CPU       MP65
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)  .NEW2,O MP65
.M65MP21 ANOP
         CLR   XDSNEW,XDSOLD           .IS THERE A TASK SWITCH.
         AIF   (&TIMESL EQ 0).NOTS04                               MTS0
DSWTSTZ2  BNE   CK4OLDTS                                          73982
         TM    TCBFLGS+1(XDSOLD),TCBFTS  OLD T/S TASK              MTS0
         BC    8,DSENTER                                           MTS0
         L     TSTQEREG,TSTQE           GET ADDR OF TIME-SLICE TQE MTS0
         TM    TQEFLGS(TSTQEREG),X'80'  Q.TIME-SLICE TQE ON QUEUE  MTS0
         BO    TSNOTONQ                 NO-BRANCH                  MTS0
         AGO   .NOTS05                                             MTS0
.NOTS04  ANOP                                                      MTS0
         AIF   (&QNOTMP).M65MPA                                   74770
         BNE    DSWTASK                                           74770
         AGO    .NOTS05
.M65MPA  ANOP                                                     74770
DSWTSTZ2  BNE   DSWTASK                                           73982
.NOTS05  ANOP                                                      MTS0
* PREPARE CURRENT TASK FOR RE-ENTRY.
DSENTER  L     XDSRB,TCBRBP(0,XDSNEW)  .GET CURRENT RB ADDR.
DSENTERW MVC   IEAPSW(8),RBOPSW(XDSRB) .MOVE RESUME PSW TO LOW CORE TO
         AIF   (T'&TRACER EQ 'O').GTF03                           21014
*                                       LOAD WITHOUT BASE REG.
* TRACE INTERFACE.
         AIF   (&QNOTMP).M65MP22
         ENTRY DSTRACE                                             TRMP
DSTRACE  NOP   DSSHTAP                 .B IF DISP TRACE SUPPRESSED TRMP
.M65MP22 ANOP
.GTF03   ANOP                                                     21014
*  ISSUE HOOK FOR DISPATCHER TRACE                                21014
         HOOK  EID=IHLMDSP    .ISSUE HOOK FOR DISPATCHER TRACE    21014
         AIF   (T'&TRACER EQ 'O').NOTR3                           21014
         L     XTRBASE,ATRDISP         .LOAD DISP TRACE EP.
         AIF   (&QM65MP).NOTMP07
         LR    14,11
.NOTMP07 ANOP
         BALR  XTRET,XTRBASE           .TO TRACE RTN.
         AIF   (&QM65MP).NOTMP08
         SPACE
         LM    0,15,TCBGRS(14)         .RESTORE REGS FROM CURRENT TCB.
         AGO   .NOTR3A
.NOTMP08 ANOP
         AIF   (&QNOTMP).M65MP24
         USING *,XTRET                                             TRMP
         L     CE,ADSBASE              .RESTORE DISP BASE REG.     TRMP
         DROP  XTRET                                               TRMP
         USING DSBASE,CE                                           TRMP
         LM    XDSNEW,XDSOLD,IEATCBP   .RELOAD NEW1 AND OLD1       TRMP
.M65MP24 ANOP
.NOTR3   ANOP
         AIF   (&QM65MP).NOTMP09
         LM    0,15,TCBGRS(11)    RESTORE REGS FROM CURRENT TCB
.NOTR3A  ANOP
.NOTMP09 ANOP
         AIF   (&QNOTMP).M65MP25
DSSHTAP  CLR   XDSNEW2,XDSOLD2         .IF NEW2 = OLD2             MP65
         AIF   (&TIMESL EQ 1).MPNTSSH
         BE    DSUNLOCK                .NO SHTAP IF NEW2=OLD2      MP65
.MPNTSSH ANOP
         AIF   (&TIMESL EQ 0).MPTSSH                               MPTS
         L     TSTQEREG,TSTQE-IEAQFX00(,XDSPREF2) . OTHER CPU      MPTS
         BE    DSSHTAP2                .B IF NEW2=OLD2             MPTS
* NEW2 NE OLD2. TEST FOR SPECIAL TIME-SLICING CASES.               MPTS
         LTR   XDSNEW2,XDSNEW2         .IF NEW2=0,                 MPTS
         BZ    DSSHTAP9                . ISSUE SHOULDER TAP        MPTS
         TM    TCBFLGS+1(XDSNEW2),TCBFTS                           MPTS
         BZ    DSSHTAP9                .DITTO IF NEW2 NOT IN TSG,  MPTS
         CLC   TCBDSP(C1,XDSNEW2),TCBDSP(XDSOLD2)                  MPTS
         BE    DSSHTAP3                .B IF NEW2,OLD2 IN SAME TSG MPTS
         B     DSSHTAP9                .OTHWSE, SHOULDER TAP.      MPTS
DSSHTAP2 TM    TCBFLGS+1(XDSNEW2),TCBFTS    .IF NEW2=OLD2 NOT TS,  MPTS
         BZ    DSUNLOCK                .NO  . NO SHOULDER TAP      MPTS
* NEW2,OLD2 SAME OR IN SAME TSG                                    MPTS
DSSHTAP3 TM    TQEFLGS(TSTQEREG),TQEOFFQ    .IF TSTQE2 OFF-QUEUE,  MPTS
         BO    DSSHTAP9                 . SHOULDER TAP             MPTS
         L     XDSRB,TCBRBP(,XDSOLD2)                              MPTS
         TM    RBWCF(XDSRB),C255       .SHOULDER TAP               MPTS
         BNZ   DSSHTAP9                . IF CURR RB OF OLD2 WAIT'G MPTS
         LH    XNDBITS,TCBWAIT(,XDSNEW2)                           MPTS
         LTR   XNDBITS,XNDBITS                                     MPTS
         BNZ   DSSHTAP9                . OR OLD2 NON-DISPATCHABLE  MPTS
* OLD2 A CURR TS TASK AND NEW2 IN SAME TSG                         MPTS
         LR    XDSNEW2,XDSOLD2                                     MPTS
         ST    XDSNEW2,IEATCBP-IEAQFX00(,XDSPREF2)                 MPTS
         B     DSUNLOCK                                            MPTS
.MPTSSH  ANOP
* LINKAGE TO SHOULDER-TAPPING SUBROUTINE.                          MP65
DSSHTAP9 L     CF,ASHTAP                                           MP65
         BALR  CE,CF                   .ISSUE SHOULDER TAP         MP65
         USING *,CE                                                MP65
         L     CE,ADSBASE              .RESTORE DISP BASE REG.     MP65
         USING DSBASE,CE                                           MP65
DSUNLOCK CLI   IEAPSW,ENABMASK         .IF RESUME PSW ENABLED      MP65
         BNE   DSTCBGRS                . DO NOT UNLOCK             MP65
         L     XMPCVT,MPCVTPTR         .BASE REG FOR M65MP CVT     MP65
         XC    CVTAFFLK(C2),CVTAFFLK        .CLEAR AFFIN AND LOCK  MP65
         AIF   (&SMF NE 1).NMPSMF3                                M3335
DSTCBGRS L     TIMERVAL,PREFTMRA        LOAD PREFIX TIMER DISP    M3335
         L     TIMERVAL,TIMER-IEAQFX00(TIMERVAL)                  M3335
         ST    TIMERVAL,SYSWSAVE        MARK BEG OF POSS WAIT     M3335
         LM    C0,CF,TCBGRS(XDSNEW)     .RESTORE REGS             M3335
         AGO   .M65MP25                                           M3335
.NMPSMF3 ANOP                                                     M3335
DSTCBGRS LM    C0,CF,TCBGRS(XDSNEW)     .RESTORE REGS              MP65
.M65MP25 ANOP                                                      MP65
         AIF   (&MOD LT 100).R41                                 A70116
         NI    IEAPSW+1,247            SET BC MODE               A70116
.R41     ANOP                                                    A70116
         LPSW  IEAPSW                  .TO TASK.
* TASK SWITCH INDICATED.                                           MTS0
         AIF   (&TIMESL EQ 0).NOTS10                               MTS0
PDSENTER L     TSTQEREG,TSTQE           GET ADDR OF T/S TQE        MTS0
         TM    TQEFLGS(TSTQEREG),X'80'  Q.TIME-SLICE TQE ON QUEUE  MTS0
         BO    TSNOTONQ                 NO-BRANCH                  MTS0
         L     XDSRB,TCBRBP(,XDSOLD)                               *MVT
         TM    RBWCF(XDSRB),C255                                   *MVT
         BNZ   PDSENT01                                            *MVT
         LH    XNDBITS,TCBWAIT(,XDSOLD)                            *MVT
         LTR   XNDBITS,XNDBITS                                     *MVT
         BZ    PDSENT02                .B IF OLD READY.            *MVT
PDSENT01 SR    XDSNEW,XDSNEW           .OTHWSE, SET NEW=0          *MVT
         B     TSWAIT                  . AND DEQUEUE TSTQE.        *MVT
PDSENT02 DS    0H                      .(OLD FOUND READY)          *MVT
         LR    XDSNEW,XDSOLD            YES-SET NEW EQUAL TO OLD   MTS0
         STM   XDSNEW,XDSOLD,IEATCBP                               MTS0
         B     DSENTER                  RETURN TO NON-TIME-SLICE   MTS0
*                                       CODE                       MTS0
TSNOTONQ XC    IEATCBP,IEATCBP          SET 'NEW' EQUAL TO ZERO    MTS0
         NI    TQEFLGS(TSTQEREG),X'F7'  SET TSTQE NOT COMPLETE     MTS0
         SR    XDSNEW,XDSNEW            ZERO 'NEW' REG             MTS0
         B     DSWTASK                  BR- TO NON-TIME-SLICE CODE MTS0
NQTSTASK L     XDSTQE,TSTQE             GET ADDR OF TIME-SLICE TQE MTS0
         ST    XDSNEW,IEATCBP          .UPDATE (REG USED BY TNQ)   MTS0
         AIF   (&QNOTMP).TSMPEQS
         ST    XDSNEW2,IEATCBP-IEAQFX00(XDSPREF2)     .UPDATE NEW2 TSMP
.TSMPEQS ANOP
         L     R15,ATNQ                 GET TIMER ENQUEUE ADDRESS  MTS0
         BALR  XDSLNK,R15               TO TIMER ENQUEUE ROUTINE   MTS0
         USING *,XDSLNK                                            MTS0
         L     XDSNEW,IEATCBP          .(RESTORE)                  MTS0
         AIF   (&QNOTMP).TSMPEQR
         L     XDSPREF2,PREFIX2        .(RESTORE)                  TSMP
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)  .(REST) TSMP
.TSMPEQR ANOP
         L     14,ADSBASE               REESTABLISH ADDRESSABILITY MTS0
         DROP  XDSLNK                                              MTS0
         USING DSBASE,14                                           MTS0
         B     DSREADYB                                            MTS0
         USING CVTSECT,TSREG                                       MTS0
DSPNEWTS LR    XDSWKTCB,XDSNEW         INITIALIZE WORK REG         MTS0
         AIF   (&QNOTMP).MPNEWTS
* FIND IF SEARCH REQUIRED FOR BOTH NEW'S                           TSMP
         LTR   XDSNEW2,XDSNEW2         .IF NEW2=0,                 TSMP
         BZ    DSCHNEW1                . SEARCH FROM TSG OF NEW1   TSMP
         CLC   TCBDSP(C1,XDSNEW),TCBDSP(XDSNEW2)                   TSMP
         BL    DSCHNEW1                .DITTO IF NEW2 HIGHER DSP.  TSMP
         BH    DSREADY                 .NO SRCH IF NEW2 LOWER DSP* TSMP
*        (*HERE NEW1 MUST BE ONLY READY MEMBER OF ITS TSG).        TSMP
         CR    XDSNEW2,XDSOLD2         .IF NEW2 IN NEW1'S TSG,     TSMP
         BNE   DSCHNEW2                . SEARCH FOR BOTH NEW'S     TSMP
         L     TSTQEREG,TSTQE-IEAQFX00(,XDSPREF2)     . TSTQE ON   TSMP
         TM    TQEFLGS(TSTQEREG),TQEOFFQ              . OTHER CPU  TSMP
         BZ    DSCHNEW1                               . ON-QUEUE   TSMP
DSCHNEW2 SR    XDSNEW2,XDSNEW2         .(SEARCH FOR NEW2 REQUIRED) TSMP
DSCHNEW1 SR    XDSNEW,XDSNEW           .(SEARCH FOR NEW1 REQUIRED) TSMP
.MPNEWTS ANOP
DSPTSTCB L     TSREG,CVTPTR                                        MTS0
         L     TSREG,CVTTSCE                                       MTS0
         DROP  TSREG                                               MTS0
         USING TSCE,TSREG                                          MTS0
         AIF   (&QNOTMP).TSMPN1S
         ST    XDSNEW,IEATCBP          .FREE REG FOR TSG-SRCH USE  TSMP
.TSMPN1S ANOP
OMTO     CLC   TSDPRTY,TCBDSP(XDSWKTCB) CHECK TCB DPRTY TO TSCE    MTS0
*                                       GROUP                      MTS0
*                                       IDENTIFIER                 MTS0
         BE    NXTOMTO                  EQUAL - GET NEXT TO BE     MTS0
*                                       DISPATCHED TIME SLICE TASK MTS0
         LA    TSREG,NEXTTSCE(TSREG)    GET ADDR OF NEXT TSCE      MTS0
         B     OMTO                     GO TO CHECK IF TCB PRTY'S  MTS0
*                                       MATCH                      MTS0
NXTOMTO  L     XDSNEW,TSPNEXT           GET ADDR OF NEXT TO BE     MTS0
*                                       DISPATCHED TCB             MTS0
         LTR   XDSNEW,XDSNEW                                       MTS0
         BZ    DSENDTSG                                           *MTS0
CHKTSRB  L     XDSRB,TCBRBP(0,TSTASK)   GET  CURRENT RB OF TASK    MTS0
         TM    RBWCF(XDSRB),X'FF'       IS RB IN WAIT STATUS       MTS0
         BC    7,CHKNEXT                BR IF YES                  MTS0
         LH    XNDBITS,TCBWAIT(0,TSTASK) GET NON-DISPATCHABLE BITS MTS0
         LTR   XNDBITS,XNDBITS          IS TASK NON-DISPATCHABLE   MTS0
         BC    7,CHKNEXT                BR IF YES                  MTS0
         AIF   (&QNOTMP).TSMPSCH
         NC    IEATCBP(C4),IEATCBP     .Q NEW1 ALREADY SET         TSMP
         BZ    TSNONEW1                .B IF NO .                  TSMP
* NEW1 ALREADY DETERMINED. FOUND TCB BECOMES NEW2                  TSMP
         LR    XDSNEW2,TSTASK                                      TSMP
         L     XDSNEW,IEATCBP                                      TSMP
         B     DSREADY                                             TSMP
* NEW1 NOT ALREADY DETERMINED. CHECK TSTASK WITH NEW2 AND OLD2.    TSMP
TSNONEW1 CR    TSTASK,XDSNEW2          .IF TSTASK IS NEW2(=OLD2)   TSMP
         BZ    CHKNEXT                 . RESUME SEARCH FOR NEW1    TSMP
         CR    TSTASK,XDSOLD2          .OTHWSE, IF TSTASK NOT OLD2 TSMP
         BNE   TSNEW1FD                . IT BECOMES NEW1           TSMP
* TSTASK IS OLD2 BUT NOT NEW2. NEW1 NOT DETERMINED                 TSMP
         LTR   XDSNEW,XDSNEW2          .(TENTATIVE)                TSMP
         LR    XDSNEW2,XDSOLD2         .TSTASK(=OLD2) BECOMES NEW2 TSMP
*        (CC ALREADY SET)              .IF PREV NEW2 NOT ZERO,     TSMP
         BNZ   DSREADY                 . IT BECOMES NEW1*          TSMP
*        (*CANNOT BE TIMESL SINCE NOT SAME AS OLD2 (SEE DSEARCH).  TSMP
         LR    TSTASK,XDSOLD2          .OTHWSE, RESTORE TSTASK REG TSMP
         B     CHKNEXT                 . AND SEARCH FOR NEXT NEW2. TSMP
TSNEW1FD ST    XDSNEW,IEATCBP          .STORE NEXT NEW1.           TSMP
.TSMPSCH ANOP
CHKTSTQE L     TSTQEREG,TSTQE           GET ADDR OF TIME-SLICE TQE MTS0
         TM    TQEFLGS(TSTQEREG),TQEOFFQ                           MTS0
         BNZ   TQMOVE                  .B IF TSTQE OFF-QUEUE.      MTS0
         ST    XDSNEW,IEATCBP          .UPDATE (REG USED BY TDQ)   MTS0
         AIF   (&QNOTMP).TSMPRQS
         ST    XDSNEW2,IEATCBP-IEAQFX00(XDSPREF2)     .UPDATE NEW2 TSMP
.TSMPRQS ANOP
         L     XDSTQE,TSTQE                                        MTS0
         L     R15,ATDQ                                            MTS0
         LR    XTQESAVE,TSTQEREG       . S A V E                   MTS0
         LR    TSREGSAV,TSREG          R E G I S T E R S.          MTS0
         BALR  XDSLNK,R15                                          MTS0
         USING *,XDSLNK                                            MTS0
         L     14,ADSBASE                                          MTS0
         DROP  XDSLNK                                              MTS0
         LR    TSTQEREG,XTQESAVE       R E G I S T E R S.          MTS0
         LR    TSREG,TSREGSAV          . R E S T O R E             MTS0
         USING DSBASE,14                                           MTS0
         L     XDSNEW,IEATCBP          .(RESTORE)                  MTS0
         AIF   (&QNOTMP).TSMPRQR
         L     XDSPREF2,PREFIX2        .(RESTORE)                  TSMP
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)  .(REST) TSMP
.TSMPRQR ANOP
TQMOVE   MVI   TQEVAL(TSTQEREG),X'00'  MOVE TIME SLICE LENGTH INTO MTS0
*                                       INTO                       MTS0
         MVC   TQEVAL+1(3,TSTQEREG),TSLENGTH+1    TIME SLICE TQE   MTS0
TSTREADY EQU   *                                                   MTS0
FSTTMEIN EQU   *                                                   MTS0
         CL    TSTASK,TSPLAST           NEXT EQUAL LAST IN TSCE    MTS0
         BNE   UPDTTSCE                 NO-UPDATE TSCE WITH TCBTCB MTS0
*                                       POINTER                    MTS0
         MVC   TSNEXT,TSFIRST           NO-UPDATE TSCE NEXT WITH   MTS0
*                                       FIRST                      MTS0
         AIF   (&QNOTMP).TSMPNW2
CHKNEW2  LTR   XDSNEW2,XDSNEW2         .IF NEW2 NOT SET,           TSMP
         BZ    CHKNEXT                 . RESUME SEARCH             TSMP
.TSMPNW2 ANOP
         B     DSREADY                 .BR TO DISPATCH READY TCB.  MTS0
*                                       TIME                       MTS0
*                                      SLICE TASK                  MTS0
CHKNEXT  CL    TSTASK,TSPLAST           LAST TASK IN TSCE IN WAIT  MTS0
         BE    GETFIRST                 START FROM TOP OF TSCE     MTS0
         L     XDSNEW,TCBTCB(TSTASK)    GET NEXT TIME-SLICE TASK   MTS0
EOGCHECK CL    XDSNEW,TSPNEXT           ALL T/S TASKS WAITING      MTS0
         BNE   CHKTSRB                  NO-CHECK RB STATUS         MTS0
         L     XDSWKTCB,TSPLAST         YES-GET NEXT TCB ON READY  MTS0
*                                       QUEUE                      MTS0
*                                       FOLLOWING LAST TCB IN THIS MTS0
*                                       TIME                       MTS0
*                                       SLICE GROUP                MTS0
         B     DSENDTSG                                           *MTS0
UPDTTSCE MVC   TSNEXT,TCBTCB+1(TSTASK)    UPDATE TSCE NEXT TO BE   MTS0
*                                       DISPATCHED PTR             MTS0
         AIF   (&QM65MP).TSNMPCE
         B     DSREADY                 .BR TO DISPATCH READY TCB.  MTS0
*                                       TIME-SLICE TASK            MTS0
.TSNMPCE ANOP
         AIF   (&QNOTMP).TSMPCE
         B     CHKNEW2                 .TO DSREADY UNLESS NEW2=0   TSMP
.TSMPCE  ANOP
GETFIRST L     XDSNEW,TSDPRTY           GET ADDR OF FIRST IN TSCE  MTS0
         LA    XDSNEW,0(XDSNEW)         CLEAR HIGH-ORDER BYTE      MTS0
         B     EOGCHECK                 CHECK T/S TASK STATUS      MTS0
CK4OLDTS EQU   *                                                 A73536
         TM    TCBFLGS+1(XDSOLD),TCBFTS   OLD TS TASK            A72964
         BZ    DSWTASK                  .NO-FOLLOW NON-TIME-SLICE  MTS0
*                                       CODE                       MTS0
         LTR   XDSNEW,XDSNEW            'NEW' EQUAL ZERO           MTS0
         BZ    TSWAIT                   BR AROUND DPRTY CHECK      MTS0
         CLC   TCBDSP(1,XDSOLD),TCBDSP(XDSNEW) Q. PRIORITY OF      MTS0
*                                                'NEW' AND         MTS0
*                                                'OLD' EQUAL       MTS0
         BE    PDSENTER                 YES- BR AND SET            MTS0
*                                       'NEW' EQUAL 'OLD'          MTS0
         LR    XDSWKTCB,XDSNEW          SET WORK REG EQUAL NEW     MTS0
TSWAIT   EQU   *                                                   MTS0
         L     XDSTQE,TSTQE             NO-DEQUEUE TIME-SLICE TQE  MTS0
         ST    XDSNEW,IEATCBP          .UPDATE (REG USED BY TDQ)   MTS0
         AIF   (&QNOTMP).TSMPDQS
         ST    XDSNEW2,IEATCBP-IEAQFX00(XDSPREF2)     .UPDATE NEW2 TSMP
.TSMPDQS ANOP
         L     R15,ATDQ                 TIMER DEQUEUE ADDR         MTS0
         LR    TSREGSAV,TSREG                                      MTS0
         BALR  XDSLNK,R15               TO DEQUEUE ROUTINE         MTS0
         USING *,XDSLNK                                            MTS0
         L     14,ADSBASE               REESTABLISH ADDRESSABILITY MTS0
         DROP  XDSLNK                                              MTS0
         USING DSBASE,14                                           MTS0
         LR    TSREG,TSREGSAV                                      MTS0
         L     XDSNEW,IEATCBP          .(RESTORE)                  MTS0
         AIF   (&QNOTMP).TSMPDQR
         L     XDSPREF2,PREFIX2        .(RESTORE)                  TSMP
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)  .(REST) TSMP
.TSMPDQR ANOP
.NOTS10  ANOP                                                      MTS0
DSWTASK  DS    0H                                                A73536
         AIF   ('&EMU' NE 'EMUY').NOEM1                            EM94
         TM    TCBTRN(XDSOLD),EMBIT .   Q. IS OLD TCB AN EMULATOR  EM94
         BZ    NOEM1 .                  IF NOT, THEN SKIP THIS STEPEM94
         L     C9,CVTPTR .         GET CVT POINTER                19019
         L     C9,MSBPTR(C9) .     GET MSB PTR FROM CVT           19019
         MVC   EMMCW(C5,R9MSB),C0(R9MSB) . SET 1ST PART OF MCW     EM94
         MVC   EMMCW+C5(C3,R9MSB),CS9FF . SET 2ND PART OF MCW      EM94
** ISSUE DIAGNOSE INSTR (83) TO LEAVE.EMULATOR.MODE (I-FIELD=00)   EM94
** WITH A POINTER TO THE EMULATOR MAINTENANCE.CONTROL.WORD (MCW)   EM94
** IN RECOVERY MANAGEMENT SERVICES' (RMS) MACHINE.STATUS.BLOCK(MSB)EM94
         DC    X'8300' .                DIAGNOSE TO LV.EMUL.MODE   EM94
         DC    S(EMMCW(R9MSB)) .        PTR TO EMUL.MCW            EM94
NOEM1    DS    0H .                     END OF BRANCH AROUND EMUL  EM94
.NOEM1   ANOP
         L     XDSFP,NEG32             .PREPARE TO REFERENCE FLOATING
         AR    XDSFP,XDSOLD             POINT REG SAVE AREA.
         STD   0,TCBFRS0(0,XDSFP)      .SAVE FLOATING POINT REGS.
         STD   2,TCBFRS2(0,XDSFP)       IN TCB.
         STD   4,TCBFRS4(0,XDSFP)
         STD   6,TCBFRS6(0,XDSFP)
&TAG     SETC  ''
&MAINLNE SETB  (T'&TIMER EQ 'O')
&JSTIME  SETB  ('&TIMER' EQ 'JSTIME')
.*       MAINLNE = 0 (TIMER REQUESTED)
.*       MAINLNE = 1 (NO TIMER REQUESTED)
.*       JSTIME  = 0 (INTERVAL TIMER)
.*       JSTIME  = 1 (JOB STEP TIMING AND INTERVAL TIMING)
*
         AIF   (&MAINLNE EQ 1).TESTR
&TAG     SETC  'DSTEST'
         AIF   (&JSTIME NE 1).NJST1                                MTS0
&TAG     SETC  'DSJSTDQ'                                           MTS0
.NJST1   ANOP  ,                                                   MTS0
* TIMER DEQUEUE FOR TASK INTERVALS.
         L     XDSTQE,TCBTME(0,XDSOLD) .GET TQE OF 'OLD' TASK.
         AIF   (&TIMESL EQ 0).NOTS11                               MTS0
         LR    TSREGSAV,TSREG                                      MTS0
.NOTS11  ANOP  ,                                                   MTS0
         LTR   XDSTQE,XDSTQE           .DOES TQE EXIST
         BZ    &TAG                    .BRANCH IF NO TQE.          MTS0
         TM    TQEFLGS(XDSTQE),X'8B'   .IS TQE ON QUEUE AND TASK TYPE.
         BC    5,&TAG                  .BRANCH IF NOT.             MTS0
         ST    XDSNEW,IEATCBP          .UPDATE (REG USED BY TDQ)
         AIF   (&QNOTMP).TIMPDQS
         ST    XDSNEW2,IEATCBP-IEAQFX00(XDSPREF2)     .UPDATE NEW2 TIMP
.TIMPDQS ANOP
         L     R15,ATDQ                                            MTS0
         BALR  XDSLNK,R15              TO TIMER DEQUEUE RTN
         USING *,XDSLNK
         L     14,ADSBASE              .REESTABLISH ADDRESSABILITY
         DROP  XDSLNK
         USING DSBASE,14
         L     XDSNEW,IEATCBP          .(RESTORE)
         AIF   (&QNOTMP).TIMPDQR
         L     XDSPREF2,PREFIX2        .(RESTORE)                  TIMP
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)  .(REST) TIMP
.TIMPDQR ANOP
         AIF   (&JSTIME NE 1).NOTS12                               MTS0
DSJSTDQ  EQU   *                                                   MTS0
         AIF   (&QNOTMP).MPJST00
         BAL   XSBR,DJS00              .FIND JSTQE FOR OTHER CPU   JSMP
         LR    XTQESAVE,XDSTQE         . AND SAVE                  JSMP
.MPJST00 ANOP
         L     R15,ATDQ                .PREPARE FOR DEQUEUE.       MTS0
         LR    XSEARCH,XDSOLD          .NO DAUGHTER, USE LOW TCB.  MTS0
         BAL   XSBR,DJSEARCH           .USE SUBROUTINE TO DEQUEUE. MTS0
         L     XDSNEW,IEATCBP          .(RESTORE)                  MTS0
         AIF   (&QNOTMP).MPJST01
         L     XDSPREF2,PREFIX2        .RELOAD REGS FOR NEW2,OLD2  JSMP
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)          JSMP
.MPJST01 ANOP
&TAG     SETC  'DSTEST'                                            MTS0
         AIF   (&TIMESL EQ 0).NOTS12                               MTS0
         LR    TSREG,TSREGSAV                                      MTS0
.NOTS12  ANOP                                                      MTS0
* TEST FOR READY TASK.
.TESTR   ANOP
&TAG     LTR   XDSNEW,XDSNEW       .IS NEW READY TASK FOUND.
         BZ    DSEARCH                 .BR IF NOT.
&TAG     SETC  'DSREADY'
         AIF   (&MAINLNE EQ 1).SETOLD
         AIF   (&JSTIME NE 1).SETOLD
         AIF   (&TIMESL EQ 0).NOTS06                               MTS0
         TM    TCBFLGS+1(XDSNEW),TCBFTS  NEW  EQUAL TIME SLICE TSK MTS0
         BO    DSPNEWTS                 YES-BR TO GET NEXT TO BE   MTS0
*                                       DISPATCHED TCB FROM TSCE   MTS0
.NOTS06  ANOP                                                      MTS0
         AIF   (&QNOTMP).M65MP27                               @SA74
         LTR   XDSNEW2,XDSNEW2         .IF NEW2 ALSO NON ZERO,     MP65
         BNZ   DSREADY                 . NO SEARCH REQUIRED        MP65
         LR    XDSWKTCB,XDSNEW         .OTHWSE, SEARCH FROM NEW1  20472
         B     DSNEXT                  . FOR NEXT NEW2
.M65MP27 ANOP
* SET 'OLD' = 'NEW'.
.SETOLD  ANOP
&TAG     LR    XDSOLD,XDSNEW
         AIF   ('&TSO' NE '1').NOTSO2                             20021
*                                                                 20021
* TEST TO SEE IF THE TIME SHARING OPTION IS STARTED. IF SO, BALR  20021
* TO THE TIME SHARING DISPATCHER (PACKAGED IN IKJEAI00-TSIP).     20021
*                                                                 20021
         L     R15,CVTPTR              .PTR.TO CVT.               20021
         USING CVTSECT,R15                                        20021
         TM    CVTTSFLG,CVTTSRDY     Q.IS TIME SHARING ACTIVE.    20021
         BZ    NOTSO                   .NO   PROCEED.             20021
         L     XDSTQE,CVTTSCVT         .PTR. TO TSO SECON.CVT.    20021
         DROP  R15                                                20021
         USING TSCVT,XDSTQE                                       20021
         L     R15,TSCVTI03            .SECOND TS DISP. ENT.PT.   20021
         DROP  XDSTQE                                             20021
*-NOTE-REGISTER 11 MUST CONTAIN CURRENT NEW UPON TS DISP. ENTRY,  20021
         BALR  XRET,R15               .TO TIME SHARING DISPAT.    20021
         USING *,XRET                                             20021
         L     XRET,ADSBASE           .REESTABLISH ADDRESSAB.     20021
         USING DSBASE,XRET                                        20021
NOTSO    EQU   *                                                  20021
.NOTSO2  ANOP                                                     20021
         STM   XDSNEW,XDSOLD,IEATCBP
         AIF   (&QNOTMP).M65MP28
         L     XDSPREF2,PREFIX2        .ASSURE FINAL NEW2 IN CORE  MP65
         ST    XDSNEW2,IEATCBP-IEAQFX00(,XDSPREF2)                 MP65
.M65MP28 ANOP
         AIF   (&TIMESL EQ 0).NOTS07                               MTS0
         TM    TCBFLGS+1(XDSNEW),TCBFTS  NEW  EQUAL TIME SLICE TSK MTS0
         BO    NQTSTASK                 YES-BR TO ENQUEUE T/S TASK MTS0
DSREADYB EQU   *                                                   MTS0
.NOTS07  ANOP                                                      MTS0
         AIF   (&MAINLNE EQ 1).DS02A
* TIMER QUEUING FOR TASK INTERVALS.
         L     XDSTQE,TCBTME(0,XDSNEW) .GET TQE OF NEW TASK.
         LTR   XDSTQE,XDSTQE           .IS THERE A TQE.
         BZ    DS02
         ST    XDSNEW,IEATCBP          .UPDATE (REG USED BY TNQ)
         AIF   (&QNOTMP).TIMPEQS
         ST    XDSNEW2,IEATCBP-IEAQFX00(XDSPREF2)     .UPDATE NEW2 TIMP
.TIMPEQS ANOP
         L     R15,ATNQ                GET TIMER ENQUEUE ADDR.
         BALR  XDSLNK,R15              TO TIMER ENQUEUE RTN.
         USING *,XDSLNK
         L     14,ADSBASE              .REESTABLISH ADDRESSABILITY
         DROP  XDSLNK
         USING DSBASE,14
         L     XDSNEW,IEATCBP          .(RESTORE)
         AIF   (&QNOTMP).TIMPEQR
         L     XDSPREF2,PREFIX2        .(RESTORE)                  TIMP
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)  .(REST) TIMP
.TIMPEQR ANOP
.DS02A   ANOP
DS02     DS    0H
         AIF   (&JSTIME NE 1).NJST4                                MTS0
         AIF   (&TIMESL NE 1).NTSLA                                MTS0
         LR    TSREGSAV,TSREG          .SAVE TIME-SLICE REGISTER.  MTS0
.NTSLA   ANOP  ,                                                   MTS0
         AIF   (&QNOTMP).MPJST02
         ST    XDSNEW2,IEATCBP-IEAQFX00(XDSPREF2)     .UPDATE NEW2 JSMP
         BAL   XSBR,DJS00              .FIND JSTQE FOR OTHER CPU   JSMP
         LR    XTQESAVE,XDSTQE         . AND SAVE                  JSMP
.MPJST02 ANOP
         ST    XDSNEW,IEATCBP          .UPDATE (REG USED BY TNQ)   MTS0
         LR    XSEARCH,XDSNEW          .ENQUEUE NEW TASK FOR JST.  MTS0
         L     R15,ATNQ                                            MTS0
         BAL   XSBR,DJSEARCH           .USE JOB STEP TIMING RTN.   MTS0
         L     XDSNEW,IEATCBP          .(RESTORE)                  MTS0
         AIF   (&QNOTMP).MPJST03
         L     XDSPREF2,PREFIX2        .RELOAD REGS FOR NEW2,OLD2  JSMP
         LM    XDSNEW2,XDSOLD2,IEATCBP-IEAQFX00(XDSPREF2)          JSMP
.MPJST03 ANOP
         AIF   (&TIMESL NE 1).NJST4                                MTS0
         LR    TSREG,TSREGSAV          .RESTORE TIME SLICE REG.    MTS0
.NJST4   ANOP  ,                                                   MTS0
         L     XDSFP,NEG32             .PREPARE TO REFERENCE FLOATING
         AR    XDSFP,XDSNEW             POINT REG SAVE AREA.
         LD    0,TCBFRS0(0,XDSFP)      .RESTORE FLOATING POINT REGS
         LD    2,TCBFRS2(0,XDSFP)       FROM TCB.
         LD    4,TCBFRS4(0,XDSFP)
         LD    6,TCBFRS6(0,XDSFP)
         AIF   ('&EMU' NE 'EMUY').NOEM2                            EM94
         TM    TCBTRN(XDSNEW),EMBIT .   Q. IS NEW TCB AN EMULATOR  EM94
         BZ    NOEM2 .                  IF NOT, THEN SKIP THIS STEPEM94
         L     C9,CVTPTR .         GET CVT POINTER                19019
         L     C9,MSBPTR(C9) .     GET MSB PTR FROM CVT           19019
         MVC   EMMCW(C5,R9MSB),C0(R9MSB) . SET 1ST PART OF MCW     EM94
         MVC   EMMCW+C5(C3,R9MSB),CS9FF . SET 2ND PART OF MCW      EM94
** ISSUE DIAGNOSE INSTR (83) TO ENTER.EMULATOR.MODE (I-FIELD=02)   EM94
** WITH A POINTER TO THE EMULATOR MAINTENANCE.CONTROL.WORD (MCW)   EM94
** IN RECOVERY MANAGEMENT SERVICES' (RMS) MACHINE.STATUS.BLOCK(MSB)EM94
         DC    X'8302' .                DIAGNOSE TO ENT.EMUL.MODE  EM94
         DC    S(EMMCW(R9MSB)) .        PTR TO EMUL.MCW            EM94
NOEM2    DS    0H .                     END OF BRANCH AROUND EMUL  EM94
.NOEM2   ANOP                                                      EM94
         AIF    (&QNOTMP).NOREFNO                                 M6576
         C     XDSNEW,0(0,XDSNEW) .     Q. IS IT WAIT TCB         M6576
         BE    REFRESH .                YES GO TO T.A.R.          M6576
.NOREFNO ANOP                                                     M6576
         B     DSENTER
         AIF   (&MOD EQ 65 OR '&SER' NE 'MCH').NORMS02
RMSCODE  L     R15,IEARMSAD            .GET RMS ENTRY ADDRESS     19E02
         BR    R15                     .GO TO RMS ENTRY           19E02
.NORMS02 ANOP
         SPACE
* SEARCH FOR READY TASK.
DSEARCH  DS   0H                       .QUEUE SEARCH REQUIRED.
         AIF   (&QNOTMP).M65MP31
         LTR   XDSNEW2,XDSNEW2                                     MP65
         BNZ   DSEARCH1                .B IF NEW2 NOT ZERO         MP65
         L    XDSWKTCB,A1STCB          .(BOTH NEW'S ZERO) LET TOP  MP65
         B     DSRCHLP                 . BE UPPER LIMIT OF SEARCHE MP65
DSEARCH1 LR    XRP1,XDSOLD             .(NEW2 NOT ZERO)            MP65
         LR    XRP2,XDSNEW2                                        MP65
         AIF   (&TIMESL EQ 0).MPTSSCH
         TM    TCBFLGS+1(XDSNEW2),TCBFTS                           MPTS
         BZ    DSRELPR                 .B IF NEW2 NOT TIMESL       MPTS
         L     TSTQEREG,TSTQE-IEAQFX00(,XDSPREF2)                  MPTS
         CR    XDSNEW2,XDSOLD2                                     MPTS
         BNE   DSCHCDSP                .B IF NEW2\OLD2.            MPTS
         TM    TQEFLGS(TSTQEREG),TQEOFFQ                           MPTS
         BZ    DSRELPR                 .B IF NEW2=OLD2 CURRENT     MPTS
         B     DSCHTSN2                . OTHWSE, SEARCH FOR NEW2   MPTS
DSCHCDSP CLC   TCBDSP(1,XDSNEW2),TCBDSP(XDSOLD2)                   MPTS
         BNE   DSCHTSN2      .SEARCH FOR NEW2 OF OLD2 DIFF DSP.    MPTS
* NEW2 AND OLD2 IN SAME TSG. FIND IF OLD2 ENTITLED TO CONTINUE.    MPTS
         TM    TQEFLGS(TSTQEREG),TQEOFFQ                           MPTS
         BO    DSCHTSN2      .SEARCH FOR NEW2 IF TSTQE2 OFF-QUEUE. MPTS
         L     XDSRB,TCBRBP(XDSOLD2)                               MPTS
         TM    RBWCF(XDSRB),C255                                   MPTS
         BNZ   DSCHTSN2      .SEARCH FOR NEW2 IF OLD2 WAITING.     MPTS
         LH    XNDBITS,TCBWAIT(XDSOLD2)                            MPTS
         LTR   XNDBITS,XNDBITS                                     MPTS
         BNZ   DSCHTSN2      .SEARCH FOR NEW2 IF OLD2 NON-DISP'BLE MPTS
         LR    XDSNEW2,XDSOLD2                                     MPTS
         B     DSRELPR       .(OLD2 READY AND TSTQE2 ON-QUEUE).    MPTS
* GIVEN NEW2 NON-CURRENT TIMESL TASK. SEARCH FOR NEW2 REQUIRED.    MPTS
DSCHTSN2 SR    XDSNEW2,XDSNEW2         .SET NEW2=0.                MPTS
DSRELPR  DS    0H                      .INIT NEW2 ESTAB'D.         MPTS
.MPTSSCH ANOP
         L     CC,ASWBASE              .TASKSWCH BASE              MP65
         USING SWBASE,CC               . FOR LINKAGE TO            MP65
         BAL   XRP4,RELPRIOR           . RELATIVE-PRIORITY SUBRTE. MP65
         DROP  CC                                                  MP65
         BP    DSEARCH2                .B IF NEW2 HIGHER THAN OLD1 MP65
         LR    XDSWKTCB,XRP2           . START SEARCH              MP65
         B     DSRCHLP                 . WITH NEW2.                MP65
DSEARCH2 DS    0H                      .(OLD1 HIGHER THAN NEW2)    MP65
.M65MP31 ANOP
         LR   XDSWKTCB,XDSOLD
DSRCHLP  L     XDSRB,TCBRBP(0,XDSWKTCB)     .GET CURRENT RB ON TASK.
         AIF   (&TIMESL EQ 0).NOTS08                               MTS0
         TM    TCBFLGS+1(XDSWKTCB),TCBFTS     Q. T/S TASK          MTS0
         BO    DSPTSTCB                 YES-BR TO GET NEXT TO BE   MTS0
*                                       DISPATCHED FROM TSCE       MTS0
.NOTS08  ANOP                                                      MTS0
         TM    RBWCF(XDSRB),X'FF'      .IS RB IN WAIT STATUS.
         BC    7,DSNEXT                .BR IF YES.
         LH    XNDBITS,TCBWAIT(0,XDSWKTCB) .GET NON-DISPATCHABLE BITS.
         LTR   XNDBITS,XNDBITS         .IS TASK NON-DISPATCHABLE.
         BC    7,DSNEXT                .BR IF YES.
         AIF   (&QM65MP).NOTMP12
* READY TASK FOUND.
         LR    XDSNEW,XDSWKTCB         .SET NEW REG=READY TCB.
*                                       CONTROL GOING TO LOWER PRIORITY
*                                       TASK.
.NOTMP12 ANOP
         AIF   (&QNOTMP).M65MP32
* READY TASK FOUND. FIND IF READY TCB IS NEW2 OR OLD2              MP65
         CLR   XDSWKTCB,XDSNEW2                                    MP65
         BNE   DSNOTNW2                .B IF FOUND TCB NOT NEW2    MP65
         CLR   XDSNEW2,XDSOLD2                                     MP65
         BE    DSNEXT                  .B IF NEW2 IS OLD2          MP65
         SR    XDSNEW2,XDSNEW2         .OTHWSE, MAKE TCB NEXT NEW1 MP65
         B     DSFOUND                                             MP65
DSNOTNW2 CLR   XDSWKTCB,XDSOLD2                                    MP65
         BNE   DSFOUND                 . SEARCH C6MPLETE           MP65
         LTR   XDSNEW2,XDSNEW2                                     MP65
         BNZ   DSXCHANG                .IF NEW2 NOT ZERO GO SWITCH MP65
         LR    XDSNEW2,XDSWKTCB        .OTHWSE, MAKE TASK          MP65
         LTR   XDSNEW,XDSNEW           .TEST IF ALREADY HAVE NEW1  MP65
         BNZ   DSREADY                 . YES - SEARCH COMPLETE     MP65
         B     DSNEXT                  .RESUME SEARCH TO FIND NEW1 MP65
DSXCHANG LR    XDSNEW,XDSNEW2          .PREVIOUS NEW2 BECOMES NEW1 MP65
         LR    XDSNEW2,XDSWKTCB        . AND OLD2 BECOMES NEW2     MP65
         B     DSREADY                                             MP65
DSFOUND  LTR   XDSNEW,XDSNEW                                       MP65
         BNZ   DSFOUND2                .IF NEW1 NOT ALREADY SET    MP65
         LR    XDSNEW,XDSWKTCB         . SET IT TO TCB JUST FOUND  MP65
         LTR   XDSNEW2,XDSNEW2         . AND                       MP65
         BZ    DSNEXT                  . IF NEW2 NOT SET           MP65
         B     DSREADY                 .  LET NEXT READY TCB BE NE MP65
DSFOUND2 LTR   XDSNEW2,XDSNEW2         .(NEW1 ALREADY FOUND)       MP65
         BNZ   DSREADY                 .IF NEW2 NOT ALREADY SET    MP65
         LR    XDSNEW2,XDSWKTCB        . SET IT TO TCB JUST FOUND  MP65
.M65MP32 ANOP
         B     DSREADY
         SPACE
         AIF   (&TIMESL EQ 0).TSMPNEX
* RESUME SEARCH AFTER SCAN OF TIMESL-PRIORITY GROUP.              *MTS0
DSENDTSG DS    0H                      .(END OF TIMESL GROUP)      MTS0
         AIF   (&QNOTMP).TSMPNEX
         L     XDSNEW,IEATCBP          .RELOAD NEW1 REG            TSMP
.TSMPNEX ANOP
* REF NEXT TCB IN READY QUEUE.
DSNEXT   DS    0H
         L     XDSWKTCB,TCBTCB(0,XDSWKTCB)  .GET NEXT TCB ADDR.
         LTR   XDSWKTCB,XDSWKTCB       .END OF QUEUE.
         BC    7,DSRCHLP               .BR IF NOT TO CONTINUE SEARCH.
* NO READY TASK FOUND.
* PLACE SYSTEM INTO WAIT STATE USING 'PSEUDO' TASK.
         LA    XDSRB,WAITPRB           .SET UP ADDR. OF PSEUDO RB.
         AIF   (&QM65MP).NOTMP14
         LR    XDSRB-1,XDSRB           .SET UP FOR STORE MULTIPLE.
         AIF   ('&TSO' NE '1').NOTSO3                             20021
*                                                                 20021
* TEST TO SEE IF THE TIME SHARING OPTION IS STARTED. IF SO, BALR  20021
* TO THE TIME SHARING DISPATCHER (PACKAGED IN IKJEAI00-TSIP).     20021
*                                                                 20021
         L     R15,CVTPTR              .PTR.TO CVT.               20021
         USING CVTSECT,R15                                        20021
         TM    CVTTSFLG,CVTTSRDY     Q.IS TIME SHARING ACTIVE.    20021
         BZ    NOTSO1                  .NO   PROCEED.             20021
         L     R15,CVTTSCVT            .PTR TO TSO SECONDARY CVT  20021
         DROP  R15                                                20021
         USING TSCVT,R15                                          20021
         L     R15,TSCVTI03            .SECOND TS DISP. ENTRY.    20021
         DROP  R15                                                20021
         BALR  XRET,R15               .TO TIME SHARING DISPAT.    20021
         USING *,XRET                                             20021
         L     XRET,ADSBASE           .REESTABLISH ADDRESSAB.     20021
         USING DSBASE,XRET                                        20021
NOTSO1   EQU   *                                                  20021
.NOTSO3  ANOP                                                     71750
         L     R15,16                  CVT                       A71750
         CLC   IEATCBP+1(3),CVTHEAD+1-CVTMAP(R15) SECOND         A71750
         BE    NOTS02                  YES                       A71750
         MVC   IEATCBP+1(3),CVTHEAD+1-CVTMAP(R15)  SEARCH        A71750
         L     XDSOLD,IEATCBP                                    A71750
         B     DSEARCH                                           A71750
NOTS02   EQU   *                                                 A71750
.NOTMP14 ANOP
         AIF   (&QNOTMP).M65MP35
         LTR   XDSNEW,XDSNEW           .IF NEW1 NOT ZERO           MP65
         BNZ   DSCPU2WT                . NEW2 MST BE ZERO          MP65
         LR    XDSNEW,XDSRB            .NEW1                       MP65
         LR    XDSOLD,XDSRB            . AND OLD1                  MP65
         STM   XDSNEW,XDSOLD,IEATCBP   . BECOME WAIT TCB           MP65
         LTR   XDSNEW2,XDSNEW2         .IF NEW2 IS ZERO            MP65
         BZ    DSCPU2WT .            YES                          M6576
REFRESH  EQU   * .                                                M6576
         L     XSBR,TRANSREF .       ADDR OF T.A.REFRESH          M6576
         BR    XSBR .                GO TO T.A.R.                 M6576
TRANSREF DC    V(IEAQTR02) .                                      M6576
DSCPU2WT LR    XDSNEW2,XDSRB           .(NEW2=0) SET NEW2 = WAIT T MP65
.M65MP35 ANOP
         STM   XDSRB-1,XDSRB,IEATCBP   .SET 'NEW' AND 'OLD'= PSEUDO TCB
         AIF   (&QM65MP).NOSMF6                                   M3335
        AIF   (&SMF NE 1).NOSMF6                                   SMF
* SAVE VALUE IN TIMER WHICH MARKS BEGINNING OF SYSTEM WAIT          SMF
         L     TIMERVAL,INTTIME        .READ OUT INTERVAL TIMER     SMF
         ST    TIMERVAL,SYSWSAVE       .SAVE VALUE                  SMF
.NOSMF6  ANOP                                                      SMF
         AIF   (&QM65MP).NOTMP15
         L     XSBR,TRANSREF .         ADDR OF TRANS AREA REFRESH M6576
         BR    XSBR .                  GO TO T.A.R.               M6576
TRANSREF DC    V(IEAQTR02) .                                      M6576
.NOTMP15 ANOP
         AIF   (&QNOTMP).M65MP36
         B     DSREADY
.M65MP36 ANOP
         SPACE 2
         AIF   (&SMF NE 1).NXSMF77                                M3220
* SYSWSAVE PUT HERE FOR ADDRESSABILITY                            M3220
SYSWSAVE DC    F'0'          .TIMER VALUE SAVE FIELD              M3220
         DC    F'0'          .SYSWAIT TIME ACC FIELD              M3544
         DC    F'0'                    INT TIMER BEFORE RESET    A60581
.NXSMF77 ANOP                                                     M3220
         SPACE 3
         AIF   (&MAINLNE EQ 1).CONT3
         AIF   (&JSTIME NE 1).CONT3
* JOB STEP TIMING SUBROUTINE.
         AIF   (&QNOTMP).MPJST04
*                                                                  JSMP
* ENTRY POINT FOR FINDING JOB-STEP TQE (IF ANY) FOR OTHER CPU      JSMP
*                                                                  JSMP
DJS00    SR    R15,R15                 .ZERO ATNQ/ATDQ PARAM REG   JSMP
         LR    XSEARCH,XDSOLD2         .CURRENT TCB OTHER CPU      JSMP
         SR    XDSTQE,XDSTQE           .INITIALIZE JSTQE REG       JSMP
*                                                                  JSMP
* ENTRY POINT FOR ENQUEUING OR DEQUEUING JOB-STEP TQE'S            JSMP
*                                                                  JSMP
.MPJST04 ANOP
DJSEARCH LA    XJSTCB,WAITTCB          WAIT TASK                 A64491
         ST    XJSTCB,WAITTCB          INITIALIZE WAIT PRB       A64491
         MVI   WAITPSW,X'FF'           INIT WAIT                 A64491
         MVI   WAITPSW+1,X'06'     PSW                           A64491
         CR    XJSTCB,XSEARCH                                    A64491
         BCR   8,XSBR                  DON'T TOUCH DUMMY TASK.     MTS0
         L     XJSTCB,TCBLTC(0,XSEARCH) .GET DAUGHTER.             MTS0
         LTR   XJSTCB,XJSTCB           .IS THERE A DAUGHTER.       MTS0
         BNZ   DJS02                   .USE DAUGHTER IF SO.        MTS0
         LR    XJSTCB,XSEARCH          .OTHERWISE, USE SEARCH.     MTS0
DJS02    L     XJSTCB,TCBJSTCB(0,XJSTCB) .GET JOB STEP TOP TCB.    MTS0
         L     XJSTCB,TCBOTC(0,XJSTCB) .GET MOTHER'S TCB....       MTS0
*              FOR A GOOD GUY, THIS IS AN INITIATOR TCB.           MTS0
         LTR   XJSTCB,XJSTCB           TEST FOR  GOOD MOTHER PTR.  MTS0
         BCR   8,XSBR                  .BRANCH IF NOT FOUND.       MTS0
         TM    TCBPKF(XJSTCB),X'F0'    .INITIATOR HAS NONZERO KEY. MTS0
         BCR   8,XSBR                  .BRANCH IF NOT INITIATOR.   MTS0
         L     XDSTQE,TCBTME(0,XJSTCB) .GET TQE.                   MTS0
         LTR   XDSTQE,XDSTQE           .IS THERE A TQE.            MTS0
         BCR   8,XSBR                  .BRANCH IF NO.              MTS0
         AIF   (&QNOTMP).MPJST05
         LTR   R15,R15                 .IF NEITH ATNQ NOR ATDQ,    JSMP
         BCR   C8,XSBR                 .RETURN.                    JSMP
.MPJST05 ANOP
         TM    TQEFLGS(XDSTQE),X'0B'   .TEST FOR GOOD TASK TQE.    MTS0
         BC    5,DJS04                                             MTS0
         AIF   (&QNOTMP).MPJST06
* TEST FOR XSEARCH (OLD1 OR NEW1) BEING OF SAME JOB AS OLD2.       JSMP
         CR    XDSTQE,XTQESAVE         .COMP JSTQE'S FOR CPU'S     JSMP
         BNE   DJS03                   .B IF DIFFERENT.            JSMP
         SPACE 1
*    Q.ARE THE JOBSTEP TCB'S THE SAME FOR EACH CPU?              A38464
*        YES.THEN BOTH CPU'S HAVE MEMBERS OF THE SAME JOBSTEP    A38464
*        NO.THEN ONE CPU IS EXECUTING THE INITIATOR/TERMINATOR,  A38464
*           SINCE BOTH HAVE THE SAME JOBSTEP TQE.                A38464
         SPACE 1
         L     XDSNEW,IEATCBP+4-IEAQFX00(XDSPREF2) . GET OLD2    A38464
         CLC   TCBJSTCB+1(3,XSEARCH),TCBJSTCB+1(XDSNEW) .        A38464
         BNE   DJS03 .            NO.ONE TCB IS THE INITIATOR.   A38464
*                                 DON'T HALVE OR DOUBLE THE TQE  A38464
         LR    XDSOLD,R15              .SAVE ATNQ/ATDQ ADDR        JSMP
         L     R15,ATDQ                .DEQUEUE JOB-STEP TQE       JSMP
         BALR  XDSLNK,R15              . TO GET ABS TQEVAL.        JSMP
         USING *,XDSLNK                                            JSMP
* TEST FOR BEGIN OR END SAME JOB-STEP ON BOTH CPU'S                JSMP
         C     XDSOLD,ATNQ             .BRANCH ON TNQ FOR NEW1     JSMP
         L     XDSOLD,IEATCBP+4        .(RESTORE)                  JSMP
         LR    XDSTQE,XTQESAVE         .(RESTORE)                  JSMP
         BNE   DJS08                   . VS TDQ FOR OLD1           JSMP
         L     XTQESAVE,TQEVAL(,XDSTQE) .(BEGIN CONCURR TIMING)    JSMP
         SRL   XTQESAVE,C1             .HALVE ABS TQEVAL.          JSMP
         B     DJS09                                               JSMP
DJS08    L     XTQESAVE,TQEVAL(,XDSTQE) .(END CONCURR TIMING)      JSMP
         SLL   XTQESAVE,C1             .DOUBLE ABS TQEVAL.         JSMP
DJS09    ST    XTQESAVE,TQEVAL(,XDSTQE) .STORE ADJUSTED ABS TQEVAL,JSMP
         L     R15,ATNQ                . AND SET UP RE-ENQUEUE.    JSMP
         DROP  XDSLNK                                              JSMP
.MPJST06 ANOP
DJS03    BALR  XDSLNK,R15              .USE TIMER NQ/DQ ROUTINE.   MTS0
         USING *,XDSLNK                                            MTS0
         L     14,ADSBASE              .GET BACK BASE REGISTER.    MTS0
         DROP  XDSLNK                                              MTS0
         USING DSBASE,14                                           MTS0
         BR    XSBR                    .RETURN CONTROL.            MTS0
*                                                                  MTS0
DJS04    C     R15,ATNQ                .NOT TASK TQE, SO WE RETURN MTS0
         BCR   7,XSBR                  UNLESS WE ARE ENQUEUEING.   MTS0
*                                                                  MTS0
*        NOW WE MUST UNDO THE CHANGES MADE  IN THE TQE BY WAIT,    MTS0
*              AND CONVERT THE REAL TQE USED FOR WAIT TIMING TO A  MTS0
*              TASK TQE TO BE USED FOR JOB STEP TIMING.            MTS0
*                                                                  MTS0
         TM    TQEFLGS(XDSTQE),X'03'   .TEST FOR REAL.             MTS0
         BCR   14,XSBR                 .OTHERWISE, DON'T PROCESS.  MTS0
         LR    XTQESAVE,XDSTQE         .SAVE TQE POINTER.          MTS0
         L     R15,ATDQ                .GET DEQUEUE ADDRESS.       MTS0
         BALR  XDSLNK,R15              .DEQUEUE THE TQE.           MTS0
         USING *,XDSLNK                                            MTS0
         L   14,ADSBASE                .RESTORE BASE REG.          MTS0
         DROP  XDSLNK                                              MTS0
         USING DSBASE,14                                           MTS0
         LR    XDSTQE,XTQESAVE         .RESTORE TQE POINTER.       MTS0
         MVC   TQEVAL(4,XDSTQE),TQESAV(XDSTQE) .RESTORE JOB TIME.  MTS0
         NI    TQEFLGS(XDSTQE),X'FC'   .MARK AS TASK TYPE.         MTS0
         L     R15,ATNQ                .GET ENQUEUE ADDRESS.       MTS0
         B     DJS03                   .GO BACK AND ENQUEUE.       MTS0
.CONT3   ANOP
         TITLE '             OPTION 4...STAGE 3 OF THE EXIT EFFECTOR'
         SPACE
         USING DSBASE,14
IEA0EF03 DS    0H
         MVC   PINPSW+2(1),PINPSW+1 .  SAVE CURRENT AMWP FIELD    M2352
PUTON    OI    PINPSW+1,X'04' ZAP X'04' TO X'06' TO SET WAIT BIT  M2352
         AIF   (&QNOTMP).M65MP37
         L     X3OLD2,PREFIX2          .PREFIX FOR OTHER CPU       MP65
         L     X3OLD2,IEATCBP+4-IEAQFX00(,X3OLD2)     .HOLD OLD2   MP65
         L    XAEQBASE,VECIERLC        . BASE FOR AEQ PTRS         MP65
         USING IECIERLC,XAEQBASE                                   MP65
.M65MP37 ANOP
         LA    X3CURR,AEQJ             .INITIALIZE IQE PTR.
EFLOOP   LR    X3PREV,X3CURR
         L     X3CURR,IQELNK(0,X3PREV) .GET CURRENT IQE ADDR.
         LTR   X3CURR,X3CURR           .TEST FOR END OF QUEUE.
         BC    4,EFRQE                 .BR IF END OF IQE QUEUE.
EFI05    L     X3CURR,IQEIRB(X3CURR)                             68764
         TM    IQELNK+10(X3CURR),X'C0'                         @SA75841
         L     X3CURR,IQELNK(X3PREV)                             68764
         BC    11,EFRQE                                        @SA75841
         SPACE
* IQE'S EXIST- PROCESS THROUGH QUEUE.
         L     X3TCB,IQETCB(0,X3CURR)  .GET TCB ADDR FROM IQE.
         TM    TCBFLGS(X3TCB),TCBFX    .ARE ASYNCH. EXITS SUPRESSED.
         BC    1,EFLOOP                .BR IF YES.
         AIF   (&QNOTMP).M65MP38
* FIND IF TCB IS OLD2 (CURRENT TASK ON OTHER CPU)                  MP65
         LA    X3TCB,C0(X3TCB)         .CLEAR HIGH-ORDER BYTE.     MP65
         CR    X3TCB,X3OLD2                                        MP65
         BNE   EFIRB                   .B IF TCB NOT OLD2          MP65
         L     CF,ASHTAP               .BASE AND EP FOR SHOLDTAP.  MP65
         BALR  CE,CF                   .ISSUE SHOULDER TAP         MP65
         USING *,CE                                                MP65
         L     CE,ADSBASE                                          MP65
         USING DSBASE,CE                                           MP65
         B     EFLOOP                  . AND GO TO NEXT IQE-AEQ.   MP65
.M65MP38 ANOP
* CHECK WHETHER IQE IS FOR SAME TCB IF IRB IS ACTIVE.
EFIRB    DS    0H                      .CHECK IRB.
         L     X3IRB,IQEIRB(0,X3CURR)  .GET IRB ADDR FROM IQE.
         TM    RBSTAB+1(X3IRB),RBFACTV .IS IRB ACTIVE.
         BZ    EFDQ1                  .BRANCH IF NOT.             20021
* CHECK TCB'S.
         L     X3IRBIQE,RBIQUE(0,X3IRB)     .GET ADDR OF TOP IQE.
         CLC   IQETCB+1(3,X3CURR),IQETCB+1(X3IRBIQE)  .ARE TCB'S EQUAL.
         BNE   EFLOOP                                 .BR IF NOT EQUAL.
         AIF   ('&TSO' NE '1').NOTSO4                             20021
         B     EFDQ                   .GO DEQUE IQE.              20021
.NOTSO4  ANOP                                                     20021
* DEQUEUE IQE FROM AEQ.
EFDQ1    EQU   *                                                  20021
         AIF   ('&TSO' NE '1').NOTSO5                             20021
         TM    RBSTAB1(X3IRB),RBATTN Q.IS IRB AN ATTN. RB.        20021
         BZ    EFDQ                    .NO.                       20021
         TM    TCBTSFLG(X3TCB),TCBATT Q.TCB ATTEN. EXIT ALLOWED.  20021
         BO    EFLOOP                   .NO.                      20021
         LR    T1,X3TCB                .TASK TREE SCAN .          20021
SCANZ    EQU   *                                                  20021
         L     X3WK15,TCBLTC(,T1)      .ADDRESS OF DESCENDENT.    20021
         LTR   X3WK15,X3WK15         .Q.ANY DESCENDENTS FOUND.    20021
         BNZ   CHECKZ                  .YES-CHECK IT.             20021
SCANY    EQU   *                                                  20021
         CR    X3TCB,T1              .Q.THIS THE REQUESTUNG TASK  20021
         BE    EFDQ                    .YES-DONE CHECKING.        20021
         L     X3WK15,TCBNTC(,T1)      .ADDRESS OF SISTER TASK.   20021
         LTR   X3WK15,X3WK15         .Q.ANY SISTER TASKS.         20021
         BNZ   CHECKZ                   .YES.                     20021
         L     T1,TCBOTC(T1)            .PICK UP MOTHER.          20021
         B     SCANY                    .LOOP.                    20021
CHECKZ   EQU   *                                                  20021
         TM    TCBFLGS(X3WK15),TCBFX .Q.ARE ASYNCH.EXITS SUPPRESS 20021
         BO    EFLOOP                  .BRANCH IF YES             20021
         TM    TCBTSFLG(X3WK15),TCBATT .Q.ATTENTION EXITS ALLOWED 20021
         BO    EFLOOP                  .NO.                       20021
         LR    T1,X3WK15               .STEP TO NEXT TO BE CHECK  20021
         B     SCANZ                   .GO AGAIN.                 20021
.NOTSO5  ANOP                                                     20021
EFDQ     MVC   IQELNK(4,X3PREV),IQELNK(X3CURR)   .DEQUEUE IQE.
         CL    X3CURR,AEQK             .WAS LAST IQE DEQUEUED.
         BNE   *+8                     .BR IF NOT.
         ST    X3PREV,AEQK             .SET PTR TO LAST IQE.
* QUEUE IQE ON IRB IN FIFO ORDER.
         LA    X3IQE,RBIQUE(0,X3IRB)   .INITIALIZE REG WITH IQE FIELD.
EFIQELP  LR    X3IRBIQE,X3IQE          .ADVANCE TO NEXT IQE.
         L     X3IQE,0(0,X3IRBIQE)     .GET IQE ADDR.
         LA    X3IQE,0(0,X3IQE)        .CLEAR HI ORDER BYTE.
         LTR   X3IQE,X3IQE             .END OF QUEUE.
         BC    7,EFIQELP               .BR IF NOT.
         IC    1,0(X3IRBIQE)      SAVE USE COUNT                   5342
         ST    X3CURR,IQELNK(0,X3IRBIQE)    .HOOK IQE ON END OF QUEUE.
         STC   1,0(X3IRBIQE)      RESTORE USE COUNT                5342
         ST    X3IQE,IQELNK(0,X3CURR)  .SET LAST IQE LINK TO 0.
* SET UP REGS 0 AND 1.
         LR    0,X3CURR                .SET IQE ADDR IN REG 0.
         L     1,IQEPARAM(0,X3CURR)    .SET PARAM IN REG 1.
         TM    RBSTAB+1(X3IRB),X'08'    .IS 'QE' TYPE IQE          RO0A
         BC    8,EFSETYPE               .NO, CORRECT TYPE TO IQE   RO0A
         TM    RBSTAB+1(X3IRB),X'04' .IS IQE TO BE RETRNED AT EXIT RO0A
         BC    8,EFGOINIT               .NO, BYPASS CORRECTING     RO0A
* INITIALIZE IRB.
EFSETYPE OI    RBSTAB+1(X3IRB),X'0C'    .SET 'QE' TYPE TO IQE      RO0A
EFGOINIT BAL   X3RET,IRBINTL         .TO IRB INITIALIZATION RTN.   RO0A
         B     EFLOOP+2                .CYCLE
         EJECT
* PROCESS RQE'S (16* RQE'S).
         SPACE
EFRQE    TM    AEQJ,X'FF'              .IS IQE-AEQ EMPTY.
         BC    12,*+8                  .BR IF NOT.
         MVI   IEA0DS01+1,X'00'        .SET STAGE 3 SWITCH OFF.
*
         LA    X3CURR,AEQA             .INITIALIZE RQE PTR.
EFLOOP2  LR    X3PREV,X3CURR
         LH    X3CURR,RQELNK(0,X3PREV) .GET CURRENT RQE ADDR.
         CH    X3CURR,AEQC             .TEST FOR END OF QUEUE.
         BE    EFEND                   .BR IF END.
* RQE'S EXIST- PROCESS THROUGH QUEUE.
         AIF   (&QNOTMP).M65MP39
* FIND IF TCB IS OLD2 (CURRENT TASK ON OTHER CPU)
         L     X3DEB,RQEDEB(C0,X3CURR) .DEB ADDR.                  MP65
         L     X3TCB,DEBTCBAD(0,X3DEB) .         GET TCB ADDR    A40746
         LA    X3TCB,C0(X3TCB)         .CLEAR HIGH-ORDER BYTE.     MP65
         CR    X3TCB,X3OLD2                                        MP65
         BNE   EFQSIRB                 . B IF TCB NOT OLD2.        MP65
         L     X3IRB,DEBIRB(0,X3DEB)  GET IRB ADDR             @SA78626
         TM    RBSTAB+1(X3IRB),RBFACTV  IRB ACTIVE             @SA78626
         BC    8,EFQIRB                 NO                     @SA78626
         L     X3IRBIQE,RBIQUE(0,X3IRB)  GET RQE               @SA78626
         CLC   RQETCB+1(3,X3CURR),RQETCB+1(X3IRBIQE) TCB EQ    @SA78626
         BNE   EFLOOP2                  NO                     @SA78626
EFQIRB   DS    0H                                              @SA78626
         L     CF,ASHTAP               .BASE AND EP FOR SHOLDTAP.  MP65
         BALR  CE,CF                   .ISSUE SHOULDER TAP         MP65
         USING *,CE                                                MP65
         L     CE,ADSBASE                                          MP65
         USING DSBASE,CE                                           MP65
         B     EFLOOP2                 . AND GO TO NEXT RQE-AEQ.   MP65
.M65MP39 ANOP
* CHECK FOR IRB REQUEST.
EFQSIRB  DS    0H                      .CHECK IRB.
         TM    RQEUCB+1(X3CURR),X'01'  .TEST FOR SIRB REQUEST.
         BC    1,SYSERR                .BR IF SIRB REQUEST.
         AIF   (&QM65MP).NOTMP38
         L     X3DEB,RQEDEB(0,X3CURR)  .GET DEB ADDR.
         L     X3TCB,DEBTCBAD(0,X3DEB) .         GET TCB ADDR    A40746
         LA    X3TCB,0(X3TCB)          CLEAR HI ORDER BYTE         098
.NOTMP38 ANOP
         TM    TCBFLGS(X3TCB),TCBFX    .ARE ASYNCH EXITS SUPPRESSED.
         BC    1,EFLOOP2               .BR IF YES- DEFER REQUEST.
* CHECK WHETHER IRB IS ACTIVE.
         L     X3IRB,DEBIRB(0,X3DEB)   .GET IRB ADDR FROM DEB.
         TM    RBSTAB+1(X3IRB),RBFACTV .IS IRB ACTIVE.
         BC    8,EFDQ2                 .BR IF NOT.
* CHECK TCB'S.
         L     X3IRBIQE,RBIQUE(0,X3IRB)     .GET ADDR OF TOP RQE.
         CLC   RQETCB+1(3,X3CURR),RQETCB+1(X3IRBIQE)  .ARE TCB'S EQUAL.
         BNE   EFLOOP2                                .BR IF NOT EQUAL.
* DEQUEUE RQE FROM AEQ.
EFDQ2    MVC   RQELNK(2,X3PREV),RQELNK(X3CURR)   .DEQUEUE RQE.
         CH    X3CURR,AEQB             .WAS LAST RQE DEQUEUED.
         BNE   *+8                     .BR IF NOT.
         STH   X3PREV,AEQB             .SET PTR TO LAST RQE.
* QUEUE RQE ON IRB.
         LA    X3IQE,RBIQUE+2(0,X3IRB) .INIT REG WITH RQE FIELD ADDR.
EFRQELP  LR    X3IRBIQE,X3IQE
         LH    X3IQE,0(0,X3IRBIQE)     .GET RQE ADDR.
         LTR   X3IQE,X3IQE             .END OF QUEUE.
         BC    7,EFRQELP               .BR IF NOT.
         STH   X3CURR,RQELNK(0,X3IRBIQE)    .HOOK RQE ON END OF QUEUE.
         STH   X3IQE,RQELNK(0,X3CURR)  .SET LAST RQE LINK TO 0.
* SET UP REG 1.
         LR    1,X3CURR                .SET RQE ADDR IN REG 1.
* INITIALIZE IRB.
         BAL   X3RET,IRBINTL           .TO IRB INITIALIZATION RTN.
         B     EFLOOP2+2
         EJECT
* END OF IQE - RQE PROCESSING.
EFEND    EQU   *                                                 A67917
SIR2     CLC   AEQA(2),AEQC        RQE AEQ EMPTY                 A67917
         BE    *+8                     .BR IF YES.
         OI    IEA0DS01+1,X'F0'        .SET INDICATION TO ENTER STG 3.
PUTOFF   MVC   PINPSW+1(1),PINPSW+2 .  RESTORE ORIGINAL AMWP      M2352
         MVI   PINPSW+2,X'00' .        NEATNESS COUNTS            M2352
         BC    15,DSWTST
         SPACE 2
         AIF   (&QNOTMP).AEQBAS9
VECIERLC DC    V(IECIERLC)             .BASE FOR AEQ POINTERS.     MP65
.AEQBAS9 ANOP
         SPACE
         TITLE '             OPTION 4...SIRB PROCESSING'
         SPACE
* SIRB REQUEST FOR SYSTEM ERROR PROCESSING.
SYSERR   DS    0H
         L     X3TCB,AERTCB            .GET ERROR TCB ADDRESS.
         LA    XSIRB,SIRB              .GET SIRB ADDR.
         TM    RBSTAB+1(XSIRB),RBFACTV .IS SIRB ACTIVE.
         BO    EFLOOP2                 .BR IF YES.
         NI    RQEUCB+1(X3CURR),X'FE'  SET SIRB REQUEST FLAG OFF.
* DEQUEUE RQE FROM AEQ.
         MVC   RQELNK(2,X3PREV),RQELNK(X3CURR)   .DEQUEUE RQE.
         CH    X3CURR,AEQB             .END OF RQE QUEUE.
         BNE   *+8                     .BR IF NOT.
         STH   X3PREV,AEQB             .SET PTR TO LAST RQE.
* INITIALIZE SIRB.
         STH   X3CURR,RBIQUE+2(0,XSIRB)     .QUEUE RQE ON SIRB.
         MVI   RBOPSW+1(XSIRB),X'04' . SET KEY TO ZERO        BD A62482
         LR    1,X3CURR                .SET UP RQE ADDR IN REG 1.
         MVC   SIRBTCB+1(3),RQETCB+1(X3CURR) .   SAVE USER TCB   A55639X
                                  ADDRESS FOR POSSIBLE ABTERMING A55639
         BAL   X3RET,SIRBINTL          .TO INITIALIZE SIRB.
* DEVELOP ERROR RTN NAME.
         LH    X3UCB,RQEUCB(0,X3CURR)  .GET UCB ADDR.
         SR    X3WKX,X3WKX
         IC    X3WKX,UCBTAB(0,X3UCB)   .GET NAME CODE.
         BAL   X3WK15,ERCNVRT          .TO RTN TO CONVERT BIN TO DEC.
         MVC   BLDLNAME(8),ERWKX-4     MOVE NAME TO BLDL LIST
         B     EFLOOP2+2               .CYCLE
         EJECT
* IOS ENTRY FOR FETCHING ERROR RTN PHASES. REG 14 CONTAINS EP ADDRESS.
         USING *,14
         ENTRY IECXTLER
IECXTLER DS    0H
         L     14,ADSBASE              .SET NEW BASE.
         USING DSBASE,14
         SSM   *+1                                             @SA76093
         L     11,AERTCB               .GET ERROR TCB ADDR.
         STM   0,1,TCBGRS(11)          .SAVE REGS 0,1 IN TCB.
         STM   12,15,TCBGRS+48(11)     .SAVE REGS 12-15 IN TCB.
         BAL   15,ERCNVRT              .TO CONVERT RTN.
         MVC   BLDLNAME(8),ERWKX-4     MOVE NAME TO BLDL LIST
         MVC   SIRBPSW+5(3),SIRBEP+1   .SET FETCH SEQ EP. IN PSW
         MVI   SIRBPSW,0               .DISABLE PSW              A39945
         MVI   SIRBPSW+1,X'04' .  RE-INIT PKEY AND AMWP BITS      M4922
         BR    14                      .TO DISPATCHER.
         SPACE 3
* CONVERSION ROUTINE FOR ERROR CODE.
ERCNVRT  CVD   X3WKX,ERWK              .CONVERT BIN CODE TO DEC.
         UNPK  ERWKX,ERWK+5(3)         .UNPACK DEC CODE.
         BR    X3WK15                  .RETURN.
         SPACE 3
* WORK LOCATION FOR ERROR CODE CONVERSION.
ERWK     DC    D'0'
         DC    C'IGE0'                 .STD ERROR RTN ID.
ERWKX    DC    F'0'
         TITLE '             IRB INITIALIZATION'
* IRB INITIALIZATION ROUTINE.
         SPACE
IRBINTL  TM    RBSTAB+1(X3IRB),RBFACTV .IS IRB ALREADY ACTIVE.
         BCR   1,X3RET                 .BR IF YES
         MVC   RBGRSAVE(64,X3IRB),TCBGRS(X3TCB)  .MOVE REGS TO IRB
         L     13,RBSVADDR(0,X3IRB)    .SET S/A ADDR.
         TM    RBOPSW+1(X3IRB),X'01'   .IS CODE IN SUPV. MODE.
         BO    *+8                     .BR IF NOT.
SIRBINTL DS    0H
         MVI   RBOPSW(X3IRB),0         .DISABLE PSW
         OI    RBSTAB+1(X3IRB),RBFACTV           .SET IRB ACTIVE.
         MVC   RBLINK+1(3,X3IRB),TCBRBP+1(X3TCB) .QUEUE IRB ON TCB.
         LA    X3IRB,0(0,X3IRB)        .CLEAR HI ORDER BYTE.
         ST    X3IRB,TCBRBP(0,X3TCB)   .STORE NEW IRB ADDR IN TCB.
         MVC   RBOPSW+5(3,X3IRB),RBEP+1(X3IRB)   .INITIALIZE E.P.
         LR    X3WR,14                 .SAVE BASE.
         LA    14,IEA0EXIT             .PLACE ADDR OF SVC 3 IN 14.
         L     15,RBEP(0,X3IRB)        .PLACE EP IN 15.
         STM   13,15,TCBGRS+52(X3TCB)  .SAVE REGS IN TCB.
         STM   0,1,TCBGRS(X3TCB)
         DROP  14
         USING DSBASE,X3WR
         L     12,AIEADS02             .GET ADDR OF TASK SWITCH RTN.
         BALR  14,12                   .TO TASK SW RTN.
         LR    14,X3WR                 .RESTORE BASE.
         BR    X3RET                   .RETURN.
         DROP  X3WR
         AIF   (&QNOTMP).AEQBAS6
         DROP  XAEQBASE
.AEQBAS6 ANOP
         TITLE '             OPTION 4...SVC FLIH'
         SPACE
*                            SVC FLIH
         SPACE
         ENTRY IEAQSC00
IEAQSC00 DS    0H
         STM   0,15,IEASCSAV      .SAVE ALL REGS IN LOW CORE.
         BALR  2,0
         USING *,2
SCBASE   DS    0H
* SET ENVIRONMENTAL REGISTERS
         L     XCVT,CVTPTR             .CVT ADDRESS.
         L     XTCB,IEATCBP+4          .CURRENT TCB.
         L     XRB,TCBRBP(0,XTCB)      .CURRENT RB.
         L     14,AIEA0XE              .RETURN ADDR FOR TYPE 1'S.
         AIF   (&QNOTMP).M65MP40
         L     XMPCVT,MPCVTPTR         .BASE REG FOR M65MP CVT     MP65
SVFLIHTS TS    CVTAFFLK+1              .TEST FOR LOCKOUT           MP65
         BZ    SVFLIHLK                .B IF NO LOCKOUT            MP65
         CLC   CVTAFFLK(C1),CPUID      .FIND LOCKING CPU           MP65
         BE    SVFLIH1                 .B IF THIS CPU.             MP65
         L     C7,SVCOPSW+4                                        MP65
         SR    C6,C6                   .CLEAR PRECEDING REGISTER   MP65
         SLDA  C6,C2                   .ISOLATE INSTR-LENGTH CODE  MP65
         SLA   C6,C1                   .DOUBLE FOR LENGTH IN BYTES MP65
         L     C7,SVCOPSW+4            .PSW WORD WITH INSTR ADDR   MP65
         SLR   C7,C6                   .SUBTRACT LENGTH            MP65
         ST    C7,SVCOPSW+4            . FOR REEX OF SVC OR EX.    MP65
         TM    SVCOPSW,C1                                          MP65
         BO    SVREEXEC      .B IF INTERRUPTED PROG ENABLED FOR EX MP65
* LOCKED-OUT SVC DISABLED FOR EXTERNAL INTERRUPTS.                 MP65
         MVC   TCBGRS(C64,XTCB),IEASCSAV    .STORE REGS IN TCB     MP65
         MVC   RBOPSW(C8,XRB),SVCOPSW  .SET RB TO REEXECUTE SVC    MP65
         OI    FLRETFLG,FSEXFLAG                                   MP65
         MVC   EXOPSW+5(C3),SVCOPSW+5        SET SPIN IN EXFLIH.   MP65
         MVI   EXOPSW+3,C0             .DELETE SVC NUMBER          MP65
         LPSW  EXNEWPSW                                            MP65
* LOCKED-OUT SVC ENABLED FOR EXTERNALS. REEXECUTE INSTRUCTION.     MP65
SVREEXEC L     CE,AXEBASE              .BASE FOR TYPE 1 EXIT.      MP65
         USING XEBASE,CE                                           MP65
         B     TYPE1RET                . RETURN VIA TYPE 1 EXIT.   MP65
         DROP  CE                                                  MP65
SVFLIHLK MVC   CVTAFFLK(C1),CPUID      .SET AFFINITY BYTE          MP65
SVFLIH1  DS    0H                      .(LOCKOUT ESTABLISHED)      MP65
.M65MP40 ANOP
         AIF   (T'&TRACER EQ 'O').GTF04                           21014
* TRACE INTERFACE
         AIF   (&QNOTMP).M65MP41
         ENTRY SCTRACE                                             TRMP
SCTRACE  NOP   SCTRACE9                .B IF SVC TRACE SUPPRESSED  TRMP
.M65MP41 ANOP
.GTF04   ANOP
*  ISSUE HOOK FOR SVC TRACE                                       21014
         HOOK  EID=IHLMSVC    .ISSUE HOOK FOR SVC TRACE           21014
         AIF   (T'&TRACER EQ 'O').NOTR4                           21014
         L     XTRBASE,ATRSVC          .GET TRACE RTN. EP.
         BALR  XTRET,XTRBASE           .TO TRACE RTN.
         AIF   (&QNOTMP).MPSCTR9
SCTRACE9 DS    0H                      .(LABEL FOR TRACE BYPASS)   TRMP
.MPSCTR9 ANOP
.NOTR4   ANOP
* LOOK UP SVC ENTRY ADDRESS
         LM    XSVCNO,XHIIBM,SVCCONS   .SET UP WORKING REGS.
         N     XSVCNO,SVCOPSW          .ISOLATE SVC NO.
         AR    XSVCNO,XSVCNO           .MULTIPLY SVC NO. BY 4 TO
         AR    XSVCNO,XSVCNO            DEVELOP INDEXING VALUE.
         CR    XSVCNO,XHIIBM           .IS SVC NO. IBM OR USER.
         AIF   (&SVLO EQ 256).IGCERR
         BH    USERSVC                 .BR IF USER SVC.
         AGO   .AA1
.IGCERR  ANOP
         BH    IGCERROR                .ENTER ERROR PROC.
.AA1     ANOP
IBMSVC   L     XSVCEP,0(XSVCNO,XTBORG) .GET TABLE ELEMENT FOR SVC.
         LTR   XSVCEP,XSVCEP           .IS SVC TYPE 1.
         BC    4,SC234                 .BR IF NOT.
         TM    IEATYPE1,X'F0'          TYPE 1 SW ON              A68543
         BNO   SV03                    NO                        A68543
SV02     MVC   IEASV(64),IEASCSAV      SAVE REGS                 A68543
         MVC   PSWSV(8),SVCOPSW                                   M0009
SV03     OI    IEATYPE1,X'F0'          SET TYPE 1                A68543
         BR    XSVCEP                  .ENTER TYPE 1 SVC CODE.
SC234    DS    0H
         LA    XTRX,WAITTCB                                      A64491
         CR    XTRX,XTCB               WAIT TCB                  A64491
         BNE   SC2342                  NO CONTINUE               A64491
         MVC   IEASV1(64),IEASCSAV     SAVE ERROR                A64491
         MVC   PSWSV1(8),SVCOPSW                                 A64491
         LPSW  SVCOPSW                 ERROR RETURN              A64491
SC2342   EQU   *                                                 A64491
         LA    XTRX,IEASCSAV           .PASS SAVE AREA ADDR TO TAH.
         L     XTREP,AIEATR00          .GET ENTRY POINT TO TRANS RTN.
* ALL REGS ARE SAVED IN IEASCSAV AND MUST BE TRANSFERRED TO SVRB.
         BR    XTREP                   .TO TRANSIENT SVC HANDLER.
         SPACE 3
* USER SVC HANDLING
         AIF   (&SVLO EQ 256).AA5
USERSVC  L     XTBORG,AUSERORG         .GET ADDRESS OF ORIG OF USER SVC
*                                       TABLE.
         S     XSVCNO,LOWUSER          .SUBTRACT 4 TIMES LOWEST USER
*                                       SVC NO. FROM 4 TIMES ISSUED SVC
*                                       NO. (IN REG XSVCNO) IN ORDER TO
*                                       DEVELOP INDEX FROM USER ORIGIN.
         BC    10,IBMSVC     IF RESULT IS ZERO OR POSITIVE         0009
*                            SVC IS VALID                          0009
.AA5     ANOP
* SVC ISSUED IS IN ERROR- ABEND.
         ENTRY IGCERROR
IGCERROR DS    0H
*                                       WITHIN VALID USER SVC RANGE.
         MVC   RBOPSW(8,XRB),SVCOPSW . SAVE USER PSW IN HIS RB   A44640
         LH    XERRNO,SVCOPSW+2        .PICK UP ERROR SVC NO.
         LA    XERRNO,X'F00'(0,XERRNO) .DEVELOP ERROR CODE
         L     XABTERM,ABEDIT          GET TYPE I ENTRY TO ABTERM
         L     14,AIEA0XE          SET -ETU-N TO TYPE 1 EX&T       1822
         BR    XABTERM                 .TO ABTERM. REG 14 = DISP ADDR.
         DROP  2
         EXTRN IEAMSTCB                                          A72115
         AIF   (&QM65MP).NOTMP17                                A72115
         ENTRY IEATCBP                                           A72115
IEATCBP  DC    A(IEAMSTCB)             .' NEW'                   A72115
         DC    A(IEAMSTCB)             .' OLD'                   A72115
         AIF   ((&TSTRN EQ 0) OR (&DSIM EQ 0)).NDT               A72115
         ENTRY IEATCBQ                 .MODEL91 AND TESTRAN      A72115
IEATCBQ  EQU   IEATCBP                                           A72115
.NDT     ANOP                                                    A72115
         SPACE 1
.NOTMP17 ANOP                                                    A72115
         AIF   (&SMF NE 1).NSMFEXE
         TITLE '            OPTION 4...EXCP COUNTER ROUTINE'
*                           EXCP ROUTINE
         SPACE 1                                                    SMF
         ENTRY IEASMFEX                                             SMF
IEASMFEX DS    0H                                                   SMF
         SPACE 1                                                    SMF
         USING *,XBASE                                              SMF
         LR    XTCBPTR,XTCBPASS .  LOAD TCB POINTER REG           20472
         L     XRWRK,TCBRBP(XTCBPTR) GET CURRENT RB                 SMF
         TM    RBSTAB(XRWRK),CSVRB  IS RB AN SVRB                   SMF
         BNO   SMFEXCPA .          NO-CONTINUE PROCESSING         20472
         TM    RBSTAB+1(XRWRK),X'80'  IS NEXT RB PTR THE TCB PTR    SMF
         BCR   C1,XRTN .           YES-SKIP PROCESSING            20472
         L     XRWRK,RBLINK(XRWRK) GET NEXT RB                      SMF
         TM    RBSTAB(XRWRK),CSVRB IS THIS A PRB                    SMF
         BCR   C7,XRTN .           NO-SKIP PROCESSING             20472
*  SVRB IS FIRST RB, PRB IS SECOND RB.  CHECK PRB RESUME PSW FOR    SMF
*  OPEN/OPENJ/CLOSE/TCLOSE/EOV.                                     SMF
         CLI   RBOPSW+3(XRWRK),X'15'  WAS SVC A STOW                SMF
         BCR   C8,XRTN .           YES-SKIP PROCESSING            20472
         CLI   RBOPSW+3(XRWRK),X'37'  WAS SVC EOV                   SMF
         BE    SMFEXCPB            YES-CONTINUE PROCESSING          SMF
         CLI   RBOPSW+3(XRWRK),X'13'  WAS SVC LESS THAN OPEN        SMF
         BCR   C4,XRTN .           YES-SKIP PROCESSING            20472
         CLI   RBOPSW+3(XRWRK),X'17'  WAS SVC GREATER THAN TCLOSE   SMF
         BCR   C2,XRTN .           YES SKIP PROCESSING            20472
*  TEST IF THE DEB PASSED IS ON THE TCB DEB CHAIN. IF NOT THEN   A28422
*  THIS IS A WORK DCB AND NO COUNT TAKEN                         A28422
SMFEXCPB DS    0H .                                              A28422
         L     XRWRK,DEBPTR(0,XDCBPAS) .DEB ADDRESS FROM DCB     A28422
         LA    XRWRK,0(0,XRWRK) .  CLEAR HI BYTE                 A28422
         L     XRWRK2,8(0,XTCBPTR) .DEB ADDRESS FROM TCB CHAIN   A28422
         B     TEST .              GO COMPARE                    A28422
DEBSRCH  DS    0H .                                              A28422
         L     XRWRK2,4(0,XRWRK2) .GET NEXT DEB ADDRESS          A28422
         LA    XRWRK2,0(0,XRWRK2) .CLEAR HI BYTE                 A28422
TEST     DS    0H .                                              A28422
         LTR   XRWRK2,XRWRK2 .     END OF DEB CHAIN              A28422
         BCR   C8,XRTN .           YES-RETURN TO IOS             A28422
         CR    XRWRK,XRWRK2 .      DEB ADDRESS'S EQUAL           A28422
         BNE   DEBSRCH .           NO-CHECK NEXT                 A28422
         B     SMFEXCPC .                                        A28422
SMFEXCPA DS    0H .                                               20472
         TM    CC(XRWRK),C8 .      FETCH I/O                     A31489
         BCR   C1,XRTN .           YES-RETURN TO IOS             A31489
SMFEXCPC LR    XDCBPTR,XDCBPAS                                      SMF
         L     XTCTPTR,TCBTCT(XTCBPTR)  GET TCT ADDRESS             SMF
         LA    XTCTPTR,0(XTCTPTR)                                   SMF
         LTR   XTCTPTR,XTCTPTR     IS THERE A TCT                   SMF
         BCR   C8,XRTN .           RETURN IF NO                   20472
         EXTRN IEATLEXT                                           19028
         STM   R0,XBASE,LSAVE      .SAVE CONTENTS OF ALL REGS     19028
         L     XTCTPTR,TCTIOTBL(XTCTPTR)  GET I/O TABLE ADDRESS     SMF
         LTR   XTCTPTR,XTCTPTR     IS THERE AN I/O TABLE            SMF
         BCR   C8,XRTN .           RETURN IF NO                   20472
         TM    DCBOFLGS(XDCBPTR),OB  IS DCB OPENED/BUSY             SMF
         BCR   C8,XRTN .           RETURN IF NO                   20472
         LH    XTIOTD,DCBTIOT(XDCBPTR)  GET TIOT DD OFFSET          SMF
         SR    XRWRK,XRWRK                                          SMF
         LA    XTCTSRC,TCTCOMIO(XTCTPTR)  LOAD SEARCH POINTER       SMF
*  FIND RIGHT TCTIOT SLOT - A MATCH BETWEEN THIS DCB TIOT DD        SMF
*  OFFSET AND A DCB TIOT DD OFFSET IN THE TCTIOT LOOKUP TABLE.      SMF
SRCHSLOT CH    XRWRK,TCTDCBTD(XTCTSRC)   LAST SLOT                  SMF
         BCR   C8,XRTN .           BRANCH IF YES                  20472
         CH    XTIOTD,TCTDCBTD(XTCTSRC)  IS THIS THE SLOT           SMF
         BE    SLOTFND             BRANCH IF YES                    SMF
         LA    XTCTSRC,ENTLGTH(XTCTSRC)  STEP TO NEXT SLOT          SMF
         B     SRCHSLOT                                             SMF
*  COMPUTE THIS SLOT ADDRESS IN THE TCTIOT COUNTER TABLE.           SMF
SLOTFND  AH    XTCTPTR,TCTIOTSD(XTCTSRC)  CALC SLOT ADDR.           SMF
         ST    XTCTPTR,LSAVE1           .STORE CALC SLOT ADDR     M3080
         IC    XRWRK,TCTSCTR(XTCTPTR)  GET UCB COUNT THIS SLOT      SMF
         LR    XRWRK2,XRWRK                 SAVE # UCB'S          19028
         LA    XTIOTD,0(0,XUCBPTR)     CLEAR FLAGS FROM UCB PTR REG SMF
*  FIND RIGHT TCTIOT COUNTER - A MATCH BETWEEN THIS UCB AND A UCB   SMF
*  IN THIS TCTIOT COUNTER SLOT.                                     SMF
SRCHUCB  CH    XTIOTD,TCTUCBP(XTCTPTR)   THIS THE UCB               SMF
         BE    UCBFND              BRANCH IF YES                    SMF
         CLC   UCBTYP(C2,XTIOTD),D2321 .IS UCB FOR 2321 ?         20472
         BNE   NOT2321 .           NO-BRANCH                      20472
         LA    XTIOTD,DEC56(XTIOTD)    POINT TO BIN 0            A30586
         LA    CELLCTR,CNT11           INITIALIZE CELL CTR TO 11  20472
BINLOOP  BCT   CELLCTR,SRCHCELL        LOOP CONTROL              A30586
NOT2321  LA    XTCTPTR,SLOTLNGH(XTCTPTR)  STEP TO NEXT UCB          SMF
         BCT   XRWRK,SRCHUCB           NOT ZERO-SEARCH NEXT UCB     SMF
         LA    XTCTPTR,SLOTLNGH(XTCTPTR) STEP OVER OUTLIM FLD BD A30900
         TM    CONCSW,ON .         HAVE WE BEEN HERE ALREADY  BD A30900
         BO    NOSET .             YES - SKIP INIT            BD A30900
         MVI   CONCSW,ON .         PREVENT REINIT OF ADDR     BD A30900
         LR    C6,XTCBPASS .       TCB ADDR                   BD A30900
         L     C6,TCBTIOT(0,C6) .  TIOT ADDR                  BD A30900
         AH    C6,DCBTIOT(0,C4) .  TIOT DD ENTRY ADDR         BD A30900
NOSET    EQU   * .                                            BD A30900
         IC    XRWRK,0(0,C6) .     LENGTH OF DD ENTRY         BD A30900
         AR    C6,XRWRK .          ADDR OF NEXT DD ENTRY      BD A30900
         CLI   0(C6),0 .           END OF TIOT                BD A30900
         BE    NOTEXCP .           YES RETURN TO IOS          BD A30900
         CLI   4(C6),C' ' .        IS NAME BLANK              BD A30900
         BE    SLOTFND+4 .         YES CHECK TCTIOTBL         BD A30900
         B     NOTEXCP .           RETURN TO IOS              BD A30900
SRCHCELL CH    XTIOTD,TCTUCBP(XTCTPTR)  DOES 2321 UCB MATCH SLOT A30586
         BE    UCBFND                  BR IF WE GET MATCH        A30586
         LA    XTIOTD,DEC16(XTIOTD)    IF NO MATCH - NEXT BIN    A30586
         B     BINLOOP                 GO CHECK COUNTER          A30586
*  COUNTER FOUND - ADD ONE TO COUNTER.                              SMF
UCBFND   LA    XRWRK,1             SET EXCP COUNTER                 SMF
         AL    XRWRK,TCTDCTR(XTCTPTR)  ADD IN COUNT                 SMF
         ST    XRWRK,TCTDCTR(XTCTPTR)  STORE NEW EXCP COUNT         SMF
         SR    XRWRK,XRWRK                                        19028
         LA    XRWRK4,4     .INIT INDEX REG TO POINT TO EXCP FLD  19028
         L     XTCTPTR,LSAVE1          RESTORE SLOT ADDRESS       M3326
SUMEXCP  AL    XRWRK,TCTUCBP(XRWRK4,XTCTPTR)  ADD EACH EXCP FLD   19028
         LA    XRWRK4,8(XRWRK4)               STEP  TO NEXT  ONE  19028
         BCT   XRWRK2,SUMEXCP        BR IF NOT ALL TOTALED        19028
         LA    XRWRK2,4                                           19028
         SR    XRWRK4,XRWRK2                                      19028
         SR    XRWRK2,XRWRK2                                      19028
         C     XRWRK2,TCTUCBP(XRWRK4,XTCTPTR) COMPARE OUTLIM TO 0 19028
         BE    NOTEXCP                        OUTLIM NOT SET, BR  19028
         BCTR  XRWRK,0                                            19028
         C     XRWRK,TCTUCBP(XRWRK4,XTCTPTR)  COMPARE SUM TO OUTLM19028
         BNE   NOTEXCP                  LIMIT NOT EXCEEDED, BR    19028
* THE OUTPUT LIMIT HAS BEEN EXCEEDED. AN IRB/IQE WILL NOW BE      19028
* CREATED FOR IEATLEXT.CONTROL WILL BE PASSED TO THE ST2 EXIT     19028
* EFFECTOR TO SCHEDULE IEATLEXT.                                  19028
         L     XSCMMTBL,16              ADDR OF CVT               M3261
         USING CVTSECT,XSCMMTBL         BASE FOR CVT DSECT        M3261
         L     SMCAADR,CVTSMCA            LOAD SMCA ADDR          M3261
         TM    0(SMCAADR),EXITS        Q. EXITS ALLOWED           M3261
         BNO   OUTLMABN                NO ABTERM THE JOB          M3261
         L     DCBSAVE,LSAVE+40        GET DCB ADDR FROM LSAVE    19028
         L     TCBSAVE,LSAVE+44   GET  TCT ADDR                   19028
         L     TCBSAVE,4(TCBSAVE)      GET INIT TCB ADDR          19028
         L     XRWRK,LSAVE1             .RESTORE SLOT ADDR        19028
         AR    XRWRK,XRWRK4     ADD TO GET OUTLM ADDR             19028
         LR    LIMOFF,XRWRK    SAVE ADDR OF OUTLIM                19028
         L     XSYSTRTN,IEATLEX         .ADDR ASYNCH ROUTINE      19028
         L     R0,IRBCORE               IRB SUBPOOL AND SIZE      19028
         L     XSCMMTBL,16              ADDR OF CVT               19028
         L     GMBRNCH,200(XSCMMTBL)     ADDR OF SVCT             19028
         L     GMBRNCH,28(GMBRNCH)    GETMAIN EP IN REG 15        19028
         LA    XSQPTR,10            SET REG1 TO ANY POS VALUE     19028
         LCR   XSQPTR,XSQPTR        COMPL TO INDICATE GETMAIN     19028
         LR    XS1,XBASE                .SAVE REG 15              19028
         BALR  R14,GMBRNCH               GO TO GETMAIN ROUTINE    19028
         LR    XBASE,XS1                .RESTORE REG 15           19028
         XC    0(IRBLNGTH,IRBADDR),0(IRBADDR) CLEAR IRB/IQE       19028
         MVC   STABSIZE(4,IRBADDR),RBSZSTAB   INIT IRB STAB/SIZE  19028
         ST    XSYSTRTN,ENTRY(IRBADDR)  PUT ASYNCH RTN @ IN IRB   19028
         LA    IQEADDR,C96(IRBADDR)          GET IQE ADDR         19028
         OI    4(IQEADDR),X'40'           .TURN OUTLIM SWITCH ON  19028
         ST    IRBADDR,IQEIRB(IQEADDR)       PUT IRB ADDR IN IQE  19028
         ST    TCBSAVE,IQETCB(IQEADDR)       PUT TCB ADDR IN IQE  19028
         ST    DCBSAVE,IQEDCB(IQEADDR)  .STORE DCB ADDR IN IQE    19028
         ST    LIMOFF,IQEOUTLM(IQEADDR) ST OUTLIM ADDR   IN IQE   19028
         LA    ADDRIQE,C96(ADDRIQE)          PUT IQE ADDR IN R1   19028
         LCR   ADDRIQE,ADDRIQE       COMPL TO INDICATE IQE        19028
         L     XSEXTEFT,C4(XSCMMTBL)         ADDR ST2 EX EFF      19028
         BALR  R14,XSEXTEFT                  GO TO EX EFF         19028
NOTEXCP  LM    R0,XBASE,LSAVE     .RESTORE REGS                   19028
         MVI   CONCSW,OFF .        RESET SWITCH               BD A30900
NOTEXCPA EQU   *
         BR    XRTN                                                 SMF
OUTLMABN L     XSQPTR,ABCODE2           SET OUTLIM ABEND CODE     M3261
         LR    XS1,BASESMF              SAVE BASE REG             M3261
         L     BASESMF,CVTBTERM            ABTERM ADDR FROM CVT   M3261
         BALR  R14,BASESMF              ABTERM THE TASK           M3261
         LR    BASESMF,XS1              RESTORE BASE REG          M3261
         B     NOTEXCP              RESTORE IOS REGS AND RETURN   M3261
         DROP  XBASE                                                SMF
         SPACE 1                                                    SMF
LSAVE    DC    16F'0'             . LOCAL SAVEAREA                19028
LSAVE1   DC    F'0'                    SAVE TCT POINTER           19028
IEATLEX  DC    A(IEATLEXT)              .ADDR ASYNCH RTN          19028
IRBCORE  DC    X'FD000090'              .IRB/IQE SUBPOOL AND SIZE 19028
RBSZSTAB DC    X'00124012'              .RB SIZE AND IQE/IRB FLG  19028
ABCODE2  DC    X'80722000'                                        M3261
D2321    DC    X'2005' .           UCB TYPE FOR 2321              20472
UCBTYP   EQU   18 .                                               20472
DEBPTR   EQU   44 .                                              A28422
ENTLGTH  EQU   4                   .LENGTH OF LOOK UP ENTRY         SMF
SLOTLNGH EQU   8                   .LENGTH OF SLOT FIELD            SMF
CONCSW   DC    X'00' .                                        BD A30900
ON       EQU   255 .                                          BD A30900
OFF      EQU   0 .                                            BD A30900
TCBTIOT  EQU   12 .                                           BD A30900
.NSMFEXE ANOP                                                       SMF
         TITLE '             OPTION 4...SIRB FETCH SEQUENCE'
         SPACE
*                            FETCH SEQUENCE FOR ERROR ROUTINES
         AIF   (&RERP EQ 0).RERP2                                 19017
         ENTRY IEAAERP                                            19017
.RERP2   ANOP                                                     19017
ERFETCH  DS    0H
         BALR  6,0
         USING *,6
ERBSE    DS    0H
         CLC   BLDLNAME(8),SIRB    Q. ERR RTN EQ LAST-USED ERP    19017
         BE    ERSKP                   .BR IF YES.
         NI    ERRCOUNT,ZERO           INITIALIZE COUNT           19022
ERBSE1   MVC   SIRB(8),BLDLNAME        MOVE ROUTINE NAME TO SIRB  19022
         L     RERPNM,ASVCLDCB                                   A67917
         OI    DCBIFLGS(RERPNM),X'03'     PREVENT ERP            A67917
         NI    DCBIFLGS(RERPNM),X'3F'  RESET ERROR               A67917
         AIF   (&RERP EQ 0).RERP3                                 19017
         L     RERPNM,SIRBNM2      .GET LAST 4 CHAR OF ERP NAME.  19017
         CL    RERPNM,ERRTANM      Q. ERR RTN NOW IN T/A          19017
         BE    ERPINTA             .BR IF YES.                    19017
         L     RERPSR,IEAAERP      .GET PTR TO ERP LOAD LIST.     19017
ERPSRCH  LTR   RERPSR,RERPSR       Q. END OF ERP LOAD LIST        19017
         BE    ERPNRES             .BR IF YES TO FETCH PROCESS.   19017
         CL    RERPNM,CDENAM2(RERPSR)   Q. CDE FOR ERR RTN        19017
         BE    ERPRES              .BR IF YES TO BYPASS FETCH.    19017
         L     RERPSR,CDENEXT(RERPSR)   .CHAIN TO NEXT CDE.       19017
         LA    RERPSR,0(RERPSR)    .ZERO FLAG BYTE.               19017
         B     ERPSRCH             .BR TO TEST THIS ENTRY.        19017
ERPRES   MVC   ERREPNT+1(3),CDEEPNT(RERPSR)  .SET RESIDENT EP.    19017
         B     ERSKP               .BR TO ERP LINKAGE.            19017
ERPNRES  DS    0H                                                 19017
         MVI   ERRXTANM,X'00'      .INV CURRENT T/A ERP NAME.     19017
.RERP3   ANOP                                                     19017
         MVI   SIRB,X'00'              INVALIDATE NAME TO PREVENT
*                                      USE BEFORE RTN IS LOADED
         LM    13,1,BLDLINTF           .SET UP FOR BLDL.
         SSM   ENABLE
         BR    15                      .GO TO BLDL.
BLDLRETN BALR  6,0                     .REESTABLISH ADDRESSABILITY.
         USING *,6
         L     6,AERBSE                .RESTORE BASE.
         USING ERBSE,6
         SSM   DISABLE
         B     *+4(15)                 .  BRANCH TABLE             7645
         B     BLDLOK                  .  BLDL SUCCESSFUL          7645
         B     ERABTERM                .  MODULE NOT FOUND         7645
ERFERR1  CLI   ERRCOUNT,FIVE         CHECK IF RECYCLE COUNT IS 5  19022
         BL    ERFERR3                                           A67917
         AIF   (&DDRSYS NE 1).AAA2                                19022
         BH    ERFERR                  GREATER, NORMAL ERROR PROC 19022
         L     REGX15,DDRSRES      LOAD SYSRES DDR MAINLINE ADDR  19022
         BALR  REGX14,REGX15           GO TO SYSRES DDR           19022
         LTR   REGX15,REGX15           SWAP SUCCESSFUL ?          19022
         BNZ   ERFERR                 NO, GO TO NORMAL ERROR PROC 19022
         OI    ERRCOUNT,COUNT          YES, RESET COUNT           19022
         B     ERBSE1                  RETRY ONCE                 19022
.AAA2    ANOP
         B     ERFERR                  NORMAL ERROR PROCESSING    19022
ERFERR3  IC    XFWK,ERRCOUNT           PICK UP RECYCLE COUNT      19022
         LA    XFWK,ONE(XFWK)          UP BY ONE                  19022
         STC   XFWK,ERRCOUNT           SAVE RECYCLE COUNT         19022
         B     ERBSE1                  RETRY                      19022
BLDLOK   EQU   *                                                   7645
         L     XFWK,AFTCHWA            .SET ADDR OF FETCH W/A.
         MVC   36(4,XFWK),BLDLTTRN     .SET TTRN INTO FETCH W/A.
         MVC   62(2,XFWK),BLDLSIZE+1   .SET MODULE SIZE INTO FETCH W/A.
         L     XFEP,AFETCH             .GET FETCH ADDR.
         BALR  XFRETN,XFEP             .FETCH ERROR RTN.
* NOTE- CONTROL RETURNS AFTER ERROR RTN IS LOADED.
         LTR   15,15                   .ANY FETCH ERROR.
         BC    7,ERFERR1               CHECK RECYCLE COUNT        19022
         MVI   SIRB,C'I'               RESTORE NAME
         L     X1,ASVCLDCB                                       A67917
         NI    DCBIFLGS(X1),X'FC'       ALLOW ERP                A67917
         AIF   (&RERP EQ 0).RERP5                                 19017
         MVC   ERRTANM(4),SIRBNM2  .SAVE NAME OF ERP NOW IN T/A.  19017
ERPINTA  MVC   ERREPNT(4),AERRTA   .SAVE EP ADDR FOR ERP IN USE.  19017
.RERP5   ANOP                                                     19017
ERSKP    DS    0H
         L     X1,SIRBIQE              .SET REG 1 WITH 16* ADDR.
         AIF   (&RERP EQ 0).RERP7                                 19017
         L     15,ERREPNT          .GET ERROR RTN EP.             19017
         AGO   .RERP8                                             19017
.RERP7   ANOP                                                     19017
         L     15,AERRTA               .GET ERROR RTN EP.
.RERP8   ANOP                                                     19017
         BALR  14,15                   .TO ERROR RTN.
         SVC   3                       .TO SET REG 14 WITH SVC 3 ADDR.
.* NOTE- ERPS SHOULD NOT INDICATE AN ERROR IN THEIR PROCESSING    19017
.*       BY A RETURN OF 2(REG 14)                                 19017
         ENTRY ERFERR                                              I251
ERFERR   DS    0H                                                  I251
         L     X1,ASVCLDCB        GET SVCLIB DCB                   I251
         NI    DCBIFLGS(X1),X'3F'  KILL DCB ERROR FLAGS            I251
         L     X1,IOERR           LOAD PERMANENT I/O ERROR CODE    I251
         B     ERRFLUSH                                            I251
* ABTERM TASK REQUESTING ERROR ROUTINE                             I251
ERABTERM DS    0H                                                  I251
         L     X1,K806            LOAD ERROR CODE 806-MODULE NOT FOUND
ERRFLUSH DS    0H                                                  I251
         L     X0,SIRBTCB .  GET ADDR OF USER TCB FOR ABTERM     A55639
         LR    14,X0                    TCB ADDR IN REG 14        M1174
         ST    15,TCBGRS+X'3C'(14) .   PUT RETCODE IN REG15 SLOT  21B72
         MVC   TCBGRS+8(8,14),BLDLNAME  MOVE NAME OF MODULE       M1174
*                                       NOT FOUND TO REGS 2,3     M2733
         L     14,AIEA0AB              .GET ABTERM ADDR.
         BALR  14,14                   .TO ABTERM.
ERREXIT  DS    0H                                                  I251
         L     14,SIRBIEC .       GET ADDR OF IOS CLEANUP RTN    A55639
         BCR   15,14 .            FREE RQE AND DEVICE            A55639
         SPACE 2
         TITLE '  VALIDITY CHECK ROUTINE (IEA0VL00) '
*        VALIDITY CHECK ROUTINE (IEA0VL00)
*
*    REGISTER INTERFACE.
*  REGISTER 7 CONTAINS THE ADDRESS TO BE VALIDATED.
*  REGISTER 8 CONTAINS THE ROUTINE ENTRY POINT (IEA0VL00).
*  REGISTER 9 CONTAINS THE TCB ADDRESS OR ZERO.
*  REGISTER 10 CONTAINS THE RETURN ADDRESS.
*
*      IF REGISTER 9 CONTAINS A ZERO THE CURRENT TCB ADDRESS
*  WILL BE RETURNED THEREIN.  REGISTER 7 WILL CONTAIN THE STORAGE
*  KEY, OF THE ADDRESS IN QUESTION, IN THE LOW ORDER BYTE-LEFT
*  ADJUSTED.  THE CONDITION CODE RETURNED WILL REFLECT THE
*  VALIDITY OF THE ADDRESS IN QUESTION.  A CONDITION CODE OF 8
*  INDICATES THAT THE ADDRESS IS VALID.  ANY OTHER CODE INDICATES
*  AN ERROR DUE TO PROTECTION OR ADDRESSING.
*  THE CALLERS TO THIS ROUTINE MUST BE PRIVILEGED.
         SPACE 2
         ENTRY IEA0VL00
*
R1       EQU   7        INPUT ADDRESS
R2       EQU   8        ENTRY POINT ADDRESS
R3       EQU   9        TCB ADDRESS OR ZERO
R4       EQU   10       RETURN REGISTER
*
         USING *,R2                    .ESTABLISH BASE.
IEA0VL00 DS    0H                      .ALINE STARTING ADDRESS.
         LTR   R3,R3                   .Q.CALLER SUPPLY TCB ADDRESS.
         BC    7,TCBPRES               .YES, TAKE BRANCH.
         L     R3,16                   CVT                       A72115
         L     R3,0(R3)                .OLD NEW                  A72115
         L     R3,4(R3)                .TCB OLD                  A72115
TCBPRES  DS    0H
         LA    R1,0(R1) .        CLEAR HIGH BYTE FOR COMPARE     A45277
         L     R2,X'10'                .LOAD CVT ADDRESS.
         CL    R1,CVTMZ00-CVTSECT(0,R2)  .Q. ADDR. WITHIN MACH.
         BCR   2,R4                    .NO RETURN TO CALLER.
         BALR  R2,0
         USING *,R2                    .ESTABLISH BASE.
         L     R2,BASECON
         USING IEA0VL00,R2
         IC    R1,VLCLI+1              .ZERO HIGH ORDER BYTE.
         ISK   R1,R1                   .DETERMINE STORAGE KEY.
         EX    R1,VLCLI                .EXECUTE TEST.
         BCR   15,R4                   .RETURN TO CALLER.
         SPACE 1
VLCLI    CLI   TCBPKF(R3),0
BASECON  DC    A(IEA0VL00)             .ADDRESS OF VALIDITY C. R..
         TITLE 'OPTION 4 NUCLEUS...VALIDITY CHECK ROUTINE'
*...VALIDITY CHECK ROUTINE...
         SPACE 2
*...REG EQUATES...
         SPACE
INPUT    EQU   1                  .INPUT REG CONTAINING ADDR.
RETURN   EQU   12                 .RETURN REG TO CALLER.
         SPACE 2
         USING *,2
         USING CVTSECT,XCVT
         SPACE
         ENTRY IEA0VL01
IEA0VL01 B     NORMAL             .NORMAL BR. ENTRY.
         EX    INPUT,WDTEST       .TYPE 1 SVC ENTRY POINT. TEST FOR
*                                  WORD BOUNDARY.
         BCR   5,RETURN           .BR IF NOT ON WORD BOUNDARY.
NORMAL   LA    INPUT,0(INPUT)     .ZERO HI ORDER BITS.
         CL    INPUT,CVTMZ00       .DOES ADDR EXCEED MACH SIZE.
         BCR   2,RETURN           .BR IF YES.
         IC    INPUT,BYTEZERO+1   .ZERO BITS 24-31
         ISK   INPUT,INPUT        .GET STORAGE KEY OF ADDR.
         EX    INPUT,BYTEZERO          .COMPARE TO TCB KEY.
         BR    RETURN             .RETURN TO CALLER.
         SPACE 2
*...EX'D INSTRUCTIONS...
         SPACE
BYTEZERO CLI   TCBPKF(XTCB),X'00'
         SPACE
WDTEST   TM    WORD,X'00'
         SPACE 2
*...CONSTANTS...
         SPACE
WORD     DC    X'03'
         SPACE
         DROP  2
         DROP  XCVT
         TITLE '             SIRB AND PSEUDO WAIT TCB'
* SYSTEM (PSEUDO) WAIT TCB (WITH OVERLAID PSEUDO RB).
* NOTE- THIS TCB IS NOT ON THE READY QUEUE. IT WILL NEVER BE DISPATCHED
         ENTRY WAITTCB
         DC    4D'0'                   .SPACE TO STORE FP REGISTER 65MP
WAITTCB  DS    0D
WAITPRB  DC    A(WAITPRB)              .PTR TO PSEUDO RB.
         DC    3F'0'                   .NOT USED.
WAITPSW  DC    X'FF06000000000000'     .PSEUDO RB- WAIT PSW.
         DC    2D'0'                   .NOT USED.
         DC    X'000000'               .NOT USED.
WAITDSP  DC    X'00'                   .DISPATCHING PRIORITY = 0.
         DC    F'0'                    .NOT USED.
         DC    D'0'                    .NOT USED.
WAITGRS  DC    8D'0'                   .REG SAVE AREA.
         DC    F'0'                    .NOT USED.
WAITRDYQ DC    F'0'                    (= TCBTCB FIELD) MUST BE ZEROS.
         AIF   (&QNOTMP).M65MPWT
         DC    13F'0'                  REMAINING TCB FIELDS        65MP
.M65MPWT ANOP
* SIRB *
         ENTRY SIRB
         DS    0D
SIRB     DC    CL8'IGE00000'
         DC    X'000C8000'
SIRBEP   DC    A(ERFETCH)
SIRBPSW  DC    X'0004000000000000'
SIRBIQE  DC    D'0'
         SPACE
         DC    4D'0'               REG SAVE AREA                  M3378
         SPACE 1
SIRBIEC  DC    V(IECRQE00) .      ADDR OF IOS CLEANUP ROUTINE    A55639
SIRBTCB  DC    F'0' .             WILL CONTAIN USER RQE-TCB ADDR A55639
         SPACE 1
*   THE ROUTINE NAMED IECRQE00 WILL TURN ON BITS IN THE IOB TO   A55639
*        SIMULATE A PERMANENT I/O ERROR, ISSUE ERREXCP (SVC 15), A55639
*        AND ISSUE EXIT (SVC 3).  THIS WILL CAUSE THE USER'S     A55639
*        RQE TO BE RETURNED TO THE FREELIST AND WILL ALLOW THE   A55639
*        ASSOCIATED DEVICE TO BE FREED UP (I.E. THE ERROR-       A55639
*        RECOVERY-PROCEDURE-IN-PROCESS FLAG WILL BE TURNED OFF). A55639
         SPACE 2
SIRBNM2  EQU   SIRB+4              .ERP NAME - LAST 4 CHAR.       19017
         TITLE '             BLDL WORK AREA FOR SIRB PROCESSING'
         CNOP  4,8
BLDLIST  DS    0H
         DC    H'1'                    .BLDL PARAMETER.
         DC    H'32'
BLDLNAME DC    D'0'                    .BLDL LIST ENTRY.
         DC    F'0'
         DC    H'0'
BLDLTTRN DC    H'0'
         DC    2F'0'
BLDLSIZE DC    F'0'
         DC    F'0'
         TITLE '             OPTION 4 NUCLEUS CONSTANTS'
         SPACE
* EXTERNAL FLIH.
*        (MOVED TO END OF EXFLIH CODING)
* I/O FLIH.
*        (MOVED TO END OF I/O FLIH CODING)
         SPACE
* PROG FLIH.
*        (MOVED TO END OF PC FLIH CODING)
         SPACE
* DISPATCHER.
         EXTRN IEAQTD01,IEAQTE00
         EXTRN IEAERTCB
ATDQ     DC    A(IEAQTD01)        .TIMER DEQUEUE.
ATNQ     DC    A(IEAQTE00)        .TIMER QUEUE.
AMSTCB   DC    A(IEAMSTCB)        .MASTER SCHEDULER TCB.
ADSBASE  DC    A(DSBASE)          .DISPATCHER ADDRESSABILITY.
NEG32    DC    F'-32'             USED IN REFERENCING F. POINT
         AIF   (&MOD EQ 65 OR '&SER' NE 'MCH').NORMS03
         ENTRY IEARMSAD                                           19E02
IEARMSAD DC    F'0'                    .RMS ENTRY ADDRESS         19E02
.NORMS03 ANOP
         AIF   (&TIMESL EQ 0).NOTS03                               MTS0
         AIF   (&QM65MP).NOTS03
TSTQE    DC    V(IEATSTQE)                                         MTS0
.NOTS03  ANOP                                                      MTS0
.NOSMF7  ANOP                                                      SMF
         AIF   ('&EMU' NE 'EMUY').NOEMDC                           EM94
CS9FF    DC    X'9FF000' .         CONTROL STORE (WCS) BRANCH ADDR EM94
         DS    0H .                                                EM94
.NOEMDC  ANOP                                                      EM94
         SPACE
* STAGE 3 OF THE EXIT EFFECTOR.
         EXTRN IEAHEAD
AIEAHEAD DC    A(IEAHEAD)         .ADDR OF TOP TCB.
A1STCB   EQU   AIEAHEAD           .TCB TO START J/S TIMING SEARCH.
AERTCB   DC    A(IEAERTCB)        .ADDR OF ERROR TCB.
AIEADS02 DC    A(IEA0DS02)             .ADDR OF TASK SW RTN.
* SVC FLIH
         EXTRN IBMORG
         EXTRN IEAQTR00,IEA0AB00
         EXTRN IEA0AB01
         DS    0F
SVCCONS  DC    X'000000FF'             .MASK TO ISOLATE SVC NO.
         DC    A(IBMORG)               .ORIGIN OF IBM SVC'S.
         DC    F'&HILMT'               .COMPARAND FOR HI IBM SVC * 4.
         AIF   (&SVLO EQ 256).NOLO
         ENTRY LOWUSER
         EXTRN USERORG
LOWUSER  DC    F'&LOLMT'               .COMPARAND FOR LOW USER SVC * 4.
AUSERORG DC    A(USERORG)          .ORIGIN OF USER SVC'S
.NOLO    ANOP
AIEA0XE  DC    A(IEA0XE00)             .ADDR OF TYPE 1 EXIT.
*                                       TO BE CALCULATED BY NIP.
AIEATR00 DC    A(IEAQTR00)             .ADDR OF TRANSIENT HANDLER.
AIEA0AB  DC    A(IEA0AB00)             .ADDR OF ABTERM.
ABEDIT   DC    A(IEA0AB01)    TYPE I ENTRY TO ABTERM
         ENTRY IEATYPE1
IEATYPE1 DC    X'00'                   .TYPE 1 SVC INDICATOR. X'00' =
*                                       TYPE 1 SVC NOT IN PROGRESS,
*                                       X'F0' = TYPE 1 IN PROGRESS.
         SPACE 2
         AIF   (T'&TRACER EQ 'O').NOTR5
*    EXTERNAL FLIH
*        (MOVED TO END OF EXFLIH CODING)
*   I/O  FLIH
*        (MOVED TO END OF I/O FLIH CODING)
*    PROG. FLIH
*        (MOVED TO END OF PC FLIH CODING)
         AIF   (&QNOTMP).M65MP45
*   SSM FLIH                                                       TRMP
.M65MP45 ANOP
*   DISPATCHER
         EXTRN TRDISP
ATRDISP  DC    A(TRDISP)               . DISPATCHER TRACE EP.
         SPACE 2
*   SVC FLIH
         EXTRN TRSVC
ATRSVC   DC    A(TRSVC)                .SVC TRACE EP.
         SPACE 2
.NOTR5   AIF   (&RERP EQ 0).RERP9                                 19017
ERRTANM  DC    F'0'                .SAVE AREA-LAST T/A ERP NAME.  19017
ERRXTANM EQU   ERRTANM+3           .BYTE ALTERED DURING T/A LOAD  19017
ERREPNT  DC    F'0'                .SAVE AREA-LAST ERP(SIRB) EP.  19017
IEAAERP  DC    F'0'                .PTR TO ERP LOAD LIST.         19017
*                                   TO BE FILLED IN BY NIP.       19017
.RERP9   ANOP                                                     19017
         SPACE
* FETCH SEQUENCE
         EXTRN IEASVDCB,IEAERRTA
BLDLINTF DS    0F
AERRTA   DC    A(IEAERRTA)             .ERROR T/A.
         DC    A(BLDLRETN)             .RETURN ADDR FROM BLDL.
         DC    V(IECPBLDL)             .BLDL BR E.P.
         DC    A(BLDLIST)              .BLDL LIST.
ASVCLDCB DC    A(IEASVDCB)             .SVC LIB DCB.
AFETCH   DC    V(IEWFTRAN)             .ADDR OF FETCH.
AFTCHWA  DC    V(IEAERWA)              .ERR T/A FETCH WORK AREA.
AIEA0DS  DC    A(IEA0DS)               .ADDR OF DISPATCHER.
AERBSE   DC    A(ERBSE)                .BASE FOR ERROR FETCH SEQUENCE.
         AIF   (&DDRSYS NE 1).AAA4
DDRSRES  DC    V(IGFDDRSR)             SYSRES DDR MAINLINE ADDR   19022
.AAA4    ANOP
K806     DC    X'80806000'             .BLDL NOT FOUND ERROR CODE.
IOERR    DC    X'80B06000'   PERMANENT I/O ERROR ABEND CODE        I251
DCBIFLGS EQU   44            ERROR FLAGS IN SVCLIB DCB             I251
ENABLE   DC    X'FF'
DISABLE  DC    X'00'
ERCOUNT  EQU   *-12                                               19022
ERRCOUNT EQU   ERCOUNT+12                                         19022
COUNT    EQU   X'0F'                                              19022
         DC    X'0'           ERROR FETCH SEQUENCE RECYCLE COUNT  19022
         ENTRY ERCOUNT                                            19022
         SPACE
* STANDARD SVC TO EXIT.
         ENTRY IEA0EXIT
IEA0EXIT  SVC  EXIT
         SPACE
         AIF   (&QNOTMP).M65MP46
         TITLE 'ADDITIONAL CONSTANTS FOR MODEL-65 MULTIPROCESSING' MP65
* CONSTANTS TO REPLACE LITERALS.                                   MP65
*        (MOVED TO END OF SSM CODING)
* EXTERNAL FLIH.                                                   MP65
*        (MOVED TO END OF EXFLIH CODING)                           MP65
* SHOLDTAP                                                         MP65
ASHTAP   DC    A(SHOLDTAP)             .SHOLDTAP BASE ADDR         MP65
* PI FLIH                                                          MP65
*        (MOVED TO END OF PC FLIH CODING)
* TASK-SWITCH AND RELATIVE-PRIORITY SUBROUTINES (SAME BASE REG)    MP65
ASWBASE  DC    A(SWBASE)               .FOR TASKSWCH AND RELPRIOR. MP65
* TYPE 1 SVC EXIT                                                  MP65
AXEBASE  DC    A(XEBASE)               .BASE FOR TYPE-1-SVC EXIT.  MP65
.M65MP46 ANOP
IEASV    DC    16F'0'                                            A68543
PSWSV    DC    D'0'                                               M0009
IEASV1   DC    16F'0'                                            A64491
PSWSV1   DC    D'0'                                              A64491
         TITLE '             OPTION 4 COMMENTARY FOR EXTERNAL FLIH'
* ROUTINE NAME
         SPACE
*        IEAQEX00- EXTERNAL FLIH.
         SPACE 2
* FUNCTION
         SPACE
*        RECEIVES CONTROL WHENEVER AN EXTERNAL INTERRUPT OCCURS. THIS
*      INCLUDES TIMER, CONSOLE KEY AND EXTERNAL LINE INTERRUPTS. THE
*      INTERRUPTED ENVIRONMENT IS SAVED AND EACH EXTERNAL INTERRUPT
*      CODE BIT IN THE EX OPSW IS INTERROGATED. IF A PARTICULAR
*      INTERRUPTION HAS OCCURRED, CONTROL IS GIVEN TO A SLIH FOR THAT
*      INTERRUPT CONDITION. CONTROL IS RETURNED TO THE FLIH UPON
*      COMPLETION OF SLIH PROCESSING.
         SPACE 2
* ENTRY POINT NAMES
         SPACE
*        IEAQEX00-  EXTERNAL FLIH.
         SPACE 2
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 2
* ATTRIBUTES
         SPACE
*       .SUPERVISOR STATE.
*       .DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE CHECK.
*       .RESIDENT CODE.
*       .SERIALLY REUSABLE.
         SPACE 2
* APPLICABILITY
         SPACE
*        USE IN OPTION 4 SYSTEMS
         SPACE 2
* EXTERNAL REFERENCES
         SPACE
*       .IEEBC1PE-  CONSOLE SWITCH ROUTINE.
*       .IEAQTI00-  TIMER SLIH.
*       .TREX-      TRACE ENTRY FOR EX INTERRUPTS.          OPTIONAL  *
         SPACE 2
* SVC USAGE
         SPACE
*        NONE
         SPACE 2
* INPUT
         SPACE
*        THE EX OPSW INTERRUPT CODE IS INTERROGATED TO DETERMINE
*       THE INTERRUPT TYPE.
         SPACE 2
* OUTPUT
         SPACE
*        NONE
         SPACE 2
* ENTRY POINTS
         SPACE
*        IEAQEX00- ENTRY FROM EX INTERRUPT, I.E., FROM LOADING EX NPSW.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE CHECK
*              AND WITH SUPERVISOR PROTECTION KEY.
*             .REGISTERS- AS THEY WERE WHEN INTERRUPT OCCURRED.
         SPACE 2
* EXIT POINTS
         SPACE
*        THERE ARE UP TO EIGHT EXIT POINTS VIA BALR'S TO THE SECOND
*       LEVEL INTERRUPT HANDLERS.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE CHECK
*              AND WITH SUPERVISOR PROTECTION KEY.
*             .REGISTERS-
*               0,1,3-15     .UNPREDICTABLE AND IRRELEVANT.
*               2           .CONTAINS RETURN ADDRESS TO EX FLIH FOR
*                             SLIH TO USE WHEN FINISHED PROCESSING.
         SPACE
*        EXIT TO THE DISPATCHER.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE CHECK
*              AND WITH SUPERVISOR PROTECTION KEY.
*             .REGISTERS- UNPREDICTABLE AND IRRELEVANT.
         SPACE 1
*        TO TRACE ROUTINE.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE CHECK
*              AND WITH SUPERVISOR PROTECTION KEY.
*             .REGISTERS-
*               0,1,15  .UNCHANGED FORM TIME OF INTERRUPT.
*               10      .ENTRY ADDRESS OF EXTERNAL INTERRUPT TRACE RTN.
*               11      .RETURN.ADDRESS.
*               2-9,12-14 ARE IRRELEVANT.
         SPACE 2
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 2
* TABLES AND CONTROL BLOCKS REFERENCED
         SPACE
*       1. IEATCBP+4  (CURRENT TCB ADDRESS).
*       2. TCB-  .TCBGRS (ALTERED)
*                .TCBRBP (UNALTERED)
*       3. RB-   .RBOPSW (ALTERED)
         SPACE 2
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 2
* RESTRICTIONS
         SPACE
*        PRESENT CODE SUPPORTS TIMER AND KEY INTERRUPTS ONLY          *
         SPACE 2
* NOTES
         SPACE
*       REGISTERS 0-15 ARE SAVED IN THE CURRENT TCB. THE SLIM'S MAY USE
*       ANY REGISTER EXCEPT REG 2 WHICH CONTAINS THE RETURN ADDRESS.
         TITLE '             OPTION 4 COMMENTARY FOR PROGRAM FLIH'
* ROUTINE NAME
         SPACE
*        IEAQPK00-  PROGRAM FLIH
         SPACE 2
* FUNCTION
*        RECEIVES CONTROL WHENEVER A PROGRAM INTERRUPT OCCURS.    21014
*      DOES A BRANCH AND LINK TO THE MONITOR CALL INTERRUPT HAND- 21014
*      LER -IHLMCIH- TO CHECK FOR GTF PROCESSING. THEN IT CHECKS  21014
*        RECEIVES CONTROL WHENEVER A PROGRAM INTERRUPT OCCURS. CHECKS
         AIF   (&DSIM EQ 0).COM1
*      IF INTERRUPT WAS CAUSED BY A DECIMAL INSTRUCTION AND IF SO,
*      CONTROL IS TURNED OVER TO THE DECIMAL SIMULATOR. IF NOT, CHECKS
.COM1    AIF   ((&TSTRN EQ 0) OR (&MOD NE 91)).COM1A
*      IF TESTRAN TRACE OR GOBACK IS IN USE AND IF THEY ARE, EXITS
*      TO THE TESTRAN ERROR ROUTINE BY LOADING PSW.  IF NOT, CHECKS
.COM1A   ANOP
*      WHETHER INTERRUPT HAS OCCURRED IN SUPERVISOR CODE. IF IT HAS OR
*      IF THE INTERRUPT OCCURRED IN PROBLEM PROGRAM CODE FOR WHICH NO
*      USER PROVIDED ERROR CORRECTION ROUTINE IS PROVIDED ABTERM
*      PROLOGUE IS ENTERED. IF A USER ROUTINE IS PROVIDED FOR THE
*      PARTICULAR INTERRUPT TYPE THE ROUTINE IS ENTERED.
         SPACE 2
* ENTRY POINT NAMES
         SPACE
*        IEAQPK00-  PROGRAM INTERRUPT FIRST LEVEL HANDLER.
         AIF   (&DSIM EQ 0).COM2
*        ENTRY2  -  FROM IEAXDS00 IF ERROR WAS DETECTED.
.COM2    ANOP
         SPACE 2
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 2
* ATTRIBUTES
         SPACE
*       .SUPERVISOR STATE
*       .DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE CHECK.
*       .RESIDENT CODE
*       .SERIALLY REUSABLE
         SPACE 2
* APPLICABILITY
         SPACE
*        USE IN OPTION 4 SYSTEM
         SPACE 2
* EXTERNAL REFERENCES
         SPACE
*       .IEA0PL00-  ABTERM PROLOGUE.
*       .TRPI-      P FLIH ENTRY TO TRACE.
         AIF   (&DSIM EQ 0).COM3
*       .REGS       DECIMAL SIMULATOR REGISTER SAVE AREA.
.COM3    ANOP
         SPACE 2
* SVC USAGE
         SPACE
*        NONE
         SPACE 2
* INPUT
         SPACE
*        NONE
         SPACE 2
* OUTPUT
         SPACE
*        NONE
         SPACE 2
* ENTRY POINTS
         SPACE
*        IEAQPK00-  ENTRY FROM PROGRAM INTERRUPT.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS- AS THEY WERE WHEN THE INTERRUPTION OCCURRED.
         AIF   (&DSIM EQ 0).COM4
         SPACE
*        ENTRY2  -  FROM IEAXDS00 IF ERROR WAS DETECTED.
*             .PSW- UNCHANGED.
*             .REGISTERS- AS THEY WERE SET BY IEAXDS00.
.COM4    ANOP
         SPACE 2
* EXIT POINTS
         SPACE
*        THERE ARE FOUR BRANCH EXITS TO PROLOGUE.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS-
*               14      .CONTAINS PROLOGUE ENTRY POINT ADDRESS.
*               ALL OTHER REGISTERS ARE IRRELEVANT TO INTERFACE.
         SPACE
*        EXIT POINT TO USER PROVIDED PI ROUTINE. (VIA LPSW)
*             .PSW- CONTROL IS GIVEN TO THE USER ERROR RTN BY LOADING
*              THE PIOPSW WHICH HAS BEEN ALTERED SO THAT THE RIGHT HALF
*        ADDRESS POINTS TO THE USER PROVIDED ERROR RTN.
*             .REGISTERS-
*               0       .UNPREDICTABLE AND IRRELEVANT.
*               1       .ADDRESS OF PIE.
*               2-13    .AS THEY WERE WHEN INTERRUPT OCCURRED.
*               14      .RETURN ADDRESS FOR USER'S ROUTINE.
*               15      .ENTRY POINT ADDRESS OF USER'S ROUTINE.
         AIF   ((&TSTRN EQ 0) OR (&MOD NE 91)).COM5
         SPACE
*        EXIT POINT TO TESTRAN ERROR HANDLING ROUTINE (VIA LPSW).
*             .PSW- CONTROL IS PASSED BY MOVING THE ADDRESS OF THE
*              TESTRAN ERROR ROUTINE INTO A PSW SUPPLIED BY TESTRAN.
*             .REGISTERS-
*               9       .CONTAINS ADDRESS OF TESTRAN CONTROL CORE
*                        PLUS 20.
.COM5    AIF   (&DSIM EQ 0).COM6
         SPACE
*        EXIT POINT TO DECIMAL SIMULATOR.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS- NO SPECIFIC CONTENT REQUIRED.
.COM6    ANOP
         SPACE 2
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 2
* TABLES AND CONTROL BLOCKS REFERENCED
         SPACE
*       1. IEATCBP+4 (CURRENT TCB).
*       2. TCB-  .TCBPIE (UNALTERED)
*       3. PIE-  .PIEPSW(ALTERED)
*                .1ST BYTE (ALTERED)
*                .PIEPICA (UNALTERED)
*       4. PICA  .ENTIRE PICA (UNALTERED)
         AIF   (&QNOTMP).NOTMP18                                  21014
*       5.CVTGTF-  .CVTGTFST  (UNALTERED)                         21014
.NOTMP18 ANOP                                                     21014
         SPACE 2
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 2
* RESTRICTIONS ON USAGE OF ROUTINE
         SPACE
*        NONE
         SPACE 2
* NOTES
         SPACE
*        NONE
         SPACE 3
         TITLE '             OPTION 4 COMMENTARY FOR I/O FLIH'
* ROUTINE NAME
         SPACE
*        IEAQIO00-  I/O FLIH
         SPACE 2
* FUNCTION
         SPACE
*        RECEIVES CONTROL WHENEVER AN I/O INTERRUPT OCCURS. THE
*       ORIGINAL INTERRUPTED ENVIRONMENT IS SAVED SO THAT IT MAY BE
*       RESTORED UPON COMPLETION OF I/O PROCESSING. PROVISION IS MADE
*       TO HANDLE NESTED I/O INTERRUPTS, I.E., THE ENVIRONMENT IS NOT
*       SAVED, BUT IOS IS ENTERED.
*        TEMPORARY CODE IS INCLUDED TO ALLOW I/O INTERRUPTS TO OCCUR  *
*       WITH CONTROL AND ENVIRONMENT BEING RESTORED TO THE INTERRUPTED*
*       CODE WITHOUT PASSING THROUGH THE DISPATCHER. THIS PROCESS IS  *
*       CALLED PSEUDO-DISABLING.                                      *
         SPACE 2
* ENTRY POINT NAMES
         SPACE
*        IEAQIO00-  I/O FLIH
*        DISMISS- RETURN POINT AFTER IOS COMPLETION.
         SPACE 2
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 2
* ATTRIBUTES
         SPACE
*       .SUPERVISOR STATE
*       .DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE CHECK.
*       .RESIDENT CODE
*       .REENTRANT
         SPACE 2
* APPLICABILITY
         SPACE
*        USE IN OPTION 4 SYSTEMS.
         SPACE 2
* EXTERNAL REFERENCES
         SPACE
*       .IECINT-  IOS ENTRY POINT
*       .TRIO-    I/O TRACE ENTRY POINT
         SPACE 2
* SVC USAGE
         SPACE
*        NONE
         SPACE 2
* INPUT
         SPACE
*        NONE
         SPACE 2
* OUTPUT
         SPACE
*        NONE
         SPACE 2
* ENTRY POINTS
         SPACE
*        IEAQIO00-  ENTRY FROM I/O INTERRUPT.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS- AS THEY WERE WHEN INTERRUPT OCCURRED.
         SPACE
*        DISMISS-  RETURN POINT AFTER IOS COMPLETION.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS-
*               10      .ADDR OF 'DISMISS'- USED FOR ADDRESSABILITY.
*               OTHERS  .IRRELEVANT.
         SPACE 2
* EXIT POINTS
         SPACE
*        TO DISPATCHER AFTER COMPLETION OF ORIGINAL I/O INTERRUPT.
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS-
*               0-15    .UNPREDICTABLE AND IRRELEVANT.
         SPACE
*        EXIT TO IOS
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS-
*               5       .IOS BASE VALUE
*               6       .IOS ENTRY POINT VALUE.
*               OTHER REGISTERS ARE IRRELEVANT.
         SPACE
*        RETURN TO PSEUDO-DISABLED CODE
*             .PSW- SUPERVISOR STATE, DISABLED EXCEPT FOR  MACHINE
*              CHECK, SUPERVISOR PROTECTION KEY.
*             .REGISTERS- ALL REGISTERS CONTAIN VALUE AT TIME OF
*              INTERRUPT.
         SPACE 2
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 2
* TABLES AND CONTROL BLOCKS REFERENCED
         SPACE
*        1. TCB    .TCBRBP(UNALTERED)
*                  .TCBGRS(ALTERED)
*        2. RB     .RBOPSW(ALTERED)
         SPACE 2
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 2
* RESTRICTIONS ON USAGE OF THE ROUTINE
         SPACE
*        NONE
         SPACE 2
* NOTES
         SPACE
*        NONE
         AIF   (&SMF NE 1).NOSMF20
         TITLE '        COMMENTARY FOR SMF SYS WAIT TIME ROUTINE'   SMF
* ROUTINE NAME                                                      SMF
         SPACE 1                                                    SMF
*        IEAQWAIT- SMF WAIT TIME COLLECTION ROUTINE                 SMF
         SPACE 2                                                    SMF
* FUNCTION                                                          SMF
         SPACE 1                                                    SMF
*             THE SMF WAIT TIME COLLECTION ROUTINE IS ENTERED FROM  SMF
*        EITHER THE EX FLIH OR I/O FLIH EACH TIME THEY ARE EN-      SMF
*        TERED. IF THE 'CURRENT' TCB IS THE SYSTEM PSEUDO WAIT TCB, SMF
*        THE INTERVAL TIMER IS READ OUT. THIS VALUE IS SUBTRACTED   SMF
*        FROM THE VALUE IN A SPECIAL SAVE FIELD TO OBTAIN THE E-    SMF
*        LAPSED TIME THE SYSTEM WAS WAITING. (THE VALUE IN THE SPE- SMF
*        CIAL SAVE FIELD WAS PLACED THERE BY THE DISPATCHER WHO     SMF
*        READ OUT THE INTERVAL TIMER WHEN HE DISPATCHED THE SYSTEM  SMF
*        WAIT TCB). THE ELAPSED VALUE IS ADDED TO ACCUMULATIVE      SMF
*        WAIT TIME AND THE NEW ACCUMULATIVE SYSTEM WAIT TIME IS     SMF
*        SAVED.                                                     SMF
         SPACE 2                                                    SMF
* ENTRY POINT NAME                                                  SMF
         SPACE 1                                                    SMF
*        IEAQWAIT- ENTRY TO SMF WAIT TIME COLLECTION.               SMF
         SPACE 2                                                    SMF
* CONTAINED IN MODULE                                               SMF
         SPACE 1                                                    SMF
*        IEAQNU- OPTION 4 NUCLEUS                                   SMF
         SPACE 2                                                    SMF
* ATTRIBUTES                                                        SMF
         SPACE 1                                                    SMF
*        .SUPERVISOR STATE                                          SMF
*        .DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE CHECK SMF
*        .RESIDENT                                                  SMF
*        .REENTRANT                                                 SMF
         SPACE 2                                                    SMF
* APPLICABILITY                                                     SMF
         SPACE 1                                                    SMF
*        USE IN OPTION 4 SYSTEM                                     SMF
         SPACE 2                                                    SMF
* EXTERNAL REFERENCES                                               SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* SVC USAGE                                                         SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* INPUT                                                             SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* OUTPUT                                                            SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* ENTRY POINTS                                                      SMF
         SPACE 1                                                    SMF
*        IEAQWAIT- ENTRY FROM EX OR I/O FLIH                        SMF
*        .PSW-     SUPERVISOR STATE                                 SMF
*        .         DISABLED EXCEPT FOR MACHINE CHECK                SMF
*        .         SUPERVISOR PROTECT KEY                           SMF
*        .REGISTERS 0-12,14,15 IRRELEVANT                           SMF
*                   13 RETURN ADDRESS TO CALLER                     SMF
         SPACE 2                                                    SMF
* EXIT POINTS                                                       SMF
         SPACE 1                                                    SMF
*        BRANCH ON R13 TO CALLER                                    SMF
*        .PSW-      SUPERVISOR STATE                                SMF
*                   DISABLED EXCEPT FOR MACHINE CHECK               SMF
*                   SUPERVISOR PROTECT KEY                          SMF
*        .REGISTERS 0-4,9,11,12,13,15 TRANSPARENT                   SMF
*                   5-8,10,14 ARE VOLATILE                          SMF
         SPACE 2                                                    SMF
* ERROR EXIT POINTS                                                 SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED                   SMF
         SPACE 1                                                    SMF
*        1. IEATCBP      -NOT ALTERED                               SMF
*        2. INTERVAL TIMER  -NOT ALTERED                            SMF
*        3. SYSWSAVE   -ALTERED                                     SMF
*        4. WAITTCB    -NOT ALTERED                                 SMF
         SPACE 2                                                    SMF
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED                     SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* RESTRICTIONS                                                      SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* NOTES                                                             SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
.NOSMF20 ANOP                                                       SMF
         TITLE '         OPTION 4 COMMENTARY FOR SVC FLIH'
* ROUTINE NAME
         SPACE 2
* FUNCTION
         SPACE
*             THE SVC FIRST LEVEL INTERRUPT HANDLER, ENTERED WHENEVER
*        AN SVC IS ISSUED, PERFORMS THE FOLLOWING BASIC FUNCTIONS-
*             1. SAVES THE INTERRUPTED TASK'S REGISTERS.
*             2. OBTAINS A FULL WORD TABLE ENTRY FROM THE SVC TABLE
*                (IN IEAQBK00) RELATED TO THE SVC ISSUED. THE ENTRY
*                CONTAINS INFORMATION FOR LOCATING AND ENTERING THE
*                ROUTINE.
*             3. DETECTS INVALID SVC'S AND INITIATES AN ABEND PROCEDURE
*                FOR THE ISSUING TASK.
*             4. GIVES CONTROL DIRECTLY TO TYPE 1 SVC'S.
*             5. INTERFACES WITH THE TRANSIENT AREA HANDLER (IEAQTR00)
*                TO CREATE AN SVRB AND GIVE CONTROL TO TYPE 2,3 AND 4
*                SVC'S.
         SPACE 2
* ENTRY POINT NAMES
         SPACE
*        IEAQSC00-  SVC FLIH, ENTRY FROM INTERRUPT.
*        LOWUSER-  COMPARAND FOR LOWEST USER SVC NO. (TIMES 4).
         SPACE 2
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 2
* ATTRIBUTES
         SPACE
*       .SUPERVISOR STATE
*       .DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE CHECK.
*       .RESIDENT CODE.
*       .SERIALLY REUSABLE.
         SPACE 2
* APPLICABILITY
         SPACE
*        USE IN OPTION 4 SYSTEMS.
         SPACE 2
* EXTERNAL REFERENCES
         SPACE
*        1. IBMORG-   ORIGIN OF IBM PROVIDED SVC'S.
*        2. USERORG-  ORIGIN OF USER PROVIDED SVC'S.
*        3. IEAQTR00- TRANSIENT AREA HANDLER FOR HANDLING TYPE 2,3, AND
*                     4 SVC'S.
*        4. IEAQAB00- ABTERM
*        5. TRSVC-    TRACE ENTRY FOR SVC'S.
         SPACE 2
* SVC USAGE
         SPACE
*        NONE
         SPACE 2
* INPUT
         SPACE
*        THE SVC INTERRUPTION CODE IN THE SVC OPSW.
         SPACE 2
* OUTPUT
         SPACE
*        NONE
         SPACE 2
* ENTRY POINTS
         SPACE
*        1. IEAQSC00- ENTRY FROM SVC INTERRUPT.
*           -PSW- SUPERVISOR MODE, DISABLED EXCEPT FOR MACHINE CHECK,
*                 SUPERVISOR PROTECTION KEY.
*           -REGISTERS- UNCHANGED FROM TIME OF INTERRUPTION.
         SPACE
*        2. LOWUSER- VALUE OF 4 TIMES THE LOWEST USER SVC- SUPPLIED
*           BY NIP.
         SPACE 2
* EXIT POINTS
         SPACE
*        1. BRANCH TO TYPE 1 SVC ROUTINES
*           -PSW- SUPERVISOR MODE, DISABLED EXCEPT FOR MACHINE CHECK,
*                 SUPERVISOR PROTECTION KEY.
*           -REGISTERS-
*                 0,1,13,15-  UNCHANGED FROM TIME OF INTERRUPT.
*                 3-          ADDRESS OF CVT.
*                 4-          ADDRESS OF CURRENT TCB.
*                 5-          ADDRESS OF CURRENT RB.
*                 14-         RETURN ADDRESS TO BE USED BY SVC RTN.
*                 2,6-12      IRRELEVANT.
         SPACE
*        2. BRANCH TO T.A.H. FOR TYPE 2,3, AND 4 SVC'S.
*           -PSW- SUPERVISOR MODE, DISABLED EXCEPT FOR MACHINE CHECK,
*                 SUPERVISOR PROTECTION KEY.
*           -REGISTERS-
*                 0,1,13,15-  UNCHANGED FROM TIME OF INTERRUPT.
*                 3-          ADDRESS OF CVT.
*                 4-          ADDRESS OF CURRENT TCB.
*                 5-          ADDRESS OF CURRENT RB.
*                 6           SVC ENTRY FROM SVC TABLE.
*                 7-          ADDRESS OF IEASCSAV.
*                 12-         ENTRY POINT TO IEAQTR00.
*                 14-         RETURN ADDRESS TO BE USED BY SVC RTN.
*                 8-11        IRRELEVANT.
         SPACE 2
* ERROR EXIT POINTS
         SPACE
*     1. ERROR BRANCH TO ABTERM CODE (IEA0AB00-10, EDIT ENTRY POINT)
*             -PSW- .SUPERVISOR MODE
*                   .DISABLED EXCEPT FOR MACHINE CHECK.
*                   .SUPERVISOR PROTECTION KEY
*             -REGISTERS-    -CONTENTS-
*              0,2-12,14,15  .UNCHANGED FROM POINT OF INTERRUPT.
*              1             .ABTERM ERROR CODE, RIGHT JUSTIFIED.
*              13            .ABTERM EDIT ENTRY POINT ADDRESS.
         SPACE
*             THE ERROR CODE IS 'F00' WITH THE 00 REPLACED WITH THE
*             ERROR SVC NUMBER.
         SPACE 2
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED
         SPACE
*        1. IBMORG  (SVC TABLE ENTRIES)-NOT ALTERED
*        2. USERORG (SVC TABLE ENTRIES)-NOT ALTERED
*        3. TCBRBP  (TCB)              -NOT ALTERED
*        4. TCBGRS  (TCB)              -ALTERED
*        5. IEATCBP (TCB POINTERS)     -NOT ALTERED
         SPACE 2
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 2
* RESTRICTIONS ON USAGE OF ROUTINE
         SPACE
*        NONE
         AIF   (&SMF NE 1).NSMFEXF                                  SMF
         TITLE '             COMMENTRY FOR EXCP COUNTER ROUTINE'    SMF
* ROUTINE NAME                                                      SMF
         SPACE 1                                                    SMF
*        IEASMFEX-  EXCP COUNTER ROUTINE                            SMF
         SPACE 2                                                    SMF
* FUNCTION                                                          SMF
         SPACE 1                                                    SMF
*             THE EXCP COUNTER ROUTINE COUNTS DIRECT 'SVC 0' EXCP'S SMF
*        AND INDIRECT 'PCI INTERRUPT, CHANNEL END, ABNORMAL END'    SMF
*        APPENDAGE EXCP RETURNS TO IOS.  EXCP COUNTING IS PERFORMED SMF
*        ONLY FOR THE PROBLEM PROGRAM. COUNTING IS CONTROLLED BY    SMF
*        A MASK OF THE PROBLEM PROGRAM TIOT. COUNTS ARE MAINTAINED  SMF
*        BY DATA SET/DEVICE LEVEL AND ARE CONTAINED IN THE TCT.     SMF
*        EXCP COUNTS FOR OPEN/CLOSE/EOV FUNCTIONS ARE INCLUDED.     SMF
         SPACE 2                                                    SMF
* ENTRY POINT NAME                                                  SMF
         SPACE 1                                                    SMF
*        IEASMFEX-  ENTRY TO EXCP COUNTER.                          SMF
         SPACE 2                                                    SMF
* CONTAINED IN MODULE                                               SMF
         SPACE 1                                                    SMF
*        IEAQNU-  OPTION 4 NUCLEUS                                  SMF
         SPACE 2                                                    SMF
* ATTRIBUTES                                                        SMF
         SPACE 1                                                    SMF
*        .SUPERVISOR STATE                                          SMF
*        .DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE CHECK SMF
*        .RESIDENT CODE                                             SMF
*        .REENTRANT                                                 SMF
         SPACE 2                                                    SMF
* APPLICABILITY                                                     SMF
         SPACE 1                                                    SMF
*        USE IN OPTION 4 SYSTEM                                     SMF
         SPACE 2                                                    SMF
* EXTERNAL REFERENCES                                               SMF
         SPACE 1                                                    SMF
*        .NONE                                                      SMF
         SPACE 2                                                    SMF
* SVC USAGE                                                         SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* INPUT                                                             SMF
         SPACE 1                                                    SMF
*             THE FOLLOWING REGISTERS ARE PASSED ON ENTRY.          SMF
*                  0 - TCB ADDRESS                                  SMF
*                  1 - RQE ADDRESS                                  SMF
*                  2 - IOB ADDRESS                                  SMF
*                  3 - DEB ADDRESS                                  SMF
*                  4 - DCB ADDRESS                                  SMF
*                  7 - UCB ADDRESS                                  SMF
*                 14 RETURN ADDRESS                                 SMF
*                 15 ENTRY POINT ADDRESS                            SMF
*              REGISTERS 0 THROUGH 9 MUST NOT BE ALTERED AT EXIT.   SMF
         SPACE 2                                                    SMF
*        OUTPUT                                                     SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* ENTRY POINTS                                                      SMF
         SPACE 1                                                    SMF
*        IEASMFEX-  ENTRY FROM IOS                                  SMF
*       .PSW-     .SUPERVISOR STATE                                 SMF
*                 .DISABLED EXCEPT FOR MACHINE CHECK                SMF
*                 .SUPERVISOR PROTECT KEY                           SMF
*       .REGISTERS 10 - 13 ARE IRREVA LENT.                         SMF
*                 14 RETURN ADDRESS TO CALLER.                      SMF
*                 15 ENTRY POINT ADDRESS                            SMF
         SPACE 2                                                    SMF
* EXIT POINTS                                                       SMF
         SPACE 1                                                    SMF
*        BRANCH ON REGISTER 14 BACK TO CALLER.                      SMF
*       .PSW-     .SUPERVISOR STATE                                 SMF
*                 .DISABLED EXCEPT FOR MACHINE CHECK                SMF
*                 .SUPERVISOR PROTECT KEY                           SMF
*       .REGISTERS 0 - 9,14 TRANSPARENT OVER ROUTINE.               SMF
*                  10 - 13,15 VOLATILE OVER ROUTINE.                SMF
         SPACE 2                                                    SMF
* ERROR EXIT POINTS                                                 SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED                   SMF
         SPACE 1                                                    SMF
*        1. TCBTCT   (TCB)  -NOT ALTERED                            SMF
*        2. DCBTIOT  (DCB)  -NOT ALTERED                            SMF
*        3. DCBOFLGS (DCB)  -NOT ALTERED                            SMF
*        4. TCTUCBP  (TCT)  -NOT ALTERED                            SMF
*        5. TCTDCBTD (TCT)  -NOT ALTERED                            SMF
*        6. TCTSCTR  (TCT)  -NOT ALTERED                            SMF
*        7. TCTIOTSD (TCT)  -NOT ALTERED                            SMF
*        8. TCTDCTR  (TCT)  -ALTERED                                SMF
*        9. TCTIOTBL (TCT)  -NOT ALTERED                            SMF
         SPACE 2                                                    SMF
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED                     SMF
         SPACE 1                                                    SMF
*        NONE                                                       SMF
         SPACE 2                                                    SMF
* RESTRICTIONS ON USE OF ROUTINE                                    SMF
         SPACE 1                                                    SMF
*        NONE                                                       0-
         SPACE 2                                                    SMF
.NSMFEXF ANOP                                                       SMF
         TITLE '             COMMENTARY FOR TYPE 1 SVC EXIT'
* ROUTINE NAME
         SPACE
*        IEA0XE00-  TYPE 1 SVC EXIT
         SPACE 2
* FUNCTION
         SPACE
*              RECEIVES CONTROL FROM COMPLETED TYPE 1 SVC ROUTINES
*        AND PASSES CONTROL BACK TO EITHER THE ISSUER OF THE SVC OR
*        THE DISPATCHER.
*              CONTROL IS RETURNED TO THE ISSUER OF THE SVC IF NO TASK
*        SWITCH HAS OCCURRED. OTHERWISE, ON A TASK SWITCH, CONTROL IS
*        GIVEN TO THE DISPATCHER.
         SPACE 2
* ENTRY POINT NAMES
         SPACE
*        IEA0XE00-  TYPE 1 SVC EXIT.
         SPACE 2
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 2
* ATTRIBUTES
         SPACE
*       .SUPERVISOR MODE
*       .DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE CHECK.
*       .SERIALLY REUSABLE
         SPACE 2
* APPLICABILITY
         SPACE
*       .OPTION 4 SYSTEMS.
         SPACE 2
* EXTERNAL REFERENCES
         SPACE
*        NONE
         SPACE 2
* SVC USAGE
         SPACE
*        NONE
         SPACE 2
* INPUT
         SPACE
*        NONE
         SPACE 2
* OUTPUT
         SPACE
*        NONE
         SPACE 2
* ENTRY POINTS
         SPACE
*     1. IEA0XE00-  ENTRY POINT FROM EXITING TYPE 1 SVC.
         SPACE
*        PSW       .SUPERVISOR STATE.
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISOR PROTECTION KEY.
         SPACE
*        REGISTERS .0-13,15  .AS THEY WERE WHEN SVC ROUTINE EXITED.
*                  .14       .ADDRESS OF TYPE 1 SVC EXIT (IEA0XE00)
         SPACE 2
* EXIT POINTS
         SPACE
*     1. LPSW TO ISSUER OF SVC.
         SPACE
*        PSW  (THE PSW LOADED)    .THE PSW THAT WAS STORED IN THE
*                                  SVC OPSW HARDWARE LOCATION.
         SPACE
*        REGISTERS      .2-14     .RESTORED TO CONTENTS AT TIME WHEN
*                                  SVC WAS ISSUED.
*                       0,1,15    .CONTENTS LEFT AT COMPLETION OF SVC
*                                  ROUTINE.
         SPACE
*     2. BRANCH TO DISPATCHER
         SPACE
*        PSW       .SUPERVISOR STATE
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISORY PROTECTION KEY.
         SPACE
*        REGISTERS- IRRELEVANT. REGS 2-14 AT TIME SVC WAS ISSUED AND
*                  0,1 AND 15 RETURNED BY SVC ARE STORED IN TCB.
         SPACE 2
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 2
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED
         SPACE
*     1. CURRENT TCB POINTER (IEATCBP+4)-  .NOT ALTERED
*     2. NEW TCB POINTER (IEATCBP)-        .NOT ALTERED
*     3. TCB-  TCBGRS                      .ALTERED
*     4. TCB-  TCBRBP                      .NOT ALTERED
*     5. RB-   RBOPSW                      .ALTERED
         SPACE 2
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 2
* RESTRICTIONS ON USAGE OF ROUTINE
         SPACE
*        NONE
         SPACE 2
* NOTES
         SPACE
*    1. IF THE DISPATCHER IS ENTERED, THE SVC OPSW STORED WHEN THE SVC
*       WAS ISSUED WILL BE MOVED TO THE RBOPSW SLOT IN THE CURRENT RB.
         TITLE '             COMMENTARY FOR TASK SWITCH ROUTINE'
* ROUTINE NAME
         SPACE
*        IEA0DS02-  TASK SWITCHING ROUTINE
         SPACE 3
* FUNCTION
         SPACE
*              THIS ROUTINE WILL DETERMINE WHETHER A GIVEN TASK IS
*        OF HIGHER OR LOWER PRIORITY THAN THE PRIORITY LEVEL AT WHICH
*        THE DISPATCHER WILL EXAMINE TASK DISPATCHABILITY WHEN NEXT
*        ENTERED. IF THE GIVEN TASK IS OF HIGHER PRIORITY, ITS TCB
*        ADDRESS WILL BE PLACED IN IEATCBP THUS MAKING IT THE 1ST TASK
*        EXAMINED BY THE DISPATCHER. IF THE GIVEN TASK IS OF LOWER
*        PRIORITY, NO ALTERATION IS MADE TO IEATCBP.
*              A SWITCH WILL NOT BE MADE TO A NON-DISPATCHABLE (TASK OR
*        RB WAIT) TASK.
         SPACE 3
* ENTRY POINT NAMES
         SPACE
*        IEA0DS02-  TASK SWITCHING ROUTINE.
         SPACE 3
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 3
* ATTRIBUTES
         SPACE
*       .SUPERVISOR STATE
*       .DISABLED EXCEPT FOR MACHINE CHECK.
*       .RESIDENT
         SPACE 3
* APPLICABILITY
         SPACE
*        OPTION 4 SYSTEMS
         SPACE 3
* EXTERNAL REFERENCES
         SPACE
*        NONE
         SPACE 3
* SVC USAGE
         SPACE
*        NONE
         SPACE 3
* INPUT
         SPACE
*     1. REGISTER 10 CONTAINS THE ADDRESS (IN THE 3 LOW ORDER BYTES)
*        OF THE SUBJECT TASK'S TCB.
         SPACE 3
* OUTPUT
         SPACE
*        NONE
         SPACE 3
* ENTRY POINTS
         SPACE
*     1. IEA0DS02
         SPACE
*       .PSW       .SUPERVISOR STATE.
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISOR PROTECTION KEY.
         SPACE
*       .REGISTERS .0-9,12,13,15  .IRRELEVANT AND UNPREDICTABLE.
*                  .10            .ADDRESS OF SUBJECT TASK'S TCB.
*                  .11            .ENTRY POINT ADDRESS OF TASK SWITCH
*                                  ROUTINE. (USED AS WORK REG BY RTN.)
*                  .14            .ADDRESS OF RETURN POINT IN CALLER.
         SPACE 3
* EXIT POINTS
         SPACE
*     1. THREE BRANCHES ON REGISTER 14 BACK TO CALLER.
         SPACE
*       .PSW       .SUPERVISOR STATE
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISOR PROTECTION KEY.
         SPACE
*       .REGISTERS .0-9,12,13,15  .UNALTERED- TRANSPARENT TO CALLER.
*                  .10            .UNALTERED- SUBJECT TASK'S TCB ADDR.
*                  .11            .UNPREDICTABLE- VOLATILE TO CALLER.
*                  .14            .RETURN ADDRESS TO CALLER.
         SPACE 3
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 3
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED
         SPACE
*     1. IEATCBP (TCB POINTER)    .MAY BE ALTERED.
*     2. TCB- TCBDSP              .NOT ALTERED.
*     3. TCB- TCBTCB              .NOT ALTERED.
         SPACE 3
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 3
* RESTRICTIONS ON USAGE OF ROUTINE
         SPACE
*        NONE
         SPACE 3
* NOTES
         SPACE
*        NONE
         TITLE '             COMMENTARY FOR THE DISPATCHER'
* ROUTINE NAME
         SPACE
*        IEA0DS-   DISPATCHER
         SPACE 3
* FUNCTION
         SPACE
*        THE DISPATCHER IS ENTERED AT THE COMPLETION OF MOST
*    INTERRUPT PROCESSING SEQUENCES. IF TIME SHARING (TSO) IS     20021
*    ACTIVE, THE TS DISPATCHER (PACKAGED IN TSIP) IS ENTERED      20021
*    VIA * BALR 14,15 AND UPON RETURN, THE DISPATCHER PROCEEDS    20021
*    AS IF TSO WHERE NOT ACTIVE. ITS FUNCTION IS TO DETER. THE    20021
*    NEXT, HIGHEST PRIORITY, READY TASK STARTING WITH THE PRIORITY
*    LEVEL INDICATED BY THE TCB ADDRESSES IN LOCATIONS IEATCBP OR
*    IEATCBP+4. THE DISPATCHER SEARCHES THE READY QUEUE OF TCB'S
*    UNTIL A DISPATCHABLE TASK IS FOUND.
*        IF NO READY TASK IS FOUND, THE DISPATCHER WILL LOAD A WAIT
*    STATE PSW.
*        WHEN A TASK SWITCH IS INITIATED, TASK INTERVAL TIMING (IF
*    PRESENT) IS STOPPED FOR THE TASK RELINQUISHING CONTROL AND
*    STARTED FOR THE TASK GAINING CONTROL. IF OPTION 13, JOB STEP
*    TIMING IS INCLUDED IN THE SYSTEM, JOB STEP INTERVAL TIMING IS MTS0
*    STOPPED FOR THE JOB STEP RELINQUISHING CONTROL AND STARTED    MTS0
*    FOR THE JOB STEP GAINING CONTROL.  ANY JOB STEP WAIT TIMING   MTS0
*    FOR THE JOB STEP GAINING CONTROL IS CANCELLED.                MTS0
*       IF TSO IS ACTIVE, THE TSIP PROGRAM IS ENTERED TO ENABLE   20021
*    THE TIME SHARING DRIVER TO BE INFORMED OF THE TASK SWITCH.   20021
*        THE DISPATCHER INTERFACES WITH STAGE 3 OF THE EXIT EFFECTOR
*    SO THAT SCHEDULED ASYNCHRONOUS EXIT ROUTINES MAY BE PLACED IN
*    CONTENTION FOR EXECUTION. THE EXIT EFFECTOR RETURNS TO THE
*    DISPATCHER UPON COMPLETING ITS FUNCTION.
         SPACE 3
* ENTRY POINT NAMES
         SPACE
*     1. IEA0DS    .NORMAL ENTRY POINT TO DISPATCHER.
         SPACE 3
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 3
* ATTRIBUTES
         SPACE
*       .SUPERVISOR MODE
*       .DISABLED EXCEPT FOR MACHINE CHECK.
*       .RESIDENT
*       .SERIALLY REUSABLE
         SPACE 3
* APPLICABILITY
         SPACE
*        OPTION 4 SYSTEMS.
         SPACE 3
* EXTERNAL REFERENCES
         SPACE
*     1. IEAQTD01-  TIMER DQ RTN.
*     2. IEAQTE00-  TIMER NQ RTN.
*     3. IKJEAI00- TIME SHARING INTERFACE PROGRAM(IF TSO ACTIVE)  20021
*     4. TRDISP-    DISPATCHER TRACE ENTRY POINT.
         SPACE 3
* SVC USAGE
         SPACE
*        NONE
         SPACE 3
* INPUT
         SPACE
*        NONE
         SPACE 3
* OUTPUT
         SPACE
*        NONE
         SPACE 3
* ENTRY POINTS
         SPACE
*     1. IEA0DS    .NORMAL ENTRY TO DISPATCHER.
*       .PSW-      .SUPERVISOR STATE
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISORY PROTECT KEY.
*       .REGISTERS  2-9      .TRANSPARENT OVER DISPATCHER. SHOULD BE
*                             VALUE OF REGISTERS WHEN INTERRUPT (WHICH)
*                             LEAD TO THE DISPATCHER BEING ENTERED).
*                             OCCURRED.
*                   0,1      .IRRELEVANT.
*                   10,15    .IRRELEVANT.
         SPACE 3
* EXIT POINTS
         SPACE
*     1. LPSW TO TASK CODE.
*       .PSW-      .THE PSW THAT IS LOADED IS OBTAINED FROM THE
*                   CURRENT RB OF THE TASK BEING GIVEN CONTROL. THIS
*                   PSW WAS SAVED AT THE TIME THE TASK WAS INTERRUPTED.
*       .REGISTERS .ALL REGISTERS CONTAIN THE VALUE AT THE TIME OF
*                   INTERRUPT WHICH LEAD TO THE DISPATCHER BEING
*                   ENTERED.
         SPACE 3
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 3
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED
         SPACE
*     1. IEATCBP        .ALTERED
*     2. IEATCBP+4      .ALTERED
*     3. TCB- TCBRBP    .NOT ALTERED
*     4. TCB- TCBGRS    .ALTERED
*     5. TCB- TCBTCB    .NOT ALTERED
*     6. TCB- TCBTME    .NOT ALTERED
*     7. TCB- TCBOTC    .NOT ALTERED                               MTS0
*     8. TCB- TCBLTC    .NOT ALTERED                               MTS0
*     9. TCB- TCBPKF    .NOT ALTERED                               MTS0
*    10. TCB- TCBJSTCB  .NOT ALTERED                               MTS0
*    11. RB-  RBOPSW    .ALTERED                                   MTS0
*    12. RB-  RBWCF     .NOT ALTERED                               MTS0
*    13. TQE- TQEFLGS   .ALTERED                                   MTS0
*    14. TQE- TQEVAL    .ALTERED                                   MTS0
*    15. TQE- TQESAV    .NOT ALTERED                               MTS0
*    16. CVT-  NOT ALTERED    (IF TSO ACTIVE)                     20021
*    17. TSCVT-NOT ALTERED    (IF TSO ACTIVE)                     20021
         SPACE 3
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 3
* RESTRICTIONS ON USAGE OF ROUTINE
         SPACE
*        NONE
         SPACE 3
* NOTES
         SPACE
*     1. DESCRIPTION OF INTERFACE WITH STAGE 3 OF EXIT EFFECTOR.
*       .PSW       .SUPERVISOR STATE
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISORY PROTECT KEY.
*       .REGISTERS  2-9      .VALUE OF REGISTERS WHEN INTERRUPT
*                             OCCURRED.
*                   10,11    .CONTAIN CONTENTS OF IEATCBP AND
*                             IEATCBP+4.
*                   12-1     .UNPREDICTABLE.
         SPACE
*     UPON RETURNING TO THE DISPATCHER FROM STAGE 3-
*       .PSW       .SUPERVISOR STATE
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISORY PROTECT KEY.
*       .REGISTERS  0-9      .IRRELEVANT
*                   10,11    .MUST BE TRANSPARENT OVER STAGE 3.
*                   12-15    .IRRELEVANT
         TITLE '             COMMENTARY FOR STAGE 2 OF EXIT EFFECTOR'
* ROUTINE NAME
         SPACE
*        IEA0EF00-  EXIT EFFECTOR STAGE 2.
         SPACE 3
* FUNCTION
         SPACE
*              STAGE 2 OF THE EXIT EFFECTOR SCHEDULES ASYNCHRONOUS
*        EXIT ROUTINES. THE ADDRESS OF AN IQE OR RQE IS PASSED TO
*        THE ROUTINE IN A REGISTER AND THE 'QE' IS PLACED ON A QUEUE
*        OF IQE'S OR RQE'S. THESE QUEUES ARE PROCESSED IN STAGE 3
*        OF THE EXIT EFFECTOR ENTERED FROM THE DISPATCHER. RQE
*        ADDRESSES ARE IN TRUE FORM UPON ENTRY TO STAGE 2 WHILE IQE
*        ADDRESSES ARE COMPLEMENTED. A SWITCH IS SET BY STAGE 2 TO
*        INDICATE TO THE DISPATCHER THAT THERE ARE REQUESTS FOR
*        ASYNCHRONOUS EXIT ROUTINES TO BE PROCESSED.
         SPACE 3
* ENTRY POINT NAMES
         SPACE
*        IEA0EF00-  STAGE 2 OF EXIT EFFECTOR.
         SPACE 3
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 3
* ATTRIBUTES
         SPACE
*       .SUPERVISOR STATE
*       .DISABLED EXCEPT FOR MACHINE CHECK.
*       .RESIDENT
*       .SERIALLY REUSABLE
         SPACE 3
* APPLICABILITY
         SPACE
*       .OPTION 4 SYSTEMS.
         SPACE 3
* EXTERNAL REFERENCES
         SPACE
*        NONE
         SPACE 3
* SVC USAGE
         SPACE
*        NONE
         SPACE 3
* INPUT
         SPACE
*     1. REGISTER 1 CONTAINS THE ADDRESS OF THE IQE OR RQE OF THE
*        ASYNCHRONOUS ROUTINE TO BE SCHEDULED. RQE ADDRESSES ARE IN THE
*        LOW ORDER 3 BYTES AND IN TRUE FORM. THE HIGH ORDER BYTE
*        SHOULD BE ZERO. IQE ADDRESSES ARE IN THE LOW ORDER 3 BYTES
*        BUT IN COMPLEMENT FORM (SET BY AN LCR).
         SPACE 3
* OUTPUT
         SPACE
*        NONE
         SPACE 3
* ENTRY POINTS
         SPACE
*     1. IEA0EF00-  ENTRY TO STAGE 2 OF EXIT EFFECTOR TO SCHEDULE
*                   ASYNCHRONOUS EXIT ROUTINES.
*       .PSW-      .SUPERVISOR STATE.
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISOR PROTECT KEY.
*       .REGISTERS .0,2-13,15     .IRRELEVANT.
*                  .14            .RETURN ADDRESS TO CALLER.
*              NOTE- REGISTER 10 IS USED AS A WORK REGISTER AND SO
*                    MAY BE CONVENIENT FOR THE CALLER TO USE IN
*                    BRANCHING TO IEA0EF00.
         SPACE 3
* EXIT POINTS
         SPACE
*     1. BRANCH ON REGISTER 14 BACK TO CALLER.
*       .PSW-      .SUPERVISOR STATE.
*                  .DISABLED EXCEPT FOR MACHINE CHECK.
*                  .SUPERVISOR PROTECT KEY.
*       .REGISTERS .0,2-9,11-15   .TRANSPARENT OVER ROUTINE.
*                  .1             .THE 'QE' ADDRESS IN TRUE FORM.
*                  .10            .UNPREDICTABLE. VOLATILE OVER RTN.
         SPACE 3
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 3
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED
         SPACE
*     1. STAGE 2 ADDS 'QE'S' TO THE AEQ
*     2. THE STAGE 3 SWITCH, IEA0DS01, IN THE DISPATCHER IS SET ON.
         SPACE 3
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*     1. THE ASYNCHRONOUS EXIT QUEUES (AEQ) FOR IQE'S AND RQE'S.
         SPACE 3
* RESTRICTIONS ON USAGE OF ROUTINE
         SPACE
*        NONE
         SPACE 3
* NOTES
         SPACE
*        NONE
         TITLE '        COMMENTARY FOR STAGE 3 OF EXIT EFFECTOR'
* ROUTINE NAME
         SPACE
*        IEA0EF03-  STAGE 3 OF EXIT EFFECTOR
         SPACE 3
* FUNCTION
         SPACE
*        STAGE 3 RECEIVES CONTROL FROM THE DISPATCHER WHENEVER EITHER
*    OR BOTH OF THE ASYNCHRONOUS EXIT QUEUES (AEQ'S) CONTAIN QE'S. THE
*    AEQ FOR IQE'S IS SEARCHED FIRST IN FIFO SEQUENCE. AN IQE WILL BE
*    DEQUEUED FROM THE AEQ AND QUEUED UPON ITS ASSOCIATED IRB IF
*    THE IRB IS EITHER NOT ACTIVE (NOT ON THE RB QUEUE) OR QUEUED
*    ON THE RB QUEUE OF THE TASK FOR WHICH THE SUBJECT REQUEST IS
*    BEING MADE. AN IQE WILL NOT BE DEQUEUED FROM THE AEQ AND QUEUED
*    ON ITS IRB IF ITS TASK HAS A SYSTEM ERROR ASYNCHRONOUS EXIT
*    ACTIVE. IF IQE'S ARE NOT DEQUEUED FROM THE AEQ AND QUEUED ON AN
*    IRB DURING A PASS THROUGH STAGE 3, THEIR PROCESSING IS DEFERRED
*    UNTIL A SUBSEQUENT PASS THROUGH STAGE 3.
*        QUEUING OF AN IQE ON AN IRB IS DONE IN FIFO SEQUENCE.
*        RQE PROCESSING IS IDENTICAL TO IQE PROCESSING WITH THE
*    EXCEPTION THAT RQE'S ARE CHECKED FOR SYSTEM ERROR REQUESTS AND
*    WHEN FOUND CONTROL IS GIVEN TO SIRB PROCESSING CODE.
*        AN IRB INITIALIZATION ROUTINE PERFORMS INITIALIZATION
*    FUNCTIONS FOR BOTH IQE AND RQE REQUESTS.
         AIF   ('&TSO' NE '1').NOTSO7                             20021
*        IF TSO IS ACTIVE AND THE IRB ASSOCIATED WITH THE IQE IS  20021
*    INACTIVE, THE IRB IS TESTED TO SEE IF IT IS AN 'ATTENTION'   20021
*    RB. IF NOT, PROCESSING PROCEEDS AS THOUGH NO TS EXISTED. IF  20021
*    SO, THE TIME SHARING USER'S TCB'S ARE TESTED TO SEE IF       20021
*    ASYNCHRONOUS AND ATTENTION EXITS ARE PERMITTED. IF SO, THE   20021
*    IQE IS SCHEDULED. IF NOT, PROCESSING PROCEEDS AS THOUGH NO   20021
*    TIME SHARING EXISTED.                                        20021
.NOTSO7  ANOP                                                     20021
         SPACE 3
* ENTRY POINT NAMES
         SPACE
*     1. IEA0EF03-  ENTRY FROM DISPATCHER.
         SPACE 3
* CONTAINED IN MODULE
         SPACE
*        IEAQNU- OPTION 4 NUCLEUS.
         SPACE 3
* ATTRIBUTES
         SPACE
*       .SUPERVISOR MODE
*       .DISABLED EXCEPT FOR MACHINE CHECK.
*       .RESIDENT
*       .SERIALLY RESUSABLE
         SPACE 3
* APPLICABILITY
         SPACE
*       .OPTION 4 SYSTEMS
         SPACE 3
* EXTERNAL REFERENCES
         SPACE
*        NONE
         SPACE 3
* SVC USAGE
         SPACE
*        NONE
         SPACE 3
* INPUT
         SPACE
*        NONE
         SPACE 3
* OUTPUT
         SPACE
*        NONE
         SPACE 3
* ENTRY POINTS
         SPACE
*     1. IEA0EF03
         SPACE
*        PSW- .SUPERVISOR STATE.
*             .DISABLED EXCEPT FOR MACHINE CHECK.
*             .SUPERVISOR PROTECTION KEY.
*        REGISTERS-
*              2-9      .VALUES FOR CURRENT TASK.
*              10            .ADDRESS OF 'NEW' TCB  (MAY BE ZERO).
*              11            .ADDRESS OF CURRENT TCB.
*              12-15,0,1     .IRRELEVANT AND UNPREDICTABLE.
         SPACE 3
* EXIT POINTS
         SPACE
*     1. BRANCH BACK TO DISPATCHER.
         SPACE
*        PSW- .SUPERVISOR STATE.
*             .DISABLED EXCEPT FOR MACHINE CHECK.
*             .SUPERVISOR PROTECTION KEY.
*        REGISTERS-
*              0-9,12-15     .IRRELEVANT AND UNPREDICTABLE.
*              10            .ZERO
*              11            .ADDRESS OF HIGHEST PRIORITY TCB.
         SPACE 3
* ERROR EXIT POINTS
         SPACE
*        NONE
         SPACE 3
* TABLES, CONTROL BLOCKS, AND POINTERS REFERENCED
         SPACE
*     1. IQELNK         .ALTERED
*     2. IQEPARAM       .NOT ALTERED
*     3. IQEIRB         .NOT ALTERED
*     4. IQETCB         .NOT ALTERED
*     5. RQELNK         .ALTERED
*     6. RQEUCB         .ALTERED (LOW ORDER BIT)
*     7. RQEDEB         .NOT ALTERED
*     8. DEBTCB         .NOT ALTERED
*     9. DEBIRB         .NOT ALTERED
*    10. UCBTAB         .NOT ALTERED
*    11. TCBRBP         .ALTERED
*    12. TCBFLGS        .NOT ALTERED
*    13. TCBGRS         .ALTERED
*    14. RBSTAB         .ALTERED
*    15. RBEP           .ALTERED
*    16. RBOPSW         .ALTERED
*    17. RBIQUE         .ALTERED
*    18. RBLINK         .ALTERED
*    19. RBSVADDR       .NOT ALTERED
*    20. TCBTSFLG       .NOT ALTERED (IF TSO ACTIVE)              20021
         SPACE 3
* LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED
         SPACE
*        NONE
         SPACE 3
* RESTRICTIONS ON USAGE OF ROUTINE
         SPACE
*        NONE
* NOTES
         SPACE
*        NONE
         TITLE '             COMMENTARY FOR VALIDITY CHECK ROUTINE'
*ROUTINE NAME-     IEA0VL01 - VALIDITY CHECK ROUTINE.
*
*FUNCTIONS-         PROVIDES THE FOLLOWING.
*
*                  1.A CHECK IF THE INPUT ADDRESS IS ON
*                    A FULL WORD BOUNDRY,(OPTION FEATURE)
*
*                  2.A CHECK IF THE INPUT ADDRESS IS
*                    WITHIN MACHINE SIZE AS REFLECTED
*                    BY THE CVTMZ00 FIELD IN THE CVT.
*
*                  3.A CHECK IF THE INPUT ADDRESS'S
*                    STORAGE KEY MATCHES THE TCB
*                    PROTECT KEY FOR THAT JOB. (THE
*                    CURRENT TCB).
*
*ENTRY POINT       IEA0VL01 - VALIDITY CHECK.
*NAMES-
*
*CONTAINED IN      IEAQNU - OPTION 4 NUCLEUS.
*MODULE-
*
*ATTRIBUTES-        RESIDENT,RE-ENTRANT AND IN
*                   SUPERVISOR STATE
*
*APPLICABILITY-     OPTION 4 ONLY
*
*EXTERNAL           CVT TABLE
*REFERENCES-
*
*SVC'S USED         NONE
*
*INPUT              REGISTERS-
*
*                   REGISTER 1, CONTAINS THE INPUT
*                               ADDRESS TO BE VALIDITY
*                               CHECKED.
*
*                   REGISTER 2, ADDRESS OF VALIDITY
*                               CHECK ROUTINE.
*
*                   REGISTER 3, ADDRESS OF CVT TABLE.
*
*                   REGISTER 4, ADDRESS OF CURRENT
*                               TCB.
*
*                   REGISTER 12, REQUESTOR'S RETURN
*                                ADDRESS.
*OUTPUT-            NONE
*
*ENTRY POINTS-     1.IEA0VL01
*
*                  2.IEA0VL01+4
*                    WILL EXECUTE CODE THAT PERFORMS
*                    THE OPTIONAL FEATURE OF CHECKING
*                    IF INPUT IS ON A FULL WORD
*                    BOUNDRY.
*
*EXIT POINTS-      1.BRANCH ON REGISTER 12.
*
*TABLES AND        1.CVT TABLE
*BLOCKS REFERENCED-      CVTMZ00 TESTED
*                  2.TCB TABLE
*                        TCBPKY  TESTED
*
*ERROR EXIT         NONE
*POINT-
*
*LIST ORIGINS,
*TABLES AND         NONE
*CONTROL BLOCKS
*INCLUDED-
*RESTRICTIONS ON         NONE
*USE OF ROUTINE-
*
*NOTES-                  NONE
*
         TITLE '  '
         SPACE
         MEND
