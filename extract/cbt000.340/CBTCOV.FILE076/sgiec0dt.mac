         MACRO
       SGIEC0DT &RESBLDL,&MVT,&RER,&TYPE=
         LCLA  &Q
         LCLA  &EQU                                              M1596
.*
*          RELEASE 21 DELETIONS/CHANGES
*                                                               SA60740
*                                                               SA63933
*                                                               SA62451
*                                                                SM0011
.*                                                               SM0029
.*D098986,099430-099530                                         SA72718
.*C098610,098987,099380                                         SA72718
.*         RELEASE 20 DELETIONS/CHANGES
.* 098900,099200,099400                                          TS2466
.*                                                               M1381
* 1195
* 119456,120600,125600,126200,126400,126600,138800,141600,144800,S20201
* 146200,146400,146800,149200-150000,165000-165200,S20201
* 167400,167800-169700,169800
.*
.*         RELEASE 19 DELETIONS/CHANGES
.* 046200,046500,098200-098600,100520-100550,119464              A28189
.* 046800,048400,083600,089900,097400-097600,098800-099000,      A27543
.* 100520,100540                                                 A27543
.* 002200-002600,005800,007800-008000,017400-017600,             A25998
.* 019800-020000,049800-050160,106600                            A25998
.* 083400-083600                                                 M3387
.* 049930,052200,063820-063980,083260-083680,086650,089900,      M3385
.* 097400,098800,100520,100540,105620-105790                     M3385
.* 052200,054600,056410                                          M4214
.* 099080,099650                                                 M4612
.* 167360,169670                                                 M1596
&Q       SETA  1
.*  GENERATE FIND/BLDL MODULE
         TITLE 'IGC018 - FIND/BLDL AND TTR CONVERT ROUTINES'
*FUNCTION - THIS RESIDENT MODULE SEARCHES A DIRECTORY OF A PARTITIONED
*           ORGANIZATION DATA SET FOR A NAME OR LIST OF NAMES, AND
*           RETURNS INFORMATION STORED IN THE DIRECTORY ASSOCIATED WITH
*           EACH NAME. THE FORMAT OF THE DIRECTORY AND OF THE RETURNED
*           INFORMATION IS DESCRIBED IN THE PUBLICATION          A25998
*           'SUPERVISOR AND DATA MANAGEMENT SERVICES' UNDER      A25998
*           THE HEADING 'PROCESSING A PARTITIONED DATA SET'.     A25998
*
*           THIS MODULE ALSO CONTAINS ENTRY POINTS TO ROUTINES WHICH
*           CONVERT AN ABSOLUTE DIRECT ACCESS ADDRESS, MBBCCHHR, TO AND
*           FROM ITS RELATIVE EQUIVALENT, TTR.
*
*ENTRY POINTS --
*              IGC018   -ENTERED FROM SVC SUPERVISOR AFTER MAINLINE
*                        CODE ISSUES  SVC 18 IN A CALLING SEQUENCE
*                        GENERATED BY ONE OF THE FOLLOWING MACROS--
*
*                             FIND  DCBADDR,NAMEADDR        FIND MACRO
*
*                             LA    0,NAMEADDR                       GN
*                             LA    1,DCBADDR                        GN
*                             LCR   1,1                              GN
*                             SVC   18                           A25998
*
*                             BLDL  DCBADDR,LISTADDR        BLDL MACRO
*
*                             LA    0,LISTADDR                       GN
*                             LA    1,DCBADDR                        GN
*                             SVC   18                               GN
*
*              IECPBLDL -ENTRY VIA A BALR IN ORDER TO BYPASS SVC ENTRY
*                        TO BLDL AND IN ORDER TO SUPPLY A WORKAREA TO
*                        BLDL. NOTE-- THIS ENTRY CAN ONLY BE     A25998
*                        USED BY PROGRAMS OPERATING IN THE       A25998
*                        'SUPERVISOR' STATE. REGISTER CONVEN-    A25998
*                        TIONS UPON ENTRY AND UPON EXIT ARE      A25998
*                        AS FOLLOWS--                            A25998
*
*                           REGISTER         ENTRY             EXIT
*                             0          BLDL LIST ADDRESS  DESTROYED
*                             1          DCB ADDRESS        DESTROYED
*                             2-12       IGNORED            DESTROYED
*                             13         400 BYTE           TRANSPARENT
*                                          WORKAREA ADDRESS
*                             14         RETURN ADDRESS     TRANSPARENT
*                             15         IGNORED            ERROR CODE
*
*              IECPRLTV -ENTRY TO ROUTINE VIA A BALR THAT CONVERTS AN
*                        ABSOLUTE DIRECT ACCESS ADDRESS, MBBCCHHR, INTO
*                        ITS RELATIVE EQUIVALENT, TTR0. REGISTER
*                        CONVENTIONS UPON ENTRY AND UPON EXIT ARE AS
*                        FOLLOWS--
*
*                           REGISTER         ENTRY             EXIT
*                             0          IGNORED            TTR0 RESULT
*                             1          DEB ADDRESS        TRANSPARENT
*                             2          ADDRESS OF         TRANSPARENT
*                                          MBBCCHHR IN CORE
*                             3-8        IGNORED            TRANSPARENT
*                             9-13       IGNORED            DESTROYED
*                             14         RETURN ADDRESS     TRANSPARENT
*                             15         ENTRY ADDRESS      ZERO
*
*              IECPCNVT -ENTRY TO ROUTINE VIA A BALR THAT CONVERTS A
*                        RELATIVE DIRECT ACCESS ADDRESS AND
*                        CONCATENATION NUMBER, TTRN, INTO ITS ABSOLUTE
*                        EQUIVALENT, MBBCCHHR. REGISTER CONVENTIONS
*                        UPON ENTRY AND UPON EXIT ARE AS FOLLOWS--
*
*                           REGISTER         ENTRY             EXIT
*                             0          ACTUAL TTRN        DESTROYED
*                             1          DEB ADDRESS        TRANSPARENT
*                             2          ADDRESS OF 8 BYTE  TRANSPARENT
*                                          AREA FOR MBBCCHHR
*                             3-8        IGNORED            TRANSPARENT
*                             9-13       IGNORED            DESTROYED
*                             14         RETURN ADDRESS     TRANSPARENT
*                             15         ENTRY ADDRESS      ERROR CODE
*
*                        THE ERROR CODE FOR IECPCNVT WILL BE 0 FOR
*                        SUCCESSFUL CONVERSION, OR 4 IF VALUE OF TT
*                        EXCEEDS TOTAL EXTENTS ASSIGNED.
*
*INPUT  -THE BASIC INPUTS TO IGC018 ARE DESCRIBED ABOVE UNDER    A25998
*        'ENTRY POINTS'. IN ADDITION, THE SVC SUPERVISOR WILL    A25998
*        PROVIDE THE FOLLOWING INPUTS--                          A25998
*                                                                A25998
*           REGISTER                CONTENTS                     A25998
*              3     COMMUNICATIONS VECTOR TABLE (CVT) ADDRESS   A25998
*              4     TASK CONTROL BLOCK (TCB) ADDRESS OF THE     A25998
*                      TASK THAT CALLED THIS SVC ROUTINE         A25998
*              5     SUPERVISOR REQUEST BLOCK (SVRB) ADDRESS     A25998
*                      FOR THIS SVC ROUTINE                      A25998
*                                                                A25998
*
*       -INPUT TO IECPBLDL IS AS DESCRIBED ABOVE UNDER ENTRY POINTS.
*        THE BLDL LIST HAS THE SAME FORMAT AS WHEN EXECUTING THE MACRO
*        WITH THE FOLLOWING ADDITION-- IF THE NUMBER OF FIELDS, FF, IS
*        ZERO, IT REALLY MEANS ONE FIELD BUT THAT BLDL'S SEARCH IS TO
*        START AT BLOCK IDENTIFIED BY TTR0 IMMEDIATELY FOLLOWING NAME
*        IN LIST.
*
*       -INPUTS TO IECPRLTV AND IECPCNVT ARE DESCRIBED ABOVE UNDER
*        ENTRY POINTS.
*                                                                A25998
*OUTPUT -OUTPUTS FROM IGC018 ARE DESCRIBED UNDER THE 'FIND'      A25998
*        AND 'BLDL' MACROS IN THE PUBLICATION 'SUPERVISOR AND    A25998
*        DATA MANAGEMENT MACRO INSTRUCTIONS'.                    A25998
*
*       -OUTPUT FROM IECPBLDL IS THE SAME AS FOR IGC018 ENTERED VIA
*        BLDL MACRO, WITH THE ADDITION THAT THE LAST DIRECTORY OR
*        CATALOG BLOCK READ BY BLDL, ITS CCHHR, AND THE IOB AND CHANNEL
*        PROGRAM USED TO READ IT APPEAR IN THE 400 BYTE WORKAREA
*        DESCRIBED LATER IN THIS LISTING BY THE DSECT LABELED WORKAREA.
*
*       -OUTPUTS FROM IECPRLTV AND IECPCNVT ARE AS DESCRIBED ABOVE
*        UNDER ENTRY POINTS.
*
*EXTERNAL ROUTINES -GETMAIN       -USED TO GET WORKAREA.
*                   FREEMAIN      -USED TO FREE WORKAREA.
*                   EXCP          -USED TO START CHANNEL PROGRAM FOR
*                                  DIRECTORY SEARCH.
*                   WAIT          -USED TO WAIT FOR CHANNEL PROGRAM TO
*                                  COMPLETE.
*EXITS  -EXITING CONDITIONS ARE DESCRIBED UNDER 'FIND' AND 'BLDL'
*        MACROS IN CONTROL PROGRAM SERVICES MANUAL.
*
*TABLES AND WORKAREAS ARE DESCRIBED BY DSECTS LATER IN LISTING.
*
*ATTRIBUTES-   REENTRANT, PRIVILEGED, ENABLED
*
*
*
*
*WORK AREA DEFINITION
WORKAREA DSECT
FIRST    DS    0D
RDAREA   DS    64F                      256 BYTE READIN AREA
NEWCNT   DS    2F
CCW      DS    0D
CCW1     DS    D
CCW2     DS    D
CCW3     DS    D
CCW4     DS    D
CCW5     DS    D
CCW6     DS    D
ECB      DS    F
IOB      DS    8F
MBB      DS    C'MBB'
CCHHR    DS    C'CCHHR'
ERCODE   DS    F
FNDLST1  DS    F
FNDLST2  DS    CL8
FNDLST3  DS    F
REPSW    DS    X                   'AVT REPLACED' INDICATOR      M4214
SAVEAVT  DS    3X                  SAVE AREA FOR USER'S AVT PT   A27543
LAST     DS    0D
*
*EQUATE STATEMENTS
******
ONE      EQU   1                                                 A27543
EXIT     EQU   3
C0       EQU   0                        GENERAL CONSTANT 0
C1       EQU   1                        GENERAL CONST 1
C2       EQU   2                        GENERAL CONST 2
C3       EQU   3                        GENERAL CONST 3
C4       EQU   4                        GENERAL CONST 4
C8       EQU   8                        GENERAL CONST 8
KEY2321  EQU   16                       KEYCONST FOR 2321
CVTZDTAB EQU   64                       DEVICE TABLE ADDR IN CVT
REPAVT   EQU   X'01' INDICATES USER'S AVT REPLACED BY IOS' AVT   M4214
POMASK   EQU   X'02' MASK INDICATING PARTITIONED ORGANIZATION    A28189
OUTMASK  EQU   X'0F' MASK INDICATING NOT INPUT PROCESSING        A28189
CVTPT    EQU   X'10' ABSOLUTE ADDRESS OF CVT POINTER             A27543
*CONTROL BLOCK EQUATES
TCBJLB   EQU   40
UCBTYP   EQU   16    DEVICE TYPE DISPLACEMENT IN UCB
DVTHH    EQU   2
******
*        REGISTERS--
RGADDR   EQU   0
RGDCB    EQU   1
RGA      EQU   2
RGB      EQU   3
RGC      EQU   4
RGD      EQU   5
RGE      EQU   6
RGF      EQU   7
RGG      EQU   8
RGH      EQU   9
RGI      EQU   10
RGJ      EQU   11
RGK      EQU   12
RGAREA   EQU   13
RGRET    EQU   14
RGBASE   EQU   15
*
*CONVERT ROUTINES REGISTERS--
RGTTR    EQU   0
RGDEB    EQU   1
RGMBB    EQU   2
RGV      EQU   9
RGW      EQU   10
RGX      EQU   11
RGY      EQU   12
RGZ      EQU   13
*
*THE FOLLOWING EQUATES ARE FOR REGISTERS WITH WELL DEFINED ABSOLUTE
*USAGE, AND FOR TEMPORARY WORK REGISTERS--
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         AIF   ('&RESBLDL' NE 'YES').NONRES
***********************************RES TABLE CODE**********************
RA       EQU   2
RB       EQU   3
RC       EQU   4
RD       EQU   8                   RD = RGG
RE       EQU   6
RF       EQU   5
RG       EQU   7                   RG = RGF
RH       EQU   9
UB       EQU   12                  UB = RGK
LB       EQU   11
ADDR     EQU   10
N        EQU   3                   N=RB
MLU      EQU   1                   USER MOVE LENGTH
.NONRES  ANOP
***********************************************************************
*
*CVT DEFINITION--                                                A27543
IHACVT   DSECT                                                   A27543
         DS    5F                                                A27543
CVTXAPG  DS    F                  ADDR OF IOS APPENDAGE TABLE    A27543
CVT0VL00 DS    F                  ADDR OF VALIDITY-CHECKING RTN  A27543
         DS    48F                                               A27543
*                                                                A27543
*************************                                        A27543
*                                                                A27543
*DCB DEFINITION--
IHADCB   DSECT
         DS    26X                                                13547
DCBDSORG DS    H                                                  13547
         DS    16X                                                13547
DCBDEBAD DS    F
         DS    36X
DCBPOINT DS    F
*
*************************                                        A27543
*                                                                A27543
*DEB DEFINITION--
IHADEB   DSECT
         DS    F
DEBAMLNG DS    X                  LENGTH OF DEB A/M SECTION      A28189
         DS    3X                                                  5798
DEBOFLGS DS    X                  OPEN FLAGS                       5798
         DS    3X                                                A28189
DEBOPATB DS    X                  METHOD OF I/O PROCESSING       A28189
         DS    3X                                                A28189
DEBNMEXT DS    X
         DS    12X                                               A27543
DEBAPPAD DS    3X                 APPENDAGE VECTOR TABLE ADDRESS A27543
DEBDVMOD DS    F
DEBBINUM DS    H
DEBSTRCC DS    H
DEBSTRHH DS    H
DEBENDCC DS    H
DEBENDHH DS    H
DEBNMTRK DS    H
*                                                                A27543
*************************                                        M4214
*                                                                M4214
*REQUEST BLOCK DEFINITION--                                      M4214
IHARB    DSECT                                                   M4214
         DS    4F                                                M4214
RBOPSW   DS    2F                  USER'S OLD PSW                M4214
         DS    F                                                 M4214
RBLINK   DS    F                   ADDR OF NEXT RB OR THE TCB    M4214
         DS    28F                                               M4214
*                                                                M4214
**************************************************************** A27543
*                                                                A27543
IGC018   CSECT
*03051018,46400,119400                                             5798
         ENTRY SVC018
SVC018   EQU *
         BALR  RGK,0
         USING BASE1,RGK
BASE1    SSM   G+1                      ENABLE INTERRUPTS
         LR    RGA,RGADDR          SAVE LIST ADDRESS             A25998
         LTR   RGB,RGDCB           SAVE DCB ADDR, TST FOR 'FIND' A25998
         BM    GETCORE               BR IF 'FIND' TO GET WK AREA A25998
*                                                                A25998
***      TEST THE VALIDITY OF A USER-GENERATED 'BLDL' LIST       A25998
*                                                                A25998
         LA    R15,4               LOAD 'BADLIST' ERROR CODE     A25998
         SR    R7,R7               INITLZ FOR ENTRIES TEST       A25998
         CH    R7,0(RGA)           TEST FOR ZERO OR NEG ENTRIES, A25998
         BNL   A3                    BR IF YES TO RETURN- ERROR  A25998
         LH    R7,TWELVE           INITLZ FOR LENGTH TEST        M3385
         CH    R7,2(RGA)           TEST FOR LESS THAN MIN LNG,   A25998
         BH    A3                       BR IF YES TO RETURN-ERROR M5729
         USING IHARB,R5                 ESTABLISH RB REGISTER     M5729
         L     R7,RBLINK                GET LOC OF CALLER RB      M5729
         DROP  R5                                                 M5729
         USING IHARB,R7                 ESTABLISH RB REGISTER     M5729
         TM    RBOPSW+1,X'F0'           BR IF CALLER IS IN      SA63933
         BZ    GETCORE                   SUPERVISOR STATE         M5729
*
*
         LH   R9,0(RGA)                 LOAD NO. OF ENTRIES      P3845
         LH    R10,2(RGA)              LOAD ENTRY SIZE           P3845
         MR    R8,R10                  FIND SIZE OF USER LIST    P3845
         LTR   R8,R8                   TEST IF USER LIST TOO BIG P3845
         BNZ   A3                      BR IF YES-ERROR          P3845
         LA    R10,2(RGA,R9)           FIND HIGH LOC OF LIST     P3845
         LA    R9,2(RGA)               SAVE LOC OF 1ST LIST ENT  P3845
         SRL   R9,11(0)                GET SUB-POOL BOUNDARY     P3845
         SLL   R9,11(0)                OF LIST                   P3845
         IC    R8,RBOPSW+1             GET USER KEY              P3845
         DROP  R7                                                P3845
         SRL   R8,4(0)                 ZERO AMWP AREA            P3845
         SLL   R8,4(0)                 RESTORE   *               P3845
         SR    R7,R7                   INIT REGISTER             P3845
LOOP1    ISK   R7,R9                   LOAD STORAGE KEY AND      P3845
         CR    R7,R8                    TEST IF LIST STILL       P3845
*                                       WITHIN SAME KEY          P3845
         BNE   A3                      TAKE ERROR EXIT IF NO     P3845
         LA    R9,2048(0,R9)           POINT TO NEXT POOL BNDRY  P3845
         CR    R9,R10                  TEST AND BR IF NOT BEYOND P3845
         BNH   LOOP1                    USER LIST AREA           P3845
GETCORE  EQU   *                                                 A25998
         LA    R0,LAST-FIRST            SP=0, NO.OF BYTES
         GETMAIN R,LV=(0)
         LR    RGAREA,R1
         USING WORKAREA,RGAREA
         XC    REPSW(4),REPSW      SET AVT SW AND SAVE AREA TO 0 M4214
         LTR   RGDCB,RGB
         BC    10,A2                    Q. BLDL
         LCR   RGDCB,RGDCB
         MVC   FNDLST1,DC1              INIT BLDL LIST FOR FIND
         MVC   FNDLST2,0(RGA)           MOVE NAME
         LA    RGADDR,FNDLST1
         BAL   RGRET,SYSTEST       BRANCH TO EXECUTE 'BLDL'      M4214
         DROP  RGK
         USING BASE2,RGRET
BASE2    LTR   R15,R15
         BP    A1                       Q. ERROR ON BLDL
         LR    R1,RGJ
         USING IHADCB,RGJ
         MVC   IHADCB(4),FNDLST3        MOVE TO RELAD
         LR    R0,R1                    POINT TO RELAD
         L     R15,DCBPOINT             USE POINT ROUTINE
         BAL   R14,4(R15)
         SR    R15,R15                  SET NO ERROR
         USING RESTORE,RGRET       ESTABLISH NEW BASE ADDRESS    M4214
A1       EQU   *                                                 M4214
         LR    RGA,R15             SAVE ERROR CODE               M4214
         BALR  RGRET,0             RE-INITIALIZE BASE REGISTER   M4214
RESTORE  EQU   *                                                 M4214
         TM    REPSW,REPAVT        TEST FOR 'REPLACED AVT',      M4214
         BZ    FREECORE              BYPASS AVT RESTORE IF NOT   M4214
*                                                                M3385
***      RESTORE USER'S APPENDAGE VECTOR TABLE POINTER TO DEB    M3385
***      PRIOR TO EXITING                                        M3385
*                                                                M3385
         L     R9,DCBDEBAD              GET DEB ADDRESS AND      M3385
         USING IHADEB,R9                  USE IT AS BASE         M3385
         MVC   DEBAPPAD(3),SAVEAVT      RESTORE USER'S AVT PT    M3385
         DROP  R9                       DROP 'R9' AS DEB BASE    M3385
*                                                                M3385
FREECORE EQU   *
         LA    R0,LAST-FIRST            FREEMAIN BYTES
         FREEMAIN R,LV=(0),A=(RGAREA)
         LR    R15,RGA                  RESTORE ERROR CODE
A3       EQU   *
         SVC   EXIT
*
         DROP  RGRET
         USING BASE1,RGK
A2       LA    RGRET,A1                 RETURN TO A1
         LR    RGADDR,RGA               RESTORE LIST ADDRESS
         BZ    IECPBLDL            BYPASS AVT SWAP IF 'BLDL' FOR M4214
*                                    JOBLIB OR LINKLIB           M4214
SYSTEST  EQU   *                                                 M4214
         LA    R1,0(R1)              CLEAR HIGH BYTE           SA62451
         C     R1,FINDSVC            SVC LIB REQUEST?          SA62451
         BE    IECPBLDL              BYPASS AVT SWAP IF SO     SA62451
*                                                                M4214
SWAPAVT  EQU   *                                                 M3385
*                                                                M3385
***      USE IOS' INSTEAD OF USER'S APPENDAGE VECTOR TABLE (AVT) M3385
*                                                                M3385
         DROP  RGJ                      DROP 'RGJ' AS DCB BASE,  M3385
         USING IHADCB,RGDCB               USE 'RGDCB' INSTEAD    M3385
         OI    REPSW,REPAVT        IND AVT HAS BEEN REPLACED     M4214
         L     R2,DCBDEBAD              GET DEB ADDRESS AND      M3385
         USING IHADEB,R2                  USE IT AS A BASE       M3385
         MVC   SAVEAVT(3),DEBAPPAD      SAVE USER'S AVT POINTER  M3385
         L     R3,CVTPT                 GET CVT ADDRESS AND      M3385
         USING IHACVT,R3                  USE IT AS A BASE       M3385
         MVC   DEBAPPAD(3),CVTXAPG+ONE  MOVE IOS AVT PT INTO DEB M3385
         DROP  R2                       DROP 'R2' AS DEB BASE    M3385
         DROP  R3                       DROP 'R3' AS CVT BASE    M3385
         DROP  RGDCB                    DROP 'RGDCB' AS DCB BASE M3385
*
         ENTRY IECPBLDL       THIS ENTRY POINT FOR BLDL TO BYPASS SVC
IECPBLDL BALR  RGBASE,0
         USING BASE3,RGBASE
BASE3    SR    RGA,RGA
         LA    RGDCB,0(,RGDCB)          CLEAR TOP BYTE OF DCB    SM0029
         LA    RGAREA,0(,RGAREA)        CLEAR HI-ORDER BYTE
         ST    RGA,ERCODE               ERCODE, C.N., Z TO ZERO
         LM    RGJ,RGK,FINDLINK        LOAD LINKLIB,SVCLIB DCB LOC
         CR    RGJ,RGDCB          TEST FOR LINKLIB REQUEST
         BE    INLINK             IF LINKLIB,INDICATE SO
         AIF   ('&RESBLDL' NE 'YES').NOBLDL0
         CR    RGK,RGDCB               TEST FOR SVC LIB REQUEST
         BNE   NOLNKSVC                Q. NOT SVC LIB
         LR    RGJ,RGK                 SAVE SVC LIB DCB LOCATION
         B     INLINK                  GO SET LIB CODE
.NOBLDL0 ANOP
NOLNKSVC LTR   RGJ,RGDCB               RGJ HAS DCB ADDRESS
         BP    BBBB1                    Q. NOT LINKLIB OPTION
         MVI   ERCODE+3,X'22'          Z=2 INDICATES JOBLIB      SM0011
         L     R2,FINDTCBP              ADDR OF TCB POINTER
         L     R2,4(R2)                 TCB ADDR
         L     RGJ,TCBJLB(R2)           JOBLIB DCB ADDR
         LTR   RGJ,RGJ
         BP    BBBB1                    Q. JOBLIB ASSIGNED TO THIS TASK
         L     RGJ,FINDLINK        LINKLIB DCB ADDR
INLINK   MVI   ERCODE+3,1         Z=1 INDICATE LINKLIB
BBBB1    LR    RGK,RGADDR               RGK POINTS TO FFLL
         STM   6,11,RDAREA              TEMP SAVE
*                                                                A27543
***      CONSTRUCT CHANNEL PROGRAM, ECB, AND IOB FOR READING     A27543
***      DIRECTORY BLOCKS                                        A27543
*                                                                A27543
         LM    R0,R11,CHANPROG          MOVE AND RELOCATE CHAN PROG
         ALR   R0,RGAREA
         ALR   R2,RGAREA
         AR    R4,RGAREA
         AR    R8,RGAREA
         AR    R10,RGAREA
         STM   R0,R11,CCW
         SR    R0,R0                       ZERO ECB
         LA    R2,ECB                   MOVE AND RELOCATE IOB
         LA    R5,CCW
         SR    R8,R8                    ZERO BLK INCR FIELD
         STM   R0,R8,ECB                ECB AND IOB TO WORKAREA
         MVI   IOB,X'02'                SET NON-RELATED FLAG
         LM    6,11,RDAREA              RESTORE REGS
         LA    RGF,4(RGK)               SET TO FIRST ENTRY
         AH    0,0(RGK)                 PICKUP NO. OF FIELDS
         BZ    H                        Q. TTR START SUPPLIED
         LR    RGA,RGK                  INIT USERS LIST
BBB1     MVI   14(RGA),0                ZERO R FIELD
         AH    RGA,2(RGK)               GO TO NEXT FIELD IN LIST
         BCT   0,BBB1                   Q. ANOTHER FIELD
         LH    RGG,0(RGK)          GET NO. OF ENTRIES
         AIF   ('&RESBLDL' NE 'YES').NOBLDL1   IF NOT RESIDENT SKIP
***********************************RES TABLE CODE**********************
* 2 RA - POINTER TO RESIDENT TABLE
* 3 RB - NUMBER OF RESIDENT TABLE ENTRIES REMAINING
* 4 RC - LENGTH OF RESIDENT TABLE ENTRY
* 8 RD=RGG - NUMBER OF USER ENTRIES
* 6 RE - LENGTH OF USER ENTRY
* 5 RF - POINTER TO CURRENT RESIDENT TABLE ENTRY
* 7 RG=RGF - POINTER TO CURRENT USER ENTRY
* 9 RH - BRANCH ADDRESS
*12 UB=RGK - TEMP PTR TO USER BLDL LIST & UPPER BOUNDARY IN SEARCH
*11 LB - LOWER BOUNDARY FOR BINARY SEARCH
*10 ADDR - ADDRESS OF RESIDENT TABLE ENTRY DURING SEARCH
* 3 N -  NUMBER OF CURRENT ENTRY IN RES TABLE DURING BINARY SEARCH
* 1 MLU - MOVE LENGTH TO BE USED IN EXECUTING REMOTE MOVE INSTRUCTION
***********************************************************************
BB1      CLI   ERCODE+3,1          Q. IS THIS LINKLIB
         BNE   RBL                 NO - FORGET IT
         L     RA,IEARESBL             LOAD LOC OF LINKLIB RES TABLE
         C     RGJ,FINDLINK            TEST IF LINKLIB USED
         BE    TESTRES                 Q. LINKLIB USED
         MVI   ERCODE+3,X'00'          RESET TO INDICATE NOT LINKLIB
         L     RA,IEARESBS             LOAD LOC OF SVC RES TABLE
TESTRES  LTR   RA,RA                   IF RES TBL RA NE ZERO
         BZ    RBL                 NO RES TABLE IN NUCLEUS
         STM   RGF,RGK,RDAREA      SAVE  REGISTERS
CKTABLE  LH    RB,0(RA)            LOAD RES TABLE FF
         LH    RC,2(RA)            LOAD RES TABLE LL
         LH    RE,2(UB)            LOAD USER LIST LL
         CLR   RE,RC                   Q. IS USER LL GT RES TABLE
         BNH   USEROK              USER LL OK SO FAR
         LR    MLU,RC
         B     SUB9                GO TO SUBTRACT 9 FROM RES TABLE LL
USEROK   CLI   3(UB),12            Q. IS USER LL GREATER THAN 12
         BNL   USEROK2             USE USER LL
         LA    MLU,3               MOVE LENGTH = 3
         B     AHEAD               GO ON
USEROK2  LR    MLU,RE
SUB9     SH    MLU,NINE            MOVE LENGTH = LL - 9
AHEAD    LA    RF,4(RA)            PTR TO FIRST RES TABLE ENTRY
         LA    RH,BINSCH           LOAD RETURN ADDRESS
         B     NXTEMPTY            GO TO FIND FIRST EMPTY ENTRY
BINSCH   LR    UB,RB               UB=RB
         BCTR  UB,0                UB=FF-1
         SR    LB,LB               LB=0
BISTART  LA    N,0(LB,UB)          N=LB+UB
         SRL   N,1                 N=(LB+UB)/2
         LR    ADDR,N              ADDR = N
         MH    ADDR,2(RA)          ADDR = N * RES TABLE LL
         AR    ADDR,RF             ADDR IS NOW POINTING TO ENTRY N
         CLC   0(8,RG),0(ADDR)     COMPARE ARG WITH TABLE
         BH    BHI
         BE    BFOUND
         LR    UB,N                     UB=N
         CR    LB,N                     DOES LB=N
         BCT   UB,BTEST
         B     BTEST
BHI      LA    LB,1(N)                  LB=N+1
         CR    N,UB                DOES N = UB
BTEST    BL    BISTART             CONTINUE SEARCH
         LCR   RB,RB               COMPLEMENT FOR ADDITION
         AH    RB,0(RA)            RB = NO. REMAINING RES TABLE ENTRIES
         MVI   ERCODE+1,4          ERROR CODE 4 - NOT FOUND
COMP     CLC   0(8,RG),0(ADDR)     COMPARE NAMES
         BE    FOUND
         BH    NEXTRES
         MVI   ERCODE+1,4          ERROR CODE 4 - NOT FOUND
         LA    RH,COMP
         B     NEXTUSER            GO TO NEXT USER ENTRY
NXTEMPTY CLI   10(RG),0            Q. IS THIS ENTRY EMPTY
         BCR   8,RH                YES - RETURN WHENCE YOU CAME
NEXTUSER AR    RG,RE               NOT FOUND-GO TO NEXT USER ENTRY
         BCT   RD,NXTEMPTY         DECREMENT AND CHECK TO SEE IF EMPTY
         B     I                   RETURN FOR NORMAL LINKLIB SEARCH
NEXTRES  AR    ADDR,RC             GO TO NEXT RES TABLE ENTRY
         BCT   RB,COMP
         MVI   ERCODE+1,4          ERROR CODE 4 - NOT FOUND
         B     I
BFOUND   LCR   RB,RB               COMPLEMENT FOR ADDITION
         AH    RB,0(RA)            RB = NO. REMAINING RES TABLE ENTRIES
FOUND    CLI   10(ADDR),0          Q. IS R OF RES TABLE TTR = 0
         BE    NOFILL              YES - DON'T PERFORM MOVE
         EX    MLU,RESMOVE         MOVE ENTRY
         B     NEXT
NOFILL   MVI   ERCODE+1,4          ERROR CODE 4 - NOT FOUND
NEXT     LA    RH,NEXTRES          SET BRANCH ADDR
         B     NEXTUSER
I        CLI   ERCODE+1,0          Q. ALL LINKLIB NAMES FOUND
         LM    RGF,RGK,RDAREA      RESTORE REGISTERS
         BE    OUT                 GO TO LOAD SUCCESSFUL COMP CODE
         MVI   ERCODE+1,0          ERROR CODE ZERO FOR D/A SEARCH
         LA    RH,RBL              LOAD RETURN BRANCH ADDRESS
         B     NXTEMPTY            FIND FIRST EMPTY ENTRY
OUT      EQU   *                                                 M3385
         SR    R15,R15             SET RETURN CODE TO ZERO       M3385
         BR    RGRET               RETURN                        M3385
***********************************************************************
RBL      SR    0,0                 SET TTR START TO 000
         AGO   .NOBLDL2           BRANCH AROUND NEXT SECTION
.NOBLDL1 ANOP                     USED FOR ENTRANCE LABEL ONLY
BB1      SR    0,0                SET TTR START TO 000
.NOBLDL2 ANOP        USED FOR ENTRY LABEL ONLY
BB1A     IC    0,ERCODE+2    INSERT C.N.
         USING IHADCB,RGJ        GET ADDRESSABILITY FOR DCB
BB2      L     1,DCBDEBAD
         LA    2,MBB          FOR RESULT MBBCCHHR
        LR     3,RGAREA
         STM   11,15,RDAREA             SAVE VOLATILE REGISTERS
         LA    15,IECPCNVT              USE TTR CONVERT ROUTINE
         BALR  14,15
         LTR   R15,R15                  WAS USER TTR VALID
         LM    11,15,RDAREA-FIRST(3)    RESTORE VOLATILE REGISTERS
         BNZ   BADIO                    BRANCH IF INVALID TTR
         LR    RGH,RGF                  POINT TO FIRST EMPTY ENTRY
         LR    RGI,RGG                  NO. OF ENTRIES REMAINING
         ST    RGJ,IOB+20              DCB ADDR INTO IOB
         A     RGH,SKEH                 SEARCH CCW OP
B1       ST    RGH,CCW4                 INIT SEARCH
         LR    2,15                     SAVE BASE
         EXCP  IOB
         DROP  RGBASE
         USING BASE3,2
         SSM   G+1                 ENABLE ALL INTERRUPTS           9688
         L     15,PDVCON
         TM    1(15),X'F0'              TEST PSEUDO-DISABLE BYTE
         BO    WAITLOOP                Q. P-D MODE, BYPASS WAIT
         WAIT  1,ECB=ECB
WAITLOOP TM    ECB,X'60'                CHECK COMPLETE AND ERROR BITS
         BZ    WAITLOOP                 Q. NOT YET COMPLETE
         BO    GOODIO                   CONTINUE IF NO ERRORS
BADIO    LA    R15,8                    GET I/O ERROR CODE
         BR    RGRET                    RETURN                   M3385
GOODIO   EQU   *
         LR    R15,R2                   RESTORE BASE
         DROP  R2
         USING BASE3,RGBASE
*SCAN DIRECTORY BLOCK
         LR    R3,RGAREA
         BCTR  R3,0
         AH    R3,RDAREA                   SET END ADDR-1
         LA    R1,RDAREA+2                 SET START ADDR
         LA    R0,31                    SET MASK FOR C BYTE
C        CLC   0(8,R1),0(RGH)           COMPARE NAMES
         BE    D                           Q. FOUND
         BH    G              Q. NOT IN THIS DIRECTORY SECTION
         IC    R2,11(R1)                   GET USERS FIELD LENGTH
         NR    R2,R0                    MASK 3 H.O. BITS
         LA    R2,12(R2,R2)             ENTIRE ENTRY LENGTH IN 2
         BXLE  R1,R2,C                     Q. MORE ENTRIES IN BLOCK
         MVC   CCHHR,NEWCNT             SET NEW START
         B     B1
*
D        MVC   8(3,RGH),8(1)            MOVE TTR
         IC    4,11(1)                  GET C FROM DIRECTORY
         NR    R4,R0                    MASK 3 H.O. BITS
         LH    R5,2(RGK)                GET USERS LL
         SH    R5,C14
         BM    E1                       Q. LL LESS THAN 14
         BXLE  R4,R4,E
         LR    R4,R5                    USE REG 4
E        EX    R4,MOVE                  MOVE INTO USERS LIST
         SR    R4,R4                    CLEAR REGISTER          SA60740
         IC    R4,ERCODE+3              PREPARE TO SET 'Z'      SA60740
         TM    ERCODE+3,X'02'           TEST FOR JOBLIB         SA60740
         BNO   E2                       BRANCH IF NOT           SA60740
         SRL   R4,4                     CLEAR LOWER HALF BYTE   SA60740
E2       EQU   *                                                SA60740
         STC   R4,12(RGH)               SET 'Z'                 SA60740
E1       IC    R4,ERCODE+2              GET C.N.
         STC   R4,11(RGH)               C.N. INTO USERS LIST
F        BCT   RGI,F2                   Q. ANOTHER LIST ENTRY
F1       LR    RGI,R15                  SAVE BASE
         DROP  RGBASE
         USING BASE3,RGI
         LH    R15,ERCODE
         LTR   R15,R15                  TEST FOR ERROR,          A27543
         BCR   8,RGRET                    BR IF NOT TO RETURN    M3385
*                                                                A28189
***      DETERMINE WHETHER OR NOT THERE ARE CONCATENATED DATA    A28189
***      SETS IN WHICH TO SEARCH FOR A MEMBER. THIS CAN BE       A28189
***      DONE ONLY IF THE DATA SET IS PARTITIONED AND HAS BEEN   A28189
***      OPENED FOR INPUT.                                       A28189
*                                                                A28189
         L     RGA,DCBDEBAD
         USING IHADEB,RGA
         CLC   DEBAMLNG,ERCODE+2   TEST FOR MORE DATA SETS,      A28189
         BH    CNCK                  BR IF YES FOR VALIDITY CHK  A28189
         TM    ERCODE+3,2          TEST FOR JOBLIB DCB,         SA60740
         BCR   14,RGRET                 BR IF NOT TO RETURN     SA72718
         AIF   ('&MVT' NE 'YES').NOMVT6
         L     R15,FINDTCBP             GET THE CURRENT TCB     SA60740
         L     R15,4(R15)               GET THE CURRENT TCB     SA60740
         SR    R2,R2                    CLEAR REGISTER          SA60740
         IC    R2,ERCODE+3              GET 'Z'                 SA60740
         SRL   R2,4                     STRIP LIB INDICATOR     SA60740
         BCTR  R2,0                     SET LOOP CONTROL        SA60740
         MVI   ERCODE+3,X'22'           RESET 'Z'               SA60740
TAGZ1    EQU   *                                                SA60740
         L     R15,132(R15)             GET MOTHER TCB ADDR     SA60740
         L     R9,TCBJLB(R15)           GET THE JOBLIB          SA60740
         LTR   R9,R9                    IS IT ZERO              SA60740
         BNZ   TAGZ2                    GO SET Z IF NOT         SA60740
         B     TAGH                     YES, GO SET LINK LIB    SA72718
TAGZ2    EQU   *                                                SA60740
         IC    R4,ERCODE+3              UPDATE 'Z'              SA60740
         LA    R4,16(R4)                UPDATE 'Z'              SA60740
         STC   R4,ERCODE+3              UPDATE 'Z'              SA60740
         CR    R9,R11                   JOBLIB,OLD DCB SAME?    SA60740
         BE    TAGZ1                    GET MOTHER TCB IF SO    SA60740
         LR    R11,R9                   USE NEW JOBLIB DCB      SA60740
         BCT   R2,TAGZ1                 GO SERCH NEW TCB        SA60740
         B     FF2                      GO SETC. N.             SA60740
.NOMVT6  ANOP
TAGH     MVI   ERCODE+3,1               'Z'=1 INDICATES LINKLIB  TS2466
         L     RGJ,FINDLINK             LINKLIB DCB ADDR
FF2      LA    R4,255                   FORCE C.N. TO ZERO        M4612
*                                                                A28189
FF1      LA    R4,1(R4)                 INCREMENT C.N.
         STC   R4,ERCODE+2
         MVI   ERCODE+1,0               ZERO ERROR CODE
         LR    R15,RGI
         B     BB1
*
CNCK     EQU   *                                                  13547
         TM    ERCODE+3,X'03'     CHECK FOR LINKLIB OR JOBLIB     13547
         BM    FF1                BRANCH IF EITHER                13547
         TM    DCBDSORG,POMASK    TEST FOR PARTITIONED DATA SET, A28189
         BCR   14,RGRET             BR IF NOT TO RETURN          M3385
         TM    DEBOPATB,OUTMASK   TEST FOR INPUT,                A28189
         BCR   5,RGRET              BR IF NOT TO RETURN          M3385
         DROP  RGA .                                              22232
         B     FF1                                                13547
*
         DROP  RGI
         USING BASE3,RGBASE
F2       AH    RGH,2(RGK)               GO TO NEXT ENTRY
         CLI   10(RGH),0                FIND NEXT ZERO R
         BE    C                        Q. EMPTY ENTRY
         B     F      GO SEE IF ANOTHER EMPTY ENTRY
*
G        CLI   0(R1),X'FF'              CHECK FOR CONTINUATION POINTER
         BL    G1                       Q. NOT HIGH NAME
         CLC   1(7,R1),0(R1)            MAKE SURE
         BL    G1                       Q. REALLY NOT HIGH NAME
GG1      MVC   FNDLST3,8(R1)            GET TTR0 ON WORD BOUNDARY
         L     R0,FNDLST3
         SH    R0,H256                  DECREMENT R BY 1
         BC    10,BB1A                  Q. CONTINUATION POINTER
G1       CLI   ERCODE+1,4
         BE    E1                      Q. PREVIOUS ERROR
         LA    RGF,0(RGH)  POINT TO FIRST EMPTY ENTRY, ZERO H.O. BYTE
         LR    RGG,RGI                  NO. OF ENTRIES REMAINING
         MVI   ERCODE+1,4               SET ERROR CODE 4
         B     E1
*
H        LA    RGG,R1                   SET FOR ONE ENTRY
         LR    R1,RGF                   MAKE MOVE AT GG1 WORK
         LR    RGH,RGF                  POINT TO ENTRY
         LR    RGI,RGG
         B     GG1
*
*        CONSTANTS
MOVE     MVC   13(1,RGH),11(R1)         BLDL MOVE
DC1      DC    H'1'
TWELVE   DC    H'12'               MUST IMMEDIATELY FOLLOW DC1   A25998
C14      DC    H'14'
PDVCON   DC    V(IEA0IO02)
FINDTCBP DC    V(IEATCBP)
FINDLINK DC    V(IEFLINK)
FINDSVC  DC    V(IEASVDCB)
*
*CHANNEL PROGRAM---
*
CHANPROG DS    0F
*CCW1
         DC    X'31'                       SEARCH ID EQUAL
         DC    AL3(0+CCHHR-FIRST)
         DC    X'4000'                     COMMAND CHAIN
         DC    H'5'                        COUNT
*CCW2
         DC    X'08'                       TIC
         DC    AL3(0+CCW1-FIRST)
         DC    F'0'
*CCW3
         DC    X'92'                    RD COUNT, M/T
         DC    AL3(NEWCNT-FIRST)
         DC    X'4000'
         DC    H'8'
*CCW4
SKEH     DC    X'69'                    SEARCH EQ HI KEY
         DC    AL3(0)
         DC    X'4000'                     COMMAND CHAIN
         DC    H'8'                        COUNT
*CCW5
         DC    X'08'                       TIC
         DC    AL3(0+CCW3-FIRST)
         DC    F'0'
*CCW6
         DC    X'06'                       READ DATA
         DC    AL3(0+RDAREA-FIRST)
         DC    H'0'
H256     DC    H'256'
         AIF   ('&RESBLDL' NE 'YES').NOBLDL3   IF NOT RESIDENT SKIP
RESMOVE  MVC   8(1,RG),8(ADDR)
NINE     DC    H'9'
         ENTRY IEARESBL                EXTERNAL SYMBOL FOR NIP
         ENTRY IEARESBS                EXTERNAL SYMBOL FOR NIP
IEARESBL DC    F'0'                    LOC OF RES BLDL LINKLIB TABLE
IEARESBS DC    F'0'                    LOC OF RES BLDL SVC-LIB-TABLE
*
.NOBLDL3 ANOP                     USED FOR ENTRANCE LABEL ONLY
*
*
***********************************************************************
*
*IECPRLTV-- MBBCCHHR TO TTR0 CONVERT ROUTINE
*REGISTER CONVENTION--
*        0     CONTAINS RESULT TTR0
*        1     ADDRESS OF DEB
*        2     ADDRESS OF MBBCCHHR INPUT
*        3-8   TRANSPARENT
*        9-13  VOLATILE
*        14    RETURN ADDRESS
*        15    ENTRY ADDRESS-- USED FOR BASE
*
         ENTRY IECPRLTV
         USING IECPRLTV,R15
IECPRLTV SR    RGTTR,RGTTR
         LR    RGZ,RGDEB
         USING IHADEB,RGZ
         SR    RGY,RGY
         SR    RGW,RGW                  CLEAR REG
         IC    RGY,0(RGMBB)             PICKUP M
         TM    DEBOFLGS,1         CHECK FOR PDS CONCATENATION      5798
         BZ    RLTVZ              BR. IF NOT                       5798
         SR    RGV,RGV            ZERO OUT REGISTER # 9            5798
         IC    RGV,DEBNMEXT       GET NUMBER OF EXTENTS            5798
         SLL   RGV,4              MULTIPLY BY 16                   5798
         AR    RGV,RGDEB          ADD DEB ADDR.                    5798
         IC    RGW,DEBAMLNG       GET LENGTH OF DEB A/M SECTION  A28189
         DROP  RGZ                                                 5798
         USING IHADEB,RGV                                          5798
         SR    RGX,RGX            CLEAR REGISTER # 11              5798
RLTVX    IC    RGX,DEBDVMOD-1(RGW)  GET M FOR DATA SET N           5798
         CR    RGY,RGX            COMPARE WITH USERS M             5798
         BNL   RLTVY              BR. IF CORRECT DATA SET          5798
         BCT   RGW,RLTVX          BR. IF ANOTHER D.S. TO CHECK     5798
         SR    RGX,RGX            M OF FIRST DATA SET IS ZERO      5798
RLTVY    SR    RGY,RGX            ADJUST USERS M                   5798
         SLL   RGX,4              MULTIPLY BY 16                   5798
         AR    RGZ,RGX            ADJUST DEB POINTER               5798
         DROP  RGV                                                 5798
         USING IHADEB,RGZ                                          5798
RLTVZ    EQU   *                                                   5798
         LTR   RGY,RGY
         BZ    RLTVB                    Q. IS M ZERO
RLTVA    AH    RGTTR,DEBNMTRK           NO. OF TRKS IN EXT
         LA    RGZ,16(RGZ)              GO TO NEXT EXTENT
         BCT   RGY,RLTVA                Q. ANY MORE EXTENTS
         AIF   (&TYPE(5) EQ 1).CNVT1
RLTVB    BAL   RGW,CNVTDVC              PICKUP DEVICE CONSTANT
         USING DEVTYPE,RGY
         SR    RGW,RGW
         IC    RGW,C3(RGMBB)            GET FIRST CC BYTE
         SLA   RGW,C8                   SHIFT FOR NEXT CC BYTE
         IC    RGW,4(RGMBB)             GET ACTUAL C
         SH    RGW,DEBSTRCC             MINUS START CC
         MH    RGW,DEVTRK               MULTIPLY CYL TIMES TRK/CYL
         IC    RGX,6(RGMBB)             GET ACTUAL H
         AR    RGW,RGX                  PLUS TRKS IN CC
         SH    RGW,DEBSTRHH             MINUS START HH
         AR    RGTTR,RGW                DEVELOP TOTAL TT
         SLL   RGTTR,8
         IC    RGTTR,7(RGMBB)           PICKUP R
         SLL   RGTTR,8
         SR    R15,R15
         BR    R14                      RETURN
        AGO   .CNVT2
.CNVT1  ANOP
RLTVB    SR    RGX,RGX
         SR    RGV,RGV
         BAL   R15,CNVTDVC              DEVICE CONST PTR WILL BE IN RGY
         USING RLTVC,R15
RLTVC    IC    RGW,3(RGMBB,RGV)         ACTUAL C, C, H, OR H
         USING DEVTYPE,RGY
         CLI   DEVKEY,KEY2321           CHECK FOR 2321
         BE    RLTVC1                   BRANCH IF YES
         SLA   RGW,C8                   SHIFT FOR NEXT BYTE
         IC    RGW,C4(RGMBB,RGV)        GET SECOND BYTE
RLTVC1   EQU   *
         AR    RGX,RGW                  PLUS PREV PRODUCT
         IC    RGW,DEBSTRCC(RGV)        START C, C, H, OR H
         CLI   DEVKEY,KEY2321           CHECK FOR 2321
         BE    RLTVC2                   BRANCH IF YES
         SLA   RGW,C8                   SHIFT FOR SECOND BYTE
         IC    RGW,DEBSTRCC+C1(RGV)     GET SECOND BYTE
RLTVC2   EQU   *
         SR    RGX,RGW
         LA    RGV,C1(RGV)              INCREMENT
         CLI   DEVKEY,KEY2321           CHECK FOR 2321
         BE    RLTVC3                   BRANCH IF YES
         LA    RGV,C1(RGV)              INCREMENT
RLTVC3   EQU   *
         CH    RGV,CNVT3
         BE    RLTVD               Q. LAST BYTE
         IC    RGW,C0(RGY,RGV)          GET TRACKS/ CYL
         CLI   DEVKEY,KEY2321           CHECK FOR 2321
         BE    RLTVC4                   BRANCH IF YES
         SLA   RGW,C8                   SHIFT FOR NEXT BYTE
         IC    RGW,C1(RGY,RGV)          GET TRACKS/ CYL
RLTVC4   EQU   *
         DROP  RGY
         LTR   RGW,RGW
         BCR   8,R15                    Q. DONT MULTIPLY
         MR    RGW,RGW                  NEW PRODUCT IN RGX
         BR    R15                      GO TO RLTVC
         DROP  R15
RLTVD    AR    RGTTR,RGX           ADD NUMBER OF TRACKS IN THIS EXTENT
*                                   TO TOTAL NUMBER IN PREVIOUS EXTENTS
         SLL   RGTTR,8             SHIFT RESULT 1 BYTE LEFT
         IC    RGTTR,7(RGMBB)      MOVE IN R
         SLL   RGTTR,8             SHIFT RESULT TO FORM TTR0
         SR    R15,R15             ZERO ERROR CODE
         BR    R14                 RETURN TO CALLER
*
CNVT3    DC    H'4'
.CNVT2  ANOP
*******************************************************************
*
*IECPCNVT--- TTRN TO MBBCCHHR CONVERT ROUTINE
*
*THIS ROUTINE WILL CONVERT RELATIVE TRACK TT TO  ABSOLUTE TRACK MBBCCHH
*REGISTER CONVENTION--
*        0     CONTAINS TTRN, WHERE N IS CONCATENATION NO.
*        1     ADDRESS OF DEB
*        2     ADDRESS OF 8 BYTE FIELD FOR RESULT MBBCCHHR
*        3-8   TRANSPARENT
*        9-13  VOLATILE
*        14    RETURN ADDRESS
*        15    ENTRY ADDRESS-- USED FOR BASE
*
         ENTRY IECPCNVT
         EXTRN QMRDEB                                            S20076
         EXTRN QMHPT                                             S20076
         USING IHADEB,RGDEB
         USING IECPCNVT,R15
IECPCNVT SR    RGV,RGV
         DROP  RGZ
         IC    RGV,DEBNMEXT             NUMBER OF EXTENTS
         LR    RGW,RGV                  USE FOR LIMIT
         LA    RGZ,X'FF'                MASK
         NR    RGZ,RGTTR                CONCATENATION NUMBER (N)
         BZ    CNVTA                    Q. N IS ZERO
         LR    RGY,RGV                  NUMBER OF EXTENTS
         SLL   RGY,4                    TIMES 16
         AR    RGY,RGZ                  ADD N
         IC    RGZ,DEBDVMOD-1(RGY)      FIRST M OF DATA SET N
         SR    RGW,RGZ                  ADJUST LIMIT
         SLL   RGZ,4                    TIMES 16
CNVTA    AR    RGZ,RGDEB                ADJUST DEB PTR
         DROP  RGDEB
         USING IHADEB,RGZ
         SRL   RGTTR,8
         STC   RGTTR,7(RGMBB)           SAVE R
         LA    RGDEB,0(RGDEB)           CLEAR HI BYTE            S20076
         C     RGDEB,CNVTQDEB           TEST FOR JOBQUE DEB      S20076
         BNE   CNVTAA                   NO.CONTINUE              S20076
         CLI   7(RGMBB),X'00'           REC NU ZERO              S20076
         BNE   CNVTAA              NO-CONTINUE                     4750
CNVTABEN L     R1,CNVTABCD              GET ABEND CODE           S20076
         ABEND  (1),DUMP                TERMINATE TASK           S20076
         DS    F                                                 S20076
CNVTQDEB DC    A(QMRDEB)                ADDR OF JOBQUE DEB       S20076
CNVTABCD DC    X'001B0000'              ABEND CODE FOR BAD       S20076
*                  JOB QUE TTR                                   S20076
CNVTAA   EQU   *                                                 S20076
         SRL   RGTTR,8                  DEVELOP TT
CNVTB    SH    RGTTR,DEBNMTRK           DECREASE BY TRKS IN EXTENT
         BM    CNVTC                    Q. PROPER EXTENT
         LA    RGZ,16(RGZ)              GO TO NEXT EXTENT
         BCT   RGW,CNVTB                Q. STILL WITHIN DEB
         C     RGDEB,CNVTQDEB           ANOTHER JOBQUE DEB       S20076
         BE    CNVTABEN                 YES-ABEND                S20076
         LA    R15,4                    SET ERROR CODE
         BR    R14                      RETURN
CNVTC    SR    RGV,RGW                  DEVELOP M
         STC   RGV,0(RGMBB)             STORE M
         MVC   1(6,RGMBB),DEBBINUM      MOVE BBCCHH FROM DEB
         AIF   (&TYPE(5) EQ 1).CNVT3
         SR    R15,R15                  ZERO ERROR CODE
         DROP  R15
         AH    RGTTR,DEBNMTRK           ADD BACK OVERDRAW
         BCR   8,R14                    Q. DIVIDE UNNECESSARY
         LA    RGW,1                    FORCE RGW TO ZERO ON BCTR
*PICKUP LOCATION OF APPROPRIATE DEVICE CONSTANTS
CNVTDVC  L     RGY,DEBDVMOD            UCB ADDRESS
         LA    RGX,15                  MASK
         N     RGX,UCBTYP(RGY)   DEVICE TYPE CODE
         L     RGY,CVTAD                GET CVT ADDR
         L     RGY,CVTZDTAB(RGY)        GET DEVICE TABLE
         IC    RGX,C0(RGY,RGX)          GET DEVICE OFFSET
         AR    RGY,RGX                  GET DEVICE ENTRY
         BCTR  RGW,RGW                  Q. RETURN TO RLTV ROUTINE
         USING DEVTYPE,RGY
         LH    RGV,DEVTRK               GET TRACKS/ CYL
         LR    RGX,RGTTR                DIVIDE REG
         AH    RGX,DEBSTRHH             STARTING HH
         DR    RGW,RGV                  QUO=CYLS, REM=TRKS
         STC   RGW,6(RGMBB)             STORE H
         AH    RGX,DEBSTRCC             PLUS CC START
         STC   RGX,4(RGMBB)             STORE C
         SRA   RGX,C8                   SHIFT FOR HIGH C
         STC   RGX,C3(RGMBB)            GET BYTE
         BR    R14                      RETURN
        AGO   .CNVT4
.CNVT3  ANOP
         AH    RGTTR,DEBNMTRK           ADD BACK OVERDRAW
         BZ    CNVTE                    Q. DIVIDE UNNECESSARY
         LR    RGX,RGTTR                INIT FOR DIVIDE
         LA    RGV,4                    SET COUNTER
         BAL   R15,CNVTDVC              DEVICE CONST PTR WILL BE IN RGY
         USING CNVTD,R15
         USING DEVTYPE,RGY
CNVTD    IC    RGW,DEBSTRCC-C2(RGV)     GET BYTE
         CLI   DEVKEY,KEY2321           CHECK FOR 2321
         BE    CNVTD1                   BRANCH IF YES
         SLA   RGW,C8                   SHIFT FOR SECOND BYTE
CNVTD1   EQU   *
         IC    RGW,DEBSTRCC-C1(RGV)     C, C, H,H,
         AR    RGX,RGW                  PLUS PREV QUOTIENT
         BCT   RGV,CNVTF                Q. ANOTHER BYTE TO PROCESS
         STC   RGX,3(RGMBB)             FIRST C
CNVTE    SR    R15,R15                  INDICATE NO ERROR
         BR    R14                      RETURN TO CALLER
*
CNVTF    EQU   *
         CLI   DEVKEY,KEY2321           CHECK FOR 2321
         BE    CNVTF1                   BRANCH IF YES
         BCTR  RGY,C0                   DECREMENT BY ONE
         IC    RGW,C0(RGY,RGV)          GET HIGH BYTE
         LA    RGY,C1(RGY)              REINCREMENT
         SLA   RGW,C8                   SHIFT FOR SECOND BYTE
CNVTF1   EQU   *
         IC    RGW,C0(RGY,RGV)          GET LOW BYTE
         LTR   RGTTR,RGW               SET DIVISOR
         BCR   8,R15                    Q. DONT DIVIDE
         SR    RGW,RGW
         DR    RGW,RGTTR                REMAINDER IS C, H, OR H
         STC   RGW,3(RGMBB,RGV)         C, H, OR H
         CLI   DEVKEY,KEY2321           CHECK FOR 2321
         BE    CNVTG                    BRANCH IF YES
         SRA   RGW,C8                   SHIFT FOR NEXT BYTE
         STC   RGW,C2(RGMBB,RGV)        C OR H
         BCT   RGV,CNVTG                DECREMENT BY ONE
         B     CNVTE
CNVTG    EQU   *
         BR    R15                      RETURN
         DROP  R15
*
*PICKUP LOCATION OF APPROPRIATE DEVICE CONSTANTS--
CNVTDVC  L     RGY,DEBDVMOD            UCB ADDRESS
         LA    RGW,15                   MASK
         N     RGW,UCBTYP(RGY)         DEVICE TYPE CODE
         L     RGY,CVTAD                GET CVT ADDR
         L     RGY,CVTZDTAB(RGY)        GET DEVICE TABLE
         IC    RGW,C0(RGY,RGW)          GET DEVICE DISPLACEMENT
         AR    RGY,RGW                  GET DEVICE ENTRY
         BR  R15                        RETURN
.CNVT4  ANOP
         EJECT
*RESIDENT DIRECT ACCESS DEVICE CONSTANT TABLE--
.*               CONSTRUCT INDEX PORTION OF TABLE.
         ENTRY IECZDTAB
IECZDTAB EQU   *
       AIF     (&RER EQ 0).NORER                                   RER1
       DC      X'03'         TURN ON RER BIT IN LABELING BYTE.     RER1
       AGO     .BACK                                               RER1
.NORER   DC    X'02'         1965 LABELING BYTE.                   RER1
.BACK    AIF (&Q GT N'&TYPE).DONE
         AIF   (&TYPE(&Q) EQ 0).SKIP
         DC    AL1(Z&Q&SYSNDX-IECZDTAB)
         AGO   .CON
.SKIP    DC    X'00'
.CON     ANOP
&Q       SETA  &Q+1
         AGO   .BACK
.DONE    ANOP
.*             ALL DONE WITH INDEX PORTION OF TABLE.
.*             START WITH DATA PORTION OF TABLE.
         AIF   (&TYPE(1) NE 1).D2         2311
Z1&SYSNDX DS  0H                                                   OC58
         DC    X'0'                               2311
         DC    AL1(203)
         DC    X'0'
         DC    X'A'                               NO.OF TRACKS/CYLINDER
         DC    FL2'3625'                          TRACK LENGTH
         DC    FL1'81'                            OVERHEAD LAST RECORD
         DC    FL1'20'                            OVERHEAD FOR NON-KEY
         DC    FL1'20'
         DC    X'01'                              FLAG
         DC    FL2'537'                           TOLERANCE
         DC    X'001E'                 NO.ALTERNATE TRACKS         OC58
.D2      AIF   (&TYPE(2) NE 1).D3              2301
Z2&SYSNDX  DS  0H                                                  OC58
         DC    AL2(1)                             2301
         DC    AL2(200)
         DC    AL2(20483)
         DC    AL1(186)
         DC    AL1(53)
         DC    AL1(53)
         DC    FL1'0'
         DC    FL2'512'
         DC    X'0000'                 NO.ALTERNATE TRACKS         OC58
.D3      AIF   (&TYPE(3) NE 1).D4              2303
Z3&SYSNDX  DS  0H                                                  OC58
         DC    AL2(80)                           2303
         DC    AL2(10)
         DC    AL2(4892)
         DC    AL1(146)
         DC    AL1(38)
         DC    AL1(38)
         DC    X'00'
         DC    FL2'512'
         DC    X'0000'                 NO.ALTERNATE TRACKS         OC58
.D4      AIF   (&TYPE(4) NE 1).D5             2302
Z4&SYSNDX  DS  0H                                                  OC58
         DC    X'0'                               2302
         DC    AL1(250)
         DC    X'0'
         DC    FL1'46'
         DC    FL2'4984'
         DC    FL1'81'
         DC    FL1'20'
         DC    FL1'20'
         DC    X'01'
         DC    FL2'537'
         DC    X'00C8'                 NO.ALTERNATE TRACKS         OC58
.D5      AIF   (&TYPE(5) NE 1).D6     2321
Z5&SYSNDX  DS  0H                                                  OC58
         DC    FL1'20'                           2321
         DC    FL1'10'
         DC    FL1'05'
         DC    FL1'20'
         DC    FL2'2000'
         DC    FL1'100'
         DC    FL1'16'
         DC    FL1'16'
         DC    FL1'03'
         DC    FL2'537'
         DC    X'0190'                 NO.ALTERNATE TRACKS         OC58
.D6      AIF   (&TYPE(6) NE 1).D7       2305A
Z6&SYSNDX DS   0H
         DC    AL2(48)                  CYLINDERS
         DC    AL2(8)                   TRKS/CYL
         DC    AL2(14568)               BYTES/TRK
         DC    AL2(634)                 OVERHEAD BYTES
         DC    AL1(202)                 KEY CONST
         DC    X'09'                    2305 DEVICE
         DC    AL2(512)                 TOLERANCE
         DC    AL2(1)                   ALT TRACKS
         DC    AL2(664)                 R0 OVERHEAD
         DC    AL1(90)                  NO. OF SECTOR
         DC    AL1(87)                  NO. DATA SECTR
.D7      AIF   (&TYPE(7) NE 1).D8       2305C
Z7&SYSNDX DS   0H
         DC    AL2(96)                  CYLINDERS
         DC    AL2(8)                   TRKS/CYL
         DC    AL2(14858)               BYTES/TRK
         DC    AL2(289)                 OVERHEAD BYTES
         DC    AL1(91)                  KEY CONST
         DC    X'09'                    2305 DEVICE
         DC    AL2(512)                 TOLERANCE
         DC    AL2(1)                   ALT TRKS
         DC    AL2(320)                 R0 OVERHEAD
         DC    AL1(180)                 NO. OF SECTORS
         DC    AL1(177)                 NO. DATA SECTR
.D8      AIF (&TYPE(8) NE 1).D9      2314
Z8&SYSNDX  DS  0H                                                  OC58
         DC    AL2(203)
         DC    AL2(20)
         DC    FL2'7294'
         DC    AL1(146)
         DC    FL1'45'
         DC    FL1'45'
         DC    X'01'
         DC    FL2'534'
         DC    X'003C'                 NO. ALTERNATE TRACKS        OC58
.D9      AIF   (&TYPE(9) NE 1).DEVT                              M1596
Z9&SYSNDX DS   0F
         DC    AL2(411)                 CYLINDERS
         DC    AL2(19)                  TRKS/CYL
         DC    AL2(13165)               BYTES/TRK
         DC    AL1(191)                 OVERHEAD/BLOCK
         DC    AL1(191)                 OVERHEAD LAST BLOCK
         DC    AL1(56)                  KEY CONST
         DC    AL1(01)
         DC    AL2(512)                 TOLERANCE
         DC    AL2(133)                 ALT TRACKS
         DC    AL2(237)                 R0 OVERHEAD
         DC    AL1(128)                 NO. OF SECTORS
         DC    AL1(124)                 NO. DATA SECTR
.DEVT    ANOP                                                    M1596
DEVTYPE  DSECT
DEVCYL   DS    H                        NUMBER OF CYLINDERS
DEVTRK   DS    H                        TRACKS/ CYLINDER
DEVBYTE  DS    H                        BYTES PER TRACK
DEVOVR1  DS    C                        OVERHEAD PER BLOCK
DEVOVR2  DS    C                        OVERHEAD LAST BLOCK
DEVKEY   DS    C                        KEY OVERHEAD
         DS    C                        BLANK
DEVTOL   DS    H                        TOLERANCE
DEVALT   DS    H                        NUMBER TO ALT TRACKS
.SCTR    AIF   (&TYPE(6) NE 1 AND &TYPE(7) NE 1 AND &TYPE(9) NE 1).FIN1
&EQU     SETA  1
         TITLE 'SECTOR CONVERT ROUTINE'
IEC0SCR1 CSECT
*
**********************************************************************
*
*        RELEASE 22 DELETIONS
*        RELEASE 21 DELETIONS
*        RELEASE 20 DELETIONS
*
* FUNCTION     THIS ROUTINE CONVERTS THE RECORD NUMBER OF A FIX-
*              ED OR VARIABLE LENGTH RECORD DATA SET INTO THE
*              CORRESPONDING SECTOR VALUE FOR USE WITH AN I/O
*              DEVICE HAVING THE ROTATIONAL POSITION SENSING
*              (RPS) FEATURE.
*
* INPUT FOR FIXED LENGTH RECORDS --
*            - REGISTER 0 IS LOADED WITH A FOUR-BYTE VALUE IN
*              THE FORM OF 'DDKR' WHERE 'DD' IS A TWO-BYTE FIELD
*              CONTAINING THE PHYSICAL BLOCK SIZE, 'K' IS A ONE
*              BYTE FIELD CONTAINING THE KEY LENGTH, AND 'R' IS
*              THE RECORD NUMBER FOR WHICH A SECTOR VALUE IS
*              DESIRED.
*            - REGISTER 2 CONTAINS THE ONE-BYTE UCB DEVICE TYPE
*              CODE (UCB + 19) IN THE HIGH ORDER BYTE, AND THE
*              REMAINING 3 BYTES ARE THE ADDRESS OF A ONE BYTE
*              AREA THAT IS TO RECEIVE THE SECTOR VALUE.
*            - REGISTER 14 CONTAINS THE ADDRESS TO WHICH CONTROL
*              IS TO BE RETURNED AFTER EXECUTION OF THE SECTOR
*              CONVERT ROUTINE.
*            - REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY
*              POINT TO THIS ROUTINE AND IS USED AS A BASE
*              REGISTER.
*       FOR VARIABLE LENGTH RECORDS --
*            - REGISTER 0 IS LOADED WITH A FOUR-BYTE VALUE IN THE
*              FORM OF BBIR, WHERE BB IS THE TOTAL NUMBER OF KEY
*              AND DATA BYTES UP TO BUT NOT INCLUDING THE TARGET
*              RECORD, I IS A ONE-BYTE KEY INDICATOR ( 1 FOR KEYED
*              RECORDS, 0 FOR NON-KEYED RECORDS), AND R IS THE SAME
*              AS FOR FIXED LENGTH RECORDS.  THE HIGH ORDER BIT OF
*              THIS REGISTER MUST BE TURNED ON TO INDICATE VLR.
*            - REGISTERS 2, 14, 15 ARE THE SAME AS FOR FIXED LENGTH
*              RECORDS.
*
* OUTPUT       THE SECTOR VALUE CORRESPONDING TO THE RECORD
*              NUMBER PASSED TO THE CONVERT ROUTINE IN THE LOW-
*              ORDER BYTE OF REGISTER 0 IS PLACED AT THE ADDRESS
*              INDICATED REGISTER 2.
*
* EXIT         CONTROL IS RETURNED TO THE ADDRESS PASSED IN REG-
*              ISTER 14.
*
* ATTRIBUTES   REENTRANT
*
**********************************************************************
.FIN1    ANOP
*
**********************************************************************
*        GENERAL REGISTER USAGE                                      *
**********************************************************************
*
REG00    EQU   0                        USED IN BCTR INSTRUCTION
PARM1    EQU   0                        INPUT PARAMETER REG.
REG01    EQU   1                        NOT USED
PARM2    EQU   2                        INPUT PARAMETER REG.
REG03    EQU   3                        NOT USED
REG04    EQU   4                        NOT USED
REG05    EQU   5                        NOT USED
REG06    EQU   6                        NOT USED
REG07    EQU   7                        NOT USED
REG08    EQU   8                        NOT USED
DCTREG   EQU   9                        ADDR OF DEVICE ENTRY
WORK1    EQU   10                       WORK REGISTER
WORK2    EQU   11                       WORK REGISTER
REG12    EQU   12                       NOT USED
REG13    EQU   13                       NOT USED
RETRG    EQU   14                       POINTS TO PLACE OF RETURN
BASRG    EQU   15                       BASE REGISTER
*
**********************************************************************
*        OTHER EQUATES - CONSTANT NUMBERS AND DISPLACEMENTS          *
**********************************************************************
*
CON0     EQU   0                        CONSTANT NUMBER 0
TCDS     EQU   4                        DCT DISP. FOR TRK. CAP.
BODS     EQU   6                        DCT DISP. FOR BLOCK OVRHD.
EQU      EQU   8                        CONDITION CODE FOR 'BE'
KCDS     EQU   8                        DCT DISP. FOR KEY CONST.
SHFT1    EQU   8                        NO. BITS FOR 1-BYTE SHIFT
R0ODS    EQU   14                       DCT DISP. FOR R0 OVRHD.
SHFT2    EQU   16                       BITS FOR TWO-BYTE SHIFT
NOSDS    EQU   17                       GET NO. SECTR
CVTAD    EQU   16                       CVT ADDRESS
SHFT3    EQU   24                       NO. BITS FOR 3-BYTE SHIFT
SHFT4    EQU   32                       BITS FOR FOUR-BYTE SHIFT
TIXDS    EQU   64                       DISP. FOR TABLE INDEX
FLAG1    EQU   9                        DCT DISP TO FLAG
TWOBIT   EQU   X'08'                    2 BYTE BLOCK OVERHEAD
*
         AIF   (&EQU NE 1).FIN
**********************************************************************
*        CALCULATE EFFECTIVE BLOCK LENGTH                            *
**********************************************************************
*
         USING *,BASRG                  ESTABLISH ADDRESSABILITY
         B     NOTQCNVT                 BRANCH AROUND ADCON
         DC    V(IEFQCNVT)              ADDR OF ALT CONVERT RTN
NOTQCNVT EQU   *
         STC   PARM1,CON0(PARM2)        SAVE R IN THETA
         CLI   CON0(PARM2),CON0         DOES R=0 ?
         BCR   EQU,RETRG                IF YES, RETURN
         LTR   WORK1,PARM1              VARIABLE-LENGTH RECORDS ?
         BM    VLR                      BRANCH IF YES
         SRDL  WORK1,SHFT2              SHIFT OUT K&R
         SRL   WORK2,SHFT3              PUT K IN LOW ORDER BYTE
         AR    WORK1,WORK2              KEY LENGTH + DATA LENGTH
         SRDL  WORK1,SHFT4              CLEAR 1, PUT SUM IN 2
         IC    WORK1,CON0(PARM2)        GET R
         BCTR  WORK1,REG00              SUBTRACT 1 FROM R
         MR    WORK1,WORK1              (R-1)(KL+DL)
*
**********************************************************************
*        CALCULATE NUMBER OF BYTES ON TRACK PRIOR TO RECORD 'R'      *
**********************************************************************
*
HERE     EQU   *
         LR    WORK1,PARM1              PUT PARAM.S IN WORK REG.
         LR    PARM1,WORK2              SAVE TOTAL SO FAR
         L     DCTREG,CVTAD             GET CVT ADDRESS
         L     DCTREG,TIXDS(DCTREG)     GET DCT INDEX TABLE ADDR
         LR    WORK2,PARM2
         SRL   WORK2,SHFT3              GET DEVICE CODE
         IC    WORK2,CON0(WORK2,DCTREG) GET DCT INDEX BYTE
         LA    DCTREG,CON0(WORK2,DCTREG) GET DCT ENTRY ADDRESS
         SRDL  WORK1,SHFT2              SHIFT OUT K&R
         SRL   WORK2,SHFT3              PUT K IN LOW ORDER BYTE
         LR    WORK1,WORK2              PUT K IN WORK1 ALSO
         IC    WORK2,BODS(DCTREG)       GET BLOCK OVERHEAD
         TM    FLAG1(DCTREG),TWOBIT     IS THIS A TWO BYTE DEVICE
         BZ    ONEBYTE                  BRANCH IF ONE BYTE
         LH    WORK2,BODS(DCTREG)       GET BLOCK OVERHEAD
ONEBYTE  EQU   *
         LTR   WORK1,WORK1              KEYED RECORDS ?
         BP    KEYED                    BRANCH IF YES
         IC    WORK1,KCDS(DCTREG)       GET SUBTRACTION FACTOR
         SR    WORK2,WORK1              SUBTRACT FOR NO KEY
KEYED    EQU   *
         SR    WORK1,WORK1              CLEAR REGISTER
         IC    WORK1,CON0(PARM2)        GET R
         BCTR  WORK1,REG00              SUBTRACT ONE FROM R
         MR    WORK1,WORK1              (R-1)(Y-K)
         AH    WORK2,R0ODS(DCTREG)      ADD RECORD 0 OVERHEAD
         AR    WORK2,PARM1              ADD BB OR K+DD
*
**********************************************************************
*        CALCULATE AND STORE THE SECTOR VALUE, RETURN                *
**********************************************************************
*
         IC    WORK1,NOSDS(DCTREG)      GET NUMBER OF SECTORS
         MR    WORK1,WORK1              (#SECTORS)(TOTAL SO FAR)
         LH    DCTREG,TCDS(DCTREG)      TRACK CAPACITY
         DR    WORK1,DCTREG             DIVIDE TOTAL BY TRACK CAP
         STC   WORK2,CON0(PARM2)        STORE SECTOR
         BR    RETRG                    RETURN
VLR      EQU   *
         SLL   WORK1,ONE                SHIFT OUT SIGN
         SRL   WORK1,SHFT2+1            SHIFT OUT I&R
         LR    WORK2,WORK1              MATCH REG. SETUP
         B     HERE
IEFQCNVT CSECT
***********************************************************************
*                                                                     *
*          CONVERSION ROUTINE FOR RPS JOBQUEUE                        *
*                                                                     *
***********************************************************************
*    *     *     *     *       *     *     *    *    *     *    *     *
*                                                                     *
*FUNCTION - TO COMPUTE THE NUMBER OF DATA BYTES PRECEEDING A JOBQUEUE *
*           RECORD OR A LOGICAL TRACK HEADER RECORD FOR INPUT TO THE  *
*           SECTOR CONVERT ROUTINE                                    *
*                                                                     *
*    *     *     *     *       *     *     *    *    *     *    *     *
*                                                                     *
*INPUT    - R0 - CONTAINS THE TTR0 OF THE LTH OR RECORD               *
*                                                                     *
*         - R3 - ADDRESS OF QUEUE MANAGER RESIDENT CORE               *
*                                                                     *
*         - R14 - RETURN ADDRESS                                      *
*                                                                     *
*         - R15 - ADDRESS OF THE ENTRY POINT OF THIS ROUTINE AND IS   *
*                 USED IS THE BASE REGISTER                           *
*                                                                     *
*    *     *     *     *       *     *     *    *    *     *    *     *
*                                                                     *
*OUTPUT   - R0 - SET UP FOR ENTRY TO THE SECTOR CONVERT ROUTINE IN    *
*                BBKR FORM WHERE BB IS THE NUMBER OF PRECEEDING BYTES *
*                K=0 FOR NON-KEYED RECORDS, AND R IS THE RECORD       *
*                NUMBER                                               *
*                                                                     *
*           R3- SAME AS INPUT                                         *
*                                                                     *
*         - REGISTERS 1,2,9-13 ARE USED BY THIS ROUTINE AND ARE NOT   *
*           RESTORED.                                                 *
*    *     *     *     *       *     *     *    *    *     *    *     *
*                                                                     *
*EXIT     -  RETURN TO CALLER VIA REGISTER 14                         *
*    *     *     *     *       *     *     *    *    *     *    *     *
*ATTRIBUTES - REENTRANT                                               *
*    *     *     *     *       *     *     *    *    *     *    *     *
***********************************************************************
D1       EQU   1
LTHLH    EQU   20                 LTH LENGTH
QCRLG    EQU   36                 QUEUE CONTROL RECORD LENGTH
RECLH    EQU   176                QUEUE RECORD LENGTH
         USING *,R15              ESTABLISH ADDRESSABILITY FOR ROUTINE
         USING QMCVTRES,R3
         LR    R2,R0              TTR INTO WORK REGISTER
         LR    R1,R0              SAVE TTR
         SRL   R2,16              ISOLATE TT AND TEST FOR > OR = TO
         LH    R9,QMKTT           TT OF FIRST TRACK WITH NO QCR'S
         CR    R2,R9              IF NOT,RECORD IS ON MIXED TRACK,
         BL    MIXED              BRANCH FOR SPECIAL CONVERSION
         SR    R9,R9              ZERO INDICATOR REGISTER
         LR    R2,R0              ISOLATE RECORD NUMBER OF TTR0 TO
         SLL   R2,16              BE CONVERTED
         SRL   R2,24
COMPUTE  EQU   *
         LTR   R2,R2              IF R=0 OR 1 THERE IS NO PRECEEDING
         BZ    SET1               JOB QUEUE RECORD., GO CHECK FOR
         CL    R2,ONES            QCR'S BEFORE RETURNING
         BE    SET1
         LH    R12,QMLPT          GET NUMBER OF RECORDS PER LOGICAL
*                                 TRACK
         LR    R11,R2             GET NUMBER OF RECORDS PRECEEDING
         BCTR  R11,R0             THIS RECORD
         SR    R10,R10            ZERO FOR DIVISION
         LA    R12,D1(R12)        ADD ONE FOR LTH ON EACH TRACK
         DR    R10,R12            DIVIDE NUMBER OF PRECEEDING RECORDS
*                                 BY NUMBER OF RECORDS PER LOGICAL
*                                 TRACK INCLUDING THE LTH
         LA    R13,LTHLH          LENGTH OF TTH FOR MULTIPLICATION
         LA    R13,LTHLH          LENGTH OF LTH FOR MULTIPLICATION
         LTR   R10,R10            IS THERE A REMAINDER? YES,
         BNZ   REMAIN             ADD ONE TO QUOTIENT BEFORE
*                                 COMPUTING LTH BYTES
         MR    R12,R11            NO,QUOTIENT= NUMBER OF LTH'S,
*                                 MULTIPLY X 20 FOR TOTAL LTH BYTES
         B     RECBYTES           GO COMPUTE RECORD BYTES
REMAIN   EQU   *                  REMAINING RECORDS MAY CONTAIN ONE
         LA    R11,D1(R11)        LTH SO INCREMENT AND MULTIPLY FOR
         MR    R12,R11            TOTAL LTH BYTES
         BCTR  R11,R0             SUBTRACT ONE FROM QUOTIENT TO GET
*                                 NUMBER OF PRECEEDING LOGICAL TRKS
         BCTR  R10,R0             SUBTRACT ONE FROM RECORDS REMAINING
*                                 SINCE ONE WAS ADDED TO LTH'S
RECBYTES EQU   *                  COMPUTE NUMBER OF BYTES FOR 176 BYTE
         LR    R0,R13             RECORDS. SAVE LTH BYTES.
         LH    R13,QMLPT          NUMBER OF RECORDS PER LOGICAL TRACK
         MR    R12,R11            MULTIPLY X NUMBER OF TRACKS
         AR    R13,R10            ADD REMAINDER TO NUMBER OF RECORDS
         LA    R10,RECLH          GET RECORD LENGTH
         MR    R12,R10            MULTIPLY FOR TOTAL RECORD BYTES
         AR    R0,R13             ADD TO TOTAL LTH BYTES. R0 NOW HAS
*                                 TOTAL PRECEEDING BYTES.
RET      EQU   *
         AR    R0,R9              ADD IN QCR BYTES, IF ANY
         SRL   R1,8               GET RID OF CONCATENATION AND TT
         SLL   R1,24              BYTES
         SRL   R1,8               GET 0R00 FORMAT
         SLDL  R0,16              R0 NOW = # BYTES-0-R
         L     R1,MASK            SET HIGH ORDER BIT TO ONE FOR
         OR    R0,R1              VARIABLE LENGTH INDICATION
         BR    R14                AND RETURN TO CALLER
SET1     EQU   *
         SR    R0,R0              FIRST RECORD HAS NO PRECEEDING
*                                 RECORD BYTES
         B     RET                RETURN
MIXED    EQU   *
         LH    R9,QMNHM           NUMBER OF QCR'S ON MIXED TRACK
         LA    R11,QCRLG          NUMBER BYTES PER QCR
         MR    R10,R9             MULTIPLY FOR TOTAL QCR BYTES
         LR    R2,R0              ISOLATE RECORD VALUE IN REGISTER
         SLL   R2,16              TWO FOR COMPUTATION ROUTINE
         SRL   R2,24
         SR    R2,R9              GET NUMBER OF RECORDS PRECEEDING ONE
*                                 TO CONVERT EXCLUDING THE QCR'S
         LR    R9,R11             SAVE TOTAL QCR BYTES
         B     COMPUTE            GO COMPUTE RECORD BYTES
         DS    0F
ONES     DC    X'00000001'
MASK     DC    X'80000000'        MASK FOR SETTING HIGH ORDER BIT
QMCVTRES DSECT
QMRDCB   DC    2F'0'                    DCB
         DC    H'0'                     SPACE
QMWTPLMT DC    X'00'                   SPACE
         DC    8F'0'                    SPACE
         DC    A(QMRDEB1)               DEB POINTER              S20076
         DC    F'0'                     SPACE
QMRDEB1  DC    6F'0'                    QUEUE MANAGER DEB        S20076
         DC    X'0F'                    DEB ID
         DC    AL3(QMRDCB)              DCB POINTER
QMRAPG   DC    F'0'                     APPANDAGE POINTER
QMRUCB   DC    F'0'                     UCB POINTER
         DC    H'0'                     SPACE
QMRSCC   DC    X'0001'                  START CC
QMRSHH   DC    X'0000'                  START HH
QMRECC   DC    X'0002'                  END CC
QMREHH   DC    X'0000'                  END HH
QMRNTR   DC    X'0014'                  ASSIGNED TRKS
QMHDA    DC    2F'0'                    MBBCCHHR
         DC    X'00'                    SPACE
QMFLTM   DC    X'0000'                  NUMBER OF LOGICAL TRKS
QMQBK    DC    X'00'                    FLAG
QMRSV    EQU   X'01'                    SPACE RESERVED BIT
QMTLNM   DC    H'0'                     TOTAL LOGICAL TRKS
QMNOTM   DC    H'0'                     AVAILABLE LOGICAL TRKS
QMHKT    DC    H'0'                     THRESHOLD
QMTBT    DC    H'0'                     TOTAL THRESHOLD
QMTIDM   DC    H'0'                     NUMBER OF AVAILABLE TRKS
QMKTT    DC    H'0'                     NUMBER OF 1ST LTRK
QMHPT1   DC    H'0'                     NUMBER OF HANDLES        S20076
QMRPT    DC    H'0'                     NUMBEF OF RECORDS PER PHY TRK
QMLPT    DC    H'0'                     NUMBER OF RECORDS PER LOG TRK
QMTRS    DC    H'0'                     THRESHOLD OF LTRKS
QMNHM    DC    H'0'                     NUMBER OF HANDLES
QMFQR    DC    H'0'                     NUMBER OF 1ST JOBQUE R
QMECBA   DC    F'0'                     ECB
QMRPS    DC    F'0'                     RPS INDICATOR
.FIN     MEND
