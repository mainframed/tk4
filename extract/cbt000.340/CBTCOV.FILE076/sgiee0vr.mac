         MACRO
         SGIEE0VR  &APR,&MCS,&GFX,&TP,&M65MP                     A32191
         TITLE 'IEE3203D, VARY KEYWORD SCAN ROUTINE'              M4957
IEE3203D CSECT
*A 694500,784500-787500                                          A32191
*C 007000,121400-121996,694500                                   A32191
* MODULE CLEANUP--A MACRO CALL AND AN END STATEMENT FOLLOWING THE 21774
* MEND CARD IS INCORRECT AND WAS DELETED                          21774
*D 882000-932000                                                  21774
* 008000,113600,125000,127400,748000                              20002
***********************************************************************
* TITLE- IEE3203D   VARY KEYWORD SCAN MODULE                          *
* FUNCTION- THIS MODULE SCANS THE VARY COMMAND OPERAND FIELD FOR THE  *
*              KEYWORD AND THEN COMPARES THIS KEYWORD TO EACH ENTRY   *
*              IN A TABLE OF VALID VARY KEYWORDS. A KEYWORD IS VALID  *
*              ACCORDING TO THE OPTIONS SPECIFIED AT SYSGEN TIME. FOR *
*              THIS SYSTEM, THESE KEYWORDS ARE VALID-                 *
*                  ONLINE    VALID FOR ALL SYSTEMS                    *
*                  OFFLINE             ''                             *
.MCS     AIF   ('&MCS' EQ '0').GFX
*                  CONSOLE   VALID FOR MULTIPLE CONSOLE SUPPORT OPT.  *
*                  HARDCPY             ''                             *
*                  MSTCONS             ''                             *
.GFX     AIF   ('&GFX' EQ '0').APR
*                  ONGFX     VALID FOR GRAPHICS OPTION                *
*                  OFFGFX              ''                             *
.APR     AIF   ('&APR' EQ '0').TP                                 20002
*                  PATH      VALID FOR ALTERNATE PATH RETRY OPTION    *
.TP      AIF   ('&TP' EQ '0').BR                                  20002
*                  ONTP      VALID FOR TCAM OPTION                20002
*                  OFFTP               ''                         20002
.BR      ANOP
***********************************************************************
* ENTRY POINT- IEE3203D FROM COMMAND ROUTER MODULE, IEE0403D          *
***********************************************************************
* ATTRIBUTES- REENTRANT, SVC TRANSIENT, READ-ONLY, SELF RELOCATING    *
***********************************************************************
* APPLICABILITY- MFT,MVT                                              *
***********************************************************************
* EXTERNAL REFERENCES- EXTENDED SAVE AREA (XSA)                       *
***********************************************************************
* EXITS(NORMAL)- IN THIS SYSTEM IEE3203D EXITS TO-                    *
         AIF   ('&M65MP' EQ '0').NOMP                            A32191
         AIF   ('&MCS' EQ '0').YESMP                             A32191
*              IEE3603D FOR KEYWORDS-ONLINE,OFFLINE,CONSOLE      A32191
*              IEE4703D FOR KEYWORD-HARDCPY                      A32191
*              IEE4303D FOR KEYWORD-MSTCONS                      A32191
         AGO   .BR1                                              A32191
.YESMP   ANOP                                                    A32191
*              IEE3603D FOR KEYWORDS-ONLINE,OFFLINE              A32191
         AGO   .BR1                                              A32191
.NOMP    AIF   ('&MCS' EQ '0').NONMCS                            A32191
*              IEE3303D FOR KEYWORDS- ONLINE, OFFLINE, CONSOLE        *
*              IEE4703D FOR KEYWORD- HARDCPY                          *
*              IEE4303D FOR KEYWORD- MSTCONS                          *
         AGO   .BR1
.NONMCS  ANOP
*              IEE1103D FOR KEYWORDS- ONLINE, OFFLINE                 *
.BR1     AIF   ('&GFX' EQ '0').NONGFX
*              IEE1703D FOR KEYWORDS- ONGFX, OFFGFX                   *
.NONGFX  AIF   ('&APR' EQ '0').NONAPR
*              IEE2403D FOR KEYWORD- PATH                             *
.NONAPR  AIF   ('&TP' EQ '0').NOTP                                20002
*              IGC1303D FOR KEYWORDS- ONTP, OFFTP                 20002
.NOTP    ANOP
***********************************************************************
* EXITS(ERROR)- EXIT TO MESSAGE MODULE IEE0503D                       *
*        MESSAGES-                                                    *
*              'IEE3111 VARY  PARAMETER MISSING'                      *
*                WHEN POINTER TO COMMAND PARAM LIST IN XAL IS 0       *
*              'IEE3071 VARY  DELIMITER ERROR'                        *
*                WHEN NO COMMA AFTER PARENS, UNBALENCED PARENS, OR NO *
*                COMMA BEFORE KEYWORD.                                *
*              'IEE3091 VARY  UNIDENTIFIABLE KEYWORD'                 *
*                WHEN THE KEYWD DOES NOT MATCH ANY ENTRY IN THE TABLE *
***********************************************************************
* INPUT- REGISTER 2 CONTAINS A POINTER TO THE XSA                     *
***********************************************************************
* OUTPUT- CONTROL IS PASSED TO THE CORRECT COMMAND PROCESSOR, OR THE  *
*              MESSAGE MODULE, IEE0503D                               *
***********************************************************************
* OPERATION- IEE3203D SCANS THE VARY COMMAND OPERAND FOR THE KEYWORD  *
*              WHICH IS DEFINED AS THE WORD FOLLOWING THE FIRST COMMA *
*              NOT EMBEDDED IN PARENS. R9 IS USED TO INDEX THROUGH THE*
*              OPERAND TO FIND ',KEYWORD'. COMMANDS OF THE FOLLOWING  *
*              FORMS ARE ACCEPTABLE-                                  *
*                  V  UNIT,KEYWORD                                    *
*                  V  UNIT(MULTIPLE UNITS),KEYWORD                    *
*                  V  (MULTIPLE UNITS),KEYWORD                        *
*                  V  (MULTIPLE UNITS)UNIT,KEYWORD                    *
*                  (ANY NUMBER OF BALANCED INNER/OUTER PARENS MAY BE  *
*                   SPECIFIED)                                        *
*                  V  ,KEYWORD                                        *
*              WHEN THE COMMA PRECEDING THE KEYWORD IS FOUND,A POINTER*
*              TO THE START OF THE KEYWORD IS SAVED AND THE SCAN CON- *
*              TINUES UNTIL A COMMA, BLANK, OR THE END OF BUFFER IS   *
*              FOUND. WHEN THE COMPLETE KEYWORD IS FOUND, IT IS COM-  *
*              PARED TO EACH ENTRY IN THE VALID KEYWORD TABLE UNTIL A *
*              MATCH OR THE END OF THE TABLE IS FOUND. EACH ENTRY     *
*              CONSISTS OF A 9 BYTE KEYWORD SLOT FOLLOWED BY ITS 2    *
*              BYTE MODULE CODE. THE TABLE SCAN IS DONE BY ESTABLISH- *
*              ING ADDRESSABILITY TO THE TABLE AND THEN INCREMENTING  *
*              THE BASE REGISTER BY THE LENGTH OF AN ENTRY AS EACH NON*
*              MATCH IS FOUND. THIS METHOD INSURES FUTURE FLEXIBILITY *
*              BECAUSE NO MATTER HOW MANY NEW KEYWORDS ARE ADDED TO   *
*              THE TABLE, THE LABELS 'KEYTAB' AND 'XCTLMOD' WILL AL-  *
*              WAYS POINT TO THE CURRENT KEYWORD AND ITS MODULE CODE. *
*              WHEN A MATCH IS FOUND, THE MODULE CODE AT 'XCTLMOD' IS *
*              INSERTED INTO THE MODULE NAME IN THE XAX AND POINTERS  *
*              FOR THE XCTL ARE PLACED IN THE XSA. FOR AN ERROR, THE  *
*              MESSAGE MODULE NAME IS PLACED IN THE XAX, AN ERROR CODE*
*              IS PLACED IN THE XAE,AND THE XCTL PROCEDURE IS FOLLOWED*
***********************************************************************
* NOTES- THIS SCAN DOES NOT SUPPORT KEYWORDS OF MORE THAN 8 CHARACTERS*
***********************************************************************
* REGISTER ASIGNMENTS
R1       EQU   1
R2       EQU   2                   XSA BASE
R3       EQU   3
R4       EQU   4                   COUNTER FOR KEYWORD CHARACTERS
R5       EQU   5
R6       EQU   6                   PTR TO FIRST CHAR OF KEYWORD
R7       EQU   7                   POINTER TO END OF BUFFER
R8       EQU   8                   WORK REG
R9       EQU   9                   PTR TO CURRENT CHAR OF OPERAND FIELD
R10      EQU   10
R11      EQU   11                  BASE FOR VALID KEYWORD TABLE
R12      EQU   12                  PGM BASE
R13      EQU   13
R14      EQU   14
R15      EQU   15
*    EQUATES
C0       EQU   0
C1       EQU   1
C2       EQU   2
C3       EQU   3
C8       EQU   8
LENG     EQU   11                  LENGTH OF KEYWORD-MODULE CODE ENTRY
COMMA    EQU   C','                COMMA CHAR
LFTPAREN EQU   C'('                LEFT PAREN CHAR
RGTPAREN EQU   C')'                RIGHT PAREN CHAR
BLANK    EQU   C' '                BLANK CHAR
PARENSW  EQU   3                   SWITCH FOR BALANCED PARENS
ERR7     EQU   07                  ERR CODE   DELIM ERROR
ERR9     EQU   9                   ERR CODE   UNIDENT KEYWORD
ERR11    EQU   11                  ERR CODE   PARAM MISSING
***********************************************************************
         SPACE 10
***********************************************************************
* FUNCTIONS OF THIS ROUTINE-                                          *
*     1. ESTABLISHES PROGRAM AND XSA ADDRESSABILITY                   *
*     2. INITIALIZES A BALANCED PAREN SWITCH AND A CHARACTER COUNTER  *
*     3. CHECKS XAL FOR 0. (IF 0, BRANCHES TO ERROR ROUTINE.)         *
*     4. COMPUTES THE END OF BUFFER                                   *
***********************************************************************
         BALR  R12,C0              ESTABLISH PGM ADDRESSABILITY
         USING *,R12
         B     BRANCH              BRANCH AROUND MODULE ID
         DC    X'EEEE'             MODULE IDENTIFIER
         DC    CL8'IEE3203D'              ..
         DC    CL4'9122'                  ..
         DC    X'EEEE'                    ..
BRANCH   EQU   *
         USING XSA,R2              BASE FOR EXTENDED SAVE AREA
         L     R9,XAL              REG 9 POINTS TO OPERAND FIELD OF    *
                                   VARY COMMAND
         LA    R9,C0(R9)           ZERO OUT HIGH ORDER BYTE
         LTR   R9,R9               IS PARAMETER PTR 0 (NO KEYWORD)
         LA    R5,ERR11            SET ERR CODE FOR MSG 'PARAM MISSING'
         BZ    ERREXIT             YES,PTR IS 0, GO TO ERROR ROUTINE
         L     R7,XAR              LOAD POINTER TO THE BUFFER THAT
         LA    R7,C0(R7)           CONTAINS THE VARY COMMAND
         AH    R7,C0(R7)           COMPUTE END OF BUFFER
         SR    PARENSW,PARENSW     INITIALIZE PAREN SWITCH TO 0
         SR    R4,R4               INITIALIZE CHARACTER COUNTER TO 0
         SPACE 10
***********************************************************************
* THE COMMAND OPERAND IS SCANNED FOR A LEFT PAREN OR A COMMA. IF A    *
* LEFT PAREN IS FOUND, THE OPERAND IS SCANNED FOR BALANCED PARENS AND *
* THEN THE KEYWORD. IF THERE IS NO LEFT PAREN, AND A COMMA IS FOUND,  *
* THE KEYWORD SHOULD FOLLOW.                                          *
***********************************************************************
PARENSCN EQU   *
CHECK    CLI   C0(R9),LFTPAREN     IS FIRST CHAR A LEFT PAREN
         BE    INCSWTCH            YES,GO TO CHECK FOR BAL PARENS
         CLI   C0(R9),COMMA        IS CURRENT CHAR A COMMA
         BE    SAVEPTR             YES, GO TO SCAN KEYWORD
         LA    R9,C1(R9)           INCREMENT PTR TO NEXT CHAR
         CR    R9,R7               HAS END OF BUFFER BEEN REACHED
         BE    DELIMERR            YES,GO TO ERR RTN, COMMA MISSING
         B     CHECK               GO BACK TO CHECK NEXT CHAR
***********************************************************************
* THIS ROUTINE SCANS THE PARAMETER LIST FOR BALANCED PARENS. WHEN A   *
* LEFT PAREN IS FOUND, PARENSW IS INCREMENTED BY 1, FOR A RIGHT PAREN *
* IT IS DECREMENTED BY 1. WHEN PARENSW IS 0, BALANCED PARENS HAVE BEEN*
* FOUND, AND A COMMA AND THE KEYWORD SHOULD FOLLOW.                   *
***********************************************************************
INCSWTCH LA    PARENSW,C1(PARENSW) INCREMENT BY 1 FOR LEFT PAREN
CHARSCAN LA    R9,C1(R9)           INCREMENT PTR TO NEXT CHAR
         CLI   C0(R9),LFTPAREN     IS CURRENT CHAR A LEFT PAREN
         BE    INCSWTCH            YES,CHAR IS'(',SET SWTCH,CHECK AGAIN
         CLI   C0(R9),RGTPAREN     IS CURRENT CHAR A RIGHT PAREN
         BNE   CHKSWTCH            NO,CHECK PAREN SWITCH FOR 0
DECSWTCH BCTR  PARENSW,C0          DECREMENT BY 1 FOR RIGHT PAREN
CHKSWTCH LTR   PARENSW,PARENSW     IS SWITCH 0 (BALANCED PARENS)
         BZ    KEYSCAN             YES,GO TO SCAN KEYWORD AFTER PARENS
         CR    R9,R7               NO, CHECK FOR END OF BUFFER REACHED
         BNE   CHARSCAN            NO,GO BACK TO CHECK NEXT CHAR
DELIMERR LA    R5,ERR7             DELIM ERR UNBAL PARENS OR NO COMMA
         B     ERREXIT             GO TO ERROR RTN TO SET UP XCTL
         SPACE 10
***********************************************************************
* THIS ROUTINE CHECKS FOR A COMMA PRECEDING A KEYWORD AND IF THE COMMA*
* IS PRESENT, SCANS THE KEYWORD. A POINTER TO THE FIRST CHAR OF THE   *
* KEYWORD IS SAVED. (A KEYWORD IS DEFINED AS THE FIRST WORD FOLLOWING *
* A COMMA NOT EMBEDDED IN PARENS.) THE KEYWORD IS COMPLETE WHEN A     *
* COMMA, A BLANK, OR END OF BUFFER IS FOUND.                          *
***********************************************************************
KEYSCAN  EQU   *
         LA    R9,C1(R9)           INCREMENT PTR TO NEXT CHAR
         CLI   C0(R9),COMMA        IS CURRENT CHAR A COMMA
         BNE   DELIMERR            NO.COMMA MUST PRECEDE KEYWORD
SAVEPTR  LA    R6,C1(R9)           SAVE PTR TO 1ST CHAR OF KEYWORD
SCAN1    LA    R9,C1(R9)           INCREMENT PTR TO CURR CHAR OF KEYWD
         CLI   C0(R9),COMMA        IS CURRENT CHAR A COMMA
         BE    TABSCAN             YES,COMMA MEANS END OF KEYWD FOUND
         CLI   C0(R9),BLANK        NO,CHECK CURRENT CHAR FOR BLANK
         BE    TABSCAN             YES,BLANK MEANS END OF KEYWD FOUND
         CR    R9,R7               NO,CHECK FOR END OF BUFFER
         BE    TABSCAN             GO TO SCAN TABLE
         LA    R4,C1(R4)           INCREMENT KEYWORD CHAR COUNTER
         B     SCAN1               GO BACK TO CHECK NEXT CHAR OF KEYWD
         SPACE 10
***********************************************************************
* THIS ROUTINE COMPARES THE KEYWORD WITH EACH ENTRY IN A TABLE OF     *
* VALID VARY KEYWORDS UNTIL A MATCH, OR THE END OF THE TABLE IS FOUND.*
* WHEN A MATCH IS FOUND,THE CORRECT XCTL MODULE NAME IS PLACED IN THE *
* XAX, AND PTRS FOR THE XCTL ARE SET UP IN THE XSA.                   *
***********************************************************************
TABSCAN  EQU   *
         LA    R11,KEYTAB          PUT ADDRESS OF KEYWORD TABLE IN A
         USING KEYTAB,R11          REG AND ESTABLISH ADDRESSABILITY
         LA    R8,TABEND           PUT ADDRESS OF END OF TABLE IN A REG
         BCTR  R4,C0               DECREMENT CHAR COUNTER FOR EX INSTR
SCAN2    EQU   *
         CLR   R11,R8              HAS END OF TABLE BEEN REACHED
         LA    R5,ERR9             PRESET CODE FOR UNIDENT KEYWORD MSG
         BH    ERREXIT             YES, THE VERB IS INVALID
         EX    R4,DOCLC            INSERT KEYWORD LENGTH IN CLC INSTR
         BE    XMOD                IF KEYWDS MATCH,GOTO SET UP XCTL MOD
INCPTR   LA    R11,LENG(R11)       IF NOT, INCREMENT PTR TO NEXT KEYWD
         B     SCAN2               GO TO CHECK NEXT ENTRY
XMOD     LA    R8,C1(R11)          COMPUTE A POINTER TO THE FIRST
         AR    R4,R8               CHARACTER AFTER THE KEYWORD
         CLI   C0(R4),BLANK        IS THE CHARACTER BLANK
         BNE   INCPTR              IF NOT, A FALSE MATCH HAS BEEN FOUND
*                                  EG. KEYWORD 'ABC' WOULD MATCH TABLE
*                                  ENTRY 'ABCD' BECAUSE ONLY THE FIRST
*                                  3 CHARACTERS WERE COMPARED.
XCTLRTN1 EQU   *
         MVC   XAX(C8),XCTLNAME    PUT XCTL MOD NAME IN XAX
         MVC   XAX+C3(C2),XCTLMOD  PUT MOD IDENT CODE IN XCTL MOD NAME
XCTLRTN2 EQU   *
         SR    R15,R15             ZERO  OUT A REG
         ST    R15,XAD             USE IT TO ZERO OUT DCB PTR IN LIST
         LA    R15,XAX             GET PTR TO XCTL MOD NAME IN LIST
         ST    R15,XAP             PUT PTR TO XCTL MOD NAME INTO LIST
         LR    R15,R2              PUT PTR TO LIST IN REG 15
         XCTL  SF=(E,(15))         ISSUE XCTL
         SPACE 10
***********************************************************************
* EXIT ROUTINE-                                                       *
* THE CORRECT ERROR CODE AND THE MESSAGE MODULE NAME,IGC0503D, ARE    *
* PUT IN THE XAE AND THEN THE XCTL PROCEDURE IS FOLLOWED.             *
***********************************************************************
ERREXIT  EQU   *
         STC   R5,XAE              PUT ERROR CODE IN XAE
         MVC   XAX(C8),MSGMOD      PUT IGC0503D IN XAX
         B     XCTLRTN2            BRANCH TO COMPLETE XCTL
         SPACE 10
DOCLC    CLC   C0(C0,R11),C0(R6)   DOES CURRENT TABLE ENTRY EQU KEYWD
         DS    0F                  ALIGN ON FULL WORD BOUNDARY
MSGMOD   DC    C'IGC0503D'         ERROR MSG MODULE
XCTLNAME DC    CL8'IGC0003D'       XCTL MODULE NAME
***********************************************************************
KEYTAB   EQU   *                   START OF VALID KEYWORD TABLE
*                                  ****KEYWORD FOLLOWED BY ITS****
*                                  ****   XCTL MODULE CODE    ****
         AIF   ('&M65MP' EQ '0').NONMP                           A32191
         AIF   ('&MCS' EQ '0').MP                                A32191
         DC    CL9'ONLINE'             ..                        A32191
XCTLMOD  EQU   *                                                 A32191
         DC    CL2'36'                 ..                        A32191
         DC    CL9'OFFLINE'            ..                        A32191
         DC    CL2'36'                 ..                        A32191
         DC    CL9'CONSOLE'            ..                        A32191
         DC    CL2'36'                 ..                        A32191
         AGO   .ASITWAS                                          A32191
.NONMP   AIF   ('&MCS' EQ '0').INIT1                             A32191
         DC    CL9'ONLINE'                 ..
XCTLMOD  EQU   *
         DC    CL2'33'                     ..
         DC    CL9'OFFLINE'                ..
         DC    CL2'33'                     ..
         DC    CL9'CONSOLE'                ..
         DC    CL2'33'                     ..
.ASITWAS ANOP                                                    A32191
         DC    CL9'HARDCPY'                ..
         DC    CL2'47'                     ..
         DC    CL9'MSTCONS'                ..
         DC    CL2'43'                     ..
.INIT2   AIF   ('&GFX' EQ '0').INIT3
         DC    CL9'ONGFX'                  ..
         DC    CL2'17'                     ..
         DC    CL9'OFFGFX'                 ..
         DC    CL2'17'                     ..
.INIT3   AIF   ('&APR' EQ '0').INIT4
         DC    CL9'PATH'                   ..
         DC    CL2'24'                     ..
.INIT4   AIF   ('&TP' EQ'0').INIT5                                20002
         DC    CL9'ONTP'                   ..                     20002
         DC    CL2'13'                     ..                     20002
         DC    CL9'OFFTP'                  ..                     20002
         DC    CL2'13'                     ..                     20002
.INIT5   ANOP
TABEND   EQU   *-LENG
***********************************************************************
         AGO   .XX
.INIT1   ANOP
         DC    CL9'ONLINE'                 ..
XCTLMOD  EQU   *
         DC    CL2'11'                     ..
         DC    CL9'OFFLINE'                ..
         DC    CL2'11'                     ..
         AGO   .INIT2
.MP      ANOP                                                    A32191
         DC    CL9'ONLINE'             ..                        A32191
XCTLMOD  EQU   *                                                 A32191
         DC    CL2'36'                 ..                        A32191
         DC    CL9'OFFLINE'            ..                        A32191
         DC    CL2'36'                 ..                        A32191
         AGO   .INIT2                                            A32191
.XX      ANOP
SETXSA   DSECT
         IEEXSA
         MEND
