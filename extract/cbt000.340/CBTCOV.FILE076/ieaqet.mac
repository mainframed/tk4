         MACRO
         IEAQET  &TIMESL,&TSO                                     20021
.*       IEAQET IS A NEW SYSGEN MACRO. IT PRODUCES CODE WHICH IS
.*       THE TYPE 1 SVC #  3 EXIT SERVICE ROUTINE. THE EXIT
.*       FUNCTION HAS BEEN DELETED FROM IEAQED02, AND IS NOW
.*       SUPPORTED BY MACRO/MODULE IEAQET00.  THIS CHANGE WAS DONE IN
.*       SUPPORT OF RELEASE # 16 TIME-SLICING.
.*20021
.*124800,125400,126600 .                                      AH A38869
.*81656                                                            STAA
.*3550175500,178000,180500,183000                                  1505
.*370500,396000,505500                                             I270
.*292805,316290,316300,316310,315320,316330,316340 .         AD  A56556
.*333600,333900 .                                            PD OS63088
.*382200,382500,382000,381000 .                              PD OS63452
         TITLE  '   SVC 3 ......EXIT MODULE  '
IGC003   START
         SPACE 3
CVTSECT  DSECT
         CVT                                                      20021
         EJECT
* LOW CORE EQUATES
SVCOPSW  EQU   32
PINPSW   EQU   104
SVCSAV   EQU   190                      SVC FLIH SAVE AREA
         TITLE '             EXIT MODULE EQUATES'
         IKJTCB                                                   20021
         EJECT                                                    20021
         IKJRB                                                    20021
         EJECT                                                    20021
         AIF   ('&TSO' NE '1').NOTSO1                             20021
         IKJECBS                                                  20021
         EJECT                                                    20021
         IKJTAXE                                                  20021
         EJECT                                                    20021
         IKJTJB                                                   20021
         EJECT                                                    20021
         IKJTJBX                                                  20021
         EJECT                                                    20021
         IKJTSCVT                                                 20021
         EJECT                                                    20021
         IKJTAIE                                                  20021
         EJECT                                                    20021
         IKJRCB                                                   20021
         EJECT                                                    20021
         IEZJSCB                                                  20021
         EJECT                                                    20021
.NOTSO1  ANOP                                                     20021
IQESECT  DSECT
* IQE DISPLACEMENT EQUATES.
RQELNK   DS    0H .                     RQE LINK FIELD.
IQELNK   DS    F .                      IEQ LINK FIELD.
RQEIOB   DS    0H .                     RQE IOB ADDRESS.
IQEPARM  DS    F .                      IQE PARAMETER.
IQEIRB   DS    F .                      ADDRESS OF IRB            20021
IQETCB   DS    F .                      ADDRESS OF TCB            20021
         SPACE 3
* CONTENTS DIRECTORY ENTRY (CDE)
CDESECT  DSECT
CDATTR   DS    C .                      ATTRIBUTE BYTE.
CDCHAIN  DS    3C .                     ADDR OF NEXT CDE.
CDROLL   DS    C .                      COUNT OF ROLL OUTS.
CDRBP    DS    3C .                     ADDR OF PRB.
CDNAME   DS    8C .                     NAME OF PROGRAM.
CDUSE    DS    C .                      USE/RESPONSIBILITY COUNT.
CDENTPT  DS    3C .                     RELOCATED ENTRY POINT ADDR.
CDATTR2  DS    C .                      ATTRIBUTE BYTE.
CDXLMJP  DS    3C
         SPACE 3
* CDE EQUATES
NIP      EQU   X'80'
NIC      EQU   X'40'
REN      EQU   X'20'
SER      EQU   X'10'
NFN      EQU   X'08'
MIN      EQU   X'04'
JPA      EQU   X'02'
NLR      EQU   X'01'
SPZ      EQU   X'80' .                  IND PGM IN SP ZERO        20008
REL      EQU   X'40'
         SPACE 2
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE2
         IHBTSCE
.NSLICE2 ANOP
         SPACE 3
IGC003   CSECT
         SPACE 3
* MISC EQUATES
XCTLSTAE EQU   X'80' .                  XCTL OPTION.               STAE
STPPROFF EQU   255-TCBSTPPR .                                     20021
SCBSTAI  EQU   X'20' .       SCB FLAG INDICATING STAI SCB         20021
FLAG     EQU   12 .          DISPLACEMENT FOR FLAG FLD IN SCB.    20021
XSCBCURR EQU   1 .           ADDRESS OF CURRENT SCB TO FREE.      20021
XSCBNEXT EQU   7 .           ADDRESS OF NEXT SCB.                 20021
ZERO     EQU   0 .                                                20021
XSPNOBYT EQU   0 .           SUBPOOL NUM AND LENGTH FOR FREEMAIN  20021
XRET     EQU   14 .                                               20021
XNTRY    EQU   15 .                                               20021
KEYZERO  EQU   X'F0' .       PROTECT KEY ZERO IN PSW.             20021
ONE      EQU   1 .                                                20021
X14      EQU   14 .                                               20021
         SPACE 2
* PIE DISPLACEMENT EQUATES.
PIEPSW   EQU   4 .                 OLD PSW SAVED IN PIE.
         SPACE
* LOAD LIST ELEMENT
LLCHAIN  EQU   1
LLRESPCT EQU   4
LLCDPTR  EQU   5
         SPACE
* EXTENT LIST
ELLNGTH  EQU   8
         SPACE
* TIMER QUEUE ELEMENT EQUATES.
TQEFLGS  EQU   0 .                      TQE FLAG BYTE.
TQESAADR EQU   24 .                     TQE PP SAVE AREA ADDR.
TQEECB   EQU   96                  @ OF ECB IN WAIT TYPE TQE   @PD64485
         SPACE
DEBDCBAD EQU   X'18' .                  DEB DCB OFFSET.
         EJECT
* REGISTER EQUATES.
X0       EQU   0
XLNGH    EQU   0
XNIQE    EQU   0
X1       EQU   1
XLOC     EQU   1
XIOB     EQU   2
XBSE     EQU   2
XDEB     EQU   XIOB+1
XCVT     EQU   3
XTCB     EQU   4
XRB      EQU   5
XIOBSE   EQU   5
XPIE     EQU   6
XIQE     EQU   6
XNRB     EQU   6
XNEW     EQU   7
XW       EQU   7
XWKA     EQU   7
X7       EQU   7
X8       EQU   8
XWKB     EQU   8
XWK      EQU   8
XNXA     EQU   8
XRE02    EQU   8
XEN02    EQU   9
X10      EQU   10
X11      EQU   11
XTOWAITR EQU   11 .                                           AH A57089
XNOWAITR EQU   12 .                                           AH A57089
XEN01    EQU   12
XEN03    EQU   12
XPSAV    EQU   13
XRETN    EQU   14
XEP      EQU   15
X15      EQU   15
RMSID    EQU   X'A0' .                  DISPL FOR FLAG               2K
RMSCODE  EQU   X'01' .                  TO TEST IF RMS IS CALLER
         SPACE
* CDEXIT REGISTERS.
XCDBSE   EQU   2
XCS03    EQU   7
XREUS    EQU   10
XCDEP    EQU   11
XCDE     EQU   11
XCT      EQU   13
XCDRETN  EQU   14
         SPACE
* CDHKEEP REGISTERS.
XHKRETN  EQU   13
         SPACE
* CDDESTRY REGISTERS
XXL      EQU   8
XCDWK    EQU   10
XDMRETN  EQU   12
         SPACE
         SPACE
* MAIN LINE EOT REGS.
XOCREP   EQU   6
         SPACE
* ORDER CD QUEUE REGISTERS.
XORWK    EQU   8
XODRETN  EQU   14
         SPACE
* MSS EOT REGISTERS
XSPQE    EQU   2
XMBSE    EQU   6
         SPACE
* EOT CLOSE
XCBSE    EQU   6
XWKC     EQU   9
         SPACE
         SPACE
* RELEASE LOADED PROGRAMS REGISTERS
XSUBSE   EQU   6
         SPACE
* EOT ERASE PHASE REGISTERS.
XSBSE    EQU   6
XRBSE    EQU   6
XDTCB    EQU   7
         SPACE 1
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE3
* REGISTER ASSIGNMENTS FOR TIME-SLICE PROCESSING
FSTREG   EQU   1 .                      FIRST TCB IN TIME-SLICE GROUP
NXTREG   EQU   1 .                      NEXT TCB IN TIME-SLICE GROUP
TSCEREG  EQU   3 .                      TIME-SLICE CONTROL ELEMENT
*                                       (TSCE) REGISTER
LSTREG   EQU   8 .                      LAST TCB IN TIME-SLICE GROUP
         SPACE 1
NEXTTSCE EQU   16 .                     DISPLACEMENT TO NEXT TSCE
.NSLICE3 ANOP
         SPACE 1
         SPACE
* PURGE TIMER REGISTERS.
XTMENTR  EQU   2
XTMBSE   EQU   6
         SPACE
* EOT POST REGS.
XOTCB    EQU   9
XRBSAV   EQU   12
         SPACE
         AIF   ('&TSO' NE '1').NOTSO2                             20021
         EJECT                                                    20021
*  EQUATES FOR TSO                                                20021
XJSCB    EQU   1 .                      ADDRESS OF JSCB           20021
XTJID    EQU   8 .                      TJID USED TO              20021
*                                       DETERMINE TJB ADDRESS     20021
XTSCVT   EQU   9 .                      ADDRESS TSCVT             20021
XWORK3   EQU   3 .                                                20021
XTJB     EQU   2 .                      ADDRESS TJB               20021
XTJBX    EQU   7 .                      ADDRESS TJBX              20021
WORD     EQU   4 .                                                20021
NONEWID  EQU   X'00' .                  NO NEW TJID               20021
XPECB    EQU   11 .                     ECB ADDR FOR POST         20021
XPTCB    EQU   12 .                     TCB ADDR FOR POST         20021
XSAVE    EQU   7 .                      SAVE REG FOR RETURN       20021
*                                       OF MAIN ROUTINE           20021
THREE    EQU   3 .                                                20021
XNXTCB   EQU   8 .                                                20021
XCODE    EQU   10 .                     ECB CODE USED BY POST.    20021
TSCCODE  EQU   X'02' .                  CODE FOR TSC ECB.         20021
XTCBNUM  EQU   10 .                     NUMBER USER TCBS.         20021
WORD16   EQU   64 .                                               20021
XFIRST   EQU   10 .                                               20021
BYTES7   EQU   7 .                                                20021
ZEROFL   EQU   X'00' .                  ZERO FLUSH LEVEL IN TJB   20021
HOLDOFF  EQU   255-TJBHOLD .            MASK TO TURN OFF HOLD FLG 20021
BYTES12  EQU   12 .                                               20021
XPOST    EQU   15 .                     ADDR OF POST BRANCH ENTRY 20021
XRCB     EQU   10 .                                               20021
XRCT     EQU   10 .                     ADDRESS OF RCT.           20021
XWORK    EQU   8 .                                                20021
XLINK    EQU   15 .                                               20021
XRETURN  EQU   14 .                                               20021
XTAXE    EQU   9 .                                                20021
XBASE    EQU   15 .               BASE FOR ATTENTION IRB EXIT     20021
XPREV    EQU   13 .                                               20021
XACTV    EQU   11 .                                               20021
XSTATUS  EQU   15 .                                               20021
XWTAXE   EQU   10 .                                               20021
XAIQE    EQU   8 .                                                20021
START    EQU   X'07' .                                            20021
XSTAX    EQU   12 .                                               20021
XENTRY   EQU   15 .                                               20021
XTAIE    EQU   1 .                                                20021
REQOFF   EQU   255-TAXEFREQ .                                     20021
XTCBSW   EQU   10 .                                               20021
XWKTXP   EQU   1 .                                                20021
XPBASE   EQU   6 .                      BASE FOR IEAKJTXP         20021
XGETTJB  EQU   10 .                     EP REG FOR GETTJB RTN     20021
ZEROATTN EQU   X'00' .                                            20021
IQEIRBA  EQU   8 .                      OFFSET TO IRB ADDRESS     20021
IQETCBA  EQU   12 .                     OFFSET TO TCB ADDRESS     20021
IQELINK  EQU   0 .                      OFFSET TO NEXT IQE ADDR   20021
         EJECT                                                    20021
.NOTSO2  ANOP                                                     20021
IQEQUE   EQU   6 .                      1ST IQE OFST FROM BEG AH A57089
         TITLE '             EXIT MODULE'
* MODULE USING STATEMENTS.
         USING CVTSECT,XCVT
         USING TCB,XTCB .                                         20021
         USING RBSECT,XRB
         USING IQESECT,XIQE
         USING CDESECT,XCDE
         SPACE 2
* ENTRY FROM SVC 3.
         BALR  XBSE,0
         USING EDBSE,XBSE
EDBSE    DS    0H .                     MODULE BASE ADDRESS.
         L     XWK,AIEATYP1 .           GET ADDR OF TYPE 1 SWITCH.
         MVI   0(XWK),0 .               SET TYPE 1 SWITCH OFF.
EDRELCM  NOP   EDRELCM1            NOP/UNCOND.                 @SA72278
         OI    EDRELCM+1,X'F0'     PASS THIS WAY ONLY ONCE     @SA72278
         LA    XWK,4               FIND RELEASEE LEVEL         @SA72278
         SR    XCVT,XWK            FROM CVT                    @SA72278
         CLC   0(4,XCVT),REL217                                @SA72278
         LA    XCVT,4(,XCVT)       RESTORE CVT POINTER         @SA72278
         BNL   EDRELCM1                                        @SA72278
*                                                              @SA72278
** FOR RELEASE 21.0-21.6                                       @SA72278
** (1) SVC 109 (AT LABEL ETPURGE) ELIMINATED                   @SA72278
** (2) TCB SIZE = X'D8'                                        @SA72278
*                                                              @SA72278
         OI    ETPURGE1+1,X'F0'    ELIMINATE SVC 109           @SA72278
         MVI   K216F253+3,X'D8'    TCB SIZE                    @SA72278
         B     EDRELCM1            SKIP ID                     @SA75035
         DC    C'US06016'          PTF LEVEL                   @SA75035
         DS    0H                  ALIGNMENT                   @SA75035
EDRELCM1 EQU   *                                               @SA72278
* IF EXIT IS FROM USER ERROR RTN., THE ADDR. IN SVCOPSW = PINPSW.
*        MODIFIED BY PTF NU00680 SO THAT PROGRAMS THAT MODIFY   NU00680
*        PROGRAM NEW PSW DO NOT SCREW UP EXIT'S TEST FOR RETURN NU00680
*        FROM A USER ERROR RTN.                                 NU00680
NU00680  BC    0,CHCKPSWA          ENTER THIS WAY ONLY ONCE     NU00680
         MVI   NU00680+1,X'F0'         CHANGE TO BRANCH ALWAYS  NU00680
         MVC   ORIGPSWA(3),PINPSW+5    SAVE PGM NEW PSW ADDR    NU00680
         B     CHCKPSWA            BRANCH AROUND PSW SAVE AREA  NU00680
ORIGPSWA DC    XL3'00'             WILL CONTAIN IPL PGM NEW PSW NU00680
         DS    0H                  ALIGNMENT                    NU00680
CHCKPSWA CLC   SVCOPSW+5(3),ORIGPSWA  IS EXIT FROM USER ERROR   NU00680
         BE    EDUX .                   BR IF YES.
*
* SAVE REGS ACCROSS SVC 10 AND SVC 1  TO MINIMIZE RES CODE    AH A57089
* IT IS ASSUMED THAT NO BR IS TAKEN OUT OF CODE FROM HERE TO  AH A57089
* TO 30 MIN WAIT CODE APARS 38869 AND 57089                   AH A57089
*
         STM   X0,X15,EXITSAVE .        SAVE REGS ACCRS WAIT  AH A49817
         TM    TCBFLGS,X'80' .          IS ABEND IS PROCESS.       STAE
         BO    BYSTAE .                 IF YES,BYPASS STAE PROCESSING
*      * LR    X11,X0 .                 SAVE GEN REG ZERO     AH A57089
*      * LR    XEN01,X1 .               SAVE GEN REG ONE      AH A57089
*      * LR    6,15 .                   SAVE REGISTER 15      AH A57089
         LA    XWKC,TCBNSTAE .          ADDRESS OF TCBNSTAE FIELD. STAE
STAELOOP L     XWKA,0(XWKC) .           ADDRESS OF SCB.            STAE
         LTR   XWKA,XWKA .              SCB PRESENT          AD   M2001
         BZ    NOSCB .                  NO, SKIP SCB PROCESSING   20021
         TM    FLAG(XWKA),SCBSTAI .     IS SCB A STAI SCB         20021
         BO    NXTSCB .                 YES, GET NEXT SCB    AD   M2001
         CLC   1(3,XTCB),13(XWKA) .     EXITING PGM          AD   M2001
*                                       ISSUE STAE .         AD   M2001
         BNE   NOSCB .                  NO, BRANCH.                STAE
         TM    12(XWKA),XCTLSTAE .      XCTL OPTION SPECIFIED.     STAE
         BO    NXTSCB .                 YES, GET NEXT SCB    AD   M2001
         LA    XLOC,0(XWKA) .           START LOC FOR FREEMAIN.    STAE
         MVC   0(4,XWKC),0(XWKA) .      UPDATE SCB ADDR PTR        STAE
         L     XLNGH,K16F255 .          LENGTH 16, SUB-POOL 255.  M0183
         L     8,ARMBRNCH ,             GET BR ENTRY TO FREEMAIN.  STAE
         BALR  14,8 .                   TO FREEMAIN OF SCB.        STAE
         B     STAELOOP .               BR TO CONTINUE SCB SEARCH. STAE
NXTSCB   LR    XWKC,XWKA .              UPDTE SEARCH SCB PTR AD   M2001
         B     STAELOOP .               BR TO CONTINUE SCB SEARCH. STAE
NOSCB    EQU   * .                                                 STAE
*      * LR    X0,X11 .                 RESTORE GEN REG ZERO  AH A57089
*      * LR    X1,XEN01 .               RESTORE GEN REG ONE   AH A57089
*      * LR    15,6 .                   RESTORE REGISTER 15   AH A57089
BYSTAE   EQU   * .                                                 STAE
*
* CHECK IF EVERY OTHER TCB IN THE JOBSTEP IS WAITING. IF SO   AH A38869
* WAIT HAS A HOOK TO Q THE 30 MIN REAL TQE                    AH A57089
*
         L     XCVT,CVTPTR .            ADDRESS THE CVT       AH A57089
         LA    XNOWAITR,BYPSWAIT .      NO WAIT IF FINISHED   AH A57089
         LA    XTCB,0(,XTCB) .          DROP POSSIBLE NOISE   AH A57089
         TM    RBSTAB2,RBTCBNXT .       Q. LAST RB ON Q       AH A57089
         BCR   1,XNOWAITR .             YES. CHECKED IN 'EOT' AH A57089
         L     XNRB,RBLINK .            GET NEXT RB           AH A38869
         DROP  XRB .                                          AH A38869
         USING RBSECT,XNRB .                                  AH A38869
         TM    RBSTAB,8 .               Q. RB WAITING ON ECB  AH  M4926
         BCR   8,XNOWAITR .             NO. NO 30 MIN WAIT    AH A38869
         DROP  XNRB .                                         AH A38869
         USING RBSECT,XRB .                                   AH A38869
         L     X8,AIEA0DS1 .  IF 3RD STAGE EXIT EFFECTOR      PDOS64911
         TM    1(X8),X'F0' .       HAS ENTRY, SKIP QUEUING OF PDOS64911
         BCR   7,XNOWAITR .        30 MIN WAIT TQE            PDOS64911
         TM    RBSTAB1,RBFTP       (S)IRB ?                    @SA75022
         BNM   EXTOWAIT            NO--GO QUEUE TQE            @SA75022
         L     X8,RBIQE            SEE IF ANOTHER              @SA75022
         LA    X8,0(,X8)           IQE TO BE                   @SA75022
         LTR   X8,X8               SCHEDULED FOR               @SA75022
         BZ    EXTOWAIT            THIS IRB.                   @SA75022
         L     X8,IQELNK-IQESECT(,X8) IF NOT,                  @SA75022
         LA    X8,0(,X8)           THEN QUEUE                  @SA75022
         LTR   X8,X8               TQE. OTHERWISE              @SA75022
         BCR   7,XNOWAITR          SKIP TQE ENQUEUE.           @SA75022
EXTOWAIT EQU   * .                 TAKE ENTRY INTO WAIT PGM   PDOS64911
         L     X8,WTJSTIME .       WHICH QUEUES 30-MIN WAIT   PDOS64911
         BALR  XRETN,X8 .          TQE TO INIT TCB IF ALL     PDOS64911
         L     XBSE,AEDBSE-*(,XRETN) . TCBS IN SVC WAIT       PDOS64911
*                                  (IMMEDIATE RETURN)         PDOS64911
BYPSWAIT EQU   * .                                            AH A38869
         LM    X0,X15,EXITSAVE .        RESTORE GENERAL REGS  AH A38869
*
* TEST EXITING RB TYPE. PRB=00, IRB=01, SIRB=10, SVRB=11.
         AIF   ('&TSO' NE '1').NODEFER                            20021
         TM    TCBFLGS1,TCBFA      ABEND IN PROGRESS           @SA72248
         BO    DEFERSKP            YES--BYPASS ATTN PROCESS    @SA72248
         LR    XEN01,XRB .              SAVE INPUT RB ADDRESS     20021
DEFRLOOP EQU   *                                                  20021
         TM    RBSTAB2,RBTCBNXT .       LAST RB ON QUEUE          20021
         BO    DEFEROFF .               YES, TURN OFF DEFER BIT   20021
         L     XRB,RBLINK .             GET PREVIOUS RB ADDRESS   20021
         TM    RBSTAB1,RBFTSVRB .       IS THIS AN SVRB           20021
         BO    DEFERLON .               YES, LEAVE ATTENTION BIT  20021
         BM    DEFRLOOP .               NO, AN (S)IRB GET NEXT RB 20021
         CLI   RBSIZE,X'12' .           Q. IS THIS AN SVRB ?  AH A50570
         BE    DEFERLON .               YES, DO NOT RESET BIT AH A50570
         TM    RBSTAB2,RBATTN .         IS THE ATTENTION BIT ON   20021
         BO    DEFERLON .               YES, DO NOT RESET BIT     20021
         B     DEFRLOOP .               CONTINUE TILL END OF CHAIN20021
DEFEROFF EQU   * .                                                20021
         NI    TCBTSFLG,255-TCBATT      TURN OFF ATTENTION        20021
DEFERLON EQU   *                                                  20021
         LR    XRB,XEN01                RESTOR SAVED REGISTER     20021
DEFERSKP EQU   *                                               @SA72248
.NODEFER ANOP                                                     20021
         TM    RBSTAB,X'C0' .           TEST RB TYPE.
         BC    4,EDIRB .                BR IF (S)IRB.
         L     XEN01,ATH .              LOAD ENTRY TO TRANS HANDLER
         BC    1,EDCM .                 BR IF SVRB EXITING
         L     XWK,AIEASCSV .           GET ADDR OF SVC SAVE AREA.
         MVC   TCBGRS(64),0(XWK) .      SAVE ALL REGS IN TCB.
         TM    RBSTAB+1,RBTCBNXT .      IS EXIT FROM LAST PRB.
         BO    EOT .                    BR IF YES.
         L     XNRB,RBLINK .            PICK UP PREV RB ADDR       RORI
         MVC   TCBGRS+56(4),20(XNRB) .  RESUME ADDR TO TCB REG 14  RORI
         LA    XEN01,CDEXIT .           LOAD ADDRESS OF CDEXIT (PRB'S).
EDCM     EQU   * .                                                20021
         CLI   RBSIZE,X'12' .           Q. IS THIS AN SVRB ?      M4255
         BNE   INITRB .                 NO, BR TO CONTINUE        M4255
         CLC   RBEXSAVE+40(5),ABEND .   Q. IS THIS THE ABEND RB   M4255
         BNE   INITRB .                 NO, BR TO CONTINUE        M4255
         MVI   RBEXSAVE+44,C'*' .       YES, OVERLAY D IN ABEND   M4255
INITRB   EQU   * .                                                M4255
         AIF   ('&TSO' EQ '1').NOTSO3                             20021
         TM    TCBFLGS1,TCBFA      ABEND IN PROGREESS          @SA72248
         BO    EDTR                YES--BYPASS ATTN ROUTINE    @SA72248
         LR    XNRB,XRB .               INITIALIZE TO CURRENT RB  20021
         DROP  XRB .                                              20021
         USING RBSECT,XNRB .                                      20021
EDNXT    EQU   * .                                                20021
*                                                                 20021
*  FOR EXIT LAST SVRB RESET PREVENT TERMINAL ATTN EXITS IN TCB    20021
*                                                                 20021
         TM    RBSTAB2,RBTCBNXT .       IS TCB NEXT               20021
         BO    EDATTNR .                YES,RESET PREVENT ATTEN   20021
         L     XNRB,RBLINK .            GET  NXT RB               20021
         TM    RBSTAB1,RBFTSVRB .       IS NEXT RB A SVRB         20021
         BO    EDTR .                   YES, NO RESET OF PREV ATN 20021
         BM    EDNXT .  .               NO, AN (S)IRB GET NXT AH A50570
         CLI   RBSIZE,X'12' .           Q. IS THIS AN SVRB ?  AH A50570
         BE    EDTR .                   YES, DO NOT RESET BIT AH A50570
         B     EDNXT .                  NO,GET NEXT RB            20021
EDATTNR  EQU   * .                                                20021
         NI    TCBTSFLG,255-TCBATT .    RESET PREVENT ATTN FLAG   20021
         DROP  XNRB .                                             20021
.NOTSO3  ANOP                                                     20021
         USING IQESECT,XIQE .                                     20021
         USING RBSECT,XRB .                                       20021
* IF TAH ENTERED, 0,1,&15 ARE AS WHEN SVC RTN EXITED              20021
EDTR     EQU   * .                                                20021
         BALR  XRETN,XEN01 .            TO T.A.H. OR CDEXIT       20021
         BALR  XRETN,0
         USING *,XRETN
         L     XBSE,AEDBSE .            SET UP ADDRESSABILITY
         DROP  XRETN
* CHECK IF TASK SWITCH IS NECESSARY DUE TO WAITING RB.
EDTNX    TM    RBSTAB+1,RBTCBNXT .      IS TCB NEXT (POSSIBLE IF
*                                       IN ABEND STATUS) .
         BO    EDABSPL .                BR IF YES
         TM    TCBTSFLG,TCBSTPPR .      IS TCB TO BE STOPPED      20021
         BZ    EDWT .                   NO, SKIP SET NONDISPATBL  20021
         AIF   ('&TSO' NE '1').DEFER1                             20021
         TM    TCBTSFLG,TCBATT .        IS THE ATTENTION BIT SET  20021
         BO    EDWT .                   YES, SKIP SET NONDISP.    20021
.DEFER1  ANOP                                                     20021
*                                                                 20021
*   TEST FOR ABEND STATUS BEFORE SET NON-DISPATCHABLE             20021
*                                                                 20021
         TM    TCBFLGS1,TCBFA .         IS TASK ABENDING          20021
         BO    NOSTOP .                 YES- BYPASS STOPPING      20021
         TM    TCBFLGS3,TCBABTRM .      IS TASK BEING ABTERMED    20021
         BO    NOSTOP .                 YES- BYPASS STOP          20021
         TM    TCBNSTAE,TCBSTABE .      IS TASK IN STAE EXIT      20021
         BZ    CONTSTOP .               NO-CONT STOP PROCESS      20021
NOSTOP   EQU   * .                                                20021
         NI    TCBTSFLG,STPPROFF .      TURN OFF TCBSTPPR FLAG    20021
         B     EDWT .                   CONTINUE EXIT PROCESS     20021
CONTSTOP EQU   * .                                                20021
         L     XNRB,RBLINK .            GET ADDR NXT RB ON CHAIN  20021
         DROP  XRB .                                              20021
         USING RBSECT,XNRB .                                      20021
EDCKNXRB EQU   * .                                                20021
         TM    RBSTAB1,RBFTSVRB .       NEXT RB A SVRB            20021
         BO    EDWT .                   YES, DO NOT STOP TCB      20021
         TM    RBSTAB2,RBATTN .         IS IT AN ATTENTION RB     20021
         BO    SETSTOP .                YES-SET NONDISPATCHABLE   20021
         TM    RBOPSW+1,KEYZERO .       DOES RB HAVE PROT KEY=0   20021
         BZ    EDWT .                   YES-SKIP RESET NONDISPAT  20021
         TM    RBSTAB2,RBTCBNXT .       IS THIS LAST RB ON QUEUE  20021
         BNZ   SETSTOP .                YES- BR TO STOP           20021
         L     XNRB,RBLINK .            NO- ADR OF NEXT RB        20021
         B     EDCKNXRB .               BRANCH TO CHECK NXT RB    20021
         DROP  XNRB .                                             20021
         USING RBSECT,XRB .                                       20021
         USING IQESECT,XIQE .                                     20021
SETSTOP  EQU   * .                                                20021
         OI    TCBFLGS5,TCBPNDSP .      TURN ON SECOND NONDISP BIT20021
         OI    TCBNDSP2,TCBSTPP .       SET TASK NONDISPATCHABLE  20021
         NI    TCBTSFLG,STPPROFF .      RESET STOP FLAG           20021
         B     EDSW .                   CAUSE A TASK SWITCH       20021
EDWT     EQU   * .                                                20021
         L     XNRB,RBLINK .            ADDR OF NEXT RB ON CHAIN  20021
         TM    RBWCF-RBSECT(XNRB),X'FF' .IS NEXT RB WAITING
         BZ    EDACT .                  BR IF NOT.
* NEXT RB LEVEL IS WAITING. FORCE TASK SWITCH IF NOT ALREADY INDICATED.
EDSW     L     XNEW,CVTTCBP .           GET 'NEW' POINTER.
         C     XTCB,0(0,XNEW) .         IS 'NEW' = CURRENT TCB.
         BNE   EDACT .                  BR IF NOT.
         SR    XWK,XWK .                ZERO WORK REG.
         ST    XWK,0(0,XNEW) .          ZERO 'NEW' TO FORCE TASK SWTCH.
* DEACTIVATE AND DEQUEUE RB.
EDACT    NI    RBSTAB+1,255-RBFACTV .   SET RB INACTIVE.
         MVC   TCBRBP+1(3),RBLINK+1 .   DEQUEUE EXITING RB .
* FREE CORE IF RB FLAGGED AS DYNAMIC.
* SET REG 12 TO EXIT TO TRANSIENT AREA REFRESH RTN.
* RETURN IS TO DISPATCHER AFTER REFRESH.
         L     12,ATAR .                GET T/A REFRESH ADDR. AH A57089
         TM    RBSTAB+1,RBFDYN .        CAN RB BE FREED.
         BCR   8,12 .                   BR IF NOT TO REFRESH. AH A57089
         TM    RBSTAB,X'C0' .           IS AN IRB EXITING.
         BC    9,EDFRB .                BR IF NOT.
         CLI   RBIQE,0 .                IS IRB USE CT = 0.
         BCR   7,12 .                   BR IF NOT TO REFRESH. AH A57089
*                                       FREE IRB.
* FREE P.P. REG SAVE AREA ASSOCIATED WITH IRB.
         L     XLOC,RBPPSAV .           GET ADDRESS OF AREA.
         LA    XLOC,0(0,XLOC) .         CLEAR HI ORDER BYTE.
         LTR   XLOC,XLOC .              IS ADDRESS PRESENT.
         BZ    EDFIRB .                 BR IF NOT.
         L     XLNGH,K72F250 .          SET FREEMAIN PARAMETER.
         BAL   XRETN,FREEMAIN .         CONDITIONALLY S/A     AH  M1545
EDFIRB   DS    0H
         LH    XLNGH,RBSIZE-1 .         SET IRB LENGTH FOR FREEMAIN.
         B     EDFREEX
* FREE RB CORE.
EDFRB    DS    0H
         SR    XLNGH,XLNGH .            ZERO REG.
         IC    XLNGH,RBSIZE .           GET RB LENGTH.
EDFREEX  DS    0H
         LR    XLOC,XRB .               SET START LOC FOR FREEMAIN.
         SLL   XLNGH,3 .                DEVELOP BYTES (FROM DBL WDS).
         O     XLNGH,K255 .             SET SUB-POOL TO 255 FOR P/SVRB.
         TM    RBSTAB,X'C0' .           IS IRB EXITING.
         BC    9,EDFREE .               BR IF NOT.
         N     XLNGH,K253CMP .          SET SUB-POOL TO 253 FOR IRB.
         AIF   ('&TSO' NE '1').NOTSP43                         @SA70798
         L     8,AGOVRFLB          GOVERFLB                    @SA70798
         L     8,0(,8)             END OF SQA                  @SA70798
         LA    8,0(,8)             CLEAR FLAG                  @SA70798
         CR    XLOC,8              IF XLOC HIGH                @SA70798
         BNL   EDFREE              THEN LSQA                   @SA70798
         X     XLNGH,K243N253      ELSE SQA                    @SA70798
.NOTSP43 ANOP                                                  @SA70798
EDFREE   L     8,ARMBRNCH .             GET BR ENTRY TO FREEMAIN.
         BALR  14,8 .                   TO FREEMAIN FOR RB.
         SPACE
         SPACE
*
* CODE FOR 30 MINUTE TQE WAS MOVED FROM HERE TO AN EARLIER    AH A57089
* POINT IN THE MODULE. .                                      AH A57089
*
         L     12,ATAR .
         BR    12 .                     TO T/A REFRESH.
         SPACE 4
* SPECIAL HANDLING FOR REMOVING ABENDED TCB FROM READY QUEUE.
EDABSPL  DS    0H
         L     XRETN,ADQTCB        REMOVE TCB FROM             @SA75035
         BALR  XRETN,XRETN         READY QUEUE                 @SA75035
         OI    TCBFLGS+4,TCBFC .        SET TERMINATION FLAG.
         B     EDSW
         TITLE '                     USER EXIT PROCESSING'
* THIS ROUTINE IS ENTERED UPON RETURN FROM A USER EXIT ROUTINE.
EDUX     DS    0H
         L     XPIE,TCBPIE .            GET PIE PTR FROM TCB.
         NI    0(XPIE),X'7F' .          RESET 1ST TIME LOGIC SWITCH.
         LM    XW,XW+5,PIEPSW+4(XPIE) . GET RH SAVED PSW AND REGS 14-2.
         ST    XW,RBOPSW+4 .            SET RH PSW IN CURRENT RB.
         STM   XW+1,XW+2,TCBGRS+56 .    STORE REGS 14 AND 15 IN TCB.
         STM   XW+3,XW+5,TCBGRS .       STORE REGS 0,1, AND 2 IN TCB.
         L     XRETN,AIEASCSV .         GET ADDRESS OF SVC SAVE AREA
         MVC   TCBGRS+12(44),12(XRETN) .MOVE REGS 3-13 FROM
*                                       SAVE AREA TO TCB
         MVC   RBOPSW(2),SVCOPSW .      SET LH PSW IN CURRENT RB.
         L     XRETN,CVT0DS .           GET ADDR OF DISPATCHER.
         BR    XRETN .                  BR TO DISPATCHER.
         TITLE '             (S)IRB PROCESSING'
EDIRB    DS    0H
         AIF   ('&TSO' NE '1').NOTSO4                             20021
         TM    RBSTAB2,RBATTN .         IS ATTENTION IRB EXITING  20021
         BZ    SKIPATTN .               NO,SKIP ATTN IRB PROCESS  20021
         L     XLINK,ATTNEXIT .         ADR ATTENTION IRB EXIT RTN20021
         BALR  XRETURN,XLINK .          BRANCH TO RTN             20021
SKIPATTN EQU   * .                                                20021
.NOTSO4  ANOP                                                     20021
         TM    RBSTAB+1,X'0C' .         TEST IQE TYPE.
         BZ    EDTNX .                  BR IF IQE NOT TO BE RETURNED.
         L     XIQE,RBIQE .             GET IQE FROM RB.
         LA    XIQE,0(XIQE) .           CLEAR HI ORDER BYTE       20472
         BO    EDIQE .                  BR IF IQE TO BE RETURNED   RORI
         TM    RBSTAB+1,X'08' .         TEST IF IQE                RORI
         BZ    EDRQE .                  BR IF RQE TO BE RETURNED   RORI
         L     XNIQE,0(XIQE) .          IQE NOT TO BE RETURNED     RORI
         TM    RBSTAB+1,X'10' .         IS IT AN USER IQE          1505
         BO    EDIQE .                  BR IF YES.                 1505
         B     EDIND .                  PREPARE TO FREE IRB
EDIQE    SR    X1,X1 .                  ZERO REGISTER
         IC    X1,RBIQE .               PICK UP IRB USE COUNT.
         LTR   X1,X1 .                  IS CT = 0.
         BZ    *+6 .                    BR IF YES.
         BCTR  X1,0 .                   DECREMENT IRB USE COUNT.
         L     XNIQE,IQELNK .           GET LINK FIELD FROM EXIT'G IQE
         LR    X7,XNIQE .               SAVE IQE ADDRESS.          1505
         ST    XNIQE,RBIQE .            UPDATE RB IQE LINK FIELD.
         STC   X1,RBIQE .               STORE IRB USE COUNT.
         LH    X1,RBSIZE-1 .            GET IRB SIZE.
         CL    X1,K13 .                 IS WORK AREA PRESENT.
         BL    FRIQE .                  BR IF NOT.                 1505
         L     XNXA,RBNEXAV .           GET NEXT AVAILABLE PTR.
         ST    XNXA,IQELNK .            LINK NEXT AVL TO RETURNING IQE.
         ST    XIQE,RBNEXAV .           RETURN IQE TO NEXT AVAILABLE.
         B     EDRES .                                             1505
FRIQE    EQU   *                                                   1505
         TM    RBSTAB+1,X'10' .         IS IQE TO BE FREED.        1505
         BZ    EDRES .                  BR IF NOT.                 1505
         LR    XLOC,XIQE .              LOAD FREEMAIN              1505
         L     XLNGH,K16F253 .          PARAMETERS.                1505
         LA    XLOC,0(XLOC) .           CLEAR HIGH ORDER BYTE.     1505
         L     8,ARMBRNCH .             GET BR ENTRY TO FREEMAIN.  1505
         BALR  14,8 .                   BR TO FREEMAIN             1505
EDRES    DS    0H
         LTR   X1,X7 .                  IS THERE A QUEUED REQUEST. 1505
         BZ    EDIND .                  BR IF NOT.
         L     X1,IQEPARM-IQESECT(0,X1) .SET REG1 FOR REENTRY
         B     EDREN .                  TO INITIALIZE FOR REENTRY.
         SPACE
* EXIT FROM RQE SCHEDULED A.E.R.
EDRQE    DS    0H
         LH    X0,RQELNK .              GET LINK FIELD FROM EXIT'G RQE.
         STH   X0,RBIQE+2 .             UPDATE RB IQE LINK FIELD.
         L     XIOBSE,K4096 .           SET-UP IOS BASE REG.
         L     XEN02,AINT025 .          GET IOS ENTRY ADDRESS.
         LM    XIOB,XDEB,RQEIOB .       SET-UP FOR IOS INTERFACE.
         LR    X1,XIQE .                SET-UP 16* ADDR FOR IOS.
         BALR  XRE02,XEN02 .            TO IOS RTN TO RETURN RQE'S.
* NOTE- REGS 0,4, AND 6 ARE ASSUMED TRANSPARENT OVER IOS ROUTE.
         USING *,XRE02 .
         L     XBSE,AEDBSE .            REESTABLISH ADDRESSABILITY.
         DROP  XRE02
* REESTABLISH REGISTER VALUES.
         L     XCVT,16 .                CVT PTR.
         L     XRB,TCBRBP .             RB PTR.
         LTR   X0,X0 .                  IS THERE A QUEUED REQUEST.
         BC    7,EDSR1 .                BR IF YES.
* PREPARE TO FREE IRB.
EDIND    DS    0H
         MVC   TCBGRS(64),RBGRSAVE .    MOVE REGS FROM IRB TO TCB.
         B     EDTNX .                  RETURN TO COMMON CODE.
         SPACE
EDSR1    LR    X1,X0 .                  SET REG 1 FOR REENTRY.
* REEINTIALIZE REGS AND IRB FOR REENTRY.
EDREN    L     XPSAV,RBPPSAV .          SET-UP PP SAVE ADDR.
         LA    XPSAV,0(0,XPSAV) .       CLEAR HI-ORDER BYTE.
         LA    XRETN,CVTEXIT .          SET-UP RETURN REG.
         L     XEP,RBEP .               SET-UP ENTRY POINT REG.
         ST    XEP,RBOPSW+4 .           INITIALIZE EP IN IRB OPSW.
         STM   0,1,TCBGRS .             STORE REGS IN TCB.
         STM   13,15,TCBGRS+52 .
         L     XEN03,CVT0DS .           GET ADDR OF DISPATCHER.
         BR    XEN03 .                  TO DISPATCHER.
         AIF   ('&TSO' NE '1').NOTSO5
     TITLE  '    ATTENTION IRB PROCESSING'                        20021
*                                                                 20021
*  EXIT OF IRB FOR TERMINAL ATTENTION EXIT                        20021
*                                                                 20021
         DS    0H                                                 20021
IKJATTNX EQU   *                                                  20021
         USING *,XBASE .                                          20021
         STM   X0,X15,EXITSAVE .        SAVE CALLER REGS          20021
*                                                                 20021
*  TEST IS TASK IN ABEND, ABTERM OR STAE EXIT                     20021
*  IF SO JUST FREE TAIE                                           20021
*                                                                 20021
         L     XGETTJB,TJBGET .         ADR OF RTN TO GET TJB ADR 20021
         BALR  XRETURN,XGETTJB .        BRANCH TO GETTJB          20021
         USING TJBX,XTJBX .                                       20021
         USING TSCVT,XTSCVT .                                     20021
         USING TJB,XTJB .                                         20021
         L     XTAXE,TJBXTAXE .         ADR FIRST TAXE FROM TJBX. 20021
         LA    XPREV,TJBXTAXE .         SAVE ADR LINK FIELD.      20021
         SR    XACTV,XACTV .            ZERO REG FOR ACTIVE TAXE  20021
         USING RBSECT,XTAXE .                                     20021
TSTEST   EQU   * .                                                20021
         LA    XTAXE,0(XTAXE) .         CLEAR OUT HIGH BYTE       M1268
         LTR   XTAXE,XTAXE .            Q. END OF TJBXTAXE        M1268
         BZ    FREETAIE .               YES, NO MATCH- FREE TAIE  M1268
         TM    RBSTAB2,RBFACTV .        THIS TAXE OR IRB ACTIVE.  20021
         BZ    GETNXT .                 NO, GET NEXT TAXE         20021
         DROP  XTAXE .                                            20021
         USING TAXE,XTAXE .                                       20021
         CR    XTAXE,XRB .              ACT IRB, SAME IRB EXITING.20021
         BE    TSOCURNT .               YES, CURR IRB ONE EXITING.20021
         LR    XACTV,XTAXE .            SVE ADR OF ACTIVE TAXE.   20021
GETNXT   EQU   * .                                                20021
         LA    XPREV,TAXELNK .          SVE ADR PREVIOUS LNK FIELD20021
         L     XTAXE,TAXELNK .          ADDRESS OF NEXT TAXE      20021
         B     TSTEST .                 TEST NEXT TAXE            20021
         DROP  XTAXE .                                            20021
TSOCURNT EQU   * .                                                20021
         USING RBSECT,XTAXE .                                     20021
         TM    RBSTAB2,RBFDYN .         IS DYNAMIC FLAG ON IN     20021
*                                        CURRENT IRB INDICATING   20021
*                                        TAXE TO BE CANCELLED     20021
         BZ    SKPDEQ .                 NO, SKIP DEQUEUEING TAXE. 20021
         DROP  XTAXE .                                            20021
         USING TAXE,XTAXE .                                       20021
         MVC   ZERO(WORD,XPREV),TAXELNK .DEQUEUE EXITING TAXE.    20021
*                                        WITH CANCEL SPECIFIED.   20021
SKPDEQ   EQU   * .                                                20021
         BAL   X10,RESTART .            RESET STOPS FOR SUBTSKS   20021
*                                        OF EXITING IRB TCB       20021
         SR    XSTAX,XSTAX .            CLEAR STAX COUNT REG      20021
         IC    XSTAX,TJBSTAX .          CURR STAX COUNT FROM TJB  20021
         L     XWTAXE,TJBXTAXE .        ADR FIRST TAXE ON QUEUE   20021
         DROP  XTAXE .                                            20021
         USING TAXE,XWTAXE .                                      20021
TESTNEXT EQU   * .                                                20021
         LTR   XWTAXE,XWTAXE .          LAST TAXE                 20021
         BZ    CKACTV .                 YES, BR TO CHECK ACTIVE   20021
*                                       TAXE OTHER TH EXITING ONE 20021
         TM    TAXESTAT,TAXEFREQ .      Q. IS TAXE AVAILABLE? AI A45359
         BZ    CHKCURNT .               YES. SKIP RESET       AI A45359
         NI    TAXESTAT,REQOFF .        MAKE TAXE AVAILABLE       20021
         LA    XSTAX,ONE(XSTAX) .       INCREMENT STAX COUNT      20021
CHKCURNT EQU   * .                                            AI A45359
         CR    XWTAXE,XRB .             Q. IS THIS TAXE EXITING?  M4058
         BE    CKACTV .                 YES, NOW CHECK            20021
*                                       OTHER ACTIVE TAXES        20021
         L     XWTAXE,TAXELNK .         ADDR NEXT TAXE ON QUEUE   20021
         B     TESTNEXT .               TEST THIS TAXE            20021
*                                       FOR EXITING ONE           20021
CKACTV   EQU   * .                                                20021
         LTR   XACTV,XACTV .            ANY OTHER ACT TAXES FOUND 20021
         BNZ   ACTVFND .                YES- BRANCH TO PROCESS    20021
         DROP  XWTAXE .                                           20021
         USING TAXE,XTAXE .                                       20021
         L     XACTV,TAXELNK .          ADR FIRST TAXE AFTER ONE  20021
*                                       THAT IS EXITING           20021
         LTR   XACTV,XACTV .            ANY MORE TAXES            20021
         BZ    STCOUNT .                NO, BR TO ST STAX COUNT   20021
         DROP  XTAXE .                                            20021
         DROP  XCDE .                   DROP ADDRESSABILITY OF CDE20021
         USING TAXE,XACTV .                                       20021
         TM    TAXESTAT,TAXEFREQ .      IS THE TAXE REQUESTED     20021
*                                       INDICAT AN ACT TAXE ON Q  20021
         BZ    STCOUNT .                NO, NO MORE ACTIVE TAXES  20021
         DROP  XACTV .                                            20021
         USING TAXE,XWTAXE .                                      20021
ACTVFND  EQU   * .                                                20021
         L     XWTAXE,TJBXTAXE .        ADR FIRST TAXE ON QUEUE   20021
CONTACTV EQU   * .                                                20021
         LTR   XWTAXE,XWTAXE .          LAST TAXE ON QUEUE        20021
         BZ    ACTV .                   YES, PROCESS LAST TAXE    20021
         CR    XACTV,XWTAXE .           NO, IS IT THE ACTIVE TAXE 20021
         BE    ACTV .                   YES, PROCESS LAST ONE     20021
         OI    TAXESTAT,TAXEFREQ .      MAKE TAXE UNAVAILABLE     20021
         BCTR  XSTAX,X0 .               DECREMETN STAX COUNT      20021
         L     XWTAXE,TAXELNK .         ADDR NEXT TAXE ON QUEUE   20021
         B     CONTACTV .               CONT ACTIVE TAXE SEARCH   20021
         DROP  XWTAXE .                                           20021
         USING TAXE,XACTV .                                       20021
ACTV     EQU   * .                                                20021
         L     XTCBSW,TAXETCB .         GET CORRESPONDING TCB AH A43824
         TM    TAXESTAT,TAXEFREQ .      IS THE ACT TAXE UNAVAIL   20021
         BO    TASKSW .                 YES, NOW DO A TASK SWITCH 20021
         OI    TAXESTAT,TAXEFREQ .      MAKE ACTIVE TAXE UNAVAIL  20021
         BCTR  XSTAX,X0 .               DECREMENT STAX COUNT      20021
TASKSW   EQU   * .                                                20021
         LR    XWORK3,XBASE .           SAVE BASE OVER TASK SW    20021
         L     XENTRY,SCVTTASW .        ENTRY POINT OF TASK SW    20021
         BALR  XRETURN,XENTRY .         BRANCH TO TASK SWITCH RTN 20021
         LR    XBASE,XWORK3 .           RESTORE BASE REGISTER     20021
STCOUNT  EQU   * .                                                20021
         STC   XSTAX,TJBSTAX .          STORE CURR COUNT OF STAX  20021
         DROP  XACTV .                                            20021
         USING CDESECT,XCDE .           SET UP ADDRESSAB FOR CDE  20021
         USING TAXE,XRB .                                         20021
         L     XTAIE,TAXETAIE .         ADDRESS OF TAIE           20021
         LTR   XTAIE,XTAIE .            IS THERE A TAIE           20021
         BZ    DONE .                   NO, PROCESSING COMPLETE   20021
         NI    TAXESTAT,REQOFF .        TURN OFF REQUESTED FLAG   20021
         DROP  XRB .                                              20021
         LR    XWORK,XRB .              ADDR.CURRENT RB           M3482
         USING TAIE,XTAIE .             ADDRESSIBILITY ON TAIE    M3482
         USING TAXE,XRB .               ADDRESSIBILITY ON TAXE    M3482
CKRB     EQU   * .                                                M3482
         LA    XWORK,0(,XWORK) .        CLEAR HI BYTE             M3482
         C     XWORK,TIQEPARM .         IS THE CURRENT RB THE     M3482
*                                        ONE WHOSE REGS WERE IN   M3482
*                                        THE TAIE WHICH WAS       M3482
*                                        MOVED FROM?              M3482
         BE    TAIEPROC .                YES. USE TAIE TO RESTORE M3482
*                                         REGS TO IRB             M3482
         USING RBSECT,XWORK .            ADDR ON CURRENT RB CHECK M3482
         L     XWORK,RBLINK .            ADDR NEXT RB ON CHAIN    M3482
         B     CKRB .                    NOW CHECK NEXT RB        M3482
TAIEPROC EQU   *
         MVC   RBGRSAVE(WORD16),TAIERSAV MOVE INTERRUPTED REGS    M3482
*                                         FROM TAIE BACK TO IRB   M3482
         L     XWORK,RBLINK .            ADDR OF PRB OR ATTN IRB  M3482
*                                         AFTER IRB               M3482
         MVC   RBOPSW+4(WORD),TAIEIAD .  MOVE RIGHT HALF PSW      M3482
*                                         FROM TAIE BACK TO PRB   M3482
*                                         OR ATENTION IRB         M3482
         ST    XRB,TIQEPARM .             RESTORE IQE PARM FLD IN M3482
*                                          TAXE RO POINT TO TAXE  M3482
         DROP  XWORK .                                            20021
         DROP  XTAIE .                                            20021
         USING TAXE,XRB .                                         20021
FREETAIE EQU   * .                                                20021
         L     XTAIE,TAXETAIE .         ADDRESS OF TAIE           20021
         LTR   XTAIE,XTAIE .            IS THERE A TAIE           20021
         BZ    DONE .                   NO, BYPASS FREEING        20021
         XC    TAXETAIE+1(3),TAXETAIE+1 . ZERO TAIE PTR           M3525
         DROP  XRB .                                              20021
         USING RBSECT,XRB .                                       20021
         L     X0,K72F250 .             LENGTH OF TAIE AND SP 250 20021
         LR    XWORK3,XBASE .           SAVE BASE OVER FREEMAIN   20021
         BAL   XRETN,FREEMAIN .         CONDITIONALLY TAIE    AH  M1545
         LR    XBASE,XWORK3 .           RESTORE BASE REGISTER     20021
DONE     EQU   * .                                                20021
         LM    X0,X15,EXITSAVE .        RESTORE CALLER REGISTERS  20021
         BR    XRETURN .                RETURN TO CALLER          20021
RESTART  EQU   * .                                                20021
         LA    X0,START .               CODE FOR STARTING TCBS    20021
         SR    X1,X1 .                  ZERO REG 1 TO             20021
*                                       INDICATE NO TCB ADDRESS   20021
         LR    XWORK3,XBASE .           SAVE BASE OVER STATUS     20021
         L     XSTATUS,ENTRYSET .       BRANCH ENTRY TO STATUS    20021
         BALR  XRETURN,XSTATUS .        BRANCH TO STATUS          20021
         LR    XBASE,XWORK3 .           RESTORE BASE REGISTER     20021
         BR    X10 .                    RETURN TO CALLER          20021
         DROP  XBASE .                                            20021
         TITLE '  OBTAIN TIME SHARING JOB BLOCK ADDRESS'          20021
         DS    0H .                                               20021
GETTJB   EQU   *                                                  20021
         USING *,XGETTJB .                                        20021
         USING TCB,XTCB .                                         20021
         L     XJSCB,TCBJSCB .          ADDR OF JSCB              20021
         USING IEZJSCB,XJSCB .                                    20021
         LH    XTJID,JSCBTJID .         TJID FROM JSCB            20021
         DROP  XJSCB .                                            20021
         L     XTSCVT,CVTTSCVT .        ADDR TSCVT                20021
         USING TSCVT,XTSCVT .                                     20021
         LR    XTJB,XTJID .                                       20021
         MH    XTJB,TSCVTSZU .          COMPUTE ADR OF TJB FOR    20021
         A     XTJB,TSCVTTJB .          THIS TJID BY ADDING THE   20021
*                                       PROD OF TJID AND TJB SIZE 20021
*                                       TO ADR OF TJB INDEX TABLE 20021
         USING TJB,XTJB .                                         20021
         L     XTJBX,TJBEXTNT .         ADR OF TJB EXTENS - TJBX  20021
         BR    XRETURN .                RETURN TO CALLER          20021
         DROP  XTJB .                                             20021
         DROP  XGETTJB .                                          20021
         DROP  XTSCVT .                                           20021
.NOTSO5        ANOP                                               20021
         TITLE '        EXIT MODULE - CDEXIT'
* CDEXIT
         ENTRY CDEXIT
CDEXIT   DS    0F
         BALR  XCDBSE,0
         USING CDXBSE,XCDBSE
         USING RBSECT,XRB
CDXBSE   DS    0H
         L     XCDE,RBCDE .             GET CDE ADDR.
         LA    XCDE,0(0,XCDE) .         CLEAR HI ORDER BYTE.
         LTR   XCDE,XCDE .              DOES PRB HAVE CDE.
         BCR   8,XCDRETN .              RETURN TO CALLER IF NOT.
         TM    RBSTAB,X'C0'              PRB                   @YA78441
         BCR   7,XCDRETN              NO                       @YA78441
*
********  AH 39386******AND******  AH 39970******806 AFTER STAE*******
* THE FOLLOWING CODE IS INCLUDED BECAUSE EXIT FAILS TO PROPERLY
* REINITIALIZE THE REST OF THE WAITING SVRB'S, IF ANY, IN THE CASE
* OF 806 ABEND AFTER THE STAE RETRY ROUTINE EXITS. THIS CODE IS
* INTENDED TO REINITIALIZE ANY OTHER WAITING SVRB SO AS TO REISSUE
* THE REQUEST FOR A VALID 806 ( IF LOAD INVALID ) OR POSSIBLE
* SUCCESSFUL LOAD AFTER I/O ERROR.
********  AH 39386******AND******  AH 39970******806 AFTER STAE*******
         TM    CDATTR,MIN          POINT TO                    @SA70930
         BZ    *+12                MAJOR                       @SA70930
         L     XCDE,CDXLMJP-1      CDE                         @SA70930
         LA    XCDE,0(,XCDE)       CLEAR FLAGS                 @SA70930
         TM    CDATTR,NIC          MODULE IN CORE ?            @SA70930
         BZ    MODNCORE            YES--SEE IF REUS/RENT       @SA70930
         LR    XREUS,XRB .             GET THE NEXT SVRB ON WAIT LIST
         B     WTFSTNTY .              PROCESS EXITING PRB
NXTWTNG  EQU   *
         DROP XRB .
         USING RBSECT,XREUS .
         MVI   RBWCF,0 .               CLEAR WAIT COUNT/SET SVRB READY
         MVC   RBOPSW+4(4),CDQCNTRL .  RETRY REQUEST          AH  M2072
         LR    XWKB,XREUS .            SAVE CURR SUBJECT WAIT RB
NXTRBSWT EQU   *
         TM    RBSTAB2,RBTCBNXT .      Q. DOES THIS RB POINT TO TCB
         L     XREUS,RBLINK .          GET TCB/PREVIOUS RB
         BZ    NXTRBSWT .              NO. GET NEXT RB
         LR    X7,XCDE .               SAVE CDE REG ACCROSS TASKSWITCH
         L     X15,AIEADS02 .          GET TASKSWITCH ENTRY POINT
         LR    XCT,XCDRETN .           SET UP RETURN FROM CDHKEEP.
         BALR  XCDRETN,X15 .           TO TASKSWITCH
         LR    XCDE,X7 .               RESTORE CDE REG
         LR    XREUS,XWKB .            RESTORE CURRENT WAIT RB
         LR    XCDRETN,XCT .           RESTORE RETURN POINT
WTFSTNTY EQU   *
         TM    RBCDE,X'08' .           Q. DOES FETCH WORK AREA EXIST
         BZ    NOFETCHA .              NO. BYPASS FREEING IT
         NI    RBCDE,X'F7' .           RESET FETCH WORK AREA FLAG
         L     X1,RBEXSAVE .           GET ADDRESSS OF FETCH WORK AREA
         LA    X1,0(X1) .              CLEAR POSSIBLE NOISE
         LR    XCT,XCDRETN .           SAVE CALLER'S RETURN POINT
         L     X0,K500F252 .           GET LENGTH AND SP ID
         BAL   XCDRETN,FREEMAIN .      FREE FETCH WORK AREA
         LR    XCDRETN,XCT .           PICK UP RETURN ADDRESS
NOFETCHA EQU   *
         XC    RBCDE+1(3),RBCDE+1 .    ZERO CDE ADDRESS
         L     X1,CDRBP-1          RB IN                       @SA70930
         LA    X1,0(,X1)           CONTROL                     @SA70930
         CR    X1,XRB              = OUR RB ?                  @SA70930
         BE    CDTOPRB             YES--RESTART OTHERS         @SA70930
         LTR   X1,X1                                           @SA70930
         BCR   8,XCDRETN                                       @SA70930
*                                                              @SA70930
** RB NOT FETCHING                                             @SA70930
** JUST DEQUEUE RB                                             @SA70930
*                                                              @SA70930
NCDTOPRB EQU   *                                               @SA70930
         LR    X7,X1               SAVE PREV RB                @SA70930
         L     X1,RBPGMQ-RBSECT(,X7) NXT RB ON CDE Q           @SA70930
         LA    X1,0(,X1)           CLEAR FLGS                  @SA70930
         LTR   X1,X1               ANY LEFT?                   @SA70930
         BCR   8,XCDRETN           NO--DONE                    @SA70930
         CR    X1,XRB              THIS OUR RB                 @SA70930
         BNE   NCDTOPRB            NO--TRY NEXT RB             @SA70930
         MVC   RBPGMQ+1-RBSECT(3,X7),RBPGMQ+1-RBSECT(X1) DEQ   @SA70930
         XC    RBPGMQ+1-RBSECT(3,X1),RBPGMQ+1-RBSECT(X1) RB    @SA70930
         BR    XCDRETN             RETURN                      @SA70930
*                                                              @SA70930
** RB ON TOP OF Q -- MODULE BEING FETCHED                      @SA70930
*                                                              @SA70930
CDTOPRB  EQU   *                                               @SA70930
         LR    X1,XREUS            GET SUBJECT RB              @SA70930
         DROP  XREUS                                           @SA70930
         USING RBSECT,X1                                       @SA70930
         L     XREUS,RBPGMQ        NEXT RB                     @SA70930
         DROP  X1
         USING RBSECT,XRB
         LA    XREUS,0(XREUS) .        DROP POSSIBLE FLAGS
         LTR   XREUS,XREUS .           Q. ANYMORE WAITING SVRB'S
         BZ    MODNCORE                                        @SA76869
         MVC   CDRBP(3),RBPGMQ+1-RBSECT(X1)                    @SA76869
         XC    RBPGMQ+1-RBSECT(3,X1),RBPGMQ+1-RBSECT(X1)       @SA76869
         B     NXTWTNG                                         @SA76869
MODNCORE EQU   *
****END APARS*AH 39386****AND*AH 39970****EXCEPT VCON CDQCNTRL****
*
         SR    XCT,XCT .                ZERO REG FOR TEST        A31517
         IC    XCT,CDUSE .              GET USE RESPONSIBILITY COUNT
         TM    0(XCDE),NIP .            Q. LOADED BY NIP?         M0102
         BO    DECDONE .                YES. BYPASS DECREMENT     M0102
         LTR   XCT,XCT .                IS USE COUNT ZERO        A31517
         BZ    DECDONE .                YES, SKIP DECREMENT      A31517
         BCTR  XCT,0 .                  DECREMENT BY ONE.
         STC   XCT,CDUSE .              STORE BACK INTO CDE
DECDONE  EQU   *                                                 A31517
         TM    CDATTR,NIC         IF MODULE IS NOT LOADED, THE @AS76407
*                                 REENTERANT BIT WILL BE ON IF @AS76407
*                                 MODULE IS REENTEREANT OR NOT @AS76407
         BO    CKQUE                                           @AS76407
         TM    CDATTR,REN         RE-ENTERANT?                 @AS74290
         BO    CDHKP               YES--SKIP CHECK             @SA74290
CKQUE    EQU   *                                               @AS76407
         L     XREUS,CDRBP-1       TOP RB                      @SA70930
         LA    XREUS,0(,XREUS)     CLEAR FLAGS                 @SA70930
         LTR   XREUS,XREUS         ANY ?                       @SA70930
         BZ    CDHKP               NO--GO TO CDHKEEP           @SA70930
         CR    XRB,XREUS           WE TOP RB?                  @SA70930
         BE    CDTPQ               YES--GIVE TO NEXT PROGRAM   @SA70930
CDMIDQ   EQU   *                   NO--DEQ FROM MIDDLE         @SA70930
         LR    XCT,XREUS           SAVE PREVIOUS RB @          @SA70930
         L     XREUS,RBPGMQ-RBSECT(,XCT) NEXT RB               @SA70930
         LA    XREUS,0(,XREUS)     CLEAR FLAGS                 @SA70930
         LTR   XREUS,XREUS         ANY?                        @SA70930
         BCR   8,XCDRETN           NO--EXIT                    @SA70930
         CR    XRB,XREUS           US?                         @SA70930
         BNE   CDMIDQ              NO--NEXT RB                 @SA70930
         MVC   RBPGMQ+1-RBSECT(3,XCT),RBPGMQ+1-RBSECT(XRB) DEQ @SA70930
         XC    RBPGMQ+1-RBSECT(3,XRB),RBPGMQ+1-RBSECT(XRB)     @SA70930
         BR    XCDRETN             RETURN                      @SA70930
CDTPQ    EQU   *                                               @SA70930
         L     XREUS,RBPGMQ .           GET PROG QUEUE FROM CURR RB.
         LA    XREUS,0(,XREUS)          CLEAR BYTE 0              M1997
         LTR   XREUS,XREUS .            ANY ADDITIONAL REQUESTS FOR PGM
         BC    6,CDADD .                BR IF YES.
CDHKP    EQU   *                                               @SA70930
         XC    CDRBP(3),CDRBP      NO ONE WAITING              @SA71591
         LR    XHKRETN,XCDRETN .        SET UP RETURN FROM CDHKEEP.
         B     CDHKEEP .                TO CDHKEEP RTN
CDADD    TM    CDATTR,SER          CDE STILL REUS              @SA71591
         BO    CDADD1              YES--GIVE NEXT RB CONTROL   @SA71591
         XC    RBPGMQ+1(3),RBPGMQ+1 STAE RETRY--RESTART OTHERS @SA71591
         IC    XCT,CDUSE           UP COUNT SINCE              @SA71591
         LA    XCT,1(,XCT)         WILL GO THRU DECREMENT      @SA71591
         STC   XCT,CDUSE           CODE TWICE                  @SA71591
         B     NXTWTNG             RESTART WAITING RBS         @SA71591
CDADD1   EQU   *                                               @SA71591
         MVC   CDRBP(3),RBPGMQ+1   UPDATE RB POINTER IN CDE    @SA71591
         MVI   RBWCF-RBSECT(XREUS),0 SET RB READY              @SA71591
         L     XCS03,AIEACS03 .        GET ENTRY TO LINK CODE    A39970
         ST    XCS03,RBOPSW+4-RBSECT(0,XREUS) .SET UP ENTRY TO LNK CODE
CDRBLP   TM    RBSTAB+1-RBSECT(XREUS),RBTCBNXT .IS TCB NEXT
         L     XREUS,RBLINK-RBSECT(0,XREUS) .GET NEXT RB OR TCB ADDR
         BC    8,CDRBLP .               BR IF TCB NOT NEXT.
         LA    XREUS,0(0,XREUS) .       CLEAR HI ORDER BYTE.
         L     XCDEP,AIEADS02 .         GET ADDR OF TASK SWITCH RTN.
         BR    XCDEP .                  TO TASK SWITCH RTN.
* NOTE THAT REG 14 WILL CAUSE RETURN TO CALLER FROM TASK SWITCH RTN.
         TITLE '          EXIT MODULE - CDHKEEP'
* CDHKEEP
         ENTRY CDHKEEP
CDHKEEP  DS    0H
         BALR  XCDBSE,0
         USING *,XCDBSE
         OI    CDATTR,NFN .             FLAG INDICATING NOT REUSEABLE
*                                       PROGRAM USED ONCE.
         CLI   CDUSE,0 .                IS USE RESPON. COUNT=0
         BCR   2,XHKRETN .              RETURN IF NOT.
         TM    CDATTR,NIP .             IS MOD IN SYS LPA.
         BCR   1,XHKRETN .              BR IF YES.
         TM    CDATTR,REN+SER .         IS PROGARM REUSABLE.
         BZ    CDEM .                   BRANCH IF NOT
         AIF   ('&TSO' NE '1').NOTSO5A                            20021
         TM    TCBTSFLG,TCBTSTSK .      IS PGM FOR TIME SHAR TSK  20021
         BO    CDEM .                   YES, DELTETE THE PGM      20021
.NOTSO5A ANOP                                                     20021
*      A CHECK IS MADE TO SEE IF ROLLOUT IS IN EFFECT FOR THE JOB
*  STEP. IF SO THE PROGRAM SHOULD BE FREED TO ALLOW A POSSIBLE ROLLIN.
*      IF, HOWEVER, ABEND IS IN PROCESS, THE STORAGE SHOULD NOT BE
*  FREED SINCE THAT AREA MAY ALREADY HAVE BEEN FREED BY ABEND IF ABEND
*  NEEDED TO STEAL CORE FOR THE CLOSE DATA SETS FUNCTION.  IF THE
*  STORAGE HAS NOT BEEN FREED, ABEND WILL FREE IT LATER. THIS WOULD
*  PERTAIN ONLY TO A JOB STEP ABEND.
         L     XWKB,TCBJSTCB .          GET ADDR OF JS.TCB         RORI
         USING TCB,XWKB .
         TM    TCBFLGS+2,X'40' .        ROLLOUT INVOKED            RORI
         BO    CDTSTFA .                                         A24966
* NIC ON AND REENTRANT OR REUSEABLE IS POSSIBLE AFTER DAR         20472
* OR STAE/STAI.                                                   20472
         TM    CDATTR,NIC .             MOD IN CORE               20472
         BO    CDTSTFA .                NO, CHCK ABOUT FREE OF AR 20472
CDSTREL  DS    0H .                     BR IF YES                A24966
         OI    CDATTR2,REL .            SET RELEASE INDICATOR IN CDE
         LA    XWKB,TCBJPQ-TCB(0,XWKB) .GET ADDRESS OF J. S. CDE PT
CDSPG    OI    0(XWKB),X'80' .          SET PURGE FLAG ON.
CDOUT    BR    XHKRETN .                RETURN TO CALLER           0157
CDTSTFA  DS    0H                                                A24966
         TM    TCBFLGS,TCBFA .          IS JOB STEP ABENDING     A24966
         BO    CDSTREL .                YES DO NOT FREE PGM      A24966
         DROP  XWKB .                                            A24966
CDEM     LR    XDMRETN,XHKRETN .        SET RETURN FROM CDDESTRY
* FALL THROUGH TO CDDESTRY WHICH MUST FOLLOW.
         TITLE '        EXIT MODULE - CDDESTRY'
* CDDESTRY
         ENTRY CDDESTRY
CDDESTRY DS    0H
* REMOVE CDE FROM JPACQ.
         TM    TCBNSTAE,RMSCODE .       ABEND BY STORAGE RECONFIG    2K
         BO    DESTX .                  YES, BRANCH                  2K
CDEM01   EQU   *                                                     2K
         L     XXL,CDXLMJP-1 .          LOAD EXTENT LIST POINTER.
         LA    XXL,0(0,XXL) .           CLEAR HI ORDER BYTE.
         LTR   XXL,XXL .                IS THERE AN EXTENT LIST?  M0120
         BZ    DESTX .                  NO. DONT TRY TO FREE IT   M2546
         L     X1,4(0,XXL) .            LOAD NO. OF CONTROL SECTIONS.
         LA    XXL,ELLNGTH(0,XXL) .     LOAD REG WITH THE ADDR OF LNGTH
         ST    XXL,FMLNGH .             SET LENGTH PARM. FOR FREEMAIN
         SLL   X1,2 .                   MULT NO. IN LIST BY 4.
         AR    XXL,X1 .                 XXL PTS TO ELADDR
         ST    XXL,FMADDR .             SET ADDR PARM. FOR FREEMAIN.
         AR    X1,XXL .                 FIND END OF EXTENT LIST   M0120
         LA    X0,4 .                   POINT TO LAST WORD OF     M0120
         SR    X1,X0 .                  EXTENT LIST               M0120
         NC    1(3,X1),1(X1) .          Q. IS EXTENT LIST FILLED  M0120
         BZ    DESTX .                  NO. SKIP FREE OF PROGRAM  M0120
         TM    CDATTR2,SPZ .            IS PGM IN SP ZERO         20008
         BZ    NOTSPZ .                 NO,TRY 251 OR 252         20008
         MVI   FMSP,250 .               SET PARM TO FREE SP ZERO  20008
         B     CDFRPGM .                GO TO ISSUE FREEMAIN      20008
NOTSPZ   DS    0H                                                 20008
         MVI   FMSP,252 .               SET SUBPOOL ID FOR LPA.
CDPGMTST TM    CDATTR,JPA .             IS PGM FROM LINK PACK AREA 0157
         BC    12,CDFRPGM .             BR IF YES.
         MVI   FMSP,251 .               SET SUBPOOL ID FOR JPA.
CDFRPGM  DS    0H
         LA    1,FMPLIST .              LOAD PARAMETER ADDR.
         OI    SCVTFMSA,SCVTSW3 .       SET SW FOR FM TEST        M3806
         BAL   14,FREEMAIN              TO FREE PROGRAM           M3806
* ENTRY FOR FREEING EXTENT LIST AND CDE'S BY EOT
DESTX    DS    0H
         BALR  XCDBSE,0
         USING *,XCDBSE
         BAL   XODRETN,ORDERCDQ .       TO ORDER CD Q.
         L     X1,CDXLMJP-1 .           LOAD EXTENT LIST POINTER.
*
*   FOLLOWING IS CHECK FOR EXISTENCE OF EXTENT LIST.  THIS PTR
*   MAY BE ZERO, E.G. STAE RETRY AFTER 806 ABEND HAS BEEN ACCOMPLISHED
*
         LA    X1,0(X1) .               CLEAR OUT ATTR2 BYTE      M1180
         LTR   X1,X1 .                  IS EXTENT LIST PRESENT
         BZ    CDDMLP .                 NO,BRANCH TO GET NEXT CDE
         L     X0,0(0,X1) .             GET EXTENT LIST LENGTH.
         O     X0,K255 .                SET SUBPOOL ID
         LA    X1,0(0,X1) .             CLEAR HI ORDER BYTE
         BAL   14,FREEMAIN .            TO FREE EXTENT LIST.      M3806
CDDMLP   L     XCDWK,CDCHAIN-1 .        GET NEXT CDE
         LA    XCDWK,0(0,XCDWK) .       CLEAR HI ORDER BYTE
         L     X0,K24F255 .             SET UP FOR FREEMAIN.
         LR    X1,XCDE .                SET CDE ADDR IN REG 1.
         BAL   14,FREEMAIN .            TO FREE CDE.              M3806
         LTR   XCDWK,XCDWK .            ANY MORE CDE'S
         BCR   8,XDMRETN .              RETURN IF NOT
         TM    CDATTR-CDESECT(XCDWK),MIN .IS CDE A MINOR
         BCR   8,XDMRETN .              RETURN IF NOT.
         LR    XCDE,XCDWK .             LOOP SET-UP.
         B     CDDMLP
         EJECT
*
ORDERCDQ DS    0H
         L     XORWK,TCBJSTCB .         GET J/S TCB ADDR.
         LA    XORWK,TCBJPQ-TCB(0,XORWK) GET JPQ CDE PTR ADDR    A32002
ORNEXT   EQU   * .                                               A32002
         L     X1,0(0,XORWK) .          GET NEXT CDE             A32002
         LA    X1,0(0,X1) .             ZERO HI ORDER BYTE.
         CR    XCDE,X1 .                DOES CDE ON JPACQ = SUBJECT CDE
         BE    ORLP .                   BR IF YES
         LTR   X1,X1 .                  Q. END OF CHAIN?         A32002
         BCR   8,XODRETN           END OF QUEUE -- RETURN      @SA73526
         LR    XORWK,X1 .               SET UP FOR LOOP
         B     ORNEXT
         SPACE
ORLP     L     X1,CDCHAIN-1-CDESECT(0,X1) .GET NEXT CDE
         LA    X1,0(0,X1) .             ZERO HI ORDER BYTE.
         LTR   X1,X1 .                  IS THERE A CDE.
         BE    OCNT .                   BR IF NOT.
         TM    CDATTR-CDESECT(X1),MIN . IS ENTRY A MINOR
         BC    1,ORLP .                 BR IF YES.
OCNT     DS    0H
         IC    X0,0(0,XORWK) .          SAVE ATTR
         ST    X1,0(0,XORWK) .          UPDATE CDE.
         STC   X0,0(0,XORWK) .          RESTORE ATTR
         L     X1,TCBJSTCB .            GET ADDR OF JOBSTEP TCB  A39035
         USING TCB,X1 .                 ESTABLISH ADDRESSABILITY A39035
         NC    TCBJPQ+1(3),TCBJPQ+1 .   WAS SUBJECT CDE THE ONLY A39035
         BCR   7,XODRETN .              NO. RETURN CONTROL       A39035
         NI    TCBJPQ,X'7F' .           RESET PURGE BIT          A39035
         DROP  X1 .                                              A39035
         BR    XODRETN .                RETURN TO CALLER.
         DROP  XCDBSE
         TITLE '        EXIT MODULE - END OF TASK'
* END OF TASK MAIN LINE.
         SPACE
         USING EDBSE,XBSE
EOT      DS    0H
*        BAL   XRETN,ETAER .            HANDLE DEFERRED A.E.R'S.
         AIF   ('&TSO' NE '1').NODEFR2                            20021
* PURGE ATTENTION IRBS FROM IQE QUEUE                             20021
         L     XRETN,AETAER        HANDLE                      @SA75035
         BALR  XRETN,XRETN         DEFERRED ATTENTION          @SA75035
.NODEFR2 ANOP                                                     20021
* TEST FOR DEPENDENTS.
         L     XWKA,TCBLTC .            GET ADDR OF DEPENDENT TCB
         LTR   XWKA,XWKA .              ANY DEPENDENTS.
         BC    7,ETDPN .                BR IF YES- ERROR CONDITION.
* STORE COMPLETION CODE.
         MVC   TCBCMP+1(3),TCBGRS+60+1 .STORE COMPLETION CODE.
         MVI   TCBCMP,0 .          RESET HI ORDER TO ZERO     PDOS65744
* CANCEL SPIE- RELEASE PIE.
         L     X1,TCBPIE .              GET PIE ADDR.
         LTR   X1,X1 .                  IS PIE PRESENT.
         BZ    ETB01 .                  BR IF NOT.
         L     X0,K32F250 .             SET PARM TO FREE PIE.
         BAL   XRETN,FREEMAIN .         CONDITIONALLY PIE     AH  M1545
         SR    X1,X1
         ST    X1,TCBPIE .              ZERO PIE POINTER.
* PURGE TIMER INTERFACE.
ETB01    DS    0H
         BAL   XRETN,ETME .             PURGE INCOMPLETE TIME INTERVALS
* TEST FOR OUTSTANDING ENQ REQUESTS.
         TM    TCBFLGS,TCBFA    IS ENTRY FROM ABEND            @SA77157
         BO    CLOSE            YES,BRANCH AROUND PURGE        @SA77157
* PURGE OCR INTERFACE.
* BYPASS WTOR PURGE IF ENTRY TO EOT IS FROM ABEND TO AVOID
* DUPLICAATE 'MESSAGES CANCELLED' MESSAGES
         CLI   TCBQEL,0         ENQ CT =0                      @SA77157
         BNE   ETNQERR          NOT 0                          @SA77157
         L     XOCREP,IEABEND+4 .       GET ADDR OF WTOR PURGE RTN.
         BALR  XRETN,XOCREP .           BR TO WTOR PURGE RTN.
* CLOSE DATA SET INTERFACE.
CLOSE    DS    0H .                                               20909
         BAL   XRETN,ETCLOSE .          CLOSE DATA SETS.
*
* AT THIS POINT, ALL PROCESSING DONE ON BEHALF OF THE TASK   AD . M2001
* IS COMPLETE. EOT WILL NOW BEGIN FUNCTIONING PURELY ON A    AD . M2001
* SYSTEM LEVEL. THEREFORE, ALL STAI SCBS MUST BE FREED SINCE AD . M2001
* THEY REPRESENT TASK-ORIENTED CONTROL ONLY. ALL STAE SCBS   AD . M2001
* HAVE ALREADY BEEN FREED IN EXIT.                           AD . M2001
*
         LA    XWKC,TCBNSTAE .          PTR TO SCB CHAIN     AD   M2001
STAILOOP EQU   * .                                           AD   M2001
         L     XWKB,0(XWKC) .           ADDR FIRST STAI SCB  AD   M2001
         LA    XWKB,0(XWKB) .           DROP POSSIBLE FLAG   AD   M2001
         LTR   XWKB,XWKB .              SCB PRESENT          AD   M2001
         BZ    BYSTAI .                 NO-LEAVE SCB PROCESS AD   M2001
         LA    XLOC,0(XWKB) .           ADDR FOR FREEMAIN    AD   M2001
         MVC   0(4,XWKC),0(XWKB) .      DEQ SCB BEING FREED  AD   M2001
         L     XLNGH,K16F255 .          LENGTH-16, SP-255    AD   M2001
         L     8,ARMBRNCH .             FREEMAIN ENTRY PT    AD   M2001
         BALR  14,8 .                   GO FREE THE SCB      AD   M2001
         B     STAILOOP .               SEARCH FOR MORE SCBS AD   M2001
BYSTAI   EQU   * .                                           AD   M2001
         L     X15,GRAPHTTR .           BRANCH TO GRAPHICS
         BALR  XRETN,X15 .              EOT ROUTINE
*    IF GRAPHICS IS NOT IN THE SYSTEM, THE EFFECT OF THIS
*    BRANCH IS AN IMMEDIATE RETURN FROM A DUMMY GRAPHICS
*    CSECT, IFFGRTTR.
         SPACE 1
***********************************************************   AH  M2063
* PURGE POSSIBLE OUTSTANDING I/O                              AH  M2063
***********************************************************   AH  M2063
         LA    X15,ETPURGE .           GO PURGE ANY          AD  A56556
         BALR  XRETN,X15 .             OUTSTANDING I/O       AD  A56556
*
* BEFORE PERFORMING FINAL PURGES,                                A39943
* CHECK TO SEE IF MOTHER IS ABENDING                             A39943
*                                                                A39943
         L     XNRB,TCBOTC .           R6 EQ MOTHER TCB          A39943
         USING TCB,XNRB .                                        A39943
         TM    TCBFLGS1,TCBFA .        Q. IS MOTHER ABENDING     A39943
         DROP  XNRB .                                            A39943
         BZ    CONT01 .                NO, CONTINUE              A39943
         OI    TCBFLGS5,TCBABWF .      SET TASK NON-DISP         A39943
         L     XNEW,CVTTCBP .          R7 EQ NEW,OLD             A39943
         C     XTCB,0(0,XNEW) .        IS 'NEW' EQ CURRENT TCB   A39943
         BNE   DSP01 .                 NO,GO TO DISPATCHER       A39943
         SR    XNRB,XNRB .             ZERO WORK REG             A39943
         ST    XNRB,0(0,XNEW) .        ZERO 'NEW' FORCE TASK SW  A39943
DSP01    L     XRETN,CVT0DS .          GET ADDR OF DISPATCHER    A39943
         BR    XRETN .                 BRANCH TO DISPATCHER      A39943
CONT01   DS    0H  .                                             A39943
* CDEXIT INTERFACE.
         BAL   XRETN,CDEXIT .           CDEXIT.
         BALR  XBSE,0 .                 REESTABLISH ADDRESSABILITY.
         USING *,XBSE
*
* QUEUE THE 30 MIN REAL TQE FOR NON-JOBSTEP ENTRY IF EVERY    AH A57089
* OTHER TCB IN JOBSTEP IS WAITING.                            AH A57089
         L     XIQE,TCBJSTCB .          GET JOBSTEP TCB       AH A57089
         LA    XIQE,0(,XIQE) .          DROP POSSIBLE NOISE   AH A57089
         CLR   XTCB,XIQE .              Q. JOBSTEP TRMINATION AH A57089
         BE    ETNOWAIT .               DO NOT Q 30 MIN TQE   AH A57089
         STM   X0,X15,EXITSAVE .        SAVE REGS ACCRS WAIT  AH A57089
         L     X8,WTJSTIME .            ENTRY POINT TO WAIT   AH A57089
         BALR  XRETN,X8 .               TAKE A BRANCH TO WAIT AH A57089
         USING *,XRETN .                TO RESTORE BASEREG    AH A57089
         LM    X0,X15,EXITSAVE .        RESTORE GENERAL REGS  AH A57089
         DROP  XRETN .                                        AH A57089
ETNOWAIT EQU   * .                                            AH A57089
* RELEASE LOADED PROGRAMS.
         BAL   XCVT,ETLDP .             RELEASE LOADED PROGS.
         USING *,XCVT
* MSS EOT INTERFACE.
         BAL   XCVT,ETMSS .             MSS EOT.
         USING *,XCVT
         L     XBSE,AEDBSE .            REESTABLISH ADDRESSABILITY.
         DROP  XCVT
         USING EDBSE,XBSE
         L     XCVT,16 .                REESTABLISH CVT ADDRESS.
         USING CVTSECT,XCVT
* SCHEDULE ETXR IF INDICATED.
         BAL   XRETN,ETXR .             SCHEDULE ETXR.
* REMOVE TCB FROM READY QUEUE.
         L     XRETN,ADQTCB        REMOVE TCB FROM             @SA75035
         BALR  XRETN,XRETN         READY QUEUE                 @SA75035
* SET COMPLETION FLAGS.
         OI    TCBFLGS,TCBFE .          SET NORMAL COMPL BIT.
         OI    TCBFLGS+4,TCBFC .        SET TERM BIT.
* POST ECB IF INDICATED.
         BAL   XRETN,ETPOST .           POST ORIGIN TASK.
* NOTE- DISPLACEMENT BETWEEN ETB03 AND ETB02 IS USED BY POST RTN. IF
* CHANGE IS MADE, ALSO CHANGE RETURN FROM POST RTN AT LOCATION
* 'ETPSTRET'.
ETB03    DS    0H
         TM    TCBFLGS+1,TCBFETXR .     IS THERE AN ETXR.
         BO    ETB02 .                  BR IF YES.
         LR    XDTCB,XTCB .             SET REG FOR ERASE PHASE.
         BAL   XRETN,IEAQERA .          ERASE TCB.
         L     X1,CVTTCBP             OLD NEW                  @YA78625
         C     XDTCB,4(X1)            OLD=ERASE                @YA78625
         BNE   ETB                    NO                       @YA78625
         MVC   4(4,X1),CVTHEAD        INITIALIZE TO FIRST      @YA78625
         XC    0(4,X1),0(X1)          TASK SWITCH              @YA78625
ETB      DS    0H                                              @YA78625
ETB02    DS    0H
* FORCE TASK SWITCH
         L     X1,CVTTCBP .             GET ADDR OF 'NEW'
         L     XRETN-1,CVT0DS .         SET REG FOR RETURN TO DISP.
         CLC   1(3,X1),5(X1) .          IS TASK SWITCH SET UP.
         BNE   EDFRB .                  BR IF YES.
         SR    XWKA,XWKA
         ST    XWKA,0(0,X1) .           ZERO 'NEW'
         B     EDFRB .                  TO FREE RB.
         SPACE 3
* ABEND TASK DUE TO OUTSTANDING DESCENDENTS.
ETDPN    DS    0H
         L     X1,ETABCD1 .             LOAD ABEND ERROR CODE.
         L     X0,TCBGRS .              RESTORE REGS FOR ABEND DUMP.
         LM    2,15,TCBGRS+8
         ABEND (1)
         SPACE 3
* ABEND TASK DUE TO INCOMPLETE ENQ REQUESTS.
ETNQERR  DS    0H
         L     X1,ETNQCD .              LOAD ABEND ERROR CODE
         L     X0,TCBGRS .              RESTORE REGS FOR ABEND DUMP.
         LM    2,15,TCBGRS+8
         ABEND (1)
         SPACE
RINC     EQU   ETB02-ETB03
         SPACE 3
         TITLE '             CLOSE DATA SETS'
* CLOSE ANY OPEN DATA SETS.
ETCLOSE  DS    0H
         BALR  XCBSE,0
         USING *,XCBSE
         L     XWKA,TCBDEB .            GET DCB ADDR FROM TCB.
         LTR   XWKA,XWKA .              ANY DATA SETS OPEN.
         BCR   8,XRETN .                RETURN TO CALLER IF NO.
* THIS CORE WILL BE FREED IN MSS EOT PROCESSING.
         GETMAIN R,LV=8,SP=253 .        GETMAIN FOR CLOSE PARM LIST.
         LR    XWKB,1 .                 SAVE PARM LIST ADDR.
ETCLSLP  MVC   1(3,XWKB),DEBDCBAD+1(XWKA) .PUT DCB ADDR IN PARM LIST.
         MVI   0(XWKB),X'80' .          SET LAST ENTRY IND FOR CLOSE.
         CLOSE MF=(E,(XWKB)) .          CLOSE DATA SET.
         L     XWKC,TCBDEB .            GET DEB ADDR FROM TCB.
         CR    XWKC,XWKA .              HAS CLOSE REJECTED DEB.
         BE    ETCLAB .                 BR IF YES- ABEND.
         LTR   XWKA,XWKC .              ANY DATA SETS OPEN.
         BC    7,ETCLSLP .              BR IF YES
         BR    XRETN .                  RETURN.
*
ETPURGE  EQU   * .                                            AH  M2063
*
* THE CODE RELATING TO PTM 2063 WAS ADDED BECAUSE A SUBTASK   AH  M2063
* DOING I/O UNDER A DCB OPENED UNDER/BY THE MOTHER COULD BE   AH  M2063
*  TERMINATING NORMALLY WITH OUTSTANDING I/O                  AH  M2063
         TM    TCBFLGS,TCBFA .         Q. ENTRY FROM ABEND    AH  M2063
ETPURGE1 EQU   *                   NEXT INSTR. TO BCR 15,--    @SA72278
*                                  IF REL 21.0 - 21.6          @SA72278
         BCR   1,XRETN .               YES. PURGE DONE        AH  M2063
         LA    X15,15 .                ENTRY PARAM TO PURGE  AD  A56556
         SVC   109 .                   PURGE OUTSTANDING I/O AD  A56556
         BR      XRETN .               BACK TO MAIN LINE      AH  M2063
         SPACE 2
         SPACE 2
* ABEND TASK DUE TO BAD DEB INFO ON CLOSE.
ETCLAB   DS    0H
         L     X1,ETCLABCD .            LOAD ABEND ERROR CODE.
         L     X0,TCBGRS .              RESTORE REGS FOR ABEND DUMP.
         LM    2,15,TCBGRS+8
         ABEND (1)
         DROP  XCBSE
         TITLE '             PURGE TIMER ROUTINE'
* PURGE TIMER
         ENTRY IEAQPGTM
IEAQPGTM DS    0H
ETME     DS    0H
         BALR  XTMBSE,0
         USING *,XTMBSE
ETMBSE   DS    0H
         AIF   ('&TSO' NE'1').SKPURGE .                           20021
*                                                                 20021
*    PURGE TAXE INTERFACE                                         20021
*                                                                 20021
         USING TCB,XTCB .                                         20021
         TM    TCBTSFLG,TCBTSTSK .      IS THIS TSO TASK          20021
         BZ    SKPTAXPG .               NO- SKIP TSO PROCESSING   20021
         LR    XSAVE,XRETURN .          SVE RET ACROSS TAXE PURGE 20021
         L     XENTRY,ATAXEPRG     @ OF TAXE PURGE RTN         @SA75035
         BALR  XRETURN,XENTRY .         BRANCH TO PURGE TAXES     20021
         LR    XRETURN,XSAVE .          RESTORE RETURN REG        20021
.SKPURGE ANOP                                                     20021
SKPTAXPG EQU   * .                                                20021
         L     X1,TCBTME .              GET TQE ADDR.
         LTR   X1,X1 .                  IS THERE A TQE PRESENT.
         BCR   8,XRETN .                RETURN IF NOT.
         TM    TQEFLGS(X1),X'80' .      IS TQE OFF QUEUE.
         BO    ETMFREE .                BR IF YES.
         STM   1,9,EXITSAVE .           SAVE REGS OVER CANCEL     20021
         L     X15,KANCEL .             SET UP CANCEL BASE.
         L     X10,CVTTPC .             SET UP TIMR PSEUDO CLCK ADR 385
         L     XTMENTR,CVTQTD00 .       GET ADDR OF TIMER CANCEL RTN.
.* THE FIRST AND FOURTH INSTRUCTION AFTER THIS COMMENT ARE A FIX  M4483
.* NECESSARY TO SAVE REGISTER 14 WHICH IS DESTROYED BY THE TIMER  M4483
.* CANCEL ROUTINE. REGISTERS 2 AND 12 ARE THE ONLY ONES           M4483
.* GUARANTEED TO BE RETURNED INTACT BY IEAQTD00. THIS FIX DOES    M4483
.* NOT TAKE INTO ACCOUNT ANY OTHER REGISTER INTERFACE PROBLEMS    M4483
.* WITH THE TIMER PURGE AND IS STRICTLY TO INSURE THAT THE        M4483
.* CALLER WILL GET CONTROL RETURNED TO HIM WHEN THE TIMER PURGE   M4483
.* IS DONE.                                                       M4483
         LR    12,XRETN .               SAVE RETURN ADDR          M4483
         BALR  XTMENTR,XTMENTR .        CANCEL TQE.
         USING *,XTMENTR
         LM    1,9,EXITSAVE .           RESTORE REGS              20021
         DROP  XTMENTR
         LR    XRETN,12 .               RESTORE RETURN ADDR       M4483
         USING ETMBSE,XTMBSE
ETMFREE  DS    0H
         LR    X10,X8 .                 SAVE REGS            PD OS63088
         LR    X11,XRETN .              ACCROSS FREEMAINS    PD OS63088
         LR    X7,X1 .                  SAVE TQE ADDR.
         L     X1,TQESAADR(0,X1) .      GET ADDR OF PP SAVE AREA.
         LA    X1,0(,X1) .              DROP NOISE            AH A50601
         LTR   X1,X1 .                  Q.DOES P/P SAVE EXIST AH A50601
         BZ    NOPPSAVE .               RETURN IF NOT.        AH A50601
         XC    TQESAADR+1(3,X7),TQESAADR+1(X7) . ZERO SA PTR  AH A50601
ETMFRX   DS    0H
         L     X0,K72F250 .             SET PARM FOR FREEING S/A.
         BAL   XRETN,FREEMAIN .         CONDITIONALLY S/A     AH  M1545
NOPPSAVE EQU   *                                              AH A50601
         TM    TQEFLGS(X7),X'01'   IF TQE FOR                  @PD64485
         BZ    TQENWT              'STIMER WAIT'               @PD64485
         TM    TQEFLGS(X7),X'02'   THEN TURN OFF               @PD64485
         BO    TQENWT              WAIT ISSUED                 @PD64485
         L     X1,TQEECB(,X7)      BIT IN RB SO                @PD64485
         NI    RBSTAB1-RBSECT(X1),255-RBWAITP ABEND DOES       @PD64485
*                                  NOT PSEUDO-POST             @PD64485
*                                  NON-OWNED CORE              @PD64485
TQENWT   EQU   *                                               @PD64485
         LR    X1,X7 .                  SET TQE ADDR TO FREE.
         L     X0,K112F243 .            SET PARM FOR FM           20021
         L     8,ARMBRNCH .             GET FM BR EP.
         BALR  14,8 .                   TO FREE TQE.
         LR    XRETN,X11 .              RESTORE REGS.
         LR    8,X10 .
ZEROPTR  SR    X10,X10 .
         ST    X10,TCBTME .             ZERO TCB TQE POINTER.
         BR    XRETN .                  RETURN TO CALLER.
         SPACE
         TITLE '             RELEASE LOADED PROGRAMS'
* RELEASE LOADED PROGRAMS.
         ENTRY IEAQABL
IEAQABL  DS    0H
ETLDP    DS    0H
         BALR  XSUBSE,0
         USING *,XSUBSE
         L     XWKA,TCBLLS .            GET LLE FROM TCB.
ETLDLP   LTR   XWKA,XWKA .              IS LLE PRESENT.
         BCR   8,XCVT .                 BR IF NOT.
         L     XCDE,LLCDPTR-1(0,XWKA) . GET CDE ADDR FROM LLE.
         LA    XCDE,0(0,XCDE) .         CLEAR HI ORDER BYTE.
         TM    0(XCDE),MIN .            Q. IS THIS A MAJOR CDE     8764
         BZ    ETCTADJ .                YES,GO ADJUST              8764
*                                       RESPONSE/USE COUNT         8764
         L     XCDE,CDXLMJP-1 .         NO-LOAD MAJOR CDE ADR      8764
         LA    XCDE,0(0,XCDE) .         CLEAR HI ORDER BYTE        8764
ETCTADJ  SR    X0,X0 .                  ZERO REGS
         LR    X1,X0 .
         TM    0(XCDE),NIP .            Q. LOADED BY NIP?         M0102
         BO    NOUPDT .                 YES. DON'T ADJ USE COUNT  M0102
         IC    X0,LLRESPCT(0,XWKA) .    GET RESPONSIBILITY CT FROM LLE.
         IC    X1,CDUSE .               GET USE RESP. COUNT FROM CDE
         SR    X1,X0 .                  CALC UPDATED RESPONS. CT.
         STC   X1,CDUSE .               STORE UPDATED COUNT.
         L     XCDBSE,ACDHKEEP .        GET ADDR OF HKEEP RTN.
         BALR  XHKRETN,XCDBSE .         TO CDHKEEP.
* REGS 3-7 MUST BE TRANSPARENT OVER SUB-RTN.
NOUPDT   EQU   * .                                                M0102
         LR    X1,XWKA .                SAVE LLE ADDR.
         L     XWKA,LLCHAIN-1(0,XWKA) . GET NEXT LLE.
         ST    XWKA,TCBLLS .            STORE INTO TCB.
         L     X0,K8F255 .              SET PARM FOR FREEMAIN.
         BAL   14,FREEMAIN .            TO FREE LLE.              M3806
         B     ETLDLP
         AIF   ('&TSO' EQ '1').TSOP1 IF NO TSO                 @SA75035
         SPACE 5                                               @SA75035
         ENTRY IEAKJXP             DUMMY ENTRY FOR             @SA75035
IEAKJXP  DS    0H                  NON-TSO SYSTEM              @SA75035
.TSOP1   ANOP  ,                   END OF SKIP                 @SA75035
         TITLE '             MAIN STORAGE EOT'
* MAIN STORAGE EOT.
         ENTRY IEAQSPET
IEAQSPET DS    0H
ETMSS    DS    0H
         BALR  XMBSE,0
         USING *,XMBSE
         CL    XTCB,TCBJSTCB .          IS J/S TCB AT EOT.
         BNE   ETSPQE .                 BR IF NOT.
ETMSLP   L     XCDE,TCBJPQ .            GET JOB PACK CDE.
         LA    XCDE,0(0,XCDE) .         CLEAR HI ORDER BYTE.
         LTR   XCDE,XCDE .              ANY PROGRAMS IN JOB PACK AREA.
         BZ    ETSPQE .                 BR IF NOT.
         L     XCDBSE,ADESTX .          GET EP TO CDDESTRY FOR MSS EOT.
         BALR  XDMRETN,XCDBSE .         TO FREE CDE AND EXTENT LIST.
         B     ETMSLP
ETSPQE   L     XSPQE,TCBMSS .           GET SPQE ADDR.
         LA    XSPQE,0(0,XSPQE) .       CLEAR HI ORDER BYTE.
         LTR   XSPQE,XSPQE .            IS POINTER ZERO.
         BCR   8,XCVT .                 BR IF YES.
         SR    X0,X0 .                  CLEAR X0             PD OS63452
         TM    0(XSPQE),X'80' .         IF SUBPOOL IS NOT    PD OS63452
         BZ    ETNSPQE0 .               SHARED, RELEASE CORE PD OS63452
         CL    XTCB,TCBJSTCB .          IF JOBSTEP           PD OS63452
         BNE   ETFSPQE .                TASK                 PD OS63452
         CLI   TCBPKF,0 .               AND NOT KEY 0        PD OS63452
         BE    ETFSPQE .                AND IS USER          PD OS63452
         CLI   4(XSPQE),251 .           SUBPOOL              PD OS63452
         BE    ETFQE0 .                 (0-127 OR 251)       PD OS63452
         CLI   4(XSPQE),128 .           THEN                 PD OS63452
         BNL   ETFSPQE .                SET THE FQE POINTER  PD OS63452
ETFQE0   EQU   * .                      IN EVERY             PD OS63452
         L     X1,4(,XSPQE) .           DQE TO 0             PD OS63452
ETFQE    L     X1,4(,X1) .              THIS PREVENTS ABEND  PD OS63452
         LA    X1,0(,X1) .              IN ORIGINATING TASK  PD OS63452
         LTR   X1,X1 .                  WHICH SHARES USER'S  PD OS63452
         BZ    ETFSPQE .                SUBPOOLS.            PD OS63452
         ST    X0,0(,X1) .              (IN CASE USER HAS    PD OS63452
         B     ETFQE .                  CLOBBERED UNPROTECTEDPD OS63452
ETNSPQE0 EQU   * .                      FQE'S.)              PD OS63452
         LR    X1,X0 .                  SET X0/X1 TO 0       PD OS63452
         IC    X0,4(0,XSPQE) .          GET SP ID FROM SPQE.
         LTR   X0,X0 .                  IS SP ID ZERO              I270
         BC    7,SHIFT .                NO-BRANCH                  I270
         ST    X1,TCBFSA .              YES,SAVE AREA IS FREED WITH
*                                       SUBPOOL ZERO               I270
SHIFT    SLL   X0,24 .                  MVE SP ID TO HI ORDER BYTE I270
         BAL   14,FREEMAIN .            TO FREE SUB-POOL.         M3806
ETFSPQE  DS    0H
         MVC   TCBMSS+1(3),1(XSPQE) .   UNCHAIN SPQE
         L     X0,K8F255 .              SET UP SPQE LENGTH.
         LA    X1,0(0,XSPQE) .          SET UP SPQE ADDR.
         TM    0(XSPQE),X'40' .         LAST SPQE.
         BO    ETFLST .                 BR IF YES.
         BAL   14,FREEMAIN .            TO FREE SPQE.             M3806
         B     ETSPQE .                 LOOP
ETFLST   DS    0H
         BAL   14,FREEMAIN .            TO FREE LAST SPQE.        M3806
         SR    X1,X1 .
         ST    X1,TCBMSS .              STORE ZEROS IN TCB
         L     X0,K253 .                SET UP TO FREE SUB-POOL 253.
         BAL   14,FREEMAIN .            TO FREE SUB-POOL 253.     M3806
         BR    XCVT .                   RETURN.
         TITLE '        EOT - ERASE PHASE'
         ENTRY IEAQERA
IEAQERA  DS    0H
         BALR  XSBSE,0
         USING *,XSBSE
         L     XWKB,TCBOTC-TCB(0,XDTCB) .GET ADDR. OF ORIGIN TCB
         CL    XDTCB,TCBLTC-TCB(0,XWKB) .IS THIS TCB TO FREE
         BNE   EPSIS
         MVC   TCBLTC-TCB(4,XWKB),TCBNTC-TCB(XDTCB)
         B     EPOUT
* SEARCH ALONG SISTER CHAIN.
EPSIS    L     XWKB,TCBLTC-TCB(0,XWKB) .GET SUB TASK ADDRESS
EPSISLP  CL    XDTCB,TCBNTC-TCB(0,XWKB) .IS THIS TCB TO FREE
         BE    EPFOUND .                BR IF YES.
         L     XWKB,TCBNTC-TCB(0,XWKB) .GET NEXT SISTER
         B     EPSISLP
* TCB FOUND.
EPFOUND  MVC   TCBNTC-TCB(4,XWKB),TCBNTC-TCB(XDTCB)
EPOUT    DS    0H
         LR    XRETN-1,XRETN .          SAVE RETURN REG.
         L     XTCB,TCBOTC-TCB(0,XDTCB) .GET ORIGIN TCB
         L     XCVT,16 .                GET CVT ADDR.
         L     X0,K72F250 .             GET FM PARM.
         USING TCB,XDTCB
         L     X1,TCBFSA .              GET S/A ADDR
         DROP  XDTCB
         LA    X1,0(0,X1) .             CLEAR HI ORDER BYTE.
         LTR   X1,X1 .                  IS THERE A SAVE AREA.
         BZ    EP01 .                   BR IF NOT.
         BAL   14,FREEMAIN .            TO FREE S/A.              M3806
EP01     DS    0H
         L     X0,K216F253 .            SET PARM FOR FM            I270
         LR    X1,XDTCB .               SET UP TCB ADDR FOR FREEMAIN.
         S     X1,K32 .                 REF F.P. SAVE AREA.
         BAL   14,FREEMAIN .            TO FREEMAIN FOR TCB.      M3806
         LR    XRETN,XRETN-1 .          RESTORE REG.
         BR    XRETN
         DROP  XSBSE
         EJECT
* SCHEDULE ETXR ASYNCHRONOUS EXIT ROUTINE.
ETXR     TM    TCBFLGS+1,TCBFETXR .     IS THERE AN ETXR INDICATED.
         BCR   8,XRETN .                RETURN IF NOT
         L     11,CVT0EF00 .            GET ADDR OF EXIT EFFECTOR.
         L     X1,TCBIQE .              GET IQE ADDR.
         LCR   X1,X1 .                  COMPLEMENT ADDR.
         BR    11 .                     TO SCHEDULE ETXR.
* REG 14 CONTAINS RETURN TO MAIN-LINE EOT.
         SPACE 3
* POST ECB IF INDICATED.
         USING EDBSE,XBSE
         USING  TCB,XTCB
ETPOST   L     X1,TCBECB .              GET ECB ADDR FROM TCB.
         LTR   X1,X1 .                  IS ECB PRESENT.
         BCR   8,XRETN .                BR IF NOT
* VALIDITY CHECK ECB.
         C     XTCB,TCBJSTCB .          IS J/S AT EOT
         BE    ETPSU .                  BR IF YES.
         L     XWKA,0(0,X1) .           GET RB FROM ECB.
         LA    XWKA,0(0,XWKA)
         LA    6,ETECBER .              GET ADDR OF ERROR RTN.
         TM    0(X1),X'40' .            IS THE ECB POSTED.
         BCR   1,6 .                    BR IF YES TO ABTERM.
         TM    0(X1),X'80' .            IS ECB WAITING
         BC    12,ETPSU .               NO, POST ECB
         TM    3(X1),X'03' .            IS RB ADDR ON WD BOUNDARY.
         BCR   5,6 .                    BR IF NOT TO ABEND.
         C     XWKA,CVTMZ00 .           IS ADDR WITHIN MACH SIZE.
         BCR   10,6 .                   BR IF NOT TO ABEND.
         CLI   RBOPSW-RBSECT(XWKA),X'FF' .IS STORED PSW ENABLED.
         BCR   7,6 .                    BR IF NOT TO ABEND.
         SR    X15,X15 .
         LR    XWKB,XWKA .
         IC    XWKB,K0 .                SET LOW ORDER 8 BITS TO '0'.
         ISK   X15,XWKB .               GET STORAGE KEY.
         LTR   X15,X15 .                IS KEY = 0.
         BCR   7,6 .                    BR IF NOT TO ABEND.
         L     X15,RBOPSW+4-RBSECT(0,XWKA) .GET RH PSW.
         S     X15,K2 .                 SUBTR 2 FROM ADDR.
         CLC   0(2,X15),K0A01 .         WAS SVC 01 ISSUED.
         BE    ETPSU .                  BR IF YES.
         S     X15,K2 .                 SUBTR 2 FROM ADDR.
         CLI   0(X15),X'44' .           WAS AN 'EX' ISSUED.
         BCR   7,6 .                    BR IF NOT.
ETPSU    L     X0,TCBCMP .              SET UP COMPL CODE FOR POST.
ETPSTRET DS    0H
         LA    XRETN,ETB02-ETB03(0,XRETN)  INC BYPASS ERASE    @YA78625
         L     X15,AIGC002B .           GET POST RTN BASE ADDR.
         LR    XRBSAV,XTCB .            SAVE REG XTCB OVER POST.
         B     4(0,X15) .               TO POST BR ENTRY. RETURN IN 14.
* NOTE- REGS 0-3,5,6,12 AND 14 ASSUMED TRANSPARENT OVER POST.
         SPACE
* ABTERM ORIGIN TASK DUE TO INVALID ECB.
ETECBER  DS    0H
         L     X0,TCBOTC .              SET ORIGIN TCB ADDRESS.
         L     X1,ETPSCD1 .             SET ERROR CODE.
         L     13,AIEAB01 .             GET ENTRY TO ABTERM.
         BALR  XRETN,13 .               TO ABTERM ORIGIN TASK.
         B     ETB02 .
         EJECT
*            THE FOLLOWING ROUTINE WILL CAUSE A CONDITIONAL FREEMAIN TO
*         BE ISSUED IF ABEND IS IN CONTROL.  THIS IS ACCOMPLISHED BY
*         SETTING A BIT WHICH ABTERM WILL TEST IF ENTERED.  IF THE BIT
*         IS ON IN ABTERM, RETURN WILL BE MADE TO ABEND.          M3806
*
FREEMAIN BALR  8,0 .                     SET UP BASE              M3806
         USING *,8 .                     USE REGISTER 8 AS BASE   M3806
         ST    14,SAVERTN .              SAVE RETURN REGISTER     M3806
         TM    SCVTFMSA,SCVTSW2 .        Q. IS ABEND IN CONTROL?  M3806
         BZ    OVER .                    NO. CONTINUE             M3806
         OI    SCVTFMSA,SCVTSW1 .        YES.CAUSE CONDITNAL FREE M3806
OVER     TM    SCVTFMSA,SCVTSW3 .        Q. IS THIS FMPAR ENTRY   M3806
         BZ    OVERA .                   NO. CONTINUE             M3806
         NI    SCVTFMSA,255-SCVTSW3 .    TURN FMPAR SW OFF        M3806
         L     15,AFMBRNCH .             LOAD ENTRY TO FREEMAIN   M3806
         B     OVERB .                   TO FREEMAIN              M3806
OVERA    L     15,ARMBRNCH .             GET ENTRY TO FREEMAIN    M3806
OVERB    BALR  14,15 .                   TO FREEMAIN              M3806
         DROP  8 .                                                M3806
         USING *,14 .                    SET UP ADDRESSABILITY    M3806
         NI    SCVTFMSA,255-SCVTSW1 .    TURN OFF SW IF ON        M3806
         L     14,SAVERTN .              RESTORE RETURN REG       M3806
         BR    14 .                      RETURN                   M3806
*
SAVERTN  DS    1F .                      SAVE AREA FOR REG RETURN M3806
*
         TITLE '        EXIT MODULE CONSTANTS'
* EXIT PHASE
AEDBSE   DC    A(EDBSE) .               ADDRESSABILITY OF EXIT.
AIEASCSV DC    V(IEASCSAV) .            SVC REG SAVE AREA.
ATH      DC    V(IEAQTR01) .            TYPE 2,3,4 SVC EXIT.
*                                  ADDRESS OF 3RD STAGE       PDOS64911
AIEA0DS1 DC    V(IEA0DS01) .  EXIT SWITCH (BC15-BC00)         PDOS64911
K253CMP  DC    X'FDFFFFFF'
K255     DC    X'FF000000' .
K72F250  DC    X'FA000048' .            FREE 72 BYTES FROM SUB-POOL 250
K16F255  DC    X'FF000010' .            FREE 16 BYTES FROM        M0183
*                                       SUB-POOL 255.             M0183
K16F253  DC    X'FD000010'              FREE IQE                   1505
ABEND    DC    C'ABEND' .               TEST FOR ABEND FLAG-SVRB  M3525
K4096    DC    F'4096' .
K13      DC    F'13' .                  CONSTANT FOR IRB WORK AREA TEST
AINT025  DC    V(INT025) .              IOS ENTRY TO RETURN 16*'S
AFMBRNCH DC    V(FMBRANCH) .            BR ENTRY TO FREEMAIN.
ARMBRNCH DC    V(RMBRANCH) .            BR ENTRY TO REGMAIN
AIEATYP1 DC    V(IEATYPE1) .            TYPE 1 SVC SWITCH ADDR.
ATAR     DC    V(IEAQTR02) .            T/A REFRESH ENTRY ADDR.
REL217   DC    CL4'217 '           REL WHEN SVC 107 ADDED      @SA72278
*                                  TO EXIT & TCB SIZE          @SA72278
*                                  INCREASED                   @SA72278
         SPACE 1
* CONTENTS DIRECTORY PHASE
AIEADS02 DC    V(IEA0DS02) .            TASK SWITCH ROUTINE.
WTJSTIME DC    V(IEAQJSTM) .            ADDRESS OF 30MIN WAIT AH A38869
CDQCNTRL DC    V(IEAQCS02) .           RETRY ENTRY TO QLK     AH A39386
K500F252 DC    X'FC000500' .           LEN & SP ID FOR FETCH  AH A39970
AIEACS03 DC    V(IEAQCS03) .           ENTRY TO CDEPILOG         A39970
K24F255  DC    X'FF000018' .           FREE 24 BYTES FROM SP 255.
*
FMPLIST  DS    0F
FMLNGH   DC     A(0)
FMADDR   DC    A(0)
         DC    X'80' .                  CODE FOR L TYPE MACRO.
FMSP     DC    X'00' .                  DYNAMIC SUB-POOL NUMBER.
         SPACE
* CONSTANTS FOR EOT MAIN LINE.
         DS    0F
K32F250  DC    X'FA000020' .            USED TO FREE PIE.
         EXTRN IGC002
AIGC002B DC    A(IGC002+2) .            POST RTN ADDRESSABILITY.
ETNQCD   DC    X'80D03000' .            ERROR CD FOR INCOMPLETE ENQS.
GRAPHTTR DC    V(IFFGRTTR) .            EP NAME OF GRAPHICS EOT RTN
         SPACE
* CONSTANTS FOR CLOSE EOT.
         DS    0F
ETCLABCD DC    X'80C03000' .            ERR CD FOR CLOSE ERROR.
         SPACE
* CONSTANTS FOR LOADED PROGRAM RELEASE (IEAQABL)
ACDHKEEP DC    A(CDHKEEP) .             ADDR OF CDHKEEP.
K8F255   DC    X'FF000008' .            PARM FOR FREEING LLE.
ETABCD1  DC    X'80A03000' .            ERR CD FOR OUTSTD'G DESCENDENTS
         SPACE
* CONSTANTS FOR ERASE PHASE
         DS    0F
K216F253 DC    X'FD0000E0' .     PARM FOR FREEING TCB        AD  A58667
K32      DC    F'32'                    USE TO REF F.P. SAVE AREA.
         SPACE
* PURGE TIMER.
         EXTRN IEAQTD01
KANCEL   DC    A(IEAQTD01+2) .          ADDRESSABILITY FOR TIMER CANCEL
K112F243 DC    X'F3000070' .            FREE 112 BYTES FR SP 243  20021
AETMBSE  DC    A(ETMBSE) .              ADDRESSABILITY FOR PURGE TIMER.
EXITSAVE DS    16F .                    REG SAVE AREA             20021
         SPACE
* MSS EOT.
         DS    0F
K253     DC    X'FD000000'
         SPACE
* MSS EOT CONSTANTS.
ADESTX   DC    A(DESTX) .               MSS EOT ENTRY TO CDDESTRY.
         SPACE
* CONSTANTS FOR POST RTN.
AIEAB01  DC    V(IEA0AB00)
ETPSCD1  DC    X'80103000' .            ERR CD FOR INVALID EOT ECB.
K2       DC    F'2'
K0       DC    H'0'
K0A01    DC    X'0A01'
** ADDRESSES OF OUT-OF-LINE SUBROUTINES                        @SA75035
ADQTCB   DC    A(IEADQTCB)         DEQUEUE TCB ROUTINE         @SA75035
         AIF   ('&TSO' NE '1').NOTSO8                             20021
         SPACE 2                                                  20021
*  CONSTANTS FOR TSO                                              20021
ENTRYSET DC    V(IGC07902) .            ENTRY POINT SETTASK       M0600
ATTNEXIT DC    A(IKJATTNX) .            ADR RTN PROC ATTENTION IRB20021
TJBGET   DC    A(GETTJB) .              ADR OF GET TJB ADDR RTN   20021
K72F0    DC    X'00000048' .            FREE 72 BYTES FROM SP 0   20021
K243N253 DC    X'0E000000'         CHG SP FROM 253 TO 243      @SA70798
AGOVRFLB DC    V(GOVRFLB)                                      @SA70798
** ADDRESSES OF OUT-OF-LINE SUBROUTINES                        @SA75035
AETAER   DC    A(ETAER)            DEFERRED ATTENTION RTN      @SA75035
ATAXEPRG DC    A(TAXEPRG)         TAXE PURGE                   @SF75035
.NOTSO8  ANOP                                                     20021
         EJECT
***********************************************************************
*                                                                     *
* THE FOLLOWING ADCON LIST IS USED BY SVC ABEND TO REFERENCE RESIDENT *
* ROUTINES.  LOCATION IEABEND IS POINTED TO BY CVTABEND IN THE CVT.   *
*                                                                     *
***********************************************************************
         ENTRY IEABEND
IEABEND  SCVT  TYPE=RES
         EJECT ,                                               @SA75035
*                                                              @SA75035
** THE FOLLOWING ROUTINES HAVE BEEN MOVED TO THE               @SA75035
** END OF THE MODULE TO INCREASE ADDRESSABILITY.               @SA75035
** FICHE FLAGS HAVE BEEN ADDED ONLY TO THOSE                   @SA75035
** STATEMENTS WHICH HAVE BEEN CHANGED, NOT TO THOSE            @SA75035
** WHICH HAVE BEEN MOVE.                                       @SA75035
*                                                              @SA75035
         SPACE 5                                               @SA75035
* SUBROUTINE TO REMOVE TCB FROM TCB READY QUEUE.
         ENTRY IEADQTCB .               ENTRY FOR ERASE PHASE + ABEND
IEADQTCB DS    0H
         BALR  XRBSE,0
         USING *,XRBSE
         USING TCB,XTCB
         AIF   ('&TSO' NE '1').NOTSO6                             20021
         TM    TCBTSFLG,TCBTSTSK .      IS THIS TSO TASK          20021
         BZ    NOTSO6A .                NO, SKIP TSO PROCESSING   20021
         STM   X0,X15,SAVEEXIT     . SAVE REGS                 @SA75035
         L     XGETTJB,TJBGETA     . ADR OF RTN TO GET TJB ADR @SA75035
         BALR  XRETURN,XGETTJB .        GET TJB, TJBX ADDR        20021
         USING TJB,XTJB .                                         20021
         USING TSCVT,XTSCVT .                                     20021
         USING TJBX,XTJBX .                                       20021
         LH    XTCBNUM,TJBXNTCB .       NUMBER USER TCBS          20021
         BCTR  XTCBNUM,X0 .             DECREMENT TCB NUMB BY ONE 20021
         STH   XTCBNUM,TJBXNTCB .       PLACE CURR NUMBER IN TJBX 20021
         L     XFIRST,TJBXFST .         ADDRESS LOGON TCB         20021
         C     XFIRST,TJBXLAST .        LOGON TCB ON EXITING      20021
         BNE   NORMALTS .               NO,NORMAL TSO EOT PROCESS 20021
         CLI   TJBNEWID,NONEWID .       NEW TJID SPECIFIED FOR REG20021
         BE    LOGONXIT .               NO- LOG USER OFF          20021
         MVI   TJBSTAT,TJBLOGON .       YES-TURN ON TSC LOGON FLG 20021
         OI    TSCVTFLG,TSCLOGON .      TURN ON TSC LOGON FLAG    20021
         B     CNTRELOG .               CONTINUE RELOGON PROCESS  20021
LOGONXIT EQU   * .                                                20021
         XC    TJBEXTNT(WORD),TJBEXTNT .REINITIALIZE TJB          20021
         XC    TJBSDCB(BYTES7),TJBSDCB .TO MAKE AVAILABLE         20021
         XC    TJBUSER(BYTES12),TJBUSER FOR ANOTHER USER          20021
         XC    TJBMONI(WORD),TJBMONI .  CLEAR FIELD               20021
         NI    TJBSTAT2,HOLDOFF .       TURN OFF HOLD FLAG        20021
         L     X15,TJBRCB .             GET RCB ADDR          AH A46544
         USING RCB,X15 .                SET UP ADDRESSABILITY AH A46544
         NI    RCBFLG,255-RCBFSO .      RESET FLAG            AH A46544
         DROP  X15 .                                          AH A46544
LOGOFF   EQU   * .                                                20021
         MVI   TJBSTAT,TJBDISC+TJBNJB . TURN ON TJB DISCONECT     20021
*                                        AND NO JOB FLAGS         20021
         OI    TSCVTFLG,TSCDISC .       TURN ON TSC DISCONECT FLG 20021
CNTRELOG EQU   * .                                                20021
         TM    CVTTSFLG,CVTTSRDY .      IS TS STILL ACTIVE        20021
         BZ    RESTORE .                NO, BYPASS REMAINING      20021
*                                       TS PROCESSING             20021
         L     XENTRY,TSCVTI01 .        ENTRY POINT OF TSIP       20021
*  BRANCH ENTRY TO TSIP TO LOG USER OFF                           20021
         TSEVENT LOGOFF,ENTRY=BRANCH,TJID=(XTJID)
*                                                                 20021
*  BRANCH ENTRY TO POST TO POST TSC ECB                           20021
         SR    XCODE,XCODE .            ZERO REG                  20021
         LA    XCODE,TSCCODE .          CDE USED BY POST FOR ECB  20472
         L     XPECB,TSCVTECB .         ADDR ECB TABLE            20021
         USING TSECB,XPECB .                                      20021
         LA    XPECB,TSCECB .           ADDR OF TSC ECB           20021
         DROP  XPECB .                                            20021
         L     XPTCB,TSCVTTSC .         ADDR TSC TCB              20021
         L     XPOST,CVT0PT01 .         ADDR OF BRANCH ENTRY POST 20021
         BALR  X14,XPOST .              POST TSC ECB              20021
         L     XRCB,TJBRCB .            ADDR OF RCB               20021
         USING RCB,XRCB .                                         20021
         L     XRCT,RCBRCT .            ADDR OF RCT TCB           20021
         DROP  XRCB .                                             20021
         USING TCB,XRCT .                                         20021
         SR    XWORK,XWORK .            ZERO WORK REG             20021
         ST    XWORK,TCBLTC .           ZERO LTC OF RCT TCB       20021
         B     RESTORE .                BRANCH TO RESTORE REGS    20021
         DROP  XRCT .                                             20021
         USING TCB,XNXTCB .                                       20021
NORMALTS EQU   * .                                                20021
         C     XTCB,TJBXLAST .          IS THIS EOT FOR           20021
*                                       LAST TS TASK              20021
         BNE   RESTORE .                NO, DO NOT UPDATE         20021
*                                       TJBXLAST POINTER          20021
         LR    XNXTCB,XFIRST .                                    20021
SRCHTCB  EQU   * .                                                20021
         LR    XFIRST,XNXTCB .          UPDTE TO LAST TCB CHECKED 20021
         L     XNXTCB,TCBTCB .          ADR NXT TCB ON TS READY Q 20021
         CR    XNXTCB,XTCB .            IS THIS TCB EXITING       20021
         BNE   SRCHTCB .                NO, CONTINUE SEARCH       20021
*                                       OF TS READY               20021
         ST    XFIRST,TJBXLAST .        UPDATE TJBX LAST POINTER  20021
         DROP  XNXTCB .                                           20021
RESTORE  EQU   * .                                                20021
         LM    X0,X15,SAVEEXIT     . RESTORE REGS              @SA75035
NOTSO6A  EQU   * .                                                20021
.NOTSO6  ANOP                                                     20021
         L     X1,CVTHEAD .             GET ADDR OF TOP TCB.
EPTCBLP  DS    0H
         CLR   X1,XTCB .                IS THIS THE TCB AT EOT?
         BE    EPFND .                  BR IF YES.
         LR    XWKB,X1 .                SAVE ADDR OF LAST TCB.
         L     X1,TCBTCB-TCB(0,X1) .    GET NEXT TCB ON READY QUEUE
         B     EPTCBLP
EPFND    DS    0H
         MVC   TCBTCB-TCB(4,XWKB),TCBTCB .UPDATE TCB READY QUEUE.
         XC    TCBRBP(4),TCBRBP .        ZERO RB POINTER SO RB    M3329
*                                          CANNOT BE PICKED UP AS M3329
*                                          VALID RB               M3329
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE4
         SPACE 2
*  T I M E - S L I C E    I N T E R F A C E
         SPACE 1
* AFTER THE TCB FOR THE TERMINATING TASK HAS BEEN DEQUEUED FROM
* THE TCB READY QUEUE, A TEST IS MADE FOR THE TIME-SLICE BIT (TCBFTS).
* IF THE TIME-SLICE BIT IS SET IN THE TCB, THE CORRESPONDING
* TIME-SLICE CONTROL ELEMENT (TSCE) MUST BE UPDATED TO ELIMINATE ALL
* REFERENCE TO THE TERMINATING TCB.
         SPACE 1
         SPACE 1
         SPACE 1
         TM    TCBFLGS+1,TCBFTS .       IS ENDING TASK A TIME-SLICE
*                                       TASK
         BC    8,ENDTMSL .              NO, SKIP TIME-SLICE CODE
         L     TSCEREG,CVTTSCE .        LOAD TSCE PTR INTO REGISTER
         DROP  XCVT
         USING TSCE,TSCEREG
FINDTSCE EQU   *
         CLC   TSDPRTY,TCBLMP+1 .       IS TCB IN THIS TIME-SLICE GROUP
         BC    8,CHKFST .               YES, BR TO CHECK PTR TO 'FIRST'
         LA    TSCEREG,NEXTTSCE(TSCEREG) .LOAD ADDR OF NEXT TSCE
         BC    15,FINDTSCE .            BR TO TEST THIS TSCE
CHKFST   EQU   *
         L     FSTREG,TSFIRST-1 .       LOAD ADDR OF 'FIRST' TCB IN
*                                       TSCE
         LA    FSTREG,0(FSTREG) .       CLEAR THE HIGH ORDER BYTE
         L     LSTREG,TSPLAST .         LOAD ADDR OF 'LAST' TCB
         CR    FSTREG,XTCB .            'FIRST' SAME AS ENDING TCB ?
         BC    7,CHKLST .               NO, BR TO CHECK 'LAST' TCB
         CR    FSTREG,LSTREG .          IS 'FIRST' EQUAL TO 'LAST' -IE
*                                       ONLY ONE TCB IN TMSL GROUP ?
         BC    7,UPDTFST .              NO, BR TO UPDATE 'FIRST' PTR
         MVI   TSFIRST,X'00' .          YES, ZERO OUT  'FIRST', 'LAST',
         MVC   TSFIRST+1(10),TSFIRST .  AND 'NEXT' IN THE TSCE.
         BC    15,ENDTMSL .             BR TO SKIP OTHER TIME-SLCE CODE
UPDTFST  EQU   *
         SPACE 1
         DROP  XTCB
         USING TCB,FSTREG
         SPACE 1
         MVC   TSFIRST(3),TCBTCB+1 .    UPDT 'FIRST' PTR IN TSCE  M0815
         L     FSTREG,TCBTCB .          LOAD NEXT TCB ON READY QUEUE
*                                       NEW 'FIRST' PTR.
         C     XTCB,TSPNEXT .           ENDING TASK SAME AS 'NEXT' ?
         BC    7,CHKLST .               NO, BR TO CHECK 'LAST' PTR
         MVC   TSNEXT(3),TSFIRST .      UPDATE 'NEXT' PTR TO SAME AS
*                                       'FIRST'
         BC    15,ENDTMSL .             SKIP REST OF TIME-SLICE CODE
         SPACE 1
CHKLST   EQU   *
         CR    LSTREG,XTCB .            IS 'LAST' EQUAL TO ENDING TCB
         BC    7,CHKNXT .               NO, BR TO CHECK 'NEXT' PTR.
TESTLST  EQU   *
         LR    LSTREG,FSTREG .          SAVE ADDR OF PREVIOUS TCB
         L     FSTREG,TCBTCB .          LOAD ADDR OF NXT TCB ON READY Q
         LTR   FSTREG,FSTREG .          IS THIS THE END OF THE READY Q?
         BC    8,UPDTLST .              YES,BR TO STORE SAVED TCB AS
*                                       'LAST'.
         CLC   TSDPRTY,TCBLMP+1 .       IS NEXT TCB ON QUEUE IN T/S
*                                       GROUP?
         BC    8,TESTLST .              YES, BR TO TEST AGAIN FOR END.
UPDTLST  EQU   *
         ST    LSTREG,TSPLAST .         STORE ADDR OF PREVIOUS TCB ON
*                                       READY QUEUE IN 'LAST'.
         C     XTCB,TSPNEXT .           WAS 'NEXT' EQUAL TO 'LAST' ?
         BC    7,ENDTMSL .              NO,BR TO SKIP TIME-SLICE CODE.
         MVC   TSNEXT(3),TSFIRST .      YES, THEN MOVE 'FIRST' TO
*                                       'NEXT'
         BC    15,ENDTMSL .             BR TO SKIP TIME-SLICE CODE
CHKNXT   EQU   *
         L     NXTREG,TSPNEXT .         LOAD ADDR OF 'NEXT' TCB IN TSCE
         CR    XTCB,NXTREG .            IS 'NEXT' EQUAL TO ENDING TASK?
         BC    7,ENDTMSL .              NO,BR TO END OF TMSL CODE.
         SPACE 1
         DROP  FSTREG
         USING TCB,NXTREG
         SPACE 1
         MVC   TSNEXT(3),TCBTCB+1 .     MOVE NEXT TCB ON READY QUEUE
*                                       TO 'NEXT'.
         SPACE 1
         DROP  NXTREG
         USING TCB,XTCB
ENDTMSL  EQU   *
         L     XCVT,CVTPTR .            SET UP CVT REG. AGAIN
         DROP  TSCEREG
         USING CVTSECT,XCVT
         SPACE 1
.NSLICE4 ANOP
         BR    XRETN .                  RETURN TO CALLER.
         DROP  XRBSE
         AIF   ('&TSO' NE '1').NOTSOP1                         @SA75035
         TITLE '   TAXE PURGE ROUTINE'                            20021
         ENTRY IEAKJXP .                                          20021
         DS    0H .                                               20021
IEAKJXP  EQU   * .                                                20021
TAXEPRG  EQU   * .                                                20021
         BALR  X15,X0 .                                           20021
         USING *,X15 .                                            20021
         USING TCB,XTCB .                                         20021
         USING TJB,XTJB .                                         20021
         USING TJBX,XTJBX .                                       20021
         USING CVTSECT,XCVT .                                     20021
         STM   X0,X15,SAVEEXIT     . SAVE REGS OF CALLER       @SA75035
         DROP  X15 .                                              20021
         BALR  XPBASE,X0 .                                        20021
         USING *,XPBASE .                                         20021
         L     XCVT,CVTPTR .            ADDRESS OF CVT            20021
*                                       NOT PASSED ABEND          20021
         L     XGETTJB,TJBGETA     . ADR OF RTN TO GET TJB ADR @SA75035
         BALR  XRETURN,XGETTJB .        BRANCH TO GET TJB ADDR    20021
*        ADDRESS OF IQE FOR AN IRB WHICH INDICATES USER EXIT      20021
         L     XAIQE,TJBXAIQE .         ROUTINE BEING SCHEDULED   20021
         LTR   XAIQE,XAIQE .            IQE ADDRESS NONZERO       20021
         BZ    NOSCHED .                NO,BR AROUND PROCESSING   20021
*                                       FOR ATTN EXIT BEING SCHED 20021
         USING IQESECT,XAIQE .                                    20021
         C     XTCB,IQETCB .            IQE FOR THIS TCB          20021
         BNE   NOSCHED .                NO,BRANCH AROUND IQE PROC 20021
         XC    TJBXAIQE(WORD),TJBXAIQE .ZERO AIQE FIELD SINCE     20021
*                                       TAXE WILL BE FREED        20021
NOSCHED  EQU   * .                                                20021
         MVI   TJBATTN,ZEROATTN .       ZERO ATTENTION CNT IN TJB 20021
         SR    XSTAX,XSTAX .            CLEAR REG FOR STAX COUNT  20021
         IC    XSTAX,TJBSTAX .          STAX COUNT FROM TJB       20021
         L     XTAXE,TJBXTAXE .         ADDRESS FIRST TAXE ON QU  20021
         LA    XPREV,TJBXTAXE .         ADDRESS LINK FLD FOR TAXE 20021
         LTR   XTAXE,XTAXE .            ANY TAXES ON QUEUE        20021
         BZ    COMPLETE .               NO-PURGE COMPLETE         20021
TCBCK    EQU   * .                                                20021
         USING TAXE,XTAXE .                                       M2952
         L     XWTAXE,TAXELNK .         ADDRESS OF NEXT TAXE      M2952
         C     XTCB,TAXETCB .           TAXE FOR THIS TCB         M2952
         BE    TAXEFND .                YES-DEQUEUE THIS TAXE     M2952
         LA    XPREV,TAXELNK .          ADDRESS OF LINK FIELD     M2952
         B     NXTAXECK .               BRANCH TO CHECK NEXT TAXE M2952
TAXEFND  EQU   * .                                                20021
         DROP  XTAXE .                                            M2952
         USING RBSECT,XTAXE .                                     20021
         TM    RBSTAB2,RBFACTV .        TAXE ACTIVE               20021
         BZ    NOACTV .                 NO- TAXE NOT ON RB QUEUE  20021
         OI    RBSTAB2,RBFDYN .         MARK RB TO BE FREED AT EX 20021
         B     TAXEDEQ .                BRANCH TO DEQUEUE TAXE    M2180
NOACTV   EQU   * .                                                20021
*                                                                 20021
*  BRANCH ENTRY TO FREEMAIN TO FREE P/P SAVE AREA                 20021
*                                                                 20021
         L     XWKTXP,RBPPSAV .         ADDRESS OF P/P SAVE AREA  20021
         LA    XWKTXP,0(XWKTXP) .       CLEAR HIGH ORDER BYTE     M2952
         LTR   XWKTXP,XWKTXP .          Q. IS THIS A RECURSION?   M2952
         BZ    TAXEDEQ .                YES. SKIP FREEQUE PROC    M2952
         XC    RBPPSAV(4),RBPPSAV .     ZERO NOW. POSIBL RECURSN  M2180
         L     X0,K72F250A         . SUBPOOL NUMBER AND LENGTH @SA75035
         L     XRETN,AFREE         . @ CONDITIONAL FREEMAIN    @SA75035
         BALR  XRETN,XRETN         . GOTO CONDITIONAL FREEMAIN @SA75035
         DROP  XTAXE .                                            M2180
         USING TAXE,XTAXE .                                       M2180
TAXEDEQ  EQU   * .                                                M2180
         MVC   ZERO(WORD,XPREV),TAXELNK .DEQUEUE TAXE             20021
         TM    TAXESTAT,TAXEFREQ .      IS TAXE AVAILABLE         20021
         BO    SKPDECR .                NO-SKIP DECREMNT STAX CNT 20021
         BCTR  XSTAX,ZERO .             DECREMENT STAX COUNT BY 1 20021
SKPDECR  EQU   * .                                                20021
         DROP  XTAXE .                                            20021
NXTAXECK EQU   * .                                                M2952
         LTR   XWTAXE,XWTAXE .          ANY MORE TAXES            20021
         BZ    FINISH .                 NO, ALL TAXES             20021
*                                       THIS TASK GONE            20021
         LR    XTAXE,XWTAXE .           NXT TAXE NOW CURRENT TAXE 20021
         B     TCBCK .                  CHECK OUT NEXT TAXE       20021
FINISH   EQU   * .                                                20021
*                                                                 20021
*  STATUS MACRO TO START ANY STOPPED SUBTASKS                     20021
*                                                                 20021
         LA    X0,7 .                   PUT START CODE IN RG0 AH  M1545
         SR    X1,X1 .                  ALL TASK CHANGE IND   AH  M1545
         L     XSTATUS,ENTRYSTA    . GET ENTRY TO SVC 79       @SA75035
         BALR  XRETN,XSTATUS .          TO SVC 79             AH  M1545
         STC   XSTAX,TJBSTAX .          UPDTE AVAILABLE STAX CNT  20021
COMPLETE EQU   * .                                                20021
         LM    X0,X15,SAVEEXIT     . RESTORE REGS              @SA75035
         DROP  XPBASE .                                           20021
         BR    XRETURN .                RETURN TO CALLER          20021
         TITLE '              ATTENTION IRB PURGE'                20021
ETAER    EQU   * .                                                20021
         TM    TCBTSFLG,TCBTSTSK .      IS THIS A TIME-SHARING TSK20021
         BCR   8,XRETN .                NO, RETURN TO MAINLINE EOT20021
         BALR  XTMBSE,0 .                                         20021
         USING *,XTMBSE .                                         20021
         STM   XWK,X11,DEFRSAVE .       SAVE SOME REGISTERS       20021
         L     XCVT,CVTPTR .            GET CVT ADDRESS           20021
         L     XWK,CVTIERLC .           GET ADDRESS RQE QUEUE     20021
         LA    XWK,IQEQUE(XWK) .        INCREMENT TO IQE QUEUE    20021
         LR    X11,XWK .                SAVE ADDR OF BEGIN OF Q   20021
DEFERNO2 EQU   *                                                  20021
         LR    XEN02,XWK .              SAVE IQE PTR              20021
         L     XWK,IQELINK(XEN02) .     GET CURRENT IQE ADDRESS   20021
         LTR   XWK,XWK .                TEST FOR END OF QUEUE     20021
         BM    DEFERNO3 .               BR IF END OF IQE QUEUE    20021
         L     X10,IQETCBA(XWK) .       GET TCB ADDR FROM IQE     20021
         LA    X10,0(X10) .             CLEAR HIGH ORDER BYTE     20021
         CR    X10,XTCB .               IQE FOR THIS TCB          20021
         BNE   DEFERNO2 .               NO, GET NEXT IQE          20021
         L     X10,IQEIRBA(XWK) .       GET IRB ADDR FROM IQE     20021
         USING RBSECT,X10 .                                       20021
         TM    RBSTAB2,RBATTN .         IS IRB AN ATTENTION IRB   20021
         BZ    DEFERNO2 .               NO, GET NEXT IQE          20021
         DROP  X10 .                                              20021
         MVC   IQELINK(4,XEN02),IQELINK(XWK) . DEQUEUE IQE        20021
         CL    XWK,4(X11) .             LAST IQE DEQUEUED         20021
         BNE   DEFERNO3 .               BR IF NOT                 20021
         ST    XEN02,4(X11)             SET PTR TO LAST IQE       20021
DEFERNO3 EQU   *                                                  20021
         LM    XWK,X11,DEFRSAVE .       RESTORE SAVED REGISTERS   20021
         BR    XRETN .                  RETURN TO CALLER          20021
DEFRSAVE DS    4F .               SAVE AREA FOR IQE DEQUEUE       20021
         DROP  XTMBSE .                                           20021
         EJECT ,                                               @SA75035
*                                                              @SA75035
** CONSTANTS REQUIRED BY ABOVE TSO ROUTINES                    @SA75035
*                                                              @SA75035
SAVEEXIT DC    16A(0)              REGISTER SAVEAREA           @SA75035
AFREE    DC    A(FREEMAIN)         @ CONDITIONAL FREEMAIN      @SA75035
TJBGETA  DC    A(GETTJB)           @ GET TJB ADDR RTN          @SA75035
K72F250A DC    X'FA000048'         FREE 72 BYTES SP0           @SA75035
ENTRYSTA DC    V(IGC07902)         @ SETTASK RTN               @SA75035
.NOTSOP1 ANOP  ,                                               @SA75035
         TITLE '             EXIT MODULE COMMENTARY'
*-ROUTINE NAME- EXIT
         SPACE
*-FUNCTIONS-
*            THIS CODE IS ENTERED AS THE RESULT OF ISSUING AN SVC 3
*         INSTRUCTION. THE FUNCTION OF EXIT CODE IS TO RELEASE
*         CERTAIN RESOURCES NO LONGER NEEDED DUE TO THE COMPLETION OF
*         A PARTICULAR PROGRAM LEVEL (RB LEVEL) ON A PARTICULAR TASK.
*         IN ADDITION, EXIT PREPARES THE SYSTEM ENVIRONMENT FOR
*         THE NEXT PROGRAM LEVEL OF THE TASK.
*            SPECIFIC HANDLING IS BASED UPON THE TYPE OF RB EXITING
*         OR OTHER DISTINGUISHING CONDITION  AS FOLLOWS-
*         1. IF EXIT IS FROM A PRB, REGISTERS 0-15 (IN IEASCSAV) ARE
*            SAVED IN THE TCB. IF THE PRB IS NOT THE LAST PRB ON THE
*            TCB, CDEXIT IS ENTERED. WHEN CDEXIT RETURNS CONTROL, THE
*            FINAL STAGE (SEE ITEM NO.5) IS PERFORMED. IF EXIT IS FROM
*            THE LAST PRB ON THE TCB, EOT IS ENTERED.
*         2. IF EXIT IS FROM AN SVRB, THE TRANSIENT AREA HANDLER IS
*            ENTERED TO PERFORM SVRB EXITING FUNCTIONS. WHEN CONTROL IS
*            RETURNED BY THE T.A.H., THE REGISTERS THAT HAD BEEN SAVED
*            IN THE SVRB (2-14) AND REGISTERS 0,1 AND 15 PASSED BACK BY
*            THE SVC ROUTINE WILL BE IN THE TCB. THE FINAL STAGE OF
*            EXIT (SEE ITEM NO.5) IS PERFORMED.
*         3. IF EXIT IS FROM AN IRB, THE IQE IS RETURNED TO THE
*            'NEXT AVAILABLE' POINTER AND IF ANY ADDITIONAL IQE'S ARE
*            QUEUED ON THE IRB, PREPARATION IS MADE TO REENTER THE
*            ASYNCHRONOUS ROUTINE AND THE DISPATCHER ENTERED. IF NO
*            ADDITIONAL REQUESTS ARE PRESENT, REGISTERS ARE MOVED FROM
*            THE IRB TO THE TCB AND THE FINAL STAGE OF EXIT (SEE ITEM
*            NO.5) IS PERFORMED.
*         4. IF EXIT IS FROM AN SIRB, THE SIRB IS DEQUEUED FROM THE
*            SYSTEM ERROR TCB, THE RB ACTIVE BIT TURNED OFF AND THE
*            DISPATCHER ENTERED.
*         5. FINAL STAGE OF EXIT-
*            IN THIS STAGE OF EXIT, THE EXITING RB IS DEQUEUED FROM
*            ITS TCB'S RB QUEUE AND FREED IF FLAGGED DYNAMIC. A CHECK
*            IS MADE TO DETERMINE WHETHER THE PREVIOUS RB LEVEL IS
*            WAITING AND IF IT IS, A TASK SWITCH IS PERFORMED BY
*            SETTING 'NEW' = 0. AN ADDITIONAL CHECK IS MADE ON EXITING
*            IRB'S. IF THE IRB USE COUNT IS NOT = 0, THE RB IS NOT
*            FREED EVEN THOUGH THE DYNAMIC BIT IS ON. PROBLEM PROGRAM
*            SAVE AREAS ASSOCIATED WITH IRB'S ARE FREED ALONG WITH THE
*            IRB'S.
         SPACE
*-ENTRY POINT NAMES-
*         1. IGC003 (SVC EXIT)
         SPACE
*-CONTAINED IN MODULE- IEAQED00
         SPACE
*-ATTRIBUTES-
*         .TYPE 1 SVC.
*         .SUPERVISOR STATE AND KEY.
*         .REENTRANT
*         .SERIALLY REUSABLE.
         SPACE
*-APPLICABILITY- OPTION 4 SYSTEMS.
         SPACE
*-EXTERNAL REFERENCES
*         .IEAQTR01- SVRB EXIT TO PROCESS RETURNING TYPE 2,3,4 SVC'S.
*         .IEAQTR02- ENTRY PT. TO T/A REFRESH.
*         .IEASCSAV- SVC REG SAVE AREA.
*         .FMBRANCH- BRANCH ENTRY POINT TO FREEMAIN.
*         .INT025-   IOS INTERFACE TO RETURN 16*'S.
         SPACE
*-SVC USAGE
*         .FREEMAIN (BRANCH ENTRY) SUB POOLS 250, 253 AND 255.
         SPACE
*-INPUT- NONE
         SPACE
*-OUTPUT- NONE
         SPACE
*-ENTRY POINTS-
*         1. IGC003- THE PSW IS DISABLED FOR SYSTEM INTERRUPTS, IN
*                    SUPERVISOR STATE WITH THE SUPERVISOR PROTECTION
*                    KEY.
*                    REGISTERS-
*                    0,1,15 ARE SAME AS WHEN THE ROUTINE EXITED.
*                    3-     CVT ADDRESS.
*                    4-     CURRENT TCB ADDRESS.
*                    5-     CURRENT RB ADDRESS.
*                    14-    RETURN ADDRESS (NOTE USED BY EXIT. RETURN
*                           IS MADE TO THE DISPATCHER.
*                    2,6-13 ARE IRRELEVANT.
*                    (NOTE- ALL REGISTERS FROM EXITING CODE ARE SAVED
*                     IN LOCATION 'IEASCSAV' IN LOW CORE).
         SPACE
*-EXIT POINTS-
*         .EOT- SEE INTERFACES BELOW.
*         .RETURN TO DISPATCHER AFTER DEQUEUING RB.
*           PSW- SUPV STATE, SUPV KEY, DISABLED FOR SYSTEM INTERRUPTS.
*           REGS- IRRELEVANT. CURRENT REGS FOR EXITING TASK ARE STORED
*           IN ITS TCB.
*         .RETURN TO DISPATCHER AFTER RESCHEDULING IRB.
*           PSW- SUPV STATE, SUPV KEY, DISABLED FOR SYSTEM INTERRUPTS.
*           REGS- IRRELEVANT. REENTRY REGS FOR ASYNCH RTN. ARE IN TCB.
         SPACE
*-ERROR EXIT POINTS- NONE
         SPACE
*-TABLES AND CONTROL BLOCKS REFERENCED.
*         .CVT-
*           CVT0DS   (NOT ALTERED)
*           CVTEXIT  (NOT ALTERED)
*           CVTTCBP  (NOT ALTERED)
*         .TCB-
*           TCBRBP   (ALTERED)
*           TCBPIE   (NOT ALTERED)
*           TCBGRS   (ALTERED)
*         .RB
*           RBPPSAV  (NOT ALTERED)
*           RBSIZE   (NOT ALTERED)
*           RBSTAB   (ALTERED)
*           RBEP     (NOT ALTERED)
*           RBOPSW   (ALTERED)
*           RBIQE    (ALTERED)
*           RBWCF    (NOT ALTERED)
*           RBLINK   (ALTERED)
*           RBGRSAV  (NOT ALTERED)
*         .IQE- (16*)
*           IQELNK   (ALTERED)
*           IQEPARM  (NOT ALTERED)
*           RQEIOB   (NOT ALTERED)
*           RQEDEB   (NOT ALTERED)
*         .PIE-
*           PIEPSW   (NOT ALTERED)
*           (1ST TIME LOGIC SWITCH) (ALTERED)
         SPACE
*-LIST ORIGINS, TABLES, CONTROL BLOCKS INCLUDED- NONE
         SPACE
*-RESTRICTIONS ON USE OF ROUTINE- NONE
         SPACE
*-NOTES- NONE
         SPACE
*-INTERFACES-
*         .EOT-  BRANCH TO END OF TASK WHEN CONTROL RETURNS FROM LAST
*                RB LEVEL ON TASK. CURRENT SYSTEM EXPECTS EOT CONDITION
*                TO OCCUR UPON EXIT FROM A PRB ONLY. CONTROL DOES NOT
*                RETURN FROM EOT PROCESSING TO EXIT.
*           PSW- DISABLED, SUPV STATE, SUPV KEY.
*           REGISTERS-
*                2-           ADDRESSABILITY (EDBSE)
*                3-           CVT ADDRESS
*                4-           CURRENT TCB ADDRESS
*                5-           CURRENT RB ADDRESS
*                14-          RETURN REG (ADDRESS OF TYPE 1 EXIT)
*                0,1,6-13,15- IRRELEVANT.
*         .SVRB EXIT- BR TO TRANSIT AREA HANDLER CODE TO RESTORE REGS
*                FROM SVRB AND PERFORM EXIT HANDLING FOR TYPE 3 AND 4
*                SVC ROUTINES. CONTROL RETURNS TO EXIT CODE.
*           PSW- DISABLED, SUPV STATE, SUPV KEY.
*           REGISTERS-
*                0,1,15-  PASS-BACK REGS FROM SVC RTN.
*                3-5-     ENVIRONMENTAL REGS.
*                2-11,13- IRRELEVANT.
*                12-      ADDRESS OF TAH RTN BEING ENTERED.
*                14-      RETURN ADDRESS.
*           REGISTERS CONSIDERED TRANSPARENT OVER INTERFACE-
*                3-5
*         .IEAQTR02- BR TO T/A REFRESH FUNCTION. CONTROL IS GIVEN TO
*          DISPATCHER AFTER REFRESH.
*           PSW- DISABLED, SUPV STATE AND KEY.
*           REGISTERS-
*                0-2,5-11,13-15  IRRELEVENT.
*                3               CVT ADDR.
*                4               CURRENT TCB ADDR.
*                12              ADDR OF IEAQTR02.
*         .CDEXIT- BR TO CONTENTS DIRECTORY EXIT CODE. CONTROL IS
*                RETURNED VIA RETURN REG.
*           PSW- DISABLED, SUPV STATE, SUPV KEY.
*           REGISTERS-
*                3-5        ENVIRONMENTAL REGS.
*                0-2,6-13-  IRRELEVANT
*                14-        RETURN REG.
*           REGISTERS CONSIDERED TRANSPARENT OVER INTERFACE-
*                3-5
*         .BRANCH ENTRIES (2) TO FREEMAIN (R FORM)- TO FREE PP SAVE
*                AREA AND RB. CONTROL IS RETURNED VIA RETURN REG.
*           PSW- DISABLED, SUPV STATE, SUPV KEY.
*           REGISTERS-
*                0,1,3-5,14-  STD SVC INTERFACE VALUES.
*                2,6-13,15-   IRRELEVANT TO GETMAIN.
*           REGISTERS CONSIDERED TRANSPARENT OVER INTERFACE-
*                2-7,9-13
*         .INT025 (IOS)- BR TO IOS RTN TO RETURN 16*'S THAT WERE USED
*                TO SCHEDULE ASYNCHRONOUS EXIT RTNS. NOTE AN EXCEPTION
*                TO THIS FOR 16* SCHEDULING OF THE SIRB. IN THIS
*                INSTANCE THE 16* IS RETURNED BY THE ERROR RTN OR
*                PURGE (IN CASE OF AN ABEND)
*           PSW- DISABLED, SUPV STATE, SUPV KEY.
*           REGISTERS-
*                1 -            ADDR OF 16* BEING RETURNED.
*                2 -            ADDR OF IOB FROM 16*.
*                3 -            ADDR OF DEB FROM 16*.
*                5 -            IOS BASE VALUE.
*                8 -            RETURN REG
*                9 -            ENTRY POINT ADDR (INT025)
*                0,4,6,7,10-15- IRRELEVANT TO IOS.
*           REGISTERS CONSIDERED TRANSPARENT OVER INTERFACE-
*                0,4,6
         TITLE '             CONTENTS DIRECTORY EXIT FUNCTIONS'
*-ROUTINE NAMES- CDEXIT (CONTENTS DIRECTORY EXIT)
*                CDHKEEP (CONTENTS DIRECTORY HOUSEKEEPING)
*                CDDESTRY (CONTENTS DIRECTORY FREE CONTROL BLOCKS)
         SPACE
*-FUNCTIONS-
*        -CDEXIT-
*           CDEXIT DECREMENT THE USE/RESPONSIBILIY COUNT IN THE MAJOR
*           CDE OF THE EXITING MODULE AND PLACE THE RBPGMQ FIELD
*           CONTENTS OF THE EXITING RB INTO THE MAJOR CDE RB POINTER
*           FIELD. IF THERE IS AN ADDITIONAL REQUEST FOR THE USE OF
*           THE MODULE, THE QUEUED, WAITING RB IS MADE READY AND ITS
*           PSW IS ALTERED TO ENTER CONTENTS SUPERVISOR CODE AT
*           LOCATION 'CDEPILOG'. REENTRY INTO THE MODULE IS THUS
*           IMPLEMENTED WHEN THE READIED RB GETS CONTROL. THE TASK
*           SWITCH ROUTINE IS INVOKED TO SWITCH CONTROL TO THE NEWLY
*           READIED TASK IF IT OF HIGHER PRIORITY THEN THE CURRENT
*           TASK. IF THERE ARE NO ADDITIONAL REQUESTS FOR THE MODULE,
*           'CDHKEEP' IS ENTERED.
*        -CDHKEEP-
*           THIS ROUTINE CHECKS WHETHER THE EXITING MODULE SHOULD BE
*           FREED FROM OR KEPT IN THE SYSTEM. IF THE USE/RESPONSIBILITY
*           COUNT IS NOT ZERO THE MODULE IS KEPT. IF THE COUNT IS ZERO
*           AND THE MODULE IS NOT REUSABLE, 'CDDESTRY' IS ENTERED TO
*           FREE THE MODULE. IF THE MODULE IS EITHER REENTRANT OR
*           SERIALLY REUSABLE, THE RELEASE FLAG IS SET IN THE MAJOR
*           CDE OF THE MODULE AND THE PURGE FLAG SET IN THE QUEUE
*           ORIGIN FIELD OF THE APPROPRIATE CDE QUEUE. THUS, IF IT IS
*           NECESSARY TO RELEASE STORAGE SPACE, OTHER SYSTEM FUNCTIONS
*           WILL BE ABLE TO FREE THE CORE OCCUPIED BY THE UNUSED
*           MODULES AND CONTROL ELEMENTS.
*        -CDDESTRY-
*           THIS ROUTINE FREES THE CORE WHICH THE MODULE OCCUPIES
*           USING THE EXTENT LIST AS THE INPUT PARAMETER LIST TO
*           FREEMAIN. THE CDE'S, BOTH THE MAJOR AND ALL MINORS THAT
*           MAY FOLLOW, ARE DEQUEUED FROM THE JPAQ. THE EXTENT LIST
*           AND THE CDE'S ARE THEN FREED.
         SPACE
*-ENTRY POINT NAMES-
*        .CDEXIT  - ENTRY TO CONTENTS SUPV EXIT PROCESSING.
*        .CDHKEEP - ENTRY TO C/S EXIT HOUSEKEEPING PROCESSING.
*        .CDDESTRY- ENTRY TO C/S EXIT PROCESSING TO FREE CORE USED BY
*                   THE EXITING MODULE AND IT CONTROL BLOCK ELEMENTS.
         SPACE
*-CONTAINED IN MODULE- IEAQED00
         SPACE
*-ATTRIBUTES-
*        RESIDENT, SUPERVISOR STATE, DISSABLED, REENTRANT.
         SPACE
*-APPLICABILITY- OPTION 4 SYSTEMS.
         SPACE
*-EXTERNAL REFERENCES-
*        .IEAQCS03 (CDEPILOG) - LAST PHASE OF LINK PROCESSING
*                               PREPARATIVE FOR ENTERING A MODULE.
*        .IEA0DS02 - TASK SWITCH ROUTINE.
*        .FMBRANCH - BRANCH ENTRY TO MSS FOR SVC 5.
*        .RMBRANCH - BRANCH ENTRY TO MSS FOR SVC 10.
         SPACE
*-SVC USAGE-
*        .FREEMAIN (BRANCH ENTRY) SUB-POOLS 251,252,255.
         SPACE
*-INPUT-
*        NONE EXPLICITLY (SEE ENTRY POINTS)
         SPACE
*-OUTPUT- NONE
         SPACE
*-ENTRY POINTS-
*        .CDEXIT - THE PSW MUST BE DISABLED, IN SUPERVISOR STATE AND
*                  HAVE THE SUPERVISOR PROTECTION KEY.
*              REGISTERS- (INPUT)
*                  3 - ADDRESS OF CVT
*                  4 - ADDRESS OF TCB OF EXITING RB.
*                  5 - ADDRESS OF EXITING RB.
*                  14- RETURN ADDRESS TO CALLER.
*        .CDHKEEP - PSW SAME AS CDEXIT.
*              REGISTERS
*                  3 - CVT ADDR
*                  4 - ADDR OF TCB OF SUBJECT RB.
*                  5 - ADDR OF SUBJECT RB.
*                  11- ADDR OF SUBJECT MAJOR CDE.
*                  13- RETURN ADDR.
*        .CDDESTRY - PSW SAME AS CDEXIT.
*              REGISTERS
*                  3 - CVT ADDR
*                  4 - ADDR OF TCB OF SUBJECT RB.
*                  5 - ADDR OF SUBJECT RB
*                  11- ADDR OF SUBJECT MAJOR CDE.
*                  12- RETURN ADDR.
         SPACE
*-EXIT POINTS- (SEE INTERFACES)
*        .RETURN TO CALLER VIA RETURN REGISTERS
         SPACE
*-ERROR EXIT POINTS- NONE
         SPACE
*-TABLES AND CONTROL BLOCKS REFERENCED-
*        .TCB-
*          TCBJSTCB- NOT ALTERED
*          TCBJPQ  - ALTERED
*        .RB
*          RBCDE   - NOT ALTERED
*          RBOPSW  - ALTERED
*          RBWCF   - ALTERED
*          RBLINK  - NOT ALTERED
*        .CDE
*          CDATTR  - ALTERED
*          CDCHAIN - ALTERED
*          CDRBP   - ALTERED
*          CDXLMJP - NOT ALTERED
*        .EXTENT LIST - FREED
         SPACE
*-LIST ORIGINS, TABLES, AND CONTROL BLOCKS INCLUDED - NONE.
         SPACE
*-NOTES- NONE
         SPACE
*-INTERFACES-
*        .CDEXIT
*          PSW- DISABLED, SUPV STATE AND KEY.
*          INPUT REGS-
*              4 - ADDRESS OF TCB FOR SUBJECT RB.
*              5 - SUBJECT RB ADDR.
*              14- RETURN ADDR.
*              0,1,6-13,15- IRRELEVANT
*          TRANSPARENT REGS-
*              3-6,9
*        .CDHKEEP
*          PSW- DISABLED, SUPV STATE AND KEY.
*          INPUT REGS-
*              11- ADDR OF SUBJECT CDE.
*              13- RETURN ADDR.
*          TRANSPARENT REGS-
*              3-7,9,13
*        .CDDESTRY-
*          PSW- DISABLED, SUPV STATE AND KEY.
*          INPUT REGS-
*              2 - BASE VALUE OF A(CDHKEEP+2)
*              4 - ADDR OF TCB FOR SUBJECT TASK.
*              11- ADDR OF SUBJECT CDE.
*              12- RETURN ADDR.
*          TRANSPARENT REGS-
*              2-7,9,13
         TITLE '             EOT COMMENTARY'
*-ROUTINE NAME- END OF TASK (EOT)
         SPACE
*-FUNCTIONS-
*              THIS CODE IS ENTERED WHENEVER CONTROL IS RETURNED FROM
*        THE HIGHEST LEVEL (CHRONOLOGICALLY OLDEST) RB. EOT PROCESSING
*        CONCERNS THE RELEASING OF TASK ACQUIRED RESOURCES AND THE
*        PURGING OF TASK RELATED CONTROL BLOCKS AND QUEUES. IN THE
*        FOLLOWING SECTION, THE VARIOUS FUNCTIONAL COMPONENTS OF EOT
*        PROCESSING ARE DESCRIBED.
         SPACE
*        -EOT MAIN LINE-
*        1. TESTS FOR INCOMPLETE DESCENDENTS AND ABENDS IF FOUND.
*        2. STORES COMPLETION CODE IN THE TCB FROM REGISTER 15.
*        3. FREES THE PIE IF PRESENT.
*        4. INTERFACES WITH CODE TO PURGE UNEXPIRED TIME INTERVALS.
*        5. TESTS FOR UNRELEASED ENQUEUED RESOURCES AND ABENDS IF FOUND
*        6. INTERFACES WITH WTO PURGE CODE.
*        7. INTERFACES WITH CODE TO CLOSE OPENED DATA SETS.
*        7A. INTERFACES WITH GRAPHICS EOT ROUTINE
*        8. INTERFACES WITH CDEXIT CODE.
*        9. INTERFACES WITH CODE TO RELEASE LOADED PROGRAMS.
*        10.INTERFACES WITH CODE TO RELEASE MAIN STORAGE.
*        11.SETS COMPLETION FLAGS.
*        12.SCHEDULES ETXR ASYNCHRONOUS EXIT ROUTINES.
*          UPDATES THE TIME-SLICE CONTROL ELEMENT  (TSCE), IF THE
*          TIME-SLICE BIT IS SET IN THE TCB.
*        13.REMOVES TCB FROM THE TCB READY QUEUE.
*        14.POSTS AN ECB IF PRESENT.
*        15.REMOVES TCB FROM FAMILY QUEUE AND FREES TCB IF NEITHER AN
*           ECB NOR ETXR PRESENT.
*        16.ENSURES A TASK SWITCH SET UP.
*        17.FREE RB CORE.
*        18.ENTERS THE DISPATCHER.
         SPACE
*        -WTOR REPLY PURGE ROUTINE-
*           THIS ROUNTINE CLEANS UP THE COMMUN. TASK QUEUES RELATED TO
*           THE ENDING TASK
*        -TIMER PURGE ROUTINE-
*           IF A TIMER INTERVAL IS UNEXPIRED FOR THE ENDING TASK, THIS
*           ROUTINE CANCELS THE INTERVAL REQUEST AND FREES THE TQE AND
*           PP REG SAVE AREA ASSOCIATED WITH THE REQUEST.
         SPACE
*        -CLOSE DATA SETS ROUTINE-
*           IF A TASK COMPLETES WITH UNCLOSED DATA SETS, THIS ROUTINE
*           ISSUES A 'CLOSE' FOR EACH UNCLOSED DATA SET.
         SPACE
*GRAPHICS EOT ROUTINE - IFFGRTTR
*AT SYSGEN TIME, IF GRAPHICS IS TO BE INCLUDED IN THE SYSTEM,
*A GRAPHICS MODULE WILL BE LINK EDITED INTO THE NUCLEUS. TO
*PERFORM GRAPHICS EOT CLEANUP.  BECAUSE OF THE POSSIBILITY OF A
*RECURSION THRU ABEND, THE GRAPHICS EOT ROUTINE TESTS IF ABEND
*IS IN PROCESS BEFORE ATTEMPTING TO FREE SP 253 CORE.  ABEND WILL
*HAVE FREED SP 253 BEFORE EXITING.  HENCE ANY ATTEMPT BY GRAPHICS
* TO FREE SP 253 CORE WHILE A TASK IS ABENDING WILL CAUSE A
*RECURSION THRU ABEND.
*
*  IF GRAPHICS IS NOT INCLUDED IN THE SYSTEM, A CSECT WILL
*HAVE BEEN LINK EDITED TO THE NUCLEUS TO RETURN IMMEDIATELY
*TO EOT MAINLINE.
*
*
*        -CDEXIT-
*           THIS ROUTINE PERFORMS CONTENTS DIRECTORY EXIT FUNCTIONS FOR
*           THE LAST PRB ON THE ENDING TASK.
         SPACE
*        -RELEASE LOADED PROGRAMS ROUNTINE-
*           THIS CODE FREES LOAD LIST ELEMENTS (LLE'S) FOR THE
*           COMPLETED TASK (FOUND ON TCBLLS FIELD) AND REDUCES THE
*           USE/RESPONSIBILITY COUNT IN THE CDE RELATED TO EACH LLE.
*           AN INTERFACE IS MADE WITH 'CDHKEEP' TO MAINTAIN THE
*           CONTENTS DIR. QUEUES PROPERLY BASED UPON THE DECREMENTED
*           USE/RESP COUNTS.
         SPACE
*        -RELEASE MAIN STORAGE (SPEOT)-
*           THE PRIMARY FUNCTION OF THIS CODE IS TO RELEASE CORE
*           RELATED UNIQUELY TO THE COMPLETED TASK. ALL SPQE'S FOUND
*           ON THE 'TCBMSS' FIELD ARE USED TO FREE UNSHARED SUB-POOLS.
*           THE SPQE'S ARE REMOVED FROM THE TCB AND ARE FREED
*           SUMMARILY. AN ADDITIONAL FUNCTION IS PERFORMED FOR
*           COMPLETED JOB STEP TCB'S. CONTENTS DIRECTORY CODE IS
*           ENTERED TO FREE CDE'S AND EXTENT LISTS POINTED TO BY THE
*           'TCBJPQ' FIELD IN THE J/S TCB.
*           ALL FQE POINTERS IN THE DQE'S BELONGING TO       PD OS63452
*           USER SUBPOOLS ARE ALSO ZEROED TO PREVENT AN      PD OS63452
*           ABEND IN THE MOTHER TASK.                        PD OS63452
         SPACE
*        -ETXR SCHEDULER-
*           THIS ROUTINE INTERFACES WITH STAGE 2 OF THE EXIT EFFECTOR
*           TO SCHEDULE AN ETXR IF ONE IS INDICATED.
         SPACE
*        -DEQUEUE TCB-
*           THIS ROUTINE REMOVES THE COMPLETED TCB FROM THE TCB READY
*           QUEUE. THIS FUNCTION IS DONE UNCONDITIONALLY FOR ALL
*           ENDING TASKS. NOTE THAT THE COMPLETED TCB WILL, HOWEVER,
*           REMAIN ON THE 'FAMILY' QUEUE IF EITHER AN ETXR OR ECB OR
*           IF THE TIME-SLICE BIT (TCBFTS) IS SET IN THE TCB, ANY
*           REFERENCE TO THE TERMINATING TASK IS ELIMINATED FROM
*           THE CORRESPONDING TIME-SLICE CONTROL ELEMENT (TSCE).
*           BOTH IS PRESENT INDICATING A SUBSEQUENT DETACH OF THE TASK.
         SPACE
*        -EOT POSTING ROUTINE-
*           IF AN ECB IS GIVEN TO BE POSTED AT EOT, THIS ROUTINE
*           VALIDITY CHECKS THE RB ADDR IN THE ECB AND ENTERS POST
*           VIA A BRANCH ENTRY. NO VALIDITY CHECK IS MADE FOR THE
*           JOB STEP TCB BECAUSE THE ECB RESIDES IN PROTECTED CORE.
         SPACE
*        -ERASE PHASE-
*           THIS ROUTINE REMOVES A TCB FROM THE FAMILY QUEUE, I.E.,
*           THE QUEUE OF SUBTASKS REFERENCED BY THE ORIGIN TASK AND
*           FREES THE TCB AND THE TASK'S PROBLEM PROGRAM REGISTER SAVE
*           AREA. THIS FUNCTION IS PERFORMED FOR TASK NOT SPECIFYING AN
*           EOT ETXR ROUTINE OR ECB.
         SPACE
*-ENTRY POINT NAMES-
*        1. IEAQPGTM- ENTRY TO TIMER PURGE FUNCTION.
*        2. IEAQABL - ENTRY TO RELEASE LOADED PROGRAMS FUNCTION.
*        3. IEAQSPET- ENTRY TO MAIN STORAGE EOT FUNCTION.
*        4. IEAQERA - ENTRY TO ERASE PHASE
*        5. IEADQTCB- ENTRY TO TCB DQ RTN.
*        6. IEABEND - SECONDARY CVT USED BY ABEND.
*        NOTE- ENTRY TO EOT IS FROM EXIT CODE AN IS NOT AN 'ENTRY'.
         SPACE
*-CONTAINED IN MODULE-IEAQED00
         SPACE
*-ATTRIBUTES-
*        RESIDENT, SUPERVISOR STATE, DISABLED, REENTRANT(RECURSION IS
*        POSSIBLE)
         SPACE
*-APPLICABILITY- OPTION 4 SYSTEMS
         SPACE
*-EXTERNAL REFERENCES-
*        1. IEECVPRG- WTOR PURGE RTN.
*        2. IEAQTD01- TIMER DEQUEUE RTN (FOR ADDRESSABILITY).
*        3. IGC002  - POST (SVC RTN).
*        4. IEA0DS02- TASK SWITCH RTN.
*        5. RMBRANCH- BRANCH ENTRY TO MSS FOR SVC 10.
*        6. FMBRANCH- BRANCH ENTRY TO MSS FOR SVC 5
*        6A.IEA0AB01- NORMAL ABTERM ENTRY.
*     THE FOLLOW REFERENCES ARE IN THE SECONDARY CVT AND NOT USED BY
*     EXIT OR EOT CODE-
*        7 .IEAQQCB0- ADDR OF QCB ORIGIN
*        8 .IEA0EQ01- ENQ/DEQ PURGE RTN.
*        9 .IGC016  - SVC PURGE ENTRY POINT.
*        10.IEAQTAQ - ADDR OF TRANS. AREA CTL TABLE.
         SPACE
*-SVC USAGE-
*        1. ABEND
*        2. CLOSE
*        3. GETMAIN (SP 253)
*     BRANCH ENTRIES TO-
*        1. FREEMAIN (SP 250,253,255)
*        2. POST
         SPACE
*-INPUT- NONE EXPLICITLY, USES ENVIRONMENTAL REGISTERS.
         SPACE
*-OUTPUT- NONE
         SPACE
*-ENTRY POINTS-
*        1. IEAQPGTM- THE PSW IS DISABLED FOR SYSTEM INTERRUPTS,IS IN
*                     SUPERVISOR STATE AND HAS THE SUPV PROTECTION KEY.
*              REGISTERS-
*                     0-2   IRRELEVANT
*                     3     CVT ADDR.
*                     4     CURRENT TCB ADDR.
*                     5-13  IRRELEVANT
*                     14    RETURN ADDR.
*                     15    IRRELEVANT
         SPACE
*        2. IEAQABL- THE PSW IS DISABLED FOR SYSTEM INTERRUPTS, IS IN
*                    SUPERVISOR STATE AND HAS THE SUPV PROTECTION KEY.
*              REGISTERS-
*                     0-2   IRRELEVANT
*                     3     RETURN ADDR.
*                     4     CURRENT TCB ADDR.
*                     5-15  IRRELEVANT
         SPACE
*        3. IEAQSPET- THE PSW IS DISABLED FOR SYSTEM INTERRUPTS, IS IN
*                     SUPERVISOR STATE AND HAS THE SUPV PROTECTION KEY.
*              REGISTERS-
*                     0-2   IRRELEVANT
*                     3     RETURN ADDR.
*                     4     CURRENT TCB ADDR.
*                     5-15  IRRELEVANT
         SPACE
*        4. IEAQERA-  THE PSW IS DISABLED FOR SYSTEM INTERRUPTS, IS IN
*                     SUPERVISOR STATE AND HAS THE SUPV PROTECTION KEY.
*              REGISTERS-
*                     0-6   IRRELEVANT
*                     7     ADDR OF TCB TO BE 'ERASED'
*                     8-13  IRRELEVANT
*                     14    RETURN ADDR.
*                     15    IRRELEVANT
         SPACE
*        5. IEADQTCB- THE PSW IS DISABLED FOR SYSTEM INTERRUPTS, IS IN
*                     SUPERVISOR STATE AND HAS THE SUPV PROTECTION KEY.
*              REGISTERS-
*                     0-2   IRRELEVANT
*                     3     CVT ADDR.
*                     4     ADDR OF TCB TO BE REMOVED FROM THE READY Q.
*                     5-13  IRRELEVANT
*                     14    RETURN ADDR.
*                     15    IRRELEVANT
         SPACE
*-EXIT POINTS-
*        1. BRANCH TO THE DISPATCHER AT COMPLETION OF EOT PROCESSING.
*           THE PSW IS DISABLED FOR SYSTEM INTERRUPTS, IS IN SUPERVISOR
*           STATE AND HAS THE SUPV PROTECTION KEY.
*           THE REGISTERS ARE IRRELEVANT.
         SPACE
*-ERROR EXIT POINTS-
*        1. ABEND DUE TO OUTSTANDING DESCENDENTS (ERR CODE X'80A03000')
*        2. ABEND DUE TO INCOMPLETE ENQ REQUESTS (ERR CODE X'80D03000')
*        3. ABEND DUE TO BAD DEB INFO FOR CLOSE  (ERROCODE X'80C03000')
*        4. ABEND DUE TO INVALID ECB/ECB INFO    (ERR CODE X'80103000')
*        5. ABEND DUE TO OUTSTANDING WTOR REPLIES(ERR CODE X'80B03000')
         SPACE
*-TABLES AND CONTROL BLOCKS REFERENCED-
*        CVT-
*           CVTTCBP  (NOT ALTERED)
*           CVT0DS   (NOT ALTERED)
*           CVTQTD00 (NOT ALTERED)
*           CVTHEAD  (NOT ALTERED)
*           CVT0EF00 (NOT ALTERED)
*           CVTMZ00  (NOT ALTERED)
*        TCB-
*           TCBPIE   (NOT ALTERED)
*           TCBDEB   (NOT ALTERED IN EOT, BUT ALTERED IN CLOSE RTN)
*           TCBCMP   (ALTERED)
*           TCBMSS   (ALTERED)
*           TCBPKF   (NOT ALTERED)
*           TCBFLGS-
*           .TCBFTS  (NOT ALTERED)
*           .TCBFE   (ALTERED)
*           .TCVFETXR(NOT ALTERED)
*           .TCBFC   (ALTERED)
*           TCBLLS   (ALTERED)
*           TCBJPQ   (NOT ALTERED)
*           TCBGRS   (NOT ALTERED)
*           TCBQEL   (NOT ALTERED)
*           TCBFSA   (NOT ALTERED)
*           TCBTCB   (ALTERED)
*           TCBTME   (ALTERED)
*           TCBJSTCB (NOT ALTERED)
*           TCBNTC   (ALTERED)
*           TCBOTC   (NOT ALTERED)
*           TCBLTC   (ALTERED)
*           TCBIQE   (NOT ALTERED)
*           TCBECB   (NOT ALTERED)
*        RB-
*           RBTMFLD  (ALTERED) (RBTMFLD AND TQEFLGS ARE SAME FIELD)
*           RBPPSAV  (NOT ALTERED) (RBPPSAV AND TQEFLGS+1 ARE SAME FLD)
*           RBSTAB   (ALTERED)
*           RBOPSW   (NOT ALTERED)
*        CDE-
*           CDUSE    (ALTERED)
*        LLE-
*        TSCE (TIMESLICE CONTROL ELEMENT)
*           TSDPRTY  (NOT ALTERED)
*           TSFIRST  (ALTERED)
*           TSLAST   (ALTERED)
*           TSNEXT   (ALTERED)
*           LLCHAIN  (NOT ALTERED)
*           LLCDPTR  (NOT ALTERED)
*           LLRESPCT (NOT ALTERED)
*        SPQE-
*           1ST BYTE (NOT ALTERED)
*        TQE-
*           TQEFLGS  (ALTERED)
*           TQESAADR (NOT ALTERED)
         SPACE
*-LIST ORIGINS, TABLES, AND CONTROL BLOCKS INCLUDED-
*        SECONDARY CVT- 'IEABEND'
         SPACE
*-RESTRICTIONS ON USE OF ROUTINE- NONE
         SPACE
*-NOTES- NONE
         SPACE
*-INTERFACES-
*        1. ALL BRANCH ENTRIES TO FREEMAIN
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0     SP AND NO. OF BYTES TO FREE.
*               1     STARTING ADDRESS TO FREE.
*               2-3   IRRELEVANT
*               4     CURRENT TCB
*               5-7   IRRELEVANT
*               8     ENTRY POINT TO FREEMAIN
*               9-13  IRRELEVANT
*               14    RETURN ADDR
*               15    IRRELEVANT
*             .OUTPUT REGS- NONE
*             .TRANSPARENT REGS
*               2-7,9-14
*        2. ENTRY TO EOT AT 'EOT'
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0,1   IRRELEVANT
*               2     BASE REG = ADDR OF 'EDBSE'
*               3     CVT ADDR
*               4     CURRENT TCB (AT EOT)
*               5     CURRENT RB
*               6-15  IRRELEVANT
*        3. IEAQPGTM SUBROUTINE
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-2   IRRELEVANT
*               3     CVT ADDR
*               4     CURRENT TCB
*               5-13  IRRELEVANT
*               14    RETURN ADDR
*               15    IRRELEVANT
*             .TRANSPARENT REGS
*               2-5,9,14
*        4. IEECVPRG (WTOR PURGE) SUBROUTINE (EXTERNAL CODE)
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-2   IRRELEVANT
*               3     CVT ADDR
*               4     CURRENT TCB
*               5     CURRENT RB
*               6     ENTRY POINT
*               7-13  IRRELEVANT
*               14    RETURN ADDR
*               15    IRRELEVANT
*             .OUTPUT REGS
*               15    RETURN CODE (0= NO REPLIES CANCELLED, 4= REPLIES
*                     CANCELLED)
*             .TRANSPARENT REGS
*               2-5,9
*        5. CLOSE SUBROUTINE
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-3   IRRELEVANT
*               4     CURRENT TCB AT EOT
*               5-13  IRRELEVANT
*               14    RETURN ADDRESS
*               15    IRRELEVANT
*             .TRANSPARENT REGS
*               2-5,10-14
*        6. CDEXIT SUBROUTINE (EXTERNAL TO EOT CODE)
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-4,6-13,15  IRRELEVANT
*               5            CURRENT RB
*               14           RETURN ADDR
*             .TRANSPARENT REGS
*               3-6,9
*        7. IEAQABL SUBROUTINE
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-2   IRRELEVANT
*               3     RETURN ADDR
*               4     ADDR OF CURRENT TCB
*               5-15  IRRELEVANT
*             .TRANSPARENT REGS
*               3-5,9
*        8. IEAQSPET SUBROUTINE
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-2   IRRELEVANT
*               3     RETURN ADDR
*               4     ADDR OF CURRENT TCB
*               5-15  IRRELEVANT
*             .TRANSPARENT REGS
*               3-5,7,9,13
*        9. IEADQTCB SUBROUTINE
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-2   IRRELEVANT
*               3     CVT ADDR
*               4     ADDR OF TCB TO BE DEQUEUED
*               5-13  IRRELEVANT
*               14    RETURN ADDR
*               15    IRRELEVANT
*             .TRANSPARENT REGS
*               0,2-5,7,9-15
*        10.ERASE PHASE IEAQERA
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*             .INPUT REGS
*               0-6   IRRELEVANT
*               7     ADDR OF TCB TO BE ERASED.
*               8-15  IRRELEVANT
*             .OUTPUT REGS
*               3     CVT ADDR
*               4     ORIGIN TASK OF ERASED TASK
*             .TRANSPARENT REGS
*               2,5,7,9-12,14,15
*        11. ABTERM (FROM EOT POST)
*             .PSW DISABLED, SUPV STATE, SUPV PROT KEY.
*               0     ADDR OF TCB TO BE ABTERM'D
*               1     ERROR CODE
*               14    RETURN ADDR
*             .TRANSPARENT REGS
*               2-14
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
*            RELEASE 20 MODIFICATIONS AND ADDITIONS                   *
*                                                                     *
*                   FOR EXIT PROCESSING                               *
*                                                                     *
*                                                                     *
**********************************************************************
          SPACE   5
*        (1)  FREE ONLY THE STAE/STAI CONTROL BLOCK (SCB) FOR     20021
*             STAE WHICH, BECAUSE OF STAI, IS NOT ALWAYS THE      20021
*             FIRST SCB OFF THE TCB.                              20021
*                                                                     *
*        (2)   FREE ALL STAI SCBS AT EOT.                         20021
*                                                                     *
         AIF   ('&TSO' NE '1').NODEFR3                            20021
*        (3)   FOR EXIT OF ANY RB EXCEPT THE LAST RB ON THE RB    20021
*              CHAIN, CHECK THE TCBSTPPR FLAG AND THE TCBATT FLAG.20021
*              IF BOTH ARE ON, BYPASS THE SETTING OF THIS TASK    20021
*              NONDISPATCHABLE.  IF ONLY THE TCBSTPPR FLAG IS ON  20021
*              THIS TASK IS TO BE SET NON-DISPATCHABLE IF NO      20021
*              OTHER SVRBS ARE ON THE TCB RB QUEUE.               20021
         AGO   .NODEFR4                                           20021
.NODEFR3 ANOP                                                     20021
*        (3)   FOR EXIT OF SVRB, CHECK THE TCBSTPPR FLAG.         20021
*              IF THIS FLAG IS ON THIS TASK IS TO BE SET NON-     20021
*              DISPATCHABLE IF NO OTHER SVRBS ARE ON THE TCB RB   20021
*              QUEUE.                                             20021
.NODEFR4 ANOP                                                     20021
*                                                                     *
         AIF ('&TSO' NE '1').NOTSO9                               20021
*        (4)   FOR EXIT OF A PRB OR AN SVRB, ALLOW TERMINAL       20021
*              ATTENTION EXITS TO BE SCHEDULED IF NO OTHER SVRBS  20021
*              REMAIN ON THE RB QUEUE OR IF NO OTHER PRBS WITH    20021
*              THE RBATTN BIT ON REMAIN ON THE RB QUEUE.  THIS IS 20021
*              ACCOMPLISHED BY RESETTING THE TCBATT FLAG TO 0.    20021
*                                                                     *
*        (5)   RECOGNIZE AND PROCESS TERMINAL ATTENTION IRB       20021
*              EXITS.                                             20021
         EJECT
*                                                                     *
*  ROUTINE NAME - IKJATTNX                                        20021
*                                                                     *
*  FUNCTION -                                                     20021
*        (1)   LOCATE EXITING IRB ON TAXE QUEUE                   20021
*        (2)   FOR CANCEL REQUEST DEQUEUE TAXE                    20021
*        (3)   CHECK FOR ANOTHER ACTIVE TAXE                      20021
*              (A)  IF NOT FOUND, START ALL SUBTASKS WITH         20021
*                   STATUS MACRO USING A BRANCH ENTRY.            20021
*              (B)  IF FOUND AND TAXE IS FOR ANOTHER TASK,        20021
*                   START SUBTASKS USING STATUS AND DO A TASK     20021
*                   SWITCH.                                       20021
*        (4)   UPDATE TAXE QUEUE BY MARKING TAXES AVAILABLE       20021
*        (5)   UPDATE STAX COUNT IN TJB                           20021
*        (6)   USE TAIE TO SET UP RESUME FOR TASK                 20021
*        (7)   FREE TAIE                                          20021
*                                                                     *
*  EXTERNAL REFERENCES -                                          20021
*        (1)   IGC07901 - BRANCH ENTRY TO STATUS TO START         20021
*                         SUBTASKS                                20021
*        (2)   IEA0DS02 - TASK SWITCH ROUTING-WHEN TASK OTHER     20021
*                         THAN ONE WITH IRB EXITING HAS ANOTHER   20021
*                         ACTIVE TAXE WHICH WAS INTERRUPTED       20021
*        (3)   FREEMAIN - BRANCH ENTRY TO FREE TAIE               20021
*                                                                     *
*  INPUT -     REGISTERS  3 - CVT ADDR                            20021
*                          4 - TCB ADDR                           20021
*                          5 - IRB ADDR                           20021
*                          14 - RETURN ADDR                       20021
*                          15 - ENTRY POINT ADDR                  20021
*                                                                     *
*  EXIT -      BRANCH ON REG 14                                   20021
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
*            RELEASE 20 MODIFICATIONS AND ADDITONS                    *
*                                                                     *
*                   FOR END OF TASK PROCESSING                        *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 5
*        (1)   RECOGNIZE AND PROCESS EOT FOR A TSO TASK           20021
*              (A)  NORMALLY                                      20021
*                   FOR END OF TASK FOR A TSO TASK, THE POINTERS  20021
*                   IN THE TJB MUST BE UPDATED TO REFLECT THAT    20021
*                   THE LAST TCB HAS ENDED NORMALLY. ALSO, THE    20021
*                   TCB COUNT IN THE TJB MUST BE DECREMENTED BY   20021
*                   ONE.                                          20021
*                                                                     *
*              (B)  LOGON EOT                                     20021
*                   FOR LOGON EOT, TWO CONDITIONS CAN EXIST       20021
*                   ONE, NORMAL LOGOFF WHEN THE TJBNWID IS ZERO.  20021
*                   IN THIS CASE, COMPLETE LOGOFF OF              20021
*                   THE USER IS RQUIRED.  TO ACCOMPLISH THIS THE  20021
*                   DISCONNECT FLAGS IN THE TJB AND THE           20021
*                   TSCVT ARE SET AND TSEVENT MACRO ISSUED FOR    20021
*                   LOGOFF.  THEN THE TSCVT FLAG FOR TSC IS SET,  20021
*                   AND TSC ECB POSTED. THE OTHER CASE OCCURS     20021
*                   WHEN TJBNWID IS NONZERO INDICATING THE USER   20021
*                   IS BEING ASSIGNED A NEW REGION AND IN EFFECT  20021
*                   BEING RELOGGED ON. IN THIS INSTANCE THE LOGON 20021
*                   FLAGS IN THE TJB AND TSCVT ARE SET AND TSEVENT20021
*                   MACRO ISSUED FOR LOGOFFTHEN TSC POSTED. IN    20021
*                   BOTH CASES THE TJB MUST BE REINITIALIZED BY   20021
*                   CLEARING ALL FIELDS EXECPT THE ONES SET       20021
*                   AT INITIALIZATION AND THE ONES REFERENCED     20021
*                   AND THEN CLEARED BY TSEVENT AND TSC. IN       20021
*                   ADDITION, FOR LOGON EOT THE LTC FIELD OF      20021
*                   RCT'S TCB MUST BE ZEROED.                     20021
*                                                                     *
*        (3)   A SUBROUTINE TO PURGE ANY TERMINAL ATTENTION       20021
*              EXIT ELEMENTS(TAXES) HAS BEEN ADDED. THIS ROUTINE  20021
*              IS DESIGNED TO RECOGNIZE AND PURGE ONLY TAXES FOR  20021
*              THE TCB ENDING.  THIS SUBROUTINE IS ALSO USED BY   20021
*              ABEND AT ABNORMAL EOT.                             20021
*                                                                     *
*        (4)   A SUBROUTINE TO PURGE ATTENTION IRBS HAS ALSO BEEN 20021
*              ADDED.  THIS SUBROUTINE HAS BEEN DESIGNED TO       20021
*              RECOGNIZE AND PURGE ONLY ATTENTION IRBS FOR THE    20021
*              TERMINATING TCB.                                   20021
*                                                                     *
*                                                                     *
*  ROUTINE NAME - IEAKJXP                                         20021
*                                                                     *
*  ENTRY POINTS - IEAKJXP -FROM ABEND                             20021
*                 TAXEPRG - FROM EOT                              20021
*                                                                     *
*  FUNCTION -                                                         *
*        (1)   DETERMINE USER EXIT ROUTINE FOR THIS TASK BEING    20021
*              SCHEDULED, IF IT IS THEN ZERO TJBXAIQE FIELD       20021
*        (2)   ZERO ATTENTION COUNT IN TJB                        20021
*        (3)   RECOGNIZE EXISTENCE OF ANY TAXES FOR USER          20021
*        (4)   RECOGNIZE AND DEQUEUE ANY TAXES FOR THIS TASK      20021
*              AND DECREMENT THE STAX COUNT IN THE TJB            20021
*        (5)   SET RBFDYN FLAG SO THAT IRB WILL BE FREED BY EXIT  20021
*              (IF IRB ON TCB RB QUEUE)                           20021
*        (6)   FREE PROBLEM PROGRAM SAVE AREA IF IRB OR TAXE ON   20021
*              TCB RB QUEUE                                       20021
*        (7)   FREE TAIE IF IT EXISTS                             20021
*        (8)   FREE TAXE IF NOT ACTIVE ( ON RB QUEUE)             20021
*        (9)   BRANCH ENTRY TO STATUS TO START ANY STOPPED        20021
*              SUBTASKS                                           20021
*                                                                     *
*  EXTERNAL REFERENCES - (1)  STATUS - MACRO WITH START OPTION    20021
*                                        TO START SUBTASKS        20021
*                       (2)  FREEMAIN - BRANCH ENTRY TO FREE      20021
*                                       P/P SAVE AREA, TAIE,TAXE  20021
*                                                                     *
*  INPUT - REGISTERS 4 - TCB ADDR                                 20021
*                   14 - RETURN ADDR                              20021
*                  15 - ENTRY ADDR                                20021
*                                                                     *
*  EXIT - BRANCH ON REGISTER 14                                   20021
*                                                                     *
*  ROUTINE NAME - ETAER                                           20021
*                                                                     *
*  ENTRY POINTS - ETAER - FROM EOT                                20021
*                                                                     *
*  FUNCTION -                                                     20021
*        (1)   SEARCH THE ASYNCHRONOUS EXIT QUEUE (AEQ) FOR IQES  20021
*              BELONGING TO THE TERMINATING TCB.                  20021
*        (2)   RECOGNIZE IQES REPRESENTING ATTENTION IRBS FOR     20021
*              THIS TCB AND DEQUEUE THEM FROM THE AEQ.            20021
*                                                                     *
*  EXTERNAL REFERENCES - NONE                                     20021
*                                                                     *
*  INPUT - REGISTER 4 - ADDR OF THE TERMINATING TCB               20021
*          REGISTER 14 - RETURN ADDR                              20021
*                                                                     *
*  OUTPUT - REGISTER 3 - ADDR OF CVT                              20021
*                                                                     *
*  TRANSPARENT REGISTERS - 0-2,4,5,7-15                           20021
*                                                                     *
*  TABLES AND CONTROL BLOCKS REFERENCED -                         20021
*        CVT                                                      20021
*              CVTIERLC (NOT ALTERED)                             20021
*        AEQ                                                      20021
*              AEQJ     (ALTERED)                                 20021
*              AEQK     (ALTERED)                                 20021
*                                                                     *
*  EXIT - BRANCH ON REGISTER 14                                   20021
*                                                                     *
.NOTSO9  ANOP                                                     20021
***********************************************************************
         MEND
