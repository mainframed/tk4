         MACRO
         IEAQAT &TIMESL,&STORAGE,&TTIME,&FPREGS,&TSO              20021
* THIS MODULE HAS FURTHER BEEN ALTERED TO PROVIDE CODE TO         20021
* SUPPORT THE TIME SHARING OPTION (TSO) FOR RELEASE 20.           20021
.* IEAQAT IS THE SYSGEN MACRO THAT EXPANDS TO PRODUCE THE ATTACH   MO17
.* SERVICE ROUTINE--MODULE IEAQAT00--CALLED BY SVC 42,A TYPE I     MO17
.* SVC.  THE MODULE IEAQAT00 WAS CONVERTED TO THE MACRO IEAQAT     MO17
.* FOR RELEASE 16 AND SUBSEQUENT TO ACCOMMODATE TIME-SLICING.      MO17
.* THIS MODULE HAS FURTHER BEEN ALTERED TO PROVEDE THE CODE        I250
.* TO SUPPURT ATTACH IN MFT FOR RELEASE 19.                        I250
.*0794002400-008000,083200                                         MO17
.*07624495200,507200,516100,518400                                  DAR
.*0762354400,368800,500100,500800,505600                           1505
.*001700,122600,123000,445600,537000,537400                        I250
.*044800,060000,063200-064800,265600-267200,279200-280000,         I270
.*363200,394400,494500,500000-500200,516100,518400,531200-         I270
.*536800,537600-549600,560800,672000,760000-793600,862400-         I270
.*864800,879200-883200,886400-888800,894400-900000,908800,507200   I270
.*052100,066100,124200,230600,331400,338600,338800,344200,        20021
.*344400,361200,361700-362300,375660,377500,395700,395800,        20021
.*418600-419600,443400-444200,445570,445580,449620-449720,        20021
.*449760-450100,450160,519710-519930,553700-554200,588840,        20021
.*589250-589260,589280-589440,590480-591120,593000-593400,        20021
.*599270-599900,601800-602200,608050-608750,613800-614200,        20021
.*618480-619040,619400-619800,845610-847090.                      20021
.*887600                                                         A35419
.*888200-888400                                                   M0763
.*846790-846810,846850                                            M2172
.*861900,864620                                                   M4393
.*846303-846325,846347-846380,846413,846479                       M4396
.*1772480000-482400,494400,500000,506400-507200,516000,            STCB
.*    517600-518400                                                STCB
.*541716-541740,646000,647200,880800,885200,887600,897600-898900  21B72
.*515200,894000,897600-900400                                    A53341
.*814800                                                         A53366
.*720800                                                         A53367
.*875700,876400-877300                                            21B72
.*383600-404400                                                   M4291
.*732400                                                         A53365
.*502400-507600                                               BD A53392
         AIF   ('&STORAGE' NE '2').MVTTXT3                         I250
         TITLE '              OS/360 OPTION 2 - ATTACH SERVICE ROUTINE'
         AGO   .MFTTXT2                                            I250
.MVTTXT3 ANOP                                                      I250
         TITLE '              OS/360 OPTION 4 - ATTACH SERVICE ROUTINE'
.MFTTXT2 ANOP                                                      I250
IGC042   START
         SPACE 2
*ROUTINE NAME-
*              IEAQAT00-ATTACH SVC SERVICE ROUTINE.
         SPACE 2
*FUNCTIONS-
         SPACE 1
*            1-REQUEST ALLOCATION OF AND INITIALIZE A NEW TCB BASED
*              ON THE CONTENTS OF THE SUPERVISOR PARAMETER LIST.
*            2-DETERMINE IF THE ATTACHED OR ATTACHING TASK IS TO
*              RECEIVE CONTROL AFTER COMPLETION OF THE ATTACH SERVICE
*              ROUTINE.INDICATE CONCLUSION TO THE DISPATCHER.
*            3-CONSTRUCT PARAMETERS FOR LINK ROUTINE WHICH WILL BE THE
*              FIRST PROGRAM TO BE EXECUTED IN THE NEW TASK.
         SPACE 2
*ENTRY POINT NAMES-
         SPACE 1
*              IGC042-ATTACH SVC ENTRY POINT.
         SPACE 2
*CONTAINED IN MODULE-
         SPACE 1
*              IEAQAT00-ATTACH.
         SPACE 2
*ATTRIBUTES-
         SPACE 1
         AIF   ('&STORAGE' NE '2').MVTTXT4                         I250
*              TRNASIENT,REENTRANT,SUPERVISOR STATE,TYPE III SVC.  I250
         AGO   .MFTTXT3                                            I250
.MVTTXT4 ANOP                                                      I250
*              RESIDENT,REENTERABLE,SUPERVISOR STATE,TYPE 2 SVC.
.MFTTXT3 ANOP                                                      I250
         SPACE 2
         AIF   ('&STORAGE' NE '2').MVTTXT5                         I250
*APPLICABILITY-       OPTION 2 ONLY                                I250
         AGO   .MFTTXT4                                          M6197
.MVTTXT5 ANOP                                                      I250
*APPLICABILITY-          OPTION 4 ONLY
.MFTTXT4 ANOP                                                      I250
         SPACE 2
*EXTERNAL REFERENCES-
         SPACE 1
*              IEA0DS00-DISPATCHER'S ENTRY POINT.
*              IEAHEAD -ADDRESS OF FIRST TCB IN READY QUEUE.
*              IEAQCS01-ADDRESS OF MAIN LINE LINK RTN.(NON-SVC ENTRY)
*              IEA0DS02-ADDRESS OF TASK SWITCH ROUTINE             65MP
*              IEAMSTCB-ADDRESS OF MASTER SCHEDULER TCB            MO17
         SPACE 2
*SVC'S USED-
         SPACE 1
*              SVC   3 -SVC EXIT                                   STAE
*              SVC  10 -REGISTER FORM OF GETMAIN
*              SVC  13 -ABEND
*              SVC  43 -CREATE IRB
         SPACE 2
*INPUT-
         SPACE 1
*            1-SUPERVISOR PARAMETER LIST(SPL)-IN CALLER'S STORAGE AREA
*              THE SUPERVISOR PARMLIST IS 52 BYTES IN LENGTH.     20021
*              IT BEGINS ON A FULL WORD BOUNDARY.                 20021
         SPACE 1
*              FORMAT-
*                           EP ADDRESS GIVEN=0                     RORI
*                           ADDRESS OF EP NAME GIVEN=0
*                     BITS1-7= RESERVED
*               BYTES1-3= ADDRESS OF EP NAME OR DE.
*               BYTE4=RESERVED
*               BYTES5-7=DCB ADDRESS
*               BYTE8,BIT 0-4=RESERVED                            20021
*                    BIT  5  = RCT ATTACHING LOGON                20021
*                    BIT  6  =TASKLIB DCB ADDR GIVEN              20021
*                    BIT  7  =STAI EXIT ADDR GIVEN                20021
*               BYTES9-11=ECB ADDRESS
         AIF   ('&STORAGE' NE '2').MVTTXT6                         I250
*              BYTES12-19=MEANINGLESS IN MFT                       I250
         AGO   .MFTTXT5                                            I250
.MVTTXT6 ANOP                                                      I250
*               BYTE12,BIT0= GIVE SUBPOOL,VALUE=0
*                          = GIVE SUBPOOL,LIST =1
*                     BITS1-7= RESERVED
*               BYTES13-15=VALUE OR ADDRESS OF LIST OF VALUES(GIVE SP)
*               BYTE16,BIT0= SHARE SUBPOOL,VALUE=0
*                          = SHARE SUBPOOL,LIST =1
*                     BITS1-7= RESERVED
*               BYTES17-19=VALUE OR ADDRESS OF LIST OF VALUES(SHARE SP)
.MFTTXT5 ANOP                                                      I250
*               BYTE 20,BITS0-5=RESERVED                           I270
*                       BIT6=ROLL PARAMETER 1,1=STEP CANNOT BE     I270
*                                                  ROLLED OUT      I270
*                                             0=STEP CAN BE        I270
*                                                 ROLLED OUT       I270
*                       BIT7=ROLL PARAMETER 2,1=STEP CAN INVOKE    I270
*                                                  ROLLOUT         I270
*                                             0=STEP CANNOT        I270
*                                                  INVOKE          I270
*                                                  ROLLOUT         I270
*               BYTES21-23=ADDRESS OF ETXR ROUTINE
*               BYTES24-25=DISPATCHING PRIORITY SUBTRAHEND.
*               BYTE26=LIMIT PRIORITY SUBTRAHEND.
*               BYTE 27,BIT0=RESERVED                              I270
*                       BIT1=JSCB PARAMETER,1=JSCB ADDR GIVEN      I270
*                                           0=JSCB ADDR NOT        I270
*                                               GIVEN              I270
*                      BIT2=GIVEJPQ PARAMETER,1=JOB PACK AREA      I270
*                                                 GIVEN            I270
*                                             0=JOB PACK AREA      I270
*                                                 NOT GIVEN        I270
*                       BIT3=KEY PARAMETER,1=PROTECT KEY ZERO      I270
*                                          0=PROPAGATE PROTECT     I270
*                                              KEY                 I270
*                       BIT4=SZERO PARAMETER,1=SUBPOOL ZERO NOT    I270
*                                                SHARED            I270
*                                            0=SUBPOOL ZERO        I270
*                                                SHARED            I270
*                       BIT5=SVAREA PARAMETER,1=NO SAVE AREA       I270
*                                             0=SAVE AREA          I270
*                       BIT6=JSTCB PARAMETER,1=JSTCB POINTS TO     I270
*                                                ATTACHEE          I270
*                                            0=PROPAGATE JSTCB     I270
*                       BIT7=SM PARAMETER,1=SUPERVISOR MODE        I270
*                                         0=PROBLEM PROGRAM MODE   I270
*               BYTES28-35=PROGRAM NAME
*               BYTES36-39=ADDRESS OF JSCB IF GIVEN                I270
*                    BYTES40-43=ADDRESS OF STAI PARAM. LIST       20021
*                    BYTES44-47=ADDRESS OF STAI EXIT              20021
*                    BYTES48-51=ADDRESS OF TASKLIB DCB            20021
         SPACE 1
*            2-PROBLEM PROGRAM PARAMETER LIST(PPL)-IN CALLER'S STORAGE
*               THE PROBLEM PROGRAM PARAMETER LIST IS A VARIABLE LENGTH
*               LIST CONSISTING OF FULL WORDS FOR EACH OPERAND.EACH
*               FULL WORD IS ALIGNED ON A FULL WORD BOUNDARY,AND CON-
*               TAINS IN ITS THREE LOW-ORDER BYTES,THE ADDRESS TO BE
*               PASSED. THE SIGN BIT IN THE LAST WORD SIGNALS THE LAST
*               WORD IN THE TABLE.
         EJECT
*MACRO EXPANSION EXAMPLES
         SPACE 2
         AIF   ('&STORAGE' NE '2').MVTTXT7                         I250
*  (IN THE FOLLOWING EXAMPLES THE MACRO WILL EXPAND AS DESCRIBD,   I250
*   BUT THE SUBPOOL PARAMETERS ARE IGNORED BY THE SERVICE RTN.)    I250
.MVTTXT7 ANOP                                                      I250
DUMMY    DSECT
         USING *,15
         SPACE 2
*  EXAMPLE 1.......WILL CREATE  TWO PARAMETER LISTS.  A SUPERVISOR
*                  LIST WITH IT'S ADDRESS RETURNED IN REGISTER
*                  15 AND A PROBLEM PROGRAM LIST WITH IT'S
*                  ADDRESS IN REGISTER 1.
*
*
*        ATTACH EP=ABENDXT,DCB=(5),PARAM=(ERROR2,ERROR4,0,(2)),    MO17
*              VL=1,ECB=DPATCHER+4,GSPV=10,SHSPV=2,ETXR=SETTCB,    MO17
*              LPMOD=10,DPMOD=-25                                  MO17
         SPACE
         ATTACH EP=ABENDXT,DCB=(5),PARAM=(ERROR2,ERROR4,0,(2)),        X
               VL=1,ECB=DPATCHER+4,GSPV=10,SHSPV=2,ETXR=SETTCB,    MO17X
               LPMOD=10,DPMOD=-25
         SPACE 2
*  EXAMPLE 2 ......WILL CREATE ONLY A SUPERVISOR PARAMETER
*                  LIST AND RETURN IT'S ADDRESS IN REGISTER 15.
*
*
*        ATTACH EPLOC=IGC042,SHSPL=SPSHARE,DCB=ATDCBADR            MO17
         SPACE
         ATTACH EPLOC=IGC042,SHSPL=SPSHARE,DCB=ATDCBADR
         SPACE 2
*  EXAMPLE 3.......WILL ALTER ONLY THE 'NAME' FIELD OF THE
*                  EXISTING SUPERVISOR LIST.
*
*
*        ATTACH DE=IHB0003+4,SF=(E,*+500)                          MO17
         SPACE
         ATTACH DE=IHB0003+4,SF=(E,*+500)
         SPACE 2
*  EXAMPLE 4 ......WILL ALTER ONLY THE FIFTH WORD OF THE EXISTING
*                  REMOTE PROBLEM PROGRAM PARAMETER LIST AT
*                  LOCATION ' IEAPKTBL+25 '.
*
*
*        ATTACH MF=(E,IHB0002),PARAM=(,,,,25),EP=MASTER            MO17
         SPACE
         ATTACH MF=(E,IHB0002),PARAM=(,,,,25),EP=MASTER
         SPACE 2
*  EXAMPLE 5 ......WILL CREATE ONLY AN IN LINE SUPERVISOR
*                  PARAMERTER LIST AND RETURN IT'S ADDRESS
*                  IN REGISTER 15.
*
*
*        ATTACH SF=L,EP=ABENDXT,DCB=ATDCBADR,ECB=ATECBADR,LPMOD=5, MO17
*              DPMOD=10,GSPV=10,SHSPV=25                           MO17
         SPACE
         ATTACH SF=L,EP=ABENDXT,DCB=ATDCBADR,ECB=ATECBADR,LPMOD=5,     X
               DPMOD=10,GSPV=10,SHSPV=25
         SPACE 2
*        THE ABOVE MACRO EXPANSIONS ARE NOT TO BE MISCONSTRUED
*     AS BEING AN EXECUTABLE PORTION OF THIS THE ATTACH SVC
*     SERVICE ROUTINE.  THESE MACRO EXPANSIONS SERVE ONLY
*     TO ILLUSTRATE WHAT SOME OF THE VARIOUS FORMS OF THE
*     EXPANSION LOOK LIKE.
         EJECT
*OUTPUT-
         SPACE 1
         AIF   ('&STORAGE' NE '2').MVTTXT8                         I250
*           1- TCB OF THE ATTACHED TASK(IN SQS,SP=255)             I250
         AGO   .MFTTXT6                                            I250
.MVTTXT8 ANOP                                                      I250
*            1- TCB OF THE ATTACHED TASK(IN SUPERVISOR STORAGE,SP=253)
.MFTTXT6 ANOP                                                      I250
*               THESE FIELDS ARE SET-
         SPACE 1
*                    TCBTIO             TCBFSA
*                    TCBMSS             TCBTCB
*                    TCBPKF             TCBJSTCB
*                    TCBFLGS            TCBNTC
*                    TCBFSM             TCBOTC                     RORI
*                    TCBFETXR           TCBLTC                     RORI
*                    TCBLMP             TCBIQE
*                    TCBDSP             TCBECB
*                    TCBJLB             TCBPQE
*                    TCBJSCB            TCBJSE                     I270
*                    TCBTCT                                        SMF1
*                    TCBGRS0 = PARAM LIST ADDRESS
*                    TCBGRS1 = DCB ADDRESS
         AIF   ('&TSO' NE '1').NTSO5                              20021
*        TCBTSFLG                                                 20021
*        TCBTSLP                                                  20021
*        TCBTSDP                                                  20021
.NTSO5   ANOP                                                     20021
*               ALL OTHER FIELDS,WITH THE EXCEPTION OF TCBGRS(1-9) ARE
*               INITIALIZED TO ZERO.
         SPACE 1
         AIF   ('&STORAGE' NE '2').MVTXT9                          I250
*           2- AN IQE FOR THE ETXR RTN(FROM THE ATTACHOR'S CORE    I250
         AGO   .MFTXT7                                             I250
.MVTXT9  ANOP                                                      I250
*            2- AN IQE FOR THE ETXR ROUTINE(IN SUPV.STORAGE,SP=253)
.MFTXT7  ANOP                                                      I250
         SPACE 1
*              FORMAT-
*               BYTES(0-3)-IQENXT-LINK FIELD TO NEXT IQE
*                                 SET TO ZERO
*               BYTES(4-7)-IQEPAR-PARAMETER VALUE
*                                 SET TO ADDRESS OF ATTACHED TCB.
*               BYTES(8-11)-IQEIRB-ADDRESS OF IRB TO BE SCHEDULED.
*                                 SET TO ZERO
*               BYTES(12-15)-IQETCB-ADDRESS OF TCB ON WHICH THE IQE'S
*                                   IRB IS TO BE SCHEDULED
*                                 SET TO TCB OF ATTACHING TASK.
         SPACE 1
         AIF   ('&STORAGE' EQ '2').MFTXT8                          I250
*            3-SUBPOOL QUEUE ELEMENT(SPQE) (SP=255)
         SPACE 1
*              FORMAT-
*               BYTE0=RESERVED
*               BYTES1-3=POINTER TO NEXT SUBPOOL QUEUE ELEMENT OR TCB.
*               BYTE4=
*                 BIT0- 1=SHARED,0=OWNED
*                 BIT1- 1=BYTES1-3 ARE TCB ADDRESS
*                       0=BYTES1-3 ARE SPQE ADDRESS
*                 BIT2- 1=OWNED AND SHARED
*                       0=NOT(OWNED AND SHARED)
*                 BITS3-7  RESERVED
*              BYTES5-7= POINTER TO DATA BLOCK QUEUE ELEMENT.
         SPACE 2
.MFTXT8  ANOP
*ENTRY POINTS-
         SPACE 1
*           1-IGC042-ATTACH SVC SERVICE ROUTINE'S ENTRY POINT.
         AIF   ('&STORAGE' NE '2').MVTXT10                         I250
*            ENTERED FROM THE TRANSIENT AREA HANDLER TO PERFORM    I250
         AGO   .MFTXT9                                             I250
.MVTXT10 ANOP                                                      I250
*             ENTERED BY THE SVC FLIH BY AN LPSW IN ORDER TO PERFORM
.MFTXT9  ANOP                                                      I250
*             THE ATTACH FUNCTION REQUESTED BY THE CALLER ISSUING
*             SVC 42.
         SPACE 1
*            -THE PSW MUST BE,
*              DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE
*              CHECK,IN SUPERVISOR MODE,HAVE SUPERVISOR PROTECT KEY(0).
         SPACE 1
*            -THE REGISTERS MUST CONTAIN,
*              REG.1=ADDRESS OF THE PROBLEM PROGRAM PARAMETER LIST(PPL)
*              REG.15=ADDRESS OF THE SUPERVISOR PARAMETER LIST(SPL).
*              REGS.0 AND 2-14=CONTENTS AT THE TIME OF THE SVC42 INTRPT
         SPACE 2
*EXIT POINTS-
         SPACE 1
*           1-TO THE DISPATCHER.THE DISPATCHER WILL PERFORM THE FUNC-
*             TION OF PASSING CPU CONTROL TO THE ATTACHING OR ATTACHED
*             TASK DEPENDING ON TASK DISPATCHING PRIORITY.
         SPACE 1
*              EXIT IS VIA A BRANCH.
         SPACE 1
*              THE PSW IS,
*               DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE
*               CHECK,IN SUPERVISOR MODE,HAVE SUPERVISOR PROTECT KEY(0)
         SPACE 1
*              THE REGISTERS CONTAIN,
*               REGS.2-9 HAVE THEIR CONTENTS AT THE TIME OF THE SVC 42
*                        INTERRUPT.
*               REGS.10-1 HAVE MEANINGLESS INFORMATION.
         SPACE 1
*           2-TO LINK. IF A SAVE AREA IS PROVIDED FOR THE          I270
*             SUBTASK, ATTACH BRANCHES TO THE DISPATCHER BEFORE    I270
*             GETTING A SAVE AREA. ATTACH REGAINS CONTROL UNDER    I270
*             THE DAUGHTER TO GET THE SAVE AREA. THEN IT EXITS     I270
*             TO LINK.                                             I270
         SPACE 1
*             EXIT IS VIA A BRANCH                                 I270
         SPACE 1
*             THE PSW IS,                                          I270
*              DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT         I270
*              MACHINE CHECK, IN SUPERVISOR MODE, HAS SUPERVISOR   I270
*              PROTECT KEY(0).                                     I270
         SPACE 1
*             THE REGISTERS CONTAIN,                               I270
*              REG0 HAS DCB ADDRESS                                I270
*              REG1 HAS ENTRY POINT FOR DAUGHTER TASK              I270
*              REG2 HAS MEANINGLESS INFORMATION                    I270
*              REGS.3-5 HAVE CVT,TCB,AND RB POINTERS               I270
*              REGS.6-12 HAVE MEANINGLESS INFORMATION              I270
*              REG13 HAS SAVE AREA ADDRESS                         I270
*              REGS.14-15 HAVE MEANINGLESS INFORMATION             I270
         SPACE 2
*ERROR EXIT POINTS-
         SPACE 1
*            1-TO ABEND IN ORDER TO CAUSE THE ISSUING TASK TO BE
*              TERMINATED.
         SPACE 1
*              THE PSW IS,
*               DISABLED FOR ALL MASKABLE INTERRUPTS EXCEPT MACHINE
*               CHECK,IN SUPERVISOR MODE,HAVE SUPERVISOR PROTECT KEY(0)
         SPACE 1
*              THE REGISTERS CONTAIN,
*               REG.15= SPL ADDRESS
*               REGS.0,2-14=MEANINGLESS INFORMATION.
*               REG.1=ERROR CODE.
         SPACE 1
         AIF   ('&STORAGE' EQ '2').MFTXT10                         I250
*              THE ERROR CODES ARE,
*                X'012A' ERROR CODE 1  AN ATTEMPT IS BEING MADE TO
*                                      GIVE A SHARED SUBPOOL.
         SPACE 1
*                X'022A' ERROR CODE 2  AN ATTEMPT IS BEING MADE TO
*                                      GIVE OR SHARE A SUPERVISOR
*                                      SUBPOOL (128-255).
         SPACE 1
*                '032A' ERROR CODE 3  AN ATTEMPT IS BEING MADE     I270
*                                      TO GIVE THE JOBPACK QUEUE   I270
*                                      WHEN IT CONTAINS CDE'S      I270
*                                      WITH USE COUNT NOT ZERO     I270
         SPACE 1
.MFTXT10 ANOP                                                      I250
*                X'042A' ERROR CODE 4  THE ECB ADDRESS IS NOT VALID.
*                                      1.NOT ON A WORD BOUNDARY
*                                      2.LARGER THAN CORE SIZE
*                                      3.WRONG PROTECT KEY
         AIF   ('&STORAGE' EQ '2').MVTONLY                        M3891
         SPACE 1
*                X'052A' ERROR CODE 5: WHILE ATTACHING A TASK     M3891
*                                      W/0 A STAI, A FAILURE      M3891
*                                      OCCURRED WHILE TRYING TO   M3891
*                                      PROPAGATE A STAI EXISTING  M3891
*                                      FOR THE ATTACHOR.          M3891
.MVTONLY ANOP                                                     M3891
         SPACE 2
*TABLES AND CONTROL BLOCKS REFERENCED-
         SPACE 1
*            1-SVRB WHICH THE ATTACH SERVICE ROUTINE ALTERS FOR THE
         AIF   ('&STORAGE' NE '2').MVTXT11                         I250
*              RUNNING OF THE LINK ROUTINE.                        I250
         AGO   .MFTXT11                                            I250
.MVTXT11 ANOP                                                      I250
*               RUNNING OF THE LINK ROUTINE.(SP=255)
.MFTXT11 ANOP                                                      I250
         SPACE 1
*               THESE FIELDS ARE SET,
         SPACE 1
*                 RBOPSW- SET TO FULLY DISABLED EXCEPT FOR MACHINE
*                         CHECK,SUPERVISOR MODE, RESUME ADDRESS=
*                         IEAQCS01(MAIN-LINE OF LINK ROUTINE).
         SPACE 1
*                 RBGRSAVE-
*                         SLOTS FOR REGISTERS 14,15 ARE SET TO EITHER
*                         PROGRAM NAME OR FIRST TWO WORDS OF DE.REG.13
*                         SLOT IS SET TO THE ADDRESS OF THE PP PARA-
*                         METER LIST.
         SPACE 1
*                 RBEXSAVE-
*                         SET TO REMAINING PORTION OF THE DE.
         SPACE 1
*                 RBTCBNXT-SET ON TO INDICATE THAT THE TCB IS POINTED
*                          TO FROM THE RBLINK FIELD.
         SPACE 1
*                 RBLINK-SET TO INDICATE THE TCB ADDRESS.
*               (THE RBTCBNXT AND RBLINK FIELDS ARE ALSO TESTED).
         SPACE 1
         AIF   ('&STORAGE' NE '2').MVTXT12                         I250
*            2-TCB OF THE ATTACHING TASK.                          I250
         AGO   .MFTXT12                                            I250
.MVTXT12 ANOP                                                      I250
*            2-TCB OF THE ATTACHING TASK(SP=253)
.MFTXT12 ANOP                                                      I250
         SPACE 1
*               THESE FIELDS ARE SET,
         SPACE 1
*                 TCBGRS
*                    REGS.10 THROUGH 0 - SET FROM SVRB RBGRSAVE'S
*                     CORRESPONDING SLOTS.
*                    REG1-SET TO THE ADDRESS OF THE ATTACHED TCB.
         SPACE 1
*               THESE FIELDS ARE TESTED,
*                 TCBRBP
*                 TCBFLGS
*                 TCBFSM                                           RORI
*                 TCBLMP
*                 TCBDSP
*                 TCBTCB
*                 TCBFTC
         AIF   ('&TSO' NE '1').NTSO6                              20021
*        TCBTSFLG                                                 20021
*        TCBTSLP                                                  20021
*        TCBTSDP                                                  20021
.NTSO6   ANOP                                                     20021
         SPACE 1
*            3-IEATCBP
*                 DOUBLE WORD CONTAINING TCB POINTERS.
*                 FIRST WORD,TERMED 'NEW', IS TESTED AND SET.
*                 SECOND WORD,TERMED 'OLD',IS TESTED.
         SPACE 1
*            4-IEAHEAD
*                 ADDRESS OF THE FIRST TCB ON THE READY QUEUE.(TESTED)
         SPACE 2
*LIST ORIGINS,TABLES,CONTROL BLOCKS INCLUDED.
         SPACE 1
*        NONE                                                      RORI
         SPACE 2
*RESTRICTIONS ON USAGE OF THE ROUTINE-
*        NONE
*NOTES-
*        NONE
         EJECT
*********************************************************************
*00              * ENTRY POINT ADDRESSS OR ADDRESS OF DOUBLE WORD   *
* FLAG FOR       * OR DIRECTORY ENTRY ADDRESS OF FIRST PROGRAM TO   *
* DE/EP/NAME     * BE ENTERED                                       *
*********************************************************************
*04                                                                 *
*                * DCB ADDRESS                                      *
*                *                                                  *
*********************************************************************
*08                                                                 *
* FLAG FOR STAI  * ECB ADDRESS                                    20021
* EXIT/TASKLIB/& *                                                20021
* LOGON          *                                                20021
*********************************************************************
*12              *                                                  *
* FLAG FOR GIVE  * GIVE SUBPOOL VALUE OR ADDRESS OF LIST OF         *
* VALUE OR LIST  * SUBPOOL VALUE                                    *
*********************************************************************
*16              *                                                  *
* FLAG FOR SHARE * SHARE SUBPOOL VALUE OR ADDRESS OF LIST OF        *
* VALUE OR LIST  * SUBPOOL VALUE                                    *
*********************************************************************
*20              *                                                  *
*                * ETXR ROUTINE ADDRESS                             *
*                *                                                  *
*********************************************************************
*24                               *                *FLAGS FOR  *   I270
*                                 *                *JSCB,      *   I270
*      DISPATCHING PRIORITY       * LIMIT PRIORITY *GIVEJPQ,   *   I270
*                                 *                *KEY,SZERO, *   I270
*                                 *                *SVAREA,    *   I270
*                                 *                *JSTCB,SM   *   I270
*********************************************************************
*28                                                                 *
*                P R O G R A M                                      *
*                                                                   *
*********************************************************************
*32                                                                 *
*                   N A M E                                         *
*                                                                   *
*********************************************************************
*36              *                                             *   I270
*                *  EXTENSION OF SPL FOR JSCB ADDRESS             20021
*                *                                             *   I270
****************************************************************   I270
*40              *                                             *  20021
*                *  STAI PARAMETER LIST ADDRESS                *  20021
*                *                                             *  20021
****************************************************************  20021
*44              *                                             *  20021
*                *  STAI EXIT ROUTINE ADDRESS                  *  20021
*                *                                             *  20021
****************************************************************  20021
*48              *                                             *  20021
*                *  TASKLIB DCB ADDRESS                        *  20021
*                *                                             *  20021
****************************************************************  20021
         SPACE 1
* BYTE 0, BIT 0, ON MEANS DIRECTORY ADDRESS.
* BYTE 0, BIT 0, OFF MEANS ENTRY POINT ADDRESS OR ADDRESS OF PGM NAME.
* BYTE 8,BIT 5, ON MEANS RCT IS ATTACHING LOGON                   20021
*        BIT 6, ON MEANS TASKLIB DCB ADDRESS GIVEN                20021
*        BIT 7, ON MEANS STAI EXIT ADDRESS GIVEN                  20021
* BYTE 12/16, BIT 7, ON MEANS ADDRESS.
* BYTE 12/16, BIT 7, OFF MEANS VALUE.
* BYTE 20,BITS0-5=RESERVED                                         I270
*        BIT6=ROLL PARAMETER 1,1=STEP CANNOT BE ROLLED OUT         I270
*                              0=STEP CAN BE ROLLED OUT            I270
*        BIT7=ROLL PARAMETER 2,1=STEP CAN INVOKE ROLLOUT           I270
*                              0=STEP CANNOT INVOKE ROLLOUT        I270
* BYTE 27,BIT0=RESERVED                                            I270
*         BIT1=JSCB PARAMETER,1=JSCB ADDR GIVEN                    I270
*                             0=JSCB ADDR NOT GIVEN                I270
*        BIT2=GIVEJPQ PARAMETER,1=JOB PACK AREA GIVEN              I270
*                               0=JOB PACK AREA NOT GIVEN          I270
*        BIT3=KEY PARAMETER,1=PROTECT KEY ZERO                     I270
*                           0=PROPAGATE PROTECT KEY                I270
*        BIT4=SZERO PARAMETER,1=SUBPOOL ZERO NOT SHARED            I270
*                             0=SUBPOOL ZERO SHARED                I270
*        BIT5=SVAREA PARAMETER,1=NO SAVE AREA                      I270
*                              0=SAVE AREA                         I270
*        BIT6=JSTCB PARAMETER,1=JSTCB POINTS TO ATTACHEE           I270
*                             0=PROPAGATE JSTCB                    I270
*        BIT7=SM PARAMETER,1=SUPERVISOR MODE                       I270
*                          0=PROBLEM PROGRAM MODE                  I270
         EJECT
* REGISTER EQUATES
         SPACE 1
XR0      EQU   0         WORK REGISTER
SIZEREG  EQU   0 .       GETMAIN PARAMETER REGS                  A35419
GETREG   EQU   1 .                                               A35419
XR1      EQU   1         REGISTER 1
XRCOREAD EQU   1         ADDRESS OF  GOTTEN CORE
XRIRB    EQU   1         IRB ADDRESS
XRSPQE   EQU   1         SPQE ADDRESS
XR2      EQU   2         REGISTER 2
XRNEW    EQU   2         REGISTER 2
XRTCB    EQU   2         WORK TCB REGISTER
XR3      EQU   3         REGISTER 3
XRCVT    EQU   3         CONTROL VECTOR TABLE ADDRESS
XROTCB   EQU   4         CONTENT OF 'OLD'
XR5      EQU   5         REGISTER 5 READY TCB ADDRESS
XRORB    EQU   5         TOP RB ON QUEUE OF 'OLD' TCB
XR6      EQU   6         REGISTER 6
XRECB    EQU   6         INPUT ECB ADDRESS
XRPRB    EQU   6         ATTACHOR'S PRB ADDRESS
XRTCBPTR EQU   6         TCB ADDRESS ON READY QUEUE
XRTCBSPQ EQU   6         TCB'S SPQE FIELD COUNTER
XRJSCB   EQU   6                  INPUT JSCB ADR                   I270
XR7      EQU   7         REGISTER 7
XRETXR   EQU   7         INPUT ETXR ADDRESS
XRSPID   EQU   7         SUB POOL IDENTIFICATION
XRSVRB14 EQU   7         ADDRESS OF SVRB REGISTER 14 SAVE AREA
XR8      EQU   8         REGISTER 8
XRASTCB  EQU   8         ATTACHED TCB'S SISTER TCB ADDRESS
XRDE     EQU   8         ADDRESS OF DIRECTORY ENTRY
XRDQE    EQU   8         DQE ADDRESS
XRINDPRI EQU   8         INPUT DISPATCH OR ATTACHOR'S AND INPUT ADDED
XRLPRI   EQU   8         ATTACHOR'S LIMIT PRIORITY
XRPKEY   EQU   8         PROTECT KEY OF ATTACHORS
XRSPCTR  EQU   8         SUB POOL ID COUNTER
XRIQEW   EQU   8         CIRB MACRO IQE ADDRESS
CDEREG   EQU   8                  ADDRESS OF CDE                   I270
XR9      EQU   9         REGISTER 9
XRDPRI   EQU   9         ATTACHOR'S DISPATCH PRIORITY
XRFQE    EQU   9         FQE ADDRESS
XRINLPRI EQU   9         INPUT LIMIT PRIORITY OR DIFFERENCE FROM ATT'OR
XRIQE    EQU   9         IQE ADDRESS
XRSPADR  EQU   9         SUB POOL IDENTIFICATION ADDRESS
XRATCB   EQU   10        ATTACHED TCB ADDRESS
XRBASE   EQU   11        BASE REGISTER
XRLINK   EQU   12        LINK REGISTER
XRCOUNT  EQU   12        COUNT REGISTER
XRLENGTH EQU   12        LENGTH REGISTER
XRWORKAD EQU   13        ADDRESS OF ATTACHED TCB'S WORK AREA
XRSAVE   EQU   13        SAVE REGISTER 1
XRPARA   EQU   14        INPUT PARAMETER ADDRESS
XRRETURN EQU   14        RETURN REGISTER
XR15     EQU   15        WORK REG 15
XRSPQPTR EQU   15        ADDRESS OF SPQE POINTER
RGETMAIN EQU   15 .          REG FOR BRANCHING TO GETMAIN        A35419
         EJECT
* TCB DISPLACEMENT EQUATES
         SPACE 1
         AIF   ('&STORAGE' EQ '2').URMFT                         A53372
TCBFLAGS EQU   X'1D' .            OFFSET TO TCB FLAGS FIELD      A53372
.URMFT   ANOP                                                    A53372
TCBFC    EQU   X'80' .            TASK TERMINATED BIT            A53372
DPRI     EQU   35                      DISPATCH PRIORITY
IQEFLD   EQU   140                     IQE PTR
LINKTCB  EQU   116                     LINKED TCB PTR
SISPTR   EQU   128                     POINTER TO SISTER
TCBIDFLD EQU   112                     ID FIELD
TCBMSSS  EQU   24                      SPQE PTR IN TCB
         AIF   ('&STORAGE' NE '2').MVTTEQ                          I250
TCBXR0   EQU   72                       REG  0 - TCB               I250
TCBXR1   EQU   76                      OFFSET OF GR 1 IN TCB       I250
TCBXR10  EQU   48                       REG 10 - TCB               I250
TCBXR13  EQU   60                       REG 13 - TCB               I250
TCBXR14  EQU   64                       REG 14 - TCB               I250
TCBXR15  EQU   68                      REG 15 - TCB                I250
TCBNDISP EQU   X'AD' .       TCBFLAG BYTES IN MFT ATTACH         A53372
         AGO   .MFTTEQ                                             I250
.MVTTEQ  ANOP                                                      I250
TCBRB    EQU   0                       RB PTR
TCBXR0   EQU   48                      REG 0  - TCB
TCBXR1   EQU   52                      REG 1  - TCB
TCBXR10  EQU   88                      REG 10 - TCB
.MFTTEQ  ANOP                                                      I250
         AIF   ('&TSO' NE '1').NTSO1                              20021
TSDPRI   EQU   151                TIME SHARING DISPATCH PRIORITY  20021
.NTSO1   ANOP                                                     20021
TCBATOFF EQU   X'DF'                                              20021
         SPACE 1
* PRB, IRB AND SVRB DISPLACEMENT
         SPACE 1
RBTMFLD  EQU   0                       FLAGS FOR TIMER
RBPPSAV  EQU   1                       PTR TO PP REG SAVE AREA
RBABOPSW EQU   4                       BITS 32-63 OF USER PSW
RBWCSA   EQU   8                       WAIT COUNT SAVE AREA
RBSIZE   EQU   9                       SIZE OF RB IN DOUBLE WORDS
RBSTAB   EQU   10                      STATUS AND ATTRIBUTE BITS
RBSTAB2  EQU   11                      STATUS AND ATTRIBUTE BITS  20021
RBATTN   EQU   X'20' .  BIT SET IN A PRB BY STAX, SIGNIFYING      M2014
*                         PREVENTION OF ATTENTION EXITS.  TCB     M1678
*                         BIT WILL ALSO BE ON.                    M1678
RBEP     EQU   12                      ENTRY POINT ADDRESS
RBOPSW   EQU   16                      OLD PSW
         AIF   ('&STORAGE' NE '2').LUGO                            I250
RBUSE    EQU   12                 USE COUNT                        I250
RBQ      EQU   24                                                  I250
         AGO   .LUGOFT                                             I250
.LUGO    ANOP                                                      I250
RBUSE    EQU   24                      USE COUNT
.LUGOFT  ANOP                                                      I250
RBIQE    EQU   25                      LIST ORIGIN FOR IQE'S
RBWCF    EQU   28                      WAIT COUNT
RBLINK   EQU   28                      POINTER TO NEXT RB ON QUEUE
RBGRSAVE EQU   32                      REGISTER SAVE AREA
RBEXSAVE EQU   96                  EXTENDED SAVE AREA             20021
RBTCBNXT EQU   X'80'                                              20021
RBFTSVRB EQU   X'C0'                                              20021
SVRBXR0  EQU   32                      REG 0  - SVRB
SVRBXR1  EQU   36                      REG 1  - SVRB
SVRBXR2  EQU   40                      REG 2  - SVRB
SVRBXR10 EQU   72                      REG 10 - SVRB
SVRBXR13 EQU   84                      REG 13 - SVRB
SVRBXR14 EQU   88                      REG 14 - SVRB
         SPACE 1
* IQE DISPLACEMENTS
         SPACE 1
FSTWD    EQU   4                       FIRST WORD OF IQE
IRBADR   EQU   8                       ADDRESS OF IRB
MOMTCB   EQU   12                      ADDRESS OF ATTACHING TCB
IQEDISP  EQU   96                      DISPLACEMENT OF IQE         1505
         EJECT
* GENERAL EQUATES
         SPACE 2
HEADPTR  EQU   160                     LOGICAL ADR TO 'HEAD' PTR
NEWPTR   EQU   0                       LOGICAL ADR TO 'NEW' PTR
MACHSIZE EQU   164                     LOGICAL ADR TO MACHINE SIZE
ZERO     EQU   X'00'                   ZERO BYTE
SMODEKEY EQU   0                       SUPERVISER MODE KEY.
ZERONUM  EQU   0                                                  20021
ONE      EQU   1                       DISPLACEMENT OF ONE
TWO      EQU   2                                                  20021
THREE    EQU   3                                                  20021
FOUR     EQU   4                                                  20021
EIGHT    EQU   8                                                  20021
TWELVE   EQU   12                                                 20021
N24      EQU   24                  NUMBER EQUATE                  20021
N255     EQU   255                                                20021
N256     EQU   256                                                20021
TESTBIT  EQU   1                       TEST BIT (TEST AVAILABLE P KEY)
CDELINK  EQU   0                       PTR TO NEXT CDE             I270
CDUSE    EQU   16                      USE COUNT IN CDE            I270
ATDFLT   EQU   X'08'                   DEFAULT MASK FOR GIVEJPQ,   I270
*                                      JSTCB,KEY,SVAREA,AND SM     I270
ATJSCB   EQU   X'40'                   INPUT FLAG FOR JSCB         I270
*                                      ADDRESS IN SPL              I270
ATJOBPQ  EQU   X'22'                   INPUT FLAG TO GIVE JOB      I270
*                                      PACK AREA                   I270
ATKEY    EQU   X'10'                   INPUT FLAG FOR KEY ZERO     I270
ATZERO   EQU   X'08'                   INPUT FLAG TO SHARE SP0     I270
ATSAVE   EQU   X'04'                   INPUT FLAG FOR SAVE AREA    I270
ATJST    EQU   X'02'                   INPUT FLAG FOR JSTCB TO     I270
*                                      POINT TO ATTACHEE           I270
ATMODE   EQU   X'01'                   INPUT FLAG FOR MODE         I270
INVECB   EQU   X'042A'                                             I250
         AIF   ('&STORAGE' NE '2').PUMVTEQ                         I250
MAXTCB   EQU   X'062A'                                             I250
TBLINCR  EQU   4                        TABLE ENTRYN LENGTH        I250
LINKICVT EQU   214                     OFFSET IN CVT OF SVC 6      I250
PROPKEY  EQU   X'02'                    INPUT FLAG TO PROP. KEY
ETXRFLG  EQU   X'08'                    TCB FLAG ETXR PRESENT      I250
IRBFLAG  EQU   X'40'                    IRB INDICATOR IN RB
PPMODE   EQU   X'7F'                    UNFLAG SUPERVISOR MODE
TCBFSM   EQU   X'80'                    SUPERVISOR MODE FLAG
X01      EQU   X'01'                    HEX 1                      I250
X04      EQU   X'04'                    MACHINE CK FLAG BIT        I250
X09      EQU   X'09'                   LENGTH OF PRB + PLIST AREA  I250
PIBJPQ   EQU   44  PIB OFFSET TO NUMBER OF ACTIVE SUBTASKS         I250
*                                       SUB-TASKS                  I250
X83      EQU   X'83'                    TQE AVAILIBILITY FLAG      I250
Q0       EQU   0                                                   I250
XC0      EQU   X'C0'                                               I250
XIRB     EQU   XRIRB                                               I250
XC2      EQU   X'C2'                   HEX C2                      I250
XF9      EQU   X'F9'                    CHARACTER USED FOR PRB NM  I250
Q1       EQU   1                        DECIMAL EQUIVALENT 1       I250
Q4       EQU   4                        DECIMAL EQUIVALENT 4       I250
Q8       EQU   8                        DECIMAL EQUIVALENT 8       I250
Q12      EQU   12                                                  I250
Q16      EQU   16                      ADDR OF PTR TO CVT          I250
Q32      EQU   32                      LENGTH OF F PT REG SVAREA   I250
Q40      EQU   40                       LENGTH OF PRB + GQE        I250
Q80      EQU    80                     LENGTH PRB + PLIST AREA     I250
Q96      EQU   96                      OFFSET OF FEOT IN IRB       I250
QIQEL    EQU   16                       LENGTH OF IQE              I250
QSVAREAL EQU   72                       LENGTH OF REG SAVE AREA    I250
QPRBL    EQU   32                       LENGTH OF PRB              I250
EXITCVTA EQU   80                       OFFSET IN CVT OF SVC3      I250
TQEDISP  EQU   184                 TQE OFFSET IN GOTTEN CORE       I250
XRGQELTH EQU   13                       GQE LENGTH PTR             I250
DISPDSP  EQU   35                       OFFSET IN TCB OF DISP-     I250
*                                        ING PRIORITY              I250
ADDRCVT  EQU   16                       ADDR OF CVT ADDRESS        I250
CVTCBTBE EQU   244                 NUMBER OF TCB TABLE ENTRS       I250
EFCVTA   EQU   4                   OFFSET OF EXIT EFFECTOR ADD     I250
TCBLH    EQU   184                 LENGTH OF TCB                   I250
TQELH    EQU   112                 LENGTH OF TQE                   I250
XAVALPTR EQU   124                 OFFSET WITHIN CVT OF PTR        I250
*                                  TO IOS TABLE WHICH CONTAINS     I250
*                                  A PTR TO THE BEG OF TCB TAB6)   I250
         AGO   .PUALLEQ                                            I250
.PUMVTEQ ANOP                                                      I250
GIVEL    EQU   X'01'                   INPUT GIVE SP LIST FLAG
SHAREL   EQU   X'01'                   SHARE SP LIST FLAG
ROLABLY  EQU   X'01'                   ROLLOUTABILITY FLAG         RORI
PROPKEY  EQU   X'02'                   INPUT FLAG TO PROP. KEY
ETXRFLG  EQU   X'02'                   TCB FLAG ETXR PRESENT
NROLABLY EQU   X'02'                   NON-ROLLOUTABLE COUNT       RORI
IRBSIZE  EQU   12                      IRB SIZE IN DOUBLE WORDS    1505
IRBRES   EQU   X'10'                   RESCHEDUL FLAG IN IRB
PKEYWAIT EQU   X'20'                   TCB WAITING FOR PROTECT KEY
OSFLAG   EQU   X'20'                   SPQE OWN/SHARED FLAG
IRBFLAG  EQU   X'40'                   IRB INDICATER IN RB
LASTSPQE EQU   X'40'                   LAST SPQE FLAG
PPMODE   EQU   X'7F'                   UNFLAG SUPERVISER MODE
TCBFSM   EQU   X'80'                   SUPERVISOR MODE FLAG
SHARESP  EQU   X'80'                   SHARED SPQE FLAG
EMUL     EQU   X'10' .                 TASK IS AN EMULATOR       A54872
.PUALLEQ ANOP                                                      I250
RECRSBIT EQU   X'80'                   STAE RECURSION FLAG         STAE
RETCODE4 EQU   4                       STAE RECURSION RETURN CODE  STAE
TLIBFLAG EQU   X'02'                   IND. A TASKLIB DCB ADDR.   20021
STAIFLAG EQU   X'01'                   FLAG REQUESTING STAI SCB   20021
STAISCB  EQU   X'20'                   FLAG TO INDICATE STAI SCB  20021
TCBATT   EQU   X'20' .  ATTENTION BIT IN TCB/TSO FLAG BYTE        M4393
LOGONFLG EQU   X'04'                   FLAG INDICATING LOGON IS   20021
*                                      BEING ATTACHED.            20021
SVCEXIT  EQU   3                       SVC EXIT ROUTINE CALL
TESTRBIT EQU   X'04'                   TEST BIT IN TCB
P255     EQU   255                     PLUS 255
SP252    EQU   252                     SUBPOOL 252 ID
SP251    EQU   251                     SUBPOOL 251 ID              I270
         AIF   ('&TIMESL' NE 'TIMESL').NOSLICE                     MTS0
NEXTTSCE EQU   16                       OFFSET FOR NEXT TIME-SLICE MTS0
*                                       TSCE                       MTS0
.NOSLICE  ANOP                                                     MTS0
         SPACE 2
         EJECT
* DSECT FOR ATTACH INPUT PARAMETER (BASE REGISTER 14)
         SPACE 2
ATPRMS   DSECT
ATDEFLAG DS    CL1                     FLAG TO INDICATE ENTRY POINT
ATPGNADR DS    CL3                     ENTRY ADDRESS
ATDCBADR DS    CL4                     DCB ADDRESS
ATECBADR DS    CL1                     FLAG FOR LOGON,TASKLIB,STAI20021
         DS    CL3                     ECB ADDRESS                20021
ATGSFLAG DS    CL1                     GIVE SP FLAG INDICATE VALUE/ADR
ATGSFLD  DS    CL3                     GIVE SP VALUE OR ADDRESS
ATSHFLAG DS    CL1                     SHARE SP FLAG INDICATE VALUE/ADR
ATSHFLD  DS    CL3                     SHARE SP VALUE OR ADDRESS
ATROLL   DS    CL1                     ROLLOUT BITS                RORI
ATETXR   DS    CL3                     ETXR ROUTINE ADDRESS        RORI
ATDPMOD  DS    CL2                     DISPACHING PRIORITY VALUE
ATLPMOD  DS    CL1                     LIMIT PRIORITY VALUE
ATINDS   DS    CL1                     FLAG FOR JSCB,GIVEJPQ,      I270
*                                      KEY,SZERO,SVAREA,JSTCB,     I270
*                                      AND SM PARAMETERS           I270
ATPRGNM  DS    CL8                     PROGRAM NAME
ATJSCBAD DS    CL4                     JSCB ADDRESS                I270
ATSTPLAD DS    CL4                     STAI PARAM LIST ADDR       20021
ATEXRTAD DS    CL4                     EXIT RTN ADDR FOR STAI     20021
ATASKLIB DS    CL4                     TASKLIB DCB ADDRESS        20021
         EJECT
* ATTACH ROUTINE REQUESTOR TCB DSECT (BASE REGISTER 4)
         SPACE 2
TCBFLDSP DSECT
TCBRBPP  DS    CL4                     RB ADR
TCBPIEP  DS    CL4                     PIE ADR
TCBDEBP  DS    CL4                     DEB ADR
TCBTIOP  DS    CL4                     TASK I/O TABLE ADR
TCBCMPP  DS    CL4                     TASK COMPLETION CODE
TCBTRNP  DS    CL4                     TESTRAN FIELD
TCBNROCP DS    CL1                     NON-ROLLOUT COUNT           RORI
TCBMSSP  DS    CL3                     DATA BLOCK QUEUE ELEMENT    RORI
TCBPKFP  DS    CL1                     PROTECT KEY
TCBFLGSP DS    CL5                     FLAG BYTES
         AIF   ('&STORAGE' NE '2').MVTE1                           I250
TCBQELP  DS    CL1                                                 I250
         AGO   .MFTE1                                              I250
.MVTE1   ANOP                                                      I250
TCBLMPP  DS    CL1                     LIMIT PRIORITY
.MFTE1   ANOP                                                      I250
TCBDSPP  DS    CL1                     DISPACHING PRIORITY
TCBLLSP  DS    CL4                     LOADED PROGRAM LIST ADR
TCBJLBP  DS    CL4                     JOB LIBRARY DCB ADR
TCBJSEP  DS    CL4                     JOB STEP INDEX ELEMENT ADR
TCBGRSP  DS    CL64                    GENERAL REGISTER SAVE AREA
         AIF   ('&STORAGE' NE '2').MVTE2                           I250
TCBIDFP  DS    CL1                      TCB ID                     I250
TCBFSAP  DS    CL3                      ADDR FIRST PP SVAREA       I250
         AGO   .MFTE2                                              I250
.MVTE2   ANOP                                                      I250
TCBFSAP  DS    CL4                     ADR. OF FIRST PP SAVE AREA
.MFTE2   ANOP                                                      I250
TCBTCBP  DS    CL4                     ADR OF NEXT TCB ON READY QUEUE
TCBTMEP  DS    CL4                     ADR OF TIMER ELEMENT
         AIF   ('&STORAGE' NE '2').MVTE3                           I250
TCBPIBP  DS    CL4                      ADDR OF PIB                I250
         AGO   .MFTE3                                              I250
.MVTE3   ANOP                                                      I250
TCBITBP  DS    CL4                     INITIATOR/TERMINATOR TCB ADR
.MFTE3   ANOP                                                      I250
TCBNTCP  DS    CL4                     TCB'S NEXT TCB ADR
TCBOTCP  DS    CL4                     TCB'S ORIGIN TCB ADR
TCBLTCP  DS    CL4                     TCB'S LAST TCB ADR
TCBIQEP  DS    CL4                     IQE ADR FOR ETXR ROUTINE
TCBECBP  DS    CL4                     ECB ADR
TCBTSFLP DS    C                       TIME SHARING FLAGS         20021
TCBTSTSP EQU   X'80'                   INDICATES TASK IS A TIME   20021
*                                      SHARING TSK.               20021
TCBSTPCP DS    C                                                  20021
TCBTSLPP DS    C                       TIME SHARING LIMIT PRIORITY20021
TCBTSDPP DS    C                       TIME SHARING DISPAT PRIO   20021
         AIF   ('&STORAGE' NE '2').MVTE4                           I250
TCBLMPP  DS    CL1                      LIMIT PRIORITY             I250
TCBRESVP DS    CL3                      ABEND INFO                 I250
         AGO   .MFTE4                                              I250
.MVTE4   ANOP                                                      I250
TCBPQEP  DS    CL4                     PARTITION QUEUE ELEMENT ADDR
.MFTE4   ANOP                                                      I250
TCBAQEP  DS    CL4                     ALLOCATED QUEUE ELEM. ADDR  MO17
         AIF   ('&STORAGE' NE '2').MVTE5                           I250
*                                       (RESERVED IN MFT)          I250
.MVTE5   ANOP                                                      I250
TCBNSTAP DS    CL4                     STAE CONTROL BLOCK ADDRESS  STAE
TCBTCTP  DS    CL4                     TIMING CONTROL TABLE ADDR   STCB
TCBUSERP DS    CL4                     RESERVED                    STCB
TCBDARP  DS    CL1 DAMAGE ASSESSMENT BITS                           DAR
TCBDISPP DS    CL3                     SECONDARY DISPATCHABILITY   I270
*                                       FLAGS                      I270
TCBRESP  DS    CL4                     RESERVED                    I270
TCBJSCBP DS    CL4                     JSCB ADDRESS                I270
         DS    CL4                     RESERVED               BD A58667
         DS    CL4                     TCBIOBRC               BD A58667
         EJECT
* ATTACHED TCB DSECT (BASE REGISTER 10)
         SPACE 2
TCBFLDS  DSECT
TCBRBP   DS    CL4                     RB ADR
TCBPIE   DS    CL4                     PIE ADR
TCBDEB   DS    CL4                     DEB ADR
TCBTIO   DS    CL4                     TASK I/O TABLE ADR
TCBCMP   DS    CL4                     TASK COMPLETION CODE
TCBTRN   DS    CL4                     TESTRAN FIELD
TCBNROC  DS    CL1                     NON-ROLLOUT COUNT           RORI
TCBMSS   DS    CL3                     DATA BLOCK QUEUE ELEMENT    RORI
TCBPKF   DS    CL1                     PROTECT KEY
TCBFLGS  DS    CL5                     FLAG BYTES
         AIF   ('&STORAGE' NE '2').MVTE6                           I250
TCBQEL   DS    CL1                                                 I250
         AGO   .MFTE6                                              I250
.MVTE6   ANOP                                                      I250
TCBLMP   DS    CL1                     LIMIT PRIORITY
.MFTE6   ANOP                                                      I250
TCBDSP   DS    CL1                     DISPACHING PRIORITY
TCBLLS   DS    CL4                     LOADED PROGRAM LIST ADR
TCBJLB   DS    CL4                     JOB LIBRARY DCB ADR
TCBJSE   DS    CL4                     JOB STEP INDEX ELEMENT ADR
TCBGRS   DS    CL64                    GENERAL REGISTER SAVE AREA
         AIF   ('&STORAGE' NE '2').MVTE7                           I250
TCBIDF   DS    CL1                      TCB ID                     I250
TCBFSA   DS    CL3                      ADDR FIRST PP SVAREA       I250
         AGO   .MFTE7                                              I250
.MVTE7   ANOP                                                      I250
TCBFSA   DS    CL4                     ADR. OF FIRST PP SAVE AREA
.MFTE7   ANOP                                                      I250
TCBTCB   DS    CL4                     ADR OF NEXT TCB ON READY QUEUE
TCBTME   DS    CL4                     ADR OF TIMER ELEMENT
         AIF   ('&STORAGE' NE '2').MVTE8                           I250
TCBPIB   DS    CL4                      ADDR OF PIB                I250
         AGO   .MFTE8                                              I250
.MVTE8   ANOP                                                      I250
TCBITB   DS    CL4                     INITIATOR/TERMINATOR TCB ADR
.MFTE8   ANOP                                                      I250
TCBNTC   DS    CL4                     TCB'S NEXT TCB ADR
TCBOTC   DS    CL4                     TCB'S ORIGIN TCB ADR
TCBLTC   DS    CL4                     TCB'S LAST TCB ADR
TCBIQE   DS    CL4                     IQE ADR FOR ETXR ROUTINE
TCBECB   DS    CL4                     ECB ADR
TCBTSFLG DS    C                       TIME SHARING FLAGS         20021
TCBTSTSK EQU   X'80'                   INDICATES TIME SHAR TSK    20021
TCBSTPCT DS    C                                                  20021
TCBTSLP  DS    C                       TIME SHARING LIMIT PRIOR   20021
TCBTSDP  DS    C                       TIME SHARING DISPAT PRIOR  20021
         AIF   ('&STORAGE' NE '2').MVTE9                           I250
TCBLMP   DS    CL1                      LIMIT PRIORITY             I250
TCBRESV  DS    CL3                      ABEND USE                  I250
         AGO   .MFTE9                                              I250
.MVTE9   ANOP                                                      I250
TCBPQE   DS    CL4                     PARTITION QUEUE ELEMENT ADDR
.MFTE9   ANOP                                                      I250
TCBAQE   DS    CL4                     ALLOCATED QUEUE ELEM. ADDR  MO17
         AIF   ('&STORAGE' NE '2').MVTE10                          I250
*                                       (RESERVED IN MFT)          I250
.MVTE10  ANOP                                                      I250
TCBNSTAE DS    CL4                     STAE CONTROL BLOCK ADDRESS  STAE
TCBTCT   DS    CL4                     TIMING CONTROL TABLE ADDR   STCB
TCBUSER  DS    CL4                     RESERVED                    STCB
TCBDAR   DS    CL1 DAMAGE ASSESSMENT BITS                           DAR
TCBDISP  DS    CL3                     SECONDARY DISPATCHABILITY   I270
*                                       FLAGS                      I270
TCBRES   DS    CL4                     RESERVED                    I270
TCBJSCB  DS    CL4                     JSCB ADDRESS                I270
         DS    CL4                     RESERVED               BD A58667
         DS    CL4                     TCBIOBRC               BD A58667
         AIF   ('&STORAGE' NE '2').MVTCD0                          I250
         AIF   ('&TIMESL' EQ 'TIMESL').MFTTS                      M4291
XCCVT    DSECT                                                     I250
         CVT   SYS=INT                                            M4291
         AGO   .NSLICE1                                           M4291
.MFTTS   ANOP                                                     M4291
XCCVT    DSECT                                                    M4291
         CVT   SYS=INT,OPTIONS=(TSLICE)                            I250
*        TIME-SLICE CONTROL ELEMENT                                I250
TSCE     DSECT                                                     I250
TSHIPR   DS    CL1                      HIGH LIMIT DISPATCHING     I250
*                                        PRIORITY OF T/S GROUP     I250
TSFIRST  DS    CL3                      FIRST TCB ADDRESS          I250
TSLWPR   DS    CL1                      LOW LIMIT DISPATCHING      I250
*                                        PRIORITY OF T/S GROUP     I250
TSLAST   DS    CL3                      LAST TCB ADDRESS           I250
TSPNEXT  DS    CL1                      UNUSED                     I250
TSNEXT   DS    CL3                      NEXT TCB TO BE DISPATCHD   I250
TSLENGTH DS    CL4                      LENGTH OF TIME SLICE       I250
         AGO   .NSLICE1                                            I250
.MVTCD0  ANOP                                                     M4291
         AIF   ('&TIMESL' EQ 'TIMESL').YESTS                      M4291
XCCVT    DSECT
         CVT
         AGO   .NOTS                                              M4291
.YESTS   ANOP                                                     M4291
XCCVT    DSECT
         CVT   OPTIONS=(TSLICE)                                    MTSO
         SPACE 2                                                   MTS0
*        TIME-SLICE CONTROL ELEMENT                                MTS0
         IHBTSCE
         EJECT                                                    20021
.NOTS    ANOP                                                     M4291
         AIF   ('&TSO' NE '1').BYETSO                             M4291
         IKJTSCVT                                                 20021
         EJECT                                                    20021
         IKJTJB                                                   20021
         EJECT                                                    20021
         IKJTJBX                                                  20021
         SPACE 2                                                  20021
.BYETSO  ANOP                                                     M4291
         IEZJSCB                                                  20021
.NSLICE1 ANOP                                                      MTS0
         EJECT
* ATTACH ROUTINE (SVC 42)
         SPACE 2
IGC042   CSECT
         AIF   ('&STORAGE' EQ '2').BPMVTEX                         I250
         EXTRN IEAMSTCB
         EXTRN IEA0DS
         EXTRN IEAQCS01
         EXTRN IEAHEAD
         EXTRN IEA0DS02                                            65MP
         EXTRN IEA0AB00 .              BRANCH ENTRY TO ABTERM    A33614
         EXTRN RMBRANCH .              BRANCH ENTRY TO REGMAIN   A35419
.BPMVTEX ANOP                                                      I250
         CNOP  0,8
         BALR  XRBASE,0
         USING *,XRBASE                 ATTACH ROUTINE BASE REGISTER
         USING ATPRMS,XRPARA            INPUT PARAMETER BASE REGISTER
         USING TCBFLDSP,XROTCB          ATTACHOR'S TCB BASE REGISTER
         USING TCBFLDS,XRATCB           ATTACHED TCB BASE REGISTER
         SPACE 2
* TEST OF STAE RECURSION BIT TO DETERMINE WHETHER A PROGRAM NOW    STAE
* EXECUTING A STAE ROUTINE HAS ATTEMPTED TO ISSUE ANOTHER ATTACH.  STAE
         SPACE 1                                                   STAE
         TM    TCBNSTAP,RECRSBIT       Q. IS ATTACHOR ALREADY IN   STAE
         BZ    NOSTAE                  A STAE ROUTINE--BR IF NOT   STAE
         LA    XR15,RETCODE4           OR SET RETURN CODE          STAE
         SVC   SVCEXIT                 AND RETURN TO ATTACHOR      STAE
NOSTAE   DS    0H                      ATTACH REQUEST ACCEPTED     STAE
*  ENTERED WITH ATTACH INPUT REGISTER IN REGISTER 15. SAVE THE ADDRESS
* IN THE DSECT BASE REGISTER.
         SPACE 1
        LR    XRPARA,15
*                                      ASSOCIATE INPUT S.P.L.ADDRESS
*                                      IN REG. 15 TO REG.14 WHICH
*                                      IS USED AS A BASE TO REFER-
*                                      ENCE THE SUPERVISOR PARA.
*                                      DSECT.
         SPACE 1
*    GIVE ZERO RETURN CODE TO ATTACHOR.  THIS MAY BE ALTERED      M3891
*        LATER IN AN MVT SYSTEM BY AN ATTACH WITH THE             M3891
*        STAI PARAMETER.                                          M3891
         SPACE 1
         XR    XR15,XR15 .                  GET ZERO CODE         M3891
         ST    XR15,SVRBXR0+60(XRORB) .     PUT IN SVRB           M3891
*                                           REG 15 SLOT           M3891
         EJECT
         AIF   ('&STORAGE' NE '4').NOXTRA                        A53341
         SPACE 2
         USING XCCVT,XRCVT .           SET UP CVT DSECT          A53341
         SPACE 1
         L     XRPRB,XRLINK(XRORB) .   REG 6 = ATTACHOR'S RB     A53341
         TM    RBOPSW+1(XRPRB),X'F0' . Q.KEY ZERO ATTACHOR       A53341
         BZ    PARMOK .                YES.DON'T DO CHECKING     A53341
         LA    XRPARA,0(XRPARA) .                                A53341
         C     XRPARA,CVTMZ00 .        Q.PARM LIST ADDR IN CORE  A53341
         BH    ABEND72A .              NO.BRANCH                 A53341
         LA    XRETXR,3 .                                        A53341
         NR    XRETXR,XRPARA .         Q.PARMLIST ON WORD BOUND  A53341
         BNZ   ABEND72A .              NO.ABEND                  A53341
         CLC   ATPGNADR,CVTMZ00+1 .    Q.NAME/DE ADDR IN CORE    A53341
         BH    ABEND72A .              NO.BRANCH                 A53341
         TM    ATGSFLAG,GIVEL .        Q.GIVE SUBPOOL LIST       A53341
         BNO   SHARETST .              NO.DON'T CHECK            A53341
         CLC   ATGSFLD,CVTMZ00+1 .     Q.LIST ADDR WITHIN CORE   A53341
         BH    ABEND72A .              NO.BRANCH                 A53341
         SPACE 1
SHARETST EQU   * .                                               A53341
         TM    ATSHFLAG,SHAREL .       Q.SHARE SP LIST EXIST     A53341
         BNO   PARMOK .                NO.NO MORE CHECKING       A53341
         CLC   ATSHFLD,CVTMZ00+1 .     Q.LIST ADDR WITHIN CORE   A53341
         BL    PARMOK .                YES.BRANCH                A53341
         DROP  XRCVT .                                           A53341
         SPACE 1
ABEND72A EQU   * .                                               A53341
         L     XR1,PARMFAIL .          GET X'72A' ABEND CODE     A53341
         ABEND (1) .                   BOOM                      A53341
         SPACE 1
PARMOK   EQU   * .                                               A53341
         EJECT
.NOXTRA  ANOP                                                    A53341
         AIF   ('&STORAGE' NE '2').MVTCD1                          I250
         L    XR8,Q0(XRCVT)       ADDR OF NEW/OLD
         L    XR8,Q16(XR8)        ADDR OF RESIDENT ATTACH SUBROUTINE
         BALR XRBASE,XR8          BRANCH TO RESIDENT CODE
         USING *,XRBASE           RESET BASE REG
.MVTCD1  ANOP
* ETXR PARAMETER PROCESSING
*
         AIF   ('&STORAGE' NE '2').MVTC01                          I250
*  CHECK ETXR INPUT PARAMETER.  IF ZERO, GO TO 'TCBPREP'.  IF NOT  I250
* ZERO, SET ETXR PRESENT FLAG IN ATTACHED TCB.  STORE THE IQE      I250
* ADDRESS IN THE ATTACHED TCB.  CHECK FOR SISTER TCB'S AND         I250
* DETERMINE WHETHER THEY ARE USING THE SAME ETXR.  IF THE SAME     I250
* ETXR ADDRESS IS FOUND, STORE THE ATTACHOR'S TCB ADDRESS AND THE  I250
* ETXR'S IRB ADDRESS IN THE ATTACHD TCB'S IQE.  IF A SIMILAR ETXR  I250
* ADDRESS CANNOT BE FOUND, AN IRB IS BUILT AND INITIALIZED.        I250
         AGO   .MFTC01                                             I250
.MVTC01  ANOP                                                      I250
*  CHECK ETXR INPUT PARAMETER. IF ZERO, GO TO 'GETTCB'. IF
* NOT ZERO, SET ETXR PRESENT FLAG IN ATTACHED TCB. STORE THE IQE
* ADDRESS IN THE ATTACHED TCB. CHECK FOR SISTER TCB'S AND DETERMINE
* WHEATHER THEY ARE USING THE SAME ETXR. IF THE SAME ETXR ADDRESS
* IS FOUND, STORE THE ATTACHOR'S TCB ADDRESS AND THE ETXR'S IRB
* ADDRESS IN THE ATTACHED TCB'S IQE. IF A SIMILAR ETXR ADDRESS
* CANNOT BE FOUND, AN IRB IS BUILT AND INITIALIZED.
         SPACE 1
*  CORE USED TO CONSTRUCT THE NEW TCB CAN BE OBTAINED BY ONE OF
* THE FOLLOWING--(1)A GETMAIN FROM SP 253 FOR THE TCB ALONE, OR    STCB
* (2)A GETMAIN FROM SP 253 FOR THE TCB AND AN IQE, OR (3)A CIRB    STCB
* SPECIFYING A WORKAREA SIZE SUFFICIENT FOR THE TCB AND AN IQE.    STCB
.MFTC01  ANOP                                                      I250
         SPACE 1
         AIF   ('&STORAGE' NE '2').SCIP1                           I250
         LR    XRECB,XRCVT              SET FEOT SIGNAL            I250
.SCIP1   ANOP                                                      I250
         L     XRETXR,ATROLL           LOAD ETXR ADDRESS           RORI
         LA    XRETXR,0(0,XRETXR)      CLEAR HIGH ORDER BYTE       RORI
         LTR   XRETXR,XRETXR           Q.ETXR ADDR ZERO
         AIF   ('&STORAGE' NE '2').MVTCD3                          I250
         BZ    ATOK1                   YES - BRANCH                I250
         AGO   .MFTCD3                                             I250
.MVTCD3  ANOP                                                      I250
         BZ    GETTCB                   YES - BRANCH
.MFTCD3  ANOP                                                      I250
         L     XRASTCB,TCBLTCP         LD ATTACHOR'S DAUG TCB ADDR
ETXRLOOP LTR   XRASTCB,XRASTCB         Q,ATTACHOR'S DAUG PRESENT
         BZ    GETIRB                   NO - BRANCH
         AIF   ('&STORAGE' EQ '2').MFTAGAN                       A53372
         TM    TCBFLAGS+4(XRASTCB),TCBFC .  Q.SUBTASK TERMINATED A53372
         AGO   .MVTONE                                           A53372
.MFTAGAN ANOP                                                    A53372
         TM    TCBNDISP+2(XRASTCB),TCBFC .  Q.SUBTASK TERMINATED A53372
.MVTONE  ANOP                                                    A53372
         BO    ETXRNEXT .     YES.IRB MAY ALREADY BE FREED       A53372
         L     XRIQE,IQEFLD(XRASTCB)   LOAD IQE PTR
         LTR   XRIQE,XRIQE             Q.IQE PTR ZERO
         BZ    ETXRNEXT                 YES - BRANCH
         L     XR15,IRBADR(XRIQE)  LOAD IRB PTR                    I250
         L     XR15,RBEP(0,XR15) . ENTRY POINT ADDRESS            M1175
         LA    XR15,0(0,XR15) .    ZERO USE COUNT                 M1175
         CR    XRETXR,XR15 .       ETXR ADDR = IRB'S ENTRY POINT  M1175
         BNE   ETXRNEXT                 NO - BRANCH
         AIF   ('&STORAGE' EQ '2').MFTCD4                          I250
* GET STORAGE FOR TCB AND IQE
         SPACE 1                                                   STCB
         GETMAIN R,LV=240,SP=253                              BD A58667
         SPACE 1                                                   STCB
         LA    XRATCB,48(XRCOREAD)    $LD ADDR OF NEW TCB
         LR    XRIQEW,XRCOREAD        $LD ADDR OF NEW IQE
         AGO   .MVTCD4                                             I250
.MFTCD4  ANOP                                                      I250
         LA    XRIQEW,QSVAREAL(XRCOREAD) LD ADDR IQE               I250
.MVTCD4  ANOP                                                      I250
         L     XRIRB,IRBADR(XRIQE)     LD IRB PTR FROM EXISTING IQE
         B     ETXRIQE
ETXRNEXT L     XRASTCB,SISPTR(XRASTCB) GET TCB'S SISTER
         B     ETXRLOOP
         SPACE 1                                                   STCB
         AIF   ('&STORAGE' NE '2').MVTCD5                          I250
ATOK1    EQU   *                                                   I250
         L      XRECB,ATECBADR         LOAD INPUT ADDR ECB         I250
         LA    XRECB,ZERO(XRECB)       CLEAR HIGH ORDER BYTE       I250
         LTR   XRECB,XRECB             ECB SPECIFIED               I250
         BNZ   TCBPREP                 YES - CONTINUE NORMALLY     I250
* THE FOLLOWING CODING IS INVOKED IF THE ATTACHOR HAS SPECIFIED    I250
* NEITHER AN ETXR OR ECB PARAMETR. IT SCHEDULES A SYSTEM ETXR      I250
* WHICH FORCES END OF TASK.                                        I250
         L     XRETXR,ADDRCVT          GET CVT ADDR                I250
         L     XRETXR,Q0(XRETXR)        GET NEW TCB ADDR           I250
         L     XRETXR,Q12(XRETXR)       GET SYSTEM ETXR ADDR       I250
GETIRB   DS    0H                                                  I250
         LA    XRIQEW,QSVAREAL(XRCOREAD)  LD ADDR IQE              I250
         LR    XRCOREAD,XRIQEW                                     I250
         CIRB  EP=(XRETXR),STAB=(DYN),SVAREA=YES,WKAREA=1          I250
         XC    Q96(Q8,XRIRB),Q96(XRIRB)     ZERO FEOT INDICATOR    I250
         OI    RBSTAB(XRIRB),TWO . INDICATE IRB FOR ETXR         A38693
         LTR   XRECB,XRECB         IS THIS A FEOT IRB              I250
         BNZ   ETXRIQE             NO - CONTINUE                   I250
         ST    XRATCB,Q96(XRIRB)   PUT TCB ADDR IN FOR FEOT        I250
         SPACE 1
ETXRIQE  EQU   *                                                   I250
         XC    0(16,XRIQEW),0(XRIQEW)   CLEAR IQE TO ZERO          I250
         OI    TCBRESV+1,ETXRFLG        SET NEW TCB'S ETXR FLAG    I250
         AGO   .MFTCD5                                             I250
.MVTCD5  ANOP                                                      I250
GETIRB   DS    0H       ISSUE CIRB FOR SPACE FOR TCB AND IQE       STCB
         CIRB  EP=(XRETXR),STAB=(DYN),SVAREA=YES,WKAREA=30,   BD A58667C
               RETIQE=NO                                           I270
         SPACE 1                                                   STCB
         LA    XRIQEW,IQEDISP(XRIRB)  $LD ADDR OF NEW IQE          1505
         OI    RBSTAB+1(XRIRB),24   TURN ON USER IQE FLAGS IN IRB  1505
*
* MODIFY LENGTH OF IRB NOT TO INCLUDE AREA USED FOR THE NEW TCB
*
         LA    XRLENGTH,IRBSIZE        IRB LENGTH IN DOUBLE WORDS
         STC   XRLENGTH,RBSIZE(XRIRB)  MODIFY LENGTH OF IRB
         LA    XRATCB,144(XRIRB)      $LD ADDR OF NEW TCB          1505
ETXRIQE  XC    TCBRBP(48),TCBRBP       ZERO NEW TCB TO TCBGRS      STCB
         XC    TCBFSA(80),TCBFSA       ZERO FROM TCBGRS TO END   A58667
         XC    0(16,XRIQEW),0(XRIQEW)  CLEAR IQE TO ZERO
         OI    TCBFLGS+1,ETXRFLG       SET NEW TCB'S ETXR FLAG
.MFTCD5  ANOP                                                      I250
         ST    XRIQEW,TCBIQE           STORE ADDR OF NEW IQE IN TCB
         ST    XRATCB,FSTWD(XRIQEW)    STORE NEW TCB ADDR IN IQE
         ST    XRIRB,IRBADR(XRIQEW)    STORE IRB ADDR IN IQE
         ST    XROTCB,MOMTCB(XRIQEW)   STORE ATTACHOR'S ADDR IN IQE
         IC    XRCOUNT,RBUSE(XRIRB)    GET IRB USE COUNT
         LA    XRCOUNT,1(XRCOUNT)      ADD 1
         STC   XRCOUNT,RBUSE(XRIRB)    STORE UPDATED USE COUNT
         AIF   ('&STORAGE' EQ '2').MFTCD6                          I250
         B     COMN                                                CPRS
         SPACE 1                                                   STCB
GETTCB   DS    0H                      GET STORAGE FOR TCB ONLY    STCB
         GETMAIN R,LV=224,SP=253                              BD A58667
         SPACE 1                                                   STCB
         LA    XRATCB,32(XRCOREAD)    $LD ADDR OF NEW TCB
         XC    TCBRBP(48),TCBRBP       ZERO NEW TCB TO TCBGRS      STCB
         XC    TCBFSA(80),TCBFSA       ZERO FROM TCBGRS TO END   A58667
         SPACE 2
*                                                                  CPRS
* PROPAGATE BYTE 20                                                CPRS
         SPACE 1                                                  20021
COMN     EQU   *                                                  20021
         AIF   ('&STORAGE' NE '4').NTSO7B                        A53341
         SPACE 2
*    GET DUMMY PRB IN CASE OF ABEND BEFORE ATTACH'S SVRB IS       M4385
*        QUEUED ONTO THE DAUGHTER TCB.                            M4385
         SPACE 1
         GETMAIN R,LV=32,SP=255                                   M4385
         XC    0(28,XR1),0(XR1) .      ZERO OUT THE RB            M4385
         ST    XR1,TCBRBP .            CHAIN DUMMY RB TO TCB      M4385
         ST    XRATCB,RBLINK(XR1) .                               M4385
         MVI   RBSTAB+1(XR1),X'80' .   RB POINTS TO THE TCB       M4385
         MVI   RBOPSW+1(XR1),X'04' .   ENABLE FOR MACH. CHK.      M4385
         MVI   RBSIZE(XR1),X'04' .     SET RB SIZE IN DBW'S       M4385
         SPACE 1
         AIF   ('&TSO' NE '1').NTSO7B                            A53341
* TEST IF ATTACHOR IS A TIME SHAR TASK. IF YES THEN TURN ON       20021
* BIT IN ATTACHED TCB INDICATING IT IS A TIME SHAR TSK.           20021
         SPACE 1
         TM    TCBTSFLP,TCBTSTSP  Q.IS ATTACHOR A TS TASK         M1373
         BZ    NTSTSK             NO.BRANCH                       M1373
         OI    TCBTSFLG,TCBTSTSK  YES.SET BIT INDICATING THAT     M1373
*                                      ATTACHEE IS A TS TASK      M1373
NTSTSK   EQU   *                                                  M1373
         SPACE 1
         TM    TCBTRNP,TESTRBIT   IS TEST BIT ON                  20021
         BZ    NOTSO7B            NO BRANCH                       20021
         MVC   TCBTRN(FOUR),TCBTRNP YES - PROPAGATE FOUR BYTES    20021
         B     STAEPROC           CONTINUE ATTACH                 20021
NOTSO7B  EQU   *                                                  20021
.NTSO7B  ANOP                                                     20021
         MVC   TCBTRN(ONE),TCBTRNP  NO PROPAGATE ONE BYTE         20021
         NI    TCBTRN,255-EMUL .   TURN OFF EMULATOR BIT IN SUBT A54872
*                                                                  CPRS
         SPACE 2                                                   CPRS
* THIS SECTION CHECKS TO SEE IF A STAI SCB IS REQUESTEDBY THE     20021
* TCB BEING ATTACHED. IF IT IS REQUESTED THEN A STAI SCB IS BUILT 20021
* AND QUEUED TO IT.IT ALSO PROPAGATES ANY STAI SCB'S THAT EXIST   20021
* ON THE ATTACHOR TO THE ATTACHED TCB.                            20021
         SPACE 2                                                  20021
         AIF   ('&TSO' NE '1').NTSO7C                             20021
STAEPROC EQU   *                                                  20021
.NTSO7C  ANOP                                                     20021
         TM    ATECBADR,STAIFLAG  IS STAI REQUESTED               20021
         BZ    NOTREQ             NO- BRANCH TO DETERMINE IF      20021
*                                 STAI TO BE PROPAGATED           20021
*                                 TO DAUGHTER TCB                 20021
         L     XR2,ATSTPLAD       LOAD STAI PARAMETER LIST ADR    20021
         L     XR6,ATEXRTAD       LOAD EXIT RTN ADDR              20021
         MVC   RBEXSAVE(1,XRORB),ATEXRTAD INSERT FLAGS IN LIST    M2997
         BAL   XR8,STLOOP .        ISSUE STAE                     M2191
         CH    XR15,RETCD4 .      Q.RCODE = 4                     M3891
         BL    NOTREQ .           NO.CODE = 0, ALL OK             M3891
         BH    NTRC4 .            NO.CODE GT 4, LEAVE IT ALONE    M3891
         AR    XR15,XR15 .        YES.MAKE IT X'08'               M3891
*                                 (FAILURE TO CREATE A STAI)      M3891
NTRC4    EQU   * .                                                M3891
         ST    XR15,SVRBXR0+60(XRORB) . SAVE RCODE FOR ATTACHOR   M3891
         BAL   XR2,UTHNASIA .     CLEAN UP THE DAUGHTER           M3891
         L     XR15,SVRBXR0+60(XRORB) . LOAD RCODE FOR ATTACHOR   M3891
         XR    XR1,XR1 .          ZERO OUT TCB ADDRESS REG        M3891
         SVC   3 .                RETURN TO ATTACHOR              M3891
NOTREQ   EQU   * .                                                M2191
         LA    XR8,STAELOOP .      SET RETURN ADDR                M2191
         L     XR9,TCBNSTAP .      GET ADDR 1ST SCB ON ATTACHOR   M2191
         B     BREED .            START THE PROPAGATION LOOP      M3891
STAELOOP EQU   * .                                                M2191
         LTR   XR15,XR15 .        Q.RCODE = 0                     M3891
         BNZ   RETCODE .           NO.CLEAN UP AND LEAVE          M3891
BREED    EQU   * .                                                M3891
         LA    XR9,ZERONUM(XR0,XR9) .CLEAR HI ORDER BYTE          M2191
         LTR   XR9,XR9 .           ANY SCB'S ON ATTACHOR          M2191
         BZ    ROLL .              NO-CONTINUE                    M2191
         TM    TWELVE(XR9),STAISCB .IS IT A STAI SCB              M2191
         BZ    ROLL .              NO                             M2191
         IC    XR2,EIGHT(XR0,XR9) .GET FLAGS IN HI BYTE OF PARAM  M2191
*                                  ADDR IN SCB                    M2191
         STC   XR2,RBEXSAVE(XRORB) STORE IN LIST                  M2997
         L     XR6,FOUR(XR0,XR9) . GET EXIT RTN ADDR              M2191
         L     XR2,EIGHT(XR0,XR9) .GET PARM LIST ADDR             M2191
         LA    XR2,ZERONUM(XR0,XR2) .CLEAR HI BYTE OF FLAGS       M2191
         L     XR9,ZERONUM(XR0,XR9) .GET ADDR NEXT SCB            M2191
STLOOP   EQU   * .                                                M2191
         LA    XR1,RBEXSAVE(XRORB)                                20021
         STAE  (6),CT,PARAM=(2),XCTL=YES,TCB=(10),MF=(E,(1))      20021
         BR    XR8 .               CONTINUE SEARCH                M2191
         SPACE 1
RETCODE  SLL   XR15,2 .           MAKE RCODE = X'10'.  ONLY       M3891
*                                 POSSIBLE CODE FROM STAI IS 4    M3891
         ST    XR15,SVRBXR0+60(XRORB) . SAVE RCODE FOR ATTACHOR   M3891
         LR    XR6,XRPARA .       SAVE PARAMLST ADDR OVER FMAIN   M3891
         BAL   XR2,UTHNASIA .     CLEAN UP THE DAUGHTER           M3891
         LR    XRPARA,XR6 .       RESTORE PARAMLST ADDR           M3891
         TM    ATECBADR,STAIFLAG .Q.ATTACH WITH STAI              M3891
         BZ    ERROR5 .           NO.ABEND WITH X'052A'           M3891
         L     XR15,SVRBXR0+60(XRORB) . LOAD RCODE FOR ATTACHOR   M3891
         XR    XR1,XR1 .          ZERO OUT TCB ADDRESS REG        M3891
         SVC   3 .                YES.RETURN TO ATTACHOR          M3891
         SPACE 1
ERROR5   L     XR1,PROPFAIL .     GET CODE INTO REG 1             M3891
         SVC   13 .               BOOM                            M3891
         SPACE 2
***************************************************************   M3891
*    EUTHANASIA SUBROUTINE:  CLEAN UP A PARTIALLY CREATED         M3891
*        DAUGHTER TASK SHOULD STAI CREATION OR PROPAGATION FAIL   M3891
***************************************************************   M3891
         SPACE 1
UTHNASIA EQU   * .                                                M3891
         L     XR9,TCBIQE .       GET IQE ADDR FROM THE TCB       M3891
         LTR   XR9,XR9 .          Q.DOES IQE EXIST                M3891
         BZ    TCBFREE .          NO.ONLY FREE THE TCB            M3891
         L     XR8,IQEIRB(XR9) .  YES.GET IRB ADDR FROM THE IQE   M3891
         SR    XR7,XR7 .                                          M3891
         IC    XR7,IRBUSE(XR8) .  GET IRB USE COUNT               M3891
         BCTR  XR7,0 .            DECREMENT THE USE COUNT         21B72
         STC   XR7,IRBUSE(XR8) .  UPDATE THE IRB USE COUNT        21B72
         LTR   XR7,XR7 .          Q.COUNT EQUAL ZERO              21B72
         BNZ   IQEFREE .          NO.ONLY FREE THE IQE            21B72
*                                 YES.FREE THE IRB ,ALSO          21B72
FREEIRB  EQU   * .                                                M3891
         L     XR1,IRBSAVE(XR8) . GET SAVE AREA ADDR              M3891
         LA    XR1,0(XR1) .       CLEAR HIGH BYTE                 M3891
         LTR   XR1,XR1 .          Q.SAVE AREA EXISTS              M3891
         BZ    NOSAVE .           NO.BRANCH                       M3891
         L     SIZEREG,SAVEAREA . GET SAVEAREA SIZE AND SUBPOOL   M3891
         LA    XR1,0(XR1) .       INDICATE FREEMAIN               M3891
         L     RGETMAIN,RMBRNCHA .GET ADDR OF FREEMAIN BRANCH     M3891
         BALR  XRRETURN,RGETMAIN .GO TO FREEMAIN                  M3891
NOSAVE   EQU   * .                                                M3891
         L     SIZEREG,SIZEIRB .  GET IRB SIZE AND SUBPOOL        M3891
         LA    XR1,0(XR8) .       INDICATE FREEMAIN               M3891
         L     RGETMAIN,RMBRNCHA .GET ADDR OF FREEMAIN BRANCH     M3891
         BALR  XRRETURN,RGETMAIN .GO TO FREEMAIN                  M3891
         SPACE 1
IQEFREE  EQU   * .                                                M3891
         L     SIZEREG,IQESIZE .  GET IQE SIZE AND SUBPOOL        M3891
         LA    XR1,0(XR9) .       GET IQE ADDR                    M3891
         L     RGETMAIN,RMBRNCHA .GET ADDR OF FREEMAIN BRANCH     M3891
         BALR  XRRETURN,RGETMAIN .GO TO FREEMAIN                  M3891
         SPACE 1
TCBFREE  EQU   * .                                                M3891
         L     XR9,TCBNSTAE .     GET SCB FROM TCB                M3891
FINDSCB  LA    XR9,0(XR9) .       CLEAR OFF FLAGS                 M3891
         LTR   XR9,XR9 .          Q.ANY SCB'S LEFT                M3891
         BZ    TASK .             NO.GO TO FREE THE TCB           M3891
         L     SIZEREG,SCBSIZE .  GET SCB SUBPOOL AND SIZE        M3891
         LR    XR1,XR9 .          GET ADDR INTO REG 1             M3891
         L     RGETMAIN,RMBRNCHA .GET ADDR OF FREEMAIN BRANCH     M3891
         BALR  XRRETURN,RGETMAIN .GO TO FREEMAIN                  M3891
         L     XR9,NEXTSCB(XR9) . GET NEXT SCB                    M3891
         B     FINDSCB .          LOOP                            M3891
TASK     EQU   * .                                                M3891
         L     SIZEREG,TCBSIZE .  GET TCB SIZE AND SUBPOOL        M3891
         LA    XR1,32 .           GET CONSTANT TO ADDR FPREGS     M3891
         LCR   XR1,XR1 .          MAKE IT MINUS                   M3891
         AR    XR1,XRATCB .       GET REAL STARTING ADDR OF TCB   M3891
         L     RGETMAIN,RMBRNCHA .GET ADDR OF FREEMAIN BRANCH     M3891
         BALR  XRRETURN,RGETMAIN .GO TO FREEMAIN                  M3891
         BR    XR2 .              RETURN TO CALLER                M3891
         SPACE 1
NEXTSCB  EQU   0 .                OFFSET OF SCB CHAIN FIELD       M3891
IRBSAVE  EQU   0 .                OFFSET OF SAVEAREA ADDR IN IRB  M3891
IQEIRB   EQU   8 .                OFFSET OF IRB ADDR IN THE IQE   M3891
IRBUSE   EQU   24 .               OFFSET OF USE COUNT IN THE IRB  M3891
         SPACE 1
         DS    0F .                                               M3891
SAVEAREA DC    AL1(250),AL3(72) . SAVEAREA SUBPOOL AND SIZE       M3891
SIZEIRB  DC    AL1(253),AL3(96) . IRB SUBPOOL AND SIZE            M3891
IQESIZE  DC    AL1(253),AL3(16) . IQE SUBPOOL AND SIZE            M3891
SCBSIZE  DC    AL1(255),AL3(16) . SCB SUBPOOL AND SIZE            M3891
TCBSIZE  DC    AL1(253),AL3(216) .TCB SUBPOOL AND SIZE            M3891
PRBSIZE  DC    AL1(255),AL3(32)        .PRB SUBPOOL AND SIZE      M5403
         SPACE 2                                                  20021
*  ROLLOUT BIT PROCESSING                                          RORI
* THE VALUE AT OFFSET 20.6 IN THE PARAMETER LIST IS REFLECTED      RORI
* IN TCBNROC BYTE (NON-ROLLOUTABLE COUNT) AT OFFSET 24 IN THE      RORI
* JOB STEP TCB AND SUB-TASKS.  THE VALUE AT OFFSET 20.7 IS         RORI
* REFLECTED IN THE TCBFRA FLAG(ROLLOUTABILITY) AT OFFSET 30.2      RORI
* IN THE JOB STEP TCB AND SUB-TASKS.                               RORI
         SPACE 2                                                   RORI
ROLL     TM    ATROLL,NROLABLY        Q. IS TASK ROLLOUTABLE       RORI
       BO    INVOKE               YES,TAKE BRANCH ROCOUNT = 00     RORI
         OI    TCBNROC,X'01'           SET ROLLOUTABLE COUNT       RORI
INVOKE   TM    ATROLL,ROLABLY        Q. CAN STEP INVOKE ROLLOUT    RORI
         BZ    ATOK1                   NO, TAKE BRANCH             RORI
         OI    TCBFLGS+1,X'20'         SET CAN INVOKE ROLLOUT      RORI
         SPACE 2                                                   RORI
.MFTCD6  ANOP                                                      I250
         AIF   ('&STORAGE' NE '2').MVTCD7                          I250
* SET MODE PARAMETER PROCESSING                                    I250
* THE ATTACHOR PROTECT KEY IS PROPOGATED TO THE ATTACHED TCB.      I250
* THE ATTACHED TCB IS SET TO PROBLEM PROGRAM MODE.                 I250
         AGO   .MFTCD7                                             I250
.MVTCD7  ANOP                                                      I250
* JOB STEP,MODE,AND KEY PARAMETER PROCESSING IN THE TCB            I270
         SPACE 1
* THE JOB STEP FIELD IS PROPAGATED TO THE ATTACHEE'S TCB. IF THE   I270
* ATTACHOR HAS NON-ZERO PROTECT KEY, THE GIVEJPQ,KEY,SVAREA,       I270
* JSTCB, AND SM BITS IN BYTE 27 OF THE INPUT PARAMETER LIST ARE    I270
* SET TO THE DEFAULT VALUES FOR THESE PARAMETERS. THE JOB STEP     I270
* FIELD REMAINS PROPAGATED, THE MODE IS PROBLEM PROGRAM, AND THE   I270
* PROTECT KEY IS PROPAGATED. IF A KEY ZERO ATTACHOR SPECIFIES      I270
* JSTCB=YES, THE JOB STEP FIELD IS SET TO THE ADDRESS OF THE       I270
* ATTACHEE'S TCB. IF HE SPECIFIES KEY=ZERO, THE KEY IS NOT         I270
* PROPAGATED. IF HE SPECIFIES SM=SUPV, THE MODE BIT IS SET TO      I270
* INDICATE SUPERVISOR MODE.                                        I270
         SPACE 1
ATOK1    MVC   TCBPQE(4),TCBPQEP  PROPAGATE PARTITION Q ELEMENT    I270
         MVC   TCBITB(4),TCBITBP  PROPAGATE JOB STEP FIELD         I270
         MVC   TCBTCT(L'TCBTCT),TCBTCTP  PROPAGATE TCT POINTER     SMF1
         L     XRPRB,RBLINK(XRORB) GET REQUESTOR'S PRB             I270
         TM    RBOPSW+1(XRPRB),X'F0' Q.KEY ZERO ATTACHOR           I270
         BZ    JSTEST             Y8S,BRANCH AROUND DEFAULTS       I270
         NI    ATINDS,ATDFLT      DEFAULT SM,JSTCB,SVAREA,KEY,     I270
*                                 AND GIVEJPQ IN BYTE 27           I270
JSTEST   TM    ATINDS,ATJST       Q.IS JSTCB PARAMETER=YES         I270
         BZ    SMTEST             NO,LEAVE JOB STEP FIELD          I270
*                                 PROPAGATED                       I270
         ST    XRATCB,TCBITB      SET JSTCB FIELD IN AT'EE TCB     I270
SMTEST   TM    ATINDS,ATMODE       Q.IS SM PARAMETER=SUPV          I270
         BZ    KEYTEST            NO,LEAVE MODE P/P                I270
         MVI   TCBFLGS+2,TCBFSM   SET MODE TO SUPV                 I270
KEYTEST  TM    ATINDS,ATKEY       Q.IS KEY PARAMETER=ZERO          I270
         BO    TIOTPRO            YES,LEAVE KEY ZERO               I270
         MVC   TCBPKF(1),TCBPKFP  PROPAGATE PROTECT KEY            I270
         SPACE 2
*  PROPAGATE TASK I/O TABLE POINTER AND THE JOB LIBRARY POINTER.
* IF A TASKLIB DCB ADDRESS HAS BEEN GIVEN, PLACE IT IN THE        20021
* JOBLIB FIELD OF THE ATTACHEE.                                   20021
         SPACE 1
TIOTPRO  MVC   TCBTIO(4),TCBTIOP        PROPOGATE TIOT FIELD
         MVC   TCBJLB(4),TCBJLBP        PROPOGATE JOB LIBRARY FIELD
* TEST FOR TASKLIB REQ'D FOR PREVIOUS RELEASE ASSY. COMPATABILITY 20021
         TM    ATECBADR,TLIBFLAG  Q.IS TASKLIB DCB GIVEN          20021
         BZ    ZCONT                NO-BRANCH AROUND MOVE         20021
         L     XR6,ATASKLIB             GET TASKLIB DCB ADDR      M0122
         LTR   XR6,XR6                  Q.DCB ADDR = 0            M0122
         BZ    ZCONT                    YES.BRANCH                M0122
         ST    XR6,TCBJLB               NO.PUT NEW ADDR IN TCB    M0122
ZCONT    EQU   *                                                  20021
         SPACE 2
*                                                                  I270
* JSCB PARAMETER PROCESSING                                        I270
*                                                                  I270
* IF THE JSCB BIT IN BYTE 27 IS ZERO, THE TCBJSCB FIELD IS         I270
* PROPAGATED FROM THE MOTHER TO THE DAUGHTER TCB. IF THE JSCB      I270
* BIT IS ONE, THE REQUESTOR'S PROTECT KEY IN THE RB IS CHECKED.    I270
* IF THE PROTECT KEY IS NOT ZERO, THE TCBJSCB FIELD IS             I270
* PROPAGATED FROM THE MOTHER TCB. IF THE PROTECT KEY IS ZERO       I270
* THE JSCB ADDRESS GIVEN IN BYTES 37-39 OF THE SPL IS MOVED TO     I270
* THE TCBJSCB FIELD IN THE DAUGHTER'S TCB.                         I270
         SPACE 1
JSCB     TM    ATINDS,ATJSCB      Q.IS JSCB PARAMETER GIVEN        I270
         BZ    PROPJSCB           NO,BRANCH                        I270
         L     XRPRB,RBLINK(XRORB) GET REQUESTOR'S PRB             I270
         TM    RBOPSW+1(XRPRB),X'F0' Q.KEY ZERO ATTACHOR           I270
         BC    7,PROPJSCB         NO,BRANCH                        I270
         MVC   TCBJSCB+1(3),ATJSCBAD+1 STORE JSCB ADR IN AT'ED     I270
*                                      TCB                         I270
         B     ECB                BRANCH TO ECB PROCESSING         I270
PROPJSCB MVC   TCBJSCB+1(3),TCBJSCBP+1 PROPAGATE JSCB FIELD        I270
         SPACE 2
         AGO   .MVTCD8                                             I250
.MFTCD7  ANOP                                                      I250
TCBPREP  MVC   TCBPIB(4),TCBPIBP        PROPAGATE PIB POINTER      I250
         MVC   TCBPKF(1),TCBPKFP        PROPAGATE PROJECT KEY      I250
         MVC   TCBTIO(4),TCBTIOP   PROPAGATE TIOT FIELD            I250
         MVC   TCBLLS(12),TCBLLSP  PROPAGATE LLS PTR               I250
*                                    JOB LIB & JOB STEP FIELDS     I250
         MVC   TCBTCT(4),TCBTCTP   PROPAGATE TCT                   I250
         MVC   TCBJSCB(4),TCBJSCBP  PROPAGATE STP RELATD DATA TAB  I250
         AIF   ('&FPREGS' NE 'FPREGS').NFPRSB                      I250
         OI    TCBFLGS+2,X'08'          INDICATE FL PT REGS EXIST  I250
.NFPRSB  ANOP                                                      I250
.MVTCD8  ANOP                                                      I250
* ECB PARAMETER PROCESSING.
* IF THE ECB PARAMETER IS ZERO THIS SECTION OF CODE IS BY-PASSED.IF NOT
* CHECK THE VALIDITY OF THE ECB ADDRESS. IF THE ECB ADDRESS IS INVALID
* GO TO ERROR ROUTINE (ABEND). IF THE ECB ADDRESS IS OK CHECK PROTECT
* KEY TO SEE IF EQUAL TO ATTACHORS PROTECT KEY. IF NOT EQUAL WAS
* ATTACHOR IN SUPERVISER MODE. NO, GO TO ABEND.
         SPACE 1
ECB      L     XRECB,ATECBADR     LOAD INPUT ECB ADR               I270
         LA    XRECB,0(XRECB)          CLEAR HI ORDER BYTE
         LTR   XRECB,XRECB             Q.ECB PTR ZERO
         BZ    ATOK2                    YES BRANCH
         ST    XRECB,TCBECB             ST ECB ADR IN ATTACHED TCB
         L     XRPRB,RBLINK(XRORB)      GET REQUESTOR'S RB
         TM    RBOPSW+1(XRPRB),X'F0'   Q.REQUESTOR'S KEY 0
         BC    8,ATOK2                 YES, TAKE BRANCH NO VAL. CHECK
         L     XRECB,TCBECB            RESTORE ECB REG
         TM    ATECBADR+3,X'03'        Q.ECB ADR ON FULL WORD BOUNDRY
         BC    7,ERROR4                *** NO - BRANCH
         AIF   ('&STORAGE' NE '2').MVTECB                          I250
         LA    XR8,Q1                                              I250
         L     XR9,TCBJSE          GET JOB STEP ADDR               I250
         L     XR9,TCBMSSS(XR9)    GET BB PTR                      I250
         TM    Q0(XR9),X01           LCS PRESENT                   I250
         BZ    ECBCK               NO - ONLY ONE PASS              I250
         LA    XR8,Q1(XR8)         INCR COUNTER                    I250
ECBCK    C     XRECB,Q4(XR9)        OUTSIDE BB LOW                 I250
         BL    ERROR4              YES - ERR                       I250
         C     XRECB,Q8(XR9)       OUTSIDE BB HI                   I250
         BH    ERROR4              YES - ERR                       I250
         AGO   .MFTFECB                                            I250
.MVTECB  ANOP                                                      I250
         C     XRECB,MACHSIZE(XRCVT)   Q.ECB ADR OUT OF CORE RANGE
         BH    ERROR4                  YES - BRANCH
         IC    XRECB,PKEYTEST+1         ZERO REG BITS 24-31
         ISK   XRECB,XRECB              LD ECB PROTECT KEY
         EX    XRECB,PKEYTEST          Q.ECB PROTECT KEY SAME WITH ATOR
         BE    ATOK2                    YES BRANCH
PKEYTEST CLI   TCBPKFP,SMODEKEY        Q.ATTACHOR IN SUPERVISER MODE
         BNE   ERROR4                  *** NO - BRANCH
.MFTFECB ANOP                                                      I250
         SPACE 2
* PRIORITY PARAMETER PROCESSING.
         SPACE 1                                                  20021
* FOR NON TIME SHARING TASKS                                      20021
         SPACE 1                                                  20021
*  CHECK LIMIT PRIORITY PARAMETER. IF ZERO, PROPOGATE
* THE ATTACHOR'S LIMIT PRIORITY, OTHERWISE SUBTRACK THE LIMIT
* PRIORITY PARAMETER FROM THE ATTACHOR'S LIMIT PRIORITY. IF
* THE RESULT IS ZERO OR LESS, STORE A ZERO IN THE ATTACHED
* TCB'S LIMIT PRIORITY, IF PLUS, STORE RESULT.
*
*  CHECK THE DISPATCHING PRIORITY. IF ZERO, COMPARE THE
* ATTACHED LIMIT PRIORITY AGAINST THE ATTACHOR'S DISPATCHING
* PRIORITY AND STORE THE LOWER IN THE ATTACHED TCB'S DISPATCH FIELD. IF
* THE INPUT DISPATCH PRIORITY WASN'T ZERO, ADD THE INPUT AND THE
* ATTACHORS TCB'S DISPATCH PRIORITY. IF THE ADDED RESULT IS ZERO OR
* LESS, STORE ZERO IN THE ATTACHED TCB DISPATCH FIELD. IF THE ADDED
* RESULT WASN'T ZERO OR LESS, COMPARE IT AGAINST THE ATTACHED LIMIT
* PRIORITY AND STORE THE SMALLER IN THE ATTACHED TCB'S DISPATCH FIELD.
         SPACE 1
         AIF   ('&TSO' NE '1').NTSO8                              20021
* FOR TIME SHARING TASKS.                                         20021
         SPACE 1                                                  20021
* TEST IF LOGON IS BEING ATTACHED. IF NOT BEING ATTACHED, THEN    20021
* PROPAGATE THE REAL LIMIT AND THE REAL DISPATCHING PRIORITIES    20021
* FROM THE ATTACHOR TO THE ATTACHED TCB, AND MODIFY THE TIME      20021
* SHARING LIMIT AND DISPATCHING PRIORITIES IF ANY PARAMETERS ARE  20021
* PASSED. IF PARAMETERS ARE NOT PASSED THEN PROPAGATE THE TIME    20021
* SHARING LIMIT AND DISPATCHING PRIORITIES.                       20021
*                                                                 20021
* WHEN LOGON IS BEING ATTACHED, DECREMENT ATTACHOR'S(RCT) REAL    20021
* LIMIT AND DISPATCHING PRIORITY BY ONE AND PUT IT IN LOGON'S     20021
* REAL LIMIT AND REAL DISPATCHING PRIORITY FIELDS,AND ALSO IN     20021
* LOGON'S TIME SHARING LIMIT AND DISPATCHING PRIORITY FIELDS.     20021
.NTSO8   ANOP                                                     20021
ATOK2    SR    XRLPRI,XRLPRI
         SR    XRINLPRI,XRINLPRI
         AIF   ('&TSO' NE '1').NTSO20                             20021
         TM    TCBTSFLP,TCBTSTSP  IS ATTACHOR A TIME SHARING TSK  20021
         BZ    NOTSO1             NO- BRANCH                      20021
         TM    ATECBADR,LOGONFLG  IS LOGON BEING ATTACHED         20021
         BNO   NTLOGATT .          NO                             M2173
         L     XR6,RBLINK(XR0,XR5) .R B OF ATTACHOR               M2173
         TM    RBOPSW+1(XR6),X'F0' ATTACHOR HAVE KEY 0            M2173
         BZ    LOGONATT .          YES                            M2173
NTLOGATT EQU   * .                                                M2173
         MVC   TCBLMP(TWO),TCBLMPP PROP REAL LIM AND DSPCH PRIOR  20021
         IC    XRLPRI,TCBTSLPP    LD ATTACHORS TS LIM PRIOR       20021
         TM    ATLPMOD,X'FF'      IS THERE A LIM PRI PARAM        20021
         BZ    PROPLMPR           NO  BRANCH                      20021
         B     ATOK2A                                             20021
NOTSO1   EQU   *                                                  20021
.NTSO20  ANOP                                                     20021
         IC    XRLPRI,TCBLMPP           LD ATTACHORS LIMIT PRIORITY
         TM    ATLPMOD,X'FF'           Q.LIMIT PRIORITY TO BE PROPAGATE
         BZ    STLPRI                   YES BRANCH
         AIF   ('&TSO' NE '1').NTSO30                             20021
ATOK2A   EQU   *                                                  20021
.NTSO30  ANOP                                                     20021
         IC    XRINLPRI,ATLPMOD         LD PARAMETER LIMIT PRIORITY
         SR    XRLPRI,XRINLPRI          SUBTRACT INPUT FROM ATTACHOR
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE5                     MTS0
         BNH   STRTMESL                 Q.DIFF. 0 OR LESS-YES-BR   MTS0
         AGO   .NSLICE6                                            MTS0
.NSLICE5 ANOP                                                      MTS0
         BNH   ATOK4                  Q.DIFF. 0 OR LESS(YES BRANCH)
.NSLICE6 ANOP                                                      MTS0
         AIF   ('&TSO' NE '1').NTSO21                             20021
         TM    TCBTSFLP,TCBTSTSP  IS THIS A TIME SHARING TSK      20021
         BZ    NOTSO2             NO- BRANCH                      20021
PROPLMPR STC   XRLPRI,TCBTSLP     ST ATTACHORS LIM                20021
*                                 OR REDUCED LIMIT PRI IN         20021
*                                 ATTACHED TCB                    20021
         IC    XRDPRI,TCBTSDPP    LD ATTACHORS TS DISPAT PRI      20021
         B     ATOK2B                                             20021
NOTSO2   EQU   *                                                  20021
.NTSO21  ANOP                                                     20021
STLPRI   STC   XRLPRI,TCBLMP            ST ATTACHOR'S OR REDUCED LIMIT
*                                       PRIORITY IN ATTACHED TCB
         IC    XRDPRI,TCBDSPP           LD ATTACHOR'S DISPATCH PRIORITY
         AIF   ('&TSO' NE '1').NTSO31                             20021
ATOK2B   EQU   *                                                  20021
.NTSO31  ANOP                                                     20021
         LH    XRINDPRI,ATDPMOD         LD PARAMETER DISPATCH PRIORITY
         AR    XRINDPRI,XRDPRI         Q.ADD ATTACHOR'S DISPATCH AND
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE7                     MTS0
         BM    STRTMESL                 INPUT DISPATCH(NEG.-BR)    MTS0
         AGO   .NSLICE8                                            MTS0
.NSLICE7 ANOP                                                      MTS0
         BM    ATOK4                   INPUT DISPATCH(NEGITIVE BRANCH)
.NSLICE8 ANOP                                                      MTS0
         AIF   ('&TSO' NE '1').NTSO22                             20021
         TM    TCBTSFLP,TCBTSTSP  IS THIS A TIME SHARING TSK      20021
         BZ    NOTSO3             NO- BRANCH                      20021
         CR    XRINDPRI,XRDPRI  Q.WAS INPUT DISPATCH PRIORITY 0   20021
         BE    STDISPRI           YES BRANCH                      20021
         MVI   TCBTSDP,P255       SETT ATTACHED DISPAT PRI TO 255 20021
         CH    XRINDPRI,PLUS255   IS ADDED RESULT GR THAN 255     20021
         BH    TESTPRI            YES BRANCH                      20021
STDISPRI STC   XRINDPRI,TCBTSDP   ST ADDEDTS DISP PRI IN          20021
*                                 ATTACHED TCB                    20021
TESTPRI  CLC   TCBTSLP(ONE),TCBTSDP IS ATTACHED TCB LIM PRI GR    20021
*                                 THAN ITS TS DISPAT PRI          20021
         B     ATOK2C                                             20021
NOTSO3   EQU   *                                                  20021
.NTSO22  ANOP                                                     20021
         CR    XRINDPRI,XRDPRI         Q.WAS INPUT DISPATCH PRIORITY 0
         BE    STNEWD                   YES BRANCH
         MVI   TCBDSP,P255              SET ATTACHED TCB D PRIORITY 255
         CH    XRINDPRI,PLUS255        Q.IS RESULT GR THAN 255
         BH    ATDPPROC                 YES/ BRANCH
STNEWD   STC   XRINDPRI,TCBDSP          ST ADDED DISPATCH IN ATTACHED
ATDPPROC CLC   TCBLMP(1),TCBDSP        Q.ATTACHED LIMIT HIGHER THAN
         AIF   ('&TSO' NE '1').NTSO32                             20021
ATOK2C   EQU   *                                                  20021
.NTSO32  ANOP                                                     20021
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE4                     MTS0
         BNL   STRTMESL .          IT'S DISPATCHABLE-(YES-BR)     21B72
         AGO   .NSLICE9                                            MTS0
.NSLICE4 ANOP                                                      MTS0
         BNL   ATOK4 .             IT'S DISPATCHABLE (YES BRANCH) 21B72
.NSLICE9 ANOP                                                      MTS0
         AIF   ('&TSO' NE '1').NTSO23                             20021
         TM    TCBTSFLP,TCBTSTSP  IS THIS A TIME SHARING TSK      20021
         BZ    NOTSO4             NO- BRANCH                      20021
         MVC   TCBTSDP(ONE),TCBTSLP PROP TS LIM PRI TO ITS TS     20021
*                                 DISPATCHING PRIORITY            20021
         B     ATOK2D             CONTINUE ATTACH                 20021
NOTSO4   EQU   *                                                  20021
.NTSO23  ANOP                                                     20021
         MVC   TCBDSP(1),TCBLMP         PROPAGATE LIMIT TO DISPATCH
         AIF   ('&TSO' NE '1').NTSO33                             20021
         B     ATOK2D             BRANCH AND CONTINUE             20021
LOGONATT IC    XR9,TCBDSPP        GET ATTACHOR'S REAL LIMIT PRIOR 20021
         BCTR  XR9,ZERONUM        DECREMENT IT BY ONE             20021
         STC   XR9,TCBLMP         STORE IN LOGON'S REAL LIM PRIOR 20021
         STC   XR9,TCBTSLP        STORE IN LOGON'S TS LIM PRIOR   20021
         STC   XR9,TCBDSP         STORE IN LOGON'S REAL DISP PRI  20021
         STC   XR9,TCBTSDP        STORE IN LOGON'S TS DISP PRIOR  20021
ATOK2D   EQU   *                                                  20021
.NTSO33  ANOP                                                     20021
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE2                     MTS0
         USING XCCVT,XR7                                           MTS0
STRTMESL EQU   *                                                   MTS0
         L     XR7,CVTPTR          POINTER TO CVT                  MTS0
         L     XR7,CVTTSCE         POINTER TO 1ST TSCE             MTS0
         AIF   ('&STORAGE' EQ '2').SKKIP                           I250
         LTR   XR7,XR7           Q.ARE THERE ANY TSCES'            MTS0
         BC    2,CHK4TS            YES- CHECK IF ATTACHED TCB IS   MTS0
*                                  IN A                            MTS0
*                                       TIME-SLICE GROUP           MTS0
         AGO   .MVTCD9                                             I250
.SKKIP   ANOP                                                      I250
CHK4TS   EQU   *                                                   I250
         DROP  XR7                                                 I250
         USING TSCE,XR7                                            I250
         CLI   TSLWPR,0                                        @SA76088
         BNE   CHK4TS2                                         @SA76088
         CLC   TSHIPR,TSLWPR                                   @SA76088
         BE    QATTCHE                NO TIME SLICE            @SA76088
CHK4TS2  EQU   *                                               @SA76088
         CLC   TCBDSP(Q1),TSHIPR        ATTACHED TCB D PRIORITY    I250
*                                        HIGHER THAN TIME-SLICE    I250
*                                        GROUP LIMIT               I250
         BH    QATTCHE                  YES - NOT A TIME-SLICE     I250
*                                        TASK CONTINUE             I250
         CLC   TCBDSP,TSLWPR            ATTACHED TCB D PRIORITY    I250
*                                        LOWER THAN LOW LIMIT FOR  I250
*                                        TIME-SLICE GROUP?         I250
         BL    QATTCHE                  YES - NOT A TIME-SLICE     I250
*                                        TASK CONTINUE             I250
         OI    TCBFLGS+1,X01            TURN TCB T/S FLAG ON       I250
         CLC   TSFIRST(3),CONZERO       ANY TASKS IN T/S GROUP     I250
         BNE   TESTFAL                  YES - GO TEST FOR REP      I250
*                                        OF FIRST OR LAST          I250
         ST    XRATCB,TSPNEXT           PUT THE ATTACHED TCB ADDR  I250
         MVC   TSFIRST(3),TSNEXT         IN THE FIRST, LAST, AND   I250
         MVC   TSLAST(3),TSNEXT          NEXT FIELDS OF THE TSCE   I250
*                                        SINCE IT IS THE ONLY ONE  I250
*                                        IN THE TIME-SLICE GROUP   I250
         B     QATTCHE                  CONTINUE                   I250
         SPACE 1
*  THE DISPATCHING PRIORITY OF THE ATTACHED TASK IS COMPARED TO    I250
* THE DISPATCHING PRIORITIES OF THE FIRST AND LAST TCB'S IN THE    I250
* TSCE.  IF THE DISPATCHING PRIORITY OF THE ATTACHED TASK IS       I250
* GREATER THAN THE DP OF FIRST OR LESS THAN THE DP OF LAST IT      I250
* REPLACES FIRST OR LAST RESPECTIVELY.                             I250
         SPACE 1
TESTFAL  EQU   *                                                   I250
         L     XR1,TSHIPR               GET PTR TO FIRST TCB TSCE  I250
         CLC   TCBDSP(Q1),DISPDSP(XR1)  IS ATTACHEE'S DP GT FIRST  I250
         BH    REPFRST                  YES - PUT ATTACHEE FIRST   I250
         L     XR1,TSLWPR               GET PTR TO LAST TCB TSCE   I250
         CLC   TCBDSP(Q1),DISPDSP(XR1)  IS ATTACHEE'S DP LT LAST   I250
         BNH   REPLAST             YES - PUT ATTACHEE LAST         I250
         B     QATTCHE                  ATTACHEE FITS IN - CONT    I250
REPFRST  EQU   *                                                   I250
         IC    XR0,TSHIPR               SAVE HI DP LIMIT           I250
         ST    XRATCB,TSHIPR            REPLACE FIRST TSCE TCB     I250
*                                        WITH ATTACHEE             I250
         STC   XR0,TSHIPR               RESTORE HI DP LIMIT        I250
         B     QATTCHE                  CONTINUE                   I250
REPLAST  EQU   *                                                   I250
         IC    XR0,TSLWPR               SAVE LOW DP LIMIT          I250
         ST    XRATCB,TSLWPR            REPLACE LAST TSCE TCB      I250
*                                        WITH ATTACHEE             I250
         STC   XR0,TSLWPR               RESTORE LOW DP LIMIT       I250
         AGO   .MFTCD9                                             I250
.MVTCD9  ANOP                                                      I250
         B     ATOK4A                   NO-BRANCH TO SUBPOOL RTN   MTS0
CHK4TS   EQU   *                                                   MTS0
         DROP  XR7                                                 MTS0
         USING TSCE,XR7                                            MTS0
CHK4TSA  CLC   TCBDSP,TSDPRTY    Q.ATTACHED TCB IN TIME-SLICING    MTS0
*                                 GROUP                            MTS0
         BC    8,TRNBITON          YES-TURN ON TIME-SLICE BIT IN   MTS0
*                                  TCB                             MTS0
         TM    TSLENGTH,X'80'           NO- Q. ALL TSCES' CHECKED  MTS0
         BO    ATOK4A                   YES-NOT A TIME-SLICE TASK  MTS0
*                                       BRANCH TO SUBPOOL ROUTINE  MTS0
         LA    XR7,NEXTTSCE(XR7)        NO-GET ADDR OF NEXT TSCE   MTS0
*                                       AND                        MTS0
         B     CHK4TSA                 BRANCH BACK TO CHECK TCB D  MTS0
*                                      PRIORTY                     MTS0
TRNBITON OI    TCBFLGS+1,X'01'  TURN TCB T/S FLAG BIT ON           MTS0
         ST    XRATCB,TSPLAST      PUT ADDR OF ATTACHED TIME-SLICE MTS0
*                                  TCB                             MTS0
*                                   IN LAST SLOT IN TSCE           MTS0
         CLC   TSFIRST,CONZERO   Q.ANY TASKS PRESENT IN THIS TSCE  MTS0
*                                      GROUP                       MTS0
         BNE   ATOK4A                   YES-BRANCH TO SUBPOOL      MTS0
*                                       ROUTINE                    MTS0
         ST    XRATCB,TSPNEXT      NO-SET UP ATTACHED TCB AS FIRST MTS0
         MVC   TSFIRST,TSNEXT      AND NEXT TCB IN TSCE            MTS0
ATOK4A   EQU   *                                                   MTS0
.NSLICE2 ANOP                                                      MTS0
         AIF   ('&STORAGE' EQ '2').MFTCD9                          I250
         EJECT
* SPQE
***********************************************
* ATTRIBUTE *   LINK FIELD                    *
*   FLAGS   *     POINTS TO NEXT SPQE OR TCB  *
***********************************************
*  SUBPOOL  *   DQE ADDRESS OF OWNED SPQE     *
*    ID     *     OR ADDRESS OF SHARED SPQE   *
***********************************************
         SPACE 1
*  ATTRIBUTE FLAGS.
* BIT 0 ON MEANS SUBPOOL SHARED
* BIT 0 OFF MEANS SUBPOOL OWNED
* BIT 1 ON MEANS LAST SUBPOOL IN QUEUE, AND LINK FIELD POINTS TO TCB
* BIT 2 ON MEANS SUBPOOL IS OWNED BUT IS SHARED WITH ANOTHER TCB
         SPACE 1
* SUB POOL PROCESSING.
*  THIS SECTION PROCESS THE GIVING AND SHARING OF SUB POOL. THE GIVING
* OR SHARING SP ZERO IS IGNORED. SP ZERO IS AUTOMATICALLY SHARED
* WHEN A TCB OF THE SAME JOB STEP IS ATTACHED.
*  ATTACH REQUESTOR IN PROBLEM PROGRAM MODE CAN ONLY USE SP 0-127. ANY
* SP OTHER THAN THAT WILL CAUSE IT TO ABEND.
         SPACE 2
* REQUESTING SUBPOOL IDENTIFICATION IN REGISTER 7.
* REQUESTING SUBPOOL QUANTITY IN REGISTER 8.
* REQUESTING SUBPOOL ID LIST ADDRESS (UPDATED) IN REGISTER 9.
         SPACE 2
ATOK4    L     XRSPADR,ATGSFLAG        LOAD 'GIVE SP' PARAMETER
         LA    XRSPADR,0(XRSPADR)       ZERO REG BITS S-7
         LA    XRSPID,ONE         INITIALIZE SP ID TO ONE          I270
         SR    XRSPCTR,XRSPCTR          CLEAR SP COUNTER
         SPACE 2
*  TEST GIVE SP INPUT PARAMETER. IF ZERO, GO TO SHARE SP
* PROCESSING. IF IT ISN'T ZERO CONTINUE PROCESS OF GIVE SP.
         SPACE
         LTR   XRSPADR,XRSPADR         Q.GIVE SP PARAMETER ZERO
         BZ    SPSHARE                  YES BRANCH
         SPACE 2
*  THE GIVE SECTION TEST THE INPUT GIVE PARAMETER IF IT IS ZERO. IF IT
* IS ZERO, GO TO THE SHARE SP SECTION. NOT ZERO, IS THE PARAMETER
* A VALUE OR A LIST. IF A VALUE, GET THE SP ID AND PUT
* A ONE IN THE SP COUNTER. IF LIST, GET THE SP COUNT FROM THE FIRST
* BYTE OF THE LIST AND THE FOLLOWING BYTES WILL BE THE GIVE SP ID.
*  GIVE SP SECTION TESTS THE GIVE SP ID IF IT IS ZERO. IF THE SP ID IS
* ZERO, DECREMENT THE SP COUNTER WITHOUT PROCESSING THE ID. IF THE SP
* COUNTER IS NOT ZERO GET THE NEXT ID AND TRY PROCESSING.
*  THE GIVE SP, CHECKS THE ATTACH REQUESTOR'S TCB FIRST, IF THE SP ID
* IS FOUND IN ANY OF IT'S SUB POOL QUEUE ELEMENT (SPQE). IF THE SP ID
* IS FOUND, THE SPQE IS DEQUEUED FROM THE ATTACHOR'S TCB AND QUEUED ON
* THE ATTACHED TCB'S SP QUEUE. IF THE SP ID IS NOT FOUND ON THE
* ATTACHOR'S TCB'S SP QUEUE, THE ATTACHED TCB SP QUEUE IS SEARCHED. IF
* FOUND IN THE ATTACHED TCB, THE SP COUNT IS DECREMENTED WITHOUT
* FURTHER PROCESSING.
*  IF THE SP ID IS NOT FOUND IN THE ATTACHOR'S TCB OR THE ATTACHED TCB.
* A SPQE IS BUILT AND QUEUED TO THE ATTACHED TCB.
*  WHEN A SPQE IS QUEUED TO THE ATTACHED TCB IT IS FLAGGED 'OWNED'.
*  IF AN ATTACHOR TRIES TO GIVE A SPQE THAT IT OWNS, BUT IS SHARING IT
* WITH ANOTHER TCB, THE ATTACHOR IS ABEND.
         SPACE 1
         TM    ATGSFLAG,GIVEL          Q.GIVE PARAMETER IS AN ID LIST
         BO    GSPLIST                  YES BRANCH
         LA    XRSPCTR,ONE             $LD 1 IN SP COUNTER FOR VALUE
         LA    XRSPADR,ATGSFLD+2       $LD SP ID ADR FOR VALUE
         B     GSPVALUE
GSPLIST  IC    XRSPCTR,0(XRSPADR)      $LD SP CTR FROM 1ST BYTE OF LIST
GSPNEXT  LA    XRSPADR,1(XRSPADR)      $UPDATE SP ID LIST ADR
GSPVALUE IC    XRSPID,0(XRSPADR)       $LD SP ID
         LTR   XRSPID,XRSPID           Q.TRYING TO GIVE SP ZERO
         BZ    GSPEND                   YES BRANCH
         CH    XRSPID,SUPVSPID       Q.SUPERVISOR SUBPOOL ID (128-255)
         BC    10,ERROR2               *** YES - BRANCH
         LR    XRTCB,XROTCB           $LOAD ATTACHOR'S TCB ADDR.
         BAL   XRLINK,SPSEARCH       **Q.IS GIVE SP ID IN ATTACHOR QUE
         BZ    SEARCHED                 NO BRANCH
         TM    0(XRSPQE),OSFLAG        Q.GIVING OWN/SHARED SPQE
         BO    ERROR1                  *** YES - BRANCH
         TM    0(XRSPQE),SHARESP .     Q.SUBPOOL ALREADY SHARED  A53367
         BNO   GIVEIT .                NO.CAN GIVE IT            A53367
*                                      YES.MUST BUILD A NEW SPQE A53367
         LR    XRSAVE,XRSPQE .         SAVE ADDR OF EXISTING ONE A53367
         BAL   XRLINK,BLDSPQE .                                  A53367
         OI    0(XRSPQE),SHARESP .     FLAG IT SHARED            A53367
         MVC   5(3,XRSPQE),5(XRSAVE) . PUT IN OWNING SPQE ADDR   A53367
         B     GSPEND .                CONTINUE                  A53367
         SPACE 1
GIVEIT   EQU   * .                                               A53367
         BAL   XRLINK,DEQSP .          DEQ NON-SHARED SPQE       A53367
         LA    XRLINK,GSPEND           $LD RETURN ADR
         LR    XRTCB,XRATCB            $LD ATTACHED TCB ADR
         B     SPCHAIN                **QUEUE FOUND SPQE TO ATTACHED
SEARCHED BAL   XRLINK,SPSRCH         **Q.IS GIVE SP ID IN ATTACHED QUE
         BP    GSPEND                   YES BRANCH
         BAL   XRLINK,BLDSPQE         **BUILD SPQE FOR ATTACHED TCB
GSPEND   BCT   XRSPCTR,GSPNEXT         Q.LAST GIVE SP PROCESSED (NO BR)
         SPACE 2
*  SHARE SP SECTION CHECKS SHARE SP PARAMETER. IF ZERO, GO TO THE
* GIVE OR SHARE SP ZERO SECTION. IF NOT ZERO, TEST IF IT IS A
* VALUE OR A LIST OF SP ID'S. IF A VALUE, LOAD SP ID FROM THE INPUT
* PARAMETER AND PUT A ONE IN THE SP COUNTER. IF PARAMETER IS A LIST,
* GET THE FIRST BYTE FROM THE LIST AND PUT IT IN THE SP COUNTER. THE
* FOLLOWING BYTES WILL BE THE SP IDS.
*  SHARING OF SP ZERO IS IGNORED AND SP COUNTER IS DECREMENTED.
*  THE ATTACHED TCB IS CHECKED FIRST IF THE SP ID IS PRESENT. IF YES,
* DECREMENT SP COUNTER AND GO TO PROCESS THE NEXT SP ID. IF NOT IN
* ATTACHED TCB, CHECK ATTACHING TCB. IF PRESENT, TEST IF ATTACHOR
* OWNS IT. IF OWNED, FLAG IT OWN/SHARED. IF THE ATTACHOR HAS THE
* SP ID, BUILD A SPQE FOR THE ATTACHED TCB AND FLAG IT SHARED.
*  IF SP ID IS NOT FOUND IN ATTACHOR OR ATTACHED TCB, BUILD SPQE FOR
* ATTACHOR AND FLAG OWN AND OWN/SHARED. THEN BUILD SPQE FOR ATTACHED
* AND FLAG SHARED.
         SPACE 1
SPSHARE  EQU   * .                                               A53365
         LA    XRSPID,ONE .       RECURSION INDICATOR FOR SHARE0 A53365
         L     XRSPADR,ATSHFLAG        LOAD SP PARM            BD M5009
         LA    XRSPADR,0(XRSPADR)       ZERO BITS S-7
         LTR   XRSPADR,XRSPADR         Q.SHARE PARAMETER ZERO
         BZ    SHARE0                  YES - BRANCH
         TM    ATSHFLAG,SHAREL         Q.SHARE PARAMETER IS ID LIST
         BO    SSPLIST                  YES BRANCH
         LA    XRSPCTR,1               $LD 1 IN SP COUNTER FOR VALUE
         LA    XRSPADR,ATSHFLD+2       $LD SP ID ADR FOR VALUE
         B     SSPVALUE
SSPLIST  IC    XRSPCTR,0(XRSPADR)      $LD SP CTR FROM 1ST BYTE OF LIST
SSPNEXT  LA    XRSPADR,1(XRSPADR)      $UPDATE SP ID ADR
SSPVALUE IC    XRSPID,0(XRSPADR)       $LD SP ID
         CH    XRSPID,SUPVSPID       Q.SUPERVISOR SUBPOOL ID (128-255)
         BC    10,ERROR2               *** YES - BRANCH
         LTR   XRSPID,XRSPID           Q.IS SP ID ZERO
         BC    7,SSPSRCH               NOT ZERO - BRANCH
         BCT   XRSPCTR,SSPNEXT       Q.DECREM. SP CTR. (NOT 0 BRANCH)
         LA    XRSPID,ONE .       RECURSION INDICATOR FOR SHARE0 A53365
         B     SHARE0
SSPSRCH  BAL   XRLINK,SPSRCH         **SEARCH ATTACHED TCB FOR SP ID
         BP    SSPEND                   FOUND BRANCH
ZEROSRCH LR    XRTCB,XROTCB            LOAD ATTACHOR TCB ADDR
         BAL   XRLINK,SPSEARCH        **SEARCH ATTACHOR TCB FOR SP ID
         BZ    SPBLDOR                  NOT FOUND BRANCH
ZEROSHAR TM    0(XRSPQE),SHARESP     Q.SPQE OWNED
         BO    SPQUE1                   NO BRANCH
         B     SPQUE
SPBLDOR  LR    XRTCB,XROTCB            $LD ATTACHOR TCB ADR
         BAL   XRLINK,BLDSPQE1        **BUILD SPQE FOR ATTACHOR TCB
SPQUE    OI    0(XRSPQE),OSFLAG         FLAG JUST BUILT SPQE OWN/SHARED
SPQUE1   LR    XRSAVE,XRSPQE            SAVE ADR OF ATTACHOR SPQE
         BAL   XRLINK,BLDSPQE         **BUILD SPQE FOR ATTACHED TCB
         OI    0(XRSPQE),SHARESP        FLAG JUST BUILT SPQE SHARED
         ST    XRSAVE,4(XRSPQE)         ST ADR OF OWNER IN BUILT SPQE
         TM    0(XRSAVE),SHARESP       Q.SPQE SHAREOR THE OWNER
         BZ    STSPID                   YES BRANCH
         MVC   4(4,XRSPQE),4(XRSAVE)    PROPAGATE THE OWNERS ADDRESS
STSPID   STC   XRSPID,4(XRSPQE)         ST SP ID IN JUST BUILT SPQE
SSPEND   BCT   XRSPCTR,SSPNEXT         Q.DECREMENT SP CTR (NOT 0 BR)
         SPACE 2
* SHARE ZERO AND GIVE JOB PACK AREA PARAMETER PROCESSING           I270
         SPACE 1
* IF THE SZERO BIT IN BYTE 27 INDICATES TO SHARE SUBPOOL ZERO,     I270
* THE SHARING IS ACCOMPLISHED BY BOTH THE ATTACHOR AND THE         I270
* ATTACHEE HAVING AN SPQE FOR SUBPOOL ZERO ON THEIR QUEUES. THE    I270
* ATTACHEE'S SPQE IS MARKED 'SHARED'. IF THE ATTACHOR IS THE       I270
* OWNER, HIS SPQE IS MARKED 'OWNED/SHARED'. OTHERWISE IT TOO IS    I270
* MARKED 'SHARED'. IF THE GIVEJPQ BIT IN BYTE 27 INDICATES TO      I270
* GIVE THE JOB PACK AREA, THE JSTCB BIT IS EXAMINED. IF THIS       I270
* INDICATES THAT THE TCBJSTCB FIELD IS TO POINT TO THE ATTACHEE,   I270
* THEN THE ATTACHOR'S CDE QUEUE FOR PROGRAMS IN THE JOB PACK       I270
* AREA IS TO BE SEARCHED. IF ANY CDE'S CONTAIN A USE COUNT         I270
* GREATER THAN ZERO THE ATTACHOR IS ABENDED WITH A '32A'           I270
* COMPLETION CODE. IF NONE ARE FOUND HIS SPQE CHAIN IS SEARCHED.   I270
* IF AN SPQE FOR SUBPOOL 252 IS FOUND, IT IS TAKEN OFF THE         I270
* ATTACHOR'S QUEUE AND PLACED ON THE ATTACHEE'S. IF IT IS NOT      I270
* FOUND, NEITHER THE ATTACHOR NOR THE ATTACHEE WILL GET AN SPQE    I270
* FOR SUBPOOL 252. IF THE JSTCB BIT INDICATES TO PROPAGATE THE     I270
* JOB STEP FIELD, THEN NO ATTEMPT IS MADE TO GIVE SUBPOOL 252.     I270
* IF SUBPOOL 252 IS GIVEN, AN ATTEMPT IS MADE TO GIVE SUBPOOL      I270
* 251 ALSO AND THE POINTER TO THE JOB PACK QUEUE(TCBJPQ) IS        I270
* GIVEN TO THE SUBTASK FROM THE ATTACHOR'S FIELD.                  I270
         SPACE 1
SHARE0   LTR   XRSPID,XRSPID       Q.IS SP ID ZERO                 I270
         BC    8,TEST252         YES,BRANCH TO PREVENT RECURSION   I270
         TM    ATINDS,ATZERO      Q. IS SZERO PARAMETER=NO         I270
         BO    TEST252            YES,BYPASS SP ZERO PROCESSING    I270
         SR    XRSPID,XRSPID      SET SP ID TO ZERO                I270
         LA    XRSPCTR,1          SET SP COUNTER TO ONE            I270
         B     ZEROSRCH           SHARE SP0                        I270
TEST252  TM    ATINDS,ATJOBPQ     Q.IS GIVEJPQ PARAMETER=YES       I270
*                                 AND JSTCB PARAMETER=YES          I270
         BNO   SETFIELD           NO,BYPASS GIVING SP252           I270
         LA    CDEREG,TCBJSEP     GET ADR OF PTR TO FIRST CDE      I270
CDELOOP  L     CDEREG,CDELINK(CDEREG) GET ADR OF CDE               I270
         LA    CDEREG,0(CDEREG)   ZERO BITS 0-7                    I270
         LTR   CDEREG,CDEREG      IS THERE A CDE                   I270
         BC    8,GIVE252          NO,BRANCH                        I270
         CLI   CDUSE(CDEREG),0    IS USE COUNT 0                   I270
         BC    2,ERROR3           NO,ABEND BECAUSE JPQ CANNOT BE   I270
*                                 GIVEN                            I270
         B     CDELOOP                                             I270
GIVE252  LA    XRSPID,SP252       SET SP ID TO 252                 I270
         BAL   XR9,GIVESP         GIVE SUBPOOL 252                 I270
GIVE251  LA    XRSPID,SP251       SET SP ID TO 251                 I270
         BAL   XR9,GIVESP         GIVE SUBPOOL 251                 I270
GIVEJPQ  MVC   TCBJSE(4),TCBJSEP  GIVE PTR TO JPQ TO ATTACHEE      I270
         XC    TCBJSEP(4),TCBJSEP CLEAR AT'OR'S JPQ PTR            I270
         B     SETFIELD           SET MOM/DAUGHTER/SISTER FIELDS   I270
GIVESP   LA    XRSPCTR,1          SET SP COUNTER TO ONE            I270
         LR    XRTCB,XROTCB       GET ATTACHOR TCB ADDR            I270
         O     XRTCB,CON249       FLAG TCB TO DEQUEUE SPQE         I270
         BAL   XRLINK,SPSEARCH    IS SPQE(252) ON AT'OR'S QUEUE    I270
         BZ    SETFIELD           NO,BYPASS GIVING SP252           I270
         LR    XRTCB,XRATCB       GET ATTACHEE TCB                 I270
         BAL   XRLINK,SPCHAIN     QUEUE SPQE(252) TO AT'EE TCB     I270
         BR    XR9                                                 I270
         SPACE 2
* BUILD SPQE.
*  ENTER BLDSPQE IF SPQE IS TO BE BUILT FOR ATTACHED TCB. ENTER
* BLDSPQE1 IF SPQE IS TO BE BUIT FOR ATTACHOR.
         SPACE 1
BLDSPQE  LR    XRTCB,XRATCB            $LD ATTACHED TCB ADR
BLDSPQE1 GETMAIN R,LV=8,SP=255          GET CORE FOR SPQE
         XC    0(8,XRCOREAD),0(XRCOREAD) CLEAR SPQE
         STC   XRSPID,4(XRCOREAD)      $ST SP ID IN SPQE
         SPACE 2
* CHAIN SPQE.
*  QUEUE  A SPQE TO THE TOP OF THE TCB'S SPQE QUEUE. SET THE LAST SPQE
* FLAG IN THE SPQE IF IT IS THE ONLY ONE ON THE QUEUE.
         SPACE 1
SPCHAIN  L     XRTCBSPQ,TCBMSSS(XRTCB)  LD TCB'S SPQE FIELD CONTENT
         LA    XRTCBSPQ,0(XRTCBSPQ)     CLEAR BITS S-7
         ST    XRTCBSPQ,0(XRSPQE)       ST TCB'S SPQE PTB IN SPQE
         IC    XR0,TCBMSSS(XRTCB)      OBTAIN RO COUNT             RORI
         ST    XRSPQE,TCBMSSS(XRTCB)    ST SPQE ADR IN TCB'S SPQE FIELD
         STC   XR0,TCBMSSS(XRTCB)      STORE RO COUNT IN TCB       RORI
         LTR   XRTCBSPQ,XRTCBSPQ       Q.TCB'S SPQE PTR ZERO
         BCR   7,XRLINK                 NO BRANCH
         OI    0(XRSPQE),LASTSPQE       SET SPQE'S LAST FLAG
         BR    XRLINK
         SPACE 2
* SEARCH FOR SPQE.
*  ENTER  SPSRCH IF ATTACHED TCB IS TO BE SEARCHED FOR A SP ID. ENTER
* SPSEARCH IF ATTACHOR TCB IS TO BE SEARCHED. ENTER SPSEARCH IF A SPQE
* IS TO BE DEQUEUED IF FOUND, WITH THE TCB ADDRESS COMPLIMENTED.
         SPACE 1
SPSRCH   LR    XRTCB,XRATCB            $LD ATTACHED TCB ADR
FINDSPQE L     XRTCBSPQ,TCBMSSS(XRTCB)  LD TCB'S SPQE FIELD CONTENT
SPSEARCH EQU   FINDSPQE
         LA    XRSPQPTR,TCBMSSS(XRTCB) LOAD ADR. OF SPQE ADDR.
         LA    XRSPQE,0(XRTCBSPQ)       LD ADR OF SPQE
         LTR   XRSPQE,XRSPQE           Q.SPQE PTR ZERO
         BCR   8,XRLINK                *YES BRANCH
LOOP4    EX    XRSPID,TESTSPID         Q.IS THIS THE SPQE WE WANT
         BE    DEQSW                    YES BRANCH
         LR    XRSPQPTR,XRSPQE          SAVE LAST SPQE ADR
         TM    0(XRSPQE),LASTSPQE      Q.WAS THAT THE LAST SPQE IN TCB
         BO    NOTFOUND                 YES BRANCH
         L     XRSPQE,0(XRSPQE)         GET NEXT SPQE ADR
         B     LOOP4
DEQSW    LTR   XRTCB,XRTCB            Q. NEGATIVE FLAG SET
         BP    NOTDEQ                  NO TAKE BRANCH
DEQSP    EQU   * .                                               A53367
         MVC   1(3,XRSPQPTR),1(XRSPQE)  PROPAGATE SPQE LINK FIELD
         TM    0(XRSPQE),LASTSPQE IS LAST SPQE BEING REMOVED       I270
         BC    8,NOTDEQ           NO,BRANCH                        I270
         LA    XR0,TCBMSSS(XRTCB)      GET ADDR. OF TCBMSS FLD.   M4671
         CR    XR0,XRSPQPTR            Q. SPQPTR POINT TO TCBMSS  M4671
         BE    NOTDEQ                  YES, DON'T SET 'LAST' FLAG M4671
         OI    0(XRSPQPTR),LASTSPQE SET NEW LAST SPQE FLAG         I270
NOTDEQ   LA    XRSPQE,0(XRSPQE)         ZERO BITS S-7
         LTR   XRSPQE,XRSPQE           Q.SPQE ADR PRESENT
         BR    XRLINK                  *RETURN
NOTFOUND SR    XRSPQE,XRSPQE            CLEAR SPQE PTR
         BR    XRLINK                  *RETURN
TESTSPID CLI   4(XRSPQE),X'00'
         SPACE 2
.MFTCD9  ANOP
         SPACE
         SPACE 2
*  SET MOTHER/DAUGHTER/SISTER FIELD FIELD IN ATTACHED TCB.
         SPACE 1
         AIF   ('&STORAGE' NE '2').MVTCD10                         I250
         AIF   ('&TIMESL' EQ 'TIMESL').HTSCD                       I250
ATOK4    EQU   *                                                   I250
.HTSCD   ANOP                                                      I250
QATTCHE  EQU   *                                                   I250
         MVC   TCBNTC(4),TCBLTCP        TCB'S LAST TCB ADDR- FIELD I250
*                                        TO ATTACHED SISTER FIELD  I250
         AGO   .MFTCD10                                            I250
.MVTCD10 ANOP                                                      I250
SETFIELD LA    XRLINK,EXIT             SET LINK REG TO NORMAL EXIT
ABTERM   MVC   TCBNTC(4),TCBLTCP       TCB'S LAST TCB ADDR -
*                                       FIELD TO ATTACHED SISTER FIELD
.MFTCD10 ANOP                                                      I250
         ST    XRATCB,TCBLTCP           ST ATTACHED TCB ADR IN ATT'EE
*                                       DAUGHTER FIELD.
         ST    XROTCB,TCBOTC            TCB'S ORIGN TCB ADR.
*                                       MOTHER FIELD.
         SPACE 2
         AIF   ('&TSO' NE '1').NTSO4                              20021
*  TEST WHETHER THE ATTACHOR IS A TIME SHARING TASK. IF NOT THEN  20021
*  BRANCH AROUND THIS CODE. IF IT IS A TS TASK THEN WE HAVE TO    20021
*  TEST WHETHER LOGON IS BEING ATTACHED. IF YES INITIALIZE THE    20021
*  FIRST AND LAST POINTERS IN THE TJBX WITH THE ADDR OF LOGON'S   20021
*  TCB. WE ALSO INITIALIZE THE NUMBER OF ACTIVE TCB'S IN THE      20021
*  TJBX TO ONE. FOR ALL OTHER TIME SHARING TASKS WE HAVE TO       20021
*  PUT THE TASK ON THE READY QUEUE WITHIN ITS SUBGROUP. THERE     20021
*  IS ONE SUBGROUP PER USER AND A SUBGROUP IS IDENTIFIED BY THE   20021
*  USER ID.THE USER ID IS OBTAINED FROM THE JSCB WHICH IS         20021
*  POINTED TO BY THE TCB. TIME SHARING TASKS ARE PUT WITHIN THE   20021
*  SUBGROUP BY ORDER OF TS DISPATCHING PRIORITY. THERE IS A       20021
*  LAST POINTER FOR EACH SUBGROUP IN THE TJBX WHICH HAS TO        20021
*  BE UPDATED IF IT IS AFFECTED BY ATTACHING A TS TCB.            20021
         SPACE 2                                                  20021
         TM    TCBTSFLP,TCBTSTSP  IS ATTACHOR A TS TASK           20021
         BZ    NOTSO              N0 - BRANCH AND CONTINUE        20021
         L     XR7,TCBJSCBP GET JOBSTEP CB PTR OF ATTACHOR        20021
         USING IEZJSCB,XR7                                        20021
         LH    XR7,JSCBTJID  GET TJID                             20021
         L     XR9,CVTPTR         GET ADDR CVT                    20021
         USING XCCVT,XR9                                          20021
         L     XR9,CVTTSCVT       GET ADDR TSCVT                  20021
         USING TSCVT,XR9                                          20021
         MH    XR7,TSCVTSZU       MULT ID BY SIZE                 20021
         A     XR7,TSCVTTJB       ADD BASE TO GET ADDR TJB        20021
         USING TJB,XR7                                            20021
         L     XR7,TJBEXTNT       GET ADDR TJBX                   20021
         USING TJBX,XR7                                           20021
         TM    ATECBADR,LOGONFLG  IS LOGON BEING ATTACHED         20021
         BNO   NOTLGN .           NO.BRANCH                      A53366
         L     XR6,RBLINK(XR5) .  GET RB OF ATTACHOR             A53366
         TM    RBOPSW+1(XR6),X'F0' .   Q.ATTACHOR KEY = 0        A53366
         BZ    LOGONTSK .         YES.ALLOW ATTACH AS 'LOGON'    A53366
*                                 NO.TREAT AS A USER SUBTASK     A53366
NOTLGN   EQU   * .                                               A53366
         L     XR1,TJBXFST       GET FIRST TCB ON QUEUE           20021
         DROP  XR9                                                20021
         CLC   TCBTSDP(ONE),TSDPRI(XR1) Q.ATTACHED PRI GREATER    M0118
*                                            THAN LOGON           M0118
         BNH   TCBLOOP                  NO.BRANCH                 M0118
         MVC   TCBTSDP(ONE),TSDPRI(XR1) MAKE DISP EQ LIMIT-TS     M0118
TCBLOOP  L     XR9,LINKTCB(XR1)  GET NEXT TCB                     20021
         C     XR1,TJBXLAST      IS TCB THE LAST TCB              20021
         BE    LASTTCB            YES- BRANCH                     20021
         CLC   TCBTSDP(ONE),TSDPRI(XR9) IS TS DISPAT PRIOR OF     20021
*                                 ATTACHED GR THAN TS DISPAT PRI  20021
*                                 OF THIS TCB ON QUEUE            20021
         BH    TCBPTR             YES- UPDATE TCB PTRS            20021
         LR    XR1,XR9            NO- GET NEXT TCB ON QUEUE       20021
         B     TCBLOOP            CONTINUE CHKING TS DISPAT PRIO  20021
LASTTCB  ST    XRATCB,TJBXLAST    UPDATE PTR TO LAST TCB FOR      20021
*                                 THIS SUBGROUP IN TJBX           20021
TCBPTR   ST    XR9,TCBTCB         PUT ADDR IN ATTACHED PTR FIELD  20021
         ST    XRATCB,LINKTCB(XR1)  PUT ADDR ATTTACHEDTCB IN      20021
*                                 PTR FIELD OF THIS TCB           20021
         SPACE 2                                                  20021
* THIS SECTION INSURES THAT THE QUIESCE PARAMETER LIST(QPL) FOR A 20021
* USER IS BIG ENOUGH FOR ALL THE USER'S ACTIVE TCB'S.IF THE NO.   20021
* OF QPL ENTRIES IS GREATER THAN OR EQUAL TO THE NO. OF TCB'S     20021
* FOR A USER THEN WE BRANCH AND CONTINUE ATTACH.IF THE NO. OF     20021
* QPL ENTRIES IS LESS THEN WE HAVE TO FREEMAIN THE AR FOR TH QPL  20021
* AND GETMAIN AN AREA FOR TWICE AS MANY QPL ENTRIES.WE MUST UPDATE20021
* THE NECESSARY FIELDS IN THE TJBX WHICH ARE AFFECTED BY THIS     20021
* CHANGE.                                                         20021
         SPACE 2                                                  20021
NUMBTCB  LH    XR9,TJBXNTCB       GET NO ACTIVE TCB'S FOR USER    20021
         LA    XR9,ONE(XR9)       UPDATE NO BY ONE                20021
         STH   XR9,TJBXNTCB       PUT RESULT IN TJBX              20021
         LH    XR9,TJBXNQPE       GET NO OF QPL ENTRIES           20021
         CH    XR9,TJBXNTCB .     Q.NO. OF QPL ENTRIES            M4396
*                                 GREATER THAN NO. OF TCB'S.      M4396
         BH    NEWTEST1 .         YES.BRANCH                      M4396
*                                 NO.GET A NEW QPL                M4396
         SPACE 1
*    THE NUMBER OF QPL ENTRIES MUST BE EQUAL TO THE NUMBER        M4396
*        OF TCB'S, INCLUDING THE NEWLY CREATED TASK, SINCE A      M4396
*        10A ABEND MAY RESULT WHEN TRYING TO GET THE NEW QPL.     M4396
*        THIS WILL ENSURE THAT THE OLD LIST WILL BE LARGE         M4396
*        ENOUGH IN CASE QUIESCE/RESTORE OPERATE DURING ABEND      M4396
*        PROCESSING; THAT IS, DURING SWAP.                        M4396
         SPACE 1
         LR    XR2,XR15           SAVE REG15 ACROSS GETMAIN       20021
         LH    XR0,TJBXLQPL       GET LENGTH QPL                  20021
         AR    XR0,XR0            DOUBLE LENGTH                   20021
         LR    XR6,XR0 .          SAVE NEW SIZE ACROSS GETMAIN    M4396
         O     XR0,CON255         SET SUBPOOL ID=255              20021
         GETMAIN R,LV=(0)         GETMAIN AREA FOR QPL            20021
         LH    XR0,TJBXLQPL .     GET SIZE OF OLD QPL             M4396
         L     XR8,TJBXQPL .      GET ADDR OF OLD QPL             M4396
         ST    XR1,TJBXQPL        PUT ADDR QPL IN TJBX            20021
         STH   XR6,TJBXLQPL .     UPDATE QPL SIZE                 M4396
         AR    XR9,XR9            DOUBLE NO QPL ENTRIES           20021
         STH   XR9,TJBXNQPE       PUT RESULT IN TJBX              20021
         LA    XR1,0(XR8) .       GET ADDR OF OLD QPL IN REG 1    M4396
         O     XR0,CON255 .       SET SUBPOOL ID = 255            M4396
         SPACE 1
*   FREEMAIN THE OLD QPL                                          M4396
         SPACE 1
         FREEMAIN R,LV=(0),A=(1)                                  M4396
         L     XR1,TJBXQPL          RESTORE REG 1 TO NEW QPL ADDR M5761
         XC    ZERONUM(4,XR1),ZERONUM(XR1)  ZERO 1ST WORD OF QPL  M5761
         LR    XR15,XR2           RESTORE REG15 AFTER GETMAIN     20021
         B     NEWTEST1
LOGONTSK ST    XRATCB,TJBXFST     STORE ADR LOGON TCB IN TJBXFST  20021
         ST    XRATCB,TJBXLAST    STORE ADR LOGON TCB IN TJBXLST  20021
         LA    XR9,ONE            GET NUMBER TCB'S=1              20021
         STH   XR9,TJBXNTCB       INITIALIZE NUMBER OF TS TCB'S   20021
*                                 ATTACHED IN TJBX                20021
         DROP  XR7                                                20021
NOTSO    EQU   *                                                  20021
.NTSO4   ANOP                                                     20021
* PUT ATTACHED TCB IN TCB READY QUEUE AND CHANGE 'NEW' TO ATTACHED TCB
* ADDRESS IF IT IS OF HSGER DISPATCH PRIORITY AND READY.
         SPACE 1
         L     XRTCB,HEADPTR(XRCVT)     LD HEAD TCB PTR'S PTR ADR
LOOP5    LTR   XRTCB,XRTCB             Q.HEAD OR QUEUED TCB THE LAST
         BZ    TCBHI                    YES BRANCH
         CLC   TCBDSP(1),DPRI(XRTCB)   Q.ATTACHED TCB'S DISPATCH
*                                       PRIORITY HIGHER THAN QUEUED TCB
         BH    TCBHI                    YES BRANCH
         BNE   *+12                    CONTINUE SEARCH          *UNCC
         CLI   TCBDSP,X'C0'            IF DPRTY LESS THAN X'C0' *UNCC
         BL    TCBHI                   PLACE TCB AT HEAD        *UNCC
         AIF   ('&TSO' NE '1').N01TSO                            A47090
         BE    TCBEQPRI .         CHECK FOR TSO-TASK-GROUP       A47090
LOOP5A   EQU   * .                                               A47090
.N01TSO  ANOP .                                                  A47090
         LA    XRTCBPTR,LINKTCB(XRTCB)  LD ADR OF QUEUED TCB LINK FIELD
         L     XRTCB,0(XRTCBPTR)        LD CONTENT OF LINK FIELD
         B     LOOP5
         AIF   ('&TSO' NE '1').N02TSO                            A47090
         SPACE 1
TCBEQPRI EQU   * .                                               A47090
         SPACE 1
*    ALL SWAPPABLE TSO TASKS IN THE SYSTEM WILL HAVE THE SAME    A47090
*        REAL DISPATCHING PRIORITY.  IN ADDITION, THEY MUST ALL  A47090
*        BE CONTIGUOUS ON THE TCB DISPATCHING QUEUE BY REGION    A47090
*        GROUP.                                                  A47090
*    THIS CODE ENSURES THAT LOGON WILL BE PLACED BEHIND          A47090
*        THE LAST TSO USER TASK IN THE PREVIOUS TSO REGION.      A47090
*        CODE NEAR THE LABEL "TCBLOOP" ENSURES THAT EACH USER    A47090
*        WITHIN A GIVEN REGION IS CONTIGUOUS.                    A47090
         SPACE 1
         TM    TCBTSFLG,TCBTSTSK .Q.PRI EQUAL.TEST FOR TSO       A47090
*                                    TASK BEING ATTACHED         A47090
         BNO   LOOP5A .           NO.SEARCH FOR END OF EQUAL     A47090
*                                    PRIORITY GROUP              A47090
         TM    TCBTSFLG-TCBFLDS(XRTCB),TCBTSTSK .                A47090
*                                 Q.IS QUEUED TCB A TSO TASK     A47090
         BNO   LOOP5A .           NO.CONTINUE TO SEARCH          A47090
         SPACE 1
TSOSRCH  EQU   * .                YES.FIND END OF TSO-TASK-GROUP A47090
         LA    XRTCBPTR,LINKTCB(XRTCB) .                         A47090
         L     XRTCB,0(XRTCBPTR) .GET NEXT TASK                  A47090
         LTR   XRTCB,XRTCB .      Q.END OF DISP. QUEUE           A47090
         BZ    TCBHI .            YES.CHAIN UP THE NEW TCB       A47090
         TM    TCBTSFLG-TCBFLDS(XRTCB),TCBTSTSK . Q.STILL        A47090
*                                    WITHIN TSO TASKS            A47090
         BO    TSOSRCH .          YES.FIND END OF TSO-TASK-GROUP A47090
*                                 NO.CHAIN THE NEW TCB           A47090
         SPACE 1
.N02TSO  ANOP                                                    A47090
TCBHI    ST    XRTCB,TCBTCB             ST ADR OF LOW PRI TCB IN ATT'ED
         ST    XRATCB,0(XRTCBPTR)       ST ATT'ED TCB ADR IN HI'ER TCB
         AIF   ('&STORAGE' NE '2').MVTCD11                         I250
         SPACE 1                                                   I250
         CLC   TCBDSP(1),TCBDSPP        ATTACHEE'S DISPATCHING     I250
*                                        PRIORITY GT ATTACHOR'S    I250
         BNH   INITATTE                 NO - NO TASK SW REQ'D      I250
*                                        CONT WITH INITIALIZA-     I250
*                                        TION OF ATTACHEE          I250
         L     XR1,ZERO(XRCVT)          GET POINTER TO NEW TCB     I250
         ST    XRATCB,ZERO(XR1)         GENERATE TASK SWITCH BY    I250
*                                        REPLACING NEW TCB         I250
         SPACE 1                                                   I250
INITATTE EQU   *                                                   I250
         MVC   TCBXR0(40,XRATCB),SVRBXR0(XRORB) MOVE REGS 0-9      I250
         MVC   TCBXR10(12,XRATCB),SVRBXR10(XRORB) MOVE REGS 10-12  I250
         MVC   TCBXR13+1(3,XRATCB),TCBFSA  SET UP SAVE AREA        I250
         LA    XR0,EXITCVTA(XRCVT)      GET ADDR OF SVC 3 EXIT     I250
         ST    XR0,TCBXR14(XRATCB)       AND ST AS RETURN ADDR     I250
         L     XRPRB,RBLINK(XRORB)       GET REQUESTOR'S RB        I250
         L     XRORB,TCBRBP             ADDR THE PRB               I250
         XC    ZERO(32,XRORB),ZERO(XRORB) ZERO OUT NEW PRB         I250
         LA    XR15,Q32(XRORB)         ADDR NEW PARA AREA          I250
         L     XR1,ZERO(XRPARA) .  ADDR OF NAME OR DE            A39714
         MVC   8(8,XR15),ZERO(XR1) MOVE NAME INTO LIST        BD A48323
         TM    ATDEFLAG,X'80' .    Q. IS DE GIVEN             BD A48323
         BZ    NODE .              NO SKIP MOVE               BD A48323
         MVC   16(36,XR15),8(XR1) .MOVE DE INTO LIST          BD A48323
NODE     DS    0H .                                           BD A48323
         MVC   4(4,XR15),4(XRPARA) MOVE DCB                      A39714
         LA    XR1,8(XR15) .       ADDR OF NAME OR DE FOR FINCH  A39714
         ST    XR1,0(XR15) .       STORE INTO LIST               A39714
         MVC   0(1,XR15),ATDEFLAG .SET DE INDICATOR IN LIST      A39714
         ST    XR15,TCBXR15(XRATCB)    INDICATE LOC OF SPL         I250
         LA    XR0,LINKICVT(XRCVT)      GET ADDR OF SVC 6 (LINK)   I250
*                                        IN CVT                    I250
         ST    XR0,RBOPSW+4(XRORB)      POINT RESUME PSW IN PRB    I250
*                                        TO LINK INSTRUCTION       I250
         MVC   RBOPSW(2,XRORB),RBOPSW(XRPRB)  PROPAGATE AMWP  BD A44930
*                                         BITS & PK & SYS MASKBD A44930
         NI    RBOPSW+1(XRORB),X'FD'   INSURE WAIT OFF             I250
         MVI   ZERO(XRORB),XF9          GENERATE FALSE NAME FOR    I250
         MVC   ONE(7,XRORB),ZERO(XRORB)  NEW PRB                   I250
         OI    RBOPSW+1(XRORB),X04      TURN ON MACHINE CK BIT     I250
         ST    XRATCB,RBLINK(XRORB)     POINT RB TO TCB            I250
         LR    XR1,XRATCB          SUPPLY SUBTASK TCB ADDR         I250
         MVI   RBSTAB+1(XRORB),XC2      INDICATE LINK FIELD PNTS   I250
*                                        TO TCB, PROG ACTIVE, RB   I250
*                                        TO BE FREED               I250
         L     XR15,TCBPIBP            GET ADDR OF PIB             I250
         IC    XR2,PIBJPQ(XR15) LD NO ACTIVE SUB-TASKS             I250
         LA    XR2,Q1(XR2)             INCREMENT BY ONE            I250
         STC   XR2,PIBJPQ(XR15) ST UPDATED NUMBER                  I250
         MVI   RBSIZE(XRORB),11 .  ELEVEN DBWORDS                A39714
         SR    XR15,XR15 .         SET ZERO RETURN CODE           20472
         SVC   SVCEXIT                  LEAVE                      I250
         AGO   .MFTCD11                                            I250
.MVTCD11 ANOP                                                      I250
         SPACE 1                                                   65MP
*****************************************************************  65MP
*   EXECUTE THE TASK SWITCH ROUTINE  TO DETERMINE WHETHER       *  65MP
*   THE NEW TASK SHOULD DISPLACE ONE OF THE CURRENT TASKS       *  65MP
*****************************************************************  65MP
         SPACE 1                                                   65MP
         AIF   ('&TSO' NE '1').NTSO34                             20021
NEWTEST1 EQU   *                                                  20021
.NTSO34  ANOP                                                     20021
         LR    XR6,XRBASE               SAVE THE BASE REGISTER     65MP
         LR    XR2,XRPARA               SAVE SPVSR PARM LIST ADDR  65MP
         L     XRBASE,AIEDS02           ADDR TASK SW ROUTINE       65MP
         BALR  XRRETURN,XRBASE          EXECUTE TASK SWITCH - INP  65MP
*                                       REGISTER 10 ALREADY SET    65MP
         LR    XRBASE,XR6               RESTORE THE SAVED REGS     65MP
         LR    XRPARA,XR2                                          65MP
         SPACE 2
         LR    XR1,XRORB                                          20021
NXTRB    TM    RBSTAB2(XR1),RBTCBNXT  IS TCB NEXT                 20021
         BO    SETATT             YES RESET PREVENT ATTENTIONS    20021
         L     XR1,RBLINK(XR1)      GET NEXT RB                   20021
         TM    RBSTAB(XR1),RBFTSVRB   IS NEXT RB A SVRB           20021
         BO    NOSETATT           YES SKIP RESET PREVENT ATTENT   20021
         BM    NXTRB .            AN (S)IRB, GET NEXT RB          M1678
         TM    RBSTAB2(XR1),RBATTN .   Q.IS RB ATTN BIT ON        M1678
         BO    NOSETATT .         YES SKIP RESET PREVENT ATTENT   M1678
         B     NXTRB              NO GET NEXT RB                  20021
SETATT   NI    TCBTSFLP,TCBATOFF .TURN OFF BIT IN THE MOTHER      20021
NOSETATT EQU   *                                                  20021
         OI    TCBTSFLG,TCBATT .  TURN ON ATTN BIT IN DAUGHTER    M4393
         SPACE 1
*  SET UP REGISTERS 0 - 15 OF ATTACHOR TCB
         SPACE 1
         MVC   TCBXR0(64,XROTCB),SVRBXR0(XRORB)  SVRB REGS 0 - 15
*                                       TO ATTACHOR TCB
         ST    XRATCB,TCBXR1(XROTCB)    ST ADR OF ATTACHED TCB IN AT'OR
         SPACE 2
*  PROCESS ATTACH SVRB EXTENDED SAVE AREA.
         SPACE 1
         L     XRDE,ATDEFLAG            LD ADR OF DE OR NAME
         LA    XRSVRB14,SVRBXR14(XRORB) LD ADR OF SVRB REG 14 SAVE AREA
         TM    ATDEFLAG,X'80'          Q.IS DE PARAMETER AN ADR
         BZ    NOTDEADR                 NO BRANCH
         MVC   0(56,XRSVRB14),0(XRDE)   PROPAGATE DE TO SVRB REG 14SAVE
DEZBYTE  EQU   12                                              @SA78067
R1       EQU   1                                               @SA75551
         SR    R1,R1                                           @SA75551
         IC    R1,DEZBYTE(XRSVRB14)                            @SA75551
         CLI   DEZBYTE(XRSVRB14),2                             @SA75551
         BL    DE                                              @SA75551
         LA    R1,1(R1)                                        @SA75551
         STC   R1,DEZBYTE(XRSVRB14)                            @SA75551
DE       EQU   *                                               @SA78067
         LCR   XRSVRB14,XRSVRB14        LD COMPLIMENT OF SVRB REG 14
         B     SETTCB
NOTDEADR MVC   0(8,XRSVRB14),0(XRDE)    MOVE NAME TO SVRB REG 14-15SAVE
*  DEQUE ATTACH SVRB FROM ATTACHOR TCB AND QUEUE IT TO ATTACHED TCB.
* CHANGE SVRB TO PRB.
         SPACE 1
SETTCB   MVC   TCBRBPP+1(3),RBLINK+1(XRORB) PROPAGATE SVRB LINK-   I270
         AIF   ('&STORAGE' NE '4').NTSO35                        A53341
         L     XR1,TCBRBP .       SAVE DUMMY RB ADDR FOR FMAIN    M4385
.NTSO35  ANOP                                                     M4385
         ST    XRORB,TCBRBP       ST SVRB ADR IN ATTACHED TCB      I270
         ST    XRATCB,RBLINK(XRORB) ST ATTACHED TCB ADR IN SVRB    I270
         OI    RBSTAB+1(XRORB),X'80' SET LAST RB FLAG IN SVRB      I270
         MVC   TCBXR0(4,XRATCB),ATDCBADR PUT DCB ADR IN AT'EE      I270
*                                        TCB REG ZERO SLOT         I270
         SPACE 1
         STM   XRRETURN,RGETMAIN,TCBXR1(XRATCB) SAVE 14 + 15  BD A57900
         LA    XR1,0(XR1)          SET UP REG 1 FOR FREEMAIN  BD A57900
         L     XR0,PRBSIZE         SUBPOOL AND SIZE           BD A57900
         L     RGETMAIN,RMBRNCHA   FREEMAIN BRANCH ENTRY      BD A57900
         BALR  XRRETURN,RGETMAIN   GO TO FREEMAIN             BD A57900
         LM    XRRETURN,RGETMAIN,TCBXR1(XRATCB) RESTORE 14 + 15  A57900
* PROCESS SAVE AREA PARAMETER                                      I270
         SPACE 2
SAVETEST TM    ATINDS,ATSAVE      Q. IS SVAREA PARAMETER=YES       I270
         L     XRRETURN,DPATCHER  LOAD DISPATCHER ADDR             I270
         BC    7,SETLINK          NO,SET UP FOR LINK               I270
         STM   XR1,XR15,TCBXR1(XRATCB) YES,SAVE REGS FOR RETURN    I270
*                                  TO IEAQAT                       I270
         MVC   RBOPSW(8,XRORB),ATTACH LOAD ADDR OF GETSAVE INTO    I270
*                                 SVRB PSW                         I270
         BR    XRLINK             GO TO EXIT FOR NORMAL EXIT;      I270
*                                 GO TO ABENDXT2 FOR ABEND         I270
         SPACE 2
GETSAVE  EQU   * .           RE-ENTRY TO ATTACH UNDER NEW TCB    A35419
         CNOP  0,4 .                   ENSURE A WORD BOUNDARY    A35419
         BAL   GETREG,SKIPCON .        BR AROUND GMAIN CONSTANT  A35419
         DC    AL1(250) .              SUBPOOL 250 = SUBPOOL 0   A35419
         DC    AL3(72) .               SAVE AREA LENGTH          A35419
SKIPCON  L     SIZEREG,0(GETREG) .     SETUP REG 0 FOR GETMAIN   A35419
         L     RGETMAIN,RMBRNCHA .     GET ADDR OF REGMAIN       A35419
         LR    XROTCB,XRATCB .         CURRENT TCB = ATTACHEE    A35419
         BALR  XRRETURN,RGETMAIN .     GO TO REGMAIN             A35419
         LR    XRWORKAD,XRCOREAD  SAVE GOTTEN CORE ADDRESS         I270
         ST    XRCOREAD,TCBFSA    STORE ADDRESS IN ATTACHEE TCB    I270
         XC    0(72,XRCOREAD),0(XRCOREAD) CLEAR GOTTEN CORE        I270
         MVC   SVRBXR13(4,XRORB),TCBFSA ST NEW SAVE AREA IN RB     I270
         L     XR0,TCBXR0(XRATCB) LOAD REG0 WITH DCB ADDR         M0763
         LR    XR1,XRSVRB14 .     LOAD REG1 WITH EP               M0763
*                                      FOR BRANCH ENTRY TO LINK   M0763
         L     XRRETURN,LINK+4    LOAD LINK ADDR                   I270
SETLINK  ST    XRSVRB14,TCBXR1(XRATCB) ST EP IN AT'EE TCB REG 1   M0763
         LR    XROTCB,XRATCB      TRANS. ATTACHED TCB TO           I270
*                                      CURRENT TCB FOR LINK
         STM   XRCVT,XRORB,60(XRATCB)  ST CVT,TCB AND SVRB ADDRESS'S
*                                      INTO ATTACHED TCB FOR LINK
*   THE TWO PRECEEDING INSTRUCTIONS PERMIT LINK TO RE-ESTABLISH
* ENVIRONMENTAL REGISTERS.
         SPACE 2
         MVC   RBOPSW(8,XRORB),LINK    LOAD ADDR OF LINK IN        I270
*                                      SVRB PSW                    I270
         BR    XRLINK             GO TO EXIT FOR NORMAL EXIT       I270
*                                 GO TO ABENDXT2 FOR ABEND         I270
EXIT     BR    XRRETURN           GO TO DISPATCHER IF NO SAVE      I270
*                                 AREA IS TO BE PROVIDED OR IF     I270
*                                 ONE IS TO BE BUT HAS NOT BEEN;   I270
*                                 GO TO LINK IF SAVE AREA HAS      I270
*                                 BEEN PROVIDED.                   I270
         EJECT
* ERROR EXITS.
.MFTCD11 ANOP                                                      I250
         SPACE 1
         AIF   ('&STORAGE' EQ '2').BMVTEC                          I250
ERROR1   LA    XR15,X'012A'            TRYING TO GIVE A SHARED SP
         B     ABENDXT
ERROR2   LA    XR15,X'022A'            TRYING TO GIVE/SHARE A SUPV.SP
         B     ABENDXT
ERROR3   LA    XR15,X'032A'       TRYING TO GIVE JPQ WITH          I270
*                                 PROGRAMS WITH USE COUNT NOT 0    I270
         B     ABENDXT                                             I270
ERROR4   LA    XR15,X'042A'            INVALID ECB ADDR
         AGO   .MVTABD                                             I250
.BMVTEC  ANOP                                                      I250
ERROR4   EQU   *                                                   I250
         LA    XR9,Q12(XR9)        GET NEXT BB IF PRESENT          I250
         BCT   XR8,ECBCK           CKECK NEXT BB                   I250
         LR    XR1,XRATCB          READY TCB ADDR FOR FM           I250
         AIF   ('&FPREGS'  NE 'FPREGS').FFPRS                      I250
         LA    XR0,Q32                  LENGTH OF FPT REG SVAREA   I250
         SR    XR1,XR0                 GET PTR TO BEG OF DYN CORE  I250
.FFPRS   ANOP                                                      I250
         L     XR0,TCBLNGTH             LENGHT  TO BE FREED        I250
         FREEMAIN  R,LV=(0),A=(1)                                  I250
         LA    XR1,INVECB               INVALID ECB ADDR           I250
         SPACE 1
ABENDXT  EQU   *                                                   I250
         SLL   XR1,12              POSITION ABEND CODE             I250
         ABEND (1),DUMP                                            I250
         AGO   .MFTPABD                                            I250
.MVTABD  ANOP                                                      I250
ABENDXT  SLL   XR15,12                 SHIFT ERROR CODE TO PROPER BITS
         BAL   XRLINK,ABTERM           HOOK ATTACHED TCB ON READY QUEUE
ABENDXT2 LR    XR2,XR15 .         SAVE ERROR CODE ACROSS ABTERM   M4392
         SR    XR1,XR1 .          GIVE DAUGHTER COMP CODE = 0     M4392
         LR    XR0,XRATCB .       SET UP PARAMS FOR ABTERM       A33614
         L     XRLINK,ABTRMAD .                                  A33614
         BALR  XRRETURN,XRLINK .  GOTO ABTERM THE ATTACHED TASK  A33614
         LR    XR1,XR2 .          RESTORE COMP CODE OF ATTACHOR   M4392
         ABEND (1),DUMP
.MFTPABD  ANOP                                                     I250
         EJECT
* DEFINE CONSTANT.
         SPACE 1
         AIF   ('&STORAGE' EQ '2').BMVTC                           I250
DPATCHER DC    A(IEA0DS)               DISPATCHER ADDRESS
HEADADR  DC    A(IEAHEAD)              ADDR OF THE 'HEAD' (TOP) TCB
AIEDS02  DC    A(IEA0DS02)             ADDR TASK SWITCH ROUTINE
CON249   DC    X'F9000000'             SUB-POOL 249
CON250   DC    X'0000FFFF'
MASK2    DC    X'00FFFFFC'              ROUND TO FULL WORD
ATTACH   DC    X'00040000'        SPECIAL RETURN ADDR IN IEAQAT    I270
         DC    A(GETSAVE)         TO GET SAVEAREA UNDER ATTACHEE   I270
LINK     DC    X'00040000'
         DC    A(IEAQCS01)             LINK ADDRESS
ABTRMAD  DC    A(IEA0AB00) .      ADDRESS OF ABTERM BR ENTRY     A33614
RMBRNCHA DC    A(RMBRANCH) .      ADDR OF REGMAIN BR ENTRY       A35419
         SPACE 1
PROPFAIL DC    X'8052A000' .      CODE TO INDICATE ATTACH W/O     M3891
*                                 STAI BUT A FAILURE OCCURRED     M3891
*                                 DURING PROPAGATION OF STAI'S    M3891
         SPACE 1
PARMFAIL DC    X'8072A000' .      ABEND CODE IF PARMLIST ADDR    A53341
*                                 OR ADDR WITHIN LIST ARE BAD.   A53341
*                                 SPECIFICALLY: THE NAME/DE      A53341
*                                 ADDR, THE GIVE SUBPOOL LIST    A53341
*                                 ADDR, AND THE SHARE SUBPOOL    A53341
*                                 LIST ADDR.                     A53341
RETCD4   DC    H'4' .
.BMVTC   ANOP                                                      I250
         AIF   ('&STORAGE' NE '2').BMFTC                           I250
         DS    0F                                                  I250
         AIF   ('&TTIME' NE 'TTIME').NINTVLT                       I250
         AIF   ('&FPREGS' NE 'FPREGS').NFPR1                       I250
TCBLNGTH DC    X'FF00015C'              LENGTH TCB, TQE & FPRSA    I250
         AGO   .NXTCON                                             I250
.NFPR1   ANOP                                                      I250
TCBLNGTH DC    X'FF00013C'              LENGTH OF TCB & TQE        I250
         AGO   .NXTCON                                             I250
.NINTVLT AIF   ('&FPREGS' NE 'FPREGS').NFPR2                       I250
TCBLNGTH DC    X'FF0000EC'              LENGTH OF TCB & FP REG SA  I250
         AGO   .NXTCON                                             I250
.NFPR2   ANOP                                                      I250
TCBLNGTH DC    X'FF0000CC'              LENGTH OF TCB              I250
.NXTCON  ANOP                                                      I250
ERROR2   DS    0F                                                  I250
DPATCHER DS    0F                                                  I250
SETTCB   DS    0F                                                  I250
SPSHARE  DS    0F                                                  I250
         AGO   .SQSSS                                              I250
.BMFTC   ANOP                                                      I250
SUPVSPID DC    H'128'
ENABLE   DC    X'FF'                   ENABLE INTERRUPT MASK
DISABLE  DC    X'00'                   DISABLE INTERRUPT MASK
.SQSSS   ANOP                                                      I250
PLUS255  DC    H'255'
         AIF   ('&TIMESL' NE 'TIMESL').NSLICE3                     MTS0
CONZERO  DC    AL3(0)                                              MTS0
.NSLICE3 ANOP                                                      MTS0
         SPACE 1                                                  20021
         AIF   ('&TSO' NE '1').NTSO7                              20021
         DS    0F                                                 20021
CON255   DC    X'FF000000'        SUBPOOL ID=255                  20021
H256     DC    H'256'                                             20021
.NTSO7   ANOP                                                     20021
         MEND
