         TITLE 'T S S O   M A I N L I N E  M O D U L E '
&WTOR    SETC  'YES'                   INCLUDE SUPPORT FOR WTOR REPLY
TSSO     CSECT
***********************************************************************
* THIS IS THE MAINLINE ROUTINE OF TSSO. IT IS RESPONSIBLE FOR THE     *
* INITIALIZATION AND TERMINATION OF THE SUBSYSTEM ADDRESS SPACE.      *
* TSSO WILL LINK TO THE TSSOMAIN ROUTINE FOLLOWING INITIALIZATION.    *
*                                                                     *
* VERSION IDENTIFIER: TSSO 4.3                                        *
* DATE: 2/25/86                                                       *
* AUTHOR: MARC SCHARE                                                 *
*                                                                     *
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
* NOTE: LAST MESSAGE ID FOR TSSO MAINLINE MODULE IS 73.               *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* REGISTER USAGE:                                                     *
*                                                                     *
* R11: TSSO DATA AREA (TSSOVARS)                                      *
* R10: TSSO CVT AFTER ITS AVAILABLE.                                  *
* R9 : TSSODATD DATA AREA                                             *
* R8 : TSSO SSCT ENTRY                                                *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         STM   R14,R12,12(R13)    SAVE CALLERS REGSITERS
         LR    R12,R15            LOAD ENTRY POINT OF TSSO
         USING TSSO,R12           GET ADDRESSIBILITY
         B     EYE1
         COPY  EYECATCH
EYE1     DS    0H
         LR    R8,R1
         GETMAIN R,LV=72           WE NEED STORAGE FOR THE SAVE AREA
         LTR   R15,R15
         BNZ   GETMERR            GETMAIN FAILED
         ST    R13,4(R1)          STORE ADDRESS OF CALLERS SAVE AREA
*                                 SAVE AREA
         ST    R1,8(R13)          REMEMBER WHERE THIS CORE IS
         LR    R13,R1             KEEP A COPY IN R13
***********************************************************************
* GETMAIN STORAGE FOR THE VARIABLES THAT ARE TI BE ACCESSED ONLY BY   *
* THE TSSO MAINLINE CODE. R11 WILL POINT TO THIS STORAGE FOR THE LIFE *
* OF TSSO.                                                            *
***********************************************************************
         GETMAIN R,LV=4096              ** FOR TSSO PRIVATE VARIABLES
         LR    R11,R1                   ** REMEMBER IT.
         USING TSSOVARS,R11
         MVC   LINK1D(LINK1CE-LINK1C),LINK1C
         MVC   LOAD1D(LOAD1CE-LOAD1C),LOAD1C
*
*
***********************************************************************
* STEP 0 - MAKE SURE THAT THE TSSO NDSA ACTUALLY EXISTS...            *
***********************************************************************
STEP0    DS    0H
         GETCVT (R2),NDSA=YES
         LTR   R2,R2
         BNZ   STEP1               NDSA PRESENT            *LBD 09/86*
*
         LINK  EP=TSSOINIT         NO - BUILD IT           *LBD 09/86*
*
         GETCVT (R2),NDSA=YES      TEST NDSA AGAIN         *LBD 09/86*
         LTR   R2,R2               IS IT THERE             *LBD 09/86*
         BNZ   STEP1               YES - WE ARE HAPPY      *LBD 09/86*
*
         WTO   'TSSI072S TSSONDSA IS NOT PRESENT AND COULD NOT BE OBTAIX
               NED',DESC=1
         WTO   'TSSI072S (CONT.) CONTACT SYSTEMS PROGRAMMER IMMEDIATELYX
               IS NOT SOONER',DESC=1
         B     ENDPROG0
*
*
*
***********************************************************************
* STEP 1 - INITIALIZE THE TSSO VARIABLES IN THE TSSO COMMUNICATIONS   *
*          AREA. THIS IS DONE TO PRESERVE THE ADDRESSABILITY OF THIS  *
*          AREA TO ONE BASE REGISTER. GETMAIN THE DATD AREA.          *
***********************************************************************
*
STEP1    DS    0H
         GETMAIN R,LV=4096              ** FOR VARIABLES SHARED AMONG
*                                       ** TSSO ROUTINES
         LR    R9,R1
         USING DATD,R9
*
***********************************************************************
* LINK TO THE TSSO INITIALIZATION MODULE TO FILL IN THE DATD VARS.    *
***********************************************************************
         LINK  EP=TSSOINI1,PARAM=((R9)),SF=(E,LINK1D),MF=(E,LINKPARM)
         ST    R8,PARMPTR               REMEMBER ADDRESS OF PARAMETERS
*                                       THIS IS REQUIRED FOR THE
*                                       INITIALIZATION SECTION -
*                                       PARMLIB PROCESSING.
*
         B     STEP2
*
*
STEP2    DS    0H
***********************************************************************
* STEP 2 OF TSSO INITIALIZATION IS TO PROCESS THE PARMLIB MEMBER      *
* SPECIFIED... SINCE PARMLIB PROCESSING IS A LENGTHY PROCEDURE, IT    *
* IS DONE PRIMARILY IN MODULE TSSOINI2. WE WILL LINK TO THE MODULE    *
* HERE. STEP 2 WILL ALSO BE USED TO CHECK IF TSSO IS ALREADY UP.      *
* IT MAY NOT BE CORRECT TO PLACE IT HERE, BUT WE NEED TO BE ABLE TO   *
* PROCESS THE "FORCE" PARAMETER.                                      *
***********************************************************************
         LINK  EP=TSSOINI2,PARAM=((R9)),SF=(E,LINK1D),MF=(E,LINKPARM)
         LTR   R15,R15
         BNZ   ENDPROG
*
         GETCVT  (R8),SSCT=YES      GET A POINTER TO TSSO SSCT ENTRY
         LTR   R15,R15             WAS IT FOUND ?
         BNZ   NOTUP               TSSO IS NOT UP, LET SOMEONE ELSE
*                                  MENTION THE SSCT ISNT THERE.
         USING SSCT,R8            ADDRESS THE SSCT
         L     R10,SSCTSUSE         PICK UP TSSO CVT
         LTR   R10,R10             IS THERE ONE ?
         BZ    NOTUP               TSSO IS NOT UP, THIS IS GOOD NEWS
         DROP  R8
***********************************************************************
* WHEN WE GET HERE, WE HAVE DETECTED THAT TSSO IS TRYING TO RESTART.  *
* THIS WILL NOT BE PERMITTED, UNLESS THE FORCE PARAMETER IS IN EFFECT *
***********************************************************************
ALREADUP DS    0H
         CLI   STARFORC,C'Y'       IS FORCE IN EFFECT ?
         BE    STP2ALUP            NO, BLOW TSSO AWAY...
***********************************************************************
* HERE, FORCE IS NOT IN EFFECT, DO NOT ALLOW THE TSSO RESTART.        *
***********************************************************************
STP2DNST DS    0H
         WTO   'TSSI070E TSSO IS ALREADY ACTIVE - START REJECTED'
         B     ENDPROG
*
STP2ALUP DS    0H
         WTO   'TSSI071I WARNING - TSSO IS ALREADY ACTIVE - INITIALIZATX
               ION CONTINUES DUE TO FORCE OPTION'
         B     NOTUP
NOTUP    DS    0H
*
         B     STEP3
*
*
*
*
*
STEP3    DS    0H
***********************************************************************
* STEP3 OF TSSO INITIALIZATION IS TO LOAD THE TSSOWTO PROGRAM INTO    *
* THE TSSO ADDRESS SPACE.                                             *
***********************************************************************
LOADWTO  DS    0H
***********************************************************************
* THIS IS THE OUTPUT PROCESSOR                                        *
* FOR TSSO, AND CURRENTLY, ONE OF THE WAYS THAT TSSO WILL ISSUE       *
* COMMANDS. THE MODULE IS LOADED ONCE, AND BRANCHED TO WHEN NEEDED.   *
* IT IS DELETED AT TASK TERMINATION.                                  *
***********************************************************************
         LOAD  EP=TSSOWTO,ERRET=NOTSSWTO
         ST    R0,WTOADDR
         B     STEP4
NOTSSWTO DS    0H
         WTO   'TSST051S TSSO TERMINATING BECAUSE OF NO TSSOWTO MODULE'X
               ,DESC=(1)
         B     EXIT0
*
*
*
*
*
STEP4    DS    0H
***********************************************************************
* STEP 4 OF TSSO INITIALIZATION IS TO SET UP THE TSSO COMMAND RING.   *
* THIS DATA AREA IS USED BY TSSO TO QUEUE UP TSSO COMMANDS FROM       *
* CONSOLES WHEN TSSO IS DOING SOMETHING ELSE.                         *
***********************************************************************
GETRING  DS    0H
         L     R2,MAXCMDS          GET VALUE FOR MAX COMMANDS
         SLL   R2,8                MULTIPLY BY 256- SIZE PER ENTRY
         MODESET KEY=ZERO
***********************************************************************
* NOTE THAT KEY ZERO IS OBTAINED BECAUSE WE DO NOT WANT UNAUTHORIZED  *
* USERS TO TRAMP ALL OVER OUR COMMAND RING.                           *
***********************************************************************
         GETMAIN R,LV=(R2),SP=241   GET THE STORAGE
         ST    R1,CMDRINGL         AND PUT IT IN CMDRING
*
         L     R1,CMDRINGL
         LR    R2,R1               COPY STARTING ADDRESS
         L     R4,MAXCMDS          GET MAX COMMAANDS AGAIN
         BCTR  R4,0                SUBTRACT 1 FOR LOOP
CMNDLOOP DS    0H
         XC    0(256,R2),0(R2)     ZERO OUT STORAGE
         LA    R3,256(R2)          POINT TO NEXT ENTRY
         ST    R3,0(R2)            AND STORE ENTRY IN POINTER FIELD
         LR    R2,R3               MAKE EM EQUAL
         BCT   R4,CMNDLOOP         DO IT AGAIN
*
         XC    0(256,R2),0(R2)     ZERO OUT STORAGE
         L     R3,CMDRINGL
         ST    R3,0(R2)            COMPLETE THE RING
         ST    R3,CURRCMD          MARK THIS AS CURRENT COMMAND
*                                  THE NEXT COMMAND IN RING
         MODESET KEY=NZERO
         B     STEP5
*
*
*
*
*
STEP5    DS    0H
***********************************************************************
* STEP 5 OF THE TSSO INITIALIZATION PROCESS IS TO DYNAMICALLY CHANGE  *
* THE RACF USERID OF THE TSSO ADDRESS SPACE TO SOME OTHER VALUE. THIS *
* IS DONE IN THE TSSOINI3 MODULE.                                     *
***********************************************************************
GETRACF  DS    0H
*
         LR    R1,R9            GET ADDRESS OF DATD MODULE
         LINK  EP=TSSOINI3,SF=(E,LINK1D)
*
         B     STEP6
*
*
*
*
*
STEP6    DS    0H
***********************************************************************
* STEP 6 OF THE TSSO INITIALIZATION PROCESS IS TO OBTAIN THE ADDRESSES*
* OF SEVERAL MVS CONTROL BLOCKS, AND PUT THEM AWAY FOR LATER USE.     *
***********************************************************************
         SPACE
         L     R2,X'21C'           PSATOLD-PSA
         ST    R2,TSSOTCB          SAVE TCB ADDRESS
*
         USING TCB,R2
         L     R2,TCBJSCB          GET JSCB FIELD
         USING IEZJSCB,R2
*
         L     R2,JSCBACT          MAKE SURE ITS ACTIVE JSCB
         ST    R2,TSSOJSCB
*
         L     R2,JSCBSSIB         AND PLUCK OFF SSIB FIELD
         ST    R2,HOLDSSIB         PUT IT AWAY FOR NOW
         B     STEP7
*
STEP7    DS    0H
***********************************************************************
* STEP 7 OF THE TSSO INITIALIZATION PROCESS IS TO LOCATE THE TSSO SSCT*
* ENTRY. THIS IS DONE THROUGH A MACRO CALL.                           *
***********************************************************************
         GETCVT  (R8),SSCT=YES      GET A POINTER TO TSSO SSCT ENTRY
         LTR   R15,R15             WAS IT FOUND ?
         BNZ   NOSSCT
         USING SSCT,R8            ADDRESS THE SSCT
         L     R10,SSCTSUSE         PICK UP TSSO CVT
         LTR   R10,R10             IS THERE ONE ?
         BNZ   RESTART             YES, THIS MUST BE A RESTART
         B     STEP8
         DROP  R8
RESTART  DS    0H
*
***********************************************************************
* STEP 8 OF THE TSSO INITIALIZATION PROCESS IS TO DO A GETMAIN OF THE *
* TSSO CVT. THE ADDRESS OF THIS GLOBAL DATA AREA IS THEN STORED IN    *
* THE SSCTSUSE FIELD OF TSSO'S SSCT ENTRY. THIS AREA IS ACCESSABLE    *
* FROM ANY ADDRESS SPACE.                                             *
***********************************************************************
STEP8    DS    0H
         MODESET KEY=ZERO
         GETMAIN R,LV=1024,SP=228
         LR    R10,R1
         USING TSSOCVT,R10
         XC    0(256,R1),0(R1)            ZERO OUT CVT
         XC    256(256,R1),256(R1)
         XC    512(256,R1),512(R1)
         XC    768(256,R1),768(R1)
         USING SSCT,R8
         ST    R10,SSCTSUSE        STORE TSSO CVT ADDRESS
         DROP  R8
         MODESET KEY=NZERO
         B     STEP9
*
*
*
*
*
STEP9    DS    0H
***********************************************************************
* STEP 9 OF THE TSSO INITIALIZATION PROCESS IS TO POPULATE THE        *
* TSSOCVT WITH THE VALUES WE HAVE OBTAINED SO FAR. NOTE THAT R10      *
* SERVES AS THE BASE REGISTER FOR THE TSSO CVT.                       *
***********************************************************************
         MODESET KEY=ZERO
         XC    TSSOFLG1,TSSOFLG1   ZERO STATUS BYTE
         MVC   NUMCMDS(4),MAXCMDS    FILL IN MAX COMMANDS
         MVC   TSSOSSIB(4),HOLDSSIB
         MVC   TSSOCHAR(1),TSSOSRC   DEFAULT IS A '#'
         MVC   CMDRING(4),CMDRINGL
         MVC   NEXTCMD(4),CMDRING    MARK FIRST PLACE   FOR SSSM
*                                     TO PUT COMMAND
         L     R1,X'224'          ASCB ADDRESS
         ST    R1,TSSOASCB        NEEDED FOR CROSS MEMORY POST OF
*                                 TSSO FROM TSSOSS10
         ST    R9,TSSODSEC        MAKE DATD EASILY ADDRESSABLE FROM
*                                 ALL TSSO MODULES.
*
         MVC   SECLEVEL(4),INISEC   COPY IN SPECIFIED SECURITY LVL
         MVC   SECTMEOT(4),TMEOTVL  COPY IN TIMEOUT VALUE FROM PARMS..
         ST    R8,TSSOSSCT         SAVE SSCT ADDRESS
         MODESET KEY=NZERO
         B     STEP10
*
*
*
*
*
***********************************************************************
* STEP 10 OF THE INITIALIZATION PROCESS IS TO TAKE STEPS TO KEEP THE  *
* TSSO ADDRESS SPACE AROUND ALL DAY, NOT LETTING IT SUCCUMB TO THE    *
* JOB WAIT TIME PARAMETER SPECIFIED TO SMF.                           *
***********************************************************************
STEP10   DS    0H
         L     R2,X'224'          GET ASCB ADDRESS...
         USING ASCB,R2            MOVE HIGH NUMBER INTO JOB WAIT TIME
*                                 SO TSSO WILL NOT TIME OUT.
         L     R6,=F'986400'       ALL DAY.. ALL NIGHT ...
         MODESET KEY=ZERO
         ST    R6,ASCBSWTL        STICK IN JOB WAIT TIME.
         MODESET KEY=NZERO
         DROP  R2
         B     STEP11
*
*
*
*
*
***********************************************************************
* STEP 11 OF THE INITIALIZATION PROCESS IS TO SET UP THE TSSO ESTAE   *
* TO CLEAN UP ANY ABENDS THAT MAY OCCUR. THIS ESTAE IS IN EFFECT FOR  *
* THE LIFE OF THE JOB.                                                *
***********************************************************************
STEP11   DS    0H
         LOAD  EP=TSSOESTA,ERRET=BADESTAE,LSEARCH=YES
         LR    R6,R0              SAVE ENTRY POINT
         ESTAE (R6),TERM=YES,PARAM=(R10),MF=(E,ESTAED)
*
         LTR   R15,R15
         BNZ   BADESTAE
         B     OKESTAE
BADESTAE DS    0H
         WTO   MF=(E,WTO9D)     ** GIVE USER BAD NEWS **  (MSG 52)
         B     EXIT0
         EJECT
OKESTAE  DS    0H
         B     STEP12
*
*
*
*
*
STEP12   DS    0H
***********************************************************************
* STEP 12 OF THE INITIALIZATION PROCESS IS TO START FILLING IN THE    *
* SSVT FOR TSSO. TSSO MUST GETMAIN THE SSVT, AND PLUG IN ENTRIES FROM *
* THE SSIARRAY. THIS IS DONE AT A LATER STEP.                         *
***********************************************************************
         GETCVT (R2),SSCT=YES      IS OUR SSVT IN?
         L     R2,SSCTSSVT
         LTR   R2,R2
         BZ    NOSSVT              BRANCH IF ALREADY IN
         USING SSVT,R2
         SPACE
         WTO   'TSST053A SSVT LOCATED FOR TSSO- MULTIPLE TSSO ADDRESS SX
               ACES MAY EXIST',DESC=(6)
NOSSVT   DS    0H
         MODESET KEY=ZERO
         GETMAIN R,LV=1024+256+4+4,SP=241
* THE ABOVE INSTRUCTION GETMAINS THE SPACE NEEDED FOR THE TSSO
* SSVT. THE LENGTHS ARE: 1024 FOR THE FUNCTION ROUTINE ADDRESSES
*                         256 FOR THE ONE BYTE LENGTH
*                           4 FOR THE SSVT HEADER
*                           4 FOR THE BCR SSVT IDENTIFIER (SSVT)
*                        1284 ==== TOTAL
         XC    0(256,R1),0(R1)          ZERO OUT THE TSSO SSVT
         XC    256(256,R1),256(R1)
         XC    512(256,R1),512(R1)
         XC    768(256,R1),768(R1)
         XC    1024(256,R1),1024(R1)
         XC    1280(4,R1),1280(R1)
         SPACE
         MVC   0(4,R1),=C'SSVT'    MOVE IN IDENTIFIER.
         LA    R2,4(,R1)           GET ADDRESS OF ACTUAL SSVT
* R2 POINTS TO THE SSVT AS IT WILL BE PRESENTED TO MVS...
         ST    R2,TSSOSSVT         SAVE SSVT ADDRESS
         MODESET KEY=NZERO
         B     STEP13
*
*
*
*
*
***********************************************************************
* STEP 13 OF TSSO INITIALIZATION IS TO LOAD THE SUBSYSTEM MONITORS    *
* SPECIFIED IN THE PARAMETER DECK. THESE PARAMETERS ARE ADDED TO THE  *
* SSIARRAY, WHICH IS RESIDENT IN THE TSSODATD AREA.                   *
***********************************************************************
STEP13   DS    0H
         LA    R7,SSIARRAY        USE REG 7 AS THE BASE FOR SSIARRAY
         LH    R6,SSICOUNT        HOW MANY MODULES ARE WE LOADING
* NOW, LOOP ON THE NUMBER OF MODULES SPECIFIED, LOADING EACH INTO
* GLOBAL STORAGE.
SSILOADL DS    0H
         LA    R5,8(R7)
         LOAD  EPLOC=(R5),GLOBAL=(YES,P),LSEARCH=YES,ERRET=SSILOADB,   X
               SF=(E,LOAD1D)
         ST    R0,16(R7)          STORE LOAD MODULE ADDRESS
         LR    R5,R0              COPY ENTRY POINT
         MVC   20(8,R7),10(R5)    SAVE DATE
         MVC   28(8,R7),18(R5)    AND TIME
         LA    R7,36(R7)          BUMP TO NEXT ENTRY
         BCT   R6,SSILOADL        AND LOOP BACK.
         B     STEP14             WHEN DONE, GO TO THE NEXT STEP.
SSILOADB DS    0H
         MVC   WTO39D+49(8),8(R7)
         WTO   MF=(E,WTO39D)          (MSG 54)
         B     EXIT0
*
*
*
*
*
STEP14   DS    0H
***********************************************************************
* STEP 14 OF TSSO INITIALIZATION IS TO BUILD THE TSSO SSVT. THIS IS   *
* DONE BY USING THE INFORMATION FROM THE SSIARRAY, AND PLUGGING INTO  *
* THE SSVT IN THE FORMAT EXPECTED BY MVS.                             *
***********************************************************************
BLDSSVT  DS    0H
         SPACE
         XR    R4,R4               R4 WILL KEEP A COUNT OF THE NUMBER
*                                  OF ENTRIES LOADED SO FAR. THIS COUNT
*                                  STARTS AT ZERO.
         LH    R5,SSICOUNT         GET COUNT OF NUMBER OF ROUTINES
*                                  TO LOAD...
         LA    R6,SSIARRAY         REG 6 POINTS TO THE START OF THE
*                                  SSIARRAY TABLE...
         L     R7,TSSOSSVT         REG 7 POINTS TO THE START OF THE
*                                  SSVT MODULE THAT WAS GETMAINED
         MODESET KEY=ZERO
         STH   R5,2(0,R7)          STORE COUNT OF ROUTINES INTO SSVT
         LA    R7,4(R7)
         LA    R8,256(R7)          REG 8 POINTS TO THE POINTERS FOR THE
*                                  FUNCTION ROUTINE ADDRESSES.
LOADTAB  DS    0H
         LH    R3,0(R6)            GET SUBSYSTEM FUNCTION NUMBER E.G.
*                                  10 = OPERATOR COMMAND
         BCTR  R3,0                SUBTRACT ONE FOR STC BECAUSE
*                                  THE SSVT FUNCTION CODES START AT
*                                  1 INSTEAD OF ZERO, SO 10(R7) IS
*                                  FUNCTION CODE 11.
         LA    R4,1(R4)            BUMP UP COUNTER
         STC   R4,0(R3,R7)         PLACE THE NUMBER INTO THE
*                                  SUBSYSTEM FUNCTION TABLE. THE
*                                  OFFSET WILL BE THE COUNT IN REG 1
         L     R3,16(R6)           POINT AT ADDRESS OF ROUTINE TO HAND
*                                  LE THE FUNCTION.
         ST    R3,0(R8)            STORE THAT ADDRESS INTO THE
*                                  FUNCTION ADDRESS POINTER TABLE
         LA    R8,4(R8)            POINT TO MEXT FUNCTION ROUTINE
*                                  ADDRESS
         LA    R6,36(R6)           POINT TO NEXT ENTRY IN TABLE
         BCT   R5,LOADTAB
         MODESET KEY=NZERO
ENDSTP14 DS    0H
* AT THIS POINT, THE SSVT HAS BEEN LOADED, AND ALL THAT REMAINS IS TO
* CONNECT THE SSVT INTO THE MVS TABLE. THIS IS DONE AS THE LAST STEP
* OF TSSO INITIALIZATION.
*
*
*
*
STEP15   DS    0H
***********************************************************************
* STEP 15 OF TSSO INITIALIZATION IS TO BUMP UP THE COUNT OF SUBSYSTEMS*
* RECEIVING WTO MESSAGES BY ONE. WE WILL ALSO TEST FOR THIS COUNT     *
* BEING NEGATIVE, AND ISSUE A MESSAGE IF THIS IS TRUE.                *
* THIS SECTION OF CODE ALSO OBTAINS THE MASTER CONSOLE, AND STORES IT *
* IN THE TSSODATD AREA.                                               *
***********************************************************************
* THIS SECTION OF CODE WILL BUMP UP THE COUNT OF SUBSYSTEM
* ACCEPTING WTO REQUESTS BY 1. THIS FIELD IS KEPT IN THE UCM.
         L     R7,16
         USING CVT,R7
         L     R3,CVTCUCB           GET UCM PREFIX
         AH    R3,=H'-4'
         L     R3,0(R3)             GET UCM PREFIX
         USING UCMPRFX,R3
         L     R14,UCMMCENT         GET ADDRESS OF UCM FOR MASTCONS
         USING UCMLIST,R14
         MODESET KEY=ZERO
         XR    R15,R15
         IC    R15,UCMID            GET THE CONSOLE ID
         STH   R15,MASTCONS         AND STORE IT...
         DROP  R3,R14
         L     R3,CVTCUCB           GET UCM PREFIX
         DROP  R7
         USING UCM,R3
         AIF   ('&WTOR' NE 'YES').NOBRD
         LH    R1,UCMBRDST
         LTR   R1,R1
         BM    BRDPROB
         LA    R1,1(R1)
         STH   R1,UCMBRDST
         B     ENDSTP15
BRDPROB  DS    0H
         WTO   'TSST069E WARNING: UCMBRDST WAS NEGATIVE - CALL IBM'
         LA    R1,1
         STH   R1,UCMBRDST
         MODESET KEY=NZERO
         B     ENDSTP15
.NOBRD   ANOP
ENDSTP15 DS    0H
         B     STEP16
         DROP  R3
*
*
*
*
*
STEP16   DS    0H
***********************************************************************
* STEP 16 IN THE TSSO INITIALIZATION PROCESS IS TO LOAD THE TSSO      *
* AOF TABLE SPECIFIED IN THE PARAMETER INPUT DECK. ALSO INCLUDED      *
* ARE WARNINGS FOR BAD TABLES, INCORRECT VERSIONS, ETC...             *
***********************************************************************
************************************************************
*                                                          *
*        LOAD THE AUTOMATED OPERATOR FACILITY TABLE        *
*                                                          *
************************************************************
GETTABLE DS    0H
         LA    R2,TSSOTABN
         CLC   0(8,R2),=CL8'NONE'
         BE    AOFDEACT
         LOAD  EPLOC=(R2),GLOBAL=(YES,P),LSEARCH=YES,ERRET=NOLOAD,     X
               SF=(E,LOAD1D)
         LR    R6,R0                         REMEMBER LOAD ADDRESS
         CLC   4(8,R6),=CL8'TSSOTABL'        MAKE SURE WE REALLY
*                                            HAVE A TSSO TABLE
         BNE   TABNGOOD                      DARN
         CLC   44(8,R6),=CL8'TSSO 4.3'       CHECK VERSION NUMBER
         BNE   TABNGOO2                      INCORRECT VERSION
         MODESET KEY=ZERO                    AGAIN, ACCESS TO TSSO
*                                            CVT.
         ST    R6,TSSOTABL
         MODESET KEY=NZERO                   AND OUT AGAIN.
*
         MVC   WTO19D+38(8),TSSOTABN
         WTO   MF=(E,WTO19D)           (MSG 55)
         B     ENDSTP16
TABNGOOD DS    0H                      ** NOT A TSSO TABLE **
         MVC   WTO21D+20(8),TSSOTABN
         WTO   MF=(E,WTO21D)           (MSG 56)
         MODESET KEY=ZERO
         XR    R3,R3
         ST    R3,TSSOTABL
         MODESET KEY=NZERO
         LA    R3,TSSOTABN
         DELETE EPLOC=(R3)
         B     ENDSTP16
TABNGOO2 DS    0H                      ** TABLE AT INCORRECT VERSION **
         MVC   WTO32D+19(8),TSSOTABN
         WTO   MF=(E,WTO32D)           (MSG 57)
         MODESET KEY=ZERO
         XR    R3,R3
         ST    R3,TSSOTABL
         MODESET KEY=NZERO
         LA    R3,TSSOTABN
         DELETE EPLOC=(R3)
         B     ENDSTP16
NOLOAD   DS    0H
         MVC   WTO20D+20(8),TSSOTABN
         WTO   MF=(E,WTO20D)           (MSG 58)
         MODESET KEY=ZERO
         XR    R3,R3
         ST    R3,TSSOTABL
         MODESET KEY=NZERO
         B     ENDSTP16
AOFDEACT DS    0H
         WTO   'TSSI059E TSSO AUTOMATED OPERATIONS FACILITY IS DEACTIVAX
               TED BY PARMLIB INPUT'
ENDSTP16 DS    0H
         B     STEP17
*
*
*
*
*
***********************************************************************
* STEP 17 OF TSSO INITIALIZATION IS TO GETMAIN THE TSSO CONTROL       *
* BLOCK HEADER. THIS CONTROL BLOCK CONTAINS INFORMATION ABOUT ALL     *
* TSSO SUBSYSTEM ALLOCATABLE CONSOLES.                                *
***********************************************************************
STEP17   DS    0H
         MODESET KEY=ZERO
         GETMAIN R,LV=1024,SP=241
         ST    R1,SSCONSAD         STORE ADDRESS OF SSCONSAD INTO TSSO
*                                  CVT.
         XC    0(256,R1),0(R1)          ZERO OUT THE SSCON CB
         XC    256(256,R1),256(R1)
         XC    512(256,R1),512(R1)
         XC    768(256,R1),768(R1)
         MODESET KEY=NZERO
ENDSTP17 DS    0H
         B     STEP18
*
*
*
*
*
STEP18   DS    0H
***********************************************************************
* STEP 18 OF THE TSSO INITIALIZATION PROCESS IS TO ALLOCATE THE       *
* REQUESTED NUMBER OF SUBSYSTEM ALLOCATABLE CONSOLES.                 *
* THE TSSOINI4 ROUTINE IS TO BE USED FOR THIS PROCESS.                *
***********************************************************************
***********************************************************************
* NOTE THAT TSSOINI4 CALLS IEAVG700 FOR EACH SUBSYSTEM CONSOLE THAT   *
* IS REQUESTED THROUGH PARMLIB.                                       *
***********************************************************************
         XR    R0,R0
         LINK  EP=TSSOINI4,SF=(E,LINK1D)
ENDSTP18 DS    0H
         B     STEP19
*
*
*
*
*
STEP19   DS    0H
***********************************************************************
* STEP 19 OF THE TSSO INITIALIZATION PROCESS IS TO GET STORAGE AND    *
* INITIALIZE THE SECURITY SYSTEM ARRAY. THIS ARRAY IS POINTED TO BY   *
* "SECARRAY" AND IS USED TO HOLD USERIDS, CONSOLES ETC... FOR SIGNED  *
* ON TSSO USERS.                                                      *
***********************************************************************
***********************************************************************
* EACH ENTRY IN THE SECURITY TABLE IS 32 BYTES, AND WE WILL HAVE 20   *
* ENTRIES, THEREFORE, THE TABLE IS 640 BYTES LONG.                    *
***********************************************************************
GETSECR  DS    0H
         CLC   SECLEVEL(4),=CL4'MINI'    SECURITY WANTED ?
         BE    NOSECR                    NO - DONT BOTHER WITH ARRAY
*
         MODESET KEY=ZERO
         GETMAIN R,LV=1024,SP=241
         ST    R1,SECARRAY         REMEMBER THE ADDRESS...
         XC    0(256,R1),0(R1)
         XC    256(256,R1),256(R1)
         XC    512(256,R1),512(R1)
         XC    768(256,R1),768(R1)
         MODESET KEY=NZERO
         B     ENDSTP19
*
NOSECR   DS    0H
         MODESET KEY=ZERO
         XC    SECARRAY(4),SECARRAY
         MODESET KEY=NZERO
         B     ENDSTP19
ENDSTP19 DS    0H
         B     STEP20
*
*
*
*
*
STEP20   DS    0H
***********************************************************************
* STEP 20 OF THE TSSO INITIALIZATION PROCEDURE IS TO LOCATE AND LOAD  *
* THE TSSO TSSOPCMD MODULE. THIS MODULE IS RESPONSIBLE FOR ISSUEING   *
* THE OS CMDS FROM TSO, NCCF AND IMS.                                 *
***********************************************************************
LDOPCMD  DS    0H
         LOAD  EP=TSSOPCMD,GLOBAL=(YES,P),ERRET=OPCMDERR,LSEARCH=YES,  X
               SF=(E,LOAD1D)
         LR    R6,R0
         MODESET KEY=ZERO
         ST    R6,OPCMDADR         REMEMBER ITS ADDRESS
         OI    TSSOFLG2,TSSOPLOA   MARK TSSOPCMD AS LOADED.
         MODESET KEY=NZERO
         B     ENDSTP20
OPCMDERR DS    0H
         WTO   'TSSI068E ERROR LOADING MODULE TSSOPCMD',DESC=1
         MODESET KEY=ZERO
         XC    OPCMDADR(4),OPCMDADR    ZERO OUT OPCMDADR
         MODESET KEY=NZERO
         B     ENDSTP20
ENDSTP20 DS    0H
         B     STEP21
*
*
*
*
*
STEP21   DS    0H
***********************************************************************
* STEP 21 OF THE TSSO INTIALIZATION PROCEDURE IS TO MARK THE TSSO     *
* ADDRESS SPACE AS NON SWAPPABLE FOR PERFORMANCE REASONS. THIS IS     *
* OPTIONAL, BASED ON A PARMLIB PARAMETER.                             *
***********************************************************************
         CLI   TSSOSWAP,C'Y'      NON SWAPPABLE REQUESTED
         BNE   MAKESWAP           OH WELL...
         MODESET MODE=SUP,KEY=ZERO
         L     R6,X'224'           GET ASCB ADDRESS
         USING ASCB,R6
         LH    R6,ASCBASID         GET ASID FIELD
         DROP  R6
         SYSEVENT DONTSWAP,ASID=(R6),ENTRY=SVC
         MODESET MODE=PROB,KEY=NZERO
         B     ENDSTP21
MAKESWAP DS    0H
         B     ENDSTP21
ENDSTP21 DS    0H
         B     STEP21#1
*
*
STEP21#1 DS    0H
***********************************************************************
* STEP 21.1  OF  TSSO INTIALIZATION PROCEDURE IS TO STORE THE ACTIVE  *
* TSSO ADDRESS SPACE IN THE TSSONDSA. THIS WILL ALLOW INCARNATIONS    *
* OF TSSO TO DETERMINE IF THEY ARE THE "ACTIVE" ONE...                *
***********************************************************************
         L     R6,X'224'           GET ASCB ADDRESS
         USING ASCB,R6
         LH    R6,ASCBASID         GET ASID FIELD
         GETCVT (R2),NDSA=YES
         USING TSSONDSA,R2
         MODESET KEY=ZERO
         STH   R6,TSSOASID         PLACE IN NDSA
         MODESET KEY=NZERO
         DROP  R2,R6
         B     STEP22
*
*
STEP22   DS    0H
***********************************************************************
* STEP 22   OF TSSO INITIALIZATION IS TO LOAD THE ADDRESS OF THE      *
* TSSO PC ROUTINE (TSSOGAPF) AND PUT ITS ADDRESS INTO TSSOPC1 VARIABLE*
***********************************************************************
*
         GETCVT (R2),NDSA=YES
         USING TSSONDSA,R2
         MODESET KEY=ZERO
         LOAD  EP=TSSOGAPF,GLOBAL=(YES,P),ERRET=LDAPFERR,LSEARCH=YES,  X
               SF=(E,LOAD1D)
         ST    R0,TSSOPC1               AND PUT THE ADDRESS AWAY
         B     ESTP22
LDAPFERR DS    0H
         WTO   'TSSI070E ERROR LOADING TSSOGAPF MODULE',DESC=1
         B     ENDPROG
ESTP22   DS    0H
         MODESET KEY=NZERO
         DROP  R2
         B     STEP22#2
*
*
STEP22#2 DS    0H
***********************************************************************
* STEP 22.2   OF TSSO INITIALIZATION IS TO CALL THE TSSO CROSS MEMORY *
* SERVICES INITIALIZATION ROUTINE. THIS ROUTINE WILL GO OUT AND       *
* INITIALIZE THE TSSO CROSS MEMORY SERVICES ENVIRONMENT.              *
***********************************************************************
         LINK  EP=TSSOINI5,SF=(E,LINK1D)
         LTR   R15,R15
         BNZ   ENDPROG
*
         B     ENDS22#2
ENDS22#2 DS    0H
         B     STEP22#5
*
*
STEP22#5 DS    0H
***********************************************************************
* STEP 22#5 OF THE TSSO INITIALIZATION PROCESS IS TO INFORM THE
* OPERATOR (IF SECLEVEL='MAXIMAL') THAT THEY MUST LOGON TO THE TSSO   *
* SUBSYSTEM AS THE NEXT COMMAND                                       *
***********************************************************************
         CLC   SECLEVEL(4),=CL4'MAXI'   MAXIMAL SECURITY ?
         BNE   NOMAXI1
         WTO   'TSSI067A ALL CONSOLES MUST NOW LOG ON TO TSSO',DESC=1
         B     ENDS22#5
NOMAXI1  DS    0H
ENDS22#5 DS    0H
         B     STEP23
*
*
STEP23   DS    0H
***********************************************************************
* AT LAST, WE ARE READY TO START. WE DO THIS BY CONNECTING THE        *
* SSVT TO THE SSCT ENTRY. THIS WILL INFORM MVS THAT WE ARE READY TO   *
* PROCESS.                                                            *
***********************************************************************
CNCTSSVT DS    0H
         L     R4,TSSOSSCT
         USING SSCT,R4
         L     R2,TSSOSSVT         LOAD THE SSVT
         MODESET KEY=ZERO
         ST    R2,SSCTSSVT         ** CONNECT **
         MODESET KEY=NZERO
         WTO   MF=(E,WTO4D)        STARTED MESSAGE  (MSG 60)
         WTO   'TSSI073I COPYRIGHT (C) 1986 BELL COMMUNICATIONS RESEARCX
               H'
***********************************************************************
* IN TSSO 4.3, THE MAIN WORK OF TSSO HAS BEEN MOVED TO THE TSSOMAIN   *
* MODULE. THIS IS TO PROVIDE ADDITIONAL SPACE IN THE INITIALIZATION   *
* ROUTINE. TSSOMAIN WILL RETURN HERE FOLLOWING RECEIPT OF A STOP CMD. *
***********************************************************************
*
         LINK  EP=TSSOMAIN,SF=(E,LINK1D)
*
************************************************************
*                                                          *
*        STOP - DISCONNECT THE SUBSYSTEM                   *
*                                                          *
************************************************************
         SPACE
STOP     EQU   *
         LINK  EP=TSSOTERM,SF=(E,LINK1D)
         WTO   MF=(E,WTO14D)     (MSG 64)
         B     ENDPROG
*
NOSSCT   DS   0H
         WTO  MF=(E,WTO1D)       (MSG 65)
         B    EXIT0
*
GETMERR  DS   0H
         WTO  'TSST066S TSSO TERMINATING BECAUSE IT CANT GET STORAGE !'
         B    ENDPROG1
EXIT0    DS   0H
ENDPROG  DS   0H
         SPACE
         FREEMAIN R,LV=4096,A=(R9)     FREEMAIN TSSODATD
ENDPROG0 DS    0H
         FREEMAIN R,LV=4096,A=(R11)    FREEMAIN TSSOVARS
         LR    R1,R13              GET ADDRESS OF CORE IN R1
         L     R13,4(R13)          RESTORE R13
         FREEMAIN R,LV=72,A=(R1)    FREE UP THE CORE
ENDPROG1 DS    0H
         L     R14,12(R13)         RELOAD RETURN POINT
         XR    R15,R15
         LM    R0,R12,20(R13)      RELOAD MORE REGISTERS
         BR    R14
*
         EJECT
***********************************************************************
* TSSO ONLY DATA CONSTANTS.
***********************************************************************
ALPRMLIB DC    CL50'ALLOC FI(PARMLIB) DSN(''SYS1.PARMLIB'') SHR'
FRPRMLIB DC    CL20'FREE FI(PARMLIB)'
LINK1C   LINK  LSEARCH=YES,SF=L
*
LINK1CE  EQU   *
LOAD1C   LOAD  EPLOC=0,GLOBAL=(YES,P),LSEARCH=YES,ERRET=SSILOADB,      X
               SF=L
LOAD1CE  DS    0H
************************************************************
* TSSO ONLY DSECT- NOT SHARED WITH OTHER MODULES.          *
************************************************************
TSSOVARS DSECT
LINK1D   LINK  LSEARCH=YES,SF=L
*
LOAD1D   LOAD  EPLOC=0,GLOBAL=(YES,P),LSEARCH=YES,ERRET=SSILOADB,      X
               SF=L
*
LINKPARM DS    F
*
***********************************************************************
* END OF TSSO ONLY VARIABLES.                                         *
***********************************************************************
*
*
***********************************************************************
* COPY IN THE DSECT FOR THE TSSO MAINLINE SHARED VARIABLES.           *
***********************************************************************
         COPY  TSSODATD
*
***********************************************************************
* COPY IN THE DSECT FOR THE TSSO CVT.                                 *
***********************************************************************
         TSSOCVT
         TSSONDSA
*
***********************************************************************
* COPY IN THE DSECT FOR THE TSSO COMMAND RING                         *
***********************************************************************
         TSSOCMND          DSECT FOR TSSO COMMAND RING
*
***********************************************************************
* COPY IN THE DSECT FOR THE TSSO SECURITY ARRAY                       *
***********************************************************************
         TSSOSECR          DSECT FOR TSSO SECURITY ARRAY
*
***********************************************************************
* COPY IN THE DSECT FOR THE TSSO SS CONSOLE BLOCK HEADER              *
***********************************************************************
         SSCONCBH          SUBSYSTEM CONSOLE CONTROL BLOCK HEADER
         SSCONCB           SUBSYSTEM CONSOLE CONTROL BLOCK
*
*
         PRINT NOGEN
         IEFJESCT
         IEFJSCVT
         IEFJSSVT
         DCBD  DSORG=PO,DEVD=DA
         CVT   DSECT=YES
         IEFJSSIB
         IEFJSSOB (CM,RR),CONTIG=YES
         IEZJSCB
         IKJTCB
         IHAASCB
         IHAASXB
         IHAETD
UCM      DSECT
         IEECUCM
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY TSSO(''V 4.3.0 &SYSDATE &SYSTIME'') '
 PUNCH ' INCLUDE  SYSLMOD(JCECVT)'
 PUNCH ' ENTRY    TSSO'
 PUNCH ' NAME     TSSO(R)'
         END
