.**********************************************************************
.* This document was prepared with SCRIPT/VS Release 3                *
.* using both GML tags and DCF macros.  It is designed                *
.* for printing on an IBM 3800 Model 3 laser printer and,             *
.* with one exception, uses the default fonts for headers,            *
.* highlighting, and text.  The running headers and footers           *
.* are formatted for simplex (single-sided) output.                   *
.**********************************************************************
.cm .spellck spell.text(temp)
.df text codepage t1dcdcfs
.df figfont type ('gothic' 9) codepage t1d0base
.bf text
.ls text 1.0
.ti ~ 41
.ti ^ 05
.ll 6.5i
:gdoc.
:frontm.
:titlep.
:title stitle='TSSO User''s Guide'
:title.Time Sharing Subsystem Option User's Guide
:date.Release 4.3  August, 1986
:address.
:aline.Marc Schare
:aline.Bell Communications Research, Inc.
:aline.3 Corporate Place, Room 2C-211
:aline.Piscataway, NJ 08854
:aline.Telephone:  201-981-2796
:eaddress.
:etitlep.
:toc.
:figlist.
:body.
:h1 id=intro.INTRODUCTION
The Time Sharing
Subsystem Option (TSSO) is a package designed to increase operator
productivity by automating tasks which need not be performed
manually. TSSO performs its function through three integrated
components. The Operator Productivity Facility (OPF) extends the
power of TSO to the MVS operator's console.
The Automated
Operations Facility (AOF) enhances an installation's ability
to control system events based on console message traffic.
An interface to the Network Communication Control Facility (NCCF)
allows the network operator to use TSSO
as a command processor,
issuing and receiving subsystem commands at the NCCF terminal.
TSSO also enhances end-user productivity
by allowing end-user access to the
MVS command subsystem.
This document describes the installation of TSSO,
TSSO parameters, and the use of the three components.
:h1.CURRENT VERSION
This document describes the function of TSSO Version 4, Release 3 (TSSO
All features described here will continue to work on subsequent versions
the Time Sharing Subsystem Option unless specified in a future version o
document.
A description of the new features of TSSO Version 4.3 can be
found in member RELGUIDE in the TSSO.VERS43.ASM data set.
:h1 id=plan.PLANNING FOR TSSO INSTALLATION
Because TSSO has grown in function and complexity,
a planning section is now necessary to describe
pre-requisite program products, MVS I/O generation requirements, and
security system conditioning.
This section should be reviewed
:hp2.
prior
:ehp2.
to the installation of TSSO.
:p.
TSSO 4.3 was developed for Bellcore internal use as part of a study on
automating the operation of an MVS computer center. Because the kernal o
TSSO was originally developed external to Bellcore, permission was grant
make this new version of TSSO available as public domain, unsupported
software. As a public domain software package, TSSO receives no formal
support from Bellcore or anyone else.
Therefore, installations that want to use TSSO must be prepared
to support it locally as a worst case possibility. Questions, comments o
enhancement requests are always welcome on an informal, non-committal ba
:h2.TSSO Software Prerequisites
The software listed below is the minimum version of the program product
required to run TSSO. In general, that version, or a later release, is
sufficient. Also listed is the version of the product run at Bell
Communications Research (i.e., the environment on which TSSO 4.3 was dev
:ol.
:li.
:hp3.
MVS/SP 1.3.3 or MVS/XA 2.1.1:ehp. is required for the OCCF enhancements
to the subsystem interface that allow TSSO/AOF and the OS family of comm
to function. TSSO 4.3 has never been run on earlier MVS releases.
Bellcore runs MVS/XA 2.1.3, and TSSO has also been tested on MVS/SP
1.3.4.
:li.
:hp3.
TSO/E Release 2:ehp3. is required by the OS family of commands.  These c
use CLIST variables for input and output, and require the CLIST
enhancements of TSO/E Release 2 to accomplish this. TSO/E is not require
these commands will not be used.
Bellcore runs TSO/E Release 2.1, and TSSO has also been tested with TSO/
Release 2.
:li.
:hp3.RACF 1.6:ehp3.
is required for the TSSO/RACF security interface.  TSSO has never
been run on previous releases of RACF.
Bellcore runs RACF 1.7,
and TSSO 4.3 has been tested only in that environment.
:li.
:hp3.ACF2 4.1:ehp3.
is the release on which TSSO/ACF2 interface is being
developed.
:eol.
:h2 id=cons.TSSO Subsystem Console
The OSCMD facility allows a
TSO CLIST to issue an operating system command and retrieve the
response. This facility requires a subsystem console
for every simultaneous caller of OSCMD.
In addition, an installation may want
to dedicate one subsystem console for the TSSO address space.
.pf
:fn.
For more information on this option,
see :hdref refid=numcons..
:efn.
.bf text
To create a subsystem
console, include the following card after the "CONSOLE" macros in the
MVS STAGE1 generation deck.
:xmp.
CONSOLE    TYPE=JES
:exmp.
Because TSSO 4.3 can use as many subsystem consoles
as are genned in,
it is a good idea to include many (10-20) of these cards.
(Bellcore has 10 subsystem consoles genned in.)
JES3 shops should note that JES3 and TSSO both
require subsystem consoles,
and you specify them accordingly.
:hp2.
An MVS IOGEN must be performed to generate the subsystem console. Instal
familiar with the "MINIGEN" approach may use this as an alternative.
:ehp2.
:h2.TSSO Security Issues
An optional feature of TSSO 4.3 is the ability
to secure your MVS consoles.
Console security requires MVS operators to identify themselves
before issuing commands;
thus, MVS installations
always know which operators issue which commands. The
following steps should be taken prior to initializing TSSO with a
security level other than "minimal".
:ol.
:li.
Provide a RACF user ID for each operator who will be issuing MVS command
on the system. This includes the master console, I/O console(s) and
user consoles.
:li.
Add a corresponding user ID to the User Attributes Data Set (UADS),
and set the USERDATA bits to X'C0' for operators who will be
invoking the privileged TSSO commands (e.g., REPLY, OSCMD etc.).
Note that
the USERDATA bits also control authority for regular TSO users,
and, if the Program Control Facility (PCF)
is installed,
the OSCMD and REPLY commands must be modified so that
PCF and TSSO don't conflict.
.pf
See :hdref refid=cmdauth. for information
.bf text
on the OSCMDATH user exit.
:li.
Pick a security level. SECLEVEL=MEDIAL is a good initial selection,
as operators can get used to the concept of logging on and logging off
of an MVS console. Later, security can be strengthened with
SECLEVEL=MAXIMAL.
:li.
Select a TIMEOUT parameter. This parameter is the number of minutes
before which an
MVS console will "timeout" and require a new LOGON command.
:li.
As with the rest of TSSO, operator training is
:hp3.
crucial
:ehp3.
for a successful implementation. Operators must become familiar with
the concepts of security.
:li.
ACF2 will eventually be supported under TSSO.
For the current status of this effort,
call Marc Schare.
:eol.
:h2.Conclusion
The remainder of this
guide should be read
:hp2.
in its entirety
:ehp2.
before installing TSSO.
Many of the
phone calls I've received on TSSO were answered in
the :hp3.TSSO User's Guide:ehp3..
Good luck in your TSSO installation !
.sp 2
.fo off
.in 45
Marc Schare
Bell Communication Research, Inc.
6 Corporate Place, Room 2C-211
Piscataway, NJ 08854
201-981-2796
.in 0
.fo on
:h1.INSTALLATION
TSSO is distributed in a single partitioned data set, which contains all
source modules, procedures and documentation.  Although
the data set may be called by any name, this document assumes
a name of
TSSO.VERS43.ASM.
:ol.
:li.
Download the TSSO.VERS43.ASM data set to DASD.  About 3 cylinders of
3380 space is required.
If you received your copy of the TSSO subsystem from the CBT tape, simpl
copy it to a data set with this name.  If you received a tape,
then the TSSO subsystem is in IEBCOPY format on the first file.
The tape will be non-labeled, so use the LABEL=(1,NL) parameter when
downloading TSSO.
:li.
Create two data sets for the TSSO modules
with the characteristics RECFM=U, LRECL=0, BLKSIZE=13030, DSORG=PO.
:ol.
:li.
TSSO.VERS43.LOAD will be
an intermediate data set for assembling TSSO modules.
:li.
SYS1.TSSOLOAD will contain the TSSO
production modules.
:lp.
One cylinder of 3380 DASD space should be sufficient
for these data sets.
:p.
Many users have found it useful to allocate a third data set:
:li.
SYS1.TSSOPROC will contain TSSO CLISTs.
Allocate it with characteristics
LRECL=255, BLKSIZE=3140, RECFM=VB, DSORG=PO.
Space requirements depend on the number of CLISTs you
anticipate creating.
:eol.
:li.
Assemble the TSSO source modules using the procedure
ASMALL in TSSO.VERS43.ASM.
You will need to EDIT the procedure and add
the appropriate installation job cards and
local accounting information.
:p.
If you will be running the TSSO subsystem on MVS/370, or both MVS/370 an
MVS/XA, the SYSLIB DD statement must be pointing to the SYS1.MACLIB and
SYS1.AMODGEN data sets for MVS/370. If you will be running the subsystem
exclusively on MVS/XA, the SYSLIB DD statement may point to the XA versi
of SYS1.MACLIB and SYS1.AMODGEN.
:note.
If you do not have TSO/E Release 2 installed,
the assemblies for OSCMD, OSWAIT, and OSASK will fail.
:li.
Copy the load modules from TSSO.VERS43.LOAD into the production
library SYS1.TSSOLOAD.  The library TSSO.VERS43.LOAD should remain
on the system as an intermediate library to contain assembled TSSO
load modules and assembled Automated Operations Facility tables.
:li.
If OSCMD, OSWAIT, OSPAUSE, OSWTO, and OSWTOH
will be accessed by TSO users,
copy the modules
from SYS1.TSSOLOAD to a publicly-accessible
TSO command library (e;g;, SYS1,CMDLIB).
:li.
Update the SYS1.PARMLIB data set with one or more TSSO
parameter decks.  The default member is TSSOPARM; however, alternate
members may be selected when TSSO is started.
Note that the TSSO parameter decks
:hp3.must:ehp3.
be located in SYS1.PARMLIB, as TSSO will dynamically allocate this data
.pf
Review the section :hdref refid=parms.
for further information.
A sample TSSO parameter deck may be found in member SAMPPARM in
:hdref refid=deck. or in the
.bf text
TSSO.VERS43.ASM data set.
:li.
Identify TSSO to MVS as a subsystem.
In the subsystem names table,
member IEFSSN:hp1.xx:ehp1. in SYS1.PARMLIB,
make an entry of the form
:xmp.
TSSO,TSSOINIT
:exmp.
:hp2.Note that this entry has changed
from release 4.2.:ehp2.
:li.
Include SYS1.TSSOLOAD in the IEAAPF:hp1.xx:ehp1. member of SYS1.PARMLIB.
This allows the TSSO subsystem to run APF authorized.
:li.
Include a TSSO start-up
procedure in the SYS1.PROCLIB data set.
Note that, because TSSO may be started by the master scheduler,
this procedure must be in SYS1.PROCLIB,
not in a PROCLIB defined to JES2.
A sample procedure for starting TSSO is in member TSSOPROC in
the TSSO.VERS43.ASM data set.
:li.
Give the TSO commands supplied with TSSO APF authorization.
Update
the installation CSECT IKJEFTE2 in load module IKJEFT02 to include the
following commands:
ALTAOF, CACHE, CPCMD, REPLY, OSCMD, OSWTO, OSWTOH, OSWAIT, and OSASK.
Under TSO/E Release 2.1,
this CSECT is
in the load module IKJTABLS. If this release of TSO/E is installed, a
separate copy of IKJTABLS may be used by TSSO if included in the SYS1.TS
data set.
:li.
Create the TSSO Automated Operations Facility table(s).
Instructions for preparing the table are found later in this document.
:li.
Copy the ASMTAB CLIST from the TSSO.VERS43.ASM data set
to SYS1.TSSOPROC.
:li.
If you will be running TSSO with RACF support and MINIMAL security,
add a RACF ID for TSSO.
Also add a RACF ID for TSSO to SYS1.UADS.
This will allow TSSO to assume the TSO attributes (e.g. ACCOUNT, SUBMIT
or MOUNT) that the installation desires.
If you will be running with MEDIAL or MAXIMAL security,
you may wish to add additional RACF or ACF2 and TSO user IDs
for each operator who will be logging on.
:li.
IPL MVS to refresh the subsystem name table.
:li.
If the OSCMD facility will be used,
you must have generated subsystem consoles
.pf
as specified in :hdref refid=cons..
.bf text
TSSO will warn you if the number of subsystem consoles requested
is not available at start time.
:li.Install the NCCF Interface (optional).
The following steps are required:
:ol.
:li.Copy the NCFOSCMD module into a library
concatenated to the STEPLIB~DD statement in the
procedure used to start NCCF.
:li.
Make the following entry in member DSICMD
of the data set defined by the DSIPARM~DD statement
in the procedure used to start NCCF:
:xmp.
OSCMD CMDMDL MOD=NCFOSCMD,TYPE=R,RES=N    TSSO 4.3
:exmp.
:eol.
:eol.
:h1 id=parms.TSSO PARAMETERS
TSSO parameters provide an installation with a
flexible mechanism for altering TSSO processing.
Parameters are
stored as members in SYS1.PARMLIB.
The default member is TSSOPARM,
and it is recommended that a TSSOPARM be created for daily processing.
:p.
Parameters can be entered in any order, and if two
entries are specified for the same parameter, the last entry
takes precedence.
:h2.MAXCMDS Parameter
MAXCMDS defines the maximum
number of concurrent commands that TSSO
will hold for processing.  TSSO processes commands in the order in
which they are entered, on a first~in-first~out basis.
Any commands that are entered
while TSSO is processing another command are queued for execution.
The MAXCMDS
parameter defines the size of that queue.
Too small a number is undesirable
because it is advantageous to be able to enter many TSSO commands at
a time.
Too large a number is also undesirable because it becomes
difficult to detect when a TSSO command may be looping or awaiting
terminal input.  The syntax is
:xmp.
MAXCMDS=:hp1.nn:ehp1.
:exmp.
where
:hp1.
nn
:ehp1.
defines the maximum number of simultaneous TSSO commands.
Note that TSSO
requires 256 bytes for each command in the common service area (CSA).
The default value is 15 simultaneous commands.
:h2.MAXWTO Parameter
MAXWTO defines the maximum number of WTOs TSSO will issue
for any given TSO command.  The parameter is designed to prevent console
flooding with TSO commands that produce many lines of output.
The syntax is
:xmp.
MAXWTO=:hp1.nnn:ehp1.
:exmp.
where
:hp1.
nnn
:ehp1.
is the maximum number of WTOs TSSO will allow for any one command.
TSSO will issue a message when this limit is exceeded.
Default is 250.
:h2.NONSWAP Parameter
NONSWAP defines whether TSSO will run non-swappable.  If
"Y" is entered, TSSO will issue the appropriate SYSEVENT to
MVS to declare itself non-swappable.  Any other entry will cause TSSO
to be swapped out whenever it has no work.  This can cause
:hp3.
severe
:ehp3.
performance degradation when using the subsystem.  The default value
is "Y".  The syntax is
.ti { AD
.ti } BD
:xmp.
NONSWAP={Y/N}
:exmp.
where "Y" will mark the TSSO address space non-swappable.
:h2 id=numcons.NUMCONS Parameter
NUMCONS defines the number of subsystem consoles for
the installation.
Optionally, you may dedicate one subsystem console
for the TSSO address space.
The syntax is
:xmp.
NUMCONS=:hp1.nn:ehp1. {DEDICATE}
:exmp.
where :hp1.nn:ehp1. is the number of consoles.
If DEDICATE is specified,
one console will be dedicated for the TSSO address space.
Note that at least :hp1.nn:ehp1. subsystem consoles
must have been generated in the
MVS IOGEN prior to starting TSSO.
:h2.PROMPT Parameter
PROMPT defines whether or not the operator will be prompted
for additional TSSO parameters at start-up time.
The syntax is
:xmp.
PROMPT={Y/N}
:exmp.
If PROMPT=Y is specified, TSSO will enter
prompt mode after processing all the parameters in PARMLIB and allow
the MVS operator to enter or override parameters
(except security-related parameters).
For example,
if you want a different AOF table used each day,
you would want to be prompted so that you can enter
the TABLE parameter.
:note.
Prompt mode may also be specified at start-up time.
See the next section for more information.
:h2.RACFID Parameter
RACFID defines a default RACF ID for the TSSO subsystem,
allowing TSSO to access data sets
with the authority of that RACF ID.  This implies that
RACF commands can be entered from the MVS console through the use
of TSSO.
If the installation has not installed the RACF
program product, this parameter must be omitted.
The syntax is
:xmp.
RACFID=:hp1.RACF-id:ehp1.
:exmp.
where
:hp1.
RACF-id
:ehp1.
is the RACF identifier that TSSO will assume.
This parameter has no default. If it is not specified,
TSSO will execute with the default RACF authority.
:p.
RACFID is dependent on the SECLEVEL parameter.
If SECLEVEL=MINIMAL,
then the RACFID authority level applies to
any TSO command issued through TSSO.
If SECLEVEL=MEDIAL or MAXIMAL,
then the RACFID authority level applies to
CONSOLE~0 and any TSO command issued from
a subsystem console through OSCMD.
Note that TSSO requires that subsystem consoles
issuing commands have at least "SYSTEM" authority.
:dl tsize=11.
:dt.CAUTION:
:dd.
TSSO does not require a password to acquire this RACF
authority, and care must be taken to ensure that use of this
parameter does not violate installation security standards.
:edl.
:p.
A recent small programming enhancement (SPE) to the JES2 subsystem has e
TSSO's ability to control production batch jobs that may use RACF-protec
data sets.  JES2 will now propagate the RACF ID and group from
the current address
space for jobs submitted through the internal reader.
TSSO can submit jobs
using the TSO SUBMIT command, and those jobs can acquire the authority o
the TSSO address space.
:h2.SECLEVEL Parameter
SECLEVEL defines the security level of the installation.
The syntax is
:xmp.
SECLEVEL={MINIMAL/MEDIAL/MAXIMAL}
:exmp.
.in 5
:dl tsize=15 termhi=0.
:dt.MINIMAL
:dd.
Default for RACF and TOP SECRET.
The RACFID parameter is used to determine
TSSO's authority level.
Therefore, all TSO commands will execute with
TSSO's authority,
regardless of the console's authority level.
:dt.MEDIAL
:dd.
This level requires all consoles using TSSO
to log on
:fn.Using the #.LOGON command,
which will assign each console a separate RACFID parameter.
:efn.
using the appropriate security system
(RACF, TOP SECRET, or ACF2).
All data set access checking for TSSO commands and CLISTs
is based on the console's logon ID authority.
Note that this does not include TSSO control commands,
which follow a different authorization mechanism.
:dt.MAXIMAL
:dd.
This level is extremely restrictive.
Once TSSO is initialized,
all consoles must log on using
the appropriate security system.
:hp2.
Any console that does not log on is locked out
of all MVS commands.
:ehp2.
:edl.
.in 0
:h2.SECSYS Parameter
SECSYS defines the security system used
by the installation.
The syntax is
:xmp.
SECSYS={RACF/ACF2/TOPS}
:exmp.
The default is RACF.
:h2.SUBSYS Parameter
SUBSYS
defines subsystem interface exits and the routines
that will handle the exit functions.
The syntax is
:xmp.
SUBSYS :hp1.nn:ehp1.=:hp1.module-name:ehp1.
:exmp.
where :hp1.nn:ehp1. is the subsystem interface function code
and :hp1.module-name:ehp1. is the name of the
routine that will handle the function.
You may specify as many SUBSYS parameters as desired.
However, if there are multiple entries
with the same function code,
only the last appearance of the code will be honored.
:p.
By default,
TSSO includes two SUBSYS entries,
one for function code 9 which intercepts WTO messages
(the AOF facility)
and one for function code 10 which intercepts
operator commands
(the OPF facility).
Therefore, be careful that you do not enter
a SUBSYS parameter with code 9 or 10;
otherwise, your entries will override the defaults
and disable the AOF and OPF facilities.
:h2.System Recognition Character (SRC) Parameter
SRC defines the character that
TSSO will use to recognize TSSO operator commands.  For example, if
this character is "#", TSSO will intercept and process all
operator commands starting with a "#".
The syntax is
:xmp.
SRC=:hp1.char:ehp1.
:exmp.
where
:hp1.
char
:ehp1.
is the character that TSSO will use.
The default character is a "#".
:h2.TABLE Parameter
TABLE defines the name of the TSSO Automated Operations
Facility (AOF) table.
The AOF table contains information used to intercept and responding
to operating system messages.
(Information describing how to create this table is specified later in
this document.)
There is no default.  If this parameter is
not specified, the AOF is deactivated.  Note that this table can be
reloaded (and AOF activated) at any time with
the ".RELOAD" TSSO operator command described later.
The syntax is
:xmp.
TABLE=:hp1.table-name:ehp1.
:exmp.
where
:hp1.
table-name
:ehp1.
is the load module name that contains a TSSO AOF table.
:h2.TIMEOUT Parameter
TIMEOUT defines the interval after which
TSSO will log off an inactive console.
The syntax is
:xmp.
TIMEOUT=:hp1.nn:ehp1.
:exmp.
where :hp1.nn:ehp1. is the maximum number of minutes
of inactivity.
:h2.* (Comments) Parameter
The "*" parameter allows an installation to place comments in the
TSSO initialization deck.  The line will be ignored by TSSO.
The syntax is
:xmp.
* :hp1.any-text:ehp1.
:exmp.
where
:hp1.
any-text
:ehp1.
is any descriptive comments the installation may want to include in
the initialization deck.
:h2.END Parameter
END marks the end of TSSO parameter input. The syntax
is
:xmp.
END
:exmp.
with no operands.  If prompt mode was enabled, the MVS
console operator will be prompted for additional
TSSO parameters after the END parameter is processed.
:h1.TSSO START COMMAND OPTIONS
Start procedures under release 4.3 have changed significantly.
By default, TSSO will use the primary subsystem
(JES2 or JES3:fnref refid=jes3.)
for services required by commands such as PRINTOFF and SUBMIT.
Note that, except for emergencies,
:hp2.you can no longer start TSSO if it is already up.:ehp2.
:p.
The TSSO start command has the following syntax:
:xmp.
S TSSO{,PARM='{*}{:hp1.parm-member:ehp1.}{PROMPT}'}{,SUB=MSTR}
:exmp.
:dl tsize='1.75i' termhi=0.
:dt.
PARM='*'
:dd.
Allows you to specify TSSO parameters
:fn.
Except the security-related parameters
SECSYS, SECLEVEL, and RACFID.
:efn.
without
entering them previously into SYS1.PARMLIB.  This can be
useful in emergency situations;
for example, if you need to enter a parameter on a one-time basis,
or if you are locked out of SYS1.PARMLIB
and need to enter a different parameter.
:dt.
PARM='parm-member'
:dd.
Directs TSSO to use
an alternate TSSO parameter deck in SYS1.PARMLIB
for parameters.
Default is TSSOPARM.
:dt.
PARM='PROMPT'
:dd.
Directs TSSO to prompt the MVS console operator for the name of
a member in SYS1.PARMLIB to be used for parameters.
After processing the named member, TSSO will also
prompt the MVS console operator
for additional parameters,
even if the parameter deck specifies PROMPT=N.
:dt.SUB=MSTR
:dd.Initializes TSSO without the primary subsystem.
This should be used only if JES won't come up.
:edl.
:p.
If an emergency restart is necessary,
the start command has the form
:xmp.
S TSSO,PARM='/{:hp1.options:ehp1.}'
:exmp.
where :hp1.options:ehp1. are any of the PARM options
listed above.
The "/" :hp2.must:ehp2. be specified as the first operand.
When a force restart occurs,
the inactive TSSO address space
may be cancelled.
Note that the inactive TSSO does not
relinquish its subsystem consoles,
and, therefore, it is not advisable to
force start TSSO unless absolutely necessary.
:fn id=jes3.
Although TSSO has not been tested extensively using the JES3 product,
the interfaces
should be the same because TSSO uses standard subsystem interface calls.
:efn.
:h1.THE TSSO OPERATOR PRODUCTIVITY FACILITY
:h2.Overview
The TSSO Operator Productivity Facility (OPF) is a
powerful tool which,
in conjunction with the Automated Operations Facility,
can automate many procedures that currently must
be done manually.
OPF extends the power of TSO to the MVS operator's console by
allowing TSO commands and CLISTS to be executed
from an MVS console, with the response going back to the
invoking console.
This includes all TSO functions
which use standard interfaces (with the exceptions noted below)
and control
functions unique to the TSSO environment that alter
TSSO options and display TSSO information.
:p.
OPF also allows TSO users to issue MVS commands
and get responses returned to the terminal or
to CLIST variables.
TSO users are usually restricted to INFO console authority.
.pf
(See :hdref refid=cmdauth..)
.bf text
:h2.TSO Commands Under TSSO
Most TSO commands may be run under control of the TSSO subsystem. The
requirements for such commands are as follows:
:ol.
:li.
The command must use standard TSO interfaces (namely, GETLINE and
PUTLINE) to perform I/O.  The command should not require
input of any kind other than normal TSO command parameters.
:li.
:hp2.The command should
not attempt to use full screen processing.
:ehp2.
A command that issues the STFSMODE FULLSCRN=YES macro in
ACF/VTAM environments can hang the TSSO subsystem, forcing
it to be cancelled.
:li.
The command should be
:hp3.
tested under batch TSO
:ehp3.
before running it under TSSO, since TSO assumes that TSSO-initiated comm
are running in
:hp3.
background
:ehp3.
mode.
:eol.
:h2.TSSO Control Commands
TSSO supports a number of commands that are not directed to the TMP
for execution.  These commands are handled directly by TSSO, and
are used to alter or query TSSO processing options.
.pf
See :hdref refid=cntlcmd. for more information.
.bf text
:h2.TSO Commands Distributed with TSSO
A number of TSO commands that are designed to run with the TSSO subsyste
are distributed with the base code.
TSO commands used primarily from CLISTs
include the "OS family" and the REPLY command.
These are designed to provide services such as
communicating with the MVS operator and
issuing messages to the MVS console,
communicating with the MVS command subsystem,
and communicating with programs that have issued WTORs.
Applications of these commands are described below.
:figref refid=cmdresp. summarizes
the behavior of OSCMD with the CMDRESP variable
in different environments.
:figref refid=exjobs. through :figref refid=exask. illustrate
the OS family
in some useful CLISTs,
which can be found in data set TSSO.VERS43.ASM.
:p.
Other commands are provided as auxiliary TSO command processors.
These include the CACHE command for controlling
3880-21 and 3880-23 cache devices, the LINKLIST command for
displaying the system LNKLST concatenation, and the VOLSER and VALLOC
commands for displaying UCB information for DASD devices.
Also, the CPCMD command allows an MVS console
operator running in a virtual machine under VM/SP, VM/SP HPO or the VM/X
systems facility to issue CP commands and get the response back to the
console invoking the command.
:p.
A complete description of TSO commands may be
.pf
found in :hdref refid=cmdref..
.bf text
:h3.The OSCMD Command
OSCMD allows you to issue any MVS command
(JES2, VTAM, etc.).
OSCMD is most useful when issued from a CLIST,
where the response is returned to CLIST variables.
The CLIST can be designed to manipulate
these variables to produce readable
responses to the user.
For example,
the JES command $DN
queries the status of all jobs on the system.
The output from $DN could be filtered
so that the information will be printed
only for certain job names (:figref refid=exjobs.).
:p.
The syntax of OSCMD is
:xmp.
OSCMD~:hp1.mvs-cmd:ehp1.
:exmp.
where :hp1.mvs-cmd:ehp1. is any MVS command.
Through the CLIST variable CMDRESP,
OSCMD can determine the destination of a command response
based on its origin.
.tp .25i 2.5i
.sp
.bx 0 2.25i 5i
.fo off
^If OSCMD was issued from:^then the response will be returned to:
.bx
.sp
^a TSO address space^a TSO terminal
.sp
^a TSSO-initiated CLIST^the MVS console
.sp
^a TSO-initiated CLIST^CLIST variables
.sp
.bx off
.sp
.fo on
.pf
Input and output variables are described in :hdref refid=cmdref..
:fig id=cmdresp frame=box.
.tp 1.5i 4.75i
.sp
:hp2.ENVIRONMENT^LEGAL VALUES FOR CMDRESP^AUTHORITY CHECKING:ehp2.
.sp
TSSO CLIST^&@BU.~CLIST^Based on invoking
^&@BU.~NOWHERE^console
^&@BU.~If not defined, value is assumed^
^~~to be CLIST or NOWHERE, depending^
^~~on how MAXCMDOUT is defined^
.sp
TSO CLIST^&@BU.~TERM^Based on OSCMDATH
^&@BU.~CLIST^user exit
^&@BU.~NOWHERE^
^&@BU.If not defined, OSCMD assumes^
^~~NOWHERE^
.sp
TSO terminal^&@BU.~TERM^Based on OSCMDATH
^^user exit
:figcap.Behavior of CMDRESP in Various Environments
:efig.
.bf text
:h4 id=cmdauth.Authority Checking with OSCMD
Because OSCMD allows a TSO user to issue any MVS command,
strict security must be enforced to prevent
unauthorized users from issuing
dangerous system commands.
When issued from a TSSO-initiated CLIST,
OSCMD checks the authority of the invoking console
and only permits commands of that level.
When issued by a TSO user,
the OSCMDATH user exit checks the installation authority of
the user's ID.
By default, all TSO users have INFO-only authority
as defined in
the MVS system operations manual.
Other authority levels
(system, I/O, master)
can be defined through the OSCMDATH user exit.
This exit allows the installation to code a routine
to determine the MVS command group level for a TSO user.
Full authority can be granted on a per-user basis.
:fn.
"Authorized users" are
those with X'C0'
in the PSCBATR2 field of the User Attributes Data Set.
This can be set through the USERDATA operand
of the CHANGE subcommand of ACCOUNT.
:efn.
:h3.The OSWTO and OSWTOH Commands
OSWTO and OSWTOH allow you
to write messages to the operator console.
OSWTOH highlights the message.
These commands can be issued only from a
TSSO-initiated CLIST,
since the :hp2.send:ehp2. command allows
you to send messages to the operator under TSO.
:p.
The syntax of the commands is
:xmp.
OSWTO :hp1.message:ehp1.
OSWTOH :hp1.message:ehp1.
:exmp.
where :hp1.message:ehp1. is the text of the message issued.
:figref refid=exjobs. through :figref refid=exstvt. illustrate
these commands.
:h3.The OSASK Command
OSASK allows you to ask the operator
a question and get a response.
If it is issued from a TSO command line,
the response goes to the user's terminal.
However, like OSCMD,
OSASK is most useful when issued from a CLIST,
where the response is returned to CLIST variables
which can then be manipulated.
So that TSSO is not delayed too long
for an operator reply,
the maximum wait time is 60 seconds,
after which the default response is "NOREPLY".
:p.
The syntax of OSASK is
:xmp.
OSASK :hp1.question:ehp1.
:exmp.
.pf
Input and output variables are described in :hdref refid=cmdref..
.bf text
:figref refid=exask. illustrates
OSASK with an interactive help procedure.
:h3.The OSPAUSE Command
OSPAUSE is used to delay CLIST execution
for a specified number of seconds.
This is useful if the CLIST
any time the CLIST must wait for an event.
:figref refid=exstvt. shows an example of a CLIST
that initiates a started task and
must wait for it to initialize.
:h3 id=oswait.The OSWAIT Command
OSWAIT directs TSSO to wait for a particular system
message or a timeout limit to occur before proceeding.
These messages are defined in the AOF table.
OSWAIT is intended to be issued from a CLIST.
:p.
OSWAIT provides many automation opportunities
that were (in previous versions of TSSO)
too cumbersome to develop.
OSWAIT does not need to run from the TSSO address space.
In theory, an installation may have many OSWAIT events
outstanding at any one time
in different TSO or batch address spaces.
For example, a simple job scheduler can be coded
as a CLIST using the OSWAIT and OSCMD facilities.
The CLIST can then be run under control of a
batch TMP in a separate address space.
:p.
The syntax of OSWAIT is
:xmp.
OSWAIT ENTRY(:hp1.entry-id:ehp1.) TIMEOUT(:hp1.nnnnn:ehp1.)
:exmp.
where :hp1.entry-id:ehp1. is the 1- to 8-character identifier
of the AOF table entry;
and :hp1.nnnnn:ehp1. is the number of second to wait before
timeout, maximum 86400 seconds.
For example,
:figref refid=oswait. shows
a CLIST that will start a job,
wait for the job to complete, and purge the job.
:fig id=oswait frame=box.
.sp
  PROC 0
  /**********************************************************/
  /*  This clist will start a job, wait for its completion, */
  /*  and purge the job.                                    */
  /**********************************************************/

  OSCMD S MYJOB
  OSWAIT ENTRY(MYJOBEND)    TIMEOUT(60)
  OSWTO MYJOB HAS ENDED ...
  OSCMD $P'MYJOB'
  EXIT
.sp 3
The CLIST above used the AOF table entry
.sp
~~~~~MYJOBEND TABENTRY MSG=IEF404I,ACTION=POST,TEST=((W,2,5,'MYJOB','~')
.sp
:figcap.Sample CLIST for OSWAIT.
:efig.
:p.
.pf
See :hdref refid=cmdref. for more information on OSWAIT.
.bf text
:fig id=exjobs frame=box.
   PROC 1 JNAME
  /*************************************************************/
  /* THIS CLIST WILL DISPLAY ALL JOBS THAT START WITH A GIVEN  */
  /* CHARACTER STRING. THE STRING IS PASSED TO THE CLIST AS A  */
  /* PARAMETER. THE CLIST WILL ISSUE A OSCMD $DN, AND SCAN THE */
  /* OUTPUT FOR JOBS THAT START WITH THE GIVEN STRING.         */
  /*************************************************************/

  SET MAXCMDOUT = 200
  /*************************************************************/
  /* WE WISH TO TRAP AS MANY LINES OF OUTPUT AS JES WOULD CARE */
  /* TO PROVIDE, THEREFORE, SET MAXCMDOUT TO THE MAX - 200     */
  /*************************************************************/

  SET CMDWAIT = 1
  /*************************************************************/
  /* THE JES COMMAND SHOULD ONLY TAKE 1 SECOND OR LESS, SO     */
  /* SET THE CMDWAIT VARIABLE TO 1.                            */
  /*************************************************************/

  OSCMD $DN
  /*************************************************************/
  /* ISSUE THE $DN JES COMMAND. THIS WILL POPULATE CLIST VARS  */
  /* WITH THE OUTPUT FROM THIS COMMAND.                        */
  /*************************************************************/

  /*************************************************************/
  /* SINCE THE OSCMD COMMAND ALWAYS RETURNS AN ECHO OF THE     */
  /* COMMAND AS THE FIRST LINE, START WITH THE SECOND LINE.    */
  /*************************************************************/
  SET I = 2
  SET COUNT = 0

:figcap.CLIST EXJOBS
:figdesc.(Continued on next page)
:efig.
.kp on
.bx left 6.5i
.bf figfont
  /*************************************************************/
  /* WE NEED TO LOOP BETWEEN THE SECOND LINE, AND THE "LAST"   */
  /* LINE, CONVENIENTLY STORED IN &CMDOUT VARIABLE.            */
  /*************************************************************/
  DO WHILE (&I <= &CMDOUT - 1)
  /*************************************************************/
  /* NOTE THAT THE $DN RESPONSE INCLUDES THE SPOOL UTILIZATION */
  /* AS THE LAST LINE. WE WILL IGNORE IT.                      */
  /*************************************************************/

  SET LJNAME = &LENGTH(&JNAME)

  /*************************************************************/
  /* THE JOBNAME IS RETURNED IN THE SECOND WORD OF EACH LINE.  */
  /*************************************************************/
  SET JESJOB = &&CMDOUT&I.W2

  IF &SUBSTR(1:&LJNAME,&JESJOB) = &JNAME THEN +
  DO
  /*************************************************************/
  /* WE HAVE FOUND A JOBNAME THAT STARTS WITH THE JOB. WE WILL */
  /* DISPLAY THE ENTIRE LINE.                                  */
  /*************************************************************/
           SET OUT = &STR(&&CMDOUT&I)
           WRITE &STR(&OUT)
           SET COUNT = &COUNT + 1
  END

  SET I = &I + 1
  END

  WRITE &COUNT JOBS FOUND.
  EXIT CODE(0)
.sp 2
.pf
.bf figcap
~~Figure 3, cont'd.  CLIST EXJOBS
.pf
.bx off
.kp off
:fig id=exckspl frame=box.
.sp
  PROC 0
  /***********************************************************/
  /* THIS CLIST WILL ISSUE A JES2 COMMAND TO DISPLAY TO      */
  /* SPOOL UTILIZATION. IF THE SPOOL UTILIZATION IS          */
  /* ABOVE 80%, THE CLIST WILL ISSUE A HILIGHTED MESSAGE     */
  /* TO THE OPERATOR. OTHERWISE, IT WILL ISSUE AN ORDINARY   */
  /* MESSAGE INDICATING HOW BUSY THE SPOOL IS. IT UTILIZES   */
  /* THE COMMAND TRAPPING FACILITIES IN TSSO 4.3             */
  /*                                                         */
  /***********************************************************/

  /*************************************************************/
  /* THE FIRST STEP IS THE SETTING OF MAXCMDOUT. SINCE THE     */
  /* EXPECTED COMMAND RESPONSE IS 3 LINES, WE SET MAXCMDOUT = 3*/
  /*************************************************************/
  SET MAXCMDOUT = 3

  /*************************************************************/
  /* NEXT, WE DECIDE HOW LONG THE CLIST SHOULD WAIT FOR THE    */
  /* COMMAND. 1 SECOND IS PLENTY FOR THIS JES COMMAND.         */
  /*************************************************************/
  SET CMDWAIT = 1

  /*************************************************************/
  /* NOW THAT THE TWO INPUT VARIABLES ARE SET UP, WE WILL      */
  /* ISSUE THE OSCMD COMMAND. THE RESPONSE WILL BE PLACED IN   */
  /* CLIST VARIABLES.                                          */
  /*************************************************************/
           OSCMD $DSPOOL

  /*************************************************************/
  /* THE EXPECTED COMMAND RESPONSE LOOKS LIKE THIS.            */
  /* $DSPOOL                                                   */
  /* $HASP646 XX PERCENT SPOOL UTILIZATION.                    */
  /*                                                           */
  /* NOTE THAT LINE1 IS ALWAYS AN ECHO OF THE ORIGINAL COMMAND */
  /*************************************************************/
.sp
:figcap.CLIST EXCKSPL
:figdesc.(Continued on next page)
:efig.
.pa
.kp on
.bx left 6.5i
.fo off
.bf figfont
.sp
  /*************************************************************/
  /* IF WE DO NOT GET BACK AT LEAST 2 LINES OF RESPONSE, THEN  */
  /* AN ERROR HAS OCCURRED. WRITE A MESSAGE TO THE OPERATOR    */
  /* AND TERMINATE.                                            */
  /*************************************************************/
           IF &CMDOUT < 2 THEN +
           DO
             OSWTOH PROBLEM WITH THE CHKSPL COMMAND - CONTACT SUPPORT
             EXIT CODE(12)
           END

  /*************************************************************/
  /* ASSUMING EVERYTHING WENT OK WITH THE COMMAND, THE RESPONSE*/
  /* IS RETURNED IN THE SECOND WORD OF THE SECOND LINE OF THE  */
  /* MESSAGE. TSSO HAS ALREADY PARSED THE MESSAGE. WE PICK UP  */
  /* THE UTILIZATION.                                          */
  /*                                                           */
  /*************************************************************/
           SET UTIL = &CMDOUT2W2


  /*************************************************************/
  /* NOW, WE LOOK AT THE SPOOL UTILIZATION, AND DETERMINE IF   */
  /* IT IS GREATER THE 80%. IF SO, SEND A HILIGHTED MESSAGE.   */
  /*                                                           */
  /*************************************************************/
           IF &UTIL > 80 THEN +
           DO
              OSWTOH SPOOL UTILIZATION IS &UTIL - CONTACT JES2 SUPPORT
           END
           ELSE +
           DO
              OSWTO  SPOOL UTILIZATION IS &UTIL PERCENT.
           END
.sp 2
.pf
.bf figcap
~~Figure 4, cont'd.  CLIST EXCKSPL
.pf
.bx off
.kp off
:fig id=exstvt frame=box.
.sp
            PROC 0
  /*************************************************************/
  /* THIS CLIST WILL START THE ADDRESS SPACES RELATING TO      */
  /* VTAM. THESE INCLUDE NCCF, VPS AND OMEGAMON. THIS CLIST    */
  /* IS NORMALLY KICKED OFF AT IPL TIME BY AN AOF TABLE ENTRY  */
  /* SUCH AS THE FOLLOWING                                     */
  /*                                                           */
  /*        TABENTRY MSG=IST020I,ACTION=OSCMD,TEXT=#STRTVTAM   */
  /*                                                           */
  /* THE IST020I MESSAGE IS FOR VTAM INITIALIZATION COMPLETED. */
  /*                                                           */
  /*                                                           */
  /*************************************************************/
  /*************************************************************/
  /* NOTE THAT WE ARE NOT INTERESTED IN GETTING THE RESPONSE   */
  /* BACK TO ANY OF THESE MVS COMMANDS. THEREFORE, WE DO NOT   */
  /* SET THE MAXCMDOUT OR CMDWAIT VARIABLES.                   */
  /*************************************************************/
            OSCMD $SLOGON1       /* START JES/VTAM CONNECT */

            OSCMD START TSO      /* START TSO              */

            OSCMD START NCCF     /* START NCCF             */

            OSCMD S OMVTAM,PREFIX='OMEGA.V652',APPL=OMR4


            OSCMD START GDDMPRT           /* START ADMPRT ADDRESS SPC */

            OSCMD START VPS               /* AND START VPS AS WELL    */
            OSPAUSE 5                     /* DELAY 5 SECONDS          */
            OSCMD VARY NET,ACT,ID=VPS     /* AND VARY IN TO VTAM      */
            WRITE
            OSWTOH IPL0004I NETWORKING ADDRESS SPACES HAVE BEEN
            OSWTOH IPL0004I (CONT) STARTED.
.sp 2
:figcap.CLIST EXSTVTAM
:efig.
:fig id=exask frame=box.
.sp
         PROC 0
         /****************************************************/
         /* THIS CLIST WILL PROVIDE AN EXAMPLE OF THE OSASK  */
         /* FACILITY OF TSSO.                                */
         /****************************************************/

         /* FIRST, FIND OUT IF THE OPERATOR IS READY TO PROCEED */
         /* SET A TIME LIMIT OF 30 SECONDS...                   */
         SET REPLYWAIT = 30

         STARTAGN: +
         OSASK ARE YOU READY TO PROCEED

         IF &REPLY = NOREPLY THEN GOTO TIMEDOUT
         IF &REPLY = NO THEN GOTO ENDPROG
         IF &REPLY = YES THEN GOTO CONFUSED

         OSASK GREAT ! WHAT TASK(S) ARE YOU TRYING TO PERFORM ?

         /* UP TO 6 ITEMS MAY BE ENTERED ON THE RESPONSE LINE. THE */
         /* OSASK COMMAND PARSES THE OPERATOR RESPONSE INTO CLIST  */
         /* VARIABLES. WE WILL LOOP THROUGH, SUPPLYING THE OPERATOR*/
         /* WITH THE NEEDED ANSWERS.                               */

         IF &REPLY = NOREPLY THEN GOTO TIMEDOUT
         SET COUNT = &REPLYW

         SET I = 1
         DO WHILE (&I <= &COUNT)

           SET VAR = &&REPLYW&I       /* GET THE I'TH WORD */

           IF &VAR = IPL THEN LIST 'SYS1.HELPOPER(IPL)'
           ELSE IF &VAR = SHUTDOWN THEN LIST 'SYS1.HELPOPER(SHUTDOWN)'
           ELSE IF &VAR = STARTNET THEN LIST 'SYS1.HELPOPER(STARTNET)'
           /* MANY OTHER ENTRIES MAY BE PLACED HERE ...    */
:figcap.CLIST EXASK
:figdesc.(Continued on next page)
:efig.
.kp on
.bx left 6.5i
.bf figfont
.sp
           ELSE OSWTO   THERE IS NOT HELP FOR "&VAR"

           SET I = &I + 1
         END
         GOTO  ENDPROG
.sp
         CONFUSED: +
           OSWTOH ANSWER YES OR NO...
           GOTO STARTAGN

         TIMEDOUT: +
           OSWTO HELP FACILITY TIMING OUT - REINVOKE WHEN YOU HAVE MORE
           OSWTO TIME.
           GOTO  ENDPROG

         ENDPROG: +
           OSWTO GOODBYE.
           EXIT
.sp
.pf
.bf figcap
~~Figure 6, cont'd.  CLIST EXASK
.pf
.bx off
.kp off
.fo on
:h2.Using the WRITE Statement in TSSO CLISTs
In previous releases of TSSO,
operator commands and highlighted messages could only
be issued using the WRITE statement
with the *COM and *HI keywords.
These facilities still work under release 4.3,
and CLISTs written with them can be used unaltered.
However, note that the difference between these facilities
and the commands OSCMD, OSWTO, OSWTOH, and OSPAUSE is that
TSSO processes *COM and *HI directives :hp3.after:ehp3.
the CLIST has completed,
whereas the TSSO commands will be executed :hp3.immediately:ehp3..
Care
must therefore be taken in designing CLISTs with *COM and *HI,
because any TSO commands in
the CLIST are executed before any MVS commands are issued by TSSO.
:p.
The *COM and *HI facilities are available only
through TSSO-initiated CLISTs.
:h3.*COM Keyword
The *COM keyword used in the WRITE statements also
enables you to issue
MVS commands.  When an output line in the SYSTSPRT output
stream (the output from the TSO command or CLIST) begins with the
keyword "*COM", TSSO will execute the remainder of that statement as an
MVS operator command.
The syntax of this extended WRITE statement is
:xmp.
WRITE *COM:hp1.nnn oscmd:ehp1.
:exmp.
.kp on
.in 5
where
:dl tsize=8 termhi=1.
:dt.
nnn
:dd.
is a delay factor directing
TSSO to delay :hp1.nnn:ehp1. seconds after processing the command.
This is
useful when operating system commands have a time dependency on each
other.
:dt.
oscmd
:dd.
is an MVS operator command to be executed.  The command could be an
MVS command, JES command, or even another TSSO command.
Note that
:hp3.the command will be executed with the authority of the console
that originally invoked the TSSO command.:ehp3.
:edl.
.kp off
.in 0
:h3.*HI Keyword
The *HI keyword allows you to write highlighted
messages on the MVS console.  The syntax is
:xmp.
WRITE *HI :hp1.message:ehp1.
:exmp.
where
:hp1.
message
:ehp1.
is the message to be highlighted on the MVS console.
.pa
:h2.Guidelines and Suggestions for Writing CLISTs
:ol.
:li.
CLISTs can
be used to write operator HELP procedures to the MVS console.
This is
demonstrated in :figref refid=ophelp..
:fig id=ophelp frame=box.
.sp
  PROC 0
  /********************************************************/
  /* This CLIST will provide HELP information to the      */
  /* operator on the current status of the NJE LINES      */
  /* between JES2 systems                                 */
  /********************************************************/
  WRITE NJE LINK BETWEEN A and B is line 12
  WRITE NJE LINK BETWEEN A and C is line 16
  WRITE NJE LINK BETWEEN B and C is line 20
  WRITE NJE LINK BETWEEN C and A is line 19
  WRITE NJE LINK BETWEEN C and B is line 24
  WRITE NJE LINK BETWEEN B and A is line 13
  WRITE
  WRITE This list is current as of January 3, 1985. For more
  WRITE assistance, contact Alan Grossman at extension 5555.
  EXIT CODE(0)
.sp
:figcap.CLIST with an Operator Help Procedure
:efig.
:li.
The REPLY command is useful in CLISTS
to automate operational procedures with products
that communicate to the operator
through the WTOR interface
(e.g., NCCF and IMS).
For example, if
numerous NCCF commands are to be executed, these can be executed in a
TSSO CLIST using the REPLY command with message ID DSI802A. See the
.pf
description of the REPLY command in :hdref refid=cmdref..
.bf text
:li.
Comments may be placed at the end of MVS commands because
MVS treats them as MVS command comments.  However, JES2 treats CLIST
comments as data and tries to use them in forming the command.  Therefor
do not place CLIST comments on JES2 commands;
place them on the lines following the command.
For example, the following
CLIST is invalid because it
would produce an invalid JES2 command.
:p.
.hr left to 6.5i
:xmp.
PROC 0
OSCMD $TEXIT6,ENABLE        /* ENABLE THE EXIT */
EXIT
:exmp.
.hr left to 6.5i
:p.
This situation is remedied in MVS/SP JES2 Release 1.3.6 and MVS/XA JES2
Release 2.1.5.
:li.
Symbolic substitution can be used in TSSO CLISTS
as shown in :figref refid=symbsub..
:li.
Since operations personnel will be using OPF, the
recommendation is to allow them to write their own CLISTS.
:li.
TSSO CLISTS are invoked in the same fashion as TSSO commands. The
normal TSO search sequence is followed. The recommendation is to
allocate a SYS1.TSSOPROC data set and allocate it to DDNAME SYSPROC
in the TSSO bringup deck. The SYSPROC data set may also be
dynamically allocated through the TSO ALLOCATE command. Lastly, the
TSO EXEC command may be used to execute TSSO CLISTS.
:li.
Use OSWTOH and WRITE~*HI with caution. Do not highlight messages
unless their importance warrants it, because your operations staff will
learn to ignore highlighted messages, and this can be harmful to your
overall system operations.
:eol.
:fig id=symbsub frame=box.
.sp
  PROC 2 UNIT VOLSER USE()
  /*****************************************/
  /* This CLIST will mount MVS volumes     */
  /* using a command in operator friendly  */
  /* syntax. Note the optional USE         */
  /* parameter.                            */
  /*****************************************/
  WRITE *COM3 VARY &UNIT,ONLINE
  IF &USE = THEN +
  DO
          WRITE *COM MOUNT &UNIT,VOL=(SL,&VOLSER)
  END
  ELSE +
  DO
          WRITE *COM MOUNT &UNIT,VOL=(SL,&VOLSER),USE=&USE
  END
  WRITE *HI MNT001I VOLUME &VOLSER NOW MOUNTED ON &UNIT
  WRITE *COM D U,,,&UNIT,1
  EXIT
.sp
:figcap.CLIST Using Symbolic Substitution
:efig.
:h1.TSSO AUTOMATED OPERATIONS FACILITY
:h2.Introduction
A high percentage of MVS commands are issued
in response to system or subsystem messages,
and these responses are predetermined by the
contents of the messages.
The TSSO Automated Operations Facility (AOF)
frees the MVS console operator from routine tasks
by automating responses to system messages.
AOF is a table-driven monitor that intercepts messages
and carries out one of four actions:
suppresses, highlights, or lowlights the message;
or issues an MVS, JES2 or subsystem command.
Because AOF does not require the services of the TSSO address space,
any number of messages can be processed simultaneously.
:p.
There are three steps required to install this facility;
briefly:
:ol.
:li.
Create the AOF table.
:li.
Assemble and link-edit the table into load module format.
:li.
Store the module in SYS1.TSSOLOAD.
:eol.
:p.
These steps are described in detail below.
:p.
Note that the table can be updated at any time.
Also, you may create multiple tables,
although only one can be active at a time.
Multiple tables may be useful so that different
sets of commands can be used at different times
(e.g., first, second and third shifts).
You can change the active table in three ways:
:ol.
:li.
By changing the TABLE= parameter in the parameter deck;
the new table will be available the next time
TSSO is brought up.
:li.
By dynamically reloading the table with the "#.RELOAD"
command; the new table will be available immediately.
:li.
By resetting the MATCHLIM parameter
of any entry in the active AOF table with the ALTAOF command;
the new MATCHLIM value will be effective immediately.
:eol.
.pa
:h2.Creating the AOF Table
There are three macros required to create the table:
TABSTART to start the table,
TABENTRY to specify actions on messages,
and TABEND to end the table.
:p.
TABSTART is always the first macro and can be
specified only once.
It takes the form
:xmp.
:hp1.loadname:ehp1. TABSTART ID=:hp1.table-id:ehp1.
:exmp.
where :hp1.loadname:ehp1. is the name of this TSSO table and
:hp1.table-id:ehp1. is an eye-catching name to identify
the table in a dump.
:hp1.table-id:ehp1. will also be displayed on the
DISPAOF and .Q~T commands.
The :hp1.loadname:ehp1. label is used as the CSECT name and
:hp1.must:ehp1. be used as the load module name.
:p.
TABEND is always the last macro,
signifying the end of the table.
TABEND must be present;
otherwise, unpredictable things may happen,
none of them pleasant.
:p.
TABENTRY macros are entered between TABSTART and TABEND.
TABENTRY macros generate entries in the AOF table
and take the form
.dc cont \
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=:hp1.action:eh
{,TEXT=':hp1.operator-cmd:ehp1.'}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{,TEXT=(:hp1.condition:ehp1.)}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{,MATCHLIM=:hp1.n:ehp1.}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{,ECHO={YES/NO/LOG}}
:exmp.
A sample AOF table, demonstrating most of the capabilities of TSSO/AOF a
all forms of the TABENTRY macro, is in the TSSO.VERS43.ASM data set
in member AOFIVP.
:h2.TABENTRY Operands
:h3.The Entry-id Operand
:hp1.Entry-id:ehp1. is a 1- to 8-character identifier
for each AOF table entry.
The ID allows you to identify entries by name rather
than position in the table
to the commands OSWAIT, DISPAOF, and ALTAOF.
:h3.The MSG Operand
MSG identifies an MVS, JES2, or subsystem message
as defined in :hp3.MVS/XA System Messages:ehp3. (GC28-1376 and -1377)
or its MVS/370 equivalent.
:hp1.msg-id:ehp1. is the first seven or eight characters of the console
:hp1.msg-id:ehp1. may also be an asterisk (*),
which will match on all console messages.
MSG=* is useful with the TEST operand described later.
:h3.The ACTION Operand
The following actions may be taken in response to the identified message
:ol.
:li.
:hp3.Suppress (i.e., do not print) the message at the console.:ehp3.
The macro takes the form
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=SUPPRESS
:exmp.
:li.
:hp3.Highlight the message at the console.:ehp3.
This is useful for highlighting important messages.
The macro takes the form
:xmp.
:hp1.entry-id:ehp1.~TABENTRY~MSG=:hp1.msg-id:ehp1.,ACTION=HILIGHT
:exmp.
:li.
:hp3.Lowlight the message at the console.:ehp3.
This reverses the intensity of MVS messages that
are automatically highlighted.
The macro takes the form
:xmp.
:hp1.entry-id:ehp1.~TABENTRY~MSG=:hp1.msg-id:ehp1.,ACTION=LOWLIGHT
:exmp.
:li.
:hp3.Reply to a Write to Operator with Reply (WTOR) message:ehp3..
The macro takes the form
.dc cont \
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=REPLY,\
TEXT=:hp1.'reply-text':ehp1.
:exmp.
where :hp1.reply-text:ehp1. is the text of the reply;
TSSO will automatically format the reply message as
R~:hp1.msg-no,reply-text.:ehp1.
Note that :hp1.msg-id:ehp1. must be a WTOR message.
:li.
:hp3.Issue an operator command
in response to a message and extract part of the message
to use in the command:ehp3..
The macro takes the form
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=OSCMD,\
TEXT=:hp1.'operator-cmd':ehp1.
:exmp.
:hp1.operator-cmd:ehp1. can be an MVS command, JES2 command,
TSSO command, or TSSO CLIST.
Rules for coding TEXT are described later.
:li.
:hp3.Print an operator command at the console
rather that execute it.:ehp3.
This allows you to test an operator command
that results from a TABENTRY before executing it.
The macro takes the form
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=OSCMDT,\
TEXT=:hp1.'operator-cmd':ehp1.
:exmp.
The rules are the same as for OSCMD above.
:li.
:hp3.Post a "waiting task" that a message occurred.:ehp3.
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=POST
:exmp.
Posting supports the OSWAIT command
.pf
(see :hdref refid=oswait.).
.bf text
.pa
:li.
:hp3.Carry out the specified action if and only if
the message meets certain conditions,:ehp3.
such as matching a particular job name.
To do this, include the TEST operand in
your TABENTRY macro as follows:
.dc cont \
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=:hp1.action:eh
TEST=(:hp1.condition:ehp1.)
~~~~~~~~~~~~~~~~~~{TEXT=':hp1.operator-cmd:ehp1.'}
:exmp.
.dc cont off
where :hp1.condition:ehp1. tests portions of the message by
substring or word.
Rules for coding the TEST operand are described later.
:note.
TEXT can only be used if ACTION=OSCMD, OSCMDT, or REPLY.
:eol.
:p.
There is no limit on the number of TABENTRY macros that may be specified
a given AOF table. Note that TSSO will process
:hp3.
all
:ehp3.
of the entries in the TSSO/AOF table for every WTO or WTOR message.
This
implies that multiple ACTION= operands may be specified for the same
:hp1.msg-id:ehp1.,
by specifying multiple TABENTRY macros.  TSSO does not stop
processing one ACTION= directive, but continues until the end of the
table.
:h3.The TEXT Operand
The OSCMD action
allows you to specify an operator command to be performed
in response to a particular message.
Optionally,
you may select one or more portions of the message
to include in the command.
:hp1.entry-id:ehp1.~This is useful for extracting a data set name,
job name, or other variable information from a message
and embedding it in the command to be executed.
The two formatting options in the TEXT parameter
allow you to extract this information by
substring or by word.
:p.
To select information by substring, use the format
.dc cont off
:xmp.
\S:hp1.nnn,yy:ehp1.\
:exmp.
where :hp1.nnn:ehp1. is the starting character position
and :hp1.yy:ehp1. is the number of characters to select.
For example,
suppose you want to record the text of /*MESSAGE cards
whenever they are encountered in the job stream.
JES2 issues a $HASP104 message, and you want to
capture characters 1 through 72 of the card.
Thus, the TABENTRY would look like this:
.dc cont \
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=$HASP104,ACTION=OSCMD,\
.dc cont off
TEXT='#RECMSG MSG(''\S001,72\'')
:exmp.
Note that :hp1.nnn:ehp1. must be left-padded with zeroes.
:p.
To select information by word, use the format
:xmp.
\W:hp1.abcdnn:ehp1.\
:exmp.
where :hp1.a, b, c,:ehp1. and :hp1.d:ehp1. define the word separator cha
and :hp1.nn:ehp1. identifies the word's position.
A word can be a maximum of 16 characters.
For example, given the message
:xmp.
IEF176I WTR 1A4 WAITING FOR WORK ...
:exmp.
you might want to purge the writer 1A4 with the command
:xmp.
PURGE 1A4
:exmp.
To do this, you want to extract the third word
from the message, which identifies the external writer name.
Thus, the TABENTRY macro would look like this:
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=IEF176I,ACTION=OSCMD,TEXT='PURGE \W
:exmp.
Note that if you do not need to define four separator characters,
you must pad the field with blanks.
Also, :hp1.nn:ehp1. must be left-padded with a zero.
:p.
Multiple "S" and "W" options can be used in one TEXT operand.
If AOF detects an error in the TEXT parameter as
a result of a S or W option,
a message is issued and processing is terminated.
:h3.The TEST Operand
The TEST operand allows you to respond selectively
to messages by "testing" the text.
For example, when payroll jobs complete,
you may want to highlight the message,
whereas you want to ignore other job completion messages.
The TEST operand allows you to match on message text
by substring or word.
:p.
To match by substring, use the format
:xmp.
(S,:hp1.nnn,yy,'literal-string':ehp1.)
:exmp.
where you want to find the character string :hp1.literal-string:ehp1.
starting in character position :hp1.nnn:ehp1.
for a length of :hp1.yy:ehp1. characters.
For example,
:hp2.(S,32,07,'PAYROLL'):ehp2.
would look for PAYROLL in character positions 32 through 38.
:p.
To match by word order, use the format
:xmp.
(W,:hp1.nn,yy,'literal-string','abcd':ehp1.)
:exmp.
where you want to find the character string
:hp1.literal-string:ehp1. as word number :hp1.nn:ehp1.
with a word length of :hp1.yy:ehp1. characters;
and :hp1.a, b, c,:ehp1. and :hp1.d:ehp1. define
the word separator characters.
For example,
:hp2.(W,03,07,'PAYROLL',',~'):ehp2.
would look for PAYROLL as the third word with seven characters
separated by blanks or commas.
:p.
Thus, the whole TABENTRY macro for our example could be either
.dc cont \
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=$HASP395,ACTION=HILITE,\
TEST=((S,32,07,'PAYROLL'))
:exmp.
or
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=$HASP395,ACTION=HILITE,\
TEST=((W,03,07,'PAYROLL',' ,'))
:exmp.
It is possible to test on all WTO or WTOR messages by
specifying MSG=*.
For example, if you want to highlight
all JES end-of-day messages,
you would test for a first word of $HASP
and a second word (i.e., job name) of ENDOFDAY.
The TABENTRY macro would look like this:
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=*,ACTION=HILIGHT,\
TEST=((W,1,5,'$HASP',' '),~~~~~~~~~~X
~~~~~~~~~~~~~~~~~~(W,2,7,'ENDOFDAY'))
:exmp.
.dc cont off
:h4.Notes on the TEST Operand
:ol.
:li.
:hp2.
Each TEST condition, as well as the
entire TEST parameter list, must be enclosed in parentheses.
:ehp2.
:li.
There are multiple way to do the same test,
as shown in the examples above.
However, it is generally easier to match on words
rather than substrings.
:li.
"Logical and" and "logical or" test conditions
can be constructed with the TEST operand.
:ol.
:li.
To construct a "logical and", specify all the conditions
to be met in one TEST operand:
:xmp.
TEST=((:hp1.condition1),(condition2),(condition3:ehp1.))
:exmp.
:li.
To construct a "logical or", specify multiple
TABENTRY macros with the same MSG, ACTION, and TEXT operands
but with different TEST operands:
:xmp.
TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=:hp1.action:ehp1.,TEST=((condition
.sp
TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=:hp1.action:ehp1.,TEST=((condition
.sp
TABENTRY MSG=:hp1.msg-id:ehp1.,ACTION=:hp1.action:ehp1.,TEST=((condition
:exmp.
:eol.
:li.
When using the TEST operand,
TABENTRY macros can be quite lengthy.
To continue a macro on the next line,
enter an "X" in column 72.
Since the TABENTRY macro follows the conventions for the IBM assembler
language, the next line in a continuation must start in column 16. Note
that blank characters are not permitted, except if they are inside
quotation marks.
:li.
The first word in the message is usually the message ID.
The first column position is the first character in the message ID.
:eol.
:h3.The MATCHLIM Operand
MATCHLIM specifies the maximum number
of times a particular action can be executed.
When the MATCHLIM value is exceeded,
the AOF table entry is ignored.
Note that the MATCHLIM value may be reset with the
ALTOF command.
:p.
For example,
if VTAM crashes, you may want TSSO to issue a restart
command immediately but you also
want to limit the number of restarts
in the event VTAM has a serious problem
that is not solved by a restart.
The following entry will restart VTAM up to three
times after it goes inactive.
.dc cont \
:xmp.
:hp1.entry-id:ehp1.~TABENTRY MSG=1ST002I,ACTION=OSCMD,\
TEXT='START NETWORK',       X
~~~~~~~~~~~~~~~~~~~ECHO=YES,MATCHLIM=3
:exmp.
.dc cont off
:h3.The ECHO Operand
Specifying ECHO=YES will echo the command or reply
of the TEXT operand to the console
before the action is executed.
Specifying ECHO=LOG will echo the command or reply
in the system log.
This provides a level of TSSO accountability.
The default is ECHO=YES.
:h2.Assembling and Link-Editing the Table
Release 4.3 provides a sample CLIST for assembling
and link-editing the TSSO AOF table.
The CLIST makes the job of placing a new AOF table
in production less cumbersome.
You will probably need to modify ASMTAB for your installation.
Its syntax is
:xmp.
ASMTAB :hp1.table-name:ehp1. {RELOAD}
:exmp.
The CLIST can assemble a moderately sized table,
link-edit the result,
and copy the resulting load module into
SYS1.TSSOLOAD in about 10 seconds.
The RELOAD parameter will issue the TSSO~#.RELOAD command
upon successful assembly and link-edit.
:p.
Alternately, you can
submit a batch job similar to
the sample in the TSSO.VERS43.ASM data set, member ASMTABLE.
You may tailor a copy of this data set to
your specifications as follows:
:ol.
:li.
Include the appropriate installation-dependent
information on the JOB card.
:li.
Change the SYSIN DD card to
point to your AOF table.
:li.
Change the load library name in the
LKED.SYSLMOD step to one of your choice (e.g., TSSO.VERS43.LOAD).
:li.
Change the NAME statement in the linkage editor control cards to match
the label on the TABSTART macro in your AOF table.
:eol.
:p.
Note that the Assembler parameters RENT and NOALIGN
:hp3.must:ehp3. be present.
:p.
A return code of 0 indicates that the assembly was successful.
:dl tsize=13.
:dt.WARNING:
:dd.
:hp2.
Under no circumstances attempt to load
a table if either the assembly or link return codes
are non-zero.
:ehp2.
:edl.
:h2.Storing the Module
When the table assembly is successful,
copy the load module from TSSO.VERS43.LOAD (or the appropriate
data set)
into the SYS1.TSSOLOAD data set.
To activate the new AOF table, use the procedures as described previousl
in this document.
:h1 id=nccf.TSSO NETWORK COMMUNICATION CONTROL FACILITY INTERFACE
The Network Communication Control Facility (NCCF)
is an IBM program product that provides network control
in ACF/VTAM or ACF/TCAM environments.
Through the addition of an OSCMD command processor,
NCCF allows a network operator to issue
MVS, JES2, or subsystem commands
and to retrieve responses at the NCCF terminal.
The NCCF version of OSCMD is a completely separate entity
from the TSO version.
The command installs directly into the NCCF load library,
or a concatenated data set,
and is defined to NCCF in the DSICMD member of
the NCCF parameter data set.
:h2.Notes on the NCCF Interface
:ul.
:li.
The NCCF and TSO versions of OSCMD share the same pool
of subsystem consoles.
When defining the NUMCONS parameter
(see :hdref refid=numcons.)
it is important to consider the number of
simultaneous NCCF users that will be using TSSO facilities.
:li.
Although OSCMD runs with APF authority,
NCCF :hp1.does not:ehp1. require APF authorization with
this facility.
TSSO grants APF authorization to the NCCF version of
OSCMD through MVS cross memory services.
The operator command
.bf xmpfont
#.Q~XMEM
.pf
monitors the cross memory service environment.
A debug option displays a message when the NCCF version
of OSCMD has called the TSSO cross memory services routine.
:li.
TSSO assumes that all NCCF users are authorized
to issue MVS master console commands.
The NCFOSATH user exit is provided
for coding a routine to alter the default.
The exit is passed the NCCF user identifier.
:li.
The TSSO/NCCF OSCMD facility fully supports
the NCCF ROUTE command.
This allows remote operators to
route MVS, JES2, or subsystem commands
to remote systems and to retrieve the responses.
This facility makes it possible for an operator to
control (or at least monitor)
many MVS hosts from one NCCF console.
:eul.
:h1.RECOVERY PROCEDURES
TSSO operates as a proper subsystem under MVS. Because of this, it can r
without support of a Job Entry Subsystem or communications subsystem.
Therefore,
TSSO will initialize even if JES or VTAM will not.
Through the use of several command processors,
TSSO provides facilities for repairing
critical MVS files or load modules in the event a subsystem
does not initialize.
:p.
The
:hp2.
EF
:ehp2.
command allows the MVS console operator to perform TSO edit commands
on the file allocated to DDNAME "EDITFILE".  This DDNAME could have
been pre-allocated through the ALLOCATE command.  The syntax of the
EF command is
:xmp.
EF (;:hp1.cmd1;cmd2;cmd3...;cmdn:ehp1.)
:exmp.
where
:hp1.
cmd1 ...cmdn
:ehp1.
are TSO EDIT commands.
:p.
The
:hp2.
PDS
:ehp2.
command
:fn.
A public domain TSO facility rewritten by Bruce Leland
from Cambridge Systems.
:efn.
allows you
to rename, delete or otherwise manipulate members of
a partitioned
data set.
The PDS command offers a wide range of facilities and can be
used to recover from a variety of subsystem problems.
You are encouraged to obtain a copy of the
PDS command (Version 7.3)
from the Connecticut Bank and Trust (CBT) mods tape.
:p.
Lastly, you can also use the standard TSO facilities, such as the
ALLOCATE command, to correct JCL or other initialization errors in
major subsystems.  The full range of TSO commands are available to
assist in problem resolution.
:appendix.
:h1 id=cmdref.TSSO Command Reference
This appendix describes the TSO command processors
that are distributed with TSSO.  Unless otherwise noted, these
command processors can be issued by TSO users as well as the TSSO
subsystem.
The commands are documented one-to-a-page for easy insertion into
existing operator procedure books.
.rh on
.sx c /ALTAOF/TSSO User's Guide/ALTAOF/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
ALTAOF
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
ALTOAF dynamically resets the MATCHLIM value for
a given AOF table entry.
Note that resetting the MATCHLIM value to 0
effectively deletes the entry.
.in 0
.sp
.bf hd3
Syntax
.pf
:xmp.
ALTAOF ENTRY:hp1.(entry-id):ehp1. MATCHLIM(:hp1.matchlim-value:ehp1.)
~~~~~~~~~~~~~~~~~~~~~~~~~~~or
~~~~~~~~~~~~~~~~~~~~~~~~~~MLIM(:hp1.matchlim-value:ehp1.)
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=17 termhi=1.
:dt.entry-id
:dd.
A 1- to 8-character ID for a
TSSO/AOF table entry for which the MATCHLIM value will be changed.
:dt.matchlim-value
:dd.
New MATCHLIM value.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=13.
:dt.Example 1.
:dd.
Reset the MATCHLIM value to 4 for the
labeled "VTAMUP" entry in the
active AOF table.
:xmp.
ALTAOF ENTRY(VTAMUP) MATCHLIM(4)
:exmp.
:dt.Example 2.
:dd.
Delete the labeled "OFFLINE" entry in the active AOF table.
:xmp.
ALTAOF ENTRY(OFFLINE) MATCHLIM(0)
:exmp.
:edl.
.in 0
.rh on
.sx c /CACHE/TSSO User's Guide/CACHE/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
CACHE
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
The CACHE command controls the operation of 3880-11, 3880-21,
3880-13 or 3880-23 cache devices from the MVS console.  As distributed b
IBM, software support for control of these devices
is contained in the IDCAMS program
available with MVS; the MVS console operator cannot control or even quer
the device.  The CACHE command will format an IDCAMS command, attach IDC
and write the results using the PUTLINE interface.  When issued under TS
these results are then displayed on the MVS console.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
CACHE :hp1.cache-device:ehp1. {:hp1.action:ehp1.} {SUBSYS} {LEGEND}
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=15 termhi=1.
:dt.cache-device
:dd.
A 3-digit UCB address or a 6-character volume serial.
:dt.action
:dd.Action to be performed by the CACHE command:
:dl tsize=9 termhi=0.
:dt.ON
:dd.Format the appropriate IDCAMS command (SETCACHE) to turn the cache u
on.
:dt.OFF
:dd.Format the appropriate IDCAMS command (SETCACHE) to turn the cache
off.
:dt.LIST
:dd.
Format a LISTDATA command to list cache statistics
(e.g., READ hit ratio).
:dt.STATUS
:dd.(default) Provide information concerning the current status of the
cache device.
:edl.
:edl.
:dl tsize=15 termhi=0.
:dt.SUBSYS
:dd.
Provide information about
the entire 3350 or 3380 string.
:dt.LEGEND
:dd.
Provide a verbose Description of the format of the IDCAMS
output.
(This is probably inappropriate for display at the console.)
:edl.
.in 0
.bf hd4
Issuing Other IDCAMS Commands with CACHE
.pf
.sp
.in 5
There are some commands that you may want to issue to the cache controll
through IDCAMS that are not supported by this command.  For these
occasions, an alternate form of the CACHE command is provided.
:xmp.
~~~~~CACHE~*~CMD(':hp1.idcams-cmd:ehp1.')
:exmp.
where
:hp1.
idcams-cmd
:ehp1.
is any command accepted by IDCAMS.  This can be a cache command, such
as BINDDATA, or a command that has nothing to do with cache devices, suc
LISTC.
:dl tsize=7.
:dt.NOTE:
:dd.
To issue these commands under a TSO session,
first execute the CLIST ALOCCACHE in TSSO.VERS43.ASM
to allocate the needed data sets.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Turn on the cache device for the volume at UCB 263.
:xmp.
CACHE 263 ON
:exmp.
:dt.Example 2.
:dd.
Turn off volume JESSPL to the cache device.
:xmp.
CACHE JESSPL OFF
:exmp.
:dt.Example 3.
:dd.
Turn volume PGMPRO on to the cache device.
:xmp.
CACHE PGMPRO ON
:exmp.
:dt.Example 4.
:dd.
Print status information for the cache device covering volume PGMPRO.
:xmp.
CACHE PGMPRO
:exmp.
:dt.Example 5.
:dd.
Print status information for all volumes covered by the cache
device covering
volume PGMPRO.
:xmp.
CACHE PGMPRO SUBSYS
:exmp.
:dt.Example 6.
:dd.
Print statistics for the cache device at UCB 265.
:xmp.
CACHE 265 LIST
:exmp.
:dt.Example 7.
:dd.
Issue the IDCAMS LISTC command and return the reply to the
invoking console.
:xmp.
CACHE * CMD('LISTC')
:exmp.
:edl.
.in 0
.rh on
.sx c /CPCMD/TSSO User's Guide/CPCMD/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
CPCMD
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
The CPCMD command allows the MVS operator of a virtual
machine to issue CP commands on a VM/SP, VM/SP HPO or
VM/XA system.  Any CP command of the appropriate CP privilege class
is allowed.  The response of the command is returned to the invoking
console.
Note that this command will also function under TSO and
return the response to the CP command to the invoking TSO user.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
CPCMD :hp1.cp-cmd:ehp1.
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl termhi=1.
:dt.
cp-cmd
:dd.Any VM CP command.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Issue the CP QUERY NAMES command and return the response to the
invoking console.
:xmp.
CPCMD~QUERY~NAMES
:exmp.
:dt.Example 2.
:dd.
Direct VM to attach the device at 3F0 to the virtual machine
configuration at virtual device 3F0.
:xmp.
CPCMD~ATTACH~3F0~*~3F0
:exmp.
Note that the device must also be varied on-line
by the MVS operator.  The MVS virtual machine
would need command privilege class "B" to issue this command.
:edl.
.in 0
.rh on
.sx c /DISPAOF/TSSO User's Guide/DISPAOF/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
DISPAOF
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
The DISPAOF command displays the contents of TSSO/AOF tables
which control the operation of the TSSO Automated Operations Facility.
The DISPAOF command can query either the active TSSO/AOF table or a tabl
that has been assembled and is residing on DASD.
By default, DISPAOF will display all entries in the
running TSSO/AOF table.
The information
displayed includes the TSSO/AOF table name, ID parameter, date and time
assembled, and TSSO version number.  For each message displayed, the
table entry ID,
MSG ID, ACTION directive and ACTION TEXT will be displayed.
TEST conditions will not be displayed unless the
TEST parameter is specified.
Optionally, the display can be limited to selected
message IDs.
:p.
Information about alternate TSSO/AOF tables
can be displayed by using the :hp1.table-name:ehp1. parameter.
Alternate
tables must previously have been assembled and
placed (in load module form) into the
SYS1.TSSOLOAD dataset.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
.dc cont \
:xmp.
DISPAOF~{ENTRY(:hp1.entry-id:ehp1.)} {MSG(msg-id)}\
~{TABLE(:hp1.table-name:ehp1.)}~{TEST}
:exmp.
.dc cont off
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=20 termhi=0.
:dt.ENTRY(entry-id)
:dd.
A 1- to 8-character ID of a AOF table entry.
Note that DISPAOF will display :hp2.all:ehp2.
entries that start with the entry identifier;
an exact match is not required
(see examples).
:dt.MSG(msg-id)
:dd.
A 1- to 8-character message identifier specified in the
TSSO/AOF TABENTRY macro MSG parameter.
Note that DISPAOF will display :hp2.all:ehp2.
entries that start with the message identifier;
an exact match is not required
(see examples).
:dt.TABLE(table-name)
:dd.
An alternate TSSO AOF table name.
The table must previously have been assembled and available to TSSO.
:dt.TEST
:dd.
For each message, display any TEST conditions that exist.
:edl.
.in 0
.pa
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Display the running TSSO/AOF table with all message IDs, action
directives, and action text.
:xmp.
DISPAOF
:exmp.
:dt.Example 2.
:dd.
Display all entries in the running TSSO/AOF table with a message ID
of $HASP395.
:xmp.
DISPAOF MSG($HASP395)
:exmp.
:dt.Example 3.
:dd.
Display all entries and all test conditions in the running AOF
table for message ID $HASP350.
:xmp.
DISPAOF MSG($HASP350) TEST
:exmp.
:dt.Example 4.
:dd.
Display all entries and all test conditions for message IKT021D
in load module AOFNEW.
:xmp.
DISPAOF MSG(IKT021D) TABLE(AOFNEW) TEST
:exmp.
:dt.Example 5.
:dd.
Display all entries in the active AOF table starting with "VTAMUP".
:xmp.
DISPAOF ENTRY(VTAMUP)
:exmp.
:dt.Example 6.
:dd.
Display all entries in the active AOF table  with a message ID
starting with "$HASP".
:xmp.
DISPAOF MSG($HASP)
:exmp.
:edl.
.in 0
.rh on
.sx c /LINKLIST/TSSO User's Guide/LINKLIST/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
LINKLIST
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
The
LINKLIST
command displays the list of the data sets in the current MVS LNKLST
concatenation.
This command is only valid in an MVS/XA
environment, because the information is not available in MVS/370.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
LINKLIST
:exmp.
.in 0
.rh on
.sx c /OSASK/TSSO User's Guide/OSASK/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
OSASK
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
OSASK allows you to ask the operator a question and
get a response.
If it is issued from a TSO command line,
the response goes to the user's terminal.
If it is issued from a CLIST,
the response goes to CLIST variables
(see below).
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
OSASK :hp1.question:ehp1.
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=12 termhi=1.
:dt.
question
:dd.
Question to be sent to the operator's console.
:edl.
.in 0
.sp
.bf hd3
CLIST Variables
.pf
.in 5
:dl tsize=18 termhi=0.
:dthd.Input Variables
:ddhd.~~~~~~~~~~Definition
:dt.REPLYWAIT
:dd.
The number of seconds you are willing to wait for
a reply to the question.
This can be a value from 1 to 60;
default is 60.
:edl.
:dl tsize=18 termhi=0.
:dthd.Output Variables
:ddhd.~~~~~~~~~~Definition
:dt.REPLY
:dd.
Text of the reply to the question.
:dt.REPLYW
:dd.
The number of words in the operator's reply.
:dt.REPLYWn
:dd.
The :hp1.n:ehp1.th word of the reply.
:edl.
.in 0
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Ask the operator a question.
:xmp.
OSASK WHAT TIME IS SHUTDOWN?
:exmp.
:dt.
Example 2.
:dd.
Ask the operator to specify type of start for production system.
:xmp.
OSASK BCR001I SPECIFY START FOR PRODUCTION SYSTEM (WARM, COLD)?
:exmp.
:edl.
.in 0
.rh on
.sx c /OSCMD/TSSO User s Guide/OSCMD/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
OSCMD
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
OSCMD allows you to issue any MVS command
(JES2, VTAM, etc.).
If it is issued from a TSO command line,
the response is returned to the terminal.
If it is issued from a CLIST,
the response can optionally go to the CLIST variables
(see below).
Note that,
when OSCMD is issued from a TSSO-initiated CLIST,
OSCMD checks the authority of the invoking console
and only permits commands of that level.
When issued by a TSO user,
OSCMD checks the installation authority of the user's ID.
By default, all TSO users have INFO-only authority;
full authority can be granted on a per-user basis.
The installation can control access
through the OSCMDATH user exit.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
OSCMD :hp1.mvs-cmd:ehp1.
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=12 termhi=1.
:dt.
os-cmd
:dd.
Any MVS command.
:edl.
.in 0
.sp
.bf hd3
CLIST Variables
.pf
.in 5
:dl tsize=25 termhi=0.
:dthd.Input Variables
:ddhd.~~~~~~~~~~Definition
:dt.CMDRESP=dest
:dd.
Destination of OSCMD response:
.sp
.fo off
CLIST   - return response to CLIST variables
TERM    - return response to TSO user's terminal
NOWHERE - discard the response
.fo on
:dt.CMDWAIT=nn
:dd.
Maximum number of seconds you are willing to wait
for the command to finish.
:hp1.nn:ehp1. is a value from 1 to 60;
default is 1 for nonCLIST execution.
If the CMDWAIT value is exceeded,
the only response returned will be an echo
of the original OSCMD.
If TSSO can detect the end of a command response
(e.g., responses using MLWTOs),
then OSCMD will not need to wait the full value of CMDWAIT.
:dt.MAXCMDOUT=nnn
:dd.
Maximum number of lines of response you want returned
from the command.
:hp1.nnn:ehp1. is a value from 1 to 200;
default is 200 for nonCLIST execution.
:edl.
.pa
:dl tsize=20 termhi=0.
:dthd.Output Variables
:ddhd.~~~~~~~~~~Definition
:dt.CMDOUT
:dd.
The number of lines returned in the response.
:dt.CMDOUTm
:dd.
The :hp1.m:ehp1.th line returned in the response.
:hp1.m:ehp1. is a value from 1 to 200.
.br
NOTE:  CMDOUT1 is always an echo of the original command.
:dt.CMDOUTmW
:dd.
The number of words in the :hp1.m:ehp1.th line of the response.
:dt.CMDOUTmWn
:dd.
The :hp1.m:ehp1.th line, the :hp1.n:ehp1.th word in the response line.
:hp1.n:ehp1. is a value from 1 to 20.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.sp
.in 5
See :figref refid=exjobs. through :figref refid=exstvt..
.in 0
.rh on
.sx c /OSPAUSE/TSSO User's Guide/OSPAUSE/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
OSPAUSE
.sp
.bf hd3
Description
.pf
.sp
.in 5
OSPAUSE delays processing of a command for
the specified number of seconds.
This is useful if the CLIST initiates a started task
and must wait for it to initialize.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
OSPAUSE :hp1.seconds:ehp1.
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl termhi=1.
:dt.
seconds
:dd.
The number of seconds that the CLIST should be delayed.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.Delay the CLIST 10 seconds.
:xmp.
OSPAUSE 10
:exmp.
:edl.
.in 0
.rh on
.sx c /OSWAIT/TSSO User's Guide/OSWAIT/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
OSWAIT
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
OSWAIT directs TSSO to wait for a particular system
message or a timeout limit to occur before proceeding.
These messages are defined in the AOF table.
OSWAIT is intended to be issued from a CLIST.
:p.
If the message appears,
OSWAIT gives a return code of 0 (RC=0).
If OSWAIT was issued from a terminal,
the message prints at the terminal.
Otherwise, the CLIST variables are populated (see below).
If the message does not appear by the timeout limit,
OSWAIT gives a return code of 8 (RC=8).
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
OSWAIT ENTRY(:hp1.entry-id:ehp1.) TIMEOUT(:hp1.nnnnn:ehp1.)
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl termhi=1.
:dt.
entry-id:dd.The 1- to 8-character identifier
of the AOF table entry.
:dt.nnnnn:dd.The number of second to wait before
timeout, maximum 86400 seconds.
:edl.
.in 0
.sp
.bf hd3
CLIST Variables
.pf
.in 5
:dl tsize=20 termhi=0.
:dthd.Output Variables
:ddhd.~~~~~~~~~~Description
:dt.WTO
:dd.Text of the message
:dt.WTOW
:dd.Number of words in the message
:dt.WTOWn
:dd.Nth word of the message
:edl.
.in 0
:p.
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.
Example 1.
:dd.Wait 2 minutes for message IST020I to appear.
:xmp.
OSWAIT ENTRY(IST020I) TIME(120)
:exmp.
:edl.
.in 0
.rh on
.sx c /OSWTO and OSWTOH/TSSO User's Guide/OSWTO and OSWTOH/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
OSWTO and OSWTOH
.sp
.bf hd3
Available Under TSO:
.pf
No
.sp
.bf hd3
Description
.pf
.sp
.in 5
OSWTO and OSWTOH allow you to write messages
to the operator's console.
OSWTOH highlights the message.
These commands can be issued only from a TSSO-initiated CLIST.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
OSWTO :hp1.message:ehp1.
.sp
OSWTOH :hp1.message:ehp1.
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=12 termhi=1.
:dt.
message
:dd.
The text of the message to be sent to the operator.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Notify the operator of an IPL in progress.
:xmp.
OSWTO BCR101I AUTOMATED IPL IN PROGRESS
:exmp.
:dt.
Example 2.
:dd.
Send a highlighted message to the operator.
:xmp.
OSWTOH BCR102I SYSTEM SHUTDOWN COMPLETE
:exmp.
:edl.
.in 0
.rh on
.sx c /REPLY/TSSO User s Guide/REPLY/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
REPLY
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
The REPLY command is used to reply to MVS WTOR messages after the WTOR
has appeared on the MVS console.
:fn.
Contrast this to the ACTION=REPLY directive in
TSSO/AOF, which replies to messages the instant they are generated.
Thus, TSSO/AOF and the REPLY command combine to give full coverage
on automating responses to MVS WTORs.
:efn.
You do not need to know the MVS reply
number to respond to the WTOR.  The REPLY command can, therefore, be use
to automate operational procedures with products that communicate to the
operator through the WTOR interface
(e.g., NCCF, IMS, GDDM).
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
REPLY MSG(:hp1.msg-id:ehp1.) TEXT(:hp1.reply-text:ehp1.)
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=18 termhi=0.
:dt.
MSG(msg-id)
:dd.The message you are replying to (e.g., DSI802A)
:dt.
TEXT(reply-text)
:dd.
The text of the reply you wish to give in response to the WTOR.
:edl.
.in 0
.sp
.bf hd3
Notes on Using REPLY with IMS/VS
.pf
.sp
.in 5
There are some installations that run multiple copies of the IMS/VS
program product.
All of the subsystems issue the same message ID as a WTOR.
For
these installations, an alternate form of the REPLY command
is available to direct replies to the correct IMS subsystem:
.fo off
:xmp.
~~~~~REPLY IMS(:hp1.ims-id:ehp1.) TEXT(:hp1.reply-text:ehp1.)
:exmp.
.fo on
where
:hp1.
ims-id
:ehp1.
is the name of the IMS subsystem to which you wish to
direct the response, and
:hp1.
reply-text
:ehp1.
is as defined above.
In this way IMS procedures can be automated.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Shut down the NCCF program product.
:xmp.
REPLY MSG(DSI802A) TEXT('CLOSE IMMED')
:exmp.
.pa
:dt.Example 2.
:dd.Reply to message USRWT01.
:xmp.
REPLY MSG(USRWTO1) TEXT('DISPLAY FIELDS')
:exmp.
:dt.Example 3.
:dd.Issue the IMS command DISPLAY ACTIVE on IMS subsystem ZFF.
:xmp.
REPLY IMS(ZFF) TEXT('/DIS A')
:exmp.
:dt.Example 4.
:dd.Issue the IMS command NRESTART on IMS subsystem PRO.
:xmp.
REPLY IMS(PRO) TEXT('NRE CHECKPOINT 0 FMT ALL')
:exmp.
:edl.
.in 0
.rh on
.sx c /SPMON/TSSO User's Guide/SPMON/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
SPMON
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
The SPMON command displays system information to the MVS
console operator.
By default SPMON will display the following information:
percentage of CPU busy,
average Unreferenced Interval Count (UIC),
average paging rate,
number of TSO users,
number of started tasks,
number of batch jobs, and
number of
:hp1.
inactive
:ehp1.
initiators.
In addition, if Parameters are specified to SPMON,
the following
job-related information is printed:
JOBNAME,
number of service units in current transaction,
swap-in/swap-out status, and
number of active frames in real storage.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
SPMON  {:hp1.job-parm:ehp1. {:hp1.type-parm:ehp1.}}
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl tsize=12 termhi=1.
:dt.
job-parm
:dd.A 1- to 8-character string
for matching on job name,
or "ALL" to display information on all jobs.
:dt.
type-parm
:dd.
This directs SPMON to print information about selected
types of jobs.
Legal values are
JOB (all batch jobs),
STC (all started tasks),
TSO (all TSO users),
or ALL (all batch jobs, started tasks, and TSO users).
Default is ALL.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Display the general system information only.
:xmp.
SPMON
:exmp.
:dt.
Example 2.
:dd.Display general system information as well as information on
all jobs, TSO users or started tasks that start with "BCR".
:xmp.
SPMON BCR
:exmp.
:dt.Example 3.
:dd.Display general system information and information
about all TSO users whose user IDs begin with "PY".
:xmp.
SPMON PY TSO
:exmp.
:edl.
.in 0
.rh on
.sx c /VALLOC and VOLSER/TSSO User's Guide/VALLOC and VOLSER/
.sp 3
.rh off
.pa
.bf hd3
Name:
.pf
VALLOC and VOLSER
.sp
.bf hd3
Available Under TSO:
.pf
Yes
.sp
.bf hd3
Description
.pf
.sp
.in 5
The VALLOC and VOLSER commands display
UCB and ALLOCATION information.
By default,
the commands will display information for the MVS SYSRES (IPL)
device.
If a volume serial is specified,
the command will locate the device
using the standard MVS UCBSCAN service and display the UCB address and
UCB itself.
:fn.
The commands use
the TSSO "*COM" interface to issue appropriate MVS commands.
to display UNIT or ALLOCATION information.
The VOLSER command
issues the "D~U,,,:hp1.ucb-address:ehp1.,1" MVS system command,
while the VALLOC command
issues the "D~U,,ALLOC,:hp1.ucb-address:ehp1.,1" MVS command.
Note that, when this command is issued under regular
TSO, the MVS commands are not generated and the invoker of the command w
see the formatted command including the *COM keyword.
:efn.
The command will also
inform the MVS operator if the
volume is not found.
.in 0
.sp
.bf hd3
Syntax
.pf
.in 5
:xmp.
VALLOC {:hp1.volser:ehp1.}
.sp
VOLSER {:hp1.volser:ehp1.}
:exmp.
.in 0
.bf hd3
Parameters
.pf
.in 5
:dl termhi=1.
:dt.
volser
:dd.A  6-character DASD volume identifier.
:edl.
.in 0
.sp
.bf hd3
Examples
.pf
.in 5
:dl tsize=12.
:dt.Example 1.
:dd.
Display the UCB address and allocation information for volume PPBFX2.
:xmp.
VALLOC PPBFX2
:exmp.
:dt.Example 2.
:dd.
Display UCB information for the MVS SYSRES (IPL) pack.
:xmp.
VOLSER
:exmp.
:dt.Example 3.
:dd.
Display the UCB address for volume SYSRES.
:xmp.
VOLSER SYSRES
:exmp.
:edl.
.in 0
.rh cancel
:h1 id=cntlcmd.TSSO Control Commands
TSSO control commands are used to direct TSSO processing.
All such commands start with the TSSO System Recognition Character
(SRC).
The Examples below assume that "#" is the TSSO SRC.
:p.
Note that TSSO control commands may be treated exactly as other TSO
commands when used in a TSSO CLIST.  For example, a CLIST may process
directives and then issue a .RELOAD command to reload the TSSO/AOF
table.  It is also possible for a CLIST to consist of nothing but
TSSO commands. For example, a CLIST could be written
to query all the TSSO Parameters.
:h2.General Commands
:dl tsize=28.
:dt.
#.LOGOFF
:dd.
Logs off the console.
:dt.
#.LOGON user-id password
:dd.
Logs on the invoking console to TSSO.
:edl.
.sp 2
Various Parameters of the TSSO subsystem
can be queried using the #.Q family of commands.
:dl tsize=28.
:dt.
#.Q LOGON
:dd.
Displays the console ID and the user ID of all
consoles logged on to TSSO.
:dt.
#.Q MAXCMD
:dd.
Returns the value of the MAXCMDS parameter specified at TSSO
startup.
:dt.
#.Q MAXWTO
:dd.
Returns the value of the MAXWTO parameter specified at TSSO
startup.
:dt.
#.Q RACF
:dd.
Returns the name of the TSSO RACF user identifier.
:dt.#.Q SCON
:dd.Displays the status of subsystem consoles.
:dt.
#.Q SWAP
:dd.
Indicates if TSSO is running non-swappable.
:dt.
#.Q T
:dd.
Returns the name of the TSSO AOF table.
Additional information displayed includes the
value specified on the :hp3.ID:ehp3. parameter
of the TABSTART macro and the
date and time the AOF table was assembled.
:dt.
#.Q TIMEOUT
:dd.
Displays the TIMEOUT value.
:dt.
#.Q VERS
:dd.
Displays the TSSO Version identifier (TSSO 4.3) and the date and times
that the TSSO, TSSOWTO,
and the subsystem interface intercept modules were last assembled.
:dt.#.Q XMEM
:dd.Displays status of TSSO cross memory services environment.
:edl.
.pa
:h2.Restricted Commands
The following commands are restricted to consoles
with MVS system authority.
:dl tsize=22.
:dt.
#.ABEND
:dd.
Abnormally terminates the TSSO address space. This is
a TSSO debugging aid which should not be used in normal
operation.
:dt.
#.J
:dd.
Requests a job identification number from the primary subsystem.
This
is required if TSSO will be using the primary subsystem's services.
These
services include submitting jobs
(with the TSO SUBMIT command) and using the PRINTOFF command.
Note that if TSSO was started using the "SUB=JES2" parameter, this comma
will have no effect.
:dt.
#.M
:dd.
Manipulates the TSSO debugging facility. This command
should not be used under normal circumstances.
:dt.
#.P
:dd.
Terminates the Time Sharing Subsystem Option.  TSSO can be
restarted through the "S TSSO" command as described on page 13.
:dt.
#.RELOAD table-name
:dd.
Loads a
TSSO Automated Operations Facility table
identified by :hp1.table-name:ehp1.
and performs a "#.Q T"
(see previous page).
If :hp1.table-name:ehp1.='NONE', then
the AOF is deactivated.  If an error occurs while processing
the table, AOF is deactivated.  The most common errors include
:hp1.table-name:ehp1. not being found
and :hp1.table-name:ehp1. not being a valid TSSO AOF table.
:edl.
:h1.TSSO Processing Modules
:dl tsize=15.
:dt.$ENDOFDA
:dd.
Sample IEFBR14 job: AOF can trap the END OF JOB message
:dt.$PAYROLL
:dd.
Same as above.
:dt.ALOCCACH
:dd.
Sample CLIST to allocate files needed to run the cache
command from a TSO user ID.
:dt.ALTAOF
:dd.
ALTAOF command:  Change MATCHLIM dynamically for TSSO/AOF
:dt.AOFIVP
:dd.
Sample AOF table that shows all forms of TABENTRY macro.
:dt.ASMALL
:dd.
PROC to assemble all TSSO processing modules.
:dt.ASMONE
:dd.
PROC to assemble one TSSO processing module.
:dt.ASMTABLE
:dd.
PROC to assemble an AOF table.
:dt.ASMTSSO
:dd.
PROC to assemble all TSSO subsystem modules.
This is need if the TSSOCVT or TSSODATD macro is altered.
:dt.CACHE
:dd.
CACHE command:  Controls a 3880 CACHE control unit.
:dt.COPYPROC
:dd.
PROC to copy the sample TSSO START PROC into SYS1.PROCLIB.
:dt.CPCMD
:dd.
CPCMD command:  Issue a CP command if running under VM.
:dt.DISPAOF
:dd.
DISPAOF command:  Displays an active or inactive AOF table.
:dt.EF
:dd.
EF command:  Allows a file to be edited under TSSO.
:dt.EQUATES
:dd.
Standard R0-R15 equate macro.
:dt.EXASK
:dd.
Sample CLIST using the OSASK command.
:dt.EXCHKSPL
:dd.
Sample CLIST using OSCMD command and
manipulation of the response.
:dt.EXJOBS
:dd.
Another example using OSCMD.
:dt.EXSTVTAM
:dd.
An example of OSCMD without response retrieval.
:dt.FORMAT
:dd.
Macro to format numbers from assembler programs.
:dt.GENTAPE
:dd.
PROC to generate the TSSO distribution tape.
:dt.GETCVT
:dd.
Macro to find the TSSO CVT (SSCTSUSE field in TSSO SSCT).
:dt.ISXA
:dd.
Macro to determine if you are running under MVS/XA.
:dt.JCECVT
:dd.
Subroutine for decimal/hex conversions.
:dt.LINKLIST
:dd.
LINKLIST command:  Displays the MVS LNKLST concatenation.
:dt.MENTER
:dd.
Macro for beginning subroutine linkage.
:dt.MLEAVE
:dd.
Macro for closing subroutine linkage.
:dt.MULT
:dd.
Bill Godfrey's MULT command:
Allows you to enter multiple commands on a line.
Great for commands that have subcommands.
:dt.OSASK
:dd.
OSASK command:  Ask the operator a question.
:dt.OSCMD
:dd.
OSCMD command:  Issue an MVS command and get a response.
:dt.OSCMDICB
:dd.
OSCMD Interface Control Block:  for communication
between OSCMD and TSSOSS09.
:dt.OSPAUSE
:dd.
OSPAUSE command:  Delay the execution of a CLIST.
:dt.OSWTO
:dd.
OSWTO command:  Issue a message to the operator.
:dt.RELGDE41
:dd.
TSSO 4.1 release guide.
:dt.RELGDE42
:dd.
TSSO 4.3 release guide.
:dt.REPLY
:dd.
REPLY command:  Issue a REPLY command by message ID.
:dt.REPLYLOA
:dd.
REPLYLOA module:  Performs X-MEM functions for REPLY command.
:dt.RUNASM
:dd.
PROC for assembling TSSO commands.
:dt.SAMPPARM
:dd.
Sample Parameters for SYS1.PARMLIB(TSSOPARM).
:dt.SETMODE
:dd.
Macro for changing mode (24 bit - 31 bit).
:dt.SETPARSE
:dd.
Macro for setting up IKJPARS control blocks.
:dt.SPMON
:dd.
SPMON command for performance monitoring.
:dt.SSID
:dd.
SSID macro for obtaining SMF system ID.
:dt.TABEND
:dd.
TABEND macro for defining end of AOF table.
:dt.TABENTRY
:dd.
TABENTRY macro for defining AOF table entries.
:dt.TABSTART
:dd.
TABSTART macro for defining start of AOF table entries.
:dt.TLINE
:dd.
TLINE macro for doing TPUT of character string.
:dt.TSSLRACF
:dd.
TSSLRACF subroutine for doing RACINITS in #.LOGON command.
:dt.TSSO
:dd.
TSSO mainline processing module.
:dt.TSSOCCMD
:dd.
TSSOCCMD subroutine for handling TSSO control commands.
:dt.TSSOCMND
:dd.
TSSOCMND macro for defining control block to interface
between TSSO and TSSOSS10 (CMDRING DSECT).
:dt.TSSOCVT
:dd.
Mapping macro for TSSO's CVT.
:dt.TSSODATD
:dd.
Mapping macro for TSSO's private data area.
:dt.TSSODOCM
:dd.
TSSODOCM subroutine for handling TSO commands under TSSO.
:dt.TSSOESTA
:dd.
TSSOESTA subroutine for handling TSSO errors.
:dt.TSSOGSSC
:dd.
Interface for subsystem allocatable consoles.
:dt.TSSOINI1
:dd.
TSSO initialization, part 1.
:dt.TSSOINI2
:dd.
TSSO initialization, part 2.
:dt.TSSOINI3
:dd.
TSSO initialization, part 3.
:dt.TSSOPARS
:dd.
Subroutine for parsing just about anything.
:dt.TSSOPROC
:dd.
A sample proc for starting TSSO (S TSSO).
:dt.TSSOSECR
:dd.
Macro to map the TSSO security control block.
:dt.TSSOSS09
:dd.
TSSO WTO intercept routine (subsys code 9).
:dt.TSSOSS10
:dd.
TSSO Command intercept routine (subsys code 10).
:dt.TSSOTERM
:dd.
Module for handling TSSO termination.
:dt.TSSOWTO
:dd.
Module for copying SYSTSPRT file to console after commands.
:dt.UNDERTSO
:dd.
Macro to determine if you are running under TSO.
:dt.USEGDESC
:dd.
The :hp3.TSSO User's Guide:ehp3., complete with SCRIPT control
words.
:dt.USEGDE41
:dd.
The user's guide for TSSO 4.1.
:dt.USEGUIDE
:dd.
The user's guide for TSSO 4.3 (current version).
:dt.VALLOC
:dd.
Command for displaying MVS allocation information.
:dt.VOLSER
:dd.
Command for displaying MVS UCB information.
:edl.
:h1.Sample AOF Table
:p.
This is the sample AOF table distributed with TSSO in member AOFIVP of t
TSSO.VERS43.ASM data set.
.sp 2
.bf figfont
.fo off
***********************************************************************
* THIS IS A SAMPLE AUTOMATED OPERATIONS FACILITY TABLE. IT IS USED AS *
* PART OF THE TSSO INSTALLATION VERIFICATION PROCEDURE. IT CONSISTS   *
* OF A SUBSET OF ALL POSSIBLE ENTRIES IN A TSSO/AOF TABLE.            *
*                                                                     *
* THIS AOF TABLE CAN BE USED IN CONJUNCTION WITH THE AOF/IVP,         *
* DISTRIBUTED WITH TSSO.                                              *
*                                                                     *
*                                                                     *
***********************************************************************
AOFIVP   TABSTART ID=IVPTABLE
***********************************************************************
* FIRST, A COUPLE OF REPLIES TO STANDARD ANNOYING MVS   MESSAGES.     *
***********************************************************************
*
***********************************************************************
* REPLY '' TO VTAM INITIALIZATION MESSAGE
***********************************************************************
         TABENTRY MSG=IST051A,ACTION=REPLY,TEXT=' '
         TABENTRY MSG=IST051A,ACTION=REPLY,TEXT=' '
*
***********************************************************************
* REPLY 'SIC' TO TCAS TERMINATION MESSAGE
***********************************************************************
         TABENTRY MSG=IKT010D,ACTION=REPLY,TEXT='SIC'
*
***********************************************************************
* REPLY 'U' TO TCAS TERMINATION MESSAGE
* AND ECHO THE REPLY OUT TO THE MVS CONSOLE. ALSO, ENSURE THAT WE ONLY
* MAKE THE REPLY ONE TIME THROUGH THE MATCHLIM FACILITY.
***********************************************************************
*
         TABENTRY MSG=IKT012D,ACTION=REPLY,TEXT='U',ECHO=YES,          X
               MATCHLIM=1
.pa
***********************************************************************
* REPLY 'POST' TO IMS BRINGUP ON UCB MESSAGE
***********************************************************************
*
         TABENTRY MSG=IEC804A,ACTION=REPLY,TEXT='POST'
*
***********************************************************************
* THE NEXT ENTRY POINTS OUT THE HILIGHTING FEATURE. IEE704I IS THE    *
* MESSAGE ID FOR   REPLY XX IS NOT OUTSTANDING.                       *
***********************************************************************
         TABENTRY MSG=IEE704I,ACTION=HILIGHT
*
***********************************************************************
* THE NEXT ENTRY DEMONSTRATES A POSSIBLE USE FOR THE OSCMD FEATURE.   *
* IEE043I IS THE MESSAGE YOU GET WHEN A SYSTEM LOG DATASET IS QUEUE   *
* TO A GIVEN OUTPUT CLASS. THE #LOGWTRR4 PROGRAM (OR CLIST) CAN BE    *
* USED TO PROCESS THE LOG DATASET. THE XWTR PROC    CAN ALSO BE USED. *
* YOU CAN CAUSE THIS TO OCCUR BY ISSUING THE "W Z" COMMAND.           *
* PERFORM THIS ACTION AT MOST 7 TIMES, AND, EACH TIME, ECHO THE       *
* GENERATED COMMAND OUT TO THE MVS CONSOLE.
***********************************************************************
         TABENTRY MSG=IEE043I,ACTION=OSCMD,MATCHLIM=7,ECHO=YES,        X
               TEXT='#LOGWTRR4'
*
***********************************************************************
* WHEN THE LOGWTR PROGRAM TERMINATES, MESSAGE IEF176I IS ISSUED,      *
* INDICATING THE LOGWTR IS LOOKING FOR WORK. HAVE TSSO PURGE IT OUT.  *
* NOTE HOW IT USES THE DDD FROM THE MESSAGE TO FIGURE OUT WHAT TO     *
* PURGE. NOTE THAT THIS WILL WORK FOR ANY EXTERNAL WRITER.            *
* THIS IS AN EXAMPLE OF "WORD" FORMATTING IN THE TEXT= PARM.          *
* NOTE THAT THE COMMAND GENERATED IS ECHOED TO THE MVS CONSOLE
***********************************************************************
         TABENTRY MSG=IEF176I,ACTION=OSCMD,ECHO=YES,                   X
               TEXT='P \W    03\'
*
***********************************************************************
* THE NEXT EXAMPLE SHOWS POSITIONAL FORMATTING IN THE COMMAND TEXT.   *
* THE $HASP104 MESSAGE IS ISSUED WHENEVER A //*MESSAGE CARD IS        *
* ENCOUNTERED IN THE JOB STREAM. THE #RECMSG CLIST MEARLY RECORDS IN  *
* A DATASET (USING CLIST OPENFILE/PUTFILE/CLOSFILE TECHNIQUES) THE    *
* TEXT OF THE MESSAGE.                                                *
***********************************************************************
         TABENTRY MSG=$HASP104,ACTION=OSCMD,                           X
               TEXT='#RECMSG JOB(''\P001,72\'')'
*
***********************************************************************
* ANOTHER EXAMPLE OF THE USE OF THE HILIGHTING FEATURE. HILIGHT THE   *
* MESSAGE INDICATING THAT VTAM IS UP.                                 *
***********************************************************************
         TABENTRY MSG=IST020I,ACTION=HILIGHT
*
***********************************************************************
* IN ADDITION TO  HILIGHTING THE VTAM INITIALIZATION MESSAGE, ISSUE   *
* THE #VTAMR4 CLIST. THIS CLIST IS A OPERATOR CLIST THAT ISSUES       *
* MVS START COMMANDS FOR VTAM DEPENDANT PROGRAM PRODUCT, LIKE NCCF    *
* AND TSO.                                                            *
*                                                                     *
***********************************************************************
         TABENTRY MSG=IST020I,ACTION=OSCMD,TEXT='#VTAMR4'
*
***********************************************************************
* DSI802A IS THE NCCF MESSAGE SAYING THAT YOU CAN ISSUE A VALID NCCF  *
* OPERATOR COMMAND. YOU DO NOT NEED TO KNOW THE MESSAGE NUMBER FOR    *
* THIS COMMAND, BECAUSE YOU CAN REPLY TO IT USING THE REPLY COMMAND   *
* SO WE LOWLIGHT THE MESSAGE, AND ALLOW IT TO ROLL OFF THE SCREEN.    *
* THIS IS AN EXAMPLE OF THE LOWLIGHTING FEATURE.
***********************************************************************
         TABENTRY MSG=DSI802A,ACTION=LOWLIGHT
*
***********************************************************************
* THIS IS AN EXAMPLE OF A SUPPRESS CONDITION. $HASP309 IS A MESSAGE   *
* THAT JES2 ISSUES EVERY TIME AN INITIATOR GOES INACTIVE. THIS MESSAGE*
* IS NOW SUPPRESSED.                                                  *
***********************************************************************
         TABENTRY MSG=$HASP309,ACTION=SUPPRESS
***********************************************************************
* WE WILL NOW DISPLAY SOME OF THE POWER OF THE TEST CONDITIONS. THE   *
* FOLLOWING DEMONSTRATIONS ALL TRAP THE $HASP395 JOB ENDED MESSAGE,   *
* HOWEVER, THE ACTION= PARAMETER IS EXECUTED ONLY IF ALL CONDITIONS   *
* FOR THE TESTS ARE MET. FOR EXAMPLE, OUR FIRST CASE WILL ONLY        *
* HILIGHT THE MESSAGE IF THE JOB THAT HAS ENDED IS NAMED "PAYROLL".   *
* THIS TEST CASE SPECIFIES THAT (1) WORDS ARE BEING TESTED, (2), THAT
* IT IS THE SECONDWORD WE ARE INTERESTED IN, (3), WE ARE INTERESTED IN
* THE FIRST SEVEN CHARACTERS OF THAT WORD, (4), WE WISH TO MATCH THE
* STRING 'PAYROLL', AND      (5), WE WILL USE FOUR BLANKS AS THE
* SEPARATOR CHARACTERS WHEN DEFINING A WORD.
* NOTE THAT THE DOUBLE PARENTHESIS ARE REQUIRED.
***********************************************************************
         TABENTRY  MSG=$HASP395,ACTION=HILIGHT,                        X
               TEST=((W,2,7,'PAYROLL','    '))
*
***********************************************************************
* THE NEXT ENTRY IS AN EXAMPLE OF A TEST CONDITION BASED ON SUBSTRING,*
* OR COLUMNS. THE MESSAGE WILL THE JES2 $HAS648 MESSAGE, WHICH IS     *
* THE RESPONSE TO A $DU,STA. THIS ENTRY WILL SUPPRESS ALL LINES FROM  *
* THE JES2 RESPONSE THAT ARE SNA LINES (COLS 20 THROUGH 22 = 'SNA'    *
*                                                                     *
***********************************************************************
         TABENTRY  MSG=$HASP628,ACTION=SUPPRESS,                       X
               TEST=((S,20,3,'SNA'))
*
***********************************************************************
* THE NEXT ENTRY IS AN EXAMPLE OF A LOGICAL AND CONDITION BETWEEN TEST*
* CASES. BOTH CRITERIA MUST BE SATISFIED FOR THE TESTS TO PASS.       *
* THE TEST CASE WILL AN MVS/JES2 JOB AWAITING EXECUTION IN A CERTAIN  *
* JOB CLASS. THIS ENTRY WILL TAKE A $DN COMMAND, AND ISSUE AN OSCMD   *
* TO RAISE THE PRIORITY OF JOBS AWAITING EXECUTION IN CLASS 9 TO "15" *
* (YES, I REALIZE THIS DOESNT MAKE MUCH SENSE, BUT ITS GOOD FOR DEMO  *
* PURPOSES).
* NOTE THAT THE THIRD WORD IS CHECKED FOR "AWAITING" AND THE FOURTH   *
* WORD IS CHECK FOR EXECUTION, AND THE FIFTH WORD IS THE JOB CLASS.   *
* ALSO NOTE HOW THE SECOND WORD OF THE MESSAGE (THE JOB NAME) IS USED *
* IN FORMING THE TEXT= OPERAND. OSCMDT WILL BE USED SO THE COMMAND    *
* DOESNT ACTUALLY GET ISSUED.
* NOTE ALSO THAT YOU DONT NEED TO SPECIFY FOUR BLANKS- ONE IS         *
* SUFFICIENT WHEN GENERATING TEST CASES.
***********************************************************************
         TABENTRY MSG=$HASP608,ACTION=OSCMDT,                          X
               TEXT='$T''\W    02\'',P=15',                            X
               TEST=((W,3,8,'AWAITING','  '),(W,4,9,'EXECUTION','    ')X
               ,(W,5,1,'9',' '))
*
***********************************************************************
* THE LAST CASE IS A GENERIC MESSAGE. THIS MESSAGE IS MATCHED BY      *
* EVERY SINGLE WTO OR WTOR THAT COME ACROSS, EXCEPT IT MUST STILL     *
* PASS THE TEST CONDITIONS. THIS EXAMPLE I WILL GIVE HILIGHTS ALL JES *
* MESSAGES CONCERNING JOB ENDOFDAY.THESE MESSAGES ALL START WITH      *
* $HASP (WORD 1) AND CONTAIN THE JOBNAME IN WORD 2.                   *
*                                                                     *
***********************************************************************
         TABENTRY MSG=*,ACTION=HILIGHT,                                X
               TEST=((W,1,5,'$HASP',' '),(W,2,7,'ENDOFDAY',' '))
***********************************************************************
* THIS TABEND MACRO DEFINES THE END OF THE AUTOMATED OPERATIONS       *
* FACILITY TABLE.                                                     *
*                                                                     *
* DO NOT LEAVE THE TABEND MACRO OUT OF THIS ASSEMBLY.                 *
*                                                                     *
***********************************************************************
         TABEND
.pf
.fo on
:h1 id=deck.TSSO Sample Parameter Deck
The parameter deck shown below is in
file SAMPPARM in the TSSO.VERS43.ASM data set.
.sp 2
.bf figfont
.fo off
***********************************************************************
* THIS IS A TYPICAL TSSO PARAMETER DECK FOR A TYPICAL SYSTEM. THE     *
* DOCUMENTATION IS   IN "TSSO SYSTEM PROGRAMMERS GUIDE- RELEASE 4.3   *
* THESE VALUES SHOULD WORK AS DEFAULTS.                               *
***********************************************************************
NONSWAP=Y
************************************************************
* TSSO WILL BE RUNNING NON-SWAPABLE                        *
************************************************************
*
TABLE=AOFR4
************************************************************
* THE TABLE NAME FOR TSSO AOF WILL BE AOFR4                *
************************************************************
*
RACFID=TSSO
************************************************************
* TSSO WILL ASSUME A RACF USERID OF "TSSO" ON STARTUP      *
************************************************************
*
SRC=#
************************************************************
* THE COMMAND RECOGNITION CHARACTER IS A POUND SIGN ('#')  *
************************************************************
*
MAXCMDS=15
************************************************************
* TSSO WILL HANDLE AT MOST 15 SIMULTANEOUS COMMANDS        *
************************************************************
*
MAXWTO=250
************************************************************
* TSSO WILL ISSUE AT MOST 250 WTOS FOR ANY ONE COMMAND     *
************************************************************
*
.pa
PROMPT=NO
************************************************************
* DO NOT PROMPT THE MVS OPERATOR FOR ADDITIONAL TSSO       *
* Parameters                                               *
************************************************************
*
SECSYS=RACF
***********************************************************************
* THE SECURITY SYSTEM IN USE WILL BE THE RESOURCE ACCESS CONTROL      *
* FACILITY.                                                           *
***********************************************************************
*
SECLEVEL=MINIMAL
***********************************************************************
* WE WILL BE USING THE "MINIMAL" LEVEL OF SECURITY.                   *
***********************************************************************
*
SUBSYS 9 = TSSOSS09
***********************************************************************
* THE "TSSOSS09" ROUTINE, SUPPLIED WITH TSSO, WILL BE PROCESSING      *
* THE WTO AND WTOR MESSAGES WHEN AOF IS ACTIVE. ANY OTHER SELECTION   *
* MAY CAUSE TSSO TO FAIL.                                             *
***********************************************************************
*
SUBSYS 10 = TSSOSS10
***********************************************************************
* THE "TSSOSS10" ROUTINE, SUPPLIED WITH TSSO, WILL BE PROCESSING      *
* THE MVS AND SUBSYSTEM COMMANDS. ANY OTHER SELECTION MAY MAKE TSSO   *
* FAIL.                                                               *
***********************************************************************
*
TIMEOUT = 30
***********************************************************************
* IF THE SECLEVEL PARAMETER IS EVER SET TO "MAX", CONSOLES WILL TIME  *
* OUT AFTER THIRTY MINUTES OF INACTIVITY.                             *
***********************************************************************
*
NUMCONS=10 DEDICATE
***********************************************************************
* TSSO WILL US A POOL OF 10 SUBSYSTEM CONSOLES FOR THE TSO AND NCCF   *
* VERSIONS OF OSCMD. ONE CONSOLE WILL BE DEDICATED TO THE TSSO        *
* ADDRESS SPACE.                                                      *
***********************************************************************
END
.pf
.fo on
:egdoc.
