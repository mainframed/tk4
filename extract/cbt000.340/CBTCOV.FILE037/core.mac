CORE     TITLE 'LOGICAL STORAGE DISPLAY ROUTINE'
&TSSO    SETC  'YES'               YES IF COMMAND FOR TSSO  *LBD 11/85*
*        FUNCTION - THIS ROUTINE WILL DISPLAY 1 TO 512 BYTES OF
*              LOGICAL STORAGE OF CURRENT ADDRESS SPACE ON
*              ISSUING CONSOLE.
*
*
*        INPUT -
*
*              CORE PARM1,PARM2     CONSOLE COMMAND
*
*              PARM 1 = ADDR OF 1ST BYTE OF DISPLAY (1-8 HEX CHAR).
*                  AD= MAY OPTIONALLY PRECEED PARM 1.
*
*              PARM 2 = 0-8 HEX CHAR FOR LENGTH OF DISPLAY.
*                  MAX VALUE = 200 HEX (BYTES)
*                  DEFAULT VALUE = 10 HEX (BYTES).
*
*
*        OUTPUT - ALL OUTPUT WILL BE DISPLAYED ON INPUT CONSOLE.
*
*
*        FORMAT - 1 OR MORE LINES OF 4 HEX WORDS WITH 16 BYTES
*              OF ALPHANUMERIC CHARACTERS.
*
*
*        EXTERNAL ROUTINES -
*
*              ESTAE - ESTABLISH RECOVERY ROUTINE
*              SETRP - SET RECOVERY OPTIONS
*              WTO - DISPLAY OUTPUT ON ISSUING CONSOLE
*              EXIT - RETURN TO SYSTEM
*
*
         EJECT
IGCZ303D AMODE 31                                           *LBD 11/85*
IGCZ303D RMODE 24                                           *LBD 11/85*
         AIF   ('&TSSO' EQ 'NO').NOTSSO1                    *LBD 11/85*
IGCZ303D MENTER 12,EQU,COM=CORE,CP=YES                      *LBD 11/85*
         L     R0,GSIZE                                     *LBD 11/85*
         GETMAIN R,LV=(0)                                   *LBD 11/85*
         LR    R2,R1               SAVE ADDR                *LBD 11/85*
         USING DSXSA,R2                                     *LBD 11/85*
         AGO   .TSSO1                                       *LBD 11/85*
.NOTSSO1 ANOP                                               *LBD 11/85*
IGCZ303D CSECT
         LR    R12,R15             LOAD PROGRAM BASE REG
         USING IGCZ303D,R12
         USING DSXSA,R2
         MODID BRANCH=YES
         SR    R13,R13             ZERO TERMINAL REG
         IC    R13,XAU             LOAD TERMINAL ID
         SPACE
.TSSO1   ANOP                                               *LBD 11/85*
         LA    R15,DEFAULT         LOAD DEFAULT BYTE COUNT
         ST    R15,XAS+4           SET DEFAULT LENGTH TO 1 LINE
*        CHECK INPUT PARMS
         SPACE
         AIF   ('&TSSO' EQ 'YES').TSSO2                     *LBD 11/85*
         L     R11,XAL             GET THE PARM POINTER FROM XSA
         LA    R11,0(R11)          CLEAR THE FLAG BYTE
         L     R10,XAR             GET THE COMMAND BUFFER LOCATION
         AGO   .NOTSSO2                                     *LBD 11/85*
.TSSO2   ANOP                                               *LBD 11/85*
         L     R10,CPPLCBUF        -> COMMAND BUFFER        *LBD 11/85*
         LH    R11,0(R10)          LOAD LEN                 *LBD 11/85*
         LH    R6,2(R10)           LOAD OFFSET              *LBD 11/85*
         AR    R10,R11             POINT TO END             *LBD 11/85*
         L     R11,CPPLCBUF                                 *LBD 11/85*
         LA    R11,4(R11)          SKIP CPPL HEADER         *LBD 11/85*
         AR    R11,R6              -> START OF COMMAND      *LBD 11/85*
         TESTAUTH FCTN=1           ARE WE AUTHORIZED        *LBD 11/85*
         LTR   R15,R15                                      *LBD 11/85*
         BNZ   NOTAUTH                                      *LBD 11/85*
         SETON AUTH                                         *LBD 11/85*
         MODESET KEY=ZERO,MODE=SUP                          *LBD 11/85*
NOTAUTH  DS    0H                                           *LBD 11/85*
         AGO   .SKTSSO2                                     *LBD 11/85*
.NOTSSO2 ANOP                                               *LBD 11/85*
         LA    R10,0(R10)          CLEAR THE LEADING BYTE
         LH    R6,0(R10)           GET LENGTH OF THE COMMAND BUFFER
         AR    R10,R6              COMPUTE THE END ADDRESS OF THE
*                                  COMMAND BUFFER
.SKTSSO2 ANOP                                               *LBD 11/85*
         SPACE
*        GET DISPLAY AREA ADDRESS
         SPACE
         BAL   R9,GETPARM          OBTAIN THE FIRST PARAMETER
         LTR   R0,R0               IS THERE A PARAMETER
         BZ    BADAD               ISSUE ERROR MESSAGE IF NOT
         SPACE
         CLC   0(3,R1),ADCON       IS THE PARM AD=
         BNE   NEWTYPE             IF NOT ASSUME NO KEYWORD
         AH    R1,THREE            POINT TO THE OPERAND
         SH    R0,THREE            AND REDUCE THE LENGTH
         BNP   BADAD               IF NO PARM QUIT
NEWTYPE  EQU   *
         LA    R14,BADAD           SET CONVERT ERROR ADDRESS
         BAL   R9,CONVERT          CONVERT THE OPERAND TO HEX
         ST    R8,XAS              SAVE DUMP START ADDRESS
         SPACE
*        GET LENGTH OF DISPLAY
         SPACE
         BAL   R9,GETPARM          GET THE COUNT OPERAND
         LTR   R0,R0               WAS THERE A COUNT
         BZ    SETESTAE            IF NOT USE DEFAULT
         LA    R14,BADL            SET CONVERT ERROR ADDRESS
         BAL   R9,CONVERT          CONVERT THE LENGTH TO HEX
         LTR   R8,R8               IS LENGTH VALUE ZERO
         BNP   SETESTAE            IF YES IGNORE & USE DEFAULT
         CH    R8,MAXLN            IS DISPLAY LENGTH VALID
         BH    BADL                IF NOT QUIT
         BCTR  R8,0                DECREMENT FOR EX ISN
         ST    R8,XAS+4            SAVE LENGTH
         SPACE
*        INITIALIZE RECOVERY ROUTINE FOR UNAVAILABLE ADDRESS
         SPACE
SETESTAE XC    XASAVLOC,XASAVLOC   ZERO PARM FIELD
         STM   R12,R13,XAP         SAVE PROGRAM BASE REG & CON ID
         ESTAE STAEEXIT,CT,PARAM=(R2),MF=(E,XASAVLOC)
         EJECT
*        PRINT OUTPUT
         SPACE
*        R8 CONTAINS ADDRESS OF CORE DUMPED
*        R9 CONTAINS LENGTH REMAINING - 1
         SPACE
PRINT    EQU   *
         LA    R4,15               LOAD LINE LENGTH FOR EX ISN
         LA    R7,16               LOAD LINE LENGTH
         LM    R8,R9,XAS           LOAD STARTING ADDRESS & LENGTH
         USING COREREC,R8
         SPACE
*        DISPLAY CONTROL LINE
         SPACE
         MVC   MSGHDR(CNTLLN),MSGCNTL  MOVE CONTROL LINE TO BUFFER
         ST    R8,XAR              STORE STARTING ADDRESS FOR UNPACK
         UNPK  MSGCTLAD(9),XAR(5)  CONVERT STARTING ADDRESS
         TR    MSGCTLAD,HEXTABLE   CONVERT ALPHA
         MVI   MSGCTLBK,BLANK      BLANK GARBAGE BYTE
         AIF   ('&TSSO' EQ 'YES').TSSO3                     *LBD 11/85*
         LR    R0,R13              LOAD CONSOLE ID REG
         WTO   MF=(E,MSGHDR)       DISPLAY CONTROL LINE
         AGO   .NOTSSO3                                     *LBD 11/85*
.TSSO3   ANOP                                               *LBD 11/85*
         LA    R1,MSGHDR                                    *LBD 11/85*
         BAL   R11,MSGRTN                                   *LBD 11/85*
         SPACE
*        INITIALIZE BUFFER FOR DISPLAY LINE
         SPACE
         LA    R1,HE-MSGHDR        LOAD DISPLAY LINE LENGTH
         STH   R1,MSGHDR           SET MSG LENGTH FOR DISPLAY LINE
         MVI   MSGBL2,BLANK        INITIALIZE BLANK FIELD
         MVI   MSGBL7,BLANK        INITIALIZE BLANK FIELD
         MVI   MSGDL1,STAR         INITIALIZE DELIMITER FIELD
         MVI   MSGDL2,STAR         INITIALIZE DELIMITER FIELD
         SPACE
*        CONVERT ADDRESS OF LINE
         SPACE
PRNTLOOP EQU   *
         ST    R8,XAR              STORE ADDRESS FOR UNPACK
         UNPK  MSGHEXAD(9),XAR(5)  CONVERT LINE ADDRESS
         TR    MSGHEXAD,HEXTABLE   CONVERT ALPHA
         MVI   MSGBL1,BLANK        BLANK GARBAGE BYTE
         SPACE
*        USE LINE EBCDIC SECTION AS BUFFER TO PREVENT 0C4 ABENDS
         SPACE
         CR    R9,R4               IS THIS A PARTIAL LINE
         BNL   COREMOVE            IF NOT USE MAX LINE LNGH
         LR    R4,R9               CHANGE LENGTH TO RESIDUAL COUNT
COREMOVE EX    R4,CORECOPY         MOVE LINE SEGMENT TO MESSAGE
         SPACE
*        CONVERT CORE TO 4 HEX WORDS
         SPACE
         UNPK  MSGHEX1(9),COREWD1(5)   CONVERT 1 WORD TO HEX
         TR    MSGHEX1,HEXTABLE    CONVERT ALPHA
         MVI   MSGBL3,BLANK        BLANK GARBAGE BYTE
         UNPK  MSGHEX2(9),COREWD2(5)   CONVERT 1 WORD TO HEX
         TR    MSGHEX2,HEXTABLE    CONVERT ALPHA
         MVI   MSGBL4,BLANK        BLANK GARBAGE BYTE
         UNPK  MSGHEX3(9),COREWD3(5)   CONVERT 1 WORD TO HEX
         TR    MSGHEX3,HEXTABLE    CONVERT ALPHA
         MVI   MSGBL5,BLANK        BLANK GARBAGE BYTE
         UNPK  MSGHEX4(9),COREWD4(5)   CONVERT 1 WORD TO HEX
         TR    MSGHEX4,HEXTABLE    CONVERT ALPHA
         MVI   MSGBL6,BLANK        BLANK GARBAGE BYTE
         SPACE
*        CONVERT EBCDIC SETION TO ALPHANUMERIC OR PERIODS
         SPACE
         LA    R1,MSGBCDIC         LOAD START OF BCDIC FIELD
         LA    R14,1               LOAD LOOP INCREMENT
         LA    R15,MSGBCDIC+15     LOAD END OF BCDIC FIELD
PRNTPERL EQU   *
         CLI   0(R1),BLANK         IS CHAR A BLANK
         BE    PRNTSKPD            CHAR IS VALID
         CLI   0(R1),C'A'          IS CHAR ALPHANUMERIC
         BL    PRNTPERD            CHAR IS INVALID CHANGE TO PERIOD
         CLI   0(R1),C'I'          IS CHAR ALPHANUMERIC
         BNH   PRNTSKPD            CHAR IS VALID
         CLI   0(R1),C'J'          IS CHAR ALPHANUMERIC
         BL    PRNTPERD            CHAR IS INVALID CHANGE TO PERIOD
         CLI   0(R1),C'R'          IS CHAR ALPHANUMERIC
         BNH   PRNTSKPD            CHAR IS VALID
         CLI   0(R1),C'S'          IS CHAR ALPHANUMERIC
         BL    PRNTPERD            CHAR IS INVALID CHANGE TO PERIOD
         CLI   0(R1),C'Z'          IS CHAR ALPHANUMERIC
         BNH   PRNTSKPD            CHAR IS VALID
         CLI   0(R1),C'0'          IS CHAR ALPHANUMERIC
         BL    PRNTPERD            CHAR IS INVALID CHANGE TO PERIOD
         CLI   0(R1),C'9'          IS CHAR ALPHANUMERIC
         BNH   PRNTSKPD            CHAR IS VALID
PRNTPERD MVI   0(R1),PERIOD        CHANGE INVALID CHAR TO A PERIOD
PRNTSKPD BXLE  R1,R14,PRNTPERL     LOOP THRU ENTIRE FIELD
         SPACE
*        DISPLAY 1 LINE
         SPACE
         C     R9,FIFTEEN          IS THIS THE LAST LINE
         BL    PARTLINE            IF SHORT BLANK END
         BE    PRNTLAST            IF YES GET OUT OF LOOP
PRNTLINE EQU   *
         AIF   ('&TSSO' EQ 'YES').TSSO4                     *LBD 11/85*
         LR    R0,R13              LOAD CONSOLE ID REG
         WTO   MF=(E,MSGHDR)       ISSUE MESSAGE TO CONSOLE
         AGO   .NOTSSO4                                     *LBD 11/85*
.TSSO4   ANOP                                               *LBD 11/85*
         LA    R1,MSGHDR                                    *LBD 11/85*
         BAL   R11,MSGRTN                                   *LBD 11/85*
.NOTSSO4 ANOP                                               *LBD 11/85*
         SPACE
*        LOOP TILL ALL BYTES ARE DISPLAYED
         SPACE
NEXTLINE EQU   *
         AR    R8,R7               BUMP ADDRESS TO NEXT CORE SEGMENT
         SR    R9,R7               DECREMENT BYTE COUNT
         B     PRNTLOOP            LOOP TILL ALL ARE PRINTED
         SPACE
*        BLANK END OF PARTIAL LINE
         SPACE
PARTLINE EQU   *
         LA    R9,1(R9)            BUMP COUNT TO TRUE VALUE
         LA    R1,MSGBCDIC(R9)     FIND DELIM ADDR
         LA    R15,MSGDL2          SET LOOP STOP ADDRESS
         MVI   0(R1),STAR          SET DELIMITER
         B     *+8                 SKIP NEXT ISN
BLANKBCD MVI   0(R1),BLANK         BLANK BYTE
         BXLE  R1,R14,BLANKBCD     LOOP THRU ALL BYTES TO BLANK
         SPACE
         SLL   R9,1                DOUBLE BYTE COUNT
         LA    R1,MSGHEX1(R9)      FIND INITIAL START ADDRESS
         SRL   R9,3                DEVIDE BY 8 FOR WORD COUNT
         AR    R1,R9               INCLUDE COUNT FOR WORDS
         LA    R15,MSGBL7-1        SET LOOP STOP ADDRESS
BLANKHEX MVI   0(R1),BLANK         BLANK BYTE
         BXLE  R1,R14,BLANKHEX     LOOP THRU ALL BYTES TO BLANK
         SPACE
*        DISPLAY LAST LINE
         SPACE
PRNTLAST EQU   *
         AIF   ('&TSSO' EQ 'YES').TSSO5                     *LBD 11/85*
         LR    R0,R13              LOAD CONSOLE ID REG
         WTO   MF=(E,MSGHDR)       ISSUE MESSAGE TO CONSOLE
         AGO   .NOTSSO5                                     *LBD 11/85*
.TSSO5   ANOP                                               *LBD 11/85*
         LA    R1,MSGHDR                                    *LBD 11/85*
         BAL   R11,MSGRTN                                   *LBD 11/85*
.NOTSSO5 ANOP                                               *LBD 11/85*
         SPACE
         AIF   ('&TSSO' EQ 'YES').TSSO6                     *LBD 11/85*
PRNTCOMP SVC   EXIT                RETURN TO SYSTEM
         AGO   .NOTSSO6                                     *LBD 11/85*
.TSSO6   ANOP                                               *LBD 11/85*
PRNTCOMP DS    0H                                           *LBD 11/85*
         IFOFF AUTH,DOFREE                                  *LBD 11/85*
         MODESET KEY=NZERO,MODE=PROB   BACK TO NORMAL STATE *LBD 11/85*
DOFREE   DS    0H                                           *LBD 11/85*
         L     R0,GSIZE                                     *LBD 11/85*
         FREEMAIN R,LV=(0),A=(2)                            *LBD 11/85*
         MLEAVE                                             *LBD 11/85*
GSIZE    DC    A(HE-XSA)                                    *LBD 11/85*
.NOTSSO6 ANOP                                               *LBD 11/85*
         EJECT
*        STAE EXIT & RETRY ROUTINES
         SPACE
         USING *,R15
STAEEXIT C     R0,F12              IS A SDWA PRESENT
         BE    EXITRET             IF NOT SKIP SETRP
         USING SDWA,R1
         L     R0,SDWAPARM         LOAD ESTAE PARM ADDRESS
         ST    R0,SDWASR01         CHANGE R1 TO PARM ADDRESS
         SETRP RC=4,RETREGS=YES,FRESDWA=YES,RETADDR=RETRY
         BR    R14                 RETURN TO SYSTEM
         DROP  R1
         SPACE
EXITRET  LA    R0,RETRY            LOAD RETRY ROUTINE ADDRESS
         LA    R15,4               LOAD RETRY OPTION
         BR    R14                 RETURN TO SYSTEM
         SPACE
RETRY    LR    R2,R1               RESTORE XSA BASE
         LM    R12,R13,XAP         RESTORE PGM BASE & CON ID
         DROP  R15
         SPACE
*        PRINT ERROR MESSAGE
         SPACE
ADUNAVL  EQU   *
         AIF   ('&TSSO' EQ 'YES').TSSO7                     *LBD 11/85*
         LR    R0,R13              ZERO CONSOLE ID REG
         WTO   MF=(E,ERRMSG1)      DISPLAY ERROR MSG
         SVC   EXIT                RETURN TO SYSTEM
         AGO   .NOTSSO7                                     *LBD 11/85*
.TSSO7   ANOP                                               *LBD 11/85*
         LA    R1,ERRMSG1                                   *LBD 11/85*
         BAL   R11,MSGRTN                                   *LBD 11/85*
         B     PRNTCOMP                                     *LBD 11/85*
.NOTSSO7 ANOP                                               *LBD 11/85*
         SPACE
BADAD    EQU   *
         AIF   ('&TSSO' EQ 'YES').TSSO8                     *LBD 11/85*
         LR    R0,R13              LOAD CONSOLE ID REG
         WTO   MF=(E,ERRMSG2)      DISPLAY ERROR MSG
         SVC   EXIT                RETURN TO SYSTEM
         AGO   .NOTSSO8                                     *LBD 11/85*
.TSSO8   ANOP                                               *LBD 11/85*
         LA    R1,ERRMSG2                                   *LBD 11/85*
         BAL   R11,MSGRTN                                   *LBD 11/85*
         B     PRNTCOMP                                     *LBD 11/85*
.NOTSSO8 ANOP                                               *LBD 11/85*
         SPACE
BADL     EQU   *
         AIF   ('&TSSO' EQ 'YES').TSSO9                     *LBD 11/85*
         LR    R0,R13              LOAD CONSOLE ID REG
         WTO   MF=(E,ERRMSG3)      DISPLAY ERROR MSG
         SVC   EXIT                RETURN TO SYSTEM
         AGO   .NOTSSO9                                     *LBD 11/85*
.TSSO9   ANOP                                               *LBD 11/85*
         LA    R1,ERRMSG3                                   *LBD 11/85*
         BAL   R11,MSGRTN                                   *LBD 11/85*
         B     PRNTCOMP                                     *LBD 11/85*
.NOTSSO9 ANOP                                               *LBD 11/85*
         SPACE
*        PROGRAM MESSAGES
         SPACE
MSGCNTL  DC    AL2(CM-*),X'6000'
         DC    C'NARCOR1 00000000 CORE STORAGE DISPLAY'
CM       EQU   *
CNTLLN   EQU   *-MSGCNTL           TOTAL MSG LENGTH
         SPACE
ERRMSG1  DC    Y(EM1-*),X'6000'
         DC    C'NARCOR4 ADDRESS NOT AVAILABLE'
EM1      EQU   *
         SPACE
ERRMSG2  DC    Y(EM2-*),X'6000'
         DC    C'NARCOR2 INVALID AD PARM'
EM2      EQU   *
         SPACE
ERRMSG3  DC    Y(EM3-*),X'6000'
         DC    C'NARCOR3 INVALID L PARM'
EM3      EQU   *
         AIF   ('&TSSO' EQ 'NO').NOMSGRTN                   *LBD 11/85*
         EJECT
MSGRTN   DS    0H                                           *LBD 11/85*
         MVC   PLINE+4,BLANKS                               *LBD 11/85*
         LH    R3,0(R1)            * LOAD LENGTH            *LBD 11/85*
         SH    R3,=H'05'           * -4 (WTO HDR) -1 (MVC)  *LBD 11/85*
         EX    R3,MVCPLINE         * MOVE TO PUTLINE        *LBD 11/85*
         LA    R3,5(R3)            * ADD THE 5 BACK         *LBD 11/85*
         STH   R3,PLINE            * STORE PUTLINE LEN      *LBD 11/85*
         PUTLINE PARM=PUTBLOK,OUTPUT=(PLINE,TERM,SINGLE,    *LBD 11/85*X
               DATA),MF=(E,IOPLADS)                         *LBD 11/85*
         BR    R11                                          *LBD 11/85*
MVCPLINE MVC   PLINE+4(0),4(R1)    *** EXECUTED             *LBD 11/85*
PLINE    DC    H'80',H'00'                                  *LBD 11/85*
         DC    CL80' '                                      *LBD 11/85*
BLANKS   DC    CL80' '                                      *LBD 11/85*
.NOMSGRTN ANOP                                              *LBD 11/85*
         EJECT
***********************************************************************
*
GETPARM  DS    0H                  GETPARM SUBROUTINE
*        THIS ROUTINE HANDLES THE SCANING OF THE INPUT PARAMETERS.
*        THE INPUTS REQUIRED ARE,
*        1. REGISTER 11 POINTING TO THE DELIMITER BETWEEN PARMS
*              OR THE FIRST CHARACTER OF THE FIRST PARAMETER.
*        2. REGISTER 10 POINTING TO THE END OF THE COMMAND BUFFER.
*        3. REGISTER 9 POINTING TO THE RETURN POINT.
*        THE OUTPUTS ARE,
*        1. REGISTER 1 POINTING TO THE CURRENT PARAMETER START.
*        2. REGISTER 0 CONTAINING THE LENGTH OF THE CURRENT PARM.
*              A LENGTH OF ZERO INDICATES NO PARAMETER.
*                                                                     *
***********************************************************************
         SR    R0,R0               CLEAR THE COUNT REGISTER
         LTR   R11,R11             IS THERE A PARAMETER
         BZR   R9                  IF NOT RETURN
         CLI   0(R11),COMMA        IS THE CURRENT CHAR. A DELIMITER
         BE    GET000              BRANCH IF YES
         SPACE
         CLI   0(R11),BLANK        IS THIS THE END OF THE PARM
         BER   R9                  IF YES RETURN
         SPACE
         B     GET001
         SPACE 2
GET000   LA    R11,1(R11)          POINT TO THE NEXT PARM
GET001   CR    R11,R10             IS THIS THE END OF THE BUFFER
         BNLR  R9                  IF YES RETURN
         SPACE
         CLI   0(R11),COMMA        IS THIS BYTE A PARM DELIMITER
         BER   R9                  IF YES RETURN
         SPACE
         LR    R1,R11              PLACE THE PARM START ADDRESS IN
*                                  REGISTER 1
GET002   AH    R0,ONE              INCREMENT THE CHARACTER COUNT
*                                  BY 1, THE COUNT =ZERO FIRST TIME
         LA    R11,1(R11)          STEP TO THE NEXT
*                                  PARAMETER CHARACTER
         CR    R11,R10             IS THIS END OF THE COMMAND BUFER
         BNLR  R9                  IF YES RETURN
         SPACE
         CLI   0(R11),BLANK        IS THIS THE END OF THE PARMS
         BER   R9                  IF YES RETURN
         SPACE
         CLI   0(R11),COMMA        IS THIS A PARAMETER DELIMITER
         BNE   GET002              BRANCH IF NOT
         SPACE
         BR    R9                  RETURN TO THE CALLER
         EJECT
***********************************************************************
CONVERT  DS    0H                  CONVERT SUBROUTINE
*        THIS ROUTINE CONVERTS PSEUDOHEX CHARACTERS INTO TRUE HEX
*        BYTES.
*        INPUTS.
*        1. REGISTER 1 POINTING TO THE PSEUDOHEX DATA.
*        2. REGISTER 0 CONTAINING THE BYTE COUNT OF THE INPUT.
*        3. REGISTER 9  POINTING TO THE RETURN POINT.
*        OUTPUTS.
*        2. REGISTER 3, 4, AND 5 VARY.
*
***********************************************************************
         CH    R0,EIGHT                 IS THELENGTH VALID
         BHR   R14                 IF NOT GO TO ERROR MSG
         LTR   R3,R0               COPY & CHECK LENGTH
         BNPR  R14                 IF NOT VALID GO TO ERROR MSG
         LR    R4,R1                    COPY THE ADDRESS
         SR    R5,R5                    CLEAR A WORK REG
         SR    R8,R8                    CLEAR THE OUTPUT REG
LOOP     SLL   R8,4                     SHIFT THE PARTIAL DATA FOR NEXT
         OI    0(R4),C' '          INSURE UPPER CASE        *LBD 11/85*
         IC    R5,0(R4)                 GET THE NEXT INPUT BYTE
         N     R5,FIFTEEN               CLEAR THE FLAG BYTE
         CLI   0(R4),ZERO               IS THE DATA NUMERIC
         BNL   SKIP                     BRANCH IF YES
         CLI   0(R4),ABLE               IS THE DAT BYTE VALID
         BLR   R14                 IF NOT GO TO ERROR MSG
         CLI   0(R4),EFF                IS THE DATA BYTE VALID
         BHR   R14                 IF NOT GO TO ERROR MSG
         LA    R5,9(R5)                 CONTERT TO INTERNAL HEX
SKIP     OR    R8,R5                    OR IN THE DATA BYTE
         LA    R4,1(R4)                 POINT TO THE NEXT INPUT
         BCT   R3,LOOP                  GO GET THE NEXT BYTE
         BR    R9                       RETURN TO THE CALLER
         EJECT
         AIF   ('&TSSO' EQ 'YES').NOR                       *LBD 11/85*
         REGEQU
.NOR     ANOP                                               *LBD 11/85*
DEFAULT  EQU   15                  DEFAULT LINE LENGTH - 1
BLANK    EQU   C' '
STAR     EQU   C'*'                MESSAGE EBCDIC DELIMITER
PERIOD   EQU   C'.'
EQUAL    EQU   C'='
COMMA    EQU   C','
ZERO     EQU   C'0'
ABLE     EQU   C'A'
EFF      EQU   C'F'
EXIT     EQU   3                   EXIT SVC NUMBER
CORECOPY MVC   COREWD1(0),COREDATA COPY CORE RECORD TO MESSAGE
HEXTABLE EQU   *-240
TRANSTAB DC    C'0123456789ABCDEF'
ENTRYAD  DC    A(IGCZ303D)         ENTRY POINT ADDRESS
F12      DC    F'12'
FIFTEEN  DC    F'15'
ONE      DC    H'1'
THREE    DC    H'3'
FOUR     DC    H'4'
EIGHT    DC    H'8'
MAXLN    DC    H'512'              MAXIMUM CORE DISPLAYED
ADCON    DC    C'AD='
         SPACE 2
COREREC  DSECT
COREDATA DS    CL16
         EJECT
DSXSA    DSECT
         IEEXSA
         ORG   XASAVSTD
MSGHDR   DC    AL2(HE-*),X'6000'
MSGTEXT  DC    C'NARCOR1 '
MSGCTLAD DC    CL8'00000000'       STARTING ADDRESS OF DISPLAY
MSGCTLBK DC    C' '                BLANK FIELD
         DC    C'CORE STORAGE DISPLAY'
         ORG   MSGTEXT
MSGHEXAD DC    CL8'00000000'       HEX ADDRESS
MSGBL1   DC    C' '                BLANK FIELD
MSGBL2   DC    C' '                BLANK FIELD
MSGHEX1  DC    C'00000000'         HEX WORD
MSGBL3   DC    C' '                BLANK FIELD
MSGHEX2  DC    C'00000000'         HEX WORD
MSGBL4   DC    C' '                BLANK FIELD
MSGHEX3  DC    C'00000000'         HEX WORD
MSGBL5   DC    C' '                BLANK FIELD
MSGHEX4  DC    C'00000000'         HEX WORD
MSGBL6   DC    C' '                BLANK FIELD
MSGBL7   DC    C' '                BLANK FIELD
MSGDL1   DC    C'*'                EBCDIC DELIMITER
MSGBCDIC DS    0CL16               EBCDIC FIELD
COREWD1  DS    XL4                 HEX WORD
COREWD2  DS    XL4                 HEX WORD
COREWD3  DS    XL4                 HEX WORD
COREWD4  DS    XL4                 HEX WORD
MSGDL2   DC    C'*'                EBCDIC DELIMITER
         BITSW AUTH                                         *LBD 11/85*
HE       EQU   *
         EJECT
         IHASDWA
         AIF   ('&TSSO' EQ 'NO').NOIOP                      *LBD 11/85*
         EJECT                                              *LBD 11/85*
         IKJIOPL                                            *LBD 11/85*
.NOIOP   ANOP                                               *LBD 11/85*
         END
