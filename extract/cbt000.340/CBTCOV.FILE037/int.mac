INT      TITLE ' I/O ENDING STATUS DISPLAY MODULE'
* FUNCTION.
*
*        THIS ROUTINE WILL DISPLAY DEVICE ENDING STATUS FROM
*        TRACE TABLE DATA.  INDIVIDUAL ENTRIES WILL BE DISPLAYED
*        FROM MOST CURRENT TO OLDEST.  DATA WILL BE EXTRACTED FROM
*        I/O INT AND SSCH ENTRIES. ONLY NON ZERO SSCH ENTRIES WILL BE
*        USED.  IF ASID IS SPECIFIED IT WILL BE APPENDED TO EACH
*        ENTRY.  IF MORE THAN 1 CPU IS ACTIVE THE CPU NUMBER WILL BE
*        ADDED TO THE STATUS DATA.
*
*        APPLICABILITY
*
*              MVS/XA ONLY, THIS PROGRAM RUNS IN 31 BIT MODE.....
*
*        INPUT
*
*              INT
*
*                 OR
*
*              INT ASID
*
*        OUTPUT
*
*              DISPLAY WILL BE PRINTED ON ISSUING COMMAND'S CONSOLE
*
*        OUTPUT FORMAT
*
*        UNI   DEV-STATUS OR DEV-SIO CONDITION CODE ( CC=2 OR 3 ONLY )
*        UNI   DEV-STAT/ASID OR DEV-CC=X/ASID  X =2/3
*        MP    DEV-STAT(N) OR DEV-CC=X(N)  X = 2/3  N = CPU NUMBER
*        MP    DEV-STAT(N)/ASID OR DEV-CC=X(N)/ASID  X = 2/3  N = CPU
*
*        ERROR MESSAGES
*
*              INVALID TRACE LIMIT PARM ( NON DECIMAL OR TOO LONG )
*              TRACE OFF
*              TRACE TABLE DISABLED
*              NO I/O ENTRIES FOUND IN TRACE TABLE
INT      AMODE  31
INT      RMODE  24
INT      MENTER 12,EQU,COM=INT,CP=YES
         L     R0,GETSIZE          FIND GETMAIN SIZE          01/86
         GETMAIN R,LV=(0)          GET SOME CORE              01/86
         ST    R1,COREADDR         SAVE CORE ADDR             01/86
         USING PSA,R0                   THE
         USING CVT,R1                       ASSEMBLER
*
*        CHECK TRACE TABLE VALIDITY
*
         L     R1,CVTPTR           LOAD CVT BASE REG
*        TM    CVTGTFST,CVTGTFAV   IS GTF ACTIVE            *LBD 02/86*
*        BO    GTFON               IF YES GET OUT           *LBD 02/86*
*
*        CHECK INPUT PARMS
*
CHKPARMS EQU   *
         SR    R6,R6               CLEAR REG 6
         L     R3,CPPLCBUF         GET COMMAND ENTRY BUFFER
         LH    R8,2(R3)            OFFSET TO PARMS
         LA    R3,4(R3)            PAST HEADER
         AR    R3,R8               ADD OFFSET
         MVC   PARMDATA(10),0(R3)                           *LBD 01/86*
         OC    PARMDATA,=CL10' '                            *LBD 01/86*
         CLI   PARMDATA,C' '                                *LBD 01/86*
         BE    SETOPTN             NOPE, -->                  01/86
         LH    R1,0(R3)            LOAD LENGTH
         SR    R1,R8               LENGTH MINUS OFFSET
         SH    R1,=H'3'            MINUS THE HEADER           01/86
         LR    R10,R3              GET PARM ADDR              01/86
         AR    R10,R1              ADD LENGTH TO FIND THE END 01/86
         LA    R5,MAXTRACE         LOAD DEFAULT TRACE LIMIT
         LR    R11,R3              SAVE R3 ADDRESS            01/86
         BAL   R9,GETPARM          -->  GET THECOUNT PARM
         LTR   R15,R0              CHECK PARM LENGTH
         BM    BADPARM             -->  BRANCH IF SUBSTRING
         BZ    CHKASID             IF NOT SPECIFIED USE DEFAULT
         LA    R14,MAXPARM         LOAD MAX PARM LENGTH
         CR    R15,R14             IS LENGTH VALID
         BH    BADPARM             IF NOT ISSUE ERROR MSG
         BL    NUMCHK              IF LESS THAN 4 SKIP ASID CHK
         OC    0(4,R1),=C'    '    MAKE IT UPPER CASE         01/86
         CLC   ASID,0(R1)          IS PARM 'ASID'
         BE    SETASID             IF YES ASSUME DISPLAY COUNT MISSING
NUMCHK   BCTR  R15,0               DECREMENT LENGTH FOR EX ISN
         MVC   DBLWRD2(MAXPARM),0(R1) MOVE PARM FOR ZONE CHECK
         NC    DBLWRD2+1(MAXPARM-1),DBLWRD2 CHECK FOR NUMERIC
         LA    R14,DBLWRD2(R15)    FIND LAST BYTE ADDRESS
         TM    0(R14),X'F0'        ARE ALL BYTES NUMERIC
         BNO   BADPARM             IF NOT ISSUE ERROR MSG
         EX    R15,PARMPACK        PACK MAX INT COUNT FROM PARM
         CVB   R5,DBLWRD2          CONVERT TRACE LIMIT
         LTR   R5,R5               IS VALUE VALID
         BNP   BADPARM             IF NOT ISSUE ERROR MESSAGE
         LA    R14,MAXTRACE        LOAD MAXIMUM TRACE LIMIT
         CR    R5,R14              IS SPECIFIED LIMIT VALID
         BNH   CHKASID             IF YES USE IT
         LR    R5,R14              SET TRACE LIMIT TO MAXIMUM
*
*        CHECK ASID DISPLAY PARM
*
CHKASID  BAL   R9,GETPARM          GO GET NEXT PARM
         CH    R0,H4               IS PARM PRESENT
         BNE   SETOPTN             GO SET DISPLAY OPTION
         CLC   ASID,0(R1)          IS ASID DISPLAY SPECIFIED
         BNE   SETOPTN             IF NOT DON'T CHANGE OPTION REG
SETASID  LA    R6,4(R6)            CHANGE OPTION REG TO INCLUDE ASID
*
*        SET OPTION FOR UNI OR MP SYSTEM
*
SETOPTN  DS    0H
         L     R1,CVTPTR           LOAD CVT BASE REG
         L     R15,CVTCSD          LOAD CSD BASE REG
         USING CSD,R15             TELL THE ASSEMBLER
         LH    R1,CSDCPUOL         LOAD NUMBER OF CPU'S ALIVE
         CH    R1,H1               IS ONLY 1 CPU ALIVE
         BE    DISPHEAD            IF NOT DON'T CHANGE OPTION REG
         LA    R6,8(R6)            CHANGE OPTION REG TO INCLUDE CPU NO
*
*        DISPLAY HEADING
*
DISPHEAD DS    0H
         L     R1,HEADAD(R6)       LOAD PROPER HEADING ADDRESS
         BAL   R9,PUTLINE          --> PRINT MSG              01/86
*
*        INITIALIZE DISPLAY MSG
*
         L     R1,MSGCONS(R6)      LOAD MSG LENGTH & FLAGS
         ST    R1,MSGHDR           STORE INTO MSG
         MVC   MSGTEXT,MSGID       MOVE MSG ID NUMBER
*
*        CALCULATE NUMBER OF DISPLAY LINES
*
         SR    R4,R4               ZERO REG FOR DIVISION
         A     R5,ENTCNT(R6)       ADD ENTRIES / LINE
         BCTR  R5,0                DECREMENT BY ONE
         D     R4,ENTCNT(R6)       FIND NUMBER OF DISPLAY LINES
         L     R4,ENTCNT(R6)       LOAD ENTRIES / LINE
         LA    R10,MSGDEV1         INITIALIZE MSG INDEX
         USING MSGDEV1,R10         TELL THE ASSEMBLER
*
*        DISPLAY ENDING I/O STATUS FROM TRACE TABLE
*
*        R4 CONTAINS NUMBER OF ENTRIES LEFT IN LINE
*        R5 CONTAINS NUMBER OF LINES LEFT TO DISPLAY
*        R6 CONTAINS OPTIONS
*        R10 CONTAINS ADDRESS OF NEXT ENTRY IN LINE
*
         USING TRVT,R3             TELL                       01/86
         USING TBVT,R7                  THE                   01/86
         USING TTE,R8                       ASSEMBLER         01/86
         USING WORKAREA,R11
*
GETINT   EQU   *
         LA    R0,0                GET PSA ADDR
         L     R11,COREADDR        GET ADDRESS OF WORKAREA    01/86
         L     R3,PSATRVT          GET TRACE VECTOR TABLE ADDR
         L     R3,TRVTTOB          GET TRACE OPTION BLOCK ADDR
         USING TOB,R3              TELL THE ASSEMBLER         01/86
         MVC   HISASID,TOBASID     SAVE THE TRACE ASID        01/86
         TM    TOBTRFG1,TOBSTACT   IS TRACE ACTIVE            01/86
         BZ    INACTIVE            NOPE, --> INACTIVE         01/86
         L     R3,TOBPEAD          GET TRACE OPTION BLOCK AD  01/86
GETTBVT  DS    0H
         USING TOBPE,R3            TELL THE ASSEMBLER         01/86
         L     R7,TOBPTBVT         GET TRACE BUFFER VECTOR TBL01/86
         LTR   R7,R7                                          01/86
         BZ    INTCOMP                                        01/86
         MVC   NUMBUFS,TOBPBUF     GET # OF TRACE BUFFERS     01/86
         ESAR  R1                  GET MY SECONDARY ASID      01/86
         ST    R1,MYASID           SAVE IT                    01/86
GETTBUF  DS    0H                                             01/86
         MODESET KEY=ZERO,MODE=SUP SUPERVISOR STATE           01/86
         AXSET AX=H1               SET A/S INDEX              01/86
         LH    R14,HISASID         GET TRACE ASID             01/86
         SSAR  R14                 SET SECONDARY ASID         01/86
         LA    R1,L'MYTBVT         GET THE LENGTH OF MY TBVT  01/86
         LA    R2,MYTBVT           AND ITS ADDRESS            01/86
         MVCP  0(R1,R2),0(R7),R0   MOVE TRACE TBVT TO MINE    01/86
         LA    R7,MYTBVT           GET MY ADDRESS             01/86
         L     R8,TBVTBUFV         GET THE TRACE BUFFER ADDR  01/86
         LTR   R8,R8               IS ONE THERE?              01/86
         BZ    MVCPDONE            NOPE, -->                  01/86
         MVC   CPUNUM,TBVTPID      GET CPU NUMBER             01/86
         L     R1,MYTBUFSZ         GET TRACE BUFFER SIZE      01/86
         LA    R2,MYTBUF           GET MY TRACE BUFF ADDR     01/86
MVCPLOOP DS    0H                                             01/86
         SLR   R15,R15             CLEAR REG15                01/86
         MVCP  0(R1,R2),0(R8),R15  MOVE THE BUFFER TO MINE    01/86
         LTR   R15,R15             IS THE MOVE COMPLETE       01/86
         B     MVCPDONE            YEP, -->                   01/86
         OI    FLAG,TRCTBLOK       SET TRACE TBL FOUND FLAG
         S     R1,=F'256'          SUBTRACT MAX FROM COUNT    01/86
         LA    R2,256(R2)          BUMP MY BUFFER             01/86
         LA    R8,256(R8)          AND HIS                    01/86
         B     MVCPLOOP            AND MOVE AND SOME MORE     01/86
MVCPDONE DS    0H                                             01/86
         L     R1,MYASID           GET MY ASID                01/86
         SSAR  R1                  RESET MY SECONDARY ASID    01/86
         MODESET KEY=NZERO,MODE=PROB   BECOME A REGULAR TASK  01/86
         LTR   R8,R8               IS THERE A TRACE BUFFER    01/86
         BZ    INTCOMP             NOPE, -->                  01/86
         LA    R7,MYTBVT           GET MY TBVT ADDR           01/86
         LA    R8,MYTBUF           GET MY TBUF ADDR           01/86
         L     R1,MYTBUFSZ         GET LENGTH OF BUFFER       01/86
         AR    R1,R8               CALCULATE END OF MY BUFFER 01/86
         ST    R1,MAXTBUFF         AND SAVE IT                01/86
*
*        GET INTERRUPTS TO END OF TRACE TABLE
*
CHKTTE   DS    0H
         TM    TTETYPE,X'70'       IS THIS AN EXPLICIT TTE
         BZ    CHKTTE1             NOPE, -->
         CLC   SSCHTTE,TTEXPTYP    IS THIS A SSCH TYPE        01/86
         BE    SSCHTYPE            YEP, -->                   01/86
         CLC   IOTTE,TTEXPTYP      IS THIS A IO INTERRUPT     01/86
         BE    IOTYPE              YEP, -->
CHKTTE1  DS    0H
         LA    R2,TTELTBL          GET TTE LENGTH TABLE       01/86
CHKTTE2  DS    0H                                             01/86
         CLC   TTETYPE,0(R2)       IS THIS TYPE IN THE TABLE  01/86
         BE    CHKTTE3             NOPE, -->                  01/86
         LA    R2,3(R2)            BUMP TABLE INDEX           01/86
         CLI   0(R2),X'FF'         END OF TABLE?              01/86
         BNE   CHKTTE2             NOPE, -->                  01/86
CHKTTE3  DS    0H                                             01/86
         LH    R1,1(R2)            GET THE LENGTH OF THIS TTE 01/86
         LA    R8,0(R1,R8)         ADD IT TO FIND NEXT TTE    01/86
         C     R8,MAXTBUFF         AT END OF BUFFER?          01/86
         BL    CHKTTE              NOPE, -->                  01/86
         L     R7,TBVTNXTV         GET NEXT TBVT ADDR
         LH    R1,NUMBUFS          GET NUMBER OF BUFFERS      01/86
         SH    R1,H1               SUBTRACT ONE               01/86
         STH   R1,NUMBUFS          SAVE IT                    01/86
         LTR   R1,R1               WAS IT ZERO?               01/86
         BNZ   GETTBUF             NOPE, -->                  01/86
         LA    R3,32(R3)           PT TO NEXT PROCESSOR TBVT  01/86
         B     GETTBVT             AND GET IT                 01/86
*
*        FOUND GOOD DATA
*
SSCHTYPE DS    0H                                             01/86
         TM    TTE001CC,0          CHECK SIO CC
         BZ    CHKTTE1             SKIP ALL ZERO SIO ENTRIES
         UNPK  MSGDEV1(4),TTE001DN(3) CONVERT DEVICE ADDRESS
         TR    MSGDEV1,HEXTABLE    CONVERT ALPHA
         CLI   TTE001CC,X'20'      IS THIS ENTRY SIO CC=2
         BL    SETSTAT             IF CC=1 GO CONVERT STATUS
         MVC   MSGSTAT1,CC2        MOVE CC=2 TO MESSAGE
         BE    CHKFMT              IF YES GO CHECK LINE FORMAT
         MVI   MSGSTAT1+3,C'3'     CHANGE COND CODE TO 3
         B     CHKFMT              GO CHECK LINE FORMAT
IOTYPE   DS    0H
         UNPK  MSGDEV1(4),TTE00BDN(3) CONVERT DEVICE ADDRESS
         TR    MSGDEV1,HEXTABLE    CONVERT ALPHA
*
*        CONVERT CSW STATUS
*
SETSTAT  DS    0H                                             01/86
         UNPK  MSGSTAT1(5),TTE00BDS(3)  CONVERT CSW STATUS
         TR    MSGSTAT1,HEXTABLE   CONVERT ALPHA
*
*        CHECK ENTRY FORMAT
*
CHKFMT   MVI   MSGDL1,DASH         SET FIELD SEPARATOR
         B     *+4(R6)             INDEX TO PROPER ENTRY
         B     SETFMT1             GO FORMAT ENTRY
         B     SETFMT2             GO FORMAT ENTRY
         B     SETFMT3             GO FORMAT ENTRY
         B     SETFMT4             GO FORMAT ENTRY
SETFMT1  MVI   MSGBL1,BLANK        OVERLAY GARBAGE BYTE
         B     NEXTENT             ENTRY IS COMPLETE GO TO NEXT
SETFMT2  MVI   MSGSL1,SLASH        SET ASID FIELD DELIMITER
         UNPK  MSGASID1(5),TTE00BHA(3) CONVERT ASID
         TR    MSGASID1,HEXTABLE   CONVERT ALPHA
         MVI   MSGBL2,BLANK        OVERLAY GARBAGE BYTE
         B     NEXTENT             ENTRY IS COMPLETE GO TO NEXT
SETFMT3  MVI   MSGLP1,LTPAREN      SET CPU NUMBER FIELD DELIMITER
         MVC   MSGCPU1,CPUNUM+1    MOVE CPU NUMBER TO MSG
         NI    MSGCPU1,CPUNOMSK    ZERO 1ST HALF OF BYTE
         TR    MSGCPU1,TRANSTAB    TRANSLATE TO ALPHA
         MVI   MSGRP1,RTPAREN      SET CPU NUMBER FIELD DELIMITER
         MVI   MSGBL3,BLANK        OVERLAY GARBAGE BYTE
         B     NEXTENT             ENTRY IS COMPLETE GO TO NEXT
SETFMT4  MVI   MSGLP1,LTPAREN      SET CPU NUMBER FIELD DELIMITER
         MVC   MSGCPU1,CPUNUM      MOVE CPU NUMBER TO MSG
         NI    MSGCPU1,CPUNOMSK    ZERO 1ST HALF OF BYTE
         TR    MSGCPU1,TRANSTAB    TRANSLATE TO ALPHA
         MVI   MSGRP1,RTPAREN      SET CPU NUMBER FIELD DELIMITER
         MVI   MSGSL2,SLASH        SET ASID FIELD DELIMITER
         UNPK  MSGASID2(5),TTE00BHA(3) CONVERT ASID
         TR    MSGASID2,HEXTABLE   CONVERT ALPHA
         MVI   MSGBL4,BLANK        OVERLAY GARBAGE BYTE
*
*        INCREMENT TO NEXT ENTRY & RETURN
*
NEXTENT  DS    0H                                             01/86
         A     R10,ENTLN(R6)       BUMP BASE TO NEXT ENTRY
         OI    FLAG,IOFOUND        SET I/O FOUND FLAG
         BCT   R4,CHKTTE1          RETURN IF LINE IS INCOMPLETE
*
*        DISPLAY FULL LINE
*
PRNTLINE EQU   *
         LA    R1,MSGHDR           GET MSG ADDR
         BAL   R9,PUTLINE          --> PRINT MSG              01/86
*
*        RESTORE LINE COUNT & BASE REGS
*
         L     R4,ENTCNT(R6)       LOAD ENTRIES / LINE
         DROP  R10                 GIVE BACK THE REGISTER
         LA    R10,MSGDEV1         INITIALIZE MSG INDEX
         BCT   R5,CHKTTE1          RETURN IF MAX LINES NOT EXCEEDED
*
*        MAX DISPLAY LINES REACHED... EXIT
*
         B     EXIT                RETURN TO SYSTEM
*
*        ALL DONE
*
INTCOMP  EQU   *
         TM    FLAG,IOFOUND        WAS ANY IO FOUND
         BZ    NOIO                IF NOT GO DISPLAY MSG
*
*        REDUCE MESSAGE LENGTH FOR PARTIAL LINE
*
PRNTEND  EQU   *
         C     R4,ENTCNT(R6)       ANY ENTRIES IN MSG
         BE    PRNTCOMP            IF NOT ALL OUTPUT IS COMPLETE
         LA    R1,MSGHDR           LOAD START OF MSG
         SR    R10,R1              FIND NEW LENGTH OF LINE
         BCTR  R10,0               DECREMENT TO TRUE LENGTH
         STH   R10,MSGHDR          SET CORRECT LINE LENGTH
*
*        PRINT PARTIAL LINE & EXIT
*
PRNTLAST EQU   *
         LA    R1,MSGHDR           GET ADDRESS OF MSG TEXT
         BAL   R9,PUTLINE          --> PRINT MSG              01/86
PRNTCOMP B     EXIT                RETURN TO PREVIOUS REQUEST
*
*        PRINT ERROR MESSAGE
*
BADPARM  EQU   *
         LA    R1,ERRMSG2          GET MSG ADDR
         BAL   R9,PUTLINE          --> PRINT MSG              01/86
         B     EXIT                RETURN TO SYSTEM
*TFON    EQU   *
*        LA    R1,ERRMSG3          GET MSG ADDR
*        BAL   R9,PUTLINE          --> PRINT MSG              01/86
*        B     EXIT                RETURN TO SYSTEM
INACTIVE EQU   *
         LA    R1,ERRMSG4          GET MSG ADDR
         BAL   R9,PUTLINE          --> PRINT MSG              01/86
         B     EXIT                RETURN TO SYSTEM
DISABLED EQU   *
         LA    R1,ERRMSG5          GET MSG ADDR
         BAL   R9,PUTLINE          --> PRINT MSG              01/86
         B     EXIT                RETURN TO SYSTEM
NOIO     EQU   *
         LA    R1,ERRMSG6          GET MSG ADDR
         BAL   R9,PUTLINE          --> PRINT MSG              01/86
*
*        THIS IS THE END
*
EXIT     DS    0H                                             01/86
         L     R0,GETSIZE                                     01/86
         L     R11,COREADDR        GET ADDRESS OF WORKAREA    01/86
         FREEMAIN RC,LV=(0),A=(11) GIVE BACK THE CORE         01/86
         MLEAVE                    AND GO                     01/86
*
*        PUTLINE DISPLAY ROUTINE
*
PUTLINE  DS    0H                                             01/86
         LR    R2,R1               GET MSG TEXT ADDRESS       01/86
         PUTLINE PARM=PUTBLOK,                                01/86    +
               OUTPUT=((R2),TERM,SINGLE,DATA),                01/86    +
               MF=(E,IOPLADS)                                 01/86
         BR    R9                                             01/86
*
*        PROGRAM MESSAGES
*
HEAD1    DC    AL2(HD1-*),X'0000'
         DC    C'NARINT0  DEV-STATUS'
HD1      EQU   *
HEAD2    DC    AL2(HD2-*),X'0000'
         DC    C'NARINT0  DEV-STATUS/ASID'
HD2      EQU   *
HEAD3    DC    AL2(HD3-*),X'0000'
         DC    C'NARINT0  DEV-STATUS(CPU)'
HD3      EQU   *
HEAD4    DC    AL2(HD4-*),X'0000'
         DC    C'NARINT0  DEV-STATUS(CPU)/ASID'
HD4      EQU   *
ERRMSG2  DC    AL2(EM2-*),X'0000'
         DC    C'NARINT2 INVALID PARM'
EM2      EQU   *
*RRMSG3  DC    AL2(EM3-*),X'0000'
*        DC    C'NARINT3 GTF ACTIVE TRACE TABLE INVALID'
*M3      EQU   *
ERRMSG4  DC    AL2(EM4-*),X'0000'
         DC    C'NARINT4 TRACE OFF'
EM4      EQU   *
ERRMSG5  DC    AL2(EM5-*),X'0000'
         DC    C'NARINT5 TRACE DISABLED'
EM5      EQU   *
ERRMSG6  DC    AL2(EM6-*),X'0000'
         DC    C'NARINT6 NO I/O ENTRIES FOUND IN TRACE TABLE'
EM6      EQU   *
*
*
* GETPARM SUBROUTINE.
*        THIS ROUTINE HANDLES THE SCANING OF THE INPUT PARAMETERS.
*
*        INPUTS.
*              1. REGISTER R11 POINTING TO THE FIRST CHARACTER OF THE
*                 FIRST PARAMETER, THE DELIMITER BETWEEN PARAMETERS,
*                 OR A SUBSTRING CONTROL CHARACTER.
*              2. REGISTER R10 POINTING TO THE END OF THE COMMAND
*                 BUFFER.
*              3. REGISTER R9 POINTING TO THE RETURN POINT.
*
*        OUTPUTS.
*              1. REGISTER R0 CONTAINS THE CHARACTER COUNT.  ZERO
*                 IMPIIES NO PARAMETER AND NEGATIVE A SUBSTRING CONTROL
*                 CHARACTER.
*              2. REGISTER R1 CONTAINS THE PARAMETER ADDRESS.
*
*        REGISTERS R2-R8 AND R5-R15 ARE UNCHANGED.
*
***********************************************************************
GETPARM  SR    R0,R0                    CLEAR THE COUNT REG
         LTR   R11,R11                  IS THERE A PARAMETER
         BCR   8,R9                     BRANCH IF NOT
         OI    0(R11),BLANK             MAKE ALL UPPER CASE   01/86
         CLI   0(R11),BLANK             IS THIS ENTRY A BLANK 01/86
         BCR   8,R9                     BRANCH IF YES
         CLI   0(R11),RTPAREN           IS THIS A SUBSTRING END
         BE    GET001                   BRANCH IF YES
         CLI   0(R11),COMMA             IS THIS A DELIMITER
         BNE   GET000                   BRANCH IF NOT
         LA    R11,1(R11)               POINT TO THE NEXT PARM
GET000   CR    R11,R10                  IS THIS THE END OF THE BUFFER
         BCR   11,R9                    BRANCH IF YES
         CLI   0(R11),COMMA             IS THIS A DELIMITER
         BCR   8,R9                     BRANCH IF YES
         CLI   0(R11),LTPAREN           IS THIS A SUBSTRING START
         BNE   GET002                   BRANCH IF NOT
GET001   LR    R1,R11                   SAVE THE START ADDRESS
         LA    R11,1(R11)               POINT TO THE NEXT INPUT
         SH    R0,H1                    INDICATE SUBSTRING CHARACTER
         BR    R9                       RETURN
GET002   LR    R1,R11                   PLACE PARM START IN REG 1
GET003   AH    R0,H1                    ADD ONE TO THE COUNT
         LA    R11,1(R11)               POINT TO THE NEXT INPUT CHARACT
         CR    R11,R10                  IS THIS THE END OF THE BUFFER
         BCR   11,R9                    BRANCH IF YES
         CLI   0(R11),COMMA             IS THIS A DELIMITER
         BCR   8,R9                     BRANCH IF YES
         CLI   0(R11),BLANK             IS THIS THE END OF PARMS
         BCR   8,R9                     BRANCH IF YES
         CLI   0(R11),RTPAREN           IS THIS A SUBSTRING END
         BNE   GET003                   BRANCH IF NOT
         BR    R9                       RETURN
*
*        EQUATES
*
TRACEON  EQU   X'F0'               BRANCH MASK FOR ACTIVE TRACE TBL
TRACEOFF EQU   X'0F'               BRANCH MASK FOR INACTIVE TRACE TBL
SIOKEY   EQU   X'0F'               SIO KEY & MAX CHANNEL
MINKEY   EQU   X'50'               I/O INT KEY & MIN CHAN
MAXKEY   EQU   X'5F'               I/O INT KEY & MAX CHAN
SIOCC    EQU   X'30'               TRACE SIO CC MASK
CPUNOMSK EQU   X'0F'               TRACE ENTRY CPU NUMBER AND MASK
DASH     EQU   C'-'
BLANK    EQU   C' '
RTPAREN  EQU   C')'
COMMA    EQU   C','
LTPAREN  EQU   C'('
SLASH    EQU   C'/'                ASID FIELD DELIMITER
MAXPARM  EQU   4                   MAXIMUM PARM LENGTH
MAXTRACE EQU   90
MAXENTRY EQU   6                   MAXIMUM TRACE ENTRYIES / LINE
MAXLINE  EQU   MAXTRACE/MAXENTRY   MAXIMUM TRACE MSG LINES
HEADPRNT EQU   X'80'               HEADING PRINTED
IOFOUND  EQU   X'01'               AN I/O ENTRY WAS FOUND
TRCTBLOK EQU   X'02'               AN I/O ENTRY WAS FOUND
*
*        CONSTANTS.
*
PARMPACK PACK  DBLWRD2,0(0,R1)     PACK TRACE LIMIT COUNT
MYTBUFSZ DC    A(L'MYTBUF)
HISASID  DC    H'0'
COREADDR DC    F'0'
MAXTBUFF DC    F'0'
MYASID   DC    F'0'
GETSIZE  DC    A(WORKEND-WORKAREA)
NUMCPUS  DC    H'0'                                           01/86
NUMBUFS  DC    H'0'                                           01/86
CPUNUM   DC    H'0'                                           01/86
SSCHTTE  DC    X'0001'                                        01/86
IOTTE    DC    X'000B'                                        01/86
DBLWRD1  DC    D'0'
DBLWRD2  DC    D'0'
FLAG     DC    X'00'               PRINT CONTROL FLAG
H0       DC    H'0'                                           01/86
H1       DC    H'1'
H4       DC    H'4'                LENGTH OF ASID PARM
CC2      DC    C'CC=2'             SIO CONDITION CODE
ASID     DC    C'ASID'             DISPLAY CONTROL PARM
MSGID    DC    C'NARINT1  '        MSG ID NUMBER
PARMDATA DC    CL10' '                                      *LBD 01/86*
*
*        TABLES
*
HEXTABLE EQU   *-240
TRANSTAB DC    C'0123456789ABCDEF'
ENTCNT   DC    A(FMT1CT,FMT2CT,FMT3CT,FMT4CT)   MSG ENTRIES / LINE
ENTLN    DC    A(FMT1,FMT2,FMT3,FMT4)       ENTRY LENGTH
HEADAD   DC    A(HEAD1,HEAD2,HEAD3,HEAD4)   HEADING ADDRESSES
MSGCONS  DC    Y(FMT1LN),X'0000'   MSG LENGTH & FLAGS
         DC    Y(FMT2LN),X'0000'   MSG LENGTH & FLAGS
         DC    Y(FMT3LN),X'0000'   MSG LENGTH & FLAGS
         DC    Y(FMT4LN),X'0000'   MSG LENGTH & FLAGS
TTELTBL  DS    0H                                             01/86
         DC    X'000004'           FORMAT -  X'TTLLLL'        01/86
         DC    X'100004'           WHERE -   TT=TTE TYPE      01/86
         DC    X'210008'           AND -   LLLL=TTE LENGTH    01/86
         DC    X'310008'                                      01/86
         DC    X'710014'                                      01/86
         DC    X'740020'                                      01/86
         DC    X'760028'                                      01/86
         DC    X'77002C'                                      01/86
         DC    X'780030'                                      01/86
         DC    X'790034'                                      01/86
         DC    X'7A0038'                                      01/86
         DC    X'7B003C'                                      01/86
         DC    X'7C0040'                                      01/86
         DC    X'FF0004'           MUST BE LAST ENTRY         01/86
         LTORG                                                01/86
*                                                             01/86
*        MESSAGE TEXT...  MUST BE  AT END OF PROGRAM....      01/86
*                                                             01/86
*                                                             01/86
         DS    0F                                             01/86
MSGHDR   DC    AL2(0),X'0000'      MSG LENGTH & FLAGS
MSGTEXT  DC    C'NARINT1  '        MSG IDENTIFIER
MSGDEV1  DC    CL3' '              INTERRUPT DEVICE ADDRESS
MSGDL1   DC    C'-'                DELIMITER FIELD
MSGSTAT1 DC    CL4' '              CSW STATUS
MSGBL1   DC    C' '                BLANK FIELD
FMT1     EQU   *-MSGDEV1           LENGTH OF FMT1 ENTRY
         ORG   MSGBL1
MSGSL1   DC    C' '                SLASH ASID DELIMITER
MSGASID1 DC    CL4' '              ASID NUMBER
MSGBL2   DC    C' '                BLANK FIELD
FMT2     EQU   *-MSGDEV1           LENGTH OF FMT2 ENTRY
         ORG   MSGBL1
MSGLP1   DC    C' '                LEFT PAREN
MSGCPU1  DC    C' '                MP CPU NUMBER
MSGRP1   DC    C' '                RIGHT PAREN
MSGBL3   DC    C' '                BLANK FIELD
FMT3     EQU   *-MSGDEV1           LENGTH OF FMT3 ENTRY
         ORG   MSGBL3
MSGSL2   DC    C' '                SLASH ASID DELIMITER
MSGASID2 DC    CL4' '              ASID NUMBER
MSGBL4   DC    C' '                BLANK FIELD
FMT4     EQU   *-MSGDEV1           LENGTH OF FMT4 ENTRY
MSGFIXED EQU   MSGDEV1-MSGHDR      FIXED PART OF MSG
MSGVAR   EQU   72-MSGFIXED         VARIABLE PART OF MSG
FMT1CT   EQU   MSGVAR/FMT1         NUMBER OF ENTRIES / LINE
FMT2CT   EQU   MSGVAR/FMT2         NUMBER OF ENTRIES / LINE
FMT3CT   EQU   MSGVAR/FMT3         NUMBER OF ENTRIES / LINE
FMT4CT   EQU   MSGVAR/FMT4         NUMBER OF ENTRIES / LINE
FMT1LN   EQU   FMT1CT*FMT1+MSGFIXED  TOTAL MSG LENGTH
FMT2LN   EQU   FMT2CT*FMT2+MSGFIXED  TOTAL MSG LENGTH
FMT3LN   EQU   FMT3CT*FMT3+MSGFIXED  TOTAL MSG LENGTH
FMT4LN   EQU   FMT4CT*FMT4+MSGFIXED  TOTAL MSG LENGTH
WORKAREA DSECT
         DS    0F                                             01/86
MYTBVT   DS    XL64                                           01/86
MYTBUF   DS    XL4096                                         01/86
WORKEND  EQU   *                                              01/86
*        IHATBVT
TBVT     DSECT
TBVTPID  EQU   TBVT+X'06'                                     01/86
TBVTNXTV EQU   TBVT+X'14'                                     01/86
TBVTBWRD EQU   TBVT+X'18'                                     01/86
TBVTBUFV EQU   TBVT+X'1C'                                     01/86
*        IHATRVT
TRVT     DSECT
TRVTTOB  EQU   TRVT+X'18'                                     01/86
*        IHATOB
TOB      DSECT
TOBTRFG1 EQU   TOB+X'15'                                      01/86
TOBTRPOL EQU   TOB+X'1C'                                      01/86
TOBTRBUF EQU   TOB+X'1E'                                      01/86
TOBASID  EQU   TOB+X'26'                                      01/86
TOBPEAD  EQU   TOB+X'3C'                                      01/86
TOBPE    DSECT
TOBPFG1  EQU   TOBPE                                          01/86
TOBPBUF  EQU   TOBPE+X'02'                                    01/86
TOBPTBVT EQU   TOBPE+X'04'                                    01/86
TOBSVACT EQU   B'10000000'                                    01/86
TOBSTACT EQU   B'01000000'                                    01/86
TOBPTSA  EQU   B'10000000'                                    01/86
TTE      DSECT
TTETYPE  EQU   TTE                 TTE TYPE                   01/86
TTETOD   EQU   TTE+X'02'           TTE TOD
TTEXPTYP EQU   TTE+X'0A'           TTE EXPLICIT ENTRY TYPE    01/86
TTE00BDN EQU   TTE+X'10'           I/O TTE DEVICE NUMBER      01/86
TTE00BHA EQU   TTE+X'12'           I/O TTE PSAAOL ASID        01/86
TTE001CC EQU   TTE+X'14'           SSCH TTE CONDITION CODE    01/86
TTE001DN EQU   TTE+X'16'           SSCH TTE DEVICE NUMBER     01/86
TTE00BDS EQU   TTE+X'28'           I/O TTE CHANNEL STATUS WRD 01/86
         IKJIOPL                                              01/86
         PRINT NOGEN                                          01/86
         CVT   DSECT=YES
         IHAPSA
*        IHACSD
CSD      DSECT                                                01/86
CSDCPUOL EQU   CSD+X'08'                                      01/86
         END
