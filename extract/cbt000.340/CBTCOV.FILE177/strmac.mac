.nf
.ss
.ll 72
.HE FPC STRUCTURED MACRO DOCUMENTATION AS OF 12/30/78

this report was produced by tso format facility from file

OT780RS.SHRDOC(STRMAC)

for any questions regarding this report please contact

d. s. higgins
director, csd
florida power corporation
p. o. box 14042   mac b-3
st. petersburg, florida 33733
(813) 866-4145


.pn 1
.pa
TABLE OF CONTENTS

  SECTIONS

  1. INTRODUCTION TO STRUCTURED PROGRAMMING AIDS.
  2. INTRODUCTION TO STRUCTURED MACRO ASSEMBLER.
  3. GUIDE TO STRUCTURED MACROS.
  4. GUIDE TO STRUCTURED MACRO INSTALLATION.
  5. SUMMARY OF STRUCTURED MACROS.
  6. SYNTAX AND EXAMPLES OF EACH STRUCTURED MACRO.




.PA
INTRODUCTION TO STRUCTURED PROGRAMMING AIDS.

     STRUCTURED PROGRAMMING IS THE GENERAL TERM APPLIED TO A NUMBER
OF NEW TECHNIQUES WHICH AID IN DEVELOPING PROGRAMS WHICH ARE EASIER
TO READ, EASIER TO DEBUG, EASIER TO MAINTAIN AND WHICH ARE GENERALLY
MUCH MORE RELIABLE.
     THE STRUCTURED PROGRAMMING TOOLS DOCUMENTED HERE CONSIST OF THE
EXTENDED CONTROL STRUCTURES NECESSARY TO WRITE TOP DOWN PROGRAMS
WITH NO UNCONDITIONAL BRANCHES. THREE BASIC TYPES OF CONTROL
STRUCTURES ARE IMPLIMENTED:

     1.  SEQUENTIAL CONCATENATION OF BLOCKS OF CODE.
     2.  SELECTION  BETWEEN TWO OR MORE BLOCKS OF CODE.
     3.  REPETITION OF A BLOCK OF CODE.

     FOR MORE INFORMATION ON THE THEORY OF STRUCTURED PROGRAMMING, SEE
THE FOLLOWING REFERENCES.

         DAHL, O. J., DIJKSTRA, E. W., HOARE, C. A. R., "STRUCTURED
         PROGRAMMING", ACADEMIC PRESS, LONDON (1972).

         HIGGINS, D. S., "A STRUCTURED FORTRAN TRANSLATOR", ACM
         SIGPLAN, FEBRUARY (1975).

         STEVENS, W. P., MYERS, G. J., CONSTANTINE, L. L., "STRUCTURED
         DESIGN", IBM SYSTEM JOURNAL 13, 2 (1974).

         WEINBERG, G. M., "THE PSYCHOLOGY OF COMPUTER PORGRAMMING",
         VAN NOSTRAND REINHOLD, NEW YORK (1971).

         YOURDON, EDWARD, "A BRIEF LOOK AT STRUCTURED PROGRAMMING
         AND TOP DOWN PROGRAM DESIGN", MODERN DATA, JUNE (1974).

.PA
INTRODUCTION TO FPC STRUCTURED ASSEMBLER MACROS

THE FPC STRUCTURED ASSEMBLER MACROS ALLOW ALC PROGRAMS TO BE WRITTEN
IN A TOP DOWN STRUCTURED FORM WITHOUT THE NEED FOR ANY UNCONDITIONAL
BRANCHES.

THE MACROS PROVIDE THE THREE BASIC TYPES OF CONTROL STRUCTURES WITH
A MINIMUM OF OVERHEAD AND FUNCTIONAL RESTRICTIONS.  THE STANDARD
PERFORM, PENTRY, AND PEXIT CONTROL MACROS USE NO REGISTERS AND EXECUTE
ONLY TWO INSTRUCTIONS.  THE IF, ELSEIF, ELSE, AND FI CONTROL MACROS
SIMPLY GENERATE EQUIVALENT BRANCH ON CONDITION INSTRUCTIONS.  THE
DOCASE MACRO GENERATES THREE EXECUTABLE INSTRUCTIONS AND USES REGISTER
15.  THE CASE AND ESACOD ONLY GENERATE  LABELS. THE ESAC MACRO ONLY
GENERATES A BRANCH TO THE ESACOD LABEL.   ALL THE CODE GENERATED IS
REENTRANT EXCEPT THE PERFORM AND IT WILL GENERATE REENTRANT CODE WHEN
THE REENTRANT FORM OF SUBENTRY IS USED.

THE MACROS USE GLOBAL ARRAYS TO KEEP TRACK OF THE CURRENT LEVEL OF
NESTING AND ANY REQUIRED GENERATED LABELS USED BY MULTIPLE MACROS
WITHIN A CONTROL STRUCTURE.




.PA
GUIDE TO USING FPC STRUCTURED MACRO ASSEMBLER.

THE MACROS ARE INCLUDED IN THE STANDARD OS/VS ASSEMBLER
PROCEDURES AND CAN BE USED AT ANY TIME.

NOTE THAT DO IS A VALID VTAM MACRO AND IT MUST BE RENAMED IF THE FPC
DO MACRO IS TO BE USED.
.PA
SUMMARY OF STRUCTURED MACRO CONTROL STATEMENTS

SEQUENTIAL CONCATENATION OF BLOCKS OF CODE

  1.  PERFORM NAME           - PERFORM A BLOCK OF CODE
      PM      NAME             (PM IS SHORT FORM OF PERFORM)
  2.  NAME    PENTRY         - DEFINE ENTRY TO A BLOCK OF CODE
  3.  PEXIT                  - EXIT FROM CURRENT BLOCK OF PERFORMED CODE

SELECTION OF ONE BLOCK FROM TWO OR MORE BLOCKS OF CODE

  1.  IF (TEST)              - EXECUTE FOLLOWING BLOCK IF TEST IS
                               TRUE OTHERWISE GO TO NEXT ELSEIF, ELSE,
                               OR FI STATEMENT.
  2.  ELSEIF (TEST)          - SAME AS ABOVE TO SELECT ONE OF A NUMBER
                               OF BLOCKS.
  3.  ELSE                   - EXECUTE FOLLOWING BLOCK IF TEST
                               IN PREVIOUS IF OR ELSEIF WAS FALSE.
  4.  FI                     - COMMON EXIT POINT FROM THE ABOVE CONTROL
                               STRUCTURE.

  5.  DOCASE INDEX           - SELECT BLOCK BASED ON VALUE OF INDEX

  6.  CASE VALUE (OR ELSE)   - DEFINE START OF BLOCK FOR SPECIFIC
                               VALUE OR DEFAULT BLOCK

  7.  ESAC                   - END OF BLOCK

  8.  ESACOD                 - COMMON EXIT POINT FROM ABOVE DOCASE
                               CONTROL STRUCTURE.

REPETITION OF A BLOCK OF CODE

  1.  DO WHILE,(TEST)        - REPEAT BLOCK WHILE TEST IS TRUE

  2.  DO UNTIL,(TEST)        - REPEAT BLOCK UNTIL TEST IS FALSE

  3.  DO FOREVER             - REPEAT BLOCK UNTIL EXIT OR STOP IS
                               EXECUTED.

  4.  OD                     - EXIT POINT FOR ANY OF THE ABOVE DO
                               CONTROL STRUCTURES.
.PA
GUIDE TO STRUCTURED MACRO INSTALLATION

THE STRUCTURED MACROS ARE PART OF THE ENTIRE SET OF FPC MACROS
ON TAPE FILE 1.  ONCE THE TAPE FILE HAS BEEN USED TO BUILD A
SOURCE PROGRAM PARTITIONED DATA SET ON DISK, THE PDS CAN BE
CONCATENATED WITH THE STANDARD MACRO LIBRARY TO ASSEMBLE
STRUCTURED ALC PROGRAMS. BE SURE TO RENAME ANY DUPLICATE MACROS.
VTAM HAS A DO MACRO WHICH SHOULD BE RENAMED OR MOVED TO A
SEPARATE PDS FOR VTAM ASSEMBLIES.

NOTE THAT THE FPC MACROS REQUIRE AN OS/VS ASSEMBLER TO HANDLE
SETC VARIABLES LONGER THAN 8 CHARACTERS (ASSEMBLER F DOES NOT).
.PA
CASE VALUE

FUNCTION - DEFINE BEGINNING OF BLOCK OF CODE TO BE EXECUTED IF
           THE CURRENT VALUE OF THE ASSOCIATED DOCASE INDEX
           VARIABLE IS EQUAL TO VALUE. IF THE KEYWORD ELSE IS
           SPECIFIED INSTEAD OF A VALUE, THEN THE BLOCK WILL
           BE EXECUTED IF THE CURRENT VALUE OF THE INDEX DOES
           NOT MATCH AND DEFINED CASE VALUE. CASES MAY BE IN
           ANY ORDER.

SYNTAX  -  VALUE MUST BE A SELF DEFINING TERM BETWEEN 1-255. OR
           IT CAN BE A SET OF SELF DEFINING TERMS WITHIN () TO
           DEFINE A RANGE BETWEEN 1-255. OR IT CAN BE MULTIPLE
           VALUES SEPARATED BY COMMAS. OR IT CAN BE THE KEY WORD
           ELSE.

EXAMPLE -  SEE DOCASE FOR EXAMPLE OF ENTIRE STRUCTURE

           CASE 3
           CASE 5,3
           CASE (1,10)
           CASE (10,20),(50,60)
           CASE C'F'
           CASE X'FF'
           CASE (C'A',C'I'),(C'J',C'R'),(C'S',C'Z')
.PA
DO FOREVER

FUNCTION - DEFINE START OF INFINITE LOOP WHICH CAN ONLY BE TERMINATED
           BY PEXIT, RETURN, SUBEXIT.

SYNTAX   - ALL KEYWORDS

EXAMPLE  - DO FOREVER
              .
              IF  (CLI,FAIL,TRUE,EQ)
                  PEXIT
              FI
              .
              .
           OD
.PA
DO  UNTIL,(TEST)

FUNCTION - DEFINE BEGINNING OF BLOCK OF CODE WHICH IS EXECUTED
           REPETITIVELY UNTIL THE TEST IS TRUE.  THE TEST
           IS PERFORMED AT THE END OF EACH EXECUTION OF THE BLOCK.

SYNTAX   - SEE IF FOR TEST SYNTAX

EXAMPLE -  DO UNTIL,(LTR,R1,R1,Z)
              LR  R2,R1
              L   R1,NEXT(R1)
           OD
.PA
DO WHILE,(TEST)

FUNCTION - DEFINE START OF BLOCK OF CODE WHICH WILL BE EXECUTED
           REPETITIVELY WHILE THE EXPRESSION IS TRUE. THE TEST
           IS PERFORMED BEFORE EACH EXECUTION OF THE BLOCK

SYNTAX   - SEE IF FOR TEST SYNTAX

EXAMPLE  - PM  GETREC
           DO  WHILE,(CLI,EOF,TRUE,NE)
               PM  PROREC
               PM  GETREC
           OD

COMMENTS - THE ABOVE CONTROL STRUCTURE IS THE STANDARD FORM OF
           MOST FILE PROCESSING MAIN PROGRAMS.  THE READ ROUTINE
           NAMED GETREC SETS EOF=FALSE WHEN END OF FILE OCCURS.
           THE ROUTINE NAMED PROREC PROCESSES RECORDS.
.PA
DOCASE INDEX

FUNCTION - EXECUTE ONE OR NONE OF THE FOLLOWING BLOCKS OF CODE
           DEFINED BY CASE AND ESAC STATEMENTS.  IF THE CURRENT
           VALUE OF INDEX EQUALS THE VALUE ON A CASE STATEMENT,
           THAT CASE WILL BE EXECUTED.  IF THERE IS NO MATCH,
           AND THERE IS A CASE STATEMENT WITH THE VALUE ELSE
           SPECIFIED, THAT CASE WILL BE EXECUTED.  OTHERWISE
           NO CASES WILL BE EXECUTED AND CONTROL WILL PASS
           DIRECTLY TO THE ENDING ESACOD STATEMENT.

SYNTAX   - INDEX MUST BE A VALID ADDRESS LABEL POINTING TO THE BYTE
           IN STORAGE CONTAINING THE INDEX VALUE OR IT MUST SPECIFY
           A REGISTER CONTAINING THE VALUE ().

EXAMPLE  - DOCASE NUMBER
             CASE  1,3,5,7,11,13,17,19,23,29,31
               PM  PRIME
             ESAC
             CASE  6,28
               PM  PERFCT
             ESAC
             CASE  2,4,6,8,10,12,14,16,18,20,22,24,26,30
               PM  EVEN
             ESAC
             CASE  ELSE
               PM  OTHER
             ESAC
           ESACOD

COMMENT  - THE MOST COMMON USE OF DOCASE IS TO SELECT PROCESSING
           ROUTINES BASED ON SOME TYPE OF RECORD CODE.  IT IS MUCH
           MORE EFFICIENT THAN MULTIPLE ELSEIF STATEMENTS IF THERE
           IS A LARGE NUMBER OF ROUTINES TO SELECT.
.PA
ELSE

FUNCTION - DEFINE END OF BLOCK OF CODE EXECUTED IF PREVIOUS IF OR
           ELSEIF IS TRUE AND DEFINE BEGINNING OF BLOCK OF CODE TO
           BE EXECUTED IF ALL PREVIOUS IF AND ELSEIF STATEMENTS
           WERE FALSE.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE IF
.PA
ELSEIF (TEST)

FUNCTION - DEFINE END OF BLOCK OF CODE EXECUTED IF PREVIOUS IF OR
           ELSEIF IS TRUE AND DEFINE BEGINNING OF BLOCK OF CODE TO
           BE EXECUTED IF EXPRESSION IS TRUE.

SYNTAX   - SEE IF FOR TEST SYNTAX

EXAMPLE  - SEE IF
.PA
ESAC

FUNCTION - DEFINE END OF CASE BLOCK. CONTROL IS TRANSFERED TO
           NEXT ESACOD STATEMENT.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE DOCASE
.PA
ESACOD

FUNCTION - DEFINE END OF DOCASE CONTROL STRUCTURE.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE DOCASE
.PA
FI

FUNCTION - DEFINE END OF IF CONTROL STRUCTURE.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE IF
.PA
IF (TEST)

FUNCTION - DEFINE BEGINNING OF BLOCK OF CODE TO BE EXECUTED IF
           TEST IS TRUE.  IF THE TEST IS FALSE,
           TRANSFER CONTROL TO THE NEXT ELSEIF, ELSE, OR FI
           STATEMENT.  IF CONTROL STRUCTURES MAY BE NESTED.

SYNTAX   - TEST CONSISTS OF 1 TO 5 OPERANDS SEPARATED BY COMMAS WHICH
           DEFINE INSTRUCTIONS WHICH SET AND/OR TEST CONDITION CODES.
           MULTIPLE TEST MAY BE CONNECTED BY LOGICAL AND/OR KEYWORD
           CONNECTORS AS FOLLOWS:

           IF (TEST),AND,(TEST),AND,(TEST),...
           IF (TEST),OR,(TEST),OR,(TEST),.....

           IF 'AND'/'OR' CONNECTORS ARE MIXED, IT IS INTERPRETED AS
           IF THERE IS AN EXTRA SET OF PARENTHESIS ADDED AFTER EACH
           CONNECTOR:

           IF (TEST),AND,(TEST),OR,(TEST) MEANS

           IF (TEST),AND,((TEST),OR,(TEST)) ETC.

           THE LAST OPERAND IS ALWAYS A CONDITION CODE VALUE. MNEMONIC
           EQUATES FOR ALL THE POSSIBLE CONDITION CODE VALUES ARE
           DEFINED IN THE MACRO EQUBC WHICH IS INVOKED BY THE MACRO
           EQUAL WHICH ALSO DEFINES REGISTER EQUATES AND A LITERAL
           POOL. EQUAL IS USED IN ALL FPC ALC PROGRAMS.

           IF ONLY ONE OPERAND IS SPECIFIED FOR A TEST, IT
           GENERATES A CONDITIONAL BRANCH BASED ON THE CURRENT
           CONDITON CODE SETTING. FOR EXAMPLE:

               IF (H)          BC 15-H,TAGN
                  PM HIGH         .....
               FI              TAGN EQU *

           IF MORE THAN ONE OPERAND IS SPECIFIED FOR A TEST, THE
           FIRST IS THE OPERATION CODE, THE SECOND TO FOURTH ARE
           THE OPERANDS, AND THE LAST IS THE CONDITION CODE.
           FOR EXAMPLE:

               IF (OP,OPR1,COND)              OP OPR1
                                              BC 15-COND,TAGN

               IF (OP,OPR1,OPR2,COND)         OP OPR1,OPR2
                                              BC 15-COND,TAGN

               IF (OP,OPR1,OPR2,OPR3,COND)    OP OPR1,OPR2,OPR3
                                              BC 15-COND,TAGN

           NOTE THAT THE IF AND ELSEIF STATEMENTS MAY BE USED TO
           EXECUTE ANY INSTRUCTION AND TEST THE CONDITION CODE
           AFTER ITS EXECUTION.  THE INSTRUCTIONS ARE ALWAYS
           EXECUTED IN THE ORDER IN WHICH THEY ARE CODED FOR
           MULTIPLE TESTS. A VALID EXAMPLE IS THE FOLLOWING:

               IF (SP,LINE,=P'0',Z)
                  PERFORM HEADING
               FI


               IF (ICM,R1,15,DCBIOB(R2),NZ),AND,(TM,IOBFLG(R1),X'80',O)
                  PM RETRY
               ELSE
                  PM ABORT
               FI

EXAMPLES - IF (CLC,OPTION,LIST,EQ)
              PM  REPORT
           FI
           .
           .
           IF (CLC,KEY,=F'100',GT)
              PM  BIG
           ELSE
              PM  SMALL
           FI
           .
           IF (CLC,KEY,=F'10',L)
              PM  SMALL
           ELSEIF (CLC,KEY,=F'50',L)
              PM  MEDIUM
           ELSE
              PM  BIG
           FI
.PA
OD

FUNCTION - DEFINE END OF DO TYPE CONTROL STRUCTURE

SYNTAX   - ALL KEWORDS

EXAMPLES - SEE DO WHILE, DO UNTIL, AND DO FOREVER
.PA
NAME  PENTRY

FUNCTION - DEFINE BLOCK OF CODE WHICH CAN BE EXECUTED BY PERFORM
           STATEMENTS.

SYNTAX   - NAME MUST BE VALID LABEL WHICH WILL BE USED TO GENERATE
           S TYPE ADDRESS CONSTANT FOR PERFORM BRANCH LINKAGE.

EXAMPLE  - SEE PERFORM
.PA
PERFORM NAME

FUNCTION - EXECUTE BLOCK OF CODE DEFINED BY PENTRY STATEMENT WITH THE
           SAME NAME.  RETURN TO NEXT STATEMENT FOLLOWING PERFORM IS
           ACCOMPLISHED BY EXECUTING PEXIT STATEMENT WITHIN THE BLOCK
           OF CODE DEFINED BY PENTRY. NOTE PM IS SHORT FORM OF PERFORM.

SYNTAX   - NAME MUST BE VALID LABEL DEFINED BY PENTRY WHICH CAN BE
           USED IN S TYPE ADDRESS CONSTANTS FOR BRANCH LINKAGE.

EXAMPLE  - PERFORM GETREC          MVC   GETREC-2(2),*+10
            .                      B     GETREC
            .                      DC    S(GETREC)
            .
           SUBEXIT
   GETREC  PENTRY                  B     *-*
           .               GETREC  EQU   *
           GET FILE,RECORD
           PEXIT                   B     GETREC-4
   EOFRTN  MVI EOF,TRUE
           PEXIT                   B     GETREC-4
.PA
PEXIT

FUNCTION - EXIT FROM PERFORMED BLOCK OF CODE TO NEXT STATEMENT
           FOLLOWING PERFORM STATEMENT.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE PERFORM
.PA
PM NAME

FUNCTION - SHORT FORM OF PERFORM - SEE PERFORM
