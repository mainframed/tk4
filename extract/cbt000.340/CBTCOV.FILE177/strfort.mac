.nf
.ss
.ll 72
.HE FPC STRUCTURED FORTRAN DOCUMENTATION AS OF 09/06/78

this report was produced by tso format facility from file

OT780RS.SHRDOC(STRFORT)

for any questions regarding this report please contact

d. s. higgins
director, csd
florida power corporation
p. o. box 14042   mac b-3
st. petersburg, florida 33733
(813) 866-4145


.pn 1
.pa
TABLE OF CONTENTS

  SECTIONS

  1. INTRODUCTION TO STRUCTURED PROGRAMMING AIDS.
  2. INTRODUCTION TO STRUCTURED FORTRAN TRANSLATOR.
  3. GUIDE TO USING TRANSLATOR PROCEDURES.
  4. GUIDE TO STRUCTURED TRANSLATOR INSTALLATION.
  5. SUMMARY OF STRUCTURED FORTRAN EXTENTED CONTROL STATEMENTS.
  6. SYNTAX AND EXAMPLES OF EACH EXTENDED CONTROL STATEMENT.




.PA
INTRODUCTION TO STRUCTURED PROGRAMMING AIDS.

     STRUCTURED PROGRAMMING IS THE GENERAL TERM APPLIED TO A NUMBER
OF NEW TECHNIQUES WHICH AID IN DEVELOPING PROGRAMS WHICH ARE EASIER
TO READ, EASIER TO DEBUG, EASIER TO MAINTAIN AND WHICH ARE GENERALLY
MUCH MORE RELIABLE.
     THE STRUCTURED PROGRAMMING TOOLS DOCUMENTED HERE CONSIST OF THE
EXTENDED CONTROL STRUCTURES NECESSARY TO WRITE TOP DOWN PROGRAMS
WITH NO UNCONDITIONAL BRANCHES. THREE BASIC TYPES OF CONTROL
STRUCTURES ARE IMPLIMENTED:

     1.  SEQUENTIAL CONCATENATION OF BLOCKS OF CODE.
     2.  SELECTION  BETWEEN TWO OR MORE BLOCKS OF CODE.
     3.  REPETITION OF A BLOCK OF CODE.

     FOR MORE INFORMATION ON THE THEORY OF STRUCTURED PROGRAMMING, SEE
THE FOLLOWING REFERENCES.

         DAHL, O. J., DIJKSTRA, E. W., HOARE, C. A. R., "STRUCTURED
         PROGRAMMING", ACADEMIC PRESS, LONDON (1972).

         HIGGINS, D. S., "A STRUCTURED FORTRAN TRANSLATOR", ACM
         SIGPLAN, FEBRUARY (1975).

         STEVENS, W. P., MYERS, G. J., CONSTANTINE, L. L., "STRUCTURED
         DESIGN", IBM SYSTEM JOURNAL 13, 2 (1974).

         WEINBERG, G. M., "THE PSYCHOLOGY OF COMPUTER PORGRAMMING",
         VAN NOSTRAND REINHOLD, NEW YORK (1971).

         YOURDON, EDWARD, "A BRIEF LOOK AT STRUCTURED PROGRAMMING
         AND TOP DOWN PROGRAM DESIGN", MODERN DATA, JUNE (1974).

.PA
INTRODUCTION TO STRUCTURED FORTRAN TRANSLATOR

     THE FPC STRUCTURED FORTRAN TRANSLATOR IS A PROGRAM WHICH
READS A STRUCTURED FORTRAN SOURCE PROGRAM AND PRODUCES A STANDARD
ANS FORTRAN IV SOURCE PROGRAM.  THE TRANSLATOR IS IMPLIMENTED AS
A PREPROCESSOR FOR THE STANDARD FORTRAN IV COMPILER AND IS INCLUDED
IN STANDARD PROCEDURES FOR COMPILING FORTRAN IV PROGRAMS. THE
STRUCTURED FORTRAN CONTROL STATEMENTS ARE EXTENTIONS OF STANDARD
ANS FORTRAN AND THE TRANSLATOR SIMPLY COPIES ANY STATEMENTS WHICH
IT DOES NOT RECOGINZE AS EXTENTIONS.

     WITH THIS TRANSLATOR, THE ONLY VALID NEED FOR FORTRAN STATEMENT
NUMBERS IN A PROGRAM ARE THE FOLLOWING:

     1.  FORMATS
     2.  END OF FILE STATEMENT TO SET END OF FILE SWITCH
     3.  ERROR STATEMENT TO SET ERROR SWITCH


     FOR EXAMPLES OF STRUCTURED FORTRAN PROGRAMS THAN CAN BE
WRITTEN USING THIS TRANSLATOR, SEE THE FOLLOWING PROGRAMS:

     1.  GU119000 - A STRUCTURED FORTRAN VERSION OF THE TRANSLATOR
                    ITSELF.  FOR EXAMPLE OF GENERATED CODE, SEE
                    GU119001 WHICH IS BOOTSTRAP ANS FORTRAN VERSION
                    OF GU119000 CREATED USING ALC VERSION TRANSLATOR.
     2.  GU137000 - SOLUTION TO 8 QUEENS PROBLEM.

NOTE THAT ALL THE EXTENTIONS CONFORM TO FORTRAN CODING CONVENTIONS.
BLANKS ARE IGNORED AND STATEMENTS CAN BE CONTINUED.
.PA
GUIDE TO USING TRANSLATOR PROCEDURES.

THE FOLLOWING 3 PROCEDURES ARE AVAILABLE FOR COMPILING
STRUCTURED FORTRAN PROGRAMS:

  1.  FORTC - COMPILE ONLY FROM SOURCE INPUT
      A. STEPS
         1.  TRANSLATE
         2.  COMPILE
      B. SAMPLE JCL
         1.  // EXEC FORTC
         2.  //SYSIN DD *
         3.  C STRUCTURED FORTRAN SOURCE PROGRAM
  2.  FORTCL - COMPILE AND LINK INTO FPC.TESTLIB FROM FPC.WORK
      A. STEPS
         1.  PAN#1 TO CREATE SOURCE FILE FROM PAN.VALET
         2.  TRANSLATE
         3.  COMPILE
         4.  LINK
      B. SAMPLE JCL
         1.  // EXEC FORTCL,MEMBER=PGMNAME
         2.  //SYSIN DD *
         3.  ++WRITE WORK,PGMNAME
  3.  FORTCLG - COMPILE, LINK, AND EXECUTE FROM SOURCE FILE
      A. STEPS
         1.  TRANSLATE
         2.  COMPILE
         3.  LINK
         4.  EXECUTE
      B. SAMPLE JCL
         1.  // EXEC FORTCLG
         2.  //SYSIN DD *
         3.  C STRUCTURED FORTRAN SOURCE PROGRAM

JCL NOTES

  1.  THE FOLLOWING INFORMATION IS PROVIDED FOR ESTIMATING JOB
      RESOURCE REQUIREMENTS.
      A. THE TRANSLATOR MUST READ THE SOURCE PROGRAM FILE AND WRITE
         OUT THE TRANSLATED VERSION TO A TEMPORARY FILE FOR INPUT
         TO THE COMPILER.
      B. THE TRANSLATOR WILL EITHER LIST ALL OF THE SOURCE PROGRAM
         OR JUST ERRORS BASED ON PARM FIELD (LIST, NOLIST).
      C. THE TRANSLATOR DOES NOT USE ANY OTHER WORK FILES.
      D. THE MEMORY REQUIRED IS A FUNCTION OF THE MAXIMUM NUMBER OF
         NESTED CONTROL STRUCTURES AT ANY ONE POINT IN THE PROGRAM.
         FOR REASONABLE PROGRAMS, 100K IS USUALLY SUFFICIENT.
.PA
SUMMARY OF STRUCTURED FORTRAN EXTENDED CONTROL STATEMENTS

SEQUENTIAL CONCATENATION OF BLOCKS OF CODE

  1.  PERFORM NAME           - PERFORM A BLOCK OF CODE
      PM      NAME             (PM IS SHORT FORM OF PERFORM)
  2.  PENTRY  NAME           - DEFINE ENTRY TO A BLOCK OF CODE
  3.  PEXIT                  - EXIT FROM CURRENT BLOCK OF PERFORMED CODE

SELECTION OF ONE BLOCK FROM TWO OR MORE BLOCKS OF CODE

  1.  IF (EXPRESSION)        - EXECUTE FOLLOWING BLOCK IF EXPRESSION
                               TRUE OTHERWISE GO TO NEXT ELSEIF, ELSE,
                               OR FI STATEMENT.
  2.  ELSEIF (EXPRESSION)    - SAME AS ABOVE TO SELECT ONE OF A NUMBER
                               OF BLOCKS.
  3.  ELSE                   - EXECUTE FOLLOWING BLOCK IF EXPRESSION
                               IN PREVIOUS IF OR ELSEIF WAS FALSE.
  4.  FI                     - COMMON EXIT POINT FROM THE ABOVE CONTROL
                               STRUCTURE.

  5.  DOCASE INDEX           - SELECT BLOCK BASED ON VALUE OF INDEX

  6.  CASE VALUE (OR ELSE)   - DEFINE START OF BLOCK FOR SPECIFIC
                               VALUE OR DEFAULT BLOCK

  7.  ESAC                   - END OF BLOCK

  8.  ESACOD                 - COMMON EXIT POINT FROM ABOVE DOCASE
                               CONTROL STRUCTURE.

REPETITION OF A BLOCK OF CODE

  1.  DO I=J,K,L             - DEFINE START OF STANDARD FORTRAN DO LOOP
                               BUT ALLOW TRANSLATOR TO HANDLE STATEMENT
                               NUMBER GENERATION.

  2.  DO WHILE,(EXPRESSION)  - REPEAT BLOCK WHILE EXPRESSION TRUE

  3.  DO UNTIL,(EXPRESSION)  - REPEAT BLOCK UNTIL EXPRESSION FALSE

  4.  DO FOREVER             - REPEAT BLOCK UNTIL EXIT OR STOP IS
                               EXECUTED.

  5.  OD                     - EXIT POINT FOR ANY OF THE ABOVE DO
                               CONTROL STURCTURES.
.PA
GUIDE TO STRUCTURED TRANSLATOR INSTALLATION

PROCEDURES
  1.  THE FOLLOWING PROCEDURES SHOULD BE COPIED TO YOUR PROCEDURE
      LIBRARY (SYS1.PROCLIB OR EQUIVALENT) FROM TAPE FILE 2.
      A.  FORTC    - COMPILE ONLY
      B.  FORTCL   - COMPILE AND LINK FROM FPC.WORK TO FPC.TESTLIB
                     (THIS PROC MUST BE TAILORED TO YOUR PROGRAM
                      LIBRARIES)
      C.  FORTCLG  - COMPILE, LINK, AND EXECUTE

TRANSLATOR
  1.  THREE VERSIONS OF THE STRUCTURED FORTRAN TRANSLATOR ARE
      PROVIDED ON TAPE FILE 1.
      A.  GU118000 - IBM 370 ALC VERSION (FASTER)
      B.  GU119000 - STRUCTURED FORTRAN SOURCE VERSION (PORTABLE)
      C.  GU119001 - BOOTSTRAP ANS FORTRAN VERSION OF GU119000
                     CREATED USING GU118000.
  2.  THE ABOVE JCL PROCEDURES ASSUME THE GU118000 VERSION WILL
      BE INSTALLED. IF NOT JUST CHANGE THE PROGRAM NAME ON THE
      EXECUTE STATEMENT IN THE TRANSLATE STEP.
  3.  THE GU118000 VERSION MUST BE ASSEMBLED USING AN OS/VS
      ASSEMBLER WITH THE FPC MACROS IN TAPE FILE 1 INCLUDED
      IN THE ASSEMBLER SYSLIB. NOTE ASSEMBLER F WILL NOT WORK
      CORRECTLY SINCE IT ONLY HANDLES 8 CHARACTER SETC VARIABLES.
      ALSO NOTE THAT VTAM INCLUDES A MACRO NAMED DO WHICH MUST BE
      RENAMED TO PREVENT CONFLICT WITH FPC STRUCTURED ASSEMBLER
      DO MACRO.
  4.  THE GU119001 VERSION CAN BE COMPILED BY ANY ANS FORTRAN
      COMPILER. THE BEST TEST OF THIS VERSION IS TO USE IT TO
      REPRODUCE ITSELF FROM GU119000. NOTE THAT THE VALUE OF
      THIS VERSION IS ITS PORTABILITY, NOT ITS SPEED.
.PA
CASE VALUE

FUNCTION - DEFINE BEGINNING OF BLOCK OF CODE TO BE EXECUTED IF
           THE CURRENT VALUE OF THE ASSOCIATED DOCASE INDEX
           VARIABLE IS EQUAL TO VALUE. IF THE KEYWORD ELSE IS
           SPECIFIED INSTEAD OF A VALUE, THEN THE BLOCK WILL
           BE EXECUTED IF THE CURRENT VALUE OF THE INDEX DOES
           NOT MATCH AND DEFINED CASE VALUE. CASES MAY BE IN ANY
           ORDER.

SYNTAX  -  VALUE MUST BE A ONE OR MORE INTEGER CONSTANTS BETWEEN
           1 AND 218, OR IT MUST BE THE KEYWORD ELSE.

EXAMPLE -  SEE DOCASE
.PA
DO FOREVER

FUNCTION - DEFINE START OF INFINITE LOOP WHICH CAN ONLY BE TERMINATED
           BY PEXIT, RETURN, CALL EXIT, OR STOP

SYNTAX   - ALL KEYWORDS

EXAMPLE  - DO FOREVER
              .
              IF  (FAIL.EQ.TRUE) STOP 10
              .
              .
           OD
.PA
DO I=J,K,L

FUNCTION - DEFINE BEGINNING OF STANDARD FORTRAN DO LOOP BLOCK OF CODE

SYNTAX   - I, J, K, L ARE DEFINED THE SAME AS IN FORTRAN DO STATEMENT

                   I - INTEGER INDEX VARIABLE NAME
                   J - INTEGER VARIABLE OR CONSTANT DEFINING THE
                       STARTING VALUE OF I
                   K - INTEGER VARIABLE OR CONSTANT DEFINING THE
                       MAXIMUM VALUE OF I
                   L - OPTIONAL INTEGER VARIABLE OR CONSTANT
                       DEFINING INCREMENT FOR I AT END OF EACH
                       REPETITION OF BLOCK (DEFAULT IS 1)


COMMENTS - ONLY DIFFERENCE IS THAT NO STATEMENT NUMBER IS REQUIRED. IT
           GENERATED BY THE TRANSLATOR TO MATCH WITH THE CODE
           GENERATED BY THE CORRESPONDING OD STATEMENT

EXAMPLE -  DO I=1,5
              DO J=1,10
                 A(I,J)=X(I,J)
              OD
           OD
.PA
DO  UNTIL,(EXPRESSION)

FUNCTION - DEFINE BEGINNING OF BLOCK OF CODE WHICH IS EXECUTED
           REPETITIVELY UNTIL THE EXPRESSION IS TRUE.  THE TEST
           IS PERFORMED AT THE END OF EACH EXECUTION OF THE BLOCK.

SYNTAX   - EXPRESSION IS ANY VALID FORTRAN LOGICAL EXPRESSION

EXAMPLE -  DO UNTIL,(SKEY.GT.TABKEY(I))
              I=I+1
           OD
.PA
DO WHILE,(EXPRESSION)

FUNCTION - DEFINE START OF BLOCK OF CODE WHICH WILL BE EXECUTED
           REPETITIVELY WHILE THE EXPRESSION IS TRUE. THE TEST
           IS PERFORMED BEFORE EACH EXECUTION OF THE BLOCK

SYNTAX   - EXPRESSION CAN BE ANY VALID FORTRAN LOGICAL EXPRESSION

EXAMPLE  - PM  GETREC
           DO  WHILE,(EOF.NE.TRUE)
               PM  PROREC
               PM  GETREC
           OD

COMMENTS - THE ABOVE CONTROL STRUCTURE IS THE STANDARD FORM OF
           MOST FILE PROCESSING MAIN PROGRAMS.  THE READ ROUTINE
           NAMED GETREC SETS EOF=TRUE WHEN END OF FILE OCCURS.
           THE ROUTINE NAMED PROREC PROCESSES RECORDS.
.PA
DOCASE INDEX

FUNCTION - EXECUTE ONE OR NONE OF THE FOLLOWING BLOCKS OF CODE
           DEFINED BY CASE AND ESAC STATEMENTS.  IF THE CURRENT
           VALUE OF INDEX EQUALS THE VALUE ON A CASE STATEMENT,
           THAT CASE WILL BE EXECUTED.  IF THERE IS NO MATCH,
           AND THERE IS A CASE STATEMENT WITH THE VALUE ELSE
           SPECIFIED, THAT CASE WILL BE EXECUTED.  OTHERWISE
           NO CASES WILL BE EXECUTED AND CONTROL WILL PASS
           DIRECTLY TO THE ENDING ESACOD STATEMENT.

SYNTAX   - INDEX MUST BE A VALID FORTRAN INTEGER WHICH CAN BE USED
           IN THE COMPUTED GOTO STATEMENT GENERATED BY THE
           TRANSLATOR.

EXAMPLE  - DOCASE NUMBER
             CASE  1,3,5,7,11,13,17,19,23,29,31
               PM  PRIME
             ESAC
             CASE  6,28
               PM  PERFCT
             ESAC
             CASE  2,4,6,8,10,12,14,16,18,20,22,24,26,30
               PM  EVEN
             ESAC
             CASE  ELSE
               PM  OTHER
             ESAC
           ESACOD

COMMENT  - THE MOST COMMON USE OF DOCASE IS TO SELECT PROCESSING
           ROUTINES BASED ON SOME TYPE OF RECORD CODE.  IT IS MUCH
           MORE EFFICIENT THAN MULTIPLE ELSEIF STATEMENTS IF THERE
           IS A LARGE NUMBER OF ROUTINES TO SELECT.
.PA
ELSE

FUNCTION - DEFINE END OF BLOCK OF CODE EXECUTED IF PREVIOUS IF OR
           ELSEIF IS TRUE AND DEFINE BEGINNING OF BLOCK OF CODE TO
           BE EXECUTED IF ALL PREVIOUS IF AND ELSEIF STATEMENTS
           WERE FALSE.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE IF
.PA
ELSEIF (EXPRESSION)

FUNCTION - DEFINE END OF BLOCK OF CODE EXECUTED IF PREVIOUS IF OR
           ELSEIF IS TRUE AND DEFINE BEGINNING OF BLOCK OF CODE TO
           BE EXECUTED IF EXPRESSION IS TRUE.

SYNTAX   - EXPRESSION MUST BE VALID FORTRAN LOGICAL EXPRESSION

EXAMPLE  - SEE IF
.PA
ESAC

FUNCTION - DEFINE END OF CASE BLOCK. CONTROL IS TRANSFERED TO
           NEXT ESACOD STATEMENT.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE DOCASE
.PA
ESACOD

FUNCTION - DEFINE END OF DOCASE CONTROL STRUCTURE.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE DOCASE
.PA
FI

FUNCTION - DEFINE END OF IF CONTROL STRUCTURE.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE IF
.PA
IF (EXPRESSION)

FUNCTION - DEFINE BEGINNING OF BLOCK OF CODE TO BE EXECUTED IF
           EXPRESSION IS TRUE.  IF THE EXPRESSION IS FALSE,
           TRANSFER CONTROL TO THE NEXT ELSEIF, ELSE, OR FI
           STATEMENT.  IF CONTROL STRUCTURES MAY BE NESTED.

SYNTAX   - EXPRESSION MUST BE VALID FORTRAN LOGICAL EXPRESSION

EXAMPLES - IF (OPTION.EQ.LIST)
              PM  REPORT
           FI
           .
           .
           IF (KEY.GT.100)
              PM  BIG
           ELSE
              PM  SMALL
           FI
           .
           IF (KEY.LT.10)
              PM  SMALL
           ELSEIF (KEY.LT.50)
              PM  MEDIUM
           ELSE
              PM  BIG
           FI
.PA
OD

FUNCTION - DEFINE END OF DO TYPE CONTROL STRUCTURE

SYNTAX   - ALL KEWORDS

EXAMPLES - SEE DO, DO WHILE, DO UNTIL, AND DO FOREVER
.PA
PENTRY NAME

FUNCTION - DEFINE BLOCK OF CODE WHICH CAN BE EXECUTED BY PERFORM
           STATEMENTS.

SYNTAX   - NAME MUST BE VALID FORTRAN INTEGER VARIABLE WHICH CAN BE
           USED AS VARIABLE IN COMPUTED GOTO STATEMENT GENERATED BY
           THE TRANSLATOR.

EXAMPLE  - SEE PERFORM
.PA
PERFORM NAME

FUNCTION - EXECUTE BLOCK OF CODE DEFINED BY PENTRY STATEMENT WITH THE
           SAME NAME.  RETURN TO NEXT STATEMENT FOLLOWING PERFORM IS
           ACCOMPLISHED BY EXECUTING PEXIT STATEMENT WITHIN THE BLOCK
           OF CODE DEFINED BY PENTRY. NOTE PM IS SHORT FORM OF PERFORM.

SYNTAX   - NAME MUST BE VALID FORTRAN INTEGER VARIABLE WHICH CAN BE
           USED AS VARIABLE IN COMPUTED GOTO STATEMENT GENERATED BY
           THE TRANSLATOR.

EXAMPLE  - INTEGER GETREC
            .
           PERFORM GETREC
            .
           STOP
           PENTRY GETREC
           READ(FIN,10,END=1000)RECORD
           PEXIT
      1000 EOF=TRUE
           PEXIT
.PA
PEXIT

FUNCTION - EXIT FROM PERFORMED BLOCK OF CODE TO NEXT STATEMENT
           FOLLOWING PERFORM STATEMENT.

SYNTAX   - ALL KEYWORD

EXAMPLE  - SEE PERFORM
.PA
PM NAME

FUNCTION - SHORT FORM OF PERFORM - SEE PERFORM
