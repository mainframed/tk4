         TITLE 'P D S  --  PDS LIST, DIRENTRY, FIND, REPLACE 09/28/88'
***********************************************************************
***      LIST SUBCOMMAND    MODIFIED BY BRUCE LELAND -- JUNE, 1982  ***
***                                                                 ***
***      DIRENTRY SUBCOMMAND   ADDED BY BRUCE LELAND -- JUNE, 1982  ***
***                                                                 ***
***      FIND SUBCOMMAND    MODIFIED BY BRUCE LELAND -- APR,  1985  ***
***                                                                 ***
***      REPLACE SUBCOMMAND    ADDED BY BRUCE LELAND -- APR,  1985  ***
***********************************************************************
*
LIST     CSECT
         USING *,R8
         MVI   ##HELOFF,C'L'       LIST SUBCOMMAND
         B     LIST010
*
         SPACE 1
DIRENTRY L     R8,=A(LIST)         BASE REGISTER FOR LIST
         LA    R1,L530             ASSUME A NON-PARTITIONED DATA SET
         TM    DSORG,DS1DSGPO      CORRECT?
         BZ    MSGNEW              YES, ERROR
         SPACE 1
         MVI   ##HELOFF,C'D'       DIRENTRY SUBCOMMAND
         IC    R1,DIRFLAG
         N     R1,=XL4'0000001F'   NUMBER OF HALFWORDS
         LA    R5,12(R1,R1)        LENGTH IN BYTES
         LA    R6,DIRNAME          START OF DIRECTORY ENTRY
         LA    R4,16               DUMP FORMAT, WIDTH=16
         MVI   MTHIGHL+4,2
         MVC   MSGTEXT1(3),L143$2  DIRECTORY DUMP HEADER
         MVC   INSERT#1(8),DIRNAME
         CVD   R5,DOUBLE
         MVC   INSERT#2-2(4),=X'40202120'
         ED    INSERT#2-2(4),DOUBLE+6
         AR    R5,R6
         BCTR  R5,0
         LA    R3,LIST600          PROCESSING ROUTINE
         BR    R3
         SPACE 2
*
FIND     L     R8,=A(LIST)         BASE REGISTER FOR LIST
         MVI   ##HELOFF,C'F'       FIND SUBCOMMAND
         MVI   ##HELOFF+3,C'D'     NO OUTPUT YET
         B     LIST008
         SPACE 2
*
REPLACE  L     R8,=A(LIST)         BASE REGISTER FOR LIST
         MVI   ##HELOFF,C'R'       REPLACE SUBCOMMAND
         MVI   ##HELOFF+3,C'D'     NO OUTPUT YET
         MVC   DSNMEMQ(8),DIRNAME  MEMBER NAME TO CHECK
         BAL   R2,ENQMTEST         MEMBER IN USE?
         B     NEWCMD              YES, OUTPUT AN IN-USE MESSAGE
         SPACE 1
         CLI   REPLTH+1,X'FF'      REPLACEMENT STRING EVER CODED?
         BNE   LIST002             YES, BRANCH
         LA    R1,L772             NO, CHECK WHICH MESSAGE TO OUTPUT
         CLI   FINDLTH+1,0         SEARCH STRING EVER CODED?
         BNE   MSGNEWXX            YES, TERMINATE THIS GROUP
         SPACE 1
LIST002  MVC   FLAGSDD(1),HFLAGSDD INITIALIZE FLAGSDD
         TM    DSORG,DS1DSGPO        DSORG=PO?
         BNO   LIST004               NO, BRANCH
         TM    FLAGSCC,RECFMU        LOAD MODULE?
         BNO   LIST004               NO, BRANCH
         TM    FLAGSDD,LBLOCK+LDUMP+BLOCK+DUMP  ANY LOAD FORMAT?
         BM    LIST004                          YES, BRANCH
         MVI   FLAGSDD,LDUMP                    NO, USE LDUMP
LIST004  TM    FLAGSDD,LBLOCK+LDUMP+BLOCK+DUMP  ANY LOAD FORMAT?
         BNM   LIST006                          NO, BRANCH
         LA    R1,L773
         CLC   FINDLTH(2),REPLTH   EQUAL LENGTH STRINGS?
         BNE   MSGNEWXX            NO, TERMINATE THIS GROUP
         SPACE 1
LIST006  TM    #REPFLAG,LIST#REP   REPLACE SPECIFIED?
         BNO   LIST008             NO, BRANCH
         BAL   R2,SHUTSTW2         CLOSE AND FREE THE STOW DCB
         SPACE 1
LIST008  LA    R1,L770
         CLI   FINDLTH+1,0         STRING EVER CODED?
         BZ    MSGNEWXX            NO, TERMINATE THIS GROUP
         OI    FLAGSGG,FOUTSUB     SUBCOMMAND GAINED CONTROL
         XC    WORKTBL,WORKTBL     RESET THE TRT TABLE
         SR    R15,R15
         IC    R15,FINDSTR         FIRST CHARACTER OF NEW STRING
         LA    R1,WORKTBL(R15)     ADDRESS OF NEW TRT BYTE
         MVI   0(R1),X'77'         SET TRT BYTE TO NON-ZERO
         SPACE 2
LIST010  MVC   FLAGSDD(1),HFLAGSDD INITIALIZE FLAGSDD
         OC    #MAXIN,#MAXIN       ANY INPUT DESIRED?
         BZ    LIST910             NO, BRANCH
         SPACE 2
         TM    DSORG,DS1DSGPO        DSORG=PO?
         BNO   LIST090               NO, BRANCH
         TM    FLAGSCC,RECFMU        LOAD MODULE?
         BNO   LIST090               NO, BRANCH
         TM    FLAGSDD,LBLOCK+LDUMP+BLOCK+DUMP  ANY LOAD FORMAT?
         BM    LIST020                          YES, BRANCH
         MVI   FLAGSDD,LDUMP                    NO, USE LDUMP
LIST020  TM    FLAGSDD,LBLOCK+LDUMP  LBLOCK OR LDUMP FORMAT?
         BZ    LIST090               NO, BRANCH
         SPACE 1
         LA    R2,#ESDPTR          START OF ESD LIST
         L     R15,=A(READESD)     ESD SYMBOL ROUTINE
         BALR  R14,R15             ANY SYMBOLS?
         B     *+8                 NO, "NO EXTERNAL SYMBOLS"
         B     LIST030             YES, BRANCH
         SPACE 2
         MVC   INSERT#1(8),DIRNAME MEMBER NAME IN ERROR
         M$MSG L704$1              OUTPUT AN ERROR MESSAGE
         B     LIST090             CONTINUE, BUT NO CSECT IDENTIFIERS
         SPACE 2
         USING ESDENTRY,R2
*  LOOPS TO SET MAXIMUM LENGTH FIELDS FOR LABEL REFERENCE ENTRIES
*  AND TO ASSOCIATE ENTRY RECORDS WITH THE APPROPRIATE CSECT NAMES
LIST030  OI    #LISTFLG,X'01'      CSECT OPERATION FLAG
         ICM   R2,B'1111',ESDLINK  ANY MORE ENTRIES?
         BZ    LIST060             NO, BRANCH
         MVI   ESDSEG#,0           CLEAR THE SEGMENT NUMBER
         CLI   ESDTYPE,CODESD      CSECT ENTRY?
         BNE   LIST030             NO, BRANCH
         LR    R1,R2
         SPACE 1
LIST040  ICM   R1,B'1111',ESDLINK-ESDENTRY(R1)
         BZ    LIST060
         CLI   ESDTYPE-ESDENTRY(R1),CODELR  ASSOCIATED EXTERNAL LABEL?
         BNE   LIST030                      NO, BRANCH
         MVI   ESDSEG#-ESDENTRY(R1),0       CLEAR THE SEGMENT NUMBER
         ST    R2,ESDCSECT-ESDENTRY(R1)     SAVE POINTER TO NAME
         SR    R14,R14
         LH    R0,ESDID                     RELATIVE ESDID OF CSECT
         STH   R0,ESDID-ESDENTRY(R1)        SAVE FOR ENTRY
         L     R0,ESDADDR-1                 BASE START ADDRESS
         ST    R0,ESDMAIN-ESDENTRY(R1)      SAVE MAIN OFFSET
         A     R0,ESDLEN-1                  BASE MAXIMUM REFERENCE
         ICM   R14,B'0111',ESDADDR-ESDENTRY(R1)
         SR    R0,R14
         ST    R0,ESDLEN-ESDENTRY-1(R1)     MAXIMUM SYMBOL LENGTH
         B     LIST040
         SPACE 2
*  LOOP TO FILTER THE SYMBOL NAMES
LIST060  LA    R2,#ESDPTR          START OF ESD LIST
         SR    R3,R3
         ICM   R3,B'0001',#MODLEN  ANY FILTERING?
         BZ    LIST090             NO, BRANCH
         BCTR  R3,0                MACHINE LENGTH
         SPACE 1
LIST070  LR    R1,R2
         ICM   R2,B'1111',ESDLINK  END OF LIST?
         BZ    LIST090             YES, BRANCH
         CLC   ESDNAME(*-*),#MODTXT  <<EXECUTED>>
         EX    R3,*-6              MATCH THE PARTIAL NAME?
         BE    LIST070             YES, BRANCH
         MVC   ESDLINK-ESDENTRY(4,R1),ESDLINK
         LR    R2,R1                    DROP THIS SYMBOL
         B     LIST070
         SPACE 1
LIST090  MVC   STARTTR(3),DIRTTR   FIRST TTR
         SPACE 2
LIST100  L     R15,=V(EXCP)
         BALR  R14,R15
         B     *+4(R15)                 PROCESS RETURN CODE
         B     LIST120                    00 - GOOD READ
         B     LIST110                    04 - END OF MEMBER
         B     LIST900                    08 - END OF DATA SET
         B     LIST910                    12 - I/O ERROR
         SPACE 1
LIST110  TM    DSORG,DS1DSGIS           ISAM DATA SET?
         BNO   LIST900                  NO, BRANCH
         M$MSG L005                     YES, OUTPUT A MESSAGE
         B     LIST100                  CONTINUE
         SPACE 1
LIST120  NI    #LISTFLG,FF-X'20'        TURN OFF THE CSECT DATA FLAG
         L     R5,LS                    CURRENT LENGTH
         LR    R6,R0                    START OF BUFFER
         LR    R1,R5                    SAVE BLOCKSIZE FOR LATER
         LM    R14,R15,#LISTN0          SAVE IF NOT PHYSICAL BLOCKS
         L     R0,#LISTN0               PREVIOUS MEMBER DISPLACEMENT
         ST    R0,#LISTN1               UPDATE MEMBER DISPLACEMENT
         AR    R0,R5                    ADD CURRENT LENGTH FOR NEXT
         ST    R0,#LISTN0               UPDATE FOR NEXT ENTRY
         TM    FLAGSDD,BLOCK            BLOCK OUTPUT DESIRED?
         BO    LIST400                  YES, BRANCH
         TM    FLAGSDD,DUMP             DUMP OUTPUT DESIRED?
         BO    LIST420                  YES, BRANCH
         STM   R14,R15,#LISTN0          NOT PHYSICAL BLOCKS
         AR    R5,R6                    ADDRESS OF END OF BUFFER
         BCTR  R5,0                     END OF BUFFER ADDRESS
         LA    R3,LIST200               ASSUME FIXED OR UNDEFINED
         TM    FLAGSCC,RECFMF           RECFM=F?
         LH    R4,LRECL                 GET RECORD LENGTH
         BOR   R3                       YES, BRANCH
         SPACE 1
         TM    FLAGSCC,RECFMU           RECFM=U?
         LR    R4,R1                    BLOCK LENGTH
         BOR   R3                       YES, BRANCH
         TM    FLAGSCC,RECFMV           RECFM=V?
         BNOR  R3                       NO, PROCESS LIKE RECFM=U
         SPACE 1                        SET END OF BUFFER ADDRESS
         AH    R6,=H'4'                 RECFM=V; START OF LRECL'S
         LA    R3,LIST150               VARIABLE LEN RECORD PROCESSOR
         SPACE 2
LIST150  SR    R4,R4
         ICM   R4,B'0011',0(R6)         RECORD LENGTH +4
         AH    R6,=H'4'                 SKIP OVER HEADER
         SH    R4,=H'4'                 SUBTRACT HEADER LENGTH
         BP    LIST200                  BRANCH IF RECORD EXISTS
         SR    R4,R4                    NO, RESET LENGTH TO ZERO
         SPACE 1
LIST160  LR    R0,R4                    PREVIOUS RECORD LENGTH
         A     R0,#LISTN1               OFFSET IN CURRENT RECORD
         ST    R0,#LISTN1               UPDATE
         ICM   R0,B'1111',#MAXFIND      DONE WITH FIND/REPLACE?
         BP    LIST166                  NO, BRANCH
         TM    #REPFLAG,LIST#REP        WRITE SPECIFIED?
         BNO   NEWCMD                   NO, BRANCH
         TM    #REPFLAG,LISTUPDE        UPDATE ERROR?
         BO    NEWCMD                   YES, BRANCH
         TM    #REPFLAG,LISTUPDR        REPLACED DATA IN THIS BLOCK?
         BO    LIST170                  YES, BRANCH
         B     NEWCMD
         SPACE 1
LIST166  BXLE  R6,R4,0(R3)              SKIP TO NEXT RECORD
         CLI   ##HELOFF,C'D'            DIRENTRY SUBCOMMAND?
         BE    DIR000                   YES, BRANCH
         TM    FLAGSDD,LBLOCK+LDUMP     LBLOCK OR LDUMP?
         BZ    LIST170                  NO, GET A NEW BLOCK
         LM    R3,R6,#LFSAVE4           RESTORE R3-R6
         BXLE  R6,R4,0(R3)              SKIP TO NEXT RECORD
         SPACE 3
*  REWRITE ANY UPDATED RECORDS FOR REPLACE
LIST170  CLI   ##HELOFF,C'R'            REPLACE SUBCOMMAND?
         BNE   LIST100                  NO, BRANCH
         TM    #REPFLAG,LIST#REP        WRITE SPECIFIED?
         BNO   LIST100                  NO, BRANCH
         TM    #REPFLAG,LISTUPDE        UPDATE ERROR?
         BO    LIST198                  YES, BRANCH
         TM    #REPFLAG,LISTUPDR        REPLACED DATA IN THIS BLOCK?
         BNO   LIST198                  YES, BRANCH
         XI    #REPFLAG,LISTUPDR        NO DATA UPDATED NOW
         SPACE 1
         TM    #REPFLAG,LISTUPDO        OPEN FOR UPDATE?
         BO    LIST190                  YES, BRANCH
         OI    #REPFLAG,LISTUPDO        OPEN FOR UPDATE NOW
         SPACE 1
         OI    FLAGSCC,FUPDATE          MARK FOR STOW OPEN ROUTINE
         BAL   R2,OPENSTOW              OPEN OUTPUT DCB AND RESERVE
         B     NEWCMD                   COULD NOT OPEN -- ERROR
         SPACE 1
         MVI   SUBPOOLT,21              MARK TEMPORARY STORAGE OBTAINED
         LH    R0,=H'32760'             MAXIMUM BUFFER SIZE
         ICM   R0,B'1000',SUBPOOLT      SUBPOOL
         GETMAIN R,LV=(0)
         ST    R1,#LISTBUF              POINTER TO BUFFER AREA
         SPACE 1
* UPDATE IDR RECORDS FOR LOAD MODULES IF REQUIRED
*  IDR FOR SUPERZAP TAKES THE FOLLOWING FORM:
*        BYTE  0.....'80' FOR ID
*        BYTE  1.....LENGTH OF IDR (USUALLY X'FA' = 250.)
*        BYTE  2.....WHO'S IDR IT IS (X'01' FOR SUPERZAP AND PDS)
*        BYTE  3.....NUMBER OF 13-BYTE IDR DATA ENTRIES (BITS 2-7)
*        BYTES 4-16, 17-29,... IDR DATA ENTRY AS FOLLOWS:
*              BYTES 0-1 --- ESD ID IN BINARY (FIRST IF NOT KNOWN)
*              BYTES 2-4 --- DATE ('YYDDDF')
*              BYTES 5-12 -- INFO ('USERID' WHERE USERID=TSO USERID)
         SPACE 2
         TM    DSORG,DS1DSGPO          PARTITIONED?
         BNO   LIST190                 NO, BRANCH
         TM    #REPFLAG,LISTUPQT       QUIET MODE UPDATE?
         BO    LIST190                 YES, BRANCH
         TM    FLAGSCC,RECFMU          RECFM=U?
         BNO   LIST188                 NO, BRANCH
         ICM   R0,B'0111',DIRTTR       TTR TO START WITH
         SLL   R0,8                    Z OF TTRZ IS ZERO
         ST    R0,DOUBLE               SAVE TTRZ TEMPORARILY
         SPACE 1
         LA    R0,DOUBLE               POINT TO TTRZ VALUE
         POINT STOWDCB,(0)             POINT TO BLOCK TO BE UPDATED
         SPACE 1
LIST174  LH    R0,=H'32760'            MAXIMUM BUFFER SIZE
         STH   R0,STOWDCB+DCBBLKSI-IHADCB  UPDATE IN THE DCB
         L     R2,#LISTBUF             START OF BUFFER
         SPACE 1
         READ  FIXPDSD,SF,STOWDCB,(2),'S',MF=E
         CHECK FIXPDSD
         SPACE 1
         LR    R1,R2
         TM    0(R1),X'01'              CONTROL RECORD OF SOME KIND?
         BO    LIST190                  YES, CANNOT FIND THE ZAP IDR
         SPACE 1
         CLI   0(R1),X'20'              CESD?
         BNE   LIST180                  NO, BRANCH
         OC    #LISTIDU(2),#LISTIDU     ANY ESDID?
         BNZ   LIST174                  YES, BRANCH
         LH    R3,4(R2)                 FIRST ESDID
LIST178  LA    R2,16(,R2)               NEXT ESD ENTRY
         LA    R3,1(,R3)                NEXT ESDID
         CLI   0(R2),0                  CSECT ENTRY?
         BNE   LIST178                  NO, BRANCH
         OC    5(3,R2),5(R2)            VALID LENGTH?
         BZ    LIST178                  NO, BRANCH
         BCTR  R3,0                     LESS ONE
         STH   R3,#LISTIDU              UPDATE THE ESDID
         B     LIST174
         SPACE 1
LIST180  CLI   0(R1),X'40'              TEST SYMBOLS?
         BE    LIST174                  YES, READ ANOTHER
         CLI   0(R1),X'80'              IDR?
         BNE   LIST190                  NO, BYPASS IDR MARKING
         TM    2(R1),X'01'              YES - BUT DONE BY SUPERZAP?
         BNO   LIST174                  NO - FORGET THIS ONE
         SR    R2,R2                    CLEAR WORK REG
         IC    R2,3(R1)                 PICK UP # OF IDR DATA ENTRIES
         LA    R2,1(R2)                 INCREMENT # OF IDR ENTRIES...
         LR    R4,R2                    SAVE IT FOR LATER
         N     R2,=XL4'0000003F'        WE JUST WANT BITS 2-7
         MH    R2,=H'13'                EACH ENTRY IS 13 BYTES LONG
         LA    R2,3(R2)                 IDR HDR IS 3 BYTES LONG
         MVC   FULLWORD(2),0(R1)        CURRENT COUNTS
         MVI   FULLWORD,0               CLEAR FIRST BYTE
         NI    FULLWORD,X'3F'           MASK SECOND BYTE
*  SO NOW R2 HAS AN OFFSET TO THE NEXT AVAILABLE POSITION IN THE IDR
         CLM   R2,B'0011',FULLWORD      AT END OF THE IDR RECORD?
         BH    LIST174                  YES, BRANCH
         SH    R2,=H'13'                BACK UP OFFSET
         STC   R4,3(R1)                 UPDATE COUNT
         AR    R2,R1                    NEXT IDR POSITION
         MVC   1(2,R2),#LISTIDU         MOVE IN ESDID
         TIME  ,                        GET THE DATE
         STCM  R1,B'0111',3(R2)         SAVE YYDDDF IN IDR DATA FIELD
         L     R1,ADDRPSCB              ADDRESS OF THE PSCB
         MVC   6(7,R2),PSCBUSER-PSCB(R1)  LOGON USERID
         MVI   6+7(R2),X'40'              FOLLOWING BLANK
         SPACE 1
         L     R2,#LISTBUF             START OF BUFFER
         WRITE FIXPDSD,SF,STOWDCB,(2),'S',MF=E
         CHECK FIXPDSD
         B     LIST190
         SPACE 1
LIST188  TM    DIRFLAG,X'0F'           ISPF STATISTICS?
         BNO   LIST190                 NO, BRANCH
         TIME  DEC                     GOT THE TIME?
         STCM  R1,B'1111',DIRSPFCD     CHANGED DATE
         STCM  R0,B'1100',DIRSPFCT     TIME OF LAST CHANGE
         SR    R1,R1
         IC    R1,DIRSPFR              MODIFICATION NUMBER
         LA    R1,1(,R1)               ADD ONE
         CLI   DIRSPFR,99              VALID TO ADD?
         BNL   *+8                     NO, BRANCH
         STC   R1,DIRSPFR              YES, UPDATE THE MOD NUMBER
         L     R1,ADDRPSCB             ADDRESS OF THE PSCB
         MVC   DIRSPFID(7),PSCBUSER-PSCB(R1)  LOGON USERID
         MVC   DCBRELAD-IHADCB+STOWDCB(3),DIRTTR
         STOW  STOWDCB,DIRNAME,R       REPLACE OPTION
         LR    R5,R15                  SAVE RETURN CODE
         SPACE 1
         B     *+4(R5)                 PROCESS RETURN CODE
         B     LIST190                   00 - SUCCESSFUL
         EX    0,*                       04 - SHOULD NOT OCCUR
         EX    0,*                       08 - SHOULD NOT OCCUR
         B     FULLDIR                   12 - DIRECTORY FULL
         B     IOERROR                   16 - I/O ERROR
         SPACE 2
LIST190  LH    R1,#REPCNT
         LA    R1,1(,R1)
         STH   R1,#REPCNT
         STM   R14,R12,12(R13)            CONVERT CCHHR TO TTR
         LA    R2,CURMBB                  CCHHR TO CONVERT
         L     R1,INDCB+(DCBDEBAD-IHADCB) DEB ADDRESS
         L     R15,ADDRRLTV               ADDRESS OF CCHHR->TTR CONVERT
         LR    R3,R13                     ADDRESS OF SAVE AREA
         BALR  R14,R15                    CALL CONVERT ROUTINE
         LR    R13,R3                     RESTORE SAVE AREA ADDRESS
         ST    R0,12+4+4(R13)             RESULT TTR RETURNED IN R0
         LM    R14,R12,12(R13)            RESTORE REGISTERS
         ST    R0,DOUBLE                  SAVE TTRZ TEMPORARILY
         SPACE 1
         POINT STOWDCB,DOUBLE             POINT TO BLOCK TO BE UPDATED
         SPACE 1
         L     R0,LS                      RECORD LENGTH
         STH   R0,STOWDCB+DCBBLKSI-IHADCB UPDATE IN THE DCB
         L     R2,#LISTBUF                START OF BUFFER
         READ  FIXPDSD,SF,STOWDCB,(2),'S',MF=E
         CHECK FIXPDSD
         SPACE 1
         L     R2,EXCPBUFF                EXCHANGE FOR THE UPDATED DATA
         WRITE FIXPDSD,SF,STOWDCB,(2),'S',MF=E
         CHECK FIXPDSD
         SPACE 1
LIST198  TM    #REPFLAG,LISTTERM                 TERMINATE AFTER BLOCK?
         BNO   LIST199                           NO, BRANCH
         XI    #REPFLAG,LISTTERM                 TURN OFF FLAG
         B     NEWCMD
         SPACE 1
LIST199  CLI   OPENLIST,X'7C'                    REPLACE TERMINATION?
         BNE   LIST100                           NO, BRANCH
         MVI   MTHIGHL,L'MSGBLKU-1
         MVC   INSERT#1-1(L'MSGBLKU),MSGBLKU
         LH    R0,#REPCNT
         CVD   R0,DOUBLE
         ED    INSERT#1-1(10),DOUBLE+4
         M$MSG L145$1
         BAL   R2,SHUTSTW2                       FORCE STOW DCB CLOSE
         B     NEWCMD
         SPACE 3
LIST200  L     R0,#LISTN0               PREVIOUS MEMBER DISPLACEMENT
         ST    R0,#LISTN1               UPDATE MEMBER DISPLACEMENT
         AR    R0,R4                    ADD CURRENT LENGTH FOR NEXT
         ST    R0,#LISTN0               UPDATE FOR NEXT ENTRY
         L     R0,#BLKCNT
         A     R0,=F'1'
         ST    R0,#BLKCNT
         STM   R3,R6,#LFSAVE4             SAVE FOR LBLOCK/LDUMP
         L     R0,#SKIPREC
         S     R0,=F'1'                   SKIP THIS RECORD?
         ST    R0,#SKIPREC
         BNM   LIST160                    YES, BRANCH
         L     R0,#MAXIN
         S     R0,=F'1'                   SUFFICIENT INPUT RECORDS?
         ST    R0,#MAXIN
         BM    LIST910                    YES, BRANCH
LIST210  LR    R1,R4                      LENGTH OF DATA AREA
         TM    FLAGSDD,LBLOCK             LBLOCK?
         BO    LIST400                    YES, BRANCH
         TM    FLAGSDD,LDUMP              LDUMP?
         BO    LIST420                    YES, BRANCH
         LA    R0,8                       WIDTH OF LINE NUMBER FIELD
         LR    R15,R6                     MOVE START POSITION
         LR    R14,R15                    LINE NUMBER FOR RECFM=V OR U
         AH    R15,#SKIPCOL               ADJUST START FOR START COLUMN
         SH    R1,#SKIPCOL                ADJUST LEN FOR START COLUMN
         TM    FLAGSDD,NONUM+DONONUM      NONUM FORMAT?
         BNZ   LIST330                    YES, BRANCH
         AR    R15,R0                     ADJUST START FOR RECFM=V OR U
         SR    R1,R0                      ADJUST LENGTH, RECFM=V U OR F
         TM    FLAGSCC,RECFMF             RECFM=F?
         BNO   LIST230                    NO, BRANCH
         SR    R15,R0                     CORRECT DATA START POINTER
         LA    R14,0(R4,R6)               END OF LINE
         SR    R14,R0                     START OF LINE NUMBER
LIST230  TM    FLAGSDD,SNUM               SNUM FORMAT?
         BO    LIST330                    YES, BRANCH
         MVC   MSGLINE+4(8),0(R14)        NUM FORMAT -- GET LINE NUMBER
         NC    MSGLINE+4(8),LISTL000      DROP NUMERIC PART
         CLC   MSGLINE+4(8),LISTL000      ZONE DIGITS FOR ALL BYTES?
         BE    LIST240                    YES, BRANCH
         OI    FLAGSDD,DONONUM            CONTINUE WITH NONUM FORMAT
         B     LIST210
         SPACE 1
LIST240  MVC   MSGLINE+4(6),0(R14)        SPF LINE NUMBER FIELD
         TM    DIRFLAG,X'0F'              SPF ATTRIBUTES STORED?
         BO    LIST320                    YES, BRANCH
         LA    R0,5                       MAXIMUM OF 5 DIGITS TO BLANK
         LA    R2,MSGLINE+3               START OF FIELD TO BLANK
         MVC   MSGLINE+4(6),2(R14)        LINE NUMBER FIELD
LIST310  LA    R2,1(,R2)
         CLI   0(R2),C'0'                 BLANK LEADING ZEROES IN THE
         BNE   LIST320                       LINE NUMBER FIELD
         MVI   0(R2),X'40'
         BCT   R0,LIST310                 DO UP TO 5 DIGITS
LIST320  LA    R0,249                     MAXIMUM ALLOWED DATA LENGTH
         MVI   MSGLINE+10,X'40'           BLANK AFTER LINE NUMBER
         LA    R14,MSGLINE+11             WHERE TO MOVE DATA
         B     LIST340
         SPACE 2
LIST330  LA    R0,256                   MAXIMUM LRECL TO DISPLAY
         LA    R14,MSGLINE+4            WHERE TO MOVE OUTPUT DATA
         SPACE 1
LIST340  CR    R1,R0                    LENGTH>MAXIMUM ALLOWED?
         BL    *+6                      NO, BRANCH
         LR    R1,R0                    YES, USE MAXIMUM
         S     R1,=F'1'                 MACHINE LENGTH VALID?
         BM    LIST360                  NO, BRANCH
         STM   R14,R1,#LUSAVE4          SAVE R14, R15, R0, R1
***      MVC   0(*-*,R14),0(R15)        <<EXECUTED>>
***      EX    R1,*-6                   MOVE DATA INTO LINE
         SPACE 1
LIST360  LR    R2,R1                    MACHINE LENGTH
         LA    R1,MSGLINE+4             START OF DATA
         CR    R14,R1                   NUM MODE?
         BE    *+8                      NO, BRANCH
         AH    R2,=H'7'                 YES, ACCOUNT FOR LINE NO, BLANK
         A     R2,=F'1'                 ACTUAL DATA LENGTH
         C     R2,#MAXLEN               LENGTH>#MAXLEN?
         BL    *+8                      NO, BRANCH
         L     R2,#MAXLEN               YES, USE #MAXLEN INSTEAD
         S     R2,=F'1'                 MACHINE LENGTH VALID?
         BM    LIST160                  LENGTH=0, BRANCH
         LA    R0,5(,R2)                ACTUAL LINE LENGTH + HALFWORDS
         SLL   R0,16
         ST    R0,MSGLINE               CREATE OUTPUT LINE HEADER
         L     R1,#LUSAVE4+4            START OF DATA
         L     R2,#LUSAVE4+12           MACHINE LENGTH
         STH   R2,#LUSAVE4+12           MACHINE LENGTH LEFT
         LA    R14,1(R1,R2)             END OF DATA
         ST    R14,#LUSAVE4+8           END OF DATA
         MVI   ##HELOFF+1,C'N'          N OF FN.D OR RN.D
         CLI   ##HELOFF,C'F'            FIND OPERATION?
         BE    LIST370                  YES, BRANCH
         CLI   ##HELOFF,C'R'            REPLACE OPERATION?
         BNE   LIST399                  NO, LIST -- BRANCH
         SPACE 1
LIST370  L     R14,#LUSAVE4+8           END OF DATA
         LH    R2,#LUSAVE4+12           MACHINE LENGTH LEFT
         LH    R15,FINDLTH              STRING LENGTH
         ICM   R0,B'1111',#MAXFIND      DONE WITH FIND/REPLACE?
         BNP   LIST398                  YES, BRANCH
         BCTR  R15,0                    MACHINE LENGTH
         CLI   #REPINCR+1,0             INCREMENT BY 1?       ABL NOV86
         BH    LIST372                  NO, BRANCH            ABL NOV86
         EX    R2,LISTTRT               FIRST CHARACTER FOUND?
         BZ    LIST398                  NO, NOT IN STRING, QUIT
LIST372  DS    0H                                             ABL NOV86
         LR    R2,R14
         SR    R2,R1                    MACHINE LENGTH LEFT
         STH   R2,#LUSAVE4+12           MACHINE LENGTH LEFT
         CR    R15,R2                   POSSIBLY IN STRING?
         BNL   LIST398                  NO, QUIT
         CLC   0(*-*,R1),FINDSTR        <<EXECUTED>> -- COMPLETE STRING
         EX    R15,*-6                  ENTIRE STRING FOUND?
         BNE   LIST397                  NO, TRY THE DATA AGAIN
         SPACE 2
**       IF RECFM=F, LRECL=80 AND NUM OR SNUM FORMAT,
**       THEN DO NOT USE THE CONTINUATION COLUMN (COLUMN 72)
         LR    R0,R2
         TM    FLAGSCC,RECFMF           RECFM=F?
         BNO   LIST374                  NO, BRANCH
         CLI   LRECL+1,80               LRECL=80?
         BNE   LIST374                  NO, BRANCH
         TM    FLAGSDD,NONUM            NONUM FORMAT SPECIFIED?
         BO    LIST374                  YES, BRANCH
         S     R0,=F'1'                 DROP THE CONTINUATION COLUMN
         CR    R15,R0                   POSSIBLY IN STRING?
         BNL   LIST397                  NO, BRANCH
LIST374  L     R15,#MAXFIND             FOUND
         S     R15,=F'1'                     ANOTHER
         ST    R15,#MAXFIND                         ONE
         SPACE 1
*** ADDED FOR  REPLACE MEMBER /BEFORE/AFTER/ . . . .
         CLI   ##HELOFF,C'R'            REPLACE OPERATION?
         BE    LIST376                  YES, BRANCH
         MVI   ##HELOFF+1,C'F'          NO, FIND
         AH    R1,FINDLTH               POINT AFTER THE STRING
         BCTR  R1,0                     POINT AT END OF STRING
         B     LIST397
         SPACE 1
LIST376  AR    R0,R1                    LAST MOVABLE BYTE
         LR    R15,R1                   REPLACEMENT LENGTH
         AH    R15,REPLTH               TARGET OF MOVE
         LR    R2,R1                    REPLACEMENT LENGTH
         AH    R2,FINDLTH               SOURCE OF MOVE
         CR    R15,R2                   REPLACE LENGTH:FIND LENGTH
         BL    LIST390                    LOW: REDUCE THE STRING
         BE    LIST394                    EQUAL: REPLACE THE STRING
*                                         HIGH:  EXPAND THE STRING
LIST380  CR    R2,R15                   COMPLETED?
         BE    LIST394                  YES, BRANCH
         LR    R14,R2                   START A NEW SCAN
         BCTR  R14,0                    LESS ONE
LIST382  LA    R14,1(,R14)              NEXT BYTE
         CR    R14,R0                   POSSIBLY ANY BLANKS?
         BNL   LIST388                  NO, BRANCH
         CLI   0(R14),X'40'             BLANK?
         BNE   LIST382                  NO, BRANCH
         CLI   1(R14),X'40'             FOLLOWED BY ANOTHER BLANK?
         BNE   LIST382                  NO, BRANCH
         SPACE 1
LIST384  BCTR  R14,0
         MVC   1(1,R14),0(R14)          MOVE THE PREVIOUS CHARACTER
         CR    R14,R2                   DONE WITH THE MOVE?
         BH    LIST384                  NO, BRANCH
         LA    R2,1(,R2)                NEXT TARGET BYTE
         B     LIST380                  REPLACE THE STRING
         SPACE 1
LIST388  BAL   R2,LIST996               OUTPUT ANY MEMBER HEADER
         M$MSG L774                     ERROR MESSAGE
         OI    #REPFLAG,LISTUPDE        MARK AN UPDATE ERROR
         B     LIST399
         SPACE 2
LIST390  CR    R15,R2                   COMPLETED?
         BE    LIST394                  YES, BRANCH
         MVI   0(R15),X'40'             MOVE IN A BLANK
         CR    R2,R0                    CAN IT BE MOVED?
         BNL   *+10                     NO, BRANCH
         MVC   0(1,R15),0(R2)           YES, MOVE IT DOWN
         LA    R15,1(,R15)              NEXT TARGET BYTE
         CLI   0(R2),X'40'              FOUND FIRST BLANK?
         BE    LIST390                  YES, BRANCH
         CR    R2,R0                    NEXT SOURCE BYTE VALID?
         BNL   LIST390                  NO, LOOP
         LA    R2,1(,R2)                YES, INCREMENT
         B     LIST390
         SPACE 1
LIST394  LH    R15,REPLTH               ACTUAL LENGTH OF STRING
         S     R15,=F'1'                MACHINE LENGTH OF STRING VALID?
         BM    LIST395                  NO, BRANCH
         MVC   0(*-*,R1),REPLSTR        <<EXECUTED>> -- MOVE IN STRING
         EX    R15,*-6                  MOVE IN THE REPLACEMENT
LIST395  DS    0H                                             ABL NOV86
         CLI   #REPINCR+1,0             INCREMENT>1?          ABL NOV86
         BE    *+6                      NO, BRANCH            ABL NOV86
         SR    R15,R15                  YES, USE OTHER        ABL NOV86
         AR    R1,R15                   POSITION AFTER REPLACED STRING
         MVI   ##HELOFF+1,C'R'          REPLACED DATA
         OI    #REPFLAG,LISTUPDR        REPLACED DATA IN THIS BLOCK
         L     R2,#LUSAVE4+8            END OF DATA
         LA    R0,1(,R1)                TRY NEXT CHARACTER
         SR    R2,R0                    MACHINE LENGTH LEFT
         STH   R2,#LUSAVE4+12           MACHINE LENGTH LEFT
         SPACE 2
LIST397  AH    R1,#REPINCR              INCREMENT WIDTH -1    ABL NOV86
         LA    R1,1(,R1)                INCREMENT WIDTH       ABL NOV86
         L     R2,#LUSAVE4+8            END OF DATA
         SR    R2,R1                    MACHINE LENGTH LEFT NEGATIVE?
         BNM   LIST370                  NO, KEEP SEARCHING
         SPACE 2
LIST398  CLI   ##HELOFF+1,C'N'          UNSUCCESSFUL FIND OR REPLACE?
         BE    LIST160                  YES, BRANCH
         SPACE 1
LIST399  L     R14,#LUSAVE4+0           WHERE OUTPUT GOES
         L     R15,#LUSAVE4+4           DATA START
         LH    R1,#LUSAVE4+14           ORIGINAL MACHINE LENGTH
         MVC   0(*-*,R14),0(R15)        <<EXECUTED>>
         EX    R1,*-6                   MOVE DATA INTO LINE
         B     LIST730                  OUTPUT THIS LINE
         SPACE 3
LIST400  LA    R4,64                    BLOCK FORMAT, WIDTH=64
         B     LIST430                  FORMAT HEADER
         SPACE 1
LIST420  LA    R4,16                    DUMP FORMAT, WIDTH=16
         SPACE 1
LIST430  LA    R3,LIST600               PROCESSING ROUTINE
         LH    R0,#SKIPCOL              CHARACTERS TO SKIP
         ST    R0,#LISTN2               UPDATE BLOCK OFFSET
         A     R0,#LISTN1               CURRENT DATA
         ST    R0,#LISTN1                           DISPLACEMENT
         MVI   MTHIGHL,5
         MVI   MTHIGHL+4,L'MSGDUMP-1
         MVC   MSGTEXT1(3),L140$2
         MVC   INSERT#1(5),LISTLBLO
         MVC   INSERT#2-1(40),MSGDUMP   HEADER FOR BLOCK OR DUMP
         NI    FLAGSDD,FF-OVERLAP       TURN OFF THE OVERLAP INDICATOR
         LR    R5,R1                    DATA LENGTH
         C     R5,#MAXLEN               RESTRICT DATA LENGTH?
         BL    *+8                      NO, BRANCH
         L     R5,#MAXLEN               YES, USE MAX LENGTH
         AR    R5,R6                    COMPUTE NEW END-OF-BLOCK
         BCTR  R5,0                     COMPUTE NEW END-OF-BLOCK -1
         AH    R6,#SKIPCOL              ADJUST FOR START COLUMN
         TM    FLAGSDD,LBLOCK+LDUMP     LBLOCK OR LDUMP?
         BM    LIST450                  YES, BRANCH
         L     R0,#BLKCNT
         A     R0,=F'1'
         ST    R0,#BLKCNT
         CVD   R0,DOUBLE
         ED    INSERT#2-1(10),DOUBLE+4
         L     R0,#SKIPREC
         S     R0,=F'1'                 SKIP THIS RECORD?
         ST    R0,#SKIPREC
         BNM   LIST170                  YES, BRANCH
         L     R0,#MAXIN
         S     R0,=F'1'                 SUFFICIENT INPUT RECORDS?
         ST    R0,#MAXIN
         BM    LIST910                  YES, BRANCH
         CVD   R1,DOUBLE                  RECORD LENGTH
         ED    INSERT#2+MSGDUMPL-MSGDUMP-1(7),DOUBLE+5
         STM   R14,R12,12(R13)            CONVERT CCHHR TO TTR
         LA    R2,CURMBB                  CCHHR TO CONVERT
         L     R1,INDCB+(DCBDEBAD-IHADCB) DEB ADDRESS
         L     R15,ADDRRLTV               ADDRESS OF CCHHR->TTR CONVERT
         LR    R3,R13                     ADDRESS OF SAVE AREA
         BALR  R14,R15                    CALL CONVERT ROUTINE
         LR    R13,R3                     RESTORE SAVE AREA ADDRESS
         ST    R0,12+4+4(R13)             RESULT TTR RETURNED IN R0
         LM    R14,R12,12(R13)            RESTORE REGISTERS
         ST    R0,DOUBLE                SAVE RESULTING TTR
         UNPK  INSERT#2+MSGDUMPT-MSGDUMP-1(7),DOUBLE(4)
         TR    INSERT#2+MSGDUMPT-MSGDUMP-1(6),TRTABLE
         MVI   INSERT#2+MSGDUMPT-MSGDUMP+6-1,X'40'
         TM    FLAGSDD,DUMP
         BNOR  R3
         MVC   INSERT#1(5),LISTLDUM
         BR    R3
         SPACE 2
LIST450  TM    #LISTFLG,X'01'           CSECT FORMATTING?
         BNOR  R3                       NO, BRANCH
         OI    #LISTFLG,X'08'           NEED A HEADER CHANGE
         STH   R4,#LISTWD               WIDTH OF EACH LINE
         L     R6,EXCPBUFF              BUFFER START
         L     R5,LS                    BUFFER LENGTH
         AR    R5,R6                    END OF BUFFER
         BCTR  R5,0                     END OF BUFFER -1
         TM    #LISTFLG,X'40'           ANY CSECT ADDRESS YET?
         BO    LIST460                  YES, BRANCH
         TM    0(R6),X'F0'              TEST, SCATTER, CESD OR IDR?
         BM    LIST170                  YES, BRANCH
LIST460  TM    #LISTFLG,X'C0'           ANY CURRENT ESD RECORD?
         BO    LIST470                  YES, THIS IS A DATA RECORD
         CLI   8(R6),X'06'              AN ESD RECORD?
         BNE   LIST170                  NO, BRANCH
         OI    #LISTFLG,X'C0'           FLAGS FOR ESD RECORD INPUT
         MVI   #LISTVIR,00              CLEAR THE HIGH-ORDER DIGIT
         MVC   #LISTVIR+1(3),9(R6)      SAVE THE OFFSET ADDRESS
         LH    R15,6(R6)                OFFSET TO ESDID
         LA    R5,16(R15,R6)            FIRST ESDID FOR THIS BLOCK
         LH    R6,4(R6)                 ESDID ENTRIES *4
         SRL   R6,2                     ESDID ENTRIES
         LA    R2,#ESDPTR               START OF ESD ADDRESSES
         SPACE 2
*  LOOP TO MARK ENTRIES FOR THE NEXT PHYSICAL BLOCK
LIST464  ICM   R2,B'1111',ESDLINK       NEXT ENTRY?
         BZ    LIST170                  NO, DONE
         MVI   ESDIDIN,0                TURN OFF FIRST
         LR    R14,R5                   START OF ESDID LIST
         LR    R15,R6                   NUMBER OF ESDID ENTRIES
         SPACE 1
LIST468  CLC   0(2,R14),ESDID           THIS ENTRY?
         BNE   *+8                      NO, BRANCH
         MVI   ESDIDIN,1                YES, MARK IT
         LA    R14,4(,R14)              NEXT ESDID ENTRY
         BCT   R15,LIST468              MARK ALL ENTRIES THAT MATCH
         B     LIST464                  CHECK ALL ESD ENTRIES
         SPACE 3
LIST470  XI    #LISTFLG,X'A0'           OFF CURRENT ESD; ON CSECT DATA
         L     R0,#LISTVIR              BLOCK OFFSET
         L     R14,#LISTOFF             LIST OFFSET QUANTITY
         ST    R14,#LISTN2              BLOCK OFFSET
         A     R14,#LISTN1              DATA
         ST    R14,#LISTN1                  DISPLACEMENT
         ICM   R14,B'1111',#LISTOFF     LIST OFFSET?
         BP    *+6                      YES, BRANCH
         LR    R14,R0                   NO, USE NORMAL BLOCK OFFSET
         SR    R6,R0
         ST    R6,#LISTVIR              VIRTUAL BUFFER START ADDRESS
         LA    R2,#ESDPTR               START OF ESD ADDRESSES
         AR    R6,R14                   OFFSET --> ACTUAL ADDRESS
         SPACE 2
*  LOOP TO FIND A START ENTRY
LIST480  ICM   R2,B'1111',ESDLINK       NEXT ENTRY?
         BZ    LIST170                  NO, DONE
         SR    R14,R14
         ICM   R14,B'0111',ESDADDR      START ADDRESS OF SYMBOL
         LR    R15,R14                  CSECT START OFFSET
         A     R14,#LISTVIR             OFFSET --> ADDR OF CSECT START
         A     R15,ESDLEN-1             CSECT END OFFSET
         A     R15,#LISTVIR             OFFSET --> ADDRESS OF CSECT END
         CR    R6,R15                   CURRENT:CSECT END
         BNL   LIST480                    HIGH OR EQUAL, LOOP FOR NEXT
         CR    R5,R14                   END:CSECT START
         BL    LIST480                    LOW, LOOP FOR NEXT
         CLI   ESDIDIN,1                THIS CSECT ACTIVE?
         BNE   LIST480                  NO, LOOP FOR NEXT
         MVC   #LISTID(2),ESDID         YES, MARK THE CURRENT ESDID
         ST    R2,#LISTENT              SAVE THIS ENTRY START
         LR    R1,R2
         SPACE 1
LIST490  ICM   R1,B'1111',ESDLINK-ESDENTRY(R1)  NEXT ENTRY?
         BZR   R3                               NO, DONE
         CLC   #LISTID(2),ESDID-ESDENTRY(R1)    SAME ESDID ON NEXT ONE?
         BNER  R3                               NO, DONE
         ICM   R15,B'0111',ESDADDR-ESDENTRY(R1) NEXT ENTRY START
         A     R15,#LISTVIR                     OFFSET --> NEXT START
         CR    R14,R15                          CSECT START:NEXT ENTRY
         BE    LIST490                            SAME, IGNORE ENTRY
         CR    R15,R6                           NEXT START:CURRENT
         BNH   LIST480                            NOT ABOVE, USE NEXT
         BR    R3
         SPACE 3
LIST600  BAL   R14,LIST800              PERFORM ANY CSECT POSITIONING
         LR    R2,R4                    DATA LENGTH
         LR    R14,R5
         SR    R14,R6                   MACHINE LENGTH VALID?
         BM    LIST160                  NO, BRANCH
         CR    R2,R14
         BNH   *+8
         LA    R2,1(,R14)               DATA LENGTH FOR THIS SEGMENT
         BCTR  R2,0                     MACHINE LENGTH FOR THE SEGMENT
         ST    R2,#LUSAVE4+8            SAVE FOR REPLACE
         CLI   ##HELOFF,C'R'            REPLACE OPERATION?
         BE    LIST644                  YES, BRANCH
         CLI   ##HELOFF,C'F'            FIND OPERATION?
         BNE   LIST690                  NO, LIST -- BRANCH
LIST644  XC    #LUSAVE4(8),#LUSAVE4
         LR    R1,R6                    START OF DATA
         LA    R14,0(R6,R2)             END OF DATA -1
         LH    R15,FINDLTH              STRING LENGTH
         ST    R14,#LUSAVE4             END OF DISPLAYED PART
         AR    R14,R15                  MAXIMUM ACCESS
         BCTR  R15,0                    MACHINE LENGTH OF STRING
         CR    R14,R5                   BEYOND RECORD END?
         BL    LIST660                  NO, BRANCH
         LR    R14,R5                   YES, USE END OF RECORD -1
         SPACE 1
LIST660  ICM   R0,B'1111',#MAXFIND      ANY MORE TO FIND?
         BNP   LIST670                  NO, BRANCH
         CLI   #REPINCR+1,0             INCREMENT BY 1?       ABL NOV86
         BH    LIST662                  NO, BRANCH            ABL NOV86
         EX    R2,LISTTRT               FIRST CHARACTER FOUND?
         BZ    LIST670                  NO, NOT IN STRING
LIST662  DS    0H                                             ABL NOV86
         LR    R2,R14
         SR    R2,R1                    MACHINE LENGTH LEFT
         CR    R15,R2                   POSSIBLY IN STRING?
         BH    LIST670                  NOT IN STRING
         CLC   0(*-*,R1),FINDSTR        <<EXECUTED>> -- COMPLETE STRING
         EX    R15,*-6                  ENTIRE STRING FOUND?
         BNE   LIST666                  NO, BRANCH
         ST    R1,#LUSAVE4+4            YES, SAVE THE LAST ADDRESS
         L     R0,#MAXFIND              FOUND
         S     R0,=F'1'                      ONE
         ST    R0,#MAXFIND                      MORE
         CLI   ##HELOFF,C'R'            REPLACE SUBCOMMAND?
         BNE   LIST664                  NO, BRANCH
         MVC   0(*-*,R1),REPLSTR        <<EXECUTED>> -- REPLACE STRING
         EX    R15,*-6                  MOVE IN THE REPLACEMENT
         OI    #REPFLAG,LISTUPDR        REPLACED DATA IN THIS BLOCK
         SPACE 1
LIST664  DS    0H                                             ABL NOV86
         CLI   #REPINCR+1,0             INCREMENT>1?          ABL NOV86
         BE    *+6                      NO, BRANCH            ABL NOV86
         SR    R15,R15                  YES, USE OTHER        ABL NOV86
         AR    R1,R15                   SKIP OVER THE REPLACED DATA
         OC    #LISTIDU(2),#LISTIDU     ANY ESDID YET?
         BNZ   LIST666                  YES, BRANCH
         MVC   #LISTIDU(2),#LISTID      NO, SAVE THIS ONE
LIST666  AH    R1,#REPINCR              INCREMENT WIDTH -1    ABL NOV86
         LA    R1,1(,R1)                INCREMENT WIDTH       ABL NOV86
         L     R2,#LUSAVE4              LAST ACCESS BYTE
         SR    R2,R1                    MACHINE LENGTH LEFT NEGATIVE?
         BNM   LIST660                  NO, CONTINUE SEARCHING
         SPACE 2
LIST670  ICM   R1,B'1111',#LUSAVE4+4    ANY STRING FOUND?
         BZ    LIST680                  NO, BRANCH
         SR    R1,R6                    DISPLACEMENT INTO DISPLAY
         AH    R1,FINDLTH               LENGTH AT END OF COMPARE
         CR    R1,R4                    BEYOND DISPLAYED LENGTH?
         BNH   LIST684                  NO, BRANCH
         OI    FLAGSDD,OVERLAP          YES, MARK AS AN OVERLAP
         B     LIST690
         SPACE 1
LIST680  TM    FLAGSDD,OVERLAP          NO STRING FOUND -- OVERLAP SET?
         BO    LIST684                  YES, BRANCH
         L     R2,#LUSAVE4+8            MACHINE LENGTH OF THIS SEGMENT
         L     R1,#LISTN2               CSECT
         LA    R1,1(R1,R2)                   BYTE
         ST    R1,#LISTN2                        DISPLACEMENT
         B     LIST160
         SPACE 1
LIST684  NI    FLAGSDD,FF-OVERLAP       CLEAR THE OVERLAP FLAG
         B     LIST690
         SPACE 1
LISTTRT  TRT   0(*-*,R1),WORKTBL        <<EXECUTED>> -- FIND FIRST BYTE
         SPACE 2
LIST690  L     R2,#LUSAVE4+8            MACHINE LENGTH
         LA    R0,20(,R2)               LINE OUTPUT LENGTH
         LA    R1,MSGLINE+17            OUTPUT DATA START ADDRESS
         CLI   ##HELOFF,C'D'            DIRENTRY?
         BE    LIST691                  YES, BRANCH
         LA    R15,MSGLINE              OUTPUT START FOR OFFSETS
         TM    FLAGSDD,LBLOCK+BLOCK     ANY BLOCK FORMAT?
         BM    LIST692                  YES, BRANCH
LIST691  LA    R0,62(,R2)               LINE OUTPUT LENGTH
         LA    R1,MSGLINE+57            OUTPUT CHARACTER DUMP ADDRESS
         LA    R15,MSGLINE+2            OUTPUT START FOR OFFSETS
         MVC   MSGLINE(80),MSGBL132     CLEAR THE OUTPUT LINE
         SPACE 2
LIST692  SLL   R0,16
         ST    R0,MSGLINE               OUTPUT LENGTH
         MVI   0(R1),C'*'               FIRST *
         MVC   1(*-*,R1),0(R6)          <<EXECUTED>>
         EX    R2,*-6                   MOVE IN THE DATA
         LA    R1,2(R1,R2)              POSITION OF FINAL ASTERISK
         MVI   0(R1),C'*'               FINAL *
         SPACE 1
         UNPK  4(7,R15),#LISTN1+1(4)    UNPACK ADDRESS
         TR    4(6,R15),TRTABLE         CONVERT TO HEXADECIMAL
         MVI   10(R15),X'40'            BLANK THE FOLLOWING BYTE
         CLI   ##HELOFF,C'D'            DIRENTRY?
         BNE   *+10                     NO, BRANCH
         MVC   4(6,R15),BLANKS          YES, BLANK THIS FIELD
         UNPK  DOUBLE(7),#LISTN2+1(4)   UNPACK ADDRESS
         TR    DOUBLE(7),TRTABLE        CONVERT TO HEXADECIMAL
         MVC   11(4,R15),DOUBLE+2       MOVE IN ADDRESS
         MVI   15(R15),X'40'            BLANK THE FOLLOWING BYTE
         CLI   DOUBLE+1,C'0'            LESS THAN 64K?
         BE    *+10                     YES, BRANCH
         MVC   11(5,R15),DOUBLE+1       MOVE IN ADDRESS
         MVI   16(R15),X'40'            BLANK ANOTHER BYTE
         CLI   ##HELOFF,C'D'            DIRENTRY?
         BE    LIST694                  YES, BRANCH
         TM    FLAGSDD,LBLOCK+BLOCK     ANY BLOCK FORMAT?
         BM    LIST700                  YES, BRANCH
LIST694  LA    R15,MSGLINE+11           WHERE TO PUT OUTPUT
         LR    R1,R6                    CURRENT DATA POINTER
         LA    R14,1(,R2)               NUMBER OF BYTES TO FORMAT
         SR    R0,R0                    CURRENT FORMATTED CHARACTER
         SPACE 2
LIST696  MVC   DOUBLE(1),0(R1)          AVOID 0C5 FOR LAST BUFFER BYTE
         UNPK  8(3,R15),DOUBLE(2)       UNPACK DATA
         TR    8(2,R15),TRTABLE         CONVERT TO HEXADECIMAL
         MVI   10(R15),X'40'            CLEAR FOLLOWING BYTE
         LA    R15,2(,R15)              INCR INTO PRINT AREA
         A     R1,=F'1'                 INCREMENT INTO DATA
         A     R0,=F'1'                 NEXT FORMATTED CHARACTER
         ST    R0,DOUBLE
         TM    DOUBLE+3,X'03'           4, 8, 12, 16, ...?
         BNZ   LIST698                  NO, BRANCH
         LA    R15,1(,R15)              YES, INCREMENT ONE
         TM    DOUBLE+3,X'07'           8, 16, 24, 32, ...?
         BNZ   LIST698                  NO, BRANCH
         LA    R15,1(,R15)              YES, INCREMENT ONE
LIST698  BCT   R14,LIST696              GO FORMAT
         SPACE 3
LIST700  L     R2,#LUSAVE4+8            MACHINE LENGTH OF THIS SEGMENT
         L     R1,#LISTN2               CSECT
         LA    R1,1(R1,R2)                   BYTE
         ST    R1,#LISTN2                        DISPLACEMENT
         CLI   INSERT#1,X'FF'           ANY HEADER?
         BE    LIST760                  NO, BRANCH
         CLI   ##HELOFF,C'D'            DIRENTRY SUBCOMMAND?
         BE    LIST720                  YES, BRANCH
         ICM   R0,B'1111',#MAXOUT       ANY MORE OUTPUT?
         BNP   LIST910                  NO, ALL DONE
         CLI   ##HELOFF+3,C'Y'          ANY OUTPUT YET?
         BNE   LIST710                  NO, BRANCH
         LA    R15,MSGBLANK
         BAL   R14,LIST770              OUTPUT A BLANK LINE
LIST710  TM    #LISTFLG,X'01'           CSECT OUTPUT?
         BO    LIST720                  YES, BRANCH
         TM    FLAGSDD,LBLOCK+LDUMP     LBLOCK OR LDUMP?
         BM    LIST730                  YES, BRANCH
LIST720  LA    R15,MSGTEXT1             OUTPUT THE HEADER LINE
         BAL   R14,LIST770
LIST730  MVI   INSERT#1,X'FF'           TURN OFF THE HEADER
         OI    FLAGSGG,FOUTSOME         SOME OUTPUT WAS GENERATED
         L     R0,#MAXOUT               DECREMENT
         S     R0,=F'1'                          THE #MAXOUT
         ST    R0,#MAXOUT                                   COUNTER
         BM    LIST910                  NEGATIVE, ALL DONE
LIST760  TR    MSGLINE+4(256),TRLINE    UNPRINTABLES --> PERIODS
         LA    R15,MSGLINE              OUTPUT THE NEXT LINE
         BAL   R14,LIST770              OUTPUT THE NEXT LINE
         TM    ##ADRPA#,$F              FINDLIST MODIFICATION?
         BNO   *+8                      NO, BRANCH
         MVI   ##HELOFF,C'L'            YES, NOW LIST THE REST
         B     LIST160                  YES, CONTINUE
         SPACE 1
LIST770  STM   R14,R15,#LFSAVE2         SAVE REGISTERS 14 AND 15
         CLI   ##HELOFF+3,C'D'          FIND AND NO OUTPUT YET?
         BNE   LIST780                  NO, BRANCH
         SPACE 1
         LA    R1,=C'THEN'
         ICM   R2,B'1111',#ACTIONT      ANY THEN ACTION?
         BP    LIST980                  YES, BRANCH
         SPACE 1
         ICM   R0,B'1111',#ACTIONE      ANY ELSE ACTION?
         BP    NEWCMD                   YES, IGNORE THIS MEMBER
         SPACE 1
         BAL   R2,LIST996               OUTPUT ANY MEMBER HEADER
         SPACE 1
LIST780  L     R1,#LFSAVE2+4            POINT TO MESSAGE
         MVI   ##HELOFF+3,C'Y'          OUTPUT WAS GENERATED
         M$MSG (R1)                     OUTPUT THE MESSAGE
         L     R14,#LFSAVE2             RESTORE REGISTER 14
         BR    R14
         SPACE 3
LIST800  TM    #LISTFLG,X'60'           CSECT DATA?
         BNOR  R14                      NO, RETURN
         TM    #LISTFLG,X'08'           NEED ADJUSTMENT?
         BNO   LIST830                  NO, BRANCH
         XI    #LISTFLG,X'08'           RESET THE ADJUSTMENT FLAG
LIST804  LH    R4,#LISTWD               DISPLAY CHARACTER WIDTH
         ICM   R2,B'1111',#LISTENT      END OF CSECT ENTRIES?
         BZ    LIST170                  YES, BRANCH
         CLI   ESDIDIN,1                THIS CSECT ACTIVE?
         BNE   LIST170                  NO, GET THE NEXT INPUT BLOCK
         SPACE 1
*  ADJUST TO BEGINNING BOUNDARY
         SR    R0,R0
         ICM   R0,B'0111',ESDADDR       CURRENT OFFSET
         A     R0,#LISTVIR              OFFSET --> ACTUAL ADDRESS
         A     R0,#LISTMFF              ADD THE MODULE OFFSET
         CR    R0,R6                    VALID ADJUSTMENT?
         BNH   *+6                      NO, BRANCH
         LR    R6,R0                    YES, POSITION TO SYMBOL START
         LR    R1,R6
         BCTR  R1,0
         CR    R1,R5                    IN THIS DATA RECORD?
         BNL   LIST170                  NO, IGNORE THIS RECORD
         XC    #LISTOFF(4),#LISTOFF     LIST OFFSET IS SATISFIED
         MVC   #LISTID(2),ESDID         SAVE THE CURRENT ESD ID
         MVI   MTHIGHL,39
         MVC   MSGTEXT1(3),L141$1
         MVC   INSERT#1(39),MSGLDUMP    "AT 123456  CSECT 12345678 .."
         UNPK  INSERT#1(7),ESDADDR(4)
         TR    INSERT#1(6),TRTABLE      OFFSET OF CSECT OR ENTRY
         MVI   INSERT#1+6,X'40'
         MVC   INSERT#1+14(8),ESDNAME   PRIVATE, COMMON OR CSECT NAME
         UNPK  INSERT#1+31(7),ESDLEN(4)
         TR    INSERT#1+31(6),TRTABLE   LENGTH OF CSECT
         MVI   INSERT#1+31+6,X'40'
         LR    R0,R6
         S     R0,#LISTVIR              ACTUAL ADDRESS --> OFFSET
         ST    R0,#LISTN1               OFFSET IN LOAD MODULE
         SR    R1,R1
         ICM   R1,B'0111',ESDADDR       ENTRY ADDRESS
         SR    R0,R1
         ST    R0,#LISTN2               OFFSET IN CSECT
         CLI   ESDTYPE,CODESD           CSECT ENTRY?
         BE    LIST810                  YES, BRANCH
         TM    ESDTYPE,CODEPC           PRIVATE CODE OR OVERLAY?
         BO    LIST810                  YES, BRANCH
         L     R15,ESDCSECT             ADDRESS OF MAIN ENTRY
         MVC   INSERT#1+14(8),4(R15)    CSECT NAME
         MVC   INSERT#1+24(6),LISTLENT   ENTRY WITHIN A CSECT
         MVC   INSERT#1+31(8),ESDNAME
         AR    R0,R1
         ICM   R1,B'0111',ESDMAIN+1     CSECT START ADDRESS
         SR    R0,R1
         ST    R0,#LISTN2               OFFSET IN CSECT
         SPACE 2
LIST810  ICM   R0,B'0111',ESDADDR       ENTRY ADDRESS
         LR    R15,R0                   SAVE THE ENTRY ADDRESS
         A     R0,ESDLEN-1              LAST ADDRESS TO BE ACCESSED
LIST814  LTR   R2,R2                    AT END OF LIST?
         BZ    LIST820                  YES, BRANCH
         ICM   R2,B'1111',ESDLINK       ANOTHER ESD ENTRY?
         ST    R2,#LISTENT
         BZ    LIST820                  NO, BRANCH
         CLC   #LISTID(2),ESDID         ENTRY FOR THIS CSECT?
         BNE   LIST820                  NO, USE THE CURRENT ENTRY
         CLM   R15,B'0111',ESDADDR      START:NEXT START
         BNL   LIST814                    HIGH OR EQUAL, DISCARD IT
         CLM   R0,B'0111',ESDADDR       END:NEXT START
         BNH   LIST820                    LOW OR EQUAL, USE THIS LIMIT
         ICM   R0,B'0111',ESDADDR         HIGH, USE THE LOWER LIMIT
         SPACE 1
LIST820  LR    R1,R0                    CSECT OR ENTRY END
         SR    R1,R15                   CSECT OR ENTRY LENGTH
         C     R1,#MAXLEN               ABOVE MAXIMUM CSECT LENGTH?
         BL    *+8                      NO, BRANCH
         L     R1,#MAXLEN               YES, USE THE REQUESTED MAXIMUM
         AR    R1,R15                   END OF CSECT OR ENTRY
         A     R1,#LISTVIR              OFFSET --> ACTUAL ADDRESS
         ST    R1,#LISTE1               SAVE END ADDRESS
         SPACE 2
*  CHECK FOR END OF CSECT OR EXTERNAL LABEL
LIST830  LR    R1,R4                    DATA LENGTH
         LR    R15,R5
         SR    R15,R6                   MACHINE LENGTH VALID?
         BM    LIST170                  NO, IGNORE THIS RECORD
         CR    R1,R15
         BNH   *+8
         LA    R1,1(,R15)               R1=MIN(16 OR 64,LENGTH LEFT)
         AR    R1,R6                    END OF THIS LINE
         C     R1,#LISTE1               END ON THIS LINE?
         BLR   R14                      NO, RETURN
         OI    #LISTFLG,X'08'           NEW HEADER IS NEEDED
         L     R4,#LISTE1               MAXIMUM ADDRESS OF CSECT
         SR    R4,R6                    DISPLAY LENGTH VALID?
         BPR   R14                      YES, BRANCH
         LTR   R2,R2                    AT END OF LIST?
         BZ    LIST170                  YES, IGNORE THIS MEMBER
         B     LIST804                  NO, TRY THE NEXT CSECT
         SPACE 3
LIST900  MVI   ##HELOFF+2,X'EF'         END OF FILE ENCOUNTERED
*
LIST910  CLI   ##HELOFF+3,C'D'          FIND AND NO OUTPUT?
         BNE   LIST920                  NO, BRANCH
         LA    R1,=C'ELSE'
         ICM   R2,B'1111',#ACTIONE      ANY ELSE ACTION?
         BP    LIST980                  YES, BRANCH
         TM    FLAGSAA,FMEM#MEM         MEMBER GROUP IN PROGRESS?
         BO    NEWCMD                   YES, DONE
         TM    DSORG,DS1DSGPO           PARTITIONED?
         BNO   LIST940                  NO, BRANCH
         TM    PMEMMIN,X'80'            MEMBER LIST AND NO OUTPUT?
         BO    NEWCMD                   YES, BRANCH
         BAL   R2,LIST996               OUTPUT ANY MEMBER HEADER
         B     LIST940
         SPACE 1
LIST920  TM    FLAGSDD,LBLOCK+LDUMP+BLOCK+DUMP SEGMENT FORMAT?
         BZ    LIST940                         NO, BRANCH
         M$ERRST MSGBLANK               OUTPUT A BLANK LINE
         SPACE 1
LIST940  CLI   ##HELOFF+2,X'EF'            END OF FILE ENCOUNTERED?
         BE    LIST950                     YES, DONE
*
         OI    #REPFLAG,LISTTERM           TERMINATE AFTER THIS BLOCK
         TM    #REPFLAG,LIST#REP+LISTUPDR  WRITE AND DATA TO REPLACE?
         BO    LIST170                     YES, UPDATE THIS RECORD
         B     NEWCMD                      TERMINATE
*
LIST950  MVI   MTHIGHL,L'MSGBLK-1
         LA    R1,L142$1
         MVC   INSERT#1-1(34),MSGBLK
         L     R0,#BLKCNT
         CVD   R0,DOUBLE
         ED    INSERT#1-1(10),DOUBLE+4
         TM    #LISTFLG,X'01'           CSECT FORMATTING?
         BO    LIST960                  YES, BRANCH
         TM    FLAGSDD,DUMP+BLOCK
         BNZ   LIST960
         MVC   INSERT#1+MSGBLKL-MSGBLK-1(6),LISTLLIN
LIST960  TM    DSORG,DS1DSGPO
         BO    MSGNEW
         MVC   INSERT#1+MSGBLKS-MSGBLK-1(8),LISTLDAT
         B     MSGNEW
         SPACE 2
LIST980  MVC   DELAYMSG+25(4),0(R1)     ADD "THEN" OR "ELSE"
         TM    ##ADRPA#-##SUBCOM(R2),$D SUPPRESS DEFAULT MESSAGE?
         BO    LIST990                  YES, BRANCH
         SPACE 1
         M$ERRST MSGBLANK               OUTPUT A BLANK LINE
         TM    FLAGSHH,FDELAYM          ANY MESSAGE TO OUTPUT?
         BNO   LIST990                  NO, BRANCH
         XI    FLAGSHH,FDELAYM          NO MORE MESSAGE
         MVC   DELAYMSG+30(8),0(R2)     SUBCOMMAND TO EXECUTE
         M$ERRST DELAYMSG               IDENTIFICATION LINE
         SPACE 1
LIST990  MVC   ##ANSWER(LISUBS),ISUBS   INITIALIZE THE PDL SAVE AREA
         MVC   ##SUBCOM(PTW),0(R2)      CHANGE THE SUBCOMMAND
         MVI   MTHIGHL,8
         MVI   MTHIGHL+4,8
         OI    FLAGSGG,FOUTSOME         SOME OUTPUT WAS GENERATED
         B     CALLCMDZ                 CALL THE SECONDARY SUBCOMMAND
         SPACE 3
* OUTPUT A FIND OR REPLACE HEADER MESSAGE IF REQUIRED
LIST996  TM    DSORG,DS1DSGPO           PARTITIONED?
         BNOR  R2                       NO, NO MESSAGE
         TM    FLAGSHH,FDELAYM          ANY HEADER MESSAGE?
         BNOR  R2                       NO, NO MESSAGE
         M$ERRST MSGBLANK               OUTPUT A BLANK LINE
         M$ERRST DELAYMSG               OUTPUT THE HEADER LINE
         NI    FLAGSHH,FF-FDELAYM       TURN OFF THE HEADER LINE
         BR    R2
LISTUPDE EQU   X'80'                    #REPFLAG -- UPDATE ERROR
LISTUPDO EQU   X'40'                    #REPFLAG -- UPDATE OPEN
LISTUPDR EQU   X'20'                    #REPFLAG -- UPDATE THIS BLOCK
LISTUPQT EQU   X'10'                    #REPFLAG -- QUIET MODE UPDATE
LISTTERM EQU   X'08'                    #REPFLAG -- TERMINATE UPDATE
LIST#REP EQU   X'01'                    #REPFLAG -- WRITE FLAG
         DROP  R2
         SPACE 5
DIR000   BALR  R8,0                     OUTPUT ADDITIONAL DIR DATA
         USING *,R8
         M$ERRST MSGBLANK               OUTPUT ADDITIONAL DIR DATA
         CLC   ##SUBCOM+#LSUB(8),$DIR   IF OR THEN FORM?
         BNE   NEWCMD                   YES, NO ADDITIONAL OUTPUT
         CLI   #DIRSHOR,1               SHORT FORM?
         BE    NEWCMD                   YES, BRANCH
         MVI   MTHIGHL,70               LENGTH OF MESSAGE INSERT
         MVC   INSERT#1(100),BLANK128   CLEAR THE HEADER LINE
         MVC   INSERT#1(40),MSG262H     HEADER INFORMATION
         M$MSG L262$1
         MVC   INSERT#1(40),MSG262U     UNDERLINE INFORMATION
         SPACE 2
         SR    R2,R2                    OFFSET IN THE DIRECTORY
         LA    R3,DIRHDR                START OF HEADER NAMES
         BAL   R4,DIRFMT10              OUTPUT FIRST MESSAGE
         SPACE 1
         MVC   INSERT#1+13(8),DIRNAME   ADD THE MEMBER NAME
         BAL   R4,DIRFMT                (00)
         LA    R2,8(,R2)                POSITION PAST MEMBER NAME
         SPACE 1
         LA    R0,3                     3 INPUT BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (08)
         LA    R2,3(,R2)                POSITION PAST TTR
         SPACE 1
         LA    R0,1                     1 INPUT BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         IC    R14,DIRFLAG
         SLL   R14,25                   DROP ALIAS BIT
         SRDL  R14,30                   SAVE HALFWORD COUNT
         LA    R14,X'F0'(,R14)          CONVERT TO DISPLAY
         STC   R14,INSERT#1+30          SAVE TTR COUNT IN MESSAGE
         SPACE 1
         SRL   R15,32-5                 HALFWORD COUNT
         CVD   R15,DOUBLE
         MVC   FULLWORD(4),DIR4020      EDIT PATTERN
         ED    FULLWORD(4),DOUBLE+6
         MVC   INSERT#1+45(2),FULLWORD+2  ADD COUNT
         SPACE 1
         TM    DIRFLAG,X'80'            ALIAS?
         BO    DIR040                   YES, BRANCH
         MVC   INSERT#1+23+44(12),BLANK128
         MVC   INSERT#1+23(44),INSERT#1+30  DROP "ALIAS;"
         SPACE 1
DIR040   BAL   R4,DIRFMT                (0B)
         LA    R2,1(,R2)                POSITION PAST INDC
         SPACE 2
         TM    FLAGSCC,RECFMU           RECFM=U?
         BNO   DIR800                   YES, BRANCH
         LA    R0,4                     TTR +1 BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         MVC   INSERT#1+21(1),INSERT#1+20
         MVC   INSERT#1+20(1),INSERT#1+19
         MVI   INSERT#1+19,C','
         BAL   R4,DIRFMT                (0C)
         LA    R2,4(,R2)                POSITION PAST TTRT
         SPACE 1
         TM    DIRATTR,X'24'            OVERLAY OR SCATTER?
         BZ    *+8                      NO, BRANCH
         BAL   R4,DIRFMT20              YES, GET NEXT DOC.
         TM    DIRATTR,X'20'            OVERLAY?
         BO    DIR110                   YES, BRANCH
         LA    R0,4                     TTR +1 BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         MVC   INSERT#1+21(1),INSERT#1+20
         MVC   INSERT#1+20(1),INSERT#1+19
         MVI   INSERT#1+19,C','
         BAL   R4,DIRFMT                (10)
         LA    R2,4(,R2)                POSITION PAST TTRN
         B     DIR120
         SPACE 1
DIR110   BAL   R4,DIRFMT20              GET NEXT DOC.
         LA    R0,3                     TTR
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (10)
         LA    R2,3(,R2)                POSITION PAST TTRN
         SPACE 1
         SR    R0,R0
         IC    R0,DIRNOTE#              NUMBER OF NOTELIST ELEMENTS
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (13)
         LA    R2,1(,R2)                POSITION PAST NL
         SPACE 1
DIR120   LA    R3,DIRHDR14              REPOSITION THE HEADER INFO.
         BAL   R4,DIRFMT20
         LA    R0,1                     1 INPUT BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         LA    R14,X'80'*2              TEST MASK
         LA    R5,DIRBITP1-2            TEXT OFFSETS
         BAL   R4,DIRBITS
         BAL   R4,DIRFMT                (14)
         SPACE 1
         LA    R14,X'08'*2              TEST MASK
         LA    R5,DIRBITP2-2            TEXT OFFSETS
         BAL   R4,DIRBITS
         BAL   R4,DIRFMT10              (14)
         LA    R2,1(,R2)                SKIP ATR1
         SPACE 1
         LA    R0,1                     1 INPUT BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         LA    R14,X'80'*2              TEST MASK
         LA    R5,DIRBITP3-2            TEXT OFFSETS
         BAL   R4,DIRBITS
         BAL   R4,DIRFMT                (15)
         SPACE 1
         LA    R14,X'08'*2              TEST MASK
         LA    R5,DIRBITP4-2            TEXT OFFSETS
         BAL   R4,DIRBITS
         BAL   R4,DIRFMT10              (15)
         LA    R2,1(,R2)                SKIP ATR2
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0111',DIRSTORE      3 INPUT BYTES
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (16)
         LA    R2,3(,R2)                SKIP STOR
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0011',DIRTEXTL      2 INPUT BYTES
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (19)
         LA    R2,2(,R2)                SKIP FTBL
         SPACE 1
         LA    R0,3                     3 INPUT BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (1B)
         LA    R2,3(,R2)                SKIP EPA
         SPACE 1
         TM    DIRATTR2,X'80'           VS LINKAGE EDITOR?
         BO    DIR210                   YES, BRANCH
         MVC   INSERT#1+04(08),DIRHDROS NEW OPERAND NAME
         MVC   INSERT#1+23(44),DIRHDROS+8  NEW DESCRIPTION
         LA    R0,3                     3 INPUT BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (1E)
         LA    R2,3(,R2)                SKIP FTB0, FTB1, FTB2
         B     DIR300
         SPACE 1
DIR210   LA    R0,1                     1 INPUT BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (1E)
         LA    R2,1(,R2)                SKIP FTB0
         SPACE 1
         LA    R4,DIR220                NEXT RETURN POINT
         TM    DIRATTR2,X'20'           PAGE ALIGNED?
         BO    DIRFMT10                 YES, BRANCH
         BAL   R4,DIRFMT20              NO, GET NEXT DOC.
         SPACE 1
DIR220   LA    R4,DIR230                NEXT RETURN POINT
         TM    DIRATTR2,X'10'           SSI PRESENT?
         BO    DIRFMT10                 YES, BRANCH
         BAL   R4,DIRFMT20              NO, GET NEXT DOC.
         SPACE 1
DIR230   LA    R4,DIR240                NEXT RETURN POINT
         TM    DIRATTR2,X'08'           APF INFORMATION VALID?
         BO    DIRFMT10                 YES, BRANCH
         BAL   R4,DIRFMT20              NO, GET NEXT DOC.
         SPACE 1
DIR240   LA    R0,1                     1 INPUT BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         TM    DIRATTR3,DIRRMANY        RMODE=ANY?
         BO    *+10                     YES, BRANCH
         MVC   INSERT#1+29(4),DIR24     NO, RMODE 24
         SPACE 1
         TM    DIRATTR3,DIRAA31+DIRAA24 ALIAS AMODE=ANY?
         BO    DIR250                   YES, BRANCH
         MVC   INSERT#1+46(4),DIR24     NO, "24; "
         TM    DIRATTR3,DIRAA31         ALIAS AMODE=31?
         BNO   DIR250                   YES, BRANCH
         MVC   INSERT#1+46(2),DIR31     NO, "31"
         SPACE 1
DIR250   TM    DIRATTR3,DIRAM31+DIRAM24 MAIN AMODE=ANY?
         BO    DIR260                   YES, BRANCH
         MVC   INSERT#1+62(4),DIR24     NO, "24; "
         MVI   INSERT#1+62+2,C' '       BLANK OUT THE ;
         TM    DIRATTR3,DIRAM31         MAIN AMODE=31?
         BNO   DIR260                   YES, BRANCH
         MVC   INSERT#1+62(2),DIR31     NO, "31"
         SPACE 1
DIR260   BAL   R4,DIRFMT                (1F)
         LA    R2,1(,R2)                SKIP FTB1
         SPACE 2
         LA    R0,1                     1 INPUT BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (20)
         LA    R2,1(,R2)                SKIP FTB2
         SPACE 1
DIR300   LA    R3,DIRHDR21              REPOSITION HEADER
         BAL   R4,DIRFMT20
         TM    DIRATTR,X'04'            SCATTER LOAD?
         BNO   DIR400                   NO, BRANCH
         SR    R0,R0
         ICM   R0,B'0011',DIRSCLL       COUNT
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (21)
         LA    R2,2(,R2)                SKIP SLSZ
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0011',DIRSCTL       COUNT
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (23)
         LA    R2,2(,R2)                SKIP TTSZ
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0011',DIRSCET       COUNT
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (25)
         LA    R2,2(,R2)                SKIP ESDT
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0011',DIRSCEP       COUNT
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (27)
         LA    R2,2(,R2)                SKIP ESDC
         SPACE 1
DIR400   LA    R3,DIRHDR29              REPOSITION HEADER
         BAL   R4,DIRFMT20
         TM    DIRFLAG,DIRALIAS         ALIAS?
         BNO   DIR500                   NO, BRANCH
         LA    R0,3                     3 HEX BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (29)
         LA    R2,3(,R2)                SKIP EPM
         SPACE 1
         LA    R1,DIRNAME(R2)           START OF MAIN MEMBER NAME
         MVC   INSERT#1+13(8),0(R1)     MOVE INTO MESSAGE AREA
         BAL   R4,DIRFMT                (2C)
         LA    R2,8(,R2)                SKIP MNM
         SPACE 1
DIR500   LA    R3,DIRHDR34              REPOSITION HEADER
         BAL   R4,DIRFMT20
         TM    DIRATTR2,X'80'           VS LINKAGE EDITOR?
         BO    DIR550                   YES, BRANCH
         LA    R2,1(,R2)
         N     R2,=F'-2'                ROUND TO HALFWORD BOUNDARY
         CLC   ZERO,0(R2)               ZERO?
         BE    DIR990                   YES, NO SSI
         CLC   =F'-1',0(R2)             FFFFFFFF?
         BE    DIR990                   YES, NO SSI
         LA    R0,4                     4 HEX BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (34)
         LA    R2,4(,R2)                SKIP SSI
         B     DIR990
         SPACE 1
DIR550   TM    DIRATTR2,DIR2SSI         ANY SSI INFORMATION?
         BNO   DIR600                   NO, BRANCH
         LA    R2,1(,R2)
         N     R2,=F'-2'                ROUND TO HALFWORD BOUNDARY
         LA    R0,4                     4 HEX BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (34)
         LA    R2,4(,R2)                SKIP SSI
         SPACE 1
DIR600   LA    R3,DIRHDR38              REPOSITION HEADER
         BAL   R4,DIRFMT20
         TM    DIRATTR2,DIRAPFLG        VALID APF INFORMATION?
         BNO   DIR990                   NO, BRANCH
         LA    R0,1                     1 HEX BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (38)
         LA    R2,1(,R2)                SKIP APFCT
         SPACE 1                        O
         LA    R0,1                     1 HEX BYTE
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (39)
         LA    R2,1(,R2)                SKIP APFAC
         SPACE 2                                              ABL NOV86
         LA    R2,1(,R2)                                      ABL NOV86
         N     R2,=F'-2'                ROUND TO HALFWORD     ABL NOV86
         LA    R1,DIRNAME(R2)           POINT INTO DIRECTORY  ABL NOV86
***PDSMAN CHANGES: DIRENTER FOR LISTING PDSMAN ATTRIBUTES     ABL NOV86
         TM    3(R1),X'0F'              PDSMAN DATE?          ABL NOV86
         BNO   DIR990                   NO, BRANCH            ABL NOV86
         SPACE 1                                              ABL NOV86
         LA    R0,4                     4 HEX DIGITS          ABL NOV86
         BAL   R4,DIRHEX                CONVERT TO HEX        ABL NOV86
         BAL   R4,DIRFMT                                      ABL NOV86
         LA    R2,4(,R2)                SKIP MANMODD          ABL NOV86
         SPACE 1                                              ABL NOV86
         LA    R0,2                     2 HEX DIGITS          ABL NOV86
         BAL   R4,DIRHEX                CONVERT TO HEX        ABL NOV86
         BAL   R4,DIRFMT                                      ABL NOV86
         LA    R2,2(,R2)                SKIP MANMODT          ABL NOV86
         SPACE 1                                              ABL NOV86
         LA    R0,3                     3 HEX DIGITS          ABL NOV86
         BAL   R4,DIRHEX                CONVERT TO HEX        ABL NOV86
         BAL   R4,DIRFMT                                      ABL NOV86
         LA    R2,3(,R2)                SKIP MANEXPR          ABL NOV86
         SPACE 1                                              ABL NOV86
         SR    R0,R0                                          ABL NOV86
         IC    R0,DIRNAME(R2)           LEVEL NUMBER          ABL NOV86
         BAL   R4,DIRDEC                CONVERT TO DECIMAL    ABL NOV86
         BAL   R4,DIRFMT                                      ABL NOV86
         LA    R2,1(,R2)                SKIP MANMODN          ABL NOV86
         SPACE 1                                              ABL NOV86
         LA    R1,DIRNAME(R2)           POINT TO LAST USER    ABL NOV86
         MVC   INSERT#1+13(8),0(R1)     LAST USER             ABL NOV86
         BAL   R4,DIRFMT                                      ABL NOV86
         LA    R2,8(,R2)                SKIP MANUSER          ABL NOV86
         SPACE 1                                              ABL NOV86
         LA    R0,1                     1 HEX DIGIT           ABL NOV86
         BAL   R4,DIRHEX                CONVERT TO HEX        ABL NOV86
         BAL   R4,DIRFMT                                      ABL NOV86
         LA    R2,1(,R2)                SKIP MANPROD          ABL NOV86
         SPACE 1                                              ABL NOV86
         LA    R0,3                     3 HEX DIGITS          ABL NOV86
         BAL   R4,DIRHEX                CONVERT TO HEX        ABL NOV86
         BAL   R4,DIRFMT                                      ABL NOV86
         LA    R2,3(,R2)                SKIP MANREAD          ABL NOV86
         B     DIR990
         SPACE 3
DIR800   TM    DIRFLAG,X'0F'            SPF STATISTICS?
         BO    DIR900                   YES, BRANCH
         MVC   DOUBLE(1),DIRFLAG        COPY THE ATTRIBUTE BYTE
         NI    DOUBLE,X'FF'-X'80'       RESET THE ALIAS FLAG
         CLI   DOUBLE,X'02'             SSI INFORMATION?
         BL    DIR990                   NO, BRANCH
         LA    R3,DIRHDR34              REPOSITION HEADER
         BAL   R4,DIRFMT20
         LA    R0,4                     4 HEX BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (34)
         LA    R2,4(,R2)                SKIP SSI
         B     DIR990
         SPACE 1
DIR900   LA    R3,DIRHDRSP              REPOSITION HEADER
         BAL   R4,DIRFMT20
         SPACE 1
         SR    R0,R0
         IC    R0,DIRNAME(R2)
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (SPF-0C)
         LA    R2,1(,R2)                SKIP SPFV
         SPACE 1
         SR    R0,R0
         IC    R0,DIRNAME(R2)
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (SPF-0D)
         LA    R2,1(,R2)                SKIP SPFR
         SPACE 1
         LH    R0,DIRNAME(R2)
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (SPF-0E)
         LA    R2,2(,R2)                SKIP SPFZ
         SPACE 1                        O
         LA    R0,4                     4 HEX BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (SPF-10)
         LA    R2,4(,R2)                SKIP SPFCR
         SPACE 1
         LA    R0,4                     4 HEX BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (SPF-14)
         LA    R2,4(,R2)                SKIP SPFCD
         SPACE 1
         LA    R0,2                     2 HEX BYTES
         BAL   R4,DIRHEX                CONVERT TO HEX
         BAL   R4,DIRFMT                (SPF-18)
         LA    R2,2(,R2)                SKIP SPFCT
         SPACE 1
         LH    R0,DIRNAME(R2)
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (SPF-1A)
         LA    R2,2(,R2)                SKIP SPFSI
         SPACE 1
         LH    R0,DIRNAME(R2)
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (SPF-1C)
         LA    R2,2(,R2)                SKIP SPFIN
         SPACE 1
         LH    R0,DIRNAME(R2)
         BAL   R4,DIRDEC                CONVERT TO DECIMAL
         BAL   R4,DIRFMT                (SPF-1E)
         LA    R2,2(,R2)                SKIP SPFMD
         SPACE 1
         LA    R1,DIRNAME(R2)           START OF MAIN MEMBER NAME
         MVC   INSERT#1+13(8),0(R1)     MOVE INTO MESSAGE AREA
         BAL   R4,DIRFMT                (SPF-20)
         LA    R2,8(,R2)                SKIP SPFID
         SPACE 1
DIR990   M$ERRST MSGBLANK
         B     NEWCMD
DIRDEC   C     R0,DIRDEC99
         BH    DIRDEC10
         CVD   R0,DOUBLE
         MVC   INSERT#1+100+8(8),BLANK128
         MVC   INSERT#1+100(8),DIR2020
         ED    INSERT#1+100(7),DOUBLE+5
         LA    R1,INSERT#1+100-1
         LA    R1,1(,R1)
         CLI   0(R1),X'40'
         BE    *-8
         MVC   INSERT#1+13(8),0(R1)
         BR    R4
DIRDEC10 LR    R1,R0
         LA    R1,1023(,R1)
         SRL   R1,10                    THE NEXT HIGHER K VALUE
         CVD   R1,DOUBLE
         MVC   INSERT#1+100+8(8),BLANK128
         MVC   INSERT#1+100(7),DIR2020
         MVI   INSERT#1+100+7,C'K'
         ED    INSERT#1+100(7),DOUBLE+5
         LA    R1,INSERT#1+100-1
         LA    R1,1(,R1)
         CLI   0(R1),X'40'
         BE    *-8
         MVC   INSERT#1+13(8),0(R1)
         BR    R4
DIRDEC99 DC    F'99999'
         SPACE 3
DIRHEX   LA    R1,DIRNAME(R2)           POINT TO DATA
         LA    R15,INSERT#1+13          START OF OUTPUT DATA
         SPACE 1
DIRHEX10 UNPK  0(3,R15),0(2,R1)         UNPACK TO HEXADECIMAL
         TR    0(2,R15),TRTABLE         CONVERT TO PRINTABLE
         MVI   2(R15),X'40'             BLANK GARBAGE BYTE
         LA    R15,2(,R15)              NEXT OUTPUT DIGIT
         LA    R1,1(,R1)                NEXT INPUT DIGIT
         BCT   R0,DIRHEX10              FORMAT ALL INPUT DIGITS
         BR    R4
         SPACE 3
DIRFMT   STC   R2,DOUBLE                SAVE OFFSET IN STORAGE
         UNPK  INSERT#1(3),DOUBLE(2)    UNPACK TO HEXADECIMAL
         TR    INSERT#1(2),TRTABLE      CONVERT TO PRINTABLE OFFSET
         MVI   INSERT#1+2,X'40'         CLEAR GARBAGE BYTE
         SPACE 1
DIRFMT10 TR    INSERT#1(70),TRLINE      CONVERT TO PRINTABLE CHARACTERS
         M$MSG L262$1                   OUTPUT
         SPACE 1
DIRFMT20 MVC   INSERT#1(100),BLANK128   BLANK THE OUTPUT AREA
         MVC   INSERT#1+04(08),0(R3)    ADD THE PDS... NAME
         MVC   INSERT#1+23(44),8(R3)    ADD THE DESCRIPTION
         LR    R6,R3                    THIS TEXT
         LA    R3,52(,R3)               NEXT TEXT
         BR    R4
         SPACE 3
DIRBITS  ST    R14,DOUBLE+4             SAVE TEST MASK
         LA    R15,INSERT#1+23          OUTPUT START
         MVC   0(44,R15),BLANK128
         LA    R0,4                     BITS PER LINE
         LR    R1,R6                    INPUT TEXT
         SPACE 1
DIRBIT10 LA    R5,2(,R5)                NEXT OFFSET
         LH    R6,0(,R5)
         LPR   R6,R6
         ST    R6,FULLWORD              OFFSET OF TEXT
         AR    R6,R1
         ST    R6,DOUBLE                START OF TEXT
         LH    R6,2(,R5)
         LPR   R6,R6
         S     R6,FULLWORD
         ST    R6,FULLWORD              LENGTH OF TEXT
         L     R14,DOUBLE+4             SHIFT
         SRL   R14,1                         FOR NEXT
         ST    R14,DOUBLE+4                          BIT TEST
         LA    R6,DIRNAME(R2)           POINT TO TARGET DATA
         TM    0(R5),X'80'              NEGATIVE FORM?
         BO    DIRBIT20                 YES, BRANCH
         TM    0(R6),*-*                <<EXECUTED>>
         EX    R14,*-4                  ADD "NOT "?
         BO    DIRBIT40                 NO, BRANCH
         B     DIRBIT30                 YES, BRANCH
         SPACE 1
DIRBIT20 TM    0(R6),*-*                <<EXECUTED>>
         EX    R14,*-4                  ADD "NOT "?
         BNO   DIRBIT40                 NO, BRANCH
         SPACE 1
DIRBIT30 MVC   0(4,R15),DIRNOT          ADD "NOT "
         LA    R15,4(,R15)              UPDATE LENGTH
         SPACE 1
DIRBIT40 L     R14,FULLWORD             ACTUAL LENGTH
         BCTR  R14,0                    MACHINE LENGTH
         L     R6,DOUBLE                START OF STRING
         MVC   0(*-*,R15),0(R6)         <<EXECUTED>>
         EX    R14,*-6                  MOVE IN STRING
         LA    R15,1(R14,R15)           NEXT OUTPUT LOCATION
         BCT   R0,DIRBIT10              DO ALL 4 BITS
         BR    R4
         SPACE 3
DIRBITP1 DC    0H'0',AL2(+08,+19,+25,+34,+38)
DIRBITP2 DC    0H'0',AL2(+08,+19,+28,+34,+40)
DIRBITP3 DC    0H'0',AL2(-08,+12,+24,-30,+38)
DIRBITP4 DC    0H'0',AL2(-08,+14,+20,+28,+39)
         SPACE 1
DIRNOT   DC    C'NOT '
DIR24    DC    C'24; '
DIR31    DC    C'31'
DIR2020  DC    X'4020206B2021204B'      EDIT MASK
DIR4020  DC    X'40202120'              EDIT MASK
MSG262H  DC    CL40'LOC NAME     VALUE     DESCRIPTION'
MSG262U  DC    CL40'--- ----     -----     -----------'
*IRHDR    DC CL52'1234567890123456789012345678901234567890123456789012'
DIRHDR    DC CL52'PDS2NAMEMEMBER NAME                                 '
          DC CL52'PDS2TTRPTTR OF FIRST BLOCK OF DATA                  '
          DC CL52'PDS2INDCALIAS; N TTRS FOLLOW; NN HALFWORDS OF DATA  '
          DC CL52'PDS2TTRTTTR OF FIRST TEXT BLOCK                     '
          DC CL52'PDS2TTRN(NOT USED FOR THIS MEMBER)                  '
          DC CL52'PDS2TTRNTTR OF SCATTER TRANSLATION TABLE            '
          DC CL52'PDS2TTRNTTR OF OVERLAY NOTE LIST                    '
          DC CL52'PDS2NL  NUMBER OF ENTRIES IN NOTE LIST              '
*                           1    1    2    2    3    3    4    4
*                           0    5    0    5    0    5    0    5
DIRHDR14  DC CL52'PDS2ATR1REENTRANT; REUS; OVERLAY; TEST          '
          DC CL52'        ONLY LOAD; SCATTER; EXEC; 1 TEXT            '
          DC CL52'PDS2ATR2DC; TEXT ORG=0; EP=0; HAS RLDS              '
          DC CL52'        EDIT; TEST; LKED F; REFRESHABLE             '
          DC CL52'PDS2STORTOTAL CONTIGUOUS MAIN STORAGE REQUIRED      '
          DC CL52'PDS2FTBLLENGTH OF FIRST BLOCK OF TEXT               '
          DC CL52'PDS2EPA ENTRY POINT ADDRESS                         '
          DC CL52'PDS2FTB1PROCESSED BY OS/VS LINKAGE EDITOR           '
          DC CL52'        PAGE ALIGNMENT REQUIRED                     '
          DC CL52'        SSI INFORMATION IS PRESENT                  '
          DC CL52'        APF INFORMATION IS VALID                    '
          DC CL52'PDS2FTB2RMODE ANY; ALIAS AMODE ANY; MAIN AMODE ANY  '
          DC CL52'PDS2FTB3RLD/CONTROL RECORDS AFTER FIRST TEXT BLOCK  '
DIRHDROS  DC CL52'PDS2FTB0ORIGIN OF FIRST BLOCK OF TEXT (FOR O.S. USE)'
DIRHDR21  DC CL52'PDS2SLSZNUMBER OF BYTES IN SCATTER LIST             '
          DC CL52'PDS2TTSZNUMBER OF BYTES IN TRANSLATION TABLE        '
          DC CL52'PDS2ESDTESD CSECT IDENTIFIER OF FIRST TEXT BLOCK    '
          DC CL52'PDS2ESDCESD CSECT IDENTIFIER OF ENTRY POINT BLOCK   '
DIRHDR29  DC CL52'PDS2EPM ENTRY POINT OF MAIN MEMBER                  '
          DC CL52'PDS2MNM MEMBER NAME OF MAIN MEMBER                  '
DIRHDR34  DC CL52'PDSSSIWDSSI INFORMATION                             '
DIRHDR38  DC CL52'PDSAPFCTLENGTH OF PROGRAM AUTHORIZATION CODE        '
          DC CL52'PDSAPFACPROGRAM AUTHORIZATION CODE                  '
          DC CL52'MANMODD DATE LAST MODIFIED -- FORMAT: 00YYDDF       '
          DC CL52'MANMODT TIME -- FORMAT: HHMM                        '
          DC CL52'MANEXPIREXPIRATION BASE DATE -- FORMAT: YYDDDF      '
          DC CL52'MANMODN MEMBER MODIFICATION LEVEL                   '
          DC CL52'MANUSER UPDATING JOBNAME OR TSO USER                '
          DC CL52'MANPROD PRODUCTIONS STATUS INDICATOR -- X''80''     '
          DC CL52'MANREAD DATE LAST READ -- FORMAT: YYDDDF            '
DIRHDRSP  DC CL52'DIRSPFV MEMBER VERSION NUMBER                       '
          DC CL52'DIRSPFR MEMBER REVISION NUMBER                      '
          DC CL52'DIRSPFZ (CURRENTLY NOT USED)                        '
          DC CL52'DIRSPFCRCREATION DATE    -- FORMAT: 00YYDDDF        '
          DC CL52'DIRSPFCDLAST CHANGE DATE -- FORMAT: 00YYDDDF        '
          DC CL52'DIRSPFCTLAST CHANGE TIME -- FORMAT: HHMM            '
          DC CL52'DIRSPFSINUMBER OF LINES CURRENTLY                   '
          DC CL52'DIRSPFINNUMBER OF LINES INITIALLY                   '
          DC CL52'DIRSPFMDNUMBER OF MODIFIED LINES                    '
          DC CL52'DIRSPFIDUSERID OF LAST PERSON TO UPDATE             '
