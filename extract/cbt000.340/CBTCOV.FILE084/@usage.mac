         TITLE 'P D S  --  PDS USAGE                         09/28/88'
***********************************************************************
***      USAGE SUBCOMMAND                                           ***
***********************************************************************
*
         SPACE 1
USAGE    CSECT
         USING *,R8
*** REOPEN THE DATA SET TO ENSURE DS1LSTAR IS CORRECT
         OI    FLAGSJJ,FNOREAD         CALL EXCP FOR OPEN ONLY
         MVC   STARTTR(3),DS1LSTAR     SET BEYOND END OF DATA SET
         L     R15,=V(EXCP)
         BALR  R14,R15
         NI    FLAGSJJ,FF-FNOREAD      CALL IS COMPLETED
         SPACE 2
         L     R15,=A(DSNAMES)
         BALR  R2,R15                   FORMAT THE ALLOCATION STATUS
         SPACE 1
         MVI   INSERT#2+20,0           ASSUME NO DATA MOVER
         CLI   DS1DSNAM+70,X'FF'       ANY ASM2 IDENTIFIER?
         BNE   *+8                     NO, BRANCH
         MVI   INSERT#2+20,C'A'        YES, ASSUME ASM2
         CLI   DS1DSNAM+104,0          ANY FDR/ABR FLAGS?
         BZ    *+8                     NO, BRANCH
         MVI   INSERT#2+20,C'F'        YES, ASSUME FDR/ABR
         TM    DS1DSNAM+103,X'F0'      ANY DMS/OS IDENTIFIER?
         BNO   *+8                     NO, BRANCH
         MVI   INSERT#2+20,C'D'        YES, ASSUME DMS/OS
*
         MVC   INSERT#1(66),MSG180H
         MVI   MTHIGHL,56
         CLI   INSERT#2+20,0           ANY DATA MOVER?
         BE    *+8                     NO, BRANCH
         MVI   MTHIGHL,66              YES, USE 66 CHARACTERS
*
         CLI   INSERT#2+20,C'D'        DMS/OS
         BNE   *+10                    NO, BRANCH
         MVC   INSERT#1+47(19),MSG180D YES, USE DMS/OS
         CLI   INSERT#2+20,C'F'        FDR/ABR?
         BNE   *+10                    NO, BRANCH
         MVC   INSERT#1+47(19),MSG180F YES, USE FDR/ABR
*
         M$MSG L180$1
         MVC   INSERT#1(66),BLANK128
         SR    R15,R15
         MVC   INSERT#1+10(7),USAL000
         ICM   R15,B'0111',DS1CREDT    DATA SET CREATION DATE NULL?
         BZ    US070                   YES, BRANCH
         ST    R15,MSGTEXT1            SAVE FOR LATER
         SRL   R15,16                  YEAR ONLY
         MH    R15,=H'1000'            SHIFT FOR THE ADDITION
         AH    R15,MSGTEXT1+2          RESET DAYS
         CVD   R15,MSGTEXT1            STORE AS 00000000 00YYDDDF
         LA    R1,MSGTEXT1+5           POINT TO YYDDDF
         LA    R15,MSGTEXT1            WHERE RESULT GOES
         BAL   R14,CONVDATE            CONVERT TO MM/DD/YY
         MVC   INSERT#1+08(9),USAL4020
         ED    INSERT#1+08(9),MSGTEXT1
         SPACE 1
US070    SR    R15,R15
         MVC   INSERT#1+19(7),USAL000
         ICM   R15,B'0111',DS1EXPDT    DATA SET EXPIRATION DATE NULL?
         BZ    US080                   YES, BRANCH
         ST    R15,MSGTEXT1            SAVE FOR LATER
         SRL   R15,16                  YEAR ONLY
         MH    R15,=H'1000'            SHIFT FOR THE ADDITION
         AH    R15,MSGTEXT1+2          RESET DAYS
         CVD   R15,MSGTEXT1            STORE AS 00000000 00YYDDDF
         LA    R1,MSGTEXT1+5           POINT TO YYDDDF
         LA    R15,MSGTEXT1            WHERE RESULT GOES
         BAL   R14,CONVDATE            CONVERT TO MM/DD/YY
         MVC   INSERT#1+17(9),USAL4020
         ED    INSERT#1+17(9),MSGTEXT1
         SPACE 1
US080    SR    R15,R15
         MVC   INSERT#1+29(7),USAL000
         ICM   R15,B'0111',DS1REFD     LAST OPEN DATE NULL?
         BZ    US090                   YES, BRANCH
         ST    R15,MSGTEXT1            SAVE FOR LATER
         SRL   R15,16                  YEAR ONLY
         MH    R15,=H'1000'            SHIFT FOR THE ADDITION
         AH    R15,MSGTEXT1+2          RESET DAYS
         CVD   R15,MSGTEXT1            STORE AS 00000000 00YYDDDF
         LA    R1,MSGTEXT1+5           POINT TO YYDDDF
         LA    R15,MSGTEXT1            WHERE RESULT GOES
         BAL   R14,CONVDATE            CONVERT TO MM/DD/YY
         MVC   INSERT#1+27(9),USAL4020
         ED    INSERT#1+27(9),MSGTEXT1
         SPACE 1
US090    MVC   INSERT#1+38(3),USALYES  ASSUME UPDATED
         TM    DS1DSIND,DS1DSCHA       CORRECT?
         BO    *+10                    YES, BRANCH
         MVC   INSERT#1+38(3),USALNO   NO, RESET THE DATA
         SPACE 1
         MVC   INSERT#1+47(4),=C'NONE' ASSUME NO SECURITY
         TM    DS1DSIND,X'40'+X'10'+X'04'  CORRECT?
         BZ    US100                   YES, BRANCH
         MVC   INSERT#1+47(4),USALRACF ASSUME RACF DEFINED
         TM    DS1DSIND,X'40'          CORRECT?
         BO    US100                   YES, BRANCH
         MVC   INSERT#1+47(4),USALREAD ASSUME READ PROTECTED
         TM    DS1DSIND,X'10'+X'04'    CORRECT?
         BM    US100                   YES, BRANCH
         MVC   INSERT#1+47(5),USALWRIT   MUST BE WRITE PROTECTED
         SPACE 1
US100    MVC   INSERT#1+57(8),DS1SYSCD USERID IF ANY
         CLI   INSERT#2+20,0           ANY DATA MOVER?
         BE    US118                   NO, BRANCH
         CLI   INSERT#2+20,C'F'        FDR/ABR DATA MOVER?
         BE    US108                   YES, BRANCH
         SR    R15,R15
         MVI   INSERT#1+38,X'40'
         MVC   INSERT#1+39(7),USAL000
         ICM   R15,B'0111',DS1DSSN+3   LAST CHANGE DATE
         BZ    US104                   YES, BRANCH
         ST    R15,MSGTEXT1            SAVE FOR LATER
         SRL   R15,16                  YEAR ONLY
         MH    R15,=H'1000'            SHIFT FOR THE ADDITION
         AH    R15,MSGTEXT1+2          RESET DAYS
         CVD   R15,MSGTEXT1            STORE AS 00000000 00YYDDDF
         LA    R1,MSGTEXT1+5           POINT TO YYDDDF
         LA    R15,MSGTEXT1            WHERE RESULT GOES
         BAL   R14,CONVDATE            CONVERT TO MM/DD/YY
         MVC   INSERT#1+37(9),USAL4020
         ED    INSERT#1+37(9),MSGTEXT1
         SPACE 1                                                    ABL
US104    CLI   INSERT#2+20,C'A'        ASM2 DATA MOVER?
         BE    US118                   YES, BRANCH
         MVC   INSERT#1+47(8),DS1SYSCD   DMS/OS LAST USER
         MVC   INSERT#1+56(5),DS1SYSCD+8 DMS/OS FIRST OPENER PART 1
         MVC   INSERT#1+61(3),DS1DSSN    DMS/OS FIRST OPENER PART 2
         B     US118
         SPACE 1                                                    ABL
US108    DS    0H                        FDR/ABR DATA
         MVC   INSERT#1+47(19),BLANK128
         SR    R1,R1
         IC    R1,DS1DSNAM+103           CURRENT BACKUP
         CVD   R1,DOUBLE
         MVC   INSERT#1+48(4),=X'40202120'
         ED    INSERT#1+48(4),DOUBLE+6
         TM    DS1DSNAM+104,X'01'        CURRENT BACKUP EXISTS?
         BO    *+10                      YES, BRANCH
         MVC   INSERT#1+48(4),=C'NONE'   NO, CHANGE TO NONE
         MVC   INSERT#1+54(3),USALYES    ASSUME OLD BACKUP EXISTS
         TM    DS1DSNAM+104,X'02'        OLD BACKUP EXISTS?
         BO    *+10                      YES, BRANCH
         MVC   INSERT#1+54(3),USALNO     NO, CHANGE TO NO
         SPACE 1                                                    ABL
         TM    DS1DSNAM+104,X'10'        ARCHIVE REQUESTED?
         BNO   *+10                      NO, BRANCH
         MVC   INSERT#1+59(6),USALARCH   YES, NOTE IT
         TM    DS1DSNAM+104,X'40'        ALWAYS REQUESTED?
         BNO   *+10                      NO, BRANCH
         MVC   INSERT#1+59(6),USALALWA   YES, NOTE IT
         TM    DS1DSNAM+104,X'80'        NOARCH REQUESTED?
         BNO   *+10                      NO, BRANCH
         MVC   INSERT#1+59(6),USALNOAR   YES, NOTE IT
         TM    DS1DSNAM+104,X'C0'        NOABR REQUESTED?
         BNO   *+10                      NO, BRANCH
         MVC   INSERT#1+59(6),USALNOAB   YES, NOTE IT
         SPACE 1                                                    ABL
US118    DS    0H
         M$MSG L180$1
         M$ERRST MSGBLANK
         SPACE 2
         L     R1,DCBDEBAD-IHADCB+INDCB GET DEB ADDRESS
         LH    R14,NUMEXT               NUMBER OF EXTENTS
         SR    R0,R0
         SR    R15,R15
*
         ICM   R15,3,32+14(R1) <----+   NUMBER OF TRACKS IN EXTENT
         AR    R0,R15               ×   ADD NUMBER OF TRACKS
         LA    R1,16(,R1)           ×   NEXT EXTENT
         BCT   R14,*-4-2-4  --------+   BRANCH FOR ALL EXTENTS
*
         ST    R0,DSNTOTAL              SAVE TOTAL D.S. SIZE IN TRACKS
         SR    R1,R1
         ICM   R1,3,DS1LSTAR            GET TT OF LAST TRACK
         CLC   DS1LSTAR(3),ZERO         ANY ALLOCATION?
         BE    *+8                      NO, BRANCH
         LA    R1,1(,R1)                JUMP FOR COMPUTATION
         SR    R0,R1
         ST    R0,DSNEMPTY              TOTAL FREE SPACE
         SPACE 2
         MVC   INSERT#1(120),BLANK128
         MVI   MTHIGHL,120
         L     R4,DCBDEBAD-IHADCB+INDCB GET DEB ADDRESS
         LH    R3,NUMEXT               NUMBER OF EXTENTS
         LA    R2,INSERT#1-2           POSITION FOR FIRST DATA
         SPACE 1
US120    LH    R1,32+14(,R4)           TRACKS IN THIS EXTENT
         N     R1,=XL4'0000FFFF'       MASK OFF SIGN BITS
         CVD   R1,DOUBLE
         MVC   MSGTEXT1(6),=X'402020202120'
         ED    MSGTEXT1(6),DOUBLE+5
         LA    R1,MSGTEXT1-1
         LA    R5,6
         SPACE 1
US130    LA    R1,1(,R1)               SCAN
         BCTR  R5,0                        FOR
         CLI   0(R1),X'40'                    FIRST
         BE    US130                               NON-BLANK
         SPACE 1
         MVI   0(R2),C','
         MVC   2(*-*,R2),0(R1)        <<EXECUTED>>
         EX    R5,*-6                 MOVE IN THE LENGTH TEXT
         LA    R2,2+1(R2,R5)          POSITION FOR NEXT COMMA
         LA    R4,16(,R4)             NEXT EXTENT START
         BCT   R3,US120               DO ALL EXTENTS
         SPACE 1
         M$MSG L181$1
         M$ERRST MSGBLANK
         SPACE 2
US200    MVI   MTHIGHL,42
         MVC   INSERT#1(42),MSG182H
         M$MSG L182$1
         MVC   INSERT#1(42),MSG182E
         SPACE 2
         L     R1,DSNTOTAL            TOTAL DATA SET TRACKS
         CVD   R1,DOUBLE
         ED    INSERT#1+11(6),DOUBLE+5
         SPACE 1
         L     R1,DSNTOTAL            TOTAL DATA SET TRACKS
         S     R1,DSNEMPTY            TOTAL DATA SET USED TRACKS
         CVD   R1,DOUBLE
         ED    INSERT#1+19(6),DOUBLE+5
         SPACE 1
         L     R1,DSNEMPTY            TOTAL DATA SET FREE TRACKS
         CVD   R1,DOUBLE
         ED    INSERT#1+27(6),DOUBLE+5
         SPACE 1
         LH    R1,NUMEXT              TOTAL DATA SET EXTENTS
         CVD   R1,DOUBLE
         ED    INSERT#1+38(4),DOUBLE+6
         SPACE 1
         M$MSG L182$1
         M$ERRST MSGBLANK
         SPACE 2
         TM    DSORG,DS1DSGPO         DSORG=PO?
         BNO   US300                  NO, BRANCH
         MVI   STARTTR+2,X'01'        TTR=000001 (START OF DIRECTORY)
         SPACE 1
         BAL   R14,READDIR            SCAN THROUGH THE DIRECTORY
         SPACE 1
         MVI   MTHIGHL,64
         MVC   INSERT#1(64),MSG183H
         M$MSG L183$1
         MVC   INSERT#1(64),MSG183E
         SPACE 1
         L     R1,TOTBLOCK            TOTAL DIRECTORY BLOCKS
         CVD   R1,DOUBLE
         ED    INSERT#1+09(8),DOUBLE+4
         SPACE 1
         L     R1,TOTUSED             TOTAL USED DIRECTORY BLOCKS
         CVD   R1,DOUBLE
         ED    INSERT#1+17(8),DOUBLE+4
         SPACE 1
         L     R1,TOTBLOCK            TOTAL DIRECTORY BLOCKS
         S     R1,TOTUSED             TOTAL FREE DIRECTORY BLOCKS
         CVD   R1,DOUBLE
         ED    INSERT#1+25(8),DOUBLE+4
         SPACE 1
         L     R1,TOTTRKS             TOTAL TRACKS FOR DIRECTORY BLOCKS
         CVD   R1,DOUBLE
         ED    INSERT#1+34(8),DOUBLE+4
         SPACE 1
         L     R1,TOTMEMR             TOTAL REAL ENTRIES
         A     R1,TOTMEMA             TOTAL ALIAS ENTRIES
         CVD   R1,DOUBLE
         ED    INSERT#1+43(8),DOUBLE+4
         SPACE 1
         L     R1,TOTMEMA             TOTAL ALIAS ENTRIES
         CVD   R1,DOUBLE
         ED    INSERT#1+52(8),DOUBLE+4
         SPACE 1
         M$MSG L183$1
         M$ERRST MSGBLANK
         SPACE 2
US300    TM    FLAGSHH,FOPTIONS       ANY OPTION?
         BNO   NEWCMD                 NO, BRANCH
         MVI   MTHIGHL,70
         MVC   INSERT#1(70),MSG184H
         M$MSG L184$1
         MVC   INSERT#1(70),MSG184U
         M$MSG L184$1
         MVC   INSERT#1(70),BLANK128
         L     R2,DCBDEBAD-IHADCB+INDCB GET DEB ADDRESS
         LH    R3,NUMEXT
         SR    R4,R4                  EXTENT NUMBER
         SR    R5,R5                  BEGINNING TT OF TTR
         SPACE 1
US310    CVD   R4,DOUBLE              EXTENT
         A     R4,=F'1'
         MVC   INSERT#1+2(4),=X'40202120'
         ED    INSERT#1+2(4),DOUBLE+6
         L     R1,32(,R2)             UCB ADDRESS
         MVC   INSERT#1+8(3),13(R1)
         LH    R6,32+14(,R2)          TRACKS IN THIS EXTENT
         N     R6,=XL4'0000FFFF'      MASK OFF SIGN BITS
         LR    R0,R5
         AR    R5,R6                  START OF NEXT EXTENT
         LA    R15,2                  LOOPS
         LA    R14,INSERT#1+16
         SPACE 1
US320    SRDL  R0,4                   TT OF TTR
         SRL   R1,28                  LOW REGISTER POSITION
         MVI   2(R14),C'.'
         IC    R1,HEXTBL(R1)
         STC   R1,1(,R14)
         SRDL  R0,4
         SRL   R1,28
         IC    R1,HEXTBL(R1)
         STC   R1,0(,R14)
         SH    R14,=H'3'
         BCT   R15,US320
         SPACE 1
         CLI   INSERT#1+24,C'.'       SECOND TTR VALUE?
         BE    US330                  YES, BRANCH
         LA    R14,INSERT#1+22
         LA    R15,2
         LTR   R0,R5                  ANY DATA?
         BZ    US320                  NO, BRANCH
         BCTR  R0,0                   YES, REDUCE BY ONE
         B     US320
         SPACE 1
US330    MVI   INSERT#1+18,X'40'      CLEAR FIRST EXTRA PERIOD
         MVI   INSERT#1+24,X'40'      CLEAR SECOND EXTRA PERIOD
         CVD   R6,DOUBLE              TRACKS
         MVC   INSERT#1+26(6),=X'402020202120'
         ED    INSERT#1+26(6),DOUBLE+5
         SPACE 2
         ICM   R0,B'1111',38(R2)      FIRST DEVICE CC.CC.HH.HH
         LA    R15,4                  LOOPS
         LA    R14,INSERT#1+43
         SPACE 1
US420    SRDL  R0,4                   TT OF TTR
         SRL   R1,28                  LOW REGISTER POSITION
         MVI   2(R14),C'.'
         IC    R1,HEXTBL(R1)
         STC   R1,1(,R14)
         SRDL  R0,4
         SRL   R1,28
         IC    R1,HEXTBL(R1)
         STC   R1,0(,R14)
         SH    R14,=H'3'
         BCT   R15,US420
         SPACE 1
         CLI   INSERT#1+57,C'.'       SECOND TTR VALUE?
         BE    US430                  YES, BRANCH
         LA    R14,INSERT#1+55
         ICM   R0,B'1111',42(R2)      SECOND CC.CC.HH.HH FIGURE
         LA    R15,4
         B     US420
         SPACE 1
US430    MVI   INSERT#1+45,X'40'
         MVI   INSERT#1+57,X'40'
         MVC   INSERT#1+59(3),=C'CYL' ASSUME CYLINDER BOUNDARY
         CLC   40(2,R2),ZERO          FIRST HH.HH=0?
         BE    *+10                   YES, BRANCH
         MVC   INSERT#1+59(3),USALTRK NO, TRACK BOUNDARY
         LH    R1,44(,R2)
         LA    R1,1(,R1)
         CH    R1,DEVTTRKS            END HH.HH=MAX/DEVICE
         BE    *+10                   YES, BRANCH
         MVC   INSERT#1+59(3),USALTRK NO, TRACK BOUNDARY
         SPACE 1
         M$MSG L184$1
         LA    R2,16(,R2)             NEXT EXTENT
         BCT   R3,US310               DO ALL EXTENTS
         SPACE 2
         M$ERRST MSGBLANK
         B     US500
         SPACE 3
MSG180H  DC    CL66'DATA SET: CREATED  EXPIRES  LAST USE  UPDATED  SECUX
               RITY  ASM2ID'
MSG180D  DC    CL19'LASTUSE  FIRSTUSE  '
MSG180F  DC    CL19'BACK#  OLD  ABRFLAG'
MSG182H  DC    CL42'TRACKS: ALLOCATED    USED    FREE  EXTENTS'
MSG182E  DC    CL42'                                      '
         ORG   MSG182E+11
         DC    X'402020202120'
         ORG   MSG182E+19
         DC    X'402020202120'
         ORG   MSG182E+27
         DC    X'402020202120'
         ORG   MSG182E+38
         DC    X'40202120'
         ORG   ,
MSG183H  DC    CL64'DIRECTORY: BLOCKS    USED    FREE   TRACKS  MEMBERSX
                 ALIASES'
MSG183E  DC    CL64'                                            '
         ORG   MSG183E+09
         DC    X'4020202020202120'
         ORG   MSG183E+17
         DC    X'4020202020202120'
         ORG   MSG183E+25
         DC    X'4020202020202120'
         ORG   MSG183E+34
         DC    X'4020202020202120'
         ORG   MSG183E+43
         DC    X'4020202020202120'
         ORG   MSG183E+52
         DC    X'4020202020202120'
         ORG   ,
MSG184H  DC    CL70'EXTENT  UCB  LO TT-HI TT  TRACKS     LOW CCHH-HIGH X
               CCHH    BOUNDARY '
MSG184U  DC    CL70'------  ---  ----- -----  ------  ----------- -----X
               ------  -------- '
USAL000  DC    C'0/00/00'
USAL4020 DC    X'402021612020612020'
USALYES  DC    C'YES'
USALNO   DC    C'NO '
USALARCH DC    C'ARCHIV'
USALALWA DC    C'ALWAYS'
USALNOAR DC    C'NOARCH'
USALNOAB DC    C'NOABR '
USALTRK  DC    C'TRK'
USALRACF DC    C'RACF'
USALREAD DC    C'READ'
USALWRIT DC    C'WRITE'
         SPACE 3
OBTAIN   CAMLST SEARCH,0,0,0
         ORG   OBTAIN+4
         SPACE 3
LOCATE   CAMLST NAME,0,,0
         ORG   LOCATE+4
         PRINT GEN
*                                      .
US500    BALR  R8,0                     OUTPUT ADDITIONAL DSCB DATA
         USING *,R8
         M$ERRST MSGBLANK
*                                      .
         MVI   MTHIGHL,70
         MVC   INSERT#1(70),MSG185T
         M$MSG L185$1
*                                      .
         MVC   INSERT#1(70),MSG185H1
         M$MSG L185$1
*                                      .
         MVC   INSERT#1(70),IECSDSL1+00  IN CHARACTER MODE
         MVC   INSERT#1(44),DSNAME       OVERLAY DSNAME IN POSITION
         TR    INSERT#1(70),TRLINE       TRANSLATE TO PRINTABLE
         M$MSG L185$1
*                                      .
         MVC   INSERT#1(70),IECSDSL1+00  IN CHARACTER MODE
         MVC   INSERT#1(44),DSNAME       OVERLAY DSNAME IN POSITION
         TR    INSERT#1(70),TOPLINE      CONVERT 11, 12,... TO F1
         M$MSG L185$1
*                                      .
         MVC   INSERT#1(70),IECSDSL1+00  IN CHARACTER MODE
         MVC   INSERT#1(44),DSNAME       OVERLAY DSNAME IN POSITION
         TR    INSERT#1(70),BOTLINE      CONVERT 13, 23,... TO F3
         M$MSG L185$1
*                                      .
         M$ERRST MSGBLANK
*                                      .
         MVC   INSERT#1(70),MSG185H2
         M$MSG L185$1
*                                      .
         MVC   INSERT#1(70),IECSDSL1+70  IN CHARACTER MODE
         TR    INSERT#1(70),TRLINE       TRANSLATE TO PRINTABLE
         M$MSG L185$1
*                                      .
         MVC   INSERT#1(70),IECSDSL1+70  IN CHARACTER MODE
         TR    INSERT#1(70),TOPLINE      CONVERT 11, 12,... TO F1
         M$MSG L185$1
*                                      .
         MVC   INSERT#1(70),IECSDSL1+70  IN CHARACTER MODE
         TR    INSERT#1(70),BOTLINE      CONVERT 13, 23,... TO F3
         M$MSG L185$1
*                                      .
         M$ERRST MSGBLANK
         M$ERRST MSGBLANK               OUTPUT ADDITIONAL DIR DATA
         MVC   INSERT#1(100),BLANK128   CLEAR THE HEADER LINE
         MVC   INSERT#1(40),MSG185H     HEADER INFORMATION
         M$MSG L186$1
         MVC   INSERT#1(40),MSG185U     UNDERLINE INFORMATION
         SPACE 2
         SR    R2,R2                    OFFSET IN THE DIRECTORY
         LA    R3,USAHDR                START OF HEADER NAMES
         BAL   R4,USAFMT10              OUTPUT FIRST MESSAGE
         SPACE 1
         MVC   INSERT#1+13(44),DSNAME   ADD THE DATA SET NAME
         BAL   R4,USAFMT                (00)
         LA    R2,44(,R2)               POSITION PAST DSNAME
         SPACE 1
         LA    R0,1                     1 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT                (2C)
         LA    R2,1(,R2)                POSITION PAST DS1FMTID
         SPACE 1
         MVC   INSERT#1+13(6),DS1DSSN   ADD THE VOLUME NAME
         NC    INSERT#1+13(6),USALCCCC  MASK OUT FOLLOWING BITS
         CLC   INSERT#1+13(6),USALCCCC  SAME?
         MVC   INSERT#1+13(6),DS1DSSN
         BE    US550                    YES, BRANCH
         LA    R0,6                     6 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
US550    BAL   R4,USAFMT
         LA    R2,6(,R2)                POSITION PAST VOLUME
         SPACE 1
         LH    R0,DS1DSNAM(R2)
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,2(,R2)                SKIP DS1VOLSQ
         SPACE 1
         LA    R0,3                     3 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,3(,R2)                POSITION PAST DS1CREDT
         SPACE 1
         LA    R0,3                     3 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,3(,R2)                POSITION PAST DS1EXPDT
         SPACE 1
         SR    R0,R0
         IC    R0,DS1DSNAM(R2)
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,1(,R2)                SKIP DS1NOEPV
         SPACE 1
         SR    R0,R0
         IC    R0,DS1DSNAM(R2)
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,1(,R2)                SKIP DS1NOBDB
         SPACE 1
         LA    R0,1                     1 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,1(,R2)                POSITION PAST RESERVED
         SPACE 1
         MVC   INSERT#1+13(13),DS1SYSCD ADD THE SYSTEM CODE
         NC    INSERT#1+13(13),USALCCCC MASK OUT FOLLOWING BITS
         CLC   INSERT#1+13(13),USALCCCC SAME?
         MVC   INSERT#1+13(13),DS1SYSCD
         BE    US560                    YES, BRANCH
         MVC   INSERT#1+13(50),BLANK128 CLEAR THE DESCRIPTION
         LA    R0,13                    13 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
US560    BAL   R4,USAFMT
         LA    R2,13(,R2)               POSITION PAST SYSTEM CODE
         SPACE 1
         LA    R0,3                     3 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,3(,R2)                POSITION PAST DS1REFD
         SPACE 1
         LA    R0,4                     4 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,4(,R2)                POSITION PAST RESERVED
         SPACE 1
         LA    R0,2                     2 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,2(,R2)                POSITION PAST DS1DSORG
         SPACE 1
         LA    R0,1                     1 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,1(,R2)                POSITION PAST DS1RECFM
         SPACE 1
         LA    R0,1                     1 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,1(,R2)                POSITION PAST DS1OPTCD
         SPACE 1
         LH    R0,DS1DSNAM(R2)
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,2(,R2)                SKIP DS1BLKL
         SPACE 1
         LH    R0,DS1DSNAM(R2)
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,2(,R2)                SKIP DS1LRECL
         SPACE 1
         SR    R0,R0
         IC    R0,DS1DSNAM(R2)
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,1(,R2)                SKIP DS1KEYL
         SPACE 1
         LH    R0,DS1DSNAM(R2)
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,2(,R2)                SKIP DS1RKP
         SPACE 1
         LA    R0,1                     1 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,1(,R2)                POSITION PAST DS1DSIND
         SPACE 1
         LA    R0,4                     4 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,4(,R2)                POSITION PAST DS1SCALO
         SPACE 1
         LA    R0,3                     3 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,3(,R2)                POSITION PAST DS1LSTAR
         SPACE 1
         SR    R0,R0
         ICM   R0,B'0011',DS1TRBAL
         BAL   R4,USADEC                CONVERT TO DECIMAL
         BAL   R4,USAFMT
         LA    R2,2(,R2)                SKIP DS1TRBAL
         SPACE 1
         LA    R0,2                     2 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,2(,R2)                POSITION PAST RESERVED
         SPACE 1
         LA    R1,DS1DSNAM(R2)          POINT TO DATA
         LA    R15,INSERT#1+15          START OF OUTPUT DATA
         LA    R0,10                    10 INPUT BYTES
         BAL   R4,USAHEX10              CONVERT TO HEX
         MVC   INSERT#1+13(4),INSERT#1+15            FIRST FOUR
         MVI   INSERT#1+13+4,C'.'                    POINT
         MVC   INSERT#1+13+4+1(8),INSERT#1+13+4+1+1  NEXT EIGHT
         MVI   INSERT#1+13+4+1+8,C'.'                POINT
         BAL   R4,USAFMT
         LA    R2,10(,R2)               POSITION PAST DS1EXT1
         SPACE 1
         LA    R1,DS1DSNAM(R2)          POINT TO DATA
         LA    R15,INSERT#1+15          START OF OUTPUT DATA
         LA    R0,10                    10 INPUT BYTES
         BAL   R4,USAHEX10              CONVERT TO HEX
         MVC   INSERT#1+13(4),INSERT#1+15            FIRST FOUR
         MVI   INSERT#1+13+4,C'.'                    POINT
         MVC   INSERT#1+13+4+1(8),INSERT#1+13+4+1+1  NEXT EIGHT
         MVI   INSERT#1+13+4+1+8,C'.'                POINT
         BAL   R4,USAFMT
         LA    R2,10(,R2)               POSITION PAST DS1EXT2
         SPACE 1
         LA    R1,DS1DSNAM(R2)          POINT TO DATA
         LA    R15,INSERT#1+15          START OF OUTPUT DATA
         LA    R0,10                    10 INPUT BYTES
         BAL   R4,USAHEX10              CONVERT TO HEX
         MVC   INSERT#1+13(4),INSERT#1+15            FIRST FOUR
         MVI   INSERT#1+13+4,C'.'                    POINT
         MVC   INSERT#1+13+4+1(8),INSERT#1+13+4+1+1  NEXT EIGHT
         MVI   INSERT#1+13+4+1+8,C'.'                POINT
         BAL   R4,USAFMT
         LA    R2,10(,R2)               POSITION PAST DS1EXT3
         SPACE 1
         LA    R0,5                     5 INPUT BYTES
         BAL   R4,USAHEX                CONVERT TO HEX
         BAL   R4,USAFMT
         LA    R2,5(,R2)                POSITION PAST DS1EXT3
         M$ERRST MSGBLANK
         B     NEWCMD
         SPACE 1
USADEC   C     R0,USADEC99
         BH    USADEC10
         CVD   R0,DOUBLE
         MVC   INSERT#1+100+8(8),BLANK128
         MVC   INSERT#1+100(8),USA2020
         ED    INSERT#1+100(7),DOUBLE+5
         LA    R1,INSERT#1+100-1
         LA    R1,1(,R1)
         CLI   0(R1),X'40'
         BE    *-8
         MVC   INSERT#1+13(8),0(R1)
         BR    R4
USADEC10 LR    R1,R0
         LA    R1,1023(,R1)
         SRL   R1,10                    THE NEXT HIGHER K VALUE
         CVD   R1,DOUBLE
         MVC   INSERT#1+100+8(8),BLANK128
         MVC   INSERT#1+100(7),USA2020
         MVI   INSERT#1+100+7,C'K'
         ED    INSERT#1+100(7),DOUBLE+5
         LA    R1,INSERT#1+100-1
         LA    R1,1(,R1)
         CLI   0(R1),X'40'
         BE    *-8
         MVC   INSERT#1+13(8),0(R1)
         BR    R4
USADEC99 DC    F'99999'
         SPACE 3
USAHEX   LA    R1,DS1DSNAM(R2)          POINT TO DATA
         LA    R15,INSERT#1+13          START OF OUTPUT DATA
         SPACE 1
USAHEX10 UNPK  0(3,R15),0(2,R1)         UNPACK TO HEXADECIMAL
         TR    0(2,R15),TRTABLE         CONVERT TO PRINTABLE
         MVI   2(R15),X'40'             BLANK GARBAGE BYTE
         LA    R15,2(,R15)              NEXT OUTPUT DIGIT
         LA    R1,1(,R1)                NEXT INPUT DIGIT
         BCT   R0,USAHEX10              FORMAT ALL INPUT DIGITS
         BR    R4
         SPACE 3
USAFMT   STC   R2,DOUBLE                SAVE OFFSET IN STORAGE
         UNPK  INSERT#1(3),DOUBLE(2)    UNPACK TO HEXADECIMAL
         TR    INSERT#1(2),TRTABLE      CONVERT TO PRINTABLE OFFSET
         MVI   INSERT#1+2,X'40'         CLEAR GARBAGE BYTE
         SPACE 1
USAFMT10 TR    INSERT#1(70),TRLINE      CONVERT TO PRINTABLE CHARACTERS
         M$MSG L186$1                   OUTPUT
         SPACE 1
USAFMT20 MVC   INSERT#1(100),BLANK128   BLANK THE OUTPUT AREA
         MVC   INSERT#1+04(08),0(R3)    ADD THE PDS... NAME
         MVC   INSERT#1+26(44),8(R3)    ADD THE DESCRIPTION
         LR    R6,R3                    THIS TEXT
         LA    R3,52(,R3)               NEXT TEXT
         BR    R4
         SPACE 3
         B     NEWCMD
*                                      .
TOPLINE  DC    CL32'00000000000000001111111111111111'
         DC    CL32'22222222222222223333333333333333'
         DC    CL32'44444444444444445555555555555555'
         DC    CL32'66666666666666667777777777777777'
         DC    CL32'88888888888888889999999999999999'
         DC    CL32'AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB'
         DC    CL32'CCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDD'
         DC    CL32'EEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFF'
*                                      .
BOTLINE  DC    16CL16'0123456789ABCDEF'
*                                      .
USA2020  DC    X'4020206B2021204B'      EDIT MASK
MSG185T  DC    CL70'FORMAT 1 DSCB: '
*                                      .
MSG185H1 DC    CL70'0   4   8   C  10  14  18  1C  20  24  28  2C  30  X
               34  38  3C  40  44 '
MSG185H2 DC    CL70' 48  4C  50  54  58  5C  60  64  68  6C  70  74  78X
                 7C  80  84  88   '
MSG185H  DC    CL40'LOC NAME     VALUE        DESCRIPTION'
MSG185U  DC    CL40'--- ----     -----        -----------'
USALCCCC DC    X'C0C0C0C0C0C0C0C0C0C0C0C0C0'
*IRHDR    DC CL52'1234567890123456789012345678901234567890123456789012'
USAHDR    DC CL52'DS1DSNAM                                            '
          DC CL52'DS1FMTIDFORMAT IDENTIFIER                           '
          DC CL52'DS1DSSN DATA SET SERIAL NUMBER                      '
          DC CL52'DS1VOLSQVOLUME SEQUENCE NUMBER                      '
          DC CL52'DS1CREDTCREATION DATE                               '
          DC CL52'DS1EXPDTEXPIRATION DATE                             '
          DC CL52'DS1NOEPVNUMBER OF EXTENTS ON VOLUME                 '
          DC CL52'DS1NOBDBNUMBER OF BYTES USED IN LAST DIRECTORY BLOCK'
          DC CL52'        RESERVED (ONE BYTE)                         '
          DC CL52'DS1SYSCDSYSTEM CODE                                 '
          DC CL52'DS1REFD DATE LAST REFERENCED                        '
          DC CL52'        RESERVED (FOUR BYTES)                       '
          DC CL52'DS1DSORGDATA SET ORGANIZATION                       '
          DC CL52'DS1RECFMRECORD FORMAT                               '
          DC CL52'DS1OPTCDOPTION CODE                                 '
          DC CL52'DS1BLKL BLOCK LENGTH                                '
          DC CL52'DS1LRECLLOGICAL RECORD LENGTH                       '
          DC CL52'DS1KEYL KEY LENGTH                                  '
          DC CL52'DS1RKP  RELATIVE KEY POSITION                       '
          DC CL52'DS1DSINDDATA SET INDICATORS                         '
          DC CL52'DS1SCALOSECONDARY ALLOCATION                        '
          DC CL52'DS1LSTARTTR OF LAST USED TRACK AND BLOCK ON TRACK   '
          DC CL52'DS1TRBALBYTES REMAINING ON LAST TRACK USED          '
          DC CL52'        RESERVED (TWO BYTES)                        '
          DC CL52'DS1EXT1            FIRST EXTENT DESCRIPTION         '
          DC CL52'DS1EXT2            SECOND EXTENT DESCRIPTION        '
          DC CL52'DS1EXT3            THIRD EXTENT DESCRIPTION         '
          DC CL52'DS1PTRDSCCHHR OF ANY ASSOCIATED FORMAT 2 OR 3 DSCB  '
