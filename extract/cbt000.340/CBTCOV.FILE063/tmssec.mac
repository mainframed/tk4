         MACRO
         TMSSEC                                                        1
               &CAT=ONLINE, -     TYPE OF GENERATION (DEFAULT=ONLINE). 2
               &TYPE=, -          TYPE OF ENTRY (PASS, DEFAULT, DETAIL)3
               &TINQ=, -          TYPE OF INQUIRY (TMC, DSNB OR CTL).  4
               &TUPD=, -          TYPE OF UPDATE (TMC, DSNB OR CTL).   5
               &PASW=, -          VALUE FOR THE PASSWORD(S).           6
               &MTMC1=, -         VALUE #1 FOR MATCH AGAINST  "TMC".   7
               &MTMC2=, -         VALUE #2 FOR MATCH AGAINST  "TMC".   8
               &MTMC3=, -         VALUE #3 FOR MATCH AGAINST  "TMC".   9
               &MTMC4=, -         VALUE #4 FOR MATCH AGAINST  "TMC".   0
               &MTMC=, -          VALUE FOR MATCH AGAINST  "TMC".      1
               &MDSB1=, -         VALUE #1 FOR MATCH AGAINST  "DSNB".  2
               &MDSB2=, -         VALUE #2 FOR MATCH AGAINST  "DSNB".  3
               &MDSB3=, -         VALUE #3 FOR MATCH AGAINST  "DSNB".  4
               &MDSB4=, -         VALUE #4 FOR MATCH AGAINST  "DSNB".  5
               &MDSB=, -          VALUE FOR MATCH AGAINST  "DSNB".     6
               &TUNCT=, -         VALUE(S) FOR  "TMC"  FUNCTION CODES. 7
               &TECUR=, -         VALUE(S) FOR  "TMC"  KEYWORDS.       8
               &DUNCT=, -         VALUE(S) FOR  "DSNB"  FUNCTION CODES.9
               &DECUR=, -         VALUE(S) FOR  "DSNB"  KEYWORDS.      0
               &ACCT=, -          VALUE FOR ACCOUNTING FIELD.          1
               &JOB=, -           VALUE FOR JOB NAME FIELD.            2
               &DSECT=YES -       INDICATOR TO GENERATE A DSECT.
.*
.*                                                                40320
.*                                                                40333
.**********************************************************************
.*
         GBLA  &INQ -             TYPE OF INQUIRY.
         GBLA  &UPD -             TYPE OF UPDATE.
.*
.**********************************************************************
.*
         GBLB  &SECO -            INDICATOR FOR MORE THAN 1 SECUR GEN.
.*
.**********************************************************************
.*
         GBLB  &PA -              INDICATOR FOR PASS GENERATION.
         GBLB  &DF -              INDICATOR FOR DEFAULT GENERATION.
         GBLB  &DT -              INDICATOR FOR DETAIL GENERATION.
.*
.**********************************************************************
.*
         GBLA  &KTBAX01 -         TOTAL NUMBER OF ENTRIES IN TABLE 1.
         GBLA  &KTBAX02 -         TOTAL NUMBER OF ENTRIES IN TABLE 2.
         GBLA  &KTBAX03 -         TOTAL NUMBER OF ENTRIES IN TABLE 3.
         GBLA  &KTBAX04 -         TOTAL NUMBER OF ENTRIES IN TABLE 4.
         GBLA  &KTBAX05 -         TOTAL NUMBER OF ENTRIES IN TABLE 5.
         GBLA  &KTBAX06 -         TOTAL NUMBER OF ENTRIES IN TABLE 6.
         GBLA  &KTBAX07 -         TOTAL NUMBER OF ENTRIES IN TABLE 7.
.*
.**********************************************************************
.*
         GBLB  &LEN -             SWITCH FOR END OF KEYWORD TABLE.
         GBLA  &NUM -             COUNTER FOR NUMBER OF KEYWORDS.
         GBLB  &BEG -             SWITCH FOR 1ST ENTRY OF EACH SECTION.
         GBLB  &BEF -             SWITCH FOR BEGINNING OF KEYWORD TABLE
         GBLC  &TI1 -             STORAGE FOR CURRENT TABLE NAME.
         GBLC  &TI2 -             STORAGE FOR CURRENT TABLE NAME.
         GBLC  &TI3 -             STORAGE FOR CURRENT TABLE NAME.
         GBLA  &TAB -             STORAGE FOR CURRENT TABLE NUMBER.
.*
         GBLC  &SYS -             STORAGE CURRENT SYSTEM NUMBER.
         GBLC  &SYMP -            STORAGE CURRENT SYSTEM NUMBER.
         GBLC  &SYMB -            STORAGE CURRENT SYSTEM NUMBER.
         GBLC  &SYMD -            STORAGE CURRENT SYSTEM NUMBER.
         GBLA  &GRO -             COUNTER FOR # OF SECTIONS GENERATED.
.*
         GBLA  &NU#P -            COUNTER FOR NUMBER OF PASSWORDS PER
.*                                SECTION.
         GBLA  &NU#B -            COUNTER FOR NUMBER OF BATCHES THIS
.*                                SECTION.
         GBLA  &KTBBIT -          COUNTER FOR PASSING TO & FROM BUILD.
         GBLA  &KTBBYT -          COUNTER FOR PASSING TO & FROM BUILD.
         GBLA  &KTBMSK -          COUNTER FOR PASSING TO & FROM BUILD.
         GBLA  &KTBFN -           COUNTER FOR PASSING TO & FROM BUILD.
         GBLB  &KTBER -           SWITCH FOR ERROR CONDITION.
.*
.**********************************************************************
.*
         GBLB  &T1(8) -           "TMC"  SECURITY BYTE  "#1".
         GBLB  &T2(8) -           "TMC"  SECURITY BYTE  "#2".
         GBLB  &T3(8) -           "TMC"  SECURITY BYTE  "#3".
         GBLB  &T4(8) -           "TMC"  SECURITY BYTE  "#4".
         GBLB  &T5(8) -           "TMC"  SECURITY BYTE  "#5".
         GBLB  &T6(8) -           "TMC"  SECURITY BYTE  "#6".
         GBLB  &T7(8) -           "TMC"  SECURITY BYTE  "#7".
         GBLB  &T8(8) -           "TMC"  SECURITY BYTE  "#8".
.*
.**********************************************************************
.*
         GBLB  &D1(8) -           "DSNB"  SECURITY BYTE  "#1".
         GBLB  &D2(8) -           "DSNB"  SECURITY BYTE  "#2".
         GBLB  &D3(8) -           "DSNB"  SECURITY BYTE  "#3".
         GBLB  &D4(8) -           "DSNB"  SECURITY BYTE  "#4".
         GBLB  &D5(8) -           "DSNB"  SECURITY BYTE  "#5".
         GBLB  &D6(8) -           "DSNB"  SECURITY BYTE  "#6".
         GBLB  &D7(8) -           "DSNB"  SECURITY BYTE  "#7".
         GBLB  &D8(8) -           "DSNB"  SECURITY BYTE  "#8".
.*
.**********************************************************************
.*
         GBLA  &COU -             LINE SEPARATOR COUNTER.
         GBLA  &SEB -             COUNTER FOR BIT WITHIN SECURITY BYTE
         GBLA  &SEF -             COUNTER FOR SECURITY BYTE.
         GBLB  &DOC -             HEADER DOCUMENTATION INDICATOR.
.*
.**********************************************************************
.*
         GBLB  &GE#SE -           SWITCH TO INDICATE SECURITY BEING GEN
.*
.**********************************************************************
.*
         GBLC  &KE(256) -         STORAGE FOR PASSWORDS.
         GBLB  &ONE#PA -          SWITCH TO INDICATE AT LEAST 1 PASSWOR
         GBLB  &ONE#DE -          SWITCH TO INDICATE AT LEAST 1 DETAIL.
.*
         GBLA  &DIST(5) -         STORAGE FOR "5 TMC" DISPLACEMENTS.
         GBLA  &SEFT(5) -         STORAGE FOR "5 TMC" SECURITY BYTES.
         GBLA  &SEBT(5) -         STORAGE FOR "5 TMC" SECURITY BITS.
         GBLA  &LENT(5) -         STORAGE FOR "5 TMC" LENGTHS.
         GBLC  &LOWT(5) -         STORAGE FOR "5 TMC" LOW COMPARE.
         GBLC  &HGHT(5) -         STORAGE FOR "5 TMC" HIGH COMPARE.
.*
         GBLA  &DISD(5) -         STORAGE FOR "5 DSNB" DISPLACEMENTS.
         GBLA  &SEFD(5) -         STORAGE FOR "5 DSNB" SECURITY BYTES.
         GBLA  &SEBD(5) -         STORAGE FOR "5 DSNB" SECURITY BITS.
         GBLA  &LEND(5) -         STORAGE FOR "5 DSNB" LENGTHS.
         GBLC  &LOWD(5) -         STORAGE FOR "5 DSNB" LOW COMPARE.
         GBLC  &HGHD(5) -         STORAGE FOR "5 DSNB" HIGH COMPARE.
.*
         GBLA  &FUT -             STORAGE FOR "TMC" FUNCTION CODES.
         GBLA  &FUD -             STORAGE FOR "DSNB" FUNCTION CODES.
.*
.**********************************************************************
.*
         GBLB  &DEF#RUN -         INDICATOR FOR DEFAULT GEN.
         GBLB  &TALL -            INDICATOR FOR ALL SECURITY ON  "TMC".
         GBLB  &DALL -            INDICATOR FOR ALL SECURITY ON "DSNB".
.*
.**********************************************************************
.*
         GBLA  &DE#INQ -          TYPE OF INQUIRY.
         GBLA  &DE#UPD -          TYPE OF UPDATE.
.*
.**********************************************************************
.*
         GBLA  &DE#DIST(5) -      STORAGE FOR "5 TMC" DISPLACEMENTS.
         GBLA  &DE#SEFT(5) -      STORAGE FOR "5 TMC" SECURITY BYTES.
         GBLA  &DE#SEBT(5) -      STORAGE FOR "5 TMC" SECURITY BITS.
         GBLA  &DE#LENT(5) -      STORAGE FOR "5 TMC" LENGTHS.
         GBLC  &DE#LOWT(5) -      STORAGE FOR "5 TMC" LOW COMPARE.
         GBLC  &DE#HGHT(5) -      STORAGE FOR "5 TMC" HIGH COMPARE.
.*
         GBLA  &DE#DISD(5) -      STORAGE FOR "5 DSNB" DISPLACEMENTS.
         GBLA  &DE#SEFD(5) -      STORAGE FOR "5 DSNB" SECURITY BYTES.
         GBLA  &DE#SEBD(5) -      STORAGE FOR "5 DSNB" SECURITY BITS.
         GBLA  &DE#LEND(5) -      STORAGE FOR "5 DSNB" LENGTHS.
         GBLC  &DE#LOWD(5) -      STORAGE FOR "5 DSNB" LOW COMPARE.
         GBLC  &DE#HGHD(5) -      STORAGE FOR "5 DSNB" HIGH COMPARE.
.*
.**********************************************************************
.*
         GBLA  &DE#FUT -          STORAGE FOR "TMC" FUNCTION CODES.
.*
         GBLB  &DE#T1(8) -        "TMC"  SECURITY BYTE  "#1".
         GBLB  &DE#T2(8) -        "TMC"  SECURITY BYTE  "#2".
         GBLB  &DE#T3(8) -        "TMC"  SECURITY BYTE  "#3".
         GBLB  &DE#T4(8) -        "TMC"  SECURITY BYTE  "#4".
         GBLB  &DE#T5(8) -        "TMC"  SECURITY BYTE  "#5".
         GBLB  &DE#T6(8) -        "TMC"  SECURITY BYTE  "#6".
         GBLB  &DE#T7(8) -        "TMC"  SECURITY BYTE  "#7".
         GBLB  &DE#T8(8) -        "TMC"  SECURITY BYTE  "#8".
.*
.**********************************************************************
.*
         GBLA  &DE#FUD -          STORAGE FOR "DSNB" FUNCTION CODES.
.*
         GBLB  &DE#D1(8) -        "DSNB"  SECURITY BYTE  "#1".
         GBLB  &DE#D2(8) -        "DSNB"  SECURITY BYTE  "#2".
         GBLB  &DE#D3(8) -        "DSNB"  SECURITY BYTE  "#3".
         GBLB  &DE#D4(8) -        "DSNB"  SECURITY BYTE  "#4".
         GBLB  &DE#D5(8) -        "DSNB"  SECURITY BYTE  "#5".
         GBLB  &DE#D6(8) -        "DSNB"  SECURITY BYTE  "#6".
         GBLB  &DE#D7(8) -        "DSNB"  SECURITY BYTE  "#7".
         GBLB  &DE#D8(8) -        "DSNB"  SECURITY BYTE  "#8".
.*
.**********************************************************************
.*
         LCLA  &TMC1 -            DISPLACEMENT IN FIELD.
         LCLC  &SEF1 -            SECURITY BYTE.
         LCLC  &SEB1 -            SECURITY BIT.
         LCLA  &LEN1 -            LENGTH OF COMPARE.
         LCLC  &LOW1 -            LOW COMPARE VALUE.
         LCLC  &HGH1 -            HIGH COMPARE VALUE.
.*
         LCLA  &DNB2 -            DISPLACEMENT IN FIELD.
         LCLC  &SEF2 -            SECURITY BYTE.
         LCLC  &SEB2 -            SECURITY BIT.
         LCLA  &LEN2 -            LENGTH OF COMPARE.
         LCLC  &LOW2 -            LOW COMPARE VALUE.
         LCLC  &HGH2 -            HIGH COMPARE VALUE.
.*
         LCLA &TUN -              "TMC"  FUNCTION CODES.
         LCLA &TEC -              "TMC"  KEYWORDS.
.*
         LCLA &DUN -              "DSNB"  FUNCTION CODES.
         LCLA &DEC -              "DSNB"  KEYWORDS.
.*
.**********************************************************************
.*
         LCLB  &T#DEL -            INDICATOR FOR  "DEL"  FLAG.
         LCLB  &T#ADD -            INDICATOR FOR  "ADD"  FLAG.
         LCLB  &T#EXT -            INDICATOR FOR  "EXT"  FLAG.
         LCLB  &T#EXP -            INDICATOR FOR  "EXP"  FLAG.
         LCLB  &T#CLE -            INDICATOR FOR  "CLE"  FLAG.
         LCLB  &T#CHE -            INDICATOR FOR  "CHE"  FLAG.
         LCLB  &T#BLK                                             40333
.*
.**********************************************************************
.*
         LCLB  &D#DEL -             INDICATOR FOR  "DEL"  FLAG.
         LCLB  &D#ADD -             INDICATOR FOR  "ADD"  FLAG.
         LCLB  &D#EXT -             INDICATOR FOR  "EXT"  FLAG.
         LCLB  &D#EXP -             INDICATOR FOR  "EXP"  FLAG.
         LCLB  &D#BLK                                             40333
.*
.**********************************************************************
.*
         LCLC  &FIEL -            FIELD NAME WE ARE TESTING.
         LCLC  &MAX -             MAXIMUM NUMBER OF CHARACTERS.
         LCLA  &ENT -             NUMBER OF CHARACTERS ENTERED.
.*
.**********************************************************************
.*
         LCLA  &X -               COUNTER FOR ERROR DISPLAY.
         LCLA  &K -               CURRENT LENGTH OF KEYWORD.
         LCLA  &IX -              CURRENT INDEX FOR KEYWORDS.
         LCLA  &IN -              INDEX FOR RUNNING UP KEYWORD TABLE.
         LCLA  &NU -              COUNTER FOR TOTAL # OF SUB PARMS.
         LCLC  &TES -             TEMPERARY TEST AREA.
         LCLA  &CU -              RUNNING COUNTER FOR CURRENT SUB PARM
         LCLA  &VA -              COUNTER FOR PASSING VALUE TO INNER.
         LCLA  &VAL -             COUNTER FOR PASSING VALUE TO INNER.
         LCLA  &BIT -             SECURITY BIT WITHIN BYTE.
         LCLC  &KEY -             TEMPERARY STORAGE FOR CURRENT KEYWORD
         LCLA  &HI -              TEMP STORAGE FOR LENGTH OF COMPARE.
         LCLC  &TEK -             TEMPORARY STORAGE FOR CURRENT DELETES
         LCLC  &TAI -             STORAGE FOR TABLE NAME.
.*
.**********************************************************************
.*
         LCLB  &TMQ -             INDICATOR FOR  "TMS INQUIRY"  FLAG.
         LCLB  &DSQ -             INDICATOR FOR  "DSNB INQUIRY"  FLAG.
         LCLB  &CTQ -             INDICATOR FOR  "CTL INQUIRY"  FLAG.
         LCLB  &TMU -             INDICATOR FOR  "TMS UPDATE"  FLAG.
         LCLB  &DSU -             INDICATOR FOR  "DSNB UPDATE"  FLAG.
         LCLB  &CTU -             INDICATOR FOR  "CTL UPDATE"  FLAG.
.*
.**********************************************************************
.*
         LCLB  &DEFAT -           INDICATOR FOR ALL DEFAULT.
         LCLB  &DEFAD -           INDICATOR FOR ALL DEFAULT.
.*
.**********************************************************************
.*
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.*           *************************************************
.*           ***  S T A R T   O F   M A I N L I N E   O F  ***
.*           ***                 M A C R O                 ***
.*           *************************************************
.*
         AIF   ('&TYPE' EQ 'DSECT').SEC#DEX -IS THIS A DSECT ENTRY?
         AIF   ('&TYPE' EQ 'PASS').SET#PAS -  IS THIS A  "PASS"  GEN.
         AIF   ('&TYPE' EQ 'DEF').SET#DEF - IS THIS A  "DEFAULT"  GEN.
         AIF   ('&TYPE' EQ 'DET').SET#DET -  IS THIS A  "DETAIL"  GEN.
.*
         AIF   (&PA).PAS#SEC -     IS THIS A  "PASS"  GENERATION?
         AIF   (&DF).DEF#SEC -     IS THIS A  "DEFAULT"  GENERATION?
         AIF   (&DT).DET#SEC -     IS THIS A  "DETAIL"  GENERATION?
.*
.**********************************************************************
.*
         SPACE 3
* ************************************************
         MNOTE 8,'A CONTROL CARD WAS NOT THE FIRST CARD IN'
         MNOTE *,'            YOUR GENERATION.'
* ************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.SET#PAS ANOP
         AIF   (&PA).PAS#ERR -    IS THIS A  "PASS"  GENERATION?
&PA      SETB  1 -                SET  "PASS"  SWITCH.
&LEN     SETB  0 -                SET  "END"  SWITCH.
&BEF     SETB  0 -                SET  "BEGINNING"  SWITCH.
&TI1     SETC  'PA' -             SET TABLE NAME.
&TAB     SETA  1 -                SET TABLE NUMBER.
&VA      SETA  0 -                INITIALIZE ENTRY NUMBER.
.*
.**********************************************************************
.*
.PAS#SEC ANOP
         AIF   ('&TYPE' EQ 'FINIS').SET#FIN -IS THIS END OF GENERATION?
.*
         AGO   .PAS#GEN -         BRANCH TO CONTINUE.
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.SET#DEF ANOP
&DF      SETB  1 -                SET  "DEFAULT"  SWITCH.
&DEF#RUN SETB  1 -                SET  "DEFAULT"  RUN THIS GEN.
.*
.**********************************************************************
.*
.DEF#SEC ANOP
         AIF   ('&TYPE' EQ 'FINIS').SET#FIN -IS THIS END OF GENERATION?
.*
         AGO   .STR#GEN -         BRANCH TO CONTINUE.
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.SET#DET ANOP
         AIF   (&DT).DET#ERR -    IS THIS A  "DETAIL"  GENERATION?
&DT      SETB  1 -                SET  "DETAIL"  SWITCH.
&PA      SETB  0 -                TURN OFF  "PASS"  SWITCH.
&TI3     SETC  'DT' -             SET TABLE NAME.
&VA      SETA  0 -                INITIALIZE ENTRY NUMBER.
.*
.**********************************************************************
.*
.DET#SEC ANOP
         AIF   ('&TYPE' EQ 'FINIS').SET#FIN -IS THIS END OF GENERATION?
.*
         AGO   .STR#GEN -         BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.PAS#ERR ANOP
         SPACE 3
* **********************************************************
         MNOTE 0,'YOU HAVE ALREADY GENERATED A SECTION OF  "PASSWORDS"'
         MNOTE *,'PLEASE VERIFY THAT YOU WANT  "2"  SECTION TOGETHER.'
* **********************************************************
         SPACE 3
         AGO   .PAS#GEN -         BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.DET#ERR ANOP
&SECO    SETB  1 -                       SET MULT SECUR GEN INDICATOR.
         AIF   (K'&TECUR NE 0).BY#TUN -  IS THIS A MULTIPLE GEN.
         AIF   (K'&DECUR NE 0).BY#DUN -  IS THIS A MULTIPLE GEN.
.*
&SECO    SETB  0 -                       TURN OFF INDICATOR.
         SPACE 3
* ****************************************************
         MNOTE 8,'YOU HAVE ALREADY GENERATED THE SECTION WHICH'
         MNOTE *,'    CONTAINS THE KEYWORDS FOR THE  "DETAIL".'
* ****************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.PAS#GEN ANOP
.*
.*                     *************************
.*                     ***  P A S S W O R D  ***
.*                     *************************
.*
         AIF   ('&PASW'(1,1) EQ '(').GO#PA1 -IS PARM ENCLOSED IN PAREN?
.*
.**********************************************************************
.*
         SPACE 3
*            ***************************************************
         MNOTE 8,'YOU MUST ENCLOSE THE VALUE FOR THE SYMBOLIC'
         MNOTE *,'   PARAMETER CALLED "PASW" IN PARENTHESIS.'
*            ***************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.GO#PA1  ANOP
&NU#P    SETA  N'&PASW
.*
         AIF   (&NU#P LE 256).GO#PA2 - MORE THAN "256" SUB-PARAMETERS.
.*
.**********************************************************************
.*
         SPACE 3
* ***************************************************
         MNOTE 8,'YOU ENTERED  "&NU#P"  SUB PARAMETERS IN THE'
         MNOTE *,'SYMBOLIC PARAMETER CALLED  "PASW"  AND THE'
         MNOTE *,'              LIMIT IS  "256".'
* ***************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.GO#PA2  ANOP
&CU      SETA  0 -                INITIALIZE SUB PARAMETER INDEX.
.*
.LOP#01  ANOP
&CU      SETA  &CU+1
&KE(&CU) SETC  '   ZZ   ' -       INITIALIZE COUNTER.
.*
         AIF   (&CU LT &NU#P).LOP#01 - ALL COUNTERS INITIALIZE.
.*
.**********************************************************************
.*
&CU      SETA  0                  INITIALIZE SUB PARAMETER INDEX.
.*
.LOP#02  ANOP
&CU      SETA  &CU+1
         AIF   (K'&PASW(&CU) LE 8).GO#PA3
.*
&X       SETA  K'&PASW(&CU) -     GET NUMBER OF CHARACTERS IN PASSWORD.
.*
         SPACE 3
* ****************************************************
         MNOTE 8,'YOU ENTERED  "&X"  CHARACTERS ON YOUR  "&CU"'
         MNOTE *,'SUB PARAMETER OF THE SYMBOLIC  "PASW". THE'
         MNOTE *,'              MAXIMUM IS  "8".'
* ****************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.GO#PA3  ANOP
&ONE#PA  SETB  1 -                SET INDICATOR "AT LEAST 1" PASSWORD.
&KE(&CU) SETC  '&PASW(&CU)' -     STORE CURRENT PASSWORD IN MATRIX.
.*
         AIF   (&CU LT &NU#P).LOP#02
.*
.*
.**********************************************************************
.*
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.*
.*          *******************************************************
.*          ***  G E N E R A T E   P A S S W O R D   E N T R Y  ***
.*          *******************************************************
.*
&CU      SETA  0 -                SET INDEX COUNTER TO ZERO.
&GRO     SETA  &GRO+1 -           INCREMENT NUMBER OF SECTIONS.
&SYS     SETC  '&SYSNDX'.'&GRO' - GET CURRENT SYSTEM GENERATION NUMBER.
&SYMP    SETC  '&TI1'.'&SYSNDX' - GET CURRENT SYSTEM PASS NUMBER.
.*
&TI1&SYS DS    0H
         DC    CL6'TYPE 1' -      TYPE  "1"  SECTION.
         DC    AL2(LE&SYMP-&TI1&SYS) - TOTAL LENGTH OF SECTION.
         DC    AL2(NU&SYMP) -     NUMBER OF PASSWORDS IN SECTION.
         SPACE 1
.*
.LOP#03  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
         DC    CL8'&KE(&CU)' -    PASSWORD.
.*
         AIF   (&CU LT &NU#P).LOP#03 - HAVE WE PROCESSED ALL PASSWORDS.
.*
.**********************************************************************
.*
         SPACE 1
LE&SYMP  DS    0C -               GENERATE LENGTH OF SECTION.
NU&SYMP  EQU   &CU -              TOTAL NUMBER OF ENTRIES FOR SECTION.
         SPACE 1
         ORG
.*
.**********************************************************************
.*
         MEXIT
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.STR#GEN ANOP
.*
.*           *******************************************
.*           ***  I N Q U I R Y   I N D I C A T O R  ***
.*           *******************************************
.*
&FIEL    SETC  'TINQ'
         AIF   (T'&TINQ EQ 'O').OM#INQ -    HAS PARAMETER BEEN ENTERED?
         AIF   ('&TINQ' NE '   ').GO#INQ -  HAVE BLANKS BEEN ENTERED?
.*
.**********************************************************************
.*
.OM#INQ  ANOP
         AIF   (NOT &DEF#RUN).CH#DEF - IS THIS A DEFAULT GEN?
&INQ     SETA  0 -                 SET DEFAULT TO ZERO.
         AGO   .BY#INQ -           BYPASS INQUIRY.
.*
.CH#DEF  ANOP
         AIF   (NOT &DF).PR#INQ - BRANCH TO PRINT IF NO DEFAULT.
.*
.SET#INQ ANOP
&INQ     SETA  &DE#INQ -           SET DEFAULT VALUE.
         AGO   .BY#INQ -           BYPASS INQUIRY.
.*
.PR#INQ  ANOP
         AGO   .MIS#PAR -         BRANCH FOR ERROR MESSAGE.
.*
.**********************************************************************
.*
.GO#INQ  ANOP
         AIF   ('&TINQ'(1,1) EQ '(').GOIN1
.*
.**********************************************************************
.*
         AGO   .NO#PAR -          BRANCH FOR ERROR MESSAGE.
.*
.**********************************************************************
.*
.GOIN1   ANOP
&NU      SETA  N'&TINQ -           GET TOTAL NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                 INITIALIZE COUNTER.
&INQ     SETA  0                                                  40333
.*
.LOP#04  ANOP
&CU      SETA  &CU+1 -            INCREMENT TO NEXT SUB PARAMETER.
&TES     SETC  '&TINQ(&CU)' -     GET VALUE OF SUB PARAMETER.
.*
         AIF   ('&TES' EQ 'DEF').IN#DEF - IS THIS A DEFAULT INQUIRY?
         AIF   ('&TES' EQ 'TMC').INTM -  IS THIS A  "TMC"  INQUIRY?
         AIF   ('&TES' EQ 'DSNB').INDS - IS THIS A  "DSNB"  INQUIRY?
         AIF   ('&TES' EQ 'CTL').INCT -  IS THIS A  "CTL"  INQUIRY?
         AIF   ('&TES' EQ 'BLK').INBL -  IS THIS A  "BLK"  INQUIRY?
.*
.**********************************************************************
.*
         AGO   .INV#PAR -         BRANCH FOR ERROR MESSAGE.
.*
.**********************************************************************
.*
.INTM    ANOP
         AIF   (&TMQ).DUP#UP1 -   WAS THERE A DUPLICATE ENTRY?
&TMQ     SETB  1 -                SET BY-PASS SWITCH.
.*
&INQ     SETA  &INQ+1             SET HEX  "01"  IN THE INTERNAL FLAG.
         AGO   .INDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.INDS    ANOP
         AIF   (&DSQ).DUP#UP1 -   WAS THERE A DUPLICATE ENTRY?
&DSQ     SETB  1 -                SET BY-PASS SWITCH.
.*
&INQ     SETA  &INQ+2             SET HEX  "02"  IN THE INTERNAL FLAG.
         AGO   .INDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.INCT    ANOP
         AIF   (&CTQ).DUP#UP1 -   WAS THERE A DUPLICATE ENTRY?
&CTQ     SETB  1 -                SET BY-PASS SWITCH.
.*
&INQ     SETA  &INQ+4 -           SET HEX  "04"  IN THE INTERNAL FLAG.
         AGO   .INDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.INBL    ANOP
&INQ     SETA  00 -               SET HEX  "00"  IN THE INTERNAL FLAG.
         AGO   .BY#INQ -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.IN#DEF  ANOP
&INQ     SETA  &DE#INQ -          SET  "DEFAULT"  IN THE INTERNAL FLAG.
         AGO   .INDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.DUP#UP1 ANOP
         SPACE 3
* *********************************************
         MNOTE 8,'YOU ALREADY ENTERED  "&TES"  FOR THE'
         MNOTE *,'   SYMBOLIC PARAMETER CALLED "TINQ".'
* *********************************************
         SPACE 3
.*
.**********************************************************************
.*
.INDO1   ANOP
         AIF   ('&CU' NE '&NU').LOP#04 -   ARE THERE ANY MORE ENTRIES?
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.*
.BY#INQ  ANOP
.*
.*              *****************************************
.*              ***  U P D A T E   I N D I C A T O R  ***
.*              *****************************************
.*
&FIEL    SETC  'TUPD' -           SET TYPE INDICATOR.
         AIF   (T'&TUPD EQ 'O').OM#UPD -    HAS PARAMETER BEEN ENTERED?
         AIF   ('&TUPD' NE '   ').GO#UPD -  HAVE BLANKS BEEN ENTERED?
.*
.**********************************************************************
.*
.OM#UPD  ANOP
         AIF   (NOT &DEF#RUN).CH#UPD - IS THIS A DEFAULT GEN?
&UPD     SETA  0 -                 SET DEFAULT TO ZERO.
         AGO   .BY#UPD -           BYPASS UPDATE.
.*
.CH#UPD  ANOP
         AIF   (NOT &DF).PR#UPD - BRANCH TO PRINT IF NO DEFAULT.
.*
.SET#UPD ANOP
&UPD     SETA  &DE#UPD -           SET DEFAULT VALUE.
         AGO   .BY#UPD -           BYPASS UPDATE.
.*
.PR#UPD  ANOP
         AGO   .MIS#PAR -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.GO#UPD  ANOP
         AIF   ('&TUPD'(1,1) EQ '(').GOUP1
.*
.**********************************************************************
.*
         AGO   .NO#PAR -          BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.GOUP1   ANOP
&NU      SETA  N'&TUPD -           GET TOTAL NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                 INITIALIZE COUNTER.
&UPD     SETA  0 -                 INITIALIZE INTERNAL FLAG.
.*
.LOP#05  ANOP
&CU      SETA  &CU+1 -            INCREMENT TO NEXT SUB PARAMETER.
&TES     SETC  '&TUPD(&CU)' -     GET VALUE OF SUB PARAMETER.
.*
         AIF   ('&TES' EQ 'DEF').UP#DEF - IS THIS A DEFAULT INQUIRY?
         AIF   ('&TES' EQ 'TMC').UPTM -  IS THIS A  "TMC"  UPDATE?
         AIF   ('&TES' EQ 'DSNB').UPDS - IS THIS A  "DSNB"  UPDATE?
         AIF   ('&TES' EQ 'CTL').UPCT -  IS THIS A  "CTL"  UPDATE?
         AIF   ('&TES' EQ 'BLK').UPBL -  IS THIS A  "BLK"  UPDATE?
.*
.**********************************************************************
.*
         AGO   .INV#PAR -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.UPTM    ANOP
         AIF   (&TMU).DUP#UP2 -   WAS THERE A DUPLICATE ENTRY?
&TMU     SETB  1 -                SET BY-PASS SWITCH.
.*
&UPD     SETA  &UPD+1             SET HEX  "01"  IN THE INTERNAL FLAG.
         AGO   .UPDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.UPDS    ANOP
         AIF   (&DSU).DUP#UP2 -   WAS THERE A DUPLICATE ENTRY?
&DSU     SETB  1 -                SET BY-PASS SWITCH.
.*
&UPD     SETA  &UPD+2             SET HEX  "02"  IN THE INTERNAL FLAG.
         AGO   .UPDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.UPCT    ANOP
         AIF   (&CTU).DUP#UP2 -   WAS THERE A DUPLICATE ENTRY?
&CTU     SETB  1 -                SET BY-PASS SWITCH.
.*
&UPD     SETA  &UPD+4 -           SET HEX  "04"  IN THE INTERNAL FLAG.
         AGO   .UPDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.UP#DEF  ANOP
&UPD     SETA  &DE#UPD -          SET  "DEFAULT"  IN THE INTERNAL FLAG.
         AGO   .UPDO1 -           BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.UPBL    ANOP
&UPD     SETA  00 -               SET HEX  "00"  IN THE INTERNAL FLAG.
         AGO   .BY#UPD -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.DUP#UP2 ANOP
         SPACE 3
* *********************************************
         MNOTE 8,'YOU ALREADY ENTERED  "&TES"  FOR THE'
         MNOTE *,'   SYMBOLIC PARAMETER CALLED "TUPD".'
* *********************************************
         SPACE 3
.*
.**********************************************************************
.*
.UPDO1   ANOP
         AIF   ('&CU' NE '&NU').LOP#05 -   ARE THERE ANY MORE ENTRIES?
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.*
.BY#UPD  ANOP
.*
.*              ***************************************
.*              ***  M A T C H   P A R A M E T E R  ***
.*              ***************************************
.*
&CU      SETA  0 -                INITIALIZE SUB PARAMETER INDEX.
&MAX     SETC  '7'
.*
.LOP#06  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&DIST(&CU) SETA 00 -              INITIALIZE COUNTERS.
&SEFT(&CU) SETA 0 -               INITIALIZE COUNTERS.
&SEBT(&CU) SETA 0 -               INITIALIZE COUNTERS.
&LENT(&CU) SETA 00 -              INITIALIZE COUNTERS.
&LOWT(&CU) SETC '00000000' -      INITIALIZE COUNTERS.
&HGHT(&CU) SETC '00000000' -      INITIALIZE COUNTERS.
.*
         AIF   (&CU LT 5).LOP#06 -LOOP 5 TIMES.
.*
.**********************************************************************
.*
&TAB     SETA  1 -                SET TABLE TO TMC LOOKUP.
.*
.**********************************************************************
.*
&FIEL    SETC  'MTMC1' -                    SET TYPE INDICATOR.
         AIF   (T'&MTMC1 NE 'O').DO#MT1 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MTMC1' NE ' ').DO#MT1 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MT1
.*
.DE#MT1  ANOP
&DIST(1) SETA &DE#DIST(1) -       SET COUNTER.
&SEFT(1) SETA &DE#SEFT(1) -       SET COUNTER.
&SEBT(1) SETA &DE#SEBT(1) -       SET COUNTER.
&LENT(1) SETA &DE#LENT(1) -       SET COUNTER.
&LOWT(1) SETC '&DE#LOWT(1)' -     SET COUNTER.
&HGHT(1) SETC '&DE#HGHT(1)' -     SET COUNTER.
         AGO   .OM#MT1 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MT1  ANOP
         AIF   ('&MTMC1'(2,3) EQ 'DEF').DE#MT1 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MTMC1 -         GET NUMBER OF SUB-PARAMETER.
.*
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
.*
&KEY     SETC  '&MTMC1(1)' -
         AIF   (K'&MTMC1(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS
.*
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DIST(1) SETA  &MTMC1(2) -        GET DISPLACEMENT VALUE.
&SEFT(1) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBT(1) SETA  &KTBBIT -          GET SECURITY BIT.
&LENT(1) SETA  K'&MTMC1(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MTMC1(4) -      GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LENT(1) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWT(1) SETC  '&MTMC1(3)' -      GET VALUE OF LOW COMPARE.
&HGHT(1) SETC  '&MTMC1(4)' -      GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MT1  ANOP
&FIEL    SETC  'MTMC2' -                    SET TYPE INDICATOR.
         AIF   (T'&MTMC2 NE 'O').DO#MT2 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MTMC2' NE ' ').DO#MT2 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MT2
.*
.DE#MT2  ANOP
&DIST(2) SETA &DE#DIST(2) -       SET COUNTER.
&SEFT(2) SETA &DE#SEFT(2) -       SET COUNTER.
&SEBT(2) SETA &DE#SEBT(2) -       SET COUNTER.
&LENT(2) SETA &DE#LENT(2) -       SET COUNTER.
&LOWT(2) SETC  '&DE#LOWT(2)' -    SET COUNTER.
&HGHT(2) SETC '&DE#HGHT(2)' -     SET COUNTER.
         AGO   .OM#MT2 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MT2  ANOP
         AIF   ('&MTMC2'(2,3) EQ 'DEF').DE#MT2 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MTMC2 -         GET NUMBER OF SUB-PARAMETER.
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
&KEY     SETC  '&MTMC2(1)' -
         AIF   (K'&MTMC2(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DIST(2) SETA  &MTMC2(2) -        GET DISPLACEMENT VALUE.
&SEFT(2) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBT(2) SETA  &KTBBIT -          GET SECURITY BIT.
&LENT(2) SETA  K'&MTMC2(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MTMC2(4) -      GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LENT(2) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWT(2) SETC  '&MTMC2(3)' -      GET VALUE OF LOW COMPARE.
&HGHT(2) SETC  '&MTMC2(4)' -      GET VALUE OF HIGH COMPARE.
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL
.*
.**********************************************************************
.*
.OM#MT2 ANOP
&FIEL    SETC  'MTMC3' -                    SET TYPE INDICATOR.
         AIF   (T'&MTMC3 NE 'O').DO#MT3 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MTMC3' NE ' ').DO#MT3 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MT3
.*
.DE#MT3  ANOP
&DIST(3) SETA &DE#DIST(3) -       SET COUNTER.
&SEFT(3) SETA &DE#SEFT(3) -       SET COUNTER.
&SEBT(3) SETA &DE#SEBT(3) -       SET COUNTER.
&LENT(3) SETA &DE#LENT(3) -       SET COUNTER.
&LOWT(3) SETC '&DE#LOWT(3)' -     SET COUNTER.
&HGHT(3) SETC '&DE#HGHT(3)' -     SET COUNTER.
         AGO   .OM#MT3 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MT3  ANOP
         AIF   ('&MTMC3'(2,3) EQ 'DEF').DE#MT3 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MTMC3 -         GET NUMBER OF SUB-PARAMETER.
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
&KEY     SETC  '&MTMC3(1)' -
         AIF   (K'&MTMC3(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DIST(3) SETA  &MTMC3(2) -        GET DISPLACEMENT VALUE.
&SEFT(3) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBT(3) SETA  &KTBBIT -          GET SECURITY BIT.
&LENT(3) SETA  K'&MTMC3(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MTMC3(4) -      GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LENT(3) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWT(3) SETC  '&MTMC3(3)' -      GET VALUE OF LOW COMPARE.
&HGHT(3) SETC  '&MTMC3(4)' -      GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MT3  ANOP
&FIEL    SETC  'MTMC4' -                    SET TYPE INDICATOR.
         AIF   (T'&MTMC4 NE 'O').DO#MT4 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MTMC4' NE ' ').DO#MT4 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MT4
.*
.DE#MT4  ANOP
&DIST(4) SETA &DE#DIST(4) -       SET COUNTER.
&SEFT(4) SETA &DE#SEFT(4) -       SET COUNTER.
&SEBT(4) SETA &DE#SEBT(4) -       SET COUNTER.
&LENT(4) SETA &DE#LENT(4) -       SET COUNTER.
&LOWT(4) SETC '&DE#LOWT(4)' -     SET COUNTER.
&HGHT(4) SETC '&DE#HGHT(4)' -     SET COUNTER.
         AGO   .OM#MT4 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MT4  ANOP
         AIF   ('&MTMC4'(2,3) EQ 'DEF').DE#MT4 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MTMC4 -         GET NUMBER OF SUB-PARAMETER.
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
&KEY     SETC  '&MTMC4(1)' -
         AIF   (K'&MTMC4(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DIST(4) SETA  &MTMC4(2) -        GET DISPLACEMENT VALUE.
&SEFT(4) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBT(4) SETA  &KTBBIT -          GET SECURITY BIT.
&LENT(4) SETA  K'&MTMC4(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MTMC4(4) -      GET LENGTH OF HIGH COMPARE VALUE.
         AIF   (&LENT(4) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWT(4) SETC  '&MTMC4(3)' -      GET VALUE OF LOW COMPARE.
&HGHT(4) SETC  '&MTMC4(4)' -      GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MT4  ANOP
&FIEL    SETC  'MTMC' -                    SET TYPE INDICATOR.
         AIF   (T'&MTMC NE 'O').DO#MT5 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MTMC' NE ' ').DO#MT5 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MT5
.*
.DE#MT5  ANOP
&DIST(5) SETA &DE#DIST(5) -       SET COUNTER.
&SEFT(5) SETA &DE#SEFT(5) -       SET COUNTER.
&SEBT(5) SETA &DE#SEBT(5) -       SET COUNTER.
&LENT(5) SETA &DE#LENT(5) -       SET COUNTER.
&LOWT(5) SETC '&DE#LOWT(5)' -     SET COUNTER.
&HGHT(5) SETC '&DE#HGHT(5)' -     SET COUNTER.
         AGO   .OM#MT5 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MT5  ANOP
         AIF   ('&MTMC'(2,3) EQ 'DEF').DE#MT5 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MTMC -          GET NUMBER OF SUB-PARAMETER.
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
&KEY     SETC  '&MTMC(1)' -
.*
         AIF   (K'&MTMC(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
.*
&DIST(5) SETA  &MTMC(2) -         GET DISPLACEMENT VALUE.
&SEFT(5) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBT(5) SETA  &KTBBIT -          GET SECURITY BIT.
&LENT(5) SETA  K'&MTMC(3) -       GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MTMC(4) -       GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LENT(5) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWT(5) SETC  '&MTMC(3)' -       GET VALUE OF LOW COMPARE.
&HGHT(5) SETC  '&MTMC(4)' -       GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MT5  ANOP
&CU      SETA  0 -                INITIALIZE SUB PARAMETER INDEX.
.*
.LOP#07  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&DISD(&CU) SETA 00 -              INITIALIZE COUNTERS.
&SEFD(&CU) SETA 0 -               INITIALIZE COUNTERS.
&SEBD(&CU) SETA 0 -               INITIALIZE COUNTERS.
&LEND(&CU) SETA 00 -              INITIALIZE COUNTERS.
&LOWD(&CU) SETC '00000000' -      INITIALIZE COUNTERS.
&HGHD(&CU) SETC '00000000' -      INITIALIZE COUNTERS.
.*
         AIF   (&CU LT 5).LOP#07 -LOOP 5 TIMES.
.*
.**********************************************************************
.*
&TAB     SETA  2 -                SET TABLE TO TMC LOOKUP.
.*
.**********************************************************************
.*
&FIEL    SETC  'MDSB1' -                    SET TYPE INDICATOR.
         AIF   (T'&MDSB1 NE 'O').DO#MD1 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MDSB1' NE ' ').DO#MD1 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MD1
.*
.DE#MD1  ANOP
&DISD(1) SETA &DE#DISD(1) -       SET COUNTER.
&SEFD(1) SETA &DE#SEFD(1) -       SET COUNTER.
&SEBD(1) SETA &DE#SEBD(1) -       SET COUNTER.
&LEND(1) SETA &DE#LEND(1) -       SET COUNTER.
&LOWD(1) SETC '&DE#LOWD(1)' -     SET COUNTER.
&HGHD(1) SETC '&DE#HGHD(1)' -     SET COUNTER.
         AGO   .OM#MD1 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MD1  ANOP
         AIF   ('&MDSB1'(2,3) EQ 'DEF').DE#MD1 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MDSB1 -         GET NUMBER OF SUB-PARAMETER.
.*
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
.*
&KEY     SETC  '&MDSB1(1)' -
         AIF   (K'&MDSB1(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
.*
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DISD(1) SETA  &MDSB1(2) -        GET DISPLACEMENT VALUE.
&SEFD(1) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBD(1) SETA  &KTBBIT -          GET SECURITY BIT.
&LEND(1) SETA  K'&MDSB1(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MDSB1(4) -      GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LEND(1) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWD(1) SETC  '&MDSB1(3)' -      GET VALUE OF LOW COMPARE.
&HGHD(1) SETC  '&MDSB1(4)' -      GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MD1  ANOP
&FIEL    SETC  'MDSB2' -                    SET TYPE INDICATOR.
         AIF   (T'&MDSB2 NE 'O').DO#MD2 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MDSB2' NE ' ').DO#MD2 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MD2
.*
.DE#MD2  ANOP
&DISD(2) SETA &DE#DISD(2) -       SET COUNTER.
&SEFD(2) SETA &DE#SEFD(2) -       SET COUNTER.
&SEBD(2) SETA &DE#SEBD(2) -       SET COUNTER.
&LEND(2) SETA &DE#LEND(2) -       SET COUNTER.
&LOWD(2) SETC '&DE#LOWD(2)' -     SET COUNTER.
&HGHD(2) SETC '&DE#HGHD(2)' -     SET COUNTER.
         AGO   .OM#MD2 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MD2  ANOP
         AIF   ('&MDSB2'(2,3) EQ 'DEF').DE#MD2 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MDSB2 -         GET NUMBER OF SUB-PARAMETER.
.*
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
.*
&KEY     SETC  '&MDSB2(1)' -
         AIF   (K'&MDSB2(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
.*
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DISD(2) SETA  &MDSB2(2) -        GET DISPLACEMENT VALUE.
&SEFD(2) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBD(2) SETA  &KTBBIT -          GET SECURITY BIT.
&LEND(2) SETA  K'&MDSB2(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MDSB2(4) -      GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LEND(2) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWD(2) SETC  '&MDSB2(3)' -      GET VALUE OF LOW COMPARE.
&HGHD(2) SETC  '&MDSB2(4)' -      GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MD2  ANOP
&FIEL    SETC  'MDSB3' -                    SET TYPE INDICATOR.
         AIF   (T'&MDSB3 NE 'O').DO#MD3 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MDSB3' NE ' ').DO#MD3 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MD3
.*
.DE#MD3  ANOP
&DISD(3) SETA &DE#DISD(3) -       SET COUNTER.
&SEFD(3) SETA &DE#SEFD(3) -       SET COUNTER.
&SEBD(3) SETA &DE#SEBD(3) -       SET COUNTER.
&LEND(3) SETA &DE#LEND(3) -       SET COUNTER.
&LOWD(3) SETC '&DE#LOWD(3)' -     SET COUNTER.
&HGHD(3) SETC '&DE#HGHD(3)' -     SET COUNTER.
         AGO   .OM#MD3 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MD3  ANOP
         AIF   ('&MDSB3'(2,3) EQ 'DEF').DE#MD3 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MDSB3 -         GET NUMBER OF SUB-PARAMETER.
.*
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
.*
&KEY     SETC  '&MDSB3(1)' -
         AIF   (K'&MDSB3(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
.*
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DISD(3) SETA  &MDSB3(2) -        GET DISPLACEMENT VALUE.
&SEFD(3) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBD(3) SETA  &KTBBIT -          GET SECURITY BIT.
&LEND(3) SETA  K'&MDSB3(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MDSB3(4) -      GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LEND(3) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWD(3) SETC  '&MDSB3(3)' -      GET VALUE OF LOW COMPARE.
&HGHD(3) SETC  '&MDSB3(4)' -      GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MD3  ANOP
&FIEL    SETC  'MDSB4' -                    SET TYPE INDICATOR.
         AIF   (T'&MDSB4 NE 'O').DO#MD4 -   HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MDSB4' NE ' ').DO#MD4 -   HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MD4
.*
.DE#MD4  ANOP
&DISD(4) SETA &DE#DISD(4) -       SET COUNTER.
&SEFD(4) SETA &DE#SEFD(4) -       SET COUNTER.
&SEBD(4) SETA &DE#SEBD(4) -       SET COUNTER.
&LEND(4) SETA &DE#LEND(4) -       SET COUNTER.
&LOWD(4) SETC '&DE#LOWD(4)' -     SET COUNTER.
&HGHD(4) SETC '&DE#HGHD(4)' -     SET COUNTER.
         AGO   .OM#MD4 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MD4  ANOP
         AIF   ('&MDSB4'(2,3) EQ 'DEF').DE#MD4 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MDSB4 -         GET NUMBER OF SUB-PARAMETER.
.*
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
.*
&KEY     SETC  '&MDSB4(1)' -
         AIF   (K'&MDSB4(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
.*
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DISD(4) SETA  &MDSB4(2) -        GET DISPLACEMENT VALUE.
&SEFD(4) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBD(4) SETA  &KTBBIT -          GET SECURITY BIT.
&LEND(4) SETA  K'&MDSB4(3) -      GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MDSB4(4) -      GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LEND(4) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWD(4) SETC  '&MDSB4(3)' -      GET VALUE OF LOW COMPARE.
&HGHD(4) SETC  '&MDSB4(4)' -      GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MD4  ANOP
&FIEL    SETC  'MDSB' -                     SET TYPE INDICATOR.
         AIF   (T'&MDSB NE 'O').DO#MD5 -    HAS PARAMETER BEEN ENTERED?
.*       AIF   ('&MDSB' NE ' ').DO#MD5 -    HAVE BLANKS BEEN ENTERED?
.*
         AGO   .OM#MD5
.*
.DE#MD5  ANOP
&DISD(5) SETA &DE#DISD(5) -       SET COUNTER.
&SEFD(5) SETA &DE#SEFD(5) -       SET COUNTER.
&SEBD(5) SETA &DE#SEBD(5) -       SET COUNTER.
&LEND(5) SETA &DE#LEND(5) -       SET COUNTER.
&LOWD(5) SETC '&DE#LOWD(5)' -     SET COUNTER.
&HGHD(5) SETC '&DE#HGHD(5)' -     SET COUNTER.
         AGO   .OM#MD5 -          BYPASS MATCH ROUTINE.
.*
.**********************************************************************
.*
.DO#MD5  ANOP
         AIF   ('&MDSB'(2,3) EQ 'DEF').DE#MD5 - IS THIS A DEFAULT?
.*
&NU      SETA  N'&MDSB -          GET NUMBER OF SUB-PARAMETER.
.*
         AIF   (&NU NE 4).NOT#ENO WERE 4 SUB-PARAMETERS ENTERED?
.*
&KEY     SETC  '&MDSB(1)' -
         AIF   (K'&MDSB(1) GT 7).PAR#LON  MORE THAN 7 CHARACTERS?
.*
         KTBBLD FND,&TAB,&KEY -   GET SECURITY FIELDS.
&DISD(5) SETA  &MDSB(2) -         GET DISPLACEMENT VALUE.
&SEFD(5) SETA  &KTBBYT -          GET SECURITY BYTE.
&SEBD(5) SETA  &KTBBIT -          GET SECURITY BIT.
&LEND(5) SETA  K'&MDSB(3) -       GET LENGTH OF LOW COMPARE VALUE.
&HI      SETA  K'&MDSB(4) -       GET LENGTH OF HIGH COMPARE VALUE.
.*
         AIF   (&LEND(5) NE &HI).NOT#COM - ARE THE LENGTH VALUES SAME.
&LOWD(5) SETC  '&MDSB(3)' -       GET VALUE OF LOW COMPARE.
&HGHD(5) SETC  '&MDSB(4)' -       GET VALUE OF HIGH COMPARE.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*
.OM#MD5  ANOP
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.*          *********************************************
.*          ***  T M C   F U N C T I O N   C O D E S  ***
.*          *********************************************
.*
&FIEL    SETC  'TUNCT' -          SET CURRENT TYPE.
.*
         AIF   (T'&TUNCT EQ 'O').OM#FUT -   HAS PARAMETER BEEN ENTERED?
         AIF   ('&TUNCT' NE '   ').GO#FUT - HAVE BLANKS BEEN ENTERED?
.*
.**********************************************************************
.*
.OM#FUT  ANOP
         AIF   (NOT &DEF#RUN).CH#FUT - IS THIS A DEFAULT GEN?
&FUT     SETA  0 -                 SET DEFAULT TO ZERO.
         AGO   .BY#TUN -           BYPASS INQUIRY.
.*
.CH#FUT  ANOP
         AIF   (NOT &DF).PR#FUT - BRANCH TO PRINT IF NO DEFAULT.
.*
.SET#FUT ANOP
&FUT     SETA  &DE#FUT -           SET DEFAULT VALUE.
         AGO   .BY#TUN -           BYPASS INQUIRY.
.*
.PR#FUT  ANOP
         AIF   (&SECO).BY#TEC -   IS THIS A MULTIPE GEN?
.*
         AGO   .MIS#PAR -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.GO#FUT  ANOP
         AIF   ('&TUNCT'(1,1) NE '(').NO#PAR
.*
.**********************************************************************
.*
.GO#FUT1 ANOP
&NU      SETA  N'&TUNCT -          GET TOTAL NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                 INITIALIZE COUNTER.
&FUT     SETA  0 -                 INITIALIZE INTERNAL FLAG.
.*
.LOP#08  ANOP
&CU      SETA  &CU+1 -            INCREMENT TO NEXT SUB PARAMETER.
&TES     SETC  '&TUNCT(&CU)' -    GET VALUE OF SUB PARAMETER.
.*
         AIF   ('&TES' EQ 'DEF').FUTF -    IS THIS A DEFAULT ENTRY?
         AIF   ('&TES' EQ 'DEL').FUTD -    IS THIS A DELETE ENTRY?
         AIF   ('&TES' EQ 'ADD').FUTA -    IS THIS A ADD ENTRY?
         AIF   ('&TES' EQ 'EXT').FUTE -    IS THIS A EXTEND ENTRY?
         AIF   ('&TES' EQ 'EXP').FUTX -    IS THIS A EXPIRE ENTRY?
         AIF   ('&TES' EQ 'CLE').FUTL -    IS THIS A CLEAN ENTRY?
         AIF   ('&TES' EQ 'CHE').FUTH -    IS THIS A CHECKIN ENTRY?
         AIF   ('&TES' EQ 'BLK').FUTB -IS THIS NO VALID FUNCTION  40333
.*
.**********************************************************************
.*
         AGO   .INV#PAR -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.FUTF    ANOP
&FUT     SETA  &DE#FUT -          SET  "DEFAULT"  IN THE INTERNAL FLAG.
         AGO   .FUT#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUTD    ANOP
         AIF   (&T#DEL).DUP#FUT - WAS THERE A DUPLICATE ENTRY?
&T#DEL   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUT     SETA  &FUT+8 -           SET HEX  "08"  IN THE INTERNAL FLAG.
         AGO   .FUT#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUTA    ANOP
         AIF   (&T#ADD).DUP#FUT - WAS THERE A DUPLICATE ENTRY?
&T#ADD   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUT     SETA  &FUT+4 -           SET HEX  "04"  IN THE INTERNAL FLAG.
         AGO   .FUT#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUTE    ANOP
         AIF   (&T#EXT).DUP#FUT - WAS THERE A DUPLICATE ENTRY?
&T#EXT   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUT     SETA  &FUT+2             SET HEX  "02"  IN THE INTERNAL FLAG.
         AGO   .FUT#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUTX    ANOP
         AIF   (&T#EXP).DUP#FUT - WAS THERE A DUPLICATE ENTRY?
&T#EXP   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUT     SETA  &FUT+1 -           SET HEX  "01"  IN THE INTERNAL FLAG.
         AGO   .FUT#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUTL    ANOP
         AIF   (&T#CLE).DUP#FUT - WAS THERE A DUPLICATE ENTRY?
&T#CLE   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUT     SETA  &FUT+32 -          SET HEX  "20"  IN THE INTERNAL FLAG.
         AGO   .FUT#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUTH    ANOP
         AIF   (&T#CHE).DUP#FUT - WAS THERE A DUPLICATE ENTRY?
&T#CHE   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUT     SETA  &FUT+16 -          SET HEX  "10"  IN THE INTERNAL FLAG.
         AGO   .FUT#01 -          BRANCH TO CONTINUE.
.*
.FUTB    ANOP                                                     40333
         AIF   (&T#BLK).DUP#FUT - WAS THERE A DUPLICATE ENTRY     40333
&T#BLK   SETB  1                  SET BY-PASS SWITCH              40333
&FUT     SETA  0                  SET INTRNAL FLAG TO NO FUNCTION 40333
         AGO   .SETTONE -         BRANCH TO BYPASS                40333
.*                                                                40333
.**********************************************************************
.*
.DUP#FUT ANOP
         SPACE 3
* *********************************************
         MNOTE 8,'YOU ALREADY ENTERED  "&TES"  FOR THE'
         MNOTE *,'   SYMBOLIC PARAMETER CALLED "TUNCT".'
* *********************************************
         SPACE 3
.*
.**********************************************************************
.*
.FUT#01   ANOP
         AIF   ('&CU' NE '&NU').LOP#08 -   ARE THERE ANY MORE ENTRIES?
.*
.SETTONE ANOP                                                     40333
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.BY#TUN  ANOP
.*
.*          *********************************************
.*          ***  T M C   S E C U R I T Y   C O D E S  ***
.*          *********************************************
.*
&FIEL    SETC  'TECUR'
&MAX     SETC  '256'
&ENT     SETA  K'&TECUR
&TAI     SETC  'TMC' -            SET TYPE CODE.
.*
&CU      SETA  0 -                 INITIALIZE INDEX COUNTER.
.*
.LOP#09  ANOP
&CU      SETA  &CU+1 -             INCREMENT INDEX COUNTER.
&T1(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&T2(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&T3(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&T4(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&T5(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&T6(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&T7(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&T8(&CU) SETB  0 -                 CLEAR BITS BUCKET.
.*
         AIF   (&CU LT 8).LOP#09
.*
         AIF   (K'&TECUR GT 256).PAR#LON -  BRANCH IF MORE THAN 256.
         AIF   (T'&TECUR EQ 'O').OM#SET -   HAS PARAMETER BEEN ENTERED?
         AIF   ('&TECUR' NE '   ').GO#SET - HAVE BLANKS BEEN ENTERED?
.*
.**********************************************************************
.*
.OM#SET  ANOP
         AIF   (&SECO).BY#TEC -   IS THIS A MULTIPE GEN?
         AIF   (&DT).BY#TEC -     HAS UPDATE ALREADY ENTERED?
.*
         AGO   .MIS#PAR -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.GO#SET  ANOP
         AIF   ('&TECUR'(1,1) NE '(').NO#PAR
&NU      SETA  N'&TECUR -         GET NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
&TAB     SETA  1 -                SET TABLE NUMBER.
.*
         AIF   ('&TECUR(1)' EQ 'ALL').GEN#ALT -  ARE WE GENING ALL?
         AIF   ('&TECUR(1)' EQ 'DEF').GEN#DET -  ARE WE GENING DEFAULT?
         AIF   ('&TECUR(1)' EQ 'BLK').BY#TAL - ARE WE GENING NONE 40333
.*
.*
.**********************************************************************
.*
.LOP#10  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&KEY     SETC  '&TECUR(&CU)' -    GET CURRENT KEYWORD.
.*
.SET#TET ANOP
.*
         KTBBLD FND,&TAB,&KEY -   GO FIND SECURITY VALUES.
.*
         AIF   (NOT &KTBER).VAL#KET - WAS THIS A VALID KEYWORD?
.*
.**********************************************************************
.*
         AGO   .BAD#KEY -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.VAL#KET ANOP
&BIT     SETA  &KTBBIT -          GET BIT NUMBER
         AIF   (&KTBBYT EQ 1).BYTE#1T -
         AIF   (&KTBBYT EQ 2).BYTE#2T -
         AIF   (&KTBBYT EQ 3).BYTE#3T -
         AIF   (&KTBBYT EQ 4).BYTE#4T -
         AIF   (&KTBBYT EQ 5).BYTE#5T -
         AIF   (&KTBBYT EQ 6).BYTE#6T -
         AIF   (&KTBBYT EQ 7).BYTE#7T -
         AIF   (&KTBBYT EQ 8).BYTE#8T -
.*
.**********************************************************************
.*
         AGO   .BAD#SEC -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.BYTE#1T  ANOP
&T1(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.BYTE#2T  ANOP
&T2(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.BYTE#3T  ANOP
&T3(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.BYTE#4T  ANOP
&T4(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.BYTE#5T  ANOP
&T5(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.BYTE#6T  ANOP
&T6(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.BYTE#7T  ANOP
&T7(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.BYTE#8T  ANOP
&T8(&BIT) SETB 1 -                SET SECURITY BIT.
          AGO   .SEC#COT -        BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.SEC#COT ANOP
         AIF   (&DEFAT).RET#DET - RETURN TO DEFAULT.
.*
         AIF   (&CU LT &NU).LOP#10 LOOP THRU ALL SUB ENTRIES.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
         AGO   .BY#TEC -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.GEN#ALT ANOP
&CU      SETA  0                  INITIALIZE INDEX COUNTER.
&NUM     SETA  0 -                INITIALIZE # OF KEYWORDS COUNTER.
&FIEL    SETC  'TMC ' -           SET FIELD NAME.
.*
         AIF   (&KTBAX01 EQ 0).NO#KEY - HAVE WE ANY KEYWORDS IN TABLE?
.*
.LOP#11  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T1(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#11 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#12  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T2(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#12 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#13  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T3(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#13 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#14  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T4(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#14 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#15  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T5(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#15 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#16  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T6(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#16 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#17  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T7(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#17 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#18  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&T8(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX01).TAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#18 -        LOOP FOR ALL 8 BITS.
.*
.**********************************************************************
.*
.TAL#SET ANOP
         AIF   (N'&TECUR EQ 1).BY#TAL -BYPASS ADDITIONS.
&CU      SETA  1 -                 INITIALIZE INDEX COUNTER.
.*
.LOP#19  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&TEK     SETC  '&TECUR(&CU)' -    GET CURRENT KEYWORD.
&X       SETA  K'&TECUR(&CU)-1 -     GET NUMBER OF CHARACTERS MINUS 1.
&KEY     SETC  '&TEK'(2,&X) -     GET CURRENT KEYWORD.
.*
         KTBBLD FND,&TAB,&KEY -   GO FIND SECURITY VALUES.
.*
         AIF   (NOT &KTBER).VAL#KTA - WAS THIS A VALID KEYWORD?
.*
.**********************************************************************
.*
         AGO   .BAD#KEY -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.VAL#KTA ANOP
&BIT     SETA  &KTBBIT -          GET BIT NUMBER
         AIF   (&KTBBYT EQ 1).YTE#1TA -
         AIF   (&KTBBYT EQ 2).YTE#2TA -
         AIF   (&KTBBYT EQ 3).YTE#3TA -
         AIF   (&KTBBYT EQ 4).YTE#4TA -
         AIF   (&KTBBYT EQ 5).YTE#5TA -
         AIF   (&KTBBYT EQ 6).YTE#6TA -
         AIF   (&KTBBYT EQ 7).YTE#7TA -
         AIF   (&KTBBYT EQ 8).YTE#8TA -
.*
.**********************************************************************
.*
         AGO   .BAD#SEC -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.YTE#1TA ANOP
&T1(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.YTE#2TA ANOP
&T2(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.YTE#3TA ANOP
&T3(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.YTE#4TA ANOP
&T4(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.YTE#5TA ANOP
&T5(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.YTE#6TA ANOP
&T6(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.YTE#7TA ANOP
&T7(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.YTE#8TA ANOP
&T8(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CTA -         BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.SEC#CTA ANOP
         AIF   (&CU LT &NU).LOP#19 LOOP THRU ALL SUB ENTRIES.
.*
.BY#TAL  ANOP
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
         AGO   .BY#TEC -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.GEN#DET ANOP
&NU      SETA  N'&TECUR -         GET NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
&TAB     SETA  1 -                SET TABLE NUMBER.SET
.*
.LOP#20  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&T1(&CU) SETB  (&DE#T1(&CU)) -    SET  "TMC"  DEFAULT BYTE 1.
&T2(&CU) SETB  (&DE#T2(&CU)) -    SET  "TMC"  DEFAULT BYTE 2.
&T3(&CU) SETB  (&DE#T3(&CU)) -    SET  "TMC"  DEFAULT BYTE 3.
&T4(&CU) SETB  (&DE#T4(&CU)) -    SET  "TMC"  DEFAULT BYTE 4.
&T5(&CU) SETB  (&DE#T5(&CU)) -    SET  "TMC"  DEFAULT BYTE 5.
&T6(&CU) SETB  (&DE#T6(&CU)) -    SET  "TMC"  DEFAULT BYTE 6.
&T7(&CU) SETB  (&DE#T7(&CU)) -    SET  "TMC"  DEFAULT BYTE 7.
&T8(&CU) SETB  (&DE#T8(&CU)) -    SET  "TMC"  DEFAULT BYTE 8.
.*
         AIF   (&CU LT 8).LOP#20 -LOOP THRU ALL COUNTERS.
.*
&CU      SETA  1 -                SET INDEX COUNTER.
.*
.LOP#21  ANOP
         AIF   (N'&TECUR EQ 1).BY#TAL -BYPASS ADDITIONS.
&CU      SETA  &CU+1
&TEK     SETC  '&TECUR(&CU)'
&X       SETA  K'&TECUR(&CU)-1
&KEY     SETC  '&TEK'(2,&X)
.*
&DEFAT   SETB  1
         AGO   .SET#TET
.RET#DET ANOP
&DEFAT   SETB  0
.*
         AIF   (&CU LT &NU).LOP#21 - LOOP THRU ALL PARAMETERS.
.*
.*
.**********************************************************************
.*
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.BY#TEC  ANOP
.*
.*         ***********************************************
.*         ***  D S N B   F U N C T I O N   C O D E S  ***
.*         ***********************************************
.*
&FIEL    SETC  'DUNCT'
         AIF   (T'&DUNCT EQ 'O').OM#FUD -  HAS PARAMETER BEEN ENTERED?
         AIF   ('&DUNCT' NE '   ').GO#FUD -HAVE BLANKS BEEN ENTERED?
.*
.**********************************************************************
.*
.OM#FUD  ANOP
         AIF   (NOT &DEF#RUN).CH#FUD - IS THIS A DEFAULT GEN?
&FUD     SETA  0 -                 SET DEFAULT TO ZERO.
         AGO   .BY#DUN -           BYPASS FUNCTIONS.
.*
.CH#FUD  ANOP
         AIF   (NOT &DF).PR#FUD - BRANCH TO PRINT IF NO DEFAULT.
.*
.SET#FUD ANOP
&FUD     SETA  &DE#FUD -           SET DEFAULT VALUE.
         AGO   .BY#DUN -           BYPASS INQUIRY.
.*
.PR#FUD  ANOP
         AIF   (&SECO).BY#DUN -   IS THIS A MULTIPE GEN?
.*
         AGO   .MIS#PAR -        BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.GO#FUD  ANOP
         AIF   ('&DUNCT'(1,1) EQ '(').GO#FUD1
.*
.**********************************************************************
.*
         AGO   .NO#PAR -          BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.GO#FUD1 ANOP
&NU      SETA  N'&DUNCT -         GET TOTAL NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                INITIALIZE COUNTER.
&FUD     SETA  0 -                INITIALIZE INTERNAL FLAG.
.*
.LOP#22  ANOP
&CU      SETA  &CU+1 -            INCREMENT TO NEXT SUB PARAMETER.
&TES     SETC  '&DUNCT(&CU)' -    GET VALUE OF SUB PARAMETER.
.*
         AIF   ('&TES' EQ 'DEF').FUDF -    IS THIS A DEFAULT ENTRY?
         AIF   ('&TES' EQ 'DEL').FUDD -    IS THIS A DELETE ENTRY?
         AIF   ('&TES' EQ 'ADD').FUDA -    IS THIS A ADD ENTRY?
         AIF   ('&TES' EQ 'EXT').FUDE -    IS THIS A EXTEND ENTRY?
         AIF   ('&TES' EQ 'EXP').FUDX -    IS THIS A EXPIRE ENTRY?
         AIF   ('&TES' EQ 'BLK').FUDB - IS THIS NO VALID FUNCTION 40333
.*
.**********************************************************************
.*
         AGO   .INV#PAR -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.FUDF    ANOP
&FUD     SETA  &DE#FUD -          SET  "DEFAULT"  IN THE INTERNAL FLAG.
         AGO   .FUD#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUDD    ANOP
         AIF   (&D#DEL).DUP#FUD - WAS THERE A DUPLICATE ENTRY?
&D#DEL   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUD     SETA  &FUD+8 -           SET HEX  "08"  IN THE INTERNAL FLAG.
         AGO   .FUD#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUDA    ANOP
         AIF   (&D#ADD).DUP#FUD - WAS THERE A DUPLICATE ENTRY?
&D#ADD   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUD     SETA  &FUD+4 -           SET HEX  "04"  IN THE INTERNAL FLAG.
         AGO   .FUD#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUDE    ANOP
         AIF   (&D#EXT).DUP#FUD - WAS THERE A DUPLICATE ENTRY?
&D#EXT   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUD     SETA  &FUD+2 -           SET HEX  "02"  IN THE INTERNAL FLAG.
         AGO   .FUD#01 -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.FUDX    ANOP
         AIF   (&D#EXP).DUP#FUD - WAS THERE A DUPLICATE ENTRY?
&D#EXP   SETB  1 -                SET BY-PASS SWITCH.
.*
&FUD     SETA  &FUD+1 -           SET HEX  "01"  IN THE INTERNAL FLAG.
         AGO   .FUD#01 -          BRANCH TO CONTINUE.
.*
.FUDB    ANOP                                                     40333
         AIF   (&D#BLK).DUP#FUD - WAS THERE A DUPLICATE ENTRY     40333
&D#BLK   SETB  1 -                SET BYPASS SWITCH               40333
&FUD     SETA  0 -                SET NO VALID FUNCTION           40333
         AGO   .SETDONE                                           40333
.*                                                                40333
.**********************************************************************
.*
.DUP#FUD ANOP
         SPACE 3
* *********************************************
         MNOTE 8,'YOU ALREADY ENTERED  "&TES"  FOR THE'
         MNOTE *,'   SYMBOLIC PARAMETER CALLED "DUNCT".'
* *********************************************
         SPACE 3
.*
.**********************************************************************
.*
.FUD#01   ANOP
         AIF   ('&CU' NE '&NU').LOP#22 -   ARE THERE ANY MORE ENTRIES?
.*
.SETDONE ANOP                                                     40333
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.BY#DUN  ANOP
.*
.*         ***********************************************
.*         ***  D S N B   S E C U R I T Y   C O D E S  ***
.*         ***********************************************
.*
&FIEL    SETC  'DECUR'
&MAX     SETC  '256'
&ENT     SETA  K'&DECUR
&TAI     SETC  'DSNB' -           SET TYPE CODE.
.*
&CU      SETA  0 -                 INITIALIZE INDEX COUNTER.
.*
.LOP#23  ANOP
&CU      SETA  &CU+1 -             INCREMENT INDEX COUNTER.
&D1(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&D2(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&D3(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&D4(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&D5(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&D6(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&D7(&CU) SETB  0 -                 CLEAR BITS BUCKET.
&D8(&CU) SETB  0 -                 CLEAR BITS BUCKET.
.*
         AIF   (&CU LT 8).LOP#23
.*
         AIF   (K'&DECUR GT 256).PAR#LON -  BRANCH IF MORE THAN 256.
         AIF   (T'&DECUR EQ 'O').OM#SED -  HAS PARAMETER BEEN ENTERED?
         AIF   ('&DECUR' NE '   ').GO#SED -HAVE BLANKS BEEN ENTERED?
.*
.**********************************************************************
.*
.OM#SED  ANOP
         AIF   (&SECO).BY#DEC -   IS THIS A MULTIPLE GEN?
         AIF   (&DT).BY#DEC -     HAS UPDATE ALREADY ENTERED?
.*
         AGO   .MIS#PAR -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.GO#SED  ANOP
         AIF   ('&DECUR'(1,1) NE '(').NO#PAR
&NU      SETA  N'&DECUR -         GET NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
&TAB     SETA  2 -                SET TABLE NUMBER.
.*
         AIF   ('&DECUR(1)' EQ 'ALL').GEN#ALD -  ARE WE GENING ALL?
         AIF   ('&DECUR(1)' EQ 'DEF').GEN#DED - ARE WE GENING DEFAULT?
         AIF   ('&DECUR(1)' EQ 'BLK').BY#DAL - ARE WE GENING NONE 40333
.*
.**********************************************************************
.*
.LOP#24  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&KEY     SETC  '&DECUR(&CU)' -    GET CURRENT KEYWORD.
.*
.SET#DED ANOP
.*
         KTBBLD FND,&TAB,&KEY -   GO FIND SECURITY VALUES.
.*
         AIF   (NOT &KTBER).VAL#KED - WAS THIS A VALID KEYWORD?
.*
.**********************************************************************
.*
         AGO   .BAD#KEY -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.VAL#KED ANOP
&BIT     SETA  &KTBBIT -          GET BIT NUMBER
         AIF   (&KTBBYT EQ 1).BYTE#1D -
         AIF   (&KTBBYT EQ 2).BYTE#2D -
         AIF   (&KTBBYT EQ 3).BYTE#3D -
         AIF   (&KTBBYT EQ 4).BYTE#4D -
         AIF   (&KTBBYT EQ 5).BYTE#5D -
         AIF   (&KTBBYT EQ 6).BYTE#6D -
         AIF   (&KTBBYT EQ 7).BYTE#7D -
         AIF   (&KTBBYT EQ 8).BYTE#8D -
.*
.**********************************************************************
.*
         AGO   .BAD#SEC -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.BYTE#1D ANOP
&D1(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.BYTE#2D ANOP
&D2(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.BYTE#3D ANOP
&D3(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.BYTE#4D ANOP
&D4(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.BYTE#5D ANOP
&D5(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.BYTE#6D ANOP
&D6(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.BYTE#7D ANOP
&D7(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.BYTE#8D ANOP
&D8(&BIT) SETB 1 -                SET SECURITY BIT.
         AGO   .SEC#COD -         BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.SEC#COD ANOP
         AIF   (&DEFAD).RET#DED - BRANCH IF DEFAULT.
.*
         AIF   (&CU LT &NU).LOP#24 LOOP THRU ALL SUB ENTRIES.
.*
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
         AGO   .BY#DEC            GO TO NEXT ROUTINE.
.*
.**********************************************************************
.*
.GEN#ALD ANOP
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
&NUM     SETA  0 -                INITIALIZE # OF KEYWORDS COUNTER.
&FIEL    SETC  'DSNB'             SET FIELD NAME.
.*
.LOP#25  ANOP
         AIF   (&KTBAX02 EQ 0).NO#KEY - HAVE WE ANY KEYWORDS IN TABLE?
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D1(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#25 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#26  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D2(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#26 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#27  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D3(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#27 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#28  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D4(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#28 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#29  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D5(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#29 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#30  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D6(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#30 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#31  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D7(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#31 -        LOOP FOR ALL 8 BITS.
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#32  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&NUM     SETA  &NUM+1 -           INCREMENT NUMBER OF KEYWORDS COUNTER.
&D8(&CU) SETB  1 -                SET BIT IN BYTE 1.
.*
         AIF   (&NUM EQ &KTBAX02).DAL#SET - BRANCH IF ALL BITS SET.
         AIF   (&CU LT 8).LOP#32 -        LOOP FOR ALL 8 BITS.
.*
.**********************************************************************
.*
.DAL#SET ANOP
         AIF   (N'&DECUR EQ 1).BY#DAL -BRANCH TO BY PASS ADDITION.
&CU      SETA  1 -                 INITIALIZE INDEX COUNTER.
.*
.LOP#33  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&TEK     SETC  '&DECUR(&CU)' -    GET CURRENT KEYWORD.
&X       SETA  K'&DECUR(&CU)-1 -     GET NUMBER OF CHARACTERS MINUS 1.
&KEY     SETC  '&TEK'(2,&X) -     GET CURRENT KEYWORD.
.*
         KTBBLD FND,&TAB,&KEY -   GO FIND SECURITY VALUES.
.*
         AIF   (NOT &KTBER).VAL#KDA - WAS THIS A VALID KEYWORD?
.*
.**********************************************************************
.*
         AGO   .BAD#KEY -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.*
.VAL#KDA ANOP
&BIT     SETA  &KTBBIT -          GET BIT NUMBER
         AIF   (&KTBBYT EQ 1).YTE#1DA -
         AIF   (&KTBBYT EQ 2).YTE#2DA -
         AIF   (&KTBBYT EQ 3).YTE#3DA -
         AIF   (&KTBBYT EQ 4).YTE#4DA -
         AIF   (&KTBBYT EQ 5).YTE#5DA -
         AIF   (&KTBBYT EQ 6).YTE#6DA -
         AIF   (&KTBBYT EQ 7).YTE#7DA -
         AIF   (&KTBBYT EQ 8).YTE#8DA -
.*
.**********************************************************************
.*
         AGO   .BAD#SEC -         BRANCH TO ERROR MESSAGE.
.*
.**********************************************************************
.*
.YTE#1DA ANOP
&D1(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.YTE#2DA ANOP
&D2(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.YTE#3DA ANOP
&D3(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.YTE#4DA ANOP
&D4(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.YTE#5DA ANOP
&D5(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.YTE#6DA ANOP
&D6(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.YTE#7DA ANOP
&D7(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.YTE#8DA ANOP
&D8(&BIT) SETB 0 -                SET SECURITY BIT.
         AGO   .SEC#CDA -         BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.SEC#CDA ANOP
         AIF   (&CU LT &NU).LOP#33 LOOP THRU ALL SUB ENTRIES.
.*
.BY#DAL  ANOP
&ONE#DE  SETB  1 -                SET INDICATOR "AT LEAST 1" DETAIL.
         AGO   .BY#DEC -          BRANCH TO CONTINUE.
.*
.**********************************************************************
.*
.GEN#DED ANOP
&NU      SETA  N'&DECUR -         GET NUMBER OF SUB PARAMETERS.
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
&TAB     SETA  2 -                SET TABLE NUMBER.SET
.*
.LOP#34  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&D1(&CU) SETB  (&DE#D1(&CU)) -    SET  "DSNB"  DEFAULT BYTE 1.
&D2(&CU) SETB  (&DE#D2(&CU)) -    SET  "DSNB"  DEFAULT BYTE 2.
&D3(&CU) SETB  (&DE#D3(&CU)) -    SET  "DSNB"  DEFAULT BYTE 3.
&D4(&CU) SETB  (&DE#D4(&CU)) -    SET  "DSNB"  DEFAULT BYTE 4.
&D5(&CU) SETB  (&DE#D5(&CU)) -    SET  "DSNB"  DEFAULT BYTE 5.
&D6(&CU) SETB  (&DE#D6(&CU)) -    SET  "DSNB"  DEFAULT BYTE 6.
&D7(&CU) SETB  (&DE#D7(&CU)) -    SET  "DSNB"  DEFAULT BYTE 7.
&D8(&CU) SETB  (&DE#D8(&CU)) -    SET  "DSNB"  DEFAULT BYTE 8.
.*
         AIF   (&CU LT 8).LOP#34 -LOOP THRU ALL COUNTERS.
.*
&CU      SETA  1 -                SET INDEX COUNTER.
.*
.LOP#35  ANOP
         AIF   (N'&DECUR EQ 1).BY#DAL -BRANCH TO BY PASS ADDITION.
&CU      SETA  &CU+1
&TEK     SETC  '&DECUR(&CU)'
&X       SETA  K'&DECUR(&CU)-1
&KEY     SETC  '&TEK'(2,&X)
.*
&DEFAD   SETB  1
         AGO   .SET#DED
.RET#DED ANOP
&DEFAD   SETB  0
.*
         AIF   (&CU LT &NU).LOP#35 - LOOP THRU ALL PARAMETERS.
         MEXIT
.*
.**********************************************************************
.BY#DEC  ANOP
         MEXIT
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.*
.*               *************************************
.*               ***  G E N E R A T E   E N T R Y  ***
.*               *************************************
.*
.SET#FIN ANOP
         AIF   (&DEF#RUN).GEN#DEF - BRANCH IF DEFAULT GEN?
.*
&GRO     SETA  &GRO+1 -            INCREMENT NUMBER OF SECTIONS.
         AIF   (&ONE#PA).CH#DET - HAS AT LEAST 1 PASSWORD BEEN ENTERED?
.*
         SPACE 3
* ****************************************************
         MNOTE 8,'YOU ENTERED A  "FINIS"  STATEMENT BEFORE YOU'
         MNOTE *,'       ENTERED ANY PASSWORD STATEMENTS.'
* ****************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.CH#DET  ANOP
         AIF   (&ONE#DE).CH#BAT - HAS AT LEAST 1 DETAIL BEEN ENTERED?
.*
         SPACE 3
* ****************************************************
         MNOTE 8,'YOU ENTERED A  "FINIS"  STATEMENT BEFORE YOU'
         MNOTE *,'        ENTERED ANY DETAIL STATEMENTS.'
* ****************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.CH#BAT  ANOP
&CU      SETA  0 -                SET INDEX COUNTER TO ZERO.
&SYMB    SETC  '&TI2'.'&SYSNDX' - GET CURRENT SYSTEM BATCH NUMBER.
&SYMD    SETC  '&TI3'.'&SYSNDX' - GET CURRENT SYSTEM DETAIL NUMBER.
.*
.**********************************************************************
.*
         SPACE 1
***********************************************************************
         EJECT
***********************************************************************
         SPACE 1
.*
.**********************************************************************
.*
         SPACE 1
         AIF   (&NU#B EQ 0).GO#DET1 - IS THERE ANY BATCH INFORMATION?
&TI2&SYS DS    0H
         DC    CL6'TYPE 2' -      TYPE  "2"  SECTION.
         DC    AL2(00) -          NUMBER OF ENTRIES IN BATCH SECTION.
         SPACE 1
.*
.**********************************************************************
.*
         SPACE 1
LE&SYMB  EQU   *-&TI2&SYS-8 -     TOTAL LENGTH OF SECTION.
NU&SYMB  EQU   LE&SYMB/8 -        TOTAL NUMBER OF ENTRIES.
         SPACE 1
         ORG   &TI2&SYS+6 -
         DC    AL2(NU&SYMB) -     TOTAL NUMBER OF ENTRIES.
         ORG
.*
.**********************************************************************
.*
         SPACE 1
.GO#DET1 ANOP
.*
.**********************************************************************
.*
&TI3&SYS DS    0H
         DC    CL6'TYPE 3' -      TYPE  "3"  SECTION.
         DC    AL2(LE&SYMD-&TI3&SYS) - LENGTH OF DETAIL SECTION.
         SPACE 1
         DC    XL1'&INQ' -        TYPE(S) OF INQUIRY.
         DC    XL1'&UPD' -        TYPE(S) OF UPDATE.
         SPACE 1
.*
.**********************************************************************
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#37  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
         DC    AL2(&DIST(&CU)) -  DISPLACEMENT INTO FIELD.
         DC    XL1'&SEFT(&CU)' -  SECURITY BYTE.
         DC    XL1'&SEBT(&CU)' -  SECURITY BIT.
         DC    AL2(&LENT(&CU)) -  LENGTH OF COMPARE.
         DC    CL8'&LOWT(&CU)' -  LOW COMPARE.
         DC    CL8'&HGHT(&CU)' -  HIGH COMPARE.
         SPACE 1
.*
         AIF   (&CU LT 5).LOP#37 -HAVE 5 ENTRIES BEEN PROCESSED?
.*
.**********************************************************************
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
.*
.LOP#38  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
         DC    AL2(&DISD(&CU)) -  DISPLACEMENT INTO FIELD.
         DC    XL1'&SEFD(&CU)' -  SECURITY BYTE.
         DC    XL1'&SEBD(&CU)' -  SECURITY BIT.
         DC    AL2(&LEND(&CU)) -  LENGTH OF COMPARE.
         DC    CL8'&LOWD(&CU)' -  LOW COMPARE.
         DC    CL8'&HGHD(&CU)' -  HIGH COMPARE.
         SPACE 1
.*
         AIF   (&CU LT 5).LOP#38 -HAVE ALL 5 ENTRIES BEEN PROCESSED?
.*
.**********************************************************************
.*
         DC    AL1(&FUT) -        "TMC" FUNCTIONS.
         DS    0XL8 -             "TMC" SECURITY BYTES.
         DC    BL1'&T1(1)&T1(2)&T1(3)&T1(4)&T1(5)&T1(6)&T1(7)&T1(8)'
         DC    BL1'&T2(1)&T2(2)&T2(3)&T2(4)&T2(5)&T2(6)&T2(7)&T2(8)'
         DC    BL1'&T3(1)&T3(2)&T3(3)&T3(4)&T3(5)&T3(6)&T3(7)&T3(8)'
         DC    BL1'&T4(1)&T4(2)&T4(3)&T4(4)&T4(5)&T4(6)&T4(7)&T4(8)'
         DC    BL1'&T5(1)&T5(2)&T5(3)&T5(4)&T5(5)&T5(6)&T5(7)&T5(8)'
         DC    BL1'&T6(1)&T6(2)&T6(3)&T6(4)&T6(5)&T6(6)&T6(7)&T6(8)'
         DC    BL1'&T7(1)&T7(2)&T7(3)&T7(4)&T7(5)&T7(6)&T7(7)&T7(8)'
         DC    BL1'&T8(1)&T8(2)&T8(3)&T8(4)&T8(5)&T8(6)&T8(7)&T8(8)'
         SPACE 1
         DC    AL1(&FUD) -        "DSNB" FUNCTIONS.
         DS    0XL8 -             "DSNB" SECURITY BYTES.
         DC    BL1'&D1(1)&D1(2)&D1(3)&D1(4)&D1(5)&D1(6)&D1(7)&D1(8)'
         DC    BL1'&D2(1)&D2(2)&D2(3)&D2(4)&D2(5)&D2(6)&D2(7)&D2(8)'
         DC    BL1'&D3(1)&D3(2)&D3(3)&D3(4)&D3(5)&D3(6)&D3(7)&D3(8)'
         DC    BL1'&D4(1)&D4(2)&D4(3)&D4(4)&D4(5)&D4(6)&D4(7)&D4(8)'
         DC    BL1'&D5(1)&D5(2)&D5(3)&D5(4)&D5(5)&D5(6)&D5(7)&D5(8)'
         DC    BL1'&D6(1)&D6(2)&D6(3)&D6(4)&D6(5)&D6(6)&D6(7)&D6(8)'
         DC    BL1'&D7(1)&D7(2)&D7(3)&D7(4)&D7(5)&D7(6)&D7(7)&D7(8)'
         DC    BL1'&D8(1)&D8(2)&D8(3)&D8(4)&D8(5)&D8(6)&D8(7)&D8(8)'
.*
.**********************************************************************
.*
         SPACE 1
LE&SYMD  DS    0C -               GENERATE END OF SECTION.
         SPACE 1
***********************************************************************
         EJECT
***********************************************************************
.*
&DF      SETB  0 -                TURN OFF  "DEFAULT"  SWITCH.
&DT      SETB  0 -                TURN OFF  "DETAIL"  SWITCH.
.*
&ONE#PA  SETB  0 -                TURN OFF  "AT LEAST 1"  SWITCH.
&ONE#DE  SETB  0 -                TURN OFF  "AT LEAST 1"  SWITCH.
.*
&INQ     SETA  0 -                CLEAR  "TYPE OF INQUIRY"  SWITCH.
&UPD     SETA  0 -                CLEAR  "TYPE OF UPDATE"  SWITCH.
.*
.**********************************************************************
.*
         MEXIT
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.GEN#DEF ANOP
.*
.*               *****************************************
.*               ***  G E N E R A T E   D E F A U L T  ***
.*               *****************************************
.*
&DEF#RUN SETB  0 -                 TURN DEFAULT RUN INDICATOR.
&DE#INQ  SETA  &INQ -              SET DEFAULT INQUIRY VALUE.
&DE#UPD  SETA  &UPD -              SET DEFAULT UPDATE VALUE.
.*
&CU      SETA  0 -                 INITIALIZE INDEX COUNTER.
.*
.LOP#39  ANOP
&CU      SETA  &CU+1 -             INCREMENT INDEX COUNTER.
&DE#DIST(&CU) SETA &DIST(&CU)
&DE#SEFT(&CU) SETA &SEFT(&CU)
&DE#SEBT(&CU) SETA &SEBT(&CU)
&DE#LENT(&CU) SETA &LENT(&CU)
&DE#LOWT(&CU) SETC '&LOWT(&CU)'
&DE#HGHT(&CU) SETC '&HGHT(&CU)'
.*
         AIF   (&CU LT 5).LOP#39
.*
.**********************************************************************
.*
&CU      SETA  0 -                 INITIALIZE INDEX COUNTER.
.*
.LOP#40  ANOP
&CU      SETA  &CU+1 -             INCREMENT INDEX COUNTER.
&DE#DISD(&CU) SETA &DISD(&CU)
&DE#SEFD(&CU) SETA &SEFD(&CU)
&DE#SEBD(&CU) SETA &SEBD(&CU)
&DE#LEND(&CU) SETA &LEND(&CU)
&DE#LOWD(&CU) SETC '&LOWD(&CU)'
&DE#HGHD(&CU) SETC '&HGHD(&CU)'
.*
         AIF   (&CU LT 5).LOP#40
.*
.**********************************************************************
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
&DE#FUT  SETA  &FUT -             SET DEFAULT VALUE FOR FUNCTIONS.
.*
.LOP#41  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&DE#T1(&CU) SETB  (&T1(&CU)) -    SET  "TMC"  DEFAULT BYTE 1.
&DE#T2(&CU) SETB  (&T2(&CU)) -    SET  "TMC"  DEFAULT BYTE 2.
&DE#T3(&CU) SETB  (&T3(&CU)) -    SET  "TMC"  DEFAULT BYTE 3.
&DE#T4(&CU) SETB  (&T4(&CU)) -    SET  "TMC"  DEFAULT BYTE 4.
&DE#T5(&CU) SETB  (&T5(&CU)) -    SET  "TMC"  DEFAULT BYTE 5.
&DE#T6(&CU) SETB  (&T6(&CU)) -    SET  "TMC"  DEFAULT BYTE 6.
&DE#T7(&CU) SETB  (&T7(&CU)) -    SET  "TMC"  DEFAULT BYTE 7.
&DE#T8(&CU) SETB  (&T8(&CU)) -    SET  "TMC"  DEFAULT BYTE 8.
.*
         AIF   (&CU LT 8).LOP#41 -LOOP THRU ALL COUNTERS.
.*
.**********************************************************************
.*
&CU      SETA  0 -                INITIALIZE INDEX COUNTER.
&DE#FUD  SETA  &FUD -             SET DEFAULT VALUE FOR FUNCTIONS.
.*
.LOP#42  ANOP
&CU      SETA  &CU+1 -            INCREMENT INDEX COUNTER.
&DE#D1(&CU) SETB  (&D1(&CU)) -    SET  "DSNB"  DEFAULT BYTE 1.
&DE#D2(&CU) SETB  (&D2(&CU)) -    SET  "DSNB"  DEFAULT BYTE 2.
&DE#D3(&CU) SETB  (&D3(&CU)) -    SET  "DSNB"  DEFAULT BYTE 3.
&DE#D4(&CU) SETB  (&D4(&CU)) -    SET  "DSNB"  DEFAULT BYTE 4.
&DE#D5(&CU) SETB  (&D5(&CU)) -    SET  "DSNB"  DEFAULT BYTE 5.
&DE#D6(&CU) SETB  (&D6(&CU)) -    SET  "DSNB"  DEFAULT BYTE 6.
&DE#D7(&CU) SETB  (&D7(&CU)) -    SET  "DSNB"  DEFAULT BYTE 7.
&DE#D8(&CU) SETB  (&D8(&CU)) -    SET  "DSNB"  DEFAULT BYTE 8.
.*
         AIF   (&CU LT 8).LOP#42 -LOOP THRU ALL COUNTERS.
.*
         MEXIT
.*
.**********************************************************************
.*                            * * * * *
.*                             * * * *
.*                              * * *
.*                               * *
.SEC#DEX ANOP
         SPACE 1
*      *********************************************************
*      ***  D S E C T   F O R   U C C - 1   S E C U R I T Y  ***
*      *********************************************************
         SPACE 1
.*
.**********************************************************************
.*
         AIF   ('&DSECT' EQ 'YES').GO#SEC
SEDSEC   DS    0H
         AGO   .BY#DEX
.*
.**********************************************************************
.*
.GO#SEC  ANOP
SEDSEC   DSECT
.*
.**********************************************************************
.*
.BY#DEX  ANOP
         SPACE 1
SENAM    DS    CL6 -              TYPE NAME.
SELEN    DS    AL2 -              LENGTH OF SECTION.
         SPACE 1
SEINQ    DS    XL1 -              TYPE OF INQUIRY.
*                                      01 - TMC.
*                                      02 - DSNB.
*                                      04 - CTL.
         SPACE 1
SEUPD    DS    XL1 -              TYPE OF UPDATE.
*                                      01 - TMC.
*                                      02 - DSNB.
*                                      04 - CTL.
         SPACE 1
SETM1    DS    0XL22 -            VALUE #1 FOR MATCH AGAINST  "TMC".
SETM1DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SETM1SF  DS    XL1 -                 SECURITY BYTE.
SETM1SB  DS    XL1 -                 SECURITY BIT.
SETM1LE  DS    AL2 -                 LENGTH OF COMPARE.
SETM1LO  DS    CL8 -                 LOW COMPARE.
SETM1HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
SETM2    DS    0XL22 -            VALUE #2 FOR MATCH AGAINST  "TMC".
SETM2DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SETM2SF  DS    XL1 -                 SECURITY BYTE.
SETM2SB  DS    XL1 -                 SECURITY BIT.
SETM2LE  DS    AL2 -                 LENGTH OF COMPARE.
SETM2LO  DS    CL8 -                 LOW COMPARE.
SETM2HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
***********************************************************************
         EJECT
***********************************************************************
         SPACE 1
*      *********************************************************
*      ***  D S E C T   F O R   U C C - 1   S E C U R I T Y  ***
*      ***                 C O N T I N U E D                 ***
*      *********************************************************
         SPACE 1
SETM3    DS    0XL22 -            VALUE #3 FOR MATCH AGAINST  "TMC".
SETM3DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SETM3SF  DS    XL1 -                 SECURITY BYTE.
SETM3SB  DS    XL1 -                 SECURITY BIT.
SETM3LE  DS    AL2 -                 LENGTH OF COMPARE.
SETM3LO  DS    CL8 -                 LOW COMPARE.
SETM3HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
SETM4    DS    0XL22 -            VALUE #4 FOR MATCH AGAINST  "TMC".
SETM4DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SETM4SF  DS    XL1 -                 SECURITY BYTE.
SETM4SB  DS    XL1 -                 SECURITY BIT.
SETM4LE  DS    AL2 -                 LENGTH OF COMPARE.
SETM4LO  DS    CL8 -                 LOW COMPARE.
SETM4HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
SETM5    DS    0XL22 -            SPECIAL VALUE FOR MATCH WITH  "TMC".
SETM5DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SETM5SF  DS    XL1 -                 SECURITY BYTE.
SETM5SB  DS    XL1 -                 SECURITY BIT.
SETM5LE  DS    AL2 -                 LENGTH OF COMPARE.
SETM5LO  DS    CL8 -                 LOW COMPARE.
SETM5HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
SEDS1    DS    0XL22 -            VALUE #1 FOR MATCH AGAINST  "DSNB".
SEDS1DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SEDS1SF  DS    XL1 -                 SECURITY BYTE.
SEDS1SB  DS    XL1 -                 SECURITY BIT.
SEDS1LE  DS    AL2 -                 LENGTH OF COMPARE.
SEDS1LO  DS    CL8 -                 LOW COMPARE.
SEDS1HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
***********************************************************************
         EJECT
***********************************************************************
         SPACE 1
*      *********************************************************
*      ***  D S E C T   F O R   U C C - 1   S E C U R I T Y  ***
*      ***                 C O N T I N U E D                 ***
*      *********************************************************
         SPACE 1
SEDS2    DS    0XL22 -            VALUE #2 FOR MATCH AGAINST  "DSNB".
SEDS2DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SEDS2SF  DS    XL1 -                 SECURITY BYTE.
SEDS2SB  DS    XL1 -                 SECURITY BIT.
SEDS2LE  DS    AL2 -                 LENGTH OF COMPARE.
SEDS2LO  DS    CL8 -                 LOW COMPARE.
SEDS2HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
SEDS3    DS    0XL22 -            VALUE #3 FOR MATCH AGAINST  "DSNB".
SEDS3DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SEDS3SF  DS    XL1 -                 SECURITY BYTE.
SEDS3SB  DS    XL1 -                 SECURITY BIT.
SEDS3LE  DS    AL2 -                 LENGTH OF COMPARE.
SEDS3LO  DS    CL8 -                 LOW COMPARE.
SEDS3HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
SEDS4    DS    0XL22 -            VALUE #4 FOR MATCH AGAINST  "DSNB".
SEDS4DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SEDS4SF  DS    XL1 -                 SECURITY BYTE.
SEDS4SB  DS    XL1 -                 SECURITY BIT.
SEDS4LE  DS    AL2 -                 LENGTH OF COMPARE.
SEDS4LO  DS    CL8 -                 LOW COMPARE.
SEDS4HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
SEDS5    DS    0XL22 -            SPECIAL VALUE FOR MATCH WITH "DSNB".
SEDS5DS  DS    AL2 -                 DISPLACEMENT INTO FIELD.
SEDS5SF  DS    XL1 -                 SECURITY BYTE.
SEDS5SB  DS    XL1 -                 SECURITY BIT.
SEDS5LE  DS    AL2 -                 LENGTH OF COMPARE.
SEDS5LO  DS    CL8 -                 LOW COMPARE.
SEDS5HI  DS    CL8 -                 HIGH COMPARE.
         SPACE 1
***********************************************************************
         EJECT
***********************************************************************
         SPACE 1
*      *********************************************************
*      ***  D S E C T   F O R   U C C - 1   S E C U R I T Y  ***
*      ***                 C O N T I N U E D                 ***
*      *********************************************************
         SPACE 1
SETMFU   DS    XL1 -              VALUE FOR  "TMC"  FUNCTION.
*                                      01 - EXPIRE.
*                                      02 - EXTEND.
*                                      04 - ADD.
*                                      08 - DELETE.
*                                      10 - CHECKIN.
*                                      20 - CLEANED.
SETMSEC  DS    XL8 -              VALUE FOR  "TMC"  SECURITY BYTES.
         SPACE 1
SEDSFU   DS    XL1 -              VALUE FOR  "DSNB"  FUNCTION.
*                                      01 - EXPIRE.
*                                      02 - EXTEND.
*                                      04 - ADD.
*                                      08 - DELETE.
SEDSSEC  DS    XL8 -              VALUE FOR  "DSNB"  SECURITY BYTES.
         MEXIT
.*
.**********************************************************************
.*
.INV#PAR ANOP
         SPACE 3
* **********************************************************
         MNOTE 8,'YOU ENTERED  "&TES"  WHICH IS AN INVALID'
         MNOTE *,'MNEMONIC FOR THE SYMBOLIC PARAMETER CALLED "&FIEL".'
* **********************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.MIS#PAR ANOP
         SPACE 3
* **********************************************************
         MNOTE 8,'YOU MUST ENTER A VALUE FOR THE PARAMETER  "&FIEL" .'
* **********************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.BAD#KEY ANOP
         SPACE 3
* *********************************************
         MNOTE 8,'YOU ENTERED  "&KEY",  WHICH IS NOT IN'
         MNOTE *,'     YOUR  "&TAI"  KEYWORD TABLE.'
* *********************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.BAD#SEC ANOP
         SPACE 3
* ************************************************
         MNOTE 8,'YOU RETURN FROM THE  "BUILD MACRO"  WITH'
         MNOTE *,'SECURITY BYTE = &KTBBYT, WHICH IS AN'
         MNOTE *,'          INVALID BYTE NUMBER.'
* ************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.NO#PAR  ANOP
         SPACE 3
* ****************************************************
         MNOTE 8,'YOU MUST ENCLOSE THE VALUE FOR THE SYMBOLIC '
         MNOTE *,'   PARAMETER CALLED "&FIEL" IN PARENTHESIS.'
* ****************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.PAR#LON ANOP
         SPACE 3
* ***************************************************
         MNOTE 8,'YOU ENTERED  "&ENT"  CHARACTERS IN THE'
         MNOTE *,'SYMBOLIC PARAMETER CALLED  "&FIEL"  AND THE'
         MNOTE *,'              LIMIT IS  "&MAX".'
* ***************************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.NO#KEY  ANOP
         SPACE 3
* ********************************************
         MNOTE 8,'YOU HAVE NO KEYWORDS IN THE "&FIEL" '
         MNOTE *,'   SECTION OF YOUR KEYWORD TABLE. '
* ********************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.NOT#ENO ANOP
         SPACE 3
* **********************************************
         MNOTE 8,'YOU ENTERED EITHER TOO MANY OR TOO FEW'
         MNOTE *,'POSITIONAL PARAMETERS IN THE SYMBOLIC'
         MNOTE *,'          PARAMETER  "&FIEL".'
* **********************************************
         SPACE 3
         MEXIT
.*
.**********************************************************************
.*
.NOT#COM ANOP
         SPACE 3
* ************************************************
         MNOTE 8,'IN THE SYMBOLIC PARAMETER "&FIEL" THE'
         MNOTE *,'LENGTH OF THE LOW VALUE FIELD IS NOT THE'
         MNOTE *,'   SAME LENGTH AS THE HIGH VALUE FIELD.'
* ************************************************
         SPACE 3
.*
.*
         MEND
