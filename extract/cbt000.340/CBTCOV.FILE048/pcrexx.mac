./ ADD NAME=FINDUPLD                               15SEP93 16.03 --
/* ---------------------- OS/2 Rexx Procedure ---------------------- *
 * Name:       Findupld.cmd                                          *
 *                                                                   *
 * Function:   The purpose of this rexx procedure is to process the  *
 *             README.TXT file on the softcopy cdrom's and extract   *
 *             a list of all new or revised softcopy publications.   *
 *                                                                   *
 * Logic:      1.  Determine the drive for the cdrom                 *
 *             2.  Read in the README.TXT for that cdrom             *
 *             3.  Process for | in column 1 and 4                   *
 *                 check for non-blank in column 2                   *
 *                 extract type (BookShelf, Bookshelf Index, Book)   *
 *                 and then extract the filename.                    *
 *             4.  Query user for selection of shelf                 *
 *             5.  Create file with IND$FILE style SEND comamnds to  *
 *                 send the files to an MVS Host ind$upld.txt        *
 *                 Also ind$upd2.txt to send all but shelves         *
 *             6.  Create file with FTP style commands to send the   *
 *                 files using tcp/ip ftp:  ftpupld.txt              *
 *                 Also ftpupld2.txt to send all but shelves         *
 *             7.  Create file with each file name and description   *
 *                 upload.lst                                        *
 *             8.  Create a file of 'obsolete' files of the format   *
 *                 'previous name'  'current name'                   *
 *                  (if code is revised)                             *
 * ----------------------------------------------------------------- */

arg cdrom_drive userid "(" option

do while length(cdrom_drive) = 0
   Say "Enter the drive letter of your cdrom drive:"
   pull cdrom_drive
end
if length(cdrom_drive) > 1 then cdrom_drive = left(cdrom_drive,1)

do while length(userid) = 0
   say 'Enter your userid:'
   pull userid
end


if length(option) > 0 then do
   option = left(strip(translate(option)),1)
   if pos(option,"A S") = 0 then option = null
   end

do while length(option) = 0
   say "Enter Selection Option (All or Select):"
   pull option
   option = left(translate(option),1)
   if pos(option,"A S") = 0 then option = null
end

ok_read = 0

readme = cdrom_drive":\README.TXT"
if exist(readme) = 1 then ok_read = 1

if ok_read = 0 then readme = cdrom_drive":\README"
if exist(readme) = 1 then ok_read = 1

if ok_read = 0 then readme = cdrom_drive":\README.ENG"
if exist(readme) = 1 then ok_read = 1

if ok_read = 0 then do
   say 'Exiting findupld application as the readme.txt file is'
   say 'not on the specified drive' cdrom_drive':'
   exit 4
   end

Call RxFuncAdd 'SysLoadFuncs','RexxUtil','SysLoadFuncs'
Call SysLoadFuncs

saveupld    = "upload.lst"
ftp_upload  = "ftpupld.txt"
ind_upload  = "ind$upld.txt"
ftp_upload2 = "ftpupld2.txt"
ind_upload2 = "ind$upd2.txt"
revised_lst = "revised.lst"

index_book  = "abook"
index_shelf = "abook.upload"

if exist(saveupld)    then "@Erase" saveupld
if exist(ftp_upload)  then "@Erase" ftp_upload
if exist(ind_upload)  then "@Erase" ind_upload
if exist(ftp_upload2) then "@Erase" ftp_upload2
if exist(ind_upload2) then "@Erase" ind_upload2
if exist(revised_lst) then "@Erase" revised_lst

/* prime with userid for ftp */
line = userid
   call lineout ftp_upload,line
   call lineout ftp_upload2,line

/* turn on hash printing for ftp */
line = "hash"
   call lineout ftp_upload,line
   call lineout ftp_upload2,line

/* turn on send unique to prevent overlay
   of existing files */
line = "sunique"
   call lineout ftp_upload,line
   call lineout ftp_upload2,line

parse value "" with null suf name test_name
parse value '0 0 0 0 0' with books shelves indexes new revised

text. = ""
text.0 = 0

test_data =  "+--"
testl     =  length(test_data)

do until lines(readme) = 0
   c      = text.0 + 1
   text.c = linein(readme)
   text.0 = c
   end
call lineout readme

do c = 1 to text.0
   text = text.c
   textu = translate(text)

   if pos("FULL NAME:",text) > 0 then do
      parse value text with "FULL NAME:" test_name
      cx = c + 1
      test_name = test_name strip(text.cx)
      active = 0
     end

   if pos("TABLE",textu) > 0 then
      if left(text,1) = "|" then do
      parse value text with . "." test_name "|"
      test_name = strip(test_name)
      active = 0
     end

   if left(text,testl) = test_data then
      if test_name <> null then do
     say "Select shelf:" test_name
     say "Enter Y to select or anything else to skip:"
     key = SysGetKey('NoEcho')
     key = translate(key)
     if key <> "Y" then name = null
                        else name = test_name
     test_name = null
     active = 0
     end

   if name = null then iterate

   flag = left(text,1)
   if pos(flag,"|+") > 0 then flag = 1
                          else flag = 0
   If flag = 0 then if active = 0 then iterate
   if flag = 0 then if active = 1 then do
                    active = 0
                    name = null
                    iterate
                    end
   if flag = 1 then active = 1

   parse value text with "|" type "|" title "|" ,
          order "|" file "|" .

   type  = strip(type)
   title = strip(title)
   file  = strip(file)

   if file = "" then iterate
   if option <> "A" then
      if type = "" then iterate

   hit = 0
   do until hit = 1
      xc = c + 1
      if left(text.xc,3) <> "+--" then do
         parse value text.xc with "|" x "|" title2 "|" .
         title = title strip(title2)
         c = xc
         end
         else hit = 1
   end

   titleu = translate(title)

   select
     when word(titleu,1) = "TITLE" then nop
     when word(titleu,1) = "ABBREVIATED" then nop
     when wordpos("BOOKSHELF",titleu) > 0 then do
          if wordpos("INDEX",titleu) > 0 then call set_index
                                         else call set_shelf
          end
     otherwise call set_book
   end
end

line = "Totals   Books:" books  "Shelves:" shelves  "Indexes:" indexes
call lineout saveupld,line
line = "New:" new  "Revised:" revised
call lineout saveupld,line
say "Totals   Books:" books  "Shelves:" shelves  "Indexes:" indexes
say "New:" new  "Revised:" revised

call lineout saveupld
call lineout revised_lst

exit 0

set_shelf:
   suf = "bks"
   shelves = shelves + 1
   title = name
   signal set_book

set_index:
   suf = "bki"
   indexes = indexes + 1
   signal set_book

set_book:
   if suf = null then do
      suf = "boo"
      books = books + 1
      end

   do_r = 0
   Select
     When type = "N" then do
           new = new + 1
           type = "New      "
           end
     When type = "T" then do
           type = "Technical"
           do_r = 1
           end
     When type = "S" then do
           type = "Service  "
           do_r = 1
           end
     When type = "E" then do
           type = "Enhanced "
           do_r = 1
           end
     When type = null then do
           if option = "A" then do
              type = "Added "
              do_r = 1
              end
           end
     otherwise nop;
     end
   line = file"."suf"        "type  title
   call save_it
   if do_r = 1 then call do_revised
   suf = ""
   return

save_it:
   call lineout saveupld,line
   select
     when suf = "bks" then do
          sendfile = cdrom_drive":\shelves\"file"."suf
          suffix = "bkshelf"
          index  = index_shelf
          info = "Ascii crlf Recfm(vb) lrecl(256) blksize(6233)"
          call ind
          call ftpload
          end
     otherwise do
          sendfile = cdrom_drive":\books\"file"."suf
          if suf = "boo" then suffix = "book"
                         else suffix = "bkindex"
          index  = index_book
          info = "recfm(fb) lrecl(4096) blksize(8192)"
          call ind
          call ftpload
          end
     end
   return

do_revised:
   revised = revised + 1
   if right(file,3) = "MST" then return
   dash = right(file,2)
   dl = 2
   if datatype(dash) <> "NUM" then do
      dash = right(file,1)
      dl = 1
      if datatype(dash) <> "NUM" then return
      end
   if dash = 0 then return
   dash = dash -1
   fl = length(file)-dl
   old_file = index_book"."left(file,fl)""right(dash+100,2)"."suffix
   new_file = index_book"."file"."suffix
   line = old_file new_file
   call lineout revised_lst,line
   return

ind:
  line = "Send" sendfile "a:'"index"."file"."suffix"'" info
  call lineout ind_upload,line
  if suf <> "bks" then
     call lineout ind_upload2,line
  return

ftpload:
  line2 = "!echo Sending file:" sendfile "to '"index"."file"."suffix
     call lineout ftp_upload,line2
     if suf <> "bks" then
        call lineout ftp_upload2,line2
  if pos(suf,'bki boo') > 0 then do
     line = "binary"
     call lineout ftp_upload,line
     call lineout ftp_upload2,line
     line = "site recfm=fb lrecl=4096 blksize=8192 pri=300 sec=300 tr"
     call lineout ftp_upload,line
     call lineout ftp_upload2,line
     end
  else do
     line = "ascii"
     call lineout ftp_upload,line
     line = "site recfm=vb lrecl=256 blksize=6233 pri=15 sec=15 tr"
     call lineout ftp_upload,line
     end
  line = "put" sendfile "'"index"."file"."suffix"'"
  call lineout ftp_upload,line
  if suf <> "bks" then
     call lineout ftp_upload2,line
  return

Exist:
procedure
arg fn
   rc  = SysFileTree(fn,s,'B')
   return s.0 > 0
