.pa
.section 'AMDPSCAN - PRDMP Exit'
.ix 'AMDPSCAN - PRDMP Exit'
.ix PRDMP AMDPSCAN







  AAAAA   M     M  DDDDDD   PPPPPP    SSSSS    CCCCC    AAAAA   N     N
 A     A  MM   MM  D     D  P     P  S     S  C     C  A     A  NN    N
 A     A  M M M M  D     D  P     P  S        C        A     A  N N   N
 AAAAAAA  M  M  M  D     D  PPPPPP    SSSSS   C        AAAAAAA  N  N  N
 A     A  M     M  D     D  P              S  C        A     A  N   N N
 A     A  M     M  D     D  P        S     S  C     C  A     A  N    NN
 A     A  M     M  DDDDDD   P         SSSSS    CCCCC   A     A  N     N



                                User Guide
                                  SP1.3







.subsection 'Introduction'


AMDPSCAN is a  user exit for AMDPRDMP for  VS2 rel3.8 with se2.  It is
invoked by using an AMDPRDMP control card with the verb 'SCAN' on it.
    The objectives of this exit:-

     1/  To check  various  flags  bits in  the  dump  which may  have
     contributed to  the failure, but would  not have been  noticed by
     the PSCE unless he was specifically  looking for them. An example
     of this would be the 'SQA' critical bit in the GDA.

     2/ Control  block verification.  VS2 has  many queues  of control
     blocks and a symptom or cause  of system failure is frequently an
     invalid  control block  or  a  corrupted queue.   Scanning  these
     control  blocks 'manually'  would  be too  time  consuming to  be
     practical.  AMDPSCAN  scans  many   control  blocks  and  queues,
     printing error messages and leading the  PSCE to the cause of the
     problem.

*---------------------------------------------------------------------*
*                  * * *   DISCLAIMER.  * * *                         *
*    This program is intended for use by IBM PSR's analyzing dumps    *
*produced on IBM CPU's. The author will not accept any responsibility *
*for program failure to produce valid output when processing dumps    *
*from other manufacturers equipment.                                  *
*---------------------------------------------------------------------*
.pa
.subsection 'Installation'

    Before AMDPSCAN can be used, the verb SCAN must be
added to AMDPRDMP's control table, AMDPRECT.
This is done as follows:-

1) Obtain a superzap dump of AMDPRECT (normally in LINKLIB)
2) Locate the next available unused entry.
   An empty entry looks like this.....

   40404040 40404040 00000000 40404040 40404040

3) Apply the following superzap.

   name amdprect
   VER  XXXX  40404040 40404040 00000000 40404040 40404040
   REP  XXXX  C1D4C4D7 E2C3C1D5 00000000 E2C3C1D5 40404040

   This makes the verb SCAN known to AMDPRDMP.



.subsection 'Use'


   To use the dump scan feature simply code the verb SCAN
in your AMDPRDMP control cards.

   To use the feature in csect 'AMDPSLOP' to force the printing of
the 'next' 5000 instructions to be executed in a 'STANDALONE'
dump, simply locate the 'NO-OP' at offset X'D12' in 'AMDPSLOP'
and change it to an 'UNCONDITIONAL BRANCH'.
   Should the location of this 'NO-OP' change due to maintenance
to 'AMDPSLOP', the 'NO-OP' can be easily located in a 'DUMPT'
by 'eyeballing' for a constant - 'TRACE SWITCH'.

  NOTE: This facility is available....
.sp 3
.subsection 'Program Description'
.sp 1
.subsection 'Validity Checking'
.sp 2
    Validity  checking  is  performed  by   a  common  sub-routine  in
AMDPSCAN.   Addresses are  checked for  correct  boundary alignment  -
word, double-word, 4K or 64K.
    Addresses are also checked to see if they are in the right area of
virtual storage.  Storage is split up into 6 areas - PSA, NUCLEUS, the
Private  Area, CSA,  LPA  and SQA.   In  addition,  for some  validity
checking, the Private Area is further divided into LSQA and PVTUSER.
    Addresses are  checked using 'negative  logic'. If an  address of,
for example, a UCB should be in the NUCLEUS, a check is made to see if
the address is in  the PSA, the Private Area, CSA, LPA  or SQA.  If it
is, then an error is recognised. In  this way if the boundaries of for
example, the  NUCLEUS, can not  be determined at  initialization time,
address validation can still be performed although restricted.
    Note:- The PSA is not considered to be part of the NUCLEUS.

    The boundaries of 8 areas are determined as follows:-
.sp
PSA
     PSA is from location 0 to location X'FFF'
.cm  ..ulin
NUCLEUS
     The NUCLEUS  starts at  location X'1000'. Top  of the  NUCLEUS is
     determined from  the CVT  field CVTNUCB.  If this  is invalid  or
     inaccessable, the start of the Private  Area is used as the end
     of the NUCLEUS.
.cm  ..ulin
Private Area
         Start of  the Private Area is  determined from the  GDA field
     PASTRT. If  this is invalid or  inaccessable then the  address of
     the top of the NUCLEUS is used instead.
         The  top of  the Private  Area  is calculated  by adding  the
     address  of the  start  of  the Private  Area  to  the GDA  field
     PASIZE.
.cm  ..ulin
CSA
         GDA field  CSAPQEP points to the  PQE for CSA. The  PQERGN in
     the PQE is  used for the start  of CSA, and this  plus PQESIZE is
     the top of CSA.
.cm  ..ulin
LPA
         LPA in this  context is the area  between the top of  CSA and
     the bottom of SQA.
.cm  ..ulin
SQA
         The address  of the start of  SQA is taken from  the DQEBLKAD
     field in the  last DQE chained to  the SPQE for SQA.  The SPQE is
     found from the GDA field SQAPQEP.
.cm  ..ulin
LSQA
        LSQA is  mapped from DQEs  for LSQA  chained from the  LDA for
     each address space.
.cm  ..ulin
PVTUSER
        PVTUSER is that part of the Private Area that is not LSQA.
.sp 3
.subsection 'Control Block Tracing'
.sp 2
    Most control blocks  referenced are traced by a  common routine in
AMDPSCAN.   This routine  uses a  525  entry trace  table, each  entry
containing the control block address and name.
    The control block trace is printed after most errors, oldest entry
first.
    Loop checking is also performed by the trace routine, checks being
made to see if  the address being traced already appears  in the trace
table.
.sp 3
.subsub 'COMTASK Control Block Checking'
.sp 2
The following control block addresses are validity checked.

     UCM base.

     The WQEs on the system output queue chained from the UCM base.

     The OREs chained from the UCM base.

     The WQEs pointed to by the OREs.

     The UCM device entries (UCMEs).

     The CQEs chained from the UCMEs.

     The WQEs chained from the CQEs.

     The WWBs chained from the UCM base.

The following conditions are checked for.

     No consoles condition.

     All WQEs used up.

     UCMEs that  have CQE/WQEs  chained from  them. (Possible  console
     hang).

     Various flag bits in  the UCMEs that indicate work to  do for the

     Communications  Task.  See  messages  SCAN0050  to  SCAN0054  for
     details.

The messages  contained in  the WQEs  on the  system output  queue are
printed out.   This gives the console  messages that were  not printed
before the failure.

Outstanding WTOR  replies are  printed. This is  done by  printing the
text from the WQEs pointed by the OREs chained from the UCM base.
.sp 3
.subsub 'Master Trace Table'

CSECT AMDPSMTT prints  the current entries in the master trace table.
Entries are printed in console log format. i.e. oldest entry first.



.subsub 'VSM Control BLock Checking'

All SPQEs,  DQEs, FQEs,  PQEs, FBQEs  and AQEs  for CSA,  SQA and  all
address spaces are checked.

CPABs, CPABEs  and quick cells are  checked for all global  cell pools
and local SVRB cell pools.

Some fields of the GDA and all LDAs are also checked.

Checks are  also made  for SQA  critical or  SQA approaching  critical
situation, as indicated by flag bits in the GDA.
.sp 3
.subsub 'I/O Control Block Checking'

These functions  are performed by  the CSECT AMDPSUCB.   The following
control blocks are checked:-

     The UCB look-up table.

     The UCBs

     If the  Post Flag is on  in a UCB then  the chain UCB ->  IOQE ->
     IOSB -> SRB -> IOSB -> UCB is checked.

     The Logical Channel Words.

     The IOQE chains from the Logical Channel Words.

     The  IOQE ->  IOSB ->  SRB ->  IOSB ->  UCB chain  for each  IOQE

     chained from the Logical Channel Words.

     The Test Channel List pointed to by each Logical Word.

     The PCCA Vector Table. (PCCAVT)

     The PCCAs.

     The CATs (Channel Availability Tables).

For each UCB a check is made for outstanding I/O or unusual conditions
such  as DDR  swap  pending. See  messages  SCAN0150  to SCAN0170  for
details.

    NOTE:- THIS CHECKING IS NOT DONE FOR TELEPROCESSING DEVICES.

The  Channel  Availability  Tables  are checked  for  a  channel  busy
condition.
.sp 3
.subsub 'Low Core Checking'

This function is performed by CSECT AMDPSVAL.
    The following checks are made:-
 1) 1st word of each new PSW is validity
    checked against a model PSW.
 2) Address part of each new PSW within the NUCLEUS.
 3) Address part of each new PSW points at
    at the correct FLIH. Note that each FLIH is
    prefixed by its CSECT name.
 4) 1st x'10' bytes of each FLIH is validity
    checked against a model.
 5) Invalid FRR stack pointer in the
    Recovery Stack Vector Table (RSVT).
 6) The current pointer in the RSVT does
    not point to a valid FRR stack.



.subsub 'Global System Resource Checking'

This function is performed by CSECT AMDPSTAT.
    The following checks are made:-
 1) LOCK MANAGER active at the time of the dump.
 2) Global locks held. i.e. :-
          ASM lock
          IOSYNCH lock
          I/O CAT lock
          UCB lock
          I/O LCH lock
          DISPATCHER lock
          SRM lock
          SALLOC lock



.subsub 'Real Storage Manager Checking'

This function is performed by CSECT AMDPSPAG.
    The following checks are made:-
 1) Invalid PCB/ROOT PCB on any of the RSM PCB chains.
    I.E Not in SQA on a word boundary.
 2) Invalid TCB/SSRB pointer in PCB/ROOT PCB.
 3) Invalid PVT pointer in the CVT.

    In addition  'page-in' requests are  traced for later  analysis by
AMDPSALZ.  VIO  and SWAP paging requests  are not traced  because they
are probably not important in dump analysis.



.subsub 'ENQ/DEQ Checking'

This function is performed by CSECT AMDPSQCB.
    The following checks are made:-
 1) Invalid QCB.
    i.e. not in SQA aligned on a word boundary.
 2) Invalid QEL.
    i.e. not in SQA aligned on a word boundary.

    If an  EXCLUSIVE ENQ  is detected  for a  resource on  which other
jobs/users are waiting the resource holder  and waitors are traced for
later analysis by CSECT AMDPSALZ.



.subsub 'Local/CMS Lock Checking'

This function is performed by CSECT AMDPSLOK.
    Each address  space is checked to  determine whether the  LOCAL or
CMS lock is held. Details of the holder and any waitors are traced for
later analysis  by AMDPSALZ. Note:-  if the  address of the  holder or
waitors cannot be determined '0' is used.
All CMS locks are checked now.... CSMF, CEDQ and CMS.
                                                               PAGE 11


.subsub 'System Resource Analysis'

This  function  is   performed  by  CSECT  AMDPSALZ,   which  analyses
information traced by CSECTS : AMDPSLOK, AMDPSPAG, AMDPSQCB, AMDPSCAN,
AMDPSUCB.
    These CSECT's trace information about the following 'resources' :-
          Page Supervisor
          I/O Devices
          Locks
          QCB's
          Real Storage Frames
          WQE's
          ORE's

    Details are printed of the holder of each resource and any waitors
for these resources. The resources are  printed in order of importance
to the system at the time of the  dump. If a waitor also holds another
resource details of that resource are printed.  From this relationship
of  resource holders/waitors  it should  be possible  to identify  the
'critical' system resource at the time of the dump.

 Example 1
          a) I/O outstanding on a device for which the
             communications task is waiting.
          b) Most jobs in the system waiting for WQE buffer
             resource which is held by communications task.

    It can  be seen  that this is  probably an I/O  problem and  not a
comm's task error.

 Example 2
          a) Most TCB/SSRB's dispatched in ASID 1 are
             waiting for the local lock.
          b) LOCAL lock holder is in a 'page-wait', and
             also holds the CMS lock.
          c) Page supervisor is waiting for I/O to
             complete on a paging device.
          d) Other address spaces are waiting for
             the CMS lock.

    It can  be seen  that this is  probably an I/O  problem and  not a
locking problem as it might first appear from the dump.

    A check is made for an interlock condition between holders/waitors
of resources. Details are printed if an interlock is detected.

 Example:
          holder of resource 'A' is waiting for resource 'B'
          holder of resource 'B' is waiting for resource 'A'




.subsub 'CPU Status Analysis'

This  function  is  performed  by CSECT  AMDPSLOP.  Unlike  all  other
AMDPSCAN  CSECTs, AMDPSLOP  reads the  dump  dataset directly  without
using AMDPRDMP.
 The CPU status records are read from  the dump dataset. If the PSW in
the store status  has the wait bit  off, and the status  is valid, the
instruction stream pointed  to by the psw  is simulated. If a  loop is
detected an instruction trace is printed.
 A message is  printed indicating whether the  CPU is enabled/disabled
waiting/ executing or looping.
 The  dataset described  by  the SYSUT3  DD  card is  used  as a  BDAM
'paging' dataset during instruction simulation.

.pa
.subsection 'Notes on USE'
.sp 3
    If AMDPSCAN produces  many messages indicating that  addresses are
invalid, when they appear to be correct, check that the fields used to
establish the boundaries  of the storage areas are  valid. See section
on 'Validity Checking' for definition of these fields.

    While  AMDPSCAN   does  function  with   SYS1.DUMPs  as   well  as
stand-alone dumps, the output may be misleading in some cases. This is
because control block chains may have been modified while the dump was
being taken. This is particularly so for I/O control blocks.
.pa
.subsection 'Messages'
.sp
.subsub 'Messages From AMDPSCAN'


SCAN0001 UNABLE TO ACCESS CVT - SCAN TERMINATED

          AMDPRDMP was  unable to determine  the location of  the CVT.
          AMDPSCAN is unable to do any processing.

SCAN0002 CVTNUCB IS INVALID - XXXXXXXX

          CVTNUCB (address  of the top of  the NUCLEUS in the  CVT) is
          not on a 64K boundary or is zero.

SCAN0003 WILL USE GDA PASTRT

          AMDPSCAN will  use the address of  the start of  the Private
          Area  from the  GDA  as the  top of  the  NUCLEUS.  This  is
          assuming that the GDA can  be ACCESSED. This message follows
          messages SCAN0002 or SCAN0004.

SCAN0004 UNABLE TO ACCESS CVTNUCB AT XXXXXXXX

          CVT  field  CVTNUCB which  is  the  address  of the  of  the
          NUCLEUS, cannot be  accessed because it is not  in the dump.
          Control block  validity checking will be  restricted because
          the boundaries of NUCLEUS cannot be determined.

SCAN0005 CVTEORM IS INVALID - XXXXXXXX

          CVT  field  CVTEORM which  is  the  end  of real  memory  is
          invalid.  It  is less than 1MEG  or not a multiple  of 512k.
          Control block  validity checking will be  restricted because
          the boundaries of real memory cannot be determined.

SCAN0006 UNABLE TO ACCESS CVTGDA AT XXXXXXXX

          CVT field CVTGDA which is the  GDA pointer in the CVT cannot
          be accessed  because it is not  in the dump.   Control block
          validity checking will be  restricted because the boundaries
          of SQA, CSA, LPA and the Private Area cannot be determined.

SCAN0007 GDA PASIZE IS INVALID - XXXXXXXX

          GDA field  PASIZE which is the  size of the Private  Area is
          not a multiple of 64K.  Control block validity checking will
          be restricted  because the  boundaries of  the Private  Area
          cannot be determined.

SCAN0008 GDA FIELD CSAPQEP IS INVALID - XXXXXXXX

          GDA field CSAPQEP  is invalid. Either the address  is not in
          SQA or it is not on a word boundary.  Control block validity
          checking will  be restricted because  the boundaries  of CSA
          cannot be determined.

SCAN0009 PQESIZE FOR CSA IS INVALID - XXXXXXXX

          PQESIZE in the PQE for CSA is not a multiple of 4K or is too
          large or  too small.  This  error may  also be caused  by an
          invalid PQEREGN field,  giving a total of  PQEREGN + PQESIZE
          which is than  16MEG.  Control block validity  checking will
          be  restricted  because  the boundaries  of  CSA  cannot  be
          determined.  Control block trace follows.

SCAN0010 SPQE POINTER FOR SQA IS INVALID - XXXXXXXX

          SQA SPQE pointer  in the GDA is  an address which is  not in
          the same page  as the GDA.  Control  block validity checking
          will be restricted  because the boundaries of  SQA cannot be
          determined.  Control block trace follows.

SCAN0011 INVALID DQE POINTER IN SPQE - XXXXXXXX

          Pointer to  the first  DQE from  the SPQE  for SQA  is zero.
          Control  block   trace  follows.   Control   block  validity
          checking will  be restricted because  the boundaries  of SQA
          cannot be determined.

SCAN0012 LOOP IN DQE CHAIN

          A loop  has been found  in the  DQE chain for  SQA.  Control
          block trace  follows.  Control block validity  checking will
          be  restricted  because  the boundaries  of  SQA  cannot  be
          determined.

SCAN0013 INVALID DQE CHAIN POINTER - XXXXXXXX

          A DQE for SQA has an invalid DQE chain field. The address is
          not in  SQA or CSA  or is not  on a word  boundary.  Control
          block trace  follows.  Control block validity  checking will
          be  restricted  because  the boundaries  of  SQA  cannot  be
          determined.

SCAN0014 INVALID DQEBLKAD FIELD IN DQE AT XXXXXXXX

          A DQE for SQA has a block address which is not a multiple of
          64K or is  not in SQA or CSA.  Control  block trace follows.
          Control block  validity checking will be  restricted because
          the boundaries of SQA cannot be determined.

SCAN0015 UCMVEZ IS INVALID - XXXXXXXX

          UCME size field in the UCM base is not a multiple of 4 or is
          less than X'60' or is greater than X'90'.

SCAN0016 UNABLE TO ACCESS CVTNUCB AT XXXXXXXX

          The CVT  field CVTNUCB (pointer to  the UCM base)  cannot be
          accessed because  it is  not in  the dump.   No checking  of
          Communications Task control blocks can be performed.

SCAN0017 NO CONSOLES CONDITION EXISTS. UCMSYSE BIT UCMSFLG1 IS ON.

          Self-explanatory.

SCAN0018 CURRENT WQE COUNT (DDD) EQUALS/EXCEEDS LIMIT (DDD)

          The count of WQEs currently in use (UCMWQNR) is equal to, or
          exceeds the  WQE limit (UCMWQLM).   In this  condition tasks
          may be waiting in WTO  for WQEs to become available.

SCAN0019 INVALID UCME ADDRESS - XXXXXXXX

          AMDPSCAN calculated  an invalid UCME address  because UCMVEA
          (first UCME), UCMVEz  (UCME size), or UCMVEL  (last UCME) in
          the UCM base is invalid.  Control block trace follows.

SCAN0020 INVALID CQE POINTER IN UCME - XXXXXXXX

          The CQE pointer in  the UCME field UCMOUTQ is not  on a word
          boundary or not in CSA. (LSQA in SP1.3)

SCAN0021 LOOP IN CQE CHAIN

          A loop  exists in  the CQE  chain anchored  on UCMOUTQ  in a
          UCME.  Control block trace follows.

SCAN0022 INVALID CQE CHAIN POINTER - XXXXXXXX

          A  CQE in  a chain  anchored on  UCMOUTQ  in a  UCME has  an
          invalid  pointer to  the  next CQE.   It is  not  on a  word
          boundary or is not in CSA.  Control block trace follows.

SCAN0023 UNABLE TO ACCESS CVTEORM AT XXXXXXXX

          CVT field CVTEORM which is the top of real memory, cannot be
          accessed  because it  is  not in  the  dump.  Control  block
          validity checking will be  restricted because the boundaries
          of real memory cannot be determined.

SCAN0028 SQA (APPROACHING) CRITICAL BIT IS ON IN GDA AT XXXXXXXX

          Self-explanatory.

SCAN0030 UCMVEL IS INVALID - XXXXXXXX

          The pointer to the  last UCME in the UCM is  an address that
          is not on a word boundary or is not in the NUCLEUS.

SCAN0031 LOOP IN WQE CHAIN

          The WQE chain anchored on  UCMOUTQ (the system output queue)
          has a loop in it.  Control block trace follows.

SCAN0032 INVALID WQE CHAIN POINTER - XXXXXXXX

          While  following the  WQE  chain  anchored on  UCMOUTQ  (the
          system  output  queue)  AMDPSCAN found  a  WQE  whose  chain
          pointer  was  an  address  outside CSA  or  not  on  a  word
          boundary.  Control block trace follows.

SCAN0033 LOOP IN ORE CHAIN

          The Operator Reply  Element chain anchored on  UCMRPYQ has a
          loop in it.  Control block trace follows.

SCAN0034 INVALID ORE CHAIN POINTER

          While following the Operator Reply Element queue anchored on
          UCMRPLYQ, AMDPSCAN found  an ORE whose chain  pointer was an
          address  outside CSA  or not  on a  word boundary.   Control
          block trace follows.

SCAN0035 LOOP IN WQE CHAIN

          A WQE chain pointed  to by a CQE has a  loop in it.  Control
          block trace follows.

SCAN0036 INVALID WQE CHAIN POINTER - XXXXXXXX

          While following a WQE chain from a CQE, AMDPSCAN found a WQE
          whose chain pointer  was an address outside CSA or  not on a
          word boundary.  Control block trace follows.

SCAN0037 CVTGDA IS INVALID - XXXXXXXX

          CVT field CVTGDA which is a  pointer to the Global Data Area
          is  an address  which is  not in  SQA or  is not  on a  word
          boundary.    Control  block   validity   checking  will   be
          restricted because the boundaries of  Private Area, CSA, LPA
          and SQA cannot be determined.

SCAN0038 GDA PASTRT IS INVALID - XXXXXXXX

          GDA field  PASTRT which is the  pointer to the start  of the
          Private Area in the GDA is not in the Private Area or not on
          a 64K boundary.
              If the address of the top of the NUCLEUS was successfuly
          determined, this  will be  used for  the Private  Area start
          address.  If  not, control block  validity checking  will be
          restricted because the boundaries of the Private Area cannot
          be determined.

SCAN0039 PQERGN FOR CSA IS INVALID - XXXXXXXX

          In the PQE for CSA, the field PQERGN which is the address of
          the start  of CSA,  is not on  a 64K boundary  or is  not in
          CSA.   Control block  validity checking  will be  restricted
          because the boundaries of CSA cannot be determined.  Control
          block trace follows.

SCAN0040 SPQE POINTER FOR SQA IS INVALID - XXXXXXXX

          The GDA field  SQAPQEP which is the pointer to  the SPQE for
          SQA is an  address which is not in  SQA or is not  on a word
          boundary.    Control  block   validity   checking  will   be
          restricted  because   the  boundaries   of  SQA   cannot  be
          determined.  Control block trace follows.

SCAN0041 CVTCUCB IS INVALID - XXXXXXXX

          The CVT field  CVTCUCB which is the pointer to  the UCM base
          is an address that  is not on a word boundary,  or is not in
          the  NUCLEUS.  No  checking of  Communications Task  control
          blocks can be performed.

SCAN0050 ATTENTION PENDING BIT IS ON IN UCME AT - XXXXXXXX

          Self-explanatory.  This message is only printed if more than
          90% of WQEs have been exhausted.

SCAN0051 OUTPUT PENDING BIT IS ON IN UCME AT - XXXXXXXX

          Self-explanatory.  This message is only printed if more than
          90% of WQEs have been exhausted.

SCAN0052 DEVICE BUSY BIT IS ON IN UCME AT - XXXXXXXX

          Self-explanatory.  This message is only printed if more than
          90% of WQEs have been exhausted.

SCAN0053 CLOSE PENDING BIT IS ON IN UCME AT - XXXXXXXX

          Self-explanatory.  This message is only printed if more than
          90% of WQEs have been exhausted.

SCAN0054 OPEN PENDING BIT IS ON IN UCME AT - XXXXXXXX

          Self-explanatory.  This message is only printed if more than
          90% of WQEs have been exhausted.

SCAN0059 UCME AT XXXXXXXX HAS DDD REQUESTS TO IT.

          If DDD is a large number  and message SCAN0018 also has been
          printed,  then  this  console   is  probably  'hanging'  the
          system.  This message  is only printed if more  than  90% of
          WQEs have been exhausted.

SCAN0060 INVALID DQEBLKAD FIELD IN DQE AT XXXXXXXX

          The DQE block address in the first DQE for SQA is an address
          which is not in SQA or not on a 64K boundary.  Control block
          validity checking will be  restricted because the boundaries
          of SQA cannot be determined.  Control block trace follows.

SCAN0070 CONTROL BLOCK TRACE (LAST 525 ENTRIES)

          Following this message is trace of control blocks leading up
          to  error described  in a  previous message.  If '(LAST  525
          ENTRIES)' is  included in  the SCAN0070  message, the  trace
          table has filled up and wrapped round.
              The first word  of the trace print is  the control block
          address, the second word is the control block name.

SCAN0071 PRINT OF WQES ON SYSTEM OUTPUT QUEUE.

          The print out which follows  this message will show messages
          which may  not have been printed  on the console  before the
          system failure.

SCAN0072 INVALID MINOR WQE AT XXXXXXXX

          The minor WQE at the address printed was found on the system
          output  queue, not  queued from  a  major WQE.   This is  an
          invalid condition.  Control block trace follows.

SCAN0073 OUTSTANDING REPLIES.

          Each ORE (operator  reply element) queued from  the UCM base
          field UCMRPLYQ, points to a WQE  which contains the text for
          the WTOR. The text from these WQEs is printed following this
          message.

SCAN0074 INVALID WQE POINTER IN ORE - XXXXXXXX

          An ORE  (operator reply element)  chained from the  UCM base
          field UCMRPLYQ has a WQE pointer which is an address outside
          CSA  or  not  on  a  word  boundary.   Control  block  trace
          follows.

SCAN0080 INVALID WWB CHAIN POINTER - XXXXXXXX

          A WWB chained  from the UCM base field  UCMWECBH or UCMOECBH
          has an invalid chain pointer.  Control block trace follows.

SCAN0081 LOOP IN WWB CHAIN.

          A loop exists in the WWB  chain anchored from UCM base field
          UCMWECBH or UCMOECBH.  Control block trace follows.

SCAN0097 AMDPSCAN HAS ABENDED.

          Self-explanatory.

SCAN0098 AMDPSCAN UNABLE TO AMDPRDMP PRINTER DCB.

          AMDPSCAN attempts to locate the DCB built by AMDPRDMP to put
          output to PRINTER  DD.  This is done via the  DEB chain. The
          PRINTER DCB could not be found  and AMDPSCAN will produce no
          output.
.pa
.subsub 'Messages From AMDPSUCB'


SCAN0101 UCB SCAN TERMINATED

          Due to a previous error, scanning of the UCBs and associated
          control blocks had to be terminated.

SCAN0102 LCH SCAN TERMINATED

          Due to a  previous error, scanning of  Logical Channel Words
          and associated control blocks had to be terminated.

SCAN0103 CAT SCAN TERMINATED.

          Due  to   a  previous   error,  scanning   of  the   Channel
          Availability Tables had to be terminated.

SCAN0104 INVALID IOQE POINTER IN UCB - XXXXXXXX

          The UCB  has the Post Flag  on and, therefore should  have a
          valid  IOQE chained  from its  UCBIOQ  pointer. However  the
          UCBIOQ pointer is outside SQA or  is not on a word boundary.
          Control block trace follows.

SCAN0106 INVALID IOSB POINTER IN IOQE - XXXXXXXX

          The  IOSB pointer  in an  IOQE is  not in  the NUCLEUS,  the
          Private Area, CSA or  SQA, or it is not on  a word boundary.
          Control block trace follows.

SCAN0107 INVALID IOSB POINTER IN SRB - XXXXXXXX

          While  following  a chain  IOQE  ->  IOSB  -> SRB  ->  IOSB,
          AMDPSCAN found that the IOSB pointer  in the SRB was not the
          same as the  IOSB pointer in the IOQE.   Control block trace
          follows.

SCAN0108 INVALID UCB POINTER IN IOSB - XXXXXXXX

          An IOSB has  been found with a  UCB pointer which is  not in
          the  NUCLEUS, not  on  a word  boundary,  or  is above  64K.
          Control block trace follows.

SCAN0109 INVALID UCB POINTER IN IOSB AT - XXXXXXXX

          While  following  the chain  UCB  ->  IOQE  -> IOSB  ->  UCB
          AMDPSCAN  found an  IOSB which  did  not point  back to  the
          original UCB.  Control block trace follows.

SCAN0111 INVALID UCB POINTER IN UCBLUT - XXXXXXXX

          The UCB look-up table contains a UCB pointer which is not in
          the NUCLEUS or not on a word boundary.

SCAN0112 TOO MANY ERRORS.

          More than  100 invalid UCB pointers  have been found  in the
          UCB look-up  table. The UCB look-up  table is assumed  to be
          garbage and UCB checking is terminated.

SCAN0115 UNABLE TO ACCESS CVTILK2 AT - XXXXXXXX

          The  CVT field  CVTILK2  which is  the  pointer  to the  UCB
          look-up table  cannot be accessed because  it is not  in the
          dump.  UCB checking is terminated.

SCAN0116 UNABLE TO ACCESS (ALL OF) UCB LOOK-UP TABLE

          The UCB look-up  table cannot be accessed because  it is not
          in the  dump.  If the words  'ALL OF' appear in  the message
          then part of  the LUT was accessed and  limited UCB checking
          will be performed. Otherwise checking will be terminated.

SCAN0117 UCB XXXXXXXX DEVICE XXXX

          This message  is a header describing  the device and  UCB to
          which the messages  following apply. This message  is issued
          for  unit record  devices, SCAN0118  is  issued for  tape/DA
          devices.

SCAN0118 UCB XXXXXXXX DEVICE XXXX VOLUME CCCCCC

          This message  is a header describing  the device and  UCB to
          which the messages  following apply. This message  is issued
          for  tape/DA devices,  SCAN0117 is  issued  for unit  record
          devices.

SCAN0119 MORE THEN 1917 UCBS

          More than 1917  unique UCB addresses have been  found in the
          UCB  look-up  table.  The  UCB  look-up  table  is  probably
          garbage. Only the first 1917 UCBs will be checked.

SCAN0120 OTHERS WILL BE IGNORED.

          Refer to message SCAN0119.

SCAN0124 NO FF AT UCB+2

          The UCB described  by previous message SCAN0117/0118  has no
          UCB  identifier.  The  UCB address  (obtained  from the  UCB
          look-up table) may be invalid.

SCAN0121 INVALID SRB POINTER IN IOSB - XXXXXXXX

          The  SRB pointer  in  an IOSB  is not  in  the NUCLEUS,  the
          Private Area,CSA  or SQA, or it  is not on a  word boundary.
          Control block trace follows.

SCAN0123 DDD REQUESTS QUEUED

          The  UCB identified  by message  SCAN0017  has DDD  requests
          queued  to  it.  This  number  is  obtained from  UCB  field
          UCBCNT.

SCAN0150  UCBCHGS BIT  IS  ON IN  UCBSTAT -  CHANGING  FROM ONLINE  TO
OFFLINE

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0151  UCBUNLD BIT  IS  ON IN  UCBSTAT  -  UNLOAD OPERATOR  COMMAND
PENDING

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0152 UCBBSY BIT IS ON IN UCBFL1 - DEVICE IS BUSY

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0153 UCBPST BIT IS ON IN UCBFL1 - POST FLAG

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0154 UCBPSNS BIT IS ON IN UCBFL1 - PENDING SENSE OPERATION

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0155 UCBCUB BIT IS ON IN UCBFL1 - CONTROL UNIT BUSY

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0156 UCBSAP  BIT IS ON IN  UCBFL1 - STAND-ALONE PROCESS  ON DEVICE
ACTIVE

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0157  UCBACTV BIT  IS ON  IN UCBFL1  - CHANNEL  PROGRAM ACTIVE  ON
DEVICE

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0158 UCBQISCE BIT IS ON IN UCBFL1 - DEVICE QUIESCED

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0159 UCBIORST BIT IS ON IN UCBFLB

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0160 UCBASNS BIT IS ON IN UCBFLB - SENSE ACTIVE ON DEVICE

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0161 UCBPST BIT IS ON IN UCBFLB - SENSE POST INDICATOR

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0162 UCBRESVH BIT IS ON IN UCBFLB - DEVICE RESERVED

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0163 UCBCRHSN BIT IS ON IN UCBFLB

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0164 UCBATTP BIT IS ON IN UCBFLC - ATTENTION PENDING

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0167 UCBICBT BIT IS  ON IN UCBFLC - CHANNEL END  AND/OR DEVICE END
OR MOUNT PENDING

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0168 UCBDDRSW BIT IS ON IN UCBFLC - DDR SWITCH PENDING

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0169 UCBDAVV BIT IS ON IN UCBFLC - DAVV IN CONTROL

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0170 UCBWDAV BIT IS ON IN UCBFLC - DAVV WAITING FOR MOUNT

          This message refers to the UCB described by message SCAN0117
          or SCAN0118.

SCAN0171 INVALID PCCA POINTER IN PCCAVT - XXXXXXXX

          The PCCA Vector Table has a PCCA pointer which is not in SQA
          or is not on a word boundary.  Control block trace follows.

SCAN0172 UNABLE TO ACCESS CVTPCCAT AT XXXXXXXX

          The CVT  field CVTPCCAT (pointer  to the PCCA  Vector Table)
          cannot be accessed because it is  not in the dump.  Checking
          of the CATs will be terminated.

SCAN0173 UNABLE TO ACCESS PCCAVT AT XXXXXXXX

          The PCCA Vector  Table cannot be accessed because  it is not
          in the dump.  Checking of the CATs will be terminated.

SCAN0180 UNABLE TO ACCESS CVTILCH AT XXXXXXXX

          CVT field  CVTILCH cannot be accessed  because it is  not in
          the  dump.  Logical  Channel  and  associated control  block
          checking cannot be performed.

SCAN0181 INVALID IOQE POINTER IN LCH ENTRY - XXXXXXXX

          A Logical Channel Entry has an  IOQE pointer which is not on
          a word  boundary, or  is not  in SQA.   Control block  trace
          follows.

SCAN0182 INVALID CHAIN POINTER IN LAST IOQE - XXXXXXXX

          The last IOQE  chained from a Logical Channel  does not have
          an IOQLNK field of X'FFFFFF'.  The  address of the last IOQE
          is determined from  the LCHLST field in  the Logical Channel
          Entry.  Control block trace follows.

SCAN0183 INVALID UCB POINTER IN IOSB - XXXXXXXX

          Following the chain - Logical Channel  Entry -> IOQE -> IOSB
          -> UCB, AMDPSCAN found a UCB address which is not in the UCB
          look-up table.  Control block trace follows.

SCAN0184 IOSB FOUND ON WRONG LOGICAL CHANNEL

          Following the chain - Logical Channel  Entry -> IOQE -> IOSB
          ->UCB, AMDPSCAN  found an IOSB  whose Logical  Channel index
          (UBCLCI)  was not  the same  as  the index  for the  Logical
          Channel  Entry   being  processed.    Control  block   trace
          follows.

SCAN0185 INVALID IOQE CHAIN POINTER - XXXXXXXX

          An IOQE  queued from a Logical  Channel Entry has  an IOQLNK
          field  which is  an address  outside SQA  or not  on a  word
          boundary.
              If  the chain  pointer printed  is  X'FFFFFF', then  the
          previous IOQE  was the  last on the  chain, but  the Logical
          Channel Entry field  LCHLST (pointer to the  last IOQE) does
          not point to it.  Control block trace follows.

SCAN0186 UNABLE TO ACCESS LCHENTRY AT XXXXXXXX

          A Logical Channel Entry cannot be accessed because it is not
          in the dump.   Logical Channel Entry and  associated control
          block checking will be terminated.

SCAN0187 LOGICAL  CHANNEL XX  FOR PHYSICAL  CHANNELS X  AND X  HAS DDD
REQUESTS QUEUED

          There are  DDD IOQEs  queued to logical  channel XX.  If the
          physical channel is  'UNKNOWN', the Test Channel  List could
          not be accessed or was found to be invalid. Message SCAN0118
          or SCAN0189 will have been printed in the latter case.

SCAN0188 INVALID TCH LIST POINTER IN LCH ENTRY - XXXXXXXX

          A  Logical Channel  Entry has  a Test  Channel List  pointer
          which is not  in the NUCLEUS or  is not on a  word boundary.
          Control block trace follows.

SCAN0189 INVALID LCHCHCNT FIELD IN LCH ENTRY AT - XXXXXXXX

          A Logical Channel Entry has an LCHCHCNT field (the number of
          physical channels associated with this logical channel) that
          is zero or greater than 2.  Control block trace follows.

SCAN0190 INVALID TCH LIST AT XXXXXXXX

          A Test Channel List has more or less channels than indicated
          in the Logical Channel Entry  field LCHCHCNT.  Control block
          trace follows.

SCAN0191 CHANNEL BUSY BIT IS ON IN CAT FOR CHANNEL XX, CPU XX

          Self-explanatory.

SCAN0192 UNABLE TO ACCESS CAT AT XXXXXXXX

          A Channel Availability  Table cannot be accessed  because it
          is not in the dump.
.pa
.subsub 'Messages From AMDPSVSM'


SCAN0200 LOOP IN FQE CHAIN

          Self-explanatory.  Control block trace follows.

SCAN0201 REGION BIT IS ON IN FQE AT XXXXXX

          Region bit is  on in FQE when  it should be off  for subpool
          being checked.  Control block trace follows.

SCAN0202 REGION BIT IS OFF IN FQE AT XXXXXX

          Region bit  is off  in FQE  when it  should be  on for  this
          subpool.  Control block trace follows.

SCAN0203 INVALID FQELNTH FIELD IN FQE AT XXXXXX

          The FQELNTH  field is not a  multiple of 8 or  is impossibly
          large.  Control block trace follows.

SCAN0204 FQE ADDRESS IS NOT LOWER THAN PREVIOUS - XXXXXX

          Non-region FQEs should be chained  in descending order.  The
          chain being checked is not.  Control block trace follows.

SCAN0205 FQAREA IS NOT LOWER THAN PREVIOUS. XXXXXX

          Chains  of non-region  FQEs  should  have descending  FQAREA
          addresses. The chain  being checked has not.   Control block
          trace follows.

SCAN0206 INVALID PFSTCPAB FIELD IN GDA AT XXXXXX

          GDA  field PFSTCPAB  should  point to  the  first cell  pool
          anchor block, but it is an address that is not in SQA or not
          on a word boundary.  Control block trace follows.

SCAN0207 INVALID CPABCPID IN CPAB AT XXXXXX

          GDA field PFSTCPAB points to the first CPAB. The fourth byte
          of  the  CPABCPID field  should  be  X'00'  but it  is  not.
          Control block trace follows.

SCAN0208 LOOP IN DQE CHAIN

          Self-explanatory.  Control block trace follows.

SCAN0209 INVALID DQELNTH FIELD IN DQE AT XXXXXX

          The DQE at XXXXXX has a block  length that is not a multiple
          of 4k.  Control block trace follows.

SCAN0210 INVALID ASCBQSVC FIELD IN ASCB AT XXXXXX

          ASCBQSVC is the  cell pool ID for the SVRB  cell pool.  This
          field multiplied by 4 is the address of a CPAB.  However the
          address  is  not  in  SQA  or  LSQA.   Control  block  trace
          follows.

SCAN0214 INVALID CPABCPID FIELD IN CPAB AT XXXXXX

          The ASCB  field ASCBQSVC is  the cell  pool ID for  the SVRB
          cell pool.  This field times 4 is the address of a CPAB. The
          CPABCPID  field  in the  CPAB  should  be  the same  as  the
          ASCBQSVC. It is not.  Control block trace follows.

SCAN0211 LOOP IN SPQE CHAIN.

          Self-explanatory.  Control block trace follows.

SCAN0212 INVALID SIZE FIELD IN FBQE AT XXXXXX

          The FBQE at XXXXXX  has a SIZE field that is  not a multiple
          of 4k.  Control block trace follows.

SCAN0213 LOOP IN FBQE CHAIN

          Self-explanatory.  Control block trace follows.

SCAN0215 LOOP IN PQE CHAIN

          Self-explanatory.  Control block trace follows.

SCAN0216 INVALID PQE CHAIN

          PQEs are double  chained. That is they  are chained forwards
          and backwards.  This message is printed  when a PQE is found
          with a backward pointer that does  not point to the previous
          PQE.  Control block trace follows.

SCAN0218 INVALID PQEBFBWE FIELD IN PQE AT XXXXXX

          FBQEs are chained from PQEs and the last FBQE points back to
          the PQE. The  PQE also contains a pointer  (PQEBFBQE) to the
          last FBQE.  This message is printed if the PQEBFBQE does not
          point to the last FBQE.  Control block trace follows.

SCAN0219 INVALID PQESIZE FIELD IN PQE AT XXXXXX

          The PQE at XXXXXX has a PQESIZE field that is not a multiple
          of 4k.  Control block trace follows.

SCAN0220 INVALID FQE ADDRESS - XXXXXX

          While  following the  SPQE  -> DQE  ->  FQE  chain for  CSA,
          anchored  from the  GDA field  CSAPQEP, an  FQE address  was
          found that was not in SQA  or not on a double-word boundary.
          Control block trace follows.

SCAN0221 INVALID FQAREA FIELD IN FQE AT XXXXXX

          While  following the  SPQE  -> DQE  ->  FQE  chain for  CSA,
          anchored from the GDA field CSAPQEP,  an FQE was found whose
          FQAREA was  an address not  in CSA  or not on  a double-word
          boundary.  Control block trace follows.

SCAN0222 INVALID DQE ADDRESS XXXXXX

          While following the SPQE -> DQE chain for CSA, anchored from
          the GDA field CSAPQEP, a DQE  address was found that was not
          in SQA or not on a double-word boundary.

SCAN0223 INVALID DQEBLKAD FIELD IN DQE - XXXXXX

          While following the SPQE -> DQE chain for CSA, anchored from
          the GDA  field CSAPQEP, a DQE  block address was  found that
          was not in CSA or not on a 4k boundary.  Control block trace
          follows.

SCAN0224 INVALID SPQE ADDRESS - XXXXXX

          While following  the SPQE chain  for CSA, anchored  from the
          GDA field  CSASPQEP, an SPQE address  was found that  not in
          SQA or not  on a double-word boundary.   Control block trace
          follows.

SCAN0225 INVALID FBQE ADDRESS - XXXXXX

          While following the PQE -> FBQE  chain for CSA anchored from
          the GDA  field CSAPQEP, an FBQE  address was found  that was
          not in SQA  or not on a double-word  boundary. Control block
          trace follows.

SCAN0226 INVALID FBQAREA FIELD IN FBQE AT XXXXXX

          While following the PQE -> FBQE chain for CSA, anchored from
          the GDA field  CSAPQEP, an FBQE was found  whose FBQAREA was
          an address  not in  CSA or  not on  a 4k  boundary.  Control
          block trace follows.

SCAN0227 INVALID PQE ADDRESS - XXXXXX

          While following the  PQE chain, anchored from  the GDA field
          CSAPQEP, a PQE address was found that  was not in SQA or not
          on a double-word boundary. Control block trace follows.

SCAN0228 INVALID PQEREGN FIELD IN PQE AT XXXXXX

          While following  the PQE chain  anchored from the  GDA field
          CSAPQEP, a PQE was found whose  PQEREGN field was an address
          not in  CSA or  not on  a 4k  boundary. Control  block trace
          follows.

SCAN0229 INVALID FBQE ADDRESS - XXXXXX

          While  following  the  PQE  -> FBQE  chain  for  V=R  space,
          anchored  from the  GDA field  VRPQEP, an  FPQE address  was
          found that was not in SQA  or not on a double-word boundary.
          Control block trace follows.

SCAN0231 INVALID PQE ADDRESS - XXXXXX

          While following the  PQE chain for V=R  space, anchored from
          the GDA field VRPQEP, an FBQE address was found that was not
          in SQA or not on a double-word boundary. Control block trace
          follows.

SCAN0233 VVVRFLAG IS OFF IN PQE AT XXXXXX - SHOULD BE ON.

          PQE is chained from GDA field VRPQEP, which is for V=R space
          and therefore it should have the VVVRFLAG on.  Control block
          trace follows.

SCAN0234 INVALID PQEREGN (REAL) FIELD IN PQE AT XXXXXX

          A PQE  was found  that had the  VVVRFLAG bit  on, indicating
          that it was for V=R space.  However the PQEREGN field was an
          address that  was; (a)  in the  NUCLEUS or  (b) not  in real
          storage or  (c) not on a  4k boundary.  Control  block trace
          follows.

SCAN0235 INVALID FBQAREA (REAL) FIELD IN FBQE AT XXXXXX

          A PQE  was found  that had the  VVVRFLAG bit  on, indicating
          that it was  for V=R space. However an FBQE  chained from it
          had an  FBQAREA field that was  an address that was;  (a) in
          the NUCLEUS or  (b) not in real  storage or (c) not  on a 4k
          boundary.  Control block trace follows.

SCAN0240 INVALID FQE ADDRESS XXXXXX

          While  following the  SPQE  -> DQE  ->  FQE  chain for  SQA,
          anchored from  the GDA  field SQASPQEP,  an FQE  address was
          found that was not in SQA  or not on a double-word boundary.
          Control block trace follows.

SCAN0241 INVALID DQE ADDRESS XXXXXX

          While following the SPQE -> DQE chain, anchored from the GDA
          field SQASPQEP, a DQE address was  found that was not in SQA
          or  not on  a  double-word  boundary.  Control  block  trace
          follows.

SCAN0242 INVALID DQEBLKAD FIELD IN DQE AT XXXXXX

          While following the SPQE -> DQE chain for SQA, anchored from
          the GDA field  SQASPQEP, a DQE was found  whose DQEBLKAD was
          not in SQA  or not on a double-word  boundary. Control block
          trace follows.

SCAN0243 INVALID SPQE ADDRESS - XXXXXX

          While following  the SPQE chain  for SQA, anchored  from the
          GDA field SQASPQEP,  an SPQE address was found  that was not
          in SQA or not on a double-word boundary. Control block trace
          follows.

SCAN0244 LOOP IN QUICK CELL CHAIN

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB,  a quick  cell chain  pointed to  by CPABFACP  was
          found with a loop in it.  Control block trace follows.

SCAN0245 INVALID QUICK CELL CHAIN POINTER - XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a quick  cell was found with a  chain pointer that
          was not in SQA or not on  a word boundary, or was not within
          the cell pool extents described  by CPABSTAD and CPABENAD in
          the CPAB.  Control block trace follows.

SCAN0246 INVALID CPABFACP FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a  CPAB/E was found  with a CPABFACP  field (quick
          cell pointer)  that was an  address not in  SQA or not  on a
          word boundary.  Control block trace follows.

SCAN0247 LOOP IN QUICK CELL CHAIN

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4), which  is the SVRB cell pool, a  quick cell chain
          pointed to by CPABFACP was found with a loop in it.  Control
          block trace follows.

SCAN0248 INVALID QUICK CELL CHAIN POINTER - XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4),  which is the  SVRB cell  pool, a quick  cell was
          found with a  chain pointer that was  not in SQA or  LSQA or
          not on  a word boundary,  or was  not within the  within the
          cell pool extents described by  CPABSTAD and CPABENAD in the
          CPAB.  Control block trace follows.

SCAN0249 INVALID CPABFACP FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4), which  is the SVRB cell pool, a  CPAB/E was found
          with  a CPABFACP  field  (quick cell  pointer)  that was  an
          address  not in  SQA  or LSQA  or not  on  a word  boundary.
          Control block trace follows.

SCAN0250 INVALID AQE ADDRESS - XXXXXX

          While  following the  AQE  chain,  anchored from  TCB  field
          TCBAQE, an AQE address was found that was not in LSQA or SQA
          or  not  on  a double-word  boundary.  Control  block  trace
          follows.

SCAN0251 INVALID AQELEN FIELD IN AQE AT XXXXXX

          While  following the  AQE  chain,  anchored from  TCB  field
          TCBAQE, an AQE was found with an AQELEN field that was not a
          multiple of 8.  Control block trace follows.

SCAN0252 INVALID FQE ADDRESS - XXXXXX

          While following the SPQE -> DQE  -> FQE chain, anchored from
          TCB field TCBSWA,  an FQE address was found that  was not in
          LSQA or not  on a double-word boundary.  Control block trace
          follows.

SCAN0253 INVALID FQAREA FIELD IN FQE AT XXXXXX

          While following the SPQE -> DQE  -> FQE chain, anchored from
          TCB field TCBSWA, an FQE was found whose FQAREA field was an
          address not  in PVTUSER  or not  on a  double-word boundary.
          Control block trace follows.

SCAN0254 INVALID DQE ADDRESS - XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from TCB
          field TCBSWA, a  DQE address was found that was  not in LSQA
          or  not  on  a double-word  boundary.  Control  block  trace
          follows.

SCAN0255 INVALID DQEBLKAD FIELD IN DQE AT XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from TCB
          field TCBSWA,  a DQE was found  whose DQEBLKAD field  was an
          address not  in PVTUSER  or not on  a 4k  boundary.  Control
          block trace follows.

SCAN0256 INVALID SPQE ADDRESS - XXXXXX

          While  following the  SPQE chain,  anchored  from TCB  field
          TCBSWA, an  SPQE address was found  that was not in  LSQA or
          not on a double-word boundary. Control block trace follows.

SCAN0257 INVALID FQE ADDRESS - XXXXXX

          While following the SPQE -> DQE  -> FQE chain, anchored from
          TCB field TCBMSS,  an FQE address was found that  was not in
          LSQA or not  on a double-word boundary.  Control block trace
          follows.

SCAN0258 INVALID FQAREA FIELD IN FQE AT XXXXXX

          While following the SPQE -> DQE  -> FQE chain, anchored from
          TCB field TCBMSS, an FQE was found whose FQAREA field was an
          address not  in PVTUSER  or not  on a  double-word boundary.
          Control block trace follows.

SCAN0259 INVALID DQE ADDRESS - XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from TCB
          field TCBMSS, a  DQE address was found that was  not in LSQA
          or  not  on  a double-word  boundary.  Control  block  trace
          follows.

SCAN0260 INVALID DQEBLKAD FIELD IN DQE AT XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from TCB
          field TCBMSS,  a DQE was found  whose DQEBLKAD field  was an
          address not  in PVTUSER  or not on  a 4k  boundary.  Control
          block trace follows.

SCAN0261 INVALID SPQE ADDRESS - XXXXXX

          While  following the  SPQE chain,  anchored  from TCB  field
          TCBMSS, an  SPQE address was found  that was not in  LSQA or
          not on a double-word boundary. Control block trace follows.

SCAN0262 INVALID FQE ADDRESS - XXXXXX

          While following the SPQE -> DQE  -> FQE chain, anchored from
          TCB field TCBUKYSP, an FQE address was found that was not in
          LSQA or not  on a double-word boundary.  Control block trace
          follows.

SCAN0263 INVALID FQAREA FIELD IN FQE AT XXXXXX

          While following the SPQE -> DQE  -> FQE chain, anchored from
          TCB field TCBUKYSP, an FQE was  found whose FQAREA field was
          an address not in PVTUSER or  not on a double-word boundary.
          Control block trace follows.

SCAN0264 INVALID DQE ADDRESS - XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from TCB
          field TCBUKYSP, a DQE address was found that was not in LSQA
          or  not  on  a double-word  boundary.  Control  block  trace
          follows.

SCAN0265 INVALID DQEBLKAD FIELD IN DQE AT XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from TCB
          field TCBUKYSP, a DQE was found  whose DQEBLKAD field was an
          address  not  in Private  Area  or  not  on a  4k  boundary.
          Control block trace follows.

SCAN0266 INVALID SPQE ADDRESS - XXXXXX

          While  following the  SPQE chain,  anchored  from TCB  field
          TCBUKYSP, an SPQE address was found  that was not in LSQA or
          not on a double-word boundary. Control block trace follows.

SCAN0267 ASCBLDA IS INVALID - XXXXXX

          The LDA pointer in an ASCB is an address that is not in LSQA
          or  not  on  a double-word  boundary.  Control  block  trace
          follows.

SCAN0268 INVALID FQE ADDRESS - XXXXXX

          While following the SPQE -> DQE  -> FQE chain, anchored from
          LDA field LSQAPTR, an FQE address  was found that was not in
          the Private Area  or not on a  double-word boundary. Control
          block trace follows.

SCAN0269 INVALID DQE ADDRESS - XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from LDA
          field LSQAPTR, a  DQE address was found that was  not in the
          Private Area or not on a double-word boundary. Control block
          trace follows.

SCAN0270 INVALID DQEBLKAD FIELD IN DQE AT XXXXXX

          While following  the SPQE  -> DQE  chain, anchored  from LDA
          field LSQAPTR, a  DQE was found whose DQEBLKAD  field was an
          address not  in the Private  Area or  not on a  4k boundary.
          Control block trace follows.

SCAN0271 INVALID SPQE ADDRESS - XXXXXX

          While  following the  SPQE chain,  anchored  from LDA  field
          LSQAPTR,  an SPQE  address was  found  that was  not in  the
          Private Area or not on a double-word boundary. Control block
          trace follows.

SCAN0272 INVALID FBQE ADDRESS - XXXXXX

          While following  the PQE  -> FBQE  chain, anchored  from LDA
          field LDASRPQE,  an FBQE address was  found that was  not in
          LSQA or not on a  double-word boundary.  Control block trace
          follows.

SCAN0273 INVALID FBQAREA FIELD IN FBQE AT XXXXXX

          While following  the PQE  -> FBQE  chain, anchored  from LDA
          field LDASRPQE, an FBQE was found whose FBQAREA field was an
          address not  in PVTUSER  or not  on a  4k boundary.  Control
          block trace follows.

SCAN0274 INVALID PQE ADDRESS - XXXXXX

          While  following the  PQE  chain,  anchored from  LDA  field
          LDASRPQE, a  PQE address was found  that was not in  LSQA or
          not on a double-word boundary. Control block trace follows.

SCAN0275 INVALID PQEREGN FIELD IN PQE AT XXXXXX

          While  following the  PQE  chain,  anchored from  LDA  field
          LDASRPQE a PQE was found whose  PQEREGN field was an address
          not in PVTUSER or not on  a 4k boundary. Control block trace
          follows.

SCAN0276 INVALID FBQE ADDRESS - XXXXXX

          While following  the PQE  -> FBQE  chain, anchored  from LDA
          field ASDPQE, an FBQE address was found that was not in LSQA
          or  not on  a  double-word  boundary.  Control  block  trace
          follows.

SCAN0277 INVALID FBQAREA FIELD IN FBQE AT XXXXXX

          While following  the PQE  -> FBQE  chain, anchored  from LDA
          field ASDPQE, an  FBQE was found whose FBQAREA  field was an
          address not  in PVTUSER  or not  on a  4k boundary.  Control
          block trace follows.

SCAN0278 INVALID PQE ADDRESS - XXXXXX

          While  following the  PQE  chain,  anchored from  LDA  field
          ASDPQE, a PQE address was found that  was not in LSQA or not
          on a double-word boundary. Control block trace follows.

SCAN0279 INVALID PQEREGN FIELD IN PQE AT XXXXXX

          While  following the  PQE  chain,  anchored from  LDA  field
          ASDPQE a  PQE was found whose  PQEREGN field was  an address
          not in PVTUSER or not on  a 4k boundary. Control block trace
          follows.

SCAN0280 INVALID FQE ADDRESS - XXXXXX

          While  following  the SPQE  ->  DQE  ->  FQE chain  for  CSA
          (subpool 239), anchored  from the GDA field  CSAPQEP, an FQE
          address  was  found  that  was  not  in  CSA  or  not  on  a
          double-word boundary.  Control block trace follows.

SCAN0281 INVALID FQAREA FIELD IN FQE AT XXXXXX

          While following  the SPQE  -> DQE ->  FQE chain  for subpool
          230,  anchored from  TCB field  TCBUKYSP, an  FQE was  found
          whose FQAREA field was an address not in the Private Area or
          not on a double-word boundary. Control block trace follows.

SCAN0282 INVALID CPABCSZE FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a  CPAB/E was  found with  a CPABCSZE  (cell size)
          field that  was not  a multiple of  4.  Control  block trace
          follows.

SCAN0283 INVALID CPABSTAD FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a CPAB/E was found with  a CPABSTAD field that was
          an address  not in SQA or  not on a word  boundary.  Control
          block trace follows.

SCAN0284 INVALID CPABENAD FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a CPAB/E was found with  a CPABENAD field that was
          an address  not in SQA or  not on a word  boundary.  Control
          block trace follows.

SCAN0285 LOOP IN CPABE CHAIN

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a loop was found.  Control block trace follows.

SCAN0286 INVALID CPABCPID FIELD IN CPABE AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a CPABE  was found with a CPABCPID  field that did
          not point back to the originating CPAB.  Control block trace
          follows.

SCAN0287 INVALID CPABE CHAIN POINTER - XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor  block  extensions  pointed  to   by  the  GDA  field
          PFSTCPAB, a  CPABE was found that  had a chain  pointer that
          was  an address  not  in  SQA or  not  on  a word  boundary.
          Control block trace follows.

SCAN0288 INVALID CPABCSZE FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4), which  is the SVRB cell pool, a  CPAB/E was found
          with a CPABCSZE (cell size) field that was not a multiple of
          4.  Control block trace follows.

SCAN0289 INVALID CPABSTAD FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4), which  is the SVRB cell pool, a  CPAB/E was found
          with a CPABSTAD field that was an address not in SQA or LSQA
          or not on a word boundary.  Control block trace follows.

SCAN0290 INVALID CPABENAD FIELD IN CPAB/E AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4), which  is the SVRB cell pool, a  CPAB/E was found
          with a CPABENAD field that was an address not in SQA or LSQA
          or not on a word boundary.  Control block trace follows.

SCAN0291 LOOP IN CPABE CHAIN

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4),  which is the SVRB  cell pool, a loop  was found.
          Control block trace follows.

SCAN0292 INVALID CPABCPID FIELD IN CPABE AT XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4),  which is the SVRB  cell pool, a CPABe  was found
          with  a  CPABCPID field  that  did  not  point back  to  the
          originating CPAB.  Control block trace follows.

SCAN0293 INVALID CPABE CHAIN POINTER - XXXXXX

          While checking  the cell  pool anchor  blocks and  cell pool
          anchor block  extensions pointed to  by ASCB  field ASCBQSVC
          (times 4),  which is the SVRB  cell pool, a CPABE  was found
          that had a chain  pointer that was an address not  in SQA or
          LSQA  or  not  on  a word  boundary.   Control  block  trace
          follows.

SCAN0297 INVALID FQE ADDRESS - XXXXXX

          While  following the  SPQE  -> DQE  ->  FQE  chain for  CSA,
          anchored from  the GDA field  CSAPQEP, a region  FQE address
          was  found that  was  not in  CSA or  not  on a  double-word
          boundary.  Control block trace follows.

SCAN0298 LOOP IN AQE CHAIN

          Self-explanatory. Control block trace follows.

SCAN0299 CONTROL BLOCK ERROR DETECTED IN ASID XXXX

          Self-explanatory. Next message printed describes error.
.pa
.subsub 'Messages From AMDPSVAL'


SCAN0303 CCCCCC NEW  PSW ADDRESS XXXXXX ( FOR  CPU XX ) IS  NOT IN THE
NUCLEUS.

          The PSW indicated by CCCCCC  contains an address XXXXXX that
          is not in the nucleus.

SCAN0304 CCCCCC NEW PSW  ADDRESS XXXXXX ( FOR CPU XX  ) DOES NOT POINT
AT THE CCCCCC

          The address in the PSW does not point at a valid First Level
          Interrupt Handler.  The address is validated by checking for
          a valid FLIH module name at the address -16.

SCAN0305 CCCCCC FLIH OVERLAID -

          The first 10 bytes of each  FLIH are validated. This message
          indicates  that part  of this  code has  been overlaid.  See
          messages SCAN0307  and SCAN0308 for  more details  about the
          error.

SCAN0306 1ST WORD OF THE CCCCCC NEW PSW HAS BEEN OVERLAID -

          Self-explanatory.  See  messages SCAN0307  and SCAN0308  for
          more details about error.

SCAN0307          ACTUAL - XXXXXX

          ThIs  message shows  the  actual  data. It  follows  message
          SCAN0304 or SCAN0305

SCAN0308          EXPECTED - XXXXXX

          ThIs message  shows the  expected data.  it follows  message
          SCAN0304 or SCAN0305

SCAN0309 CCCCCC FRR STACK -> ( FOR CPU XX AT PSA + XX ) IS INVALID.

          The CCCCCC entry  in the Recovery Stack  Vector Table (RSVT)
          points to a FRR stack which is not in SQA ( or in the PSA in
          the case of the Normal Stack  ).  The message also indicates
          the CPU  in error and the  displacement into the  RSVT where
          the invalid pointer was found.

SCAN0310 CURRENT FRR STACK POINTER ( FOR CPU XX AT PSA + XX ) DOES NOT
POINT  TO A VALID FRR STACK.

          The current FRR  Stack pointer in the  Recovery Stack Vector
          Table (RSVT) is validity checked by comparing the pointer to
          the addresses of  the other FRR Stacks. It is  invalid if it
          does not point to one of the FRR stacks in the RSVT.
          ( NOTE - This  check cannot be made if any  of the other FRR
          stack pointers in the RSVT are found to be invalid).

SCAN0311 THE  CURRENT FRR  STACK ( FOR  CPU XX  AT PSA +  XX )  IS THE
CCCCCC STACK. THIS STACK HAS AN ACTIVE ENTRY.

          This message is printed if the current FRR stack has a valid
          entry.  The message includes the CPU id and the displacement
          into the Recovery  Stack Vector Table (RSVT)  of the current
          entry. This is not an error  message, however it may help in
          debugging the dump.
.pa
.subsub 'Messages From AMDPSQCB'


SCAN0320 ERROR ACCESSING QCB CONTROL BLOCKS.

          An error  has been  detected in a  QCB control  block chain.
          Control block trace follows.


SCAN0321 LOOP IN ENQUEUE CONTROL BLOC CHAIN.

          A loop has been detected while following the 'ENQUEUE' control
          block chain.
          Control block trace follows.
.pa
.subsub 'Messages From AMDPSTAT'


SCAN0350 LOCK MANAGER IS ACTIVE ON CPU XX.

          PSALOCK  flag  is on  in  field  PSASUP1  in the  PSA.  This
          indicates that the LOCK MANAGER is in control.

SCAN0351 ASM LOCK IS HELD ON CPU XX.

          ASMDSBL field in  the ASMVT is non-zero.  This  lock is used
          when ASM is processing i/o errors on a paging pack (rl 2.0 &
          3.0 only).

SCAN0352 IOSYNCH LOCK IS HELD ON CPU XX.

          IRTSLCK  flag  is on  in  field  IRTFLA1  in the  IRT.  This
          indicates that  the IOSYNCH  lock is  held (IRT  is in   the
          LCCA).  The  lockword is  in  the  IOCOM area  (CVTIXAVL  ->
          IOCOM).

SCAN0353 I/O CAT LOCK IS HELD ON CPU XX.

          IRTCLCK  flag  is on  in  field  IRTFLA1  in the  IRT.  This
          indicates that  the I/O  CAT lock  is held  (IRT is  in  the
          LCCA).  The  lockword is  in  the  IOCOM area  (CVTIXAVL  ->
          IOCOM).

SCAN0354 UCB LOCK IS HELD ON CPU XX FOR DEVICE XXX AT ADDRESS XXXXXX.

          IRTULCK  flag  is on  in  field  IRTFLA1  in the  IRT.  This
          indicates that a UCB lock is held. The UCB lock word address
          is at IRTUCB in the IRT.

SCAN0355 I/O  LCH LOCK  IS HELD  ON CPU  XX FOR  LCH ENTRY  AT ADDRESS
XXXXXX.

          IRTLLCK  flag  is on  in  field  IRTFLA1  in the  IRT.  This
          indicates  that the  LCH lock  is  held. The  LCH lock  word
          address is at IRTLCH in the IRT.

SCAN0356 DISPATCHER LOCK IS HELD ON CPU XX.

          The DISPATCHER lock at IEAVESLA + 0 is held .

SCAN0357 SALLOC LOCK IS HELD ON CPU XX.

          The SALLOC lock at IEAVESLA + 4 is held .

SCAN0358 SRM LOCK IS HELD ON CPU XX.

          The SRM lock at IEAVESLA + 8 is held .
.pa
.subsub 'Messages From AMDPSALZ'


SCAN0370  AN  INTERLOCK CONDITION  EXISTS  BETWEEN  RESOURCE #  X  AND
RESOURCE # Y

          The SCAN resource analysis routine has detected an interlock
          condition  between resources  'x'  and  'y'. The  holder  of
          resource # x is  waiting for resource # y and  the holder of
          resource  # y  is waiting  for  resource #  x.  See  message
          SCAN0371 for more details about the resources.

SCAN0371 RESOURCE # X   YYYYY

          The  SCAN  resource  analysis   routine  prints  details  of
          'critical' system resources  which were held at  the time of
          the  dump  for  which other  users/jobs  were  waiting.  The
          resources are printed in order  of importance to the system.
          This is the only significance of the resource # 'x' .
             The resources checked are :-
                                          I/O devices
                                          PAGING I/O
                                          LOCAL lock
                                          CMS lock
                                          QCB names
                                          REAL STORAGE frames
                                          WQE's
                                          ORE's
            This message will  be followed by details  of the resource
          holder and resource  waitors. Details of any  resources held
          by a  waitor are also printed.  If the job/userid  cannot be
          determined 'N/A' is printed .
            If the  TCB/SSRB cannot be  determined (i.e. if  an active
          SRB  holds a resource) an address of 000000 is printed.

SCAN0372 ACCESS ERROR ON ADDRESS XXXXXX.

          An internal SCAN error has occurred in AMDPSALZ. Please read
          the  introduction  for  information   about  reporting  this
          error.

SCAN0373   * * * * UNKNOWN RESOURCE NAME.

          An internal SCAN error has occurred in AMDPSALZ. Please read
          the  introduction  for  information   about  reporting  this
          error.
.pa
.subsub 'Messages From AMDPSPAG'


SCAN0382 INVALID (ROOT) PCB AT XXXXXX.

          An invalid PCB has been  detected on the deferred allocation
          PCB chain,  anchored at PVTGFADF.  PCB address should  be on
          word boundary in SQA. Control block trace follows.

SCAN0383 INVALID TCB POINTER IN PCB - XXXXXX.

          An invalid  TCB pointer has  been detected  in a PCB  on the
          deferred allocation PCB chain, anchored at PVTGFADF. Control
          block trace follows.

SCAN0384 INVALID SRB POINTER IN PCB - XXXXXX.

          An invalid  SRB pointer has  been detected  in a PCB  on the
          deferred allocation PCB chain, anchored at PVTGFADF. Control
          block trace follows.

SCAN0385 INVALID TCB POINTER IN PCB - XXXXXX.

          An invalid  TCB pointer has  been detected  in a PCB  on the
          common i/o  PCB chain, anchored  at PVTCIOQF.  Control block
          trace follows.

SCAN0386 INVALID SRB POINTER IN PCB - XXXXXX.

          An invalid  SRB pointer has  been detected  in a PCB  on the
          common i/o  PCB chain, anchored  at PVTCIOQF.  Control block
          trace follows.

SCAN0387 INVALID (ROOT) PCB AT XXXXXX.

          An invalid PCB has been detected on the local i/o PCB chain,
          anchored at RSMLIOQF. PCB address should be on word boundary
          in SQA. Control block trace follows.

SCAN0388 INVALID TCB POINTER IN PCB - XXXXXX.

          An invalid  TCB pointer has  been detected  in a PCB  on the
          local i/o  PCB chain,  anchored at  RSMLIOQF. Control  block
          trace follows.

SCAN0389 INVALID PVT POINTER IN CVT - XXXXXX.

          An invalid PVT pointer has been detected in the CVT. Control
          block trace follows.

SCAN0391 INVALID TCB POINTER IN PCB - XXXXXX.

          An invalid  TCB pointer has  been detected  in a PCB  on the
          common i/o  PCB chain, anchored  at PVTCIOQF.  Control block
          trace follows.

SCAN0392 INVALID (ROOT) PCB AT XXXXXX.

          An  invalid PCB  has been  detected  on the  common i/o  PCB
          chain, anchored at  PVTCIOQF. PCB address should  be on word
          boundary in SQA. Control block trace follows.

.pa
.subsub 'MESSAGES FROM AMDPSSRM'


SCAN0500 LOOP DETECTED IN OUCB CHAIN.




SCAN0501 Reserved in this release.




SCAN0502 Reserved in this release.




.pa
.subsub 'MESSAGES FROM AMDPSLOP'


SCAN0700 UNABLE TO OPEN DCB FOR SYSUT3

          DD card for  SYSUT3 has been omited. No  CPU status analysis
          will be performed.

SCAN0701 UNABLE TO OPEN DCB FOR SYSUT1 OR TAPE

          No DD  card is  present for  SYSUT1 or  TAPE. No  CPU status
          analysis will be performed.

SCAN0702 CPU X IS EXECUTING BUT NOT LOOPING.

          The CPU status record for CPU  X contains valid status and a
          PSW with  the wait bit off.   A simulation of the  next 5000
          instructions to be executed did not show the CPU to be in an
          unending loop.

SCAN0703 CPU X IS IN A DISABLED/ENABLED LOOP.

          Self-explanatory.

SCAN0704 NO VALID STATUS STORED FOR CPU X

          Self-explanatory.

SCAN0705 CPU  X IS IN A  DISABLED/ENABLED (PROGRAM CHECK)  LOOP. TRACE
FOLLOWS.

          A simulation  of the next  5000 instructions to  be executed
          showed that  CPU X is in  an unending loop.  See  Appendix A
          for an explanation of the format of the instruction trace.

SCAN0710 INSUFFICIENT STORAGE FOR LOOP ANALYSIS.

          AMDPSLOP  is unable  to get  enough storage  for buffers  to
          perform instruction simulation and loop analysis. Check that
          AMDPSCAN resides in SYS1.LPALIB.

.pa
.subsection 'System Resource Analysis Format'

  The following  pages show  some examples of  the output  produced by
AMDPSALZ.

 NOTE:

         If the required storage is not  available in the dump for the
      JOBNAME or USERID to be determined a  JOBNAME of ' N/A ' will be
      printed.

         In  some cases a  TCB or SSRB  address of 000000  is printed.
      This will indicate that the address  of the holder of a resource
      could not be  determined. I.E. If an active SRB  holds the LOCAL
      lock its address cannot be found.
.pa
.sp 2
        * * * * S Y S T E M   R E S O U R C E   A N A L Y S I S * * * *


 SCAN0370         AN INTERLOCK CONDITION EXISTS BETWEEN
                  RESOURCE # 8 AND RESOURCE # 9


________________________________________________________________________


 SCAN0371          RESOURCE # 1    I/O DEVICES :- 01C8 01C0 01C6


    REQUIRED BY :-
                   ASM IS WAITING FOR I/O TO COMPLETE. SEE RESOURCE #2

 _______________________________________________________________________

 SCAN0371          RESOURCE # 2       PAGING I/O

    REQUIRED BY :-
                   JOB/USERID  *MASTER*  ASID  0001  SSRB  00FF87C0
                   JOB/USERID  *MASTER*  ASID  0001  TCB   00022A08
                   JOB/USERID  JES2      ASID  0003  TCB   00AACCD0
                   JOB/USERID  ALV0200i  ASID  000A  TCB   00A8C6B0
      WHICH ALSO HOLDS RESOURCES :-
                                    LOCAL LOCK   SEE RESOURCE # 7
                                    CMS LOCK     SEE RESOURCE # 6
                   JOB/USERID  AFH00D    ASID  002A  SSRB  00F9CC10
                   JOB/USERID  HPH01     ASID  002B  TCB   00AAAD50

 _______________________________________________________________________

 SCAN0371          RESOURCE # 3    LOCAL LOCK

    HELD BY     :-
                   JOB/USERID  *MASTER*  ASID  0001  TCB   00022A08

    REQUIRED BY :-
                   JOB/USERID  *MASTER*  ASID  0001  SSRB  00F99238
                   JOB/USERID  *MASTER*  ASID  0001  SSRB  00F9F050
                   JOB/USERID  *MASTER*  ASID  0001  SSRB  00FA1BA8
                   JOB/USERID  *MASTER*  ASID  0001  SSRB  00FF7BF0

 _______________________________________________________________________

 SCAN0371          RESOURCE # 4    LOCAL LOCK

    HELD BY     :-
                   JOB/USERID  JES2      ASID  0003  SSRB  00000000
    REQUIRED BY :-
                   JOB/USERID  JES2      ASID  0003  SSRB  00F99628
                   JOB/USERID  JES2      ASID  0003  SSRB  00F9EE08
                   JOB/USERID  JES2      ASID  0003  SSRB  00FF89B8
                   JOB/USERID  JES2      ASID  0003  SSRB  00FF7DE8

 _______________________________________________________________________

 SCAN0371          RESOURCE # 5    LOCAL LOCK

    HELD BY     :-
                   JOB/USERID  TCAM      ASID  0007  TCB   00AACC40

    REQUIRED BY :-
                   JOB/USERID  TCAM      ASID  0007  SSRB  00F98E08
                   JOB/USERID  TCAM      ASID  0007  SSRB  00FF7FE0
                   JOB/USERID  TCAM      ASID  0007  SSRB  00FF9198

 _______________________________________________________________________

 SCAN0371          RESOURCE # 6    CMS LOCK

    HELD BY     :-
                   JOB/USERID  ALV02001  ASID  000A  TCB   00A8C6B0

    REQUIRED BY :-
                   JOB/USERID  *MASTER*  ASID  0001  SSRB  00F99238
                   JOB/USERID  *MASTER*  ASID  0001  TCB   00022A08
      WHICH ALSO HOLDS RESOURCE  :-
                                    LOCAL LOCK   SEE RESOURCE # 3
                   JOB/USERID  *AUXSTM*  ASID  0002  TCB   00A9F310

 _______________________________________________________________________

 SCAN0371          RESOURCE # 7    LOCAL LOCK

    HELD BY     :-
                   JOB/USERID  ALV02001  ASID  000A  TCB   00A8C6B0

    REQUIRED BY :-
                   JOB/USERID  ALV02001  ASID  000A  SSRB  00FA1540

 _______________________________________________________________________

 SCAN0371          RESOURCE # 8    MAJOR QCB NAME :- SYSDSN
                                   MINOR QCB NAME :- P.MSTR

    HELD BY     :-
                   JOB/USERID  KCS02PRI  ASID  000B  TCB   00AACCB0

    REQUIRED BY :-
                   JOB/USERID  BIJ00002  ASID  000E  TCB   00AACCB0
      WHICH ALSO HOLDS RESOURCE  :-
                                   MAJOR QCB NAME :- SYSDSN
                                   MINOR QCB NAME :- X'01C2' SEE RESOURC

 _______________________________________________________________________

 SCAN0371          RESOURCE # 9    MAJOR QCB NAME :- SYSDSN
                                   MINOR QCB NAME :- X'01C2'

    HELD BY     :-
                   JOB/USERID  BIJ00002  ASID  000E  TCB   00AACCB0

    REQUIRED BY :-
                   JOB/USERID  KCS02PRI  ASID  000B  TCB   00AACCB0
      WHICH ALSO HOLDS RESOURCE :-
                                   MAJOR QCB NAME :- SYSDSN
                                   MINOR QCB NAME :- P.MSTR SEE RESOURCE

 _______________________________________________________________________



    * * * * S T A T U S   O F   G L O B A L   S Y S T E M   L O C K S *


 SCAN0350     LOCK MANAGER IS ACTIVE ON CPU 00


 SCAN0354     UCB LOCK IS HELD ON CPU 00 FOR DEVICE 070E AT ADDRESS 0057


 SCAN0356     DISPATCHER LOCK IS HELD ON CPU 00


 SCAN0358     SRM LOCK IS HELD ON CPU 00


.pa
.subsection 'Instruction Trace Format'

The next  pages show the  format of the simulated  instruction trace
produced by AMDPSLOP when a loop is recognised.

    The  PSW and  instruction  are  printed  before execution  of  the
instruction.

   The registers 0-7  and 8-15 are printed after the  execution of the
previously printed instruction.  The registers are not  printed unless
at least  one register  is changed.  by  the instruction.  Observe the
1807 instruction on  the eighth line of  the sample trace.  This  is a
load register  0 from  7. Note  that the  contents of  register 0  has
changed  and is  the same  as the  contents  of register  7.  The  two
previous  instructions, 40803024  and  50803004,  did not  change  any
register contents, and hence the registers were not printed.

   AMDPSLOP  is not  capable of simulating  all instructions.  When an
unsimulatable   instruction  is   found,   the  message   'UNSUPPORTED
INSTRUCTION. TREATED AS  NOP.' will be printed in the  trace. The user
must then decide whether this instruction has any effect on the loop.
.pa
.sp 2;.fo off
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C2000 00019142    INSTRUCTION 1B88
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C0000 00019144    INSTRUCTION 40803024
PSW 070C0000 00019148    INSTRUCTION 50803004
PSW 070C0000 0001914C    INSTRUCTION 1807
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C0000 0001914E    INSTRUCTION 58F065D0
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0003
PSW 070C0000 00019152    INSTRUCTION 05EF
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0003
PSW 070C0000 0003656A    INSTRUCTION 47F0F006
PSW 070C0000 00036570    INSTRUCTION 0550
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0003
PSW 070C0000 00036572    INSTRUCTION 4AF0F004
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0003
PSW 070C2000 00036576    INSTRUCTION 07FF
PSW 070C2000 000366F0    INSTRUCTION 184E
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0003
PSW 070C2000 000366F2    INSTRUCTION 1820
0-7  00C8E5B8 00C8E840 00C8E5B8 00C8EA88 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0003
PSW 070C2000 000366F4    INSTRUCTION 41000128
0-7  00000128 00C8E840 00C8E5B8 00C8EA88 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0003
PSW 070C2000 000366F8    INSTRUCTION 58F05282
0-7  00000128 00C8E840 00C8E5B8 00C8EA88 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0000
PSW 070C2000 000366FC    INSTRUCTION 05EF
0-7  00000128 00C8E840 00C8E5B8 00C8EA88 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C2000 0000D820    INSTRUCTION 0530
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C2000 0000D822    INSTRUCTION 47F0301A
PSW 070C2000 0000D83C    INSTRUCTION 919010D5
PSW 070C0000 0000D840    INSTRUCTION 4780304A
PSW 070C0000 0000D86C    INSTRUCTION 41F20000
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 00C8
PSW 070C0000 0000D870    INSTRUCTION B1FF0000
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 001C
PSW 070C0000 0000D874    INSTRUCTION 4770307C
PSW 070C0000 0000D878    INSTRUCTION 41F20000
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 00C8
PSW 070C0000 0000D87C    INSTRUCTION 59003082
PSW 070C1000 0000D880    INSTRUCTION 47203068
PSW 070C1000 0000D884    INSTRUCTION 1AF0
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 00C8
PSW 070C2000 0000D886    INSTRUCTION 47F0306C
PSW 070C2000 0000D88E    INSTRUCTION 06F0
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 00C8
PSW 070C2000 0000D890    INSTRUCTION B1FF0000
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 001C
PSW 070C0000 0000D894    INSTRUCTION 4770307C
PSW 070C0000 0000D898    INSTRUCTION 1BFF
0-7  00000128 00C8E840 00C8E5B8 6000D822 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C0000 0000D89A    INSTRUCTION 47F03080
PSW 070C0000 0000D8A2    INSTRUCTION 07FE
PSW 070C0000 000366FE    INSTRUCTION 1F33
0-7  00000128 00C8E840 00C8E5B8 00000000 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C2000 00036700    INSTRUCTION 19F3
PSW 070C0000 00036702    INSTRUCTION 477051E4
PSW 070C0000 00036706    INSTRUCTION 910F201C
PSW 070C0000 0003670A    INSTRUCTION 477051E4
PSW 070C0000 0003670E    INSTRUCTION 18F3
PSW 070C0000 00036710    INSTRUCTION 5830528E
0-7  00000128 00C8E840 00C8E5B8 0000F8B0 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C0000 00036714    INSTRUCTION 1923
PSW 070C2000 00036716    INSTRUCTION 478051E8
PSW 070C2000 0003671A    INSTRUCTION D5032100529E
PSW 070C2000 00036720    INSTRUCTION 478051B6
PSW 070C2000 00036724    INSTRUCTION 4AF05274
0-7  00000128 00C8E840 00C8E5B8 0000F8B0 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C2000 00036728    INSTRUCTION 41300128
0-7  00000128 00C8E840 00C8E5B8 00000128 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C2000 0003672C    INSTRUCTION 1E32
0-7  00000128 00C8E840 00C8E5B8 00C8E6E0 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 600366FE 0000
PSW 070C1000 0003672E    INSTRUCTION 593020D0
PSW 070C0000 00036732    INSTRUCTION 478051C8
PSW 070C0000 0003673A    INSTRUCTION B1E02000
0-7  00000128 00C8E840 00C8E5B8 00C8E6E0 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 001C45B8 0000
PSW 070C0000 0003673E    INSTRUCTION 478051D4
PSW 070C0000 00036746    INSTRUCTION 41300008
0-7  00000128 00C8E840 00C8E5B8 00000008 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 001C45B8 0000
PSW 070C0000 0003674A    INSTRUCTION 19F3
PSW 070C1000 0003674C    INSTRUCTION 47D051E8
PSW 070C1000 0003675A    INSTRUCTION 1802
0-7  00C8E5B8 00C8E840 00C8E5B8 00000008 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 001C45B8 0000
PSW 070C1000 0003675C    INSTRUCTION 18E4
0-7  00C8E5B8 00C8E840 00C8E5B8 00000008 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0000
PSW 070C1000 0003675E    INSTRUCTION 47F0509E
PSW 070C1000 00036610    INSTRUCTION 07FE
PSW 070C1000 00019154    INSTRUCTION 1870
PSW 070C1000 00019156    INSTRUCTION 9823D01C
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 40019154 40036572 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0000
PSW 070C1000 0001915A    INSTRUCTION 5860D02C
PSW 070C1000 0001915E    INSTRUCTION 12FF
PSW 070C2000 00019160    INSTRUCTION 478064D0
PSW 070C2000 00019164    INSTRUCTION 92043025
PSW 070C2000 00019168    INSTRUCTION 58702004
PSW 070C2000 0001916C    INSTRUCTION 59B07084
PSW 070C0000 00019170    INSTRUCTION 47706486
PSW 070C0000 00019174    INSTRUCTION 50703004
PSW 070C0000 00019178    INSTRUCTION 59807080
PSW 070C0000 0001917C    INSTRUCTION 47706486
PSW 070C0000 00019180    INSTRUCTION 1887
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 40019154 40036572 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0000
PSW 070C0000 00019182    INSTRUCTION 47F06468
PSW 070C0000 00019168    INSTRUCTION 58702004
PSW 070C0000 0001916C    INSTRUCTION 59B07084
PSW 070C0000 00019170    INSTRUCTION 47706486
PSW 070C0000 00019174    INSTRUCTION 50703004
PSW 070C0000 00019178    INSTRUCTION 59807080
PSW 070C2000 0001917C    INSTRUCTION 47706486
PSW 070C2000 00019186    INSTRUCTION BF7F7074
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 40019154 40036572 00018D00 0000
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0000
PSW 070C0000 0001918A    INSTRUCTION 4770646C
PSW 070C0000 0001918E    INSTRUCTION 1288
PSW 070C2000 00019190    INSTRUCTION 477064F8
PSW 070C2000 000191F8    INSTRUCTION 91808021
PSW 070C0000 000191FC    INSTRUCTION 47806508
PSW 070C0000 00019208    INSTRUCTION 98E7D00C
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C0000 0001920C    INSTRUCTION 989CD038
PSW 070C0000 00019210    INSTRUCTION 48F03024
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C0000 00019214    INSTRUCTION 07FE
PSW 070C0000 000190BA    INSTRUCTION 12FF
PSW 070C2000 000190BC    INSTRUCTION 478063DA
PSW 070C2000 000190C0    INSTRUCTION 584065DC
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 D5E3C340 00000001 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C2000 000190C4    INSTRUCTION 45E06516
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 D5E3C340 00000001 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C2000 00019216    INSTRUCTION 5040300C
PSW 070C2000 0001921A    INSTRUCTION BF4F3008
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C2000 0001921E    INSTRUCTION 4780656C
PSW 070C2000 00019222    INSTRUCTION 1B55
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000000 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C0000 00019224    INSTRUCTION 43504002
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000001 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C0000 00019228    INSTRUCTION 41505001
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C0000 0001922C    INSTRUCTION 42504002
PSW 070C0000 00019230    INSTRUCTION 9045301C
PSW 070C0000 00019234    INSTRUCTION 91803026
PSW 070C3000 00019238    INSTRUCTION 4710656C
PSW 070C3000 0001926C    INSTRUCTION 07FE
PSW 070C3000 000190C8    INSTRUCTION 95043025
PSW 070C0000 000190CC    INSTRUCTION 477063AE
PSW 070C0000 000190D0    INSTRUCTION 5080A080
PSW 070C0000 000190D4    INSTRUCTION 1278
PSW 070C2000 000190D6    INSTRUCTION 478063E0
PSW 070C2000 000190DA    INSTRUCTION 18A7
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00C8E5B8 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C2000 000190DC    INSTRUCTION 47F0636A
PSW 070C2000 0001906A    INSTRUCTION 50B0A084
PSW 070C2000 0001906E    INSTRUCTION BF7FA088
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 0000
8-15 00C8E5B8 0003DCEA 00C8E5B8 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C0000 00019072    INSTRUCTION 478063AE
PSW 070C0000 000190AE    INSTRUCTION BF7FA080
PSW 070C0000 000190B2    INSTRUCTION 478063E0
PSW 070C0000 000190E0    INSTRUCTION 59B020A4
PSW 070C1000 000190E4    INSTRUCTION 478063F2
PSW 070C1000 000190E8    INSTRUCTION 18AB
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 0000
8-15 00C8E5B8 0003DCEA 00000000 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C1000 000190EA    INSTRUCTION 58B0B084
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 0000
8-15 00C8E5B8 0003DCEA 00000000 00001004 00000001 00C8EAD8 A00190C8 0000
PSW 070C1000 000190EE    INSTRUCTION 47F063AE
PSW 070C1000 000190AE    INSTRUCTION BF7FA080
PSW 070C0000 000190B2    INSTRUCTION 478063E0
PSW 070C0000 000190E0    INSTRUCTION 59B020A4
PSW 070C1000 000190E4    INSTRUCTION 478063F2
PSW 070C1000 000190E8    INSTRUCTION 18AB
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 0000
8-15 00C8E5B8 0003DCEA 00001004 00001004 00000001 00C8EAD8 A00190C8 0000
PSW 070C1000 000190EA    INSTRUCTION 58B0B084
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 0000
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C1000 000190EE    INSTRUCTION 47F063AE
PSW 070C1000 000190AE    INSTRUCTION BF7FA080
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190C8 0000
PSW 070C2000 000190B2    INSTRUCTION 478063E0
PSW 070C2000 000190B6    INSTRUCTION 45E0643E
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00C8E5B8 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C2000 0001913E    INSTRUCTION 90ECD00C
PSW 070C2000 00019142    INSTRUCTION 1B88
0-7  00C8E840 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C0000 00019144    INSTRUCTION 40803024
PSW 070C0000 00019148    INSTRUCTION 50803004
PSW 070C0000 0001914C    INSTRUCTION 1807
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0000
PSW 070C0000 0001914E    INSTRUCTION 58F065D0
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 A00190BA 0003
PSW 070C0000 00019152    INSTRUCTION 05EF
0-7  00C8E5B8 00C8E840 00C8F348 00C8EA88 00C8EAD0 00000002 00018D00 00C8
8-15 00000000 0003DCEA 00001004 00000000 00000001 00C8EAD8 40019154 0003
PSW 070C0000 0003656A    INSTRUCTION 47F0F006
