.section 'IDACATCK (VSAM Catalog Check)'
.ix IDACATCK
.ix Programs IDACATCK
.ix VSAM IDACATCK
.sp 2
.subsection 'Description'
.sp
                             Diagnosis


    The basic tool you can  use to determine  what is wrong  with a
    catalog is IDACATCK. This program is a catalog analysis program
    which validity checks catalog records  for proper  chaining and
    content. IDACATCK   will  identify  common  types   of  catalog
    corruption and many others  not so  common. However,  it cannot
    check everything so there may be some dammage which it will not
    identify. Also, you  must  be aware  that  IDACATCK cannot  run
    against a catalog that is damaged to  the point where it  is no
    longer a valid VSAM dataset. Generally  this type of  damage is
    caused by an overlay  of catalog records  with some  other data
    causing physical I/O errors attempting to access the data. This
    document does not attempt to provide guidance to  the repair of
    this type of damage.
    *****************************************************************
    *                         IDACATCK                              *
    *****************************************************************

.subsection 'Execution JCL:'

    PARM=    - This version of IDACATCK will allow two parameters to
               be passed. The parameters are positional and must be
               separated by a comma. See sample JCL for details.
    STEPCAT  - The catalog to be checked
    STEPLIB  - The authorized library containing the checker program,
               unless it is in the system lnklst.
    SYSPRINT - A sysout data set used for program messages
    SNAP     - A sysout data set used for SNAP macros
    SYSUDUMP - A sysout data set used in case of abnormal termination
    VSAMCAT  - The catalog to be checked
     * Note that the catalog must be referenced in both the STEPCAT
        and the VSAMCAT DD statements. *

.cp 10
        Sample JCL

        //CATCHK   EXEC PGM=IDACATCK,PARM='XXXXXXXX,YYYYYY'
        //STEPCAT  DD DSN=TEST.CAT,DISP=SHR
        //SYSPRINT DD SYSOUT=A
        //STEPLIB  DD DSN=SYS1.MVSAPF,DISP=SHR
        //SNAP     DD SYSOUT=A
        //SYSUDUMP DD SYSOUT=A
        //VSAMCAT  DD DSN=TEST.CAT,DISP=SHR

.subsection 'Format of the parm field'

        xxxxxxxx is the password and may be up to 8 characters. If
                 more than 8 characters are passed only the first 8
                 are used.

        yyyyyy   is a volume serial number of a volume owned by this
                 catalog. This field may be up to 6 characters and
                 if greater than six characters is passed an ABENDU999
                 will occur. Also if a comma is present but no volser
                 is passed an ABENDU999 will occur. If an '*' is
                 passed in this field all volumes owned by this ucat
                 will have their volume structures printed.

       Comments - be sure that no jobs are updating the catalog while
                  the checker is running. If update/define/delete/alter
                  activity is going on while checker PGM is running,
                  error messages may occur when no errors really exist.

.subsection 'Output:'

    If no errors  are found,  the only  output will  be a  one-page
    statistical summary, showing how many records of each type were
    found in the catalog.   If errors are  found, the  program will
    produce messages, dumps of  catalog records,  snaps, and/or  an
    abend dump. Messages followed by  catalog record dumps  are the
    usual case. Use  the  message  section following  to  interpret
    these.  Note that  the message  ids correspond  to the  nearest
    label in the program before the message was produced,  so it is
    easy to find  the  code which  detected  that particular  error
    condition.

    Or

    If a volume serial number or a  //* is passed via the 'PARM' field
    of the 'EXEC' statement, there will be no statistical summary
    printed, as statistics are not collected during this function.
    The only output from this type of request will be a print of the
    volume structure for the requested volume (s) in the following
    format.

    V100    this record is the volume record for the volume serial
            number requested.

    W150    this record is a volume extension record (w) that is in
            the vertical chain of volume extension records.

    W100    this record is a volume extention record (w) that is in
            the horizontal chain of volume extension records.

    Programmer action:

    If errors are detected, the program generally produces a suffi-
    cient amount of information to allow the problem to be analysed.
    If not, one or more of the following might help:
    1. IEHDASDR or AMSAPZAP dump to SYSPRINT of parts of catalog.
    2. AMS Print of parts of catalog (use count, fromkey, and
       tokey to restrict output).
    3. IDACATFX dump or display of parts of the catalog either
       by CI number or RBA.
    4. IDACATFX dump of the index portion of the catalog. (IDACATFX
       Is the only tool that will provide this)
    5. VSAM Record management trace facility. (IDATRACE)
    6. Catalog management CVT trap (see diagnostic aids section of
       catalog management plm or catalog section of MVS Debugging
       Techniques).

    Once the problem has been analysed, you must  decide whether or
    not to attempt to repair the catalog. Generally  it is possible
    to use IDACATFX for this  repair. If  this is to  be attempted,
    note the following points:

    1.  Back up the catalog volume with IEHDASDR before attempting
        the fix, if the master catalog is involved. For complex zaps
        this may also be a good idea, since a restore may be simpler
        than an un-zap.  It also provides you with a 'checkpoint' in
        case the fix appears to work but you find out later that there
        are still problems.

    2.  After running IDACATFX, re-run the catalog checker to see
        whether the previously detected errors have gone.

    3.  Try some catalog operations - LOCATE, DEFINE, DELETE, LISTCAT.
        These will access the catalog in a different way to the cata-
        log checker and will provide further tests.

    If it is not possible to repair with IDACATFX, catalog recovery
    via rebuild will be necessary unless you have a good back up of
    the catalog available. (DASDR dump or REPRO tape). Also, if your
    catalog is recoverable you may be able to rebuild using RESETCAT
    and EXPORTRA/IMPORTRA. If  you plan to use REPRO  on a catalog,
    be sure to read the  AMS manual very  carefully - not  just the
    'Command Format' section, but  also the  general discussion  on
    catalog REPRO earlier in the manual.

.subsection 'Messages Section:'

    The messages produced by this program consist  of an alphabetic
    prefix followed by a numeric three digit message id. The prefix
    identifies the functional part of the catalog  being checked by
    the program. Along with  the message id  it corresponds  to the
    label in the program preceeding the section of  logic where the
    condition was detected

    Message prefixes

    A =  critical CCR fields
    B =  CCR and FREE records
    D =  GDG base records and associations
    E =  cluster records and associations
    F =  volume records
    G =  non-VSAM records and associations
    H =  alternate index records and associations
    I =  user catalog records and associations
    U =  key validation
    V =  volume record requested by the volume print option.
    W =  volume extension record requested by volume print option
    X = 'dead' records

    SNAP Ids
    000
    030
    035
    040

    Message ids

    A030
      Summary - the CCRNFCI field in the CCR, which should point after
                the last formatted low key range record, points after
                a record which is not a low key range record.
      Meaning - in a correct catalog, the formatted low key range
                records are followed by unformatted ones which appear
                as empty CIS (not accessible via keyed processing).
                Immediately after these in the data component should
                be the first record of the high keyrange. The CCRNFCI
                field should point to the first unformatted record.
                The program subtracts one from the CCRNFCI value and
                uses the result as a key for a direct get. This should
                retrieve the last formatted record in the low keyrange,
                and a following seqential get should give the first
                record in the high keyrange. If the direct get does not
                give a low keyrange record, message A030 is produced.
                The program checks for x'00' in the first byte of the
                record to determine whether it is a low keyrange
                record.
      Program action -
                two catalog records are printed:
            1.  The CCR
            2.  The non-low keyrange record which was retrieved by the
                direct get. The program then goes back to the beginning
                of the low keyrange and attempts to find the 'break
                point' between the low and high keyranges. If it is
                successful, message A060 will appear. If not no further
                messages will appear and the program will terminate.
    A035
      Summary - the CCRNFCI field in the CCR, which should point after
                the last formatted low keyrange record, points after a
                record which is a low keyrange record but is not the
                last formatted low keyrange record.
      Meaning - in a correct catalog the formatted low keyrange records
                are followed by unformatted ones which appear as empty
                CIS (not accessible via keyed processing). Immediately
                after these in the data component should be the first
                record of the high keyrange. The CCRNFCI field should
                point to the first unformatted record.
                The program subtracts one from the CCRNFCI value and
                uses the result as a key for a direct get. This should
                retrieve the last formatted record in the low keyrange,
                and a following sequential get should give the first
                record in the high keyrange.  If the direct get gives
                a low keyrange record, but the sequential get gives a
                record which is not a high keyrange record, message
                A035 is produced. The CCRNFCI value is too low.
      Program action -
                two catalog records are printed.
            1.  The CCR
            2.  The record which should have been a high keyrange rec-
                ord, but was not.
                The program then reads forward sequentially and attem-
                pts to find the 'break point' between the low and high
                keyranges.  If it is successful, message A060 will
                appear. If not, no further messages will appear and the
                program will terminate.
    A060
      Summary - the CCRNFCI field in the CCR is incorrect, but the
                beginning of the high keyrange is accessible.
      Meaning - this message should be proceeded by A030 or A035.
                Read the descriptions of these messages before
                proceeding further. The program has succeeded in
                finding the start of the high keyrange even though
                the CCRNFCI field is incorrect, by reading the cata-
                log sequentially.  It detects the start of the high
                keyrange by a check for a key beginning with x'40'
                or higher.

      Program action -
                these records are printed:
            1.  The CCR
            2.  The last low keyrange record (key less than x'40')
            3.  The first high keyrange record.
                After printing these records, the program terminates.
                The CCR must be corrected before the program can be
                rerun. This is because the program relies on a correct
                CCRNFCI field for validating catalog key values.
    B010
      Summary - a low keyrange record in the 'FREE due to deletion'
                chain is not a FREE record.
      Meaning - the program reads the CCR and uses its CCRFDCI field
                to get to the start of the 'FREE due to deletion'
                chain. While following this chain it found a record
                which did not have a ENTYPE field of 'F'.
      Program action -
                three catalog records are printed:
            1.  The CCR
            2.  The FREE record whose forward pointer points to the
                record in error, if applicable. If the first record
                in the chain is in error, zeroes will be printed
                since there is no FREE record pointing to the one in
                error.
            3.  The record in error. This is the record which should
                have a ENTYPE field of 'F' but does not.
                After printing the three records, the program contin-
                ues, but no further inspection of FREE records is
                attempted.  This is because this condition means
                that the data in the field in the record in error
                is probably wrong.
                Note: this message will appear for a catalog with no
                FREE chain (i.e. No defines have been done in a new
                catalog, or there are no records left on FREE chain).
                In this case the FREE chain pointer in the CCR is
                equal to zero and the third CI printed is CI 0.
                If the record in error has, for example, a ENTYPE
                of 'D' a later message may show it as a 'dead'
                record if no other catalog record points to it.
                If the error has caused a break in the FREE chain
                some FREE records may also be shown as 'dead'
                records.
      Some possible causes -
            1.  A system failure which interrupts a define or
                delete (or catlg or unctlg, under MVS).
            2.  Incorrect catalog integrity when the catalog is
                shared between cpus.
            3.  A system bug.
      Action  - unless the record in error is at the top of the
                FREE chain, it should still be possible to define
                and delete catalog entries.  If the record in
                error is at the top of the chain, the next define
                will cause the value of the forward pointer to be
                put into the CCR, since this is the way catalog
                managements removes entries from the FREE chain.
                If this occurs, further defines will not be poss-
                ible, since the CCR pointer to the start of the
                FREE chain is incorrect. Deletes are possible, but
                use of delete merely pushes the error further down
                the chain - it will cause problems when it reaches
                the top of the chain again.
                One possible action is to zap the catalog so that
                the FREE chain is correct. To do this the user
                must first decide where the incorrect pointer should
                point by following the rest of the FREE chain. For
                large catalogs this is very tedious and recovering
                the whole catalog may be faster.
                If zapping is not practical, recovery of the whole
                catalog is the only permanent solution. Ater zapping,
                the user should rerun the catalog validity checker to
                ensure that the zap has not created new problems.
      Obtaining further information -
                these tools may be useful:
            1.  AMS Print of the low keyrange (TOKEY = x '3F').
            2.  IEHDASDR or AMSAPZAP print of the low keyrange, using
                dump to SYSPRINT. These are not as simple to use as
                AMS but have the advantage of providing dasd addresses
                on the output which are useful for devising zaps.
            3.  LISTCRA COMPARE (recoverable catalogs only) will
                indicate whether exportra/importra is a potential
                recovery technique.
    B015
      Summary - there is a loop in the 'FREE due to deletion' chain
                in the low keyrange.
      Meaning - the program has read the same record with an ENTYPE
                of 'F' twice while following the FREE chain.
      Program action -
                three catalog records are printed:
            1.  The CCR
            2.  A FREE catalog record which points to the record desc-
                ribed below (3).
            3.  The FREE catalog record which points to a catalog
                record which has already been read. Note that the
                record at the top of the loop is not actually read
                twice - the loop condition is detected without a
                need to read the record the second time.
                After printing the three records, the program
                continues, but no further inspection of FREE records
                is attempted.
                If the loop has caused a break in the FREE chain, some
                FREE records may show up as 'dead' records in later
                messages.
    C020
      Summary - the ENTYPE field of a low keyrange record pointed to
                directly from the high keyrange was invalid (ie. Not
                one of the following: B, D, V, A, G, or U) or a
                print of the volume records for volume serial number
                passed in the parm field did not result in locating
                a volume record in the low key range.
      Meaning - the program reads sequentially through the high key-
                range. Each high keyrange record contains a CI number,
                which is used to generate a key for a direct get into
                the low keyrange. The low keyrange record retrieved
                should be either a GDG base (B), cluster (C), volume
                (V), non-VSAM (A), alternate index (G), or user cata-
                log record (U). If it is not, message C020 is produced.
      Program action -
                two catalog records are printed:
            1.  The high keyrange record.
            2.  The low keyrange record it points to.
                After this, the program continues with the next high
                keyrange record. The low keyrange record will appear
                in a later message as a 'dead' record unless it is
                validly pointed to by some other catalog record.
    D010
      Summary - the entname field of a low keyrange GDG base record
                does not match the key of the high keyrange record
                which points to it.
      Meaning - the program reads sequentially through the high key-
                range. Each high keyrange record contains a CI number,
                which is used to generate a key for a direct get into
                the low keyrange. For a GDG base record, the high key-
                range record's key value should be the GDG name, and
                the entname field in the low keyrange record should
                also contain this same name.
      Program action -
                two catalog records are printed:
            1.  The high keyrange record.
            2.  The low keyrange record it points to.
                After this the program continues processing this GDG
                base record.
    D045
      Summary - a GDG base record contains a set of fields pointer
                indicating that a set of fields is in a vertical
                extension record, but the record referred to does
                not have an ENTYPE of 'E'.
      Meaning - the program uses the vertical extention record poin-
                ter in the set of fields pointer to do a direct get,
                expecting to obtain an extension record (ENTYPE =
                = 'E'). But the record returned was of a different
                type.
      Program action -
                two catalog records are printed:
            1.  The GDG base record.
            2.  The record which should have been an extension rec-
                ord, but was not.
                The program continues processing with the next set
                of fields pointer in the same GDG base record.
                Other messages, or further occurrances of D045, may
                occur due to this error condition. Also, the record
                which should have been an extension record will show
                up as a 'dead' record in other messages, unless some
                other record points to it correctly.
    D080
      Summary - a GDG base record contains an association pointer
                which points to a record which is not a non-VSAM
                record (ENTYPE = 'A').
      Meaning - the program uses the association pointer to do a
                direct get, expecting to obtain a non-VSAM record
                (ENTYPE = 'A'). But the record returned was of a
                different type.
      Program action -
                two catalog records are printed:
            1.  The GDG base record.
            2.  The record which should have been a non-VSAM record,
                but was not.
                The program continues processing with the next set
                of fields pointer in the same GDG base record.
                Other messages, or further occurrances of D080,
                may occur due to this error condition. Also, the
                record which should have been a non-VSAM record
                will show up as a 'dead' record in other mess-
                ages, unless some other record points to it
                correctly.

    D085
      Summary - a GDG base record contained an association pointer
                which pointed to a non-VSAM record (ENTYPE='A') and
                that non-VSAM record has an association pointer in
                an extension record (ENTYPE='E') but the record read
                was not an extension record.

      Meaning - the program uses the association pointer in the non-
                VSAM record to do a direct get expecting to obtain
                an 'E' record but the record read was of a different
                record type.
      Program action-
                three records are printed:
           1.  The GDG base record
           2.  The non-VSAM record
           3.  The record that should have been an 'E' record but
               was not.
               The program continues with the next set of fields in
               the same GDG base record. Other messages or further
               occurrances of D085 may occur due to this condition.

    D100
      Summary - the data set name in a non-VSAM record associated
                with a GDG base record is either a single-level
                name or is a multiple-level name with a first
                level which is not the same length as the GDG base
                name.
      Meaning - the program has found an association pointer in a
                GDG base record which points to a non-VSAM record.
                It determines the length of the GDG base name and
                then tests the first character after the equival-
                ent length within the non-VSAM name. Since the GDG
                base name should be equal to the first level of
                qualification of the non-VSAM name (which should
                also be multi-level), this character should be a
                '.'. If it is not, message D100 is produced.
      Program action -
                three catalog records are printed:
            1.  The high keyrange record which pointed to the GDG
                base record.
            2.  The GDG base record which pointed to the non-VSAM
                record.
            3.  The non-VSAM record.
                The program continues processing the non-VSAM
                record.
    D105
      Summary - the GDG name in a GDG base record was not equal to
                the first level of qualification in the entname
                field of the associated non-VSAM record.
      Meaning - the program has found an association pointer in a
                GDG base record which points to a non-VSAM record.
                It has performed the tests associated with message
                id D100. It then compares the GDG base name with
                the equivalent characters in the non-VSAM name.
                An unequal COMPARE results in message D105.
      Program action -
                three catalog records are printed:
            1.  The high keyrange record which pointed to the GDG
                base record.
            2.  The GDG base record which pointed to the non-VSAM
                record.
            3.  The non-VSAM record.
                The program continues processing the non-VSAM record.
                This message may be preceeded by D100.
    D110
      Summary - the GDG association pointer in a non-VSAM record
                which is pointed to by a GDG base record does not
                point back to that GDG base record.
      Meaning - the program checks for a two-way connection between
                the GDG base record and the associated non-VSAM re-
                cord. If the GDG base's non-VSAM association pointer
                points to a non-VSAM record (ENTYPE = 'A') and the
                first level of qualification of the non-VSAM name
                is equal to the GDG base name but the non-VSAM
                record's GDG association pointer does not point to
                the original GDG base, message D110 is produced.
      Program action -
                two catalog records are printed:
            1.  The GDG base record.
            2.  The non-VSAM record.
                The program then continues processing the non-VSAM
                record.
    D115
      Summary - a non-VSAM record (ENTYPE = 'A') pointed to by a non-
                VSAM  association pointer in a GDG base record does
                not contain a GDG association pointer.
      Meaning - the program checks all the association sets of fields
                in the non-VSAM record. If it does not find a GDG
                association pointer either in the non-VSAM record or
                in an extension record message D115 is issued.
      Program action -
                three catalog records are printed:
            1.  The GDG base record.
            2.  The non-VSAM record.
                The program then continues processing the GDG base
                record. No further work is done with the non-VSAM
                record.
            3.  The extension record that should have contained the
                association. (This record is only printed when the
                pointer indicates it is in an extension record)
    D135
      Summary - a GDG base (ENTYPE = 'B'), extension (ENTYPE = 'E')
                or non-VSAM (ENTYPE = 'A') record contained a hori-
                zontal extension pointer, but the record pointed to
                is not an extension record (ENTYPE = 'E').
      Meaning - the program uses the horizontal extension record
                pointer in the set of field's pointer to do a direct
                get, expecting to obtain an extension record. But
                the record returned was of a different type.
      Program action -
                two catalog records are printed:
            1.  The record containing the horizontal pointer.
            2.  The record which should have been an extension record,
                but was not.
                The program then continues processing by moving to the
                next high keyrange record. No further processing of
                this group of records is attempted.
                The record which should have been an extension record
                will show up as a 'dead' record in other messages,
                unless some other record points to it correctly.
    E010
      Summary - the entname field of a low keyrange cluster record
                does not match the key of the high keyrange record
                which points to it.
      Meaning - the program reads sequentially through the high key-
                range. Each high keyrange record contains a CI number,
                which is used to generate a key for a direct get into
                the low keyrange. For a cluster record, the high key-
                range record key value should be the cluster name, and
                the entname field in the low keyrange record should
                also contain this same name.
      Program action -
                two catalog records are printed:
            1.  The high keyrange record.
            2.  The low keyrange record it points to.
                After this the program continues processing this
                cluster record.
    E045
      Summary - a cluster record contains a set of fields pointer
                indicating that a set of fields is in a vertical
                extension record, but the record referred to does
                not have an ENTYPE of 'E'.
      Meaning - the program uses the vertical extension record point-
                er in the set of field's pointer to do a direct get,
                expecting to obtain an extension record (ENTYPE ='E').
                But the record returned was of a different type.
      Program action -
                two catalog records are printed:
            1.  The cluster record.
            2.  The record which should have been an extension record,
                but was not.
                The program continues processing with the next set of
                fields pointer in the same cluster record.
                Other messages, or further occurrance of e045, may
                occur due to this error condition. Also, the record
                which should have been an extension record will show
                up as a 'dead' record in other messages, unless some
                other record points to it correctly.
    E080
      sumary  - a cluster record contains an association pointer
                which points to a record which is not an index record
                (ENTYPE = 'I'), data record (ENTYPE = 'D'), alternate
                index record (ENTYPE = 'G'), or a path record (ENTYPE
                = 'R').
      Meaning - the program uses the association pointer to do a
                direct get, expecting to obtain one of the record
                types listed above. But the record returned was of a
                different type.
      Program action -
                two catalog records are printed:
            1.  The cluster record.
            2.  The record which should have been one of the listed
                record types, but was not.
                The program continues processing with the next set
                of fields pointer in the same cluster record.
                Other messages, or further occurrance of e080, may
                occur due to the error condition. Also, the record
                which should have been one of the listed types will
                show up as a 'dead' record in other messages, unless
                some other record points to it correctly.
    E125
      Summary - an index (ENTYPE = 'I'), data (ENTYPE = 'D'), alter-
                native index (ENTYPE = 'G'), or path (ENTYPE = 'R')
                record associated with a cluster record contains a
                vertical or horizontal set of fields pointer indi-
                cating that a set of fields is in an extension record,
                but the record referred to does not have an ENTYPE of
                'E'.
      Meaning - the program uses the vertical or horizontal extension
                record pointer in the set of fields pointer to do a
                direct get, expecting to obtain an extension record
                (ENTYPE = 'E'). But the record returned was of a diff-
                erent type.
      Program action -
                two catalog records are printed:
            1.  The record containing the vertical or horizontal
                extension pointer.
            2.  The record which should have been an extension record,
                but was not.
                The record which should have been an extension record
                will show up as a 'dead' record in other messages,
                unless some other record points to it correctly.
    E175
      Summary - an index (ENTYPE = 'I'), data (ENTYPE = 'D'), alter-
                nate index (ENTYPE = 'G'), on path (ENTYPE ='R')
                record associated with a cluster record does not
                point to that cluster record.
      Meaning - the program checks for a two-way connection between
                the cluster record and associated index, data, alter-
                nate index, or path records. If the associated record
                contains a backwards (association) pointer but the
                pointer does not point to the original cluster rec-
                ord, message E175 is produced.
      Program action -
                two catalog records are printed:
            1.  The cluster record.
            2.  The associated record (index, data, alternate index,
                or path).
                The program then continues processing the associated
                record.
    E185
      Summary - an index (ENTYPE = 'I') , data (ENTYPE = 'D'), alt-
                ernate index (ENTYPE = 'E'), or path (ENTYPE = 'R'),
                record pointed to by a cluster record does not con-
                tain a cluster association pointer.
      Meaning - the program checks all the association sets of fields
                in the index, data, alternate index, or path record.
                If it does not find a cluster association pointer,
                message E185 is produced.
      Program action -
                two catalog records are printed:
            1.  The cluster record.
            2.  The associated record (index, data, alternate index,
                or path).
                The program then continues processing the cluster rec-
                ord. No more work is done with the associated record.
    E205
      Summary - a cluster (ENTYPE = 'C') or cluster extension (ENTYPE=
                'E') record contained horizontal extension pointer, but
                the record pointed is not an extension record (ENTYPE
                = 'E').
     Meaning - the program uses the horizontal extension record pointer
               in the set of fields pointer to do a direct get, expect-
               ing to obtain an extension record. But the record retur-
               ned was of a different type.
      Program action -
                two catalog records are printed:
            1.  The record containing the horizontal pointer.
            2.  The record which should have been an extension record,
                but was not.
                The program then continues processing by moving to the
                next high keyrange record. No further processing of
                this group of records is attempted.
                The record which should have been an extension record
                will show up as a 'dead' record in other messages,
                unless some other record points to it correctly.
    F010
      Summary - the entname field of a low keyrange volume record does
                not match the key of the high keyrange record which
                points to it.
      Meaning - the program reads sequentially through the high key-
                range. Each high keyrange record contains a CI number,
                which is used to generate a key for a direct get into
                the low keyrange. For a volume record, the high key-
                range record's key value should be the volume serial
                and the entname field in the low keyrange record should
                also contain this same name.
      Program action -
                two catalog records are printed:
            1.  The high keyrange record.
            2.  The low keyrange record it points to.
                After this the program continues processing this volume
                record.
    F040
      Summary - a volume record contains a set of fields pointer indic-
                ating that a set of fields is in a vertical extension
                record, but the record referred to does not have an
                ENTYPE of 'W'.
      Meaning - the program uses the vertical extension record pointer
                in the set of fields pointer to do a direct get, expec-
                ting to obtain an extension record (ENTYPE = 'W'). But
                the record returned was of a different type.
      Program action -
                two catalog records are printed:
            1.  The volume record.
            2.  The record which should have been an extension record,
                but was not.
                The program continues processing with the next set of
                fields pointer in the same volume record.
                Other messages, or further occurrance of F040, may
                occur due to the error condition. Also, the record
                which should have been an extension record will show
                up as a 'dead' record in other messages, unless some
                other record points to it correctly.
    F100
      Summary - a volume record contains a set of fields pointer
                indicating that a set of fields is in a horizontal
                extension record, but the record referred to does not
                have an ENTYPE of 'W'.
      Meaning - the program uses the horizontal extension record poin-
                ter in the set of fields pointer to do a direct get,
                expecting to obtain an extension record (ENTYPE ='W').
                But the record returned was of a different type.
      Program action -
                two catalog records are printed:
            1.  The volume record.
            2.  The record which should have been an extension record,
                but was not.
                The program continues processing with the next set of
                fields pointer in the same volume record.
                Other messages, or further occurrance of F100, may
                occur due to this error condition. Also, the record
                which should have been an extension record will show
                up as a 'dead' record in other messages, unless some
                other record points to it correctly.
    G010
      Summary - the entname field of a low keyrange non-VSAM record
                does not  match the key of the high keyrange record
                which points to it.
      Meaning - the program reads sequentially through the high key-
                range. Each high keyrange record contains a CI number,
                which is used to generate a key for a direct get into
                the low keyrange. For a non-VSAM record, the high key-
                range record's key value should be the data set name,
                and the entname field in the low keyrange record
                should also contain this same name.
      Program action -
                two catalog records are printed:
            1.  The high keyrange record.
            2.  The low keyrange record it points to.
                After this the program continues processing this non-
                VSAM record.
    G045
      Summary - a non-VSAM record contains a set of fields pointer
                indicating that a set of fields is in a vertical
                extension record, but the record referred to does
                not have an ENTYPE of 'E'.
      Meaning - the program uses the vertical extension record poin-
                ter in the set of fields pointer to do a direct get,
                expecting to obtain an extension record (ENTYPE ='E').
                But the record returned was of a different type.
      Program action -
                two catalog records are printed:
            1.  The non-VSAM record.
            2.  The record which should have been an extension record,
                but was not.
                The program continues processing with the next set of
                fields pointer in the same record.
                Other messages, or further occurrance of G045, may
                occur due to this error condition. Also, the record
                which should have been an extension record will show
                up as a 'dead' record in other messages, unless some
                other record points to it correctly.
    G085
      Summary - a non-VSAM record contains an association pointer
                which points to a record which is not an alias record
                (ENTYPE = 'X') or a GDG base record (ENTYPE = 'B').
      Meaning - the program uses the association pointer to do a
                direct get, expecting to obtain an alias or GDG base
                record. But the record returned was of a different
                type.
      Program action -
                two catalog records are printed:
            1.  The non-VSAM record.
            2.  The record which should have been an alias or GDG
                base record, but was not.
                The program continues processing with the next set
                of fields pointer in the same non-VSAM record.
                Other messages, or further occurrance of G085, may
                occur due to the error condition. Also, the record
                which should have been an alias or GDG base record
                will show up as a 'dead' record in other messages,
                unless some other record points to it correctly.
    G105
      Summary - an association in an alias record has a type field
                which is neither 'A' (non-VSAM) nor 'X' (alias chain).
      Meaning - the program reads alias records which are pointed to
                by non-VSAM records as a part of non-VSAM record
                checking. If an alias record is found with associa-
                tion fields which do not represent non-VSAM (a poin-
                ter back to the original non-VSAM record) or alias
                (a pointer to another alias record associated with the
                same non-VSAM record), message G105 is produced.
      Program action -
                two catalog records are printed:
            1.  The non-VSAM record which points to the alias record
                in error.
            2.  The alias record in error.
                The program continues processing with the next set of
                fields pointer in the alias record.
    G110
      Summary - the non-VSAM association pointer in an alias record
                (ENTYPE = 'X') which is pointed to by a non-VSAM
                record (ENTYPE = 'A') does not point back to that
                non-VSAM record.
      Meaning - the program checks for a two-way connection between
                the non-VSAM record and the associated alias record.
                If the non-VSAM record's alias association pointer
                points to an alias record but the alias record's non-
                VSAM record association pointer does not point to the
                original non-VSAM record, message G110 is produced.
      Program action -
                two catalog records are printed:
            1.  The non-VSAM record.
            2.  The alias record.
                The program then continues processing the alias record.
    G115
      Summary - an alias record (ENTYPE = 'X') pointed to by an alias
                association pointer in a non-VSAM record does not
                contain a non-VSAM association pointer.
      Meaning - the program checks all the association sets of fields
                in the alias record. If it does not find a non-VSAM
                association pointer, message G115 is produced.
      Program action -
                two catalog records are printed:
            1.  The non-VSAM record.
            2.  The alias record.
                The program then continues processing the non-VSAM
                record. No further work is done with the alias record.
    G135
      Summary - a non-VSAM (ENTYPE = 'A') or non-VSAM extension (ENTYPE
                ='E') record contained a horizontal extension pointer,
                but the record pointed to is not an extension record
                (ENTYPE = 'E').
      Meaning - the program uses the horizontal extension record
                pointer in the set of fields pointer to do a direct
                get, expecting to obtain an extension record. But
                the record returned was of a different type.
      Program action -
                two catalog records are printed:
            1.  The record containing the horizontal pointer.
            2.  The record which should have been an extension rec-
                ord, but was not.
                The program then continues processing by moving to
                the next high keyrange record. No further processing
                of this group of records is attempted.
                The record which should have been an extension record
                will show up as a 'dead' record in other messages,
                unless some other record points to it correctly.
    H010
      Summary - the entname field of a low keyrange alternate index
                record does not match the key of the high keyrange
                record which points to it.
      Meaning - the program reads sequentially through the high key-
                range. Each high keyrange record contains a CI number,
                which is used to generate a key for a direct get into
                the low keyrange. For an alternate index record, the
                high keyrange record's key value should be the altern-
                ate index name, and the entname field in the low key-
                range record should also contain this same name.
      Program action -
                two catalog records are printed:
            1.  The high keyrange record.
            2.  The low keyrange record it points to.
                After this the program continues processing this al-
                ternate index record.
    H045
      Summary - an alternate index record contains a set of fields
                pointer indicating that a set of fields is in a
                vertical extension record, but the record referred
                to does not have an ENTYPE of 'E'.
      Meaning - the program uses the vertical extension record
                pointer in the set of fields pointer to do a direct
                get, expecting to obtain an extension record (ENTYPE
                = 'E'). But the record returned was of a different
                type.
      Program action -
                two catalog records are printed:
            1.  The alternate index record.
            2.  The record which should have been an extension rec-
                ord, but was not.
                The program continues processing with the next set of
                fields pointer in the same alternate index record.
                Other messages, or further occurrance of H045, may
                occur due to this error condition. Also, the record
                which should have been an extension record will show
                up as a 'dead' record in other messages, unless
                some other record points to it correctly.
    H080
      Summary - an alternate index record contains an association
                pointer which points to a record which is not an
                index record (ENTYPE = 'I'), data record (ENTYPE =
                'D'), cluster record (ENTYPE = 'C'), or path record
                (ENTYPE ='R').
      Meaning - the program uses the association pointer to do a
                direct get expecting to obtain one of the record
                types listed above. But the record returned was
                of a different type.
      Program action -
                two catalog records are printed:
            1.  The alternate index record.
            2.  The record which should have been one of the listed
                types but was not.
                The program continues processing with the next set
                fields pointer in the same alternate index record.
                Other messages, or further occurrance of H080, may
                occur due to the error condition. Also, the record
                which should have been one of the listed types
                will show up as a 'dead' record in other
                messages, unless some other record points to it
                correctly.
    H125
      Summary - an index (ENTYPE ='I'), data (ENTYPE ='D'), cluster
                (ENTYPE ='C') or path (ENTYPE ='R') record associated
                with an alternate index record contains a vertical
                or horizontal set of fields pointer indicating that
                a set of fields is in an extension record, but the
                record referred to does not have an ENTYPE of 'E'.
      Meaning - the program uses the vertical or horizontal exten-
                sion record pointer in the set of fields pointer
                to do a direct get, expecting to obtain an exten-
                sion record (ENTYPE ='E'). But the record returned
                was of a different type.
      Program action -
                two catalog records are printed:
            1.  The record containing the vertical or horizontal
                extension pointer.
            2.  The record which should have an extension record,
                but was not.
                The program continues processing with the next set
                of fields pointer in the same record.
                The record which should have been an extension record
                will show up as a 'dead' record in other messages,
                unless some other record points to it correctly.
    H170
      Summary - an index (ENTYPE ='I'), data (ENTYPE ='D'),
                cluster (ENTYPE ='C'), or path (ENTYPE ='R')
                record associated with an alternate index record
                does not point to that alternate index record.
      Meaning - the program checks for a two-way connection bet-
                ween the alternate index record and associated
                index, data, cluster, or path records. If the
                associated record contains a backwards (associa-
                tion) pointer but the pointer does not point to
                the original alternate index record, message
                h170 is produced.
      Program action -
                two catalog records are printed:
            1.  The alternate index record.
            2.  The associated record (index, data, cluster, or
                path).
                The program then continues processing the assoc-
                iated record.
    H185
      Summary - an index (ENTYPE ='I'), data (ENTYPE ='D'),
                cluster (ENTYPE ='C'), or path (ENTYPE ='R')
                record pointed to by an alternate index record
                does not contain an alternate index associa-
                tion pointer.
      Meaning - the program checks all the association sets of
                fields in the index, data, cluster, or path
                record. If it does not find an alternate index
                association pointer, message h185 is produced.
      Program action -
                two catalog records are printed:
            1.  The alternate index record.
            2.  The associated record (index, data, cluster or
                path).
                The program then continues processing the alter-
                nate index record. No further work is done with
                the associated record.
    H205
      Summary - an alternate index (ENTYPE ='G'), or alternate
                index extension (ENTYPE ='E') record contained
                a horizontal extension pointer, but the record
                pointed to is not an extension record (ENTYPE
                ='E').
      Meaning - the program uses the horizontal extension record
                pointer in the set of fields pointer to do a
                direct get, expecting to obtain an extension
                record. But the record returned was of a different
                type.
      Program action -
                two catalog records are printed:
            1.  The record containing the horizontal pointer.
            2.  The record which should have been an extension
                record, but was not.
                The program then continues processing by moving
                to the next high keyrange record. No further proc-
                essing of this group of records is attempted.
                The record which should have been an extension
                record will show up as a 'dead' record in other
                messages, unless some other record points to it
                correctly.
    I010
      Summary - the entname field of a low keyrange user catalog
                record does not match the key of the high keyrange
                record which points to it.
      Meaning - the program reads sequentially through the high
                keyrange. Each high keyrange record contains a
                CI number, which is used to generate a key for a
                direct get into the low keyrange. For a user
                catalog record, the high keyrange record key value
                should be the user catalog name, and the entname
                field in the low keyrange record should also
                contain this same name.
      Program action -
                two catalog records are printed:
            1.  The high keyrange record.
            2.  The low keyrange record it points to.
                After this the program continues processing this
                user catalog record.
    I045
      Summary - a user catalog base record contains a sof pointer
                indicating that a set of fields is in a vertical
                extension record, but the record referred to does
                not have an ENTYPE of 'E'.
      Meaning - the program uses the vertical extension record poin-
                ter in the set of fields pointer to do a direct get,
                expecting to obtain an extensionrecord (ENTYPE =
                = 'E'). But the record returned was of a different
                type.
      Program action -
                two catalog records are printed:
            1.  The user catalog record.
            2.  The record which should have been an extension rec-
                ord, but was not.
                The program continues processing with the next set
                of fields pointer in the same user catalog record.
                Other messages, or further occurrances of I045, may
                occur due to this error condition. Also, the record
                which should have been an extension record will show
                up as a 'dead' record in other messages, unless some
                other record points to it correctly.
    I080
      Summary - a user catalog record contains an association pointer
                which points to a record which is not an alias
                record (ENTYPE = 'X').
      Meaning - the program uses the association pointer to do a
                direct get, expecting to obtain an alias record
                (ENTYPE = 'X'). But the record returned was of a
                different type.
      Program action -
                two catalog records are printed:
            1.  The user catalog record.
            2.  The record which should have been an alias record,
                but was not.
                The program continues processing with the next set
                of fields pointer in the same user catalog record.
                Other messages, or further occurrances of I080,
                may occur due to this error condition. Also, the
                record which should have been an alias record
                will show up as a 'dead' record in other mess-
                ages, unless some other record points to it
                correctly.
    I115
      Summary - an alias record associated with a user catalog record
                does not point to that user catalog record.
      Meaning - the program checks for a two-way connection between
                the user catalog record and associated alias records.
                If the associated record contains a backwards (assoc-
                iation) pointer but the pointer does not point to the
                original user catalog record, message I115 is produced.
      Program action -
                two catalog records are printed:
            1.  The user catalog record.
            2.  The associated alias record.
                The program then continues processing the associated
                record.
    I120
      Summary - an alias record (ENTYPE ='X') pointed to by a user
                catalog (ENTYPE ='U') does not contain a user cata-
                log association pointer.
      Meaning - the program checks all the association sets of
                fields in the alias record. If it does not find a
                user catalog association pointer, message I120 is
                produced.
      Program action -
                two catalog records are printed:
            1.  The user catalog record.
            2.  The associated alias record.
                The program then continues processing the user
                catalog record. No further work is done with the
                associated record.
    U035
      Summary - a key value required to read a low keyrange record
                was found to be invalid.
      Meaning - the program uses CI numbers from catalog record
                fields in high keyrange or low keyrange records to
                construct keys for direct gets to the low keyrange.
                This is possible because the control interval number
                of a low keyrange record appears in the first four
                bytes of the key field of a low keyrange record,
                allowing the program to use a generic get with a key
                length of 4. Before attempting the get, the program
                checks that the last three bytes of the key value
                (a three-byte CI number right-adjusted in a four-byte
                key field) is greater than or equal to x'000000' and
                less than the CCRNFCI field in the CCR (which points
                to the first unformatted 'never used' record in the
                low keyrange). If the key is outside this range,
                message U035 is produced.
      Program action -
                all five catalog record buffers are printed.
                Their contents are:
            1.  The CCR.
            2.  The high keyrange record currently being processed.
            3.  Any of the following depending on the circumstances:
                GDG base, cluster, volume, non-VSAM, alternate index,
                user catalog, or a horizontal extension of one of
                these types. This buffer contains the next level of
                record down from the high keyrange.
            4.  Any type of low keyrange record except the CCR. This
                buffer contains the next level of record down from
                (3) above.
            5.  A vertical extension record of any type of low key-
                range record.
                The program also prints the following fields using
                the SNAP macro with an id of '035':
            1.  The direct RPL used for reading the low keyrange.
            2.  The sequential RPL used for reading the high key-
                range.
            3.  The key value.
                The program then continues by moving to the next
                record in the high keyrange. No further work is
                done on the group of records in error. This error
                condition could cause other messages to appear or
                'dead' records to show up, since a record which was
                pointed to from a high or low keyrange record
                could not be obtained.
    V100
      Summary - this is not an error located by the catalog checker.
                It is a volume record printed by request in the parm
                field of the EXEC statement.
    W100
      Summary - this is not an error located by the catalog checker.
                It is a volume extension record (W) printed as part
                of a request to list the volume structure in the
                parm field of the EXEC statement. This record is a
                record in the horizontal chain of 'W' records.
    W150
      Summary - this is not an error located by the catalog checker.
                It is a volume extension record (w) printed as part
                of a request to list the volume structure in the
                parm field of the EXEC statement. This record is a
                record in the vertical chain of 'W' records.
    X040
      Summary - a low keyrange record is not pointed to correctly
                by any other catalog record.
      Meaning - this condition can be normal after the catalog mgmt.
                Levelset ptf's have been applied. If the record that
                is 'dead' is a FREE CI it may have been caused by the
                additional validity checking added with the levelset
                code. When the 'dead record' is a FREE CI it can be
                re-claimed by rebuilding the freechain.
                The program creates a table with an entry for each
                low keyrange formatted record by using the value
                in the CCRNFCI field in the CCR to determine the
                number of entries. As a low keyrange record is read
                successfully via a key based on a CI number obtain-
                ed from a high keyrange record or another low key-
                range record, the appropriate entry in the table is
                marked. When all high keyrange records have been
                read, the program goes through the table and any
                entries which are still unmarked are indicated
                as 'dead' records.
                Note that certain error conditions may cause an
                entry to remain unmarked in the table even though
                its record has been retrieved. For example, if a
                high keyrange record points to a low keyrange re-
                cord which can be read successfully, but the low
                keyrange record is not an expected type (data,
                index, non-VSAM, GDG base, cluster, or user cata-
                log). The rule is that a record is not 'dead' as
                long as it is pointed to by another catalog rec-
                ord and is a correct record type for that pointer
                connection. So if a record is the expected type,
                if will not be 'dead' even if it contains incor-
                rect fields.
      Program action -
                the program prints message X040 and the 'dead'
                record once for each 'dead' record. When all 'dead'
                records have been processed, the program prints
                the statistics page and terminates.

.subsection 'SNAP IDs'

    000
      Summary - catalog record x'00000003' is not a CCR (ENTYPE=
               'L').
      Meaning - the program begins by validating CCR fields. The
                CCR is retrieved using a direct get with a key of
                x'00000003'. When the get is successful but the
                record returned does not have an ENTYPE of 'L',
                SNAP 000 is produced.
      Program action -
                the record which should have been a CCR, but was
                not, is snapped. The program then terminates.
    030
      Summary - a logical error occured during a get involved
                with validating the CCRNFCI field.
      Meaning - four types of gets may be issued during validation
                of the CCRNFCI field:
            1.  Get direct for last formatted low keyrange record
                (done once).
            2.  Get sequential for next record (done once).
            3.  Get direct for first record in low keyrange (done
                once if CCRNFCI incorrect).
            4.  Get sequential for next record (repeated until
                beginning of high keyrange found or end-of-data
                reached, if CCRNFCI incorrect).
                A logical error during any of these gets will result
                in a SNAP with an id of 030.
      Program action -
                the following areas are snapped:
            1.  The CCR.
            2.  The direct RPL.
            3.  The sequential RPL.
                The program then terminates. No stats. Are produced.
    035
      Summary - see message U035.


    040
      Summary - a logical error occurred on a get request.

      Meaning - after validation of the CCR fields if a logical
                error occurs on a get request this snapid is
                issued.
      Program action -
                all available workareas and data areas are snapped.

.subsection 'User Abend Codes'

    999
      Error opening VSAMCAT, SYSPRINT, or SNAP. This may be
      caused by an invalid volume parameter on the EXEC statement.
    998
      RPL error on key'd, direct get for CI #2,
      (catalog cluster record).
    997
      RPL error on key'd, direct get for CI #3,
      (catalog control record - CCR).
    996
      Unable to get storage for cat-table.
      This may occur with very large catalogs.
      Increase region size to provide more
      working storage for low keyrange CI table.
    995
      RPL error on key'd, direct get while
      following the delete chain.
    994
      RPL error on key'd, direct get for last
      formatted low keyrange record.
    993
      RPL error on key'd, sequential get for
      a high keyrange record. This can occur if
      an invalid volume serial number is passed in
      the EXEC statement parms.
    992
      RPL error on key'd, direct get for low
      keyrange record using CI number obtained
      from a high keyrange truename entry.
.sp 2
.subsection 'Change History'
.sp 2
   *******************************************************************
                           March 18, 1980
   ******************************************************************
         Catalog pointer validation CSECT.                          *
         Documentation for use available in DLL/1 library under the *
   ******************************************************************

   The following changes have been added in this version of IDACATCK

   FiX0001 add a module name/date to aid in level identification.

   FiX0002 correct abenD001 which can occur in svs environment due
           to missing control character for print line.

   FiX0003 add logic to run a 'verify' against the catalog when an
           open rc116 is encounterd when opening the catalog.

   FiX0004 add a patch area to IDACATCK named 'patch'

   FiX0005 fix problem which caused a valid volume extension record
           to show up as a X040 (dead) record.

   FiX0006 alter CCR validity checking so that it is compatable with
           the catalog management levelset ptf's

   FiX0007 correct snapid '999' to a valid snapid for a VS1 system.
           Snapid '999' has been changed to snapid '040'

   FiX0008 remove fiX0005 which did not fix the problem described
           by it. Add code to fix the problem described by fiX0005

   FiX0009 allow optional printing of a volume record structure by
           passing the volume serial number to be listed through
           the parm field of the EXEC statement.

   FiX0010 code added to complete the fix added through fiX0006

   FiX0011 abenD0c4 can occur during GDG processing if a non-VSAM
           record has an association back to the GDG base in an
           extension record.

   FiX0012 incorrect D110 indication can occur during GDG logic
           if a non-VSAM GDG member also has an alias.

.subsection 'Installation:'

    The object code must be  linkedited into an  authorized library
    with an authorization code of 1 (MVS).

        Sample JCL

        //LINK     EXEC    PGM=IEWL,PARM='AC=1'
        //SYSPRINT DD      SYSOUT=A
        //SYSUT1   DD      UNIT=3330,SPACE=(CYL,(5,1))
        //SYSLMOD  DD      DSN=SYS1.LINKLIB,DISP=SHR
        //SYSLIN   DD      *
         ----Object deck----
         NAME IDACATCK(R)
        /*

