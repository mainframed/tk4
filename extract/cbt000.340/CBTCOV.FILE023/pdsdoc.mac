1
-
-
-
0
-                    EFFECTIVE USE OF THE TSO PDS COMMAND
+                    ____________________________________
0
-×                            PDS Version 8.1
+                             _______________
-                             A. Bruce Leland
 '                            Hitachi America, LTD.
 '                            2210 O'Toole Avenue
 '                            San Jose, Cal.  95131
-
 '                            (408) 435-8300
-
0'                            Contents last updated on
 '                            November 10, 1985 for PDS 7.3
1
0
1                               TABLE OF CONTENTS
+                               _________________
-        Introduction . . . . . . . . . . . . . . . . . . . . . . . . .
0        Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .
0        Member Groups  . . . . . . . . . . . . . . . . . . . . . . . .
0        Attention Processing . . . . . . . . . . . . . . . . . . . . .
0        Update Protection  . . . . . . . . . . . . . . . . . . . . . .
0        ISPF Interface . . . . . . . . . . . . . . . . . . . . . . . .
0        Background Execution . . . . . . . . . . . . . . . . . . . . .
0        Abbreviations  . . . . . . . . . . . . . . . . . . . . . . . .
0        Subcommands  . . . . . . . . . . . . . . . . . . . . . . . . .
            ALIAS . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ATTRIB  . . . . . . . . . . . . . . . . . . . . . . . . . .
            CHANGE  . . . . . . . . . . . . . . . . . . . . . . . . . .
 '          COMPARE . . . . . . . . . . . . . . . . . . . . . . . . . .
            CONTROL . . . . . . . . . . . . . . . . . . . . . . . . . .
 '          COPY  . . . . . . . . . . . . . . . . . . . . . . . . . . .
            DELETE  . . . . . . . . . . . . . . . . . . . . . . . . . .
            DIRENTRY  . . . . . . . . . . . . . . . . . . . . . . . . .
            DISPLAY . . . . . . . . . . . . . . . . . . . . . . . . . .
            EDIT. . . . . . . . . . . . . . . . . . . . . . . . . . . .
            EXEC or %   . . . . . . . . . . . . . . . . . . . . . . . .
            FIND  . . . . . . . . . . . . . . . . . . . . . . . . . . .
            FIXPDS  . . . . . . . . . . . . . . . . . . . . . . . . . .
            HELP  . . . . . . . . . . . . . . . . . . . . . . . . . . .
            HISTORY . . . . . . . . . . . . . . . . . . . . . . . . . .
            IF  . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ISPMODE . . . . . . . . . . . . . . . . . . . . . . . . . .
            LIST  . . . . . . . . . . . . . . . . . . . . . . . . . . .
            MAP . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            MEMBERS . . . . . . . . . . . . . . . . . . . . . . . . . .
            MEMLIST . . . . . . . . . . . . . . . . . . . . . . . . . .
            OUTCOPY . . . . . . . . . . . . . . . . . . . . . . . . . .
            PATTERN . . . . . . . . . . . . . . . . . . . . . . . . . .
            RECALL  . . . . . . . . . . . . . . . . . . . . . . . . . .
            RENAME  . . . . . . . . . . . . . . . . . . . . . . . . . .
            REPLACE . . . . . . . . . . . . . . . . . . . . . . . . . .
 '          REPRO . . . . . . . . . . . . . . . . . . . . . . . . . . .
            RESTORE . . . . . . . . . . . . . . . . . . . . . . . . . .
            SUBLIST . . . . . . . . . . . . . . . . . . . . . . . . . .
            TSO . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            USAGE . . . . . . . . . . . . . . . . . . . . . . . . . . .
            VERIFY  . . . . . . . . . . . . . . . . . . . . . . . . . .
-        Appendix A: PDS Version 7.1  . . . . . . . . . . . . . . . . .
 '       Appendix B: PDS Version 7.2  . . . . . . . . . . . . . . . . .
 ×       Appendix C: PDS Version 7.3  . . . . . . . . . . . . . . . . .
         Appendix D: BLKDISK and Blocksizes . . . . . . . . . . . . . .
         Appendix E: PDS Messages . . . . . . . . . . . . . . . . . . .
         Appendix F: PDS Suggestion Forms . . . . . . . . . . . . . . .
1                            INTRODUCTION
+                            ____________
- This document is intended to provide systems programmers and
  other users of the PDS command with examples and notes on using
  the command effectively.
-
     History
+    _______
0    PDS was originally written in 1972 at Fireman's Fund Insurance.

     Since that time it has gone through many revisions at several
     installations and PDS is now known by various command names in
     the user community:  PDS, LPDS, LISTPDS, PDS18 and PDS4.

     Since the PDS command was written, it has grown in size and
     complexity:
 '      A.  Number of subcommands (was 12, now 46)
 '      B.  Number of source statements (was 4050, now 28500)
 '      C.  Number of HELP statements (was 500, now 5120)
 '      D.  Size of load module (was 16K, now 132K)
-
     Purpose
+    _______
0    The PDS command was designed to manipulate PDS's or partitioned
     data sets.  In the past, only non-authorized functions have been
     performed by the PDS command.

     Sequential data sets are also allowed for several of the PDS
 '   subcommands which process target data sets (BROWSE, COPY, DSPRINT,
     EDIT, FIND, FIXPDS, FSE, LIST, PRINTOFF, REPLACE, REVIEW, SUBMIT,
     TSOEDIT, TSOLIST, VERIFY and VPSPRINT).  The documented syntax
     is changed in that no data is entered for the member name
     position.

     Thus, a LIST subcommand such as LIST MEMBERXX SKIPREC(20) for a
     partitioned data set would be entered as LIST SKIPREC(20) for a
     sequential data set.
-
     Operation
+    _________
0    The PDS command accepts the name of a target data set, allocates
     the data set, and processes subcommands entered by the user.

     PDS is a standard TSO command processor which uses PUTLINE,
     GETLINE, and PUTGET MACRO's for terminal communication.  PDS
     subcommands which perform full screen output use ISPF dialog
     services.
-
1                            DEFINITIONS
+                            ___________
- Several of the terms relating to partitioned data sets are defined
  in this section.
-    PDS or Partitioned Data Set - a data set with fixed, variable or
+    ___________________________
     undefined format which is commonly used as a library for related
     types of information.  Partitioned data sets contain two segments
     of data: a directory of information and member data.

     PDS directory -  a segment of a PDS which is a sequential data set
+    _____________
     with eight byte keys and 256 byte data records containing pointers
     to data in the PDS member portion of the data set.

     PDS member data - a segment of a PDS which contains current members
+    _______________
     (which are pointed to by one or more directory entries) and inactiv
     or deleted members (which have no associated directory entries).

     PDS directory entry - a logical entry in a PDS directory which poin
+    ___________________
     to its associated data in the member data; it consists of an eight
     character member name field and at least one three-character relati
     address field.

     Load library -  a partitioned data set which has record format U, U
+    ____________
     or UM and is commonly used to contain executable modules.

     Member -  data in a partitioned data set which is pointed to by one
+    ______
     or more PDS directory entries.

     Load module -  a member contained in a load library.
+    ___________

     Alias member -  a directory entry with a indicator value which
+    ____________
     indicates that the member entry is an alternate name for another
     main member; a main member and its aliases are associated with the
     same recorded data in the PDS.

     Main member -  a non-alias directory entry and its associated
+    ___________
     recorded data (a main member may also be called a real member).

     Orphan member - an alias member which does not have an associated
+    _____________
     main member.

     Deleted member -  member data which is not pointed to by any
+    ______________
     directory entry; deleted members remain in a PDS until the
     data set is compressed.

     Apparent alias member -  data in a partitioned data set which
+    _____________________
     is pointed to by more than one main PDS directory entry.  This
     type of member is not commonly encountered.
1                            MEMBER GROUPS
+                            _____________
- Several subcommands allow for specification of a member name group whi
  consists of a member name range or member name pattern as follows:

0    Member name range -- a subcommand may process all members in a
+    _________________
     range of members by specifying a beginning partial member
     name, a colon, and an ending partial member name (where either
     or both of the partial names may be null):
        subcommand  :         (all members of the data set)
        subcommand  pt1:      (members from PT1 to the end of the direct
        subcommand  :pt2      (members from X'00' through PT299999)
        subcommand  pt3:pt4   (members from PT3 through PT499999)

0    Member name pattern -- a subcommand may process all members whose
+    ___________________
     names contain pattern character segments by specifying a member
     name segment, a slash, and another member name segment (either,
     but not both, of the member name segments may be null):
        subcommand  sg1/      (all member names containing SG1)
        subcommand  /sg2      (all member names containing SG2)
        subcommand  sg3/sg4   (all member names containing SG3 and SG4)

0    Member lists -- a subcommand may process those members whose names
+    ____________
     or group names appear in a list of member names:
        subcommand  (aa,bb)   (members AA and BB)
        subcommand  (:bb,cc)  (members from X'00' through BB999999 and C
        subcommand  (aa,/dd)  (member AA and all members containing DD)

0    Default member name -- if no member name is specified, the last
+    ___________________
     member name list, member name or member group entered for any
     subcommand which defines member groups will be assumed.

0    Asterisk member name -- if * is entered in the member name position
+    ____________________
     the last member name list, member name or member group entered for
     any subcommand which defines member groups will be assumed.

0    Member name display subcommands -- MEMBERS, PATTERN and DISPLAY
+    _______________________________
     allow the display of member groups using the above member group
     syntax; however, these subcommands differ as follows:

        DISPLAY -- can not modify the default member group or use lists;
+       _______    _______
                   if no member specification is entered, the entire
                   member directory is displayed.

        PATTERN -- can not modify the default member group or use lists;
+       _______    _______
                   if no member specification is entered, the member
                   group last entered on a PATTERN subcommand is
                   displayed.

        MEMBERS -- can modify the default member group and use lists;
+       _______    ___
                   if no member specification is entered, the default
                   member group is displayed.
1                            ATTENTION HANDLING
+                            __________________
- Several of the line-mode output subcommands such as LIST, MAP and
  HISTORY can produce large volumes of output.  PDS is designed to
  terminate such output when requested via an attention (PA1) key.

  In general, an attention may be used to terminate the current PDS
  subcommand and two attentions in a row may be used to terminate the
  PDS command.


  In the following, the attention processing provided by PDS is
  described in more detail:

     A.  An single attention should terminate any member group in
         progress.

     B.  An attention at a prompt for a data set should terminate PDS.

     C.  An attention at the normal ENTER OPTION subcommand prompt
         should provide another ENTER OPTION prompt; another attention
         at this point should terminate PDS.

     D.  A single attention during subcommand processing should result
         in an ENTER OPTION prompt; the processing action taken at this
         point depends on what is entered next:
          1.  Another attention should terminate the PDS command.
          2.  A null line should cause the interrupted subcommand to
              continue at the point of interruption with the probable
              loss of any buffered output for the terminal.
          3.  An entered subcommand should be given control immediately.
              The remainder of any PDS CLIST in use should be discarded
              as a part of the attention processing.

     E.  If a PDS subcommand is in a loop that does not involve input or
         output to the terminal or input from the current data set, a
         single attention may not terminate the loop:
          1.  The first attention will provide the normal ENTER OPTION
              prompt.
          2.  If a subcommand is entered at this time, PDS may continue
              looping.
          3.  If PDS is looping, another attention should produce the
              message "PDS470W THE PROGRAM IS PROBABLY IN A LOOP" and
              PDS should terminate the executing subcommand and perform
              the subcommand entered at the ENTER OPTION prompt.

     F.  In MEMLIST, if multiple members are selected via the BROWSE or
         EDIT line commands, the remaining line commands on the panel
         can be discarded by pressing the attention key while editing
         or browsing a member.
1                            UPDATE PROTECTION
+                            _________________
0
- Member Protection
+ _________________
0 PDS subcommands such as DELETE, EDIT, FIXPDS, FSE, RENAME, REPLACE,
 'REPRO and TSOEDIT change members which might be in use elsewhere
  in an installation.  To prevent multiple simultaneous updates of a
  member, PDS issues ISPF-style enqueue checks before any of the above
  subcommands first attempt to access a member.

- Data Set Protection
+ ___________________
0'In addition, several PDS subcommands such as ALIAS, ATTRIB, COPY,
 'DELETE, FIXPDS, RENAME, REPRO and RESTORE could cause data set
  integrity problems if they change a data set as it is being updated
  by another user.  This is not a problem if the data set is allocated
  as OLD since exclusive use of the data set is assured.

  To circumvent this problem for SHR allocations, PDS uses the following
  ISPF RESERVE logic to maintain data set integrity during data set
  updates:

     A.  A volume RESERVE is performed.

     B.  If the data set is a load library, then a linkage-editor style
         RESERVE or ENQUE is performed as appropriate:
          1.  On a shared DASD volume, a volume RESERVE is performed.
          2.  On a non-shared DASD volume, a ENQUE is performed.

     C.  The data set is opened.

     D.  All data set updates are performed.
          1.  For most subcommands with member groups, the data
              set is left open for the entire member group.
          2.  For executions of PDS in batch mode, the volume
              reserve is maintained during the entire use of the
              data set.

     E.  The data set is closed.

     F.  DEQ's are performed to remove the volume RESERVE's and ENQ's.
1                            ISPF INTERFACE
+                            ______________
- PDS is a TSO command processor which becomes an ISPF dialog with any
  of several ISPF interface modes.

-    From READY mode:
+    ________________
     PDS is invoked as a TSO command processor.  When the first
     BROWSE, EDIT, ISPF, ISPMODE, MEMLIST or OUTLIST* subcommand or
     the DSNAME or SYSOUT keyword of the CONTROL* subcommand is entered,
     PDS calls an ISPF interface which invokes PDS recursively as an ISP
     dialog.

     ISPF services are directly invoked for each subsequent BROWSE, EDIT
     ISPF, ISPMODE or MEMLIST subcommand.

0    From ISPF Version 1, option 6 or the ISPF TSO subcommand:
+    _________________________________________________________
     PDS is invoked as a TSO command processor but ISPF services can
     not be used.
0    From ISPF Version 2, option 6 or the ISPF TSO subcommand:
+    _________________________________________________________
     PDS is invoked as an ISPF dialog and ISPF services can be used
     without restrictions.

0    From another TSO command processor:
+    ___________________________________
     PDS is invoked as a TSO command processor but if an ISPF environmen
     has been established by an earlier command processor, ISPF services
     can not be used.

     Otherwise, when the first BROWSE, EDIT, ISPF, ISPMODE, MEMLIST
     or OUTLIST* subcommand or the DSNAME or SYSOUT keyword of the
     CONTROL* subcommand is entered, PDS calls an ISPF interface which
     invokes PDS recursively as an ISPF dialog and ISPF services are
     directly invoked for each subsequent BROWSE, EDIT, ISPF, ISPMODE
     or MEMLIST subcommand.

0    From the PDS panel in ISPF:
+    ___________________________
     PDS is invoked as an ISPF dialog.  PDS locates and creates any
     required command processor control blocks and invokes ISPF services
     directly.

0  *Note: the CONTROL and OUTCOPY subcommands do not used ISPF services;
    however, when either is first invoked, it attempts to establish an
    ISPF dialog environment so that ISPF services can be utilized by
    subsequent PDS subcommands.

1                            BACKGROUND EXECUTION
+                            ____________________
0
- Background TMP
+ ______________
0 Since PDS uses PUTLINE, PUTGET and GETLINE MACRO's for terminal
  communication, PDS may be used effectively in background mode for
  processing large data sets as in the following example JOB:

  //JOBNAME  JOB  ...
  //A       EXEC  PGM=IKJEFT01,DYNAMNBR=30
  //SYSTSPRT  DD  SYSOUT=*
  //SYSTSIN   DD  *
   PDS  'SYS1.SMPCDS'
   FIXPDS EXPANDDIR(100)
   VERIFY :
   CHANGE  'SYS1.LINKLIB'
   IF A:Z RMODEANY THEN(MAP)
   END
  //

  When PDS is used in background mode, no prompting for yes or no
  replies is performed; instead, at each decision point, a yes response
  is assumed.

  Note that CONTROL NORECOVER is an initialization default for the
  execution of PDS in the background; if recovery is desired, CONTROL
  RECOVER must be explicitly specified.  PDS subcommands which
  specifically test for ABEND conditions (such as VERIFY with LOAD or
  IF with LOADERR) should not terminate the PDS session.

- TSSO support
+ ____________

  PDS also has support for the Time Sharing Subsystem Option or TSSO
  modification which can be obtained from the MVS SHARE tapes to perform
  TSO functions from a started task.

  When PDS is invoked, if a subcommand is entered (after any requested
  disposition and/or any volume parameter), PDS will execute that single
  subcommand and terminate.

  As an example of a subcommand entered on the command line, consider th
  following example input and system response:

     pds lib.pds60 shr attrib $$/
      PDS100I PDS -- VERSION 7.2
      PDS230I SPF STATS: VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT  M
      PDS230I  $$$DOC     60.00  83/09/19  83/09/19 14:54    20    20
      PDS230I  $$$INST    60.00  83/09/27  83/09/27 10:02   105   105
      PDS230I  $$$MODS    60.00  83/09/19  83/09/19 14:54    57    57
      READY
1                            ABBREVIATIONS
+                            _____________
- Subcommand name abbreviation:
+ _____________________________
  Subcommand names may be abbreviated to the first few characters of the
  subcommand name.  Subcommand names are scanned in the order of the
  output from the OPTIONS subcommand or from an invalid subcommand
  message and the first name match is used.  For example if the invalid
  subcommand, NN, is entered, the following system response would be
  received:

   PDS771E NN IS AN INVALID SUBCOMMAND; ENTER "HELP" OR "OPTIONS" FOR HE
   SUBCOMMANDS: ATTRIB   ALIAS    BROWSE   CHANGE   COMPARE  COMPRESS CO
 '              COPY     DISPLAY  DIRENTRY DELETE   DSNAME   DSPRINT  ED
                END      EXEC     FIND     FIXPDS   FSE      HELP     HI
                IF       ISPF     ISPMODE  LIST     MAP      MEMBERS  ME
                OPTIONS  OUTCOPY  PATTERN  PRINTOFF RECALL   RENAME   RE
 '              REPRO    RESTORE  REVIEW   SUBMIT   SUBLIST  TSO      TS
                TSOLIST  USAGE    VERIFY   VPSPRINT

  If the subcommand name A is entered, the ATTRIB subcommand will be
  given control; likewise, if AL is entered, the ALIAS subcommand
  will be given control.

  The set of defined subcommands changes when a sequential data set is
  being processed and in this case, the following system response would
  be received from the invalid subcommand, NN:

   PDS771E NN IS AN INVALID SUBCOMMAND; ENTER "HELP" OR "OPTIONS" FOR HE
 ' SUBCOMMANDS: BROWSE   CHANGE   COMPARE  CONTROL  COPY     DSNAME   DS
                EDIT     END      EXEC     FIND     FIXPDS   FSE      HE
                ISPF     ISPMODE  LIST     OPTIONS  PRINTOFF RECALL   RE
                REVIEW   SUBMIT   TSO      TSOEDIT  TSOLIST  USAGE    VE
                VPSPRINT

0 Keyword abbreviation:
+ _____________________
  Subcommand keywords may be abbreviated to the first characters
  which make the keyword unique.  For example, HELP LIST SYNTAX
  returns:
     SYNTAX -
          LIST  member NUM/SNUM/NONUM/LBLOCK/LDUMP/BLOCK/DUMP
                       OFFSET(Hx) MODULE(Partm)
                       SKIPREC(n) MAXIN(n) MAXOUT(n)
                       SKIPCOL(n) MAXLEN(n)

  The keyword LDUMP may be abbreviated to LD, LDU or LDUM; the keyword
  OFFSET may be abbreviated as the letter O or any other substring of
  the keyword; and SKIPCOL(42) may be abbreviated as SKIPC(42).
- Partial names:
+ ______________
  Several keyword operands allow partial names to be entered.  As an
  example, see MODULE(Partm) in the syntax of the LIST subcommand.

  Partial names are considered to match an actual name if they match
  for the number of characters entered.  For example, with the LIST
  subcommand, MODULE(ief) matches any name beginning IEF...; however,
  it would not match a name such as IEWL.
1                            SUBCOMMANDS
+                            ___________
- On the following pages, examples are provided for several of the PDS
  subcommands.  Note that for each example, command inputs are provided
  in lower-case and system messages are in upper-case.
0
- ALIAS
+ _____
0 The ALIAS subcommand assigns an alias name to a member.
- Example 1: an internal name, EXTRACTZ, is used as an alias name.
+ __________
  alias extract extractz
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS103I ENTRY POINT AT 000CDC  --  EXTRACTZ
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  at extract/

   PDS020I EXTRACT ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS160I ALIASES FOR THIS MEMBER ARE: EXTRACTZ

   PDS020I EXTRACTZ ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000CDC
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS066I MEMBER IS AN ALIAS FOR: EXTRACT
0 Example 2: HECTOR is not an internal CSECT name.
+ __________
  alias extract hector
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS103I ENTRY POINT AT 000000  --  EXTRACT
0 Example 3: HENNA is not an internal CSECT name.
+ __________
  alias extractz henna
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS103I ENTRY POINT AT 000CDC  --  EXTRACTZ
0 Example 4: an alias is assigned to a CLIST member.
+ __________
  al copyout copyou2
   PDS010I THE ALIAS HAS BEEN ASSIGNED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  at copyo:copyo
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPYOUT      01.01  83/07/29  83/07/29  7:21     7     7
   PDS230I  COPYOU2 -A   01.01  83/07/29  83/07/29  7:21     7     7
   PDS066I MEMBER IS AN ALIAS FOR: COPYOUT
1
  ATTRIB
+ ______
0 The ATTRIB subcommand lists or updates the attributes of a member.
- Example 1: the attributes of a load module are listed.
+ __________
  at savesome
   PDS020I SAVESOME ATTRIBUTES ARE: OVLY, RENT, NOT EXEC
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH RENT
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  7/01/82
0 Example 2: all changeable attributes are removed and others are assign
+ __________
  attrib * none dc auth
   PDS020I SAVESOME ATTRIBUTES ARE: OVLY, DC
   PDS021I APF AUTHORIZED
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  7/01/82
0 Example 3: the attributes of a group of CLIST members are listed.
+ __________
  at cop/
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPY         01.02  82/10/04  83/03/08 11:02     8     8
   PDS230I  REFRCOPY     01.01  84/01/16  84/01/16  9:34    17    17
0 Example 4: a range of load module names are used.
+ __________
  at ext:ext
   PDS020I EXTRACT ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS160I ALIASES FOR THIS MEMBER ARE: EXTRACTZ

   PDS020I EXTRACTZ ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000CDC
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS066I MEMBER IS AN ALIAS FOR: EXTRACT
0 Example 5: a module is assigned a new entry point.
+ __________
  at extractz entry(extract)
   PDS020I EXTRACTZ ATTRIBUTES ARE: RENT, REUS, REFR
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  007540  --     30K
   PDS106I LAST LINK-EDITED ON  6/17/78
   PDS066I MEMBER IS AN ALIAS FOR: EXTRACT
0 Example 6: a module with aliases is assigned an AMODE value.
+ __________
  attrib a11 amodeany
   PDS020I A11 ATTRIBUTES ARE: RENT, REUS, REFR
   PDS120I MVS/XA RESIDENCE MODE IS 24  -- ADDRESSING MODE IS ANY
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  000020  --      1K
   PDS106I LAST LINK-EDITED ON  7/01/83
   PDS092I AMODE/RMODE INFORMATION UPDATED FOR MEMBER: A22
   PDS092I AMODE/RMODE INFORMATION UPDATED FOR MEMBER: R11
   PDS160I ALIASES FOR THIS MEMBER ARE: A22, R11
1
  CHANGE
+ ______
0 The CHANGE or PDS subcommand switches PDS to a different data set.
- Example 1: PCF does not uniquely qualify a data set name.
+ __________
  change pcf
   IKJ58600I QUALIFIERS FOR DATA SET HABL.PCF ARE
   IKJ58600I ASM       OBJ
   IKJ58601A ENTER QUALIFIER - asm
   PDS220I //SYS00034  DD  DSN=HABL.PCF.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040),VOL=SER=SYSCAT,
   PDS220I //  SPACE=(CYL,(5,1,10))                 /*FREE TRK=14,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.PCF.ASM,VOL=SER=SYSCAT
0 Example 2: a new prefix is specified for examining SHARE data.
+ __________
  tso profile prefix(cbt)
   PDS300A ENTER OPTION -- DSN=HABL.PCF.ASM,VOL=SER=SYSCAT
  change file182
   PDS220I //SYS00035  DD  DSN=CBT.FILE182.PDS,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),VOL=SER=SYSRES,
   PDS220I //  SPACE=(TRK,(42,20,6))                /*FREE TRK=0,FREE DI

   PDS300A ENTER OPTION -- DSN=CBT.FILE182.PDS,VOL=SER=SYSRES
0 Example 3: switch to the previous data set
+ __________
  change
   PDS220I //SYS00036  DD  DSN=HABL.PCF.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040),VOL=SER=SYSCAT,
   PDS220I //  SPACE=(CYL,(5,1,10))                 /*FREE TRK=14,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.PCF.ASM,VOL=SER=SYSCAT
0 Example 4: demonstrate VOLSET.
+ __________
  change 'sys1.proclib' volset(sysxar)
   PDS220I //SYS00037  DD  DSN=SYS1.PROCLIB,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),VOL=SER=SYSXAR,
   PDS220I //  SPACE=(TRK,(30,1,30),,ROUND)         /*FREE TRK=1,FREE DI

   PDS300A ENTER OPTION -- DSN=SYS1.PROCLIB,VOL=SER=SYSXAR  MEM=
  c 'sys1.parmlib'
   PDS220I //SYS00038  DD  DSN=SYS1.PARMLIB,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),VOL=SER=SYSXAR,
   PDS220I //  SPACE=(TRK,(15,,27),,ROUND)          /*FREE TRK=3,FREE DI

   PDS300A ENTER OPTION -- DSN=SYS1.PARMLIB,VOL=SER=SYSXAR  MEM=
  c 'habl.lib.cntl'
   PDS410W VOLSET(SYSXAR) IS STILL IN EFFECT
   IKJ56232I DATA SET HABL.LIB.CNTL NOT ON VOLUME AS INDICATED IN THE CA
             VOL PARAMETER
   PDS381A REENTER THE DATA SET NAME, VOLUME AND DISPOSITION
  'habl.lib.cntl' vol(*)
   PDS220I //SYS00039  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=SWAP01,
   PDS220I //  SPACE=(CYL,(10,4,80))                /*FREE TRK=44,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=SWAP01  MEM=
1
 'COMPARE
+ _______
0'The COMPARE subcommand identifies differences between two members.
-'Example 1: compare two jcl members.
+ __________
 'compa pds72t pds72tt
 '
 '     -1- OLD---/*JOBPARM    F=D201
 '         -------------------------------------------------------------
 '     -1- NEW---/*JOBPARM F=D201
 '
 '     -1- OLD---//PDS72    EXEC  PDSGEN,MEMBER=PDS72
 '     -2- OLD---//COPY     EXEC  PDSGEN,MEMBER=@COPY
 '     -3- OLD---//DIALOG72 EXEC  PDSGEN,MEMBER=DIALOG72
 '         -------------------------------------------------------------
 '     -1- NEW---//PDSMAIN  EXEC  PDSGEN,MEMBER=@PDSMAIN
 '     -2- NEW---//SUBS     EXEC  PDSGEN,MEMBER=@SUBS
 '     -3- NEW---//DIALOG   EXEC  PDSGEN,MEMBER=@DIALOG
 '
 '     -1- OLD---  ENTRY    PDS72
 '     -2- OLD---  ORDER    PDS72(P)
 '         -------------------------------------------------------------
 '     -1- NEW---  ENTRY    PDSMAIN
 '     -2- NEW---  ORDER    PDSMAIN(P)
 '      3 BLOCKS OF COMPARE ERRORS DETECTED
0'Example 2: compare two text members.
+ __________
 'compa oldprose $$$prose
 '
 '     -1- OLD----'                            PDS Version 7.1
 '         -------------------------------------------------------------
 '     -1- NEW----×                            PDS Version 7.2
 '
 '         -------------------------------------------------------------
 '     -1- NEW--- ×          COPY  . . . . . . . . . . . . . . . . . . .
 '
 '         -------------------------------------------------------------
 '     -1- NEW--- ×          REPRO . . . . . . . . . . . . . . . . . . .
 '
 '     -1- OLD---         Appendix A: PDS Version 6.3  . . . . . . . . .
 '     -2- OLD---         Appendix B: PDS Version 7.0  . . . . . . . . .
 '     -3- OLD---         Appendix C: PDS Version 7.1  . . . . . . . . .
 '         -------------------------------------------------------------
 '     -1- NEW----        Appendix A: PDS Version 7.0  . . . . . . . . .
 '     -2- NEW---         Appendix B: PDS Version 7.1  . . . . . . . . .
 '     -3- NEW--- ×       Appendix C: PDS Version 7.2  . . . . . . . . .
 '      4 BLOCKS OF COMPARE ERRORS DETECTED
0'Example 3: compare two jcl members.
+ __________
 'compare pds72tt temp.cntl(pds72tt)
 '
 '     -1- OLD---//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR,DCB=BLKSIZE=16
 '     -2- OLD---//         DD  DSN=SYS1.MACLIB,DISP=SHR
 '         -------------------------------------------------------------
 '     -1- NEW---//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR,UNIT=SYSDA,VOL
 '     -2- NEW---//         DD  DSN=SYS1.MACLIB,DISP=SHR,UNIT=SYSDA,VOL=
 '      1 BLOCKS OF COMPARE ERRORS DETECTED
1
  CONTROL
+ _______
0 The CONTROL subcommand specifies PDS processing options.
- Example 1: first instance of CONTROL in a session.
+ __________
  control
   PDS100I PDS -- VERSION 7.2

   PDS030I GLOBAL OPERANDS: NOTRANS, ALIASINFO, LKEDDATE, PROMPT, RECOVE
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

0 Example 2: alias information is turned off.
+ __________
  control noaliasinfo
   PDS100I PDS -- VERSION 7.2

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NOTRANS, LKEDDATE, PROMPT, RECO
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  attrib copy:copyo
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPY         01.02  82/10/04  83/03/08 11:02     8     8
   PDS230I  COPYBBB
   PDS230I  COPYOUT      01.01  83/07/29  83/07/29  7:21     7     7
   PDS230I  COPYOUT2-A   01.01  83/07/29  83/07/29  7:21     7     7
0 Note: alias information can be requested for an ATTRIB subcommand.
+ _____
  attrib copy:copyo aliasinfo
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  COPY         01.02  82/10/04  83/03/08 11:02     8     8
   PDS160I ALIASES FOR THIS MEMBER ARE: COPY2, APFCOPX
   PDS230I  COPYBBB
   PDS230I  COPYOUT      01.01  83/07/29  83/07/29  7:21     7     7
   PDS160I ALIASES FOR THIS MEMBER ARE: COPYOUT2
   PDS230I  COPYOUT2-A   01.01  83/07/29  83/07/29  7:21     7     7
   PDS066I MEMBER IS AN ALIAS FOR: COPYOUT
0 Example 3: prompting is also turned off.
+ __________
  control noprompt
   PDS100I PDS -- VERSION 7.2

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NOPROMPT, NOTRANS, LKEDDATE, RE
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  ren copy copo group
   PDS161I MEMBERS TO BE RENAMED ARE: COPY, COPYBBB, COPYOUT, COPYOUT2,

   PDS090I COPY HAS BEEN RENAMED
   PDS090I COPYBBB HAS BEEN RENAMED
   PDS090I COPYOUT HAS BEEN RENAMED
   PDS090I COPYOUT2 HAS BEEN RENAMED
   PDS090I COPY2 HAS BEEN RENAMED
1
0 Example 4: prompting is returned to normal.
+ __________
  control prompt

   PDS100I PDS -- VERSION 7.2

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NOTRANS, LKEDDATE, PROMPT, RECO
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  ren copo copy group
   PDS161I MEMBERS TO BE RENAMED ARE: COPO, COPOBBB, COPOOUT, COPOOUT2,

   PDS391A SHOULD THESE MEMBERS BE RENAMED (Y/N) ?
  yes
   PDS090I COPO HAS BEEN RENAMED
   PDS090I COPOBBB HAS BEEN RENAMED
   PDS090I COPOOUT HAS BEEN RENAMED
   PDS090I COPOOUT2 HAS BEEN RENAMED
   PDS090I COPO2 HAS BEEN RENAMED
0 Example 5: an input buffering mode change is requested.
+ __________
  control double

   PDS100I PDS -- VERSION 7.2

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NOTRANS, LKEDDATE, PROMPT, RECO
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: DOUBLE

0 Example 6: an ABEND is requested.
+ __________
  control abend

   PDS100I PDS -- VERSION 7.2

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NOTRANS, LKEDDATE, PROMPT, RECO
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: DOUBLE

   PDS033I ABEND -- SYSTEM 0C1 FOLLOWS:
   PDS999E ABEND S0C1 U0000 AT +00002C IN PROGRAM PDS
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CLIST,VOL=SER=TSO002
0 Example 7: an ABEND is requested for PDS testing.
+ __________
  control norecover abend

   PDS100I PDS -- VERSION 7.2

   PDS030I GLOBAL OPERANDS: NOALIASINFO, NOTRANS, NORECOVER, LKEDDATE, P
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, NOFORM, NODEST
   PDS031I INPUT BUFFERING: DOUBLE

   PDS033I ABEND -- SYSTEM 0C1 FOLLOWS:
   PDS999E ABEND S0C1 U0000 AT +00002C IN PROGRAM PDS
   READY
  test
   TEST
1
0 Example 8: a SYSOUT copy is taken of a partial PDS session.
+ __________
  control sysout(x) form(dx00) dest(r131)

   PDS100I PDS70 -- VERSION 7.2
   PDS030I GLOBAL OPERANDS: NORECOVER, NOTRANS, ALIASINFO, LKEDDATE, PRO
   PDS030I GLOBAL OPERANDS: SYSOUT(X), FORM(DX00), DEST(R131)
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  MEM=DSNTEST
  printoff compar:comparep
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.CNTL
    MEMBER:
   COMPARE
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.CNTL
    MEMBER:
   COMPAREP
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  MEM=COMPAR:
  control nosysout
   PDS080I OUTCOPY DCB IS CLOSED

   PDS100I PDS70 -- VERSION 7.2
   PDS030I GLOBAL OPERANDS: NORECOVER, NOTRANS, ALIASINFO, LKEDDATE, PRO
   PDS030I GLOBAL OPERANDS: NODSNAME, NOSYSOUT, FORM(DX00), DEST(R131)
   PDS031I INPUT BUFFERING: MULTIPLE
   . . .
  Corresponding output in SYSOUT(X) for REMOTE(R131):
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  MEM=DSNTEST
  printoff compar:comparep
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  MEM=COMPAR:
  control nosysout
0 Example 9: a data set copy is taken of a partial PDS session.
+ __________
  control dsname(lib.cntl(dsntest1))

   PDS100I PDS70 -- VERSION 7.2
   PDS030I GLOBAL OPERANDS: NORECOVER, NOTRANS, ALIASINFO, LKEDDATE, PRO
   PDS030I GLOBAL OPERANDS: DSNAME(HABL.LIB.CNTL(DSNTEST1)) OLD
   PDS031I INPUT BUFFERING: MULTIPLE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  MEM=
  change lib.asm
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    6320   1X   405     174     4 CYL

   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO004  MEM=
  control nodsn
   PDS080I OUTCOPY DCB IS CLOSED
   . . .
  Corresponding output in 'HABL.LIB.CNTL(DSNTEST1)':
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  MEM=
  change lib.asm
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    6320   1X   405     174     4 CYL

   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO004  MEM=
  control nodsn
1
 'COPY
+ ____
0'The COPY subcommand invokes IEBCOPY or IEBGENER to copy data.
-'Example 1: copy a sequential data set to a member of a PDS.
+ __________
 'copy lib.pdsdd(pdsout)
 ' PDS484W COPY IS IN PROGRESS
 ' DATA SET UTILITY - GENERATE
 ' PROCESSING ENDED AT EOD
0'Example 2: copy subcommand check of members in a target library.
+ __________
 'copy pds72t/ temp.cntl nocall
 ' PDS852E PDS72T ALREADY EXISTS
 ' PDS852E PDS72TT ALREADY EXISTS
 '  COPY    O=SYS00015,LIST=NO,I=SYS00006
 '  S M=PDS72T,PDS72TI,PDS72TST,PDS72TT
0'Example 3: copy to add new members.
+ __________
 'copy pds72t:pds72t temp.cntl list
 ' PDS852E PDS72T ALREADY EXISTS
 ' PDS852E PDS72TT ALREADY EXISTS
 ' PDS484W COPY IS IN PROGRESS
 '            COPY    O=SYS00035,I=SYS00006
 '            S M=PDS72T,PDS72TI,PDS72TST,PDS72TT
 ' IEB167I  FOLLOWING MEMBER(S)  COPIED  FROM INPUT DATA SET
 ' IEB154I  PDS72TI  HAS BEEN SUCCESSFULLY  COPIED
 ' IEB154I  PDS72TST HAS BEEN SUCCESSFULLY  COPIED
 ' IEB144I  THERE ARE 0000141 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000075  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -00 WAS HIGHEST SEVERITY CODE
0'Example 4: copy to replace members.
+ __________
 'copy pds72t:pds72t temp.cntl replace list
 ' PDS484W COPY IS IN PROGRESS
 '            COPY    O=SYS00044,I=((SYS00006,R))
 '            S M=PDS72T,PDS72TI,PDS72TST,PDS72TT
 ' IEB167I  FOLLOWING MEMBER(S)  COPIED  FROM INPUT DATA SET
 ' IEB154I  PDS72T   HAS BEEN SUCCESSFULLY  COPIED
 ' IEB154I  PDS72TI  HAS BEEN SUCCESSFULLY  COPIED
 ' IEB154I  PDS72TST HAS BEEN SUCCESSFULLY  COPIED
 ' IEB154I  PDS72TT  HAS BEEN SUCCESSFULLY  COPIED
 ' IEB144I  THERE ARE 0000140 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000075  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -00 WAS HIGHEST SEVERITY CODE
0'Example 5: copy to a new data set.
+ __________
 'copy pds72t:pds72t new.lib new vol(tso008) dir(3)
 ' PDS484W COPY IS IN PROGRESS
 '            COPY    O=SYS00053,LIST=NO,I=SYS00006
 '            S M=PDS72T,PDS72TI,PDS72TST,PDS72TT
 ' IEB144I  THERE ARE 0000049 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000002  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -00 WAS HIGHEST SEVERITY CODE
1
-'Example 6: copy to a preallocated file.
+ __________
 'copy p72oppr file(ispplib) shr replace
 ' PDS484W COPY IS IN PROGRESS
 '            COPY    O=SYS00063,LIST=NO,I=((SYS00054,R))
 '            S M=P73OPPR
 ' IEB144I  THERE ARE 0000033 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000053  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -00 WAS HIGHEST SEVERITY CODE
0'Example 7: Load module copy (input and output blocksizes are equal).
+ __________
 'copy summaryz temp.load alias
 ' PDS484W COPY IS IN PROGRESS
 '            COPY    O=SYS00068,LIST=NO,I=((SYS00064,R))
 '            S M=SUMMARYZ,SUMMARY
 ' IEB144I  THERE ARE 0000022 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000078  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -00 WAS HIGHEST SEVERITY CODE
0'Example 8: Load module copy with maxblk specified.
+ __________
 'copy extract the.load alias maxblk(13030)
 ' PDS484W COPY IS IN PROGRESS
 '            COPYMOD O=SYS00074,LIST=NO,MAXBLK=13030,I=SYS00064
 '            S M=EXTRACT,EXTRACT2
 ' IEB190I  MAXIMUM BLOCK SIZE IS    13030, MINIMUM BLOCK SIZE IS    102
 ' IEB144I  THERE ARE 0000042 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000079  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -00 WAS HIGHEST SEVERITY CODE
0'Example 9: Load module COPY with differing blocksizes.
+ __________
 'copy summary the.load alias
 ' PDS484W COPY IS IN PROGRESS
 '            COPYMOD O=SYS00095,LIST=NO,MAXBLK=19069,I=SYS00086
 '            S M=SUMMARY,SUMMARYZ
 ' IEB191I  MAXBLK DEFAULTS TO    18432
 ' IEB190I  MAXIMUM BLOCK SIZE IS    18432, MINIMUM BLOCK SIZE IS    102
 ' IEB144I  THERE ARE 0000041 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000079  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -04 WAS HIGHEST SEVERITY CODE
0'Example 10: copy text members (demonstrates a collision).
+ ___________
 'copy pros/ temp.cntl to(dat)
 ' PDS885E MORE THAN ONE OUTPUT MEMBER WOULD BE NAMED DATPROSE
0'Example 11: copy and rename text members.
+ ___________
 'copy pros/ temp.cntl to(dx)
 ' PDS484W COPY IS IN PROGRESS
 '            COPY    O=SYS00237,LIST=NO,I=SYS00219
 '            S M=(($$$PROSE,DX$PROSE),(OLDPROSE,DXDPROSE),(PROSCOM,DXOS
 '            S M=((PROSCOP,DXOSCOP),(PROSDIR,DXOSDIR),(PROSREP,DXOSREP)
 ' IEB144I  THERE ARE 0000122 UNUSED TRACKS IN OUTPUT DATA SET
 ' IEB149I  THERE ARE 0000073  UNUSED DIRECTORY BLOCKS IN OUTPUT DIRECTO
 ' IEB147I  END OF JOB -00 WAS HIGHEST SEVERITY CODE

1
  DELETE
+ ______
0 The DELETE or SCRATCH subcommand deletes a member from the data set.
- Example 1: a member is deleted.
+ __________
  del apdsnew2
   PDS040I APDSNEW2 HAS BEEN DELETED
0 Example 2: a default member is deleted.
+ __________
  members clear
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del
   PDS002I DEFAULT MEMBER IS CLEAR
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  yes
   PDS040I CLEAR HAS BEEN DELETED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
0 Example 3: a default member is not deleted.
+ __________
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  members clearx
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del
   PDS002I DEFAULT MEMBER IS CLEARX
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  no
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
0 Example 4: a group of members is deleted.
+ __________
  del cmd/
   PDS162I MEMBERS TO BE DELETED ARE: AACMD, CMD, CMDSBINT, CMDSBSYS, CM
            CMDTSO

   PDS394A SHOULD ALL OF THESE MEMBERS BE DELETED (Y/N) ?
  yes
   PDS040I CMDTSO HAS BEEN DELETED
   PDS040I CMDSBTSO HAS BEEN DELETED
   PDS040I CMDSBSYS HAS BEEN DELETED
   PDS040I CMDSBINT HAS BEEN DELETED
   PDS040I CMD HAS BEEN DELETED
   PDS040I AACMD HAS BEEN DELETED
0 Example 5: PLUS2 and its associated members are deleted.
+ __________
  del plus2 alias
   PDS162I MEMBERS TO BE DELETED ARE: PLUS2

   PDS163I ASSOCIATED MEMBERS TO BE DELETED ARE: PLUS, PLUSXX, PLUSXY

   PDS394A SHOULD ALL OF THESE MEMBERS BE DELETED (Y/N) ?
  yes
   PDS040I PLUSXY HAS BEEN DELETED
   PDS040I PLUSXX HAS BEEN DELETED
   PDS040I PLUS HAS BEEN DELETED
   PDS040I PLUS2 HAS BEEN DELETED
1
  DIRENTRY
+ ________
0 The DIRENTRY subcommand dumps the directory entry of a member.
- Example 1: a minimal directory entry is dumped.
+ __________
 'dir dumpa short
   PDS143I DUMPA DIRECTORY ENTRY, LENGTH=12
            0000  C4E4D4D7 C1404040  00060800           *DUMPA   ....*
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TEXT,VOL=SER=TSO003
  attrib
   PDS230I SPF STATS:    VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT
   PDS230I  DUMPA
0 Example 2: a directory entry with SSI information is dumped.
+ __________
 'dir backbl1 short
   PDS143I BACKBL1 DIRECTORY ENTRY, LENGTH=16
            0000  C2C1C3D2 C2D3F140  00021E02 01200000  *BACKBL1 .......
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  attrib
   PDS230I SPF STATS:    VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT
   PDS230I  BACKBL1       SSI: 01200000
0 Example 3: a directory entry with ISPF statistics is dumped.
+ __________
 'dir billing short
   PDS143I BILLING DIRECTORY ENTRY, LENGTH= 42
            0000  C2C9D3D3 C9D5C740  0006060F 01000000  *BILLING .......
            0010  0083257F 0083257F  12200016 00160000  *.c.".c.".......
            0020  C8C1C2D3 40404040  4040               *HABL      *
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TEXT,VOL=SER=TSO003
  attrib
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  BILLING      01.00  83/09/14  83/09/14 12:20    22    22
0 Example 4: the directory entry of a main load module is dumped.
+ __________
 'dir clear short
   PDS143I CLEAR DIRECTORY ENTRY, LENGTH=40
            0000  C3D3C5C1 D9404040  000A102E 000A1500  *CLEAR   .......
            0010  00000000 03F20000  28002800 00009800  *.....2........q
            0020  00000080 106F0100                     *.....?..*
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I CLEAR ATTRIBUTES ARE: NONE
   PDS025I SSI INFORMATION: 0080106F
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  000028  --      1K
   PDS106I LAST LINK-EDITED ON  4/15/80
   PDS160I ALIASES FOR THIS MEMBER ARE: CLEARA, CLEARB
0 Example 5: the directory entry of an alias load member is dumped.
+ __________
 'dir clearb short
   PDS143I CLEARB DIRECTORY ENTRY, LENGTH=50
            0000  C3D3C5C1 D9C24040  000A10B3 000A1500  *CLEARB  .......
            0010  00000000 03F20000  28002800 00009800  *.....2........q
            0020  00000000 C3D3C5C1  D9404040 0080106F  *....CLEAR   ...
            0030  0100                                  *..*
1
0'Example 6: output interpreted directory information from an ISPF membe
+ __________
 'dir pds72tt
 ' PDS143I PDS72TT DIRECTORY ENTRY, LENGTH=42
 '          0000  D7C4E2F7 F2E3E340  00700A0F 01040000  *PDS72TT .......
 '          0010  0085303F 0085307F  0811002A 002A000A  *.e...e.".......
 '          0020  C8C1C2D3 40404040  4040               *HABL      *
 '
 ' PDS262I LOC NAME     VALUE     DESCRIPTION
 ' PDS262I --- ----     -----     -----------
 ' PDS262I 00  PDS2NAME PDS72TT   MEMBER NAME
 ' PDS262I 08  PDS2TTRP 00700A    TTR OF FIRST BLOCK OF DATA
 ' PDS262I 0B  PDS2INDC 0F        0 TTRS FOLLOW; 15 HALFWORDS OF DATA
 ' PDS262I 0C  DIRSPFV  1.        MEMBER VERSION NUMBER
 ' PDS262I 0D  DIRSPFR  4.        MEMBER REVISION NUMBER
 ' PDS262I 0E  DIRSPFZ  0.        (CURRENTLY NOT USED)
 ' PDS262I 10  DIRSPFCR 0085303F  CREATION DATE    -- FORMAT: 00YYDDDF
 ' PDS262I 14  DIRSPFCD 0085307F  LAST CHANGE DATE -- FORMAT: 00YYDDDF
 ' PDS262I 18  DIRSPFCT 0811      LAST CHANGE TIME -- FORMAT: HHMM
 ' PDS262I 1A  DIRSPFSI 42.       NUMBER OF LINES CURRENTLY
 ' PDS262I 1C  DIRSPFIN 42.       NUMBER OF LINES INITIALLY
 ' PDS262I 1E  DIRSPFMD 10.       NUMBER OF MODIFIED LINES
 ' PDS262I 20  DIRSPFID HABL      USERID OF LAST PERSON TO UPDATE
0'Example 7: output interpreted directory information from a load member
+ __________
 'dir pds72t
 ' PDS143I PDS72T DIRECTORY ENTRY, LENGTH=40
 '          0000  D7C4E2F7 F2E34040  015C062E 015D0100  *PDS72T  .*...).
 '          0010  00000000 C2E3020E  10389000 0000B800  *....BT.........
 '          0020  02001234 56780100                     *........*
 '
 ' PDS262I LOC NAME     VALUE     DESCRIPTION
 ' PDS262I --- ----     -----     -----------
 ' PDS262I 00  PDS2NAME PDS72T    MEMBER NAME
 ' PDS262I 08  PDS2TTRP 015C06    TTR OF FIRST BLOCK OF DATA
 ' PDS262I 0B  PDS2INDC 2E        1 TTRS FOLLOW; 14 HALFWORDS OF DATA
 ' PDS262I 0C  PDS2TTRT 015D01,00 TTR OF FIRST TEXT BLOCK
 ' PDS262I 10  PDS2TTRN 000000,00 (NOT USED FOR THIS MEMBER)
 ' PDS262I 14  PDS2ATR1 C2        REENTRANT; REUS; NOT OVERLAY; NOT TEST
 ' PDS262I                        NOT ONLY LOAD; NOT SCATTER; EXEC; NOT
 ' PDS262I 15  PDS2ATR2 E3        NOT DC; TEXT ORG=0; EP=0; HAS RLDS
 ' PDS262I                        EDIT; NOT TEST; LKED F; REFRESHABLE
 ' PDS262I 16  PDS2STOR 132K      TOTAL CONTIGUOUS MAIN STORAGE REQUIRED
 ' PDS262I 19  PDS2FTBL 14,480.   LENGTH OF FIRST BLOCK OF TEXT
 ' PDS262I 1B  PDS2EPA  000000    ENTRY POINT ADDRESS
 ' PDS262I 1E  PDS2FTB1 B8        PROCESSED BY OS/VS LINKAGE EDITOR
 ' PDS262I 1F                     PAGE ALIGNMENT REQUIRED
 ' PDS262I 1F                     SSI INFORMATION IS PRESENT
 ' PDS262I 1F                     APF INFORMATION IS VALID
 ' PDS262I 1F  PDS2FTB2 00        RMODE 24;  ALIAS AMODE 24;  MAIN AMODE
 ' PDS262I 20  PDS2FTB3 02        RLD/CONTROL RECORDS AFTER FIRST TEXT B
 ' PDS262I 22  PDSSSIWD 12345678  SSI INFORMATION
 ' PDS262I 26  PDSAPFCT 01        LENGTH OF PROGRAM AUTHORIZATION CODE
 ' PDS262I 27  PDSAPFAC 00        PROGRAM AUTHORIZATION CODE
1
  DISPLAY
+ _______
0 The DISPLAY subcommand lists member names from the data set directory.
- Example 1: the member name directory is listed.
+ __________
  d
   #           BILLING     DUMP        EXTRACT     FCBDATA     FCBOVER -
   FCBOVER2-A  FCBOVER3-A  OVERFCB
0 Example 2: a range of member names is listed.
+ __________
  d a:fcbd
   BILLING     DUMP        EXTRACT     FCBDATA
0 Example 3: a range of member names is listed.
+ __________
  display a fcbd
   BILLING     DUMP        EXTRACT     FCBDATA
0 Example 4: member names containing FCB are listed.
+ __________
  display fcb/
   FCBDATA     FCBOVER -A  FCBOVER2-A  FCBOVER3-A  OVERFCB
0 Example 5: display with no operands always lists the entire directory.
+ __________
  display
   #           BILLING     DUMP        EXTRACT     FCBDATA     FCBOVER -
   FCBOVER2-A  FCBOVER3-A  OVERFCB
0 Example 6: a pattern member specification is used.
+ __________
  c lib.cntl
   PDS220I //SYS00056  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  display a/x'c2'
   ABEND       AMBLIST     ASMBLK      ASMBLK2
   C1E2D4FF8140C240-A  *ASM.a B *
   BA          BACKBL0 -A  BACKBL1     BATCHCHK    BATCHTMP    BATCHTSO
   BATCHTS2    BKIPOCAT    BKPAGE01    SHRLOADB    TESTFBA
   F1C2D2D7D3D7C1F0    *1BKPLPA0*
1
  EDIT
+ ____
0 The EDIT or SPFEDIT subcommand enters ISPF edit for a member.
- Example 1: edit a member.
+ __________
  edit pdsjcl
   ---screen clear---

   EDIT --- HABL.LIB.PDS60(PDSJCL) - 60.00 -------------------- COLUMNS
   COMMAND ===> _                                               SCROLL =
   ****** ***************************** TOP OF DATA ********************
   000100 //ONE   EXEC  PGM=ASMBLR,REGION=2048K,
   000200 //             PARM=(NORLD,RENT,TERM,NOSTMT,'LINECOUNT(55)',
   000300 //             'XREF(SHORT),BUFSIZE(MAX),SYSPARM(ISPF)')
   000400 //*
   000500 //*          IF YOU DO NOT HAVE SPF, USE SYSPARM(NOSPF)
   000600 //*                 IF YOU HAVE SPF, USE SYSPARM(SPF)
   000700 //*    IF SPF AND ISPF WILL COEXIST, USE SYSPARM(SPF)
   000800 //*                IF YOU HAVE ISPF, USE SYSPARM(ISPF)
   000900 //*
   001000 //*
   001100 //SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR
   001200 //         DD  DSN=SYS1.MACLIB,DISP=SHR
   001300 //SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
   001400 //SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
   001500 //SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
   001600 //SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&
   001700 //         DCB=BLKSIZE=3120
   001800 //SYSPRINT DD  SYSOUT=*
   001900 //SYSTERM  DD  SYSOUT=*
   002000 //SYSIN    DD  DISP=SHR,DSN=THIS.PDS(PDS60)        <=== CHANGE
   002100 //LK1    EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)

- Note 1: to verify that a member does exist before invoking ISPF, enter
+ _______
  edit membernn old
0 Note 2: to verify that a member does not exist before invoking ISPF, e
+ _______
  edit membernn new
0 Note 3: to use an initial edit macro, use the MACRO keyword:
+ _______
  edit membernn macro(macname)
0 Note 4: to use a specific edit profile, use the PROFILE keyword:
+ _______
  edit membernn profile(profname)
0 Note 5: to set a default edit profile, use the SETPROF keyword:
+ _______
  edit membernn setprof(profname)
0 Note 6: to subsequently remove the default edit profile, enter:
+ _______
  edit membernn setprof(*)
0 Note 7: to obtain an ISPF member list from which you may select member
+ _______
          to edit, enter:
  edit :
1
  EXEC or %
+ _________
0 The EXEC or % subcommand executes a CLIST containing PDS subcommands.
  When input is from a CLIST source, PDS assumes yes responses for
  situations that are normally prompted for (such as a group delete).
- Example 1: the following portion of a CLIST is used for NCP maintenanc
+ __________
  DELE JSJNCP1O
  DELE JSJNCPRO
  DELE SYSO:SYSO
  CHANGE 'SYS1.PRD.VTAMLST' &DISP VOL(&VOL.)
  DELE JSJNCP1O
  CHANGE 'SYS1.VTAMOBJ' &DISP VOL(&VOL.)
  DELE JSJNCP1
0 Note 1: To invoke this CLIST (NCPNEW) from a library allocated to
+ _______
          your SYSPROC FILE and pass it a positional parameter and a
          keyword parameter, you could enter the following while in
          the PDS command:
  %ncpnew old vol(tso002)
0 Note 2: To invoke this CLIST (NCPNEW) from a library named LIB.CLIST
+ _______
          and pass it a positional parameter and a keyword parameter, yo
          could enter the following while in the PDS command:
  exec lib(ncpnew) 'old vol(tso002)'
0 Note 3: At this time, PDS does not support the use of the EXEC or %
+ _______
          subcommands from ISPMODE or MEMLIST.
1
  FIND
+ ____
0 The FIND subcommand displays portions of a member which contain a
  search string.  Optionally, the THEN or ELSE keywords may be entered
  to allow conditional execution of other subcommands.
- Example 1: search for STEPLIB DD statements.
+ __________
  find a:f '//steplib'

   ** FIND     BOOK
   000400 //STEPLIB  DD DSN=SYS1.PLILINK,DISP=SHR
   001900 //STEPLIB  DD DSN=HABL.LIB.LOAD,DISP=SHR
   003600 //STEPLIB  DD  DSN=SYS1.PLILINK,DISP=SHR
   PDS142I       41  LINES IN THIS MEMBER

   ** FIND     CALFORT
   001000 //STEPLIB   DD  DSN=HABL.LIB.LOAD,DISP=SHR
   PDS142I       15  LINES IN THIS MEMBER
0 Example 2: list the names of members containing STEPLIB DD statements.
+ __________
  find a:f '//steplib' then(members)

   ** FIND     BOOK     THEN MEMBERS

   ** FIND     CALFORT  THEN MEMBERS
0 Example 3: edit the members containing STEPLIB DD statements.
+ __________
  find a:f '//steplib' then(edit)

   -- ISPF edit for member BOOK --

   -- ISPF edit for member CALFORT --
0 Example 4: FIND with FIRST converts to LIST after the string is found.
+ __________
  f pds61 'ikjdfpb' first
   134830          IKJDFPB
   134840          TITLE 'P D S  --  PDS DCBD AND CVT DSECTS           0
   134850          PRINT NOGEN
   134860          DCBD  DSORG=PO
   134870          SPACE 5
   134880          CVT   DSECT=YES
   134890          SPACE 5
   134900 .NOGEN   END  PDS61
   PDS142I   13,490  LINES IN THIS MEMBER
0 Example 5: conditional delete of members without " JOB " in the member
+ __________
  find a:b  = job =  else(delete)

   ** FIND     ASMH2    ELSE DELETE
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  yes
   PDS040I ASMH2 HAS BEEN DELETED

   ** FIND     BLDLMEMB ELSE DELETE
   PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?
  no
1
0 Example 6: search a member of a CNTL data set.
+ __________
  f pdsxx 'size'
   000600 //             'XREF(SHORT),BUFSIZE(MAX),SYSPARM(ISPF)')
   PDS142I       26  LINES IN THIS MEMBER
0 Example 7: find a character string in a load module.
+ __________
  find pds /abcd/ ldump
   PDS141I AT 000000  CSECT PDS61     LENGTH 003802
     002430 2430  F6F7F8F9 C1C2C3C4  C5C6E2E8 E2C8C5D3  *6789ABCDEFSYSHE
     0037C0 37C0  4B4B4BC1 C2C3C4C5  C6C7C8C9 4B4B4B4B  *...ABCDEFGHI...

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 8: find a lower case string in a load module.
+ __________
  find pds /abcd/ lblock asis
   PDS141I AT 000000  CSECT PDS61     LENGTH 003802
   003780 3780 *=".abcdefghi.......jklmnopqr........stuvwxyz............

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 9: find a hexadecimal string (TPUT SVC call).
+ __________
  find pds x0a5dx ldump
   PDS141I AT 000000  CSECT PDS61     LENGTH 003802
     000C90 0C90  000C4110 C54CBF18  C5D60A5D 41100001  *....E<..EO.)...
     001540 1540  C55C47DE 00044110  A5644100 00250A5D  *E*......v......
     001550 1550  58107208 41101004  4100004F 0A5D4700  *...........×.).

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 10: find a character string in block output mode.
+ ___________
  f * /pds61/ block
   PDS140I BLOCK  RECORD         1   LENGTH    248   TTR 010308
   000000 0000 *.......0PDS61   ........ALIAS   ........ATTRIB  ........

   PDS140I BLOCK  RECORD         9   LENGTH 14,344   TTR 010401
   0004EA 0000 *.00..PDS61...........zH...H...H../....N...E....;×.......

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 11: find a character string in dump output mode.
+ ___________
  f * /pds61/ dump
   PDS140I DUMP   RECORD         1   LENGTH    248   TTR 010308
     000000 0000  20000000 000100F0  D7C4E2F6 F1404040  *.......0PDS61

   PDS140I DUMP   RECORD         9   LENGTH 14,344   TTR 010401
     0004EA 0000  47F0F00A 05D7C4E2  F6F190EC D00C189F  *.00..PDS61.....

   PDS142I       21 BLOCKS IN THIS MEMBER
0 Example 12: find a hexadecimal string in a specific CSECT.
+ ___________
  find pds x413085eex module(list) ldump
   PDS141I AT 006DF8  CSECT LIST      LENGTH 000AD1
     006E38 0040  B3F84810 750C4B10  C58E4010 750C4130  *.8......E. ....
     006E48 0050  85EE07F3 5880B910  950076A9 41108A0E  *e..3....n..z...
     007198 03A0  83AA4140 00104130  85EE5800 7B585000  *c.. ....e...#.&

   PDS142I       21 BLOCKS IN THIS MEMBER
1
  FIXPDS
+ ______
0  The FIXPDS subcommand can modify a data set DCB, expand a PDS directo
   reinitialize a data set, free unused space or mark all space as used.
-  Example 1: re-establish the DCB for a load library.
+  __________
  fixpds load blksize(13030)

   PDS220I //SYS00100  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=23440),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,45))                /*FREE TRK=40,FREE D

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  yes

   PDS220I //SYS00101  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=13030),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,45))                /*FREE TRK=40,FREE D
0 Example 2: add 70 directory blocks.
+ __________
  fix expand(70)
   PDS050I ASCEND WILL BE MOVED
   PDS050I BIO WILL BE MOVED

   PDS220I //SYS00101  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=13030),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,45))                /*FREE TRK=40,FREE D

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  yes
   PDS051I ASCEND IS BEING MOVED
   PDS051I BIO IS BEING MOVED

   PDS220I //SYS00102  DD  DSN=HABL.LIB.TESTLOAD,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=13030),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(85,5,115))               /*FREE TRK=38,FREE D
0 Example 3: discard all members and reinitialize the data set.
+ __________
  fixpds reset
   PDS451W ALL MEMBERS IN THIS PDS WILL BE LOST
   PDS850E ZAPASM2 IS BEING UPDATED BY HRJM

   PDS220I //SYS00121  DD  DSN=HABL.LIB.TCLIST,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=VB,LRECL=255,BLKSIZE=9040),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(17,8,25))                /*FREE TRK=2,FREE DI

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  yes

   PDS220I //SYS00122  DD  DSN=HABL.LIB.TCLIST,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=VB,LRECL=255,BLKSIZE=9040),VOL=SER=TSO002,
   PDS220I //  SPACE=(TRK,(17,8,25))                /*FREE TRK=16,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TCLIST,VOL=SER=TSO002
  verify :
   PDS110I       0 LOGICAL RECORDS WERE INPUT
   PDS111I       0 PHYSICAL BLOCKS WERE INPUT
   PDS114I       0 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA SET
   PDS115I       0 MEMBERS WERE CHECKED
1
- Example 4: recover members after the end of the data set (DS1LSTAR).
+ __________
  fix maxspace

   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    U         0   19069   2X   180     176     2 CYL

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  yes

   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    U         0   19069   2X   180       0     2 CYL

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TEST1,VOL=SER=TSO004  MEM=
  res xxxy prompt

   PDS101I DELETED MEMBER FOUND AT TTR: 000401

   PDS805E INVALID LOAD MODULE DATA
   PDS144I DATA LINE 1:
   ...........g&0..&...&..hK..d..K.....K..%...-...0M......4q.......K....

   PDS144I DATA LINE 2:
   ...........Q ..........4...............:...D.......d...............'.

   PDS144I DATA LINE 3:
   .....................................................................

   PDS144I DATA LINE 4:
   .......h...y ..............@...................H.......Q.............

   PDS144I DATA LINE 5:
   ......K........%K........BK....%K....dj.Q .......fo...o...o...m...m.J


   PDS101I DELETED MEMBER FOUND AT TTR: 000405

   PDS164I CSECTS ARE: BLOKHEAD, IEFSD095

   PDS106I LAST LINK-EDITED ON  3/24/79

   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  n

   PDS101I DELETED MEMBER FOUND AT TTR: 000419

   PDS164I CSECTS ARE: MAIN, INIT, YEARHD, MPAGE, DPAGE, DAY, SNOOPS, JA
            MARCH, APRIL, MAY, JUNE, JULY, AUG, SEPT, OCTO, NOV, DEC, MO
            JDATE, IHNECOMH

   PDS106I LAST LINK-EDITED ON 12/23/81

   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  y
   PDS091I XXXY HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  MAIN
   PDS104I MODULE LENGTH  00E8D0  --     59K

   PDS300A ENTER OPTION -- DSN=HABL.LIB.TEST1,VOL=SER=TSO004  MEM=XXXY
1
- Example 5: release to an extent boundary.
+ __________
  fix relextent


   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    9040   2X   225     108     5 CYL

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  y

       75 TRACKS RELEASED FROM DATA SET HABL.LIB.PDS70
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    9040   1X   150      33     5 CYL

   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS70,VOL=SER=TSO004  MEM=XXXY
- Example 6: release a part of the unused space to a cylinder boundary.
+ __________
  fix relsave(89)

   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    U         0   19069   3X   210     206     2 CYL

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  y

      105 TRACKS RELEASED FROM DATA SET HABL.LIB.TEST1
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    U         0   19069   1X   105     101     2 CYL


   PDS300A ENTER OPTION -- DSN=HABL.LIB.TEST1,VOL=SER=TSO004  MEM=XXX:XX
- Example 7: release all unused space from a sequential data set.
+ __________
  fix release

   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FBA     133    3990   1X    10       8    50 TRK

   PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?
  y

        8 TRACKS RELEASED FROM DATA SET HABL.SYSOUT2.DATA
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FBA     133    3990   1X     2       0    50 TRK

   PDS300A ENTER OPTION -- DSN=HABL.SYSOUT2.DATA,VOL=SER=TSO004
1
  HELP
+ ____
0 Example 1: List HELP information for PDS subcommands.
+ __________
  help
    The PDS command has the following subcommands:
      %cmem operands  - execute PDS subcommands from the CLIST CMEM
      ATTRIB xx       - list attributes of member or module XX
      ATTRIB xx reus  - assign the reusable linkage attribute to module
      ALIAS xx yy     - add an alias to member XX called YY
      BROWSE xx       - browse member XX with ISPF
      CHANGE zzz      - switch to the data set ZZZ
      COMPARE xxx yyy - compare members XXX and YYY with TSO COMPARE
      COMPRESS        - compress the data set
      CONTROL noprom  - do not prompt for yes or no inputs
      DISPLAY rr tt   - display member names in the range RR thru TT9999
      DIRENTRY xx     - dump the directory entry for member XX
      DELETE xx       - delete member XX
      DSNAME tso      - display the current allocation in TSO format
      DSPRINT xx      - print a hardcopy of member XX with TSO DSPRINT
      EDIT xx         - edit member XX with ISPF
      END             - terminate the PDS command
      EXEC ccc        - execute PDS subcommands from the CLIST CCC
      FIND xx =fff=   - list occurrences of the string FFF in member XX
      FIXPDS exp(30)  - add 30 directory blocks to the data set
      FSE xx          - edit member XX with TSO FSE
      HELP sss        - list the HELP entry for subcommand SSS with TSO
      HISTORY xx      - list HISTORY data for module XX
      IF mvs/ rent    - locate the ..MVS.. modules marked as reentrant
      ISPF 3.3        - invoke the ISPF primary panel with option 3.3
      ISPMODE         - enter ISPF session display mode
      LIST xx         - display member XX
      MAP xx short    - map the CSECT structure of module XX in short fo
      MEMBERS         - display the current member group
      MEMLIST         - enter ISPF member list mode
      OPTIONS         - display the menu of PDS subcommands
      OUTCOPY xx      - output an IEBCOPY select statement for member XX
      PATTERN pp dd   - display all member names containing PP and DD
      PRINTOFF xx     - print a hardcopy of member XX with TSO PRINTOFF
      RECALL          - display or reenter the previous subcommand
      RENAME xx yy    - rename member XX to YY
      REPLACE x /y/z/ - replace string Y with string Z in member X
      RESTORE xx      - resurrect member XX
      REVIEW xx       - browse member XX with TSO REVIEW
      SUBMIT xx       - submit JCL member XX with TSO SUBMIT
      SUBLIST xx/     - form a member subgroup with members containing X
      TSO yy z1 z2    - invoke the TSO command YY using operands Z1 and
      TSOEDIT xx      - edit member XX with TSO EDIT
      TSOLIST xx      - display member XX with TSO LIST
      USAGE           - list directory and data set statistics
      VERIFY          - validity check the data set

      Additional HELP only entries for PDS:
      ABEND           - explains ABEND processing
      ATTN            - explains attention handling
      DEFINE          - explains member and data set terminology
      DIALOG          - explains the relationship to ISPF edit and brows
      LIMITS          - documents several PDS limitations
      GROUP           - explains member groups and name forms allowed
      UPDATE          - explains data set protection and SHR updates
      H MS MS(pds999) - explains the PDS999E program message
1
0 Example 2: request the HELP entry for PDS HELP.
+ __________
  help hel
   The HELP subcommand lists data from the HELP data set.  The TSO
   HELP command is used; if the HELP subcommand is entered without
   operands, a list of valid subcommands is displayed.

  SYNTAX -
       HELP  subcommand FUNCTION SYNTAX OPERAND/OPERAND(k)

   ALIASES  - H, HE, HEL, HELP
   DEFAULTS - none.
   REQUIRED - none.

  OPERANDS -
   subcommand  - optional, specifies the name of a subcommand (or the
                 alias name of a subcommand) for which HELP is to be
                 displayed.  If the subcommand name is omitted, a list
                 of valid subcommands is displayed.
    FUNCTION   - specifies that function information for the subcommand
                 is to be displayed.
    SYNTAX     - specifies that syntax information for the subcommand
                 is to be displayed.
    OPERAND(k) - specifies that information for the keyword identified
                 in the (k) operand is to be displayed.  If the (k)
                 operand is omitted, information on all operands of the
                 subcommand will be displayed.
0 Example 3: request HELP syntax information only.
+ __________
  help hel s
  SYNTAX -
       HELP  subcommand FUNCTION SYNTAX OPERAND/OPERAND(k)

   ALIASES  - H, HE, HEL, HELP
   DEFAULTS - none.
   REQUIRED - none.
0 Example 4: request only selected operands.
+ __________
  help hel o(oper,funct)
    FUNCTION   - specifies that function information for the subcommand
                 is to be displayed.
    OPERAND(k) - specifies that information for the keyword identified
                 in the (k) operand is to be displayed.  if the (k)
                 operand is omitted, information on all operands of the
                 subcommand will be displayed.
0 Example 5: explain two messages received during an ATTRIB subcommand.
+ __________
  .?
    PDS720E NOT APF AUTHORIZED, THE APF DATA IS MISSING
     The APF data for this module is not present and the module is
     assumed not to be authorized.

    PDS722E THE APF DATA CAN NOT BE CHANGED
     Due to missing or invalid APF data, the APF value was not modified.
     A module linked with an old linkage editor might not have APF data.
0 Example 6: explain two messages received during an ATTRIB subcommand.
+ __________
  help msg msg(pds722,pds720)
   --same output as the previous example--
1
  HISTORY
+ _______
0 The HISTORY subcommand displays the last linkage-edit date for a
  module and lists any CSECT IDR data assigned to a load module.
- Example 1: the history of a load module is listed.
+ __________
  history igc0009c
   PDS060I TRANSLATOR HISTORY BY CSECT -
   IKTVTPUT  9/19/80   5741SC103   V02 M02       9/19/80   C'PLS2258'  V
   IKTVTGET  8/28/80   5741SC103   V02 M02       8/28/80   C'PLS2253'  V
   IGG09302  8/25/80   5741SC103   V02 M02
   IKTXMTPT  8/20/80   5741SC103   V02 M02       8/20/80   C'PLS1958'  V
   IKTASTPT  8/19/80   5741SC103   V02 M02       8/19/80   C'PLS1900'  V
   IKT0009C  7/23/80   5741SC103   V02 M02       7/23/80   C'PLS1919'  V
   IKT93EST  2/02/80   5741SC103   V02 M02       2/02/80   C'PLS1501'  V
   IGC0009C 12/19/79   5741SC103   V02 M02
   IGG09301 12/03/79   5741SC103   V02 M02
   IGG09300  3/23/79   5741SC103   V02 M02
   IGG09303  3/05/79   5741SC103   V02 M02
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   IKTASTPT      2/09/84    HABL
   IKTASTPT      2/09/84    HRJM
   IKTASTPT      2/08/84    HABL
   PDS062I USER-SUPPLIED UPDATE HISTORY BY CSECT -
   IGG09302      1/21/81    UZ33259
   IKTVTPUT      9/19/80    RSI02630761
   IKTVTGET      8/28/80    RSI02410976
   IKTXMTPT      8/20/80    RSI02330596
   IKTASTPT      8/19/80    RSI02320501
   IKT0009C      7/23/80    RSI02040654
   IGG09301      6/11/80    UZ29303
   IGC0009C      6/11/80    UZ29589
   IKT93EST      2/02/80    RSI00330073
   IGG09300      1/17/80    UZ23355
   IGG09303      1/17/80    UZ25385
   PDS064I LAST LINK-EDITED ON  9/22/82 BY LKED 5752SC104 V03 M08
0 Example 2: the PTF names and the linkage-editor name are requested.
+ __________
  hist igc0009c sysmod(uz) lked
   PDS062I USER-SUPPLIED UPDATE HISTORY BY CSECT -
   IGG09302      1/21/81    UZ33259
   IGG09301      6/11/80    UZ29303
   IGC0009C      6/11/80    UZ29589
   IGG09300      1/17/80    UZ23355
   IGG09303      1/17/80    UZ25385
   PDS064I LAST LINK-EDITED ON  9/22/82 BY LKED 5752SC104 V03 M08
0 Example 3: all modules ZAPPED by userid HABL are requested.
+ __________
  hist : zap(habl)

   ** HISTORY  EXTRACT
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   EXTRACT       2/09/84    HABL

   ** HISTORY  IGC0009C
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   IKTASTPT      2/09/84    HABL
   IKTASTPT      2/08/84    HABL
1
  IF
+ __
0 The IF subcommand searches for members meeting defined conditions.
- Example 1: any members in use in an ISPF edit session.
+ __________
  if : spfedit
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  ZAPASM2      01.14  84/01/13  84/01/16  9:30    98    47
0 Example 2: any members with errors on a LOAD.
+ __________
  if : loaderr
   IEA703I 106- E HABL     SPFACCT  MODULE ACCESSED EXTEND

   PDS020I EXTEND ATTRIBUTES ARE: NONE
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  001D08  --      8K
   PDS106I LAST LINK-EDITED ON 11/29/82
0 Example 3: the names of any overlay members with more than 100,000 cha
+ __________
  if : overlay above(100000) then(attrib)

   PDS020I PSCRIPT ATTRIBUTES ARE: OVERLAY
   PDS102I ENTRY POINT AT 000080
   PDS104I MODULE LENGTH  02E260  --    185K
   PDS106I LAST LINK-EDITED ON  8/19/79
0 Example 4: the history of any modules ZAPPED by userid HHHH.
+ __________
  if : zap(hhhh) then(hist)

   ** IF       EXTRACT  THEN HISTORY
   PDS060I TRANSLATOR HISTORY BY CSECT -
   EXTRACT   4/18/74   360SAS037   V21 M00
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   EXTRACT       2/09/84    HABL
   EXTRACT       2/09/84    HHHH
   EXTRACT       6/15/76    NO IDENT
   PDS064I LAST LINK-EDITED ON  6/17/76 BY LKED 360SED521 V21 M00
0 Example 5: the names of any orphan members.
+ __________
  if : orphan then(members)

   ** IF       SAVESOK  THEN MEMBERS

   ** IF       SS1      THEN MEMBERS
0 Example 6: a map of members in the group which contain a CSECT named S
+ __________
  if ten/ module(ssp) then(map)

   ** IF       EXTEND   THEN MAP
   SSP95DIR  000000  001D08

   PDS103I ENTRY POINT AT 000000  --  SSP95DIR
   PDS104I MODULE LENGTH  001D08  --      8K
1
0 Example 7: the names of any members with I/O errors.
+ __________
  if : ioerr then(members)

   ** IF       ERROR1   THEN MEMBERS

   ** IF       ERROR2   THEN MEMBERS
0 Example 8: the attributes of members not saved by userid HABL.
+ __________
  if $:a notuser(habl)
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  $ARSPF       25.01  81/06/20  81/12/21  9:16    28    28
   PDS230I  $BKSPF       25.01  81/06/20  81/12/21  9:17    28    28
   PDS230I  ##
   PDS230I  ADDPASS      01.10  84/01/13  84/01/16 11:30    28    28
0 Example 9: the attributes of members changed between Jan. 10 and Feb.
+ __________
  if a:f changed(1/10/84:2/13/84)
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  ABEND        01.04  83/11/24  84/01/24  9:49     3     3
   PDS230I  CATCLEAN     01.02  82/05/15  84/02/13 12:55    17    17
   PDS230I  DSFRENAM     01.02  84/02/08  84/02/09 10:52    14    14
   PDS230I  DUMPNCP      01.04  84/01/18  84/01/24 10:59     9     8
   PDS230I  DYNASCR      01.07  84/01/24  84/01/10  9:33     9     8
0 Example 10: IEBCOPY statements are requested for non-amode 24 members.
+ ___________
  if : amode24 else(outcopy)

   ** IF       A11      ELSE OUTCOPY
           COPY OUTDD=OUTPUT,INDD=XALOAD
           S M=A11 ,A11))

   ** IF       A22      ELSE OUTCOPY
           S M=A22 ,A22))

   ** IF       R11      ELSE OUTCOPY
           S M=R11 ,R11))
0 Example 11: a combination of conditions is searched for.
+ ___________
  if : apferr lkederr rmodeany created(2/13/84) then(attr)

   PDS020I TESTONE ATTRIBUTES ARE: OVERLAY
   PDS120I MVS/XA RESIDENCE MODE IS ANY -- ADDRESSING MODE IS ANY
   PDS880E RESIDENCE MODE ANY AND ADDRESSING MODE ANY ARE INCOMPATIBLE
   PDS721E NOT APF AUTHORIZED, THE APF DATA IS THE WRONG LENGTH
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH RMODE ANY
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH AMODE ANY
   PDS102I ENTRY POINT AT 000080
   PDS104I MODULE LENGTH  02E260  --    185K
   PDS106I LAST LINK-EDITED ON  2/13/84
0 Example 12: create a subgroup of members; display the member names.
+ ___________
  if : alias then(sublist)
  attrib
   PDS230I SPF STATS:  VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MO
   PDS230I  APFCALL -A  01.02  84/06/13  84/06/13 15:34    88     4    8
   PDS066I MEMBER IS AN ALIAS FOR: IKJEFTE8
   PDS230I  APFCOMND-A  01.03  83/04/06  84/09/28 16:19   138    89    5
   PDS066I MEMBER IS AN ALIAS FOR: IKJEFTE2
1
  ISPMODE
+ _______
0 The ISPMODE subcommand provides a full screen ISPF session display mod
  Subcommands entered and the outputs from internal PDS subcommands are
  maintained in a session log.  ISPMODE processing is further extended
  to member list processing with the MEMLIST subcommand.

  If a PDS subcommand produces a output checkpoint (by default 250 lines
  of data), a checkpoint panel will be displayed to allow the user to
  continue or terminate the subcommand.  If the subcommand is terminated
  or completes normally, control is returned to the ISPMODE panel.

  ISPF commands (including PF keys), PDS subcommands and special numeric
  control codes for ISPMODE may be entered to control display processing

  MEMLIST and ISPMODE dialog table handling is primarily documented in
  the ISPF help panels and in the PDS help member; however, the followin
  should be noted:
    1.  Only 79 characters of an output line are retained or displayed.
    2.  ISPF commands RFIND, RCHANGE, LEFT and RIGHT are not supported.
    3.  PDS subcommands END, HELP and TSO are intercepted by ISPF; to us
        these as PDS subcommands, use an alias such as EN, HEL or TS.
    4.  CLIST processing is not supported.
    5.  Output is displayed at the completion of a subcommand or at a
        checkpoint, so output from a subcommand cannot be monitored as
        it is produced.  Thus, if PDS is in a CPU loop, the screen will
        lock up until an attention is entered.  At that time, the
        generated output will be displayed.
0 Example 1: enter ISPMODE with 500 lines between checkpoints; list a me
+ __________
  ispmode chkmax(500)

  ----------------------  ISPMODE Session Display  ------------------ RO
  COMMAND ===> list pdshelp_                                   SCROLL ==
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     3 Clear below     6 MEMLIST (all me
               2 Clear log           4 Clear above     7 Output ISPMODE
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007   MEM=$$$PROSE  ------------------
  PDS100I PDS70 -- VERSION 7.2

  PDS200I DISP UNIT     RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
  PDS200I SHR  3380     FB       80    9040   4X   150      28     1 CYL

  PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS71,VOL=SER=TSO007   MEM=$$$PRO
  ******************************* BOTTOM OF DATA ***********************
0 Example 2: search for literal data in the ISPMODE log.
+ __________

  --------------------------  Checkpoint Option  ------------------ ROW
  COMMAND ===> f statistics_                                   SCROLL ==
     Checkpoint! Enter an ISPF command, a F command, or special control
               0 Continue the subcommand
             end Terminate the subcommand
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007   MEM=PDSHELP  -------------------
  >list  pdshelp
  000100 )F FUNCTION -
  000200  The PDS45678 command allows a TSO user to access and manipulat
  000300  directory and selected members of a PDS or partitioned data se
  000400 ....
1
- Example 3: terminate the LIST subcommand.
+ __________

  --------------------------  Checkpoint Option  ---------------- ROW 16
  COMMAND ===> end_                                             SCROLL =
     Checkpoint! Enter an ISPF command, a F command, or special control
               0 Continue the subcommand
             end Terminate the subcommand
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=PDSHELP  --------------------
  016000    USAGE           - list directory and data set statistics
  016100    VERIFY          - validity check the data set
  016200    VPSPRINT xx prt - print a hardcopy of member XX with TSO VPS
  016300    ....

- Example 4: enter a long PDS subcommand.
+ __________

  ----------------------  ISPMODE Session Display  -------------- ROW 16
  COMMAND ===> if   $:z    userid(habl) noalias created(05/30+_ SCROLL =
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     3 Clear below     6 MEMLIST (all me
               2 Clear log           4 Clear above     7 Output ISPMODE
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=PDSHELP  --------------------
  016000    USAGE           - list directory and data set statistics
  016100    VERIFY          - validity check the data set
  016200    VPSPRINT xx prt - print a hardcopy of member XX with TSO VPS
  016300    ....

- Example 5: control is received in a continued panel.
+ __________

  ------------------------  PDS Continued Entry Panel  -----------------
  COMMAND ===> if   $:z    userid(habl) noalias created(05/30+
+                                                            _


  Note: you may resume entering the continued subcommand on the above li
- Example 6: the results of the subcommand are displayed.
+ __________

  ----------------------  ISPMODE Session Display  -------------- ROW 50
  COMMAND ===> _                                                SCROLL =
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     3 Clear below     6 MEMLIST (all me
               2 Clear log           4 Clear above     7 Output ISPMODE
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=$:Z  ------------------------
  >if   $:z    userid(habl) noalias created(05/30/85:05/31/85)  then(att
  PDS230I SPF STATS:  VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MOD
  PDS230I  DIALOG71    01.23  85/05/30  85/06/09 10:10  3753  3206   640
  PDS230I  DIATBL71    01.06  85/05/30  85/06/04 12:35   228   226     6
  PDS230I  SPWRK71B    01.04  85/05/31  85/06/09  8:32   170   167    15
  ****************************** BOTTOM OF DATA ************************
1
  LIST
+ ____
0 The LIST subcommand displays data from a member.
- Example 1: a load module is listed in default LDUMP format.
+ __________
  list iefbr15
   PDS141I AT 000000  CSECT IEFBR14   LENGTH 000004
     000000 0000  07FF07FE                              *....*

   PDS142I        5 BLOCKS IN THIS MEMBER
0 Example 2: a load module is listed starting at hexadecimal offset 0470
+ __________
  list units offset(470) lblock
   PDS141I AT 000000  CSECT UNITS     LENGTH 0004D6
   000470 0470 *IKJPUTL ..q.J...............&0........q.................
   0004B0 04B0 *........EXEC    ...Q      (NO MASK)IKJ*

   PDS141I AT 0004D8  CSECT UNITSPCL  LENGTH 000017
   0004D8 0000 *...... .....-....NAMES.*

   PDS142I        7 BLOCKS IN THIS MEMBER
0 Example 3: a load module is listed starting at hexadecimal offset 0470
+ __________
  list units offset(470) ldump
   PDS141I AT 000000  CSECT UNITS     LENGTH 0004D6
     000470 0470  C9D2D1D7 E4E3D340  0A0698E1 D10007FE  *IKJPUTL ..q.J..
     000480 0480  1BFF181D 5800C020  58D0D004 50F0D010  *............&0.
     000490 0490  41101000 0A0A98EC  D00C07FE 12000000  *......q........
     0004A0 04A0  00000001 00000000  30000000 00000001  *...............
     0004B0 04B0  00000000 00000000  C5E7C5C3 40404040  *........EXEC
     0004C0 04C0  000004D8 40404040  40404DD5 D640D4C1  *...Q      (NO M
     0004D0 04D0  E2D25DC9 D2D1                         *SK)IKJ*

   PDS141I AT 0004D8  CSECT UNITSPCL  LENGTH 000017
     0004D8 0000  00170010 00064000  00060008 6000000A  *...... .....-..
     0004E8 0010  04D5C1D4 C5E200                       *.NAMES.*

   PDS142I        7 BLOCKS IN THIS MEMBER
0 Example 4: module names beginning UNITSP.. are listed.
+ __________
  list units module(unitsp) ldump
   PDS141I AT 0004D8  CSECT UNITSPCL  LENGTH 000017
     0004D8 0000  00170010 00064000  00060008 6000000A  *...... .....-..
     0004E8 0010  04D5C1D4 C5E200                       *.NAMES.*

   PDS142I        7 BLOCKS IN THIS MEMBER
0 Example 5: BLOCK format shows all module records.
+ __________
  l iefbr15 block skiprec(2)
   PDS140I BLOCK  RECORD         3   LENGTH     18   TTR 000B1A
   000123 0000  *..b360SED521 .....*

   PDS140I BLOCK  RECORD         4   LENGTH     20   TTR 000B1B
   000135 0000  *............ .......*

   PDS140I BLOCK  RECORD         5   LENGTH      8   TTR 000B1C
   000149 0000  *.......*

   PDS142I        5 BLOCKS IN THIS MEMBER
1
0 Example 6: DUMP format shows all module records.
+ __________
  l iefbr15 dump skiprec(2)
   PDS140I DUMP   RECORD         3   LENGTH     18   TTR 000B1A
     000123 0000  801182F3 F6F0E2C5  C4F5F2F1 40210878  *..b360SED521 ..
     000133 0010  218F                                  *..*

   PDS140I DUMP   RECORD         4   LENGTH     20   TTR 000B1B
     000135 0000  0D000000 00040000  06000000 40000008  *............ ..
     000145 0010  00020008                              *....*

   PDS140I DUMP   RECORD         5   LENGTH      8   TTR 000B1C
     000149 0000  07FF07FE 20104740                     *....... *

   PDS142I        5 BLOCKS IN THIS MEMBER
0 Example 7: the first few lines of several members are displayed.
+ __________
  list print:print maxin(3) num

   ** LIST     PRINTALL
      200 //PRTDUMP EXEC PGM=IMDPRDMP,PARM='0,T',REGION=200K,TIME=20
      300 //TAPE  DD   DSN=DUMPTAPE,VOL=SER=DE4205,DISP=(OLD,KEEP),UNIT=
      400 // LABEL=(,NL)

   ** LIST     PRINTDOC
   000100 //HABLP  JOB (01,02,142,ABL,0005),'LELAND - IPODOC     ',
   000200 //           MSGCLASS=A,NOTIFY=HABL
   000300 //ONEN  EXEC  PGM=IEBGENER

   ** LIST     PRINTEST
       10 //A  EXEC  PGM=IEBGENER
       20 //SYSPRINT DD SYSOUT=A
       30 //SYSUT2   DD SYSOUT=S,DCB=(RECFM=FB,LRECL=80,BLKSIZE=80)
0 Example 8: a load module's data is summarized.
+ __________
  list extract ldump maxlen(16) maxout(5)
   PDS141I AT 000000  CSECT EXTRACT   LENGTH 000DD4
     000000 0000  47F0F00C 07C5E7E3  D9C1C3E3 90ECD00C  *.00..EXTRACT...

   PDS141I AT 000CDC  CSECT EXTRACT   ENTRY Z
     000CDC 0CDC  47F0F006 01E990EC  D00C184F 50D040AC  *.00..Z.....×&.

   PDS141I AT 000DD8  CSECT RCON      LENGTH 00090A
     000DD8 0000  47F0F00C 06D9C3D6  D5404040 90ECD00C  *.00..RCON   ...

   PDS141I AT 000E08  CSECT RCON      ENTRY RECFM
     000E08 0030  47F0F00C 06D9C5C3  C6D44040 90ECD00C  *.00..RECFM  ...

   PDS141I AT 000E30  CSECT RCON      ENTRY P
     000E30 0058  47F0F00C 06D74040  40404040 90ECD00C  *.00..P      ...
1
  MAP
+ ___
0 The MAP subcommand lists the CSECT structure of a load module.
- Example 1: a load module is mapped.
+ __________
  map igc0009c
   IKTASTPT  000000  00080C
   PDS441W IKTGETXT (WEAK)
   IKTAY8    000810  000B48
                                                       IKTAY81   000828
                                                       IKTAY82   00082E
                                                       IKTAY83   000834
   IKT93EST  001358  0003AE
   IKTVTGET  001708  000AD4
   IKTVTPUT  0021E0  0005D0
   IKTXMTPT  0027B0  0003EC
                                                       IKTXMFRR  0027C8
   IKT0009C  002BA0  000314
   IGC0009C  002EB8  000188
   IGG09300  003040  000660
   IGG09301  0036A0  00049C
   IGG09302  003B40  0005F4
   IGG09303  004138  000194

   PDS103I ENTRY POINT AT 000000  --  IKTASTPT
   PDS104I MODULE LENGTH  0042D0  --     17K
0 Example 2: the entry point and size of a load module is mapped.
+ __________
  map igc0009c entry
   IKTASTPT  000000  00080C

   PDS103I ENTRY POINT AT 000000  --  IKTASTPT
   PDS104I MODULE LENGTH  0042D0  --     17K
0 Example 3: a load module is mapped in short form.
+ __________
  map igc0009c short
   IKTASTPT  000000  00080C
   IKTAY8    000810  000B48
   IKT93EST  001358  0003AE
   IKTVTGET  001708  000AD4
   IKTVTPUT  0021E0  0005D0
   IKTXMTPT  0027B0  0003EC
   IKT0009C  002BA0  000314
   IGC0009C  002EB8  000188
   IGG09300  003040  000660
   IGG09301  0036A0  00049C
   IGG09302  003B40  0005F4
   IGG09303  004138  000194

   PDS103I ENTRY POINT AT 000000  --  IKTASTPT
   PDS104I MODULE LENGTH  0042D0  --     17K
0 Example 4: external names beginning IKTVT are mapped.
+ __________
  map igc0009c module(iktvt)
   IKTVTGET  001708  000AD4
   IKTVTPUT  0021E0  0005D0

   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0042D0  --     17K
1
0 Example 5: all members are searched for any modules with external
+ __________
             names beginning SSP.
  map : module(ssp)

   ** MAP      EXTEND
   SSP95DIR  000000  001D08

   PDS103I ENTRY POINT AT 000000  --  SSP95DIR
   PDS104I MODULE LENGTH  001D08  --      8K
0 Example 6: a member with MVS/XA load module attributes is mapped.
+ __________
  map amodeany
   AMODE24   000000  00000E
   AMODE31   000010  000006  RMODE 24  AMODE 31
   AMODEANY  000018  000006  RMODE 24  AMODE ANY

   PDS103I ENTRY POINT AT 000018  --  AMODEANY
   PDS104I MODULE LENGTH  000020  --      1K
0 Example 7: an alias member is mapped.
+ __________
  map extractz
   EXTRACT   000000  000DD4
                                                       EXTRACTZ  000CDC
   RCON      000DD8  00090A
                                                       RECFM     000E08
                                                       P         000E30
                                                       RR        000E58
                                                       RX        000E80
                                                       SI        000EA8
                                                       SS        000ED0
   CONVRT    0016E8  002672
                                                       HEX       001718
                                                       LITS      001740
                                                       SUMARY    001830
   SYNTAX    003D60  0027E0

   PDS103I ENTRY POINT AT 000CDC  --  EXTRACTZ
   PDS104I MODULE LENGTH  006540  --     26K
   PDS066I MEMBER IS AN ALIAS FOR: EXTRACT
0 Example 8: produce linkage edit controls and JCL
+ __________
  map extractz relink

   ** MAP      EXTRACTZ
   //LKED   EXEC  PGM=IEWL,
   //       PARM='NCAL,MAP,LIST,LET,RENT,REUS,REFR'
   //SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(200,20))
   //SYSPRINT DD  SYSOUT=*
   //SYSLMOD  DD  DISP=SHR,DSN=HABL.LIB.LOAD
   //SYSLIN   DD  *
 '  INCLUDE SYSLMOD(EXTRACT)
    ORDER   EXTRACT(P),RCON,CONVRT,SYNTAX
 '  ENTRY   EXTRACT
    ALIAS   EXTRACTZ
    NAME    EXTRACT(R)
1
  MEMBERS
+ _______
0 The MEMBERS subcommand lists member names from the data set directory.
- Example 1: a range of members is listed.
+ __________
  members a:co
   PDS165I MEMBERS ARE: ASCEND, BIO, BIOPL1F, COMP
0 Example 2: the default member group is listed.
+ __________
  members *
   PDS165I MEMBERS ARE: ASCEND, BIO, BIOPL1F, COMP
0 Example 3: the default member group is listed.
+ __________
  members
   PDS165I MEMBERS ARE: ASCEND, BIO, BIOPL1F, COMP
0 Example 4: members with names containing pattern characters are listed
+ __________
  members a0/c
   PDS165I MEMBERS ARE: CSCGA03D, CSCSA03D, CSCZA03D
0 Example 5: note -- the order of specification is insignificant.
+ __________
  members c/a0
   PDS165I MEMBERS ARE: CSCGA03D    CSCSA03D    CSCZA03D

0 Example 6: a pattern member specification is used.
+ __________
  c lib.cntl
   PDS220I //SYS00056  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  members a/x'c2'
   PDS165I MEMBERS ARE: ABEND, AMBLIST, ASMBLK, ASMBLK2, ASM.a.B, BA, BA
            BACKBL1, BATCHCHK, BATCHTMP, BATCHTSO, BATCHTS2, BKIPOCAT, B
            SHRLOADB, TESTFBA, 1BKPLPA0
0'Example 7: display members and a member count.
+ __________
 'mem a:a count
 ' PDS165I MEMBERS ARE: AA, ALLOC, ALLOCDMP, ALLOCLNK, ALLOCNET, ALLOCSP
 '          ALTERVSM, AMBLST, ANDO, APFCALL, APFCOMND, ASCII, ASID, ASID
 '          ASMFCL, ASMHC, ASMHCL, ASMHOPT, ASMSTATS, ASM2EXPA, ASM2RETU
 '
 ' PDS193I THIS GROUP CONTAINS 22 MEMBERS
1
  MEMLIST
+ _______
0 The MEMLIST subcommand provides a full screen ISPF member list display
  manipulation capability by extending ISPMODE concepts.  Subcommands en
  and their associated outputs are maintained in the ISPMODE session log

  The current panel display state is called the display mode; the possib
  display modes are defined as follows:
    1.  Non-dialog   - PDS output as before ISPMODE and MEMLIST.
    2.  ISPMODE      - session log display.
    3.  MEMLIST      - any of the four member list displays.
    4.  View         - ISPMODE display for PDS subcommand outputs.
    5.  Line command - ISPMODE display for line command outputs.
    6.  Checkpoint   - ISPMODE display for PDS outputs after each 250
                       (by default) output lines from a single subcomman

  The ISPF END command should be used to terminate the current display
  mode as follows:
    1.  Non-dialog   - terminates PDS.
    2.  ISPMODE      - terminates PDS if PDS was entered as a dialog;
                       otherwise, reverts to non-dialog mode.
    3.  MEMLIST      - reverts to ISPMODE.
    4.  View         - reverts to MEMLIST.
    5.  Line command - reverts to MEMLIST.
    6.  Checkpoint   - reverts to view mode, line command mode or
                       ISPMODE as appropriate.

  Depending on the display mode, different numeric panel control codes
  are available to control dialog processing:
    0 - Continue the subcommand.
    1 - Suspend ISPMODE (this also deletes any current member list).
    2 - Clear the ISPMODE log.
    3 - Clear the ISPMODE log below the current top line displayed.
    4 - Clear the ISPMODE log above the current top line displayed.
    5 - Cross-check alias members using the current member list.
    6 - Clear any current member list and rebuild it with all members.
    7 - Output the MEMLIST table to SYSOUT or a data set.
    8 - Suspend the member list and switch to view mode.
    9 - Switch to an alternate member list display.
0 Example 1: enter MEMLIST with all members whose names contain PDS70.
+ __________
  memlist pds70/

  --------------------  MEMLIST Source Member List 1  --- LINE 00001 COL
  COMMAND ===> _                                               SCROLL ==
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     6 MEMLIST reset           8 View mo
               5 Alias check         7 Output MEMLIST table    9 Display
  - DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  MEM=PDS70/  --------------------
  CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
       PDS70PNS           01.21    84/09/04  84/11/07 14:27    79    37
       PDS70PN2           70.00    84/12/03  84/12/03 15:09    17    17
       PDS70PN3           70.00    84/12/03  84/12/03 15:09    16    16
       PDS70PN4           70.00    84/12/03  84/12/03 15:09    16    16
       PDS70PN5           01.08    84/10/30  84/12/11  9:54    20    20
       PDS70PN6           01.03    84/10/30  84/12/11  9:54    20    20
       PDS70PN7           70.01    84/12/03  84/12/11  9:54    20    20
       PDS70PN8           01.25    84/09/05  84/12/11  9:54    20    21
  ******************************* BOTTOM OF DATA ***********************
1
  Example 2: enter multiple line commands.
+ __________

  --------------------  MEMLIST Source Member List 1  --- LINE 00001 COL
  COMMAND ===>                                                 SCROLL ==
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     6 MEMLIST reset           8 View mo
               5 Alias check         7 Output MEMLIST table    9 Display
  - DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  MEM=PDS70/  --------------------
  CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
       PDS70PN0 *NEWNAME  01.21    84/09/04  84/11/07 14:27    79    37
  del  PDS70PN2           70.00    84/12/03  84/12/03 15:09    17    17
  x    PDS70PN3           70.00    84/12/03  84/12/03 15:09    16    16
  alia PDS70PN4 pdsx      70.00    84/12/03  84/12/03 15:09    16    16
       PDS70PN5           01.08    84/10/30  84/12/11  9:54    20    20
  ren  PDS70PN6 pds70pny  01.03    84/10/30  84/12/11  9:54    20    20
  l    PDS70PN7           70.01    84/12/03  84/12/11  9:54    20    20
  yyy_ PDS70PN8           01.25    84/09/05  84/12/11  9:54    20    21
  ******************************* BOTTOM OF DATA ***********************
- Example 3: control is received in line command mode from the list line
+ __________

  -------------------------  Line Command Output  ------- LINE 00047 COL
  COMMAND ===> end_                                            SCROLL ==
     Enter an ISPF command, a F command, or special control code 1:
               1 Suspend ISPMODE
             end Return to MEMLIST
  - DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  MEM=PDS70/  --------------------
  >LIST     PDS70PN7
  )ATTR
   @ TYPE(OUTPUT) INTENS(LOW)
   ^ TYPE(OUTPUT) INTENS(LOW) SKIP(ON)
   | TYPE(INPUT) INTENS(HIGH) CAPS(OFF)
  )BODY
  %-------------------  MEMLIST Load Member List 1  --------------------
  %COMMAND ===>|ZCMD                                           %SCROLL =
  +   Enter an ISPF command, a PDS subcommand or a special control code:
               %1+Suspend ISPMODE    %6+MEMLIST reset          %8+View m
               %5+Alias check        %7+Output MEMLIST table   %9+Displa
  +&PDSMSG  ------------------------------------------------------------
  ...
- Example 4: control returns to MEMLIST after an END command.
+ __________

  --------------------  MEMLIST Source Member List 1  --- LINE 00001 COL
  COMMAND ===> _                                               SCROLL ==
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     6 MEMLIST reset           8 View mo
               5 Alias check         7 Output MEMLIST table    9 Display
  - DSN=HABL.LIB.PDSTST,VOL=SER=TSO001  MEM=PDS70/  --------------------
  CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
       PDSX     *NEWNAME  ALIAS
       PDS70PNY *NEWNAME  01.03    84/10/30  84/12/11  9:54    20    20
       PDS70PN0 *NEWNAME  01.21    84/09/04  84/11/07 14:27    79    37
       PDS70PN4 *ALIAS*   70.00    84/12/03  84/12/03 15:09    16    16
       PDS70PN5           01.08    84/10/30  84/12/11  9:54    20    20
       PDS70PN7 *LIST*    70.01    84/12/03  84/12/11  9:54    20    20
  YYY  PDS70PN8 *INVALID  01.25    84/09/05  84/12/11  9:54    20    21
  ******************************* BOTTOM OF DATA ***********************
1
  Example 5: Enter O (for Options assistance):
+ __________

  --------------------  MEMLIST Source Member List 1  --------------- RO
  COMMAND ===> O_                                               SCROLL =
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     6 MEMLIST reset           8 View mo
               5 Alias check         7 Output MEMLIST table    9 Display
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=71/  ------------------------
  CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
       DIALOG71           01.23    85/05/30  85/06/09 10:10  3753  3206
       DIATBL71           01.06    85/05/30  85/06/04 12:35   228   226
       MEML71             70.10    85/01/21  85/06/03  8:31   441   411
  ****************************** BOTTOM OF DATA ************************
- Example 6: Choose the Verify subcommand:
+ __________

  ------------------------  PDS O Subcommand Selection  ----------------
  OPTION  ===> v_

  Choose one of the following:

  Data set subcommands:
      C     - Change     D     - Display    FIX   - Fixpds     P     - P
      COMPR - Compress   DSN   - Dsname     MEM   - Members    U     - U

  Member subcommands:
      A     - Attrib     DSP   - Dsprint    M      - Map        RES   -
      AL    - Alias      E     - Edit       MEML   - Memlist    REV   -
      B     - Browse     F     - Find       OUT    - Outcopy    SUB   -
      COM   - Compare    FSE   - Fse        PR     - Printoff   SUBL  -
 '    COP   - Copy       HI    - History    REN    - Rename     TSOL  -
      DIR   - Direntry   IF    - If         REP    - Replace    V     -
 '    DEL   - Delete     L     - List       REPRO  - Repro      VPS   -

  Miscellaneous subcommands:
      CON   - Control    H     - Help       ISPM  - Ispmode    T     - T
      END   - End        ISPF  - Ispf       R     - Recall     UT    - U
- Example 7: Enter operands for Verify
+ __________

  --------------------------  O.V     Verify   Subcommand  -------------
  OPTION  ===>

  Enter a member specification and any operands below for VERIFY:
  ===> pds71 stats_

  Operands:  memgroup - use : to check the data set
                        use start:end or part1/part2 to check individual
             LOAD     - load modules are to be LOADED and DELETED
             NOLOAD   - no member loads are to be performed
             STATS    - member or data set statistics are to be provided
             NOSTATS  - no statistics are to be provided
             UPDATE   - for VERIFY :, specifies that a dummy member is t
                        be added and deleted to check normal PDS operati
             NOUPDATE - no data set modifications are to be made

  Defaults:  LOAD, STATS, UPDATE
1
  Example 8: Perform a recall subcommand
+ __________

  ------------------------  View Command Output  ------------------ ROW
  COMMAND ===> r_                                               SCROLL =
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     3 Clear below     6 MEMLIST (all me
               2 Clear log           4 Clear above     7 Output ISPMODE
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=PDS71  ----------------------
  >Verify  pds71 stats

  ** VERIFY   PDS71

  PDS110I    20,188 LOGICAL RECORDS WERE INPUT
  PDS111I       179 PHYSICAL BLOCKS WERE INPUT
  PDS112I     9,040 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
  PDS113I     9,023 CHARACTERS PER AVERAGE PHYSICAL BLOCK
  ****************************** BOTTOM OF DATA ************************
- Example 9: Modify the remembered subcommand
+ __________

  ------------------------  PDS RECALL Entry Panel  --------------------
  COMMAND ===> Verify  pds71 stats
+              _



  Note: you may modify the above command before entering it.
- Example 10: Return to MEMLIST
+ ___________

  ------------------------  View Command Output  ------------------ ROW
  COMMAND ===> end_                                             SCROLL =
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     3 Clear below     6 MEMLIST (all me
               2 Clear log           4 Clear above     7 Output ISPMODE
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=PDS71  ----------------------
  >Verify  pds71 nostats

  ** VERIFY   PDS71
  ****************************** BOTTOM OF DATA ************************
- Example 11: select the o line command assist panel
+ ___________

  --------------------  MEMLIST Source Member List 1  --------------- RO
  COMMAND ===>                                                  SCROLL =
     Enter an ISPF command, a PDS subcommand or a special control code:
               1 Suspend ISPMODE     6 MEMLIST reset           8 View mo
               5 Alias check         7 Output MEMLIST table    9 Display
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=PDS71  ----------------------
  CMD  NAME     DATA     VER.MOD    CREATED   LAST MODIFIED  SIZE  INIT
       DIALOG71           01.23    85/05/30  85/06/09 10:10  3753  3206
  o_   DIATBL71           01.06    85/05/30  85/06/04 12:35   228   226
       MEML71             70.10    85/01/21  85/06/03  8:31   441   411
  ****************************** BOTTOM OF DATA ************************
1
  Example 12: Choose the Verify subcommand for member DIATBL71:
+ ___________

  ------------------------  PDS o line command selection  --------------
  OPTION  ===> v_

  Choose one of the following for member DIATBL71
      A    ATTRIB   - List or assign attributes
      AL   ALIAS    - Assign an alias name
      B    BROWSE   - Browse using SPF
      COM  COMPARE  - Compare DIATBL71 to another member
      DEL  DELETE   - Delete
      DIR  DIRENTRY - List the directory entry
      DSP  DSPRINT  - Print using the TSO DSPRINT command
      E    EDIT     - Edit using SPF
      F    FIND     - List lines containing a string
      H    HELP     - Provide PDS subcommand help using the TSO HELP com
      HI   HISTORY  - List load module history data
      L    LIST     - List lines
      M    MAP      - List load module structure
      OUT  OUTCOPY  - Output an IEBCOPY SELECT statement to FILE(PDSOUT)
      PR   PRINTOFF - Print using the TSO PRINTOFF command
      REN  RENAME   - Rename
      SUB  SUBMIT   - Submit to the background
      V    VERIFY   - Validate
      VPS  VPSPRINT - Print using the TSO VPSPRINT command
- Example 13: Enter operands for Verify:
+ __________

  -----------------------  o.v   Verify   line command  ----------------
  OPTION  ===>

  Enter any operands below for VERIFY  DIATBL71
  ===> stats_

  Operands:  LOAD    - this load module is to be LOADED and DELETED
             NOLOAD  - this load module is not to be LOADED and DELETED
             STATS   - statistics are desired for this member
             NOSTATS - statistics are not desired for this member

  Defaults:  LOAD, STATS
- Example 14: Output from the Verify subcommand:
+ ___________

  -------------------------  Line Command Output  ----------------- ROW
  COMMAND ===> _                                                SCROLL =
     Enter an ISPF command, a F command, or special control code 1:
               1 Suspend ISPMODE
             end Return to MEMLIST
  - DSN=HABL.LIB.PDS71,VOL=SER=TSO007  MEM=PDS71  ----------------------
  >Verify  DIATBL71 stats

  ** VERIFY   DIATBL71

  PDS110I       228 LOGICAL RECORDS WERE INPUT
  PDS111I         3 PHYSICAL BLOCKS WERE INPUT
  PDS112I     9,040 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
  PDS113I     6,080 CHARACTERS PER AVERAGE PHYSICAL BLOCK
  ****************************** BOTTOM OF DATA ************************
1
  OUTCOPY
+ _______
0 The OUTCOPY subcommand formats utility control statements which can
  be used by IEBCOPY to select members from a data set.
- Example 1: member names which contain pattern characters are selected.
+ __________
  out c/a0 echo
           COPY OUTDD=OUTPUT,INDD=TESTLOAD
           S M=CSCGA03D ,CSCGA03D))
           S M=CSCSA03D ,CSCSA03D))
           S M=CSCZA03D ,CSCZA03D))
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
0 Example 2: members from a different library are selected.
+ __________
  c lib.cntl
   PDS220I //SYS00068  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  out big:big text('my string')
           COPY OUTDD=OUTPUT,INDD=CNTL
           S M=BIGSIGN  MY STRING
           S M=BIGSIGNR MY STRING
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 3: note - members already selected are not output again.
+ __________
  out sign/
           S M=DESIGNI  MY STRING
           S M=DESIGNM  MY STRING
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  out big:big
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 4: the output must be closed if the PDSOUT data set will be
+ __________
             examined by PDS or any editor.
  out * close
   PDS080I OUTCOPY DCB IS CLOSED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  change pdsout
   PDS530W THIS DATA SET IS NOT PARTITIONED
   PDS220I //SYS00069  DD  DSN=HABL.PDSOUT.DATA,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),VOL=SER=TSO
   PDS220I //  SPACE=(TRK,(3))                      /*FREE TRK=2*/

   PDS300A ENTER OPTION -- DSN=HABL.PDSOUT.DATA,VOL=SER=TSO002
  spf
   --SPF edit for the PDSOUT data set--
0 Note 1: the output data set will be closed during PDS termination
+ _______
          processing if it is not explicitly closed.
0 Note 2: the default control statements generated can be modified
+ _______
          with an editor of some kind to do any of the following:
             a.  exclude members instead of include members.
             b.  rename members by modifying the second member name.
             c.  replace members by adding a ',R'
             d.  use the member list for some other purpose.
1
  PATTERN
+ _______
0 The PATTERN subcommand lists member names from the data set directory.
- Example 1: members with ..SIGN.. in their member names are displayed.
+ __________
  pattern /sign
   BIGSIGN     BIGSIGNR    DESIGNI     DESIGNM
0 Example 2: members with ..SIGN.. in their member names are displayed.
+ __________
  pattern sign
   BIGSIGN     BIGSIGNR    DESIGNI     DESIGNM
0 Example 3: a range of member names is displayed.
+ __________
  pattern x:z
   XCVOLIST    XREFASM     ZAP         ZAPCCHHR-A  ZAPDUMP     ZAPPTR
0 Example 4: note - pattern remembers its operand(s).
+ __________
  pattern
   XCVOLIST    XREFASM     ZAP         ZAPCCHHR-A  ZAPDUMP     ZAPPTR
0 Example 5: a pattern member specification is used.
+ __________
  c lib.cntl
   PDS220I //SYS00056  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  pattern a/x'c2'
   ABEND       AMBLIST     ASMBLK      ASMBLK2
   C1E2D4FF8140C240-A  *ASM.a B *
   BA          BACKBL0 -A  BACKBL1     BATCHCHK    BATCHTMP    BATCHTSO
   BATCHTS2    BKIPOCAT    BKPAGE01    SHRLOADB    TESTFBA
   F1C2D2D7D3D7C1F0    *1BKPLPA0*
1
  RECALL
+ ______
0 The RECALL subcommand displays the previous subcommand or
  displays and reenters the previous subcommand for execution.
- Example 1: RECALL with no operand.
+ __________
  recall
   PRINTOFF $:$ FORM(D101) NOHEAD ASA
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
0 Example 2: RECALL with the ENTER operand.
+ __________
  recall enter
   PRINTOFF $:$ FORM(D101) NOHEAD ASA
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$DOC
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$INST
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$MODS
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
0 Example 3: RECALL with no operand followed by a line modification.
+ __________
  recall
   PRINTOFF $:$ FORM(D101) NOHEAD ASA
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
   ===>  the cursor is moved back to the PRINTOFF  <===
   ===>  line and data to be changed is retyped.   <===
   PRINTOFF $:$ FORM(D101) NOHEAD ASA dest(r106)
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$DOC
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$INST
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   $$$MODS
   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS60,VOL=SER=TSO002
0 Example 4: RECALL with a change operand.
+ __________
  recall change
   CHANGE   'HABL.LIB.PDS60'
1
  RENAME
+ ______
0 The RENAME subcommand updates a member's name.
- Example 1: a member is renamed.
+ __________
  ren extract extracto
   PDS090I EXTRACT HAS BEEN RENAMED
0 Example 2: two members exchange names.
+ __________
  ren unit unitback swap
   PDS090I UNIT HAS BEEN RENAMED
   PDS090I UNITBACK HAS BEEN RENAMED
0 Example 3: a group of members is renamed.
+ __________
  rename cscz csc8 group
   PDS161I MEMBERS TO BE RENAMED ARE: CSCZA03D, CSCZB03D, CSCZC03D, CSCZ
            CSCZP03D, CSCZS03D

   PDS391A SHOULD THESE MEMBERS BE RENAMED (Y/N) ?
  yes
   PDS090I CSCZA03D HAS BEEN RENAMED
   PDS090I CSCZB03D HAS BEEN RENAMED
   PDS090I CSCZC03D HAS BEEN RENAMED
   PDS090I CSCZJ03D HAS BEEN RENAMED
   PDS090I CSCZP03D HAS BEEN RENAMED
   PDS090I CSCZS03D HAS BEEN RENAMED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO001
  member
  CSC8A03D    CSC8B03D    CSC8C03D    CSC8J03D    CSC8P03D    CSC8S03D
0 Example 4: a non-load member with aliases is renamed.
+ __________
  ren mydata mydata2
   PDS090I MYDATA HAS BEEN RENAMED
0 Example 5: a load member with aliases is renamed.
+ __________
  ren comp compare
   PDS090I COMP HAS BEEN RENAMED
   PDS065I MAIN MEMBER NAME UPDATED FOR MEMBER: CMPRSEQ
   PDS065I MAIN MEMBER NAME UPDATED FOR MEMBER: CMPRSEQ2
0 Example 6: rename with REPBY.
+ __________
  rename jes2 jes2old repby(jes2new)
   PDS090I JES2 HAS BEEN RENAMED
   PDS090I JES2NEW HAS BEEN RENAMED
1
  REPLACE
+ _______
0 The REPLACE subcommand updates character strings in a member.
- Example 1: a load module is updated using logical block mode.
+ __________
  replace pds71t +pds775e+pds773e+ lblock

   ** REPLACE  PDS71T
   PDS141I AT 018598  CSECT MSGCSECT  LENGTH 0024DA
   19B18 1580 *.&..PDS773E EQUAL LENGTH STRINGS ARE REQUIRED FOR BLOCK A

   PDS142I        31 BLOCKS IN THIS MEMBER

  replace pds71t +pds775e+pds773e+ write

   ** REPLACE  PDS71T
   PDS141I AT 018598  CSECT MSGCSECT  LENGTH 0024DA
   19B18 1580 *.&..PDS773E EQUAL LENGTH STRINGS ARE REQUIRED FOR BLOCK A

   PDS142I        31 BLOCKS IN THIS MEMBER
   PDS145I         1 BLOCKS UPDATED
- Example 2: a load module is updated using logical dump mode.
+ __________
  replace pds71t x47f00ccax47f00cc6x ldump

   ** REPLACE  PDS71T
   PDS141I AT 009958  CSECT LIST      LENGTH 000F82
     00A0E8 0790  F0004410 878C47F0  0CC619F2 478087CA  *0...g..0.F.2..g
     00A178 0820  F0004410 881C47F0  0CC64140 00404130  *0...h..0.F. . .

   PDS142I        31 BLOCKS IN THIS MEMBER

 'replace pds71t x47f00ccax47f00cc6x write

   ** REPLACE  PDS71T
   PDS141I AT 009958  CSECT LIST      LENGTH 000F82
     00A0E8 0790  F0004410 878C47F0  0CC619F2 478087CA  *0...g..0.F.2..g
     00A178 0820  F0004410 881C47F0  0CC64140 00404130  *0...h..0.F. . .

   PDS142I        31 BLOCKS IN THIS MEMBER
   PDS145I         1 BLOCKS UPDATED

  history pds71t
   ** HISTORY  PDS71T
   PDS061I AMASPZAP UPDATE HISTORY BY CSECT -
   MSGCSECT      5/26/85    HABL
   LIST          5/26/85    HABL
   PDS064I LAST LINK-EDITED ON  5/23/85  BY LKED 566528408  V01 M00
- Example 3: unequal length strings are used with LDUMP format.
+ __________
  rep extractz /this/that one/
   PDS773E EQUAL LENGTH STRINGS ARE REQUIRED FOR BLOCK AND DUMP UPDATES
1
0 Example 4: a source member is updated using num mode.
+ __________
  replace pds70 /list68/listtrt/
   ** REPLACE  PDS70
   088550          EX    R2,LISTTRT               FIRST CHARACTER FOUND?
   091330          EX    R2,LISTTRT               FIRST CHARACTER FOUND?
   091750 LISTTRT  TRT   0(*-*,R1),WORKTBL        <<EXECUTED>> - FIND FI
   PDS142I    19,961  LINES IN THIS MEMBER

  replace pds70 /list68/listtrt/ write
   ** REPLACE  PDS70
   088550          EX    R2,LISTTRT               FIRST CHARACTER FOUND?
   091330          EX    R2,LISTTRT               FIRST CHARACTER FOUND?
   091750 LISTTRT  TRT   0(*-*,R1),WORKTBL        <<EXECUTED>> - FIND FI
   PDS142I    19,961  LINES IN THIS MEMBER
   PDS145I         3 BLOCKS UPDATED
0 Example 5: the replacement string is shorter than the search string.
+ __________
  rep vtoc# /dsn=habl.lib.loadtest/dsn=sys1.linkhit/
   ** REPLACE  VTOC#
   002100 //SYSLMOD  DD  DSN=SYS1.LINKHIT(&MEMBER),DISP=SHR
   003000 //LKED.SYSLMOD DD  DSN=SYS1.LINKHIT(VTOCMSG),DISP=SHR
   003720 //LKED.SYSLMOD DD  DSN=SYS1.LINKHIT,DISP=SHR
   PDS142I        42  LINES IN THIS MEMBER

 'rep * /dsn=habl.lib.loadtest/dsn=sys1.linkhit/ write
   ** REPLACE  VTOC#
   002100 //SYSLMOD  DD  DSN=SYS1.LINKHIT(&MEMBER),DISP=SHR
   003000 //LKED.SYSLMOD DD  DSN=SYS1.LINKHIT(VTOCMSG),DISP=SHR
   003720 //LKED.SYSLMOD DD  DSN=SYS1.LINKHIT,DISP=SHR
   PDS142I        42  LINES IN THIS MEMBER
   PDS145I         1 BLOCKS UPDATED
0 Example 6: multiple members are updated.
+ __________
  rep : /=iev90/=iev90,time=5/ write
   ** REPLACE  ASIDXA
   000400 //ONE   EXEC  PGM=IEV90,TIME=5,REGION=4096K,
   PDS142I        23  LINES IN THIS MEMBER
   PDS145I         1 BLOCKS UPDATED

   ** REPLACE  EXT
   000300 //ONE   EXEC  PGM=IEV90,TIME=5,REGION=2048K,
   010200 //TWO   EXEC  PGM=IEV90,TIME=5,REGION=2048K,
   PDS142I       131  LINES IN THIS MEMBER
   PDS145I         2 BLOCKS UPDATED

   ** REPLACE  EXTERN
   000300 //ONE   EXEC  PGM=IEV90,TIME=5,REGION=1500K,
   PDS774E REPLACE TERMINATED; CHARACTER EXPANSION FAILED
   029100 //ASM EXEC PGM=IEV90,,,,,PARM='TERM,LIST,NODECK,XREF(SHORT)',C
   058700 //LAST  EXEC  PGM=IEV90,TIME=5,REGION=3000K,
   PDS142I       590  LINES IN THIS MEMBER
   PDS145I         1 BLOCKS UPDATED

   ** REPLACE  VTOC#
   000600 //ASM     EXEC PGM=IEV90,TIME=5,PARM='LOAD,NODECK,ALIGN,XREF(S
   PDS142I        42  LINES IN THIS MEMBER
   PDS145I         1 BLOCKS UPDATED
1
  REPRO
+ _____
0 The REPRO subcommand rebuilds or creates members.
-'Example 1: add an AMASPZAP IDR record to a load member.
+ __________
 'repro summary addzap
 ' PDS050I SUMMARY WILL BE MOVED
 ' PDS396A SHOULD REPRO CONTINUE (Y/N) ?
 'yes
 ' PDS051I SUMMARY IS BEING MOVED
0'Example 2: create several new members (demonstrates a collision).
+ __________
 'repro ract/ to(xxx) alias
 ' PDS050I ANYRACT WILL BE COPIED TO XXXRACT
 ' PDS885E MORE THAN ONE OUTPUT MEMBER WOULD BE NAMED XXXRACT
 ' PDS050I EXTRACT WILL BE COPIED TO XXXRACT
 ' PDS050I BSSFRCT2 WILL BE COPIED TO XXXFRCT2
0'Example 3: create several new members.
+ __________
 'repro ext:ext to(xxx) alias
 ' PDS050I EXTR WILL BE COPIED TO XXXR
 ' PDS050I EXTRACT WILL BE COPIED TO XXXRACT
 ' PDS050I BSSFRCT2 WILL BE COPIED TO XXXFRCT2
 ' PDS396A SHOULD REPRO CONTINUE (Y/N) ?
 'yes
 ' PDS051I XXXR IS BEING CREATED
 ' PDS051I XXXRACT IS BEING CREATED
 ' PDS051I XXXFRCT2 IS BEING CREATED
0'Example 4: try to reblock and create several new members.
+ __________
 'repro ext:ext to(xxx) alias maxblk(1600)
 ' PDS050I EXTR WILL BE COPIED TO XXXR
 ' PDS050I EXTRACT WILL BE COPIED TO XXXRACT
 ' PDS050I BSSFRCT2 WILL BE COPIED TO XXXFRCT2
 ' PDS852E XXXR ALREADY EXISTS
 ' PDS852E XXXRACT ALREADY EXISTS
 ' PDS852E XXXFRCT2 ALREADY EXISTS
0'Example 5: reblock and create several new members.
+ __________
 'repro ext:ext to(xxx) alias maxblk(1600) replace
 ' PDS050I EXTR WILL BE COPIED TO XXXR
 ' PDS050I EXTRACT WILL BE COPIED TO XXXRACT
 ' PDS050I BSSFRCT2 WILL BE COPIED TO XXXFRCT2
 ' PDS396A SHOULD REPRO CONTINUE (Y/N) ?
 'yes
 ' PDS051I XXXR IS BEING CREATED
 ' PDS051I XXXRACT IS BEING CREATED
 ' PDS051I XXXFRCT2 IS BEING CREATED
0'Example 6: create a single new member.
+ __________
 'repro pds72t to(jj)
 ' PDS050I PDS72T WILL BE COPIED TO JJ
 ' PDS396A SHOULD REPRO CONTINUE (Y/N) ?
 'yes
 ' PDS051I JJ IS BEING CREATED
1
  RESTORE
+ _______
0 The RESTORE subcommand resurrects deleted members.  Deleted members
  remain in a partitioned data set until the data set is compressed.
- Example 1: a load module at a known TTR address is restored.
+ __________
  restore xxx ttr(302) noprompt nodisplay
   PDS091I XXX HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  X0MIN
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I XXX ATTRIBUTES ARE: SCTR
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS106I LAST LINK-EDITED ON  1/14/83
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del *
   PDS040I XXX HAS BEEN DELETED
0 Example 2: a load module at a known TTR address is restored.
+ __________
  restore yyy ttr(302) like(pds) noprompt nodisplay
   PDS091I YYY HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  X0MIN
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I YYY ATTRIBUTES ARE: SCTR, RENT, REUS, REFR
   PDS883E REUSABLE ATTRIBUTE CONFLICTS WITH SCATTER
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0088A0  --     35K
   PDS106I LAST LINK-EDITED ON  6/05/82
0 Example 3: a deleted load module is searched for.
+ __________
  restore zzz display module(attrib)
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 000511

   PDS164I CSECTS ARE: PDS, EDIT, BROWSE, PRINTOFF, RESTORE, LIST, HELP,
            RENAME, FIXPDS, ALIAS, DELETE, FINDATTR, ATTRIB, MAP, HISTOR
            ALLOCATE, PARSE, VERMEMBR, VERDSN, PCLMAIN, PCLLIST, PCLFIND
            PCLDSPLY, PCLALIAS, PCLDELET, PCLRESTO, PCLRENAM, PCLMAP, PC
            PCLPRINT, PCLTSOLI, PCLSUBMI, PCLFIX, PCLBROWS, PCLSPFED, ..

   PDS106I LAST LINK-EDITED ON  2/01/83

   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  no
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 001214

   PDS164I CSECTS ARE: PLUS, ATTRIB

   PDS106I LAST LINK-EDITED ON  3/31/77

   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  yes
1
0  PDS091I ZZZ HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  PLUS
   PDS104I MODULE LENGTH  0003B8  --      1K
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  attrib
   PDS020I ZZZ ATTRIBUTES ARE: NONE
   PDS102I ENTRY POINT AT 000000
   PDS104I MODULE LENGTH  0003B8  --      1K
   PDS106I LAST LINK-EDITED ON  3/31/77
0 Example 4: multiple load modules are restored.
+ __________
  restore multi repeat noprompt

   PDS101I DELETED MEMBER FOUND AT TTR 001F11

   PDS164I CSECTS ARE: CMDTSO

   PDS106I LAST LINK-EDITED ON  5/26/82

   PDS091I MULTI001 HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  CMDTSO
   PDS104I MODULE LENGTH  005648  --     22K


   PDS101I DELETED MEMBER FOUND AT TTR 001F19

   PDS164I CSECTS ARE: CMDBINT

   PDS106I LAST LINK-EDITED ON  6/07/82

   PDS091I MULTI002 HAS BEEN RESTORED
   PDS103I ENTRY POINT AT 000000  --  CMDSBINT
   PDS104I MODULE LENGTH  0007B8  --      2K


   PDS101I DELETED MEMBER FOUND AT TTR 002004

   PDS164I CSECTS ARE: CMDSBSYS

   PDS106I LAST LINK-EDITED ON  6/07/82

   PDS091I MULTI003 HAS BEEN RESTORED
   PDS102I ENTRY POINT AT 0007A8
   PDS104I MODULE LENGTH  0007A8  --      2K


   PDS006I END OF DATA SET
   PDS300A ENTER OPTION -- DSN=HABL.LIB.TESTLOAD,VOL=SER=TSO002
  del
   PDS162I MEMBERS TO BE DELETED ARE: MULTI001, MULTI002, MULTI003

   PDS394A SHOULD THESE MEMBERS BE DELETED (Y/N) ?
  yes
   PDS040I MULTI003 HAS BEEN DELETED
   PDS040I MULTI002 HAS BEEN DELETED
   PDS040I MULTI001 HAS BEEN DELETED
1
0 Example 5: a CLIST member is restored (note that it is useful to
+ __________
             identify members internally that might need to be restored)

  restore ncpnewx prompt like(ncpnew) find('ncp')
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 000322

   PDS144I DATA LINE 1:
   00010003WRITE

   PDS144I DATA LINE 2:
   00020003WRITE ***  NCPBACK -- BACK OUT THE NEW VERSION OF NCP

   PDS144I DATA LINE 3:
   00030003WRITE

   PDS144I DATA LINE 4:
   00040003WRITE ***  PERFORM RENAMES AS REQUIRED

   PDS144I DATA LINE 5:
   00050003PDS 'SYS1.PRD.VTAMLST'


   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  no
   ---screen clear---
   PDS101I DELETED MEMBER FOUND AT TTR 001216

   PDS144I DATA LINE 1:
   00010008WRITE

   PDS144I DATA LINE 2:
   00020008WRITE ***  NCPNEW -- INSTALL A NEW VERSION OF NCP

   PDS144I DATA LINE 3:
   00030008WRITE

   PDS144I DATA LINE 4:
   00040008WRITE ***  DELETE PREVIOUS NCP MODULES

   PDS144I DATA LINE 5:
   00050008PDS 'SYS1.NCPLIB'


   PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?
  yes
   PDS091I NCPNEWX HAS BEEN RESTORED
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CLIST,VOL=SER=TSO002
  at ncpnew/
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  NCPNEW       01.05  83/06/24  84/01/24  8:13    60    83
   PDS230I  NCPNEWX      01.05  83/06/24  84/01/24  8:13    60    83
1
  SUBLIST
+ _______
0 The SUBLIST subcommand forms a member subgroup when used in the
  THEN or ELSE operand of the IF and FIND subcommands.
- Example 1: JCL members saved by user HABL with jobname HABLE are desir
+ __________
  if pds71/ userid(habl) then(sublist)

  attrib
   PDS230I SPF STATS:  VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MO
   PDS230I  PDS71S      01.01  85/04/01  85/04/03  8:32    26    26
   PDS230I  PDS71T      01.08  85/03/21  85/05/21  9:47    26    28
   PDS230I  PDS71TT     01.07  85/04/28  85/04/28 11:17     9     2
   PDS230I  PDS71UNL    01.03  85/04/09  85/05/14  8:28    37    37

  find * '//hable ' then(sublist)

  attrib
   PDS230I SPF STATS:  VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MO
   PDS230I  PDS71S      01.01  85/04/01  85/04/03  8:32    26    26
   PDS230I  PDS71TT     01.07  85/04/28  85/04/28 11:17     9     2
- Example 2: a version of the linkage editor and loader are to be delete
+ __________
  if iewl:iewl then(sublist)

  members *
   PDS165I MEMBERS ARE: IEWL, IEWLDRGO, IEWLF880

  del * al
   PDS162I MEMBERS TO BE DELETED ARE: IEWL, IEWLDRGO, IEWLF880

   PDS163I ASSOCIATED MEMBERS TO BE DELETED ARE: LINKER, LOADER

   PDS394A SHOULD ALL OF THESE MEMBERS BE DELETED (Y/N) ?
  yes
   PDS040I LOADER HAS BEEN DELETED
   PDS040I LINKER HAS BEEN DELETED
   PDS040I IEWLF880 HAS BEEN DELETED
   PDS040I IEWLDRGO HAS BEEN DELETED
   PDS040I IEWL HAS BEEN DELETED
- Example 3: members modified on 12/20/83 are to be printed.
+ __________
  if : changed(12/20/83) then(sublist)

  printoff * form(d101) nohead asa
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   PDSINST
   PROCESSING HAS BEEN COMPLETED FOR DATASET:
   HABL.LIB.PDS60
    MEMBER:
   PDSJCL
1
- TSO
+ ___
0 The TSO subcommand may be used to invoke a TSO command processor or CL
- Example 1: a data set is allocated.
+ __________
  tso alloc f(pdsout) da(pdsout.data)
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 2: TIME is requested.
+ __________
  tso time
   IKJ56650I TIME-10:00:26 AM. CPU-00:00:50 SERVICE-321113 SESSION-02:47
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 3: attributes for a data set are requested.
+ __________
  tso dsat pdsout.data
   SERIAL ALLOC  USED EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME
   TSO002     3     1  1  PS   FB    3120    80 02/08/84 HABL.PDSOUT.DAT
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
0 Example 4: PDS is invoked for a separate PDS session.
+ __________
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  tso pds lib.asm
   PDS100I PDS -- VERSION 7.2
   PDS220I //SYS00155  DD  DSN=HABL.LIB.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440),VOL=SER=TSO002,
   PDS220I //  SPACE=(CYL,(40,0,80))                /*FREE TRK=141,FREE

   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO002
  at menua
   PDS230I SPF STATS:   VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   M
   PDS230I  MENUA        01.07  84/02/06  84/02/09  8:51 13492 13467   1
   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO002
  end
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
- Example 5: The following CLIST is invoked:
+ __________
             PROC 0
             WRITE ALL COMMANDS IN THIS CLIST ARE INDEPENDENT OF PDS
             LISTD LIB.CLIST
             TIME
             END


  tso tsotest
   ALL COMMANDS IN THIS CLIST ARE INDEPENDENT OF PDS
   HABL.LIB.CLIST
   --RECFM-LRECL-BLKSIZE-DSORG
     VB    255   9040    PO
   --VOLUMES--
     TSO002
   IKJ56650I TIME-10:34:01 AM. CPU-00:00:00 SERVICE-3766 SESSION-41:08:3

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO004  MEM=
1
  USAGE
+ _____
0 The USAGE subcommand lists data set attributes and statistics.
- Example 1: a linklist library is used.
+ __________
   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
  usage
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    U         0   19069        525     212     0 CYL

   PDS180I DATA SET: CREATED  EXPIRES  LAST USE  UPDATED  SECURITY  ASM2
   PDS180I          12/11/83  0/00/00   6/07/84  YES      NONE      HRIS

   PDS181I EXTENTS IN TRACKS: 525

   PDS182I TRACKS: ALLOCATED  USED  FREE  EXTENTS
   PDS182I               525   313   212        1

   PDS183I DIRECTORY: BLOCKS  USED  FREE  TRACKS  MEMBERS  ALIASES
   PDS183I               180    97    83       2      295       37

   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
- Example 2: an operand is used to request extent information.
+ __________
   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
  change lib.cntl
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    6320        165      41     1 CYL

   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO003
  usage all
   PDS200I DISP UNIT    RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY
   PDS200I SHR  3380    FB       80    6320        165      41     1 CYL

   PDS180I DATA SET: CREATED  EXPIRES  LAST USE  UPDATED  SECURITY  ASM2
   PDS180I          11/14/83  0/00/00   6/07/84  YES      WRITE     HABL

   PDS181I EXTENTS IN TRACKS: 120, 15, 15, 15

   PDS182I TRACKS: ALLOCATED  USED  FREE  EXTENTS
   PDS182I               165   124    41        4

   PDS183I DIRECTORY: BLOCKS  USED  FREE  TRACKS  MEMBERS  ALIASES
   PDS183I                80    59    21       2      402        3

   PDS184I EXTENT  UCB  LO TT-HI TT  TRACKS     LOW CCHH-HIGH CCHH    BO
   PDS184I ------  ---  ----- -----  ------  ----------- -----------  --
   PDS184I      0  6C2  00.00 00.77     120  00.A4.00.00 00.AB.00.0E  CY
   PDS184I      1  6C2  00.78 00.86      15  01.15.00.00 01.15.00.0E  CY
   PDS184I      2  6C2  00.87 00.95      15  00.3B.00.00 00.3B.00.0E  CY
   PDS184I      3  6C2  00.96 00.A4      15  01.0C.00.00 01.0C.00.0E  CY
1
  VERIFY
+ ______
0 The VERIFY subcommand validity checks data sets.
- Example 1: a CLIST library is validity checked.
+ __________
  c lib.clist
   PDS220I //SYS00077  DD  DSN=HABL.LIB.CLIST,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=VB,LRECL=255,BLKSIZE=9040),VOL=SER=TSO002,
   PDS220I //  SPACE=(CYL,(1,1,40))                 /*FREE TRK=7,FREE DI
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CLIST,VOL=SER=TSO002
  verify :
   PDS110I     1,462 LOGICAL RECORDS WERE INPUT
   PDS111I       119 PHYSICAL BLOCKS WERE INPUT
   PDS112I     9,027 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I       520 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I         2 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       122 MEMBERS WERE CHECKED
0 Example 2: a link-list library is validity checked.
+ __________
  c 'sys1.linkhit'
   PDS220I //SYS00078  DD  DSN=SYS1.LINKHIT,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=U,BLKSIZE=19069),VOL=SER=TSO001,
   PDS220I //  SPACE=(CYL,(40,,80))                 /*FREE TRK=141,FREE
   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001
  verify :

   ** VERIFY   TESTONE
   PDS880E RESIDENCE MODE ANY AND ADDRESSING MODE ANY ARE INCOMPATIBLE
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH RMODE ANY
   PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH AMODE ANY
   IEA703I 706    HABL     SPFACCT  MODULE ACCESSED UNITS

   ** VERIFY   UNITS
   PDS998E ABEND S706 LOADING THIS MODULE

   ** VERIFY   TST3380
   PDS860E MEMBER IS AN ALIAS BUT NO MAIN MEMBER EXISTS
   PDS861E THE ALIAS DIRECTORY ENTRY NOTES THE MAIN ENTRY NAME AS TSTDIS

   PDS111I     5,384 PHYSICAL BLOCKS WERE INPUT
   PDS112I    18,432 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I       875 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I        94 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       320 MEMBERS WERE CHECKED
0 Example 3: a write-protected data set is validity checked.
+ __________
  c 'sys1.proclib'
   PDS220I //SYS00079  DD  DSN=SYS1.PROCLIB,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9040),VOL=SER=SYSRES,
   PDS220I //  SPACE=(TRK,(15,,27),,ROUND)           /*FREE TRK=10,FREE
   PDS300A ENTER OPTION -- DSN=SYS1.PROCLIB,VOL=SER=SYSRES
  verify : noupdate
   PDS110I     1,287 LOGICAL RECORDS WERE INPUT
   PDS111I        62 PHYSICAL BLOCKS WERE INPUT
   PDS112I     8,080 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     1,661 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I         1 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I        62 MEMBERS WERE CHECKED
1
0 Example 4: a sequential data set is validity checked.
+ __________
  change log
   PDS530W THIS DATA SET IS NOT PARTITIONED
   PDS220I //SYS00080  DD  DSN=HABL.LOG.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),VOL=SER=TSO
   PDS220I //  SPACE=(TRK,(1))                      /*FREE TRK=0*/
   PDS300A ENTER OPTION -- DSN=HABL.LOG.CNTL,VOL=SER=TSO001
  verify
   PDS006I END OF DATA SET
   PDS110I         9 LOGICAL RECORDS WERE INPUT
   PDS111I         7 PHYSICAL BLOCKS WERE INPUT
   PDS112I       160 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I       103 CHARACTERS PER AVERAGE PHYSICAL BLOCK
0 Example 5: a CNTL data set is validity checked.
+ __________
  c lib.cntl
   PDS220I //SYS00081  DD  DSN=HABL.LIB.CNTL,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO002,
   PDS220I //  SPACE=(CYL,(11,1,80))                /*FREE TRK=22,FREE D
   PDS300A ENTER OPTION -- DSN=HABL.LIB.CNTL,VOL=SER=TSO002
  verify :

   ** VERIFY   ASM.a B   X'C1E2D4FF8140C240'   NON-STANDARD MEMBER NAME
   PDS860E MEMBER IS AN ALIAS BUT NO MAIN MEMBER EXISTS

   ** VERIFY   ASSEMBLY
   PDS850E ASSEMBLY IS BEING UPDATED BY HRIS

   ** VERIFY   1BKPLPA0  X'F1C2D2D7D3D7C1F0'   NON-STANDARD MEMBER NAME

   ** VERIFY   ASSEMBLR
   PDS812E BLOCK LENGTH OF 9,040 EXCEEDS THE DATA SET DCB BLKSIZE

   ** VERIFY   RESCPY
   PDS510W THIS IS A NULL MEMBER

   PDS110I     4,737 LOGICAL RECORDS WERE INPUT
   PDS111I       151 PHYSICAL BLOCKS WERE INPUT
   PDS112I     9,040 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     2,510 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I        84 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       130 MEMBERS WERE CHECKED
0 Example 6: an ASM data set is validity checked.
+ __________
  change lib.asm
   PDS220I //SYS00082  DD  DSN=HABL.LIB.ASM,DISP=SHR,UNIT=3380,
   PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440),VOL=SER=TSO003,
   PDS220I //  SPACE=(CYL,(40,,40))                  /*FREE TRK=96,FREE
   PDS300A ENTER OPTION -- DSN=HABL.LIB.ASM,VOL=SER=TSO003
  verify :
   PDS006I END OF DATA SET
   PDS110I    89,681 LOGICAL RECORDS WERE INPUT
   PDS111I       529 PHYSICAL BLOCKS WERE INPUT
   PDS112I    15,440 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I    13,562 CHARACTERS PER AVERAGE PHYSICAL BLOCK
   PDS114I       125 TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA S
   PDS115I       110 MEMBERS WERE CHECKED
1
0 Example 7: an list of load members is checked.
+ __________
  verify (zap$,pds70,asid)

   ** VERIFY   ZAP$
   PDS066I MEMBER IS AN ALIAS FOR: ZAPMAIN

   PDS111I        12 PHYSICAL BLOCKS WERE INPUT
   PDS112I    12,288 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     2,344 CHARACTERS PER AVERAGE PHYSICAL BLOCK

   ** VERIFY   PDS70

   PDS111I        24 PHYSICAL BLOCKS WERE INPUT
   PDS112I    17,952 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     3,909 CHARACTERS PER AVERAGE PHYSICAL BLOCK

   ** VERIFY   ASID

   PDS111I         7 PHYSICAL BLOCKS WERE INPUT
   PDS112I     3,120 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I       501 CHARACTERS PER AVERAGE PHYSICAL BLOCK

   PDS300A ENTER OPTION -- DSN=SYS1.LINKHIT,VOL=SER=TSO001  MEM=(ZAP$
0 Example 8: an group of source members is checked.
+ __________
  verify comp/

   ** VERIFY   COMPAREP

   PDS110I     1,183 LOGICAL RECORDS WERE INPUT
   PDS111I        11 PHYSICAL BLOCKS WERE INPUT
   PDS112I     9,040 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     8,604 CHARACTERS PER AVERAGE PHYSICAL BLOCK

   ** VERIFY   PDSCOMP

   PDS110I        39 LOGICAL RECORDS WERE INPUT
   PDS111I         1 PHYSICAL BLOCKS WERE INPUT
   PDS112I     3,120 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     3,120 CHARACTERS PER AVERAGE PHYSICAL BLOCK

   PDS300A ENTER OPTION -- DSN=HABL.LIB.PDS70,VOL=SER=TSO004  MEM=COMP/
0 Example 9: an range of load members is checked.
+ __________
    VERIFY HASP:HASP

   ** VERIFY   HASPSSSM

   PDS111I        20 PHYSICAL BLOCKS WERE INPUT
   PDS112I    18,432 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     2,723 CHARACTERS PER AVERAGE PHYSICAL BLOCK

   ** VERIFY   HASPSSSO

   PDS111I        20 PHYSICAL BLOCKS WERE INPUT
   PDS112I    18,432 CHARACTERS IN THE LARGEST PHYSICAL BLOCK
   PDS113I     2,710 CHARACTERS PER AVERAGE PHYSICAL BLOCK

   PDS300A ENTER OPTION -- DSN=SYS1.LPALIB,VOL=SER=SYSXAR  MEM=HASP:HASP
1                            APPENDIX A: PDS VERSION 7.1
+                            ___________________________

  New subcommands
+ _______________
    1.  REPLACE  -- performs character string updates.
    2.  SUBLIST  -- creates a member subgroup (for FIND & IF subcommands
    3.  VPSPRINT -- prints a hardcopy listing using the TSO VPSPRINT com

  Changes and improvements
+ ________________________
    1.  CHANGE and PDS: added the VOLSET keyword.
    2.  COMPARE: allowed either old or new data set names to refer
        to a member name or a different data set and member.
    3.  COMPRESS: added IEBCOPY authorization via IKJEFTSR.
    4.  EDIT: added the PROFILE and SETPROF keywords for ISPF V2.
    5.  FIND, IF, MAP, HISTORY: generate a message if no data is found.
    6.  FIXPDS: added the OPTCD and NOOPTCD keywords.
    7.  HISTORY: added COBOL compile options for COBOL load modules.
    8.  IF subcommand:
        a. added the HASALIAS and NOHASALIAS keywords.
        b. added a MM/DD/YY date format for the CHANGED & CREATED keywor
    9.  ISPMODE:
        a. added support for "PROFILE NOMSGID"
        b. added the F (find log) command.
   10.  MAP:
        a. added display of unresolved and weak unresolved external refe
        b. added the RELINK operand to generate linkage editor controls
   11.  MEMLIST subcommand:
        a. improved cursor positioning.
        b. improved the error status message clearing.
        c. added attention handling for EDIT and BROWSE line commands.
        d. added load module linkage edit dates.
        e. allowed FIXPDS and COMPRESS to use the last member group.
        f. command line ATTRIB adds to the member list if any attributes
        g. command line EDIT adds to the member list.
   12.  RENAME: added the REPBY keyword to update two member names.
   13.  RESTORE: made TTR an optional keyword; added FIND and MODULE key
   14.  Installation option: modified &CONDRNG.
   15.  PDS invoked by ISPF V2: allowed PDS to use ISPF facilities even
        invoked from option 6 or the ISPF TSO command.
   16.  ATTRIB: added ENTRY(name) operand to modify the entry point.
   17.  DELETE: reversed the order of deletion of group members.
   18.  OUTCOPY: added an IEBUPDTE format.
   19.  RECALL: added the CHANGE operand and other improvements in ISPMO
   20.  MEMBERS and DELETE: modified to support SUBLIST.
   21.  EXCP: added a "read multiple" logical error trap message (PDS983
   22.  FIXPDS MAXSPACE: changed all applicable stow DCB's to use "updat
        mode so that a new extent will not be taken.
   23.  CONTROL: added TRANSLATOR/NOTRANSLATOR keyword for HISTORY.

  Problems fixed
+ ______________
    1.  PDS entry from ISPF panel: corrected an ABEND 0C4 for TSO/E R2.1
    2.  LIST and FIND: output of CSECT information failed for large modu
    3.  ISPF command table entry to PDS with no data set name: corrected
        0C4 ABEND.
    4.  TSOMON ABEND in ISPF V2 after calling PDS: PDS modified the
        caller's command buffer in the original CPPL.
    5.  MAP with entry option: sometimes gave an incorrect entry name.

  Additional information
+ ______________________
    1.  Program comments following VER 7.1: on page 19 of a listing.
    2.  The information in the help member and in the help panels.
1                            APPENDIX B: PDS VERSION 7.2
+                            ___________________________
 '
 'New subcommands
+ _______________
 '  1.  COPY   -- invokes IEBCOPY to selectively copy members between da
 '  2.  REPRO  -- creates and rebuilds members selectively in a data set
 '
0'Changes and improvements
+ ________________________
 '  1.  VERIFY:
 '      a. added LKED and NOLKED keywords to control load module message
 '      b. added MAXBLK keyword to check member blocksizes.
 '  2.  IF:
 '      a. added EXTERN keyword to search for missing external symbols.
 '      b. added WKEXTERN keyword to search for missing weak external sy
 '      c. added MAXBLK keyword to check member blocksizes.
 '  3.  O subcommand:
 '      a. added a different menu and panels for sequential data sets.
 '      b. added operand memory by subcommand for the PDS session.
 '  4.  SUBLIST:
 '      a. dropped duplicate member entries.
 '      b. added the ALIAS keyword to add associated members to a sublis
 '  5.  ATTRIB:
 '      a. added VER keyword to change version number in ISPF statistics
 '      b. added MOD keyword to change modification level in ISPF statis
 '      c. added USERID keyword to change the userid in ISPF statistics.
 '      d. added UNALIAS keyword to drop alias indicators for alias memb
 '  6.  RESTORE: added the COUNT keyword to control amount of data displ
 '  7.  Automatic ISPMODE: when PDS is entered from ISPF it can optional
 '      gain control in full screen mode.
 '  8.  REPLACE: allowed for a null replacement string.
 '  9.  MEMBERS: added the COUNT keyword to display member counts.
 ' 10.  SUBMIT: added prompting if a member group is to be submitted.
 ' 11.  EDIT: added ISPF EDIT recovery.
 ' 12.  RECALL: should not remember HELP, CHANGE, KLEAR or X.
 ' 13.  ISPMODE: added the LIST keyword to display current control param
 ' 14.  LIST, FIND, REPLACE: improved CSECT offset handling.
 ' 15.  CHANGE, PDS and COPY: added the NUMBER keyword to allow
 '      concatenated data sets.
 ' 16.  Entry and CHANGE panels: allowed for FILE and NUMBER keywords.
 ' 17.  DIRENTRY: added directory entry decoding.
 ' 18.  FIND, HISTORY, IF, LIST, MAP, REPLACE, RESTORE: added a check
 '      for MODULE(*) to mean the last module name entered.
 ' 19.  COPY, COMPRESS: allowed for a default LIST/SUMMARY keyword value
 ' 20.  MEMLIST: changed LKEDDATE to be the default for load modules.
 '
0'Problems fixed
+ ______________
 '  1.  FIXPDS: deleted the need for a "padding directory block".
 '  2.  ISPMODE, MEMLIST: option 7 prefixed data set names with &ZUSER
 '      instead of &ZPREFIX.
 '  3.  HISTORY: provides history information for $PRIVATE CSECTS.
 '  4.  CONTROL: the TESTCPULOOP keyword was misspelled.
 '
0'Additional information
+ ______________________
 '  1.  Program comments following VER 7.2: on page 21 of a listing.
 '  2.  The information in the help member and in the help panels.
1'                           APPENDIX C: PDS VERSION 7.3
+                            ___________________________
 ×
 ×New subcommands
+ _______________
 ×  1.  LISTA  -- lists allocated DDNAMES  (a dialog under ISPMODE and M
 ×  2.  LISTV  -- lists volume space  (a dialog under ISPMODE and MEMLIS
 ×
0×Changes and improvements
+ ________________________
 ×  1.  MEMLIST:
 ×      a. added a find capability for MEMLIST, LISTA and LISTV tables.
 ×      b. added a automatic alias check after building a new member lis
 ×      c. added SUBLIST =MEMLIST to set the default members to table en
 ×      d. changed line command processing to preserve the default membe
 ×  2.  ISPMODE:
 ×      a. added a prompting panel for program responses.
 ×      b. maintain 80 characters per table entry instead of the 79 disp
 ×  3.  ALLOCATION:
 ×      a. added panel support for the VOLSET keyword.
 ×      b. retries without VOLSET if allocation fails with VOLSET.
 ×      c. records failure messages via PDS PUTLINE or ISPMODE command l
 ×      d. prompts ISPF users of the CHANGE subcommand with panels.
 ×  4.  IF and FIND:
 ×      a. added a one line ATTRIB message format for load modules.
 ×      b. sets the current member group to the members found with MEMLI
 ×  5.  EDIT: added panel prompting for EDIT recovery with ISPF V2.
 ×  6.  ATTRIB:
 ×      a. added NONE keyword to delete ISPF statistics for a member.
 ×      b. added ADDSTATS keyword to generate ISPF statistics for a memb
 ×  7.  COMPRESS: changed SHR keyword processing to not allocate as OLD
 ×  8.  EXCP processing:
 ×      a. changed to reopen the data set when the EOF marker is exceede
 ×      b. changed to retain SINGLE/DOUBLE/MULTIPLE until a CHANGE subco
 ×  9.  MAP: added a SYSLIB DD statement for the RELINK (or JCL) option.
 × 10.  SMP install: added an example for installations using SMP.
 ×
0×Problems fixed
+ ______________
 ×  1.  MEMLIST:
 ×      a. ABEND S0C7 for load modules with no linkage edit dates.
 ×      b. Load modules with 42 byte directories marked as "SORC".
 ×      c. Member sublists terminated by a line command in MEMLIST.
 ×  2.  ATTRIB: UNALIAS not functioning for source members.
 ×  3.  LIST, FIND and REPLACE:
 ×      a. Only the first 99,999 bytes of any load module CSECT used.
 ×  4.  REPLACE:
 ×      a. Single character target string updates failed.
 ×      b. Too many records updated for load members.
 ×  5.  DIRENTRY: several directory entry decoding errors.
 ×  6.  ISPF interface:
 ×      a. TSOMON intermitent S0C4 ABENDS after PDS invocation.
 ×      b. ISPF front ends failures after parsing the PDS PARM for PDS
 ×         recursive reentry due to packed decimal in the PARM field.
 ×
0×Additional information
+ ______________________
 ×  1.  Program comments following VER 7.3: on page 23 of a listing.
 ×  2.  The information in the help member and in the help panels.
1                            APPENDIX D: BLKDISK and Blocksizes
+                            __________________________________
0 Since PDS performs EXCP input, it manages its buffers explicitly when
  it cannot use the Read Multiple technique.  To speed the processing
  of a data set for single or double buffering, you could attempt to
  increase the amount of data in each physical record by carefully
  specifying the data set blocksize.

  However, specifying a large blocksize will do little good unless the
  average member size exceeds the chosen blocksize; storage resources
  are actually wasted during input processing of data sets with small
  members and a large blocksize.  The output from a VERIFY subcommand
  can be used to calculate average member sizes of existing data sets.

  In addition, load libraries are resistant to improvement using larger
  blocksizes because each member contains many small blocks along with
  the load module (RLD, ESD, CESD, IDR and SYM blocks).  Only the TEXT
  records would be expanded significantly with the use of a larger
  blocksize.  Note:  a COPYMOD function is available in IEBCOPY to
  reblock load modules in the DFP products.

  For those data sets with larger members, BLKDISK (available from the
  CBT tape, file 296) should be used to determine an optimal blocksize.
  This TSO command is linked with aliases such as BLK3330 and BLK3380 to
  reflect the actual storage devices available at your installation.
  Note: the recommended value from BLKDISK may not be appropriate; be
  sure that you also consider the smaller blocksizes listed.

0 Example 1: blocking for a 3380 with 80 character logical records.
+ __________
  blk3380 80
    3380 BLOCKSIZE SUMMARY;    LRECL=80        KEY LENGTH=0
              BLOCKSIZE    BLOCKS/TRACK    LRECLS/TRACK    UTILIZATION
              ---------    ------------    ------------    -----------
                     80              83              83          14.0%
                  2,480              16             496          83.6%
                  2,640              15             495          83.4%
                  2,880              14             504          84.9%
                  3,120              13             507          85.4%
                  3,440              12             516          86.9%
                  3,840              11             528          89.0%
                  4,240              10             530          89.3%
                  4,800               9             540          91.0%
                  5,440               8             544          91.7%
                  6,320               7             553          93.2%
                  7,440               6             558          94.0%
                  9,040               5             565          95.2%
                 11,440               4             572          96.4%
                 15,440               3             579          97.6%
   RECOMMENDED-->23,440               2             586          98.7%
                 32,720               1             409          68.9%

   FOR BLKSIZE 23,440  AND   100,000 RECORDS, ALLOCATE:
          342 BLOCKS,       171 TRACKS, OR        12 CYLINDERS
0 Example 2: allocation computations can be performed with a chosen bloc
+ __________
  blk3380 80 records(500000) blksize(9040)
   ---same blocksize summary table as above---

   FOR BLKSIZE  9,040  AND   500,000 RECORDS, ALLOCATE:
        4,425 BLOCKS,       885 TRACKS, OR        59 CYLINDERS
1
0 Example 3: recorded key lengths can be entered.
+ __________
  blk3350 96 keylength(44)
    3350 BLOCKSIZE SUMMARY;    LRECL=96        KEY LENGTH=44
              BLOCKSIZE    BLOCKS/TRACK    LRECLS/TRACK    UTILIZATION
              ---------    ------------    ------------    -----------
                     96              47              47          23.8%
                    864              16             144          73.0%
                    960              15             150          76.0%
                  1,056              14             154          78.0%
                  1,152              13             156          79.1%
                  1,248              12             156          79.1%
                  1,344              11             154          78.0%
                  1,536              10             160          81.1%
                  1,824               9             171          86.7%
                  2,016               8             168          85.1%
                  2,400               7             175          88.7%
                  2,880               6             180          91.2%
                  3,456               5             180          91.2%
                  4,416               4             184          93.2%
                  6,048               3             189          95.8%
   RECOMMENDED--> 9,312               2             194          98.3%
                 18,912               1             197          99.8%

   FOR BLKSIZE  9,312  AND   100,000 RECORDS, ALLOCATE:
        1,031 BLOCKS,       516 TRACKS, OR        18 CYLINDERS

0 Example 4: track capacity can also be requested (note: the usual block
+ __________
             summary is suppressed due to the illegal null record length
  blk3380 0 trackcap
   *** NULL RECORDS ARE NOT SUPPORTED
    3380 TRACK CAPACITY;    KEY LENGTH=0
         BLOCKS/TRACK     BLKSIZE     BYTES/TRACK     UTILIZATION
         ------------     -------     -----------     -----------
                    1      47,476          47,476          100.0%
                    2      23,476          46,952           98.9%
                    3      15,476          46,428           97.8%
                    4      11,476          45,904           96.7%
                    5       9,076          45,380           95.6%
                    6       7,476          44,856           94.5%
                    7       6,356          44,492           93.7%
                    8       5,492          43,936           92.5%
                    9       4,820          43,380           91.4%
                   10       4,276          42,760           90.1%
                   11       3,860          42,460           89.4%
                   12       3,476          41,712           87.9%
                   13       3,188          41,444           87.3%
                   14       2,932          41,048           86.5%
                   15       2,676          40,140           84.5%
                   16       2,484          39,744           83.7%

   DEVICE SUMMARY: MAX BLOCKSIZE=47,476   TRACKS=13,275   BYTES=630,243,
   NOCYLS=885   TRKS/CYL=15   TRKSIZE=47,968   DSCB/TRK=53   PDS/TRK=46
1                            APPENDIX E: PDS MESSAGES
+                            ________________________
- This appendix is provided to document PDS program messages.

  PDS messages are of the format PDSnnnx (where nnn is numeric and x
  is the letter I, A, W or E).  The program messages are grouped in
  numeric ranges by message severity as shown below:

       MESSAGE RANGE         DESCRIPTION
       -----------------     -----------
       PDS000I - PDS299I     Informational messages
       PDS300A - PDS399A     Action messages (a response is required)
       PDS400W - PDS599W     Warning message (possible error condition)
       PDS600E - PDS999E     Error messages


  Messages above PDS399 (warning and error messages) can be explained
  via the .? or extended help facility if these messages are received
  during PDS program execution.

  To use the extended help facility after warning and/or error messages
  have been received, enter a .?  response to the ENTER OPTIONS prompt
  message and up to five warning or error message explanations from the
  last subcommand will be requested from the HELP data set by the
  program.


  To have any program messages explained during PDS processing,
  you can also enter a command of the form:
      HELP MSG MSG(PDSxxx,PDSyyy, ...)
           (where PDSxxx and PDSyyy are messages to be explained)

  The actual PDS program messages are not listed or explained in this
  appendix; please refer to the HELP member.  A more readable format
  for the HELP information may be produced by executing the HELPLIST
  program using the PDS HELP member as input.
1                            APPENDIX F: PDS SUGGESTION FORM
+                            _______________________________
- Use this form to send suggestions to improve PDS and its documentation
0 Date Submitted: _____/_____/_____            PDS Release Level _______
0 Document (if in error): ____________________ Page Number:_____________
0 Description of Suggestion:
-
-
-
-
-
0
  Proposed Implementation:
-
-
-
-
-
0
  Optional:
         Name: ________________________________  Telephone: (_____)_____
0     Company: _________________________________________________________
0     Address: _________________________________________________________
0        City: ____________________________  State: _____________  ZIP:

0 To mail this form:
    1.  fold this page so that the mailing address on the reverse side s
    2.  tape closed.
    3.  optionally, fill in return address.
    4.  apply the appropriate postage.
1
-
-
-
-
-


  ------------------


-
-
-
-
-
-

  ------------------

  FROM: ______________________________
0       ______________________________
0       ______________________________
0       ______________________________
0

0                                   TO:  A. Bruce Leland
0                                        Hitachi America, LTD.
0                                        2210 O'Toole Avenue
0                                        San Jose, Cal.  95131
1
- Use this form to send suggestions to improve PDS and its documentation
0 Date Submitted: _____/_____/_____            PDS Release Level _______
0 Document (if in error): ____________________ Page Number:_____________
0 Description of Suggestion:
-
-
-
-
-
0
  Proposed Implementation:
-
-
-
-
-
0
  Optional:
         Name: ________________________________  Telephone: (_____)_____
0     Company: _________________________________________________________
0     Address: _________________________________________________________
0        City: ____________________________  State: _____________  ZIP:

0 To mail this form:
    1.  fold this page so that the mailing address on the reverse side s
    2.  tape closed.
    3.  optionally, fill in return address.
    4.  apply the appropriate postage.
1
-
-
-
-
-


  ------------------


-
-
-
-
-
-

  ------------------

  FROM: ______________________________
0       ______________________________
0       ______________________________
0       ______________________________
0

0                                   TO:  A. Bruce Leland
0                                        Hitachi America, LTD.
0                                        2210 O'Toole Avenue
0                                        San Jose, Cal.  95131
