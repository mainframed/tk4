SCRIPT/VS R2.0: DEVICE 1403N6 CHARS MONO
¸
¸
¸
¸
                 INCORZAP -- Main Storage Superzap Service Aid
                 INCORZAP -- Main Storage Superzap Service Aid
                 INCORZAP -- Main Storage Superzap Service Aid
°                 INCORZAP -- Main Storage Superzap Service Aid
¸
¸

°                                                  User's Guide
¸
°                                            January 19th, 1984


°                                         Corporate SE Services
°                                     National Advanced Systems
°                                     800 East Middlefield Road
°                                       Mountain View, CA 94043
¸
¸
¸
¸
¸
¸
¸
¸
¸

¯

  PREFACE
  _______
  PREFACE
  PREFACE
°  PREFACE
¸
°  This  User's Guide and the program described herein are pro-
°  vided  on an "as is" basis.  They have not been submitted by
°  National  Advanced Systems to any formal testing procedures.
°  Users  are responsible for evaluating the appropriate use of
°  these materials in their own environments.


°  The  INCORZAP  Service Aid is a public-domain program devel-
°  oped  by Rob Budge, Consulting Systems Engineer, NAS Western
°  Region.  It is based on the public-domain program, INCORZAP,
°  developed by the same author while with the IBM Corporation.

¸
¸
¸
¸
¸
¸
¸
¸
¸
¸
¸
¸
¸

°  Preface                                                   ii
¯

  CONTENTS
  ________
  CONTENTS
  CONTENTS
°  CONTENTS
¸
  Introduction   . . . . . . . . . . . . . . . . . . . . . . 1
  Introduction   . . . . . . . . . . . . . . . . . . . . . . 1
  Introduction   . . . . . . . . . . . . . . . . . . . . . . 1
°  Introduction   . . . . . . . . . . . . . . . . . . . . . . 1

  Features   . . . . . . . . . . . . . . . . . . . . . . . . 2
  Features   . . . . . . . . . . . . . . . . . . . . . . . . 2
  Features   . . . . . . . . . . . . . . . . . . . . . . . . 2
°  Features   . . . . . . . . . . . . . . . . . . . . . . . . 2
°    Main Storage Modification Without IPL  . . . . . . . . . 2
°    CSECT Level Reference  . . . . . . . . . . . . . . . . . 2
°    Keeping PLPA Modified  . . . . . . . . . . . . . . . . . 2
°    Overcoming Protection Schemes  . . . . . . . . . . . . . 3
°    Using Job Pack Versions of Modules   . . . . . . . . . . 3
°    Superzap Compatibility   . . . . . . . . . . . . . . . . 4

  Reference Summary  . . . . . . . . . . . . . . . . . . . . 6
  Reference Summary  . . . . . . . . . . . . . . . . . . . . 6
  Reference Summary  . . . . . . . . . . . . . . . . . . . . 6
°  Reference Summary  . . . . . . . . . . . . . . . . . . . . 6
°    JCL Requirements   . . . . . . . . . . . . . . . . . . . 6
°    Control Statements   . . . . . . . . . . . . . . . . . . 6
°    Notes  . . . . . . . . . . . . . . . . . . . . . . . . . 7

  Operational Considerations   . . . . . . . . . . . . . . . 8
  Operational Considerations   . . . . . . . . . . . . . . . 8
  Operational Considerations   . . . . . . . . . . . . . . . 8
°  Operational Considerations   . . . . . . . . . . . . . . . 8
°    Avoiding Mismatched Modules  . . . . . . . . . . . . . . 8
°    Security Considerations  . . . . . . . . . . . . . . . . 8

  Installation   . . . . . . . . . . . . . . . . . . . . . . 9
  Installation   . . . . . . . . . . . . . . . . . . . . . . 9
  Installation   . . . . . . . . . . . . . . . . . . . . . . 9
°  Installation   . . . . . . . . . . . . . . . . . . . . . . 9
°    Loading the Distribution File From Tape  . . . . . . . . 9
°    Installing the Load Module   . . . . . . . . . . . . . . 9
°    Printing the General Information Manual  . . . . . . .  10

  Examples   . . . . . . . . . . . . . . . . . . . . . . .  11
  Examples   . . . . . . . . . . . . . . . . . . . . . . .  11
  Examples   . . . . . . . . . . . . . . . . . . . . . . .  11
°  Examples   . . . . . . . . . . . . . . . . . . . . . . .  11
°    Example 1 - Zapping an LPA Module  . . . . . . . . . .  11
°    Example 2 - Backing Out a Zap and Unfixing the Main
°     Storage   . . . . . . . . . . . . . . . . . . . . . .  11
°    Example 3 - Using Entry Points As Symbolic Offsets      12
°    Example 4 - Dumping an In-core CSECT   . . . . . . . .  12
°    Example 5 - Supplying Input Via the PARM Field   . . .  13
°    Example 6 - INCORZAP Procedure for Console Zapping      13
°    Example 7 - Finding the Address of a Load Module   . .  14
°    Example 8 - Finding the Address of a CSECT in Link
°     Pack Area   . . . . . . . . . . . . . . . . . . . . .  14
°    Example 9 - Finding the Address of An Entry Point  . .  14
¸
¸
¸
¸
¸

°  Contents                                                 iii
¯

  INTRODUCTION
  ____________
  INTRODUCTION
  INTRODUCTION
°  INTRODUCTION
¸


°  INCORZAP inspects or modifies main storage in an MVS system.
°  INCORZAP  functions  on  all  versions of MVS, including MVS
°  3.8, MVS/SP Version 1, and MVS/SP Version 2 (MVS/XA).


°  INCORZAP offers the following advantages:


°  ø   Changes  to  the nucleus and link pack areas can be made
°      dynamically without the need for re-IPLing the system.


°  ø   Changes  can be made at the CSECT level rather than just
°      the load module level.


°  ø   Changes  to  the  Link Pack Area (LPA) are not lost when
°      pages are reused by the system, as is the case with mod-
°      ifications made from the console.


°  ø   INCORZAP  uses  standard Superzap control statement for-
°      mats,  and is therefore compatible with the AMASPZAP IBM
°      Service Aid.


°  In  addition to compatibility with AMASPZAP, INCORZAP offers
°  the following additional functions:


°  ø   Multiple  control  statements per line using the logical
°      line separator ('/').


°  ø   The  option to supply control statements via a parameter
°      list rather than through a SYSIN data set.


°  ø   The  option  to  use program symbols instead of absolute
°      hex numbers to determine offsets with CSECTs.


°  ø   The  option to localize program modifications by loading
°      a private version of a module into the job pack area.
¸


°  INCORZAP                                                   1
¯

  FEATURES
  ________
  FEATURES
  FEATURES
°  FEATURES
¸

¸
  Main Storage Modification Without IPL
  _____________________________________
  Main Storage Modification Without IPL
  Main Storage Modification Without IPL
°  Main Storage Modification Without IPL

°  INCORZAP  is useful for applying fixes on a test basis with-
°  out  IPLing  the  system.  Since  INCORZAP changes only main
°  storage,  any  modifications last only for the length of the
°  IPL or until backed out by a subsequent use of INCORZAP.

°  Without  INCORZAP, applying a superzap to the nucleus or LPA
°  involves   zapping   the  appropriate  system  library  with
°  AMASPZAP, then re-IPLing the system.

¸
  CSECT Level Reference
  _____________________
  CSECT Level Reference
  CSECT Level Reference
°  CSECT Level Reference

°  Once a module is loaded into main storage, CSECT information
°  is  generally not available (the MVS/XA nucleus is an excep-
°  tion).  For this reason most other mechanisms to modify main
°  storage work with absolute addresses or load modules only.


°  INCORZAP  reads the library from which the main storage ver-
°  sion  of  the  module was loaded in order to determine CSECT
°  placement information. This is then used by INCORZAP to per-
°  mit CSECT level references and changes.

¸
  Keeping PLPA Modified
  _____________________
  Keeping PLPA Modified
  Keeping PLPA Modified
°  Keeping PLPA Modified

°  Since  the  Pageable  Link  Pack Area (PLPA) is normally not
°  modified,  the  paging  subsystem  never performs a page-out
°  operation  on pages in this area. This means that any normal
°  modification  would  be  lost  when  the page was stolen for
°  re-use  by  the  paging subsystem.  When the contents of the
°  page were needed again, the paging subsystem would page-in a
°  new, unmodified page.


°  To overcome this problem, INCORZAP performs a page-fix oper-
°  ation on any pages it modifies in the link pack areas.  This


°  INCORZAP                                                   2
¯

°  prevents  the page being stolen by the paging subsystem, and
°  thus the modification remains.


°  If an installation wishes to back-out a modification made by
°  INCORZAP, this can be done with the RES statement which will
°  first  make  the  reversing  modification,  then  perform  a
°  page-free  operation  to  make the real page frame once more
°  available to the system.

¸
  Overcoming Protection Schemes
  _____________________________
  Overcoming Protection Schemes
  Overcoming Protection Schemes
°  Overcoming Protection Schemes

°  In  order  to  make  modifications to main storage, INCORZAP
°  must  be installed as an authorized program in an authorized
°  library.   INCORZAP  uses  this  authorization to modify the
°  nucleus  and  link  pack area as requested even though these
°  areas are in key-zero protected storage.


°  In  MVS/SP  systems, INCORZAP also temporarily bypasses seg-
°  ment  or  page  protection to allow modification of the link
°  pack areas.


°  Because  of  the  authorized nature of this program, special
°  security  provisions  should be taken to control use of this
°  module.   See the section "Security Considerations" later in
°  this document.


°  INCORZAP  does not bypass the low storage protect feature of
°  MVS/SP.  INCORZAP does not modify the first 512 bytes of the
°  nucleus  (PSA).  Modifications to critical low-storage areas
°  should be controlled from the console.

¸
  Using Job Pack Versions of Modules
  __________________________________
  Using Job Pack Versions of Modules
  Using Job Pack Versions of Modules
°  Using Job Pack Versions of Modules

°  INCORZAP  has the ability via the LOCAL control statement to
°  cause  a  module specified on a NAME control statement to be
°  loaded  into  the  job pack area.  Modifications can then be
°  made to this localized version of the module.


°  Care  must  be taken, however, with this approach. The LOCAL
°  control  statement  would  normally  be  used  when  calling
°  INCORZAP  via  a LINK rather than executing the program from


°  INCORZAP                                                   3
¯

°  JCL,  where  the  module would come and go with the INCORZAP
°  program itself.


°  It should also be remembered that some system services (such
°  as OPEN/CLOSE) do not search the job pack area for a copy of
°  a  module  they  are loading, but go instead directly to the
°  link pack area.


¸
  Superzap Compatibility
  ______________________
  Superzap Compatibility
  Superzap Compatibility
°  Superzap Compatibility

°  INCORZAP  is  generally compatible with the IBM Service Aid,
°  AMASPZAP.   The  purposes  of  the  program differ, however.
°  INCORZAP  inspects  or modifies main storage, while AMASPZAP
°  inspects  or modifies modules or data on direct access stor-
°  age.


°  Nevertheless,  JCL requirements and control statement syntax
°  are for the most part compatible.  This means that in gener-
°  al,  fixes  designed  for  application  via  AMASPZAP can be
°  applied  to the nucleus or link pack area version of a CSECT
°  by  simply  changing the program name on the execute card in
°  the JCL.


°  Specific differences between the two programs are:


°  ø   CCHHR and ABSDUMP control statements - not applicable to
°      INCORZAP.


°  ø   SETSSI  and  IDRDATA control statements - not applicable
°      and ignored by INCORZAP.


°  ø   CHECKSUM control statement - not supported by INCORZAP.


°  ø   Alternate DD names - are specified differently.


°  ø   Dump  formats  - are different. INCORZAP always includes
°      EBCDIC  data  in  the  right  hand  portion of the dump.
°      INCORZAP  treats  DUMP  and DUMPT identically, providing
°      EBCDIC  data  for  both and not attempting to provide op
°      codes.



°  INCORZAP                                                   4
¯

°  ø   Input via parameter list - not supported by AMASPZAP.


°  ø   "/" logical line separator - not supported by AMASPZAP.


°  ø   Symbolic  offsets - permitting use of program symbols in
°      VER and REP statements is not supported by AMASPZAP.


°  ø   LOCAL and GLOBAL control statements - are not applicable
°      to AMASPZAP.


°  ø   RES control statement - not applicable to AMASPZAP.


°  With the above exceptions, AMASPZAP and INCORZAP are compat-
°  ible.   If  the  reader  is unfamiliar with Superzap JCL and
°  control   statements,  he  should  consult  the  IBM  manual
  GC28-0674  OS/VS2  MVS  System  Programming Library: Service
°  ____________________________________________________________
  Aids for details on the use of the programs.
°  ____

¸
¸
¸
¸
¸
¸
¸
¸
¸
¸


°  INCORZAP                                                   5
¯

  REFERENCE SUMMARY
  _________________
  REFERENCE SUMMARY
  REFERENCE SUMMARY
°  REFERENCE SUMMARY
¸

°  The  following  provides a one-page summary of the operation
°  of  INCORZAP.   Additional  information  concerning Superzap
  control  statements can be found in the IBM manual GC28-0674
°                                                     _________
  OS/VS2 MVS System Programming Library: Service Aids.
°  ____________________________________________________

¸
  JCL Requirements
  ________________
  JCL Requirements
  JCL Requirements
°  JCL Requirements

°     //stepname   EXEC PGM=INCORZAP[,PARM='control statements']
°     //SYSLIB     DD   DSN=...      Program Library from which the
°                                    in-core module was loaded (required
°     //SYSPRINT   DD   SYSOUT=...   Printed output (optional).
°     //SYSIN      DD   *            Control statements (required unless
°                                    PARM specified).



  Control Statements
  __________________
  Control Statements
  Control Statements
°  Control Statements

°     NAME loadmod [csect]           Specify module and or CSECT to
°                                    modify
°     VER  offset  hexstring         Verify storage at offset within
°                                    module/CSECT matches hexstring
°     REP  offset  hexstring         Change storage at offset within
°                                    module/CSECT to match hexstring
°                                    (Causes PGFIX if pageable)
°     RES  offset  hexstring         Like REP, but causes PGFREE
°     DUMP loadmod [csect]           Print module or CSECT
°     CONsole                        Read control statements from consol
°     BASE hexvalue                  Hexvalue will be subtracted from
°                                    numeric offsets
°     RESET                          Clears no-go switch (set by VER
°                                    failure)
°     /                              Logical line separator
°     ZAP offset hexstring           Zeroes storage if equal to hexstrin
°     *                              Comment
°     LOCAL                          Following NAME statements will load
°                                    modules into Job Pack Area
°     GLOBAL                         Drop LOCAL mode


¸


°  INCORZAP                                                   6
¯

  Notes
  _____
  Notes
  Notes
°  Notes

  Alternate DD Names
°  __________________

°  The  following  DD  names  are  really  the  first choice of
°  INCORZAP:   PROGLIB,  PROGLIST,  PROGIN.   These  names  are
°  therefore  reserved names and are unavailable for use on any
°  other  DD's  in  the  step  (for  example,  if INCORZAP were
°  invoked via a call under TSO).  If one of these names is not
°  present,  the  more  traditional  name (SYSLIB, SYSPRINT, or
°  SYSIN, respectively) is used.


  Offset
°  ______

°  Where "offset" is specified, this may be either a hex string
°  (with  an  even number of hex digits) or a program symbol in
°  single quotes (apostrophes). Entry point names may always be
°  used  as symbolic offsets. Any symbol in a non-nucleus CSECT
°  may  be  used  if the CSECT was compiled and linked with the
°  TEST attribute.

¸
¸
¸
¸
¸
¸
¸
¸
¸
¸


°  INCORZAP                                                   7
¯

  OPERATIONAL CONSIDERATIONS
  __________________________
  OPERATIONAL CONSIDERATIONS
  OPERATIONAL CONSIDERATIONS
°  OPERATIONAL CONSIDERATIONS
¸

¸
  Avoiding Mismatched Modules
  ___________________________
  Avoiding Mismatched Modules
  Avoiding Mismatched Modules
°  Avoiding Mismatched Modules

°  INCORZAP  may appear to operate incorrectly if the load mod-
°  ule  copy  on  DASD does not match the copy in main storage.
°  INCORZAP  reads  the  DASD copy to determine CSECT placement
°  within the load module, so the copies must match for correct
°  operation.


°  A mismatch could occur if:


°  ø   The module on DASD was re-linked since the last IPL.


°  ø   The  module was loaded from a different library than the
°      one specified to INCORZAP (eg. an MLPA from SYS1.LINKLIB
°      while INCORZAP's SYSLIB points at SYS1.LPALIB).



  Security Considerations
  _______________________
  Security Considerations
  Security Considerations
°  Security Considerations

°  Because  of  its ability to change system modules, access to
°  INCORZAP must be strictly limited.


°  INCORZAP  should  be  placed in a library with both read and
°  write  access  restricted  via  a password or other security
°  mechanism.


°  INCORZAP  does  open  its  SYSLIB  file  in update mode even
°  though  it  only accesses it on a read-only basis.  However,
°  since  it is main storage and not the library which is being
°  modified, protecting critical libraries against write access
°  is  not  sufficient protection with INCORZAP.  A load module
°  could  be  copied  to an unprotected library, where INCORZAP
°  would  be  able to open and process it, thereby allowing the
°  main storage alteration.

¸

°  INCORZAP                                                   8
¯

  INSTALLATION
  ____________
  INSTALLATION
  INSTALLATION
°  INSTALLATION
¸


°  INCORZAP is distributed in one file in unloaded IEBCOPY for-
°  mat.  The  file  contains  object and source along with this
°  document  in  two versions -- one in upper case only and one
°  in both upper and lower case.

¸
  Loading the Distribution File From Tape
  _______________________________________
  Loading the Distribution File From Tape
  Loading the Distribution File From Tape
°  Loading the Distribution File From Tape

°  The  following  job  will  load the distribution file into a
°  partitioned data set:


°    //S1 EXEC PGM=IEBCOPY
°    //SYSPRINT DD SYSOUT=*
°    //SYSUT3 DD UNIT=SYSDA,CYL=(CYL,(1,1))
°    //SYSUT4 DD UNIT=SYSDA,CYL=(CYL,(1,1))
°    //I DD UNIT=3400-3,LABEL=(1,NL),DISP=OLD,
°    //     VOL=SER=CZTAPE
°    //O DD DSN=user.distlib,UNIT=SYSDA,
°    //     DISP=(,CATLG),SPACE=(TRK,(10,2,3)),
°    //     DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)
°    //SYSIN DD *
°     C I=I,O=O
°    /*



¸
  Installing the Load Module
  __________________________
  Installing the Load Module
  Installing the Load Module
°  Installing the Load Module

°  The  following step links INCORZAP into a protected, author-
°  ized library as an authorized load module:


°    //S3 EXEC LKED,PARM='AC=1'
°    //LKED.SYSLMOD DD DSN=user.auth.lib(INCORZAP),DISP=SHR
°    //LKED.SYSLIN  DD DSN=user.distlib(INCORZAP),DISP=SHR


¸


°  INCORZAP                                                   9
¯

  Printing the General Information Manual
  _______________________________________
  Printing the General Information Manual
  Printing the General Information Manual
°  Printing the General Information Manual

°  The   following   step  will  print  the  documentation  for
°  INCORZAP:


°    //S4 EXEC PGM=IEBGENER
°    //SYSPRINT DD SYSOUT=*
°    //SYSUT1   DD DISP=SHR,DSN=user.distlib(UGUPCASE),DCB=RECFM=FBM
°    //SYSUT2   DD SYSOUT=*
°    //SYSIN    DD DUMMY



°  Note that the above job prints the upper case version of the
°  User's  Guide.  Point  SYSUT1 to member USERGUID if you have
°  upper/lower case capability.


¸
¸
¸
¸
¸
¸
¸
¸
¸
¸
¸


°  INCORZAP                                                  10
¯

  EXAMPLES
  ________
  EXAMPLES
  EXAMPLES
°  EXAMPLES
¸

¸
  Example 1 - Zapping an LPA Module
  _________________________________
  Example 1 - Zapping an LPA Module
  Example 1 - Zapping an LPA Module
°  Example 1 - Zapping an LPA Module


°    //ZAP1  EXEC  PGM=INCORZAP
°    //SYSPRINT DD SYSOUT=*
°    //SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR
°    //SYSIN    DD *
°     NAME IGC0010A IEDAYOO
°     VER 03 C1E8
°     REP 03 81A8
°    /*


¸
¸

¸
  Example 2 - Backing Out a Zap and Unfixing the Main Storage
  ___________________________________________________________
  Example 2 - Backing Out a Zap and Unfixing the Main Storage
  Example 2 - Backing Out a Zap and Unfixing the Main Storage
°  Example 2 - Backing Out a Zap and Unfixing the Main Storage


°    //ZAP2  EXEC  PGM=INCORZAP
°    //SYSPRINT DD SYSOUT=*
°    //SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR
°    //SYSIN    DD *
°     NAME IGC0010A IEDAYOO
°     VER 03 81A8
°     RES 03 C1E8
°    /*


¸
¸


°  INCORZAP                                                  11
¯

  Example 3 - Using Entry Points As Symbolic Offsets
  __________________________________________________
  Example 3 - Using Entry Points As Symbolic Offsets
  Example 3 - Using Entry Points As Symbolic Offsets
°  Example 3 - Using Entry Points As Symbolic Offsets


°    //ZAP3  EXEC  PGM=INCORZAP
°    //SYSPRINT DD SYSOUT=*
°    //SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR
°    //SYSIN    DD *
°     NAME IGC0010A IEDAYOO
°     VER 'QTIP0130' 05C0
°     REP 'QTIP0130' 00
°     NAME IGG0CLA1 IGG0CLA9
°     VER 'IGGPCMRR' 05C0
°     REP 'IGGPCMRR' 07FF
°    /*


¸
¸

¸
  Example 4 - Dumping an In-core CSECT
  ____________________________________
  Example 4 - Dumping an In-core CSECT
  Example 4 - Dumping an In-core CSECT
°  Example 4 - Dumping an In-core CSECT


°    //ZAP4  EXEC  PGM=INCORZAP
°    //SYSPRINT DD SYSOUT=*
°    //SYSLIB   DD DSN=SYS1.NUCLEUS,DISP=SHR
°    //SYSIN    DD *
°     DUMP IEANUC01 IGC018
°    /*


¸
¸
¸
¸
¸

°  INCORZAP                                                  12
¯

  Example 5 - Supplying Input Via the PARM Field
  ______________________________________________
  Example 5 - Supplying Input Via the PARM Field
  Example 5 - Supplying Input Via the PARM Field
°  Example 5 - Supplying Input Via the PARM Field


°    //ZAP5  EXEC  PGM=INCORZAP,
°    //       PARM='NAME IEANUC01 IEAVFX00/VER 1023 F8/REP 1023 FF'
°    //SYSPRINT DD SYSOUT=*
°    //SYSLIB   DD DSN=SYS1.NUCLEUS,DISP=SHR
°    /*

°  (Note  use  of  '/' as a logical line separator. This can be
°  used in SYSIN input and console replies as well.)
¸
¸
¸
¸
¸
  Example 6 - INCORZAP Procedure for Console Zapping
  __________________________________________________
  Example 6 - INCORZAP Procedure for Console Zapping
  Example 6 - INCORZAP Procedure for Console Zapping
°  Example 6 - INCORZAP Procedure for Console Zapping


°    //COREZAP   PROC  LIB=LPALIB
°    //INCORZAP  EXEC  PGM=INCORZAP,PARM=CONSOLE
°    //SYSPRINT  DD    SYSOUT=*
°    //SYSLIB    DD    DSN=SYS1.&LIB,DISP=SHR
°    //SYSUDUMP  DD    SYSOUT=*
°    /*


¸
¸
¸
¸
¸


°  INCORZAP                                                  13
¯

°  (The   examples  on  this  page  use  the  console  mode  of
°  operation)

¸
  Example 7 - Finding the Address of a Load Module
  ________________________________________________
  Example 7 - Finding the Address of a Load Module
  Example 7 - Finding the Address of a Load Module
°  Example 7 - Finding the Address of a Load Module


°    *03 ENTER INCORZAP STATEMENTS OR END
°    r 3,'name igc0010a'
°     IEE600I REPLY TO 03 IS;SUPPRESSED
°     +00E44000 = IN-CORE ADDRESS OF PRECEDING SYMBOL



¸
  Example 8 - Finding the Address of a CSECT in Link Pack Area
  ____________________________________________________________
  Example 8 - Finding the Address of a CSECT in Link Pack Area
  Example 8 - Finding the Address of a CSECT in Link Pack Area
°  Example 8 - Finding the Address of a CSECT in Link Pack Area


°    *04 ENTER INCORZAP STATEMENTS OR END
°    r 4,name igc0010a iedayoo
°     IEE600I REPLY TO 04 IS;SUPPRESSED
°     +00E452B8 = IN-CORE ADDRESS OF PRECEDING SYMBOL



¸
  Example 9 - Finding the Address of An Entry Point
  _________________________________________________
  Example 9 - Finding the Address of An Entry Point
  Example 9 - Finding the Address of An Entry Point
°  Example 9 - Finding the Address of An Entry Point


°    *05 ENTER INCORZAP STATEMENTS OR END
°    5,ver 'qtip0130' 00
°     IEE600I REPLY TO 05 IS;SUPPRESSED
°     +00E455EE = IN-CORE ADDRESS OF PRECEDING SYMBOL
°     +VERIFY REJECT - SET NO GO SWITCH

¸
¸


°  INCORZAP                                                  14
¯

°  ö¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¼
¸
¸
¸
¸
¸
¸
¸
¸
¸
¸
¸
¸

