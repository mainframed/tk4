PROC 0  ENTRY(SAS) BLK(6144) DEBUG SELECT EXCLUDE NOREP
/* )STARTHELP
/*
/* )F  FUNCTION                                                        -
/*     THE REBLK CLIST WILL REBLOCK A STANDARD LOAD LIBRARY
/*     EITHER DOWNWARD OR UPWARD. LOAD MODULE TXT RECORDS
/*     WILL BE ADJUSTED FOR BLOCKSIZE DIFFERENCES. SCATTER
/*     LOADED MODULES OR CERTAIN PL1 RUNTIME SUBROUTINE
/*     MODULES CANNOT BE REBLOCKED. THESE MODULES SIMPLY WILL
/*     NOT BE COPIED TO THE OUTPUT DATASET AND THE CLIST
/*     WILL TERMINATE WITH AN ERROR MESSAGE AND CONDITION CODE.
/*
/*     THE OPERATION OF THIS CLIST DEPENDS ON THE 'SAS'
/*     PROCEDURE 'PDSCOPY'. USING THIS UTILITY, THE OUTPUT
/*     IS COPIED FROM THE INPUT DATASETS AND AUTOMATICALLY
/*     REBLOCKED. THE LIMITATIONS OF THE ABOVE PROCEDURE
/*     APPLY AND ARE LISTED IN THE 'SAS' USERS GUIDE.
/*
/* )S  SYNTAX                                                          -
/*
/*     %REBLK ENTRY() BLK() DEBUG NOREP SELECT EXCLUDE
/*     REQUIRED - NONE
/*     DEFAULTS - BLK(6144), ENTRY(SAS)
/*     ALIASES  - NONE
/*
/* )O  OPERANDS                                                        -
/* ))ENTRY      SPECIFIES THE ENTRY POINT NAME OF THE SAS PROGRAM.
/*              DEFAULT IS 'SAS'. IF YOUR INSTALLATION HAS CHANGED
/*              THE NAME OF 'SAS' OR IF YOU ARE RUNNING A TEST
/*              VERSION RESPECIFY THIS PARAMETER.
/*
/* ))BLK        SPECIFIES THE BLOCKSIZE OF THE OUTPUT DATASET.
/*              DEFAULT IS 6144. IF YOU WOULD LIKE TO CHANGE
/*              THE OUTPUT BLOCKSIZE, ENTER THIS PARAMETER UPON
/*              CLIST INVOCATION.
/*
/* ))DEBUG      TURNS ON FULL LIST OPTIONS FOR CLIST DEBUGGING.
/*              DEFULT IS NULL (OPTIONS ALL OFF).
/*
/* ))NOREP      INDICATES THAT MEMBERS IN THE OUTPUT PDS ARE
/*              NOT TO BE REPLACED BY MEMBERS IN THE INPUT PDS.
/*              THIS, IN EFFECT, IS SIMILAR TO THE IEBCOPY
/*              "NOREPLACE" OPTION. IN SAS, HOWEVER, "REPLACE"
/*              IS THE DEFAULT.
/*
/* ))SELECT     REQUESTS MEMBER SELECTION CAPABILITY. USER IS
/*              PROMPTED FOR MEMBER NAMES. MEMBER NAMES ARE
/*              ENTERED ONE AT A TIME, A NULL LINE SIGNIFYING
/*              THE END OF THE ENTRIES. UP TO 100 ENTRIES MAY
/*              BE SELECTED.
/*
/* ))EXCLUDE    REQUESTS MEMBER EXCLUSION CAPABILITY. USER IS
/*              PROMPTED FOR MEMBER NAMES. MEMBER NAMES ARE
/*              ENTERED ONE AT A TIME, A NULL LINE SIGNIFYING
/*              THE END OF THE ENTRIES. UP TO 100 ENTRIES MAY
/*              BE EXCLUDED.
/*
/* )ENDHELP
/*
IF &DEBUG EQ DEBUG THEN CONTROL LIST CONLIST SYMLIST PROMPT
                   ELSE CONTROL NOMSG NOFLUSH
/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
/** SAS LOADLIB REBLOCKER CLIST                            */
/** INSTALLED 02/24/81 - HOWARD M. DEAN                    */
/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
ATTN DO
       CONTROL NOMSG
       FREE FI(SASIN SYSPRINT LINKLIB TASKLIB)
       FREE FI(INDD OUTDD)
       FREE FI(FT11F001 FT12F001 FT13F001 FT15F001 WORK)
       FREE ATTR(F80 SS PRT LB)
       DELETE '&SYSPREF..&SYSUID..SASIN.DATA' PURGE
       ALLOC FI(SYSPRINT) DUMMY
       ALLOC FI(SYSIN) DA(*)
       EXIT QUIT
     END
CLR3270
WRITE
WRITE ****************************************
WRITE ** MAGIC LOAD LIBRARY REBLOCKER CLIST **
WRITE ** HOWARD M. DEAN            02/17/81 **
WRITE ** LAST UPDATED BY HMD ===>  02/17/82 **
WRITE ****************************************
WRITE
/**************************************************/
/** SEE IF USER WOULD LIKE DOCUMENTATION PRINTED  */
/**************************************************/
SET &TEXT=&STR(WOULD YOU LIKE INSTRUCTIONS? (ENTER YES OR NO) ==> )
SET &ANS=
DO WHILE(&LENGTH(&ANS) EQ 0)
WRITENR &TEXT
READ    &ANS
END
DO WHILE(&SUBSTR(1:1,&ANS) NE &STR(N) AND (&SUBSTR(1:1,&ANS) NE        -
&STR(Y))
   SET &ANS=
   CLR3270
   WRITE
   WRITE COME ON NOW..RESPOND WITH SOMETHING I CAN UNDERSTAND.
   WRITE IF YOU MEANT NO, RESPOND WITH NO, NYET, NOSIR, OR ANYTHING
   WRITE BEGINNING WITH AN 'N'. IF YOU MEANT YES, YUP, YIPPIE,
   WRITE OF ANYTHING BEGINNING WITH A 'Y' WILL DO. TRY IT AGAIN.
   WRITE
   DO WHILE(&LENGTH(&ANS) EQ 0)
      WRITENR &TEXT
      READ    &ANS
   END
END
DO WHILE(&SUBSTR(1:1,&ANS) EQ &STR(Y))
   SET &ANS EQ N
   WRITE
   CLR3270
   WRITE THIS CLIST WILL REBLOCK A STANDARD LOAD LIBRARY DATASET
   WRITE EITHER DOWNWARD OR UPWARD WITHOUT CAUSING DAMAGE TO THE
   WRITE LOAD MODULES. IT WILL NOT REBLOCK MODULES MARKED AS SCATTER
   WRITE LOADED OR PL1/F RUN-TIME SUBROUTINE MODULES. THE 'SAS'
   WRITE PROGRAM IS INVOKED TO ACCOMPLISH THE REBLOCKING TASK.
   WRITE
   WRITE DO NOT ATTEMPT TO USE THIS CLIST ON SOURCE OR MACRO
   WRITE LIBRARIES AS IT WILL NOT WORK PROPERLY.
   WRITE
   WRITE YOU CAN SPECIFY THE BLOCKSIZE FOR THE OUTPUT DATASET BY
   WRITE USING THE "BLK" SYMBOLIC PARAMETER. THE CURRENT VALUE
   WRITE OF THIS PARAMETER IS &BLK (GENERATED EITHER BY THE
   WRITE DEFAULT VALUE OR WHAT YOU SPECIFIED UPON INVOCATION OF
   WRITE THIS CLIST).
   WRITE
   WRITE YOU WILL BE PROMPTED FOR ALL OTHER INFORMATION IF
   WRITE NEEDED. THE ONLY INFORMATION YOU NEED SUPPLY IS THAT
   WRITE REQUIRED TO PERFORM THE INDICATED FUNCTION.
   WRITE
   WRITENR HIT THE ENTER KEY TO CONTINUE ==>
   READ
 END
SET &SW1=                      /* SET CONFIRMATION SWITCH TO NULL   */
FREE FI(INDD OUTDD)            /* FREE THE INPUT AND OUTPUT DDNAMES */
FREE ATTRLIST(LB)              /* FREE THE REBLOCK ATTRIBUTE LIST   */
DO  WHILE(&LENGTH(&SW1) EQ 0 )
/*****************************/
/* GET INPUT DATASET NAME    */
/*****************************/
    SET &TEXT=&STR(ENTER THE FULLY QUALIFIED INPUT DSN ==> )
    SET &INDS=  /* SET INPUT TO NULL */
    CLR3270
    DO WHILE(&LENGTH(&INDS) EQ 0)
       WRITE
       WRITENR &TEXT
       READ    &INDS
    END
    /*******************************/
    /* VALIDATE INPUT DATASET NAME */
    /*******************************/
    DO WHILE(&DATATYPE(&INDS) NE CHAR OR &LENGTH(&INDS) GT 44)
       SET &INDS=  /* SET INPUT TO NULL */
       WRITE
       WRITE ** ERROR ** ==> ABOVE ENTRY IS INVALID <==
       WRITE
       DO WHILE(&LENGTH(&INDS) EQ 0)
          WRITE
          WRITENR &TEXT
          READ    &INDS
       END
    END
    SET &LCC EQ 1
    DO WHILE(&LCC NE 0)
       STATE '&INDS' R
       SET &LCC=&LASTCC
       IF  &LCC NE 0 THEN                                              -
         DO
            WRITE
            WRITE ** ERROR ====> '&INDS'
            WRITE THIS DATASET IS NOT CATALOGED OR IS NOT
            WRITE ON THE CATALOG-INDICATED VOLUME
            WRITE
            WRITENR HIT THE ENTER KEY TO CONTINUE ==>
            READ
            SET &INDS=   /* RESET INPUT DATASET NAME TO NULL */
            CLR3270
            DO WHILE(&LENGTH(&INDS) EQ 0)
               WRITE
               WRITENR &TEXT
               READ    &INDS
            END
         END
    END
    /*****************************/
    /* GET OUTPUT DATASET NAME   */
    /*****************************/
    SET &TEXT=&STR(ENTER THE FULLY QUALIFIED OUTPUT DSN ==> )
    SET &OUTDS=  /* SET INPUT TO NULL */
    CLR3270
    DO WHILE(&LENGTH(&OUTDS) EQ 0)
       WRITENR &TEXT
       READ    &OUTDS
    END
    /********************************/
    /* VALIDATE OUTPUT DATASET NAME */
    /********************************/
    DO WHILE(&DATATYPE(&OUTDS) NE CHAR OR &LENGTH(&OUTDS) GT 44)
       SET &OUTDS= /* SET INPUT TO NULL */
       WRITE
       WRITE ** ERROR ** ==> ABOVE ENTRY IS INVALID <==
       WRITE
       DO WHILE(&LENGTH(&OUTDS) EQ 0)
          WRITE
          WRITENR &TEXT
          READ    &OUTDS
       END
    END
    /**************************************************/
    /* CHECK TO SEE IF USER WANTS WHAT HE/SHE ENTERED */
    /**************************************************/
    CLR3270
    WRITENR INPUT  DSN IS ==>
    SET   &TEXT=&STR('&INDS')
    WRITE &TEXT
    WRITENR OUTPUT DSN IS ==>
    SET   &TEXT=&STR('&OUTDS')
    WRITE &TEXT
    WRITE
    SET &TEXT=&STR(ARE THE ABOVE STATEMENTS CORRECT? ==> )
    SET &ANS=       /* SET ANSWER TO NULL */
    DO WHILE(&LENGTH(&ANS) EQ 0)
       WRITENR &TEXT
       READ    &ANS
    END
    DO WHILE(&SUBSTR(1:1,&ANS) NE N AND &SUBSTR(1:1,&ANS) NE Y)
       WRITE
       WRITE ENTER YES OR NO..
       WRITE
       DO WHILE(&LENGTH(&ANS) EQ 0)
          WRITENR &TEXT
          READ    &ANS
       END
    END
    IF &SUBSTR(1:1,&ANS) EQ Y THEN SET &SW1 EQ Y
END
/****************************************/
/* DETERMINE IF OUTPUT DATASET EXISTS   */
/* IF NOT, PERFORM ALLOCATION           */
/****************************************/
STATE '&OUTDS' R
SET &LCC = &LASTCC
IF  &LCC NE 0 THEN                                                     -
  DO
    CLR3270
    WRITE
    WRITE DATASET '&OUTDS' DOES NOT EXIST, ALLOCATION WILL BE PERFORMED
    WRITE
    SET   &TEXT=&STR(ENTER THE FOLLOWING VALUES SEPERATED BY COMMAS )
    WRITE &TEXT
    SET   &TEXT=&STR(ENTER PRIMARY, SECONDARY ALLOCATION VALUES ==> )
    SET   &PRI=   /* SET PRIMARY   ALLOCATION TO NULL */
    SET   &SEC=   /* SET SECONDARY ALLOCATION TO NULL */
    DO WHILE(&LENGTH(&PRI) EQ 0 OR &LENGTH(&SEC) EQ 0)
       WRITENR &TEXT
       READ    &PRI,&SEC
    END
    DO WHILE(&DATATYPE(&PRI) NE NUM OR &DATATYPE(&SEC) NE NUM)
       SET   &PRI=   /* SET PRIMARY   ALLOCATION TO NULL */
       SET   &SEC=   /* SET SECONDARY ALLOCATION TO NULL */
       WRITE
       WRITE ** ERROR **
       WRITE ==> ONE OF THE ABOVE VALUES IS IN ERROR <==
       WRITE
       DO WHILE(&LENGTH(&PRI) EQ 0 OR &LENGTH(&SEC) EQ 0)
          WRITE
          WRITENR &TEXT
          READ    &PRI,&SEC
       END
    END
    SET &TEXT=&STR(ENTER THE NUMBER OF DIRECTORY BLOCKS ==> )
    SET &DIR=  /* SET DIRECTORY BLOCK VALUE TO NULL */
    DO WHILE(&LENGTH(&DIR) EQ 0)
       WRITE
       WRITENR &TEXT
       READ    &DIR
    END
    DO WHILE(&DATATYPE(&DIR) NE NUM)
       SET &DIR=     /* RESET DIRECTORY VALUE TO NULL */
       WRITE
       WRITE ** ERROR ** ==> THE ABOVE ENTRY IS INVALID <==
       WRITE
       DO WHILE(&LENGTH(&DIR) EQ 0)
          WRITENR &TEXT
          READ    &DIR
       END
    END
    SET &TEXT=&STR(ENTER ALLOCATION TYPE (CYL OR TRA OR BLK) ==> )
    SET &TYPE=                 /* SET TYPE OF ALLOCATION TO NULL */
    DO WHILE(&LENGTH(&TYPE) EQ 0)
       WRITE
       WRITENR &TEXT
       READ    &TYPE
    END
    SET &BKS=0
    DO WHILE(&TYPE NE CYL AND &TYPE NE TRA AND &TYPE NE BLK)
       SET &TYPE=    /* RESET TYPE TO NULL */
       WRITE
       WRITE ** ERROR ** ==> THE ABOVE ENTRY IS INVALID <==
       WRITE
       DO WHILE(&LENGTH(&TYPE) EQ 0)
          WRITE
          WRITENR &TEXT
          READ    &TYPE
       END
    END
    SET &SW2=512   /* SET SWITCH 2 VALUE TO THE LOOP REPEATER VALUE */
    DO WHILE(&SW2 EQ 512)
       SET &TEXT=&STR(ENTER UNIT TYPE FOR NEW ALLOCATION ==> )
       SET &ALLOC=    /* SET ALLOCATION TYPE TO NULL */
       CLR3270
       WRITE
       WRITE AT THIS POINT YOU MAY ENTER THE FOLLOWING
       WRITE IN RESPONSE TO UNIT TYPE FOR NEW ALLOCATION:
       WRITE
       WRITE SYSDA - WILL CAUSE ALLOCATION TO BE PERFORMED
       WRITE         ON A STORAGE VOLUME.
       WRITE
       WRITE DISK  - WILL CAUSE ALLOCATION TO BE PERFORMED
       WRITE         ON A PRIVATE VOLUME. YOU WILL BE PROMPTED
       WRITE         FOR THE VOLUME SERIAL.
       WRITE
       DO WHILE(&LENGTH(&ALLOC) EQ 0)
          WRITE
          WRITENR &TEXT
          READ    &ALLOC
       END
       DO  WHILE(&ALLOC NE SYSDA AND &ALLOC NE DISK)
           SET &ALLOC=      /* RESET ALLOC VALUE TO NULL */
           WRITE
           WRITE ACCEPTABLE VALUES ARE SYSDA AND DISK. IF
           WRITE YOU ENTER SYSDA, THEN ALLOCATION WILL BE
           WRITE PREFORMED ON A STORAGE VOLUME. IF YOU ENTER
           WRITE DISK, THEN ALLOCATION YOU WILL BE PROMPTED
           WRITE FOR A DASD VOLUME SERIAL.
           WRITE
           DO WHILE(&LENGTH(&ALLOC) EQ 0)
              WRITE
              WRITENR &TEXT
              READ    &ALLOC
           END
       END
       IF &ALLOC EQ SYSDA THEN SET &SW2 EQ 4096
       IF &ALLOC EQ DISK  THEN SET &SW2 EQ 1024
       DO WHILE(&SW2 EQ 4096)
          SET &SW2=512      /* RESET SW2 TO THE NULL VALUE */
          WRITE
          WRITE ALLOCATION WILL BE PERFORMED ON A STORAGE VOLUME
          WRITE FOR SPECIFIC VOLSER ENTER 'DISK' AS THE UNIT TYPE
          WRITE
          SET &ANS=   /* ASSUME ANSWER IS NULL */
          SET &TEXT=&STR(DO YOU WANT YOUR DATASET ON A STORAGE VOLUME  -
==> (YES OR NO)  )
          DO WHILE(&LENGTH(&ANS) EQ 0)
             WRITE
             WRITENR &TEXT
             READ    &ANS
          END
          DO WHILE(&SUBSTR(1:1,&ANS) NE Y AND &SUBSTR(1:1,&ANS) NE N)
             WRITE
             WRITE ENTER YES OR NO..
             WRITE
             SET &ANS=
             DO WHILE(&LENGTH(&ANS) EQ 0)
                WRITENR &TEXT
                READ    &ANS
             END
          END
          IF &SUBSTR(1:1,&ANS) EQ Y THEN SET &SW2 EQ 2048
       END
       DO WHILE(&SW2 EQ 1024)
          SET &VOLSER=        /* SET VOLUME TO NULL */
          SET &TEXT=&STR(ENTER VOLSER FOR NEW ALLOCATION ==> )
          DO WHILE(&LENGTH(&VOLSER) EQ 0)
             WRITENR &TEXT
             READ    &VOLSER
          END
          DO WHILE(&DATATYPE(&VOLSER) NE CHAR OR &LENGTH(&VOLSER) NE 6)
             SET &VOLSER=    /* RESET VOLUME TO NULL VALUE */
             WRITE
             WRITE ** ERROR ** ==> ABOVE ENTRY IS INVALID <==
             WRITE
             DO WHILE(&LENGTH(&VOLSER) EQ 0)
                WRITENR &TEXT
                READ    &VOLSER
             END
          END
          SET &SW2=2048
       END
    END
    CLR3270
    WRITE
    IF &ALLOC EQ DISK AND &TYPE NE BLK THEN                            -
        SET &C = &STR(ALLOC DA('&OUTDS') FI(OUTDD) NEW SP(&PRI,&SEC)   -
DIR(&DIR) &TYPE UNIT(&ALLOC) VOL(&VOLSER) USING(LB) )
    IF &ALLOC EQ DISK AND &TYPE EQ BLK THEN                            -
        SET &C = &STR(ALLOC DA('&OUTDS') FI(OUTDD) NEW SP(&PRI,&SEC)   -
DIR(&DIR) BLOCK(&BLK) UNIT(&ALLOC) VOL(&VOLSER) USING(LB) )
    IF &ALLOC EQ SYSDA AND &TYPE NE BLK THEN                           -
        SET &C=&STR(ALLOC DA('&OUTDS') FI(OUTDD) NEW SP(&PRI,&SEC)     -
DIR(&DIR) &TYPE USING(LB)  )
    IF &ALLOC EQ SYSDA AND &TYPE EQ BLK THEN                           -
        SET &C=&STR(ALLOC DA('&OUTDS') FI(OUTDD) NEW SP(&PRI,&SEC)     -
DIR(&DIR) BLOCK(&BLK) USING(LB) )
  END
ELSE SET &C=&STR(ALLOC DA('&OUTDS') FI(OUTDD) SHR USING(LB) )
WRITE
WRITE THE ATTRIBUTES OF THE OUTPUT DATASET '&OUTDS'
WRITE WILL BE SET AS FOLLOWS:
CONTROL LIST,MSG
ATTR    LB   BLKSIZE(&BLK) LRECL(0) RECFM(U)
WRITE
WRITE ** THE FOLLOWING COMMAND IS BEING ISSUED **
&C
SET &LCC=&LASTCC
CONTROL NOLIST,NOMSG
WRITE
WRITENR HIT THE ENTER KEY TO CONTINUE ===>
READ    &ANS
DO WHILE(&LCC NE 0)
   CLR3270
   WRITE *******************************************************
   WRITE ** AN ERROR HAS OCCURED DURING THE ALLOCATION
   WRITE ** OF '&OUTDS'
   WRITE ** THIS CLIST CANNOT CONTINUE
   WRITE **
   WRITE ** CORRECT THE ABOVE PROBLEM AND RE-ISSUE THIS CLIST
   WRITE ** CONTROL IS BEING RETURNED TO NON-CLIST MODE
   WRITE ********************************************************
   WRITE LAST CONDITION CODE FROM THE &SYSPCMD COMMAND WAS &LCC
   EXIT CODE(&LCC)
   SET &LCC=1
END
FREE FI(SASIN SYSPRINT LINKLIB TASKLIB )
FREE FI(FT11F001 FT12F001 FT13F001 FT15F001 WORK) ATTR(F80 SS PRT LB)
ATTR F80 BLKSIZE(80)   LRECL(80)  RECFM(F B)
ATTR PRT BLKSIZE(141)  LRECL(137) RECFM(V B A)
ATTR SS  BLKSIZE(400)  LRECL(80)  RECFM(F B)
DELETE '&SYSPREF..&SYSUID..SASIN.DATA' PURGE
ALLOC  DA('&SYSPREF..&SYSUID..SASIN.DATA') FI(SASIN)                   -
       NEW SPA(105,20) BLOCK(80) USING(F80)
ALLOC  FILE(FT11F001) DA(*) US(PRT)
ALLOC  FILE(FT12F001) DA(*) US(PRT)
ALLOC  FILE(FT13F001) DA(*) US(PRT)
ALLOC  FILE(FT15F001) SP(100,300) BLOCK(400)   US(SS)
ALLOC  FILE(WORK)     SP(900,500) BLOCK(6160)  ROUND
/**************************************************************/
/**       WRITE SAS CONTROL CARD TO SASIN DATA SET           **/
/**       FOR LATER USE BY THE SAS PROGRAM                   **/
/**************************************************************/
CLR3270
OPENFILE SASIN OUTPUT
IF &NOREP EQ NOREP THEN                                                -
      DO
        SET &SASIN=&STR( PROC PDSCOPY INDD=INDD +
                         OUTDD=OUTDD BLKSIZE=&BLK. NOREPLACE;)
        WRITE
        WRITE OPTIONS FOR THIS RUN INCLUDE - "NOREPLACE"
        WRITE LOAD MODULES WILL NOT BE REPLACED IN THE OUTPUT DATASET
        WRITE
        WRITE OBSERVE SAS MESSAGES AS RETURN CODE WILL BE ZERO
        WRITE AND EXECUTION WILL BE LISTED AS "SUCCESSFUL" EVEN
        WRITE THOUGH MODULES MAY HAVE NOT BEEN REPLACED.
        WRITE
      END
ELSE                                                                   -
      DO
        SET &SASIN=&STR( PROC PDSCOPY INDD=INDD OUTDD=OUTDD +
                         BLKSIZE=&BLK.;)
        WRITE
        WRITE OPTIONS FOR THIS RUN DEFAULT TO - "REPLACE"
        WRITE LOAD MODULES WILL BE REPLACED IN THE OUTPUT DATASET
        WRITE
      END
PUTFILE  SASIN
WRITE
WRITENR HIT THE ENTER KEY TO CONTINUE ===>
READ    &ANS
SET &TEXT EQ &STR(ENTER SELECTION/EXCLUSION MEMBER NAMES ONE AT A TIME)
SET &NTXT EQ &STR(ENTER A NULL LINE TO TERMINATE ENTRIES)
SET &PRMT EQ &STR(==> )
SET &CNTR EQ 0
SET &FLG  EQ &STR()
IF &SELECT EQ SELECT OR &EXCLUDE EQ EXCLUDE THEN                       -
   DO
     CLR3270
     IF &SELECT  EQ SELECT  THEN SET &ACTION EQ &STR(SELECT)
     IF &EXCLUDE EQ EXCLUDE THEN SET &ACTION EQ &STR(EXCLUDE)
     WRITE &TEXT
     WRITE &NTXT
     DO WHILE(&LENGTH(&FLG) EQ 0 AND &CNTR LE 100)
        WRITENR &PRMT
        READ    &ANS
        IF &LENGTH(&ANS) NE 0 THEN                                     -
           DO
             IF &DATATYPE(&ANS) NE CHAR OR   +
                &DATATYPE(&SUBSTR(1:1,&ANS)) NE CHAR THEN              -
                DO
                   WRITE
                   WRITE INVALID ENTRY &ANS -- DISCARDED
                   WRITE
                   SET &FLG EQ &STR()
                END
             ELSE                                                      -
                DO
                   SET   &SASIN EQ &STR( &ACTION &ANS;)
                   WRITE &STR( &ACTION &ANS;)
                   PUTFILE SASIN
                   SET   &CNTR = &CNTR + 1
                END
           END
        ELSE SET &FLG EQ &STR(XX)
     END
   END
CLOSFILE SASIN
/**************************************************************/
/**    ALLOCATE THE INPUT (INDD) AND OUTPUT (OUTDD) PDS      **/
/**************************************************************/
ALLOC FI(INDD) DA('&INDS') SHR
/**************************************************************/
/**    ALLOCATE THE TASK LIBRARIES NECESSARY FOR SAS         **/
/**************************************************************/
ALLOC FI(LINKLIB) DA('SYS3.SAS.LIBRARY') SHR
ALLOC FI(TASKLIB) DA('SYS3.SAS.LIBRARY','SYS1.PLITASK','SYS2.PLILINK') -
SHR
CLR3270
WRITENR ..WOR-KING...
WRITE
/*******************************/
/** ATTACH THE SAS PROGRAM    **/
/*******************************/
TASKC SAS SYSIN=SASIN NONOTES
SET &LCC = &LASTCC
IF  &LCC EQ 0 THEN                                                     -
   DO
    WRITE
    WRITE ** 'SAS' STEP WAS SUCCESSFUL... **
    WRITE ** DATASET '&OUTDS' NOW CONTAINS REBLOCKED LOAD MODULES
    WRITE
   END
ELSE                                                                   -
   DO
   WRITE
   WRITE ** WARNING! ERRORS HAVE BEEN DETECTED **
   WRITE ** RETURN CODE FROM THE 'SAS' PROGRAM WAS ==> &LCC  **
   WRITE
   END
/********************************/
/**    CLEAN UP AND GO HOME    **/
/********************************/
FREE FI(SASIN SYSPRINT LINKLIB TASKLIB)
FREE FI(FT11F001 FT12F001 FT13F001 FT15F001 WORK)
FREE ATTR(F80 SS PRT LB)
DELETE '&SYSPREF..&SYSUID..SASIN.DATA' PURGE
ALLOC FI(SYSPRINT) DUMMY
ALLOC FI(SYSIN) DA(*)
