PROC 0 TYPE(JOB) DEBUG   /* DOING JOBS UNLESS TYPE(SYS)
 /******************************************************************/
 /*                                                                */
 /* REFER:  SSU.MVSUG.CLIST(SMFSCAN)                               */
 /*                                                                */
 /* DOC:                                                           */
 /*                                                                */
 /*   SMF CLIST EXTRACTS JOB INFORMATION OR SYSTEM INFORMATION     */
 /*   FROM SMF DATASETS AND DISPLAYS SAME.                         */
 /*                                                                */
 /*   CALLING OPTIONS:                                             */
 /*                                                                */
 /*   (EX) SMF 'TYPE(JOB)' OR 'TYPE(J)'   (IS DEFAULT)             */
 /*                                                                */
 /*        PROMPTS FOR WHEN; SYS IF TODAY; DATE(IF TODAY)/TIME;    */
 /*        JOBNAME(S).  IF NO JOBNAMES YOU GET EVERYTHING.         */
 /*                                                                */
 /*   (EX) SMF 'TYPE(SYS)' OR 'TYPE(S)'                            */
 /*                                                                */
 /*        PROMPTS FOR WHEN; SYSTEM (IF TODAY); DATE(IF TODAY)/    */
 /*        TIME; SUPPRESSES ALL JOB-RELATED RECORDS.               */
 /*                                                                */
 /*   (EX) SMF 'TYPE(ANYTHINGELSE)'                                */
 /*                                                                */
 /*        LIKE (JOB) EXCEPT USER IS PROMPTED FOR SUPPRESSION      */
 /*        STRING (SMF RECORDS NOT TO DISPLAY).                    */
 /*                                                                */
 /*   D. THEWLIS, FEBRUARY 13, 1979.                               */
 /*   B. LUM, REVISED FEBRUARY 26, 1979                            */
 /*   H. DEAN, REVISED JANUARY 13, 1980                            */
 /*   C.A.LEE, REVISED MARCH   28, 1980                            */
 /*   H. DEAN, REVISED MARCH   25, 1981                            */
 /*   H. DEAN, REVISED AUGUST  03, 1981                            */
 /*                                                                */
 /******************************************************************/
IF &DEBUG = DEBUG THEN CONTROL LIST CONLIST SYMLIST PROMPT FLUSH
   ELSE CONTROL NOMSG NOLIST MAIN NOFLUSH PROMPT
 /*   USE $SMFBRWSE PROGRAM TO EXTRACT ALL JOB-RELATED SMF RECORDS */
 /*   FROM CURRENT SYS1.MANX, SYS1.MANY) OR YESTERDAY'S            */
 /*   (QT.QT026110);                                               */
 /*                                                                */
 /*    ATTN EXIT:                                                  */
ATTN  DO
       CONTROL NOFLUSH
       FREE F(SMFTPE SYSUT1 SYSUT2 )
       FREE F(SYSIN SYSPRINT MESSAGES) ATTR(A B)
       IF &OPTION = D THEN RLSE &SYSUID..SMF.DATA
       DEL '&SYSPREF..TEMP.SMF1.DATA'
       DEL '&SYSPREF..TEMP.SMF2.DATA'
       DEL '&SYSPREF..TEMP.SMF4.DATA'
       DEL '&SYSPREF..TEMP.ALLSMF.DATA'
       ALLOC F(SYSIN) DA(*)
       ALLOC FI(SYSPRINT) DA(*)
       EXIT QUIT
      END
 /*   CHOOSE THE OUTPUT MODE FOR THE SMF DISPLAY                   */
CHOOSE: WRITE FOR THE OUTPUT SMF DISPLAY ENTER:
        WRITE 'D' FOR A DATASET - FORMAT 'PREFIX.USERID.SMF.DATA'
        WRITE 'H' FOR A HARDCOPY - SYSOUT CLASS A
        WRITE 'V' FOR A VISUAL DISPLAY
READ &OPTION
IF &OPTION = H THEN DO
   FREE F(SYSPRINT)
   ALLOC F(SYSPRINT) SYSOUT(A)
   GOTO GETWHEN
   END
IF &OPTION = D THEN DO
   FREE F(SYSPRINT) ATTR(SSS)
   ATTR SSS RECFM(F B) LRECL(133) BLKSIZE(6118)
   DEL &SYSUID..SMF.DATA
   ALLOC DA(&SYSUID..SMF.DATA) NEW SPACE(30,10) CYL UNIT(DISK)         -
         USING(SSS) FI(SYSPRINT)
   GOTO GETWHEN
   END
IF &OPTION = V THEN DO
   FREE F(SYSPRINT)
   ALLOC F(SYSPRINT) DA(*)
   END
ELSE DO
   WRITE INVALID CHOICE
   GOTO CHOOSE
   END
 /*   SELECT TODAY OR YESTERDAY                                    */
GETWHEN: +
WRITE ENTER 'T' FOR TODAY (CURRENT) AND 'Y' +
      FOR THE DAILY HISTORY FILE (BOTH SYSTEMS)
READ &WHEN
IF &SUBSTR(1:&LENGTH(&WHEN),&WHEN) NE Y AND +
   &SUBSTR(1:&LENGTH(&WHEN),&WHEN) NE T +
   AND +
   &SUBSTR(1:&LENGTH(&WHEN),&WHEN) NE TODAY AND +
   &SUBSTR(1:&LENGTH(&WHEN),&WHEN) NE YESTERDAY THEN GOTO GETWHEN
 /*   WE NEED SYSTEM ID IF DOING CURRENT (TODAY'S) DATA            */
 /*   TO GENERATE THE CORRECT STATMENTS TO ALLOCATE SMF DATASETS   */
 /*   ON THE CORRECT VOLUMES (SYSTEM 1AAA OR 2BBB OR 4FFF)         */
IF &WHEN NE TODAY AND &WHEN NE T +
   THEN GOTO GETPARM
GETSYS: +
WRITE SYSTEM 1AAA OR 2BBB OR 4FFF OR ALL?
READ &SYS
  /*                                                            */
  /*  IF USER ENTERS 'ALL' THEN ALLOCATE ALL CURRENT SMF FILES */
  /*                                                            */
IF &SYS NE 1AAA AND &SYS NE 2BBB AND &SYS NE 4FFF AND &SYS NE ALL  +
   THEN GOTO GETSYS
 /*   SET UP FILE 'SYSIN' TO CONTAIN PARAMETER CARDS FOR $SMFBRWS  */
GETPARM: +
FREE F(SYSIN SYSUT1 SYSUT2 SMFTPE) A(A B)
ATTR A RECFM(F) LRECL(80) BLKSIZE(80)
ALLOC F(SYSIN) NEW SP(1) TRACKS UNIT(VIO) USING(A)
OPENFILE SYSIN OUTPUT
 /*   GET TIME AND DATE RANGE AND CONSTRUCT/WRITE PARAMETER CARD   */
WRITE ENTER TIME RANGE HHMMHHMM LOW-HIGH OR NULL
READ &TIME
 /*   UNLESS DOING CUMULATIVE, NO NEED FOR DATE                    */
SET &DATE EQ &STR()
IF &WHEN NE YESTERDAY AND &WHEN NE Y +
   THEN GOTO SETONLY
WRITE ENTER DATE RANGE YYDDDYYDDD LOW-HIGH OR NULL
READ &DATE
SETONLY: +
IF &TIME EQ &STR() THEN SET &TIME EQ &STR(00002400)
SET &SYSIN EQ &STR(&TIME &DATE)
PUTFILE SYSIN
 /*   IF TYPE(SYS) SPECIFIED, SUPPRESS JOB-RELATED RECORDS AND     */
 /*   BYPASS JOBNAME ACQUISITION.                                  */
IF &TYPE NE SYS AND &TYPE NE S +
     THEN GOTO SETQRY
SET &SYSIN EQ +
    &STR(04 05 06 14 15 17 18 20 26 34 35 40 62 63 64 67 68 69 255)
PUTFILE SYSIN
GOTO SYSDN
 /*   IF TYPE NOT (JOB) ASSUME IT WAS REQUEST FOR SUPPRESSION      */
 /*   CONTROL.  READ SUPPRESSION STRING FROM USER.                 */
SETQRY: +
IF &TYPE EQ JOB OR &TYPE EQ J +
    THEN GOTO SETJOB
WRITE SPECIFY SUPPRESSION STRING:
READ
SET &SYSIN EQ &STR(&SYSDVAL)
PUTFILE SYSIN
GOTO GETJOB
 /*   WRITE NULL TYPE-SUPPRESSION STRING.  IF USER SPECIFIES       */
 /*   JOB NAME, NON-JOB-RELATED RECORDS WILL BE SUPPRESSED         */
 /*   ANYHOW.  IF NOT, GIVE USER EVERYTHING IN RANGE.              */
SETJOB: +
SET &SYSIN EQ +
    &STR(01)
PUTFILE SYSIN
 /*   GET JOBNAME OR PARTIAL JOB NAME IF ANY AND WRITE STRING.     */
GETJOB: +
WRITE ENTER JOB/USER NAME; NAME.... FOR ALL STARTING "NAME"; OR NULL
READ &SYSIN
PUTFILE SYSIN
 /*   PROCESSING RECORDS BUILT FOR SMF BROWSE PROGRAM.  NOW        */
 /*   CLOSE IT'S SYSIN FILE AND SETUP THE APPROPRIATE DATASET.     */
SYSDN: +
CLOSFILE SYSIN
IF &WHEN EQ TODAY OR &WHEN EQ T +
   THEN GOTO SETCUR
SETYES: +
FREE ATTR(A B)
ATTR B BFTEK(A)
ALLOC F(SMFTPE) DA('QT.QT026110') SHR  USING(B) /* YESTERDAY'S DATA */
GOTO SETCALL
 /*   NOW INVOKE THE BROWSE PROGRAM:                               */
SETCALL: +
WRITE
WRITE BE PATIENT - SMF SEARCH IN PROGRESS
WRITE
CALL 'SSU.MVSUG.LOAD($SMFBRWS)' 'NOMSG'
GOTO DONE
 /*   IF NOT DOING TODAY'S DATA, WE ARE DONE.  IF WE ARE DOING     */
 /*   TODAY'S DATA, WE HAVE TO DO SYS1.MANX AND SYS1.MANY ALSO.    */
 /*   SINCE WE CANNOT CONCATENATE ALLOC'S WITH THE VOL PARAMETER   */
 /*   WE WILL INDIVIDUALLY ALLOCATE MANX AND MANY AND INVOKE THE   */
 /*   BROWSE PROGRAM.  (NOTE THAT THE NON-CURRENT MANX/Y DATASET   */
 /*   IS ALWAYS EMPTY AT THIS SHOP ANYHOW SO THE ORDER DOESN'T     */
 /*   MATTER.                                                      */
SETCUR: +
SET &SYSCHAR EQ &SUBSTR(1:1,&SYS)
IF  &SYSCHAR EQ A THEN +
 DO
  /* COPY ALL THE SMF GENERATIONS TO A SINGLE OUTPUT FILE */
  /* IN CHRONOLOGICAL SEQUENCE                            */
  DEL '&SYSPREF..TEMP.ALLSMF.DATA' PURGE
  FREE ATTR(A B)
  ATTR B BFTEK(A)
  ATTR A BLKSIZE(16384)          /* OUTPUT FILE BLOCK SIZE */
  FREE F(SMFTPE MESSAGES SYSUT1 SYSUT2)
  IF &DEBUG EQ DEBUG THEN                                              -
      DO
        ALLOC FI(MESSAGES) DA(*)
      END
  ELSE  ALLOC FI(MESSAGES) DUMMY
  WRITE
  WRITE COPYING ALL SMF DATASETS TO A SINGLE FILE
  WRITE
  ALLOC FI(SYSUT2) DA('&SYSPREF..TEMP.ALLSMF.DATA') SP(100,50) CYL     -
        USING(A) MOD
  CALL 'SSU.MVSUG.LOAD(GDGCOPY)' 'TEMP.SMF.DUMP1'
  CALL 'SSU.MVSUG.LOAD(GDGCOPY)' 'TEMP.SMF.DUMP2'
  CALL 'SSU.MVSUG.LOAD(GDGCOPY)' 'TEMP.SMF.DUMP4'
  FREE F(SYSUT1 SYSUT2 MESSAGES)
  ALLOC FI(SMFTPE) DA('&SYSPREF..TEMP.ALLSMF.DATA') SHR
  WRITE
  WRITE SMF SEARCH IN PROGRESS - BE PATIENT
  WRITE
  CALL  'SSU.MVSUG.LOAD($SMFBRWS)' 'NOMSG'
  DEL '&SYSPREF..TEMP.ALLSMF.DATA' PURGE
  GOTO DONE
 END
ELSE +
  IF &SYSCHAR EQ 2 THEN +
   DO
     FREE F(SMFTPE SYSUT1 SYSUT2 MESSAGES) ATTR(A B)
     ATTR B BFTEK(A)
     ATTR A BLKSIZE(16384)
     DEL '&SYSPREF..TEMP.SMF2.DATA' PURGE
     ALLOC FI(SYSUT2) DA('&SYSPREF..TEMP.SMF2.DATA') SP(50,20)         -
     CYL REL US(A)
     IF &DEBUG EQ DEBUG THEN                                           -
         DO
           ALLOC FI(MESSAGES) DA(*)
         END
     ELSE  ALLOC FI(MESSAGES) DUMMY
     WRITE
     WRITE COPYING ALL SYSTEM 2BBB SMF DATASETS TO A SINGLE FILE
     WRITE
     CALL 'SSU.MVSUG.LOAD(GDGCOPY)' 'TEMP.SMF.DUMP2'
     FREE FI(SYSUT1 SYSUT2 MESSAGES)
     ALLOC FI(SMFTPE) DA('&SYSPREF..TEMP.SMF2.DATA') SHR USING(B)
     WRITE
     WRITE SMF SEARCH IN PROGRESS - BE PATIENT
     WRITE
     CALL 'SSU.MVSUG.LOAD($SMFBRWS)' 'NOMSG'
     DEL '&SYSPREF..TEMP.SMF2.DATA' PURGE
     FREE FI(SMFTPE)
   END
  ELSE +
  IF &SYSCHAR EQ 4 THEN +
   DO
     FREE F(SMFTPE SYSUT1 SYSUT2 MESSAGES) ATTR(A B)
     ATTR B BFTEK(A)
     ATTR A BLKSIZE(16384)
     DEL '&SYSPREF..TEMP.SMF4.DATA' PURGE
     ALLOC FI(SYSUT2) DA('&SYSPREF..TEMP.SMF4.DATA') SP(50,20)         -
     CYL REL US(A)
     IF &DEBUG EQ DEBUG THEN                                           -
         DO
           ALLOC FI(MESSAGES) DA(*)
         END
     ELSE  ALLOC FI(MESSAGES) DUMMY
     WRITE
     WRITE COPYING ALL SYSTEM 4FFF SMF DATASETS TO A SINGLE FILE
     WRITE
     CALL 'SSU.MVSUG.LOAD(GDGCOPY)' 'TEMP.SMF.DUMP4'
     FREE FI(SYSUT1 SYSUT2 MESSAGES)
     ALLOC FI(SMFTPE) DA('&SYSPREF..TEMP.SMF4.DATA') SHR USING(B)
     WRITE
     WRITE SMF SEARCH IN PROGRESS - BE PATIENT
     WRITE
     CALL 'SSU.MVSUG.LOAD($SMFBRWS)' 'NOMSG'
     DEL '&SYSPREF..TEMP.SMF4.DATA' PURGE
     FREE FI(SMFTPE)
   END
  ELSE +
   DO
     FREE F(SMFTPE SYSUT1 SYSUT2 MESSAGES) ATTR(A B)
     ATTR B BFTEK(A)
     ATTR A BLKSIZE(16384)
     DEL '&SYSPREF..TEMP.SMF1.DATA' PURGE
     ALLOC FI(SYSUT2) DA('&SYSPREF..TEMP.SMF1.DATA') SP(50,20)         -
     CYL REL US(A)
     IF &DEBUG EQ DEBUG THEN                                           -
         DO
           ALLOC FI(MESSAGES) DA(*)
         END
     ELSE  ALLOC FI(MESSAGES) DUMMY
     WRITE
     WRITE COPYING ALL SYSTEM 1AAA SMF DATASETS TO A SINGLE FILE
     WRITE
     CALL 'SSU.MVSUG.LOAD(GDGCOPY)' 'TEMP.SMF.DUMP1'
     FREE FI(SYSUT1 SYSUT2 MESSAGES)
     ALLOC FI(SMFTPE) DA('&SYSPREF..TEMP.SMF1.DATA') SHR USING(B)
     WRITE
     WRITE SMF SEARCH IN PROGRESS - BE PATIENT
     WRITE
     CALL 'SSU.MVSUG.LOAD($SMFBRWS)' 'NOMSG'
     DEL '&SYSPREF..TEMP.SMF1.DATA' PURGE
     FREE FI(SMFTPE)
   END
 /*   ALL DONE AT LAST.  FREE FILES; REALLOCATE SYSIN; TERMINATE.  */
DONE: +
FREE F(SMFTPE SYSUT1 SYSUT2 )
FREE F(SYSIN SYSPRINT MESSAGES) ATTR(A B)
IF &OPTION = D THEN RLSE &SYSUID..SMF.DATA
DEL '&SYSPREF..TEMP.SMF1.DATA'
DEL '&SYSPREF..TEMP.SMF2.DATA'
DEL '&SYSPREF..TEMP.SMF4.DATA'
DEL '&SYSPREF..TEMP.ALLSMF.DATA'
ALLOC F(SYSIN) DA(*)
ALLOC FI(SYSPRINT) DA(*)
EXIT QUIT
