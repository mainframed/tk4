PROC 0 DEBUG
/******************************************************************/
/*                                                                */
/* REFER   IPO1.CMDPROC(FINDFAIL)                                 */
/* COMPID  SYSTEMS                                                */
/* DOC     THIS CLIST IS EXECUTED AS AN IPCS SUBCOMMAND TO        */
/*         LOCATE THE FIRST FAILING TCB IN THE DUMP. IF SUCH      */
/*         A TCB IS FOUND THEN THE FOLLOWING IPCS DUMP SYMBOLS    */
/*         ARE SET UP: TCBADDR, ASCBADDR, AND RTM2WA.             */
/*         IT IS INVOKED BY CLIST SAVEDMP.                        */
/*                                                                */
/*  RETURN:      CODE=0 A FAILING TCB WAS FOUND                   */
/*               CODE=8 NOT FOUND                                 */
/*                                                                */
/******************************************************************/
/******************************************************************/
/* INITIALIZATION                                                 */
/******************************************************************/
CONTROL END(ENDO) NOMSG                  /* SET DEFAULT CONTROL   */
IF &DEBUG=DEBUG THEN                     /* IF DEBUG OPTION       */+
  CONTROL SYMLIST CONLIST LIST MSG       /*   SET FULL LIST OPTION*/
WRITE **** FINDFAIL CLIST ENTERED **** TIME=&SYSTIME
/******************************************************************/
/* LOCATE THE ASVT AND INSURE THAT THE ASID IS VALID              */
/******************************************************************/
SET &RC=12                               /* INIT RETURN CODE      */
SET &FIRST=Y                             /* SET FIRST FLAG ON     */
SET &ASID=0                              /* INITIALIZE ASID NUM   */
LIST CVT LEN(16)                         /* CHECK FOR VALID CVT   */
IF LASTCC NE 0 THEN GOTO NOTFND          /* IF NO CVT THEN EXIT   */
LIST 2. HEADER LEN(2)                    /* CHECK FOR VALID HEADER*/
IF LASTCC EQ 0 THEN                      /* IF VALID THEN         */+
  DO
   EVALUATE  2. HEADER LENGTH(2)         /* CURRENT ASID IN DUMP  */
   SET  &ASID=&LASTCC                    /* SAVE ASID NUMBER      */
  ENDO
IF &ASID=0 THEN                          /* CHECK FOR INVALID ASID*/+
  SET &ASID=1                            /* SET DEFAULT TO 1      */
EQUATE ASVTADDR 4C.%+22C% PTR LE(4)      /* ADDRESS OF ASVT       */
COMPARE ADDR(ASVTADDR+200)               /* CHECK ACRONYM         */+
  WITH(VALUE(C'ASVT')) LEN(4)            /*  IN ASVT              */
IF &LASTCC NE 0 THEN                     /* CHECK FOR VALID DATA  */+
  DO
    WRITE ---> ASVT NOT FOUND <--&STR(-)
    GOTO NOTFND                          /* EXIT NO ASVT          */
  ENDO
EVALUATE ASVTADDR+204 LENGTH(4)          /* CONTENTS OF ASVTMAXU  */
SET &ASVTMAXU=&LASTCC                    /* SAVE THE VALUE        */
IF &ASVTMAXU>300 THEN                    /* CHECK FOR VALID DATA  */+
  SET &ASVTMAXU=300                      /* MAX LOOP COUNT IS 300 */
SET &RC=00                               /* INIT RETURN CODE      */
DO WHILE &ASID LE &ASVTMAXU              /* LOOP THRU ASVT        */
/******************************************************************/
/* INSURE THAT THIS MEMORY IS ASSIGNED                            */
/******************************************************************/
  SET &ASVTOFFS=&ASID*4                  /* ASVT OFFSET           */
  SET &MEM=ASID(&ASID)                   /* SET ASID FOR COMMANDS */
  COMPARE ADDR(ASVTADDR+20C+&ASVTOFFS.N) /* CHECK FOR FREE ENTRY  */+
    WITH(VALUE(X'80')) LEN(1)
  IF &LASTCC EQ 0 THEN               /* IF COMPARE WAS EQ THEN      */+
    GOTO ASCBNXT                     /* MEMORY IS NOT ASSIGNED      */
  EQ ASCBADDR ASVTADDR+20C+&ASVTOFFS.N% /* CREATE SYMBOLS FOR ASCB  */+
    &MEM STR(ASCB)                   /*                             */+
    REMARK('ASCB OF FAILING TASK')
  COMPARE ADDR(ASCBADDR+0)               /* CHECK ACRONYM         */+
    WITH(VALUE(C'ASCB')) LEN(4)          /*  IN ASCB              */
  IF LASTCC NE 0 THEN GOTO ASCBNXT
  EVALUATE ASCBADDR+6C% L(4) &MEM    /* ASXB ADDRESS                */
  IF &LASTCC=12 THEN                 /* CHECK IF ASXB IS THERE      */+
    GOTO ASCBNXT                     /* MUST NOT BE AVAILABLE       */
  EQ ASXBADDR ASCBADDR+6C% &MEM STR(ASXB) /* ELSE SET ASXB SYMBOL   */
  SET &TCBCTR=1                      /* COUNT OF TCBS               */
  EVALUATE ASXBADDR+4% LENGTH(4) &MEM /* 1ST TCB ADDRESS            */
  IF &LASTCC=12 THEN                 /* CHECK 1ST TCB               */+
    GOTO ASCBNXT                     /* MUST NOT BE AVAILABLE       */
  COMPARE ADDR(ASXBADDR+0)               /* CHECK ACRONYM         */+
    WITH(VALUE(C'ASXB')) LEN(4)          /*  IN ASCB              */
  IF LASTCC NE 0 THEN GOTO ASCBNXT
  EVALUATE ASXBADDR+4 LENGTH(4) &MEM /* SAVE THE TCB ADDRESS IN A   */
  SET &TCBADDR=&LASTCC               /*   SYMBOLIC VARIABLE         */
  EQ TCBADDR ASXBADDR+4% &MEM STR(TCB) /* CREATE TCB SYMBOL         */+
         REMARK('TCB OF FAILING TASK')
  /******************************************************************/
  /* PROCESS ALL TCBS FOR THIS ADDRESS SPACE                        */
  /******************************************************************/
  SET ABEND=0                        /* SET ABEND FLAG              */
  DO WHILE &TCBADDR^=0               /* LOOP FOR ALL TCBS           */
    COMPARE ADDR(TCBADDR+100)            /* CHECK ACRONYM         */+
      WITH(VALUE(C'TCB ')) LEN(4)        /*  IN TCB               */
    IF LASTCC NE 0 THEN GOTO ASCBNXT
    COMPARE ADDR(TCBADDR+10)         /* CHECK FOR NON-ZERO TCBCMP   */+
      WITH(VALUE(X'00000000')) LEN(4) &MEM /* TCB COMPLETION CODE   */
    IF &LASTCC^=0 THEN               /* IF NON-ZERO THEN            */+
      SET ABEND=1                    /*   FOUND AN ABEND            */
    COMPARE ADDR(TCBADDR+E0)         /* CHECK FOR RTW2WA IN TCB     */+
      WITH(VALUE(X'00000000')) LEN(4) &MEM /*                       */
    IF &LASTCC^=0 THEN               /* IF NON-ZERO THEN            */+
      SET ABEND=&ABEND+2             /*   FOUND AN RTM2WA           */
    IF &ABEND NE 0 THEN              /* IF THIS TCB FAILED          */+
      GOTO TCBFND                    /*   THEN EXIT TCBLOOP         */
    SET &TCBCTR=&TCBCTR+1            /* PLUS 1 TO TCB COUNTER       */
    EVALUATE TCBADDR+74% L(4) &MEM   /* CHECK NEXT TCB ADDRESS      */
    IF &LASTCC=12 THEN               /* IS THERE A NEXT TCB         */+
      GOTO ASCBNXT                   /* MUST NOT BE AVAILABLE       */
    EVALUATE TCBADDR+74 L(4) &MEM    /* SAVE NEXT TCB ADDRESS IN    */
    SET &TCBADDR=&LASTCC             /*   SYMBOLIC VARIABLE         */
    EQ TCBADDR TCBADDR+74% &MEM STR(TCB) /* GO PROCESS NEXT TCB     */+
         REMARK('TCB OF FAILING TASK')
  ENDO                               /* END OF TCB LOOP             */
ASCBNXT: +
  IF &FIRST=Y THEN                   /* IF FIRST TIME THRU THEN     */+
    SET &ASID=1                      /*  RESET TO ASID 1            */
  ELSE                               /* ELSE                        */+
    SET &ASID=&ASID+1                /*  INCREMENT TO NEXT TCB      */
  SET &FIRST=N                       /* RESET FIRST TIME FLAG       */
ENDO                                 /* END OF ASCB LOOP            */
SET &RC=08                               /* INIT RETURN CODE      */
NOTFND: +
CONTROL NOMSG                        /* ENTER HERE WHEN NON FOUND   */
DROPSYM (ASCBADDR,RTM2WA,TCBADDR)    /* DROP RELEVANT SYMBOLS USED  */
GOTO FINDEXIT                        /* EXIT WITH RETURN CODE       */
/********************************************************************/
/* ENTER HERE TO EXIT WHEN A TCB HAS BEEN FOUND                     */
/********************************************************************/
TCBFND: +
    EQUATE RTM2WA TCBADDR+E0% &MEM STR(RTM2WA) LEN(872) +
         REMARK('RTM2 WORK AREA FOR FAILING TASK')
    CONTROL MSG
    LIST (RTM2WA,ASCBADDR,TCBADDR) +
         DIS(MACHINE,STORAGE,REQUEST,REMARK,SYMBOL)
    CONTROL NOMSG
FINDEXIT: +
    WRITE **** FINDFAIL CLIST ENDED. CODE=&RC **** TIME=&SYSTIME
    EXIT CODE(&RC)
