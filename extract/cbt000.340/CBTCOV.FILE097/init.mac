INIT     TITLE 'QUEUE COMMAND - INITIALIZATION ROUTINES'          ONL01
INIT     QSTART ,                  START INIT CSECT ASSEMBLY      ONL01
         GBLB  &QDBC          DBC    OPTION                       UF024
         GBLB  &QONL          ONL    OPTION                       ONL08
         GBLB  &LOCK          LOCKHEED OPTION                        CL
******************************************************************BFG01
* BFG CHANGES:                                                    BFG01
*      (1) BFG01 - IMPLEMENT CKPT ACCESS VIA EXCP CODE FOR SPEED  BFG01
*      (2) ISPF  - IMPLEMENT SUPPORT FOR BROWSE ISPF/PDF INTERF  *ISPF*
*      (3) BFG12 - SAVE OUR NODEID FROM THE CKPT FOR NJE FORMATINGBFG12
*      (4) BFG13 - SUPPORT DIFFERENT SUBSYSTEMS SO THAT THE VALID BFG13
*                  SSVT IS FOUND                                  BFG13
*      (5) BFG17 - USE WEAK EXTERNAL REFERENCE TO SEPERATE ENTRY  BFG17
*                  IN QCOMMON TO DETERMINE IF LINKED. THIS        BFG17
*                  ELIMINATES NEED PULL CODE TO STOP LKED ERRORS. BFG17
*      (6) BFG18 - DETERMINE IF RUNNING UNDER XA                  BFG18
*      (7) BFG26 - SAVE ADDRESSES OF ALL MEMORY ALLOCATED HERE    BFG26
*      (8) BFG27 - SUPPORT IBM INTERFACE TO ISPV V2.3             BFG27
*      (9) BFG28 - SUPPORT ACCESS TO CATALOGED CKPT DATASET       BFG28
*     (10) BFG31 - DETERMINE IF ON XA2.2 OR HIGHER                BFG31
*                - USE DCBD INSTEAD OF IHADCB (WHICH WAS DROPPED) BFG31
******************************************************************BFG01
         USING PSA,R0                                             BFG13
***********************************************************************
*                                                                     *
*   LOAD QCOMMON                                                      *
*                                                                     *
***********************************************************************
*
****
*******  IF YOU WANT TO CHANGE THE NAME FOR THE COMMON AREA,
*******            THIS IS THE ONLY REFERENCE TO IT
****
*
         AIF   (&QONL).ONL08                                      ONL08
         WXTRN QCMN                                               BFG17
         L     R11,=V(QCMN)    ADDR OF QCOMMON                    BFG17
         LTR   R11,R11        SEE IF LINKED IN                    UF002
         BNZ   LOADED         YES, CONTINUE                       UF002
.ONL08   ANOP  ,                                                  ONL08
         B     LOADIT              GO AROUND CONSTANT             BFG26
         SPACE 1                                                  UF002
         ENTRY QCNMNAME            EXTERNALIZE IT FOR MODULE QUEUEBFG26
QCNMNAME DC    CL8'QUEUECMN'       THE NAME OF THE MODULE         BFG26
         SPACE 1                                                  UF002
LOADIT   DS    0H                                                 BFG26
         LOAD  EPLOC=QCNMNAME QUEUE COMMON AREA                   BFG26
         LR    R11,R0         ADDR OF QCOMMON
         OI    QFLAG1,QFLG1LOD     MARK LOAD MACRO ISSUED         BFG26
         SPACE 1                                                  UF002
LOADED   DS    0H                                                 UF002
         L     R1,4(R13)      PREVIOUS SAVE AREA
         ST    R11,64(R1)     UPDATE R11 IN PREVIOUS SAVE AREA
         ST    R1,QFRSTSA     STORE ADDR OF FIRST SAVEAREA IN QCOMMON
         USING QDAIR,R10      BASE REG FOR DAIR WORK
         L     R10,QVDAIR     LOAD BASE REG
         USING QCKPT,R9       BASE REG FOR CKPT WORK
         L     R9,QVCKPT      LOAD BASE REG
         USING QDISPLAY,R8    BASE REG FOR DISPLAY WORK
         L     R8,QVDSPL      LOAD BASE REG
         SPACE 1
         L     R1,16          GET CVT ADDRESS
         USING CVT,R1
         TM    CVTDCB,X'80'   EXECUTING XA MODE
         BNO   NOTXA          NO, BR
         OI    QFLAG1,QFLG1XA SET XA MODE FLAG
         SL    R1,=A(32)       POINT AT FIELD CVTPRODI            BFG31
         CLC   0(7,R1),=C'JBB2220' Q. ARE WE XA 2.2               BFG31
         BL    NOTXA          A. IF LESS THEN SKIP FLAG           BFG31
         OI    QFLAG2,QFLG2X22 INDICATE XA 2.2 OR HIGHER          BFG31
NOTXA    DS    0H
         DROP  R1
         SPACE 1
         USING WORK,R13       ADDRESSING FOR SAVE/WORK AREA       UF024
******************************************************************ISPF*
*                                                                *ISPF*
*  IF CALLED VIA THE ISRQ MODULE (FROM ISPF) THE FOLLOWING       *ISPF*
*     CALLING CONVENTIONS WILL HOLD:                             *ISPF*
*       R2 (ORIG R1)  =  ADDRESS OF PARM LIST (BUT NON-CPPL FMT) *ISPF*
*                           +0 = F'-1'   TO DISTINGUISH FROM CPPL*ISPF*
*                           +4 = TLD ADDRESS                     *ISPF*
*                           +8 = ADDRESS OF 'ISPLINK'            *ISPF*
*                           +12= ADDRESS OF CPPL                 *ISPF*
******************************************************************ISPF*
         CLC   =F'-1',0(R2)   DID CALL COME FROM 'ISRQ'          *ISPF*
         BNE   VLDTSO         IF NOT THEN NORMAL SYSTEM CALL     *ISPF*
         OI    QFLAG1,QFLG1ISP SET CALLED FROM ISPF FLAG         *ISPF*
         LA    R3,4(,R2)      POINT AT "REAL" PARMS FROM ISRQ    *ISPF*
         L     R2,QVBROWS     GET ADDRESS OF WORK AREA           *ISPF*
         MVC   BRWEPARM-QBROWSE(4,R2),0(R3) SAVE ADDR OF TLD     *ISPF*
         MVC   ISPLNK,4(R3)   SAVE ADDR OF ISPLINK PROGRAM       *ISPF*
         L     R15,ISPLNK          GET ADDRESS                    BFG27
         CALL  (15),(VCOPY,V7,VLEN7,QPFIND,VMOVE),VL,             BFG27X
               MF=(E,VCALLST)                                     BFG27
         L     R2,8(R3)       GET ADDRESS OF CPPL                *ISPF*
         L     R1,CPPLPSCB-CPPL(R2) GET PSCB ADDRESS             *ISPF*
         LTR   R15,R15             Q. IS VAR DEFINED AND NO TRUNC BFG27
         BZ    SP23A1              A. YES, SO CHECK VERSION       BFG27
         CH    R15,=H'16'          Q. DID TRUNC OCCUR             BFG27
         BNE   Q10ISPF1            A. NO SO NOT FOUND             BFG27
SP23A1   CLC   QPFIND,=CL8'ISPF 2.3' Q. IS ENVIR 2.3 OR HIGHER    BFG27
         BL    Q10ISPF1            A. NO IS PRIOR TO VERSION 2.3  BFG27
         OI    QFLAG2,QFLG2I23     INDICATE VERSION 2.3 OR HIGHER BFG27
         B     Q10ISPF1       CONTINUE                           *IPSF*
VLDTSO   DS    0H                                                *ISPF*
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   VERIFY A TSO ENVIRONMENT, FIND THE ADDRRESS OF THE PROTECTED  ONL02
*   STEP CONTROL BLOCK, AND VERIFY SOME FIELDS IN THE COMMAND     ONL02
*   PROCESSOR PARAMETER LIST.                                     ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         LA    R3,QDWORK           ADDR FOR EXTRACT ANSWER AREA   ONL02
         LA    R4,QAEXTLST         ADDR OF EXTRACT PARAMETER LIST ONL02
         EXTRACT (R3),FIELDS=(TSO,PSB),MF=(E,(R4))  EXTRACT INFO  ONL02
         SPACE 1                                                  ONL02
         L     R1,QDWORK           PICKUP ADDR OF TSO INDICATOR   ONL02
         TM    0(R1),X'80'         IS THIS A TSO ADDRESS SPACE?   ONL02
         BZ    QAABORT             IF NOT, ABORT                  ONL02
         SPACE 1                                                  ONL02
         L     R1,QDWORK+4         PICKUP ADDR OF PSCB            ONL02
         LTR   R1,R1               IS PSCB AVAILABLE?             ONL02
         BZ    QAABORT             IF NOT, ABORT                  ONL02
         SPACE 1                                                  ONL02
         USING PSCB,R1             NOTE PSCB ADDRESSABILITY       ONL02
         USING CPPL,R2             NOTE CPPL ADDRESSABILITY       ONL02
         SPACE 1                                                  ONL02
         CLM   R1,15,CPPLPSCB      VERIFY PSCB ADDR IN CPPL       ONL02
         BNE   QAABORT             ABORT IF ADDR'S DON'T MATCH    ONL02
         CLC   PSCBUPT,CPPLUPT     VERIFY UPT ADDR IN CPPL        ONL02
         BNE   QAABORT             ABORT IF ADDR'S DON'T MATCH    ONL02
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   GET THE USERID AND ITS LENGTH AND SAVE THEM IN QCOMMON        ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
Q10ISPF1 DS    0H                                                *ISPF*
         MVC   QLOGON(L'PSCBUSER),PSCBUSER  SET USERID IN QCOMMON ONL02
         SLR   R0,R0               CLEAR FOR INSERT               ONL02
         IC    R0,PSCBUSRL         PICKUP LENGTH OF USERID        ONL02
         ST    R0,QLOGONLN         SET LENGTH IN QCOMMON          ONL02
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   CHECK PSCB FOR OPERATOR AUTHORITY                             ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         TM    PSCBATR1,PSCBCTRL   DOES USER HAVE OPER AUTHORITY? ONL02
         BZ    SKIPOPER            SKIP IF NO                     ONL02
         OI    QAFLAGS,QAFXOPER    SHOW USER HAS OPER AUTHORITY   ONL02
SKIPOPER DS    0H                                                 ONL02
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   FILL IN DAIR PARAMETER LIST FROM THE CPPL                     ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         MVC   DAPLUPT,CPPLUPT     USER PROFILE TABLE             ONL02
         MVC   DAPLECT,CPPLECT     ENVIRONMENT CNTL TABLE         ONL02
         MVC   DAPLPSCB,CPPLPSCB   PROTECTED STORAGE CNTL BLK     ONL02
         DROP  R1                                                 CL006
         SPACE 2                                                  ONL02
******************************************************************BFG13
*                                                                 BFG13
*   DEFAULT JES SUBSYSTEM ID TO THE ONE THAT STARTED US           BFG13
*                                                                 BFG13
******************************************************************BFG13
         SPACE 1                                                  BFG13
         L     R1,PSATOLD          GET OUR TCB                    BFG13
         L     R1,TCBJSCB-TCB(R1)  POINT AT OUR JSCB              BFG13
         L     R1,JSCBACT-IEZJSCB(R1) AND AT THE ACTIVE JSCB      BFG13
         L     R1,JSCBSSIB-IEZJSCB(R1) NOW AT DEFAULT SSIB        BFG13
         MVC   QSUBSYS,SSIBSSNM-SSIB(R1) SET SUBSYS ID            BFG13
         TM    QFLAG1,QFLG1ISP ARE WE IN ISPF???                 *ISPF*
         BO    Q10ISPF2            IF ISPF THEN SKIP DBC         *ISPF*
         SPACE 2                                                  BFG13
         AIF   (NOT &QDBC).NODBC1 SKIP IF DBC NOT INSTALLED       UF024
******************************************************************UF024
*                                                                 UF024
*   IF USER HAS OPER AUTHORITY, ESTABLISH ESTAE ENVIRONMENT       UF024
*                                                                 UF024
******************************************************************UF024
         SPACE 1                                                  ONL02
         TM    QAFLAGS,QAFXOPER    DOES USER HAVE OPER AUTHORITY? ONL02
         BZ    NOTOPER             SKIP IF NO                     ONL02
         SPACE 1                                                  ONL02
         LOAD  EP=DBC,ERRET=NOTOPER  LOAD ESTAE ROUTINE           UF024
         LR    R3,R0          ADDR OF ROUTINE                     UF024
         MVC   WORKAREA(DBCMFLN),DBCMFL GET ESTAE PARM LIST       UF024
         ESTAE (R3),MF=(E,WORKAREA)  CREATE THE ESTAE             UF024
         OI    QFLAG1,QFLG1DBC  INDICATE NEED TO DELETE AT TERM   UF024
         B     NOTOPER        CONTINUE PROCESSING                 UF024
DBCMFL   ESTAE ,MF=L          LIST FORM OF ESTAE                  UF024
DBCMFLN  EQU   *-DBCMFL       LENGTH OF LIST FORM ESTAE           UF024
NOTOPER  DS    0H                                                 ONL02
.NODBC1  ANOP                                                     UF024
Q10ISPF2 DS    0H                                                *ISPF*
         EJECT                                                    CL006
***********************************************************************
*                                                                     *
*        SCAN COMMAND BUFFER FOR KNOWN KEYWORDS.  IF FOUND TAKE       *
*        APPROPRIATE ACTION.  IF NONE FOUND OR RECOGNIZED,            *
*        THEN PASS TO OUR PARSE ROUTINE.                              *
*                                                                     *
***********************************************************************
         SPACE 2
         MVC   PPLUPT(12),DAPLUPT  COPY UPT, ECT, ECB             CL006
         MVC   PPLPCL,=A(PCLSTART) ADDR OF POINTER CNTL LIST      CL006
         MVC   PPLCBUF,CPPLCBUF    ADDR OF COMMAND BUFFER         CL006
         SPACE 2                                                  ONL02
         CALLTSSR EP=IKJPARS,MF=(E,PPLUPT) GO PARSE BUFFER        CL006
         SPACE 2                                                  CL006
         LTR   R15,R15             CONTINUE IF PARSE              CL006
         BNZ   BADPARM              WENT AWRY               CL006 BFG13
         SPACE 1                                                  CL006
         L     R7,PARSBACK         PARSE DESCRIPTER LIST BASE     CL006
         SPACE 1                                                  CL006
         USING IKJPARMD,R7         PARSE ADDRESSABILITY           CL006
         SPACE 1                                                  CL006
         CLC   PSTRING,=F'0'       SKIP IF THERE HAS BEEN         CL006
         BE    NOSTRING             NO QUEUE SUB-COMMAND GIVEN    CL006
         MVC   QDREPLY,QBLANK      INITIALIZE REPLY AREA          CL006
         L     R6,PSTRING          ADDR OF STRING                 CL006
         CLI   0(R6),C'*'          IF A * USE ASSEMBLED DEFAULT   BFG15
         BE    NOSTRING            SKIP MOVE IF *                 BFG15
         MVC   QDREPLY,QBLANK      INITIALIZE REPLY AREA          BFG15
         LH    R1,PSTRING+4        LENGTH OF STRING               CL006
         STH   R1,QDRLNG           SAVE LENGTH OF INPUT           BFG15
         BCTR  R1,0                MACHINE LENGTH                 CL006
         EX    R1,MVCSTRIN         COPY STRING TO REPLY AREA      CL006
         SPACE 2                                                  CL006
NOSTRING CLC   PPREFIX,=H'0'       SKIP IF PREFIX IS NOT          CL006
         BE    NOPREF               PROVIDED                      CL006
         ICM   R6,15,XPREFIX       GET ADDR OF PREFIX(IF ANY)     BFG15
         BZ    NOPREF              SKIP MOVE IF NO DATA           BFG15
         MVC   QPREFIX,=CL8' '     BLANK ASSEMBLED VERSION        CL006
         LH    R1,XPREFIX+4        LENGTH OF PREFIX               CL006
         BCTR  R1,0                MACHINE LENGTH OF PREFIX       CL006
         EX    R1,MVCPREF          COPY PREFIX TO QCOMMON         CL006
         SPACE 2                                                  CL006
NOPREF   CLC   PUNIT,=H'0'         SKIP IF NO UNIT                CL006
         BE    NOUNIT               PROVIDED                      CL006
         ICM   R6,15,XUNIT         GET ADDR OF UNIT  (IF ANY)     BFG15
         BZ    NOUNIT              SKIP MOVE IF NO DATA           BFG15
         MVC   DA08UNIT,=CL8' '    BLANK ASSEMBLED VERSION        CL006
         L     R6,XUNIT            ADDRESS OF UNIT STRING         CL006
         LH    R1,XUNIT+4          LENGTH OF UNIT STRING          CL006
         BCTR  R1,0                MACHINE LENGTH                 CL006
         EX    R1,MVCUNIT          COPY UNIT TO QCOMMON           CL006
         SPACE 2                                                  CL006
NOUNIT   CLC   PVOL,=H'0'          SKIP IF NO VOLUME              CL006
         BE    NOVOL                SERIAL PROVIDED               CL006
         ICM   R6,15,XVOL          GET ADDR OF VOL   (IF ANY)     BFG15
         BZ    NOVOL               SKIP MOVE IF NO DATA           BFG15
         MVC   QCKPTVL,=CL8' '     BLANK ASSEMBLED VERSION        BFG13
         LH    R1,XVOL+4           LENGTH OF VOL STRING           CL006
         BCTR  R1,0                MACHINE LENGTH                 CL006
         EX    R1,MVCVOL           COPY VOLSER TO QCOMMON         CL006
         SPACE 2                                                  CL006
NOVOL    DS    0H                                                 BFG13
         CLC   PSUBSYS,=H'0'       WAS SUBSYS SPECIFIED           BFG13
         BE    NOSUBSYS            NO THEN CONTINUE               BFG13
         ICM   R6,15,XSUBSYS       GET ADDR OF SUBSYS(IF ANY)     BFG15
         BZ    NOSUBSYS            SKIP MOVE IF NO DATA           BFG15
         MVC   QSUBSYS,=CL4' '     BLANK OUT NAME                 BFG13
         LH    R1,XSUBSYS+4        GET LENGTH                     BFG13
         BCTR  R1,0                                               BFG13
         EX    R1,MVCSUBSY         MOVE IN SUBSYS CODE            BFG13
         SPACE 2                                                  BFG13
NOSUBSYS DS    0H                                                 BFG13
         IKJRLSA (R7)              FREE PARSE DESCRIPTOR LIST     BFG13
BADPARM  DS    0H                                                 BFG13
         B     SKIP                                               CL006
         SPACE 1                                                  CL006
MVCSUBSY MVC   QSUBSYS(*-*),0(R6)  *** EXECUTE ONLY ***           BFG13
MVCVOL   MVC   QCKPTVL(*-*),0(R6)  *** EXECUTE ONLY ***           BFG13
MVCUNIT  MVC   DA08UNIT(*-*),0(R6) *** EXECUTE ONLY ***           CL006
MVCPREF  MVC   QPREFIX(*-*),0(R6)  *** EXECUTE ONLY ***           CL006
MVCSTRIN MVC   QDREPLY(*-*),0(R6)  *** EXECUTE ONLY ***           CL006
         DROP  R7                                                 CL006
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   OBTAIN BLOCK ADDR TABLE FOR LISTDS                                *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
SKIP     L     R0,=A(65536*4) GET LENGTH TO ALLOCATE              BFG26
         ST    R0,QGETL1      SAVE LENGTH OF GETMAIN              BFG26
         GETMAIN R,LV=(0)                                         BFG26
         ST    R1,QGETA1      SAVE START ADDR OF GETMAIN
         ST    R1,QCSTART     STORE STARTING ADDR OF TABLE
         A     R1,=A(65536*4) END OF TABLE
         ST    R1,QCEND
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   PERFORM AUTHORIZATION CHECK FOR QUEUE COMMAND START-UP        ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         QAUTHCK QASTART           PERFORM START-UP AUTHORIZATION ONL02
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   ALLOCATE HASPCKPT                                                 *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         MVC   DA08SER,QCKPTVL     SET CHECKPOINT VOLSER          BFG13
         MVC   DA08DDN,=CL8' '     GET DDNAME FOR ALLOCATE       *ISPF*
         GETMAIN R,LV=2+44         WORK AREA                      CL006
         ST    R1,QGETA4           SAVE ADDRESS FOR FREE          BFG26
         MVC   QGETL4(4),=A(44+2)  SET LENGTH FOR FREE            BFG26
         ST    R1,DA08PDSN         SET POINTER TO DSNAME          CL006
         LA    R1,DSNCKPT          ADDR OF CHECKPOINT DSN SUFFIX  CL006
         BAL   R14,BUILDSN         GO BUILD DATA SET NAME         CL006
         MVI   DAIRFLAG,X'08' REQUEST ALLOCATE FUNCTION
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
         MVC   HASPCKPT+40(8),DA08DDN SET DDNAME IN DCB          *ISPF*
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   PERFORM PRE-OPEN CHECKPOINT/SPOOL AUTHORIZATION CHECK         ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         QAUTHCK QABEFOPN          PRE-OPEN CKPT/SPOOL AUTH CHECK ONL02
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   OPEN HASPCKPT, READ FIRST BLOCK OF CHECKPOINT                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         OPEN  MF=(E,HOCKPT)  OPEN HASPCKPT
*                                                                 BFG28
**       SET CKECKPOINT DS VOLSER IN CASE IT WAS CATALOGED        BFG28
*                                                                 BFG28
         L     R1,DCBDEBAD-IHADCB+HASPCKPT LOAD DEB ADDRESS       BFG28
         L     R1,DEBUCBAD-DEBDASD+DEBBASND-DEBBASIC(R1) UCB ADDR BFG28
         MVC   QCKPTVL,UCBVOLI-UCBCMSEG(R1) MOVE IN VOLSER        BFG28
*                                                                 BFG01
*  OK, NOW CREATE THE CHANNEL PROGRAM                             BFG01
*                                                                 BFG01
OPENOK   EQU   *                                                  BFG01
         L     R1,QCSTART              LOAD ADDRESS OF CCW        BFG01
         ST    R1,HASPIOB+IOBSTART-IOBDSECT SAVE CHANNEL PROGRAM ABFG01
         MVC   0(8,R1),READCCW         INSERT READ CCW FOR ONE BLOBFG01
         ST    R1,0(R1)                POINT I/O BUFFER TO OVERLAYBFG01
         MVI   0(R1),X'16'             MOVE IN COMMAND CODE       BFG01
         LA    R1,8(R1)                POINT TO NEXT AREA         BFG01
         MVC   0(8,R1),READCCW         READ 1ST RECORD            BFG01
         ST    R1,0(R1)                SAVE IT                    BFG01
         MVI   0(R1),X'1E'             MOVE IN COMMAND CODE       BFG01
         LA    R1,8(R1)                POINT TO NEXT AREA         BFG01
         MVC   0(8,R1),READCCW         READ 2ND RECORD            BFG01
         ST    R1,0(R1)                SAVE IT                    BFG01
         MVI   0(R1),X'1E'             MOVE IN COMMAND CODE       BFG01
         LA    R1,8(R1)                POINT TO NEXT AREA         BFG01
         MVC   0(8,R1),READCCW         READ THIRD RECORD          BFG01
         MVC   0(4,R1),QCSTART         SAVE IT                    BFG01
         MVI   0(R1),X'06'             MOVE IN COMMAND CODE       BFG01
         NI    4(R1),X'FF'-X'40'       TURN OFF COMMAND CHAIN BIT BFG01
READ     EQU   *                                                  BFG01
*                                                                 BFG01
*  OK, NOW LETS ISSUE AN EXCP TO GET A RECORD                     BFG01
*                                                                 BFG01
         STM   R9,R13,12(R13)          SAVE REGISTERS FOR A SECONDBFG01
         LR    R3,R13                  SAVE SAVE ADDR             BFG01
         L     R0,=X'00000300'         POINT TO THE THIRD BLOCK   BFG01
         L     R1,DCBDEBAD-IHADCB+HASPCKPT LOAD DEB ADDRESS       BFG01
         LA    R2,HASPIOB+IOBXTENT-IOBDSECT SET ADDR FOR MBBCCHHHRBFG01
         L     R15,CVTPTR                                         BFG01
         L     R15,CVTPCNVT-CVT(R15)   LOAD ADDR OF CONVERT ROUTINBFG01
         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR   BFG01
         LM    R9,R13,12(R3)           RESTORE GETS               BFG01
         LTR   R15,R15                 TEST IF EXT VIOLATED (RC=4)BFG01
         BZ    EXCPIT                  NO, ISSUE EXCP             BFG01
         ABEND 1                                                  BFG01
*                                                                 BFG01
* ZERO ECB AND START CHANNEL PROGRAM                              BFG01
*                                                                 BFG01
EXCPIT   EQU   *                                                  BFG01
         XC    HASPECB,HASPECB         CLEAR THE ECB              BFG01
         EXCP  HASPIOB                 ISSUE THE EXCP             BFG01
         WAIT  ECB=HASPECB             WAIT FOR COMPLETION        BFG01
         CLI   HASPECB,X'7F'           TEST COMPLETION CODE       BFG01
         BE    EXCPOK                  EVERYTHING OK              BFG01
         ABEND 2,DUMP                                             BFG01
EXCPOK   EQU   *                                                  BFG01
         L     R2,QCSTART     LOAD BASE ADDR                      BFG01
         USING $SAVEBEG,R2    BASE REG FOR CHECKPOINT
         CLC   =C'JES2',$HASPID    MAKE SURE IS VALID HCT         UF046
         BE    HCTOK               YES, CONTINUE                  UF046
         TPUT  MESSAGE3,L'MESSAGE3,EDIT,MF=(E,QTPUT) TELL USER    UF046
         ABEND 90,DUMP             ABORT                          UF046
HCTOK    DS    0H                                                 UF046
         MVC   QCNODE,$NODEID      SAVE OUR NODEID                BFG12
***********************************************************************
*                                                                     *
*   INITIALIZE SYSTEM ID'S FROM CHECKPOINT SHARED Q CONTROL ELEMENTS  *
*      - JOHN GRADY SULLIVAN - LOMA LINDA UNIVERSITY MEDICAL CENTER   *
*                                                                     *
***********************************************************************
         LH    R3,$QSEMAX     GET MAX # OF DEFINED SYSTEMS    /* JGS */
         LA    R4,QSYSID+8    => QCOMMON SYSTEM ENTRY - SID(1)/* JGS */
         LA    R5,$SAVEEND    => QSE'S IN CHECKPOINT RECORD   /* JGS */
         USING QSE,R5         ADDRESSABILITY TO QSE'S         /* JGS */
SIDLOOP  DS    0H                                             /* JGS */
         MVC   0(4,R4),QSESID SYSTEM ID TO QCOMMON            /* JGS */
         MVC   4(4,R4),QBLANK BLANK NEXT 4 BYTES              /* JGS */
         LA    R4,8(,R4)      => NEXT ENTRY IN QCOMMON        /* JGS */
         TM    QSESTAT,QSELAST   IS THIS THE LAST QSE ?       /* JGS */
         BO    SIDLOOPE       BIT=1 => YES, LAST, SO BRANCH   /* JGS */
         LA    R5,QSELEN(,R5) => NEXT QSE                     /* JGS */
         BCT   R3,SIDLOOP     LOOP FOR THE NUMBER OF SYSTEMS  /* JGS */
SIDLOOPE DS    0H                                             /* JGS */
         DROP  R5                                             /* JGS */
***********************************************************************
*                                                                     *
*   COMPUTE SIZE OF DAS AREA ON CHECKPOINT                            *
*                                                                     *
***********************************************************************
         LH    R15,$SPOLNUM        NUMBER OF SPOOL VOLUMES
         MH    R15,=Y(DASSIZ)      TIME SIZE OF EACH DAS
         LA    R15,BFPLEN(,R15)    ADD BUFFER PREFIX
         LA    R15,4095(,R15)      NUMBER OF CHECKPOINT
         SRL   R15,12               RECORDS
         ST    R15,QCTDASL         SAVE NR OF BLOCKS FOR DAS
         L     R5,$NUMTG      NUMBER OF TRACK GROUPS PER VOLUME   UF020
         SRL   R5,3           DIVIDE BY 8                         UF020
         LR    R1,R5          SAVE LENGTH OF TRACK GROUP MAP
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF TRACK GROUP MAPS ON CKPT                        *
*                                                                     *
***********************************************************************
         AIF   (NOT &LOCK).NOTLOCK                                   CL
         MH    R1,=H'3'            NUMBER OF BYTES * 3               CL
         AGO   .LOCK                                                 CL
.NOTLOCK SLL   R1,1                NUMBER OF BYTES * 2            UF046
.LOCK    LA    R1,BFPLEN(,R1)      ADD BUFFER PREFIX                 CL
         LA    R1,4095(,R1)        PREPARE TO ROUND
         SRL   R1,12               DIVIDE BY 4K                   UF046
         STH   R1,QCTGML           NUMBER OF BLOCKS FOR TG MAPS   UF046
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JIX BLOCKS ON CKPT                              *
*                                                                     *
***********************************************************************
         LH    R5,$NUMJBNO    NUMBER OF JOB NUMBERS               UF020
         LA    R5,1(,R5)       PLUS 1 FOR HEADER                  UF020
         SLL   R5,1           TIMES LENGTH OF 2                   UF020
         LA    R5,BFPLEN(,R5) ADD BUFFER PREFIX                      CL
         LA    R5,4095(R5)    PREPARE TO ROUND                    UF020
         SRL   R5,12          DIVIDE BY 4096                      UF020
         STH   R5,QCJIXL      NUMBER OF BLOCKS FOR JIX            UF020
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JQE BLOCKS ON CKPT                              *
*                                                                     *
***********************************************************************
         LH    R6,$MAXJOBS    NUMBER OF JQES
         LA    R6,1(,R6)       PLUS 1 FOR EYE-CATCHER
         MH    R6,$JQELEN      MULTIPLY BY LENGTH OF JQE               *
                                   AS SPECIFIED IN CKPT (INCLUDES      *
                                      SPOOL MASK LENGTH )
         LA    R6,BFPLEN(,R6) ADD BUFFER PREFIX
         LA    R6,4095(R6)    PREPARE TO ROUND
         SRL   R6,12          DIVIDE BY 4096
         STH   R6,QCJQTL      NUMBER OF BLOCKS FOR JQES
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF PST BLOCKS IN CKPT                              *
*                                                                     *
***********************************************************************
         LH    R15,$NUMJOES        NUMBER OF JOES
         LA    R15,BFPLEN(,R15)    ADD BUFFER PREFIX
         LA    R15,4095(,R15)      PREPARE TO ROUND
         SRL   R15,12              NUMBER OF 4K BLOCKS
         ST    R15,QCPSTL          SAVE NUMBER OF BLOCKS
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JOT BLOCKS IN CKPT                              *
*                                                                     *
***********************************************************************
         LH    R3,$NUMJOES    NUMBER OF JOES
         LA    R3,NJOTPRFX(,R3) ADJUSTED LENGTH OF JOT PREFIX
         MH    R3,=AL2(JOESIZE) MULTIPLY BY LENGTH OF JOE
         LA    R3,BFPLEN(,R3) ADD BUFFER PREFIX
         LA    R3,4095(R3) PREPARE TO ROUND
         SRL   R3,12          DIVIDE BY 4096
         STH   R3,QCJOTL      NUMBER OF BLOCKS FOR JOT
***********************************************************************
*                                                                     *
*   COMPUTE TOTAL LENGTH OF QSES                                      *
*                                                                     *
***********************************************************************
         LA    R4,QSELEN      QSE LENGTH
         MH    R4,$QSEMAX     MULTIPLY LENGTH TIMES NUMBER OF QSES
***********************************************************************
*                                                                     *
*   COMPUTE HASPACE BUFFER SIZE                                       *
*                                                                     *
***********************************************************************
         LH    R5,$BUFSIZE    BLKSIZE FOR HASPACE
         STH   R5,HASPACE+62  STORE IN DCB
         STH   R5,HDECB2+6    STORE IN DECB
         LA    R5,63(R5)      PREPARE TO ROUND
         N     R5,=F'-64'     ROUND TO 64 BYTE BOUNDARY
***********************************************************************
*                                                                     *
*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *
*                                                                     *
***********************************************************************
         LR    R14,R5         HASPACE BUFFER SIZE
         MH    R14,=H'3'      3 BUFFERS
         LA    R1,1(R6,R3)    NUMBER OF BLOCKS IN CKPT DS
         AH    R1,QCJIXL      ADD NUMBER OF JIX BLOCKS            UF020
         AH    R1,QCTGML           ADD NUMBER OF TGM BLOCKS       UF046
         A     R1,QCTDASL          ADD NUMBER OF DAS BLOCKS
         A     R1,QCPSTL           ADD NUMBER OF PST BLOCKS
         ST    R1,QCJOTL      STORE RECORD COUNT
         SLL   R1,12          MULTIPLY BY 4096
         LA    R0,256(R1,R14) ADD CKPT BUFFERS, HASPACE BUFFERS, SLOP
         L     R1,QCJOTL      LOAD NUMBER OF RECORDS AGAIN        BFG01
         SLL   R1,3           MULTIPLY BY 8 FOR CCW'S             BFG01
         LA    R1,24(R1)      ROOM FOR THREE MORE CCW'S           BFG01
         AR    R0,R1                                              BFG01
         ST    R0,QGETL2      SAVE LENGTH OF GETMAIN AREA
         GETMAIN R,LV=(0)     OBTAIN BUFFERS
         ST    R1,QGETA2      SAVE ADDRESS OF GETMAIN AREA
         ST    R1,QCCWS       SAVE ADDR OF FIRST CCW              BFG01
         L     R15,QCJOTL     LOAD NUMBER OF RECORDS IN CKPT      BFG01
         SLL   R15,3          MULTIPLY BY 8                       BFG01
         AR    R1,R15         BUMP UP POINTER                     BFG01
         LA    R1,24(R1)      AND BUMP PAST FIRST THREE           BFG01
         ST    R1,QCJQTL      BUFFER FOR FIRST CKPT REC
         LR    R14,R1              COMPUTE ADDR OF JQE EXTENSION
         LA    R14,$SAVELEN(,R14)  ACCOUNT FOR CHECKPOINTED HCT
         ALR   R14,R4              ACCOUNT FOR QSE'S
         ST    R14,QCJQEXA         SAVE ADDR OF JQE EXTENSION
         AH    R1,=H'4096'    INCREMENT
         LA    R0,BFPLEN(,R1) ADD BUFFER PREFIX
         ST    R0,QCTDASA          BUFFER FOR DAS BLOCKS
         L     R15,QCTDASL         NUMBER OF DAS BLOCKS
         SLL   R15,12              TIME 4096
         AR    R1,R15              INCREMENT
         LA    R0,BFPLEN(,R1) ADD BUFFER PREFIX
         ST    R0,QCTGMA           BUFFER FOR TGM BLOCKS          UF046
         LH    R15,QCTGML          NUMBER OF TGM BLOCKS           UF046
         SLL   R15,12              TIMES 4096                     UF046
         AR    R1,R15              INDREMENT                      UF046
         LA    R0,BFPLEN(,R1) ADD BUFFER PREFIX                      CL
         ST    R0,QCJIXA      BUFFER FOR JIX BLOCKS               UF020
         LH    R15,QCJIXL     NUMBER OF JIX BLOCKS                UF020
         SLL   R15,12         TIMES 4096                          UF020
         AR    R1,R15         INCREMENT                           UF020
         LA    R0,BFPLEN(,R1) ADD BUFFER PREFIX                      CL
         ST    R0,QCJQTA      BUFFER FOR JQE BLOCKS
         SLL   R6,12          MULTIPLY BY 4096
         AR    R1,R6          INCREMENT
         LA    R0,BFPLEN(,R1) ADD BUFFER PREFIX                      CL
         ST    R0,QCPSTA           BUFFER OF PST BLOCKS
         L     R15,QCPSTL          NUMBER OF PST BLOCKS
         SLL   R15,12              MULTIPLY BY 4096
         AR    R1,R15              ADDR OF JOE BLOCKS
         LA    R0,BFPLEN(,R1) ADD BUFFER PREFIX
         ST    R0,QCJOTA      BUFFER FOR JOE BLOCKS
         SLL   R3,12          MULTIPLY BY 4096
         AR    R1,R3          INCREMENT
         ST    R1,QCJCTA      BUFFER FOR JCT
         AR    R1,R5          INCREMENT
         ST    R1,QCIOTA      BUFFER FOR IOT
         AR    R1,R5          INCREMENT
         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS
         SPACE 1                                                  ONL16
         L     R1,QCJCTA           ADDR OF JCT BUFFER             ONL16
         SL    R1,=A(JCTSTART-JCT)  ADJUST FOR BUFFER PREFIX      ONL16
         ST    R1,QCJCTA           SAVE ADJUSTED JCT POINTER      ONL16
         SPACE 1                                                  ONL16
         LA    R1,$JQHEADS+$JQHEADL-$SAVEBEG OFFSET 1ST JQE HEAD  UF020
         A     R1,QCJQTL      BASE OF FIRST CKPT REC
         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER
******************************************************************BFG01
*                                                                 BFG01
*   CREATE CCWS                                                   BFG01
*                                                                 BFG01
******************************************************************BFG01
         L     R1,QCCWS                LOAD ADDRESS OF CCW        BFG01
         L     R2,QCJQTL               LOAD ADDR OF FIRST BUFFER  BFG01
         L     R3,QCJOTL               LOAD NUMBER OF BUFFERS     BFG01
         ST    R1,HASPIOB+IOBSTART-IOBDSECT SAVE CHANNEL PROGRAM ABFG01
         MVC   0(8,R1),=X'1600000070001000'   READ R0             BFG01
         MVC   8(8,R1),=X'1E00000070001000'   READ R1             BFG01
         MVC   16(8,R1),=X'1E00000070001000'  READ R2             BFG01
         LA    R1,24(R1)                                          BFG01
CCWLOOP  EQU   *                                                  BFG01
         MVC   0(8,R1),READCCW         INSERT READ CCW FOR ONE BLOBFG01
         ST    R2,0(R1)                POINT I/O BUFFER TO OVERLAYBFG01
         MVI   0(R1),X'86'             MOVE IN COMMAND CODE       BFG01
         LA    R1,8(R1)                UP R1                      BFG01
         A     R2,=F'4096'             POINT TO NEXT BUFFER       BFG01
         BCT   R3,CCWLOOP                                         BFG01
         S     R1,=F'8'                POINT TO LAST CCW          BFG01
         NI    4(R1),X'FF'-X'40'       TURN OFF COMMAND CHAIN BIT BFG01
         L     R2,QCSTART      RELOAD R2                          BFG01
***********************************************************************
*                                                                     *
*   ALLOCATE AND OPEN HASPACE                                         *
*                                                                     *
***********************************************************************
         L     R15,=V(CKPT)        READ IN THE CKPT               BFG01
         BALR  R14,R15               RECORDS                      BFG01
         L     R3,QCTDASA          BUFFER FOR DAS BLOCKS          BFG01
         USING DAS,R3              SET ADDRESSING                 UF046
         LA    R1,DSNSPACE         ADDR OF HASPACE DSN SUFFIX     CL006
         BAL   R14,BUILDSN         GO BUILD DATA SET NAME         CL006
         LA    R4,9           MAX POSSIBLE SPOOLS FOR QUEUE       UF020
         LA    R7,QCDCBL      LENGTH OF HASPACE DCB
         MR    R6,R4          COMPUTE LENGTH OF DCB POOL
         GETMAIN R,LV=(R7)    OBTAIN DCB POOL
         ST    R7,QGETL3      SAVE LENGTH OF GETMAIN
         ST    R1,QGETA3      SAVE ADDRESS OF GETMAIN
         LR    R7,R1          SAVE ADDR OF DCB POOL
         LA    R8,QCSPOOLS-4  ADDR OF OPEN LIST
         SR    R6,R6          ACTUAL NUMBER OF SPOOL VOLUMES
SPOOL1   LA    R5,DEVTAB      ADDR OF DEVICE CHARACTERISTICS TBL
         TM    DASFLAG,DASEXSTS    DOES VOLUME EXIST?             UF046
         BZ    SPOOL4              NO, SKIP THIS ONE              UF046
         TM    DASFLAG2,DASINACT   IS IT INACTIVE?                UF046
         BO    SPOOL4              YES, SKIP IT                   UF046
         LH    R15,DASNOTGE        NUMBER OF TRACKS IN EXTENT     CL001
         A     R15,QCTNUMTG        ACCUMULATE ACTIVE              CL001
         ST    R15,QCTNUMTG         TRACK GROUP COUNT             CL001
SPOOL2   CLI   0(R5),X'FF'    IS THIS THE END OF TABLE?
         BE    ABORT          YES. UNSUPPORTED DEVICE TYPE.
         CLC   0(1,R5),DASTYPE     IS IT A MATCH?                 UF046
         BE    SPOOL3         YES. GO WITH IT.
         LA    R5,12(R5)      NEXT TABLE ENTRY
         B     SPOOL2         TRY NEXT ENTRY
SPOOL3   MVC   QCTRKCYL-QCSPOOLS+4+2(2,R8),2(R5) SET TRK/CYL         CL
         MVC   DA08UNIT,4(R5) MOVE UNIT NAME
         MVC   DA08SER(6),DASVOLID  MOVE IN ALL OF VOLSER         BFG28
         LA    R6,1(R6)       INCREASE COUNT BY ONE
         MVC   DA08DDN,=CL8' '     GET DDNAME FOR ALLOCATE       *ISPF*
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
         MVC   0(QCDCBL,R7),HASPACE MOVE PATTERN DCB TO POOL
         MVC   40(8,R7),DA08DDN   UPDATE THE DDNAME              *ISPF*
         ST    R7,4(R8)       STORE DCB ADDR IN OPEN LIST
         LA    R7,QCDCBL(R7)  INCREMENT TO NEXT DCB
SPOOL4   LA    R8,4(R8)       NEXT ENTRY IN OPEN LIST
         LA    R3,DASSIZ(,R3)      NEXT VOLUME                    UF046
         BCT   R4,SPOOL1      BRANCH IF MORE VOLUMES.
         SPACE 2                                                     CL
***********************************************************************
*                                                                     *
*        OPEN ONE DCB FOR EACH ACTIVE EXTENT.                         *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R4,9                MAX POSSIBLE SPOOLS FOR QUEUEJKAUG84
         LA    R8,QCSPOOLS         ADDR OF FIRST DCB POINTER         CL
         SPACE 1                                                     CL
SPOOL5   OC    0(4,R8),0(R8)       SKIP IF THIS EXTENT               CL
         BZ    SPOOL6               IS NOT ACTIVE                    CL
         OI    0(R8),X'80'         SET END OF LIST INDICATOR         CL
         OPEN  MF=(E,(R8))         OPEN ONE EXTENT                   CL
         NI    0(R8),X'7F'         TURN OFF BIT JUST FOR NEATNESSKAUG84
SPOOL6   LA    R8,4(,R8)           BUMP TO NEXT EXTENT               CL
         BCT   R4,SPOOL5           CONTINUE IF ANY MORE              CL
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   PERFORM POST-OPEN CHECKPOINT/SPOOL AUTHORIZATION CHECK        ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
         QAUTHCK QAAFTOPN          POST-OPEN CKPT/SPOOL AUTH CHECKONL02
         SPACE 2                                                  BFG13
******************************************************************BFG13
*                                                                 BFG13
*   VALIDATE THAT NAMED SUBSYSTEM EXISTS                          BFG13
*                                                                 BFG13
******************************************************************BFG13
         SPACE 1                                                  BFG13
         LA    R1,0                INDICATE LOOKUP OF SUBSYS NAME BFG13
         L     R15,=V(SUBSYS)      CALL SUBSYSTEM MODULE          BFG13
         BALR  R14,R15             TO DO VALIDATION               BFG13
         LTR   R15,R15             WAS SUBSYSTEM FOUND ???        BFG13
         BZ    GDSUBSYS            SUBSYSTEM FOUND                BFG13
*   SINCE SUBSYSTEM NOT FOUND SET OFF CERTAIN AUTHORITIES         BFG13
         NI    QAFLAGS,255-QAFXSBSY  INDICATE THAT                BFG13
         NI    QASCFLGS,255-QASXSBSY  WE REALLY DONT              BFG13
         NI    QAHELP,255-QAHXSBSY      KNOW THE PROPER SSVT      BFG13
GDSUBSYS DS    0H                                                 BFG13
         SPACE 2                                                  ONL02
***********************************************************************
*                                                                     *
*   GO HOME                                                           *
*                                                                     *
***********************************************************************
         SPACE 1                                                  ONL02
         QSTOP
         SPACE 2                                                  ONL02
******************************************************************ONL02
*                                                                 ONL02
*   ABORT QUEUE COMMAND PROCESSING                                ONL02
*                                                                 ONL02
******************************************************************ONL02
         SPACE 1                                                  ONL02
QAABORT  DS    0H                  ABORT QUEUE COMMAND PROCESSING ONL02
         WTO   'QUEUE COMMAND ABORTED - INVALID ENVIRONMENT',     ONL02X
               ROUTCDE=(11)        TELL USER WHY                  ONL02
         SPACE 1                                                  ONL02
         ABEND 913                 ABEND U913                     ONL02
         EJECT                                                    CL006
***********************************************************************
*                                                                     *
*        CONSTRUCT DATA SET NAME FOR JES2 DISK DATA SETS.             *
*                                                                     *
*        R1 = ADDR OF DSN PREFIX                                      *
*        R14= LINK REGISTER                                           *
*                                                                     *
***********************************************************************
         SPACE 2
BUILDSN  L     R15,DA08PDSN        ADDR OF WORK AREA              CL006
         MVI   2(R15),C' '         BLANK DATA SET                 CL006
         MVC   3(43,R15),2(R15)     NAME WORK AREA                CL006
         MVC   2(8,R15),QPREFIX    SET PREFIX FROM COMMON         CL006
         LA    R15,9(R15)          ADDR OF LAST POSSIBLE CHAR     CL006
         CLI   0(R15),C' '         SKIP IF NON-BLANK              CL006
         BNE   *+8                  CHARACTER FOUND               CL006
         BCT   R15,*-8               ELSE KEEP LOOKING            CL006
         MVI   1(R15),C'.'         SET PERIOD                     CL006
         MVC   2(8,R15),0(R1)      COPY DSN SUFFIX                CL006
         LA    R15,2+7(R15)        ADDR OF LAST POSSIBLE CHAR     CL006
         CLI   0(R15),C' '         SKIP IF NON-BLANK              CL006
         BNE   *+8                  CHARACTER FOUND               CL006
         BCT   R15,*-8               ELSE KEEP LOOKING            CL006
         L     R1,DA08PDSN         ADDR OF WORK AREA              CL006
         LA    R1,1(R1)            ADDR OF FIRST BYTE OF NAME-1   CL006
         SR    R15,R1              LENGTH OF ENTIRE NAME          CL006
         L     R1,DA08PDSN         ADDR OF WORK AREA              CL006
         STH   R15,0(R1)           SET LENGTH FOR DAIR            CL006
         BR    R14                  AND RETURN                    CL006
***********************************************************************
*                                                                     *
*   UNSUPPORTED DEVICE TYPE. ABORT.                                   *
*                                                                     *
***********************************************************************
ABORT    TPUT  MESSAGE,L'MESSAGE,EDIT,MF=(E,QTPUT)   TELL THE USER
         ABEND 98,DUMP        QUIT.
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
READCCW  CCW   X'1E',0,X'60',4096 READ COUNT, KEY, AND DATA      BFG01
OCBUF    OC    0(1,R1),QBLANK TRANSLATE COMMAND TO UPPER CASE
MVCBUF   MVC   QDREPLY(1),0(R1) MOVE DATA TO REPLY
DEVTAB   DC    X'0900',H'19',CL8'3330' DEVTYPE,TRK/CYL,DEVNAME
         DC    X'0B00',H'30',CL8'3350'
         DC    X'0D00',H'19',CL8'3330-1'
         DC    X'0E00',H'15',CL8'3380'                            UF037
         DC    X'FFFF'
         DS    0F
TIR3     DC    X'00000300'    POINT PAST SYNC RECORDS
DSNCKPT  DC    CL8'HASPCKPT'                                      CL006
DSNSPACE DC    CL8'HASPACE'                                       CL006
MESSAGE  DC    C'UNSUPPORTED DEVICE TYPE SPECIFIED FOR SPOOL'
MESSAGE3 DC    C'INVALID HCT SAVEAREA ON CKPT'                    UF046
         EJECT                                                    CL006
***********************************************************************
*                                                                     *
*        CONSTRUCT PARSE PARAMETER LISTS                              *
*                                                                     *
***********************************************************************
         SPACE 2
PCLSTART IKJPARM DSECT=IKJPARMD                                   CL006
         SPACE 2                                                  CL006
PSTRING  IKJIDENT 'SUB-COMMAND',ASTERISK,FIRST=ALPHA,OTHER=ANY,   CL006*
               CHAR                                               CL006
         SPACE 1                                                  CL006
PPREFIX  IKJKEYWD ,                                               CL006
         SPACE 1                                                  CL006
         IKJNAME 'PREFIX',SUBFLD=SPREFIX                          CL006
         SPACE 1                                                  CL006
PUNIT    IKJKEYWD ,                                               CL006
         SPACE 1                                                  CL006
         IKJNAME 'UNIT',SUBFLD=SUNIT                              CL006
         SPACE 1                                                  CL006
PVOL     IKJKEYWD ,                                               CL006
         SPACE 1                                                  CL006
         IKJNAME 'VOL',SUBFLD=SVOL                                CL006
         SPACE 1                                                  BFG13
PSUBSYS  IKJKEYWD ,                                               BFG13
         SPACE 1                                                  BFG13
         IKJNAME 'SUBSYS',SUBFLD=SSUBSYS                          BFG13
         SPACE 5                                                  CL006
SPREFIX  IKJSUBF ,                                                CL006
XPREFIX  IKJIDENT 'PREFIX',LIST,MAXLNTH=8,FIRST=ALPHA,            CL006*
               OTHER=ALPHANUM                                     CL006
         SPACE 1                                                  CL006
SUNIT    IKJSUBF ,                                                CL006
         SPACE 1                                                  CL006
XUNIT    IKJIDENT 'UNIT',LIST,MAXLNTH=8,OTHER=ALPHANUM,           CL006*
               FIRST=ALPHANUM                                     CL006
         SPACE 1                                                  CL006
SVOL     IKJSUBF ,                                                CL006
         SPACE 1                                                  CL006
XVOL     IKJIDENT 'VOLUME',LIST,MAXLNTH=6,FIRST=ALPHANUM,         CL006*
               OTHER=ALPHANUM                                     CL006
         SPACE 1                                                  BFG13
SSUBSYS  IKJSUBF ,                                                BFG13
         SPACE 1                                                  BFG13
XSUBSYS  IKJIDENT 'SUBSYS',LIST,MAXLNTH=4,FIRST=ALPHA,            BFG13X
               OTHER=ALPHANUM                                     BFG13
         SPACE 2                                                  CL006
         IKJENDP ,                                                CL006
         EJECT                                                    CL006
WORK     DSECT ,                                                  UF024
         DS    18F                 SAVEAREA PORTION               UF024
WORKAREA DS    D                   START OF SCRATCH WORK AREA     UF024
         SPACE 1                                                  UF024
SYMDEL   DSECT ,                   KILL SYM CARD GENERATION       UF023
INIT     CSECT ,                                                  UF023
         QPRBGEN BEGIN             SET PRINT FOR CNTL BLOCK GEN   ONL01
         COPY  $HASPGBL
&MACSPLV SETC  '2'
&SYSSPLV SETC  '2'
&VERSION SETC  'SP 2.1.5'
&FMID    SETC  'HJE2215'
         $HASPEQU
         $DAS  ,                                                  UF046
         $MIT  ,                                                  UF046
         $PCE  ,              NEEDED FOR NJE $HCT                 UF001
         $JOE
         $JOT
NJOTPRFX EQU   (JOTJOES-JOT)/JOESIZE
         $LCK  ,                                                  UF020
         IFGRPL
         $BUFFER                                                  UF020
         $JCT  ,                                                  UF020
         $CAT  ,                                                  UF020
         $TAB
         $QSE
         $PDDB                                                    UF021
         $IOT
         $JQE
         $HCT
         IKJCPPL ,                                                ONL02
         IKJPSCB ,                                                ONL02
         IEFUCBOB ,                                               BFG28
         IEZDEB ,                                                 BFG28
         DCBD  DSORG=PS                                           BFG31
         CVT    DSECT=YES                                         CL006
         IHAPSA  ,                                               *ISPF*
         IKJTCB  ,                                               *ISPF*
         IEFJSSIB ,                                               BFG13
         IEZJSCB ,                                                BFG13
         QCOMMON
         QPRBGEN DONE              RESTORE NORMAL PRINT STATUS    ONL01
SYMNODEL DSECT ,                   RESTORE SYM CARD GENERATION    UF023
         END
