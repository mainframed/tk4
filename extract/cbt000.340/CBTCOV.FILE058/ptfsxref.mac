*          DATA SET CBT1277    AT LEVEL 006 AS OF 08/28/83
PUTXREF  TITLE 'PROGRAM TO CROSS REFERENCE A PUT TAPE BY FMID'
***********************************************************************
*                                                                     *
*              PUTXREF - VERSION 3.0                                  *
*                                                                     *
*        JERRY LAWSON  203-547-5000 EXT 2960                          *
*        HARTFORD INSURANCE GROUP,                                    *
*        690 ASYLUM AVE.                                              *
*        HARTFORD, CT.  06115                                         *
*                                                                     *
*        FUNCTION:                                                    *
*        THIS PROGRAM TAKES THE PUT PTF FILE (FILE 1 FROM A           *
*        STANDARD IBM PUT TAPE), AND PRODUCES A CROSS                 *
*        REFERENCE OF THE PTF'S INCLUDED, SORTED BY FMID.             *
*        IT CAN TAKE CONCATENATED INPUT, BUT THE TAPE IDENITY         *
*        ON WHICH THE PTF IS FOUND WILL BE LOST. THE PROGRAM          *
*        SHOULD BE USEFUL TO QUICKLY IDENTIFY WHAT PTF'S              *
*        ARE ON A GIVEN TAPE, WHAT FMID'S HAVE MAINTENANCE ON         *
*        A TAPE, AND TO DOUBLE CHECK THE STERLING FORREST             *
*        CROSS REFERENCE (IT LIES ONCE IN A WHILE.)                   *
*                                                                     *
*        DEPENDANCIES:                                                *
*        1.    THIS PROGRAM HAS AN INVOKED INCORE SORT.               *
*              IT LINKS TO THE ENTRY POINT OF "SORT".                 *
*              CHANGE THE LINK MACRO IF YOU DO NOT SUPPORT            *
*              THAT NAME OR ALIAS. YOU WILL NEED ABOUT                *
*              300K FOR THE WHOLE PROGRAM AND SORT.                   *
*        2.    TITLES.  THIS FILE (FOR FMID TITLES) IS                *
*              OPTIONAL. IF NOT INCLUDED, YOU WILL GET A              *
*              WARNING MESSAGE ON YOUR SYSOUT, AND NO TITLES.         *
*              I HAVE INCLUDED THE FILE IN THE JCL, I                 *
*              CREATED THE FILE BY DOING THE FOLLOWING:               *
*              A. ALLOCATE A DATA SET ON TSO  - NORMAL STUFF -        *
*                  RECFM=FB,LRECL=80                                  *
*              B.  ASSIGN THAT DATA SET TO DD NAME OF OZPRINT         *
*              C.  EXECUTE YOUR INFO - SYS CLIST OR COMMAND           *
*              D.  ISSUE A 'DEF A' COMMAND TO INFO (SEARCH            *
*                  ALL FILES)                                         *
*              E.  DO A KEY WORD SEARCH AS FOLLOWS -                  *
*                  KWS FMID XREF      I GOT ABOUT 22 HITS,            *
*                  BUT THE FIRST ONE HAD A TITLE OF                   *
*                  'THIS IS A CROSS REFERENCE OF MVS FMIDS',          *
*                  OR SOMETHING SIMILAR. BE SURE YOU                  *
*                  HAVE THE LATEST ONE                                *
*              F.  SELECT THE CORRECT ONE, THE ISSUE A                *
*                  'PRINT UP' COMMAND. THE OUTPUT WILL GO             *
*                  TO THE DATA SET ALLOCATED TO THE OZPRINT           *
*                  DDNAME                                             *
*              G.  END YOUR INFO SESSION                              *
*              H.  EDIT YOUR PRINT FROM THE INFO SESSION              *
*                  YOU WANT TO DELETE ALL LINES THAT DO               *
*                  NOT HAVE AN FMID IN COLUMN 3. NOTE THAT DELETED
*                  FMIDS HAVE A * IN COLUMN 3, FOR BETTER             *
*                  DOCUMENTATION I DELETE THE STAR ANDMOVE THE        *
*                  FMID BACK TO 3, BUT THIS IS                        *
*                  OPTIONAL.                                          *
*              I.  AFTER YOU HAVE SAVED THE DATA SET,                 *
*                  SORT IT ON COLUMN 3 FOR A LENGTH OF 7.             *
*              J.  THE TITLE LIST YOU HAVE JUST CREATED               *
*                  CAN BE EITHER INCLUDED IN THE JCL STREAM           *
*                  OR KEPT IN A SEPERATE DATA SET, AND POINTED        *
*                  TO BY THE JCL.                                     *
*        3.    REGS MACRO. THE STANDARD REGISTER EQUATES              *
*              SUCH AS IN R1      EQU    1      ETC.                  *
*              NOTE - REMOVED ON 3/10/82                              *
*                                                                     *
*        CHANGES FOR RELEASE 3.0                                      *
*        1.    CHANGED INPUT LOCATION OF TITLES FROM COLUMN 2 TO      *
*              COLUMN 3. THIS ALLOWS USE OF THE OUTPUT OF THE         *
*              OZPRINT DD STATEMENT WITHOUT HAVING TO DELETE          *
*              THE CARRIAGE CONTROL INFO COMPLETELY. SEE THE INFO IN  *
*              2. ABOVE FOR DETAILS ON HOW TO CREATE THE TITLE        *
*              FILE.                                                  *
*        2.    EXTENDED SIZE OF THE TITLE FIELD TO INCLUDE            *
*              THE COMPONENT ID NOW THAT IBM HAS                      *
*              INCLUDED IT IN THE FMID XREF.                          *
*                                                                     *
*        CHANGES FOR RELEASE 2.0:                                     *
*        1. ADDED BLOCKSIZES TO DCB MACROS TO CORRECT DEPENDENCY      *
*           ON LOCAL MODS                                             *
*        2. CORRECTED SORT FIELDS STATEMENT IN PROGRAM. ONLY USED IF  *
*           IBM SORT IS INVOKED. NOTE THAT PARM ERROR SEEMS TO BE     *
*           A STANDARD FEATURE WITH THIS PROGRAM - I CAN FIND NO ERROR*
*        3. SYSOUT JCL DD STATEMENT ADDED FOR IBM SORTS               *
*                                                                     *
*        MACROS.                                                      *
*        SAVE      OPEN      CLOSE      GET                           *
*        PUT       LINK      WTO        ABEND (U128 - BAD SORT)       *
*        DCB
*                                                                     *
*        REGISTER ASSIGNMENTS - NORMAL LINKAGE CONVENTIONS            *
*              REG 12              BASE REGISTER                      *
*              REG 2               BAL REGISTER                       *
*              REG 3               BCT REGISTER - PHASE 1             *
*              REG 4               POINTER TO PTF INPUT RECORD        *
*              REG 5               OUTPUT POSITION POINTER - PHASE 2  *
*              REG 6               BCT REGISTER - PHASE 2             *
*              REG 7               RETURN ADDRESS FOR EODAD (TITLES)  *
***********************************************************************
         EJECT
PUTXREF  CSECT
         SAVE  (14,12),,*
         LR    R12,R15
         USING PUTXREF,R12         REG 12 IS BASE
         LA    R15,SAVE
         ST    R15,8(R13)
         ST    R13,SAVE+4
         LR    R13,R15
         OPEN  (SYSIN,INPUT)
         OPEN  (SORT,OUTPUT)
         SPACE 2
*---------------------------------------------------------------------*
*        THIS SECTION SEARCHES THE INPUT FOR ++PTF AND ++VER          *
*        STATEMENTS ON THE PUT TAPE. ALL OTHERS ARE REJECTED,         *
*        BUT A BAD PTF MIGHT CAUSE EXCESS SCANNING TO BE DONE.        *
*---------------------------------------------------------------------*
PX010    EQU   *
         BAL   R2,PXGET            LINK TO COMMON READ ROUTINE
         CLC   0(2,R4),=C'++'      IS THIS AN SMP CONTROL CARD?
         BNE   PX010               NO - BACK FOR ANOTHER
         LA    R4,2(R4)            YES - POINT PAST THE ++
         SH    R3,=H'2'            DECREMENT LENGTH FOR LOOP
PX015    EQU   *
         CLI   0(R4),C' '          ANYTHING HERE YET?
         BNE   PX020               YES - GO CHECK IT OUT
         LA    R4,1(R4)            NO - THEN POINT TO NEXT POSITION
         BCT   R3,PX015            LOOP DE LOOP
         BAL   R2,PXGET            WOOPS - OUT OF RECORD
         B     PX015               BACK AGAIN WITH ANOTHER RECORD
PX020    EQU   *
         CLC   0(3,R4),=C'PTF'     IS THIS A ++PTF CARD?
         BE    PX100               YES - GO GETPTF NUMBER
         CLC   0(3,R4),=C'VER'     NO - THEN IS IT A ++VER?
         BE    PX200               YES - THEN GO FIND THE FMID
         B     PX010               NO - THEN THIS IS NG - START OVER.
         EJECT
*---------------------------------------------------------------------*
*        THIS SECTION GETS THE PTF NUMBER FROM THE SMP CONTROL        *
*        CARDS. IT ASSUMES THIS TO BE THE FIRST NON-BLANK             *
*        CHARACTER AFTER THE FIRST LEFT PAREN AFTER                   *
*        THE KEYWORD 'PTF'                                            *
*---------------------------------------------------------------------*
PX100    EQU   *
         LA    R4,3(R4)            BUMP PAST THE PTF KEYWORD
         SH    R3,=H'3'            DECREMENT LOOP CONTROL
         C     R3,=F'0'            OUT OF RECORD?
         BH    PX110               NO - ON WITH THE SHOW
         BAL   R2,PXGET            YES - LINK TO COMMON GET ROUTINE
PX110    EQU   *
         CLI   0(R4),C'('          THIS A LEFT PAREN?
         BE    PX150               YES - THEN GO SAVE PTF NUMBER
         LA    R4,1(R4)            NO - POINT TO NEXT POSITION
         BCT   R3,PX110            LOOP AGAIN
         BAL   R2,PXGET            OUT OF RECORD AGAIN
         B     PX110
PX150    EQU   *
         LA    R4,1(R4)            POINT PAST LEFT PAREN
         BCTR  R3,0                DECREMENT FOR THE PAREN
         CLI   0(R4),C' '          ANYTHING HERE?
         BNE   PX160               YES - THEN GO SAVE IT
         LA    R4,1(R4)            NO - POINT TO NEXT
         BCT   R3,PX150             AND LOOP (GETTING DIZZY YET?)
         BAL   R2,PXGET            OFF TO THE COMMONS AGAIN
         B     PX150
PX160    EQU   *
         MVC   OUTPTF(7),0(R4)     SAVE PTF NUMBER
         B     PX010               BACK TO FIND THE FMID
         EJECT
*---------------------------------------------------------------------*
*        THIS SECTION GETS THE FMID FROM THE ++VER STATEMENT. IT      *
*        ASSUMES THE FMID TO BE THE FIRST NON-BLANK CHARACTER         *
*        AFTER THE FIRST LEFT PAREN AFTER THE 'FMID' KEYWORD.         *
*        WHEN THIS IS LOCATED, A RECORTED IS WRITTEN TO THE SORT FILE.*
*---------------------------------------------------------------------*
PX200    EQU   *
         LA    R4,3(R4)            POINT PAST THE VER KEYWORD
         SH    R3,=H'3'            AND DECREMENT THE LOOP CONTROL
         C     R3,=F'0'            OUT OF RECORD?
         BH    PX210               NO - ON WITH THE SHOW
         BAL   R2,PXGET            YES - OFF AND GET ANOTHER
PX210    EQU   *
         CLC   0(4,R4),=C'FMID'    IS THIS THE FMID?
         BE    PX220               YES - THEN GO FIND THE ACTUAL FMID
         LA    R4,1(R4)            NO - POINT TO NEXT LITTLE DEVIL
         BCT   R3,PX210            WE'LL GET HIM YET
         BAL   R2,PXGET            WOOPS OUT OF DATA
         B     PX210               BACK WITH A NEW RECORD
PX220    EQU   *
         LA    R4,4(R4)            POINT PAST THE KEYWORD
         SH    R3,=H'4'            DECREMENT THE LOOP CONTROL
         C     R3,=F'0'            OUT OF DATA?
         BH    PX230               NO - THEN FIND THE LITTLE DEVIL
         BAL   R2,PXGET            OUT OF DATA AGAIN
PX230    EQU   *
         CLI   0(R4),C'('          LEFT PAREN YET?
         BE    PX240               YES - ALMOST THERE
         LA    R4,1(R4)            POINT TO NEXT PLACE
         BCT   R3,PX230            LOOP DE LOOP
         BAL   R2,PXGET            WOOPS - THE SAFTEY VALVE AGAIN
         B     PX230               KEEP ON PLUGGIN.
PX240    EQU   *
         LA    R4,1(R4)            POINT PAST THE PAREN
         BCTR  R3,0                DON'T FORGET THE LOOP CONTROL
         CLI   0(R4),C' '          THEY DIDN'T SLIP IN ANOTHER BLANK?
         BNE   PX250               NOPE - THEN WE GOT IT ALL!!!!
         LA    R4,1(R4)            YES - THOSE LITTLE BUGGERS
         BCT   R3,PX240            LOOP ONE MORE TIME
         BAL   R2,PXGET            COMMONER AND COMMONER
         B     PX240
PX250    EQU   *
         MVC   OUTFMID,0(R4)       SAVE THE FMID NUMBER
         PUT   SORT,OUTPTF         WRITE THE RECORD
         B     PX010               BACK AND START AGAIN
               EJECT
*---------------------------------------------------------------------*
*        END OF DATA ROUTINE FOR THE PTF INPUT FILE  - DDNAME         *
*        IS INPUT.                                                    *
*---------------------------------------------------------------------*
EOF      EQU   *
         CLOSE SYSIN
         CLOSE SORT
         SPACE 3
*---------------------------------------------------------------------*
*        LINK TO SORT (THIS WAS DEVELOPED USING SYNCSORT)             *
*---------------------------------------------------------------------*
         LA    R1,SORTPARM         GET ADDRESS OF SORT PARMS
         LINK  EP=SORT             CALL THE SORT UTILITY
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   SORTERR             NO GOOD - ABEND
         EJECT
*---------------------------------------------------------------------*
*        THIS IS THE BEGINNING OF PHASE 2 - SETS UP THE               *
*        FILES, VERIFIES THE EXSISTANCE OF THE TITLES FILE, AND       *
*        WRITES THE FIRST SET OF HEADERS                              *
*---------------------------------------------------------------------*
         OPEN  (SORT,INPUT)
         OPEN  (TITLE,INPUT)
         OPEN  (PRINT,OUTPUT)
         LA    R5,TITLE            GET DCB ADDRESS
         TM    48(R5),X'10'        WAS OPEN SUCCESSFUL?
         BO    PX490               YES - BRANCH AROUND BAD OPEN
         OI    FLAG,NOTITLE        SHOW NOT TO READ THIS FILE
         WTO   'TITLE FILE OPEN UNSUCCESSFUL',ROUTCDE=(11),            X
               DESC=(7)
PX490    EQU   *
         BAL   R2,PXPUT            LINK TO HEADER PUT ROUTINE
         EJECT
*---------------------------------------------------------------------*
*        THIS SECTION FOOLS AROUND WITH THE SPECIAL HANDLING FOR      *
*        THE 1ST RECORD.                                              *
*---------------------------------------------------------------------*
         GET   SORT,OUTPTF         1ST READ ONLY
         MVC   HOLD,OUTFMID        SAVE FMID FOR COMPARISON
         MVC   OUTAREA+1(7),OUTFMID SETUP 1ST LINE
         LA    R5,OUTAREA+11       POINT TO FIRST PTF AREA
         LA    R6,12               SET UP LOOP FOR BCT
         TM    FLAG,NOTITLE        CAN WE READ THE TITLE FILE?
         BO    PX510               NO - WOOPS - FORGOT TO SAY
*                                         MOTHER MAY I
         LA    R7,PX499            SAVE RETURN POINT FOR EODAD
PX495    EQU   *
         GET   TITLE,INAREA        GET A TITLE RECORD
         CLC   INAREA+2(7),HOLD    DO FMID'S AGREE?
         BL    PX495               NO - LOWER, GO READ ANOTHER
         BH    PX499               NO - HIGHER, ERGO NO BRANCH, SKIP
         MVC   OUTAREA+21(34),INAREA+11 EQUAL - GET TITLE
PX499    EQU   *
         PUT   PRINT,LINE          WRITE HEADER
         MVI   OUTAREA+0,C' '      CLEAR LINE
         MVC   OUTAREA+1(131),OUTAREA+0
         AP    LINECNT,ONE         UPDATE LINE COUNT
*                       NOTE - PAGE OVERFLOW NOT POSSIBLE HERE
         B     PX510               BRANCH AROUND NORMAL READ
         EJECT
*---------------------------------------------------------------------*
*        THIS IS THE MAINLINE ROUTINE TO PRINT OUT THE CROSS          *
*        REFERENCE. IT READS THE SORTED INPUT, CHECKS TO SEE          *
*        IF IT IS THE SAME AS THE PREVIOUS FMID, AND BRANCHES         *
*        ACCORDINGLY.                                                 *
*---------------------------------------------------------------------*
PX500    EQU   *
         GET   SORT,OUTPTF         NORMAL READ
PX510    EQU   *
         CLC   HOLD,OUTFMID        SAME AS LAST RECORD?
         BNE   PX570               NO - GO WRITE PARTIAL LINE
PX520    EQU   *
         MVC   0(7,R5),OUTPTF      MOVE IN PTF NUMBER
         LA    R5,10(R5)           BUMP TO NEXT PRINT POSITION
         BCT   R6,PX500            LOOP IN HERE TOO.
         PUT   PRINT,LINE          END OF LOOP, WRITE LINE
         MVI   OUTAREA+0,C' '      BLANK OUT THE LINE
         MVC   OUTAREA+1(131),OUTAREA CLEAR DATA LINE
         LA    R5,OUTAREA+11       POINT BACK TO BEGINNING
         LA    R6,12               RESET LOOP CONTROL
         AP    LINECNT,ONE         ADD ONE TO CURRENT NUMBER OF LINES
         CP    LINECNT,=P'60'      ENOUGH LINES FOR BREAK?
         BL    PX500               NO - BACK TO TOP
         BAL   R2,PXPUT            YES - LINK TO HEADER PUT ROUTINE
         B     PX500               BACK TO TOP
         SPACE 2
PX570    EQU   *
         PUT   PRINT,LINE          WRITE SHORT LINE
         PUT   PRINT,BLANK         WRITE SPACER
         AP    LINECNT,THREE       ADD IN LINE COUNT
         CP    LINECNT,=P'59'      ALMOST AT END OF PAGE?
         BL    PX572               NO - BRANCH AROUND HDR ROUTINE
         BAL   R2,PXPUT            OFF TO SEE THE WIZARD
PX572    EQU   *
         LA    R5,11(R5)           RESET POINTER
         LA    R6,12               RESET BCT LOOP
         MVI   OUTAREA+0,C' '      CLEAR OUTPUT
         MVC   OUTAREA+1(131),OUTAREA
         MVC   OUTAREA+1(7),OUTFMID SETUP 1ST LINE
         MVC   HOLD,OUTFMID        SAVE NEW FMID
         TM    FLAG,NOTITLE        CAN WE READ THE TITLE FILE?
         BO    PX580               NO - FORGET THIS NONSENSE
         LA    R7,PX580            YES - GET RETURN ADDRESS FOR EODAD
         CLC   INAREA+2(7),HOLD    CURRENT ONE RIGHT?
         BL    PX575               NO - LOW, GO GET NEXT ONE
         BH    PX580               NO - HIGH, STILL NOT RIGHT
         MVC   OUTAREA+21(34),INAREA+11   YES - THIS IS RIGHT ONE
         B     PX580               GO DIRECTLY TO PUT
PX575    EQU   *
         GET   TITLE,INAREA        READ THE FILE
         CLC   INAREA+2(7),HOLD    THIS THE RIGHT GUY?
         BL    PX575               NO - LOW, GO BACK AND READ AGAIN
         BH    PX580               NO - HIGH, NONE FOR THIS ONEADDRESS
         MVC   OUTAREA+21(34),INAREA+11  MOVE IN TITLE
PX580    EQU   *
         PUT   PRINT,LINE          WITE DATA
         MVI   OUTAREA+0,C' '      CLEAR OUTPUT
         MVC   OUTAREA+1(131),OUTAREA
         LA    R5,OUTAREA+11       POINT BACK TO BEGINNING
         LA    R6,12               RESET LOOP CONTROL
         AP    LINECNT,ONE         ADD TO CURRENT LINE COUNTER
         CP    LINECNT,=P'60'      ENOUGH FOR A NEW PAGE?
         BL    PX520               NO - BACK TO PROCESS NEW FMID
         BAL   R2,PXPUT            YES - LINK TO HEADER PUT ROUTINE
         B     PX520               BACK AND CONTINUE ON
         EJECT
*---------------------------------------------------------------------*
*        EODAD ROUTINE FOR THE TITLE FILE. SINCE THIS CAN BE ENTERED  *
*        FROM TWO PLACES, EACH SETS A RETURN ADDRESS, SO THAT         *
*        PROCESSING CAN CONTINUE AFTER EOF IS REACHED.                *
*---------------------------------------------------------------------*
PX590    EQU   *
         OI    FLAG,NOTITLE        SHOW NO MORE READS TO BE DONE
         BR    R7                  RETURN VIA PRESET REG 7
         SPACE 3
*---------------------------------------------------------------------*
*        EODAD FOR THE SORT FILE OUTPUT. WHEN YOU GET HERE ITS OVER.  *
*---------------------------------------------------------------------*
PX599    EQU   *
         PUT   PRINT,LINE          END OF LOOP, WRITE LINE
         CLOSE SORT
         CLOSE PRINT
         L     R13,SAVE+4
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
         EJECT
*---------------------------------------------------------------------*
*        THIS IS THE COMMON READ ROUTINE FOR THE INPUT PTF FILE       *
*        USED DURING PHASE ONE PROCESSING.                            *
*---------------------------------------------------------------------*
PXGET    EQU   *                   COMMON READ ROUTINE FOR SYSIN
         GET   SYSIN,INAREA
         LA    R3,72               SET UP REG 3 FOR BCT
         LA    R4,INAREA           POINT TO DATA
         BR    R2                  RETURN TO CALLER
         SPACE 2
*---------------------------------------------------------------------*
*        THIS IS THE COMMON HEADER WRITTING ROUTINE.                  *
*---------------------------------------------------------------------*
PXPUT    EQU   *
         AP    PAGE,ONE            ADD TO PAGE NUMBER
         MVC   NUM,PATRN           INSERT EDIT PATTERN
         ED    NUM,PAGE            MAKE THE NUMBER PRINTABLE
         PUT   PRINT,HDR1
         PUT   PRINT,HDR2
         PUT   PRINT,HDR3
         ZAP   LINECNT,FOUR        RESET PAGE LINE COUNTER
         BR    R2                  RETURN TO CALLER
         SPACE 2
*---------------------------------------------------------------------*
*        IF THE SORT RETURNS A NON-ZERO CONDITION CODE,               *
*        CONTROL IS PASSED TO THIS ABEND MACRO.                       *
*---------------------------------------------------------------------*
SORTERR  EQU   *
         ABEND 128,DUMP
         EJECT
         LTORG
         EJECT
SYSIN    DCB   DSORG=PS,MACRF=GM,EODAD=EOF,DDNAME=INPUT,RECFM=FB,      X
               LRECL=80
         EJECT
SORT     DCB   DSORG=PS,MACRF=(PM,GM),DDNAME=SORTIN,RECFM=FB,LRECL=15, X
               BLKSIZE=1500,EODAD=PX599
         EJECT
PRINT    DCB   DSORG=PS,MACRF=PM,DDNAME=PRINTER,RECFM=VBA,LRECL=137,   X
               BLKSIZE=141
         EJECT
TITLE    DCB   DSORG=PS,MACRF=GM,DDNAME=TITLES,RECFM=FB,               X
               LRECL=80,EODAD=PX590
         EJECT
SAVE     DS    18F
HOLD     DS      CL7
PAGE     DC      PL2'0'
LINECNT  DC      PL2'0'
ONE      DC      PL1'1'
THREE    DC      PL1'3'
FOUR     DC      PL1'4'
FLAG     DC      XL1'00'
NOTITLE  EQU     X'80'
PATRN    DC      XL4'40202120'
INAREA   DS      CL80
OUTPTF   DC      CL8' '
OUTFMID  DC      CL7' '
         DS     0F
SORTPARM DC      X'80'
         DC      AL3(PARMLIST)
         DC      H'0'
PARMLIST DC      AL2(PARMEND-PARMLIST)
         DC      A(SORTCARD)
         DC      A(SORTEND)
         DC      A(RECCARD)
         DC      A(RECEND)
         DC      A(0)
         DC      A(0)
PARMEND  EQU   *
SORTCARD DC      C' SORT FIELDS=(9,7,CH,A,1,7,CH,A)'
SORTEND  DC      C' '
RECCARD  DC      C' RECORD LENGTH=15,TYPE=F'
RECEND   DC      C' '
HDR1     DC      H'133'
         DC      H'0'
         DC      CL1'1'
         DC    47CL1' '
         DC      C'PTF BY FMID CROSS REFERENCE'
         DC    46CL1' '
         DC      CL4'PAGE'
NUM      DC      CL4'    '
HDR2     DC      H'135'
         DC      H'0'
         DC      CL1'0'
         DC      CL10'FMID'
         DC    12CL10'PTF'
HDR3     DC      H'135'
         DC      H'0'
         DC      CL1' '
         DC    13CL10'*******'
LINE     DC      H'137'
         DC      H'0'
OUTAREA  DC   133CL1' '
BLANK    DC      H'6'
         DC      H'0'
         DC      CL2'0 '
         EJECT
***********************************************************************
*              REGISTER EQUIVALENTS                                   *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
