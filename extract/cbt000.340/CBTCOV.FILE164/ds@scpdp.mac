DS@SCPDP TITLE 'DS@SCPDP -- PRINT PDS MEMBER TO SYSOUT'
         SPACE
***********************************************************************
*  PROGRAM-ID: DS@SCPDP                                               *
*  FUNCTION:                                                          *
*      DS@SCPDP ALLOCATES A SYSOUT PRINT FILE, AND PRINTS A PDS       *
*      MEMBER BY WRITING TO THE SYSOUT.  ALL I/O IS HANDLED BY SPAM   *
*      (SEQUENTIAL/PARTITIONED ACCESS METHOD) MODULE.  INPUT TO THIS  *
*      PROGRAM IS REGISTER 1, WHICH POINTS TO THE PRINT PARAMETER     *
*      BLOCK.  THE PARAMETER BLOCK CONTAINS INFORMATION ON WHAT TO    *
*      PRINT, AND HOW TO PRINT IT.  THE SYSOUT FILE IS FREED WHEN IT  *
*      IS CLOSED, AND THIS PROGRAM DOES NOT CLOSE THE FILE UNTIL TOLD *
*      TO DO SO.  SO A CALL SHOULD ALWAYS BE MADE TO CLOSE THE SYSOUT *
*      FILE.  THE SYSOUT FILE WOULD BE DYNAMICALLY REALLOCATED IN     *
*      SUBSEQUENT CALLS TO PRINT.  THIS PROGRAM ALLOCATES (AND FREES) *
*      ITS OWN DSA UNLESS THE ADDRESS OF A PROVIDED ONE IS IN THE     *
*      PARAMETER BLOCK.  THE CALLER CAN ALLOCATE THE DSA FOR THIS     *
*      PROGRAM (IT'S LENGTH CAN BE GOTTEN BY THE EQUATED SYMBOL       *
*      "DSALNG").                                                     *
*                                                                     *
*  ATTRIBUTES:  THIS PROGRAM IS REENTERABLE, REUSEABLE                *
*                                                                     *
*  REGISTER USAGE:                                                    *
*      R2-R10 WORK REGISTERS                                          *
*      R11 - BASE REGISTER                                            *
*      R12 - BASE FOR PRINT PARAMETER BLOCK                           *
*      R13-R15 STANDARD USAGE                                         *
*                                                                     *
*  RETURN CODES:                                                      *
*       0  - MEMBER PRINTED, ALL IS WELL                              *
*       4  - SOME DATA WAS TRUNCATED                                  *
*       8  -                                                          *
*      12  - SYSOUT DYNAMIC ALLOCATION FAILED, OR SOME I/O ERROR      *
*                                                                     *
* AUTHOR:   PHIL HEROLD, SYSTEMS DEVELOPER                            *
*           SAS INSTITUTE                                             *
*           CARY, NC                                                  *
*                                                                     *
* NOTE:  SAS INSTITUTE IS NOT RESPONSIBLE FOR THE SUPPORT OF THIS     *
*        PROGRAM--PLEASE DO NOT CALL SAS INSTITUTE TECHNICAL SUPPORT. *
*        HOWEVER, THE AUTHOR WILL BE GLAD TO PROVIDE ANY ASSISTANCE   *
*        NEEDED.                                                      *
*                                                                     *
*                                                                     *
* ACKNOWLEDGEMENT:  THE AUTHOR WOULD LIKE TO ESPECIALLY THANK DAVE    *
*                   LASALLE OF FIRST COMPUTER SERVICES, CHARLOTTE,    *
*                   NC, FOR HIS SUPPORT AND ENCOURAGEMENT.            *
*                                                                     *
*  CHANGE ACTIVITY:                                                   *
*                                                                     *
***********************************************************************
         COPY  DS@MACS
         TITLE 'OTHER EQUATES'
***********************************************************************
*                  O T H E R    E Q U A T E S                         *
***********************************************************************
         SPACE
FLAGON   EQU   255
FLAGOFF  EQU   0
         TITLE 'DS@SCPDP -- PRINT PARAMETER BLOCK'
***********************************************************************
*            P R I N T       P A R A M E T E R     B L O C K          *
***********************************************************************
         SPACE
         DS@PRTPB DSECT=YES
         SPACE 3
***********************************************************************
*            S Y S A L C     P A R A M E T E R     B L O C K          *
***********************************************************************
         SPACE
SYSALCP  DS@SYACP DSECT=YES
         TITLE 'DS@SCPDP -- DSA DEFINITIONS'
***********************************************************************
*                    D S A       D E F I N I T I O N S                *
***********************************************************************
         SPACE
DS@PRDSA DSECT                        OUR DSA
SAVEAREA DS    18F
AL14SAVE DS    A                      SAVE AREA FOR INTERNAL LINKAGE
PR14SAVE DS    A                      SAVE AREA FOR INTERNAL LINKAGE
         SPACE
INPTSFB  DS    A(0)                   INPUT FILE BLOCK POINTER
         SPACE
CALLPL   CALL  ,(,),MF=L              SPAM PARAMETER LIST
         SPACE
RECORD   DS    CL256                  RECORD WRITTEN FROM HERE
         SPACE
HEADER2  DC    C' DSNAME='
DSNAME   DC    CL44' '
         DC    C'('
MEMNAME  DC    CL8' '
         DC    C')'
         SPACE
ALLOCDSA DC    XL1'0'                 WE ALLOCATED OUR DSA
FIRSTREC DC    XL1'0'                 FIRST RECORD SWITCH
TRUNCFLG DC    XL1'0'                 DATA WAS TRUNCATED
         DS    0F                     ALIGN TO FULLWORD
         TITLE 'DS@SCPDP -- SPAM PARAMETER BLOCK'
***********************************************************************
*        S P A M      P A R A M E T E R      B L O C K                *
***********************************************************************
         SPACE
         DS@SPPB  DSECT=NO           SPAM PARAMETER BLOCK
         DS    0F
         TITLE 'DS@SCPDP -- SYSOUT ALLOCATION PARAMETER BLOCK'
***********************************************************************
*        S Y S A L C    P A R A M E T E R      B L O C K             *
***********************************************************************
         SPACE
ALCPB    DC    CL(ALC$LNG)' '         SYSALC PARM BLOCK
         SPACE
ALCDSA   DC    100F'0'                DSA FOR SYSALC
         SPACE
         DS    0D
DSALNG   EQU   *-DS@PRDSA
         TITLE 'DS@SCPDP -- GENERAL PROCESS'
***********************************************************************
*    ALLOCATE THE DSA IF THIS IS THE FIRST TIME.  IF CALL IS FOR      *
*  FREE, THEN CLOSE THE SYSOUT FILE.                                  *
***********************************************************************
         SPACE
DS@SCPDP CSECT
         USING *,R15
         DS@START ,
         PRINT GEN
         LR    R11,R15                 SET UP BASE REGISTERS
         DROP  R15
         USING DS@SCPDP,R11
         L     R12,0(R1)              ADDRESS PRINT PARAMETER BLOCK
         USING DS@PRTPB,R12
         L     R1,PRTDSA@             GET DSA ADDRESS
         SLR   R6,R6                  CLEAR REGISTER
         LA    R3,DSALNG              GET DSA LENGTH
         LTR   R1,R1                  IF WE DON'T HAVE DSA, THEN
         BNZ   SCPDPOK1
         GETMAIN RC,LV=(R3)             GETMAIN HAD BETTER WORK
         LA    R6,FLAGON                SAY WE ALLOCATED IT
         ST    R1,PRTDSA@               SAVE DSA ADDRESS IN PARM BLOCK
SCPDPOK1 DS    0H
         LR    R2,R1                  GET DSA ADDRESS
         SLR   R5,R5                  CLEAR FOR MVCL
         MVCL  R2,R4                  AND ZERO IT OUT
         ST    R13,4(0,R1)            SET BACKWARD CHAIN
         ST    R1,8(0,R13)            SET FORWARD CHAIN
         LR    R13,R1                 GET DSA BASE
         USING DS@PRDSA,R13
         MVC   SAVEAREA(4),=C'PRTM'   SET PROGRAM IDENTIFIER
         STC   R6,ALLOCDSA            SAY FLAG INDICATOR
         MVC   HEADER2(HDR2LNG),HDR2  MOVE IN HEADER 2
         MVC   SPBDSA,PRTSPMD@        SET SPAM DSA ADDRESS
         LA    R10,ALCPB              ADDRESS PARAMETER BLOCK
         USING SYSALCP,R10
         TM    PRTFLAG1,PRTFREE       IF THIS IS A CALL TO FREE SYSOUT,
         BZ    SCPDALC
         BAL   R14,FREEIT
         B     RETURN                   AND WE ARE DONE
SCPDALC  DS    0H
         TM    PRTFLAG1,PRTALC        IF SYSOUT IS NOT ALLOCATED,
         BNZ   SCPDPRT
         BAL   R14,ALCSYSO              GO ALLOCATE THE SYSOUT FILE
         LTR   R15,R15                  IF RETURN CODE NON-ZERO
         BNZ   RETURN                     THEN WE ARE DONE
SCPDPRT  DS    0H
         BAL   R14,PRINTIT            GO DO THE PRINT
         SPACE
RETURN   DS    0H
         L     R13,4(0,R13)            RESTORE REGISTER 13
RETURN1  DS    0H
         L     R14,12(0,R13)           RESTORE RETURN REGISTER
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGISTERS
         BR    R14                     AND LEAVE
         TITLE 'DS@SCPDP -- SUBROUTINE: ALLOCATE SYSOUT FILE'
***********************************************************************
*     THIS SUBROUTINE ALLOCATES THE SYSOUT FILE FOR PRINTING, AND     *
*  ISSUES THE OPEN TO GET THINGS GOING.  REGISTER 15 IS RETURNED WITH *
*  A NON-ZERO VALUE FOR ANY ERRORS.  RETURN IS VIA REGISTER 14.       *
***********************************************************************
*
ALCSYSO  DS    0H
         ST    R14,AL14SAVE           SAVE RETURN REGISTER
         MVC   ALCPB(ALC$LNG),SYSALCPM MOVE PARM BLOCK MASK
         LA    R1,ALCDSA              ADDRESS DSA FOR THIS GUY
         ST    R1,ALC$DSA@            SAVE IN PARM BLOCK
         MVI   ALC$CLAS,C' '          SET DEFAULT CLASS TO BLANK
         CLC   PRTDEST,BLANKS         IF DEST SPECIFIED
         BE    NODEST                   MOVE IT IN
         MVC   ALC$DEST,PRTDEST
*
NODEST   DS    0H
         NI    ALC$FLG1,255-ALC$HOLD  ASSUME NO HOLD
         CLI   PRTHOLD,YES            IF HOLD SPECIFIED
         BNE   NOHOLD                   SAY HOLD IN PARM BLOCK
         OI    ALC$FLG1,ALC$HOLD
*
NOHOLD   DS    0H
         MVC   ALC$UCS,BLANKS         SET UCS TO BLANKS
         CLC   PRTUCS,BLANKS          IF UCS SPECIFIED
         BE    NOUCS                    MOVE UCS INTO PARM BLOCK
         MVC   ALC$UCS,PRTUCS
*
NOUCS    DS    0H
         MVC   ALC$FORM,BLANKS        SET FORMS TO BLANKS
         CLC   PRTFORM,BLANKS         IF FORMS SPECIFIED
         BE    NOFORMS                  MOVE FORM INTO PARM BLOCK
         MVC   ALC$FORM,PRTFORM
         SPACE
NOFORMS  DS    0H
         SLR   R1,R1                  CLEAR REGISTER
         IC    R1,PRTCOPY             GET NUMBER OF COPIES
         STH   R1,ALC$COPY            SET COPIES IN PARM BLOCK
         SPACE
         OI    ALC$FLG1,ALC$FREE      INDICATE FREE WHEN CLOSE
         CALL  DS@SYALC,((R10)),MF=(E,CALLPL),VL ALLOCATE SYSOUT FILE
         LTR   R15,R15                IF ALLOCATION FAILED, THEN
         BZ    ALCSOK                   SET RETURN CODE
         LA    R15,12
         B     ALCSORET                 AND WE'RE DONE
ALCSOK   DS    0H
         MVC   PRTDDNMR,ALC$DDNM      MOVE DDNAME RETURNED TO CALL PB
         MVC   SPBDDNAM,ALC$DDNM      MOVE DDNAME RETURNED TO SPAM PB
         MVI   SPBFUNC,SPBFOPEN       SPAM FUNCTION IS OPEN
         MVI   SPBOPT2,SPBOOUT        OPEN THIS FOR OUTPUT
         MVI   SPBOPT3,SPBPRINT       SAY THIS IS A PRINT FILE
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL CALL SPAM TO DO IT
         LH    R15,SPBRETC            GET SPAM RETURN CODE,
         LTR   R15,R15                IF OPEN NOT SUCCESSFUL
         BZ    ALCSOK2
         LA    R15,12                   SET RETURN CODE
         B     ALCSORET                 AND WE'RE DONE
ALCSOK2  DS    0H
         MVC   PRTSFB,SPBSFB          SAVE FILE BLOCK POINTER
         OI    PRTFLAG1,PRTALC        TURN FLAG ON
ALCSORET DS    0H
         L     R14,AL14SAVE           RESTORE RETURN REGISTER
         BR    R14                    RETURN TO CALLER
         TITLE 'DS@SCPDP -- PRINT THE PDS MEMBER'
***********************************************************************
*     THIS SUBROUTINE PERFORMS THE PRINT.  WE FIRST ISSUE THE OPEN    *
* (VIA SPAM) FOR THE PDS.  THE PRINT PROCESS IS SIMPLY READING THE    *
* PDS MEMBER, AND WRITING TO THE SYSOUT FILE WHICH IS ALREADY ALLOC-  *
* ATED AND OPENED.  REGISTER 15 IS RETURNED WITH AN APPROPRIATE NON-  *
* ZERO RETURN CODE FOR ANY ERRORS.  RETURN IS VIA REGISTER 14.        *
***********************************************************************
         SPACE
PRINTIT  DS    0H
         ST    R14,PR14SAVE           SAVE RETURN REGISTER
         MVI   TRUNCFLG,0             RESET THIS FLAG
         MVC   SPBDDNAM,PRTDDNM       MOVE IN DDNAME PASSED
         MVI   SPBFUNC,SPBFOPEN       SET SPAM FUNCTION CODE
         MVC   SPBMEM,PRTMEM          MOVE IN MEMBER NAME PASSED
         MVI   SPBOPT2,SPBOIN         OPEN THIS FOR INPUT
         MVI   SPBOPT3,0              TURN OFF PRINT FLAG SET ABOVE
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL CALL SPAM TO DO IT
         LH    R1,SPBRETC             GET SPAM RETURN CODE
         LTR   R1,R1                  IF NON-ZERO, THEN
         BZ    PRTOPNOK
         LA    R15,12                   SET RETURN CODE
         B     PRTEXIT                  AND WE'RE DONE
PRTOPNOK DS    0H
         MVC   INPTSFB,SPBSFB         SAVE FILE BLOCK POINTER
         CLI   PRTHEAD,NO             IF WE ARE TO PRINT HEADER,
         BE    PRTNOHD
         LA    R1,HEADER1               ADDRESS RECORD TO PUT
         ST    R1,SPBREC                SET RECORD ADDRESS FOR PUT
         LA    R1,HDR1LNG               GET LENGTH OF HEADER
         ST    R1,SPBRECL               SET RECORD LENGTH FOR PUT
         MVC   SPBSFB,PRTSFB            SET FILE BLOCK POINTER
         MVI   SPBFUNC,SPBFPUT          SET SPAM FUNCTION CODE
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GO PUT HEADER 1 TO FILE
         MVC   DSNAME,PRTDSNM           MOVE IN DATASET NAME
         MVC   MEMNAME,PRTMEM           MOVE IN MEMBER NAME
         MVC   RECORD(HDR2LNG),HEADER2  MOVE IN HEADER 2
         LA    R1,RECORD                ADDRESS RECORD TO PUT
         ST    R1,SPBREC                SET RECORD ADDRESS FOR PUT
         LA    R1,HDR2LNG               GET LENGTH OF HEADER
         ST    R1,SPBRECL               SET RECORD LENGTH FOR PUT
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GO PUT HEADER 2 TO FILE
         LA    R1,1                     SET TO PUT OUT BLANK LINE
         ST    R1,SPBRECL               SAVE LENGTH FOR THIS PUT
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GO PUT BLANK LINE TO FILE
         B     PRTITLP                CONTINUE
PRTNOHD  DS    0H
         MVI   FIRSTREC,X'FF'         SET FIRST RECORD FLAG ON
         MVI   RECORD,C'1'            SET PAGE EJECT FOR FIRST
PRTITLP  DS    0H
         MVI   SPBFUNC,SPBFGET        SPAM FUNCTION IS GET
         MVC   SPBSFB,INPTSFB         SET FILE BLOCK POINTER
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GO READ A RECORD
         LH    R1,SPBRETC             GET RETURN CODE
         LTR   R1,R1                  IF BAD RC,
         BZ    PRTRDOK
         SLR   R15,R15                  CLEAR FOR RETURN
         CLC   SPBREASN,=AL2(SPB2GT01)  IF END OF FILE,
         BE    PRTCLOSE                   WE ARE DONE
         LA    R15,12                   ELSE I/O ERROR, SO SET
         B     PRTEXIT                    RC, AND WE'RE DONE
PRTRDOK  DS    0H
         LA    R2,RECORD              SET ADDRESS FOR MOVE
         L     R3,SPBREC              ADDRESS RECORD TO MOVE
         LA    R3,0(,R3)              CHOB IT
         TM    SPBRECFM,SPBRECCA      IF RECORD DOES NOT HAVE ASA
         BO    PRTASA                      CONTROL CHARACTERS
         MVI   RECORD,C' '              SET CC TO BLANK
         CLI   FIRSTREC,X'FF'           IF FIRST RECORD,
         BNE   *+8
         MVI   RECORD,C'1'                SET CC TO PAGE EJECT
         MVI   FIRSTREC,X'00'             TURN SWITCH OFF
         LA    R2,1(,R2)                UP ADDRESS FOR MOVE
         B     PRTITSK1
PRTASA   DS    0H                     ELSE
         CLI   FIRSTREC,X'FF'           IF FIRST RECORD
         BNE   PRTITSK1
         MVI   FIRSTREC,X'00'             TURN SWITCH OFF
         CLI   PRTHEAD,NO                 IF NO HEADER PRINTED
         BE    PRTITSK1
         MVI   RECORD,C'1'                  SET CC FOR EJECT
         LA    R2,1(,R2)                    UP TARGET ADDRESS FOR MOVE
         LA    R3,1(,R3)                    UP SOURCE ADDRESS FOR MOVE
PRTITSK1 DS    0H
         L     R1,SPBRECL             GET LENGTH OF RECORD READ
         CH    R1,=H'133'             IF GREATER THAN MAX,
         BNH   *+8
         LH    R1,=H'133'               SET TO MAX
         BCTR  R1,0                     LENGTH FOR EXECUTE
         CLI   PRTSNUM,YES            IF SUPPRESS NUMBERS SPEC,
         BNE   PRTPNUM
         SH    R1,=H'8'                 SUBTRACT LENGTH FOR MOVE
         TM    SPBRECFM,SPBRECV         IF VARIABLE, THEN
         BZ    PRTPNUM
         LA    R3,8(,R3)                  GET PAST SEQUENCE NUMBERS
PRTPNUM  DS    0H
         EX    R1,MOVEREC             MOVE RECORD TO AREA
         LA    R1,1(,R1)              GET BACK RECORD LENGTH
         TM    SPBRECFM,SPBRECCA      IF ASA CHARACTER
         BO    *+8
         LA    R1,1(,R1)                ADD CC LENGTH WE PUT IT
         ST    R1,SPBRECL             SET IT FOR THE PUT
PUTIT    DS    0H
         MVC   SPBSFB,PRTSFB          SET FILE BLOCK POINTER
         MVI   SPBFUNC,SPBFPUT        SET SPAM FUNCTION CODE
         LA    R1,RECORD                ADDRESS RECORD TO PUT
         ST    R1,SPBREC                SET RECORD ADDRESS FOR PUT
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GO PUT OUR RECORD
         LH    R1,SPBRETC             GET RETURN CODE
         LTR   R1,R1                  IF NOT ZERO, THEN
         BZ    PRTITLP
         CLC   SPBREASN,=AL2(SPB2PT03)  IF DATA TRUNCATED, THEN
         MVI   TRUNCFLG,X'FF'             SET FLAG SAYING SO
         B     PRTITLP                LET'S LOOP UNTIL DONE
PRTCLOSE DS    0H
         MVC   SPBSFB,INPTSFB         SET FILE BLOCK POINTER
         MVI   SPBFUNC,SPBFCLOS       SET SPAM FUNCTION CODE
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GO CLOSE INPUT FILE
         CLI   TRUNCFLG,X'FF'         IF DATA WAS TRUNCATED, THEN
         BNE   PRTEXIT
         LA    R15,4                    SET RETURN CODE
PRTEXIT  DS    0H
         L     R14,PR14SAVE           RESTORE RETURN REGISTER
         BR    R14                    RETURN TO CALLER
         SPACE
MOVEREC  MVC   0(0,R2),0(R3)
         TITLE 'DS@SCPDP -- FREE SYSOUT, AND OUR DSA'
**********************************************************************
*     FREE THE SYSOUT FILE, AND FREE THE DSA.                        *
**********************************************************************
         SPACE
FREEIT   DS    0H
         MVI   SPBFUNC,SPBFCLOS       SET SPAM FUNCTION CODE
         MVC   SPBDDNAM,PRTDDNMR      MOVE IN SYSOUT DDNAME
         MVC   SPBSFB,PRTSFB          MOVE IN SPAM FILE BLOCK PTR
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL CALL SPAM TO DO IT
         XC    PRTDSA@,PRTDSA@          ZERO ADDRESS IN PARM BLOCK
         NI    PRTFLAG1,255-(PRTALC+PRTFREE) RESET THESE FLAGS
         CLI   ALLOCDSA,FLAGON        IF WE ALLOCATED OUR DSA
         BNE   RETURN
         LR    R2,R13                   COPY DSA ADDRESS
         LA    R1,DSALNG                GET DSA LENGTH
         L     R3,4(0,R13)              COPY REGISTER 13
         FREEMAIN RC,LV=(R1),A=(R2)     FREE OUT DSA
         LR    R13,R3                   RESTORE PREVIOUS SAVE AREA
         B     RETURN1                  WE ARE DONE
         TITLE 'DS@SCPDP -- STORAGE DEFINITIONS'
**********************************************************************
*          S T O R A G E          D E F I N I T I O N S              *
**********************************************************************
         SPACE
HEADER1  DC    C'1**** TSO FOREGROUND HARDCOPY ****'
HDR1LNG  EQU   *-HEADER1
         SPACE
HDR2     DC    CL8' DSNAME='
         DC    CL44' '
         DC    C'('
         DC    CL8' '
         DC    C')'
HDR2LNG  EQU   *-HDR2
BLANKS   DC    256CL1' '
*
YES      EQU   C'Y'
NO       EQU   C'N'
         SPACE
SYSALCPM DS@SYACP DSECT=MASK
         LTORG
         END   DS@SCPDP
