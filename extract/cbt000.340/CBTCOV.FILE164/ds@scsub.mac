DS@SCSUB TITLE 'DS@SCSUB -- SUBMIT A PDS MEMBER FOR BATCH EXECUTION'
         SPACE
***********************************************************************
*  PROGRAM-ID: DS@SCSUB                                               *
*                                                                     *
*  FUNCTION:                                                          *
*      THIS PROGRAM SUBMITS A SPECIFIED PDS MEMBER TO THE JOB ENTRY   *
*      SYSTEM FOR BATCH EXECUTION.  INPUT TO THIS PROGRAM IS A PARA-  *
*      METER BLOCK WHICH IS POINTED TO BY REGISTER 1.  THE PARAMETER  *
*      BLOCKS CONTAINS THE MEMBER NAME, THE DDNAME FOR THE INPUT, AND *
*      OTHER INFORMATION.                                             *
*                                                                     *
*  PROCESS:                                                           *
*      THIS PROGRAM FIRST OPENS THE INPUT DATASET, AND CHECKS TO SEE  *
*      THAT THE DATASET IS FIXED RECFM, AND LRECL OF 80.  IF NOT, A   *
*      RETURN CODE OF 4 IS SENT BACK.  NEXT, RECORDS ARE READ FROM    *
*      THE MEMBER UNTIL THE FIRST NON-COMMENT CARD IS FOUND.  IF THIS *
*      IS NOT A JOB CARD, THE RETURN CODE OF 4 IS SENT BACK TO THE    *
*      CALLER.  OTHERWISE,  A SYSOUT FILE IS DYNAMICALLY ALLOCATED    *
*      TO "INTRDR", AND THE PROCESS OF READING THE INPUT DATA AND     *
*      WRITING TO THE SYSOUT FILE BEGINS.  JOB CARDS ARE LOCATED, AND *
*      THE JOBNAME IS DETERMINED.  FOR EACH JOB FOUND, A MESSAGE IS   *
*      TPUT TO THE TERMINAL WHEN THE SUBMIT IS COMPLETE, GIVING THE   *
*      JOBNAME AND JOBID (RETURNED FROM VSAM ENDREQ).                 *
*                                                                     *
*  DSA INFO:                                                          *
*      THE CALLER MAY PASS A DSA ADDRESS IN THE DSA@ FIELD OF THE     *
*      PARM BLOCK (THIS IS THE PREFERRED METHOD).  IF THIS ADDRESS    *
*      IS ZERO, HOWEVER, THAN OUR DSA IS GETMAINED AND FREEMAINED     *
*      WITH EACH CALL.                                                *
*                                                                     *
*  ATTRIBUTES:  THIS PROGRAM IS REENTERABLE, REUSEABLE                *
*                                                                     *
*  REGISTER USAGE:                                                    *
*      R2-R10 WORK REGISTERS                                          *
*      R11 - BASE REGISTER                                            *
*      R12 - BASE FOR PRINT PARAMETER BLOCK                           *
*      R13-R15 STANDARD USAGE                                         *
*                                                                     *
*  RETURN CODES:                                                      *
*       0  - ALL IS WELL                                              *
*       4  - INPUT IS NOT JCL                                         *
*       8  - SOME I/O ERROR                                           *
*                                                                     *
* AUTHOR:   PHIL HEROLD, SYSTEMS DEVELOPER                            *
*           SAS INSTITUTE                                             *
*           CARY, NC                                                  *
*                                                                     *
* NOTE:  SAS INSTITUTE IS NOT RESPONSIBLE FOR THE SUPPORT OF THIS     *
*        PROGRAM--PLEASE DO NOT CALL SAS INSTITUTE TECHNICAL SUPPORT. *
*        HOWEVER, THE AUTHOR WILL BE GLAD TO PROVIDE ANY ASSISTANCE   *
*        NEEDED.                                                      *
*                                                                     *
*                                                                     *
* ACKNOWLEDGEMENT:  THE AUTHOR WOULD LIKE TO ESPECIALLY THANK DAVE    *
*                   LASALLE OF FIRST COMPUTER SERVICES, CHARLOTTE,    *
*                   NC, FOR HIS SUPPORT AND ENCOURAGEMENT.            *
*                                                                     *
*  CHANGE ACTIVITY:                                                   *
*                                                                     *
***********************************************************************
         COPY  DS@MACS
         TITLE 'OTHER EQUATES'
***********************************************************************
*                  O T H E R    E Q U A T E S                         *
***********************************************************************
         SPACE
FLAGON   EQU   255
FLAGOFF  EQU   0
         SPACE
ACBREG   EQU   R9
RPLREG   EQU   R10
         TITLE 'DS@SCSUB -- SUBMIT PARAMETER BLOCK'
***********************************************************************
*           S U B M I T      P A R A M E T E R     B L O C K          *
***********************************************************************
         SPACE
         DS@SUBPB DSECT=YES
         TITLE 'DS@SCSUB -- DSA DEFINITIONS'
***********************************************************************
*                    D S A       D E F I N I T I O N S                *
***********************************************************************
         SPACE
DS@SUBSA DSECT                        OUR DSA
SAVEAREA DS    18F
PM14SAVE DS    A                      SAVE AREA FOR INTERNAL LINKAGE
PGMRC    DS    F                      OUR RETURN CODE
VSAMRC   DS    F                      VSAM RETURN CODE
         SPACE
SYSDDNAM DS    CL8                    SYSOUT DDNAME RETURNED
SYSOSFB  DS    A(0)                   SYSOUT FILE BLOCK POINTER
INPTSFB  DS    A(0)                   INPUT FILE BLOCK POINTER
         SPACE
RECORD   DC    CL80' '                JCL RECORD LOADED FROM THIS AREA
         SPACE
         PRINT NOGEN
CALLPL   CALL  ,(,),MF=L              SPAM PARAMETER LIST
SUBACB   DS    XL(SUBACBL)
SUBRPL   DS    XL(SUBRPLL)
OPENPL   OPEN  0,MF=L
         PRINT GEN
         SPACE
MESSAGE  DC    CL40' '                MESSAGE BUFFER FOR TPUT
JOBNAME  DC    CL8' '                 JOBNAME
JOBNAMEL DC    F'0'                   LENGTH OF JOBNAME
JOBNAMET DC    CL8' '                 JOBNAME (TEMPORARY)
JOBNAMTL DC    F'0'                   LENGTH OF JOBNAME (TEMPORARY)
         SPACE
ALLOCDSA DC    AL1(0)                 WE ALLOCATED OUR DSA
JOBFLAG  DC    AL1(0)                 WE ALLOCATED OUR DSA
         DS    0F                     ALIGN TO FULLWORD
         TITLE 'DS@SCSUB -- SPAM PARAMETER BLOCK'
***********************************************************************
*        S P A M      P A R A M E T E R      B L O C K                *
***********************************************************************
         SPACE
         DS@SPPB DSECT=NO            SPAM PARAMETER BLOCK
         DS    0F
         TITLE 'DS@SCSUB -- SYSOUT ALLOCATION PARAMETER BLOCK'
***********************************************************************
*        S Y S A L C    P A R A M E T E R      B L O C K             *
***********************************************************************
         SPACE
SYSALCP  DS@SYACP DSECT=NO
         SPACE
ALCDSA   DC    100F'0'                DSA FOR SYSALC PROGRAM
         SPACE
         DS    0D
DSALNG   EQU   *-DS@SUBSA
         TITLE 'DS@SCSUB -- GENERAL PROCESS'
***********************************************************************
*                        D S @ S C S U B                             *
***********************************************************************
         SPACE
DS@SCSUB CSECT
         USING *,R15
         DS@START ,
         PRINT GEN
         LR    R11,R15                 SET UP BASE REGISTERS
         DROP  R15
         USING DS@SCSUB,R11
         L     R12,0(R1)              ADDRESS PRINT PARAMETER BLOCK
         USING DS@SUBPB,R12
         L     R1,SUBDSA@             IF WE DON'T HAVE DSA YET, THEN
         LA    R3,DSALNG                GET DSA LENGTH
         LTR   R1,R1
         BNZ   SCSUBOK1
         GETMAIN RC,LV=(R3)             THE GETMAIN HAD BETTER WORK
         ST    R1,SUBDSA@               SAVE DSA ADDRESS IN PARM BLOCK
         LA    R6,FLAGON                SET DSA ALLOCATED FLAG
SCSUBOK1 DS    0H
         LR    R2,R1                  GET DSA ADDRESS
         SLR   R5,R5                  CLEAR REG FOR MVCL
         MVCL  R2,R4                  AND ZERO IT OUT
         ST    R13,4(0,R1)            SET BACKWARD CHAIN
         ST    R1,8(0,R13)            SET FORWARD CHAIN
         LR    R13,R1                 GET DSA BASE
         USING DS@SUBSA,R13
         MVC   SAVEAREA(4),=C'SUBM'   SET PROGRAM IDENTIFIER
         STC   R6,ALLOCDSA            SET DSA FLAG
         MVC   SPBDSA,SUBSPMD@        SET SPAM DSA ADDRESS
         B     SUBMITIT               GO DO THE PROCESSING
         SPACE
RETURN   DS    0H
         CLI   ALLOCDSA,FLAGON        IF WE ALLOCATED OUR DSA
         BNE   RETURN1
         LR    R2,R13                   COPY DSA ADDRESS
         LA    R1,DSALNG                GET DSA LENGTH
         L     R3,4(0,R13)              COPY REGISTER 13
         FREEMAIN RC,LV=(R1),A=(R2)     FREE OUT DSA
         LR    R13,R3                   RESTORE PREVIOUS SAVE AREA
RETURN1  DS    0H
         L     R4,PGMRC               GET OUR RETURN CODE
         L     R13,4(0,R13)           RESTORE REGISTER 13
         L     R14,12(0,R13)          RESTORE RETURN REGISTER
         LR    R15,R4                 RESTORE RETURN CODE
         LM    R0,R12,20(R13)         RESTORE CALLER'S REGISTERS
         BR    R14                    AND LEAVE
         TITLE 'DS@SCSUB -- MAINLINE PROCESSING'
***********************************************************************
*     OPEN INPUT FILE, AND CHECK FOR VALID JCL.                       *
***********************************************************************
         SPACE
SUBMITIT DS    0H
         MVC   SPBDDNAM,SUBDDNM       MOVE IN DDNAME PASSED
         MVI   SPBFUNC,SPBFOPEN       SET SPAM FUNCTION CODE
         MVC   SPBMEM,SUBMEMNM        MOVE IN MEMBER NAME PASSED
         MVI   SPBOPT1,SPBODFLT       DEFAULT ACCESS METHOD, PLEASE
         MVI   SPBOPT2,SPBOIN         OPEN THIS FOR INPUT
         MVI   SPBOPT3,0              BE SURE THIS FLAG IS OFF
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL CALL SPAM TO DO IT
         LH    R1,SPBRETC             GET SPAM RETURN CODE
         LTR   R1,R1                  IF NON-ZERO, THEN
         BZ    SUBOPNOK
         MVC   PGMRC,=F'8'              SET RETURN CODE
         B     SUBEXIT                  AND WE'RE DONE
SUBOPNOK DS    0H
         CLI   SPBREC,SPBRECF         IF INPUT IS ^FIXED
         BE    SUBOKRF                       AND
         CLI   SPBREC,SPBRECF+SPBRECBR    ^FIXED BLOCK, THEN
         BE    SUBOKRF
         MVC   PGMRC,=F'4'              SET RETURN CODE
         B     SUBEXIT                  AND GET OUT
SUBOKRF  DS    0H
         CLC   SPBLRECL,=H'80'        IF LRECL ^= 80, THEN
         BE    SUBOKLR
         MVC   PGMRC,=F'4'              SET RETURN CODE
         B     SUBEXIT                  AND GET OUT
SUBOKLR  DS    0H
         MVI   SPBFUNC,SPBFGET        SPAM FUNCTION IS GET
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GO READ A RECORD
         LH    R1,SPBRETC             GET SPAM RETURN CODE
         LTR   R1,R1                  IF NON-ZERO (ASSUME EOF),
         BZ    SUBOKRD1
         MVC   PGMRC,=F'4'              SET RETURN CODE
         B     SUBEXIT                  SO GET OUT OF HERE
SUBOKRD1 DS    0H
         L     R4,SPBREC              GET ADDRESS OF RECORD RETURNED
         CLC   0(2,R4),=C'//'         IF FIRST CARD DOES NOT HAVE //
         BE    SUBOKCD1
         MVC   PGMRC,=F'4'              SET RETURN CODE
         B     SUBEXIT                  SO GET OUT OF HERE
SUBOKCD1 DS    0H
         CLI   2(R4),C'*'             IF CARD IS A COMMENT CARD, THEN
         BE    SUBOKLR                  GO GET THE NEXT ONE
*                                       (ALL COMMENT CARDS BEFORE
*                                        JOB CARD ARE FLUSHED)
         EJECT
***********************************************************************
*     CHECK FOR VALID JOB CARD.  IF THE FIRST NON-COMMENT CARD IS     *
*  NOT A JOB CARD, THEN ASSUME NOT JCL.  ELSE, ALLOCATE THE SYSOUT    *
*  FILE AND ISSUE THE VSAM OPEN TO GET THINGS. GOING.                 *
***********************************************************************
         SPACE
         BAL   R14,JCFIND             GO SEE IF JOB CARD
         LTR   R15,R15                IF ^JOB CARD, THEN
         BZ    SUB010
         MVC   PGMRC,=F'4'              ASSUME NOT JCL
         B     SUBEXIT                  AND GET OUT OF HERE
SUB010   DS    0H                     ELSE
         ST    R0,JOBNAMEL              SAVE LENGTH RETURNED
         LR    R2,R0                    COPY R0 FOR EXECUTE
         BCTR  R2,0                     GET EXECUTE LENGTH
         EX    R2,SUBMV02               MOVE TO DSA
         MVC   SYSALCP(ALC$LNG),SYSALCPM MOVE IN PARM BLOCK MASK
         LA    R1,ALCDSA              ADDRESS DSA FOR SYSALC
         ST    R1,ALC$DSA@            SAVE IN PARM BLOCK
         MVC   ALC$DDNM,=CL8'DS@SCSUB' SET DDNAME
         MVC   ALC$PGNM,=CL8'INTRDR'  SET PROGRAM NAME
         MVI   ALC$CLAS,C'A'          SET DEFAULT CLASS TO BLANK
         OI    ALC$FLG1,ALC$FREE      INDICATE FREE WHEN CLOSE
         LA    R4,SYSALCP             ADDRESS PARAMETER LIST FOR RTN
         CALL  DS@SYALC,((R4)),MF=(E,CALLPL),VL GO ALLOCATE SYSOUT FILE
         LTR   R15,R15                IF ALLOCATION FAILED, THEN
         BZ    ALCSOK                   SET RETURN CODE
         MVC   PGMRC,=F'8'              SET RETURN CODE
         B     SUBEXIT                  AND WE'RE DONE
ALCSOK   DS    0H
         MVC   SYSDDNAM,ALC$DDNM      MOVE DDNAME TO DSA FOR LATER
         LA    R2,SUBACB              ADDRESS ACB PARM LIST
         LA    R3,SUBRPL              ADDRESS RPL PARM LIST
         LA    R4,RECORD              ADDRESS WORK AREA
         GENCB BLK=ACB,AM=VSAM,MACRF=(ADR,SEQ,OUT),DDNAME=DS@SCSUB,    +
               MF=(G,(R2),SUBACBL)
         LR    ACBREG,R1              GET ADDRESS OF ACB RETURNED
         GENCB BLK=RPL,AM=VSAM,ACB=(ACBREG),OPTCD=(ADR,SEQ,SYN,NUP),   +
               AREA=(R4),RECLEN=80,MF=(G,(R3),SUBRPLL)
         MVC   OPENPL(OPENPLL),OPENPLM MOVE IN OPEN MASK
         LR    RPLREG,R1              GET ADDRESS OF RPL RETURNED
         OPEN  ((ACBREG)),MF=(E,OPENPL) ISSUE VSAM OPEN
         LTR   R15,R15                IF RETURN CODE NOT ZERO, THEN
         BZ    SUBLOOP
         MVC   PGMRC,=F'8'              SET RETURN CODE
         B     SUBEXIT
         SPACE
SUBMV02  MVC   JOBNAME(0),0(R1)       MVC EX SKELETON
         EJECT
***********************************************************************
*    MAIN LOOP - READ FROM INPUT, WRITE TO OUTPUT UNTIL END OF FILE.  *
*                LOOK FOR JOB CARDS, AND ISSUE ENDREQ'S AFTER EACH    *
*                JOB.                                                 *
***********************************************************************
         SPACE
SUBLOOP  DS    0H
         L     R4,SPBREC              ADDRESS RECORD
         MVC   RECORD,0(R4)           MOVE IN JCL RECORD
         PUT   RPL=(RPLREG)           DO THE PUT
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL GET NEXT RECORD
         LH    R1,SPBRETC             GET SPAM RETURN CODE
         LTR   R1,R1                  IF NON-ZERO (ASSUME EOF),
         BZ    SUBOKRD2
         ENDREQ RPL=(RPLREG)            FINISH THIS ONE
         BAL   R14,PUTMSG               GO PUT MESSAGE TO TERMINAL
         CLOSE ((ACBREG)),MF=(E,OPENPL)   CLOSE DOWN
         B     SUBEXIT                  AND WE'RE DONE
SUBOKRD2 DS    0H
         BAL   R14,JCFIND             GO SEE IF THIS IS A JOB CARD
         LTR   R15,R15                IF JOB CARD, THEN
         BNZ   SUBNOJC
         ST    R0,JOBNAMTL              SAVE LENGTH RETURNED
         LR    R2,R0                    COPY R0 FOR EXECUTE
         BCTR  R2,0                     GET EXECUTE LENGTH
         EX    R2,SUBMV03               MOVE TO DSA
         ENDREQ RPL=(RPLREG)            FINISH THIS ONE
         BAL   R14,PUTMSG               GO PUT MESSAGE TO TERMINAL
         MVC   JOBNAMEL,JOBNAMTL        RESTORE JOBNAME LENGTH
         MVC   JOBNAME,JOBNAMET         RESTORE JOBNAME
SUBNOJC  DS    0H
         B     SUBLOOP                AND LOOP
SUBEXIT  DS    0H
         MVI   SPBFUNC,SPBFCLOS       READY TO CLOSE INPUT FILE
         CALL  SPAM,(SPB),MF=(E,CALLPL),VL DO IT
         B     RETURN                 AND WE'RE REALLY DONE
         SPACE
SUBMV03  MVC   JOBNAMET,0(R1)         MVC EX SKELETON
         TITLE 'DS@SCSUB -- DETERMINE IF CARD IS JOB CARD'
**********************************************************************
*             J C F I N D     S U B R O U T I N E                    *
*                                                                    *
*    THIS SUBROUTINE DETERMINES IF THE JOB CARD ADDRESSED BY SPBREC  *
*  IS A VALID JCL JOB CARD.  IF IT IS, R15 IS RETURNED AS 0; IF IT   *
*  IS NOT, R15 IS RETURNED AS 4.  IF VALID JOB CARD, THEN R1 IS      *
*  RETURNED TO POINT TO THE NAME ON THE JOB CARD, AND REGISTER 0 IS  *
*  RETURNED AS THE LENGTH.  RETURN IS VIA REGISTER 14.               *
*                                                                    *
**********************************************************************
         SPACE
JCFIND   DS    0H
         LA    R15,4                  ASSUME IT ISN'T A JOB CARD
         L     R4,SPBREC              ADDRESS OUR RECORD
         LA    R4,0(,R4)              CHOB IT
         LR    R7,R4                  COPY THIS
         A     R7,SPBRECL             CALCULATE END OF THIS RECORD
         S     R7,=F'4'                 MINUS "JOB" LENGTH
         MVI   JOBFLAG,FLAGOFF        ASSUME NOT DEFAULT JOB NAME
         CLC   0(2,R4),=C'//'         IF FIRST TWO CHARS AREN'T THESE,
         BNE   JCFINDX                  THEN IT CAN'T BE A JOB CARD
         LA    R4,2(,R4)              GET PAST THESE CHARACTERS
         LR    R1,R4                  SAVE THIS FOR NOW
         CLI   0(R4),C'*'             IF COMMENT CARD, THEN
         BE    JCFINDX                  WE'RE DONE
         LR    R5,R4                  COPY START POINT
         CLI   0(R4),C' '             IF THIS IS A BLANK, THEN
         BNE   JCFIND10
         MVI   JOBFLAG,FLAGON           SAY DEF. JOB NAME (IF JOB CARD)
         B     JCFIND30                 AND SKIP
JCFIND10 DS    0H
         LA    R4,1(,R4)              GET TO NEXT BYTE
         CLI   0(R4),C' '             IF NEXT IS NOT BLANK
         BE    JCFIND20
         CR    R4,R7                    IF AT END OF RECORD, THEN
         BNL   JCFINDX                    CAN'T BE A JOB CARD
         B     JCFIND10               ELSE TRY NEXT BYTE
JCFIND20 DS    0H
         LR    R6,R4                  COPY CURRENT POSITION
         SR    R4,R5                  SUBTRACT TO GET LENGTH OF NAME
         C     R4,=F'8'               IF > 8, THEN
         BH    JCFINDX                  CAN'T BE A JOB CARD
         LR    R5,R6                  COPY CURRENT POSITION
JCFIND30 DS    0H
         LA    R5,1(,R5)              NEXT CHARACTER POSITION
         CLI   0(R5),C' '             LOOK FOR NEXT NONBLANK
         BNE   JCFIND40
         CR    R5,R7                  IF AT END OF RECORD, THEN
         BNL   JCFINDX                  CAN'T BE A JOB CARD
         B     JCFIND30
JCFIND40 DS    0H
         CLC   0(4,R5),=C'JOB '       IF THIS IS A JOB CARD, THEN
         BNE   JCFINDX
         SLR   R15,R15                  SAY SO VIA RC
         CLI   JOBFLAG,FLAGON           IF DEFAULT JOBNAME, THEN
         BNE   JCFIND50
         LA    R1,=CL8'        '          POINT TO IT
         L     R0,=F'8'                   SET LENGTH
         B     JCFINDX                    AND DONE
JCFIND50 DS    0H                       ELSE
         LR    R0,R4                      SET LENGTH CALCULATED
JCFINDX  DS    0H
         BR    R14                    RETURN TO CALLER
         TITLE 'DS@SCSUB -- WRITE MESSAGE TO TERMINAL SUBROUTINE'
**********************************************************************
*             P U T M S G      S U B R O U T I N E                   *
*                                                                    *
*    THIS SUBROUTINE BUILDS A MESSAGE IN THE MESSAGE BUFFER SAYING   *
*  THE JOB WAS SUBMITTED, AND ISSUES THE TPUT TO GET IT TO THE       *
*  TERMINAL.  RETURN IS VIA REGISTER 14, WHICH IS SAVED.  THE NAME   *
*  OF THE JOB IS IN JOBNAME, AND ITS LENGTH IN JOBNAMEL.  THE JOBID  *
*  IS GOTTEN FROM THE RPL FIELD (RPLRBAR AT OFFSET X'3C').           *
*                                                                    *
**********************************************************************
         SPACE
PUTMSG   DS    0H
         ST    R14,PM14SAVE           SAVE RETURN REGISTER
         LA    R1,MESSAGE             ADDRESS MESSAGE BUFFER
         LR    R2,R1                  COPY START
         MVC   0(JOBMSG1L,R1),JOBMSG1 MOVE IN FIRST PART OF MESSAGE
         LA    R1,JOBMSG1L(,R1)       GET PAST IT
         L     R3,JOBNAMEL            GET LENGTH OF JOBNAME
         BCTR  R3,0                   SET EXECUTE LENGTH
         EX    R3,PUTMSGMV            MOVE IT IN
         LA    R1,1(R3,R1)            GET PAST THIS TEXT
         MVI   0(R1),C'('             MOVE IN '('
         LA    R1,1(,R1)              GET PAST THIS
         MVC   0(8,R1),60(RPLREG)     MOVE IN JOBID
         LA    R1,8(,R1)              GET PAST THIS BOY
         MVI   0(R1),C')'             MOVE IN '('
         LA    R1,1(,R1)              GET PAST THIS
         MVC   0(JOBMSG2L,R1),JOBMSG2 MOVE IN LAST PART OF MESSAGE
         LA    R1,JOBMSG2L(,R1)       GET PAST IT
         SR    R1,R2                  CALCULATE LENGTH OF MESSAGE
         LA    R2,MESSAGE             RE-ADDRESS MESSAGE BUFFER
         TPUT  (R2),(R1)              DO THE TPUT
PUTMSGX  DS    0H
         L     R14,PM14SAVE           RESTORE RETURN REGISTER
         BR    R14                    RETURN TO CALLER
         SPACE
JOBMSG1  DC    C'DS@00001 JOB '       PART OF MESSAGE
JOBMSG1L EQU   *-JOBMSG1              LENGTH OF ABOVE
         SPACE
JOBMSG2  DC    C' SUBMITTED'          PART OF MESSAGE
JOBMSG2L EQU   *-JOBMSG2              LENGTH OF ABOVE
         SPACE
PUTMSGMV MVC   0(0,R1),JOBNAME        MVC SKELETON
         TITLE 'DS@SCSUB -- STORAGE DEFINITIONS'
**********************************************************************
*          S T O R A G E          D E F I N I T I O N S              *
**********************************************************************
         SPACE
BLANKS   DC    CL80' '
         SPACE
OPENPLM  OPEN  0,MF=L
OPENPLL  EQU   *-OPENPLM
         SPACE
SYSALCPM DS@SYACP DSECT=MASK
         LTORG
         END   DS@SCSUB
