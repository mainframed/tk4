DS@SCINF TITLE 'DS@SCINF -- OBTAIN DATASET INFORMATION'
         SPACE
***********************************************************************
*  PROGRAM-ID: DS@SCINF                                               *
*                                                                     *
*  FUNCTION:                                                          *
*      THIS PROGRAM OBTAINS DATASET INFORMATION AND RETURNS IT TO     *
*      THE CALLING PROGRAM IN THE CALLER'S PARAMETER BLOCK.  ALL OF   *
*      THE INFORMATION IS OBTAINED FROM THE DSCB, WHICH IS OBTAINED.  *
*                                                                     *
*  DSA INFO:                                                          *
*      THE CALLER MAY PASS A DSA ADDRESS IN THE DSA@ FIELD OF THE     *
*      PARM BLOCK (THIS IS THE PREFERRED METHOD).  IF THIS ADDRESS    *
*      IS ZERO, HOWEVER, THAN OUR DSA IS GETMAINED AND FREEMAINED     *
*      WITH EACH CALL.                                                *
*                                                                     *
*  ATTRIBUTES:  THIS PROGRAM IS REENTERABLE, REUSEABLE                *
*                                                                     *
*  REGISTER USAGE:                                                    *
*      R2-R9  WORK REGISTERS                                          *
*      R10 - BASE FOR DSCB                                            *
*      R11 - BASE REGISTER                                            *
*      R12 - BASE FOR PARAMETER BLOCK                                 *
*      R13-R15 STANDARD USAGE                                         *
*                                                                     *
*  RETURN CODES:                                                      *
*       0  - ALL IS WELL                                              *
*       8  - SOME I/O ERROR                                           *
*                                                                     *
* AUTHOR:   PHIL HEROLD, SYSTEMS DEVELOPER                            *
*           SAS INSTITUTE                                             *
*           CARY, NC                                                  *
*                                                                     *
* NOTE:  SAS INSTITUTE IS NOT RESPONSIBLE FOR THE SUPPORT OF THIS     *
*        PROGRAM--PLEASE DO NOT CALL SAS INSTITUTE TECHNICAL SUPPORT. *
*        HOWEVER, THE AUTHOR WILL BE GLAD TO PROVIDE ANY ASSISTANCE   *
*        NEEDED.                                                      *
*                                                                     *
*                                                                     *
* ACKNOWLEDGEMENT:  THE AUTHOR WOULD LIKE TO ESPECIALLY THANK DAVE    *
*                   LASALLE OF FIRST COMPUTER SERVICES, CHARLOTTE,    *
*                   NC, FOR HIS SUPPORT AND ENCOURAGEMENT.            *
*                                                                     *
*  CHANGE ACTIVITY:                                                   *
*                                                                     *
***********************************************************************
         COPY  DS@MACS
         TITLE 'OTHER EQUATES'
***********************************************************************
*                  O T H E R    E Q U A T E S                         *
***********************************************************************
         SPACE
FLAGON   EQU   255
FLAGOFF  EQU   0
         TITLE 'DS@SCINF -- INPUT PARAMETER BLOCK'
***********************************************************************
*           I N P U T        P A R A M E T E R     B L O C K          *
***********************************************************************
         SPACE
         DS@INFPB DSECT=YES
         TITLE 'DS@SCINF -- DSA DEFINITIONS'
***********************************************************************
*                    D S A       D E F I N I T I O N S                *
***********************************************************************
         SPACE
DS@INFSA DSECT                        OUR DSA
SAVEAREA DS    18F
WKD      DC    D'0'                   DOUBLE WORK WORK AREA
R14SAVE  DS    A(0)                   SAVE AREA FOR INTERNAL LINKAGE
PGMRC    DS    F'0'                   OUR RETURN CODE
         SPACE
HWK1     DC    H'0'                   HALF WORD WORK AREA
HWK2     DC    H'0'                   HALF WORD WORK AREA
VOLTKCYL DC    H'19'                  # TRKS/CYL FOR 3350
WXTNT    DS    CL5
ALLOCDSA DC    AL1(0)
         SPACE
VTOCCHHR DC    XL5'0'                 TRACK ADDR WORK AREA
         DS    0F
CALLPL   CALL  ,(,,,),MF=L            CALL PARM BLOCK
         DS    0F
DEVTYP@  DC    6F'0'
         DS    0F
SEEKCAM  CAMLST SEEK,0,0,0
         DS    0F
SRCHCAM  CAMLST SEARCH,0,0,0
         DS    0F
PARM     DC    A(0)                     PREFIX ADDRESS
         DC    A(0)                     DSN ADDRESS
         DC    A(0)                     VOL SER ADDRESS
         DC    A(0)                     ADDRESS OF WORKAREA
         DC    A(0)                     ADDRESS OF TRACKS PER CYLINDER
         DC    CL10' '
         SPACE
BUF1     DS    0D
         DS    XL140'0'
         SPACE
         DS@CNDPB DSECT=NO            CONVERT DATE ROUTINE PARM BLOCK
         DS    0D
DSALNG   EQU   *-DS@INFSA
         TITLE 'DS@SCINF -- GENERAL PROCESS'
***********************************************************************
*                        D S @ S C I N F                             *
***********************************************************************
         SPACE
DS@SCINF CSECT
         USING *,R15
         DS@START ,
         PRINT GEN
         LR    R11,R15                 SET UP BASE REGISTERS
         DROP  R15
         USING DS@SCINF,R11
         L     R12,0(R1)              ADDRESS PRINT PARAMETER BLOCK
         USING DS@INFPB,R12
         L     R1,INFDSA@             IF WE DON'T HAVE DSA YET, THEN
         LA    R3,DSALNG                GET DSA LENGTH
         LTR   R1,R1
         BNZ   SCINFOK1
         GETMAIN RC,LV=(R3)             THE GETMAIN HAD BETTER WORK
         ST    R1,INFDSA@               SAVE DSA ADDRESS IN PARM BLOCK
         LA    R6,FLAGON                SET DSA ALLOCATED FLAG
SCINFOK1 DS    0H
         LR    R2,R1                  GET DSA ADDRESS
         SLR   R5,R5                  CLEAR REG FOR MVCL
         MVCL  R2,R4                  AND ZERO IT OUT
         ST    R13,4(0,R1)            SET BACKWARD CHAIN
         ST    R1,8(0,R13)            SET FORWARD CHAIN
         LR    R13,R1                 GET DSA BASE
         USING DS@INFSA,R13
         MVC   SAVEAREA(4),=C'INFO'   SET PROGRAM IDENTIFIER
         STC   R6,ALLOCDSA            SET DSA FLAG
         B     DOIT                   GO DO THE PROCESSING
         SPACE
RETURN   DS    0H
         CLI   ALLOCDSA,FLAGON        IF WE ALLOCATED OUR DSA
         BNE   RETURN1
         LR    R2,R13                   COPY DSA ADDRESS
         LA    R1,DSALNG                GET DSA LENGTH
         L     R3,4(0,R13)              COPY REGISTER 13
         FREEMAIN RC,LV=(R1),A=(R2)     FREE OUT DSA
         LR    R13,R3                   RESTORE PREVIOUS SAVE AREA
RETURN1  DS    0H
         L     R4,PGMRC               GET OUR RETURN CODE
         L     R13,4(0,R13)           RESTORE REGISTER 13
         L     R14,12(0,R13)          RESTORE RETURN REGISTER
         LR    R15,R4                 RESTORE RETURN CODE
         LM    R0,R12,20(R13)         RESTORE CALLER'S REGISTERS
         BR    R14                    AND LEAVE
         TITLE 'DS@SCINF -- MAINLINE PROCESSING'
***********************************************************************
*     DO INITIALIZATION OF DSA FIELDS, DO THE OBTAINS, AND SET THE    *
*   RETURNED INFORMATION IN THE CALLER'S PARAMETER BLOCK.             *
***********************************************************************
         SPACE
DOIT     DS    0H
         BAL   R14,INIT               GO INITIALIZE DSA FIELDS
         OBTAIN SRCHCAM
         LTR   R15,R15            IF OBTAIN FAILED, THEN
         BZ    OBTNOK
         MVC   PGMRC,=F'8'          SET RETURN CODE
         B     DOITX                AND GET OUT
OBTNOK   DS    0H
         BAL   R14,GETDEVTY       GO GET DEVICE TYPE
         BAL   R14,GETDSORG       GO GET DATA SET ORGANIZATION
         BAL   R14,GETRECFM       GO GET RECORD FORMAT
         LA    R5,BUF1+9          ADDRESS BEGINNING OF DATE CREATED
         LA    R6,INFCRTDT        ADDRESS PARM BLOCK VARIABLE
         DO    CONVDATE           GO CONVERT DATE CREATED
         LA    R5,BUF1+12         ADDRESS BEGINNING OF EXP. CREATED
         LA    R6,INFEXPDT        ADDRESS TABLE VARIABLE TO PUT RESULT
         DO    CONVDATE           GO CONVERT DATE CREATED FOR TABLE
         CLC   INFEXPDT,BLANKS    IF NO EXPIRATION DATE, THEN
         BNE   *+10
         MVC   INFEXPDT,=CL8'**NONE**' SAY SO
         LH    R1,BUF1+44         GET DATA SET LRECL
         ST    R1,INFLRECL        IF LRECL = 0, THEN
         LH    R1,BUF1+42         GET DATA SET BLKSIZE
         ST    R1,INFBLKSZ        CONVERT BLKSIZE IN R4 TO DECIMAL
         BAL   R14,CALCSPC        CALCULATE SPACE INFO
DOITX    DS    0H
         B     RETURN
         TITLE 'INITIALIZATION SUBROUTINE'
**********************************************************************
*                 I N I T         S U B R O U T I N E                *
*                                                                    *
*    THIS SUBROUTINE DOES ALL OF THE INITIALIZATION REQUIRED.        *
*    INPUT: R14 - RETURN ADDRESS                                     *
*                                                                    *
**********************************************************************
         SPACE
INIT     DS    0H
         MVC   SEEKCAM(SEEKCAML),SEEKCAMM MOVE IN MASK
         MVC   SRCHCAM(SRCHCAML),SRCHCAMM MOVE IN MASK
         LA    R1,VTOCCHHR            ADDRESS THIS FIELD
         LA    R2,INFVOLSR            ADDRESS THIS FIELD
         LA    R3,BUF1                ADDRESS THIS FIELD
         STM   R1,R3,SEEKCAM+4        BUILD SEEK CAMLST
         LA    R1,INFDSNAM            ADDRESS THIS FIELD
         LA    R2,INFVOLSR            ADDRESS THIS FIELD
         LA    R3,BUF1                ADDRESS THIS FIELD
         STM   R1,R3,SRCHCAM+4        BUILD SEEK CAMLST
INITRET  BR    R14                    RETURN TO CALLER
         SPACE
SEEKCAMM CAMLST SEEK,0,0,0
SEEKCAML EQU   *-SEEKCAMM             LENGTH OF ABOVE
         SPACE
SRCHCAMM CAMLST SEARCH,0,0,0
SRCHCAML EQU   *-SRCHCAMM             LENGTH OF ABOVE
         TITLE 'DS@FLSTC - CALCULATE SPACE'
**********************************************************************
*                                                                    *
*    THIS SUBROUTINE CALCULATES THE SPACE ALLOCATION INFORMATION FOR *
*  THE DATASET GIVEN.  UPON ENTRY, AN OBTAIN HAS ALREADY BEEN DONE   *
*  TO GET US THE F4 DSCB, AND THE INFORMATION RETURNED IS IN BUF1.   *
*  WE CALCULATE ALL OF THE INFORMATION NEEDED TO COMPLETE THE        *
*  CALLER'S PARAMETER BLOCK.                                         *
*                                                                    *
**********************************************************************
         SPACE
CALCSPC  DS    0H                  SAVE RETURN REGISTER
         ST    R14,R14SAVE
         SLR   R1,R1               CLEAR REG
         ST    R1,INFPRIM          BE SURE THESE FIELDS ARE ZERO FIRST
         ST    R1,INFSEC
         ST    R1,INFALLOE
         ST    R1,INFALLOC
         ST    R1,INFUSEDE
         MVI   INFATYP,INFATRK     ASSUME TRACKS (BLOCKS NOT REPORTED)
         TM    BUF1+50,X'C0'       IF CYLINDER ALLOCATION, THEN
         BNO   *+8
         MVI   INFATYP,INFACYL       REPORT AS CYLINDERS
         L     R1,BUF1+50          GET SECONDARY QUANTITY NUMBER
         LA    R1,0(,R1)           CHOB IT
         ST    R1,INFSEC           SAVE IN PARM BLOCK
         LH    R6,BUF1+54          GET LAST RELATIVE TRK USED
         CLI   BUF1+56,X'00'       IS TRK UNUSED?
         BE    *+8                 YES
         LA    R6,1(,R6)           NO, ANOTHER TRACK
         ST    R6,INFUSEDA         THIS IS TRACKS USED
         SLR   R2,R2               ZERO REG 2
         IC    R2,BUF1+15          PICK UP NUMBER OF EXTENTS
         ST    R2,INFALLOE         RETURN IN PARM BLOCK
         LA    R3,1                SET EXTENT COUNTER
         SR    R4,R4               CLEAR R4 TO TRK ACCUMULATION
         LA    R5,BUF1+61          POINT TO FIRST EXTENT
VXTLOOP  DS    0H
         LH    R1,6(R5)             LOAD HI-CYL TO HWD
         MH    R1,VOLTKCYL          CONVERT CYL TO TRK
         AH    R1,8(R5)             ADD HI-TRK
         LH    R0,2(R5)             LOAD LOW-CYL
         MH    R0,VOLTKCYL          CONVERT CYL TO TRK
         AH    R0,4(R5)             ADD LOW-CYL
         SR    R1,R0                GET TOTAL FOR THIS EXTENT
         LA    R1,1(,R1)            ADD FUDGE
         C     R3,=F'1'             IF THIS IS FIRST EXTENT, THEN
         BNE   *+8
         ST    R1,INFPRIM             SAVE AS PRIMARY QUANTITY
         AR    R4,R1                GET TOTAL AND ACCUMULATE
         L     R7,INFUSEDE          GET USED EXTENTS
         LTR   R7,R7                IF NOT YET CALCULATED, THEN
         BNZ   VXTSK1
         CR    R4,R6                  IF LAST TRACK MAY BE IN EXTENT
         BL    *+8
         ST    R3,INFUSEDE              SAVE USED EXTENTS
VXTSK1   DS    0H
         CR    R3,R2                IF DONE WITH LAST EXTENT
         BE    CALCDONE               GET OUT OF LOOP
         LA    R3,1(R3)             BUMP TO EXTENT COUNTER
         C     R3,=F'4'             FOURTH EXTENT?
         BE    VXT4                   BRANCH IF SO
         C     R3,=F'8'             EIGHTH EXTENT?
         BE    VXT8
         LA    R5,10(R5)            ELSE BUMP EXTENT POINTER
         B     VXTLOOP              AND GO TO NEXT EXTENT
VXT4     DS    0H
         MVC   VTOCCHHR(5),BUF1+91  POINT NEXT DSCB(F2 OR F3)
VXT4OBT  DS    0H
         OBTAIN SEEKCAM
         CLI   BUF1+44,C'3'         IF IT F3 DSCB
         BE    VXT4F3               BRANCH IF SO
         MVC   VTOCCHHR(5),BUF1+135  ELSE ITS F2-POINT TO F3
         B     VXT4OBT
VXT4F3   DS    0H
         LA    R5,BUF1+4            POINT TO FIRST EXTENT IN F3
         B     VXTLOOP              CONTINUE LOOP FOR SIZE
VXT8     DS    0H
         LA    R5,BUF1+45           SKIP OVER F3 ID IN F3 DSCB
         B     VXTLOOP            CONTINUE LOOP FOR SIZE
CALCDONE DS    0H
         ST    R4,INFALLOC        SAVE CALCULATE # OF TRKS ALLOCATED
         CLI   INFATYP,INFACYL    IF CYLINDER ALLOCATION
         BNE   CALCX                NEED TO CONVERT TRACKS TO CYLINDERS
         LH    R0,VOLTKCYL          GET TRACKS/CYLINDER
         SLR   R2,R2                CLEAR FOR DIVIDE
         L     R3,INFPRIM           GET # IN PRIMARY EXTENT
         DR    R2,R0                CONVERT TO CYLINDERS
         LTR   R2,R2                IF REMAINDER, THEN
         BZ    *+8
         LA    R3,1(,R3)              ADD 1 TO IT
         ST    R3,INFPRIM           SAVE IT BACK
         SLR   R2,R2                CLEAR FOR DIVIDE
         L     R3,INFALLOC          GET # OF TRACKS ALLOCATED
         DR    R2,R0                CONVERT TO CYLINDERS
         LTR   R2,R2                IF REMAINDER, THEN
         BZ    *+8
         LA    R3,1(,R3)              ADD 1 TO IT
         ST    R3,INFALLOC          SAVE IT BACK
         SLR   R2,R2                CLEAR FOR DIVIDE
         L     R3,INFUSEDA          GET # OF USED TRACKS
         DR    R2,R0                CONVERT TO CYLINDERS
         LTR   R2,R2                IF REMAINDER, THEN
         BZ    *+8
         LA    R3,1(,R3)              ADD 1 TO IT
         ST    R3,INFUSEDA          SAVE IT BACK
CALCX    DS    0H
         ST    R14,R14SAVE
         BR    R14                RETURN TO CALLER
         TITLE 'RECORD FORMAT CONVERSION ROUTINE'
**********************************************************************
*               G E T R E C F M        R O U T I N E                 *
*                                                                    *
*    THIS SUBROUTINE SIMPLY CONVERTS THE RECORD FORMAT IN THE DSCB   *
*    USING A TABLE LOOKUP INTO THE PRINTABLE 3-BYTE VERSION OF THE   *
*    RECORD FORMAT.                                                  *
*       INPUT: RECORD FORMAT IN DSCB (ADDRESSED BY R10)              *
*       OUTPUT: PRINTABLE RECFM IN PARM BLOCK                        *
*                                                                    *
**********************************************************************
         SPACE
GETRECFM DS   0H
         LA   R1,RECFMTBL          ADDRESS BEGINNING OF TABLE
GETRFMLP DS   0H
         CLI  0(R1),X'FF'          DO UNTIL END OF THE TABLE
         BE   GETRFMRT
         CLC  0(1,R1),BUF1+40      IS THIS THE ONE?
         BE   GOTRECFM             Y.THEN SKIP
         LA   R1,4(R1)             ELSE NEXT RECFM TABLE ENTRY
         B    GETRFMLP             AND LOOP
GOTRECFM DS   0H
         MVC  INFRECFM,1(R1)       IF HERE, FOUND IT, SO MOVE IT
GETRFMRT DS   0H
         BR    R14                 RETURN TO CALLER
         SPACE
RECFMTBL DC    X'40',C'V  '
         DC    X'44',C'VA '
         DC    X'50',C'VB '
         DC    X'54',C'VBA'
         DC    X'58',C'VBS'
         DC    X'80',C'F  '
         DC    X'84',C'FA '
         DC    X'90',C'FB '
         DC    X'94',C'FBA'
         DC    X'98',C'FBS'
         DC    X'C0',C'U  '
         DC    X'FF'
         TITLE 'DS ORGANIZATION CONVERSION ROUTINE'
**********************************************************************
*               G E T D S O R G        R O U T I N E                 *
*                                                                    *
*    THIS SUBROUTINE SIMPLY CONVERTS THE DS ORGANIZATION IN THE DSCB *
*    USING A TABLE LOOKUP INTO THE PRINTABLE 2-BYTE VERSION OF THE   *
*    DS ORG FOR PRINTING.                                            *
*       INPUT: DSORG IN DSCB (ADDRESSED BY R10)                      *
*       OUTPUT: PRINTABLE DSORG IN PARAMETER BLOCK
*                                                                    *
**********************************************************************
         SPACE
GETDSORG DS    0H
         LA    R1,DSORGTBL          ADDRESS BEGINNING OF TABLE
GETDSOLP DS    0H
         CLI   0(R1),X'FF'          DO UNTIL END OF THE TABLE
         BE    GETDSORT
         CLC   0(1,R1),BUF1+38      IS THIS THE ONE?
         BE    GOTDSORG             Y.THEN SKIP
         LA    R1,3(R1)             ELSE NEXT DSORG TABLE ENTRY
         B     GETDSOLP             AND LOOP
GOTDSORG DS    0H
         MVC   INFDSORG,1(R1)      IF HERE, FOUND IT, SO MOVE IT
GETDSORT DS    0H
         BR    R14                 RETURN TO CALLER
         SPACE
DSORGTBL DC    X'80',C'IS'
         DC    X'40',C'PS'
         DC    X'20',C'DA'
         DC    X'02',C'PO'
         DC    X'01',C'U '
         DC    X'FF'
         TITLE 'DS@SCINF - GETDEVTY (TRANSLATE DEVICE TYPE)'
**********************************************************************
*              G E T D E V T Y     S U B R O U T I N E               *
*                                                                    *
*     THE SUBROUTINE ISSUES THE DEVTYPE MACRO TO OBTAIN THE UCBTYP   *
*   FIELD, AND THEN TRANSLATES THIS INTO A FOUR-CHARACTER EQUIVALENT *
*   DEVICE NAME (E.G., "3350").                                      *
*                                                                    *
*                                                                    *
**********************************************************************
         SPACE
GETDEVTY DS    0H
         ST    R14,R14SAVE            SAVE RETURN REGISTER
         DEVTYPE INFDDNAM,DEVTYP@,DEVTAB
         MVC   VOLTKCYL,DEVTYP@+10    SET TRACKS/CYLINDER
         LA    R1,DEVTBL              ADDRESS DEVICE TABLE
         LA    R2,DEVTBL#             GET NUMBER IN TABLE
         MVC   INFDEVTY,BLANKS        ASSUME WE WON'T FIND IT
GETDEVLP DS    0H                     DO UNTIL (END OF TABLE)
         CLC   0(1,R1),DEVTYP@+3     IF THIS ENTRY IS NOT IT,
         BE    GETDEVLX
         LA    R1,DEVTBLL(,R1)            NEXT ENTRY
         BCT   R2,GETDEVLP            END
         B     GETDEVLP               IF HERE, NOT FOUND, SO DONE
GETDEVLX DS    0H
         MVC   INFDEVTY,1(R1)         ELSE MOVE IN VALUE
GETDEVTX DS    0H
         L     R14,R14SAVE            RESTORE RETURN REGISTER
         BR    R14                    RETURN TO CALLER
         SPACE
DEVTBL   DS    0H
         DC    X'06',C'2305'
DEVTBLL  EQU   *-DEVTBL
         DC    X'07',C'2305'
         DC    X'08',C'2314'
         DC    X'09',C'3330'
         DC    X'0A',C'3340'
         DC    X'0B',C'3350'
         DC    X'0C',C'3375'
         DC    X'0D',C'3330'
         DC    X'0E',C'3380'
DEVTBL#  EQU   (*-DEVTBL)/DEVTBLL
         TITLE 'CONVERT DATE SUBROUTINE'
**********************************************************************
*               C O N V D A T E        R O U T I N E                 *
*                                                                    *
*    THIS SUBROUTINE CONVERTS THE DATE ADDRESSED BY REGISTER 5. IT IS*
*    IN THE FORM X'YYDDDD', WHERE YY IS THE YEAR IN HEX, AND DDDD IS *
*    THE JULIAN DAY IN HEX.  THIS SUBROUTINE CONVERTS THIS INTO A    *
*    FORM ACCEPTABLE TO THE CONVDATE EXTERNAL SUBROUTINE, THAT IS    *
*    P'YYDDD'.  CONVDATE CONVERTS THIS TO C'MMDDYY', AND THEN IT'S   *
*    JUST A MATTER OF MOVING THESE FIELDS TO OUR TABLE VARIABLE,     *
*    ADDRESSED BY REGISTER 6, INCLUDING THE DATE SLASHES.  IF THERE  *
*    IS NO DATE (X'000000'), THEN NOTHING IS DONE HERE.              *
*       INPUT: R5 - DATE TO BE CONVERTED IN FORM X'YYDDDD'           *
*              R6 - ADDRESS OF FIELD TO PUT CONVERTED DATE           *
*       OUTPUT: CONVERTED DATE IN FIELD ADDRESSED BY REGISTER 6      *
*                                                                    *
**********************************************************************
         SPACE
CONVDATE DS    0H
         ST    R14,R14SAVE
         MVC   0(8,R6),BLANKS         BE SURE IT IS BLANKS
         CLC   0(3,R5),=XL3'0'        IF DATE IS ZERO, THEN
         BER   R14                      NOTHING TO DO
         ST    R14,R14SAVE            SAVE RETURN REGISTER
         SLR   R2,R2                  CLEAR WORK REGISTER
         IC    R2,0(R5)               GET YY
         CVD   R2,WKD                 CONVERT IT TO PACKED DECIMAL
         L     R2,WKD+4               GET IT BACK
         SRL   R2,4                   REMOVE PACKED SIGN
         STC   R2,JULDATE             PUT YY IN PARAMETER LIST
         LH    R2,1(R5)               GET DDD
         CVD   R2,WKD                 CONVERT IT TO PACKED DECIMAL
         MVC   CONVTYPE,=C'JG'        CONVERT JULIAN TO GREGORIAN
         MVC   JULDATE+1(2),WKD+6     PUT DDD IN PARAMETER LIST
         LA    R2,CNVDATPB            ADDRESS PARAMETER BLOCK
         CALL  DS@CNVDT,((R2)),VL,MF=(E,CALLPL) CALL PROGRAM
         MVC   0(8,R6),GREGDATE       MOVE IN DATE FROM ROUTINE
         L     R14,R14SAVE            RESTORE RETURN REGISTER
         BR    R14                    RETURN TO CALLER
         TITLE 'DS@SCINF -- STORAGE DEFINITIONS'
**********************************************************************
*          S T O R A G E          D E F I N I T I O N S              *
**********************************************************************
         SPACE
BLANKS   DC    CL80' '
         SPACE
         LTORG
         END   DS@SCINF
