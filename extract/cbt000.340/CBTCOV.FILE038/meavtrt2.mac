         MACRO
         REGS
R0       EQU   0
R00      EQU   00
R1       EQU   1
R01      EQU   01
R2       EQU   2
R02      EQU   2
R3       EQU   3
R03      EQU   3
R4       EQU   4
R04      EQU   4
R5       EQU   5
R05      EQU   5
R6       EQU   6
R06      EQU   6
R7       EQU   7
R07      EQU   7
R8       EQU   8
R08      EQU   8
R9       EQU   9
R09      EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
S0C4     TITLE 'MEAVTRT2/AS2/AS3 - ESTAE TO FIX S0C4, WHEN POSSIBLE'
         SPACE 4
***********************************************************************
*                                                                     *
*        NAME:     MEAVTRT2                                           *
*                                                                     *
*        FUNCTION: TO PROVIDE A FACILITY FOR FIXING SYSTEM            *
*                  0C4 (INTERRUPT CODE 0010-0011), WHEN THE           *
*                  OFFENDING OPERAND IS THE SENDING FIELD OR          *
*                  RECEIVING FIELD OF A MOVE INSTRUCTION.             *
*                                                                     *
*      OPERATION:  THE MODULE IS A ROUTINE WHICH IS PLACED IN         *
*                  THE FLOW OF THE MAIN MODULE IEAVTRT2 AS A          *
*                  PATCH TO IT.                                       *
*                  (THE IBM MODULE IEAVTRT2 HAS BEEN ZAPPED TO        *
*                  BRANCH TO MEAVTRT2).                               *
*                  WHEN CONTROL IS RECEIVED FROM IEAVTRT2, A CHECK    *
*                  IS MADE TO DETERMINE IF THIS IS AN 0C4 ABEND.      *
*                  IF IT IS NOT, NORMAL MODULE FLOW IS RESUMED.       *
*                  OTHERWISE A CHECK IS MADE TO DETERMINE             *
*                  WHICH INSTRUCTION CAUSED THE SEGMENT TRANSLATION   *
*                  OR THE PAGE TRANSLATION EXCEPTION.  IF IT WAS A    *
*                  MOVE INSTRUCTION, THE INSTRUCTION IS RETRIED       *
*                  BUT ITS LENGTH IS CURTAILED TO THE NUMBER OF       *
*                  BYTES AVAILABLE.                                   *
*                  (IN THE CASE OF MVCL, NO RETRY IS NECESSARY.)      *
*                  THE PROGRAMMER IS NOT NOTIFIED, BUT THE SDWA       *
*                  IS WRITTEN TO LOGREC ON THE FIRST OCCURRENCE       *
*                  OF AN 0C4 ABEND AT ANY GIVEN INSTRUCTION,          *
*                  UP TO 10 DIFFERENT INSTRUCTIONS.                   *
*                                                                     *
*        ENTRY:    BRANCHED TO FROM IEAVTRT2.                         *
*                                                                     *
*        INPUT:    R0  = SDWA INDICATOR                               *
*                  R1  = SDWA ADDRESS                                 *
*               R2-R12 = UNPREDICTABLE                                *
*                  R13 = SAVE AREA ADDRESS                            *
*                  R14 = RETURN ADDRESS                               *
*                  R15 = ENTRY POINT ADDRESS                          *
*                                                                     *
*        OUTPUT:                                                      *
*                                                                     *
*        EXIT:     BRANCH TO IEAVTRT2 IN ALL CASES.                   *
*                                                                     *
*        DATE:     21 APRIL 1976/INITIAL PROGRAM                      *
*                                                                     *
*        AUTHOR:   ANDRE NICOLAI                                      *
*                                                                     *
*                                                                     *
*        NOTE:     THE FIRST 'USING' STATEMENT, AND THE STATEMENT     *
*                  AT LABEL '@RF00085', SHOULD BE REVIEWED BEFORE     *
*                  RE-APPLYING THIS MOD.                              *
*                  ALSO CHECK LOAD ADDRESS BEFORE 'USING' STATEMENT   *
*                  FOR LENGTH OF IEAVTRT2                             *
*                                                                     *
***********************************************************************
         EJECT
*                                                                     *
*                                                                     *
*   - ESTABLISH ESTAE ENVIRONMENT (CREATE AN SCB - LIKE SVC 60) -     *
*                                                                     *
*                                                                     *
*                                                                     *
MEAVTRT2 CSECT
         SPACE 1
         LA    R6,X'FF8'(R6)      SET UP ADDRESSABILITY TO MEAVTRT2
         USING MEAVTRT2+X'1A',R6  SEE USING STATEMENT IN IEAVTRT2 FICHE
         SPACE
         USING SCB,R1
         USING TCB,R4
         USING RBBASIC,R5
*
         CLC   =X'0C4000',TCBCMPC  0C4 ABEND
         BNE   EXIT                 NO, GET OUT
         SLR   R2,R2               CLEAR REG 2
         ICM   R2,B'0111',TCBSTABB SCB'S PRESENT
         BZ    SCBOK                NO, BRANCH
         L     R0,=V(MEAVTAS2)     GET OUR EXIT ADDRESS
         LR    R1,R2               SAVE POINTER TO SCB
SCBLOOP  DS    0H
         C     R0,SCBEXIT          OUR SCB ALREADY ON CHAIN
         BE    EXIT                 YES, GET OUT
         ICM   R1,B'0111',SCBCHAIN+1 MORE SCB'S
         BNZ   SCBLOOP                YES, LOOP BACK
SCBOK    DS    0H
         L     R0,=AL2(255*256,SCBLEN) SPID+L'SCB
         GETMAIN R,LV=(0)
         DROP  R1
         MVC   0(SCBLEN,R1),SCB    INITIALIZE SCB
         STCM  R1,B'0111',TCBSTABB PUT OUR SCB ON CHAIN
         USING SCB,R1
         ST    R2,SCBCHAIN         BACKWARD CHAIN
         L     R2,RBLINK           GET PREVIOUS RB
         STCM  R2,B'0111',SCBOWNRA SET IT IN SCB
         STCM  R1,B'0111',SCBPARMA SET IT IN SCB AS PARM LIST
         LA    R1,64               CONSTANT FOR RB PREFIX
         SLR   R2,R1               POINT TO RB PREFIX
         OI    RBFLAGS1-RBPRFX(R2),RBSCB SET FLAG
EXIT     S     R6,=X'00000FF8'     RESET ADDRESSABILITY TO IEAVTRT2
         B     @RF00089(,R6)       RETURN
         EJECT
@RF00089 EQU  X'92' SEE THIS LABEL IN IEAVTRT2 FOR CORRECT DISPLACEMENT
         SPACE 3
         LTORG
         SPACE 3
         IHASCB DSECT=NO
         SPACE 1
         ORG   SCB
         DC    XL(SCBLEN)'00'
         ORG   SCBEXIT
         DC    V(MEAVTAS2)
         ORG   SCBFLGS1
         DC    AL1(SCBESTAE+SCBASYNC+SCBNOIOP)
         ORG   SCBFLGS2
         DC    AL1(SCBKEY0+SCBSUPER)
         ORG   SCBID
         DC    XL1'DB'
         ORG
         SPACE 3
         DROP  ,
         EJECT
*                                                                     *
*                                                                     *
*        - ESTAE EXIT ROUTINE -                                       *
*                                                                     *
*                                                                     *
*                                                                     *
MEAVTAS2 CSECT
         SPACE
         USING MEAVTAS2,R15        TEMPORARY ADDRESSABILITY
         C     R0,=A(12)           SDWA PRESENT
         BNE   GOTSDWA              YES, CARRY ON
         DROP  R15
         SLR   R15,R15   SET RC = LET SYSTEM DETERMINE TERMINATION
         BR    R14                 NOW RETURN
         SPACE
GOTSDWA  DS    0H
         SAVE  (14,12)
         LR    R11,R15              THE USUAL
         USING MEAVTAS2,R11
         USING SDWA,R1
         USING TCB,R2
         USING CDENTRY,R3
         USING XTLST,R5
         USING LLE,R4
*
         TM    SDWAFLGS,SDWAPCHK
         BNO   EXITAS2
         TM    SDWAFLGS+1,SDWAENRB
         BNO   EXITAS2
         LA    R15,16
         CH    R15,SDWAINC1
         BE    *+4+4+4+4
         LA    R15,17
         CH    R15,SDWAINC1
         BNE   EXITAS2
         TM    SDWAMWPA,B'01110000' V=V PROGRAM (KEY 8)
         BNZ   EXITAS2
         TM    SDWAMWPA,B'10000000' V=V PROGRAM (KEY 8)
         BNO   EXITAS2
         L     R2,SDWAPARM         GET USER PARM LIST
         CLM   R2,B'0111',SCBPARMA-SCB(R2) FIRST TIME THROUGH
         BNE   GOTAREA              NO, BRANCH
         L     R0,=AL2(230*256,10*4) SPID+10F
         LR    R3,R1               SAVE SDWA POINTER
         GETMAIN R,LV=(0)
         XC    0(10*4,R1),0(R1)    CLEAR GOTTEN CORE
         STCM  R1,B'0111',SCBPARMA-SCB(R2) STORE IT AS PARM LIST
         LR    R2,R1               SAVE POINTER
         LR    R1,R3               RESTORE SDWA POINTER
GOTAREA  DS    0H
         LR    R14,R2              POINT TO PARM LIST
         ICM   R15,B'0111',SDWANXTA
         L     R2,PSATOLD-PSA      GET CURRENT TCB
         L     R2,TCBJSTCB         GET JS TCB
         L     R3,TCBJPQ           GET JOB PACK QUEUE
         SLR   R6,R6
XLLOOP   DS    0H
         L     R5,CDXLMJP
         TM    CDATTR,CDMIN
         BNO   *+4+4
         L     R5,CDXLMJP-CDENTRY(,R5)
         ICM   R6,B'0111',XTLMSBAD
         CR    R15,R6
         BL    *+4+4+4+2+4
         AL    R6,XTLMSBLA
         LA    R6,0(,R6)           CHOB
         CR    R15,R6
         BNH   ADDROK
         ICM   R3,B'0111',CDCHAIN+1
         BNZ   XLLOOP
         L     R4,TCBLLS
LLELOOP  DS    0H
         L     R3,LLECDPT
         L     R5,CDXLMJP
         TM    CDATTR,CDMIN
         BNO   *+4+4
         L     R5,CDXLMJP-CDENTRY(,R5)
         ICM   R6,B'0111',XTLMSBAD
         CR    R15,R6
         BL    *+4+4+4+2+4
         AL    R6,XTLMSBLA
         LA    R6,0(,R6)           CHOB
         CR    R15,R6
         BNH   ADDROK
         ICM   R4,B'0111',LLECHN+1
         BNZ   LLELOOP
EXITAS2  DS    0H
         SETRP RC=0,REGS=(14,12)
ADDROK   DS    0H
         SLR   R2,R2
         LR    R6,R2
         LR    R4,R2
         CLI   0(R15),X'44'        EX
         BNE   TRYMVC
         IC    R2,2(,R15)          PICK UP REGISTER (BASE)
         SRL   R2,4
         SLL   R2,2
         L     R2,SDWAGRSV(R2)     BASE REGISTER CONTENTS
         LH    R3,2(,R15)          PICK UP DISPLACEMENT
         N     R3,=X'00000FFF'
         LA    R2,0(R3,R2)         DISPL + BASE
         IC    R6,1(,R15)          PICK UP LENGTH OF MOVE
         LR    R3,R6                AND INDEX REGISTER
         SLL   R3,28
         SRL   R3,26
         L     R3,SDWAGRSV(R3)     INDEX REGISTER CONTENTS
         LA    R15,0(R3,R2)        DISPL + BASE + INDEX
         SRL   R6,4
         SLL   R6,2
         L     R6,SDWAGRSV(R6)     LENGTH VALUE
         SLR   R2,R2
TRYMVC   DS    0H
         CLI   0(R15),X'D2'        MVC
         BNE   TRYMVCL
         IC    R2,2(,R15)          PICK UP REGISTER (RECEIVING FIELD)
         SRL   R2,4
         SLL   R2,2
         L     R2,SDWAGRSV(R2)     PICK UP REGISTER CONTENTS
         LA    R2,0(,R2)           CHOB
         LH    R3,2(,R15)          PICK UP DISPLACEMENT
         N     R3,=X'00000FFF'
         CLM   R15,B'0111',SDWANXTA
         BNE   *+4+4
         IC    R6,1(,R15)          PICK UP LENGTH OF MOVE
         ALR   R2,R3               DISPL + BASE
         ST    R2,SDWASR06
         IC    R4,4(,R15)          PICK UP REGISTER (SENDING FIELD)
         SRL   R4,4
         SLL   R4,2
         L     R4,SDWAGRSV(R4)     PICK UP REGISTER CONTENTS
         LA    R4,0(,R4)           CHOB
         LH    R3,4(,R15)          PICK UP DISPLACEMENT
         N     R3,=X'00000FFF'
         ALR   R4,R3
         ST    R4,SDWASR07
         LRA   R5,1(R6,R2)         DID THIS CAUSE THE INTERRUPT
         BNZ   *+4+2                YES, BYPASS THIS SET THEN
         LR    R2,R4
         LR    R5,R2
         O     R2,=X'00000FFF'
         SLR   R2,R5
         CR    R2,R6
         BNL   EXITAS2
         ST    R2,SDWASR08         STORE COMPUTED MOVE LENGTH
OKAS1    DS    0H
         LA    R2,10               SET # OF ENTRIES
         SLR   R4,R4               CLEAR REG
CHKLOOP  DS    0H
         L     R3,0(R4,R14)        GET ADDRESS FROM THIS ENTRY
         LTR   R3,R3               ENTRY AVAILABLE
         BNZ   TRYMORE              NO, BRANCH TO MATCH
         ST    R15,0(R4,R14)       PUT ADDRESS IN TABLE
         OI    SDWAACF2,SDWARCRD   TURN ON RECORD INDICATOR
OKAS2    DS    0H
         L     R2,=V(MEAVTAS3)
*                                  WRITE SYSTEM DIAGNOSTIC WORKAREA
*                                  (SDWA) TO LOGREC, THEN RETURN...
         SETRP RC=4,REGS=(14,12),RETADDR=(2),DUMP=NO
         SPACE 3
TRYMVCL  DS    0H
         CLI   0(R15),X'0E'        MVCL
         BNE   EXITAS2
         B     OKAS1
         SPACE 1
TRYMORE  DS    0H
         CR    R15,R3              ALREADY ENTERED
         BE    OKAS2                YES, BRANCH OUT
         LA    R4,4(,R4)           NEXT TABLE ENTRY
         BCT   R2,CHKLOOP          MORE ENTRIES
         B     OKAS2               MUST BE TABLE OVERFLOW
         SPACE 3
         LTORG
         SPACE 3
         DROP  ,
         EJECT
*                                                                     *
*                                                                     *
*        - RETRY ROUTINE -                                            *
*        - TO EFFECT RESUMPTION OF INTERRUPTED P/P -                  *
*                                                                     *
*                                                                     *
*                                                                     *
MEAVTAS3 CSECT
         SPACE 1
         USING MEAVTAS3,R2
         USING SDWA,R3
*
         LR    R2,R15              THE USUAL
         LR    R3,R1               SDWA POINTER
*        MODESET EXTKEY=TCB (V=V PROBLEM PROGRAM)
         SPKA  8*16(R0)
         L     R5,SDWANXTA-1
         LA    R5,0(,R5)           CHOB
         CLI   0(R5),X'0E'         MVCL
         BE    *+4+4+4              YES, NO MOVE NECESSARY THEN
         LM    R6,R8,SDWASR06
         EX    R8,XMVC
         L     R0,=AL2(230*256,8*4) SPID+8F
         GETMAIN R,LV=(0)
         SLR   R8,R8
         LR    R9,R8
         IC    R8,SDWAILC1
         ALR   R5,R8
         LR    R14,R5
         LA    R9,4(,R9)
         L     R8,SDWAGRSV(R9)
         LA    R8,0(,R8)           CHOB
         SR    R14,R8
         BM    *-2-4-4-4-2
         C     R14,=A(4095)
         BH    *-4-4-2-4-4-4-2
         SLL   R9,2+8
         OR    R14,R9
         LM    R11,R12,XXINSTR
         OR    R12,R14
         L     R9,SDWAEC1          GET FIRST HALF OF P/P EPSW
         LA    R10,8(,R1)          GET RESUME ADDRESS
         L     R13,SDWAGR15        (R15)
         LM    R14,R0,SDWAGRSV     (R0,R1,R2)
         STM   R9,R0,0(R1)         EPSW,INSTR,INSTR,(R15,R0,R1,R2)
         LR    R2,R1               SAVE MY 8F POINTER
         DROP  R2                  WE'LL LIVE DANGEROUSLY
         LR    R1,R3               RESTORE
         L     R0,SDWAIDNT
         LM    R3,R14,SDWAGR03     GET PROBLEM PGM REGS 3-14.
         MODESET EXTKEY=ZERO
         FREEMAIN R,LV=(0),A=(1)   FREE SDWA
         LPSW  0(R2)               PICK UP P/P WHERE LEFT OFF
         SPACE 5
XMVC     MVC   0(*-*,R6),0(R7)     *** EXECUTE ONLY ***
         CNOP  0,4
XXINSTR  LM    R15,R2,16(R2)       (R15,R0,R1,R2)
         B     0(0,0)              RESUME INTERRUPTED P/P
         LTORG
         SPACE 3
         DROP  ,
         EJECT
         PRINT NOGEN
         REGS
         IHASDWA DSECT=YES
         IKJTCB DSECT=YES
         IHAXTLST
         IHACDE
         IHAPSA DSECT=YES
         IHALLE
         IHARB
         END
