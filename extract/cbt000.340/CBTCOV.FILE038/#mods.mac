./       ADD   NAME=#INDEX
THIS IS THE INDEX OF THE  M E M O R E X  S S G  MVS-3.8/SP1 SYSTEM MODS
                                                          AS OF 24MAR81


GREGG JACKSON 408/987-0802 $SYS7      FRANK PAJERSKI 408/987-0804 $SYS0
JACK LEMA     408/987-0726 $SYSC      BILL SMITH     408/987-3919 $SYS6


THIS DATASET CONTAINS MODIFICATIONS IN SMP4 FORMAT (MOSTLY).  EACH
MODIFICATION IS NAMED VS..... AND CONTAINS JCL, SMP CONTROL CARDS, AND
THE MODIFICATION ITSELF.


THE SYSTEM ON WHICH THESE MODIFICATIONS FIT IS AT A NON-PE 8009 BASE
WITH SELECTIVE MAINTENANCE THRU 8101 APPLIED.


THE FOLLOWING SCP-RELATED PROGRAM PRODUCTS ARE PRESENT:
   4PZ0-C1   MVS/SEA 2.1
   5668-009  SPF
   5735-RC2  ACF/VTAM REL 2.0
   5735-XX1  ACF/NCP/VS REL 2.1
   5735-XX3  SSS FOR ACF/NCP/VS REL 2.1
   5740-AM3  SAM-E
   5740-XT6  TSO CMD PKG
   5740-XT8  SPF/2.2.1 W/PTF5
   5740-XYS  MVS/SP-JES2 R1
   5740-XY4  RMF 2.3
   5747-CH1  NCP/SSP SCP
   5798-CLW  PCF II/1.3


>01/07/81 VS00000-$SYS6 -SMP PTS : ESTABLISH SMP4 EXECUTION DEFAULTS
                         AND LOCALLY RECEIVABLE FMID'S.
>02/02/81 VS00001-$SYS6 -HEWLFFNL: FORMATS JULIAN DATE, TIME, VOLUME
                         SERIAL, DSNAME ON FINAL LINE OF XREF/MAP OF
                         LINKAGE EDITOR OUTPUT.
>02/19/81 VS00002-$SYS6 -IKJEFF53: IPO-3.8E TSO FIB OUTPUT/STATUS/CANCEL
                         EXIT ROUTINE.  SOURCE IN SYS2.EXITS.SOURCE.
>02/19/81 VS00003-$SYS6 -IKJEFLD: LOGON PREPROMPT EXIT FOR TSOHOLD.
                         SOURCE IN SYS2.EXITS.SOURCE.
>02/25/81 VS00004-$SYS0 -SGIEC0PT: ADD LOCAL PROGRAM NAMES TO PROGRAM
                         PROPERTIES TABLE (PPT) & UPDATE SOME OF IBM'S.
>02/05/81 VS00005-$SYS6
>02/07/81 VS00006-$SYS0 -IKJEFTE2/IKJEFTE8: ADD LOCAL AUTHORIZED
                         COMMAND PROCESSORS/PROGRAMS AND ASM2'S
                         COMMAND PROCESSORS TO THE LIST OF THOSE
                         INVOKED BY THE TSO TMP/CALL COMMAND.
>02/18/81 VS00007-$SYS6
>02/05/81 VS00008-$SYS6 -JCLSCAN TSO CP: ADD SVC 236/IGC0023F TO LPALIB.
>02/18/81 VS00009-$SYS6 -IKJEBELE: MAKE CENT SIGN (Ö) LOGICAL TAB CHAR
                         FOR ALL 3270 TERMINALS WHEN USING EDIT.
>  /  /81 VS00010-$SYSC -COPY WRITELOG AND CLR3270 TO LPALIB
>02/19/81 VS00011-$SYS6 -IEDAYW: SUPPORT TEKTRONIX TERMINAL UNDER TSO.
>02/19/81 VS00012-$SYS6

>02/09/81 VS00013-$SYS6 -IKJEBECI,IKJEGCIV: ELIMINATE BLDL FOR TSO
                         EDIT & TEST SUB-COMMANDS (ZAP).
>03/11/81 VS00014-$SYS0 -ASM2-2.5: IGG019WB (EOE APPENDAGE FOR $DEFRAG)
>02/04/81 VS00015-$SYS6
>02/10/81 VS00016-$SYS6 -WYLBUR: ADD SVC 249 (TYPE IV) TO LPALIB.
>04/16/80 VS00017-$SYS# -JES2(HASPPRPU): PUT THE JOB NAME ON THE PUNCH
                         SEPARATOR CARD.
>04/16/80 VS00018-$SYS# -JES2(HASPRDR): SET THE DEFAULT MSGCLASS TO "A"
                         FOR A TSO-SUBMITTED JOB.
>02/20/81 VS00019-$SYS6
>02/18/81 VS00020-$SYS6 -ADD LINKLIB MODULES TO LPALIB (UCLIN/IEBCOPY).
>02/06/81 VS00021-$SYS6 -SYNCSORT: ADD MODULES IGC00023G AND WCSREENT
                         TO LPALIB.  UCLIN OF IGC0023G AND WCSREENT.
>02/20/81 VS00022-$SYS6 -IKJEBMA9: JTIP USER EDIT SUBCOMMAND TABLE
>02/07/81 VS00023-$SYS0 -QCM INSTALL: REL 2.19 WITH MRX USER EXITS --
                         IEFACTRT, IEFUJI, IEFUSI, IEFUJV.
                         MOD VS00061 REQUIRED FOR QCM TO INITIALIZE.
                         REF: SYS3.QCM.CNTL(QCMLINKS/COPY2LPA)
>03/11/81 VS00024-$SYS0 -IEFUTL -- REF SYS2.EXITS.CNTL/SOURCE
>04/16/80 VS00025-$SYS#
>02/10/81 VS00026-$SYS6
>02/20/81 VS00027-$SYS0 -IEFAB4A2: CAUSE JOBFAIL FOR "NOT CATLG 2".
>02/09/81 VS00028-$SYS6
>02/07/81 VS00029-$SYS0 -SPARESVC: ADD SPARESVC WITH ALIASES TO LPALIB.
>03/15/81 VS00030-$SYS6 -
>02/09/81 VS00031-$SYS6 -FCB28: SUPPORT 68 LPP (ZAP/NON-SMP INSTALL).
>02/09/81 VS00032-$SYS6 -IEECVETC: INVOKE DIDOCS TO SET-UP CONSOLES IN
                         "DELETE" MODE; MUST BE ACCEPTED. (EXPAND/ZAP)
>04/16/80 VS00033-$SYS# -JES2(HASPPRPU): MULTICOPY PAGE SEPARATOR.
>02/09/81 VS00034-$SYS6 -
>03/22/81 VS00035-$SYS6 -IKJEHPRO: DELETE PROT/PROTECT ALIASES FROM
                         TSO CMD. PROCESSOR AND ADD "SECURE".
>  /  /81 VS00036-      -
>  /  /81 VS00037-      -
>02/06/81 VS00038-$SYS6
>  /  /81 VS00039-      -
>  /  /81 VS00040-      -
>02/18/81 VS00041-$SYS6 -ADD CMDLIB MODULES TO LPALIB (UCLIN/IEBCOPY);
>  /  /81 VS00042-$SYS  -
>03/11/81 VS00043-$SYS0 -
>03/11/81 VS00044-$SYS0
>02/06/81 VS00045-$SYS6  IDMS/V5.5: SVC 219 (TYPE I).
>03/11/81 VS00046-$SYS0
>  /  /81 VS00047-$SYS# -SYSTEM 2000/V?.??: SVC 229 (TYPE II) *RESERVED*
>03/22/81 VS00048-$SYS6
>02/06/81 VS00049-$SYS6 -IGC0023D: SPECIAL SERVICES SVC (TYPE III)
>02/04/81 VS00050-$SYS6 -JTIP: UPDATE TO FETCH - SPF/JTIP INTERFACE -
                         PERMITS FETCH TO RETRIEVE BY DDNAME TO THE
                         SPFLIST1/2 VIO DATASETS
>02/06/81 VS00051-$SYS6 -
>02/04/81 VS00052-$SYS6 -MSTRJCL: SYSGEN MACRO CHANGED TO NOT START JES2
>02/06/81 VS00053-$SYS6 -SYSTEM 2000/V2.90: SVC 228 (TYPE II)
>02/09/81 VS00054-$SYS6 -IECVHIDT: CHANGE 'HOT I/O' THRESHOLD VALUES.
>02/09/81 VS00055-$SYS6 -ILRSLOTC/V: CHANGE 'SLOTC/V' DEFAULT VALUES;
                         UMID=IPOBSL0:  INCORPORATED IN DLIB BY IPO.
>02/08/81 VS00056-$SYS0 -AZ25758: CIRC. 106-C'S BY COPYING SOME SU33
                         MODULES FROM LINKLIB TO LPALIB.
>04/16/80 VS00057-$SYS# -JES2(HASPXEQ): PLACE MORE DATA INTO EXTENDED
                         SSOB FOR VS00058 TO USE.
>02/04/81 VS00058-$SYS6 -EXT. WTR: PUT A(SSOB) INTO WRITER PARM LIST
                         SO THAT EXTERNAL WRITER CAN PRODUCE BETTER
                         SEPARATOR PAGE (SEE VS00057).
>03/21/81 VS00059-$SYS0 -IGG0325D: ALLOCATE BY CYLINDER IF BLOCK
                         REQUEST AND USE FIRST-FIT INSTEAD OF BEST-FIT
>04/16/80 VS00060-$SYS# -
>02/16/81 VS00061-$SYS0 -AMDQPK00: ZAP'ED TO RESTRICT SEA FROM USING
                         X'5A0' TO X'700' IN THE PSA PATCH AREA.  THIS
                         AREA IS USED BY QCM.
>04/16/80 VS00062-$SYS# -JES2: ADD JOBNAME TO DISPLAY INIT COMMAND
>02/09/81 VS00063-$SYS6 -
>  /  /81 VS00064-$SYS  -IEFAB436: FAST-PATH NON-SPECIFIC ALLOCATION
>  /  /81 VS00065-$SYS  -ADJUST DEFAULT BUFNO VALUES FOR QSAM/VIO FILES
>  /  /81 VS00066-$SYS  -IEFVFA: DISABLE PERFORM=, PRTY= KEYWORDS.
>  /  /81 VS00067-      -
>  /  /81 VS00068-$SYS  -CREATE DATE AND TIME STAMP WHENEVER SSI INFOR-
                         MATION IS OMITTED FROM LINKAGE EDITOR INPUT.
>  /  /81 VS00069-$SYS6
>02/20/81 VS00070-$SYS6 -IEBVMS: FORMATS ACTUAL DSNAME/VOLSER IN PLACE
                         OF DDNAME ON VARIOUS IEBCOPY DISPLAY MESSAGES
./       ADD   NAME=VS00000
//$SYS6PTS JOB (8205,3919),'6-INITIALIZE PTS',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=INIT-PTS
//INITPTS  EXEC SMP4APP
//SMPCNTL   DD  *
 UCLIN PTS .
 ADD SYS
      SREL(Z038)
      PEMAX(5000)
      DSPREFIX(SMP4SP1.TEMPDS)   /*  QUALIFIER FOR TEMP. DATA SETS  */
      DSSPACE(95,190,175)        /*  SPACE FOR TEMP. DATA SETS  */
      ASMPARM(XREF,NOLOAD,DECK)  /*  ASSEMBLER PARAMETERS (DEFAULT  */
      ASMPRINT(ASMLIST)          /*  ASSEMBLER OUTPUT  */
      COMPPRINT(SYSPRINT)        /*  COMPRESS OUTPUT   */
      COPYPRINT(SYSPRINT)        /*  IEBCOPY OUTPUT    */
      LKEDPRINT(SYSPRINT)        /*  LINKAGE-EDITOR OUTPUT  */
      LKEDPARM(SIZE=(912K,100K),NCAL,LIST,LET,XREF)  /*  LINK-EDIT  */
      RETRYPRINT(SYSPRINT)       /*  RETRY OUTPUT      */
      UPDATPRINT(SYSPRINT)       /*  IEBUPDTE OUTPUT   */
      ZAPPRINT(SYSPRINT)         /*  SUPERZAP OUTPUT   */
      FMID ( /* LIST RECEIVE-ABLE FMIDS */
        EAS1102 EBB1102 EBT1102 EDE1102 EDM1102 EDS1102 EER1100 EGA1102
        EGS1102 EIP1102 EJE1102 EMF1102 EMI1102 EML1102 EMS1102 EPM1102
        EST1102 ESU1102 ESY1400 ETC0108 ETI1106 ETV0108 EUT1102 EVT0108
        EXW1102
                            /*  ABOVE ARE MVS 3.8A BASE FUNCTIONS  */
        EER1300             /*  EREP 1.1                           */
        EJE1103             /*  JES2 4.1 - 3800 ENHANCEMENTS       */
        ESS1102             /*  SSS   */
        EVP1102             /*  VPSS  */
        EVT1202             /*  ACF/VTAM SCP RELEASE 2             */
        FER1110             /*  EREP1 */
        FBB1221             /*  SU64  (FUTURE)  */
        FDS1122             /*  SU64  (FUTURE)  */
        FDM1133             /*  3800 ENHANCEMENTS - DATA MNGMNT    */
        FDS1133             /*  3800 ENHANCEMENTS - DATA MNGMT SUP.*/
        FDS1143             /*  DEVICE SUPPORT FACILITIES, REL. 2  */
        FUT1133             /*  3800 ENHANCEMENTS - UTILITIES      */
        HRM2305             /*  RMF VERSION 2, REL. 3              */
        HPF1102             /*  SYSTEM PRODUCTIVITY FACILITY/V1.0  */
        HSF2201             /*  SPF VERSION 2, REL. 2, MOD LEVEL 1 */
        HTS1202             /*  TSO SESSION MANAGER                */
        HUT1135             /*  DATA FACILITIES/DATA SET SERVICES  */
        JBB1112             /*  TSO COMMAND PACKAGE                */
        JBB1126             /*  MVS SYSTEM PRODUCT, REL. 1.0       */
        JDM1112             /*  SEQUENTIAL ACCESS METHOD, EXTENDED */
        JDM1132             /*  MVS SYSTEM PRODUCT, REL. 1.0       */
        JDS1125             /*  MVS SYSTEM PRODUCT, REL. 1.1       */
        JTP0001             /*  UICC/JES TSO INTERFACE PACKAGE     */
        JVT1112             /*  ACF/VTAM BASE PROGRAM PRODUCT      */
        JVT1212             /*  ACF/VTAM BASE PROGRAM PRODUCT      */
        JVT1222             /*  ACF/VTAM NETWORKING FEATURE (MSNF) */
        PCF1201             /*  PROGRAM CONTROL FACILITY, REL. 1.3 */
                            /*  ADD ANY ADDITIONAL FUNCTIONS HERE  */
                 ).
    DEL SYS PURGE      /* DO NOT REJECT FROM PTS AT ACCEPT TIME  */ .
    DEL SYS REJECT     /* DO NOT REJECT FROM PTS AT RESTORE TIME */ .
  ENDUCL .
  LIST PTS SYS .
/*
//
./       ADD   NAME=VS00001
//$SYS6LKD JOB (8205,3919),'6-LINKAGE EDITOR MOD',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00001
//VS00001  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00001) .
 APPLY   S (VS00001)   /* THE MESSAGE "NOW ADDED/REPLACED/ETC." ON
                          THE LINKAGE EDITOR MAP/XREF IS CHANGED TO
                          CONTAIN THE JULIAN DATE, THE TIME, THE
                          SYSLMOD VOLUME SERIAL NUMBER, AND DATA
                          SET NAME OF THE SYSLMOD DATA SET.  THIS
                          ZAP ORIGINATED FROM AN OLD GUIDE "OSIE"
                          NEWSLETTER AND HAS BEEN UPDATED FOR MVS
                          TO THE 8009 LEVEL (5752-PM1/CARD 2-E04).
                          NOTE:  DEPENDING UPON THE TYPE OF LINKAGE
                          EDITOR MESSAGE ISSUED, ONLY THE FIRST 24
                          CHARACTERS OF THE DATASET NAME ARE PRINTED.
                          THE REMAINING CHARACTERS ARE TRUNCATED.
                          EG.:  'TESTPROG DOES NOT EXIST BUT HAS
                          BEEN ADDED ON 81.001 AT 12:00:01 IN VOLSER
                          SYSRES DATA SET SYS1.LPALIB'             */ .
 LOG (FORMAT DATE, TIME, VOLUME, DSN ON FINAL LINE OF LKED OUTPUT) .
 LOG (OBTAINED FROM STEVE ERICKSON, AMDAHL SYSTEMS ENGINEER) .
 LOG (SYSTEM LEVEL:  MVS/3.8 - SP/1 USING AMDAHL DLIB @ 8008 LEVEL) .
/*
//SMPPTFIN  DD  *
++ USERMOD(VS00001) .
++ VER (Z038) FMID(EPM1102) .
++ ZAP (HEWLFFNL) DISTLIB(AOS04) .
 EXPAND HEWLFFNL(192)
 NAME HEWLFFNL
 VER  045A 4490,C460
 VER  0950 0000,0000
 VER  09CC 0000,0000
 REP  0950 4490,C460                OVERLAID INSTRUCTION
 REP  0954 95C4,300F                CHECK FOR A 'D'
 REP  0958 4780,C97A                BRANCH IF 'D' FOUND
 REP  095C 95D5,300F                CHECK FOR A 'N'
 REP  0960 4770,C45C                RETURN TO MAINLINE IF NOT
 REP  0964 95D9,3013                CHECK FOR AN 'R'
 REP  0968 4780,C972                BRANCH IF 'R' FOUND
 REP  096C 4190,3019                POINT AT MESSAGE TEXT
 REP  0970 47F0,C97E                GO TO COMMON CODE
 REP  0974 4190,301C                POINT AT MESSAGE TEXT
 REP  0978 47F0,C97E                GO TO COMMON CODE
 REP  097C 4190,3031                POINT AT MESSAGE TEXT
 REP  0980 D21F,9000,C9CC           MOVE EDIT MASK
 REP  0986 D209,9026,C9EC           MOVE ' DATA SET '
 REP  098C 5810,C6EE                LOAD A(ENQNAME)
 REP  0990 D22B,9030,1008           MOVE THE DATA SET NAME
 REP  0996 5810,C86A                LOAD THE SYSLMOD DCB ADDRESS
 REP  099A 5810,102C                LOAD THE SYSLMOD DEB ADDRESS
 REP  099E 5810,1020                LOAD THE SYSLMOD UCB ADDRESS
 REP  09A2 D205,9020,101C           MOVE THE VOLUME SERIAL NUMBER
 REP  09A8 4110,0002                TIME DEC
 REP  09AC 0A0B
 REP  09AE 9001,C9C4                STORE TIME, DATE
 REP  09B2 DE06,9002,C9C9           EDIT DATE
 REP  09B8 DE08,900C,C9C4           EDIT TIME
 REP  09BE 58F0,C766                RELOAD REG 15 (TURKEYS...)
 REP  09C2 47F0,C45C                RETURN TO MAINLINE
 REP  09C6 1301,1285,0078,150B      WORK DOUBLE WORD
 REP  09CE D6D54021204B20202040     EDIT
 REP  09D8 C1E34020217A20207A2020     MASK
 REP  09E3 40C9,D540,E5D6,D3E2,C5D9,40  CONSTANTS
 REP  09EE 40C4,C1E3,C140,E2C5,E340     ' DATA SET '
 REP  045A 47F0,C94E                BRANCH TO NEW CODE
 IDRDATA VS00001
/*
//
./       ADD   NAME=VS00002
//$SYS6TSO JOB (8205,3919),'6-TSO FIB EXIT/EFF53',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00002
//ASSEMBLY EXEC PGM=IFOX00,REGION=1024K
//SYSLIB    DD  UNIT=3330-1,VOL=SER=PAG100,DSN=SYS1.AMODGEN,DISP=SHR
//          DD  UNIT=3330-1,VOL=SER=PAG100,DSN=SYS1.AMACLIB,DISP=SHR
//          DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.MACLIB,DISP=SHR
//SYSPRINT  DD  SYSOUT=*
//SYSPUNCH  DD  UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&&OBJMOD,
//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),DISP=(,PASS)
//SYSUT1    DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT2    DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT3    DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSIN     DD  DISP=SHR,DSN=SYS2.EXITS.SOURCE(IKJEFF53)
/*
//LINKEDIT EXEC PGM=HEWL,COND=(0,LT),
//         PARM='LIST,XREF,RENT,REUS'
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  UNIT=SYSDA,SPACE=(TRK,(2,3))
//SYSLMOD   DD  UNIT=SYSDA,SPACE=(TRK,(10,2,1)),DSN=&&IKJEFF53,
//     DCB=(RECFM=U,BLKSIZE=13030,DSORG=PO),DISP=(,PASS)
//OBJMOD    DD  UNIT=3330-1,VOL=REF=*.ASSEMBLY.SYSPUNCH,DSN=&&OBJMOD,
//     DISP=(OLD,DELETE)
//SYSLIN    DD  *
 INCLUDE OBJMOD
 SETSSI  81000219
 NAME    IKJEFF53(R)
/*
//VS00002  EXEC SMP4APP,COND=(0,LT)
//SMPCNTL   DD  *
 RECEIVE  S(VS00002) .
 APPLY    S(VS00002) /* IPO-3.8E SUPPLIED FIB EXIT (IKJEFF53) FOR THE
                               TSO OUTPUT/STATUS/CANCEL COMMANDS   */ .
/*
//IKJEFF53  DD  UNIT=SYSDA,VOL=REF=*.LINKEDIT.SYSLMOD,DSN=&&IKJEFF53,
//     DISP=(OLD,PASS)
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00002) .
++ VER (Z038) FMID(JBB1112) .
++ MOD (IKJEFF53) DISTLIB(AOST4) LKLIB(IKJEFF53) .
/*
//
./       ADD   NAME=VS00003
//$SYS6TSO JOB (8205,3919),'6-LOGON PRE-PROMPT',MSGCLASS=X,CLASS=Z,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00003
//ASSEMBLY EXEC PGM=IFOX00,REGION=1024K
//SYSLIB    DD  UNIT=3330-1,VOL=SER=PAG100,DSN=SYS1.AMODGEN,DISP=SHR
//          DD  UNIT=3330-1,VOL=SER=PAG100,DSN=SYS1.AMACLIB,DISP=SHR
//          DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.MACLIB,DISP=SHR
//SYSPRINT  DD  SYSOUT=*
//SYSPUNCH  DD  UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&&OBJMOD,
//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),DISP=(,PASS)
//SYSUT1    DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT2    DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT3    DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSIN     DD  DISP=SHR,DSN=SYS2.EXITS.SOURCE(IKJEFLD)
/*
//VS00003  EXEC SMP4APP,COND=(0,NE)
//SMPCNTL   DD  *
 RECEIVE S (VS00003) .
 APPLY   S (VS00003) /* LOGON PRE-PROMPT EXIT FOR USE WITH TSOHOLD */ .
/*
//IKJEFLD   DD  UNIT=SYSDA,VOL=REF=*.ASSEMBLY.SYSPUNCH,DSN=&&OBJMOD,
//     DISP=(OLD,PASS)
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00003) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IKJEFLA) TXLIB(IKJEFLD) .
/*
//
./       ADD   NAME=VS00004
//$SYS0PPT JOB (8205,0000),'6-SP/1 UPDATE OF PPT',MSGCLASS=X,CLASS=Z,
//     NOTIFY=$SYS0
/*JOBPARM  Q=F,I,O=VS00004
//*
//*   THIS UPDATES THE PROGRAM PROPERTIES TABLE
//*
//*   **** DO NOT RENUMBER -- SMP4 NEEDS THE IEBUPDTE SEQUENCE #'S ****
//*
//*   THIS IS A MAPPING FOR A SINGLE ENTRY IN IEFSDPPT
//*
//* PPTNAME  DS   CL8 - PROGRAM NAME
//* PPTBYTE1 DS   C -   FIRST BYTE OF PROPERTIES
//* PPTNCNCL EQU  X'80' THIS PROGRAM IS NON-CANCELABLE
//* PPTSKEY  EQU  X'40' THIS PROGRAM REQUIRES THE SPECIAL PROTECT
//*                     KEY IN PPTKEY
//* PPTNSWP  EQU  X'20' THIS PROGRAM IS TO BE AUTHORIZED TO BE
//*                     NON-SWAPPABLE
//* PPTPRIV  EQU  X'10' THIS PROGRAM IS TO BE 'PRIVILEGED' (WITH
//*                     RESPECT TO THE SYSTEM RESOURCES MANAGER)
//* PPTSYSTK EQU  X'08' THIS PROGRAM IS A SYSTEM TASK
//* PPTNDSI  EQU  X'04' THIS PROGRAM IS NOT TO BE GIVEN DATA SET
//*                     INTEGRITY
//* PPTNOPAS EQU  X'02' BYPASS PASSWORD PROTECTION
//*   THE REMAINING BIT IS RESERVED
//* PPTKEY   DS   C -   THIS KEY IS TO BE GIVEN TO THE PROGRAM
//*                     BEING ATTACHED IF PPTSKEY IS ON
//*   EQUATES FOR PROTECT KEYS FOLLOW:
//* PPTKEY0 EQU   X'00'
//* PPTKEY1 EQU   X'10'
//* PPTKEY2 EQU   X'20'
//* PPTKEY3 EQU   X'30'
//* PPTKEY4 EQU   X'40'
//* PPTKEY5 EQU   X'50'
//* PPTKEY6 EQU   X'60'
//* PPTKEY7 EQU   X'70'
//* PPTKEY8 EQU   X'80'
//* PPTCPUA DS    BL2   BIT MASK OF CPU'S ON WHICH THIS PROGRAM CAN
//*                     RUN (SHOULD BE X'FFFF' IF AFFINITY IS NOT
//*                     REQUIRED)
//* ***** NEW FIELDS FOLLOW ******
//* PPTFLGS DS    0F    FLAG BYTES
//* PPTPUBYT DS   CL1   PREFERRED USAGE FLAGS
//* PPT2LPU EQU   X'80' 2ND LEVEL PREFERRED USAGE
//* PPT1LPU EQU   X'40' 1ST LEVEL PREFERRED USAGE
//* PPTN2LP EQU   X'20' NOT 2ND LEVEL PREFERRED USAGE
//* * THE REMAINING BITS ARE RESERVED
//*      DS    CL3   RESERVED
//*
//*  FUNCTION
//*  THIS MODULE (THE PROGRAM PROPERTIES TABLE) CONTAINS A LIST OF
//*  PROGRAMS AND THE SPECIAL PROPERTIES TO BE ASSIGNED TO THESE
//*  PROGRAMS. THE FORMAT OF EACH ENTRY IS DESCRIBED BY MACRO
//*  IEFZB610. (THE NAME OF THE DSECT GENERATED IS PPT.)
//*  THE BYTE FOLLOWING THE LAST ENTRY CONTAINS X'FF' AND
//*  THE REMAINING BYTES IN THAT ENTRY CONTAIN BINARY ZEROES.
//*  1. THE TABLE IS USED BY IEFSD161 AND IEFSD101.
//*  2. NONE OF THE PROPERTIES WILL BE ASSIGNED IF THE STEP HAS
//*     REQUESTED A JOBLIB OR STEPLIB WHICH IS NOT DEFINED AS
//*     BEING AUTHORIZED. THIS CHECK IS PERFORMED BY IEFSD162.
//*  3. THE PROPERTY 'SYSTEM TASK' WILL NOT BE ASSIGNED UNLESS
//*     THE JOB IS '1-STEP' AND 'STARTED.' THIS CHECK IS
//*     PERFORMED BY IEFSD101.
//*  4. THE PROPERTY 'NO DATA SET INTEGRITY' WILL NOT BE
//*     ASSIGNED UNLESS THE JOB IS '1-STEP.' THIS CHECK IS
//*     PERFORMED BY IEFSD101.
//*  5. EVEN IF THE 'NO DATA SET INTEGRITY' PROPERTY IS
//*     REQUESTED, DATA SET INTEGRITY PROCESSING WILL ALWAYS
//*     BE PERFORMED BY IEFSD102. THE PROPERTY (NDSI) WILL
//*     ACTUALLY BE PROVIDED BY IEFSD162 IF THE AUTHORIZATION
//*     CHECK OF JOBLIB/STEPLIB IS SUCCESSFUL. (THIS METHOD
//*     IS NECESSARY EVEN IF NO JOBLIB OR STEPLIB IS PRESENT,
//*     BECAUSE THE PRESENCE OR ABSENCE OF A STEPLIB IS NOT
//*     KNOWN UNTIL ALLOCATION IS COMPLETE.)
//*  6. THIS MODULE WAS CREATED BY SGIEF0PT.
//*
//VS00004  EXEC SMP4APP
//SMPCNTL   DD  *
  REJECT  S (VS00004)  .
  RECEIVE S (VS00004)  .
  APPLY   S (VS00004)  .
  LIST CDS SYSMOD(VS00004)  .
//SMPPTFIN  DD  *
++ USERMOD(VS00004) .
++ VER (Z038) FMID(EBB1102)
              PRE(UZ22970,UZ23961) .
++ MACUPD (SGIEF0PT) ASSEM(IEFSDPPT) DISTLIB(AMODGEN) BASE(UPDATE) .
./  CHANGE NAME=SGIEF0PT
********* RMF                                                   VS00004
          DC    CL8'ERBMFMFC'                                   VS00004
          DC    AL1(PPTPRIV+PPTSYSTK+PPTNDSI+PPTNOPAS)          VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* OMEGAMON                                              VS00004
          DC    CL8'OMEGAMON'                                   VS00004
          DC    AL1(PPTNOPAS+PPTSYSTK+PPTSKEY)                  VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* TASK/MASTER (TMTEST01)                                VS00004
          DC    CL8'VTAMTMMT'                                   VS00004
          DC    AL1(PPTNDSI)                                    VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* SMP                                                   VS00004
          DC    CL8'HMASMP  '                                   VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* MASCOT (1270 DIAGNOSTIC)                              VS00004
          DC    CL8'OSMDM   '                                   VS00004
          DC    AL1(PPTNSWP+PPTSYSTK+PPTSKEY)                   VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* NAME TO ALLOW A PROGRAM (ALMOST) ANYTHING             VS00004
          DC    CL8'SUPERPGM'                                   VS00004
          DC    AL1(PPTNOPAS+PPTNSWP+PPTNDSI)                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* IMS                                                   VS00004
          DC    CL8'DFSNSC00'                                   VS00004
          DC    AL1(PPTNSWP)                                    VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* NAME TO ALLOW A TASK (ALMOST) ANYTHING                VS00004
          DC    CL8'SUPERTSK'                                   VS00004
          DC    AL1(PPTNOPAS+PPTNSWP+PPTNDSI+PPTSKEY+PPTSYSTK)  VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* JES2 (BACKUP / TEST VERSION)                          VS00004
          DC    CL8'HASJES2A'                                   VS00004
          DC    AL1(PPTNCNCL+PPTSKEY+PPTNSWP+PPTSYSTK+PPTNOPAS+PPTNDSI)
          DC    AL1(PPTKEY1)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* ASM2-2.5                                              VS00004
          DC    CL8'$DASDMNT'                                   VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* ASM2-2.5                                              VS00004
          DC    CL8'$MIGRATE'                                   VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* OPMGR                                                 VS00004
          DC    CL8'OPMGR'                                      VS00004
          DC    AL1(PPTNDSI)                                    VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* ASM2-2.5                                              VS00004
          DC    CL8'$MCLMVR'                                    VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* CLEANSYS (DELETES MEG2 DATASETS)                      VS00004
          DC    CL8'CLEANSYS'                                   VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* TASK/MASTER (TMONLINE)                                VS00004
          DC    CL8'TMONLINE'                                   VS00004
          DC    AL1(PPTNDSI+PPTNSWP)                            VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* SUPERCOPY (DASD TRACK DUMPER)                         VS00004
          DC    CL8'SUPERCOP'                                   VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* COMPRESS (IEBCOPY)                                    VS00004
          DC    CL8'COMPRESS'                                   VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* GTF CCW-TRACE                                         VS00004
          DC    CL8'GTFCCW'                                     VS00004
          DC    AL1(PPTSKEY+PPTNSWP+PPTSYSTK)                   VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* OLTEP                                                 VS00004
          DC    CL8'IFDOLT  '                                   VS00004
          DC    AL1(PPTNSWP+PPTSYSTK+PPTSKEY)                   VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* IDMS - PRODUCTION CENTRAL VERSION                     VS00004
          DC    CL8'IDMSCV0P'                                   VS00004
          DC    AL1(PPTNSWP)                                    VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* FIDS - MRX DASD DIAGNOSTIC                            VS00004
          DC    CL8'MRXFIDS '                                   VS00004
          DC    AL1(PPTNSWP+PPTSYSTK+PPTSKEY)                   VS00004
          DC    AL1(PPTKEY0)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
********* ASM2-2.5                                              VS00004
          DC    CL8'$COPYTP '                                   VS00004
          DC    AL1(PPTNOPAS)                                   VS00004
          DC    AL1(PPTKEY8)                                    VS00004
          DC    XL2'FFFF'                                       VS00004
          DC    AL1(0)                                          VS00004
          DC    XL3'00'                                         VS00004
          DC    AL1(PPTSYSTK+PPTSKEY+PPTNSWP+PPTNOPAS) --- VTAM VS00004
          DC    AL1(PPTSYSTK+PPTSKEY+PPTPRIV)  --- TSO/SNA      VS00004
          DC    AL1(PPTSYSTK+PPTSKEY+PPTNSWP)  --- GTF          VS00004
          DC    AL1(PPTSYSTK+PPTSKEY+PPTNSWP)  --- GTF          VS00004
          DC    AL1(PPTSYSTK+PPTSKEY+PPTNSWP)  --- GTF          VS00004
          DC    AL1(PPTSYSTK+PPTSKEY)          --- EXT WRITER   VS00004
          DC    CL8'IEDQMCPR'   --- REMOTE TCAM10               VS00004
          DC    CL8'IEDQMCPL'   --- LOCAL TCAM10                VS00004
/*
//
./       ADD   NAME=VS00006
//$SYS0APF JOB (8205,0000),'6-UPDATE APF TABLES',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS0
/*JOBPARM Q=F,I,O=VS00006
//*
//*      THIS JCL WILL USE SMP TO INSTALL CSECTS
//*      IKJEFTE2 AND IKJEFTE8 INTO THE TSO TMP -
//*      IKJEFT02 IN 'SYS1.LPALIB'.  THE APFCTABL
//*      LIST IN CSECT IKJEFTE2 CONTAINS THE NAMES
//*      OF AUTHORIZED COMMAND PROCESSORS EXECUTED
//*      BY THE TMP. THE APFPTABL LIST IN CSECT
//*      IKJEFTE8 CONTAINS THE NAMES OF AUTHORIZED
//*      PROGRAMS TO BE EXECUTED BY CALL.
//*
//*      IF A PROGRAM IS TO BE EXECUTED BY BOTH THE
//*      TMP AND CALL, THEN ITS NAME MUST APPEAR IN
//*      BOTH LISTS.  SEE SPL: TSO, 'AUTHORIZED PROGRAM
//*      EXECUTION' FOR ADDITIONAL DETAILS.
//*
//*      STEP1: ASSEMBLE AND LINK-EDIT IKJEFTE2.
//*      STEP2: ASSEMBLE AND LINK-EDIT IKJEFTE8.
//*      STEP3: USE SMP TO RECEIVE AND APPLY THIS MOD
//*
//*      NOTE: SYS.IPO38E.LINKLIB SERVES AS A "HOLDING" LINKLIB
//*
//IKJEFTE2 EXEC ASMFCL,PARM.ASM='RENT,OBJ,NODECK',
//         PARM.LKED='RENT,REUS,XREF,LIST'
//ASM.SYSLIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.MACLIB,
//     DISP=SHR
//SYSIN         DD  *
IKJEFTE2 TITLE 'MVS TSO APF COMMAND PROCESSOR TABLE '
*
*   THIS TABLE CONTAINS THE NAMES OF AUTHORIZED COMMAND PROCESSORS
*   EXECUTED BY THE TSO TMP.
*
*   MODULE NAME = IKJEFTE2
*                                                                     *
         EJECT
         ENTRY APFCTABL
IKJEFTE2 CSECT
         DC    CL8'IKJEFTE2'
         DC    C'&SYSTIME_&SYSDATE'
APFCTABL DS    0D
         DC    CL8'$RA     '   ---ASM2---
         DC    CL8'$RB     '   ---ASM2---
         DC    CL8'$RC     '   ---ASM2---
         DC    CL8'$RL     '   ---ASM2---
         DC    CL8'$RSVP   '   ---ASM2---
         DC    CL8'$SM     '   ---ASM2---
         DC    CL8'$SQ     '   ---ASM2---
         DC    CL8'$SU     '   ---ASM2---
         DC    CL8'@       '   ---MRXPRINT---
         DC    CL8'@@      '   ---MRXTEST---
         DC    CL8'DEBUG   '   ---MRX---
         DC    CL8'DIDOCS  '   ---MRX---
         DC    CL8'DMOD    '   ---MRX---
         DC    CL8'MS      '   ---MRX---
         DC    CL8'SMF234  '   ---MRX---
         DC    CL8'SVC34   '   ---MRX---
         DC    CL8'TAPE    '   ---MRX---
         DC    CL8'TAPEX   '   ---MRX---
         DC    CL8'W       '   ---MRX---
         DC    CL8'WYLBUR  '   ---MRX---
         DC    CL8'$STATUS '   ---MRX---
         DC    CL8'$FETCH  '   ---MRX---
PATCH4   DC    CL8'        '
PATCH5   DC    CL8'        '
PATCH6   DC    CL8'        '
PATCH7   DC    CL8'        '
PATCH8   DC    CL8'        '
PATCH9   DC    CL8'        '
PATCH10  DC    CL8'        '
*
         DC    CL8'        '    8 BLANKS TERMINATES THE LIST
         END   IKJEFTE2
/*
//LKED.SYSLMOD  DD  DISP=OLD,DSN=SYS.IPO38E.LINKLIB(IKJEFTE2)
/*
//IKJEFTE8 EXEC ASMFCL,PARM.ASM='RENT,OBJ,NODECK',
//         PARM.LKED='RENT,REUS,XREF,LIST'
//ASM.SYSLIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.MACLIB,
//     DISP=SHR
//SYSIN         DD  *
IKJEFTE8 TITLE 'MVS TSO APF CALL TABLE '
*
*   THIS TABLE CONTAINS THE NAMES OF AUTHORIZED PROGRAMS INVOKED
*   VIA THE CALL COMMAND.
*
         EJECT
         ENTRY APFPTABL
IKJEFTE8 CSECT
         DC    CL8'IKJEFTE8'
         DC    C'&SYSTIME_&SYSDATE'
APFPTABL DS    0D
         DC    CL8'IEBCOPY '
         DC    CL8'IBCGP   '       ---MRX---
         DC    CL8'SUPERCOP'       ---MRX---
PATCH1   DC    CL8'$DUMMY1$'       ---MRX---
PATCH2   DC    CL8'$DUMMY2$'       ---MRX---
PATCH3   DC    CL8'$DUMMY3$'       ---MRX---
PATCH4   DC    CL8'$DUMMY4$'       ---MRX---
PATCH5   DC    CL8'$DUMMY5$'       ---MRX---
PATCH6   DC    CL8'$DUMMY6$'       ---MRX---
PATCH7   DC    CL8'$DUMMY7$'       ---MRX---
PATCH8   DC    CL8'$DUMMY8$'       ---MRX---
PATCH9   DC    CL8'$DUMMY9$'       ---MRX---
*
         DC    CL8'        '       8 BLANKS TERMINATES THE LIST
         END   IKJEFTE8
/*
//LKED.SYSLMOD  DD  DISP=OLD,DSN=SYS.IPO38E.LINKLIB(IKJEFTE8)
/*
//VS00006  EXEC SMP4APP,COND=(0,NE)
//SMPCNTL   DD  *
 REJECT  S(VS00006) .
 RECEIVE S(VS00006) .
 APPLY   S(VS00006)    /* IKJEFTE2-CMDS & IKJEFTE8-PGMS APF TABLES */ .
 LIST CDS SYSMOD(VS00006,IPOTE80) .
/*
//IPOLINK   DD  DISP=OLD,DSN=SYS.IPO38E.LINKLIB
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00006) .
++ VER (Z038)     FMID(EBB1102) SUP(IPOTE80) .
++ MOD (IKJEFTE2) DISTLIB(AOST4) LKLIB(IPOLINK) .
++ MOD (IKJEFTE8) DISTLIB(AOST4) LKLIB(IPOLINK) .
/*
//
./       ADD   NAME=VS00008
//$SYS6TSO JOB (8205,3919),'6-JCLSCAN TSO/CP SVC',MSGCLASS=X,CLASS=Z,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00008
//ASSEMBLY EXEC ASM80,OBJ=OBJPDS03,MOD=IGC0023F
//SYSIN     DD  DISP=SHR,DSN=SYS.LINKLIB2.SOURCE(IGC0023F)
/*
//VS00008  EXEC SMP4APP,COND=(0,LT)
//SMPCNTL   DD  *
 REJECT  S (VS00008) .
 RECEIVE S (VS00008) .
 APPLY   S (VS00008)    /* JCLSCAN TSO COMMAND PROCESSOR LOCAL SVC
                             (CONVERTER INTERFACE - TYPE III)      */ .
/*
//OBJPDS03  DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.OBJPDS03,DISP=SHR
/*
//SMPPTFIN  DD  DATA
++ USERMOD (VS00008) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC0023F) TXLIB(OBJPDS03) .
++ JCLIN  .
//LINKEDIT EXEC PGM=HEWL,
//         PARM='LIST,LET,XREF,RENT,REUS'
//SYSPRINT  DD  SYSOUT=*
//OBJPDS03  DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.OBJPDS03,DISP=SHR
//SYSLMOD   DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//SYSUT1    DD  UNIT=SYSDA,SPACE=(TRK,(2,1))
//SYSLIN    DD  *
 INCLUDE  OBJPDS03(IGC0023F)
 SETSSI   80000205
 NAME     IGC0023F(R)
/*
//
./       ADD   NAME=VS00009
//$SYS6TSO JOB (8205,3919),'6-Ö LOGICAL TABCHAR',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00009
//VS00009 EXEC SMP4APP
//SMPCNTL  DD  *
 RECEIVE S (VS00009) .
 APPLY   S (VS00009)     /* ADD SUPPORT FOR CENT SIGN AS THE LOGICAL
                              TAB CHARACTER ON ALL 3270 TERMINALS.
                           SOURCE:  SHARE SSD/299 - MVS TUNING REPORT
                                                                   */ .
/*
//SMPPTFIN DD  *
++ USERMOD (VS00009) .
++ VER (Z038) FMID(EBB1102) PRE(UZ31940) .
++ ZAP (IKJEBELE) .
 NAME IKJEBELE
******* ---- **** ----- **** ---- ********
**  REPLACE LOGICAL TAB WITH CENT SIGN  **
******* ---- **** ----- **** ---- ********
 VER  0228 92406003     MVI  3(6),X'40'
 VER  0830 4A4B4C4D     TRANSLATE TABLE -  CENT SIGN, TABLE CONT.
 REP  0228 924A6003     MVI  3(6),C'Ö'     TAB OFF SUBCOMMAND
 REP  0830 05           TRANSLATE TABLE -  LOGICAL TAB FOR 3270
 IDRDATA VS00009
/*
//
./       ADD   NAME=VS00010
//$SYSCLPA JOB (8205,3919),'6-CMDLIB TO LPALIB',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYSC
/*JOBPARM Q=F,I,O=VS00010
//*-----------------------------------------------------------*//
//*               ---  W  A  R  N  I  N  G  ---               *//
//*       BE SURE TO CHECK WITH ME ( JACK ) BEFORE RUNNING    *//
//*       THIS JOB -- NEITHER MODULE IS REENT AT THIS TIME    *//
//*       I'LL FIX THAT SOON.  (01/10/81)                     *//
//*-----------------------------------------------------------*//
//*
//*
//*
//* REFER:  IPO1.JCLLIB(LPACMDS)
//* COMPID: TUNING
//* DOC:    THIS MEMBER CONTAINS JCL AND CONTROL STATEMENTS TO
//*         COPY REENTRANT MEMBERS OF 'SYS2.LINKLIB' TO 'SYS1.LPALIB'.
//*
//*         IF INDIVIDUAL NAMES ARE REMOVED FROM THE COPY STEP,
//*         THEY SHOULD BE REMOVED FROM THE SMP STEP ALSO.
//*         NOTE:  THE EXECUTION OF THIS JOB WILL INCREASE THE SIZE
//*         OF LPALIB BY 1K AND MAY ALSO REDUCE THE SIZE OF THE
//*         PRIVATE AREA BY THE SAME AMOUNT.  OVER 30% OF ALL
//*         BLDL'S WERE FOR THESE TWO MODULES.
//*
//CPYCMDS EXEC PGM=IEBCOPY,REGION=2048K
//SYSPRINT DD  SYSOUT=*
//LPALIB   DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//LINKLIB  DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS2.LINKLIB,DISP=OLD
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(3,2))
//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(3,2))
//SYSIN    DD  *
 COPY INDD=((LINKLIB,R)),OUTDD=LPALIB
 S M=(WRITELOG,CLR3270)
/*
//VS00010 EXEC SMP4APP
//SYSIN    DD  *
  UCLIN CDS    /* ENTRY FOR EACH MODULE AND ALIAS COPIED TO LPALIB */ .
  ADD LMOD(WRITELOG) SYSLIB(LPALIB) .
  ADD LMOD(WL)       SYSLIB(LPALIB) .
  ADD LMOD(CLR3270)  SYSLIB(LPALIB) .
  ENDUCL .
/*
//
./       ADD   NAME=VS00011
//$SYS6TSO JOB (8205,3919),'6-TEKTRONIX WITH TSO',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,O=VS00011
//VS00011  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00011) .
 APPLY   S (VS00011)      /* IEDAYW:  OUTPUT EDIT ROUTINE FOR TCAM/TSO
                             FICHE:   FRAME J27/CARD 365 PTF TAPE 8006

                               PERMIT TEKTRONIX TERMINAL TO FUNCTION
                                   UNDER MVS/TSO WITH SPEAKEZ      */ .
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00011) .
++ VER (Z038) FMID(ETC0108) PRE(UZ32954) .
++ ZAP (IEDAYW) .
 NAME IEDAYW
 VER  0F74 441031D8     EX   RNDX,CTLTR          TEST CONTROL CHARS
 VER  0F78 18F8         LR   RRTN,RTEMP          CHAR COUNT
 VER  0F7A 957A9000     CLI  ZERO(RTEMPA),COLON  IS CHAR COLON
 VER  0F7E 477031B4     BNE  NOPRINT             NO, BRANCH
 REP  0F74 4700         NOP
 REP  0F7E 47F0         BE   NOPRINT
 IDRDATA VS00011
/*
//
./       ADD   NAME=VS00013
//$SYS6TSO JOB (8205,3919),'6-ELIMINATE TSO/BLDL',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00013
//VS00013 EXEC SMP4APP
//SMPCNTL  DD  *
 RECEIVE S (VS00013) .
 APPLY   S (VS00013)                    /* ELIMINATE BLDL FOR TSO EDIT
                                               AND TEST SUBCOMMANDS */ .
/*
//SMPPTFIN DD  *
++ USERMOD (VS00013) .
++ VER (Z038) FMID(EBB1102) .
++ ZAP (IKJEBECI) .
 NAME IKJEBECI
 VER  021C 0A12
 VER  037C 9280F000
 REP  021C 1BFF
 REP  037C 9200
 IDRDATA VS00013
++ ZAP (IKJEGCIV) .
 NAME IKJEGCIV
 VER  00F4 0A12
 REP  00F4 1BFF
 IDRDATA VS00013
/*
//
./       ADD   NAME=VS00014
//$SYS0A25 JOB (8205,0000),'6 PAJERSKI',MSGCLASS=X,CLASS=Z,NOTIFY=$SYS0
/*JOBPARM Q=F,O=VS00014
//*
//*   ASM2-2.5 --- IGG019WB / EOE APPENDAGE FOR $DEFRAG
//*
//VS00014 EXEC SMP4APP
//SMPCNTL   DD  *
   RECEIVE S (VS00014) .
   APPLY   S (VS00014)   /* EOE APPENDAGE FOR $DEFRAG */ .
//SMPPTFIN  DD  DATA
++ USERMOD (VS00014) .
++ VER (Z038) FMID(EDM1102) .
++ MOD (IGG019WB) DISTLIB(ASM2LIB) LKLIB(ASM2LIB) .
++ JCLIN .
//IGG019WB EXEC PGM=IEWL,PARM='LET,LIST,REFR,RENT,XREF'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=WORK,SPACE=(CYL,(1,1))
//ASM2LIB  DD  DSN=ASM2.V25.ARCH.LOAD,DISP=SHR
//SYSLMOD  DD  DSN=SYS1.LPALIB,UNIT=3330-1,VOL=SER=SYS999,DISP=SHR
//SYSLIN  DD  *
    INCLUDE ASM2LIB(IGG019WB)
    NAME IGG019WB
/*
//ASM2LIB DD DISP=SHR,DSN=ASM2.V25.ARCH.LOAD
./       ADD   NAME=VS00016
//$SYS6WYL JOB (8205,3919),'6-WYLBUR TSO/CP SVC',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00016
//VS00016  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00016) .
 APPLY   S (VS00016)  /* JSCB AUTHORIZATION - WYLBUR SVC - TYPE IV */ .
/*
//WYLBUR    DD  DISP=SHR,DSN=SYS3.WYLBUR.LINKLIB
/*
//SMPPTFIN  DD  DATA
++ USERMOD (VS00016) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC0024I) DISTLIB(WYLBUR) LKLIB(WYLBUR) .
++ JCLIN .
//WYLBUR   EXEC PGM=IEBCOPY
//SYSPRINT  DD  SYSOUT=*
//WYLBUR    DD  DISP=SHR,DSN=SYS3.WYLBUR.LINKLIB
//LPALIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(2,1))
//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(2,1))
//SYSIN     DD  *
 C I=((WYLBUR,R)),O=LPALIB
 S M=IGC0024I
/*
//
./       ADD   NAME=VS00017
//$SYS3 JOB (8205,2443),'6 VS00017 FOWLER',CLASS=Z,
//             NOTIFY=$SYS3
//VS00017 EXEC SMP4
//SYSIN DD *
 RECEIVE S (VS00017).
 LIST  PTS SYSMOD(VS00017) .
//SMPPTFIN DD  *
++ USERMOD (VS00017) /* PUT JOB NAME ON THE PUNCH SEPARATOR CARD */ .
++ VER (Z038)  FMID(EJE1102)
       PRE(AZ40644,UZ26743,UZ26744,UZ27259,UZ27051,UZ90070,
           #Z90235,#Z90276)
       REQ(VS00018,VS00025,VS00033) .
++ SRCUPD (HASPPRPU) DISTLIB(HASPSRC) .
./ CHANGE NAME=HASPPRPU
         MVC   BUFSTART(8),JCTJNAME     MOVE JOB NAME TO PUNCH  VS00017
./  ENDUP
./       ADD   NAME=VS00018
//$SYS3 JOB (8205,2443),'6 VS00018',CLASS=Z,
//      NOTIFY=$SYS3
/*JOBPARM Q=F
//VS00018 EXEC SMP4
//SYSIN  DD  *
 REJECT  S (VS00018).
 RECEIVE S (VS00018).
//SMPPTFIN DD  *
++ USERMOD (VS00018) /* SET THE DEFAULT MSGCLASS TO "A"
                     FOR A TSO-SUBMITTED JOB */ .
++ VER (Z038) FMID(EJE1102)
   PRE(AZ40644,UZ26743,UZ26744,UZ27051,UZ27259,UZ90070,#Z90235,#Z90276)
   REQ(VS00017,VS00025,VS00033) .
++ SRCUPD (HASPRDR) DISTLIB (HASPSRC) .
./ CHANGE NAME=HASPRDR
         MVI   JCTMCLAS,C'A'            SET DEFAULT MSGCLASS=A  VS00018
         CLI   JCTJOBID,C'J'            IS THIS A JOB           VS00018
         BE    *+10                     BIF SO - USE MSGCLASS=A VS00018
./  ENDUP
./       ADD   NAME=VS00020
//$SYS6LNK JOB (8205,0802),'6-LINKLIB TO LPALIB',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00020
//CPYLINK  EXEC PGM=IEBCOPY,REGION=2048K
//SYSPRINT  DD  SYSOUT=*
//LPALIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//LINKLIB   DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LINKLIB,DISP=OLD
//SYSUT3    DD  UNIT=SYSDA,SPACE=(CYL,(3,2))
//SYSUT4    DD  UNIT=SYSDA,SPACE=(CYL,(3,2))
//SYSIN     DD  *
 COPY INDD=((LINKLIB,R)),OUTDD=LPALIB
 S M=IDCAL01
 S M=IDCAMS
 S M=IDCBI01
 S M=IDCCC01
 S M=IDCCDAL
 S M=IDCCDBI
 S M=IDCCDCC
 S M=IDCCDCK
 S M=IDCCDDE
 S M=IDCCDDL
 S M=IDCCDLC
 S M=IDCCDLR
 S M=IDCCDMP
 S M=IDCCDPM
 S M=IDCCDPR
 S M=IDCCDRC
 S M=IDCCDRM
 S M=IDCCDRP
 S M=IDCCDRS
 S M=IDCCDVY
 S M=IDCCDXP
 S M=IDCCK01
 S M=IDCDB01
 S M=IDCDB02
 S M=IDCDE01
 S M=IDCDL01
 S M=IDCIO04
 S M=IDCLC01
 S M=IDCLR01
 S M=IDCMP01
 S M=IDCPM01
 S M=IDCPR01
 S M=IDCRC01
 S M=IDCRIKT
 S M=IDCRILT
 S M=IDCRI01
 S M=IDCRI04
 S M=IDCRM01
 S M=IDCRP01
 S M=IDCRS01
 S M=IDCSATO
 S M=IDCTSAL0
 S M=IDCTSBI0
 S M=IDCTSCC0
 S M=IDCTSCK0
 S M=IDCTSDE0
 S M=IDCTSDL0
 S M=IDCTSEX0
 S M=IDCTSIO0
 S M=IDCTSLC0
 S M=IDCTSLC1
 S M=IDCTSLR0
 S M=IDCTSLR1
 S M=IDCTSMP0
 S M=IDCTSPR0
 S M=IDCTSRC0
 S M=IDCTSRI0
 S M=IDCTSRI1
 S M=IDCTSRS0
 S M=IDCTSSA0
 S M=IDCTSTP0
 S M=IDCTSTP1
 S M=IDCTSTP6
 S M=IDCTSUV0
 S M=IDCTSXP0
 S M=IDCVY01
 S M=IDCXP01
 S M=IKJCT467
 S M=IKJCT469
 S M=IKJEES40
 S M=IKJEES73
 S M=IKJEFA10
 S M=IKJEFA20
 S M=IKJEFA30
 S M=IKJEFA40
 S M=IKJEFF03
 S M=IKJEFF04
 S M=IKJEFF15
 S M=IKJEFF18
 S M=IKJEFF19
 S M=IKJEFF50
 S M=IKJEFF51
 S M=IKJEFF55
 S M=IKJEFF57
 S M=IKJEFT25
 S M=IKJRBBCR
 S M=IKJEFF10
 S M=IKJEFF53
 S M=ACCOUNT
 S M=AMBLIST
 S M=HEWLDRGO
 S M=HEWLOAD
 S M=HEWLOADR
 S M=HMBLIST
 S M=IAPAP100
 S M=IAPTIMER
 S M=IEAVMASV
 S M=IEAVMQR0
 S M=IEAVMWTL
 S M=IEAVTMSI
 S M=IEAVTPUT
 S M=IEAVVINT
 S M=IEBCRANL
 S M=IEBCREAT
 S M=IEBDG
 S M=IEBDGCUP
 S M=IEBDGMSG
 S M=IEBFDANL
 S M=IEBFDTBL
 S M=IEBISAM
 S M=IEBISC
 S M=IEBISF
 S M=IEBISL
 S M=IEBISPL
 S M=IEBISU
 S M=IEDQEC
 S M=IEDQES
 S M=IEDQEW
 S M=IEDQGQ
 S M=IEDQNF
 S M=IEDQNG
 S M=IEDQNH
 S M=IEDQNJ
 S M=IEDQNK
 S M=IEDQNM
 S M=IEDQNO
 S M=IEDQNP
 S M=IEDQNQ
 S M=IEDQNR
 S M=IEDQNS
 S M=IEDQNX
 S M=IEDQWO
 S M=IEECVGCI
 S M=IEEPGEXP
 S M=IEESB601
 S M=IEEVSEND
 S M=IEHATLAS
 S M=IEWLDRGO
 S M=IEWLOAD
 S M=IEWLOADR
 S M=IFASMFDP
 S M=IGFCIC
 S M=IGFC60
 S M=IGFC70
 S M=IGFC80
 S M=IGG0CLA0
 S M=ILROPS00
 S M=ILRPGEXP
 S M=ILRPREAD
 S M=IMBLIST
 S M=LOADER
/*
//VS00020  EXEC SMP4APP,COND=(0,LT)    UCLIN: LINKLIB ---> LPALIB
//SMPCNTL   DD  *
  UCLIN CDS .
  ADD LMOD(IDCAL01)    SYSLIB(LPALIB).
  ADD LMOD(IDCAMS)     SYSLIB(LPALIB).
  ADD LMOD(IDCBI01)    SYSLIB(LPALIB).
  ADD LMOD(IDCCC01)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDAL)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDBI)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDCC)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDCK)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDCV)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDDE)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDDL)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDLC)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDLR)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDMP)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDPM)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDPR)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRC)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRM)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRP)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRS)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDVY)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDXP)    SYSLIB(LPALIB).
  ADD LMOD(IDCCK01)    SYSLIB(LPALIB).
  ADD LMOD(IDCDB01)    SYSLIB(LPALIB).
  ADD LMOD(IDCDB02)    SYSLIB(LPALIB).
  ADD LMOD(IDCDE01)    SYSLIB(LPALIB).
  ADD LMOD(IDCDL01)    SYSLIB(LPALIB).
  ADD LMOD(IDCIO04)    SYSLIB(LPALIB).
  ADD LMOD(IDCLC01)    SYSLIB(LPALIB).
  ADD LMOD(IDCLR01)    SYSLIB(LPALIB).
  ADD LMOD(IDCMP01)    SYSLIB(LPALIB).
  ADD LMOD(IDCPM01)    SYSLIB(LPALIB).
  ADD LMOD(IDCPR01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRC01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRIKT)    SYSLIB(LPALIB).
  ADD LMOD(IDCRILT)    SYSLIB(LPALIB).
  ADD LMOD(IDCRI01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRI04)    SYSLIB(LPALIB).
  ADD LMOD(IDCRM01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRP01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRS01)    SYSLIB(LPALIB).
  ADD LMOD(IDCSATO)    SYSLIB(LPALIB).
  ADD LMOD(IDCTSAL0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSBI0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSCC0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSCK0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSDE0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSDL0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSEX0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSIO0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLC0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLC1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLR0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLR1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSMP0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSPR0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRC0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRI0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRI1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRS0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSSA0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSTP0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSTP1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSTP6)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSUV0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSXP0)   SYSLIB(LPALIB).
  ADD LMOD(IDCVY01)    SYSLIB(LPALIB).
  ADD LMOD(IDCXP01)    SYSLIB(LPALIB).
  ADD LMOD(IKJCT467)   SYSLIB(LPALIB).
  ADD LMOD(IKJCT469)   SYSLIB(LPALIB).
  ADD LMOD(IKJEES40)   SYSLIB(LPALIB).
  ADD LMOD(IKJEES73)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA10)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA20)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA30)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA40)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF03)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF04)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF15)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF18)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF19)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF50)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF51)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF55)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF57)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFT25)   SYSLIB(LPALIB).
  ADD LMOD(IKJRBBCR)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF10)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF53)   SYSLIB(LPALIB).
  ADD LMOD(ACCOUNT)    SYSLIB(LPALIB).
  ADD LMOD(AMBLIST)    SYSLIB(LPALIB).
  ADD LMOD(HEWLDRGO)   SYSLIB(LPALIB).
  ADD LMOD(HEWLOAD)    SYSLIB(LPALIB).
  ADD LMOD(HEWLOADR)   SYSLIB(LPALIB).
  ADD LMOD(HMBLIST)    SYSLIB(LPALIB).
  ADD LMOD(IAPAP100)   SYSLIB(LPALIB).
  ADD LMOD(IAPTIMER)   SYSLIB(LPALIB).
  ADD LMOD(IEAVMASV)   SYSLIB(LPALIB).
  ADD LMOD(IEAVMQR0)   SYSLIB(LPALIB).
  ADD LMOD(IEAVMWTL)   SYSLIB(LPALIB).
  ADD LMOD(IEAVTMSI)   SYSLIB(LPALIB).
  ADD LMOD(IEAVTPUT)   SYSLIB(LPALIB).
  ADD LMOD(IEAVVINT)   SYSLIB(LPALIB).
  ADD LMOD(IEBCRANL)   SYSLIB(LPALIB).
  ADD LMOD(IEBCREAT)   SYSLIB(LPALIB).
  ADD LMOD(IEBDG)      SYSLIB(LPALIB).
  ADD LMOD(IEBDGCUP)   SYSLIB(LPALIB).
  ADD LMOD(IEBDGMSG)   SYSLIB(LPALIB).
  ADD LMOD(IEBFDANL)   SYSLIB(LPALIB).
  ADD LMOD(IEBFDTBL)   SYSLIB(LPALIB).
  ADD LMOD(IEBISAM)    SYSLIB(LPALIB).
  ADD LMOD(IEBISC)     SYSLIB(LPALIB).
  ADD LMOD(IEBISF)     SYSLIB(LPALIB).
  ADD LMOD(IEBISL)     SYSLIB(LPALIB).
  ADD LMOD(IEBISPL)    SYSLIB(LPALIB).
  ADD LMOD(IEBISU)     SYSLIB(LPALIB).
  ADD LMOD(IEDQEC)     SYSLIB(LPALIB).
  ADD LMOD(IEDQES)     SYSLIB(LPALIB).
  ADD LMOD(IEDQEW)     SYSLIB(LPALIB).
  ADD LMOD(IEDQGQ)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNF)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNG)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNH)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNJ)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNK)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNM)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNO)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNP)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNQ)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNR)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNS)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNX)     SYSLIB(LPALIB).
  ADD LMOD(IEDQWO)     SYSLIB(LPALIB).
  ADD LMOD(IEECVGCI)   SYSLIB(LPALIB).
  ADD LMOD(IEEPGEXP)   SYSLIB(LPALIB).
  ADD LMOD(IEESB601)   SYSLIB(LPALIB).
  ADD LMOD(IEEVSEND)   SYSLIB(LPALIB).
  ADD LMOD(IEHATLAS)   SYSLIB(LPALIB).
  ADD LMOD(IEWLDRGO)   SYSLIB(LPALIB).
  ADD LMOD(IEWLOAD)    SYSLIB(LPALIB).
  ADD LMOD(IEWLOADR)   SYSLIB(LPALIB).
  ADD LMOD(IFASMFDP)   SYSLIB(LPALIB).
  ADD LMOD(IGFCIC)     SYSLIB(LPALIB).
  ADD LMOD(IGFC60)     SYSLIB(LPALIB).
  ADD LMOD(IGFC70)     SYSLIB(LPALIB).
  ADD LMOD(IGFC80)     SYSLIB(LPALIB).
  ADD LMOD(IGG0CLA0)   SYSLIB(LPALIB).
  ADD LMOD(ILROPS00)   SYSLIB(LPALIB).
  ADD LMOD(ILRPGEXP)   SYSLIB(LPALIB).
  ADD LMOD(ILRPREAD)   SYSLIB(LPALIB).
  ADD LMOD(IMBLIST)    SYSLIB(LPALIB).
  ADD LMOD(LOADER)     SYSLIB(LPALIB).
  ENDUCL.
/*
//
./       ADD   NAME=VS00021
//$SYS6SRT JOB (8205,3919),'6-SYNCSORT LPA MODS',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00021
//VS00021  EXEC SMP4APP
//SMPCNTL   DD  *
 UCLIN CDS        /* CDS ENTRIES FOR SYNCSORT-2.3E ADDED TO LPALIB */ .
 ADD LMOD (IGC0023G) SYSLIB(LPALIB) .
 ADD LMOD (WCSRENT)  SYSLIB(LPALIB) .
 ENDUCL .
 RECEIVE S(VS00021) .
 APPLY   S(VS00021)         /* SYNCSORT-R2.3E LOCAL SVC - TYPE III */ .
/*
//SYNCSORT  DD  DISP=SHR,DSN=SYS3.SYNCSORT.LPALIB
/*
//SMPPTFIN  DD  DATA
++ USERMOD (VS00021) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC0023G) DISTLIB(SYNCSORT) LKLIB(SYNCSORT) .
++ MOD (WCSREENT) DISTLIB(SYNCSORT) LKLIB(SYNCSORT) .
++ JCLIN .
//SYNCSORT EXEC PGM=IEBCOPY
//SYSPRINT  DD  SYSOUT=*
//SYNCSORT  DD  DISP=SHR,DSN=SYS3.SYNCSORT.LPALIB
//LPALIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(2,1))
//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(2,1))
//SYSIN     DD  *
 C I=SYNCSORT,O=LPALIB
 S M=IGC0023G
 S M=WCSREENT
/*
//
./       ADD   NAME=VS00022
//$SYS6TSO JOB (8205,3919),'6-USER EDIT SUBCMDS',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00022
//VS00022  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S(VS00022) .
 APPLY   S(VS00022)    /* JTIP-SUPPLIED USER EDIT SUBCOMMAND TABLE */ .
/*
//SMPPTFIN  DD  DATA
++ USERMOD (VS00022) .
++ VER (Z038) FMID(JBB1112) .
++ MOD (IKJEBMA9) DISTLIB(JTIPMOD) LKLIB(JTIPMOD) .
++ JCLIN .
//LKED     EXEC PGM=IEWL,
//         PARM='NCAL,LIST,LET,XREF,RENT,REUS,REFR'
//SYSPRINT  DD  SYSOUT=*
//SYSLMOD   DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//CMDLIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.CMDLIB,DISP=SHR
//JTIPMOD   DD  DISP=SHR,DSN=SYS3.JTIP.JTIPMOD
//SYSUT1    DD  UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSLIN    DD  *
 INCLUDE JTIPMOD(IKJEBMA9)
 INCLUDE CMDLIB(IKJEBEMA)
 ALIAS   IKJEBEEN,IKJEBEXT,IKJEBEUT
 ENTRY   IKJEBEMA
 SETSSI  81000220
 NAME    IKJEBEMA(R)
/*
//
./       ADD   NAME=VS00024
//$SYS0UTL JOB (8205,0000),'6 PAJERSKI',MSGCLASS=X,CLASS=Z,NOTIFY=$SYS0
/*JOBPARM Q=F,O=VS00024
//*
//*   MEMOREX'S IEFUTL
//*
//VS00024 EXEC SMP4APP
//SMPCNTL   DD  *
   RECEIVE S (VS00024) .
   APPLY   S (VS00024)   /* IEFUTL */ .
//SMPPTFIN  DD  DATA
++ USERMOD (VS00024) .
++ VER (Z038) FMID(JBB1126) .
++ MOD (IEFUTL)   DISTLIB(EXITS) LKLIB(EXITS) .
++ JCLIN .
//IEFUTL EXEC PGM=IEWL,PARM='LET,LIST,RENT,XREF'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=WORK,SPACE=(CYL,(1,1))
//EXITS    DD  DSN=SYS2.EXITS.LINKLIB,DISP=SHR
//SYSLMOD  DD  DSN=SYS1.LPALIB,UNIT=3330-1,VOL=SER=SYS999,DISP=SHR
//SYSLIN  DD  *
    INCLUDE EXITS(IEFUTL)
    IDENTIFY IEFUTL('FJP/11MAR81')
    NAME IEFUTL(R)
/*
//EXITS DD DISP=SHR,DSN=SYS2.EXITS.LINKLIB
./       ADD   NAME=VS00027
//$SYS0CAT JOB (8205,0000),'6-NOT CATLG 2 MSG',CLASS=Z,MSGCLASS=X,
//    NOTIFY=$SYS0
/*JOBPARM  Q=F,O=VS00027
//VS00027  EXEC SMP4APP
//SMPCNTL   DD  *
 REJECT  S (VS00027) .
 RECEIVE S (VS00027) .
 APPLY   S (VS00027)    /* FORCE A JOBFAIL IF A "NOT CATLG 2" */ .
 LIST  CDS SYSMOD (VS00027) .
/*
//SMPPTFIN  DD  *
++ USERMOD(VS00027) .
++ VER(Z038) FMID(EBB1102) PRE(UZ31055) .
++ ZAP(IEFAB4A2) .
 NAME IEFW21SD IEFAB4A2
 VER  1290  1F88             SLR   R8,R8
 VER  1292  4381B408         IC    R8,CATLERRC-1(R1)
 VER  1296  5080A1A4         ST    R8,MRETCODE
 VER  1440  00000000,00000000,00000000,00000000
 VER  1460  00000000,00000000,00000000,00000000
 VER  1480  00000000,00000000,00000000,00000000
 REP  1296  47F0B41D         B     PATCH              GO TO PATCH AREA
 REP  1440  5080A1A4         ST    R8,MRETCODE        REISSUE INSTRUC.
 REP  1444  9502A1A7         CLI   MRETCODE+3,X'02'   WAS CTLG ERR CC=2
 REP  1448  4770B277         BNE   @RF00661           NO, RET TO PGM
 REP  144C  950CA180         CLI   DISPID,X'0C'       WAS IT A RECATLG
 REP  1450  4780B277         BE    @RF00661           YES, RET TO PGM
 REP  1454  5870A050         L     R7,@PC00001+8      LOAD ADDR/LCTJSCB
 REP  1458  4B70B46D         SH    R7,=H'360'         BACK TO LCT START
 REP  145C  D50271FDB46F     CLC   509(3,R7),=CL3'LCT' IS THIS REAL LCT
 REP  1462  4770B277         BNE   @RF00661           NOPE ???, RETURN
 REP  1466  96807020         OI    32(R7),LCTJFAIL    SET LCTJFAIL SWT.
 REP  146A  0700             CNOP  0,4                -- ALIGNMENT --
 REP  146C  4510B465         BAL   1,IHB0001A         BR TO SVC
 REP  1470  0018             DC    AL2(24)            TEXT LENGTH
 REP  1472  0000             DC    B'0000000000000000' MCS FLAGS
 REP  1474  D4D9E7F0F0F0F140 DC    C'MRX0001 -NOT CATLG 2'
 REP  147C  60D5D6E340C3C1E3                          CONSOLE MESSAGE
 REP  1484  D3C740F2                                  WHEN JOB FAILS
 REP  1488  0A23             SVC   35                 WTO SVC
 REP  148A  47F0B277         B     @RF00661           RETURN TO PGM
 REP  1490  0168                   =H'360'
 REP  1492  D3C3E3                 =CL3'LCT'
 IDRDATA VS00027
/*
./       ADD   NAME=VS000279
//$SYS0CAT JOB (8205,0000),'6-NOT CATLG 2 MSG',CLASS=Z,MSGCLASS=X,
//    NOTIFY=$SYS0
/*JOBPARM  Q=F,O=VS00027
//VS00027  EXEC SMP4APP
//SMPCNTL   DD  *
 REJECT  S (VS00027) .
 RECEIVE S (VS00027) .
 APPLY   S (VS00027)    /* FORCE A JOBFAIL IF A "NOT CATLG 2" */ .
 LIST  CDS SYSMOD (VS00027) .
/*
//SMPPTFIN  DD  *
++ USERMOD(VS00027) .
++ VER(Z038) FMID(EBB1102) PRE(UZ31055) .
++ ZAP(IEFAB4A2) .
 NAME IEFW21SD IEFAB4A2
 VER  1290  1F88             SLR   R8,R8
 VER  1292  4381B408         IC    R8,CATLERRC-1(R1)
 VER  1296  5080A1A4         ST    R8,MRETCODE
 VER  1440  00000000,00000000,00000000,00000000
 VER  1460  00000000,00000000,00000000,00000000
 VER  1480  00000000,00000000,00000000,00000000
 REP  1296  47F0B41D         B     PATCH              GO TO PATCH AREA
 REP  1440  5080A1A4         ST    R8,MRETCODE        REISSUE INSTRUC.
 REP  1444  9502A1A7         CLI   MRETCODE+3,X'02'   WAS CTLG ERR CC=2
 REP  1448  4770B277         BNE   RETURN             NO, RET TO PGM
 REP  144C  950CA180         CLI   DISPID,X'0C'       WAS IT A RECATLG
 REP  1450  4780B277         BE    RETURN             YES, RET TO PGM
 REP  1454  5870A050         L     R7,@PC00001+8      LOAD ADDR/LCTJSCB
 REP  1458  4B70B469         SH    R7,=H'360'         BACK TO LCT START
 REP  145C  D50271FDB46B     CLC   509(3,R7),=CL3'LCT' IS THIS REAL LCT
 REP  1462  4770B277         BNE   RETURN             NOPE ???, RETURN
 REP  1466  96807020         OI    32(R7),LCTJFAIL    SET LCTJFAIL SWT.
 REP  146A  4510B463         BAL   1,IHB0001A         BR TO SVC
 REP  146E  0018             DC    AL2(24)            TEXT LENGTH
 REP  1470  0000             DC    B'0000000000000000' MCS FLAGS
 REP  1472  4ED4D9E7F0F0F0F1 DC    C'+MRX0001 NOT CATLG 2'
 REP  147A  40D5D6E340C3C1E3                          CONSOLE MESSAGE
 REP  1482  D3C740F2                                  WHEN JOB FAILS
 REP  1486  0A23             SVC   35                 WTO SVC
 REP  1488  47F0B277         B     RETURN             RETURN TO PGM
 REP  148C  0168                   =H'360'
 REP  148E  D3C3E3                 =CL3'LCT'
 IDRDATA VS00027
/*
./       ADD   NAME=VS00029
//$SYS0SVC JOB (8205,0000),'6-SPARE SVC & ALIAS',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS0
/*JOBPARM Q=F,I,O=VS00029
//SPARELNK EXEC LKED
//SYSPRINT      DD  SYSOUT=*
//LKED.SYSLMOD  DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//LINKLIB       DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LINKLIB,
//     DISP=SHR
//SYSIN         DD  *
 INCLUDE LINKLIB(IEFBR14)
 ALIAS IGC0024C,IGC0024D,IGC0024F,IGC0023H
 NAME SPARESVC(R)
/*
//SPARESVC EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE SELECT (VS00029) .
 APPLY   SELECT (VS00029) .
/*
//SPARESVC  DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LINKLIB,DISP=SHR
/*
//SMPPTFIN  DD  DATA
++ USERMOD (VS00029) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (SPARESVC) DISTLIB(SPARESVC) LKLIB(SPARESVC)
   TALIAS(IGC0024C,IGC0024D,IGC0024F,IGC0023H) .
/*
//
./       ADD   NAME=VS00031
//$SYS6FCB JOB (8205,3919),'6-FCB FOR 68 LPP',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00031
//FCB68LPP EXEC PGM=AMASPZAP
//SYSPRINT  DD  SYSOUT=*
//SYSLIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.IMAGELIB,DISP=SHR
//SYSIN     DD  *
*****                                *****
**  THIS MOD ENABLES SUPPORT OF 68 LPP  **
*****                                *****
 NAME FCB28
 VER 0000 80598111,00000000,00000002,00000000
 VER 0010 00000003,00000000,00000004,00000000
 VER 0020 00000005,00000000,00000006,00000000
 VER 0030 00000007,00000000,00000008,00000000
 VER 0040 0000000A,00000000,0000000B,00000000
 VER 0050 0000000C,00000900,00001000,00000000
 REP 0000 80448111,00000000,00020000,00000003
 REP 0010 00000000,00040000,00000005,00000000
 REP 0020 00060000,00000007,00000000,00080000
 REP 0030 0000000A,00000000,000B0000,0000000C
 REP 0040 00000900,00000010,00000000,00000000
 REP 0050 00000000,00000000,00000000,00000000
 IDRDATA VS00031
/*
//
./       ADD   NAME=VS00032
//$SYS6CON JOB (8205,0726),'6-ROLL/DELETE MODE',MSGCLASS=X,CLASS=Z,
//     NOTIFY=$SYSC
/*JOBPARM  Q=F,O=VS00032
//VS00032 EXEC SMP4APP
//SMPCNTL  DD  *
 RECEIVE S (VS00032) .
 APPLY   S (VS00032)         /* PLACE CONSOLES IN ROLL-DELETE MODE */ .
 ACCEPT  S (VS00032) .
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00032)
 /*  RELEASE :  MVS/3.8 SP-1
     PROBLEM :  UNATTENDED CONSOLES WILL QUEUE UP MESSAGES AND
                EVENTUALLY CRASH SYSTEM DUE TO BUFFER SHORTAGE
     SOLUTION:  INVOKE DIDOCS TO SETUP SCREENS IN DELETABLE MODE
                AFTER INITIALIZATION
     WARNING :  BE SURE TO ASSIGN ALL ALIAS NAMES AND ENTRY
                POINT ON EXPAND OPERATION OF LINKAGE EDITOR
                OR USE SMP;
                MODIFICATION WILL AUTOMATICALLY SET FOLLOWING
                MODE ON ALL GRAPHICS CONSOLES:
                -->  K S,DEL=RD,RTME=1,CON=N,SEG=19
                THIS MOD SHOULD BE ACCEPTED AFTER IT IS PROVEN TO WORK;
                ANY I/O GENS WILL RESULT IN LOSS OF THE MOD IF IT IS
                NOT ACCEPTED.
     SOURCE  :  SSD #277 - SHARE, INC. (JULY 15, 1977)
     NOTES   :  R9          -- DCM TRANSIENT BASE REGISTER
                R9 + X'40'  -- POINTER TO ENTRY AREA
                R9 + X'54'  -- ADDRESS OF COMMAND OPERAND
                R9 + X'50'  -- CXSA SAVE AREA
                R9 + X'160' -- OPTIONS ROUTINE #1
                R12 = 2     -- BASE REG
 */ .
++ VER (Z038) FMID(JBB1126) .
++ ZAP (IEECVETC) .
  EXPAND IEECVETC(72)
  NAME   IEECVETC
  VER 01B0 96E09122
  VER 03D2 00000000,00000000,00000000,00000000
  VER 03E2 00000000,00000000,00000000,00000000
  VER 03F2 00000000,00000000,00000000,00000000
  VER 0402 00000000,00000000,00000000,00000000
  REP 01B0 47F0C3D0                      B    PATCH
  REP 03D2 96309122,58F09040             SET FLAG ... L @ENTRY AREA
  REP 03DA D21DF000C3F0,41F0F002         MOVE CMD ... BUMP R15
  REP 03E4 50F09054,58F09160             ST R15   ... L @ROUTINE
  REP 03EC 58109050,07FF                 L @SAVE AREA ... BR R15
  REP 03F2 D240E26B,C4C5D37E             K S,DEL=
  REP 03FA D9C46BD9,E3D4C57E             RD,RTME=
  REP 0402 F16BC3D6,D57ED56B             1,CON=N,
  REP 040A E2C5C77E,F1F9                 SEG=19
  IDRDATA VS00032
/*
//
./       ADD   NAME=VS00033
//$SYS3 JOB (8205,2443),'6 VS00033 FOWLER',CLASS=Z,MSGCLASS=X,
//             NOTIFY=$SYS3
//VS00033 EXEC SMP4
//SYSIN  DD  *
 RECEIVE S (VS00033) .
//SMPPTFIN  DD DATA
++ USERMOD (VS00033) /* JES2 MULTICOPY PAGE SEPERATOR MOD */ .
++VER (Z038) FMID(EJE1102)
       PRE(AZ40644,UZ26743,UZ26744,UZ27051,UZ27259,UZ90070,
           #Z90235,#Z90276)
       REQ(VS00017,VS00018,VS00025) .
++ MACUPD ($PPPWORK) DISTLIB(HASPSRC) .
./ CHANGE NAME=$PPPWORK
PDCT     EQU   PCEDCT,4                    ADDRESS OF DCT       VS00033
++SRCUPD(HASPPRPU) DISTLIB(HASPSRC) .
./  CHANGE  NAME=HASPPRPU
         MVC   BUFSTART+39(20),JCTPNAME    MOVE PGMR NAME       VS00033
         MVC   BUFSTART+8(8),JCTJOBID      MOVE HASP JOBID      VS00033
*        BH    PNXTCPY   CODE DELETED FOR VS00033         $SYS3 VS00033
         BNH   PRCPYEND                                   $SYS3 VS00033
         LA    R1,=CL5' END'      GENER END PAGE                VS00033
         L     R15,=A(PRINTID)          $SYS3 CODE FROM OZ19494 VS00033
         BALR  R14,R15     GO PRINT IT  $SYS3 CODE FROM OZ19494 VS00033
         LA    R1,=CL5'COPY '                                   VS00033
         LA    R15,=A(PRINTID)          $SYS3 CODE FROM OZ19494 VS00033
         BALR  R15,R14     GO PRINT IT  $SYS3 CODE FROM OZ19494 VS00033
         B     PNXTCPY                                          VS00033
         CLC   PCEFORM(5),=CL5' END'  DONT PRINT *              VS00033
         BE    PNXASTER                 ON ' END ' PAGE         VS00033
         L     PL,PDCT                LOAD A(DCT)               VS00033
         USING DCTDSECT,PL            DCT ADDRESSABILITY        VS00033
         CLC   DCTUCS(4),=CL4'T11'    IS IT A XEROX? (UCS=T11)  VS00033
         DROP  PL                     DROP DCT ADDRESSABILITY   VS00033
         B     PNXASTER    WAS BNE    IF NOT XEROX, NO PRINTFJP/25MAY79
         L     R1,PLNDISPL            GET NEW LINE DISPLACEMENT VS00033
         LA    PC1,0(R1,PBUF)             BUFFER ADDRESS        VS00033
         MVI   0(PC1),C'*'            GENERATE LINE OF *        VS00033
         MVC   1(131,PC1),0(PC1)        FULL LINE               VS00033
         LM    PC1,PC2,PRCCWID                                  VS00033
         ICM   PC1,8,=X'13'        SET CCW TO DOUBLE-SPACE      VS00033
         BAL   PL,PPPUT               ADD TO CHAIN              VS00033
PNXASTER EQU   *                                                VS00033
         CLC   7(5,PC1),=C'COPY '                               VS00033
         BNE   CPYSKIP                                          VS00033
         MVC   14(8,PC1),=C' '                                  VS00033
         SR    PW,PW                                            VS00033
         IC    PW,PPRCPYCT                                      VS00033
         LA    PW,1(,PW)          MUST INCR COUNT AT THIS POINT VS00033
         CVD   PW,PCCWORK                                       VS00033
         UNPK  13(3,PC1),PCCWORK+6(2)                           VS00033
         OI    15(PC1),X'F0'                                    VS00033
         MVI   13(PC1),C' '                                     VS00033
         MVI   16(PC1),C' '                                     VS00033
         MVC   17(2,PC1),=C'OF'                                 VS00033
         SR    PW,PW                                            VS00033
         IC    PW,PPDSCPY                                       VS00033
         CVD   PW,PCCWORK                                       VS00033
         UNPK  19(3,PC1),PCCWORK+6(2)                           VS00033
         MVI   19(PC1),C' '                                     VS00033
         OI    21(PC1),X'F0'                                    VS00033
CPYSKIP  DS    0H                                               VS00033
         L     PL,PDCT               LOAD A(DCT)                VS00033
         USING DCTDSECT,PL           DCT ADDRESSABILITY         VS00033
         CLC   DCTUCS(4),=CL4'PN'    LOCAL 1403? (UCS=PN, PRT4) VS00033
         BE    PPASTER               YES,PRINT *                VS00033
         CLC   DCTUCS(4),=CL4'P11'   LOCAL 3211? (UCS=P11,PRT3) VS00033
         BE    PPASTER               YES, PRINT *               VS00033
         B     PNOASTER                IF NOT 3211, DONT PRINT  VS00033
PPASTER  ICM   PC1,8,=X'19'          SET TRIPLE SPACE FOR       VS00033
         BAL   PL,PPPUT               LINE OF *                 VS00033
         LA    PC1,132(PC1)          GET NEW LINE BUFFER ADDR   VS00033
         MVI   0(PC1),C'*'           GENERATE LINE OF *         VS00033
         MVC   1(131,PC1),0(PC1)       FULL LINE                VS00033
         AL    PC1,PRCCWID           SINGLE SPACE AFTER..       VS00033
         BAL   PL,PPPUT              GO PRINT IT.               VS00033
PNOASTER EQU   *                                                VS00033
         DROP  PL                    DROP DCT ADDRESSABILITY    VS00033
./ ENDUP
++ JCLIN .
//JES2 EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL',REGION=512K
//SYSPRINT DD SYSOUT=*
//SYSUT1 DD UNIT=SYSDA,SPACE=(CYL,(5,5)),DSN=&&SYSUT1
//SYSLMOD DD DSN=SYS1.LPALIB,DISP=SHR,VOL=SER=IPOR60,UNIT=SYSDA
//AOSH3   DD DSN=SYS1.AOSH3,DISP=SHR,VOL=SER=PAGE02,DISP=SHR
//JTIPMOD DD DSN=SYS3.JTIP.JTIPMOD,DISP=SHR
//SYSLIN DD *
 ORDER HASPNUC
 ORDER HASPRDR
 ORDER HASPRDRO
 ORDER HASPRSCN
 ORDER HASPXEQ
 ORDER HASPPRPU
 ORDER HASPACCT
 ORDER HASPMISC
 ORDER HASPCON
 ORDER HASPRTAM
 ORDER HASPCOMM
 ORDER HASPCOMA
 ORDER VERFYQEL
 ORDER HASPJFET
 ORDER HASPINIT(P)
 INCLUDE AOSH3(HASPNUC)
 INCLUDE AOSH3(HASPRDR)
 INCLUDE AOSH3(HASPXEQ)
 INCLUDE AOSH3(HASPPRPU)
 INCLUDE AOSH3(HASPACCT)
 INCLUDE AOSH3(HASPMISC)
 INCLUDE AOSH3(HASPCON)
 INCLUDE AOSH3(HASPRTAM)
 INCLUDE AOSH3(HASPCOMM)
 INCLUDE AOSH3(HASPINIT)
 INCLUDE JTIPMOD(VERFYQEL)
 INCLUDE JTIPMOD(HASPJFET)
 PAGE HASPINIT
 NAME HASJES20(R)
/*
//
./       ADD   NAME=VS00035
//$SYS6PRT JOB (8205,3919),'6-ELIMINATE PROT CMD',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00035
//SCRATCH  EXEC PGM=IEHPROGM
//SYSPRINT  DD  SYSOUT=*
//SYS100    DD  UNIT=3330-1,VOL=SER=SYS100,DISP=OLD
//SYSIN     DD  *
 SCRATCH DSNAME=SYS1.CMDLIB,VOL=3330=SYS100,MEMBER=PROTECT
 SCRATCH DSNAME=SYS1.CMDLIB,VOL=3330=SYS100,MEMBER=PROT
 SCRATCH DSNAME=SYS1.LPALIB,VOL=3330=SYS100,MEMBER=PROTECT
 SCRATCH DSNAME=SYS1.LPALIB,VOL=3330=SYS100,MEMBER=PROT
/*
//COPYHELP EXEC PGM=IEBCOPY
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  DISP=SHR,DSN=SYS1.HELP
//SYSUT2    DD  DISP=SHR,DSN=SYS2.HELP
//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(5,2))
//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(5,2))
//SYSIN     DD  *
 C I=SYSUT1,O=SYSUT2
 S M=((PROTECT,,R),(PROT,,R))       ... MAY NOW BE TAILORED AS NEEDED
/*
//VS00035  EXEC SMP4APP,COND=(0,LT)
//SMPCNTL   DD  *
 REJECT  S (VS00035) .
 RECEIVE S (VS00035) .
 APPLY   S (VS00035)   /* THE FUNCTION OF THIS MODIFICATION IS TO
                          PREVENT TSO USERS FROM PASSWORD PROTECTING
                          TSO DATASETS IN THE FOREGROUND.  BY MAKING
                          THIS SIMPLE MODIFICATION OPERATIONS SUPPORT
                          JOBS WHICH INVOKE SUCH UTILITIES AS IEBCOPY,
                          FDR, AND IEHDASDR WILL NOT FAIL IF AN IN-
                          CORRECT REPLY IS GIVEN TO A PASSWORD WTOR.
                          THE CHANGE INVOLVES UPDATING SYS1.CMDLIB BY
                          LINK-EDITING THE BASE TSO COMMAND PROCESSOR,
                          IKJEHPRO, AND EXCLUDING ITS ALIASES, PROTECT
                          AND PROT, FROM BEING LINKEDITED.  IN ADDITION
                          A CORRESPONDING CHANGE TO THE HELP ENTRY FOR
                          PROTECT SHOULD ALSO BE MADE.  NOTE THAT THE
                          CAPABILITY TO PROTECT DATASETS MAY STILL BE
                          INVOKED BY SPECIFYING 'IKJEHPRO' OR 'SECURE'
                          AS THE COMMAND PROCESSOR NAME.

                          PRE-REQ:  VS00041 - BUT DON'T CHANGE THE
                                    THE PRE STATEMENT IN THE ++VER
                                    SINCE VS00041 IS A UCLIN WITH
                                    NO ASSOCIATED USERMOD IN THE CDS !

                          NOTE:     AT SYSGEN TIME PROTECT IS BUILT
                                    IN SYSGEN JOB '5', STEP 10, USING
                                    AN EXPANSION OF THE AGENLIB MACRO,
                                    SGIKJ4EH.

                                    REQUIRES A CLPA TO ACTIVATE.
                                                                   */ .
 UCLIN CDS .
 REP MOD(IKJEHPRO) TALIAS(SECURE) .
 ENDUCL .
/*
//SMPPTFIN  DD  DATA
++ USERMOD (VS00035) .
++ VER (Z038) FMID(EST1102) PRE(UZ28892) .
++ MOD (IKJEHPRO) DISTLIB(ACMDLIB) LKLIB(ACMDLIB) .
++ JCLIN .
//LINKEDIT EXEC PGM=HEWL,
//         PARM='LIST,XREF,NCAL,RENT,REFR'
//SYSPRINT  DD  SYSOUT=*
//ACMDLIB   DD  UNIT=3330-1,VOL=SER=PAG100,DSN=SYS1.ACMDLIB,DISP=SHR
//SYSLMOD   DD  UNIT=3330-1,VOL=SER=SYS100,DSN=SYS1.CMDLIB,DISP=SHR
//SYSUT1    DD  UNIT=SYSDA,SPACE=(TRK,(2,1))
//SYSLIN    DD  *
 INCLUDE ACMDLIB(IKJEHPRO)
 SETSSI  81000322
 ALIAS   SECURE
 NAME    IKJEHPRO(R)
/*
//
./       ADD   NAME=VS00041
//$SYS6CMD JOB (8205,3919),'6-CMDLIB TO LPALIB',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00041
//*
//* REFER:  IPO1.JCLLIB(LPACMDS)
//*         (SYS.IPO38E.JCLLIB(LPACMDS)) - MEMOREX
//* COMPID: TUNING
//* DOC:    THIS MEMBER CONTAINS JCL AND CONTROL STATEMENTS TO
//*         COPY REENTRANT MEMBERS OF 'SYS1.CMDLIB' TO 'SYS1.LPALIB'.
//*
//*         IF INDIVIDUAL NAMES ARE REMOVED FROM THE COPY STEP,
//*         THEY SHOULD BE REMOVED FROM THE SMP STEP ALSO.
//*         NOTE:  THE EXECUTION OF THIS JOB WILL INCREASE THE SIZE
//*         OF LPALIB BY 404K AND MAY ALSO REDUCE THE SIZE OF THE
//*         PRIVATE AREA BY THE SAME AMOUNT.
//*
//CPYCMDS  EXEC PGM=IEBCOPY,REGION=2048K
//SYSPRINT  DD  SYSOUT=*
//CMDLIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.CMDLIB,DISP=SHR
//LPALIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//SYSUT3    DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSUT4    DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSIN     DD  *
 COPY OUTDD=LPALIB,INDD=((CMDLIB,R))
 S M=(AKJLKL01,AKJLKL02,ALLOC,ALLOCATE,ALTER,ATTR,ATTRIB,BIX)
 S M=(BLDINDEX,CANCEL,CNVTC,CNVTCAT,DEF,DEFINE,DEL,DELETE,E,EDIT)
 S M=(END,EX,EXEC,EXPORT,EXPORTRA,FREE,H,HELP,IDCAM01,IDCAM02)
 S M=(IKJEBEAA,IKJEBEAR,IKJEBEBO,IKJEBECH,IKJEBECI,IKJEBECK,IKJEBECO)
 S M=(IKJEBEDA,IKJEBEDC,IKJEBEDE,IKJEBEDO,IKJEBEDX,IKJEBEEN,IKJEBEEX)
 S M=(IKJEBEFC,IKJEBEFI,IKJEBEFO,IKJEBEHE,IKJEBEIA,IKJEBEIN,IKJEBEIP)
 S M=(IKJEBEIS,IKJEBELE,IKJEBELI,IKJEBELT,IKJEBEMA,IKJEBEMC,IKJEBEME)
 S M=(IKJEBEMM,IKJEBEMR,IKJEBEMS,IKJEBEM1,IKJEBEM2,IKJEBEM3,IKJEBEM4)
 S M=(IKJEBEM5,IKJEBEM6,IKJEBEM7,IKJEBEPS,IKJEBERC,IKJEBERE,IKJEBERN)
 S M=(IKJEBERU,IKJEBESA,IKJEBESC,IKJEBESE,IKJEBESU,IKJEBETA,IKJEBETO)
 S M=(IKJEBEUI,IKJEBEUN,IKJEBEUP,IKJEBEUT,IKJEBEVE,IKJEBEXT,IKJEBRE5)
 S M=(IKJEFE11,IKJEFFCA,IKJEGAT,IKJEGATD,IKJEGCAL,IKJEGCIV,IKJEGCPY)
 S M=(IKJEGDCB,IKJEGDEB,IKJEGDEL,IKJEGDRP,IKJEGEND,IKJEGEQU,IKJEGFRE)
 S M=(IKJEGGET,IKJEGGO,IKJEGLDF,IKJEGLDR,IKJEGLOD,IKJEGLSA,IKJEGLST)
 S M=(IKJEGMAP,IKJEGOFF,IKJEGPCH,IKJEGPSW,IKJEGQFY,IKJEGRUN,IKJEGSYM)
 S M=(IKJEGTCB,IKJEGWHR,IKJEHAL1,IKJEHDS1,IKJEHMEM,IKJEHPRO,IKJEHREN)
 S M=(IKJEHSIR,IKJLKL01,IMP,IMPORT,IMPORTRA,LINK,LISTA,LISTALC,LISTB)
 S M=(LISTBC,LISTC,LISTCAT,LISTCRA,LISTD,LISTDS,LISTR,LOAD,LOADGO)
 S M=(LOGOFF,LOGON,MPRA,OPER,OPERATOR,OUT,OUTPUT,PRINT,PROF,PROFILE)
 S M=(PROT,PROTECT,R,RCAT,REN,RENAME,REPRO,RESETCAT,RUN,SE,SEND,ST)
 S M=(STATUS,SUB,SUBMIT,TERM,TERMINAL,TEST,VERIFY,VFY,WHEN,XPRA)
 S M=EXP
/*
//VS00041  EXEC SMP4APP
//SYSIN     DD  *
  UCLIN CDS /* ENTRY FOR EACH MODULE AND ALIAS COPIED TO LPALIB */ .
  ADD LMOD(EXP)      SYSLIB(LPALIB) .
  ADD LMOD(AKJLKL01) SYSLIB(LPALIB) .
  ADD LMOD(AKJLKL02) SYSLIB(LPALIB) .
  ADD LMOD(ALLOCATE) SYSLIB(LPALIB) .
  ADD LMOD(ATTRIB)   SYSLIB(LPALIB) .
  ADD LMOD(CANCEL)   SYSLIB(LPALIB) .
  ADD LMOD(E)        SYSLIB(LPALIB) .
  ADD LMOD(EXEC)     SYSLIB(LPALIB) .
  ADD LMOD(FREE)     SYSLIB(LPALIB) .
  ADD LMOD(HELP)     SYSLIB(LPALIB) .
  ADD LMOD(IDCAM01)  SYSLIB(LPALIB) .
  ADD LMOD(IDCAM02)  SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEAA) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEAR) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEBO) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBECH) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBECI) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBECK) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBECO) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEDA) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEDE) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEDO) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEEX) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEFC) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEFI) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEFO) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEHE) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEIA) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEIP) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEIS) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBELE) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBELI) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBELT) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEMA) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEMC) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEME) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEMR) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEMS) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEM1) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEM2) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEM3) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEM4) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEM5) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEM6) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEM7) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEPS) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBERC) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBERE) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBERN) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBERU) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBESA) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBESC) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBESU) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBETA) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBETO) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEUI) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEUN) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEUP) SYSLIB(LPALIB) .
  ADD LMOD(IKJEBEVE) SYSLIB(LPALIB) .
  ADD LMOD(IKJEFE11) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGAT)  SYSLIB(LPALIB) .
  ADD LMOD(IKJEGATD) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGCAL) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGCIV) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGCPY) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGDCB) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGDEB) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGDEL) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGDRP) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGEND) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGEQU) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGFRE) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGGET) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGGO)  SYSLIB(LPALIB) .
  ADD LMOD(IKJEGLDF) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGLDR) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGLOD) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGLSA) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGLST) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGMAP) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGOFF) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGPCH) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGPSW) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGQFY) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGRUN) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGSYM) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGTCB) SYSLIB(LPALIB) .
  ADD LMOD(IKJEGWHR) SYSLIB(LPALIB) .
  ADD LMOD(IKJEHAL1) SYSLIB(LPALIB) .
  ADD LMOD(IKJEHDS1) SYSLIB(LPALIB) .
  ADD LMOD(IKJEHMEM) SYSLIB(LPALIB) .
  ADD LMOD(IKJEHPRO) SYSLIB(LPALIB) .
  ADD LMOD(IKJEHREN) SYSLIB(LPALIB) .
  ADD LMOD(IKJEHSIR) SYSLIB(LPALIB) .
  ADD LMOD(LINK)     SYSLIB(LPALIB) .
  ADD LMOD(LISTA)    SYSLIB(LPALIB) .
  ADD LMOD(LISTALC)  SYSLIB(LPALIB) .
  ADD LMOD(LISTBC)   SYSLIB(LPALIB) .
  ADD LMOD(LISTD)    SYSLIB(LPALIB) .
  ADD LMOD(LISTDS)   SYSLIB(LPALIB) .
  ADD LMOD(LOAD)     SYSLIB(LPALIB) .
  ADD LMOD(LOADGO)   SYSLIB(LPALIB) .
  ADD LMOD(LOGOFF)   SYSLIB(LPALIB) .
  ADD LMOD(OPERATOR) SYSLIB(LPALIB) .
  ADD LMOD(OUTPUT)   SYSLIB(LPALIB) .
  ADD LMOD(PROFILE)  SYSLIB(LPALIB) .
  ADD LMOD(RUN)      SYSLIB(LPALIB) .
  ADD LMOD(SEND)     SYSLIB(LPALIB) .
  ADD LMOD(STATUS)   SYSLIB(LPALIB) .
  ADD LMOD(SUBMIT)   SYSLIB(LPALIB) .
  ADD LMOD(TERMINAL) SYSLIB(LPALIB) .
  ADD LMOD(TEST)     SYSLIB(LPALIB) .
  ENDUCL .
/*
//
./       ADD   NAME=VS00045
//$SYS6IDM JOB (8205,3919),'6-IDMS LOCAL SVC/219',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00045
//VS00045  EXEC SMP4APP
//SMPCNTL   DD  *
 UCLIN CDS         /* NEEDED ONLY FOR FIRST RUN APPLICATION OF MOD */ .
 ADD MOD (IGC219) LMOD(IEANUC01) DISTLIB(IDMS) FMID(EBB1102) .
 ENDUCL .
 RECEIVE S(VS00045) .
 APPLY   S(VS00045)                     /* IDMS - LOCAL SVC TYPE I */ .
/*
//IDMS      DD  DISP=SHR,DSN=SYS3.LINKLIB
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00045) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC219) DISTLIB(IDMS) LKLIB(IDMS) .
/*
//
./       ADD   NAME=VS00047
//$SYS6S2K JOB (8205,3919),'6-S2K LOCAL SVC/229',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00047
//VS00047  EXEC SMP4APP
//SMPCNTL   DD  *
 UCLIN CDS         /* NEEDED ONLY FOR FIRST RUN APPLICATION OF MOD */ .
 ADD MOD (IGC229) LMOD(IEANUC01) DISTLIB(S2KV???) FMID(EBB1102) .
 ENDUCL .
 RECEIVE S (VS00047) .
 APPLY   S (VS00047)         /* SYSTEM 2000 - RELEASE ?.? LOCAL SVC
                                       TYPE II - W/LOCAL LOCK      */ .
/*
//S2KV???   DD  DISP=SHR,DSN=SYS3.S2K.V???.LOAD
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00047) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC229) DISTLIB(S2KV???) LKLIB(S2KV???) .
/*
//
./       ADD   NAME=VS00049
//$SYS6DCM JOB (8205,3919),'6-SS LOCAL SVC/234',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00049
//VS00049  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00049) .
 APPLY   S (VS00049)      /* SPECIAL SERVICES LOCAL SVC - TYPE III */ .
/*
//DCMSA     DD  DISP=SHR,DSN=SYS.DCMS.AMDAHL.LINKLIB
/*
//SMPPTFIN  DD  DATA
++ USERMOD (VS00049) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC0023D) DISTLIB(DCMSA) LKLIB(DCMSA) .
++ JCLIN .
//DCMSSVC  EXEC PGM=IEBCOPY
//SYSPRINT  DD  SYSOUT=*
//DCMSA     DD  DISP=SHR,DSN=SYS.DCMS.AMDAHL.LINKLIB
//LPALIB    DD  UNIT=SYSDA,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//SYSIN     DD  *
 C I=DCMSA,O=LPALIB
 S M=IGC0023D
/*
//
./       ADD   NAME=VS00050
//$SYS6SPF JOB (8205,2443),'6-SPF/JTIP - FETCH',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=SPF-JTIP
//*****
//*   UPDATED 29JAN81, WILLIAM SMITH
//*   MEMOREX CORPORATION/SSG DP SERVICES
//*   MS 10-35, DEPT. 8205
//*   SAN TOMAS AT CENTRAL EXPRESSWAY
//*   SANTA CLARA, CA  95052
//*   (408)-987-3919
//*
//*   STEP 1:  ASSEMBLE AND LINKEDIT THE INDEPENDENT MODULE,
//*            SPFJTIP, THE INTERFACE ROUTINE BETWEEN SPF AND
//*            THE JTIP FETCH COMMAND PROCESSOR (RE-ENTRANT)
//*   STEP 2:  SMP4 JOB-STREAM TO SUPPLY THE TIOT/DDNAME SUPPORT
//*            WITHIN THE FETCH COMMAND PROCESSOR; PERMIT SYSTEM
//*            PROGRAMMERS TO EXECUTE JTIP COMMANDS AGAINST ANY JOB
//*   STEP 3:  UPDATE THE SPF 'MASTER' MENU, APRIOPT, ADDING A JTIP
//*            OPTION; ADD THE SUPPORTING MENUS AND PROCS TO THE
//*            RESPECTIVE SPF USER LIBRARIES
//*
//*   07/16/80
//*            STEP1 COMMENTED OUT SINCE IT HAS ALREADY BEEN RUN;
//*            STEP3 IS PART OF A SEPARATE PROCESS AND IS MANUALLY
//*            INCORPORATED THROUGH LOCAL SPF MENU/PROC MODIFICATIONS.
//*            S.C. FOWLER
//*
//*****
//*STEP1    EXEC ASMFCL,MAC='SYS3.SPF.V221.MEMOREX.MACLIB',
//*         PARM.LKED='LIST,LET,XREF,RENT'
//*ASM.SYSLIB    DD
//*              DD  UNIT=DISK,VOL=SER=TSOSPF
//*ASM.SYSIN     DD  DISP=SHR,DSN=SYS3.SPF.V221.MEMOREX.MODS(SPFJTIP)
//*LKED.SYSLMOD  DD  DISP=OLD,DSN=SYS2.LINKLIB(SPFJTIP)
//*
//STEP2    EXEC SMP4ACC
//SMPPTFIN  DD  *
++ USERMOD (VS00050) .
++ VER (Z038) FMID(JTP0001) PRE(JTIP002)
 /*
 FETCH:    UPDATE TO FETCH - SPF/JTIP INTERFACE
           SPF/2.2.1 W/PTF5 AND JTIP/1.2
           PERMITS FETCH TO RETRIEVE BY DDNAME TO THE SPFLIST1/2
           VIO DATASETS.
 VERFYQEL: UPDATE TO VERFYQEL SO THAT A $SYS USER (SYSTEM PROGRAMMER)
           CAN FETCH, ROUTE, PURGE, OR SHOW ANY JOB REGARDLESS OF THE
           JOBNAME.
 */ .
++ SRCUPD (JES2TSO) DISTLIB(JTIPMAC) .
./ CHANGE NAME=JES2TSO
*        DUMMY STATEMENT TO FORCE ASSEMBLY/SPF-JTIP INTERFACE   VS00050
++ SRCUPD (FETCH) DISTLIB(JTIPMAC) .
./ CHANGE NAME=FETCH
         PUNCH ' ALIAS FET'                                     VS00050
         EJECT 1                                                VS00050
         BZ    SPFONT1             OKAY - BYPASS THIS JAZZ      VS00050
SPFRC04  L     R3,CPPLUPT          ELSE -                       VS00050
         L     R4,CPPLECT          FLUSH THE COMMAND STACK -    VS00050
         LA    R5,ECBS             AND -                        VS00050
         XC    ECBS,ECBS           SET -                        VS00050
         L     R13,4(,R13)         RETURN -                     VS00050
         RETURN (14,12),RC=4       CODE TO 04 - JOB NOT FOUND   VS00050
         SPACE 2                                                VS00050
SPFONT1  DS    0H                                               VS00050
         EJECT 1                                                VS00050
         TM    DSNAM+6,X'40'       QUOTES AROUND DSN ?          VS00050
         BNO   SPFALLOC            .NO, CAN'T BE THE ONE I WANT VS00050
         L     R2,DSNAM            POINT AT DSNAME              VS00050
         LA    R1,7                LOOK AT 7 POSITIONS          VS00050
SPFCKSPC DS    0H                  CHECK FOR SPECIAL DSN        VS00050
         CLC   =C'.SPFTEMP',1(R2)  SPF TEMP LIST DS ?           VS00050
         BE    SPFCHK10            ..MAYBE , MAKE SURE          VS00050
         LA    R2,1(,R2)           ..NO, TRY AGAIN              VS00050
         BCT   R1,SPFCKSPC                                      VS00050
         B     SPFALLOC                                         VS00050
SPFCHK10 DS    0H                  CHECK FOR SPECIAL DSN        VS00050
         CLC   =C'.LIST',10(R2)    COMPLETE CHECK               VS00050
         BNE   SPFALLOC            NOT ONE I WANT               VS00050
         MVC   SPFDDNAM(7),=C'SPFLIST'  SET UP 'SPECIAL' DDNAME VS00050
         MVC   SPFDDNAM+7(1),9(R2)      LIST NO. FROM DSN       VS00050
         EXTRACT SPFTIOT,FIELDS=(TIOT) GET ADDR OF TIOT         VS00050
         L     R2,SPFTIOT                                       VS00050
         LA    R2,24(,R2)          POINT AT FIRST DD            VS00050
SPFCHKDD CLC   0(4,R2),=F'0'       END OF TIOT ?                VS00050
         BE    SPFALLOC            ..YES, GO ALLOC D.S.         VS00050
         CLC   SPFDDNAM,4(R2)      ..NO, IS 'SPECIAL' DD HERE ? VS00050
         BE    SPFDDFND            ..YES, GO PROCCESS           VS00050
         SR    R1,R1               ..NO, GET INCR               VS00050
         IC    R1,0(R2)                                         VS00050
         AR    R2,R1               ADD TO CURRENT ENTRY         VS00050
         B     SPFCHKDD            GO CHECK NEXT ENTRY          VS00050
SPFDDFND DS    0H                  'SPECIAL' DD FOUND           VS00050
         MVC   DA08DDNM,SPFDDNAM   SET UP DDNAME                VS00050
         B     DAIROK              GO TO IT                     VS00050
SPFALLOC DS    0H                  'SPECIAL' DD NOT FOUND       VS00050
ERROR90  PUTIT 'INVALID JOB NUMBER',JUMP=SPFRC04                VS00050
SPFDDNAM DS    CL8                 'SPECIAL' DDNAME FOR SPF     VS00050
SPFTIOT  DS    F                    ADDR OF TIOT                VS00050
++ SRCUPD (VERFYQEL) DISTLIB(JTIPMAC) .
./ CHANGE NAME=VERFYQEL
         CLC   0(4,R1),=C'$SYS' IS THIS A SYSTEM PROGRAMMER ?   VS00050
         BE    VEREXIT          OK, BYPASS EVERTHING            VS00050
./ ENDUP
//SMPCNTL   DD  *
 REJECT  S (VS00050) .
 RECEIVE S (VS00050) .
 APPLY   S (VS00050) .
 LOG (MOD:  VS00050 - SPF/JTIP FULL-SCREEN INTERFACE BROWSE FACILITY) .
/*
//
./       ADD   NAME=VS00052
//$SYS6JES JOB (8205,3919),'6-MSTRJCL - SGIEE0MS',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00052
//*********************************************************************
//*  THIS JOB MUST NOT BE RENUMBERED ----->        DO NOT RENUMBER !! *
//*********************************************************************
//*  REFER :  IPO1.JCLLIB(MSTRUPD)
//*  COMPID:  SYSTEMS
//*  DOC   :  THIS JOB WILL MODIFY MSTRJCL SUCH THAT
//*           JES WILL NOT BE STARTED AUTOMATICALLY AT IPL.
//*********************************************************************
//*  THIS JOB MUST NOT BE RENUMBERED ----->        DO NOT RENUMBER !! *
//*********************************************************************
//VS00052  EXEC SMP4ACC
//SMPCNTL   DD  *
 RECEIVE S(VS00052) .
 APPLY   S(VS00052) .
 ACCEPT  S(VS00052) USERMODS
                            /* MODIFY SGIEE0MS TO PREVENT JES FROM
                               AUTOMATICALLY BEING STARTED AT IPL. */ .
 LIST ACDS SYSMOD(VS00052) .
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00052) .
++ VER (Z038) FMID(JBB1126) .
++ MACUPD (SGIEE0MS) DISTLIB(AMODGEN) .
./ CHANGE NAME=SGIEE0MS
         DC    CL80'//*START &SSNAME       **VS00052 ***'       VS00052
./ ENDUP
/*
//
./       ADD   NAME=VS00053
//$SYS6S2K JOB (8205,3919),'6-S2K LOCAL SVC/228',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00053
//VS00053  EXEC SMP4APP
//SMPCNTL   DD  *
 UCLIN CDS         /* NEEDED ONLY FOR FIRST RUN APPLICATION OF MOD */ .
 ADD MOD (IGC228) LMOD(IEANUC01) DISTLIB(S2KV290) FMID(EBB1102).
 ENDUCL.
 RECEIVE S (VS00053) .
 APPLY   S (VS00053)         /* SYSTEM 2000 - RELEASE 2.9 LOCAL SVC
                                       TYPE II - W/LOCAL LOCK      */ .
/*
//S2KV290   DD  DISP=SHR,DSN=SYS3.S2K.R290.LOAD
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00053) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC228) DISTLIB(S2KV290) LKLIB(S2KV290) .
/*
//
./       ADD   NAME=VS00054
//$SYS6HIO JOB (8205,3919),'6-HOT I/O DEFAULTS',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00054
//VS00054 EXEC SMP4APP
//SMPCNTL  DD  *
 RECEIVE S(VS00054) .
 APPLY   S(VS00054)                                                  /*
  IPOBIO1:  MVS SYSTEM IPO-8 ZAP TO CHANGE 'HOT I/O' THRESHOLD VALUES.
            THIS VERSION IS APPLICABLE TO SP VER 1 REL 1 MOD 0
  PROBLEM:  THE DEFAULT VALUES FOR HOT IO WILL CAUSE FALSE HOT
            IO HITS PARTICULARLY THE 3850(MSS).
  SOLUTION: CHANGE HOT I/O THRESHOLD VALUES (COUNTERS AND FLAGS) TO
            ELIMINATE 066 WAIT STATES.                             */ .
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00054) .
++ VER (Z038) FMID(JBB1126) .
++ ZAP (IECVHIDT) DISTLIB(AOSC5) .
 NAME IECVHIDT
 VER 0000 00640064,000C0004  CHANCHK,UNSOL.DEV.INTRTPT,TIMEOUT,SECS
 REP 0000 02000200,001800F0
 IDRDATA VS00054
/*
//
./       ADD   NAME=VS00055
//$SYS6SLT JOB (8205,3919),'6-SLOTC/V DEFAULTS',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00055
//VS00055  EXEC SMP4APP
//SMPCNTL   DD  *
 REJECT  S(VS00055) .
 RECEIVE S(VS00055) .
 APPLY   S(VS00055)                                                  /*
  IPOBSL0:  MVS SYSTEM IPO-8 ZAP TO CHANGE 'SLOTC' AND 'SLOTV' VALUES.
  PROBLEM:  0E1 ABENDS CAUSED BY TOO MUCH PAGE SPACE BEING RESERVED
            FOR VIO AND ADDRESS SPACES.
  SOLUTION: CHANGE SLOTC AND SLOTV CONSTANTS TO RESERVE LESS
            SPACE.                                                 */ .
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00055) .
++ VER (Z038) FMID(EBB1102) .
++ ZAP (ILRSLOTC) DISTLIB(AOSC5) .
*                                IPOBSL0 - CHANGE SLOTC & V
 NAME  ILRSLOTC
 VER  00  00000008               1 MEG RESERVE
 REP  00  00000010              .5 MEG RESERVE
 IDRDATA VS00055
*                                IPOBSL0 - CHANGE SLOTC & V
 NAME  ILRSLOTV
 VER  00  00000004               2 MEG RESERVE
 REP  00  00000020             .25 MEG RESERVE
 IDRDATA VS00055
/*
//
./       ADD   NAME=VS00056
//$SYS0APR JOB (8205,0000),'6-APAR AZ25758',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS0
/*JOBPARM Q=F,I,O=VS00056
//*
//*  TRYING TO LOAD MODULE DURING SNAP DUMP PRODUCES AN ABEND106-C.
//*  COVER LETTER WITH SU833 PAGE 1-A IMPLIES THAT MOVING MODULES
//*  IEAVTFMT, IECDAFMT, AND IECIOFMT TO LPALIB MIGHT SOLVE THIS
//*  PROBLEM.
//*
//*  INFO/SYS ENTRY:  E023856; APAR # AZ25758 (EWS:  47G34)
//*
//VS00056  EXEC IEBCOPY
//LPALIB    DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LPALIB,DISP=SHR
//LINKLIB   DD  UNIT=3330-1,VOL=SER=SYS999,DSN=SYS1.LINKLIB,DISP=SHR
 COPY O=LPALIB,I=((LINKLIB,R))
 S M=(IEAVTFMT,IEAFTEED,IEAFTESA,IEAFTIHS,IEAFTFRR)
 S M=(IEAFTRTC,IEAFTRT2,IEAFTSCB,IEAFTSDW)
 S M=IECDAFMT
 S M=IECIOFMT
/*
//UCLINCDS EXEC SMP4APP,COND=(0,LT)          UCLIN: LINKLIB ---> LPALIB
//SMPCNTL   DD  *
  UCLIN CDS .
  ADD LMOD(IEAVTFMT)  SYSLIB(LPALIB).
  ADD LMOD(IECDAFMT)  SYSLIB(LPALIB).
  ADD LMOD(IECIOFMT)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTEED)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTESA)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTIHS)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTFRR)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTRTC)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTRT2)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTSCB)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTSDW)  SYSLIB(LPALIB).
  ENDUCL.
/*
//
./       ADD   NAME=VS00057
//$SYS0SMP JOB (8205,0804),'6 PAJERSKI',MSGCLASS=X,CLASS=Z,NOTIFY=$SYS0
/*JOBPARM Q=F,O=VS00057
//*
//*   THIS MOD IN CONJUNCTION WITH VS00058 PROVIDES SUPPORT
//*   FOR THE HONEYWELL PAGE PRINTER SYSTEM (PPS-1).
//*
//*   THE MOD UPDATES TWO MACROS ($PSO AND IEFSSSO) AND SOURCE
//*   MODULE HASPXEQ.  THE MACROS PROVIDE MAPPING FOR
//*   FIELDS WHICH ARE COPIED FROM THE JCT.  CURRENTLY
//*   THESE ARE THE PROGRAMMER NAME FIELD, ROOM NUMBER,
//*   ACCT NUMBER AND THE OUTPUT FIELD FROM JTIP.  THERE
//*   ARE 24 BYTES OF RESERVED FIELDS FOR FUTURE USE.
//*
//*
//VS00057  EXEC SMP4
//SYSIN DD *
  REJECT  S(VS00057) .
  RECEIVE S(VS00057)  .
  APPLY   S(VS00057)  .
  LIST    CDS SYSMOD(VS00057) .
/*
//SMPPTFIN DD *
++ USERMOD (VS00057) .
++ VER(Z038) FMID(EJE1102)
              PRE(UZ26743,UZ26744,UZ27051,UZ27259,UZ90070,
                  #Z90235,#Z90276,AZ40644,VS00025,UZ21388)
                                                    /*
              THIS USERMOD ALONG WITH MOD VS00058 TO THE
              EXTERNAL WRITER PROVIDES SUPPORT FOR THE
              HONEYWELL PAGE PRINTER SYSTEM
                                              */ .
++ MACUPD ($PSO)    DISTLIB(HASPSRC) .
./ CHANGE NAME=$PSO,SEQFLD=747
*           FOLLOWING FIELDS FOR HONEYWELL PPS - MOD VS00057    VS00057
PSOPNAME DS    CL20                PROGRAMMER NAME FIELD        VS00057
PSOLINES DS    F                   LINE COUNT FROM JCTLINES     VS00057
PSOACCTN DS    CL4                 JOB ACCOUNT NUMBER FROM JCARDVS00057
PSOROOMN DS    CL4                 PROGRAMMER'S ROOM NUMBER     VS00057
PSOOUTNM DS    CL8                 /*JOBPARM OUTNAME=  JTIP     VS00057
PSORSVD2 DS    5F                  RESERVED FOR FUTURE USE(ANY) VS00057
*           END OF CHANGES FOR VS00057                          VS00057
++ MACUPD (IEFSSSO) DISTLIB(AMACLIB) SYSLIB(MACLIB)
            ASSEM(HASPXEQ,HASPNUC,HASPSSS,HASPCOMM,HASPMISC) .
./ CHANGE NAME=IEFSSSO
*     FOLLOWING FIELDS ADDED FOR USE WITH THE HONEYWELL PPS-1.  VS00057
*     THESE FIELDS ARE MAPPED IN HASPXEQ BY $PSO AND ARE        VS00057
*     FILLED IN FROM FIELDS IN THE JCT.                         VS00057
SCFPNAME DS    CL20                PROGRAMMER NAME FIELD        VS00057
SCFLINES DS    F                   LINE COUNT FROM JCTLINES     VS00057
SCFACCTN DS    CL4                 ACCOUNT NUMBER FROM JOBCARD  VS00057
SCFROOMN DS    CL4                 PROGRAMMER'S ROOM NUMBER     VS00057
SCFOUTNM DS    CL8                 /*JOBPARM OUTNAME=   JTIP    VS00057
SCFRSVD2 DS    5F                  RESERVED FOR FUTURE USE(ANY) VS00057
*                                                               VS00057
*     END OF CHANGES FOR HONEYWELL PPS                          VS00057
++ SRCUPD (HASPXEQ)  DISTLIB(HASPSRC) .
./ CHANGE NAME=HASPXEQ,SEQFLD=747
*                                                               VS00057
*      FOLLOWING INSTRUCTIONS FOR THE HONEYWELL PPS             VS00057
         MVC   PSOPNAME,JCTPNAME   PROGRAMMER NAME FIELD        VS00057
         MVC   PSOACCTN,JCTACCTN   ACCOUNT NUMBER FROM JOBCARD  VS00057
         MVC   PSOROOMN,JCTROOMN   PROGRAMMER'S ROOM NUMBER     VS00057
         MVC   PSOOUTNM,JCTOUTNM   /*JOBPARM OUTNAME=   JTIP    VS00057
         MVC   PSOLINES,JCTLINES   LINE COUNT FOR EXWTR         VS00057
*                                                               VS00057
*      END OF ADDITIONS FOR THE HONEYWELL PPS                   VS00057
./       ADD   NAME=VS00058
//$SYS6XWR JOB (8205,3919),'6-PPS/1-EXTERAL WTR',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00058
//VS00058  EXEC SMP4APP
//SMPCNTL   DD  *
 REJECT  S (VS00058) .
 RECEIVE S (VS00058) .
 APPLY   S (VS00058) .
/*
//SMPPTFIN  DD  *
++USERMOD (VS00058)
 /*   THIS MOD IS DESIGNED TO ALLOW THE EXTERNAL WRITER TO CREATE
      OUTPUT WITH A BETTER SEPARATOR PAGE.  IT ACHIEVES THIS BY
      PLACING THE ADDRESS OF THE SSOB INTO A NEW FIELD IN THE WRITER
      PARAMETER LIST.  THE OUTPUT SEPARATOR ROUTINE CAN THEN ADD
      USEFUL INFORMATION FROM THE SSOB TO WHAT IS ORIGINALLY A VERY
      SPARSE SEPARATOR PAGE.  THE ZAP ALSO PRODUCES TYPE 6 SMF
      RECORDS FOR TAPE AS WELL AS UNIT RECORD OUTPUT.  A LOCALLY-
      WRITTEN SEPARATOR ROUTINE "MRXSEP" IS INVOKED VIA THE PARM
      FIELD ON THE EXTERNAL WRITER JCL.  ALL THIS WORK WAS PROMPTED
      BY THE INSTALLATION OF AN (OFFLINE) HONEYWELL PPS-1.

      MOD VS00057 TO JES2 PLACES THE PROGRAMMER NAME FIELD AND OTHER
      GOODIES INTO A NEW AREA ADDED TO THE END OF THE SSOB(SO) WHEN
      THIS MOD HAS SET A FLAG IN SSSOUFLG.

      THIS MOD IS BASED ON WORK OF HANK MURPHY (AMDAHL) AND
      LIONEL DYCK (PRUDENTIAL INSURANCE CO).  IT HAS BEEN UPDATED
      TO THE UZ28395(7911)/UZ26378(7911) LEVEL, RECOMMENTED,
      CORRECTED, AND SIMPLIFIED BY FRANK PAJERSKI (MEMOREX).

      NOTE: THERE ARE SEVERAL PLACES IN IASXSD82 WHERE THE ORIGINAL
            LENGTH OF THE SSOB(SO) IS USED, BUT IT DOESN'T HURT TO
            LEAVE IT THAT WAY.  ALSO, IASXSD82 USES 12 BYTES AT
            THE END OF THE ORIGINAL SSOB(SO) FOR A PURGE PARAMETER
            AREA THUS OVERLAYING SOME OF MOD VS00057'S NEW AREA,
            BUT THIS DOESN'T HURT EITHER SINCE THE WTR-SEPARATOR
            ROUTINE HAS ALREADY GOTTEN WHAT IT NEEDS FROM THE NEW
            AREA (& THE NEW AREA WILL BE RE-INITIALIZED WHEN THE
            NEXT JOB IS SELECTED).

      FJP/18APR80 - VERSION 2.3
      WJS/04FEB81 - MVS/3.8 SP/1 W/UZ30809 (TAPE 8005)

 */ .
++VER (Z038) FMID(EXW1102) PRE(UZ26378,UZ30809) .
++ZAP (IASXSD82) .
 NAME IASXSD82
 VER 0226 96407018     OI  SSSOFLG1,SSSOSCLS  INDICATE USE OF CLASS
 VER 0482 4770948E     BNZ SD82UR             OUTPUT DEVICE IS UR
 VER 04C0 478094D6     BE  TSMF               (JUST AFTER LABEL TFORM)
 VER 0768 4780976E     BZ  SD82W              SKIP SMF
 VER 08E2 478098E8     BZ  SD82CLR            NO, SKIP SMF
 VER 0D24 C1D7E9C1,D7E9C1D7,E9C1D7E9,C1D7E9C1 PATCH AREA
 VER 0D34 D7E9C1D7,E9C1D7E9,C1D7E9C1,D7E9C1D7 PATCH AREA
 VER 0D44 E9C1D7E9,C1D7E9C1                   PATCH AREA
 REP 0226 47F09D22     ------> PATCH AREA AT D24
 REP 0482 47F0         WRITE TYPE 6 SMF RECORD AT JOB-CHANGE
 REP 04C0 47F0         NO FORM CHANGE - BYPASS MSG IEF383A
 REP 0768 4700         WRITE TYPE 6 SMF RECORD AT WTR WAIT
 REP 08E2 4700         WRITE TYPE 6 SMF RECORD AT WTR STOP
 REP 0D24 96407018     OI SSSOFLG1,SSSOSCLS  INDICATE USE OF CLASS LIST
 REP 0D28 96017016     OI SSSOUFLG,X'01'     SET EXT WRITER ACTION FLAG
 REP 0D2C 507060B8     ST R7,PARSSOB      PUT A(SSOB) AT END OF PARLIST
 REP 0D30 47F09228     ------> MAINLINE CODE AT 22A
 IDRDATA VS00058
++ZAP (IASXWR00) .
 NAME  IASXWR00
 VER 0016 410001D0
 VER 0030 4141011C
 REP 0016 410001D4   INCREASE GETMAIN BY 4 BYTES DUE TO LARGER PARLIST
 REP 0030 41410120   A(JFCB) IS +4 DUE TO LARGER PARLIST
 IDRDATA VS00058
/*
//
./       ADD   NAME=VS00059
//$SYS0MOD JOB (8205,0000),'6 PAJERSKI',MSGCLASS=X,CLASS=Z,NOTIFY=$SYS0
/*JOBPARM  Q=F,O=VS00059
//VS00059 EXEC SMP4APP
//SMPCNTL   DD  *
   RECEIVE S (VS00059) .
   APPLY   S (VS00059) .
//SMPPTFIN  DD  *
++ USERMOD(VS00059) /* ROUND ALL AVERAGE BLOCK REQUESTS AND
                       ALLOCATE BY FIRST-FIT INSTEAD OF BEST-FIT */ .
++ VER (Z038) FMID(EDM1102) .
++ ZAP (IGG0325D) .
 NAME IGG0325D
 VER  00CA  9141,B05E   TEST IF A RECORD ROUNDED REQUEST
 VER  00E4  9141,B09B   IS THIS A RCD RUNDED REQUEST
 VER  0176  4740,C148   BEST-FIT
 REP  00CA  9140,B05E   MAKE AVG-BLK SPACE REQUEST DEFAULT TO ROUND
 REP  00E4  9140,B09B   AVG-BLK SPACE REQUEST?  DEFAULT TO ROUND
 REP  0176  4740,C274   FIRST-FIT
 IDRDATA VS00059
/*
./       ADD   NAME=VS00061
//$SYS0SMP JOB (8205,0804),'6 PAJERSKI',MSGCLASS=X,CLASS=Z,NOTIFY=$SYS0
/*JOBPARM  Q=F,O=VS00061
//VS00061 EXEC SMP4APP
//SMPCNTL  DD  *
 RECEIVE S (VS00061).
 APPLY  S (VS00061) .
 ACCEPT S (VS00061) USERMODS .
/*
//SMPPTFIN DD *
++ USERMOD (VS00061)
      /* THIS MOD MAKES ROOM IN THE PSA RESERVED AREA FOR QCM'S USE.
         WITHOUT IT, SEA USES FROM X'5A0' TO X'B00'.  THIS TELLS SEA
         TO START AT X'0700', THUS LEAVING AN AMPLE X'160' BYTES OF
         ROOM STARTING AT X'5A0' FOR QCM.  SEE PAGE 3-9 IN THE SEA
         LOGIC MANUAL.  THE PSA OFFSET SPECIFIED IN THE QCM STAGE 1
         INPUT SHOULD BE SET TO 1440 (= X'5A0').      FJP/20NOV80
      */ .
++ VER (Z038) FMID(JBB1126) PRE(SEA021K) .
++ ZAP(AMDQPK00) DISTLIB(AOSC5) .
   NAME AMDQPK00
   VER  0000 00000000
   REP  0000 07000B00
   IDRDATA VS00061
/*
./       ADD   NAME=VS00062
//$SYS31  JOB  (8205,2443),'6 FOWLER',CLASS=Z,MSGCLASS=X
//VS00062  EXEC SMP4
//SYSIN DD *
 REJECT S(VS00062) .
 RECEIVE .
 APPLY S(VS00062) .
 ACCEPT S(VS00062) USERMODS .
 LIST CDS SYSMOD(VS00062) .
 LIST CDS MOD(HASPXEQ) .
//SMPPTFIN DD *
++ USERMOD (VS00062) .
++ VER (Z038) FMID(EJE1102) PRE (UZ26743,UZ26744,UZ27051,UZ27259,
             UZ90070,#Z90235,#Z90276,AZ40644,VS00025,UZ21388) /*
   THIS MOD ADDS THE JOBNAME TO THE
   DISPLAY INITIATOR COMMAND.
                                   */ .
++ SRCUPD (HASPCOMM) DISTLIB(HASPSRC) .
./ CHANGE NAME=HASPCOMM,SEQFLD=747
*CDILNGTH LA   R0,CDIML            SET MESSAGE LENGTH           VS00062
CDILNGTH DS    0H                                               VS00062
         TM    PITSTAT,PITBUSY     ACTIVE PIT?                  VS00062
         BZ    *+10                NO: BRANCH                   VS00062
         MVC   CDIJNAME-CDIM+COMMAND,SJBJOBNM-SJBDSECT(R1) NAME VS00062
         LA    R0,CDIML            SET MESSAGE LENGTH           VS00062
*CDIMCLAS DC   CL36' '             INITIATOR CLASSES         R4 VS00062
CDIMCLAS DC    CL8' '              INITIATOR CLASSES            VS00062
CDIJNAME DC    CL8' ',C' '         AREA FOR JOBNAME             VS00062
****  NOTE: CDIMCLASS MUST EQUAL $MAXCLASS                      VS00062
./       ADD   NAME=VS00064
//$SYS6NSA JOB (8205,3919),'6-NON-SPECIFIC ALLOC',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00064
//VS00064  EXEC SMP4APP
//SMPCNTL   DD  *
 REJECT  S (VS00064) .
 RECEIVE S (VS00064) .
 APPLY   S (VS00064)  /* THIS MODULE REPLACES PROCEDURE PSLSTBLD IN
                         MVS NON-SPECIFIC ALLOCATION CONTROL, IEFAB436,
                         IN LOAD MODULE, IEFW21SD, IN THE LINK PACK
                         AREA.  IT PROVIDES THE SAME FUNCTION AS THE
                         REPLACED MODULE BUT TAKES LESS TIME.
                         5752-MVS 8001 C 188-9 (SC1B4)
                         DOUG TRUESDELL    - 25JUL78
                         MODIFIED FOR 7809 - 20DEC78/DOUG TRUESDELL
                         MODIFIED FOR 8001 - 08FEB80/GENE KUEHLTHAU
                         MODIFIED FOR 8007 - 18DEC80/WILLIAM SMITH,
                              MEMOREX CORPORATION, MVS/3.8 SE2
                                       PTF ACTIVITY:
                                       UZ26826 - 8007
                                       UZ29112 - 8001
                                       UZ22755 - 7911
                                                                   */ .
 LIST CDS SYSMOD(VS00064) .
 LIST CDS MOD(IEFAB436) .
/*
//SMPPTFIN  DD  *
++ USERMOD(VS00064) .
++ VER (Z038) FMID(EBB1102) PRE(UZ26826) .
++ ZAP (IEFAB436) .
 NAME IEFW21SD IEFAB436
 VER 0CDE                90E1,D00C,903C,D020,5830
 VER 0CE8 A00C,5880,B04C,5850,8000,9180,A014,4770
 VER 0CF8 CE1A,4170,0001,47F0,CE12,9180,3010,4770
 VER 0D08 CE0A,D203,B0C8,3008,4180,0001,47F0,CDFE
 VER 0D18 8B80,0002,5860,B0C8,1E68,0660,0660,9110
 VER 0D28 6000,47E0,CD0E,9680,B0D7,5880,B0C8,5860
 VER 0D56 0680,9190,8000,47E0,CDF6,5880,B050,5880  <---
 VER 0D66 8000,9101,8000,47E0,CDF6,94BF,B0D8,4140  <---
 VER 0D76 0001,47F0,CDD8,5880,B0C8,5860,B0C4,8B60  <---
 VER 0D86 0002,18F4,1EFF,5060,B074,1E68,5E60,CE9C  <---
 VER 0D96 50F0,B078,1EF5,06F0,06F0,D501,6000,F000  <---
 VER 0DA6 4770,CDD4,5E80,B074,0680,0680,9108,8000  <---
 VER 0DB6 4770,CDD4,9640,B0D8,1885,5E80,B078,0680  <---
 VER 0DC6 0680,1F66,BF63,8000,5060,B08C,1F88,4380  <---
 VER 0DD6 6022,1FFF,43F0,B0D4,148F,1288,4780,CDD4  <---
 VER 0DE6 1882,8B80,0002,5810,9000,5068,1000,5E20  <---
 VER 0DF6 CE90,5E40,CE90,1884,1E88,1E85,0680,0680  <---
 VER 0E06 1F66,BF63,8000,1266,4780,CDF6,9140,B0D8  <---
 VER 0E16 4780,CD58,4180,0001,5E80,B0C4,5080,B0C4  <---
 VER 0E26 5980,3004,47D0,CCF4,5830,3000,5E70,CE90  <---
 VER 0E36 5970,A008,47D0,CCDE,5880,9000,1832,0630  <---
 VER 0E46 5030,8000,98E1,D00C,983C,D020,07FE       <---
* START 0
* USING *+X'24',R12
* IRG   *+X'CDA'
* R1       EQU   1                     EDL GROUP CTR & EDL LIST CTR
* R2       EQU   2                     PSLINDEX - IND FOR PS LIST
* R3       EQU   3                     WORK AREA
* R4       EQU   4                     WORK AREA
* R5       EQU   5                     EDL LIST POINTER
* R6       EQU   6                     ADDR OF CURRENT UCB ON EDL LIST
* R7       EQU   7                     ADDR WORKUCB, A PROGRAM LABEL
* R8       EQU   8                     ADDR TESTUCB, A PROGRAM LABEL
* R9       EQU   9                     OPTPARMP INITIALLY, THEN PS
*                                       LIST ORIGIN
* R10      EQU   10                    EDL ORIGIN INITIALLY, THEN EDL
*                                       GROUP POINTER
* R11      EQU   11                    BASE
* R12      EQU   12                    BASE
* R13      EQU   13                    SA
* R14      EQU   14                    RETURN
* R15      EQU   15                    UCB MASK BYTE
* @PC00001 EQU   X'48'                 FROM R11
* @TF00001 EQU   X'74'                 FROM R11
* PSUCBPTR EQU   X'0'
* EINDEVTP EQU   X'14'                 FROM R10 BIT 0
* UCBSTAB  EQU   X'22'                 FROM R6
* UCBMASK  EQU   X'D4'                 FROM R11
* EDLGRPTR EQU   X'C'                  FROM R10
* EDLJINEL EQU   X'10'                 FROM R10 BIT 0
* EDLLISTP EQU   X'8'                  FROM R10
* EDLNOJES EQU   X'2'                  FROM R5 BIT 4
* PSLISTP  EQU   X'0'                  FROM R9
* PSLSTENT EQU   X'4'                  FROM R9
* EDLALCD  EQU   X'2'                  FROM R5 BIT 0
* EDLUCBAD EQU   X'0'                  FROM R5
* PSPARMP  EQU   X'0'
* PARTALOC EQU   X'0'                  BIT 7
* EDLUCBNO EQU   X'4'                  FROM R10
* EDLNXGRP EQU   X'0'                  FROM R10
* EDLGRPNO EQU   X'8'                  FROM R10
* PSUCBLST EQU   X'0'
* PSLISTNO EQU   X'0'
*
 REP 0CDA 90E1,D00C PSLSTBLD STM   R14,R1,12(R13)
 REP 0CDE 903C,D020          STM   R3,R12,32(R13)
*
 REP 0CE2 1F66               SLR   R6,R6  CLEAR R6 AND R4
 REP 0CE4 1F44               SLR   R4,R4   FOR LATER USE
 REP 0CE6 5890,9000          L     R9,PSLISTP(,R9)
 REP 0CEA 1FFF               SLR   R15,R15
 REP 0CEC 43F0,B0D4          IC    R15,UCBMASK(,R11)
 REP 0CF0 4170,CD42          LA    R7,WORKUCB  LABELS FOR
 REP 0CF4 4180,CD58          LA    R8,NEXTUCB   INNERMOST LOOP
*
* ELIGIBLE DEVICE TYPE?  IF NOT LEAVE ROUTINE.
 REP 0CF8 9180,A014          TM    EINDEVTP(R10),X'80'
 REP 0CFC 4770,CD76          BNZ   DONE
*
*   HAVE ELIGIBLE DEVICE TYPE.  LOOP OVER EDL GROUPS.
 REP 0D00 BF1F,A008          ICM   R1,15,EDLGRPN0(R10)
 REP 0D04 47D0,CD76          BNP   DONE  IF NO EDL GROUPS THEN DONE
*
 REP 0D08 58A0,A00C          L     R10,EDLGRPTR(,R10)  R10 GRP PTR NOW
 REP 0D0C 5010,B074 WORKEDLG ST    R1.@TF00001(,R11)  SAVE EDL GRP CNTR
*
*   ELIGIBLE GROUP?  IF NOT GET NEXT GROUP.
 REP 0D10 9180,A010          TM    EDLJINEL(R10),X'80'
 REP 0D14 4770,CD6A          BNZ   NEXTEDLG
*
*   HAVE ELIGIBLE GROUP,  LOOP OVER AN EDL LIST.
 REP 0D18 BF1F,A004          ICM   R1,15,EDLUCBN0(R10) R1 EDL LIST CNTR
 REP 0D1C 47D0,CD6A          BNP   NEXTEDLG  IF EMPTY LIST, NEXT GROUP
*
 REP 0D20 5850,A008          L     R5,EDLLISTP(,R10)  INIT EDL LIST PTR
 REP 0D24 BF63,5000 WORKEDLL ICM   R6,EDLUCBAD(R5)
*
*   TEST FOR SCRATCH (OR WHATEVER) BY ANDING TO THE UCB MASK.
 REP 0D28 4330,6022          IC    R3,UCBSTAB(,R6)  HIGH 3 BYTES OF R15
 REP 0D2C 143F               NR    R3,R15  ARE 0, SO R3 IS NOT CLEARED.
 REP 0D2E 4780,CD62          BZ    NEXTEDLL
*
*   HAVE SCRATCH PACK.  R5 POINTS TO THE EDL ENTRY.
*   TEST ELIGIBILITY OF UCB IN THE EDL
 REP 0D32 9180,5002          TM    EDLALCD(R5),X'80'  ALCD BIT OFF, OR
 REP 0D36 4780,CD2E          BZ    HAVEELIG
*
 REP 0D3A 9190,5002          TM    EDLALCD(R5),X'90' (ALCD BIT ON AND
 REP 0D3E 47E0,CD62          BNO   NEXTEDLL            VOLAF BIT ON
*
 REP 0D42 5830,B050          L     R3,@PC0000L+8(,R11)
 REP 0D46 5830,3000          L     R3,PSPARMP(,R3)
 REP 0D4A 9101,3000          TM    PARTALOC(R3),X'01' AND PARTALOC BIT
 REP 0D4E 47E0,CD62          BNO   NEXTEDLL             ON)
*
*   HAVE ELIGIBLE UCB.  TEST FOR JES BIT OFF.
 REP 0D52 9108,5002 HAVEELIG TM    EDLNOJES(R5),X'08'
 REP 0D56 4770,CD62          BNZ   NEXTEDLL
*
*   LOOP OVER PSUCBLIST.  LOOK FOR A UCB ADDRESS MATCH TO R6.
 REP 0D5A 5830,B04C          L     R3,@PC00001+4(,R11)
 REP 0D5E 5830,3000          L     R3,PSUCBPTR(,R3)  R3 PS UCB LIST PTR
 REP 0D62 47F0,CD5C          B     TESTUCB
*
 REP 0D66 1946      WORKUCB  CR    R4,R6  TEST FOR MATCH OF UCB PTRS
 REP 0D68 0778               BNER  R8  IF NO MATCH GOTO NEXTUCB
*
*   HAVE MATCH.  ALL TESTS SATISFIED.  ADD TO PS LIST.
 REP 0D6A 1832               LR    R3,R2
 REP 0D6C 8B30,0002          SLA   R3,2  EDL ENTRY MOVED TO
 REP 0D70 5063,9000          ST    R6,PSLSTENT-4(R3,R9)  PS LIST.
 REP 0D74 4122,0001          LA    R2,1(R2)  INC PS LIST INDEX
 REP 0D78 47F0,CD62          B     NEXTEDLL
*
 REP 0D7C 4133,0002 NEXTUCB  LA    R3,2(R3)
 REP 0D80 BF43,3000 TESTUCB  ICM   R4,3,PSUCBLST(R3) LOAD PSUCB POINTER
 REP 0D84 0777               BNZR  R7  ZERO POINTER IS END OF LIST.
*
 REP 0D86 4155,0004 NEXTEDLL LA    R5,4(R5)  INC EDL LIST POINTER
 REP 0D8A 4610,CD00 TESTEDLL BCT   R1.WORKEDLL
*
 REP 0D8E 58A0,A000 NEXTEDLG L     R10,FDLNXGRP(,R10)  ADV EDL GRP PTR
 REP 0D92 5810,B074          L     R1,@TF00001(,R11)
 REP 0D96 4610,CCE8 TESTEDLG BCT   R1,WORKEDLG
*
*   CANDIDATE LIST COMPLETE.  STORE COUNT.
 REP 0D9A 1832      DONE     LP    R3,R2
 REP 0D9C 0630               BCTR  R3,0
 REP 0D9E 5030,9000          ST    R3,PSLISTNO(,R9)
*
 REP 0DA2 98E1,D00C          LM    R14,R1,12(R13)
 REP 0DA6 983C,D020          LM    R3,R12,32(R13)
 REP 0DAA 07FE               BR    14
*                            END
 REP 0DAC                     0000,0000,0000,0000
 REP 0DB4 0000,0000,0000,0000,0000,0000,0000,0000
 REP 0DC4 0000,0000,0000,0000,0000,0000,0000,0000
 REP 0DD4 0000,0000,0000,0000,0000,0000,0000,0000
 REP 0DE4 0000,0000,0000,0000,0000,0000,0000,0000
 REP 0DF4 0000,0000,0000,0000,0000,0000,0000,0000
 REP 0E04 0000,0000,0000,0000,0000,0000,0000,0000
 REP 0E14 0000,0000,0000,0000,0000,0000,0000,0000
 REP 0E24 0000,0000,0000,0000,0000,0000,0000
 IDRDATA VS00064
/*
//
./       ADD   NAME=VS00065
//$SYS6BUF JOB (8205,3919),'6-DEFLT BUFNO VALUES',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00065
//VS00065  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00065) .
 APPLY   S (VS00065)                                                /*
  -------------------------------------------
  MODIFICATION TO ADJUST DEFAULT BUFNO VALUES
  -------------------------------------------

  IF BUFNO IS NOT SPECIFIED FOR A QSAM NON-DISK FILE, AND THE FILE IS
  NOT CONCATENATED OR IS FIRST IN A CONCATENATION, THEN BUFNO IS SET
  ACCORDING TO THE FOLLOWING SCHEME:

  --- FOR SMALL BLOCKSIZES, BUFFNO IS SET TO THE NUMBER OF BUFFERS
      TO MAKE 5000 BYTES TOTAL BUFFER AREA, BUT MAXIMUM 30 BUFFERS
  --- FOR MODERATE BLOCKSIZE REQUESTS BUFNO IS SET TO 5
  --- FOR LARGE BLOCKSIZES BUFNO IS SET TO THE NUMBER OF BUFFERS TO
      MAKE 40000 BYTES, BUT MINIMUM 2 BUFFERS
  --- VI0 BUFNO IS SET TO 1

  REQUIRES 40 BYTES EXPAND ON MODULE
  5752-MVS 7911 C 182-3
  FIX FOR ZERODIVIDE PROBLEM AND FITTED FOR 7811 - 08FEB79/DAT
  FITTED FOR UZ90038 ON 7908 - 24JAN80/DOUG TRUESDELL
  FITTED FOR UZ28061 ON 7911 CARD 18-2-3 - 08FEB80/GENE KUEHLTHAU
  GENERAL CLEAN-UP, 18DEC80, WILLIAM SMITH, MEMOREX CORPORATION,
  FOR MVS/3.8 SE2 @ 8008 LEVEL
                                                                   */ .
 LIST CDS SYSMOD(VS00065) .
 LIST CDS MOD(IGG0196B) .
/*
//SMPPTFIN  DD  *
++ USERMOD (VS00065) .
++ VER (Z038) FMID(EDM1102) PRE(UZ28061) .
++ ZAP (IGG0196B) .
 NAME   IGG0196B
 EXPAND IGG0196B(40)
 VER 00D8 9205,2014    OVLY     MVI   DCBBUFNO,GENDEF
 VER 025A                          0000,0000,0000       PATCH AREA
 VER 0260 0000,0000,0000,0000,0000,0000,0000,0000       PATCH AREA
 VER 0270 0000,0000,0000,0000,0000,0000,0000,0000       PATCH AREA
 VER 0280 0000,0000,0000,0000,0000,0000,0000,0000       PATCH AREA
 VER 0290 0000,0000,0000,0000,0000,0000,0000,0000       PATCH AREA
 VER 02A0 0000,0000,0000,0000,0000,0000,0000,0000       PATCH AREA
 VER 02B0 0000,0000                                     PATCH AREA
*
*                       IGG0196B START 0
*                               USING IGG0196B+X'2',R3
*
*                      R0       EGU   0                            WORK
*                      R1       EQU   1                            WORK
*                      R2       EQU   2                        DCB ADDR
*                      R3       EQU   3                            BASE
*                      R10      EQU   10                           WORK
*                      R11      EQU   11                       DEB ADDR
*                      R12      EQU   12                    RETURN ADDR
*                      DCBBUFNO EQU   X'14'      FROM R2, BUFFER NUMBER
*                      DEBSUCBA EQU   X'20'           FROM R11, UCB PTR
*                      UCBJBNR  EQU   X'0'              VIO FLAG IN UCB
*                      DCBBLKSI EQU   X'3E'          FROM R2, BLOCKSIZE
*
*                               ORG   IGG0L96B+X'D8'
 REP 00D8 45C0,3258             BAL   R12,PATCH           SET HOOK
*
*                               ORG   IGG0196B+X'25A'
 REP 025A 9201,2014    PATCH    MVI   DCBBUFNO(R2),1      1 BUF FOR VI0
 REP 025E 58A0,B020             L     R10,DEBSUCBA(,R11)
 REP 0262 9180,A000             TM    UCBJBNR(R10),X'80'  UCB FOR VIC?
 REP 0266 071C                  BOR   R12                 YES, RETURN
*
 REP 0268 1B00                  SR    R0,R0
 REP 026A 5810,32AE             L     R1,FORTYK
 REP 026E 48A0,203E             LH    R10,DCBBLKSI(,R2)
*
 REP 0272 12AA                  LTR   R10,R10       ZERO BLKSIZE WILL
 REP 0274 078C                  BZR   R12           BE TRAPPED LATER
*
 REP 0276 1D0A                  DR    R0,R10  R1 IS BUFS TO FIT IN 40K
*
 REP 0278 9202,2014             MVI   DCBBUFNO(R2),2
 REP 027C 4910,32AC             CH    R1,TWO
 REP 0280 07DC                  BNHR  R12           MINIMUM 2 BUFS
*
 REP 0282 4210,2014             STC   R1,DCBBUFNO(,R2)
 REP 0286 4910,32AA             CH    R1,FIVE
 REP 028A 07DC                  BNHR  R12           3 TO 5 BUFS
*
 REP 028C 8A10,0003             SRA   R1,3          NO BUFS IN 5K
*
 REP 0290 9205,2014             MVI   DCBBUFNO(R2),5
 REP 0294 4910,32AA             CH    R1,FIVE
 REP 0298 07DC                  BNHR  R12           MINIMUM 5 BUFS
*
 REP 029A 4210,2014             STC   R1,DCBBUFNO(,R2)
 REP 029E 4910,32A8             CH    R1,THIRTY
 REP 02A2 07DC                  BNHR  R12           6 TO 30 BUFS
*
 REP 02A4 921E,2014             MVI   DCBBUFNO(R2),30
 REP 02A8 07FC                  BR    R12           MAXIMUM 30 BUFS
*
 REP 02AA 001E         THIRTY   DC    H'30'
 REP 02AC 0005         FIVE     DC    H'5'
 REP 02AE 0002         TWO      DC    H'2'
 REP 02B0 00009C40     FORTYK   DC    F'40000'
 IDRDATA VS00065
*                               END
/*
//
./       ADD   NAME=VS00066
//$SYSCSMP JOB (8205,0804),'6 J. LEMA',MSGCLASS=X,CLASS=Z,NOTIFY=$SYSC
/*JOBPARM  Q=F,O=VS00066
//*-------------------------------------------------------*//
//*                                                       *//
//*  THIS ZAP SHOULD BE APPLIED IN CONJUNCTION WITH THE   *//
//*  NEW IEFUJI AND AN IEFUJV DISABLE  TO ASSUME SOME     *//
//*  OF THE FUNCTIONS PREVIOUSLY EMBODIED IN IEFUJV.      *//
//*                                                       *//
//*  SCP RELEASE : MVS/SE RELEASE 2                       *//
//*  IEFVFA LVL  : UZ31338 ... 05/09/80                   *//
//*  ZAP INFO    : APPLIED 12/05/80  BY  J. LEMA          *//
//*                                                       *//
//*-------------------------------------------------------*//
//VS00066 EXEC SMP4APP
//SMPCNTL  DD  *
 RECEIVE S (VS00066).
 APPLY  S (VS00066) .
/*
//SMPPTFIN DD *
++ USERMOD (VS00066)
      /* THIS MOD DISABLES THE PRTY= AND PERFORM= JOBCARD KEYWORDS,
         DISABLES THE PERFORM=, PERFORM., DPRTY=, AND DPRTY. EXEC CARD
         KEYWORDS, AND INSERTS A $ AS THE SECOND CHARACTER OF ALL THE
         ABOVE TO PROVIDE A BYPASS.
      */ .
++ VER (Z038) FMID(EBB1102) PRE(UZ31338) .
++ ZAP(IEFVFA) .
  NAME  IEFVH1 IEFVFA
  VER   1EAE  D7D9E3E87E         PRTY=        ( JOB )
  VER   1EB5  D7C5D9C6D6D9D47E   PERFORM=     ( JOB )
  VER   1F63  D7C5D9C6D6D9D47E   PERFORM=     ( EXEC )
  VER   1F6E  D7C5D9C6D6D9D44B   PERFORM.     ( EXEC )
  VER   1FB9  C4D7D9E3E84B       DPRTY.       ( EXEC )
  VER   1FC2  C4D7D9E3E87E       DPRTY=       ( EXEC )
  REP   1EAE  D75BE3E87E         P$TY=        ( JOB )
  REP   1EB5  D75BD9C6D6D9D47E   P$RFORM=     ( JOB )
  REP   1F63  D75BD9C6D6D9D47E   P$RFORM=     ( EXEC )
  REP   1F6E  D75BD9C6D6D9D44B   P$RFORM.     ( EXEC )
  REP   1FB9  C45BD9E3E84B       D$RTY.       ( EXEC )
  REP   1FC2  C45BD9E3E87E       D$RTY=       ( EXEC )
  IDRDATA VS00066
/*
./       ADD   NAME=VS00068
//$SYS6LKD JOB (8205,3919),'6-LINKAGE EDITOR MOD',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00068
//VS00068  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00068) .
 APPLY   S (VS00068)   /* THIS ZAP IS A MODIFICATION OF ONE CONTRIB-
                          UTED BY R.L. MONNETTE WHICH APPEARED IN
                          OSIE 15 (GUIDE/DALLAS, TEXAS; MAY, 1974).
                          IT PLACES THE CURRENT TIME AND DATE IN A
                          MODULE SSI FIELD, IF THERE IS NO SETSSI
                          STATEMENT PROVIDED.  THIS ZAP IS APPLICABLE
                          TO THE VS2 R1.7 LINKAGE EDITOR.

                          GUIDE/DENVER, COLORADO; OSIE NO. 21,
                          NOVEMBER, 1975

                          JIM BUSSEY, SR. SOFTWARE PROGRAMMER
                          GREAT AMERICAN INSURANCE COMPANY
                          P.O. BOX 2575
                          CINCINNATI, OHIO
                                                                   */ .
 LOG (PLACE CURRENT TIME/DATE IN MODULE'S SSI FIELD IF ABSENT) .
 LOG (SYSTEM LEVEL:  MVS/3.8 - SP/1 USING AMDAHL DLIB @ 8011 LEVEL) .
/*
//SMPPTFIN  DD  *
++ USERMOD(VS00068) .
++ VER (Z038) FMID(EPM1102) .
++ ZAP (HEWLFFNL) DISTLIB(AOS04) .
 EXPAND HEWLFFNL(36)
 NAME HEWLFFNL
 VER  0110 4780,C142                           TEST FOR SETSSI
 VER  0930 0000,0000                           PATCH AREA
 REP  0110 4780,C92E         BZ   PATCH        TIME STAMP SSI
 REP  0930 4110,0002,0A0B    TIME DEC          GET DATE AND TIME
 REP  0936 8810,0004         SRL  1,4          STRIP OFF SIGN
 REP  093A BE13,21EC         STCM 1,3,SSI      STORE YDDD
 REP  093E BE0C,21EE         STCM 0,12,SSI+2   STORE HHMM
 REP  0942 9610,209E         OI   SETSSI,APT2  PROCESS SSI
 REP  0946 47F0,C112         B    BACK
 IDRDATA VS00068
/*
//
//$SYS6LKD JOB (8205,3919),'6-LINKAGE EDITOR MOD',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00068
//VS00068  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00068) .
 APPLY   S (VS00068)   /* THIS ZAP WILL CREATE A DATE AND TIME STAMP
                          WHENEVER SSI INFORMATION IS OMITTED FROM
                          LINKAGE EDITOR INPUT AND USE THE STAMP AS
                          THE SSI.  LINKAGE EDITOR LEVEL = VS2 R1.6.

                          GUIDE/WASHINGTON, D.C.; OSIE NO. 22,
                          MAY, 1976

                          TOM LAROCCO
                          JEWEL COMPAINES, INC.
                          OAK BROOK DATA CENTER
                          2107 SWIFT DRIVE
                          OAK BROOK, ILLINOIS  60521
                                                                   */ .
 LOG (PLACE CURRENT TIME/DATE IN MODULE'S SSI FIELD IF ABSENT) .
 LOG (SYSTEM LEVEL:  MVS/3.8 - SP/1 USING AMDAHL DLIB @ 8011 LEVEL) .
/*
//SMPPTFIN  DD  *
++ USERMOD(VS00068) .
++ VER (Z038) FMID(EPM1102) .
++ ZAP (HEWLFFNL) DISTLIB(AOS04) .
 EXPAND HEWLFFNL(38)
 NAME HEWLFFNL
 VER  0120 4780,C152             TEST FOR BLANK SSI INFORMATION
 VER  0940 0000,0000,0000,0000   PATCH AREA
 REP  0120 4780,C93E             BRANCH TO PATCH IF SSI ABSENT
 REP  0940 4110,0002,0A0B        GET TIME/DATA VIA SVC
 REP  0946 8810,0004             SRL  R1,4        SHIFT OUT SIGN
 REP  094A 4010,2208             STH  R1,SSI      STORE YDDD
 REP  094E 8800,0010             SRL  R0,16       SHIFT OUT SECONDS
 REP  0952 9610,209E             STH  R0,SSI+2    STORE HHMM
 REP  0956 9610,209E             OI   APT2,SETSSI TURN ON INDICATOR
 REP  095A 47F0,C122             BRANCH BACK TO PROCESS SSI
*****
**  REGISTER 1 AFTER TIME SVC = 00YYDDDS   DATE
**  REGISTER 0 AFTER TIME SVC = HHMMSSTH   TIME
**  SSI FIELD AFTER TWO STH   = YDDDHHMM
*****
 IDRDATA VS00068
/*
//
./       ADD   NAME=VS00070
//$SYS6CPY JOB (8205,3919),'6-FORMAT DSN/IEBCOPY',CLASS=Z,MSGCLASS=X,
//     NOTIFY=$SYS6
/*JOBPARM Q=F,I,O=VS00070
//VS00070  EXEC SMP4APP
//SMPCNTL   DD  *
 RECEIVE S (VS00070) .
 APPLY   S (VS00070)                                               /*
    ---------  -----------------------------------------------------
    FUNCTION:  REPLACE DDNAME WITH DSNAME/VOLSER IN IEBCOPY MESSAGES
    ---------  -----------------------------------------------------
    DISTLIB    SYS1.AOSU0 - COMPONENT:  SC1U6 - FICHE:  CARD12/J10

    EXAMPLES:
    IEB144I    THERE ARE NNNNNNNN UNUSED TRACKS IN OUTPUT DATA SET
               DATA.SET.NAME
    IEB161I    COMPRESS TO BE DONE USING DATA.SET.NAME
    IEB166I    NO MEMBERS COPIED TO DATA SET DATA.SET.NAME
    ---------  -----------------------------------------------------
    SOURCE:    GUIDE OS/INFORMATION EXCHANGE (OSIE NO. 19),
               MIAMI, FLORIDA, (MAY, 1975 - MVT 21.7)
    AUTHOR:    N. STEWART KAPLOW
               CHASE MANHATTAN BANK, N.A.
               ONE NEW YORK PLAZA
               NEW YORK, NEW YORK  10004

    UPDATED:   ROGER SMITH, AMDAHL S.E.
               MEMOREX CORPORATION, SSG TECHNICAL SUPPORT
               C/O WILLIAM SMITH, SYSTEMS PROGRAMMER
               DEPT. 8205, MS 10-35
               SAN TOMAS AT CENTRAL EXPRESSWAY
               SANTA CLARA, CALIFORNIA  95052  (408)-987-3919
                                                                   */ .
 LOG (FORMAT ACTUAL INPUT/OUTPUT DSNAME ON VARIOUS IEBCOPY MESSAGES) .
 LOG (SYSTEM LEVEL:  MVS/3.8 - SP/1 USING AMDAHL DLIB @ 8009 LEVEL) .
 LIST CDS SYSMOD(VS00070) .
 LIST CDS MOD(IEBVMS) .
/*
//SMPPTFIN  DD  *
++ USERMOD(VS00070) .
++ VER (Z038) FMID(EUT1102) .
++ ZAP (IEBVMS) DISTLIB(AOSU0).
 EXPAND IEBVMS(128)
 NAME IEBVMS
 VER  0176 4160,4B45                 BASE LEVEL 3.8 CODE (NO PTF'S)
 VER  0550 0000,0000                 DO WE NOW HAVE A PATCH AREA ?
 VER  05CC 0000,0000
 REP  0176 47F0,A550                 B    PATCH              PATCH AREA
 REP  0550 D502,4B49,A5A2    PATCH   CLC  MSGBUF+4(3),C144   MSG 144?
 REP  0556 4770,A562                 BNE  CLC161
 REP  055A 4160,4B79                 LA   R6,MSGBUF+61
 REP  055E 47F0,A582                 B    MOVE
 REP  0562 D502,4B49,A5A5    CLC161  CLC  MSGBUF+4(3),C161   MSG 161?
 REP  0568 4770,A574                 BNE  CLC166
 REP  056C 4160,4B69                 LA   R6,MSGBUF+36
 REP  0570 47F0,A582                 B    MOVE
 REP  0574 D502,4B49,A5A8    CLC166  CLC  MSGBUF+4(3),C166   MSG 166?
 REP  057A 4770,A59A                 BNE  DONE
 REP  057E 4160,4B63                 LA   R6,MSGBUF+40
 REP  0582 D206,6000,A5AB    MOVE    MVC  0(44,R6),OTDSNAME MOVE VOLSER
 REP  0588 D205,6007,4550    MOVE    MVC  0(44,R6),OTDSNAME FORMAT VOL
 REP  058E D209,600D,A5B2    MOVE    MVC  0(44,R6),OTDSNAME MOVE DSNAM
 REP  0594 D22B,6017,4556    MOVE    MVC  0(44,R6),OTDSNAME FORMAT DSN
 REP  059A 4160,4B45         DONE    LA   R6,MSGBUF      OVERLAID INSTR
 REP  059E 47F0,A17A                 B    MAINLINE       RETURN MAINLIN
 REP  05A2 F1F4F4            C144    DC   C'144'         IEB144I MSG ID
 REP  05A5 F1F6F1            C161    DC   C'161'         IEB161I MSG ID
 REP  05A8 F1F6F6            C166    DC   C'166'         IEB166I MSG ID
 REP  05AB E5D6,D3E2,C5D9,40         DC   C'VOLSER '     VOL-SER
 REP  05B2 40C4,C1E3,C140,E2C5,E340  DC   C' DATA SET '  DSNAME
 IDRDATA VS00070
/*
//
