*          DATA SET COMPRESS   AT LEVEL 001 AS OF 03/07/76
COMPRESS CSECT
*  CE - COMPRESS/EXPAND
         SPACE 1
*   UPON ENTRY R1 MUST CONTAIN THE ADDRESS OF A FULL WORD WHICH,
*        IN TURN, CONTAINS THE ADDRESS OF A PARMLIST.
*
*  COMPRESSION IS PERFROMED IN THE FOLLOWING MANNER:
*
*    1. THE RECORD, TO THE RIGHT OF THE KEY, IS SEARCHED FOR STRINGS OF
*       FOUR OR MORE BLANKS OR BINARY ZEROS AND DUPLICATE STRINGS OF
*       3-15 BYTES IN LENGTH.
*    2. A NEW RECORD IS CREATED IN THE 'DATAWORK' WORK AREA. THE NEW
*       RECORD, TO THE RIGHT OF THE KEY, IS CHANGED TO THE FOLLOWING
*       FORMAT:
*         1ST BYTE  - X'FF' INDICATES START OF COMPRESSED RECORD
*         NTH FIELD - 0000LLLL LLLLLLLL,NON-COMPRESSED DATA
*                   - 0100LLLL LLLLLLLL
*                   - 1000LLLL LLLLLLLL
*                   - 1100LLLL LLLLLLLL
*                        WHERE:
*                          0000LLLL LLLLLLLL INDICATES LL...L BYTES OF
*                                      NON-COMPRESSED DATA FOLLOWS.
*                          0100LLLL LLLLLLLL INDICATES LL...L BYTES OF
*                                      X'00' GO HERE.
*                          1000LLLL LLLLLLLL INDICATES LL...L BYTES OF
*                                      X'40' GO HERE.
*                          1100LLLL LLLLLLLL INDICATES LL...L FIELDS OF
*                                      OF THE SAME VALUE AS THE
*                                      PREVIOUS FIELD.
*         LAST BYTE - X'FF' INDICATES END OF COMPRESSED RECORD
*    3. IF COMPRESSION DIDN'T SAVE SPACE, THE ORIGINAL UNCOMPRESSED
*        RECORD IS USED
*    4. COMPRESSION EXAMPLE
*        ORIGINAL- F0C13334F000000000000000F140404040404040404040C2C2C3
*         (CONT.)  C2C2C3C2C2C3C2C2C3
*        COMPRESS- FF0005F0C13334F040070001F1800A0003C2C2C3C003FF
*                  **TXXX          TYYYTXXX  TZZZTXXX      TWWW**
*          **=COMPRESS ID, T=FIELD TYPE
*          XXX=NON-00/40 COUNT, YYY=00 COUNT, ZZZ=40 COUNT
*          WWW = DUPLICATE FIELD COUNT
          SPACE
* * * * * * * NOTE TO SYSTEMS PROGRAMMERS * * * * * * * * * * * * * * *
* THE DOCUMENTATION ABOVE SHOWS THE FIRST BYTE OF THE CONTROL FIELD   *
* AS 0000,0100,1000,1100.  IN ACTUALITY BITS 0 AND 1 ARE COMPRESS     *
* TYPE, BITS 2 AND 3 ARE PART OF THE LL...L FIELD.  IN REALITY BITS 3 *
* & 4 WILL BE 00 SINCE 14 BITS ALLOWS A VERY LARGE LENGTH.  WHEN THIS *
* ROUTINE IS MODIFIED FOR ANY REASON, IT MAY BE A GOOD IDEA TO        *
* 'AND' THESE BITS AT THE SAME TIME AS THE 1ST TWO BITS TO ASSURE     *
* THE VALUE OF 00.  THIS WILL GIVE TWO MORE BITS FOR CONTROL IF THE   *
* NEED EVER ARISES.                                                   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
***********************************************************************
*             INITIALIZE FOR COMPRESSION                              *
***********************************************************************
         ENTRY DSUT01A
         ENTRY CECMPRES
DSUT01A  EQU   *
CECMPRES EQU   *
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R9,R15              BASE REG
         USING CECMPRES,R9
         ST    R13,SAVEAREA+4      BACK CHAIN
         LR    R12,R13
         LA    R13,SAVEAREA        NEW SAVEAREA
         ST    R13,8(R12)          FORWARD CHAIN
         LA    R12,RETURN          SET BR FOR RETURN
         USING PARMLIST,R2         ADDRESSABILITY FOR
         L     R2,0(0,R1)           PARMLIST
*
         L     R4,DATALNGH              LOAD R4 WITH LENGTH OF AREA
         SR    R5,R5                   .CLEAR COUNTER REGISTER
         L     R6,DATAAD                LOAD R6 WITH A(RECORD)
         MVI   CETYPE,X'00'             ASSUME NON BLANK/ZERO TYPE
         LR    R7,R6                    LOAD R7 WITH A(RECORD)
         L     R8,DATAWORK
         MVI   0(R8),X'FF'              START WITH COMPRESS ID
         LA    R8,1(R8)                 INCREMENT R8 PAST ID
         LA    R10,1                    SET TOTAL COUNT TO 1
         ST    R4,CELENGTH                AND SAVE LENGTH
  SPACE 1
**********************************************************************
*  DETERMINE IF THERE IS A STRING OF BLANKS OR ZEROS                  *
**********************************************************************
CEBLNKCK CLI   0(R6),X'40'              IS FIELD POSSIBLY BLANKS?
         BNE   CEZEROCK                   IF NOT, TRY ZEROS
         CLC   1(4,R6),=X'40404040'     IS FIELD BLANKS?
         BE    CEBLNK                     IF YES, GO COUNT
CEZEROCK CLI   0(R6),X'00'              IS FIELD POSSIBLY ZEROS?
         BNE   CENON                      IF NOT, IT'S NON-COMPRESSABLE
         CLC   1(4,R6),=X'00000000'     IS FIELD ZEROS?
         BE    CEZERO                     IF YES, GO COUNT
  SPACE 1
*  COUNT STRING OF NON ZERO/BLANKS
*
CENON    LA    R5,1(R5)                 INCREMENT NON-COMPRESSED COUNT
         LA    R6,1(R6)                 INCREMENT TO NEXT BYTE
         CH    R5,=H'0003'              EHOUGH 2 CHECK 4 DUPE STRINGS?
         BL    CEDUPE5                    IF NOT, GO EXIT
*   CHECK FOR DUPLICATE STRINGS AND COUNT THEM, IF FOUND.
         LR    R15,R6                   CALCULATE COMPARE ADDRESSES
         SR    R15,R5                     .
         LR    R14,R5                     .
         CH    R14,=H'0015'               .
         BL    CEDUPE1                    .
         LA    R14,15                     .
         LR    R15,R6                     .
         SR    R15,R14                    .
CEDUPE1  EX    R14,CECLC1               COMPARE FOR DUPLICATE STRINGS
         BE    CEDUPE2                    .   LOOP UNTIL DUPLICATE
         CH    R14,=H'0003'               .   STRING IS FOUND OR
         BL    CEDUPE5                    .   UNTIL R14 (LENGTH) IS
CEDUPE1A LA    R15,1(R15)                 .   DECREMENTED TO <3. EXIT
         BCT   R14,CEDUPE1                .   IF NO DUPLICATES
         B     CEDUPE5                    .
CEDUPE2  LA    R1,2(R14,R6)             LOOK AHEAD TO MAKE SURE THERE
         EX    R14,CECLC3                 .   ARE AT LEAST 3 DUPLICATE
         BNE   CEDUPE1A                   .   STRINGS.
         SR    R5,R14                   MOVE THE FIELD PRIOR TO THE
         LA    R6,1(R6)                   .   DUPLICATE STRINGS
         LA    R15,1                      .
         BAL   R11,CEMOVE                 .
         LA    R5,1(R14,R5)               .
CEDUPE3  SR    R4,R5                    COUNT THE DUPLICATE STRINGS
         CR    R4,R5                      .
         BNH   CEDUPE4                    .
         AR    R6,R5                      .
         EX    R14,CECLC2                 .
         BNE   CEDUPE4                    .
         LA    R15,1(R15)               .
         B     CEDUPE3                    .
CEDUPE4  BAL   R11,CEMOVE               MOVE THE PATTERN STRING
         LR    R5,R15                   MOVE THE REPEATED STRING CNTRL
         MVI   CETYPE,X'C0'               .
         BAL   R11,CEMOVE                 .
         LR    R7,R6                      .
         SH    R4,=H'0001'                .
CEDUPE5  EQU   *                        EXIT FROM THE NON ZERO/BLANKS
         BCT   R4,CEBLNKCK                ROUTINE
         B     CERETURN                   .
  SPACE 1
*  COUNT STRING OF ZEROS
*
CEZERO   BAL   R11,CEMOVE
         MVI   CETYPE,X'40'
         LA    R5,5
         LA    R6,5(R6)
         SR    R4,R5                    SUBTRACT 5 FROM COUNT
CEZEROLP CLI   0(R6),X'00'
         BNE   CENOTZRO
         LA    R5,1(R5)
         LA    R6,1(R6)                 INCREMENT TO NEXT BYTE
         BCT   R4,CEZEROLP
         B     CERETURN
CENOTZRO BAL   R11,CEMOVE               GO SET UP CONTROL BYTES
         B    CEBLNKCK                  GO DETERMINE NEXT STRING TYPE
  EJECT
*  COUNT STRING OF BLANKS
*
CEBLNK   BAL   R11,CEMOVE
         MVI   CETYPE,X'80'
         LA    R5,5
         LA    R6,5(R6)
         SR    R4,R5                    SUBTRACT 5 FROM COUNT
CEBLNKLP CLI   0(R6),X'40'
         BNE   CENOTBLK
         LA    R5,1(R5)
         LA    R6,1(R6)                 INCREMENT TO NEXT BYTE
         BCT   R4,CEBLNKLP
         BE    CERETURN
CENOTBLK BAL   R11,CEMOVE               GO SET UP CONTROL BYTES
         B     CEZEROCK                 GO DETERMINE NEXT STRING TYPE
  SPACE 1
*  WRAP UP AND RETURN FROM COMPRESSION ROUTINE
*
CERETURN BAL   R11,CEMOVE
         MVI   0(R8),X'FF'              PUT COMPRESS ID AT END
         LA    R11,1(R10)                 AND ADD 1 TO TATAL COUNT
         C     R11,CELENGTH             IS COMPRESSED BYTE CNT > ORIG.?
         BCR   10,R12                     IF SO, RETURN
         L     R4,DATAAD                MOVE COMPRESSED RECORD BACK
         L     R10,DATAWORK               .
         L     R5,CELENGTH                .
         ST    R11,DATALNGH        RETURN COMPRESSED DATA LENGTH
         MVCL  R4,R10                     .
         BR    R12
  EJECT
*  SUBROUTINE TO MOVE DATA AND/OR SET UP CONTROL BYTES WHEN TYPE OF
*  CHARACTER STRING CHANGES
*
CEMOVE   CH    R5,=H'0000'              IS BYTE COUNT 0
         BCR   8,R11                    IF SO, DON'T MOVE
         STH   R5,0(R8)
         OC    0(1,R8),CETYPE             SET CNTRL TYPE AND
         LA    R10,2(R10)               ADD 2 TO TOTAL COUNT
         LA    R8,2(R8)                   INCREMENT PAST CNTRL BYTES
         CLI   CETYPE,X'00'             IS TYPE NON-COMPRESSABLE
         BNE   CENOMOVE                   IF NOT, DON'T MOVE
         AR    R10,R5                   ADD CURRENT TO TOTAL BYTE COUNT
         C     R10,CELENGTH             WILL COMPRESSED DATA EXCEED NON
         BCR   2,R12                      IF SO, DON'T CONTINUE
         EX    R5,CEMVC1                  MOVE NON-COMPRESSABLE DATA
         AR    R8,R5                      AND POINT PASSED MOVED DATA
CENOMOVE AR    R7,R5                    POINT IP POINTER PASSED DATA
         SR    R5,R5                    RESET COUNTER TO ZERO
         MVI   CETYPE,X'00'             SET COMPRESSION TYPE
         BR    R11                      RETURN TO CALLER
  EJECT
*  EXPANSION IS PERFORMED AS FOLLOWS:
*
*    1. THE RECORD IS TESTED FOR X'FF' ID AT START. IF NOT A COMPRESSED
*       RECORD, IT IS NOT EXPANDED
*    2. THE RECORD IS EXPANDED BY CHAINING THROUGH IT UNTIL THE X'FF'
*       AT THE END ARE REACHED AND EXPANDING EACH FIELD INTO ITS PROPER
*       LOCATION IN THE WORK AREA.  IF THE CHAINING FAILS, THE RECORD
*       IS NOT A COMPRESSED RECORD AND IS NOT EXPANDED.
*    3. THE EXPANDED RECORD IS MOVED FROM THE WORK AREA BACK TO THE
*       CALLERS AREA IF 1 AND 2 ABOVE WERE SUCCESSFUL
*  EXPAND INITIALIZATION
*
         ENTRY DSUT01B
         ENTRY CEEXPAND
DSUT01B  EQU   *
CEEXPAND EQU   *
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R9,R15              BASE REG
         USING CEEXPAND,R9
         ST    R13,SAVEAREA+4      BACK CHAIN
         LR    R12,R13
         LA    R13,SAVEAREA        NEW SAVEAREA
         ST    R13,8(R12)          FORWARD CHAIN
         LA    R12,RETURN          SET BR FOR RETURN
         USING PARMLIST,R2         ADDRESSABILITY FOR
         L     R2,0(0,R1)           PARMLIST
         L     R6,DATAAD                POINT R6 AT DATA
         L     R8,DATAWORK              POINT R8 AT WORK AREA
         SR    R11,R11                  CLEAR R11
         CLI   0(R6),X'FF'              IS THIS COMPRESSED RECORD?
         BCR   6,R12                      IF NOT, RETURN
         LA    R6,1(R6)                 POINT PAST X'FF' ID
         B     CECKEND
 SPACE 1
*  DETERMINE TYPE OF EXPANSION
*
CECKTYPE TM    0(R6),X'C0'              IS CNTRL BYTE X'00',X'40',X'80'
         BC    1,CERPTTYP
         TM    0(R6),X'40'              IS CNTRL BYTE X'40'
         BNZ   CEZROTYP                   IF 50, GO EXPAND ZEROS
         TM    0(R6),X'80'              IS CNTRL BYTE X'80'
         BNZ   CEBLKTYP                   IF 50, GO EXPAND BLANKS
 SPACE 1
*  EXPAND NON ZERO/BLANK CHARACTER STRING
*
CENONTYP LH    R5,0(R6)                 GET LENGTH FOR MOVE,
         AR    R11,R5                     ADD TO TOTAL BYTE COUNT
         SH    R5,=H'0001'                AND DECREMENT FOR MVC
         LA    R6,2(R6)                 POINT R6 PAST CNTRL BYTES
         EX    R5,CEMVC4                MOVE DATA TO WORK AREA
         LA    R5,1(R5)                   AND RE-ADJUST LENGTH
         AR    R8,R5                    POINT R8 AT NEXT FIELD IN W.A.
         LR    R14,R6
         AR    R6,R5                    POINT R6 AT NEXT CONTROL BYTE
         B     CECKEND
   EJECT
*  SET UP FOR EXPANSION OF DUPLICATE STRINGS
*
  SPACE 1
CERPTTYP LH    R15,0(R6)
         N     R15,=X'00003FFF'
         SH    R5,=H'0001'
CERPT2   EX    R5,CEMVC3
         LA    R11,1(R11,R5)
         LA    R8,1(R8,R5)
         BCT   R15,CERPT2
         LA    R6,2(R6)
         B     CECKEND
 SPACE 1
*  SET UP FOR EXPANSION OF ZEROS
*
 SPACE 1
CEZROTYP MVI   0(R8),X'00'              MOVE X'00' TO WA FIELD AND
         B     CEPROP                     GO PROPAGATE THRU FIELD
   EJECT
*  SET UP FOR EXPANSION OF BLANKS
*
CEBLKTYP MVI   0(R8),X'40'              MOVE X'40' TO WA FIELD
  SPACE 1
*  PROPAGATE ZERO OR BLANK THROUGH LENGTH OF FIELD
*
CEPROP   LH    R5,0(R6)                 GET LENGTH FOR PROPAGATION AND
         N     R5,=X'00003FFF'          TURN OFF CNTRL TYPE BITS
         SH    R5,=H'0002'                ADJUST FOR MVC
         EX    R5,CEMVC5                PROPAGATE X'40' OR X'00' AND
         AH    R5,=H'0002'                RE-ADJUST LENGTH AFTER MVC
         AR    R11,R5                   ADD TO TOTAL BYTE COUNT
         AR    R8,R5                    POINT R8 TO NEXT WA FIELD
         LA    R6,2(R6)                 POINT R6 AT NEXT CNTRL BYTE
  SPACE 1
*  CHECK FOR END OF RECORD AND LOOP IF NOT END, RETURN IF END
*
CECKEND  CLI   0(R6),X'FF'              IS THIS END OF RECORD
         BNE   CECKTYPE                   IF NOT  CONTINUE EXPANSION
         L     R10,DATAWORK             POINT R2 AT WORK AREA (R3=LGH)
         L     R4,DATAAD                POINT R4 AT DATA AREA
         LR    R5,R11                   R5 = LENGTH OF DATA AREA
         ST    R11,DATALNGH             STORE NEW DATA LENGTH
         MVCL  R4,R10                   MOVE EXPANDED RECORD BACK
         BR    R12                      RETURN TO CALLER
  EJECT
RETURN   EQU   *
         L     R13,4(R13)          PTR TO PREV SAVE
         L     R14,12(R13)         RESTORE RETURN
         LM    R0,R12,20(R13)      RESTORE REGS R0 - R12
         BR    R14                 RETURN
  EJECT
*  EXECUTED MVC'S
*
CEMVC1   MVC   0(0,R8),0(R7)
CEMVC3   MVC   0(0,R8),0(R14)
CEMVC4   MVC   0(0,R8),0(R6)
CEMVC5   MVC   1(0,R8),0(R8)
CECLC1   CLC   1(0,R6),0(R15)
CECLC2   CLC   0(0,R6),0(R7)
CECLC3   CLC   0(0,R1),0(R15)
    SPACE
SAVEAREA DC    18A(0)
CETYPE   DC    X'00'
CELENGTH DC    F'0'
         LTORG
PARMLIST DSECT
DATALNGH DC    F'0'
DATAAD   DC    A(0)
DATAWORK DC    A(0)
         END
