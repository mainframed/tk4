//    EXEC    ASMFC
FPARM    CSECT
         B         10(15)
         DC        X'5'
         DC        CL5'FPARM'
         STM       14,4,12(13)
         BALR      4,0
         USING     *,4
         L         2,4(13)     ADDRESS OF SYSTEM SAVE AREA
         L         2,24(2)     CONTENTS OF REG 1
         L         3,0(2)      ADDRESS OF PARM FIELD
         LH        2,0(3)      LOAD LENGTH FIELD
         LTR       2,2         CHECK FOR ZERO LENGTH
         BZ        DONE        OUT IF NO PARM
         L         1,0(1)      LOAD DESTINATION ADDRESS OF PARM FIELD
         BCTR      2,0         SUBTRACT ONE
         STC       2,MOVE+1    PLUG INTO MVC INSTRUCTION
MOVE     MVC       0(1,1),2(3) MOVE PARM FIELD
DONE     LM        2,4,28(13)
         BR        14
         END
//   EXEC   ASMFC
UVFW20   CSECT
         USING     *,12
         B         12(15)
         DC        X'7'
         DC        CL7'UVFW20'
         STM       14,12,12(13)
         LR        12,15
         LA        2,SAVE
         ST        2,8(13)
         ST        13,4(2)
         LR        13,2
         L         2,0(1)
A        BC        0,WRITE
         MVI       A+1,X'F0'
         OPEN      (DCBAD,(OUTPUT))
WRITE    PUT       DCBAD,(2)
         L         13,4(13)
         LM        14,15,12(13)
         LM        2,12,28(13)
         MVI       12(13),X'FF'
         SR        15,15
         BR        14
DCBAD    DCB       DSORG=PS,MACRF=(PM),DDNAME=FT20F001
SAVE     DS        18F
         END
//   EXEC   ASMFC
FINDCH   START     0
         B         12(15)
         DC        X'7'
         DC        CL7'FINDCH'
         STM       14,9,12(13)
         BALR      9,0
         USING     *,9
         LM        2,7,0(1)
         SR        8,8
         ST        8,0(7)
         L         6,0(6)
         LTR       6,6
         BNP       EXIT
         L         3,0(3)
         BCTR      3,0
         STC       3,COMP+1
         L         5,0(5)
         AR        4,5
         BCTR      4,0
COMP     CLC       0(1,2),0(4)
         BE        FOUND
         LA        4,1(4)
         BCT       6,COMP
         B         EXIT
FOUND    S         4,8(1)
         LA        4,1(4)
         ST        4,0(7)
EXIT     LM        2,9,28(13)
         MVI       12(13),X'FF'
         BR        14
         END
//   EXEC   ASMFC
GETMEM   CSECT
         USING     *,12
         B         12(15)
         DC        X'7'
         DC        CL7'GETMEM'
         STM       14,12,12(13)
         LR        12,15
         LA        2,SVAREA
         ST        2,8(13)
         ST        13,4(2)
         LR        13,2
         LM        2,3,0(1)
         L         7,8(1)
         L         4,PNTRD
A        BC        0,INCRD
         MVI       A+1,X'F0'
         OPEN      (DIRDCB)
READD    READ      LIBECB,SF,DIRDCB,DIR
         CHECK     LIBECB
         CLC       DIR(8),0(2)
         BL        READD
         LA        4,DIR+8
         AH        4,0(4)
         ST        4,ENDD
         LA        4,DIR+10
         ST        4,PNTRD
LOOPC    CLC       0(8,4),0(2)
         BL        INCRD
         CLC       0(8,4),0(3)
         BH        DONECL       BRANCH TO CLOSE ROUTINE
         CLI       7(4),X'FF'
         BE        DONECL
         MVC       TTRN(3),8(4)
         MVC       0(8,7),0(4)
         MVI       C+1,X'00'
EXIT     SR        15,15     RETURN CODE OF 0
EXIT2    L         13,4(13)
         L         14,12(13)
         LM        2,12,28(13)
         MVI       12(13),X'FF'
         BR        14
DONE     LA        15,4(0,0) RETURN CODE OF 4
         B         EXIT2
         ENTRY     GETDD
         DC        X'5'
         DC        CL5'GETDD'
         USING     *,11
GETDD    STM       14,12,12(13)
         LR        11,15
         LA        2,SVAREA
         ST        2,8(13)
         ST        13,4(2)
         LR        13,2
         L         12,=A(GETMEM)
         DROP      11
GETSW    BC        0,NEXTDD
         MVI       GETSW+1,X'F0'
         L         2,16        POINTER TO CVT
         L         2,0(2)      POINTER TO TCB WORDS
         L         2,4(2)      POINTER TO CURRENT TCB
         L         2,12(2)
         LA        2,24(0,2)     POINTER TO DD ENTRY
         ST        2,TIOTDD      STORE THE POINTER
NEXTDD   L         2,TIOTDD      LOAD POINTER TO DD ENTRY
         LR        4,2           PUT A COPY IN 4
         L         3,0(2)
         SRL       3,24          LENGTH OF DD ENTRY
         LTR       3,3
         BZ        DONE          OUT OF DD ENTRIES
         AR        2,3
         ST        2,TIOTDD      STORE POINTER TO NEXT DD ENTRY
         CLC       4(5,4),=C'SYSUT'
         BNE       NEXTDD        TRY FOR MORE
         L         5,0(1)        FIRST ARGUMENT IN CALL
         MVC       DUMDCB+40(8),4(4)    MOVE DDNAME TO DCB
         MVC       DIRDCB+40(8),4(4)
         MVC       INPDCB+40(8),4(4)
         RDJFCB    (DUMDCB)      FETCH JFCB FOR DSNAME
         MVC       0(16,5),JFCB  MOVE DSNAME BACK TO CALLER
         B         EXIT          DONE
DONECL   CLOSE     (DIRDCB,,INPDCB)
         MVI       A+1,X'00'      RESTORE SWITCHES TO NO BRANCH
         MVI       B+1,X'00'
         MVI       C+1,X'00'
         B         DONE           RETURN THROUGH EXIT BRANCH
INCRD    IC        5,11(4)
         SLL       5,27
         SRL       5,26
         LA        4,12(4)
         AR        4,5
         C         4,ENDD
         BNL       READD
         ST        4,PNTRD
         B         LOOPC
         ENTRY     READL
         DC        X'5'
         DC        CL5'READL'
         USING     *,11
READL    STM       14,12,12(13)
         LR        11,15
         LA        2,SVAREA
         ST        2,8(13)
         ST        13,4(2)
         LR        13,2
         L         12,=A(GETMEM)
         DROP      11
         L         2,0(1)
B        BC        0,C
         MVI       B+1,X'F0'
         OPEN      (INPDCB)
         LH        0,INPDCB+62
         GETMAIN   R,LV=(0)
         ST        1,INAREA
C        BC        0,RDLNE
         MVI       C+1,X'F0'
         POINT     INPDCB,TTRN
         B         FIRST
RDLNE    L         3,BBGN
         C         3,BEND
         BL        GETBLK
FIRST    L         3,INAREA
         READ      SEQECB,SF,INPDCB,(3)
         CHECK     SEQECB
         LH        5,INPDCB+62
         L         6,SEQECB+16
         SH        5,14(6)
         A         5,INAREA
         ST        5,BEND
GETBLK   MVC       0(80,2),0(3)
         LA        3,80(3)
         ST        3,BBGN
         B         EXIT
INAREA   DC        F'0'
BBGN     DC        F'0'
BEND     DC        F'0'
INPDCB   DCB   DDNAME=SYSUT1,DSORG=PO,EODAD=DONE,MACRF=(R),            X
               KEYLEN=0
DIRDCB   DCB   BLKSIZE=256,DDNAME=SYSUT1,DSORG=PS,                     X
               KEYLEN=8,MACRF=(R),RECFM=F
PNTRD    DC        F'0'
ENDD     DC        F'0'
TTRN     DC        F'0'
DIR      DS        33D
SVAREA   DS        18F
TIOTDD   DS        F
DUMDCB   DCB   DDNAME=SYSUT1,EXLST=LST,DSORG=PS,                       X
               MACRF=(R)
LST      DS        0F
         DC        X'07'
         DC        AL3(JFCB)
JFCB     DS        176C
         END
//   EXEC   ASMFC
STRMOV   START     0
         BC        15,12(15)
         DC        X'7'
         DC        CL7'STRMOV'
         STM       14,9,12(13)
         BALR      2,0
         USING     *,2
         LM        3,7,0(1)           LOAD POINTERS TO ARGUMENTS
*        ADDRESS OF SOURCE STRING IN 3
*        ADDRESS OF BEGINNING BYTE COUNT OF SOURCE STRING IN 4
*        ADDRESS OF LENGTH OF MOVE IN BYTES IN 5
*        ADDRESS OF DESTINATION STRING IN 6
*        ADDRESS OF STARTING BYTE IN DESTINATION STRING IN 7
         L         4,0(4)
         AR        4,3
         BCTR      4,0                4 NOW HAS ADDRESS OF SOURCE
         L         7,0(7)
         AR        6,7
         BCTR      6,0                6 NOW HAS ADDRESS OF DESTINATION
         L         8,0(5)             BYTES TO MOVE
         LTR       8,8                CHECK IF POSITIVE
         BNP       DONE               DONE IF NEGITIVE OR ZERO
         SRDL      8,8                DIVIDE BY 256
         SRL       9,24               REMAINDER NOW IN 9
         LTR       9,9                CHECK FOR NO REMAINDER
         BZ        LOOPD              BRANCH IF REMAINDER OF ZERO
         BCTR      9,0                SET UP TO STUFF IN MVC
         STC       9,MOVEA+1          STUFF IN MVC LENGTH FIELD
MOVEA    MVC       0(1,6),0(4)        MOVE REMAINDER BYTES
         LTR       8,8                SEE IF WE HAVE TO MOVE MORE
         BZ        DONE               DONE IF QUOTIENT OF DIVIDE
*                                     IS ZERO
LOOPA    LA        4,1(9,4)           BUMP UP SOURCE ADDRESS
         LA        6,1(9,6)           BUMP UP DESTINATION ADDRESS
LOOPD    LA        9,255              FIX INCREMENT TO 256 BYTES
         MVC       0(256,6),0(4)      MOVE BATCH OF 256 BYTES
         BCT       8,LOOPA            DO IT AGAIN
DONE     LM        2,9,28(13)         RESTORE REGISTERS
         MVI       12(13),X'FF'       LOAD RETURN INDICATOR
         BCR       15,14              BACK TO FORTRAN CALLER
         END
//   EXEC   ASMFC
KOMSTR   START     0
         BC        15,12(15)
         DC        X'7'
         DC        CL7'KOMSTR'
         STM       14,6,12(13)
         BALR      2,0
         USING     *,2
         SR        0,0
         LA        6,1
         L         3,8(1)
         L         3,0(3)
         L         4,4(1)
         L         4,0(4)
         A         4,0(1)
         SR        4,6
         AR        3,4
         L         5,16(1)
         L         5,0(5)
         A         5,12(1)
         SR        5,6
LOOP     CLC       0(1,4),0(5)
         BC        8,EQUAL
         BC        4,ALOW
         LR        0,6
         BC        15,STOP
EQUAL    AR        4,6
         AR        5,6
         CR        3,4
         BC        6,LOOP
         BC        15,STOP
ALOW     LCR       0,6
STOP     LM        2,6,28(13)
         MVI       12(13),X'FF'
         BCR       15,14
         END
//   EXEC  FTGCLG,GOPARM='A,OR'
C        THIS PROGRAM SCANS PROCLIBS FOR DATA SET NAMES AND PRODUCES
C        A CROSS REFERENCE LIST OF DSNAMES,DDNAMES,PROCNAMES,UNIT,
C        DISPOSITION,AND PROGRAM.
C        AS MANY PROCLIBS AS DESIRED MAY BE SCANNED PER RUN
C        PROCLIBS TO BE SCANNED ARE SUPPLIED THROUGH THE EXECUTE JCL
C        EACH PROCLIB REQUIRES A SYSUTX DD CARD- WHERE X MAY BE ANY
C        LETTER OR NUMBER.
C        FOR EXAMPLE:   //SYSUT1  DD  DSN=SYS1.PROCLIB,DISP=SHR
C                       //SYSUT2  DD  DSN=SYS1.MISCPROC,DISP=SHR
C                       ETC. FOR AS MANY LIBRARIES AS YOU WANT
C
C      ALSO INCLUDES ABILITY TO SPECIFY PREFIXES OF MEMBER NAMES
C      TO BE PROCESSED THROUGH A PARM FIELD IN THE EXEC CARD.
C      UP TO 50 PREFIXES CAN BE SPECIFIED AS FOLLOWS:
C      PARM='SC,ED,OR'   WOULD SPECIFY THAT ONLY PROCS BEGINNING
C      WITH SC, ED, OR OR WILL BE PROCESSED IN THIS RUN.
C
C        PROGRAM WRITTEN BY JIM AMICK- EXT 5278
C
C        OUTPUT OF PROGRAM GOES TO SORT WHICH THEN GOES TO
C        COBOL PROGRAM JCLCROSP FOR PRINTING IN PAGES WITH HEADINGS
C
      REAL*8 STRTM /'     '/          , ENDM /'99999999'       /,
     A ULNE(10), DILNE(10), FOUND, BLNK(10)/10*' '/,
     B LINE(10),CLINE(10),DCBLNE(10)  ,DLINE(10),SLINE(10)
      LOGICAL*1 PARM(101)/101*Z00/
      REAL*8 TBLP(50)/50*' '/
      INTEGER*2 LTBLP(50)
      INTEGER LCS(150), NPARM/0/, K/0/
      REAL*8 SYMBN(150), SYMBV(10,150), DSN(2), NME
      LOGICAL*1  OLINE(133)/133*' '/
      COMMON SYMBN, SYMBV, LCS, LXPOS, ISYMB
      ISYMB= 150
      CALL FPARM (PARM)
      IF (KOMSTR(PARM, 1, 1, 0, 1) .EQ. 0) GO TO 45
      NPARM= 1
    5 L= 0
   10 K= K + 1
      IF (KOMSTR(PARM, K, 1, 0, 1) .EQ. 0) GO TO 30
      IF (KOMSTR(PARM, K, 1, ',', 1) .EQ. 0) GO TO 25
      L= L + 1
      IF (L .LE. 8) GO TO 20
      WRITE (3,15) (PARM(M),M=1,K)
   15 FORMAT (' PARM VALUE > 8 DIGITS, PARM=', 100A1)
      STOP
   20 CALL STRMOV (PARM,K,1,TBLP(NPARM),L)
      LTBLP(NPARM)= L
      GO TO 10
   25 IF (KOMSTR(PARM, K+1, 1, ',', 1) .EQ. 0) GO TO 5
      NPARM= NPARM + 1
      IF (KOMSTR(PARM, K+1, 1, 0, 1) .NE. 0) GO TO 5
      NPARM= NPARM - 1
   30 IF (NPARM .EQ. 0) GO TO 45
      WRITE (3,35)
   35 FORMAT ('0PROCS LISTED IN THIS RUN LIMITED TO THE FOLLOWING:'
     A / ' ')
      WRITE (3,40) (TBLP(M),M=1,NPARM)
   40 FORMAT (' ', 10A8)
   45 CALL GETDD (DSN,&265)
      WRITE (3,50) DSN
   50 FORMAT ('0PROCESSING PROCLIB- ',2A8)
   55 CALL GETMEM (STRTM,ENDM,FOUND,&45)
      IF (NPARM .EQ. 0) GO TO 70
      DO 65 M=1,NPARM
      ME= LTBLP(M)
      DO 60 J=1,ME
      IF (KOMSTR(FOUND, J, 1, TBLP(M), J) .NE. 0) GO TO 65
   60 CONTINUE
      GO TO 70
   65 CONTINUE
      GO TO 55
   70 DO 80 J=1,ISYMB
      DO 75 LC=1,10
   75 SYMBV(LC,J)= BLNK(1)
      LCS(J)= 0
   80 SYMBN(J)= BLNK(1)
      ISYMB= 0
      JEND= 0
      NEND= 0
   85 CALL READL (LINE,&55)
      IF (KOMSTR(LINE,1,2,'//',1) .NE. 0) GO TO 150
      IF (KOMSTR(LINE,3,1,'*',1) .EQ. 0) GO TO 85
      CALL FINDCH (' PROC ',6,LINE,5,65,LPROC)
      IF (LPROC .EQ. 0) GO TO 170
      LA= LPROC + 5
   90 LA= LA + 1
      IF (LA .GE. 72) GO TO 85
      IF (KOMSTR(LINE,LA,1,' ',1) .EQ. 0) GO TO 90
      LB= LA
   95 LB= LB + 1
      IF (LB .GE. 72) GO TO 150
      IF (KOMSTR(LINE,LB,1,'=',1) .NE. 0) GO TO 95
      ISYMB= ISYMB + 1
      CALL STRMOV (LINE,LA,LB-LA,SYMBN(ISYMB),1)
      IF (LB .EQ. 71) GO TO 85
      IF (KOMSTR(LINE,LB+1,1,',',1) .EQ. 0) GO TO 145
      IF (KOMSTR(LINE,LB+1,1,' ',1) .EQ. 0) GO TO 85
      LC= LB + 1
      IF (KOMSTR(LINE,LC,1,'''',1) .EQ. 0) GO TO 125
      LD= LC
  100 LD= LD + 1
      IF (LD .EQ. 72) GO TO 105
      IF (KOMSTR(LINE,LD,1,',',1) .EQ. 0) GO TO 115
      IF (KOMSTR(LINE,LD,1,' ',1) .NE. 0) GO TO 100
  105 CALL STRMOV (LINE,LC,LD-LC,SYMBV(1,ISYMB),1)
      LCS(ISYMB)= LD - LC
      IF (KOMSTR(LINE,72,1,' ',1) .EQ. 0) GO TO 85
  110 CALL READL (LINE,&150)
      IF (KOMSTR(LINE,1,2,'//',1) .NE. 0) GO TO 150
      IF (KOMSTR(LINE,3,1,'*',1) .EQ. 0) GO TO 110
      IF (KOMSTR(LINE,72,1,' ',1) .NE. 0) GO TO 110
      GO TO 170
  115 CALL STRMOV (LINE,LC,LD-LC,SYMBV(1,ISYMB),1)
      LCS(ISYMB)= LD - LC
      IF (LD .EQ. 71) GO TO 140
      IF (KOMSTR(LINE,LD+1,1,' ',1) .EQ. 0) GO TO 140
  120 LA= LD
      GO TO 90
  125 LC= LC + 1
      LD= LC - 1
  130 LD= LD + 1
      IF (KOMSTR(LINE,LD,1,'''',1) .NE. 0) GO TO 130
      IF (LD .GE. 71) GO TO 135
      IF (KOMSTR(LINE,LD+1,1,'''',1) .NE. 0) GO TO 135
      LD= LD + 1
      GO TO 130
  135 CALL STRMOV (LINE,LC,LD-LC,SYMBV(1,ISYMB),1)
      LCS(ISYMB)= LD - LC
      LD= LD + 1
      IF (LD .GE. 72) GO TO 85
      IF (KOMSTR(LINE,LD,1,',',1) .NE. 0) GO TO 85
      IF (LD .GE. 71) GO TO 140
      IF (KOMSTR(LINE,LD+1,1,' ',1) .EQ. 0) GO TO 140
      GO TO 120
  140 CALL READL (LINE,&160)
      IF (KOMSTR(LINE,1,2,'//',1) .NE. 0) GO TO 150
      IF (KOMSTR(LINE,3,1,'*',1) .EQ. 0) GO TO 140
      LA= 3
      GO TO 90
  145 IF (LB .EQ. 70) GO TO 140
      IF (KOMSTR(LINE,LB+2,1,' ',1) .EQ. 0) GO TO 140
      LA= LB + 1
      GO TO 90
  150 WRITE (3,155) FOUND,DSN
  155 FORMAT ('0MEMBER ',A8,' OF ',2A8,' FLUSHED- BAD JCL SYNTAX')
      GO TO 55
  160 WRITE (3,165) FOUND,DSN,LINE,NME
  165 FORMAT ('0 ',A8,' IN ',2A8, ' AT LINE ', 10A8/
     A '      SYMBOLIC PARAMETER &',A8,' CAN''T BE RESOLVED')
      GO TO 260
  170 M= 0
      NDSN= 0
      JJ= 0
      CALL FINDCH (' EXEC ',6,LINE,3,70,LC)
      IF (LC .EQ. 0) GO TO 175
      CALL BUILD (LINE,3,DCBLNE,LA,M,JJ,NME,&160,&150,&150)
      CALL FINDCH ('PGM=',4,LINE,9,60,N)
      CALL BUILD (LINE,N+4,CLINE,LA,M,JJ,NME,&160,&150,&150)
      GO TO 85
  175 CALL FINDCH (' DD ',4,LINE,3,70,LDD)
      IF (LDD .EQ. 0) GO TO 85
      CALL STRMOV (BLNK,1,80,DILNE,1)
      CALL STRMOV (BLNK,1,80,ULNE,1)
      CALL BUILD (LINE,3,SLINE,LA,M,JJ,NME,&160,&150,&150)
      LDSN= 0
      LL= 0
      MM= 0
      NN= 0
  180 IF (LL .EQ. 1) GO TO 210
      CALL FINDCH ('DSN=',4,LINE,3,70,N)
      IF (N .NE. 0) GO TO 185
      CALL FINDCH ('DSNAME=',7,LINE,3,70,N)
      IF (N .EQ. 0) GO TO 210
      N= N + 7
      GO TO 190
  185 N= N + 4
  190 IF (KOMSTR(LINE,N,2,'&&',1) .EQ. 0) GO TO 85
      IF (KOMSTR(LINE,N,1,'''',1) .EQ. 0) GO TO 195
      CALL BUILD (LINE,N,DLINE,LDSN,M,JJ,NME,&160,&210,&150)
      GO TO 205
  195 J= N
      N= N + 1
  200 J= J + 1
      IF (J .GT. 72) GO TO 150
      IF (KOMSTR(LINE,J,1,'''',1) .NE. 0) GO TO 200
      CALL STRMOV (' ',1,1,DLINE,1)
      CALL STRMOV (DLINE,1,79,DLINE,1)
      LDSN= J - N
      CALL STRMOV (LINE,N,LDSN,DLINE,1)
  205 IF (LDSN .EQ. 0) GO TO 210
      LL= 1
  210 IF (MM .EQ. 1) GO TO 215
      CALL FINDCH ('DISP=',5,LINE,3,70,N)
      IF (N .EQ. 0) GO TO 215
      CALL BUILD (LINE,N+5,DILNE,LDIS,M,JJ,NME,&160,&215,&150)
      MM= 1
  215 IF (NN .EQ. 1) GO TO 225
      CALL FINDCH ('UNIT=',5,LINE,3,70,N)
      IF (N .EQ. 0) GO TO 225
      M= 0
  220 CALL BUILD (LINE,N+5,ULNE,LA,M,JJ,NME,&160,&220,&150)
      NN= 1
  225 IF (JJ .EQ. 1) GO TO 210
  230 CALL READL (LINE,&240)
      IF (KOMSTR(LINE,3,1,'*',1) .EQ. 0) GO TO 225
      IF (KOMSTR(LINE,1,2,'//',1) .NE. 0) GO TO 150
      CALL FINDCH (' DD ',4,LINE,3,70,LDX)
      IF (LDX .NE. 0) GO TO 245
      CALL FINDCH (' PEND ',6,LINE,3,70,LDX)
      IF (LDX .EQ. 0) GO TO 235
      JEND= 1
      GO TO 245
  235 CALL FINDCH (' EXEC ',6,LINE,3,70,LDX)
      IF (LDX .EQ. 0) GO TO 180
      GO TO 245
  240 NEND= 1
  245 IF (LDSN .EQ. 0) GO TO 250
      IF (NDSN .EQ. 1) GO TO 250
      CALL STRMOV (DLINE,1,44,OLINE,2)
      CALL STRMOV (DSN,1,16,OLINE,48)
      CALL STRMOV (FOUND,1,8,OLINE,66)
      CALL STRMOV (DCBLNE,1,8,OLINE,76)
      CALL STRMOV (SLINE,1,8,OLINE,86)
      CALL STRMOV (CLINE,1,8,OLINE,96)
      CALL STRMOV (DILNE,1,16,OLINE,106)
      CALL STRMOV (ULNE,1,10,OLINE,124)
      CALL UVFW20 (OLINE)
  250 IF (JEND .NE. 1) GO TO 255
      GO TO 55
  255 IF (NEND .EQ. 1) GO TO 55
      GO TO 170
  260 NDSN= 1
      GO TO 230
  265 STOP
      END
      SUBROUTINE BUILD (LINE, LOCI, OUT, LENO, M, JJ, NME, *, *, *)
      REAL*8 LINE(10), OUT(1)
      REAL*8 SYMBN(150), SYMBV(10,150), BLNK/' '/, NME
      INTEGER LCS(150), RP
      COMMON SYMBN, SYMBV, LCS, LXPOS, ISYMB
      IF (M .GT. 0) GO TO 85
      LP= 0
      RP= 0
      LXPOS= 0
      LENO= 1
      DO 5 J=1,10
    5 OUT(J)= BLNK
      L= 1
      J= LOCI
   10 IF (KOMSTR(LINE,J,1,'&',1) .EQ. 0) GO TO 50
      IF (KOMSTR(LINE,J,1,'=',1) .EQ. 0) GO TO 80
      IF (LP .GT. 0) GO TO 15
      IF (KOMSTR(LINE,J,1,' ',1) .EQ. 0) GO TO 80
      IF (KOMSTR(LINE,J,1,',',1) .EQ. 0) GO TO 80
   15 IF (KOMSTR(LINE,J,1,' ',1) .EQ. 0) GO TO 90
   20 CALL STRMOV (LINE,J,1,OUT,L)
   25 IF (KOMSTR(OUT,L,1,'(',1) .NE. 0) GO TO 30
      LP= LP + 1
      GO TO 40
   30 IF (KOMSTR(OUT,L,1,')',1) .NE. 0) GO TO 40
      RP= RP + 1
      IF (RP .NE. LP) GO TO 40
      LENO= L
   35 M= 0
      RETURN
   40 L= L + 1
      IF (L .LT. LENO) GO TO 25
      LENO= L
   45 J= J + 1
      IF (J .EQ. 72) GO TO 80
      GO TO 10
   50 LL= J + 1
      DO 55 LC=LL,71
      IF (KOMSTR(LINE,LC,1,'&',1) .EQ. 0) GO TO 65
      IF (KOMSTR(LINE,LC,1,',',1) .EQ. 0) GO TO 65
      IF (KOMSTR(LINE,LC,1,'.',1) .EQ. 0) GO TO 65
      IF (KOMSTR(LINE,LC,1,' ',1) .EQ. 0) GO TO 65
      IF (KOMSTR(LINE,LC,1,')',1) .EQ. 0) GO TO 65
      IF (KOMSTR(LINE,LC,1,'(',1) .EQ. 0) GO TO 65
   55 CONTINUE
      LC= 72
      GO TO 65
   60 RETURN 1
   65 NME = BLNK
      CALL STRMOV (LINE,LL,LC-LL,NME,1)
      DO 70 N=1,ISYMB
      IF (NME .EQ. SYMBN(N)) GO TO 75
   70 CONTINUE
      GO TO 60
   75 CALL STRMOV (SYMBV(1,N),1,LCS(N),OUT,LENO)
      LENO= LENO + LCS(N)
      LXPOS= N
      J= LC - 1
      IF (KOMSTR(LINE,LC,1,'.',1) .EQ. 0) J= J + 1
      IF (LCS(N) .EQ. 0) GO TO 45
      GO TO 25
   80 LENO= LENO - 1
      GO TO 35
   85 IF (JJ .EQ. 1) GO TO 95
   90 JJ= 1
      M= 1
      RETURN 2
   95 JJ= 0
  100 CALL READL (LINE,&110)
      IF (KOMSTR (LINE,1,2,'//',1) .NE. 0) GO TO 110
      IF (KOMSTR (LINE,3,1,'*',1) .EQ. 0) GO TO 100
      J= 3
  105 J= J + 1
      IF (KOMSTR(LINE,J,1,' ',1) .NE. 0) GO TO 20
      GO TO 105
  110 RETURN 3
      END
//GO.FT20F001  DD  DSN=&&TEMP,DISP=(,PASS),UNIT=DISK,
//  SPACE=(CYL,(10,5),RLSE),DCB=(RECFM=FB,LRECL=133,BLKSIZE=2660)
//X  DD  DSN=*.FTGCLG.SYSLMOD,DISP=(OLD,DELETE)
//SYSUT1   DD   DSN=SYS1.PROCAF,DISP=SHR
//SYSUT2   DD   DSN=SYS1.PROCGR,DISP=SHR
//   EXEC  SORTD
//SORTIN  DD  DSN=&&TEMP,DISP=(OLD,DELETE)
//SORTOUT  DD  DSN=&&TEMP2,DISP=(,PASS),UNIT=DISK,
//  SPACE=(CYL,(10,5),RLSE),DCB=(RECFM=FB,LRECL=133,BLKSIZE=2660)
    SORT  FIELDS=(1,93,CH,A)
//   EXEC   COBCLG
000010 ID DIVISION.
000020 PROGRAM-ID.  JCLCROSP.
       REMARKS.   THIS PROGRAM READS AS INPUT ON //FT10F001
                  A 133 CHARACTER PRINT LINE PRODUCED BY
                  THE JCL DATA SET NAME CROSS-REFERENCE PROGRAM
                  (FORTRAN PROGRAM NAMED JCLCROSS) -
                  INPUT LINES ARE COUNTED AND FORMATTED BY THIS
                  PROGRAM INTO PAGES WITH PAGE HEADINGS AND A
                  REPORT CODE -  PAGES ARE WRITTEN OUT ON //FT20F001 -
                  FORTRAN DDNAME CONVENTIONS ARE USED.
000030 ENVIRONMENT DIVISION.
000040 INPUT-OUTPUT SECTION.
000050 FILE-CONTROL.
000060     SELECT INFIL  ASSIGN UT-S-FT10F001.
000070     SELECT OUTFIL ASSIGN UT-S-FT20F001.
000080 DATA DIVISION.
000090 FILE SECTION.
000100 FD  INFIL  RECORDING MODE F
000110     BLOCK 0 RECORDS  LABEL RECORD STANDARD.
000120 01  INREC.
000140     03  FILLER PIC X(133).
000150 FD  OUTFIL  RECORDING MODE F
000160     BLOCK 0 RECORDS  LABEL RECORD STANDARD.
000170 01  OUTREC    PIC  X(133).
000200 WORKING-STORAGE SECTION.
000210 77  LCNT PIC S9(08) COMP SYNC   VALUE +0.
000220 77  PCNT PIC S9(08) COMP SYNC   VALUE +0.
       01  H-LINE1.
           03    FILLER   PIC X(07)  VALUE ' DI-010'.
           03    FILLER   PIC X(33)  VALUE SPACES.
           03    FILLER   PIC X(18)  VALUE 'JCL DATA SET NAME '.
           03    FILLER   PIC X(20)  VALUE 'CROSS REFERENCE LIST'.
           03    FILLER   PIC X(07)  VALUE SPACES.
           03    H-DATE   PIC X(08).
           03    FILLER   PIC X(27)  VALUE SPACES.
           03    FILLER   PIC X(05)  VALUE 'PAGE '.
           03    P-CONT   PIC ZZZ9.
           03    FILLER   PIC X(04)  VALUE SPACES.
       01  H-LINE2.
           03  FILLER  PIC X(08) VALUE '  DSNAME'.
           03  FILLER  PIC X(41) VALUE SPACES.
           03  FILLER  PIC X(07) VALUE 'PROCLIB'.
           03  FILLER  PIC X(10) VALUE SPACES.
           03  FILLER  PIC X(14) VALUE 'PROC      STEP'.
           03  FILLER  PIC X(22) VALUE '      DDNAME   PROGRAM'.
           03  FILLER  PIC X(08) VALUE '    DISP'.
           03  FILLER  PIC X(18) VALUE '              UNIT'.
           03  FILLER  PIC X(05) VALUE SPACES.
000370 PROCEDURE DIVISION.
000380     OPEN INPUT INFIL  OUTPUT OUTFIL.
           MOVE CURRENT-DATE TO H-DATE.
000470     READ INFIL END GO TO STOP-PROG.
000480     GO TO NEW-PAGE.
000490 GET-REC.   READ INFIL     END GO TO STOP-PROG.
000550            COMPUTE LCNT = LCNT + 1.
000560 INCRMT.    IF LCNT > 53 GO TO NEW-PAGE.
000570            WRITE OUTREC FROM INREC AFTER POSITIONING 1.
000580            GO TO GET-REC.
000590 NEW-PAGE.  MOVE 0 TO LCNT
000600            COMPUTE PCNT = PCNT + 1 MOVE PCNT TO P-CONT
000610            WRITE OUTREC FROM H-LINE1 AFTER POSITIONING 0
                  WRITE OUTREC FROM H-LINE2 AFTER POSITIONING 2
                  MOVE SPACES TO OUTREC
                  WRITE OUTREC AFTER POSITIONING 1
000620            WRITE OUTREC FROM INREC AFTER POSITIONING 1
000630            GO TO GET-REC.
000640 STOP-PROG.  CLOSE INFIL OUTFIL.
000650            GOBACK.
//GO.FT10F001  DD  DSN=&&TEMP2,DISP=(OLD,DELETE)
//FT20F001  DD  SYSOUT=A,DCB=(RECFM=FA,LRECL=133,BLKSIZE=133)
