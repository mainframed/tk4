         MACRO
         REG
R0       EQU   0
R00      EQU   00
R1       EQU   1
R01      EQU   01
R2       EQU   2
R02      EQU   2
R3       EQU   3
R03      EQU   3
R4       EQU   4
R04      EQU   4
R5       EQU   5
R05      EQU   5
R6       EQU   6
R06      EQU   6
R7       EQU   7
R07      EQU   7
R8       EQU   8
R08      EQU   8
R9       EQU   9
R09      EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
         EJECT
         MACRO
&MOD     LNKGE &BASE=12,&SAVE=SAVE,&MF=S
*
*              STANDARD OS/VS LINKAGE
*
&MOD     CSECT
         STM   14,12,12(13)
         AIF   (&BASE EQ 13).BASE13          IS BASE =13..
         AIF   (&BASE EQ 14).ERR1      IF =14 ERROR.
         LR    &BASE,15
         USING &MOD,&BASE  ADDRESSABILITY
         AIF   ('&MF' EQ 'R').RENT
         AIF   ('&MF' NE 'S').ERR2
         LA    14,&SAVE        ADDRESS OF SAVE AREA.
         ST    14,8(13)      STORE ADDRESS OF SAVE IN CALLERS SAVE + 8
         ST    13,&SAVE+4    STORE CALLERS SAVE ADDRESS AT SAVE + 4
         LR    13,14      PUT SAVE ADDRESS IN REG 13
         B     &SAVE+72      BRANCH AROUND SAVE AREA.
         DC    C'VCU',C'&SYSDATE',C'&SYSTIME',CL8'&MOD'
&SAVE    DS    9D
         MEXIT
.RENT    ANOP
         LR    3,1
         GETMAIN R,LV=72               GET SAVE AREA
         ST    13,4(1)                 BACK CHAIN
         SR    2,2                     CLEAR REG2.
         ST    2,8(1)
         ST    1,8(13)                 FORWARD CHAIN
         LR    13,1                    SAVE ADDRESS IN R13
         LR    1,3
         B     *+28                    BRANCH AROUND VERSION ID.
         DC    C'VCU',C'&SYSDATE',C'&SYSTIME',CL8'&MOD'
         MEXIT
.BASE13  USING &MOD,15
         AIF   ('&MF' EQ 'R').ERR3
         ST    15,8(13)     STORE SAVE AREA ADDRESS IN CALLERS SAVE +8
         ST    &BASE,&MOD+4  STORE CALLERS SAVE ADDRESS IN SAVE+4
         LR    &BASE,15     PUT SAVE ADDRESS IN REG 13
         DROP  15
         USING &MOD,13                 PERMANENT ADDRESSABILITY.
         B     *+82                    GO TO NEXT EXECUTABLE CODE.
         DS    CL54      REMAINDER OF SAVE AREA.
         DC    C'VCU',C'&SYSDATE',C'&SYSTIME',CL8'&MOD'
         MEXIT
.ERR1    MNOTE 16,'REGISTER 14 IS AN INVALID BASE REGISTER'
         MEXIT
.ERR2    MNOTE 16,'LINKAGE TYPE INVALID, NEITHER S NOR R SPECIFIED'
         MEXIT
.ERR3    MNOTE 16,'TYPE R SPECIFIED AND BASE=13 INCOMPATIBLE'
         MEXIT
         MEND
         EJECT
         MACRO
&LABEL   $RETURN &RETCODE=0
         AIF   ('&RETCODE'(1,1) LT '0' AND '&RETCODE' NE '(15)').RADDR
&LABEL   L     13,4(13)
         AIF   ('&RETCODE' EQ '(15)').REG15
         LM    14,12,12(13)
         LA    15,&RETCODE.(0,0)
         BR    14
         MEXIT
.RADDR   ANOP
&LABEL   LR    15,&RETCODE
         L     13,4(13)
.REG15   L     14,12(13)
         LM    0,12,20(13)
         BR    14
         MEND
         EJECT
         MACRO
&LABEL   CHECKPT &NUMBER
&LABEL   MVI   CHECKREC,C'&NUMBER'
         OPEN  (CHECKPT,OUTPUT)
         PUT   CHECKPT,CHECKREC
         CLOSE (CHECKPT)
         WTO   'SMF000I SMFDUMP - CHECKPOINT &NUMBER WRITTEN',         X
               ROUTCDE=11
         MEND
         EJECT
         REG
         TITLE 'SMFDUMP - GENERAL SMF DATA COPY ROUTINE'
***********************************************************************
*                                                                     *
*   MODULE - SMFDUMP                                                  *
*                                                                     *
*   FUNCTION -                                                        *
*                                                                     *
*            DUMPS SMF DATA SETS SYS1.MANX AND SYS1.MANY USING        *
*            QCMSMFDP PROGRAM. AND PERFORMS SMF DATA BASE             *
*            UPDATE.                                                  *
*                                                                     *
*            PARM='TYPE=(0-64,121,255),HOLD=78120,BASE=78260'         *
*                                                                     *
*            TYPE= SPECIFIES THE RECORD TYPES TO BE INCLUDED          *
*            INTO SMF DATA BASE. RECORD RANGES AS WELL AS SINGLE      *
*            RECORD TYPES CAN BE SPECIFIED.                           *
*                                                                     *
*            HOLD= SPECIFIES THE STARTING DATE OF RECORDS TO          *
*            BE KEPT IN THE DISK HOLD FILE. IT CAN BE SPECIFIED       *
*            AS A JULIAN DATE OR AS A RELATIVE DATE USING A MINUS     *
*            SIGN WITH 0 BEING TODAY, -1 YESTERDAY ...                *
*            IF HOLD= IS NOT SPECIFIED NO RECORDS WILL BE HELD IN     *
*            HOLD FILE.                                               *
*                                                                     *
*            BASE= SPECIFIES STARTING DATE ON FIRST GENERATION        *
*            OF DATA BASE. THIS MUST BE A JULIAN DATE.                *
*                                                                     *
*   OPERATION -                                                       *
*                                                                     *
*            PARM FIELD IS DECODED AND RECORD TYPE TABLE IS           *
*            SET TO INDICATE ALL RECORD TYPES TO BE COPIED.           *
*            HOLD= AND BASE= DATES ARE CONVERTED AND PLACED           *
*            IN PACKED FORMAT INTO 'HOLDDATE' AND 'BASEDATE'.         *
*            IF TYPE= WAS NOT CODED, ALL RECORD TYPES WILL BE         *
*            SELECTED. IF BASE= WAS NOT SPECIFIED, ABEND.             *
*            IF HOLD= WAS NOT SPECIFIED NO DATA WILL BE HELD          *
*            ON DISK (HOLDDATE IS KEPT AT HIGH VALUE).                *
*                                                                     *
*            THE PROGRAM THEN PERFORMS THE FOLLOWING OPERATIONS       *
*            EACH OF WHICH IS CHECK POINTED:                          *
*                                                                     *
*            1. TAKE CHECKPOINT 1 (START DUMP PHASE)                  *
*                                                                     *
*               DUMP SYS1.MANX AND SYS1.MANY TO DDNAME=DUMPOUT        *
*               (VIA CALL TO QCMSMFDP)                                *
*                                                                     *
*            2. TAKE CHECKPOINT 2 (END DUMP PHASE, START BACKUP PHASE)*
*                                                                     *
*               A. COPY PHASE                                         *
*                  COPY DDNAME=DUMPOUT THEN DDNAME=HOLD TO            *
*                  DDNAME=SORTIN                                      *
*                                                                     *
*               B. SORT PHASE                                         *
*                  SORT DDNAME=SORTIN TO DDNAME=SORTOUT IN            *
*                  DATE, TIME AND RECORD TYPE SEQUENCE                *
*                  (VIA CALL TO SORT)                                 *
*                                                                     *
*               C. MERGE PHASE                                        *
*                  MERGE CURRENT DATA BASE GENERATION (DDNAME=BASEZERO*
*                  AND DDNAME=SORTOUT TO DDNAME=BASEBKUP. THROWS      *
*                  OUT DUPLICATE RECORDS.                             *
*                                                                     *
*            3. TAKE CHECKPOINT 3 (END BACKUP PHASE, START REWRITE)   *
*                                                                     *
*               COPY DDNAME=BASEBKUP TO CURRENT DATA BASE GENERATION  *
*               (DDNAME=BASEZERO), UNTIL:LAST DAY FOR GENERATION IS   *
*               COPIED OR UNTIL ALL DATA UPTO 'HOLDDATE' IS COPIED.   *
*                                                                     *
*               A. LAST DAY FOR GENERATION IS COPIED                  *
*                  IN THIS CASE DDNAME=BASEZERO IS CLOSED AND STEP    *
*                  4 IS STARTED                                       *
*                                                                     *
*               B. ALL DATA UPTO HOLD DATE IS COPIED                  *
*                  IN THIS CASE DDNAME=BASEZERO IS CLOSED AND STEP    *
*                  5 IS STARTED                                       *
*                                                                     *
*               C. BASEBKUP REACHES END-OF-FILE                       *
*                  IN THIS CASE DDNAME=BASEBKUP AND DDNAME=BASEZERO   *
*                  ARE CLOSED.                                        *
*                  DDNAME=HOLD IS OPENED AND CLOSED (EMPTY)           *
*                                                                     *
*            4. TAKE CHECKPOINT 4 (END REWRITE PHASE, START NEWGEN)   *
*                                                                     *
*               ALLOCATE NEW GENERATION FOR DATA BASE (DDNAME=BASENEW)*
*               (VIA CALL TO DYNAMIC ALLOCATION)                      *
*               COPY DDNAME=BASEBKUP TO DDNAME=BASENEW UNTIL:         *
*                                                                     *
*               A.  LAST DAY FOR NEW GENERATION IS COPIED.            *
*                   IN THIS CASE DDNAME=BASENEW IS CLOSED AND         *
*                   UNALLOCATED (CATALOGING NEW GENERATION).          *
*                   CHECKPOINT RECORD IS UPDATED WITH NEW GENERATION  *
*                   NUMBER AND STEP 4 IS REPEATED.                    *
*                                                                     *
*               B.  ALL DATA UPTO HOLDDATE HAS BEEN COPIED.           *
*                   IN THIS CASE DDNAME=BASENEW IS CLOSED AND         *
*                   UNALLOCATED (CATALOGING NEW GENERATION).          *
*                   CHECKPOINT RECORD IS UPDATED WITH NEW GENERATION  *
*                   NUMBER AND STEP 5 IS STARTED.                     *
*                                                                     *
*               C.  BASEBKUP REACHES END-OF-FILE.                     *
*                   IN THIS CASE DDNAME=BASEBKUP AND DDNAME=BASENEW   *
*                   ARE CLOSED . DDNAME=BASENEW IS                    *
*                   UNALLOCATED (CATALOGING NEW GENERATION).          *
*                   CHECKPOINT RECORD IS UPDATED WITH NEW GENERATION  *
*                   NUMBER.                                           *
*                   HOLD FILE IS CLOSED (EMPTY) AND STEP 6 IS STARTED.*
*                                                                     *
*            5. TAKE CHECKPOINT 5 (END NEWGEN PHASE, START HOLD PHASE)*
*                                                                     *
*               ALL REMAINING DATA FROM DDNAME=BASEBKUP IS COPIED     *
*               TO DDNAME=HOLD AND BOTH FILES ARE CLOSED.             *
*                                                                     *
*            6. TAKE CHECKPOINT 0 (DUMP COMPLETED SUCCESSFULLY)       *
*                                                                     *
*   AUTHOR - M.PELT                                                   *
*                                                                     *
*   DATE WRITTEN - 12/28/78                                           *
*                                                                     *
*   MACROS - STANDARD                                                 *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         PRINT NOGEN
SMFDUMP  LNKGE BASE=12
         LA    R11,4095(R12)       SET UP SECOND BASE REGISTER
         LA    R11,1(R11)
         USING SMFDUMP+4096,R11
         L     R2,0(R1)            SAVE PARM ADDRESS
         ST    R2,PARMAD           KEEP FOR LATER
         TIME ,
         STCM  R1,B'0111',RUNDATE
         ZAP   DECW(8),RUNDATE(3)
         BAL   R14,COMPDAYS
         ST    R1,RUNDAYS
         MVC   RUNDATE2(3),RUNDATE
         SP    RUNDATE2(3),=PL3'1000'  DECREMENT YEAR COUNT
         AP    RUNDATE2(3),=PL3'365'   INCREMENT DAY COUNT
         XC    DECW(8),DECW
         MVC   DECW+5(3),RUNDATE
         DP    DECW(8),=PL3'1000'      GET YEAR COUNT AS QUOTIENT
         DP    DECW(5),=PL1'4'         CHECK FOR LEAP YEAR
         CP    DECW+4(1),=PL1'0'       ZERO REMAINDER MEANS LEAP YEAR
         BNE   NOTLEAP
         AP    RUNDATE2(3),=PL1'1'     ADD ONE DAY FOR LEAP YEAR
NOTLEAP  L     R2,PARMAD
         LH    R3,0(R2)            GET PARM LENGTH
         LTR   R3,R3               TEST FOR ZERO LENGTH
         BZ    ENDPARM             NOT ZERO - HAVE A PARM FIELD
         LA    R3,2(R2)            FIRST CHARACTER OF PARM FIELD
CHEKPARM CLC   0(6,R3),=C'TYPE=('  IS IT TYPE= ?
         BE    TYPE
         CLC   0(5,R3),=C'HOLD='   IS IT HOLD= ?
         BE    HOLDD
         CLC   0(5,R3),=C'BASE='   IS IT BASE= ?
         BE    BASE
INVPARM  WTO   'SMF101I SMFDUMP - INVALID PARM FIELD',ROUTCDE=11
         ABEND 101
NEXTPARM L     R2,PARMAD           GET PARMF FIELD ADDRESS
         LH    R4,0(R2)            LENGTH OF PARM FIELD
         LA    R4,2(R2,R4)         FIRST CHAR AFTER PARM FIELD
         CR    R3,R4               CHECK WITH SCAN COLUMN POINTER
         BNL   ENDPARM             SCANNED TO END OF PARM
         CLI   0(R3),C','          CHECK FOR COMMA
         BNE   INVPARM             NOPE - INVALID PARM FIELD
         LA    R3,1(R3)            BUMP OVER COMMA
         B     CHEKPARM            GO CHECK KEYWORD
         EJECT
***********************************************************************
*                                                                     *
*   DECODE TYPE= PARAMETERS                                           *
*                                                                     *
***********************************************************************
TYPE     LA    R3,6(R3)            FIRST RECORD NUMBER
         MVI   TYPESPEC,X'FF'      SET TYPE= SWITCH
TYPE1    BAL   R14,DECNUM          CONVERT FIRST NUMBER
         C     R4,=F'256'          MAKE SURE ITS LESS THAN 256
         BH    INVPARM             ELSE INVALID PARM FIELD
         CLI   0(R3),C','          IS IT A SINGLE RECORD TYPE ?
         BE    TYPESING            YIP - GO UPDATE RECTYPTB
         CLI   0(R3),C')'          IS IT A SINGLE RECORD TYPE ?
         BE    TYPESING            YIP - GO UPDATE RECTYPTB
         CLI   0(R3),C'-'          IS IT A RECORD RANGE ?
         BNE   INVPARM             NO - WHAT THE HELL IS IT ?
         EJECT
***********************************************************************
*                                                                     *
*   TYPERANG: DECODE RECORD RANGES (E.G. TYPE=(64-76,...)             *
*                                                                     *
***********************************************************************
TYPERANG LA    R3,1(R3)            SKIP OVER DASH
         LR    R5,R4               SAVE FIRST RECORD NUMBER OF RANGE
         BAL   R14,DECNUM          CONVERT SECOND NUMBER
         C     R4,=F'256'          CHECK IF LESS THAN 256
         BH    INVPARM             ELSE INVALID PARM FIELD
         CR    R5,R4               CHECK FOR VALID RANGE
         BH    INVPARM             FIRST RECORD NUMBER GREATER THAN 2ND
         SR    R4,R5               DETERMINE NUMBER OF RECORDS
         LA    R4,1(R4)            IN RANGE
         LA    R5,RECTYPTB(R5)     RECTYPTB ENTRY FOR FIRST RECORD
NXTENTRY CLI   0(R5),C' '          WAS RECORD NUMBER ALREADY SPECIFIED?
         BNE   INVPARM             YIP - INVALID PARM FIELD
         MVI   0(R5),C'*'          SET RECORD ENTRY
         LA    R5,1(R5)            BUMP TO NEXT ENTRY
         BCT   R4,NXTENTRY         AND TRY AGAIN
         B     TYPENEXT            AND SEE IF WE GOT MORE RECORD TYPES
         SPACE 3
***********************************************************************
*                                                                     *
*   TYPESING: DECODE SINGLE RECORD NUMBERS (E.G. TYPE=(5,...)         *
*                                                                     *
***********************************************************************
TYPESING LA    R5,RECTYPTB(R4)     RECORD TYPE ENTRY
         LA    R4,1                UPDATE JUST ONE ENTRY
         B     NXTENTRY
         EJECT
***********************************************************************
*                                                                     *
*   TYPENEXT: CHECK IF MORE RECORD TYPES TO GO                        *
*                                                                     *
***********************************************************************
TYPENEXT CLI   0(R3),C')'          END OF TYPE=(...) ?
         BE    TYPEND              YIP - GO CHECK FOR DATE
         CLI   0(R3),C','          MORE TO GO ?
         BNE   INVPARM             NO - INVALID PARM
         LA    R3,1(R3)            SKIP OVER COMMA
         BE    TYPE1               DECODE NEXT OPERAND
TYPEND   LA    R3,1(R3)            SKIP OVER ')'
         B     NEXTPARM            GO CHECK FOR MORE KEYWORDS
         EJECT
***********************************************************************
*                                                                     *
*   HOLD: DECODE HOLD= PARAMETERS                                     *
*                                                                     *
***********************************************************************
HOLDD    LA    R3,5(R3)            BUMP OVER HOLD=
         CLI   0(R3),C'-'          IS IT A RELATIVE DATE ?
         BNE   NOTMIN              NO - GO CONVERT JULIAN DATE
         LA    R3,1(R3)            BUMP OVER MINUS SIGN
         BAL   R14,DECNUM          GO CONVERT RELATIVE DATE
ZERO     MVC   HOLDDATE(3),RUNDATE STORE CURRENT DATE
         CVD   R4,DECW
         CP    HOLDDATE+1(2),DECW+6(2) WOULD SUBTRACT CHANGE YEARS ?
         BNL   SP                  NO - USE RUNDATE
         MVC   HOLDDATE(3),RUNDATE2 YIP - USE ADJUSTED RUN DATE
SP       SP    HOLDDATE(3),DECW(8) SUBTRACT RELATIVE DATE
         B     NEXTPARM
NOTMIN   BAL   R14,DECNUM          CONVERT FIRST DATE
         C     R4,=F'99999'        CHECK IF WITHIN RANGE
         BH    INVPARM
         LTR   R4,R4               CHECK IF ZERO DATE ?
         BZ    ZERO                YIP - USE RELATIVE DATE
         C     R4,=F'10000'
         BL    INVPARM
         CVD   R4,DECW             CONVERT DATE TO PACKED DECIMAL
         MVC   HOLDDATE(3),DECW+5  MOVE TO SELECTION DATE
         B     NEXTPARM
         EJECT
***********************************************************************
*                                                                     *
*   BASE: DECODE BASE= PARAMETER                                      *
*                                                                     *
***********************************************************************
BASE     LA    R3,5(R3)            SKIP OVER BASE=
         BAL   R14,DECNUM          CONVERT JULIAN DATE
         C     R4,=F'99999'        CHECK WITHIN 5 DIGIT RANGE
         BH    INVPARM             NO - INVALID BASE= PARM
         C     R4,=F'10000'
         BL    INVPARM
         CVD   R4,DECW             CONVERT BASE DATE TO JULIAN
         MVC   BASEDATE(3),DECW+5  SAVE DATE
         BAL   R14,COMPDAYS        COMPUTE DAYS SINCE JAN 1,1900
         ST    R1,BASEDAYS
         MVI   BASESPEC,X'FF'      INDICATE BASE= SPECIFIED
         B     NEXTPARM            GO CHECK FOR OTHER PARMS
         EJECT
***********************************************************************
*                                                                     *
*   ENDPARM: CHECK IF TYPE= WAS SPECIFIED, ELSE SET RECTYPTB          *
*                                                                     *
***********************************************************************
ENDPARM  GETMAIN R,LV=32768        GET SMF RECORD AREA
         ST    R1,RECAD            SAVE RECORD ADDRESS
         GETMAIN R,LV=32768        GET SMF RECORD AREA
         ST    R1,RECAD2
         ZAP   DECW(8),HOLDDATE(3) CONVERT TO NUMBER OF DAYS SINCE
         BAL   R14,COMPDAYS        JANUARY 1, 1900             M
         ST    R1,HOLDDAYS
         CLI   TYPESPEC,X'FF'      WAS TYPE= SPECIFIED ?
         BE    READCHEK            YIP - GO READ CHECKPOINT
         MVI   RECTYPTB,C'*'       SELECT ALL RECORD TYPES
         MVC   RECTYPTB+1(255),RECTYPTB
         EJECT
***********************************************************************
*                                                                     *
*   READCHEK: GET CHECKPOINT RECORD                                   *
*                                                                     *
***********************************************************************
READCHEK OPEN  (CHECKPT,INPUT)
         TM    CHECKPT+48,X'10'
         BO    CHEKPTOK
         WTO   'SMF102I SMFDUMP - OPEN FAILED FOR DDNAME=CHECKPT',     X
               ROUTCDE=11
         ABEND 102,DUMP
CHEKPTOK GET   CHECKPT,CHECKREC
         CLOSE (CHECKPT)
         RDJFCB (BASEZERO)
         LTR   R15,R15
         BZ    RDJFCBOK
         WTO   'SMF100I SMFDUMP - RDJFCB FAILED FOR DDNAME=BASEZERO',  X
               ROUTCDE=11
         ABEND 100,DUMP
RDJFCBOK CLI   CHECKREC,C'0'
         BE    SETUP
         EJECT
***********************************************************************
*                                                                     *
*   RECOVERY NEEDED                                                   *
*                                                                     *
***********************************************************************
         MVC   RECVRWTO+46(1),CHECKREC
RECVRWTO WTO   'SMF000I SMFDUMP - LAST CHECKPOINT WAS X',              X
               ROUTCDE=11
         MVC   CHECKDAT(3),RUNDATE
         MVC   HOLDDATE(3),CHECKHLD
         MVC   BASEDATE(3),CHECKBAS
         ZAP   DECW(8),HOLDDATE
         BAL   R14,COMPDAYS
         ST    R1,HOLDDAYS
         ZAP   DECW(8),BASEDATE
         BAL   R14,COMPDAYS
         ST    R1,BASEDAYS
         CLC   JFCB(44),CHECKDSN
         BE    R1SYNC
         WTO   'SMF990I SMFDUMP - CHECKPT OUT OF SYNC WITH BASEZERO',  X
               ROUTCDE=11
         ABEND 990,DUMP
R1SYNC   LA    R1,CHECKDSN
R1FNDQAL CLC   0(3,R1),=C'.G0'
         BE    R1HAVQAL
         LA    R1,1(R1)
         B     R1FNDQAL
R1HAVQAL ST    R1,QUALAD
         CLI   CHECKREC,C'1'
         BNE   TRY2
         LA    R1,R1EODDMP
         STCM  R1,B'0111',DUMPOUT+EODAD
         OPEN  (DUMPOUT,INPUT)
         TM    DUMPOUT+48,X'10'
         BO    R1DMPOK
         WTO   'SMF991I SMFDUMP - OPEN FAILED FOR DDNAME=DUMPOUT',     X
               ROUTCDE=11
         ABEND 991,DUMP
R1DMPOK  L     R10,RECAD
R1GETDMP GET   DUMPOUT,(R10)
         CLI   SMFTYPE(R10),3
         BNE   R1GETDMP
         LA    R4,1(R4)
         B     R1GETDMP
R1EODDMP CLOSE (DUMPOUT)
         LTR   R4,R4
         BZ    CHECKPT1
         ST    R4,TYPE3CNT
         B     P2COPY
         EJECT
TRY2     CLI   CHECKREC,C'2'
         BE    CHECKPT2
         CLI   CHECKREC,C'3'
         BE    CHECKPT3
         CLI   CHECKREC,C'4'
         BNE   TRY5
         OPEN  (BASEBKUP,INPUT)
         TM    BASEBKUP+48,X'10'
         BO    R4BKPOK
         WTO   'SMF992I SMFDUMP - OPEN FAILED DDNAME=BASEBKUP',        X
               ROUTCDE=11
         ABEND 992,DUMP
R4BKPOK  L     R10,RECAD
         MVC   0(4,R10),=F'0'
         B     CHECKPT4
TRY5     CLI   CHECKREC,C'5'
         BNE   BADCHKPT
         OPEN  (BASEBKUP,INPUT)
         TM    BASEBKUP+48,X'10'
         BO    R5BKPOK
         WTO   'SMF993I SMFDUMP - OPEN FAILED DDNAME=BASEBKUP',        X
               ROUTCDE=11
         ABEND 993,DUMP
R5BKPOK  L     R10,RECAD
         MVC   0(4,R10),=F'0'
         B    CHECKPT5
BADCHKPT WTO   'SMF999I SMFDUMP - BAD CHECKPOINT RECORD',ROUTCDE=11
         ABEND 999,DUMP
         EJECT
***********************************************************************
*                                                                     *
*   SET UP NEW CHECK POINT RECORD FOR THIS RUN                        *
*                                                                     *
***********************************************************************
SETUP    MVC   CHECKDAT(3),RUNDATE
         MVC   CHECKHLD(3),HOLDDATE
         MVC   CHECKDSN(44),JFCB
         CLI   BASESPEC,X'FF'
         BNE   NOBASPRM
         CLC   CHECKBAS(3),=C'   '
         BE    MOVEBASE
         CLC   CHECKBAS(3),BASEDATE
         BE    BASPRMOK
         WTO   'SMF777I BASE= KEYWORD NOT ALLOWED',ROUTCDE=11
         ABEND 777,DUMP
NOBASPRM CLC   CHECKBAS(3),=C'   '
         BNE   BASPRMOK
         WTO   'SMF888I BASE= KEYWORD REQUIRED',ROUTCDE=11
         ABEND 888,DUMP
MOVEBASE MVC   CHECKBAS(3),BASEDATE
BASPRMOK LA    R1,CHECKDSN
FINDQUAL CLC   0(3,R1),=C'.G0'
         BE    HAVEQUAL
         LA    R1,1(R1)
         B     FINDQUAL
HAVEQUAL ST    R1,QUALAD
         XC    DECW(8),DECW
         PACK  DECW+5(3),2(4,R1)
         CVB   R1,DECW
         ST    R1,CHECKGEN
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPT1: START DUMP PHASE                                        *
*                                                                     *
***********************************************************************
CHECKPT1 CHECKPT 1
         SPACE 3
         LINK  EP=QCMSMFDP,PARAM=DUMMYPRM
         LTR   R15,R15
         BZ    CHECKPT2
         WTO   'SMF103I SMFDUMP - NONZERO RETURN CODE FROM QCMSMFDP',  X
               ROUTCDE=11
         ABEND 103,DUMP
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPT2: END DUMP PHASE , START COPY PHASE                       *
*                                                                     *
***********************************************************************
CHECKPT2 CHECKPT 2
         SPACE 3
P2COPY   LA    R2,P2EODHLD
         STCM  R2,B'0111',HOLD+EODAD
         OPEN  (HOLD,INPUT,SORTIN,OUTPUT)
         TM    HOLD+48,X'10'
         BO    P2HLDOK
         WTO   'SMF104I SMFDUMP - OPEN FAILED FOR DDNAME=HOLD',        X
               ROUTCDE=11
         ABEND 104,DUMP
P2HLDOK  TM    SORTIN+48,X'10'
         BO    P2SINOK
         WTO   'SMF105I SMFDUMP - OPEN FAILED FOR DDNAME=SORTIN',      X
               ROUTCDE=11
         ABEND 105,DUMP
P2SINOK  EQU   *
         EJECT
***********************************************************************
*                                                                     *
*              COPY HOLD TO SORTIN                                    *
*                                                                     *
***********************************************************************
P2COPHLD L     R10,RECAD
         GET   HOLD,(R10)
         PUT   SORTIN,(R10)
         B     P2COPHLD
P2EODHLD CLOSE (HOLD)
         SPACE 3
***********************************************************************
*                                                                     *
*              COPY DUMPOUT TO SORTIN                                 *
*                                                                     *
***********************************************************************
         LA    R1,P2EODDMP
         STCM  R1,B'0111',DUMPOUT+EODAD
         OPEN  (DUMPOUT,INPUT)
         TM    DUMPOUT+48,X'10'
         BO    P2DMPOK
         WTO   'SMF106I SMFDUMP - OPEN FAILED FOR DDNAME=DUMPOUT',     X
               ROUTCDE=11
         ABEND 106,DUMP
P2DMPOK  L     R4,TYPE3CNT
P2COPDMP L     R10,RECAD
         GET   DUMPOUT,(R10)
         LA    R3,0
         IC    R3,SMFTYPE(R10)
         LA    R3,RECTYPTB(R3)
         CLI   0(R3),C'*'
         BNE   P2SKPPUT
         PUT   SORTIN,(R10)
P2SKPPUT CLI   SMFTYPE(R10),3
         BNE   P2COPDMP
         BCT   R4,P2COPDMP
P2EODDMP CLOSE (DUMPOUT,,SORTIN)
         EJECT
***********************************************************************
*                                                                     *
*   SORT PHASE : CALL SORT TO COPY FROM SORTIN TO SORTOUT             *
*                                                                     *
***********************************************************************
         LINK  EP=SORT,PARAM=DUMMYPRM
         LTR   R15,R15
         BZ    P2SORTOK
         WTO   'SMF107I SMFDUMP - NONZERO RETURN CODE FROM SORT',      X
               ROUTCDE=11
         ABEND 107,DUMP
P2SORTOK EQU   *
         SPACE 3
***********************************************************************
*                                                                     *
*   MERGE PHASE: MERGE CURRENT GENERATION (DDNAME=BASEZERO)           *
*                WITH DDNAME=SORTOUT TO DDNAME=BASEBKUP               *
*                                                                     *
***********************************************************************
         LA    R1,P2EODBAS
         STCM  R1,B'0111',BASEZERO+EODAD
         LA    R1,P2EODSRT
         STCM  R1,B'0111',SORTOUT+EODAD
         OPEN  (BASEZERO,INPUT,SORTOUT,INPUT,BASEBKUP,OUTPUT)
         TM    BASEZERO+48,X'10'
         BO    P2BASOK
         WTO   'SMF108I SMFDUMP - OPEN FAILED FOR DDNAME=BASEZERO',    X
               ROUTCDE=11
         ABEND 108,DUMP
P2BASOK  TM    SORTOUT+48,X'10'
         BO    P2SOTOK
         WTO   'SMF109I SMFDUMP - OPEN FAILED FOR DDNAME=SORTOUT',     X
               ROUTCDE=11
         ABEND 109,DUMP
P2SOTOK  TM    BASEBKUP+48,X'10'
         BO    P2BKPOK
         WTO   'SMF110I SMFDUMP - OPEN FAILED FOR DDNAME=BASEBKUP',    X
               ROUTCDE=11
         ABEND 110,DUMP
         EJECT
P2BKPOK  L     R10,RECAD
         L     R9,RECAD2
P2RESET  MVC   0(4,R9),=F'0'
         MVC   0(4,R10),=F'0'
         GET   BASEZERO,(R10)
         GET   SORTOUT,(R9)
P2COMPAR CP    SMFDATE(3,R10),SMFDATE(3,R9)
         BL    P2COPBAS
         BH    P2COPSRT
         CLC   SMFTIME(4,R10),SMFTIME(R9)
         BL    P2COPBAS
         BH    P2COPSRT
         CLC   SMFTYPE(1,R10),SMFTYPE(R9)
         BL    P2COPBAS
         BH    P2COPSRT
         PUT   BASEBKUP,(R10)
         B     P2RESET
         SPACE 3
P2COPBAS PUT   BASEBKUP,(R10)
         GET   BASEZERO,(R10)
         B     P2COMPAR
         SPACE 1
P2COPSRT PUT   BASEBKUP,(R9)
         GET   SORTOUT,(R9)
         B     P2COMPAR
         EJECT
P2EODBAS CLOSE (BASEZERO)
         CLC   0(4,R9),=F'-1'
         BE    P2END
         MVC   0(4,R10),=F'-1'
         CLC   0(4,R9),=F'0'
         BE    P2GETSRT
P2PUTSRT PUT   BASEBKUP,(R9)
P2GETSRT GET   SORTOUT,(R9)
         B     P2PUTSRT
         SPACE 3
P2EODSRT CLOSE (SORTOUT)
         CLC   0(4,R10),=F'-1'
         BE    P2END
         MVC   0(4,R9),=F'-1'
         CLC   0(4,R10),=F'0'
         BE    P2GETBAS
P2PUTBAS PUT   BASEBKUP,(R10)
P2GETBAS GET   BASEZERO,(R10)
         B     P2PUTBAS
         SPACE 3
P2END    CLOSE (BASEBKUP)
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPT3: END MERGE PHASE, START REWRITE PHASE                    *
*                                                                     *
***********************************************************************
CHECKPT3 CHECKPT 3
         SPACE 3
         LA    R1,P3EODBKP
         STCM  R1,B'0111',BASEBKUP+EODAD
         OPEN  (BASEBKUP,INPUT,BASEZERO,OUTPUT)
         L     R5,CHECKGEN
         M     R4,INTERVAL
         A     R5,BASEDAYS
         BCTR  R5,0
         ST    R5,SEL2DAYS
         S     R5,INTERVAL
         LA    R5,1(R5)
         ST    R5,SEL1DAYS
P3GETBKP L     R10,RECAD
         GET   BASEBKUP,(R10)
         ZAP   DECW(8),SMFDATE(3,R10)
         BAL   R14,COMPDAYS
         C     R1,HOLDDAYS
         BNL   P3HLDHIT
         C     R1,SEL1DAYS
         BL    P3GETBKP
         C     R1,SEL2DAYS
         BH    P3END
         PUT   BASEZERO,(R10)
         B     P3GETBKP
         SPACE 2
P3EODBKP CLOSE (BASEZERO,,BASEBKUP)
         OPEN  (HOLD,OUTPUT)
         CLOSE (HOLD)
         B     CHECKPT0
P3HLDHIT CLOSE (BASEZERO)
         B     CHECKPT5
P3END    CLOSE (BASEZERO)
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPT4: END REWRITE PHASE , START NEWGEN PHASE                  *
*                                                                     *
***********************************************************************
CHECKPT4 CHECKPT 4
         L     R4,CHECKGEN
         LA    R4,1(R4)
         ST    R4,CHECKGEN
         L     R1,QUALAD
         MVC   0(9,R1),=X'F02120202020E5F0F0'
         CVD   R4,DECW    . G 0 0 0 0 V 0 0
         ED    0(6,R1),DECW+5
         MVC   0(2,R1),=C'.G'
         MVC   DALDSNAM+6(44),CHECKDSN
         LA    R1,9(R1)
         S     R1,=A(CHECKDSN)
         STCM  R1,B'0011',DALDSNAM+4
         LA    R1,S99TUPL1
         ST    R1,S99TXTPP
         MVI   S99VERB,X'01'
         LA    R1,S99RBPTR
         DYNALLOC
         LTR   R15,R15
         BZ    P4ALLCOK
         WTO   'SMF111I SMFDUMP - NONZERO RETURN CODE FROM DYNAMIC ALLOX
               CATION',ROUTCDE=11
         ABEND 111,DUMP
P4ALLCOK OPEN  (BASENEW,OUTPUT)
         TM    BASENEW+48,X'10'
         BO    P4NEWOK
         WTO   'SMF112I SMFDUMP - OPEN FAILED FOR DDNAME=BASENEW',     X
               ROUTCDE=11
         ABEND 112,DUMP
P4NEWOK  L     R5,CHECKGEN
         M     R4,INTERVAL
         A     R5,BASEDAYS
         BCTR  R5,0
         ST    R5,SEL2DAYS
         S     R5,INTERVAL
         LA    R5,1(R5)
         ST    R5,SEL1DAYS
         L     R10,RECAD
         LA    R1,P4EODBKP
         STCM  R1,B'0111',BASEBKUP+EODAD
         CLC   0(4,R10),=F'0'
         BNE   P4CHKDAT
P4GETBKP GET   BASEBKUP,(R10)
P4CHKDAT ZAP   DECW(8),SMFDATE(3,R10)
         BAL   R14,COMPDAYS
         C     R1,HOLDDAYS
         BNL   P4HLDHIT
         C     R1,SEL1DAYS
         BL    P4GETBKP
         C     R1,SEL2DAYS
         BH    P4END
         PUT   BASENEW,(R10)
         B     P4GETBKP
         SPACE 2
P4EODBKP CLOSE (BASENEW,,BASEBKUP)
         BAL   R10,UNALLOC
         OPEN  (HOLD,OUTPUT)
         CLOSE (HOLD)
         B     CHECKPT0
P4END    CLOSE (BASENEW)
         BAL   R10,UNALLOC
         B     CHECKPT4
P4HLDHIT CLOSE (BASENEW)
         BAL   R10,UNALLOC
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPT5: END NEWGEN PHASE , START HOLD PHASE                     *
*                                                                     *
***********************************************************************
CHECKPT5 CHECKPT 5
         SPACE 3
         L     R10,RECAD
         LA    R1,P5EODBKP
         STCM  R1,B'0111',BASEBKUP+EODAD
         OPEN  (HOLD,OUTPUT)
         TM    HOLD+48,X'10'
         BO    P5HLDOK
         WTO   'SMF114I SMFDUMP - OPEN FAILED FOR DDNAME=HOLD',        X
               ROUTCDE=11
         ABEND 114,DUMP
P5HLDOK  CLC   0(4,R10),=F'0'
         BE    P5GETBKP
P5PUTHLD PUT   HOLD,(R10)
P5GETBKP GET   BASEBKUP,(R10)
         B     P5PUTHLD
         SPACE 2
P5EODBKP CLOSE (HOLD,,BASEBKUP)
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPT0: SUCCESSFULL COMPLETION                                  *
*                                                                     *
***********************************************************************
CHECKPT0 OPEN  (DUMPOUT,OUTPUT)
         CLOSE (DUMPOUT)
         CHECKPT 0
         $RETURN
         EJECT
**************************************************************A12/21/78
*                                                                     *
*   UNALLOC: UNALLOCATE DDNAME BASENEW                                *
*                                                                     *
***********************************************************************
UNALLOC  LA    R2,S99TUPL2
         ST    R2,S99TXTPP
         MVI   S99VERB,X'02'
         LA    R1,S99RBPTR
         DYNALLOC
         LTR   R15,R15
         BZR   R10
         WTO   'SMF113I SMFDUMP - NONZERO RETURN CODE FROM DYNAMIC UNALX
               LOCATION',ROUTCDE=11
         ABEND 113,DUMP
         EJECT
***********************************************************************
*                                                                     *
*   DECNUM: CONVERTS EBCDIC INTEGER TO BINARY                         *
*                                                                     *
*           INPUT:  R3 POINTS TO FIRST DIGIT OF INTEGER               *
*                   R14 RETURN ADDRESS TO CALLER                      *
*                                                                     *
*           OUTPUT: R3 POINTS TO FIRST NON-NUMERIC CHARACTER          *
*                   R4 CONTAINS VALUE IN BINARY                       *
*                   R0,R1 AND R2 ARE CLOBBERED                        *
*                                                                     *
***********************************************************************
DECNUM   CLI   0(R3),C'0'          FIRST CHARACTER NUMERIC ?
         BL    INVPARM             NO - INVALID PARM FIELD
         LA    R4,0                SET UP REGISTERS FOR CONVERSION
         L     R2,PARMAD           GET ADDRESS OF PARM FIELD  A12/21/78
         LH    R1,0(R2)            GET PARM LENGTH            A12/21/78
         LA    R1,2(R1,R2)         COMPUTE END ADDRESS        A12/21/78
         LA    R0,0                                           C12/21/78
NXTDIGIT IC    R0,0(R3)            PICK UP NEXT DIGIT         C12/21/78
         SLL   R0,28               SHIFT OUT ZONE X'FX'       C12/21/78
         SRL   R0,28               SHIFT BACK                 C12/21/78
         MH    R4,=H'10'           10 TIMES CURRENT TOTAL
         AR    R4,R0               PLUS THIS DIGIT
         LA    R3,1(R3)            BUMP TO NEXT DIGIT
         CR    R3,R1               CHECK IF END OF PARM       A12/21/78
         BNLR  R14                 YIP - RETURN TO CALLER     A12/21/78
         CLI   0(R3),C'0'          NO - CHECK IF STILL NUMERIC
         BNL   NXTDIGIT            YIP - GO DO SOME MORE
         BR    R14                 NO - RETURN TO CALLER
         EJECT
**************************************************************A12/21/78
*                                                                     *
*   COMPDAYS: COMPUTE DAYS SINCE JANUARY 1,1900 AND DATE IN DECW      *
*                                                                     *
***********************************************************************
COMPDAYS STM   R2,R3,28(R13)       SAVE REGISTERS
         CVB   R1,DECW             CONVERT DATE TO BINARY
         LA    R0,0                CLEAR FOR DIVIDE
         D     R0,=F'1000'         SPLIT DAYS AND YEAR
         LR    R3,R0               SAVE DAYS THIS YEAR
         LR    R2,R1               SAVE YEARS MINUS ONE
         M     R0,=F'365'          365 DAYS PER YEAR
         BCTR  R2,0                YEARS MINUS ONE          FJP/06MAY80
         SRA   R2,2                DIVIDED BY 4 EQUALS
*                                  NUMBER OF LEAP DAYS
         AR    R1,R2               ADD 365 * (YEARS-1) +
         AR    R1,R3               LEAP DAYS + DAYS THIS YEAR
         LM    R2,R3,28(R13)       RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   DATA AREAS AND CONSTANTS                                          *
*                                                                     *
***********************************************************************
DECW     DS    D
SELDATE1 DC    PL3'0'              SELECTION DATE START
SELDATE2 DC    PL3'99999'          SELECTION DATE END
BASEDATE DC    PL3'0'              BASE DATE
RUNDATE  DC    PL3'0'              TODAY'S DATE
RUNDATE2 DC    PL3'0'              TODAY'S DATE (ADJUSTED)
HOLDDATE DC    PL3'99999'          HOLD DATE
SEL1DAYS DC    F'0'                DAYS BETWEEN JAN 1,1900 AND SELECT
SEL2DAYS DC    F'0'                DAYS BETWEEN JAN 1,1900 AND SELECT
BASEDAYS DC    F'0'                DAYS BETWEEN JAN 1,1900 AND BASE
RUNDAYS  DC    F'0'                DAYS BETWEEN JAN 1,1900 AND TODAY
HOLDDAYS DC    F'0'                DAYS BETWEEN JAN 1,1900 AND HOLD
PARMAD   DC    F'0'                ADDRESS OF PARMFIELD
RECAD    DC    F'0'                ADDRESS OF GETMAIN RECORD AREA
RECAD2   DC    F'0'                ADDRESS OF GETMAIN RECORD AREA
QUALAD   DC    F'0'                ADDRESS OF DSNAME QUALIFIER
INTERVAL DC    F'7'                DAYS PER GENERATION
TYPE3CNT DC    F'99999'            COUNT OF TYPE 3 RECORDS
BASESPEC DC    X'00'               X'FF' IF BASE= WAS SPECIFIED
TYPESPEC DC    X'00'               X'FF' IF TYPE= WAS SPECIFIED
FINDBLNK DC    (X'40')X'00',X'FF',(X'FF'-X'40'-1)X'00'
JFCB     DC    CL176' '
         DS    0F,H
DUMMYPRM DC    H'0'
SMFTYPE  EQU   5,1
SMFDATE  EQU   11,3
SMFTIME  EQU   6,4
EODAD    EQU   33,3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPOINT RECORD                                                 *
*                                                                     *
***********************************************************************
         DS    0F
CHECKREC DC    C' '                CHECKPOINT RECORD (80 BYTES)
CHECKDAT DC    PL3'0'              CHECKPOINT DATE
CHECKGEN DC    F'0'                LAST GEN CREATED
CHECKDSN DC    CL44' '             GENERATION DSNAME
CHECKHLD DC    PL3'0'              HOLD DATE USED FOR LAST DUMP
CHECKBAS DC    PL3'0'              BASE DATE USED FOR LAST DUMP
         DC    CL22' '
         EJECT
***********************************************************************
*                                                                     *
*   DCB AREAS                                                         *
*                                                                     *
***********************************************************************
HOLD     DCB   DDNAME=HOLD,MACRF=(GM,PM),DSORG=PS
BASEZERO DCB   DDNAME=BASEZERO,MACRF=(GM,PM),DSORG=PS,                 X
               EXLST=EXLST
         DS    0F
EXLST    DC    X'87',AL3(JFCB)
BASENEW  DCB   DDNAME=BASENEW,MACRF=PM,DSORG=PS,RECFM=VBS,             X
               LRECL=12956,BLKSIZE=12960
CHECKPT  DCB   DDNAME=CHECKPT,LRECL=80,RECFM=FB,BLKSIZE=80,DSORG=PS,   X
               MACRF=(GM,PM)
SORTIN   DCB   DDNAME=SORTIN,MACRF=PM,DSORG=PS,RECFM=VBS,              X
               LRECL=12956,BLKSIZE=12960
SORTOUT  DCB   DDNAME=SORTOUT,MACRF=GM,DSORG=PS
DUMPOUT  DCB   DDNAME=DUMPOUT,MACRF=(GM,PM),DSORG=PS
BASEBKUP DCB   DDNAME=BASEBKUP,MACRF=(GM,PM),DSORG=PS,RECFM=VBS,       X
               LRECL=12956,BLKSIZE=12960
         EJECT
***********************************************************************
*                                                                     *
*   DYNAMIC ALLOCATION AREAS                                          *
*                                                                     *
***********************************************************************
S99RBPTR DC    X'80',AL3(S99RB)
         SPACE 1
S99RB    DC    X'14'
S99VERB  DC    X'01'
S99FLAG1 DC    X'0000'
S99ERROR DC    X'0000'
S99INFO  DC    X'0000'
S99TXTPP DC    A(S99TUPL1)
         DC    F'0'
S99FLAG2 DC    F'0'
         SPACE 1
S99TUPL1 DC    A(DALDDNAM)        DDNAME
         DC    A(DALDSNAM)        DSNAME=
         DC    A(DALSTATS)        DISP=(X,
         DC    A(DALNDISP)                Y,
         DC    A(DALCDISP)                  Z)
         DC    A(DALUNIT)         UNIT=
         DC    A(DALLABEL)        LABEL=
         DC    A(DALEXPT)         EXPDT=
         DC    A(DALDCBDS)        DCB=(DSNAME,
         DC    A(DALBLKSZ)        BLKSIZE=
         DC    A(DALLRECL)        LRECL=
         DC    X'80',AL3(DALRECFM) RECFM=    )
         SPACE 1
S99TUPL2 DC    A(DUNDDNAM)
         DC    X'80',AL3(DUNREMOV)
         SPACE 1
DALDDNAM DC    X'0001',X'0001',X'0007',C'BASENEW' DDNAME
DALDSNAM DC    X'0002',X'0001',X'0000',CL44' '   DSNAME=
DALSTATS DC    X'0004',X'0001',X'0001',X'04'     DISP=(NEW,
DALNDISP DC    X'0005',X'0001',X'0001',X'02'           CATLG,
DALCDISP DC    X'0006',X'0001',X'0001',X'04'           DELETE)
DALUNIT  DC    X'0015',X'0001',X'0004',C'TAPE'   UNIT=TAPE
DALLABEL DC    X'001E',X'0001',X'0001',X'02'     LABEL=(,SL,
DALEXPT  DC    X'0022',X'0001',X'0005',C'99000'  EXPDT=99000)
         DS    0H
DALDCBDS DC    X'002C',X'0001',X'0003',C'M.D'    DCB=(M.D,
DALBLKSZ DC    X'0030',X'0001',X'0002',H'12960'  BLKSIZE=12960,
DALLRECL DC    X'0042',X'0001',X'0002',H'12956'  LRECL=12956,
DALRECFM DC    X'0049',X'0001',X'0001',X'58'     RECFM=VBS)
         SPACE 1
DUNDDNAM DC    X'0001',X'0001',X'0007',C'BASENEW'
DUNREMOV DC    X'0008',X'0000'
RECTYPTB DC    256C' '             RECORD TYPE TABLE (C'*'=COPY)
         END
