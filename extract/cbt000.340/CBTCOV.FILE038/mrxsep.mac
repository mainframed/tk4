MRXSEP TITLE 'MRXSEP - SYSOUT WRITER JOB SEPARATOR FOR HONEYWELL PPS-1'
IEFSD094 CSECT
*
*  THIS IS THE JOB SEPARATOR USED AT MEMOREX ON THE AMDAHL 470V/6
*  FOR OUTPUT DESTINED FOR THE HONEYWELL PPS-1 VIA THE EXTERNAL WRITER
*
*  THIS MODULE IS INVOKED BY HONEYWELL'S "NIPSEP"
*
*  THIS IS (GREATLY) MODIFIED MVS-3.8 IEFSD094 SOURCE
*
*  FJP/12MAR80 -- VERSION 1.0
*
*  FJP/17MAR80 -- VERSION 1.1
*   .  ADD S/T/J TO JOB NUMBER ON SECOND BLOCK LINE.
*   .  COMPARE JOBNAME AND OUTNAME FIELDS.  IF EQUAL, PRINT
*      BLANK BLOCK LINE INSTEAD OF ECHOING JOBNAME.
*   .  ADD DEPARTMENT NUMBER, PHONE NUMBER, FORM NUMBER TO PROGRAMMER
*      NAME FIELD APPEARING ON THE SINGLE LINE
*
*  FJP/14APR80 -- VERSION 2.0
*   .  ADD A FOURTH BLOCK LINE SHOWING THE DAY AND DATE
*   .  ADD THE DATE/TIME TO THE SINGLE LINE
*   .  PRINT A BLANK LINE AFTER THE SINGLE LINE
*
*
*FUNCTION/OPERATION--
*   THIS ROUTINE PRODUCES A SEPARATOR PAGE CONTAINING:
*     LINE 1 - JOBNAME (BLOCK)
*     LINE 2 - CLASS AND JOB NUMBER (BLOCK)
*     LINE 3 - OUTNAME (BLOCK) (JTIP MOD)
*     LINE 4 - DAY AND DATE (BLOCK)
*     LINE 5 - PROGRAMMER NAME FIELD, ACCOUNTING FIELDS, DATE/TIME,
*              FORM NUMBER
*
*OPERATION OF THIS MODULE--
*ENTRY POINT--
*   IEFSD094 WHICH IS LINKED TO FROM IEFSD078 WHEN A JOB SEPARATOR IS
*   SPECIFIED .
*
*INPUT--
*   REGISTER 1 POINTS TO THE PARAMETER LIST CONTAINING SWITCHES ,
*   ADDRESS OF OUTPUT DCB , ADDRESS OF 8 CHARACTER JOBNAME FIELD ,
*   AND THE ADDRESS OF 1 CHARACTER SYSOUT CLASS .
*   REGISTER 6 POINTS TO PARLIST WHEN NOT PCP SYSTEM.
*
*EXIT POINT 0.5 --
*   BRANCH TO IEFSDXXX IF OUTPUT TO BE SPANNED.
*OUTPUT AT EXIT POINT 0.5 --
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB
*        ROUTINE.
*        REGISTER 8 POINTS TO THE PARAMETER LIST GIVEN TO SMB AND
*        DSB PROCESSING ROUTINES.
*
*EXIT POINT 1 --
*   BRANCH TO IEFSD088 TO DO THE START TRANSITION ROUTINE
*
*OUTPUT AT EXIT POINT 1 --
*   REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB ROUTINE
*   REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT ROUTINE
*
*EXIT POINT 2 --
*   BRANCH TO IEFSD089 TO DO THE PUT FOR EACH RECORD
*
*OUTPUT AT EXIT POINT 2 --
*   REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB ROUTINE
*   REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT ROUTINE
*
*EXIT POINT 3 --
*
*OUTPUT AT EXIT POINT 3 --
*   REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB ROUTINE
*   REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT ROUTINE
*
*EXIT POINT 4 --
*   BRANCH TO IEFSD095 TO DO THE BLOCK LETTER ROUTINE
*
*OUTPUT AT EXIT POINT 4 --
*   REGISTER 1 POINTS TO THE PARAMETER LIST CONTAINING THE ADDRESS OF
*   CHARACTER TO BE PIT OUT,THE ADDRESS OF THE LINE COUNT,
*   THE ADDRESS OF THE CONSTRUCTION AREA,  AND THE ADDRESS OF THE
*   NUMBER OF CHARACTERS .
*
*EXIT POINT 5 --
*   RETURN TO IEFSD078 IF SYSOUT WORK DONE
*
*OUTPUT AT EXIT POINT 5 --
*   THE REGISTERS ARE RESTORED TO THERE CONTENTS AS THEY WERE ON
*   LEAVING IEFSD078 EXCEPT REGISTER 15 CONTAINS A RETURN CODE -0-FOR
*   CORRECT OPERATION OR -8-FOR UNCORRECTABLE OUTPUT ERROR
*
*EXTERNAL ROUTINES --
*
*   IEFSD088   THE TRANSITION ROUTINE
*   IEFSD089   THE OUTPUT ROUTINE
*   IEFSD89M   MESSAGES FOR IEFSD089
*   IEFSD078   SYSOUT WRITER LINK-TO-JOB SEPARATOR-OR-TO-DSB/SMB
*   IEFSD095   BLOCK LETTER ROUTINE
*   IEFSDXXX   SPANNED DATASETS ROUTINE
*
*ATTRIBUTES - REENTRANT
*
*   THIS ROUTINE RECEIVES REG1 POINTING TO A FOUR-WORD SAVEAREA.
*   THE AREA LOOKS LIKE:
*
*         *************************************
*         *        *        *        *        *
*         *SWITCHES*        *        *        *
*         *        *        *        *        *
*         *************************************
*         *                                   *
*         *        ADDRESS OF OUTPUT DCB      *
*         *                                   *
*         *************************************
*         *                                   *
*         *  ADDRESS OF 8 CHAR. JOBNAME FIELD *
*         *                                   *
*         *************************************
*         *                                   *
*         *  ADDRESS OF 1 CHAR. CLASS FIELD   *
*         *                                   *
*         *************************************
*
*         SWITCHES ARE AS FOLLOWS :
*
*         LEFT MOST BIT (128) IS ON IF THE OUTPUT
*         UNIT IS A 1442 PUNCH
*
*         NEXT BIT (64) IS ON IF THE OUTPUT UNIT
*         IS A PUNCH OR IF IT IS A TAPE WHICH HAS
*         A PUNCH AS ITS ULTIMATE DESTINATION
*
*         NEXT BIT (32) IS ON IF THE OUTPUT UNIT
*         IS A PRINTER OR A PUNCH
*
*         BRANCH TO IEFSD088 TO DO THE END TRANSITION ROUTINE
*
*----------
*   REGS
*----------
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*----------
*   EQUATES
*----------
SKIPONE  EQU   9                   MACHINE C/C SINGLE SPACE
ASASW    EQU   4                   ASA CONTROL CHARACTER
MACSW    EQU   2                   MACHINE CONTROL CHARACTER
VARSW    EQU   64                  VARIABLE SWITCH WHEN NOT FIXED
FIXSW    EQU   128                 FIXED SWITCH WHEN NOT VARIABLE
UNKSW    EQU   VARSW+FIXSW         UNKNOWN SWITCH
         EJECT
         SAVE  (14,12),,MRXSEP_&SYSDATE_&SYSTIME
         BALR  R9,0                SET BASE REGISTER
         USING *,R9
         LPR   R5,R1               SAVE PARM REGISTER
         USING PARMLJS,R5
*----------
*   GET MEMORY FOR WORK AREA & INITIALIZE
*----------
         LA    R0,WKSOE-WKSOR+OUTAREND-OUTAREAS+WORKEND-WORKLST
         GETMAIN R,LV=(0)
         USING PARLIST,R6
         LR    R8,R1                                  A(WORKSOR)
         LA    R1,WKSOE-WKSOR(R8)                     A(OUTAREA)
         LA    R7,OUTAREND-OUTAREAS+WKSOE-WKSOR(R8)   A(WORKLIST)
         USING WKSOR,R8
         USING OUTAREAS,R1
         USING WORKLST,R7
         XC    WORKLST(WORKEND-WORKLST),WORKLST  CLEAR CORE
         ST    R13,WOSAP
         XC    16(4,R13),16(R13)
         ST    R13,SRETR           SAVE RETURN REGISTER
         LA    R13,SMSVA           A(SAVE AREA)
         XC    WOXXX(8),WOXXX      CLEAR SPANNING ADDRESSES
         MVC   WOXXX(8),PARXXX   SAVE A(SPANNING MODULE) & A(SPAN CORE)
         MVI   SAVEC,SKIPONE       INITIALIZE SAVEC - SINGLE SPACE CC
         MVI   SAVED,SKIPONE       INITIALIZE SAVED - SINGLE SPACE CC
         ST    R6,WOSPS            SAVE PARLIST ADDRESS
         LR    R6,R1
         DROP  R1
         USING OUTAREAS,R6
*----------
*   INITIALIZE SWITCHES
*----------
         MVI   BCTSW,X'00'        CLEAR TRANSITION WRITE SWITCH
         MVI   SEGIN,0            INDICATE FIRST SEGMENT
         MVI   SORS1,0
         MVI   SORS2,0            TURN OFF SWITCH
         L     R0,JSDCBOUT
         ST    R0,DCBOT           STORE OUTPUT DCB ADDR
         L     R0,JSSWTCHS
         ST    R0,VARBA           STORE OUTPUT TYPE
*----------
*   IS OUTPUT VARIABLE SPANNED?
*----------
         L     R15,WOXXX                A(SPANNED MODULE)
         LTR   R15,R15                  PRESENT?
         BZ    GOTON                    BIF NOT
         O     R15,=C'0C000000'         USE 12 TO INDICATE MESSAGE
         BALR  R14,R15                  GO TO SPANNING MODULE
GOTON    EQU   *
*----------
*   DO TRANSITION ROUTINE - EXIT #1
*----------
         ST    R13,SAVER131
         LA    R13,SAVETRAN
         STM   14,12,12(13)
         L     R13,SAVER131
         L     R15,SD88EXIT
         BALR  R14,R15                  IEFSD088
         LA    R13,SAVETRAN
         LM    14,12,12(13)
         L     R13,SAVER131
         L     R10,WOSAP           A(SAVE AREA)
         TM    19(R10),X'FF'       UNCORRECTABLE ERROR?
         BNZ   UNREIOER            BIF YES - EXIT
         TM    SORS1,LRERS+INERS   UNOPENED DATA SET?
         BO    SD94EOFX            BIF YES - B TO EOF
*----------
*   INITIALIZE COUNTERS
*----------
         L     R2,=F'1'            SET R2 FOR FASTER "RR" INSTRUCTIONS
         LR    R3,R2               SET LINE COUNT (WITHIN BLOCK)
         LR    R12,R2              SET BLOCK CHARACTER LINE COUNT
*----------
*   THE FOLLOWING LOOP PRINTS A BLOCK LINE (12 LINES)
*----------
LOOP     EQU   *
         C     R12,=F'1'           WORKING ON FIRST BLOCK LINE?
         BE    JOBNAME             BIF YES - DO JOBNAME
         C     R12,=F'2'           WORKING ON SECOND BLOCK LINE?
         BE    CLASS               BIF YES - DO CLASS/JOB#
         C     R12,=F'3'           WORKING ON THIRD BLOCK LINE?
         BE    OUTNAME             BIF YES - DO OUTNAME
         C     R12,=F'4'           WORKING ON FOURTH BLOCK LINE?    2.0
         BE    DAYDATE             BIF YES - DO DAY/DATE            2.0
         B     UNREIOER            (SHOULDN'T BE HERE)
*----------
JOBNAME  EQU   *
         L     R10,JSNAMEAD        A(JOBNAME)
         L     R11,=F'8'           # OF CHARACTERS
         LA    R4,OUTAREAS+10      A(OUTPUT AREA)
         B     GO
*----------
CLASS    EQU   *
         MVC   CHAR8(8),=CL8' '    BLANK AREA TO HOLD BLOCK LINE
         L     R10,JSSYSCLA        A(OUTPUT CLASS)
         MVC   CHAR8(1),0(R10)     INSERT CLASS INTO BLOCK LINE
         L     R10,WOSPS           A(PARLIST)
         L     R10,X'B8'(,R10)     A(SSOB)
         LA    R10,X'24'(,R10)     A(JOB ID) = SSSOJOBI             1.1
         MVC   CHAR8+3(1),0(R10)   INSERT S/T/J ID INTO BLOCK LINE  1.1
         MVC   CHAR8+4(4),4(R10)   INSERT JOB # INTO BLOCK LINE     1.1
         LA    R10,CHAR8           A(BLOCK LINE CHARACTERS)
         L     R11,=F'8'           NUMBER OF CHARACTERS
         LA    R4,OUTAREAS+10      A(OUTPUT AREA)
         B     GO
*----------
OUTNAME  EQU   *
         MVC   CHAR8(8),=CL8' '    BLANK AREA TO HOLD BLOCK LINE
         L     R10,WOSPS           A(PARLIST)
         L     R10,X'B8'(,R10)     A(SSOB)
         LA    R10,X'AC'(,R10)     A(OUTNAME)
         L     R11,JSNAMEAD        A(JOBNAME)                       1.1
         CLC   0(8,R11),0(R10)     JOBNAME = OUTNAME?               1.1
         BE    *+10                BIF YES - PRINT BLANK BLOCK LINE 1.1
         MVC   CHAR8(8),0(R10)     INSERT OUTNAME INTO BLOCK LINE
         LA    R10,CHAR8           A(BLOCK LINE CHARACTERS)
         L     R11,=F'8'           NUMBER OF CHARACTERS
         LA    R4,OUTAREAS+10      A(OUTPUT AREA)
         B     GO
*----------
DAYDATE  EQU   *
         LA    R1,DTETME           A(SUB-ROUTINE OUTPUT AREA)       2.0
         BAL   R14,DATETIME        GO COMPUTE SHIFT/DATE/DAY/TIME   2.0
         LA    R10,DTETME+5        A(DAY/DATE CHARACTERS)           2.0
         L     R11,=F'8'           NUMBER OF CHARACTERS             2.0
         LA    R4,OUTAREAS+10      A(OUTPUT AREA)                   2.0
         B     GO                                                   2.0
*----------
GO       MVI   OUTAREAS,C' '
         MVC   OUTAREAS+1(119),OUTAREAS   INITIALIZE OUTPUT AREA
         ST    R3,ADR3             SAVE LINE COUNT
         LA    R3,ADR3             A(LINE COUNT)
         ST    R11,ADR11           SAVE NUMBER OF CHARACTERS
         LA    R11,ADR11           A(# OF CHARACTERS)
*----------
*  CALL IEFSD095 TO PRODUCE ONE OF THE 12 LINES MAKING UP A BLOCK LINE
*   (R10) = A(CHARACTERS)
*   (R3)  = A(LINE COUNT)
*   (R4)  = A(OUTPUT AREA)
*   (R11) = A(# OF CHARACTERS)
*----------
         GETMAIN  R,LV=24          GET AREA FOR IEFSD095'S PARM LIST
         ST    R2,16(R1)           SAVE REGISTER TWO
         LR    R2,R1               SAVE REGISTER ONE
         CALL  IEFSD095,((10),(3),(4),(11)),MF=(E,(1))
         LR    R1,R2               RESTORE REGISTER ONE
         L     R2,16(R1)           RESTORE REGISTER TWO
         FREEMAIN  R,LV=24,A=(1)
*----------
*   PUT A LINE
*----------
         L     R3,ADR3             RESTORE LINE COUNT
         L     R11,ADR11           RESTORE # OF CHARACTERS
         MVI   CONCH,C' '          SET CC TO SINGLE SPACE
         CR    R3,R2               IS LINE COUNT EQ 1?
         BNE   PUT                 BIF NOT
         MVI   CONCH,C'-'          OTHERWISE, SKIP 3 TO FIRST LINE
         CR    R12,R2              IS THIS FIRST BLOCK?
         BNE   PUT                 BIF NOT
         MVI   CONCH,C'1'          ELSE, SET TOP-OF-FORM
PUT      L     R1,=F'120'          LINE LENGTH
         ST    R1,INLSF            SET LENGTH OF INPUT
         LA    R1,OUTAREAS         A(INPUT)
         ST    R1,INLOC            SET ADDRESS OF INPUT
         OI    SORS1,OLDSW         TURN ON OLD SWITCH
         ST    R13,SAVER132
         LA    R13,SAVEPUT
         STM   14,12,12(13)
         L     R13,SAVER132
         L     R15,SD89EXIT        IEFSD089 - PUT A LINE
         BALR  R14,R15
         LA    R13,SAVEPUT
         LM    14,12,12(13)
         L     R13,SAVER132
         L     R10,WOSAP           A(SAVE AREA)
         TM    19(R10),X'FF'       UNCORRECTABLE ERROR?
         BNZ   UNREIOER            BIF YES - EXIT
         TM    SORS1,INERS         PERMANENT I/O INPUT ERROR?
         BZ    CONT                BIF NOT
*----------
SD94EOFX OI    SORS1,OLDSW         TURN ON "OLD" SWITCH
         MVI   BCTSW,1             FIX NUMBER OF TRANSITION BYTES
*----------
*   DO TRANSITION ROUTINE
*----------
         ST    R13,SAVER133
         LA    R13,SAVETRA2
         STM   14,12,12(13)
         L     R13,SAVER133
         L     R15,SD88EXIT
         BALR  R14,R15             IEFSD088
         LA    R13,SAVETRA2
         LM    14,12,12(13)
         L     R13,SAVER133
         L     R1,DCBOT            A(DCB)
         TM    DCBMACRF-IHADCB(R1),X'80' EXCP?
         BZ    UNREIOER            BIF NOT
         SR    R15,R15             INDICATE FAKE TRUNC
         L     R4,WOSPS            A(PARLIST)
         USING PARLIST,R4
         XC    PARWKSOR,PARWKSOR   TO BYPASS XYZ CC TEST
         DROP  R4
         L     R11,48(0,R1) LOAD REG 11 FROM DCB
         BALR  R14,R11 LINK TO FAKE PUT ROUTINE
         LTR   R1,R1               DID TRUNC FAIL?
         BNZ   UNREIOER            BIF NOT - EXIT
         L     R10,WOSAP           A(SAVE AREA)
         MVI   19(R10),8           ELSE, MARK "UNCORRECTABLE ERROR"
         B     UNREIOER            EXIT
*----------
*   UPDATE COUNTERS AFTER LINE HAS BEEN PUT'ED
*----------
CONT     AR    R3,R2               R3=R3+1 - BUMP LINE COUNT
         C     R3,=F'13'           PRINTED 12 LINES OF THE BLOCK LINE?
         BL    LOOP                BIF NOT - KEEP PRINTING
         LR    R3,R2               ELSE, RESET LINE COUNT TO ONE
         AR    R12,R2              R12=R12+1 - BUMP BLOCK COUNT
         C     R12,=F'5'           PRINTED 4 BLOCK LINES?           2.0
         BL    LOOP                BIF NOT - GO FOR NEXT BLOCK
*----------
*   THRU WITH BLOCK LINES - NOW PRINT SINGLE LINE
*----------
SINGLE   EQU   *
         MVI   CONCH,C'-'          SET CC TO SKIP 3
         MVI   CHAR120,C' '        CLEAR INPUT AREA
         MVC   CHAR120+1(119),CHAR120
         L     R10,WOSPS           A(PARLIST)
         L     R10,X'B8'(,R10)     A(SSOB)
         MVC   CHAR120+10(20),X'8C'(R10)  INSERT PGMMR NAME FIELD   1.1
         MVC   CHAR120+50(4),=CL4'DEPT'                             1.1
         MVC   CHAR120+55(4),X'A4'(R10)   INSERT DEPARTMENT NUMBER  1.1
         MVC   CHAR120+64(5),=CL5'PHONE'                            1.1
         MVC   CHAR120+70(4),X'A8'(R10)   INSERT PHONE NUMBER       1.1
         MVC   CHAR120+85(6),DTETME+13    INSERT DATE               2.0
         MVC   CHAR120+91(1),=C'/'                                  2.0
         MVC   CHAR120+92(6),DTETME+19    INSERT TIME               2.0
         MVC   CHAR120+111(4),=CL4'FORM'                            2.0
         MVC   CHAR120+116(4),X'74'(R10)  INSERT FORM # (SSSOFORM)  2.0
         L     R1,=F'120'
         ST    R1,INLSF            SET LENGTH OF INPUT
         LA    R1,CHAR120          GET ADDR OF INPUT
         ST    R1,INLOC            SET INPUT ADDR
         OI    SORS1,OLDSW         TURN ON OLD SWITCH
         ST    R13,SAVER132        SAVE R13
         LA    R13,SAVEPUT         GET ADDR OF SAVE AREA
         STM   14,12,12(13)        SAVE REG.S
         L     R13,SAVER132        RESTORE R13
         L     R15,SD89EXIT        GET ADDR OF PUT ROUTINE
         BALR  R14,R15             PUT A LINE
         LA    R13,SAVEPUT         GET ADDR OF SAVE AREA
         LM    14,12,12(13)        RESTORE REG.S
         L     R13,SAVER132        RESTORE R13
         L     R10,WOSAP           A(SAVE AREA)
         TM    19(R10),X'FF'       UNCORRECTABLE ERROR?
         BNZ   UNREIOER            BIF YES - EXIT
         TM    SORS1,INERS         PERMANENT I/O EROR?
         BO    SD94EOFX            BIF YES
*----------
*   THRU WITH SINGLE LINE - NOW PRINT A BLANK LINE TO FLUSH BUFFER
*----------
BLANK    EQU   *
         MVI   CONCH,C' '          SET CC TO SINGLE-SPACE
         MVI   CHAR120,C' '        CLEAR INPUT AREA
         MVC   CHAR120+1(119),CHAR120
         L     R1,=F'120'
         ST    R1,INLSF            SET LENGTH OF INPUT
         LA    R1,CHAR120          GET ADDR OF INPUT
         ST    R1,INLOC            SET INPUT ADDR
         OI    SORS1,OLDSW         TURN ON OLD SWITCH
         ST    R13,SAVER132        SAVE R13
         LA    R13,SAVEPUT         GET ADDR OF SAVE AREA
         STM   14,12,12(13)        SAVE REG.S
         L     R13,SAVER132        RESTORE R13
         L     R15,SD89EXIT        GET ADDR OF PUT ROUTINE
         BALR  R14,R15             PUT A LINE
         LA    R13,SAVEPUT         GET ADDR OF SAVE AREA
         LM    14,12,12(13)        RESTORE REG.S
         L     R13,SAVER132        RESTORE R13
         L     R10,WOSAP           A(SAVE AREA)
         TM    19(R10),X'FF'       UNCORRECTABLE ERROR?
         BNZ   UNREIOER            BIF YES - EXIT
         TM    SORS1,INERS         PERMANENT I/O EROR?
         BO    SD94EOFX            BIF YES
*----------
*   EXIT
*----------
UNREIOER EQU   *
*----------
*   INDICATE NO SYNAD ROUTINE
*----------
         L     R1,JSDCBOUT              A(OUTPUT DCB)
         USING IHADCB,R1                DCB ADDRESSABILITY
         MVC   DCBSYNAD+1(3),=X'000001' PUT ONE IN SYNAD ADDRESS
*----------
*   FREE WORK AREAS
*----------
         L     R13,SRETR                GET RETURN REGISTER
         LA    R0,WKSOE-WKSOR+OUTAREND-OUTAREAS+WORKEND-WORKLST
         FREEMAIN R,LV=(0),A=(8)  FREE WORK AREAS
*----------
*   RETURN
*----------
         RETURN (14,12)                 RETURN TO IEF078
         EJECT
*----------
*   CONSTANTS
*----------
         DS    0F
SD89EXIT DC    V(IEFSD089)              OUTPUT ROUTINE
SD88EXIT DC    V(IEFSD088)              TRANSITION ROUTINE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* *                                                               * *
* *                      " D A Y S H I F T "                      * *
* *                                                               * *
* *             DAY AND SHIFT CALCULATION FOR WRITER              * *
* *                 WRITTEN BY C. WRANDLE BARTH                   * *
* *                 GODDARD SPACE FLIGHT CENTER                   * *
* *                         5 APRIL 1972                          * *
* *                                                               * *
* *        ADAPTED FOR "MRXSEP" BY FRANK PAJERSKI, 14APR80        * *
* *        -- THE FIT TO MRXSEP IS A LITTLE ROUGH, BUT IT WORKS   * *
* *                                                               * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                   *
*  "DATETIME" PUTS 25 CHARACTERS OF INFORMATION INTO A STRING WHOSE *
*  ADDRESS IS IN REGISTER 1 AT ENTRY TIME.                          *
*   1) 5 CHARACTERS - SHIFT NAME (GRAVE,*DAY*,SWING)                *
*   2) 8 CHARACTERS - WWWDDMMM (DAY-OF-WEEK,DAY,MON)                *
*   3) 6 CHARACTERS - GREGORIAN DATE (MMDDYY)                       *
*   4  6 CHARACTERS - TIME (HHMMSS)                                 *
*  THE INFORMATION IS PICKED UP VIA A TIME MACRO.                   *
*                                                                   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
DATETIME EQU   *
         STM   0,15,SAVEAREA      SAVE REGISTERS.
         LR    #PARM,#1           SAVE A(OUTPUT AREA)
         LA    #0,WORKLENG        GET LENGTH OF WORK CORE.
         GETMAIN  R,LV=(0)        GET WORK AREA.
         XC    0(WORKLENG,#1),0(#1)  ZERO WORK AREA
         LR    R10,R1
         USING WORKSECT,R10       MAKE WORK AREA ADDRESSABLE.
         STM   R6,R8,SAVE678  <---- SAVE "USING" REGISTERS
         TIME  DEC                GET TIME OF DAY AND DATE.
         ST    #1,DATE+4          STORE DATE IN LOW END OF DOUBLE WORD.
         MVI   DATE+5,0           CLEAR OUT THE YEAR.
         SRL   #1,12              SHIFT OUT THE DAY OF THE YEAR.
         ST    #1,YEAR+4          STORE YEAR IN DOUBLE WORD.
         OI    YEAR+7,X'0F'       FLIP ON SIGN.
         SRL   #0,4               SHIFT HUNDREDTHS OF SECONDS FROM
         ST    #0,TIMESAVE             TIME AND SAVE FOR LATER.
         SRL   #0,16              SHIFT OUT ALL BUT HOURS (AND SPOT FOR
*                                      SIGN).
         ST    #0,TIME+4          STORE HOUR INTO DOUBLE WORD.
         OI    TIME+7,X'0F'       FLIP ON SIGN.
         CVB   #SHIFT,TIME        CONVERT HOUR TO BINARY.
         SRA   #SHIFT,3           ROUND DOWN TO A MULTIPLE
         SLA   #SHIFT,3                OF EIGHT.
         LR    #1,#PARM           A(OUTPUT AREA - 1ST VALUE)
         LA    #SHIFT,SHIFTTAB(#SHIFT)   A(SHIFT NAME)
         MVC   0(5,#1),0(#SHIFT)  COPY NAME TO CALLER.
         SPACE 3
*   PRODUCE 2ND VALUE
         CVB   #YEAR,YEAR         CONVERT YEAR TO BINARY.
         C     #YEAR,=F'99'       IS THE DATE SET TO 1999?
         BE    HIGHDATE           IF SO, BRANCH.
         S     #YEAR,=F'69'       FIRST YEAR WE HANDLE IS 1969;
*                                      CALCULATE OFFSET.
         BM    NOGO               IF PRE-69, BRANCH.
         SR    #DAY,#DAY          CLEAR #DAY (WHICH IS THE EVEN-
*                                      NUMBERED REGISTER OF THE
*                                      EVEN/ODD PAIR #DAY/#YEAR).
         D     #DAY,=F'4'         DIVIDE YEAR OFFSET BY 4.
         LR    #LEAP,#DAY         SAVE REMAINDER FOR LEAP YEAR TEST.
         MH    #YEAR,=H'5'        MULTIPLY INTEGER QUOTENT BY 5;
*                                      EVERY FOUR YEARS THE DAY OF THE
*                                      WEEK ON WHICH THE YEAR BEGINS
*                                      ADVANCES BY 5.
         AR    #DAY,#YEAR         THE ABOVE PLUS THE REMAINDER IS TH
*                                      NUMBER OF DAYS ADVANCED SINCE
*                                      1969.
         CVB   #DATE,DATE         CONVERT DAY OF THE YEAR TO BINARY.
         AR    #DAY,#DATE         ADVANCE NOW BY NUMBER OF DAYS INTO
*                                      THE YEAR WE ARE.
         SRDA  #DAY,32            SHIFT INTO ODD REGISTER, CLEARIN
*                                      EVEN.
         D     #DAY,=F'7'         TAKE MODULO 7.
*                                 WE NOW HAVE THE NUMBER OF THE DAY
*                                      OF THE WEEK, 0 FOR TUESDAY,
*                                      1 FOR WEDNESDAY, 2 FOR THURS-
*                                      DAY, ..., AND 6 FOR MONDAY.
*                                      THE OFFSET IS CAUSED BY THE
*                                      FACT THAT DAY 1 (1 JAN 1969)
*                                      WAS A WEDNESDAY.
         SLA   #DAY,2             MULTIPLY BY EIGHT FOR TABLE OFFSETS.
         SR    #MONTH,#MONTH      CLEAR MONTH COUNTER.
         C     #LEAP,=F'3'        IS THIS YEAR A LEAP YEAR (IS
*                                      THISYEAR - 1969 MODULO 4 = 3)?
         BE    GETDATE            IF SO, BRANCH.
         C     #DATE,=F'60'       IS THIS BEFORE MARCH 1ST?
         BL    GETDATE            IF SO, BRANCH.
         LA    #DATE,1(#DATE)     ELSE UP THE DAY COUNT BY ONE TO
*                                      MAKE IT LOOK LIKE LEAP YEAR.
GETDATE  LR    #DAYNO,#DATE       SAVE DAYS REMAINING IN #DAYNO.
         S     #DATE,MONTHDAY(#MONTH)
*                                 SUBTRACT FROM THE DAYS REMAINING
*                                      THE NUMBER OF DAYS IN THIS
*                                      MONTH.  (LOOP BEGINS WITH
*                                      JANUARY, THEN FEBRUARY, ETC.)
         BNP   FOUND              IF DAYS REMAINING HAS GONE NEGATIVE,
*                                      THEN #MONTH CONTAINS THE
*                                      OFFSET OF THIS MONTH, AND
*                                      #DAYNO CONTAINS THE DAY OF
*                                      THE MONTH.
         LA    #MONTH,4(#MONTH)   ADVANCE TO NEXT MONTH.
         B     GETDATE            LOOP TILL YOU FIND IT.
         SPACE 3
FOUND    CVD   #DAYNO,DATE        CONVERT DAY OF MONTH TO DECIMAL.
         OI    DATE+7,X'0F'       CLEAR OUT SIGN FIELD.
         LA    #1,5(,#PARM)       A(2ND OUTPUT VALUE)
         LA    #DAY,DAYTAB(#DAY)  POINT TO NAME OF DAY OF WEEK.
         MVC   0(3,#1),0(#DAY)    COPY NAME OF DAY TO AREA.
         UNPK  3(2,#1),DATE+6(2)  COPY DAY NUMBER TO OUTPUT STRING.
         LA    #MONTHNM,MONTHTAB(#MONTH)  A(MONTH NAME)
         MVC   5(3,#1),0(#MONTHNM)  COPY MONTH NAME TO AREA
         SPACE 3
*   PRODUCE 3RD VALUE
         LA    #GREGORN,13(,#PARM) A(3RD OUTPUT VALUE)
         SRA   #MONTH,2           CONVERT MONTH OFFSET BACK
         LA    #MONTH,1(#MONTH)        TO MONTH NUMBER.
         CVD   #MONTH,MONTH       CONVERT TO DECIMAL AND
         OI    MONTH+7,X'0F'           SET THE ZONE.
         UNPK  0(2,#GREGORN),MONTH+6(2)
*                                 UNPACK MONTH NUMBER.
         MVC   2(2,#GREGORN),3(#1)
*                                 COPY DAY OF MONTH FROM SECOND PARM.
         UNPK  4(2,#GREGORN),YEAR+6(2)
*                                 UNPACK YEAR TO COMPLETE DATE.
         B     TRYTIME            GO TRY THE TIME.
         SPACE 3
HIGHDATE LA    #1,5(,#PARM)       A(2ND OUTPUT VALUE)
         MVC   5(8,#1),=C'HIGHDATE'
*                                 IF DATE IS SET TO 1999, RETURN
*                                      "HIGHDATE".
         LA    #GREGORN,13(,#PARM) A(3RD OUTPUT VALUE)
         MVC   0(6,#GREGORN),=C'000099'
         SPACE 3
*   PRODUCE 4TH VALUE             GIVE ZERO DATE.
TRYTIME  EQU   *
         OI    TIMESAVE+3,X'0F'   TURN ON SIGN BIT.
         LA    #1,19(,#PARM)      A(4TH OUTPUT VALUE)
         UNPK  0(6,#1),TIMESAVE   UNPACK TIME.
         B     ALLDONE            GO EXIT.
         SPACE 3
NOGO     EQU   *
         MVC   5(8,#PARM),=C'????????'
         MVC   13(12,#PARM),=CL12' '
*                                 IF DATE IS BEFORE 1969, RETURN
*                                      QUESTION MARKS.
         B     ALLDONE            RETURN.
ALLDONE  LR    R1,R10             RESTORE POINTER FOR FREEMAIN.
         LM    R6,R8,SAVE678   <----- RELOAD "USING" REGISTERS
         DROP  R10
         LA    #0,WORKLENG        GET LENGTH AGAIN.
         FREEMAIN  R,LV=(0),A=(1) FREE WORK AREA.
         LM    R0,R15,SAVEAREA    RETURN TO CALLER.
         BR    R14
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              SYMBOLIC REGISTER DESIGNATIONS                       *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
#0       EQU   0                  WORK REGISTER.
#1       EQU   1                  WORK REGISTER.
#DAY     EQU   2                  CONTAINS DAY OF THE WEEK OR NUMBERS
*                                      USED TO CALCULATE IT;  MUST
*                                      BE AN EVEN-NUMBERED REGISTER.
#YEAR    EQU   #DAY+1             CONTAINS CURRENT YEAR OR DERIVITIVE
*                                      THEREOF.
#PARM    EQU   4                  "DAYSHIFT" PARAMETER LIST POINTER.
#LEAP    EQU   5                  CONTAINS (THISYEAR - 1969) MODULO 4;
*                                      A VALUE OF 3 IMPLIES LEAP YEAR.
#DATE    EQU   6                  DAY OF THE YEAR, FROM 1 TO 366.
*                                      DURING MONTH CALCULATION,
*                                      CONTAINS DAYS LEFT AFTER
*                                      MONTHS ALREADY PROCESSED
*                                      ARE SUBTRACTED.
#SHIFT   EQU   7                  HOUR OF DAY;  ROUNDED TO NEXT LOWER
*                                      MULTIPLE OF 8 GIVES OFFSET TO
*                                      SHIFT NAME.
#GREGORN EQU   7                  ADDRESS OF STRING TO RECEIVE
*                                      GREGORIAN DATE.
#MONTH   EQU   8                  OFFSET IN MONTH TABLES OF MONTH
*                                      BEING PROCESSED;  MONTH NUMBER
*                                      (0, 1, ..., 11) TIMES 4.
*              9                  MRXSEP BASE REGISTER
*              10                 A(WORK AREA)
#MONTHNM EQU   11                 ADDRESS OF MONTH NAME IN TABLE.
#DAYNO   EQU   12                 DAY OF MONTH;  0-31.
#13      EQU   13                 SAVE/WORK AREA POINTER.
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              WORK AREA AND CONSTANTS                              *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 5
MONTHDAY DC    F'31,29,31,30,31,30,31,31,30,31,30,31'
*                                 TABLE OF NUMBER OF DAYS IN EACH
*                                      MONTH ON LEAP YEARS.
SHIFTTAB DC    C'GRAVE   *DAY*   SWING'
*                                 TABLE OF SHIFT NAMES.
DAYTAB   DC    C'TUE WED THU FRI SAT SUN MON'
*                                 TABLE OF DAY NAMES.
MONTHTAB DC    C'JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC'
*                                 TABLE OF MONTH NAMES.
         SPACE 3
WORKSECT DSECT
DATE     DS    D                  CVB AREA FOR DAY OF YEAR.
YEAR     DS    D                  CVB AREA FOR YEAR.
TIME     DS    D                  CVB AREA FOR HOUR OF DAY.
MONTH    DS    D                  CVB AREA FOR MONTH NUMBER.
TIMESAVE DS    F                  UNPACK AREA FOR TIME.
SAVE678  DS    3F                 HOLDS THE "USING" REGISTERS
WORKLENG EQU   *-WORKSECT         LENGTH OF WORK AREA.
         EJECT
         IEFSDPAR
         EJECT
JSPARMS  DSECT
*THE PARMAMETER LIST INPUT TO THIS MODULE
PARMLJS  DS    0F
JSSWTCHS DS    C                       SWITCHES
         DS    0F
JSDCBOUT DS    F                       OUTPUT DCB ADDRESS
JSNAMEAD DS    F                       JOBNAME FIELD ADDRESS
JSSYSCLA DS    F                       JOB CLASS ADDRESS
JSENT078 EQU   JSSWTCHS+1         X'FF' IF ENTRY FROM IEFSD078
ENTRY078 EQU   X'FF'              ENTRY SWITCH
JSEND    EQU   *                       END OF PARM LIST
         EJECT
         IEFSDWKT
*THE AREA USED TO BUILD JOB SEPARATOR OUTPUT
OUTAREAS DS    0F
         DS    30F
SAVER131 DS    F                   SAVE R13 FOR ENT TO TRAN1
SAVER132 DS    F                   SAVE R13 FOR ENT TO PUT
SAVER133 DS    F                   SAVE R13 FOR ENT TO TRANS2
SAVER134 DS    F
SAVETRAN DS    18F
SAVEPUT  DS    18F
SAVETRA2 DS    18F
SAVEPUT2 DS    18F
SAVEAREA DS    16F
ADR3     DS    F
ADR11    DS    F
CHAR8    DS    8C
CHAR120  DS    120C
DTETME   DS    25C                      FOR DATETIME SUB-ROUTINE
OUTAREND EQU   *                        END OF AREA
         EJECT
         IEFSDSDR
         EJECT
         DCBD  DSORG=PS
         END
