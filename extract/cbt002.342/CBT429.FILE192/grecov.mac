*
*
*+--------------------------------------------------------------------+
*|       (C)   COPYRIGHT MD-PALADIN INC. 1992                         |
*+--------------------------------------------------------------------+
*|  FUNCTION:                                                         |
*|    GENERALIZED RECOVERY ROUTINE.  CAN BE USED AS AN ESTAE(X) RTN,  |
*|    FRR OR ARR.                                                     |
*|  INPUTS:                                                           |
*|    R1 - SDWA ADDRESS                                               |
*|         ADDRESS OF USER PARMLIST ADDRESS IS IN FIELD SDWAPARM.     |
*|         THE USER PARMLIST IS MAPPED BY THE ESTPARM MACRO.          |
*|  OUTPUTS:                                                          |
*|    VARIOUS WTOS.                                                   |
*|    SDWA RETURNED TO RTM WITH RETRY ADDRESS IF RETRY IS DESIRED     |
*|  LOGIC:                                                            |
*|    1) THE EXPANSION OF MODULE ENTRY=ESTAEX MACRO TESTS WHETHER     |
*|       RTM HAS SUPPLIED AN SDWA.  IF SDWA IS ABSENT, PERCOLATE.     |
*|    2) ADDRESS THE SDWA EXTENSION AND USER PARMLIST. IF THERE IS    |
*|       NO USER PARMLIST, PERCOLATE THE ABEND.                       |
*|    3) TEST WHETHER THIS IS A RECURSIVE ENTRY. FOR AN ESTAE, RTM2   |
*|       KEEPS TRACK OF RECURSION.  OTHERWISE, TEST USER FLAG.        |
*|    4) ISSUE WTOS WITH INFORMATION FROM USER PARMLIST AND/OR SDWA.  |
*|    5) IF USER HAS SUPPLIED THE ADDRESS OF AN ADDITIONAL ROUTINE,   |
*|       INVOKE THE ROUTINE.  THE ROUTINE WILL RECEIVE CONTROL IN     |
*|       PRIMARY ASC MODE AND WITH THE SDWA ADDRESS IN R1.  IF THE    |
*|       ROUTINE RETURNS 0 IN R15, GRECOV WILL ATTEMPT RETRY.  ANY    |
*|       OTHER VALUE WILL CAUSE GRETRY TO PERCOLATE THE ABEND.        |
*|    6) IF THERE IS A RETRY ADDRESS IN THE PARMLIST, ISSUE SETRP     |
*|       TO RETRY.  IF THIS IS AN ARR, BUILD A REGISTER UPDATE BLOCK  |
*|       (RUB).  IF THERE IS NO RETRY ADDRESS, PERCOLATE THE ABEND.   |
*|  ATTRIBUTES:                                                       |
*|    AMODE 31, RMODE ANY, REENTRANT, ESA DEPENDENCIES                |
*+--------------------------------------------------------------------+
         MODULE GRECOV,BASE=12,LOC=BELOW,AMODE=31,RMODE=ANY,           X
               ENTRY=ESTAEX,                                           X
               TEXT=' GENERALIZED RECOVERY ROUTINE '
         SAC   0                       SET PSW TO PRIMARY SPACE ASC
         SYSSTATE ASCENV=P             PRIMARY SPACE MODE MACROS
         MVC   WTOLIST(LWTOLIST),WTOLISTM  COPY WTO PARMLIST TO RENT
*        *---------------------------------------*
*        *     SET ADDRESSABILITY SDWA EXTENSION *
*        *---------------------------------------*
         L     R8,SDWAXPAD             ADDRESS SDWA EXTENSION PTRS
         L     R8,SDWASRVP-SDWAPTRS(R8) ADDRESS OF RECORDABLE XTNSION
         USING SDWARC1,R8              ADDRESSING FOR RECORDABLE XTN
         ICM   R9,15,SDWAPARM          ADDRESS OF USER PARM ADDRESS
         ICM   R9,15,0(R9)             ADDRESS OF USER PARM
         USING ESTPARM,R9              MAP USER PARMLIST
         BNZ   CNTINUE                 PARM EXISTS; CONTINUE
         MVC   WTOLINE(LNPARMSG),NPARMSG  ..OUTPUT NOPARM
         BAS   R14,WTORTN                 ..MESSAGE
         B     EXITPERC                YES; PERCOLATE THE ABEND
CNTINUE  DS    0H
*        *---------------------------------------*
*        *     TEST RECURSION                    *
*        *---------------------------------------*
         CLI   SDWATYPE,SDWATEST       IS THIS AN ESTAE ?
         BNE   NESTTYPE                NO; DO NOT TEST SDWA FLAG
         TM    SDWAERRD,SDWASTAE       RECURSIVE ENTRY ?
         BO    EXITPERC                YES; PERCOLATE THE ABEND
         B     AFTRECRS                CONTINUE
NESTTYPE DS    0H
         TM    ESTFLAG,@ESTSTAE        IS RECURSION FLAG SET
         BO    EXITPERC                YES; PERCOLATE THE ABEND
         OI    ESTFLAG,@ESTSTAE        SET RECURSION FLAGE
AFTRECRS DS    0H
*        *---------------------------------------*
*        *     WTO SDWA ADDRESS                  *
*        *---------------------------------------*
         MVC   WTOLINE(LSDWMSG1),SDWMSG1 COPY MESSAGE MODEL TO WORKAREA
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         ST    R3,FORMAT                 SDWA ADDRESS TO FORMAT AREA
         LA    R15,FORMAT                ..ADDRESS DISPHEX SOURCE
         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,4                       ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST
         LA    R15,WTOLINE+(SDWAADDR-SDWMSG1)  ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                       ..TO DISPHEX PARMLIST
         LA    R15,L'SDWAADDR            ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
         BAS   R14,WTORTN                ISSUE WTO
*        *---------------------------------------*
*        *     WTO ABEND CODE                    *
*        *---------------------------------------*
         MVC   WTOLINE(LARRMSG1),ARRMSG1 COPY MESSAGE MODEL TO WORKAREA
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         LA    R15,SDWAABCC+1            ..SDWA ABEND CODE ADDRESS
         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,L'SDWAABCC-1            ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST
         LA    R15,WTOLINE+(ABNDCODE-ARRMSG1) ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                      ..TO DISPHEX PARMLIST
         LA    R15,L'ABNDCODE            ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
         MVI   WTOLINE+(ABNDCODE-ARRMSG1)+3,X'40'   SPACE TO LAST BYTE
         BAS   R14,WTORTN                  ISSUE WTO
*        *---------------------------------------*
*        *     WTO MODULE NAME AND ENTRY POINT   *
*        *---------------------------------------*
         MVC   WTOLINE(LDMODMSG),DMODMSG COPY MESSAGE MODEL TO WORKAREA
         CLI   ESTMOD,X'00'              IS MODULE NAME IN PARMLIST?
         BE    NESTPARM                  NO; GET MODULE NAME FROM SDWA
         MVC   WTOLINE+(DMOD1-DMODMSG)(L'ESTMOD),ESTMOD
         B     AESTPARM                  FORMAT LOAD POINT
NESTPARM DS    0H
         CLI   SDWANAME,X'00'            IS MODULE NAME IN SDWA ?
         BE    AESTPARM                  NO; DO NOT COPY FROM SDWA
         MVC   WTOLINE+(DMOD1-DMODMSG)(L'SDWANAME),SDWANAME
AESTPARM DS    0H
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         ICM   R15,15,ESTLOAD            ENTRY POINT FROM PARMLIST
         BZ    NESTLOAD                  =0; GET FROM SDWA
         LA    R15,ESTLOAD               ADDRESS OF ENTRY POINT
         B     AESTLOAD                  FORMAT ENTRY POINT
NESTLOAD DS    0H
         ICM   R15,15,SDWAEPA            MODULE ENTRY POINT FROM SDWA
         BZ    NSDWLOAD                  =0; DO NOT FORMAT ENTRY PT
         LA    R15,SDWAEPA               ADDRESS OF SDWA ENTRY POINT
AESTLOAD DS    0H
         ST    R15,0(R1)                 SAVE ENTRY PT IN DISPHEX PARMS
         LA    R15,4                     ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,WTOLINE+(DMODLOD-DMODMSG) ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                      ..TO DISPHEX PARMLIST
         LA    R15,L'DMODLOD             ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
NSDWLOAD DS    0H
         BAS   R14,WTORTN                ISSUE WTO
*        *---------------------------------------*
*        *     WTO PSW AND ABEND OFFSET          *
*        *---------------------------------------*
         MVC   WTOLINE(LDPSWMSG),DPSWMSG COPY MESSAGE MODEL TO WORKAREA
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         LA    R15,SDWAEC1               ..SDWA PSW
         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,8                       ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST
         LA    R15,FORMAT                      ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                       ..TO DISPHEX PARMLIST
         LA    R15,16                    ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
*                                        COPY 1ST WORD PSW TO WTO
         MVC   WTOLINE+(DPSW1-DPSWMSG)(L'DPSW1),FORMAT
*                                          COPY 2ST WORD PSW TO WTO
         MVC   WTOLINE+(DPSW2-DPSWMSG)(L'DPSW2),FORMAT+L'DPSW1
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         L     R15,SDWAEC1+4             2ND WORD OF PSW
         LA    R15,0(R15)                CLEAR AMODE BIT
         ICM   R14,15,ESTLOAD            LOAD POINT FROM CALLER
         BNZ   ESTLOD1                   ‰=0; IS IN PARMLIST
         ICM   R14,15,SDWAEPA            GET LOAD POINT FROM SDWA
         BZ    WPSWMSG                   =0; DO NOT CALCULATE OFFSET
ESTLOD1  DS    0H
         LA    R14,0(R14)                CLEAR HIGH ORDER BIT
         SR    R15,R14                   SUBRTRACT TO FIND DISPLAC
         BNH   WPSWMSG                   LE 0; OFFSET IS INVALID
         ST    R15,FORMAT                SAVE OFFSET
         LA    R15,FORMAT                ADDRESS OF SAVED OFFSET
         ST    R15,0(R1)                 OFFSET TO DISPHEX PARMLIST
         LA    R15,4                     ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,WTOLINE+(OFFSET-DPSWMSG) ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                    ..TO DISPHEX PARMLIST
         LA    R15,L'OFFSET              ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
WPSWMSG  DS    0H
         BAS   R14,WTORTN                ISSUE WTO
*        *---------------------------------------*
*        *     ISSUE WTOS WITH ABEND GENERAL REGS*
*        *---------------------------------------*
         MVC   WTOLINE(LGENREGS),GENREGS ..ISSUE REGISTER
         BAS   R14,WTORTN                ..MESSAGE
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         LA    R15,SDWAGRSV              ..ADDRESS OF PSW REGISTERS
         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,L'SDWAGRSV              ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST
         LA    R15,FORMAT                    ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                     ..TO DISPHEX PARMLIST
         LA    R15,L'SDWAGRSV*2          ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
         MVC   WTOLINE(LMREG1),MREG1                       ..ISSUE
         MVC   WTOLINE+(DREG0-MREG1)(L'DREG0),FORMAT+0*8   ..WTO
         MVC   WTOLINE+(DREG1-MREG1)(L'DREG1),FORMAT+1*8   ..WITH
         MVC   WTOLINE+(DREG2-MREG1)(L'DREG2),FORMAT+2*8   ..FOUR
         MVC   WTOLINE+(DREG3-MREG1)(L'DREG3),FORMAT+3*8   ..REGISTERS
         BAS   R14,WTORTN                                  ..FROM FMT
         MVC   WTOLINE(LMREG2),MREG2                     ..ISSUE
         MVC   WTOLINE+(DREG4-MREG2)(L'DREG4),FORMAT+4*8 ..WTO
         MVC   WTOLINE+(DREG5-MREG2)(L'DREG5),FORMAT+5*8 ..WITH
         MVC   WTOLINE+(DREG6-MREG2)(L'DREG6),FORMAT+6*8 ..FOUR
         MVC   WTOLINE+(DREG7-MREG2)(L'DREG7),FORMAT+7*8 ..REGISTERS
         BAS   R14,WTORTN                                ..FROM FORMAT
         MVC   WTOLINE(LMREG3),MREG3                        ..ISSUE
         MVC   WTOLINE+(DREG8-MREG3)(L'DREG8),FORMAT+8*8    ..WTO
         MVC   WTOLINE+(DREG9-MREG3)(L'DREG9),FORMAT+9*8    ..WITH
         MVC   WTOLINE+(DREG10-MREG3)(L'DREG10),FORMAT+10*8 ..FOUR
         MVC   WTOLINE+(DREG11-MREG3)(L'DREG11),FORMAT+11*8 ..REGISTERS
         BAS   R14,WTORTN                                   ..FROM FMT
         MVC   WTOLINE(LMREG4),MREG4                          ..ISSUE
         MVC   WTOLINE+(DREG12-MREG4)(L'DREG12),FORMAT+12*8   ..WTO
         MVC   WTOLINE+(DREG13-MREG4)(L'DREG13),FORMAT+13*8   ..WITH
         MVC   WTOLINE+(DREG14-MREG4)(L'DREG14),FORMAT+14*8   ..FOUR
         MVC   WTOLINE+(DREG15-MREG4)(L'DREG15),FORMAT+15*8   ..REGS
         BAS   R14,WTORTN                                     ..FROMFMT
*        *---------------------------------------*
*        *     ISSUE WTOS WITH ABEND ACCESS REGS *
*        *---------------------------------------*
         MVC   WTOLINE(LACCREGS),ACCREGS ..ISSUE REGISTER
         BAS   R14,WTORTN                ..MESSAGE
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         LA    R15,SDWAARER              ..ADDRESS OF PSW REGISTERS
         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,L'SDWAARER              ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST
         LA    R15,FORMAT                ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,L'SDWAARER*2            ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                  ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
         MVC   WTOLINE(LMAR1),MAR1                         ..ISSUE
         MVC   WTOLINE+(DAR0-MAR1)(L'DAR0),FORMAT+0*8   ..WTO
         MVC   WTOLINE+(DAR1-MAR1)(L'DAR1),FORMAT+1*8   ..WITH
         MVC   WTOLINE+(DAR2-MAR1)(L'DAR2),FORMAT+2*8   ..FOUR
         MVC   WTOLINE+(DAR3-MAR1)(L'DAR3),FORMAT+3*8   ..REGISTERS
         BAS   R14,WTORTN                               ..FROM FMT
         MVC   WTOLINE(LMAR2),MAR2                    ..ISSUE
         MVC   WTOLINE+(DAR4-MAR2)(L'DAR4),FORMAT+4*8 ..WTO
         MVC   WTOLINE+(DAR5-MAR2)(L'DAR5),FORMAT+5*8 ..WITH
         MVC   WTOLINE+(DAR6-MAR2)(L'DAR6),FORMAT+6*8 ..FOUR
         MVC   WTOLINE+(DAR7-MAR2)(L'DAR7),FORMAT+7*8 ..REGISTERS
         BAS   R14,WTORTN                             ..FROM FORMAT
         MVC   WTOLINE(LMAR3),MAR3                       ..ISSUE
         MVC   WTOLINE+(DAR8-MAR3)(L'DAR8),FORMAT+8*8    ..WTO
         MVC   WTOLINE+(DAR9-MAR3)(L'DAR9),FORMAT+9*8    ..WITH
         MVC   WTOLINE+(DAR10-MAR3)(L'DAR10),FORMAT+10*8 ..FOUR
         MVC   WTOLINE+(DAR11-MAR3)(L'DAR11),FORMAT+11*8 ..REGISTERS
         BAS   R14,WTORTN                                ..FROM FMT
         MVC   WTOLINE(LMAR4),MAR4                           ..ISSUE
         MVC   WTOLINE+(DAR12-MAR4)(L'DAR12),FORMAT+12*8  ..WTO
         MVC   WTOLINE+(DAR13-MAR4)(L'DAR13),FORMAT+13*8  ..WITH
         MVC   WTOLINE+(DAR14-MAR4)(L'DAR14),FORMAT+14*8  ..FOUR
         MVC   WTOLINE+(DAR15-MAR4)(L'DAR15),FORMAT+15*8  ..REGS
         BAS   R14,WTORTN                                 ..FROM FMT
*        *---------------------------------------*
*        *     INVOKE USER ROUTINE               *
*        *---------------------------------------*
         ICM   R15,15,ESTRTN         USER ROUTINE ADDRESS
         BZ    NUSERTN               =0; NO ROUTINE SPECIFIED
         EREG  R1,R1                 MAKE SURE SDWA ADDRESS IS IN R1
         BASSM R14,R15               INVOKE THE ROUTINE
         LTR   R15,R15               RC=0 ?
         BNZ   EXITPERC              NO; PERCOLATE
NUSERTN  DS    0H
*        *---------------------------------------*
*        *     RETRY OR PEROCLATE                *
*        *---------------------------------------*
         ICM   R4,15,ESTRETRY        RETRY ROUTINE ADDRESS
         BNZ   EXITRTRY              ‰=0; ROUTINE ADDRESS SUPPLIED
         B     EXITPERC              NO ROUTINE ADDRESS; PERCOLATE
*---------------------------------------------------------------------*
*        EXIT ROUTINES                                                *
*---------------------------------------------------------------------*
*        *---------------------------------------*
*        *     PERCOLATE THE ABEND               *
*        *---------------------------------------*
EXITPERC DS    0H
         MVC   WTOLINE(LNRETMSG),NRETMSG  ..OUTPUT PEROCLATE
         BAS   R14,WTORTN                 ..MESSAGE
         EREG  R1,R1                   SDWA ADDRESS TO R1
         SETRP RC=0                    SET SDWA TO PERCOLATE
         B     EXIT
*        *---------------------------------------*
*        *     INVOKE THE RETRY ROUTINE          *
*        *---------------------------------------*
EXITRTRY DS    0H
         MVC   WTOLINE(LSDRETRY),SDRETRY COPY MESSAGE MODEL TO WORKAREA
         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST
         ST    R4,FORMAT                 RETRY ADDRESS TO FORMAT AREA
         LA    R15,FORMAT                ..ADDRESS DISPHEX SOURCE
         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST
         LA    R15,4                       ..LENGTH OF DISPHEX SOURCE
         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST
         LA    R15,WTOLINE+(SDRETADR-SDRETRY)  ..ADDRESS DISPHEX TARGET
         ST    R15,8(R1)                       ..TO DISPHEX PARMLIST
         LA    R15,L'SDRETADR            ..LENGTH DISPHEX TARGET
         ST    R15,12(R1)                ..TO DISPHEX PARMLIST
         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE
         BAS   R14,WTORTN                ISSUE WTO
*        *---------------------------------------*
*        *     IF THIS IS ARR, BUILD RUB         *
*        *---------------------------------------*
         CLI   SDWATYPE,SDWATARR       IS THIS AN ARR ?
         BNE   NOTARRTN                NO; DO NOT BUILD RUB
         MVC   ESTRUB(2),=X'FFFF'      RESTORE ALL REGISTERS
         MVC   ESTRUB+2(L'SDWAGRSV),SDWAGRSV    MOVE REGISTER TO RUB
         LA    R5,ESTRUB                        ADDRESS OF RUB
         EREG  R1,R1                   SDWA ADDRESS TO R1
         SETRP RC=4,RETREGS=YES,RETADDR=(R4),FRESDWA=YES,DUMP=NO,      X
               RUB=(R5)
         B     EXIT
NOTARRTN DS    0H
         EREG  R1,R1                   SDWA ADDRESS TO R1
         SETRP RC=4,RETREGS=YES,RETADDR=(R4),FRESDWA=YES,DUMP=NO
         B     EXIT
*---------------------------------------------------------------------*
*        DISPHEX SUBROUTINE                                           *
* FUNCTION:                                                           *
*   TRANSLATE BINARY NUMBER (HEX) NUMBER TO CHARACTER NUMBER.         *
*   THIS ROUTINE WILL TRUNCATE INPUT OR PAD OUTPUT SO THAT OUTPUT     *
*   IS TWICE INPUT SIZE.  THE MAXIMUM INPUT SIZE IS 128 BYTES.        *
* INPUT:                                                              *
*   ADDRESS OF PARMLIST IN R1                                         *
*   PARMLIST FIELDS:                                                  *
*   DS    A    ADDRESS OF INPUT FIELD                                 *
*   DS    F    LENGTH OF INPUT FIELD                                  *
*   DS    A    ADDRESS OF OUTPUT FIELD                                *
*   DS    F    LENGTH OF OUTPUT FIELD                                 *
*---------------------------------------------------------------------*
DISPHEX  DS    0H
         BAKR  R14,0                   BUILD STACK STATE ENTRY
         LM    R4,R7,0(R1)             LOAD REGS FROM PARMLIST
         LR    R1,R5                   INPUT LENGTH TO R1
         SLL   R1,1                    * 2
         CR    R7,R1                   IS OUTPUT LENGTH >= 2 * INPUT ?
         BNL   LENGTHOK                YES; CONTINUE
         LR    R5,R7                   ..OUTPUT LENGTH
         SRL   R5,1                    ..DIVIDED BY 2 IS NEW INPUT LEN
LENGTHOK DS    0H
         EREG  R1,R1                   EXTRACT PARMLIST ADDR FROM STACK
         STM   R4,R7,0(R1)             SAVE REGS IN PARMLIST
UNPKLP   DS    0H
         IC    R11,0(R4)               INPUT BYTE
         STC   R11,1(R6)               SAVE IN OUTPUT
         SRL   R11,4                   SHIFT INPUT BYTE
         STC   R11,0(R6)               SAVE IN OUTPUT
         LA    R4,1(R4)                POINT AT NEXT INPUT BYTE
         LA    R6,2(R6)                POINT AT NEXT OUTPUT BYTE
         BCT   R5,UNPKLP               LOOP FOR LENGTH OF INPUT
         EREG  R1,R1                   EXTRACT PARMLIST ADDR FROM STACK
         LM    R4,R7,0(R1)             LOAD REGS FROM PARMLIST
         NI    0(R6),X'0F'             TURN OFF HIGH ORDER BITS 1ST BYT
         BCTR  R7,0                    LENGTH LESS 1
         BCTR  R7,0                    LESS 1 FOR EXECUTE
         EX    R7,MVZ1                 PROPOGATE HIGH ORDER BITS OFF
         B     AMVZ1                   BRANCH AROUND EXECUTE
MVZ1     MVZ   1(0,R6),0(R6)           ** EXECUTE ONLY **
AMVZ1    DS    0H
         LA    R7,1(0,R7)              INCREASE TO LENGTH-1
         EX    R7,TR1                  UNPACK INPUT INTO OUTPUT
         B     ATR1                    BRANCH AROUND EXECUTE
TR1      TR    0(0,R6),TRTAB           ** EXECUTE ONLY **
ATR1     DS    0H
         EREG  R15,R1                  RESTORE REGS 0,1,AND 15
         PR                            RESTORE STACK
TRTAB    DC    C'0123456789ABCDEF'     TRANSLATION  TABLE
*---------------------------------------------------------------------*
*        WTO ROUTINE                                                  *
*---------------------------------------------------------------------*
WTORTN   DS 0H
         BAKR  R14,0                   SAVE ENVIRONMENT ON STACK
         TM    ESTFLAG2,@ESTNWTO       NO WTOS?
         BO    WTORETN1                YES; EXIT ROUTINE
         LA    R11,WTOLINE             ADDRESS OF WTO TEXT
         CLI   SDWATYPE,SDWATEST       IS PROGRAM CHECK FOR AN ESTAE?
         BE    ESTWTO                  YES; ISSUE STANDARD WTO
         LA    R0,1                    ..EXTRACT PSW INTO
         ESTA  R0,R0                   ..INTO REGS 0 AND 1
         N     R0,=A(X'00010000')      TURN OFF ALL BUT PROBLEM BIT
         BNZ   WTORETN1                 =0; IN PROBLEM STATE: EXIT
         SAC   0                       SET PRIMARY SPACE MODE
         SPKA  0                       GET A KEY 0 PSW
         WTO   TEXT=(R11),LINKAGE=BRANCH,MF=(E,WTOLIST)
*                                      ISSUE WTO WITHOUT SVC35
         B     WTORETN                 CONTINUE
ESTWTO   DS    0H
         WTO   TEXT=(R11),MF=(E,WTOLIST)
*                                      ISSUE WTO WITH SVC35
WTORETN  DS    0H
         MVI   WTOLINE,X'40'                     ..SET TEXT LINE
         MVC   WTOLINE+1(L'WTOLINE-1),WTOLINE    ..TO SPACES
         LA    R11,4                             ..WITH LENGTH
         STCM  R11,B'0011',WTOLINE               ..OF 4
WTORETN1 DS    0H
         EREG  R15,R1                  RESTORE REGS 15,0 AND 1
         PR                            RETURN TO CALLER
*---------------------------------------------------------------------*
*        COMMON EXIT                                                  *
*---------------------------------------------------------------------*
EXIT     DS    0H
         ENDMOD             RESTORE REGISTERS AND RETURN
*---------------------------------------------------------------------*
*        CONSTANTS                                                    *
*---------------------------------------------------------------------*
*        *---------------------------------------*
*        *     WTO PARMLIST MODEL                *
*        *---------------------------------------*
WTOLISTM WTO   TEXT=(R11),MF=L
LWTOLIST EQU   *-WTOLISTM
*        *---------------------------------------*
*        *     USER PARM NOT SUPPLIED            *
*        *---------------------------------------*
NPARMSG  DC    AL2(LNPARMSG)
         DC    C'User parm has not been supplied - percolating'
LNPARMSG EQU   *-NPARMSG
*        *---------------------------------------*
*        *     SDWA ADDRESS                      *
*        *---------------------------------------*
SDWMSG1  DC    AL2(LSDWMSG1)
         DC    C'SDWA address: '
SDWAADDR DS    CL8
         DC    C' '
LSDWMSG1 EQU   *-SDWMSG1
*        *---------------------------------------*
*        *     ABEND CODE                        *
*        *---------------------------------------*
ARRMSG1  DC    AL2(LARRMSG1)
         DC    C'Abend code:   '
ABNDCODE DS    CL4
         DC    C' '
LARRMSG1 EQU   *-ARRMSG1
*        *---------------------------------------*
*        *     DISPLAY MODULE INFORMATION        *
*        *---------------------------------------*
DMODMSG  DC    AL2(LDMODMSG)
         DC    C'Module name:  '
DMOD1    DC    CL8'n/a'
         DC    C'  Entry point: '
DMODLOD  DC    CL8'n/a'
LDMODMSG EQU   *-DMODMSG
*        *---------------------------------------*
*        *     DISPLAY PSW                       *
*        *---------------------------------------*
DPSWMSG  DC    AL2(LDPSWMSG)
         DC    C'The PSW at time of Error:  '
DPSW1    DS    CL8
         DC    C'  '
DPSW2    DS    CL8
         DC    C'  Offset: '
OFFSET   DC    CL8'n/a'
LDPSWMSG EQU   *-DPSWMSG
*        *---------------------------------------*
*        *     GENERAL REGISTERS                 *
*        *---------------------------------------*
GENREGS  DC    AL2(LGENREGS)
         DC    C'General registers at abend:'
LGENREGS EQU   *-GENREGS
*        *---------------------------------------*
*        *     DISPLAY REGISTERS 1               *
*        *---------------------------------------*
MREG1    DC    AL2(LMREG1)
         DC    C'   R0:'
DREG0    DS    CL8
         DC    C'    R1:'
DREG1    DS    CL8
         DC    C'    R2:'
DREG2    DS    CL8
         DC    C'    R3:'
DREG3    DS    CL8
LMREG1   EQU   *-MREG1
*        *---------------------------------------*
*        *     DISPLAY REGISTERS 2               *
*        *---------------------------------------*
MREG2    DC    AL2(LMREG2)
         DC    C'   R4:'
DREG4    DS    CL8
         DC    C'    R5:'
DREG5    DS    CL8
         DC    C'    R6:'
DREG6    DS    CL8
         DC    C'    R7:'
DREG7    DS    CL8
LMREG2   EQU   *-MREG2
*        *---------------------------------------*
*        *     DISPLAY REGISTERS 3               *
*        *---------------------------------------*
MREG3    DC    AL2(LMREG3)
         DC    C'   R8:'
DREG8    DS    CL8
         DC    C'    R9:'
DREG9    DS    CL8
         DC    C'   R10:'
DREG10   DS    CL8
         DC    C'   R11:'
DREG11   DS    CL8
LMREG3   EQU   *-MREG3
*        *---------------------------------------*
*        *     DISPLAY REGISTERS 4               *
*        *---------------------------------------*
MREG4    DC    AL2(LMREG4)
         DC    C'  R12:'
DREG12   DS    CL8
         DC    C'   R13:'
DREG13   DS    CL8
         DC    C'   R14:'
DREG14   DS    CL8
         DC    C'   R15:'
DREG15   DS    CL8
LMREG4   EQU   *-MREG4
*        *---------------------------------------*
*        *     ACCESS  REGISTERS                 *
*        *---------------------------------------*
ACCREGS  DC    AL2(LACCREGS)
         DC    C'Access registers at abend:'
LACCREGS EQU   *-ACCREGS
*        *---------------------------------------*
*        *     DISPLAY ACCESS REGISTERS          *
*        *---------------------------------------*
MAR1     DC    AL2(LMAR1)
         DC    C'  AR0:'
DAR0     DS    CL8
         DC    C'   AR1:'
DAR1     DS    CL8
         DC    C'   AR2:'
DAR2     DS    CL8
         DC    C'   AR3:'
DAR3     DS    CL8
LMAR1    EQU   *-MAR1
*        *---------------------------------------*
*        *     DISPLAY REGISTERS 2               *
*        *---------------------------------------*
MAR2     DC    AL2(LMAR2)
         DC    C'  AR4:'
DAR4     DS    CL8
         DC    C'   AR5:'
DAR5     DS    CL8
         DC    C'   AR6:'
DAR6     DS    CL8
         DC    C'   AR7:'
DAR7     DS    CL8
LMAR2    EQU   *-MAR2
*        *---------------------------------------*
*        *     DISPLAY REGISTERS 3               *
*        *---------------------------------------*
MAR3     DC    AL2(LMAR3)
         DC    C'  AR8:'
DAR8     DS    CL8
         DC    C'   AR9:'
DAR9     DS    CL8
         DC    C'  AR10:'
DAR10    DS    CL8
         DC    C'  AR11:'
DAR11    DS    CL8
LMAR3    EQU   *-MAR3
*        *---------------------------------------*
*        *     DISPLAY REGISTERS 4               *
*        *---------------------------------------*
MAR4     DC    AL2(LMAR4)
         DC    C' AR12:'
DAR12    DS    CL8
         DC    C'  AR13:'
DAR13    DS    CL8
         DC    C'  AR14:'
DAR14    DS    CL8
         DC    C'  AR15:'
DAR15    DS    CL8
LMAR4    EQU   *-MAR4
*        *---------------------------------------*
*        *     RETRY ROUTINE ADDRESS             *
*        *---------------------------------------*
SDRETRY  DC    AL2(LSDRETRY)
         DC    C'Invoking Retry Routine at address:   '
SDRETADR DS    CL8
         DC    C' '
LSDRETRY EQU   *-SDRETRY
*        *---------------------------------------*
*        *     NO RETRY MESSAGE                  *
*        *---------------------------------------*
NRETMSG  DC    AL2(LNRETMSG)
         DC    C'Return to RTM with percolation '
LNRETMSG EQU   *-NRETMSG
*---------------------------------------------------------------------*
*        MAP WORK AREA                                                *
*---------------------------------------------------------------------*
WGRECOV  DSECT
WTOLINE  DS    CL80                    WTO MESSEGE IS MOVED HERE
DISPARM  DS    4F                      PARMLIST FOR WTORTN
WTOLIST  DS    0F,CL(LWTOLIST)         PARMLIST FOR WTO MACRO
FORMAT   DS    0F,CL256                WORK AREA
LGRECOV  EQU   *-WGRECOV
*---------------------------------------------------------------------*
*        OTHER DSECTS                                                 *
*---------------------------------------------------------------------*
         ESTPARM                       MAP USER PARMLIST
         END
