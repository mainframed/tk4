/*REXX*/ 
/*****************************************************************/
/* LISTSMF: REXX program to show SMF information.                */
/*    Note: Developed and tested on an MVS/SP 2.2.3 system.      */
/*****************************************************************/
/* MVS DATA AREAS:                                               */
/*                CVT - Communications Vector Table (@'10'x)     */
/*               SMCA - SMF Control Area                         */
/*                RDS - SMF Recording Data Set                   */
/*               SSTP - SMF Selectivity Table                    */
/*****************************************************************/
@cvt = STORAGE(10,4)                  /* get CVT address from PSAAOLD */
@cvt = D2X(C2D(@cvt))                         /* binary to dec to hex */
@cvtsmca  = STORAGE(D2X(X2D(@cvt)+196),4)      /* get CVTSMCA address */
@smca     = C2X(@cvtsmca) ; @cvtsmca = RIGHT(@smca,7)    /* trim addr */
smcasid   = STORAGE(D2X(X2D(@cvtsmca)+016),4)  /* get system id field */
smcasjwt  = STORAGE(D2X(X2D(@cvtsmca)+144),4)       /* get system jwt */
smcaprmt  = STORAGE(D2X(X2D(@cvtsmca)+208),1) /* get smf prompt flags */
@smcafrds = STORAGE(D2X(X2D(@cvtsmca)+244),4)  /* get 1st RDA address */
@smcafrds = C2X(@smcafrds)                           /* binary to hex */
@smcalrds = STORAGE(D2X(X2D(@cvtsmca)+248),4) /* get last RDA address */
@smcalrds = C2X(@smcalrds)                           /* binary to hex */
@smcasstp = STORAGE(D2X(X2D(@cvtsmca)+328),4)     /* get SSTP address */
@smcasstp = C2X(@smcasstp)                           /* binary to hex */
smcaitme  = STORAGE(D2X(X2D(@cvtsmca)+336),4)         /* get IPL time */
ipltime = C2D(smcaitme) ; iplhh = ipltime%360000         /* get hours */
iplmm = ipltime//360000 ; iplmm = iplmm%6000           /* get minutes */
iplt = RIGHT(iplhh,2,0)':'RIGHT(iplmm,2,0)            /* format HH:MM */
smcaidte  = STORAGE(D2X(X2D(@cvtsmca)+340),4)         /* get IPL date */
smcansst = STORAGE(D2X(X2D(@cvtsmca)+348),2)              /* get NSST */
smcansst = C2D(smcansst)                             /* binary to dec */
i = 0 ; endofrds = 0 ; j = 0 ; k = 0
prompt = 'NOPROMPT' ; @rds = @smcafrds ; @sstp = @smcasstp
If BITAND(smcaprmt,'80'x) = '80'x Then prompt = 'PROMPT(IPLR)'
If BITAND(smcaprmt,'40'x) = '40'x Then prompt = 'PROMPT(LIST)'
ipld = C2X(smcaidte) ; ipld = SUBSTR(ipld,3,5)
ipldays = SUBSTR(ipld,3,3) ; days = DATE(D) - ipldays
If days < 0 Then days = days + 365     /* crossed into new year */
If days = 0 Then iplday = '(Today)'
If days = 1 Then iplday = '(Yesterday)'
If days > 1 Then iplday = '('days' days ago)'
Address TSO ; "CLEAR"
Say 'CVT:'@cvt' SMCA:'@smca 'RDS:'@rds'   'TIME() DATE()
Say ' '
Say 'SMFID:'smcasid'  JWT:'smcasjwt'  'prompt'  IPL:'ipld' 'iplday' at 'iplt
Say ' '
Do While endofrds = 0 & i < 37         /* Trace the RDS chain */
   i = i + 1                                  /* count all RDSs found */
   @rdsnext= STORAGE(D2X(X2D(@rds)+4),4)          /* next RDS address */
   @rdsnext=C2X(@rdsnext)                               /* bin to hex */
   rdsflg1 = STORAGE(D2X(X2D(@rds)+12),1)              /* get RDSFLG1 */
   dump = '' ; active = '      '
   If BITAND(rdsflg1,'08'x) = '08'x Then dump = 'Dump Requested'
   If BITAND(rdsflg1,'04'x) \= '04'x Then active = 'Active'
   rdsname = STORAGE(D2X(X2D(@rds)+16),10)          /* get RDS DSName */
   rdsvol  = STORAGE(D2X(X2D(@rds)+26),6)           /* get RDS volser */
   rdscapty= STORAGE(D2X(X2D(@rds)+40),4)   /* get RDS size in blocks */
   rdsnxtbk= STORAGE(D2X(X2D(@rds)+44),4)       /* get RDS next block */
   capty = C2D(rdscapty) ; nxtbk = C2D(rdsnxtbk) ; used = nxtbk - 1
   pctused=TRUNC((used*100)/capty,1) ; pctused=RIGHT(pctused,5)'%'
   Say RIGHT(i,2,' ') rdsname rdsvol RIGHT(capty,6),
       RIGHT(used,6)' ('pctused') 'dump active
   @rds = @rdsnext ; If @rds = @smcalrds Then endofrds = 1
End
Say ' '
Say 'SMF selectivity tables defined: 'smcansst
Say ' '
bit0='80'x ; bit1='40'x ; bit2='20'x ; bit3='10'x
bit4='08'x ; bit5='04'x ; bit6='02'x ; bit7='01'x
Do kk = 1 To smcansst
   sst    = STORAGE(@sstp,60)                        /* get sst block */
   sstn   = SUBSTR(sst,1,4)                      /* get subsysname id */
   If sstn = '00000000'x Then sstn = 'Null'
   rectbl = SUBSTR(sst,17,32)           /* get record type bit string */
   rectypes = ''
   Do i = 0 to 31
      byte = SUBSTR(rectbl,i+1,1)
      k = i * 8
      If BITAND(byte,bit0)=bit0 Then rectypes = rectypes k
      If BITAND(byte,bit1)=bit1 Then rectypes = rectypes k+1
      If BITAND(byte,bit2)=bit2 Then rectypes = rectypes k+2
      If BITAND(byte,bit3)=bit3 Then rectypes = rectypes k+3
      If BITAND(byte,bit4)=bit4 Then rectypes = rectypes k+4
      If BITAND(byte,bit5)=bit5 Then rectypes = rectypes k+5
      If BITAND(byte,bit6)=bit6 Then rectypes = rectypes k+6
      If BITAND(byte,bit7)=bit7 Then rectypes = rectypes k+7
   End
   i = 0 ; k = 0 ; f = '' ; j = 0 ; jj = 0
   Do While rectypes \= ''
      i = i + 1
      PARSE VAR rectypes type.i rectypes
   End
   If i > 2 Then
         Do k = 1 to i-2
            j = k + 1 ; jj = k + 2
            If type.k = type.j - 1 & type.j = type.jj -1 Then f.k = '*'
                                                         Else f.k = ' '
         End
   rectypes = 'TYPE('
   Do k = 1 to i
      If f.k \= '*' Then Do
                            rectypes = rectypes''type.k
                            If k \= i Then rectypes = rectypes','
                                      Else rectypes = rectypes')'
                         End
                    Else Do
                           rectypes = rectypes''type.k':'
                           Do While f.k = '*' ; k=k+1 ; End
                         End
   End
   If RIGHT(rectypes,1) = ':' Then  /* compensate for single type */
      Do 
         rectypes = LEFT(rectypes,LENGTH(rectypes)-1)')'
         nop
      End
   line2 = ''
   If LENGTH(rectypes) >70 Then
      Do 
         Do i = 70 to 1 By -1
            If SUBSTR(rectypes,i,1) = ',' Then Leave
         End
         line2 = SUBSTR(rectypes,i+1,60)
         rectypes = LEFT(rectypes,i)
      End
   If sstn = 'Null' Then rectypes = ''
   Say RIGHT(kk,2,' ') sstn rectypes
   If line2 \= '' Then Say '             'line2
   @sstp  = D2X(X2D(@sstp)+60)                    /* bump to next sst */
End
Say ' '
Say 'SMF analysis completed: 'TIME()
Exit
