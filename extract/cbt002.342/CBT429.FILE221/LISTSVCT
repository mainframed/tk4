/*REXX*/ 
/*****************************************************************/
/*LISTSVCT: REXX program to display SVC table from CSTOR.        */
/*    Note: Developed and tested on an MVS/SP 2.2.3 system.      */
/*****************************************************************/
/* MVS DATA AREAS:                                               */
/*                CVT - Communications Vector Table (@'10'x)     */
/*               SCVT - Supervisor Call Vector Table             */
/*               SVCT - SVC Table                                */
/*                                                               */
/*                                                               */
/*****************************************************************/
/*--------------virtual storage map definition section----------------*/
Numeric Digits 10           /* required to handle decimal conversions */
@cvt = STORAGE(10,4)                  /* get CVT address from PSAAOLD */
@cvt = D2X(C2D(@cvt))                    /* binary to hex             */
@cvtreal  = STORAGE(D2X(X2D(@cvt)+284),4)    /* get CVTREAL address   */
@cvtreal  = D2X(C2D(@cvtreal))                 /* binary to hex       */
@cvtshrvm = STORAGE(D2X(X2D(@cvt)+416),4)    /* get CVTSHRVM address  */
@cvtshrvm = D2X(C2D(@cvtshrvm))                /* binary to hex       */
@cvtgda   = STORAGE(D2X(X2D(@cvt)+560),4)    /* get CVTGDA address    */
@cvtgda   = D2X(C2D(@cvtgda))                  /* binary to hex       */
@gdacsa   = D2X(X2D(@cvtgda)+108)            /* locate GDACSAstarts   */
@gdacsa   = D2X(C2D(STORAGE(@gdacsa,4)))       /*  get GDACSA         */
@gdacsasz = D2X(X2D(@cvtgda)+112)            /* locate GDACSASiZe     */
@gdacsasz = D2X(C2D(STORAGE(@gdacsasz,4)))     /*  get GDACSASiZe     */
@gdaecsa  = D2X(X2D(@cvtgda)+124)            /* locate GDAECSAstarts  */
@gdaecsa  = D2X(C2D(STORAGE(@gdaecsa,4)))      /*  get GDAECSA        */
@gdaecsas = D2X(X2D(@cvtgda)+128)            /* locate GDAECSASize    */
@gdaecsas = D2X(C2D(STORAGE(@gdaecsas,4)))     /*  get GDAECSAS       */
@cvtsmext = STORAGE(D2X(X2D(@cvt)+1196),4)   /* get CVTSMEXT address  */
@cvtsmext = D2X(C2D(@cvtsmext))                /* binary to hex       */
@cvtmlpas = D2X(X2D(@cvtsmext)+8)            /* locate CVTMLPAStarts  */
@cvtmlpas = D2X(C2D(STORAGE(@cvtmlpas,4)))     /*  get CVTMLPAS       */
@cvtmlpae = D2X(X2D(@cvtsmext)+12)           /* locate CVTMLPAEnds    */
@cvtmlpae = D2X(C2D(STORAGE(@cvtmlpae,4)))     /*  get CVTMLPAE       */
@cvtflpas = D2X(X2D(@cvtsmext)+16)           /* locate CVTFLPAStarts  */
@cvtflpas = D2X(C2D(STORAGE(@cvtflpas,4)))     /*  get CVTFLPAS       */
@cvtflpae = D2X(X2D(@cvtsmext)+20)           /* locate CVTFLPAEnds    */
@cvtflpae = D2X(C2D(STORAGE(@cvtflpae,4)))     /*  get CVTFLPAE       */
@cvtplpas = D2X(X2D(@cvtsmext)+24)           /* locate CVTPLPAStarts  */
@cvtplpas = D2X(C2D(STORAGE(@cvtplpas,4)))     /*  get CVTPLPAS       */
@cvtplpae = D2X(X2D(@cvtsmext)+28)           /* locate CVTPLPAEnds    */
@cvtplpae = D2X(C2D(STORAGE(@cvtplpae,4)))     /*  get CVTPLPAE       */
@cvtrwns  = D2X(X2D(@cvtsmext)+32)           /* locate CVTRWNStarts   */
@cvtrwns  = D2X(C2D(STORAGE(@cvtrwns,4)))      /*  get CVTRWNS        */
@cvtrwne  = D2X(X2D(@cvtsmext)+36)           /* locate CVTRWNEnds     */
@cvtrwne  = D2X(C2D(STORAGE(@cvtrwne,4)))      /*  get CVTRWNE        */
@cvtrons  = D2X(X2D(@cvtsmext)+40)           /* locate CVTRONStarts   */
@cvtrons  = D2X(C2D(STORAGE(@cvtrons,4)))      /*  get CVTRONS        */
@cvtrone  = D2X(X2D(@cvtsmext)+44)           /* locate CVTRONEnds     */
@cvtrone  = D2X(C2D(STORAGE(@cvtrone,4)))      /*  get CVTRONE        */
@cvterwns = D2X(X2D(@cvtsmext)+48)           /* locate CVTERWNStarts  */
@cvterwns = D2X(C2D(STORAGE(@cvterwns,4)))     /*  get CVTERWNS       */
@cvterwne = D2X(X2D(@cvtsmext)+52)           /* locate CVTERWNEnds    */
@cvterwne = D2X(C2D(STORAGE(@cvterwne,4)))     /*  get CVTRRWNE       */
@cvteplps = D2X(X2D(@cvtsmext)+56)           /* locate CVTEPLPStarts  */
@cvteplps = D2X(C2D(STORAGE(@cvteplps,4)))     /*  get CVTEPLPS       */
@cvteplpe = D2X(X2D(@cvtsmext)+60)           /* locate CVTEPLPEnds    */
@cvteplpe = D2X(C2D(STORAGE(@cvteplpe,4)))     /*  get CVTRPLPE       */
@cvteflps = D2X(X2D(@cvtsmext)+64)           /* locate CVTEFLPStarts  */
@cvteflps = D2X(C2D(STORAGE(@cvteflps,4)))     /*  get CVTEFLPS       */
@cvteflpe = D2X(X2D(@cvtsmext)+68)           /* locate CVTEFLPEnds    */
@cvteflpe = D2X(C2D(STORAGE(@cvteflpe,4)))     /*  get CVTRFLPE       */
@cvtemlps = D2X(X2D(@cvtsmext)+72)           /* locate CVTEMLPStarts  */
@cvtemlps = D2X(C2D(STORAGE(@cvtemlps,4)))     /*  get CVTEMLPS       */
@cvtemlpe = D2X(X2D(@cvtsmext)+76)           /* locate CVTEMLPEnds    */
@cvtemlpe = D2X(C2D(STORAGE(@cvtemlpe,4)))     /*  get CVTRMLPE       */
        /*------simplify variable names & make addresses decimal------*/
@csa1g  = @gdacsa    ; @csa2g = D2X(X2D(@gdacsasz)+X2D(@gdacsa)-1)/* g*/
   csa1 = X2D(@csa1g) ; csa2 = X2D(@csa2g)                    /* csa  */
@mlpa1  = @cvtmlpas  ; @mlpa2 = @cvtmlpae                     /* mlpa */
   mlpa1 = X2D(@mlpa1) ; mlpa2 = X2D(@mlpa2)
@flpa1  = @cvtflpas  ; @flpa2 = @cvtflpae                     /* flpa */
   flpa1 = X2D(@flpa1) ; flpa2 = X2D(@flpa2)
@plpa1  = @cvtplpas  ; @plpa2 = @cvtplpae                     /* plpa */
   plpa1 = X2D(@plpa1) ; plpa2 = X2D(@plpa2)
@sqa1   = D2X(X2D(@cvtplpae)+1) ; @sqa2 = D2X(X2D(@cvtrwns)-1)/* sqa  */
   sqa1 = X2D(@sqa1) ; sqa2 = X2D(@sqa2)
@nuc1   = @cvtrwns   ; @nuc2  = @cvterwne                     /* nuc  */
   nuc1 = X2D(@nuc1) ; nuc2 = X2D(@nuc2)
@esqa1  = D2X(X2D(@nuc2)+1) ; @esqa2 = D2X(X2D(@cvteplps)-1)  /* esqa */
  esqa1 = X2D(@esqa1) ; esqa2 = X2D(@esqa2)
@eplpa1 = @cvteplps  ; @eplpa2 = @cvteplpe                    /* eplpa*/
 eplpa1 = X2D(@eplpa1) ; eplpa2 = X2D(@eplpa2)
@eflpa1 = @cvteflps  ; @eflpa2 = @cvteflpe                    /* eflpa*/
 eflpa1 = X2D(@eflpa1) ; eflpa2 = X2D(@eflpa2)
@emlpa1 = @cvtemlps  ; @emlpa2 = @cvtemlpe                    /* emlpa*/
 emlpa1 = X2D(@emlpa1) ; emlpa2 = X2D(@emlpa2)
@ecsa1g = @gdaecsa   ; @ecsa2g= D2X(X2D(@gdaecsas)+X2D(@gdaecsa)-1)/*g*/
  ecsa1 = X2D(@ecsa1g) ; ecsa2 = X2D(@ecsa2g)
@eprivs = X2D(@ecsa2g)+1                               /* ext private */
@eprive = 2147483647                         /* fixed by architecture */
 epriv1 = @eprivs ; epriv2 = @eprive
@psas   = 0 ; @psae = 4095                       /* psa fixed by arch */
   psa1 = @psas ; psa2 = @psae
@prive  = X2D(@csa1g)-1 ; @privs = X2D(@psae)+1            /* private */
  priv1 = @privs ; priv2 = @prive
              /*------------------------------------------------------*/
             /* Usage Notes: Hex character compares are incompatible */
            /*    for storage residency determination.  Thus, entry */
           /*     point addresses must be converted to decimal and */
          /*      VS boundary addresses must be converted to de-  */
         /*       cimal for correct compare operations.          */
        /*------------------------------------------------------*/
/*----------end of virtual storage map definition section-------------*/
@cvtabend = STORAGE(D2X(X2D(@cvt)+200),4)    /* get CVTABEND address  */
@cvtabend = D2X(C2D(@cvtabend))                /* binary to hex       */
@scvtsvct = D2X(X2D(@cvtabend)+132)          /* SCVT addressibility   */
@scvtsvct = STORAGE(@scvtsvct,4)                  /* SVCT table       */
@scvtsvct = D2X(C2D(@scvtsvct))                /* binary to hex       */
Address TSO ; "CLEAR"
Say 'CVT:'@cvt' CVTABEND:'@cvtabend' SCVTSVCT:'@scvtsvct DATE() TIME()
Say ' '
Say 'Active SVCs follow:'
Say ' '
active = 0 ; inactive = 0 ; svcapf = 0 ; svcesr = 0
nucepn = 'IGCERROR' ; Call "#NUCLKUP" nucepn ; igcerror = Result
Do i = 0 to 255                                 /* loop thru storage  */
   bytes = STORAGE(D2X(X2D(@scvtsvct)+(i*8)),8)
   addr = SUBSTR(bytes,1,4)       /* sloppy code to grab EP in binary */
   bytes = C2X(bytes)          /* legacy code before learning bit ops */
   svcep  = SUBSTR(bytes,1,8)
                                        /* determine storage location */
   addr = BITAND(addr,'7FFFFFFF'x)        /* shave off amode bit (32) */
   addr = C2D(addr)                      /* make numeric for compares */
   sloc = 'ERROR'                       /* determine module residency */
   If (addr >= csa1   & addr <= csa2  ) Then sloc = 'CSA  '
      Else If (addr >= mlpa1  & addr <= mlpa2 ) Then sloc = 'MLPA '
      Else If (addr >= flpa1  & addr <= flpa2 ) Then sloc = 'FLPA '
      Else If (addr >= plpa1  & addr <= plpa2 ) Then sloc = 'PLPA '
      Else If (addr >= sqa1   & addr <= sqa2  ) Then sloc = 'SQA  '
      Else If (addr >= nuc1   & addr <= nuc2  ) Then sloc = 'NUC  '
      Else If (addr >= esqa1  & addr <= esqa2 ) Then sloc = 'ESQA '
      Else If (addr >= eplpa1 & addr <= eplpa2) Then sloc = 'EPLPA'
      Else If (addr >= eflpa1 & addr <= eflpa2) Then sloc = 'EFLPA'
      Else If (addr >= emlpa1 & addr <= emlpa2) Then sloc = 'EMLPA'
      Else If (addr >= ecsa1  & addr <= ecsa2 ) Then sloc = 'ECSA '
      Else If (addr >= epriv1 & addr <= epriv2) Then sloc = 'EPRIV'
      Else If (addr >= priv1  & addr <= priv2 ) Then sloc = 'PRIV '
      Else If (addr >= psa1   & addr <= psa2  ) Then sloc = 'PSA  '
      inactflag = 0
      If igcerror = Right(D2X(addr),8,0)  /* normalize for match */
         Then Do
            inactive = inactive + 1
            inactflag = 1
         End
         Else active = active + 1
   svctp1 = SUBSTR(bytes,9,1)
      Select
         When svctp1 = '0'
            Then svctype = 'TYPE 1  '
         When svctp1 = '8'
            Then svctype = 'TYPE 2  '
         When svctp1 = 'C'
            Then svctype = 'TYPE 3/4'
         When svctp1 = '2'
            Then svctype = 'TYPE 6  '
      Otherwise
                 svctype = 'TYPE ?  '
      End
   svctp2 = SUBSTR(bytes,10,1)
      svcmisc = '   '
      If svctp2 = '8'
         Then Do
            svcmisc = 'APF'
            svcapf = svcapf + 1
         End
      If svctp2 = '4'
         Then Do
            svcmisc = 'ESR'
            svcesr = svcesr + 1
         End
   If inactflag = 0
      Then Say 'SVC 'RIGHT(i,3,0) '('RIGHT(D2X(i),2,0)')',
               svctype svcep sloc svcmisc
End
Say ' '
Say 'SVCTABLE processing complete ' TIME()
Say ' '
Say 'There are 'active 'active standard SVCs on this system.'
Say 'Among the active SVCs, 'svcapf 'are APF restricted.'
Say 'There are 'svcesr 'active ESR router SVCs present.'
Say 'The SVCTABLE contains 'inactive 'inactive slots (IGCERROR).'
Say '    (IGCERROR nucleus address = 'igcerror')'
Say ' '
Exit
