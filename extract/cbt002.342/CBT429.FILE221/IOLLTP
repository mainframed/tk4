/*REXX*/ 
/*****************************************************************/
/*  IOLLTP: REXX program to create LLT programs database.        */
/*    Note: Developed and tested on an MVS/SP 2.2.3 system.      */
/*****************************************************************/
/*                CVT - Communications Vector Table (@'10'x)     */
/*                LLT - Linklist Lookaside Table                 */
/*               DCB3 - Data Control Block (BDAM)                */
/*                DEB - IOS Data Extent Block                    */
/*                                                               */
/*****************************************************************/
@cvt = STORAGE(10,4)                  /* get CVT address from PSAAOLD */
@cvt = D2X(C2D(@cvt))                    /* binary to hex             */
@cvtlink  = STORAGE(D2X(X2D(@cvt)+8),4)      /* get CVTLINK address   */
@cvtlink  = D2X(C2D(@cvtlink))                 /* binary to hex       */
@dcbdebad = STORAGE(D2X(X2D(@cvtlink)+44),4)    /* LINKLIB DCB to DEB */
@dcbdebad = D2X(C2D(@dcbdebad))                 /* convert to hex     */
debflgs1  = STORAGE(D2X(X2D(@dcbdebad)+14),1)     /* LINKLIB DEBflags */
   debapfin = 'LNKLST'
   If BITAND(debflgs1,'02'x)\='02'x Then debapfin = 'APFTAB'
@cvtllta  = STORAGE(D2X(X2D(@cvt)+1244),4)   /* get CVTLLTA address   */
@cvtllta  = D2X(C2D(@cvtllta))                 /* binary to hex       */
lltcount  = C2D(STORAGE(D2X(X2D(@cvtllta)+7),1))  /* LLT libraries    */
lltllen   = C2D(STORAGE(D2X(X2D(@cvtllta)+8),1))  /* length 1st entry */
@lltentry = X2D(@cvtllta)+9           /* address of 1st LLT entry     */
Address TSO ; "CLEAR"
Say 'CVT:'@cvt' CVTLLTA:'@cvtllta' DCB:'@cvtlink,
    'DEB:'@dcbdebad' FLGS1:'C2X(debflgs1)' LNKAUTH='debapfin
Say ' '
Say 'LLT scan on 'DATE()' started: 'TIME()
Say ' '
Do i = 1 to lltcount                            /* loop thru storage  */
   lltlib.i = STORAGE(D2X(@lltentry),lltllen)   /* get the LLT entry  */
   @lltentry = @lltentry + 45                   /* bump to next entry */
   lltllen = C2D(STORAGE(D2X(@lltentry-1),1))   /* length of next  */
End
Say '--------------DATA SET NAME-----------------'
Say ' '
Do i = 1 to lltcount                            /* print the list     */
   Say SUBSTR(lltlib.i,1,44,' ') i
End
Say ' '
Say 'LLT scan completed: 'TIME()
/***************************************************************/
/* Save the LINKLIST table to a data set                       */
/***************************************************************/
Address TSO
dsn1 = 'MS01.CONYERS.LLTLIST.DATA.WORK'
"ALLOC F(LLTLIST) DA('"dsn1"') OLD RELEASE"
If RC \= 0 Then Do
   Say 'IOLLTP failed on 'dsn1' error: 'RC
   Exit
   End
Newstack 
Do i = lltcount To 1 By -1                      /* write the list */
   Push ' 'SUBSTR(lltlib.i,1,44,' ') i
End
Push ' LLTCOUNT: 'RIGHT(lltcount,4,0)'   Date: 'DATE()'   Time: 'TIME()
Push 'CVT:'@cvt' CVTLLTA:'@cvtllta' DCB:'@cvtlink,
    'DEB:'@dcbdebad' FLGS1:'C2X(debflgs1)' LNKAUTH='debapfin
Queue
'EXECIO * DISKW LLTLIST ( FINIS'
Delstack 
Say ' '
Say 'Saved LINKLIST table to DASD'
Say 'DSN: 'dsn1
Say 'Return Code: 'RC
"FREE F(LLTLIST)"
Say ' '
/***************************************************************/
/* Now process the directory blocks of each LLT library        */
/*   and save the member data to a data set.  Note that        */
/*   when we dynamically allocate each PDS, we are defining    */
/*   DCB parameters to enable reading the directory blocks.    */
/***************************************************************/
dsn2 = 'MS01.CONYERS.LLTPGMS.DATA.WORK'
"ALLOC F(LLTPGMS) DA('"dsn2"') OLD RELEASE"
If RC \= 0 Then Do
   Say 'IOLLTP failed on 'dsn2' error: 'RC
   Exit
   End
totpgms = 0
Say 'Beginning LINKLIST library contents analysis'
Say '===> note any TSO allocation error messages for skipped libraries'
Say ' '
Do i = 1 To lltcount                                /* cycle the list */
   dsn = STRIP(SUBSTR(lltlib.i,1,44))
Say ' '
   Say RIGHT(i,3,0)'  Processing 'dsn'   Mark: 'DATE() TIME()
   "ALLOC F(PDS) DA('"dsn"') SHR DSORG(PS) RECFM(F) LRECL(256) BLKSIZE(256)"
   RC1 = RC
   'EXECIO * DISKR PDS ( FINIS STEM line.'
   RC2 = RC
   "FREE F(PDS)"
   Say '       *** ALLOC RC: 'RC1'  EXECIO RC: 'RC2
   If RC2 = 0 Then Do
      Say '       *** Directory blocks read: 'line.0
      Newstack
      last = 0  /* flags when no more members indicator is detected */
      memcount = 0
      Do j = 1 To line.0
         blocklen = X2D(C2X(SUBSTR(line.j,1,2))) /* Not proud of this logic, */
         If blocklen = 0 or last = 1 Then Leave /* but seems to work --vlc  */
         ix = 3                          /* Initialize DIRBLOCK parse index */
         Do While ix < blocklen & last \= 1          /* parse this DIRBLOCK */
            pds2ftb1 = '00'x                         /* initialize apf not  */
            pds2mnm  = '        '                    /* initialize alias of */
            pds2name = SUBSTR(line.j,ix,8) ; ix = ix + 8    /* main section */
            pds2ttrp = SUBSTR(line.j,ix,3) ; ix = ix + 3
            pds2indc = SUBSTR(line.j,ix,1) ; ix = ix + 1
            udl = 0                           /* calculate user data length */
            If BITAND(pds2indc,'01'x) = '01'x Then udl = 1
            If BITAND(pds2indc,'02'x) = '02'x Then udl = udl + 2
            If BITAND(pds2indc,'04'x) = '04'x Then udl = udl + 4
            If BITAND(pds2indc,'08'x) = '08'x Then udl = udl + 8
            If BITAND(pds2indc,'10'x) = '10'x Then udl = udl + 16
            udl = udl * 2                 /* finish calc halfwords to bytes */
            If udl >= 22 & last \= 1 Then Do   /* only process likely stuff */
               ix = ix + 8             /* adjust index to skip misc 8 bytes */
               pds2atr1 = SUBSTR(line.j,ix,1) ; ix = ix + 1
               pds2atr2 = SUBSTR(line.j,ix,1) ; ix = ix + 1
               pds2stor = SUBSTR(line.j,ix,3) ; ix = ix + 3
               ix = ix + 2             /* adjust index to skip misc 2 bytes */
               pds2epa  = SUBSTR(line.j,ix,3) ; ix = ix + 3
               pds2ftb1 = SUBSTR(line.j,ix,1) ; ix = ix + 1
               ix = ix + 2             /* adjust index to skip misc 2 bytes */
                                                            /* scatter sect */
               If BITAND(pds2atr1,'04'x) = '04'x Then Do
                  pds2scat = SUBSTR(line.j,ix+33,8)
                  ix = ix + 8
                  End
                                                              /* alias sect */
               If BITAND(pds2indc,'80'x) = '80'x Then Do
                  If udl >= 32 Then Do
                     pds2epm  = SUBSTR(line.j,ix,3) ; ix = ix + 3
                     pds2mnm  = SUBSTR(line.j,ix,8) ; ix = ix + 8
                     End
                  Else Do
                     Say '*** WARNING - Missing major for alias 'pds2name' DBLK:'i
                     pds2epm = '000000'x
                     pds2mnm = '????????'
                     End
                  End
                                                             /* ssi section */
               If BITAND(pds2ftb1,'10'x) = '10'x Then Do
                  If (ix-1)//2 \= 0 Then ix = ix + 1    /* halfword alignmt */
                  pdsssiwd = SUBSTR(line.j,ix,4) ; ix = ix + 4
                  End
                                                             /* apf section */
               If BITAND(pds2ftb1,'08'x) \= '08'x Then pdsapfac = ' '/* none*/
               Else Do                                         /* maybe apf */
                  pdsapfct = SUBSTR(line.j,ix,1)
                  If pdsapfct = '01'x Then Do                /* NORMAL path */
                     ix = ix + 1
                     pdsapfac = SUBSTR(line.j,ix,1)
                     ix = ix + 1
                     If pdsapfac \= '00'x & pdsapfac \= '01'x Then Do
                        Say '*** WARNING - Invalid AC for 'pds2name' DBLK:'i
                        nop
                        End
                     End
                  If pdsapfct \= '01'x & (BITAND(pds2indc,'80'x)='80'x) Then Do
                     pdsapfac=' '
                     ix = ix - 8
                     Say '*** WARNING - Compacted alias logic for 'pds2name' DBLK:'i
                     End
                  End
               End
            Else Do                              /* too short udl, leave it */
               ix = ix + udl
               If pds2name = 'FFFFFFFFFFFFFFFF'x Then Do
                  last = 1
                  Leave
                  End
               Say '*** WARNING - too short udl for 'pds2name' DBLK:'i
               pds2atr1 = '00'x
               pds2atr2 = '00'x
               pds2stor = '000000'x
               pds2mnm  = '        '
               pdsapfac = ' '
               End
            If (ix-1)//2 \= 0 Then ix = ix + 1          /* halfword alignmt */
            If pds2name = 'FFFFFFFFFFFFFFFF'x Then Do
               last = 1
               Leave
               End
            If pds2name \= '0000000000000000'x Then Do
               memcount = memcount + 1
               Push ' 'LEFT(dsn,44,' ')' 'RIGHT(i,3,0),
                    ' 'pds2name' TTR:'C2X(pds2ttrp),
                    ' INDC:'C2X(pds2indc)' ATRBs:'C2X(pds2atr1),
                    C2X(pds2atr2)' SIZE:'C2X(pds2stor),
                    ' MAJ:'pds2mnm' AC:'C2X(pdsapfac),
                    ' DBLK:'RIGHT(i,4,0)' UDL:'RIGHT(udl,2,0),
                    ' IX:'RIGHT(ix,3,0)
               End
         End                                         /* DIRBLOCK parse done */
      End
      Say '       *** Directory blocks processed: 'j-1'  Members: 'memcount
      Queue
      'EXECIO * DISKW LLTPGMS (      '
      Delstack
      totpgms = totpgms + memcount
   End
End
Newstack 
Queue
'EXECIO * DISKW LLTPGMS ( FINIS'
Delstack 
Say ' '
Say 'Saved 'totpgms' LINKLIST program descriptor records to DASD'
Say 'DSN: 'dsn2
Say 'Return Code: 'RC
"FREE F(LLTPGMS)"
Exit
