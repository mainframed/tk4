/* REXX */
/*****************************************************************/
/*LISTADSP: REXX program to display all address space names.     */
/*    Note: Developed and tested on an MVS/SP 2.2.3 system.      */
/*****************************************************************/
/* MVS DATA AREAS:                                               */
/*                CVT - Communications Vector Table (@'10'x)     */
/*               ASVT - Address Space Vector Table               */
/*               ASCB - Address Space Control Block              */
/*               OUCB - SRM User Control Block                   */
/*                                                               */
/*****************************************************************/
@cvt = STORAGE(10,4)                  /* get CVT address from PSAAOLD */
@cvt = D2X(C2D(@cvt))                    /* binary to dec to hex      */
@cvtasvt  = STORAGE(D2X(X2D(@cvt)+556),4)    /* get CVTASVT address   */
@cvtasvt  = D2X(C2D(@cvtasvt))                 /* binary to dec to hex*/
Address TSO ; "CLEAR"
Say 'CVT: '@cvt 'CVTASVT: '@cvtasvt' ===> Scan on 'DATE()'.  Started: 'TIME()
@asvt = @cvtasvt
asvtmaxu = STORAGE(D2X(X2D(@asvt)+516),4) /* get maxuser (table size) */
Do i = 1 to C2D(asvtmaxu)                  /* initialize name buckets */
   bat.i = ''
   tso.i = ''
   stc.i = ''
End
j = 0 ; k = 0 ; tablend = 524 + (4 * (C2D(asvtmaxu)-1))
b = 0 ; t = 0 ; s = 0 ; inits = 0      /* address space type counters */
Do i = 524 to tablend By 4                      /* loop thru the ASVT */
   j = j + 1                            /* count asvt slots processed */
   @ascb = STORAGE(D2X(X2D(@asvt)+i),4)        /* get address of ASCB */
   If BITAND(LEFT(@ascb,1),'80'x)\='80'x Then Do   /* bit off, in use */
      k = k + 1                                /* count active adrspc */
      ascbasid = STORAGE(D2X(C2D(@ascb)+36),2)            /* get ASID */
      @ascboucb = STORAGE(D2X(C2D(@ascb)+144),4)  /* get OUCB address */
      @ascbjbni = STORAGE(D2X(C2D(@ascb)+172),4)  /* get JOBN address */
      jbni = '        ' ; @ascbjbni = D2X(C2D(@ascbjbni))
      If @ascbjbni \= 0 Then jbni = STORAGE(@ascbjbni,8)
      @ascbjbns = STORAGE(D2X(C2D(@ascb)+176),4)  /* get STCN address */
      jbns = '        ' ; @ascbjbns = D2X(C2D(@ascbjbns))
      If @ascbjbns \= 0 Then jbns = STORAGE(@ascbjbns,8)
      oucbsubn = STORAGE(D2X(C2D(@ascboucb)+176),4)    /* subsys name */
      oucbtrxn = STORAGE(D2X(C2D(@ascboucb)+200),8)    /* transn name */
      oucbusrd = STORAGE(D2X(C2D(@ascboucb)+208),8)         /* userid */
      /* BATCH JOBS */
      If oucbsubn = 'STC ' & jbns = 'INIT    ' Then inits = inits + 1
      If oucbsubn = 'JES2' & jbns = 'INIT    ' & jbni = oucbtrxn Then Do
         inits = inits + 1
         b = b + 1
         bat.b = oucbtrxn
         End
      /* TSO USERS  */
      If oucbsubn = 'TSO ' Then Do
         t = t + 1
         If oucbusrd = '        ' Then tso.t = '????????' /* missing lid */
                                  Else tso.t = oucbusrd
         End
      /* STARTED TASKS */
      If oucbsubn = 'STC ' & oucbtrxn \= 'INIT    ' & jbns \= 'INIT    ' Then Do
         s = s + 1
         stc.s = oucbtrxn
         End
      End
End
Say ' '
Say RIGHT(inits,4,' ')' Initiators defined.  'RIGHT(b,3,' ')' Batch jobs active:'
If b > 0 Then Do i = 1 To b By 8
   c1=i ; c2=i+1 ; c3=i+2 ; c4=i+3 ; c5=i+4 ; c6=i+5 ; c7=i+6 ; c8=i+7
   Say '     'bat.c1' 'bat.c2' 'bat.c3' 'bat.c4,
              bat.c5' 'bat.c6' 'bat.c7' 'bat.c8
   End
Say ' '
Say RIGHT(t,4,' ')' TSO sessions:'
If t > 0 Then Do i = 1 To t By 8
   c1=i ; c2=i+1 ; c3=i+2 ; c4=i+3 ; c5=i+4 ; c6=i+5 ; c7=i+6 ; c8=i+7
   Say '     'tso.c1' 'tso.c2' 'tso.c3' 'tso.c4,
              tso.c5' 'tso.c6' 'tso.c7' 'tso.c8
   End
Say ' '
Say RIGHT(s,4,' ')' Started tasks:'
If s > 0 Then Do i = 1 To s By 8
   c1=i ; c2=i+1 ; c3=i+2 ; c4=i+3 ; c5=i+4 ; c6=i+5 ; c7=i+6 ; c8=i+7
   Say '     'stc.c1' 'stc.c2' 'stc.c3' 'stc.c4,
              stc.c5' 'stc.c6' 'stc.c7' 'stc.c8
   End
Say ' '
Say RIGHT(k,4,' ')' slots in use out of a total 'j' scanned.  Completed: 'TIME()
Exit
