TIMINGS  TITLE 'Test execution speed of various instructions.'
*
* Rick Hevener, Consultant, USC Computer Services, 1244 Blossom St.,
* Columbia, SC 29208; ph. 803-777-2430; e-mail rick.hevener@sc.edu
*
* Program written in December, 1996.
*
* Revised October, 1999:  for 9672-R55 and RC6 put several instr.
* inside each loop, aligned each loop on DWD; employed loop macro;
* added SQDR, SQER; made numerous cosmetic changes.
*
         SPACE 2
         PRINT OFF
         SPACE 1
         MACRO
&NAME    REGEQU
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
F0       EQU   0
F2       EQU   2
F4       EQU   4
F6       EQU   6
         MEND
         PRINT ON
         SPACE 1
         MACRO
&N       LOOP  &I,&O1,&O2
.* If no label is supplied when this macro is invoked, the instruction
.* name (&I) will be used as the branch label for the loop.
&L       SETC  '&I'
         AIF   ('&N' EQ '').A
&L       SETC  '&N'
.A       MVC   L0108,=CL08'&L'
         BAS   R11,CPUTIMER        TIME BEFORE LOOP
         CNOP  0,8                 ALIGN ON DOUBLE WORD
         SPACE 1
&L       DS    0H
&C       SETA  NINST
         AIF   ('&O2' EQ '').C
.B       &I    &O1,&O2
&C       SETA  &C-1
         AIF   (&C GT 0).B
         AGO   .D
.C       &I    &O1
&C       SETA  &C-1
         AIF   (&C GT 0).C
.D       BCT   R4,&L
         BAS   R10,PSTLOOP         POST-LOOP PROCESSING
         MEND
         SPACE 3
TIMINGS  CSECT
TIMINGS  AMODE 24
TIMINGS  RMODE 24
         SPACE 1
         PRINT NOGEN
         REGEQU
         PRINT GEN
NINST    EQU   11                  NUMBER OF INSTR. PER CYCLE
         SPACE 1
         B     104(,R15)           BRANCH TO STM
         DC    AL1(27),CL27'TIMINGS  &SYSDATE &SYSTIME'
         USING *,R13               TELL ASSEMBLER ABOUT FUTURE BASE
         DC    18F'0'              SAVE AREA
         STM   R14,R12,12(R13)     STORE REGISTERS IN OLD SAVE AREA
         LA    R15,32(,R15)        NEW SAVE AREA ADDRESS
         ST    R15,8(,R13)         FORWARD  LINKAGE (NEW IN OLD)
         ST    R13,4(,R15)         BACKWARD LINKAGE (OLD IN NEW)
         LR    R13,R15             ESTABLISH BASE REG. AS NEW SA ADDR
         SPACE 1
         LA    R12,TIMINGS+4096    SET UP A 2ND BASE REG.
         LA    R12,32(,R12)
         USING TIMINGS+4096+32,R12 TELL ASSEMBLER ABOUT IT
         SPACE 1
* Initialize registers that will not be changed.
         L     R5,NCY              NUMBER OF CYCLES PER LOOP
         LA    R6,1
         LD    F4,ONE
         LD    F6,ONE+8
         SPACE 1
         OPEN  (PRINT,OUTPUT)
         SPACE 1
         MVC   L00,SPACES          CLEAR LINE
         MVC   L0041,=CL41'1TIMINGS Version 2.03'
         BAS   R11,PUTPRINT        WRITE HEADER
         SPACE 1
         MVC   L0041,=CL41'0Number of cycles per loop:'
         LR    R9,R5               NUMBER OF CYCLES PER LOOP
         BAS   R10,PSTLOOPD        WRITE OUT THE NUMBER
         SPACE 1
         MVC   L0041,=CL41'0Number of instructions per cycle:'
         LA    R9,NINST            NUMBER OF INSTR. PER CYCLE
         BAS   R10,PSTLOOPD        WRITE OUT THE NUMBER
*                                  AND SET THINGS UP FOR FIRST LOOP
         SPACE 1
         MVC   L00,SPACES          CLEAR LINE
         BAS   R11,PUTPRINT        WRITE A BLANK LINE
         SPACE 1
         MVC   L1012,=CL12'picoseconds:' SET UP FOR LOOPS
         SPACE 1
         STIMER TASK,BINTVL=LONGTIME
OVERHEAD LOOP  DS,0H               OBTAIN CYCLE OVERHEAD TIME
* The cycle overhead time will be subtracted from the time per cycle
* for each of the loops below.
         LOOP  AR,R2,R6
         LOOP  ALR,R2,R6
         LOOP  AXR,F0,F4
         LOOP  ADR,F0,F4
         LOOP  AER,F0,F4
         LOOP  AWR,F0,F4
         LOOP  AUR,F0,F4
         LOOP  NR,R2,R6
         LOOP  BALR,R2,R0
         LOOP  BASR,R2,R0
         LOOP  BASSM,R2,R0
         LOOP  BSM,R2,R0
         LOOP  BR,R0
         LOOP  BNOR,R0
         LOOP  NOP,0
         LOOP  BCTR,R2,R0
         LOOP  CR,R2,R6
         LOOP  CDR,F0,F4
         LOOP  CER,F0,F4
         LOOP  CLR,R2,R6
         LOOP  DR,R2,R6
         LOOP  DXR,F0,F4
         LOOP  DDR,F0,F4
         LOOP  DER,F0,F4
         LOOP  XR,R2,R6
         LOOP  HDR,F0,F4
         LOOP  HER,F0,F4
         LOOP  IPM,R2
         LOOP  LR,R2,R6
         LOOP  LDR,F0,F4
         LOOP  LER,F0,F4
         LOOP  LA,R2,4095(R6,R2)
         LOOP  LTR,R2,R6
         LOOP  LTDR,F0,F4
         LOOP  LTER,F0,F4
         LOOP  LCR,R2,R6
         LOOP  LCDR,F0,F4
         LOOP  LCER,F0,F4
         LOOP  LNR,R2,R6
         LOOP  LNDR,F0,F4
         LOOP  LNER,F0,F4
         LOOP  LPR,R2,R6
         LOOP  LPDR,F0,F4
         LOOP  LPER,F0,F4
         LOOP  LRDR,F0,F4
         LOOP  LRER,F0,F4
         LOOP  MR,R2,R6
         LOOP  MXR,F0,F4
         LOOP  MXDR,F0,F4
         LOOP  MDR,F0,F4
         LOOP  MER,F0,F4
         LOOP  OR,R2,R6
         LOOP  SPM,R2
         LOOP  SLDA,R2,63
         LOOP  SLDL,R2,63
         LOOP  SLA,R2,63
         LOOP  SLL,R2,63
         LOOP  SRDA,R2,63
         LOOP  SRDL,R2,63
         LOOP  SRA,R2,63
         LOOP  SRL,R2,63
         LOOP  SQDR,F0,F4
         LOOP  SQER,F0,F4
         LOOP  SR,R2,R6
         LOOP  SLR,R2,R6
         LOOP  SXR,F0,F4
         LOOP  SDR,F0,F4
         LOOP  SER,F0,F4
         LOOP  SWR,F0,F4
         LOOP  SUR,F0,F4
         SPACE 1
         MVC   L00,SPACES          CLEAR LINE
         MVC   L0041,=CL41'0**** Normal program end'
         BAS   R11,PUTPRINT
         SPACE 1
*DONE     DS    0H
         CLOSE (PRINT)
         SPACE 1
         L     R13,4(,R13)         OLD SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             RC = 0
         BR    R14                 RETURN
         SPACE 2
CPUTIMER CPUTIMER MIC,TM           BIT 51 = 1 MICROSEC.
         BR    R11
         SPACE 2
PSTLOOP  LM    R8,R9,TM            SAVE TIME BEFORE LOOP
         BAS   R11,CPUTIMER        TIME AFTER LOOP
*         MVC   L00,SPACES          CLEAR LINE
*         BAS   R7,HEXO
*         STM   R8,R9,TMH
*         LM    R8,R9,TM
*         BAS   R7,HEXO
*         LM    R8,R9,TMH
*         MVC   L00,SPACES          CLEAR LINE
*         MVC   L1012,=CL12'picoseconds:' SET UP FOR LOOPS
*         B     HEXOA
*HEXO     DS    0H
*         HEXO  R8,L00+01
*         HEXO  R9,L00+10
*         BAS   R11,PUTPRINT
*         BR    R7
*TMH      DS    2F
*HEXOA    DS    0H
         SPACE 1
* COMPUTE ELAPSED TIME.
         SL    R9,TM+4
         BC    3,PSTLOOPA
         SPACE 1
         BCTR  R8,0                BORROW
         SPACE 1
PSTLOOPA SL    R8,TM
         SPACE 1
* MAKE R8-R9 < 2**31.
         LNR   R2,R6               # OF SHIFTS = -1 (SET UP FOR LOOP)
         SLDL  R8,2                RECOVER ONE OF THESE INSIDE LOOP,
*                                  OTHER ONE LATER ON
         SPACE 1
PSTLOOPB AR    R2,R6               # = # + 1
         SRDL  R8,1
         LTR   R8,R8
         BNZ   PSTLOOPB
         SPACE 1
         SRDL  R8,1                NOW R8-R9 < 2**31
         SPACE 1
         M     R8,=F'1E6'          CONVERT MICROSEC. TO PICOSEC.
* RESTORE SHIFTS, MAKING BIT 51 = 1 PICOSEC.
         SLDL  R8,0(R2)
* PREVENT 0C9, MAKING BIT 60 = 1 PICOSEC.
         SRDL  R8,9
         LR    R4,R5
         DR    R8,R5               ELAPSED TIME / CYCLES
         SRL   R9,3                PICOSEC. PER CYCLE
         SPACE 1
         CLC   L0108,=CL08'OVERHEAD' DOING OVERHEAD LOOP?
         BNE   PSTLOOPC
         ST    R9,TMO              SAVE CYCLE OVERHEAD TIME
         B     PSTLOOPD
         SPACE 1
PSTLOOPC DS    0H
         S     R9,TMO              SUBTRACT CYCLE OVERHEAD TIME
         LA    R2,NINST            NUMBER OF INSTR. PER CYCLE
         LR    R8,R9               GET READY FOR DIVISION
         SRDA  R8,32
         DR    R8,R2               TIME PER INSTR.
         SPACE 1
* WRITE OUT THE NUMBER.
PSTLOOPD DS    0H
         CVD   R9,WORK
         MVC   L41LP,PTRN
         LA    R1,L41LP+LPTRN-1
         EDMK  L41LP,WORK+2
         BNM   PSTLOOPE
         SPACE 1
         BCTR  R1,0
         MVI   0(R1),C'-'
         SPACE 1
PSTLOOPE DS    0H
         BAS   R11,PUTPRINT
* Set things up for next loop.
         LR    R4,R5               NUMBER OF CYCLES PER LOOP
         SR    R2,R2               SET UP REGS FOR COMPUTATIONS
         LR    R3,R6
         LDR   F0,F4
         LDR   F2,F6
         BR    R10
         SPACE 2
PUTPRINT PUT   PRINT,L00
         BR    R11
         DROP  R12,R13
         SPACE 3
         LTORG
         SPACE 1
         PRINT NOGEN
PRINT    DCB   MACRF=PM,DSORG=PS,DDNAME=SYSPRINT,                      X
               RECFM=FBA,LRECL=121
         SPACE 1
ONE      DC    L'1'
LONGTIME DC    F'2E9'
NCY      DC    F'5E3'              NUMBER OF CYCLES PER LOOP
* Pattern for editing integers follows:
PTRN     DC    X'404020206B2020206B2020206B202120'
LPTRN    EQU   *-PTRN
SPACES   DC    CL121' '
         SPACE 1
TM       DS    D
WORK     DS    D
TMO      DS    F
L00      DS    CL121
L0041    EQU   L00+00,41
L0108    EQU   L00+01,08
L1012    EQU   L00+10,12
L41LP    EQU   L00+41,LPTRN
         SPACE 1
         END   TIMINGS
