
                         LIBCALL Command

Disclaimer:

         This software is in the public domain.  You are free to
         use it on an 'as is' basis.  Although the software
         performed to specifications when written, it is not
         guaranteed to work on your system, nor to continue to
         work on your system.  No warrantee or commitment of
         support is stated, intended or implied in supplying
         this software, and no liability of any kind is assumed
         by the supplier(s).

GENERAL:

    LIBCALL transfers control to modules with a 'CALL' type of
    parameter list, with a 'STEPLIB' option.  LIBCALL also can
    accept program parameters in lower case.

    Syntax -

      LIBCALL   name  'parm'  CAPS  SYSLIBS
      LCALL                   ASIS  STEPLIB('dsn1' 'dsn2' ...)
                                    TASKLIB('dsn1' 'dsn2' ...)
                                        LIB('dsn1' 'dsn2' ...)
                                     CONCAT('dsn1' 'dsn2' ...)

DIRECTORY:

    This PDS contains the following members relating to LIBCALL:

    LCALLDOC - This documentation.
    LCALLJCL - Non-SMP install jobstream.
    #LIBCALL - HELP member.
    #LCALL   - Alias for HELP member.  Needed for IEBCOPY in
               the non-SMP install.
    LCALLCPY - IEBCOPY control cards.  Used in non-SMP install.
    LCALLLNK - LKED control cards.  Used in non-SMP install.
    LIBCALL  - Source program.

    GTEDAALC - Dynamic allocation macro, described below.
    GTEDADAT - Dynamic allocation macro, described below.
    GTEDADOC - Documentation for dynamic allocation macros,
               described below.
    GTEDASET - Dynamic allocation macro, described below.


INSTALLATION CHECK LIST:

(  )  1.  The following non-IBM macros are used to assemble
          LIBCALL. If you already have older versions in your
          system, replace them with the ones from this PDS.

            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).
            GTEDADAT - Create SVC99/IKJEFF18 control blocks.
            GTEDASET - Link SVC99/IKJEFF18 control blocks together.

(  )  2.  The following macro is documentation for the GTEDAxxx
          macros, above.  It is not used by LIBCALL, but should
          be copied into your system.

            GTEDADOC - Documentation of GTEDAxxx macros.

(  )  3.  For a non-SMP install, run the jobstream in member
          LCALLJCL of this PDS. Recommended load libraries are:

          A.  SYS1.CMDLIB
          B.  library named on the LNKLST

          Add a JOB card at the top, and edit the last few lines
          to provide the name of the selected load library, HELP
          library, and the name of this PDS.

          The jobstream does the following:

          A.  Assembles LIBCALL using the source in member
              LIBCALL of this PDS.

              Note: Access to SYS1.AMODGEN is required because
                    LIBCALL uses the CVT macro.

          B.  Linkedits LIBCALL into the selected load library,
              assigning an alias of LCALL. Attributes are RENT,
              REUS and REFR.

          C.  IEBCOPYs member #LIBCALL and alias entry #LCALL to the
              selected HELP library, renaming them LIBCALL and
              LCALL.

(  )      For an SMP install, follow your installation's procedures
          for installation of a RENT, REUS, REFR module into
          LPALIB, LINKLIB, CMDLIB, or another library on the
          LNKLST, with the HELP member being installed as a
          ++MAC into HELP or another library in the SYSHELP
          concatenation.   The ++MOD entry should have TALIAS(LCALL),
          and the ++MAC entry should have MALIAS(LCALL).

(  )  4.  If you select SYS1.LPALIB as your target library, you
          will need to IPL, including 'CLPA' in the response to
          the system parameters prompt.  This will create a new
          LPA, picking up your LIBCALL and LCALL alias in the
          process.

(  )      If you have Dynamic BLDL, and already have a version
          of LIBCALL installed, you will have to stop and restart
          the Dynamic BLDL table.

(  )      If you have ACF2, the following addition must be made
          to the ACF99@RB macro to define program pathing for
          LIBCALL to be the same as for CALL.  Without this
          change, ACF2 will not allow programs executing under
          LIBCALL to access datasets for which there are dataset
          access rules.  Refer to the ACF2 System Programmer's
          Guide for information concerning program pathing, and
          updating the ACF99@RB macro.

          *
          *
          *        LIBCALL COMMAND STRUCTURE
          *        -------------------------
          *
          LIBCALL  @CMD  LCALL
                   @TCB  (#LIBCALL,#LCALL)
          #LIBCALL @RB   LIBCALL,CALL,END,CMD=(CMD,NEXTTCB)
          #LCALL   @RB   LCALL,CALL,END,CMD=(CMD,NEXTTCB)

(  )      If you have ACF2 and are using command limiting lists,
          and are not already running a version of LIBCALL, you
          must do either one of the following:

          A.  Turn the ALLCMDS bit on in the LOGONID of selected
              users, and invoke LIBCALL with the '#' prefix.
              That is, use the name #LIBCALL or alias #LCALL. This
              limits the use of LIBCALL only to those LOGONIDs
              with the ALLCMDS bit on.  Turn the bit on with the
              following sequence from TSO READY state using a
              LOGONID with appropriate authority to change the
              bit.

                   ACF
                   LIST logonid
                   CHANGE * ALLCMDS
                   END

          B.  Add the following macro to the command limiting
              list, then assemble, link, and IPL with CLPA.  This
              makes LIBCALL available to everyone.

                   $TSOCMD  (LIBCALL,LCALL)

