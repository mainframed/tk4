**********************************************************************
*
* PROGRAM VSMDUMP (VIRTUAL STORAGE MANAGER DUMP) AND
*          VSMDATA (VSM DUMP FOR CURRENT ADDRESS SPACE)
*
*  PROGRAM TO RUN ALL THE DQE'S FOR AN MVS/XA ADDRESS SPACE
*  ALSO SELECTED DATA FROM THE GDA AND LDA ARE ROUTED TO FILE OUTPUT
*  ALSO CVT LPA AND NUC DATA IS ROUTED TO FILE OUTPUT
*  THE SPT IS LOOKED AT
*  THE LPA DIRECTORY IS DUMPED
*
*  TWO OUTPUTS, DDNAMES PRINT AND OUTPUT
*  DCB ATTRIBUTES ARE HARD CODED IN THIS PROGRAM
*  FBA 133
*
*  TO CALL AS AN IPCS VERB EXIT,  GO INTO IPCS OPTION 4 AND TYPE:
*  VERBX  VSMDUMP 'QC22505.OUTPUT.DATA'
*             OR
*  VERBX  VSMDUMP 'QC22505.OUTPUT.DATA PRINT NOLPA CDE'
*
*  REPLACE QC22505.OUTPUT.DATA WITH THE TARGET OUTPUT FILE.  THE
*  FULLY QUALIFIED NAME IS REQUIRED, THE FILE MUST BE SEQUENTIAL,
*  THE FILE WILL BE CREATED IF NECESSARY.   THE DCB IS HARD CODED
*  IN THIS PROGRAM.
*
*  THE KEYWORDS PRINT, NOLPA, AND CDE ARE OPTIONS.
*  PRINT  CAUSES THE VSM DATA TO BE PUT IN THE IPCS PRINT DATASET.
*  CDE    CAUSES CDE RECORDS TO BE DISPLAYED IN THE IPCS PRINT DATASET.
*  NOLPA  CAUSES TYPE 3 AND 4 RECORDS FOR LPA MODULES TO BE OMITTED
*         IN THE OUTPUT FILE.
*
*
*  THIS PROGRAM RUNS AMODE=31 RMODE=24
*  THIS PROGRAM CAN BE COMPILED AS EITHER AN IPCS VERB EXIT OR
*  A REGULAR PROGRAM.  AS A REGULAR PROGRAM, THE CURRENT ADDRESS
*  SPACE IS PROCESSED.  AS AN IPCS VERB EXIT, THE DUMP ADDRESS SPACE
*  IS PROCESSED.
*
*  A NORMAL ASSEMBLER H COMPILE WILL COMPILE THIS PROGRAM AS AN NORMAL
*  PROGRAM.  SPECIFY  'SYSPARM(IPCS)' IN THE IEV90 PARM TO COMPILE AS
*  AN IPCS EXIT.
*  ASSEMBLER ROUTINES FG500215  ARE REQUIRED.
*                     FG201887
*                     FG201693
*
*  SIX RECORD TYPES ARE GENERATED BY THIS ROUTINE.  THEY ARE
*  IDENTIFIED BY A CHARACTER NUMBER 1 THROUGH 6 IN COLUMN 112.  THE
*  RECORD DESCRIPTIONS FOLLOW:
*  KEY:
*  HEX FIELDS:  PADDED ON LEFT WITH ZEROS.
*  DEC FIELDS:  RIGHT JUSTIFIED IN FIELD, PADDED ON LEFT WITH BLANKS
*  CHAR FIELDS: LEFT JUSTIFIED IN FIELD, PADDED ON RIGHT WITH BLANKS
*
**********************************************************************
*
*  TYPE 1:   MEMORY RECORD
*  THIS RECORD IS GENERATED FOR A DQE, OR AQAT ENTRY.  IT DESCRIBES
*  A CONTIGUOUS AREA OF MEMORY.
*
*           COL  LEN  TYPE
*
*  AREA       2    8   HEX   START ADDRESS OF THE AREA
*
*  SIZE      13    8   HEX   LENGTH OF THE AREA
*
*  ENDADDR   24    8   HEX   ENDING ADDRESS (FIRST BYTE PAST AREA)
*
*  SUBPOOL   35    8   DEC   SUBPOOL NUMBER.
*
*  KEY       46    8   DEC   MEMORY KEY.  NOT AVAILABLE FOR SUBPOOLS
*                            227, 228, 231, 241 IF PROCESSING A DUMP.
*                            THESE SUBPOOLS COME FROM THE SPT.
*
*  PGMNAME   57    8   CHAR  PROGRAM NAME ASSOCIATED WITH THE TCB WHICH
*                            DID THE GETMAIN.  FOR SYSTEM SUBPOOLS,
*                            FIXED VALUES ARE USED:
*                            226  - SQA
*                            227  - SPT CSA
*                            228  - SPT CSA
*                            231  - SPT CSA
*                            239  - SQA
*                            241  - SPT CSA
*                            245  - SQA
*                            255  - LSQA
*
*  ENTRYPT   68    8   HEX   ENTRY POINT OF THE PROGRAM ASSOCIATED WITH
*                            THE TCB WHICH DID THE GETMAIN.  FOR THE
*                            SYSTEM SUBPOOLS, THIS IS BLANK.
*
*  TCBADDR   79    8   HEX   ADDRESS OF THE TCB WHICH DID THE GETMAIN.
*                            FOR THE SYSTEM SUBPOOLS, THIS IS BLANK
*
*  SHARED    90    8   CHAR  IF THE DQE MARKS THIS SUBPOOL SHARED, THE
*                            WORD SHARED APPEARS HERE.
*                            FOR THE SYSTEM SUBPOOLS, THIS IS BLANK
*
*  OWNED    101    8   CHAR  IF THS DQE MARKS THIS SUBPOOL OWNED, THE
*                            WORD OWNED APPEARS HERE.
*                            FOR THE SYSTEM SUBPOOLS, THIS IS BLANK
*
*  RECTYPE  112    1   DEC   CONSTANT CHAR 1 FOR THIS RECORD TYPE
*
**********************************************************************
*
*
*  TYPE 2:   REGION RECORD
*  THIS RECORD IS GENERATED FOR VARIOUS SYSTEM BOUNDARY MARKERS. THE
*  FIELDS FILLED IN VARY.
*
*           COL  LEN  TYPE
*
*  AREA       2    8   HEX   START ADDRESS OF THE AREA
*                            THE EXCEPTIONS ARE LPVT END, HPVT END,
*                            REGION LIMIT, REGION END.  WHEN THIS IS
*                            THE MARKER ADDRESS.
*
*  SIZE      13    8   HEX   LENGTH OF THE AREA. BLANK FOR MARKER ADDRS
*
*  ENDADDR   24    8   HEX   ENDING ADDRESS (FIRST BYTE PAST AREA)
*                            BLANK FOR MARKER ADDRESSES.
*
*  SUBPOOL   35    8   DEC   BLANK
*
*  KEY       46    8   DEC   BLANK
*
*  PGMNAME   57    8   CHAR  VALUES:
*                            MLPA     - MODIFIED LINK PACK AREA
*                            FLPA     - FIXED LINK PACK AREA
*                            PLPA     - PAGABLE LINK PACK AREA
*                            PLPA EXT - PLPA ABOVE 16 MEG LINE
*                            FLPA EXT - FLPA ABOVE 16 MEV LINE
*                            MLPA EXT - MLPA ABOVE 16 MEG LINE
*                            R/W NUC  - READ/WRITE NUCLEUS
*                            R/O NUC  - READ ONLY NUCLEUS
*                            R/W NUCE - READ/WRITE NUCLEUS ABOVE 16MEG
*                            CSA LOW  - COMMON SERVICE AREA
*                            CSA HIGH - COMMON SERVICE AREA ABOVE 16MEG
*                            SQA LOW  - SYSTEM QUEUE AREA
*                            SQA HIGH - SYSTEM QUEUE AREA ABOVE 16MEG
*                            PVT LOW  - PRIVATE (USER) AREA
*                            PVT HIGH - PRIVATE (USER) AREA
*                            MGT AREA - VSM MANAGEMENT AREA
*                            PG TBLS  - PAGE TABLES
*                            PVT STRT - START OF USEABLE PRIVATE AREA
*                            SYSREG L - SYSTEM REGION IN PRIVATE AREA
*                            SYSREG H - SYSTEM REGION IN PRIVATE AREA
*                            LPVT END - END OF USED PART OF PVT AREA
*                            HPVT END - END OF USED PVT AREA > 16 MEG
*                            REG END  - END OF REGION FROM < 16 MEG
*                                       PARM ON EXEC. USED FIELDS
*                            REG LMT  - ACTUAL MAX ADDR+1 AVAILABLE TO
*                                       THE PRIVATE AREA BELOW 16 MEG.
*                            VSM MGMT - VIRTUAL STORAGE MANAGER
*                                       MANAGEMENT AREA.
*                            LPA DIR  - LINK PACK AREA DIRECTORY
*
*  ENTRYPT   68    8   HEX   BLANK
*
*  TCBADDR   79    8   HEX   BLANK
*
*  SHARED    90    8   CHAR  BLANK
*
*  OWNED    101    8   CHAR  SYSTEM TABLE THIS DATA TAKEN FROM.
*                            CVT, GDA, LDA
*
*  RECTYPE  112    1   DEC   CONSTANT CHAR 2 FOR THIS RECORD TYPE
*
**********************************************************************
*
*  TYPE 3:   LPA RECORD
*  THIS RECORD IS GENERATED FOR EACH MAJOR LPDE FOUND IN THE
*  LINK PACK AREA DIRECTORY.
*
*           COL  LEN  TYPE
*
*  AREA       2    8   HEX   LOAD POINT OF MODULE
*
*  SIZE      13    8   HEX   LENGTH OF THE STORAGE CONTAINING MODULE
*
*  ENDADDR   24    8   HEX   ENDING ADDRESS (FIRST BYTE PAST AREA)
*
*  SUBPOOL   35    8   DEC   SUBPOOL NUMBER.
*
*  KEY       46    8   DEC   CONTAINS AC(1) FOR APF AUTHORIZED PROGRAMS
*
*  PGMNAME   57    8   CHAR  LPA PROGRAM NAME
*
*  ENTRYPT   68    8   HEX   ENTRY POINT OF THE LPA MODULE
*
*  TCBADDR   79    8   HEX   BLANK
*
*  SHARED    90    8   CHAR  THE STRING 'LPA MOD '
*
*  OWNED    101    8   CHAR  BLANK
*
*  RECTYPE  112    1   DEC   CONSTANT CHAR 3 FOR THIS RECORD TYPE
*
**********************************************************************
*
*  TYPE 4:   ACTIVE CDE RECORD
*  THIS RECORD IS GENERATED FOR THE FIRST CDE FOUND ASSOCIATED
*  WITH A PRB FOR A TASK ON THE TCB CHAIN.  THERE MAY BE DUPLICATE
*  RECORDS FOR A CDE IF THE CDE IS FIRST FOR MORE THAN ONE PRB.
*
*           COL  LEN  TYPE
*
*  AREA       2    8   HEX   LOAD POINT OF MODULE
*
*  SIZE      13    8   HEX   LENGTH OF THE STORAGE CONTAINING MODULE
*
*  ENDADDR   24    8   HEX   ENDING ADDRESS (FIRST BYTE PAST AREA)
*
*  SUBPOOL   35    8   DEC   SUBPOOL NUMBER.
*
*  KEY       46    8   DEC   CONTAINS AC(1) FOR APF AUTHORIZED PROGRAMS
*
*  PGMNAME   57    8   CHAR  PROGRAM NAME
*
*  ENTRYPT   68    8   HEX   ENTRY POINT OF THE MODULE
*
*  TCBADDR   79    8   HEX   TCB ASSOCIATED WITH THIS PROGRAM
*
*  SHARED    90    8   CHAR  THE STRING 'LPA MOD ' IF THIS IS AN LPA
*                            MODULE.
*
*  OWNED    101    8   CHAR  IF THIS IS A MINOR CDE, THIS IS THE NAME
*                            OF THE MAJOR CDE.
*
*  RECTYPE  112    1   DEC   CONSTANT CHAR 4 FOR THIS RECORD TYPE
*
**********************************************************************
*
*  TYPE 5:   LOAD LIST RECORD
*  THIS RECORD IS GENERATED FOR EACH CDE FOUND ON THE LLE (LOAD LIST
*  ENTRY) FOR EACH TASK ON THE TCB CHAIN.  THESE ARE MODULES LOADED VIA
*  THE LOAD (SVC 6) SYSTEM CALL.  THERE MAY BE DUMPLICATES IF A MODULE
*  IS LOADED BY MORE THAN ONE TCB.
*
*           COL  LEN  TYPE
*
*  AREA       2    8   HEX   LOAD POINT OF MODULE
*
*  SIZE      13    8   HEX   LENGTH OF THE STORAGE CONTAINING MODULE
*
*  ENDADDR   24    8   HEX   ENDING ADDRESS (FIRST BYTE PAST AREA)
*
*  SUBPOOL   35    8   DEC   SUBPOOL NUMBER.
*
*  KEY       46    8   DEC   CONTAINS AC(1) FOR APF AUTHORIZED PROGRAMS
*
*  PGMNAME   57    8   CHAR  PROGRAM NAME
*
*  ENTRYPT   68    8   HEX   ENTRY POINT OF THE MODULE
*
*  TCBADDR   79    8   HEX   TCB ASSOCIATED WITH THIS PROGRAM
*
*  SHARED    90    8   CHAR  THE STRING 'LPA MOD ' IF THIS IS AN LPA
*                            MODULE.
*
*  OWNED    101    8   CHAR  IF THIS IS A MINOR CDE, THIS IS THE NAME
*                            OF THE MAJOR CDE.
*
*  RECTYPE  112    1   DEC   CONSTANT CHAR 4 FOR THIS RECORD TYPE
*
**********************************************************************
*
*  TYPE 6:   ACTIVE CDE RECORD B
*  THIS RECORD IS JUST LIKE A TYPE 4 RECORD EXCEPT IT IS GENERATED
*  FOR ENTRIES ON THE CDE CHAIN AFTER THE FIRST FOR A PRB.
*
**********************************************************************
*
*  ERROR RECORDS:
*  WHEN THIS PROGRAM IS RUNNING AS AN IPCS VERB EXIT.  ERROR RECORDS
*  ARE GENERATED TO BOTH THE PRINT AND OUTPUT DATASETS FOR STORAGE
*  LOCATIONS WHICH WERE NOT IN THE DUMP.
*
*  THESE RECORDS HAVE BLANKS IN COLUMS 1 AND 2 AND A # IN COLUMN 3.
*
**********************************************************************
*
*  SORTING RECORDS:
*  ALL RECORDS WRITTEN TO FILE OUTPUT HAVE A TRAILING RECORD CONSISTING
*  OF DASHES AND PLUSSES.  THE RECORDS IN THIS FILE MAY BE SORTED
*  AS 266 BYTE RECORDS AND THEN "FIXDCB"ED BACK TO 133 BYTE RECORDS.
*
*  THE FOLLOWING JCL WILL PERFORM THE SORT.
*
*  //QC225054 JOB (),'VSMDATA2',
*  //    NOTIFY=QC22505,
*  //    MSGLEVEL=(2,0),PRTY=0,CLASS=K,MSGCLASS=X
*  /*JOBPARM LINES=150
*  //KILL   EXEC  PGM=IEFBR14
*  //FILE     DD  DSN=QC22505.OUTPUT2.DATA,
*  //             DISP=(MOD,DELETE),UNIT=SYSDA,SPACE=(TRK,1)
*  //SORT1  EXEC  PGM=SORT,REGION=5000K
*  //*
*  //SORTLIB   DD DSN=SYS1.SORTLIB,DISP=SHR
*  //*
*  //SORTIN    DD DSN=QC22505.OUTPUT.DATA,DISP=SHR,
*  //             DCB=(LRECL=266,RECFM=FB,BLKSIZE=10640)
*  //*
*  //SORTOUT   DD DSN=QC22505.OUTPUT2.DATA,
*  //             DISP=(NEW,CATLG),UNIT=SYSDA,
*  //             SPACE=(CYL,(5,1),RLSE),
*  //             DCB=(LRECL=266,RECFM=FB,BLKSIZE=10640)
*  //*
*  //SYSOUT    DD SYSOUT=*
*  //SORTWK01  DD UNIT=SYSDA,SPACE=(CYL,(65))
*  //SORTWK02  DD UNIT=SYSDA,SPACE=(CYL,(65))
*  //SORTWK03  DD UNIT=SYSDA,SPACE=(CYL,(65))
*  //SYSIN     DD *
*   SORT FIELDS=(2,8,AC,A),EQUALS
*   RECORD TYPE=F,LENGTH=(266,266,266)
*  //FIXDCB  EXEC PGM=FIXDCB
*  //STEPLIB  DD  DISP=SHR,DSN=EXD.EAX.LOADLIB
*  //FILE     DD  DSN=QC22505.OUTPUT.DATA,DISP=SHR,
*  //             DCB=(LRECL=133,RECFM=FB,BLKSIZE=10640)
*  //FIXDCB2 EXEC PGM=FIXDCB
*  //STEPLIB  DD  DISP=SHR,DSN=EXD.EAX.LOADLIB
*  //FILE     DD  DSN=QC22505.OUTPUT2.DATA,DISP=SHR,
*  //             DCB=(LRECL=133,RECFM=FB,BLKSIZE=10640)
*
**********************************************************************
*
         PRINT    NOGEN
VSMDUMP  RMODE 24
VSMDUMP  AMODE 31
VSMDUMP  RENTR BASE=11,ENV=OS,MAIN=YES,WORK=(WORKLEN,WORKAREA),PARM=12
         LA    R8,DATAAREA
         USING  DATAAREA,R8
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').NOPR            ###############
**********************************************************************
*
* OPEN THE PRINT FILE
*
**********************************************************************
         SPACE
         MVC   SYSPRINT(DCBLEN),CONDCB1
         MVC   OPENLIST(OPENLEN),CONOPEN
         OPEN  (SYSPRINT,(OUTPUT)),MF=(E,OPENLIST)
         TM    (DCBOFLGS-IHADCB)+SYSPRINT,DCBOFOPN  DID IT OPEN?
         BO    OPENOK1
         SPACE
         MVC   (DCBDDNAM-IHADCB)+SYSPRINT(8),=CL8'SYSPRINT'
         OPEN  (SYSPRINT,(OUTPUT)),MF=(E,OPENLIST)
         TM    (DCBOFLGS-IHADCB)+SYSPRINT,DCBOFOPN  DID IT OPEN?
         BNO   NOOPEN1
         SPACE
OPENOK1  DS    0H
.NOPR    ANOP
**********************************************************************
*
* PROCESS THE IPCS PARM TO GET THE DATASET NAME WE ARE TO OPEN. WE
* PASS THE SAME PARM WE WERE PASSED, WHICH IS THE IPCS PARM.
*
**********************************************************************
         SPACE
         CALL  IPCSPRM,((R12),OPTIONS,SYSPRINT),MF=(E,CALLLIST)
         LTR   R15,R15
         BNZ   RETURN
         SPACE
**********************************************************************
*
* OPEN THE OUTPUT FILE.  THIS IS WHERE THE FORMATTED DUMP DATA GOES.
*
**********************************************************************
         SPACE
         MVC   OUTPUT(DCBLEN),CONDCB2
         MVC   OPENLIST(OPENLEN),CONOPEN
         OPEN  (OUTPUT,(OUTPUT)),MF=(E,OPENLIST)
         TM    (DCBOFLGS-IHADCB)+OUTPUT,DCBOFOPN    DID IT OPEN?
         BNO   NOOPEN2
         SPACE
         SPACE
         LA    R9,SYSPRINT
         LA    R10,OUTPUT
*        PRINT NOGEN
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS01          ###############
**********************************************************************
*
* GET THE TCB ADDRESS AND THE ASID FOR THE HEADER LINE. ALSO STORE
* THE ENTRY POINT ADDRESS FOR THIS ROUTINE.
*
*      REGISTER USAGE:
*              R3  -> TCB
*              R4  -  ASID
*              R8  -> ADDRESSABILITY TO DATA AREA
*              R9  -> SYSPRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  OS PARM
*              R13 -  DSA AND WORK VARIABLES
*
**********************************************************************
         SPACE
         USING PSA,0
         L     R3,PSATOLD      POINT TO THE TCB
         USING TCB,R3
         DROP  R0
         ST    R11,WORD        PREPARE TO PRINT ENTRY ADDRESS
         SPACE
         L     R14,TCBJSCB     POINT TO JSCB
         USING IEZJSCB,R14
         LH    R4,JSCBASID     GET ASID FROM JSCB
         DROP  R14
         AGO   .NPCS01
.IPCS01  ANOP
**********************************************************************
*
* GET THE TCB ADDRESS AND THE ASID FOR THE HEADER LINE. ALSO STORE
* THE ENTRY POINT ADDRESS FOR THE ABENDING PROGRAM.
*
*      REGISTER USAGE:
*              R2  -  TCB ADDRESS IN DUMP
*              R3  -> TCB OF ABENDING PROGRAM (IN THIS ADDR SP)
*              R4  -  ASID
*              R8  -> ADDRESSABILITY TO DATA AREA
*              R9  -> SYSPRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  OS PARM
*              R13 -  DSA AND WORK VARIABLES
*
**********************************************************************
         SPACE
         NI    ADPLPRDP,X'FE'  MAKE SURE ADPLSAMK IS OFF
         SLR   R0,R0           ABSOLUTE ADDRESS ZERO (THE PSA)
         IPCSLOAD R2,(R0),LEN=1024
         IPCSLMSG R2,,NOPSA,40,ZHDR4,(R10),(R9)
         LTR      R2,R2        DID WE FIND THE PSA
         BZ       DONE         IF NOT, BAIL OUT.
         SPACE
         USING PSA,R2
         L     R2,PSATOLD      POINT TO THE TCB
         DROP  R2
         IPCSLOAD R3,(R2),LEN=TCBLEN,PERM=ABENDTCB
         IPCSLMSG R3,(R2),NOTCB,40,ZHDR4,(R10),(R9)
         LTR   R3,R3           SAVE IN A REG
         BZ    RETURN          POINT TO ABENDING TASKS TCB THIS ADR SPC
         SPACE
         USING TCB,R3
         SPACE
         CALL  FINDCDE,((R2)), GET THE CDE IN R0, PASS THE TCB         X
               MF=(E,CALLLIST)
         LTR   R15,R0          COPY CDE ADDRESS
         BZ    PR1             IF NO CDE, SKIP IT
         SPACE
         USING CDENTRY,R15
         MVC   WORD(4),CDENTPT
         LH    R4,ADPLASID
         DROP  R15
PR1      DS    0H
.NPCS01  ANOP
         SPACE
**********************************************************************
*
* PRINT THE HEADER INFORMATION AND THE HEADERS FOR WALKING THE TCB'S
* BACKWARDS.
*
**********************************************************************
         SPACE
         VSMPRNT AREA24,(R9),BLANK
         MVI   LINE,C' '
         MVC   LINE+1(132),LINE
         MVC   LINE(40),=CL40' OPTIONS USED:   PRINT   LPA   CDE   FQE'
         CLI   OPTIONS+PRTPRM,X'FF'     PRINT ON
         BE    *+10
         MVC   LINE+15(2),=CL2'NO'
         CLI   OPTIONS+LPAPRM,X'FF'     GET LPA ON
         BE    *+10
         MVC   LINE+23(2),=CL2'NO'
         CLI   OPTIONS+CDEPRM,X'FF'     CDE PRINT ON
         BE    *+10
         MVC   LINE+29(2),=CL2'NO'
         CLI   OPTIONS+FQEPRM,X'FF'     FQE ON  (NOT AVAILABLE)
         BE    *+10
         MVC   LINE+35(2),=CL2'NO'
         VSMPRNT AREA24,(R9),LINE
         VSMPRNT AREA24,(R9),BLANK
         MVI   LINE,C' '
         MVC   LINE+1(132),LINE
         MVC   LINE(20),=CL20' ENTRY ADDRESS:  '
         UNPK  LINE+17(9),WORD(5)
         TR    LINE+17(8),HEXCHAR
         MVI   LINE+25,C' '
         MVC   LINE+26(6),=CL6' ASID:'
         CVD   R4,WORD
         MVC   LINE+32(8),=X'4020202020202021'
         ED    LINE+32(8),WORD+4
         OI    LINE+39,X'F0'
         AIF   ('&SYSPARM' NE 'IPCS').NPCS01A
         VSMPRNT AREA24,(R9),BLANK
         VSMPRNT AREA24,(R9),MSG1
         VSMPRNT AREA24,(R9),MSG2
         VSMPRNT AREA24,(R9),BLANK
.NPCS01A ANOP
         CLI   OPTIONS+PRTPRM,X'FF'  IS THE PRINT OPTION ON?
         BNE   PTCB1                 IF NOT, SKIP THE HEADERS
         SPACE
         VSMPRNT AREA24,(R9),LINE
         VSMPRNT AREA24,(R9),BLANK
         VSMPRNT AREA24,(R9),HDR1
         VSMPRNT AREA24,(R9),HDR4
         EJECT
**********************************************************************
*
* FIRST PASS, PRINT THE TCB'S WALKING BACKWARD THEN. BACK UP TO THE
* FRONT OF THE LIST AND WALK THE LIST FORWARD PRINTING EACH TCB
*
**********************************************************************
PTCB1    DS    0H
         CALL  PRTTCB,((R9),OPTIONS,(R3),(R2)),MF=(E,CALLLIST)
         L     R0,TCBBACK   POINT TO PREV TCB
         LTR   R0,R0        LAST TCB?
         BZ    FORWARD      IF YES, GO START WALKING OTHER WAY
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS02          ###############
         LR    R3,R0        MAKE THIS THE CURRENT TCB
         AGO   .NPCS02
.IPCS02  ANOP
         LR    R2,R0        MAKE THIS THE CURRENT TCB (DUMP)
         IPCSLOAD R3,(R2),LEN=TCBLEN,PERM=TCBHOLD
         IPCSLMSG R3,R2,NOTCB,40,ZHDR4,(R10),(R9)
         LTR   R3,R3        DID WE GET A TCB
         BZ    FORWARD      IF NOT, LEAVE THE LOOP
.NPCS02  ANOP
         B     PTCB1        AND CONTINUE THE LOOP
         EJECT
**********************************************************************
*
* PRINT THE HEADERS FOR THE SECOND PASS THROUGH THE TCB'S WALK THE
* TCB CHAIN FORWARD LISTING THE INFORMATION TO THE PRINT DATASET.
* THIS LOOP (PTCB2) JUST SENDS MORE TCBS TO THE PRINT FILE.
*
*      REGISTER USAGE:
*              R2  -  TCB ADDRESS IN DUMP (IPCS ONLY) - ON ENTRY TOP
*                     TCB
*              R3  -> TCB - ON ENTRY TOP TCB
*              R8  -> ADDRESSABILITY TO DATA AREA
*              R9  -> SYSPRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  OS PARM
*              R13 -  DSA AND WORK VARIABLES
*
**********************************************************************
         SPACE
FORWARD  DS    0H
         ST    R3,SAVETCB   SAVE FIRST TCB ADDR
         AIF   ('&SYSPARM' NE 'IPCS').NPCS03          ###############
**********************************************************************
*
* COPY THE TOP TCB TO A PERMANENT AREA. WE WILL NEED IT FOR THE
* SECOND PASS, SO WE NEED TO KEEP IT AROUND.
*
**********************************************************************
         ST    R2,SAVETCBD  SAVE FIRST TCB ADDR (DUMP IF IPCS)
         MVC   FIRSTTCB(256),0(R3)   SAVE FIRST TCB
         MVC   FIRSTTCB+256(TCBLEN-256),256(R3)   SAVE FIRST TCB
         LA    R3,FIRSTTCB
         ST    R3,SAVETCB
.NPCS03  ANOP
         CLI   OPTIONS+PRTPRM,X'FF'  IS THE PRINT OPTION ON?
         BNE   SPQERUN                IF NOT, SKIP THE NEXT LOOP
         SPACE
         AIF   ('&SYSPARM' NE 'IPCS').NPCS03D         ###############
         OI    ADPLFLAG,ADPLEJEC    CAUSE PAGE EJECT
.NPCS03D ANOP
         VSMPRNT AREA24,(R9),BLANK
         VSMPRNT AREA24,(R9),HDR2
         VSMPRNT AREA24,(R9),HDR4
         SPACE
PTCB2    DS    0H
         CALL  PRTTCB,((R9),OPTIONS,(R3),(R2)),MF=(E,CALLLIST)
         L     R0,TCBTCB    POINT TO NEXT TCB
         LTR   R0,R0        LAST TCB?
         BZ    SPQERUN      WALK FORWARD
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS04          ###############
         LR    R3,R0        MAKE THIS THE CURRENT TCB
         AGO   .NPCS04
.IPCS04  ANOP
         LR    R2,R0        MAKE THIS THE CURRENT TCB (DUMP)
         IPCSLOAD R3,(R2),LEN=TCBLEN,PERM=TCBHOLD
         IPCSLMSG R3,R2,NOTCB,40,ZHDR4,(R10),(R9)
         LTR   R3,R3        DID WE GET A TCB?
         BZ    SPQERUN      IF NOT, LEAVE THE LOOP
.NPCS04  ANOP
         B     PTCB2        AND CONTINUE THE LOOP
         EJECT
**********************************************************************
*
* ERROR MESSAGES FOR FILES WHICH DID NOT OPEN
*
**********************************************************************
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS04A         ###############
NOOPEN1  DS    0H
         WTO   'COULD NOT OPEN DDNAME PRINT OR SYSPRINT',ROUTCDE=11
         LA    R15,16
         B     RETURN
         SPACE
.IPCS04A ANOP
NOOPEN2  DS    0H
         WTO   'COULD NOT OPEN FILE OUTPUT',ROUTCDE=11
         LA    R15,16
         B     RETURN
         EJECT
**********************************************************************
*
* THIRD PASS THROUGH THE TCB'S.  FORWARD, JUST LIKE THE SECOND PASS.
* FIRST PRINT THE HEADERS.
*
* THEN DUMP THE GDA, LDA, AND LPA STUFF TO THE OUTPUT FILE. THIS
* STUFF DOES NOT GO TO THE PRINT FILE.
*
**********************************************************************
         SPACE
SPQERUN  DS    0H
         CLI   OPTIONS+PRTPRM,X'FF'  IS THE PRINT OPTION ON?
         BNE   NOHDR2                     IF NOT, SKIP THE HEADERS
         VSMPRNT AREA24,(R9),BLANK
         VSMPRNT AREA24,(R9),HDR5
         VSMPRNT AREA24,(R9),BLANK
         VSMPRNT AREA24,(R9),HDR2
         VSMPRNT AREA24,(R9),HDR4
NOHDR2   DS    0H
         PRINT GEN
         PUT31 AREA24,(R10),ZHDR1
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         DS    0H
         CALL  DUMPGDA,((R10),(R9),OPTIONS),MF=(E,CALLLIST)
         DS    0H
         CALL  DUMPLDA,((R10),(R9),OPTIONS),MF=(E,CALLLIST)
         SPACE
         CLI   OPTIONS+LPAPRM,X'FF'       IS LPA OPTION ON?
         BNE   LPADONE                    IF SO, SKIP THE LPA
         DS    0H
         CALL  DUMPLPA,((R10),(R9),OPTIONS),MF=(E,CALLLIST)
         SPACE
LPADONE  DS    0H
         L     R3,SAVETCB          POINT TO THE FIRST TCB
         AIF   ('&SYSPARM' NE 'IPCS').NPCS05          ###############
         L     R2,SAVETCBD         POINT TO FIRST TCB IN DUMP
         OI    ADPLFLAG,ADPLEJEC    CAUSE PAGE EJECT
.NPCS05  ANOP
         EJECT
**********************************************************************
*
* THIRD TCB WALKING LOOP. DUMP THE SPQES FOR THE TCB.  THIS GOES TO
* BOTH OUTPUT AND THE PRINT FILE.  SPQES DUMPS THE TCB, SPQES, SPQAS,
* AND DQES.
*
*      REGISTER USAGE:
*              R2  -  TCB ADDRESS IN DUMP (IPCS ONLY)
*              R3  -> TCB
*              R8  -> ADDRESSABILITY TO DATA AREA
*              R9  -> SYSPRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  OS PARM
*              R13 -  DSA AND WORK VARIABLES
*
**********************************************************************
         SPACE
PTCB3    DS    0H
         CALL  DUMPLLE,((R10),(R9),(R3),(R2),OPTIONS),MF=(E,CALLLIST)
         CALL  DUMPCDE,((R10),(R9),(R3),(R2),OPTIONS),MF=(E,CALLLIST)
         CALL  SPQES,((R10),(R9),(R3),(R2),OPTIONS),MF=(E,CALLLIST)
         L     R0,TCBTCB    POINT TO NEXT TCB
         LTR   R0,R0        LAST TCB?
         BZ    DONE         WALK FORWARD
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS06          ###############
         LR    R3,R0        MAKE THIS THE CURRENT TCB
         AGO   .NPCS06
.IPCS06  ANOP
         LR    R2,R0        MAKE THIS THE CURRENT TCB (DUMP)
         IPCSLOAD R3,(R2),LEN=TCBLEN,PERM=TCBHOLD
         IPCSLMSG R3,R2,NOTCB,40,ZHDR4,(R10),(R9)
         LTR   R3,R3        DID WE GET THE TCB?
         BZ    DONE
.NPCS06  ANOP
         B     PTCB3        AND CONTINUE THE LOOP
         EJECT
**********************************************************************
*
* FINALLY, DUMP THE SPT, WHICH CONTAINS DATA FOR SOME SYSTEM
* SUBPOOLS.
*
* THEN PUT OUT THE TRAILERS AND CLOSE THE FILES.
*
**********************************************************************
         SPACE
DONE     DS    0H
         CALL  RUNSPT,((R10),(R9),OPTIONS),MF=(E,CALLLIST)
         SPACE
         VSMPRNT AREA24,(R9),BLANK
         VSMPRNT AREA24,(R9),HDR6
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS07          ###############
         MVC   OPENLIST(CLOSELEN),CONCLOSE
         CLOSE ((R9)),MF=(E,OPENLIST)
.IPCS07  ANOP
         MVC   OPENLIST(CLOSELEN),CONCLOSE
         CLOSE ((R10)),MF=(E,OPENLIST)
         SPACE
         DROP  R3
         SLR   R15,R15
RETURN   DS    0H
*        CNOP  0,4
*        DC    A(0)
         REXIT ENV=OS,RETURN=(15)
         SPACE
         LTORG
         SPACE
DATAAREA DS    0D
HDR1     DC    CL133' WALKING BACKWARDS THROUGH THE TCBS'
HDR2     DC    CL133' WALKING FOREWARDS THROUGH THE TCBS'
HDR3     DC    CL133' TCB      | TCBTCB   | TCBBACK  | PGM NAME | ENTRY*
                PT | TCBNTC   | TCBOTC   | TCBLTC   | TCBJSTCB |'
HDR4     DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+'
HDR5     DC    CL133' TCB LIST COMPLETE'
HDR6     DC    CL133' LAST LIST COMPLETE'
BLANK    DC    CL133' '
         SPACE
SHDR4    DC    CL133'          +----------+----------+----------+------*
               ----+----------+----------+----------+'
         SPACE
ZHDR1    DC    CL133'  AREA    | SIZE     | END ADDR | SUBPOOL  | KEY  *
                   | PGM NAME | ENTRY PT | TCB ADDR | SHARED?  | OWNED?*
                  |'
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
         SPACE
NOTCB    DC    CL133' # UNABLE TO ACCESS TCB AT DUMP ADDRESS XXXXXXXX  X
               (VSMDUMP) '
NOPSA    DC    CL133' # UNABLE TO ACCESS PSA AT DUMP ADDRESS 00000000  X
               (VSMDUMP) '
         SPACE
MSG1     DC    CL133' NOTE:  TO GET ALL DUMP DATA, YOU MUST SCROLL TO '
MSG2     DC    CL133' THE BOTTOM OF THE PRINT LISTING.                '
         SPACE
CONDCB1  DCB   MACRF=(PM),DSORG=PS,BLKSIZE=10773,DDNAME=PRINT,         X
               LRECL=133,RECFM=FBA
         SPACE
CONDCB2  DCB   MACRF=(PM),DSORG=PS,BLKSIZE=10640,DDNAME=OUTPUT,        X
               LRECL=133,RECFM=FBA   THIS BLKSIZE HAS EVEN # OF LRECLS
DCBLEN   EQU   *-CONDCB2
         SPACE
CONOPEN  OPEN  (0,(OUTPUT)),MF=L
OPENLEN  EQU   *-CONOPEN
         SPACE
CONCLOSE OPEN  (0,(OUTPUT)),MF=L
CLOSELEN EQU   *-CONCLOSE
         SPACE
         EJECT
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
         LTORG
WORKAREA DSECT
         DS    26F              SAVE AREA
RETSV4   DS    A
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
SAVETCB  DS    A
SAVETCBD DS    A
OPTIONS  DS    2A
         DS    0D
TCBHOLD  DS    XL(TCBLEN)
         DS    0D
FIRSTTCB DS    XL(TCBLEN)
         DS    0D
ABENDTCB DS    XL(TCBLEN)
         DS    0D
LINE     DS    CL133
         DS    0D
OUTPUT   DS    XL(DCBLEN)
         DS    0D
SYSPRINT DS    XL(DCBLEN)
         DS    0D
OPENLIST DS    XL(OPENLEN)
         DS    0D
WORKLEN  EQU   *-WORKAREA
*        PRINT NOGEN
         SYMBAR MODE=DEC
         IKJTCB
         IHAPSA
         IHACDE
         IHADQE
         IEZJSCB
         CVT   DSECT=YES,LIST=YES
         DCBD
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         END
*
*     DUMPGDA
*
*     DUMP DATA AREAS FROM THE GDA
*     PARMS:
*         1  ->  OUTPUT DCB
*         2  ->  PRINT DCB
*
*
         PRINT NOGEN
DUMPGDA  RENTR BASE=(11,12),ENV=OS,PARM=(10,PARMLST),                  X
               WORK=(WORKLEN,WORKAREA)
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB           POINT TO THE PRINT DCB
         L     R10,OUTDCB            POINT TO THE OUTPUT DCB
         DROP  R10
         MVC   BUFFZ,BUFFINIT       INIT OUTPUT BUFFER
         SPACE
**********************************************************************
*
* FIRST ACCESS THE CVT AND THE CVT VSM EXTENSION.
*
**********************************************************************
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS01          ###############
         USING PSA,0
         L     R3,FLCCVT            POINT TO THE CVT
         DROP  R0
         USING CVT,R3               ADDRESS THE CVT
         SPACE
         L     R4,CVTSMEXT          POINT TO STORAGE MAP EXTENSION
         USING CVTVSTGX,R4          AND GET ADDRESSABILTY
         SPACE
         AGO   .NPCS01
.IPCS01  ANOP
         L     R3,ADPLDSA(,R13)     GET THE ADPL ADDRESS PASSED
         USING ABDPL,R3
         L     R3,ADPLCVT           POINT TO THE CVT FOR THE DUMP
         DROP  R3
         USING CVT,R3               ADDRESS THE CVT
         SPACE
         L     R2,CVTSMEXT          POINT TO STORAGE MAP EXTENSION
         LA    R14,(CVTEMLPE-CVTVSTGX)+4 GET LEN OF VSM EXTENSION
         IPCSLOAD R4,(R2),LEN=(R14)
         IPCSLMSG R4,R2,NOCVT1,48,ZHDR4,(R10),(R9)
         LTR   R4,R4                DID WE GET IT?
         BZ    GETGDA
         SPACE
         USING CVTVSTGX,R4          AND GET ADDRESSABILTY
         SPACE
.NPCS01  ANOP
         MVC   ZENTRYPT(8),=CL8'  '
         MVC   ZOWNED(8),=CL8'CVT '
         SPACE
**********************************************************************
*
* DUMP THE LPA STUFF FROM THE CVT EXTENSION.
*
**********************************************************************
         SPACE
         MVI   ZRECTYPE,RECTREG
         L     R15,CVTMLPAS         GET MLPA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTMLPAE         GET MLPA END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET MLPA LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'MLPA'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTFLPAS         GET FLPA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTFLPAE         GET FLPA END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET FLPA LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'FLPA'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTPLPAS         GET PLPA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTPLPAE         GET PLPA END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET PLPA LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'PLPA'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTEPLPS         GET EXTENDED PLPA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTEPLPE         GET EXTENDED PLPA END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET EXTENDED PLPA LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'PLPA EXT'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTEFLPS         GET EXTENDED FLPA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTEFLPE         GET EXTENDED FLPA END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET EXTENDED FLPA LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'FLPA EXT'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTEMLPS         GET EXTENDED MLPA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTEMLPE         GET EXTENDED MLPA END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET EXTENDED MLPA LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'MLPA EXT'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTRWNS          GET R/W NUCLEUS START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTRWNE          GET R/W NUCLEUS END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET R/W NUCLEUS LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'R/W NUC '
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTRONS          GET R/O NUCLEUS START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTRONE          GET R/O NUCLEUS END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET R/O NUCLEUS LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'R/O NUC '
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,CVTERWNS         GET EXTENDED R/W NUCLEUS START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         L     R14,CVTERWNE         GET EXTENDED R/W NUCLEUS END
         ST    R14,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SR    R14,R15              GET EXTENDED R/W NUCLEUS LENGTH
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'R/W NUCE'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
**********************************************************************
*
* NOW GET THE GDA FROM THE CVT AND PROCESS IT
*
**********************************************************************
         SPACE
GETGDA   DS    0H
         L     R4,CVTGDA            POINT TO THE GDA
         AIF   ('&SYSPARM' NE 'IPCS').NPCS02          ###############
         IPCSLOAD R2,(R4),LEN=GDALEN,PERM=HOLDGDA
         IPCSLMSG R2,R4,NOGDA,40,ZHDR4,(R10),(R9)
         LTR   R2,R2                DID WE GET IT?
         BZ    RETURN
         SPACE
         LR    R4,R2
         SPACE
.NPCS02  ANOP
         DROP  R3,R4                GET RID OF THE CVT
         USING GDA,R4               ADDRESS THE GDA
         SPACE
**********************************************************************
*
* FIRST DUMP THE DATA FOR SQA SUBPOOLS 245, 226, AND 239. THIS ARE
* CONTROLLED BY AQAT'S (ADDRESS QUEUE ANCHOR TABLES).
*
**********************************************************************
         SPACE
         L     R2,OPTPTR            POINT TO THE OPTIONS
         SPACE
         L     R5,GDAAQAT5          POINT TO SQA AQAT
         LA    R6,245               SHOW SUBPOOL 245
         LA    R7,=CL8'SQA     '    LOAD NAME
         SPACE
         CALL  DMPAQAT,((R10),(R5),(R6),(R7),(R2)),MF=(E,CALLLIST)
         SPACE
         L     R5,GDAAQAT6          POINT TO SQA AQAT
         LA    R6,226               SHOW SUBPOOL 226 (INCLUDES 253)
         LA    R7,=CL8'SQA     '    LOAD NAME
         SPACE
         CALL  DMPAQAT,((R10),(R5),(R6),(R7),(R2)),MF=(E,CALLLIST)
         SPACE
         L     R5,GDAAQAT9          POINT TO SQA AQAT
         LA    R6,239               SHOW SUBPOOL 239 (INCLUDES 253)
         LA    R7,=CL8'SQA     '    LOAD NAME
         SPACE
         CALL  DMPAQAT,((R10),(R5),(R6),(R7),(R2)),MF=(E,CALLLIST)
         SPACE
**********************************************************************
*
* NOW DUMP THE HIGH AND LOW WATER MARKERS FROM THE GDA. THESE ARE ALL
* RECTREG (2) RECORDS.
*
**********************************************************************
         SPACE
         MVC   ZENTRYPT(8),=CL8'  '
         MVC   ZOWNED(8),=CL8'GDA '
         SPACE
         L     R15,GDACSA           GET LOWER CSA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDACSASZ(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDACSASZ         ADD IN LENGTH OF CSA
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'CSA LOW'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,GDAECSA           GET UPPER CSA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDAECSAS(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDAECSAS         ADD IN LENGTH OF CSA
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'CSA HIGH'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,GDASQA            GET LOWER SQA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDASQASZ(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDASQASZ         ADD IN LENGTH OF SQA
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'SQA LOW '
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,GDAESQA           GET UPPER SQA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDAESQAS(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDAESQAS         ADD IN LENGTH OF SQA
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'SQA HIGH'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,GDAPVT            GET LOWER PVT START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDAPVTSZ(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDAPVTSZ         ADD IN LENGTH OF PVT
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'PVT LOW '
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,GDAEPVT           GET UPPER PVT START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDAEPVTS(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDAEPVTS         ADD IN LENGTH OF PVT
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'PVT HIGH'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,GDASMAD           GET MANAGEMENT AREA
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDASMSZ(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDASMSZ         ADD IN LENGTH OF MANAGEMENT AREA
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'MGT AREA'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,GDAPGTAD          GET PAGE TABLE AREA ADDR
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),GDAPGTSZ(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,GDAPGTSZ         ADD IN LENGTH OF PAGE TABLE AREA
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'PG TBLS '
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         MVC   ZENTRYPT(8),=CL8'    '
         MVC   ZTCBADDR(8),=CL8'    '
         SPACE
RETURN   REXIT ENV=OS
         EJECT
         LTORG
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         SPACE
         SPACE
NOCVT1   DC    CL133' # UNABLE TO ACCESS CVT VSM EXT AT DUMP ADDRESS XX*
               XXXXXX (DUMPGDA) '
NOGDA    DC    CL133' # UNABLE TO ACCESS GDA AT DUMP ADDRESS XXXXXXXX  *
               (DUMPGDA) '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F              SAVE AREA
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
HOLDGDA  DS    XL(GDALEN)
LINE     DS    CL133
BUFFZ    DS    0CL133
         DC    CL1' '
ZAREA    DC    CL9' '
         DC    CL2'| '
ZSIZE    DC    CL9' '
         DC    CL2'| '
ZENDADDR DC    CL9' '
         DC    CL2'| '
ZSUBPOOL DC    CL9' '
         DC    CL2'| '
ZKEY     DC    CL9' '
         DC    CL2'| '
ZPGMNAME DC    CL9' '
         DC    CL2'| '
ZENTRYPT DC    CL9' '
         DC    CL2'| '
ZTCBADDR DC    CL9' '
         DC    CL2'| '
ZSHARED  DC    CL9' '
         DC    CL2'| '
ZOWNED   DC    CL9' '
         DC    CL2'| '
ZRECTYPE DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
OPTR     DS    A
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHAGDA
GDALEN   EQU   *-GDA
         IHAPSA
         CVT   DSECT=YES,LIST=YES
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
*
*     DUMPLDA
*
*     DUMP DATA AREAS FROM THE LDA  (SUBPOOL 255 TOO)
*     PARMS:
*         1  ->  OUTPUT DCB
*         2  ->  PRINT DCB
*
*
         PRINT NOGEN
DUMPLDA  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB           POINT TO THE PRINT DCB
         L     R10,OUTDCB            POINT TO THE OUTPUT DCB
         DROP  R10
         MVC   BUFFZ,BUFFINIT
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS01          ###############
         USING PSA,0
         SPACE
         L     R3,PSAAOLD           POINT TO THE ASCB
         DROP  R0
         USING ASCB,R3              ADDRESS THE ASCB
         SPACE
         L     R4,ASCBLDA           POINT TO THE LDA
         DROP  R3                   GET RID OF THE ASCB
         AGO   .NPCS01
.IPCS01  ANOP
         LA    R14,(PSAAOLD-PSA)+8
         SLR   R0,R0
         IPCSLOAD R3,(R0),LEN=(R14)    GET PSA FOR THE DUMP
         IPCSLMSG R2,,NOPSA,40,ZHDR4,(R10),(R9)
         LTR   R3,R3                DID WE GET THE PSA
         BZ    RETURN
         USING PSA,R3
         SPACE
         L     R3,PSAAOLD           POINT TO THE ASCB IN THE DUMP
         DROP  R3
         IPCSLOAD R2,(R3),LEN=ASCBLEN
         IPCSLMSG R2,R3,NOASCB,41,ZHDR4,(R10),(R9)
         LTR   R2,R2
         BZ    RETURN
         USING ASCB,R2              ADDRESS THE ASCB
         SPACE
         L     R3,ASCBLDA           POINT TO THE DUMP LDA
         DROP  R2                   GET RID OF THE ASCB
         IPCSLOAD R4,(R3),LEN=LDALEN,PERM=HOLDLDA
         IPCSLMSG R4,R3,NOLDA,40,ZHDR4,(R10),(R9)
         LTR   R4,R4
         BZ    RETURN
.NPCS01  ANOP
         USING LDA,R4               ADDRESS THE LDA
         SPACE
         L     R5,LDAAQAT           POINT TO LSQA AQAT
         LA    R6,255               SHOW SUBPOOL 255 (INCLUDES 253)
         LA    R7,=CL8'LSQA    '    LOAD NAME
         SPACE
         L     R12,OPTPTR
         SPACE
         CALL  DMPAQAT,((R10),(R5),(R6),(R7),(R12)),MF=(E,CALLLIST)
         SPACE
         MVI   ZRECTYPE,RECTREG
         MVC   ZOWNED(8),=CL8'LDA '
         L     R15,LDASTRTA         GET LOWER ADD SPACE REG START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),LDASIZA(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,LDASIZA          ADD IN LENGTH OF ADD SP REG
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'PVT STRT'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,LDAESTRA          GET UPPER ADD SPACE REG START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),LDAESIZA(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,LDAESIZA         ADD IN LENGTH UPPER ADD SP REG
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'PVT STRT'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,LDASTRTS         GET LOWER SYSREG START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),LDASIZS(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,LDASIZS          ADD IN LENGTH OF SYSREG
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'SYSREG L'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,LDAESTRS          GET UPPER SYSREG START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),LDAESIZS(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,LDAESIZS         ADD IN LENGTH UPPER SYSREG
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'SYSREG H'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,LDACRGTP         GET LOW PRIVATE END ADDR
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         MVC   ZSIZE(9),=CL9' '
         MVC   ZENDADDR(9),=CL9' '
         MVC   ZPGMNAME(8),=CL8'LPVT END'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,LDASTRTA         GET LOWER ADD SPACE REG START
         A     R15,LDAREGRQ         ADD IN REQUESTED REGION LENGTH
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         MVC   ZSIZE(9),=CL9' '
         MVC   ZENDADDR(9),=CL9' '
         MVC   ZPGMNAME(8),=CL8'REG END'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,LDASTRTA         GET LOWER ADD SPACE REG START
         A     R15,LDALIMIT         ADD IN ABSOLUTE REGION LIMIT
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         MVC   ZSIZE(9),=CL9' '
         MVC   ZENDADDR(9),=CL9' '
         MVC   ZPGMNAME(8),=CL8'REG LMT'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R15,LDAERGTP         GET HIGH PRIVATE END ADDR
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         MVC   ZSIZE(9),=CL9' '
         MVC   ZENDADDR(9),=CL9' '
         MVC   ZPGMNAME(8),=CL8'HPVT END'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         L     R15,LDASMAD          GET MGMT AREA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),LDASMSZ(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,LDASMSZ          ADD IN LENGTH OF MGMT AREA
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         MVC   ZPGMNAME(8),=CL8'VSM MGMT'
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
RETURN   REXIT ENV=OS
         EJECT
         LTORG
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         SPACE
NOPSA    DC    CL133' # UNABLE TO ACCESS PSA AT DUMP ADDRESS 00000000  *
               (DUMPLDA) '
NOASCB   DC    CL133' # UNABLE TO ACCESS ASCB AT DUMP ADDRESS XXXXXXXX *
                (DUMPLDA) '
NOLDA    DC    CL133' # UNABLE TO ACCESS LDA AT DUMP ADDRESS XXXXXXXX  *
               (DUMPLDA) '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F              SAVE AREA
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
HOLDLDA  DS    XL(LDALEN)
LINE     DS    CL133
BUFFZ    DS    0CL133
         DC    CL1' '
ZAREA    DC    CL9' '
         DC    CL2'| '
ZSIZE    DC    CL9' '
         DC    CL2'| '
ZENDADDR DC    CL9' '
         DC    CL2'| '
ZSUBPOOL DC    CL9' '
         DC    CL2'| '
ZKEY     DC    CL9' '
         DC    CL2'| '
ZPGMNAME DC    CL9' '
         DC    CL2'| '
ZENTRYPT DC    CL9' '
         DC    CL2'| '
ZTCBADDR DC    CL9' '
         DC    CL2'| '
ZSHARED  DC    CL9' '
         DC    CL2'| '
ZOWNED   DC    CL9' '
         DC    CL2'| '
ZRECTYPE DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
OPTR     DS    A
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHALDA
LDALEN   EQU   *-LDA
         IHAPSA
         IHAASCB
ASCBLEN  EQU   *-ASCB
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         CVT   DSECT=YES,LIST=NO
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
*
*    DUMPLPA
* DUMP THE LPA DIRECTORY
*
*    PARMS:
*         1   ->  OUTPUT DCB
*         2  ->  PRINT DCB
*
*
         PRINT NOGEN
DUMPLPA  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB           POINT TO THE PRINT DCB
         L     R10,OUTDCB           POINT TO THE OUTPUT DCB
         DROP  R10
         MVC   BUFFZ,BUFFINIT
         MVI   ZRECTYPE,RECTLPDE
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS81          ###############
         USING PSA,0
         SPACE
         L     R3,FLCCVT            POINT TO THE CVT
         DROP  R0
         USING CVT,R3               ADDRESS THE CVT
         SPACE
         L     R4,CVTLPDIA          POINT TO THE LPA DIRECTORY
         LA    R4,0(,R4)
         LR    R3,R4                SAVE A COPY OF THE START
         USING LPDE,R4
         DROP  R3                   GET RID OF THE CVT
         AGO   .NPCS81
.IPCS81  ANOP
         L     R3,ADPLDSA(,R13)     GET THE ADPL ADDRESS PASSED
         USING ABDPL,R3
         L     R3,ADPLCVT           POINT TO THE CVT FOR THE DUMP
         DROP  R3
         USING CVT,R3               ADDRESS THE CVT
         SPACE
         L     R5,CVTLPDIA          POINT TO THE LPA DIRECTORY
         DROP  R3                   GET RID OF THE CVT
         LA    R5,0(,R5)
         LR    R3,R5                SAVE A COPY OF THE START
         IPCSLOAD R4,(R5),LEN=SEGMAX
         IPCSLMSG R4,R5,NOLPA1,50,ZHDR4,(R10),(R9)
         LTR   R4,R4
         BZ    RETURN
         SPACE
         MVC   SEGSIZE(4),=A(SEGMAX) START GETTING LARGE SEGMENTS
         SPACE
         USING LPDE,R4
.NPCS81  ANOP
         SPACE
         MVC   ZSHARED(8),=CL8'LPA MOD'
         SLR   R5,R5                ZERO LENGTH OF LPA DIRECTORY
         SLR   R6,R6                ZERO LENGTH OF LPA DIRECTORY PAGE
         SPACE
LPDELOOP DS    0H
         MVC   ZPGMNAME(8),LPDENAME
         L     R15,LPDEXTAD        GET AREA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),LPDEXTLN(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,LPDEXTLN         ADD IN LENGTH OF ADD SP REG
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SPACE
         SLR   R15,R15
         IC    R15,LPDESP
         CVD   R15,WORD
         MVC   ZSUBPOOL(8),=X'4020202020202021'
         ED    ZSUBPOOL(8),WORD+4
         OI    ZSUBPOOL+7,X'F0'
         L     R15,LPDENTP         GET ENTRY POINT
         ST    R15,WORD
         UNPK  ZENTRYPT(9),WORD(5)
         TR    ZENTRYPT(8),HEXCHAR
         MVI   ZENTRYPT+8,C' '
         SPACE
         TM    LPDEATTR,LPDEMIN
         BO    NEXTLPDE                   SKIP MINOR LPDE'S NO STG
         SPACE
         MVC   ZTCBADDR(8),=CL8' '
         TM    LPDEATTB,LPDELPDE
         BO    YESLPDE
         SPACE
         MVC   ZTCBADDR(8),=CL8'NOT LPDE'
         SPACE
YESLPDE  DS    0H
         TM    LPDEATT2,LPDEAUTH      IS THIS MODULE AC 1?
         BZ    NOTAC1                 IF NOT, DON'T MARK AS SUCH
         SPACE
         MVC   ZKEY(8),=CL8'AC(1)'
         SPACE
NOTAC1   DS    0H
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
NEXTLPDE DS    0H
         LA    R4,LPDELEN(,R4)      GO TO NEXT ENTRY
         LA    R5,LPDELEN(,R5)      ACCUMULATE LENGTH
         AIF   ('&SYSPARM' NE 'IPCS').NPCS83          ###############
         LA    R6,LPDELEN(,R6)      ACCUMULATE LENGTH WITHIN SEGMENT
         C     R6,SEGSIZE           ARE WE AT THE END?
         BL    SAMESEG              NO, KEEP GOING
         SPACE
         LA    R2,0(R5,R3)          GET ADDR OF NEXT SEGMENT IN DUMP
         SPACE
GETSEG   DS    0H
         L     R7,SEGSIZE
         IPCSLOAD R4,(R2),LEN=(R7)
         LTR   R4,R4
         BNZ   GOTSEG
         SPACE
         C     R7,=A(SEGMAX)        ARE WE AT THE LARGE SEGMENTS?
         BNE   QUIT                 IF NOT, STOP SEARCH
         SPACE
         LA    R7,LPDELEN           ONE LPDE AT A TIME
         ST    R7,SEGSIZE
         B     GETSEG
         SPACE
QUIT     DS    0H
         IPCSLMSG R4,R2,NOLPA2,55,ZHDR4,(R10),(R9)
         B     DONE
         SPACE
GOTSEG   DS    0H
         SLR   R6,R6                ZERO LENGTH OF LPA DIRECTORY PAGE
         SPACE
SAMESEG  DS    0H
.NPCS83  ANOP
         CLC   LPDENAME(8),=X'FFFFFFFFFFFFFFFF'  END OF LIST?
         BNE   LPDELOOP
         SPACE
DONE     DS    0H
         MVI   ZRECTYPE,RECTREG
         ST    R3,WORD              SAVE LPDE TABLE START
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         LA    R4,LPDELEN(,R4)      GO PAST DUMMY LAST ENTRY
         LA    R5,LPDELEN(,R5)      ADD IN LENGTH OF THIS ENTRY
         ST    R4,WORD              SAVE LPDE TABLE END
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         ST    R5,WORD              SAVE LPDE TABLE LEN
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         MVC   ZPGMNAME(8),=CL8'LPA DIR'
         MVC   ZSHARED(8),=CL8' '
         MVC   ZOWNED(8),=CL8'CVT '
         MVC   ZSUBPOOL(8),=CL8' '
         MVC   ZKEY(8),=CL8' '
         MVC   ZENTRYPT(8),=CL8' '
         MVC   ZTCBADDR(8),=CL8' '
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
RETURN   REXIT ENV=OS
         EJECT
         LTORG
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         SPACE
NOLPA1   DC    CL133' # UNABLE TO ACCESS LPA DIRECTORY AT DUMP ADDRESS *
               XXXXXXXX (DUMPLPA) '
NOLPA2   DC    CL133' # UNABLE TO ACCESS LPA DIRECTORY AREA AT DUMP ADD*
               RESS XXXXXXXX (DUMPLPA) '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F              SAVE AREA
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
SEGSIZE  DS    F
BUFFZ    DS    0CL133
         DC    CL1' '
ZAREA    DC    CL9' '
         DC    CL2'| '
ZSIZE    DC    CL9' '
         DC    CL2'| '
ZENDADDR DC    CL9' '
         DC    CL2'| '
ZSUBPOOL DC    CL9' '
         DC    CL2'| '
ZKEY     DC    CL9' '
         DC    CL2'| '
ZPGMNAME DC    CL9' '
         DC    CL2'| '
ZENTRYPT DC    CL9' '
         DC    CL2'| '
ZTCBADDR DC    CL9' '
         DC    CL2'| '
ZSHARED  DC    CL9' '
         DC    CL2'| '
ZOWNED   DC    CL9' '
         DC    CL2'| '
ZRECTYPE DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
OPTR     DS    A
         PRINT NOGEN
         SYMBAR MODE=DEC
         CVT   DSECT=YES
         IHAPSA
         IHALPDE
LPDELEN  EQU   *-LPDE
SEGMAX   EQU   LPDELEN*100
         IHAASCB
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
*
*
*  DQE  PRINTER / DUMPER
*
*  PARMS:  NON IPCS:
*          1  -  OUTPUT DCB ADDRESS
*          2  -  PRINT DCB ADDRESS
*          3  -  TCB ADDRESS
*          4  -  CDE ADDRESS
*          5  -  SPQE ADDRESS
*          6  -  DQE ADDRESS
*  PARMS:  IPCS
*          1  -  OUTPUT DCB ADDRESS
*          2  -  PRINT DCB ADDRESS (DUMMY PARM)
*          3  -  TCB ADDRESS (DUMP ADDRESS)
*          4  -  CDE ADDRESS (THIS ADDRESS SPACE)
*          5  -  SPQE ADDRESS (THIS ADDRESS SPACE)
*          6  -  DQE ADDRESS (THIS ADDRESS SPACE)
*          7  -  DQE ADDRESS (DUMP ADDRESS)
*
         PRINT    NOGEN
DUMPDQE  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         L     R3,OUTDCB            POINT TO OUTPUT DCB
         L     R4,PRINTDCB          POINT TO PRINT DCB
         L     R5,TCBPTR            GET THE TCB ADDRESS (IPCS - DUMP)
         L     R6,CDEPTR            POINT TO THE CDE
         L     R7,SPQEPTR           POINT TO THE SPQE
         L     R8,DQEPRM            POINT TO THE DQE
         SPACE
**********************************************************************
*
* MAKE SURE WE HAVE A DQE TO DUMP.  IF NOT, JUST RETURN. IF SO,
* INTIALIZE THE DATA AREA AND PUT IN ALL THE DATA
*
*      REGISTER USAGE:
*              R3  -> OUTPUT DCB
*              R4  -> PRINT DCB
*              R5  -  TCB ADDRESS, (FOR IPCS, THIS IS DUMP ADDRESS)
*              R6  -> CDE FOR THE PASSED TCB
*              R7  -> SPQE FOR THIS DQE
*              R8  -> THE DQE TO DUMP
*              R9  -  IPCS ONLY, THE DQE ADDRESS IN THE DUMP
*
**********************************************************************
         SPACE
         USING CDENTRY,R6
         USING SPQE,R7
         USING DQE,R8
         SPACE
         SLR   R0,R0                CLEAR RETURNED PARM IN CASE NO DQE
         LTR   R8,R8                DO WE HAVE A DQE?
         BZ    RETURN               IF NOT, QUIT
         SPACE
         MVC   BUFFZ,BUFFINIT
         MVC   BUFFD,BUFFDINT
         MVI   ZRECTYPE,RECTDQE     SET RECORD TYPE
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS01          ###############
         ST    R8,WORD
         AGO   .NPCS01
.IPCS01  ANOP
         L     R9,DQEDUMP           LOAD DUMP DQE ADDRESS
         ST    R9,WORD
.NPCS01  ANOP
         DROP  R10
         UNPK  THISDQE(9),WORD(5)   DQE ADDR TO PRINT RECORD
         TR    THISDQE(8),HEXCHAR
         MVI   THISDQE+8,C' '
         SPACE
         UNPK  AREA(9),DQEAREA(5)   DQE START ADDR TO BOTH RECS
         TR    AREA(8),HEXCHAR
         MVI   AREA+8,C' '
         MVC   ZAREA(8),AREA
         SPACE
         MVC   WORD(4),DQESIZE      AREA SIZE TO BOTH RECS
         UNPK  SIZE(9),WORD(5)
         TR    SIZE(8),HEXCHAR
         MVI   SIZE+8,C' '
         MVC   ZSIZE(8),SIZE
         SPACE
         L     R15,DQEAREA          END ADDR TO DUMP REC
         A     R15,DQESIZE
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SPACE
         UNPK  NEXTDQE(9),DQENEXT(5)  NEXT DQE TO PRINT REC
         TR    NEXTDQE(8),HEXCHAR
         MVI   NEXTDQE+8,C' '
         SPACE
         UNPK  FFQE(9),DQEFFQE(5)     FQE DATA TO PRINT REC
         TR    FFQE(8),HEXCHAR
         MVI   FFQE+8,C' '
         UNPK  LFQE(9),DQELFQE(5)
         TR    LFQE(8),HEXCHAR
         MVI   LFQE+8,C' '
         SPACE
         MVC   ZPGMNAME(8),=CL8' '     CLEAR PROGRAM NAME
         MVC   ZENTRYPT(9),=CL8' '     CLEAR ENTRY POINT
         SPACE
         LTR   R6,R6                   IS THERE A CDE?
         BZ    NOCDE
         SPACE
         MVC   ZPGMNAME(8),CDNAME      PGM NAME TO DUMP REC
         L     R15,CDENTPT             LOAD ENTRY POINT
         LTR   R15,R15                 IS IT ZERO? (FAKE CDE)
         BZ    NOCDE                   IF SO, LEAVE BLANK
         SPACE
         UNPK  ZENTRYPT(9),CDENTPT(5)  PGM ENTRY POINT TO DUMP REC
         TR    ZENTRYPT(8),HEXCHAR
         MVI   ZENTRYPT+8,C' '
         SPACE
NOCDE    DS    0H
         MVC   ZTCBADDR(8),=CL8' '     CLEAR TCB ADDR FIELD
         LTR   R5,R5                   IS THERE A TCB?
         BZ    NOTCB
         SPACE
         ST    R5,WORD
         UNPK  ZTCBADDR(9),WORD(5)     TCB ADDR TO DUMP RECORD
         TR    ZTCBADDR(8),HEXCHAR
         MVI   ZTCBADDR+8,C' '
         SPACE
NOTCB    DS    0H
         SLR   R15,R15
         IC    R15,SPQEID              SUBPOOL NUM TO DUMP RECORD
         CVD   R15,WORD
         MVC   ZSUBPOOL(8),=X'4020202020202021'
         ED    ZSUBPOOL(8),WORD+4
         OI    ZSUBPOOL+7,X'F0'
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS04
         CLI   SPQEKEY,X'FF'           CHECK SPECIAL VALUE
         BNE   SPQEOK
         SPACE
         L     R14,DQEAREA             POINT TO THE DQE AREA
         IVSK  R15,R14                 GET THE PROTECT KEY
         B     SPQEKEY2
.IPCS04  ANOP
         SPACE
SPQEOK   DS    0H
         IC    R15,SPQEKEY             KEY NUM TO DUMP RECORD
SPQEKEY2 DS    0H
         SRL   R15,4
         CVD   R15,WORD
         MVC   ZKEY(8),=X'4020202020202021'
         ED    ZKEY(8),WORD+4
         OI    ZKEY+7,X'F0'
         AIF   ('&SYSPARM' NE 'IPCS').NPCS03          ###############
         CLI   SPQEKEY,X'FF'           CHECK SPECIAL VALUE
         BNE   SPQEOK2
         SPACE
         MVC   ZKEY(8),=CL8' '         IPCS, CLEAR PROTECT KEY
         SPACE
SPQEOK2  DS    0H
.NPCS03  ANOP
         SPACE
         MVC   ZSHARED(8),=CL8' '         SHARED TO DUMP RECORD
         TM    SPQEFLGS,SPQESHR
         BZ    *+10
         MVC   ZSHARED(8),=CL8'SHARED'
         SPACE
         MVC   ZOWNED(8),=CL8' '          OWNED TO DUMP RECORD
         TM    SPQEFLGS,SPQEOWN
         BZ    *+10
         MVC   ZOWNED(8),=CL8'OWNED'
         SPACE
         LTR   R3,R3                      IS THERE A DUMP DCD?
         BZ    TRYPRT                     IF NOT, SKIP THE DUMP
         SPACE
         PUT31 AREA24,(R3),BUFFZ DUMP RECORD
         PUT31 AREA24,(R3),ZHDR4
         SPACE
TRYPRT   DS    0H
         LTR   R4,R4                      IS THERE A PRINT DCB?
         BZ    DONE                       IF NOT, SKIP THE PRINT
         SPACE
         VSMPRNT AREA24,(R4),BUFFD PRINT RECORD
         VSMPRNT AREA24,(R4),DHDR4
         SPACE
DONE     DS    0H
*        IF WE ARE TO CALL RUNFQE, CHECK FOR VALID DQE HERE FIRST.
         L     R0,DQESIZE                 AREA SIZE
RETURN   DS    0H
         REXIT ENV=OS,RETURN=(0)
         DROP  R6    CDE
         DROP  R7    SPQE
         DROP  R8    DQE
         SPACE
         LTORG
         SPACE
DHDR4    DC    CL133'                     +----------+----------+------*
               ----+----------+----------+----------+'
BUFFDINT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'  '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL44' '
         SPACE
         SPACE
ZHDR1    DC    CL133'  AREA    | SIZE     | END ADDR | SUBPOOL  | KEY  *
                   | PGM NAME | ENTRY PT | TCB ADDR | SHARED?  | OWNED?*
                  |'
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         SPACE
         EJECT
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
         LTORG
WORKAREA DSECT
         DS    26F              SAVE AREA
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
BUFFZ    DS    0CL133
         DC    CL1' '
ZAREA    DC    CL9' '
         DC    CL2'| '
ZSIZE    DC    CL9' '
         DC    CL2'| '
ZENDADDR DC    CL9' '
         DC    CL2'| '
ZSUBPOOL DC    CL9' '
         DC    CL2'| '
ZKEY     DC    CL9' '
         DC    CL2'| '
ZPGMNAME DC    CL9' '
         DC    CL2'| '
ZENTRYPT DC    CL9' '
         DC    CL2'| '
ZTCBADDR DC    CL9' '
         DC    CL2'| '
ZSHARED  DC    CL9' '
         DC    CL2'| '
ZOWNED   DC    CL9' '
         DC    CL2'| '
ZRECTYPE DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         SPACE
BUFFD    DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'  '
         DC    CL9' '
         DC    CL2'| '
THISDQE  DC    CL9' '
         DC    CL2'| '
AREA     DC    CL9' '
         DC    CL2'| '
SIZE     DC    CL9' '
         DC    CL2'| '
NEXTDQE  DC    CL9' '
         DC    CL2'| '
FFQE     DC    CL9' '
         DC    CL2'| '
LFQE     DC    CL9' '
         DC    CL2'| '
         DC    CL44' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
CDEPTR   DS    A
SPQEPTR  DS    A
DQEPRM   DS    A
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
CDEPTR   DS    A
SPQEPTR  DS    A
DQEPRM   DS    A
DQEDUMP  DS    A
OPTR     DS    A
.NPCS3P  ANOP
*        PRINT NOGEN
         SYMBAR MODE=DEC
         IKJTCB
         IHASPQE
         IHACDE
         IHADQE
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
*
*   FIND CDE GIVEN TCB
*   FOR IPCS TAKES TCB DUMP ADDR
*   ALWAYS RETURNS CDE ADDR IN THIS ADDRESS SPACE
*
         PRINT NOGEN
FINDCDE  RENTR BASE=11,ENV=OS,PARM=10,WORK=(WORKLEN,WORKAREA)
         SPACE
         L     R3,0(,R10)            POINT TO THE TCB
         SPACE
         SLR   R5,R5                 CLEAR CDE POINTER HOLDER
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS21          ###############
         USING TCB,R3
         AGO   .NPCS21
.IPCS21  ANOP
         IPCSLOAD R6,(R3),LEN=TCBLEN
         LTR   R6,R6                  BAD DUMP ADDR?
         BZ    RETURN
         USING TCB,R6                OVERLAY TCB IN THIS ADDR SP
.NPCS21  ANOP
         L     R4,TCBRBP             POINT TO THE RB
         N     R4,=X'00FFFFFF'       THIS IS A 24 BIT ADDRESS
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS22          ###############
         USING RBBASIC,R4
         AGO   .NPCS22
.IPCS22  ANOP
         USING RBBASIC,R7
.NPCS22  ANOP
         SPACE
RBLOOP   DS    0H
         AIF   ('&SYSPARM' NE 'IPCS').NPCS24          ###############
         IPCSLOAD R7,(R4),LEN=RBLEN
         LTR   R7,R7                  BAD DUMP ADDR?
         BZ    RETURN
.NPCS24  ANOP
         TM    RBSTAB1,RBFTP         IS THIS THE PRB?
         BZ    GOTPRB                PRB HAS ALL THREE BITS ZERO.
         SPACE
NOTPRB   DS    0H
         TM    RBSTAB2,RBTCBNXT      LAST RB BEFORE THE TCB?
         BO    RETURN
         SPACE
RBNEXT   DS    0H
         L     R4,RBLINK             NEXT RB
         N     R4,=X'00FFFFFF'       THIS IS A 24 BIT ADDRESS
         CR    R4,R3                 IS THIS THE TCB?
         BNE   RBLOOP                NO, KEEP TRYING
         B     RETURN
         SPACE
GOTPRB   DS    0H
         ICM   R5,7,RBCDE1           24 BIT CDE ADDRESS
         LTR   R5,R5                 IS R0 ZERO?
         BZ    NOTPRB                IF NOT, KEEP TRYING
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS29          ###############
         DROP  R3,R4
         AGO   .NPCS29
.IPCS29  ANOP
         DROP  R6,R7
.NPCS29  ANOP
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS23          ###############
         LR    R0,R5
         AGO  .NPCS23
.IPCS23  ANOP
         IPCSLOAD R4,(R5),LEN=CDELEN
         LR    R0,R4                  SAVE CDE ADDRESS
.NPCS23  ANOP
         SPACE
RETURN   REXIT ENV=OS,RETURN=(0)
         SPACE
         LTORG
         SPACE
*        PRINT NOGEN
         SYMBAR MODE=DEC
         IKJTCB
         IHACDE
CDELEN   EQU    *-CDENTRY
         IHARB  LIST=YES
RBLEN    EQU    *-RBBASIC
WORKAREA DSECT
         DS    26F
AREA24   DS    XL128
CALLLIST DS    8D
LINE     DS    CL133
         DS    0D
WORKLEN  EQU   *-WORKAREA
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         END
*
*   DUMP CDE(S) GIVEN TCB
*   FOR IPCS TAKES TCB DUMP ADDR
*
*   PARMS:
*        1  -> OUTPUT DCB
*        2  -> PRINT DCB
*        3  -> TCB
*        4  -> TCB DUMP ADDRESS (IPCS ONLY)
*
         PRINT NOGEN
DUMPCDE  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB           POINT TO THE PRINT  DCB
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS21          ###############
         L     R3,TCBPTR             POINT TO THE TCB
         USING TCB,R3
         SPACE
         AGO   .NPCS21
.IPCS21  ANOP
         L     R3,TCBDUMP            GET DUMP ADDRESS FOR TCB
         L     R6,TCBPTR             POINT TO THE TCB
         USING TCB,R6                OVERLAY TCB IN THIS ADDR SP
.NPCS21  ANOP
         L     R10,OUTDCB            POINT TO THE OUTPUT DCB
         DROP  R10
         EJECT
**********************************************************************
*
* FOR IPCS, FIRST ACCESS THE TCB.  NON-IPCS THE PARM POINTS TO IT.
* THEN WALK THE RB CHAIN LOOKING FOR PRB'S.  THE PRB POINTS TO THE
* CDE AND THE CDE POINTS TO THE CDE XLST.  THE CDE HAS THE NAME OF
* THE PROGRAM, ITS ENTRY POINT.  THE XTLST HAS IT'S SIZE.
*
*      REGISTER USAGE:
*              R2  -  RECORD TYPE (RECTCDEA OR RECTCDEB)
*              R3  -  TCB ADDRESS.  IPCS - ADDR IN DUMP
*              R4  -  CURRENT RB ADDRESS.  IPCS - ADDR IN DUMP
*              R5  -  THE CDE ADDRESS.  IPCS - ADDR NIN DUMP
*              R6  -  IPCS ONLY, -> TCB IN THIS ADDRESS SPACE
*              R7  -  IPCS ONLY, -> RB IN THIS ADDRESS SPACE
*              R8  -  IPCS ONLY, -> CDE IN THIS ADDRESS SPACE.
*              R9  -  CURRENT BIT BEING TESTED
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R13 -> DSA AND AUTOMATIC STORAGE
*              R14 -  WORK REGISTER
*              R15 -  WORK REGISTER
*
**********************************************************************
         SPACE
         SLR   R5,R5                 CLEAR CDE POINTER HOLDER
         L     R4,TCBRBP             POINT TO THE RB
         N     R4,=X'00FFFFFF'       THIS IS A 24 BIT ADDRESS
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS22          ###############
         USING RBBASIC,R4
         AGO   .NPCS22
.IPCS22  ANOP
         USING RBBASIC,R7
.NPCS22  ANOP
         SPACE
**********************************************************************
*
* TEST THIS RB TO SEE IF IT IS A PRB - PROGRAM REQUEST BLOCK.
*
**********************************************************************
         SPACE
RBLOOP   DS    0H
         AIF   ('&SYSPARM' NE 'IPCS').NPCS23          ###############
         IPCSLOAD R7,(R4),LEN=RBLEN,PERM=HOLDRB
         IPCSLMSG R7,R4,NORB,40,ZHDR4,(R10),(R9)
         LTR   R7,R7                  BAD DUMP ADDR?
         BZ    RETURN
.NPCS23  ANOP
         TM    RBSTAB1,RBFTP         IS THIS THE PRB?
         BZ    GOTPRB                PRB HAS ALL THREE BITS ZERO.
         SPACE
**********************************************************************
*
* IF THIS IS THE LAST RB BEFORE WE ARE BACK AT THE TCB, WE ARE DONE
* WITH THIS TCB.
*
**********************************************************************
         SPACE
NOTPRB   DS    0H
         TM    RBSTAB2,RBTCBNXT      LAST RB BEFORE THE TCB?
         BO    RETURN
         SPACE
**********************************************************************
*
* LINK TO THE NEXT RB.  IF IT IS THE TCB ADDRESS, WE ARE DONE.  THIS
* SHOULD NOT HAPPEN SINCE THE TEST AT LABEL NOTPRB SHOULD CATCH THE
* LAST RB.
*
**********************************************************************
         SPACE
RBNEXT   DS    0H
         L     R4,RBLINK             NEXT RB
         N     R4,=X'00FFFFFF'       THIS IS A 24 BIT ADDRESS
         CR    R4,R3                 IS THIS THE TCB?
         BNE   RBLOOP                NO, KEEP TRYING
         B     RETURN
         SPACE
**********************************************************************
*
* WE HAVE THE PRB.  MAKE SURE IT POINTS TO A CDE.  SOME PRB'S HAVE A
* ZERO CDE ADDRESS.
*
**********************************************************************
         SPACE
GOTPRB   DS    0H
         ICM   R5,7,RBCDE1           24 BIT CDE ADDRESS
         LTR   R5,R5                 IS R0 ZERO?
         BZ    NOTPRB                IF NOT, KEEP TRYING
         SPACE
         LA    R2,RECTCDEA           SHOW FIRST CDE IS TYPE 4
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS24          ###############
         DROP  R3,R4
         AGO   .NPCS24
.IPCS24  ANOP
         DROP  R6,R7
.NPCS24  ANOP
         EJECT
**********************************************************************
*
* WE HAVE A CDE.  INITIALIZE THE BUFFER AND GET THE INFORMATION WE
* NEED FROM THE CDE.
*
*      REGISTER USAGE:
*              R2  -  RECORD TYPE TO PASS TO PRTCDE
*              R3  -  TCB ADDRESS.  IPCS - ADDR IN DUMP
*              R4  -  CURRENT RB ADDRESS.  IPCS - ADDR IN DUMP
*              R5  -  THE CDE ADDRESS.  IPCS - ADDR IN DUMP
*              R6  -  IPCS ONLY, -> TCB IN THIS ADDRESS SPACE
*              R7  -  IPCS ONLY, -> RB IN THIS ADDRESS SPACE
*              R8  -  IPCS ONLY, -> CDE IN THIS ADDRESS SPACE.
*              R9  -  CURRENT BIT BEING TESTED
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  TEMP POINTER TO OPTIONS FOR CALLS
*              R13 -> DSA AND AUTOMATIC STORAGE
*              R14 -  WORK REGISTER
*              R15 -  WORK REGISTER
*
**********************************************************************
         SPACE
GOTCDE   DS    0H
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS25          ###############
         USING CDENTRY,R5
         SPACE
         L     R15,OPTPTR
         CLI   LPAPRM(R15),X'FF'      LPA OPTION ON?
         BE    SK1                    IF SO, CONTINUE PROCESSING
         SPACE
         TM    CDATTR,CDNIP           IS THIS AN LPA MODULE?
         BO    SKIPCDE                IF SO, SKIP IT BECAUSE OF NOLPA
         SPACE
SK1      DS    0H
         L     R12,OPTPTR
         CALL  PRTCDE,((R10),(R9),(R2),(R5),(R12)),MF=(E,CALLLIST)
         SPACE
         AGO  .NPCS25
.IPCS25  ANOP
         IPCSLOAD R8,(R5),LEN=CDELEN,PERM=HOLDCDE
         IPCSLMSG R8,R5,NOCDE,40,ZHDR4,(R10),(R9)
         LTR   R8,R8                  DID WE GET A CDE?
         BZ    NOTPRB                 IF NOT, DON'T PROCESS THE CDE
         USING CDENTRY,R8
         SPACE
         L     R15,OPTPTR
         CLI   LPAPRM(R15),X'FF'      LPA OPTION ON?
         BE    SK1                    IF SO, CONTINUE PROCESSING
         SPACE
         TM    CDATTR,CDNIP           IS THIS AN LPA MODULE?
         BO    SKIPCDE                IF SO, SKIP IT BECAUSE OF NOLPA
         SPACE
SK1      DS    0H
         L     R12,OPTPTR
         CALL  PRTCDE,((R10),(R9),(R2),(R8),(R5),(R12)),MF=(E,CALLLIST)
         SPACE
.NPCS25  ANOP
SKIPCDE  DS    0H
*        TM    CDATTRB,CDELPDE        IS THIS REALLY AN LPDE?
*        BO    NOTPRB                 IF SO, GO TO THE NEXT RB.
         SPACE
NEXTCDE  DS    0H
         L     R5,CDCHAIN
         LTR   R5,R5
         BZ    NOTPRB                 TRY NEXT RB
         LA    R2,RECTCDEB            SHOW FIRST CDE IS TYPE 6
         B     GOTCDE
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS29A         ###############
         DROP  R5
         AGO  .NPCS29A
.IPCS29A ANOP
         DROP  R8
.NPCS29A ANOP
         SPACE
RETURN   DS    0H
         REXIT ENV=OS
         SPACE
         LTORG
NOCDE    DC    CL133' # UNABLE TO ACCESS CDE AT DUMP ADDRESS XXXXXXXX  X
               (DUMPCDE) '
NORB     DC    CL133' # UNABLE TO ACCESS RB AT DUMP ADDRESS XXXXXXXX   X
               (DUMPCDE) '
NOCDEX   DC    CL133' # UNABLE TO ACCESS CDE EXTLST AT DUMP ADDRESS XXX*
               XXXXX  (DUMPCDE) '
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         PRINT NOGEN
         SYMBAR MODE=DEC
         IKJTCB
         IHACDE
CDELEN   EQU    *-CDENTRY
         IHAXTLST
XLSTLEN  EQU    *-XTLST
         IHARB  LIST=YES
RBLEN    EQU    *-RBBASIC
         IHALPDE
LPDELEN  EQU   *-LPDE
WORKAREA DSECT
         DS    26F
AREA24   DS    XL128
WORD     DS    D
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
         DS    0F
HOLDRB   DS    XL(RBLEN)
         DS    0F
HOLDCDE  DS    XL(CDELEN)
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
         DS    A          NOT USED
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
TCBDUMP  DS    A
OPTR     DS    A
.NPCS3P  ANOP
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         SPACE
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
*
*   DUMP CDE(S) FOR MODULES LOADED (SVC 6) BY A GIVEN TCB
*   FOR IPCS TAKES TCB DUMP ADDR
*
*   PARMS:
*        1  -> OUTPUT DCB
*        2  -> PRINT DCB
*        3  -> TCB
*        4  -  IPCS ONLY - TCB ADDRESS IN DUMP
*
*        PRINT NOGEN
DUMPLLE  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB           POINT TO THE PRINT  DCB
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS21          ###############
         L     R3,TCBPTR             POINT TO THE TCB
         USING TCB,R3
         SPACE
         AGO   .NPCS21
.IPCS21  ANOP
         L     R3,TCBDUMP            GET DUMP ADDRESS FOR TCB
         L     R6,TCBPTR             POINT TO THE TCB
         USING TCB,R6                OVERLAY TCB IN THIS ADDR SP
.NPCS21  ANOP
         L     R10,OUTDCB            POINT TO THE OUTPUT DCB
         DROP  R10
         EJECT
**********************************************************************
*
* FOR IPCS, FIRST ACCESS THE TCB.  NON-IPCS, THE PARM POINTS TO IT.
* THEN WALK THE LLE CHAIN DUMPING THE CDE'S. THE CDE POINTS TO THE
* CDE XLST.  THE CDE HAS THE NAME OF THE PROGRAM, ITS ENTRY POINT.
* THE XTLST HAS ITS SIZE.
*
*      REGISTER USAGE:
*              R3  -  TCB ADDRESS.  IPCS - ADDR IN DUMP
*              R4  -  CURRENT RB ADDRESS.  IPCS - ADDR IN DUMP
*              R5  -  THE CDE ADDRESS.  IPCS - ADDR NIN DUMP
*              R6  -  IPCS ONLY, -> TCB IN THIS ADDRESS SPACE
*              R7  -  IPCS ONLY, -> RB IN THIS ADDRESS SPACE
*              R8  -  IPCS ONLY, -> CDE IN THIS ADDRESS SPACE.
*              R9  -> PRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R13 -> DSA AND AUTOMATIC STORAGE
*              R14 -  WORK REGISTER
*              R15 -  WORK REGISTER
*
**********************************************************************
         SPACE
         SLR   R5,R5                 CLEAR CDE POINTER HOLDER
         L     R4,TCBLLS             POINT TO THE LOAD LIST
         LTR   R4,R4                 ANYTHING IN THE LIST?
         BZ    RETURN                IF NOT, WE ARE DONE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS22          ###############
         USING LLE,R4
         AGO   .NPCS22
.IPCS22  ANOP
         USING LLE,R7
.NPCS22  ANOP
         SPACE
**********************************************************************
*
* GET THE LLE AND THE CDE FROM POINTED TO BY THE LLE.
*
**********************************************************************
         SPACE
LLELOOP  DS    0H
         AIF   ('&SYSPARM' NE 'IPCS').NPCS23          ###############
         IPCSLOAD R7,(R4),LEN=LLELEN,PERM=HOLDLLE
         IPCSLMSG R7,R4,NOLLE,41,ZHDR4,(R10),(R9)
         LTR   R7,R7                  BAD DUMP ADDR?
         BZ    RETURN
.NPCS23  ANOP
         SPACE
**********************************************************************
*
* GET THE CDE FROM THE LLE
*
**********************************************************************
         SPACE
         L     R5,LLECDPT           CDE POINTER
         LTR   R5,R5                IS THERE ONE?
         BZ    NEXTLLE              IF NOT, SKIP IT
         EJECT
**********************************************************************
*
* WE HAVE A CDE.  INITIALIZE THE BUFFER AND GET THE INFORMATION WE
* NEED FROM THE CDE.
*
*      REGISTER USAGE:
*              R3  -  TCB ADDRESS.  IPCS - ADDR IN DUMP
*              R4  -  CURRENT RB ADDRESS.  IPCS - ADDR IN DUMP
*              R5  -  THE CDE ADDRESS.  IPCS - ADDR NIN DUMP
*              R6  -  IPCS ONLY, -> TCB IN THIS ADDRESS SPACE
*              R7  -  IPCS ONLY, -> RB IN THIS ADDRESS SPACE
*              R8  -  IPCS ONLY, -> CDE IN THIS ADDRESS SPACE.
*              R9  -> PRINT CDE
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  TEMP ADDR OF RUN TIME OPTIONS TO PASS TO PRTCDE
*              R13 -> DSA AND AUTOMATIC STORAGE
*              R14 -  WORK REGISTER
*              R15 -  WORK REGISTER
*
**********************************************************************
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS25          ###############
         USING CDENTRY,R5
         SPACE
         L     R12,OPTPTR
         CALL  PRTCDE,((R10),(R9),RECTLLE,(R5),(R12)),MF=(E,CALLLIST)
         SPACE
         AGO  .NPCS25
.IPCS25  ANOP
         IPCSLOAD R8,(R5),LEN=CDELEN,PERM=HOLDCDE
         IPCSLMSG R8,R5,NOCDE,40,ZHDR4,(R10),(R9)
         LTR   R8,R8                  DID WE GET A CDE?
         BZ    NEXTLLE                IF NOT, DON'T PROCESS THE CDE
         USING CDENTRY,R8
         SPACE
         L     R12,OPTPTR
         CALL  PRTCDE,((R10),(R9),RECTLLE,(R8),(R5),(R12)),            X
               MF=(E,CALLLIST)
         SPACE
.NPCS25  ANOP
         SPACE
**********************************************************************
*
* LINK TO THE NEXT LLE.  THE END OF THE LIST HAS A ZERO.
*
**********************************************************************
         SPACE
NEXTLLE  DS    0H
         L     R4,LLECHN             NEXT LLE
         LTR   R4,R4                 END OF LIST?
         BNZ   LLELOOP
         B     RETURN
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS27          ###############
         DROP  R3,R4,R5
         AGO  .NPCS27
.IPCS27  ANOP
         DROP  R6,R7,R8
.NPCS27  ANOP
         SPACE
         SPACE
RETURN   DS    0H
         REXIT ENV=OS
         SPACE
         LTORG
NOTCB    DC    CL133' # UNABLE TO ACCESS TCB AT DUMP ADDRESS XXXXXXXX  X
               (DUMPLLE) '
NOCDE    DC    CL133' # UNABLE TO ACCESS CDE AT DUMP ADDRESS XXXXXXXX  X
               (DUMPLLE) '
NOLLE    DC    CL133' # UNABLE TO ACCESS LLE AT DUMP ADDRESS XXXXXXXX  X
               (DUMPLLE) '
NOCDEX   DC    CL133' # UNABLE TO ACCESS CDE EXTLST AT DUMP ADDRESS XXX*
               XXXXX  (DUMPLLE) '
         SPACE
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
*        PRINT NOGEN
         SYMBAR MODE=DEC
         IKJTCB
         IHACDE
CDELEN   EQU    *-CDENTRY
         IHAXTLST
XLSTLEN  EQU    *-XTLST
         IHALLE
LLELEN   EQU    *-LLE
         IHALPDE
LPDELEN  EQU   *-LPDE
WORKAREA DSECT
         DS    26F
AREA24   DS    XL128
WORD     DS    D
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
         DS    0F
HOLDLLE  DS    XL(LLELEN)
         DS    0F
HOLDCDE  DS    XL(CDELEN)
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
         DS    A          NOT USED
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
TCBDUMP  DS    A
OPTR     DS    A
.NPCS3P  ANOP
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
*
*   PRINT A CDE
*   FOR IPCS TAKES TCB DUMP ADDR
*
*   PARMS:
*        1  -> OUTPUT DCB
*        2  -> PRINT DCB
*        3  -  REC TYPE VALUE
*        4  -> CDE TO PRINT
*        5  -> CDE ADDRESS IN DUMP (IPCS ONLY)
*
         PRINT NOGEN
PRTCDE   RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB           POINT TO THE PRINT  DCB
         L     R2,RECT               GET THE REC TYPE
         L     R5,CDEPTR             POINT TO THE CDE
         USING CDENTRY,R5
         SPACE
         AIF   ('&SYSPARM' NE 'IPCS').NPCS21          ###############
         L     R6,CDEDUMP            GET CDE ADDRESS FROM DUMP
         SPACE
.NPCS21  ANOP
         L     R10,OUTDCB            POINT TO THE OUTPUT DCB
         DROP  R10
         MVC   BUFFZ(133),BUFFINIT
         STC   R2,ZRECTYPE           FILL IN THE RECORD TYPE
         MVC   BUFFP(133),BUFFINIT
         STC   R2,PRECTYPE           FILL IN THE RECORD TYPE
         EJECT
**********************************************************************
*
* WE HAVE A CDE.  INITIALIZE THE BUFFER AND GET THE INFORMATION WE
* NEED FROM THE CDE.
*
*      REGISTER USAGE:
*              R2  -  CDE XLST ADDRESS.  IPCS - ADDR IN DUMP
*              R5  -> THE CDE TO PRINT
*              R6  -  IPCS ONLY, - CDE ADDRESS IN DUMP
*              R9  -> PRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  IPCS ONLY, -> CDE XLST IN THIS ADDRESS SPACE
*              R13 -> DSA AND AUTOMATIC STORAGE
*              R14 -  WORK REGISTER
*              R15 -  WORK REGISTER
*
**********************************************************************
         SPACE
         MVI   MINORFLG,X'00'        CLEAR FLAG FOR MINOR CDE
         SPACE
**********************************************************************
*
* FILL IN THE STUFF FROM THIS CDE
*
**********************************************************************
         SPACE
         L     R15,CDENTPT            GET ENTRY POINT
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)       TEMP USE ZAREA (MAY FIX LATER)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         SPACE
         MVC   ZENTRYPT(8),ZAREA
         MVC   ZPGMNAME(8),CDNAME
         SPACE
         ST    R3,WORD                TCB ADDRESS
         UNPK  ZTCBADDR(9),WORD(5)
         TR    ZTCBADDR(8),HEXCHAR
         MVI   ZTCBADDR+8,C' '
         SPACE
         SLR   R15,R15
         IC    R15,CDSP
         CVD   R15,WORD
         MVC   ZSUBPOOL(8),=X'4020202020202021'
         ED    ZSUBPOOL(8),WORD+4
         OI    ZSUBPOOL+7,X'F0'
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS21Z         ###############
         ST    R5,WORD                CDE ADDRESS
         AGO   .NPCS21Z
.IPCS21Z ANOP
         ST    R6,WORD                CDE ADDRESS
.NPCS21Z ANOP
         UNPK  PTHISCDE(9),WORD(5)
         TR    PTHISCDE(8),HEXCHAR
         MVI   PTHISCDE+8,C' '
         SPACE
         UNPK  PATTR(9),CDATTRB(5)
         TR    PATTR(8),HEXCHAR
         MVI   PATTR+8,C' '
         SPACE
*.NPCS21Z ANOP
         TM    CDATTR,CDNIP           IS THIS AN LPA MODULE?
         BZ    NOTLPA                 IF NOT, DON'T MARK AS SUCH
         SPACE
         MVC   ZSHARED(8),=CL8'LPA MOD'
         SPACE
NOTLPA   DS    0H
         TM    CDATTR2,CDAUTH         IS THIS MODULE AC 1
         BZ    NOTAC1                 IF NOT, DON'T MARK AS SUCH
         SPACE
         MVC   ZKEY(8),=CL8'AC(1)'
         SPACE
NOTAC1   DS    0H
         EJECT
**********************************************************************
*
* CHECK TO SEE IF THIS IS REALLY AN LPDE (LINK PACK DIRECTORY ENTRY).
* IF SO, THE LOAD POINT AND LENGTH ARE PART OF THE LPDE.  OTHERWISE
* WE NEED TO GET THE CDE EXT LIST TO GET THIS INFORMATION.
*
* IF THIS IS A MINOR CDE, WE HAVE TO GET TO THE MAJOR CDE TO GET THE
* EXT LIST ADDRESS.  DO THIS IF REQUIRED.
*
**********************************************************************
         SPACE
         TM    CDATTRB,CDELPDE        IS THIS REALLY AN LPDE?
         BO    ISLPDE                 IF SO, PROCESS AS SUCH.
         SPACE
         L     R2,CDXLMJP             POINT TO EXIT LIST IF MAJOR
         TM    CDATTR,CDMIN           IS THIS A MINOR CDE
         BZ    GOTMAJOR               IF NOT, WE GOT THE MAJOR
         SPACE
         MVI   MINORFLG,X'FF'         SHOW THIS IS A MINOR CDE
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS25A         ###############
         LR    R5,R2                   ADDRESS THE MAJOR CDE
         SPACE
         AGO  .NPCS25A
.IPCS25A ANOP
         LR    R6,R2                   ADDRESS THE MAJOR CDE
         IPCSLOAD R5,(R6),LEN=CDELEN
         IPCSLMSG R5,R6,NOCDE,40,ZHDR4,(R10),(R9)
         LTR   R5,R5                  DID WE GET A MAJOR CDE?
         BZ    CDEOUT                 IF NOT, DUMP WHAT WE HAVE
         SPACE
.NPCS25A ANOP
         SPACE
         SLR   R15,R15                 REDO THE SUBPOOL
         IC    R15,CDSP
         CVD   R15,WORD
         MVC   ZSUBPOOL(8),=X'4020202020202021'
         ED    ZSUBPOOL(8),WORD+4
         OI    ZSUBPOOL+7,X'F0'
         SPACE
         TM    CDATTRB,CDELPDE         IS THIS REALLY AN LPDE?
         BO    ISLPDE                  IF SO, PROCESS AS SUCH.
         L     R2,CDXLMJP              POINT TO EXIT LIST IN MAJOR
         EJECT
**********************************************************************
*
* ACCESS THE CDE XTLST AND GET THE RELEVANT DATA FROM IT.
*
**********************************************************************
         SPACE
GOTMAJOR DS    0H
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS26          ###############
         USING XTLST,R2
         SPACE
         AGO  .NPCS26
.IPCS26  ANOP
         IPCSLOAD R12,(R2),LEN=XLSTLEN
         IPCSLMSG R12,R2,NOCDEX,47,ZHDR4,(R10),(R9)
         LTR   R12,R12                  DID WE GET A XLST
         BZ    CDEOUT                 IF NOT, DUMP WHAT WE HAVE
         USING XTLST,R12
         SPACE
.NPCS26  ANOP
         SPACE
         L     R15,XTLMSBAD            GET LOAD POINT
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         SPACE
         SLR   R14,R14
         ICM   R14,7,XTLMSBLN         GET LOAD POINT
         ST    R14,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         SPACE
         AR    R15,R14
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SPACE
         CLI   MINORFLG,X'FF'         IS THE MINOR CDE FLAG SET?
         BNE   CDEOUT                 IF NOT, WE ARE DONE
         SPACE
         MVC   ZOWNED(8),CDNAME      SAVE MAJOR NAME
         SPACE
**********************************************************************
*
* DUMP THE OUTPUT RECORD WITH THE CDE INFORMATION.
*
**********************************************************************
         SPACE
CDEOUT   DS    0H
         L     R15,OPTPTR
         CLI   CDEPRM(R15),X'FF'      CDE PARM ON?
         BNE   NP1
         CLI   ZRECTYPE,RECTLLE
         BE    NP1
         MVC   PAREA(8),ZAREA        REARANGE AREA
         MVC   PSUBPOOL(8),ZSUBPOOL
         MVC   PKEY(8),ZKEY
         MVC   PPGMNAME(8),ZPGMNAME
         MVC   PENTRYPT(8),ZENTRYPT
         MVC   PTCBADDR(8),ZTCBADDR
         MVC   PSHARED(8),ZSHARED
         MVC   POWNED(8),ZOWNED
         SPACE
         VSMPRNT AREA24,(R9),ZHDR4
         VSMPRNT AREA24,(R9),PHDR1
         VSMPRNT AREA24,(R9),BUFFP
         VSMPRNT AREA24,(R9),ZHDR4
NP1      DS    0H
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         B     RETURN                 TRY NEXT RB
         SPACE
         DROP  R5
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS27          ###############
         DROP  R2
         AGO  .NPCS27
.IPCS27  ANOP
         DROP  R12
.NPCS27  ANOP
         EJECT
**********************************************************************
*
* WE HAVE AN LPDE.  FOR IPCS, REGET THE ENTRY WITH THE NEW LENGTH.
*
**********************************************************************
         SPACE
ISLPDE   DS    0H
         MVC   ZSHARED(8),=CL8'LPDE'
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS28          ###############
         USING LPDE,R5
         SPACE
         AGO  .NPCS28
.IPCS28  ANOP
         IPCSLOAD R5,(R6),LEN=LPDELEN
         IPCSLMSG R5,R6,NOLPDE,41,ZHDR4,(R10),(R9)
         LTR   R5,R5                  DID WE GET AN LPDE?
         BZ    CDEOUT                 IF NOT, DUMP WHAT WE HAVE
         SPACE
         USING LPDE,R5
.NPCS28  ANOP
         SPACE
**********************************************************************
*
* AS WITH CDE'S, LPDE'S COME IN MAJOR AND MINOR VARIETIES. TEST FOR A
* MINOR LPDE, AND IF FOUND, GO GET THE MAJOR.
*
**********************************************************************
         SPACE
         TM    LPDEATTR,LPDEMIN    IS IT A MINOR LPDE
         BO    MINOR               IF SO, GO GET THE MAJOR
         SPACE
         L     R15,LPDEXTAD        GET AREA START
         ST    R15,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         UNPK  ZSIZE(9),LPDEXTLN(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         A     R15,LPDEXTLN
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         CLI   MINORFLG,X'FF'         IS THE MINOR CDE FLAG SET?
         BNE   CDEOUT                 IF NOT, WE ARE DONE
         SPACE
         MVC   ZOWNED(8),LPDENAME
         B     CDEOUT                 GO DUMP IT
         SPACE
MINOR    DS    0H
         MVI   MINORFLG,X'FF'         SHOW THIS IS A MINOR CDE
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS28A         ###############
         L     R5,LPDEMJP             POINT TO THE MAJOR
         AGO  .NPCS28A
.IPCS28A ANOP
         L     R6,LPDEMJP             POINT TO THE MAJOR
         IPCSLOAD R5,(R6),LEN=LPDELEN
         IPCSLMSG R5,R6,NOLPDE,41,ZHDR4,(R10),(R9)
         LTR   R5,R5                  DID WE GET AN LPDE?
         BZ    CDEOUT                 IF NOT, DUMP WHAT WE HAVE
         SPACE
.NPCS28A ANOP
         B     ISLPDE                 AND TRY AGAIN
         SPACE
         DROP  R5
         SPACE
RETURN   DS    0H
         REXIT ENV=OS
         SPACE
         LTORG
NOCDEX   DC    CL133' # UNABLE TO ACCESS CDE EXTLST AT DUMP ADDRESS XXX*
               XXXXX  (PRTCDE) '
NOLPDE   DC    CL133' # UNABLE TO ACCESS LPDE AT DUMP ADDRESS XXXXXXXX X
               (PRTCDE) '
NOCDE    DC    CL133' # UNABLE TO ACCESS CDE AT DUMP ADDRESS XXXXXXXX  X
               (PRTCDE) '
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
PHDR1    DC    CL133' CDE ADDR | ATTRB    | PGM AREA | SUBPOOL  | APF? *
                   | PGM NAME | ENTRY PT | TCB ADDR | LPA?     | MAJOR *
                  |   | '
         SPACE
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
WORKAREA DSECT
         DS    26F
AREA24   DS    XL128
WORD     DS    D
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
BUFFZ    DS    0CL133
         DC    CL1' '
ZAREA    DC    CL9' '
         DC    CL2'| '
ZSIZE    DC    CL9' '
         DC    CL2'| '
ZENDADDR DC    CL9' '
         DC    CL2'| '
ZSUBPOOL DC    CL9' '
         DC    CL2'| '
ZKEY     DC    CL9' '
         DC    CL2'| '
ZPGMNAME DC    CL9' '
         DC    CL2'| '
ZENTRYPT DC    CL9' '
         DC    CL2'| '
ZTCBADDR DC    CL9' '
         DC    CL2'| '
ZSHARED  DC    CL9' '
         DC    CL2'| '
ZOWNED   DC    CL9' '
         DC    CL2'| '
ZRECTYPE DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
BUFFP    DS    0CL133
         DC    CL1' '
PTHISCDE DC    CL9' '
         DC    CL2'| '
PATTR    DC    CL9' '
         DC    CL2'| '
PAREA    DC    CL9' '
         DC    CL2'| '
PSUBPOOL DC    CL9' '
         DC    CL2'| '
PKEY     DC    CL9' '
         DC    CL2'| '
PPGMNAME DC    CL9' '
         DC    CL2'| '
PENTRYPT DC    CL9' '
         DC    CL2'| '
PTCBADDR DC    CL9' '
         DC    CL2'| '
PSHARED  DC    CL9' '
         DC    CL2'| '
POWNED   DC    CL9' '
         DC    CL2'| '
PRECTYPE DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
MINORFLG DS    X
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
RECT     DS    A
CDEPTR   DS    A
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
RECT     DS    A
CDEPTR   DS    A
CDEDUMP  DS    A
OPTR     DS    A
.NPCS3P  ANOP
         SPACE 3
         PRINT NOGEN
         SYMBAR MODE=DEC
         IKJTCB
         IHACDE
CDELEN   EQU    *-CDENTRY
         IHAXTLST
XLSTLEN  EQU    *-XTLST
         IHARB  LIST=YES
RBLEN    EQU    *-RBBASIC
         IHALPDE
LPDELEN  EQU   *-LPDE
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         SPACE
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
DMPAQAT  TITLE 'DUMP ADDRESS DATA FROM AN AQAT INDEX TABLE'
**********************************************************************
*
* SEGMENT NAME:
*
*    DMPAQAT -- DUMP ADDRESS DATA FROM AN AQAT INDEX TABLE
*
* INPUTS (*TO FUNCTIONS):
*
*    OUTPUT -- OUTPUT DCB (*1)
*       THE ADDESS OF THE OUTPUT DCB IS PASSED TO THIS ROUTINE THE
*       DCB HAS FIXED LENGTH RECORDS OF LENGTH 133.
*
*    AQAT -- POINTER TO THE AQAT INDEX TABLE (*1,2,3)
*       THE SECOND PARM TO THIS ROUTINE IS A THE ADDRESS OF AN AQAT
*       INDEX TABLE.  THIS TABLE CONTAINS 256 FULLWORD ENTRIES. EACH
*       NONZERO ENTRY POINTS TO AN AQAT.  EACH ENTRY REPRESENTS AN 8
*       MEG REGION OF ADDRESSES.  THERE ARE 256 * 8MEG REGIONS IN THE
*       2 GEG ADDRESS SPACE.  A ZERO ENTRY MEANS THERE IS NO AQAT FOR
*       THIS ENTRY AND THIS SUBPOOL HAS NO PAGES ALLOCATED IN THIS 8
*       MEG REGION. THE AQAT HAS A 4 BYTE HEADER WITH THE CHARS AQAT
*       IN IT.  FOLLOWING THIS ARE 6 BYTE ENTRIES CONSISTING OF A
*       POINTER (WHICH WE ARE NOT INTERESTED IN) AND A 2 BYTE BITMAP.
*       THE BITMAP CORRESPONDS TO 16 PAGES (64K) OF MEMORY.  THERE
*       ARE 128 OF THESE 6 BYTE ENTRIES.
*
*    SUBPOOL -- SUBPOOL NUMBER (*1)
*       THE THIRD PARM TO THIS ROUTINE IS A FULLWORD INTEGER.  THIS
*       IS THE SUBPOOL NUMBER BEING PROCESSED.  THIS DATA IS PUT IN
*       THE OUTPUT RECORD.
*
*    NAME -- NAME FOR THE PGM FIELD (*1)
*       THE ADDRESS OF AN 8 BYTE CHARACTER STRING TO BE PUT IN THE 8
*       BYTE PROGRAM NAME FIELD IS THE 4TH PARM TO THIS ROUTINE.
*
* FUNCTIONS:
*
*    1. LOAD THE PARM LIST INTO REGISTERS
*
*    2. WALK THE AQAT INDEX LOOKING FOR AQAT TABLES.
*
*    3. WHEN AN AQAT IS FOUND, WALK IT DUMPING THE PAGE ALLOCATION
*       DATA
*
* OUTPUTS (*FROM FUNCTIONS):
*
*    OUTPUT -- OUTPUT DCB (*3)
*       THE ADDESS OF THE OUTPUT DCB IS PASSED TO THIS ROUTINE THE
*       DCB HAS FIXED LENGTH RECORDS OF LENGTH 133.
*
**********************************************************************
         EJECT
         PRINT NOGEN
DMPAQAT  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         MVC   OPTPTR(4),OPTR
         L     R5,AQATNADR          POINT TO THE AQAT INDX TABLE
         L     R15,SUBPOOLP         LOAD THE SUBPOOL
         L     R14,NAMEPRM          POINT TO NAME FOR EP
         L     R10,OUTDCB           POINT TO THE OUTPUT DCB
         DROP  R10
         MVC   BUFFZ,BUFFINIT
         MVI   ZRECTYPE,RECTDQE
         SPACE
**********************************************************************
*
* COPY THE SUBPOOL AND NAME DATA TO THE OUTPUT RECORD
*
**********************************************************************
         SPACE
         CVD   R15,WORD
         MVC   ZSUBPOOL(8),=X'4020202020202021'
         ED    ZSUBPOOL(8),WORD+4
         OI    ZSUBPOOL+7,X'F0'
         SPACE
         MVC   ZKEY(8),=CL8'       0'  SHOW KEY ZERO
         SPACE
         MVC   ZPGMNAME(8),0(R14)   COPY NAME TO EP
         AIF   ('&SYSPARM' NE 'IPCS').NPCS01          ###############
         EJECT
**********************************************************************
*
* THE AQAT INDEX TABLE ADDRESS PASSED IN IS THE DUMP ADDRESS, CONVERT
* IT TO THE REAL ADDRESS.
*
**********************************************************************
         SPACE
         IPCSLOAD R2,(R5),LEN=1024,PERM=HOLDAQDX
         IPCSLMSG R2,R5,NOAQATN,47,ZHDR4,(R10),''
         LTR   R2,R2                   DID WE GET THE AQAT INDEX.
         BZ    RETURN                  IF NOT, FORGET IT
         LR    R5,R2                   PUT IN THE CORRECT ADDRESS
.NPCS01  ANOP
         EJECT
**********************************************************************
*
* TOP OF THE 8 MEG LOOP.  WALK THE AQAT INDEX TABLE LOOKING FOR
* NONZERO ENTRIES.  THESE HAVE AQAT.
*
* THE AQAT INDEX TABLE CONSISTS OF 256 4 BYTE ENTRIES.  EACH ONE IS
* EITHER ZERO OR POINTS TO AN AQAT TABLE.  EACH AQAT TABLE COVERS 8
* MEG OF STORAGE.  EACH AQAT TABLE CONSISTS OF 128 6 BYTE ENTRIES.
* EACH AQAT ENTRY COVERS 64K OF STORAGE.  EACH AQAT ENTRY CONTAINS A
* 16BIT PAGE MAP TO DESCRIBE THE PAGES IN THE THE 64K OF STORAGE.
* EACH PAGE IS OF COURSE 4K.  IF THE ZEROTH BIT IN THE ENTRY IS ONE,
* THE FIRST PAGE OF STORAGE IN THIS 64K BLOCK IS ALLOCATED IN THIS
* SUBPOOL CONTROLLED BY THIS AQAT TABLE. THE FIRST BIT IS FOR THE
* NEXT BLOCK OF STORAGE, AND SO ON.
*
* THE STORAGE ADDRESSES COVERED ARE CALCULATED FROM THE OFFSET INTO
* THE AQAT INDEX TABLE (TO DETERMINE WHICH 8 MEG ADDRESS RANGE) AND
* THE OFFSET INTO THE AQAT TABLE (TO DETERMINE WHICH 64K ADDRESS
* RANGE) AND THE BIT INDEX INTO THE AQAT TABLE ENTRY, TO DETERMINE
* WHICH 4K PAGE WITHIN THE 64K.
*
*      REGISTER USAGE:
*              R3  -  LENGTH OF ALLOCATED AREA
*              R4  -> START OF ALLOCATED AREA
*              R5  -> AQAT INDX TABLE
*              R6  -  OFFSET INTO AQAT INDEX TABLE
*              R7  -> CURRENT AQAT
*              R8  -  AQAT ENTRY OFFSET
*              R9  -  CURRENT BIT BEING TESTED
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R13 -> DSA AND AUTOMATIC STORAGE
*              R14 -  WORK REGISTER
*              R15 -  WORK REGISTER
*
**********************************************************************
         SPACE
         SLR   R6,R6                THIS AQAT START ADDR
         SPACE
MEG8LOOP DS    0H
         L     R7,0(R6,R5)          LOAD AQAT TABLE ADDR
         LTR   R7,R7                IS THERE ONE?
         BZ    NEXTAQAT             NO, SKIP IT
         SPACE
         AIF   ('&SYSPARM' NE 'IPCS').NPCS02          ###############
         EJECT
**********************************************************************
*
* THE AQAT ADDRESS IS IN THE DUMP, GET IT INTO THIS ADDRESS SPACE.
*
**********************************************************************
         SPACE
         IPCSLOAD R2,(R7),LEN=768,PERM=HOLDAQAT
         IPCSLMSG R2,R7,NOAQAT,41,ZHDR4,(R10),''
         LTR   R2,R2                   DID WE GET THE AQAT INDEX.
         BZ    RETURN                  IF NOT, FORGET IT
         LR    R7,R2                   PUT IN THE CORRECT ADDRESS
.NPCS02  ANOP
         LA    R7,4(,R7)            SKIP THE AQAT HEADER
         SLR   R8,R8                START AT FIRST AQAT ENTRY
         SLR   R3,R3                ZERO LENGTH FIELD
         SPACE
**********************************************************************
*
* THIS LOOP PROCESSES AN AQAT. R9 IS A MASK TO SHOW WHICH BIT WE ARE
* LOOKING AT.  THE REASON WE ONLY RECALCULATE THE ADDRESS IF R3 = 0
* IS THAT WE WANT TO ALLOW AQAT ENTRIES TO BE SPANNED.  THAT IS IF
* THE LAST BIT IN ONE ENTRY WITHIN THE AQAT IS 1 AND SO IS THE FIRST
* BIT IN THE NEXT AQAT ENTRY, WE WANT TO GROUP THAT DATA INTO THE
* SAME RECORD.
*
* TO CALCULATE THE ADDRESS FOR THE START OF THIS ENTRY.  MULTIPLY THE
* ZERO BASED INDEX INTO THE AQAT INDEX TABLE BY 8 MEG AND ADD IN THE
* ZERO BASED INDEX INTO THE AQAT.  NOTE THAT SINCE R6 IS AN OFFSET
* INCREMENTED BY 4 WE ONLY HAVE TO MULTIPLY BY 2 MEG.
*
**********************************************************************
         SPACE
AQATLOOP DS    0H
         L     R9,=X'00008000'      START WITH THE FIRST BIT
*        CALCULATE THE ADDRESS FOR THIS AQAT ENTRY.
*        AQAT TABLE OFFSET/4 * 8MEG + AQAT ENTRY OFFSET/6 * 64K +
         LTR   R3,R3                ARE WE IN THE MIDDLE OF SOMETHING?
         BNZ   AQATBITS             IF SO, DON'T REINIT ADDR
         SPACE
         LR    R4,R6                AQAT INDEX TABLE OFFSET
         SLA   R4,21                MULTIPLY BY 2 MEG
         LR    R15,R8               AQAT OFFSET
         SLR   R14,R14
         D     R14,=F'6'            DIVIDE BY AQA TBL LEN
         SLA   R15,16               MULTIPLY BY 64K
         AR    R4,R15               GET VS ADDR FOR THIS AQAT ENTRY
         SPACE
**********************************************************************
*
* LOAD THE ALLOCATION BITS FROM THE AQAT ENTRY.  IF ZERO, WE DON'T
* HAVE TO LOOK FURTHER.  OTHERWISE MASK OFF THE LOW HALFWROD AND TEST
* THE CURRENT PAGE BIT AS SPECIFIED BY R9.
*
**********************************************************************
         SPACE
AQATBITS DS    0H
         LH    R15,AQATALOC(R8,R7)  LOAD AQAT ALLOCATION BITS
         LTR   R15,R15              ANY BITS ON AT ALL?
         BZ    NXTAQATE             IF NOT, GO TO NEXT ENTRY IN AQAT
         SPACE
         N     R15,=X'0000FFFF'     TURN OFF HIGH HALFWORD
         SPACE
         NR    R15,R9               CHECK THE BIT
         BZ    AQATTST              IF ZERO SEE IF ANYTHING TO OUTPUT
         SPACE
**********************************************************************
*
* THE BIT IS ON.  BUMP THE LENGTH BY 4K.  SHIFT OVER TO THE NEXT PAGE
* BIT.  IF THE TEST BIT HAS SHIFTED OFF THE REGISTER, GO GET THE NEXT
* AQAT ENTRY.  OTHERWISE GO BACK AND TEST THIS NEW BIT.
*
**********************************************************************
         SPACE
         A     R3,=F'4096'          PUT IN LENGTH OF PAGE
         SRA   R9,1                 CHECK NEXT BIT
         BNZ   AQATBITS             IF THERE IS ONE
         B     NXTAQATE             IF NOT, GO TO THE NEXT
         SPACE
**********************************************************************
*
* THE BIT IS OFF.  SEE IF WE HAVE ACCUMULATED ANY LENGTH TO DUMP. IF
* SO, CALL PUTIT TO WRITE THE DATA OUT. THEN BUMP THE ADDRESS BY THE
* LENGTH OF THE ALLOCATED AREA AND ZERO OUT THE CURRENT ALLOCATED
* LENGTH.
*
**********************************************************************
         SPACE
AQATTST  DS    0H
         LTR   R3,R3                ANYTHING TO OUTPUT?
         BZ    NOOUT
         SPACE
         BAL   R14,PUTIT            DUMP THE RECORD
         SPACE
         AR    R4,R3                ADD LENGTH DUMPED TO ADDRESS
         SLR   R3,R3                ZERO OUT CURRENT LENGTH
         SPACE
**********************************************************************
*
* THE RECORD HAS BEEN OUTPUT OR THERE WAS NO DATA TO DUMP. THE
* CURRENT BIT IS ZERO, SO BUMP THE ADDRESS BY THIS 4K. SHIFT THE TEST
* BIT AND IF THE BIT HAS NOT SHIFTED INTO OBLIVION, TRY AGAIN.
*
**********************************************************************
         SPACE
NOOUT    DS    0H
         A     R4,=F'4096'          ADD 4K FOR OFF BIT
         SRA   R9,1                 CHECK NEXT BIT
         LTR   R9,R9                ANYTHING BITS LEFT TO TEST?
         BNZ   AQATBITS             GO TEST THEM
         SPACE
**********************************************************************
*
* POINT TO THE NEXT AQAT TABLE ENTRY.  ENTRIES ARE 6 BYTES LONG. IF
* WE OVERFLOW THE AQAT, CHECK IF THERE IS ANYTHING WAITING FOR OUTPUT
* AND DUMP IT.  OTHERWISE GO TO THE NEXT AQAT UNLESS THE AQAT INDEX
* TABLE IS DONE TOO.  IN THAT CASE, WE ARE DONE.
*
**********************************************************************
         SPACE
NXTAQATE DS    0H
         LA    R8,6(,R8)            OFFSET OF NEXT AQAT ENTRY
         C     R8,=F'768'  '6*128'  PAST END OF AQAT?
         BL    AQATLOOP             IF NOT, PROCESS THE ENTRY
         SPACE
         LTR   R3,R3                ANYTHING TO OUTPUT?
         BZ    NEXTAQAT
         SPACE
         BAL   R14,PUTIT            DUMP THE RECORD
         SPACE
**********************************************************************
*
* GO TO THE NEXT AQAT TABLE.
*
**********************************************************************
         SPACE
         AR    R4,R3                ADD LENGTH DUMPED TO ADDRESS
NEXTAQAT DS    0H
         LA    R6,4(,R6)            NEXT AQAT OFFSET
         C     R6,=F'1024' '4*256'  PAST THE TABLE END?
         BL    MEG8LOOP             IF NO, TRY NEXT AQAT
         SPACE
RETURN   DS    0H
         REXIT ENV=OS
         EJECT
**********************************************************************
*
* WRITE OUT A DATA RECORD. THE INTERESTING DATA IS IN R3 AND R4.
*
*      REGISTER USAGE:
*              R3  -  LENGTH OF ALLOCATED AREA
*              R4  -> START OF ALLOCATED AREA
*              R5  -> AQAT INDX TABLE
*              R6  -  OFFSET INTO AQAT INDEX TABLE
*              R7  -> CURRENT AQAT
*              R8  -  AQAT ENTRY OFFSET
*              R9  -  CURRENT BIT BEING TESTED
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R13 -> DSA AND AUTOMATIC STORAGE
*              R14 -  WORK REGISTER - USED BY PUT
*              R15 -  WORK REGISTER - USED BY PUT
*
**********************************************************************
         SPACE
PUTIT    DS    0H
         ST    R4,WORD
         UNPK  ZAREA(9),WORD(5)
         TR    ZAREA(8),HEXCHAR
         MVI   ZAREA+8,C' '
         ST    R3,WORD
         UNPK  ZSIZE(9),WORD(5)
         TR    ZSIZE(8),HEXCHAR
         MVI   ZSIZE+8,C' '
         LR    R15,R4               ADD IN LENGTH OF ADD SP REG
         AR    R15,R3
         ST    R15,WORD
         UNPK  ZENDADDR(9),WORD(5)
         TR    ZENDADDR(8),HEXCHAR
         MVI   ZENDADDR+8,C' '
         SPACE
         ST    R14,WORD             WE STILL NEED R14
         SPACE
         PUT31 AREA24,(R10),BUFFZ
         PUT31 AREA24,(R10),ZHDR4
         SPACE
         L     R14,WORD
         BR    R14
         EJECT
         LTORG
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         SPACE
NOAQAT   DC    CL133' # UNABLE TO ACCESS AQAT AT DUMP ADDRESS XXXXXXXX *
                (DMPAQAT) '
NOAQATN  DC    CL133' # UNABLE TO ACCESS AQAT INDEX AT DUMP ADDRESS XXX*
               XXXXX (DMPAQAT) '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
         AIF   ('&SYSPARM' NE 'IPCS').NPCS09          ###############
HOLDAQDX DS    4XL256
HOLDAQAT DS    6XL128
.NPCS09  ANOP
LINE     DS    CL133
BUFFZ    DS    0CL133
         DC    CL1' '
ZAREA    DC    CL9' '
         DC    CL2'| '
ZSIZE    DC    CL9' '
         DC    CL2'| '
ZENDADDR DC    CL9' '
         DC    CL2'| '
ZSUBPOOL DC    CL9' '
         DC    CL2'| '
ZKEY     DC    CL9' '
         DC    CL2'| '
ZPGMNAME DC    CL9' '
         DC    CL2'| '
ZENTRYPT DC    CL9' '
         DC    CL2'| '
ZTCBADDR DC    CL9' '
         DC    CL2'| '
ZSHARED  DC    CL9' '
         DC    CL2'| '
ZOWNED   DC    CL9' '
         DC    CL2'| '
ZRECTYPE DC    CL2' '
         DC    CL2'| '
         DC    CL18' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
PARMLST  DSECT
OUTDCB   DS    A
AQATNADR DS    A
SUBPOOLP DS    A
NAMEPRM  DS    A
OPTR     DS    A
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHALDA
         IHAPSA
         IHAAQAT
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
RECTDQE  EQU   C'1'
RECTREG  EQU   C'2'
RECTLPDE EQU   C'3'
RECTCDEA EQU   C'4'
RECTLLE  EQU   C'5'
RECTCDEB EQU   C'6'
         END
*
*
*  SPQA RUNNER
*  PARMS:  NON-IPCS
*          1   OUTPUT DCB  R10
*          2   PRINT DCB   R9
*          3   TCB         R3
*          4   SPQE        R5
*          5   SPQA        R6
*  PARMS:  IPCS
*          1   OUTPUT DCB                  R10
*          2   PRINT DCB (DUMMY PARM)      R9
*          3   TCB  (DUMP ADDRESS          R3
*          4   SPQE (THIS ADDR SP COPY)    R5
*          5   SPQA (DUMP ADDRESS)         R8
*          6   SPQA (THIS ADDR SP COPY)    R6
*
*
         PRINT    NOGEN
         EJECT
RUNSPQA  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
*                      OUTDCB, PRTDCB, TCB, SPQE, SPQA
         MVC   OPTPTR(4),OPTR
         XC    TOTCORE(4),TOTCORE  CLEAR MEMORY ALLOCATED ACCUMULATOR
         L     R3,TCBPTR           POINT TO TCB
         L     R5,SPQEPTR          POINT TO SPQE THIS ADDR SP
         L     R6,SPQAPTR          POINT TO SPQA
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS71          ###############
         AGO   .NPCS71
.IPCS71  ANOP
         L     R8,SPQADUMP         LOAD DUMP SPQA ADDR
.NPCS71  ANOP
         L     R9,PRINTDCB         POINT TO PRINT DCB
         L     R10,OUTDCB          POINT TO OUTPUT DCB
         SPACE
         DROP  R10
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS72          ###############
         LTR   R6,R6               IS THERE AN SPQA?
         USING DQE,R7
         SPACE
         AGO   .NPCS72
.IPCS72  ANOP
         LTR   R8,R8               IS THERE AN SPQA?
         USING DQE,R2
         SPACE
.NPCS72  ANOP
         BZ    RETURN              IF NOT, FORGET IT.
         SPACE
**********************************************************************
*
*      REGISTER USAGE:   SPACE
*              R2  -> DQE THIS ADDR SPACE (IPCS ONLY)
*              R3  -  TCB ADDR (IPCS IS DUMP COPY)
*              R4  -> CDE ADDR
*              R5  -> SPQE (IPCS IN THIS ADDR SPACE)
*              R6  -> SPQA (IPCS IN THIS ADDR SPACE)
*              R7  -  DQE ADDR (IPCS IS ADDR FROM DUMP)
*              R8  -  SPQA ADDR FROM DUMP (IPCS ONLY)
*              R9  -> PRINT DCB
*              R10 -> OUTPUT DCB
*              R12 -  TEMP POINTER TO RUN TIME OPTIONS
*              R11 -  PROGRAM BASE
*              R13 -> DSA AND LOCAL VARS
*
**********************************************************************
         SPACE
         USING SPQA,R6
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS7Z
.IPCS7Z  ANOP
         SPACE
         CALL  FINDCDE,((R3)),MF=(E,CALLLIST) GET THE CDE INTO R0
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS72A         ###############
         LR    R4,R0                 SAVE CDE ADDR (OR ZERO)
         AGO   .NPCS72A
.IPCS72A ANOP
         LTR   R4,R0                 PUT CDE ADDR IN ADDRESSING REG
         BZ    NOCDE
         SPACE
         MVC   HOLDCDE(CDELEN),0(R4) COPY TO PERMANENT PLACE
         LA    R4,HOLDCDE            USE THIS COPY OF THE CDE
         SPACE
NOCDE    DS    0H
.NPCS72A ANOP
         USING CDENTRY,R4
         SPACE
         L     R7,SPQAFBDQ
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS73          ###############
         LA    R15,SPQAFBDQ    GET ADDR OF SPQAFBDQ
         AGO   .NPCS73
.IPCS73  ANOP
         LA    R15,SPQAFBDQ-SPQA(R8)   GET DUMP ADDR OF SPQAFBDQ
.NPCS73  ANOP
         CR    R7,R15          IS ADDR SAME AS CONTENTS?
         BE    DDONE1
DLOOP1   DS    0H
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS74          ###############
         CALL  DUMPDQE,((R10),0,(R3),(R4),(R5),(R7),(R12)),            X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE)
         AGO   .NPCS74
.IPCS74  ANOP
         IPCSLOAD R2,(R7),LEN=DQELEN
         IPCSLMSG R2,R7,NODQE,40,ZHDR4,(R10),(R9)
         LTR   R2,R2
         BZ    DDONE1
         CALL  DUMPDQE,((R10),0,(R3),(R4),(R5),(R2),(R7),(R12)),       X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,DQEDUMP)
.NPCS74  ANOP
         A     R0,TOTCORE
         ST    R0,TOTCORE
         C     R7,SPQALBDQ
         L     R7,DQENEXT
         BNE   DLOOP1
         SPACE
DDONE1   DS    0H
         L     R7,SPQAFADQ
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS75          ###############
         LA    R15,SPQAFADQ    GET ADDR OF SPQAFADQ
         AGO   .NPCS75
.IPCS75  ANOP
         LA    R15,SPQAFADQ-SPQA(R8)   GET DUMP ADDR OF SPQAFADQ
.NPCS75  ANOP
         CR    R7,R15          IS ADDR SAME AS CONTENTS?
         BE    DDONE2
DLOOP2   DS    0H
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS76          ###############
         CALL  DUMPDQE,((R10),0,(R3),(R4),(R5),(R7),(R12)),            X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE)
         AGO   .NPCS76
.IPCS76  ANOP
         IPCSLOAD R2,(R7),LEN=DQELEN
         IPCSLMSG R2,R7,NODQE,40,ZHDR4,(R10),(R9)
         LTR   R2,R2
         BZ    DDONE2
         CALL  DUMPDQE,((R10),0,(R3),(R4),(R5),(R2),(R7),(R12)),       X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,DQEDUMP)
.NPCS76  ANOP
         A     R0,TOTCORE
         ST    R0,TOTCORE
         C     R7,SPQALADQ
         L     R7,DQENEXT
         BNE   DLOOP2
         SPACE
DDONE2   DS    0H
         L     R7,SPQAFEDQ
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS77          ###############
         LA    R15,SPQAFEDQ    GET ADDR OF SPQAFEDQ
         AGO   .NPCS77
.IPCS77  ANOP
         LA    R15,SPQAFEDQ-SPQA(R8)   GET DUMP ADDR OF SPQAFEDQ
.NPCS77  ANOP
         CR    R7,R15          IS ADDR SAME AS CONTENTS?
         BE    DDONE3
DLOOP3   DS    0H
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS78          ###############
         CALL  DUMPDQE,((R10),0,(R3),(R4),(R5),(R7),(R12)),            X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE)
         AGO   .NPCS78
.IPCS78  ANOP
         IPCSLOAD R2,(R7),LEN=DQELEN
         IPCSLMSG R2,R7,NODQE,40,ZHDR4,(R10),(R9)
         LTR   R2,R2
         BZ    DDONE3
         CALL  DUMPDQE,((R10),0,(R3),(R4),(R5),(R2),(R7),(R12)),       X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,DQEDUMP)
.NPCS78  ANOP
         A     R0,TOTCORE
         ST    R0,TOTCORE
         C     R7,SPQALEDQ
         L     R7,DQENEXT
         BNE   DLOOP3
         SPACE
DDONE3   DS    0H
*        DROP  R3    TCB
         DROP  R4    CDE
*        DROP  R5    SPQE
         DROP  R6    SPQA
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS79          ###############
         DROP  R7    DQE
         AGO   .NPCS79
.IPCS79  ANOP
         DROP  R2    DQE
.NPCS79  ANOP
RETURN   DS    0H
         L     R0,TOTCORE
         REXIT ENV=OS,RETURN=(0)
         SPACE 3
DHDR1    DC    CL133'                     | DQE      | AREA     | SIZE *
                   | NEXT DQE | 1ST FQE  | LAST FQE |'
DHDR4    DC    CL133'                     +----------+----------+------*
               ----+----------+----------+----------+'
NODQE    DC    CL133' # UNABLE TO ACCESS DQE AT DUMP ADDRESS XXXXXXXX  *
               (RUNSPAQ) '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
TOTCORE  DS    F
HOLDDQE  DS    XL(DQELEN)
HOLDCDE  DS    XL(CDELEN)
LINE     DS    CL133
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
SPQEPTR  DS    A
SPQAPTR  DS    A
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
SPQEPTR  DS    A
SPQADUMP DS    A
SPQAPTR  DS    A
OPTR     DS    A
.NPCS3P  ANOP
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHACDE
CDELEN   EQU   *-CDENTRY
         IHADQE
DQELEN   EQU   *-DQE
         IKJTCB
*        IHASPQE
         IHASPQA
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         END
*
*   TCB PRINTER
*   PARMS: NON-IPCS
*        1  -> PRINT DCB
*        2  -  TCB PONTER
*   PARMS: IPCS
*        1  -  PRINT DCB (DUMMY ARG)
*        2  -> TCB IN THIS ADDRESS SPACE
*        3  -  TCB ADDRESS FROM DUMP
*
*
         PRINT NOGEN
PRTTCB   RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         USING TCB,R3
         SPACE
         MVC   OPTPTR(4),OPTR
         MVC   BUFF,BUFFINIT
         L     R9,PRINTDCB             PRINT DCB POINTER
         L     R3,TCBPTR               TCB POINTER
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS30          ###############
**********************************************************************
*
* FORMAT THE TCB ADDRESS PLUS INTERESTING DATA ABOUT THE TCB
*
*      REGISTER USAGE:
*              R3  -> TCB IN THIS ADDESS SP
*              R9  -> PRINT CDE POINTER
*              R10 -> PASSED PARM
*              R11 -> PROGRAM BASE
*              R13 -> DSA
*
**********************************************************************
         ST    R3,WORD
         AGO   .NPCS30
.IPCS30  ANOP
**********************************************************************
*
* FORMAT THE TCB ADDRESS PLUS INTERESTING DATA ABOUT THE TCB
*
*      REGISTER USAGE:
*              R2  -  TCB ADDRESS FROM DUMP
*              R3  -> TCB IN THIS ADDESS SP
*              R9  -> PRINT CDE POINTER
*              R10 -> PASSED PARM
*              R11 -> PROGRAM BASE
*              R13 -> DSA
*
**********************************************************************
         L     R2,TCBDUMP              TCB ADDRESS FROM DUMP
         ST    R2,WORD
.NPCS30  ANOP
         L     R15,OPTPTR
         CLI   PRTPRM(R15),X'FF'  PRINT PARM?
         BNE   RETURN
         SPACE
         UNPK  THISTCB(9),WORD(5)
         TR    THISTCB(8),HEXCHAR
         MVI   THISTCB+8,C' '
         UNPK  NTCB(9),TCBTCB(5)
         TR    NTCB(8),HEXCHAR
         MVI   NTCB+8,C' '
         UNPK  BACK(9),TCBBACK(5)
         TR    BACK(8),HEXCHAR
         MVI   BACK+8,C' '
         UNPK  JSTCB(9),TCBJSTCB(5)
         TR    JSTCB(8),HEXCHAR
         MVI   JSTCB+8,C' '
         UNPK  CMP(9),TCBCMP(5)
         TR    CMP(8),HEXCHAR
         MVI   CMP+8,C' '
         UNPK  OTC(9),TCBOTC(5)
         TR    OTC(8),HEXCHAR
         MVI   OTC+8,C' '
         UNPK  LTC(9),TCBLTC(5)
         TR    LTC(8),HEXCHAR
         MVI   LTC+8,C' '
         SPACE
         MVC   TCBCDE(8),=CL8' '
         MVC   TCBEP(8),=CL8' '
         SPACE
**********************************************************************
*
* FIND THE CDE TO GET THE NAME AND ENTRY POINT DATA
*
**********************************************************************
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS31          ###############
         CALL  FINDCDE,((R3)),MF=(E,CALLLIST) GET THE CDE IN R0
         AGO   .NPCS31
.IPCS31  ANOP
         CALL  FINDCDE,((R2)),MF=(E,CALLLIST) GET THE CDE IN R0
.NPCS31  ANOP
         LTR   R0,R0                 DID WE FIND A CDE?
         BZ    TCBPRINT              IF NOT, LEAVE THE DATA BLANK
         SPACE
         LR    R14,R0                PUT CDE ADDR IN A GOOD REG
         USING CDENTRY,R14
         SPACE
GOTCDE   DS    0H
         MVC   TCBCDE(8),CDNAME      PUT IN THE PROGRAM NAME
         UNPK  TCBEP(9),CDENTPT(5)
         TR    TCBEP(8),HEXCHAR
         MVI   TCBEP+8,C' '
         DROP  R14
         SPACE
TCBPRINT DS    0H
         VSMPRNT AREA24,(R9),HDR4
         VSMPRNT AREA24,(R9),HDR3
         VSMPRNT AREA24,(R9),BUFF
         VSMPRNT AREA24,(R9),HDR4
         SPACE
         DROP  R3,R10
RETURN   DS    0H
         REXIT ENV=OS
         SPACE
         LTORG
         SPACE
HDR3     DC    CL133' TCB      | TCBTCB   | TCBBACK  | PGM NAME | ENTRY*
                PT | TCBCMP   | TCBOTC   | TCBLTC   | TCBJSTCB |'
HDR4     DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+'
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL33' '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
BUFF     DS    0CL133
         DC    CL1' '
THISTCB  DC    CL9' '
         DC    CL2'| '
NTCB     DC    CL9' '
         DC    CL2'| '
BACK     DC    CL9' '
         DC    CL2'| '
TCBCDE   DC    CL9' '
         DC    CL2'| '
TCBEP    DC    CL9' '
         DC    CL2'| '
CMP      DC    CL9' '
         DC    CL2'| '
OTC      DC    CL9' '
         DC    CL2'| '
LTC      DC    CL9' '
         DC    CL2'| '
JSTCB    DC    CL9' '
         DC    CL2'| '
         DC    CL33' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
PRINTDCB DS    A
OPTR     DS    A
TCBPTR   DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
PRINTDCB DS    A
OPTR     DS    A
TCBPTR   DS    A
TCBDUMP  DS    A
.NPCS3P  ANOP
         PRINT NOGEN
         SYMBAR MODE=DEC
         IKJTCB
         IHACDE
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         END
*
*
*  SPQE PRINTER
*
*
*   PARMS: NON-IPCS
*        1  -> PRINT DCB
*        2  -  SPQE TO PRINT
*   PARMS: IPCS
*        1  -  PRINT DCB (DUMMY ARG)
*        2  -  SPQE IN MEMORY
*        3  -> SPQE ADDR IN DUMP
*
*
PRTSPQE  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         MVC   BUFFS,BUFFINIT
         L     R9,PRINTDCB      POINT TO SYSPRINT DCB
         L     R5,SPQEPTR       POINT TO SPQE
         AIF   ('&SYSPARM' NE 'IPCS').NPCS50          ###############
         L     R7,SPQEDUMP      LOAD SPQE DUMP ADDRESS
         DROP  R10
         SPACE
.NPCS50  ANOP
         L     R15,OPTPTR
         CLI   PRTPRM(R15),X'FF'  PRINT PARM?
         BNE   RETURN
         SPACE
         USING SPQE,R5
         LTR   R5,R5
         BZ    RETURN
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS51          ###############
         ST    R5,WORD
         AGO   .NPCS51
.IPCS51  ANOP
         ST    R7,WORD
.NPCS51  ANOP
         UNPK  THISSPQE(9),WORD(5)
         TR    THISSPQE(8),HEXCHAR
         MVI   THISSPQE+8,C' '
         UNPK  SPQAPTR(9),SPQESPQA(5)
         TR    SPQAPTR(8),HEXCHAR
         MVI   SPQAPTR+8,C' '
         SLR   R15,R15
         IC    R15,SPQEID
         CVD   R15,WORD
         MVC   SUBPOOL(8),=X'4020202020202021'
         ED    SUBPOOL(8),WORD+4
         OI    SUBPOOL+7,X'F0'
         IC    R15,SPQEKEY
         SRL   R15,4
         CVD   R15,WORD
         MVC   KEY(8),=X'4020202020202021'
         ED    KEY(8),WORD+4
         OI    KEY+7,X'F0'
         MVC   SPQEF(8),=CL8' '
         MVC   WORD(1),SPQEFLGS
         UNPK  SPQEF+6(3),WORD(2)
         TR    SPQEF+6(2),HEXCHAR
         MVI   SPQEF+8,C' '
         VSMPRNT AREA24,(R9),SHDR4
         VSMPRNT AREA24,(R9),SHDR1
         VSMPRNT AREA24,(R9),BUFFS
         VSMPRNT AREA24,(R9),SHDR4
         DROP  R5    SPQE
RETURN   DS    0H
         REXIT ENV=OS
         SPACE
         LTORG
         SPACE
SHDR1    DC    CL133'          | SUBPOOL  | KEY      | SPQE     | SPQA *
                   | FLAGS    |          |          |'
SHDR4    DC    CL133'          +----------+----------+----------+------*
               ----+----------+----------+----------+'
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL44' '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
BUFFS    DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
SUBPOOL  DC    CL9' '
         DC    CL2'| '
KEY      DC    CL9' '
         DC    CL2'| '
THISSPQE DC    CL9' '
         DC    CL2'| '
SPQAPTR  DC    CL9' '
         DC    CL2'| '
SPQEF    DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL44' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
PRINTDCB DS    A
SPQEPTR  DS    A
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
PRINTDCB DS    A
SPQEPTR  DS    A
SPQEDUMP DS    A
OPTR     DS    A
.NPCS3P  ANOP
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHASPQE
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         END
*
*
*  SPQA PRINTER
*
*
*   PARMS: NON-IPCS
*        1  -> PRINT DCB
*        2  -  SPQA TO PRINT
*   PARMS: IPCS
*        1  -  PRINT DCB (DUMMY ARG)
*        2  -  SPQA IN MEMORY
*        3  -> SPQA ADDR IN DUMP
*
*
PRTSPQA  RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         MVC   BUFFA,BUFFINIT
         L     R9,PRINTDCB      POINT TO SYSPRINT DCB
         L     R6,SPQAPTR       POINT TO SPQA
         AIF   ('&SYSPARM' NE 'IPCS').NPCS50          ###############
         L     R8,SPQADUMP      LOAD SPQA DUMP ADDRESS
.NPCS50  ANOP
         L     R15,OPTPTR
         CLI   PRTPRM(R15),X'FF'  PRINT PARM?
         BNE   RETURN
         SPACE
         USING SPQA,R6
         LTR   R6,R6
         BZR   R14
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS61          ###############
         ST    R6,WORD
         AGO   .NPCS61
.IPCS61  ANOP
         ST    R8,WORD
.NPCS61  ANOP
         DROP  R10
         SPACE
         UNPK  THISSPQA(9),WORD(5)
         TR    THISSPQA(8),HEXCHAR
         MVI   THISSPQA+8,C' '
         UNPK  FBDQE(9),SPQAFBDQ(5)
         TR    FBDQE(8),HEXCHAR
         MVI   FBDQE+8,C' '
         UNPK  LBDQE(9),SPQALBDQ(5)
         TR    LBDQE(8),HEXCHAR
         MVI   LBDQE+8,C' '
         UNPK  FADQE(9),SPQAFADQ(5)
         TR    FADQE(8),HEXCHAR
         MVI   FADQE+8,C' '
         UNPK  LADQE(9),SPQALADQ(5)
         TR    LADQE(8),HEXCHAR
         MVI   LADQE+8,C' '
         UNPK  FEDQE(9),SPQAFEDQ(5)
         TR    FEDQE(8),HEXCHAR
         MVI   FEDQE+8,C' '
         UNPK  LEDQE(9),SPQALEDQ(5)
         TR    LEDQE(8),HEXCHAR
         MVI   LEDQE+8,C' '
         VSMPRNT AREA24,(R9),AHDR1
         VSMPRNT AREA24,(R9),BUFFA
         VSMPRNT AREA24,(R9),AHDR4
         DROP  R6    SPQA
         SPACE
RETURN   DS    0H
         REXIT ENV=OS
         SPACE
         LTORG
         SPACE
AHDR1    DC    CL133'          | SPQA     | F L DQE  | L L DQE  | F H  *
               DQE | L H DQE  | F E DQE  | L E DQE  |'
AHDR4    DC    CL133'          +----------+----------+----------+------*
               ----+----------+----------+----------+'
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL44' '
         SPACE
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
LINE     DS    CL133
BUFFA    DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
THISSPQA DC    CL9' '
         DC    CL2'| '
FBDQE    DC    CL9' '
         DC    CL2'| '
LBDQE    DC    CL9' '
         DC    CL2'| '
FADQE    DC    CL9' '
         DC    CL2'| '
LADQE    DC    CL9' '
         DC    CL2'| '
FEDQE    DC    CL9' '
         DC    CL2'| '
LEDQE    DC    CL9' '
         DC    CL2'| '
         DC    CL44' '
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
PRINTDCB DS    A
SPQAPTR  DS    A
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
PRINTDCB DS    A
SPQAPTR  DS    A
SPQADUMP DS    A
OPTR     DS    A
.NPCS3P  ANOP
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHASPQA
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         END
*
*
*  SPQE RUNNER
*
*
*   PARMS: NON-IPCS
*        1  -> OUTPUT DCB
*        2  -> PRINT DCB
*        3  -  TCB ADDRESS
*   PARMS: IPCS
*        1  -> OUTPUT DCB
*        2  -> PRINT DCB  (DUMMY ARG)
*        3  -  TCB ADDRESS
*        4  -> TCB ADDR IN DUMP
*
*
         PRINT NOGEN
SPQES    RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB       LOAD SYSPRINT DCB ADDR
         L     R3,TCBPTR         LOAD TCB ADDRESS
         AIF   ('&SYSPARM' NE 'IPCS').NPCS40          ###############
         L     R2,TCBDUMP        LOAD DUMP TCB ADDRESS
.NPCS40  ANOP
         L     R10,OUTDCB        LOAD OUTPUT DCB ADDRESS
         DROP  R10
         EJECT
**********************************************************************
*
*      REGISTER USAGE:
*              R2  -  IPCS ONLY, THE TCB ADDRESS IN THE DUMP
*              R3  -> TCB
*              R5  -> SPQE ADDRESS, IPCS -> ADDRESS IN THE DUMP
*              R6  -> SPQA ADDRESS, IPCS -> ADDRESS IN THE DUMP
*              R7  -> IPCS ONLY, POINTS TO SPQE IN THIS ADDRESS SPACE
*              R8  -> IPCS ONLY, POINTS TO SPQA IN THIS ADDRESS SPACE
*              R9  -> PRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -  PROGRAM BASE
*              R12 -  TEMP VAR TO HOLD ADDR OF RUN TIME OPTIONS
*
**********************************************************************
         SPACE
         USING TCB,R3
*        VSMPRNT AREA24,(R9),HDR4
         L     R12,OPTPTR
         CALL  PRTTCB,((R9),(R12),(R3),(R2)),MF=(E,CALLLIST)
         SPACE
*        VSMPRNT AREA24,(R9),SHDR4
         SLR   R6,R6
         L     R5,TCBMSS
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS41          ###############
         USING SPQE,R5
         AGO   .NPCS41
.IPCS41  ANOP
         USING SPQE,R7
.NPCS41  ANOP
SLOOP4   DS    0H
         LTR   R5,R5           ANY MORE SPQE'S (COULD BE ZERO)
         BZ    SDONE4          NO MORE, LEAVE LOOP
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS43          ###############
         L     R12,OPTPTR
         CALL  PRTSPQE,((R9),(R5),(R12)),MF=(E,CALLLIST)
         L     R6,SPQESPQA
         SPACE
*        CALL  PRTSPQA,((R9),(R6),(R12)),MF=(E,CALLLIST)
         CALL  RUNSPQA,((R10),(R9),(R3),(R5),(R6),(R12)),              X
               MF=(E,CALLLIST)
         AGO   .NPCS43
.IPCS43  ANOP
         IPCSLOAD R7,(R5),LEN=SPQELEN,PERM=SPQEHOLD
         IPCSLMSG R7,R5,NOSPQE,41,ZHDR4,(R10),(R9)
         LTR      R7,R7
         BZ       SDONE4       CAN'T GET THE SPQE, LEAVE THE LOOP
         SPACE
         L     R12,OPTPTR
         CALL  PRTSPQE,((R9),(R7),(R5),(R12)),MF=(E,CALLLIST)
         L     R6,SPQESPQA
         IPCSLOAD R8,(R6),LEN=SPQALEN,PERM=SPQAHOLD
         IPCSLMSG R8,R6,NOSPQA,41,ZHDR4,(R10),(R9)
         LTR      R8,R8
         BZ       SDONE4       CAN'T GET THE SPQA, LEAVE THE LOOP
         CALL  RUNSPQA,((R10),(R9),(R2),(R7),(R6),(R8),(R12)),         X
               MF=(E,CALLLIST)
.NPCS43  ANOP
         SPACE
         CLI   PRTPRM(R12),X'FF'  PRINT OPTION?
         BNE   SNEXT4
         SPACE
         MVC   LINE(133),BUFFINIT
         ST    R0,WORD
         UNPK  LINE+12(9),WORD(5)
         TR    LINE+12(8),HEXCHAR
         MVI   LINE+20,C' '
         VSMPRNT AREA24,(R9),LINE
         VSMPRNT AREA24,(R9),SHDR4
         SPACE
SNEXT4   DS    0H
         L     R5,SPQENEXT     NEXT SPQE
         B     SLOOP4
         SPACE
SDONE4   DS    0H
         L     R5,TCBUKYSP
SLOOP5   DS    0H
         LTR   R5,R5           ANY MORE SPQE'S (COULD BE ZERO)
         BZ    SDONE5          NO MORE, LEAVE LOOP
         SPACE
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS45          ###############
         CALL  PRTSPQE,((R9),(R5),(R12)),MF=(E,CALLLIST)
         L     R6,SPQESPQA
         SPACE
*        CALL  PRTSPQA,((R9),(R6),(R12)),MF=(E,CALLLIST)
         CALL  RUNSPQA,((R10),(R9),(R3),(R5),(R6),(R12)),              X
               MF=(E,CALLLIST)
         AGO   .NPCS45
.IPCS45  ANOP
         IPCSLOAD R7,(R5),LEN=SPQELEN,PERM=SPQEHOLD
         IPCSLMSG R7,R5,NOSPQE,41,ZHDR4,(R10),(R9)
         LTR      R7,R7
         BZ       SDONE5          CANT GET THE SPQE, LEAVE LOOP
         SPACE
         CALL  PRTSPQE,((R9),(R7),(R5),(R12)),MF=(E,CALLLIST)
         L     R6,SPQESPQA
         SPACE
         IPCSLOAD R8,(R6),LEN=SPQALEN,PERM=SPQAHOLD
         IPCSLMSG R8,R6,NOSPQA,41,ZHDR4,(R10),(R9)
         LTR      R8,R8
         BZ       SDONE5       CAN'T GET THE SPQA, LEAVE THE LOOP
         CALL  RUNSPQA,((R10),(R9),(R2),(R7),(R6),(R8),(R12)),         X
               MF=(E,CALLLIST)
         SPACE
.NPCS45  ANOP
         CLI   PRTPRM(R12),X'FF'  PRINT OPTION?
         BNE   SNEXT5
         SPACE
         MVC   LINE,BUFFINIT
         ST    R0,WORD
         UNPK  LINE+12(9),WORD(5)
         TR    LINE+12(8),HEXCHAR
         MVI   LINE+20,C' '
         VSMPRNT AREA24,(R9),LINE
         VSMPRNT AREA24,(R9),SHDR4
         SPACE
SNEXT5   DS    0H
         L     R5,SPQENEXT     NEXT SPQE
         B     SLOOP5
         SPACE
SDONE5   DS    0H
         L     R5,TCBSWA
SLOOP6   DS    0H
         LTR   R5,R5           ANY MORE SPQE'S (COULD BE ZERO)
         BZ    SDONE6          NO MORE, LEAVE LOOP
         SPACE
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS47          ###############
         CALL  PRTSPQE,((R9),(R5),(R12)),MF=(E,CALLLIST)
         L     R6,SPQESPQA
         SPACE
         CALL  PRTSPQA,((R9),(R6),(R12)),MF=(E,CALLLIST)
         CALL  RUNSPQA,((R10),(R9),(R3),(R5),(R6),(R12)),              X
               MF=(E,CALLLIST)
         AGO   .NPCS47
.IPCS47  ANOP
         IPCSLOAD R7,(R5),LEN=SPQELEN,PERM=SPQEHOLD
         IPCSLMSG R7,R5,NOSPQE,41,ZHDR4,(R10),(R9)
         LTR      R7,R7
         BZ       SDONE6          CANT GET THE SPQE, LEAVE LOOP
         SPACE
         CALL  PRTSPQE,((R9),(R7),(R5)),MF=(E,CALLLIST)
         L     R6,SPQESPQA
         SPACE
         IPCSLOAD R8,(R6),LEN=SPQALEN,PERM=SPQAHOLD
         IPCSLMSG R8,R6,NOSPQA,41,ZHDR4,(R10),(R9)
         LTR      R8,R8
         BZ       SDONE6       CAN'T GET THE SPQA, LEAVE THE LOOP
*        CALL  PRTSPQA,((R9),(R6),(R8),(R12)),MF=(E,CALLLIST)
         CALL  RUNSPQA,((R10),(R9),(R2),(R7),(R6),(R8),(R12)),         X
               MF=(E,CALLLIST)
         SPACE
.NPCS47  ANOP
         CLI   PRTPRM(R12),X'FF'  PRINT OPTION?
         BNE   SNEXT6
         SPACE
         MVC   LINE,BUFFINIT
         ST    R0,WORD
         UNPK  LINE+12(9),WORD(5)
         TR    LINE+12(8),HEXCHAR
         MVI   LINE+20,C' '
         VSMPRNT AREA24,(R9),LINE
         VSMPRNT AREA24,(R9),SHDR4
         SPACE
SNEXT6   DS    0H
         L     R5,SPQENEXT     NEXT SPQE
         B     SLOOP6
         SPACE
SDONE6   DS    0H
         SPACE
         DROP  R3 TCB
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS49          ###############
         DROP  R5    SPQE
         AGO   .NPCS49
.IPCS49  ANOP
         DROP  R7    SPQE
.NPCS49  ANOP
RETURN   DS    0H
         REXIT ENV=OS
         SPACE
         LTORG
         SPACE
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
         SPACE
HDR4     DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+ '
         SPACE
SHDR4    DC    CL133'          +----------+----------+----------+------*
               ----+----------+----------+----------+'
         SPACE
BUFFINIT DS    0CL133
         DC    CL1' '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' BYTES '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL9' '
         DC    CL2'| '
         DC    CL44' '
         SPACE
         SPACE
NOSPQE   DC    CL133' # UNABLE TO ACCESS SPQE AT DUMP ADDRESS XXXXXXXX *
               (SPQES)   '
NOSPQA   DC    CL133' # UNABLE TO ACCESS SPQA AT DUMP ADDRESS XXXXXXXX *
               (SPQES)   '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
SPQEHOLD DS    XL(SPQELEN)
SPQAHOLD DS    XL(SPQELEN)
LINE     DS    CL133
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS3P          ###############
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
         DS    A           NOT USED
OPTR     DS    A
         AGO   .NPCS3P
.IPCS3P  ANOP
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
TCBPTR   DS    A
TCBDUMP  DS    A
OPTR     DS    A
.NPCS3P  ANOP
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHASPQE
SPQELEN  EQU   *-SPQE
         IHASPQA
SPQALEN  EQU   *-SPQA
         IKJTCB
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         END
*
*
*  SPT  RUNNER
*
*
*   PARMS:
*        1  -> OUTPUT DCB
*        2  -> PRINT DCB
*
*
         PRINT NOGEN
RUNSPT   RENTR BASE=11,ENV=OS,PARM=(10,PARMLST),WORK=(WORKLEN,WORKAREA)
         SPACE
         MVC   OPTPTR(4),OPTR
         L     R9,PRINTDCB          POINT TO PRINT DCB
         L     R10,OUTDCB           POINT TO OUTPUT DCB
         DROP  R10
         MVC   FAKECDE(FAKECDEL),FAKECDEI
         MVC   FAKESPQE(FAKSPQEL),FAKSPQEI
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS11          ###############
         USING PSA,0
         SPACE
         L     R1,FLCCVT            POINT TO THE CVT
         DROP  R0
         USING CVT,R1               ADDRESS THE CVT
         SPACE
         L     R1,CVTGDA            POINT TO THE GDA
         DROP  R1
         USING GDA,R1               ADDRESS THE GDA
         SPACE
         L     R6,GDASPT
         DROP  R1
         USING DQE,R7
         SPACE
         AGO   .NPCS11
.IPCS11  ANOP
         L     R1,ADPLDSA(,R13)     GET THE ADPL ADDRESS PASSED
         USING ABDPL,R1
         L     R1,ADPLCVT           POINT TO THE CVT FOR THE DUMP
         DROP  R1
         USING CVT,R1               ADDRESS THE CVT
         SPACE
         L     R3,CVTGDA            POINT TO THE GDA IN THE DUMP
         DROP  R1
         IPCSLOAD R2,(R3),LEN=GDALEN
         IPCSLMSG R2,R3,NOGDA,40,ZHDR4,(R10),(R9)
         LTR   R2,R2                DID WE GET IT?
         BZ    RETURN
         SPACE
         USING GDA,R2               ADDRESS THE GDA
         SPACE
         L     R4,GDASPT
         DROP  R2                   DROP THE GDA
         IPCSLOAD R6,(R4),LEN=SPTLEN,PERM=HOLDSPT
         IPCSLMSG R6,R4,NOSPT,40,ZHDR4,(R10),(R9)
         LTR   R6,R6                DID WE GET IT?
         BZ    RETURN
         SPACE
         USING DQE,R2
         SPACE
.NPCS11  ANOP
         USING SPT,R6
         SPACE
         LA    R6,SPTNTRY
         LA    R4,SPTNTRY-SPT(,R4)  BUMP DUMP ADDRESS
         DROP  R6
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS1Z
         L     R15,OPTPTR
         CLI   PRTPRM(R15),X'FF'  PRINT PARM?
         BNE   SKIPDH
         SPACE
         VSMPRNT AREA24,(R9),DHDR1
         VSMPRNT AREA24,(R9),DHDR4
SKIPDH   DS    0H
.IPCS1Z  ANOP
         SPACE
         MVC   FCDENAM(8),=CL8'SPT CSA '
         SLR   R8,R8
         EJECT
**********************************************************************
*
* TOP LOOP ZERO
*
* THIS OUTER LOOP IS EXECUTED FOR EACH SUBPOOL IN THE SPT. THAT IS,
* IT IS EXECUTED 4 TIMES.
*
*      REGISTER USAGE:
*              R2  -> DQE IN THIS ADDR SP (IPCS ONLY)
*              R4  -  SPT ENTRY ADDRESS IN DUMP (IPCS ONLY)
*              R5  -
*              R6  -> CURRENT ENTRY IN THE SPT
*              R7  -  DQE ADDRESS (FOR IPCS THIS IS THE DUMP ADDRESS)
*              R8  -  SUBPOOL TABLE INDEX (BUMPED BY 4 EACH VLOOP00)
*              R9  -> PRINT DCB
*              R10 -> OUTPUT DCB
*              R11 -> PROGRAM BASE
*              R12 -  TEMP HOLDER FOR POINTER TO RUN TIME PARMS
*
**********************************************************************
         SPACE
VLOOP00  DS    0H
         L     R15,SUBNAMES(R8)
         STH   R15,FSPID
         SLR   R5,R5                 START KEY COUNT
         STC   R5,FSPKEY          SAVE KEY IN FAKE SPQE
         SPACE
VLOOP0   DS    0H
         SPACE
         L     R7,SPTFBDQE(,R6)  POINT TO FIRST DQE BACKED BELOW 16 MEG
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS1A          ###############
         LA    R15,SPTFBDQE(,R6) GET ADDR OF SPTFBDQ
         AGO   .NPCS1A
.IPCS1A  ANOP
         LA    R15,SPTFBDQE(,R4) FIRST DQE IN DUMP BACKED BELOW16 MEG
.NPCS1A  ANOP
         CR    R7,R15          IS ADDR SAME AS CONTENTS?
         BE    VDONE1
VLOOP1   DS    0H
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS12          ###############
         CALL  DUMPDQE,((R10),0,0,FAKECDE,FAKESPQE,(R7),(R12)),        X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,OPTIONS)
         AGO   .NPCS12
.IPCS12  ANOP
         IPCSLOAD R2,(R7),LEN=DQELEN
         IPCSLMSG R2,R7,NODQE,40,ZHDR4,(R10),(R9)
         LTR   R2,R2
         BZ    VDONE1
         CALL  DUMPDQE,((R10),0,0,FAKECDE,FAKESPQE,(R2),(R7),(R12)),   X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,OPTIONS)
.NPCS12  ANOP
         L     R15,=X'00000FFF'   MASK FOR < 4096 BITS
         N     R15,DQESIZE        SIZE BETTER BE MULTIPLE OF 4096
         BZ    VDQEOK1            ALL ZEROS IS WHAT WE WANT
         SPACE
         SLR   R15,R15            MAKE MACRO WORK IN ODD CASE
         IPCSLMSG R15,R7,BADDQE,32,ZHDR4,(R10),(R9)
         B     VDONE1
         SPACE
VDQEOK1  DS    0H
         C     R7,SPTLBDQE(,R6)
         L     R7,DQENEXT
         BNE   VLOOP1
         SPACE
VDONE1   DS    0H
         L     R7,SPTFADQE(,R6)
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS1B          ###############
         LA    R15,SPTFADQE(,R6)   FIRST DQE BACKED ANYWHERE
         AGO   .NPCS1B
.IPCS1B  ANOP
         LA    R15,SPTFADQE(,R4) FIRST DQE BACKED ANYWHERE IN DUMP
.NPCS1B  ANOP
         CR    R7,R15          IS ADDR SAME AS CONTENTS?
         BE    VDONE2
VLOOP2   DS    0H
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS13          ###############
         CALL  DUMPDQE,((R10),0,0,FAKECDE,FAKESPQE,(R7),(R12)),        X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,OPTIONS)
         AGO   .NPCS13
.IPCS13  ANOP
         IPCSLOAD R2,(R7),LEN=DQELEN
         IPCSLMSG R2,R7,NODQE,40,ZHDR4,(R10),(R9)
         LTR   R2,R2
         BZ    VDONE2
         CALL  DUMPDQE,((R10),0,0,FAKECDE,FAKESPQE,(R2),(R7),(R12)),   X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,OPTIONS)
.NPCS13  ANOP
         L     R15,=X'00000FFF'   MASK FOR < 4096 BITS
         N     R15,DQESIZE        SIZE BETTER BE MULTIPLE OF 4096
         BZ    VDQEOK2            ALL ZEROS IS WHAT WE WANT
         SPACE
         SLR   R15,R15            MAKE MACRO WORK IN ODD CASE
         IPCSLMSG R15,R7,BADDQE,32,ZHDR4,(R10),(R9)
         B     VDONE2
         SPACE
VDQEOK2  DS    0H
         C     R7,SPTLADQE(,R6)
         L     R7,DQENEXT
         BNE   VLOOP2
         SPACE
VDONE2   DS    0H
         L     R7,SPTFEDQE(,R6)
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS1C          ###############
         LA    R15,SPTFEDQE(,R6)   FIRST EXTENDED DQE
         AGO   .NPCS1C
.IPCS1C  ANOP
         LA    R15,SPTFEDQE(,R4)   FIRST EXTENDED DQE IN DUMP
.NPCS1C  ANOP
         CR    R7,R15          IS ADDR SAME AS CONTENTS?
         BE    VDONE3
VLOOP3   DS    0H
         L     R12,OPTPTR
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS14          ###############
         CALL  DUMPDQE,((R10),0,0,FAKECDE,FAKESPQE,(R7),(R12)),        X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,OPTIONS)
         AGO   .NPCS14
.IPCS14  ANOP
         IPCSLOAD R2,(R7),LEN=DQELEN
         IPCSLMSG R2,R7,NODQE,40,ZHDR4,(R10),(R9)
         LTR   R2,R2
         BZ    VDONE3
         CALL  DUMPDQE,((R10),0,0,FAKECDE,FAKESPQE,(R2),(R7),(R12)),   X
               MF=(E,CALLLIST)
*        CALL  DUMPDQE,(DCBD,DCBP,TCB,CDE,SPQE,DQE,OPTIONS)
.NPCS14  ANOP
         L     R15,=X'00000FFF'   MASK FOR < 4096 BITS
         N     R15,DQESIZE        SIZE BETTER BE MULTIPLE OF 4096
         BZ    VDQEOK3            ALL ZEROS IS WHAT WE WANT
         SPACE
         SLR   R15,R15            MAKE MACRO WORK IN ODD CASE
         IPCSLMSG R15,R7,BADDQE,32,ZHDR4,(R10),(R9)
         B     VDONE3
         SPACE
VDQEOK3  DS    0H
         C     R7,SPTLEDQE(,R6)
         L     R7,DQENEXT
         BNE   VLOOP3
         SPACE
VDONE3   DS    0H
         LA    R6,24(,R6)         NEXT SPT ENTRY?
         LA    R4,24(,R4)         NEXT SPT ENTRY DUMP ADDRESS (IPCS)
         LA    R5,1(,R5)          BUMP KEY
         SLL   R5,4               PUT IN HIGH BITS OF BYTE
         STC   R5,FSPKEY          SAVE KEY IN FAKE SPQE
         SRL   R5,4               PUT BACK WHERE IT BELONGS
         C     R5,=F'16'          PAST LAST KEY?
         BL    VLOOP0             IF NOT, NEXT KEY THIS SUBPOOL
         SPACE
         LA    R8,4(,R8)          NEXT SUBPOOL
         C     R8,=F'16'          PAST 4TH SUBPOOL
         BL    VLOOP00
         AIF   ('&SYSPARM' EQ 'IPCS').IPCS15
         DROP  R7
         AGO   .NPCS15
.IPCS15  ANOP
         DROP  R2
.NPCS15  ANOP
         SPACE
RETURN   DS    0H
         REXIT ENV=OS
SUBNAMES DC    F'227',F'228',F'231',F'241'
FAKECDEI DC    XL8'00'
         DC    CL8' '
         DC    XL8'00'
FAKECDEL EQU   *-FAKECDEI
FAKSPQEI DC    4F'0'
         DC    H'0'
         DC    X'FF'
         DC    X'00'
FAKSPQEL EQU   *-FAKSPQEI
         SPACE
         LTORG
         SPACE
DHDR1    DC    CL133'                     | DQE      | AREA     | SIZE *
                   | NEXT DQE | 1ST FQE  | LAST FQE |'
DHDR4    DC    CL133'                     +----------+----------+------*
               ----+----------+----------+----------+'
         SPACE
NOGDA    DC    CL133' # UNABLE TO ACCESS GDA AT DUMP ADDRESS XXXXXXXX  *
               (RUNSPT)  '
NOSPT    DC    CL133' # UNABLE TO ACCESS SPT AT DUMP ADDRESS XXXXXXXX  *
               (RUNSPT)  '
NODQE    DC    CL133' # UNABLE TO ACCESS DQE AT DUMP ADDRESS XXXXXXXX  *
               (RUNSPT)  '
BADDQE   DC    CL133' # INVALID DQE FOUND AT ADDRESS XXXXXXXX SIZE NOT *
               MULTIPLE OF 4K (RUNSPT)  '
         SPACE
ZHDR4    DC    CL133' ---------+----------+----------+----------+------*
               ----+----------+----------+----------+----------+-------*
               ---+---+ '
         SPACE
HEXCHAR  DC    256X'F0'
         ORG   HEXCHAR+X'F0'
         DC    C'0'
         DC    C'1'
         DC    C'2'
         DC    C'3'
         DC    C'4'
         DC    C'5'
         DC    C'6'
         DC    C'7'
         DC    C'8'
         DC    C'9'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
OPTPTR   DS    A
HOLDSPT  DS    XL(SPTLEN)
LINE     DS    CL133
FAKECDE  DC    XL8'00'
FCDENAM  DC    CL8' '
FCDEEP   DC    XL8'00'
FAKESPQE DC    4F'0'
FSPID    DC    H'0'
FSPKEY   DC    X'FF'
FSPFLAGS DC    X'00'
         DS    0D
WORKLEN  EQU   *-WORKAREA
         SPACE
PARMLST  DSECT
OUTDCB   DS    A
PRINTDCB DS    A
OPTR     DS    A
         PRINT NOGEN
         SYMBAR MODE=DEC
         IHADQE
DQELEN   EQU   *-DQE
         IHAGDA
GDALEN   EQU   *-GDA
         IHASPT
SPTLEN   EQU   1540      LEN TAKEN FROM DATA AREAS MANUAL
         IKJTCB
         CVT   DSECT=YES
         IHAPSA
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         END
         MACRO
&L       PRINTBUF &TEXT
         LCLC  &L2
&L2      SETC  '&L'
         AIF   ('&TEXT' EQ '').NOMOVE
&L2      L     R15,ADPLBUF         GET BUFFER ADDRESS.
         MVI   0(R15),C' '         BLANK OUT PREVIOUS JUNK.
         MVC   1(132,R15),0(R15)
         MVC   0(L'&TEXT,R15),&TEXT MOVE ITEM TO BUF'R.
&L2      SETC  ''
.NOMOVE  ANOP
&L2      LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLPRNT        EXTRACT PRINT ROUTINE ADDR.
         BALR  R14,R15             BRANCH TO PRINT SUBROUTINE.
         MEND
*
*
*  PRPARM  PROCESS THE IPCS PARM STRING
*
*
*   PARM:  THE ADPL
*
         SPACE
IPCSPRM  RENTR BASE=11,ENV=OS,PARM=(10),WORK=(WORKLEN,WORKAREA)
         SPACE
         L     R8,4(,R10)        POINT TO TARGET FLAGS
         L     R9,8(,R10)        POINT TO PRINT DCB
         SLR   R15,R15           CLEAR RC IN CASE THERE ARE NO PARMS
         SPACE
         AIF   ('&SYSPARM' EQ 'IPCS').IPCSX         ###############
         MVC   0(4,R8),=X'FFFFFF00' DEFAULT PARM FLAGS
         SPACE
         L     R12,0(R10)        POINT TO OS PARM LIST
         L     R12,0(,R12)       POINT TO OS PARM
         LA    R3,2(,R12)        POINT TO PARMS
         LH    R4,0(,R12)        LOAD PARM LENGTH
         LTR   R4,R4             LENGTH IS ZERO?
         BZ    RETURN            IF SO, DO NOTHING
         AGO   .NIPCSX
.IPCSX   ANOP
         MVC   0(4,R8),=X'00FF0000' DEFAULT PARM FLAGS
         SPACE
         L     R12,0(,R10)       POINT TO THE ABDPL
         USING ABDPL,R12
         SPACE
         L     R2,ADPLEXT        POINT TO OPERANDS PARM
         LTR   R2,R2             IS THERE A PARM?
         BZ    RETURN            IF NOT, DO NOTHING
         SPACE
         L     R3,0(,R2)         POINT TO OPERANDS
         LH    R4,ADPLOPLN       GET LENGTH OF OPERANDS
         LTR   R4,R4             LENGTH IS ZERO?
         BZ    RETURN            IF SO, DO NOTHING
.NIPCSX  ANOP
         SPACE
         XC    MOREPARM(4),MOREPARM CLEAR EXTRA PARMS FIELD
         SPACE
         ST    R3,SAVEMAIN       SAVE MAIN PARM ADDR
         ST    R4,SAVEMLEN       SAVE MAIN PARM LEN
         SPACE
         BCTR  R4,0              SUB 1 FOR EXECUTE INSTRUCTIONS
         EX    R4,TRT1           CHECK FOR BLANKS, MULTIPLE PARMS
         BZ    CHK1
         SPACE
         ST    R1,MOREPARM       SAVE POINTER TO BLANK
         SR    R1,R3             GET DSN LEN
         SR    R4,R1             GET REMAINING PARMS LEN (-1)
         ST    R4,MORELEN        SAVE FOR LATER
         BCTR  R1,0              SUB 1 FOR EXECUTE INSTRUCTIONS
         LR    R4,R1             MAKE IT THE CURRENT PARM LEN
         SPACE
CHK1     DS    0H
         EX    R4,DCHK           CHECK FOR DOT IN NAME
         BNZ   CHK1A             IF SO, IT IS A NAME
         SPACE
*        NO DOTS IN FIRST NAME, MUST BE A KEYWORD, RESET
         MVC   MOREPARM(4),SAVEMAIN
         MVC   MORELEN(4),SAVEMLEN
         B     DONE              GO PROCESS AS KEYWORDS
         SPACE
CHK1A    DS    0H
         EX    R4,PCHK           CHECK FOR PARENS
         BZ    CHK2
         SPACE
         MVC   LINE(133),DSN5
         EX    R4,MOVEDS2
         VSMPRNT AREA24,(R9),LINE
         MVC   0(4,R2),=F'12'    SHOW BAD NAME
         LA    R15,12            SHOW BAD PARSE TO CALLER
         B     RETURN
         SPACE
CHK2     DS    0H
         C     R4,=F'43'         NAME (-1) TOO LONG?
         BNH   NAMEOK
         SPACE
         MVC   LINE(133),DSN1
         EX    R4,MOVEDS2
         VSMPRNT AREA24,(R9),LINE
         MVC   0(4,R2),=F'12'    SHOW BAD NAME
         LA    R15,12            SHOW BAD PARSE TO CALLER
         B     RETURN
         SPACE
TRT1     TRT   0(*-*,R3),FINDBLK FIND BLANK AT END OF NAME
PCHK     TRT   0(*-*,R3),FINDPRN FIND OPEN PAREN, MEMBER IS NOT ALLOWED
DCHK     TRT   0(*-*,R3),FINDDOT FIND DOT IN DATASET NAME,
MOVEDSN  MVC   DSN(*-*),0(R3)
MOVEDS2  MVC   LINE+25(*-*),0(R3)
         SPACE
**********************************************************************
*
* THE NAME IS OK, USE LOCATE TO SEE IF IT ALREADY EXISTS
*
**********************************************************************
         SPACE
NAMEOK   DS    0H
         MVI   DSN,C' '          CLEAR DSN PARM TO BLANKS
         MVC   DSN+1(43),DSN
         EX    R4,MOVEDSN        COPY DSN TO PARM
         LA    R4,1(R4)          BUMP BACK TO FULL LEN VALUE
         STH   R4,DSNLEN         SAVE IN THE DSN PARM
         LA    R14,DSN
         L     R15,=X'002C0000'
         STM   R14,R15,DSNPRM
         CALL  LOCATE,(DSNPRM,LOCRC),MF=(E,CALLLIST)
         LH    R15,LOCRC         GET LOCATE RC
         C     R15,=F'8'         DOES IT EXIST?
         BE    NEW               IF NOT, GO CREATE IT
         BL    EXISTS            IF SO, GREAT
         C     R15,=F'11'        IS IT MIGRATED BY HSM?
         BE    EXISTS            IF SO, IT EXISTS
*        MUST BE RC=12, NO GOOD
         MVC   LINE(133),DSN2
         MVC   LINE+51(44),DSN
         VSMPRNT AREA24,(R9),LINE
         MVC   0(4,R2),=F'12'    SHOW BAD NAME
         LA    R15,12            SHOW BAD PARSE TO CALLER
         B     RETURN
         SPACE
EXISTS   DS    0H
         MVC   GETDDN(8),=CL8'OUTPUT  '
         LA    R14,GETDDN
         L     R15,=X'00080000'
         STM   R14,R15,DDNPRM
         LA    R14,GETDSN
         L     R15,=X'002C0000'
         STM   R14,R15,DSNPRM
         LA    R14,REA
         L     R15,=X'00000000'
         STM   R14,R15,REAPRM
         MVC   DDNLEN(2),=H'6'
         LA    R14,DDNLEN
         L     R15,=X'00088000'
         STM   R14,R15,DDNPRM2
         LA    R14,DSNLEN
         L     R15,=X'002C8000'
         STM   R14,R15,DSNPRM2
         SPACE
         CALL  GETDSN,(DDNPRM,DSNPRM),MF=(E,CALLLIST)
         CLI   GETDSN,C' '              IS DDNAME OUTPUT IN USE?
         BE    ALLOCSHR                 IF NOT, GO ALLOCATE IT
         SPACE
         CLC   DSN(44),GETDSN           IS NAME ALREADY ALLOCATED?
         BE    DONE                     IF SO, WE ARE DONE
         SPACE
         CALL  FREEDD,(DDNPRM2,REAPRM,FREERC),MF=(E,CALLLIST)
         SPACE
ALLOCSHR DS    0H
         XC    ALLOCT(4),ALLOCT         SHOW DISP=SHR
         CALL  ALLOCDS,(DSNPRM2,DDNPRM2,ALLOCT,REAPRM,ALOCRC),         X
               MF=(E,CALLLIST)
         L     R15,ALOCRC
         LTR   R15,R15
         BZ    DONE
         SPACE
         MVC   LINE(133),DSN3
         MVC   LINE+36(44),DSN
         VSMPRNT AREA24,(R9),LINE
         MVC   0(4,R2),=F'12'    SHOW BAD NAME
         LA    R15,12            SHOW BAD PARSE TO CALLER
         B     RETURN
         SPACE
NEW      DS    0H
         MVC   GETDDN(8),=CL8'OUTPUT  '
         LA    R14,GETDDN
         L     R15,=X'00080000'
         STM   R14,R15,DDNPRM
         LA    R14,GETDSN
         L     R15,=X'002C0000'
         STM   R14,R15,DSNPRM
         LA    R14,REA
         L     R15,=X'00000000'
         STM   R14,R15,REAPRM
         MVC   DDNLEN(2),=H'6'
         LA    R14,DDNLEN
         L     R15,=X'00088000'
         STM   R14,R15,DDNPRM2
         LA    R14,DSNLEN
         L     R15,=X'002C8000'
         STM   R14,R15,DSNPRM2
         SPACE
         CALL  GETDSN,(DDNPRM,DSNPRM),MF=(E,CALLLIST)
         CLI   GETDSN,C' '              IS DDNAME OUTPUT IN USE?
         BE    ALLOCNEW                 IF NOT, GO ALLOCATE IT
         SPACE
         CALL  FREEDD,(DDNPRM2,REAPRM,FREERC),MF=(E,CALLLIST)
         SPACE
ALLOCNEW DS    0H
         MVC   ALLOCT(4),=F'2'          SHOW DISP=NEW
         CALL  ALLOCDS,(DSNPRM2,DDNPRM2,ALLOCT,REAPRM,ALOCRC),         X
               MF=(E,CALLLIST)
         L     R15,ALOCRC
         LTR   R15,R15
         BZ    DONE
         SPACE
         MVC   LINE(133),DSN4
         MVC   LINE+31(44),DSN
         VSMPRNT AREA24,(R9),LINE
         MVC   0(4,R2),=F'12'    SHOW BAD NAME
         LA    R15,12            SHOW BAD PARSE TO CALLER
         B     RETURN
         SPACE
DONE     DS    0H
         L     R3,MOREPARM       POINT TO REMAINING PARMS
         SLR   R15,R15           CLEAR RC IN CASE WE ARE DONE
         LTR   R3,R3             ARE THERE ANY?
         BZ    RETURN            IF ZERO, THEN NO
         SPACE
         L     R4,MORELEN        GET REMAINING LEN -1
         SPACE
FBLANKS  DS    0H
         CLI   0(R3),C' '        BLANK?
         BNE   TSTPRM            IF NOT, FORGET IT
         SPACE
         LA    R3,1(,R3)         NEXT CHAR
         BCT   R4,FBLANKS
         SLR   R15,R15           CLEAR RC
         B     RETURN            RAN OUT OF CHARS.
         SPACE
**********************************************************************
*
**********************************************************************
TSTPRM   DS    0H
         L     R6,PARMCNT        GET COUNT OF POSSIBLE VALUES
         LA    R5,PARMS          POINT TO LIST OF PARMS
         SPACE
         EX    R4,TRT1           FIND END OF PARM
         BZ    LASTPRM
         SR    R1,R3             GET PARM LEN
         BCTR  R1,0              SUB 1 FOR EXECUTES
         B     TST1
         SPACE
LASTPRM  DS    0H
         LR    R1,R4             LAST PARM LENGTH
         SPACE
TST1     DS    0H
         CH    R1,0(,R5)         PARM LEN OK?
         BNE   NXTVALUE
         SPACE
         EX    R1,PARMTST        MATCH?
         BNE   NXTVALUE
         SPACE
         LR    R15,R8            POINT TO PARM AREA
         AH    R15,10(,R5)       ADD OFFSET OF FLAG
         MVC   0(1,R15),12(R5)   SET FLAG
NXTPRM   DS    0H
         LA    R1,1(,R1)         GET FULL LENGTH OF PARM
         LA    R3,0(R1,R3)       POINT TO NEXT ENTRY
         SLR   R15,R15           CLEAR RC IN CASE WE ARE DONE
         SR    R4,R1             SUB OFF PARM LENGTH
         BNP   RETURN            IF NOTHING LEFT, WE ARE DONE
         B     FBLANKS           GO PROCESS NEXT PARM
         SPACE
NXTVALUE DS    0H
         LA    R5,ENTLEN(,R5)    POINT TO NEXT PARM ENTRY
         BCT   R6,TST1
         SPACE
         MVC   LINE(133),PRM1
         EX    R1,PARMMV
         LR    R7,R1             SAVE R1
         VSMPRNT AREA24,(R9),LINE
         SPACE
         LR    R1,R7             RESTORE R1
         B     NXTPRM
         SPACE
RETURN   DS    0H
         REXIT ENV=OS,RC=(15)
         SPACE 3
DSN1     DC    CL133' DATASET NAME TOO LONG'
DSN2     DC    CL133' DATASET CATALOGED BUT DOES NOT EXIST ON VOLUME'
DSN3     DC    CL133' COULD NOT ALLOCATE EXISTING DATASET'
DSN4     DC    CL133' COULD NOT ALLOCATE NEW DATASET'
DSN5     DC    CL133' MEMBER NAME NOT ALLOWED'
PRM1     DC    CL133' UNKNOWN KEYWORD PARM:  '
         SPACE 3
**********************************************************************
*
* KEYWORD PARMS.  MUST BE ARRANGED BY LENGTH, LONGEST FIRST THEY MUST
* BE CHECKED IN THAT ORDER
*
**********************************************************************
         SPACE
PARMTST  CLC   0(*-*,R3),2(R5)
PARMMV   MVC   LINE+24(*-*),0(R3)
PARMCNT  DC    A(NUMPARMS)
*
*              LEN-1    KEYWORD   PARM OFFSET VALUE  PADDING
PARMS    DC    H'4',CL8'PRINT   ',AL2(PRTPRM),X'FF',X'00'
ENTLEN   EQU   *-PARMS
         DC    H'6',CL8'NOPRINT ',AL2(PRTPRM),X'00',X'00'
         DC    H'2',CL8'LPA     ',AL2(LPAPRM),X'FF',X'00'
         DC    H'4',CL8'NOLPA   ',AL2(LPAPRM),X'00',X'00'
         DC    H'2',CL8'CDE     ',AL2(CDEPRM),X'FF',X'00'
         DC    H'4',CL8'NOCDE   ',AL2(CDEPRM),X'00',X'00'
         DC    H'2',CL8'FQE     ',AL2(FQEPRM),X'FF',X'00'
         DC    H'4',CL8'NOFQE   ',AL2(FQEPRM),X'00',X'00'
NUMPARMS EQU   (*-PARMS)/ENTLEN
         SPACE 3
*        TRT TABLE TO FIND OPEN PAREN
FINDPRN  DC    XL256'00'
         ORG   FINDPRN+C'('
         DC    X'FF'
         ORG
*        TRT TABLE TO FIND BLANK OR COMMA
FINDBLK  DC    XL256'00'
         ORG   FINDBLK+C' '
         DC    X'FF'
         ORG   FINDBLK+C','
         DC    X'FF'
         ORG
*        TRT TABLE TO FIND DOT
FINDDOT  DC    XL256'00'
         ORG   FINDDOT+C'.'
         DC    X'FF'
         ORG
         SPACE 3
WORKAREA DSECT
         DS    26F
WORD     DS    D
AREA24   DS    XL128
CALLLIST DS    8D
MOREPARM DS    A
MORELEN  DS    F
SAVEMAIN DS    A
SAVEMLEN DS    F
DSNPRM   DS    2A
DSNPRM2  DS    2A
DSNLEN   DS    H
DSN      DS    CL44
DDNPRM   DS    2A
DDNPRM2  DS    2A
GETDSN   DS    CL44
DDNLEN   DS    H
GETDDN   DS    CL44
LOCRC    DS    H
REAPRM   DS    2A
REA      DS    F
FREERC   DS    F
ALOCRC   DS    F
ALLOCT   DS    F
LINE     DS    CL133
         DS    0D
WORKLEN  EQU   *-WORKAREA
         PRINT NOGEN
         SYMBAR MODE=DEC
         AIF   ('&SYSPARM' NE 'IPCS').NOIPCSX         ###############
         BLSABDPL AMDEXIT=YES,AMDCPST=NO,AMDPFMT=NO
.NOIPCSX ANOP
         SPACE
PRTPRM   EQU   0
LPAPRM   EQU   1
CDEPRM   EQU   2
FQEPRM   EQU   3
         END
