         MACRO ,
&LABL    IPCSLOAD &REG,&FROM,&LEN=16,&PERM=,&SA=AREA24
.*
.*   THIS MACRO GENERATES AN IPCS CALL TO GET THE STORAGE
.*   SPECIFIED IN PARM FROM FROM THE DUMP AN LOAD ITS ADDRESS
.*   INTO REGISTER REG.
.*
.*         #########################################################
.*   NOTE: #  THE RENTR AND REXIT MACROS WITH ENV=IPCS MUST BE
.*         #  USED IN PROGRAMS USING THIS MACRO
.*         #########################################################
.*
.*   REGISTER  &REG IS MODIFIED BY THIS MACRO.
.*
.* FORMAT:
.*LABEL IPCSLOAD REG,FROMADDR,LEN=20,PERM=TCBAREA
.*
.*   PARMS:
.*
.*   REG  - A REGISTER NUMBER.  THE ADDRESS ACCESSABLE BY
.*          THE PROGRAM IS LISTED HERE.
.*
.*   FROM - THE ADDRESS TO BE LOADED.
.*          IF (REG) IS SPECIFIED, THE REGISTER IS ASSUMED TO HAVE
.*          THE DUMP ADDRESS TO BE ACCESSED.  OTHERWISE, THE PASSED
.*          SYMBOL IS LOADED, AND THE ADDRESS IS ASSUMED TO BE AN
.*          ADDRESS IN THE DUMP.
.*
.*   LEN  - THIS IS THE LENGTH OF THE STORAGE TO REQUEST FROM THE
.*          DUMP.  THIS CAN BE A SYMBOL < WITH A VALUE UP TO 4096
.*          OR A REGISTER (REG).
.*
.*   PERM - THIS IS AN ADDRESS (OR REGISTHER (REG) WHICH IS AT LEAST
.*          LEN= BYTES LONG.  THE DATA FROM THE CALL IS COPIED TO THIS
.*          AREA.  THIS AREA IS THEN RETURNED IN REG.
.*
.*   SA   - THIS IS A WORK AREA OF AT LEAST 16 BYTES USED TO PROTECT
.*          REGISTERS.  A DEFAULT IS GIVEN FOR BEAUTIFICATION REASONS.
.*
.* SAMPLE:
.*       IPCSLOAD R5,TCBTCB,LEN=TCBLEN
.*
.*
         GBLB  &IPCSFG
         LCLC  &IDX
         LCLC  &TMPSA
&IDX     SETC  '&SYSNDX'
         AIF   ('&IPCSFG' EQ '1').IPCSOK
         MNOTE 8,'ENV=IPCS NOT SPECIFIED IN RENTR MACRO OR, RENTR NOT UX
               SED'
         MEXIT
.IPCSOK  ANOP
         AIF   (('&REG' NE '14') AND ('&REG' NE 'R14') AND             X
               ('&REG' NE '15') AND ('&REG' NE 'R15') AND              X
               ('&REG' NE '0')  AND ('&REG' NE 'R0')  AND              X
               ('&REG' NE '1')  AND ('&REG' NE 'R1')).REGOK
         MNOTE 8,'INVALID TARGET REGISTER &REG, REGS 14,15,0,1 ARE INVAX
               LID'
         MEXIT
.REGOK   ANOP
.*********************************************************************
.*
.*       SAVE THE REGISTERS THE IPCS ROUTINES (AND US) WILL USE
.*
.*********************************************************************
         AIF   ('&SA'(1,1) EQ '(').REGSA
&TMPSA   SETC  '&SA'
         AGO   .GOTSA
.REGSA   ANOP
&TMPSA   SETC  '0(&SA(1))'
.GOTSA   ANOP
&LABL    STM   R14,R1,&TMPSA      SAVE WORK REGISTERS IN USERS AREA
         L     R1,72(,R13)        GET IPCS PARM FROM WHERE RENTR PUT IT
.*********************************************************************
.*
.*       GET THE DUMP ADDRESS TO RETRIEVE INTO REGISTER R0
.*
.*********************************************************************
         AIF   ('&FROM'(1,1) EQ '(').REGFROM
         L     R0,&FROM            PUT DUMP ADDR IN R0 FOR IPCS
         AGO   .GOTFROM
.REGFROM ANOP
         LR    R0,&FROM(1)         PUT DUMP ADDR IN R0 FOR IPCS
.GOTFROM ANOP
.*********************************************************************
.*
.*       PUT THE LENGTH IN THE ADPL PARM LIST
.*
.*********************************************************************
         AIF   ('&LEN'(1,1) EQ '(').REGLEN
         L     R14,=A(&LEN)        SAVE LEN IN ADPL
         STH   R14,ADPLDLEN-ABDPL(,R1) SAVE LEN IN ADPL
         AGO   .GOTLEN
.REGLEN  ANOP
         STH   &LEN(1),ADPLDLEN-ABDPL(,R1) SAVE LEN IN ADPL
.GOTLEN  ANOP
.*********************************************************************
.*
.*       CALL THE SERVICE ROUTINE AND TEST THE RC
.*
.*********************************************************************
         XR    &REG,&REG              CLEAR REG IN CASE OF FAILURE
         L     R15,ADPLMEMA-ABDPL(,R1) POINT TO SERVICE ROUTINE
         BALR  R14,R15                 CALL STORAGE ROUTINE
         LTR   R15,R15                DID THE CALL WORK
         BNZ   DON&IDX
.*********************************************************************
.*
.*       IF WE AREN'T SAVING A PERMANENT COPY SKIP TO THE END,
.*       OTHERWISE COPY THE DATA TO THE PERM ADDRESS
.*       A LOOP OF MVC'S IS USED BECAUSE WE DON'T HAVE ENOUGH
.*       REGISTERS FOR AN MVCL AND MOST OF THE TIME WE MOVE < 256
.*
.*********************************************************************
         AIF   ('&PERM' EQ '').SHORT
         AIF   ('&LEN'(1,1) EQ '(').REGLEN2
         L     R1,=A(&LEN)         GET LENGTH IN REGISTER
         AGO   .GOTLEN2
.REGLEN2 ANOP
         LR    R1,&LEN(1)          GET LENGTH IN REGISTER
.GOTLEN2 ANOP
         AIF   ('&PERM'(1,1) EQ '(').REGPERM
         LA    R14,&PERM           GET TARGET IN REGISTER
         AGO   .GOTPERM
.REGPERM ANOP
         LR    R14,&PERM(1)        GET TARGET IN REGISTER
.GOTPERM ANOP
         LR    R15,R0              GET SOURCE IN ADDRESSABLE REGISTER
         LR    R0,R14              SAVE NEW RETURED ADDRESS
LOP&IDX  DS    0H
         C     R1,=F'256'          IS THERE MORE THAN 256
         BNH   LST&IDX             IF NOT USE AN EXECUTE
         MVC   0(256,R14),0(R15)   MOVE 256
         S     R1,=F'256'          DECREMENT COUNT
         LA    R14,256(,R14)       BUMP TARGET
         LA    R15,256(,R15)       BUMP SOURCE
         B     LOP&IDX
MOV&IDX  MVC   0(*-*,R14),0(R15)   MOVE 256 OR LESS BYTES
LST&IDX  DS    0H
         BCTR  R1,0                DECREMENT FOR EX INSTRUCTION
         EX    R1,MOV&IDX          MOVE THE DATA
.SHORT   ANOP
         LR    &REG,R0             PUT DATA IN REQUESTERS REG
.*********************************************************************
.*
.*       RESTORE THE WORK REGISTERS AND WE ARE DONE
.*
.*********************************************************************
.RESTORE ANOP
DON&IDX  DS    0H
         LM    R14,R1,&TMPSA      RESTORE WORK REGISTERS
         MEND  , IPCSLOAD         RES 05/91
