         MACRO ,
&LABL    REXIT &T,&RC=0,&LSA=YES,&RETURN=,&ENV=PLI
.*
.*   THIS MACRO IS USED TO EXIT FROM A REENTRANT PROGRAM
.*    ENTERED WITH THE RENTR MACRO
.*
.*   PARMS:
.*   T    - IF SET TO THE VALUE T, BYTE ZERO OF THE HIGHER SAVE AREA
.*          IS SET TO X'FF' TO MARK THE ROUTINE COMPLETE
.*
.*   RC   - REGISTER OR LITERAL VALUE TO BE PASSES BACK TO THE
.*          CALLING ROUTINE VIA REG 15.  FOR REGISTER SPECIFY THE
.*          REGISTER NUMBER EG. (15).  REGISTERS 2-12 AND 15
.*          MAY BE USED.  FOR LITERAL VALUES CODE RC=XXX WHERE XXX
.*          IS A NUMBER OR ABSOLUTE SYMBOL LESS THAN 4096.
.*
.*   LSA -  IF SET TO THE VALUE NO, THEN IT ASSUMED THAT THIS
.*          ROUTINE HAS NO LOWER SAVE AREA AND THAT R13 POINTS
.*          TO THE PLACE WE WILL RESTORE OUR REGISTERS FROM
.*
.*   RETURN - REGISTER VALUE IN THE FORM (R) (WHERE R IS 2-12 OR 0)
.*          THIS VALUE IS RETURNED IN REGISTER 0 TO THE CALLING
.*          ROUTINE.
.*
.*
.*   ENV  - ENVIRONMENT TO EXPAND THE MACRO FOR
.*          VALUES:
.*          PLI  - EXPAND THE MACRO FOR PL/I ENVIRONMENT USING THE
.*                 PL/I RUN TIME STACK FOR THE DSA AND WORK AREA
.*          OS   - EXPAND THE MACRO FOR GENERAL OS USE.  DO A GETMAIN
.*                 FOR THE DSA AND WORK AREA.
.*          BOTH - (THE DEFAULT).  DETERMINE IF THIS IS A PL/I
.*                 ENVIROMENT AT RUN TIME AND USE THE STACK IF IT IS.
.*                 IF NOT, USE A GETMAIN
.*
.*
.* SAMPLE:
.*RET     REXIT RC=(15)
.*
.*
         GBLC  &@LWRWKL
         GBLA  &@RENTR1
         LCLC  &LCLENV,&IDX
.*
.*       VALIDATE THE ENV PARM AND STORE IT IN LOCAL VAR LCLENV
.*       IF THE SYSPARM HAS A VALID ENV VALUE, USE IT INSTEAD
.*
&IDX     SETC  '&SYSNDX'
&LCLENV  SETC  '&ENV'
         AIF   ('&ENV' EQ 'IPCS').ENVOK
         AIF   ('&ENV' EQ 'BOTH').ENVOK
         AIF   ('&ENV' EQ 'OS').ENVOK
         AIF   ('&ENV' EQ 'PLI').ENVOK
         MNOTE 8,'INVALID ENV VALUE &ENV, ENV=BOTH ASSUMED'
         MNOTE 0,'VALID VALUES ARE BOTH, OS, PLI, IPCS'
&LCLENV  SETC  'BOTH'
.ENVOK   ANOP
.*
.*       IF THE SYSPARM WAS SET TO BOTH, PLI, OR OS, THEN OVERRIDE
.*       THE ENV PARM TO THIS VALUE.
.*
         AIF   (('&SYSPARM' NE 'BOTH') AND                             X
               ('&SYSPARM' NE 'PLI') AND                               X
               ('&SYSPARM' NE 'IPCS') AND                              X
               ('&SYSPARM' NE 'OS')).LSACHK
&LCLENV  SETC  '&SYSPARM'
.LSACHK  ANOP
.*
.*       IF LSA=NO WAS SPECIFIED, THEN THERE IS NO LOWER SAVE
.*       AREA OR ANY AUTOMATIC VARIABLES.  DO NOT ATTEMPT TO BACK
.*       UP ONE SAVE AREA.
.*
         AIF   ('&LSA' EQ 'NO').NOLEN
.*
.*       FOR NORMAL SAVE AREA PROCESSING, BACK UP ONE SAVE AREA.
.*       IF THE SAVE AREA WAS GOTTEN WITH A GETMAIN (OS FORMAT),
.*       THEN WE NEED THE LENGTH OF IT.  THIS IS STORED AT OFFSET
.*       12 PAST THE ENTRY POINT BY THE RENTR MACRO.  WE DO NOT
.*       NEED THE SAVE AREA LENGTH FOR PL/I PROCESSING CODE
.*
         AIF   ('&LABL' EQ '').NOLABL
&LABL    DS    0H
.NOLABL  ANOP
         LA    1,0(0,13)           WORK AREA ADDRESS
         L     13,4(0,13)          OLD SAVE AREA ADDRESS
.*
.*       IF A REGISTER WAS SPECIFIED FOR THE RETURN VALUE, PUT IT IN
.*       THE APPROPRIATE PLACE IN THE SAVE AREA SO THAT IT
.*       WILL GET RESTORED WHEN THE LOAD MULTIPLE IS DONE.
.*
         AIF   ('&RETURN' EQ '').NORET
         AIF   ('&RETURN'(1,1) NE '(').NORET
         ST    &RETURN(1),20(0,13)     SAVE RETURNED PARM
.NORET   ANOP
.*
.*       IF THIS IS NOT PL/I, GET THE LENGTH OF THE WORK AREA FOR
.*       DOING THE FREEMAIN
.*
         AIF   ('&LCLENV' EQ 'PLI').PLI1
         L     14,16(0,13)         GET ORIG ENTRY POINT
         L     0,12(14)            LOAD LENGTH OF WORK AREA (RENTR)
.*
.*       IF A REGISTER WAS SPECIFIED FOR THE RC VALUE, PUT IT IN
.*       THE APPROPRIATE PLACE IN THE SAVE AREA SO THAT IT
.*       WILL GET RESTORED WHEN THE LOAD MULTIPLE IS DONE.
.*
.PLI1    ANOP
         AIF   ('&RC' EQ '').RCNREG
         AIF   ('&RC'(1,1) NE '(').RCNREG
         ST    &RC(1),16(0,13)     SAVE RETURN CODE
.RCNREG  ANOP  ,
.*
.*       DO FREEMAIN PROCESSING IF WE NEED TO
.*       FOR FORMAT OS WE ALWAYS DO THE FREEMAIN.  FOR FORMAT BOTH
.*       WE DO THE FREEMAIN IF THE EXTERNAL REFERENCE TO PLISTART IS
.*       UNRESOLVED.  THIS IS NOT A FOOLPROOF WAY OF DETECTING THE
.*       PL/I ENVIRONMENT, BUT AT GTE CSC THIS WORKS BECAUSE BAL
.*       ROUTINES IN A PL/I PROGRAM ARE ALWAYS PL/I CALLED SUBROUTINES.
.*
         AIF   ('&LCLENV' EQ 'PLI').CKRC
         AIF   ('&LCLENV' NE 'BOTH').NOBOTH
         AIF   (&@RENTR1 NE 0).NOWXTRN
         WXTRN PLISTART
&@RENTR1 SETA  1
.NOWXTRN ANOP
         CNOP  0,4
         B     *+8            SKIP ADDRESS CONSTANT
         DC    V(PLISTART)
         L     15,*-4         LOAD PLISTART ADDR
         LTR   15,15          IS PLISTART LINKED IN?
         BNZ   PL1&IDX
.NOBOTH  ANOP
         FREEMAIN R,LV=(0),A=(1)
.CKRC    ANOP
         AIF   ('&LCLENV' NE 'BOTH').NOBOTH1
PL1&IDX  DS    0H
.NOBOTH1 ANOP
.*
.*       RELOAD THE REGISTERS AND RETURN.  IF A LITERAL WAS
.*       SPECIFIED FOR THE RETURN CODE, INSERT IT IN R15 AT THIS TIME.
.*
         LM    14,12,12(13)        RESTORE REGISTERS
         AIF   ('&RC' EQ '').NORC
         AIF   ('&RC'(1,1) EQ '(').NORC
         AIF   ('&RC' EQ '0').ZERORC
         LA    15,&RC              SET RETURN CODE
         AGO   .NORC
.ZERORC  SLR   15,15               ZERO RETURN CODE
.NORC    AIF   ('&T' NE 'T').NOT
         MVI   12(13),X'FF'        SET RETURN INDICATION
.NOT     BR    14                  RETURN
         MEXIT
.*
.*       THIS BLOCK OF CODE IS GENERATED WHEN THERE IS NO LOWER DSA.
.*
.NOLEN   AIF   ('&LABL' EQ '').NOLAB
&LABL    DS    0H
.NOLAB   ANOP  ,
         AIF   ('&RC'(1,1) NE '(').CKRC
         AIF   ('&RC' EQ '(15)').RC15
         LR    15,&RC(1)           LOAD RETURN CODE
.RC15    L     14,12(0,13)         RESTORE R14
         LM    2,12,28(13)         RESTORE R2-R12
         AGO   .NORC
         MEND  , REXIT                                   RES 09/86
