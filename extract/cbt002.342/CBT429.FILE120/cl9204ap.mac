                MVS TOOLS AND TRICKS OF THE TRADE
                          April 1992

                                      Sam Golob
                                      MVS Systems Programmer
                                      Lakewood, New Jersey 08701
                                      (914) 362-1996


A TOUR OF THE WORLD THROUGH FULLSCREEN ZAP - PART II.

      Last month, we began to look at a magnificent tool that has been
unused or under-used by too many systems programmers.  Fullscreen ZAP,
originally from UCLA in California, provides a window to actually see
what is on your disk packs.  It is easy to use, and not cumbersome as
are other such tools.  Fullscreen ZAP is actually something like a
viewing screen for exploring and examining all disk records.  We can
picture Fullscreen ZAP as a vehicle to help you on a guided tour of
your disk packs.

      Fullscreen ZAP is not restricted to a particular type of
dataset, but can be used to view all disk data.  VVDS'es, VSAM
datasets, VTOCs and other unusual dataset types are all within
bounds for exploration with Fullscreen ZAP.

      In the previous installment, we explained the fundamentals of
using this valuable tool.  Now, we'll try and concentrate on a few
"war story" scenarios, to show how Fullscreen ZAP has saved system
programmers from troublesome situations.

      Fullscreen ZAP is easily obtainable and consists of only one
load module.  The load module contains its own help screens.  Both
source code and a load module for Fullscreen ZAP are found on the CBT
Utilities Tape, Files 134 or 186 (source) and File 135 (load module).
The CBT MVS Utilities Tape can either be obtained from NaSPA (414)
423-2420, or from SPLA (305) 284-6257, for a handling fee.

      I have supplied Figure 1 to review of some of the workings of
Fullscreen ZAP as a TSO command.  If you have not read last month's
article, Figure 1 will serve as a summary for you, describing how
Fullscreen ZAP works in general, and helping you to understand the
"war stories" which follow.


CLIPPING A PACK WHILE IT'S ONLINE.

      This story happened to me.  Those of you who ran MVS under VM a
few years ago may have remembered the problem.  It seems that ICKDSF,
IBM's program that is usually used for initializing a disk pack, had a
defect when it was run on MVS under VM, or under VM.  Not only would
ICKDSF function improperly and abend while it was running, but it
would also overlay the disk id of the volume to be initialized.  The
pack would afterwards be completely unusable.

      This defect was later fixed by a PTF to VM, but when we had the
problem, our situation was considerably more urgent.  We were "going
live" with an XA 2.2.3 system that was replacing MVS/370 at our site.
It was 6:30 AM and our deadline was 7 o'clock to come up with XA.
The changes were being done using an alternate MVS residence pack
which was running a limited-scope XA with small spool and small page
datasets.  The task at hand was to re-use our old paging disk pack,
to allocate new page datasets on it for XA use.  We tried to initialize
the PAGE01 pack, and ran into the problem described above.  We had
already passed a "point of no return" to MVS/370.  We didn't really
have another pack available for production page datasets.  Does this
situation sound urgent enough?

      Actually, we were able to come up on time, and with the proper
configuration of disk packs.  I'd like to leave you in suspense as to
how we "initted" PAGE01, but I won't.  Perhaps it would be a good
exercise for you to stop here, and try to figure out what you would
have done in that situation.

      We proceeded as follows--remember that we were running under VM.
We wound up using DDR under VM to copy Cylinder 0 and the VTOC
Cylinder from a work pack, WORK02, to the former "PAGE01" pack.  We
could have used DFDSS for this too, but we weren't licensed for DFDSS
at that location.  FDRCOPY hadn't come out as yet, so we didn't have
a quick tool to use under MVS.  We then took the original work pack
offline and mounted the PAGE01 pack as WORK02.  We allocated one
dataset on WORK02 and uncataloged it.  Then, under TSO, we got into
Fullscreen ZAP, pointed at the allocated dataset.  We used the new
FULLVOL parameter, to fool the DEB of the dataset into thinking that
the dataset extent covered the entire pack.

      The command we used was:  "ZAP dataset.name VOL(WORK02)
FULLVOL".  This brought us to Track Zero, Record 1 of the pack.  We
bumped the ZAP program's pointer two records up, using the subcommand
"R+2".  Then we bumped the ZAP pointer eight bytes with the "+8"
command, past the "VOL1VOL1" string to get to the Volume ID name.
Our result can be seen in Figure 2.  I changed the disk id volume
label to be "PAGE01" with the command, "SD7C1C7C5F0F1" to replace the
WORK02 value with "PAGE01" in hex.  Then we took the pack offline
again, and brought it back online, mounting it as PAGE01.  In effect,
we had "initted" the pack from another pack, and gotten the thing to
work.

      I left out the fact that our pack had a VTOC index, named
SYS1.VTOCIX.WORK02.  A few commands under Fullscreen ZAP, and this
dataset name was changed to SYS1.VTOCIX.PAGE01.  Simple?  Not quite.
But here's how.

      You get to the VTOC header (the Format 4 DSCB) by entering the
command VTOCDS4, while in FULLVOL mode.  Then, you find the appropriate
Format 1 DSCB with a "find" on the dataset name.  In this case,
"F/SYS1.VTOCIX.W/" would be sufficient.  A "+C" command to advance
the current pointer 12 bytes forward, would get us to the data needing
change.  Then a hex replace, SD7C1C7C5F0F1, as before, would change
the VTOC name for the dataset name to SYS1.VTOCIX.PAGE01.

      Our VTOC was not really indexed, but if it were, you'd have to
zap the Format 4 DSCB in the correct byte to make the VTOC
non-indexed.  Or, you could go directly into the index dataset itself
(its Format 1 record would tell you its CCHHR, and a ZAP command could
go right to it.)  Then you could replace the SYS1.VTOCIX.WORK02 name
as before, using the "F" command to find, and the "S" command to
replace.  This would still leave the pack with an indexed VTOC.

      If you wouldn't mind making your pack non-indexed temporarily,
you could make the VTOC non-indexed by zapping the Format 4, and you
won't really have a freespace problem if there's only one dataset on
the pack (you can delete it later under ISPF or with IEHPROGM).  But
if you did have a freespace problem, you could recover all the
freespace by turning on the DIRF bit in the Format 4 DSCB and
allocating a new dataset on the pack.  The VTOC convert routine,
triggered by MVS allocation because the DIRF bit was on, would clean
up all freespace problems.  To find out all the correct displacements
in the Format 4 DSCB for these maneuvers, look in the MVS Debugging
Guide (the "Control Block Book") under DSCB4, for the correct
displacements from +2C after the beginning of the record.

      With some practice using Fullscreen ZAP, especially in FULLVOL
mode, this stuff will become very easy after a while, generally in
the category of "no sweat"!  You just have to be very careful that
you did it right, and you should recheck yourself several times.


MOVING BDAM DATASETS FROM 3380 TO 3390 DISK PACKS.

      BDAM dataset organization under MVS is basically the
construction of "pigeonhole records" to store data.  It is important
in BDAM (or direct access organization, DSORG=DA) to determine where
each pigeonhole record is.  There are two common methods used by BDAM
application programs to locate a specific record.  One way is to use a
record's "relative block", or its block count relative to the
beginning of the dataset.  The other way is to use the "relative TTR",
which locates the record by determining the relative track
displacement from the beginning of the dataset, and the relative
record count from the beginning of that track.

      If you think about it, the "relative TTR" method has a greater
dependency on the geometry of the disk tracks.  Relative TTR always
assumes that there is a certain number of records on each relative
track.  If the dataset is moved to another disk device, the number
of records on each track must remain the same on the new device as on
the old one.

      This may cause a problem if you are moving the dataset from 3380
devices to 3390's.  3390 devices have a larger track capacity, and
usually, more records from a file can fit on a 3390 track than on a
3380 track.  A problem can arise when moving a BDAM dataset, if you
don't know how the application program handles it.  If the application
program uses the relative block method, the maximum number of records
per track has to be packed on each track of the new device.  That will
be the only way that the "relative block" location method can find the
correct record.  On the other hand, if the application program uses
the relative TTR algorithm in BDAM, exactly the same number of records
must be present on each 3390 track as on the 3380 track, and not more.
If there is extra room on the 3390 track, the extra room must not be
used.

      DFDSS is "intelligent" enough to know that if it is moving a
BDAM dataset (DSORG=DA), it will assume the "relative TTR" algorithm
and will preserve the number of records per track on the new device,
even if there is extra room on the new track.  You must give DFDSS a
parameter of "RELBLOCK" for it to assume the other, "relative block"
algorithm.

      Now suppose you are a system programmer and you are not sure
what you did after a dataset move to 3390.  You can calculate the
maximum number of those blocks which should fit into the 3390 track.
But with Fullscreen ZAP, you can look at each track directly.  The
CCHHR field at the bottom of the screen will indicate precisely when
you have switched to the next track, after advancing a record at a
time (using the "R" command).  An even simpler method involves the
"T" command (to advance to the next track) and the "B" command (to
go back one record).  Simply start somewhere within the dataset and
issue a "T" command to go to the next track.  Then issue a "B" command
to go back one record.  The record count part of the CCHHR number will
show you how many records were in the track before.  This is simple,
and it will show you how to get around your problem, if the application
program didn't work the first time after the dataset move.  If you
were wrong the first time, you can move the dataset again, using the
other parameter in DFDSS.  But the main point is that Fullscreen ZAP
shows you exactly where you stand, and you can see what DFDSS did.


TO CONCLUDE.

      I hope I have whetted your appetite to use Fullscreen ZAP for
yourself, and maybe you've learned a few other things from this
month's discussion.  Before closing, I want to mention that there
is space for installation-specific authorization code to be inserted
in the Fullscreen ZAP source code.  Also, FULLVOL will not work if
the ZAP command is not running authorized.  (You have to be authorized
to play with the DEB.)  This may help you to use Fullscreen ZAP, as
the "certified system doctor" in your installation, and you can
properly withhold its use from other people.

      As you use Fullscreen ZAP more for disk exploration, you will
rapidly gain a greater appreciation of the workings of MVS at your
installation, and of its controls.  Good luck in all your endeavors.
See you next month.


  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *


Figure 1.  This is part of an elucidation of Fullscreen ZAP that was
           written by my friend Jeff Broido.  I am including as much
           of it as there is room for.  Fullscreen ZAP is a TSO
           command.


Function

   The ZAP command is used to examine, dump, and update in place any
   type of sequential, partitioned, or direct access dataset.  If the
   user is authorized, ZAP can also similarly manipulate VTOCs,
   catalogs, VVDSs and components of VSAM datasets.

   Any record format is accepted.  This command is the TSO interactive
   equivalent of IBM's service aid AMASPZAP (otherwise known as
   IMASPZAP, HMASPZAP or "Superzap").

Syntax

     ZAP  'DSNAME'  VOLUME('SERIAL')  CRT  NOT3270  TERSE/VERBOSE
           BLKSIZE('BLKSIZE')  NOLOG/LOG  ALLOCDSN('DSNTOALLOC')
           FULLVOL

   Required: 'DSNAME'
   Defaults:  TERSE, NOLOG
              No volume implies a cataloged dataset.
              If you invoke ZAP at a terminal in the 3270 family,
                 CRT is the default.
              BLKSIZE defaults to the blocksize of the dataset.

   Note:  Usage of the ALLOCDSN keyword is required only for the
          'DSNAME' of FORMAT4.DSCB, which you use to get to a VTOC.

Operands

  'DSNAME' - The name of the dataset to be "zapped".  Use the
             pseudo-dataset name of FORMAT4.DSCB to ZAP a VTOC.

  VOLUME   - The volume serial on which the dataset resides.  The volume
             must be online and mounted.

  BLKSIZE  - If the dataset to be "zapped" has blocks larger than the
             blocksize value in the VTOC, use this parameter to specify
             an overriding value.

  CRT      - Tells ZAP to display four lines on either side of the
             current position in the file.

  NOT3270  - Inhibits use of full screen display mode on a 3270-type
             terminal and implies line by line display mode.

  LOG      - Tells ZAP to log to SYSOUT all changes that ZAP makes to
             the file being updated.  Note that ZAP may be put in the
             logging state after it has been entered by use of the LOG
             command, and that use of any of the dump commands causes
             ZAP to automatically enter the logging state.  The log goes
             to SYSOUT(A) unless DDNAME 'ZAPLOG' is pre-allocated to
             wherever you want it to go.

  NOLOG    - Suppress the hardcopy log.

  ALLOCDSN - Specifies the name of a cataloged dataset on the same
             volume as the one to be "zapped".  ZAP will allocate this
             dataset, but open the one given in the first operand.
             Usage of this keyword is required for the privileged
             operation of "zapping" the VTOC, in which case specify the
             pseudo-dataset name of FORMAT4.DSCB as the first operand.

  TERSE    - Tells ZAP to omit the positional 'WHERE' information when
             displaying a portion of the file unless you are in 3270
             mode, in which case it is always displayed.  The opposite
             of TERSE is VERBOSE.

  VERBOSE  - Tells ZAP to give the positional 'WHERE' information when
             displaying a portion of the file.  The opposite of VERBOSE
             is TERSE.

  FULLVOL  - Tells ZAP not to look at the specific dataset, but to
             look at the entire volume that dataset is on.  ZAP will
             initially show you Track 0, Record 1 of the volume your
             dataset is on.

Subcommands

     VERBOSE, NOT3270, YES3270, WHATMEM, LASTDS1, EBCDIC, ITRACE,
     DISASM, LINE80, LINE40, NODEF, ASCII, FLOAT, ZCODE, WHERE, TERSE,
     EJECT, DUMPF, DUMPT, DISPC, DISPK, DISPD, BASE, DUMP, NOTE LAST,
     HELP, NAME, IDEF, SAVE, ZSYM, ASM, CRT, LOG, ZAP, END, SET, ABS,
     DO, L, S, O, X, N, F, >, <, M, E, B, D, V, T, R, P, U, =, ?, H, #,
     W, %, VTOCDS4

     When in ZAP, enter HELP for more details on subcommand syntax.


Here's how to get internal help for ZAP.  To get it online, type ?
or HELP when you enter ZAP.  To go back to where you were, type U.


  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *


FIGURE 2.  This illustrates a use of Fullscreen ZAP in FULLVOL mode.
           The record being pointed to is Record 3 of Track 0 which
           is the Disk Volume Id Standard Label.  Notice that in
           FULLVOL mode on pack WORK02, the "dataset name" is always:
           VOLUME WORK02, in the "where" information at the bottom
           of the display.  The command in the command area, will
           change the volume id WORK02 to the volume id PAGE01.
           Note the wedge-shaped character which is the current
           byte pointer, and which indicates the starting byte to
           be changed.



                                 Z  A  P
SD7C1C7C5F0F1
ENTER VALID COMMAND ABOVE OR ? FOR HELP         VERSION=2.3G 25JUL89


00000   E5D6 D3F1  E5D6 D3F1  >E6D6 D9D2  F0F2 4000   |VOL1VOL1WORK02 .|
00010   0000 0401  4040 4040   4040 4040  4040 4040   |....            |
00020   4040 4040  4040 4040   40C3 C2C9  D7D6 4040   |         CBIPO  |
00030   4040 4040  4040 4040   4040 4040  4040 4040   |                |
00040   4040 4040  4040 4040   4040 4040  4040 4040   |                |
00050   4040 4040                                     |                |








OFF: 0000 (     0) ADDR: 00000 (       0) DSN:   VOLUME WORK02
LEN: 0054 (    84) BASE: 00000 (       0) CCHHR: 0000000003 TTR:  000003




