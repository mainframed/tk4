RSPC     TITLE 'ARCHIVER --- RESPECIFY FUNCTION'
*---------------------------------------------------------------------*
*---     THIS IS THE ARCHIVER RESPECIFY FUNCTION.  IT ALLOWS THE   ---*
*---     USER TO CHANGE THE QUALIFIER DATA ON ANY ITEM OR GROUP    ---*
*---     OF ITEMS.  ITEM SELECT IS PROVIDED.                       ---*
*---------------------------------------------------------------------*
ARCHRSPC CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         USING ARCHRSPC,R15
         #STAMP
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R11,R15             COPY ROUTINE BASE REGISTER
         DROP  R15                 DROP THE OLD BASE
         USING ARCHRSPC,R11        DEFINE THE NEW BASE REGISTER
         LA    R14,72(,R13)        POINT DOWN THE SAVE AREA STACK
         ST    R14,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R14)         AND BACK POINTER
         LR    R13,R14             COPY NEW SAVE AREA POINTER
         L     R14,4(,R13)         RECOPY BACK POINTER
         L     R14,12(,R14)        RECOPY ORIG. REG 14
         LA    R10,0(,R11)         COPY ORIGINAL BASE REGISTER
         AH    R10,PASSIT-2        BUMP BY A BASE'S WORTH
         USING ARCHRSPC+4096,R10   AND DECLARE IT
         USING MAINWK,R12          BASE THE MAIN WORK AREA
         COPY #ARCBITS
         XC    FCOUNT,FCOUNT       CLEAR FUNCTION RECORD COUNT
         XC    MCNT,MCNT           AND MEMBER COUNT
         MVC   VS1MODE,=CL8'OUTPUT' SET THE I/O MODE
         LA    R1,VSAM1DD          LOAD THE PARM POINTER
         LA    R0,0                AND THE 'OPEN' FLAG
         CALL  ARCHVSOP            CALL THE 'OPEN' FUNCTION
         LTR   R15,R15             OPEN OK ??
         BNZ   ENDITALL            NOPE; CAN'T WORK
         XC    MCNT,MCNT             COUNTERS
         EJECT
*---------------------------------------------------------------------*
*---     HERE'S THE MEAT OF THE PROCESSING. THE BASIC PROCESS IS   ---*
*---           THIS:                                               ---*
*---                                                               ---*
*---     1. USING THE CONTROL INFORMATION WE WERE GIVEN AND THE    ---*
*---        INFORMATION WE'VE DEVELOPED, LOCATE THE HEADER RECORD  ---*
*---        FOR THE FIRST MEMBER. WE'LL USE THE VS1BUF1 AREA FOR   ---*
*---        HEADER/KEY CONSTRUCTION.                               ---*
*---                                                               ---*
*---     2. LOOP THROUGH THE HEADERS, LOOKING FOR ITEMS TO         ---*
*---        PROCESS. EACH TIME WE GET A MATCH, SET UP AND CALL     ---*
*---        THE ARCHALT SUBROUTINE.  IF WE'RE CREATING A DUPLICATE ---*
*---        ITEM, SEND A MESSAGE AND CREATE THE NEXT HIGHER        ---*
*---        VERSION NUMBER OF THE SAME ITEM.                       ---*
*---                                                               ---*
*---     3. WHEN WE'VE REACHED THE LAST HEADER, OR PROCESSED THE   ---*
*---        ONLY ITEM GIVEN, EMIT MESSAGES AND COUNTS AND          ---*
*---        RETURN TO ARCHMAIN.                                    ---*
*---------------------------------------------------------------------*
         L     R6,VS1BUF1          POINT TO THE VSAM BUFFER
         USING REC,R6              BASE THE RECORD DSECT
         XC    0(RECKLEN,R6),0(R6)    START AT THE BEGINNING !!
         MVI   RECTT,#RTHDR        START WITH HEADER RECORDS
         MODCB RPL=(*,RPL1),                                           X
               OPTCD=(SEQ,FKS,KGE,SYN,NUP),                            X
               ACB=(*,ACB1),                                           X
               ARG=(*,VS1BUF1),                                        X
               AREA=(*,VS1BUF1),                                       X
               AREALEN=(*,VS1LIM),                                     X
               MF=(G,GENWK)        POSITION TO CLUSTER START
         L     R1,RPL1             COPY THE RPL ADDRESS
         POINT RPL=(1)             GET TO IT
NEXTHDR  DS    0H
         L     R1,RPL1             COPY RPL ADDRESS
         GET   RPL=(1)             AND READ THE NEXT HEADER
         LTR   R15,R15             ANYTHING LEFT ??
         BNZ   ENDITALL            NOPE; ALL DONE
         SHOWCB RPL=(*,RPL1),                                          X
               FIELDS=RECLEN,                                          X
               AREA=(S,VS2LEN2),                                       X
               LENGTH=4,                                               X
               MF=(G,GENWK)        FETCH THE RECORD LENGTH
         CLI   RECTT,#RTHDR        HEADER RECORD ??
         BNE   ENDITALL            NOPE; ALL DONE ---
         LA    R1,RECN             POINT TO THE HEADER
         LA    R0,0                USE DEFAULT QUALIFIER DATA
         CALL  ARCHKNAM            GO CHECK: DO WE PROCESS THIS ITEM ??
         LTR   R15,R15             PASS THE CHECK ??
         BNZ   NEXTHDR             NOPE ---
         SPACE 3
*---------------------------------------------------------------------*
*---     AT THIS POINT, WE'VE DETERMINED THAT THIS ITEM NEEDS TO   ---*
*---     BE ALTERED. NOW WE CHECK THE VERSION NUMBER.  IF WE'RE    ---*
*---     NOT REPLACING A SIMILAR VERSION, WE WILL TRY TO WRITE     ---*
*---     THIS HEADER.  EACH TIME WE GET A DUPLICATE RECORD         ---*
*---     INDICATION FROM VSAM, WE'LL INCREMENT THE VERSION NUMBER  ---*
*---     BY ONE AND TRY AGAIN.  THIS WILL DETERMINE THE MAJORITY   ---*
*---     OF THE KEY FOR ALL SUBSEQUENT RECORDS IN THIS ITEM AS     ---*
*---     WELL.  IF, ON THE OTHER HAND, WE'RE REPLACING ANY         ---*
*---     DUPLICATE DATA, WE'LL SIMPLY CALL ARCHERAS TO REMOVE ANY  ---*
*---     PRE-EXISTING ITEM OF A MATCHING KEY.                      ---*
*---------------------------------------------------------------------*
         MVC   BLDLAREA(44),RECN   COPY THE QUALIFIER DATA
         #RESPEC ,                 MAKE THE CHANGES.
         MODCB RPL=(*,RPL2),                                           X
               OPTCD=(DIR,NUP,MVE),                                    X
               AREA=(*,VS1BUF1),                                       X
               AREALEN=(*,VS1LIM),                                     X
               MF=(G,GENWK)
PUTHDR   DS    0H
         L     R1,RPL2             LOAD RPL ADDRESS
         GET   RPL=(1)             SEE IF IT EXISTS ALREADY
         LTR   R15,R15             FIND IT OK ??
         BZ    DUPKEY              YES ---
         TESTCB RPL=(*,RPL2),FDBK=16 RECORD NOT FOUND ??
         BE    DONOTES             YES ---
         L     R4,RPL2             LOAD RPL ADDRESS
         ABEND 100,DUMP            AND DIE HORRIBLY
DUPKEY   DS    0H
         #IF   REPL,ON,DELEIT      DELETE FOR REPLACEMENT ??
         ICM   R8,15,RECVER        LOAD THE VERSION NUMBER
         BCTR  R8,R0               UP BY ONE
         STCM  R8,15,RECVER        SET A NEW VALUE
         B     PUTHDR              GO RETRY THE GET
DELEIT   DS    0H
         LR    R1,R6               LOAD THE BUFFER POINTER
         CALL  ARCHERAS            DELETE THE DUPLICATE ITEM
         B     PUTHDR              AND GO RETRY THE 'PUT'
DONOTES  DS    0H
         LA    R3,RECN             LOAD NEW KEY VALUE PTR
         LA    R2,BLDLAREA         AND OLD KEY VALUE
         CALL  ARCHALT,((2),(3)),MF=(E,CALLIST)
DTDONE   DS    0H
         L     R1,MCNT             LOAD MEMBER COUNT
         LA    R1,1(,R1)           INCREMENT BY ONE
         ST    R1,MCNT             SAVE UPDATED COUNT
         MVC   RECN(44),BLDLAREA   RESTORE OLD KEY
         LA    R1,RECTT            LOAD POINT TO OLD HEADER
         CALL  ARCHERAS            REMOVE OLD COPY OF THE ITEM
         #FORMAT RECTT,,INMSG
         #PUT  LINE
         L     R6,VS1BUF1          LOAD OUTPUT HEADER VALUES
         #FORMAT RECTT,,OUTMSG
         #PUT  LINE
         #IF   GENM,ON,NEXTHDR     LOOP IF GENERIC NAME
         #IF   GENG,ON,NEXTHDR     LOOP IF GENERIC GROUP
         #IF   GENSG,ON,NEXTHDR    LOOP IF GENERIC SUBGROUP
         #IF   GENT,ON,NEXTHDR     LOOP IF GENERIC TYPE
         SPACE 3
ENDITALL DS    0H
         #ERR  MSG=15
         L     R0,MCNT             COPY MEMBER COUNT
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,MCMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
         LA    R1,VSAM1DD          POINT TO THE DDNAME
         LA    R0,4                SET 'CLOSE' REQUEST
         CALL  ARCHVSOP            CALL THE VSAM 'CLOSE' ROUTINE
         L     R13,4(,R13)         COPY BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS RC = 0
         MVI   12(R13),255
         BR    R14                 AND RETURN TO CALLER
         TITLE 'CONSTANTS, DATA AND DSECTS '
         LTORG
INMSG    DC    AL1(INEND-INMSG1)
INMSG1   DC    C' WAS ALTERED TO ---   '
INEND    EQU   *
OUTMSG   DC    AL1(OUTEND-OUTMSG1)
OUTMSG1  DC    C' ON OUTPUT VSAM1 CLUSTER. '
OUTEND   EQU   *
MCMSG    DC    CL133' '
         ORG   MCMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202120'
         DC    C' TOTAL ITEM(S) PROCESSED.'
         ORG
MINREC   DC    A(RECSIZE)
         COPY  #RECS
         COPY  ##ARCHWK
         END
