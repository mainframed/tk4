EXPD     TITLE 'HUFFMAN TREE EXPANSION ROUTINE'
*---------------------------------------------------------------------*
*---     THIS SUBROUTINE IS THE COUNTERPART TO COMPACT AND WILL    ---*
*---     RE-EXPAND COMPACTED DATA INTO ITS ORIGINAL FORM.          ---*
*---                                                               ---*
*---     ARGUMENTS:                                                ---*
*---         A(OUTPUT STRING)                                      ---*
*---         F(OUTPUT STRING LENGTH)                               ---*
*---         A(INPUT AREA)                                         ---*
*---                                                               ---*
*---     RETURNS:                                                  ---*
*---         1. EXPANDED STRING IN THE OUTPUT AREA                 ---*
*---                                                               ---*
*---     NOTES: THE SAVE AREA CONVENTIONS ARE DESIGNED TO WORK     ---*
*---     WITH THE ARCHIVER PROGRAM'S 'STACKED' SAVE AREAS. IF      ---*
*---     ADAPTED TO OTHER USES, THE LINKAGE CONVENTIONS WILL       ---*
*---     REQUIRE MODIFICATION.                                     ---*
*---------------------------------------------------------------------*
EXPAND   CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         USING EXPAND,R15
         #STAMP
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LA    R14,72(,R13)        POINT TO NEXT SAVE AREA
         ST    R14,8(,R13)         FORWARD CHAIN
         ST    R13,4(,R14)         BACKWARD CHAIN
         LR    R13,R14             POINT DOWN THE CHAIN
         LR    R11,R15             COPY EPA VALUE
         DROP  R15                 DROP OLD BASE
         USING EXPAND,R11          AND DEFINE NEW BASE
         LM    R2,R4,0(R1)         LOAD PARM POINTERS
         L     R3,0(,R3)           LOAD ACTUAL OUTPUT LENGTH
         LR    R1,R12              COPY MAIN WORK AREA ADDRESS
         LA    R12,0(R2,R3)        POINT TO OUTPUT AREA END
         BCTR  R12,R0              BACK UP ONE
         LA    R5,0(,R2)           COPY OUTPUT AREA START
         LA    R10,0(,R4)          AND INPUT AREA START
         XC    8(2,R13),8(R13)     CLEAR THE FLAG WORD
         LA    R14,0               INITIAL VALUES
         LA    R6,0                INITIAL VALUES
         LA    R7,0
         LA    R2,0
         LA    R0,0                BITS-LEFT COUNTER
*        SELECT THE EXPANSION TABLE.  THIS IS TRICKY BECAUSE I
*        NEED TO ACCOUNT FOR A TABLE-SELECTOR IN @BYTEC
*        IF IT'S REALLY THERE.
         CLI   @BYTEC-MAINWK(R1),X'06' VERSION 6 OF ARCHIVER ??
         BNE   SELO                NOPE ---
         L     R1,=V(EXP60)        YES; POINT TO EXPANSION TABLE
         B     L1                  AND GO ---
SELO     DS    0H
         L     R1,=V(EXPOLD)       LOAD POINTER TO OLD TABLE
L1       DS    0H
         USING EXPNDS,R1
         LA    R4,SHIFTS           POINT TO INITIAL SHIFT VALUES
         LA    R3,EXPTAB           POINT TO START OF BIT TABLE
L2       DS    0H
         BAL   R9,SHIFTER          GO SHIFT SOME BITS (?)
         AR    R3,R8               POINT INTO THE BIT TABLE
         ICM   R15,3,0(R3)
         TM    0(R3),X'40'         REPEATED CHARACTER ??
         BNO   NOREPEAT            YES ---
         OI    8(R13),X'40'        SET 'REPEATER' FLAG
         B     NOINCR              DISCARD THIS CHARACTER
NOREPEAT DS    0H
         TM    0(R3),X'80'         ANOTHER LEVEL ??
         BO    GOTIT               NOPE ---
         AH    R3,0(,R3)           POINT TO NEXT TABLE LEVEL
         LA    R4,8(,R4)           LOCATE SECOND SHIFT AMOUNT
         B     L2                  GO SHIFT SOME MORE
GOTIT    DS    0H
         TM    8(R13),X'40'        IS THIS A COUNT CHARACTER ??
         BO    SETCNT              YES ---
         MVC   0(1,R5),1(R3)       COPY RESULT CHARACTER
         TM    8(R13),X'80'        ARE WE REPEATING ??
         BNO   INCR                NOPE ---
         LR    R8,R5               COPY OUTPUT ADDRESS
         LA    R9,0                CLEAR COUNT REGISTER
         IC    R9,9(,R13)          INSERT BYTES-TO-COPY
         LA    R15,0               CLEAR INPUT COUNTER
         ICM   R15,8,1(R3)         INSERT CHARACTER TO INSERT
         MVCL  R8,R14              PROPOGATE THE CHARACTER
         LR    R5,R8               REPLACE OUTPUT POINTER
         XC    8(2,R13),8(R13)     CLEAR THE FLAG WORD
         B     NOINCR              AND SCOOT ---
SETCNT   DS    0H
         MVC   9(1,R13),1(R3)      COPY THE COUNT BYTE
         XI    8(R13),X'C0'        SET SOME MORE 8(R13)
         B     NOINCR              AND SKIP SOME MORE
INCR     DS    0H
         LA    R5,1(,R5)           BUMP OUTPUT CURSOR
NOINCR   DS    0H
         MVC   11(1,R13),0(R3)     COPY BIT COUNT
         NC    10(2,R13),=H'15'    TRIM TO BARE BIT COUNT
         SH    R2,10(,R13)         BITS TO RETURN
         AR    R0,R2               RETURN TO BIT COUNT
         SRDL  R6,0(R2)            SHIFT BACK OVER
         LA    R2,0                RE-CLEAR
         CH    R0,=H'32'           BIGGER THAT IT SHOULD BE ??
         BNH   NOBACK
         SH    R0,=H'32'           YES, BACK IT UP
         SH    R10,=H'4'           BACK UP INPUT POINTER
NOBACK   DS    0H
         CR    R5,R12              FAR ENOUGH YET ??
         BNH   L1                  NOPE; KEEP GOING
RETURN   DS    0H
         L     R13,4(,R13)
         LM    R14,R12,12(R13)     RELOAD REGISTERS
         LA    R15,0               RETURN CODE IS ZERO
         BR    R14                 AND RETURN TO CALLER
SHIFTER  DS    0H
         STM   R14,R15,12(R13)
         L     R15,0(,R4)
         AR    R2,R15              BACKSHIFT ACCUMULATOR
         LR    R14,R0              COPY BITS-LEFT VALUE
         SR    R14,R15             ANY LEFT AFTER SHIFT ??
         BNM   NOLOAD              YES ---
         LR    R14,R0              COPY BITS-LEFT VALUE
         SLDL  R6,0(R14)           SHIFT THAT FAR
         SR    R15,R14             DECREMENT REQUEST SIZE
         L     R7,0(,R10)          LOAD ANOTHER WORD OF INPUT
         LA    R10,4(,R10)         POINT TO NEXT WORD
         LA    R0,32               GOT ANOTHER 32 BITS
NOLOAD   DS    0H
         SLDL  R6,0(R15)           SHIFT OVER
         LR    R8,R6               COPY SHIFTED BITS
         N     R8,4(,R4)           GET JUST WHAT WE WANT
         SLL   R8,1                TIMES TWO
         SR    R0,R15              ACCOUNT FOR IT
         LM    R14,R15,12(R13)
         BR    R9                  AND RETURN TO CALLER
         LTORG
EXPNDS   DSECT
SHIFTS   DS    32F                 SHIFT VALUES
EXPTAB   DS    F                   EXPANSION TABLE
         COPY  ##ARCHWK
         END
