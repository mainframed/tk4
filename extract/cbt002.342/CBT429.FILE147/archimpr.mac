IMPR     TITLE 'ARCHIVER --- IMPORT FUNCTION'
*---------------------------------------------------------------------*
*---     THIS IS THE 'IMPORT' FUNCTION OF THE ARCHIVER. TWO        ---*
*---     'FLAVORS' ARE AVAILABLE.  EITHER THE USER ELECTS TO       ---*
*---     RESTORE ALIAS INFORMATION OR NOT.  IF ALIASES ARE         ---*
*---     RETAINED, THEY ARE ALSO CHECKED FOR VALID NAMES FOR       ---*
*---     IMPORT.  THIS ROUTINE WAS HEAVILY REWORKED FOR VERSION    ---*
*---     4.1 AND IS STILL NOT COMPLETELY SATISFACTORY TO ME.  I'D  ---*
*---     STILL LIKE TO REWORK THIS FUNCTION AGAIN BUT I'M MORE     ---*
*---     INTERESTED IN GETTING THE BASIC FUNCTIONS OUT FOR THE     ---*
*---     TIME BEING.                                               ---*
*---------------------------------------------------------------------*
ARCHIMPR CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
@RPL1    EQU   R2                  SOME
@RPL2    EQU   R3                    SPECIAL
@RPL3    EQU   R4                      EQUATES
@BUF1    EQU   R5                        FOR
@BUF2    EQU   R6                          VSAM
@BUF3    EQU   R7                            I/O MGMT
         COPY #ARCBITS
         USING ARCHIMPR,R15
         #STAMP
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R11,R15             LOAD ROUTINE BASE REGISTER
         DROP  R15                 DROP THE OLD BASE
         USING ARCHIMPR,R11        DEFINE THE NEW BASE REGISTER
         LA    R14,72(,R13)        POINT DOWN THE SAVE AREA STACK
         ST    R14,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R14)         AND BACK POINTER
         LR    R13,R14             LOAD NEW SAVE AREA POINTER
         L     R14,4(,R13)         RELOAD BACK POINTER
         L     R14,12(,R14)        RELOAD ORIG. REG 14
         USING MAINWK,R12          BASE THE MAIN WORK AREA
         XC    FCOUNT,FCOUNT       CLEAR FUNCTION RECORD COUNT
         XC    MCNT,MCNT           AND MEMBER COUNT
         XC    ACNT,ACNT           AND ALIAS COUNT
         XC    CHAIN,CHAIN         CLEAR THE CHAIN POINTER FIELD
         BAL   R14,OPNVI           GO OPEN THE NONVSAM INPUT DATASET
         LTR   R15,R15             WAS IT OPENED OK ??
         BZ    NVSOK               YES ---
         B     ENDITALL            AND GO TERMINATE
NVSOK    DS    0H
         MVC   VS1MODE,=CL8'OUTPUT' SET THE I/O MODE
         LA    R1,VSAM1DD          LOAD THE PARM POINTER
         LA    R0,0                AND THE 'OPEN' FLAG
         CALL  ARCHVSOP            CALL THE 'OPEN' FUNCTION
         LTR   R15,R15             OPEN OK ??
         BNZ   ENDITALL            NOPE; CAN'T WORK
*---------------------------------------------------------------------*
*---     SINCE WE MAY BE USING THE CONTENTS OF EXPORTED ALIAS      ---*
*---     RECORDS TO DETERMINE WHETHER THIS ITEM SHOULD BE          ---*
*---     RESTORED, WE'LL SAVE ALL THE HEADER AND ALIAS RECORDS     ---*
*---     FOR EACH ITEM UNTIL WE DETERMINE THAT THIS ITEM WILL NOT  ---*
*---     BE PROCESSED.  TO AVOID REPETITIVE GETMAIN/FREEMAIN       ---*
*---     CALLS, WE'LL USE A SERIES OF 'QUICKCELLS' TO TRY AND      ---*
*---     HASTEN, AND EASE, THE STORAGE MANAGEMENT HEADACHES.  THE  ---*
*---     STUFF WE SAVE WILL BE IN THE FORM OF A SINGLY-LINKED      ---*
*---     LIST, WITH THE 'REAL' HEADER AS THE FIRST ITEM IN THE     ---*
*---     LIST, FOLLOWED BY THE ALIAS HEADERS.                      ---*
*---------------------------------------------------------------------*
         CNOP  0,4
         BAL   R1,BLDPOOL          BRANCH AROUND PARM LIST
         DC    F'100'
         DC    F'100'
         DC    F'256'
         DC    AL1(15)
         DC    AL1(20)
         DC    CL20'HEADERS AND ALIASES'
BLDPOOL  DS    0H
         CALL  CELLBLD
         ST    R0,COUNT            SAVE THE 'TOKEN' VALUE
         EJECT
*---------------------------------------------------------------------*
*---     HERE'S THE MEAT OF THE PROCESSING. THE BASIC PROCESS IS   ---*
*---           THIS:                                               ---*
*---                                                               ---*
*---     1. USING THE CONTROL INFORMATION WE WERE GIVEN AND THE    ---*
*---        INFORMATION WE'VE DEVELOPED, READ THE NONVSAM DATASET  ---*
*---        UNTIL WE FIND A HEADER WE SHOULD PROCESS.  DURING THE  ---*
*---        SEARCH, ALSO LOCATE THE 'SIZE' RECORDS AND LOAD THE    ---*
*---        SIZE VALUE INTO A REGISTER FOR LATER REFERENCE.        ---*
*---                                                               ---*
*---        WHEN WE FIND AN ITEM THAT IS TO BE PROCESSED, WE       ---*
*---        COMPARE THE 'SIZE' VALUE WITH THE MAXIMUM RECORD SIZE  ---*
*---        OF THE OUTPUT CLUSTER.  IF THE ITEM TO BE IMPORTED     ---*
*---        WILL FIT, WE GO AHEAD AND DO THE IMPORT.  IF NOT, WE   ---*
*---        GENERATE AN ERROR MESSAGE, GIVING THE REQUIRED SIZE,   ---*
*---        AND IGNORE THE ITEM WE JUST FOUND.                     ---*
*---------------------------------------------------------------------*
MEMBERS  DS    0H
*---------------------------------------------------------------------*
*---     FIRST, LOAD ALL THE HEADER AND ALIAS RECORDS.             ---*
*---------------------------------------------------------------------*
         L     R1,NDCBA            LOAD NONVSAM DCB ADDRESS
         GET   (1)                 READ A RECORD
         ST    R1,IMPREC           SAVE THE RECORD POINTER
GETD     DS    0H
         L     R1,IMPREC           SAVE THE RECORD POINTER
         LTR   R1,R1               IS THERE A RECORD PRESENT ??
         BZ    ENDITALL            NOPE; ALL DONE
         CLC   4(4,R1),=CL4'SIZE'  SIZE RECORD ??
         BNE   GET1                NOPE ---
         MVC   VS1LEN3,8(R1)       YES; SAVE FOR LATER REFERENCE
         B     MEMBERS             AND KEEP SEARCHING ---
GET1     DS    0H
         LA    R7,4(,R1)           POINT TO THE DATA AREA
         LH    R8,0(,R1)           LOAD THE RECORD LENGTH
         SH    R8,=H'4'            ACCOUNT FOR RDW
         CLI   0(R7),#RTHDR        IS THIS A HEADER RECORD ??
         BNE   GET4                GO DO CHECK & STUFF
         USING REC,R7              BASE THE RECORD DSECT
         #IF   RSRALIAS,ON,GET1A   DIFFERENT TREATMENT FOR ALIASES
         L     R2,VS1BUF3          LOAD VSAM BUFFER POINTER
         LR    R3,R8               COPY RECORD LENGTH
         ST    R3,VS1LEN3          SAVE LENGTH FOR LATER
         LR    R14,R7              COPY RECORD POINTER
         LR    R15,R8              AND LENGTH
         MVCL  R2,R14              COPY TO VS1BUF3
         B     MEMBERS             AND GO FOR ANOTHER RECORD
         DROP  R7                  UN-BASE THE RECORD DSECT
GET1A    DS    0H
         L     R0,COUNT            LOAD THE TOKEN VALUE
         CALL  CELLGET
         XC    0(8,R1),0(R1)       CLEAR THE CELL HEADER AREA
         ST    R8,4(,R1)           SAVE THE RECORD LENGTH
         BCTR  R8,R0               DECREMENT LENGTH BY ONE
         EX    R8,COPYHDR          COPY HEADER INTO CELL
         LA    R2,CHAIN            POINT TO CHAIN START
GET2     DS    0H
         NC    0(4,R2),0(R2)       POINT TO LAST LINK ??
         BNZ   GET3                NOPE; GO FOR NEXT LINK
         ST    R1,0(,R2)           SAVE AS NEXT LINK
         B     MEMBERS             GO FOR ANOTHER HEADER RECORD
GET3     DS    0H
         L     R2,0(,R2)           BUMP DOWN THE LIST
         B     GET2                AND CONTINUE SEARCHING
COPYHDR  MVC   8(*-*,R1),0(R7)     COPY HEADER TO LIST ENTRY
*---------------------------------------------------------------------*
*---     NOW THAT WE'VE GOT ALL THE HEADERS AND ALIAS RECORDS FOR  ---*
*---     THIS ITEM, CHECK AND SEE WHETHER WE'RE GOING TO IMPORT    ---*
*---     IT.  HERE'S WHERE WE ALSO DECIDE WHETHER OR NOT WE'RE     ---*
*---     RESTORING ALIASES.                                        ---*
*---------------------------------------------------------------------*
GET4     DS    0H
         #SET  GTDATA,ON           SHOW WE HAVE A DATA RECORD
         L     R8,CHAIN            POINT TO THE FIRST LINK
*                                  WE ASSUME THAT THE FIRST RECORD
*                                  IS THE 'REAL' HEADER, FOLLOWED
*                                  BY ANY ALIASES PRESENT.
GET5     DS    0H
         LA    R1,9(,R8)           POINT TO RECORD KEY
         LA    R0,0                USE DEFAULT QUALIFIER DATA
         CALL  ARCHKNAM            GO CHECK THE NAME
         LTR   R15,R15             KEEP IT ??
         BZ    GOTONE              YES ---
         #IF   RETA,OFF,GETBAD     SKIP ALIAS CHECKING ??
         L     R8,0(,R8)           BUMP DOWN THE CHAIN
         LTR   R8,R8               ZERO POINTER ??
         BZ    GETBAD              YES; SKIP THIS ITEM
         B     GET5                CONTINUE THE LOOP
*---------------------------------------------------------------------*
*---     IF WE GET HERE, THE ITEM IS NOT SELECTED FOR PROCESSING.  ---*
*---     FREE THE QUICKCELLS CONTAINING THE HEADER AND ALIAS       ---*
*---     RECORDS AND START OVER SEARCHING FOR THE NEXT HEADER      ---*
*---     RECORD.                                                   ---*
*---------------------------------------------------------------------*
GETBAD   DS    0H
         L     R2,CHAIN            LOAD A CELL ADDRESS
         LTR   R2,R2               IS A CELL PRESENT ??
         BZ    GETBAD1             NOPE ---
         MVC   CHAIN,0(R2)         UNCHAIN IT ---
         L     R0,COUNT            LOAD TOKEN VALUE
         LR    R1,R2               COPY CELL ADDRESS
         CALL  CELLFRE             GO FREE THE CELL
         B     GETBAD              AND CONTINUE 'TIL CHAIN EMPTY
GETBAD1  DS    0H
         L     R1,IMPREC           LOAD INPUT RECORD ADDRESS
         CLI   4(R1),#RTHDR        WAS IT A HEADER ??
         BE    GETD                YES, CONTINUE ---
         L     R1,NDCBA            POINT TO THE DCB
         GET   (1)                 READ ANOTHER RECORD
         ST    R1,IMPREC           SAVE ITS ADDRESS
         B     GETBAD1             AND KEEP CHECKING
GOTONE   DS    0H
         EJECT
*---------------------------------------------------------------------*
*---     AT THIS POINT, THE WORD AT 'CHAIN' POINTS TO A LIST OF    ---*
*---     HEADER/ALIAS RECORDS, R7 POINTS TO THE FIRST NON-HEADER   ---*
*---     RECORD, R8 CONTAINS ITS LENGTH.                           ---*
*---------------------------------------------------------------------*
*---     NOW THE TRICKY PART; SETTING THE ITEM VERSION NUMBER      ---*
*---                                                               ---*
*---     IF THE USER SPECIFIED A VERSION NUMBER, WE DO A READ TO   ---*
*---     SEE IF THAT VERSION EXISTS. IF IT DOES, WE MUST DELETE    ---*
*---     IT BEFORE WE CONTINUE.  SINCE I'M A TRUSTING SOUL, I'LL   ---*
*---     CALL THE ARCHERAS ROUTINE TO DELETE THE DUPLICATE         ---*
*---     VERSION.                                                  ---*
*---                                                               ---*
*---     IF THE USER DIDN'T PROVIDE A VERSION, WE'LL DO A READ ON  ---*
*---     A GENERIC KEY, LOOKING FOR A PREVIOUS VERSION. WE'LL      ---*
*---     INCREMENT THE VERSION NUMBER FROM THERE AND GO.           ---*
*---------------------------------------------------------------------*
         L     @BUF3,VS1BUF3       LOAD CHAIN POINTER
         L     R9,VS1LEN3          LOAD THE RECORD LENGTH
         L     @RPL2,RPL2          POINT TO THE RPL
         L     @BUF2,VS1BUF2       LOAD BUFFER POINTER
         MVC   0(49,@BUF2),0(@BUF3) COPY THE KEY
         USING REC,@BUF2           AND REDEFINE THE DSECT
         #IF   REPL,ON,REPLACER
         #IF   VRS,OFF,NEWVERS
REPLACER DS    0H
         LA    R1,RECTT            LOAD PARAMETER POINTER VALUE
         ICM   R8,15,RECVER
         CALL  ARCHERAS            GO ERASE ANY DUPLICATE ITEM
         B     HDRX                GO WRITE THE HEADER RECORD
*---------------------------------------------------------------------*
*---     POSSIBLE NEW VERSION OF THE SAME ITEM                     ---*
*---------------------------------------------------------------------*
NEWVERS  DS    0H
         MVC   BLDLAREA(RECKLEN),0(@BUF2) COPY THE KEY
         XC    RECVER-REC(4,@BUF2),RECVER-REC(@BUF2) LATEST VERSION
         MODCB RPL=(@RPL2),                                            X
               AREALEN=(S,VS1LIM),AREA=(@BUF2),                        X
               ARG=(@BUF2),                                            X
               OPTCD=(MVE,DIR,FKS,KGE,NUP),                            X
               MF=(G,GENWK)
         GET   RPL=(@RPL2)
         LTR   R15,R15             ANYTHING FOUND ??
         BNZ   VERS1               NOPE; THIS IS VERSION 1
         CLC   1(40,@BUF2),1(@BUF3) SAME ITEM ??
         BNE   VERS1               NOPE; SET VERSION 1
         ICM   R8,15,RECVER-REC(@BUF2) INSERT THE VERSION NUMBER
         LTR   R8,R8               ZEROS ??
         BZ    VERS1               YES; THIS WILL BE VERSION 1
         BCTR  R8,R0               ONE GREATER
         STCM  R8,15,RECVER-REC(@BUF3) IN NEW HEADER RECORD
         B     HDRX                AND GO ---
VERS1    DS    0H
         MVC   RECVER,=F'-2'       STARTING VERSION NUMBER (TRUST ME)
         ICM   R8,15,RECVER        INSERT THE VERSION NUMBER
         STCM  R8,15,RECVER-REC(@BUF3) IN NEW HEADER RECORD
HDRX     DS    0H
         LR    R1,@BUF3            COPY THE RECORD ADDRESS
         LR    R0,R9               AND RECORD LENGTH
         BAL   R14,VSPUT           OUTPUT THE HEADER RECORD
         L     R15,VS1BUF1         POINT TO BUFFER 1
         MVC   0(RECKLEN,R15),0(@BUF3) COPY THE KEY VALUE
         LA    R0,RECKLEN          LOAD KEY LENGTH
         ST    R0,VS1LEN1          SAVE AS CURRENT RCD LENGTH
REBLK0   DS    0H
         L     R1,IMPREC           LOAD DATA RECORD POINTER
         LA    R3,RECKLEN+4(,R1)   POINT TO DATA START
         LH    R4,0(,R1)           LOAD RECORD LENGTH
         LA    R4,1(R4,R1)         POINT PAST LAST BYTE
         BCTR  R4,R0               BACK UP TO LAST BYTE
         L     R15,VS1BUF1         RELOAD BUFFER POINTER
         MVC   0(1,R15),4(R1)      COPY RECORD TYPE BYTE
REBLK1   DS    0H
         #ADDBLK BUFFER=1,                                             X
               RECORD=3(,R3),                                          X
               LENGTH=0(,R3),                                          X
               LAST=NO,                                                X
               RTN=VSPUT,                                              X
               ERR=SIZERR
         LA    R15,0
         ICM   R15,7,0(R3)         INSERT SEGMENT LENGTH
         LA    R3,3(R15,R3)        POINT TO NEXT SEGMENT
         CR    R3,R4               FAR ENOUGH ??
         BL    REBLK1              NOPE; CONTINUE
         L     R1,NDCBA            LOAD NONVSAM DCB ADDRESS
         GET   (1)                 READ ANOTHER RECORD
         ST    R1,IMPREC           SAVE THE RECORD POINTER
         CLI   4(R1),#RTHDR        SAME STUFF ??
         BE    LOGIT               NOPE; ALL DONE ---
         CLC   4(4,R1),=CL4'SIZE'    SAME STUFF ??
         BE    LOGIT               NOPE; ALL DONE ---
         L     R15,VS1BUF1         POINT TO CURRENT VSAM BUFFER
         CLC   4(1,R1),0(R15)      SAME ARCHIVER RCD TYPE ??
         BE    REBLK0              YES; CONTINUE ---
         #ADDBLK BUFFER=1,RTN=VSPUT,LAST=YES
         L     R15,VS1BUF1         RELOAD BUFFER POINTER
         L     R1,IMPREC           POINT TO INPUT RECORD
         MVC   0(1,R15),4(R1)      COPY NEW RECORD TYPE
         MVC   RECSEQ#-REC(4,R15),=F'1' RESET SEQUENCE NUMBER
         B     REBLK0              AND CONTINUE ---
*---------------------------------------------------------------------*
*---     COME HERE IF THE CURRENT RECORD IS TOO LARGE TO STORE IN  ---*
*---     THE ARCHIVE CLUSTER. FORMAT A MESSAGE, WITH ERROR         ---*
*---     INDICATOR, AND SKIP THE REMAINDER OF THIS ITEM.  THE      ---*
*---     HEADER RECORD IS PRESENT BUT WHETHER THERE ARE NOTE       ---*
*---     AND/OR DATA RECORDS IS QUESTIONABLE.  WE'LL ALLOW THE     ---*
*---     HEADER AND ANY OTHER RECORDS ALREADY STORED TO REMAIN     ---*
*---     BUT WILL SUPPRESS ANY PROCESSING OF ALIASES. WE'LL ALSO   ---*
*---     IGNORE THE REMAINDER OF THE ITEM.                         ---*
*---------------------------------------------------------------------*
         SPACE 3
SIZERR   DS    0H
         #FORMAT 0(,R6),,BADSIZE
         #PUT  LINE                OUTPUT THE ERROR MESSAGE
         L     R1,VS1LEN3          LOAD ORIGINAL CLUSTER SIZE
         CVD   R1,DWORK            CONVERT SIZE TO DECIMAL
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    MAKE A FOREST
         MVC   LINE,SIZMSG         MOVE IN THE ERROR MESSAGE
         ED    LINE+5(16),DWORK    INSERT THE VALUE
         #PUT  LINE
         #SET  GTDATA,OFF          TURN OFF THE 'DATA RECORD' FLAG
SIZSKIP  DS    0H
         L     R1,NDCBA            POINT TO THE DCB
         GET   (1)                 READ A RECORD
         ST    R1,IMPREC           SAVE ITS ADDRESS
         CLI   4(R1),#RTHDR        AT A HEADER RECORD ??
         BE    NOALIAS             YES; SCOOT ---
         B     SIZSKIP             NOPE; READ THE NEXT RECORD
SIZMSG   DC    CL133' '
         ORG   SIZMSG+5
         DC    X'40202020202020202020202020202020'
         DC    C' BYTES PER RECORD REQUIRED.'
         ORG
BADSIZE  DC    AL1(BADSZE-BADSZ)
BADSZ    DC    C' VSAM CLUSTER RECORDSIZE TOO SMALL TO IMPORT.'
BADSZE   EQU   *
         EJECT
*---------------------------------------------------------------------*
*---     DATA RECORDS ARE ALL STORED.  FORMAT THE 'IMPORT          ---*
*---     COMPLETE' MESSAGE AND PRINT IT. THEN STORE EACH ALIAS     ---*
*---     RECORD, AS NEEDED OR DIRECTED BY THE USER, AND FORMAT A   ---*
*---     MESSAGE DENOTING THIS ACTION.  IF AN ALIAS RECORD TURNS   ---*
*---     OUT TO BE A DUPLICATE OF ANOTHER ALIAS, INCREMENT THE     ---*
*---     VERSION NUMBER AND KEEP TRYING UNTIL SUCCESSFUL.  THE     ---*
*---     MESSAGE FORMATTED WILL CONTAIN THE VERSION NUMBER AS      ---*
*---     STORED.                                                   ---*
*---------------------------------------------------------------------*
LOGIT    DS    0H
         #ADDBLK BUFFER=1,RTN=VSPUT,LAST=YES
         L     @BUF3,VS1BUF3       LOAD HEADER POINTER
         LTR   @BUF3,@BUF3         ANYTHING TO LOG ??
         BZ    ENDITALL            NOPE ---
         STCM  R8,15,RECVER+8-REC(@BUF3) SAVE THE NEW VERSION NUMBER
         #FORMAT 0(@BUF3),,IMPORTED
         #PUT  LINE
         L     R15,MCNT            LOAD MEMBER COUNT
         LA    R15,1(,R15)
         ST    R15,MCNT
         #IF   RETA,OFF,NOALIAS    NOT RESTORING ALIASES ??
DOALIAS  DS    0H
         L     @BUF3,CHAIN         LOAD ALIAS-LINK POINTER
         LTR   @BUF3,@BUF3         ANY ALIAS RECORD LEFT ??
         BZ    NOALIAS             NOPE; ALL DONE
         STCM  R8,15,RECAVER+8-REC(@BUF3) SAVE NEW VERSION NUMBER
PUTA1    DS    0H
         LA    R1,8(@BUF3)         POINT TO THE RECORD
         L     R0,4(,@BUF3)        LOAD RECORD LENGTH
         BAL   R14,VSPUT           GO 'PUT' THE RECORD
         LTR   R15,R15             'PUT' OK ??
         BZ    PUTA2               YES ---
         ICM   R15,15,RECVER+8-REC(@BUF3) INSERT THE VERSION NUMBER
         BCTR  R15,R0               MAKE IT ONE HIGHER
         STCM  R15,15,RECVER+8-REC(@BUF3) SAVE UPDATED VERSION
         B     PUTA1               AND TRY AGAIN
PUTA2    DS    0H
         #FORMAT 8(,@BUF3),,RESTORED
         #PUT  LINE
         L     R15,ACNT            LOAD ALIAS COUNT
         LA    R15,1(,R15)         INCREMENT BY ONE
         ST    R15,ACNT            AND SAVE THE RESULT
         MVC   CHAIN,0(@BUF3)      UNCHAIN THIS LINK
         L     R0,COUNT            LOAD THE TOKEN VALUE
         LR    R1,@BUF3            COPY THE CELL POINTER
         CALL  CELLFRE             GO FREE THE CELL
         B     DOALIAS             AND CONTINUE ---
NOALIAS  DS    0H
         L     R2,CHAIN            LOAD A CELL ADDRESS
         LTR   R2,R2               IS A CELL PRESENT ??
         BZ    GETD                NOPE ---
         MVC   CHAIN,0(R2)         UNCHAIN IT ---
         L     R0,COUNT            LOAD THE TOKEN VALUE
         LR    R1,R2               COPY THE CELL POINTER
         CALL  CELLFRE             GO FREE THE CELL
         B     NOALIAS             AND CONTINUE 'TIL CHAIN EMPTY
ENDITALL DS    0H
         #SET  EOT,OFF             RESET MY END-OF-FILE FLAG
         #SET  GTDATA,OFF          RESET MY GOT-DATA-RECORD FLAG
         L     R0,MCNT             LOAD MEMBER COUNT
         LTR   R0,R0               ZERO COUNT ??
         BZ    END2                YES ---
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,MCMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
         L     R0,ACNT             LOAD MEMBER COUNT
         LTR   R0,R0               ZERO COUNT ??
         BZ    END2                YES ---
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,ACMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
END2     DS    0H
         L     R0,COUNT            LOAD THE TOKEN VALUE
         CALL  CELLDEL             GO DELETE THE CELL POOL
         CLC   ACB1,=F'0'          WAS ACB EVER OPENED ??
         BE    NOACB               NOPE ---
         LA    R1,VSAM1DD          POINT TO THE DDNAME
         LA    R0,4                SET 'CLOSE' REQUEST
         CALL  ARCHVSOP            CALL THE VSAM 'CLOSE' ROUTINE
NOACB    DS    0H
         BAL   R14,NVSCLOSE        GO CLOSE THE INPUT FILE
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS RC = 0
         MVI   12(R13),255
         BR    R14                 AND RETURN TO CALLER
         SPACE 3
*---------------------------------------------------------------------*
*---     SOME OF MY ERROR PROCESSING GOES HERE                     ---*
*---------------------------------------------------------------------*
ORGERR   DS    0H
         #PUT  ERR3
         #PUT  ERR6
         B     ENDITALL
ERRDEV   DS    0H
         #PUT  ERR2
         #PUT  ERR6
         B     ENDITALL
ERR2     DC    CL133'0*** ERROR *** THE EXPTPDD/EXPTPDSN IS INVALID. ITX
               MUST BE ON A TAPE OR DASD VOLUME.'
ERR3     DC    CL133'0*** ERROR *** THE EXPDPDD/EXPTPDSN IS INVALID. ITX
               MUST BE A SEQUENTIAL DATASET.'
ERR6     DC    CL133'0*** ERROR *** THIS CONTROL STATEMENT WILL BE IGNOX
               RED.'
         TITLE 'OPEN NONVSAM INPUT DATASET '
OPNVI    DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
         XC    IOSAVE+4(4),IOSAVE+4 INITIAL RETURN CODE
         CLC   EXPTPDD,=CL8' '     DDNAME GIVEN ??
         BE    OPNVI4              NOPE; RETURN, CODE = 4
*---------------------------------------------------------------------*
*---     BUILD A DCB, TO START, FOR DSORG CHECKING                 ---*
*---------------------------------------------------------------------*
         GETMAIN R,LV=QSDCBL,SP=11 GRAB STORAGE FOR BPAM DCB
         ST    R1,NDCBA            AND STORE ADDRESS IN ARCHIVWA
         MVI   NDCBA,X'80'         BUILD OPEN PARM LIST
         MVC   0(QSDCBL,R1),QSDCB  COPY DCB TO DYNAMIC AREA
         USING IHADCB,R1           BASE THE DCB DSECT
         MVC   DCBDDNAM,EXPTPDD    MOVE IN THE DDNAME
         DROP  R1
*---------------------------------------------------------------------*
*---     GET THE VOLSER FROM THE UCB, STARTING FROM THE TIOT.      ---*
*---------------------------------------------------------------------*
         L     R1,TIOTA            LOAD TIOT ELEMENT POINTER
OPNVI2   DS    0H
         CLI   0(R1),0             AT TIOT END ??
         BE    OPNVI4              YES; DD STATEMENT IS MISSING
         CLC   EXPTPDD,4(R1)       IS THIS THE DD ENTRY ??
         BE    OPNVI3              YES; GO FETCH UCB ADDR
         IC    R0,0(,R1)           INSERT TIOE LENGTH
         N     R0,=F'255'          TRIM TO JUST THE LENGTH
         AR    R1,R0               BUMP TO NEXT ENTRY
         B     OPNVI2              AND CONTINUE THE SEARCH
OPNVI3   DS    0H
         DEVTYPE EXPTPDD,CALLIST
         CLI   CALLIST+2,X'20'     DASD DEVICE ??
         BE    OPNVI3A             YES
         CLI   CALLIST+2,X'80'     TAPE DEVICE ??
         BE    OPNVI3A             NOPE; INVALID DEVICE TYPE
         #PUT  NVDEVBAD            SPIT OUT THE ERROR MESSAGE
         B     OPNVI4              AND QUIT ---
OPNVI3A  DS    0H
         OPEN  (,INPUT),MF=(E,NDCBA) OPEN THE DCB
         L     R15,NDCBA           LOAD THE DCB ADDRESS
         TM    DCBOFLGS-IHADCB(R15),DCBOFOPN    DID IT OPEN ??
         BZ    OPNVI4              NOPE; RETURN, CODE = 4
         LM    R14,R12,IOSAVE      RELOAD ENTRY REGISTERS
         BR    R14                 AND RETURN TO LOCAL CALLER
OPNVI4   DS    0H
         #PUT  NVSBAD              OUTPUT AN ERROR MESSAGE
         MVC   IOSAVE+4(4),=F'4'
         LM    R14,R12,IOSAVE
         BR    R14
         SPACE 3
*---------------------------------------------------------------------*
*---     THIS IS THE EODAD EXIT CODE FOR THE EXPTP DATASET.        ---*
*---------------------------------------------------------------------*
         SPACE 3
IMPEND   DS    0H
         #SET  EOT,ON              SET THE 'END OF TAPE' BIT
         XC    IMPREC,IMPREC       SHOW NO RECORD WAS READ
         B     LOGIT               FINISH OFF ANYTHING STILL PENDING
         SPACE 3
*---------------------------------------------------------------------*
*---     THIS CHEAP AND DIRTY LITTLE DCB COMPLETION EXIT SETS THE  ---*
*---     BLKSIZE, IF THE USER HAS FORGOTTEN TO SUPPLY A BLKSIZE,   ---*
*---     EITHER ON A DD STATEMENT OR A DATASET LABEL.              ---*
*---------------------------------------------------------------------*
         SPACE 3
         DS    0F
E1       DC    X'85',AL3(E1+4)
         USING IHADCB,R1
         CLC   DCBBLKSI,=H'0'      BLKSIZE MISSING ??
         BNER  R14                 NOPE ---
         MVC   DCBBLKSI,=H'32000'  YES; INSERT A DEFAULT
         BR    R14
         DROP  R1
QSDCB    DCB   DSORG=PS,MACRF=GL,BFTEK=A,EODAD=IMPEND,RECFM=VBS,       X
               LRECL=32760,EXLST=E1
QSDCBL   EQU   *-QSDCB
         TITLE 'QSAM CLOSE ROUTINE'
*---------------------------------------------------------------------*
*---     THIS LITTLE ROUTINE CLOSES THE NONVSAM DATASET, RELEASES  ---*
*---     ALL BUFFER POOLS, RESETS POINTER VALUES, RELEASE THE      ---*
*---     COMPRESSION WORK AREA AND CLEANS UP THE NONVSAM I/O IN    ---*
*---     GENERAL, INCLUDING THE RESETING OF ANY FLAG BITS.         ---*
*---------------------------------------------------------------------*
         SPACE 3
NVSCLOSE DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
         L     R2,NDCBA            LOAD PRIMARY DCB ADDRESS
         LA    R2,0(,R2)           PURIFY THE ADDRESS
         LTR   R2,R2               ZERO ??
         BZ    NVC1                YES; NO DCB HERE ---
         CLOSE MF=(E,NDCBA)        CLOSE THE DCB
         #FREE (2)                 RELEASE BUFFER POOL, IF ANY
         FREEMAIN R,LV=QSDCBL,SP=11,A=(2)
NVC1     DS    0H
         XC    NDCBA,NDCBA         AND RESET THE POINTER FIELD
         LM    R14,R12,IOSAVE      RESTORE THE REGISTERS
         BR    R14                 AND RETURN TO CALLER
         TITLE 'VSAM I/O OUTPUT '
*---------------------------------------------------------------------*
*---     THIS LITTLE LOCAL SUBROUTINE DOES ALL THE VSAM WRITING    ---*
*---     FOR THE IMPORT FUNCTION, WITH THE EXCEPTION OF THE        ---*
*---     ERASURE OF A DUPLICATE ITEM.  THE BASIC ASSUMPTIONS ARE   ---*
*---     THAT THE VS1BUF1 AREA IS THE RECORD TO BE WRITTEN AND     ---*
*---     ITS LENGTH IS ACCURATELY REPORTED IN THE VS1LEN1 FIELD.   ---*
*---------------------------------------------------------------------*
VSPUT    DS    0H
         STM   R14,R12,IOSAVE      SAVE ENTRY REGISTERS
         L     R4,RPL1             LOAD RPL ADDRESS
         LR    R5,R1               LOAD BUFFER ADDRESS
         LR    R6,R0               LOAD RECORD LENGTH
         MODCB RPL=(4),            RPL ADDRESS                         X
               OPTCD=(DIR,FKS,NUP,MVE,KEQ), OPTION CODES ---           X
               ARG=(5),            KEY ADDRESS                         X
               AREA=(5),           BUFFER ADDRESS                      X
               RECLEN=(6),         RECORD LENGTH                       X
               MF=(G,GENWK)
         PUT   RPL=(4)             OUTPUT THE VSAM RECORD
         LTR   R15,R15             ALL OK ??
         BZ    VSPUT5              YES ---
         SHOWCB RPL=(4),                                               X
               FIELDS=FDBK,        FETCH THE RPL FEEDBACK FIELD        X
               AREA=(S,DWORK),                                         X
               LENGTH=4,                                               X
               MF=(G,GENWK)        GET FEEDBACK FIELD
         CLI   DWORK+3,8           DUPLICATE KEY ??
         BNE   VSPUTDIE            NOPE ---
         LA    R15,4               LOAD THE RETURN CODE
VSPUT5   DS    0H
         L     R14,IOSAVE          RELOAD R14
         LM    R0,R12,IOSAVE+8     RESTORE OTHER REGS
         BR    R14                 AND RETURN TO CALLER
VSPUTDIE DS    0H
         EX    R0,*
NVSBAD   DC    CL133' *** ERROR *** UNABLE TO OPEN EXPTPDD/EXPTPDSN. CHX
               ECK THE DD STATEMENT OR PARAMETER.'
NVDEVBAD DC    CL133' *** ERROR *** INVALID DEVICE FOR EXPTPDD/EXPTPDSNX
               . MUST BE TAPE OR DASD.'
MCMSG    DC    CL133' '
         ORG   MCMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    C' TOTAL MEMBER(S) PROCESSED.'
         ORG
ACMSG    DC    CL133' '
         ORG   ACMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    C' ALIASES RESTORED. '
         ORG
         LTORG
IMPORTED DC    AL1(UNLMSGE-UNLMSG)
UNLMSG   DC    C' SUCCESSFULLY IMPORTED.'
UNLMSGE  EQU   *
RESTORED DC    AL1(RSLMSGE-RSLMSG)
RSLMSG   DC    C' ALIAS RESTORED (MAY BE NEW VERSION).'
RSLMSGE  EQU   *
         DCBD  DSORG=(PS,PO)
         COPY  #RECS
         COPY  ##ARCHWK
         END
