CELM     TITLE 'CELLMAN --- THE POOR MAN''S CELL POOL MANAGER '
*---------------------------------------------------------------------*
*---                                                               ---*
*---     THIS ROUTINE WAS DEVELOPED TO PROVIDE MINIMAL CELL-POOL   ---*
*---     MANAGER FUNCTIONS TO THOSE PROGRAMMER LABORING UNDER      ---*
*---     BACK-LEVEL MVS SYSTEMS THAT LACK THE CPOOL MACRO AND      ---*
*---     RELATED FUNCTIONS IN ALL THEIR GLORY.  UNFORTUNATELY,     ---*
*---     THIS IMPLEMENTATION DOES HAVE SOME DRAWBACKS.  FOR        ---*
*---     EXAMPLE, THERE IS NO MACRO TO BUILD PARM LISTS AND        ---*
*---     INVOKE THESE FUNCTIONS.  DO THAT THE HARD WAY, FOLKS.     ---*
*---                                                               ---*
*---     FIRST, SOME BASIC BACKGROUND.  THE MAIN PURPOSE BEHIND    ---*
*---     THE USE OF 'CELL POOLS' IS TO REDUCE THE NUMBER OF CALLS  ---*
*---     TO GETMAIN/FREEMAIN BY PROVIDING A 'QUICKCELL' POOL FOR   ---*
*---     REPETITIVE GETS AND FREES OF AREAS OF THE SAME SIZE.      ---*
*---     THOSE USERS WHO ARE FAMILIAR WITH LIST PROCESSING, WITH   ---*
*---     LINKS AND NODES IN ALL THEIR GLORY(?) HAVE PROBABLY       ---*
*---     LEARNED BY NOW THAT GETMAIN/FREEMAIN ARE EXPENSIVE IN     ---*
*---     TERMS OF PERFORMANCE.  MANY HAVE ALREADY DEVELOPED 'RYO'  ---*
*---     STORAGE MANAGERS BECAUSE OF THIS EXPENSE.  BY USING A     ---*
*---     'QUICKCELL' TYPE MECHANISM, YOU CAN VASTLY REDUCE THE     ---*
*---     OVERHEAD IN CALLING GETMAIN/FREEMAIN, EITHER VIA BRANCH   ---*
*---     ENTRY OR VIA THE SVC MECHANISM.  NOTE THAT I SAID         ---*
*---     REDUCE, NOT ELIMINATE.  SIMPLE CALLS TO THIS ROUTINE ARE  ---*
*---     VASTLY FASTER THAN DOING THE SVC'S AND, WITHIN LIMITS,    ---*
*---     WILL PROVIDE ALL THE NEEDED FUNCTIONS.                    ---*
*---                                                               ---*
*---     ANY SPECIAL PARAMETERS RETURNED BY THE CELLMAN ROUTINES   ---*
*---     ARE EXPLAINED IN THE DETAILED DESCRIPTION OF EACH         ---*
*---     FUNCTION.                                                 ---*
*---                                                               ---*
*---     FUNCTIONS:                                                ---*
*---        CELLBLD: INITIALIZE A CELL POOL.                       ---*
*---        CELLGET: ALLOCATE A CELL AND RETURN ITS ADDRESS        ---*
*---        CELLFRE: RETURN A CELL TO THE POOL                     ---*
*---        CELLDEL: RELEASE AN ENTIRE CELL POOL                   ---*
*---                                                               ---*
*---     ALL ROUTINES USE STANDARD LINKAGE CONVENTIONS AND EXPECT  ---*
*---     R13 TO POINT TO A 18-WORD SAVE AREA, R14 TO CONTAIN THE   ---*
*---     RETURN ADDRESS AND R15 TO CONTAIN THE ENTRY POINT         ---*
*---     ADDRESS.                                                  ---*
*---                                                               ---*
*---     ALSO, ALL ROUTINES ARE REENTRANT, REUSABLE AND            ---*
*---     REFRESHABLE.  FOR THOSE WHO ARE ABLE, I'VE TRIED TO KEEP  ---*
*---     THE CODE SUCH THAT IT WILL RUN EITHER ABOVE OR BELOW THE  ---*
*---     16M LINE.  NO QUARANTEES HERE, THOUGH.                    ---*
*---------------------------------------------------------------------*
         TITLE 'CELLBLD --- BUILD THE INITIAL CELL POOL '
*---------------------------------------------------------------------*
*---     DETAIL DESCRIPTION OF CELLBLD:                            ---*
*---                                                               ---*
*---     CELLBLD WILL ALLOCATE THE PRIMARY CELL POOL AND BUILD     ---*
*---     THE NECESSARY CONTROL BLOCKS IN DYNAMIC STORAGE,          ---*
*---     RETURNING TO THE CALLER A 'TOKEN', THE ADDRESS OF THE     ---*
*---     CONTROL BLOCK THAT DESCRIBES THIS CELL POOL. THE CALLER   ---*
*---     MUST SAVE THIS VALUE AND SUPPLY IT TO THE CELL MANAGER    ---*
*---     ON ALL SUBSEQUENT CALLS FOR STORAGE FROM THIS CELL POOL.  ---*
*---     VALUES IN THIS BLOCK INCLUDE CELL SIZE, PRIMARY AND       ---*
*---     SECONDARY ALLOCATION REQUIREMENTS, SUBPOOL                ---*
*---     IDENTIFICATION, USAGE STATISTICS AND THE CELL POOL        ---*
*---     LABEL, IF ONE WAS SUPPLIED.                               ---*
*---                                                               ---*
*---     THIS ROUTINE EXPECTS R1 TO POINT TO A PARAMETER LIST OF   ---*
*---     THE FOLLOWING FORM:                                       ---*
*---                                                               ---*
*---     DS    F   THE NUMBER OF CELLS TO START WITH               ---*
*---     DS    F   THE NUMBER OF CELLS TO ADD EACH TIME WE RUN     ---*
*---               OUT                                             ---*
*---     DS    F   THE SIZE OF EACH CELL (AT LEAST 8 BYTES)        ---*
*---     DS    XL1 THE SUBPOOL NUMBER TO ALLOCATE FROM             ---*
*---     DS    XL1 THE LENGTH, IN BYTES, OF THE CELL POOL LABEL    ---*
*---     DC    C   THE CHARACTER STRING USED TO LABEL THE CELL     ---*
*---               POOL IN STORAGE. USEFUL FOR DUMP CHECKING.      ---*
*---               (MAX SIZE OF 64 BYTES; PADDED TO D'WORD BY      ---*
*---               CELLBLD, WITH BLANKS.)                          ---*
*---                                                               ---*
*---     THE CELL POOL LABEL IS OPTIONAL BUT HIGHLY RECOMMENDED.   ---*
*---     IF NOT SUPPLIED, THE LENGTH BYTE IN THE PARAMETER LIST    ---*
*---     MUST BE ZERO.                                             ---*
*---                                                               ---*
*---     UPON RETURN, REGISTER ZERO WILL CONTAIN A 'TOKEN' VALUE   ---*
*---     THAT MUST BE SAVED BY THE CALLER.  THIS VALUE MUST BE     ---*
*---     PRESENT IN REGISTER ZERO ON ALL SUBSEQUENT CALLS TO       ---*
*---     CELLMAN FUNCTIONS.  IT'S THE ADDRESS OF THE CONTROL       ---*
*---     BLOCK THAT IS BUILT TO MANAGE THE CELL POOL.  A RETURN    ---*
*---     CODE IS ALSO RETURNED IN REGISTER 15.  THE RETURN CODE    ---*
*---     IS EITHER A 0, FOR SUCCESSFUL COMPLETION, A 4 IF THE      ---*
*---     PARAMETER LIST WAS FOUND TO BE INVALID, OR 8, IF NO       ---*
*---     STORAGE IS AVAILABLE TO FILL THE REQUEST. IN ALL CASES,   ---*
*---     A NON-ZERO RETURN CODE SIGNIFIES THAT NO STORAGE WAS      ---*
*---     ALLOCATED AND NO TOKEN VALUE IS RETURNED TO THE CALLER.   ---*
*---------------------------------------------------------------------*
         EJECT
CELLMAN  CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         ENTRY CELLBLD
CELLBLD  DS    0D
         B     12(,R15)            BRANCH AROUND
         DC    AL1(7),CL7'CELLBLD' ENTRY IDENTIFIER
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R11,R1              SAVE PARM LIST POINTER
         USING PARMLST,R11         AND BASE ITS DSECT
         LR    R12,R15             COPY THE ENTRY ADDRESS
         USING CELLBLD,R12         AND DEFINE THE BASE REGISTER
         GETMAIN R,LV=72           GRAB STORAGE FOR WORK/SAVE AREA
         ST    R1,8(,R13)          SAVE FORWARD POINTER
         ST    R13,4(,R1)          AND BACK POINTER
         LR    R13,R1              AND BUMP DOWN THE SAVE-AREA CHAIN
         LA    R0,CPPBSIZE         LOAD CONTROL BLOCK SIZE
         LA    R2,0                CLEAR A WORK REGISTER
         IC    R2,LBLSIZE          LOAD THE LABEL SIZE
         LA    R2,7(,R2)           BUMP PAST NEXT DBLWD
         N     R2,BLD4             ROUND TO DBLWD
         AR    R0,R2               ADD TO BASIC SIZE
         ICM   R0,8,PSPNUM         INSERT THE SUBPOOL IDENTIFIER
         GETMAIN R,LV=(0)          GRAB STORAGE FOR CPPB
         LA    R10,0(R1,R2)        POINT TO BASIC SECTION
         USING CPPB,R10            AND BASE ITS DSECT
         STC   R2,CPPBPRFX         STORE CPPB PREFIX LENGTH
         MVC   CPPBCSIZ,CSIZE      COPY CELL SIZE
         MVC   CPPBPRI,PSIZE       PRIMARY CELL COUNT
         MVC   CPPBSEC,SSIZE       SECONDARY CELL COUNT
         MVC   CPPBSP,PSPNUM       SUBPOOL NUMBER
         MVC   CPPBID,=CL4'CELL'   CPPB IDENTIFIER
         LTR   R2,R2               WAS A LABEL AREA SUPPLIED ??
         BZ    BLD1                NOPE ---
         MVI   0(R1),C' '          SEED IN A BLANK
         BCTR  R2,R0               DECREMENT LABEL LENGTH VALUE
         BCTR  R2,R0               DECREMENT LABEL LENGTH VALUE
         EX    R2,BLD3             AND CLEAR THE PREFIX
         IC    R2,LBLSIZE          RELOAD LABEL SIZE
         BCTR  R2,R0               RELOAD ACTUAL LABEL SIZE
         EX    R2,BLD1-6           AND COPY THE LABEL VALUE
         B     BLD1                SKIP AROUND THE 'EX'ED INSTRUCTION
         MVC   0(*-*,R1),PLBL      DO NOT MOVE THIS INSTRUCTION !!!
         DROP  R11
BLD1     DS    0H
         L     R2,CPPBPRI          LOAD PRIMARY CELL COUNT
         SRDA  R2,32               SHIFT OVER ---
         L     R4,CPPBCSIZ         LOAD CELL SIZE
         MR    R2,R4               TIMES CELL SIZE
         AL    R3,=F'16'           ADD CONTROL INFO
         ICM   R3,8,CPPBSP         ADD SUBPOOL NUMBER
         GETMAIN R,LV=(3)          GRAB THE PRIMARY CELLPOOL AREA
         USING CELLBLOK,R1
         XC    0(16,R1),0(R1)      NO LINK POINTER OR CTL STUFF
         ST    R1,CPPBLINK         SAVE POINTER IN CPPB
         MVC   CELLCNT,CPPBPRI     SET INITIAL FREE-CELL COUNT
         LA    R5,0(R1,R3)         POINT TO AREA END
         ST    R5,CELLLAST         STORE LAST-BYTE ADDRESS
         SR    R5,R4               BACK UP A CELL
         LA    R3,16(,R1)          POINT TO FIRST CELL
         ST    R3,CELLFREE         SET 'FIRST-FREE' POINTER
BLD2     DS    0H
         LA    R1,0(R4,R3)         POINT TO 'NEXT FREE' CELL
         ST    R1,0(,R3)           SET THE CHAIN POINTER
         MVC   4(4,R3),=CL4'FREE'  MARK THIS CELL FREE
         BXLE  R3,R4,BLD2          LOOP FOR THE WHOLE AREA
         SR    R3,R4               BACK UP ONE CELL
         XC    0(4,R3),0(R3)       NO MORE IN THE CHAIN
         DROP  R1
         L     R1,4(,R13)          LOAD BACK S.A. POINTER
         ST    R10,20(,R1)         SET THE RETURN ADDRESS
         XC    16(4,R1),16(R1)     ZERO RETURN CODE
         LR    R1,R13              COPY SAVE/WORK AREA POINTER
         L     R13,4(,R13)         LOAD BACK POINTER
         FREEMAIN R,LV=72,A=(1)    RELEASE THAT AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 AND RETURN TO CALLER
BLD3     MVC   1(*-*,R1),0(R1)
BLD4     DC    F'-8'
         LTORG
         DROP  R10,R12             DISCARD THOSE BASE REGS.
         TITLE 'CELLGET --- GRAB A CELL AND RETURN IT''S ADDRESS'
*---------------------------------------------------------------------*
*---     THIS ENTRY POINT WILL GRAB A STORAGE CELL AND RETURN ITS  ---*
*---     ADDRESS TO THE CALLER. IF NECESSARY, A SECONDARY CELL     ---*
*---     BLOCK WILL BE ALLOCATED AND ADDED TO THE CHAIN OF         ---*
*---     ALLOCATED STORAGE ROOTED AT CPPBLINK AND A SECONDARY      ---*
*---     CELL BLOCK WILL BE INITIALIZED.  THE CELL WILL BE         ---*
*---     RETURNED BY PLACING ITS ADDRESS IN R1 BEFORE RETURNING.   ---*
*---     UPON ENTRY, R0 MUST CONTAIN THE TOKEN VALUE RETURNED      ---*
*---     FROM CELLBLD.  IF NOT, THE RESULTS MAY BE VERY            ---*
*---     SURPRISING, TO SAY THE LEAST.  NO OTHER PARAMETERS ARE    ---*
*---     REQUIRED.                                                 ---*
*---------------------------------------------------------------------*
         ENTRY CELLGET
CELLGET  DS    0D
         B     12(,R15)            BRANCH AROUND
         DC    AL1(7),CL7'CELLGET' ENTRY I.D.
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             COPY THE ENTRY ADDRESS
         USING CELLGET,R12         AND DEFINE THE BASE REGISTER
         LR    R2,R0               COPY CPPB ADDRESS
         ST    R13,4(,R2)          STORE BACK POINTER
         ST    R2,8(,R13)          AND FORWARD POINTER
         LR    R13,R2              NEW SAVE/AREA PTR
         USING CPPB,R13            AND BASE ITS DSECT
         L     R1,CPPBLINK         LOAD POINTER TO PRIMARY AREA
         USING CELLBLOK,R1
         L     R8,CELLLAST
         SR    R8,R1
         CLC   CELLFREE,=F'0'      ANY FREE CELLS ??
         BE    GET2                NOPE; START CHECKING SECONDARIES
GET1     DS    0H
         L     R2,CELLFREE         POINT TO THE FIRST FREE CELL
         MVC   CELLFREE,0(R2)      UNCHAIN IT ---
         L     R0,CELLCNT          LOAD FREE-CELL COUNT
         BCTR  R0,R0               DECREMENT BY ONE
         ST    R0,CELLCNT          SAVE UPDATED COUNT
         B     GET3                AND RETURN TO CALLER
GET2     DS    0H
         CLC   CELLLINK,=F'0'      ANOTHER CELL BLOCK READY ??
         BE    GET4                NOPE; GO ALLOCATE A SECONDARY
         L     R1,CELLLINK         POINT TO IT
         L     R8,CELLLAST
         SR    R8,R1
         CLC   CELLFREE,=F'0'      ANY FREE ONES HERE ??
         BE    GET2                NOPE; KEEP SEARCHING
         L     R2,CELLFREE         POINT TO A FREE CELL
         MVC   CELLFREE,0(R2)      UNCHAIN IT
         L     R0,CELLCNT          LOAD CELL COUNT
         BCTR  R0,R0               DECREMENT BY ONE
         ST    R0,CELLCNT          SAVE UPDATED COUNT
         DROP  R1
GET3     DS    0H
         L     R1,4(,R13)          LOAD BACK S.A. POINTER
         ST    R2,24(,R1)          SAVE IN R1 AREA
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS A ZERO R.C.
         BR    R14                 RETURN TO CALLER
         SPACE 3
*---------------------------------------------------------------------*
*---     ALL AVAILABLE CELLS ARE CURRENTLY ALLOCATED, SO IT'S      ---*
*---     TIME TO ALLOCATE A SECONDARY CELL BLOCK, FORMAT IT AND    ---*
*---     PASS THE FIRST CELL BACK TO THE CALLER.  THE FORMATTING   ---*
*---     OPERATION IS ESSENTIALLY THE SAME AS IN THE CELLBLD       ---*
*---     PROCESS.                                                  ---*
*---------------------------------------------------------------------*
         SPACE 3
GET4     DS    0H
         L     R2,CPPBSEC          LOAD SECONDARY CELL COUNT
         SRDA  R2,32               SHIFT OVER ---
         M     R2,CPPBCSIZ         TIMES CELL SIZE
         AL    R3,=F'16'           ADD CONTROL INFO
         ICM   R3,8,CPPBSP         ADD SUBPOOL NUMBER
         GETMAIN R,LV=(3)          GRAB THE PRIMARY CELLPOOL AREA
         USING CELLBLOK,R1
         XC    0(16,R1),0(R1)      NO LINK POINTER OR CTL STUFF
         MVC   CELLCNT,CPPBSEC     SET INITIAL FREE-CELL COUNT
         L     R4,CPPBCSIZ         LOAD CELL SIZE
         LA    R5,0(R1,R3)         POINT TO AREA END
         ST    R5,CELLLAST         STORE LAST-BYTE ADDRESS
         SR    R5,R4               BACK UP A CELL
         LA    R3,CELL1            POINT TO FIRST CELL
         ST    R3,CELLFREE         SET 'FIRST-FREE' POINTER
GET5     DS    0H
         LA    R2,0(R4,R3)         POINT TO 'NEXT FREE' CELL
         ST    R2,0(,R3)           SET THE CHAIN POINTER
         MVC   4(4,R3),=CL4'FREE'  MARK THIS CELL FREE
         BXLE  R3,R4,GET5          LOOP FOR THE WHOLE AREA
         SR    R3,R4               BACK UP ONE CELL
         XC    0(4,R3),0(R3)       NO MORE IN THE CHAIN
         DROP  R1
         LA    R2,CPPBLINK         POINT TO CHAIN ROOT
GET6     DS    0H
         L     R2,0(,R2)
         CLC   0(4,R2),=F'0'       AT CHAIN END ??
         BNE   GET6                NOPE; KEEP SEARCHING
         ST    R1,0(,R2)           ADD THIS BLOCK TO CHAIN
         SR    R5,R1               COMPUTE CELL BLOCK LENGTH
         B     GET1                GO RESTART THE SEARCH
GET7     DS    0F
         DC    X'7FFFFFFF'
         LTORG
         DROP  R12,R13
         TITLE 'CELLFRE --- RETURN A CELL TO THE AVAILABLE POOL'
*---------------------------------------------------------------------*
*---     THIS ENTRY POINT WILL FREE A STORAGE CELL WHOSE ADDRESS   ---*
*---     IS PASSED BY THE CALLER IN REGISTER 1. IF IT'S THE LAST   ---*
*---     CELL TO BE RETURNED TO A SECONDARY BLOCK, THAT BLOCK      ---*
*---     WILL BE UNCHAINED AND FREED AS WELL.  (THE PRIMARY BLOCK  ---*
*---     IS RELEASE ONLY BY THE CELLDEL PROCESSOR) THE CELL WILL   ---*
*---     BE RETURNED BY PLACING ITS ADDRESS IN CELLFREE AND THE    ---*
*---     CONTENTS OF CELLFREE WILL BE PLACED IN THE FIRST WORD OF  ---*
*---     THE CELL, WITH THE VALUE C'FREE' IN THE SECOND WORD.      ---*
*---     UPON ENTRY, R0 MUST CONTAIN THE TOKEN VALUE RETURNED      ---*
*---     FROM CELLBLD.  IF NOT, THE RESULTS MAY BE VERY            ---*
*---     SURPRISING, TO SAY THE LEAST.  NO OTHER PARAMETERS ARE    ---*
*---     REQUIRED.                                                 ---*
*---------------------------------------------------------------------*
         ENTRY CELLFRE
CELLFRE  DS    0D
         B     12(,R15)            BRANCH AROUND
         DC    AL1(7),CL7'CELLFRE' ENTRY I.D.
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             COPY THE ENTRY ADDRESS
         USING CELLFRE,R12         AND DEFINE THE BASE REGISTER
         LR    R2,R0               COPY CPPB ADDRESS
         ST    R13,4(,R2)          STORE BACK POINTER
         ST    R2,8(,R13)          AND FORWARD POINTER
         LR    R13,R2              NEW SAVE/AREA PTR
         USING CPPB,R13            AND BASE ITS DSECT
         L     R2,CPPBLINK         POINT TO PRIMARY CELL BLOCK
         USING CELLBLOK,R2         AND BASE ITS DSECT
FREE1    DS    0H
         CR    R1,R2               ARE WE BEFORE THIS BLOCK ??
         BL    FREE2               YES ---
         C     R1,CELLLAST         AFTER THIS BLOCK ??
         BL    FREE3               NOPE; IN THIS BLOCK
FREE2    DS    0H
         L     R2,CELLLINK         POINT TO NEXT CELL BLOCK
         B     FREE1               AND LOOP, SEARCHINGLY
FREE3    DS    0H
         MVC   0(4,R1),CELLFREE    COPY FREE-CELL POINTER
         ST    R1,CELLFREE         SAVE ITS ADDRESS
         L     R4,4(,R13)          LOAD BACK S.A. POINTER
         XC    24(4,R4),24(R4)     SET POINTER TO ZERO
         L     R3,CELLCNT          LOAD FREE-CELL COUNT
         LA    R3,1(,R3)           ADD ONE
         ST    R3,CELLCNT          SAVE UPDATED VALUE
         C     R2,CPPBLINK         ARE WE IN THE PRIMARY ??
         BE    FREE6               YES; ALL DONE HERE
         CLC   CELLCNT,CPPBSEC     ALL CELLS FREE IN THIS BLOCK ??
         BNE   FREE6               NOPE ---
         LR    R1,R2               COPY THE BLOCK'S ADDRESS
         L     R2,CPPBLINK         LOAD PRIMARY BLOCK POINTER
FREE4    DS    0H
         C     R1,CELLLINK         IS THIS THE PREDECESSOR BLOCK ??
         BE    FREE5               YES ---
         L     R2,CELLLINK         NOPE; TRY THE NEXT BLOCK
         LTR   R2,R2               ZERO POINTER ??
         BZ    FREE6               YES; CELL NOT FROM THIS POOL
         B     FREE4
FREE5    DS    0H
         MVC   CELLLINK,CELLLINK-CELLBLOK(R1) UNCHAIN THIS ONE
         L     R2,CPPBSEC          LOAD SECONDARY CELL COUNT
         SRDA  R2,32               SHIFT FOR MULTIPLY
         M     R2,CPPBCSIZ         TIMES CELL SIZE
         LA    R0,16(,R3)          ADD CTL AREA SIZE
         ICM   R0,8,CPPBSP         INSERT SUBPOOL NUMBER
         FREEMAIN R,LV=(0),A=(1)   RELEASE THE STORAGE
FREE6    DS    0H
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS A ZERO R.C.
         BR    R14                 RETURN TO CALLER
         LTORG
         DROP  R2,R12,R13
         TITLE 'CELLDEL --- DELETE THE CELL POOL AND ITS CNTRL BLOCKS'
*---------------------------------------------------------------------*
*---     THIS ENTRY POINT WILL DELETE THE ENTIRE CELL POOL AND     ---*
*---     ALL THE RELATED CONTROL BLOCKS.  THE ONLY PARAMETER IS    ---*
*---     THE TOKEN VALUE, FROM CELLBLD, IN REGISTER ZERO.          ---*
*---------------------------------------------------------------------*
         ENTRY CELLDEL
CELLDEL  DS    0D
         B     12(,R15)            BRANCH AROUND
         DC    AL1(7),CL7'CELLDEL' ENTRY I.D.
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             COPY THE ENTRY ADDRESS
         USING CELLDEL,R12         AND DEFINE THE BASE REGISTER
         LR    R2,R0               COPY CPPB ADDRESS
         ST    R13,4(,R2)          STORE BACK POINTER
         ST    R2,8(,R13)          AND FORWARD POINTER
         LR    R13,R2              NEW SAVE/AREA PTR
         USING CPPB,R13            AND BASE ITS DSECT
         L     R2,CPPBLINK         POINT TO PRIMARY CELL BLOCK
         USING CELLBLOK,R2         AND BASE ITS DSECT
DEL1     DS    0H
         L     R1,CELLLINK         IS THERE ANOTHER LINK ??
         LTR   R1,R1
         BZ    DEL2                NOPE ---
         L     R0,CELLLAST-CELLBLOK(,R1) LOAD CELLLAST POINTER
         SR    R0,R1               COMPUTE AREA LENGTH
         ICM   R0,8,CPPBSP         INSERT SUBPOOL NUMBER
         MVC   CELLLINK,CELLLINK-CELLBLOK(R1) UNCHAIN IT
         FREEMAIN R,LV=(0),A=(1)   RELEASE THE STORAGE
         B     DEL1                GO TRY FOR ANOTHER
DEL2     DS    0H
         LA    R1,0(,R2)           LOAD POINTER TO PRIMARY AREA
         L     R0,CELLLAST         LOAD ITS LAST-BYTE PTR
         SR    R0,R1               COMPUTE CELLBLOK LENGTH
         ICM   R0,8,CPPBSP         INSERT SUBPOOL NUMBER
         FREEMAIN R,LV=(0),A=(1)   RELEASE THE STORAGE
         LR    R2,R13              COPY CPPB ADDRESS
         LA    R0,CPPBSIZE         LOAD CPPB LENGTH
         LA    R1,0                CLEAR A WORK REGISTER
         IC    R1,CPPBPRFX         LOAD PREFIX LENGTH
         AR    R0,R1               ADD TO BASIC LENGTH
         SR    R2,R1               BACK UP THE POINTER
         LR    R1,R2               COPY THE ADDRESS
         ICM   R0,8,CPPBSP         INSERT SUBPOOL NUMBER
         L     R13,4(,R13)         LOAD BACK SAVE-AREA POINTER
         FREEMAIN R,LV=(0),A=(1)   RELEASE THE CPPB STORAGE
         LM    R14,R12,12(R13)     RESTORE ENTRY REGISTERS
         LA    R0,0                TOKEN VALUE IS NOW ZERO
         LA    R15,0               RETURN CODE IS ZERO
         BR    R14                 AND RETURN TO CALLER
         LTORG
         DROP  R13,R12,R2
         TITLE 'CPPB --- CELL POOL PARAMETER BLOCK '
*---------------------------------------------------------------------*
*---     THE CELL POOL PARAMETER BLOCK IS THE ROOT OF 'ALL EVIL'   ---*
*---     FOR THIS CELL POOL MANAGER.  NOT SHOWN IN THIS DSECT IS   ---*
*---     THE PREFIX, WHICH CONTAINS THE LABEL IF SUPPLIED.  SINCE  ---*
*---     THIS PREFIX IS OF VARIABLE LENGTH, THE ACTUAL PREFIX      ---*
*---     LENGTH, ROUNDED TO MULTIPLES OF 8, IS SAVED IN THE CPPB.  ---*
*---     MOST OTHER FIELDS ARE SELF EXPLANITORY.                   ---*
*---------------------------------------------------------------------*
CPPB     DSECT
CPPBID   DS    CL4                 IDENTIFIER ('CELL')
CPPBSAVE DS    17F                 REGISTER SAVE AREA FOR GET/FRE
CPPBCSIZ DS    F                   CELL SIZE
CPPBPRI  DS    F                   PRIMARY CELL COUNT
CPPBSEC  DS    F                   SECONDARY CELL COUNT
CPPBPRFX DS    XL1                 CPPB PREFIX LENGTH
CPPBSP   DS    XL1                 USER'S DESIGNATED SUBPOOL
         DS    XL2                 RESERVED FOR LATER USE
CPPBLINK DS    A                   ADDRESS OF PRIMARY CELL BLOCK
CPPBSIZE EQU   *-CPPB              CPPB SIZE FOR GETMAINS
         TITLE 'PARMLIST --- PARM LIST FOR CELLBLD '
*---------------------------------------------------------------------*
*---     THE CELLBLD PARAMETER LIST IS DESCRIBED IN THE PROSE.     ---*
*---------------------------------------------------------------------*
PARMLST  DSECT
PSIZE    DS    F   THE NUMBER OF CELLS TO START WITH
SSIZE    DS    F   THE NUMBER OF CELLS TO ADD EACH TIME WE RUN         X
                   OUT
CSIZE    DS    F   THE SIZE OF EACH CELL (AT LEAST 8 BYTES)
PSPNUM   DS    XL1 THE SUBPOOL NUMBER TO ALLOCATE FROM
LBLSIZE  DS    XL1 THE LENGTH, IN BYTES, OF THE CELL POOL LABEL
PLBL     DS    C   THE CHARACTER STRING USED TO LABEL THE CELL         X
                   POOL IN STORAGE. USEFUL FOR DUMP CHECKING.          X
                   (MAX SIZE OF 256 BYTES; PADDED TO D'WORD BY         X
                   CELLBLD, WITH BLANKS.)
         TITLE 'CELLBLOK --- CELL POOL BLOCK HEADER FORMAT'
*---------------------------------------------------------------------*
*---     THIS INFORMATION IS PRESENT AT THE BEGINNING OF EACH      ---*
*---     CELL POOL BLOCK. IT DESCRIBES THE CURRENT BLOCK,          ---*
*---     INCLUDING THE FREE CELL CHAIN AND THE NUMBER OF FREE      ---*
*---     CELLS IN THIS BLOCK.                                      ---*
*---------------------------------------------------------------------*
CELLBLOK DSECT
CELLLINK DS    A   POINTER TO THE NEXT CELL BLOCK, IF ANY
CELLFREE DS    A   POINT TO THE FIRST FREE CELL IN THIS BLOCK
CELLLAST DS    A   ADDRESS OF THE LAST CELL IN THIS BLOCK
CELLCNT  DS    F   NUMBER OF FREE CELLS IN THIS BLOCK
CELL1    DS    X   THIS IS THE FIRST BYTE OF THE FIRST CELL
         END
