EXPR     TITLE 'ARCHIVER --- EXPORT FUNCTION'
ARCHEXPR CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
@RPL1    EQU   R2                  SOME
@RPL2    EQU   R3                    SPECIAL
@RPL3    EQU   R4                      EQUATES
@BUF1    EQU   R5                        FOR
@BUF2    EQU   R6                          VSAM
@BUF3    EQU   R7                            I/O MGMT
         COPY #ARCBITS
         USING ARCHEXPR,R15
         #STAMP
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R11,R15             EXPORT ROUTINE BASE REGISTER
         DROP  R15                 DROP THE OLD BASE
         USING ARCHEXPR,R11        DEFINE THE NEW BASE REGISTER
         LA    R14,72(,R13)        POINT DOWN THE SAVE AREA STACK
         ST    R14,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R14)         AND BACK POINTER
         LR    R13,R14             LOAD NEW SAVE AREA POINTER
         L     R14,4(,R13)         RELOAD BACK POINTER
         L     R14,12(,R14)        RELOAD ORIG. REG 14
         USING MAINWK,R12          BASE THE MAIN WORK AREA
         XC    TOKEN,TOKEN         INITIAL CPPB POINTER
         XC    FCOUNT,FCOUNT       CLEAR FUNCTION RECORD COUNT
         XC    MCNT,MCNT           AND MEMBER COUNT
         XC    ACNT,ACNT           AND ALIAS COUNT
         MVC   VS1MODE,=CL8'INPUT' SET THE I/O MODE
         LA    R1,VSAM1DD          LOAD THE PARM POINTER
         LA    R0,0                AND THE 'OPEN' FLAG
         CALL  ARCHVSOP            CALL THE 'OPEN' FUNCTION
         LTR   R15,R15             OPEN OK ??
         BNZ   ENDITALL            NOPE; CAN'T WORK
*---------------------------------------------------------------------*
*---     NOW OPEN THE INPUT NON-VSAM DATASET.                      ---*
*---------------------------------------------------------------------*
         BAL   R14,OPNVO           CALL THE OPEN ROUTINE
*---------------------------------------------------------------------*
*---     OUR FIRST RECORD IS A SPECIAL RECORD GIVING THE ORIGINAL  ---*
*---     VSAM CLUSTER'S MAXIMUM RECORD LENGTH.  NEEDED FOR IMPORT. ---*
*---------------------------------------------------------------------*
         XC    GENWK(16),GENWK     CLEAR RECORD CONSTRUCTION AREA
         MVC   GENWK(4),=C'SIZE'   KEYWORD FOR LOCATING THIS RECORD
         MVC   GENWK+4(4),VS1LIM   COPY THE VSAM MAX RCD LENGTH
         LA    R1,GENWK            POINT TO THE RECORD
         LA    R0,8                AND LOAD ITS SIZE
         BAL   R14,PUT             AND OUTPUT THE RECORD
         EJECT
*---------------------------------------------------------------------*
*---     HERE'S THE MEAT OF THE PROCESSING. THE BASIC PROCESS IS   ---*
*---           THIS:                                               ---*
*---                                                               ---*
*---     1. USING THE CONTROL INFORMATION WE WERE GIVEN AND THE    ---*
*---        INFORMATION WE'VE DEVELOPED, LOCATE THE HEADER RECORD  ---*
*---        FOR THE FIRST MEMBER. WE'LL USE THE VS1BUF2 AREA FOR   ---*
*---        HEADER/KEY CONSTRUCTION.                               ---*
*---                                                               ---*
*---     2. LOOP THROUGH THE MEMBER, READING THE RECORDS AND       ---*
*---        WRITING THEM TO THE NON-VSAM DATASET.  SINCE WE'RE     ---*
*---        USING QSAM FOR THE I/O, THE MECHANICS OF BLOCKING      ---*
*---        AND ASYNCHRONOUS PROCESSING ARE UNNEEDED HERE.         ---*
*---------------------------------------------------------------------*
         L     @RPL1,RPL1          POINT TO THE
         L     @RPL2,RPL2            RPL'S
         L     @RPL3,RPL3              AND
         L     @BUF1,VS1BUF1       BUFFER
         L     @BUF2,VS1BUF2         STORAGE
         L     @BUF3,VS1BUF3           AREAS
         XC    BLDLAREA,BLDLAREA   CLEAR THE QUALIFIER SAVE AREA
         LA    @BUF2,4(,@BUF2)     SPACE FOR
         LA    @BUF3,4(,@BUF3)       VBS RDW'S
         USING REC,@BUF1           BASE THE RECORD DSECT
         XC    0(RECKLEN,@BUF1),0(@BUF1)   START AT THE BEGINNING !!
         MVI   RECTT,#RTHDR        START WITH HEADERS
         MODCB RPL=(@RPL1),                                            X
               OPTCD=(SEQ,FKS,KGE,SYN),                                X
               ACB=(*,ACB1),                                           X
               ARG=(@BUF1),                                            X
               AREA=(@BUF1),                                           X
               AREALEN=(*,VS1LIM),                                     X
               MF=(G,GENWK)        POSITION TO CLUSTER START
         POINT RPL=(@RPL1)         GET TO IT
NEXTHDR  DS    0H
         GET   RPL=(@RPL1)         AND READ A HEADER RECORD
         SHOWCB RPL=(@RPL1),                                           X
               FIELDS=RECLEN,                                          X
               AREA=(S,VS1LEN1),                                       X
               LENGTH=4,                                               X
               MF=(G,GENWK)        FETCH THE RECORD LENGTH
         CLI   RECTT,#RTHDR        HEADER RECORD ??
         BNE   ENDITALL            NOPE; ALL DONE ---
         #IF   RETA,ON,CHKALIAS    CHECK ALIAS NAMES, TOO ---
         #IF   RSRALIAS,ON,NEXTHDR SKIP ALIAS, FOR NOW
CHKALIAS DS    0H
         LA    R1,RECN             POINT TO THE HEADER
         LA    R0,0                USE DEFAULT QUALIFIER DATA
         CALL  ARCHKNAM            GO CHECK: DO WE PROCESS THIS ITEM ??
         LTR   R15,R15             PASS THE CHECK ??
         BNZ   NEXTHDR             NOPE ---
         MVC   0(49,@BUF2),0(@BUF1) COPY KEY TO BUFFER 2
         #IF   RSRALIAS,OFF,NX1    SCOOT ---
         MVC   1(44,@BUF2),RECAN   COPY 'REAL' QUALIFIERS
NX1      DS    0H
         MODCB RPL=(@RPL2),                                            X
               OPTCD=(SEQ,FKS,KGE,SYN),                                X
               ACB=(*,ACB1),                                           X
               ARG=(@BUF2),                                            X
               AREA=(@BUF2),                                           X
               AREALEN=(*,VS1LIM),                                     X
               MF=(G,GENWK)        POSITION TO CLUSTER START
         POINT RPL=(@RPL2)         RE-POSITION
         GET   RPL=(@RPL2)         READ THE 'REAL' HEADER
         SHOWCB RPL=(@RPL2),                                           X
               FIELDS=RECLEN,                                          X
               AREA=(S,VS1LEN2),                                       X
               LENGTH=4,                                               X
               MF=(G,GENWK)        FETCH THE RECORD LENGTH
         DROP  @BUF1
         USING REC,@BUF2           RE-BASE THE DSECT
NOTA     DS    0H
         LA    R1,RECN             POINT TO FIRST QUALIFIER
         BAL   R14,CHKCHN          IS IT DONE ALREADY ??
         LTR   R15,R15             MAYBE ---
         BNZ   NEXTHDR             YES; SKIP THIS ATTEMPT
         BAL   R14,CHAINER         ADD IT TO THE CHAIN
         LA    R1,RECTT            POINT TO THE HEADER RECORD AGAIN
         L     R0,VS1LEN2          LOAD THE RECORD LENGTH
         BAL   R14,PUT             GO WRITE A LOGICAL RECORD
*---------------------------------------------------------------------*
*---     NOW LOCATE AND EXPORT ANY ALIASES                         ---*
*---------------------------------------------------------------------*
         #IF   RSRHALS,OFF,GETB    HAS NO ALIASES -----
         XC    0(RECKLEN,@BUF3),0(@BUF3) CLEAR THE KEY AREA
         MODCB RPL=(@RPL3),AREA=(@BUF3),ARG=(@BUF3),                   X
               OPTCD=(SEQ,FKS,KGE,SYN),                                X
               AREALEN=(*,VS1LIM),MF=(G,GENWK)
         #IF   RETA,OFF,GETB       DON'T EXPORT ALIASES
         POINT RPL=(@RPL3)         POSITION TO START
GETA     DS    0H
         GET   RPL=(@RPL3)         READ A RECORD
         DROP  @BUF2
         USING REC,@BUF3
         CLI   RECTT,#RTHDR        HEADER RECORD ??
         BNE   GETB                NOPE; ALL DONE
         #IF   RSRALIAS,OFF,GETA   NOT AN ALIAS; SKIP IT
         CLC   RECAN(44),1(@BUF2)  ALIAS FOR CURRENT ITEM ??
         BNE   GETA                NOPE ---
         SHOWCB  RPL=(@RPL3),FIELDS=RECLEN,AREA=(S,VS1LEN3),           X
               LENGTH=4,MF=(G,GENWK)
         LA    R1,0(,@BUF3)        COPY RECORD ADDRESS
         L     R0,VS1LEN3          AND ITS LENGTH
         BAL   R14,PUT             GO OUTPUT THE RECORD
         L     R15,ACNT            LOAD ALIAS COUNT
         LA    R15,1(,R15)         INCREMENT BY ONE
         ST    R15,ACNT            AND SAVE THE RESULT
         #FORMAT RECTT,,AEXPRTD
         #PUT  LINE                OUTPUT 'ALIAS EXPORTED' MESSAGE
         B     GETA                AND CONTINUE ---
GETB     DS    0H
*---------------------------------------------------------------------*
*---     NOW DO ANY NOTE RECORDS                                   ---*
*---------------------------------------------------------------------*
         MVC   0(49,@BUF3),0(@BUF2) RESET TO 'REAL' KEY
         MVI   RECTT,#RTNOTE       RESET TO NOTE TYPE
         POINT RPL=(@RPL3)         GET TO IT
LDLOOP   DS    0H
         GET   RPL=(@RPL3)         GO READ A MEMBER NOTE RECORD
         LTR   R15,R15             DID IT COMPLETE OK ??
         BNZ   LDDONE              NOPE; ASSUME WE'RE DONE
         SHOWCB RPL=(@RPL3),                                           X
               FIELDS=RECLEN,                                          X
               AREA=(S,VS1LEN3),                                       X
               LENGTH=4,                                               X
               MF=(G,GENWK)        FETCH THE RECORD LENGTH
         CLI   RECTT,#RTNOTE       DATA RECORD ??
         BNE   LDDONE
         CLC   1(RECKLEN-5,@BUF3),1(@BUF2) STILL IN THE RIGHT ITEM ??
         BNE   LDDONE              NOPE; DO STOWS 'N' STUFF
         LR    R1,@BUF3            COPY RECORD ADDRESS
         L     R0,VS1LEN3          LOAD RECORD LENGTH
         BAL   R14,PUT             OUTPUT THE RECORD
         B     LDLOOP              NOPE ---
LDDONE   DS    0H
         MVC   0(RECKLEN,@BUF3),0(@BUF2) COPY THAT KEY
         MVI   RECTT,#RTDATA       RESET TO DATA TYPE
         XC    RECSEQ#,RECSEQ#     RESET THE SEQUENCE NUMBER
         POINT RPL=(@RPL3)         GET TO IT
DATALP   DS    0H
         GET   RPL=(@RPL3)         GO READ A MEMBER DATA RECORD
         LTR   R15,R15             DID IT COMPLETE OK ??
         BNZ   DATADN              NOPE; ASSUME WE'RE DONE
         CLI   RECTT,#RTDATA       DATA RECORD ??
         BNE   DATADN
         CLC   1(44,@BUF2),1(@BUF3) STILL IN THE RIGHT ITEM ??
         BNE   DATADN              NOPE; DO STOWS 'N' STUFF
         SHOWCB RPL=(*,RPL3),                                          X
               FIELDS=RECLEN,                                          X
               AREA=(S,VS1LEN3),                                       X
               LENGTH=4,                                               X
               MF=(G,GENWK)        FETCH THE RECORD LENGTH
         LR    R1,@BUF3            COPY RECORD ADDRESS
         L     R0,VS1LEN3          LOAD RECORD LENGTH
         BAL   R14,PUT             OUTPUT THE RECORD
         B     DATALP              NOPE ---
DATADN   DS    0H
         DROP  @BUF3
         USING REC,@BUF2
         #FORMAT RECTT,,EXPORTED
         #PUT  LINE
         NC    BLDLAREA,BLDLAREA   WAS THERE A SAVED KEY ??
         BZ    NORESTOR            NOPE ---
         MVC   RECN(48),BLDLAREA   YES; RESTORE THE KEY
         XC    BLDLAREA,BLDLAREA   RESET THE SAVE AREA
NORESTOR DS    0H
         L     R1,MCNT             LOAD MEMBER COUNT
         AL    R1,=F'1'            INCREMENT BY ONE
         ST    R1,MCNT             SAVE RESULTS
         DROP  @BUF2
         #IF   GENM,ON,NEXTHDR     LOOP IF GENERIC NAME
         #IF   GENG,ON,NEXTHDR     LOOP IF GENERIC GROUP
         #IF   GENSG,ON,NEXTHDR    LOOP IF GENERIC SUBGROUP
         #IF   GENT,ON,NEXTHDR     LOOP IF GENERIC TYPE
ENDITALL DS    0H
         L     R0,MCNT             EXPORT MEMBER COUNT
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,MCMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
         L     R0,ACNT             EXPORT MEMBER COUNT
         LTR   R0,R0               NO ALIASES ??
         BZ    END1                NOPE ---
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,ACMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
END1     DS    0H
         CLC   ACB1,=F'0'          WAS ACB EVER OPENED ??
         BE    NOACB               NOPE ---
         LA    R1,VSAM1DD          POINT TO THE DDNAME
         LA    R0,4                SET 'CLOSE' REQUEST
         CALL  ARCHVSOP            CALL THE VSAM 'CLOSE' ROUTINE
NOACB    DS    0H
         BAL   R14,NVSCLOSE        GO CLOSE THE INPUT FILE
         NC    TOKEN,TOKEN         IS THERE A Q'CELL POOL ??
         BZ    NOPOOL              NOPE ---
         L     R0,TOKEN            LOAD CPPB POINTER
         CALL  CELLDEL             GO DELETE THE ENTIRE POOL
         XC    TOKEN,TOKEN
NOPOOL   DS    0H
         L     R13,4(,R13)         EXPORT BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS RC = 0
         MVI   12(R13),255
         BR    R14                 AND RETURN TO CALLER
         TITLE 'OPEN NONVSAM OUTPUT DATASET '
*---------------------------------------------------------------------*
*---     THIS LOCAL SUBROUTINE SERVES ONLY ONE PURPOSE: TO OPEN    ---*
*---     THE EXPORT DATASET.  SINCE QSAM I/O IS USED FOR THE       ---*
*---     OUTPUT OF THE EXPORT FUNCTION, WE CAN DISREGARD ANY       ---*
*---     SPECIAL CONSIDERATIONS FOR DEBLOCKING AND REBLOCKING.     ---*
*---     SIMILARLY, WE CAN IGNORE ANY FANCY BUFFER MANAGEMENT      ---*
*---     CONSIDERATIONS.  WE ASSUME HERE THAT ANY DEVICE THAT      ---*
*---     SUPPORTS VARIABLE SPANNED RECORDS IS ACCEPTABLE, EVEN     ---*
*---     THOUGH IT MAY BE NONSENSICAL.  FOR EXAMPLE, A CARD PUNCH  ---*
*---------------------------------------------------------------------*
         SPACE 3
OPNVO    DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
*---
*---     BUILD A DCB, TO START, FOR DSORG CHECKING
*---
         GETMAIN R,LV=QSDCBL,SP=11 GRAB STORAGE FOR BPAM DCB
         ST    R1,NDCBA            AND STORE ADDRESS IN ARCHIVWA
         MVI   NDCBA,X'80'         BUILD OPEN PARM LIST
         MVC   0(QSDCBL,R1),QSDCB  COPY DCB TO DYNAMIC AREA
         USING IHADCB,R1           BASE THE DCB DSECT
         MVC   DCBDDNAM,EXPTPDD    MOVE IN THE DDNAME
         DROP  R1
*---
*---     SEARCH THE TIOT FOR THE DDNAME
*---
         L     R1,TIOTA            EXPORT TIOT ELEMENT POINTER
OPNVO2   DS    0H
         CLI   0(R1),0             AT TIOT END ??
         BE    NODDERR             YES; DD STATEMENT IS MISSING
         CLC   EXPTPDD,4(R1)       IS THIS THE DD ENTRY ??
         BE    OPNVO3              YES; GO FETCH UCB ADDR
         IC    R0,0(,R1)           INSERT TIOE LENGTH
         N     R0,=F'255'          TRIM TO JUST THE LENGTH
         AR    R1,R0               BUMP TO NEXT ENTRY
         B     OPNVO2              AND CONTINUE THE SEARCH
OPNVO3   DS    0H
*---
*---     PROCEED WITH THE NECESSARY OPEN, ETC.
*---
         OPEN  (,OUTPUT),MF=(E,NDCBA) OPEN THE DCB
OPNVO12  DS    0H
         L     R0,=F'32768'        EXPORT COMPRESS MAX LENGTH
         ICM   R0,8,=AL1(10)       INSERT SUBPOOL NUMBER
         GETMAIN R,LV=(0)
         STM   R0,R1,CMPWRKL       STORE COMPRESS WORK-AREA ADDRESS
         LM    R14,R12,IOSAVE      REEXPORT ENTRY REGISTERS
         BR    R14                 AND RETURN TO LOCAL CALLER
*---
*---     THIS IS A SHORT AND SNEAKY DCB COMPLETION EXIT. ITS ONLY
*---     PURPOSE IS TO ESTABLISH THE BLKSIZE FOR THE PRIMARY
*---     DCB.
*---
OPNVO13  DS    0F
         DC    XL1'85',AL3(OPNVO13+4)
         USING IHADCB,R1
         NC    DCBBLKSI,DCBBLKSI   BLKSIZE DEFINED ??
         BNZR  R14                 YES ---
         MVC   DCBBLKSI,=H'32760'  DEFAULT BLKSIZE
         BR    R14                 AND RETURN TO O/C/EOV
         DROP  R1
         TITLE 'QSAM CLOSE ROUTINE'
*---------------------------------------------------------------------*
*---     THIS LITTLE ROUTINE CLOSES THE NONVSAM DATASET,           ---*
*---     RELEASES ALL BUFFER POOLS, RESETS POINTER VALUES,         ---*
*---     ETC.                                                      ---*
*---------------------------------------------------------------------*
         SPACE 3
NVSCLOSE DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
         L     R2,NDCBA            EXPORT PRIMARY DCB ADDRESS
         LA    R2,0(,R2)           PURIFY THE ADDRESS
NVSCX    DS    0H
         LTR   R2,R2               ZERO ??
         BZ    NVC1                YES; NO DCB HERE ---
         TM    48(R2),X'10'        IS IT OPEN ??
         BZ    NVCA                NOPE ---
         CLOSE MF=(E,NDCBA)        CLOSE THE DCB
NVCA     DS    0H
         #FREE (2)                 RELEASE BUFFER POOL, IF ANY
         XC    NDCBA,NDCBA         AND RESET THE POINTER FIELD
NVC1     DS    0H
         LM    R14,R12,IOSAVE      RESTORE THE REGISTERS
         BR    R14                 AND RETURN TO CALLER
         TITLE 'QSAM PUT ROUTINES '
*---------------------------------------------------------------------*
*---     REGS AT ENTRY:                                            ---*
*---              R0 ::= LOGICAL RECORD LENGTH                     ---*
*---              R1 --> LOGICAL RECORD                            ---*
*---              R14 -> RETURN ADDRESS                            ---*
*---------------------------------------------------------------------*
         SPACE 3
PUT      DS    0H
         STM   R14,R12,IOSAVE      SAVE INPUT REGISTERS
         L     R9,NDCBA            EXPORT DCB ADDRESS
         USING IHADCB,R9           AND BASE ITS DSECT
         LR    R2,R1               AND ADDRESS
         AH    R0,=H'4'            ACCOUNT FOR RDW AREA
         SLL   R0,16               BUILD A TRUE RDW
         SH    R2,=H'4'            POINT TO RDW AREA
         ST    R0,0(,R2)           ADD RDW TO THE RECORD
         PUT   (9),(2)             AND WRITE THE RECORD
         LM    R14,R12,IOSAVE      RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN ---
         DROP  R9
*---------------------------------------------------------------------*
*---     SOME ERROR STUFF                                          ---*
*---------------------------------------------------------------------*
NODDERR  DS    0H
         #PUT  ERR1
         #PUT  ERR6
         B     ENDITALL
ERR1     DC    CL133'0** ERROR *** THE DD STATEMENT FOR THE REQUIRED NOX
               N-VSAM DATASET IS MISSING.'
ERR6     DC    CL133'0*** ERROR *** THIS CONTROL STATEMENT WILL BE IGNOX
               RED.'
*---------------------------------------------------------------------*
*---     THIS ROUTINE WILL ADD THE 'REAL' NAME WE JUST EXPORTED    ---*
*---     TO A CHAIN OF REAL NAMES IN STORAGE.  THE CHAIN IS        ---*
*---     'ROOTED' IN THE 'COUNT' FIELD OF THE ARCHIVER'S MAIN      ---*
*---     WORK AREA.  THE PURPOSE OF THIS CHAIN IS TO PREVENT       ---*
*---     EXPORTING THE SAME ITEM MULTIPLE TIMES IF IT HAS          ---*
*---     MULTIPLE ALIASES AND WE'RE EXPORTING BASED ON ALIAS       ---*
*---     CHECKS AS WELL AS REAL NAME CHECKS.                       ---*
*---                                                               ---*
*---     REGISTER 1 IS ASSUMED TO POINT TO THE 44-BYTE QUALIFIER   ---*
*---     DATA TO BE ADDED TO THE CHAIN.                            ---*
*---------------------------------------------------------------------*
CHAINER  DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
         LR    R2,R1               COPY THE DATA POINTER
         NC    TOKEN,TOKEN         IS CELL POOL INIT'D ??
         BNZ   CHAIN1              YES ---
         CNOP  0,4
         BAL   R1,BLDPOOL          BRANCH AROUND PARM LIST
         DC    F'100'
         DC    F'100'
         DC    F'48'
         DC    AL1(14)
         DC    AL1(20)
         DC    CL20'EXPORTED REAL ITEMS'
BLDPOOL  DS    0H
         CALL  CELLBLD
         ST    R0,TOKEN            SAVE THE 'TOKEN' VALUE
CHAIN1   DS    0H
         L     R0,TOKEN            LOAD THE TOKEN VALUE
         CALL  CELLGET             GO GET A QUICKCELL
         XC    0(48,R1),0(R1)      CLEAR IT OUT
         MVC   0(4,R1),CHAIN       INSERT INTO THE
         ST    R1,CHAIN              CHAIN
         MVC   4(44,R1),0(R2)      COPY DATA INTO THE CHAIN
         LM    R14,R12,IOSAVE      RESTORE THE REGISTERS
         LA    R15,0               ZERO RETURN CODE
         BR    R14                 AND RETURN TO MY CALLER
         EJECT
*---------------------------------------------------------------------*
*---     THIS ROUTINE CHECKS THROUGH THE CHAIN BUILT BY 'CHAIN'    ---*
*---     TO SEE IF WE'VE ALREADY PROCESSED THE ITEM WHOSE          ---*
*---     QUALIFIERS ARE POINTED TO BY REGISTER 1.  IF A MATCH IS   ---*
*---     FOUND, A RETURN CODE OF 4 IS SET IN REGISTER 15, ELSE     ---*
*---     THE RETURN CODE IS ZERO.                                  ---*
*---------------------------------------------------------------------*
CHKCHN   DS    0H
         STM   R14,R2,IOSAVE       SAVE THE ENTRY REGISTERS
         MVC   IOSAVE+4(4),=F'4'   SET INITIAL RETURN CODE
         L     R2,CHAIN            LOAD THE FIRST LINK POINTER
         B     CHKCHN2             AND GO CHECK FOR ANY LINK
CHKCHN1  DS    0H
         CLC   4(44,R2),0(R1)      DOES IT MATCH ??
         BE    CHKCHN3             YES; ERROR RETURN CODE
         L     R2,0(,R2)           POINT TO NEXT LINK
CHKCHN2  DS    0H
         LTR   R2,R2               ANOTHER LINK ??
         BNZ   CHKCHN1             YES ---
         XC    IOSAVE+4(4),IOSAVE+4  NOPE; SET ZERO RETURN CODE
CHKCHN3  DS    0H
         LM    R14,R2,IOSAVE       RESTORE REGISTERS
         BR    R14                 AND RETURN TO CALLER
TCMSG    DC    CL133' '
         ORG   TCMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202120'
         DC    C' TOTAL LOGICAL RECORDS PROCESSED.'
         ORG
MCMSG    DC    CL133' '
         ORG   MCMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202120'
         DC    C' TOTAL MEMBERS PROCESSED.'
         ORG
ACMSG    DC    CL133' '
         ORG   ACMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202120'
         DC    C' TOTAL ALIAS(ES) PROCESSED.'
         ORG
         LTORG
AEXPRTD  DC    AL1(AEXE-AEXS)
AEXS     DC    C' (ALIAS) SUCCESSFULLY EXPORTED.'
AEXE     EQU   *
EXPORTED DC    AL1(LDMSGE-LDMSG)
LDMSG    DC    C' SUCCESSFULLY EXPORTED.'
LDMSGE   EQU   *
MINREC   DC    A(RECSIZE)
E1       DC    X'85',AL3(E1+4)
         USING IHADCB,R1
         CLC   DCBBLKSI,=H'0'      BLKSIZE MISSING ??
         BNER  R14                 NOPE ---
         MVC   DCBBLKSI,=H'32000'  YES; INSERT A DEFAULT
         BR    R14
         DROP  R1
QSDCB    DCB   DSORG=PS,MACRF=PM,RECFM=VBS,LRECL=32760,EXLST=OPNVO13
QSDCBL   EQU   *-QSDCB
         DCBD  DSORG=(PS)
         COPY  #RECS
         COPY  ##ARCHWK
         END
