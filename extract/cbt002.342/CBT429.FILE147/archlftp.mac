LISTF    TITLE 'ARCHIVER --- LISTF FUNCTION'
*---------------------------------------------------------------------*
*---     ALL LISTF REQUESTS ARE ROUTED HERE FOR FURTHER            ---*
*---     PROCESSING.  THIS ROUTINE LISTS THE VARIOUS TYPES OF      ---*
*---     QUALIFIER AND DCB ATTRIBUTE DATA FOUND IN THE ARCHIVER    ---*
*---     EXPORT TAPE, UNDER THE CONTROL OF THE ITEM VALUES ON      ---*
*---     THE INPUT CONTROL STATEMENT.  NOTE THAT THE 'MEMBER'      ---*
*---     VALUE IS FORCED TO THE GENERIC EQUIVALENT OF              ---*
*---     'ALL MEMBERS' BEFORE THE PROCESSING STARTS.               ---*
*---------------------------------------------------------------------*
         SPACE 3
ARCHLFTP CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         COPY  #ARCBITS
         USING ARCHLFTP,R15
         #STAMP
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R11,R15             LOAD ROUTINE BASE REGISTER
         DROP  R15                 DROP THE OLD BASE
         USING ARCHLFTP,R11        DEFINE THE NEW BASE REGISTER
         LA    R14,72(,R13)        POINT DOWN THE SAVE AREA STACK
         ST    R14,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R14)         AND BACK POINTER
         LR    R13,R14             LOAD NEW SAVE AREA POINTER
         L     R14,4(,R13)         RELOAD BACK POINTER
         L     R14,12(,R14)        RELOAD ORIG. REG 14
         USING MAINWK,R12          BASE THE MAIN WORK AREA
         XC    MCNT,MCNT           INIT. THE ITEM COUNT
         ZAP   LSTLIN#,=P'99'      START ON A NEW PAGE
         BAL   R14,NVSOPEN         GO OPEN THE ARCHIVER-EXPORT TAPE
         XC    CALLIST(4),CALLIST  INITIAL CHAIN-POINTER VALUE
         EJECT
*---------------------------------------------------------------------*
*---     HERE'S THE MEAT OF THE PROCESSING. THE BASIC PROCESS IS   ---*
*---           THIS:                                               ---*
*---                                                               ---*
*---     1. USING THE CONTROL INFORMATION WE WERE GIVEN AND THE    ---*
*---        INFORMATION WE'VE DEVELOPED, LOCATE THE HEADER RECORD  ---*
*---        FOR THE FIRST MEMBER. WE'LL USE THE VS1BUF2 AREA FOR   ---*
*---        HEADER/KEY CONSTRUCTION.                               ---*
*---                                                               ---*
*---     2. LOOP THROUGH THE MEMBER, READING THE RECORDS AND       ---*
*---        EXPLODING THEM INTO THE COMPRK AREA, WRITING EACH      ---*
*---        'LOGICAL' RECORD AS IT BECOMES AVAILABLE.              ---*
*---------------------------------------------------------------------*
         MVC   TITLE3,SH10         REPORT SUBTITLE LINE
MEMBERS  DS    0H
         L     R1,NDCBA            POINT TO THE DCB
         GET   (1)                 READ A RECORD
         LH    R3,0(,R1)           LOAD ITS LENGTH
         LA    R3,0(R3,R1)         POINT TO RECORD END
         BCTR  R3,R0               BACK UP TO LAST BYTE
         LA    R2,4(,R1)           POINT TO RECORD START
         CLC   0(4,R2),=C'SIZE'    IS THIS A SIZE MARKER ??
         BNE   NOTSIZE             NOPE ---
         MVC   LINE,DASHES
         #PUT  LINE
         L     R0,4(,R2)           LOAD THE SIZE VALUE
         CVD   R0,DWORK            DECIMALIZE IT
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
         MVC   LINE,MSGL           COPY MESSAGE DATA TO LINE
         ED    LINE+38(8),DWORK+4  INSERT SIZE IN LINE
         #PUT  LINE                OUTPUT THE MESSAGE
         MVC   LINE,DASHES         ANOTHER LINE OF DASHES
         #PUT  LINE
         B     MEMBERS             GO FOR ANOTHER RECORD
DASHES   DC    C' '
         DC    120C'-'
MSGL     DC    CL133' '
         ORG   MSGL+1
         DC    C'NEW CLUSTER INPUT. MAXIMUM LRECL WAS '
         DC    X'4020202020202020'
         DC    C' BYTES.'
         ORG
NOTSIZE  DS    0H
         CLI   0(R2),#RTHDR        HEADER RECORD ??
         BNE   MEMBERS             NOPE; LOOK FOR ANOTHER HDR
         LA    R1,1(,R2)           POINT TO THE HEADER
         LA    R0,0                USE DEFAULT QUALIFIER DATA
         CALL  ARCHKNAM            GO CHECK: DO WE PROCESS THIS ITEM ??
         LTR   R15,R15             PASS THE CHECK ??
         BNZ   MEMBERS             NOPE ---
         L     R15,MCNT            LOAD ITEM COUNTER
         LA    R15,1(,R15)
         ST    R15,MCNT
         LA    R1,0(,R2)           POINT TO THE HEADER RECORD
         BAL   R9,CHAINER          CHECK/LIST HEADER RECORD
         B     MEMBERS             GO GET THE NEXT RECORD
ENDITALL DS    0H
*---------------------------------------------------------------------*
*---     AT THIS POINT, WE'VE CHAINED ALL THAT CAN BE CHAINED.    ----*
*---     NOW GENERATE THE LISTING, WITH APPROPRIATE TITLES, AND   ----*
*---     TERMINATE. AFTER EACH LINK IS LISTED, WE UNCHAIN IT,      ---*
*---     FREEMAIN THE STORAGE AND LOOP BACK TO RESTART THE         ---*
*---     LISTING PROCESS.                                          ---*
*---------------------------------------------------------------------*
         NC    CALLIST(4),CALLIST  ALL LINKS DONE ??
         BZ    LSTD                YES ---
         L     R10,CALLIST         LOAD A LINK POINTER
         MVC   CALLIST(4),0(R10)   UNCHAIN IT
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(L'LINE-1),LINE    AND CLEAR THE LINE
*++++++++++++++++++++++++++++++++++
         LA    R2,LINE+1           POINT TO OUTPUT AREA
         MVI   0(R2),C'-'
         LA    R2,1(,R2)
         MVC   0(10,R2),12(R10)    MOVE THE GROUP
         MVI   10(R2),C'-'         AND FIELD SEPARATOR
         LA    R2,11(,R2)          INCREMENT TRAVELING POINTER
         MVC   0(10,R2),22(R10)    MOVE THE SUBGROUP OVER
         MVI   10(R2),C'-'         AND FIELD SEPARATOR
         LA    R2,11(,R2)          INCREMENT TRAVELING POINTER
         MVC   0(10,R2),32(R10)    MOVE THE TYPE OVER
         MVI   10(R2),C'-'         AND FIELD SEPARATOR
         LA    R2,11(,R2)          INCREMENT TRAVELING POINTER
         ICM   R0,15,42(R10)       INSERT THE VERSION
         X     R0,=F'-1'           INVERT ALL BITS
         CVD   R0,DWORK            AND DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORST LAST SIGN NUMERIC
         MVC   0(12,R2),SH11        MOVE IN THE EDIT MASK
         ED    0(12,R2),DWORK+3     EDIT IN THE VERSION NUMBER
         LA    R2,14(,R2)          POINT PAST IT
         $CVRECFM 0(,2),46(R10)
         CLI   0(R2),C'U'          RECFM = U ??
         LA    R2,6(,R2)
         BE    SH4                 YES; SKIP LRECL
         LA    R15,0               CLEAR A WORK REG
         ICM   R15,3,47(R10)       INSERT THE LRECL VALUE
         CVD   R15,DWORK           DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORST LAST SIGN NUMERIC
         MVC   0(7,R2),SH8         MOVE IN THE EDIT MASK
         ED    0(7,R2),DWORK+5     EDIT IN THE LRECL
SH4      DS    0H
         LA    R15,0               RE-CLEAR R15
         LA    R2,9(,R2)
         ICM   R15,3,49(R10)       INSERT THE BLKSIZE VALUE
         CVD   R15,DWORK           DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORST LAST SIGN NUMERIC
         MVC   0(7,R2),SH8         MOVE IN THE EDIT MASK
         ED    0(7,R2),DWORK+5     EDIT IN THE BLKSIZE
         LA    R2,9(,R2)
         ICM   R0,15,4(R10)        INSERT THE ITEM COUNT
         CVD   R0,DWORK            AND DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORCE LAST SIGN NUMERIC
         MVC   1(12,R2),SH11       MOVE IN THE EDIT MASK
         ED    1(12,R2),DWORK+3    EDIT IN THE COUNT
         LA    R2,13(,R2)
         ICM   R0,15,8(R10)        INSERT THE ITEM COUNT
         CVD   R0,DWORK            AND DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORCE LAST SIGN NUMERIC
         MVC   1(12,R2),SH11       MOVE IN THE EDIT MASK
         ED    1(12,R2),DWORK+3    EDIT IN THE COUNT
SH5      DS    0H
         #PUT  LINE                PRINT IT OUT
         B     ENDITALL
LSTD     DS    0H
         #ERR  MSG=11
         L     R0,MCNT             LOAD MEMBER COUNT
         LTR   R0,R0               ZERO COUNT ??
         BZ    END1                YES ---
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,TCMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
END1     DS    0H
         CLC   NDCBA,=F'0'         WAS DCB EVER OPENED ??
         BE    NOACB               NOPE ---
         BAL   R14,NVSCLOSE        CLOSE THE IMPORT TAPE
NOACB    DS    0H
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS RC = 0
         MVI   12(R13),255
         BR    R14                 AND RETURN TO CALLER
         TITLE 'NONVSAM CLOSE AND CONTROL-BLOCK FREEMAINS'
*---------------------------------------------------------------------*
*---     THIS LITTLE LOCAL SUBROUTINE IS THE COUNTERPART TO THE    ---*
*---     NVSOPEN ROUTINE. HERE, THE NONVSAM DATASET IS CLOSED      ---*
*---     AND ALL RELATED STORAGE, WORK AREAS, ETC. ARE FREE'D.     ---*
*---     ALL RELATED VALUES IN THE ##ARCHWK AREA ARE ALSO RESET.   ---*
*---------------------------------------------------------------------*
NVSCLOSE DS    0H
         STM   R14,R12,IOSAVE      SAVE ENTRY REGISTERS
         OI    NDCBA,X'80'         MARK AS LAST FOR CLOSE
         CLOSE ,MF=(E,NDCBA)       CLOSE THE DATASET
         L     R2,NDCBA            LOAD THE DCB ADDRESS
         FREEPOOL (2)              RELEASE THE BUFFER POOL
         XC    NDCBA,NDCBA         AND CLOBBER THAT POINTER
         LM    R14,R12,IOSAVE      RESTORE THE REGISTERS
         BR    R14                 RETURN TO (LOCAL) CALLER
         TITLE 'OPEN NONVSAM INPUT DATASET '
         SPACE 3
NVSOPEN  DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
*---
*---     BUILD A DCB, TO START, FOR DSORG CHECKING
*---
         GETMAIN R,LV=QSDCBL,SP=10 GRAB STORAGE FOR BPAM DCB
         ST    R1,NDCBA            AND STORE ADDRESS IN ARCHIVWA
         MVI   NDCBA,X'80'         BUILD OPEN PARM LIST
         MVC   0(QSDCBL,R1),QSDCB  COPY DCB TO DYNAMIC AREA
         USING IHADCB,R1           BASE THE DCB DSECT
         MVC   DCBDDNAM,EXPTPDD    MOVE IN THE DDNAME
         DROP  R1
         OPEN  (,INPUT),MF=(E,NDCBA) OPEN THE DCB
         LM    R14,R12,IOSAVE      RELOAD ENTRY REGISTERS
         BR    R14                 AND RETURN TO LOCAL CALLER
         SPACE 3
         DS    0F
E1       DC    X'85',AL3(E1+4)
         USING IHADCB,R1
         CLC   DCBBLKSI,=H'0'      BLKSIZE MISSING ??
         BNER  R14                 NOPE ---
         MVC   DCBBLKSI,=H'32000'  YES; INSERT A DEFAULT
         BR    R14
         DROP  R1
QSDCB    DCB   DSORG=PS,MACRF=GL,BFTEK=A,EODAD=ENDITALL,EXLST=E1
QSDCBL   EQU   *-QSDCB
         TITLE 'LOCAL SUBROUTINE TO SAVE A HEADER RECORD '
*---------------------------------------------------------------------*
*---     THIS LITTLE LOCAL SUBROUTINE CHAINS TOGETHER ALL THE     ----*
*---     VARIATIONS OF QUALIFIER DATA AND DCB ATTRIBUTES IN A     ----*
*---     SINGLE-LINKED LIST, IN SORTED ORDER.  THE INFORMATION    ----*
*---     SAVED CONSISTS OF THE GROUP, SUBGROUP AND TYPE           ----*
*---     QUALIFIERS, THE VERSION NUMBERS AND THE DCB ATTRIBUTES.  ----*
*---     EACH TIME ANY OF THESE ITEMS CHANGES, A NEW CHAIN-LINK   ----*
*---     IS CREATED AND INSERTED AT THE APPROPRIATE PLACE IN THE  ----*
*---     CHAIN.  SINCE ALL STORAGE FOR THE CHAIN IS GETMAINED     ----*
*---     FROM A SINGLE SUBPOOL, AT PROCESSING END A SIMPLE        ----*
*---     'ALL-THE-SUBPOOL' FREEMAIN IS PERFORMED TO RELEASE THE   ----*
*---     STORAGE.                                                 ----*
*---------------------------------------------------------------------*
         SPACE 3
CHAINER  DS    0H
         STM   R14,R12,IOSAVE      SAVE ENTRY REGISTERS
         LR    R6,R1               COPY THE RECORD ADDRESS
         USING REC,R6              AND BASE ITS DSECT
         XC    BLDLAREA,BLDLAREA   CLEAR A WORK AREA
         MVC   BLDLAREA(34),RECG COPY QUALIFIERS OVER
         MVC   BLDLAREA+34(1),RSRREC COPY RECORD FORMAT
         MVC   BLDLAREA+35(2),RSRLRE COPY LRECL OVER
         MVC   BLDLAREA+37(2),RSRBLK AND BLKSIZE
         LA    R10,CALLIST         POINT TO CHAIN START
LPA      DS    0H
         LA    R9,0                RE-CLEAR THAT REGISTER
         NC    0(4,R10),0(R10)     EMPTY CHAIN ??
         BZ    LPX                 YES; CREATE THE FIRST LINK
         L     R9,0(,R10)          LOAD LINK POINTER
         CLC   12(43,R9),BLDLAREA  ENTRY MATCH ??
         BH    LPX                 NEW IS LOWER; INSERT
         BE    LPY                 YES; JUST INCREMENT THE COUNTS
         LR    R10,R9              BUMP DOWN THE CHAIN
         B     LPA                 AND LOOP, SEARCHINGLY
LPX      DS    0H
         GETMAIN RC,LV=56,SP=10 GRAB SOME STORAGE
         XC    0(56,R1),0(R1)      CLEAR IT OUT
         MVC   12(43,R1),BLDLAREA  ADD THE KEY FIELDS
         ST    R9,0(,R1)           STORE THE LINK POINTER
         ST    R1,0(,R10)          STORE THE LINK POINTER
         LR    R9,R1               AND COPY TO MY 'STD' REGISTER
LPY      DS    0H
         L     R0,4(,R9)           LOAD THE ITEM COUNT
         AH    R0,=H'1'            INCREMENT BY ONE
         ST    R0,4(,R9)           SAVE UPDATED COUNT
         ICM   R0,15,RSRRCNT       LOAD THE RECORD COUNT
         A     R0,8(,R9)           ADD TO TOTAL
         ST    R0,8(,R9)           SAVE UPDATED VALUE
         LM    R14,R12,IOSAVE      RESTORE ENTRY REGISTERS
         BR    R9                  AND RETURN TO LOCAL CALLER
         DROP  R6
SH10     DC    C'    GROUP   -'
         DC    C'  SUBGRP  -'
         DC    C'  TYPE    -'
         DC    C'   VERSION'
         DC    C'    RECFM'
         DC    C'   LRECL'
         DC    C'     BLKL'
         DC    C'          ITEMS'
         DC    C'      RECORDS'
         DC    CL34' '
SH11     DC    C' ',X'202020',C',',X'202020',C',',X'202020'
TCMSG    DC    CL133' '
         ORG   TCMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    C' TOTAL ITEMS LISTED. '
         ORG
SH8      DC    C' ',X'2020',C',',X'202020'
         LTORG
MINREC   DC    A(RECSIZE)
         COPY  #RECS
         COPY  ##ARCHWK
         DCBD  DSORG=QS
         END
