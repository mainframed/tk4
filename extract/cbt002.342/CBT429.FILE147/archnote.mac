NOTE     TITLE 'ARCHIVER --- NOTE FUNCTION'
*---------------------------------------------------------------------*
*---     ADD USER-SUPPLIED NOTES TO ARCHIVED ITEMS. NOTE THAT NO   ---*
*---     ALIAS ENTRY CAN HAVE NOTE DATA ATTACHED TO IT. ALL NOTES  ---*
*---     REFER TO, AND ARE A PART OF, A REAL ITEM ONLY.            ---*
*---------------------------------------------------------------------*
ARCHNOTE CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
@RPL1    EQU   R2                  SOME
@RPL2    EQU   R3                    SPECIAL
@RPL3    EQU   R4                      EQUATES
@BUF1    EQU   R5                        FOR
@BUF2    EQU   R6                          VSAM
@BUF3    EQU   R7                            I/O MGMT
         COPY #ARCBITS
         USING ARCHNOTE,R15
         #STAMP
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R11,R15             NOTE ROUTINE BASE REGISTER
         DROP  R15                 DROP THE OLD BASE
         USING ARCHNOTE,R11        DEFINE THE NEW BASE REGISTER
         LA    R14,72(,R13)        POINT DOWN THE SAVE AREA STACK
         ST    R14,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R14)         AND BACK POINTER
         LR    R13,R14             NOTE NEW SAVE AREA POINTER
         L     R14,4(,R13)         RENOTE BACK POINTER
         L     R14,12(,R14)        RENOTE ORIG. REG 14
         USING MAINWK,R12          BASE THE MAIN WORK AREA
         XC    FCOUNT,FCOUNT       CLEAR FUNCTION RECORD COUNT
         XC    MCNT,MCNT           AND MEMBER COUNT
         XC    ACNT,ACNT           AND ALIAS COUNT
         MVC   VS1MODE,=CL8'OUTPUT' SET THE I/O MODE
         LA    R1,VSAM1DD          LOAD THE PARM POINTER
         LA    R0,0                AND THE 'OPEN' FLAG
         CALL  ARCHVSOP            CALL THE 'OPEN' FUNCTION
         LTR   R15,R15             OPEN OK ??
         BNZ   ENDITALL            NOPE; CAN'T WORK
         EJECT
*---------------------------------------------------------------------*
*---     READ IN ALL THE 'NOTE' DATA, MATCHING THE KEY DATA        ---*
*---     WITH THE USER-SPECIFIED KEY.  BUILD, IN STORAGE, A        ---*
*---     SERIES OF ONE OR MORE ARCHIVE RECORDS, MINUS KEY FIELDS,  ---*
*---     CONSISTING OF COMPACTED NOTE DATA.  EACH RECORD WILL      ---*
*---     BE BUILT IN SUBPOOL 12, WITH A TWO-WORD PREFIX TO BE      ---*
*---     USED TO CONTROL THE WRITING PROCESS LATER. THIS PREFIX    ---*
*---     WILL CONTAIN A CHAIN POINTER TO THE NEXT RECORD AND       ---*
*---     THE LENGTH OF THIS RECORD.                                ---*
*---------------------------------------------------------------------*
         BAL   R14,OPNVI           OPEN THE NONVSAM DATASET
         L     R9,VS1LIM           LOAD MAX. RECORD LENGTH
         LA    R9,8(,R9)           ACCOUNT FOR PREFIX
         ICM   R9,8,=AL1(12)
         GETMAIN R,LV=(9)          GRAB A BUFFER
         LR    R8,R1               COPY ITS ADDRESS
         LA    R9,0(,R9)           CLEAR HIGH-ORDER BYTE
         LA    R15,0               SOURCE LENGTH/PAD = ZEROS
         MVCL  R8,R14              AND CLEAR THE BUFFER AREA
         MVC   4(4,R1),=A(RECKLEN) BARE KEY, TO START
         ST    R1,CHAIN            SAVE THE RECORD POINTER
         LR    R8,R1               AND COPY ITS ADDRESS
NIN1     DS    0H
         BAL   R14,GET             GO GET A RECORD
         LTR   R0,R0               RECORD LENGTH OF ZERO ??
         BZ    NIN4                YES; BUFFER CHAIN IS LOADED
         LR    R4,R1               COPY RECORD ADDRESS
         LR    R5,R0               AND LENGTH
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    CLEAR THE LINE AREA
         LR    R15,R5              COPY THE DATA LENGTH
         CH    R15,=H'100'         OVER A HUNDRED ??
         BNH   *+8                 NOPE
         LA    R15,100             YES, ASSUME 100
         BCTR  R15,R0              DECREMENT BY ONE
         MVC   LINE+1(12),=C'NOTEDATA -->'
         EX    R15,COPYNOTE        COPY DATA TO OUTPUT LINE
         #PUT  LINE                AND DISPLAY THE DATA
         L     R2,CMPWRK           POINT TO COMPACT WORK AREA
         STH   R5,0(,R2)           SAVE ORIGINAL RECORD LENGTH
         LA    R2,2(,R2)           POINT TO ACTUAL OUTPUT AREA
         ST    R5,CALLIST+12
         CALL  COMPACT,((R4),CALLIST+12,(R2)),MF=(E,CALLIST)
         L     R4,CMPWRK           LOAD NEW RECORD POINTER
         LR    R5,R0               COPY LENGTH
         LA    R5,2(,R5)           ACCOUNT FOR LENGTH FIELD
         L     R2,4(,R8)           LOAD CURRENT LENGTH
         LA    R2,3(R2,R5)         COMPUTE NEW LENGTH
         C     R2,VS1LIM           TOO LONG TO ADD ??
         BH    NIN3                YES; START A NEW RECORD
NIN2     DS    0H
         L     R6,4(,R8)           LOAD CURRENT LENGTH
         LR    R2,R6               COPY LENGTH
         LA    R2,3(R5,R2)         ACCOUNT FOR NEW RECORD
         ST    R2,4(,R8)           STORE UPDATED LENGTH
         LA    R6,8(R6,R8)         POINT TO DATA FIELD
         STCM  R5,7,0(R6)          STORE SEGMENT LENGTH
         LA    R6,3(,R6)           POINT PAST IT
         LR    R7,R5               COPY LENGTH TO MOVE
         MVCL  R6,R4               MOVE RECORD INTO BUFFER
         B     NIN1                AND CONTINUE
NIN3     DS    0H
         L     R3,VS1LIM           LOAD MAX. RECORD LENGTH
         LA    R3,8(,R3)           ACCOUNT FOR PREFIX
         ICM   R3,8,=AL1(12)
         GETMAIN R,LV=(3)          GRAB A BUFFER
         LR    R2,R1               COPY ITS ADDRESS
         LR    R3,R0               AND LENGTH
         LA    R15,0               SOURCE LENGTH/PAD = ZEROS
         MVCL  R2,R14              AND CLEAR THE BUFFER AREA
         MVC   4(4,R1),=A(RECKLEN) BARE KEY, TO START
         ST    R1,0(,R8)           SAVE THE RECORD POINTER
         LR    R8,R1               AND COPY ITS ADDRESS
         B     NIN2                ADD DATA TO NEW BUFFER
COPYNOTE MVC   LINE+13(*-*),0(R4)  COPY OF NOTEDATA TO LINE
NIN4     DS    0H
         EJECT
*---------------------------------------------------------------------*
*---     HERE'S THE MEAT OF THE PROCESSING. THE BASIC PROCESS IS   ---*
*---           THIS:                                               ---*
*---                                                               ---*
*---     1. USING THE CONTROL INFORMATION WE WERE GIVEN AND THE    ---*
*---        INFORMATION WE'VE DEVELOPED, LOCATE THE HEADER RECORD  ---*
*---        FOR THE FIRST MEMBER. WE'LL USE THE VS1BUF2 AREA FOR   ---*
*---        HEADER/KEY CONSTRUCTION.                               ---*
*---                                                               ---*
*---     2. USING THE HEADER RECORD KEY, MODIFIED TO BE A 'NOTE'   ---*
*---        RECORD, WRITE OUT THE RECORDS OF NOTE DATA BUILT IN    ---*
*---        THE PREVIOUS STEP. THEN RETURN TO STEP1 FOR ANOTHER    ---*
*---        HEADER (MAYBE).                                        ---*
*---------------------------------------------------------------------*
MEMBERS  DS    0H
         L     @BUF1,VS1BUF1       LOAD BUFFER ADDRESS
         L     @RPL1,RPL1          LOAD RPL1 ADDRESS
         L     @RPL2,RPL2          LOAD RPL2 ADDRESS
         USING REC,@BUF1           BASE THE RECORD DSECT
         XC    RECTT(RECKLEN),RECTT  START AT THE BEGINNING !!
         MODCB RPL=(@RPL1),                                            X
               OPTCD=(SEQ,FKS,KGE,SYN,NUP),                            X
               ARG=(@BUF1),AREA=(@BUF1),AREALEN=(*,VS1LIM),            X
               MF=(G,GENWK)        POSITION TO CLUSTER START
         POINT RPL=(@RPL1)         GET TO IT
NEXTHDR  DS    0H
         GET   RPL=(@RPL1)         AND READ A HEADER RECORD
         CLI   RECTT,#RTHDR        HEADER RECORD ??
         BNE   ENDITALL            NOPE; ALL DONE ---
         #IF   RSRALIAS,ON,NEXTHDR NO NOTES FOR ALIASES !!
         LA    R1,RECN             POINT TO THE HEADER
         LA    R0,0                USE DEFAULT QUALIFIER DATA
         CALL  ARCHKNAM            GO CHECK: DO WE PROCESS THIS ITEM ??
         LTR   R15,R15             PASS THE CHECK ??
         BNZ   NEXTHDR             NOPE ---
         ICM   R8,15,RSRNOT#       LOAD CURRENT NOTE RECORD COUNT
         L     R9,CHAIN            POINT TO THE NOTE DATA
ADDN1    DS    0H
         DROP  @BUF1
         USING REC,@BUF2
         LA    @BUF2,8(,R9)        POINT TO THE ACTUAL BUFFER
         L     R10,4(,R9)          LOAD BUFFER LENGTH
         MVC   0(RECKLEN,@BUF2),0(@BUF1) COPY THAT KEY
         MVI   RECTT,#RTNOTE       RESET TO NOTE TYPE
         LA    R8,1(,R8)           INCREMENT THE NOTE-DATA COUNT
         STCM  R8,15,RECSEQ#       SAVE AS SEQUENCE NUMBER
         MODCB RPL=(@RPL2),                                            X
               OPTCD=(DIR,FKS,KEQ,SYN),                                X
               ARG=(@BUF2),                                            X
               AREA=(@BUF2),                                           X
               RECLEN=(R10),                                           X
               MF=(G,GENWK)        POSITION TO ITEM DATA START
         PUT   RPL=(@RPL2)         WRITE THE NOTE-DATA BUFFER
         LTR   R15,R15             DID IT WRITE OK ??
         BNZ   1(,R15)             NOPE ---
         L     R9,0(,R9)           POINT TO NEXT BUFFER
         LTR   R9,R9               ANY RECORD HERE ??
         BZ    UPHDR               NOPE; DO THE NEXT ONE
         CLC   4(4,R9),=A(RECKLEN) JUST A BARE KEY
         BH    ADDN1               NOPE; WRITE IT OUT
         DROP  @BUF2
         USING REC,@BUF1
UPHDR    DS    0H
         ENDREQ RPL=(@RPL2)
         MODCB RPL=(@RPL1),                                            X
               OPTCD=(DIR,FKS,KGE,SYN,UPD),                            X
               MF=(G,GENWK)        POSITION TO CLUSTER START
         GET   RPL=(@RPL1)
         STCM  R8,15,RSRNOT#       SAVE UPDATED NOTE-DATA COUNT
         PUT   RPL=(@RPL1)         WRITE THE UPDATED HEADER RECORD
         MODCB RPL=(@RPL1),                                            X
               OPTCD=(SEQ,FKS,KGE,SYN,NUP),                            X
               MF=(G,GENWK)        POSITION TO CLUSTER START
         L     R15,MCNT            LOAD ITEM COUNT
         LA    R15,1(,R15)         INCREMENT BY ONE
         ST    R15,MCNT            AND SAVE UPDATED COUNT
         #FORMAT RECTT,,ADDED
         #PUT  LINE                AND OUTPUT THE MESSAGE
         MVI   RECTT,#RTHDR        INITIAL RECORD TYPE
         IC    R15,RECT+9          INSERT A 'TYPE' BYTE
         LA    R15,1(,R15)         INCREMENT BY ONE
         STC   R15,RECT+9          SAVE UPDATED VALUE
         POINT RPL=(@RPL1)         GET TO IT
         B     NEXTHDR             GO DO THE NEXT ONE
ENDITALL DS    0H
         L     R0,MCNT             LOAD MEMBER COUNT
         LTR   R0,R0               ZERO COUNT ??
         BZ    END2                YES ---
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,MCMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
END2     DS    0H
         CLC   ACB1,=F'0'          WAS ACB EVER OPENED ??
         BE    NOACB               NOPE ---
         LA    R1,VSAM1DD          POINT TO THE DDNAME
         LA    R0,4                SET 'CLOSE' REQUEST
         CALL  ARCHVSOP            CALL THE VSAM 'CLOSE' ROUTINE
NOACB    DS    0H
         BAL   R14,NVSCLOSE        GO CLOSE THE INPUT FILE
         XC    CHAIN,CHAIN         CLEAR THE CHAIN POINTER
         L     R13,4(,R13)         NOTE BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS RC = 0
         MVI   12(R13),255
         BR    R14                 AND RETURN TO CALLER
         TITLE 'OPEN NONVSAM OUTPUT DATASET '
*---------------------------------------------------------------------*
*---     THIS LITTLE LOCAL SERVES ONLY ONE PURPOSE: TO OPEN        ---*
*---     THE NONVSAM SEQUENTIAL DATASET CONTAINING THE 'NOTE'      ---*
*---     DATA TO BE ADDED TO THE ARCHIVE CLUSTER.                  ---*
*---------------------------------------------------------------------*
         SPACE 3
OPNVI    DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
*---
*---     BUILD A DCB, TO START, FOR DSORG CHECKING
*---
         GETMAIN R,LV=QSDCBL,SP=10 GRAB STORAGE FOR BPAM DCB
         ST    R1,NDCBA            AND STORE ADDRESS IN ARCHIVWA
         LR    R2,R1               COPY ITS ADDRESS
         MVI   NDCBA,X'80'         BUILD OPEN PARM LIST
         MVC   0(QSDCBL,R1),QSDCB  COPY DCB TO DYNAMIC AREA
         USING IHADCB,R2           BASE THE DCB DSECT
         MVC   DCBDDNAM,NVSAMDD    MOVE IN THE DDNAME
         OPEN  ,MF=(E,NDCBA) OPEN THE DCB
*---
*---     USING THE RECFM AS A GUIDE, SET THE S-TYPE ADDRESS OF
*---     THE APPROPRIATE DEBLOCKER INTO THE BRANCH INSTRUCTION AT
*---     'BLOCK'
*---
         MVC   BLOCK(2),=X'47F0'   FIRST HALF OF A BRANCH
         TM    DCBRECFM,DCBRECU    U-FORMAT ??
         BNO   OPNVI7              NOPE ---
         B     OPNVI11             SCAT ---
OPNVI7   DS    0H
         TM    DCBRECFM,DCBRECV+DCBRECBR VB FORMAT ??
         BNO   OPNVI8              NOPE ---
         MVC   BLOCK+2(2),=S(GETV) SET 'U' ROUTINE
         B     OPNVI12             YES; ERROR MSG AND QUIT
OPNVI8   DS    0H
         TM    DCBRECFM,DCBRECF+DCBRECBR FB FORMAT ??
         BNO   OPNVI9              NOPE ---
         MVC   BLOCK+2(2),=S(GETFB) SET 'FB' ROUTINE
         B     OPNVI12             SCAT ---
OPNVI9   DS    0H
         TM    DCBRECFM,DCBRECV    V FORMAT ??
         BNO   OPNVI10             NOPE ---
         MVC   BLOCK+2(2),=S(GETV) SET 'V' ROUTINE
         B     OPNVI12             SCAT ---
OPNVI10  DS    0H
         TM    DCBRECFM,DCBRECF    V FORMAT ??
         BNO   OPNVI11             NOPE ---
         MVC   BLOCK+2(2),=S(GETF) SET 'F' ROUTINE
         B     OPNVI12             SCAT ---
OPNVI11  DS    0H
         #PUT  =CL133'- INVALID OR UNKNOWN NOTEDATA INPUT FORMAT.'
         #PUT  =CL133'  ADDNOTE REQUEST IS IGNORED. '
         B     ENDITALL
OPNVI12  DS    0H
         L     R0,=F'32768'        NOTE COMPRESS MAX LENGTH
         ICM   R0,8,=AL1(10)       INSERT SUBPOOL NUMBER
         GETMAIN R,LV=(0)
         STM   R0,R1,CMPWRKL       STORE COMPRESS WORK-AREA ADDRESS
         LM    R14,R12,IOSAVE      RENOTE ENTRY REGISTERS
         BR    R14                 AND RETURN TO LOCAL CALLER
         DROP  R2
         TITLE 'QSAM CLOSE ROUTINE'
*---------------------------------------------------------------------*
*---     THIS LITTLE ROUTINE CLOSES THE NONVSAM DATASET, WITH      ---*
*---     THE REREAD OPTION.  THIS ALLOWS MULTIPLE SETS OF NOTE     ---*
*---     DATA TO BE RETAINED ON ONE SEQUENTIAL DATASET.  WHILE     ---*
*---     THE MECHANISM WORKS WITH JES2 SYSIN DATA, I HAVE NO       ---*
*---     IDEA WHETHER IT WORKS WITH JES3.                          ---*
*---                                                               ---*
*---     IT SEEMS THAT JES2 HONORS THE CLOSE OPTIONS, TREATING     ---*
*---     EACH SYSIN DATASET IN THE SAME FASHION AS OPEN/CLOSE/     ---*
*---     EOV WOULD TREAT A NON-JES DATASET ON REUSABLE MEDIA.      ---*
*---     (DASD, TAPE, ETC. BUT NOT DIRECT 3505 INPUT)              ---*
*---------------------------------------------------------------------*
         SPACE 3
NVSCLOSE DS    0H
         STM   R14,R12,IOSAVE      SAVE THE ENTRY REGISTERS
         L     R2,NDCBA            NOTE PRIMARY DCB ADDRESS
         LA    R2,0(,R2)           PURIFY THE ADDRESS
         LTR   R2,R2               ZERO ??
         BZ    NVC1                YES; NO DCB HERE ---
         TM    48(R2),X'10'        IS IT OPEN ??
         BZ    NVCA                NOPE ---
         CLOSE (,REREAD),MF=(E,NDCBA) CLOSE THE DCB
NVCA     DS    0H
         #FREE (2)                 RELEASE BUFFER POOL, IF ANY
         XC    NDCBA,NDCBA         AND RESET THE POINTER FIELD
NVC1     DS    0H
         XC    CMPWRKL(8),CMPWRKL
         MVC   BLOCK+2(2),=S(0(R14))
         #SET  NVSPS,OFF
         #SET  NVSPO,OFF
         LM    R14,R12,IOSAVE      RESTORE THE REGISTERS
         BR    R14                 AND RETURN TO CALLER
         TITLE 'QSAM READ ROUTINES '
*---------------------------------------------------------------------*
*---     REGS AT EXIT:                                             ---*
*---              R0 ::= LOGICAL RECORD LENGTH                     ---*
*---              R1 --> LOGICAL RECORD                            ---*
*---              R14 -> RETURN ADDRESS                            ---*
*---                                                               ---*
*---     THE SPECIAL CASE OF A RECORD LENGTH OF ZERO SIGNALS A     ---*
*---     END OF FILE CONDITION.                                    ---*
*---------------------------------------------------------------------*
         SPACE 3
GET      DS    0H
         STM   R14,R12,IOSAVE      SAVE INPUT REGISTERS
         L     R9,NDCBA            NOTE DCB ADDRESS
         USING IHADCB,R9           AND BASE ITS DSECT
REGET    DS    0H
         GET   (9)                 READ A RECORD
         B     BLOCK               GO SET UP RETURN VALUES
         TITLE 'QSAM GET REGISTER SETUPS '
*---------------------------------------------------------------------*
*---     FIXED, UNBLOCKED RECORDS.                                 ---*
*---------------------------------------------------------------------*
         SPACE 3
GETF     DS    0H
         LH    R0,DCBBLKSI         LOAD THE BLKSIZE
         LR    R2,R0               COPY RECORD LENGTH
         LA    R2,0(R2,R1)         POINT TO RECORD END
         SH    R2,=H'8'            BACK UP 8 CHARS.
         CLC   CURKEY,0(R2)        CORRECT NOTEDATA KEY ??
         BNE   REGET               NOPE; SKIP THIS RECORD
         SH    R0,=H'8'            LEAVE OFF THE 'KEY'
         B     GETRET              AND GO RETURN TO LOCAL CALLER
         SPACE 3
*---------------------------------------------------------------------*
*---     FIXED, BLOCKED RECORDS.                                   ---*
*---------------------------------------------------------------------*
         SPACE 3
GETFB    DS    0H
         LH    R0,DCBLRECL         LOAD LOGICAL RECORD LENGTH
         LR    R2,R0               COPY RECORD LENGTH
         LA    R2,0(R2,R1)         POINT TO RECORD END
         SH    R2,=H'8'            BACK UP 8 CHARS.
         CLC   CURKEY,0(R2)        CORRECT NOTEDATA KEY ??
         BNE   REGET               NOPE; SKIP THIS RECORD
         SH    R0,=H'8'            LEAVE OFF THE 'KEY'
         B     GETRET              AND GO RETURN TO LOCAL CALLER
         SPACE 3
*---------------------------------------------------------------------*
*---     VARIABLE, UNBLOCKED OR UNBLOCKED, RECORDS                 ---*
*---------------------------------------------------------------------*
         SPACE 3
GETV     DS    0H
         CLC   CURKEY,4(R1)        CORRECT NOTEDATA KEY ??
         BNE   REGET               NOPE; SKIP THIS RECORD
         LH    R0,0(,R1)           LOAD LENGTH FROM RDW/BDW
         SH    R0,=H'12'           DROP RDW AND KEY FIELD
         LA    R1,12(,R1)          POINT TO ACTUAL NOTE DATA
         B     GETRET              AND GO RETURN TO LOCAL CALLER
         SPACE 3
*---------------------------------------------------------------------*
*---     COMMON RETURN LINKAGE CODE                                ---*
*---------------------------------------------------------------------*
GETRET   DS    0H
         STM   R0,R1,IOSAVE+8
         LM    R14,R12,IOSAVE      RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN ---
         SPACE 3
*---------------------------------------------------------------------*
*---     END-OF-FILE ON THE NOTEDATA DATASET                       ---*
*---------------------------------------------------------------------*
         SPACE 3
GETEOD   DS    0H
         LA    R1,0                NO RECORD ADDRESS
         LA    R0,0                AND NO LENGTH
         B     GETRET              AND RETURN TO CALLER
         DROP  R9
*---------------------------------------------------------------------*
*---     SOME ERROR STUFF                                          ---*
*---------------------------------------------------------------------*
NODDERR  DS    0H
         #ERR  MSG=1
         #ERR  MSG=6
         B     ENDITALL
ORGERR   DS    0H
         #ERR  MSG=3
         #ERR  MSG=6
         B     ENDITALL
ERRDEV   DS    0H
         #ERR  MSG=2
         #ERR  MSG=6
         B     ENDITALL
         LTORG
MCMSG    DC    CL133' '
         ORG   MCMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    C' TOTAL MEMBER(S) PROCESSED.'
         ORG
ADDED    DC    AL1(ADDMSGE-ADDMSG)
ADDMSG   DC    C' NOTE DATA INSERTED.'
ADDMSGE  EQU   *
MINREC   DC    A(RECSIZE)
QSDCB    DCB   DSORG=PS,MACRF=GL,DDNAME=X,EODAD=GETEOD,BFTEK=A
QSDCBL   EQU   *-QSDCB
         DCBD  DSORG=(PS,PO)
         COPY  #RECS
         COPY  ##ARCHWK
         END
