VSOP     TITLE 'ARCHIVER --- VSAM OPEN/CLOSE SUBROUTINE'
ARCHVSOP CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         COPY #ARCBITS
         USING ARCHVSOP,R15
         #STAMP
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R11,R15             LOAD ROUTINE BASE REGISTER
         DROP  R15                 DROP THE OLD BASE
         USING ARCHVSOP,R11        DEFINE THE NEW BASE REGISTER
         LA    R14,72(,R13)        POINT DOWN THE SAVE AREA STACK
         ST    R14,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R14)         AND BACK POINTER
         LR    R13,R14             LOAD NEW SAVE AREA POINTER
         L     R14,4(,R13)         RELOAD BACK POINTER
         L     R14,12(,R14)        RELOAD ORIG. REG 14
         USING MAINWK,R12          BASE THE MAIN WORK AREA
         LR    R10,R1              COPY THE PARAMETER REGISTER
         USING #VSPRMS,R10         AND BASE ITS DSECT
         LTR   R0,R0               WAS IT A CLOSE REQUEST ??
         BNZ   CLOSEIT             YES; CLOSE THE FILE
*---------------------------------------------------------------------*
*---     DETERMINE NECESSARY STORAGE FOR BLOCKS AND BUFFERS AND   ----*
*---     DO A SINGLE LARGE GETMAIN FROM SUBPOOL 12.  THE FIRST    ----*
*---     WORD OF THE AREA WILL CONTAIN THE AREA LENGTH.           ----*
*---------------------------------------------------------------------*
         SHOWCB FIELDS=(ACBLEN,RPLLEN),   GET THE CONTROL BLOCK SIZES  X
               AREA=(S,DWORK),                                         X
               LENGTH=8,                                               X
               MF=(G,GENWK)
         LM    R4,R5,DWORK         LOAD THE TWO LENGTHS
         LR    R6,R5               COPY THE RPL LENGTH
         MH    R6,=H'3'            PLAN FOR THREE RPL'S
         LA    R6,4(R6,R4)         PLUS THE ACB + 4
         GETMAIN R,LV=(6),SP=10    GRAB SOME STORAGE
         ST    R6,0(,R1)           STORE LENGTH IN FIRST WORD
         LA    R1,4(,R1)           AND POINT PAST IT
*---------------------------------------------------------------------*
*---     USING GENCB, BUILD THE NECESSARY VSAM CONTROL BLOCKS.    ----*
*---     WE'LL BUILD AN ACB AND THREE RPL'S IN THIS AREA.  WE     ----*
*---     NEED TO CHECK THE I/O MODE IN #VSPRMS WHEN WE BUILD THE  ----*
*---     ACT, TO DETERMINE IF IT'S INPUT OR OUTPUT.  ANY VALUE    ----*
*---     EXCEPT THE STRING 'OUTPUT  ' WILL DEFAULT TO INPUT MODE. ----*
*---------------------------------------------------------------------*
         ST    R1,ACBADDR          SAVE AS ACB ADDRESS
         LR    R2,R1               COPY ITS ADDRESS
         GENCB BLK=ACB,                                                X
               WAREA=(2),                                              X
               LENGTH=(4),                                             X
               AM=VSAM,                                                X
               STRNO=1,                                                X
               DDNAME=(*,VSAMDD),                                      X
               MACRF=(KEY,DIR,SEQ,IN,SIS),                             X
               MF=(G,GENWK)
         CLC   VSMODE,=CL8'OUTPUT' OUTPUT NEEDED ??
         BNE   NOTOUT              NOPE ---
         MODCB ACB=(*,ACBADDR),    MAKE IT OUTPUT                      X
               MACRF=(KEY,DIR,SEQ,OUT,SIS),                            X
               MF=(G,GENWK)
NOTOUT   DS    0H
         MVI   ACBADDR,X'80'       MARK AS LAST FOR OPEN
         LA    R3,0(R4,R2)         POINT TO RPL PART OF AREA
         LA    R6,0(R5,R5)         TWO RPL'S LENGTH
         LA    R6,0(R5,R6)         THREE RPL'S LENGTH
         GENCB BLK=RPL,                                                X
               WAREA=(3),                                              X
               LENGTH=(6),                                             X
               COPIES=3,                                               X
               ACB=(*,ACBADDR),                                        X
               AM=VSAM,                                                X
               MF=(G,GENWK)
         LR    R8,R1               COPY THE ADDRESS
         ST    R8,VSRPL1           SAVE ITS ADDRESS
         LA    R8,0(R5,R8)         POINT TO SECOND RPL
         ST    R8,VSRPL2           SAVE ITS ADDRESS
         LA    R8,0(R5,R8)         POINT TO THIRD RPL
         ST    R8,VSRPL3           SAVE ITS ADDRESS
*---------------------------------------------------------------------*
*---     CONTROL BLOCKS ARE BUILT. NOW OPEN THE VSAM CLUSTER, GET ----*
*---     THE LRECL AND ALLOCATE STORAGE FOR THE BUFFERS WE'LL     ----*
*---     PROBABLY NEED. AGAIN, DO IT ALL IN THREE'S.              ----*
*---------------------------------------------------------------------*
         OPEN  ,MF=(E,ACBADDR)     OPEN THE CLUSTER
         LTR   R15,R15             OPEN OK ??
         BZ    OPENOK              YES ---
         #ERROR 16,6
         B     NOTOPEN             CLEAR UP AND DIE ---
OPENOK   DS    0H
         SHOWCB ACB=(*,ACBADDR),   GET RECORD LENGTH                   X
               FIELDS=LRECL,                                           X
               AREA=(S,DWORK),                                         X
               LENGTH=4,                                               X
               MF=(G,GENWK)
         L     R3,DWORK            LOAD THE RECORD LENGTH
         ST    R3,VSLIM            SAVE RECORD LENGTH LIMIT
         LA    R3,4(,R3)           FUNNY STUFF FOR EXPORT/IMPORT
         LR    R5,R3               COPY THE LENGTH
         MH    R5,=H'3'            FIGURE THREE BUFFERS
         GETMAIN R,LV=(5),SP=10    GRAB SPACE FOR A BUFFER AREA
         ST    R1,VSBUF1           SAVE BUFFER
         LA    R2,0(R3,R1)         POINT TO SECOND BUFFER
         ST    R2,VSBUF2           AND SAVE ITS ADDRESS
         LA    R2,0(R3,R2)         POINT TO THIRD BUFFER
         ST    R2,VSBUF3           AND SAVE ITS ADDRESS
         LA    R14,0               SOURCE ADDRESS IS ZERO
         LA    R15,0               LENGTH/PAD IS ZEROS
         L     R4,VSBUF1           POINT TO AREA START
         MVCL  R4,R14              CLEAR ONE BUFFER
         XC    VSLEN1,VSLEN1       INITIAL BYTES USED = ZERO
         XC    VSLEN2,VSLEN2       INITIAL BYTES USED = ZERO
         XC    VSLEN3,VSLEN3       INITIAL BYTES USED = ZERO
*---------------------------------------------------------------------*
*---     NOW TEST. IF THE KEY LENGTH IS NOT EXACTLY RIGHT OR THE  ----*
*---     RECORD LENGTH IS TOO SMALL, WE'VE DONE ALL THIS FOR      ----*
*---     NAUGHT. ISSUE AN ERROR MESSAGE, UN-DO ALL THAT WE DID,   ----*
*---     SET A '8' RETURN CODE AND RETURN TO THE CALLER.          ----*
*---------------------------------------------------------------------*
         SHOWCB ACB=(*,ACBADDR),                                       X
               FIELDS=(LRECL,KEYLEN),                                  X
               AREA=(S,CALLIST),                                       X
               LENGTH=8,                                               X
               MF=(G,GENWK)
         LM    R7,R8,CALLIST       LOAD KEYLEN AND LRECL VALUES
         C     R8,=A(RECKLEN)      IS KEY LENGTH RIGHT ??
         BE    KEYOK               YES ---
         #ERROR  4,,6
         B     KILLIT              GO DO TERMINATION STUFF
KEYOK    DS    0H
         C     R7,=A(RECSIZE)      IS LRECL LARGE ENOUGH ??
         BNL   RECOK               YES ---
         #ERROR  5,,6
         B     KILLIT              GO DO TERMINATION STUFF
RECOK    DS    0H
*---------------------------------------------------------------------*
*---     INSERT BUFFER ADDRESSES AND LENGTHS IN THE RPL'S          ---*
*---------------------------------------------------------------------*
         MODCB RPL=(*,VSRPL1),     INSERT ACB ADDRESS                  X
               ACB=(*,ACBADDR),AREALEN=(*,VSLIM),                      X
               AREA=(*,VSBUF1),                                        X
               MF=(G,GENWK)
         MODCB RPL=(*,VSRPL2),     INSERT ACB ADDRESS                  X
               ACB=(*,ACBADDR),AREALEN=(*,VSLIM),                      X
               AREA=(*,VSBUF2),                                        X
               MF=(G,GENWK)
         MODCB RPL=(*,VSRPL3),     INSERT ACB ADDRESS                  X
               ACB=(*,ACBADDR),AREALEN=(*,VSLIM),                      X
               AREA=(*,VSBUF3),                                        X
               MF=(G,GENWK)
*---------------------------------------------------------------------*
*---     ONE LAST DETAIL. IF WE'RE OPENING THE CLUSTER FOR        ----*
*---     OUTPUT, WE SHOULD MAKE SURE THAT IT'S INITIALIZED        ----*
*---     PROPERLY.  WE CHECK THE 'ENDRBA' OF THE CLUSTER FOR      ----*
*---     THIS. IF IT'S ZERO, WE'LL CLOSE AND REOPEN THE CLUSTER,  ----*
*---     WRITE IN A DUMMY RECORD, AGAIN CLOSE AND REOPEN THE      ----*
*---     CLUSTER, ERASE THAT DUMMY RECORD AND AGAIN CLOSE AND     ----*
*---     RE-OPEN THE CLUSTER.  IT'S A LOT OF WORK BUT ITS EASIER  ----*
*---     THAN TRYING TO TEACH SOMEONE ALL ABOUT VSAM INITIAL LOAD ----*
*---     STATUS AND ITS CONSEQUENCES.                             ----*
*---------------------------------------------------------------------*
         TESTCB  ACB=(*,ACBADDR),  CHECK: OUTPUT ACB ??                X
               MACRF=OUT,                                              X
               MF=(G,GENWK)
         BNE   ENDOPEN             NOPE; WE'RE ALL DONE
         TESTCB ACB=(*,ACBADDR),                                       X
               ENDRBA=0,                                               X
               MF=(G,GENWK)        INITIAL LOAD STATUS ??
         BNE   ENDOPEN             NOPE ---
         L     R3,VSBUF1           POINT TO A BUFFER
         XC    0(80,R3),0(R3)      SET INITIAL RECORD VALUE
         MODCB RPL=(*,VSRPL1),                                         X
               AREA=(3),           SET RECORD ADDRESS                  X
               OPTCD=(SEQ,MVE),                                        X
               RECLEN=80,                                              X
               MF=(G,GENWK)
         L     R1,VSRPL1           POINT TO A RPL
         PUT   RPL=(1)             OUTPUT THE DUMMY RECORD
         L     R1,VSRPL1           POINT TO A RPL
         ENDREQ RPL=(1)
         CLOSE ,MF=(E,ACBADDR)     CLOSE THE CLUSTER
         OPEN  MF=(E,ACBADDR)      AND REOPEN THE CLUSTER
         MODCB RPL=(*,VSRPL1),                                         X
               AREA=(3),                                               X
               AREALEN=(*,VSLIM),                                      X
               ARG=(3),                                                X
               OPTCD=(FKS,KEQ,UPD,DIR),                                X
               MF=(G,GENWK)        UPDATE THE RPL
         L     R1,VSRPL1           POINT TO A RPL
         GET   RPL=(1)             READ THAT RECORD
         NC    0(80,R3),0(R3)      RIGHT RECORD ??
         BNE   KILLIT              NOPE ---
         L     R1,VSRPL1           POINT TO A RPL
         ERASE RPL=(1)             ERASE THAT RECORD
ENDOPEN  DS    0H
*---------------------------------------------------------------------*
*---     ONE LAST DETAIL: CLOSE THE CLUSTER, SET THE NUMBER OF    ----*
*---     CONCURRENT STRINGS TO THREE INSTEAD OF ONE AND RE-OPEN   ----*
*---     THE CLUSTER.                                             ----*
*---------------------------------------------------------------------*
         CLOSE ,MF=(E,ACBADDR)     CLOSE THE ACB
         MODCB ACB=(*,ACBADDR),                                        X
               BUFND=10,BUFNI=30,                                      X
               STRNO=3,                                                X
               MF=(G,GENWK)        RESET STRNO VALUE
         OPEN  ,MF=(E,ACBADDR)     AND RE-OPEN THE ACB
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS RC = 0
         MVI   12(R13),255
         BR    R14                 AND RETURN TO CALLER
         TITLE 'CLOSE INVALID CLUSTER AND RELEASE STORAGE'
*---------------------------------------------------------------------*
*---     IF WE ARE UNABLE TO USE THE CLUSTER WE'VE OPENED, CLOSE  ----*
*---     IT AND RELEASE THE STORAGE WE'VE ACQUIRED. WE'LL ALSO    ----*
*---     PRINT OUT SOME ERROR MESSAGES TO TELL THE USER THAT THIS ----*
*---     HAS OCCURRED, AND WHY (IF POSSIBLE).  NOTE THAT WE DO A  ----*
*---     SUBPOOL-TYPE FREEMAIN FOR THE ENTIRE SUBPOOL 12, RATHER  ----*
*---     THAN INDIVIDUAL AREAS.                                   ----*
*---------------------------------------------------------------------*
KILLIT   DS    0H
         MVI   ACBADDR,X'80'       MARK AS LAST FOR CLOSE
         CLOSE ,MF=(E,ACBADDR)     CLOSE THE CLUSTER
NOTOPEN  DS    0H
         LA    R0,0                LOAD A ZERO
         ST    R0,ACBADDR          SAVE
         ST    R0,VSLIM            DITTO THE MAX. LRECL
         XC    VSRPL1(12),VSRPL1   CLOBBER RPL ADDRESSES
         XC    VSBUF1(12),VSBUF1   CLOBBER BUFFER ADDRESSES
         XC    VSLEN1(12),VSLEN1   CLOBBER BUFFER BYTE COUNTERS
         XC    VSMODE(12),VSMODE   CLOBBER THE MODE INDICATOR
KILLED   DS    0H
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,8               SET ERROR RETURN CODE
         MVI   12(R13),255         AND 'DONE' FLAG
         BR    R14                 AND RETURN TO CALLER
         TITLE 'CLOSE CLUSTER AND RELEASE STORAGE, BY REQUEST'
*---------------------------------------------------------------------*
*---     IF REGISTER 0 IS NON-ZERO AT ENTRY, WE BRANCH TO THIS    ----*
*---     CODE TO CLOSE THE VSAM CLUSTER AND RELEASE THE STORAGE   ----*
*---     OCCUPIED BY VSAM BLOCKS, BUFFERS, ETC.  THE ONLY         ----*
*---     DIFFERENCE BETWEEN THIS CODE AND THE CODE AT LABEL       ----*
*---     KILLIT IS THE RETURN CODE SET, WHICH IS ZERO HERE.       ----*
*---------------------------------------------------------------------*
CLOSEIT  DS    0H
         MVI   ACBADDR,X'80'       MARK AS LAST FOR CLOSE
         CLOSE ,MF=(E,ACBADDR)     CLOSE THE CLUSTER
         LA    R0,0                LOAD A ZERO
         ST    R0,ACBADDR          SAVE
         ST    R0,VSLIM            DITTO THE MAX. LRECL
         XC    VSRPL1(12),VSRPL1   CLOBBER RPL ADDRESSES
         XC    VSBUF1(12),VSBUF1   CLOBBER BUFFER ADDRESSES
         XC    VSLEN1(12),VSLEN1   CLOBBER BUFFER BYTE COUNTERS
         XC    VSMODE(12),VSMODE   CLOBBER THE MODE INDICATOR
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               SET ERROR RETURN CODE
         MVI   12(R13),255         AND 'DONE' FLAG
         BR    R14                 AND RETURN TO CALLER
         SPACE 3
         #VSPRMS
         COPY  #RECS
         COPY  ##ARCHWK
         END
