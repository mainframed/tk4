PARS     TITLE 'RPARSE--OPERAND STRING PARSING ROUTINE'
*---------------------------------------------------------------------*
*---     RPARSE - PARSE A STRING OF POSITIONAL AND KEYWORD         ---*
*---           OPERANDS, USING A CALLER-DEFINED STRUCTURE          ---*
*---           DESCRIPTION.                                        ---*
*---                                                               ---*
*---     ARGUMENTS:                                                ---*
*---           WD 1 -- ADDRESS OF THE STRING TO BE EXAMINED. ALL   ---*
*---                   LEADING BLANKS MUST BE REMOVED.             ---*
*---           WD 2 -- ADDRESS OF A FULLWORD CONTAINING THE LENGTH ---*
*---                   OF THE STRING IN ARGUMENT 1.                ---*
*---           WD 3 -- THE ADDRESS OF THE START OF THE CALLER-     ---*
*---                   DEFINED STRING STRUCTURE DESCRIPTION.       ---*
*---                                                               ---*
*---     STRUCTURE DESCRIPTION:                                    ---*
*---           DS  H    NUMBER OF POSITIONAL ARGUMENTS, MAX.       ---*
*---           DS  CL12 THE POSITIONAL OPERAND DESCRIPTIONS        ---*
*---               DS  H   OPERAND LENGTH                          ---*
*---               DS  H   RESERVED FOR CALLER'S USE               ---*
*---               DS  AL4 OPERAND ADDRESS                         ---*
*---               DS  AL4 SUBLIST DESCRIPTION. SEE BELOW.         ---*
*---           DS  H    NUMBER OF KEYWORD OPERANDS                 ---*
*---           DS  CL20  KEYWORD OPERAND DESCRIPTIONS              ---*
*---               DS  CL8   THE EXPECTED KEYWORD                  ---*
*---               DS  AL2   OPERAND LENGTH                        ---*
*---               DS  AL2   RESERVED FOR CALLER'S USE             ---*
*---               DS  AL4   OPERAND ADDRESS                       ---*
*---               DS  AL4   SUBLIST DESCRIPTION, IN THE SAME      ---*
*---                         FORM AS THE OPERAND DESCRIPTION,      ---*
*---                         INCLUDING POSITIONAL PARMS, COUNTS,   ---*
*---                         KEYWORDS, ETC.                        ---*
*---                                                               ---*
*--- NOTE: THE FIELDS IN THE STRUCTURE DESCRIPTION MUST BE         ---*
*--- CONTIGUOUS. ALL TRADITIONAL ALIGNMENTS MUST BE BYPASSED.      ---*
*---                                                               ---*
*---     RETURNS:  THE OPERAND DESCRIPTION IS FILLED IN WITH       ---*
*---           APPROPRIATE ADDRESSES AND LENGTHS FOR THE VARIOUS   ---*
*---           KEYWORDS FOUND IN THE OPERAND STRING.               ---*
*---                                                               ---*
*---     RETURN CODES (IN R15):                                    ---*
*---           RC=0   SUCCESSFUL PARSE OF THE GIVEN STRING         ---*
*---           RC=4   PARSE SYNTAX ERROR                           ---*
*---           RC=8   POSITIONAL PARM FOUND AFTER FIRST KW PARM    ---*
*---           RC=12  MIS-MATCHED PARENTHESES                      ---*
*---           RC=16  MISSING '=' AFTER KEYWORD                    ---*
*---           RC=20  ZERO-LENGTH KEYWORD OR POSITIONAL PARAMETER  ---*
*---           RC=24  KEYWORD NOT FOUND IN SKELETON KEYWORD LIST   ---*
*---                  KEYWORD ADDRESS IN R0 ON RETURN              ---*
*---                  LENGTH IN HIGH-ORDER BYTE OF R15             ---*
*---           RC=28  SUBLIST IMPROPERLY ENDED                     ---*
*---           RC=32  QUOTED STRING IMPROPERLY ENDED               ---*
*---           RC=36  OPERANDS ARE NESTED TOO DEEP                 ---*
*---                                                               ---*
*---     ATTRIBUTES: SERIALLY REUSABLE                             ---*
*---                                                               ---*
*---     AUTHOR:                                                   ---*
*---           RICK FOCHTMAN, SYSTEMS PROGRAMMER                   ---*
*---           AMERICAN MEDICAL ASSOCIATION                        ---*
*---           535 NORTH DEARBORN STREET                           ---*
*---           CHICAGO, ILLINOIS                                   ---*
*---                                                               ---*
*---------------------------------------------------------------------*
         EJECT
RPARSE   CSECT
RPARSE   AMODE 31
RPARSE   RMODE ANY
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         USING RPARSE,R15
         #STAMP
         STM   R14,R12,12(R13)     SAVE ENTRY REGS
         LR    R12,R15             COPY E.P. ADDRESS
         DROP  R15
         USING RPARSE,R12
         LR    R10,R1              COPY PARMLIST POINTER
         LA    R3,PRSWORKL         LOAD WORK AREA SIZE
         GETMAIN R,LV=(3)
         LR    R2,R1               COPY AREA ADDRESS
         LA    R4,0
         LA    R5,0
         MVCL  R2,R4
         ST    R1,8(,R13)          STORE FORWARD POINTER
         ST    R13,4(,R1)          AND BACK POINTER
         LR    R13,R1              LOAD NEW S.A. POINTER
         USING PRSWORK,R13         AND BASE THE DSECT
         LA    R5,ESLSTTAB         POINT TO STACK AREA END
         LA    R4,SBLSTTAB         AND START
         SR    R5,R4               COMPUTE LENGTH
         STH   R5,STKLIM           AND SAVE AS STACKING LIMIT
         LR    R1,R10              RESTORE PARM POINTERS
         L     R5,0(,R1)           GET PARAMETERS--STRING ADDRESS
         L     R6,4(,R1)           STRING LENGTH
         L     R7,8(,R1)           SKELETON ADDRESS
         XR    R2,R2               ZERO STACK DEPTH
SUBSTR   DS    0H
         BAL   R10,CONSTRCT        CALL CONSTRCT--BUILD 1 LEVL OF TREE
         LTR   R15,R15             CHECK RC
         BNZ   EXITP               IF NON ZERO, ERROR--QUIT, RTN
         XR    R4,R4               ZERO R4 TO INDICATE POS PART
NXTPRT   DS    0H
         LH    R3,0(,R7)           SEARCH TREE FOR SUBLISTS--LIST LEN
         LA    R7,2(,R7)           BUMP PTR PAST LENGTH FLD
NXTENT   DS    0H
         LTR   R3,R3               IS COUNT ZERO?
         BNZ   CHKPRM              IF NO, BRANCH
         LTR   R4,R4               IS THIS POS PART ?
         BM    ENDLST              IF NOT, PROCESS END OF LIST
         BCTR  R4,0                SET R4 NEG TO INDICATE KEYWD PART
         B     NXTPRT              GO PROCESS KEYWD PART
CHKPRM   DS    0H
         LTR   R4,R4               CHECK R4 FOR MODE
         BZ    POSMD               IF ZERO, POS MODE
         LA    R7,8(,R7)           BUMP SKEL PTR PAST KEYWORD
POSMD    DS    0H
         MVC   SAVENT,0(R7)        MOVE OPERAND TO TEMP SAVE AREA
         LA    R7,12(,R7)          BUMP PTR PAST OPERAND INFO
         BCTR  R3,0                DECREMENT LIST COUNTER
         CLC   SAVENT+8(4),=XL4'0' CHECK SUBLIST POINTER
         BE    NXTENT              IF PTR=0, NO SUBLIST--DO NEXT ENT
         CLC   SAVENT(2),=XL4'00'  IS LENGTH ZERO ??
         BE    NXTENT              YES; NO LIST TO PROCESS
         CH    R2,STKLIM           SAVE CURRENT STATUS IN STACK--CHECK
         BNL   ER1                 IF OVFLW, ERROR
         STH   R4,SBLSTTAB(R2)     SAVE MODE
         STH   R3,SBLSTTAB+2(R2)   SAVE LIST COUNTER
         ST    R7,SBLSTTAB+4(R2)    SAVE LIST POINTER
         LA    R2,8(,R2)           PUSH DOWN STACK DEPTH
         MVI   WORK,X'0'           SET UP PARAMS FOR SBLST ANALYSIS
         L     R5,SAVENT+4         STRG ADDR TO R5
         LH    R6,SAVENT           STRG LEN TO R6
         L     R7,SAVENT+8         SKEL ADDR TO R7
         LA    R7,0(,R7)           CLEAR R7 BITS 0-7
         CLI   0(R5),C'('          IS 1ST CHAR L PAREN
         BNE   SUBSTR              IF NO, PASS AS IS
         LA    R5,1(,R5)           ELSE REMOVE PARENS--BUMP STRG ADDR
         SH    R6,=H'2'            DECREMENT LENGTH BY 2
         B     SUBSTR              PASS PARAM STRIPPED OF PARENS
ENDLST   DS    0H
         LTR   R2,R2               END OF A SKEL LEVEL--CHECK STACK DEP
*        BNZ   FINISHED            IF ZERO, ALL TRHOUGH
         BZ    FINISHED            IF ZERO, ALL TRHOUGH
         SH    R2,=H'8'            ELSE POP UP STACK
         LH    R4,SBLSTTAB(R2)     RESTORE STATUS--MODE INDIC TO R4
         LH    R3,SBLSTTAB+2(R2)   LIST COUNTER TO R3
         L     R7,SBLSTTAB+4(R2)   LIST POINTER TO R7
         B     NXTENT              GO FOR NEXT ENTRY
FINISHED DS    0H
         XR    R15,R15             SUCESSFUL FINISH--SET RC=0
EXITP    DS    0H
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         STM   R15,R1,16(R13)      SAVE RETURN VALUES
         L     R1,8(,R13)          LOAD MY AREA POINTER
         FREEMAIN R,LV=PRSWORKL,A=(1)
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 AND RETURN TO CALLER
ER1      DS    0H
         LA    R15,36              OPRNDS NESTED TOO DEEP RC=36
         B     EXITP               EXIT
         EJECT
*---------------------------------------------------------------------*
*---                                                               ---*
*---     THE CONSTRCT ROUTINE FILLS IN ONE LEVEL OF THE            ---*
*---           SYNTAX SKELETON.                                    ---*
*---                                                               ---*
*---     R5 = ADDR OF 1ST BYTE OF STRING                           ---*
*---     R6 = LENGTH OF STRING                                     ---*
*---     R7 = ADDR OF SYNTAX SKELETON (DESIRED LEVEL)              ---*
*---     BAL  R10,CONSTRCT                                         ---*
*---     REGS 2 THROUGH 12 ARE SAVED                               ---*
*---                                                               ---*
*---------------------------------------------------------------------*
CONSTRCT DS    0H
         STM   R2,R12,CONSAVE      SAVE REGISTERS
         LA    R1,0                QUICK FIX ---
         LH    R2,0(,R7)           CLEAR THE SKEL--GET # POS PARAMS
         LA    R8,2(,R7)           SET PTR BEYOND COUNT HLFWD
         LTR   R2,R2               TEST # POS PARAMS
         BZ    ZERPOS              IF ZERO, SKIP TO KWDS
         USING PRSPSLN,R8
CLRPOS   DS    0H
         XC    PRSPSLN,PRSPSLN     CLEAR A POS PARAM
         XC    PRSPSLOC,PRSPSLOC   CLEAR A POS PARAM
         LA    R8,PRSPSBC(,R8)     BUMP PTR
         BCT   R2,CLRPOS           CHECK POS PARM COUNT
         DROP  R8
ZERPOS   DS    0H
         LH    R2,0(,R8)           START KWD PARAMS--GET LENGTH
         LA    R8,2(,R8)           BUMP PTR RAST CT HLFWD
         LTR   R2,R2               TEST # KWD PARAMS
         BZ    ZERKWD              IF ZERO, FINISHED CLEARING
         USING PRSKWKW,R8
CLRKWD   DS    0H
         XC    PRSKWLN,PRSKWLN     CLEAR A KWD PARAM
         XC    PRSKWLOC,PRSKWLOC   CLEAR A KWD PARAM
         LA    R8,PRSKWBC(,R8)     BUMP PTR
         BCT   R2,CLRKWD           CHECK KW PARAM CT
         DROP  R8
ZERKWD   DS    0H
         ST    R5,BEGOPR           DONE CLEARING--SAVE STRT OF OPRND
         LH    R8,0(,R7)           GET # POS TO R8
         LA    R7,2(,R7)           BUMP PTR PAST LENGTH
         MVI   MODE,X'00'          CLEAR MODE FLAGS
         LTR   R8,R8               TEST # POS PARAMS
         BZ    ZERPSP              IF ZERO SKIP POS PROCESSING
FIND     DS    0H
         LR    R3,R5               SET UP TO CALL LOCATE--ADDR
         LR    R4,R6               LENGTH
         BAL   R11,LOCATE          CALL LOCATE TO LOCATE SYNTAX GROUP
         B     BTAB1(R2)           BRANCH THRU BRANCH TABLE
BTAB1    DS    0H
         B     ENDSTRG             R2=0
         B     BLANK               R2=4
         B     COMMA               R2=8
         B     LPAREN              R2=12
         B     RPAREN              R2=16
         B     APOST               R2=20
         B     EQUAL               R2=24
COMMA    DS    0H
         TM    MODE,X'C0'          IN STRING OR SUBLIST MODE?
         BNZ   NEXT                IF YES, IGNORE
OPRAND   DS    0H
         TM    MODE,X'20'          IN KW MODE ?
         BZ    ENDPAR              IF NO, PROCESS END OF PARAM
         TM    MODE,X'10'          EQUAL ENCOUNTERED?
         BZ    ERR1                IF NO, ERROR
ENDPAR   DS    0H
         NI    MODE,X'FF'-X'10'    RESET EQUAL ENCTD FLAG
         LR    R2,R1               GET CURRENT STRG PTR VALUE
         S     R2,BEGOPR           COMPUTE LENGTH
         CLC   4(4,R7),=XL4'0'     IS OPRND ALREADY THERE?
         BNE   NOSTOR              IF SO, LEAVE AS IS
         STH   R2,0(,R7)           STORE LEN IN SKEL
         MVC   4(4,R7),BEGOPR      STORE PTR TO OPRND
NOSTOR   DS    0H
         TM    MODE,X'08'          END OF STRG?
         BO    EXITCON             IF SO, EXIT
         LA    R2,1(,R1)           COMPUTE START OF NEXT OPRND
         ST    R2,BEGOPR           SAVE IT
         TM    MODE,X'20'          KW MODE?
         BO    NEXT                IF YES, BRANCH
         LA    R7,12(,R7)          POSITION TO NEXT SKEL ENT
         BCT   R8,NEXT             CHECK POS PARAM CTR
ZERPSP   DS    0H
         LR    R8,R7               SET R8 TO KWD PART OF SKEL
         OI    MODE,X'20'          ENTER KW MODE
         LTR   R1,R1               ANYTHING FOUND YET ??
         BZ    FIND                NOPE; START NOW
NEXT     DS    0H
         LA    R1,1(,R1)           BUMP STRG PTR
         SR    R1,R5               COMPUTE LENGTH JUST SCANNED
         AR    R5,R1               SET NEW START ADDR
         SR    R6,R1               DECREMENT LEN BY SAME
         B     FIND                GO DO NEXT SCAN
LPAREN   DS    0H
         TM    MODE,X'C0'          IN STRG OR SBLST MODE?
         BNZ   P3                  IF EITHER, BRANCH
         TM    MODE,X'20'          KW MODE?
         BZ    P4                  IF NO, SKIP
         TM    MODE,X'10'          EQ ENCTD?
         BZ    ERR2                IF NO, ERROR
P4       DS    0H
         OI    MODE,X'80'          ENTER SUBLIST MODE
         LA    R9,1                SET LEVEL TO 1
         B     NEXT                GO DO NEXT SCAN
P3       DS    0H
         TM    MODE,X'80'          SBLST MODE?
         BZ    NEXT                IF NO, BRANCH
         LA    R9,1(,R9)           INCREMENT LEVEL
         B     NEXT                GO DO NEXT SCAN
RPAREN   DS    0H
         TM    MODE,X'80'          SBLST MODE?
         BZ    P5                  IF NO, BRANCH
         SH    R9,=H'1'            DECREMENT LEVEL
         BNZ   NEXT                IF NOT YET ZERO, BRANCH
         NI    MODE,X'FF'-X'80'    EXIT SUBLST MODE
         B     NEXT                GO DO NEXT SCAN
P5       DS    0H
         TM    MODE,X'40'          STRG MODE?
         BO    NEXT                IF YES, IGNORE
         B     ERR3                OTHERWISE ERROR
APOST    DS    0H
         TM    MODE,X'40'          STRG MODE?
         BZ    P7                  IF NO, BRANCH
         CLI   1(R1),C''''         NEXT CHAR APOST?
         BNE   P8                  IF NO, BRANCH
         LA    R1,1(,R1)           TWO IN A ROW--POSITION TO 2ND
         B     NEXT                IGNORE BOTH
P8       DS    0H
         NI    MODE,X'FF'-X'40'    EXIT STRG MODE
         B     NEXT                GO FOR NEXT SCAN
P7       DS    0H
         TM    MODE,X'20'          KW MODE?
         BZ    P9                  IF NO, BRANCH
         TM    MODE,X'10'          EQUAL SIGN ENCTD?
         BZ    ERR4                IF NO, ERROR
P9       DS    0H
         OI    MODE,X'40'          ENTER STRG MODE
         B     NEXT                GO DO NEXT SCAN
EQUAL    DS    0H
         TM    MODE,X'20'          KW MODE?
         BZ    P10                 IF NO, BRANCH
         TM    MODE,X'10'          EQ ENCTD?
         BO    NEXT                IF YES, IGNORE
KEYMODE  DS    0H
         OI    MODE,X'10'          SET EQ ENCTD FLAG
         LR    R2,R1               COMPUTE KW LENGTH
         S     R2,BEGOPR
         BZ    ERR5                IF ZERO, ERROR
         CH    R2,=H'8'            COMPARE LEN WITH 8
         BH    ERR5                IF GTR, ERROR
         MVC   WORK(8),=CL8' '     BLANK WORK AREA
         BCTR  R2,0                COMPUTE LENGTH CODE
         L     R3,BEGOPR           START OF KEYWORD TO R3
         L     R15,4(,R13)         LOAD OLD S.A. ADDRESS
         ST    R3,20(,R15)         STORE KEYWORD ADDRESS
         LA    R15,1(,R2)          COPY KEYWORD'S LENGTH
         SLL   R15,24              SHIFT TO HIGH-ORDER BYTE
         EX    R2,MVC1             MOVE IN KEYWORD
         LH    R2,0(,R8)           GET KEYWD LIST LENGTH
         LA    R3,2(,R8)           SET KEYWD LIST PTR
         LTR   R2,R2               TEST # KWDS
         BZ    ZERKWP              IF ZERO, SKIP KWD SEARCH
KEYSCAN  DS    0H
         CLC   WORK(8),0(R3)       COMPARE KW TO LIST
         BE    MATCH               BRANCH IF MATCH
         LA    R3,20(,R3)          OTHERWISE BUMP PTR
         BCT   R2,KEYSCAN          CHECK KWD LIST CTR
ZERKWP   DS    0H
         B     ERR6                IF NO MATCH, ERROR
MATCH    DS    0H
         LA    R7,8(,R3)           POSITION R7 TO OPRND PART OF SKEL
         LA    R2,1(,R1)           SET PTR TO START OF OPRND PART
         ST    R2,BEGOPR           STORE IT
         B     NEXT                GO DO NEXT SCAN
P10      DS    0H
         TM    MODE,X'C0'          STRG OR SUBLST MODE?
         BNZ   NEXT                IF EITHER, IGNORE
         MH    R8,=H'12'           COMPUTE LEN OF REST OF POS PARAMS
         AR    R8,R7               SET PTR TO KWD PART
         OI    MODE,X'20'          ENTER KEYWD MODE
         B     KEYMODE             GO PROCESS PARAM
BLANK    DS    0H
         TM    MODE,X'40'          STRG MODE?
         BO    NEXT                IF YES, IGNORE
ENDOPR   DS    0H
         OI    MODE,X'08'          SET END FLAG
         TM    MODE,X'80'          SBLST MODE?
         BO    ERR7                IF YES, ERROR
         TM    MODE,X'40'          STEG MODE?
         BO    ERR8                IF YES, ERROR
         B     OPRAND              GO FINISH PRECEDING OPERAND
ENDSTRG  DS    0H
         LR    R1,R5               COMPUTE END POINTER--CALL ADDR
         AR    R1,R6               PLUS LENGTH
         B     ENDOPR              GO PROCESS END OF OPERAND
EXITCON  DS    0H
         XR    R15,R15             SET RC=0
CEXIT    DS    0H
         LM    R2,R12,CONSAVE      RESTORE REGISTERS
         BR    R10                 RETURN
ERR1     DS    0H
         LA    R15,4               SET RC FOR ALL ERRORS
         B     CEXIT               RETURN
ERR2     DS    0H
         LA    R15,8               DITTO
         B     CEXIT
ERR3     DS    0H
         LA    R15,12
         B     CEXIT
ERR4     DS    0H
         LA    R15,16
         B     CEXIT
ERR5     DS    0H
         LA    R15,20
         B     CEXIT
ERR6     DS    0H
         ICM   R15,1,=AL1(24)
         B     CEXIT
ERR7     DS    0H
         LA    R15,28
         B     CEXIT
ERR8     DS    0H
         LA    R15,32
         B     CEXIT
         EJECT
*---------------------------------------------------------------------*
*---                                                               ---*
*---     SYNTAX CHARACTER LOCATE ROUTINE                           ---*
*---                                                               ---*
*---     R3=POINTER TO STRING                                      ---*
*---     R4=STRING LENGTH                                          ---*
*---     BAL R11,LOCATE                                            ---*
*---     R1=POINTER TO SYNTAX CHR                                  ---*
*---     R2=BRANCH TABLE VALUE DEPENDING ON CHARACTER              ---*
*---     USES REGS 0,1,2,3,4--DOESN'T SAVE                         ---*
*---                                                               ---*
*---------------------------------------------------------------------*
LOCATE   DS    0H
         LH    R0,=H'256'          SET R0 TO 256
         XR    R1,R1               CLEAR R1
         XR    R2,R2               CLEAR R2
         LTR   R4,R4               TEST LENGTH
         BZ    TESTLEN             GO ANALYZE TEST
EXTSTR   DS    0H
         CR    R4,R0               COMPARE R4 WITH 256
         BNH   P1                  IF NOT HIGHER, BRANCH
         LR    R4,R0               OTHERWISE SET R4=256
P1       DS    0H
         BCTR  R4,0                COMPUTE SCAN LENGTH CODE
         EX    R4,TRT1             EXECUTE TRT INSTRUCTION
         BCR   6,R11               IF TERMINATOR FOUND, EXIT
         AR    R3,R0               OTHERWISE COUNT IS EXHAUSTED
         SR    R4,R0               ADJUST PARAMETERS
TESTLEN  DS    0H
         BNP   ENDSTR              IF FINISHED GO RETURN END OF STRG
         B     EXTSTR              ELSE CONTINUE
ENDSTR   DS    0H
         BR    R11                 EXIT
TRT1     TRT   0(0,R3),TRTTAB1     TRT INSTRUCTION--OBJ OF EX
MVC1     MVC   WORK(0),0(R3)       MOVE KEYWD TO WORK AREA--OBJ OF EX
TRTTAB1  DC    XL256'0'            TRT TABLE FOR SYNTAX CHAR LOCATION
         ORG   TRTTAB1+77
         DC    AL1(12)             L PAREN
         ORG   TRTTAB1+93
         DC    AL1(16)             R PAREN
         ORG   TRTTAB1+64
         DC    AL1(4)              BLANK
         ORG   TRTTAB1+126
         DC    AL1(24)             EQUAL
         ORG   TRTTAB1+125
         DC    AL1(20)             APOSTROPHE
         ORG   TRTTAB1+107
         DC    AL1(8)              COMMA
         ORG
         SPACE 3
         LTORG
         SPACE 3
*---------------------------------------------------------------------*
*---     SAVE AREA/WORK AREA DSECT                                 ---*
*---------------------------------------------------------------------*
PRSWORK  DSECT
         DS    18F                 NEW SACE AREA FOR THE CHAIN
STKLIM   DC    AL2(ESLSTTAB-SBLSTTAB) LIMITING STACK DEPTH, HALFWD ALIG
MODE     DS    X                   MODE FLAGS
CONSAVE  DS    12F
BEGOPR   DS    A                   BEGINNING OF PARAM POINTER
WORK     DS    XL8                 WORK AREA, FULLWORD ALIGNED
SAVENT   DS    XL12                TEMP SKEL ENT SAVE AREA, FULLWD ALIG
SBLSTTAB DS    40F                 RECURSION STACK--2*(# RECURSIONS)
ESLSTTAB EQU   *                   END OF STACK--FOLLOWS SBLSTTAB
         DS    0D
PRSWORKL EQU   *-PRSWORK
         $PARSE DSECT
         END
