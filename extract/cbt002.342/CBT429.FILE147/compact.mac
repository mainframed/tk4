CMPK     TITLE 'HUFFMAN TREE COMPACTION ROUTINE'
*---------------------------------------------------------------------*
*---     THIS SUBROUTINE USES A HUFFMAN TREE TO COMPACT DATA INTO  ---*
*---     A VARIABLE-LENGTH BIT STRING. THE RESULTING STRING IS     ---*
*---     THEN PADDED TO A FULLWORD WITH ZEROS AND RETURNED TO THE  ---*
*---     CALLER, ALONG WITH THE LENGTH OF THE RESULTING STRING.    ---*
*---                                                               ---*
*---     ARGUMENTS:                                                ---*
*---         A(INPUT STRING)                                       ---*
*---         A( F'INPUT STRING LENGTH')                            ---*
*---         A(OUTPUT AREA)                                        ---*
*---                                                               ---*
*---     RETURNS:                                                  ---*
*---         1. COMPACTED STRING IN THE OUTPUT AREA                ---*
*---         2. RESULT LENGTH, IN BYTES, IN R0                     ---*
*---                                                               ---*
*---     NOTES: THE SAVE AREA CONVENTIONS ARE DESIGNED TO WORK     ---*
*---     WITH THE ARCHIVER PROGRAM'S 'STACKED' SAVE AREAS. IF      ---*
*---     ADAPTED TO OTHER USES, THE LINKAGE CONVENTIONS WILL       ---*
*---     REQUIRE MODIFICATION.                                     ---*
*---------------------------------------------------------------------*
COMPACT  CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         USING COMPACT,R15
         #STAMP
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LA    R14,72(,R13)        POINT TO NEXT SAVE AREA
         ST    R13,4(,R14)         BACK POINTER
         ST    R14,8(,R13)         FORWARD POINTER
         LR    R13,R14             BUMP DOWN THE CHAIN
         LR    R12,R15             COPY EPA
         DROP  R15
         USING COMPACT,R12         DECLARE THE BASE REGISTER
         LM    R2,R4,0(R1)         LOAD PARM VALUES
         L     R3,0(,R3)           LOAD INPUT STRING LENGTH
         LA    R5,0(R2,R3)         POINT TO INPUT END
         BCTR  R5,R0               AND BACK UP FOR BXLE
         BAL   R9,SELTAB           GO SELECT THE COMPACTION TABLE
         LR    R1,R4               COPY OUTPUT STRING POINTER
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R6,0
         LA    R7,0
         LA    R9,0
         LA    R10,0
         LA    R11,0
         LA    R14,0
         LA    R15,0
         USING CMPCT,R8            SET THE CONSTANTS DSECT
*        R14 WILL CONTAIN THE BITS TO BE ADDED TO THE CURRENT STRING
*        R9 WILL BE THE CURRENT STRING'S LENGTH
*        R10 WILL BE THE CURRENT STRING
*        R1 WILL BE THE OUTPUT POINTER
*        R7 WILL BE THE NUMBER OF BITS BEING ADDED
*        R0,R11 - WORK REGISTERS
*        R11 WILL ALSO BE THE RETURN REGISTER FROM THE STORE SUBROUTINE
ML1      DS    0H
         LR    R6,R5               COPY END POINTER
         SR    R6,R2               COMPUTE WHAT'S LEFT
         CH    R6,=H'4'            CLOSE TO END ??
         BL    MLX                 YES; SKIP THE NEXT CHECK
         CLC   1(3,R2),0(R2)       NEXT CHAR. REPEATED 4 TIMES ??
         BE    MULT1               YES; PROCESS SPECIAL WAY
MLX      DS    0H
         LA    R6,0
         IC    R6,0(,R2)           LOAD A CHARACTER
         SLL   R6,2                TIMES 4
         LA    R14,0               CLEAR LEFT REGISTER
         L     R15,TREEV(R6)       LOAD THE STRING/LENGTH
         SLDL  R14,8               SHIFT OFF THE LENGTH
         LR    R7,R14              COPY THE LENGTH
         LA    R3,32               LOAD LIMIT VALUE
         SR    R3,R9               MINUS CURRENT LENGTH
         LA    R14,0               CLEAR THAT REG
         SLDL  R14,0(R3)           SHIFT THOSE BITS OVER
         OR    R10,R14             ADD TO CURRENT STRING
         AR    R9,R7               ADD LENGTHS
         CH    R9,=H'32'           GOT ENOUGH, YET ---
         BL    ML2                 NOPE ---
         BAL   R11,STOREIT         NOPE; PARTIAL ADD AND STORE
ML2      DS    0H
         BXLE  R2,R4,ML1           AND CONTINUE ---
*        ALL DONE; STORE STRING REMAINDER AND EXIT
RET1     DS    0H
         CH    R9,=H'0'            ZERO LEFT ??
         BNH   RET2                YES ---
         ST    R10,0(,R1)          STORE THE LAST WORD
         LA    R1,4(,R1)           BUMP OUTPUT POINTER
RET2     DS    0H
         L     R2,4(,R13)          LOAD BACK SAVE AREA POINTER
         L     R2,24(,R2)          LOAD PARMLIST POINTER
         L     R2,8(,R2)           LOAD OUTPUT STRING POINTER
         LR    R0,R1               COPY OUTPUT CURSOR
         SR    R0,R2               COMPUTE OUTPUT LENGTH
         L     R13,4(,R13)         LOAD BACK POINTER, AGAIN
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         LM    R2,R12,28(R13)      RESTORE REGISTERS
         MVI   12(R13),255         SET 'DONE' FLAG
         LA    R15,0               SET ZERO RETURN CODE
         BR    R14                 AND RETURN TO CALLER
STOREIT  DS    0H
         ST    R10,0(,R1)          STORE COMPLETED STRING
         LA    R1,4(,R1)           BUMP OUTPUT CURSOR
         LR    R10,R15             WHAT WAS LEFT FROM BEFORE
         SH    R9,=H'32'           RESET CURRENT-STRING LENGTH
         BR    R11                 AND RETURN TO (LOCAL) CALLER
         LTORG
MULT1    DS    0H
         LA    R0,0                CLEAR THE COUNT REGISTER
         LA    R14,0               CLEAR LEFT REGISTER
         L     R15,MULTS           LOAD THE STRING/LENGTH
         SLDL  R14,8               SHIFT OFF THE LENGTH
         LR    R7,R14              COPY THE LENGTH
         LA    R3,32               LOAD LIMIT VALUE
         SR    R3,R9               MINUS CURRENT LENGTH
         LA    R14,0               CLEAR THAT REG
         SLDL  R14,0(R3)           SHIFT THOSE BITS OVER
         OR    R10,R14             ADD TO CURRENT STRING
         AR    R9,R7               ADD LENGTHS
         CH    R9,=H'32'           GOT ENOUGH, YET ---
         BL    MULT2               NOPE ---
         BAL   R11,STOREIT         NOPE; PARTIAL ADD AND STORE
MULT2    DS    0H
         LA    R6,0(,R2)           COPY STARTING ADDRESS
         LA    R14,0(,R2)             AND RIPPLING ADDRESS
         LA    R15,1(,R5)          COPY ENDING ADDRESS
         SR    R15,R14             COMPUTE LENGTH TO COMPARE
         CH    R15,=H'255'         LONGER THAN MAX ??
         BNH   MULT3               NOPE ---
         LA    R15,255             YES; ASSUME MAX FOR NOW
MULT3    DS    0H
         LR    R7,R15              AND COPY THAT VALUE
         LA    R15,0               TWICE ---
         ICM   R15,8,0(R6)         INSERT 'PAD' CHARACTER
         CLCL  R6,R14              COMPARE/SEARCH
         LR    R0,R6               COPY END ADDRESS
         SR    R0,R2               COMPUTE BYTES COMPARED
         LR    R2,R6               NEW INPUT ADDRESS
         BCTR  R2,R0               ACCOUNT FOR BXLE STUFF
         LR    R6,R0               COPY TO INPUT CHAR. REGISTER
         LA    R14,0               CLEAR LEFT REGISTER
         SLL   R6,2                TIMES 4
         L     R15,TREEV(R6)       LOAD THE STRING/LENGTH
         SLDL  R14,8               SHIFT OFF THE LENGTH
         LR    R7,R14              COPY THE LENGTH
         LA    R3,32               LOAD LIMIT VALUE
         SR    R3,R9               MINUS CURRENT LENGTH
         LA    R14,0               CLEAR THAT REG
         SLDL  R14,0(R3)           SHIFT THOSE BITS OVER
         OR    R10,R14             ADD TO CURRENT STRING
         AR    R9,R7               ADD LENGTHS
         CH    R9,=H'32'           GOT ENOUGH, YET ---
         BL    MULT4               NOPE ---
         BAL   R11,STOREIT         NOPE; PARTIAL ADD AND STORE
MULT4    DS    0H
         LA    R6,0
         IC    R6,0(,R2)           INSERT THE REPEATED CHARACTER
         LA    R14,0               CLEAR LEFT REGISTER
         SLL   R6,2                TIMES 4
         L     R15,TREEV(R6)       LOAD THE STRING/LENGTH
         SLDL  R14,8               SHIFT OFF THE LENGTH
         LR    R7,R14              COPY THE LENGTH
         LA    R3,32               LOAD LIMIT VALUE
         SR    R3,R9               MINUS CURRENT LENGTH
         LA    R14,0               CLEAR THAT REG
         SLDL  R14,0(R3)           SHIFT THOSE BITS OVER
         OR    R10,R14             ADD TO CURRENT STRING
         AR    R9,R7               ADD LENGTHS
         CH    R9,=H'32'           GOT ENOUGH, YET ---
         BL    MULT5               NOPE ---
         BAL   R11,STOREIT         NOPE; PARTIAL ADD AND STORE
MULT5    DS    0H
         B     ML2                 NOPE; CONTINUE
         DROP  R8
         EJECT
SELTAB   DS    0H
         L     R8,=V(TBL60)
         BR    R9
         DC    V(ARCHTABS)         CSECT OF TABLES ---
CMPCT    DSECT
MULTS    DS    XL4                 REPEATED-STRING MARKER
TREEV    DS    256XL4              ACTUAL COMPACTED CHARACTER VALUES
         END
