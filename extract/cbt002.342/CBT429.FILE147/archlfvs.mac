LFVS     TITLE 'ARCHIVER --- LFVS FUNCTION'
ARCHLFVS CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         COPY #ARCBITS
         USING ARCHLFVS,R15
         #STAMP
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R11,R15             LOAD ROUTINE BASE REGISTER
         DROP  R15                 DROP THE OLD BASE
         USING ARCHLFVS,R11        DEFINE THE NEW BASE REGISTER
         LA    R14,72(,R13)        POINT DOWN THE SAVE AREA STACK
         ST    R14,8(,R13)         STORE FORWARD POINTER
         ST    R13,4(,R14)         AND BACK POINTER
         LR    R13,R14             LOAD NEW SAVE AREA POINTER
         L     R14,4(,R13)         RELOAD BACK POINTER
         L     R14,12(,R14)        RELOAD ORIG. REG 14
         USING MAINWK,R12          BASE THE MAIN WORK AREA
         XC    MCNT,MCNT           INIT. THE ITEM COUNT
         ZAP   LSTLIN#,=P'99'      START ON A NEW PAGE
         LA    R1,VSAM1DD          POINT TO THE PARAMETER
         MVC   VS1MODE,=CL8'INPUT'
         LA    R0,0                SET THE 'OPEN' SIGNAL
         CALL  ARCHVSOP            CALL THE VSAM-OPEN SUBROUTINE
         LTR   R15,R15             OPEN OK ??
         BNZ   ENDITALL            NOPE; GIVE UP THE SHIP
         XC    CALLIST(4),CALLIST
         CNOP  0,4
         BAL   R1,BLDPOOL          BRANCH AROUND PARM LIST
         DC    F'100'
         DC    F'100'
         DC    F'56'
         DC    AL1(14)
         DC    AL1(20)
         DC    CL20'LOGICAL FILE NAMES '
BLDPOOL  DS    0H
         CALL  CELLBLD
         ST    R0,NAMEPOOL         SAVE THE 'TOKEN' VALUE
         EJECT
*---------------------------------------------------------------------*
*---     HERE'S THE MEAT OF THE PROCESSING. THE BASIC PROCESS IS   ---*
*---           THIS:                                               ---*
*---                                                               ---*
*---     1. USING THE CONTROL INFORMATION WE WERE GIVEN AND THE    ---*
*---        INFORMATION WE'VE DEVELOPED, LOCATE THE HEADER RECORD  ---*
*---        FOR THE FIRST MEMBER. WE'LL USE THE VS1BUF1 AREA FOR   ---*
*---        HEADER/KEY CONSTRUCTION.                               ---*
*---                                                               ---*
*---     2. LOOP THROUGH THE MEMBER, READING THE RECORDS AND       ---*
*---        EXPLODING THEM INTO THE COMPRK AREA, WRITING EACH      ---*
*---        'LOGICAL' RECORD AS IT BECOMES AVAILABLE.              ---*
*---------------------------------------------------------------------*
         MVC   TITLE3,SH10         REPORT SUBTITLE LINE
MEMBERS  DS    0H
         L     R6,VS1BUF1          POINT TO THE VSAM BUFFER
         USING REC,R6              BASE THE RECORD DSECT
         XC    0(RECKLEN,R6),0(R6)    START AT THE BEGINNING !!
         MVI   RECTT,#RTHDR        START WITH HEADERS
         MVC   RECN,Q1             COPY INITIAL NAME
         MVC   RECG,Q2             COPY INITIAL GROUP
         MVC   RECSG,Q2            COPY INITIAL SUBGROUP
         MVC   RECT,Q2             COPY INITIAL TYPE
         TR    RECN(40),NOGENS     CLOBBER GENERIC MARKERS
         MODCB RPL=(*,RPL1),                                           X
               OPTCD=(SEQ,FKS,KGE,SYN),                                X
               ACB=(*,ACB1),                                           X
               ARG=(*,VS1BUF1),                                        X
               AREA=(*,VS1BUF1),                                       X
               AREALEN=(*,VS1LIM),                                     X
               MF=(G,GENWK)        POSITION TO CLUSTER START
         L     R1,RPL1             LOAD THE RPL ADDRESS
         POINT RPL=(1)             GET TO IT
NEXTHDR  DS    0H
         L     R6,VS1BUF1          POINT TO THE RECORD
         L     R1,RPL1             LOAD RPL ADDRESS
         GET   RPL=(1)             AND READ A HEADER RECORD
         LTR   R15,R15             ARE WE DONE ??
         BNZ   ENDITALL            YES ---
         SHOWCB RPL=(*,RPL1),                                          X
               FIELDS=RECLEN,                                          X
               AREA=(S,VS1LEN1),                                       X
               LENGTH=4,                                               X
               MF=(G,GENWK)        FETCH THE RECORD LENGTH
F1       DS    0H
         CLI   RECTT,#RTHDR        HEADER RECORD ??
         BNE   ENDITALL            NOPE; ALL DONE ---
         #IF   RSRALIAS,OFF,F2     NOT AN ALIAS
         B     NEXTHDR             SKIP ALIASES
F2       DS    0H
         LA    R1,RECN             POINT TO THE HEADER
         LA    R0,0                USE DEFAULT QUALIFIER DATA
         CALL  ARCHKNAM            GO CHECK: DO WE PROCESS THIS ITEM ??
         LTR   R15,R15             PASS THE CHECK ??
         BNZ   NEXTHDR             NOPE ---
         MVC   @BYTEC,@RSRFLG1     SAVE VERSION NUMBER FOR EXPANDER
         LA    R1,RECTT            POINT TO THE HEADER RECORD
         BAL   R9,CHAINER          CHECK/LFVS HEADER RECORD
         L     R15,MCNT            LOAD MEMBER COUNT
         LA    R15,1(,R15)         INCREMENT BY ONE
         ST    R15,MCNT            AND SAVE UPDATED VALUE
         B     NEXTHDR             AND CONTINUE
ENDITALL DS    0H
*---------------------------------------------------------------------*
*---     AT THIS POINT, WE'VE CHAINED ALL THAT CAN BE CHAINED.    ----*
*---     NOW GENERATE THE LISTING, WITH APPROPRIATE TITLES, AND   ----*
*---     TERMINATE. AFTER EACH LINK IS LISTED, WE UNCHAIN IT,      ---*
*---     FREEMAIN THE STORAGE AND LOOP BACK TO RESTART THE         ---*
*---     LISTING PROCESS.                                          ---*
*---------------------------------------------------------------------*
         NC    CALLIST(4),CALLIST  ALL LINKS DONE ??
         BZ    LSTD                YES ---
         L     R10,CALLIST         LOAD A LINK POINTER
         MVC   CALLIST(4),0(R10)   UNCHAIN IT
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    AND CLEAR THE LINE
         LA    R2,LINE+1           POINT TO OUTPUT AREA
         MVI   0(R2),C'-'
         LA    R2,1(,R2)
         MVC   0(10,R2),12(R10)    MOVE THE GROUP
         MVI   10(R2),C'-'         AND FIELD SEPARATOR
         LA    R2,11(,R2)          INCREMENT TRAVELING POINTER
         MVC   0(10,R2),22(R10)    MOVE THE SUBGROUP OVER
         MVI   10(R2),C'-'         AND FIELD SEPARATOR
         LA    R2,11(,R2)          INCREMENT TRAVELING POINTER
         MVC   0(10,R2),32(R10)    MOVE THE TYPE OVER
         MVI   10(R2),C'-'         AND FIELD SEPARATOR
         LA    R2,11(,R2)          INCREMENT TRAVELING POINTER
         ICM   R0,15,42(R10)       INSERT THE VERSION
         X     R0,=F'-1'           INVERT ALL BITS
         CVD   R0,DWORK            AND DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORST LAST SIGN NUMERIC
         MVC   0(12,R2),SH11        MOVE IN THE EDIT MASK
         ED    0(12,R2),DWORK+3     EDIT IN THE VERSION NUMBER
         LA    R2,14(,R2)          POINT PAST IT
         $CVRECFM 0(,2),46(R10)
         CLI   0(R2),C'U'          RECFM = U ??
         LA    R2,6(,R2)
         BE    SH4                 YES; SKIP LRECL
         LA    R15,0               CLEAR A WORK REG
         ICM   R15,3,47(R10)       INSERT THE LRECL VALUE
         CVD   R15,DWORK           DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORST LAST SIGN NUMERIC
         MVC   0(7,R2),SH8         MOVE IN THE EDIT MASK
         ED    0(7,R2),DWORK+5     EDIT IN THE LRECL
SH4      DS    0H
         LA    R15,0               RE-CLEAR R15
         LA    R2,9(,R2)
         ICM   R15,3,49(R10)       INSERT THE BLKSIZE VALUE
         CVD   R15,DWORK           DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORST LAST SIGN NUMERIC
         MVC   0(7,R2),SH8         MOVE IN THE EDIT MASK
         ED    0(7,R2),DWORK+5     EDIT IN THE BLKSIZE
         LA    R2,9(,R2)
         ICM   R0,15,4(R10)        INSERT THE ITEM COUNT
         CVD   R0,DWORK            AND DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORCE LAST SIGN NUMERIC
         MVC   1(12,R2),SH11       MOVE IN THE EDIT MASK
         ED    1(12,R2),DWORK+3    EDIT IN THE COUNT
         LA    R2,13(,R2)
         ICM   R0,15,8(R10)        INSERT THE ITEM COUNT
         CVD   R0,DWORK            AND DECIMALIZE IT
         OI    DWORK+7,X'0F'       FORCE LAST SIGN NUMERIC
         MVC   1(12,R2),SH11       MOVE IN THE EDIT MASK
         ED    1(12,R2),DWORK+3    EDIT IN THE COUNT
SH5      DS    0H
         #PUT  LINE                PRINT IT OUT
         B     ENDITALL
LSTD     DS    0H
         #ERR  MSG=11
         L     R0,MCNT             LOAD MEMBER COUNT
         LTR   R0,R0               ZERO COUNT ??
         BZ    END1                YES ---
         CVD   R0,DWORK            DECIMALIZE IT
         MVC   LINE,TCMSG          COPY IN THE MESSAGE SKELETON
         ED    LINE+2(20),DWORK    ADD IN THE ACTUALS
         #PUT  LINE                AND OUTPUT THE RESULTS
END1     DS    0H
         LA    R1,VSAM1DD          LOAD THE PARM POINTER
         LA    R0,4                SET THE 'CLOSE' FLAG
         CALL  ARCHVSOP            CALL THE OPEN/CLOSE ROUTINE
         L     R0,NAMEPOOL         LOAD THE 'TOKEN' ADDRESS
         CALL  CELLDEL             DELETE MY CELL POOL
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ALWAYS RC = 0
         MVI   12(R13),255
         BR    R14                 AND RETURN TO CALLER
         TITLE 'LOCAL SUBROUTINE TO SAVE A HEADER RECORD '
*---------------------------------------------------------------------*
*---     THIS LITTLE LOCAL SUBROUTINE CHAINS TOGETHER ALL THE     ----*
*---     VARIATIONS OF QUALIFIER DATA AND DCB ATTRIBUTES IN A     ----*
*---     SINGLE-LINKED LIST, IN SORTED ORDER.  THE INFORMATION    ----*
*---     SAVED CONSISTS OF THE GROUP, SUBGROUP AND TYPE           ----*
*---     QUALIFIERS, THE VERSION NUMBERS AND THE DCB ATTRIBUTES.  ----*
*---     EACH TIME ANY OF THESE ITEMS CHANGES, A NEW CHAIN-LINK   ----*
*---     IS CREATED AND INSERTED AT THE APPROPRIATE PLACE IN THE  ----*
*---     CHAIN.  SINCE ALL STORAGE FOR THE CHAIN IS GETMAINED     ----*
*---     FROM A SINGLE SUBPOOL, AT PROCESSING END A SIMPLE        ----*
*---     'ALL-THE-SUBPOOL' FREEMAIN IS PERFORMED TO RELEASE THE   ----*
*---     STORAGE.                                                 ----*
*---------------------------------------------------------------------*
         SPACE 3
CHAINER  DS    0H
         STM   R14,R12,IOSAVE      SAVE ENTRY REGISTERS
         LR    R6,R1               COPY THE RECORD ADDRESS
         USING REC,R6              AND BASE ITS DSECT
         XC    BLDLAREA,BLDLAREA   CLEAR A WORK AREA
         MVC   BLDLAREA(34),RECG COPY QUALIFIERS OVER
         MVC   BLDLAREA+34(1),RSRREC COPY RECORD FORMAT
         MVC   BLDLAREA+35(2),RSRLRE COPY LRECL OVER
         MVC   BLDLAREA+37(2),RSRBLK AND BLKSIZE
         LSRCH CALLIST,BLDLAREA(43),ST=ASC,RAL=R10,RAN=R9,$KEY=12
         BZ    LPY                 YES; JUST INCREMENT THE COUNTS
         L     R0,NAMEPOOL         LOAD TOKEN ADDRESS
         CALL  CELLGET             GET ONE OF MY 'QUIKCELLS'
         XC    0(56,R1),0(R1)      CLEAR IT OUT
         MVC   12(43,R1),BLDLAREA  ADD THE KEY FIELDS
         ST    R9,0(,R1)           STORE THE LINK POINTER
         ST    R1,0(,R10)          STORE THE LINK POINTER
         LR    R9,R1               AND COPY TO MY 'STD' REGISTER
LPY      DS    0H
         L     R0,4(,R9)           LOAD THE ITEM COUNT
         AH    R0,=H'1'            INCREMENT BY ONE
         ST    R0,4(,R9)           SAVE UPDATED COUNT
         ICM   R0,15,RSRRCNT       LOAD THE RECORD COUNT
         A     R0,8(,R9)           ADD TO TOTAL
         ST    R0,8(,R9)           SAVE UPDATED VALUE
         LM    R14,R12,IOSAVE      RESTORE ENTRY REGISTERS
         BR    R9                  AND RETURN TO LOCAL CALLER
         DROP  R6
SH10     DC    C'    GROUP   -'
         DC    C'  SUBGRP  -'
         DC    C'  TYPE    -'
         DC    C'   VERSION'
         DC    C'    RECFM'
         DC    C'   LRECL'
         DC    C'     BLKL'
         DC    C'          ITEMS'
         DC    C'      RECORDS'
         DC    CL34' '
SH11     DC    C' ',X'202020',C',',X'202020',C',',X'202020'
TCMSG    DC    CL133' '
         ORG   TCMSG+2
         DC    X'40202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    X'6B202020'
         DC    C' TOTAL ITEMS LISTED. '
         ORG
SH8      DC    C' ',X'2020',C',',X'202020'
         LTORG
MINREC   DC    A(RECSIZE)
NOGENS   DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'202122232425262728292A2B2C2D2E2F'
         DC    XL16'303132333435363738393A3B3C3D3E3F'
         DC    XL16'404142434445464748494A4B4C4D4E4F'
         DC    XL16'505152535455565758595A5B5C5D5E5F'
         DC    XL16'606162636465666768696A6B6C6D6E6F'
         DC    XL16'707172737475767778797A7B7C7D7E7F'
         DC    XL16'808182838485868788898A8B8C8D8E8F'
         DC    XL16'909192939495969798999A9B9C9D9E9F'
         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         ORG   NOGENS+C'%'
         DC    X'00'
         ORG   NOGENS+C'*'
         DC    X'00'
         ORG
         COPY  #RECS
         COPY  ##ARCHWK
         END
