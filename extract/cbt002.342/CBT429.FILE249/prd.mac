 TITLE 'PARTRD-READ SPECIFIED LINES OF SPOOL FILE ONTO OTHER FILE'
**********P R D************CMS VERSION***************
*THIS PROGRAM WILL COPY VM SPOOL FILES TO EITHER ANOTHER SPOOL
*FILE OR A CMS DISK FILE AND PRESERVE THE CONTROL CHARACTERS.
*TO ASSEMBLE: A PRD (OR HASM PRD). LOAD PRD (CLEAR. GENMOD PRD (ALL
*****************************************************
*FORMAT: PRD NNNN  (NNNN=SPOOL FILE NUMBER; DEFAULT=FIRST FILE)
*                   WILL COPY ONTO ANOTHER SPOOL FILE
*        PRD D NNNN FILENAME FILETYPE FILEMODE
*                   (NNNN=SPOOL FILE NUMBER-MUST BE SPECIFIED)
*                   WILL CREATE FILE SPECIFIED AS FILENAME, ETC.
*****************************************************
* LOCAL VARIABLES
*
*        NONE
*
 TITLE '- REGISTER USAGE'
*
* REGISTER USAGE -
*
*        R15 - SUBROUTINE LINKAGE AND RETURN CODE
*        R14 - SUBROUTINE LINKAGE AND RETURN ADDRESS
*        R13 - SAVE AREA ADDRESS
*        R12 - BASE ADDRESS
*        R11 - BASE ADDRESS
*        R10 - SUBROUTINE LINKAGE
*        R9  - SUBROUTINE LINKAGE
*        R8  - WORK
*        R7  - WORK
*        R6  - WORK
*        R5  - DIAGNOSE X'14' SUBCODES
*        R4  - VIRTUAL READER ADDRESS (X'00C' FOR DIAGNOSE X'14')
*        R3  - PAGE-SIZED, PAGE-ALIGNED BUFFER FOR DIAGNOSE X'14'
*        R2  - OUTPUT LINE BUILD AREA
*        R1  - WORK
*        R0  - WORK
*
 TITLE '- ENTRY, EXIT, AND PARM PROCESSING'
*
* ENTRY, EXIT, AND PARM PROCESSING
*
         PRINT ON,GEN
         USING NUCON,R0            ADDRESS CMS NUCLEUS
         USING PARTRD,R11,R12     ADDRESS THIS PROGRAM
PARTRD   CSECT
         STM  14,12,12(13)         SAVE CALLER'S REGS
         LR    R11,R15             ESTABLISH ADDRESSABILITY
         LR    R12,R13             SAVE CALLER'S SAVE AREA ADR.
         LA    R13,SAVE            LOAD MY SAVE AREA ADR.
         ST    R13,8(R12)          GIVE CALLER MY SAVE AREA ADR.
         ST    R12,4(R13)          TAKE CALLER'S SAVE AREA ADR.
         LA    R12,4095(,R11)      SET UP ...
         LA    R12,1(,R12)         2ND BASE REGISTER
         B     START               BRANCH AROUND RETURN CODE
*
SAVE     DC    18F'0'              SAVE AREA
*
HOME     ICM   R1,B'1111',PAGEBUFF  WAS DIAGNOSE 14 BUFFER ALLOCATED?
         BZ    HOME3               NO, CONTINUE ->
         L     R0,=F'8200'         YES, GET SIZE, TOO
         FREEMAIN R,LV=(0),A=(1)   FREE THE BUFFER
HOME3    L     R13,4(R13)          RESTORE CALLER'S SAVE AREA PTR
         LM    14,12,12(13)        RESTORE REGS & RETURN VIA R14
         SR    15,15
         BR    14
*
START    EQU   *                   BRANCH TARGET
*
* PARM PROCESSING
*        R2  - PARM POINTER
*        R15 - ERROR EXIT FOR DECBIN SUBROUTINE
*        PARTRD   SPOOLID FROMLINE NUMLINES
*
         LA    R2,8(,R1)           POINT FIRST PARM
         CLI   0(R2),X'FF'         FENCE?
         BE    PARMEND             YES, NO PARMS AT ALL ->
         LA    R15,OPTINVLD        LOAD ERROR EXIT FOR...
         CLI   0(R2),C'D'          WRITE TO DISK FILE
         BNE   *+12                NO..
         OI    RUNTYPE,DISK
         LA    R2,8(R2)            NEXT PARM
         CLI   0(R2),X'FF'
         BE    PARMEND
*
TESTSPID DS    0H
         CLI   0(R2),C'*'         FIRST SPOOL FILE
         BE    TESTFNFM           YES..
        CLI    0(R2),C'0'         NUMERIC SPOOLID
         BL    TESTFN            NO.....
         L     R10,=A(DECBIN)      ADDR OF SUBROUTINE
         BALR  R14,R10
         ST    R1,SPLIDBIN         SAVE SPOOLID BINARY
         B     TESTFNFM
*
TESTFNFM DS    0H
         LA    R2,8(,R2)           POINT NEXT PARM
        CLI    0(R2),X'FF'
         BE    PARMEND
TESTFN   DS    0H
         TM    RUNTYPE,DISK     DISK WANTED
         BNO   TESTCOPY         NO..SKIP FILE NAME CHECKS
        CLI    0(R2),C'Z'        FN ....FN MUST BE ALPHA
        BH     TESTCOPY          NO
        MVC    PFN,0(R2)
        LA     R2,8(R2)
        CLI    0(R2),X'FF'
         BNE   TESTFT
         B     PARMEND
*
TESTFT  DS     0H
        CLI    0(R2),C'Z'        FT GIVEN....MUST BE ALPHA
        BH     TESTCOPY          NO
        MVC    PFT,0(R2)         FILETYPE
        LA     R2,8(R2)
        CLI    0(R2),X'FF'
         BNE   TESTFM
         BE    PARMEND
*
TESTFM   DS    0H
        CLI    0(R2),C'Z'        FM GIVEN
        BH     TESTCOPY          NO
        MVC    PFM,0(R2)         FILEMODE
         LA    R2,8(,R2)           POINT NEXT PARM
         CLI   0(R2),X'FF'         FENCE?
         BE    PARMEND             YES, ->
         B     TESTCOPY
*
TESTCOPY DS    0H
         L     R10,=A(DECBIN)      ADDR OF SUBROUTINE
         BALR  R14,R10             BEG LINE TO COPY
         LTR   R1,R1
         BZ    *+6
         BCTR  R1,0
         ST    R1,FROMLINE         SAVE BEG LINE TO COPY
         LA    R2,8(,R2)           POINT NEXT PARM
         CLI   0(R2),X'FF'         FENCE?
         BE    PARMEND             YES, ->
         L     R10,=A(DECBIN)      ADDR OF SUBROUTINE
         BALR  R14,R10             NUMBER OF LINES TO COPY
         ST    R1,NUMLINES         SAVE NUMBER OF LINES TO COPY
         B     PARMEND             YES, ->
*
OPTINVLD SH    R2,=H'8'            BACKUP TO OPTION WORD
         B     HOME                AND RETURN TO CALLER
*
*
PARMEND  EQU   *                   PARM/OPTION SCAN END
         OC   NUMLINES,NUMLINES    NUMBER OF LINES GIVEN
         BNZ  SPOOLACQ             YES..
         MVC  NUMLINES,=XL4'FFFFFFFF'   SET TO WHOLE FILE
         B    SPOOLACQ
SPOOLACQ DS   0H
*
 TITLE '- SPOOL FILE ACQUISITION'
*
* SPOOL FILE ACQUISITION
*        R3  - PAGE-SIZED, PAGE-ALIGNED BUFFER
*        R4  - VIRTUAL RDR ADDRESS
*        R5  - DIAGNOSE 14 CODES
*
* GET A PAGE-SIZED, PAGE-ALIGNED BUFFER:
*
PAGEGET  GETMAIN R,LV=8200         GET MORE THAN ENOUGH
         ST    R1,PAGEBUFF         SAVE WHOLE BUFFER START
         N     R1,=X'FFFFF000'     ROUND DOWN TO PAGE
         A     R1,=X'00001000'     ROUND UP TO NEXT FULL PAGE
         LR    R3,R1               COPY PAGE ADDRESS
         ST    R3,PAGEADDR         SAVE PAGE ADDRESS
*
         USING SFBLOK,R3           ADDRESS THE BUFFER
*
         LA    R4,X'00C'           VIRTUAL RDR ADDRESS
         L     R6,SPLIDBIN         GET SPECIFIED SPOOL ID
         LTR   R6,R6               WAS SPOOLID SPEC'D?
         BZ    SFRESET             NO, SEE WHAT FIRST FILE IS
         LA    R5,X'00C'           SET 'SELECT SFBLOK' CODE
         DC    X'83640014'         DIAG. SPOOL MANIPULATION
         BNZ   SFBERR                 ERROR, CONTINUE ->
         B     SFRESET
SFRESET  DS    0H
         LA    R6,=C'CL C HO'      POINT TO CP COMMAND
         LA    R7,7                LOAD CP COMMAND LENGTH
         DC    X'83670008'         DIAGNOSE CONSOLE FUNCTION
         LA    R4,0                SET SPOOL ID
         LA    R5,X'0FFF'          RETREIVE FILE DESCRIP
         DC    X'83340014'         DIAGNOSE CONSOLE FUNCTION
         B     SFTESTPU
SFTESTPU DS    0H
         CLC   SFBRECSZ,=XL2'0050' LRECL 80
         BH    SFBNEXT             IF > MUST BE PRINTER FILE
         B     PUBNEXT             ELSE PUN FILE
*
SFBERR   WRTERM 'FILE NOT FOUND OR INVALID.'  TELL USER
         LA    R15,8               SET RETURN CODE
         B     HOME                AND RETURN TO CALLER
*
SFBNEXT  DS    0H                  SET 'READ PRT SFBLOK' CODE
         CLI   SPPUN,X'01'         PUNCH FILE
         BE    PUBNEXT
         LA    R5,4                SET 'READ PRT SFBLOK' CODE
         LA    R4,X'00C'           SET READER ADDR
         DC    X'83340014'         DIAG. SPOOL MANIPULATION
         BNZ   SFBERR0             ERROR, ->
         B     SFBSEL             GO SELECT FILE
*
SFBERR0  DS    0H
         CLI   SPPUN,X'02'         FIRST TIME THRU
         BNE   SFBERR              NO...THEN ERROR
         LA    R4,X'00C'           VIRTUAL RDR ADDRESS
         L     R6,SPLIDBIN         GET SPECIFIED SPOOL ID
         LTR   R6,R6               WAS SPOOLID SPEC'D?
         BZ    PUBNEXT             NO, GO GET NEXT ONE
         LA    R5,X'00C'           SET 'SELECT SFBLOK' CODE
         DC    X'83640014'         DIAG. SPOOL MANIPULATION
         BZ    PUBNEXT             NO ERROR, CONTINUE ->
         B     SFBERR                ...THEN ERROR
*
PUBNEXT  DS    0H
         LA    R5,8                SET 'READ PUN SFBLOK' CODE
         LA    R4,X'00C'           VIRTUAL RDR ADDRESS
         DC    X'83340014'         DIAG. SPOOL MANIPULATION
         BNZ   SFBERR              ERROR, ->
         MVI   SPPUN,X'01'         FLAG PUNCH FILE
         OC    FROMLINE,FROMLINE   STARTING LINE GIVEN
         BZ    SPPNUM              NO...
         L     1,FROMLINE          STARTING LINE NUMBER
         LA    1,1(1)              ADJUST FOR HEADER
         ST    1,FROMLINE
SPPNUM   DS    0H
         CLI   NUMLINES,X'FF'      WHOLE FILE TO BE COPIED
         BE    SFBSEL              YES....
         TM    RUNTYPE,DISK        DISK FILE WANTED
         BO    SFBSEL              YES..LEAVE NUMLINES ALONE
         CLC   FROMLINE,=XL4'00000002'  STARTING LINE <  2
         BNL   SFBSEL              NO...LEAVE NUMLINES ALONE
         L     1,NUMLINES          LOAD NUMBER
         LA    1,1(1)              ADD 1 FOR HEADER
         ST    1,NUMLINES
         B     SFBSEL
*
SFBSEL   DS    0H
* SELECT FILE FOR PROCESSING (FOR SURE)
*
         LH    R6,SFBFILID         GET SPOOL FILE ID
         LA    R5,X'00C'           SET 'SELECT SFBLOK' CODE
         LA    R4,X'00C'           SET 'SELECT SFBLOK' CODE
         DC    X'83640014'         DIAGNOSE SPOOL MANIPULATION
         BNZ   SFBERR              CC ^= 0, ERROR ->
*
* CHECK IF RIGHT ONE
*
         L     R2,SPLIDBIN         GET SPECIFIED SPOOL ID
         LTR   R2,R2               ANYTHING THERE?
         BZ    SFBCONT             NO, CONTINUE ->
         CR    R2,R6               SAME FILE ID?
         BNE   SFBERR              NO, DO ERROR ->
SFBCONT  EQU   *
*
* GET START OF SFBLOK AGAIN, FOLLOWED BY TAG RECORD
*
SFBDESC  LA    R5,X'0FFF'          SET 'RETRIEVE DESCRIPTOR' CODE
         SR    R4,R4               SCAN FROM RDR START (FILE ORDERED)
         DC    X'83340014'         DIAG. SPOOL MANIPULATION
         BNZ   SFBERR              ERROR, ->
*
 TITLE '- PRE-FILE PROCESSING'
*
* PRE-FILE PROCESSING
*
* CONVERT SPOOLID TO CHARACTER, AND SAVE SPOOL FILE INFORMATION
*
CONVERT  CVD   R6,DBLWORD          CONVERT TO DECIMAL PACKED
         UNPK  DBLWORD(4),DBLWORD+5(3)  UNPACK TO ZONED
         OI    DBLWORD+3,X'F0'     FIX SIGN
         MVC   SPLIDCHR(4),DBLWORD  SET SPOOLID
*
*        L     R6,SFBRECNO         GET NUMBER OF DATA RECORDS
*        ST    R6,RECCNT           SAVE FOR LATER
         LA    R6,=C'CL C HO'      POINT TO CP COMMAND
         LA    R7,7                LOAD CP COMMAND LENGTH
         DC    X'83670008'         DIAGNOSE CONSOLE FUNCTION
* *****SPOOL PRINTER TO READER*****
         LA    R6,SPTOPRT           OINT TO CP COMMAND
         CLI   SPPUN,X'01'         PUN FILE
         BNE   *+8                 NO
         LA    R6,SPTOPUN           OINT TO CP COMMAND
         LA    R7,L'SPTOPRT        LOAD CP COMMAND LENGTH
         DC    X'83670008'         DIAGNOSE CONSOLE FUNCTION
*
         BAL   R10,OUTCLEAR        CLEAR INPUT BUFFER
ENDJDER  DS    0H
         OC    NUMLINES,NUMLINES   NUMBER OF LINES SPECIFIED
         BNZ   *+10                YES.....
         MVC   NUMLINES,=XL4'FFFFFFFFFF'      WHOLE FILE
         TM    RUNTYPE,DISK        DISK FILE PROCESSING
         BNO   POINTB              NO...
         LA   R1,DFILE            FSCB
         CLI  SPPUN,X'01'         PUN FILE
         BNE  *+8                 NO
         LA   R1,UFILE            FSCB
         USING FSCBD,R1           FSCB DSECT
         OC   PFN,PFN             ANY FN GIVEN
         BZ   SETFILE             NO..
         MVC  FSCBFN,PFN
         OC   PFT,PFT             ANY FT GIVEN
         BZ   SETFILE             NO..
         MVC  FSCBFT,PFT
         OC   PFM,PFM             ANY FM GIVEN
         BZ   SETFILE             NO..
         MVC  FSCBFM,PFM
SETFILE  DS   0H
         MVC  DISPFN(L'FSCBFN),FSCBFN   SAVE FOR DISPLAY
         MVC  DISPFT(L'FSCBFT),FSCBFT   SAVE FOR DISPLAY
         MVC  DISPFM(L'FSCBFM),FSCBFM   SAVE FOR DISPLAY
         LA   R2,FSCBFN           FILE ID
         ST   R2,FILEID          SAVE ADDR OF FILEID
         CLI  SPPUN,X'01'        PUN FILE
         BNE  STATEPRT           NO....
         FSSTATE  (R2),FSCB=UFILE SEE IF FILE EXISTS
         B     STATED
STATEPRT  DS  0H
         FSSTATE  (R2),FSCB=DFILE SEE IF FILE EXISTS
         B     STATED
STATED   DS    0H
         LTR   15,15              DOES FILE EXISTS
         BNZ   OPENFILE           NO...
         FSERASE  (R2)            ERASE IT
OPENFILE  DS   0H
         CLI    SPPUN,X'01'    PUN FILE
         BNE    OPENPRT
         FSOPEN  (R2),FSCB=UFILE OPEN FILE
         B     POINTB
OPENPRT   DS    0H
         FSOPEN  (R2),FSCB=DFILE OPEN FILE
         B     POINTB
         DROP  R1
POINTB   DS    0H
         LA    R2,OUTBUFF          POINT TO LINE BUILD AREA
         L     R3,PAGEADDR         RESTORE SPOOL BUFFER POINTER
         B     BEGSF
*
 TITLE '- FILE PROCESSING '
*
* FILE PROCESSING
*        R5  - DIAGNOSE 14 CODE / DATA LENGTH
*        R6  - SPOOL BUFFER CCW COUNT
*        R7  - SPOOL BUFFER CCW POINTER
*        R8  - CCW OP CODE PROCESSING
*        R9  - ASA CHARACTER PROCESSING
*        R10 - DATA DISPLACEMENT/LENGTH PROCESSING
*
BEGSF    DS    0H
         L     R3,PAGEADDR         POINT TO PAGE BUFFER
         LA    R4,X'00C'           RESET VIRTUAL READER ADDRESS
*
* GET FIRST/NEXT SPOOL BUFFER
*
SFNEXT   DS    0H
         SR    R5,R5               SET 'READ NEXT SPOOL BUFFER' CODE
         DC    X'83340014'         READ IN THE NEXT SPOOL PAGE
         BC    4,SFEOF             BRANCH IF END OF FILE...
*        BNZ   ERRSFB2             BRANCH IF ANY OTHER ERROR ->
*
*
         L     R6,12(,R3)          GET NUMBER OF CCW'S IN THIS PAGE
         LA    R7,8(,R3)           POINT FIRST CCW
*
         B     NEXTCCW
* PROCESS THE NEXT CCW IN THE SPOOL BUFFER
*
NEXTCCW   DS   0H
         LTR   R6,R6               ANY CCW'S LEFT IN PAGE ?
         BNP   SFNEXT              NO, GET NEXT SPOOL PAGE
         LA    R7,8(,R7)           POINT TO THE NEXT CCW
CHECKTIC CLI   0(R7),X'08'         GOT A TIC ?
         BNE   TWITCH              NO, JUST A NERVOUS TWITCH
         AH    R7,2(,R7)           YES, POINT TO NEXT CCW + 8
         SL    R7,=F'8'            POINT TO NEXT CCW
         B     CHECKTIC            ENSURE NOT A TIC (ILLEGAL)
TWITCH   DS    0H
         CLI   SPPUN,X'01'         PUNCH FILE
         BNE   VALCCW              NO...
         CLI   0(7),X'4E'
         BE    NEXTCCW
         CLI   0(R7),X'41'         THIS A PUNCH FILE CCW ?
         BE    *+12                YES..CONTINUE
         CLI   0(R7),X'42'         MAYBE A READER FILE CCW ?
         BNE   VALCCW              NO...GO VALIDATE
         BCTR  R6,0                KEEP TRACK OF CCW'S LEFT
         LH    R5,6(R7)            DATA LENGTH
         LTR   R5,R5               ANY DATA
         BZ    NEXTCCW             NO....
         OC    FROMLINE,FROMLINE   STARTING REACHED YET
         BZ    COUNTPUN            NO....
         L     1,FROMLINE          GET START COUNTER
         BCTR  1,0                 DECREMENT
         ST    1,FROMLINE          SAVE
         B     NEXTCCW             SKIP THIS LINE
COUNTPUN DS    0H
         MVC   OUTBUFF(80),=80C' '  BLANK OUTPUT LINE
         LR    R10,R7              POINT TO CCW
         AH    R10,2(R10)          POINT TO DATA
         BCTR  R5,0                LENGHT FOR MOVE
         EX    R5,MVCPUDAT         MOVE DATA
         TM    RUNTYPE,DISK       DISK FILE OUTPUT
         BNO   PUNCHBUF           NO...PUNCH TO READER
         L    R2,FILEID           ID OF FILE
         FSWRITE (R2),BSIZE=80,FSCB=UFILE
         CH     15,=H'13'   DISK FULL
         BE     SFEOF       YES..
         B      PUNCHED
PUNCHBUF DS     0H
         PUNCHC OUTBUFF
PUNCHED  DS    0H
         CLI   NUMLINES,X'FF'     WHOLE FILE WANTED
         BE    NEXTCCW            YES
         L     1,NUMLINES         NUMBER OF LINES PUNCHED
         BCTR  1,0                DECREMENT
         ST    1,NUMLINES         SAVE
         LTR   1,1                REACHED THE LIMIT SPECIFIED
         BZ    SFEOF              YES....END
         B     NEXTCCW            CONTINUE
MVCPUDAT MVC   OUTBUFF(0),0(R10)   MOVE PUNCH LINE TO OUTPUT
VALCCW   DS    0H
         BCTR  R6,0                KEEP TRACK OF CCW'S LEFT
         SR    R8,R8               CLEAR R8 FOR CCW OP CODE
         IC    R8,0(,R7)           AND PICK IT UP ...
         SR    R9,R9               CLEAR R9 FOR ASA CODE
         LR    0,1                 SAVE R1
         L     1,=A(CCWTABLE)      ADDR OF TABLE
         IC    R9,0(R1,R8)         AND GET THAT TOO ...
         LR    R1,0                RESTORE R1
         LTR   R9,R9               RECOGNIZE THE CCW OP CODE ?
         BZ    NEXTCCW             NO, MAYBE A NOP .....
         MVC   LLCCW,NLCCW
         STC   R9,NLCCW            CCW FOR NEXT LINE
         LH    R5,6(,R7)           GET DATA LENGTH
         LTR   R5,R5               GOT ANY DATA, REALLY ?
         BNP   NEXTCCW          WHAT ????
         TM    4(R7),X'10'         SUPPRESS DATA FLAG ?
         BO    NEXTCCW           YES, DON'T MOVE IT ...
         CLI   0(R7),X'01'         SUPRESS SPACE
         BE    DOCTL
         TM    0(R7),X'02'         THIS CCW IMMEDITATE     ?
         BO    DOCTL             YES...
         B    PROCMOVE
*
DOCTL   DS    0H
*       CLI    NLCCW,X'4E'
*        BE    PROCMOVX
         NOP   0
         NOP   0
         CLI  0(7),X'01'
         BE   PROCMOVX
        CLI    FSW,X'FF'       FIRST TIME THRU
        BE     DOCTLP
        CLI    FSW,X'01'       SUPRESS PRINT
         MVI   FSW,X'00'
         BE    NEXTCCW         GET DATA FROM NEXTCCW
        CLI    0(R7),X'8B'
         BNE   DOCTLP
         LR    R1,R7        LOOK AT 8 BYTES BEFORE X'8B'
         SH    R1,=H'8'
         CLC   0(8,R1),=XL8'8000000040404040'
         BNE   DOCTLP
         BAL   R14,COUNTUP1
         B     DOCTLP
DOCTLP   DS    0H
         MVI   FSW,X'00'
         CLI   0(R7),X'8B'
         BNE   *+12
         CLI   8(R7),X'0B'
         BNE   NEXTCCW
         MVC   OUTBUFF(1),NLCCW  USE NEW CCW CC
         BAL   R14,COUNTUP1
        MVI    OUTBUFF,C' '
         MVI   NLCCW,X'40'
         CLI   4(R7),X'70'
         BE    NEXTCCW
         B     PROCMOVE
*
PROCMOVX  DS    0H            CCW  01
          MVI   FSW,X'01'     SUPPRESS NEXT CC PRINT
          MVI   OUTBUFF,C' '  SET TO BLANK
          B     PROCMOVE
PROCMOVE  DS    0H
* PROCESS DATA MOVING CCW -
         LH    R10,2(,R7)          DATA DISPLACEMENT FROM CCW
         ALR   R10,R7              POINT TO DATA
         TM    4(R7),X'70'        SUPPRESS DATA
         BNO   EXMOVE
         LA    R5,1               SET DATA LENGTH
         MVC   OUTBUFF(1),LLCCW
         B     WRBUFF              WRITE OUT CTL CHAR
EXMOVE   DS    0H
         CH    R5,=H'0'
         BNH   WRBUFF
         BCTR  R5,R0
         EX    R5,MVCDATA          MOVE DATA TO OUTBUFF
         LA    R5,1(R5)
         MVC   OUTBUFF(1),LLCCW     MOVE IN CCW
*
* ADD LINE JUST BUILT TO OUTPUT
*
WRBUFF   DS    0H
         LA    2,OUTBUFF
         BAL   R14,COUNTUP
         BAL   R10,OUTCLEAR
*
         B     NEXTCCW             GO GET NEXT CCW AND RECORD
*
*
MVCDATA  MVC   OUTBUFF+1(0),0(R10)  EX'D TO MOVE DATA TO BUFFER
*
* END OF FILE ENCOUNTERED (NO MORE SPOOL FILE BUFFERS)
*
SFEOF    DS    0H
         TM    RUNTYPE,DISK
         BNO   SFEOFRET
         WRTERM DISPMSG,DISPMSGL
         B     SFEOFRET
*
* END OF FILE AND LAST LINE HAS BEEN OUTPUT
*
SFEOFRET EQU   *                   SPOOL FILE END RETURN
*
         B     FINISH
*
COUNTUP1 DS    0H
         OC    FROMLINE,FROMLINE
         BNZ   COUNTNOP
COUNTPU1 DS    0H
         ST    R14,RETR14
         TM    RUNTYPE,DISK       DISK FILE OUTPUT
         BO    COUNTDIS
         B     COUNTPT1
COUNTPT1  DS    0H
         PRINTL OUTBUFF,1
         B     COUNTPUA
COUNTDIS DS    0H
         L    R2,FILEID           ID OF FILE
         FSWRITE (R2),BSIZE=1,FSCB=DFILE
         CH    15,=H'13'    DISK FULL
         BE    SFEOFR
         LA    2,OUTBUFF
         B     COUNTPUA
COUNTUP  DS    0H
         OC    FROMLINE,FROMLINE
         BZ    COUNTPUT
COUNTNOP DS    0H
         L     1,FROMLINE
         BCTR  1,0
         ST    1,FROMLINE
         BR    14
COUNTPUT DS    0H
         ST    R14,RETR14
         BAL   R10,PUT1LINE        OUTPUT 1 LINE
COUNTPUA DS    0H
         L     1,NUMLINES
         BCTR  1,0
         ST    1,NUMLINES
         LTR   1,1
         BZ    SFEOF
         L     R14,RETR14
         BR    R14
*
SFEOFR  DS     0H
         L     R14,RETR14
         B     SFEOF
 TITLE '- FINISH - SPOOL FILE DISPOSITION'
*
* FINISH - SPOOL FILE DISPOSITION
*
FINISH   SR    R15,R15             SET RETURN CODE
EXIT     DS    0H
         MVC   CLOSERDR+7(4),=CL4'HOLD'  YES, PATCH CP COMMAND
EXITCLSE DS    0H
         LA    R3,CLOSERDR         POINT TO CP CLOSE COMMAND
         LA    R4,L'CLOSERDR       LOAD LENGTH OF COMMAND
         DC    X'83340008'         DIAGNOSE CONSOLE FUNCTION
         TM    RUNTYPE,DISK         DISK FILE OUTPUT
         BO    CLOSDISK
*
         LA    R3,CLOSEPRT         POINT TO CP CLOSE COMMAND
         CLI   SPPUN,X'01'         PUN FILE
         BNE   *+8                 NO
         LA    R3,CLOSEPUN         POINT TO CP CLOSE COMMAND
         LA    R4,L'CLOSEPRT       LOAD LENGTH OF COMMAND
         DC    X'83340008'         DIAGNOSE CONSOLE FUNCTION
         B     HOME                YES, THEN EXIT NOW, ->
*
CLOSDISK DS   0H
         L    R2,FILEID
         CLI  SPPUN,X'01'    PUN FILE
         BNE  CLOSEPTF
         FSCLOSE (R2),FSCB=UFILE
         B    HOME
CLOSEPTF  DS   0H
         FSCLOSE (R2),FSCB=DFILE
         B    HOME
*
 TITLE '- OUTCLEAR SUBROUTINE - SET OUTBUFF TO BLANKS'
*
* OUTCLEAR SUBROUTINE - SET OUTBUFF TO BLANKS
*
OUTCLEAR MVI   OUTBUFF,C' '        MOVE IN A BLANK
         MVC   OUTBUFF+1(132),OUTBUFF  AND PROPAGATE IT
         BR    R10                 RETURN TO CALLER
*
 TITLE '- PUT1LINE SUBROUTINE - OUTPUT SINGLE DATA LINE (ONLINE)'
*
* PUT1LINE SUBROUTINE - OUTPUT SINGLE DATA LINE (ONLINE)
*        R2  - POINTS TO OUTPUT LINE (133 BYTES)
*        R10 - RETURN ADDRESS
*        R5  - LENGTH OF LINE
*
*
PUT1LINE DS    0H
         STM   14,13,PTREGWK       SAVE REGS
         LA    13,PTREGSAV         SAVE AREA
*
PUT1PRT  DS     0H
         CLC    OUTBUFF+1(132),=132C' '
         BNE    DO1PRT
         CLI    OUTBUFF,X'40'
         BE     DO1PRT
         LA     R5,1
         B     DO1PRT
DO1PRT   DS    0H
         TM    RUNTYPE,DISK
         BO    DO1DSK
         B     DO1PRT0
DO1PRT0   DS    0H
         PRINTL (R2),133
TEST1PRT  DS   0H
         LTR   R15,R15             ZERO RETURN CODE?
         BZ    GOODPRET            YES, RETURN TO CALLER
         CH    R15,=H'2'           CHANNEL 9 SENSED?
         BE    GOODPRET            YES, IGNORE IT AND RETURN
         CH    R15,=H'3'           CHANNEL 12 SENSED?
         BE    GOODPRET            YES, IGNORE IT AND RETURN
         B     INTREQ
DO1DSK   DS    0H
         L     R2,FILEID
         FSWRITE  (R2),FSCB=DFILE,BSIZE=133
         CH    15,=H'13'    DISK FULL
         BE    SFEOFG
         LA    R2,OUTBUFF
         B     GOODPRET
*
GOODPRET DS    0H
         LM    14,13,PTREGWK
         BR    10
*
SFEOFG   DS    0H
         LM    14,13,PTREGWK
         B     SFEOF
INTREQ   DS    0H
         LA    R1,=C'MSG * ' INT REQ
         MVC   4(2,R1),=C'* '      PATCH WITH THIS (NON-RENTERANT)
         LA    R0,28               LOAD CPCMND LENGTH
         DC    X'83100008'         DIAGNOSE CONSOLE FUNCTION
         MVC   4(2,R1),=C'OP'      PATCH FOR 'OPERATOR'
         LA    R0,28               RESET LENGTH
         DC    X'83100008'         DIAGNOSE CONSOLE FUNCTION
* WAIT FOR INTERRUPT TO BE CLEARED:
*
         AGO .NEWRTN               SKIP OLD ROUTINE FOR INTERRUPT HANDL
         NI    ACTION,X'3F'        CLEAR HIGH ORDER BITS OF ECB
         HNDINT SET,(PRT1,PRTINT,00E,ASAP)  SET INTERRUPT TRAP
         WAIT  ECB=ACTION          WAIT FOR INTERRUPT ROUTINE POST
         HNDINT CLR,(PRT1)         CLEAR INTERRUPT TRAP
         LM    14,12,PTREGWK       RESTORE REGS
         LA    13,PTREGSAV
         B     PUT1PRT             ATTEMPT TO PRINT AGAIN, ->
*
* PRINTER INTERRUPT ROUTINE
*
         USING *,R15               ESTABLISH TEMPORARY ADDRESSABILITY
PRTINT   LM    R11,R12,PRTBASE     LOAD MAIN BASE REGISTERS
         DROP  R15                 RETURN TO NORMAL ADDRESSABILITY
         POST  ACTION              TELL MAIN ROUTINE TO RUN
         SR    R15,R15             SIGNAL FINISHED WITH INTERRUPT
         BR    R14                 RETURN TO CMS
PRTBASE  DC    A(PRTTAPE,PRTTAPE+4096)
*
* PRINTER FATAL ERROR
*
PRTFATL  LA    R1,=C'MSG *  FATAL ERROR ON XEROX 9700; PRINTL RC=...'
         MVC   4(2,R1),=C'* '      PATCH WITH THIS (NON-RENTERANT)
         CVD   R15,DBLWORD         CONVERT RET. CODE TO DECIMAL PACKED
         UNPK  DBLWORD(4),DBLWORD+5(3)  UNPACK TO ZONED
         OI    DBLWORD+3,X'F0'     FIX SIGN
         MVC   44(3,R1),DBLWORD+1  SET IN MESSAGE
         LA    R0,48               LOAD CPCMND LENGTH
         DC    X'83100008'         DIAGNOSE CONSOLE FUNCTION
         MVC   4(2,R1),=C'OP'      PATCH FOR 'OPERATOR'
         LA    R0,42               RESET LENGTH
         DC    X'83100008'         DIAGNOSE CONSOLE FUNCTION
         B     ERREXIT             TAKE THIS ERROR EXIT
.NEWRTN  ANOP
*
* WAIT FOR INTERRUPT TO BE CLEARED
*
         WRTERM 'HIT ''ENTER'' WHEN READY...'
         RDTERM ACTION,LENGTH=1,EDIT=PHYS  WAIT FOR A FEW BYTES
         LA    R1,=C'READY E'      POINT CP COMMAND
         LA    R0,7                LOAD CP COMMAND LENGTH
         DC    X'83100008'         DIAGNOSE CONSOLE FUNCTION
         LM    14,12,PTREGWK       RESTORE REGS
         LA    13,PTREGSAV
         B     PUT1PRT             GO PRINT LINE AGAIN
*
*
 TITLE '- DATA AREAS AND CONSTANTS'
*
* DATA AREAS AND CONSTANTS
*
ACTION   DC    F'0'                ECB FOR PRINTER INTERRUPTS
FSW      DC    X'FF'
LLCCW    DC    X'40'
NLCCW    DC    X'40'
BLKSIZE  DC    F'3990'             BLKSIZE BINARY (DEFAULT FOR XEROX)
BLKADDR  DC    F'0'                BLOCK (BUFFER) ADDRESS
CLOSERDR DC    C'CL 00C     '      CP COMMAND, WITH ROOM FOR 'HOLD'
CLOSEPRT DC    C'CL 00E     '      CP COMMAND, WITH ROOM FOR 'HOLD'
CLOSEPUN DC    C'CL 00D     '      CP COMMAND, WITH ROOM FOR 'HOLD'
DBLWORD  DC    D'0'                WORK AREA
FSEQBIN  DC    F'0'                FILE SEQUENCE NUMBER (BINARY)
FSEQCHR  DC    CL4' '              FILE SEQUENCE NUMBER (EBCDIC)
FULLWORD DC    F'0'                FULLWORD WORK AREA
RETR14   DS    F
*
*
LRECLCNT DC    F'30'               LRECL/BLOCK COUNT (DEFAULT FOR XEROX
SPTOPRT  DC    C'SP PRT * '        OR 'XEROXING' FOR <ONLINE>
SPTOPUN  DC    C'SP PUN * '        OR 'XEROXING' FOR <ONLINE>
OUTBUFF  DC    CL136' '            OUTPUT BUILD AREA (ENOUGH FOR TAG)
PAGEADDR DC    A(0)                ADDR OF DIAG X'14' BUFFER (PAGE)
PAGEBUFF DC    A(0)                ADDR OF DIAG X'14' BUFFER (WHOLE)
*
PTREGSAV DS    18F                 PUT1LINE RTN. REGISTER SAVE AREA
PTREGWK DS    18F                 PUT1LINE RTN. WORK REGISTERS
RECCNT   DC    F'0'                RECORD COUNT BINARY SAVE
FROMLINE DC    F'0'                RECORD COUNT BINARY SAVE
NUMLINES DC    F'0'                RECORD COUNT BINARY SAVE
*
SPLIDBIN DC    F'0'                SPOOLID BINARY
SPLIDCHR DC    CL4'....'           SPOOLID EBCDIC
*
FILEID   DS  F
PFN      DC   CL8'PRD'
PFT      DS   CL8
PFM      DS   CL2
RUNTYPE  DS    C
DISK     EQU  X'01'
PRTEOF   EQU X'FF'
SPPUN   DC   X'02'
DISPMSG DS   0C
        DC   CL5'FILE'
DISPFN  DS   CL8
        DC  C' '
DISPFT  DS   CL8
        DC  C' '
DISPFM  DS   CL2
        DC  C' '
        DC  C'CREATED'
DISPMSGL EQU *-DISPMSG
DFILE FSCB 'PRD LISTING A',RECFM=V,BUFFER=OUTBUFF,BSIZE=133
UFILE FSCB 'PRD DATA    A',RECFM=F,BUFFER=OUTBUFF,BSIZE=080
*
         LTORG ,                   LITERAL POOL
*
*
 TITLE '- EQUATES'
*
* EQUATES
         REGEQU                         CMS REGISTER EQUATES
*
CC1      EQU   4                   CONDITION CODES
CC2      EQU   2                   CONDITION CODES
CC3      EQU   1                   CONDITION CODES
*
*
*
 TITLE '- DECBIN SUBROUTINE - EBCDIC DECIMAL TO BINARY CONVERSION'
*
* DECBIN SUBROUTINE - EBCDIC DECIMAL TO BINARY CONVERSION
*        R2  - POINTS TO 8-BYTE NUMBER TO BE CONVERTED
*        R14 - RETURN ADDRESS                (EB)
*        R10 - ENTRY  ADDRESS                (EB)
*        R15 - ERROR RETURN ADDRESS
* EXIT:
*        R1  - WILL CONTAIN BINARY RESULT
*
***INSERTED BY EB
DECBIN   DS    0H
         USING *,R10              TEMPORARY ADDRESSABILITY
         ST    14,SAVE14          SAVE RETURN ADDR
****END OF INSERTION
**CBIN   SR    R1,R1               EMPTY A REGISTER
         SR    R1,R1               EMPTY A REGISTER
         SR    R3,R3               AND ANOTHER
         LR    R4,R2               COPY PLIST POINTER
         LA    R5,X'F0'            LOAD APPROPRIATE MASK
         LA    R6,8                SET MAXIMUM ARGUMENT LENGTH
NUMLOOP  CLI   0(R4),C' '          CHECK FOR BLANK
         BE    NUMDONE             DONE IF THIS IS ONE
         IC    R3,0(,R4)           PICK UP CHARACTER
         SR    R3,R5               MAKE IT BINARY
         BCR   4,R15               ERROR IF NOT NUMERIC
         MH    R1,=H'10'           ADJUST
         AR    R1,R3               ADD TO WHAT ALREADY
         LA    R4,1(,R4)           POINT TO THE NEXT POSITION
         BCT   R6,NUMLOOP          DECREMENT THE ARGUMENT LENGTH
NUMDONE  LTR   R1,R1               CHECK RESULT
         BCR   13,R15              ERROR IF NOT POSITIVE
         L     R14,SAVE14          RESTORE RETURN ADDR
         BR    R14                 RETURN TO CALLER
SAVE14   DS    F
        LTORG
        DROP R11
*
*
 TITLE '- TABLES'
CCWTABLE DC   256X'00'
         ORG   CCWTABLE
         DC X'0040'
        ORG CCWTABLE+X'09'
        DC  X'400040'
        ORG CCWTABLE+X'11'
        DC  X'F000F0'
        ORG CCWTABLE+X'19'
        DC  X'600060'
        ORG CCWTABLE+X'80'
        DC  X'40'
        ORG CCWTABLE+X'89'
        DC  X'F100F1'
        ORG
*
 TITLE '- DSECTS - SFBLOK'
*
SFBLOK   DSECT
         SPACE 1
*
***                 SFBLOK  -  SPOOL FILE CONTROL BLOCK
SFBPNT   DS    1F             POINTER TO NEXT SFBLOK
SFBSTART DS    1F             DASD LOC. (DCHR) OF FIRST PAGE BUFFER
SFBUSER  DS    CL8            VMUSER IDENTIFICATION OF FILE OWNER
SFBORIG  DS    CL8            VMUSER IDENTIFICATION OF FILE ORIGIN
SFBRECNO DS    1F             NUMBER OF DATA RECORDS IN FILE
SFBRECSZ DS    1H             LOGICAL RECORD SIZE - EXCLD. CCWS
SFBFILID DS    1H             BINARY SYSTEM FILE NUMBER
SFBFLAG  DS    1X         S*1 SFBLOK CONTROL FLAGS
SFBTYPE  DS    1X         S*2 DEVICE TYPE FOR SPOOL OUTPUT
SFBMISC1 DS    1H             USE VARIES ACCORDING TO CALLER
SFBRECS  DS    1F             POINTER TO RECBLOKS FOR ACTIVE FILE
SFBFNAME DS    CL12           FILE NAME
SFBFTYPE DS    CL12           FILE TYPE
SFBDATE  DS    CL8            CREATION DATE OF SPOOL FILE
SFBTIME  DS    CL8            CREATION TIME OF SPOOL FILE
SFBLAST  DS    1F             DASD LOC. (DCHR) OF LAST PAGE BUFFER
SFBCOPY  DS    1H             NUMBER OF COPIES REQUESTED
SFBCLAS  DS    1X         S*3 SPOOL FILE CLASS CHARACTER
SFBFLAG2 DS    1X         S*4 SFBLOK CONTROL FLAGS - BYTE TWO
SFBDIST  DS    CL8            DISTRIBUTION CODE
         SPACE 1
SFBSIZE  EQU   (*-SFBLOK)/8   SIZE IN DOUBLE WORDS
         SPACE 1
*        BITS DEFINED IN SFBFLAG
SFBINUSE EQU   X'80'          FILE BEING PROCESSED
SFBRECOK EQU   X'40'          ALLOCATION RECORDS COMPLETE
SFBUHOLD EQU   X'20'          FILE IN USER HOLD STATUS
SFBDUMP  EQU   X'10'          FILE IS A CP SYSTEM DUMP
SFBOPEN  EQU   X'08'          INPUT FILE HAS BEEN OPENED
SFBSHOLD EQU   X'04'          FILE IN SYSTEM HOLD STATUS
SFBEOF   EQU   X'02'          INPUT FILE HAS REACHED EOF
SFBRECER EQU   X'01'          SFBREC CHAIN INCOMPLETE
         SPACE
*        BITS DEFINED IN SFBFLAG2
SFBHOLD  EQU   X'80'          SAVE INPUT FILE
*                             HOLD OUTPUT FILE
SFBNOHLD EQU   X'40'          DELETE INPUT FILE
*                             NOHOLD OUTPUT FILE
SFBFLNMT EQU   X'20'          FILE NOT EMPTY IF ON             @VA04920
*   SFBHOLD AND SFBNOHLD OVERRIDE OPTIONS IN VDEVBLOK
SFBREQUE EQU   X'20'          REQUEUE SPOOL FILE
SFBRSTRT EQU   X'10'          RESTART IN PROGRESS
SFBTICER EQU   X'08'          BUFFER TIC ERROR
SFBPURGE EQU   X'04'          PURGE OPEN SPOOL FILE
SFBFIRST EQU   X'02'          INDICATE FIRST PAGE WRITTEN      @VM03437
SFBMON   EQU   X'01'             MONITOR CLASS FILE            @V50A2B5
*
*
*
 TITLE '- DSECTS - NUCON'
         NUCON
 TITLE '- DSECTS - FSCBD'
         FSCBD
*
         END
