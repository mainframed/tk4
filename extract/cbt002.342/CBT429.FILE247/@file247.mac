//***FILE 247 is from Jim Marshall and Sam Golob and contains       *
//*           the "BRODCAST MANAGER" package of programs.  These    *
//*           programs are designed to eliminate the need for       *
//*           frequent SYNC's of the SYS1.BRODCAST dataset, and     *
//*           to give you control in displaying and deleting all    *
//*           user messages in the SYS1.BRODCAST dataset.           *
//*                                                                 *
//*           This package is now a full function set of utilities  *
//*           to manage, copy, export, or import SYS1.BRODCAST.     *
//*           (Of course, I'm thinking about adding a bit more...)  *
//*                                                                 *
//*           Questions, please call or write to:                   *
//*                                                                 *
//*             Sam Golob,  P.O. Box 906,  Tallman, NY 10982-0906   *
//*                                                                 *
//*             phone:  914-362-1996                                *
//*             email:  sbgolob@ibm.net  and/or  sbgolob@aol.com    *
//*                                                                 *
//*   >>>>>   You can also move SYS1.BRODCAST to a different        *
//*   >>>>>   device type (e.g. 3380 to 3390) and/or expand it,     *
//*   >>>>>   without losing any notices or user messages.          *
//*                                                                 *
//*   >>>>>   And you can dump SYS1.BRODCAST into a transportable   *
//*   >>>>>   format, then restore it from the dump file.           *
//*                                                                 *
//*           All TSO commands in this package use the TSO          *
//*           PUTLINE interface, so their outputs can be written    *
//*           to SYSOUT and printed.  Therefore, they can be run    *
//*           using TSO-in-Batch.                                   *
//*                                                                 *
//*           There are programs in this package to display and     *
//*           delete any TSO user's messages, and to display the    *
//*           contents of the SYS1.BRODCAST dataset in general.     *
//*           Now, there's also a program to dump the entire        *
//*           contents of SYS1.BRODCAST into a flat file, for       *
//*           moving or sending to anywhere, and there are two      *
//*           programs for restoring this dumped file. Both pgms    *
//*           will adjust for device type changes.  One will just   *
//*           restore the dumped file back into a direct access     *
//*           dataset, and the other will expand the SYS1.BRODCAST  *
//*           copy, by adding more blank user message records.      *
//*                                                                 *
//*     Programs Included - by name:                                *
//*                                                                 *
//*     BCMCLEAN  -  When LISTBC deletes a user message, it only    *
//*                  marks it as deleted, without clearing the      *
//*                  message content from SYS1.BRODCAST.  This      *
//*                  program zeros out all deleted records, so if   *
//*                  you BROWSE or REVIEW (File 134) SYS1.BRODCAST, *
//*                  you'll really see how empty it is.             *
//*                                                                 *
//*     BCMDEL    -  TSO command to display and delete any user's   *
//*                  broadcast messages.  Works by changing the     *
//*                  PSCBUSER field to the other user's name and    *
//*                  invoking LISTBC.  Therefore it also works to   *
//*                  delete another user's messages from a TSO      *
//*                  Userlog.  Must be authorized.                  *
//*                                                                 *
//*     BCMDEL1   -  TSO command to display and delete any user's   *
//*                  messages.  Works by plugging the other user's  *
//*                  message pointers into your userid's slot, and  *
//*                  invoking LISTBC for your id.  Obviously can't  *
//*                  delete the other user's message from a Userlog *
//*                  because LISTBC thinks he's running against     *
//*                  your userid.  Must run authorized, to invoke   *
//*                  LISTBC.                                        *
//*                                                                 *
//*     BCMDEL2   -  TSO Command to display and delete any user's   *
//*                  messages, but it works directly on the         *
//*                  SYS1.BRODCAST dataset itself (or a copy) and   *
//*                  goes in, does the enqueues, and does all the   *
//*                  work directly.  Since it doesn't need LISTBC,  *
//*                  this command doesn't have to run authorized.   *
//*                  Can't work on Userlogs.  Only SYS1.BRODCAST.   *
//*                                                                 *
//*     BCMDIAG   -  Attempts to find "orphaned messages" which     *
//*                  are "officially valid" but which are not       *
//*                  part of a userid message chain.  Once found,   *
//*                  you have to fix 'em by hand.  (Null 'em out    *
//*                  with Fullscreen ZAP (File 134)).  Sorry.       *
//*                  Key byte of a null record is X'FF'.  First     *
//*                  data byte is "R" from CCHHR or TTR.            *
//*                                                                 *
//*     BCMDUMP   -  Works with BCMREST and BCMEXPND.  Dumps the    *
//*                  RECFM=DA SYS1.BRODCAST dataset into a RECFM=FB *
//*                  LRECL=130 dataset that can be moved anywhere.  *
//*                  BCMREST will reload this dump into a copy of   *
//*                  SYS1.BRODCAST, even across different device    *
//*                  types.  BCMEXPND will also do this, but it     *
//*                  will add blank userid messages to fill all     *
//*                  allocated primary extent space.  Therefore,    *
//*                  with BCMEXPND, you can enlarge SYS1.BRODCAST   *
//*                  without losing the messages.  Or you can move  *
//*                  it, to a different pack or even a different    *
//*                  system.                                        *
//*                                                                 *
//*     BCMEXPND  -  Works from a BCMDUMP RECFM=FB LRECL=130 dump   *
//*                  of SYS1.BRODCAST dataset, and will restore it, *
//*                  with all the messages and notices, to a copy   *
//*                  of SYS1.BRODCAST, that has been enlarged with  *
//*                  blank userid message records, to fit a bigger  *
//*                  allocated space.  Therefore, you can make      *
//*                  SYS1.BRODCAST bigger, without losing any       *
//*                  messages, and without doing an ACCOUNT SYNC.   *
//*                  Needs an IPL.  Compensates for different       *
//*                  device types.  (This may be the first time     *
//*                  in the history of OS and MVS that this could   *
//*                  be done.  I've never heard of another such     *
//*                  program.)                                      *
//*                                                                 *
//*     BCMREST   -  Does the same as BCMEXPND, but doesn't add     *
//*                  any new records.  Just restores the records    *
//*                  that were dumped.  Will compensate for         *
//*                  different disk device types.  You can move     *
//*                  SYS1.BRODCAST from a 3380 to a 3390, for       *
//*                  example, without losing any messages.          *
//*                                                                 *
//*     BCMLIST   -  TSO command, not authorized or restricted,     *
//*                  to list any user's (or all users') messages    *
//*                  in SYS1.BRODCAST.  Doesn't do Userlogs.        *
//*                  All the BCMLIS* programs can be invoked,       *
//*                  using a special userid name ALL$#@, which      *
//*                  will display information for all userids       *
//*                  defined to SYS1.BRODCAST.  All these BCMLIS*   *
//*                  commands can be run under TSO-in-Batch.        *
//*                                                                 *
//*     BCMLISY   -  Same as BCMLIST, but shows each message's      *
//*                  Relative Record Address.  (For diagnostic      *
//*                  purposes, to show the message chain.)          *
//*                                                                 *
//*     BCMLISX   -  Same as BCMLISY, but also shows entries for    *
//*                  users with no outstanding messages.  Can be    *
//*                  used (somewhat awkwardly) to display a list    *
//*                  of all defined userids in SYS1.BRODCAST.       *
//*                  For that purpose, use the BCMUSERS program.    *
//*                  This program is best used in TSO-in-Batch.     *
//*                                                                 *
//*     BCMSEND   -  This TSO command is sort of similar to a       *
//*                  TSO SEND command, except for some very         *
//*                  significant differences.  First, BCMSEND       *
//*                  only writes messsages to the BRODCAST dataset. *
//*                  It doesn't matter if the user is logged on.    *
//*                  Second, BCMSEND doesn't use the TSO parser.    *
//*                  Therefore, it doesn't "validity check" the     *
//*                  text of the message.  Everything that is in    *
//*                  the command buffer after 7 characters of the   *
//*                  userid, goes into the message--even hex data.  *
//*                  This is until the last non-blank character.    *
//*                  Third, you can use BCMSEND to write to a copy  *
//*                  of the SYS1.BRODCAST dataset, as well as to    *
//*                  the real one.  Just allocate the BRODCAST      *
//*                  ddname to the other dataset, not to the        *
//*                  cataloged SYS1.BRODCAST dataset.  You need     *
//*                  UPDATE authority to the BRODCAST dataset, to   *
//*                  use BCMSEND to write to it.                    *
//*                                                                 *
//*     BCMUSADD  -  Uses IBM's IKJIFRIF interface.  This is a      *
//*                  TSO command to add an arbitrary user name      *
//*                  as a userid in SYS1.BRODCAST.  This command    *
//*                  can be used in conjunction with BCMUSDEL.      *
//*                  Adding a userid with BCMUSADD has nothing      *
//*                  to do with either UADS or RACF.  But it        *
//*                  allows the system to SEND messages to this     *
//*                  arbitrary (up to 7 characters) name.           *
//*                                                                 *
//*     BCMUSDEL  -  TSO command to delete an arbitrary TSO         *
//*                  userid record from SYS1.BRODCAST.  When the    *
//*                  userid is deleted, so are all its messages.    *
//*                  This command uses IBM's official IKJIFRIF      *
//*                  SYS1.BRODCAST interface.  Can be used to       *
//*                  clear all of a user's messages from SYS1.      *
//*                  BRODCAST without displaying them, but if you   *
//*                  want to keep the userid, you have to use       *
//*                  BCMUSADD afterwards, to add the id back.       *
//*                                                                 *
//*     BCMSCAN   -  A modernization of the old BRODCAST program    *
//*                  that is on this tape.  This is a batch program *
//*                  that does a general statistical survey of the  *
//*                  current state of the SYS1.BRODCAST dataset.    *
//*                  It displays all users who have outstanding     *
//*                  undelivered messages, and how many.  Therefore *
//*                  if SYS1.BRODCAST is full, or nearly so, you    *
//*                  run this program first, to determine which     *
//*                  userids are the culprits.                      *
//*                                                                 *
//*     BCMUSERS  -  TSO command to display all userids defined     *
//*                  to SYS1.BRODCAST.  This has nothing to do      *
//*                  with UADS or RACF.  Default is now to display  *
//*                  only users with outstanding messages.  If you  *
//*                  want to display all userids, use a parm of A   *
//*                  or ALL.                                        *
//*                                                                 *
//*                  If you use a parm of A, userids with           *
//*                  outstanding messages will be displayed with    *
//*                  2 extra lines.  One line shows the starting    *
//*                  and ending message pointer address in the      *
//*                  userid id record.  The other line shows the    *
//*                  number of outstanding messages for this        *
//*                  userid.                                        *
//*                                                                 *
//*     MYID      -  A TSO command to display your own userid.      *
//*                  Uses the PSCBUSER field.  Written as a coding  *
//*                  exercise, but it's handy to use.               *
//*                                                                 *
//*     SYSTM     -  A TSO command to display what system you're    *
//*                  running on.  Also written as an exercise.      *
//*                  But also handy to have, so I'm making it       *
//*                  available here.                                *
//*                                                                 *
