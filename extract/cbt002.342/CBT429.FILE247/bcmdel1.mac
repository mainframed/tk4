BCMDEL   TITLE 'BCMDEL - DRAIN BROADCAST MESSAGES FOR A USERID.'
         SPACE 1
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *
*                   COMMAND.   MUST BE RUN AUTHORIZED.                *
*                                                                     *
*         SYNTAX:   BCMDEL USERID                                     *
*                                                                     *
*       FUNCTION:   TO DISPLAY AND DELETE UN-SENT BROADCAST MESSAGES  *
*                   FOR A TSO USERID.  USUALLY USED TO CLEAR MESSAGES *
*                   FROM ID'S WHICH CAN'T BE LOGGED ON TO.  RUNS BY   *
*                   MOVING THE OTHER USER'S MESSAGE POINTERS IN SYS1. *
*                   BRODCAST TO YOUR USERID ENTRY IN SYS1.BRODCAST    *
*                   AND INVOKING LISTBC AGAINST YOUR OWN USERID.      *
*                   YOUR OWN MESSAGE POINTERS ARE SAVED AND REPLACED. *
*                                                                     *
*          AUTHOR:  SAM GOLOB               VERSION:   2.0            *
*                                                                     *
*            DATE:  MAY 26, 95           DEBUGGED, WITH TPUTS OUT.    *
*                                                                     *
*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *
*                   ALLOC F(SYSLBC)   DA('SYS1.BRODCAST') SH REUSE    *
*                                                                     *
*         CHANGES:                                                    *
*                                                                     *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*       I N S T R E A M    M A C R O S                                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
         IKJZT301  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                                RECORD 1                             *
*                                                                     *
*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *
*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *
*        CONCERNING THE DATA SET.                                     *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
R1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET
         AGO   .SKIP
.NODSECT ANOP
R1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET
.SKIP    ANOP
R1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW
R1BCFLGS DS    B -            NOTICES FLAGS - NOT USED
R1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST
*                               NOTICES DIRECTORY RECORD
R1USPTRP DS    0A -           SAME AS R1USPTR BELOW
R1USFLGS DS    B -            USER MAIL FLAGS - NOT USED
R1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD
R1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS
R1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -
*                               FROM MASTER SCHEDULER BASEA, BABCMAX
*                                                                     *
R1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =
*                               ' SYS1.BRODCAST DATA SET '
R1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS
*                               A 1-DIGIT NUMBER
         DS    CL84 -         RESERVED
         MEND
         MACRO
         IKJZT304  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                       USER MAIL DIRECTORY RECORD                    *
*                                                                     *
*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *
*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *
*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *
*        LAST MESSAGE FOR EACH USERID.                                *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
USDIR    DSECT , -            USER MAIL DIRECTORY RECORD
         AGO   .SKIP
.NODSECT ANOP
USDIR    DS    0F -           USER MAIL DIRECTORY RECORD
.SKIP    ANOP
USDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID
USDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)
USDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST
*                               MESSAGE FOR THIS USERID (ZERO IF NONE)
USDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID
*                               (ZERO IF NONE)
         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY
*                               ENTRIES IDENTICAL IN FORMAT TO THE
*                               PRECEDING 'USDENTRY'
         DS    XL8 -          RESERVED
USDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'
USDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY
*                               RECORD (ZERO IF LAST)
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
*        REGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
SP000    EQU   0
         SPACE 1
BCMDEL   CSECT
         USING BCMDEL,R12
         B     BEGINN-*(,R15)
         DC    AL1(16),CL16'BCMDEL VER 2.0'
         DC    CL16' &SYSDATE &SYSTIME '
         DS    0H
BEGINN   STM   R14,R12,12(R13)
         LR    R12,R15
         LR    R11,R1              PRESERVE CPPL POINTER.
         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DATAAREA,R13
         MVI   LINE-1,C' '
         SPACE 1
         L     R1,16               POINT TO CVT.
         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS
         L     R10,12(,R1)         POINT TO ASCB.
         L     R9,4(,R1)           POINT TO TCB.
         L     R1,X'B4'(,R9)       POINT TO JSCB.
         L     R2,X'108'(,R1)      POINT TO PSCB.
         LA    R2,0(,R2)           CLEAR HIGH BYTE.
         LTR   R2,R2               ANY PSCB?
         BZ    EOJ8                GET OUT.  NOT TSO.
         USING CPPL,R11
         L     R6,CPPLUPT
         ST    R6,SAVEUPT
         L     R6,CPPLPSCB
         ST    R6,SAVEPSCB
         L     R6,CPPLECT
         ST    R6,SAVEECT
         LA    R6,0
************************************************************
*        SET UP IOPL FOR PUTLINE                           *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         DROP  R11
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE
         L     R15,CVTPTR          POINT TO CVT                  JDM1
         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1
         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1
         DROP  R15                                               JDM1
         B     PUTLOADX            BRANCH AROUND LOAD
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
CHEKAUTH DS    0H            CHECK USER AUTHORIZATION        PARS 06/99
         B     CONT0         ALWAYS ALLOW                    PARS 06/99
         USING PSCB,R2
*        TM    PSCBATR1,PSCBACCT   ACCT USER?
         BO    CONT0               YES.  CONTINUE.
         TM    PSCBATR1,PSCBCTRL   OPER USER?
*        BZ    EOJ4                NO.  GET OUT.
CONT0    LTR   R11,R11             ANY CPPL?
         BZ    EOJ8                NO.  GET OUT
         L     R1,0(,R11)          PT TO CMD BUFFER.
         LTR   R1,R1               ANY CMD BUFFER?
         BZ    EOJ4                GET OUT IF NONE
         LH    R3,0(,R1)           LOAD LENGTH.
         CH    R3,=H'4'            ANYTHING?
         BNH   EOJ4                NO.  GET OUT.
         LR    R5,R3               LENGTH OF COMMAND + 4
         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES
*        ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS
*        L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS
         LH    R3,2(,R1)           LOAD OFFSET.
         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4
         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER
         BC    8,WMESS2            ZERO, ISSUE MESSAGE
         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.
         AR    R1,R3               POINT ...
         LA    R1,4(,R1)           ... TO CHAR.
         LA    R6,7                LOAD REG FOR BCT LOOP
         LR    R7,R1               INITIALIZE POINTER
         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID
         LA    R8,0                INITIALIZE CHARACTER COUNT
CUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?
         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.
         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER
         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER
         CR    R8,R5               END OF COMMAND BUFFER ?
         BNL   NOMORCUT            YES. GET OUT NOW.
         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN
NOMORCUT DS    0H
         MVC   NEWID(8),BLANKS     CLEAR FIELD
         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE
         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID
         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS
         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH
         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID
         MVC   OLDID(8),BLANKS     CLEAR FIELD
         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID
         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED
         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD
         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH
         MVC   TRYID(8),OLDID      RUN USERID SCAN AGAINST MY ID
         MVI   SCANFLAG,0          SAY WE'RE SCANNING AND SAVING
         B     DOBROD              GO DO SCAN AND SAVE POINTERS
         DROP  R2
SCANNEW  MVC   TRYID(8),NEWID      DO SCAN AND BLAST MESSAGES
         MVI   SCANFLAG,255        SAY WE'RE MSG BLASTING
         B     HEADRD
DOBROD   OPEN  (BRODCAST,(UPDAT))
         TM    BRODCAST+48,X'10'
         BNO   WMESS1
         MVC   RNAM(3),ZEROS       RNAME TO ENQUEUE ON
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
HEADRD   READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOKZERO,MF=E       RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R6,MDLDECB+12       ADDRESS OF RECORD
         USING R1BC,R6             ADDRESSABILITY TO HEADER RECORD MAP
         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD
         DROP  R6
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
INDEXUS  DS    0H                  READ THROUGH USERID RECORDS
         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS
         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.
         LA    R6,9                COUNT OF USERS PER RECORD
         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R3,MDLDECB+12       ADDRESS OF RECORD
         USING USDIR,R3
         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA
         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA
         LA    R8,0                INITIALIZE USERID SLOT COUNTER
USRLOOP  DS    0H
         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE
         MVC   USERIDI(7),USDID    COPY WHO THIS IS
         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?
         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY
         CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?
         BE    SAVPTRS             YEP. GO DEAL WITH IT
TRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID
         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD
         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY
*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         B     INDEXUS             END OF RECORD? GET ANOTHER.
         SPACE 3
SAVPTRS  CLI   SCANFLAG,X'00'      WHAT ARE WE GOING TO DO?
         BNE   GOBLAST             NOT ZERO, ASSUME WE'LL BLAST MSGS
         MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID
         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD
         MVC   SVMYPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES
*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         B     SCANNEW             GO LOOK FOR THE OTHER ID
GOBLAST  DS    0H
         MVC   NWUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH NEW USERID
         STC   R8,NWUSSLOT         SAVE SLOT IN RECORD
         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO HIS MESSAGES
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         MVC   FNUSRBA(3),MYUSRBA  DUMP IN RBA FOR FIND ROUTINE
         MVC   FNUSSLOT,MYUSSLOT   DUMP IN SLOT NUMBER
         MVC   FINDPTRS,SAVEPTRS   POINTERS TO BE PUT IN
         MVC   CMPRPTRS,SVMYPTRS   POINTERS TO CHECK IF CHANGED
         MVC   FINDID(8),OLDID     DUMP IN ID NAME FOR CHECKING
         NI    COMPFLAG,255-X'80'  DO THE COMPARING
         BAL   R4,FINDUSR          NEWID PTRS INTO OLDID SLOT
         MVC   SVMYPTRS,CMPRPTRS   POINTERS TO CHANGE IF CHANGED
         BAL   R4,KZ               GO BLAST NEWID'S MESSAGES
*
         MVC   FNUSRBA(3),NWUSRBA  DUMP IN RBA FOR FIND ROUTINE
         MVC   FNUSSLOT,NWUSSLOT   DUMP IN SLOT NUMBER
         MVC   FINDPTRS,ZERENTRY   POINTERS TO BE PUT IN
         MVC   CMPRPTRS,SAVEPTRS   POINTERS TO CHECK IF CHANGED
         MVC   FINDID(8),NEWID     DUMP IN ID NAME FOR CHECKING
         NI    COMPFLAG,255-X'80'  DO THE COMPARING
         BAL   R4,FINDUSR          NEWID PTRS INTO OLDID SLOT
         MVC   SAVEPTRS,CMPRPTRS   POINTERS TO CHANGE IF CHANGED
*
         MVC   FNUSRBA(3),MYUSRBA  DUMP IN RBA FOR FIND ROUTINE
         MVC   FNUSSLOT,MYUSSLOT   DUMP IN SLOT NUMBER
         MVC   FINDPTRS,SVMYPTRS   POINTERS TO BE PUT IN
         MVC   CMPRPTRS,SVMYPTRS   POINTERS TO CHECK IF CHANGED
         MVC   FINDID(8),OLDID     DUMP IN ID NAME FOR CHECKING
         OI    COMPFLAG,X'80'      NO COMPARE BECAUSE RECD IS DIFFERENT
         BAL   R4,FINDUSR          NEWID PTRS INTO OLDID SLOT
ENDUSER  DS    0H                  PROCESSING WHEN YOU'VE ENDED SCAN
         CLI   SCANFLAG,X'00'      HAVE WE JUST SCANNED AND SAVED
         BNE   ZEROUT
         BAL   R4,ADDUSER          YES, BUT WE GOT TO THE END FIRST
*                                  AND THERE'S NO USERID ENTRY SO WE
*                                  HAVE TO ADD ONE.
         L     R6,IKJIFRET         IKJIFRIF RETURN CODE
         LTR   R6,R6               TEST IF ZERO
         BNZ   ZEROUT              ADD NOT SUCCESSFUL, GET OUT
         B     HEADRD              ADDED. GET THE FIRST ID SLOT AGAIN
ZEROUT   DS    0H
         B     EOJ0                SECOND TIME AROUND.  WE'RE DONE.
*                                  OR FIRST TIME AND IKJIFRIF NO GOOD.
KZ       MODESET KEY=ZERO
         MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.
         LR    R1,R11              POINT R1 TO CPPL.
         LINK  EP=LISTBC           DO LISTBC COMMAND.
NZ       MODESET KEY=NZERO
         BR    R4                  RETURN TO CALLER
         SPACE 3
WMESS2   MVC   LINE,LINE-1
         MVC   LINE,MESSAGE2
         LA    R0,L'MESSAGE2
         BAL   R4,MSG
         B     EOJ4                                          PARS 06/99
WMESS1   MVC   LINE,LINE-1
         MVC   LINE,MESSAGE1
         LA    R0,L'MESSAGE1
         BAL   R4,MSG
EOJ4     LA    R15,4               SET CC = 4.
EOJ      DS    0H                  BYE.
         MVC   RNAM(3),ZEROS       RNAME TO ENQUEUE ON
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         CLOSE (BRODCAST)
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000
         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
EOJ0     SR    R15,R15             SET CC = 0.
         B     EOJ                 CONT.
EOJ8     LA    R15,8               SET CC = 8.
         B     EOJ                 CONT
FINDUSR  DS    0H
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    BEFORE CALLING THIS ROUTINE, PLEASE MAKE SURE THAT FINDID,     *
*    FINDPTRS, AND FNUSSLOT ARE ALL POINTING TO THE SAME ID.        *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MVC   RNAM(3),FNUSRBA     RBA TO ENQUEUE ON
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               FNUSRBA,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R2,MDLDECB+20       ADDRESS OF KEY
         CLI   0(R2),X'01'         IS THIS A USERID RECORD
         BNE   FINDEND             NO. WE HAVE NO BUSINESS BEING HERE
         LA    R3,0                CLEAR REGISTER
         LA    R2,0                CLEAR REGISTER
         IC    R3,FNUSSLOT         DUMP IN SLOT NUMBER OF USERID
         M     R2,=F'13'           SIZE OF ENTRY
*                                  PRODUCT IS DBLWD SIZE R2 + R3
         L     R5,MDLDECB+12       ADDRESS OF RECORD
         LA    R2,0(R3,R5)         FIND OUR SLOT
         LR    R3,R2
         USING USDIR,R3
         CLC   FINDID(7),USDID     IS THIS OUR USERID ?
         BNE   FINDEND             NOPE. WE HAVE AN ERROR IN OUR FIND
         TM    COMPFLAG,X'80'      ARE WE COMPARING ?
         BO    NOCOMPR             FLAG IS ON.  NO COMPARE
LOOPBAK  CLC   USDRBA(6),CMPRPTRS  HAVE THE POINTERS BEEN UPDATED SINCE
         BE    NOCOMPR             THEY ARE OK. DON'T UPDATE THEM
         MVC   CMPRPTRS(6),USDRBA  DIFFERENT. USE THE ONES FROM THE RCD
NOUPDTE  B     LOOPBAK             MAKE SURE THEY'RE EQUAL
NOCOMPR  MVC   USDRBA(6),FINDPTRS  ALL IS OK. PLUG IN POINTERS WE WANT
*                                  AND UPDATE THE RECORD.
         WRITE MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               FNUSRBA,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
FINDEND  DS    0H
         MVC   RNAM(3),FNUSRBA     RBA TO ENQUEUE ON
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         DROP  R3                                            PARS 06/99
         BR    R4
ADDUSER  DS    0H
         STM   R14,R15,STOR1415
         STM   R0,R1,STOR0001
         MVC   NEXT(4),=F'0'       INITIALIZE
DOADD    IKJIFRIF ECT=SAVEECT,PSCB=SAVEPSCB,UPT=SAVEUPT,ADD=ADDADR,    X
               RETCODE=IKJIFRET,MF=(E,ADDIDL)
         LM    R14,R15,STOR1415
         LM    R0,R1,STOR0001
         BR    R4
         EJECT
MSG      LA    R1,LINE
*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.
         BAL   R14,PUTLINE
         MVC   LINE,LINE-1
         BR    R4
         SPACE
************************************************************
*        PUTMSG ROUTINE                                    *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTSAVE
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE
************************************************************
*        PUTLINE ROUTINE                                   *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTSAVE
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE 1
         EJECT
FULLZERO DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - *
MOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED
* - - - - - - - - - - - - - - - - - - - - - - - - *
BLANKS   DC    C'        '         8 BLANKS
BLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER
ZEROS    DS    0CL8
ZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING
         DC    X'0000'
MESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'
MESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'
BPARM    DC    AL2(BPARME-BPARM,0),C'NON'
BPARME   EQU   *
         DS    0F
QNAM     DC    CL8'SYSIKJBC'
RNAME    DC    X'000000'
         SPACE 3
BRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X
               BLKSIZE=129,        LENGTH OF FILES BLOCK               X
               DSORG=DA,           IS DIRECT ACCESS FILE               X
               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X
               OPTCD=R,            3 BYTE RBA WILL BE USED             X
               RECFM=F,            FIXED LENGTH                        X
               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X
               KEYLEN=1,           SIZE OF KEY                         X
               BUFL=130            KEYLEN + BLKSIZE
         SPACE 3
         LTORG
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         DS    0F
ENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L
         SPACE 3
DATAAREA DSECT
SAVE     DS    9D
CMBUFAD  DS    F                   COMMAND BUFFER ADDRESS
NEWID    DC    C'        '         STORE PARM USERID HERE
         DS    CL72                PADDING
ADDADR   DS    0CL12
NEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS
OLDID    DC    C'        '         STORE OLD USERID HERE
SAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID
SVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID
FINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID
WRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE
CMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN
OLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE
NEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE
BLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ
LASTRBA  DC    X'000000'           STORE CURRENT RBA
SAVERBA  DC    X'000000'           STORE RBA FOR LATER READ
MYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER
NMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE
MESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE
MYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD
NWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER
NWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD
FNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND
FNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD
RNAM     DC    X'000000'           RBA TO ENQUEUE ON...
USERID   DS    0CL8                STORE FOUND USERID HERE
USERIDI  DS    CL7                 STORE FOUND USERID HERE
USERIDF  DS    CL1                 8TH CHARACTER
FINDID   DS    0CL8                USERID NAME TO BE FOUND
FINDIDI  DS    CL7                 FIRST 7 CHARACTERS
FINDIDF  DS    CL1                 8TH CHARACTER
TRYID    DS    0CL8                STORE TEST USERID HERE
TRYIDI   DS    CL7                 STORE TEST USERID HERE
TRYIDF   DS    CL1                 8TH CHARACTER
SCANFLAG DC    X'00'               FLAG FOR USERID SCANS
COMPFLAG DC    X'00'               FLAG FOR USERID SCANS
         DS    0F                  ALIGN ON FULLWORD
SAVEUPT  DS    F                   SAVE FOR IKJIFRIF
SAVEPSCB DS    F                   SAVE FOR IKJIFRIF
SAVEECT  DS    F                   SAVE FOR IKJIFRIF
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE
PUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE
LINEB    DS    C                   LINE-1
LINE     DS    CL137
RDWR     READ  MDLDECB,DI,MF=L
RDWREND  DS    0F
RDWRLEN  EQU   *-RDWR
ADDIDL   IKJIFRIF MF=L
ADDIDEND DS    0F
ADDIDLEN EQU   *-ADDIDL
IKJIFRET DS    F
STOR0001 DS    2F
STOR1415 DS    2F
         SPACE 1
DATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA
         IKJCPPL
         IKJUPT
         IKJPSCB
         IKJECT
         IKJIOPL
         IKJZT301 DSECT=YES
         IKJZT304 DSECT=YES
         CVT      LIST=YES,DSECT=YES
         IKJTSVT
         END
