BCMSEND  TITLE 'BCMSEND - SEND A MESSAGE TO A USERID IN SYS1.BRODCAST'
         SPACE 1
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *
*                   COMMAND.   NEED NOT BE AUTHORIZED.                *
*                                                                     *
*         SYNTAX:   BCMSEND USERID MESSAGE TEXT                       *
*                                                                     *
*       FUNCTION:   TO SEND A USERID MESSAGE TO A TSO USERID WHO IS   *
*                   DEFINED IN SYS1.BRODCAST.  WORKS ON SYS1.BRODCAST *
*                   INTERNALLY, WITHOUT USING THE SEND COMMAND.       *
*                                                                     *
*          AUTHOR:  SAM GOLOB               VERSION:   4.0            *
*                                                                     *
*            DATE:  MAY 31, 99                                        *
*                                                                     *
*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *
*                                                                     *
*         CHANGES:                                                    *
*                                                                     *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*       I N S T R E A M    M A C R O S                                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
         IKJZT301  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*        UPDATED                          31MAY95 SBG.
*
*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                                RECORD 1                             *
*                                                                     *
*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *
*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *
*        CONCERNING THE DATA SET.                                     *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
R1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET
         AGO   .SKIP
.NODSECT ANOP
R1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET
.SKIP    ANOP
R1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW
R1BCFLGS DS    B -            NOTICES FLAGS - NOT USED
R1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST
*                               NOTICES DIRECTORY RECORD
R1USPTRP DS    0A -           SAME AS R1USPTR BELOW
R1USFLGS DS    B -            USER MAIL FLAGS - NOT USED
R1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD
R1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS
R1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -
*                               FROM MASTER SCHEDULER BASEA, BABCMAX
*                                                                     *
R1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =
*                               ' SYS1.BRODCAST DATA SET '
R1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS
*                               A 1-DIGIT NUMBER
         DS    CL1 -          RESERVED
R1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD
R1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE
*                               TABLE
         DS    CL76 -         RESERVED
         MEND
         MACRO
         IKJZT304  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                       USER MAIL DIRECTORY RECORD                    *
*                                                                     *
*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *
*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *
*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *
*        LAST MESSAGE FOR EACH USERID.                                *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
USDIR    DSECT , -            USER MAIL DIRECTORY RECORD
         AGO   .SKIP
.NODSECT ANOP
USDIR    DS    0F -           USER MAIL DIRECTORY RECORD
.SKIP    ANOP
USDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID
USDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)
USDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST
*                               MESSAGE FOR THIS USERID (ZERO IF NONE)
USDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID
*                               (ZERO IF NONE)
         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY
*                               ENTRIES IDENTICAL IN FORMAT TO THE
*                               PRECEDING 'USDENTRY'
         DS    XL8 -          RESERVED
USDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'
USDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY
*                               RECORD (ZERO IF LAST)
         MEND
         MACRO
         IKJZT305  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*
*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                        USER MAIL MESSAGE RECORD                     *
*                                                                     *
*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *
*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *
*        INTENDED FOR A PARTICULAR USERID.                            *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
USMSG    DSECT , -            USER MAIL MESSAGE RECORD
         AGO   .SKIP
.NODSECT ANOP
USMSG    DS    0F -           USER MAIL MESSAGE RECORD
.SKIP    ANOP
USMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT
USMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)
USMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD
*                               FOR THIS USERID (ZERO IF LAST)
         MEND
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    STM   15,1,HEXSAVE
         LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   4,HEX
         LM    15,1,HEXSAVE
         MEND
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
*        REGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
SP000    EQU   0
         SPACE 1
BCMSEND  CSECT
         USING BCMSEND,R12,R10
         B     BEGINN-*(,R15)
         DC    AL1(16),CL16'BCMSEND VER 4.0'
         DC    CL16' &SYSDATE &SYSTIME '
         DS    0H
BEGINN   STM   R14,R12,12(R13)
         LR    R12,R15             LOAD FIRST BASE REGISTER
         LA    R10,4095(,R12)      LOAD SECOND BASE            SG 05/99
         LA    R10,1(,R10)                                     SG 05/99
         LR    R11,R1              PRESERVE CPPL POINTER.
         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DATAAREA,R13
         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA
         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)
         SPACE 1
         LTR   R2,R2               ANY PSCB?
         BZ    EOJ8                GET OUT.  NOT TSO.
         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL
         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE
*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?
CONT0    LTR   R11,R11             ANY CPPL?
         BZ    EOJ8                NO.  GET OUT
         L     R1,0(,R11)          PT TO CMD BUFFER.
         LTR   R1,R1               ANY CMD BUFFER?
         BZ    EOJ4                GET OUT IF NONE
         LH    R3,0(,R1)           LOAD LENGTH.
         STH   R3,CMBLENG          SAVE COMMAND BUFFER LENGTH  SG 05/99
         CH    R3,=H'4'            ANYTHING?
         BNH   EOJ4                NO.  GET OUT.
         LR    R5,R3               LENGTH OF COMMAND + 4
         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES
         LH    R3,2(,R1)           LOAD OFFSET.
         STH   R3,OFFSETT          SAVE OFFSET.                SG 05/99
         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4
         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER
         BC    8,WMESS3            ZERO, SEND MESSAGE.............
         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.
         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT
*                                  OF THE KEYWORD (AND ITS LENGTH)
*                                  AND ALSO SAVE THE CURRENT ID&LENGTH
         BAL   R9,GETMSGT          OBTAIN AND SAVE MSG TEXT    SG 05/99
ALLSET   CLC   NEWID(6),=C'ALL$#@'
         BNE   ONEID
*   IF YOU WANT ALL$#@ TO WORK, THEN CHANGE X'00' TO X'FF'     SG 05/99
         MVI   ALLFLAG,X'00'
*        MVI   ALLFLAG,X'FF'       SEND MESSAGE TO ALL USERIDS.
ONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID
DOBROD   OPEN  (BRODCAST,(UPDAT))
         TM    BRODCAST+48,X'10'
         BNO   WMESS1
         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT
*                                  RBA OF FIRST USER RECORD TO SEARCH
*                                  FOR THE USERID SLOT FOR OUR USERID.
*                                  THIS VALUE IS STORED IN SAVERBA(3).
         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
* ------------------------------------------------------------------ *
* ---    MAIN ROUTINE TO WRITE A MESSAGE TO THE USER.            --- *
* ------------------------------------------------------------------ *
         BAL   R9,FINDUSER         SEE IF YOU CAN FIND THE     SG 05/99
*                          USERID SLOT THAT CORRESPONDS TO     SG 05/99
*                          TRYID.  IF FOUND, THIS ROUTINE      SG 05/99
*                          SAVES ITS RBA, SLOT, AND POINTERS.  SG 05/99
         BAL   R9,REFINDUS     R3 HAS ADDRESS OF THE USER RECORD
         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
* ------------------------------------------------------------------ *
GOWRITE  DS    0H
         BAL   R9,FINDFREE         FIND A FREE MESSAGE SLOT    SG 05/99
         MVC   RNAM(3),FREERBA     USE RBA AS RNAME FOR ENQ/DEQ
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
         MVC   BLOCKNO(3),FREERBA  PREPARE BLOCK NUMBER        SG 05/99
         BAL   R9,WRITEMSG         WRITE THE MESSAGE THERE
         MVC   RNAM(3),FREERBA     USE RBA AS RNAME FOR ENQ/DEQ
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         MVC   PREVRBA(3),SAVEPTRS+3   GET RBA OF PREV MESSAGE
         CLC   PREVRBA(3),ZEROS    IS THERE ONE?               SG 05/99
         BE    NOCHAIN             YES. NOTHING TO READ.       SG 05/99
         MVC   BLOCKNO(3),PREVRBA    PREPARE BLOCKNO FOR READ  SG 05/99
         MVC   RNAM(3),PREVRBA     USE RBA AS RNAME FOR ENQ/DEQ
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
         BAL   R9,CHAINMSG         RECHAIN THE LAST MESSAGE    SG 05/99
         MVC   RNAM(3),PREVRBA     USE RBA AS RNAME FOR ENQ/DEQ
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
NOCHAIN  BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD
         BAL   R9,REFINDUS         FIND USER SLOT TO READJUST PTRS
         USING USDIR,R3
         MVC   USDEND(3),FREERBA                               SG 05/99
         CLC   USDRBA(3),ZEROS     WAS IT ZERO BEFORE?
         BNE   REWRITIT                                        SG 05/99
         MVC   USDRBA(3),FREERBA   MAKE FIRST EQUAL LAST       SG 05/99
         DROP  R3
REWRITIT MVC   BLOCKNO(3),MYUSRBA  GET SET TO WRITE
         BAL   R9,REWRUSER         REWRITE THE RECORD
         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         BAL   R9,WRITEND          FINISH OFF USERID,
         B     ZEROUT                  AND SCRAM
* ------------------------------------------------------------------ *
* ---    END OF MAIN ROUTINE TO SEND MESSAGE                     --- *
* ------------------------------------------------------------------ *
BADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'
         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT
         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT
         BAL   R4,MSG                            SO GOOD.
*                                         GET HERE AT END OF USER RCDS
ENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?
         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.
         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.
         LA    R0,60                           WRITE A BUNCH OF
         BAL   R4,MSG                          LINES AT THE END
         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT
         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE
         ED    WK1ALL+45(11),TMSGCNT
         MVC   LINET(L'WK1ALL),WK1ALL
         LA    R0,L'WK1ALL+7
         BAL   R4,MSG                       THEN
         B     EOJ0                           GET THE HECK OUT
NOTALL2  MVC   LINE,LINE-1                  CLEAR LINE
         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP
         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT
         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN
         LA    R0,L'WK1NOUSR+7                      DEALING WITH
         BAL   R4,MSG
ZEROUT   B     EOJ0                WE'RE DONE.
         SPACE 3
FULLMESS MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSFULL                 SYS1.BRODCAST
         LA    R0,L'MESSFULL+7                  IS
         BAL   R4,MSG                             FULL
         B     EOJ4                             AND GET OUT.   SG 05/99
WMESS3   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE3                 SYS1.BRODCAST NOT ALLOC'D
         LA    R0,L'MESSAGE3+7                  TO DDNAME BRODCAST.
         BAL   R4,MSG
         B     EOJ4                                            SG 05/99
WMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE2                 SYS1.BRODCAST NOT ALLOC'D
         LA    R0,L'MESSAGE2+7                  TO DDNAME BRODCAST.
         BAL   R4,MSG
         B     EOJ4                                            SG 05/99
WMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D
         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.
         BAL   R4,MSG
EOJ4     LA    R15,4               SET CC = 4.
EOJ      DS    0H                  BYE.
         CLOSE (BRODCAST)
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000
         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
EOJ0     SR    R15,R15             SET CC = 0.
         B     EOJ                 CONT.
EOJ8     LA    R15,8               SET CC = 8.
         B     EOJ                 CONT
         EJECT
*-----------------------------------------------------------------*
*---*                S U B R O U T I N E S                    *---*
*-----------------------------------------------------------------*
         SPACE 2
*-----------------------------------------------------------------*
*-- FEED THIS ROUTINE A USERID, AND IT WILL FIND OUT IF IT      --*
*-- EXISTS IN SYS1.BRODCAST.  IF IT DOES, THE RBA OF ITS RECORD --*
*-- IS RETURNED INTO MYUSRBA, THE USER SLOT IS RETURNED INTO    --*
*-- MYUSSLOT, AND THE MESSAGE POINTERS ARE RETURNED INTO THE    --*
*-- FIELD, SAVEPTRS.                                            --*
*-----------------------------------------------------------------*
FINDUSER DS    0H                  READ THROUGH USERID RECORDS
         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS
         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.
         LA    R6,9                COUNT OF USERS PER RECORD
         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R3,MDLDECB+12       ADDRESS OF RECORD
         USING USDIR,R3
         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA
         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA
         LA    R8,0                INITIALIZE USERID SLOT COUNTER
FUSRLOOP DS    0H
         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE
         MVC   USERIDI(7),USDID    COPY WHO THIS IS
         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?
         BE    FTRYNEXT            NOPE. JUST GO TO NEXT ENTRY
         CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?
         BE    FSAVPTRS            YEP. GO DEAL WITH IT
FTRYNEXT LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID
         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD
         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF "ALL")
         BCT   R6,FUSRLOOP         TRY FOR ANOTHER USER ENTRY
*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER
         B     FINDUSER            END OF RECORD? GET ANOTHER.
         SPACE 3
FSAVPTRS MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID
         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD
         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES
*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         BR    R9                                              SG 05/99
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         USING PSCB,R2
GETIDS   AR    R1,R3               POINT ...
         LA    R1,4(,R1)           ... TO CHAR.
         LA    R6,7                LOAD REG FOR BCT LOOP
         LR    R7,R1               INITIALIZE POINTER
         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID
         LA    R8,0                INITIALIZE CHARACTER COUNT
CUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?
         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.
         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER
         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER
         CR    R8,R5               END OF COMMAND BUFFER ?
         BNL   NOMORCUT            YES. GET OUT NOW.
         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN
NOMORCUT DS    0H
         MVC   NEWID(8),BLANKS     CLEAR FIELD
         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE
         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID
         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS
         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH
         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID
         MVC   SAVEID(8),NEWID                                 SG 05/99
         MVC   MESSENTU(7),NEWID                               SG 05/99
         MVC   OLDID(8),BLANKS     CLEAR FIELD
         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID
         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED
         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD
         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH
         DROP  R2
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    FIND A FREE MESSAGE RECORD
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
FINDFREE DS    0H
         MVC   BLOCKNO(3),TYP5RBA                              SG 05/99
         CLC   TYP5RBA,ZEROS                                   SG 05/99
         BNE   SAVRGS01                                        SG 05/99
         MVC   BLOCKNO(3),=X'000001'                           SG 05/99
         MVI   FULLFLAG,X'FF'                                  SG 05/99
SAVRGS01 ST    R8,SAVER8                                       SG 05/99
         ST    R7,SAVER7                                       SG 05/99
         ST    R6,SAVER6                                       SG 05/99
         L     R8,HIWATER          USE HIWATER AS FINISH AMT   SG 05/99
         L     R7,NUMRECS          LOAD TOTAL NUMBER OF RECS   SG 05/99
         ICM   R6,7,BLOCKNO        LOAD STARTING POINT         SG 05/99
         SR    R7,R6               SET UP BCT FOR LOOP         SG 05/99
STARTFSH DS    0H                                              SG 05/99
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R2,MDLDECB+20       ADDRESS OF KEY
         CLI   0(R2),X'FF'         BLANK USER MESSAGE RECORD?
         BE    FOUNDNEW            YES? FOUND ONE.             SG 05/99
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         ICM   R6,7,BLOCKNO        LOAD AMOUNT INTO REGISTER   SG 05/99
         LA    R6,1(,R6)           ADD 1                       SG 05/99
         CR    R6,R8               HIGHER THAN STOPPING POINT? SG 05/99
         BH    FINDBEG             YES, START AT BEGINNING     SG 05/99
         STCM  R6,7,BLOCKNO        POINT TO NEXT BLOCK NUMBER  SG 05/99
         BCT   R7,STARTFSH         LOOP AND READ AGAIN         SG 05/99
FOUNDNEW DS    0H                                              SG 05/99
         MVC   FREERBA(3),BLOCKNO  SAVE RBA OF FREE RECORD     SG 05/99
         ICM   R7,7,FREERBA        LOAD RBA VALUE              SG 05/99
         LA    R7,1(,R7)           INCREASE BY 1               SG 05/99
         STCM  R7,7,NFRERBA        PREPARE NEW FREE SEARCH RBA SG 05/99
         C     R7,HIWATER          HIGHER THAN THE HIGHEST?    SG 05/99
         BNH   FINDFOUT            NO. JUST GET OUT OK         SG 05/99
         MVC   NFRERBA(3),FREERBA  WE CAN'T GO HIGHER, SO =    SG 05/99
FINDFOUT DS    0H                                            DIAG 06/99
         B     FINDFEND            GET OUT OF ROUTINE          SG 05/99
FINDBEG  DS    0H                                              SG 05/99
         CLI   FULLFLAG,X'FF'      CHECK IF WE WENT FROM BEGIN SG 05/99
         BNE   FINDGOON            YES. WE KNOW BCAST IS FULL  SG 05/99
         L     R6,SAVER6           RESTORE REGISTER            SG 05/99
         L     R7,SAVER7           RESTORE REGISTER            SG 05/99
         L     R8,SAVER8           RESTORE REGISTER            SG 05/99
         B     FULLMESS            BROADCAST FULL, AND OUT     SG 05/99
FINDGOON MVI   FULLFLAG,X'FF'      WE'RE NOW SEARCHING BEGINNG SG 05/99
         ICM   R8,7,TYP5RBA        FINISH AT FREE SEARCH REC DIAG 06/99
         LA    R7,1(,R8)           SET UP BCT REGISTER       DIAG 06/99
         LA    R6,1                START SEARCH AT RECORD 2    SG 05/99
         STCM  R6,7,BLOCKNO        LET READ KNOW ABOUT IT      SG 05/99
         SR    R7,R6               SET UP BCT FOR LOOP         SG 05/99
         B     STARTFSH            DO LOOP OVER AGAIN-1ST PART SG 05/99
FINDFEND L     R6,SAVER6           RESTORE REGISTER            SG 05/99
         L     R7,SAVER7           RESTORE REGISTER            SG 05/99
         L     R8,SAVER8           RESTORE REGISTER            SG 05/99
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    WRITE A MESSAGE, GIVEN THE RBA
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
WRITEMSG DS    0H
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R2,MDLDECB+20       ADDRESS OF KEY
         CLI   0(R2),X'FF'         BLANK USER MESSAGE RECORD?
         BE    WRITEGO1            YES. GO ON PROCESSING IT    SG 05/99
* ---------------------------------------------------------  DIAG 06/99
*  TRYING TO WRITE ON THE WRONG TYPE OF RECORD.  BRODCAST    DIAG 06/99
*  PROBABLY IS FULL.  CHECK TO SEE IF WE LOOKED ENOUGH       DIAG 06/99
*  FOR A FREE RECORD.  TWO PASSES THROUGH BRODCAST.          DIAG 06/99
* ---------------------------------------------------------  DIAG 06/99
         CLI   FULLFLAG,X'FF'      WE TRIED FINDFREE TWICE?  DIAG 06/99
         BE    FULLMESS            YES. BRODCAST IS FULL-OUT DIAG 06/99
WRITEGO1 MVI   0(R2),X'03'         SHOW IT'S A USED MESSAGE    SG 05/99
         L     R3,MDLDECB+12       ADDRESS OF RECORD
         USING USMSG,R3                                        SG 05/99
         ST    R7,SAVER7           SAVE WORK REGISTER          SG 05/99
         MVC   USMLNG(1),LENTHMSG+3  PLUG IN LENGTH OF MESSAGE SG 05/99
         MVC   USMTEXT(125),BLANKMSG   FILL TEXT WITH BLANKS   SG 05/99
         MVC   USMNEXT(3),ZEROS    SHOW MSG IS LAST IN CHAIN   SG 05/99
         IC    R7,LENTHMSG+3       SET UP EXECUTE              SG 05/99
         BCTR  R7,0                LOWER FOR MOVE              SG 05/99
         EX    R7,MOVEMESG         MOVE MESSAGE INTO RECORD    SG 05/99
         DROP  R3                                              SG 05/99
         WRITE MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
WRITEMND FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
WRITENDX L     R7,SAVER7                                       SG 05/99
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    CHAIN THE LAST MESSAGE TO THE NEWLY WRITTEN MESSAGE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
CHAINMSG DS    0H
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R2,MDLDECB+20       ADDRESS OF KEY
         CLI   0(R2),X'03'         BLANK USER MESSAGE RECORD?
         BNE   CHAINMND            DON'T WRITE IF IN DOUBT     SG 05/99
         L     R3,MDLDECB+12       ADDRESS OF RECORD
         USING USMSG,R3                                        SG 05/99
         MVC   USMNEXT(3),FREERBA  CHAIN TO MESSAGE JUST WRTTN SG 05/99
         DROP  R3                                              SG 05/99
         WRITE MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
CHAINMND BR    R9                                              SG 05/99
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        GET THE MESSAGE TEXT FOR THE MESSAGE TO BE SENT.         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETMSGT  DS    0H                  GET MESSAGE TEXT TO SEND    SG 05/99
         ST    R7,SAVEWRK7         SAVE REGISTER CONTENTS      SG 05/99
         ST    R8,SAVEWRK8         SAVE REGISTER CONTENTS      SG 05/99
         L     R3,0(,R11)          LOAD ADDRESS OF CMD BUFFER  SG 05/99
         LH    R8,CMBLENG          TOTAL LENGTH OF CMD BUFFER  SG 05/99
         LA    R3,4(,R3)           COMPENSATE FOR HEADER       SG 05/99
         SH    R8,=H'4'            AND MINUS HEADER LENGTH     SG 05/99
         LH    R7,OFFSETT          LOAD OFFSET VALUE           SG 05/99
         LA    R3,0(R7,R3)         POINT TO BEGINNING OF CMD   SG 05/99
         SR    R8,R7               CMD BUFFER LNG MINUS OFFSET SG 05/99
         XR    R7,R7               ZERO REGISTER               SG 05/99
         IC    R7,NEWPSCBL         LOAD LENGTH OF USERID       SG 05/99
         LA    R3,0(R7,R3)         POINT PAST USERID           SG 05/99
         SR    R8,R7               SUBTRACT USERID LENGTH      SG 05/99
         BC    8,WMESS2            ZERO, ISSUE MESSAGE.        SG 05/99
         BC    5,EOJ8              LESS, OVERFLOW, GET OUT     SG 05/99
         LR    R7,R8               INITIALIZE MESSAGE LENGTH   SG 05/99
FRSTBLNK DS    0H                  IF NON-BLANK,ASSUME MESSAGE SG 05/99
*                                  STARTS HERE.                SG 05/99
         CLI   0(R3),X'40'         ARE WE AT A BLANK?          SG 05/99
         BE    LEADBLNK            YES, LOOK FOR MORE BLANKS   SG 05/99
         B     BLANKEND            NO, ASSUME MSG STARTS HERE  SG 05/99
LEADBLNK DS    0H                  BUMP PAST LEADING BLANKS    SG 05/99
         CLI   0(R3),X'40'         IS THIS CHAR A BLANK?       SG 05/99
         BNE   BLANKEND            NO, END LOOP                SG 05/99
         LA    R3,1(,R3)           BUMP TO NEXT CHARACTER      SG 05/99
         BCTR  R7,0                MESSAGE IS 1 CHAR SHORTER   SG 05/99
         BCT   R8,LEADBLNK         LOOP TILL 1ST NON-BLANK     SG 05/99
BLANKEND DS    0H                  SAVE MESSAGE TEXT NOW.      SG 05/99
         BCTR  R7,0                ONE LESS FOR EXECUTE        SG 05/99
         MVC   MSGTEXT(125),BLANKMSG   BLANK SEND MSG AREA     SG 05/99
         EX    R7,MOVEMSGG         MOVE THE MESSAGE INTO IT    SG 05/99
         MVC   LINE,LINE-1         CLEAR MESSAGE LINE          SG 05/99
         MVC   LINE,MSGTEXT        MOVE TEXT IN                SG 05/99
         LA    R0,1(,R7)           LOAD TRUE MESSAGE LENGTH    SG 05/99
         BAL   R4,MSG              GO WRITE MESSAGE TEXT       SG 05/99
         LA    R7,1(,R7)           LOAD TRUE MESSAGE LENGTH    SG 05/99
         ST    R7,LENTHMSG                                     SG 05/99
         L     R7,SAVEWRK7         RESTORE REGISTER CONTENTS   SG 05/99
         L     R8,SAVEWRK8         RESTORE REGISTER CONTENTS   SG 05/99
         BR    R9                                              SG 05/99
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOKZERO,MF=E       RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R3,MDLDECB+12       ADDRESS OF RECORD
         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP
         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD
         MVC   NUMRECS(4),R1RECNUM   SAVE TOTAL NUMBER OF RECORDS
         ST    R7,SAVER7           SAVE REGISTER             DIAG 06/99
         L     R7,NUMRECS          PUT NUMBER OF RECORDS IN  DIAG 06/99
         BCTR  R7,0                MINUS ONE                 DIAG 06/99
         ST    R7,HIWATER          HIGHEST RBA PERMITTED     DIAG 06/99
         L     R7,SAVER7           RESTORE REGISTER          DIAG 06/99
         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO
         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?
         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS
         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5
SKIPFREE DS    0H
         DROP  R3
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY
*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.
         BAL   R14,PUTLINE
         MVC   LINE,LINE-1
         BR    R4
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        ROUTINE TO DISPLAY HEX VALUES                            *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R4                  RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
INITCON  MVI   LINE-1,C' '         INITIALIZE BLANK
         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER
         MVC   WK1TOTAL,MESTOTAL    INIT AREAS
         MVC   WK1NOUSR,MESNOUSR
         MVC   WK1ALL,MESALL
         MVC   MESSENTU(8),BLANKS
         MVC   LEVEL(7),BLANKS
         MVC   TYP5RBA(3),ZEROS        ZERO OUT
         MVC   FSRCRBA(3),ZEROS          ALL THE RBA
         MVC   NEXTRBA(3),ZEROS            STORAGE AREAS
         MVC   NFRERBA(3),ZEROS
         MVC   MINRBA(3),=X'FFFFFF'    PUT A LARGE VALUE IN
         MVI   ALLFLAG,X'00'
         MVI   FULLFLAG,X'00'
         MVC   MSGTEXT(125),BLANKMSG   MOVE BLANKS TO MSG AREA SG 05/99
         MVC   OFFSETT(2),ZEROS                                SG 05/99
         MVC   CMBLENG(2),ZEROS                                SG 05/99
         MVC   NUMRECS(4),ZEROS                                SG 05/99
         MVC   HIWATER(4),ZEROS        PREVENT S0CX          DIAG 06/99
         MVC   NFRERBA(3),ZEROS                                SG 05/99
         BR    R9
* ------------------------------------------------------------------ *
GETPSCB  L     R1,16               POINT TO CVT.
         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS
         L     R1,4(,R1)           POINT TO TCB.
         L     R1,X'B4'(,R1)       POINT TO JSCB.
         L     R1,X'108'(,R1)      POINT TO PSCB.
         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*              SAVE CPPL POINTERS                                 *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         USING CPPL,R11
CPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:
         ST    R6,SAVEUPT             THE UPT
         L     R6,CPPLPSCB
         ST    R6,SAVEPSCB            THE PSCB
         L     R6,CPPLECT
         ST    R6,SAVEECT             THE ECT
         L     R6,CPPLCBUF
         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS
         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF
         LA    R6,0
         BR    R9
         DROP  R11
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*              TEST IF USER HAS PSCB AUTHORIZATION.               *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         USING PSCB,R2
CHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?
         BO    CONT0               YES.  CONTINUE.
         TM    PSCBATR1,PSCBCTRL   OPER USER?
         BZ    EOJ4                NO.  GET OUT.
         DROP  R2
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *
*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *
*        R3 POINTS TO THE SLOT, WHEN THIS ROUTINE IS DONE.        *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
REFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #
         MVC   BLOCKNO(3),MYUSRBA                              SG 05/99
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R2,MDLDECB+20       ADDRESS OF KEY
         CLI   0(R2),X'01'         USERID RECORD?
         BNE   BADEND
         LA    R2,0
         LA    R3,0
         IC    R3,MYUSSLOT         RESET SLOT NUMBER
         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY
         M     R2,=F'13'
         L     R5,MDLDECB+12       ADDRESS OF RECORD
         LA    R2,0(R3,R5)         FIND OUR SLOT
         LR    R3,R2               PUT IN R3 TO SET UP RETRY
         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
REWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.
         WRITE MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
REWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.
         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST
         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2
TYP5READ DS    0H
         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               TYP5RBA,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R3,MDLDECB+12       POINT TO RECORD
         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA
         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE
         CLI   FULLFLAG,X'FF'      DID WE FILL AND RECYCLE?    SG 05/99
         BE    FULLUPD             YES, JUST LOWER FREE SR REC SG 05/99
         CLC   0(3,R5),NFRERBA     SHOULD FREE SEARCH RECORD BE RAISED
         BNL   NOFRSR                NO. JUST GET OUT.
FULLUPD  MVC   0(3,R5),NFRERBA     YES. CHANGE ITS VALUE.
         WRITE MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               TYP5RBA,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
NOFRSR   DS    0H
         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
REWRFEND BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        FINISH WRITING END MESSAGES FOR USERID.                  *
*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *
*        JUST GET OUT.                                            *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
WRITEND  DS    0H
         MVC   LINE,LINE-1                     WRITE
         MVC   LINE,MESSENT                     END OF USER LINE
         MVC   MESSENT+25(7),SAVEID                            SG 05/99
         LA    R0,L'MESSENT+8
         BAL   R4,MSG
NOTALL4  MVI   LINE-1,X'40'
         MVC   LINE,LINE-1
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
************************************************************
*        SET UP IOPL FOR PUTLINE                           *
************************************************************
         SPACE
         USING CPPL,R11
SETIOPL  LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         DROP  R11
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE
         L     R15,CVTPTR          POINT TO CVT                  JDM1
         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1
         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1
         DROP  R15                                               JDM1
         B     PUTLOADX            BRANCH AROUND LOAD
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         BR    R9
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
************************************************************
*        PUTMSG ROUTINE                                    *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTSAVE
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
************************************************************
*        PUTLINE ROUTINE                                   *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTSAVE
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
*-----------------------------------------------------------------*
*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*
*-----------------------------------------------------------------*
PACKZERO DC    PL3'0'
PACKZER5 DC    PL5'0'
FULLZERO DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - *
MOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED
         USING USMSG,R3
MOVEMESG MVC   USMTEXT(*-*),MSGTEXT  EXECUTED
         DROP  R3
         USING USMSG,R2
MOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED
         DROP  R2
MOVEMSGG MVC   MSGTEXT(*-*),0(R3)  EXECUTED
* - - - - - - - - - - - - - - - - - - - - - - - - *
BLANKS   DC    C'        '         8 BLANKS
BLANKMSG DC    CL125' '                                        SG 05/99
BLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER
ZEROS    DS    0CL8
ZERREC   DS    0CL128
ZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING
         DC    X'0000'
         DC    121X'00'
MESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'
MESSAGE2 DC    C'YOU HAVE TO SPECIFY MESSAGE TEXT AFTER THE USERID'
MESSAGE3 DC    C'YOU HAVE TO SPECIFY A USERID AFTER THE COMMAND NAME'
MESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'
MESSENT  DC    C'MESSAGE SENT TO USERID: '
MESSENTU DC    CL8'        '                                   SG 05/99
MESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'
MESSFULL DC    C'SYS1.BRODCAST IS FULL.  NO ROOM TO WRITE MESSAGES.'
MESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '
MESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'
MESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'
MASK6    DC    XL6'402020202120'
MASK10   DC    XL9'40202020202020202120'
BPARM    DC    AL2(BPARME-BPARM,0),C'NON'
BPARME   EQU   *
         DS    0F
QNAM     DC    CL8'SYSIKJBC'
RNAME    DC    X'000000'
         SPACE 3
BRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X
               BLKSIZE=129,        LENGTH OF FILES BLOCK               X
               DSORG=DA,           IS DIRECT ACCESS FILE               X
               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X
               OPTCD=R,            3 BYTE RBA WILL BE USED             X
               RECFM=F,            FIXED LENGTH                        X
               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X
               KEYLEN=1,           SIZE OF KEY                         X
               BUFL=130            KEYLEN + BLKSIZE
         SPACE 3
         LTORG
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         DS    0F
ENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L
         SPACE 3
*-----------------------------------------------------------------*
*----         GETMAINED DATA AREA FIELDS                      ----*
*-----------------------------------------------------------------*
DATAAREA DSECT
SAVE     DS    9D
CMBUFAD  DS    F                   COMMAND BUFFER ADDRESS
NEWID    DC    C'        '         STORE PARM USERID HERE
         DS    CL72                PADDING
ADDADR   DS    0CL12
UMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER
TMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED
NEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS
OLDID    DC    C'        '         STORE OLD USERID HERE
LEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST
LEVELLIT DS    CL6                    LITERAL 'LEVEL'
LEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT
SAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID
SVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID
FINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID
WRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE
CMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN
OLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE
NEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE
TYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'
BLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ
LASTRBA  DC    X'000000'           STORE CURRENT RBA
SAVERBA  DC    X'000000'           STORE RBA FOR LATER READ
MYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER
NMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE
PREVRBA  DC    X'000000'           RBA OF PREVIOUS MESSAGE
MESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE
FREERBA  DC    X'000000'           RBA OF FREE MESSAGE SLOT FOUND
NEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE
MINRBA   DC    X'000000'
NFRERBA  DC    X'000000'           NEW FREE SEARCH RBA FOR TYPE 5
FSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED
RNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED
MYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD
NWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER
NWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD
FNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND
FNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD
USERID   DS    0CL8                STORE FOUND USERID HERE
USERIDI  DS    CL7                 STORE FOUND USERID HERE
USERIDF  DS    CL1                 8TH CHARACTER
FINDID   DS    0CL8                USERID NAME TO BE FOUND
FINDIDI  DS    CL7                 FIRST 7 CHARACTERS
FINDIDF  DS    CL1                 8TH CHARACTER
TRYID    DS    0CL8                STORE TEST USERID HERE
TRYIDI   DS    CL7                 STORE TEST USERID HERE
TRYIDF   DS    CL1                 8TH CHARACTER
SAVEID   DS    CL8                 STORE USERID HERE
SCANFLAG DC    X'00'               FLAG FOR USERID SCANS
COMPFLAG DC    X'00'               FLAG FOR USERID SCANS
         DS    0F                  ALIGN ON FULLWORD
SAVECPPL DS    F                   SAVE THE CPPL
SAVEUPT  DS    F                   SAVE FOR IKJIFRIF
SAVEPSCB DS    F                   SAVE FOR IKJIFRIF
SAVEECT  DS    F                   SAVE FOR IKJIFRIF
SAVER6   DS    F                   SAVE COUNT FOR USERID SCAN
SAVER7   DS    F                   SAVE REGISTER
SAVER8   DS    F                   SAVE REGISTER
SAVER9   DS    F                   SAVE BAL REGISTER
SAVER9A  DS    F                   SAVE BAL REGISTER
HEXSAVE  DS    3F                  SAVE FOR HEX MACRO
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE
PUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE
SAVEINF1 DS    CL8                 PLACE TO STORE CCHHR
LINEB    DS    C                   LINE-1
LINE     DS    CL137
LINET    EQU   LINE+7
         DS    0F
RDWR     READ  MDLDECB,DI,MF=L
RDWREND  DS    0F
RDWRLEN  EQU   *-RDWR
STOR0001 DS    2F
STOR1415 DS    2F
WK1TOTAL DC    C'                                                '
WK1ALL DC C'                                                          '
WK1NOUSR DC    C'                                              '
ALLFLAG  DS    X
FULLFLAG DS    X
OFFSETT  DS    H                                               SG 05/99
CMBLENG  DS    H                                               SG 05/99
MSGTEXT  DS    CL125                                           SG 05/99
SAVEWRK7 DS    F                                               SG 05/99
SAVEWRK8 DS    F                                               SG 05/99
LENTHMSG DS    F                                               SG 05/99
NUMRECS  DS    F                                               SG 05/99
HIWATER  DS    F                                             DIAG 06/99
         SPACE 1
DATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA
         IKJCPPL
         IKJUPT
         IKJPSCB
         IKJECT
         IKJIOPL
         IEZIOB   DSECT=YES
         IKJZT301 DSECT=YES
         IKJZT304 DSECT=YES
         IKJZT305 DSECT=YES
         CVT  DSECT=YES
         END
