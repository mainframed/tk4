DEBE     START 0
         USING *,8,9,12  USING 3 BASE REGS
         SPACE 5
*START PROLOG*********************************************START PROLOG*
*                                                                     *
*                          D E B E                                    *
*                                                                     *
***********************************************************************
*                                                                     *
*  LAST MODIFIED   PROGRAMMER           DESCRIPTION                   *
*     DATE           NAME                                             *
*                                                                     *
*   06/19/86       MILTON SOONG    MODIFIED THE UCBLOKUP ROUTINE TO   *
*                 (INTEL  CORP.)   RUN UNDER MVS/XA AND MVS/SP.  ALL  *
*                                  MY CODING CHANGES ARE IDENTIFIED   *
*                                  WITH 'MS061986' IN COLS. 64-71.    *
*                                                                     *
*   THE ORIGINAL SOURCE WAS EXTRACTED FROM THE CBT TAPE.  THE ORIGINAL*
*   DEBE WOULD NOT RUN ON A MVS/XA SYSTEM DUE TO THE WAY THE UCB IS   *
*   LOOKED UP.  ALL EXCP, CCWS ETC.......ARE THE SAME. (MS061986)     *
*                                                                     *
*                                                                     *
*   07/29/87       MILTON SOONG    MODIFIED TO SUPPORT BOTH 3420 AND  *
*                                  3480 TAPE DRIVES.  ALL MY CODING   *
*                                  CHANGES ARE IDENTIFIED WITH        *
*                                  'MS072987' IN COLS. 64-71          *
*                                                                     *
*                                                                     *
*END   PROLOG*********************************************END   PROLOG*
         EJECT
***********************************************************************
*                                                                     *
*                          D E B E                                    *
*                                                                     *
***********************************************************************
*                                                                     *
*  THE PURPOSE OF DEBE IS TO PROVIDE THE USER OF 360 OPERATING        *
*  SYSTEM THE FLEXIBILITY OF THE ORIGINAL DEBE.  FLEXIBILITY CAN      *
*  ONLY BE OBTAINED BY THE ELIMINATION OF DD CARDS.  ONLY ONE DD      *
*  CARD IS NECESSARY FOR DEBE, A SYSPRINT DD CARD FOR THE UNIT        *
*  THAT WILL BE USED AS THE OUTPUT WRITER.  ALL FUNCTIONS WHICH       *
*  ARE AVAILABLE WITH DEBE ARE PROVIDED IN DEBE.                      *
*                                                                     *
***********************************************************************
*                                                                     *
*  CORE REQUIREMENTS - ABOUT 33,000 BYTES, 20,000 OF WHICH IS USED    *
*  AS AN I/O AREA, MOST OF WHICH IS USED FOR LARGE TAPE RECORDS.      *
*                                                                     *
*  ERROR RECOVERY - THE OPERATING SYSTEM PERFORMS ALL STANDARD        *
*  ERROR RECOVERY.  IF IT CANNOT RECOVER FROM AN ERROR, DEBE          *
*  WILL NOT EVEN TRY.                                                 *
*                                                                     *
*  ALL REPLIES TO DEBE ARE OF THE WTOR FORMAT,                        *
*          REPLY 00,'TP'                                              *
*  WHENEVER ANY INFORMATION IS REQUESTED BY DEBE, A REPLY OF          *
*  'EOJ' WILL TERMINATE THE SUBROUTINE OF DEBE.    A REPLY OF 'EOJ'   *
*  IN RESPONSE TO THE REQUEST FOR THE PROGRAM ID WILL TERMINATE       *
*  DEBE AND CONTROL IS RETURNED TO THE OPERATING SYSTEM.              *
*                                                                     *
*  ONCE A ROUTINE IS RUNNING IN DEBE, IT CAN ONLY BE TERMINATED       *
*  BY CANCELLING THE JOB, AND THE JOB MUST BE RESCHEDULED AGAIN.      *
*  AN ALTERNATIVE TO CANCELLING THE JOB IS TO CAUSE AN I/O ERROR      *
*  ON ONE OF THE UNITS BEING USED.  AN I/O ERROR WILL CAUSE THE       *
*  SUBROUTINE OF DEBE TO TERMINATE, BUT DEBE WILL STILL BE            *
*  IN CONTROL.                                                        *
*                                                                     *
*                                                                     *
         EJECT
         SAVE  (14,12)
BEGIN    BALR  8,0
         LA    2,6                 ALIGN BASE WITH USING STATMENT
         SR    8,2
BEGIN1   EQU   *
         L     9,BASE9             LOAD THE BASE 9 REG
         L     12,BASE12
         LA    14,SAVEAREA
         ST    13,SAVEAREA+4
         ST    14,8(0,13)
         LR    13,14
         SPACE 2
*        GET PARM FIELD IF ANY
         SPACE
         L     1,0(1)              GET POINTER TO LENGTH OF PARM
         LA    1,0(1)              CLEAR SIGN BIT
         LH    2,0(1)              GET LENGTH OF PARM FIELD
         LTR   2,2                 SEE IF IS ANY PARM INFO
         BZ    NOPARM              BRANCH IF NO PARM
         STC   2,MVCPARM+1         STORE LENGTH OF PARM FIELD
MVCPARM  MVC   ID(1),2(1)          MOVE PARM FIELD TO ID AREA
NOPARM   EQU   *
         EJECT
***********************************************************************
*                                                                     *
*  THIS ROUTINE WILL MODIFY ALL WTO AND WTOR MACROS FOR MCS SUPPORT.  *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    1,BUMPMOD           GET ADDRESS TO START SCAN
         LA    2,TDAREA            GET ADDRESS TO END SCAN
MODIFY   CLI   0(1),X'45'          SEE IF BAL
         BNE   BUMPMOD             BRANCH NOT EQUAL
         CLI   1(1),X'10'          SEE IF REG 1
         BNE   BUMPMOD             BRANCH NOT EQUAL
         CLI   4(1),X'00'          SEE IF WTO
         BNE   NOTWTO              BRANCH NOT WTO
         MVC   6(1,2),=X'0400'     INSERT NCS FLAGS           *********
         B     BUMPMOD             GO LOOK FOR NEXT WTO OR WTOR
NOTWTO   CLI   12(1),X'00'         SEE IF WTOR
         BNE   BUMPMOD             BRANCH NOT EQUAL
         MVC   14(1,2),=X'0400'    INSERT MCS FLAGS           *********
BUMPMOD  LA    1,2(1)              BUMP SEARCH ADRS
         CLR   2,1                 SEE IF FINISHED
         BH    MODIFY              BRANCH NOT FINISHED
         EJECT
         WTO   '********************************************'  MS061986
         WTO   '* INTEL CORP.    D E B E    MVS/XA VERSION *'  MS061986
         WTO   '*         RELEASE 2.00 AS OF 07/29/87      *'  MS061986
         WTO   '********************************************'  MS061986
         SPACE 2
*  GET CVT POINTER
         L     3,16             GET CVT POINTER
         MVC   SYSTYP(1),116(3)    STORE SYSTEM TYPE IN PROB PROG
*  GET POINTER TO THE TCB POINTERS
         L     2,0(0,3)
*  GET TCB POINTER
         L     3,4(0,2)
*  GET TCB ADDRESS FOR THE DEB'S
         ST    3,INDEB
         ST    3,OUTDEB
         SPACE
FNDDCB   EQU   *
         B     DEBFND
         ABEND 1,DUMP
CODE     DS    0F
         DC    X'ABCFEDAD'
DEBFND   EQU   *
         MVC   PMBBC(1),32(4)      GET FILE MASK
         MVC   PMBBC+1(6),36(4)    GET SEEK ARG TO IOB
         MVI   CHHR+3,1              SET RECORD ARG IN IOB
         SPACE
         SR    1,1
         L     0,CODE
         MODESET KEY=ZERO
         SPACE 2
*  ALL ROUTINES RETURN HERE WHEN THEY ARE FINISHED.
ASKAGN   EQU   *
         MVI   #3480,X'00'         RESET 3480 SWITCH           MS072987
         CLI   MVCPARM+1,0         SEE IF PARM USED
         BZ    PARM2               BRANCH IF PARM NOT USED
PARMSW   TS    PARMSW+1            SEE IF 2ND TIME THROUGH
         BC    4,EOJ               BRANCH 2 ND TIME THROUGH
PARM2    EQU   *
         CLI   MVCPARM+1,0         SEE IF PARM USED
         BNZ   PARM1               BRANCH IF PARM USED
         SPACE 2
         XC    ID+2(L'ID-2),ID+2   CLEAR ID AREA
         WTOR 'ENTER RTN ID - XX OR EOJ - XXX',ID,40,REPLYECB
         BAL   11,WAITANS    GO WAIT FOR A REPLY
         SPACE 2
PARM1    EQU   *
*        CLEAN UP AREAS FOR ALL ROUTINES
         SPACE 1
         XC    FILES,FILES         CLEAR FILES WORK AREA
         NI    INIOB,X'42'         CLEAN UP IOB S
         NI    OUTIOB,X'42'        CLEAN UP IOB S
         NI    TD3+1,X'0F'   RESET SWITCHES SET IN TP ROUTINE
         NI    TD6+1,X'0F'
         SPACE 2
*        ROUTINE ID'S WHICH ARE SUPPORTED FOLLOW----
         SPACE 1
         OC    ID,=CL80' '        MAKE ALL CAPS
         CLC   ID(3),=C'EOJ'       IS THE USER FINISHED WITH OS DEBE
         BE    EOJ                 IF YES--- RETURN TO OS
         CLC   ID(2),=C'BF'        BACK SPACE FILE
         BE    BF
         CLC   ID(2),=C'BS'        BACK SPACE RECORD
         BE    BS
         CLC   ID(2),=C'CC'        CARD TO CARD
         BE    CC
         CLC   ID(2),=C'CP'        CARD TO PRINT
         BE    CP
         CLC   ID(2),=C'CT'        CARD TO TAPE
         BE    CT
         CLC   ID(2),=C'RW'        REWIND
         BE    RW
         CLC   ID(2),=C'SF'        FORWARD SPACE FILE
         BE    SF
         CLC   ID(2),=C'SR'        FORWARD SPACE RECORD
         BE    SR
         CLC   ID(2),=C'TC'        TAPE TO CARD
         BE    TC
         CLC   ID(2),=C'TD'        TAPE TO PRINT HEX
         BE    TD
         CLC   ID(2),=C'TP'        TAPE TO PRINT
         BE    TP
         CLC   ID(2),=C'TT'        TAPE TO TAPE
         BE    TT
         CLC   ID(2),=C'TF'        TAPE TO PRINT FORMATED
         BE    TF
         CLC   ID(2),=C'WT'        WRITE TAPE MARK
         BE    WT
*
*    EXTENDED  OPERATIONS ROUTINE
*
         CLC   ID(2),=C'FM'        SEE IF SHOULD WRITE FILE MARK
         BNE   *+14                BRANCH IF NOT
         MVC   ID(2),=C'WT'        REPLACE FM WITH WT
         B     WT                  GO WRITE TAPE MARK
         CLC   ID(2),=C'TM'        SEE IF SHOULD WRITE FILE MARK
         BE    *-16                REPLACE TM WITH WT
         CLC   ID(2),=C'BR'        SEE IF SHOULD BACKSPACE RECORD
         BNE   *+14                BRANCH IF NOT
         MVC   ID(2),=C'BS'        REPLACE BR WITH BS
         B     BS                  GO BACKSPACE RECORD
         CLC   ID(2),=C'FF'        SEE IF SHOULD FOWARD SPACE FILE
         BNE   *+14                BRANCH IF NOT
         MVC   ID(2),=C'SF'        SEE IF FORWARD SPACE FILE
         B     SF                  GO FOWARD SPACE FILE
         CLC   ID(2),=C'RU'        SEE IF REWIND AND UNLOAD
         BE    RU                  BRANCH IF REWIND AND UNLOAD
         CLC   ID(1),=C'U'         SEE IF UNLOAD
         BE    RU                  IF YES GO UNLOAD
         CLC   ID(1),=C'R'         SEE IF REWIND
         BE    RW                  BRANCH ID YES
         CLC   ID(2),=C'CL'        SEE IF LABEL ROUTINE REQUESTED
         BE    CLIP                BRANCH TO LABEL ROUTINE
         CLC   ID(2),=C'LA'        SEE IF LABEL ROUTINE REQUESTED
         BE    CLIP                BRANCH TO LABEL ROUTINE
         CLC   ID(2),=C'FR'        SEE IF FORWARD SPACE RECORD
         BNE   *+14                BRANCH IF NOT
         MVC   ID(2),=C'SR'        MOVE IN SR CHARACTERS
         B     SR                  GO TO SR ROUTINE
*
         WTO   'ROUTINE ID ENTERED IS NOT SUPPORTED- PLEASE RETRY'
         B     ASKAGN
         SPACE 1
BASE9    DC    A(DEBE+4096)      ADD CON FOR SECOND BASE
BASE12   DC    A(DEBE+8192)         ADD CON FOR THIRD BASE
         SPACE 3
EOJ      L     13,4(0,13)
         RETURN (14,12),RC=0
         EJECT
*        SUB ROUTINE TO SEARCH FOR KEY LETTERS IN ROUTINE ID FIELD
*        RETURN CONDITION CODE WILL BE EQUAL OR UNEQUAL
*
*        FORMAT
*                 BAL 11,SEARCH       USED TO BRANCH TO THIS SUB-R
*                 DC  C'A'            CHARACTER TO BE SEARCHED
*                 DC  AL1(3)          LENGHT OF SEARCH
*
SEARCH   STM   2,3,SHSAV           SAVE REG
         LA    2,ID                GET ADDRESS OF ID AREA
         SR    3,3                 CLEAR REG
         IC    3,1(11)             GET LENGTH OF SEARCH
CLSHR    CLC   2(1,2),0(11)        SEE IF CHARACTER IS FOUND
         BE    SEARET              BRANCH IF FOUND
         LA    2,1(2)              BUMP REG BY 1
         BCT   3,CLSHR             TRY AGAIN
SEARET   LM    2,3,SHSAV           RESTORE REGS
         B     2(11)               RETURN
SHSAV    DC    2F'0'               SAVE AREA
*
*
*  BACKSPACE A FILE ON TAPE
         SPACE 1
BF        EQU   *
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
BF1      EQU   *
         BAL   10,NBFILS           GET FILE CNT FRM ID FIELD
         BO    SFEXCP              BRANCH AROUND MSG
         WTOR  'NUMBR OF FILES BACK SPACED - XXX',FILES+5,3,REPLYECB
         BAL   11,WAITANS          GO WAIT FOR A REPLY
         B    SFEXCP
         SPACE 1
*  FORWARD SPACE A FILE ON TAPE
         SPACE 1
SF       EQU   *
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
SF1      EQU   *
         BAL   10,NBFILS           GET FILE CNT FRM ID FIELD
         BO    SFEXCP              BRANCH AROUND MSG
         WTOR  'NUMBR OF FILES FRWRD SPACED - XXX',FILES+5,3,REPLYECB
         BAL   11,WAITANS          GO WAIT FOR A REPLY
SFEXCP   EQU   *
         OC    FILES+5(3),=3C' '    MAKE UPPER CASE
         CLC   FILES+5(3),=C'EOJ'   SEE IF END OF ROUTINE
         BE    ASKAGN              IF EQUAL EXIT ROUTINE
         TM    FILES+5,C'0'         SEE IF NUMERIC
         BNO   ERMSGA              BRANCH TO ERROR MSG
         TM    FILES+6,C'0'       SEE IF NUMERIC
         BNO   ERMSGA              BRANCH TO ERROR MSG
         TM    FILES+7,C'0'       SEE IF NUMERIC
         BNO   ERMSGA              BRANCH TO ERROR MSG
         PACK  FILES(8),FILES(8)     PACK INPUT
         CVB   2,FILES              PUT NUMBER OF FILES IN REG
REPT     EQU   *
         MVC   OUTCCW+8(8),SFCCW   MOVE IN SPACE FILE CCW
         CLC   ID(2),=C'SF'        SEE IF WAS A SPACE FILE
         BE    *+10                BRANCH IF SPACE FILE
         MVC   OUTCCW+8(8),BFCCW   MOVE IN BACK SPACE FILE CCW
         BAL   11,IOOUT      GO EXECUTE THE CCW
         CLI   OUTECB,X'7F'  WAS EVERYTHING OK
         BE    *+8                 GO PERFORM NOOP
         B     TAPERR              BRANCH TO ERROR ROUTINE
         MVC   OUTCCW+8(8),NOOP    MOVE IN NO-OP CCW
         BAL   11,IOOUT            GO PERFORM NOOP TO WAIT FOR DEVICE
         CLI   OUTECB,X'7F'        SEE IF NOOP OK
         BE    CNTFS               BRANCH IF OK
         B     TAPERR              BRANCH IF ERROR
ERMSGA   EQU   *
  WTO   'ERROR--- PLEASE ENTER 3 NUMERIC CHARACTERS FOR NUMBR OF FILES'
         CLC   ID(2),=C'BF'        FIND WHICH ROUTINE ASKED
         BE    BF1                 BRANCH TO THAT ROUTINE
         B     SF1                 BRANCH TO THE OTHER
CNTFS    EQU   *
         BCT   2,REPT              BRANCH IF NOT ZERO
         B     ASKAGN              GET ANOTHER ROUTINE
         EJECT
*  BACKSPACE NNNN RECORDS ON TAPE
         SPACE 1
BS       EQU   *
         SPACE 1
*  SKIP NNNN RECORDS ON TAPE
         SPACE 1
SR       EQU   *
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
         SPACE 2
* THE FOLLOWING CODE IS FOR SEARCHING A RECORD COUNT WHEN A ONE
* LINE ENTRY IS USED.
         SPACE 1
         LA    2,ID                GET ADDRESS OF SEARCH
         LA    3,L'ID-5            GET LENGTH OF SEARCH
RCRCNT   TM    2(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMPR               BRANCH IF ALPHAMERIC
         TM    7(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMPR               BRANCH IF ALPHAMERIC
         LA    4,4                GET NUMBER OF CHARACTERS
         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC
         BNO   BUMPR              BRANCH NOT ALPHAMERIC
         MVC   FILES+4(4),3(2)          MOVE REC CNT TO CNT AREA
         B     BYRCRD              BRANCH AROUND REQUEST FOR RECORD CNT
BUMPR    LA    2,1(2)              BUMP SEARCH ADDRESS
         BCT   3,RCRCNT            LOOK AGAIN
         SPACE 2
RECRTY WTOR 'NUMBR OF REC''S TO BE SKIPPED - XXXX',FILES+4,4,REPLYECB
         BAL   11,WAITANS    GO WAIT FOR A REPLY
BYRCRD   OC    FILES+4(3),=3C' '   MAKE ALL CAP'S
         CLC   FILES+4(3),=C'EOJ'  SEE IF SHOULD END THIS ROUTINE
         BE    ASKAGN              YES,EXIT THIS ROUTINE
         TM    FILES+4,X'F0'       SEE IF NUMERIC ENTRY
         BZ    ENTERR              BRANCH IF NOT
         TM    FILES+5,X'F0'       SEE IF NUMERIC ENTRY
         BZ    ENTERR              BRANCH IF NOT
         TM    FILES+6,X'F0'       SEE IF NUMERIC ENTRY
         BZ    ENTERR              BRANCH IF NOT
         TM    FILES+7,X'F0'       SEE IF NUMERIC ENTRY
         BZ    ENTERR              BRANCH IF NOT
         PACK  FILES(8),FILES(8)
         CVB   2,FILES       PUT NUMBER OF REC'S IN REG 2
         CLC   ID(2),=C'SR'
         BE    SREX
BSEX     MVC   OUTCCW+8(8),BSCCW   SET UP BS CCW
BSAGN    EQU   *
         BAL   11,IOOUT      EXECUTE THE CCW
         CLI   OUTECB,X'7F'  EVERYTHING OK
         BE    BCT6          YES, DO AGAIN TILL COUNT = 0
         B     TAPERR        NO, END THIS ROUTINE
BCT6     EQU   *
         BCT   2,BSAGN       DECREMENT THE COUNT AND DO AGAIN
         B     ASKAGN        ALL FINISHED WITH THIS ROUTINE
SREX     MVC   OUTCCW+8(8),SRCCW   SET UP SR CCW
         B     BSAGN               GO DO AGAIN
         SPACE 1
ENTERR   EQU   *
         WTO   'NUMBR OF REC''S ENTRY MUST BE 4 NUMERIC CHARACTERS'
         B     RECRTY
         SPACE 1
         EJECT
*  CARD TO CARD REPRODUCE
         SPACE 1
CC       EQU   *
         XC    SEQCNTR,SEQCNTR         CLEAR SEQ COUNTER
         BAL   11,SEARCH           LOOK FOR CHARACTER
         DC    C'S'                SEE IF SHOULD SEQUENCE
         DC    AL1(20)             LENGTH OF SEARCH
         MVI   SEQ+1,0             NO OP BRANCH
         BE    *+8                 BRANCH IF SHOULD SEQUENCE
         MVI   SEQ+1,X'F0'         CAUSE BRANCH IF NOT TO SEQ
         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR
         BAL   11,PCHUCB           GO GET ADRS OF PUNCH
CCPNCH   EQU   *
CCLOOP   EQU   *
         BAL   11,IOIN       READ A CARD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    CC1                 YES, BRANCH
         TM    INSTAT+4,X'01'    EOF
         BC    1,FEEDBK            GO FEED TWO BLANK CARDS
         B     RDRERROR      READER ERROR, END THIS ROUTINE
CC1      EQU   *
SEQ      NOP   *+8                 BRANCH NO SEQ
         BAL   10,SEQCRD           GO TO SEQ ROUTINE
         BAL   11,IOOUT      PUNCH A CARD
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    CCLOOP        YES, LOOP
*
PCHERROR WTO   'PUNCH ERROR - EOJ'
         B     ASKAGN
*
FEEDBK   MVI   TDAREA,X'40'        INSERT BLANK
         MVC   TDAREA+1(79),TDAREA MAKE ALL BLANKS
         BAL   11,IOOUT            GO PUNCH BLANK
         CLI   OUTECB,X'7F'        SEE IF ERROR
         BNE   PCHERROR            BRANCH IF ERROR
         BAL   11,IOOUT            GO PUNCH BLANK
         CLI   OUTECB,X'7F'        SEE IF ERROR
         BNE   PCHERROR            BRANCH IF ERROR
         B     ASKAGN              GO GET NEXT ROUTINE
*
         SPACE 5
*    SUB-ROUTINE TO SEQUENCE CARDS
*    LINKAGE   BAL 10,SEQCRD
SEQCRD   SR    11,11               CLEAR REG 11
         L     11,SEQCNTR          GET COUNT
         LA    11,10(11)           BUMP BY 10
         ST    11,SEQCNTR          PUT BACK COUNT
         CVD   11,UNPACKAR         UNPACK
         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA
         UNPK  72(8,2),UNPACKAR(8) UNPACK SEQUENCE NUMBER
         OI    79(2),X'F0'         MAKE Z ONE PRINTABLE
         BR    10
*
UNPACKAR DC    D'0'
SEQCNTR  DC    F'0'
         EJECT
***********************************************************************
*                                                                     *
*   THIS IS A COMMON ROUTINE FOR FINDING A CARD READER TO BE USED BY  *
*   DEBE. IT WILL FIRST SCAN THE MESSAGE INPUT AREA FOR A READER      *
*   DEVICE ADDRESS. FAILING THAT IT WILL SCAN THE UCB'S FOR AN UN-    *
*   ALLOCATED ONLINE CARD READER. IF STILL NOT FOUND IT WILL ASK FOR  *
*   THE ADDRESS OF A USABLE CARD READER.                              *
*                                                                     *
*   LINKAGE TO THIS ROUTINE IS  BAL 11,RDRUCB                         *
*                                                                     *
***********************************************************************
         SPACE
RDRUCBSV DC    11F'0'
         SPACE
RDRUCB   STM   1,11,RDRUCBSV       SAVE WORK REGISTERS
         SPACE
         LA    2,ID                GET ADRS OF MSG AREA
         LA    3,L'ID-5            GET LENTH OF SEARCH
RDRUC1   TM    2(2),X'C0'          SEE IF CRT IN FRONT IS ALPHA
         BO    RDBPAG              BRANCH IF ALPHA
         TM    6(2),X'C0'          SEE IF CRT IN BACK  IS ALPHA
         BO    RDBPAG              BRANCH IF ALPHA
         LA    4,3                 GET NUMBER OF CHARACTERS IN ADRS
         LR    5,2                 GET ADRS OF SEARCH
RDALP    TM    3(5),X'C0'          SEE IF NOT ALPHAMERIC
         BNO   RDBPAG              BRANCH IF NOT
         LA    5,1(5)              BUMP ADRS OF SEARCH
         BCT   4,RDALP             BRANCH TO LOOK AGAIN
         MVC   READER1(3),0(2)     GET CARD READER ADRS FROM MSG AREA
RDUPPER  OC    READER1(3),=3X'40'  MAKE UPPER CASE
         B     RDRPCS              BRANCH TO CONTINUE PROCESSING
RDBPAG   LA    2,1(2)              BUMP SEARCH ADRS
         BCT   3,RDRUC1            GO GET NEXT CHARACTERS
         B     RDRADSNF            ASK FOR RDR ADRS
RDNXTUCB LA    6,2(6)              BUMP POINTER TO UCB ADRS TABLE
         B     RUCBLOK             GO GET NEXT UCB ADRS
RDRPCS   EQU   *
         L     6,16                GET ADRS OF CVT
         L     6,40(6)             GET ADRS OF UCB ADRS TABLE
         XC    UCBWORK,UCBWORK     CLEAR WORKAREA FOR UCB SCAN MS061986
         MVI   DEVCLASS,UCB3UREC   LOOK FOR UNIT RECORD DEVICESMS061986
         SPACE 1                                               MS061986
RUCBLOK  EQU   *                                               MS061986
         L     R2,CVTPTR           GET POINT TO CVT            MS061986
         USING CVTMAP,R2           ADDRESSABILITY TO CVT       MS061986
         TM    CVTDCB,X'80'        Q. ARE WE RUNNING UNDER XA? MS061986
         BO    RUCBLOKX            A. YES WE ARE               MS061986
         DROP  R2                                              MS061986
         SPACE 1                                               MS061986
         LH    7,0(6)              GET UCB ADRS
         LTR   7,7                 SEE IF GOOD ADRS
         BZ    RDNXTUCB            BRANCH NO ADRS
         BM    RDDEVNF             BRANCH - NO UCB FOUND
         CLI   2(7),X'FF'          SEE IF VALID UCB
         BNE   RDNXTUCB            GET NEXT UCB
RUCBCHK  EQU   *                                               MS061986
         CLC   READER1(3),13(7)    SEE IF DEVICE ASKED FOR
         BNE   RDNXTUCB            BRANCH NOT ASKED FOR
         CLI   18(7),X'08'         SEE IF UNIT RECORD DEVICE
         BNE   RDNXTUCB            GET NEXT UCB
         CLI   19(7),X'01'         SEE IF 2540 READER
         BE    CR2540              BRANCH IF 2540
         CLI   19(7),X'06'         SEE IF 3505 READER
         BE    CR2540              BRANCH IF 3505 CARD READER
         CLI   19(7),X'03'         SEE IF 1442 READ/PUNCH
         BE    RD1442              BRANCH 1442 READ/PUNCH
         CLI   19(7),X'04'         SEE IF 2501 CARD READER
         BE    RD2501              BRANCH IF 2501
         CLI   19(7),X'05'         SEE IF 2520 READ/PUNCH
         BE    RD2520              BRANCH IF 2520 READ/PUNCH
         B     RDNXTUCB            GET NEXT UCB
         SPACE 2                                               MS061986
RUCBLOKX EQU   *                                               MS061986
         L     R3,CVTPTR           GET CVT ADDRESS             MS061986
         USING CVTMAP,R3           SETUP ADDRESSABILITY        MS061986
         LA    R1,UCBWORK          GET ADDRESS OF WORK AREA    MS061986
         ST    R1,PARMWA           STORE ADDRESS IN PARMLIST   MS061986
         LA    R1,DEVCLASS         GET ADDRESS OF AREA CONTAIN-MS061986
*                                  ING DEVICE CLASS TO SEARCH. MS061986
         ST    R1,PARMDEVT         SAVE IN PARM LIST           MS061986
         LA    R1,ADDRUCB          ADDRESS OF RETURNED UCB     MS061986
         ST    R1,PARMUCB          STORE ADDRESS IN PARMLIST   MS061986
         OI    PARMUCB,X'80'       INDICATE END OF PARMLIST    MS061986
         SPACE 1                                               MS061986
RUCBSRCH EQU   *                                               MS061986
         USING UCBOB,R7            SETUP ADDRESSABILTY TO UCB  MS061986
         LA    R1,PARMLIST         PUT PARMLIST IN R1          MS061986
         L     R15,CVTUCBSC        GET SCAN SERVICE ADDRESS    MS061986
         BALR  R14,R15             GOTO SCAN SERVICE           MS061986
         LTR   R15,R15             Q. HAS A UCB BEEN RETURNED? MS061986
         BNZ   RDRADSNF            A. NO, AT END OF DEVICE     MS061986
*                                     CLASS AND NO MATCH FOUND.MS061986
         L     R7,ADDRUCB          R2==> UCB ADDRESS THAT THE  MS061986
*                                        SCAN ROUTINE RETURNED.MS061986
         B     RUCBCHK             NOW GO AND CHECK            MS061986
         SPACE 2                                               MS061986
         DROP  R3                                              MS061986
         DROP  R7                                              MS061986
RD2501   EQU   *
RD1442   EQU   *
RD2520   EQU   *
         CLI   16(7),X'01'         SEE IF PUNCH ONLY- FOR 2520/1442
         BE    RDNXTUCB            GET NEXT UCB IF YES
CR2540   EQU   *
         TM    SYSTYP,X'40'        SEE IF PCP SYSTEM
         BO    RDCONTU             BRANCH IF YES
         TM    3(7),X'08'          SEE IF DEVICE IS ALLOCATED
         BO    RDCLIPT             BRANCH ID ALLOCATED
RDOFLINE EQU   *
         CLI   3(7),X'C0'          SEE IF GOING OFFLINE
         BNE   RDOFCHK             BRANCH NOT GOING OFFLINE
         MVC   RDDVOLN+32(3),13(7) GET DEVICE ADRS
RDDVOLN  WTO   'DEBE WAITING FOR DEVICE XXX TO GO OFFLINE'
RDSTMR   EQU   *
         STIMER WAIT,BINTVL=TIME
         CLI   3(7),X'C0'          SEE IF OFFLINE YET
         BE    RDSTMR              BRANCH IF NOT OFFLINE
RDOFCHK  TM    3(7),X'80'          SEE IF ONLINE
         BZ    RDDVOK              BRANCH IF OFFLINE
         MVC   RDGNOFF+15(3),13(7) GET DEVICE ADRS
RDGNOFF  WTO   'DEVICE XXX CHANGED TO OFFLINE STATUS - DEBE'
         NI    3(7),X'7F'          CHANGE TO OFFLINE
RDDVOK   EQU   *
         B     RDCONTU             USE DEVICE
TIME     DC    A(500)              WAIT FOR 5 SECONDS
*
RDDEVNF  EQU   *
         MVC   RDNOUCB+38(3),READER1 GET ADRS SEARCHED
RDNOUCB  WTO   'READER UCB NOT FOUND FOR ADRS XXX'
RDRADSNF WTOR  'PLEASE ENTER READER ADRS - XXX',READER1,3,REPLYECB
         BAL   11,WAITANS          WAIT REPLY
         B     RDUPPER             GET READER ADRS
*
RDCLIPT  EQU   *
         MVC   ASGNMSG+22(3),13(7) GET DEVICE ADRS
ASGNMSG WTOR 'DEVICE CUU IS ALLOCATED, REPLY ''W'' TO WAIT, ''C'' TO CAX
               NCEL OR A NEW DEVICE ADRS ''CUU''',READER1,3,REPLYECB
         BAL   11,WAITANS          WAIT FOR REPLY
         OC    READER1,=3X'40'     MAKE UPPER CASE
         CLI   READER1,C'C'        SEE IF SHOULD CANCEL
         BE    EOJ                 GO ASK FOR NEXT ROUTINE
         CLI   READER1,C'W'        SEE IF WAIT
         BNE   RDRPCS              GO SEARCH UCB'S AGAIN
RDSTAL   STIMER WAIT,BINTVL=TIME
         TM    3(7),X'08'          SEE IF ALLOCATED
         BO    RDOFLINE            BRANCH IF ALLOCATED
*
RDCONTU  EQU   *
         ST    7,INDEBMOD          STORE UCB ADRS IN DEB
         CLI   19(7),X'03'         SEE IF 1442
         BE    RDCCW1RT            BRANCH IF 1442
         CLI   19(7),X'05'         SEE IF 2520
         BNE   RDCCW2RT            BRANCH TO 2540 CCW
RDCCW1RT MVC   INCCW(8),RD82CCW    MOVE IN CCW FOR  1442/2520
         B     RDAMFN              BRANCH
RDCCW2RT MVC   INCCW(8),RD02CCW    MOVE IN CCW FOR  2540
*
RDAMFN   LM    1,11,RDRUCBSV       RESTORE
         BR    11                  RETURN TO USING ROUTINE
         SPACE 2
RD82CCW  CCW   X'82',TDAREA,X'20',80  CCW FOR 1442/2520 READER
RD02CCW  CCW   X'02',TDAREA,X'20',80  CCW FOR 2540 READER
         EJECT
***********************************************************************
*                                                                     *
*  THIS IS A COMMON ROUTINE FOR FINDING A CARD PUNCH ADDRESS TO BE    *
*  USED BY DEBE.  IT WILL FIRST SCAN THE MESSAGE INPUT AREA FOR A     *
*  PUNCH DEVICE ADDRESS. FAILING THAT IT WILL SCAN THE UCB'S FOR AN   *
*  UN-ALLOCATED ONLINE CARD READER. IF STILL NOT FOUND IT WILL ASK    *
*  FOR THE ADDRESS OF A USABLE CARD PUNCH.                            *
*                                                                     *
*  LINKAGE TO THIS ROUTINE IS  BAL 11,PCHUCB                          *
*                                                                     *
***********************************************************************
         SPACE 3
PCHUCB   STM   1,11,RDRUCBSV       SAVE WORK REGISTERS
         LA    2,ID                GET ADRS OF MSG AREA
         LA    3,L'ID-5            GET LENGTH OF SEARCH
PCHUC1   TM    2(2),X'C0'          SEE IF CHR IN FRONTIS ALPHA
         BO    PCBPAG              BRANCH IF ALPHA
         TM    6(2),X'C0'          SEE IF CHR IN BACK IS ALPHA
         BO    PCBPAG              BRANCH IF ALPHA
         LA    4,3                 GET NUMBER OF CHARACTERS IN ADRS
         LR    5,2                 GET ADRS OF SEARCH
PCALP    TM    3(5),X'C0'          SEE IF ALPHAMERIC
         BNO   PCBPAG              BRANCH IF NOT
         LA    5,1(5)              BUMP ADRS OF SEARCH
         BCT   4,PCALP             BRANCH TO LOOK AGAIN
         MVC   PUNCH1(3),0(2)      GET CARD PUNCH ADRS FROM MSG AREA
PCUPPER  OC    PUNCH1(3),=3X'40'   MAKE UPPER CASE
         B     PCHPCS              BRANCH TO CONTINUE PROCESSING
PCBPAG   LA    2,1(2)              BUMP SEARCH ADRS
         BCT   3,PCHUC1            GO GET NEXT CARACTERS
         B     PCRADSNF            ASK FOR PUNCH ADRS
PCHPCS   EQU   *
         L     6,16                GET ADRS OF CVT
         L     6,40(6)             GET ADRS OF UCB ADRS TABLE
         XC    UCBWORK,UCBWORK     CLEAR WORKAREA FOR UCB SCAN MS061986
         MVI   DEVCLASS,UCB3UREC   LOOK FOR UNIT RECORD DEVICESMS061986
         SPACE 1                                               MS061986
PUCBLOK  EQU   *                                               MS061986
         L     R2,CVTPTR           GET POINT TO CVT            MS061986
         USING CVTMAP,R2           ADDRESSABILITY TO CVT       MS061986
         TM    CVTDCB,X'80'        Q. ARE WE RUNNING UNDER XA? MS061986
         BO    PUCBLOKX            A. YES WE ARE               MS061986
         DROP  R2                                              MS061986
         SPACE 1                                               MS061986
         LH    7,0(6)              GET UCB ADRS
         LTR   7,7                 SEE IF GOOD ADRS
         BZ    PCNXTUCB            BRANCH NO ADRS
         BM    PCRADSNF      BR END OF TABLE SCAN AGAIN
         CLI   2(7),X'FF'          SEE IF VALID UCB
         BNE   PCNXTUCB            GET NEXT UCB
         CLI   18(7),X'08'         SEE IF UNIT RECORD DEVICE
         BNE   PCNXTUCB            GET NEXT UCB
PUCBCHK  EQU   *                                               MS061986
         CLI   19(7),X'02'         SEE IF 2540 PUNCH
         BE    PC2540              BRANCH IF 2540 PUNCH
         CLI   19(7),X'0C'         SEE IF 3525 PUNCH
         BE    PC2540              BRANCH IF 3525 PUNCH
         CLI   19(7),X'03'         SEE IF 1442 READ/PUNCH
         BE    PC1442              BRANCH IF 1442 READ/PUNCH
         CLI   19(7),X'05'         SEE IF 2520 READ/PUNCH
         BE    PC2520              BRANCH IF 252O READ/PUNCH
         B     PCNXTUCB            GET NEXT UCB
         SPACE 2                                               MS061986
PUCBLOKX EQU   *                                               MS061986
         L     R3,CVTPTR           GET CVT ADDRESS             MS061986
         USING CVTMAP,R3           SETUP ADDRESSABILITY        MS061986
         LA    R1,UCBWORK          GET ADDRESS OF WORK AREA    MS061986
         ST    R1,PARMWA           STORE ADDRESS IN PARMLIST   MS061986
         LA    R1,DEVCLASS         GET ADDRESS OF AREA CONTAIN-MS061986
*                                  ING DEVICE CLASS TO SEARCH. MS061986
         ST    R1,PARMDEVT         SAVE IN PARM LIST           MS061986
         LA    R1,ADDRUCB          ADDRESS OF RETURNED UCB     MS061986
         ST    R1,PARMUCB          STORE ADDRESS IN PARMLIST   MS061986
         OI    PARMUCB,X'80'       INDICATE END OF PARMLIST    MS061986
         SPACE 1                                               MS061986
PUCBSRCH EQU   *                                               MS061986
         USING UCBOB,R7            SETUP ADDRESSABILTY TO UCB  MS061986
         LA    R1,PARMLIST         PUT PARMLIST IN R1          MS061986
         L     R15,CVTUCBSC        GET SCAN SERVICE ADDRESS    MS061986
         BALR  R14,R15             GOTO SCAN SERVICE           MS061986
         LTR   R15,R15             Q. HAS A UCB BEEN RETURNED? MS061986
         BNZ   PCRADSNF            A. NO, AT END OF DEVICE     MS061986
*                                     CLASS AND NO MATCH FOUND.MS061986
         L     R7,ADDRUCB          R2==> UCB ADDRESS THAT THE  MS061986
*                                        SCAN ROUTINE RETURNED.MS061986
         B     PUCBCHK             NOW GO AND CHECK            MS061986
         SPACE 2                                               MS061986
         DROP  R3                                              MS061986
         DROP  R7                                              MS061986
PC2520   EQU   *
PC1442   EQU   *
         TM    16(7),X'01'   SEE IF PUNCH ONLY FOR 2520.1442
         BZ    PCNXTUCB      BR IF NOT PUNCH
PC2540   EQU   *
         TM    3(7),X'80'          SEE IF DEVICE IS ONLINE
         BZ    PCSEASK             GET NEXT UCB
PCASK    TM    3(7),X'08'          SEE IF DEVICE ALLOCATED
         BNO   PCCONTU             BRANCH NOT ALLOCATED
         B     PCCLIPT             BRANCH IF ALLOCATED
PCNXTUCB LA    6,2(6)              BUMP POINTER TO UCB ADRS TABLE
         B     PUCBLOK             GO GET NEXT UCB ADRS
PCSEASK  CLC   PUNCH1(3),13(7)     SEE IF DEVICE ASKED FOR
         BE    PCASK               DEVICE REQUESTED - IGNORE OFF LINE
         B     PCNXTUCB            GET NEXT UCB
         SPACE
PCRADSNF WTOR  'ENTER PUNCH ADRS - XXX',PUNCH1,3,REPLYECB
         BAL   11,WAITANS          WAIT REPLY
         B     PCUPPER             MAKE ADRS UPPER CASE
         SPACE
PCCLIPT  EQU   *
         XC    TDAREA(3),TDAREA    CLEAR INPUT MSG AREA
         TM    SYSTYP,X'40'        SEE IF PCP SYSTEM
         BO    PCCONTU             BRANCH IF PCP
         MVC   PSGNMSG+23(3),13(7) GET DEVICE ADRS
PSGNMSG  WTOR  'DEVICE XXX IS ALLOCATED, STOP WRITER THEN REPLY ''U'' TX
               O USE, ''C'' TO CANCEL OR A NEW DEVICE ADRS XXX',TDAREA,X
               3,REPLYECB
         BAL   11,WAITANS          WAIT ANSWER
         OC    TDAREA(3),=3X'40'   MAKE UPPER CASE
         CLI   TDAREA,C'U'         SEE IF SHOULD USE
         BE    PCCONTU             BRANCH TO CONTINUE
         CLC   TDAREA,=C'EOJ'      SEE IF TO END ROUTINE
         BE    EOJ                 BRANCH TO EOJ
         MVC   PUNCH1(3),TDAREA    GET NEW ADRS
         B     PCHPCS              LOOK AT UCBS AGAIN
         SPACE
PCCONTU  EQU   *
         ST    7,OUTDEBMD
         CLI   19(7),X'03'         SEE IF 1442
         BE    PCCCWIRT            BRANCH NOT 1442
         CLI   19(7),X'05'         SEE IF 252O
         BE    PCCCWIRT            BRANCH NOT 2520
         B     PC2540CC            BRANCH TO 2540 CCW
PCCCWIRT MVC   OUTCCW(8),CCW1442   GET 1442/2520 CCW
         B     PCAMFN              BRANCH AROUND NEXT CCW
PC2540CC MVC   OUTCCW(8),CCW2540   GET 2540 CCW
PCAMFN   LM    1,11,RDRUCBSV       RESTORE REGISTERS
         BR    11                  RETURN
         SPACE 2
CCW1442  CCW   X'81',TDAREA,X'20',80  CCW FOR 1442/2520 PUNCH
CCW2540  CCW   X'41',TDAREA,X'20',80  CCW FOR 2540 PUNCH
         EJECT
*  CARD TO PRINTER - 80/80 LIST
         CNOP  0,4
         SPACE 1
CP       EQU   *
         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR
CP2      EQU   *
         BAL   11,OPENPRNT   OPEN SYSPRINT IF NOT OPEN
         BAL   11,SKIPTO1    SKIP TO CHANNEL 1
CPLOOP   EQU   *
         BAL   11,IOIN       READ A CARD
         CLI   INECB,X'7F'   EVERYTHING OK
         BE    CP1           YES, BRANCH
         TM    INSTAT+4,X'01'      EOF?
         BC    1,ASKAGN      YES, END THIS ROUTINE
RDRERROR WTO   'READER ERROR - EOJ'
         B     ASKAGN              GET NEXT ROUTINE
CP1      EQU   *
         MVC   TDOUTAR(80),TDAREA      CLEAR UPPER PRINT LINE AFTER
         MVI   TDOUTAR+80,C' '     PUT IN BLANK
         MVC   TDOUTAR+81(51),TDOUTAR+80  BLANK OUT AREA
         BAL   11,TDPRINT    PRINT A CARD
         B     CPLOOP        LOOP
         EJECT
*  CARD TO TAPE
         SPACE 1
CT       EQU   *
         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR
*  SET UP TAPE'S DCB AND DEB
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   OUTCCW+8(8),NOOP    MOVE IN NOOP CCW
         BAL   11,IOOUT            GO PERFORM NOP
         MVC   OUTCCW+8(8),CTCCW   SET UP WRITE CCW
         SR    2,2           CLEAR A COUNTER
CTLOOP   EQU   *
         BAL   11,IOIN       READ A CARD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    CT1           YES, BRANCH
         TM    INSTAT+4,X'01'      EOF
         BC    1,CTEOJ1      YES, WRITE A TAPE MARK
         B     RDRERROR      READER ERROR, END THIS ROUTINE
CT1      EQU   *
         LA    2,1(2)        INCREMENT A COUNTER
         BAL   11,IOOUT      WRITE TO TAPE
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    CTLOOP        YES, LOOP
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
         B     TAPERR
CTEOJ1   EQU   *
         MVC   COUNT(6),=X'402020202020'     EDIT THE COUNTER
         CVD   2,TDWK
         ED    COUNT(6),TDWK+5
         LA    1,MESSAGE
         SVC   35      PRINT THE NUMBER OF CARDS THAT WENT TO TAPE
CTEOJ    EQU   *
         MVC   OUTCCW+8(8),WTCCW       SET UP WTM CCW
         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP
         MVC   OUTCCW+16(8),=X'0300000020000001'
         BAL   11,IOOUT      WRITE A TAPE MARK
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BNE   TAPERR        NO, BRANCH
         BAL   10,RUOUT            GO REWIND OUTPUT IF ASKED
         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE
         BNE   *+8                 BRANCH IF NOT
         BAL   10,RUIN             GO REWIND INPUT IF ASKED
         B     ASKAGN
         SPACE 4
*   TAPE TO CARD---WILL UNBLOCK AND PUNCH IN MULT OF 80 CHARACTERS
         SPACE 1
TC       EQU   *
         XC    CNTARA,CNTARA       CLEAR FILE COUNTER
         XC    SEQCNTR,SEQCNTR         CLEAR SEQ COUNTER
         BAL   11,SEARCH           LOOK FOR CHARACTER
         DC    C'S'                SEE IF SHOULD SEQUENCE
         DC    AL1(20)             LENGTH OF SEARCH
         MVI   SEQ1+1,0            NO OP A BRANCH
         BE    *+8                 BRANCH IF SEQ
         MVI   SEQ1+1,X'F0'        SET UP FOR NO SEQ
         MVI   CNTARA,0            CLEAR FILE COUNTER
         MVI   SW80,0              RESET SWITCH
         MVI   SW81,0              RESET SWITCH
         MVI   SW82,0                   RESET SWITCH
         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP
         BAL   10,TPFILS           GO SEE HOW MANY FILES
         BAL   11,PCHUCB           GO GET ADRS OF PUNCH
TCPCH    EQU   *
         SPACE
         MVC   SAVCCW(4),OUTCCW
         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW
         BAL   11,IOIN             GO PERFORM NOOP
         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW
TCLOOP   EQU   *
         MVC   OUTCCW(4),SAVCCW
         BAL   11,IOIN       READ A RECORD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    TC1            YES, BRANCH
         TM    INSTAT+4,X'01'      EOF
         BC    8,TAPERROR               TAPE ERROR END ROUTINE
         CNOP  0,4                      ALIGN
         BAL   10,NXTFL                 GO TO EOF SUBROUTINE
         DC    A(TCLOOP)                CONTINUE RETURN ADDRESS
TC1      EQU   *
         MVI   SW82,0                   RESET SWITCH
         LH    2,INSTAT+6          GET RESIDUAL COUNT
         LH    3,TDINCCW+6         GET BEGINNING COUNT
         SR    3,2                 GET BYTES READ IN
TC2      EQU   *
         C     3,=F'80'   SEE IF RESIDUAL CNT IS 80
         BNL   SEQ1   BRANCH IF AT LEAST 1 MORE CARD TO PUNCH
         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA
         LA    2,0(3,2)            BUMP BY BYES TO BLANK OUT
TAG1     MVC   0(80,2),=80C' '      BLANK OUT FIELD
SEQ1     NOP   *+8                 BRANCH IF NO SEQ
         BAL   10,SEQCRD           GO TO SEQ ROUTINE
         BAL   11,IOOUT      PUNCH 80 BYTES OF RECORD
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    CNTDN               GO SEE IF SHOULD PUNCH AGAIN
         B     PCHERROR      PUNCH ERROR, END ROUTINE
SAVCCW   DC    F'0'
*
CNTDN    EQU   *
         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA
         LA    2,80(2)             BUMP BY 80
         ST    2,OUTCCW            STORE BUMPED OUTPUT ADDRESS
         MVC   OUTCCW(1),SAVCCW
*
         S     3,=F'80'            SUBTRACT 80 FROM BYTES READ
         BH    TC2                 BRANCH IF ALL OF RECORD NOT PUNCHED
         BE    TCLOOP              GO READ NEXT RECORD
         TS    SW80                SEE IF MSG WRITTEN
         BNZ   NOTE2               BRANCH IF MSG WRITTEN ONCE
         WTO   '***CAUTION***--CARD PUNCHED NOT MULT OF 80 CHARACTERS'
NOTE2    EQU   *
       TS      SW81                SEE IF SECOND MESSAGE IS PRINTED
         BNZ   TCLOOP              BRANCH IF MSG WRITTEN ONCE
         WTO   'LAST WARNING--ANOTHER NON-80 CHARACTER CARD PUNCHED'
         B     TCLOOP              GO READ NEXT RECORD
         SPACE 3
*        ROUTINE FOR SENSING EOF - TC,TP & TD
*
*        LINKAGE FOR EOF SUBROUTINE
*        BAL   10,NXTFL                 BRANCH TO SUBROUTINE
*        DC    A(LABEL TO CONTINUE PROCESSING)
*
NXTFL    EQU   *
         ST    10,SVRTNR           SAVE REG
         SR    11,11               CLEAR REG
         LH    11,CNTARA                GET CNT
         LA    11,1(11)            ADD ONE
         STH   11,CNTARA                STORE COUNT
         CVD   11,TDWK             CONVERT TO DEC
         UNPK  FICNT(3),TDWK+5(3)       UNPACK FILE CNT
         OI    FICNT+2,X'F0'       MAKE SIGN A ZONE
         CNOP  0,4                 ALIGN ON WORD
MSGFIL   WTO   'OS-DEBE COMPLETED FILE 000'
FICNT    EQU   *-5                 ADDRESS OF MSG CNT
         CLC   ID(2),=C'TP'   SEE IF TP
         BE    TDRCT               BRANCH IF SAME
         CLC   ID(2),=C'TD'   SEE IF TD
         BE    TDRCT               BRANCH IF SAME
         CLC   ID(2),=C'TF'  DOS OS OLP
         BNE   FICNT1
         BAL   11,SKIPTO2
         B     FICNT1
         SPACE   3
TDRCT    BAL   11,SPACE1           SPACE
         BAL   11,SPACE1           SPACE
         MVC   TDOUTAR+30(26),MSGFIL+8     GET FILE MSG
         BAL   11,TDPRINT          GO PRINT
         BAL   11,SKIPTO1          SKIP
FICNT1   CLC   FILES+5(3),=C'ALL'      SEE IF ALL
         BNE   NXTFLA              BRANCH AROUND DBL FILE MAR TST
         TS    SW82                     SET EOF SWITCH
         BC    4,*+8               SEE IF DOUBLE FILE MARK
         B     RETNRT                   GET NEXT RECORD
         BAL   10,RUIN             GO SEE IF SHOULD REWIND/UNLOAD
         B     ASKAGN              GO GET NEXT ROUTINE ID
*
NXTFLA   CLC   CNTARA(2),FILES+6    SEE IF FINISHED
         BL    RETNRT              BRANCH TO GET NEXT RECORD
         BAL   10,RUIN             GO SEE IF SHOULD REIND/UNLOAD
         CLC   ID(2),=C'TC'         SEE IF TAPE TO CARD
         BE    FEEDCD              GO FEED CARDS
         B     ASKAGN              BACK TO ROUTINE ID
*
*        RETURN ROUTINE
RETNRT   L     11,SVRTNR           GET RETURN POINTER
         L     10,0(11)            GET RETURN ADDRESS
         CLC   ID(2),=C'TF'  OLP TAPES
         BNE   RETNRT1
         LA    10,RDTAPE
RETNRT1  DS    0H
         BR    10                  RETURN
*
FEEDCD   EQU   *
         MVI   TDAREA,X'40'        GET BLANK
         MVC   TDAREA+1(79),TDAREA MAKE BLANKS
         LA    3,80                MAKE COUNT 80
         STH   3,OUTCCW+6          STORE COUNT
         BAL   11,IOOUT            FEED BLANK
         BAL   11,IOOUT            FEED BLANK
         B     ASKAGN              GET NEXT ROUTINE
*
SVRTNR   DC    F'0'                RETURN ADDRESS SAVE AREA
CNTARA   DC    H'0000'             FILE COUNTER
SW80     DC    X'00'               MESSAGE SW
SW81     DC    X'00'               MESSAGE SW
SW82     DC    X'00'                    FILES SWITCH
         SPACE 4
         EJECT
         CNOP  0,4
*  PRINT A TAPE
TP       EQU   *
*  TP USES THE TD ROUTINE WITHOUT THE HEX-TO-CHARACTER CONVERSION
         OI    TD3+1,X'F0'         SET SWITCHES IN TD
         OI    TD6+1,X'F0'
         SPACE 1
*  PRINT A TAPE IN HEX UNLESS SWITCHES SET BY TP
         SPACE 1
TD       EQU   *
         MVI   SW82,0         RESET EOF SWITCH
         BAL   11,OPENPRNT   OPEN SYSPRINT IF NECESSARY
         BAL   11,SKIPTO1     SKIP TO CHANNEL 1
         XC    CNTARA,CNTARA       CLEAR FILE COUNTER
*  SET UP TAPE'S DCB AND DEB
         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP
         BAL   10,TPFILS           SEE HOW MANY FILES
         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW
         BAL   11,IOIN             GO PERFORM NOOP
         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW
         BAL   11,TDPRINT    PRINT THE HEADING LINE
TDAGN    BAL   11,SPACE1      SPACE A LINE
         SP    RECCNT(3),RECCNT(3) CLEAR THE RECORD COUNTER
TDLOOP   EQU   *
         BAL   11,IOIN        READ A RECORD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    TD1           YES, BRANCH
         TM    INSTAT+4,X'01'      EOF
         BC    1,TDEOJ       YES, GO END ROUTINE
         B     TAPERROR
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
TD1      EQU   *
         MVI   SW82,0         RESET EOF SWITCH
         LH    2,INSTAT+6          GET RESIDUAL COUNT
         LH    3,TDINCCW+6         GET BEGINING COUNT
         SR    3,2                 GET BYTES READ IN
UNFMTD   EQU   *
         CVD   3,TDWK
         MVI   TDOUTAR,C' '        CLEAR PRINT LINE
         MVC   TDOUTAR+1(131),TDOUTAR
         MVC   TDOUTAR+102(23),RECHDG  SET UP LINE INFORMATION
         ED    TDOUTAR+119(6),TDWK+5
         AP    RECCNT(3),COND1(1)      INCREMENT RECORD COUNTER
         ED    TDOUTAR+105(6),RECCNT
         LA    2,TDAREA      GET READY FOR HEX CONVERSION
         LA    5,TDAREA
         LA    7,80
TD6      BC    0,TD7         SET TO BRANCH BY TP ROUTINE
*  R2 POINTS TO THE INPUT AREA
*  R5 POINTS TO THE OUTPUT AREA
         L     5,=A(TDAREA2)
         LA    7,50
         BAL   14,UNPK       GO CONVERT 50 BYTES TO 100 HEX
TD7      EQU   *
         CR    3,7           SHORT LINE TO BE PRINTED
         BL    TD3           YES, GO DO THE MOVE
         TM    TD6+1,X'F0'         SEE IF TP
         BNO   HX                  BRANCH IF NOT TP
         MVC   TDOUTAR(80),0(5)    DO 80 BYTE MVBE
         B     TDPR
HX       EQU   *
         MVC   TDOUTAR(100),0(5)   ELSE DO 100 BYTE MOVE
TDPR     EQU   *
         BAL   11,TDPRINT     PRINT A LINE
         MVI   TDOUTAR,C' '        CLEAR OUTPUT AREA
         MVC   TDOUTAR+1(131),TDOUTAR
         SR    3,7           DECREMENT BLKSIZE
         BC    12,TD9         BRANCH IF BLOCK FINISHED
         AR    2,7            ELSE, INCREMENT COUNTERS
         AR    5,7
         B     TD6           AND LOOP
TD3      BC    0,TD4         SET TO BRANCH BY TP ROUTINE
         LR    11,3          GET REMAINDER OF DATA IN 11
         AR    11,3          DOUBLE IT BECAUSE IT'S UNPACKED
         BCTR  11,0          DECREMENT ONE FOR THE MOVE
         EX    11,MVCOML
         B     TDPR          GO PRINT SHORT LINE
TD4      EQU   *
         BCTR  3,0
         EX    3,MVCOML
         B     TDPR           GO PRINT SHORT LINE
MVCOML   MVC   TDOUTAR(0),0(5)        COMMON MOVE INSTRUCTION
UNPK     EQU   *             CONVERT 50 BYTES TO 100 BYTES HEX
         UNPK  0(15,5),0(8,2)
         UNPK  14(15,5),7(8,2)
         UNPK  28(15,5),14(8,2)
         UNPK  42(15,5),21(8,2)
         UNPK  56(15,5),28(8,2)
         UNPK  70(15,5),35(8,2)
         UNPK  84(15,5),42(8,2)
         UNPK  98(3,5),49(2,2)
         TR    0(100,5),TDPTABLE-240
         BR    14
TD9      EQU   *
         BAL   11,SPACE1     SPACE A LINE AFTER WHOLE BLOCKED
         B     TDLOOP
TDEOJ    EQU   *
         CNOP  0,4                 ALIGN ON WORD BOUNDRY
         BAL   10,NXTFL            GO SEE IF MORE FILES
         DC    A(TDAGN)            RETURN ADDRESS
         B     ASKAGN
         EJECT
***********************************************************************
*                                                                     *
*      THIS ROUTINE IS USED TO FORMAT PRINT A TAPE.  THE TAPE TO BE   *
*      PRINTED MAY BE BLOCKED OR UNBLOCKED.                           *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,4
TF       EQU   *
         MVI   SW82,0              RESET END OF FILE SWITCH
         NI    OPENSW,0
         CLOSE (PRINT)
         MVI   PRINT+36,X'84'   ASA
         BAL   11,OPENPRNT        OPEN SYSPRINT IF NECESSARY
         MVI   OPCODE,C'1'   SKIP T  CHAN 1
         BAL   11,SKIPTO2
         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW
         BAL   10,TAPINSET         GET TAPE ADRS AND MODE
         XC    CNTARA,CNTARA  CLEAR
         BAL   10,TPFILS           SEE HOW MANY FILES
*
RDTAPE   EQU   *
         BAL   11,IOIN             READ A TAPE RECORD
         CLI   INECB,X'7F'         WAS AN ERROR ENCOUNTERED
         BE    TF1                 BRANCH NO ERROR
         TM    INSTAT+4,X'01'      SEE ID EOF
         BC    1,TFEOF
         B     TAPERROR            BRANCH TO ERROR MSG
         SPACE 1
*    FIND RECORD LENGTH AND FORMAT IF POSSABLE.
         SPACE 1
TF1      EQU   *
         XC    ADDR,ADDR     CLEAR
         MVI   TFBYP+1,0     RESET
         MVI   SW82,0              RESET EOF SWITCH
         LH    2,INSTAT+6          GET RESIDUAL COUNT
         LH    3,TDINCCW+6         GET BEGINNING COUNT
         SR    3,2                 RESULT IS LENGTH OF RECORD
         SR    4,4                 CLEAR REGISTER
         SR    5,5                 CLEAR REGISTER
         LR    5,3                 GET RECORD LENGTH
         LA    6,133               PUT 133 INTO REG
         DR    4,6                 DIVIDE BY 133
         C     4,=F'0'             SEE IF WAS MULT OF 133
         BE    FORMAT              BRANCH IF MULT OF 133
         SR    4,4
         SR    5,5
         LR    5,3
         LA    6,134
         DR    4,6           DOS OLP
         C     4,=F'0'       MULT OF 134
         BNE   ONE21
         LA    1,1
         ST    1,ADDR
         BCTR  6,0
         B     FORMAT
ONE21    DS    0H
*
         SR    4,4                 CLEAR REGISTER
         SR    5,5                 CLEAR REGISTER
         LR    5,3                 GET RECORD LENGTH
         LA    6,121               PUT 121 INTO REG
         DR    4,6                 DIVIDE BY 121
         C     4,=F'0'             SEE IF WAS MULT OF 121
         BNE   UNFMTD
FORMAT   DS    0H
         LR    7,6           SAVE
         MVI   TDOUTAR,C' '
         MVC   TDOUTAR+1(131),TDOUTAR
         LA    5,TDAREA
         BCTR  6,0           DECR FOR MOVE
FMFPUT   DS    0H
         CLI   0(5),X'00'    HDR
         BNE   TFENDTST
TMSG1    MVC   RNO(6),1(5)   REPORT NO
         MVC   PNO(4),7(5)   PAPER NO
         XC    TFECB,TFECB   CLEAR
         MVI   TFID,C' '
         MVC   TFID+1(39),TFID
         LA    1,TFMSG
         SVC   35
         WAIT  ECB=TFECB
         OC    TFID(2),=C'  '   UPPER CASE
         CLC   TFID(2),=C'GO'  PROCEED
         BE    TFHDR
         CLC   TFID(2),=C'SF'  SPACE OLP FILE
         BNE   TMSG1
          MVI   TFBYP+1,X'F0'  SET BYPASS SW.
         B     TFHDR
TFENDTST  DS   0H
         CLI   0(5),X'FF'    TRAILER
         BE    TFEOF
TFBYP    BC    0,TFHDR
         EX    6,MVCOML
         BAL   11,TDPRINTA
         MVI   TDOUTAR,C' '
         MVC   TDOUTAR+1(131),TDOUTAR
TFHDR    DS    0H
         S     3,ADDR
         SR    3,7           DECR BLKSIZE
         BC    12,RDTAPE   BR IF BLK FINISHED
         A     5,ADDR
         AR    5,7           NXT
         B     FMFPUT        NXT LINE
TFEOF    DS    0H
         MVI   TFBYP+1,0     RESET
         LH    11,CNTARA
         LA    11,1(,11)
         STH   11,CNTARA
         CVD   11,TDWK
         UNPK  TFCNT(3),TDWK+5(3)
         OI    TFCNT+2,X'F0'
         CNOP  0,4
         WTO   'OS-DEBE COMPLETED FILE 000'
TFCNT    EQU   *-5
         CLC   FILES+5(3),=C'ALL'
         BNE   FMTA
         TS    SW82
         BC    4,*+8
         B     RDTAPE
TFEND    BAL   10,RUIN
         NI    OPENSW,0
         CLOSE (PRINT)
         MVI   PRINT+36,X'82'   MACH
         B     ASKAGN
FMTA     CLC   CNTARA(2),FILES+6   FINISHED
         BL    RDTAPE
         B     TFEND
TDPRINTA DS    0H
         PUT   PRINT,TDOUTAR
         BR    11
*
TFMSG    DS    0F
         DC    AL1(40)
         DC    AL3(TFID)
         DC    A(TFECB)
         DC    AL2(TFLEN)
         DC    H'0'
TFMSG0   DC    C'REPORT - '
RNO      DC    C'XXXXXX'
         DC    C' PAPER - '
PNO      DC    C'XXXX'
         DC    C' REPLY GO WHEN READY'
TFLEN    EQU   *-TFMSG0+4
TFECB    DC    F'0'
ADDR     DC    F'0'
TFID     DC    CL40' '
         EJECT
*  TAPE TO TAPE COPY
         SPACE 1
TT       EQU   *
         BAL   10,TAPINSET    DETERMINE WHICH TAPE UNIT AND SET UP
         BAL   10,TPFILS  GO SEE HOW MANY FILES TO PROCESS
TTZ      BAL   10,TPOUTSET    DETERMINE WHICH TAPE UNIT AND SET UP
         CLC INDEBMOD(4),OUTDEBMD    SEE IF THE SAME TAPE FOR IN - OUT
         BE    STERR              BRANCH IF SAME TAPE
         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW
         BAL   11,IOIN             GO PERFORM NOOP
         MVC   OUTCCW+8(8),NOOP    MOVE IN NOOP CCW
         BAL   11,IOOUT            GO PERFORM NOP
         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW
         MVI   EOFSW,X'00'         RESET EOF SWITCH
         MVI   EOJTT+1,X'00'       NOP EOJ BRANCH
TTLOOP   EQU   *
         BAL   11,IOIN        READ A BLOCK
         CLI   INECB,X'7F'
         BE    TT1           EVERYTHING OK, BRANCH
         TM    INSTAT+4,X'01'
         BNO   TAPERROR            BRANCH IF NOT EOF
         BAL   10,TTEOF            GO SEE IF MORE FILES
         B     TTLOOP          GO GET NEXT RECORD
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
TAPERROR EQU   *
         BAL   10,RUIN             GO SEE IF TO REWIND INPUT
         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE
         BNE   *+8                 BRANCH IF NOT
         BAL   10,RUOUT            SEE IF SHOULD REWIND/UNLOAD
         WTO   'INPUT TAPE ERROR - EOJ'
         B     ASKAGN
         SPACE 3
STERR  WTO 'SAME TAPE FOR INPUT AND OUTPUT - USE ANOTHER OUTPUT TAPE'
         B     TTZ                 GET NEW TAPE ADDRESS
         SPACE 3
TT1      LH    2,INSTAT+6          GET RESIDUAL COUNT
         LH    3,TDINCCW+6         GET BEGINNING COUNT
         SR    3,2           COMPUTE BYTES READ IN
         STH   3,TTCCWOUT+6        SET UP WRITE CCW
         MVC   OUTCCW+8(8),TTCCWOUT
         MVI   EOFSW,X'00'         RESET EOF SWITCH
         BAL   11,IOOUT      WRITE A BLOCK
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    TTLOOP        YES, LOOP
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
TAPERR   EQU   *
         BAL   10,RUOUT            GO SEE IF TO REWIND OUTPUT
         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE
         BNE   *+8                 BRANCH IF NOT
         BAL   10,RUIN             SEE IF SHOULD REWIND/UNLOAD
         WTO   'OUTPUT TAPE ERROR - EOJ'
         B     ASKAGN
         EJECT
RW       EQU   *
         BAL   10,TPOUTSET         DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   OUTCCW+8(8),RWCCW   SET UP REWIND CCW
         BAL   11,IOOUT            EXECUTE THE REWIND
         B     ASKAGN
         SPACE 3
WT       EQU   *
         BAL   10,TPOUTSET     DETERMINE WHICH TAPE UNIT AND SET UP
         B     CTEOJ         GO WRITE A TAPE MARK
       SPACE 3
*    THIS ROUTINE IS USED TO CHANGE LABELS ON ALL DIRECT ACCESS DEVICES
*    EXECPT THE 2321.
*    IT REQUIRES THE DISK PACK BE VARIED OFF LINE AND IS NOT BEING
*    USED BY THE OPERATING SYSTEM. THIS ROUTINE IS BRANCHED TO WHEN ONE
*    OF TWO SETS OF ROUTINE ID CHARACTERS ARE ENTERED. (CL OR LA)
       SPACE 3
CLIP     EQU   *
         MVC   ID(2),=C'CL'        MAKE ROUTINE CHACTERS CONSISTANT
         XC    TDAREA(80),TDAREA   CLEAR I/O AREA
         SPACE 2
* THE FOLLOWING CODE IS USED TO SEARCH THE ADDRESS TO BE CLIPPED
* WHEN A ONE LINE ENTRY IS USED.
         SPACE 1
CLIP1    LA    2,ID                GET ADDRESS OF SEARCH
         LA    3,L'ID-6            GET LENGTH OF SEARCH
ADRCN    TM    2(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMA                BRANCH IF ALPHAMERIC
         TM    6(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMA                BRANCH IF ALPHAMERIC
         LA    4,3                GET NUMBER OF CHARACTERS
         BAL   11,ALPMRIC         GO SEE IF ALPHAMERIC
         BNO   BUMA               BRANCH NOT ALPHAMERIC
         MVC   DISK(3),3(2)        MOVE IN ADDRESS FOR CLIP
         B     BYCLP              BYPASS MSG
BUMA     LA    2,1(2)              BUMP ADRS OF SEARCH
         BCT   3,ADRCN             TRY AGAIN
         SPACE 2
         LA    2,ID                GET ADRS OF SEARCH
         LA    3,L'ID-8            GET LENGTH OD SEARCH
ADRCP    TM    2(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMB                BRANCH IF ALPHAMERIC
         LA    4,5                 GET NUMBER OF CHARACTERS
         BAL   11,ALPMRIC          GO SEE IF ALPHAMERIC
         BNO   BUMB                BRANCH IF ALPHAMERIC
         MVC   TAPE(5),3(2)        MOVE IN ADRS FOR CLIP
         B     BYCLP               BYPASS MSG
BUMB     LA    2,1(2)              BUMP SEARCH ADRS
         BCT   3,ADRCP             TRY AGAIN
         SPACE 2
         XC    ID+4(L'ID-5),ID+4   CLEAR PART OF MSG AREA
 WTOR 'DEVICE ADRS TO BE CLIPPED OR EOJ (XXX OR XXXXX)',ID+5,5,REPLYECB
         BAL   11,WAITANS          WAIT REPLY
         B     CLIP1               GO FIND ADRS NOW
         SPACE 2
BYCLP    OC    DISK(3),=3C' '           MAKE UPPER CASE
         CLC   DISK(3),=C'EOJ'          SEE IF SHOULD END ROUTINE
         BE    ASKAGN                   GET NEW ID
         MVC   D1(3),DISK               GET DISK ADDRESS
         MVI   DEVCLASS,UCB3DACC        SEARCH FOR DASD UCBS   MS061986
         BAL   4,UCBLOKUP               GET UCB ADDRESS OF DEVICE
         LA    11,CLPCLR                LOAD ERROR RETURN ADDRESS
         CLI   #GOTUCB,X'01'       Q. DID WE FIND UCB ?        MS072987
         BE    BYCLP1              A. YES WE DID               MS072987
         B     NODEVICE            A. NO WE DID NOT            MS072987
BYCLP1   EQU   *                                               MS072987
         ST    2,OUTDEBMD               STORE UCB ADDRESS IN DEB
         CLI   18(2),X'20'              SEE IF DIRECT ACCESS
         BNE   NOTDISK                  BRANCH TO NOT DISK MSG
         CLI   19(2),X'05'         SEE IF 2321
         BE    NOTSUP              BRANCH IF 2321
         MVC   OUTDEVT(1),19(2)    PUT UNIT TYPE INTO DCB
         OI    OUTDEVT,X'20'        FINISH IT
         MVC   OUTCCW(32),RDLABL   GET READ LABEL CCWS
         BAL   11,ENABLE           SEE IF SHLD PRINT ENABLE MSG
         SPACE 1
         XC    TDAREA(80),TDAREA   CLEAR I/O AREA
         BAL   11,IOOUT            READ OLD LABEL
         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL
         BNE   RDDKER              BRANCH IF ERROR
         SPACE 1
         BAL   10,OLDMSG           GET AND PRINT OLD LABEL
         BAL   10,ASKNEW           GO ASK FOR NEW LABEL
         B     GETNEW              BRANCH TO WRITE LABLE
         SPACE 1
OLDMSG   EQU   *
         MVC   OLDLAB+16(6),TDAREA+4 GET OLD VOL ID TO MSG
         MVC   OLDLAB+34(10),TDAREA+41 GET OLD OWNER ID
         CNOP  0,4
OLDLAB   WTO   'OLD VOL=XXXXXX  OLD OWNER=XXXXXXXXXX'
         TM    3(2),X'08'          SEE IF DEVICE ALLOCATED
         BNO   NOTALCT             BRANCH IF NOT ALLOCATED
         MVC   ALCTDVMG+15(3),13(2) GET DEVICE ADRS
ALCTDVMG WTO   'DEVICE DDD IS ALLOCATED AND WAS NOT CLIPPED'
         B     RDNEW               BYPASS WRITING VOL AND OWNER INFO
NOTALCT  EQU   *
         BR    10                  BACK TO USING ROUTINE
         SPACE 1
ASKNEW   EQU   *
         XC    LABL,LABL           CLEAR VOL AND OWNER AREAS
         MVC   OWNER(10),=10C' '   BLANK THE LABEL AREA
         WTOR 'ENTER NEW VOL ID AND OWNER ID OR EOJ (VVVVVV,OOOOOOOOOO),
               ',LABL,18,REPLYECB
         BAL   11,WAITANS          WAIT REPLY
         BR    10                  BACK TO USING ROUTINE
LABL     DC    XL17'00'            STORAGE SPACE FOR VOLAND OWNER INFO
OWNER    EQU   LABL+7
         SPACE 1
         CNOP  0,4
GETNEW   EQU   *
         TM    LABL+6,X'40'        SEE IF LABL AND OWNER SEPTED
         BO    FMTMSG              GO PRINT MSG
         MVC   TDAREA+4(6),LABL    GET NEW LABEL
         CLI   OWNER,X'40'         SEE IF OWNER INFO
         BE    BYIDNW              BRANCH IF NO OWNER INFO
         MVC   TDAREA+41(10),OWNER MOVE IN OWNER ID
BYIDNW   EQU   *
         MVI   OUTCCW+CLPCCW-RDLABL,X'05' CHANGE TO WRITE DATA
*
         BAL   11,IOOUT            WRITE NEW LABEL
         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL
         BNE   WRDKER              BRANCH IF ERROR
*
RDNEW    EQU   *
         MVI   OUTCCW+CLPCCW-RDLABL,X'06' CHANGE TO RD DATA
         XC    TDAREA(80),TDAREA   CLEAR I/O AREA
         BAL   11,IOOUT            READ NEW LABEL
         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL
         BNE   LABCHK              BRANCH IF CANT READ NEW LABEL
         BAL   10,NEWMSG           GO PRINT NEW LABEL
         B     ASKAGN
FMTMSG   WTO   'NON-ALPHAMERIC CHARACTER MUST SEPARATE VOL AND OWNER'
         B     ASKNEW              GO ASK FOR INFO AGAIN
         SPACE 1
NEWMSG   EQU   *
         MVC   NLABCK+19(6),TDAREA+4 MOVE IN NEW VOL INFO
         MVC   NLABCK+37(10),TDAREA+41 MOVE IN NEW OWNER INFO
         CNOP  0,4
NLABCK   WTO   'NEW VOL ID=VVVVVV  NEW OWNER=0000000000'
         BR    10                  BACK TO USING ROUTINE
*
CLPCLR   XC    ID+2(L'ID-2),ID+2    CLEAR ID AREA
         B     CLIP                 BRANCH TO START OF ROUTINE
*
RDDKER   WTO   'ERROR READING OLD LABEL'
         B     ASKAGN
LABCHK   WTO   'ERROR READING NEW LABEL'
         B     ASKAGN
WRDKER   WTO   'ERROR WRITING NEW LABEL'
         B     ASKAGN
         SPACE 1
*        THE FOLLOWING CODE IS FOR THE TAPE LABEL ROUTINE
         SPACE 1
NOTDISK  MVC   OUTDEVT(1),19(2)    PUT UNIT TYPE INTO DCB
         BAL   10,TPOUTSET         SET UP FOR TAPE
         MVC   OUTCCW+8(8),RWCCW   MOVE IN REWIND CCW
         SPACE 1
         BAL   11,IOOUT            GO REWIND TAPE
         CLI   OUTECB,X'7F'        SEE IF OK
         BNE   ERRWND              BRANCH IF ERROR
         SPACE 1
         BAL   11,SEARCH           SEE IF SHOULD BYPASS OLD LABEL READ
         DC    C'B'                KEY LETTER FOR SEARCH
         DC    AL1(20)             LENGTH OF SEARCH
         BE    BYOLMSG             BRANCH IF FOUND
         SPACE 1
         MVC   OUTCCW+8(8),RDLBL   MOVE IN READ CCW
         BAL   11,IOOUT            GO ATTEMPT TO READ OLD LABEL
         CLI   OUTECB,X'7F'        SEE IF READ OK
         BE    LBCK                BRANCH IF READ OK
         WTO   'COULD NOT READ OLD LABEL - DIFFERENT MODE OR NO LABEL'
         B     BYOLMSG             BYPASS PRINTING OF LABEL
         SPACE 1
LBCK     CLC   TDAREA(3),=C'VOL'   SEE IF LABEL
         BNE   BYOLMSG             BYPASS PRINTING OF OLD LABEL
         BAL   11,OLDMSG           GO PRINT OLD LABEL
         SPACE 1
BYOLMSG  BAL   10,ASKNEW           GET NEW LABEL
         MVC   OUTCCW+8(8),RWCCW   MOVE IN REWIND CCW
         BAL   11,IOOUT            GO REWIND
         CLI   OUTECB,X'7F'        SEE IF OK
         BNE   ERRWND              BRANCH IF ERROR ON REWIND
         SPACE 1
         XC    TDAREA(80),TDAREA   CLEAR I/O AREA
         MVC   TDAREA(4),=C'VOL1'  MOVE IN VOL1 INFO
         MVC   TDAREA+4(6),LABL    MOVE IN LABEL
         SPACE 1
         MVC   OUTCCW+8(8),WRLAB   MOVE IN WRITE LABEL CCW
         BAL   11,IOOUT            GO WRITE TAPE
         CLI   OUTECB,X'7F'        SEE IF WRITE OK
         BNE   WRDKER              BRANCH ERROR WRITING NEW LABEL
         SPACE 1
         XC    TDAREA(80),TDAREA   CLEAR I/O AREA
         MVC   OUTCCW+8(8),RDLBL   MOVE IN READ LABEL CCW
         BAL   11,IOOUT            GO READ NEW LABEL
         CLI   OUTECB,X'7F'        SEE IF OK
         BNE   LABCHK              BRANCH TO ERROR MESSAGE
         BAL   10,NEWMSG           GO PRINT NEW LABEL
         SPACE 1
         MVC   OUTCCW(8),WTCCW     MOVE IN TAPE MARK CCW
         BAL   11,IOOUT            GO WRITE TAPE MARK
         CLI   OUTECB,X'7F'        SEE IF WRITE OK
         BE    TMERROR             BRANCH TO ERROR MSG
         SPACE 1
         MVC   OUTCCW+8(8),RWUN    MOVE IN REWIND/UNLOAD FOR TAPE
         BAL   11,IOOUT            GO REWIND/UNLOAD FOR TAPE
         CLI   OUTECB,X'7F'        SEE IF R/U OK
         BNE   ASKAGN              GO GET NEW ROUTINE
 WTO 'I/O ERROR ATTEMPTING REWIND/UNLOAD OF TAPE - NEW LABEL OK'
         B     ASKAGN              GO GET NEW ROUTINE
ERRWND   WTO   'I/O ERROR ATTEMPTING TO REWIND TAPE'
         B     ASKAGN              GO GET NEW ROUTINE
TMERROR  WTO   'I/O ERROR ATTEMPTING TO WRITE TAPE MARK'
         B     ASKAGN              GO GET NEW ROUTINE
DSKONL   WTO   'THE DEVICE ADRS ENTERED IS ONLINE'
         B     DSKOFM              BRANCH TO OTHER MSG
DSKASNG  WTO   'THE ADRS JUST ENTERED IS ASSIGNED BY OS'
DSKOFM   WTO   '*** DEVICES USED FOR CLIP MUST BE OFFLINE ***'
         B     CLPCLR              BRANCH BACK TO START OF ROUTINE
NOTSUP   WTO   'DEVICE ADRS ENTERED IS NOT SUPPORTED FOR CLIPPING'
         B     ASKAGN              GET NEXT ROUTINE
        SPACE  5
*  SUB-ROUTINE FOR REWIND OR REWIND/UNLOAD FOR INPUT TAPE
*  LINKAGE     BAL 10,RUIN
*
RUIN     BAL   11,SEARCH           GO SEE IF SHOULD UNLOAD
         DC    C'U'                KEY LETTER FOR REWIND/UNLOAD
         DC    AL1(20)             LENGTH OF SEARCH
         BNE   RUIN1               BRANCH NO UNLOAD
         MVC   INCCW(8),RWUN       MOVE IN REWIND & UNLOAD CCW
         BAL   11,IOIN             GO PERFORM I/O
         BR    10                  BACK TO USING ROUTINE
RUIN1    BAL   11,SEARCH           GO SEE IF SHOULD REWIND
         DC    C'R'                KEY LETTER FOR REWIND
         DC    AL1(20)             LENGTH OF SEARCH
         BNE   0(10)               BACK TO USING ROUTINE
         MVC   INCCW(8),RWCCW      MOVE IN REWIND CCW
         BAL   11,IOIN             GO PERFORM I/O
         BR    10                  BACK TO USING ROUTINE
         SPACE 5
*   THIS SUB-ROUTINE IS USED TO CHECK THE READY BIT IN THE UCB OF I/O
*   DEVICES.  WHEN NOT READY, A MESSAGE IS ISSUED TO ENABLE THE DEVICE
*   WHICH WAS CHECKED.  REGISTER 2 MUST CONTAIN THE ADRS OF THE UCB.
         SPACE 1
*   LINKAGE = BAL  11,ENABLE
         SPACE 1
ENABLE   TM    6(2),X'40'          SEE IF DEVICE IS READY
         BNO   0(11)               RETURN TO USING ROUTINE
         MVC   ENMSG+26(3),13(2)   MOVE IN DEVICE TO MESSAGE
         CNOP  0,4
ENMSG    WTO   '*** ENABLE DEVICE XXX - DEBE'
         BR    11                  RETURN TO USING ROUTINE
         SPACE 5
*   SUB-ROUTINE FOR REWIND OR REWIND/UNLOAD FOR OUTPUT TAPE
*   LINKAGE    BAL 10,RUOUT
*
RUOUT    BAL   11,SEARCH           GO SEE IF SHOULD UNLOAD
         DC    C'U'                KEY LETTER FOR REWIND/UNLOAD
         DC    AL1(20)             LENGTH OF SEARCH
         BNE   RUOUT1              BRANCH NO UNLOAD
         MVC   OUTCCW(8),RWUN      MOVE IN REWIND & UNLOAD CCW
         BAL   11,IOOUT            GO PERFORM I/O
         BR    10                  BACK TO USING ROUTINE
RUOUT1   BAL   11,SEARCH           GO SEE IF SHOULD REWIND
         DC    C'R'                KEY LETTER FOR REWIND
         DC    AL1(20)             LENGTH OF SEARCH
         BNE   0(10)               BACK TO USING ROUTINE
         MVC   OUTCCW(8),RWCCW     MOVE IN REWIND CCW
         BAL   11,IOOUT            GO PERFORM I/O
         BR    10                  BACK TO USING ROUTINE
*
         SPACE 5
*
*        REWIND AND UNLOAD ROUTINE
*
RU       EQU   *
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE DRIVE
         MVC   OUTCCW+8(8),RWUN    SET UP REWIND & UNLOAD CCW
         BAL   11,IOOUT      EXECUTE THE REWIND & UNLOAD
         B     ASKAGN
*
         SPACE 5
*        ROUTINE TO WRITE TAPE MARK AND/OR CHECK EOF
*
*        ENTERED VIA BAL 10,TTEOF
TTEOF    EQU   *
         CLC   FILES+5(3),=C'ALL'     SEE IF ALL
         BNE   FLCNT     BRANCH AROUND DOUBLE FILE MK TEST
         TS    EOFSW               SET EOF SWITCH
         BZ    FLCNT               BRANCH IF NO PREVIOUS EOF
         MVI   EOJTT+1,X'F0'       SET NOP TO BRANCH FOR EOJ
FLCNT    EQU   *
         MVC   OUTCCW+8(8),WTCCW   SET UP WTM CCW
         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP
         MVC   OUTCCW+16(8),=X'0300000020000001'
         BAL   11,IOOUT            WRITE A TAPE MARK
         CLI   OUTECB,X'7F'        EVERY THING OK
         BNE   TAPERR              BRANCH ON ERROR
EOJTT    NOP   CTEOJ           GO WRITE TAPE MARK AND END ROUTINE
         CLC   FILES+5(3),=C'ALL'  SEE IF PROCESS ALL
         BE    0(10)               BACK TO ROUTINE TILL 2 EOF S
TCEOF    LH    2,FILES+6           GET NUMBER OF FILES
         BCTR  2,0                 SUBSTRACT 1
         STH   2,FILES+6           PUT NEW NUMBER BACK
         CH    2,=H'0000'          SEE IF MORE FILES
         BH    0(10)               BRANCH IF MORE
         B     CTEOJ           GO WRITE TAPE MARK FOR EOV
EOFSW    DC    X'0000'             END OF FILE SWITCH
         SPACE 4
*      THIS ROUTINE WILL ASK THE OPERATOR TO SUPPLY AN ADDRESS
*      FOR THE CARD PUNCH.
*
*      ROUTINE ENTRY= BAL 11,PUNCH
         SPACE 3
PUNCH    EQU   *
         CLC   PUNCH1(3),=3X'00'   SEE IF HAVE PUNCH ADDRESS
         BNE   0(11)               BRANCH IF HAVE ADDRESS
         WTOR  'CARD PUNCH - XXX',PUNCH1,3,REPLYECB
         WAITR ECB=REPLYECB     WAIT FOR OPERATOR
         XC    REPLYECB(4),REPLYECB      CLEAR REPLY ECB
         OC    PUNCH1(3),=C'   '    MAKE UPPER CASE
         CLC   PUNCH1(3),=C'EOJ'     SEE IF SHOULD END DEBE
         BE    ASKAGN              GO GET NEW ID
         BR    11               BACK TO USING ROUTINE
         SPACE 4
*        ROUTINE TO FIND NUMBER OF FILES WANTED
*
*        ENTRY IS  BAL 10,TPFILS
*
TPFILS   EQU   *
         XC    FILES(8),FILES      CLEAR FILES ENTRY AREA
         SPACE 2
*  THE FOLLOWING CODE IS USED FOR SEARCHING OF FILE COUNT WHEN A
*  ONE LINE ENTRY IS USED.
         SPACE 1
         LA    2,ID                GET ADRS OF SEARCH
         LA    3,L'ID-5            GET LENGTH OF SEARCH
CLCALL   TM    2(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMP                BRANCH IS ALPHAMERIC
         TM    6(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMP                BRANCH IF ALPHAMERIC
         LA    4,3                GET NUMBER OF CHARACTERS
         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC
         BNO   BUMP               BRANCH NOT ALPHAMERIC
         MVC   FILES+5(3),3(2)     MOVE IN NUMBER OF FILES OR ALL
         B     ALLBPS              BRANCH IF FOUND
BUMP     LA    2,1(2)              BUMP SEARCH ADRS
         BCT   3,CLCALL            BUMP CTR
         SPACE 2
TPFL WTOR  'HOW MANY FILES (ALL OR UP TO 999)-XXX',FILES+5,3,REPLYECB
         WAITR ECB=REPLYECB        WAIT FOR OPERATOR
         XC    REPLYECB(4),REPLYECB      CLEAR REPLY ECB
         OC    FILES+5(3),=3C' '   MAKE ENTRY UPPER CASE
ALLBPS   CLC   FILES+5(3),=C'ALL' SEE IF ALL FILES ARE TO BE PROCESSED
         BE    0(10)         GO BACK TO USING ROUTINE IF ALL
         CLC   FILES+5(3),=C'EOJ'     SEE IF FINISHED WITH ROUTINE
         BE    ASKAGN              GO GET NEXT ROUTINE
         TM    FILES+5,C'0'    SEE IF NUMBER
         BNO   OPMSG   TELL OPERATOR OF THE ERROR
         TM    FILES+6,C'0'   SEE IF NUMBER
         BNO   OPMSG   TELL OPERATOR OF THE ERROR
         TM    FILES+7,C'0'   SEE IF NUMBER
         BNO   OPMSG   TELL OPERATOR OF THE ERROR
         PACK  FILES(8),FILES(8)
         CVB   2,FILES
         ST    2,FILES+4
         BR    10                  BACK TO USING ROUTINE
OPMSG    WTO   'HOW MANY FILES ? - UP TO ''999'' OR ''ALL'''
         B     TPFL                GO TRY AGAIN
         EJECT
*  TEST TO SEE IF PRINTER HAS BEEN OPENED
         SPACE 1
OPENPRNT EQU   *
         TM    OPENSW,X'FF'
         BC    1,OPENOK
         OPEN (PRINT,(OUTPUT))
         OI    OPENSW,X'FF'
OPENOK   BR    11
OPENSW   DC    X'0000'
         SPACE 3
*  COMMON PRINT ROUTINE
         SPACE 1
TDPRINT  EQU   *
         ST    11,SV11  SAVE REG 11
         MVI   OPCODE,9            SPACE 1 AND PRINT
         PUT   PRINT,OPCODE
         LH    1,C    INCREMENT LINE COUNTER
         LA    0,1(1)
         STH   0,C
         CH    0,CLIMIT  AT END OF PAGE
         LA    11,*+8
         BH    SKIPTO1
         L     11,SV11  RESTORE REG 11
         BR    11
         SPACE 1
*  SKIP PRINTER TO CHANNEL 1
         SPACE 1
SKIPTO1  EQU   *
         MVI   OPCODE,X'8B'        SKIP TO 1
SKIPTO2  DS    0H
         MVI   TDOUTAR,C' '  BLANK PRINT LINE
         MVC   TDOUTAR+1(131),TDOUTAR
         PUT   PRINT,OPCODE
         SR    0,0
         STH   0,C  ZERO LINE COUNTER
         BR    11
         SPACE 1
*  SPACE PRINTER ONE LINE
         SPACE 1
SPACE1   EQU   *
         ST    11,SV11  SAVE REG 11
         MVI   TDOUTAR,C' '  BLANK PRINT LINE
         MVC   TDOUTAR+1(131),TDOUTAR
         MVI   OPCODE,9            SPACE 1 AND PRINT
         PUT   PRINT,OPCODE
         LH    1,C      INCREMENT LINE COUNTER
         LA    0,1(1)
         STH   0,C
         CH    0,CLIMIT  END OF PAGE
         LA    11,*+8  LOAD RETURN ADDRESS IF BRANCHING
         BH    SKIPTO1  END OF PAGE, BRANCH
         L     11,SV11  RESTORE REG 11
         BR    11
         EJECT
*  ROUTINE TO CONVERT MM INTO A SET MODE COMMAND
         SPACE 1
CONVRTMM EQU   *
         STM   2,3,SAVEUM    SAVE WORK REGISTERS
         IC    2,MM+1        GET SECOND BYTE OF MM
         TM    MM+1,X'F0'    IS IT NUMERIC
         BC    1,MMMM1       YES, BRANCH
         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC
MMMM1    SRDL  2,4           SAVE IT
         IC    2,MM          GET FIRST BYTE OF MM
         TM    MM,X'F0'      IS IT NUMERIC
         BC    1,MMMM2       YES, BRANCH
         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC
MMMM2    SLDL  2,4
         STC   2,MM          PUT MM  BACK IN HEX
         LM    2,3,SAVEUM    RESTORE REGISTERS
         BR    14
SAVEUM   DS    2F
         EJECT
***********************************************************************
*                                                                     *
*  THIS ROUTINE FINDS A UCB ADDRESS WHEN A DEVICE ADDRESS IS PROVIDED *
*  IN THE D1 AREA.  IF A UCB IS FOUND FOR THE DEVICE A CC OF ZERO IS  *
*  RETURNED TO THE USING ROUTINE.                                     *
*                                                                     *
***********************************************************************
*
*  LINKAGE IS     BAL 4,UCBLOKUP
*
*
         SPACE 1
UCBLOKUP EQU   *
         MVI   #GOTUCB,X'00'       MAKE SURE SWITCH IS RESET   MS072987
         OC    D1(3),=XL3'40'      MAKE UPPER CASE
         L     2,16                GET CVT ADRS
         USING CVTMAP,R2           ADDRESABILITY TO CVT        MS061986
         TM    CVTDCB,X'80'        Q. IS THIS AN MVS/XA SYSTEM MS061986
         BO    UCBLOKXA            A. YES IT IS                MS061986
         DROP  R2                                              MS061986
         L     3,40(2)             GET ADRS TO UCB ADRS TABLE
UCBSRH1  LH    2,0(3)              GET UCB ADRS
         LTR   2,2                 SEE IF GOOD ADRS
         BZ    UCBSRH              BRANCH NO ADDRESS
         BM    0(4)                BRANCH--- END OF TABLE
         CLI   2(2),X'FF'          SEE IF UCB
         BNE   UCBSRH              BRANCH NO UCB
         CLC   D1(3),13(2)         SEE IF UCB FOR UNIT FOUND
         BE    0(4)                BRANCH IF FOUND
UCBSRH   LA    3,2(3)              BUMP TO GET NEXT UCB ADRS
         B     UCBSRH1             BRANCH NOT END
         SPACE 3                                               MS061986
UCBLOKXA EQU   *                                               MS061986
         L     R3,CVTPTR           GET CVT ADDRESS             MS061986
         USING CVTMAP,R3           SETUP ADDRESSABILITY        MS061986
         XC    UCBWORK,UCBWORK     CLEAR WORKAREA              MS061986
         LA    R1,UCBWORK          GET ADDRESS OF WORK AREA    MS061986
         ST    R1,PARMWA           STORE ADDRESS IN PARMLIST   MS061986
         LA    R1,DEVCLASS         GET ADDRESS OF AREA CONTAIN-MS061986
*                                  ING DEVICE CLASS TO SEARCH. MS061986
         ST    R1,PARMDEVT         SAVE IN PARM LIST           MS061986
         LA    R1,ADDRUCB          ADDRESS OF RETURNED UCB     MS061986
         ST    R1,PARMUCB          STORE ADDRESS IN PARMLIST   MS061986
         OI    PARMUCB,X'80'       INDICATE END OF PARMLIST    MS061986
         SPACE 1                                               MS061986
UCBSRCH  EQU   *                                               MS061986
         USING UCBOB,R2            SETUP ADDRESSABILTY TO UCB  MS061986
         LA    R1,PARMLIST         PUT PARMLIST IN R1          MS061986
         L     R15,CVTUCBSC        GET SCAN SERVICE ADDRESS    MS061986
         BALR  R14,R15             GOTO SCAN SERVICE           MS061986
         LTR   R15,R15             Q. HAS A UCB BEEN RETURNED? MS061986
         BZ    UCBOK               A. YES A UCB HAS BEEN FOUND MS072987
         MVI   #GOTUCB,X'00'       A. NO A DEVICE NOT FOUND    MS072987
         BR    R4                  RETURN TO CALLER            MS072987
UCBOK    EQU   *                                               MS072987
         MVI   #GOTUCB,X'01'       A. INDICATE DEVICE FOUND    MS072987
         L     R2,ADDRUCB          R2==> UCB ADDRESS THAT THE  MS061986
*                                        SCAN ROUTINE RETURNED.MS061986
         CLC   D1(3),UCBNAME       Q. UNIT ADDRESS CORRECT?    MS061986
         BE    CKUCBTYP            A. YES. NOW GO SEE IF 3480  MS072987
         B     UCBSRCH             CONTINUE SEARCHING          MS061986
         SPACE 2                                               MS061986
CKUCBTYP EQU   *                                               MS072987
         TM    UCBTYP,X'78'        Q. IS IT 3480 FULL FUNCTION MS072987
         BO    SET3480             A. YES IT IS                MS072987
         TM    UCBTYP,X'33'        Q. IS IT 3480 COMPATABILITY MS072987
         BO    SET3480             A. YES IT IS                MS072987
         MVI   #3480,X'00'         A. NO SAY IT IS NOT 3480    MS072987
         BR    R4                  RETURN TO THE CALLER        MS072987
SET3480  EQU   *                                               MS072987
         MVI   #3480,X'01'         A. SAY IT IS A 3480         MS072987
         BR    R4                  RETURN TO THE CALLER        MS072987
         DROP  R2                                              MS061986
         DROP  R3                                              MS061986
         EJECT
*  ROUTINE TO ASK FOR THE INPUT TAPE
         SPACE 1
TAPINSET EQU   *
         XC    MM(5),MM            CLEAR AREA
         SPACE 2
* THE FOLLOWING CODE IS USED TO SEARCH AN INPUT TAPE ADDRESS
*  WHEN A ONE LINE ENTRY IS USED.
         SPACE 1
         LA    2,ID                GET ADDRS OF SEARCH
         LA    3,L'ID-7            GET LENGTH OF SEARCH
TPCPR    TM    2(2),X'C0'          SEE IF ALPHAMERIC
         BO    BMP                 BRANCH IF ALPHAMERIC
         TM    8(2),X'C0'          SEE IF ALPHAMERIC
         BO    BMP                 BRANCH IF ALPHAMERIC
         LA    4,5                GET NUMBER OF CHARACTERS
         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC
         BNO   BMP                BRANCH NOT ALPHAMERIC
         ST    2,INFNDAD          STORE WHERE FOUND
         ST    2,CRNTLOC           STORE LOCATION OF TAPE ADRS
         MVC   MM(5),3(2)          MOVE IN TAPE ADRS AND MODE
         BAL   11,BYWAIT           GO TO MODE & USB RTN
         B     TPINSET             GO SET MODE AND UCB
BMP      LA    2,1(2)              BUMP SEARCH ADRS
         BCT   3,TPCPR             SEARCH AGAIN
         SPACE 2
         WTOR  'INPUT TAPE - MMXXX',MM,5,REPLYECB
         BAL   11,WAITAPE    WAIT FOR A REPLY AND SET UP MODE
TPINSET  LA    11,TAPINSET         GET RETURN ADDRESS FOR MSG ROUTINE
         CLI   #GOTUCB,X'01'     Q. DID WE FIND UCB ?          MS072987
         BE    TPINSET1          A. YES WE DID                 MS072987
         B     NODEVICE          A. NO WE DID NOT              MS072987
TPINSET1 EQU   *                                               MS072987
         TM    MM+4,X'BF'          SEE IF INPUT ERROR
         BZ    INPTEROR            BRANCH IF INPUT ERROR
         MVC   INTRTCH(1),MM       SET UP TAPE'S DCB
         MVI   INDEVT,X'81'
         LA    11,TAPINSET             GET RETURN ADDRESS
         CLI   18(2),X'80'       IS IT A TAPE (2 POINTS TO UCB)
         BNE   NTPMSG              BRANCH IF NOT A TAPE
         TM    SYSTYP,X'40'        SEE IF PCP
         BO    NCHECK              BRANCH IF PCP
         TM    3(2),X'08'          IS IT BEING USED
         BO    ASNGDMG             BRANCH IF BEING USED
         TM    3(2),X'80'          SEE IF OFFLINE
         BO    ONLINE              BRANCH IF ONLINE
NCHECK   EQU   *
         BAL   11,ENABLE           SEE IF SHOULD PRINT ENABLE MSG
         ST    2,INDEBMOD          STORE UCB ADDRESS IN DEB
         CLI   #3480,X'01'         Q. IS IT A 3480 DEVICE?     MS072987
         BE    INDEB80             A. YES IT IS                MS072987
         MVC   INDEBMOD(1),MM      PUT SET MODE CMD IN DEB
         B     SETINIOB                                        MS072987
INDEB80  EQU   *                                               MS072987
         MVC   INDEBMOD(1),=X'00'  SET DEB TO X'00' FOR 3480   MS072987
SETINIOB EQU   *                                               MS072987
         OI    INIOB,X'40'         SET ON CHAINING
         MVC   INCCW(1),MM       PUT SET MODE IN CCW
         MVC   INCCW+1(7),=X'00000060000001'
         BR    10
INPTEROR WTO 'FORMAT ERROR - RETYPE LAST ENTRY'
         B     TAPINSET            GO TRY AGAIN
NTPMSG   EQU   *
         WTO 'THE ADDRESS ENTERED IS NOT A TAPE DRIVE'
         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE
ASNGDMG  EQU   *
         WTO 'THE TAPE ADDRESS JUST ENTERED IS ASSIGNED BY THE SYSTEM'
         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE
         SPACE 3
ONLINE   EQU   *
     WTO   'THE TAPE SPECIFIED IS ONLINE - SHOULD BE OFFLINE FOR DEBE'
         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE
         SPACE 3
*        BLANK OUT BAD TAPE ADDRESS FOR RETRY
         SPACE 1
CLR      L     2,CRNTLOC           GET LOCATION OF TAPE ADDRESS
         LTR   2,2                 SEE IF DEVICE ADRS ENTERED
         BZ    0(11)               BRANCH IF NO ADDRESS
         XC    CRNTLOC,CRNTLOC     CLEAR LOCATION OF TAPE ADRS
         MVC   3(5,2),=CL5' '      MOVE IN BLANKS
         BR    11                  BRANCH TO USING ROUTINE
         SPACE 3
*  ROUTINE TO ASK FOR THE OUTPUT TAPE
         SPACE 1
TPOUTSET EQU   *
         XC    MM(5),MM            CLEAR AREA
         SPACE 2
*  THE FOLLOWING CODE IS USED TO SEARCH AN OUTPUT TAPE ADDRESS WHEN
*  A ONE LINE ENTRY IS USED
         SPACE 1
         LA    2,ID+L'ID-9         GET ADRS OF SEARCH
         LA    3,L'ID-6            GET LENGTH OF SEARCH
TPCPAR   TM    2(2),X'C0'          SEE IF ALPHAMERIC
         BO    BMPIT               BRANCH IF ALPHAMERIC
         TM    8(2),X'C0'          SEE IF ALPHAMERIC
         BO    BMPIT               BRANCH IF ALPHAMERIC
         LA    4,5                GET NUMBER OF CHARACTERS
         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC
         BNO   BMPIT              BRANCH NOT ALPHAMERIC
         CL    2,INFNDAD          SEE IF SAME ADDRESS
         BE    NOTTHR             BRANCH IF SAME ADDRESS
         ST    2,CRNTLOC           STORE LOCATION OF TAPE ADRS
         MVC   MM(5),3(2)          MOVE IN TAPE ADRS
         BAL   11,BYWAIT           GO SET UP MODE & UCB
         B     TPOTSET             BRANCH AROUND CNT
BMPIT    BCT   2,*+4               SUB 1
         BCT   3,TPCPAR SEARCH AGAIN
         SPACE 2
NOTTHR   WTOR  'OUTPUT TAPE - MMXXX',MM,5,REPLYECB
         BAL   11,WAITAPE    WAIT FOR REPLY  AND SET UP MM
TPOTSET  LA    11,TPOUTSET         GET RETURN ADDRESS FOR MSG ROUTINE
         CLI   #GOTUCB,X'01'     Q. DID WE FIND UCB FOR DEVICE?MS072987
         BE    TPOTSET1          A. YES WE DID                 MS072987
         B     NODEVICE          A. NO WE DID NOT              MS072987
TPOTSET1 EQU   *                                               MS072987
         TM    MM+4,X'BF'          SEE IF INPUT ERROR
         BZ    OUTPTERR            BRANCH IF INPUT ERROR
         MVC   OUTTRTCH(1),MM
         MVI   OUTDEVT,X'81'
         LA    11,TPOUTSET             GET RETURN ADDRESS
         CLI   18(2),X'80'       IS IT A TAPE
         BNE   NTPMSG              BRANCH IF NOT A TAPE
         TM    SYSTYP,X'40'        SEE IF PCP
         BO    NTCHECK             BRANCH IF PCP
         TM    3(2),X'08'          IS IT BEING USED
         BO    ASNGDMG             BRANCH IF BEING USED
         TM    3(2),X'80'          SEE IF OFFLINE
         BO    ONLINE              BRANCH IF ONLINE
NTCHECK  EQU   *
         BAL   11,ENABLE           SEE IF SHOULD PRINT ENABLE MSG
         ST    2,OUTDEBMD          STORE UCB ADDRESS IN DEB
         CLI   #3480,X'01'       Q. IS IT A 3480 DEVICE        MS072987
         BE    OUTDEB80          A. YES IT IS                  MS072987
         MVC   OUTDEBMD(1),MM
         B     SETOTIOB                                        MS072987
OUTDEB80 EQU   *                                               MS072987
         MVC   OUTDEBMD(1),=X'00' SET DEB MODE TO X'00'        MS072987
SETOTIOB EQU   *                                               MS072987
         OI    OUTIOB,X'40'      SET ON CHAINING FLAG
         MVC   OUTCCW(1),MM      BUILD SET MODE COMMAND
         MVC   OUTCCW+1(7),=X'00000060000001'
         BR    10
OUTPTERR WTO 'FORMAT ERROR - RETYPE LAST ENTRY'
         B     TPOUTSET            GO ASK FOR OUTPUT TAPE AGAIN
         SPACE 2
*  COMMON I/O ROUTINE FOR INPUT
         SPACE 1
IOIN     EQU   *
         XC    INECB(4),INECB
         EXCP  INIOB
         WAIT  ECB=INECB
         NI    INDCB+44,X'3F'
         BR    11
         SPACE 1
*  COMMON WAIT FOR ALL REPLIES
WAITANS  EQU   *
         WAIT  ECB=REPLYECB
         XC    REPLYECB,REPLYECB   CLEAR ECB
         BR    11
         SPACE 2
*  COMMON I/O ROUTINE FOR OUTPUT
         SPACE 1
IOOUT    EQU   *
         XC    OUTECB(4),OUTECB
         EXCP  OUTIOB
         WAIT  ECB=OUTECB
         NI    OUTDCB+44,X'3F'
         BR    11
         SPACE 2
*  ROUTINE TO WAIT ON THE REPLY AND CONVERT THE MM INTO A SET MODE
WAITAPE  EQU   *
         WAIT  ECB=REPLYECB
         XC    REPLYECB(4),REPLYECB
         OC    MM(5),=C'     '     MAKE ALL CAPS
         CLC   MM(3),=C'EOJ'
         BE    ASKAGN
BYWAIT   MVC   TDOUTAR(5),MM  GET MMXXX FOR PRINTING ON LISTING
         MVI   TDOUTAR+5,C' '
         MVC   TDOUTAR+6(126),TDOUTAR+5
         MVC   TDOUTAR+5(24),=CL24' - MMXXX FOR INPUT TAPE.'
         MVC   TDOUTAR+50(47),=CL47'*** THIS IS NOT A DATA RECORD FROM X
               THE TAPE ***'
         BAL   14,CONVRTMM
         OI    MM,X'03'            SET MODE COMMAND NOW IN MM
         MVC   D1(3),XXX
         MVI   DEVCLASS,UCB3TAPE   SET TO SEARCH TAPE UCB ONLY MS061986
         BAL   4,UCBLOKUP
         BR    11
         EJECT
*  THIS SUB-ROUTINE IS USED TO CHECK FOR ALPHAMERIC CHARACTERS
*  IN THE ROUTINE ID AREA.  IF THEY ARE FOUND A CC OF 3
*  IS RETURNED.      REG 2 = SEARCH AREA   REG 4 = NUMB OF CHARACTERS
         SPACE 1
*                   LINKAGE  IS   BAL 11,ALPMRIC
ALPMRIC  LR    5,2                 GET ADRS OF SEARCH
ALPAGN   TM    3(5),X'C0'          SEE IF NOT ALPHA MERIC
         BNO   0(11)           RETURN WITH NOT CC 3 IF NOT ALPHAMERIC
         LA    5,1(5)              BUMP ADRS OF SEARCH
         BCT   4,ALPAGN            BRANCH NOT FINISHED
         B     0(11)               RETURN WITH CC OF 3 IF ALPHAMERIC
         SPACE  3
*
*
*  THIS SUB-ROUTINE IS USED TO INFORM THE OPERATOR OF THE
*  NON-EXISTANCE OF DEVICE ADDRESS ENTERED VIA THE CONSOLE.
*
*  LINKAGE-  ROUTINE ENTERED VIA BRANCH, RETURN ADDRESS MUST
*    BE PROVIDED IN REGISTER 11 PRIOR TO BRANCHING TO SUB-ROUTINE.
*
NODEVICE WTO   'UCB NOT FOUND FOR DEVICE ADDRESS ENTERED'
         B     CLR                 GO CLEAR BAD ADRS
         SPACE 2
*  THIS SUB-ROUTINE IS USED TO SEARCH THE ROUTINE ID FIELD FOR THE
*  NUMBER OF FILES WHICH MUST BE FORWARD OR BACK SPACED.
*  A CONDITION CODE OF 3 IS PASSED BACK TO THE USING ROUTINE IF A FILE
*  COUNT IS FOUND. LINKAGE = BAL 10,NBFILS
         SPACE 2
NBFILS   XC    FILES(8),FILES      CLEAR FILES ENTRY AREA
         LA    2,ID                GET ADDRESS OF SEARCH
         LA    3,L'ID-5            GET LENGTH OF SEARCH
FLCNTS   TM    2(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMPFC              BRANCH IF ALPHAMERIC
         TM    6(2),X'C0'          SEE IF ALPHAMERIC
         BO    BUMPFC              BRANCH IF ALPHAMERIC
         LA    4,3                 GET NUMBER OF CHARACTERS
         BAL   11,ALPMRIC          GO SEE IF ALPHAMERIC
         BNO   BUMPFC              BRANCH IF NOT ALPHAMERIC
         MVC   FILES+5(3),3(2)     MOVE FILE CNT TO CNT AREA
         BR    10                  RETURN TO USING ROUTINE WITH CC=3
BUMPFC   LA    2,1(2)              BUMP SEARCH ADDRESS
         BCT   3,FLCNTS            LOOK AGAIN
         BR    10                RETURN TO USING ROUTINE WITH NOT CC=3
         SPACE 2
         SPACE 5
APPEND   BR    14
         EJECT
*  SEE THE OS SYSTEM CONTROL BLOCKS MANUAL FOR THE FORMATS OF THE
*  FOLLOWING DCB'S, DEB'S, ECB'S, AND IOB'S.
         SPACE 1
*  DEB FOR INPUT DATA SET
         SPACE 1
         CNOP  0,4                      ALIGN
INIOVEC  EQU   *
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    3F'0'
         DC    X'06000000'
INDEB    DS    0F
         DC    F'0'
         DC    X'04'
         DC    X'000000'
         DC    X'C0000000'
         DC    X'30000000'
         DC    2F'0'
         DC    X'0F'
         DC    AL3(INDCB)
INEXSC   DC    X'02'
         DC    AL3(INIOVEC)
INDEBMOD DC    X'00'
INDEBUCB DC    X'000000'
INRESV   DC    X'0000'             RESERVED
INCYSEX  DC    X'0000'             CYL ADRS OS START OF EXTENT
INTKSEX  DC    X'0000'             TRK ADRS OF START OF EXTENT
INCYDEX  DC    X'0000'             CYL ADRS OF END OF EXTENT
INTRKDX  DC    X'0000'             TRK ADRS OF END OF EXTENT
INTKEXT  DC    X'0000'             NUMB OF TRKS TO EXTENT
         SPACE 1                       9
*  DCB FOR INPUT DATA SET
INDCB    DS    0F
         DC    4F'0'
INTRTCH  EQU   *
INMODSTK EQU   *
         DC    X'00'
INDEVT   DC    X'00'
INDENS   DC    X'00'
         DC    X'00'
         DC    5F'0'
         DC    H'0'
         DC    BL2'1101000000001000'
INDBAD   DC    A(INDEB)
         DC    X'10000000'
         DC    5F'0'
         SPACE 1
*  DEB FOR OUTPUT DATA SET
         SPACE 1
OUTIOVEC EQU   *
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    3F'0'
         DC    X'06000000'
OUTDEB   DS    0F
         DC    F'0'
         DC    X'17000000'
         DC    X'C0000000'
         DC    X'30000000'
         DC    2F'0'
         DC    X'0F'
         DC    AL3(OUTDCB)
OUTEXS   DC    X'02'
         DC    AL3(OUTIOVEC)
OUTDEBMD DC    X'00'
OUTDBUCB DC    X'000000'
OUTRESV  DC    X'0000'             RESERVED
OUTCYSEX DC    X'0000'             CYL ADRS OF START OF EXTENT
OUTTKSEX DC    X'0000'             TRK ADRS OF START OF EXTENT
OUTCYDEX DC    X'0000'             CYL ADRS OF END OF EXTENT
OUTTRKDX DC    X'0000'             TRK ADRS OF END OF EXTENT
OUTTKEXT DC    X'0001'             NUMB OF TRKS TO EXTENT
         SPACE 2
*  DCB FOR OUTPUT DEVICE
         SPACE
         DS    0F
OUTDCB   DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
OUTTRTCH EQU   *
OUTMDSTK EQU   *
         DC    X'00'
OUTDEVT  DC    X'00'
OUTDENS  DC    X'00'
         DC    X'00'
OUTBUFNO DC    X'00'
OUTBUFCB DC    X'000000'
OUTBUFL  DC    X'0000'
OUTDSORG DC    X'4000'
OUTIOBAD DC    A(OUTIOB)
         DC    X'00'
OUTEODAD DC    X'000000'
OUTRECFM DC    X'00'
OUTEXLST DC    X'000000'
OUTTIOT  DC    X'0000'
OUTMACRE DC    X'0000'
OUTFLGS  DC    X'00'
OUTDEBAD DC    AL3(OUTDEB)
OUTFLOGS DC    X'00'
         DC    X'000000'
OUTOPTCD DC    X'00'
         DC    X'000000'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         SPACE 1
         SPACE 1
*  ECB FOR INPUT DATA SET
         SPACE 1
INECB    DC    F'0'
         SPACE 1
*  IOB FOR INPUT DATA SET
         SPACE 1
INIOB    DS    0F
         DC    X'4200'
INSENS   DC    H'0'
         DC    X'7F'
         DC    AL3(INECB)
INSTAT   DC    2F'0'
         DC    A(INCCW)
         DC    A(INDCB)
         DC    F'0'
         DC    H'1'
         DC    H'0'
INDASD   DC    X'00'
INSEEK   DC    XL7'00'
         SPACE 1
*  ECB FOR OUTPUT DATA SET
         SPACE 1
OUTECB   DC    F'0'
         SPACE 1
*  IOB FOR OUTPUT DATA SET
         SPACE 1
OUTIOB   DS    0F
         DC    X'4200'
OUTSENS  DC    H'0'
         DC    X'7F'
         DC    AL3(OUTECB)
OUTSTAT  DC    2F'0'
         DC    A(OUTCCW)
         DC    A(OUTDCB)
         DC    XL4'00'
         DC    H'1'
         DC    H'0'
OUTDASD  DC    X'00'
OUTSEEK  DC    X'00000000000003'        BBCCHHR
*        IOB FOR PRINTER
         SPACE
         DS    0F
PRTIOB   EQU   *
         DC    X'0200'
PRTSNS   DC    H'0'
ECBCD    DC    X'7F'
         DC    AL3(PRTECB)
PRTSTAT  DC    2F'0'
         DC    A(PRTCCW)
         DC    A(PRINTAPG)
RPSM     DC    F'0'
BLC1     DC    F'0'
PMBBC    DC    F'0'
CHHR     DC    F'0'
         SPACE
*        ECB FOR PRINTER
         SPACE
PRTECB   DC    F'0'
         SPACE
         SPACE 1
*  CONSTANTS AND CCW'S      * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
READER1  DC    3X'00'              ADDRESS AREA FOR CARD READER
PUNCH1   DC    3X'00'              ADDRESS AREA FOR CARD PUNCH
         SPACE 3
TAPE     DC    C'  '               MODE FOR TAPE ADRS
DISK     DC    C'    '             DISK AND TAPE ADRS
         SPACE 3
*  CCW'S FOR OUTPUT DATA SET
         SPACE 1
OUTCCW   DS    5D
*  CCW'S FOR INPUT DATA SET
         SPACE 1
INCCW    DS    5D
         SPACE 3
FILES    DC    D'0'                STORAGE + WORK AREA
SFCCW    CCW   X'3F',SFCCW,X'20',1
BFCCW    CCW   X'2F',SFCCW,X'20',1
SRCCW    CCW   X'37',BSCCW,X'20',1
BSCCW    CCW   X'27',BSCCW,X'20',1
WRLAB    CCW   1,TDAREA,X'20',80   WRITE TAPE LABEL CCW
CTCCW    CCW   X'41',TDAREA,X'20',80
RDLBL    CCW   2,TDAREA,X'00',80   READ LABEL CCW
RWCCW    CCW   7,RWCCW,X'20',1
TDINCCW  CCW   2,TDAREA,X'20',32767
TTCCWOUT CCW   1,TDAREA,X'20',32767
WTCCW    CCW   31,TDAREA,X'20',1
RWUN     CCW   X'0F',RWUN,X'20',1
NOOP     CCW   X'03',*,X'20',1           NOOP CCW
RDLABL   CCW   X'07',OUTSEEK,X'40',6      SEEK
SHIDE    CCW   X'31',OUTSEEK+2,X'40',5  SID=
TIC      CCW   X'08',OUTCCW+SHIDE-RDLABL,X'40',1  TIC
CLPCCW   CCW   X'06',TDAREA,X'00',80   READ OR WRITE DATA
PRTCCW   CCW   X'03',TDOUTAR,X'00',132   PRINT DATA
         SPACE 3
PRINT DCB DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FM,LRECL=133,        X
               BLKSIZE=133
         SPACE 3
PRINTAPG DCB   DDNAME=SYSPRINT,MACRF=E,DSORG=PS,RECFM=FM,              X
               IOBAD=PRTIOB
         SPACE 3
TDWK     DS    D
SAVEAREA DC    18F'0'
TDPTABLE DC    C'0123456789ABCDEF'
         DS    0F
MESSAGE  DC    AL2(THERE-*)     MESSAGE LENGTH
         DC    AL2(0)
COUNT    DC    C'NUMBER '
         DC    C'RECORDS PROCESSED'
THERE    EQU   *
D1       DC    C'0'
D2       DC    C'0'
D3       DC    C'0'
ID       DC    CL40'00'
MM       DC    C'00'
XXX      DC    C'000'
OF       DC    F'15'
EOJECB   DC    F'0'                    EOJ ECB
REPLYECB DC    F'0'
INFNDAD  DC    F'0'               STORE WHERE INPUT TAPE ADRS FOUND
CRNTLOC  DC    F'0'                STORAGE AREA FOR LST TAPE ADRS FND
         SPACE 3
GETMAIN1 DC    F'0'                ADDADDRESS FROM GETMAIN FOR DEB
PGMDEB1  DC    F'0'                ADDRESS OF DEB IN PGM
OLDEB1   DC    F'0'                ADDRESS OF DEB IN PGM FOR NEW DEB
         SPACE 2
GETMAIN2 DC    F'0'                ADDRESS FROM GETMAIN FOR DEB
PGMDEB2  DC    F'0'                ADDRESS OF DEB IN PGM
OLDEB2   DC    F'0'                ADDRESS OF DEB IN PGM
BLANK    DC    F'0'                WORD OF ZEROS
OPCODE   DC    X'00'
TDOUTAR  DS    CL132
RECCNT   DC    X'00000F'
COND1    DC    X'1F'
RECHDG   DC    C'REC '
         DC    X'2020202020'
         DC    C', LENGTH '
         DC    X'2020202020'
SV11     DS    F
C        DC    H'0'
CLIMIT   DC    H'58'
SYSTYP   DC    X'00'               SYSTEM TYPE STORAGE AREA
*                                  X'10' = MVT
*                                  X'20' = MFT
*                                  X'40' = PCP
*
         SPACE 3
PARMLIST DS    3F                  PARMLIST FOR UCB SCANNING   MS061986
         ORG   PARMLIST                                        MS061986
PARMWA   DS    F                   ADDRESS OF 100 BYTE WORKAREAMS061986
PARMDEVT DS    F                   ADDRESS OF DEVICE CLASS     MS061986
PARMUCB  DS    F                   ADDRESS OF RETURNED UCB     MS061986
         SPACE 2                                               MS061986
#GOTUCB  DC    X'00'               SWITCH TO INDICATE UCB FOUNDMS072987
*                                  X'00' = UCB NOT FOUND       MS072987
*                                  X'01' = UCB FOUND           MS072987
#3480    DC    X'00'               SWITCH TO INDICATE IF 3480  MS072987
*                                  X'00' = NOT 3480            MS072987
*                                  X'01' = 3480                MS072987
DEVCLASS DS    CL1                 DEVICE CLASS TO SEARCH FOR  MS061986
ADDRUCB  DS    F                   RETURNED UCB ADDRESS        MS061986
         DS    0D                                              MS061986
UCBWORK  DS    CL100               UCB WORKAREA                MS061986
         LTORG
         SPACE 3
TDAREA2  DS    CL101
TDAREA   DS    132CL250
         EJECT                                                 MS061986
R0       EQU   0                                               MS061986
R1       EQU   1                                               MS061986
R2       EQU   2                                               MS061986
R3       EQU   3                                               MS061986
R4       EQU   4                                               MS061986
R5       EQU   5                                               MS061986
R6       EQU   6                                               MS061986
R7       EQU   7                                               MS061986
R8       EQU   8                                               MS061986
R9       EQU   9                                               MS061986
R10      EQU   10                                              MS061986
R11      EQU   11                                              MS061986
R12      EQU   12                                              MS061986
R13      EQU   13                                              MS061986
R14      EQU   14                                              MS061986
R15      EQU   15                                              MS061986
         DSECT                                                 MS061986
         IEFUCBOB                                              MS061986
         EJECT                                                 MS061986
         CVT DSECT=YES                                         MS061986
         END   DEBE
