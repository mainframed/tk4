/* REXX **************************************************************/
/*                                                                   */
/* EXEC:      XNUCVPR1                                               */
/*                                                                   */
/* WRITTEN:   Oct 1992 by Richard Haydock (Sec Dev)                  */
/*                                                                   */
/* CHANGED:   mmm yyyy by ?                                          */
/*                                                                   */
/* CALLED BY: ISPF skeleton NUCVPRF in batch mode                    */
/*                                                                   */
/* PURPOSE:   Create a new ISPF profile based on an old one          */
/*            Processing is as follows:                              */
/*                                                                   */
/*            a) Use LISTDSI on the old profile to find how much     */
/*               space and directory space is in use. Allocate a     */
/*               new profile dataset at least this big.              */
/*                                                                   */
/*            b) Copy members from 'olddsn' to 'newdsn' but exclude  */
/*               members known to redundant                          */
/*                                                                   */
/*            c) Process members in 'newdsn' whose names end in PROF */
/*               as ISPF tables as follows:                          */
/*                                                                   */
/*               - Do not process AAAAPROF or BLG0PROF               */
/*               - Remove variables which should only be in ROVTABL  */
/*               - Make sure there is a variable ZPROFAPP which is   */
/*                 set to ROVTABL                                    */
/*               - Change occurrences of 'olduser'  to 'newuser'     */
/*               - Change occurrences of 'oldgroup' to 'newgroup'    */
/*                                                                   */
/*            d) Process members TSO1, TSO2 and TSO3 as follows:     */
/*                                                                   */
/*               - Create a backup member first (backup TSO1 as      */
/*                 TSO1BU etc)                                       */
/*               - Change occurrences of 'olduser'  to 'newuser'     */
/*               - Change occurrences of 'oldgroup' to 'newgroup'    */
/*                                                                   */
/*            e) Leave other members unaltered                       */
/*                                                                   */
/* REXX **************************************************************/

arg olddsn newgroup newuser system

parse var olddsn oldgroup "." olduser "." rubbish
newdsn = newgroup"."newuser"."system".ISPPROF.NEW"

  /*******************************************************************/
  /*                                                                 */
  /*      This is a list of variables which should be ABSENT from    */
  /*      profile members (except for AAAAPROF)                      */
  /*                                                                 */
  /*******************************************************************/

exclude_list = "PROFAPP Z#S Z#ACCT ZPP#ACCT ZCC#ACCT ZSY#ACCT" ,
               "ZPJ#ACCT Z#GROUP ZSYSNAME SYSID"

X = LISTDSI(olddsn "DIRECTORY")

say ""
say "**************************************************************"
say "*** Beginning execution of ISPF profile conversion utility ***"
say "**************************************************************"
say ""
say "Dataset" olddsn "will be processed"
say ""
say "The new profile information will be in" newdsn

select
  when sysunits = "BLOCK" then
    do
      factor = 47000   % sysblksize + 1
      newpri = sysused % factor     + 1
    end

  when sysunits = "TRACK"    then newpri = sysused

  when sysunits = "CYLINDER" then newpri = sysused * 15

  otherwise nop

end

if newpri < 5 then newpri = 5
newsec = newpri % 5

if sysudirblk // 45 = 0
  then
    newdir  = sysudirblk
  else
    newdir  = ( sysudirblk % 45 + 1 ) * 45

say ""
say "Deleting old copy of" newdsn "(if it exists)"
say ""

"DELETE" newdsn

"ALLOC F(TEMPPROF) DA("newdsn") NEW UNIT(SYSALLDA),
TRACKS SPACE("newpri","newsec") LRECL(80) CATALOG,
RECFM(F B) BLKSIZE(15760) DSORG(PO) DIR("newdir") REUS"

if rc ^= 0 then
  do
    say "Error creating new profile dataset - RC" rc
    exit
  end

"FREE F(TEMPPROF)"

say ""

Address ISPEXEC
"CONTROL ERRORS RETURN"

/*********************************************************************/
/*                                                                   */
/*        Copy selected members to new ISPPROF dataset initially     */
/*                                                                   */
/*********************************************************************/

"LMINIT   DATAID(dataid1) DATASET("olddsn")"
"LMOPEN   DATAID("dataid1")"

"LMINIT   DATAID(dataid2) DATASET("newdsn")"
"LMCLOSE  DATAID("dataid2")"

mem = "        "                            /* Set to start          */
do forever                                  /* Process all members   */
  "LMMLIST  DATAID("dataid1") MEMBER(mem) STATS(YES)"
  if rc ^= 0 then leave                     /* No members left       */

  memlen = length(mem)

  select
    when substr(mem,memlen-3,4) = "EDRT" then iterate
    when substr(mem,1,3) = "CSY"  then iterate
    when substr(mem,1,4) = "CTLI" then iterate
    when substr(mem,1,4) = "FAXE" then iterate
    when substr(mem,1,3) = "ICQ"  then iterate
    when substr(mem,1,4) = "PDSM" then iterate
    when substr(mem,1,3) = "U01"  then iterate
    otherwise nop
  end                                       /* of select             */

  "LMCOPY FROMID("dataid1") FROMMEM("mem") TODATAID("dataid2")",
                             "TOMEM("mem") REPLACE"

  if mem = "TSO1" × mem = "TSO2" × mem = "TSO3" then
    do
      membu = word(mem,1) ×× "BU"
      membu = left(membu,8)
      "LMCOPY FROMID("dataid1") FROMMEM("mem") TODATAID("dataid2")",
                                 "TOMEM("membu") REPLACE"
      if rc = 0
        then
          say "backup copy of" mem "created in member" membu
        else
          say "ERROR - failed to create backup of member" mem
    end

end                                         /* of do forever         */

/*********************************************************************/
/*                                                                   */
/*            Free files                                             */
/*                                                                   */
/*********************************************************************/

"LMMLIST  DATAID("dataid1") OPTION(FREE)"   /* Tidy up & free I/P    */
"LMCLOSE  DATAID("dataid1")"
"LMFREE   DATAID("dataid1")"

"LMFREE   DATAID("dataid2")"

/*********************************************************************/
/*                                                                   */
/*            Set up LIBDEF ready for table processing               */
/*                                                                   */
/*********************************************************************/

"LIBDEF   NEWPROF DATASET ID("newdsn") COND"

/*********************************************************************/
/*                                                                   */
/*            Scan through dataset, member by member                 */
/*                                                                   */
/*********************************************************************/

"LMINIT   DATAID(DATAID) DATASET("newdsn")"
"LMOPEN   DATAID("dataid")"
mem = "        "

do forever                                  /* Process all members   */
  "LMMLIST  DATAID("dataid") MEMBER(mem) STATS(YES)"
  if rc ^= 0 then leave                     /* No members left       */

  table  = word(mem,1)                      /* Remove trailing spaces*/
  tablen = length(table)

  select

    when table = "AAAAPROF" then nop

    when table = "BLG0PROF" then nop

    when substr(table,tablen-3,4) = "PROF"
      then
        process_rc = process_profile(table) /* Check table           */

    when table = "TSO1" × table = "TSO2" × table = "TSO3" then
      do
        address TSO
        process_rc = process_tsoparm(table) /* Check TSO parms       */
        address ISPEXEC
      end

    otherwise nop

  end

end

"LMMLIST  DATAID("dataid") OPTION(FREE)"    /* Tidy up & free library*/
"LMCLOSE  DATAID("dataid")"
"LMFREE   DATAID("dataid")"

"LIBDEF   NEWPROF"

say ""
say "**************************************************************"
say "*** End of execution of ISPF profile conversion utility    ***"
say "**************************************************************"
say ""

exit 0

/*********************************************************************/
/*                                                                   */
/* Routine:   process_profile                                        */
/*                                                                   */
/* Called by: main line                                              */
/*                                                                   */
/* Purpose:   Process an ISPF table                                  */
/*                                                                   */
/*********************************************************************/

process_profile:

  arg table

  say ""
  say "*** Processing table" table "***"

  changed = "N"                             /* not changed as yet    */

  "TBEND   " table
  "TBOPEN  " table "LIBRARY(NEWPROF)"

  if rc ^= 0 then
    do
      say "Bad return from TBOPEN of" table "- RC was" rc
      return 8
    end

  "TBQUERY " table "ROWNUM(trows)"
  if trows ^= 1 then
    do
      say "Unusual PROF member found. Should have 1 row but has" trows
      return 12
    end

  "TBSKIP  " table
  "TBGET   " table "SAVENAME(varlist)"      /* Read in variables     */

  /*******************************************************************/
  /*                                                                 */
  /*      Check each variable in VARLIST as follows:                 */
  /*                                                                 */
  /*    - Add/replace correct value of ZPROFAPP if necessary         */
  /*                                                                 */
  /*    - Discard if it should only be in ROVTABL                    */
  /*                                                                 */
  /*    - If not discarded, if <olduser> found, replace by <newuser> */
  /*                                                                 */
  /*******************************************************************/

  zprofapp = "ROVTABL"
  parse var varlist "(" varlist ")"
  x = pos("ZPROFAPP",varlist)
  if x = 0 then
    do
      varlist = varlist ×× " ZPROFAPP"
      say "ZPROFAPP variable added to table" table
      changed = "Y"
    end

  new_varlist = "("
  do forever
    parse var varlist temp_var " " varlist

    if temp_var = "" then
      do
        new_len = length(new_varlist)
        if substr(new_varlist,new_len,1) = " "
          then
            new_varlist = delstr(new_varlist,new_len,1)
        leave
      end

  /*******************************************************************/
  /*                                                                 */
  /*      check remaining characters do not begin with " "           */
  /*                                                                 */
  /*******************************************************************/

    do while substr(varlist,1,1) = " "
      if length(varlist) = 0 then leave
      varlist = delstr(varlist,1,1)
    end

    if wordpos(temp_var,exclude_list) = 0   /* Not in exclusion list */
      then
        nop
      else
        do
          say "Variable" temp_var "excluded from table" table
          changed = "Y"
          iterate
        end

    varval = value(temp_var)

  /*******************************************************************/
  /*                                                                 */
  /*      changed all olduser-newuser within a variable              */
  /*                                                                 */
  /*******************************************************************/

  if olduser = newuser
    then
      nop
    else
      do forever
        x = pos(olduser,varval)
        if x = 0 then leave

        changed = "Y"

        say "Changing" olduser "to" newuser "for variable" temp_var

        tempval = substr(varval,1,x-1)      /* olduser  -> newuser   */
        tempval = tempval ×× newuser
        copypos = x + length(olduser)
        copylen = length(varval) + 1 - x - length(olduser)
        varval  = tempval ×× substr(varval,copypos,copylen)

        interpret temp_var " = varval"

      end                                   /* of do forever         */

  /*******************************************************************/
  /*                                                                 */
  /*      changed all oldgroup-newgroup within a variable            */
  /*                                                                 */
  /*******************************************************************/

  if oldgroup = newgroup
    then
      nop
    else
      do forever

        x = pos(oldgroup,varval)
        if x = 0 then leave

        changed = "Y"

        say "Changing" oldgroup "to" newgroup "for variable" temp_var

        tempval = substr(varval,1,x-1)      /* oldgroup -> newgroup  */
        tempval = tempval ×× newgroup
        copypos = x + length(oldgroup)
        copylen = length(varval) + 1 - x - length(oldgroup)
        varval  = tempval ×× substr(varval,copypos,copylen)

        interpret temp_var " = varval"

      end                                   /* of do forever         */

    if varlist ^= ""
      then
        new_varlist = new_varlist ×× temp_var ×× " "
      else
        do
          new_varlist = new_varlist ×× temp_var
          leave
        end

  end                                       /* of do forever         */
  varlist = new_varlist ×× ")"

  if changed = "N" then
    do
      say "no changes made to member" table
      "TBEND   " table                      /* Nothing to update     */
    end
  else
    do
      say "writing back changed parameters to member" table
      "TBPUT   " table "SAVE" ×× varlist    /* Write back variables  */
      if rc ^= 0
        then
          say "ERROR - Could not save changes for member" table
      "TBCLOSE " table "LIBRARY(NEWPROF)"   /* Close the table       */
    end

return 0

/*********************************************************************/
/*                                                                   */
/* Routine:   process_tsoparm                                        */
/*                                                                   */
/* Called by: main line                                              */
/*                                                                   */
/* Purpose:   Process a set of TSO parameters                        */
/*                                                                   */
/*********************************************************************/

process_tsoparm:

  arg table

  changed = "N"
  say ""
  say "*** Processing TSO parameters in" table "***"

  iofile = newdsn ×× "(" ×× table ×× ")"
  "ALLOC F(IOFILE) DA(" ×× iofile ×× ") SHR REUS"

  "EXECIO * DISKR IOFILE (FINIS STEM IOFILE. "

  /*******************************************************************/
  /*                                                                 */
  /*      Change all olduser -> newuser                              */
  /*                                                                 */
  /*******************************************************************/

  if olduser = newuser
    then
      nop
    else
      do count = 1 to iofile.0

        if substr(iofile.count,1,5) ^= "ALLOC" then iterate

        x = pos(olduser,iofile.count)
        if x = 0 then iterate

        changed = "Y"

        say "Changing" olduser "to" newuser "for" iofile.count

        temprec = substr(iofile.count,1,x-1) /* olduser -> newuser   */
        temprec = temprec ×× newuser
        copypos = x + length(olduser)
        copylen = 81 - x - length(olduser)
        temprec = temprec ×× substr(iofile.count,copypos,copylen)
        iofile.count = left(temprec,80)

      end

  /*******************************************************************/
  /*                                                                 */
  /*      Change all oldgroup -> newgroup                            */
  /*                                                                 */
  /*******************************************************************/

  if oldgroup = newgroup
    then
      nop
    else
      do count = 1 to iofile.0

        if substr(iofile.count,1,5) ^= "ALLOC" then iterate

        x = pos(oldgroup,iofile.count)
        if x = 0 then iterate

        say "Changing" oldgroup "to" newgroup "for" iofile.count

        temprec = substr(iofile.count,1,x-1) /* oldgroup -> newgroup */
        temprec = temprec ×× newgroup
        copypos = x + length(oldgroup)
        copylen = 81 - x - length(oldgroup)
        temprec = temprec ×× substr(iofile.count,copypos,copylen)
        iofile.count = left(temprec,80)

      end

  if changed = "Y" then
    do
      say "writing back changed parameters to member" table
      "EXECIO * DISKW IOFILE (FINIS STEM IOFILE. "
    end
  else
    say "no changes made to member" table

  "FREE F(IOFILE)"

return 0

