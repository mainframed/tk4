/* REXX ************************************************************/
/*                                                                 */
/* EXEC:      TSOA000                                              */
/* WRITTEN:   NOVEMBER  1991 BY MICHAEL THOGERSEN AND PETER HANSEN */
/* CALLED BY: S.LOGON OR AS A TSO COMMAND                          */
/* PURPOSE:   A 'USERFRIENDLY' INTERFACE  TO BROWSE/MODIFY TSO     */
/*            ALLOCATIONS, IE. THE FILES THAT ARE USED BY THE NU   */
/*            STARTUP MAY BE MAINTAINED USING THIS REXX.           */
/*                                                                 */
/* CHANGES:   1. JANUARY 1992 BY CSERSM/RB.                        */
/*        :      REWRITEN, ALL FEATURES REVIEWED, OVERALL LOGIC    */
/*        :      RE-CONSTRUCTED TO ALLOW THE ALL OPTION.           */
/*        :   2. JULY 1992 BY CSERSA/RB.                           */
/*        :      PROCEDURE SAVE_FILE EXTENDED TO STORE ISPF STATS  */
/*        :      WHEN A MEMBER IS WRITTEN OUT.                     */
/*        :      MORE COMMENTS ADDED TO VARIOUS SECTIONS.          */
/*        :   3. NOVEMBER 1992 BY SECDEV/RNH.                      */
/*        :      IMPLEMENT SUPPORT FOR PER-OSE ISPPROFS.           */
/*        :   4. NOVEMBER 1992 BY CTSPMVS/SW.                      */
/*        :      PERMIT CROSS-OSE ISPPROF EDITING.                 */
/*        :   5. NOVEMBER 1992 BY CTSPMVS/SW.                      */
/*        :      AMENDED SO AS TO REJECT UNSORTED TSO ALLOC LISTS  */
/*        :      AND RE-ORG THEM SO THEY WILL BE CLEAN NEXT TIME.  */
/*        :   6. DECEMBER 1992 BY SECDEV/RNH.                      */
/*        :      AMENDED TO PROCESS 'NUTSO' PREFIXED ISPPROFS IF   */
/*        :      FOUND, WHEN PROCESSING USER LEVEL PARAMETERS.     */
/*******************************************************************/

TRACE OFF
"PROFILE NOWTPMSG"
ADDRESS ISPEXEC
"CONTROL ERRORS RETURN"

/*------------------  MAIN CONTROL OF REXX   ----------------------*/

DO FOREVER
  CALL INITIALISE_ALL_VARS
  IF GET_PARMS() ^= 0 THEN
    DO
      "REMPOP"
      LEAVE
    END
  CALL BUILD_TEMP_TABLE
  IF POPULATE_TABLE() < 8 THEN
    IF TABLE_PROCESS() = 0 THEN
      IF CHECK_RACF_RC = 0 THEN
        CALL SAVE_FILE
  "TBEND " TEMP_TABLE
  "REMPOP ALL "              /* FOR GET_PARMS ADDPOP */
END                          /* OF DO FOREVER        */

ADDRESS TSO "PROFILE WTPMSG"
"TBEND " TEMP_TABLE

EXIT

/* ================================================================== */
/*              S U B R O U T I N E   S E C T I O N                   */
/* ================================================================== */

/* ----------------------------------------------------------------- */
/*        GET NAME OF PROC AND TYPE THAT USER WISHES TO MAINTAIN.    */
/*        IF PF3 PRESSED, THEN EXIT.                                 */
/* ----------------------------------------------------------------- */

GET_PARMS:

   ZWINTTL = 'TSO-LOGON ALLOCATIONS'
   "ADDPOP ROW(1) COLUMN(1)"
   "DISPLAY PANEL(TSOA000)"
   TARGET_SYSTEM  = SUBSTR(TSOAPROC,4,1)
   LASTCC         = RC
   TEMP_TABLE     = TSOAPROC××SUBSTR(TSOATYPE,1,1)
   MASTER_PREFIX  = "SYSA.OP" ×× TARGET_SYSTEM ×× "TSO."

RETURN LASTCC


/*-------------------------------------------------------------------*/
/*    THIS SUBROUTINE CREATES THE TEMPORARY TABLE USED FOR DISPLAY   */
/*-------------------------------------------------------------------*/

BUILD_TEMP_TABLE:

   "TBEND " TEMP_TABLE
   "TBCREATE "TEMP_TABLE,
             "KEYS( KEYWORD DDNAME DDCOUNT I) ,
              NAMES(SRC     DDDISP DSN      ) NOWRITE"
   CREATE_RC =  RC
   IF CREATE_RC ^= 0 THEN "SETMSG MSG(TSOA011)"
   "TBSORT " TEMP_TABLE " FIELDS(KEYWORD,C,A,  ",
                               " DDNAME,C,A,   ",
                               " DDCOUNT,N,A,  ",
                               " I,N,A )       "
RETURN CREATE_RC

/*-------------------------------------------------------------------*/
/*    THIS SUBROUTINE WILL READ THE ALLOC_DSN INTO THE TEMPORARY     */
/*    ISPF TABLE FOR FURTHER PROCESSING.                             */
/*-------------------------------------------------------------------*/

POPULATE_TABLE:

    TEST_PROFNAME = "NUTSO."SYSVAR(SYSUID)".IBM"TARGET_SYSTEM ×× ,
                    ".ISPPROF"
    IF SYSDSN("'"TEST_PROFNAME"'") = "OK"
      THEN
        PROFILE_PREFIX = "NUTSO"
      ELSE
        PROFILE_PREFIX = PROJECT_PREFIX
    LIMIT = 1
    SELECT
      WHEN TSOATYPE = "USER" THEN
        ALLOC_DSN = ,
          PROFILE_PREFIX"."SYSVAR(SYSUID)".IBM"TARGET_SYSTEM ×× ,
          ".ISPPROF("TSOAPROC")"
      WHEN TSOATYPE = "PROJECT" THEN
        ALLOC_DSN = PROJECT_PREFIX".MASTER.ISPTLIB("TSOAPROC")"
      WHEN TSOATYPE = "SYSTEM" THEN
        ALLOC_DSN = MASTER_PREFIX××"ISPTLIB("TSOAPROC")"
      WHEN TSOATYPE = "ENDUSER" THEN
        ALLOC_DSN = "SYSA.OP"TARGET_SYSTEM"TSOEU.ISPTLIB("TSOAPROC")"
      WHEN TSOATYPE = "ALL" THEN
       DO
        ALLOC_DSN1= ,
          PROFILE_PREFIX"."SYSVAR(SYSUID)".IBM"TARGET_SYSTEM ×× ,
          ".ISPPROF("TSOAPROC")"
        ALLOC_DSN2= PROJECT_PREFIX".MASTER.ISPTLIB("TSOAPROC")"
        ALLOC_DSN3="SYSA.OP"TARGET_SYSTEM"TSOEU.ISPTLIB("TSOAPROC")"
        ALLOC_DSN4= MASTER_PREFIX××"ISPTLIB("TSOAPROC")"
        CHECK_RACF_RC = 4
        LIMIT = 4
       END              /* END OF ALL BIT */
      OTHERWISE
        DO
          SAY 'ERROR DETERMINING TYPE OF DATASET '
          EXIT
        END
    END                                       /* END SELECT */

    IF TSOATYPE ^= 'ALL' THEN
      DO
        IF CHECK_RACF(ALLOC_DSN) = 4 THEN
          IF SETUP_ADDPOP(TSOA004 1 1) ^= 0 THEN
            DO
              "REMPOP"
              RETURN 8
            END
      END
     ELSE            /* FOR ALL, WARN NO UPDATES, EXIT IF PF3 */
      DO
        IF SETUP_ADDPOP(TSOA006 1 1) = 0 THEN
          "REMPOP"
         ELSE
          RETURN 99
      END
    DO I = 1 TO LIMIT
      IF TSOATYPE = 'ALL' THEN
        INTERPRET 'ALLOC_DSN = ALLOC_DSN'××I
      T = SYSDSN("'"ALLOC_DSN"'")
      IF T = "OK" × T = 'MEMBER NOT FOUND' THEN
        CALL READ_FILE ALLOC_DSN I
       ELSE
        DO
          IF TSOATYPE ^= 'ALL' THEN
            DO
              MSG = SYSDSN("'"ALLOC_DSN"'")
              "SETMSG MSG(TSOA013)"
            END
        END
    END

RETURN CHECK_RACF_RC

/*-------------------------------------------------------------------*/
/* THIS SUBROUTINE CHECKS IF THE USER HAS THE REQUIRED ACCESS.       */
/*-------------------------------------------------------------------*/

CHECK_RACF:

  PARSE ARG DSN
  CHECK_RACF_RC = 4
  ADDRESS TSO "CALL 'SYS3.LINKLIB(DBARACHK)' '"DSN",UPDATE'"
  IF RC = 0 THEN CHECK_RACF_RC = 0

RETURN CHECK_RACF_RC

/*-------------------------------------------------------------------*/
/*    THIS SUBROUTINE BUILDS THE TEMPORARY TABLE USED FOR DISPLAY    */
/*    FIRST DETERMINE WHAT THE USER WANTS THEN READ ALL INTO THE     */
/*    TABLE AND FOR ONE-OFF KEYWORDS INTO PARMS.                     */
/*-------------------------------------------------------------------*/

READ_FILE:

    PARSE ARG ALLOC_DSN I
    DDNAME      = ""
    LAST_DDNAME = ""
    IF TSOATYPE = 'ALL' THEN
      DO
        SELECT
          WHEN I=1 THEN SRC = 'USER'
          WHEN I=2 THEN SRC = 'PROJ'
          WHEN I=3 THEN
            DO
              TYPE_CHAR = SUBSTR(PROJECT_PREFIX,5,1)
              IF TYPE_CHAR = 'T'   × ,
                 TYPE_CHAR = 'P'   × ,
                 PROJECT_PREFIX = 'NUADS' THEN
                   SRC = 'EU'
                  ELSE
                   RETURN
            END
          WHEN I=4 THEN SRC = 'SYS'
          OTHERWISE NOP
        END                          /* END OF SELECT */
      END
     ELSE
      DO
        SELECT
          WHEN TSOATYPE = 'USER'    THEN SRC = 'USER'
          WHEN TSOATYPE = 'PROJECT' THEN SRC = 'PROJ'
          WHEN TSOATYPE = 'ENDUSER' THEN SRC = 'EU'
          WHEN TSOATYPE = 'SYSTEM'  THEN SRC = 'SYS'
          OTHERWISE SAY 'ITS A PROBLEM '
        END
      END
    OFFSET  = 1000 * I
    ADDRESS TSO "DELSTACK"               /* CLEAN STACK */
    IF T= 'OK' THEN
      DO
        ADDRESS TSO "ALLOC F(TSOA) DA('"ALLOC_DSN"') SHR REU"
        ADDRESS TSO "EXECIO * DISKR TSOA (STEM INFILE. FINIS )"
      END
     ELSE
      INFILE.0 = 0                      /* NO RECORDS READ TO PROCESS */

    DDCOUNT = OFFSET
    DO J= 1 TO INFILE.0
      KEYWORD = WORD(SUBSTR(INFILE.J,1,8),1)
      SELECT
        WHEN KEYWORD = "ALLOC"   × KEYWORD = "ALLOCATE" ×,
             KEYWORD = "TEMPDSN" × KEYWORD = "TERMINAL" ×,
             KEYWORD = "SYSOUT"  × KEYWORD = "DUMMY" THEN
          DO
            IF KEYWORD = 'ALLOCATE' THEN KEYWORD = 'ALLOC'
            DDCOUNT = DDCOUNT + 10
            DDNAME = WORD(SUBSTR(INFILE.J,10,8),1)
            IF DDNAME ^= LAST_DDNAME THEN
              DO
                DDDISP = DDNAME
                LAST_DDNAME = DDNAME
                DDCOUNT     = OFFSET + 10
              END
             ELSE
                DDDISP = ''
            DSN  = SUBSTR(INFILE.J,19,61)
            IF TSOATYPE = 'ALL' THEN
              DO
                "TBADD " TEMP_TABLE  " ORDER "
                IF RC ^= 0 THEN
                  DO
                    "EDIT DATASET('"ALLOC_DSN"') MACRO(TSOASORT)"
                    IF RC = 0 THEN
                      DO
                        SAY 'DATASET ' ALLOC_DSN ' HAS BEEN'
                        SAY 'MANUALLY EDITED AND LEFT IN UNMANAGEABLE'
                        SAY 'ORDER. S.LOGON WILL RE-ORGANISE IT AND'
                        SAY 'THEN EXIT. PLEASE THEN RETRY S.LOGON.'
                        EXIT
                      END
                  END
              END
             ELSE
               DO
                 DDCOUNT = RIGHT(DDCOUNT,2)
                 "TBADD " TEMP_TABLE  " ORDER"
                 IF RC = 8 THEN
                   DO
                     SAY 'DATASET ' ALLOC_DSN ' HAS BEEN'
                     SAY 'MANUALLY EDITED AND LEFT IN UNMANAGEABLE'
                     SAY 'ORDER. S.LOGON WILL RE-ORGANISE IT AND'
                     SAY 'THEN EXIT. PLEASE THEN RETRY S.LOGON.'
                     "EDIT DATASET('"ALLOC_DSN"') MACRO(TSOASORT)"
                     EXIT
                   END
               END
          END
        WHEN KEYWORD = "ISPFTEST" THEN KWTST = "TEST"
        WHEN KEYWORD = "PANEL"    THEN KWPAN = SUBSTR(INFILE.J,10,8)
        WHEN KEYWORD = "PREREQ"   THEN KWPRE = SUBSTR(INFILE.J,10,70)
        WHEN KEYWORD = "POSTREQ"  THEN KWPOS = SUBSTR(INFILE.J,10,70)
        WHEN KEYWORD = "COMMAND"  THEN KWCMD = SUBSTR(INFILE.J,10,70)
        WHEN KEYWORD = "LOGOFF"   THEN KWLOG = "YES"
        WHEN KEYWORD = "STOP"     THEN KWSTO = "YES"
        OTHERWISE  SAY 'WARNING - KEYWORD ' KEYWORD ' NOT KNOWN.'

      END                                /* END SELECT     */

    END                                  /* END OF J LOOP  */

    /* ------------------------------------------------------------ */
    /* ADJUST DISPLAY DDNAMES WHEN ALL SELECTED.                    */
    /* ------------------------------------------------------------ */
    "TBTOP" TEMP_TABLE
    IF TSOATYPE = 'ALL' THEN
      DO
        "TBQUERY " TEMP_TABLE "ROWNUM(ROWS)"
        LASTDD = ''
        DO ROWS
          "TBSKIP " TEMP_TABLE
          IF DDNAME ^= LASTDD THEN
            DO
              DDDISP = DDNAME
              LASTDD = DDNAME
              "TBPUT " TEMP_TABLE " ORDER "
            END
          ELSE
            DO
              DDDISP= ''
              "TBPUT " TEMP_TABLE " ORDER "
            END
        END
      END
    "TBTOP" TEMP_TABLE
RETURN

/* ----------------------------------------------------------------- */
/*   THIS ROUTINE WILL CONTROL THE TEMPORARY ISPF TABLE AND IT'S     */
/*  AVAILABLE COMMANDS                                               */
/* ----------------------------------------------------------------- */

TABLE_PROCESS:

    /* ------------------------------------------------------------ */
    /* DISPLAY AND PROCESS THE TABLE IN FOREVER LOOP.               */
    /* 1. DEFINE THE WINDOW, AND SET UP TOP DISPLAY ROW.            */
    /* 2. LEAVE IF PF3 PRESSED.                                     */
    /* 3. IF THE USER DOES NOT HAVE RACF ACCESS, SHOW MESSAGE.      */
    /* 4. PROCESS PRIMARY COMMANDS.                                 */
    /* 5. PROCESS LINE COMMANDS.                                    */
    /* ------------------------------------------------------------ */
    TROW = 1
    DO FOREVER
      "ADDPOP ROW(2) COLUMN(1) "
      "TBTOP  " TEMP_TABLE                  /* KEEPING TOP ROW STATIC*/
      "TBSKIP " TEMP_TABLE " NUMBER("TROW")"
      "TBDISPL" TEMP_TABLE "PANEL(TSOA001) CURSOR(ZCMD)",
                          " CSRROW("TROW") AUTOSEL(NO)"
      IF RC = 8 THEN LEAVE
      TROW = ZTDTOP
      IF CHECK_RACF_RC= 4 THEN       /* DISABLE CHANGES IF NO ACCESS. */
        DO
          IF TSOATYPE = 'ALL' THEN
            PANEL = 'TSOA002'
           ELSE
            PANEL = 'TSOA002'
          "ADDPOP ROW(1) COLUMN(1) "
          "DISPLAY PANEL(TSOA005) "
          "REMPOP"
          IF ZCMD ^= 'EXTRA' THEN ITERATE
        END
     IF PROCESS_PRIMARY_COMMANDS() = 0 THEN
       DO WHILE ZTDSELS > 0
          SELECT
            WHEN OPT = "S" THEN
              DO
                TYPE = "OUTPUT"
                IF SETUP_ADDPOP(TSOA003 1 1) = 0 THEN
                  DO
                    "TBPUT" TEMP_TABLE "ORDER "
                    "SETMSG MSG(TSOA017)"
                  END
                ELSE
                   "SETMSG MSG(TSOA018)"
                "REMPOP"
              END
            WHEN OPT = "I" THEN
              DO
                TYPE = "OUTPUT"
                IF SETUP_ADDPOP(TSOA003 1 1) = 0 THEN
                  DO
                    S_KEYWORD = KEYWORD
                    S_DDNAME  = DDNAME
                    S_DSN     = DSN
                    S_SRC     = SRC
                    MULT = LEFT(DDCOUNT,1)
                    DDCOUNT = DDCOUNT + 1
                    IF LEFT(DDCOUNT,1) = MULT THEN
                      DO
                        "TBSCAN" TEMP_TABLE ,
                              "ARGLIST(KEYWORD,DDNAME,DDCOUNT) NOREAD ",
                              "POSITION(POS)"
                        IF RC = 8 THEN
                          DO
                           DDCOUNT   = DDCOUNT - 1
                           "TBGET " TEMP_TABLE
                           KEYWORD   = S_KEYWORD
                           DDNAME    = S_DDNAME
                           DSN       = S_DSN
                           SRC       = S_SRC
                           DDCOUNT   = DDCOUNT + 1
                           DDDISP    = ''
                           "TBADD " TEMP_TABLE " ORDER "
                          END
                         ELSE
                          CALL RENUMBER_AND_ADD
                     END
                 END
                ELSE
                  DO
                   "SETMSG MSG(TSOA018)"
                   "REMPOP"
                 END
                "REMPOP"    /* FOR SCREEN TSOA003 */
             END
           WHEN OPT = "D" THEN
             DO
               "TBDELETE" TEMP_TABLE
               "SETMSG MSG(TSOA017)"
             END
           OTHERWISE NOP
        END                                 /* OF SELECT   */

        IF ZTDSELS = 1 THEN LEAVE
        "TBDISPL" TEMP_TABLE
     END                                    /* OF DO WHILE ZTDSELS */
    ELSE
     RETURN 4

    END                                       /* OF DO FOREVER       */
    "REMPOP"
    "REMPOP"

  RETURN 0

/* ----------------------------------------------------------------- */
/*   THIS ROUTINE WILL REFORMAT THE TEMP TABLE ONTO THE STACK, THEN  */
/*   WRITE IT OUT AS THE REQUIRED PDS MEMBER.                        */
/* ----------------------------------------------------------------- */

SAVE_FILE:

   ADDRESS TSO "NEWSTACK"
   IF KWLOG  = "YES"  THEN QUEUE "LOGOFF"
   IF KWPAN ^= ""     THEN QUEUE "PANEL    "KWPAN
   IF KWTST  = "TEST" THEN QUEUE "ISPFTEST "
   IF KWSTO  = "YES"  THEN QUEUE "STOP"
   IF KWPRE ^= ""     THEN QUEUE "PREREQ   "KWPRE
   IF KWPOS ^= ""     THEN QUEUE "POSTREQ  "KWPOS
   IF KWCMD ^= ""     THEN QUEUE "COMMAND  "KWCMD

   "TBTOP  " TEMP_TABLE
   DO FOREVER
     "TBSKIP " TEMP_TABLE
     IF RC ^= 0 THEN LEAVE
     SELECT
       WHEN KEYWORD = "TERMINAL" × KEYWORD = "DUMMY" THEN
            QUEUE OVERLAY(KEYWORD,X,1,9,' ')××OVERLAY(DDNAME,Y,1,9,' ')
       WHEN KEYWORD = "TERMINAL" THEN
            QUEUE OVERLAY(KEYWORD,X,1,9,' ')××OVERLAY(DDNAME,Y,1,9,' ')
       OTHERWISE
         QUEUE OVERLAY(KEYWORD,X,1,9,' ') ××OVERLAY(DDNAME,Y,1,9,' '),
               ××OVERLAY(DSN,X,1,62,' ')
     END                              /* END SELECT                  */
   END                                /* END DO FOREVER              */
                                      /* AVOID WRITE IF UNCHANGED.   */
   IF QUEUED() = INFILE.0 THEN
     DO
                                     /*  COPY STACK INTO STEM */
        COMP.0 = QUEUED()
        DO X = 1 TO COMP.0
           PULL COMP.X
        END
                                     /*  COMPARE LINE BY LINE  */
                                     /*  ON MISMATCH, SKIP OUT */
        SAVE_FLAG = 0
        DO X= 1 TO COMP.0
          IF INFILE.X = COMP.X THEN ITERATE
          SAVE_FLAG = 1
        END
        IF SAVE_FLAG = 0 THEN
          DO
            "SETMSG MSG(TSOA023)"
            RETURN
          END
                                     /*  ADD THE LINES BACK.   */
        DO X= 1 TO COMP.0
          QUEUE COMP.X
        END
     END
   QUEUE ""
                                      /* WRITE TO DISK, UNLESS EMPTY */
   IF QUEUED() > 1 THEN
     DO
       ADDRESS TSO "ALLOC F(TSOA) DA('"ALLOC_DSN"') SHR REU"
       ADDRESS TSO "EXECIO * DISKW TSOA (FINIS "
                                      /* SET MESSAGE, AND WRITE STATS*/
       IF RC = 0 THEN                 /* INTO PDS DIRECTORY.         */
         DO
           "SETMSG MSG(TSOA020)"
            ADDRESS TSO "FREE F(TSOA) "
            PARSE VALUE ALLOC_DSN WITH INIT_DSN '(' TRASH
            "LMINIT   DATAID(DATAID) DATASET('" ×× INIT_DSN ×× "')"
            "LMMSTATS DATAID("DATAID") MEMBER("TSOAPROC")"
            "LMFREE  DATAID(" ×× DATAID ×× ")"
         END
        ELSE
         "SETMSG MSG(TSOA021)"
     END
    ELSE
     DO
       ADDRESS TSO "DELETE '"×× ALLOC_DSN ×× "'"
       SAY 'NO DATA TO WRITE - PARAMETER SET BEING DELETED. '
     END

RETURN

/*-------------------------------------------------------------------*/
/*    THIS SUBROUTINE CONTROLS SOME OF THE POPUP PANELS.             */
/*-------------------------------------------------------------------*/

SETUP_ADDPOP:

    PARSE ARG PANEL ROW COLUMN
    "ADDPOP ROW("ROW") COLUMN("COLUMN")"
    "DISPLAY PANEL("PANEL")"
    POP_RC = RC

RETURN POP_RC

/*-------------------------------------------------------------------*/
/*    PROCESS THE COMMANDS TYPED ON COMAND LINE OF TBDISPL.          */
/*-------------------------------------------------------------------*/

PROCESS_PRIMARY_COMMANDS:

    SELECT
      WHEN ZCMD = "EXTRA"  THEN
        DO
          "ADDPOP ROW(1) COLUMN(1)"
          "DISPLAY PANEL(TSOA002)"
          "REMPOP"
        END
      WHEN ZCMD = "CANCEL" THEN
        DO
           "SETMSG MSG(TSOA019)"
           RETURN 4
        END
      WHEN ZCMD = "SHOW" THEN
        DO
           S_KEYWORD = KEYWORD
           S_DDNAME  = DDNAME
           S_DDCOUNT = DDNAME
           "TBTOP " TEMP_TABLE
           "TBQUERY " TEMP_TABLE "ROWNUM(ROWS) "
           SAY "KEYWORD DDNAME DDCOUNT DDDISP DSN  "
           DO ROWS
             "TBSKIP " TEMP_TABLE
             SAY KEYWORD DDNAME DDCOUNT DDDISP DSN
           END
           KEYWORD = S_KEYWORD
           DDNAME  = S_DDNAME
           DDCOUNT = RIGHT(S_DDCOUNT,2)
        END
      WHEN ZCMD = "I" THEN
        DO
          "TBBOTTOM" TEMP_TABLE
          "TBVCLEAR" TEMP_TABLE
          TYPE = 'INPUT'
          OPT  = ZCMD
          IF SETUP_ADDPOP(TSOA003 1 1) = 0 THEN
            DO
              DDDISP = DDNAME
              DDCOUNT = RIGHT('10',2)
              "TBADD" TEMP_TABLE " ORDER "
              IF RC = 0 THEN
                 "SETMSG MSG(TSOA017)"
               ELSE
                 DO
                   "SETMSG MSG(TSOA018)"
                 END
            END
        END
      OTHERWISE NOP
    END                                     /* OF SELECT */

RETURN 0

/* ----------------------------------------------------------------- */
/*    RE-NUMBER A SUBSET OF THE TABLE.                               */
/* THIS WORKS BY SHIFTING ALL THE ROWS TO BE RENUMBERED TO ANOTHER   */
/* TABLE, THEN ADDING THEM BACK WITH THEIR NEW NUMBERS.              */
/* IT IS ONLY CALLED WHEN A PRIOR ADD FAILS, SO IT WILL HARDLY EVER  */
/* BE USED.                                                          */
/* ----------------------------------------------------------------- */

RENUMBER_AND_ADD:
   "TBEND TEMP "
   "TBCREATE TEMP NAMES(KEYWORD DDNAME DDCOUNT SRC DDDISP DSN) NOWRITE"

                             /* RESET COUNTER ON ENTRY. */
    H_DDCOUNT = DDCOUNT
    S_DDCOUNT = DDCOUNT - 1
                             /* GO THROUGH THE TABLE, ADD ROWS TO BE */
                             /* PROCESSED TO A TEMP TABLE, AND DELETE*/
                             /* FROM MAIN TABLE. EXIT IF END HIT.    */
    "TBTOP   " TEMP_TABLE
    "TBQUERY " TEMP_TABLE "ROWNUM(ROWS)"
    DO ROWS
      "TBSKIP " TEMP_TABLE
      "TBADD TEMP MULT("ROWS")"
      "TBDELETE "TEMP_TABLE
    END
    /* ----------------------------------------------- */
    /* FIND OUT WHERE THE NEW ROW GOES, AND ADD IT.    */
    /* ----------------------------------------------- */
    DDCOUNT = H_DDCOUNT
    "TBTOP  TEMP"
    KEYWORD = S_KEYWORD
    DDNAME  = S_DDNAME
    DSN     = S_DSN
    SRC     = S_SRC
    "TBSCAN TEMP ARGLIST(KEYWORD DDNAME DDCOUNT) NOREAD "
    "TBSKIP TEMP NUMBER(-1) NOREAD "
    "TBADD  TEMP "
    /* ---------------------------------------------------------- */
    /* FINALLY, ADD THE ADJUSTED ROWS BACK INTO THE DISPLAY TABLE */
    /* AND LOOSE TEMP                                             */
    /* ---------------------------------------------------------- */
    "TBTOP TEMP"
    "TBQUERY TEMP ROWNUM(ROWS)"
    COUNT = 0
    SAVE_DDNAME = ''
    DO ROWS
      COUNT = COUNT + 10
      "TBSKIP TEMP"
      IF DDNAME ^= SAVE_DDNAME THEN COUNT = 10
      DDCOUNT = COUNT
      IF COUNT = 10 THEN
        DO
          SAVE_DDNAME = DDNAME
          DDDISP = DDNAME
        END
       ELSE
        DDDISP = ''
      "TBADD " TEMP_TABLE " ORDER "
    END
   "TBEND TEMP"
RETURN

/* ----------------------------------------------------------------- */
/* INITIALISE_ALL_VARS:                                              */
/* THIS IS CALLED AT THE START OF PROCESSING ONLY. IT PREVENTS ANY   */
/* INITIALISATION PROBLEMS, AND ACTS AS A DECLARATION AND VARIABLE   */
/* SECTION.                                                          */
/* ----------------------------------------------------------------- */
INITIALISE_ALL_VARS:

ADDRESS TSO "FINDSYS"
SYSTEM = SUBSTR(SYSID,4,1)
"VGET (TSOATYPE TSOAPROC) PROFILE"
IF TSOAPROC = "" THEN
  TSOAPROC = "TSO" ×× SYSTEM
"VGET ZSYSNAME "
ADDRESS TSO "FINDGRP"
PROJECT_PREFIX = GRPID
ALLOC_DSN     = ""   /* DATASET TO READ VARIABLES IN FROM.            */
ALLOC_DSN1    = ""   /* AS ALLOC DSN, BUT USED TO DERIVE IT IN LOOP.  */
ALLOC_DSN2    = ""   /*                     "                         */
ALLOC_DSN3    = ""   /*                     "                         */
ALLOC_DSN4    = ""   /*                     "                         */
CHECK_RACF_RC = 999  /* 4 MEANS READ ONLY ACCESS TO ALLOC_DSN         */
COMP.0        = 0    /* STEM USED TO DETECT WHETHER SAVE NEEDED.      */
COUNT         = 0    /* USED IN RENUMBER_AND_ADD.                     */
CREATE_RC     = 0    /* RETURN CODE FROM MAIN TBCREATE                */
DDCOUNT       = 0    /*                                               */
DDDISP        = ""   /* DDNAME FOR DISPLAY ON PANEL.                  */
DDNAME        = ""   /* DDNAME IN TABLE RECORD. NON-DISPLAY           */
DSN           = ""   /* DSN TO ALLOCATE. STORED IN TABLE.             */
H_DDCOUNT     = ""   /* TEMP FIELD TO HOLD DDCOUNT IN RENUMBER_AND_ADD*/
INFILE.0      = 0    /* NUMBER OF RECORDS READ FROM FILE.             */
KEYWORD       = ""   /* CHARS 1 TO 8 OF RECORDS READ IN.              */
KWCMD         = " "  /* SET IF KEYWORD = COMMAND                      */
KWLOG         = " "  /* SET IF KEYWORD =                              */
KWPAN         = " "  /* SET IF KEYWORD = PANEL                        */
KWPOS         = " "  /* SET IF KEYWORD = POSTREQ                      */
KWPRE         = " "  /* SET IF KEYWORD = PREREQ                       */
KWSTO         = " "  /* SET IF KEYWORD = STOP                         */
KWTST         = " "  /* SET IF KEYWORD = ISPFTEST                     */
LAST_DDNAME   = ""   /* WORK FIELD USED IN BUILDING DISPLAY TABLE.    */
LASTCC        = 0    /* RETURN VALUE FROM GET_PARMS.                  */
LASTDD        = ''   /* SEE LAST_DDNAME                               */
LIMIT         = 0    /* NUMBER OF TIMES TO DO I LOOP. 1 OR 4.         */
MSG           = ""   /* VARIABLE INSERTED INTO AN ISPF MESSAGE.       */
MULT          = 0    /* MULTIPLIER USED WITH ALL OPTION.              */
OFFSET        = 0    /*                                               */
OPT           = ""   /*                                               */
PANEL         = ""   /*                                               */
POP_RC        = 0    /* RESULT OF REMOVING A POPUP WINDOW.            */
S_DDCOUNT     = 0    /* SAVE VERSION OF ISPF TABLE FIELDS. SEE ABOVE. */
S_DDNAME      = ""   /*  "      "        "     "     "      "    "    */
S_DSN         = ""   /*  "      "        "     "     "      "    "    */
S_KEYWORD     = ""   /*  "      "        "     "     "      "    "    */
S_SRC         = ""   /*  "      "        "     "     "      "    "    */
SAVE_DDNAME   = ''   /* WORK FIELD USED IN RENUMBER_AND_ADD           */
SAVE_FLAG     = 0    /* DO WE SAVE CHANGES ? SEE SAVE_FILE.           */
SRC           = ""   /* SOURCE FILE TYPE. EU, USER, PROJECT OR SYSTEM */
T             = ""   /* OK/NOT OK, RESULT OF SYSDSN ON ALLOC_DSN      */
TEMP_TABLE    = ""   /* NAME OF ISPF TABLE DISPLAYED TO USER.         */
TROW          = 0    /* TOP ROW OF TABLE FOR DISPLAY                  */
TYPE          = ""   /* USED TO SAY A SCREEN VAR IS INPUT OR OUTPUT   */
TYPE_CHAR     = ""   /* CHAR 5 OF USER ID - T,P,L,S,H,I               */
                     /* I/J/X, ASSORTED LOOP CONTROL VARS.            */

RETURN
