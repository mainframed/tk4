./       ADD   NAME=AFPFONT$
)Attr Default(%+_)
   % type(text  ) intens(high) color(yellow)
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   × type(text)   intens(low)  color(turq)
   $ type(text)   intens(low)  color(green)
   @ type(text)   intens(low)  color(white)
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(whi
   | type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yel
   ^ type(output)  intens(low)  caps(off) just(left ) pad(' ') color(tur
)Body  Expand(//)
@-/-/- AFP Fonts Table Display Panel -/-/-
@Command ===>_zcmd                                 / /@Scroll ===>_amt +
%
$Commands:×Sort, Only, Locate
$Fields:×  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset
%
@    Name                           Size   Weight           Code Page
%    Width           Style                                  Coded Font
×    Points Fix-Pro  Code Page Description                  Character Se
+
)MODEL ROWS(SCAN)
!z +#z                              +#z  +#z              +#z
+   |z             +|z                                    +|z
+   ^z    +^z      +^z                                    +^z
)Init
  .ZVARS = '(tsel typeface pointsiz weight codepage  +
             width style codefont +
             codepts charfp codepd charset)'
  &amt = TRANS(&amt ' ',CSR *,*)
)Reinit
)Proc
)End
./       ADD   NAME=AFPFONTE
)Attr Default(%+_)
   % type(text  ) intens(high) color(yellow)
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   × type(text)   intens(low)  color(turq)
   $ type(text)   intens(low)  color(green)
   @ type(text)   intens(low)  color(white)
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(whi
   | type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yel
   ^ type(output)  intens(low)  caps(off) just(left ) pad(' ') color(tur
)Body  Expand(//)
@-/-/- AFP Fonts Table Display Panel -/-/-
@Command ===>_zcmd                                 / /@Scroll ===>_amt +
%
$Commands:×Sort, Only, Locate        $Options:×S - Build Define Font (.d
$Fields:×  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset
%
@Sel Name                Weight     Size Style      Code Page
+
)MODEL ROWS(SCAN)
!z +#z                 +|z        +|z  +|z        +|z
)Init
  .ZVARS = '(tsel typeface weight pointsiz style codepd)'
  &amt = TRANS(&amt ' ',CSR *,*)
)Reinit
)Proc
                                  /* Process )BODY fields here      */
  If (&ztdsels ^= 0000)           /* If user selected some rows ... */
                                  /* ... process )MODEL fields here */
    VER (&TSEL,LIST,S)
)End
./       ADD   NAME=AFPFONTS
)Attr Default(%+_)
   % type(text  ) intens(high) color(yellow)
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   × type(text)   intens(low)  color(turq)
   $ type(text)   intens(low)  color(green)
   @ type(text)   intens(low)  color(white)
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(whi
   | type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yel
   ^ type(output)  intens(low)  caps(off) just(left ) pad(' ') color(tur
)Body  Expand(//)
@-/-/- AFP Fonts Table Display Panel -/-/-
@Command ===>_zcmd                                 / /@Scroll ===>_amt +
%
$Commands:×Sort, Only, Locate
$Fields:×  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset
%
@    Name                Weight     Size Style      Code Page
+
)MODEL ROWS(SCAN)
!z +#z                 +|z        +|z  +|z        +|z
)Init
  .ZVARS = '(tsel typeface weight pointsiz style codepd)'
  &amt = TRANS(&amt ' ',CSR *,*)
)Reinit
)Proc
)End
./       ADD   NAME=AFPFONTX
)Attr Default(%+_)
   % type(text  ) intens(high) color(yellow)
/* + type(text  ) intens(low )                   information only  */
/* _ type( input) intens(high) caps(on ) just(left )               */
   × type(text)   intens(low)  color(turq)
   $ type(text)   intens(low)  color(green)
   @ type(text)   intens(low)  color(white)
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   # type(output)  intens(high) caps(off) just(left ) pad(' ') color(whi
   | type(output)  intens(low ) caps(off) just(left ) pad(' ') color(yel
   ^ type(output)  intens(low)  caps(off) just(left ) pad(' ') color(tur
)Body  Expand(//)
@-/-/- AFP Fonts Table Display Panel -/-/-
@Command ===>_zcmd                                 / /@Scroll ===>_amt +
%
$Commands:×Sort, Only, Locate        $Options:×M - Map
$Fields:×  Name, Style, Size, Weight, Width, Codefont, Codepage, Charset
%
@Sel Name                Weight     Size Style      Code Page
+
)MODEL ROWS(SCAN)
!z +#z                 +|z        +|z  +|z        +|z
)Init
  .ZVARS = '(tsel typeface weight pointsiz style codepd)'
  &amt = TRANS(&amt ' ',CSR *,*)
)Reinit
)Proc
                                  /* Process )BODY fields here      */
  If (&ztdsels ^= 0000)           /* If user selected some rows ... */
                                  /* ... process )MODEL fields here */
    VER (&TSEL,LIST,M)
)End
./       ADD   NAME=BRDDSN
)ATTR
  ^ TYPE(INPUT) INTENS(NON)
)BODY EXPAND(ÖÖ)
%Ö-Ö  &FUNC - ENTRY PANEL  Ö-Ö
%COMMAND ===>_ZCMD
%
+ENTER PARTITIONED OR SEQUENTIAL DATA SET NAME
+   DATA SET NAME %===>_DSN
+   VOLUME SERIAL %===>_VOL   +  (if not cataloged)
+
)INIT
)PROC
   IF (&ZCMD ^= ' ') .MSG = ISPZ001
   VER (&DSN,NB,DSNAME)
   VER (&VOL,NAME)
)END
./       ADD   NAME=BRIFPAN
)ATTR DEFAULT(%+_)
)BODY EXPAND(//)
%-/-/- Browse VSAM Dataset -/-/-
%
+VSAM Dataset:
+   Project%===>_PRJV     +
+   Group  %===>_LIBV     +
+   Type   %===>_TYPV     +
+
+Other VSAM dataset:
+   Dataset name%===>_WDSN                                            +
+
)INIT
 &ZCMD = ' '
 IF (&WDSN ^= ' ')  .CURSOR = WDSN
 .CURSOR = PRJV
)PROC
 VPUT (PRJV,LIBV,TYPV) PROFILE
 IF (&WDSN = ' ')
    &DSVSAM = '&PRJV..&LIBV..&TYPV'
    VER (&DSVSAM,DSNAME)
 ELSE
    &W = TRUNC(&WDSN,1)
    IF (&W = '''')
       &DSVSAM = .TRAIL
       &DSVSAM = TRUNC(&DSVSAM,'''')
    ELSE
       &DSVSAM = '&SYSUID..&WDSN'
    VER (&DSVSAM,DSNAME)
)END
./       ADD   NAME=CATBRO
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  Ö TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
 01 TYPE(DATAOUT) INTENS(LOW)
 02 TYPE(DATAOUT) INTENS(HIGH)
 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)
 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)
 0D TYPE(DATAOUT) INTENS(HIGH) FORMAT(&MIXED)
 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)
 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)
 12 TYPE(DATAOUT) INTENS(LOW)  FORMAT(&MIXED)
)BODY WIDTH(&ZWIDTH) EXPAND(//)
ÖLISTCAT &B(&OBJNAME)                 / /              %LINE!ZLINES%COL!
%COMMAND ===>_ZCMD                             / /            %SCROLL ==
×ZDATA ---------------------------------/ /-----------------------------
×                                       / /
× --------------------------------------/-/-----------------------------
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  .ZVARS = 'ZSCBR'         /* SCROLL AMT VARIABLE NAME  */
  IF (&ZMEMB ^= ' ')
    &ZTITLE = '&ZDSN(&ZMEMB)&ZLEVEL '
  IF (&ZMEMB = ' ')
    &ZTITLE = '&ZDSN&ZLEVEL '
  &MIXED = MIX
  IF (&ZPDMIX = N)         /* EBCDIC MODE REQUESTED     */
    &MIXED = EBCDIC

)REINIT
  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)
  .ATTRCHAR(+) = 'INTENS(&ZINTEN)'

)PROC
  &ZCURSOR = .CURSOR
  &ZCSROFF = .CSRPOS
  &ZLVLINE = LVLINE(ZDATA)

)END

/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)
/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)
./       ADD   NAME=DSN
)ATTR
   @ TYPE(OUTPUT)
   × TYPE(TEXT)   INTENS(HIGH) COLOR(TURQ)
   $ TYPE(TEXT)   INTENS(LOW)  COLOR(GREEN)
)BODY EXPAND(//)
%-/-/- DSN PANEL -/-/-
+COMMAND ====>_ZCMD                         +SCROLL ====>_AMT
+
$LINE COMMANDS:×LC$(Listc)×L$(Listd)×E$(Edit)×B$(Browse)×HR$(Hrecall)×G$
+
+      DDNAME     STEP        DSNAME
)MODEL
+_S  +@DDNAME    @STEP       _DSN
)INIT
 &AMT = 'CSR'
 &ZCMD = &Z
 &S = &Z
)END
./       ADD   NAME=EDBRADD
)ATTR DEFAULT(%+_)
  $ TYPE(INPUT) INTENS(LOW) PAD(_)    /* input field padded with '_' */
  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */
)BODY  EXPAND(//)
%EDX -/-/- Add more dataset(s) to your list -/-/- EDX
%COMMAND ===>_ZCMD
%
+   Enter information about the dataset you want to add:
+
+   Dataset Name  ......$EDBRDS                                       +
+   Level         ......$EDBRLV               + (Dsname takes precedence
+   Volume Serial ......$EDBRVOLS+ (Optional)
+
+
)INIT
)PROC
 IF (&EDBRDS ^= &Z)
     &TEMP = TRUNC (&EDBRDS,'''')
     &TRAIL = .TRAIL
     IF (&TRAIL = &Z)
         &EDBRDSNM = '&ZPREFIX..&EDBRDS'
     IF (&TRAIL ^= &Z)
         &EDBRDSNM = TRUNC (&TRAIL,'''')
 IF (&EDBRDS = &Z)
    VER (&EDBRLV,NONBLANK)
)END
./       ADD   NAME=EDBRDELT
)ATTR DEFAULT(%+_)
       %   TYPE(TEXT) INTENS(HIGH)
       +   TYPE(TEXT) INTENS(LOW)
       _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
  @   TYPE(OUTPUT)  INTENS(HIGH)
)BODY  EXPAND(//)
%EDX -/-/- Delete your dataset? -/-/- EDX
%Command ===>_ZCMD
+
+  Please confirm your request to delete this dataset.
+
+      Data Set Name%===>@EDBRDSNM
+          on Volume%===>@EDBRVOLS  +
+
+  Press%ENTER+to proceed with delete
+  Press%PF3+or enter the%END+command to cancel
+
)INIT
)PROC
)END
./       ADD   NAME=EDBRDROP
)ATTR DEFAULT(%+_)
  $ TYPE(INPUT) INTENS(LOW) PAD(_)    /* input field padded with '_' */
  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */
)BODY  EXPAND(//)
%EDX -/-/- Drop some datasets from your list -/-/- EDX
%COMMAND ===>_ZCMD
%
+   Enter information about the datasets you want to drop:
+
+   Level         ......$EDBRDLEV             +
+
+
)INIT
)PROC
 VER (&EDBRDLEV,NB)
)END
./       ADD   NAME=EDBRHELP
)ATTR DEFAULT(%+_)
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
      /*  + TYPE(TEXT) INTENS(LOW)       information only            */
      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
)BODY  EXPAND(//)
%EDX -/-/- Tutorial -/-/- EDX
%SELECTION ===>_ZCMD
%
+
+
   Personal Dataset Manager is an ISPF dialog that provides an improved
   interface to%EDIT+and%BROWSE+as well as other dataset-oriented
   functions. It does this by maintaining an ISPF table of the datasets
   you are currently working with and providing command functions both
   to maintain the list and to operate on the datasets.

   The following topics are presented in sequence, or may be selected by
   number:

  %1+ LIST Commands
  %2+ LINE Commands

)PROC
     &ZSEL = TRANS( &ZCMD
                1,EDBRLIST
                2,EDBRLINE
                *,'?'
                )
)END
./       ADD   NAME=EDBRINFO
)ATTR DEFAULT(%+_)
  $ TYPE(OUTPUT) INTENS(HIGH) PAD(' ')
  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */
)BODY  EXPAND(//)
%EDX -/-/- Information about your dataset -/-/- EDX
%COMMAND ===>_ZCMD
%
+   Dataset Name  ......$EDBRDSNM
+   Volume Serial ......$EDBRVOLS+
+   Unit Name     ......$SYSUNIT+
+   Organization  ......$SYSDSORG+
+   Record Format ......$SYSRECFM+
+   Record Length ......$SYSLRECL+
+   Block Size    ......$EDBRBLK+
+   Allocation unit ....$SYSUNITS+
+   Allocated Space ....$SYSALLOC+     (in the above allocation units)
+   Used Space      ....$SYSUSED+      (in the above allocation units)
+   Primary Space   ....$EDBRPRIM+     (in the above allocation units)
+   Secondary Space ....$EDBRSECQ+     (in the above allocation units)
+   Extents         ....$EDBREXT+
+   Creation Date   ....$EDBRCDTE+
+   Last Used Date  ....$EDBREFDT+
+   Change Indicator....$EDBRUPDT+
+
+
)INIT
)PROC
)END
./       ADD   NAME=EDBRLINE
)ATTR DEFAULT(%+_)
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
      /*  + TYPE(TEXT) INTENS(LOW)       information only            */
      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
)BODY  EXPAND(//)
%EDX -/-/- Line commands -/-/- EDX
%SELECTION ===>_ZCMD
+
   The following commands may be entered in the selection field beside
   any of the dataset names:

  %?+        to display information about the dataset's attributes.
  %A+        to ALLOCATE a new dataset using this one as a model.
  %B+        to ISPF BROWSE the dataset.
  %D+        to delete the dataset.
  %E+        to ISPF EDIT the dataset.
  %G+        to display space usage with a character graphic.
  %HL+       to display DFHSM information about a dataset.
  %HM+       to migrate the dataset with DFHSM.
  %HR+       to recall the dataset from DFHSM migration.
  %LB+       to list DFHSM backup version of the dataset.
  %P+        to invoke the PDS84 dialog on the dataset.
  %PR+       to print the dataset.
  %V+        to set or update the VOLSER field.
  %X+        to drop the dataset from the list.

%NOTE:+this dialog picks up on the fact that a dataset has been migrated
       displays a message to that effect if you try to do something that
       the dataset unmigrated. You have to explicitly HRECALL it first.
)PROC
  &ZCONT = EDBRHELP
  &ZUP   = EDBRHELP
)END
./       ADD   NAME=EDBRLIST
)ATTR DEFAULT(%+_)
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
      /*  + TYPE(TEXT) INTENS(LOW)       information only            */
      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
)BODY  EXPAND(//)
%EDX -/-/- List commands -/-/- EDX
%SELECTION ===>_ZCMD
%
+
+
   The following commands may be entered in the command entry field at
   the top of the screen to act on the entire list of datasets:

  %SORT+     to reorder the list by dsname,volume or last use date.
  %ADD+      to add another dataset or group of datasets to the list.
  %DROP+     to exclude some of the datasets from the list.
  %VERIFY+   to delete from the list datasets that no longer exist, and
             the VOLSERS of all others.

)PROC
  &ZCONT = EDBRLINE
  &ZUP   = EDBRHELP
)END
./       ADD   NAME=EDBRMODL
)ATTR DEFAULT(%+_)
  # TYPE(OUTPUT) INTENS(HIGH) PAD(' ')
  $ TYPE(INPUT) INTENS(HIGH) PAD(' ')
  ! TYPE(INPUT) INTENS(LOW) PAD(' ') /* INPUT FIELD PADDED WITH '
)BODY  EXPAND(//)
%EDX -/-/- Allocate a new dataset using #EDBRMDSN%as a model -/-/- EDX
%COMMAND ===>_ZCMD
%
+   Dataset Name  ......$EDBRDSNM
+   Volume Serial ......$EDBRVOLS+
+   Unit Name     ......$SYSUNIT+
+   Organization  ......$SYSDSORG+
+   Record Format ......$SYSRECFM+
+   Record Length ......$SYSLRECL+
+   Block Size    ......$EDBRBLK+
+   Allocation unit ....$SYSUNITS+
+   Allocated Space ....$SYSALLOC+     (in the above allocation units)
+   Primary Space   ....$EDBRPRIM+     (in the above allocation units)
+   Secondary Space ....$EDBRSECQ+     (in the above allocation units)
+   Directory Blocks ...$EDBRDIRB+
+
+
+ Change any of the above data and press%ENTER+to allocate
+ Press%PF3+or enter the%END+command to cancel.
     REFRESH (FIELD1,FIELD2,....)
)INIT
     .CURSOR = EDBRDSNM
     &EDBRDIRB = TRANS (&EDBRDIRB ' ',0)
)PROC
    VER (&EDBRDSNM,NB)
    VER (&EDBRDSNM,DSNAME)
    IF (&EDBRDSNM ^= &Z)
        &INPUTDSN = &EDBRDSNM
        &TEMP = TRUNC (&INPUTDSN,'''')
        &TRAIL = .TRAIL
        IF (&TRAIL = &Z)
            &EDBRDSNM = '&ZPREFIX..&INPUTDSN'
        IF (&TRAIL ^= &Z)
            &EDBRDSNM = TRUNC (&TRAIL,'''')
    IF (&INPUTDSN = &Z)
        &EDBRDSNM = &Z
    VER (&EDBRVOLS,NB)
    VER (&EDBRVOLS,PICT,CCCCCC)
    VER (&SYSUNIT,NB)
    VER (&SYSUNIT,NUM)
    VER (&SYSUNIT,LIST,3380,3375,3350,3330,MSG=EDX0009)
    VER (&SYSDSORG,NB)
    VER (&SYSDSORG,LIST,PS,PO,MSG=EDX0010)
    VER (&SYSRECFM,NB)
    VER (&SYSRECFM,LIST,F,V,FB,VB,FBA,VBA,FBM,VBM,MSG=EDX0011)
    VER (&SYSLRECL,NB)
    VER (&SYSLRECL,NUM)
    VER (&SYSLRECL,RANGE,1,32760)
    VER (&EDBRBLK,NB)
    VER (&EDBRBLK,NUM)
    VER (&EDBRBLK,RANGE,1,32760)
    VER (&SYSUNITS,NB)
    VER (&SYSUNITS,LIST,TRACK,BLOCK,CYLINDER,MSG=EDX0012)
    VER (&SYSALLOC,NB)
    VER (&SYSALLOC,NUM)
    VER (&EDBRPRIM,NB)
    VER (&EDBRPRIM,NUM)
    VER (&EDBRPRIM,RANGE,1,9999)
    VER (&EDBRSECQ,NB)
    VER (&EDBRSECQ,NUM)
    VER (&EDBRDIRB,NB)
    VER (&EDBRDIRB,NUM)
)END
./       ADD   NAME=EDBRPANL
)ATTR DEFAULT(%+_)
   ! TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')
   ^ TYPE(OUTPUT) INTENS(LOW ) CAPS(OFF) JUST(ASIS ) PAD('_')
)BODY  EXPAND(//)
%EDX -/-/- Personal Dataset Manager -/-/- EDX
%Command ===>_OPT                                  / /%Scroll ===>_AMT +
%
+Enter a line command in the selection field to process a dataset:
+
%Opt  Dataset name                                 Volume  Lstus     Las
+
)MODEL
!Z +^Z                                           +^Z     +^Z       +^Z
)INIT
  .HELP = EDBRHELP                /* INSERT NAME OF TUTORIAL PANEL
  .ZVARS = '(SELECT EDBRDSNM EDBRVOLS EDBRLSTU EDBRLSTA) '
  &AMT = PAGE
  &SELECT = &Z
  &OPT = &Z
)PROC
)END
./       ADD   NAME=EDBRPRNT
)ATTR DEFAULT(%+_)
       %   TYPE(TEXT) INTENS(HIGH)
       +   TYPE(TEXT) INTENS(LOW)
       _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
  @   TYPE(OUTPUT)  INTENS(HIGH)
)BODY  EXPAND(//)
%EDX -/-/- Print your dataset -/-/- EDX
%Command ===>_ZCMD
+
+
+
+Enter Data Set Name%===>@EDBRDSNM
+       Sysout Class%===>_POSOC+
+               Dest%===>_PODEST                +
+
+         Copy Count%===>_POCOPY+       Hold%===>_POHOLD +
+              Forms%===>_FORM+         UCS%===>_UCS +
+                FCB%===>_FCB +         Pagelength%===>_POPAGELN
+
+
+Single-Double Space%===>_POSPACE    +SS or DS or blank for CC
)INIT
 .CURSOR = POSOC
 &POSOC = TRANS (&POSOC ' ',A *,*)
 &POCOPY = TRANS (&POCOPY ' ',1 *,*)
 &PODEST = TRANS (&PODEST ' ',&Z *,*)
 &POHOLD = TRANS (&POHOLD ' ',NO *,*)
 &POPAGELN = TRANS (&POPAGELN ' ',60 *,*)
)PROC
 VER (&POSOC,NONBLANK)     VER (&POSOC,PICT,C)
 IF (&PODEST ^= &Z)
    VER(&PODEST,EBCDIC)
 VER (&POCOPY,NONBLANK)        VER (&POCOPY,NUM)
 &POHOLD = TRANS (TRUNC (&POHOLD,1) Y,HOLD H,HOLD N,NOHOLD *,*)
 VER (&POHOLD,NONBLANK)        VER (&POHOLD,LIST,HOLD,NOHOLD)
 IF (&FORM ^= &Z)
    VER (&FORM,PICT,CCCC)
 IF (&UCS ^= &Z)
    VER (&UCS,PICT,CCCC)
 VER (&POPAGELN,NONBLANK)    VER (&POPAGELN,NUM)
 &POSPACE = TRANS (TRUNC (&POSPACE,1) S,SS D,DS *,*)
 VER (&POSPACE,LIST,SS,DS)
 VPUT (PODSN POSOC PODEST POCOPY POHOLD FORM UCS ) PROFILE
 VPUT (POPAGELN  FCB) PROFILE
 VPUT (POSPACE) PROFILE
)END
./       ADD   NAME=EDDDSN
)ATTR
  ^ TYPE(INPUT) INTENS(NON)
)BODY EXPAND(ÖÖ)
%Ö-Ö  &FUNC - ENTRY PANEL  Ö-Ö
%COMMAND ===>_ZCMD
%
+ENTER PARTITIONED OR SEQUENTIAL DATA SET NAME
+   DATA SET NAME %===>_DSN
+   VOLUME SERIAL %===>_VOL   +  (if not cataloged)
+
+   PASSWORD      %===>^PASSWORD+
+
+   PROFILE NAME  %===>_PROFILE +
+   INITIAL MACRO %===>_MACRO   +
+
)INIT
)PROC
   IF (&ZCMD ^= ' ') .MSG = ISPZ001
   VER (&DSN,NB,DSNAME)
   VER (&VOL,NAME)
)END
./       ADD   NAME=EDIFPAN
)ATTR DEFAULT(%+_)
)BODY EXPAND(//)
%-/-/- Edit VSAM Dataset -/-/-
%
+VSAM Dataset:
+   Project%===>_PRJV     +
+   Group  %===>_LIBV     +
+   Type   %===>_TYPV     +
+
+Other VSAM dataset:
+   Dataset name%===>_WDSN                                            +
+
)INIT
 &ZCMD = ' '
 IF (&WDSN ^= ' ')  .CURSOR = WDSN
 .CURSOR = PRJV
)PROC
 VPUT (PRJV,LIBV,TYPV) PROFILE
 IF (&WDSN = ' ')
    &DSVSAM = '&PRJV..&LIBV..&TYPV'
    VER (&DSVSAM,DSNAME)
 ELSE
    &W = TRUNC(&WDSN,1)
    IF (&W = '''')
       &DSVSAM = .TRAIL
       &DSVSAM = TRUNC(&DSVSAM,'''')
    ELSE
       &DSVSAM = '&SYSUID..&WDSN'
    VER (&DSVSAM,DSNAME)
)END
./       ADD   NAME=ISR@PRIM
)ATTR
/* Scrollable primary option menu                                     */
/* R. F. Buxton -  BUXTON @ WINVMC                                    */
/* 10/01/84                                                           */
  # TYPE(TEXT) COLOR(pink) hilite(reverse)
  ^ area(dynamic) extend(on) scroll(on)
  $ type(dataout) intens(high) color(yellow)
  Ö type(dataout) intens(low) color(turq)
  @ type(dataout) intens(high) color(green)
)BODY WIDTH(&ZSCREENW) EXPAND(//)
%---------------/-/- #ISPF-PDF 3.2.0 PRIMARY OPTION MENU %--/-/---------
%OPTION  ===>_ZCMD                           / /              +SCROLL ==
+
+ ^DYNAREA
+
+ Use UP and DOWN PF keys or commands to scroll MENU
)INIT
&LINELEN = 76                  /* Length of dynamic area lines      */
/* Date and time reformatting   */
/* Format date */
  &TEMP = TRANS (&ZDAY 01,1 02,2 03,3 04,4 05,5 06,6 07,7 08,8 09,9 *,*)
  &MONTH = TRANS (&ZMONTH 01,January 02,February 03,March
                          04,April   05,May      06,June
                          07,July    08,August   09,September
                          10,October 11,November 12,December)
  &DATE = '&MONTH &TEMP'
  &YRMON = '&ZYEAR.&ZMONTH'
  &DAY1 = TRANS( &YRMON
     8501,3  8601,4   8701,5
     8502,6  8602,7   8702,1
     8503,6  8603,7   8703,1
     8504,2  8604,3   8704,4
     8505,4  8605,5   8705,6
     8506,7  8606,1   8706,2
     8507,2  8607,3   8707,4
     8508,5  8608,6   8708,7
     8509,1  8609,2   8709,3
     8510,3  8610,4   8710,5
     8511,6  8611,7   8711,1
     8512,1  8612,2   8712,3
     ) /* Calculate day of week of first day of month */
  &TEMP = TRANS (&ZDAY 01,1 02,2 03,3 04,4 05,5 06,6 07,7 08,1 09,2 10,3
                  11,4 12,5 13,6 14,7 15,1 16,2 17,3 18,4 19,5 20,6 21,7
                  22,1 23,2 24,3 25,4 26,5 27,6 28,7 29,1 30,2 31,3)
  IF (&DAY1 = 1)
   &DOW = TRANS(&TEMP 1,Sun 2,Mon 3,Tues 4,Wednes 5,Thurs 6,Fri 7,Satur)
  IF (&DAY1 = 2)
   &DOW = TRANS(&TEMP 7,Sun 1,Mon 2,Tues 3,Wednes 4,Thurs 5,Fri 6,Satur)
  IF (&DAY1 = 3)
   &DOW = TRANS(&TEMP 6,Sun 7,Mon 1,Tues 2,Wednes 3,Thurs 4,Fri 5,Satur)
  IF (&DAY1 = 4)
   &DOW = TRANS(&TEMP 5,Sun 6,Mon 7,Tues 1,Wednes 2,Thurs 3,Fri 4,Satur)
  IF (&DAY1 = 5)
   &DOW = TRANS(&TEMP 4,Sun 5,Mon 6,Tues 7,Wednes 1,Thurs 2,Fri 3,Satur)
  IF (&DAY1 = 6)
   &DOW = TRANS(&TEMP 3,Sun 4,Mon 5,Tues 6,Wednes 7,Thurs 1,Fri 2,Satur)
  IF (&DAY1 = 7)
   &DOW = TRANS(&TEMP 2,Sun 3,Mon 4,Tues 5,Wednes 6,Thurs 7,Fri 1,Satur)
  &DOW = 'day'
/* Format time of day */
  &TEMP = TRUNC (&ZTIME,':')
  &AMPM = 'A.M.'
  IF (&TEMP = 12,13,14,15,16,17,18,19,20,21,22,23)
    &AMPM = 'P.M.'
  &HR = TRANS (&TEMP 00,12 01,1 02,2 03,3 04,4 05,5 06,6 07,7 08,8 09,9
          13,1 14,2 15,3 16,4 17,5 18,6 19,7 20,8 21,9 22,10 23,11 *,*)
  &TEMP = .TRAIL
  &DTIME = '&HR:&TEMP &AMPM'
/* Format message lines */
  &TEMP = 'ÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖ'
  &DMSG='ÖThe time is@&DTIMEÖon@&DOW.,'
  &DMSG='&DMSG.@&DATE., 19&ZYEAR (&ZJDATE.)&TEMP'
  &DMSG = TRUNC (&DMSG,&LINELEN)
  &TMSG1= 'ÖUserid is$&ZUSER.,ÖDataset prefix is@&ZPREFIX.,'
  &TMSG1= '&TMSG1.ÖLogonÖprocedureÖis@&ZLOGON.,'
  &TMSG1= '&TMSG1.&TEMP'
  &TMSG1 = TRUNC (&TMSG1,&LINELEN)
  &TMSG2='ÖTerminal is a@&ZTERMÖwith@&ZKEYSÖPFÖkeys,'
  &TMSG2= '&TMSG2. Screen size@&ZSCREENWÖby@&ZSCREEND'
  &TMSG2= '&TMSG2.&TEMP'
  &TMSG2 = TRUNC (&TMSG2,&LINELEN)
  &SPFLVL = TRUNC (&ZENVIR,8)
  &OSNAME = .TRAIL
  &OSNAME = TRUNC (&OSNAME,8)
  &OSLVL = .TRAIL
  &OSLVL = TRUNC (&OSLVL,8)
  &TMSG3 = 'ÖEnvironment is@&SPFLVLÖunder@&OSNAMEÖand@&OSLVL.&TEMP'
  &TMSG3 = TRUNC (&TMSG3,&LINELEN)
/* Normal primary option menu initialization  */
  .HELP = ISR00003
  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */
  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */
  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */
  VPUT (ZHTOP,ZHINDEX) PROFILE
/* Define data to be scrolled                                       */
/* All lines must be same length as dynamic area in panel body     */
&MENU = '+
&DMSG.+

$AM   ÖIDCAMS     - Access method serv
$B    ÖBUGS       - Problem Management System
$BG   ÖBLDGDG     - Build a GDG Base
$BKM  ÖBACKMEUP   - Generate backup JCL
$BLK  ÖBLKSIZE    - Pick a block size
$BN   ÖBINGO      - Maintain bingo card file
$BRO  ÖBROWSE     - ISPF browse
$C    ÖCDF        - Console display.
$CC   ÖCCGEN      - Generate ctl cards
$CF   ÖCONFIG     - Terminal configuration
$CN   ÖCONVCLST   - VB -> FB, FB -> VB.
$CO   ÖCOMMANDS   - Create/change command table
$CPE  ÖCPEPROT    - SAS/CPE starter set
$CSPAÖ CSP/AE     - Cross System Product/Application Execution
$CSPDÖ CSP/AD     - Cross System Product/Application Development
$DB   ÖDB2/QMF    - DB2I/QMF against DB2-TEST data base
$DBT  ÖDB-TOOLS   - IMS 2.2 DBTOOLS - Historical Data Analyzer -
$DF   ÖDF/DSS     - DF/DSS
$DM   ÖDISKMAP    - Good old diskmap.
$DS   ÖDSTATS     - Dataset statistics.
$DTL  ÖISPDTLC    - ISPF DTL Conversion Utility
$E    ÖEDX        - Personal dataset manager
$EDIT ÖEDIT       - ISPF edit
$EP   ÖEPILOG     - OMEGAMON historical component
$FC   ÖLISTFCB    - Interpret an FCB.
$FD   ÖFDSPACE    - Fullscreen dspace
$FM   ÖFINDMAC    - Identify macros.
$G    ÖGRS        - Display ENQ data
$H    ÖHSM        - Hysterical storage mangler
$I    ÖISMF       - Interactive system management facility
$ICF  ÖICFA       - Information center facility - user -
$ICFA ÖICFA       - Information center facility - admin -
$IP   ÖIPCS       - Interactive Problem Control System (IPCS)
$ISS  ÖISSPACE    - DASD Free Space Display
$J    ÖJSX        - JES/328X printer control.
$JT   ÖJOBTRAC    - Job Scheduling
$L    ÖLOGREC     - EREP (batch/tso).
$LI   ÖAMBLIST    - List
$LS   ÖLSP0ACE    - ISPF lspace
$M    ÖSLSS       - List manuals.
$MIII ÖRMF-III    - MVS/ESA RMF-MONITOR III
$MTT  ÖMTTESA     - Display master trace table
$N    ÖNOCELL     - Dataset analysis.
$NA   ÖNAMES      - Business Cards.
$O    ÖOMEGAMON   - Omegamon II for MVS
$PD   ÖPDSEXREF   - Compare directories
$PH   ÖPHONE      - Phone list
$PP   ÖISPPREP    - Preprocessed panel utility
$PR   ÖPRINT      - PRINTOFF
$Q    ÖLST0A      - Allocated datasets.
$RACF ÖRACF 1.9   - RACF 1.9  On LIne facilities
$RD   ÖRACFDSET   - Display RACF dataset profiles
$READÖ READ/MVS   - BookManager READ/MVS (OnLine Documentation)
$RG1  ÖRACFGRP1   - Display RACF groups and subgroups
$RG2  ÖRACFGRP2   - Display RACF groups and users
$RI  Ö READ/INDEX - BookManager READ/MVS (BookShelf Index Creation)
$RMO Ö RMO        - Express Delivery
$RU   ÖRACFUSER   - Display RACF userids
$S    ÖSAS        - Statistical Analysis System
$SAR  ÖSAR        - Sysout archival and retrieval
$SC   ÖSCLM       - Software Configuration and Library Manager
$SD   ÖSDSF       - Spool Display and Search Facility
$SDF  ÖSDF        - Screen Definition Facility  II
$SE   ÖSEND       - Messages to other users
$SL   ÖSOFTLOG    - Software LOGREC
$SMP  ÖSMP        - System Modification Program  version 1.6.0
$T    ÖTUTORIAL   - Display information about SPF
$TA   ÖTASID      - System activity display
$TD   ÖTO DO      - Stuff i gotta do.
$TP   ÖTPAN       - Display ISPF panels
$TPX  ÖTPANX      - Load and unload ISPF panels
$U    ÖRMF-FORMAT - MVS/ESA RMF-MONITOR Format Definition
$UL   ÖULXL01     - Free space extents.
$V    ÖVTAM       - Enter network commands.
$VEN  ÖVENDORS    - Hardware/Software Vendors
$W    ÖSORT       - Get it in order.
$X    ÖEXIT       - Terminate SPF using list/log defaults
$XD   ÖXDF        - Whats happening?
$Y    ÖARCH-DEF   - SCLM Architecture Definitions (ARCHDEF)
$0    ÖSPF PARMS  - Specify terminal and SPF parameters
$3    ÖUTILITIES  - Perform SPF utility functions
$4    ÖFOREGROUND - Compile, assemble, link edit, or debug
$5    ÖBACKGROUND - Compile, assemble, or link edit
$6    ÖCOMMAND    - Enter TSO command or CLIST
$7    ÖSUPPORT    - Test dialog or convert menu/message formats
$10   ÖCA1-TMS    - CA-1 (Tape Management System)
$
&TMSG1.+
&TMSG2.+
&TMSG3.+
ÖEnter END command to terminate ISPF.
/* End of scrollable data */
IF (&CUTP = ' ') &CUTP = 0     /* Initialize to display top of menu */
IF (&PSCR = ' ') &PSCR = PAGE  /* Initialize scroll amount          */
&JUNK = TRUNC(&MENU,&CUTP)     /* Truncate menu display by scroll   */
&DYNAREA = .TRAIL              /* Portion of menu to be displayed   */
)PROC
  &LASTLN = LVLINE(DYNAREA)    /* Last visible line of dynamic area */
  IF (&ZCMD ^= ' ')                  /* FOR APAR OZ73889  */
    &ZQ = TRUNC(&ZCMD,'.')           /* FOR APAR OZ73889  */
    IF (&ZQ = ' ')                   /* FOR APAR OZ73889  */
      .MSG = ISPD241                 /* FOR APAR OZ73889  */
  &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                A,'PGM(CACTVATE) NEWAPPL(CACT)'
               AM,'PANEL(AMSMENU) NEWAPPL(AMS) '
                B,'CMD(%BUGS) NEWAPPL(BUGS) '
               BG,'PANEL(BLDGDG) '
              BLK,'PANEL(BLKOPT01) '
              BKM,'PANEL(BACKMEUP) '
               BN,'CMD(%BINGO) '
              BRO,'PGM(ISRBRO) PARM(ISRBRO01)'
                C,'PGM(CDF) '
               CC,'CMD(%CCGEN) '
               CF,'CMD(%TECCNFG) '
               CN,'PANEL(CONVCLST) '
               CO,'PANEL(ISPUCMA)'
              CPE,'CMD(%CPEPROT) '
CSPD,'PGM(ISRALTDI) PARM(DCACSPAD,+,ISRDCSPD,*,ISRDCSP1) NOCHECK'
CSPA,'PGM(ISRALTDI) PARM(DCBCSPAE,+,ISRDCSPE,*,ISRDCSP2) NOCHECK'
               DB,'PANEL(DB2@PRIM)'
               DBT,'PANEL(FABGP000) NEWAPPL(DBT)'
               DF,'PANEL(DFDSS) NEWAPPL(DFDS) '
               DM,'PANEL(DISKMAP) '
               DS,'PANEL(DSTATS) '
              DTL,'CMD(%ISPDTLC)'
                E,'CMD(%EDX) '
             EDIT,'PGM(ISREDIT) PARM(P,ISREDM01)'
               EP,'CMD(%KEDSPF) '
               FC,'CMD(%LISTFCB) '
               FD,'CMD(%FDSPACE) '
               FM,'PANEL(FINDMAC) '
                G,'PGM(VUTL16) '
                H,'PGM(DFQFMD01) NEWAPPL(HSM) '
                I,'PGM(DGTFMD01) NEWAPPL(DGT) NOCHECK '
              ICF,'CMD(ICQAMLI0 APPLNAME(ICQUSER))   NEWAPPL(ICFU)'
             ICFA,'CMD(ICQAMLI0 APPLNAME(ICQADMIN))  NEWAPPL(ICFA)'
               IP,'PGM(BLSG) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG)'
              ISS,'CMD(%ISSPACE) '
                J,'CMD(%JSXPRTC) '
               JT,'CMD(%TCLIST3) '
                L,'CMD(%EREP) '
               LI,'CMD(%AMBLIST) '
               LS,'PGM(LSP0ACE) '
                M,'CMD(%SLSS)   '
             MIII,'CMD(%ERBRMF3X  PARM(T))     NEWAPPL(ERBS)'
              MTT,'CMD(%MTT)    '
                N,'CMD(%NOCELL) NEWAPPL(NOCL) '
               NA,'CMD(%NAMES) '
                O,'PANEL(OMSPF02) NEWAPPL(OMEG)'
                P,'PANEL(P84PN@P) '
               PD,'CMD(%PDSEXREF) '
               PH,'CMD(%PHONE) '
               PP,'PGM(ISPPREP) NEWAPPL'
               PR,'PANEL(PRINTOFF) NEWAPPL(PRNT) '
                Q,'PGM(LST0A)    '
             RACF,'PANEL(ICHP00)               NEWAPPL(RACF)'
               RD,'PGM(RACFDSET) '
READ,'CMD(%EOXVSTRT) MODE(FSCR) SUSPEND NOCHECK NEWAPPL(EOXR)'
  RI 'CMD(%BKINDEX)'
              RG1,'PGM(RACFGRP1) '
              RG2,'PGM(RACFGRP2) '
              RMO,'PGM(RMOSPF) PARM(RMO.SYSTEM1) NEWAPPL(RMO) '
               RU,'PGM(RACFUSER) '
                S,'CMD(%SASMAIN) '
              SAR,'PGM(SARSPF) PARM(SAR.SYSTEM1) NEWAPPL(SAR) '
               SC,'PGM(ISRSCLM) NOCHECK'
               SD,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'
              SDF,'PANEL(SDF@TSG)              NEWAPPL(DGI)'
               SE,'PANEL(SEND#P) '
               SL,'CMD(%SOFTLOG) '
             SMP,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK  NEWAPPL(GIM)'
                T,'PGM(ISPTUTOR) PARM(ISR00000) '
               TA,'PGM(TASID) '
               TD,'CMD(%SPTASKDR) '
               TP,'CMD(%TPAN2A) NEWAPPL(TPAN)'
              TPX,'CMD(%TPANX) NEWAPPL(TPAN)'
                U,'CMD(%ERBRMF3U)              NEWAPPL(ERBU)'
               UL,'PGM(ULXL01)   '
                V,'PGM(SP1TC014) '
              VEN,'CMD(%XXVEND01)'
                W,'PGM(ICEPMD01) PARM(&ZCMD) NEWAPPL(ICE) NOCHECK '
                X,'EXIT'
               XD,'PGM(JOB0LIST) '
                Y,'PANEL(TSGSCLM)              NEWAPPL(ARCH)'
                0,'PANEL(ISPOPTA)'
                1,'CMD(%EDX) '
                2,'CMD(%EDX) '
                3,'PANEL(ISRUTIL)'
                4,'PANEL(ISRFPA)'
                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'
                6,'PGM(RTSO)'
                7,'PGM(ISPYXDR) PARM(ISR) NOCHECK'
               10,'PGM(U01IOPRI)               NEWAPPL(U01) NOCHECK '
 /* Check for scrolling: tuncation point, scroll data,               */
 /* last visible line, length of lines                               */
                '  ','CMD(%SCROLL CUTP MENU LASTLN LINELEN)'
                *,'?' )
  IF (&ZCMD = 'S')
      &ZSEL = 'PGM(ISFISP) NOCHECK  NEWAPPL(ISF)'
  &ZTRAIL = .TRAIL
)END
)CM           SMP,'PGM(GIMISCV) PARM(&ZCMD) NEWAPPL(GIM)'
./       ADD   NAME=ISRBROB
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
 01 TYPE(DATAOUT) INTENS(LOW)
 02 TYPE(DATAOUT) INTENS(HIGH)
 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)
 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)
 0D TYPE(DATAOUT) INTENS(HIGH) FORMAT(&MIXED)
 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)
 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)
 12 TYPE(DATAOUT) INTENS(LOW)  FORMAT(&MIXED)
)BODY WIDTH(&ZWIDTH) EXPAND(//)
%BROWSE - &ZTITLE -----------------------------/-/-----%LINE!ZLINES%COL!
%COMMAND ===>_ZCMD                             / /            %SCROLL ==
×ZDATA ---------------------------------/ /-----------------------------
×                                       / /
× --------------------------------------/-/-----------------------------
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  .ZVARS = 'ZSCBR'         /* SCROLL AMT VARIABLE NAME  */
  IF (&ZMEMB ^= ' ')
    &ZTITLE = '&ZDSNT(&ZMEMB)&ZLEVEL '       /* OZ91708 */
  IF (&ZMEMB = ' ')
    &ZTITLE = '&ZDSN&ZLEVEL '
  &MIXED = MIX
  IF (&ZPDMIX = N)         /* EBCDIC MODE REQUESTED     */
    &MIXED = EBCDIC

  &BRDSN = &ZDSN
  &BRMEM = &ZMEMB
  VPUT (BRDSN BRMEM) PROFILE

)REINIT
  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)
  .ATTRCHAR(+) = 'INTENS(&ZINTEN)'

)PROC
  &ZCURSOR = .CURSOR
  &ZCSROFF = .CSRPOS
  &ZLVLINE = LVLINE(ZDATA)

)END

/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)
/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)
./       ADD   NAME=ISRBROBF
)ATTR
   _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
   + TYPE(TEXT) INTENS(LOW)
)BODY  WIDTH(&ZWIDTH) EXPAND(//)
%BROWSE ----------------------------------/-/---------------------------
%COMMAND ===>_ZCMD                        / /                 %SCROLL ==
)INIT
  .HELP = ISR10000
  .ZVARS = 'ZSCBR'
  &MIXED = MIX             /* SET FROMAT MIX            */
  IF (&ZPDMIX = N)         /* IF EBCDIC MODE REQUESTED  */
    &MIXED = EBCDIC        /*  SET FORMAT EBCDIC        */
  VPUT (ZDSN,ZMEMB)        /* PRC MODS */
  &BRDSN = &ZDSN
  &BRMEM = &ZMEMB
  VPUT (BRDSN BRMEM) PROFILE
)PROC
)END
./       ADD   NAME=ISREDDE
)ATTR
   _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
)BODY  WIDTH(&ZWIDTH) EXPAND(//)
%EDIT ------------------------------------/-/---------------------------
%COMMAND ===>_ZCMD                        / /                 %SCROLL ==
)INIT
  .HELP = ISR20000
  .ZVARS = 'ZSCED'
  &MIXED = MIX             /* SET FROMAT MIX            */
  IF (&ZPDMIX = N)         /* IF EBCDIC MODE REQUESTED  */
    &MIXED = EBCDIC        /*  SET FORMAT EBCDIC        */
  VPUT (ZDSN,ZMEMB)        /* PRC MODS */
  &BRDSN = &ZDSN
  &BRMEM = &ZMEMB
  VPUT (BRDSN BRMEM) PROFILE
)REINIT
 IF (&EDITSW ^= &Z)
     .CURSOR = ZCMD
     .CSRPOS = 1
     &EDITSW = &Z
)PROC
 IF (.RESP = ENTER)
     IF (&ZCMD = '?')
         &ZCMD = &EDITZCMD
         REFRESH (ZCMD)
         &ZEDSMSG = 'RECALL COMPLETED'
         &ZEDLMSG = 'BY ENTERING A "?" YOU HAVE +
         RECALLED YOUR LAST EDIT COMMAND'
         &EDITSW = ON
         .MSG = ISRZ000
     IF (&ZCMD ^= '?',&Z)
         &EDITZCMD = &ZCMD
         VPUT (EDITZCMD) PROFILE
)END
./       ADD   NAME=ISRFP01
)ATTR
   ^ TYPE(INPUT) INTENS(NON)
)BODY
%--------------------------  FOREGROUND ASSEMBLY  ----------------------
%COMMAND ===>_ZCMD
%
+ISPF LIBRARY:
+   PROJECT%===>_PRJ1    %
+   GROUP  %===>_LIB1    % ===>_LIB2    % ===>_LIB3    % ===>_LIB4    %
+   TYPE   %===>_TYP1    %
+   MEMBER %===>_MEM     +       (Blank for member selection list)
+
+OTHER PARTITIONED OR SEQUENTIAL DATA SET:
+   DATA SET NAME %===>_DSN
+
+LIST ID%===>_LID     +                   PASSWORD%===>^PSWD    %
+
+ASSEMBLER OPTIONS:   (Options%LIB, LOAD,+and%PRINT+generated automatica
+       %===>_FASM
+
+ADDITIONAL INPUT LIBRARIES:
+       %===>_FAL1
+       %===>_FAL2
+
)INIT
  .HELP = ISR41000
  &TYP1 = &ASMT                         /*ASSEMBLER TYPE VARIABLE NAME*/
  IF (&ZORG = 'PS')
    IF (&LID = ' ')      .CURSOR = LID
  IF (&DSN ^= ' ')
    IF (.CURSOR = ' ')   .CURSOR = DSN
  &LID  = ' '
  IF (&ZFTEMP = '')
    &ZFPACK = &ZFPACK
    VPUT (ZFPACK) SHARED
    &ZFTEMP = '0'
  &ZSM = TRANS(TRUNC(&ZSMMODE,1),Y,YES,*,NO)
)PROC
  IF (&ZCMD ^= ' ')  .MSG = ISPZ001     /* INVALID COMMAND            */
  IF (&LID ^= '*')  VER (&LID,NAME)     /* LIST ID MUST BE VALID NAME */
  VER (&FAL1,DSNAME)                    /* VERIFY ADDITIONAL LIB1     */
  VER (&FAL2,DSNAME)                    /* VERIFY ADDITIONAL LIB2     */
  &ASMT = &TYP1                         /* SAVE ASSEMBLER TYPE        */
  &ZSEL = 'CMD(%ISRFC01)'               /* EXECUTE ASSEMBLE CLIST     */
  IF (.RESP = END ) &ZSM = NO
  VPUT (PRJ1,LIB1,LIB2,LIB3,LIB4,ASMT,PSWD,FASM,FAL1,FAL2,ZSM) PROFILE
  VPUT (PRJ1,LIB1,LIB2,LIB3,LIB4,ASMT,PSWD,FASM,FAL1,FAL2,DSN,LID) SHARE
  &ZFBROWS = 'ISRBROB ' /*BROWSE LISTING   , IF BLANK NO AUTO BROWSE  */
  &ZFPRINT = 'ISRFPPRT' /*PRINT PANEL NAME, IF BLANK NO AUTO PRINT PNL*/
  VPUT (ZFBROWS,ZFPRINT) SHARED
)END
./       ADD   NAME=ISRTSO
)ATTR         /* IBM INTERNAL USE ONLY       */
/*********************************************************************/
/* ISRTSO - Input panel for handling TSO Input                       */
/* Hans Braun, D2097/ PPDC Sindelfingen  - BRA at SDFMVS4            */
/* Karl-Heinz Kuppinger, Boeblingen Lab  - BKUP at BOEVS01           */
/*$MAC(ISRTSO),PROD(LISTAF),COMP(LAF230): ISPF TSO COMMAND PANEL     */
/*$A0=BASE,BRALAF,860930,BRA: LISTAF BASE                            */
/*$A1=MISC1,BRALAF,871122,BRA: Increase input count              @A1A*/
/*$A2=V23,BRALAF,880422,BKUP: ISPF V23 Support                   @A2A*/
/*                                                                   */
/*********************************************************************/
  " TYPE(TEXT)  COLOR(YELLOW)                 /* Change sysmbol
  ! TYPE(INPUT) INTENS(HIGH) COLOR(PINK) CAPS(OFF) JUST(ASIS)
  ~ TYPE(INPUT) INTENS(HIGH) COLOR(PINK) HILITE(REVERSE) CAPS(OFF) JUST(
  $ TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(ASIS)
  # TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
)BODY EXPAND(||)
%|-|"TSO Command Processor%|-|
%ISPF COMMAND ===>_ZCMD
+Enter new%TSO-Command+or position cursor on %Command-line+ to be execut
%===>!TSOCMD1
%===>$TSOCMD2
%===>$TSOCMD3
%===>$TSOCMD4
%===>$TSOCMD5
%===>$TSOCMD60
#    $TSOCMD61
%===>$TSOCMD70
#    $TSOCMD71
#    $TSOCMD72
%===>$TSOCMD8
%===>$TSOCMD9
%===>$TSOCMDA
%===>$TSOCMDB
%===>$TSOCMDC
%===>$TSOCMDD
%===>$TSOCMDE
%===>$TSOCMDF
)INIT  /* INIT SECTION EXECUTE BEFORE DISPLAY                         */
 .HELP = ISR60010
 &TSOC = TRUNC(&TSOCMDFL,6)                                /*
 &TSOC = .TRAIL                                            /*
 IF ( &TSOC ^= 1,2,3,4,5,60,61,70,71,72,8,9,A,B,C,D,E,F,G )/* Check code
   &TSOCMDFL = TSOCMD1                                     /* Save code
 IF ( &TSOCMDFL = &Z )                                     /*
   &TSOCMDFL = TSOCMD1                                     /*
 .CURSOR = &TSOCMDFL                                       /* Set cursor
 &PTCBTEXT = ' '
)PROC  /* PROC SECTION EXECUTE AFTER  DISPLAY                         */
 &ZSM = NO
 &TSOCMDFL = .CURSOR                                       /*
 IF ( .RESP = ENTER )
  IF ( &ZCMD ^= ' ' )                             /* IF INVALID COMMAND
    .MSG = ISPZ001                                /* SET MESSAGEID
    &TSOCMDFL = ZCMD                                       /*
  IF ( &TSOCMDFL = TSOCMD1 )                               /*
    &PTCBTEXT = &TSOCMD1                                   /*
  IF ( &TSOCMDFL = TSOCMD2 )                               /*
    &PTCBTEXT = &TSOCMD2                                   /*
  IF ( &TSOCMDFL = TSOCMD3 )                               /*
    &PTCBTEXT = &TSOCMD3                                   /*
  IF ( &TSOCMDFL = TSOCMD4 )                               /*
    &PTCBTEXT = &TSOCMD4                                   /*
  IF ( &TSOCMDFL = TSOCMD5 )                               /*
    &PTCBTEXT = &TSOCMD5                                   /*
  IF ( &TSOCMDFL = TSOCMD60,TSOCMD61 )                     /*
    &PTCBTEXT = '&TSOCMD60&TSOCMD61'                       /*
  IF ( &TSOCMDFL = TSOCMD70,TSOCMD71,TSOCMD72 )            /*
    &PTCBTEXT = '&TSOCMD70&TSOCMD71&TSOCMD72'              /*
  IF ( &TSOCMDFL = TSOCMD8 )                               /*
    &PTCBTEXT = &TSOCMD8                                   /*
  IF ( &TSOCMDFL = TSOCMD9 )                               /*
    &PTCBTEXT = &TSOCMD9                                   /*
  IF ( &TSOCMDFL = TSOCMDA )                               /*
    &PTCBTEXT = &TSOCMDA                                   /*
  IF ( &TSOCMDFL = TSOCMDB )                               /*
    &PTCBTEXT = &TSOCMDB                                   /*
  IF ( &TSOCMDFL = TSOCMDC )                               /*
    &PTCBTEXT = &TSOCMDC                                   /*
  IF ( &TSOCMDFL = TSOCMDD )                               /*
    &PTCBTEXT = &TSOCMDD                                   /*
  IF ( &TSOCMDFL = TSOCMDE )                               /*
    &PTCBTEXT = &TSOCMDE                                   /*
  IF ( &TSOCMDFL = TSOCMDF )                               /*
    &PTCBTEXT = &TSOCMDF                                   /*
  IF ( &TSOCMDFL = TSOCMDG )                               /*
    &PTCBTEXT = &TSOCMDG                                   /*
  /* add TSOCMDG to VPUT, if more selections wanted
  VPUT (TSOCMD1 TSOCMD2 TSOCMD3 TSOCMD4 TSOCMD5 TSOCMD8 TSOCMD9 /*
    TSOCMDA TSOCMDB TSOCMDC TSOCMDD TSOCMDE TSOCMDF        /*
    TSOCMD60 TSOCMD61 TSOCMD70 TSOCMD71 TSOCMD72 TSOCMDFL) SHARED /*
  VPUT (TSOCMD1 TSOCMD2 TSOCMD3 TSOCMD4 TSOCMD5 TSOCMD8 TSOCMD9 /*
    TSOCMDA TSOCMDB TSOCMDC TSOCMDD TSOCMDE TSOCMDF             /*
    TSOCMD60 TSOCMD61 TSOCMD70 TSOCMD71 TSOCMD72 TSOCMDFL) PROFILE /*
  &PTCLOG = 'Y'          /* Y = YES, LOG COMMANDS. N = NO LOGGING
  &Z6MODE = '          ' /* "MODE(LINE)" to have command run in
                         /* line mode, "MODE(FSCR)" to have the
                         /* command run in full screen mode
  &ZSMMODE = N                                             /*
  VPUT (ZSMMODE) PROFILE                                   /*
)END
./       ADD   NAME=ISSPANL0
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
  @ TYPE(OUTPUT) COLOR(YELLOW)
  ^ TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')
)BODY EXPAND(//)
%ISSPACE + DASD FREE SPACE -/-/----%LINE!ZLINES%COL!ZCOLUMS%
+COMMAND ===>_ZCMD                             / /            %SCROLL ==

)MODEL
@ORECRD
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  &AMT    = CSR
)PROC
  &ISPLROWS = &ZTDSELS
)END
./       ADD   NAME=ISSPANL1
)ATTR DEFAULT(%+_)
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
      /*  + TYPE(TEXT) INTENS(LOW)       information only            */
      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
  $ TYPE(INPUT) INTENS(LOW) PAD(_)    /* input field padded with '_' */
  ! TYPE(INPUT) INTENS(LOW) PAD(' ')  /* input field padded with ' ' */
)BODY EXPAND(//)
%ISSPACE + DASD FREE SPACE -/-/-
%COMMAND ===>_ZCMD
%
+   Enter the%volser prefix+of the volume pool you want information on:
+
+   Volume Prefix ......$ISPPRF+
+
)INIT
    .CURSOR = ISPPRF
)PROC
    VER (&ISPPRF,NB)
)END
./       ADD   NAME=MIPANEL
)ATTR DEFAULT(%+_)
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
      /*  + TYPE(TEXT) INTENS(LOW)       information only            */
      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
  $ TYPE(INPUT) INTENS(LOW) PAD(_) CAPS(OFF)
  ! TYPE(INPUT) INTENS(LOW) PAD(_) CAPS(On)
)BODY  EXPAND(//)
%Mass Insert -/-/- Parameters -/-/- Mass Insert
%COMMAND ===>_ZCMD
%
+   Enter details below:
+
+   Identifier .........$MIID                                     +
+   Direction ..........!MIDIR + (A,B,AFTER,BEFORE)               +
+   Line to be inserted
$MILINE
+
+Where%Identifier+is a character string contained in the lines after whi
+ insert is to take place,%Direction+ specifies insertion before or afte
+ specified line and%line to be inserted+is the new line.
+
)INIT
 &MIDIR  = TRANS (&MIDIR  ' ',AFTER *,*)
)PROC
    VER (&MIID,NB)
    VER (&MIDIR,NB)
    VER (&MIDIR,LIST,A,B,AFTER,BEFORE)
    VER (&MILINE,NB)
)END
./       ADD   NAME=RACDPANL
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
  @ TYPE(OUTPUT) INTENS(LOW)
  ^ TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')
)BODY EXPAND(//)
%RACFDSET+ LIST OF RACF DATASET PROFILES  -/-/-----%LINE!ZLINES%COL!ZCOL
+COMMAND ===>_ZCMD                             / /            %SCROLL ==
   %DSNAME                                       OWNER    U --USER-- A P
)MODEL
   @ORECRD
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  &SELECT = ' '
  &AMT    = CSR
)PROC
  &ISPLROWS = &ZTDSELS
)END
./       ADD   NAME=RACGPNL0
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
  @ TYPE(OUTPUT) INTENS(LOW)
  ^ TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')
)BODY EXPAND(//)
%RACFGRES+ LIST OF RACF GENERAL RESOURCES -/-/----%LINE!ZLINES%COL!ZCOLU
+COMMAND ===>_ZCMD                             / /            %SCROLL ==
   %NAME     CLASS    OWNER    U AUTH-USR A
)MODEL
   @ORECRD
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  &AMT    = CSR
)PROC
  &ISPLROWS = &ZTDSELS
)END
./       ADD   NAME=RACGPNL1
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
  @ TYPE(OUTPUT) INTENS(LOW)
  ^ TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')
)BODY EXPAND(//)
%RACFGRP1+ LIST OF RACF GROUPS & SUBGROUPS -/-/----%LINE!ZLINES%COL!ZCOL
+COMMAND ===>_ZCMD                             / /            %SCROLL ==
    %GROUP    SUP-GRP  OWNER    U N    # SUBGROUP NAME
)MODEL
   @ORECRD
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  &AMT    = CSR
)PROC
  &ISPLROWS = &ZTDSELS
)END
./       ADD   NAME=RACGPNL2
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
  @ TYPE(OUTPUT) INTENS(LOW)
  ^ TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')
)BODY EXPAND(//)
%RACFGRP2+ LIST OF RACF GROUPS AND USERS  -/-/-----%LINE!ZLINES%COL!ZCOL
+COMMAND ===>_ZCMD                             / /            %SCROLL ==
   %GROUP    SUP-GRP  OWNER             USER
)MODEL
   @ORECRD
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  &AMT    = CSR
)PROC
  &ISPLROWS = &ZTDSELS
)END
./       ADD   NAME=RACUPANL
)ATTR
  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH) FORMAT(&MIXED)
  × AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)
  + TYPE(TEXT) INTENS(LOW)
  ! TYPE(OUTPUT) INTENS(HIGH) PAD(-)
  @ TYPE(OUTPUT) INTENS(LOW)
  ^ TYPE( INPUT) INTENS(HIGH) CAPS(ON ) JUST(LEFT ) PAD('''')
)BODY EXPAND(//)
%RACFUSER+ LIST OF RACF USER IDS  -/-/-----%LINE!ZLINES%COL!ZCOLUMS%
+COMMAND ===>_ZCMD                             / /            %SCROLL ==
   %USERID   NAME                 OWNER    GROUP    -FLG- LAST-USE PWD-C
)MODEL
   @ORECRD
)INIT
  .HELP = ISR10000         /* DEFAULT TUTORIAL NAME     */
  &AMT    = CSR
)PROC
  &ISPLROWS = &ZTDSELS
)END
