./       ADD   NAME=ISSPACE
         PRINT NOGEN
ISSPACE  TITLE 'ISPF DIALOG -  DASD SPACE INFO  04DEC91 - LANE.'
********************************************************************
*                  T-S-D-S-P-A-C-E
*      PROGRAM TO PRINTOUT AVAILABLE SPACE ON A DISK DRIVE
*      USES LSPACE (SVC 78)  FUNCTION
*      ALSO DETERMINES IF PACK HAS INDEXED VTOC
*      PRODUCED FROM DISASEMBLY OF ORIGINAL OBJECT MODULE
*      W F HARTMAN MAY 1981
*            CODE FROM CBTV224   - CLARK
*      RE-WORKED:
*        RENT; %FREE SPACE; UNIT NAME; NO. USERS;ALT PATH, PATH MASK
*        ADDED XA SUPPORT
********************************************************************
*-------------------------------------------------------------*    @TEC
* UPDATED 04/12/91. USE DEVTYPE MACRO WITH UCBLIST OPERAND TO *    @TEC
*  OBTAIN DEVICE GEOMETRY. COPY RESULTS TO INTERNAL TABLE.    *    @TEC
*  SHOULD SUPPORT 3390'S. JIM LANE ... TORONTO HYDRO          *    @TEC
*-------------------------------------------------------------*    @TEC
         MACRO
&N       @ED   &OU,&WK
&N       MVC   &OU,OTMASK          MOVE MASK
         L     R0,&WK              GET DATA
         CVD   R0,WD               MAKE PACKED
         ED    &OU,WD+4            EDIT IT
         MEND
ISSPACE  @ENT  R12,(0,DSAEND-DSA,C),DSA=YES
         XC    WKCLRS(WKCLRL),WKCLRS  CLEAR COUNTERS
         MVC   VOLPRM(3),=C'ALL'   SET DEFAULT                     @TEC
         MVC   VOLLEN,=H'2'        AND DEFAULT LENGTH              @TEC
         L     R1,0(0,R1)          ADDR OF CALLER'S PARM           @TEC
         SR    R2,R2                                               @TEC
         ICM   R2,3,0(R1)          GET LENGTH OF PARM              @TEC
         LTR   R2,R2               IS THERE ANY?                   @TEC
         BNP   NOPARM                                              @TEC
         BCTR  R2,0                MINUS 1 FOR EX                  @TEC
         B     *+10                                                @TEC
         MVC   VOLPRM(0),2(R1)     (EXECUTED)                      @TEC
         EX    R2,*-6              SET UP VOLSER PREFIX            @TEC
         STH   R2,VOLLEN           AND SAVE LENGTH                 @TEC
NOPARM   DS    0H                                                  @TEC
         LOAD  EP=ISPLINK                                          @TEC
         LTR   R15,R15             ISPLINK AVAILABLE?              @TEC
         ST    R0,ISPLINK          SAVE A(ISPLINK) FOR LATER       @TEC
         ISPCALL ('VDEFINE',ISPNLST4,                              @TECX
               ISPVLST4,'CHAR ',80)                                @TEC
         ISPCALL ('TBCREATE','ISSPTAB',                            @TECX
               ' ',ISPNLST4,'NOWRITE',                             @TECX
               'REPLACE')                                          @TEC
*-------------------------------------------------------------*    @TEC
* SAY HELLO                                                   *    @TEC
*-------------------------------------------------------------*    @TEC
         MVC   ORECRD(HDR1E-HDR1S),HDR1S                           @TEC
         ISPCALL ('TBADD','ISSPTAB')                               @TEC
         MVI   ORECRD,C' '                                         @TEC
         MVC   ORECRD+1(79),ORECRD                                 @TEC
         MVC   ORECRD(HDR2E-HDR2S),HDR2S                           @TEC
         ISPCALL ('TBADD','ISSPTAB')                               @TEC
         MVI   ORECRD,C' '                                         @TEC
         MVC   ORECRD+1(79),ORECRD                                 @TEC
         MVC   STCYLS(LDEVTAB),MDEVTAB COPY MODEL DEVICE TABLE.    @TEC
         TITLE 'SCAN UCBS'
*-------------------------------------------------------------*    @TEC
* FORMAT IOS SCAN PARM LIST                                   *    @TEC
*-------------------------------------------------------------*    @TEC
LOCUCB   DS    0H
         XC    DSXAWORK,DSXAWORK   ZERO OUT UCB WORKAREA
         LA    R1,DSXAWORK         ADDR OF UCB WORKAREA
         ST    R1,DSXAWA           STORE IT IN PARM LIST
         LA    R1,DSXACLAS         PTR TO DEV CLAS TO SEARCH
         ST    R1,DSXADEVT         STORE IN PARM LIST
         MVI   DSXACLAS,UCB3DACC   ONLY SEARCH DASD
         LA    R1,DSXAUCBP         AREA TO STORE UCB ADDR
         ST    R1,DSXAUCB          IN PARM LIST
         OI    DSXAUCB,X'80'       SIGNIFY END OF PARMLIST
*-------------------------------------------------------------*    @TEC
* SCAN FOR A UCB                                              *    @TEC
*-------------------------------------------------------------*    @TEC
UCBLOOP  DS    0H
LOCUCB1  DS    0H
         L     R15,CVTPTR
         MVC   DSADCB,CVTDCB-CVT(R15)  SAVE OP SYS TYPE
         ICM   R15,15,CVTUCBSC-CVT(R15)  CVTUCBSC VALID?(IOSVSUCB)
         BZ    LOCUCBE0            ZERO=OLD MVS
*-------------------------------------------------------------*    @TEC
*   >>>>>----UCB SCAN SERVICE FOR MVS/SP1.2 AND ABOVE:-----<  *    @TEC
*  PARM:(100BYTE-WORK,1BYTE-DEV-CLASS,1WORD-UCB-PTR)          *    @TEC
* RETURN CODES: R15 = 00-UCB RETURNED; 04-NO MORE UCBS        *    @TEC
*-------------------------------------------------------------*    @TEC
         LA    R1,DSXALIST         PTR TO PARM LIST
         BALR  R14,R15             BRANCH TO IT
         B     LOCUCBXX            COMMON ENTRY POINT
*-------------------------------------------------------------*    @TEC
*  >>>>>>----- EMULATION UCB SCAN SERVICE FOR OLD MVS------<< *    @TEC
*-------------------------------------------------------------*    @TEC
LOCUCBE0 DS    0H
         ICM   R14,B'1111',DSXAEUCB  BR IF THIS IS
         BNZ   LOCUCBE1            SECOND OR LATER CALL
         L     R14,CVTPTR          ADDR-UCB VECTOR TABLE
         L     R14,X'24'(R14)      *XA  CVTILK2-CVT(R14)
         ST    R14,DSXAEILK        SAVE(TO CHECK FOR DUPS)
LOCUCBE1 DS    0H
         SR    R1,R1               ZERO UCB ADDR PTR
LOCUCBE3 DS    0H
         LA    R14,2(,R14)         NEXT PTR(1ST UCB SKIPPED)
         ICM   R1,B'0011',0(R14)   ADDR OF UCB
         BZ    LOCUCBE3            BR IF NULL ENTRY
         LA    R15,4               SHOW NO HITS (CC UNCHANGED)
         BO    LOCUCBEX            BR IF END
         LA    R15,0               SHOW HITS (CC UNCHANGED)
LOCUCBE5 DS    0H
         CLC   DSXACLAS,UCBTBYT3-UCBCMSEG(R1)  BR IF THIS UCB
         BNE   LOCUCBE3            IS NOT DESIRED CLASS
         ST    R1,DSXAUCB          PROVIDE ADDR OF UCB
         ST    R14,DSXAEUCB        REMEMBER WHERE TO RESUME
*-------------------------------------------------------------*    @TEC
* CHECK FOR DUPLICATE CHANNEL PATH                            *    @TEC
*-------------------------------------------------------------*    @TEC
         L     R14,DSXAEILK        ADDR OF FIRST UCB PTR
LOCUCBE7 DS    0H
         CL    R14,DSXAEUCB        EXIT IF NO DUPLICATE
         BE    LOCUCBEX            CHANNEL PATH FOUND(R15=0)
         LA    R14,2(,R14)         ADDR OF NEXT PTR
         CLC   0(2,R14),DSXAUCB+2  CONTINUE LOOP IF THIS IS NOT
         BNE   LOCUCBE7            DUPLICATE CHANNEL PATH
         L     R14,DSXAEUCB        SETUP TO RESUME SCAN
         B     LOCUCBE3            AND GO RE-ENTER LOOP
LOCUCBEX DS    0H
*-------------------------------------------------------------*    @TEC
* UCB SCAN ROUTINE - COMMON RETURN POINT                      *    @TEC
*-------------------------------------------------------------*    @TEC
LOCUCBXX DS    0H
         LTR   R15,R15             GOT ONE?
         BNZ   UCBEND              NO
         L     R8,DSXAUCBP         GET ADR OF  UCB FROM PTR
         USING UCBCMSEG,R8
         CLI   UCBID,UCBSTND       IS ADDRESS VALID
         BNE   UCBSKP              NO
         CLI   UCBDVCLS,UCB3DACC   IS IT DASDI
         BNE   UCBSKP              NO   SKIP
         TM    UCBSTAT,UCBONLI     IS IT ONLINE
         BNO   UCBSKP              NO  SKIP
         TM    UCBSTAT,UCBCHGS     IS IT CHANGING STATUS
         BO    UCBSKP              YES SKIP
         CLC   VOLPRM(3),=C'ALL'   LIST ALL VOLSER?                @TEC
         BE    SNGVOL              YES.                            @TEC
         SR    R6,R6                                               @TEC
         ICM   R6,3,VOLLEN         LENGTH TO COMPARE               @TEC
         B     *+10                                                @TEC
         CLC   UCBVOLI(0),VOLPRM   VOLSER MATCH?                   @TEC
         EX    R6,*-6                                              @TEC
         BE    SNGVOL              YES.                            @TEC
         B     UCBSKP              NO.                             @TEC
SNGVOL   DS    0H
         TITLE 'PROCESS THIS ONLINE DASD UCB ----------------'
         MVI   OUTMESS,C' '        CLEAR OUTPUT AREA
         MVC   OUTMESS+1(OUTMESSL-1),OUTMESS
         MVC   UNIT,UCBNAME        XXX UBIT ADR
         MVC   VOLSER,UCBVOLI      VOLSER
*-------------------------------------------------------------*    @TEC
* SHOW NUMBER OF USERS                                        *    @TEC
*-------------------------------------------------------------*    @TEC
         XR    R1,R1
         IC    R1,UCBUSER          CONCURRENT USERS(+26X)
         TM    DSADCB,DSADCBXA     MVS/XA?
         BZ    *+8                 NO
         LH    R1,UCBUSER          2BYTES IN XA
         CVD   R1,WD               PACKED "   "
         UNPK  OUTMUSER,WD         DISPLAY "  "
         OI    OUTMUSER+L'OUTMUSER-1,C'0'  FIX SIGN
*-------------------------------------------------------------*    @TEC
* SEE IF ALT PATH                                             *    @TEC
*-------------------------------------------------------------*    @TEC
         TM    DSADCB,DSADCBXA     MVS/XA?
         BZ    NOTXA               NO
         LH    R15,=H'-24'         UCBCHPS (8CHIPIDS)
         AR    R15,R8              GET ADDR OF UCBSHPS
         UNPK  OUTMALTC(9),0(5,R15)  HANDLE 1ST 4 PATHS
         MVI   OUTMALTC+8,C' '     FIX UNPK DAMAGE
         TR    OUTMALTC(8),HEXTR-X'F0'  MAKE DISPLAY ABLE
         LH    R15,=H'-28'         UCBLPM 1=AVAIL
         AR    R15,R8              GET ADDR "
         IC    R15,0(R15)          GET PATH BYTE
         B     DOPATHXA            CONTINUE
NOTXA    DS    0H                  SP3 (&BELOW)
         TM    UCBFL5,X'01'        *XA UCBALTPH  ALTPATH?
         BZ    SKPALT              NO
         L     R15,CVTPTR          CVT(+10)
         SR    R14,R14
         IC    R14,UCBCMSEG+X'A'   *XA UCBLCI LCH INDEX(+A)
         SLL   R14,5               LCH DISPL
         LA    R15,0(R14,R15)      LCH ENTRY
         L     R14,LCHTCH-LCH(R15)  TCH PATH TABLE(+10)
         LA    R14,2(R14)          PROPER SLOT
         MVC   OUTMALTC,0(R14)     CHANNEL NUMBER
         TR    OUTMALTC,HEXTR
*-------------------------------------------------------------*    @TEC
* SHOW PATH DATA                                              *    @TEC
*-------------------------------------------------------------*    @TEC
         IC    R15,UCBCMSEG+X'8'   *XAUCBCHM
DOPATHXA DS    0H                  XA ENTRY (HANDLE 1ST 4
         SRL   R15,4               ISOLATE NIBBLE
         N     R15,=F'15'          "
*-------------------------------------------------------------*    @TEC
* SHOW NUMBER OF ONLINE PATHS                                 *    @TEC
*-------------------------------------------------------------*    @TEC
         XR    R14,R14
         IC    R14,PTHONTAB(R15)   XLATE TO ONLINE PATHS
         TM    DSADCB,DSADCBXA     XA
         BZ    DOPATHTR            NO-CONTINUE
         SH    R14,=H'4'
*-------------------------------------------------------------*    @TEC
* A PATH BIT IN NON-XA: 0=ONLINE, 1=OFFLINE                   *    @TEC
* A PATH BIT IN XA:     0=OFFLINE, 1=ONLINE                   *    @TEC
*-------------------------------------------------------------*    @TEC
         LPR   R14,R14             FLIP FOR XA LOGIC
DOPATHTR DS    0H
         STC   R14,OUTMPTHN        SAVE # PATHS
         TR    OUTMPTHN,HEXTR
*-------------------------------------------------------------*    @TEC
* SEE IF MINPATHS SPECIFIED                                   *    @TEC
*-------------------------------------------------------------*    @TEC
         OC    MINPATHD,MINPATHD   NON-ZERO
         BZ    SKPMINCK            NO-SKIP CHECK
         C     R14,MINPATHD        PATHS AT OR ABOVE MIN
         BNL   UCBSKP              YES-SKIP EM
SKPMINCK DS    0H                  CONTINUE
*-------------------------------------------------------------*    @TEC
* SHOW PATH MASK                                              *    @TEC
*-------------------------------------------------------------*    @TEC
         SLL   R15,2               *4=0,4,8,...
         LA    R14,PATHMASK(R15)   CONVER PATH TO BITS
         MVC   OUTMPTHM,0(R14)     NIBBLE IN BITS C'XXXX'
SKPALT   DS    0H                  SKIP IF NO ALTS
*-------------------------------------------------------------*    @TEC
* LSPACE - TO GET VOLUME FREE SPACE                           *    @TEC
*-------------------------------------------------------------*    @TEC
         LA    R0,UCBCMSEG         UCB ADR
         LA    R1,WORKA
         SVC   78                  ISSUE LSPACE
         MVC   OUTMESSV,VOLSER     VOLSER
         MVC   OUTMESSU,UNIT       ADDR
*-------------------------------------------------------------*    @TEC
* TEST FOR INDEXED VTOC                                       *    @TEC
*-------------------------------------------------------------*    @TEC
         CVAFTST UCB=(R8)          TEST  VTOC
         B     BRTBL(R15)          TEST  RETURN CODE
BRTBL    B     RC0
         B     RC4
         B     RC8                 INDEXED
         B     RC12
         B     RC16
RC8      MVC   INFLAG,=C'I '
RC4      DS    0H
RC0      DS    0H
*-------------------------------------------------------------*    @TEC
* GET DEVICE CAPACITY INFO                                    *    @TEC
*-------------------------------------------------------------*    @TEC
         MVC   DEVPLIST(LDEVTYPE),MDEVTYPE                         @TEC
         LA    R1,DEVPLIST         ADDR OF PLIST                   @TEC
         ST    R8,UCBLIST          SAVE UCB ADDRESS                @TEC
         LA    R14,DEVWORDS                                        @TEC
         DEVTYPE ,((14),24),                                       @TECX
               UCBLIST=(UCBLIST,1),                                @TECX
               MF=(E,(1))                                          @TEC
         LA    R15,STCYLS          GET DEVICE TABLE
DEVLOC   DS    0H
         CLC   UCBUNTYP,(STCYLS-STCYLS)(R15)
         BE    DEVGOT
         CLI   (STCYLS-STCYLS)(R15),X'FF'
         BE    DEVGOT
         LA    R15,(STCYLS1-STCYLS)(R15)  NEXT
         B     DEVLOC              LOOP
DEVGOT   DS    0H
         SR    R0,R0                                               @TEC
         ICM   R0,3,DEVWORDS+8                                     @TEC
         STH   R0,(STCYLMAX-STCYLS)(R15)  #CYLS/VOL                @TEC
         SR    R14,R14                                             @TEC
         ICM   R14,3,DEVWORDS+10                                   @TEC
         STH   R14,(STCYLTRK-STCYLS)(R15)  #TRKS/CYL               @TEC
         SRDA  R0,32                                               @TEC
         MR    R0,R14                                              @TEC
         ST    R1,(STCYLTTK-STCYLS)(R15)  #TRKS/VOL                @TEC
         MVC   OUTMESSD,(STCYLNAM-STCYLS)(R15)  DEV. NAME
         L     R14,(STCYLTTK-STCYLS)(R15)  #TRKS/VOL
         A     R14,WKTOTTTK        TOT TRKS SEEN
         ST    R14,WKTOTTTK
         LH    R14,(STCYLMAX-STCYLS)(R15)  #CYLS/VOL
         A     R14,WKTOTCYL        TOT CYLS SEEN
         ST    R14,WKTOTCYL
         PACK  WD,WA#CYL           # FREE CYL
         CVB   R0,WD               "
         LR    R14,R0
         A     R14,WKFRECYL        TOT FREE CYLS
         ST    R14,WKFRECYL
         MH    R0,(STCYLTRK-STCYLS)(R15)  #TRKS/CYL
         PACK  WD,WA#TRK           # FREE TRKS
         CVB   R14,WD              "
         AR    R0,R14              TOTAL FREE TRKS ON VOL
         LR    R14,R0
         A     R14,WKFRETRK        TOT FREE TRKS - ALLVOL
         ST    R14,WKFRETRK
         SRDA  R0,32               SHIFT TO R1
         M     R0,=F'100'          FOR % CALC
         A     R1,=F'50'           "
         L     R14,(STCYLTTK-STCYLS)(R15)
         DR    R0,R14              CALC % FREE
         CVD   R1,WD               ANSWER
         UNPK  OUTMESSP,WD
         OI    OUTMESSP+L'OUTMESSP-1,C'0'  FIX SIGN
         MVC   ORECRD(OUTMESSL),OUTMESS                            @TEC
         ISPCALL ('TBADD','ISSPTAB')                               @TEC
         MVI   ORECRD,C' '                                         @TEC
         MVC   ORECRD+1(79),ORECRD                                 @TEC
TESTONE  LTR   R6,R6
         B     UCBSKP              TRY MORE VOLSERS GROUP
UCBSKP   DS    0H                  INCREMENT BY 2
         B     UCBLOOP             CONTINUE SEARCHING SVC TABLE
UCBEND   DS    0H
         @ED   OTFRECYL,WKFRECYL
         @ED   OTFRETRK,WKFRETRK
         @ED   OTTOTCYL,WKTOTCYL
         @ED   OTTOTTTK,WKTOTTTK
         MVC   ORECRD(HDR3E-HDR3S),HDR3S                           @TEC
         ISPCALL ('TBADD','ISSPTAB')                               @TEC
         MVI   ORECRD,C' '                                         @TEC
         MVC   ORECRD+1(79),ORECRD                                 @TEC
         MVC   ORECRD(L'OTTOTS),OTTOTS                             @TEC
         ISPCALL ('TBADD','ISSPTAB')                               @TEC
         MVI   ORECRD,C' '                                         @TEC
         MVC   ORECRD+1(79),ORECRD                                 @TEC
         ISPCALL ('TBTOP','ISSPTAB')
REDISPL  DS    0H                                                  @TEC
         ISPCALL ('TBDISPL','ISSPTAB',                                 X
               'ISSPANL0')
         C     R15,=F'8'           END KEY PRESSED?                @TEC
         BNE   REDISPL                                             @TEC
         @RET  EQ,RC=0
RC12     DS    0H
         MVC   ORECRD(L'NOVIB),NOVIB                               @TEC
         ISPCALL ('TBADD','ISSPTAB')                               @TEC
         MVI   ORECRD,C' '                                         @TEC
         MVC   ORECRD+1(79),ORECRD                                 @TEC
         B     TESTONE
RC16     DS    0H
         MVC   ORECRD(L'NOTDA),NOTDA                               @TEC
         ISPCALL ('TBADD','ISSPTAB')                               @TEC
         MVI   ORECRD,C' '                                         @TEC
         MVC   ORECRD+1(79),ORECRD                                 @TEC
         B     TESTONE
EXMVC    MVC   0(0,9),0(7)
MDEVTYPE DEVTYPE UCBLIST=YES,MF=L                                  @TEC
LDEVTYPE EQU   *-MDEVTYPE
         DC    H'0016'
NOVIB    DC    C'VIB NOT INIT'
NOTDA    DC    C'NOT DASDI   '
ERRMESS  DC    C'PARSE FAILED'
VOLMESS  DC    C'VOL VVVVVV '
UNITMESS DC    C'UNIT UUU '
NOVOL    DC    C'VOLUME VVVVVV NOT MOUNTED'
HDR1S    DC    C'SPACE-2.1 IX SPACE=  --F R E E-- / -CONTIG-'
         DC    C' DEV   % NO. -PATH- ALT.PATH'
HDR1E    EQU   *
HDR2S    DC    C'         VTOC      #CYL,#TRK,#EXT/#CYL,#TRK'
         DC    C'     FRE USR #/MASK /CHPIDS '
HDR2E    EQU   *
HDR3S    DC    C' TOTAL-CYL TOTAL-TRK  FREE-CYL  FREE-TRK'
HDR3E    EQU   *
OTMASK   DC    X'40206B2020206B202120'  Z,ZZZ,ZZ9
*-------------------------------------------------------------*    @TEC
* DEVICE CHARACTERISTICS TABLE                                *    @TEC
*-------------------------------------------------------------*    @TEC
MDEVTAB  DS    0H                  TABLE OF DEVICE TYPE TO MAX. CYLS
         DC    X'0900'             DEVICE TYPE
         DC    H'404'              MAX CYLS
         DC    CL4'3330'           EBCDIC NAME
         DC    H'19'               TRACKS PER CYLINDER
         DC    AL4(404*19)         TRACKS PER VOL
         DC    X'0D00',H'0808',CL4'3331',H'19',AL4(0808*19)
         DC    X'0B00',H'0555',CL4'3350',H'30',AL4(0555*30)
         DC    X'0800',H'0200',CL4'2314',H'20',AL4(0200*20)
         DC    X'0A00',H'0696',CL4'3340',H'12',AL4(0696*12)
         DC    X'0C00',H'0959',CL4'3375',H'12',AL4(0959*12)
         DC    X'0E00',AL2(0885*3),CL4'3380',H'15',AL4(0885*15*3)
         DC    X'0F00',AL2(0),CL4'3390',H'15',AL4(0)               @TEC
         DC    X'FFFF',H'9999',CL4'UNKN',H'19',AL4(99*99)
LDEVTAB  EQU   *-MDEVTAB                                           @TEC
HEXTR    DC    C'0123456789ABCDEF'
*                  0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F  - MASK BITS
PTHONTAB DC    AL1(4,3,3,2,3,2,2,1,3,2,2,1,2,1,1,0)  - # ZEROS
PATHMASK DC    C'0000',C'0001',C'0010',C'0011'  0-3 MASK
         DC    C'0100',C'0101',C'0110',C'0111'  4-7 MASK
         DC    C'1000',C'1001',C'1010',C'1011'  8-B MASK
         DC    C'1100',C'1101',C'1110',C'1111'  C-F MASK
ISPLINK  DC    A(0)                                                @TEC
ISPNLST4 DC    C'(ORECRD)'                                         @TEC
ISPVLST4 DS    0F                                                  @TEC
ORECRD   DS    0XL80               OUTPUT RECORDS
         DS    CL80                                                @TEC
*-------------------------------------------------------------*    @TEC
* GETMAINED WORKAREA                                          *    @TEC
*-------------------------------------------------------------*    @TEC
DSA      DSECT
ANS      DS    F
ECB      DS    F
PPL      DS    0F
UPT      DS    F
ECT      DS    F
ECBP     DS    F
PCL      DS    F
ANSW     DS    F
COMBUF   DS    F
DSADCB   DS    X                   COPY OF CVTDCB - OP SYS
DSADCBXA EQU   X'80'               XA OPERATING SYSTEM
WK       DS    F
WKCLRS   EQU   *                   CLEAR AREA AT INIT
MINPATHD DS    F                   MINIMUM NUMBER OF PATHS
WKFRETRK DS    F                   TOT FREE TRKS ON ALL V
WKFRECYL DS    F                   TOT FREE CYLS ON ALL V
WKTOTCYL DS    F                   TOT      CYLS ON ALL V
WKTOTTTK DS    F                   TOT      TRKS ON ALL V
WKCLRL   EQU   *-WKCLRS
WD       DS    D
WLOOKUP  DS    F
*-------------------------------------------------------------*    @TEC
* TOTAL LINE FORMAT                                           *    @TEC
*-------------------------------------------------------------*    @TEC
OTTOTS   DC    C' TOTAL CYL TOTAL TRK  FREE CYL  FREE TRK'
*              C' Z,ZZZ,ZZ9 Z,ZZZ,ZZ9 Z,ZZZ,ZZ9 Z,ZZZ,ZZ9'
OTTOTCYL EQU   OTTOTS+00,10
OTTOTTTK EQU   OTTOTS+10,10
OTFRECYL EQU   OTTOTS+20,10
OTFRETRK EQU   OTTOTS+30,10
*-------------------------------------------------------------*    @TEC
* OUTPUT MESSAGE FORMAT                                       *    @TEC
*-------------------------------------------------------------*    @TEC
OUTMESS  DS    CL79                MESSAGE AREA
         ORG   OUTMESS             RE-MAP
OUTMESSV DS    CL6,C               VOLSER
OUTMESSU DS    CL3,C               UNIT
INFLAG   DS    CL2                 INDEXED VTOC FLAG AREA
WORKA    DS    CL30                AREA FOR LSPACE RETURN
WA#CYL   EQU   WORKA+06,4          FREE CYL
WA#TRK   EQU   WORKA+11,4          FREE TRK
WA#EXT   EQU   WORKA+16,4          EXTENTS
WA#CCYL  EQU   WORKA+21,4          CONTIG. CYL
WA#CTRK  EQU   WORKA+26,4          CONTIG. TRK
         DS    C                   FILLER
OUTMESSD DS    CL4,C               DEV NAME 3380/3350
OUTMESSP DS    CL2,C               %FULL
OUTMUSER DS    CL3,C               UCBUSER-CONC. USERS
OUTMPTHN DS    C,CL1               PATHS ONLINE
OUTMPTHM DS    CL4,CL1             PATH MASK
OUTMALTX DS    CL3,CL6             ALT CHAN(OR CHPIDS IN XA)
OUTMALTC EQU   OUTMALTX+1,1        ALT CHAN(MIDDLE POS.)
OUTMESSF EQU   OUTMESS+L'OUTMESS-*  FILLER (ASM ERR IF TOO LONG)
         DS    (OUTMESSF)X         FILLER (ASM ERR IF TOO LONG)
OUTMESSL EQU   *-OUTMESS
VOLSER   DS    CL6                 VOLSER
UNIT     DS    CL3                 UNIT
*-------------------------------------------------------------*    @TEC
* UCB LOOKUP WORKAREAS.                                       *    @TEC
*-------------------------------------------------------------*    @TEC
DSXALIST DS    0F                  PARMLIST FOR UCB
DSXAWA   DS    F                   %100-BYTE WORK AREA
DSXADEVT DS    F                   %DEV TYPE TO SEARCH
DSXAUCB  DS    F                   %UCB FULL WORD PTR
         DS    0D                  FOLLOWING MUST BE ALIGNED
DSXAWORK DS    CL100               UCB WORK AREA
DSXAEUCB EQU   DSXAWORK+00,04      EMULATION CURR. UCB PTR
DSXAEILK EQU   DSXAWORK+04,04      EMULATION CVTILK2 ADDR
DSXACLAS DS    CL1                 DEVICE CLASS TO SEARCH
DSXAUCBP DS    F                   %UCB
DEVPLIST DEVTYPE UCBLIST=YES,MF=L
DEVWORDS DS    6F                  FEEDBACK FROM DEVTYPE           @TEC
UCBLIST  DS    F                                                   @TEC
STCYLS   DS    0H                  TABLE OF DEVICE TYPE TO MAX. CYLS
         DS    XL2                 DEVICE TYPE                     @TEC
STCYLMAX EQU   *
         DS    H                   MAX CYLS                        @TEC
STCYLNAM EQU   *
         DS    CL4                 EBCDIC NAME                     @TEC
STCYLTRK EQU   *
         DS    H                   TRACKS PER CYLINDER             @TEC
STCYLTTK EQU   *
         DS    AL4                 TRACKS PER VOL                  @TEC
STCYLS1  DS    0H                  FOR SIZE OF ENTRY CALC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
VOLPRM   DS    CL6                 VOLSER PREFIX                   @TEC
VOLLEN   DS    H                   LENGTH OF VOLSER PREFIX         @TEC
DSAEND   EQU   *                   LENGTH OF WORK
         IEFUCBOB  ,               UCB
         CVT   DSECT=YES           CVT
LCH      DSECT                     LCH
         ORG   LCH+16
LCHTCH   DS    A
CSD      DSECT                     CSD
         ORG   CSD+8
CSDCPUAL DS    XL2
CPU1     EQU   X'40'
CPU2     EQU   X'20'
         END   ,
./       ADD   NAME=KSUBS
***********************************************************************
*    BOB ZIMMERMAN                                                    *
*    CNA INSURANCE                                                    *
*    (312) 822-5719                                                   *
*    LAST MODIFIED 8412                                               *
*                                                                     *
***********************************************************************
*                                                                     *
*    WRITTEN AND MAINTAINED BY BRUCE LOMAR, BOB ZIMMERMAN             *
*    CNA INSURANCE                                                    *
*                                                                     *
***********************************************************************
*    THIS MODULE IS CALLED BY MANY DIALOGS AT CNA - CNA0KED FOR       *
*    EXAMPLE. IT WILL SEARCH THE TIOT AND UCBS TO FIND DATASETS       *
*    ALLOCATED, CONTAINS CERTAIN MEMBERS AND DDNAMES.                 *
***********************************************************************
*                                                                     *
*  AUTHORS AND DATES:                                                 *
*                                                                     *
*      MIKE AMLING - ORIGINAL CODE                       ??/??/80 N/A *
*                                                                     *
*                                                                     *
*  MAINTENANCE SUMMARY:                                               *
*                                                                     *
*    MIKE AMLING - REVISE TO USE &INUSE(13)               5/ 5/83 MA01*
*                                                                     *
*                                                                     *
***********************************************************************
*-------------------------------------------------------------*    @TEC
* UPDATED FOR SWA ABOVE THE LINE. 29/08/91                    *    @TEC
*-------------------------------------------------------------*    @TEC
         PRINT OFF                                                 @TEC
         MACRO
         RF
         GBLB  &INUSE(13)                                         MA01
         GBLC  &EQU(12),&USING(12)
         LCLA  &A,&X
         LCLC  &C
&X       SETA  N'&SYSLIST
.LOOPX   AIF   (&X LE 0).MEXIT
&C       SETC  '&SYSLIST(&X)'
&X       SETA  &X-1
         AIF   ('&C' EQ '').LOOPX      SKIP NULL ENTRIES
.*
.*  FREE THE REGISTER CURRENTLY IN USE AS &C
.*
&A       SETA  2                       LOWEST SUPPORTED REGISTER - 1
.LOOPA   AIF   (&A GE 12).ERRINUS      12 IS HIGHEST SUPPORTED REGISTER
&A       SETA  &A+1
         AIF   ('&EQU(&A)' NE '&C').LOOPA
.*
&INUSE(&A) SETB 0                      INDICATE REG NO LONGER IN USE
&EQU(&A) SETC  ''                      RESET FOR LATER RF MACROS
         AIF   ('&USING(&A)' EQ '').LOOPX
&USING(&A) SETC ''
         DROP  &C                                                     $
         AGO   .LOOPX
.*
.* ERROR MNOTES
.*
.ERRINUS MNOTE 4,'REGISTER &C NOT IN USE.'
         AGO   .LOOPX
.MEXIT   MEND
***********************************************************************
*                                                                     *
*  AUTHORS AND DATES:                                                 *
*                                                                     *
*      MIKE AMLING - ORIGINAL CODE                       ??/??/80 N/A *
*                                                                     *
*                                                                     *
*  MAINTENANCE SUMMARY:                                               *
*                                                                     *
*    MIKE AMLING - REVISE TO USE &INUSE(13)               5/ 5/83 MA01*
*                                                                     *
*                                                                     *
***********************************************************************
         MACRO
         RG    &S,&T
         GBLB  &INUSE(13)                                         MA01
         GBLC  &EQU(12),&USING(12)
         LCLA  &A
         LCLC  &C
         AIF   (N'&SYSLIST LE 2).MULTIX
         MNOTE 8,'ALL BUT FIRST 2 POSITIONAL PARAMETERS IGNORED.'
.MULTIX  AIF   (T'&T NE 'O').PAIR
         AIF   ('&S(3)' NE '').SPEC
.*
.*  SEARCH FOR 1 AVAILABLE REGISTER
.*
&A       SETA  2                ONE LESS THAN LOWEST SUPPORTED REGISTER
.LOOP1   ANOP                                                     MA01
&A       SETA  &A+1
         AIF   (&INUSE(&A)).LOOP1
         AIF   (&A GT 12).ERRNORE      IF 3..12 NOT AVAILABLE     MA01
.*
.*  SET UP LONE REGISTER OR EVEN REGISTER OF PAIR
.*
.TAKEA   ANOP
&INUSE(&A) SETB 1                      NOTE REGISTER IN USE
&EQU(&A) SETC  '&S(1)'                 NOTE NAME FOR RF MACRO
&C       SETC  '&S(1)       '(1,8)
         MNOTE *,'&C EQU   &A'
&S(1)    EQU   &A                      DEFINE SYMBOL FOR REGISTER     $
         AIF   ('&S(2)' EQ '').MEXIT
         USING &S(2),&S(1)             TELL ASSEMBLER ABOUT CONTENTS  $
&USING(&A) SETC '&S(2)'                NOTE DSECT NAME FOR RCALL MACRO
.MEXIT   MEXIT
.*
.*  SEARCH FOR AN AVAILABLE EVEN/ODD REGISTER PAIR
.*
.PAIR    AIF   (N'&S LE 2 AND N'&T LE 2).PAIROVX
         MNOTE 8,'ASSIGNMENT OVERRIDE IGNORED WHEN REQUESTING PAIR.'
.PAIROVX ANOP
&A       SETA  3                       ODD REG OF 1ST PAIR - 2
.LOOP2   ANOP                                                     MA01
&A       SETA  &A+2
         AIF   (&INUSE(&A) OR &INUSE(&A-1)).LOOP2
         AIF   (&A GT 11).ERRNOPA   11 IS ODD REG OF HIGHEST PAIR MA01
.*
.*  SET UP ODD REGISTER OF PAIR
.*
&INUSE(&A) SETB 1                      NOTE REGISTER IN USE
&EQU(&A) SETC  '&T(1)'                 NOTE ODD REG NAME FOR RF MACRO
&C       SETC  '&T(1)       '(1,8)
         MNOTE *,'&C EQU   &A'
&T(1)    EQU   &A                      DEFINE SYMBOL FOR REGISTER     $
&A       SETA  &A-1                    PRESET FOR DEFINING EVEN REG
         AIF   ('&T(2)' EQ '').TAKEA
&USING(&A+1) SETC '&T(2)'              NOTE DSECT NAME FOR RCALL MACRO
         USING &T(2),&T(1)             TELL ASSEMBLER ABOUT CONTENTS  $
         AGO   .TAKEA
.*
.*  CHECK USER-SPECIFIED REGISTER
.*
.SPEC    ANOP
&A       SETA  K'&S(3)
.SPCLOOP AIF   (&A LE 0).SPCOK
         AIF   ('&S(3)'(&A,1) LT '0').ERRSPEC
&A       SETA  &A-1
         AGO   .SPCLOOP
.SPCOK   ANOP
&A       SETA  &S(3)
         AIF   (&A LT 3 OR &A GT 12).ERRS312
         AIF   (NOT &INUSE(&A)).TAKEA
         AIF   ('&EQU(&A)' EQ '').ERRINU2
         MNOTE 12,'SPECIFIED REGISTER &A IN USE AS &EQU(&A)'
         MEXIT
.ERRINU2 MNOTE 12,'SPECIFIED REGISTER &A IN USE BY CALLING CODE'
         MEXIT
.ERRSPEC MNOTE 8,'SPECIFIED REGISTER &S(3) NOT NUMERIC.'
         MEXIT
.ERRS312 MNOTE 8,'SPECIFIED REGISTER NOT IN RANGE 3-12.'
         MEXIT
.ERRNOPA MNOTE 8,'NO REGISTER PAIR AVAILABLE.'
         MEXIT
.ERRNORE MNOTE 8,'NO REGISTER AVAILABLE.'
         MEND
         MACRO
         CNASEND
         GBLC  &GBLSTRG                NAME OF STORAGE LENGTH
         GBLC  &GBLSAVE                NAME OF SAVE AREA
         GBLC  &GBLCNAM                NAME OF CSECT
         GBLC  &GBLRENT                REENTRANCY OPTION
         AIF   ('&GBLRENT' EQ 'NO' OR '&GBLRENT' EQ 'NOSAVE').DONE
         AIF   ('&SYSECT' EQ '&GBLSAVE').GEN
         SPACE 1
&GBLSAVE DSECT ,                       RESUME SAVE AREA DSECT
.GEN     ANOP
         SPACE 1
WORKEND$ DS    0D                      FORCE LENGTH TO DOUBLEWORD
&GBLSTRG EQU   WORKEND$-&GBLSAVE       SET UP LENGTH EQUATE
         SPACE 2
&GBLCNAM CSECT ,                       RESUME CSECT
.DONE    ANOP
         MEND
         MACRO
         CNASTRG
         GBLC  &GBLRENT
         GBLC  &GBLSAVE
         GBLC  &GBLWTG
         GBLC  &GBLCESV            DEFINES SAVE AREA FOR NSL'S
         AIF   ('&GBLRENT' EQ 'NO').DONE
         AIF   ('&GBLRENT' EQ 'NOSAVE').DONE
*
*        WORK AREA DSECT BEGINNING WITH CNASTRG MACRO GENERATION
*
&GBLSAVE DSECT
         DS    18F                 STANDARD SAVE AREA
         AIF   ('&GBLRENT' NE 'STACK' AND '&GBLRENT' NE 'NEWSTACK').CCH
         DS    F                   NEXT FREE STACK LOCATION
         AGO   .DONE
.CCH     AIF   ('&GBLRENT' NE 'COM' OR '&GBLWTG' EQ '').DONE
&GBLWTG  DS    F                   NEXT EXECUTION ADDRESS
.DONE    AIF   ('&GBLCESV' NE 'NSL').NONSL
         DS    F                   DUMMY FOR STAE EXIT ROUTINE
         DS    13F                 SAVE AREA FOR NSL ENTRY OPTION
.NONSL   ANOP
         MEND
         MACRO
&MNAME   CNAEXIT  &RC,&XCTL=,&SPKA=,&EXIT=YES
.*
.*       THIS MACRO PROVIDES A COMPANION EXIT MACRO TO
.*       THE ENTRY MACRO CNAENTER.
.*
.*
.*       DECLARE GLOBAL SYMBOLS USED FOR CNAENTER AND CNAEXIT
.*
         GBLA  &GBLREG#            NUMBER OF BASE REGISTERS
         GBLB  &GBLACTV            MACRO HAS BEEN INVOKED BEFORE
         GBLC  &GBLREGS(5)         BASE REGISTER VALUES
         GBLC  &GBLUSNG            BASE REGS WITH COMMAS FOR USING
         GBLC  &GBLRENT            RENT OPTION
         GBLC  &GBLSAVE            SNAME OPTION
         GBLC  &GBLSTRG            STORAGE OPTION
         GBLC  &GBLSTCK            SIZE OF STACK
         GBLC  &GBLCNAM            CSECT NAME
         GBLC  &GBLCESP            SUBPOOL FOR SAVEAREA FREEMAIN
         GBLC  &GBLCESV            SVC TYPE FOR RENT=(NEWSTACK,TYPE)
.*
.*       LOCAL VARIABLES
.*
         LCLA  &LCLBASE            NUMBER OF REG TO GEN R.C. HOLD
         LCLA  &LCLLOOP            LOOP CONTROL WHILE GENNING ABOVE
         LCLC  &LCLLABL            STATEMENT LABEL
         LCLC  &LCLRREG            CHARACTER FORM OF LCLBASE WITH R
         LCLC  &LCLXNAM            NAME TO XCTL TO
         LCLC  &LCLXLST            NAME OF XCTL PARM LIST
         LCLC  &LCLXREG            NAME OF REGISTER FOR MODULE ADDR
.*
.*       CHECK THE XCTL= OPERAND
.*       IT CANNOT BE USED WITH THE RC OPERAND
.*       THERE ARE THREE FORMS OF THE OPERAND
.*       XCTL=MODULE-NAME   (OBSOLETE VERSION)
.*       XCTL=(SF,PLIST-NAME,ROUTINE-ADDRESS-LOCATION)
.*       XCTL=(I,MODULE-NAME)
.*
         AIF   ('&XCTL' EQ '').XCTL1OK          NO XCTL= OPERAND
         AIF   ('&RC' EQ '').XCTL1A             NO RC OPERAND
         MNOTE 4,'RETURN CODE AND XCTL= INCOMPATIBLE. RETURN CODE IGNORE
               ED'
.XCTL1A  AIF   (N'&XCTL NE 1).XCTL1B
&LCLXNAM SETC  '&XCTL'                          SET MODULE NAME
         AGO   .XCTL1OK                         AND END CHECKS
.XCTL1B  AIF   ('&XCTL(1)' NE 'I').XCTL1C       IS IT INLINE PLIST
&LCLXNAM SETC  '&XCTL(2)'                       SET MODULE NAME
         AIF   (N'&XCTL NE 2).XCTL1E1           GENERATE ERROR MESSAGE
         AGO   .XCTL1OK
.XCTL1C  AIF   ('&XCTL(1)' NE 'SF' AND '&XCTL(1)' NE 'E').XCTL1E2
         AIF   ('&XCTL(2)' EQ '').XCTL1D        CHECK IF XCTL PLIST
&LCLXLST SETC  '&XCTL(2)'                       SET XCTL PARM LIST ADDR
.XCTL1D  AIF   ('&XCTL(3)' EQ '').XCTL1E        IS A REGISTER SET
&LCLXREG SETC  '&XCTL(3)'                       SET REGISTER NAME
.XCTL1E  AIF   (N'&XCTL GT 3).XCTL1E3           TOO MANY OPERANDS
         AGO   .XCTL1OK                         END CHECKS
.XCTL1E1 MNOTE 4,'XCTL=(I,PLIST-NAME) MUST HAVE 2 OPERANDS'
         AGO   .XCTL1OK
.XCTL1E2 MNOTE 4,'XCTL= FORMS ARE I AND E. XCTL=&XCTL(1) INVALID'
         AGO   .XCTL1OK
.XCTL1E3 MNOTE 4,'XCTL= TOO MANY OPERANDS'
.XCTL1OK ANOP
.*
.*       CHECK USAGE OF SPKA OPERAND
.*
         AIF   ('&SPKA' EQ '').SPKA1OK    NO SPKA= OPERAND
         AIF   ('&GBLCESV' NE '').SPKA1OK MUST BE RENT=(NEWSTACK,X)
         MNOTE 4,'SPKA=&SPKA VALID ONLY FOR RENT=(NEWSTACK,NSL)'
.SPKA1OK ANOP
.*
.***     CHECK USAGE OF THE EXIT=NO OPERAND
.*
         AIF   ('&EXIT' EQ 'YES').EXITOK
         AIF   ('&EXIT' EQ 'NO').EXITC1
         MNOTE 8,'EXIT=&EXIT VALUE INVALID'
.EXITC1  ANOP
         AIF   ('&XCTL' EQ '').EXITC2
         MNOTE 8,'EXIT=NO INVALID WITH XCTL=&XCTL'
.EXITC2  AIF   ('&RC' EQ '').EXITOK
         MNOTE 8,'EXIT=NO INVALID WITH RETURN CODE OPERAND &RC'
.EXITOK  ANOP
.*
.*       RESUME CSECT IF WE HAVE LEFT IT
.*
         AIF   ('&GBLCNAM' EQ '&SYSECT').READY
&GBLCNAM CSECT ,                   RESUME ORIGINAL CSECT
         SPACE 2
.READY   ANOP
.*
.*       SET STATEMENT LABEL
.*
&LCLLABL SETC  '&MNAME'
.*
.*       SET UP GLOBALS TO CAUSE DEFAULT IF CNAENTER NOT USED
.*
         AIF   (&GBLACTV).ACTIVE
&GBLRENT SETC  'NO'
&GBLSAVE SETC  'SAVEAREA'
         MNOTE 4,'CNAENTER NOT USED - WILL GENERATE FOR NON-REENTRANT'
.ACTIVE  ANOP
.*
.*       THERE ARE TWO FUNDAMENTAL CASES - 1 REQUIRING A FREEMAIN
.*       AND THE OTHER NOT.  THE FIRST CASE OCCURS WHEN &GBLRENT
.*       IS 'YES' OR 'NEWSTACK'.  THE OTHER OCCURS WHEN &GBLRENT
.*       IS 'NO' 'NOSAVE' 'STACK' OR 'COM'.  FIRST SECTION OF MACRO
.*       DETERMINES WHICH CASE IS PRESENT.
.*
         AIF   ('&GBLRENT' EQ 'YES' OR '&GBLRENT' EQ 'NEWSTACK').FREE
         AIF   ('&XCTL' NE '').GENXCTL
.*
.*       NOW GET THE RETURN CODE INTO R15 IF IT IS NOT IN 15 OR A
.*       SELF-DEFINING TERM.
.*
         AIF   ('&EXIT' EQ 'NO').NFRCSET    CASE - EXIT=NO
         AIF   ('&RC' EQ '0').NFRCSET       CASE - CNAEXIT 0 OPTIMIZE
         AIF   ('&XCTL' NE '').NFRCSET      CASE - XCTL OPERAND PRESENT
         AIF   ('&RC' EQ '').NFRCSET        CASE - NULL DEFAULT 0
         AIF   ('&RC' EQ '(R15)').NFRCSET   CASE - RC PRESET
         AIF   ('&RC' EQ '(15)').NFRCSET    CASE - RC PRESET
         AIF   ('&RC'(1,1) EQ '(').NFREG    CASE - REG FORM
         AIF   (T'&RC EQ 'N').NFRCSET       CASE - SELF-DEFINING
&LCLLABL L     R15,&RC             LOAD RETURN CODE VALUE
&LCLLABL SETC  ''                  NULIFY LABEL COPY
         AGO   .NFRCSET
.NFREG   ANOP
&LCLLABL LR    R15,&RC(1)          LOAD RETURN CODE VALUE
&LCLLABL SETC  ''
.*
.***     R15 LOADED UNLESS SR OR LA TO BE GENERATED
.*
.NFRCSET ANOP
.*
.*       RESTORE REGISTER 13 FOR NON-REENTRANT CASE
.*
         AIF   ('&GBLRENT' EQ 'NOSAVE').NFLR14
&LCLLABL L     R13,&GBLSAVE+4      RESTORE CALLER'S SAVE AREA
&LCLLABL SETC  ''
.*
.***     REENTER HERE FROM REENTRANT CASE
.*
.NFLR14  ANOP
         AIF   ('&RC' EQ '').NFLR14A           SKIP SUBSTRING IF NO PRM
         AIF   ('&RC'(1,1) EQ '(').NFLRN0      ALREADY LOADED IF REG.
         AIF   ('&EXIT' EQ 'NO' OR '&XCTL' NE '').NFLRN0
         AIF   ('&RC' NE '' AND T'&RC NE 'N').NFLRN0
.NFLR14A ANOP
&LCLLABL LM    R14,R12,12(R13)     RESTORE REGISTERS
         AIF   ('&RC' EQ '' OR '&RC' EQ '0').NFLRY0
         LA    R15,&RC             SET RETURN CODE NOT ZERO
         AGO   .NFLRN0A
.NFLRY0  ANOP
         SR    R15,R15             SET RETURN CODE ZERO
         AGO   .NFLRN0A
.*
.***     NEXT 2 INSTRUCTIONS IF RETURN CODE WAS LEFT IN R15
.*
.NFLRN0  ANOP
&LCLLABL L     R14,12(,R13)        RESTORE RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE REMAINING REGISTERS
.NFLRN0A ANOP
         MVI   12(R13),X'FF'       FLAG AS RETURNED FOR SNAP SVC
         AIF   ('&EXIT' EQ 'NO').EXITNFN
         BR    R14                 RETURN TO CALLER
.EXITNFN ANOP
         MEXIT
.*
.*       REENTRANT CASE - FIRST GET RETURN CODE INTO A REGISTER
.*       WHICH IS NOT R15 AND IS NOT A BASE REGISTER.  DETERMINE
.*       WHICH REGISTER FIRST
.*
.FREE    AIF   ('&GBLCESV' NE '').GENNSL GO GENERATE SYSTEM CONV.
         AIF   ('&XCTL' NE '').FRSET   AVOID RETURN CODE LOGIC
&LCLRREG SETC  '&RC(1)'
         AIF   ('&RC' EQ '').FRNEED
         AIF   ('&RC'(1,1) EQ '(' AND '&RC' NE '(R15)').FRSET
.FRNEED  ANOP
&LCLBASE SETA  2
.FRCHECK ANOP
&LCLLOOP SETA  1
&LCLRREG SETC  'R&LCLBASE'
.FRLOOP  ANOP
         AIF   ('&LCLRREG' EQ '&GBLREGS(&LCLLOOP)').FRRETRY
&LCLLOOP SETA  &LCLLOOP+1
         AIF   (&LCLLOOP LE &GBLREG#).FRLOOP
         AGO   .FRLRC
.FRRETRY ANOP
&LCLBASE SETA  &LCLBASE+1
         AGO   .FRCHECK
.FRLRC   ANOP
         AIF   ('&EXIT' EQ 'NO').FRLR SAVE R15 AGAINST FREEMAIN
         AIF   ('&RC' EQ '0').FRSET  CASE - CNAEXIT 0 OPTIMIZED
         AIF   ('&XCTL' NE '').FRSET        CASE - XCTL= NO R15
         AIF   ('&RC' EQ '').FRSET          CASE - NULL DEFAULTS TO 0
         AIF   ('&RC'(1,1) EQ '(').FRLR     CASE - REGISTER OPERAND
         AIF   (T'&RC EQ 'N').FRSET         CASE - GENERATE LA INSTRUCT
&LCLLABL L     &LCLRREG,&RC        LOAD RETURN CODE VALUE
&LCLLABL SETC ''
         AGO   .FRSET
.FRLR    ANOP
&LCLLABL LR    &LCLRREG,&RC(1)     SAVE RETURN CODE OVER FREEMAIN
&LCLLABL SETC  ''
.FRSET   ANOP
&LCLLABL LR    R1,R13              SET ADDRESS TO FREE
&LCLLABL SETC  ''
         L     R13,&GBLSAVE+4      GET CALLER'S SAVE AREA
         AIF   ('&GBLRENT' EQ 'NEWSTACK').FRSTACK
 DC 0C'  FREEMAIN R,A=(1),LV=&GBLSTRG,SP=&GBLCESP' FREEMAIN ISSUED
         FREEMAIN R,A=(1),LV=&GBLSTRG,SP=&GBLCESP
         AGO   .NFSET15
.FRSTACK ANOP
 DC 0C'  FREEMAIN R,A=(1),LV=&GBLSTCK,SP=&GBLCESP' FREEMAIN ISSUED
         FREEMAIN R,A=(1),LV=&GBLSTCK,SP=&GBLCESP
.NFSET15 AIF   ('&XCTL' NE '').GENXCTL     GENERATE XCTL EXIT CODE
         AIF   ('&RC' EQ '' OR '&RC' EQ '0').NFLR14
         AIF   ('&RC'(1,1) EQ '(').FRSET15
         AIF   (T'&RC EQ 'N').NFLR14
.FRSET15 ANOP
         LR    R15,&LCLRREG        SET RETURN CODE INTO PROPER REG
         AGO   .NFLR14
.*
.*       GENERATE FOR RENT=(NEWSTACK,NSL),SPKA=
.*
.GENNSL  ANOP
&LCLLABL CNOP  0,4
&LCLLABL SETC  ''
         L     R0,*+8              LOAD SUBPOOL AND LENGTH
         B     *+8                 SKIP INLINE CONSTANT
         DC    AL1(&GBLCESP),AL3(&GBLSTCK)
         LA    R1,0(,R13)          POINT AT STACK
         LM    R2,R14,80(R13)      RESTORE OPEN/CLOSE/EOV REGS
         SVC   10                  ISSUE FREEMAIN SVC DIRECTLY
         AIF   ('&SPKA' EQ '').NSL1B
         SPKA  &SPKA               RETURN TO SUPERVISOR KEY
.NSL1B   AIF   ('&EXIT' EQ 'NO').MEND  IF EXIT=NO, GET OUT QUICKLY
         AIF   ('&LCLXREG' EQ '').NSL1C SKIP BRANCH TEST IF NOT REQ
         ICM   R15,15,&LCLXREG     CHECK FOR EP IN THIS LOAD MODULE
         BNZR  R15                 AND GO TO IT IF PRESENT
.NSL1C   AIF   ('&LCLXNAM' NE '').XCTL2B GEN INLINE LIST XCTL
   DC 0C'XCTL  SF=(E,&LCLXLST)'
         XCTL  SF=(E,&LCLXLST)
         MEXIT
.*
.*       GENERATE ERROR MESSAGE FOR RENT=(NEWSTACK,SVC6)
.*
.SVC6GEN AIF   ('&GBLCESV' NE 'SVC6').SVC5GEN TRY SVC15
         MNOTE 12,'RENT=(NEWSTACK,SVC6) NOT SUPPORTED BY CNAEXIT'
         MEXIT
.*
.*       GENERATE ERROR MESSAGE FOR RENT=(NEWSTACK,SVC15)
.*
.SVC5GEN AIF   ('&GBLCESV' NE 'SVC15').SVCXGEN TRY NEW PARM
         MNOTE 12,'RENT=(NEWSTACK,SVC15) NOT SUPPORTED BY CNAEXIT'
         MEXIT
.*
.*       GENERATE ERROR MESSAGE FOR UNRECOGNIZED &GBLCESV VALUE'
.*
.SVCXGEN MNOTE 12,'RENT=(NEWSTACK,&GBLCESV) NOT SUPPORTED BY CNAEXIT'
         MEXIT
.*
.*       GENERATE XCTL=(I,MODULE-NAME) VERSION OF XCTL
.*
.GENXCTL LM    R14,R12,12(R13)     RESTORE CALLERS REGISTERS
.XCTL2B  CNOP  2,4                 INSURE CONSTANT ALIGNMENT
         BALR  R15,0               SET NEW ADDRESSABILITY
         PUSH  USING               SAVE PREVIOUS ENVIRONMENT
         DROP  ,                   AVOID ADDRESSING PROBLEMS
         USING *,R15               AND TELL THE ASSEMBLER THE TRUTH
         L     R15,*+16            GET ADDRESS OF NEXT ROUTINE
         LTR   R15,R15             IS IT IN THIS MODULE
         BNZR  R15                 YES, GO TO IT DIRECTLY
         BALR  R15,0               NO, RESET ADDRESSABILITY
         USING *,R15               TELL THE ASSEMBLER AGAIN
         LA    R15,*+10            POINT AT XCTL SF= LIST
         XCTL  SF=(E,(15))         AND GO TO PROGRAM WITH ASSIST
         WXTRN &LCLXNAM            DECLARE AS WEAK EXTERNAL REFERENCE
         DC    A(&LCLXNAM)         IF LINKEDITED IN
         XCTL  EP=&LCLXNAM,SF=L    BUILD XCTL PARAMETER LIST
         POP   USING               GET USERS ENVIRONMENT BACK
.MEND    ANOP                        WAY TO BRANCH OUT
         MEND
         MACRO
&MNAME   CNAENTER  &BASES,         BASE REGISTER LIST                  X
               &CBASE=DR12,        REGISTER ADDRESSING COMMON          X
               &ENTRY=DYES,        GENERATE ENTRY STATEMENT (WITH NAME)X
               &ID=DYES,           FULL, NONE OR DATELESS ID           X
               &PARM=DR2,          WHERE TO PUT PARM LIST POINTER      X
               &PLOAD=,            HOW TO SET UP PARAMETER POINTERS    X
               &RENT=DYES,         REENTRANCY OR NOT AND TYPE          X
               &SAVE=YES,          SHOULD REGISTERS BE SAVED           X
               &SCLEAR=DNO,        SHOULD SAVE AREA BE CLEARED?        X
               &SNAME=,            NAME OF SAVE/WORK AREA              X
               &SP=,               SUBPOOL FOR SAVE AREA               X
               &SPKA=,             SET PROTECT KEY                     X
               &STACK=D2048,       SIZE OF STACK FOR NEWSTACK OPTION   X
               &STORAGE=DWORKLEN,  LENGTH OF STORAGE TO OBTAIN         X
               &WCLEAR=DNO,        SHOULD WORK AREA BE CLEARED?        X
               &WTG=D              WHERE TO GO FIELD NAME
.*
.*       DECLARE GLOBAL SYMBOLS USED FOR MULTIPLE INVOCATIONS AND
.*       THE CNAEXIT MACRO
.*
         GBLA  &GBLREG#            NUMBER OF BASE REGISTERS
         GBLA  &GBLQCNT            NUMBER OF Q ADDRESS CONSTANTS
         GBLB  &GBLACTV            MACRO HAS BEEN INVOKED BEFORE
         GBLB  &GBLSCLR            CLEAR SAVE AREA OPTION
         GBLB  &GBLWCLR            WORK AREA CLEAR OPTION
         GBLC  &GBLREGS(5)         BASE REGISTER VALUES
         GBLC  &GBLUSNG            BASE REGS WITH COMMAS FOR USING
         GBLC  &GBLID              ID OPTION
         GBLC  &GBLPARM            PARM OPTION
         GBLC  &GBLRENT            RENT OPTION
         GBLC  &GBLRSVE            SAVE REGISTERS OPTION (YES OR NO)
         GBLC  &GBLSAVE            SNAME OPTION
         GBLC  &GBLSTRG            STORAGE OPTION
         GBLC  &GBLSTCK            SIZE OF STACK
         GBLC  &GBLCNAM            CSECT NAME
         GBLC  &GBLQNAM(20)        UP TO 20 Q NAMES
         GBLC  &GBLWTG             WTG OPERAND OF 1ST ENTRY
         GBLC  &GBLCBAS            COMMON BASE REGISTER
         GBLC  &GBLCESP            SUBPOOL FOR GETMAIN AND FREEMAIN
         GBLC  &GBLCESV            SVC TYPE - SVCR6, SVCR15, NSL, NULL
         GBLC  &CNASPFL            LEVEL NUMBER FROM SPF LIBRARY
         GBLC  &CNASPFD            DATE OF LAST MODIFICATION
         GBLC  &CNASPFU            USERID OF LAST UPDATER
.*
.*       LOCAL SYMBOLS USED
.*
         LCLA  &LCLREG#            NUMBER OF ENTRIES IN &BASES
         LCLA  &LCLSUB1            DESTINATION SUBSCRIPT
         LCLA  &LCLSUB2            SOURCE SUBSCRIPT
         LCLA  &LCLIDSZ            SIZE OF ID CONSTANTS
         LCLA  &LCLIDLN            &LCLIDSZ-1
         LCLA  &LCLCONS            LENGTH OF ALL CONSTANTS
         LCLA  &LCLFILL            SIZE TO ALIGN SAVE AREA
         LCLA  &LCLWORK            ARITHMETIC WORK
         LCLA  &LCLPLUS            OFFSET CALCULATIONS
         LCLA  &LCLOFFS            OFFSET TO ENTRY OFFSET
         LCLA  &LCLSTRL            OFFSET TO STORAGE VALUE FOR STACKING
         LCLA  &LCLPRML            NUMBER OF VALUES TO PLOAD OPERAND
         LCLB  &LCLOFF             ON FOR 2ND-NTH ENTRIES
         LCLB  &LCLRENT            IS SOME FORM OF REENTRANCY IN?
         LCLB  &LCLENTR            IS ENTRY STATEMENT NEEDED?
         LCLB  &LCLSCLR            CLEAR SAVE AREA THIS ENTRY?
         LCLB  &LCLWCLR            CLEAR WORK AREA THIS ENTRY?
         LCLC  &LCLENAM            NAME FOR ENTRY STATEMENT
         LCLC  &LCLPARM            NAME FOR KEEPING R1
         LCLC  &LCLCHAR            CHARACTER WORK FIELD
         LCLC  &LCLSTRG            STORAGE THIS TIME THHROUGH
         LCLC  &LCLID              ID OPTION FOR THIS CALL
         LCLC  &LCLSVCT            SVC TYPE - SVCR6, SVCR15, NSL, NULL
         LCLC  &LCLTBAS            ENTRY POINT BASE FOR FIRST INSTRS.
.*
.*       IF THIS IS THE FIRST ENTRY, EDIT THE VALUES GIVEN
.*
         AIF   (&GBLACTV).NTH
&GBLACTV SETB  (1)               SET FOR NEXT TIME IN
&GBLCNAM SETC  '&SYSECT'           SET CSECT NAME
.*
.*       EDIT THE REENTRANCY OPTION  (FIRST SUBPARAMETER)
.*
         AIF   ('&RENT(1)' EQ 'DYES').DRENT
&LCLCHAR SETC  '&RENT(1)'
&LCLRENT SETB  ('&LCLCHAR' EQ 'YES'   OR '&LCLCHAR' EQ 'NEWSTACK' OR   *
                '&LCLCHAR' EQ 'STACK' OR '&LCLCHAR' EQ 'NOSAVE'   OR   *
                '&LCLCHAR' EQ 'COM')
         AIF   (&LCLRENT OR '&LCLCHAR' EQ 'NO').RENTOK
         MNOTE 4,'&RENT IS AN INVALID REENTRANCY OPTION - YES USED.'
.DRENT   ANOP
&GBLRENT SETC  'YES'
&LCLRENT SETB  (1)
         AGO   .RENTOVR
.RENTOK  ANOP
&GBLRENT SETC  '&RENT(1)'
.*
.*       EDIT THE WTG OPERAND IF &GBLRENT=COM
.*
         AIF   ('&GBLRENT' NE 'COM').RENTOVR
         AIF   ('&WTG' EQ 'D').RENTWTX     NO WTG TYPE PROCESSING
&GBLWTG  SETC  '&WTG'
         AIF   ('&GBLWTG' NE '').RENTWTX
         MNOTE *,'WTG OPERAND NULLIFIED - NO WTG CODE GENERATED'
.RENTWTX ANOP
         AIF   ('&CBASE' EQ 'DR12').DEFCBAS
         AIF   ('&CBASE' NE '').ASGNCBS
         MNOTE 8,'COMMON BASE NEEDED TO RELOCATE WORK AREA - R12 USED.'
.DEFCBAS ANOP
&GBLCBAS SETC  'R12'
         AGO   .RENTOVR
.ASGNCBS ANOP
&GBLCBAS SETC  '&CBASE'
.RENTOVR ANOP
.*
.*       EDIT THE SECOND RENT OPERAND.  THIS IS VALID ONLY IF THE
.*       RENT=NEWSTACK OPERAND IS CODED, AND MUST HAVE ONE OF THE
.*       VALUES 'SVCR6' 'SVCR15' 'NSL' OR NULL.
.*
&LCLTBAS SETC  'R15'                           ASSUME R15 AS ENTRY
         AIF   ('&RENT(2)' EQ '').RNT2END      NO SVC OPTION CODED
         AIF   ('&RENT(1)' NE 'NEWSTACK').RNT2E1 ERROR IF NOT NEWSTACK
         AIF   ('&RENT(2)' NE 'SVCR6' AND '&RENT(2)' NE 'SVCR15' AND   X
               '&RENT(2)' NE 'NSL').RNT2E2     NOT VALID ENTRYS
&GBLCESV SETC  '&RENT(2)'                      SET TYPE OF SVC ENTRY
&LCLSVCT SETC  '&RENT(2)'                      SET IT IN LOCAL
         AIF   ('&LCLSVCT' NE 'SVCR6').RNT2END R15 IS RIGHT
&LCLTBAS SETC  'R6'                            SET R6 AS ENTRY BASE
         AGO   .RNT2END
.RNT2E1  MNOTE 8,'SECOND RENT= OPERAND ONLY VALID WITH NEWSTACK'
         AGO   .RNT2END
.RNT2E2  MNOTE 8,'SECOND RENT= OPERAND MUST BE SVCR6, SVCR15, OR NSL'
.RNT2END ANOP
.*
.*       EDIT THE SPKA OPERAND.  IT IS ONLY VALID IF SECOND RENT
.*       OPTION IS USED.  IT IS USED ONLY IF SPECIFIED ON THE MACRO
.*
         AIF   ('&SPKA' EQ '').RNT3END
         AIF   ('&GBLCESV' NE '').RNT3END  SKIP IF 2ND RENT SPEC'D
         MNOTE 4,'SPKA= OPERAND NOT VALID IF 2ND RENT OPTION OMITTED'
.RNT3END ANOP
.*
.*       EDIT THE SAVE OPERAND.  THIS MUST BE YES UNLESS RENT=
.*       NO OR NOSAVE WAS ENTERED.  THEN IT MAY BE NO.
.*
&GBLRSVE SETC  'YES'                FORCE DEFAULT VALUE
         AIF ('&SAVE' EQ 'YES').RSAVEOK
         AIF ('&SAVE' NE 'NO').RSAVEX1
         AIF ('&GBLRENT' EQ 'NO' OR '&GBLRENT' EQ 'NOSAVE').RSAVEOK
         MNOTE 8,'SAVE=NO ONLY ALLOWED WITH RENT=NO OR RENT=NOSAVE'
         AGO   .RSAVEXL
.RSAVEX1 MNOTE 8,'SAVE= MUST BE YES OR NO'
         AGO   .RSAVEXL
.RSAVEOK ANOP
&GBLRSVE SETC  '&SAVE'
.RSAVEXL ANOP
.*
.*       EDIT THE STACK OPERAND - SHOULD BE D2048 UNLESS
.*       &GBLRENT=NEWSTACK.  IN THAT CASE, SET &GBLSTCK
.*       TO VALUE OF STACK OPERAND.  MULTIPLY BY 1024 IF
.*       ALL NUMERIC EXCEPT TERMINAL K.
.*
         AIF   ('&GBLRENT' EQ 'NEWSTACK').NSEDIT
         AIF   ('&STACK' EQ 'D2048').STACKX
         MNOTE 4,'STACK= IGNORED SINCE RENT=NEWSTACK NOT SPECIFIED'
         AGO   .STACKX
.NSEDIT  ANOP
&LCLWORK SETA  K'&STACK
         AIF   ('&STACK'(&LCLWORK,1) EQ 'K' AND &LCLWORK GT 1).KVAL
         AIF   ('&STACK' NE 'D2048').ASGNSTK
&GBLSTCK SETC  '2048'
         AGO   .STACKX
.KVAL    ANOP
&LCLCHAR SETC  '&STACK'(1,&LCLWORK-1)
.KVALOOP ANOP
&LCLWORK SETA  &LCLWORK-1
         AIF   ('&LCLCHAR'(&LCLWORK,1) LT '0').ASGNSTK
         AIF   (&LCLWORK GT 1).KVALOOP
&GBLSTCK SETC  '&LCLCHAR*1024'
         AGO   .STACKX
.ASGNSTK ANOP
&GBLSTCK SETC  '&STACK'
.STACKX  ANOP
.*
.*       EDIT THE BASE REGISTER SET AND SET UP GBLREG#, GBLREGS AND
.*       GBLUSNG.
.*
&LCLREG# SETA  N'&BASES
&GBLREG# SETA  &LCLREG#
&LCLSUB1 SETA  1
&LCLSUB2 SETA  1
         AIF   (&LCLRENT).OK#
&GBLREG# SETA  &GBLREG#+1          INCREMENT FOR R13 ADDITION
&GBLREGS(1) SETC 'R13'
&LCLSUB1 SETA  2
.OK#     ANOP
         AIF   (&GBLREG# GT 0).OKCOPY
         MNOTE 8,'NO BASE REGISTERS SPECIFIED - WILL USE R11'
&GBLREG# SETA  1
&GBLREGS(1) SETC 'R11'
.OKCOPY  AIF   (&LCLSUB2 GT &LCLREG#).COPUSNG
&GBLREGS(&LCLSUB1) SETC '&BASES(&LCLSUB2)'
&LCLSUB1 SETA  &LCLSUB1+1
&LCLSUB2 SETA  &LCLSUB2+1
         AGO   .OKCOPY
.COPUSNG ANOP
&GBLUSNG SETC  ',&GBLREGS(1)'
         AIF   (&GBLREG# LE 1).ID
&LCLSUB1 SETA  2
         AIF   ('&LCLSVCT' NE '').ERRSVC1
.UCOPY   AIF   (&LCLSUB1 GT &GBLREG#).ID
&GBLUSNG SETC  '&GBLUSNG,&GBLREGS(&LCLSUB1)'
&LCLSUB1 SETA  &LCLSUB1+1
         AGO   .UCOPY
.ERRSVC1 MNOTE 4,'ONLY 1 BASE REGISTER SUPPORTED FOR SVC TYPE &LCLSVCT'
.*
.*       EDIT THE IDENTIFICATION OPTION - DEFAULT IS DYES(YES)-IF SPEC
.*       IS NOT YES, NO, NODATE OR SHORT, SET TO SHORT
.*
.ID      AIF   ('&ID' EQ 'DYES').DID
         AIF   ('&ID' EQ 'YES').IDOK
         AIF   ('&ID' EQ 'NO').IDOK
         AIF   ('&ID' EQ 'NODATE').IDOK
         AIF   ('&ID' EQ 'SHORT').IDOK
         MNOTE 4,'&ID IS AN INVALID IDENTIFICATION OPTION - SHORT USED'
&GBLID   SETC  'SHORT'
&LCLID   SETC  'SHORT'
         AGO   .PRM
.DID     ANOP
&GBLID   SETC  'YES'
&LCLID   SETC  'YES'
         AGO   .PRM
.IDOK    ANOP
&GBLID   SETC  '&ID'
&LCLID   SETC  '&ID'
.*
.*       EDIT THE PARM OPERAND - SET R2 IF OMITTED
.*
.PRM     AIF   ('&PARM' EQ 'DR2').DPARM
         AIF   ('&PARM' NE '').SETPRM
         MNOTE *,'INPUT PARAMETER LIST POINTER WILL BE IN R2'
.DPARM   ANOP
&GBLPARM SETC  'R2'
&LCLPARM SETC  'R2'
         AGO   .ENT
.SETPRM  ANOP
&GBLPARM SETC  '&PARM'
&LCLPARM SETC  '&PARM'
.*
.*       EDIT THE ENTRY= OPERAND - VALID VALUES ARE YES, NO AND
.*       (YES,NAME) - IF YES, &MNAME MUST NOT BE NULL - SET NO
.*       IF INVALID VALUE OR YES AND NO &MNAME
.*
.ENT     ANOP
&LCLENAM SETC  '&MNAME'                  SET LOCAL NAME TO MACRO
         AIF   ('&MNAME' NE '').ENTNOK   YES, LET IT DEFAULT
&LCLENAM SETC  '&SYSECT'                 MUST BE AT START OF MACRO
.ENTNOK  AIF   ('&ENTRY' EQ 'DYES').EYES
         AIF   ('&ENTRY' EQ 'YES').EYES
         AIF   ('&ENTRY' EQ 'NO').SNAME
         AIF   ('&ENTRY(1)' EQ 'YES').ENAME
         MNOTE 4,'&ENTRY INVALID ENTRY OPTION - NO USED'
         AGO   .SNAME
.EOMIT   MNOTE 8,'ENTRY NAME OMITTED - WILL USE NAME FIELD OF CNAENTER X
               MACRO IF PRESENT'
.EYES    AIF   ('&MNAME' EQ '').ENONE
&LCLENAM SETC  '&MNAME'
&LCLENTR SETB  (1)
         AGO   .SNAME
.ENAME   AIF   ('&ENTRY(2)' EQ '').EOMIT
&LCLENAM SETC  '&ENTRY(2)'
&LCLENTR SETB  (1)
         AGO   .SNAME
.ENONE   MNOTE 8,'ENTRY=YES CANCELLED BECAUSE THERE IS NO NAME ON THE MX
               ACRO'
.*
.*       SET THE GLOBAL SAVEVAL TO BE SAVE/WORK AREA NAME FROM
.*       SNAME= OPERAND.  DEFAULT TO WORKAREA OR SAVEAREA
.*       DEPENDING ON REENTRANCY OPTION
.*
.SNAME   AIF   ('&SNAME' EQ '').SNDEF
&GBLSAVE SETC  '&SNAME'
         AGO   .QCONCK
.SNDEF   ANOP
&GBLSAVE SETC  'WORKAREA'
         AIF   (&LCLRENT).QCONCK
&GBLSAVE SETC  'SAVEAREA'
.QCONCK  AIF   ('&GBLRENT' NE 'COM').SCLR
         CNADXD &GBLSAVE
&GBLSAVE SETC  '&GBLQNAM(&GBLQCNT)'
.*
.*       SET THE GLOBAL CLEARS
.*
.SCLR    ANOP
&GBLSCLR SETB  ('&SCLEAR' EQ 'YES')
&LCLSCLR SETB  (&GBLSCLR)
.*
.*       SET THE GLOBAL CLEARW
.*
&GBLWCLR SETB  ('&WCLEAR' EQ 'YES')
&LCLWCLR SETB  (&GBLWCLR)
.*
.*       SET GLOBAL STRGVAL FROM STORAGE= - NULL ALLOWED FOR NON-RENT
.*
&GBLSTRG SETC  'WORKLEN'
&LCLSTRG SETC  'WORKLEN'
         AIF   ('&STORAGE' EQ 'DWORKLEN').EDITSP
&GBLSTRG SETC  '&STORAGE'
&LCLSTRG SETC  '&STORAGE'
         AIF   ('&GBLSTRG' NE '').EDITSP
         AIF   (NOT &LCLRENT).CALC
         AIF   ('&RENT(1)' EQ 'NOSAVE').EDITSP
&GBLSTRG SETC  'WORKLEN'
&LCLSTRG SETC  'WORKLEN'
         MNOTE 8,'STORAGE= NULLIFIED BUT VALUE REQUIRED - WORKLEN USED'
.*
.*  EDIT THE SP= PARAMETER (SUBPOOL = )
.*
.EDITSP  ANOP
&GBLCESP SETC '0'            DEFAULT IT TO SUBPOOL 0
         AIF  ('&SP' EQ '').CALC  ACCEPT THE DEFAULT
&GBLCESP SETC '&SP'          SET THE OPERAND VALUE
         AGO  .CALC
.*
.*
.*
.*       EDIT SUPPLIED OPERANDS AGAINST GLOBAL VALUES USED IN FIRST
.*       INVOCATION OF CNAENTER
.*
.*
.*
.NTH     ANOP
.*
.*       SET UP LOCAL ITEMS TO MATCH GLOBALS FOR FIRST APPROXIMATION
.*
&LCLSCLR SETB  (&GBLSCLR)
&LCLWCLR SETB  (&GBLWCLR)
&LCLPARM SETC  '&GBLPARM'
&LCLID   SETC  '&GBLID'
&LCLSTRG SETC  '&GBLSTRG'
&LCLOFF  SETB  (1)
&LCLSVCT SETC  '&GBLCESV'             SVC TYPE
&LCLTBAS SETC  'R15'                  TEMPORARY BASE IS R15
         AIF   ('&LCLSVCT' NE 'SVCR6').RNT2L1
&LCLTBAS SETC  'R6'                   TEMPORARY BASE IS R6 FOR SVCR6
.RNT2L1  ANOP
.*
.*       IGNORE ANY DESIGNATION OF BASE REGISTERS
.*
         AIF   (N'&BASES EQ 0).RENTR
         MNOTE 4,'BASE REGISTERS IGNORED - WILL USE SAME AS ON 1ST CALLX
                TO CNAENTER - &GBLREGS(1) IS FIRST BASE'
.*
.*       THE ENTRY ATTRIBUTE MUST BE ASSUMED ELSE WHY ANOTHER ENTRY?
.*
.RENTR   AIF   ('&ENTRY' EQ 'DYES' OR '&ENTRY' EQ 'YES').RSETM
         AIF   ('&ENTRY(2)' NE '').RSET2
         MNOTE 8,'&ENTRY INVALID FOR THIS CALL - YES USED AND NAME ON MX
               ACRO WILL BE ENTRY NAME'
.RSETM   AIF   ('&MNAME' NE '').RSETM2
         MNOTE 8,'MACRO NAME REQUIRED FOR ENTRY POINT - ####$$$$ USED'
&LCLENAM SETC  '####$$$$'
         AGO   .RENTSET
.RSET2   ANOP
&LCLENAM SETC  '&ENTRY(2)'
         AGO   .RENTSET
.RSETM2  ANOP
&LCLENAM SETC  '&MNAME'
.RENTSET ANOP
&LCLENTR SETB  (1)
.*
.*       ID VALUE RESET TO CONTAIN NO DATE SPECIFICATION IF YES
.*       CURRENTLY IN EFFECT
.*
         AIF   ('&LCLID' NE 'YES').CKIDOVR
&LCLID   SETC  'NODATE'
.CKIDOVR AIF   ('&ID' EQ 'DYES').RPRM
         AIF   ('&ID' EQ 'YES').LCLYES
         AIF   ('&ID' EQ 'SHORT').LCLYES
         AIF   ('&ID' EQ 'NODATE').LCLYES
         AIF   ('&ID' EQ 'NO').LCLYES
         MNOTE 4,'&ID INVALID FOR ID= - VALUE &LCLID USED.'
         AGO   .RPRM
.LCLYES  ANOP
&LCLID   SETC  '&ID'
.*
.*       SEE IF PARM REGISTER TO BE OVERRIDEN FOR THIS ENTRY
.*
.RPRM    ANOP
         AIF   ('&PARM' EQ 'DR2').RRENT
&LCLPARM SETC  '&PARM'
.*
.*       FLUSH RENT OPTION IF CODED - USE ORIGINAL
.*
.RRENT   AIF   ('&RENT(1)' EQ 'DYES').RSWRCK
         AIF   ('&RENT(1)' EQ '&GBLRENT').RSWRCK
         MNOTE 4,'&RENT REENTRANCY OPTION IGNORED - &GBLRENT FROM FIRSTX
               USE OF CNAENTER USED.'
.RSWRCK  ANOP
.*
.*       SET &LCLRENT FOR PROPER GEN TYPE
.*
&LCLRENT SETB  ('&GBLRENT' EQ 'YES'   OR '&GBLRENT' EQ 'NEWSTACK' OR   *
                '&GBLRENT' EQ 'STACK' OR '&GBLRENT' EQ 'NOSAVE' OR     *
                '&GBLRENT' EQ 'COM')
.*
.*       EDIT SPKA OPTION. ONLY VALID IF 2ND RENT OPTION CODED
.*
         AIF  ('&SPKA' EQ '' OR '&GBLCESV' NE '').RNT4OK
         MNOTE 4,'SPKA=&SPKA IGNORED IF 2ND RENT OPTION NOT CODED'
.RNT4OK  ANOP
.*
.*       EDIT WTG OPERAND IF GBLRENT=COM
.*
         AIF   ('&GBLRENT' NE 'COM').NOCBAS
         AIF   ('&GBLWTG' EQ '').NLWTG
         AIF   ('&WTG' EQ 'D' OR '&WTG' EQ '&GBLWTG').NOWTGE
         MNOTE 8,'&WTG WTG ENTRY IGNORED - &GBLWTG USED'
         AGO   .NOWTGE
.NLWTG   ANOP
         AIF   ('&WTG' EQ 'D' OR '&WTG' EQ '').NOWTGE
         MNOTE 8,'NO WTG CODE GENERATED DUE TO FIRST ENTRY CONDITIONS'
.NOWTGE  ANOP
         AIF   ('&CBASE' EQ 'DR12' OR '&CBASE' EQ '&GBLCBAS').NOCBAS
         MNOTE 8,'COMMON BASE CODED IGNORED - &GBLCBAS USED'
.NOCBAS  ANOP
.*
.*       RESET LOCAL VALUE OF CLEAR SWITHCES IF NOT DEFAULTED
.*
         AIF   ('&SCLEAR' EQ 'DNO').CKWCLR
&LCLSCLR SETB  ('&SCLEAR' EQ 'YES')
.CKWCLR  AIF   ('&WCLEAR' EQ 'DNO').RSN
&LCLWCLR SETB  ('&WCLEAR' EQ 'YES')
.*
.*       SAVE AREA NAME MUST REMAIN CONSTANT OVER INVOCATIONS
.*
.RSN     AIF   ('&SNAME' EQ '').RSTRG
         AIF   ('&SNAME' EQ '&GBLSAVE').RSTRG
         MNOTE 8,'&SNAME WILL NOT BE USED FOR SAVE/WORK AREA NAME - &GBL
               LSAVE WILL BE USED INSTEAD'
.*
.*       STORAGE VALUE CAN ONLY CHANGE FOR RENT=NEWSTACK OR RENT=STACK
.*
.RSTRG   AIF   ('&STORAGE' EQ 'DWORKLEN').CALC
         AIF   ('&STORAGE' EQ '&GBLSTRG').CALC
         AIF   ('&GBLRENT' EQ 'NEWSTACK' OR '&GBLRENT' EQ 'STACK').REST
        MNOTE 8,'UNABLE TO CHANGE STORAGE LENGTH - VALUE &GBLSTRG USED'
         AGO   .CALC
.REST    ANOP
&LCLSTRG SETC  '&STORAGE'
.*
.*
.*
.*       COMMON MACRO SET UP AND OFFSET CALCULATION
.*
.*
.*    ID=    NO     SHORT   NODATE    YES     ENTRY=  (SPFID)  FIRST?
.*
.*            0       10      10       24       NO       NO      ---
.*
.*                            28       28       YES      ---     NO
.*
.*                            28       42       YES      NO      YES
.*
.*                            34       48       NO       YES     ---
.*
.*                            52       66       YES      YES     YES
.*
.*
.CALC    ANOP
&LCLIDSZ SETA  0
         AIF   ('&LCLID' EQ 'NO').NOSPFID
&LCLIDSZ SETA  10
         AIF   ('&LCLID' EQ 'SHORT').NOSPFID  NO ID OR DATES
         AIF   (NOT &LCLENTR AND NOT &LCLOFF).IDLEN
&LCLIDSZ SETA  &LCLIDSZ+18           FOR ENTRY=YES
.IDLEN   AIF   (&LCLOFF).NOSPFID     NO DATES FOR 2ND ENTRY
         AIF   ('&LCLID' EQ 'NODATE').CALCND  NO DATE - MAY BE SPF
&LCLIDSZ SETA  &LCLIDSZ+14           FOR ASSEMBLY DATE AND TIME
.CALCND  AIF   ('&CNASPFL' EQ '').NOSPFID       SKIP IF NO SPF DATA
&LCLIDSZ SETA  &LCLIDSZ+24         LENGTH OF SPF SOURCE DATA
.NOSPFID ANOP
&LCLIDLN SETA  &LCLIDSZ-1
.*
.*       SIZE OF ID CONSTANTS CALCULATED - CALCULATE TOTAL
.*       CONSTANT SIZE BY ADDING 2 FOR STORAGE CALCULATION
.*       FOR STACKING, 2 FOR OFFSET FOR BASE 1 CALCULATION
.*       AND 72 PLUS ALIGNMENT FILLER FOR IN-LINE SAVE AREAS.
.*
&LCLCONS SETA  &LCLIDSZ
&LCLPLUS SETA  4
         AIF   (NOT &LCLOFF).NOFF
&LCLCONS SETA  &LCLCONS+2         ADD FOR BASE 1 OFFSET
&LCLOFFS SETA  &LCLIDSZ+&LCLPLUS
&LCLPLUS SETA  &LCLPLUS+2
.NOFF    AIF   ('&GBLRENT' NE 'STACK' AND '&GBLRENT' NE 'NEWSTACK').N
&LCLCONS SETA  &LCLCONS+2         ADD FOR STORAGE OFFSET
&LCLSTRL SETA  &LCLIDSZ+&LCLPLUS
&LCLPLUS SETA  &LCLPLUS+2
.N       AIF   ('&GBLRENT' NE 'NO' OR &LCLOFF).NOSAVE
&LCLWORK SETA  &LCLCONS/4
&LCLWORK SETA  &LCLWORK*4
&LCLFILL SETA  &LCLWORK+4-&LCLCONS
         AIF   (&LCLFILL LT 4).FSET
&LCLFILL SETA  0
.FSET    ANOP
&LCLCONS SETA  &LCLCONS+&LCLFILL+72
.*
.*
.*       CALCULATIONS ARE DONE ... BEGIN CODE GENERATION
.*
.*
.NOSAVE  ANOP
         AIF   (NOT &LCLOFF).NOALGN
         CNOP  0,8                 FORCE DOUBLE WORD ALIGNMENT
.NOALGN  AIF   (NOT &LCLENTR).NEGE
&LCLENAM DS    0H                  ENTRY POINT NAME
         ENTRY &LCLENAM            EXTERNAL DECLARATION
.NEGE    AIF   ('&MNAME' EQ '').NNAME
         AIF   ('&LCLENAM' EQ '&MNAME' AND &LCLENTR).NNAME
&MNAME   DS    0H                  ENTRY POINT NAME
.NNAME   ANOP
         USING *,&LCLTBAS          TEMPORARY BASE
         AIF   (&LCLCONS EQ 0).NOCONS
&LCLWORK SETA  &LCLCONS+4
         B     *+&LCLWORK          BRANCH AROUND ALL CONSTANTS
         AIF   (&LCLIDSZ EQ 0).NOIDSZ
         DC    AL1(&LCLIDLN)       LENGTH OF ID FIELDS
         AIF   (NOT &LCLENTR).NOECON
         DC    CL9'&LCLENAM'       ENTRY NAME IN ID FIELDS
         AIF   (&LCLIDSZ EQ 10).NOIDSZ
         DC    CL9'IN CSECT '
.NOECON  DC    CL9'&SYSECT'        CSECT NAME IN ID FIELDS
         AIF   (&LCLIDSZ EQ 10).NOIDSZ
         AIF   (&LCLOFF).NOIDSZ    SKIP BOTH TIME AND SPF DATA FOR 2ND
         AIF   ('&LCLID' EQ 'NODATE').SPFID1
         DC    CL9'&SYSDATE'       ASSEMBLY DATE IN ID FIELDS
         DC    CL5'&SYSTIME'       ASSEMBLY TIME IN ID FIELDS
.SPFID1  AIF   ('&CNASPFD' EQ '').NOIDSZ INSERT SPF DATA
         DC    CL8' &CNASPFD'      DATE OF THIS MODIFICATION
         DC    CL8'&CNASPFL'       LEVEL NUMBER OF THIS VERSION
         DC    CL8'&CNASPFU'       TSO USERID OF LAST UPDATER
.NOIDSZ  AIF   (NOT &LCLOFF).STCKCK
         AIF   ('&GBLRENT' EQ 'NO').SAOFF
         DC    Y(&LCLENAM-&SYSECT) OFFSET TO MODULE BASE
         AGO   .STCKCK
.SAOFF   DC    Y(&LCLENAM-&GBLSAVE) OFFSET TO MODULE BASE
.STCKCK  AIF   ('&GBLRENT' NE 'STACK' AND '&GBLRENT' NE 'NEWSTACK').F
         DC    Y(&LCLSTRG)         WORK AREA SIZE FROM STACK
.F       AIF   ('&GBLRENT' NE 'NO' OR &LCLOFF).NOCONS
         AIF   (&LCLFILL EQ 0).NOFILL
         DC    XL(&LCLFILL)'00'    FILLER TO ALIGN SAVE AREA
.NOFILL  ANOP
&GBLSAVE DC    18F'0'              MODULE'S SAVE AREA
.NOCONS  ANOP
         SPACE 2
.*
.*             GENERATE CODE FOR SVC ENTRY OPTIONS
.*
         AIF   ('&LCLSVCT' EQ '').RNT2GND   NO SVC ENTRY, GO TO STD.
         AIF   ('&LCLSVCT' EQ 'SVCR6').RNT2G1 DON'T SAVE BASE REGISTER
         AIF   ('&LCLSVCT' EQ 'NSL').RNT2G1  LIKEWISE FOR NSL OPTION
         LR    R3,&LCLTBAS         SAVE TEMPORARY BASE
         DROP  &LCLTBAS
         USING &LCLENAM,R3
&LCLTBAS SETC  'R3'                RESET TEMPORARY BASE
.RNT2G1  AIF   ('&SPKA' EQ '').RNT2G1A      SKIP IF NO SPKA OPTION
         AIF   ('&SPKA' NE 'DATAMGT').USERSPK
         SPKA  80                  SET DATAMGT PROTECT KEY
         AGO   .RNT2G1A
.USERSPK SPKA  &SPKA               SET PROTECT KEY FOR USER
.RNT2G1A ANOP
  DS  0C'GETMAIN R,LV=&GBLSTCK,SP=&GBLCESP' GET NEW STACK
         GETMAIN R,LV=&GBLSTCK,SP=&GBLCESP
         AIF   ('&LCLSVCT' NE 'NSL').RNT2G2  SKIP SAVE IF NOT NSL
         STM   R2,R14,80(R1)       SAVE OPEN/CLOSE/EOV REGS (EX. R3)
         LR    R13,R1              SET SAVEAREA IN PROPER BASE
         BALR  &GBLREGS(1),0       GET LOCATION
         LA    R15,*-&SYSECT       CALCULATE CORRECT BASE
         SLR   &GBLREGS(1),R15      --> 4K MODULE LIMIT <--
         AGO   .RNT2G3             SKIP OTHER OPTION FIDDLING
.RNT2G2  LR    R13,R1              SET SAVEAREA IN PROPER BASE
         AIF   ('&GBLREGS(1)' EQ '&LCLTBAS' AND NOT &LCLOFF).RNT2G3A
         AIF   ('&GBLREGS(1)' EQ '&LCLTBAS').RNT2G2A
         LR    &GBLREGS(1),&LCLTBAS SET PERMANENT BASE REGISTER
.RNT2G2A AIF   (NOT &LCLOFF).RNT2G3      SKIP IF NOT SECOND ENTRY
         SH    &GBLREGS(1),&LCLENAM+&LCLOFFS ADJUST THE BASE REGISTER
.RNT2G3  DROP  &LCLTBAS            RESET ADDRESSING
         USING &SYSECT&GBLUSNG     SET USING FOR PROGRAM
.RNT2G3A LH    R15,&LCLENAM+&LCLSTRL SET ADDRESS OF NEXT
         AR    R15,R13              WORKAREA IN THE STACK
         ST    R15,72(,R13)         FOR RENT=STACK PROCESSING
         XC    4(8,R13),4(R13)      CLEAR BACK AND FOREWARD POINTERS
         USING &GBLSAVE,R13         DECLARE DSA
         AIF   ('&LCLSVCT' NE 'SVCR6').RNT2G4 IS IT R6 ENTRY
         LM    R0,R1,32(R5)         RESTORE PARAMETER REGS FROM
         L     R15,92(R5)           SVRB SAVEAREA
.RNT2G4  SPACE 2
         MEXIT
.RNT2GND ANOP
.*
.*             NOW GENERATE FOR NON SVC ENTRY OPTIONS
.*
         AIF   ('&GBLRSVE' EQ 'NO').RSVE#1
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         AGO   .RSVE#2
.RSVE#1  LR    R3,R14              SAVE R14 FOR RETURN
.RSVE#2  LR    &LCLPARM,R1         SAVE INPUT PARAMETER LIST PTR.
         AIF   (&LCLRENT).RBASES
         AIF   (&LCLOFF).SOFFBAS
         LA    R15,&GBLSAVE        WILL BE BASE AND S.A. POINTER
.NRBAS   ST    R13,4(,R15)         SET BACK CHAIN
         ST    R15,8(,R13)         SET FORWARD CHAIN
         LR    R13,R15             SET BASE AND S.A. POINTER
         DROP  R15                 END TEMPORARY ADDRESSING
         USING &GBLSAVE&GBLUSNG    PERMANENT ADDRESSING
         AGO   .NTHBASE
.SOFFBAS ANOP
         SH    R15,&LCLENAM+&LCLOFFS WILL BE BASE AND S.A. POINTER
         AGO   .NRBAS
.RBASES  LR    &GBLREGS(1),R15     SET 1ST BASE REGISTER
         AIF   (NOT &LCLOFF).ROFFBAS
         SH    &GBLREGS(1),&LCLENAM+&LCLOFFS RESET BACK TO ORIGIN
.ROFFBAS DROP  R15                 END TEMPORARY ADDRESSING
         USING &SYSECT&GBLUSNG     PERMANENT ADDRESSING
.NTHBASE AIF   (&GBLREG# LE 1).NTHSET
&LCLSUB1 SETA  2
&LCLSUB2 SETA  1
         LA    R14,2048            CONSTANT FOR NTH BASE GENERATION
.NTHGENR AIF   (&LCLSUB1 GT &GBLREG#).NTHSET
         LA    &GBLREGS(&LCLSUB1),2048(R14,&GBLREGS(&LCLSUB2).)
&LCLSUB2 SETA  &LCLSUB1
&LCLSUB1 SETA  &LCLSUB1+1
         AGO   .NTHGENR
.NTHSET  ANOP
         SPACE 2
         AIF   ('&GBLRENT' EQ 'NO').PL
         AIF   ('&GBLRENT' EQ 'NOSAVE').PL
         AIF   ('&GBLRENT' EQ 'YES').GET
         AIF   ('&GBLRENT' EQ 'STACK').STACK
         AIF   ('&GBLRENT' EQ 'COM').COMGET
*                                  GET STACK
         GETMAIN  R,LV=&GBLSTCK,SP=&GBLCESP
         AGO   .FWDCHN
.STACK   ANOP
         L     R1,72(,R13)         GET NEXT AREA ORIGIN IN STACK
         AGO   .FWDCHN
.GET     ANOP
*                                  GET WORKING STORAGE
         GETMAIN  R,LV=&LCLSTRG,SP=&GBLCESP
         AGO   .FWDCHN
.COMGET  ANOP
         L     R1,Q&GBLQNAM(1)     GET OFFSET TO WORK AREA
         AR    R1,&GBLCBAS         ADJUST TO ADDRESS
.FWDCHN  ST    R1,8(,R13)          SET FORWARD CHAIN
         AIF   (NOT &LCLWCLR).SCLRCK
         LR    R14,R1              ADDRESS TO BEGIN CLEAR
         AIF   ('&GBLRENT' EQ 'YES').CLRLC
         AIF   (&LCLENTR).LHENTR
         LH    R15,&SYSECT+&LCLSTRL LENGTH OF CLEAR
         AGO   .CLRCMN
.CLRLC   LH    R15,*+8             LENGTH OF CLEAR
         B     *+6                 AROUND CONSTANT
         DC    Y(&LCLSTRG)         SIZE OF WORK AREA
         AGO   .CLRCMN
.LHENTR  LH    R15,&LCLENAM+&LCLSTRL LENGTH OF CLEAR
.CLRCMN  SR    R1,R1               FILL CHARACTER IS X'00'
         MVCL  R14,R0              CLEAR THE WORK AREA
         L     R1,8(,R13)          RELOAD CURRENT WORK POINTER
         AGO   .CLRD
.SCLRCK  AIF   (NOT &LCLSCLR).CLRD
         XC    0(72,R1),0(R1)      CLEAR THE SAVE AREA
.CLRD    AIF   ('&GBLRENT' EQ 'YES' OR '&GBLRENT' EQ 'COM').NOSTKS
         AIF   (&LCLENTR).LENENTR
         LH    R15,&SYSECT+&LCLSTRL SIZE OF AREA NEEDED IN STACK
         AGO   .BLDSTKN
.LENENTR LH    R15,&LCLENAM+&LCLSTRL SIZE OF AREA NEEDED IN STACK
.BLDSTKN AR    R15,R1              R15 IS NEXT FREE SLOT IN STACK
         ST    R15,72(,R1)         SET FOR NEXT MODULE TO FIND
.NOSTKS  AIF   ('&GBLRSVE' EQ 'NO').NRSV#3
         ST    R13,4(,R1)          SET BACK CHAIN
         LM    R13,R1,8(R13)       RESTORE CLOBBERED REGISTERS
         USING &GBLSAVE,R13        TELL ASSEMBLER ABOUT REGISTER
         AGO   .PL                 GO CHECK FOR PARAMETER LIST SAVE
.NRSV#3  LR    R13,R1              SET WORK AREA REGISTER
         USING &GBLSAVE,R13        TELL ASSEMBLER ABOUT REGISTER
.PL      AIF   ('&PLOAD' EQ '').DONE
&LCLPRML SETA  N'&PLOAD
&LCLWORK SETA  1
         SPACE 2
.PLLOOP  CNAPLOAD &PLOAD(&LCLWORK),&LCLWORK,&LCLPARM
&LCLWORK SETA  &LCLWORK+1
         AIF   (&LCLWORK LE &LCLPRML).PLLOOP
.DONE    AIF   ('&GBLRENT' NE 'COM').DONE1
         AIF   ('&GBLWTG' EQ '').DONE1
         ICM   R15,15,&GBLWTG         PICK UP WHERE TO GO ADDRESS
         BNZR  R15                    GO THERE IF INITIALIZED
.DONE1   ANOP
         SPACE 2
         MEND
         PRINT ON,NOGEN                                            @TEC
KDSNDDN  TITLE 'SUBROUTINE: FIND DSNAME OR DDNAME OR MEMBER'
KDSNDDN  CSECT
KDSNDDN  AMODE 31                                                  @TEC
         RG    (RBASE,,12)
         RG    (RARG)
         RG    (RCOUNT)
         RG    (RARRAY)
         RG    (RPARM)
*                                                                     *
*  TECHNICAL NOTES:                                                   *
*     1. PROGRAM IS REENTRANT.                                        *
*     2. "DDD" SERVICE USED FOR ALLOCATE/FREE OF LIBRARIES FOR BLDL   *
*        DURING MEMBER-SEARCH FUNCTION.                               *
*     3. THREE ENTRYPOINTS ARE USED (LINKEDITED WITH THREE ALIASES).  *
*     4. THREE PARAMETERS ARE RECEIVED AT EACH ENTRYPOINT;            *
*        LAST TWO PARAMETERS ARE UPDATED BY SUBROUTINE:               *
*           SEARCH-ARGUMENT                                           *
*           ARRAY ROW-COUNTER                                         *
*           ARRAY                                                     *
*        NOTE: "KSNSUB" ENTRY HAS AN OPTIONAL 4TH PARAMETER.          *
*     5. RETURN-CODES:                                                *
*              0 = SUCCESSFUL SEARCH ("HITS" FOUND).                  *
*              4 = SUCCESSFUL SEARCH ("HITS" FOUND); ARRAY OVERFLOW.  *
*              8 = UNSUCCESSFUL SEARCH (NO "HITS" FOUND).             *
         EJECT
*                                                                     *
*     KDSNSUB PARAMETERS ARE:                                         *
*           SEARCH-ARGUMENT   (8-BYTE DDNAME)                         *
*           ARRAY ROW-COUNTER (HALFWORD BINARY; UPDATED TO NUMBER OF  *
*                              DSNAMES FOUND)                         *
*           ARRAY             (N X 44-BYTE ARRAY FOR DSNAMES)         *
*           ARRAY             (N X 6-BYTE ARRAY FOR VOLSERS;OPTIONAL) *
KDSNSUB  CNAENTER RBASE,PARM=RPARM,RENT=YES
         L     R9,*+6                                              @TEC
         BSM   0,R9                                                @TEC
         DC    A(*+4+X'80000000')                                  @TEC
         MVI   FUNC,C'1'
         B     DOIT
         EJECT
*                                                                     *
*     KDDNSUB PARAMETERS ARE:                                         *
*           SEARCH-ARGUMENT   (44-BYTE DSNAME)                        *
*           ARRAY ROW-COUNTER (HALFWORD BINARY; UPDATED TO NUMBER OF  *
*                              DDNAMES FOUND)                         *
*           ARRAY             (N X 10-BYTE ARRAY FOR DDNAMES;         *
*                              ARRAY ROW FORMAT:                      *
*                              8-BYTE DDNAME                          *
*                              HALFWORD BINARY CONCATENATION SEQUENCE *
*                                   (0 = DSNAME IS NOT CONCATENATED)) *
KDDNSUB  CNAENTER PARM=RPARM,RENT=YES
         L     R9,*+6                                              @TEC
         BSM   0,R9                                                @TEC
         DC    A(*+4+X'80000000')                                  @TEC
         MVI   FUNC,C'2'
         B     DOIT
         EJECT
*                                                                     *
*     KMEMSUB PARAMETERS ARE:                                         *
*           SEARCH-ARGUMENT   (8-BYTE MEMBER NAME)                    *
*           ARRAY ROW-COUNTER (HALFWORD BINARY; UPDATED TO NUMBER OF  *
*                              "HITS" FOUND)                          *
*           ARRAY             (N X 44-BYTE ARRAY FILLED WITH DSNAMES; *
*                              "NO-HIT" DSNAMES ARE BLANKED-OUT IN    *
*                              PLACE).                                *
KMEMSUB  CNAENTER PARM=RPARM,RENT=YES
         L     R9,*+6                                              @TEC
         BSM   0,R9                                                @TEC
         DC    A(*+4+X'80000000')                                  @TEC
         MVI   FUNC,C'3'
         B     DOIT
         EJECT
DOIT     DS    0H
         XC    RC4,RC4
         LM    RARG,RARRAY,0(RPARM)          GRAB 3 ENTRY PARAMETERS
         XC    HOLDVOL,HOLDVOL               CLEAR
         TM    8(RPARM),X'80'                TEST FOR 4TH PARAMETER
         BO    *+10                          BR IF NOT PRESENT
         MVC   HOLDVOL,12(RPARM)             COPY 4TH-PARM ADDRESS
         NI    HOLDVOL,X'EF'                 CLEAR VL-BIT
         RF    RPARM                         FREE PARM-POINTER
         CLI   FUNC,C'3'                     MEMBER-TEST?
         BE    SEARCH3                       BR IF YES
*              CLEAR RESULTS-ARRAY FOR DSN/DDN SEARCH
         RG    (RWORK1A),(RWORK1B)
         RG    (RWORK2A),(RWORK2B)
         XR    RWORK2A,RWORK2A
         XR    RWORK2B,RWORK2B
         ICM   RWORK2B,8,=C' '               BLANK-FILL CHAR
         LH    RWORK1B,0(RCOUNT)             GET ARRAY COUNTER
         LA    RWORK1A,44                    MULTIPLY BY 44
         CLI   FUNC,C'2'                     DDN-SEARCH?
         BNE   *+8                           BR IF YES
         LA    RWORK1A,10                    MULTIPLY BY 10
         MR    RWORK1A,RWORK1A               MULTIPLY BY ARRAY COUNTER
         LR    RWORK1A,RARRAY                SET ARRAY ADDRESS
         MVCL  RWORK1A,RWORK2A               CLEAR RESULTS ARRAY
*
         RF    RWORK1A,RWORK1B
         RF    RWORK2A,RWORK2B
         RG    (RTALLY)
*
SEARCH12 DS    0H
         RG    (RTCB)                        TCB MAP
         RG    (RTIOT)                       TIOT MAP
         L     RTCB,540(R0)                  POINT TO TCBOLD
         L     RTIOT,12(RTCB)                POINT TO TIOT (TCBTIO)
         RF    RTCB                          DONE WITH TCB
         RG    RTIOTLN                       TCB DDNAME ENTRY LENGTH
         XR    RTIOTLN,RTIOTLN
         LA    RTIOT,24(RTIOT)               POINT TO 1ST DDNAME ENTRY
         XR    R0,R0                         CLEAR FOR RESULTS COUNT
         LH    RTALLY,0(RCOUNT)              ARRAY COUNTER
         LA    RTALLY,1(RTALLY)                PLUS 1 FOR BCT
         CLI   FUNC,C'2'                     DDNAME SEARCH?
         BE    DSLOOK                        BR IF YES
         EJECT
*              FIND DSNAMES FOR A DDNAME
DDLOOK   DS    0H                            FIND INITIAL DDNAME ENTRY
         RG    RVOL
         L     RVOL,HOLDVOL                  GET VOLSER ARRAY ADDR
         CLI   0(RTIOT),X'00'
         BE    DONEDDN                       BR IF DDNAME NOT FOUND
         IC    RTIOTLN,0(RTIOT)              PICK UP TIOELNGH
         CLC   0(8,RARG),4(RTIOT)            COMPARE INPUT TO TIOEDDNM
         BE    GOTDDN                        BR IF FOUND
         LA    RTIOT,0(RTIOTLN,RTIOT)        SET TO NEXT ENTRY
         B     DDLOOK
GOTDDN   DS    0H
         BCT   RTALLY,*+8                    DECREASE ARRAY COUNT
         B     NOROOM                        BR IF NO ROOM IN ARRAY
         A     R0,=F'1'                      ADD TO "HIT" COUNT
         TM    3(RTIOT),X'20'                TEST TIOELINK FOR DA(*)
         BZ    NOTTERM                       BR TO GET DSNAME
         MVC   0(8,RARRAY),=C'TERMFILE '
         B     VOLTST
NOTTERM  DS    0H
         TM    3(RTIOT),X'02'
         BZ    NOTSYSO
         MVC   0(8,RARRAY),=C'JESFILE '
         B     VOLTST
NOTSYSO  DS    0H
         L     R1,16              CVT                              @TEC
         L     R1,0(,R1)          ACT TCB PT                       @TEC
         L     R1,4(,R1)          ACT TCB                          @TEC
         L     R1,TCBJSCB-TCBRBP(R1)     JSCB                      @TEC
         L     R1,JSCDSABQ-IEZJSCB(R1)   DSAB QUE                  @TEC
         L     R1,12(,R1)                FIRST DSAB                @TEC
ISPFDSB1 LTR   R1,R1         END OF DSAB CHAIN                     @TEC
         BZ    NEXTDSN       SKIP THIS ONE.                        @TEC
         L     R15,DSABTIOT-DSAB(R1)                               @TEC
         CR    RTIOT,R15                                           @TEC
*        CLC   4(8,RTIOT),TIOEDDNM-TIOENTRY(R15)                   @TEC
         BE    GOTDSAB       GOT A MATCH                           @TEC
         L     R1,DSABFCHN-DSAB(R1)     NEXT DSAB                  @TEC
         B     ISPFDSB1                                            @TEC
GOTDSAB  DS    0H                                                  @TEC
         L     R1,DSABSIOT-DSAB(R1)                                @TEC
         L     R1,SJFCBPTR-SIOT(R1)                                @TEC
         MVC   0(44,RARRAY),0(R1)            PICK UP DSNAME        @TEC
*        L     R1,12(RTIOT)                  PICK UP JFCB ADDRESS  @TEC
*        SRL   R1,8                          SHIFT TO CLEAR TIOESTTC
*        MVC   0(44,RARRAY),16(R1)           PICK UP DSNAME        @TEC
VOLTST   DS    0H
         LTR   RVOL,RVOL                     VOLSERS WANTED?
         BZ    NEXTDSN                       BR IF NO
         MVC   0(6,RVOL),=CL6' '
         CLC   0(8,RARRAY),=CL8'NULLFILE'
         BE    BUMPVOL
         CLC   0(8,RARRAY),=CL8'TERMFILE'
         BE    BUMPVOL
         CLC   0(8,RARRAY),=CL8'JESFILE'
         BE    BUMPVOL
         L     R1,16(RTIOT)                  GET UCB ADDRESS
         N     R1,=X'00FFFFFF'                                     @TEC
         USING IEFUCBOB,1
         MVC   0(6,RVOL),UCBVOLI             GRAB VOLSER
         DROP  1
BUMPVOL  LA    RVOL,6(RVOL)                  BUMP TO NEXT VOL SLOT
NEXTDSN  DS    0H
         LA    RARRAY,44(RARRAY)             BUMP TO NEXT DSN SLOT
         LA    RTIOT,0(RTIOTLN,RTIOT)        LOOP TO NEXT ENTRY
         CLI   0(RTIOT),X'00'
         BE    DONEDDN
         IC    RTIOTLN,0(RTIOT)              PICK UP TIOELNGH
         CLC   4(8,RTIOT),=CL8' '            TEST FOR CONCAT DSNAMES
         BE    GOTDDN                        BR IF FOUND
         B     DONEDDN
         RF    RVOL
         EJECT
*              FIND DDNAMES FOR A DSNAME
DSLOOK   DS    0H                            FIND INITIAL DDNAME ENTRY
         CLI   0(RTIOT),X'00'
         BE    DONEDDN                       BR IF DDNAME NOT FOUND
         IC    RTIOTLN,0(RTIOT)              PICK UP TIOELNGH
         CLI   4(RTIOT),C' '                 CONCATENATION?
         BE    BUMPDD                        BR IF YES
         MVC   REALDD,4(RTIOT)               GET CURRENT DDNAME
         XC    CONCAT,CONCAT                 ZERO CONCAT COUNTER
         L     R1,FOURBLANK
         CL    R1,4(RTIOTLN,RTIOT)           NEXT DDN BLANK?
         BNE   SKIPDD                        BR TO BYPASS CONCAT COUNT
BUMPDD   DS    0H
         LH    R1,CONCAT
         LA    R1,1(R1)                      ADD 1 TO CONCAT COUNTER
         STH   R1,CONCAT
SKIPDD   DS    0H
         TM    1(RTIOT),X'80'                TEST FOR INELIGIBLE ENTRY
         BO    SKIPDD2                       BR IF FOUND
CKTERM   DS    0H
         CLC   0(9,RARG),=C'TERMFILE '       CHECK FOR SPECIAL ARGUMENT
         BNE   CKSYSOUT                      BR IF FALSE
         TM    3(RTIOT),X'20'                DOES TIOT ENTRY MATCH?
         BO    GOTDSN                        BR IF TRUE
         B     SKIPDD2                       SKIP THIS ENTRY
CKSYSOUT DS    0H
         CLC   0(8,RARG),=C'JESFILE '        CHECK FOR SPECIAL ARGUMENT
         BNE   CKNULL                        BR IF FALSE
         TM    3(RTIOT),X'02'                DOES TIOT ENTRY MATCH?
         BO    GOTDSN                        BR IF TRUE
         B     SKIPDD2                       SKIP THIS ENTRY
CKNULL   DS    0H
         CLC   0(9,RARG),=C'NULLFILE '       CHECK FOR SPECIAL ARGUMENT
         BNE   CKDSN                         BR IF FALSE
         TM    3(RTIOT),X'22'                IS TIOT ENTRY JES OR TERM?
         BM    SKIPDD2                       BR IF TRUE TO SKIP ENTRY
CKDSN    DS    0H
         L     R1,12(RTIOT)                  PICK UP JFCB ADDRESS
         SRL   R1,8                          SHIFT TO CLEAR TIOESTTC
         CLC   0(44,RARG),16(R1)             COMPARE INPUT TO JFCB DSN
         BE    GOTDSN                        BR IF FOUND
SKIPDD2  DS    0H
         LA    RTIOT,0(RTIOTLN,RTIOT)        SET TO NEXT ENTRY
         B     DSLOOK
GOTDSN   DS    0H
         BCT   RTALLY,*+8                    DECREASE ARRAY COUNT
         B     NOROOM                        BR IF NO ROOM IN ARRAY
         A     R0,=F'1'                      ADD TO "HIT" COUNT
         MVC   0(8,RARRAY),REALDD            PICK UP DDNAME
         MVC   8(2,RARRAY),CONCAT            PICK UP CONCAT COUNTER
         LA    RARRAY,10(RARRAY)             BUMP TO NEXT DDN SLOT
         LA    RTIOT,0(RTIOTLN,RTIOT)        LOOP TO NEXT ENTRY
         CLI   0(RTIOT),X'00'
         BE    DONEDDN
         B     DSLOOK
         EJECT
*
*** SEARCH ARRAY FILLED ... PREPARE FOR EXIT
*
NOROOM   DS    0H
         RF    RTIOT,RTIOTLN
         MVI   RC1,4                         SET OVERFLOW RETURN-CODE
DONEDDN  DS    0H
         STH   R0,0(RCOUNT)                  SAVE DSN COUNT
         LTR   R0,R0                         ANY HITS?
         BNZ   FASTEXIT                      BR IF YES
         MVI   RC1,8                         SET NO-HIT RETURN-CODE
         B     FASTEXIT
         EJECT
*
*** LOOP EACH DSNAME TO BLDL AGAINST MEMBER NAME
*
SEARCH3  DS    0H
         RG    RWORK
         XR    RWORK,RWORK
         LH    RTALLY,0(RCOUNT)              WORKING DSN COUNT
         MVC   DTBL1,=H'1'                   NO. OF BLDL ENTRIES
         MVC   DTBLLTH,=H'12'                BLDL ENTRY LENGTH
         MVC   DTBLMEM,0(RARG)               SET MEMBER FOR BLDL
         MVC   PDSDCB(CDCBLTH),CONDCB        MOVE DCB TO GETMAIN AREA
         MVC   LOPEN(COPNLTH),CONOPEN
         MVC   LCLOSE(CCLSLTH),CONCLOS
KMEMTEMP FREEDD EXIT=FINDMEM
FINDMEM  DS    0H
*
KMEMTEMP DDD   DSN=0(RARRAY)@,DISP=SHR,EXIT=NOMEM
*
         LA    R2,PDSDCB
         OPEN  ((2),(INPUT)),MF=(E,LOPEN)    OPEN FOR BLDL
         BLDL  (2),DTBL                      TEST FOR MEMBER
         ST    R15,DTBLRET                   SAVE RETURN-CODE
         CLOSE ((2)),MF=(E,LCLOSE)           CLEANUP AFTER BLDL
         L     R15,DTBLRET                   TEST BLDL RETURN-CODE
         LTR   R15,R15
         BZ    YESMEM                        BR IF FOUND
NOMEM    DS    0H
         MVC   0(44,RARRAY),=CL44' '         BLANK DSNAME IF NOT FOUND
         B     LOOPMEM
YESMEM   DS    0H
         A     RWORK,=F'1'                   COUNT HITS
LOOPMEM  DS    0H
*
KMEMTEMP FREEDD EXIT=LOOPMEM2
*
LOOPMEM2 LA    RARRAY,44(RARRAY)
         BCT   RTALLY,FINDMEM                   PROCESSED DSNAME
         STH   RWORK,0(RCOUNT)               SET COUNT OF HITS
         LTR   RWORK,RWORK
         BNZ   FASTEXIT                      BR IF HITS
         MVI   RC1,8                         SET "NO-HIT" RETURN CODE
         B     FASTEXIT
         EJECT
         RF    RWORK,RTALLY,RARG,RCOUNT,RARRAY
         EJECT
*
*** PROGRAM EXIT
*
FASTEXIT DS    0H
         LA    R8,AMODE24                                          @TEC
         BSM   0,R8                                                @TEC
AMODE24  DS    0H                                                  @TEC
         CNAEXIT RC4
         TITLE '- SUBROUTINES'
         DDDD  CODE
         TITLE '- CONSTANTS'
         DS    0D
FOURBLANK DC   CL4' '
*    DCB FOR BLDL PROCESSING
         PRINT NOGEN
CONDCB   DCB   DDNAME=KMEMTEMP,DSORG=PO,MACRF=(R)
CDCBLTH  EQU   *-CONDCB
CONOPEN  OPEN  (,INPUT),MF=L
COPNLTH  EQU   *-CONOPEN
CONCLOS  CLOSE (,),MF=L
CCLSLTH  EQU   *-CONCLOS
         PRINT GEN
         LTORG *
         TITLE '- WORKING STORAGE'
         CNASTRG
RC4      DS    F
RC1      EQU   RC4+3,1
CONCAT   DS    H
FUNC     DS    C
HOLDVOL  DS    A
*
         DS    0F
REALDD   DS    CL8                           DDNAME HOLD FOR DSLOOK
*
DTBL     DS    0F                            BLDL WORK AREA
DTBL1    DS    H                             # ENTRIES
DTBLLTH  DS    H                             ENTRY LENGTH
DTBLMEM  DS    CL8
DTBLRET  DS    F
*
         DDDD  STORAGE
*
PDSDCB   DS    0A,CL(CDCBLTH)
LOPEN    DS    0A,CL(COPNLTH)
LCLOSE   DS    0A,CL(CCLSLTH)
         CNASEND
         TITLE '- DSECTS'
         PRINT NOGEN
         DCBD   DEVD=DA,DSORG=PS
IEFUCBOB DSECT
         IEFUCBOB
         EJECT
**************************************************************
*   ABSOLUTE REGISTER EQUATES
**************************************************************
          SPACE
R0        EQU   0
R1        EQU   1           PARAMETER REGISTER
R2        EQU   2
R3        EQU   3
R4        EQU   4
R5        EQU   5
R6        EQU   6
R7        EQU   7
R8        EQU   8
R9        EQU   9
R10       EQU   10
R11       EQU   11
R12       EQU   12
R13       EQU   13          ADDRESS OF SAVE-AREA
R14       EQU   14          RETURN REGISTER
R15       EQU   15
          SPACE
**************************************************************
*   CONDITIONAL VALUES
**************************************************************
          SPACE
*   AFTER COMPARE INSTRUCTIONS (A:B)
          SPACE
H         EQU   2           A HIGH
L         EQU   4           A LOW
E         EQU   8           A EQUAL B
NH        EQU   13          A NOT HIGH
NL        EQU   11          A NOT LOW
NE        EQU   7           A NOT EQUAL B
          SPACE
*   AFTER ARITHMETIC INSTRUCTIONS
          SPACE
O         EQU   1           OVERFLOW     (AFTER TM - ALL ONES)
P         EQU   2           PLUS
M         EQU   4           MINUS        (AFTER TM - MIXED   )
Z         EQU   8           ZERO         (AFTER TM - ALL ZERO)
NP        EQU   13          NOT PLUS
NM        EQU   11          NOT MINUS
NZ        EQU   7           NOT ZERO
          SPACE
*   AFTER TEST UNDER MASK INSTRUCTIONS
          SPACE
NO        EQU   14          NOT ONES     (SEE ABOVE FOR O, M, & Z)
          SPACE
          IKJTCB ,                                                 @TEC
          IEFJFCBN ,                                               @TEC
SIOT      DSECT ,                                                  @TEC
          IEFASIOT ,                                               @TEC
          IHADSAB ,                                                @TEC
          IEZJSCB ,                                                @TEC
          IEFTIOT1 ,                                               @TEC
* ************************************************************     @TEC
         END
./       ADD   NAME=MLPALIST
*-------------------------------------------------------------*    @TEC
* UPDATED FOR MVS/ESA 31-BIT ADDRESSES. 29/08/91              *    @TEC
*-------------------------------------------------------------*    @TEC
*          DATA SET CBT930     AT LEVEL 001 AS OF 02/25/79
* MLPALIST               VERSION 1.1 WDPSC AUTHOR STEVE ERICKSON
*          LISTS THE MODULES IN MEMORY THAT WERE LOADED BY THE
*  MODIFY LINK PACK AREA PARAMETER MEMBER AND THE FIXED LINK PACK
*  PACK AREA MEMBER, ALSO ANY MODULES THAT HAVE THE MODIFY/FIX BIT
*  OF THE CDE TURNED ARE LISTED.
*
* THE LIST FORMAT IS SIMILAR TO THAT OF LISTLPA COMMAND OF AMBLIST.
         SPACE 6
*
*        DISTRIBUTION LIBRARY   SYS1.AMODGEN IS NEEDED TO ASSEMBLE THIS
*        ROUTINE.
*
*        OTHER MACROS USED ARE
*               REGISTER - EQUATE MACRO FOR GENERAL REGISTERS
*               QKSRT1   - INTERNAL SORT ROUTINE, CSECT CREATED
*
         PRINT OFF
         MACRO
         REGISTER
         LCLA  &I
.LOOP    ANOP
R&I      EQU   &I
&I       SETA  &I+1
         AIF   (&I LT 16).LOOP
         MEND
         MACRO
         QKSRT1  &NAME,&TYPE,&LENGTH=0,&STRTKY=1,&KYLGTH=0,&ORDER=A,   X
               &EXTRA=0,&OVRTYP=NONE,&DISP=1,&INLINE=NO
***********************************************************************
*** QUICKERSORT MACRO-SUBROUTINE: BASED ON CACM ALGORITHM NUMBER 271  *
*** THE FOLLOWING CHANGES AND ADDITIONS WERE MADE:                    *
*** 1.  CALCULATION OF P AS P:=(I+J)/2 WAS CHANGED TO: P:=I+(J-I)/2   *
*** 2.  THE LINE 'FOR Q:=Q STEP -1 UNTIL K DO' WAS CHANGED TO:        *
***        'FOR Q:=Q STEP -1 UNTIL K+1 DO'                            *
*** 3.  OPTION: CORRESPONDING ELEMENTS IN UP TO FIVE EXTRA ARRAYS MAY *
***        BE EXCHANGED, WHEN ELEMENTS IN THE SORTED ARRAY ARE        *
***        EXCHANGED.  EACH EXTRA ARRAY MUST CONTAIN THE SAME NUMBER  *
***        OF ELEMENTS, AND HAVE ELEMENT SIZES EQUAL TO THOSE OF THE  *
***        SORTED ARRAY.                                              *
*** 4.  OPTION: WITH 'TYPE' SET TO 'C' (CHARACTER FORMAT) OTHER TYPES *
***        OF COMPARES MAY BE MADE BY SPECIFYING ONE OR TWO           *
***        OVERRIDING PARAMETERS.                                     *
*** 5.  OPTION: IN LINE CODE MAY BE GENERATED, IF DESIRED, BY         *
***        SPECIFYING INLINE=YES.  A DUMMY PROGRAM NAME IS STILL      *
***        REQUIRED.  REGISTERS WILL BE SAVED IN A SPECIAL SAVEAREA.  *
***********************************************************************
.**********************************************************************
.*           EXPLANATION OF KEYWORD AND POSITONAL OPERANDS:           *
.*                                                                    *
.* 1. NAME (POSITIONAL): THE SUBROUTINE MUST BE NAMED ARBITRARILY     *
.*    (ONE TO SIX CHARACTERS MAXIMUM) BY THE USER. FORTRAN OR COBOL   *
.*    RULES MUST BE FOLLOWED IN CHOOSING A NAME.                      *
.* 2. TYPE (POSITIONAL): THE TYPE OF VARIABLES TO BE SORTED MUST BE   *
.*    CONVEYED TO THE MACRO.  ADMISSIBLE VALUES ARE: P=PACKED;        *
.*    C=CHARACTER OR ALPHANUMERICS (= A-FORMAT VARIABLES); H=HALFWORD *
.*    INTEGERS (=INTEGER*2); F=FULLWORD (=INTEGER*4); E=SINGLE        *
.*    PRECISION FLOATING POINT (=REAL*4); D=DOUBLE PRECISION FLOATING *
.*    POINT (=REAL*8).                                                *
.* 3. LENGTH (KEYWORD): THE LENGTH IN BYTES OF THE FIELDS OF TYPES P  *
.*    AND C MUST BE SPECIFIED.  THE LENGTH MUST BE LESS THAN 256      *
.*    BYTES FOR C OR 16 BYTES FOR P.                                  *
.* 4. STRTKY (KEYWORD): THE COLUMN THE SORTING KEY BEGINS AT MAY BE   *
.*    CHANGED FROM ITS NULL VALUE OF COLUMN 1.                        *
.* 5. KYLGTH (KEYWORD): THE LENGTH OF THE DESIRED SORTING KEY.  IF    *
.*    KYLGTH IS OMITTED, LENGTH MINUS STRTKY IS THE DEFAULT OPTION.   *
.* 6. ORDER (KEYWORD): THE ORDER OF THE DESIRED SORT. OPTIONS ARE:    *
.*    A=ASCENDING ORDER; D=DESCENDING ORDER. IF ORDER IS NOT          *
.*    SPECIFIED, ASCENDING ORDER IS THE ASSUMED DEFAULT OPTION.       *
.* 7. EXTRA (KEYWORD): THE NUMBER OF ADDITIONAL ARRAYS (RANGE: 0 - 5) *
.*    EXTRA=0 IS THE DEFAULT OPTION.                                  *
.* 8. OVRTYP (KEYWORD): OVRTYP=(D,E,F, OR H) ALLOWS FIXED OR FLOATING *
.*    POINT COMPARES WITHIN LONGER FIELDS.  TYPE MUST EQUAL "C".      *
.* 9. DISP (KEYWORD): WHEN OVRTYP IS SPECIFIED, THIS SPECIFIES THE    *
.*    COLLUMN AT WHICH COMPARISON BEGINS.  DEFAULT IS COLLUMN 1.      *
.*10. INLINE (KEYWORD): INLINE=YES GENERATES IN LINE CODE WITHIN AN   *
.*    ASSEMBLER ROUTINE.  DEFAULT IS A CSECT CALLABLE BY FORTRAN.     *
.**********************************************************************
.*   THE FOLLOWING PARAMETER LIST IS REQUIRED IN THE FORTRAN CALL:    *
.*                                                                    *
.* 1. THE NAME OF THE ARRAY TO BE SORTED.                             *
.* 2. THE NUMBER OF ELEMENTS OF THE ARRAY TO BE SORTED.               *
.* 3. THE NAMES OF "EXTRA" ARRAYS, IF ANY.                            *
.**********************************************************************
.*  SEVERAL EXAMPLES WILL MAKE THE USE OF A MACRO SUBROUTINE CLEAR:   *
.*                                                                    *
.* PROBLEM 1: SORT THE CHARACTER ARRAY CALLED A OF 500 ELEMENTS OF 80 *
.* BYTES EACH ACCORDING TO AN 8 BYTE KEY STARTING IN COLUMN 20.       *
.* SOLUTION:  THE FOLLOWING CARDS ARE NEEDED:                         *
.* // JOB CARD                                                        *
.* // EXEC ASMGC                                                      *
.* //ASM.SYSIN DD *                                                   *
.* (QUICKERSORT MACRO DEFINITION SOURCE CODE IF NOT IN SYSTEM LIBRARY)*
.*          QKRSRT SORT1,C,LENGTH=80,STRTKY=20,KYLGTH=8               *
.*          END                                                       *
.* (COMMENT: THE NAME SORT1 WAS ARBITRARILY CHOSEN. ONLY THE QKRSRT   *
.* AND END CARD NEED APPEAR IF THE MACRO IS IN THE SYSTEM LIBRARY)    *
.* /*                                                                 *
.* // EXEC FORTGCLG                                                   *
.* //FORT.SYSIN DD *                                                  *
.* (FORTRAN DECK WHICH WILL CONTAIN THE FOLLOWING STATEMENT)          *
.*     .                                                              *
.*     .                                                              *
.*     .                                                              *
.*       CALL SORT1(A,500)                                            *
.*     .                                                              *
.*     .                                                              *
.*     .                                                              *
.* /*                                                                 *
.* //GO.SYSIN DD *                                                    *
.* (DATA, IF ANY)                                                     *
.* /*                                                                 *
.*                                                                    *
.* PROBLEM 2: SUPPOSE AN ARRAY OF DOUBLE PRECISION FLOATING POINT     *
.* NUMBERS IS TO BE SORTED.  SUPPOSE THE NAME DBLSRT IS CHOSEN FOR    *
.* THE SUBROUTINE.  THE MACRO PROTOTYPE CARD WOULD THEN READ:         *
.*          QKRSRT DBLSRT,D                                           *
.* HERE THE LENGTH IS IMPLIED TO BE 8 BYTES.  IN THE FORTRAN PROGRAM  *
.* THE STATEMENT "CALL DBLSRT(.....)" WOULD APPEAR.                   *
.*                                                                    *
.* PROBLEM 3: SUPPOSE AN ARRAY OF FIXED POINT NUMBERS IS TO BE SORTED.*
.* ALSO TO BE SORTED ELEMENT FOR ELEMENT WITH THE FIRST ARRAY ARE     *
.* THREE ADDITIONAL ARRAYS.  THE MACRO PROTOTYPE WOULD THEN READ:     *
.*          QKRSRT EXSRT,F,EXTRA=3                                    *
.* HERE THE LENGTH IS IMPLIED TO BE 4 BYTES.  IN THE FORTRAN PROGRAM  *
.* THE STATEMENT "CALL EXSRT(.., .., .., .., ..)" WOULD APPEAR.       *
.*                                                                    *
.* PROBLEM 4: SUPPOSE A REAL*4 ARRAY WITH DIMENSION ARR(3,100) IS TO  *
.* BE SORTED ON THE SECOND COLLUMN.  THE MACRO PROTOTYPE STATEMENT    *
.* WOULD THEN READ:                                                   *
.*          QKRSRT OVRSRT,C,LENGTH=12,OVRTYP=E,DISP=5                 *
.* HERE SORTING WOULD BE DONE ACCORDING TO THE SECOND COLLUMN.  IN THE*
.* FORTRAN PROGRAM THE STATEMENT "CALL OVRSRT(ARR,100)" WOULD APPEAR. *
.*                                                                    *
.* PROBLEM 5: SUPPOSE AN IN LINE SORT IS DESIRED IN AN ASSEMBLER      *
.* ROUTINE, WITH FIXED POINT COMPARES.  THE MACRO PROTOTYPE WOULD     *
.* THEN READ:                                                         *
.*          QKRSRT XYZ,F,INLINE=YES                                   *
.* HERE THE DUMMY NAME "XYZ" IS NOT GENERATED.  ENTERING THE SORT     *
.* ROUTINE, REGISTER 1 MUST CONTAIN THE ADDRESS OF A PARAMETER LIST   *
.* WITH THE ADDRESSES OF: THE ARRAY TO BE SORTED, THE ARRAY LENGTH    *
.* VARIABLE, AND EXTRA ARRAY ADDRESSES IF ANY.  THE CONTAINING CSECT  *
.* MUST USE R(15) FOR A BASE REGISTER.                                *
.*                                                                    *
.* EFFECTIVELY THE USER PROVIDES A ONE INSTRUCTION ASSEMBLY LANGUAGE  *
.* PROGRAM.  THE USER IS NOW ABLE TO SORT ANYTHING ANY WAY.           *
.**********************************************************************
         LCLA  &STRTKX,&LT2,&SLNGTX,&ZZ,&WW,&XX,&YY,&KYLGTX,&DISPL
         LCLC  &LENGTX,&TYPX,&BRNCH1,&BRNCH2,&QCHK,&REG,&Q
&KYLGTX  SETA  &KYLGTH             *               VARIABLE PARAMETERS
.*                                 ARE
&TYPX    SETC  '&TYPE'             *               CHANGED TO VARIABLE
.*                                 SYMBOLS
&LENGTX  SETC  '&LENGTH'           *             SO THEIR VALUES MAY
.*                                 BE RESET
&STRTKX  SETA  &STRTKY-1
&DISPL   SETA  0
         AIF   ('&OVRTYP' EQ 'NONE').REJ
&DISPL   SETA  &DISP-1
.REJ     AIF   (&EXTRA LE 5).L500
         MNOTE 16,'MORE THAN 5 EXTRA ARRAYS'
         MEXIT
.L500    ANOP
&QCHK    SETC  'G'                 *                   INDICATES TYPE
.*                                 IS NOT C OR P
&REG     SETC  '7'                 *                   WORK REG IF
.*                                 TYPE IS NOT C OR P
         AIF   ('&ORDER' EQ 'A').L31  * WHICH ORDER IS DESIRED FOR
.*                                 SORT?
&BRNCH1  SETC  'H'                 *                   DESCENDING ORDER
&BRNCH2  SETC  'L'
         AGO   .L32
.L31     ANOP  *                   ASCENDING ORDER
&BRNCH1  SETC  'L'
&BRNCH2  SETC  'H'
.L32     AIF   (1 LE K'&NAME AND K'&NAME LE 6).L2  * IS NAME OKAY?
         MNOTE 16,'IMPROPER LENGTH FOR SUBROUTINE NAME'  * INVALID NAME
         MEXIT *                   STOP EXPANSION
.L2      AIF   ('&TYPE' NE 'F' AND '&TYPE' NE 'E').L3  * TYPE F OR E?
&LENGTX  SETC  '4'                 *                   IF SO, SET
.*                                 LENGTH TO 4 BYTES
         AIF   ('&TYPE' NE 'F').L4
&TYPX    SETC  ' '                 *                   IF TYPE F, SET
.*                                 &TYPX TO BLANK
         AGO   .L4
.L3      AIF   ('&TYPE' NE 'H').L5  *   TYPE H (HALFWORD)?
&LENGTX  SETC  '2'                 *                   IF SO, SET
.*                                 LENGTH TO 2 BYTES
         AGO   .L4
.L5      AIF   ('&TYPE' NE 'D').L6  *   TYPE D (DOUBLEWORD)?
&LENGTX  SETC  '8'                 *                   IF SO, SET
.*                                 LENGTH TO 8 BYTES
         AGO   .L4
.L6      AIF   ('&TYPE' EQ 'C' OR '&TYPE' EQ 'P').L7  * TYPE C OR P?
         MNOTE 16,'INVALID TYPE'   *     IF ABOVE TYPES NOT SPECIFIED
         MEXIT *                   STOP EXPANSION
.L7      ANOP
&QCHK    SETC  'B'                 *                   INDICATES TYPE
.*                                 IS C OR P
&REG     SETC  '6'                 *                   WORK REG IF
.*                                 TYPE IS C OR P
         AIF   ('&LENGTH' NE '0').L1  * LENGTH BLANK FOR TYPE C OR P?
         MNOTE 16,'LENGTH WAS NOT SPECIFIED FOR TYPE P OR C'
         MEXIT *                   IF SO, STOP EXPANSION
.L1      AIF   ('&OVRTYP' EQ 'NONE').M2
&Q       SETC  'B'
         AIF   ('&OVRTYP' NE 'F' AND '&OVRTYP' NE 'E').M5
&YY      SETA  4
         AGO   .M8
.M5      AIF   ('&OVRTYP' NE 'H').M6
&YY      SETA  2
         AGO   .M8
.M6      AIF   ('&OVRTYP' NE 'D').M1
&YY      SETA  8
.M8      ANOP
&Q       SETC  'G'
         AIF   (&DISP+&YY-1 LE &LENGTX).L4
         MNOTE 16,'DISP PLUS OVRTYP LENGTH GREATER THAN LENGTH'
         MEXIT
.M1      MNOTE 16,'INVALID OVRTYP'
         MEXIT
.M2      AIF   (&STRTKX LE &LENGTH).M3
         MNOTE 16,'STRTKY GREATER THAN LENGTH'
         MEXIT
.M3      AIF   (&KYLGTX GT 0).M4
&KYLGTX  SETA  &LENGTH-&STRTKX
.M4      AIF   (&KYLGTX+&STRTKX LE &LENGTX).L4
         MNOTE 16,'KYLGTH PLUS STRTKY GREATER THAN LENGTH'
         MEXIT
.L4      ANOP
&LT2     SETA  &LENGTX*2           *             LENGTH * 2
&SLNGTX  SETA  &LENGTX/2-&LENGTX/8  *   SHIFT POSITIONS = LOG2(LENGTH)
         AIF   ('&QCHK' EQ 'G').L555
         AIF   ('&TYPE' EQ 'C').L551
         AIF   (&LENGTX LE 16).L555
         MNOTE 16,'LENGTH GREATER THAN 16 BYTES FOR DECIMAL'
         MEXIT
.L551    AIF   (&LENGTX LE 256).L555
         MNOTE 16,'LENGTH GREATER THAN 256 BYTES FOR CHARACTER'
         MEXIT
.L555    ANOP
*                                      BEGIN QUICKERSORTING
         AIF   ('&INLINE' EQ 'NO').L543
         STM   14,12,S&SYSNDX
         AGO   .L531
.L543    ANOP
&NAME    CSECT
         STM   14,12,12(13)        *          SAVE REGISTERS
         USING &NAME,15            *              SET UP BASE REGISTER
.L531    ST    13,R13&SYSNDX       *            STORE POINTER TO
*                                  SAVEAREA
*                                      (AD(W) MEANS THE ADDRESS OF W)
*                                      THE CONTENTS OF THE REGISTERS
*                                      FOR QUICKERSORT ARE AS FOLLOWS:
*                                       1 - LENGTH
*                                       2 - TMP (TEMP. COMPARE STORAGE)
*                                       4 - T (TEMPORARY COMPARE ITEM)
*                                       5 - M (INDEX FOR LT AND UT)
*                                       8 - Q LOOP DECREMENT = LENGTH
*                                       9 - Q LOOP COMPARAND = AD(A(K))
*                                      10 - K LOOP INCREMENT = LENGTH
*                                      11 - K LOOP COMPARAND = AD(A(Q))
*                                      12 - AD(A(I))
*                                      13 - AD(A(J))
*                                      14 - =F'4' (CONSTANT)
*                                      15 - BASE REGISTER
*                                      0,3,6,7 - WORK REGISTERS
&XX      SETA  3+&EXTRA
         LM    2,&XX,0(1)
         L     3,0(3)
         AIF   (&EXTRA EQ 0).L88
         LR    9,2
         AIF   (&EXTRA GT 1).L94
         LR    10,4
         AGO   .L95
.L94     ANOP
&YY      SETA  9+&EXTRA
         LM    10,&YY,8(1)
.L95     ANOP
&ZZ      SETA  9
&WW      SETA  4
&YY      SETA  &EXTRA
.L90     SR    &ZZ,&WW
&YY      SETA  &YY-1
&ZZ      SETA  &ZZ+1
&WW      SETA  &WW+1
         AIF   (&YY GT 0).L90
         SR    &ZZ,2
         STM   9,&ZZ,DA&SYSNDX
.L88     LA    1,&LENGTX
         SR    2,1
         SR    5,5                 *                   M:=1;
         LA    14,4
         LR    10,1
         LCR   8,1
         LR    13,3
         MR    12,1
         LR    12,1                *                  I:=1;
         AR    12,2
         AR    13,2
         AIF   ('&QCHK' EQ 'G').L1000
         LA    2,TMP&SYSNDX
.L1000   ANOP
N&SYSNDX LR    &REG,13             *               N: IF J-I > 1 THEN
         SR    &REG,12
         SR    &REG,1
         BNP   L3E&SYSNDX
*                                      BEGIN COMMENT;
         AR    &REG,1              *                   P:=I+(J-I)/2;
         AIF   ('&QCHK' EQ 'G').L41
         SRDA  6,33
         DR    6,1
         MR    6,1
         AGO   .L42
.L41     SRA   7,&SLNGTX+1
         SLA   7,&SLNGTX
.L42     AR    7,12
         AIF   ('&QCHK' EQ 'G').L43
         MVC   0(&LENGTX,2),0(7)   *          T := A(P);
         MVC   0(&LENGTX,7),0(12)  *          A(P) := A(I);
         AIF   (&EXTRA EQ 0).L4444
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L1002   S     7,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L44
         MVC   &ZZ.(&LENGTX,2),0(7)
         MVC   0(&LENGTX,7),0(12)
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L1002
.L43     L&TYPX  4,0(7)            *                T:=A(P);
         L&TYPX  6,0(12)
         ST&TYPX 6,0(7)            *                A(P):=A(I);
         AIF   (&EXTRA EQ 0).L44
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L1001   S     7,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L44
         L&TYPX  0,0(7)
         L&TYPX  6,0(12)
         ST&TYPX 6,0(7)
         ST&TYPX 0,TMP&SYSNDX+&ZZ
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L1001
.L4444   AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').L44
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NOREJ
&TYPX    SETC  ' '
.NOREJ   L&TYPX  4,&DISPL.(2)
.L44     LR    11,13               *                  Q := J;
         LR    9,12
         AR    9,1
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NN
&QCHK    SETC  '&Q'
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NN
&TYPX    SETC  ' '
.NN      AIF   ('&QCHK' EQ 'B').L11
LP1&SYSNDX C&TYPX    4,&DISPL.(9) *          FOR K:=I+1STEP1 UNTIL Q DO
*                                      BEGIN COMMENT;
         BN&BRNCH1   ND1&SYSNDX *               IF A(K) > T THEN
*                                      BEGIN COMMENT;
LP2&SYSNDX C&TYPX  4,&DISPL.(11) *         FOR Q:=Q STEP-1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
         AGO   .L12
.L11     AIF   ('&TYPX' NE 'P').L13
*                                      FOR K := I+1 STEP 1 UNTIL Q DO
*                                      BEGIN COMMENT;
*                                     IF A(K) > T THEN
LP1&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,9)
         BN&BRNCH1   ND1&SYSNDX
*                                      BEGIN COMMENT;
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
LP2&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,11)
         AGO   .L12
.L13     ANOP
*                                      FOR K := I+1 STEP 1 UNTIL Q DO
*                                      BEGIN COMMENT;
*                                     IF A(K) > T THEN
LP1&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(9)
         BN&BRNCH1   ND1&SYSNDX
*                                      BEGIN COMMENT;
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO
*                                      BEGIN COMMENT;
LP2&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(11)
.L12     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K1
&QCHK    SETC  'B'
&TYPX    SETC  'C'
.K1      BN&BRNCH2   ND2&SYSNDX *               IF A(Q) < T THEN
*                                      BEGIN COMMENT;
&YY      SETA  0-4
&XX      SETA  0
.L99     AIF   ('&QCHK' EQ 'G').L46
         XC    0(&LENGTX,11),0(9)  *          X := A(K);
         XC    0(&LENGTX,9),0(11)  *          A(K) := A(Q);
         XC    0(&LENGTX,11),0(9)  *          A(Q) := X;
         AGO   .L147
.L46     L&TYPX  6,0(11)
         L&TYPX  0,0(9)            *                X:=A(K);
         ST&TYPX 6,0(9)            *                A(K):=A(Q);
         ST&TYPX 0,0(11)           *               A(Q):=X;
.L147    AIF   (&EXTRA EQ 0).L47
&XX      SETA  &XX+1
&YY      SETA  &YY+4
         S     9,DA&SYSNDX+&YY
         S     11,DA&SYSNDX+&YY
         AIF   (&XX LE &EXTRA).L99
.L47     SR    11,1                *                  Q := Q - 1;
*                                      COMMENT;
         B     ND1&SYSNDX          *               GO TO L (ND1);
*                                      END
ND2&SYSNDX BXH   11,8,LP2&SYSNDX *          END FOR Q;
         LR    11,9                *                  Q := K - 1;
         SR    11,1
         B     M&SYSNDX            *                 GO TO M;
*                                      END
ND1&SYSNDX BXLE  9,10,LP1&SYSNDX *       L: END FOR K;
*                                      COMMENT;
         AIF   ('&QCHK' EQ 'G').L48
M&SYSNDX MVC   0(&LENGTX,12),0(11)  *      M: A(I) := A(Q);
         MVC   0(&LENGTX,11),TMP&SYSNDX  *       A(Q) := T;
         AIF   (&EXTRA EQ 0).L49
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L876    S     11,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L49
&YY      SETA  &YY+4
         MVC   0(&LENGTX,11),&ZZ.(2)
&XX      SETA  &XX+1
         MVC   0(&LENGTX,12),0(11)
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L876
.L48     ANOP
M&SYSNDX L&TYPX  6,0(11)           *            M: A(I):=A(Q);
         ST&TYPX 6,0(12)
         ST&TYPX 4,0(11)           *               A(Q):=T;
         AIF   (&EXTRA EQ 0).L49
&XX      SETA  0
&YY      SETA  0
&ZZ      SETA  &LENGTX
.L765    S     11,DA&SYSNDX+&YY
         S     12,DA&SYSNDX+&YY
         AIF   (&XX EQ &EXTRA).L49
         L&TYPX  0,0(11)
         ST&TYPX 0,0(12)
         L&TYPX  4,TMP&SYSNDX+&ZZ
         ST&TYPX 4,0(11)
&XX      SETA  &XX+1
&YY      SETA  &YY+4
&ZZ      SETA  &ZZ+&LENGTX
         AGO   .L765
.L49     ANOP
*                                      COMMENT;
         LR    6,11                *                  IF 2 *Q > I+J
*                                  THEN
         SR    11,1
         SLA   6,1
         SR    6,12
         SR    6,13
         BNP   LWR&SYSNDX          *               BEGIN
         ST    12,LT&SYSNDX.(5)    *           LT(M) := I;
         ST    11,UT&SYSNDX.(5)    *          UT(M) := Q - 1;
         LA    11,&LT2.(11)
         LR    12,11               *                 I:=Q+1;
         B     UM&SYSNDX           *                END
*                                      ELSE
*                                      BEGIN
LWR&SYSNDX ST    13,UT&SYSNDX.(5) *           UT(M) := J;
         LR    13,11               *                 J:=Q-1;
         LA    11,&LT2.(11)
         ST    11,LT&SYSNDX.(5)    *          LT(M) := Q + 1;
*                                      COMMENT;
UM&SYSNDX LA    5,4(5) *                M := M + 1;
         B     N&SYSNDX            *                 GO TO N
*                                      END
L3E&SYSNDX CR    12,13 *                   ELSE IF I >= J THEN
*                                      BEGIN COMMENT;
         BNL   P&SYSNDX            *                 GO TO P
*                                      END
*                                      ELSE
*                                      BEGIN COMMENT;
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NP
&QCHK    SETC  '&Q'
&TYPX    SETC  '&OVRTYP'
         AIF   ('&TYPX' NE 'F').NP
&TYPX    SETC  ' '
.NP      AIF   ('&QCHK' EQ 'B').L21
         L&TYPX  0,&DISPL.(12)
         C&TYPX  0,&DISPL.(13)     *               IF A(I) > A(J) THEN
         AGO   .L22
.L21     AIF   ('&TYPX' NE 'P').L23
         CP    &STRTKX.(&KYLGTX,12),&STRTKX.(&KYLGTX,13)
*                                     IF A(I) > A(J) THEN
         AGO   .L22
.L23     CLC   &STRTKX.(&KYLGTX,12),&STRTKX.(13)
*                                     IF A(I) > A(J) THEN
.L22     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K2
&QCHK    SETC  'B'
&TYPX    SETC  'C'
.K2      BN&BRNCH2   P&SYSNDX
*                                      BEGIN
&YY      SETA  0-4
&XX      SETA  0
         AIF   ('&QCHK' EQ 'G').L410
.L999    AIF   ('&QCHK' EQ 'G').L987
         XC    0(&LENGTX,12),0(13)  *           X := A(I);
         XC    0(&LENGTX,13),0(12)  *           A(I) := A(J);
         XC    0(&LENGTX,12),0(13)  *           A(J) := X;
         AGO   .L41129
.L987    L&TYPX  0,0(12)
.L410    L&TYPX  6,0(13)           *               X:=A(I);
         ST&TYPX 0,0(13)           *               A(I):=A(J);
         ST&TYPX 6,0(12)           *               A(J):=X;
.L41129  AIF   (&EXTRA EQ 0).L411
&XX      SETA  &XX+1
&YY      SETA  &YY+4
         S     12,DA&SYSNDX+&YY
         S     13,DA&SYSNDX+&YY
         AIF   (&XX LE &EXTRA).L999
.L411    ANOP
*                                      END;
*                                      COMMENT;
P&SYSNDX SR    5,14                *               P: M := M - 1;
         BM    QT&SYSNDX           *                IF M > 0 THEN
*                                      BEGIN
         L     12,LT&SYSNDX.(5)    *           I := LT(M);
         L     13,UT&SYSNDX.(5)    *           J := UT(M);
         B     N&SYSNDX            *                 GO TO N
*                                      END;
*                                      END
QT&SYSNDX L     13,R13&SYSNDX *            END QUICKERSORT
         AIF   ('&INLINE' EQ 'NO').F100
         LM    14,12,S&SYSNDX
         B     YY&SYSNDX
S&SYSNDX DS    15F
         AGO   .F250
.F100    LM    14,12,12(13)        *          RESTORE REGISTERS
         BR    14                  *                    RETURN TO
*                                  CALLING PROGRAM
.F250    ANOP
UT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR UT ARRAY
LT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR LT ARRAY
         AIF   (&EXTRA GT 0).LK
         AIF   ('&QCHK' EQ 'G').LL
TMP&SYSNDX DS    CL&LENGTH *                  TEMP STORAGE FOR COMPARES
         AGO   .LL
.LK      ANOP
&YY      SETA  &EXTRA+1
TMP&SYSNDX DS  &YY.CL&LENGTX *                 TEMP STORAGE FOR COMPARE
.LL      ANOP
R13&SYSNDX DS    F *                     SAVE AREA FOR REGISTER 13
         AIF   (&EXTRA EQ 0).LM
&YY      SETA  &EXTRA+1
DA&SYSNDX DS   &YY.F *                    SAVE AREA FOR ADDRESS CHANGES
.LM      AIF   ('&INLINE' EQ 'NO').LMN
YY&SYSNDX NOPR 12
.LMN     MEND
         EJECT
         PRINT ON,NOGEN
MLPALIST CSECT
         REGISTER
         B     12(,R15)
         DC    CL8'BLOCKS'
         STM   R14,R12,12(R13)
         LR    R12,R15             USE REG 12 AS BASE
         USING MLPALIST,R12
         GETMAIN RU,LV=LENGTH
         ST    R13,4(,R1)          CHAIN SAVEAREAS
         ST    R1,8(,R13)          TOGETHER
         LR    R13,R1
         USING SAVEAREA,R13
         SPACE 3
         MVC   RENTDCB(DCBLEN),SYSPRINT  MOVE DCB TO DSECT
         MVC   OPENL(OPENLEN),OPEN  MOVE OPEN STMTS TO DSECT
         LA    R1,OPENL            LETS OPEN THE PRINTER
         OPEN  RENTDCB,MF=(E,(1))  WELL OPEN SAYS ME
         MVI   PRINT,C' '          CLEAR OUT THE PRINT LINE
         MVC   PRINT+1(L'PRINT-1),PRINT
         SLR   R1,R1               CLEAR REG 1
         ST    R1,ENTRIES          INIT VALUE
         LA    R1,TABLE            GET THE ARRAY START ADDR
         ST    R1,PARM             SAVE IT IN PARM FIELD
         ST    R1,CURRENT          SAVE FOR USE AS COUNTER
         LA    R1,ENTRIES          GET THE # OF ENTRIES POINTER
         ST    R1,PARM+4           SAVE THE SECOND PARM FIELD
         SPACE 3
         L     R3,CVTPTR           GET THE CVT POINTER
         USING CVT,R3              GET ADDRESSABILITY TO CVT
         L     R2,CVTQLPAQ         GET CDE CHAIN POINTER FROM CVT
         USING CDENTRY,R2          SET UP ADDRESSABILITY TO CDE
         SPACE 3
CDELOOP  EQU   *
         TM    CDATTR,CDNIP        WAS THIS CDE LOADED BY MLPA
         BO    MLPALOAD            YES IT WAS
NEXTCDE  EQU   *
         L     R2,CDCHAIN          GET THE NEXT LPA CDE ENTRY
         LA    R2,0(,R2)           CLEAR BYTE JUST IN CASE
         LTR   R2,R2               CHECK FOR END OF CHAIN
         BNZ   CDELOOP             NOPE GO GET ANOTHER CDE
         SPACE 3
         L     R1,CURRENT          GET THE CURRENT POINTER
         MVC   0(L'PRINT,R1),PRINT  CLEAR OUT END OF TABLE
         LA    R1,PARM             SET UP FOR SORT
         L     R15,=V(ALPHA)       LETS SORT IT ALPHA
         BALR  R14,R15             GO DO IT
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'ALPHAHED),ALPHAHED  MOVE IN HEADING
         BAL   R10,PRINTIT         PRINT HEADING
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
         L     R2,ENTRIES          HOW MANY ENTRIES DO WE HAVE
         LA    R2,1(,R2)           BUMP FOR DIVIDE
         SRL   R2,1                DIVIDE BY 2
         LR    R4,R2               SAVE FOR LATER
         LA    R3,TABLE            GET START OF TABLE
         LA    R6,56               MAX LINES PER PAGE
PRTA     EQU   *
         MVC   PRINT+1(L'CURENTRY),0(R3)  GET THE CURRENT ENTRY
         MVC   PRINT+60(L'CURENTRY),52(R3)  GET NEXT ENTRY         @TEC
         BAL   R10,PRINTIT         NOW PRINTIT
         BCTR  R6,R0               SUBTRACE 1 FROM LINE COUNT
         LTR   R6,R6               CHECK FOR FULL PAGE
         BNZ   NOHEADA
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'ALPHAHED),ALPHAHED  PRINT HEADING LINE
         BAL   R10,PRINTIT
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
NOHEADA  EQU   *
         LA    R3,104(0,R3)        GET NEXT CDE POINTER            @TEC
         BCT   R2,PRTA             GET NEXT ONE
         LA    R1,PARM             SET UP FOR SORT
         L     R15,=V(NUMER)       LETS SORT IT NUMERIC
         BALR  R14,R15             DO IT
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'NUMHED),NUMHED  FIX UP HEADING
         BAL   R10,PRINTIT
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
         LA    R3,TABLE            START OF TABLE
         LA    R6,56               MAX LINES PER PAGE
PRTN     EQU   *
         MVC   PRINT+1(L'CURENTRY),0(R3)  GET START OF CDE TAB
         MVC   PRINT+60(L'CURENTRY),52(R3)  GET NEXT ENTRY         @TEC
         BAL   R10,PRINTIT         GO PRINT TABLE
         BCTR  R6,R0
         LA    R3,104(0,R3)        GET NEXT ENTRY                  @TEC
         LTR   R6,R6
         BNZ   NOHEADN
         MVI   PRINT,C'1'
         MVC   PRINT+1(L'NUMHED),NUMHED
         MVI   PRINT,C'0'
         MVC   PRINT+1(L'HEADER2),HEADER2
         BAL   R10,PRINTIT
NOHEADN  EQU   *
         BCT   R4,PRTN             ARE WE DONE YET?
         LA    R1,CLOSEL
         CLOSE RENTDCB,MF=(E,(1))
         LR    R2,R13              SAVE ADDRESS FOR FREEMAIN
         L     R13,4(,R13)         GET CALLERS SAVE AREA POINTER
         FREEMAIN  RU,A=(R2),LV=LENGTH  FREE UP SAVEAREA
         LM    R14,R12,12(R13)     RELOAD CALLERS REGISTERS
         SLR   R15,R15             SET RETURN CODE OF ZERO
         BR    R14                 RETURN TO CALLER
         SPACE 3
MLPALOAD EQU   *
         TM    CDATTR,CDNIC        IS MODULE INPROCESS OF LOAD ?
         BO    NEXTCDE             YES GO GET ANOTHER ONE
         TM    CDATTR2,CDREL       IS MODULE INACTIVE ?
         BO    NEXTCDE             YES GO GET ANOTHER
         MVI   CURENTRY,C' '       CLEAR TO BLANKS
         MVC   CURENTRY+1(L'CURENTRY-1),CURENTRY
         MVC   BNAME(L'CDNAME),CDNAME  THE CDE NAME
         LA    R1,CDENTPT          GET THE MODULE ENTRY POINT
         LA    R10,BEPA            THIS IS HIS ENTRY POINT
         BAL   R14,UNPACK          MAKE IT READABLE
         TM    CDATTR,CDMIN        IS IT A MINOR CDE ?
         BO    MINORCDE            YES GO FIX HIM UP
         ST    R2,R2SAVE           SAVE FOR LATER
XLIST    EQU   *
         L     R4,CDXLMJP          GET THE EXTENT LIST ADDR
         USING XTLST,R4            SET UP ADDR TO IT
         LA    R1,XTLMSBLA         GET LENGTH
         N     R1,=X'7FFFFFFF'                                     @TEC
         LA    R10,BLENGTH
         BAL   R14,UNPACK          MAKE IT READABLE
         LA    R1,XTLMSBAA         GET MAIN STORAGE ADDRESS
         LA    R10,BLOCAT          WHERE IS HE IN STORAGE
         BAL   R14,UNPACK          MAKE IT READABLE
         L     R1,ENTRIES          HOW MANY ENTRIES DO WE HAVE?
         LA    R1,1(,R1)           BUMP THE COUNTER
         ST    R1,ENTRIES          SAVE THE NEW NUMBER
         L     R1,CURRENT          SAVE CURRENT POINTER
         MVC   0(L'CURENTRY,R1),CURENTRY  SAVE THE CONTENTS
         LA    R1,52(,R1)          BUMP BY THE LENGTH              @TEC
         ST    R1,CURRENT          SAVE THIS ENTRY
         L     R2,R2SAVE           RELOAD REG 2
         B     NEXTCDE             GO GET ANOTHER NAME
         SPACE 3
OPEN     OPEN  (SYSPRINT,(OUTPUT)),MF=L
CLOSE    CLOSE (SYSPRINT),MF=L
OPENLEN  EQU   *-OPEN
         SPACE 3
MINORCDE EQU   *
         ST    R2,R2SAVE           WE NEED HIM LATER FOR CHAIN
         L     R2,CDXLMJP          GO GET HIS MAJOR CDE
         MVC   BMAJOR(L'CDNAME),CDNAME  GET THE MAJOR NAME
         B     XLIST
         SPACE 3
UNPACK   EQU   *
         UNPK  ANSWER,0(5,R1)      PUT DATA INTO AN AREA TO WORK ON
         TR    ANSWER(8),TRANTAB   TURN IT INTO READABLE DATA
         MVC   0(8,R10),ANSWER     MOVE TO PRINT AREA
         BR    R14                 RETURN TO CALLER
         SPACE 3
PRINTIT  EQU   *
         PUT   RENTDCB,PRINT
         MVI   PRINT,C' '          CLEAR THE PRINT LINE
         MVC   PRINT+1(L'PRINT-1),PRINT
         BR    R10
         PRINT NOGEN
         SPACE 3
SYSPRINT DCB   DDNAME=SYSPRINT,BLKSIZE=121,RECFM=FA,LRECL=121,  ****** *
               DSORG=PS,MACRF=(PM)
DCBLEN   EQU   *-SYSPRINT
TRANTAB  EQU   *-240
         DC    C'0123456789ABCDEF'
         LTORG
ALPHAHED DC    C'FIXED AND MODIFIED LINK PACK MAP - ALPHABETICALLY BY N*
               AME'
HEADER2  DC   C' NAME       LOCAT    LNGTH    ENTRY      MAJOR LPDE    *
               NAME       LOCAT    LNGTH    ENTRY       MAJOR LPDE     *
               '
NUMHED   DC   C'FIXED AND MODIFIED LINK PACK MAP - NUMERICALLY BY LOCAT*
               ION'
         SPACE 3
SAVEAREA DSECT
         DS    18F
R2SAVE   DS    F
ENTRIES  DS    F
PARM     DS    2F
CURRENT  DS    F
RENTDCB  DCB   DDNAME=SYSPRINT,BLKSIZE=121,RECFM=FA,LRECL=121,  **     *
               DSORG=PS,MACRF=(PM)
PRINT    DS    CL121
CURENTRY DS    0CL52
         DS    C
BNAME    DS    CL8
         DS    C
BLOCAT   DS    CL8
         DS    CL3
BLENGTH  DS    CL8
         DS    C
BEPA     DS    CL8
         DS    CL3
BMAJOR   DS    CL8
         DS    CL3                 FILL OUT TO 52 BYTES            @TEC
ANSWER   DS    CL9
OPENL    OPEN  SYSPRINT,MF=L
CLOSEL   CLOSE SYSPRINT,MF=L
TABLE    DS    12000F
         DS    0D
LENGTH   EQU   *-SAVEAREA
         DROP  R13
         SPACE 3
         IHAPSA
         CVT   DSECT=YES
         IHACDE
         IHAXTLST
*  CREATE CSECT TO SORT LIST INTO ALPHAMERIC ORDER  ON MODULE NAME
         QKSRT1  ALPHA,C,LENGTH=52,STRTKY=2,KYLGTH=8               @TEC
*  CREATE CSECT TO SORT LIST INTO NUMERICAL ORDER ON ADDRESS
         QKSRT1  NUMER,C,LENGTH=52,STRTKY=12,KYLGTH=8              @TEC
         END
./       ADD   NAME=MTTESA
         PRINT NOGEN                                               @TEC
*******************************************************************
*                                                                 *
*                        D I S C L A I M E R                      *
*                                                                 *
*******************************************************************
*                                                                 *
* THIS MATERIAL HAS BEEN USED SUCCESSFULLY & TO THE BEST OF OUR   *
* KNOWLEDGE  THEY  ARE  OPERATIONAL, HOWEVER  NO  WARRANTY        *
* IS MADE TO THE ACCURACY OF THE PROGRAMS OR RELATED MATERIAL AND *
* NO RESPONSIBILITY IS ASSUMED  FOR ANY MODIFICATION  DIRECTLY OR *
* INDIRECTLY  CAUSED BY  THEIR USE.  IT IS THE USERS              *
* RESPONSIBILITY  TO  EVALUATE THE  USEFULLNESS  OF THE  MATERIAL *
* SUPPLIED .                                                      *
*                                                                 *
* WE DO NOT GUARANTEE TO  KEEP ANY  MATERIAL PROVIDED  UP TO DATE *
* NOR DO WE GUARANTEE TO  PROVIDE ANY  CORRECTIONS OR  EXTENSIONS *
* DESCRIBED BY THE USER OR  CORRECTIONS OR EXTENSIONS MADE IN THE *
* FUTURE .                                                        *
*                                                                 *
*******************************************************************
***********************************************************************
*   TITLE: ZTPR0205                                                   *
*   AUTHOR: MURPHY                                                    *
*   DATE-WRITTEN: 10/16/84                                            *
*                 11/08/88  -  CORRECT JOB#/TIME, ADD HL - PMM        *
*                 04/06/90  -  UPDATED FOR APF FROM PARMLIB - PMM     *
*   REFERENCE: OS/VS2 MVS SYSTEM PROGRAMMING LIBRARY:SUPERVISOR       *
*              GC28-1046-1                                            *
*   REMARKS:                                                          *
*                                                                     *
*        USE CROSS MEMORY SERVICES TO PAGE THROUGH CONSOLE MESSAGES   *
*   IN THE MASTER TRACE TABLE IN THE MASTER ADDRESS SPACE.            *
*                                                                     *
***********************************************************************
*-------------------------------------------------------------*    @TEC
* UPDATES BY JIM LANE AT TORONTO HYDRO:                       *    @TEC
* - FIX SOME HARDCODED OFFSETS TO CLEANUP DISPLAY FORMAT.     *    @TEC
* - CHANGE LOGIC TO TRUNCATE LONG MESSAGE TEXT RATHER THAN    *    @TEC
*   HAVE IT WRAP AND OVERLAY PART OF ANOTHER MESSAGE.         *    @TEC
*                                                             *    @TEC
* REGISTER USAGE:                                             *    @TEC
*   2  - SUBROUTINE LINKAGE.                                  *    @TEC
*   5  - CURRENT OFFSET WITHIN SCREEN BUFFER.                 *    @TEC
*   6  - CURRENT ENTRY WITHIN COPY OF MTT.                    *    @TEC
*   7  - LENGTH OF WTO TEXT TO BE MOVED.                      *    @TEC
*   8  - POINTER TO "NEXT" ENTRY WITH COPY OF MTT.            *    @TEC
*  12  - PROGRAM BASE                                         *    @TEC
*  13  - WORKING STORAGE BASE.                                *    @TEC
*                                                             *    @TEC
* MAGIC NUMBERS USED IN THIS PROGRAM. THERE ARE A FEW NUMBERS *    @TEC
* HARDCODED INTO THIS PROGRAM, THE MEANING OF WHICH MAY NOT   *    @TEC
* BE OBVIOUS (IT WASN'T TO ME):                               *    @TEC
*                                                             *    @TEC
*  56 - THERE ARE 56 BYTES OF PREFIX INFO IN EACH MTT ENTRY   *    @TEC
*       BETWEEN THE LENGTH FIELD AND THE WTO MESSAGE TEXT.    *    @TEC
*  66 - THIS IS THE OFFSET OF THE 1ST BYTE OF MESSAGE TEXT    *    @TEC
*       FROM THE START OF AN MTT ENTRY.                       *    @TEC
*-------------------------------------------------------------*    @TEC
ZTPR0205 CSECT
         BEGIN PROGRAM=ZTPR0205
*        SAVES REGISTERS AND INSERTS PROGRAM, DATE, AND TIME
         LR    R12,R15             LOAD ADDRESS OF ENTRY POINT
         LR    R2,R1               SAVE CPPL
         USING ZTPR0205,R12        R12 BASE REGISTER
         GETMAIN RC,LV=WORKL       GETMAIN  FOR SAVEAREA/WORK
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   GETMERR
         LR    R3,R1               ADDRESS OF WORK AREA/SAVEAREA
         USING SAVDSECT,R3         ADDRESSABILITY
         ST    R13,SAVEAREA+4      STORE CALLER SAVEAREA ADDRESS (HSA)
         ST    R3,8(,R13)          ADD OF PROGRAM SAVE IN CALLER(LSA)
         LR    R13,R3              ADDRESS OF SAVEAREA IN R13
         DROP  R3
         USING SAVDSECT,R13
         USING CPPL,R2
         L     R6,CPPLPSCB
         DROP  R2
         USING PSCB,R6
         MVC   USERID,PSCBUSER
         MVC   USERIDL,PSCBUSRL
         MVC   USERATTR,PSCBATR1   SAVE OPER AUTH INFO
         MVI   USERFLAG,X'00'
         MVI   CMDFLAG,X'00'
         DROP  R6
         ST    R2,CPPLSAVE
         MVC   SCRTPUTL,=AL4(DSCREENL+41*80)  LENGTH FOR TPUT 43 LINE
         MVC   SCRLENG,=AL4(41*80)  LENGTH FOR MOVE LONG 43 LINE
         MVC   SCREEN(108),DSCREEN  SCREEN IMAGE
         GTSIZE
         LTR   R0,R0
         BZ    FREERET2            NON-DISPLAY TERMINAL
         CH    R1,=H'80'           80 WIDE?
         BNE   SETM2               NO - SET IT TO THIS
         CH    R0,=H'43'           MOD 4?
         BE    VERIFY
         CH    R0,=H'32'           MOD 3?
         BNE   SETM2
MODEL3   MVC   SCRLENG,=AL4(28*80)  30 LINE DISPLAY
         MVC   SCRTPUTL,=AL4(28*80+DSCREENL)
         MVC   DSCRO3,=X'E6F0'     (32,1)
         MVC   DSCRO4,=X'E7F7'     (32,72)
         B     VERIFY
SETM2    STSIZE  SIZE=80,LINE=24
         MVC   SCRLENG,=AL4(22*80)  LENGTH FOR MOVE LONG
         MVC   SCRTPUTL,=AL4(22*80+DSCREENL)  LENGTH OF TPUT
         MVC   DSCRO3,=X'5CF0'     24,1
         MVC   DSCRO4,=X'5DF7'     24,72
VERIFY   EQU   *
         STFSMODE  ON,INITIAL=YES
         LA    R7,TABLEND
         LA    R6,4
         LA    R1,TABLE
TBLOOP   CLC   0(4,R1),USERID
         BE    USEROK
         BXLE  R1,R6,TBLOOP
         TM    USERATTR,X'80'      OPER AUTHORITY?
         BZ    NOAUTH
         MVI   CMDFLAG,X'FF'
         B     VEROK1
USEROK   MVI   USERFLAG,X'FF'
         B     VEROK1
FREEAX   MVI   FREEFLAG,X'FF'
         B     VEROK1
VEROK1   STAX  DEFER=YES           WE DO NOT WANT AN INTERRUPT WHILE
         TESTAUTH  FCTN=1
         LTR   R15,R15
         BZ    GOTAUTH
         L     R1,AUTH
         LA    R0,1
         SVC   232
GOTAUTH  MODESET MF=(E,SUPRMOD)
         CLI   FREEFLAG,X'FF'
         BNE   AXIT
         AXFRE AXLIST=AXLIST       FREE AN AUTH INDEX IN A.T.
         B     SCRENDEF
NOTAUTH  TPUT  MSGNO2,6
         B     FREERET2
AXIT     AXRES AXLIST=AXLIST       RESERVE AN AUTH INDEX IN A.T.
         LA    R1,1                MASTER IS ASID 1
         AXEXT ASID=(1)            DETERMINE AUTH TABLE VALUE OF ASID 1
         AXSET AX=(0)              SET TO ASID 1'S AUTHORIZATION INDEX
SCRENDEF CLI   FREEFLAG,X'FF'
         BE    FREERET
         MVC   COMMAND,COMMANDL
         MVI   HEX40S,X'40'        SPACE
         MVC   HEX40S+1(79),HEX40S  PROPAGATE SPACES TO INITIALIZE
         L     R2,SCRLENG          SCREEN LENGTH
         S     R2,=F'0160'         MINUS 2 LINES
         LA    R5,DETAIL           ADDRESS OF SCREEN
         ST    R5,FRSTLINE
         LA    R2,0(R5,R2)         ADDRESS IN GETMAIN AREA
         ST    R2,LASTLINE         SAVE THE ADDRESS
         LA    R1,16
         L     R1,0(R1)
         USING CVT,R1
         L     R1,CVTMSER
         DROP  R1
         USING BASE,R1
         L     R3,BAMTTBL          ADDRESS OF MASTER TRACE TABLE
         SR    R4,R4
         ICM   R4,B'0111',BAMTLEN  LENGTH OF MTT W/O FIRST BYTE OF WORD
         BZ    NOTACTIV
         ST    R4,MTTSIZE
         ST    R3,MTTADDR
         DROP  R1
         GETMAIN RC,LV=(4)         LENGTH WAS IN R4
         LTR   R15,R15
         BNZ   GETMERR
         LR    R11,R1              ADDRESS OF OUR FUTURE COPY OF MTT
*-------------------------------------------------------------*    @TEC
* COPY MTT FROM MASTER SCHEDULER ADDRESS SPACE. RETURN HERE   *    @TEC
* AFTER ENTER KEY PRESS TO REFRESH DATA FOR RE-DISPLAY.       *    @TEC
*-------------------------------------------------------------*    @TEC
AUTHRIZE L     R9,MTTSIZE
         L     R3,MTTADDR
         SRA   R9,8                DIVIDE BY 256
         BNP   NOTACTIV
         LA    R1,1
         SSAR  R1                  SECONDARY ADDRESS SPACE OF ASID 1!!!
         SR    R5,R5
         LA    R6,0(R4,R11)        END OF GETMAIN AREA
         LA    R7,256
         LR    R10,R11
MOVELOOP MVCP  0(R7,R10),0(R3),R5  MOVES MAX OF 256 BYTES
         LA    R10,256(,R10)
         LA    R3,256(,R3)
         BCT   R9,MOVELOOP
         B     ALLMOVED
FREERET  L     R4,MTTSIZE
         FREEMAIN  RC,LV=(4),A=(11)  FREE SECOND GETMAIN AREA
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   FREEMERR
         SR    R1,R1               ****************************
         L     R1,16               *  A                       *
         USING CVT,R1              *   D                      *
         L     R1,CVTTCBP          *    D      J              *
         DROP  R1                  *     R      S             *
         L     R1,4(R1)            *      E      C            *
         USING TCB,R1              *       S      B           *
         L     R1,TCBJSCB          *        S                 *
         DROP  R1                  ****************************
         USING IEZJSCB,R1
         NI    JSCBOPTS,X'FF'-JSCBAUTH
         DROP  R1
         MODESET MF=(E,PROBMOD)    PROBLEM STATE
FREERET2 LR    R3,R13
         L     R13,4(,R13)         ADDRESS OF CALLING PROGRAM SAVEAREA
         FREEMAIN  RC,LV=WORKL,A=(3)  FREE STORAGE
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   FREEERR2
RETURN   SR    R0,R0
         SVC   232                                                 @TEC
         RETURN  (14,12),,RC=(15)
GETMERR  WTO   ' ZTPR0205 - GETMAIN ERROR, PLEASE NOTIFY TECH SUPPORT',X
               ROUTCDE=2
         L     R13,4(,R13)         RELOAD R13
         B     RETURN
BADLOAD  TPUT  BADLDMSG,25
NOAUTH   TPUT  MSGNO1,13
         B     FREERET2
FREEMERR TPUT  MSG2,33
         B     FREERET2
FREEERR2 TPUT  MSG1,33
         B     RETURN
ALLMOVED EPAR  R1                  EXTRACT PRIMARY ASID INTO R1
         SSAR  R1                  SET SECONDARY TO OUR ASID
*-------------------------------------------------------------*    @TEC
* SAVE INFORMATION FROM THE MTT HEADER. FORMAT IS:            *    @TEC
*  DC    CL4'MTT'      EYECATCHER                             *    @TEC
*  DS    AL4           ADDRESS OF MOST RECENT ENTRY IN MTT    *    @TEC
*  DS    AL4                                                  *    @TEC
*  DS    AL4           ADDRESS OF HIGHEST ENTRY IN MTT        *    @TEC
*  DC    CL1'V'                                               *    @TEC
*  DS    XL3           MTT LENGTH                             *    @TEC
*  DS    CL12          TIME ??????                            *    @TEC
*  DS    AL4           ADDRESS OF LOWEST ENTRY IN MTT         *    @TEC
*-------------------------------------------------------------*    @TEC
ADJUST   CLC   MTT,0(R11)          MTT HEADER
         BNE   NOTACTIV
         L     R9,4(,R11)          THIS IS THE CURRENT ENTRY IN MASTER
         L     R8,MTTADDR          ADDR OF MTT IN MASTER ADDRESS SPACE
         SR    R9,R8               DISPL INTO OUR AREA OF FIRST ENT
         LA    R9,0(R9,R11)        CURRENT ENTRY
         ST    R9,MTTCLINE         MTT CURRENT LINE IN OUR AREA
         L     R9,32(,R11)         FIRST ENTRY IN MTT
         SR    R9,R8               DISPLACEMENT TO FIRST ENTRY
         LA    R9,0(R9,R11)        ADDRESS IN OUR ADDRESS SPACE
         ST    R9,MTTFLINE         SAVE IN MTT FIRST LINE
         L     R9,12(,R11)         LAST BYTE
         SR    R9,R8               GET DISPLACEMENT
         LA    R9,0(R9,R11)        ADDRESS IN OUR AREAOF LAST BYTE
         ST    R9,MTTLLINE         LAST BYTE OF LAST LINE IN MTT
         MVC   CURRLINE,MTTCLINE   CURRENT LINE
DISPLAY  L     R5,LASTLINE         ADDR OF WHERE TO MOVE CURRENT ENTRY
         L     R6,CURRLINE         CURRENT LINE
         MVI   UPFLAG,X'00'
         MVI   WRAPFLAG,X'00'
         MVI   FOUNDFLG,X'00'
         MVC   BOTTOM,CURRLINE
DISPLOOP SR    R7,R7
         ICM   R7,B'0011',8(R6)    LOAD LENGTH
         BNP   FINDNEXT
         LA    R8,10(R7,R6)
         CLI   SEARCHON,X'FF'
         BE    DISPCHEK
         CLI   UPFLAG,X'FF'
         BNE   DISPSUB
DISPCHEK CLC   CURRLINE,MTTCLINE
         BNL   CHEKLINE
         C     R8,MTTCLINE
         BNL   ENDOFLST
CHEKLINE C     R6,MTTCLINE
         BNL   CHEKWRAP
         C     R8,MTTCLINE
         BNL   ENDOFLST
         B     DISPSUB
CHEKWRAP CLI   WRAPFLAG,X'FF'
         BE    WRITEIT
DISPSUB  CLI   SEARCHON,X'FF'
         BE    SEARCHLN
         S     R7,=F'56'           MINUS CONTROL STUFF             @TEC
         BNP   FINDNEXT
DISPL    C     R7,SEVENTY9         > 80
         BNH   MOVEDATA            NO - MOVE TO DISPLAY AREA
         S     R7,EIGHTY
         LA    R1,112(R6,R7)       LAST BYTE ADDRESS
         S     R1,MTTLLINE         ADD OF 0C4 BYTE
         BC    12,EX01
         SR    R7,R1
         BCTR  R7,0
         BC    2,EX01
         B     FINDNEXT
EX01     DS    0H
*        EX    R7,DISPMOV2
*        S     R5,EIGHTY
         C     R5,FRSTLINE
         BNH   WRITEIT
         LA    R7,62               MAX LENGTH IS 80
MOVEDATA LA    R1,66(R6,R7)        LAST BYTE ADDRESS               @TEC
         S     R1,MTTLLINE         ADD OF 0C4 BYTE
         BC    12,EX02
         SR    R7,R1
         BC    2,EX02
         B     FINDNEXT
EX02     DS    0H
         BCTR  R7,0
         LR    R0,R7               SAVE IN CASE OF TRUNCATION      @TEC
         C     R7,=F'58'           59 BYTES WILL FIT               @TEC
         BNH   EX02A               SHORT ENOUGH.                   @TEC
         LA    R7,58               ELSE TRUNCATE                   @TEC
EX02A    DS    0H
         EX    R7,DISPMOVE         MOVE IT TO TERMINAL AREA
         LR    R7,R0               RESTORE LENGTH                  @TEC
         CLC   =CL2'  ',45(R6)     IS THERE A JES JOBID?           @TEC
         BE    SKIPJID             NO                              @TEC
         MVC   10(9,R5),46(R6)     MOVE IN JES2 JOB ID
SKIPJID  DS    0H                                                  @TEC
         CLC   =CL2'  ',34(R6)                                     @TEC
         BE    SKIPTIM
         MVC   00(8,R5),35(R6)     MOVE IN TIME STAMP
SKIPTIM  S     R5,EIGHTY
         C     R5,FRSTLINE
         BNH   WRITEIT
FINDNEXT ST    R6,CURRLINE
         BAL   R2,PREVLINE         GET NEXT LINE
         B     DISPLOOP
DOWN     CLC   BOTTOM,MTTCLINE     IS THIS NEWEST PAGE?
         BE    AUTHRIZE
         MVI   FOUNDFLG,X'00'
         BAL   R2,CLEARSCR         GET NEXT LINE
         LA    R5,DETAIL           ADDR OF WHERE TO MOVE CURRENT ENTRY
         L     R6,BOTTOM           BECOMES TOP ON PAGE DOWN
         ST    R6,CURRLINE         CURRENT LINE
         ST    R6,TOP              CURRENT LINE
         MVI   DOWNFLAG,X'FF'
*GIVEN A STARTING POINT, WE WILL BE PAGING UP HERE *
DOWNLOOP SR    R7,R7
         ICM   R7,B'0011',8(R6)    LOAD LENGTH
         BNP   FINDNXTD
         LA    R8,10(R7,R6)        NEXT LINE
         C     R8,MTTCLINE
         BNH   DOWNSUB
         C     R6,MTTCLINE
         BNL   DOWNSUB
         MVC   0(80,R5),CENDOFIT
         B     WRITEITD
DOWNSUB  S     R7,=F'56'           MINUS SIX                       @TEC
         BNP   FINDNXTD
         C     R7,SEVENTY9         > 80
         BNH   MOVEDOWN            NO - MOVE TO DISPLAY AREA
         S     R7,EIGHTY
         LA    R1,112(R6,R7)       LAST BYTE ADDRESS
         S     R1,MTTLLINE         ADD OF 0C4 BYTE
         BC    12,EX03
         SR    R7,R1
         BCTR  R7,0
         BC    2,EX03
         B     FINDNXTD
EX03     DS    0H
*        EX    R7,DISPMOV2
         LA    R7,62               MAX LENGTH IS 80
*        A     R5,EIGHTY
         C     R5,LASTLINE
         BNL   WRITEITD
MOVEDOWN LA    R1,66(R6,R7)        LAST BYTE ADDRESS               @TEC
         S     R1,MTTLLINE         ADD OF 0C4 BYTE
         BC    12,EX04
         SR    R7,R1
         BC    2,EX04
         B     FINDNXTD
EX04     DS    0H
         BCTR  R7,0
         LR    R0,R7               SAVE IN CASE OF TRUNCATION      @TEC
         C     R7,=F'58'           59 BYTES WILL FIT               @TEC
         BNH   EX04A               SHORT ENOUGH.                   @TEC
         LA    R7,58               ELSE TRUNCATE                   @TEC
EX04A    DS    0H
         EX    R7,DISPMOVE         MOVE IT TO TERMINAL AREA
         LR    R7,R0               RESTORE LENGTH                  @TEC
         CLC   =CL2'  ',45(R6)     IS THERE A JES JOBID?           @TEC
         BE    SKIPJID2            NO                              @TEC
         MVC   10(9,R5),46(R6)     SKIP CONTROL STUFF              @TEC
SKIPJID2 DS    0H                                                  @TEC
         CLC   =CL2'  ',34(R6)                                     @TEC
         BE    SKIPTIM2
         MVC   00(8,R5),35(R6)     SKIP CONTROL STUFF              @TEC
SKIPTIM2 A     R5,EIGHTY
         C     R5,LASTLINE
         BNL   WRITEITD
FINDNXTD ST    R6,CURRLINE
         BAL   R2,UPLINE           GET NEXT LINE
         B     DOWNLOOP
UP       BAL   R2,UPLINE           PREVIOUS LINE
         B     DISPLOOP
SEARCHLN L     R10,ARGLENG
         LA    R15,15(,R6)         START OF LINE
         LR    R3,R7
         SR    R3,R10
         BNP   FINDNEXT
COMPLOOP EX    R10,COMPARE         COMPARE THIS TO ARGUMENT
         BE    FOUNDIT
         LA    R15,1(,R15)         NEXT BYTE
         LA    R1,0(R15,R10)
         C     R1,MTTLLINE
         BNL   FINDNEXT
         BCT   R3,COMPLOOP
         B     FINDNEXT
FOUNDIT  MVI   SEARCHON,X'00'      RESET
         MVI   FOUNDFLG,X'FF'
         S     R7,=F'56'                                           @TEC
         ST    R6,SEARCHTP
         ST    R6,CURRLINE
         ST    R6,BOTTOM
         B     DISPL
UPLINE   LA    R8,1                INCREMENT 0F 1
         L     R6,CURRLINE
         CLC   R6,MTTFLINE         ARE WE AT TOP
         BH    UPCONTIN            NO - SKIP
         L     R6,MTTLLINE
         S     R6,=F'05'
UPCONTIN LNR   R8,R8               DECREMENT OF -1
         L     R9,MTTFLINE         ADDRESS OF LOWEST ADDRESS IN MTT
         MVI   STARTFLG,X'00'      FLAG TO INDICATE FIRST TIME THRU
         BCTR  R6,0                SUBTRACT  1
UPLOOP   CLC   CBEGINLN,0(R6)      BEGINNING OF LINE CHARACTER?
         BE    PREVFND             YES, BRANCH
         BCTR  R6,0                MINUS 1
         CR    R6,R9
         BNL   UPLOOP
*   MEANS WE ARE AT THE LOWEST ADDRESS IN TABLE, NOW START AT THE    *
*   VERY BOTTOM AND WORK BACKWARDS -                                 *
         CLI   STARTFLG,X'00'      WE BEEN THRU HERE BEFORE?
         BNE   WRITEITD            YES - BRANCH
         MVI   STARTFLG,X'FF'      FLAG IT
         L     R6,MTTLLINE         ADDRESS OF LAST LINE
         S     R6,=F'05'           MINUS SIX
         L     R9,MTTCLINE
         B     UPLOOP              NOW FIND PREVIOUS
PREVLINE LA    R8,1                INCREMENT 0F 1
         L     R6,CURRLINE         ADDRESS OF CURRENT LINE
         LA    R6,1(,R6)           INCREMENT
         C     R6,MTTLLINE         LAST LINE?
         BL    PREVCONT            NO, BRANCH
         L     R6,MTTFLINE         START AT FIRST
         MVI   WRAPFLAG,X'FF'      SET TO DISPLAY IT HAS WRAPPED
PREVCONT L     R9,MTTLLINE         ADDRESS OF LOWEST ADDRESS IN MTT
         S     R9,=F'06'           CBEGINLN LENGTH
         BNP   NOTACTIV            NOT POSITIVE, NOT A VALID ENTRY
         MVI   STARTFLG,X'00'      FLAG TO INDICATE FIRST TIME THRU
PREVLOOP CLC   CBEGINLN,0(R6)      BEGINNING OF LINE CHARACTER?
         BE    PREVFND             YES, BRANCH
         BXLE  R6,R8,PREVLOOP      LOOP
*   MEANS WE ARE AT THE LOWEST ADDRESS IN TABLE, NOW START AT THE    *
*   VERY BOTTOM AND WORK BACKWARDS -                                 *
         CLI   STARTFLG,X'00'      WE BEEN THRU HERE BEFORE?
         BNE   WRITEIT             YES - BRANCH
         MVI   STARTFLG,X'FF'      FLAG IT
         L     R6,MTTFLINE         ADDRESS OF FRST LINE
         B     PREVLOOP            NOW FIND PREVIOUS
PREVFND  BR    R2                  RETURN
WRITEITD BAL   R2,TPUT             WRITE SCREEN
         ST    R6,BOTTOM           SAVE WHERE WE WERE
         B     TGET                GET NEXT INPUT FROM TERMINAL
WRITEIT  EQU   *
         BAL   R2,TPUT             WRITE SCREEN
         ST    R6,TOP              SAVE ADDRESS OF WHERE WE WERE
TGET     MVC   WORKLINE,HEX40S
         MVI   SEARCHON,X'00'      RESET SEARCH FLAG
         BAL   R2,CLEARSCR
         L     R5,LASTLINE         ADDR OF WHERE TO MOVE CURRENT ENTRY
         L     R6,CURRLINE         CURRENT LINE
         MVI   UPFLAG,X'00'        RESET UP FLAG
         TGET  WORKLINE,70,ASIS
         CLI   WORKLINE,X'7D'      PFK USED?
         BE    CHECKOUT            NO, CHECK COMMAND, IF ANY
         NI    WORKLINE,X'0F'
         CLI   WORKLINE,X'01'      PF-1?
         BE    HELPOUT             YES, DISPLAY HELP INFO
         CLI   WORKLINE,X'03'      PF-3?
         BE    FREEAX              YES, END
         CLI   WORKLINE,X'05'      SEARCH REPEAT
         BE    SEARCHRP
         CLI   WORKLINE,X'07'      UP?
         BE    UPSET
         CLI   WORKLINE,X'08'
         BE    DOWN
         CLI   WORKLINE,X'09'
         BE    SETTOP
         CLI   WORKLINE,X'0A'
         BE    SETBOT
         CLI   WORKLINE,C'>'       MESSAGE INPUT
         BE    TGET
         B     AUTHRIZE
NOCMDS   BAL   R2,CLEARSCR         GO CLEAR OUR SCREEN
         MVC   DETAIL+880(23),=C'COMMANDS NOT AUTHORIZED'
         BAL   R2,TPUT
         B     TGET
CHECKOUT OC    WORKLINE+6(74),HEX40S
         CLC   WORKLINE+6(4),HEX40S
         BE    AUTHRIZE
         MVC   CMDLINE,WORKLINE+6
         CLC   =C'T  ',CMDLINE     TOP
         BE    SETTOP
         CLC   CMDLINE(3),=C'TOP'
         BE    SETTOP
         CLC   =C'B  ',CMDLINE     TOP
         BE    SETBOT
         CLC   XFINDQ,CMDLINE      F '
         BE    FIND
         CLC   CFIND,CMDLINE       FIND
         BE    FIND
         CLC   CMDLINE(3),=C'BOT'
         BE    SETBOT
         CLC   CMDLINE(3),=C'END'
         BE    FREEAX
         CLC   =C'Z ',CMDLINE      TOP
         BE    FREEAX
         CLC   =C'X ',CMDLINE      TOP
         BE    FREEAX
         CLI   CMDFLAG,X'FF'
         BE    NOCMDS
         CLI   USERFLAG,X'FF'
         BNE   NOWTO
         MVC   WTOCMD(100),WTOLIST
         MVC   WTOCMD+8(72),CMDLINE
         MVC   WTOCMD+78(4),USERID
         LA    R7,WTOCMD
         WTL   MF=(E,(R7))
NOWTO    SLR   R0,0                CLEAR REG 0
ISSUE    LA    R1,COMMAND          GET ADDRESS OF SVC 34 COMMAND
         SVC   34                  ISSUE COMMAND
         STIMER  WAIT,BINTVL=ONE   WAIT ONE SO THAT IT SHOWS
         MVC   CMDLINE,HEX40S
         B     AUTHRIZE
*    FIND OPERATION REQUESTED                                         *
FIND     EQU   *
         OC    WORKLINE+6(74),HEX40S  UPPER CASE
         MVC   WORKLINE(74),WORKLINE+6  MOVE OVER
         MVC   ARGUMENT(74),HEX40S  CLEAR OUT
         LA    R8,1
         LA    R6,WORKLINE
         LA    R9,74(,R6)
         LA    R7,ARGUMENT
FINDQUOT CLI   0(R6),X'7D'
         BE    FOUNQUOT
         LA    R6,1(,R6)
         CR    R6,R9
         BL    FINDQUOT
         B     REENTER
FOUNQUOT LA    R6,1(,R6)
ARGLOOP  CLI   0(R6),X'7D'
         BE    ARGDONE
         MVC   0(1,R7),0(R6)
         LA    R7,1(,R7)
         BXLE  R6,R8,ARGLOOP
*  IF IT GETS HERE - ARGUMENT WAS INVALID                             *
REENTER  BAL   R2,CLEARSCR
         MVC   DETAIL+418(43),CHELPLN7
         BAL   R2,TPUT
         B     TGET
*EARCH   B     FREERET
ENDOFLST MVC   0(80,R5),CENDOFIT
         CLI   SEARCHON,X'FF'
         BNE   WRITEIT
         MVC   24(09,R5),=C'NOT FOUND'
         MVI   FOUNDFLG,X'00'
         B     WRITEIT
SEARCHRP CLI   SRCHFLAG,X'FF'
         BNE   REENTER
         CLI   FOUNDFLG,X'FF'
         BNE   LOADCURR
         MVC   CURRLINE,SEARCHTP   WHERE TO PICK UP
LOADCURR L     R6,CURRLINE
         MVI   FOUNDFLG,X'00'
         BAL   R2,PREVLINE
         ST    R6,CURRLINE
         MVI   SEARCHON,X'FF'
         B     UPSET
ARGDONE  LA    R8,ARGUMENT
         BCTR  R7,0
         SR    R7,R8
         BNP   REENTER
         ST    R7,ARGLENG
         MVI   FOUNDFLG,X'00'      NOT FOUND YET
         MVI   SRCHFLAG,X'FF'      SEARCH ARGUMENT IS PRESENT
         MVI   SEARCHON,X'FF'      PLEASE SEARCH
         L     R6,BOTTOM
         B     SETBOT2
SETBOT   L     R6,MTTCLINE
SETBOT2  ST    R6,CURRLINE
         L     R5,LASTLINE
         B     DISPLOOP
SETTOP   L     R6,MTTCLINE
         ST    R6,CURRLINE
         BAL   R2,UPLINE
         ST    R6,CURRLINE
         BAL   R2,UPLINE
         ST    R6,BOTTOM
         B     DOWN
UPSET    MVI   UPFLAG,X'FF'
         CLI   DOWNFLAG,X'FF'
         BNE   UPSET2
         MVC   CURRLINE,TOP
         MVI   DOWNFLAG,X'00'
UPSET2   L     R5,LASTLINE         ADDR OF WHERE TO MOVE CURRENT ENTRY
         L     R6,CURRLINE         WHERE WE LEFT OFF
         ST    R6,BOTTOM
         MVI   FOUNDFLG,X'00'
         B     DISPLOOP
COMPARE  CLC   0(0,R15),ARGUMENT   LOOK FOR SEARCH ARGUMENT
DISPMOVE MVC   21(0,R5),66(R6)     SKIP CONTROL STUFF              @TEC
DISPMOV2 MVC   0(0,R5),112(R6)     SKIP CONTROL STUFF
TPUT     LA    R1,SCREEN
         L     R0,SCRTPUTL
         TPUT  (1),(0),FULLSCR
         BR    R2
HELPOUT  BAL   R2,CLEARSCR         GO CLEAR OUR SCREEN
         MVC   DETAIL+400(80),CHELPLN3
         MVC   DETAIL+480(70),CHELPLN4
         MVC   DETAIL+640(39),CHELPLN5
         MVC   DETAIL+720(43),CHELPLN6
         MVC   DETAIL+880(43),CHELPLN7
         BAL   R2,TPUT
         B     TGET
NOTACTIV BAL   R2,CLEARSCR         GO CLEAR OUR SCREEN
         MVC   DETAIL(16),=C'TRACE NOT ACTIVE'
         BAL   R2,TPUT
         STIMER  WAIT,BINTVL=ONE
         L     R2,CPPLSAVE
         LINK  EP=ZTPR0200
         B     FREEAX
**   CLEAR THE SCREEN AREA AND RETURN TO ADDRESS IN REG 2            **
CLEARSCR LA    R6,DETAIL
         L     R7,SCRLENG
         SR    R9,R9
         ICM   R9,B'1001',HEX40S
         LA    R8,HEX40S
         MVCL  R6,R8
         BR    R2
TABLE    DC    CL4'MURF'           USERIDS VALID TO USE IT
         DC    CL4'LANE'
TABLEND  DC    CL4'XXXX'           ROBERT CHAMBERLAIN
DSCREEN  DS    0C                  DISPLAY SCREEN
         DC    X'03'               CONTROL
         DC    X'00'               ERASE/WRITE ALTERNATE (132 COL)
         DC    X'00115D7F1140403C404000'  CLEAR SCREEN
         DC    CL49'                  MASTER  TRACE  TABLE  DISPLAY   '
         DC    CL31'               PF-1 FOR HELP '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'F460'             (43,1)
*        DC    C'_'
         DC    X'1DC8'             MARK NEXT FIELD AS INPUT FIELD
         DC    X'13'               SET CURSOR ADDRESS
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'F5E7'             (43,72)
         DC    X'1DF0'             TERMINATE INPUT FIELD
         DC    C' '                INDICATES MORE TO BE DISPLAYED
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'C150'             (2,1)
*DLINE1  DC    40CL80' '      MESSAGE TEXT AREA (FOR 40X80 MAX)
DSCREENL EQU   *-DSCREEN           LENGTH OF THIS PART
FOUR     DC    F'4'
BADLDMSG DC    CL25'ERROR LOADING IKJEFFUT  '
         DS    0F
AUTH     DC    CL4'AUTH'
MTT      DC    CL3'MTT'            MASTER TRACE TABLE HEADER
HEXFS    DC    XL4'FFFFFFFF'
HEXZIP   DC    XL4'00000000'
CMAINT   DC    XL5'1401091523'
COMMANDL DC    Y(76),Y(00)
ONE      DC    A(100)              1 SECOND
CBEGINLN DC    XL4'00000001'
EIGHTY   DC    F'080'              CONSTANT 80
SEVENTY9 DC    F'079'              CONSTANT 79
ANDCHARS DC    XL8'3F3F3F3F3F3F3F3F'
MSGNO1   DC    CL13'SYSTEM ACTIVE'
MSGNO2   DC    CL6'NO APF'
MSG1     DC    CL33'***FREEMAIN ERROR ON SAVEAREA ***'
MSG2     DC    CL33'***FREEMAIN ERROR ON MTT AREA ***'
XFINDQ   DC    XL3'C6407D'         HEX FOR F '
CFIND    DC    CL4'FIND'           CHARACTER FIND
CEND     DC    CL3'END'            CHARACTER END
CZ       DC    CL1'Z'              CHARACTER Z
PATTERN  DC    XL4'40202120'
AXLIST   DC    H'1'
         DC    H'0'
WTOLIST  WTL   '                                                       X
                                       ZTPR0200',MF=L
SUPRMOD  MODESET MF=L,MODE=SUP,KEY=ZERO
PROBMOD  MODESET MF=L,MODE=PROB,KEY=NZERO
         LTORG
CENDOFIT DC    CL49'* * * * * * * * * * * * E N D * * O F * * D A T A '
         DC    CL31' * * * * * * * * * * * * * * '
CHELPLN3 DC    CL49'  PF-1  HELP            PF-3  END                P'
         DC    CL31'F-5  REPEAT FIND   PF-7  UP  '
CHELPLN4 DC    CL49'  PF-8  PAGE DOWN       PF-9  TOP (OLDEST)       P'
         DC    CL21'F-10 BOTTOM (NEWEST)'
CHELPLN5 DC    CL39'  T OR TOP MAY BE USED INSTEAD OF PF-9 '
CHELPLN6 DC    CL43'  B OR BOTTOM MAY BE USED INSTEAD OF PF-10 '
CHELPLN7 DC    CL43'  F OR FIND WITH ARGUMENT IN SINGLE QUOTES '
SAVDSECT DSECT
SAVEAREA DS    18F
DOUBLWD  DS    D
PARMWKAD DS    F
CPPLSAVE DS    F
         DS    0D
WORKLINE DS    CL80
HEX40S   DS    CL80
WTOCMD   DS    CL100
PARMWORK DS    CL44
USERID   DS    CL7
USERIDL  DS    XL1
USERATTR DS    XL1
STARTFLG DS    XL1
SRCHFLAG DS    XL1
USERFLAG DS    XL1
FREEFLAG DS    XL1
CMDFLAG  DS    XL1
FOUNDFLG DS    XL1
SEARCHON DS    XL1
UPFLAG   DS    XL1
WRAPFLAG DS    XL1
DOWNFLAG DS    XL1
MTTSIZE  DS    F                   SIZE OF MTT
MTTADDR  DS    F                   MTT ADDRESS IN MASTER ASID
BOTTOM   DS    F                   BOTTOM    OF SCREEN
TOP      DS    F                   TOP OF SCREEN
SEARCHTP DS    F                   CURRENT LINE FOR REPEAT SEARCH
CURRLINE DS    F                   CURRENT LINE FOR US
FRSTLINE DS    F                   FIRST LINE ON OUR DISPLAY
LASTLINE DS    F                   LAST  LINE ON OUR DISPLAY
MTTFLINE DS    F                   FIRST LINE IN OUR AREA
MTTLLINE DS    F                   LAST  LINE IN OUR AREA
MTTCLINE DS    F                   CURRENT LINE IN OUR AREA
SCRLENG  DS    F
SCRTPUTL DS    F
ARGLENG  DS    F
ARGUMENT DS    CL74
COMMAND  DS    F
CMDLINE  DS    CL72
SCREEN   DS    0CL108
         DS    XL1                 CONTROL
DSCRO1   DS    XL1                 ERASE/WRITE ALTERNATE (132 COL)
         DS    XL11
         DS    CL80
         DS    XL1                 SET BUFFER ADDRESS
DSCRO3   DS    XL2                 (43,1)
*        DS    XL1
         DS    XL2                 MARK NEXT FIELD AS INPUT FIELD
         DS    XL1                 SET CURSOR ADDRESS
         DS    XL1                 SET BUFFER ADDRESS
DSCRO4   DS    XL2
         DS    XL2                 TERMINATE INPUT FIELD
         DS    XL2                 SET BUFFER ADDRESS
DSCRO5   DS    XL2
DETAIL   DS    43CL80
WORKL    EQU   *-SAVEAREA
         CVT   DSECT=YES
         IEZJSCB
         IKJTCB  DSECT=YES
         IEEBASEA
         IEECHAIN
         IKJPSCB
         IKJCPPL
         IKJUPT
         END
./       ADD   NAME=RACFDSET
RACFDSET START 0
*-------------------------------------------------------------*    @TEC
* EXTRACT RACF DATASET PROFILES AND DISPLAY IN AN ISPF TABLE. *    @TEC
* BASED ON A PROGRAM FROM CBT V325 FILE 080.                  *    @TEC
*-------------------------------------------------------------*    @TEC
R0       EQU   0                   USED BY SYS. MACROS
R1       EQU   1                   USED BY SYS. MACROS
R2       EQU   2                   1ST BASE REG FOR WORKSPACE
R3       EQU   3                   USER COUNT
R4       EQU   4                   MULTIPLIER REG
R5       EQU   5                   2ND BASE REG FOR WORKSPACE
R6       EQU   6                   DUMMY REG FOR MVCL;
*                                      3RD BASE REG FOR WORKSPACE
R7       EQU   7                   ZERO INDICATOR FOR MVCL
R8       EQU   8                   ADDR OF WA
R9       EQU   9                   LENGTH OF WA
R10      EQU   10                  ADDR OF END OF WA
R11      EQU   11                  LENGTH OF DATASET NAME
R12      EQU   12                  PROGRAM BASE REG
R13      EQU   13                  ADDR OF MVS SAVEAREA
R14      EQU   14                  RETURN ADDR
R15      EQU   15                  COMPLETION CODE
*
***********************************************************************
* START OF JOB HOUSEKEEPING                                           *
***********************************************************************
         STM   R14,R12,12(R13)     STORE MVS REGS
         BALR  R12,0               ESTABLISH R12 AS BASE REG
         USING *,R12               IDENTIFY BASE REG
         ST    R13,SA+4            STORE ADD. OF MVS REG. SA
         LA    R13,SA              LOAD ADDR OF PGM. SAVEAREA
         LOAD  EP=ISPLINK                                          @TEC
         LTR   R15,R15             ISPLINK AVAILABLE?              @TEC
         ST    R0,ISPLINK          SAVE A(ISPLINK) FOR LATER       @TEC
         ISPCALL ('VDEFINE',ISPNLST4,                              @TECX
               ISPVLST4,'CHAR ',80)                                @TEC
         ISPCALL ('TBCREATE','RACDTAB',                            @TECX
               ' ',ISPNLST4,'NOWRITE',                             @TECX
               'REPLACE')                                          @TEC
***********************************************************************
* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *
***********************************************************************
WORKADDR EQU   *
         LA    R0,1                                                @TEC
         SVC   232                                                 @TEC
         LA    R2,WS               LOAD ADDR OF WORKSPACE
         USING WS,R2               SET ADDRESSABILITY TO WORKSPACE
***********************************************************************
* SET THE LENGTH OF THE WA AND PROFILE ENTRY                          *
***********************************************************************
INITPROF MVI   PROFILE,X'01'       INITIAL PROFILE LENGTH = 1 BYTE
         MVC   WL(4),=XL4'00008000'  SAVE WA LENGTH FOR RACF
         MVI   ENTRYNAM,X'00'      CLEAR DATASET PROFILE NAME...
         MVC   ENTRYNAM+1(43),ENTRYNAM  ...IN TWO STEPS
***********************************************************************
* GET A RACF PROFILE                                                  *
***********************************************************************
CLERWORK EQU   *
         L     R7,=XL4'00000000'   INDICATE CLEAR FUNCTION TO MVCL
         LA    R8,WD               LOAD ADDR OF WORK AREA
         L     R9,=XL4'00007FE4'   LOAD LENGTH OF DATA IN WA
         MVCL  R8,R6               ZERO OUT THE WORK AREA
         CLI   GENFLAG,X'80'       WAS PREVIOUS PROFILE GENERIC?
         BNE   DISCPROF            IF NOT, ASSUME DISCRETE
         ICHEINTY  NEXTC,MF=(E,GENERIC)  IF SO, ASSUME ANOTHER GENERIC
         CLI   GENFLAG,X'80'       WAS RETURNED PROFILE GENERIC?
         BNE   MARKDISC            IF NOT, MARK IT AS DISCRETE
GENPROF  MVC   OPTYPE,=CL8'GENERIC '  INDICATE GENERIC PROFILE
         B     CHECKRC             CHECK ICHEINTY RETURN CODE
DISCPROF EQU   *
         ICHEINTY  NEXTC,MF=(E,DISCRETE)  DISCRETE ICHEINTY
         CLI   GENFLAG,X'80'       WAS RETURNED PROFILE GENERIC?
         BE    GENPROF             IF SO, MARK IT AS GENERIC
MARKDISC MVC   OPTYPE,=CL8'DISCRETE'  INDICATE DISCRETE PROFILE
         MVI   GENFLAG,X'00'       INDICATE DISCRETE LAST PROCESSED
CHECKRC  LTR   R15,R15             CHECK RETURN CODE FROM ICHEINTY
         BNZ   WRAPUP              IF NON-ZERO, EXIT THIS PROGRAM
*
***********************************************************************
* WRITE THE RETURNED DATA                                             *
***********************************************************************
         MVI   ORECRD,C' '         PROPOGATE BLANK SPACE TO...
         MVC   ORECRD+1(66),ORECRD  ...OUTPUT RECORD IN TWO STEPS
         LA    R10,WD              LOAD ADDR OF RETURNED DATA
         A     R10,DL              ADD LENGTH OF RETURNED DATA
         L     R11,DSL             LOAD LENGTH OF DSET-ID
         S     R11,=XL4'00000001'  SUBTRACT 1 FROM DSET-ID LENGTH
         EX    R11,MOVEDSET        ALTER LENGTH OF DSET-ID FOR MVC
         B     MOVECLAS            DON'T EXECUTE MVC TWICE
MOVEDSET MVC   ODSET(0),ENTRYNAM   MOVE DATASET INTO OUTPUT FIELD
MOVECLAS DS    0H
         MVC   OOWNER(8),WD+2      MOVE OWNER INTO OUTPUT FIELD
         MVC   OUACC(1),WD+12      MOVE UACC TO OUTPUT FIELD
         LA    R5,WD+12                                            @TEC
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'A'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'C'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'U'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'R'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'E'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'N'                                      @TEC
         B     ENDUACC                                             @TEC
ENDUACC  DS    0H                                                  @TEC
         SR    R3,R3                                               @TEC
         ICM   R3,3,WD+15                                          @TEC
         SLL   R3,16               TRUNCATE SIGN FIELD
         SRL   R3,16               RIGHT JUSTIFY NUMBER OF USERS
         LA    R6,WD+19            LOAD ADDR OF FIRST USER-ID
         USING USER$ID,R6          SET ADDRESSABILITY TO USER-ID
         SR    R4,R4               CLEAR OUT REG 4
         C     R3,=XL4'00000000'   ARE THERE AUTHORIZED USERS?
         BNZ   FINDACES            IF SO, LOCATE ACCESS LIST
         L     R3,=XL4'00000001'   IF NOT, WRITE INDICATIVE...
         MVC   OUSER(8),=CL8'* NONE *'  ...RECORD CONTAINING...
         MVI   OACESS,X'00'        ...THIS INFO
         B     WRITEIT             WRITE THE OUTPUT RECORD
FINDACES LR    R5,R3               LOAD # OF USERIDS
         M     R4,=XL4'00000008'   MULTIPLY BY USER-ID LENGTH (8)
         A     R5,=XL4'00000002'   ADD OFFSET FOR ACCESS PREFIX
         AR    R5,R6               ADD ADDR OF FIRST USER-ID
         USING ACCESS,R5           SET ADDRESSABILITY TO ACCESS
NEXTUSER EQU   *
MOVEUSER EQU   *
         MVC   OUSER(8),0(R6)      MOVE USER-ID TO OUTPUT FIELD
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'A'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'C'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'U'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'R'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'E'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'N'                                     @TEC
         B     WRITEIT                                             @TEC
WRITEIT  EQU   *
         ISPCALL ('TBADD','RACDTAB')                               @TEC
         A     R6,=XL4'00000008'   POINT TO NEXT USER-ID
         USING USER$ID,R6          SET ADDRESSABILITY TO USER-ID
         A     R5,=XL4'00000001'   POINT TO NEXT USER ACCESS
         USING ACCESS,R5           SET ADDRESSABILITY TO ACCESS
         S     R3,=XL4'00000001'   DECREMENT NUMBER OF USERIDS
         C     R3,=XL4'00000000'   ANY MORE REMAINING USER-IDS?
         BZ    CLERWORK            IF NOT, GET NEXT PROFILE
         B     NEXTUSER            GET THE NEXT USER-ID
*
***********************************************************************
* END OF JOB HOUSEKEEPING                                             *
***********************************************************************
WRAPUP   EQU   *
         ISPCALL ('TBTOP','RACDTAB')
REDISPL  DS    0H                                                  @TEC
         ISPCALL ('TBDISPL','RACDTAB',                                 X
               'RACDPANL')
         C     R15,=F'8'           END KEY PRESSED?                @TEC
         BNE   REDISPL                                             @TEC
CLOSING  DS    0H
         DROP  R2,R5,R6            RELEASE BASE REGS
         SR    R0,R0                                               @TEC
         SVC   232                                                 @TEC
         L     R13,SA+4            LOAD RETURN ADDR (MVS R13)
         L     R14,12(R13)         LOAD MVS R14 VALUE
         LM    R0,R12,20(R13)      RESTORE MVS REGS 0-12
         SR    R15,R15             GUARANTEE ZERO RETURN CODE
         BR    R14                 RETURN TO MVS
***********************************************************************
* STORAGE USED BY PROGRAM                                             *
***********************************************************************
SA       DS    18F                 SAVE AREA FOR SYSTEM REGS
*
GENERIC  ICHEINTY  NEXTC,ENTRY=PROFILE,WKAREA=WA,MF=L,TYPE='DS',       +
               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +
               GENERIC=UNCOND
*
DISCRETE ICHEINTY  NEXTC,ENTRY=PROFILE,WKAREA=WA,MF=L,TYPE='DS',       +
               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +
               GENERIC=NO
*
DSL      DC    XL3'000000'         PADDING FOR REG LOADS
PROFILE  DS    AL1                 ENTRY LENGTH FIELD
ENTRYNAM DS    XL44                DATASET NAME
*
GETCNT   ICHEACTN  FIELD=ACLCNT,MF=L  RETREIVE # OF AUTHORIZED USERS
GETOWNR  ICHEACTN  FIELD=AUTHOR,MF=L  RETREIVE PROFILE OWNER
GETUACC  ICHEACTN  FIELD=UNIVACS,MF=L  RETREIVE UACC
GETUSER  ICHEACTN  FIELD=USERID,MF=L  RETREIVE AUTHORIZED USER
GETUACS  ICHEACTN  FIELD=USERACS,MF=L  RETREIVE ACCESS AUTHORITY
*
ACLCNT   DC    CL8'ACLCNT  '       # OF AUTHORIZED USERS
OWNER    DC    CL8'AUTHOR  '       OWNER
UACC     DC    CL8'UNIVACS '       UACC
USERID   DC    CL8'USERID  '       AUTHORIZED USER-ID OR GROUP
USERACS  DC    CL8'USERACS '       AUTHORIZED USER ACCESS AUTHORITY
*                  *
ISPLINK  DC    A(0)                                                @TEC
ISPNLST4 DC    C'(ORECRD)'                                         @TEC
ISPVLST4 DS    0F                                                  @TEC
ORECRD   DS    0XL78               OUTPUT RECORDS
ODSET    DS    XL44                DATASET NAME
         DS    XL1                                                 @TEC
OOWNER   DS    XL8                 OWNER
         DS    XL1                                                 @TEC
OUACC    DS    XL1                 UACC
         DS    XL1                                                 @TEC
OUSER    DS    XL8                 AUTHORIZED USER-ID OR GROUP
         DS    XL1                                                 @TEC
OACESS   DS    XL1                 AUTHORIZED USER ACCESS AUTHORITY
         DS    XL1                                                 @TEC
OPTYPE   DS    XL8                 PROFILE TYPE (GENERIC/DISCRETE)
         DS    XL3                                                 @TEC
         LTORG
WS       EQU   *
WA       DS    0F                  WA ALIGNMENT ON FULLWORD
WL       DS    F                   WORK AREA LENGTH
RBA      DS    CL6                 RBA OF RETURNED ENTRY
GENFLAG  EQU   *                   NEXT BYTE IS GENERIC FLAG
         DS    XL2                 RESERVED (BY IBM)
DUPCOUNT DS    F                   DUPLICATE DATASET NAME COUNT
         DS    2F                  RESERVED (BY IBM)
DL       DS    F                   LENGTH OF RETURNED DATA
WD       DS    CL32740             32K MAXIMUM RETURNED DATA
ENDWORK  EQU   *                   END OF WA
ACCESS   DSECT
USRACESS DS    XL1
USER$ID  DSECT
USER     DS    CL8
FULLWORD DSECT
PARMADDR DS    F
PARM     DS    CL8
         END
./       ADD   NAME=RACFGRES
RACFGRES START 0
*-------------------------------------------------------------*    @TEC
* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION FROM  *    @TEC
* ALL GENERAL RESOURCE PROFILES IN A RACF 1.9 DATASET. THE    *    @TEC
* EXTRACTED DATA IS DISPLAY IN AN ISPF TABLE. BASED ON A      *    @TEC
* BATCH PROGRAM FROM FILE 080 OF THE CBT TAPE.                *    @TEC
*-------------------------------------------------------------*    @TEC
R0       EQU   0                   USED BY SYS. MACROS; PARM LENGTH
R1       EQU   1                   USED BY SYS. MACROS; PARM ADDR.
R2       EQU   2                   1ST BASE REG FOR WORKSPACE
R3       EQU   3                   USER COUNT
R4       EQU   4                   MULTIPLIER REG
R5       EQU   5                   2ND BASE REG FOR WORKSPACE
R6       EQU   6                   DUMMY REG FOR MVCL;
*                                      3RD BASE REG FOR WORKSPACE
R7       EQU   7                   ZERO INDICATOR FOR MVCL
R8       EQU   8                   ADDR OF WA
R9       EQU   9                   LENGTH OF WA
R10      EQU   10                  ADDR OF END OF WA
R11      EQU   11                  LENGTH OF RESOURCE NAME
R12      EQU   12                  PROGRAM BASE REG
R13      EQU   13                  ADDR OF MVS SA
R14      EQU   14                  RETURN ADDR
R15      EQU   15                  COMPLETION CODE
***********************************************************************
* START OF JOB HOUSEKEEPING                                           *
***********************************************************************
         STM   R14,R12,12(R13)     STORE MVS REGISTERS
         BALR  R12,0               ESTABLISH R12 AS BASE REG
         USING *,R12               IDENTIFY BASE REG
         ST    R13,SA+4            STORE ADD. OF MVS REG. SA
         LA    R13,SA              LOAD ADDR OF PGM. SA
***********************************************************************
* RETRIEVE PASSED PARAMETER AND STORE FOR ICHEINTY MACRO              *
***********************************************************************
         USING FULLWORD,R1         SET ADDRESSABILITY TO R1 VALUE
         L     R1,0(R1)            LOAD ADDR OF PARM DATA AREA
MOVEPARM MVC   GRESCLAS(8),2(R1)   MOVE PARM INTO CLASS FIELD
         LOAD  EP=ISPLINK                                          @TEC
         LTR   R15,R15             ISPLINK AVAILABLE?              @TEC
         ST    R0,ISPLINK          SAVE A(ISPLINK) FOR LATER       @TEC
         ISPCALL ('VDEFINE',ISPNLST4,                              @TECX
               ISPVLST4,'CHAR ',80)                                @TEC
         ISPCALL ('TBCREATE','RACGTAB',                            @TECX
               ' ',ISPNLST4,'NOWRITE',                             @TECX
               'REPLACE')                                          @TEC
         LA    R0,1                                                @TEC
         SVC   232                                                 @TEC
***********************************************************************
* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *
***********************************************************************
WORKADDR EQU   *
         DROP  R1
         LA    R2,WS               LOAD ADDR OF WORKSPACE
         USING WS,R2               SET ADDRESSABILITY TO WORKSPACE
***********************************************************************
* SET THE LENGTH OF THE WA AND PROFILE ENTRY                          *
***********************************************************************
INITPROF MVI   PROFILE,X'01'       INITIAL PROFILE LENGTH = 1 BYTE
         MVC   WL(4),=XL4'00008000'  PUT WA LENGTH WHERE...
*                                          ...RACF CAN FIND IT
***********************************************************************
* GET A RACF PROFILE                                                  *
***********************************************************************
CLERWORK EQU   *
         L     R7,=XL4'00000000'   INDICATE CLEAR FUNCTION TO MVCL
         LA    R8,WD               LOAD ADDR OF WORK AREA
         L     R9,=XL4'00007FE4'   LOAD LENGTH OF DATA IN WA
         MVCL  R8,R6               ZERO OUT THE WORK AREA
***********************************************************************
* THIS PROGRAM RUNS IN TWO "PHASES"; FIRST SCANNING FOR DISCRETE      *
* PROFILES, AND THEN FOR GENERIC PROFILES. THESE ARE DONE SEPARATELY  *
* BECAUSE DIFFERENT, NON-SUBSTITUTABLE PARAMETERS OF THE ICHEINTY     *
* MACRO ARE NECESSARY FOR EACH OF THE TWO TYPES OF PROFILES. A FLAG   *
* (MACTYPE) DETERMINES THE MACRO TO BE USED, AND THEREFORE THE        *
* CURRENT PHASE OF THE PROGRAM.                                       *
***********************************************************************
         CLC   MACTYPE(8),=CL8'DISCRETE'  ICHEINTY FOR DISCRETE?
         BNE   GENMAC              IF NOT, EXECUTE FOR GENERIC
DISMAC   ICHEINTY  NEXT,MF=(E,DISCRETE)  FIND NEXT DISCRETE PROFILE
         B     CHECKRC             CHECK ICHEINTY RETURN CODE
GENMAC   ICHEINTY  NEXT,MF=(E,GENERIC)  FIND NEXT GENERIC PROFILE
CHECKRC  LTR   R15,R15             CHECK RETURN CODE FROM ICHEINTY
         BNZ   WRAPUP              IF NON-ZERO, EXIT THIS PROGRAM
***********************************************************************
* WRITE THE RETURNED DATA                                             *
***********************************************************************
         MVI   ORECRD,C' '         PROPOGATE BLANK SPACE TO...
         MVC   ORECRD+1(79),ORECRD  ...OUTPUT RECORD IN TWO STEPS
         LA    R10,WD              LOAD ADDR OF RETURNED DATA
         A     R10,DL              ADD LENGTH OF RETURNED DATA
         L     R11,GL              LOAD LENGTH OF GRES-ID
         S     R11,=XL4'00000001'  SUBTRACT 1 FROM GRES-ID LENGTH
         EX    R11,MOVEGRES        ALTER LENGTH OF GRES-ID FOR MVC
         B     MOVECLAS            DON'T EXECUTE MVC TWICE
MOVEGRES MVC   OGRES(0),EN         MOVE RESOURCE INTO OUTPUT FIELD
MOVECLAS MVC   OCLASS(8),GRESCLAS  MOVE CLASS INTO OUTPUT FIELD
         MVC   OOWNER(8),WD+2      MOVE OWNER INTO OUTPUT FIELD
         MVC   OUACC(1),WD+12      MOVE UACC TO OUTPUT FIELD
         LA    R5,WD+12                                            @TEC
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'A'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'C'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'U'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'R'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'E'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'N'                                      @TEC
         B     ENDUACC                                             @TEC
ENDUACC  DS    0H                                                  @TEC
         SR    R3,R3                                               @TEC
         ICM   R3,3,WD+15          LOAD NUMBER OF USERIDS          @TEC
         SLL   R3,16               TRUNCATE SIGN FIELD
         SRL   R3,16               RIGHT JUSTIFY NUMBER OF USERS
         LA    R6,WD+19            LOAD ADDR OF FIRST USER-ID
         USING USER$ID,R6          SET ADDRESSABILITY TO USER-ID
         SR    R4,R4               CLEAR OUT REG 4
         C     R3,=XL4'00000000'   ARE THERE AUTHORIZED USERS?
         BNZ   FINDACES            IF SO, LOCATE ACCESS LIST
         L     R3,=XL4'00000001'   IF NOT, WRITE INDICATIVE...
         MVC   OUSER(8),=CL8'* NONE *'  ...RECORD CONTAINING...
         MVI   OACESS,X'00'        ...THIS INFO
         B     WRITEIT             WRITE THE OUTPUT RECORD
FINDACES LR    R5,R3               LOAD # OF USERIDS
         M     R4,=XL4'00000008'   MULTIPLY BY USER-ID LENGTH (8)
         A     R5,=XL4'00000002'   ADD OFFSET FOR ACCESS PREFIX
         AR    R5,R6               ADD ADDR OF FIRST USER-ID
         USING ACCESS,R5           SET ADDRESSABILITY TO ACCESS
NEXTUSER EQU   *
         CR    R6,R10              ARE WE PAST THE END OF THE DATA?
         BP    CLERWORK            IF SO, GET ANOTHER PROFILE
MOVEUSER EQU   *
         MVC   OUSER(8),0(R6)      MOVE USER-ID TO OUTPUT FIELD
         CR    R5,R10              ARE WE PAST THE END OF THE DATA?
         BP    CLERWORK            IF SO, GET ANOTHER PROFILE
         MVC   OACESS(1),0(R5)     MOVE ACCESS TO OUTPUT FIELD
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'A'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'C'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'U'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'R'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'E'                                     @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(1),=C'N'                                     @TEC
         B     WRITEIT                                             @TEC
WRITEIT  DS    0H
         ISPCALL ('TBADD','RACGTAB')                               @TEC
         A     R6,=XL4'00000008'   POINT TO NEXT USER-ID
         USING USER$ID,R6          SET ADDRESSABILITY TO USER-ID
         A     R5,=XL4'00000001'   POINT TO NEXT USER ACCESS
         USING ACCESS,R5           SET ADDRESSABILITY TO ACCESS
         S     R3,=XL4'00000001'   DECREMENT NUMBER OF USERIDS
         C     R3,=XL4'00000000'   ANY MORE REMAINING USER-IDS?
         BZ    CLERWORK            IF NOT, GET NEXT PROFILE
         B     NEXTUSER            GET THE NEXT USER-ID
***********************************************************************
* END OF JOB HOUSEKEEPING                                             *
***********************************************************************
WRAPUP   EQU   *
         CLC   MACTYPE(8),=CL8'DISCRETE'  BEEN PROCESSING DISCRETES?
         BNE   CLOSING             IF NOT, EXIT PROGRAM
         MVC   GL(12),=XL12'000000000000000000000000'
         MVC   MACTYPE(8),=CL8'GENERIC '  INDICATE GENERIC ICHEINTY
         B     INITPROF            BEGIN SEARCH FOR GENERICS
CLOSING  DS    0H
         ISPCALL ('TBTOP','RACGTAB')
REDISPL  DS    0H                                                  @TEC
         ISPCALL ('TBDISPL','RACGTAB',                                 X
               'RACGPNL0')
         C     R15,=F'8'           END KEY PRESSED?                @TEC
         BNE   REDISPL                                             @TEC
         SR    R0,R0                                               @TEC
         SVC   232                                                 @TEC
         DROP  R2,R5,R6            RELEASE BASE REGS
         L     R13,SA+4            LOAD RETURN ADDR (MVS R13)
         L     R14,12(R13)         LOAD MVS R14 VALUE
         LM    R0,R12,20(R13)      RESTORE MVS REGS 0-12
         SR    R15,R15             GUARANTEE ZERO RETURN CODE
         BR    R14                 RETURN TO MVS
***********************************************************************
* STORAGE USED BY PROGRAM                                             *
***********************************************************************
SA       DS    18F                 SAVE AREA FOR SYSTEM REGS
GENERIC  ICHEINTY  NEXT,ENTRY=PROFILE,WKAREA=WA,MF=L,TYPE='GEN',       +
               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +
               CLASS=GRESCLAS,GENERIC=UNCOND
DISCRETE ICHEINTY  NEXT,ENTRY=PROFILE,WKAREA=WA,MF=L,TYPE='GEN',       +
               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +
               CLASS=GRESCLAS,GENERIC=NO
MACTYPE  DC    CL8'DISCRETE'       ICHEINTY MACRO TYPE FLAG
GRESCLAS DC    CL8'        '       CLASS NAME USED BY ICHEINTY
GL       DC    XL3'000000'         PADDING FOR REG LOADS
PROFILE  DS    AL1                 ENTRY LENGTH FIELD
EN       DC    XL8'0000000000000000'  GENERAL RESOURCE NAME
GETCNT   ICHEACTN  FIELD=ACLCNT,MF=L  RETREIVE # OF AUTHORIZED USERS
GETOWNR  ICHEACTN  FIELD=OWNER,MF=L  RETREIVE PROFILE OWNER
GETUACC  ICHEACTN  FIELD=UACC,MF=L  RETREIVE UACC
GETUSER  ICHEACTN  FIELD=USERID,MF=L  RETREIVE AUTHORIZED USER
GETUACS  ICHEACTN  FIELD=USERACS,MF=L  RETREIVE ACCESS AUTHORITY
ACLCNT   DC    CL8'ACLCNT  '       # OF AUTHORIZED USERS
OWNER    DC    CL8'OWNER   '       OWNER
UACC     DC    CL8'UACC    '       UACC
USERID   DC    CL8'USERID  '       AUTHORIZED USER-ID OR GROUP
USERACS  DC    CL8'USERACS '       AUTHORIZED USER ACCESS AUTHORITY
DTWORK   DC    D'0'                WORK FIELD FOR DATE CONVERSION  @TEC
DTPARM   DC    AL4(0)                                              @TEC
DTL4     EQU   DTWORK+4,4          4 BYTES FOR EDIT MACRO          @TEC
DTL3     EQU   DTWORK+5,3          3 BYTES FOR EDIT MACRO          @TEC
DTL2     EQU   DTWORK+6,2          2 BYTES FOR EDIT MACRO          @TEC
ISPLINK  DC    A(0)                                                @TEC
ISPNLST4 DC    C'(ORECRD)'                                         @TEC
ISPVLST4 DS    0F                                                  @TEC
ORECRD   DS    0XL34               OUTPUT RECORDS
OGRES    DS    XL8                 GENERAL RESOURCE NAME
         DS    CL1                                                 @TEC
OCLASS   DS    XL8                 RESOURCE CLASS
         DS    CL1                                                 @TEC
OOWNER   DS    XL8                 OWNER
         DS    CL1                                                 @TEC
OUACC    DS    XL1                 UACC
         DS    CL1                                                 @TEC
OUSER    DS    XL8                 AUTHORIZED USER-ID OR GROUP
         DS    CL1                                                 @TEC
OACESS   DS    XL1                 AUTHORIZED USER ACCESS AUTHORITY
         DS    CL46                                                @TEC
         LTORG
WS       DS    0H
WA       DS    0F                  WA ALIGNMENT ON FULLWORD
WL       DS    F                   WORK AREA LENGTH
RBA      DS    CL6                 RBA OF RETURNED ENTRY
         DS    CL2                 RESERVED (BY IBM)
         DS    F                   DUPLICATE DATASET NAME COUNT
         DS    2F                  RESERVED (BY IBM)
DL       DS    F                   LENGTH OF RETURNED DATA
WD       DS    CL32740             32K MAXIMUM RETURNED DATA
ENDWORK  EQU   *                   END OF WA
ACCESS   DSECT
USRACESS DS    XL1
USER$ID  DSECT
USER     DS    CL8
FULLWORD DSECT
PARMADDR DS    F
PARM     DS    CL8
         END
./       ADD   NAME=RACFGRP1
RACFGRP1 START 0
***********************************************************************
* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION FROM ALL      *
* GROUP PROFILES IN A RACF 1.7 DATASET. THE EXTRACTED DATA            *
* IS PUT INTO A FILE WITH RECORDS FORMATTED AS FOLLOWS:               *
*                                                                     *
*           COLUMNS   1-8: GROUP NAME                                 *
*           COLUMNS  9-16: SUPERIOR GROUP                             *
*           COLUMNS 17-24: OWNER                                      *
*           COLUMN     25: UACC                                       *
*           COLUMN     26: NOTERMUACC                                 *
*           COLUMNS 27-28: NUMBER OF SUBGROUPS                        *
*           COLUMNS 29-36: SUBGROUP NAME                              *
*                                                                     *
* NOTE: THIS PROGRAM MUST BE LINKEDITED INTO AND RUN FROM AN APF      *
*       AUTHORIZED LIBRARY.                                           *
*                                                                     *
* LAST UPDATE: 3/11/88 BY SCOTT WILSON (REMOVED UNNECESSARY MODESETS) *
***********************************************************************
R0       EQU   0                   USED BY SYS. MACROS
R1       EQU   1                   USED BY SYS. MACROS
R2       EQU   2                   1ST BASE REG FOR WORKSPACE
R3       EQU   3                   SUBGROUP COUNT
R4       EQU   4                   1ST MULTIPLIER REG
R5       EQU   5                   2ND MULTIPLIER REG
R6       EQU   6                   DUMMY REG FOR MVCL;
*                                      3RD BASE REG FOR WORKSPACE
R7       EQU   7                   ZERO INDICATOR FOR MVCL
R8       EQU   8                   ADDR OF WA
R9       EQU   9                   LENGTH OF WA
R10      EQU   10                  ADDR OF END OF WA
R11      EQU   11                  LENGTH OF GROUP NAME
R12      EQU   12                  PROGRAM BASE REG
R13      EQU   13                  ADDR OF MVS SA
R14      EQU   14                  RETURN ADDR
R15      EQU   15                  COMPLETION CODE
*
***********************************************************************
* START OF JOB HOUSEKEEPING                                           *
***********************************************************************
         STM   R14,R12,12(R13)     STORE MVS REGS
         BALR  R12,0               ESTABLISH R12 AS BASE REG
         USING *,R12               IDENTIFY BASE REG
         ST    R13,SA+4            STORE ADD. OF MVS REG. SA
         LA    R13,SA              LOAD ADDR OF PGM. SA
         LOAD  EP=ISPLINK                                          @TEC
         LTR   R15,R15             ISPLINK AVAILABLE?              @TEC
         ST    R0,ISPLINK          SAVE A(ISPLINK) FOR LATER       @TEC
         ISPCALL ('VDEFINE',ISPNLST4,                              @TECX
               ISPVLST4,'CHAR ',80)                                @TEC
         ISPCALL ('TBCREATE','RACGTAB',                            @TECX
               ' ',ISPNLST4,'NOWRITE',                             @TECX
               'REPLACE')                                          @TEC
         LA    R0,1                                                @TEC
         SVC   232                                                 @TEC
*
***********************************************************************
* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *
***********************************************************************
WORKADDR EQU   *
         LA    R2,WS               LOAD ADDR OF WORKSPACE
         USING WS,R2               SET ADDRESSABILITY TO WORKSPACE
*
***********************************************************************
* SET THE LENGTH OF THE WA AND PROFILE ENTRY                          *
***********************************************************************
INITPROF MVI   PROFILE,X'01'       INITIAL PROFILE LENGTH = 1 BYTE
         MVC   WL(4),=XL4'00008000'  PUT WA LENGTH WHERE...
*                                         ...RACF CAN FIND IT
         MVI   EN,X'00'            CLEAR GROUP PROFILE NAME...
         MVC   EN+1(7),EN          ...IN TWO STEPS
***********************************************************************
* GET A RACF PROFILE                                                  *
***********************************************************************
CLERWORK EQU   *
         L     R7,=XL4'00000000'   INDICATE CLEAR FUNCTION TO MVCL
         LA    R8,WD               LOAD ADDR OF WORK AREA
         L     R9,=XL4'00007FE4'   LOAD LENGTH OF DATA IN WA
         MVCL  R8,R6               ZERO OUT THE WORK AREA
         ICHEINTY  NEXTC,ENTRY=PROFILE,WKAREA=WA,TYPE='GRP',           +
               ACTIONS=(GETSGRP,GETOWNR,GETUACC,GETTUACC,GET#SUBG,     +
               GETSUBG)
CHECKRC  LTR   R15,R15             CHECK RETURN CODE FROM ICHEINTY
         BNZ   WRAPUP              IF NON-ZERO, EXIT THIS PROGRAM
*
***********************************************************************
* WRITE THE RETURNED DATA                                             *
***********************************************************************
         MVI   ORECRD,C' '         PROPOGATE BLANK SPACE TO...
         MVC   ORECRD+1(79),ORECRD  ...OUTPUT RECORD IN TWO STEPS  @TEC
         LA    R10,WD              LOAD ADDR OF RETURNED DATA
         A     R10,DATALNTH        ADD LENGTH OF RETURNED DATA
         L     R11,GRP1LNTH        LOAD LENGTH OF GROUP-ID
         S     R11,=XL4'00000001'  SUBTRACT 1 FROM GROUP-ID LENGTH
         EX    R11,MOVEGRP1        ALTER LENGTH OF GROUP-ID FOR MVC
         B     MOVEOWNR            DON'T EXECUTE MVC TWICE
MOVEGRP1 MVC   OGROUP(0),EN        MOVE GROUP INTO OUTPUT FIELD
MOVEOWNR MVC   OOWNER(8),WS+40     MOVE OWNER INTO OUTPUT FIELD
         MVC   OSGRP(8),WS+30      MOVE SUPGROUP TO OUTPUT FIELD
         MVC   OUACC(1),WS+50      MOVE UACC TO OUTPUT FIELD
         MVC   OTUACC(1),WS+53     MOVE TERMUACC TO OUTPUT FIELD
         MVC   OSGRPS(2),WS+56     MOVE # SUBGROUPS TO OUTPUT FLD.
         LA    R5,WS+50                                            @TEC
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'A'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'C'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'U'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'R'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'E'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'N'                                      @TEC
         B     ENDUACC                                             @TEC
ENDUACC  DS    0H                                                  @TEC
         MVC   OTUACC(1),WS+53     MOVE TERMUACC TO OPUT FIELD
         LA    R5,WS+53                                            @TEC
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'A'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'C'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'U'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'R'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'E'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'N'                                     @TEC
         B     ENDTUACC                                            @TEC
ENDTUACC DS    0H                                                  @TEC
         SR    R0,R0                                               @TEC
         ICM   R0,3,WS+56          # OF USERS                      @TEC
         CVD   R0,DTWORK                                           @TEC
         EDIT  OSGRPS,DTL2,ZZZ9                                    @TEC
         LH    R3,WS+56            LOAD NUMBER OF SUBGROUPS
         SLL   R3,16               TRUNCATE SIGN FIELD
         SRL   R3,16               RIGHT JUSTIFY NUMBER OF SUBG'S
         LA    R6,WS+60            LOAD ADDR OF FIRST SUBGROUP
         USING SUBG$ID,R6          SET ADDRESSABILITY TO SUBGROUP
         SR    R4,R4               CLEAR OUT REG 4
         C     R3,=XL4'00000000'   ARE THERE SUBGROUPS?
         BNZ   MOVESUBG            IF SO, MOVE IT TO OUTPUT AREA
         L     R3,=XL4'00000001'   IF NOT, WRITE INDICATIVE...
         MVC   OSUBG(8),=CL8'* NONE *'  ...RECORD CONTAINING THIS INFO
         B     WRITEIT             WRITE THE OUTPUT RECORD
NEXTSUBG EQU   *
MOVESUBG EQU   *
         MVC   OSUBG(8),0(R6)      MOVE SUBGROUP TO OUTPUT FIELD
WRITEIT  EQU   *
         ISPCALL ('TBADD','RACGTAB')                               @TEC
         A     R6,=XL4'00000008'   POINT TO NEXT SUBGROUP
         USING SUBG$ID,R6          SET ADDRESSABILITY TO SUBGROUP
         S     R3,=XL4'00000001'   DECREMENT NUMBER OF SUBGROUPS
         C     R3,=XL4'00000000'   ANY MORE REMAINING SUBGROUPS?
         BZ    CLERWORK            IF NOT, GET NEXT PROFILE
         B     NEXTSUBG            GET THE NEXT SUBGROUP
*
***********************************************************************
* END OF JOB HOUSEKEEPING                                             *
***********************************************************************
WRAPUP   EQU   *
         ISPCALL ('TBTOP','RACGTAB')
REDISPL  DS    0H                                                  @TEC
         ISPCALL ('TBDISPL','RACGTAB',                                 X
               'RACGPNL1')
         C     R15,=F'8'           END KEY PRESSED?                @TEC
         BNE   REDISPL                                             @TEC
         SR    R0,R0                                               @TEC
         SVC   232                                                 @TEC
         DROP  R2,R6               RELEASE BASE REGS
         L     R13,SA+4            LOAD RETURN ADDR (MVS R13)
         L     R14,12(R13)         LOAD MVS R14 VALUE
         LM    R0,R12,20(R13)      RESTORE MVS REGS 0-12
         SR    R15,R15             GUARANTEE ZERO RETURN CODE
         BR    R14                 RETURN TO MVS
***********************************************************************
* STORAGE USED BY PROGRAM                                             *
***********************************************************************
SA       DS    18F                 SAVE AREA FOR SYSTEM REGS
*
GRP1LNTH DC    XL3'000000'         PADDING FOR REG LOADS
PROFILE  DS    AL1                 ENTRY LENGTH FIELD
EN       DS    XL8                 GROUP NAME
*
GETSGRP  ICHEACTN  FIELD=SUPGROUP,MF=L  RETREIVE NUMBER OF SUBGROUPS
GETOWNR  ICHEACTN  FIELD=AUTHOR,MF=L  RETREIVE PROFILE OWNER
GETUACC  ICHEACTN  FIELD=UACC,MF=L  RETREIVE UACC
GETTUACC ICHEACTN  FIELD=NOTRMUAC,MF=L  RETREIVE NOTERMUACC
GET#SUBG ICHEACTN  FIELD=SUBGRPCT,MF=L  RETREIVE NUMBER OF SUBGROUPS
GETSUBG  ICHEACTN  FIELD=SUBGRPNM,MF=L  RETREIVE SUBGROUP NAME
*
SUPGROUP DC    CL8'SUPGROUP'       NUMBER OF SUBGROUPS
OWNER    DC    CL8'AUTHOR  '       OWNER
UACC     DC    CL8'UACC    '       UACC
NOTRMUAC DC    CL8'NOTRMUAC'       NOTERMUACC
SUBGRPCT DC    CL8'SUBGRPCT'       NUMBER OF SUBGROUPS
SUBGRPNM DC    CL8'SUBGRPNM'       NAME OF SUBGROUP
*                  *
DTWORK   DC    D'0'                WORK FIELD FOR DATE CONVERSION  @TEC
DTPARM   DC    AL4(0)                                              @TEC
DTL4     EQU   DTWORK+4,4          4 BYTES FOR EDIT MACRO          @TEC
DTL3     EQU   DTWORK+5,3          3 BYTES FOR EDIT MACRO          @TEC
DTL2     EQU   DTWORK+6,2          2 BYTES FOR EDIT MACRO          @TEC
ISPLINK  DC    A(0)                                                @TEC
ISPNLST4 DC    C'(ORECRD)'                                         @TEC
ISPVLST4 DS    0F                                                  @TEC
ORECRD   DS    0XL36               OUTPUT RECORDS
         DS    CL1                                                 @TEC
OGROUP   DS    XL8                 GROUP NAME
         DS    CL1                                                 @TEC
OSGRP    DS    XL8                 SUPERIOR GROUP NAME
         DS    CL1                                                 @TEC
OOWNER   DS    XL8                 OWNER
         DS    CL1                                                 @TEC
OUACC    DS    XL1                 UACC
         DS    CL1                                                 @TEC
OTUACC   DS    XL1                 NOTERMUACC
         DS    CL1                                                 @TEC
OSGRPS   DS    CL4                 NUMBER OF SUBGROUPS
         DS    CL1                                                 @TEC
OSUBG    DS    XL8                 SUBGROUP
         DS    CL44                                                @TEC
         LTORG ,
*
WS       DS    0F
WA       DS    0F                  WA ALIGNMENT ON FULLWORD
WL       DS    F                   WORK AREA LENGTH
RBA      DS    CL6                 RBA OF RETURNED ENTRY
         DS    XL2                 RESERVED (BY IBM)
DUPCOUNT DS    F                   DUPLICATE DATASET NAME COUNT
         DS    2F                  RESERVED (BY IBM)
DATALNTH DS    F                   LENGTH OF RETURNED DATA
WD       DS    CL32740             32K MAXIMUM RETURNED DATA
ENDWORK  EQU   *                   END OF WA
*
SUBG$ID  DSECT
SUBGROUP DS    CL8
*
         END
./       ADD   NAME=RACFGRP2
RACFGRP2 START 0
*-------------------------------------------------------------*    @TEC
* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION FROM  *    @TEC
* GROUP PROFILES IN A RACF 1.9 DATASET. THE EXTRACTED DATA    *    @TEC
* IS DISPLAYED IN AN ISPF TABLE.                              *    @TEC
* BASED ON A BATCH PROGRAM FROM FILE 080 OF CBT TAPE.         *    @TEC
*-------------------------------------------------------------*    @TEC
R0       EQU   0                   USED BY SYS. MACROS
R1       EQU   1                   USED BY SYS. MACROS
R2       EQU   2                   1ST BASE REGISTER FOR WORKSPACE
R3       EQU   3                   USER COUNT
R4       EQU   4                   1ST MULTIPLIER REGISTER
R5       EQU   5                   2ND MULTIPLIER REGISTER
R6       EQU   6                   DUMMY REGISTER FOR MVCL;
*                                      3RD BASE REGISTER FOR WORKSPACE
R7       EQU   7                   ZERO INDICATOR FOR MVCL
R8       EQU   8                   ADDRESS OF WORKAREA
R9       EQU   9                   LENGTH OF WORKAREA
R10      EQU   10                  ADDRESS OF END OF WORKAREA
R11      EQU   11                  LENGTH OF GROUP NAME
R12      EQU   12                  PROGRAM BASE REGISTER
R13      EQU   13                  ADDRESS OF MVS SAVEAREA
R14      EQU   14                  RETURN ADDRESS
R15      EQU   15                  COMPLETION CODE
***********************************************************************
* START OF JOB HOUSEKEEPING                                           *
***********************************************************************
         STM   R14,R12,12(R13)     STORE MVS REGISTERS
         BALR  R12,0               ESTABLISH R12 AS BASE REGISTER
         USING *,R12               IDENTIFY BASE REGISTER
         ST    R13,SA+4            STORE ADD. OF MVS REG. SA
         LA    R13,SA              LOAD ADDRESS OF PGM. SA
         LOAD  EP=ISPLINK                                          @TEC
         LTR   R15,R15             ISPLINK AVAILABLE?              @TEC
         ST    R0,ISPLINK          SAVE A(ISPLINK) FOR LATER       @TEC
         ISPCALL ('VDEFINE',ISPNLST4,                              @TECX
               ISPVLST4,'CHAR ',80)                                @TEC
         ISPCALL ('TBCREATE','RACGTAB',                            @TECX
               ' ',ISPNLST4,'NOWRITE',                             @TECX
               'REPLACE')                                          @TEC
         LA    R0,1                                                @TEC
         SVC   232                                                 @TEC
***********************************************************************
* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *
***********************************************************************
WORKADDR EQU   *
         LA    R2,WS               LOAD ADDRESS OF WORKSPACE
         USING WS,R2               SET ADDRESSABILITY TO WORKSPACE
***********************************************************************
* SET THE LENGTH OF THE WORKAREA AND PROFILE ENTRY                    *
***********************************************************************
INITPROF MVI   PROFILE,X'01'       INITIAL PROFILE LENGTH = 1 BYTE
         MVC   WL(4),=XL4'00008000'  PUT WORKAREA LENGTH WHERE...
*                                         ...RACF CAN FIND IT
         MVI   EN,X'00'            CLEAR GROUP PROFILE NAME...
         MVC   EN+1(7),EN          ...IN TWO STEPS
***********************************************************************
* GET A RACF PROFILE                                                  *
***********************************************************************
CLERWORK EQU   *
         L     R7,=XL4'00000000'   INDICATE CLEAR FUNCTION TO MVCL
         LA    R8,WD               LOAD ADDRESS OF WORK AREA
         L     R9,=XL4'00007FE4'   LOAD LENGTH OF DATA IN WORKAREA
         MVCL  R8,R6               ZERO OUT THE WORK AREA
         ICHEINTY  NEXTC,ENTRY=PROFILE,WKAREA=WORKAREA,TYPE='GRP',     +
               ACTIONS=(GETSGRP,GETOWNR,GETUACC,GETTUACC,GETACL,       +
               GETUSER,GETACCES)
CHECKRC  LTR   R15,R15             CHECK RETURN CODE FROM ICHEINTY
         BNZ   WRAPUP              IF NON-ZERO, EXIT THIS PROGRAM
***********************************************************************
* WRITE THE RETURNED DATA                                             *
***********************************************************************
         MVI   ORECRD,C' '         PROPOGATE BLANK SPACE TO...
         MVC   ORECRD+1(79),ORECRD  ...OPUT RECORD IN TWO STEPS
         LA    R10,WD              LOAD ADDRESS OF RETURNED DATA
         A     R10,DATALNTH        ADD LENGTH OF RETURNED DATA
         L     R11,GRP2LNTH        LOAD LENGTH OF GROUP-ID
         S     R11,=XL4'00000001'  SUBTRACT 1 FROM GROUP-ID LENGTH
         EX    R11,MOVEGRP2        ALTER LENGTH OF GROUP-ID FOR MVC
         B     MOVEOWNR            DON'T EXECUTE MVC TWICE
MOVEGRP2 MVC   OGROUP(0),EN        MOVE GROUP INTO OPUT FIELD
MOVEOWNR MVC   OOWNER(8),WS+40     MOVE OWNER INTO OPUT FIELD
         MVC   OSGRP(8),WS+30      MOVE SUPGROUP TO OPUT FIELD
         MVC   OUACC(1),WS+50      MOVE UACC TO OPUT FIELD
         LA    R5,WS+50                                            @TEC
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'A'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'C'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'U'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'R'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'E'                                      @TEC
         B     ENDUACC                                             @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OUACC(1),=C'N'                                      @TEC
         B     ENDUACC                                             @TEC
ENDUACC  DS    0H                                                  @TEC
         MVC   OTUACC(1),WS+53     MOVE TERMUACC TO OPUT FIELD
         LA    R5,WS+53                                            @TEC
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'A'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'C'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'U'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'R'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'08'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'E'                                     @TEC
         B     ENDTUACC                                            @TEC
         TM    0(R5),X'01'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OTUACC(1),=C'N'                                     @TEC
         B     ENDTUACC                                            @TEC
ENDTUACC DS    0H                                                  @TEC
         SR    R0,R0                                               @TEC
         ICM   R0,3,WS+56          # OF USERS                      @TEC
         CVD   R0,DTWORK                                           @TEC
         EDIT  OUSERS,DTL2,ZZZ9                                    @TEC
         LH    R3,WS+56            LOAD NUMBER OF USERS
         SLL   R3,16               TRUNCATE SIGN FIELD
         SRL   R3,16               RIGHT JUSTIFY NUMBER OF USER'S
         LA    R6,WS+60            LOAD ADDRESS OF FIRST USER
         USING USER$ID,R6          SET ADDRESSABILITY TO USER
         SR    R4,R4               CLEAR OUT REGISTER 4
         C     R3,=XL4'00000000'   ARE THERE USERS?
         BNZ   FINDACES            IF SO, FIND ACCESS LEVEL
         L     R3,=XL4'00000001'   IF NOT, WRITE INDICATIVE...
         MVC   OUSER(8),=CL8'* NONE *'  ...RECORD CONTAINING THIS INFO
         B     WRITEIT             WRITE THE OPUT RECORD
FINDACES LR    R5,R3               LOAD # OF USERIDS
         M     R4,=XL4'00000008'   MULTIPLY BY USER-ID LENGTH (8)
         A     R5,=XL4'00000002'   ADD OFFSET FOR ACCESS PREFIX
         AR    R5,R6               ADD ADDRESS OF FIRST USER-ID
         USING ACCESS,R5           SET ADDRESSABILITY TO ACCESS
NEXTUSER EQU   *
MOVEUSER EQU   *
         MVC   OUSER(8),0(R6)      MOVE USER TO OPUT FIELD
         MVC   OACESS(1),0(R5)     MOVE USER'S GROUP AUTHORITY
         TM    0(R5),X'80'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(4),=C'JOIN'                                  @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'40'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(4),=C'CONN'                                  @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'20'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(4),=C'CRE '                                  @TEC
         B     WRITEIT                                             @TEC
         TM    0(R5),X'10'                                         @TEC
         BZ    *+14                                                @TEC
         MVC   OACESS(4),=C'USE '                                  @TEC
         B     WRITEIT                                             @TEC
         MVC   OACESS(4),=C'NONE'                                  @TEC
WRITEIT  EQU   *
         ISPCALL ('TBADD','RACGTAB')                               @TEC
         A     R6,=XL4'00000008'   POINT TO NEXT USER
         USING USER$ID,R6          SET ADDRESSABILITY TO USER
         S     R3,=XL4'00000001'   DECREMENT NUMBER OF USERS
         C     R3,=XL4'00000000'   ANY MORE REMAINING USERS?
         BZ    CLERWORK            IF NOT, GET NEXT PROFILE
         B     NEXTUSER            GET THE NEXT USER
***********************************************************************
* END OF JOB HOUSEKEEPING                                             *
***********************************************************************
WRAPUP   EQU   *
         ISPCALL ('TBTOP','RACGTAB')
REDISPL  DS    0H                                                  @TEC
         ISPCALL ('TBDISPL','RACGTAB',                                 X
               'RACGPNL2')
         C     R15,=F'8'           END KEY PRESSED?                @TEC
         BNE   REDISPL                                             @TEC
         SR    R0,R0                                               @TEC
         SVC   232                                                 @TEC
         DROP  R2,R5,R6            RELEASE BASE REGISTERS
         L     R13,SA+4            LOAD RETURN ADDRESS (MVS R13)
         L     R14,12(R13)         LOAD MVS R14 VALUE
         LM    R0,R12,20(R13)      RESTORE MVS REGISTERS 0-12
         SR    R15,R15             GUARANTEE ZERO RETURN CODE
         BR    R14                 RETURN TO MVS
***********************************************************************
* STORAGE USED BY PROGRAM                                             *
***********************************************************************
SA       DS    18F                 SAVE AREA FOR SYSTEM REGISTERS
GRP2LNTH DC    XL3'000000'         PADDING FOR REGISTER LOADS
PROFILE  DS    AL1                 ENTRY LENGTH FIELD
EN       DS    XL8                 GROUP NAME
GETSGRP  ICHEACTN  FIELD=SUPGROUP,MF=L  RETREIVE NUMBER OF USERS
GETOWNR  ICHEACTN  FIELD=AUTHOR,MF=L  RETREIVE PROFILE OWNER
GETUACC  ICHEACTN  FIELD=UACC,MF=L  RETREIVE UACC
GETTUACC ICHEACTN  FIELD=NOTRMUAC,MF=L  RETREIVE NOTERMUACC
GETACL   ICHEACTN  FIELD=ACLCNT,MF=L  RETREIVE NUMBER OF USER-IDS
GETUSER  ICHEACTN  FIELD=USERID,MF=L  RETREIVE USER NAME
GETACCES ICHEACTN  FIELD=USERACS,MF=L  RETREIVE USER'S GROUP AUTHORITY
SUPGROUP DC    CL8'SUPGROUP'       NUMBER OF USERS
OWNER    DC    CL8'AUTHOR  '       OWNER
UACC     DC    CL8'UACC    '       UACC
NOTRMUAC DC    CL8'NOTRMUAC'       NOTERMUACC
ACLCNT   DC    CL8'ACLCNT  '       NUMBER OF USER-IDS
USERID   DC    CL8'USERID  '       CONNECTED USER-ID
USERACS  DC    CL8'USERACS '       GROUP AUTHORITY OF USER
DTWORK   DC    D'0'                WORK FIELD FOR DATE CONVERSION  @TEC
DTPARM   DC    AL4(0)                                              @TEC
DTL4     EQU   DTWORK+4,4          4 BYTES FOR EDIT MACRO          @TEC
DTL3     EQU   DTWORK+5,3          3 BYTES FOR EDIT MACRO          @TEC
DTL2     EQU   DTWORK+6,2          2 BYTES FOR EDIT MACRO          @TEC
ISPLINK  DC    A(0)                                                @TEC
ISPNLST4 DC    C'(ORECRD)'                                         @TEC
ISPVLST4 DS    0F                                                  @TEC
ORECRD   DS    0XL37               OPUT RECORDS
OGROUP   DS    XL8                 GROUP NAME
         DS    XL1                                                 @TEC
OSGRP    DS    XL8                 SUPERIOR GROUP
         DS    XL1                                                 @TEC
OOWNER   DS    XL8                 OWNER
         DS    XL1                                                 @TEC
OUACC    DS    XL1                 UACC
         DS    XL1                                                 @TEC
OTUACC   DS    XL1                 NOTERMUACC
         DS    XL1                                                 @TEC
OUSERS   DS    CL4                 NUMBER OF USERS                 @TEC
         DS    XL1                                                 @TEC
OUSER    DS    XL8                 USER-ID
         DS    XL1                                                 @TEC
OACESS   DS    XL4                 GROUP AUTHORITY
         DS    XL43                                                @TEC
***********************************************************************
* OPUT FILE DEFINITION                                                *
***********************************************************************
GRP2FILE DCB   DDNAME=GRP2FILE,MACRF=PM,DSORG=PS
         LTORG
WS       DS    0F
WORKAREA DS    0F                  WORKAREA ALIGNMENT ON FULLWORD
WL       DS    F                   WORK AREA LENGTH
RBA      DS    CL6                 RBA OF RETURNED ENTRY
         DS    XL2                 RESERVED (BY IBM)
DUPCOUNT DS    F                   DUPLICATE DATASET NAME COUNT
         DS    2F                  RESERVED (BY IBM)
DATALNTH DS    F                   LENGTH OF RETURNED DATA
WD       DS    CL32740             32K MAXIMUM RETURNED DATA
ENDWORK  EQU   *                   END OF WORKAREA
ACCESS   DSECT
USRACESS DS    XL1
USER$ID  DSECT
USER     DS    CL8
         END
./       ADD   NAME=RACFUSER
         PRINT NOGEN                                               @TEC
*-------------------------------------------------------------*    @TEC
* EXTRACT RACF USERIDS AND DISPLAY THEN IN AN ISPF TABLE.     *    @TEC
* BASED ON A PROGRAM FROM CBT V325 FILE 80.                   *    @TEC
*-------------------------------------------------------------*    @TEC
RACFUSER START 0
R0       EQU   0                   USED BY SYSTEM MACROS
R1       EQU   1                   USED BY SYSTEM MACROS
R2       EQU   2                   UNUSED
R3       EQU   3                   UNUSED
R4       EQU   4                   UNUSED
R5       EQU   5                   UNUSED
R6       EQU   6                   UNUSED
R7       EQU   7                   UNUSED
R8       EQU   8                   UNUSED
R9       EQU   9                   UNUSED
R10      EQU   10                  LENGTH OF USER-ID
R11      EQU   11                  LENGTH OF WA
R12      EQU   12                  PROGRAM BASE REGISTER
R13      EQU   13                  ADDR OF MVS SAVEAREA
R14      EQU   14                  RETURN ADDR
R15      EQU   15                  COMPLETION CODE
*
***********************************************************************
* START OF JOB HOUSEKEEPING                                           *
***********************************************************************
         STM   R14,R12,12(R13)     STORE MVS REGISTERS
         BALR  R12,0               ESTABLISH R12 AS BASE REGISTER
         USING *,R12               IDENTIFY BASE REGISTER
         ST    R13,SAVEAREA+4      STORE ADD. OF MVS REG. SAVEAREA
         LA    R13,SAVEAREA        LOAD ADDR OF PGM. SAVEAREA
         LOAD  EP=ISPLINK
         LTR   R15,R15             ISPLINK AVAILABLE?
         ST    R0,ISPLINK          SAVE A(ISPLINK) FOR LATER
         ISPCALL ('VDEFINE',ISPNLST4,                                  X
               ISPVLST4,'CHAR ',80)
         ISPCALL ('TBCREATE','RACUTAB',                                X
               ' ',ISPNLST4,'NOWRITE',                                 X
               'REPLACE')
*
***********************************************************************
* CLEAR OUT THE WA BY FILLING IT WITH BINARY ZEROES                   *
***********************************************************************
         XC    WA,WA               ZERO OUT WA
*
***********************************************************************
* SET THE LENGTH OF THE WA AND PROFILE ENTRY                          *
***********************************************************************
         MVI   PROFILE,X'01'       INITIAL PROFILE LENGTH = 1 BYTE
         LA    R11,ENDWORK-WA      CALCULATE WA LENGTH
         ST    R11,WRKLNGTH        PLACE WA LENGTH WHERE...
         LA    R0,1                                                @TEC
         SVC   232                                                 @TEC
*                                      ...RACF CAN FIND IT
***********************************************************************
* GET A RACF PROFILE                                                  *
***********************************************************************
FINDUSER EQU   *
         MVI   WD,X'00'            PROPOGATE HEX ZEROES TO...
         MVC   WD+1(254),WD        ...CLEAR WORK SPACE FIELDS...
         MVC   WD+256(86),WD       ...IN TWO STEPS
         ICHEINTY  NEXT,ENTRY=PROFILE,WKAREA=WA,MF=I,TYPE='USR',       +
               ACTIONS=(GETNAME,GETOWNR,GETDFLT,GETRVOK,GETSPEC,       +
               GETOPER,GETAUDT,GETUAUD,GETDATE,GETTIME,GETPCDT,        +
               GETPINT,GETDATA)
         LTR   R15,R15             CHECK RETRUN CODE FROM ICHEINTY
         BNZ   WRAPUP              IF NON-ZERO, EXIT THIS PROGRAM
*
***********************************************************************
* WRITE THE RETURNED DATA                                             *
***********************************************************************
         MVI   ORECRD,C' '         PROPOGATE BLANK SPACE TO...
         MVC   ORECRD+1(79),ORECRD  ...OUTPUT RECORD IN TWO STEPS
         L     R10,USRLNGTH        LOAD LENGTH OF USER-ID
         S     R10,=XL4'00000001'  SUBTRACT 1 FROM USER-ID LENGTH
         EX    R10,MOVEID          ALTER LENGTH OF USER-ID FOR MVC
         B     MOVENAME            DON'T EXECUTE MVC TWICE
MOVEID   MVC   OUSER(0),ENTRYNAM   MOVE USERID INTO OUTPUT FIELD
MOVENAME MVC   ONAME(20),WD+4      MOVE NAME INTO OUTPUT FIELD
         MVC   OOWNER(8),WD+26     MOVE OWNER INTO OUTPUT FIELD
         MVC   ODFLT(8),WD+36      MOVE DEFAULT GRP TO OUTPUT FIELD
         TM    WD+46,X'80'                                         @TEC
         BZ    *+10                                                @TEC
         MVC   OREVOK(1),=C'R'     MOVE REVOKE FLAG TO OUTPUT FIELD
         TM    WD+49,X'80'                                         @TEC
         BZ    *+10                                                @TEC
         MVC   OSPEC(1),=C'S'      MOVE SPECIAL FLAG TO OUT. FIELD
         TM    WD+52,X'80'                                         @TEC
         BZ    *+10                                                @TEC
         MVC   OOPER(1),=C'O'      MOVE OPERATION FLAG TO OUT. FLD.
         TM    WD+55,X'80'                                         @TEC
         BZ    *+10                                                @TEC
         MVC   OAUDIT(1),=C'A'     MOVE AUDITOR FLAG TO OUTPUT FLD.
         TM    WD+58,X'80'                                         @TEC
         BZ    *+10                                                @TEC
         MVC   OUAUDT(1),=C'U'     MOVE UAUDIT FLAG TO OUTPUT FIELD
         SR    R0,R0                                               @TEC
         ICM   R0,7,WD+61                                          @TEC
         C     R0,=X'00FFFFFF'     ??                              @TEC
         BNE   *+6                                                 @TEC
         SR    R0,R0                                               @TEC
         XC    DTWORK,DTWORK       CLEAR DOUBLE WORD
         ST    R0,DTWORK+4         STORE FOR DATE CONVERSION
         LA    R1,DTWORK           SETUP ADDR
         ST    R1,DTPARM           OF PACKED FIELD
         LA    R1,DTPARM           IN PARMLIST
         L     R15,=V(XDATEDIT)    ADDR OF DATE CONVERT ROUTINE
         BALR  R14,R15             CONVERT DATE
         MVC   OLDATE,DTWORK       MOVE FORMATTED CREATE DATE
         SR    R0,R0                                               @TEC
         ICM   R0,7,WD+72                                          @TEC
         C     R0,=X'00FFFFFF'     ??                              @TEC
         BNE   *+6                                                 @TEC
         SR    R0,R0                                               @TEC
         XC    DTWORK,DTWORK       CLEAR DOUBLE WORD
         ST    R0,DTWORK+4         STORE FOR DATE CONVERSION
         LA    R1,DTWORK           SETUP ADDR
         ST    R1,DTPARM           OF PACKED FIELD
         LA    R1,DTPARM           IN PARMLIST
         L     R15,=V(XDATEDIT)    ADDR OF DATE CONVERT ROUTINE
         BALR  R14,R15             CONVERT DATE
         MVC   OPDATE,DTWORK       MOVE FORMATTED CREATE DATE
         SR    R0,R0                                               @TEC
         IC    R0,WD+77            PASSWORD INTERVAL               @TEC
         CVD   R0,DTWORK                                           @TEC
         EDIT  OPINT,DTL2,ZZ                                       @TEC
WRITEIT  EQU   *
         ISPCALL ('TBADD','RACUTAB')
         B     FINDUSER            FIND THE NEXT PROFILE
*
***********************************************************************
* END OF JOB HOUSEKEEPING                                             *
***********************************************************************
WRAPUP   EQU   *
         ISPCALL ('TBTOP','RACUTAB')
REDISPL  DS    0H                                                  @TEC
         ISPCALL ('TBDISPL','RACUTAB',                                 X
               'RACUPANL')
         C     R15,=F'8'           END KEY PRESSED                 @TEC
         BNE   REDISPL             NO.                             @TEC
         SR    R0,R0                                               @TEC
         SVC   232                                                 @TEC
         L     R13,SAVEAREA+4      LOAD RETURN ADDR (MVS R13)
         L     R14,12(R13)         LOAD MVS R14 VALUE
         LM    R0,R12,20(R13)      RESTORE MVS REGISTERS 0-12
         SR    R15,R15             GUARANTEE ZERO RETURN CODE
         BR    R14                 RETURN TO MVS
***********************************************************************
* STORAGE USED BY PROGRAM                                             *
***********************************************************************
SAVEAREA DS    18F                 SAVE AREA FOR SYSTEM REGISTERS
*
         DS    0D
DTWORK   DC    D'0'                WORK FIELD FOR DATE CONVERSION
DTPARM   DC    AL4(0)
DTL4     EQU   DTWORK+4,4          4 BYTES FOR EDIT MACRO
DTL3     EQU   DTWORK+5,3          3 BYTES FOR EDIT MACRO
DTL2     EQU   DTWORK+6,2          2 BYTES FOR EDIT MACRO
USRLNGTH DS    XL3'000000'         PADDING FOR REGISTER LOADS
PROFILE  DS    AL1                 ENTRY LENGTH FIELD
ENTRYNAM DS    XL8'0000000000000000'  USER-ID
*
GETNAME  ICHEACTN  FIELD=PGMRNAME,MF=L  RETREIVE USER NAME
GETOWNR  ICHEACTN  FIELD=AUTHOR,MF=L  RETREIVE PROFILE OWNER
GETDFLT  ICHEACTN  FIELD=DFLTGRP,MF=L  RETREIVE DEFAULT GROUP
GETRVOK  ICHEACTN  FIELD=FLAG4,MF=L  RETREIVE FLAG 4 (REVOKED)
GETSPEC  ICHEACTN  FIELD=FLAG2,MF=L  RETREIVE FLAG 2 (SPECIAL)
GETOPER  ICHEACTN  FIELD=FLAG3,MF=L  RETREIVE FLAG 3 (OPERATIONS)
GETAUDT  ICHEACTN  FIELD=FLAG6,MF=L  RETREIVE FLAG 6 (AUDITOR)
GETUAUD  ICHEACTN  FIELD=UAUDIT,MF=L  RETREIVE USER AUDIT
GETDATE  ICHEACTN  FIELD=LJDATE,MF=L  RETREIVE LAST SIGNON DATE
GETTIME  ICHEACTN  FIELD=LJTIME,MF=L  RETREIVE LAST SIGNON TIME
GETPCDT  ICHEACTN  FIELD=PASSDATE,MF=L  RETREIVE PASSWORD CHANGE DATE
GETPINT  ICHEACTN  FIELD=PASSINT,MF=L  RETREIVE PASSWORD INTERVAL
GETDATA  ICHEACTN  FIELD=INSTDATA,MF=L  RETREIVE USER DATA
*
PGMRNAME DS    CL8'PGMRNAME'       PROGRAMMER NAME FIELD DATA
AUTHOR   DS    CL8'AUTHOR  '       OWNER
DFLTGRP  DS    CL8'DFLTGRP '       DEFAULT GROUP
FLAG4    DS    CL8'FLAG4   '       REVOKED USER-ID
FLAG2    DS    CL8'FLAG2   '       SPECIAL USER
FLAG3    DS    CL8'FLAG3   '       OPERATIONS USER
FLAG6    DS    CL8'FLAG6   '       AUDITOR
UAUDIT   DS    CL8'UAUDIT  '       USER AUDIT
LJDATE   DS    CL8'LJDATE  '       LAST SIGNON DATE
LJTIME   DS    CL8'LJTIME  '       LIST SIGNON TIME
PASSDATE DS    CL8'PASSDATE'       PASSWORD CHANGE DATE
PASSINT  DS    CL8'PASSINT '       PASSWORD INTERVAL
INSTDATA DS    CL8'INSTDATA'       INSTALLATION DATA FIELD DATA
ISPLINK  DC    A(0)                                                @TEC
*                  *
WA       DS    0F                  WA ALIGNMENT ON FULLWORD
WRKLNGTH DS    F                   WORK AREA LENGTH
RBA      DS    CL6                 RBA OF RETURNED ENTRY
         DS    CL2                 RESERVED (BY IBM)
         DS    F                   DUPLICATE DATASET NAME COUNT
         DS    2F                  RESERVED (BY IBM)
         DS    CL2                 LENGTH OF RETURNED DATA
WD       DS    CL341               RETURNED DATA
ENDWORK  EQU   *                   END OF WA
*
ISPNLST4 DC    C'(ORECRD)'
ISPVLST4 DS    0F
ORECRD   DS    0CL80               OUTPUT RECORDS
OUSER    DS    XL8                 USER-ID
         DS    XL1                                                 @TEC
ONAME    DS    XL20                USER NAME
         DS    XL1                                                 @TEC
OOWNER   DS    XL8                 OWNER
         DS    XL1                                                 @TEC
ODFLT    DS    XL8                 DEFAULT GROUP
         DS    XL1                                                 @TEC
OREVOK   DS    XL1                 REVOKED
OSPEC    DS    XL1                 SPECIAL
OOPER    DS    XL1                 OPERATIONS
OAUDIT   DS    XL1                 AUDITOR
OUAUDT   DS    XL1                 USER AUDIT
         DS    XL1                                                 @TEC
OLDATE   DS    XL8                 LAST SIGNON DATE
         DS    XL1                                                 @TEC
OPDATE   DS    XL8                 LAST PASSWORD CHANGE DATE
         DS    XL2                                                 @TEC
OPINT    DS    XL2                 PASSWORD CHANGE INTERVAL
         DS    XL1                                                 @TEC
*
***********************************************************************
* OUTPUT FILE DEFINITION                                              *
***********************************************************************
*
         LTORG
*
         END
XDATEDIT CSECT
RBASE    EQU   12                  BASE REGISTER FOR CODING
         SPACE
RDSECT   EQU   11                  BASE REG FOR ARGUMENT/RESULT
RPARMD   EQU   1                   PARAMETER LIST POINTER
RARGSAVE EQU   2                   TO SAVE ORIGINAL PACKED ARGUMENT
RMONTH   EQU   3
RDAY     EQU   4                   RDAY AND RYEAR ARE AN EVEN/ODD
RYEAR    EQU   5                   PAIR FOR DIVISION
RWORK    EQU   6
RLIST    EQU   7
         SPACE 6
* ENTER HERE.  SAVE GENERAL REGISTERS AND SET UP BASE REGISTERS.
         SPACE
         SAVE  (14,12),,*
         SPACE
         BALR  RBASE,0
         USING *,RBASE
         L     RDSECT,0(RPARMD)    LOAD ARGUMENT ADDR
         USING DWORD,RDSECT
         EJECT
* CONVERT YEAR AND DAY TO BINARY, AND SEPARATE BY DIVISION.
         SPACE
         MVI   DWORD,X'00'         CLEAR HIGH DECIMAL DIGITS
         MVC   DWORD+1(4),DWORD    IN ARG TO ZEROS
         OI    DWORD+7,X'0F'       FORCE PLUS SIGN
         L     RARGSAVE,DWORD+4    SAVE ARGUMENT FOR 'BADDATE'
         SPACE
         CVB   RYEAR,DWORD         CONVERT YYDDD TO BINARY
         SR    RDAY,RDAY           CLEAR HIGH-ORDER DIVIDEND
         D     RDAY,F1000          QUOTIENT=YEAR; REMAINDER=DAY
         SPACE
* CHECK FOR LEAP YEAR, AND LOAD RLIST WITH BASE ADDR OF APPROPRIATE
* LIST OF MONTH SIZES.
         SPACE
DAYOK    DS    0H
         LA    RLIST,STDLIST       POINT RLIST TO STANDARD MONTHS
         LTR   RWORK,RYEAR         LOAD BINARY YEAR NUMBER
         BZ    NOTLEAP             BR IF TURN OF CENTURY
         N     RWORK,=F'3'         TEST LOW TWO BITS
         BC    4,NOTLEAP           BR IF NON-ZERO
         LA    RLIST,LPYLIST       POINT RLIST TO LEAP-YEAR MONTHS
NOTLEAP  DS    0H
         SPACE
* TEST DAY NUMBER AGAINST ZERO AND THE UPPER LIMIT DETERMINED BY
* THE YEAR NUMBER.
         SPACE
         LTR   RDAY,RDAY           TEST FOR ZERO
         BZ    BADDATE             BR IF SO
         CH    RDAY,0(0,RLIST)     TEST FOR UPPER LIMIT
         BH    BADDATE             BR IF TOO LARGE
         SPACE
* REDUCE JULIAN DAY TO DAY-OF-MONTH, ACCUMULATING MONTH NUMBER.
         SPACE
         LA    RMONTH,1            INITIAL MONTH NUMBER
         SR    RWORK,RWORK
DAYLOOP  IC    RWORK,1(RMONTH,RLIST)  LENGTH OF MONTH INTO RWORK
         CR    RDAY,RWORK          TEST IF DAY IN THIS MONTH
         BNH   DAYDONE             BR IF DAY LESS THAN MONTH SIZE
         SR    RDAY,RWORK          REDUCE DAY BY LENGTH OF MONTH
         LA    RMONTH,1(RMONTH)    INCREMENT MONTH
         B     DAYLOOP
DAYDONE  DS    0H
         SPACE
* COMBINE MONTH, DAY, AND YEAR IN BINARY IN ONE REGISTER, MULTIPLYING
* EACH BY A FACTOR TO PLACE IT PROPERLY IN THE DECIMAL RESULT.
* THE TRICK IS THAT  1000(1000(MONTH)+DAY)+YEAR  GIVES  MM0DD0YY  WHEN
* CONVERTED TO DECIMAL.  AFTER UNPACKING, THE ZEROS ARE REPLACED BY
* SLASHES.
         SPACE
         MH    RMONTH,H1000
         AR    RMONTH,RDAY
         MH    RMONTH,H1000
         AR    RMONTH,RYEAR
         CVD   RMONTH,DWORD
         MVC   DWORD(5),DWORD+3    MOVE OVER FOR UNPACKING
         UNPK  DWORD(8),DWORD(5)   CONVERT TO ALPHA
         OI    DWORD+7,X'F0'       COVER UP SIGN
         MVI   DWORD+2,C'/'        INSERT SLASHES
         MVI   DWORD+5,C'/'
         SR    15,15               SET NORMAL RETURN CODE OF 0
         SPACE
EXITD    RETURN  (14,12),T,RC=(15)  RETURN TO CALLER
         SPACE 2
* FOR ARGUMENTS WHOSE DAY NUMBER IS ZERO OR TOO LARGE, RETURN IN
* 'DWORD' THE EDITED VALUE  C' YY.DDD ' AND SET A RETURN CODE OF 4.
         SPACE
BADDATE  ST    RARGSAVE,DWORD      RESTORE ORIGINAL PACKED ARGUMENT
         UNPK  DWORD+2(5),DWORD+1(3)  UNPACK INTO ALPHA
         MVC   DWORD+1(2),DWORD+2  SHIFT YEAR 1 LEFT
         MVI   DWORD,C' '          APPLY COSMETICS
         MVI   DWORD+3,C'.'
         MVI   DWORD+7,C' '
         LA    15,4                SET RETURN CODE
         B     EXITD
         EJECT
* LISTS OF MONTH SIZES FOR STANDARD AND LEAP YEARS:
         SPACE
         SPACE
STDLIST  DC    H'365'              DAY LIMIT FOR STANDARD YEARS
         DC    AL1(31)
         DC    AL1(28)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         SPACE
LPYLIST  DC    H'366'              DAY LIMIT FOR LEAP YEARS
         DC    AL1(31)
         DC    AL1(29)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         SPACE
F1000    DC    F'1000'
H1000    EQU   F1000+2
         LTORG
DUMMY    DSECT
DWORD    DS    1D
         END
./       ADD   NAME=TSSPACE
         PRINT NOGEN
TSSPACE  TITLE 'TSO CP TO PRINT DASD SPACE INFO  04DEC91 - LANE.'
********************************************************************
*                  T-S-D-S-P-A-C-E
*      PROGRAM TO PRINTOUT AVAILABLE SPACE ON A DISK DRIVE
*      USES LSPACE (SVC 78)  FUNCTION
*      ALSO DETERMINES IF PACK HAS INDEXED VTOC
*      PRODUCED FROM DISASEMBLY OF ORIGINAL OBJECT MODULE
*      W F HARTMAN MAY 1981
*            CODE FROM CBTV224   - CLARK
*      RE-WORKED:
*        RENT; %FREE SPACE; UNIT NAME; NO. USERS;ALT PATH, PATH MASK
*        ADDED XA SUPPORT
********************************************************************
*-------------------------------------------------------------*    @TEC
* UPDATED 04/12/91. USE DEVTYPE MACRO WITH UCBLIST OPERAND TO *    @TEC
*  OBTAIN DEVICE GEOMETRY. COPY RESULTS TO INTERNAL TABLE.    *    @TEC
*  SHOULD SUPPORT 3390'S. JIM LANE ... TORONTO HYDRO          *    @TEC
*-------------------------------------------------------------*    @TEC
         MACRO
&N       @ED   &OU,&WK
&N       MVC   &OU,OTMASK          MOVE MASK
         L     R0,&WK              GET DATA
         CVD   R0,WD               MAKE PACKED
         ED    &OU,WD+4            EDIT IT
         MEND
TSSPACE  @ENT  R12,(0,DSAEND-DSA,C),DSA=YES
         XC    WKCLRS(WKCLRL),WKCLRS  CLEAR COUNTERS
         LA    R2,PPL              GET ADDRESS OF PPL
         USING PPL,R2              TELL ASSEMBLER
         MVC   UPT,4(R1)           COPY  UPT
         MVC   ECT,12(R1)          COPY  ECT
         LA    R0,ECB              GET ADDRESS OF NEW ECB
         ST    R0,ECBP             SAVE ECB ADDRESS
         XC    ECB,ECB             ZERO ECB
         MVC   PCL,ADDPCL          GET ADD OF PCL
         LA    R0,ANS              GET ADD OF ANSWER WORD
         ST    R0,ANSW             PUT IN PPL
         MVC   COMBUF,0(R1)        PUT ADD OF CBUFF IN PPL
         XC    WK,WK               ZERO USER WORK AREA
         LA    R1,PPL              GET ADD OF PPL
         CALLTSSR  EP=IKJPARS      GO PARSE IT
         DROP  R2
         LTR   R15,R15             TEST  RETURN CODE
         BNZ   ERROR               ERROR GO TELL USER
*-------------------------------------------------------------*    @TEC
* SAY HELLO                                                   *    @TEC
*-------------------------------------------------------------*    @TEC
         LA    R0,HDR1E-HDR1S      L' MSG
         LA    R1,HDR1S
         TPUT  (R1),(R0)           TPUT MESSAGE
         LA    R0,HDR2E-HDR2S      L' MSG
         LA    R1,HDR2S
         TPUT  (R1),(R0)           TPUT MESSAGE
         MVI   UNIT,C' '           UNIT=C' '=NO HITS
         L     R6,ANS              GET ADDRESS OF ANSWER AREA
*-------------------------------------------------------------*    @TEC
* PROCESS PATH INFO                                           *    @TEC
*-------------------------------------------------------------*    @TEC
         USING IKJPARMD,R6
         CLC   =H'1',MINPATHK      FIRST KEYWORD SPEC'D
         BNE   SKPPATH             NO-SKIP
         L     R14,MINPATHI        DATA ADR
         LH    R15,MINPATHI+4      L'
         BCTR  R15,0               L' -1
MINPATHX PACK  WD,0(*-*,R14)       EXECUTED
         EX    R15,MINPATHX        """"""
         CVB   R0,WD
         ST    R0,MINPATHD         SAVE MIN PATHS REQD
SKPPATH  DS    0H
         MVC   STCYLS(LDEVTAB),MDEVTAB COPY MODEL DEVICE TABLE.    @TEC
*-------------------------------------------------------------*    @TEC
* PROCESS VOLSERS                                             *    @TEC
*-------------------------------------------------------------*    @TEC
         LA    R6,VOL              PDL DSECT ENTRY
         DROP  R6
         TM    6(R6),X'80'         IS IT REQUST FOR SPEC VOL
         BO    GETVOL              YES GO PROCESS
         SR    R6,R6               NO-ALL VOLUMES
         B     SKPVOL              SKIP
GETVOL   DS    0H
         MVI   VOLSER,C' '
         MVC   VOLSER+1(5),VOLSER
         L     R7,0(R6)            GET ADDRESS OF VOLUME
         LH    R8,4(R6)            GET LENGTH OF VOLUME
         BCTR  R8,R0               MACHINE LENGTH
         LA    R9,VOLSER           ADDRESS OF MESSAGE
         EX    R8,EXMVC            MOVE VOLUME IN
SKPVOL   DS    0H
         TITLE 'SCAN UCBS'
*-------------------------------------------------------------*    @TEC
* FORMAT IOS SCAN PARM LIST                                   *    @TEC
*-------------------------------------------------------------*    @TEC
LOCUCB   DS    0H
         XC    DSXAWORK,DSXAWORK   ZERO OUT UCB WORKAREA
         LA    R1,DSXAWORK         ADDR OF UCB WORKAREA
         ST    R1,DSXAWA           STORE IT IN PARM LIST
         LA    R1,DSXACLAS         PTR TO DEV CLAS TO SEARCH
         ST    R1,DSXADEVT         STORE IN PARM LIST
         MVI   DSXACLAS,UCB3DACC   ONLY SEARCH DASD
         LA    R1,DSXAUCBP         AREA TO STORE UCB ADDR
         ST    R1,DSXAUCB          IN PARM LIST
         OI    DSXAUCB,X'80'       SIGNIFY END OF PARMLIST
*-------------------------------------------------------------*    @TEC
* SCAN FOR A UCB                                              *    @TEC
*-------------------------------------------------------------*    @TEC
UCBLOOP  DS    0H
LOCUCB1  DS    0H
         L     R15,CVTPTR
         MVC   DSADCB,CVTDCB-CVT(R15)  SAVE OP SYS TYPE
         ICM   R15,15,CVTUCBSC-CVT(R15)  CVTUCBSC VALID?(IOSVSUCB)
         BZ    LOCUCBE0            ZERO=OLD MVS
*-------------------------------------------------------------*    @TEC
*   >>>>>----UCB SCAN SERVICE FOR MVS/SP1.2 AND ABOVE:-----<  *    @TEC
*  PARM:(100BYTE-WORK,1BYTE-DEV-CLASS,1WORD-UCB-PTR)          *    @TEC
* RETURN CODES: R15 = 00-UCB RETURNED; 04-NO MORE UCBS        *    @TEC
*-------------------------------------------------------------*    @TEC
         LA    R1,DSXALIST         PTR TO PARM LIST
         BALR  R14,R15             BRANCH TO IT
         B     LOCUCBXX            COMMON ENTRY POINT
*-------------------------------------------------------------*    @TEC
*  >>>>>>----- EMULATION UCB SCAN SERVICE FOR OLD MVS------<< *    @TEC
*-------------------------------------------------------------*    @TEC
LOCUCBE0 DS    0H
         ICM   R14,B'1111',DSXAEUCB  BR IF THIS IS
         BNZ   LOCUCBE1            SECOND OR LATER CALL
         L     R14,CVTPTR          ADDR-UCB VECTOR TABLE
         L     R14,X'24'(R14)      *XA  CVTILK2-CVT(R14)
         ST    R14,DSXAEILK        SAVE(TO CHECK FOR DUPS)
LOCUCBE1 DS    0H
         SR    R1,R1               ZERO UCB ADDR PTR
LOCUCBE3 DS    0H
         LA    R14,2(,R14)         NEXT PTR(1ST UCB SKIPPED)
         ICM   R1,B'0011',0(R14)   ADDR OF UCB
         BZ    LOCUCBE3            BR IF NULL ENTRY
         LA    R15,4               SHOW NO HITS (CC UNCHANGED)
         BO    LOCUCBEX            BR IF END
         LA    R15,0               SHOW HITS (CC UNCHANGED)
LOCUCBE5 DS    0H
         CLC   DSXACLAS,UCBTBYT3-UCBCMSEG(R1)  BR IF THIS UCB
         BNE   LOCUCBE3            IS NOT DESIRED CLASS
         ST    R1,DSXAUCB          PROVIDE ADDR OF UCB
         ST    R14,DSXAEUCB        REMEMBER WHERE TO RESUME
*-------------------------------------------------------------*    @TEC
* CHECK FOR DUPLICATE CHANNEL PATH                            *    @TEC
*-------------------------------------------------------------*    @TEC
         L     R14,DSXAEILK        ADDR OF FIRST UCB PTR
LOCUCBE7 DS    0H
         CL    R14,DSXAEUCB        EXIT IF NO DUPLICATE
         BE    LOCUCBEX            CHANNEL PATH FOUND(R15=0)
         LA    R14,2(,R14)         ADDR OF NEXT PTR
         CLC   0(2,R14),DSXAUCB+2  CONTINUE LOOP IF THIS IS NOT
         BNE   LOCUCBE7            DUPLICATE CHANNEL PATH
         L     R14,DSXAEUCB        SETUP TO RESUME SCAN
         B     LOCUCBE3            AND GO RE-ENTER LOOP
LOCUCBEX DS    0H
*-------------------------------------------------------------*    @TEC
* UCB SCAN ROUTINE - COMMON RETURN POINT                      *    @TEC
*-------------------------------------------------------------*    @TEC
LOCUCBXX DS    0H
         LTR   R15,R15             GOT ONE?
         BNZ   UCBEND              NO
         L     R8,DSXAUCBP         GET ADR OF  UCB FROM PTR
         USING UCBCMSEG,R8
         CLI   UCBID,UCBSTND       IS ADDRESS VALID
         BNE   UCBSKP              NO
         CLI   UCBDVCLS,UCB3DACC   IS IT DASDI
         BNE   UCBSKP              NO   SKIP
         TM    UCBSTAT,UCBONLI     IS IT ONLINE
         BNO   UCBSKP              NO  SKIP
         TM    UCBSTAT,UCBCHGS     IS IT CHANGING STATUS
         BO    UCBSKP              YES SKIP
         LTR   R6,R6               TEST IF ONLY ONE VOLUME WANTED
         BZ    SNGVOL              NO GO PROCESS
         LH    R0,4(R6)            GET L' VOLSER
         L     R14,0(R6)           GET VOLSER(FAMILY)
         LA    R15,UCBVOLI         OP2
         CLC   =C'ALL ',0(R14)     ALL SPECIFIED
         BE    SNGVOL              YES-PROCESS IT
CLCVOL   DS    0H                  CHECK VOLSER
         CLI   0(R14),C' '         SHORT VOLSER
         BE    SNGVOL              YES-MATCH
         CLC   0(1,R14),0(R15)     COMPARE VOLSER
         BNE   UCBSKP              DONT WANT
         LA    R14,1(R14)          NEXT
         LA    R15,1(R15)          "
         BCT   R0,CLCVOL           LOOP
         BNE   UCBSKP              DO NOT WANT
SNGVOL   DS    0H
         TITLE 'PROCESS THIS ONLINE DASD UCB ----------------'
         MVI   OUTMESS,C' '        CLEAR OUTPUT AREA
         MVC   OUTMESS+1(OUTMESSL-1),OUTMESS
         MVC   UNIT,UCBNAME        XXX UBIT ADR
         MVC   VOLSER,UCBVOLI      VOLSER
*-------------------------------------------------------------*    @TEC
* SHOW NUMBER OF USERS                                        *    @TEC
*-------------------------------------------------------------*    @TEC
         XR    R1,R1
         IC    R1,UCBUSER          CONCURRENT USERS(+26X)
         TM    DSADCB,DSADCBXA     MVS/XA?
         BZ    *+8                 NO
         LH    R1,UCBUSER          2BYTES IN XA
         CVD   R1,WD               PACKED "   "
         UNPK  OUTMUSER,WD         DISPLAY "  "
         OI    OUTMUSER+L'OUTMUSER-1,C'0'  FIX SIGN
*-------------------------------------------------------------*    @TEC
* SEE IF ALT PATH                                             *    @TEC
*-------------------------------------------------------------*    @TEC
         TM    DSADCB,DSADCBXA     MVS/XA?
         BZ    NOTXA               NO
         LH    R15,=H'-24'         UCBCHPS (8CHIPIDS)
         AR    R15,R8              GET ADDR OF UCBSHPS
         UNPK  OUTMALTC(9),0(5,R15)  HANDLE 1ST 4 PATHS
         MVI   OUTMALTC+8,C' '     FIX UNPK DAMAGE
         TR    OUTMALTC(8),HEXTR-X'F0'  MAKE DISPLAY ABLE
         LH    R15,=H'-28'         UCBLPM 1=AVAIL
         AR    R15,R8              GET ADDR "
         IC    R15,0(R15)          GET PATH BYTE
         B     DOPATHXA            CONTINUE
NOTXA    DS    0H                  SP3 (&BELOW)
         TM    UCBFL5,X'01'        *XA UCBALTPH  ALTPATH?
         BZ    SKPALT              NO
         L     R15,CVTPTR          CVT(+10)
         SR    R14,R14
         IC    R14,UCBCMSEG+X'A'   *XA UCBLCI LCH INDEX(+A)
         SLL   R14,5               LCH DISPL
         LA    R15,0(R14,R15)      LCH ENTRY
         L     R14,LCHTCH-LCH(R15)  TCH PATH TABLE(+10)
         LA    R14,2(R14)          PROPER SLOT
         MVC   OUTMALTC,0(R14)     CHANNEL NUMBER
         TR    OUTMALTC,HEXTR
*-------------------------------------------------------------*    @TEC
* SHOW PATH DATA                                              *    @TEC
*-------------------------------------------------------------*    @TEC
         IC    R15,UCBCMSEG+X'8'   *XAUCBCHM
DOPATHXA DS    0H                  XA ENTRY (HANDLE 1ST 4
         SRL   R15,4               ISOLATE NIBBLE
         N     R15,=F'15'          "
*-------------------------------------------------------------*    @TEC
* SHOW NUMBER OF ONLINE PATHS                                 *    @TEC
*-------------------------------------------------------------*    @TEC
         XR    R14,R14
         IC    R14,PTHONTAB(R15)   XLATE TO ONLINE PATHS
         TM    DSADCB,DSADCBXA     XA
         BZ    DOPATHTR            NO-CONTINUE
         SH    R14,=H'4'
*-------------------------------------------------------------*    @TEC
* A PATH BIT IN NON-XA: 0=ONLINE, 1=OFFLINE                   *    @TEC
* A PATH BIT IN XA:     0=OFFLINE, 1=ONLINE                   *    @TEC
*-------------------------------------------------------------*    @TEC
         LPR   R14,R14             FLIP FOR XA LOGIC
DOPATHTR DS    0H
         STC   R14,OUTMPTHN        SAVE # PATHS
         TR    OUTMPTHN,HEXTR
*-------------------------------------------------------------*    @TEC
* SEE IF MINPATHS SPECIFIED                                   *    @TEC
*-------------------------------------------------------------*    @TEC
         OC    MINPATHD,MINPATHD   NON-ZERO
         BZ    SKPMINCK            NO-SKIP CHECK
         C     R14,MINPATHD        PATHS AT OR ABOVE MIN
         BNL   UCBSKP              YES-SKIP EM
SKPMINCK DS    0H                  CONTINUE
*-------------------------------------------------------------*    @TEC
* SHOW PATH MASK                                              *    @TEC
*-------------------------------------------------------------*    @TEC
         SLL   R15,2               *4=0,4,8,...
         LA    R14,PATHMASK(R15)   CONVER PATH TO BITS
         MVC   OUTMPTHM,0(R14)     NIBBLE IN BITS C'XXXX'
SKPALT   DS    0H                  SKIP IF NO ALTS
*-------------------------------------------------------------*    @TEC
* LSPACE - TO GET VOLUME FREE SPACE                           *    @TEC
*-------------------------------------------------------------*    @TEC
         LA    R0,UCBCMSEG         UCB ADR
         LA    R1,WORKA
         SVC   78                  ISSUE LSPACE
         MVC   OUTMESSV,VOLSER     VOLSER
         MVC   OUTMESSU,UNIT       ADDR
*-------------------------------------------------------------*    @TEC
* TEST FOR INDEXED VTOC                                       *    @TEC
*-------------------------------------------------------------*    @TEC
         CVAFTST UCB=(R8)          TEST  VTOC
         B     BRTBL(R15)          TEST  RETURN CODE
BRTBL    B     RC0
         B     RC4
         B     RC8                 INDEXED
         B     RC12
         B     RC16
RC8      MVC   INFLAG,=C'I '
RC4      DS    0H
RC0      DS    0H
*-------------------------------------------------------------*    @TEC
* GET DEVICE CAPACITY INFO                                    *    @TEC
*-------------------------------------------------------------*    @TEC
         MVC   DEVPLIST(LDEVTYPE),MDEVTYPE                         @TEC
         LA    R1,DEVPLIST         ADDR OF PLIST                   @TEC
         ST    R8,UCBLIST          SAVE UCB ADDRESS                @TEC
         LA    R14,DEVWORDS                                        @TEC
         DEVTYPE ,((14),24),                                       @TECX
               UCBLIST=(UCBLIST,1),                                @TECX
               MF=(E,(1))                                          @TEC
         LA    R15,STCYLS          GET DEVICE TABLE
DEVLOC   DS    0H
         CLC   UCBUNTYP,(STCYLS-STCYLS)(R15)
         BE    DEVGOT
         CLI   (STCYLS-STCYLS)(R15),X'FF'
         BE    DEVGOT
         LA    R15,(STCYLS1-STCYLS)(R15)  NEXT
         B     DEVLOC              LOOP
DEVGOT   DS    0H
         SR    R0,R0                                               @TEC
         ICM   R0,3,DEVWORDS+8                                     @TEC
         STH   R0,(STCYLMAX-STCYLS)(R15)  #CYLS/VOL                @TEC
         SR    R14,R14                                             @TEC
         ICM   R14,3,DEVWORDS+10                                   @TEC
         STH   R14,(STCYLTRK-STCYLS)(R15)  #TRKS/CYL               @TEC
         SRDA  R0,32                                               @TEC
         MR    R0,R14                                              @TEC
         ST    R1,(STCYLTTK-STCYLS)(R15)  #TRKS/VOL                @TEC
         MVC   OUTMESSD,(STCYLNAM-STCYLS)(R15)  DEV. NAME
         L     R14,(STCYLTTK-STCYLS)(R15)  #TRKS/VOL
         A     R14,WKTOTTTK        TOT TRKS SEEN
         ST    R14,WKTOTTTK
         LH    R14,(STCYLMAX-STCYLS)(R15)  #CYLS/VOL
         A     R14,WKTOTCYL        TOT CYLS SEEN
         ST    R14,WKTOTCYL
         PACK  WD,WA#CYL           # FREE CYL
         CVB   R0,WD               "
         LR    R14,R0
         A     R14,WKFRECYL        TOT FREE CYLS
         ST    R14,WKFRECYL
         MH    R0,(STCYLTRK-STCYLS)(R15)  #TRKS/CYL
         PACK  WD,WA#TRK           # FREE TRKS
         CVB   R14,WD              "
         AR    R0,R14              TOTAL FREE TRKS ON VOL
         LR    R14,R0
         A     R14,WKFRETRK        TOT FREE TRKS - ALLVOL
         ST    R14,WKFRETRK
         SRDA  R0,32               SHIFT TO R1
         M     R0,=F'100'          FOR % CALC
         A     R1,=F'50'           "
         L     R14,(STCYLTTK-STCYLS)(R15)
         DR    R0,R14              CALC % FREE
         CVD   R1,WD               ANSWER
         UNPK  OUTMESSP,WD
         OI    OUTMESSP+L'OUTMESSP-1,C'0'  FIX SIGN
         LA    R0,OUTMESSL
         LA    R1,OUTMESS
         TPUT  (R1),(R0)           TPUT MESSAGE
TESTONE  LTR   R6,R6
         B     UCBSKP              TRY MORE VOLSERS GROUP
UCBSKP   DS    0H                  INCREMENT BY 2
         B     UCBLOOP             CONTINUE SEARCHING SVC TABLE
UCBEND   LTR   R6,R6               IS IT ALL
         BZ    DONE                YES
         CLI   UNIT,C' '           WERE ANY VOLSERS FOUND
         BNE   DONE                YES-NO MSG
         MVC   OUTMESS(25),NOVOL
         MVC   OUTMESS+7(6),VOLSER
         LA    R0,25
         LA    R1,OUTMESS          VOL NOT FOUND
         TPUT  (R1),(R0)           TPUT MESSAGE
SECVOL   L     R6,8(R6)
         LA    R6,0(R6)
         LTR   R6,R6               IS THERE A SECOND VOLUME
         BNZ   GETVOL
DONE     IKJRLSA ANS               FREE PARSE AREA
DONE1    DS    0H                  TO FREE
         @ED   OTFRECYL,WKFRECYL
         @ED   OTFRETRK,WKFRETRK
         @ED   OTTOTCYL,WKTOTCYL
         @ED   OTTOTTTK,WKTOTTTK
         LA    R0,HDR3E-HDR3S      L' MSG
         LA    R1,HDR3S
         TPUT  (R1),(R0)           TPUT MESSAGE
         LA    R0,L'OTTOTS         L' MSG
         LA    R1,OTTOTS
         TPUT  (R1),(R0)           TPUT MESSAGE
         @RET  EQ,RC=0
RC12     TPUT  NOVIB,L'NOVIB
         B     TESTONE
RC16     TPUT  NOTDA,L'NOTDA
         B     TESTONE
ERROR    TPUT  ERRMESS,L'ERRMESS   TGET/TPUT
         B     DONE1
EXMVC    MVC   0(0,9),0(7)
MDEVTYPE DEVTYPE UCBLIST=YES,MF=L                                  @TEC
LDEVTYPE EQU   *-MDEVTYPE
ADDPCL   DC    V(PARSEPCL)
         DC    H'0016'
NOVIB    DC    C'VIB NOT INIT'
NOTDA    DC    C'NOT DASDI   '
ERRMESS  DC    C'PARSE FAILED'
VOLMESS  DC    C'VOL VVVVVV '
UNITMESS DC    C'UNIT UUU '
NOVOL    DC    C'VOLUME VVVVVV NOT MOUNTED'
HDR1S    DC    C'SPACE-2.1 IX SPACE=  --F R E E-- / -CONTIG-'
         DC    C' DEV   % NO. -PATH- ALT.PATH'
HDR1E    EQU   *
HDR2S    DC    C'         VTOC      #CYL,#TRK,#EXT/#CYL,#TRK'
         DC    C'     FRE USR #/MASK /CHPIDS '
HDR2E    EQU   *
HDR3S    DC    C' TOTAL-CYL TOTAL-TRK  FREE-CYL  FREE-TRK'
HDR3E    EQU   *
OTMASK   DC    X'40206B2020206B202120'  Z,ZZZ,ZZ9
*-------------------------------------------------------------*    @TEC
* DEVICE CHARACTERISTICS TABLE                                *    @TEC
*-------------------------------------------------------------*    @TEC
MDEVTAB  DS    0H                  TABLE OF DEVICE TYPE TO MAX. CYLS
         DC    X'0900'             DEVICE TYPE
         DC    H'404'              MAX CYLS
         DC    CL4'3330'           EBCDIC NAME
         DC    H'19'               TRACKS PER CYLINDER
         DC    AL4(404*19)         TRACKS PER VOL
         DC    X'0D00',H'0808',CL4'3331',H'19',AL4(0808*19)
         DC    X'0B00',H'0555',CL4'3350',H'30',AL4(0555*30)
         DC    X'0800',H'0200',CL4'2314',H'20',AL4(0200*20)
         DC    X'0A00',H'0696',CL4'3340',H'12',AL4(0696*12)
         DC    X'0C00',H'0959',CL4'3375',H'12',AL4(0959*12)
         DC    X'0E00',AL2(0885*3),CL4'3380',H'15',AL4(0885*15*3)
         DC    X'0F00',AL2(0),CL4'3390',H'15',AL4(0)               @TEC
         DC    X'FFFF',H'9999',CL4'UNKN',H'19',AL4(99*99)
LDEVTAB  EQU   *-MDEVTAB                                           @TEC
HEXTR    DC    C'0123456789ABCDEF'
*                  0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F  - MASK BITS
PTHONTAB DC    AL1(4,3,3,2,3,2,2,1,3,2,2,1,2,1,1,0)  - # ZEROS
PATHMASK DC    C'0000',C'0001',C'0010',C'0011'  0-3 MASK
         DC    C'0100',C'0101',C'0110',C'0111'  4-7 MASK
         DC    C'1000',C'1001',C'1010',C'1011'  8-B MASK
         DC    C'1100',C'1101',C'1110',C'1111'  C-F MASK
PARSEPCL IKJPARM DSECT=IKJPARMD
VOL      IKJIDENT  'VOLUME',UPPERCASE,MAXLNTH=6,FIRST=ALPHANUM,  XXX   X
               OTHER=ALPHANUM,LIST
MINPATHK IKJKEYWD  ,
         IKJNAME 'MINPATHS',SUBFLD=MINPATHS
MINPATHS IKJSUBF
MINPATHI IKJIDENT  'MINPATHS',MAXLNTH=1,                               X
               FIRST=NUMERIC,                                          X
               PROMPT='MINIMUM NUMBER OF PATHS TO DEVICE'
         IKJENDP
*-------------------------------------------------------------*    @TEC
* GETMAINED WORKAREA                                          *    @TEC
*-------------------------------------------------------------*    @TEC
DSA      DSECT
ANS      DS    F
ECB      DS    F
PPL      DS    0F
UPT      DS    F
ECT      DS    F
ECBP     DS    F
PCL      DS    F
ANSW     DS    F
COMBUF   DS    F
DSADCB   DS    X                   COPY OF CVTDCB - OP SYS
DSADCBXA EQU   X'80'               XA OPERATING SYSTEM
WK       DS    F
WKCLRS   EQU   *                   CLEAR AREA AT INIT
MINPATHD DS    F                   MINIMUM NUMBER OF PATHS
WKFRETRK DS    F                   TOT FREE TRKS ON ALL V
WKFRECYL DS    F                   TOT FREE CYLS ON ALL V
WKTOTCYL DS    F                   TOT      CYLS ON ALL V
WKTOTTTK DS    F                   TOT      TRKS ON ALL V
WKCLRL   EQU   *-WKCLRS
WD       DS    D
WLOOKUP  DS    F
*-------------------------------------------------------------*    @TEC
* TOTAL LINE FORMAT                                           *    @TEC
*-------------------------------------------------------------*    @TEC
OTTOTS   DC    C' TOTAL CYL TOTAL TRK  FREE CYL  FREE TRK'
*              C' Z,ZZZ,ZZ9 Z,ZZZ,ZZ9 Z,ZZZ,ZZ9 Z,ZZZ,ZZ9'
OTTOTCYL EQU   OTTOTS+00,10
OTTOTTTK EQU   OTTOTS+10,10
OTFRECYL EQU   OTTOTS+20,10
OTFRETRK EQU   OTTOTS+30,10
*-------------------------------------------------------------*    @TEC
* OUTPUT MESSAGE FORMAT                                       *    @TEC
*-------------------------------------------------------------*    @TEC
OUTMESS  DS    CL79                MESSAGE AREA
         ORG   OUTMESS             RE-MAP
OUTMESSV DS    CL6,C               VOLSER
OUTMESSU DS    CL3,C               UNIT
INFLAG   DS    CL2                 INDEXED VTOC FLAG AREA
WORKA    DS    CL30                AREA FOR LSPACE RETURN
WA#CYL   EQU   WORKA+06,4          FREE CYL
WA#TRK   EQU   WORKA+11,4          FREE TRK
WA#EXT   EQU   WORKA+16,4          EXTENTS
WA#CCYL  EQU   WORKA+21,4          CONTIG. CYL
WA#CTRK  EQU   WORKA+26,4          CONTIG. TRK
         DS    C                   FILLER
OUTMESSD DS    CL4,C               DEV NAME 3380/3350
OUTMESSP DS    CL2,C               %FULL
OUTMUSER DS    CL3,C               UCBUSER-CONC. USERS
OUTMPTHN DS    C,CL1               PATHS ONLINE
OUTMPTHM DS    CL4,CL1             PATH MASK
OUTMALTX DS    CL3,CL6             ALT CHAN(OR CHPIDS IN XA)
OUTMALTC EQU   OUTMALTX+1,1        ALT CHAN(MIDDLE POS.)
OUTMESSF EQU   OUTMESS+L'OUTMESS-*  FILLER (ASM ERR IF TOO LONG)
         DS    (OUTMESSF)X         FILLER (ASM ERR IF TOO LONG)
OUTMESSL EQU   *-OUTMESS
VOLSER   DS    CL6                 VOLSER
UNIT     DS    CL3                 UNIT
*-------------------------------------------------------------*    @TEC
* UCB LOOKUP WORKAREAS.                                       *    @TEC
*-------------------------------------------------------------*    @TEC
DSXALIST DS    0F                  PARMLIST FOR UCB
DSXAWA   DS    F                   %100-BYTE WORK AREA
DSXADEVT DS    F                   %DEV TYPE TO SEARCH
DSXAUCB  DS    F                   %UCB FULL WORD PTR
         DS    0D                  FOLLOWING MUST BE ALIGNED
DSXAWORK DS    CL100               UCB WORK AREA
DSXAEUCB EQU   DSXAWORK+00,04      EMULATION CURR. UCB PTR
DSXAEILK EQU   DSXAWORK+04,04      EMULATION CVTILK2 ADDR
DSXACLAS DS    CL1                 DEVICE CLASS TO SEARCH
DSXAUCBP DS    F                   %UCB
DEVPLIST DEVTYPE UCBLIST=YES,MF=L
DEVWORDS DS    6F                  FEEDBACK FROM DEVTYPE           @TEC
UCBLIST  DS    F                                                   @TEC
STCYLS   DS    0H                  TABLE OF DEVICE TYPE TO MAX. CYLS
         DS    XL2                 DEVICE TYPE                     @TEC
STCYLMAX EQU   *
         DS    H                   MAX CYLS                        @TEC
STCYLNAM EQU   *
         DS    CL4                 EBCDIC NAME                     @TEC
STCYLTRK EQU   *
         DS    H                   TRACKS PER CYLINDER             @TEC
STCYLTTK EQU   *
         DS    AL4                 TRACKS PER VOL                  @TEC
STCYLS1  DS    0H                  FOR SIZE OF ENTRY CALC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
         DS    XL2,H,CL4,H,AL4                                     @TEC
DSAEND   EQU   *                   LENGTH OF WORK
         IEFUCBOB  ,               UCB
         CVT   DSECT=YES           CVT
LCH      DSECT                     LCH
         ORG   LCH+16
LCHTCH   DS    A
CSD      DSECT                     CSD
         ORG   CSD+8
CSDCPUAL DS    XL2
CPU1     EQU   X'40'
CPU2     EQU   X'20'
         END   ,
