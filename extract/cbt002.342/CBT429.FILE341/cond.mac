         MACRO
.*
.* ------------------------------------------------------------------ *
.* COND DETERMINES THE TYPE OF BRANCH INSTRUCTIONS NEEDED FOR THE     *
.* TYPE OF TEST INDICATED IN &TEST.  COND WILL ALSO BUILD THE         *
.* COMPARE INSTRUCTIONS WHEN &TEST CONTAINS ONLY ONE SUBPARAMETER,    *
.* OR, WHEN A 'TM' INSTRUCTION IS INDICATED BY THE TYPE OF RELATIONAL *
.* OPERATOR (E.G. ONES, ZEROS, MIXED, NOT_MIXED, ETC.).               *
.*                                                                    *
.*                                                                    *
.* &TEST CONTAINS THE OPERANDS FOR THE DESIRED TEST                   *
.*                                                                    *
.*                                                                    *
.* &OR_OPCODE CONTAINS MNEMONIC FOR THE TYPE OF BRANCH STATEMENT FOR  *
.*            AN 'OR' CONNECTOR                                       *
.*                                                                    *
.* &IF_OPCODE CONTAINS MNEMONIC FOR THE TYPE OF BRANCH STATEMENT      *
.*                                                                    *
.* &IFEND IS TABLE CONTIANING THE LABEL FOR THE END OF THE 'IF'       *
.*        STATEMENT.                                                  *
.*                                                                    *
.* &TRUE CONTAINS THE LABEL FOR THE BRANCH STATEMENT FOR A TRUE       *
.*       CONDITION IN A COMPOUND 'OR' CONDITION.                      *
.*                                                                    *
.* &IF_OPERAND CONTAINS THE BRANCH MNEMONIC                           *
.*                                                                    *
.* &OR_OPERAND CONTAINS THE BRANCH MNEMONIC FOR THE 'OR' STATEMENT    *
.*                                                                    *
.* &ORFLAG INDICATES WHETHER OR NOT THIS INVOCATION IS FOR AN 'OR'    *
.*         STATEMENT.                                                 *
.*                                                                    *
.* &KCON CONTAINS THE NUMBER OF CHARACTES IN &OPR                     *
.*                                                                    *
.* &IFNO CONTAINS THE SUBSCRIPT FOR THE CURRENT NESTED 'IF' LEVEL     *
.*                                                                    *
.* &N CONTAINS THE NUMBER OF SUBPARAMETERS IN &TEST                   *
.* ------------------------------------------------------------------ *
.*
&NAME    COND  &TEST
         GBLC  &OR_OPCODE
         GBLC  &IF_OPCODE
         GBLC  &IFEND(20)
         GBLC  &TRUE
         GBLC  &IF_OPERAND
         GBLC  &OR_OPERAND
         GBLB  &ORFLAG
         GBLA  &KCON
         GBLA  &IFNO
         LCLA  &N
.*
.* ------------------------------------------------------------------ *
.* THIS SECTION DETERMINES THE NUMBER OF SUBPARAMETERS IN &TEST.      *
.*                                                                    *
.* IF THERE IS ONLY ONE, ONLY THE BRANCH INSTRUCTION IS NEEDED.       *
.* SOME OTHER INSTRUCTION HAS SET THE CONDITION CODE.                 *
.*                                                                    *
.* IF THERE ARE 4 SUBPARAMETERS, THE INVOCATION HAS INCLUDED THE      *
.* MNEMONIC FOR THE COMPARE STATEMENT.  AGAIN, ONLY THE BRANCH        *
.* INSTRUCTION IS NEEDED.                                             *
.*                                                                    *
.* IF THERE ARE LESS THAN 4, THEN THE COMP MACRO IS USED TO DETERMINE *
.* THE TYPE OF COMPARE INSTRUCTION IS NEEDED AND THEN THE BRANCH      *
.* INSTRUCTION IS BUILT.                                              *
.* ------------------------------------------------------------------ *
.*
&N              SETA  N'&TEST
                AIF   (&N EQ 1).NOCOMP
                AIF   (&N LT 4).COMP
                AIF   (&N EQ 4).SPEC
         MNOTE 6,'''&TEST'' CONTAINS INVALID NUMBER OF SUBPARAMETERS'
                MEXIT
.*
.* ------------------------------------------------------------------ *
.* AT THIS POINT, ONLY THE BRANCH INSTRUCTION NEEDS TO BE GENERATED.  *
.* &IF_OPERAND WILL CONTAIN THE LABLE FOR THE DETECTED FALSE          *
.* CONDITION.                                                         *
.*                                                                    *
.* IF &KCON IS ZERO, THIS IS EITHER THE LAST STATEMENT IN A COMPOUND  *
.* CONDTION OR JUST A PLAIN CONDITION.  IF IT IS A SIMPLE CONDITION,  *
.* THEN THE BRANCH INSTRUCTION WILL BRANCH FOR THE OPPOSITE, E.G.     *
.* AN 'EQ' WILL GENERATE A 'BNE', A 'LT' WILL GENERATE A 'BNL', ETC.  *
.* IF THIS IS THE LAST OF AN 'AND' COMPOUND CONDITION, IT WILL STILL  *
.* GENERATE AN OPPOSITE BRANCH FOR A FALSE CONDITION.  FOR, ALL OF    *
.* THE PREVIOUS STATEMENTS HAVE BEEN TRUE.  IF THIS IS THE LAST       *
.* STATEMENT IN AN 'OR' COMPOUND, IT WILL AGAIN GENERATE AN OPPOSITE  *
.* BRANCH FOR A FALSE CONDITION.  BECAUSE, IN ORDER FOR THIS          *
.* CONDITION TO BE EVALUATED, ALL OF THE PREVIOUS CONDITIONS WOULD    *
.* HAVE TO BEEN FALSE.                                                *
.*                                                                    *
.* IF &KCON IS NOT ZERO, THEN &ORFLAG IS CHECKED TO DETERMINE WHETHER *
.* OR NOT THE PREVIOUS CONDITION WAS PART OF AN 'OR' COMPOUND         *
.* CONDITION.  IF ON, THEN THE 'OR' TYPE PROCESSING IS INVOKED.  IF   *
.* OFF, THEN THE 'AND' COMPOUND CONDITION GENERATES THE SAME TYPE OF  *
.* BRANCH INSTRUCTION AS THE SIMPLE CONDITION.                        *
.* ------------------------------------------------------------------ *
.*
.NOCOMP         ANOP
                AIF   (&KCON EQ 0).BYPASS_OR1
                AIF   (&ORFLAG).ORSETS1
.*
.BYPASS_OR1     ANOP
&IF_OPERAND     SETC  '&IFEND(&IFNO)'
                AIF   ('&TEST(1)' EQ 'FOUND').IF1_FOUND
                AIF   ('&TEST(1)' EQ 'NOT_FOUND').IF1_NOTFOUND
                AIF   ('&TEST(1)' EQ 'EQUAL').IF1_EQ
                AIF   ('&TEST(1)' EQ 'NOT_EQUAL').IF1_NE
                AIF   ('&TEST(1)' EQ 'LOW').IF1_LOW
                AIF   ('&TEST(1)' EQ 'HIGH').IF1_HIGH
                AIF   ('&TEST(1)' EQ 'NOT_LOW').IF1_NOTLOW
                AIF   ('&TEST(1)' EQ 'NOT_HIGH').IF1_NOTHIGH
                AIF   ('&TEST(1)' EQ 'ONES').IF1_ONES
                AIF   ('&TEST(1)' EQ 'MIXED').IF1_MIXED
                AIF   ('&TEST(1)' EQ 'ZEROS').IF1_ZEROS
                AIF   ('&TEST(1)' EQ 'NOT_ONES').IF1_NOTONES
                AIF   ('&TEST(1)' EQ 'NOT_MIXED').IF1_NOTMIXED
                AIF   ('&TEST(1)' EQ 'NOT_ZEROS').IF1_NOTZEROS
&IF_OPCODE      SETC  'BC'
&IF_OPERAND     SETC  '15-&TEST(1).,&IFEND(&IFNO)'
                MEXIT
.*
.IF1_EQ         ANOP
&IF_OPCODE      SETC  'BNE'
                MEXIT
.*
.IF1_NE         ANOP
&IF_OPCODE      SETC  'BE'
                MEXIT
.*
.IF1_LOW        ANOP
&IF_OPCODE      SETC  'BNL'
                MEXIT
.*
.IF1_NOTLOW     ANOP
&IF_OPCODE      SETC  'BL'
                MEXIT
.*
.IF1_HIGH       ANOP
&IF_OPCODE      SETC  'BNH'
                MEXIT
.*
.IF1_NOTHIGH    ANOP
&IF_OPCODE      SETC  'BH'
                MEXIT
.*
.IF1_FOUND      ANOP
&IF_OPCODE      SETC  'BNF'
                MEXIT
.*
.IF1_NOTFOUND   ANOP
&IF_OPCODE      SETC  'BF'
                MEXIT
.*
.IF1_ONES       ANOP
&IF_OPCODE      SETC  'BNO'
                MEXIT
.*
.IF1_MIXED      ANOP
&IF_OPCODE      SETC  'BNM'
                MEXIT
.*
.IF1_ZEROS      ANOP
&IF_OPCODE      SETC  'BNZ'
                MEXIT
.*
.IF1_NOTONES    ANOP
&IF_OPCODE      SETC  'BO'
                MEXIT
.*
.IF1_NOTMIXED   ANOP
&IF_OPCODE      SETC  'BM'
                MEXIT
.*
.IF1_NOTZEROS   ANOP
&IF_OPCODE      SETC  'BZ'
                MEXIT
.*
.* ------------------------------------------------------------------ *
.* THIS SECTION GENERATES THE BRANCH INSTRUCTIONS FOR THE 'OR'        *
.* COMPOUND STATEMENT WHEN &TEST HAS ONLY ONE SUBPARAMETER, I.E. THE  *
.* CONDITION CODE HAS ALREADY BEEN SET.  &OR_OPERAND WILL CONTAIN     *
.* THE LABEL FOR THE DETECTED 'TRUE' CONDITIONS.                      *
.*                                                                    *
.* UNLIKE THE SIMPLE AND 'AND' COMPOUND CONDITIONS, THE 'OR'          *
.* CONDITION BRANCHES TO THE NE', A 'LT' WILL GENERATE A 'BNL', ETC.  *
.* IF THIS IS THE LAST OF AN 'AND' COMPOUND CONDITION, IT WILL STILL  *
.* GENERATE AN OPPOSITE BRANCH FOR A FALSE CONDITION.  FOR, ALL OF    *
.* THE PREVIOUS STATEMENTS HAVE BEEN TRUE.  IF THIS IS THE LAST       *
.* STATEMENT IN AN 'OR' COMPOUND, IT WILL AGAIN GENERATE AN OPPOSITE  *
.* BRANCH FOR A FALSE CONDITION.  BECAUSE, IN ORDER FOR THIS          *
.* CONDITION TO BE EVALUATED, ALL OF THE PREVIOUS CONDITIONS WOULD    *
.* HAVE TO BEEN FALSE.                                                *
.*                                                                    *
.* IF &KCON IS NOT ZERO, THEN &ORFLAG IS CHECKED TO DETERMINE WHETHER *
.* OR NOT THE PREVIOUS CONDITION WAS PART OF AN 'OR' COMPOUND         *
.* CONDITION.  IF ON, THEN THE 'OR' TYPE PROCESSING IS INVOKED.  IF   *
.* OFF, THEN THE 'AND' COMPOUND CONDITION GENERATES THE SAME TYPE OF  *
.* BRANCH INSTRUCTION AS THE SIMPLE CONDITION.                        *
.* ------------------------------------------------------------------ *
.*
.ORSETS1        ANOP
&OR_OPERAND     SETC  '&TRUE'
                AIF   ('&TEST(1)' EQ 'FOUND').OR1_FOUND
                AIF   ('&TEST(1)' EQ 'NOT_FOUND').OR1_NOTFOUND
                AIF   ('&TEST(1)' EQ 'EQUAL').OR1_EQ
                AIF   ('&TEST(1)' EQ 'NOT_EQUAL').OR1_NE
                AIF   ('&TEST(1)' EQ 'LOW').OR1_LOW
                AIF   ('&TEST(1)' EQ 'HIGH').OR1_HIGH
                AIF   ('&TEST(1)' EQ 'NOT_LOW').OR1_NOTLOW
                AIF   ('&TEST(1)' EQ 'NOT_HIGH').OR1_NOTHIGH
                AIF   ('&TEST(1)' EQ 'ONES').OR1_ONES
                AIF   ('&TEST(1)' EQ 'MIXED').OR1_MIXED
                AIF   ('&TEST(1)' EQ 'ZEROS').OR1_ZEROS
                AIF   ('&TEST(1)' EQ 'NOT_ONES').OR1_NOTONES
                AIF   ('&TEST(1)' EQ 'NOT_MIXED').OR1_NOTMIXED
                AIF   ('&TEST(1)' EQ 'NOT_ZEROS').OR1_NOTZEROS
&OR_OPCODE      SETC  'BC'
&OR_OPERAND     SETC  '&TEST(1).,&TRUE'
                MEXIT
.*
.OR1_EQ         ANOP
&OR_OPCODE      SETC  'BE'
                MEXIT
.*
.OR1_NE         ANOP
&OR_OPCODE      SETC  'BNE'
                MEXIT
.*
.OR1_LOW        ANOP
&OR_OPCODE      SETC  'BL'
                MEXIT
.*
.OR1_NOTLOW     ANOP
&OR_OPCODE      SETC  'BNL'
                MEXIT
.*
.OR1_HIGH       ANOP
&OR_OPCODE      SETC  'BH'
                MEXIT
.*
.OR1_NOTHIGH    ANOP
&OR_OPCODE      SETC  'BNH'
                MEXIT
.*
.OR1_FOUND      ANOP
&OR_OPCODE      SETC  'BNF'
                MEXIT
.*
.OR1_NOTFOUND   ANOP
&OR_OPCODE      SETC  'BF'
                MEXIT
.*
.OR1_ONES       ANOP
&OR_OPCODE      SETC  'BO'
                MEXIT
.*
.OR1_MIXED      ANOP
&OR_OPCODE      SETC  'BM'
                MEXIT
.*
.OR1_ZEROS      ANOP
&OR_OPCODE      SETC  'BZ'
                MEXIT
.*
.OR1_NOTONES    ANOP
&OR_OPCODE      SETC  'BNO'
                MEXIT
.*
.OR1_NOTMIXED   ANOP
&OR_OPCODE      SETC  'BNM'
                MEXIT
.*
.OR1_NOTZEROS   ANOP
&OR_OPCODE      SETC  'BNZ'
                MEXIT
.*
.* ------------------------------------------------------------------ *
.* THIS SECTION ADDRESSES THOSE INVOCATIONS WHERE THE COMPARE         *
.* INSTRUCTION HAS NOT BEEN SPECIFIED IN &TEST(4).  IF THE RELATIONAL *
.* OPERATOR SPECIFIES ONE OF THE 'TM' OR 'TRT' TYPE OF CONDITIONS,    *
.* THEN THEY ADDRESSES SPECIFICALLY.                                  *
.*                                                                    *
.* COMP GENERATES THE COMPARE INSTRUCTION ACCORDING TO THE TYPE OF    *
.* FIELDS THAT &TEST(1) AND &TEST(3) REPRESENT.                       *
.* ------------------------------------------------------------------ *
.*
.COMP           ANOP
         AIF   ('&TEST(2)' EQ 'ONES'      OR                           +
               '&TEST(2)'  EQ 'MIXED'     OR                           +
               '&TEST(2)'  EQ 'ZEROS'     OR                           +
               '&TEST(2)'  EQ 'NOT_ONES'  OR                           +
               '&TEST(2)'  EQ 'NOT_MIXED' OR                           +
               '&TEST(2)'  EQ 'NOT_ZEROS').TM
.*
         AIF   ('&TEST(2)' EQ 'FOUND' OR                               +
               '&TEST(2)'  EQ 'NOT_FOUND').TRT
.*
&NAME    COMP  &TEST(1),&TEST(3)
                AGO   .SET_OPCODE
.*
.* ------------------------------------------------------------------ *
.* THIS SECTION ADDRESSES THOSE INVOCATIONS WHERE THE TYPE OF COMPARE *
.* ISNSTRUCTION HAS BEEN SPECIFIED IN &TEST(4).                       *
.* ------------------------------------------------------------------ *
.*
.SPEC           ANOP
&NAME    &TEST(4)   &TEST(1),&TEST(3)
.*
.* ------------------------------------------------------------------ *
.* AT THIS POINT, ONLY THE BRANCH INSTRUCTION NEEDS TO BE GENERATED.  *
.* &IF_OPERAND WILL CONTAIN THE LABLE FOR THE DETECTED FALSE          *
.* CONDITION.                                                         *
.*                                                                    *
.* IF &KCON IS ZERO, THIS IS EITHER THE LAST STATEMENT IN A COMPOUND  *
.* CONDTION OR JUST A PLAIN CONDITION.  IF IT IS A SIMPLE CONDITION,  *
.* THEN THE BRANCH INSTRUCTION WILL BRANCH FOR THE OPPOSITE, E.G.     *
.* AN 'EQ' WILL GENERATE A 'BNE', A 'LT' WILL GENERATE A 'BNL', ETC.  *
.* IF THIS IS THE LAST OF AN 'AND' COMPOUND CONDITION, IT WILL STILL  *
.* GENERATE AN OPPOSITE BRANCH FOR A FALSE CONDITION.  FOR, ALL OF    *
.* THE PREVIOUS STATEMENTS HAVE BEEN TRUE.  IF THIS IS THE LAST       *
.* STATEMENT IN AN 'OR' COMPOUND, IT WILL AGAIN GENERATE AN OPPOSITE  *
.* BRANCH FOR A FALSE CONDITION.  BECAUSE, IN ORDER FOR THIS          *
.* CONDITION TO BE EVALUATED, ALL OF THE PREVIOUS CONDITIONS WOULD    *
.* HAVE TO BEEN FALSE.                                                *
.*                                                                    *
.* IF &KCON IS NOT ZERO, THEN &ORFLAG IS CHECKED TO DETERMINE WHETHER *
.* OR NOT THE PREVIOUS CONDITION WAS PART OF AN 'OR' COMPOUND         *
.* CONDITION.  IF ON, THEN THE 'OR' TYPE PROCESSING IS INVOKED.  IF   *
.* OFF, THEN THE 'AND' COMPOUND CONDITION GENERATES THE SAME TYPE OF  *
.* BRANCH INSTRUCTION AS THE SIMPLE CONDITION.                        *
.* ------------------------------------------------------------------ *
.*
.SET_OPCODE     ANOP
&IF_OPERAND     SETC  '&IFEND(&IFNO)'
                AIF   (&KCON EQ 0).BYPASS_OR2
                AIF   (&ORFLAG).ORSETS2
.*
.BYPASS_OR2     ANOP
                AIF   ('&TEST(2)' EQ 'EQ').IF2_EQ
                AIF   ('&TEST(2)' EQ 'NE').IF2_NE
                AIF   ('&TEST(2)' EQ 'GT').IF2_GT
                AIF   ('&TEST(2)' EQ 'LT').IF2_LT
                AIF   ('&TEST(2)' EQ 'GE').IF2_GE
                AIF   ('&TEST(2)' EQ 'LE').IF2_LE
                AIF   ('&TEST(2)' EQ 'ZERO').IF2_ZERO
                AIF   ('&TEST(2)' EQ 'PLUS').IF2_PLUS
                AIF   ('&TEST(2)' EQ 'MINUS').IF2_MINUS
                AIF   ('&TEST(2)' EQ 'NOT_ZERO').IF2_NOTZERO
                AIF   ('&TEST(2)' EQ 'NOT_PLUS').IF2_NOTPLUS
                AIF   ('&TEST(2)' EQ 'NOT_MINUS').IF2_NOTMINUS
                MNOTE 6,'INVALID SYMBOL IN CONNECTOR'
                MEXIT
.*
.IF2_EQ         ANOP
&IF_OPCODE      SETC  'BNE'
                MEXIT
.*
.IF2_NE         ANOP
&IF_OPCODE      SETC  'BE'
                MEXIT
.*
.IF2_GT         ANOP
&IF_OPCODE      SETC  'BNH'
                MEXIT
.*
.IF2_LT         ANOP
&IF_OPCODE      SETC  'BNL'
                MEXIT
.*
.IF2_GE         ANOP
&IF_OPCODE      SETC  'BL'
                MEXIT
.*
.IF2_LE         ANOP
&IF_OPCODE      SETC  'BH'
                MEXIT
.*
.IF2_ZERO       ANOP
&IF_OPCODE      SETC  'BNZ'
                MEXIT
.*
.IF2_PLUS       ANOP
&IF_OPCODE      SETC  'BNP'
                MEXIT
.*
.IF2_MINUS      ANOP
&IF_OPCODE      SETC  'BNM'
                MEXIT
.*
.IF2_NOTZERO    ANOP
&IF_OPCODE      SETC  'BZ'
                MEXIT
.*
.IF2_NOTPLUS    ANOP
&IF_OPCODE      SETC  'BP'
                MEXIT
.*
.IF2_NOTMINUS   ANOP
&IF_OPCODE      SETC  'BM'
                MEXIT
.*
.* ------------------------------------------------------------------ *
.* THIS SECTION GENERATES THE BRANCH INSTRUCTIONS FOR THE 'OR'        *
.* COMPOUND STATEMENT.  &OR_OPERAND WILL CONTAIN THE LABEL FOR THE    *
.* DETECTED 'TRUE' CONDITIONS.                                        *
.*                                                                    *
.* UNLIKE THE SIMPLE AND 'AND' COMPOUND CONDITIONS, THE 'OR'          *
.* CONDITION BRANCHES TO THE NE', A 'LT' WILL GENERATE A 'BNL', ETC.  *
.* IF THIS IS THE LAST OF AN 'AND' COMPOUND CONDITION, IT WILL STILL  *
.* GENERATE AN OPPOSITE BRANCH FOR A FALSE CONDITION.  FOR, ALL OF    *
.* THE PREVIOUS STATEMENTS HAVE BEEN TRUE.  IF THIS IS THE LAST       *
.* STATEMENT IN AN 'OR' COMPOUND, IT WILL AGAIN GENERATE AN OPPOSITE  *
.* BRANCH FOR A FALSE CONDITION.  BECAUSE, IN ORDER FOR THIS          *
.* CONDITION TO BE EVALUATED, ALL OF THE PREVIOUS CONDITIONS WOULD    *
.* HAVE TO BEEN FALSE.                                                *
.*                                                                    *
.* IF &KCON IS NOT ZERO, THEN &ORFLAG IS CHECKED TO DETERMINE WHETHER *
.* OR NOT THE PREVIOUS CONDITION WAS PART OF AN 'OR' COMPOUND         *
.* CONDITION.  IF ON, THEN THE 'OR' TYPE PROCESSING IS INVOKED.  IF   *
.* OFF, THEN THE 'AND' COMPOUND CONDITION GENERATES THE SAME TYPE OF  *
.* BRANCH INSTRUCTION AS THE SIMPLE CONDITION.                        *
.* ------------------------------------------------------------------ *
.*
.ORSETS2        ANOP
&OR_OPERAND     SETC '&TRUE'
                AIF   ('&TEST(2)' EQ 'EQ').OR2_EQ
                AIF   ('&TEST(2)' EQ 'NE').OR2_NE
                AIF   ('&TEST(2)' EQ 'GT').OR2_GT
                AIF   ('&TEST(2)' EQ 'LT').OR2_LT
                AIF   ('&TEST(2)' EQ 'GE').OR2_GE
                AIF   ('&TEST(2)' EQ 'LE').OR2_LE
                AIF   ('&TEST(2)' EQ 'ZERO').OR2_ZERO
                AIF   ('&TEST(2)' EQ 'PLUS').OR2_PLUS
                AIF   ('&TEST(2)' EQ 'MINUS').OR2_MINUS
                AIF   ('&TEST(2)' EQ 'NOT_ZERO').OR2_NOTZERO
                AIF   ('&TEST(2)' EQ 'NOT_PLUS').OR2_NOTPLUS
                AIF   ('&TEST(2)' EQ 'NOT_MINUS').OR2_NOTMINUS
                MNOTE 6,'INVALID SYMBOL IN CONNECTOR'
                MEXIT
.*
.OR2_EQ         ANOP
&OR_OPCODE      SETC  'BE'
                MEXIT
.*
.OR2_NE         ANOP
&OR_OPCODE      SETC  'BNE'
                MEXIT
.*
.OR2_GT         ANOP
&OR_OPCODE      SETC  'BH'
                MEXIT
.*
.OR2_LT         ANOP
&OR_OPCODE      SETC  'BL'
                MEXIT
.*
.OR2_GE         ANOP
&OR_OPCODE      SETC  'BNL'
                MEXIT
.*
.OR2_LE         ANOP
&OR_OPCODE      SETC  'BNH'
                MEXIT
.*
.OR2_ZERO       ANOP
&OR_OPCODE      SETC  'BZ'
                MEXIT
.*
.OR2_PLUS       ANOP
&OR_OPCODE      SETC  'BP'
                MEXIT
.*
.OR2_MINUS      ANOP
&OR_OPCODE      SETC  'BM'
                MEXIT
.*
.OR2_NOTZERO    ANOP
&OR_OPCODE      SETC  'BNZ'
                MEXIT
.*
.OR2_NOTPLUS    ANOP
&OR_OPCODE      SETC  'BNP'
                MEXIT
.*
.OR2_NOTMINUS   ANOP
&OR_OPCODE      SETC  'BNM'
                MEXIT
.*
.* ------------------------------------------------------------------ *
.* THIS SECTION BUILDS THE TEST-UNDER-MASK INSTRUCTION AND THE        *
.* CORRESPONDING BRANCH INSTRUCTION.  &IF_OPREAND WILL CONTAIN THE    *
.* LABEL FOR THE DETECTED FALSE CONDTION.  AND, &OR_OPERAND WILL      *
.* WILL CONTAIN THE LABEL FOR DETECTED TRUE CONDITIONS - IF THIS IS   *
.* A COMPOUND 'OR' CONDITION.                                         *
.*                                                                    *
.* IF &KCON IS ZERO, THIS IS EITHER THE LAST STATEMENT IN A COMPOUND  *
.* CONDTION OR JUST A PLAIN CONDITION.  IF IT IS A SIMPLE CONDITION,  *
.* THEN THE BRANCH INSTRUCTION WILL BRANCH FOR THE OPPOSITE, E.G.     *
.* AN 'EQ' WILL GENERATE A 'BNE', A 'LT' WILL GENERATE A 'BNL', ETC.  *
.* IF THIS IS THE LAST OF AN 'AND' COMPOUND CONDITION, IT WILL STILL  *
.* GENERATE AN OPPOSITE BRANCH FOR A FALSE CONDITION.  FOR, ALL OF    *
.* THE PREVIOUS STATEMENTS HAVE BEEN TRUE.  IF THIS IS THE LAST       *
.* STATEMENT IN AN 'OR' COMPOUND, IT WILL AGAIN GENERATE AN OPPOSITE  *
.* BRANCH FOR A FALSE CONDITION.  BECAUSE, IN ORDER FOR THIS          *
.* CONDITION TO BE EVALUATED, ALL OF THE PREVIOUS CONDITIONS WOULD    *
.* HAVE TO BEEN FALSE.                                                *
.*                                                                    *
.* IF &KCON IS NOT ZERO, THEN &ORFLAG IS CHECKED TO DETERMINE WHETHER *
.* OR NOT THE PREVIOUS CONDITION WAS PART OF AN 'OR' COMPOUND         *
.* CONDITION.  IF ON, THEN THE 'OR' TYPE PROCESSING IS INVOKED.  IF   *
.* OFF, THEN THE 'AND' COMPOUND CONDITION GENERATES THE SAME TYPE OF  *
.* BRANCH INSTRUCTION AS THE SIMPLE CONDITION.                        *
.* ------------------------------------------------------------------ *
.*
.TM             ANOP
&NAME    TM    &TEST(1),&TEST(3)
.*
&IF_OPERAND     SETC   '&IFEND(&IFNO)'
                AIF   (&KCON EQ 0).BYPASS_OR3
                AIF   (&ORFLAG).ORSET3
.*
.BYPASS_OR3     ANOP
                AIF   ('&TEST(2)' EQ 'ONES').IF3_ONES
                AIF   ('&TEST(2)' EQ 'ZEROS').IF3_ZEROS
                AIF   ('&TEST(2)' EQ 'MIXED').IF3_MIXED
                AIF   ('&TEST(2)' EQ 'NOT_ONES').IF3_NOTONES
                AIF   ('&TEST(2)' EQ 'NOT_ZEROS').IF3_NOTZEROS
                AIF   ('&TEST(2)' EQ 'NOT_MIXED').IF3_NOTMIXED
                MNOTE 6,'INVALID RELATIONAL OPERATOR'
                MEXIT
.*
.IF3_ONES       ANOP
&IF_OPCODE      SETC  'BNO'
                MEXIT
.*
.IF3_ZEROS      ANOP
&IF_OPCODE      SETC  'BNZ'
                MEXIT
.*
.IF3_MIXED      ANOP
&IF_OPCODE      SETC  'BNM'
                MEXIT
.*
.IF3_NOTONES    ANOP
&IF_OPCODE      SETC  'BO'
                MEXIT
.*
.IF3_NOTZEROS   ANOP
&IF_OPCODE      SETC  'BZ'
                MEXIT
.*
.IF3_NOTMIXED   ANOP
&IF_OPCODE      SETC  'BM'
                MEXIT
.*
.ORSET3         ANOP
&OR_OPERAND     SETC '&TRUE'
                AIF   ('&TEST(2)' EQ 'ONES').OR3_ONES
                AIF   ('&TEST(2)' EQ 'ZEROS').OR3_ZEROS
                AIF   ('&TEST(2)' EQ 'MIXED').OR3_MIXED
                AIF   ('&TEST(2)' EQ 'NOT_ONES').OR3_NOTONES
                AIF   ('&TEST(2)' EQ 'NOT_ZEROS').OR3_NOTZEROS
                AIF   ('&TEST(2)' EQ 'NOT_MIXED').OR3_NOTMIXED
                MNOTE 6,'INVALID RELATIONAL OPERATOR'
                MEXIT
.*
.OR3_ONES       ANOP
&OR_OPCODE      SETC  'BO'
                MEXIT
.*
.OR3_ZEROS      ANOP
&OR_OPCODE      SETC  'BZ'
                MEXIT
.*
.OR3_MIXED      ANOP
&OR_OPCODE      SETC  'BM'
                MEXIT
.*
.OR3_NOTONES    ANOP
&OR_OPCODE      SETC  'BNO'
                MEXIT
.*
.OR3_NOTZEROS   ANOP
&OR_OPCODE      SETC  'BNZ'
                MEXIT
.*
.OR3_NOTMIXED   ANOP
&OR_OPCODE      SETC  'BNM'
                MEXIT
.*
.* ------------------------------------------------------------------ *
.* THIS SECTION BUILDS THE TRANSLATE-AND-TEST INSTRUCTION AND THE     *
.* CORRESPONDING BRANCH INSTRUCTION.  &IF_OPREAND WILL CONTAIN THE    *
.* LABEL FOR THE DETECTED FALSE CONDTION.  AND, &OR_OPERAND WILL      *
.* WILL CONTAIN THE LABEL FOR DETECTED TRUE CONDITIONS - IF THIS IS   *
.* A COMPOUND 'OR' CONDITION.                                         *
.*                                                                    *
.* IF &KCON IS ZERO, THIS IS EITHER THE LAST STATEMENT IN A COMPOUND  *
.* CONDTION OR JUST A PLAIN CONDITION.  IF IT IS A SIMPLE CONDITION,  *
.* THEN THE BRANCH INSTRUCTION WILL BRANCH FOR THE OPPOSITE, E.G.     *
.* AN 'EQ' WILL GENERATE A 'BNE', A 'LT' WILL GENERATE A 'BNL', ETC.  *
.* IF THIS IS THE LAST OF AN 'AND' COMPOUND CONDITION, IT WILL STILL  *
.* GENERATE AN OPPOSITE BRANCH FOR A FALSE CONDITION.  FOR, ALL OF    *
.* THE PREVIOUS STATEMENTS HAVE BEEN TRUE.  IF THIS IS THE LAST       *
.* STATEMENT IN AN 'OR' COMPOUND, IT WILL AGAIN GENERATE AN OPPOSITE  *
.* BRANCH FOR A FALSE CONDITION.  BECAUSE, IN ORDER FOR THIS          *
.* CONDITION TO BE EVALUATED, ALL OF THE PREVIOUS CONDITIONS WOULD    *
.* HAVE TO BEEN FALSE.                                                *
.*                                                                    *
.* IF &KCON IS NOT ZERO, THEN &ORFLAG IS CHECKED TO DETERMINE WHETHER *
.* OR NOT THE PREVIOUS CONDITION WAS PART OF AN 'OR' COMPOUND         *
.* CONDITION.  IF ON, THEN THE 'OR' TYPE PROCESSING IS INVOKED.  IF   *
.* OFF, THEN THE 'AND' COMPOUND CONDITION GENERATES THE SAME TYPE OF  *
.* BRANCH INSTRUCTION AS THE SIMPLE CONDITION.                        *
.* ------------------------------------------------------------------ *
.*
.TRT            ANOP
&NAME    TRT   &TEST(1),&TEST(3)
&IF_OPERAND     SETC   '&IFEND(&IFNO)'
.*
.TRTCC          ANOP
                AIF   (&KCON EQ 0).BYPASS_OR4
                AIF   (&ORFLAG).ORSET4
.*
.BYPASS_OR4     ANOP
                AIF   ('&TEST(2)' EQ 'FOUND').IF4_FOUND
                AIF   ('&TEST(2)' EQ 'NOT_FOUND').IF4_NOTFOUND
                MNOTE 6,'INVALID RELATIONAL OPERATOR'
                MEXIT
.*
.IF4_FOUND      ANOP
&IF_OPCODE      SETC   'BNF'
                MEXIT
.*
.IF4_NOTFOUND   ANOP
&IF_OPCODE      SETC   'BF'
                MEXIT
.*
.ORSET4         ANOP
                AIF   ('&TEST(2)' EQ 'FOUND').OR4_FOUND
                AIF   ('&TEST(2)' EQ 'NOT_FOUND').OR4_NOTFOUND
                MNOTE 6,'INVALID RELATIONAL OPERATOR'
                MEXIT
.*
.OR4_FOUND      ANOP
&OR_OPCODE      SETC   'BNF'
                MEXIT
.*
.OR4_NOTFOUND   ANOP
&OR_OPCODE      SETC   'BF'
.*
         MEND
