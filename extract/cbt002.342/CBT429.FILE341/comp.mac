         MACRO
.*
.* ------------------------------------------------------------------ *
.* COMP GENERATES THE COMPARE INSTRUCTION FOR COND.                   *
.*                                                                    *
.*                                                                    *
.* &COMP1 CONTAINS THE FIRST OPERAND FOR THE INSTRUCTION              *
.*                                                                    *
.* &COMP2 CONTAINS THE SECOND OPERAND FOR THE INSTRUCTION             *
.*                                                                    *
.* &OPERTYPE CONTAINS THE INSTRUCTION TYPE SET BY OPTYANAL            *
.*                                                                    *
.* &OPERET CONTAINS THE OPERAND SET BY OPTYANAL                       *
.*                                                                    *
.* &COMP_TYPE CONTIANS THE INSTRUCTION TYPE SET BY OPTYANAL           *
.*                                                                    *
.* &COMP3 CONTAINS THE OPERAND SET BY OPTYANAL FOR &COMP1             *
.*                                                                    *
.* &COMP4 CONTAINS THE OPERAND SET BY OPTYANAL FOR &COMP2             *
.*                                                                    *
.*                                                                    *
.* COMP INVOKES OPTYANAL TWICE - FIRST FOR &COMP1 & SECOND FOR &COMP2 *
.* OPTYANAL DETERMINES THE TYPE OF OPERAND &COMP1 OR &COMP2 IS.       *
.* OPTYANAL CAN CHANGE THE OPERAND.  HOWEVER, ONLY FOR &COMP2.  THE   *
.* VARIABLE TYPE IS SET IN &COMP_TYPE WHICH OPTYANAL WILL EXAMINE     *
.* TO SEE IF &OPERET NEEDS TO BE EMBELLISHED.                         *
.* ------------------------------------------------------------------ *
.*
&NAME          COMP  &COMP1,&COMP2
               GBLC  &OPERTYPE
               GBLC  &OPERET
               GBLC  &COMP_TYPE
               GBLC  &COMP3
               LCLC  &COMP4
.*
.* ------------------------------------------------------------------ *
.* IF &COMP2 IS NULL AND IT IS A REGISTER, THEN AN 'LTR' WILL BE      *
.* BUILT.  IF &COMP2 IS NOT NULL, THE OUTPUT FROM THE FIRST           *
.* INVOCATION OF OPTYANAL IS SAVED IN &COMP3 & &COMP_TYPE.            *
.* ------------------------------------------------------------------ *
.*
&COMP_TYPE     SETC   ''
               OPTYANAL   &COMP1
               AIF   ('&COMP2' NE '').SET_COMP3
               AIF   ('&OPERTYPE' EQ 'R').LTR
               MNOTE 10,'INVALID REGISTER NOTATION'
               MEXIT
.*
.SET_COMP3     ANOP
&COMP3         SETC   '&OPERET'
&COMP_TYPE     SETC   '&OPERTYPE'
.*
.* ------------------------------------------------------------------ *
.* THIS CHECK IS FOR HALF AND FULLWORD AREAS THAT ARE THE 'A' FIELDS  *
.* SO THAT A STORAGE-TO-STORAGE INSTRUCTION WILL BE GENERATED.        *
.* ------------------------------------------------------------------ *
.*
         AIF   ('&COMP_TYPE' NE 'H'  AND                               +
               '&COMP_TYPE'  NE 'F').CHECK_COMP2
&COMP_TYPE     SETC   'S'
.*
.* ------------------------------------------------------------------ *
.* &COMP2 IS ANALYZED BY &OPTYANAL AND THE OUTPUT IS PUT IN &COMP4    *
.* THE SECOND BYTE OF &COMP_TYPE.                                     *
.* ------------------------------------------------------------------ *
.*
.CHECK_COMP2   ANOP
               OPTYANAL   &COMP2
&COMP4         SETC   '&OPERET'
&COMP_TYPE     SETC   '&COMP_TYPE'.'&OPERTYPE'
.*
.* ------------------------------------------------------------------ *
.* AT THIS POINT, &COMP_TYPE HAS THE TYPE OF THE INSTRUCTION TO BE    *
.* GENERATED.  THIS BRANCH TABLE HANDLES ALL TYPES.                   *
.* ------------------------------------------------------------------ *
.*
               AIF   ('&COMP_TYPE' EQ 'RR').CR
               AIF   ('&COMP_TYPE' EQ 'RH').CH
               AIF   ('&COMP_TYPE' EQ 'RF').C
               AIF   ('&COMP_TYPE' EQ 'RS').CL
               AIF   ('&COMP_TYPE' EQ 'RP').CL
               AIF   ('&COMP_TYPE' EQ 'SI').CLI
               AIF   ('&COMP_TYPE' EQ 'SH').CLC
               AIF   ('&COMP_TYPE' EQ 'SF').CLC
               AIF   ('&COMP_TYPE' EQ 'SS').CLC
               AIF   ('&COMP_TYPE' EQ 'SP').CLC
               AIF   ('&COMP_TYPE' EQ 'PI').CLI
               AIF   ('&COMP_TYPE' EQ 'PH').CP
               AIF   ('&COMP_TYPE' EQ 'PF').CP
               AIF   ('&COMP_TYPE' EQ 'PS').CP
               AIF   ('&COMP_TYPE' EQ 'PP').CP
               MNOTE 10,'INVALID TEST'
.*
.* ------------------------------------------------------------------ *
.* AT EACH LABEL, THE DESIRED INSTRUCTION IS GENERATED USING &COMP3   *
.* AND &COMP4.                                                        *
.* ------------------------------------------------------------------ *
.*
.CR            ANOP
               AIF   ('&COMP3' EQ '&COMP4').LTR
               CR    &COMP3,&COMP4
               MEXIT
.*
.LTR           ANOP
               LTR   &COMP1,&COMP1
               MEXIT
.*
.CH            ANOP
               CH    &COMP3,&COMP4
               MEXIT
.*
.C             ANOP
               C     &COMP3,&COMP4
               MEXIT
.*
.CL            ANOP
               CL    &COMP3,&COMP4
               MEXIT
.*
.CLI           ANOP
               CLI   &COMP3,&COMP4
               MEXIT
.*
.CLC           ANOP
               CLC   &COMP3,&COMP4
               MEXIT
.*
.CP            ANOP
               CP    &COMP3,&COMP4
.*
         MEND
