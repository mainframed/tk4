         CVT   DSECT=YES
         PACCVT
         IHALPDE
         IHACDE
         IHAPVT
DIRDS    PACDIR   DSECT=YES
         IHAPDS
         ISAMCSA
ISAMTBL           DSECT
ISAMTBL_ENTRY     DS    0CL92
ISAMTBL_NAME      DS    CL8
ISAMTBL_TTR       DS    CL3
ISAMTBL_INDC      DS    C
                  ORG   ISAMTBL+76
ISAMTBL_LPDEADDR  DS    CL4
ISAMTBL_ENTRYPT   DS    CL4
ISAMTBL_MODLEN    DS    CL4
ISAMTBL_LOADPT    DS    CL4
ISAMTBL_NXTENTRY  EQU   *
SORTBL            DSECT
SORTBL_ENTRY      DS    0CL92
SORTBL_NAME       DS    CL8
SORTBL_TTR        DS    CL3
SORTBL_INDC       DS    C
                  ORG   SORTBL+76
SORTBL_LPDEADDR   DS    CL4
SORTBL_ENTRYPT    DS    CL4
SORTBL_MODLEN     DS    CL4
SORTBL_LOADPT     DS    CL4
SORTBL_NXTENTRY   EQU   *
* ------------------------------------------------------------------- *
* LAMDA LOADS THE ISAM LPA MODULES INTO CSA.  LAMDA HAS AMODE 24 AND  *
* RMODE 24 AND IS REENTRANT.                                          *
*                                                                     *
* THE BASIC PROCESSING CONSISTS OF:                                   *
*                                                                     *
*     LOCATE THE ISAMCSA TABLE IN THE ECSA ANCHORED OFF OF THE        *
*          PACCVT                                                     *
*     READ THE DIRECTORY OF THE PDS CONTAINING THE ISAM LPA MODS      *
*     BUILD A TABLE CONTAINING THE DIRECTORY INFORMATION              *
*     SCAN THE ACTIVE LPDE QUEUE FOR THE ISAM LPA MODULES             *
*     SAVE THE ADDRESS OF THE INDIVIDUAL LPDE'S WITH THE              *
*          CORRESPONDING TABLE ENTRY                                  *
*     LOAD THE ISAM LPA MODS INTO CSA USING THE EXRACTED DIRECTORY    *
*          INFORMATION STORED IN THE TABLE                            *
*     SAVE THE LOAD ADDRESS OF THE INDIVIDUAL ISAM MODS IN THE        *
*          CORRESPONDING TABLE ENTRY                                  *
*     UPDATE THE ISAM LPDE'S WITH THE LOAD ADDRESSES SAVED IN THE     *
*          CORRSPONDING TABLE ENTRY                                   *
*                                                                     *
* LAMDA USES 2 FILES - FILEIN1 & FILEIN2.  FILEIN1 IS THE DIRECTORY   *
* OF THE PDS WITH THE ISAM LPA MODS.  FILEIN2 IS THE ACTUAL LOAD      *
* LIBRARY FROM WHICH THE DIRECTED LOAD IS FETCHED.                    *
*                                                                     *
* EACH MEMBER OF FILEIN2 HAS THE SAME MEMBER NAME AS SYS1.ISAMLPA     *
* EXCEPT FOR THE FIRST CHARACTER.  IN SYS1.ISAMLPA, THE FIRST         *
* CHARACTER IS AN 'I' WHEREAS FILEIN2 IS 'X'.  FILEIN2 CONTAINS THE   *
* PROPER MODULES.  ALL OF THE MEMBERS OF SYS1.ISAMLPA ARE RENAMED     *
* COPIES OF PACBR14.                                                  *
* ------------------------------------------------------------------- *
         BEGIN LAMDA,                                                  +
               RENT=YES
         DO    VERIFY_ENVIRON
         IF    (VERIFY,NE,0)
               XR     R15,R15
               IC     R15,VERIFY
               BCTR   R15,R0
               MH     R15,=H'12'
               LA     R14,WTO_TBLSTART(R15)
               LM     R8,R10,0(R14)
               EX     R9,MOVEWTO
               LA     R11,WTOAREA
               WTO    ,MF=(E,(R11))
               LA     R8,16
         ELSE
               MVC   OPEN_AREA,OPEN_LIST
               MVC   ISAMDIR_AREA,ISAMDIR_LIST
               MVC   ISAMLPA_AREA,ISAMLPA_LIST
               MVC   CLOSE_AREA,CLOSE_LIST
               LA    R11,OPEN_AREA
               LA    R9,ISAMDIR_AREA
               LA    R8,ISAMLPA_AREA
               OPEN  ((R9),,(R8)),MF=(E,(R11))
               DO    READ_ISAMLPA
               DO    FIND_ISAMLPDE
               DO    LOAD_ISAMLPA
               DO    SORT_ISAMTBL
               DO    UPDATE_ISAMLPDE
               LA    R11,CLOSE_AREA
               LA    R9,ISAMDIR_AREA
               LA    R8,ISAMLPA_AREA
               CLOSE ((R9),,(R8)),MF=(E,(R11))
* ------------------------------------------------------------------- *
* THIS STORAGE CONTAINS THE TABLE WITH THE EXTRACTED DIRECTORY DATA   *
* ------------------------------------------------------------------- *
               LM    R10,R11,ISAM_TBLENGTH
               STORAGE   RELEASE,LENGTH=(R10),ADDR=(R11)
               XR    R8,R8
         IFEND
         EXIT  (R8)
MOVEWTO  MVC   WTOAREA(0),0(R8)
* ------------------------------------------------------------------- *
*    PACCVT RESIDES IN THE FLPA AND CONTAINS THE POINTER TO THE       *
*    ISAMCSA TABLE.  THIS SECTION VERIFIES THE LINKAGE AND ADDRESSES. *
*                                                                     *
*    THE CDE'S FOR THE FLPA AND MLPA MODS ARE ANCHORED OUT OF THE     *
*    CVT - CVTQLPAQ.  THE ADDRESS LIMITS FOR THE FLPA ARE CONTAINED   *
*    IN THE CVT STORAGE EXTENSION - CVTSMEXT.                         *
*                                                                     *
*    AFTER VERIFYING THE LINKAGE TO PACCVT, THE CSA TABLE IS          *
*    SEARCHED FOR THE VARIABLEING TABLE, IF THE ENTRY EXISTS THE      *
*    VARIABLEING TABLE IS VERIFIED.                                   *
*                                                                     *
*    REGISTER USAGE:                                                  *
*                   R3  - CVT STORAGE EXTENSION ADDRESS               *
*                   R5  - PACCVT EYECATCHER ADDRESS                   *
*                   R6  - VARIABLE TABLE HEADER ADDRESS               *
*                   R7  - CSATABLE ENTRY ADDRESS                      *
*                   R9  - PACCVT ADDRESS                              *
*                   R14 - CVT ADDRESS                                 *
*                   R15 - CDE ADDRESS                                 *
* ------------------------------------------------------------------- *
         USING CDENTRY,R15
         USING CVT,R14
         USING PACCAR_CVT,R9
         USING CSATABLE_DSECT,R7
         USING ISAMCSA_HEADER,R6
         USING ISAMCSA_ICATDS,R5
         USING CVTVSTGX,R3
VERIFY_ENVIRON   TOP
         NI    VERIFY,0
         SETAMODE   31
         L     R14,16
         L     R15,CVTQLPAQ
         L     R3,CVTSMEXT
* ------------------------------------------------------------------- *
*    EACH CDE CONTAINS AN ATTRIBUTE BYTE.  ONE OF THE ATTRIBUTES      *
*    INDICATES WHETHER OR NOT NIP LOADED THIS MOD.  IF NIP LOADED     *
*    THE MOD, THIS CDE IS AN LPDE.  IF PACCVT WAS LOADED INTO THE     *
*    FLPA, IT WILL HAVE A CDE WITH THIS ATTRIBUTE TURNED ON AND       *
*    MOD NAME OF 'PACCVT'.                                            *
* ------------------------------------------------------------------- *
         WHILE (R15,NOT_ZERO)
         DO    *
               IF    (CDATTR,ONES,CDNIP),AND
               IF    (CDNAME,EQ,'PACCVT')
                     DOOUT
               ELSE
                     L     R15,CDCHAIN
               IFEND
         DOEND
* ------------------------------------------------------------------- *
*    IF A CDE FOR PACCVT WAS FOUND, THE ATTRIBUTE BIT MUST BE ON,     *
*    THE MODULE NAME MUST BE 'PACCVT', AND, THE ENTRY POINT MUST      *
*    BE IN THE FLPA.                                                  *
* ------------------------------------------------------------------- *
         DO    *
               L     R9,CDENTPT
               IF    (CDATTR,ZEROS,CDNIP),OR
               IF    (CDNAME,NE,'PACCVT'),OR
               IF    (R9,LT,CVTFLPAS),OR
               IF    (R9,GT,CVTFLPAE)
                     MVI   VERIFY,1
                     DOOUT
               IFEND
* ------------------------------------------------------------------- *
*    THE FIRST TWELVE BYTES OF PACCVT MUST CONTAIN THE EYECATCHER     *
*    'PACCAR CVT  '.                                                  *
* ------------------------------------------------------------------- *
               IF    (PACCVTID,NE,'PACCAR CVT')
                     MVI   VERIFY,2
                     DOOUT
               IFEND
* ------------------------------------------------------------------- *
*    THE ADDRESS OF THE CSA TABLE MUST BE IN PACCVT.  SINCE PACCVT    *
*    IS 4K IN LENGTH, THEN THE ADDRESS OF THE CSA TABLE MUST BE IN    *
*    THE INTERVAL.                                                    *
* ------------------------------------------------------------------- *
               L     R7,PACCVT_CSATBLAD
               LA    R15,2048(,R9)
               LA    R15,2048(,R15)
               IF    (R7,LT,R9),OR
               IF    (R7,GT,R15)
                     MVI   VERIFY,3
                     DOOUT
               IFEND
* ------------------------------------------------------------------- *
*    THE TABLE IS NAMCED ISAMTBL1.   THE CSA TABLE IS SCANNED IS FOR  *
*    FOR 'ISAMCSA'.  THE LAST CSA TABLE ENTRY CONTAINS ALL X'FF'.     *
* ------------------------------------------------------------------- *
               WHILE (CSATABLE_NAME,NE,X'FF')
               DO    *
                     IF    (CSATABLE_NAME(7),EQ,'ISAMCSA')
                           DOOUT
                     ELSE
                           LA    R7,CSATABLE_LENGTH(,R7)
                     IFEND
               DOEND
* ------------------------------------------------------------------- *
*    IF THE CSA TABLE NAME IS ALL X'FF', THE ISAMCSA TABLE HAS NOT    *
*    BEEN LOADED.  OTHERWISE, THE ISAMCSA TABLE IS VERIFIED.          *
* ------------------------------------------------------------------- *
               IF    (CSATABLE_NAME,EQ,"FF")
                     MVI   VERIFY,4
                     DOOUT
               IFEND
               DO    VERIFY_CSATABLE
               DOOUT
         DOEND
         SETAMODE   24
         BOT
* ------------------------------------------------------------------- *
* VERIFICATION OF THE ISAMCSA TABLE INVOLVES VERIFYING ALL OF THE     *
* ADDRESSES IN THE ISAMCSA TABLE HEADER. VSMLOC IS USED FOR THE       *
* FOR THE VERIFICATION FOR BOTH THE ADDRESS OF THE ISAMCSA TABLE AND *
* AND THE END OF THE ISAMCSA TABLE. THEN EACH OF THE INDVIDUAL        *
* ISAMCSA TABLES' ADDRESS IS VERIFIED TO BE IN THE ISAMCSA TABLE.     *
*                                                                     *
*    REGISTER USAGE:                                                  *
*                   R7  - CSATABLE ENTRY ADDRESS                      *
*                   R6  - ISAMCSA HEADER ADDRESS                      *
*                   R15 - END OF ISAMCSA TABLE ADDRESS                *
* ------------------------------------------------------------------- *
VERIFY_CSATABLE   TOP
* ------------------------------------------------------------------- *
*    LOAD R6 WITH THE ADDRESS OF THE ISAMCSA TABLE AND VERIFY THE     *
*    FIRST 4 BYTES OF THE ISAMCSA TABLE IS A VALID AREA OF STORAGE.   *
* ------------------------------------------------------------------- *
         DO    *
               L     R6,CSATABLE_ADDRESS
               VSMLOC   CSA,AREA=((R6),4),LINKAGE=SYSTEM
               IF    (R15,NOT_ZERO)
                     MVI   VERIFY,5
                     DOOUT
               IFEND
* ------------------------------------------------------------------- *
*    THE FIRST 4 BYTES OF THE ISAMCSA TABLE CONTAIN THE LENGTH OF     *
*    THE ISAMCSA TABLE. THIS LENGTH AND THE ADDRESS OF THE ISAMCSA    *
*    TABLE ARE VERIFIED.                                              *
* ------------------------------------------------------------------- *
               L     R4,ISAMCSA_LENGTH
               VSMLOC   CSA,AREA=((R6),(4)),LINKAGE=SYSTEM
               IF    (R15,NOT_ZERO)
                     MVI   VERIFY,6
                     DOOUT
               IFEND
* ------------------------------------------------------------------- *
*    ADDING THE LENGTH OF THE ISAMCSA TABLE TO THE ADDRESS OF THE     *
*    ISAMCSA TABLE YIELDS THE END OF THE ISAMCSA TABLE. THE           *
*    EYECATCHER ADDRESS IS LOADED INTO R5 AND VERIFIED.               *
* ------------------------------------------------------------------- *
               LA    R15,0(R4,R6)
               L     R5,ISAMCSA_ICATPTR
               IF    (R5,LE,R6),OR
               IF    (R5,GE,R15)
                     MVI   VERIFY,7
                     DOOUT
               IFEND
* ------------------------------------------------------------------- *
*    THE EYECATCHER IS VERIFIED,                                      *
* ------------------------------------------------------------------- *
               IF    (ISAMCSA_ICATCHER,NE,'ISAMCSA')
                     MVI   VERIFY,8
               ELSE
                     ST    R6,ISAMCSA_TBLADDR
               IFEND
               DOOUT
         DOEND
         BOT
*
         DROP  R3,R5,R6,R7,R9,R14,R15
* ------------------------------------------------------------------- *
* READ_ISAMLPA READS THE DIRECTORY TWICE.  THE FIRST TIME TO          *
* DETERMINE THE NUMBER OF MEMBERS AND OBTAIN THE STORAGE FOR TWO      *
* TABLES.  THE SECOND TO EXTRACT THE DIRECTORY INFORMATION FOR EACH   *
* MEMBER.                                                             *
*                                                                     *
* THE TABLE CONTAINS ENTRIES OF 92 BYTES IN LENGTH.  THE FIRST 76     *
* BYTE CONTAIN THE DIRECTORY INFORMATION.  THE LAST FOUR WORDS        *
* CONTAIN THE ADDRESS OF THE LPDE CORRESPONDING TO THIS MEMBER, THE   *
* THE ENTRY POINT OF THE LOADED MODULE, THE MODULE LENGTH, AND, THE   *
* THE LOAD POINT OF THE LOADED MODULE.                                *
* ------------------------------------------------------------------- *
         USING DIRDS,R6
         USING ISAMTBL,R7
READ_ISAMLPA   TOP
* ------------------------------------------------------------------- *
* IN PREPARATION FOR READING THE DIRECTORY, THE BUFFER IS ACQUIRED,   *
* REGISTERS ARE INITIALIAZED AND TIMING IS SET.  TIMING IS USED TO    *
* INDICATE WHICH ITERATION OF THE READ LOOP IS EXECUTING.             *
* ------------------------------------------------------------------- *
         STORAGE                                                       +
               OBTAIN,                                                 +
               LENGTH=4096
         ST    R1,DIRECTRY_BUFFER
         LA    R11,READECB_AREA
         LA    R10,ISAMDIR_AREA
         LR    R9,R1
         XR    R7,R7
         NI    TIMING,0
* ------------------------------------------------------------------- *
* THIS LOOP IS PERFORMED TWICE.  THE FIRST TIME COUNTS THE NUMBER     *
* OF MEMBERS IN REGISTER 7.  AFTER LAMDA PROCESSES THE LAST ACTIVE    *
* DIRECTORY BLOCK, LAMDA OBTAINS TWO STORAGE AREAS.  THE FIRST IS     *
* USED AS A TABLE THAT WILL CONTAIN THE ADDRESS LIMITS FOR THE FIXING *
* OF PAGES THROUGH PGSER (SINCE IT IS POSSIBLE EACH LPDE CAN BE IN A  *
* DIFFERENT NON-CONTIGUOUS PAGE FRAME, THE NUMBER OF PAGES COULD BE   *
* AS NUMEROUS AS THE NUMBER OF MEMBERS).  THE SECOND AREA IS FOR A    *
* TABLE THAT WILL CONTAIN EACH DIRECTORY ENTRY WITH ADDITIONAL SPACE  *
* FOR LPDE INFORMATION.  LAMDA THEN ISSUES A POINT TO THE FIRST       *
* RECORD TO BEGIN THE SECOND PASS OF THE DIRECTORY.                   *
*                                                                     *
* DURING THE SECOND READ, LAMDA TOTALS THE SIZE OF THE MEMBERS        *
* ALLOWING FOR THE MODULES THAT HAVE TO BE LOADED ON A PAGE BOUNDARY  *
* (THE FTB1 BIT IS ON).  AFTER PROCESSING THE LAST ACTIVE BLOCK,      *
* LAMDA ALLOCATES AN AREA OF CSA WHERE THE ISAM MODULES IN FILEIN2    *
* WILL BE LOADED TO.                                                  *
*                                                                     *
* THE DIRECTORY IS READ AS A RECFM=U DATA SET WITH A KEY LENGTH OF 8. *
* THE KEY CONTAINS THE NAME OF THE HIGHEST MEMBER IN THE BLOCK        *
* (COLLATEDLY SPEAKING).  WHEN THIS VALUE IS ALL X'FF', THE LAST      *
* ACTIVE BLOCK HAS BEEN READ.                                         *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R11 - DECB ADDRESS                                   *
*                R10 - DCB ADDRESS                                    *
*                R9  - BUFFER ADDRESS PREFIXED WITH THE BLOCK KEY     *
*                R7  - REFER TO THE COMMENT ABOVE                     *
*                R6  - BASE REGISTER FOR PROCESSING DIRECTORY BLOCK   *
*                R5  - ADDRESS OF THE END OF THE DIRECTORY BLOCK      *
* ------------------------------------------------------------------- *
         WHILE (TIMING,LT,2)
         DO    *
* ------------------------------------------------------------------- *
* EACH DIRECTORY BLOCK IS READ AS A KEYED RECORD.  THE KEY IS READ    *
* INTO THE BUFFER WITH THE DIRECTORY BLOCK.  THE KEY CONTAINS THE     *
* VALUE OF THE HIGHEST MEMBER NAME IN THE DIRECTORY BLOCK.            *
*                                                                     *
* AFTER READING THE BLOCK, REGISTER 6 IS LOADED WITH THE ADDRESS OF   *
* THE ACTUAL DIRECTORY BLOCK.  THE FIRST TWO BYTES OF DIRECTORY BLOCK *
* CONTAINS THE NUMBER OF ACTIVE BYTES IN THE BLOCK INCLUDING THE      *
* FIRST HALFWORD.  LOADING RIGSTER 5 WITH THIS LENGTH AND ADDING      *
* THE ADDRESS IN REGISTER 6 YIELDS THE ADDRESS OF THE END OF THE      *
* ACTIVE DATA AREA IN THE BLOCK.                                      *
*                                                                     *
* IF THE HIGHEST KEY IS HIGH-VALUES (ALL X'FF'), THE LAST DIRECTORY   *
* ENTRY IS A NULL ENTRY AND 12 BYTES LONG.  SUBTRACTING 12 FROM       *
* REGISTER 5 GIVES THE PROPER END OF ACTIVE AREA ADDRESS.             *
*                                                                     *
* FINALLY, REGISTER 6 IS INCREMENTED BY TWO TO ALLOW FOR THE HALFWORD *
* LENGTH VALUE IN THE FIRST TWO BYTES OF THE DIRECTORY BLOCK.         *
* ------------------------------------------------------------------- *
               WHILE (0(R9),NE,"FF")
               DO    *
                     READ  (R11),SF,(R10),(R9),'S',MF=E
                     CHECK (R11)
                     LA    R6,8(,R9)
                     LH    R5,DIR_BLOCKLEN
                     AR    R5,R6
                     IF    (0(R9),EQ,"FF")
                           S     R5,=F'12'
                     IFEND
                     XR    R15,R15
                     LA    R6,2(,R6)
* ------------------------------------------------------------------- *
* REGISTER 15 IS LOADED WITH THE INDICATOR FIELD OF THE DIRECTORY     *
* ENTRY.  THE LAST 5 BITS OF THIS FIELD CONTAINS THE NUMBER OF        *
* HALFWORDS OF USER DATA FOLLOWING THE FIELD.  AND'ING REGISTER 15    *
* WITH A FULLWORD OF 31 LEAVES THE 5 LOW-ORDER BITS.  SHIFTING LEFT   *
* ONE BIT DOUBLES THE VALUE AND YIELDS THE LENGHT OF THE USER DATA    *
* FIELD.                                                              *
*                                                                     *
* IF THIS IS THE SECOND ITERATION, I.E. TIMING IS NOT ZERO, REGISTER  *
* 4 IS LOADED WITH THE LENGTH IN REGISTER 15 PLUS 11 (11 BECAUSE THE  *
* LENGTH OF BASIC PORTION IS 12; ADDING THE LENGTH OF THE USER DATA   *
* FIELD WOULD GIVE THE LENGTH OF THE DIRECTORY ENTRY.  THIS WOUDL IN  *
* TURN HAVE TO BE DECREMENTED FOR THE 'EX' INSTRUCTION OT MOVE THE    *
* DATA.  THUS, ONLY ADDING 11 ACCOMPLISHES THE SAME.)  THE DIRECTORY  *
* ENTRY IS MOVED TO A TABLE.                                          *
*                                                                     *
* IF THE FTB1 BIT IS ON, THIS MODULE MUST BE LOAD ON A PAGE BOUNDARY. *
* TO ACCOUNT FOR THIS, REGISTER 3 IS ROUNDED UP TO THE NEXT PAGE      *
* VALUE (SHIFTING REGISTER 12 BITS TO THE RIGHT RESULTS IN A PAGE     *
* PREFIX VALUE.  ADDING 1 TO THIS PREFIX, YIELDS THE NEXT PAGE        *
* PREFIX VALUE.)                                                      *
*                                                                     *
* REGISTER 4 IS LOADED WITH THE VALUE IN THE STOR FIELD.  THIS IS THE *
* LENGHT OF CONTIGUOUS STORAGE THE MODULE OCCUPIES.  ADDING THIS      *
* VALUE TO REGISTER 3 ACCUMULATES THE TOTAL LENGTH REQUIRED TO LOAD   *
* THE ENTIRE PDS.                                                     *
*                                                                     *
* FINALLY, ALL THE REGISTERS ARE INCREMENTED FOR THE NEXT DIRECTORY   *
* ENTRY.                                                              *
* ------------------------------------------------------------------- *
                     WHILE (R6,LT,R5)
                     DO    *
                           IC    R15,DIR_INDC
                           N     R15,=F'31'
                           SLA   R15,1
                           IF    (TIMING,NE,0)
                                 LA    R4,11(,R15)
                                 EX    R4,MOVE_DIRECTRY
                                 IF    (DIR_FTB1,ONES,PACBIT20)
                                       SRL    R3,12
                                       LA     R3,1(,R3)
                                       SLL    R3,12
                                 IFEND
                                 XR    R4,R4
                                 ICM   R4,7,DIR_STOR
                                 AR    R3,R4
                                 LA    R7,ISAMTBL_NXTENTRY
                           ELSE
                                 LA    R7,1(,R7)
                           IFEND
                           LA    R6,12(R15,R6)
                     DOEND
               DOEND
* ------------------------------------------------------------------- *
* THIS IS THE EODAD PROCESSING FOR THE DIRECTORY.                     *
*                                                                     *
* IF THIS IS THE FIRST ITERATION, I.E. TIMING CONTAINS X'00', THEN    *
* REGISTER 7 CONTAINS THE NUMBER OF DIRECTORY ENTRIES.  USING THIS    *
* FIGURE TWO AREAS OF STORAGE WILL BE ALLOCATED - ONE FOR PAGE        *
* ADDRESSES FOR PAGE FIXING, THE OTHER TO CONTAIN THE DIRECTORY       *
* ENTRIES.                                                            *
*                                                                     *
* THE PAGE ADDRESS TABLE CONTAINS ENTRIES OF EIGTH BYTES.  SINCE EACH *
* LPDE COULD BE IN A NON-CONTIGUOUS PAGE FRAME, EACH ISAM MODULE      *
* COULD REQUIRE A SEPARATE PAGE ADDRESS TABLE ENTRY.  THUS, LOADING   *
* REGISTER 6 WITH THE NUMBER OF ENTRIES, SHIFTING TO THE RIGHT 9 BITS *
* AND ADDING 1 TO THE RESULT YIELDS THE NUMBER OF PAGES REQUIRED TO   *
* TO SATISFY THE LENGTH NEEDED FOR THE PAGE ADDRESS TABLE.  SHIFTING  *
* 12 BITS TO THE LEFT YIELDS THE NUMBER OF BYTES CORRESPONDING TO THE *
* NUMBER OF PAGES.                                                    *
*                                                                     *
* THE SECOND AREA CONTAINS THE DIRECTORY ENTRIES AND ADDITIONAL DATA. *
* MULTIPLYING REGISTER 7 BY 92 YIELDS THE TOTAL LENGTH OF THE         *
* ISAM TABLE.  SHIFTING THIS LENGTH 12 BITS TO THE RIGHT AND ADDING   *
* 1 TO THE RESULT YIELDS THE NUMBER OF PAGES REQIRED TO SATISFY THE   *
* LENGTH OF THE ISAM TABLE.  SHIFTING THIS 12 BITS TO THE LEFT GIVES  *
* THE LENGTH CORRESPONDING TO THE NUMBER OF PAGES.                    *
*                                                                     *
* FINALLY, REGISTER 7 IS INITIALIZED WITH THE STARTING ADDRESS OF THE *
* ISAM TABLE AND THE DIRECTORY FILE IS REPOSITIONED TO THE BEGINNING  *
* OF THE FILE VIA THE POINT SERVICE (X'00010000' OR F'256' IS THE     *
* RELATIVE ADDRESS OF THE BEGINNING OF A FILE.)  IN ADDITION,         *
* REGISTER 3 IS ZEROED OUT TO ACCUMULATE THE AGGREGATE SIZE OF THE    *
* LOAD MODULES.  AND, TIMING IS SET TO X'01' TO INDICATE A SECOND     *
* ITERATION.                                                          *
* ------------------------------------------------------------------- *
               IF    (TIMING,EQ,0)
                     LR    R6,R7
                     SRA   R6,9
                     LA    R6,1(,R6)
                     SLA   R6,12
                     ST    R6,PAGE_TBLENGTH
                     STORAGE   OBTAIN,LENGTH=(R6)
                     ST    R1,PAGE_TBLSTART
                     XR    R6,R6
                     M     R6,=F'92'
                     SRA   R7,12
                     LA    R7,1(,R7)
                     SLA   R7,12
                     ST    R7,ISAM_TBLENGTH
                     STORAGE   OBTAIN,LENGTH=(R7)
                     ST    R1,ISAM_TBLSTART
                     LR    R7,R1
                     MVC   ISAMDIR_TTRL,=F'256'
                     LA    R4,ISAMDIR_TTRL
                     POINT (R10),(R4)
                     NI    0(R9),0
                     XR    R3,R3
                     MVI   TIMING,1
* ------------------------------------------------------------------- *
* THIS IS THE SECOND EODAD FOR DIRECTORY PROCESSING.  REGISTER 7      *
* CONTAINS THE ADDRESS OF THE END OF THE ISAM TABLE.  REGISTER 3      *
* CONTAINS THE AGGREGATE LENGTH OF THE LOAD MODULES.  SHIFTING THIS   *
* VALUE 12 BITS TO THE LEFT AND ADDING 1 TO THE RESULTS YIELDS THE    *
* NUMBER OF PAGES REQUIRED TO SATSIFY THIS AGGREGATE LENGTH.          *
* SHIFTING THIS VALUE 12 BITS TO THE LEFT YIELDS THE LENGTH           *
* CORRESPONDING TO THE NUMBER OF PAGES.                               *
*                                                                     *
* THE AREA MUST RESIDE IN THE CSA.  TO OBTAIN THIS AREA LAMDA MUST    *
* BE IN SUPERVISOR STATE - KEY ZERO.  ONCE THE CSA AREA IS ACQUIRED,  *
* LAMDA REVERTS TO PROBLEM PROGRAM STATE - KEY 8.                     *
*                                                                     *
* FINALLY, TIMING IS SET TO X'03' TO INDICATE THE DIRECRTORY          *
* PROCESSING IS COMPLETED.                                            *
* ------------------------------------------------------------------- *
               ELSE
                     ST    R7,ISAM_TBLSTOP
                     L     R11,DIRECTRY_BUFFER
                     STORAGE   RELEASE,LENGTH=4096,ADDR=(R11)
                     SRL   R3,12
                     LA    R3,1(,R3)
                     SLL   R3,12
                     MODESET  KEY=ZERO,MODE=SUP
                     STORAGE   OBTAIN,LENGTH=(R3),SP=241,CALLRKY=NO
                     ST    R1,CSADDR
                     MODESET  KEY=NZERO,MODE=PROB
                     MVI   TIMING,3
               IFEND
         DOEND
         BOT
*
MOVE_DIRECTRY   MVC   0(0,R7),0(R6)
*
         DROP   R6,R7
* ------------------------------------------------------------------- *
* FIND_ISAMLPDE PROCESSES THE LPDE CHAIN.  THE LPDE'S ARE LOCATED IN  *
* THE PLPA.  EACH LPDE IS 40 BYTES LONG.  THEY ARE NOT CHAINED        *
* TOGETHER AS CDE'S ARE.  THEY ARE LOCATED IN CONTIGUOUS STORAGE      *
* POINTED TO BY CVTLPDIA.                                             *
*                                                                     *
* AS EACH LPDE IS ACCESSED, LAMDA SCANS THE ISAM TABLE TO SEE IF IT   *
* CONTAINS A CORRESPONDING ENTRY.  IF IT DOES, THE ADDRESS OF THE     *
* LPDE IS STORED IN THE CORRESPONDING ISAM TABLE ENTRY.               *
*                                                                     *
* AFTER SCANNING THE LPDE CHAIN, LAMDA PROCESSES THE ISAM TABLE       *
* OBTAINING THE CORRESPOND LPDE ADDRESS AND MOVING A COPY OF THE      *
* LPDE TO THE ECSA TABLE FOR RECOVERY PURPOSES.                       *
* ------------------------------------------------------------------- *
         USING  LPDE,R14
         USING  ISAMTBL,R10
         USING  ISAMCSA_HEADER,R9
         USING  ISAMCSA_TABLEDS,R8
*
FIND_ISAMLPDE   TOP
         L     R15,16
         L     R14,CVTLPDIA-CVT(,R15)
         XR    R15,R15
* ------------------------------------------------------------------- *
* THIS LOOP PROCESSES EACH OF THE LPDE'S.  THE ISAM MODULES ARE IN    *
* THE EPLPA AND ARE PREFIXED BY IGG.  THE CORRESPONDING MODULES IN    *
* THE ISAM TABLE ARE PREFIXED BY XGG.  WHEN A MATCH IS FOUND THE      *
* ADDRESS OF THE LPDE IS STORED IN THE CORRESPONDING ISAM TABLE ENTRY *
*                                                                     *
* THE LAST LPDE CONTAINS LOW-VALUES (I.E. X'00')                      *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R14 - ADDRESS OF LPDE                                *
*                R10,R11 - STARTING & ENDING ADDRESSES OF ISAM TABLE  *
* ------------------------------------------------------------------- *
         WHILE (LPDECHN(40),NE,=40X'00')
         DO    *
               LM    R10,R11,ISAM_TBLSTART
               WHILE (R10,LT,R11),AND
               WHILE (ISAMTBL_NAME+1(7),NE,LPDENAME+1),OR
               WHILE (LPDENAME,NE,'I')
               DO    *
                     LA    R10,ISAMTBL_NXTENTRY
               DOEND
               IF    (R10,LT,R11)
                     ST    R14,ISAMTBL_LPDEADDR
               IFEND
               LA    R14,40(,R14)
         DOEND
* ------------------------------------------------------------------- *
* THIS SECTION MOVES A COPY OF THE LPDE TO AN ECSA TABLE FOR          *
* RECOVERY PURPOSES.  IN ADDITION, THE ADDRESS OF THE LDPE IS MOVED   *
* TO ECSA TABLE AS WELL.                                              *
*                                                                     *
* THE AMODE HAS TO BE CHANGED TO 31-BIT BECAUSE THIS IS AN ECSA TABLE *
* FURTHER, LAMDA MUST BE IN KEY ZERO-SUPERVISOR STATE TO MODIFY THE   *
* ECSA TABLE.                                                         *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R10 & R11 - STARTING & ENDIND ADDRESS OF ISAM TABLE  *
* ------------------------------------------------------------------- *
         SETAMODE   31
         MODESET   KEY=ZERO,MODE=SUP
         LM    R10,R11,ISAM_TBLSTART
         L     R9,ISAMCSA_TBLADDR
         L     R8,ISAMCSA_TBLSTART
         WHILE (R10,LT,R11)
         DO    *
               L    R14,ISAMTBL_LPDEADDR
               ST   R14,ISAMCSA_LPDEADDR
               MVC   ISAMCSA_LPDENTRY,LPDECHN
               LA    R8,ISAMCSA_NXTENTRY
               LA    R10,ISAMTBL_NXTENTRY
         DOEND
         MODESET   KEY=NZERO,MODE=PROB
         SETAMODE   24
         BOT
*
         DROP   R14,R10
* ------------------------------------------------------------------- *
* LOAD_ISAMLPA LOADS THE ISAM MODULES INTO THE CSA SPACE ALLOCATED    *
* DURING THE DIRECTORY PROCESSING.  THE LOAD SERVICE USES THE ADDR    *
* OPTION.  THIS TYPE OF LOAD DOES NOT CREATE A CDE.  THUS, THESE      *
* MOUDULES WILL NOT BE DELETED WHEN THE TASK OR ADDRESS SPACE         *
* TERMINATES.                                                         *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R10 & R11 - STARTING & ENDING ADDRESS OF ISAM TABLE  *
*                R9        - DIRECTROY ENTRY FOR LOAD SERVICE         *
*                R8        - ISAM MODULES FILE DCB ADDRESS            *
*                R7        - CSA LOAD ADDRESS FOR ISAM MODULES        *
*                R6        - LOAD SERVICE TEMPLASTE                   *
* ------------------------------------------------------------------- *
         USING  ISAMTBL,R10
         USING  PDS2,R9
LOAD_ISAMLPA   TOP
         LM    R10,R11,ISAM_TBLSTART
         LA    R9,LOADATA_AREA
         LA    R8,ISAMLPA_AREA
         L     R7,CSADDR
         LA    R6,LOAD_AREA
* ------------------------------------------------------------------- *
* AS EACH ENTRY OF THE ISAM TABLE IS PROCESSED, THE LOAD SERVICE      *
* TEMPLATE IS INITIALIZED, THE DIRECTORY ENTRY AREA FOR THE LOAD      *
* SERVICE IS INITIALIZED.  SINCE THE USERDATA FIELD IS VARIABLE THE   *
* LENGTH CALCULATION IS PERFORMED USING THE INDC FIELD OF THE         *
* DIRECTORY ENTRY.  IN ADDTION, THE FTB1 BYTE IS EXAMINED TO          *
* DETERMINE IF THE LOAD ADDRESS MUST BE ON A PAGE BOUNDARY.  IF IT    *
* IS, REGISTER 7 IS ROUNDED UP TO THE NEXT PAGE BOUNDARY.             *
*                                                                     *
* AFTER THE LOAD SERVICE, THE LOAD POINT, ENTRY POINT & MODULE LENGTH *
* ARE STORED IN THE ISAM TABLE ENTRY.  REGISTERS 0 & 1 CONTAIN THE    *
* ENTRY POINT & MODULE LENGTH, RESPECTIVELY.  REGISTER 7 CONTAINS THE *
* LOAD ADDRESS.                                                       *
* ------------------------------------------------------------------- *
         WHILE (R10,LT,R11)
         DO    *
               XC    LOADATA_AREA,LOADATA_AREA
               MVC   PDS2NAME,ISAMTBL_NAME
               MVC   PDS2TTRP,ISAMTBL_TTR
               XR    R15,R15
               IC    R15,ISAMTBL_INDC
               N     R15,=F'31'
               SLA   R15,1
               EX    R15,MOVE_DIRDATA
               MVC   LOAD_AREA,LOAD_LIST
               IF    (PDS2FTB1,ONES,PACBIT20)
                     SRL   R7,12
                     LA    R7,1(,R7)
                     SLL   R7,12
               IFEND
               LOAD  DE=(R9),DCB=(R8),ADDR=(R7),SF=(E,(R6))
               SLL   R1,3
               STM   R0,R1,ISAMTBL_ENTRYPT
               ST    R7,ISAMTBL_LOADPT
               AR    R7,R1
               LA    R10,ISAMTBL_NXTENTRY
         DOEND
         BOT
*
MOVE_DIRDATA   MVC   PDS2INDC(0),ISAMTBL_INDC
*
               DROP  R10,R9
* ------------------------------------------------------------------- *
* SORT_ISAMTBL SORTS THE ISAM TABLE BY THE LPDE ADDRESS IN ASCENDING  *
* SEQUENDE.  IT IS A SIMPLE BUBBLE SORT.                              *
*                                                                     *
* AFTER SORTING, THE ISAM TABLE IS PROCESSED TO DETERMINE THE START   *
* AND STOP ADDRESSES FOR THE PAGE FIXING SERVICE.                     *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R14 & R15 - ISAM TABLE STARTING & ENDING ADDRESSES   *
*                R11       - BASE REGISTER FOR BUBBLE SORT COMPARISON *
* ------------------------------------------------------------------- *
         USING ISAMTBL,R14
         USING SORTBL,R11
SORT_ISAMTBL   TOP
         LM    R14,R15,ISAM_TBLSTART
         WHILE (R14,LT,R15)
         DO    *
               LA    R11,ISAMTBL_NXTENTRY
               WHILE (R11,LT,R15)
               DO    *
                     IF    (ISAMTBL_LPDEADDR,GT,SORTBL_LPDEADDR)
                           MVC   HOLDTBL_ENTRY,ISAMTBL_ENTRY
                           MVC   ISAMTBL_ENTRY,SORTBL_ENTRY
                           MVC   SORTBL_ENTRY,HOLDTBL_ENTRY
                     IFEND
                     LA    R11,SORTBL_NXTENTRY
               DOEND
               LA    R14,ISAMTBL_NXTENTRY
         DOEND
* ------------------------------------------------------------------- *
* THIS SECTION DETERMINES THE ADDRESSES OF THE PAGES TO BE FIXED      *
* FOR THE MODIFICATION OF THE LPDE'S.                                 *
*                                                                     *
* SINCE THE SORT SEQUENCED THE ISAM TABLE IN LPDE ADDRESS, THE FIRST  *
* ENTRY WILL CONTAIN THE LPDE WITH THE LOWEST ADDRESS.  STRIPPING OF  *
* THE LAST 12 BITS YIELDS THE STARTING ADDRESS OF THE PAGE THAT       *
* CONTAINS THE LPDE.  ADDING 4095 (I.E. X'FFF') GIVES THE ENDING      *
* ADDRESS OF THE PAGE.  THE SEARCH USES THESE TWO ADDRESSES TO SEE IF *
* THE LPDE STARTING OR ENDING ADDRESS IS BETWEEN THESE TWO ADDRESSES. *
* IF IT IS, THE NEXT ISAM TABLE ENTRY IS CHECKED.  IF NOT, THE        *
* CURRENT PAGE FRAM ADDRESSES ARE SAVED; THE NEXT PAGE FRAME LOCATED; *
* AND THE NEW PAGE FRAME BOUNDARIES ESTABLISHED.                      *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R14 & R15 - ISAM TABLE STARTING & ENDING ADDRESSES   *
*                R11       - PAGE TABLE ENTRY                         *
*                R10       - PAGE FRAME ENDING ADDRESS                *
*                R9        - PAGE FRAME STARTING ADDRESS              *
*                R8        - ADDRESS OF THE END OF AN LPDE MINUS 1    *
*                R7        - ADDRESS OF THE START OF AN LPDE          *
*                                                                     *
* N.B. - THE END OF THE LPDE IS NOT USED.  THE ADDRESS OF THE LAST    *
*        BYTE OF THE LPDE IS USED.  THE PAGE FRAME WILL NOT CONTAIN   *
*        THE END OF AN LDPE IF THE START OF THE NEXT LPDE IS ON THE   *
*        START ADDRESS OF THE NEXT PAGE.  THE END OF AN LPDE IS THE   *
*        START OF THE NEXT LPDE.  THUS, THE ADDRESS OF THE LAST BYTE  *
*        OF THE LPDE IS THE ADDRESS TO BE INTERROGATED.  FOR, IF THIS *
*        ADDRESS IS EQUAL TO THE ENDING ADDRESS OF THE PAGE, THE      *
*        LPDE IS MAPPED TO THE CURRENT PAGE.                          *
* ------------------------------------------------------------------- *
         LM    R14,R15,ISAM_TBLSTART
         L     R11,PAGE_TBLSTART
         L     R9,ISAMTBL_LPDEADDR
         SRA   R9,12
         SLA   R9,12
         LA    R10,4095(,R9)
         WHILE (R14,LT,R15)
         DO    *
               L     R7,ISAMTBL_LPDEADDR
               LA    R8,39(,R7)
* ------------------------------------------------------------------- *
* IF THE ADDRESS OF THE LAST BYTE OF THE LPDE (REGISTER 8) IS LESS    *
* THAN OR EQUAL TO THE ENDING ADDRESS OF THE CURRENT PAGE, THE NEXT   *
* ISAM TABLE ENTRY IS CHECKED.                                        *
*                                                                     *
* IF NOT.  REGISTER 6 IS LOADED WITH THE ENDING ADDRESS OF THE        *
* CURRENT PAGE.  ADDING 4096 YIELDS THE ENDING ADDRESS OF THE NEXT    *
* PAGE.  IF THE STARTING ADDRESS OF THE LPDE (REGISTER 7) IS LESS     *
* THAN THE ENDING ADDRESS OF THE NEXT PAGE, THEN THE TWO PAGES ARE    *
* CONTIGUOUS.  LOAD REGISTER 10 WITH THE ENDING ADDRESS OF THE NEXT   *
* PAGE (REGISTER 6).  IF REGISTER 8 IS STILL GREATER THAN REGISTER    *
* 10, THE LPDE'S ARE SPANNING THREE CONTIGUOUS.  ADDING 4096 TO       *
* REGISTER 10 GIVES THE ENDING ADDRESS OF THE THIRD PAGE.  REGISTER   *
* 9 STILL CONTAINS THE STARTING ADDRESS OF THE FIRST PAGE.            *
* ------------------------------------------------------------------- *
               IF    (R8,GT,R10)
                     LR    R6,R10
                     A     R6,=F'4096'
                     IF    (R7,LT,R6)
                           LR    R10,R6
                           IF    (R8,GT,R6)
                                 A     R10,=F'4096'
                           IFEND
* ------------------------------------------------------------------- *
* IF REGISTER 7 IS GREATER THAN OR EQUAL TO THE ENDING ADDRESS OF     *
* THE NEXT PAGE, THE PAGES ARE NOT CONTIGUOUS.  REGISTERS 9 & 10      *
* CONTAIN THE STARTING AND ENDING ADDRESSES OF THE CONTIGUOUS PAGES.  *
* THESE ARE STORED IN THE PAGE TABLE ENTRY. REGISTER 11 IS UPDATED TO *
* THE NEXT ENTRY.  THE STARTING ADDRESS OF THE PAGE IS DETERMINED     *
* FROM THE LPDE ADDRESS IN REGISTER 7 AND LOADED IN REGISTER 9.  THE  *
* ENDING ADDRESS IS CALCULATED BY ADDING 4095 TO R9 AND LOADING IT    *
* INTO REGISTER 10.  IF THE ADDRESS OF THE LAST BYTE OF THE LPDE      *
* (REGISTER 8) IS GREATER THAN THE ENDING ADDRESS OF THE PAGE         *
* (REGISTER 10), ADD 4096 TO R10 TO GIVE THE ENDING ADDRESS OF THE    *
* NEXT PAGE.                                                          *
* ------------------------------------------------------------------- *
                     ELSE
                           STM   R9,R10,0(R11)
                           LA    R11,8(,R11)
                           SRL   R7,12
                           SLL   R7,12
                           LR    R9,R7
                           LA    R10,4095(,R9)
                           IF    (R8,GT,R10)
                                 A     R10,=F'4096'
                           IFEND
                     IFEND
               IFEND
               LA    R14,ISAMTBL_NXTENTRY
         DOEND
* ------------------------------------------------------------------- *
* AFTER EXAMINING THE ISAM TABLE, REGISTERS 9 & 10 CONTAIN THE LAST   *
* SET OF PAGE ADDRESSES.  THESE ARE SAVED AS WELL AS THE ADDRESS OF   *
* THE LAST ENTRY IN THE PAGE TABEL.                                   *
* ------------------------------------------------------------------- *
         STM   R9,R10,0(R11)
         ST    R11,PAGE_TBLSTOP
         BOT
*
         DROP  R11,R14
* ------------------------------------------------------------------- *
* UPDATE_ISAMLPDE USES THE PGSER SERVICES TO FIX AND UNPROTECT THE    *
* PAGES DETERMINED PREVIOUSLY.  THE LPDE'S WHOSE ADDRESSES ARE IN     *
* THE ISAM TABLE ENTRY ARE UPDATED WITH THE NEW LOAD ADDRESS, ENTRY   *
* POINT & MODULE LENGTH.  FINALLY, THE PAGES ARE PROTECTED.           *
*                                                                     *
* LAMDA MUST BE IN KEY ZERO-SUPERVISOR STATE TO REQUEST THE PAGE      *
* SERVICES AND UPDATE THE LPDES.  AFTER PROTECTING THE PAGES, LAMDA   *
* REVERTS TO KEY 8-PROBLEM PROGRAM STATE.                             *
* ------------------------------------------------------------------- *
         USING ISAMTBL,R14
         USING LPDE,R11
UPDATE_ISAMLPDE   TOP
         MODESET  KEY=ZERO,MODE=SUP
         LM    R10,R11,PAGE_TBLSTART
* ------------------------------------------------------------------- *
* EACH PAGE TABLE ENTRY CONTAINS THE STARTING AND ENDING ADDRESS      *
* FOR THE DESIRED PAGES.  AS EACH SET OF PAGES IS FIXED, THEY ARE     *
* ALSO UNPROTECTED TO ALLOW THE UPATING OF THE LPDE'S.                *
*                                                                     *
* AFTER THE PAGE FIX, A CHECK FOR A RETURN CODE OF ZERO IS MADE. IF   *
* IT IS NON-ZERO, A WAIT IS ISSUED FOR THE ASYNCHRONOUS EVENT.        *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R10 & R11 - PAGE TABLE STARTING & ENDING ADDRESSES   *
*                R8 & R9   - STARTING & ENDING ADDRESS FOR PGSER      *
*                R7        - ECB ADDRESS FOR ASYNCHRONOUS PAGEFIX     *
* ------------------------------------------------------------------- *
         WHILE (R10,LE,R11)
         DO    *
               LM    R8,R9,0(R10)
               XC    PGSER_ECB,PGSER_ECB
               LA    R7,PGSER_ECB
      PGSER    R,FIX,A=(R8),EA=(R9),ECB=(R7),LONG=Y,TCB=0,BRANCH=Y
               IF    (R15,NOT_ZERO)
                     WAIT   ECB=(R7)
               IFEND
               PGSER    R,UNPROTECT,A=(R8),EA=(R9)
               LA    R10,8(,R10)
         DOEND
* ------------------------------------------------------------------- *
* THIS IS THE CRUX OF THE PROGRAM.  THIS SECTION UPDATES THE LPDE.    *
* THE FIELDS MODIFIED ARE THE ENTRY POINT, LOAD POINT AND MODULE      *
* LENGTH.                                                             *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R14 & R15 - ISAM TABLE STARTING & ENDING ADDRESSES   *
*                R11       - LPDE ADDRESS                             *
* ------------------------------------------------------------------- *
         LM    R14,R15,ISAM_TBLSTART
         WHILE (R14,LT,R15)
         DO    *
               L     R11,ISAMTBL_LPDEADDR
               MVC   LPDENTP,ISAMTBL_ENTRYPT
               MVC   LPDEXTLN,ISAMTBL_MODLEN
               MVC   LPDEXTAD,ISAMTBL_LOADPT
               LA    R14,ISAMTBL_NXTENTRY
         DOEND
* ------------------------------------------------------------------- *
* FINALLY, THE PAGES WILL REMAIN FIXED BUT NOT UNPROTECTED.  THIS     *
* SECTION PROTECTS THE PAGES THAT WERE UNPROTECTED PREVIOUSLY.        *
*                                                                     *
* AFTER COMPLETING THE PAGE SERVICE REQUESTS, LAMDA REVERTS TO KEY 8- *
* PROBLEM PROGRAM STATE.                                              *
*                                                                     *
* REGISTER USAGE:                                                     *
*                R10 & R11 - PAGE TABLE STARTING & ENDING ADDRESSES   *
* ------------------------------------------------------------------- *
         LM    R10,R11,PAGE_TBLSTART
         WHILE (R10,LE,R11)
         DO    *
               LM    R8,R9,0(R10)
               PGSER    R,PROTECT,A=(R8),EA=(R9)
               LA    R10,8(,R10)
         DOEND
         MODESET  KEY=NZERO,MODE=PROB
         BOT
         DROP  R14,R11
         LTORG
WTO_TBLSTART   DC    A(100,WTOLIST_01,WTOLEN01-1)
               DC    A(104,WTOLIST_02,WTOLEN02-1)
               DC    A(108,WTOLIST_03,WTOLEN03-1)
               DC    A(112,WTOLIST_04,WTOLEN04-1)
               DC    A(116,WTOLIST_05,WTOLEN05-1)
               DC    A(120,WTOLIST_06,WTOLEN06-1)
               DC    A(124,WTOLIST_07,WTOLEN07-1)
               DC    A(128,WTOLIST_08,WTOLEN08-1)
OPEN_LIST     OPEN  (OPEN_LIST,,OPEN_LIST),MF=L
OPEN_LENGTH   EQU   *-OPEN_LIST
CLOSE_LIST    CLOSE (CLOSE_LIST,,CLOSE_LIST),MF=L
CLOSE_LENGTH   EQU   *-CLOSE_LIST
LOAD_LIST      LOAD                                                    +
               DE=LOAD_LIST,                                           +
               DCB=LOAD_LIST,                                          +
               ADDR=LOAD_LIST,                                         +
               SF=L
LOAD_LENGTH    EQU   *-LOAD_LIST
ISAMDIR_LIST   DCB                                                     +
               DDNAME=ISAMDIR,                                         +
               MACRF=(RP),                                             +
               EODAD=ISAMDIR_LIST,                                     +
               DSORG=PS,                                               +
               RECFM=U,                                                +
               KEYLEN=8,                                               +
               LRECL=300,                                              +
               BLKSIZE=300
ISAMDIR_LENGTH   EQU   *-ISAMDIR_LIST
               READ                                                    +
               READECB,                                                +
               SF,                                                     +
               ISAMDIR_LIST,                                           +
               ISAMDIR_LIST,                                           +
               'S',                                                    +
               MF=L
READECB_LENGTH   EQU   *-READECB
ISAMLPA_LIST   DCB                                                     +
               DDNAME=ISAMLPA,                                         +
               MACRF=(R),                                              +
               DSORG=PO
ISAMLPA_LENGTH   EQU   *-ISAMLPA_LIST
WTOLIST_01     WTO   'PACCVT NOT IN THE FLPA',                         +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN01       EQU   *-WTOLIST_01
WTOLIST_02     WTO   'PACCVT CORRUPTED - EYECACTHER OVERLAID',         +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN02       EQU   *-WTOLIST_02
WTOLIST_03     WTO   'PACCVT CORRUPTED - CSA TABLE ADDRESS INVALID',   +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN03       EQU   *-WTOLIST_03
WTOLIST_04     WTO   'PACCVT CORRUPTED - ISAMCSA ENTRY NOT FOUND',     +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN04       EQU   *-WTOLIST_04
WTOLIST_05     WTO   'PACCVT CORRUPTED - ISAMCSA ADDRESS NOT VALID',   +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN05       EQU   *-WTOLIST_05
WTOLIST_06     WTO   'ISAMCSA TABLE CORRUPTED - ENTIRE TABLE IS NOT IN +
               THE CSA',                                               +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN06       EQU   *-WTOLIST_06
WTOLIST_07     WTO   'ISAMCSA TABLE CORRUPTED - EYECATCHER ADDRESS INVA+
               LID',                                                   +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN07       EQU   *-WTOLIST_07
WTOLIST_08     WTO   'ISAMCSA TABLE CORRUPTED - EYECATCHER INVALID',   +
               ROUTCDE=1,                                              +
               DESC=(11),                                              +
               MF=L
WTOLEN08       EQU   *-WTOLIST_08
         SAVEAREA
               DS    0F
OPEN_AREA      DS    CL(OPEN_LENGTH)
               DS    0F
CLOSE_AREA     DS    CL(CLOSE_LENGTH)
               DS    0F
LOAD_AREA      DS    CL(LOAD_LENGTH)
               DS    0F
ISAMDIR_AREA   DS    CL(ISAMDIR_LENGTH)
               DS    0F
READECB_AREA   DS    CL(READECB_LENGTH)
               DS    0F
ISAMLPA_AREA   DS    CL(ISAMLPA_LENGTH)
WTOAREA        DS    CL256
ISAMCSA_TBLADDR   DS    F
DIRECTRY_BUFFER   DS    F
CSADDR            DS    F
ISAM_TBLENGTH     DS    F
ISAM_TBLSTART     DS    F
ISAM_TBLSTOP      DS    F
ISAMDIR_TTRL      DS    F
PAGE_TBLENGTH     DS    F
PAGE_TBLSTART     DS    F
PAGE_TBLSTOP      DS    F
PGSER_ECB         DS    F
LOADATA_AREA      DS    CL92
TIMING            DS    C
VERIFY            DS    C
HOLDTBL_ENTRY     DS    CL92
         FINISH
