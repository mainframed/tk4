DCPEXPD2 TITLE 'DATA DE-COMPRESSION UTILITY'
***********************************************************************
*        PDSDOC *DATA UTILITY - DE-COMPRESS DATA......................*
*                                                                     *
*        PROGRAM ID. :             DCPEXPD2                           *
*                                                                     *
*        DATE WRITTEN :            APRIL     1994                     *
*                                                                     *
*        AUTHOR :                  D.H.CARTWRIGHT.                    *
*        COPYRIGHT:                DARNICK COMPUTING LTD.             *
*                                                                     *
*        LOCATION :                SUTTON COLDFIELD                   *
*                                  ENGLAND                            *
*                                                                     *
*        HISTORY  :                                                   *
*                                                                     *
* 11MAY94  DC   STARTED WRITING                                       *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        PURPOSE                                                      *
*       ---------                                                     *
*                                                                     *
* THIS IS A DE-COMPRESSION PROGRAM FOR SMF DATA. IT UTILISES THE      *
* CHARACTERISTICS OF SMF DATA TO ACHIEVE HIGH LEVELS OF SPACE         *
* REDUCTION.                                                          *
* IT DOES THIS BY COMPARING EACH BYTE OF AN SMF RECORD TO THE SAME    *
* BYTE IN THE PREVIOUS RECORD. EQUAL BYTES ARE NOT COPIED, MERELY     *
* COUNTED.                                                            *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        LIMITATIONS                                                  *
*       ------------                                                  *
*                                                                     *
* THIS PROGRAM WILL ONLY PROCESS SEQUENTIAL DATASETS HAVING           *
* DEFINED RECORD FORMATS; IT WILL NOT PROCESS RECFM=U FILES.          *
*                                                                     *
* THE COMPRESSION/DECOMPRESSION SEQUENCE IS DESIGNED TO USE           *
* VARIABLE LENGTH RECORDS FOR THE COMPRESSED DATA. IT SHOULD          *
* WORK WITH FIXED LENGTH RECORDS, BUT ON DECOMPRESSION SOME           *
* EXTRA RECORDS CONTAINING HEX '00' MAY BE APPENDED TO THE DATA.      *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*       INPUT                                                         *
*       -----                                                         *
*                                                                     *
* 1)SYSUT1 - DEFINES THE INPUT FILE                                   *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*       OUTPUT                                                        *
*       ------                                                        *
*                                                                     *
* 1)SYSUT2 - DEFINES THE OUTPUT FILE. DCB INFORMATION MUST BE         *
*            PROVIDED. THE RECOMENDED VALUES FOR 3380 ARE;            *
*            RECFM=VBS,LRECL=32756,BLKSIZE=23476                      *
*                                                                     *
* 2)SYSPRINT - MESSAGE DATASET. VBA RECORDS.                          *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
*        PRINT ON,GEN              SHOW MACRO EXPANSIONS
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
         SPACE 1
DCPEXPD2 CSECT ,                   MAIN CSECT
         SPACE 1
***********************************************************************
*        REGISTER EQUATES AND USAGES.                                 *
***********************************************************************
         SPACE 1
R0       EQU   0
R1       EQU   1                   WORK
R2       EQU   2                   DCB TABLE POINTER,STRING LENGTH
REG2     EQU   R2                  WORK REGISTER IN 'SCAN' MACRO
R3       EQU   3                   DEBUGGING COPY OF INPUT POINTER
R4       EQU   4                   LINKAGE RETURN
R5       EQU   5                   STRING CONTROL BYTE POINTER
R6       EQU   6                   RECORD 1 POINTER
REC1     EQU   6                   RECORD 1 POINTER
R7       EQU   7                   RECORD 1 LENGTH
REC1LEN  EQU   7                   RECORD 1 LENGTH
R8       EQU   8                   RECORD 2 POINTER
REC2     EQU   8                   RECORD 2 POINTER
R9       EQU   9                   RECORD 2 LENGTH
REC2LEN  EQU   9                   RECORD 2 LENGTH
R10      EQU   10                  OUTPUT RECORD POINTER
R11      EQU   11                  OUTPUT RECORD LENGTH
R12      EQU   12                  BASE REGISTER 2
R13      EQU   13                  SAVE AREA / BASE REG. 1
R14      EQU   14                  .
R15      EQU   15                  .
         SPACE 1
         LCLA  &STRLEN             MINIMUM DUPLICATION LENGTH
&STRLEN  SETA  2                   VALUE SET FOR THIS VERSION
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12) STANDARD HOUSEKEEPING
         GOSUB INITIAL             PERFORM INITIALISATION
         BAL   R4,SYSUT1RD         GO READ A COMPRESSED RECORD
         EJECT
***********************************************************************
*        MAIN PROCESSING ROUTINE                                      *
***********************************************************************
         SPACE 1
MAINLINE DS    0H                  PROGRAM FUNCTION
         SPACE 1
         BAL   R4,COPYREC          SAVE THE LAST RECORD
         BAL   R4,EXPAND           GO DE-COMPRESS NEXT RECORD
         BAL   R4,SYSUT2WT         WRITE OUTPUT
         B     MAINLINE            GO ROUND THE LOOP
         TITLE 'DATA DE-COMPRESSION PROCESSING'
***********************************************************************
*        COPY ACROSS THE DATA TO RECEIVING FIELD
***********************************************************************
         SPACE 2
EXPAND   DS    0H                  DE-COMPRESS DATA
         SUBIN SAVE=(R4)           SUBROUTINE ENTRY
         USING SCB,R5              ESTABLISH STRING CONTROL ADDRESSING
EXPLOOP  DS    0H
         LR    R3,R5               COPY LAST SCB ADDRESS
         C     R10,BUFFSTOP        END OF OUTPUT RECORD?
         BNL   EXPANDX             YES, EXIT
         C     REC2,R2END          HAVE WE RUN OUT OF INPUT?
         BL    *+4+4               NO, CARRY ON
         BAL   R4,SYSUT1RD         YES, GO READ A COMPRESSED RECORD
         LR    R5,REC2             NEXT INPUT BYTE SHOULD BE AN SCB
         XR    R11,R11             CLEAR LENGTH REGISTER
         IC    R11,SCBBYTE1        LOAD FIRST/NEXT STRING CONTROL BYTE
         TM    SCBBYTE1,SCBTYPEB   CHECK COMPRESSION TYPE
         BO    EXPLOOPB            NOT TYPE 'A', GO PROCESS
         EX    R11,MVCTYPEA        COPY DATA FROM PREVIOUS RECORD
         LA    REC2,1(,REC2)       SKIP INPUT SCB
         B     EXPINCR             GO UPDATE THE POINTERS
         SPACE 1
EXPLOOPB DS    0H                  DATA CONTAINED IN INPUT RECORD
         C     R10,BUFFSTOP        END OF OUTPUT RECORD?
         BNL   EXPANDX             YES, EXIT
*        BL    *+4+4               IF SO, NO DATA CAN FOLLOW
*        DC    AL4(0)              YES, ABEND S0C1              *TEST*
         N     R11,=F'63'          STRIP OFF TOP TWO BITS
         TM    SCBBYTE1,SCBTYPEC   CHECK COMPRESSION TYPE
         BO    EXPLOOPC            NOT TYPE 'B', GO PROCESS
         EX    R11,MVCTYPEB        ELSE COPY DATA FROM CURRENT RECORD
         LA    REC2,2(R11,REC2)    SKIP INPUT SCB + DATA
         B     EXPINCR             GO UPDATE THE POINTERS
         SPACE 1
EXPLOOPC DS    0H                  DATA IS DUPLICATE OF NEXT BYTE
         MVC   0(1,R10),1(REC2)    COPY THE MODEL
         LTR   R11,R11             TEST LENGTH OF DATA
         BZ    EXPLOOPD            ONLY ONE BYTE
         BCTR  R11,0               DECREMENT AGAIN
         EX    R11,MVCTYPEC        PROPAGATE THE DATA
         LA    R11,1(,R11)         RE-INSTATE WHAT WE TOOK AWAY
EXPLOOPD DS    0H                  UPDATE INPUT POINTER
         LA    REC2,2(,REC2)       SKIP INPUT SCB + DATA MODEL
*        B     EXPINCR             GO UPDATE THE POINTERS
         SPACE 1
EXPINCR  DS    0H                  INCREMENT THE COUNTERS
         LA    REC1,1(R11,REC1)    SKIP PREVIOUS DATA
         LA    R10,1(R11,R10)      SKIP OUTPUT DATA
         C     R10,BUFFSTOP        END OF OUTPUT RECORD?
         BNL   EXPANDX             YES, EXIT
         C     REC2,R2END          HAVE WE RUN OUT OF INPUT?
         BL    EXPLOOP             NO, GO PROCESS NEXT SCB
         BAL   R4,SYSUT1RD         YES, GO READ A COMPRESSED RECORD
         B     EXPLOOP             THEN FILL UP OUTPUT RECORD
         SPACE 2
EXPANDX  DS    0H                  END OF DE-COMPRESSION ROUTINE
         DROP  R5                  END STRING CONTROL ADDRESSABILITY
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         SPACE 1
MVCTYPEA MVC   0(*-*,R10),0(REC1)  COPY FROM PREVIOUS RECORD  *EXECUTE*
MVCTYPEB MVC   0(*-*,R10),1(REC2)  COPY FROM INPUT RECORD     *EXECUTE*
MVCTYPEC MVC   1(*-*,R10),0(R10)   COPY FROM OUTPUT RECORD    *EXECUTE*
         EJECT
***********************************************************************
*        END OF PROCESSING. TIDY UP, REPORT AND LEAVE.                *
***********************************************************************
         SPACE 1
STOPPGM  DS    0H                  NOW SHUTTING DOWN
         GOSUB REPORT              GO ISSUE FINAL REPORT
         SPACE 1
         GOSUB CLOSEM              GO CLOSE ALL FILES
         LH    R0,R1LEN            GET BUFFER LENGTH
         L     R1,R1BUFF           .. AND ADDRESS
         BAL   R4,FREESTOR         GO RELEASE THE STORAGE
         LH    R0,BUFFLEN          GET BUFFER LENGTH
         L     R1,BUFFADD          .. AND ADDRESS
         BAL   R4,FREESTOR         GO RELEASE THE STORAGE
         SPACE 2
ENDOFPGM DS    0H                  NOW SHUTTING DOWN
         PGMOUT RC=RETCODE         EXIT PROGRAM
         TITLE 'INITIALISATION PROCESSING'
***********************************************************************
*        OPEN SUPPLIED DD CARDS, ACQUIRE STORAGE                      *
***********************************************************************
         SPACE 1
INITIAL  DS    0H                  PROGRAM INITIALISATION
         RIN   ,                   SUBROUTINE ENTRY
         BAL   R4,OPENEM           GO OPEN SUPPLIED DD CARDS
         SPACE 2
INITIALO DS    0H                  INITIALISE OUTPUT BUFFER
         SR    R0,R0               CLEAR REG. ZERO
         LA    R2,SYSUT2           POINT TO OUTPUT DCB
         USING IHADCB,R2           ESTABLISH DCB ADDRESSABILITY
         LH    R11,DCBLRECL        GET RECORD LENGTH
         LR    R0,R11              COPY OUTPUT LENGTH
         LR    R7,R11              COPY OUTPUT LENGTH
         STH   R7,R1LEN            REMEMBER WORKING LENGTH
         STH   R11,BUFFLEN         REMEMBER WORKING LENGTH
         BAL   R4,GETSTORE         GET A WORK AREA FOR ONE RECORD
         ST    R1,BUFFADD          SAVE ITS ADDRESS
         LR    R10,R1              SET OUTPUT POINTER
         LA    R4,0(R10,R11)       SET END OF OUTPUT POINTER
         ST    R4,BUFFEND          SAVE THIS ADDRESS
         BAL   R4,CLEAR            GO CLEAR THE BUFFER
         LR    R0,R7               GET ANOTHER BUFFER FOR SAVE IMAGE
         BAL   R4,GETSTORE         GET A WORK AREA FOR ONE RECORD
         ST    R1,R1BUFF           SAVE ITS ADDRESS
         LR    REC1,R1             SET OUTPUT POINTER
         BAL   R4,CLEAR            GO CLEAR THE BUFFER
         SPACE 2
INITIALX DS    0H                  END OF INITIALISATION
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
         DROP  R2                  FINISHED WITH DCB
         TITLE 'SUB-ROUTINES'
***********************************************************************
*        REPORT GENERATION                                            *
***********************************************************************
         SPACE 1
REPORT   SUBIN SAVE=(R4)
         SR    R1,R1               ASK FOR CURRENT TIME
         GOSUB TODDATE             GO FORMAT TOD-CLOCK
         DATE  HEADDATE,FORMAT='DD MMM YY',FROM=TODPJUL FORMAT DATE ..
         MVC   HEADTIME,TODTIME    .. AND TIME IN HEADING
         LA    R2,PRINTSW          GET MDCB ADDRESS
*        AP    PAGECOUN,ONE        ADD ONE TO PAGE COUNTER
*        MVC   HEADPAGE,EDITPL2    MOVE IN EDIT MASK
*        ED    HEADPAGE,PAGECOUN   SHOW PAGE NUMBER
         LA    R0,TITLE1           POINT AT PAGE HEADING
         GOSUB WRITEV              GO OUTPUT HEADING
         LA    R0,RPTAHDR2         POINT AT SUB-HEADING
         GOSUB WRITEV              GO OUTPUT HEADING
         LA    R0,RPTAHDR3         POINT AT COLUMN HEADINGS
         GOSUB WRITEV              GO OUTPUT HEADING
         EJECT
***********************************************************************
*        CREATE REPORT DETAIL LINE 1                                  *
***********************************************************************
         SPACE 1
         MVC   RPTADITM(L'RADIRECS),RADIRECS MOVE ITEM NAME
         LA    R2,SYSUT1SW         POINT TO MDCB
         USING MDCB,R2             ESTABLISH MDCB ADDRESSABILITY
         CVB   R1,MDCBCNT          GET INPUT COUNT
         LR    R0,R1               SAVE VALUE
         LA    R15,RPTADIN+4       POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LA    R2,SYSUT2SW         POINT TO OUTPUT MDCB
         CVB   R1,MDCBCNT          GET RECORD COUNT
         LA    R1,1(,R1)           CORRECT THE FIGURE
         LR    R3,R1               SAVE VALUE
         LA    R15,RPTADOUT+5      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LR    R1,R3               RESTORE INPUT VALUE
         BAL   R4,PERCENT0         GO CALCULATE PERCENTAGE
         LA    R15,RPTADPCT+2      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LA    R0,RPTADETL         POINT AT DETAIL LINE
         LA    R2,PRINTSW          GET MDCB ADDRESS
         GOSUB WRITEV              GO OUTPUT LINE
         EJECT
***********************************************************************
*        CREATE REPORT DETAIL LINE 2                                  *
***********************************************************************
         SPACE 1
         LA    R1,RPTADITM         POINT TO AREA TO CLEAR
         LA    R0,RPTADCLN         SET ITS LENGTH
         BAL   R4,CLEAR            GO CLEAR IT
         MVC   RPTADITM(L'RADIBYTS),RADIBYTS MOVE ITEM NAME
         L     R1,BYTESIN          GET INPUT COUNT
         LR    R0,R1               SAVE VALUE
         LA    R15,RPTADIN+4       POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         L     R1,BYTESOUT         GET OUTPUT COUNT
         LR    R3,R1               SAVE VALUE
         LA    R15,RPTADOUT+5      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LR    R1,R3               RESTORE INPUT VALUE
         BAL   R4,PERCENT0         GO CALCULATE PERCENTAGE
         LA    R15,RPTADPCT+2      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LA    R0,RPTADETL         POINT AT DETAIL LINE
*        LA    R2,PRINTSW          GET MDCB ADDRESS
         GOSUB WRITEV              GO OUTPUT LINE
         SPACE 1
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         SPACE 2
***********************************************************************
*        OUTPUT A VALUE                                               *
*        ON INPUT R1  = VALUE                                         *
*                 R10 = RETURN ADDRESS                                *
*                 R15-->OUTPUT FIELD RIGHT BOUNDARY MINUS ONE         *
***********************************************************************
         SPACE 1
RPTMOVE  DS    0H                  DATA MOVING
         BAL   R4,CONVWORD         GO CONVERT VALUE
         SR    R15,R4              START OF FIGURES
         EX    R4,RPTMVC           MOVE FIGURES INTO REPORT
         SPACE 1
RPTMOVED DS    0H                  END OF SUB-ROUTINE
         BR    R10                 RETURN TO CALLER
         SPACE 1
RPTMVC   MVC   0(*-*,R15),0(R1)    PUT VALUE IN COLUMN        *EXECUTE*
         EJECT
***********************************************************************
*        COPY OUTPUT RECORD TO SAVE BUFFER                            *
***********************************************************************
         SPACE 1
COPYREC  DS    0H                  RECORD SAVING
         RIN   ,                   SUBROUTINE ENTRY
         L     REC1,R1BUFF         GET RECORD 1 ADDRESS ..
         LH    R7,R1LEN            .. AND LENGTH
         L     R10,BUFFADD         GET OUTPUT RECORD ADDRESS ..
         LH    R11,BUFFLEN         .. AND LENGTH
         MVCL  REC1,R10            COPY OUTPUT RECORD TO RECORD 1
         L     REC1,R1BUFF         REFRESH RECORD 1 ADDRESS ..
         LH    R7,R1LEN            .. AND LENGTH OF NEW SAVED RECORD
         L     R10,BUFFADD         GET OUTPUT RECORD ADDRESS ..
         LH    R11,BUFFLEN         .. AND LENGTH
         LR    R1,R10              COPY BUFFER ADDRESS
         LR    R0,R11              .. AND LENGTH
         BAL   R4,CLEAR            GO CLEAR BUFFER TO ZEROES
         LA    R4,3(,R10)          SET FOR END OF RDW
         L     R1,BUFFSTOP         RECORD OLD BUFFER END        *TEST*
         ST    R4,BUFFSTOP         USE THAT AS END
         BAL   R4,EXPAND           GO EXPAND THE RDW
         L     R4,BUFFADD          GET ADDRESS OF RECORD
         TM    0(R4),X'80'         INVALID?                     *TEST*
         BNO   *+4+4               NO, CONTINUE                 *TEST*
         DC    AL4(0)              YES, ABEND S0C1              *TEST*
         SR    R1,R1               CLEAR WORK REGISTER
         ICM   R1,B'0011',0(R4)    GET RECORD LENGTH
         LA    R4,0(R1,R4)         GET DATA END ADDRESS
*        BCTR  R4,0                DOWN TO LAST POSITION
         ST    R4,BUFFSTOP         SET REAL END ADDRESS
         SPACE 1
COPYRECX DS    0H                  END OF SUB-ROUTINE
         ROUT  ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        READ SUBROUTINE FOR SYSUT1                                   *
***********************************************************************
         SPACE 1
SYSUT1RD DS    0H                  READ A RECORD FROM SYSUT1
         RIN   (R2)                SUBROUTINE ENTRY
SYSUT1RE DS    0H                  PERFORM A READ
         LA    R2,SYSUT1SW         POINT TO INPUT FILE
         BAL   R4,GETTING          GO GET SOME DATA
         STH   R0,R2LEN            SAVE RECORD LENGTH ..
         ST    R1,R2BUFF           .. AND ADDRESS
         LR    R4,R0               COPY LENGTH
         LA    R4,0(R1,R4)         CALCULATE END ADDRESS
         ST    R4,R2END            SAVE RECORD END
         LR    REC2,R1             COPY RECORD ADDRESS
         LR    R9,R0               .. AND LENGTH
         USING SUMREC,R8           MAY BE A SUMMARY RECORD
         CLC   SUMRECFF,=AL4(-1)   TEST FOR A SUMMARY RECORD
         BNE   SYSUT1OK            NO, FORGET IT
         BAL   R4,SUMMARY          YES, GO PROCESS IT
         B     SYSUT1RE            DO NOT COUNT THESE INPUT BYTES
         DROP  R8                  END SUMMARY ADDRESSABILITY
         SPACE 1
SYSUT1OK DS    0H                  GOT COMPRESSED INPUT
*                                                                *TEST*
*        LA    R2,SYSUT2SW         POINT TO FILE CONTROL BLOCK   *TEST*
*        LR    R0,REC2             POINT TO INPUT UNCOMPRESSED   *TEST*
*        S     R0,=F'4'            BACKUP OVER RDW               *TEST*
*        BAL   R4,WRITEV           OUTPUT REQUEST                *TEST*
*        LA    R2,SYSUT1SW         POINT TO INPUT FILE           *TEST*
*        BAL   R4,GETTING          GO GET SOME DATA              *TEST*
*        STH   R0,R2LEN            SAVE RECORD LENGTH ..         *TEST*
*        ST    R1,R2BUFF           .. AND ADDRESS                *TEST*
*        LR    R4,R0               COPY LENGTH                   *TEST*
*        LA    R4,0(R1,R4)         CALCULATE END ADDRESS         *TEST*
*        ST    R4,R2END            SAVE RECORD END               *TEST*
*        LR    REC2,R1             COPY RECORD ADDRESS           *TEST*
*        LR    R9,R0               .. AND LENGTH                 *TEST*
*        LA    R2,SYSUT2SW         POINT TO FILE CONTROL BLOCK   *TEST*
*        LR    R0,REC2             POINT TO INPUT COMPRESSED     *TEST*
*        S     R0,=F'4'            BACKUP OVER RDW               *TEST*
*        BAL   R4,WRITEV           OUTPUT REQUEST                *TEST*
*        LA    R2,SYSUT1SW         POINT TO INPUT FILE           *TEST*
*                                                                *TEST*
         L     R4,BYTESIN          GET BYTE COUNT
         AR    R4,R9               ADD CURRENT RECORD
         ST    R4,BYTESIN          SAVE UPDATED COUNT
         LR    R5,REC2             FIRST INPUT BYTE SHOULD BE AN SCB
         SPACE 1
SYSUT1RX DS    0H                  END OF SUB-ROUTINE
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
***********************************************************************
*        PROCESS SUMMARY RECORD                                       *
***********************************************************************
         SPACE 1
SUMMARY  DS    0H                  FINAL RECORD
         RIN   ,                   SUBROUTINE ENTRY
         USING SUMREC,R8           ESTABLISH ADDRESSABILITY
         LA    R2,SYSUT2SW         POINT TO OUTPUT MDCB
         USING MDCB,R2             ESTABLISH MDCB ADDRESSABILITY
         SP    MDCBCNT,ONE         DO NOT COUNT THIS RECORD
         AP    RECSIN,SUMIREC      ACCUMULATE INPUT RECORDS OFF SUMMARY
         AP    RECSOUT,SUMOREC     AND OUTPUT RECORDS FROM SUMMARY
         L     R4,COUNTIN          GET PREVIOUS BYTE COUNT - INPUT
         A     R4,SUMIBYTE         ADD SUMMARY FIGURE
         LA    R15,SUMRECLN+4      SET CORRECTIVE FACTOR
         SR    R4,R15              SUBTRACT FROM BYTE COUNT
         ST    R4,COUNTIN          SAVE UPDATED VALUE
         L     R4,COUNTOUT         GET PREVIOUS BYTE COUNT - OUTPUT
         A     R4,SUMOBYTE         ADD SUMMARY FIGURE
         ST    R4,COUNTOUT         SAVE UPDATED VALUE
         SPACE 1
SUMMARZ  DS    0H                  END OF SUB-ROUTINE
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         EJECT
***********************************************************************
*        WRITE SUBROUTINE FOR SYSUT2                                  *
***********************************************************************
         SPACE 1
SYSUT2WT DS    0H                  WRITE A RECORD TO SYSUT2
         RIN   (R2)                SUBROUTINE ENTRY
         L     R10,BUFFADD         REFRESH BUFFER POINTER
         LA    R2,SYSUT2           POINT TO DCB
         USING IHADCB,R2           ESTABLISH DCB ADDRESSABILITY
         LH    R11,DCBLRECL        PRIME LENGTH AS LRECL
         TM    DCBRECFM,DCBRECV    ARE THEY VARIABLE LENGTH RECORDS?
         BNO   SYSUT2W2            NO, NO RDW
         LH    R11,0(,R10)         GET LENGTH IN RDW
         SPACE 1
SYSUT2W2 DS    0H                  OUTPUT A RECORD
         L     R4,BYTESOUT         GET OUTPUT BYTE COUNT
         AR    R4,R11              ADD THIS RECORD
         ST    R4,BYTESOUT         SAVE OUTPUT BYTE COUNT
         LA    R2,SYSUT2SW         POINT TO FILE CONTROL BLOCK
         LR    R0,R10              POINT TO OUTPUT AREA
         BAL   R4,WRITEV           OUTPUT REQUEST
         SPACE 1
SYSUT2WX DS    0H                  RETURN TO CALLER
         ROUT  ,                   SUBROUTINE EXIT
         DROP  R2                  FINISHED WITH DCB
         TITLE 'COPY BLOCKS'
         COPY  BIOS                STANDARD I/O PROCESSING
         EJECT ,
DCPEXPD2 CSECT ,                   MAIN CSECT
         COPY  GETTING             INCLUDE GET/LOCATE
         EJECT ,
         COPY  WRITEV              INCLUDE VB WRITE
         SPACE 2
         COPY  PUTMOVE             INCLUDE STANDARD I/O SKELETON
         EJECT ,
         COPY  GETSTORE            STANDARD GETMAIN CODE
         SPACE 2
         COPY  CLEAR               STANDARD STORAGE CLEAR
         EJECT ,
         COPY  CONVWORD            STANDARD DATA CONVERSION
         SPACE 2
         COPY  TRIM                STANDARD OUTPUT FORMATTING
         EJECT ,
         COPY  BLANK               STANDARD STORAGE BLANKING
         SPACE 2
         COPY  PERCENT0            STANDARD PERCENTAGE SUMS
         EJECT ,
         COPY  TODDATE             STANDARD DATE FORMATTING
         TITLE 'DATA AREAS'
BEGSNAP  DS    0D                  SNAP DATA AREAS FOLLOWING
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         SPACE 2
         DS    0F                  GET ADDRESSES ALIGNED
EYECATCH DC    CL8'EYECATCH'       EYE CATCHER
R1BUFF   DC    A(0)                RECORD SAVE AREA ADDRESS
R2BUFF   DC    A(0)                RECORD SAVE AREA ADDRESS
BUFFADD  DC    A(0)                OUTPUT CONSTRUCTION AREA ADDRESS
R1END    DC    A(0)                END OF INPUT DATA ADDRESS
R2END    DC    A(0)                END OF COPY DATA ADDRESS
BUFFEND  DC    A(0)                END OF OUTPUT AREA
BUFFSTOP DC    A(0)                STOP ADDRESS IN OUTPUT AREA
R1LEN    DC    AL2(0)              RECORD SAVE AREA LENGTH
R2LEN    DC    AL2(0)              RECORD SAVE AREA LENGTH
BUFFLEN  DC    AL2(0)              OUTPUT AREA LENGTH
R3LEN    DC    AL2(0)              REMAINING OUTPUT LENGTH
         SPACE 1
BYTESIN  DC    A(0)                NO. BYTES INPUT
BYTESOUT DC    A(0)                NO. BYTES OUTPUT
COUNTIN  DC    A(0)                NO. BYTES INPUT FROM SUMMARIES
COUNTOUT DC    A(0)                NO. BYTES OUTPUT FROM SUMMARIES
RECSIN   DC    PL8'0'              NO. RECORDS INPUT FROM SUMMARIES
RECSOUT  DC    PL8'0'              NO. RECORDS OUTPUT FROM SUMMARIES
         SPACE 1
DWORK    DC    D'0'                DOUBLEWORD WORK AREA
ZEROWORD DC    F'0'                A LOT OF NOTHING
COMPCODE DC    H'0'                PROGRAM COMPLETION CODE
RETCODE  DC    H'0'                MACRO RETURN CODE SAVE AREA
MAXLEN   DC    H'64'               MAXIMUM STRING LENGTH
         SPACE 1
CONVWORK DC    CL15' '             DECIMAL WORK AREA
ONE      DC    PL1'1'              COUNT INCREMENT
SIGN     EQU   X'F0'               POSITIVE PACKED SIGN
         SPACE 1
         RIN   GENERATE            SUBROUTINE SAVE AREA
         TITLE 'REPORT LINES'
***********************************************************************
*        REPORT LINE SKELETONS                                        *
***********************************************************************
         SPACE 1
TITLE1   EQU   *                   STANDARD NAME
RPTAHDR1 DC    AL2(RPTAH1LN)       LENGTH OF HEADER RECORD     CC
         DC    AL2(0)
RPTAEJCT DC    C'1'                SKIP TO TOP OF FORM          1
         DC    CL18' '             PADDING                      2
         DC    CL35'CRUSH / SMF  -  EXPANSION REPORT' TITLE    20
         DC    CL10' '             PADDING                     55
HEADDATE DC    CL9' '              REPORT DATE                 65
         SPACE 1
RPTAH1LN EQU   *-RPTAHDR1          LENGTH OF HEADER RECORD     74
         SPACE 1
         DC    CL8' '              PADDING                     75
HEADTIME DS    0CL5                TIME OF REPORT              83
HEADHH   DC    CL2' '              HOUR OF REPORT              83
         DC    CL1'.'              SEPARATOR                   84
HEADMM   DC    CL2' '              MINUTE OF REPORT            85
         DC    CL6' '              PADDING                     87
         DC    CL4'PAGE'                                       23
HEADPAGE DC    CL4'0000'           PAGE NUMBER                127
         SPACE 2
SUBTITLE EQU   *                   STANDARD NAME, DUMMY RECORD
RPTAHDR2 DC    AL2(RPTAH2LN)       LENGTH OF TITLE  RECORD     CC
         DC    AL2(0)
         DC    C'-'                ASA SKIP 3                   1
         DC    CL1' '              PADDING                      2
         SPACE 1
RPTAH2LN EQU   *-RPTAHDR2          LENGTH OF HEADER RECORD      .
         EJECT ,
***********************************************************************
*        HERE ARE STATISTICS MESSAGES SKELETONS                       *
***********************************************************************
         SPACE 1
RPTAHDR3 DC    AL2(RPTAH3LN)       LENGTH OF HEADINGS RECORD   CC
         DC    AL2(0)
         DC    C'-'                ASA SKIP 3                   1
         DC    CL8' '              PADDING                      2
         DC    CL20'ITEM'          HEADING                     10
         DC    CL20'INPUT'         HEADING                     30
         DC    CL20'OUTPUT'        HEADING                     50
         DC    CL3'  %'            HEADING                     70
         SPACE 1
RPTAH3LN EQU   *-RPTAHDR3          LENGTH OF HEADING RECORD    77
         SPACE 2
RPTADETL DC    AL2(RPTADTLN)       LENGTH OF DETAIL RECORD     CC
         DC    AL2(0)
RPTADASA DC    C'0'                ASA SKIP 2                   1
         DC    CL8' '              PADDING                      2
RPTADITM DC    CL20' '             ITEM                        10
RPTADIN  DC    CL20' '             INPUT COUNT                 30
RPTADOUT DC    CL20' '             OUTPUT COUNT                50
RPTADPCT DC    CL3' '              PERCENT                     70
         SPACE 1
RPTADCLN EQU   *-RPTADITM          LENGTH TO BLANK
RPTADTLN EQU   *-RPTADETL          LENGTH OF DETAIL RECORD     77
         SPACE 1
RADIRECS DC    C'RECORDS'          ITEM TYPE
RADIBYTS DC    C'BYTES'            ITEM TYPE
RADIAVG  DC    C'AVERAGE'          ITEM TYPE
         SPACE 1
REPTCOUN DC    PL2'0'              COUNT OF REPORTS
PAGECOUN DC    PL2'0'              COUNT OF PAGES
LINECOUN DC    PL2'60'             COUNT OF LINES
MAXLINE  DC    PL2'56'             MAXIMUM NUMBER OF LINES PER PAGE
         SPACE 1
EDITPL2  DC    X'40202120'         COPIES EDIT MASK
EDITPL4  DC    X'4020202020202120' COUNT EDIT MASK
EDITPL8  DC    X'40202020202020202020202020202120' COUNT EDIT MASK
         TITLE 'LITERAL POOL'
***********************************************************************
*        LITERAL POOL                                                 *
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL GOES HERE
         TITLE 'DCB''S AND I/O CONTROL TABLES'
***********************************************************************
*        DCB'S TABLE                                                  *
***********************************************************************
         SPACE 1
DCBTABLE DS    0F
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'SYSUT1',CL8'INPUT',CL8' '
         DC    PL8'0'              RECORD COUNT
DCBNTRY  EQU   *-DCBTABLE          LENGTH OF ONE TABLE ELEMENT
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'SYSUT2',CL8'OUTPUT',CL8'LEAVE'
         DC    PL8'0'              RECORD COUNT
         SPACE 1
PRINTSW  DC    X'00',AL3(SYSPRINT)
         DC    CL8'SYSPRINT'
         DC    CL8'OUTPUT'
         DC    CL8'LEAVE'
         DC    PL8'0'              RECORD COUNT
         SPACE 1
OPENSIZE EQU   *-DCBTABLE          TABLE SIZE OF FULL TIME FILES
MAXOPEN  EQU   OPENSIZE/DCBNTRY    MAXIMUM NUMBER OF DCB'S TO OPEN
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUM NUMBER OF DCB'S
         SPACE 2
         EJECT ,
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
***********************************************************************
*        DATA CONTROL BLOCKS                                          *
***********************************************************************
         SPACE 1
SYSUT1   DCB   DDNAME=SYSUT1,                                          *
               DSORG=PS,                                               *
               EODAD=STOPPGM,                                          *
               EXLST=EXITLIST,                                         *
               MACRF=GL
         SPACE 3
SYSUT2   DCB   DDNAME=SYSUT2,                                          *
               DSORG=PS,                                               *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
SYSPRINT DCB   DDNAME=SYSPRINT,                                        *
               DSORG=PS,                                               *
               RECFM=VBA,LRECL=137,                                    *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
SNAPDCB  DCB   DDNAME=SNAP,DSORG=PS,MACRF=W,                           *
               RECFM=VBA,LRECL=125,BLKSIZE=882
         TITLE 'WTO MESSAGE SKELETONS'
MSG101   WTO  'DCPEXPD201 RECORDS 999,999,999 IN, 999,999,999 OUT',    X
               ROUTCDE=(11),MF=L   ROUTE TO LOG
         SPACE 1
*        OFFSETS IN MESSAGE DATA LINES
         SPACE 1
MSG01NUM EQU   MSG101+4,8      MESSAGE NUMBER
MSG01IN  EQU   MSG101+4+18,12  INPUT COUNT
MSG01OUT EQU   MSG101+4+34,12  OUTPUT COUNT
MSG01MSK DC    X'402020206B2020206B202120' COUNT EDIT MASK
         SPACE 2
WTOIOE   DS    0F
         DC    AL2(WTOEND-*),H'0',CL109'******** - I/O ERROR -'
WTOEND   EQU   *
EOSNAP   DS    0H                  END OF STORAGE AREA TO BE SNAPPED
         TITLE 'DSECT MAPS'
         TITLE 'SUMMARY RECORD'
***********************************************************************
*        SUMMARY RECORD FORMAT                                        *
*        N.B. IN DCPCOMP2 THE RDW IS INCLUDED IN THE MAPPING          *
***********************************************************************
         SPACE 1
SUMREC   DSECT ,                   LAST RECORD FORMAT
*        DC    AL2(SUMRECLN)       LENGTH OF SUMMARY RECORD
*        DC    AL2(0)
SUMRECFF DC    AL4(-1)             IDENTIFIER
         SPACE 1
SUMIBYTE DC    A(0)                NO. BYTES INPUT
SUMOBYTE DC    A(0)                NO. BYTES OUTPUT
SUMIREC  DC    PL8'0'              INPUT RECORD COUNT
SUMOREC  DC    PL8'0'              OUTPUT RECORD COUNT
         SPACE 1
SUMRECLN EQU   *-SUMREC            LENGTH OF RECORD
         SPACE 3
         COPY DCPSCBF              INCLUDE STRING CONTROL BYTE DEFN.
         SPACE 3
         POP   PRINT               RESTORE PRINT STATUS
         END
