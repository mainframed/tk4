SECR01   TITLE 'SPRECHER ENERGIE CACHE REPORTER'
***********************************************************************
*        PDSDOC *CACHE REPORTER WITH ATAG MODS........................*
*                                                                     *
*        PROGRAM ID. :             SECR01                             *
*                                                                     *
*        DATE WRITTEN :            MAY       1990                     *
*                                                                     *
*        AUTHOR :                  D.H.CARTWRIGHT.                    *
*                                                                     *
*        LOCATION :                SPRECHER ENERGIE                   *
*                                  5036 OBERENTFELDEN                 *
*                                  SWITZERLAND                        *
*                                                                     *
*        HISTORY  :                                                   *
*                                                                     *
*   MAY90 CART1 WROTE PROGRAM AS SSCR01.                              *
*   JUN90 CART1 ADDED DISPLAY OF % EXCPS                              *
* 03JUL90 CART1 ADDED CODE TO PROCESS UCB.                            *
* 05JUL90 CART1 ADDED FLOOD WARNING.NAME BACK TO SECR01               *
* 23JUL90 CART1 SOMETIMES DESTAGING GIVES NEGATIVE COUNTS. IGNORE     *
* 28JUN91 CART1 ADD SOME MODS FROM ATAG - E.G. TOTALS ON MSG          *
*               CHANGE TO ENSURE EXECUTION OF 'FLOODING' RTN.         *
* 13OCT92 CART1 SHOW DRIVES WITH DASDFASTWRITE DEACTIVATED            *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        PURPOSE                                                      *
*       ---------                                                     *
*                                                                     *
* THIS PROGRAM USES EXCP TO OBTAIN 3990-3 SUBSYSTEM STATISTICS.       *
* IT SAVES THESE VALUES IN ORDER TO COMPUTE CHANGES DURING A          *
* PERIOD. AT THE END OF THE PERIOD IT WRITES USER SMF RECORDS         *
* AND ALSO PRESENTS A SHORT RESULTS TABLE ON THE OPERATOR             *
* CONSOLE, WHERE IT MAY BE SUPPRESSED IF DESIRED, OR USED FOR ACO.*
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        LIMITATIONS                                                  *
*       ------------                                                  *
*                                                                     *
* 1)MUST BE RUN AUTHORISED FROM AN AUTHORISED LIBRARY.                *
*                                                                     *
* 2)THE ADDRESS (BOX NO.) OF THE 3990 IS HARD-CODED INTO THE          *
*   SECRI001 WTO MESSAGE. THIS WILL NEED TO BE CHANGED FOR            *
*   ANOTHER CONFIGURATION.                                            *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*       INPUT                                                         *
*       -----                                                         *
*                                                                     *
* 1)OPERATOR - SEE LATER SECTION ON 'PARAMETERS'.                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*       OUTPUT                                                        *
*       ------                                                        *
*                                                                     *
* 1)SMF    - USER SMF RECORD (239)                                    *
*                                                                     *
* 2)CONSOLE- SECRTNNN MESSAGES. MULTI-LINE WTO                        *
*                               T IS MESSAGE TYPE - I FOR INFO        *
*                                                   W FOR WARN        *
*                                                                     *
***********************************************************************
         EJECT
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
*        PRINT ON,GEN              SHOW MACRO EXPANSIONS
         SPACE 1
SECR01   CSECT
SECR01   AMODE 24                  24-BIT ADDRESSING MODE
SECR01   RMODE 24                  24-BIT RESIDENCE
         SPACE 1
***********************************************************************
*        REGISTER EQUATES AND USAGES.                                 *
***********************************************************************
         SPACE 1
R0       EQU   0
R1       EQU   1                   WORK
R2       EQU   2                   DCB TABLE POINTER
REG2     EQU   R2                  WORK REGISTER IN 'SCAN' MACRO
R3       EQU   3                   WORK
R4       EQU   4                   LINKAGE RETURN
R5       EQU   5                   WORK
R6       EQU   6                   PREVIOUS SUBSYSTEM DATA ADDRESS
R7       EQU   7                   PREVIOUS SUBSYSTEM DATA LENGTH
R8       EQU   8                   CURRENT SUBSYSTEM DATA ADDRESS
R9       EQU   9                   CURRENT SUBSYSTEM DATA LENGTH
R10      EQU   10                  RESULTS DEVICE SEGMENT ADDRESS
R11      EQU   11                  COUNT OF DEVICE SEGMENTS (64)
R12      EQU   12                  PROGRAM BASE REGISTER 2
R13      EQU   13                  SAVE AREA / BASE REG. 1
R14      EQU   14                  WORK
R15      EQU   15
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12)     STANDARD HOUSEKEEPING
         SPACE 1
         GOSUB INITIAL             DO INITIALISATION
         EJECT
***********************************************************************
*        MAIN PROCESSING ROUTINE                                      *
***********************************************************************
         SPACE 1
MAINLINE DS    0H                  PROGRAM FUNCTION
         SPACE 1
         GOSUB SETWAIT             WAIT FOR INTERVAL END
         LR    R1,R8               GET CURRENT BUFFER ADDRESS
         GOSUB READBUFF            GO FILL THE BUFFER
         GOSUB DIFFBUFF            GO WORK OUT DIFFERENCES
         GOSUB SUMBUFF             GO WORK OUT TOTALS
         GOSUB NUMBERS             GO WORK OUT STATISTICS
         SPACE 1
         XR    R6,R8               SWAP ..
         XR    R8,R6               .. BUFFERS ..
         XR    R6,R8               ..OVER
         MVC   TIMEFORE,TIMEAFT    SAVE TIMER VALUE
         B     MAINLINE            GO AROUND LOOP UNTIL WE STOP
         EJECT
***********************************************************************
*        END OF PROCESSING. TIDY UP, REPORT AND LEAVE.                *
***********************************************************************
         SPACE 1
STOPWTR  DS    0H                  NOW SHUTTING DOWN
         GETAUTH TYPE=OFF          RELINQUISH AUTHORISATION
*        GOSUB REPORT              GO ISSUE FINAL REPORT
*        GOSUB ENDWTR              TELL OPERATOR WE FINISHED
         GOSUB CLOSEM              CLOSE ALL OPEN FILES
         SR    R0,R0               CLEAR R0
         ICM   R0,B'1000',BUFF3990 GET SUB-POOL NUMBER
         FREEMAIN R,SP=(0)         FREE ALL BUFFERS
         SPACE 2
         PGMOUT RC=RETCODE         EXIT PROGRAM
         TITLE 'INITIALISATION PROCESSING'
***********************************************************************
*        INITIALISATION PROCESSING                                    *
***********************************************************************
         SPACE 1
INITIAL  DS    0H                  PERFORM INITIALISATION
         SUBIN SAVE=(R4,R5)        SUBROUTINE ENTRY
         L     R5,0(R1)            GET ADDR OF PARM FIELD
*        GOSUB GETOPTNS            TEST PARAMETERS
         GOSUB STARTPRM            TEST START PARAMETERS
         GOSUB OPENEM              OPEN DATASETS
         GOSUB GETSEBUF            GET BUFFER FOR START COUNTS
         ST    R1,BUFFA            SAVE ITS ADDRESS
         LR    R6,R1               SET PREVIOUS ADDRESS
         SR    R7,R7               CLEAR LENGTH REGISTER
         ICM   R7,B'0111',BUFF3990+1 SET BUFFER LENGTH
         GOSUB READBUFF            READ THE FIRST BUFFER
         GOSUB GETSEBUF            GET BUFFER FOR NEXT TIME
         ST    R1,BUFFB            SAVE ITS ADDRESS
         LR    R8,R1               SAVE BUFFER ADDRESS
         MVC   TIMEFORE,TIMEAFT    SAVE TIMER VALUE
         LR    R9,R7               SET BUFFER LENGTH
         L     R1,CVTPTR           GET ADDRESS OF CVT
         USING CVTMAP,R1           ESTABLISH CVT ADDRESSABILITY
         L     R4,CVTSMCA          GET ADDRESS OF SMCA
         DROP  R1                  END CVT ADDRESSABILITY
         USING SMCABASE,R4         ESTABLISH SMCA ADDRESSABILITY
         MVC   SEMFSID,SMCASID     MOVE SID TO SMF RECORD
         DROP  R4                  END SMCA ADDRESSABILITY
         L     R1,SYSUT2SW         GET ADDRESS OF SUBSYSTEM DCB
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         L     R4,DCBDEBAD         GET ADDRESS OF DEB
         DROP  R1                  END DCB ADDRESSABILITY
         USING DEBBASIC,R4         ESTABLISH DEB ADDRESSABILITY
         LA    R4,DEBBASND         POINT TO END OF BASIC DEB
         DROP  R4                  END DEB ADDRESSABILITY
         USING DEBDASD,R4          ESTABLISH DEB DASD ADDRESSABILITY
         L     R1,DEBUCBAD         GET UCB ADDRESS
         DROP  R4                  END DEB DASD ADDRESSABILITY
         USING UCBOB,R1            ESTABLISH UCB ADDRESSABILITY
         ST    R1,ADDRUCB          SAVE UCB ADDRESS
         MVC   DEVNUMB,UCBCHAN     SAVE DEVICE NUMBER
         NI    DEVNUMB,X'0F'       CLEAR HIGH ORDER
         DROP  R1                  END UCB ADDRESSABILITY
         GETAUTH TYPE=GET          REQUEST AUTHORISATION
         SPACE 1
         SUBOUT RESTORE=(R4,R5)    RETURN TO CALLER
         TITLE 'STATISTICAL REPORTING'
***********************************************************************
*        STATISTICS PROCESSING                                        *
***********************************************************************
         SPACE 1
NUMBERS  DS    0H                  PERFORM STATISTICAL REPORTING
         SUBIN SAVE=(R2,R3,R4,R5,R6,R7,R10,R11) SUBROUTINE ENTRY
         LR    R10,R6              POINT AT PREVIOUS BUFFER
         USING SEREC,R10           ESTABLISH DEVICE SEGMENT ADDRESSING
         LA    R11,64              SET MAXIMUM NUMBER OF DEVICES
         TM    SEFLAG1,SEFALSE     TEST IF CACHE AVAILABLE
         BO    NUMBERED            NO, NO STATISTICS POSSIBLE
STATLOOP DS    0H                  STATISTICAL REPORTING PER DEVICE
         TM    SEDEVADD,X'FF'      TEST FOR A DEVICE
         BZ    STATDONE            SKIP IF NO DEVICE
         SPACE 1
FINDSPOT DS    0H                  LOCATE ENTRY IN OUTPUT MATRIX
         LA    R3,64               SET NO. DEVICES
         SR    R3,R11              CALCULATE THIS DEVICE OFFSET
         LR    R5,R3               SAVE OFFSET
         SRA   R3,3                DIVIDE BY EIGHT LINES
         LR    R4,R3               SAVE LINE NUMBER
         SR    R2,R2               CLEAR WORK REGISTER
         M     R2,=A(MSG01LIN)     GET START OF RIGHT LINE
         SLA   R4,3                CALCULATE LINE NUMBER MODULO
         SR    R5,R4               .. OFFSET IN LINE
         SR    R4,R4               CLEAR WORK REGISTER
         M     R4,=A(MSG01ENT)     CALCULATE LINE ENTRY OFFSET
         LA    R6,MSG01MAT(R3)     POINT AT RESULTS MATRIX LINE
         LA    R6,0(R6,R5)         POINT AT RESULTS ENTRY
         BCTR  R6,0                DECREMENT FOR FILL CHARACTER
         TM    SESENSEA,SES1ACX    IS CACHE DE-ACTIVATED?
         BNO   STATGOOD            NO, FIND THE FIGURES
         MVC   4(2,R6),MSG01NOC    YES, FLAG MESSAGE
         B     STATDONE            ANSWER NOW READY
         SPACE 1
STATGOOD DS    0H                  THERE ARE STATISTICS TO PROCESS
         MVC   SEMFDTL,SEREC       COPY DEVICE SEGMENT
         GOSUB UCBDATA             GO FIND VOLSER
         SR    R1,R1               CLEAR WORK REGISTER
         LR    R2,R1               CLEAR WORK REGISTER
         LR    R3,R1               CLEAR WORK REGISTER
         LR    R4,R1               CLEAR WORK REGISTER
         LR    R5,R1               CLEAR WORK REGISTER
         A     R1,SEIORDRQ         ADD IN READ NORMAL REQUESTS
         A     R1,SEIORSRQ         ADD IN READ SEQUENTIAL REQUESTS
         A     R1,SERDCWRQ         ADD IN CACHE WRITE READ REQUESTS
         A     R1,SEIOWTRQ         ADD IN WRITE NORMAL REQUESTS
         A     R1,SEIOWSRQ         ADD IN WRITE SEQUENTIAL REQUESTS
         A     R1,SEIOCWRQ         ADD IN CACHE WRITE WRITE REQUESTS
         A     R1,SEICLRQ          ADD IN INHIBIT CACHE LOAD REQUESTS
         A     R1,SEBYCRQ          ADD IN BYPASS CACHE REQUESTS
         LR    R0,R1               SAVE TOTAL I/O REQUESTS
         STCM  R1,B'1111',SEMFDRQ  SMF RECORD OUR ADDITION
         BZ    STATZERO            TREAT ZEROES SPECIAL
         S     R1,SEIORDHT         MINUS READ HITS
         S     R1,SEIORSHT         MINUS READ SEQUENTIAL HITS
         S     R1,SERDCWHT         MINUS CACHE WRITE READ HITS
         S     R1,SEIOFWHT         MINUS DASD FAST WRITE HITS
         S     R1,SEIOWSHT         MINUS SEQUENTIAL WRITE HITS
         S     R1,SEIOCWHT         MINUS CACHE WRITE HITS
         A     R1,SEDCTR           ADD COUNT OF TRACK TO CACHE
         A     R1,SECDTR           ADD COUNT OF CACHE TO TRACK
         A     R1,SESQDCTR         ADD SEQUENTIAL TRACK TO CACHE
         STCM  R1,B'1111',SEMFDIO  SMF RECORD PHYSICAL I/O
         LTR   R4,R1               TEST IF ANY PHYSICAL I/O
         BP    WORKOUT             YES, GO CALCULATE RATIO
         LA    R4,99               ASSUME ZERO
         BZ    WORKOUT             YES, GO CALCULATE RATIO
         SR    R4,R4               IF FUNNY RESULT, SET ZERO
         B     STATZERO            GO WRITE IT
WORKOUT  DS    0H                  CALCULATE EFFICIENCY
         GOSUB PERCENT0            CALCULATE PERCENTAGE
         L     R4,HUNDRED          WANT EFFICIENCY, NOT RATIO
         SR    R4,R1               SO SUBTRACT FROM 100
         EJECT ,
STATZERO DS    0H                  IF NO I/O, SKIP THE CALCULATION
         STCM  R4,B'1111',SEMFDEF  SMF RECORD DEVICE EFFICIENCY
         LTR   R4,R4               TEST VALUE
         BNM   *+4+2               OK IF POSITIVE
         SR    R4,R4               CALL NEGATIVE VALUES ZERO
         CVD   R4,DWORK1           CONVERT EFFICIENCY TO DECIMAL
         LR    R1,R0               NOW CALCULATE I/O REQUESTS
         L     R0,SEMFTIO          .. AS PERCENT TOTAL
         GOSUB PERCENT0            EXPRESS AS PERCENTAGE
         STCM  R1,B'1111',SEMFDUS  SMF RECORD DEVICE USE PERCENT
         C     R1,HUNDRED          IS IT TOO BIG?
         BL    *+4+4               NO, LEAVE REAL VALUE
         LA    R1,99               YES, SET TO SPECIAL VALUE
         CVD   R1,DWORK2           CONVERT USAGE TO DECIMAL
         GOSUB SMFWRITE            GO WRITE SMF RECORD
         SRP   DWORK2,2,0          SHIFT USAGE UP THE FIELD
         OC    DWORK2,DWORK1       COPY EFFICIENCY AT END
         MVC   DWORK1(L'MSG01MSK),MSG01MSK TEMPORARY COPY EDIT MASK
         ED    DWORK1(L'MSG01MSK),DWORK2+5 PUT IN VALUE
         MVC   0(MSG01ENT,R6),DWORK1+1 COPY RESULT TO MATRIX
         TM    SESENSEA,SES1A2X    DASDFASTWRITE DEACTIVATED?
         BNO   *+4+4               NO, LEAVE MESSAGE ALONE
         MVI   3(R6),C':'          YES, FLAG MESSAGE
         GOSUB FLOODING            CHECK ON NVS OVERRUN
         SPACE 1
STATDONE DS    0H                  DEVICE STATISTICS DONE
         LA    R10,SELENTH(R10)    POINT TO NEXT DEVICE SEGMENT
         BCT   R11,STATLOOP        GO ROUND NEXT DEVICE
         EJECT ,
ATAGTOT  EQU   *                       PUT TOTALS IN WTO           ATAG
         L     R4,SEMFTIO              TOTAL I/O REQUESTS          ATAG
         CVD   R4,PACKFELD                                         ATAG
         MVC   ZAHLFELD(L'MASKE),MASKE             COPY EDIT MASK  ATAG
         ED    ZAHLFELD(L'MASKE),PACKFELD+3        PUT IN VALUE    ATAG
         MVC   MSG01TOI(7),ZAHLFELD+3                              ATAG
         L     R4,SEMFTRD              TOTAL READ REQUESTS         ATAG
         CVD   R4,PACKFELD                                         ATAG
         MVC   ZAHLFELD(L'MASKE),MASKE             COPY EDIT MASK  ATAG
         ED    ZAHLFELD(L'MASKE),PACKFELD+3        PUT IN VALUE    ATAG
         MVC   MSG01TOR(7),ZAHLFELD+3                              ATAG
         L     R4,SEMFTWT              TOTAL WRITE REQUESTS        ATAG
         CVD   R4,PACKFELD                                         ATAG
         MVC   ZAHLFELD(L'MASKE),MASKE             COPY EDIT MASK  ATAG
         ED    ZAHLFELD(L'MASKE),PACKFELD+3        PUT IN VALUE    ATAG
         MVC   MSG01TOW(7),ZAHLFELD+3                              ATAG
         L     R4,SEMFTIC              TOTAL NOT IN CACHE REQUESTS ATAG
         CVD   R4,PACKFELD                                         ATAG
         MVC   ZAHLFELD(L'MASKE),MASKE             COPY EDIT MASK  ATAG
         ED    ZAHLFELD(L'MASKE),PACKFELD+3        PUT IN VALUE    ATAG
         MVC   MSG01TON(7),ZAHLFELD+3                              ATAG
ATAGENDE EQU   *
         SPACE 2
         SR    R0,R0               CLEAR REG. ZERO FOR WTO
         WTO   MF=(E,SECRI001)     GO WRITE RESULTS ON CONSOLE
         SPACE 2
NUMBERED DS    0H                  ALL STATISTICS DONE
*                                                                  ATAG
         MVC   SEMFVOL,DEFLTVOL     CLEAR VOLSER
         SR    R4,R4                INITIALIZE COUNTERS            ATAG
         ST    R4,SEMFTIO           TOTAL I/O REQUESTS             ATAG
         ST    R4,SEMFTRD           TOTAL READ REQUESTS            ATAG
         ST    R4,SEMFTWT           TOTAL WRITE REQUESTS           ATAG
         ST    R4,SEMFTIC           TOTAL NOT IN CACHE REQUESTS    ATAG
         ST    R4,SEMFDRQ           DEVICE I/O REQUESTS            ATAG
         ST    R4,SEMFDIO           DEVICE PHYSICAL I/O S          ATAG
         ST    R4,SEMFDEF           DEVICE EFFICIENCY %            ATAG
         ST    R4,SEMFDUS           DEVICE USAGE %                 ATAG
         SPACE 1
         SUBOUT RESTORE=(R2,R3,R4,R5,R6,R7,R10,R11) RETURN TO CALLER
         SPACE 1
         DROP  R10                 END DEVICE SEGMENT ADDRESSABILITY
         TITLE 'EXCEPTION REPORTING'
***********************************************************************
*        EXCEPTION REPORTING - FLOOD WARNING                          *
*                                                                     *
* ON ENTRY TO  THIS ROUTINE R10 --> DEVICE SEGMENT                    *
*                                                                     *
***********************************************************************
         SPACE 1
FLOODING DS    0H                  PERFORM EXCEPTION REPORTING
         SUBIN SAVE=(R1,R4)        SUBROUTINE ENTRY
         USING SEREC,R10           ESTABLISH DEVICE SEGMENT ADDRESSING
         ICM   R1,B'1111',SEDFFAIL GET FAILURE COUNT
         BZ    FLOODED             EXIT IF NONE
         L     R0,SEDFNW           GET FAST WRITE NORMAL COUNT
         A     R0,SEDFSQ           ADD SEQUENTIAL COUNT
         GOSUB PERCENT0            FIGURE OUT PERCENTAGE
         LA    R2,20               SET HIGH BOUNDARY ** WAS 5% **
         CR    R2,R1               TEST RESULT
         BH    FLOODED             EXIT IF BELOW THRESHOLD
         CVD   R1,DWORK1           CONVERT PERCENT TO DECIMAL
         MVC   MSG05PCT,MSG05MSK   MOVE IN EDIT MASK
         ED    MSG05PCT,DWORK1+6   PUT ANSWER IN MESSAGE
         MVC   MSG05VOL,SEMFVOL    COPY VOLSER
         LA    R1,DEVNUMB          POINT AT DEVICE NUMBER
         LA    R0,2                SET LENGTH
         LA    R15,DWORK2          GET RESULT IN A WORK AREA
         GOSUB UNPACK              CONVERT DEVICE NUMBER TO CHAR.
         MVC   MSG05CUU,DWORK2+1   COPY TO MESSAGE
         WTO   MF=(E,SECRW005)     WARN OPERATOR OF CONSTRAINT
         SPACE 2
FLOODED  DS    0H                  ALL REPORTING DONE
         SUBOUT RESTORE=(R1,R4)    RETURN TO CALLER
         SPACE 1
         DROP  R10                 END DEVICE SEGMENT ADDRESSABILITY
         TITLE 'HIGH LEVEL SUB-ROUTINES'
***********************************************************************
*        TEST AND ACTION START PARAMETERS                             *
***********************************************************************
         SPACE 1
STARTPRM SUBIN SAVE=(R1,R2,R4,R7,R8) LOOK AT START PARAMETERS
         SPACE 1
         EXTRACT COMMLPTR,FIELDS=COMM GET ADDR OF ECB AND CIB PTRS
         SPACE 1
         L     R2,COMMLPTR         GET COMMAND LIST ADDRESS
         USING COMDSECT,R2         ESTABLISH COMM AREA ADDRESSABILITY
         LM    R7,R8,COMLIST       GET COMMAND ECB AND CIB POINTERS
         USING CIBDSECT,R8         ESTABLISH CIB ADDRESSABILITY
         ST    R7,CMNDECBP         STORE ECB POINTER IN ECBLIST
         MVI   CMNDECBP,X'80'      INDICATE LAST ECB PTR IN LIST
         ST    R7,CMDECBP2         STORE ECB POINTER IN OTHER ECBLIST
         LTR   R8,R8               START PARAMETER SUPPLIED?
         BZ    CIBSET              NO,DONT TRY TO ANALYSE THEM
         MVC   UCMID,CIBCONID      SAVE CONSOLE ID.
         SPACE 1
         LA    R5,CIBDATLN         POINT TO PARAMETERS
*        GOSUB GETOPTNS            TEST START PARAMETERS
         SPACE 1
CIBSET   DS    0H                  SET UP CIB CHAIN
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R8) FREE START CIB
         QEDIT ORIGIN=COMCIBPT,CIBCTR=1   INDICATE 1 CIB TO BE CHAINED
         SPACE 2
         DROP  R2                  END COMMAREA ADDRESSING
         DROP  R8                  END CIB ADDRESSABILITY
         SPACE 2
         SUBOUT RESTORE=(R1,R2,R4,R7,R8) RETURN TO CALLER
         EJECT
***********************************************************************
*        TEST AND OPEN THE DD'S SUPPLIED.                             *
***********************************************************************
         SPACE 1
OPENEM   SUBIN SAVE=(R2,R3,R4)     SUBROUTINE ENTRY
         LA    R3,MAXOPEN          ESTABLISH LOOP COUNT
         LA    R2,DCBTABLE         POINT R2 AT DCB TABLE
LOOP0    OI    0(R2),DDINT         INDICATE DD INTEREST
         GOSUB TESTIOT             GO TEST IF DD STATEMENT PRESENT
         GOSUB OPEN                GO OPEN IT IF PRESENT
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,LOOP0            PROCESS NEXT DATA SET
         SPACE 2
         LA    R4,256              TRK 0,REC 1
         LR    R0,R4               SET TTRN INTO R0 FOR CONVERT ROUTINE
         L     R1,SYSUT2+44        SET R1 TO DEB FOR CONVERT ROUTINE
         LA    R2,ABSADDR          POINT TO OUTPUT FOR CONVERT ROUTINE
         L     R15,CVTPTR          POINT TO CVT
         USING CVT,R15
         L     R15,CVTPCNVT        POINT TO CONVERT ROUTINE
         DROP  R15
         LR    R4,R13              SAVE REG.13
         BALR  R14,R15             AND LINK TO CONVERT ROUTINE
         LR    R13,R4              RESTORE R13
         SPACE 2
         SUBOUT RESTORE=(R2,R3,R4) RETURN TO CALLER
         EJECT
***********************************************************************
*        CLOSE ANY OPEN DATASETS                                      *
***********************************************************************
         SPACE 1
CLOSEM   DS    0H                  FINAL CLOSES
         SUBIN SAVE=(R2,R3,R4)     SUBROUTINE ENTRY
         LA    R3,MAXDS            ESTABLISH LOOP COUNT
         LA    R2,DCBTABLE         POINT R2 AT DCB TABLE
         USING MDCB,R2             ESTABLISH DCB TABLE ADDRESSABILITY
         SPACE 1
LOOPEND  DS    0H                  CLOSE FILES LOOP
         MVC   MDCBCLOS,=CL8'REWIND' SET FINAL CLOSE OPTION
         GOSUB CLOSE               GO CLOSE A FILE
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,LOOPEND          PROCESS NEXT DATA SET
         SPACE 1
         SUBOUT RESTORE=(R2,R3,R4) RETURN TO CALLER
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         EJECT
***********************************************************************
*        GET A BUFFER FOR 3990 SUBSYSTEM DATA                         *
***********************************************************************
         SPACE 1
GETSEBUF SUBIN SAVE=(R0,R4)        SUBROUTINE ENTRY
         L     R0,BUFF3990         LOAD STORAGE REQUIREMENT
         GOSUB GETSTORE            GO GET SOME STORAGE
         SPACE 2
         SUBOUT RESTORE=(R0,R4)    RETURN TO CALLER
         SPACE 3
***********************************************************************
*        WRITE AN SMF RECORD                                          *
***********************************************************************
         SPACE 1
SMFWRITE DS    0H                  RECORD RESULTS FOR POSTERITY
         SUBIN SAVE=(R2,R4)        SUBROUTINE ENTRY
         GOSUB TIME                GET TIME
         STCM  R0,B'1111',SEMFTIME SAVE TIME OF SMF RECORD
         STCM  R1,B'1111',SEMFDATE SAVE DATE OF SMF RECORD
         SMFWTM SEMFREC            WRITE RECORD TO SMF
         SPACE 1
SMFWROTE DS    0H                  RETURN TO CALLER
         SUBOUT RESTORE=(R2,R4)    SUBROUTINE EXIT
         EJECT
***********************************************************************
*        READ A BUFFER OF 3990 SUBSYSTEM DATA                         *
*              ON ENTRY R1 = AREA ADDRESS                             *
***********************************************************************
         SPACE 1
READBUFF DS    0H                  SUB-ROUTINE START
         SUBIN SAVE=(R1,R4,R10)    SUBROUTINE ENTRY
         TM    SYSUT2SW,DDINT+DDPRES+DDOPEN TEST IF ABLE TO READ
         BNO   READBUFX            BRANCH IF NO
         LR    R10,R1              SAVE BUFFER ADDRESS
         USING SEREC,R10           ESTABLISH BUFFER ADDRESSING
         STCM  R1,B'0111',READATA+1 PUT BUFFER IN CCW
         LA    R4,PREPARE          POINT TO FIRST CHANNEL PROGRAM
         ST    R4,IOBCP            SAVE IN IOB
         MVI   ECB,0               CLEAR ECB
         EXCP  IOB                 GO READ SUBSYSTEM DATA
         GOSUB TIME                GET THE TIME
         STM   R0,R1,TIMEAFT       REMEMBER IT
         LR    R4,R0               GET TIME OF THIS ENQUIRY
         C     R4,TIMEFORE         CHECK HIGHER THAN LAST
         BH    *+4+4               YES, IGNORE MIDNIGHT
         A     R4,MIDNIGHT         NO, ADD 24 HOURS
         S     R4,TIMEFORE         MINUS TIME OF LAST
         STCM  R4,B'1111',SEMFINT  SAVE THE INTERVAL
         STCM  R0,B'1111',SEMFDTIM SMF RECORD TIME OF DATA
         STCM  R1,B'1111',SEMFDDAY SMF RECORD DATE OF DATA
         GOSUB DATING              GET TIME AND DATE IN ENGLISH
         WAIT  ECB=ECB             WAIT FOR I/O COMPLETION
         CLI   ECB,X'7F'           IS IT GOOD?
         BE    READBFT1            YES, CONTINUE
         ABEND 16,DUMP             ELSE BLOW UP
         SPACE 1
READBFT1 DS    0H                  TEST BUFFER
         ICM   R1,B'1111',DOMID010 GET LAST MESSAGE ID
         BZ    READBFT2            NONE, NO DOM NEEDED
         DOM   MSG=(1)             DELETE OLD MESSAGE
         XC    DOMID010,DOMID010   CLEAR MESSAGE ID
READBFT2 DS    0H                  TEST BUFFER
         TM    SEFLAG1,SEFALSE     TEST IF CACHE AVAILABLE
         BNO   READBUFX            YES, SYSTEM IS OK
         WTO   MF=(E,SECRW010)     NO, ISSUE WARNING
         ST    R1,DOMID010         SAVE ID OF MESSAGE
         SPACE 2
READBUFX DS    0H                  END OF SUB-ROUTINE
         SUBOUT RESTORE=(R1,R4,R10) RETURN TO CALLER
         DROP  R10                 END BUFFER ADDRESSABILITY
         EJECT
***********************************************************************
* CALCULATE THE COUNTER INCREMENTS BETWEEN CURRENT AND PREVIOUS BUFFER*
*                                                                     *
***********************************************************************
         SPACE 1
DIFFBUFF DS    0H                  SUB-ROUTINE START
         SUBIN SAVE=(R1,R2,R3,R4,R5,R10,R11)  SUBROUTINE ENTRY
         LR    R5,R8               POINT AT CURRENT BUFFER
         LR    R10,R6              POINT AT PREVIOUS BUFFER
         USING SEREC,R10           ESTABLISH DEVICE SEGMENT ADDRESSING
         LA    R11,64              SET MAXIMUM NUMBER OF DEVICES
         SPACE 1
DIFFLOOP DS    0H                  SUBTRACT COUNTERS
         LA    R3,22               SET NUMBER OF COUNTERS PER SEGMENT
         LA    R4,SEIORDRQ-SEREC   SET OFFSET TO COUNTER SECTION
DIFFDEV  DS    0H                  SUBTRACT COUNTERS PER SEGMENT
         L     R1,SEREC(R4)        PICK UP THE COUNTER POINTED AT
         L     R2,SEREC-SEREC(R4,R5) GET CURRENT EQUIVALENT
         LTR   R1,R1               ENSURE PREVIOUS ONE ..
         BZ    DIFFED              ..  WAS NOT ZERO
         SLR   R2,R1               CALCULATE DIFFERENCE
         BC    4,DIFFED            OK IF NO OVERFLOW (ROLLOVER)
         L     R2,SEREC-SEREC(R4,R5) RECALL CURRRENT COUNTER
         L     R1,MINUSONE         GET HIGH VALUE
         SL    R1,SEREC(R4)        SUBTRACT PREVIOUS VALUE
         LA    R2,1(R1,R2)         CALCULATE COUNT DIFFERENCE
         SPACE 1
DIFFED   DS    0H                  THE DIFFERENCE HAS BEEN CALCULATED
         ST    R2,SEREC(R4)        SAVE VALUE IN OLD BUFFER
         LA    R4,4(R4)            INCREMENT OFFSET TO NEXT POINTER
         BCT   R3,DIFFDEV          DO ALL COUNTERS THIS SEGMENT
         SPACE 1
         LA    R10,SELENTH(R10)    POINT TO NEXT DEVICE SEGMENT
         LA    R5,SELENTH(R5)      CURRENT BUFFER AS WELL
         BCT   R11,DIFFLOOP        GO ROUND NEXT DEVICE
         SPACE 2
DIFFBUFX DS    0H                  END OF SUB-ROUTINE
         SUBOUT RESTORE=(R1,R2,R3,R4,R5,R10,R11)  RETURN TO CALLER
         SPACE 1
         DROP  R10                 END DEVICE SEGMENT ADDRESSABILITY
         EJECT
***********************************************************************
*        SUMMARISE THE REQUESTS COUNTS IN A SUBSYSTEM DATA BUFFER     *
***********************************************************************
         SPACE 1
SUMBUFF  SUBIN SAVE=(R1,R2,R3,R4,R10,R11) SUBROUTINE ENTRY
         LR    R10,R6              POINT AT PREVIOUS BUFFER
         USING SEREC,R10           ESTABLISH DEVICE SEGMENT ADDRESSING
         LA    R11,64              SET MAXIMUM NUMBER OF DEVICES
         SR    R2,R2               CLEAR READ COUNT
         LR    R3,R2               CLEAR WRITE COUNT
         LR    R4,R2               CLEAR ICL COUNT
         LR    R1,R2               CLEAR TOTAL COUNT
         SPACE 1
SUMLOOP  DS    0H                  ADD DEVICES
         A     R2,SEIORDRQ         ADD IN READ NORMAL REQUESTS
         A     R2,SEIORSRQ         ADD IN READ SEQUENTIAL REQUESTS
         A     R2,SERDCWRQ         ADD IN CACHE WRITE READ REQUESTS
         A     R3,SEIOWTRQ         ADD IN WRITE NORMAL REQUESTS
         A     R3,SEIOWSRQ         ADD IN WRITE SEQUENTIAL REQUESTS
         A     R3,SEIOCWRQ         ADD IN CACHE WRITE WRITE REQUESTS
         A     R4,SEICLRQ          ADD IN INHIBIT CACHE LOAD REQUESTS
         A     R4,SEBYCRQ          ADD IN BYPASS CACHE REQUESTS
         SPACE 1
         LA    R10,SELENTH(R10)    POINT TO NEXT DEVICE SEGMENT
         BCT   R11,SUMLOOP         GO ROUND NEXT DEVICE
         SPACE 2
         AR    R1,R2               ADD TOTAL READS
         AR    R1,R3               AND TOTAL WRITES
         AR    R1,R4               AND TOTAL NON-CACHE
         ST    R1,SEMFTIO          SAVE TOTAL I/O THIS BUFFER
         ST    R2,SEMFTRD          SAVE TOTAL READS THIS BUFFER
         ST    R3,SEMFTWT          SAVE TOTAL WRITES THIS BUFFER
         ST    R4,SEMFTIC          SAVE NON-CACHE I/O THIS BUFFER
         SUBOUT RESTORE=(R1,R2,R3,R4,R10,R11) RETURN TO CALLER
         SPACE 1
         DROP  R10                 END DEVICE SEGMENT ADDRESSABILITY
         EJECT
***********************************************************************
*        SET UP A WAIT INTERVAL                                       *
***********************************************************************
         SPACE 1
SETWAIT  DS    0H                  SET UP AN INTERVAL
         SUBIN SAVE=(R2,R3,R4,R5)  SUBROUTINE ENTRY
         L     R5,FIFTEENM         GET INTERVAL BOUNDARY
         GOSUB TIME                GET TIME OF DAY
         LR    R3,R0               GET CURRENT TIME
         SR    R2,R2               CLEAR WORK REG
         DR    R2,R5               GET INTERVAL NUMBER
         LA    R3,1(R3)            ADD ONE FOR NEXT INTERVAL
         SR    R2,R2               CLEAR REMAINDER
         MR    R2,R5               CALCULATE NEXT INTERVAL END
         SR    R3,R0               CALCULATE INTERVAL UNTIL THEN
         ST    R3,WAITTIME         SAVE IN APPROPRIATE PLACE
         LA    R1,WAITTIME         SET INTERVAL POINTER
         SPACE 1
STIMER   DS    0H                  SET TIMER
         STIMER REAL,POSTWAIT,BINTVL=(1) WAIT FOR INTERVAL TO ELAPSE
         MVI   STIMRECB,X'00'      CLEAR ECB
         L     R2,ECBL2PTR         POINT TO ECBLIST
         SPACE 1
WAIT     DS    0H                  WAIT ON INTERVAL
         WAIT  1,ECBLIST=(R2),LONG=YES WAIT FOR CMND OR STIMER EXIT
         SPACE 1
         TM    STIMRECB,X'40'      WERE WE POSTED BY STIMER EXIT?
         BO    WAITED              YES, GO DO INTERVAL PROCESSING
         TTIMER CANCEL             CANCEL REMAINDER OF TIMER INTERVAL
         GOSUB CHKCMND             GO TEST FOR OPERATOR COMMANDS
         SPACE 1
WAITED   DS    0H                  RETURN TO CALLER
         SUBOUT RESTORE=(R2,R3,R4,R5) SUBROUTINE EXIT
         EJECT
***********************************************************************
*        CHECK FOR INPUT COMMANDS TO THIS ROUTINE                     *
***********************************************************************
         SPACE 1
CHKCMND  DS    0H                  CHECK COMMAND ENTRY
         SUBIN SAVE=(R2,R4,R5,R8)  SUBROUTINE ENTRY
         L     R2,CMNDECBP         GET COMMAND ECB ADDRESS
         TM    0(R2),X'50'         DID OPERATOR ENTER A COMMAND?
         BZ    COMANDED            NO, FORGET IT
         BO    STOPWTR             GO TERMINATE IF STOP CMND
         SPACE 1
FREECIB  DS    0H                  CHECK COMMAND ENTRY
         L     R2,COMMLPTR         GET COMMAND LIST ADDRESS
         USING COMDSECT,R2         ESTABLISH COMM AREA ADDRESSABILITY
         L     R8,COMCIBPT         GET CIB ADDRESS
         USING CIBDSECT,R8         ESTABLISH CIB ADDRESSABILITY
         MVC   UCMID,CIBCONID      SAVE THE CONSOLE ID
         LA    R5,CIBDATLN         POINT TO PARAMETER LENGTH
*        GOSUB GETOPTNS            GO PROCESS THE COMMAND INPUT BUFFER
         SPACE 1
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R8) FREE CIB
         QEDIT ORIGIN=COMCIBPT,CIBCTR=1 INDICATE 1 CIB TO BE CHAINED
         SPACE 1
COMANDED DS    0H                  RETURN TO CALLER
         SUBOUT RESTORE=(R2,R4,R5,R8) SUBROUTINE EXIT
         SPACE 1
         DROP  R2                  END COMMAREA ADDRESSING
         DROP  R8                  END CIB ADDRESSABILITY
         EJECT
***********************************************************************
*        UCB DATA EXTRACTION                                          *
***********************************************************************
         SPACE 1
UCBDATA  SUBIN SAVE=(R1,R4,R6,R7,R8)
         LH    R6,DEVNUMB          GET SYSUT2 DEVICE ADDRESS
         IC    R6,SEMFDTL+SEDEVADD-SEREC PLUS LATEST SUFFIX
         STH   R6,DEVNUMB          SAVE LATEST DEVICE NUMBER
         SR    R7,R7               CLEAR ANSWER
         GOSUB USERSUP             GET INTO SUPERVISOR STATE
         SPACE 1
         PUSH  USING               SAVE BASE REGISTER INFORMATION
         BALR  R4,0                SET TEMPORARY BASE
         USING *,R4                ESTABLISH ADDRESSABILITY
         LR    R8,R13              SAVE PROPER SAVE AREA ADDRESS
         LA    R13,UCBDATAR        POINT TO SPECIAL SAVE AREA
         IOSLOOK DEV=(6),UCB=(7) ASK SYSTEM FOR UCB ADDRESS
         LR    R13,R8              RESTORE PROPER SAVE AREA ADDRESS
         DROP  R4                  END TEMPORARY ADDRESSING
         POP   USING               RESTORE PREVIOUS BASE REG STATUS
         SPACE 1
         LTR   R15,R15             TEST RESULT
         BNZ   UCBDATAX            GIVE UP IF BAD
         USING UCBOB,R7            ESTABLISH UCB ADDRESSABILITY
         MVC   SEMFVOL,UCBVOLI     COPY VOLUME SERIAL
         SPACE 1
UCBDATAX DS    0H                  END OF SUBROUTINE
         GOSUB MODEPROB            RETURN TO PROBLEM MODE
         SUBOUT RESTORE=(R1,R4,R6,R7,R8) RETURN TO CALLER
         SPACE 1
         DROP  R7                  END UCB ADDRESSABILITY
         SPACE 3
UCBDATAR DC    16F'0'              SAVE AREA FOR IOSLOOK
         EJECT
         COPY  UNPACK              GET HEX CONVERSION ROUTINE
         EJECT
*********************************************************************
*         DATE PROCESSING
*********************************************************************
         SPACE 1
DATING   SUBIN SAVE=(R1,R4)
         SR    R1,R1               ASK FOR CURRENT TIME
         GOSUB TODDATE             GO FORMAT TOD-CLOCK
         DATE  SEMFDDMY,FORMAT='DDMMMYY',FROM=TODPJUL FORMAT DATE ..
         MVC   SEMFDHH,TODHH       .. AND HOUR IN SMF RECORD
         MVC   SEMFDMM,TODMM       .. MINUTES
         MVC   SEMFDSS,TODSS       .. SECONDS
         SPACE 1
         SUBOUT RESTORE=(R1,R4)   RETURN TO CALLER
         TITLE 'FUNCTIONAL SUBROUTINES'
***********************************************************************
*        OBTAIN VIRTUAL STORAGE                                       *
*              ON ENTRY R0 = SP AND SIZE REQUIRED                     *
*              ON EXIT  R1 = AREA ADDRESS                             *
***********************************************************************
         SPACE 1
GETSTORE SUBIN SAVE=(R0,R4)        SUBROUTINE ENTRY
         GETMAIN R,LV=(0),LOC=BELOW ASK FOR 24 BIT STORAGE
         SPACE 2
         SUBOUT RESTORE=(R0,R4)    RETURN TO CALLER
         SPACE 3
***********************************************************************
*        TEST IF A DD STATEMENT IS PRESENT BEFORE OPEN                *
***********************************************************************
         SPACE 1
TESTIOT  SUBIN ,                   TEST TASK INPUT/OUTPUT TABLE
         TESTIOT DDNAME=4(R2)      TEST IF DDNAME FOUND IN TIOT
         B     *+4(R15)            TEST CONDITION CODE
         OI    0(R2),DDPRES        TELL THAT DD STATEMENT SUPPLIED
         SUBOUT ,                  RETURN TO CALLER
         EJECT
***********************************************************************
*        OPEN ROUTINE                                                 *
***********************************************************************
         SPACE 1
OPEN     SUBIN SAVE=(R3,R4)        OPEN DATA SET
         USING MDCB,R2             ESTABLISH DD LIST ADDRESSABILITY
         TM    MDCBFLAG,DDINT+DDPRES TEST IF DD INTERESTING AND
         BNO   OPENX               BRANCH IF NO    / PRESENT.
         TM    MDCBFLAG,DDOPEN     TEST IF DD ALREADY OPEN
         BO    OPENX               BRANCH IF OPEN
         L     R3,MDCBDCB          GET DCB ADDRESS
         CLC   MDCBOPEN,=CL8'INPUT' TEST FOR INPUT D/S
         BE    OPENZ               BRANCH IF INPUT D/S
         CLC   MDCBOPEN,=CL8'OUTPUT' TEST FOR OUTPUT D/S
         BE    OPENW               BRANCH IF INPUT D/S
         CLC   MDCBOPEN,=CL8'EXTEND' TEST FOR EXTEND D/S
         BNE   OPENX               GIVE UP IF NOT KNOWN
         OPEN  ((R3),(EXTEND))     OPEN EXTEND DATA SET
         B     OPENY               GO SET SWITCH
OPENW    OPEN  ((R3),(OUTPUT))     OPEN OUTPUT DATA SET
         B     OPENY               GO SET SWITCH
OPENZ    OPEN  ((R3),(INPUT))      OPEN INPUT DATA SET
OPENY    OI    MDCBFLAG,DDOPEN     INDICATE DATA SET OPEN
OPENX    SUBOUT RESTORE=(R3,R4)     RETURN TO CALLER
         SPACE 2
***********************************************************************
*        CLOSE ROUTINE                                                *
***********************************************************************
         SPACE 1
CLOSE    SUBIN SAVE=(R3)           CLOSE DATA SET
         TM    MDCBFLAG,DDOPEN     TEST IF DATA SET OPEN
         BZ    CLOSEX              EXIT IF NOT
         L     R3,MDCBDCB          GET DCB ADDRESS
         CLC   MDCBCLOS,=CL8'LEAVE' TEST FOR REPOSITIONING
         BNE   CLSNLV              REPOSITIONING REQUIRED
         CLOSE ((R3),LEAVE)        CLOSE DATA SET, NO REPOSITION
         B     CLOSEX              GO RESET SWITCH
         SPACE 1
CLSNLV   DS    0H                  CLOSE WITH DEFAULT OPTIONS
         CLOSE ((R3))              CLOSE DATA SET
         SPACE 1
CLOSEX   DS    0H                  RETURN TO CALLER
         NI    MDCBFLAG,FF-DDOPEN  SET OFF 'OPEN' SWITCH
         SUBOUT RESTORE=(R3)       SUBROUTINE EXIT
         SPACE 1
         DROP  R2                  END DD LIST ADDRESSABILITY
         EJECT
***********************************************************************
*        ROUTINE TO GET INTO SUPERVISOR MODE, PROTECT KEY ZERO        *
***********************************************************************
         SPACE 1
MODESUP  DS    0H                  SET SUPERVISOR MODE
         SUBIN ,                   SUBROUTINE ENTRY
         MODESET MODE=SUP,KEY=ZERO GET INTO SUPERVISOR MODE,PK0
         SUBOUT ,                  SUBROUTINE EXIT
         SPACE 2
***********************************************************************
*        ROUTINE TO GET INTO SUPERVISOR MODE, USER PROTECT KEY        *
***********************************************************************
         SPACE 1
USERSUP  DS    0H                  SET SUPERVISOR MODE
         SUBIN ,                   SUBROUTINE ENTRY
         MODESET MODE=SUP,KEY=NZERO GET INTO SUPERVISOR MODE,USER PK
         SUBOUT ,                  SUBROUTINE EXIT
         SPACE 2
***********************************************************************
*        ROUTINE TO GET INTO PROBLEM STATE, USER PROTECT KEY          *
***********************************************************************
         SPACE 1
MODEPROB DS    0H                  SET PROBLEM PROGRAM MODE
         SUBIN ,                   SUBROUTINE ENTRY
         MODESET MODE=PROB,KEY=NZERO GET OUT OF SUPERVISOR MODE
MODEPROX DS    0H                  NOW IN PROBLEM PROGRAM MODE
         SUBOUT ,                  SUBROUTINE EXIT
         EJECT
         COPY  PERCENT0            INCLUDE PERCENTAGE CODE
         TITLE 'ERROR ROUTINES'
***********************************************************************
*        I/O ERROR ROUTINE                                            *
***********************************************************************
         SPACE 1
IOERROR  SUBIN ,                   ANALYSE I/O ERROR
         MVC   COMPCODE,=H'20'     SET COMPLETION CODE
         LA    R4,WTOIOE           POINT TO MESSAGE SKELETON
         SYNADAF ACSMETH=QSAM      CALL ANALYSIS ROUTINE
         MVC   27(86,R4),50(R1)    ADD RESULT OF ANALYSIS TO LINE
         SYNADRLS ,                RELEASE OS BUFFER
         WTO   MF=(E,WTOIOE)       TELL OPERATOR OF ERROR
         SUBOUT RETURN=CLOSEM      TERMINATE JOB
         TITLE 'TOD CLOCK PROCESSING'
***********************************************************************
*        TIME OF DAY ROUTINE                                          *
* ON EXIT FROM THIS ROUTINE R0  =  TIME OF DAY IN HUNDREDTHS OF SECOND*
*                           R1  =  PACKED DATE 0CYYDDDF               *
***********************************************************************
         SPACE 1
TIME     DS    0H                  TIME SUB-ROUTINE
         SUBIN ,                   SUBROUTINE ENTRY
         TIME  BIN,ZONE=LT         GET LOCAL DATE AND TIME
         SPACE 1
         SUBOUT ,                  RETURN TO CALLER
         SPACE 3
***********************************************************************
*        STIMER EXIT ROUTINE                                          *
***********************************************************************
         SPACE 1
         PUSH  USING               SAVE BASE REGISTER INFORMATION
*        DROP  R13,R12             END PROGRAM ADDRESSING
POSTWAIT DS    0H                  STIMER EXIT
         USING POSTWAIT,R15        ESTABLISH ADDRESSABILITY
         STM   R14,R12,12(R13)     SAVE REGISTERS
         SPACE 1
         POST  STIMRECB            INDICATE END OF INTERVAL
         SPACE 1
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO SYSTEM
         SPACE 1
         DROP  R15                 END TEMPORARY ADDRESSING
         POP   USING               RESTORE PREVIOUS BASE REG STATUS
         EJECT
         COPY TODDATE              INCLUDE STANDARD CODE
         TITLE 'DATA AREAS'
BEGSNAP  DS    0D                  SNAP DATA AREAS FOLLOWING
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         SPACE 1
BUFF3990 DS    0F                  3990 BUFFER GETMAIN SPECIFICATION
         DC    AL1(SPOOL)          3990 BUFFER SUBPOOL NUMBER
         DC    AL3(SIZE3990)       3990 BUFFER MAX SIZE
SPOOL    EQU   30                  SUB-POOL NUMBER WE WILL USE
SIZE3990 EQU   64*SELENTH          MAXIMUM SIZE OF DATA
BUFFA    DC    A(0)                ADDRESS OF ONE BUFFER
BUFFB    DC    A(0)                ADDRESS OF ANOTHER BUFFER
         SPACE 1
         DS    0F                  GET ADDRESSES ALIGNED
ADDRUCB  DC    A(0)                ADDRESS OF SUBSYSTEM UCB
COMMLPTR DC    A(0)                PTR FROM EXTRACT (TO ECB & CIB PTRS)
CMNDECBP DC    A(0)                PTR TO ECB POSTED WHEN CMND ISSUED
ECBL2PTR DC    A(CMDECBP2)         POINTER TO SECOND ECBLIST
CMDECBP2 DC    A(0)                POINTER TO COMMAND ECB
TIMRECBP DC    X'80',AL3(STIMRECB) POINTER TO ECB POSTED BY STIMER EXIT
STIMRECB DC    F'0'                ECB POSTED BY STIMER EXIT
WTORECB  DC    F'0'                ECB POSTED BY OPERATOR REPLY
         SPACE 1
CNTSUT2  DC    PL8'0'              OUTPUT RECORD COUNT FIELD
CNTSUT3  DC    PL8'0'              OUTPUT RECORD COUNT FIELD
CNTSUTR3 DC    PL8'0'              INPUT RECORD COUNT FIELD
ONE      DC    PL1'1'              COUNT INCREMENT
SIGN     EQU   X'F0'               POSITIVE PACKED SIGN
         EJECT
DOMID010 DC    F'0'                ID OF MESSAGE W010
UCMID    DC    X'00'               ID OF CONSOLE TALKING TO ME
COMPCODE DC    H'0'                PROGRAM COMPLETION CODE
SCANBLKS DS    20F                 WORK AREA FOR SCAN MACRO
WORKKEY  DS    D                   WORK AREA FOR CIB PROCESSING
DWORK1   DC    D'0'                DOUBLE GENERAL WORK AREA
DWORK2   DC    D'0'                DOUBLE GENERAL WORK AREA
TIMEFORE DC    D'0'                SAVE AREA FOR TIME OF WAIT
TIMEAFT  DC    D'0'                SAVE AREA FOR TIME OF POST
ZEROWORD DC    F'0'                A LOT OF NOTHING
MIDNIGHT DC    A(24*60*60*100)     MIDNIGHT IN 100THS OF SECONDS
FIFTEENM DC    A(15*60*100)        INTERVAL BOUNDARY (15 MINS)
MINUSONE DC    F'-1'               ALL BINARY ONES
WAITTIME DC    F'0'                INTERVAL TO WAIT
RETCODE  DC    H'0'                MACRO RETURN CODE SAVE AREA
DEVNUMB  DC    AL2(0)              DEVICE NUMBER
         DS    0F                                                  ATAG
PACKFELD DS    CL8                                                 ATAG
ZAHLFELD DS    CL9                                                 ATAG
SNAPID   DC    X'00'               FOR IDENTIFYING ORIGIN OF SNAP
DEFLTVOL DC    CL6' '              DEFAULT VOLUME SERIAL
         TITLE 'DCB''S AND I/O CONTROL TABLES'
***********************************************************************
*        DCB'S TABLE                                                  *
***********************************************************************
         SPACE 1
DCBTABLE DS    0F
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'SYSUT2',CL8'INPUT',CL8'LEAVE'
DCBNTRY  EQU   *-DCBTABLE          LENGTH OF ONE TABLE ELEMENT
SNAPSW   DC    X'00',AL3(SNAPDCB),CL8'SNAP',CL8'OUTPUT',CL8' '
OPENSIZE EQU   *-DCBTABLE          TABLE SIZE OF FULL TIME FILES
MAXOPEN  EQU   OPENSIZE/DCBNTRY    MAXIMUM NUMBER OF DCB'S TO OPEN
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUM NUMBER OF DCB'S
         SPACE 1
DDBYPASS EQU   128                 DD NON-PROCESS
DDINT    EQU   16                  DD INTEREST
DDPRES   EQU   8                   DD PRESENT
DDOPEN   EQU   1                   DATA SET IS OPEN
FF       EQU   255                 ALL BITS ON
         SPACE 2
WTOIOE   DS    0F
         DC    AL2(WTOEND-*),H'0',CL109'******** - I/O ERROR -'
WTOEND   EQU   *
         EJECT
***********************************************************************
*        DATA CONTROL BLOCKS                                          *
***********************************************************************
         SPACE 1
SYSUT2   DCB   DDNAME=SYSUT2,                                          *
               MACRF=E,                                                *
               DEVD=DA
         SPACE 3
SNAPDCB  DCB   DDNAME=SNAP,DSORG=PS,MACRF=W,                           *
               RECFM=VBA,LRECL=125,BLKSIZE=882
         SPACE 3
         DS    0D                  DOUBLE WORD BOUNDARY FOR IOB
IOB      DC    X'42',AL3(0),A(ECB)
         DC    D'0'
IOBCP    DC    A(0,SYSUT2)
         DC    D'0'
ABSADDR  DC    D'0'                IOBSEEK
         DC    F'0'
ECB      DC    F'0'
         SPACE 1
SEORDER  DS    0D                  DOUBLE WORD BOUNDARY COMMAND ORDER
         DC    X'18'               PREPARE FOR READ SUBSYSTEM DATA CODE
         DC    AL1(0)              RESERVED. ZEROES
         DC    AL4(0)              RESERVED. ZEROES
         DC    X'01'               SUBSYSTEM STATISTICS REQUIRED
         DC    X'FF'               ALL DEVICES REQUIRED
         DC    AL4(0)              RESERVED. ZEROES
         SPACE 1
PREPARE  CCW   X'27',SEORDER,X'40',12 PERFORM SUBSYSTEM FUNCTION
READATA  CCW   X'3E',0,0,SIZE3990  READ SUBSYSTEM DATA
         TITLE 'LITERAL POOL'
***********************************************************************
*        LITERAL POOL                                                 *
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL GOES HERE
         SPACE 3
         COPY  SESMF               COPY SMF RECORD
         TITLE 'OPERATOR CONSOLE MESSAGES'
***********************************************************************
*        WTO SKELETONS                                                *
***********************************************************************
         SPACE 1
         PUSH PRINT                SAVE PRINT STATUS
         PRINT ON,GEN              NEW PRINT STATUS
SECRW010 WTO   'SECRW010   CACHE DISABLED',  WARNING MSG               X
               ROUTCDE=(2,4,10),   ROUTE TO DASD AREAS + ERRORS        X
               DESC=(3),MF=L       MESSAGE IS ACTION REQUIRED
         SPACE 2
SECRW005 WTO   'SECRW005 CUU VVVVVV IS XXX% NVS CONSTRAINED', WARNING  X
               ROUTCDE=(2,4,10),   ROUTE TO DASD AREAS + ERRORS        X
               DESC=(4),MF=L       MESSAGE IS SYSTEM STATUS
         SPACE 1
*        OFFSETS IN MESSAGE DATA LINES
         SPACE 1
MSG05NUM EQU   SECRW005+4,8        MESSAGE NUMBER
MSG05CUU EQU   SECRW005+4+9,3      DEVICE ADDRESS
MSG05VOL EQU   SECRW005+4+13,6     DEVICE VOLSER
MSG05PCT EQU   SECRW005+4+22,4     DEVICE % FLOODED, INCL. FILL CHAR
MSG05MSK DC    X'40202120'         DEVICE PERCENT EDIT MASK
         EJECT ,
SECRI001 WTO   ('SECRI001   CACHE % USE/GAIN        ',C),              X
               ('XX0   0     1     2     3     4     5     6     7',   X
               L),                 LABEL LINE 1                        X
               ('XX8   8     9     A     B     C     D     E     F',   X
               L),                 LABEL LINE 2                        X
               ('240   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 1                         X
               ('248   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 2                         X
               ('250   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 3                         X
               ('258   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 4                         X
               ('260   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 5                         X
               ('268   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 6                         X
               ('270   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 7                         X
               ('278   -     -     -     -     -     -     -     -  ', X
               D),                 DATA LINE 8                     ATAGX
               ('TOTALS: IO: XXXXXX RD: XXXXXX WR: XXXXXX NC: XXXXXX', X
               DE),                DATA LINE 9                     ATAGX
               ROUTCDE=(2,4),      ROUTE TO DASD AREAS                 X
               DESC=(4),MF=L       MESSAGE IS SYSTEM STATUS
*        FORMAT  CUU 00/99 11/99 22/99 33/99 44/99 55/99 66/99 77/99))
         SPACE 1
         POP PRINT                RESTORE PRINT STATUS
         SPACE 1
*        OFFSETS IN MESSAGE DATA LINES
         SPACE 1
MSG01LEN EQU   *-SECRI001          MESSAGE LENGTH                  ATAG
MSG01TOI EQU   SECRI001+MSG01LEN-7-33    START OF TOTAL IO FIELD   ATAG
MSG01TOR EQU   SECRI001+MSG01LEN-7-22    START OF TOTAL RD FIELD   ATAG
MSG01TOW EQU   SECRI001+MSG01LEN-7-11    START OF TOTAL WR FIELD   ATAG
MSG01TON EQU   SECRI001+MSG01LEN-7       START OF TOTAL NC FIELD   ATAG
         SPACE 1
MSG01NUM EQU   SECRI001+4,8        MESSAGE NUMBER
MSG01CUU EQU   SECRI001+158,3      DEVICE ADDRESS
MSG01MAT EQU   SECRI001+161,0      START OF DATA MATRIX
MSG01LIN EQU   55                  DATA MATRIX LINE LENGTH
MSG01ENT EQU   6                   DATA MATRIX ENTRY
MSG01EFF EQU   4,2                 DATA MATRIX EFFICIENCY OFFSET
MSG01NOC DC    CL2'**'             DATA MATRIX NO CACHE SYMBOL
MSG01NOP DC    CL6'   -  '         DATA MATRIX NULL ENTRY
MSG01MSK DC    X'40212020612020'   DATA MATRIX ENTRY EDIT MASK
MSG01TOM DC    X'4020202020202120'     TOTALS EDIT MASK            ATAG
MASKE    DC    X'40202020202020202120' TOTALS EDIT MASK            ATAG
*
EOSNAP   EQU   *                   END OF STORAGE AREA TO BE SNAPPED
         TITLE 'DSECT MAPS'
***********************************************************************
*        DD TABLE ENTRY FORMAT                                        *
***********************************************************************
         SPACE 1
MDCB     DSECT ,                   FORMAT OF A DCB TABLE ENTRY
MDCBDCB  DS    0F                  DCB POINTER
MDCBFLAG DS    XL1                 FLAGS
         DS    AL3                 ADDRESS OF DCB
MDCBDDNM DS    CL8'DDNAME'         DDNAME
MDCBOPEN DS    CL8'INPUT'          TYPE OF OPEN REQUIRED
MDCBCLOS DS    CL8'REREAD'         TYPE OF CLOSE REQUIRED
         SPACE 1
MDCBLEN  EQU   *-MDCB              LENGTH OF ONE TABLE ENTRY
         EJECT
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT ON,NOGEN            NOT EXPAND SYSTEM DSECTS
         SPACE 3
COMDSECT DSECT ,                   COMMUNICATIONS AREA
         IEZCOM ,                  MAP COMMUNICATIONS AREA
*        EJECT
         SPACE 3
CIBDSECT DSECT ,                   COMMAND INPUT BUFFER
         IEZCIB ,                  MAP COMMAND BUFFER
*        EJECT
         SPACE 3
         CVT   DSECT=YES           CVT MAPPING
*        EJECT
         SPACE 3
         IEESMCA ,                 SMCA MAPPING
*        EJECT
         SPACE 3
         IEFUCBOB LIST=YES,PREFIX=YES UCB MAPPING
*        EJECT
         SPACE 3
         IECDIOCM ,                IOCOM MAPPING
*        EJECT
         SPACE 3
         IEZDEB LIST=YES           DEB MAPPING
*        EJECT
         SPACE 3
         DCBD  DSORG=PS,DEVD=DA    DCB DSECT
         EJECT
*        SPACE 3
         POP   PRINT               RESTORE PRINT STATUS
         COPY SEREC                3990 SUBSYSTEM STATUS AREA
         SPACE 3
         END
