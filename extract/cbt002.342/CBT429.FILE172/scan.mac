         MACRO
&LABEL   SCAN  &FIELD,&KEY,&REG=,&YES=,&NO=,&LIMIT=,                   X
               &DATA=,&LENGTH=256,&END=,&DELIM=',',&CHAIN=,&STRING=NO, X
               &SP=1,&RETAREA=,&BLKLEN=8
.*
.*       PDSDOC *MACRO TO SCAN FOR DATA...............................*
.*
.*
.*       THIS MACRO IS A COMPOSITE OF THE SCAN MACROS DEVELOPED
.*        IDEPENDENTLY BY D.A.MOORCROFT AND J.E.ABBEY.  FORTUNATELY,
.*        THEY USE DIFFERENT KEYWORDS, AND ONLY DAM'S MACRO HAS
.*        POSITIONAL OPERANDS, SIMPLIFYING COMBINATION.
.*       THE OPERANDS ON THE FIRST LINE OF THE PROTOTYPE STATEMENT
.*        APPLY TO DAM'S MACRO.  THE OTHER OPERANDS ARE TO JEA'S MACRO.
.*
         LCLC  &TEST
         LCLA  &NUM
         LCLA  &K,&L,&LL
         LCLA  &LLIM,&LF
         LCLC  &R
         LCLC  &LIMR,&LFC
.*
.*       IDENTIFY OPERANDS FOR DAM'S MACRO AND GO TO IT IF PRESENT
.*
         AIF   ('&FIELD' NE '').DAMACRO
         AIF   ('&KEY' NE '').DAMACRO
         AIF   ('&YES' NE '').DAMACRO
         AIF   ('&NO' NE '').DAMACRO
         AIF   ('&LIMIT' NE '').DAMACRO
         AIF   ('&REG' NE '').DAMACRO
&NUM     SETA  0
&TEST    SETC  '&LENGTH'
         AIF   (T'&LABEL EQ 'O').NOLAB
&LABEL   EQU   *                   VERSION 1 ( 29/03/77 )
.NOLAB   AIF   ('&TEST'(1,1) NE '(').NOLENR
         LA    15,0&LENGTH
         AGO   .LOGIC
.NOLENR   L    15,=A(&LENGTH)
.LOGIC   BCTR  15,0
&TEST    SETC  '&DATA'
         AIF   ('&TEST'(1,1) NE '(').NODREG
         LA    14,0&DATA
         AGO   .RETTEST
.NODREG  LA    14,&DATA
.RETTEST AIF   (T'&RETAREA EQ 'O').LOGIC2
         AIF   ('&RETAREA'(1,1) EQ '(').REGLOAD
         LA    REG2,&RETAREA       LOAD ADDRESS FOR DESCR BLOCKS
         AGO   .B270
.REGLOAD LA    REG2,0&RETAREA      LOAD ADDRESS FOR DESCR BLOCKS
         AGO   .B270
.LOGIC2  LA    2,&CHAIN
         CNOP  2,4
         B     *+278
         AGO   .TABLES
.B270    CNOP  2,4
         B     *+270
.TABLES  ANOP
IHB&SYSNDX.A TRT 0(1,14),IHB&SYSNDX.T
IHB&SYSNDX.B DC A(0)
         AIF   (T'&RETAREA NE 'O').NOSAVE
IHB&SYSNDX.S DC 2A(0)                   USED FOR SAVING REGS. JEA VS3.7
.NOSAVE  ANOP
IHB&SYSNDX.T DC 256X'00'               TABLE FOR TRANSLATE AND TEST
         AIF   (T'&END EQ 'O').NOENDCH
&NUM     SETA  &NUM+1
.ORG     ORG   IHB&SYSNDX.T+C&END(&NUM)
         DC    X'04'
         AIF   (N'&END NE &NUM).ORG
&NUM     SETA  0
.NOENDCH ANOP
&NUM     SETA  &NUM+1
         ORG   IHB&SYSNDX.T+C&DELIM(&NUM)
         DC    X'08'
         AIF   (N'&DELIM NE &NUM).NOENDCH
         ORG   IHB&SYSNDX.T+256
         AIF   (T'&RETAREA EQ 'O').GETMAIN
IHB&SYSNDX LA  1,&BLKLEN.(2)       SIMULATE GETMAIN OF NEXT N BYTES
         AGO   .BLKINIT
.GETMAIN ANOP
.**********************************************************************
.*  THE SAVE & RESTORE OF REGS 15 & 0 WAS ADDED FEB '77 TO OVERCOME   *
.*    THE LOSS OFF THEIR CONTENTS DURING GETMAIN IN MVS R3.7          *
.**********************************************************************
IHB&SYSNDX STM   15,0,IHB&SYSNDX.S     SAVE REGISTERS USED BY GETMAIN
         GETMAIN R,LV=&BLKLEN,SP=&SP
         LM    15,0,IHB&SYSNDX.S       RESTORE REGS USED BY GETMAIN
.BLKINIT STCM  1,7,1(2)                STORE NEW ADDRESS IN CHAIN
         LR    0,2                     SAVE LAST BLOCK ADDRESS
         ST    1,IHB&SYSNDX.B          SAVE THIS ADDRESS
         XC    0(&BLKLEN,1),0(1)       CLEAR NEW BLOCK
IHB&SYSNDX.C EQU   *
         XR    2,2                     CLEAR REG 2
         EX    15,IHB&SYSNDX.A         EXECUTE TRANSLATE AND TEST
         BC    4,IHB&SYSNDX.E  LENGTH NOT EXHAUSTED - BRANCH ROUND
         L     2,IHB&SYSNDX.B          - LENGTH EXHAUSTED
         BC    8,*+22
         LTR   15,15
         BNZ   *+20
         LR    1,0                     RELOAD ADDRESS PREVIOUS BLOCK
         XC    0(4,1),0(1)
         B     IHB&SYSNDX.D
         LA    15,1(15)
         ST    14,4(2)                 - SET LAST
         STC   15,4(2)                 - CHAIN ENTRY
         B     IHB&SYSNDX.D            COMPLETION
IHB&SYSNDX.E EQU   *
         B     *(2)                    TEST RETURN CODE FROM TRT
         NI    IHB&SYSNDX.X,X'0F'      ARRANGE EXIT IF END DETECTED
         BCTR  15,0                    LENGTH OF DELIMITER BYTE
         SR    1,14                    CALCULATE LENGTH OF FIELD
         SR    15,1                    CALCULATE NEW LENGTH FOR TRT
         L     2,IHB&SYSNDX.B          PICK UP CHAIN
         ST    14,4(2)                 STORE DATA ADDRESS IN CHAIN
         STC   1,4(2)                  STORE LENGTH IN TOP BYTE
         LA    14,1(1,14)              SET NEW START ADDRESS FOR SCAN
         AIF   ('&STRING' NE 'NO').STRING
         LTR   1,1                     TEST FOR TWO SUCCESSIVE DELIM'S
         BNZ   *+20                    I.E. MISSING OPERAND ETC
         TM    IHB&SYSNDX.X,X'F0'  END SCAN BEEN DETECTED ?
         BNZ   IHB&SYSNDX.C        NO. JUST A NULL OPERAND. IGNORE IT
         LR    1,0                 RELOAD ADDRESS OF PREVIOUS BLOCK
         XC    0(4,1),0(1)         CLEAR CHAINING POINTER
.STRING  ANOP
IHB&SYSNDX.X EQU   *+1                 ADDRESS OF CONDITION BYTE
         B     IHB&SYSNDX              LOOP FOR ENTIRE DATA FIELD
IHB&SYSNDX.D EQU   *
         OI    IHB&SYSNDX.X,X'F0'      RESET BRANCH FOR NEXT EXECUTION
         MEXIT
.DAMACRO ANOP
.*
.*       THIS IS DAM'S SCAN MACRO.  THE FORMAT IS :-
.*
.*       SCAN  <FIELD>,<SEARCH-ARGUMENT><,REG=><,YES=><,NO=><,LIMIT=>
.*
.*             <FIELD> - NAME OF FIELD TO BE SEARCHED
.*             <SEARCH-ARGUMENT> - NAME OF FIELD CONTAINING SEARCH
.*              STRING, OR LITERAL PRECEDED BY '='.
.*             <,REG=> - REGISTER TO BE USED AS WORK REGISTER (DEFAULT
.*             <,YES=> - ADDRESS TO BRACH TO IF STRING FOUND
.*             <,NO=> - ADDRESS TO BRANCH TO IF NOT FOUND
.*             <,LIMIT=> - LENGTH TO SEARCH. DEFAULT IS FULL FIELD.
.*
         AIF   ('&LABEL' EQ '').C1
&LABEL    DS    0H                 VERSION 1 ( 29/03/77 )
.C1      AIF   ('&FIELD' NE '').C2
         MNOTE 16,'NO FIELD TO BE SEARCHED WAS SUPPLIED'
         MEXIT
.C2      AIF   ('&KEY' NE '').C3
         MNOTE 16,'NO KEY ON WHICH TO SEARCH WAS SUPPLIED'
         MEXIT
.C3      ANOP
         AIF   ('&KEY'(1,1) EQ '=').C15
         AIF   ('&LIMIT'(1,1) EQ '(').C15
         AIF   (L'&FIELD GT L'&KEY).C15
         MNOTE 16,'FIELD TO BE SEARCHED NOT LARGER THAN KEY'
         MEXIT
.C15     ANOP
&R       SETC  '&REG'
         AIF   ('&REG' NE '').C4
         MNOTE 1,'NO POINTER REGISTER WAS SUPPLIED - R1 IS ASSUMED'
&R       SETC  'R1'
.C4      ANOP
         AIF   ('&FIELD'(1,1) NE '(').C4A
&LF      SETA  K'&FIELD-2
&LFC     SETC  '&FIELD'(2,&LF)
         LR    &R,&LFC
         AGO   .C4B
.C4A     ANOP
         LA    &R,&FIELD
.C4B     ANOP
         AIF   ('&KEY'(1,1) EQ '=').C5
&L       SETA  L'&KEY
&LL      SETA  &L
SCAN&SYSNDX CLC   0(&L,&R),&KEY
         AGO   .C6
.C5      ANOP
&K       SETA  K'&KEY
&K       SETA  &K-4
         AIF   ('&KEY'(2,1) EQ 'C').C16
         AIF   ('&KEY'(2,1) EQ 'X').C17
         AIF   ('&KEY'(2,1) EQ 'P').C18
         AIF   ('&KEY'(2,1) EQ 'B').C19
         MNOTE 16,'UNRECOGNISABLE LITERAL IN ''KEY'' FIELD'
         MEXIT
.C19     ANOP
&K       SETA  &K/8
         AGO   .C16
.C18     ANOP
&K       SETA  &K/2
&K       SETA  &K+1
         AGO   .C16
.C17     ANOP
&K       SETA  &K/2
.C16     ANOP
&LL      SETA  &K
SCAN&SYSNDX CLC   0(&K,&R),&KEY
.C6      AIF   ('&YES' NE '').C7
         MNOTE *,'NO ''FOUND'' ADDRESS SUPPLIED - MACRO END +4 ASSUMED'
         BE    EXIT&SYSNDX.+4
         AGO   .C9
.C7      AIF   ('&YES'(1,1) EQ '(').C8
         BE    &YES
         AGO   .C9
.C8      BE    0(&YES(1))
.C9      LA    &R,1(&R)
         AIF   ('&LIMIT'(1,1) EQ '(').C10A
         AIF   ('&LIMIT' NE '').C10
&L       SETA  L'&FIELD
         C     &R,=A(&FIELD.+&L.+1-&LL)
         AGO   .C11
.C10     C     &R,=A(&LIMIT)
         AGO   .C11
.C10A    ANOP
&LLIM    SETA  K'&LIMIT-2
&LIMR    SETC  '&LIMIT'(2,&LLIM)
         CR    &R,&LIMR
.C11     BL    SCAN&SYSNDX
         AIF   ('&NO' NE '').C12
         MNOTE *,'NO ''NOT-FOUND'' ADDRESS SUPPLIED - MACRO END USED'
EXIT&SYSNDX DS    0H
         MEXIT
.C12     AIF   ('&NO'(1,1) EQ '(').C13
         B     &NO
         AGO   .C14
.C13     BR    &NO(1)
.C14     ANOP
EXIT&SYSNDX DS    0H
         MEND
