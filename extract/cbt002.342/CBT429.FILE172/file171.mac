./ ADD NAME=TMAPCOMM 0101-95016-95016-1459-00208-00208-00000-JSYSC
*---------------------------------------------------------------------*
*                                                                     *
*          COMMON AREA MAPPING MACRO                                  *
*                                                                     *
*     This macro will generate either the 'common' module CSECT or    *
*     a DSECT to map the 'common' module.  'Common' is used for       *
*     constants and work areas that are required by several modules   *
*     allowing some elimination of duplicated data and to allow       *
*     inter-module communication.                                     *
*                                                                     *
*     The trace table code is also incorporated into the 'TMAPCOMM'.  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&NAME    TMAPCOMM &TYPE=
         AIF   (T'&NAME EQ 'O').NONAME
         AIF   ('&TYPE' EQ 'CSECT').CSECT
         AIF   ('&TYPE' EQ 'DSECT').DSECT
         MNOTE 12,'INVALID TYPE'
         MEXIT
.CSECT   ANOP
&NAME    CSECT
         AGO   .NODSECT
.DSECT   ANOP
&NAME    DSECT
.NODSECT ANOP
*---------------------------------------------------------------------*
*                                                                     *
*          ADDRESS CONSTANTS                                          *
*                                                                     *
*---------------------------------------------------------------------*
         DC    CL8'TMAPCOMM'
ACOMM    DC    A(TMAPCOMM)         COMMON MODULE
         DC    CL8'TAPEDCB'
ADCB     DC    V(TMAPDCB)          DCB INFO CONVERTER
         DC    CL8'TAPEEXCP'
ATAPEIO  DC    V(TAPEEXCP)         TAPE I/O MODULE ADDRESS
         DC    CL8'TMAPMAIN'
AMAIN    DC    V(TMAPMAIN)         MAINLINE MODULE ADDRESS
         DC    CL8'TMAPPARM'
APARM    DC    V(TMAPPARM)         PARAMETER CONVERTER
         DC    CL8'TMAPPRT'
APRT     DC    V(TMAPPRT)          PRINT MODULE ADDRESS
*---------------------------------------------------------------------*
*                                                                     *
*          File processor table                                       *
*                                                                     *
*     On the first record following a tapemark, the main line         *
*     program calls each module in the following list until one       *
*     of them signals that it 'recognizes' the data.  The search      *
*     stops when the first module signals it 'knows' the data.        *
*     If a file may be detected by more than one file processor       *
*     like SMP/E MCS files, the order of search will determine        *
*     the file type.                                                  *
*                                                                     *
*---------------------------------------------------------------------*
PROCTBLE DS    0A
         TMAPPROC TMAPCBT            CBT COMPRESSED DATASETS
         TMAPPROC TMAPCOPY           IEBCOPY
         TMAPPROC TMAPDSS            DF/DSS BACK-UPS
         TMAPPROC TMAPFDR            FDR BACK-UPS
         TMAPPROC TMAPLABL           STANDARD LABELS
         TMAPPROC TMAPMOVE           IEHMOVE
         TMAPPROC TMAPMCS            SMP/E MCS
AUPDT    TMAPPROC TMAPUPDT           IEBUPDTE
         DC    X'FF'                 END OF LIST
*---------------------------------------------------------------------*
*                                                                     *
*          CURRENT RECORD ADDRESS AND LENGTH                          *
*                                                                     *
*---------------------------------------------------------------------*
COMMRECA DC    A(0)                CURRENT RECORD'S ADDRESS
COMMRECL DC    AL2(0)              CURRENT RECORD'S LENGTH
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE CONTROL                                              *
*                                                                     *
*---------------------------------------------------------------------*
         DS    0A
         DC    CL4'1ST'            FIRST TRACE ENTRY
TR1ST    DC    A(0)
         DC    CL4'LAST'           LAST TRACE ENTRY
TRLAST   DC    A(0)
         DC    CL4'CURR'           CURRENT TRACE ENTRY
TRCURR   DC    A(0)
TRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS
TRR14    DC    A(0)                REGISTER 14 SAVE AREA
TRDATA1  DC    CL8' '              TRACE DATA ITEM 1
TRDATA2  DC    CL8' '              TRACE DATA ITEM 2
TRSIZE   DC    A(1000*TRENTRYL)    TRACE TABLE SIZE
*---------------------------------------------------------------------*
*                                                                     *
*          GLOBAL DATA                                                *
*                                                                     *
*---------------------------------------------------------------------*
COMMCFPE DC    A(0)                CURRENT FILE PROCESSOR TABLE ENTRY
COMMPARM DC    A(0)                ADDRESS OF EXEC STATEMENT PARM DATA
COMMMEML DC    H'0'                LENGTH OF MEMBER ON PRINT LINE
COMMMEM# DC    H'0'                NUMBER OF MEMBERS PER LINE
COMMFLAG DC    X'00'               GLOBAL CONTROL FLAGS
$COMMINQ EQU   X'80'               .. 'INQUIRY' CALLS IN PROGRESS
$COMM1ST EQU   X'40'               .. FIRST RECORD OF FILE
$COMMLST EQU   X'20'               .. 'CLEAN-UP' IN PROGRESS
$COMMSUB EQU   X'10'               .. 'SUB-FUNCTION' CALL
$COMMNOM EQU   X'08'               .. NO PDS MEMBERS
$ABORT   EQU   X'04'               .. SERIOUS ERROR, ABORT
$COMMFUL EQU   X'02'               .. MAP FULL TAPE
$ABEND   EQU   X'01'               .. ABEND ON EXIT
COMMDEVT DC    C' '                TAPE DEVICE TYPE
COMMSUBH DC    CL120' '            SUB HEADING
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
COMMMAXL DC    PL3'60'             MAXIMUM LINES PER PAGE
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*          ADD TRACE ENTRY                                            *
*                                                                     *
*  During program initialization, TMAPMAIN acquires storage for the   *
*  trace table and sets COMM1ST, COMMLAST, and COMMCURR.  TMAPMAIN    *
*  also sets R11 to the address of TMAPCOMM and all other modules     *
*  depend on this remaining unchanged.  Any module except this        *
*  module may call the trace routine.  Macro TMAPTR generates the     *
*  calling sequence.  R14 is the only register altered by the trace   *
*  macro.                                                             *
*                                                                     *
*  The trace table is a "wrap-around" table.  COMM1ST is the first    *
*  entry's address, COMMLAST is the last entry's address, and         *
*  COMMCURR is the address of the last entry added to the table.      *
*  When a trace entry is added to the table, the calling module's     *
*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *
*                                                                     *
*                                                                     *
*                                                                     *
*      This code depends on:                                          *
*           R11  'TMAPCOMM' address                                   *
*           R12  current module's base address                        *
*                and the module's name must be at 10 bytes (0A hex)   *
*                into the module                                      *
*           R14  trace id's address and R14 + 8 will be the return    *
*                address                                              *
*                                                                     *
*---------------------------------------------------------------------*
TRACE000 DS    0H
         USING &NAME,R11           DEFINE BASE
         USING TRENTRY,R1          DEFINE BASE
         STM   R0,R15,TRCESAVE     SAVE ALL REGISTERS
         L     R1,TRCURR           CURRENT TRACE ENTRY
         OC    0(TRENTRYL,R1),0(R1)    EMPTY ENTRY?
         BZ    TRACE010            YES.. USE THIS ENTRY
         LA    R1,TRENTRYL(R1)     NEXT TRACE ENTRY
TRACE010 DS    0H
         C     R1,TRLAST           BEYOND END OF TABLE?
         BL    *+4+4               NO
         L     R1,TR1ST            'WRAP' TRACE TABLE
         ST    R1,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS
         MVC   TREMOD,10(R12)      COPY MODULE NAME
         MVC   TREID,0(R14)        COPY TRACE ID
         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1
         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2
         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA
         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA
         LM    R0,R15,TRCESAVE     RESTORE ALL REGISTERS
         B     8(R14)              RETURN
TRCESAVE DS    16F                 REGISTER SAVE AREA
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE TABLE ENTRY                                          *
*                                                                     *
*---------------------------------------------------------------------*
TRENTRY  DSECT
TREMOD   DS    CL8                 MODULE NAME
TREID    DS    CL8                 TRACE ID
TREDATA1 DS    CL8                 TRACE DATA 1
TREDATA2 DS    CL8                 TRACE DATA 2
TRENTRYL EQU   *-TRENTRY           ENTRY LENGTH
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          File processor table entries                               *
*                                                                     *
*---------------------------------------------------------------------*
PROCDSCT DSECT
PROCNAME DS    CL8                 MODULE'S NAME
PROCEPA  DS    AL4                 MODULE'S ENTRY POINT
PROCL    EQU   *-PROCDSCT          LENGTH OF EACH ENTRY
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          ABEND REASON CODES                                         *
*                                                                     *
*---------------------------------------------------------------------*
ABEND001 EQU   1                   ABEND DUE TO STATUS FROM TAPEEXCP
ABEND002 EQU   2                   UNKNOWN STATUS CODE FROM TAPEEXCP
ABEND003 EQU   3                   ERROR DURING TAPE I/O CLOSE
ABEND004 EQU   4                   UNKNOWN COMMAND PASSED TO TMAPPRT
ABEND005 EQU   5                   UNKNOWN VTOC RECORD TYPE IN TMAPDSS
ABEND006 EQU   6                   LENGTH NEGATIVE IN 'NEXTTRAK' (DSS)
         MEXIT
.NONAME  ANOP
         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'
.MEXIT   ANOP
         MEXIT
         MEND
./ ADD NAME=TAPEUSRO 0100-95016-95016-1241-00982-00982-00000-JSYSC
          TITLE 'TAPEUSRO - EXCP LEVEL TAPE I/O SUBROUTINE WITH USER OP+
               N'
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TAPEUSRO                                              *
*                                                                     *
*  Function:                                                          *
*  This program is a subroutine that performs tape I/O at the EXCP    *
*  level.  MVS "OPEN" is bypassed, therefore 1) this module must run  *
*  APF authorized, 2) there is no data set access RACF checking (you  *
*  can read any data set without having RACF access to it), 3) the    *
*  tape my be labelled or non-labelled, 4) there are no SMF data set  *
*  activity records made to log access to the tape's data sets.       *
*  Since no RACF access check is made to any of the tape's data sets  *
*  and no SMF records are produced, access to this program should be  *
*  restricted.                                                        *
*                                                                     *
*  The CSECT name will be TAPEEXCP.  This allows the link edit        *
*  and "VCON" references to always use the same module names.         *
*                                                                     *
*  This program supports only reads, no tape output is performed.     *
*  The program's parameter list is mapped by the TAPEBLOK macro.      *
*                                                                     *
*  The same TAPEBLOK should be used for all calls to TAPEUSRO.        *
*                                                                     *
*  Functions provided are:                                            *
*     OPEN   TCMD = $TCMDOPN                                          *
*     READ   TCMD = $TCMDRD                                           *
*     CLOSE  TCMD = $TCMDCLS                                          *
*                                                                     *
*   All functions require the "DDNAME" to be specified.  On an OPEN   *
*   call, the tape unit is verified as a being a supported device,    *
*   the I/O area for the tape is allocated, and a REWIND command is   *
*   issued to position the tape to load point. On a READ call, the    *
*   next physical block of the tape will be read and the I/O area     *
*   address and data length will be returned to the caller.  On a     *
*   CLOSE call, the I/O area will be freed.                           *
*                                                                     *
*   If a tapemark or the end of tape is reached, no data will be      *
*   returned.                                                         *
*                                                                     *
*   In the event of an I/O error, TAPEUSRO will try to issue a sense  *
*   command and return the sense info in TSENSE in the parameter      *
*   block.                                                            *
*                                                                     *
*   Multiple tapes may be OPEN at the same time, TAPEUSRO keeps track *
*   of the tapes by DDNAME.  You must specify the DDNAME on each call.*
*                                                                     *
*   This module has all its work areas in the TAPEBLOK data area, so  *
*   it is re-entrant.  MVS still does not allow I/O from above the    *
*   16-meg line, so the program is written as 24-bit.                 *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*                         TRACE MACRO                                 *
*                                                                     *
*        THE TRACE FUNCTION CAPTURES AN 8-BYTE 'ID' AND UP TO 3 8-    *
*        BYTE DATA ELEMENTS.                                          *
*                                                                     *
* ------------------------------------------------------------------- *
         MACRO
&NAME    TAPETR &ID=,                                                  +
               &DATA1=,&RDATA1=,                                       +
               &DATA2=,&RDATA2=,                                       +
               &DATA3=,&RDATA3=
         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010
         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020
         AIF   (T'&DATA3 NE 'O' AND T'&RDATA3 NE 'O').ERR0030
         AIF   (T'&ID EQ 'O').ERR0040
         AIF   ((T'&DATA3 EQ 'O') AND (T'&RDATA3 EQ 'O')).DATA010
         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0050
         AIF   (T'&DATA2 EQ 'O' AND T'&RDATA2 EQ 'O').ERR0050
         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT
.DATA010 ANOP
         AIF   ((T'&DATA2 EQ 'O') AND (T'&RDATA2 EQ 'O')).DATA020
         AIF   (T'&DATA1 EQ 'O' AND T'&RDATA1 EQ 'O').ERR0060
.DATA020 ANOP
         AIF   (T'&DATA1 EQ 'O').DATA040
         AIF   ('&DATA1'(1,1) EQ '(').DATA030
         LA    R14,&DATA1         DATA ADDRESS
         MVC   TTRDATA1,0(R14)    MOVE DATA
         AGO   .DATA050
.DATA030 ANOP
         MVC   TTRDATA1,0&DATA1   MOVE DATA
         AGO   .DATA050
.DATA040 ANOP
         AIF   (T'&RDATA1 EQ 'O').DATA050
         STCM  &RDATA1,15,TTRDATA1
.DATA050 ANOP
         AIF   (T'&DATA2 EQ 'O').DATA070
         AIF   ('&DATA2'(1,1) EQ '(').DATA060
         LA    R14,&DATA2         DATA ADDRESS
         MVC   TTRDATA2,0(R14)    MOVE DATA
         AGO   .DATA080
.DATA060 ANOP
         MVC   TTRDATA2,0&DATA2   MOVE DATA
         AGO   .DATA080
.DATA070 ANOP
         AIF   (T'&RDATA2 EQ 'O').DATA080
         STCM  &RDATA2,15,TTRDATA2
.DATA080 ANOP
         AIF   (T'&DATA3 EQ 'O').DATA100
         AIF   ('&DATA3'(1,1) EQ '(').DATA090
         LA    R14,&DATA3         DATA ADDRESS
         MVC   TTRDATA3,0(R14)    MOVE DATA
         AGO   .DATA110
.DATA090 ANOP
         MVC   TTRDATA3,0&DATA3   MOVE DATA
         AGO   .DATA110
.DATA100 ANOP
         AIF   (T'&RDATA3 EQ 'O').DATA110
         STCM  &RDATA3,15,TTRDATA3
.DATA110 ANOP
         BAL   R14,TRACE000       ENTER TRACE ROUTINE
&NAME    DC    CL8'&ID'           TRACE ID
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0030 ANOP
         MNOTE 12,'DATA3 AND RDATA3 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0040 ANOP
         MNOTE 12,'ID PARAMETER IS REQUIRED'
         MEXIT
.ERR0050 ANOP
         MNOTE 12,'DATA3/RDATA3 IS NOT VALID UNLESS BOTH DATA1/RDATA1 A+
               ND DATA2/RDATA2 ARE SPECIFIED'
         MEXIT
.ERR0060 ANOP
         MNOTE 12,'DATA2/RDATA2 IS NOT VALID UNLESS DATA1/RDATA1 IS SPE+
               CIFIED'
.MEXIT   ANOP
         MEXIT
         MEND
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
TAPEEXCP CSECT
TAPEEXCP AMODE 24
TAPEEXCP RMODE 24
         USING TAPEEXCP,R12
         USING PSA,R0                DEFINE PSA BASE
         USING CMDBLOK,R10           DEFINE PARAMETER BLOCK BASE
         USING IOBLK,R9              DEFINE BASE
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R12,R15               SET BASE REG
         LR    R10,R1                COPY PARAMETER BLOCK ADDRESS
         LA    R1,TSAVE              OUR SAVE AREA ADDRESS
         ST    R13,TSAVE+4           SAVE SAVE AREA ADDRESS
         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S
         LA    R13,TSAVE             SET SAVE AREA ADDRESS
         B     TAPE0000              SKIP EYECATCHER
         DC    CL8'TAPEUSRO'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
TAPE0000 DS    0H
         TAPETR ID=ENTRY,            TRACE CALLS                       +
               DATA1=TDDNAME,        .. FOR DDNAME                     +
               DATA2=TCMD            .. COMMAND
         CLI   TCMD,$TCMDOPN         OPEN TAPE DCB?
         BE    OPEN0000              YES
         CLI   TCMD,$TCMDRD          READ A BLOCK?
         BE    READ0000              YES
         CLI   TCMD,$TCMDCLS         CLOSE DCB?
         BE    CLOSE000              YES
         MVI   TSTAT,$TSTATIC        INVALID COMMAND
         B     TAPE9900              EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             OPEN TAPE DCB                                           *
*                                                                     *
* ------------------------------------------------------------------- *
OPEN0000 DS    0H
         TAPETR ID=OPEN
         ICM   R9,15,TCHAIN          FIRST I/O BLOCK ON THE CHAIN
         BZ    OPEN0020              NO BLOCK ON CHAIN
OPEN0010 DS    0H
         CLC   IODDNAME,TDDNAME      I/O BLOCK ALREADY ON THE CHAIN?
         BE    OPEN0190              YES.. CANNOT ALLOW A DUPLICATE
         ICM   R9,15,IONEXT          NEXT BLOCK ON CHAIN
         BNZ   OPEN0010              PROCESS ALL OF THEM
* ------------------------------------------------------------------- *
*             DETERMINE ADDRESS SPACE TYPE                            *
* ------------------------------------------------------------------- *
OPEN0020 DS    0H
         L     R1,PSAANEW            OUR ASCB ADDRESS
         USING ASCB,R1               DEFINE BASE
         L     R15,ASCBJBNI          JOB NAME ADDRESS
         LA    R15,0(R15)            CLEAR HIGH BIT(S)
         LTR   R15,R15               JOB NAME PRESENT?
         BNZ   OPEN0030              YES
         L     R1,ASCBOUCB           OUR OUCB ADDRESS
         USING OUCB,R1               DEFINE BASE
         BAL   R14,AM31              SWITCH TO 31-BIT MODE
         TAPETR ID=OUCBYFL,                                            +
               RDATA1=R1,                                              +
               DATA2=OUCBYFL
         TM    OUCBYFL,OUCBSTT       IS THIS A STARTED TASK?
         BNO   OPEN0030              NO
         OI    TASTYPE,$TASSTC       ADDRESS SPACE IS AN STC
         TAPETR ID=ASIDSTC
OPEN0030 DS    0H
         BAL   R14,AM24              SWITCH TO 24-BIT MODE
* ------------------------------------------------------------------- *
*             LOCATE UCB FOR REQUESTED DEVICE TYPE                    *
* ------------------------------------------------------------------- *
         L     R1,CVTPTR             CVT'S ADDRESS
         USING CVT,R1                DEFINE BASE
         L     R3,CVTUCBA            FIRST UCB'S ADDRESS
         USING UCBOB,R3              DEFINE BASE
OPEN0040 DS    0H
         TM    UCBSTAT,UCBONLI       IS THIS DEVICE ONLINE?
         BNO   OPEN0070              NO
         TM    UCBSTAT,UCBALOC       IS IT ALREADY ALLOCATED?
         BO    OPEN0070              YES
         TM    UCBTBYT3,UCB3TAPE     IS DEVICE A TAPE UNIT?
         BNO   OPEN0070              NO
         CLI   UCBTBYT4,UCB3480      IS IT A 3480?
         BE    OPEN0060              YES
         CLI   TDEVT,$T3480          3480 WANTED?
         BE    OPEN0070              YES
         CLI   TDEVT,$T3420B         6250 BPI WANTED?
         BE    OPEN0050              YES
         TM    UCBTBYT1,UCBD1600     1600 BPI DRIVE?
         BO    OPEN0090              YES
         TM    UCBTBYT2,UCBDUDN1     800/1650 DRIVE?
         BO    OPEN0090              YES
         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?
         BO    OPEN0090              YES
         B     OPEN0070              OTHERWISE LOOK FOR ANOTHER UNIT
OPEN0050 DS    0H
         TM    UCBTBYT1,UCBD6250     6250 BPI DRIVE?
         BO    OPEN0080              YES
         TM    UCBTBYT2,UCBDUDN2     1600/6250 DRIVE?
         BO    OPEN0080              YES
         B     OPEN0070              OTHERWISE LOOK FOR ANOTHER UNIT
OPEN0060 DS    0H
         CLI   TDEVT,$T3480          3480 WANTED?
         BNE   OPEN0070              NO
         MVI   TDENSITY,$DEN3480     SET FOR 3480 DENSITY
         B     OPEN0100
OPEN0070 DS    0H
         TAPETR ID=NEXTUCB,                                            +
               RDATA1=R3             .. INCLUDE CURRENT UCB'S ADDRESS
         ICM   R3,15,UCBNXUCB        NEXT UCB
         BNZ   OPEN0040              TEST THIS UNIT
         MVI   TSTAT,$TSTATNU        NO UNIT AVAILABLE
         B     TAPE9900              AND EXIT
OPEN0080 DS    0H
         MVI   TDENSITY,$DEN6250     SET FOR 6250 BPI DENSITY
         B     OPEN0100
OPEN0090 DS    0H
         MVI   TDENSITY,$DEN1600     SET FOR 1600 BPI DENSITY
         B     OPEN0100
* ------------------------------------------------------------------- *
*             UCB LOCATED                                             *
* ------------------------------------------------------------------- *
OPEN0100 DS    0H
         TAPETR ID=UCBLOC,           UCB HAS BEEN LOCATED              +
               RDATA1=R3             .. INCLUDE UCB'S ADDRESS
* ------------------------------------------------------------------- *
*             ALLOCATE THE UNIT                                       *
* ------------------------------------------------------------------- *
         LA    R2,T99RB              DAIR REQUEST BLOCK ADDRESS
         USING S99RB,R2              DEFINE BASE
         ST    R2,T99RBA             SET ADDRESS IN POINTER
         OI    T99RBA,X'80'          SET END OF LIST
         XC    T99RB(T99RBL),T99RB   CLEAR REQUEST BLOCK
         MVI   S99RBLN,T99RBL        SET LENGTH
         MVI   S99VERB,S99VRBAL      SET VERB (ALLOCATE)
         LA    R1,T99DDPA            FIRST TEXT UNIT POINTER
         ST    R1,S99TXTPP           SET TEXT POINTER ADDRESS
         LA    R1,T99DDP             DD PARAMETER'S ADDRESS
         ST    R1,T99DDPA            SET ADDRESS
         LA    R1,T99DNP             DSN PARAMETER'S ADDRESS
         ST    R1,T99DNPA            SET ADDRESS
         LA    R1,T99UTP             UNIT PARAMETER'S ADDRESS
         ST    R1,T99UTPA            SET ADDRESS
         LA    R1,T99STP             STATUS (DISP=NEW)
         ST    R1,T99STPA            SET ADDRESS
         LA    R1,T99DPP             DISPOSITION (DISP=KEEP)
         ST    R1,T99DPPA            SET ADDRESS
         LA    R1,T99DMP             DEFERRED MOUNT PARAMETER
         ST    R1,T99DMPA            SET ADDRESS
         OI    T99DMPA,X'80'         SET END OF LIST ADDRESS
         MVC   T99DDP(T99L),T99      INITIALIZE ALL PARAMETERS
         MVC   T99DD,TDDNAME         SET DDNAME
         MVC   T99DN,TDDNAME         SET DSN
         MVC   T99UT(3),UCBNAME      SET UNIT
         LA    R1,T99RBA             POINTER'S ADDRESS
         DYNALLOC                    ALLOCATE THE DRIVE
         STH   R15,T99RC             SET RETURN CODE
         LTR   R15,R15               ALLOCATED SUCCESSFULLY?
         BNZ   OPEN0200              NO
* ------------------------------------------------------------------- *
*             ACQUIRE I/O CONTROL BLOCK                               *
* ------------------------------------------------------------------- *
         GETMAIN R,LV=IOBLKL         ACQUIRE CONTROL BLOCK STORAGE
         LR    R9,R1                 COPY STORAGE ADDRESS
         LA    R14,TCHAIN            INITIALIZE 'CURRENT' POINTER
         ICM   R15,15,TCHAIN         FIRST BLOCK ON CHAIN
         BZ    OPEN0120              END OF CHAIN FOUND
OPEN0110 DS    0H
         LR    R14,R15               COPY CURRENT BLOCK'S ADDRESS
         ICM   R15,15,IONEXT-IOBLK(R15) NEXT ON CHAIN
         BNZ   OPEN0110              FIND END OF CHAIN
OPEN0120 DS    0H
         ST    R14,IOPREV            SET 'PREVIOUS' POINTER
         XC    IONEXT,IONEXT         ZERO 'NEXT' POINTER
         ST    R9,IONEXT-IOBLK(R14) 'NEXT' IN PREVIOUS BLOCK
         MVC   IODDNAME,TDDNAME      SET DD NAME
* ------------------------------------------------------------------- *
*             ACQUIRE I/O AREA                                        *
* ------------------------------------------------------------------- *
         GETMAIN R,LV=$MAXLEN        ACQUIRE I/O AREA
         ST    R1,IOAREA             SAVE I/O AREA ADDRESS
         TAPETR ID=NEWIOBLK,                                           +
               RDATA1=R9,            .. I/O BLOCK'S ADDRESS            +
               RDATA2=R1             .. I/O AREA'S ADDRESS
* ------------------------------------------------------------------- *
*             INITIALIZE CCW'S                                        *
* ------------------------------------------------------------------- *
         MVC   IOREAD,READCCW        INITIALIZE READ CCW
         MVC   IOREW,REWCCW          INITIALIZE REW CCW
         MVC   IOSENSE,SENSECCW      INITIALIZE SENSE CCW
         L     R1,IOAREA             I/O AREA ADDRESS
         STCM  R1,7,IOREAD+1         INITIALIZE I/O AREA ADDRESS
         STCM  R1,7,IOREW+1
         LA    R1,TSENSE             SENSE DATA ADDRESS
         STCM  R1,7,IOSENSE+1        INITIALIZE SENSE DATA ADDRESS
* ------------------------------------------------------------------- *
*             INITIALIZE SENSE INFO                                   *
* ------------------------------------------------------------------- *
         XC    TSENSE,TSENSE         INITIALIZE SENSE DATA
         LA    R5,IOIOB              IOB STORAGE ADDRESS
         LA    R6,IODCB              DCB STORAGE ADDRESS
         LA    R7,IODEB              DEB STORAGE ADDRESS
         USING IOB,R5
         USING IHADCB,R6
         USING DEB,R7
* ------------------------------------------------------------------- *
*           INITIALIZE IOB                                            *
* ------------------------------------------------------------------- *
         XC    IOIOB(IOBL),IOIOB     CLEAR IOB STORAGE
         MVI   IOBFLAG1,X'02'        SET FLAG BYTE 1
         ST    R6,IOBDCBPT           SET DCB ADDRESS
* ------------------------------------------------------------------- *
*           INITIALIZE DCB                                            *
* ------------------------------------------------------------------- *
         MVC   IODCB(DCBL),INITDCB   INITIALIZE DCB
         MVC   DCBDDNAM,TDDNAME      SET DD NAME
         LA    R1,DEBBASIC           DEB BASIC SECTION ADDRESS
         ST    R1,DCBDEBAD           INSERT DEB ADDRESS
         ST    R5,DCBIOBAD           INSERT IOB ADDRESS
         MVC   DCBMACRF,DCBMACR      COPY DCB MACRO FORMAT PARAMETERS
         MVC   DCBIFLGS,DCBIFLG      COPY I/O ERROR FLAGS
         OI    DCBOFLGS,DCBOFOPN     DCB IS OPEN
* ------------------------------------------------------------------- *
*           INITIALIZE DEB                                            *
* ------------------------------------------------------------------- *
         XC    DEBPREFX(DEBPREFE-DEBPREFX),DEBPREFX  CLEAR PREFIX
         XC    DEBBASIC(DEBBASND-DEBBASIC),DEBBASIC  CLEAR BASIC
         MVC   DEBTCBAD,PSATNEW      SET TCB ADDRESS
         MVI   DEBAMLNG,16           SET ACCESS METHOD SECTION LENGTH
         MVI   DEBOFLGS,DEBDSOLD     DISPOSITION 'OLD'
         MVI   DEBOPATB,DEBLEAVE+DEBINPUT
         MVI   DEBNMEXT,1            SET NUMBER OF EXTENTS
         MVI   DEBPRIOR,X'EB'        IT WORKS
         ST    R6,DEBDCBAD           INSERT ASSOCIATED DCB ADDRESS
         MVI   DEBDEBID,X'0F'        IDENTIFY THIS AS A DEB
         STCM  R3,7,DEBSUCBA+1       ASSOCIATED UCB ADDRESS
         L     R1,CVTPTR             CVT ADDRESS
         USING CVT,R1                DEFINE CVT BASE
         MVC   DEBAPPAD,CVTXAPG      I/O APPENDAGE VECTOR TABLE ADDR
         MVC   DEBSDVM,TDENSITY      SET DENSITY
* ------------------------------------------------------------------- *
*           ADD DEB TO DEBCHAIN FROM TCB AND TO DEBTABLE              *
* ------------------------------------------------------------------- *
         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO
         L     R1,PSATNEW            OUR TCB ADDRESS FROM THE PSA
         USING TCB,R1                DEFINE BASE
         L     R15,TCBDEB            FIRST DEB ON DEB CHAIN
         LA    R2,DEBBASIC           'BASIC' PORTION OF DEB
OPEN0130 DS    0H
         STCM  R15,7,DEBDEBB         INSERT PREVIOUS ADDRESS
         CS    R15,R2,TCBDEB         ADD OUR DEB TO CHAIN
         BNE   OPEN0130              UNSUCCESSFUL... TRY AGAIN
         DEBCHK (R6),                USE DEBCHK (REFERENCE DCB NOT DEB)+
               AM=EXCP,              .. EXCP ACCESS METHOD             +
               TYPE=ADD              .. ADD A DEB TO DEBTABLE
         LR    R2,R15                SAVE RETURN CODE
         MODESET MODE=PROB,KEY=NZERO PROBLEM STATE, PROBLEM KEY
         LTR   R2,R2                 DEB ADDED SUCCESSFULLY?
         BZ    OPEN0140              YES
         MVI   TSTAT,$TSTATAF        DEB ADD FAILED
         STC   R2,TDEBRC             RETURN RETURN CODE
         B     TAPE9900              AND EXIT
OPEN0140 DS    0H
         TM    TASTYPE,$TASSTC       RUNNING AS A STARTED TASK?
         BNO   OPEN0160              NO
         TAPETR ID=STCWTO
         ICM   R1,15,TCOMM           COMMUNICATION PARM LIST PRESENT?
         BNZ   OPEN0150              YES
         LA    R15,TCOMM             OUTPUT AREA FOR EXTRACT
         EXTRACT (R15),FIELDS=COMM   'EXTRACT' COMMUNCATION BLOCK ADDR
         ICM   R1,15,TCOMM           COMMUNICATION BLOCK ADDRESS
OPEN0150 DS    0H
         BZ    OPEN0180              NO
         USING CCOM,R1               DEFINE BASE
         L     R1,COMCIBPT           CIB ADDRESS FROM COMM PARM LIST
         USING CIB,R1                DEFINE CIB BASE
         XC    TCID,TCID             CLEAR CONSOLE ID
         MVC   TCID+3,CIBCONID       SAVE CONSOLE ID
         GETMAIN R,LV=WTO1L          ACQUIRE STORAGE FOR WTO
         LR    R5,R1                 COPY WTO ADDRESS
         MVC   0(WTO1L,R5),WTO1I     INITIALIZE WTO MESSAGE
         MVC   26(8,R5),TDDNAME      SET DDNAME INTO WTO
         MVC   44(3,R5),UCBNAME      SET DEVICE NAME INTO WTO
         WTO   MF=(E,(R5)),          ISSUE WTO                         +
               CONSID=TCID           .. TO THIS CONSOLE
         FREEMAIN R,A=(R5),LV=WTO1L  RELEASE WTO STORAGE
         B     OPEN0170
OPEN0160 DS    0H
         TAPETR ID=BATCHWTO
         GETMAIN R,LV=WTO2L          ACQUIRE STORAGE FOR WTO
         LR    R5,R1                 COPY WTO ADDRESS
         MVC   0(WTO2L,R5),WTO2I     INITIALIZE WTO MESSAGE
         MVC   36(3,R5),UCBNAME      SET DEVICE NAME INTO WTO
         WTO   MF=(E,(R5))           ISSUE WTO
         FREEMAIN R,A=(R5),LV=WTO2L  RELEASE WTO STORAGE
OPEN0170 DS    0H
         TAPETR ID=OPENREW
         LA    R1,IOREW              REWIND CCW
         BAL   R11,IO0000            REWIND THE TAPE
         TAPETR ID=OPENDONE
         B     TAPE9900              AND EXIT
OPEN0180 DS    0H
         TAPETR ID=NOCCOM
         MVI   TSTAT,$TSTATNC        NO CONSOLE COMMUNICATION BLOCK
         B     TAPE9900              AND EXIT
OPEN0190 DS    0H
         TAPETR ID=DUPOPEN
         MVI   TSTAT,$TSTATOP        TAPE IS ALREADY OPEN
         B     TAPE9900              AND EXIT
OPEN0200 DS    0H
         TAPETR ID=ALOCFAIL
         MVI   TSTAT,$TSTAT99        DAIR FAILURE
         B     TAPE9900              AND EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             READ A BLOCK                                            *
*                                                                     *
* ------------------------------------------------------------------- *
READ0000 DS    0H
         TAPETR ID=READ
         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN
READ0010 DS    0H
         BZ    READ0070              I/O BLOCK NOT FOUND
         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?
         BE    READ0020              YES
         ICM   R9,15,IONEXT          NEXT ON CHAIN
         B     READ0010              KEEP LOOKING
READ0020 DS    0H
         LA    R5,IOIOB              IOB ADDRESS
         LA    R6,IODCB              DCB ADDRESS
         LA    R7,IODEB              DEB ADDRESS
         LA    R1,IOREAD             READ CCW'S ADDRESS
         BAL   R11,IO0000            LINK TO I/O ROUTINE
         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?
         BNE   TAPE9900              NO.. GET OUTTA HERE
         SR    R0,R0                 CLEAR REGISTER
         SR    R1,R1                 CLEAR REGISTER
         ICM   R0,3,IOREAD+6         LENGTH ATTEMPTED
         ICM   R1,3,IOBSTDRD+14      RESIDUAL LENGTH
         SR    R0,R1                 LENGTH READ
         STCM  R0,3,TLENGTH          SET LENGTH
         MVC   TIOAREA,IOAREA        SET I/O AREA ADDRESS
         TAPETR ID=READOK,           READ COMPLETE                     +
               DATA1=TIOAREA         .. I/O AREA ADDRESS               +
               DATA2=TLENGTH         .. DATA LENGTH
         TM    IOFLAG,$IODEN         DENSITY DETERMINED?
         BO    TAPE9900              YES
         OI    IOFLAG,$IODEN         DENSITY WILL BE DETERMINED
         CLI   DEBSDVM,$DEN3480      3480 TAPE DRIVE?
         BE    READ0050              YES
         LA    R1,IOSENSE            SENSE CCW
         BAL   R11,IO0000            ISSUE SENSE COMMAND
         CLI   TSTAT,$TSTATOK        I/O SUCCESSFUL?
         BNE   TAPE9900              NO.. BYPASS DENSITY STUFF
         TM    TSENSE+3,$SENSEPE     PE MODE?
         BO    READ0030              YES
         TM    TSENSE+9,$SENSE62     6250 CAPABLE?
         BO    READ0040              YES
         MVI   IODEN,2               DENSITY IS 800 BPI
         B     READ0060
READ0030 DS    0H
         TAPETR ID=MODE3
         MVI   IODEN,3               DENSITY IS 1600 BPI
         B     READ0060
READ0040 DS    0H
         TAPETR ID=MODE4
         MVI   IODEN,4               DENSITY IS 6250 BPI
         B     READ0060
READ0050 DS    0H
         TAPETR ID=MODE5
         MVI   IODEN,5               TAPE IS A 3480
READ0060 DS    0H
         MVC   TDENSITY,IODEN        COPY DENSITY
         B     TAPE9900              AND EXIT
READ0070 DS    0H
         TAPETR ID=NOTOPEN
         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN
         B     TAPE9900              AND EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             PERFORM I/O                                             *
*                                                                     *
* ------------------------------------------------------------------- *
IO0000   DS    0H
         TAPETR ID=IO,               STARTING I/O                      +
               DATA1=(R1)            .. CCW BEING ISSUED
         CLI   0(R1),CCWCMDRW        IS COMMAND REWIND?
         BE    IO0010                YES
         CLI   0(R1),CCWCMDRU        IS COMMAND REWIND/UNLOAD?
         BE    IO0010                YES
         TM    IOFLAG,$IOEOT         TAPE AT PHYSICAL EOT?
         BO    IO0100                YES..
IO0010   DS    0H
         ST    R1,IOBSTART           SET CCW STRING ADDRESS
         LA    R1,IOECB              ECB'S ADDRESS
         STCM  R1,7,IOBECBPB         SET ECB ADDRESS
         LA    R1,IODCB              DCB'S ADDRESS
         ST    R1,IOBDCBPT           SET DCB ADDRESS
IO0020   DS    0H
         TAPETR ID=EXCP
         XC    IOECB,IOECB           CLEAR THE ECB
         EXCP  IOBSTDRD              START THE I/O
         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION
         TAPETR ID=EXCPDONE,         I/O COMPLETED                     +
               DATA1=IOECB           .. SAVE ECB
         CLI   IOECB,X'44'           RETRY THE I/O?
         BE    IO0020                YES
         CLI   IOECB,X'7F'           SUCCESSFUL?
         BNE   IO0050                NO
         L     R1,IOBSTART           FIRST CCW
         CLI   0(R1),CCWCMDRW        REWIND?
         BE    IO0030                YES
         CLI   0(R1),CCWCMDRU        REWIND/UNLOAD?
         BNE   IO0040                NO
IO0030   DS    0H
         TAPETR ID=REWOUND
         NI    IOFLAG,255-$IOEOT     RESET EOT FLAG
IO0040   DS    0H
         TAPETR ID=GOODIO
         MVI   TSTAT,$TSTATOK        I/O WAS SUCCESSFUL
         BR    R11                   AND RETURN
IO0050   DS    0H
         TAPETR ID=BADIO
         L     R1,IOBSTART           FIRST CCW IN STRING
         CLI   0(R1),CCWCMDSE        WAS I/O A SENSE COMMAND?
         BE    IO0120                YES.. SENSE FAILED
         NI    IOFLAG,255-$IOUEX     TURN OFF UNIT EXCEPTION FLAG
         TM    IOBFLAG1,IOBIOERR     UNIT EXCEPTION?
         BNO   IO0060                NO
         OI    IOFLAG,$IOUEX         INDICATE UNIT EXCEPTION OCCURRED
         TAPETR ID=UNITEXPT
IO0060   DS    0H
         LA    R1,IOSENSE            SENSE CCW'S ADDRESS
         ST    R1,IOBSTART           SET CCW STRING ADDRESS
IO0070   DS    0H
         XC    IOECB,IOECB           CLEAR THE ECB
         TAPETR ID=SENSEIO
         EXCP  IOBSTDRD              START THE I/O
         WAIT  ECB=IOECB             WAIT FOR I/O COMPLETION
         TAPETR ID=SNSEDONE,         SENSE HAS COMPLETED               +
               DATA1=IOECB
         CLI   IOECB,X'44'           RETRY THE I/O?
         BE    IO0070                YES
         CLI   IOECB,X'7F'           SUCCESSFUL?
         BNE   IO0110                NO
         TAPETR ID=GOODSNSE,         SENSE SUCCESSFUL                  +
               DATA1=TSENSE,         .. FIRST 8 BYTES OF SENSE DATA    +
               DATA2=TSENSE+8        .. NEXT 8 BYTES
         TM    IOFLAG,$IOUEX         UNIT EXEPTION ON ORIGINAL I/O?
         BO    IO0080                YES
         TAPETR ID=IOEWSNSE
         MVI   TSTAT,$TSTATIE        I/O ERROR WITH SENSE AVAILABLE
         BR    R11                   RETURN
IO0080   DS    0H
         TM    TSENSE+4,$SENSETI     TAPE AT PHYSICAL EOT?
         BO    IO0090                YES
         TAPETR ID=TAPEMARK
         MVI   TSTAT,$TSTATTM        TAPE MARK REACHED
         BR    R11                   EXIT
IO0090   DS    0H
         TAPETR ID=PEOT
         OI    IOFLAG,$IOEOT         TAPE IS AT EOT
IO0100   DS    0H
         TAPETR ID=PEOT
         MVI   TSTAT,$TSTATPE        EOT REACHED (PHYSICAL END)
         BR    R11                   EXIT
IO0110   DS    0H
         TAPETR ID=SFAIL1
         MVI   TSTAT,$TSTATIX        SENSE FAILED AFTER AN I/O ERROR
         BR    R11                   EXIT
IO0120   DS    0H
         TAPETR ID=SFAIL2
         MVI   TSTAT,$TSTATSF        SENSE FAILED
         BR    R11                   EXIT
         EJECT
* ------------------------------------------------------------------- *
*                                                                     *
*             CLOSE TAPE DCB                                          *
*                                                                     *
* ------------------------------------------------------------------- *
CLOSE000 DS    0H
         TAPETR ID=CLOSE
         ICM   R9,15,TCHAIN          FIRST BLOCK ON CHAIN
CLOSE010 DS    0H
         BZ    CLOSE110              I/O BLOCK NOT FOUND
         CLC   IODDNAME,TDDNAME      CORRECT I/O BLOCK FOUND?
         BE    CLOSE020              YES
         ICM   R9,15,IONEXT          NEXT ON CHAIN
         B     CLOSE010              KEEP LOOKING
* ------------------------------------------------------------------- *
*             REMOVE THIS I/O BLOCK FROM THE CHAIN                    *
* ------------------------------------------------------------------- *
CLOSE020 DS    0H
         TAPETR ID=IOBLKFD,          I/O BLOCK LOCATED                 +
               RDATA1=R9             .. I/O BLOCK'S ADDRESS
         LA    R2,T99RB              REQUEST BLOCK ADDRESS
         MVI   S99VERB,S99VRBUN      SET VERB (UNALLOCATE)
         MVC   T99DD,TDDNAME         SET DDNAME
         OI    T99DDPA,X'80'         SET END OF LIST
         LA    R1,T99RBA             POINTER'S ADDRESS
         DYNALLOC                    FREE THE UNIT
         STH   R1,T99RC              SAVE RETURN CODE
         LTR   R15,R15               SUCCESSFUL?
         BZ    CLOSE030              YES
         TAPETR ID=FREEFAIL,                                           +
               RDATA1=R15
         MVI   TSTAT,$TSTAT99        SVC 99 FAILED
         B     TAPE9900              EXIT
CLOSE030 DS    0H
         TAPETR ID=UNCHAIN
         ICM   R1,15,IOPREV          PREVIOUS BLOCK ON THE CHAIN
         BZ    CLOSE040              NO PREVIOUS BLOCK
         MVC   IONEXT-IOBLK(4,R1),IONEXT   CHAIN PREVIOUS TO NEXT
CLOSE040 DS    0H
         ICM   R1,15,IONEXT          NEXT BLOCK ON CHAIN
         BZ    CLOSE050              NO NEXT BLOCK
         MVC   IOPREV-IOBLK(4,R1),IOPREV   CHAIN NEXT TO PREVIOUS
CLOSE050 DS    0H
         LA    R5,IOIOB              IOB ADDRESS
         LA    R6,IODCB              DCB ADDRESS
         LA    R7,IODEB              DEB ADDRESS
* ------------------------------------------------------------------- *
*             SIMULATE "CLOSE"                                        *
* ------------------------------------------------------------------- *
         MODESET MODE=SUP,KEY=ZERO   SUPERVISOR STATE, KEY ZERO
         DEBCHK (R6),                USE DEBCHK (REFERENCE DCB NOT DEB)+
               TYPE=DELETE           .. TO DELETE THE DEB FROM DEBTABLE
         LTR   R15,R15               DEBCHK SUCCESSFUL?
         BNZ   CLOSE100              NO
         TAPETR ID=DEBDELOK
CLOSE060 DS    0H
         LA    R2,DEBBASIC           BASIC PORTION OF DEB
         L     R1,PSATNEW            CURRENT TCB ADDRESS FROM PSA
         USING TCB,R1                DEFINE DCB BASE
         SR    R3,R3                 CLEAR REGISTER
         ICM   R3,7,TCBDEB+1         1ST DEB ON DEB CHAIN
         LA    R4,TCBDEB             ADDRESS'S ADDRESS
CLOSE070 DS    0H
         CR    R3,R2                 IS THIS THE CORRECT DEB?
         BE    CLOSE080              YES
         LA    R4,DEBDEBAD-DEBBASIC(R3)   NEXT DEB ADDRESS ADDRESS
         ICM   R3,7,DEBDEBB-DEBBASIC(R3)  NEXT DEB
         BNZ   CLOSE070              CHECK AGAIN
         B     CLOSE090              COULDN'T FIND THE DEB
CLOSE080 DS    0H
         ICM   R2,7,DEBDEBB          NEXT DEB ON CHAIN
         ICM   R2,8,0(R4)            SAVE ACCESS METHOD SECTION LENGTH
         ICM   R3,15,0(R4)           CS WILL USE ALL 4 BYTES
         CS    R3,R2,0(R4)           REMOVE DEB FROM DEB CHAIN
         BNE   CLOSE060              SOMETHING CHANGED, TRY AGAIN
         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF
         TAPETR ID=FREEIO
         L     R1,IOAREA             I/O AREA ADDRESS
         FREEMAIN R,A=(1),LV=$MAXLEN FREE I/O AREA
         FREEMAIN R,A=(9),LV=IOBLKL  FREE I/O BLOCK
         TAPETR ID=CLSEDONE
         MVI   TSTAT,$TSTATOK        STATUS
         B     TAPE9900              AND EXIT
CLOSE090 DS    0H
         TAPETR ID=NODEB
         MVI   TSTAT,$TSTATXD        DEB NOT FOUND
         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF
         B     TAPE9900              AND EXIT
CLOSE100 DS    0H
         TAPETR ID=DEBDELF
         MVI   TSTAT,$TSTATDF        DEBCHK TYPE=DELETE FAILED
         STC   R15,TDEBRC            RETURN RETURN CODE
         MODESET MODE=PROB,KEY=NZERO RETURN TO OUR NORMAL SELF
         B     TAPE9900              AND EXIT
CLOSE110 DS    0H
         TAPETR ID=NOTOPEN
         MVI   TSTAT,$TSTATNO        TAPE IS NOT OPEN
         B     TAPE9900              AND EXIT
TAPE9900 DS    0H
         TAPETR ID=EXIT,             TRACE EXITS                       +
               DATA1=TDDNAME,        .. FOR DDNAME                     +
               DATA2=TCMD            .. COMMAND
         CLI   TCMD,$TCMDCLS         CLOSE COMMAND?
         BNE   TAPE9910              NO
         OC    TCHAIN,TCHAIN         ANYTHING ON CHAIN?
         BNZ   TAPE9910              YES
         ICM   R1,15,TTR1ST          FIRST TRACE ENTRY
         BZ    TAPE9910              NO TABLE TO FREE
         L     R0,TTRSIZE            TRACE TABLE SIZE
         FREEMAIN R,A=(1),LV=(0)     RELEASE TRACE TABLE STORAGE
         XC    TTR1ST,TTR1ST         CLEAR TRACE TABLE 1ST ENTRY
         XC    TTRLAST,TTRLAST       CLEAR TRACE TABLE LAST ENTRY
         XC    TTRCURR,TTRCURR       CLEAR TRACE TABLE CURRENT ENTRY
TAPE9910 DS    0H
         L     R13,4(R13)            RESTORE REGISTER 13
         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS
         SR    R15,R15               GIVE GOOD RETURN CODE
         BR    R14                   RETURN TO CALLER
*--------------------------------------------------------------------*
*                                                                    *
*              ADDRESS MODE SWITCHING                                *
*                                                                    *
*--------------------------------------------------------------------*
AM24     DS    0H
         LA    R14,0(R14)            CLEAR HIGH BIT(S)
         BSM   R0,R14                SWITCH TO 24-BIT MODE AND EXIT
AM31     DS    0H
         LA    R14,0(R14)            CLEAR HIGH BIT(S)
         O     R14,X80               TURN ON HIGH BIT
         BSM   R0,R14                SWITCH TO 31-BIT MODE AND EXIT
*--------------------------------------------------------------------*
*                                                                    *
*              TRACE ROUTINE                                         *
*                                                                    *
*--------------------------------------------------------------------*
TRACE000 DS    0H
         USING TRENTRY,R1            DEFINE BASE
         STM   R0,R15,TTRSAVE        SAVE ALL REGISTERS
         ICM   R1,15,TTRCURR         CURRENT ENTRY
         BNZ   TRACE010              BUILD TRACE ENTRY
         L     R2,TTRSIZE            TRACE TABLE SIZE
         GETMAIN R,LV=(R2)           ACQUIRE TRACE TABLE STORAGE
         ST    R1,TTR1ST             SAVE TRACE TABLE STORAGE
         ST    R1,TTRCURR
         AR    R2,R1                 PLUS TOTAL SIZE
         SH    R2,=Y(TRENTRYL)       MINUS 1 ENTRY'S LENGTH
         ST    R2,TTRLAST            SET LAST ENTRY ADDRESS
         L     R0,TTR1ST             FIRST ENTRY
         L     R1,TTRSIZE            TOTAL SIZE
         SR    R2,R2                 CLEAR REGISTER
         SR    R3,R3                 CLEAR REGISTER
         MVCL  R0,R2                 INITIALIZE TABLE
         L     R1,TTR1ST             RESET TO 1ST ENTRY
         B     TRACE030
TRACE010 DS    0H
         C     R1,TTRLAST            USING LAST ENTRY?
         BNE   TRACE020              NO
         L     R1,TTR1ST             'WRAP' TABLE
TRACE020 DS    0H
         OC    0(TRENTRYL,R1),0(R1)  EMPTY?
         BZ    TRACE030              YES
         LA    R1,TRENTRYL(R1)       NEXT ENTRY
TRACE030 DS    0H
         MVC   TREID,0(R14)          SET ID
         MVC   TREF1,TTRDATA1        SET DATA 1
         MVC   TREF2,TTRDATA2        SET DATA 2
         MVC   TREF3,TTRDATA3        SET DATA 3
         XC    TTRDATA1(24),TTRDATA1 CLEAR DATA 1, 2, AND 3
         ST    R1,TTRCURR            SAVE FOR NEXT CALL
         LM    R0,R15,TTRSAVE        RESTORE REGISTERS
         B     8(R14)                RETURN
*--------------------------------------------------------------------*
*                                                                    *
*              CONSTANTS                                             *
*                                                                    *
*--------------------------------------------------------------------*
READCCW  CCW   CCWCMDRF,*,X'20',$MAXLEN   READ FORWARD
REWCCW   CCW   CCWCMDRW,*,X'20',1         REWIND THE TAPE
SENSECCW CCW   CCWCMDSE,*,X'20',16        SENSE CCW
TTRSIZE  DC    A(500*TRENTRYL)       TRACE TABLE SIZE
X80      DC    A(X'80000000')
INITDCB  DCB   MACRF=EXCP,           INITIAL TAPE DCB                  +
               DDNAME=TAPEDDNM,      .. DD NAME SUPPLIED ON 'OPEN'     +
               DEVD=TA,              .. JUST WORRY ABOUT TAPES         +
               DSORG=PS              .. USE SEQUENTIAL DSORG
WTO1I    WTO   'MOUNT TAPE FOR DDNAME XXXXXXXX ON DRIVE XXX',          +
               CONSID=,                                                +
               MF=L
WTO1L    EQU   *-WTO1I               LIST FORM'S TOTAL LENGTH
WTO2I    WTO   'MOUNT TAPE FOR TAPEMAP ON DRIVE XXX',                  +
               ROUTCDE=3,                                              +
               MF=L
WTO2L    EQU   *-WTO2I               LIST FORM'S TOTAL LENGTH
         LTORG
*--------------------------------------------------------------------*
*                                                                    *
*              EQUATES                                               *
*                                                                    *
*--------------------------------------------------------------------*
         COPY REGEQU
$DEN1600 EQU  X'C3'                  1600 BPI
$DEN6250 EQU  X'D3'                  6250 BPI
$DEN3480 EQU  X'00'                  3480 BPI
$MAXLEN  EQU  65535
$SENSETI EQU  X'20'                  TAPE INDICATE
$SENSEPE EQU  X'04'                  PE MODE
$SENSE62 EQU  X'08'                  8303-2 (6250 CAPABLE)
T99      DS   0C
         DC   AL2(DALDDNAM),AL2(1),AL2(8)     DDNAME PARAMETERS
         DC   CL8' '
         DC   AL2(DALDSNAM),AL2(1),AL2(8)     DSN PARAMETERS
         DC   CL8' '
         DC   AL2(DALLABEL),AL2(1),AL2(1)     LABEL TYPE PARAMETERS
         DC   X'10'                           .. 'BLP'
         DC   AL2(DALDSSEQ),AL2(1),AL2(2)     DATASET SEQUENCE NUMBER
         DC   XL2'0001'                       .. 1ST DATASET
         DC   AL2(DALUNIT),AL2(1),AL2(8)      UNIT PARAMETERS
         DC   CL8' '
         DC   AL2(DALVLSER),AL2(1),AL2(6)     VOLSER PARAMETERS
         DC   CL6' '
         DC   AL2(DALSTATS),AL2(1),AL2(1)     INITIALIZE STATUS
         DC   X'04'
         DC   AL2(DALNDISP),AL2(1),AL2(1)     FINAL STATUS
         DC   X'08'
         DC   AL2(DALDEFER),AL2(0),AL2(0)     DEFERRED MOUNT
T99L     EQU  *-T99
         COPY TAPECMDS
*--------------------------------------------------------------------*
*                                                                    *
*              COMMAND/STATUS BLOCK                                  *
*                                                                    *
*--------------------------------------------------------------------*
CMDBLOK  TAPEBLOK TYPE=DSECT
         SPACE 2
*--------------------------------------------------------------------*
*                                                                    *
*              I/O BLOCK                                             *
*                                                                    *
*              THERE IS 1 I/O BLOCK PER 'OPEN' TAPE                  *
*                                                                    *
*--------------------------------------------------------------------*
IOBLK    DSECT
IONEXT   DS    A                     NEXT BLOCK ON CHAIN
IOPREV   DS    A                     PREVIOUS BLOCK ON CHAIN
IOECB    DS    F                     ECB
IOAREA   DS    A                     I/O AREA ADDRESS
IODDNAME DS    CL8                   DD NAME
IODCB    DS    (DCBL)X               DCB
IODEB    DS    128X'00'              DEB
         DS    0D
IOIOB    DS    (IOBL)X'00'           IOB
IOREAD   CCW   X'02',*,X'20',$MAXLEN READ FORWARD
IOREW    CCW   X'07',*,X'20',1       REWIND THE TAPE
IOSENSE  CCW   X'04',*,X'20',16      SENSE CCW
IOFLAG   DC    X'00'                 CONTROL FLAGS
$IOEOT   EQU   X'80'                 TAPE IS AT EOT
$IODEN   EQU   X'40'                 RECORDING DENSITY DETERMINED
$IOUEX   EQU   X'20'                 UNIT EXCEPTION OCCURRED
IODEN    DC    X'00'                 RECORDING DENSITY
IOBLKL   EQU   *-IOBLK
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS COMMUNICATIONS VECTOR TABLE                       *
*                                                                    *
*--------------------------------------------------------------------*
         PRINT NOGEN
         CVT   DSECT=YES
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS UNIT CONTROL BLOCK                                *
*                                                                    *
*--------------------------------------------------------------------*
         IEFUCBOB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS IOB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IEZIOB
IOBL     EQU  *-IOB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS DCB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         DCBD  DSORG=PS,                                               +
               DEVD=TA
DCBL     EQU   *-IHADCB
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS PSA DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IHAPSA DSECT=YES,LIST=NO
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS TCB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IKJTCB LIST=NO
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              MVS DEB DSECT                                         *
*                                                                    *
*--------------------------------------------------------------------*
         IEZDEB
*--------------------------------------------------------------------*
*                                                                    *
*              MVS TIOT DSECT                                        *
*                                                                    *
*--------------------------------------------------------------------*
TIOT     DSECT
         IEFTIOT1
*--------------------------------------------------------------------*
*                                                                    *
*              TRACE TABLE ENTRIES                                   *
*                                                                    *
*--------------------------------------------------------------------*
TRENTRY  DSECT
TREID    DS   CL8          TRACE ID
TREF1    DS   CL8          TRACE FIELD 1
TREF2    DS   CL8          TRACE FIELD 2
TREF3    DS   CL8          TRACE FIELD 3
TRENTRYL EQU  *-TRENTRY    TRACE ENTRY SIZE
*--------------------------------------------------------------------*
*                                                                    *
*              COMMUNICATION PARAMETER LIST                          *
*                                                                    *
*--------------------------------------------------------------------*
CCOM     DSECT
         IEZCOM
*--------------------------------------------------------------------*
*                                                                    *
*              CONSOLE INPUT BUFFER                                  *
*                                                                    *
*--------------------------------------------------------------------*
CIB      IEZCIB
*--------------------------------------------------------------------*
*                                                                    *
*              ASCB                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         IHAASCB
*--------------------------------------------------------------------*
*                                                                    *
*              OUCB                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         IRAOUCB
         IEFZB4D0
         IEFZB4D2
         END  TAPEEXCP
./ ADD NAME=T99      0100-95016-95016-1240-00019-00019-00000-JSYSC
T99      DS   0C
         DC   AL2(DALDDNAM),AL2(1),AL2(8)     DDNAME PARAMETERS
         DC   CL8' '
         DC   AL2(DALDSNAM),AL2(1),AL2(8)     DSN PARAMETERS
         DC   CL8' '
         DC   AL2(DALLABEL),AL2(1),AL2(1)     LABEL TYPE PARAMETERS
         DC   X'10'                           .. 'BLP'
         DC   AL2(DALDSSEQ),AL2(1),AL2(2)     DATASET SEQUENCE NUMBER
         DC   XL2'0001'                       .. 1ST DATASET
         DC   AL2(DALUNIT),AL2(1),AL2(8)      UNIT PARAMETERS
         DC   CL8' '
         DC   AL2(DALVLSER),AL2(1),AL2(6)     VOLSER PARAMETERS
         DC   CL6' '
         DC   AL2(DALSTATS),AL2(1),AL2(1)     INITIALIZE STATUS
         DC   X'04'
         DC   AL2(DALNDISP),AL2(1),AL2(1)     FINAL STATUS
         DC   X'08'
         DC   AL2(DALDEFER),AL2(0),AL2(0)     DEFERRED MOUNT
T99L     EQU  *-T99
