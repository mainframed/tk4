CRAMP    TITLE 'CARTWRIGHT''S REDUNDANT ARCHIVER MODULE PURGE'
***********************************************************************
*        PDSDOC *CREATE ARCHIVER CONTROL CARDS FOR DUPLICATE MODULES..*
*                                                                     *
*        PROGRAM ID. :             CRAMP                              *
*                                                                     *
*        DATE WRITTEN :            JANUARY   1995                     *
*                                                                     *
*        AUTHOR :                  D.H.CARTWRIGHT.                    *
*                                                                     *
*        LOCATION :                SUTTON COLDFIELD                   *
*                                                                     *
*        HISTORY  :                                                   *
*                                                                     *
*   JAN95 STARTED WRITING                                             *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        PURPOSE                                                      *
*       ---------                                                     *
*                                                                     *
* THIS IS A SUB-PROGRAM TO BE CALLED FROM MODULE 'ARCHCOMP' OF 'THE   *
* ARCHIVER' VERSION 5 BY RICHARD A. FOCHTMAN JR. OF LISLE ILLINOIS    *
* USA. IT IS A LASH-UP IMPLEMENTATION OF THE 'AUTOALIAS' FUNCTION     *
* WHICH RICHARD OBVIOUSLY INTENDS TO WRITE SOME TIME, BUT HAS NOT     *
* GOT AROUND TO IN VERSION 5.  THIS PROGRAM SHOULD BE MAINTAINED      *
* AS A SEPARATE LOAD MODULE, NOT LINK-EDITED INTO ARCHIVER.           *
*                                                                     *
* THIS MODULE IS PASSED THE TWO HEADER RECORDS FROM A SUCCESSFUL      *
* COMPARE FUNCTION AND CREATES ALIAS AND DELETE CARDS WHICH IT WRITES *
* TO DDNAME 'CRAMPOUT'. THIS DDNAME IS NOT DYNAMICALLY ALLOCATED, THE *
* USER SHOULD SUPPLY ONE IN THE JCL TO HAVE THESE CARDS CREATED.  THE *
* USER SHOULD THEN SUBMIT THESE CONTROL CARDS TO ANOTHER RUN OF 'THE  *
* ARCHIVER' IN ORDER TO CREATE ALIAS ENTRIES FOR DUPLICATE MODULES AND*
* DELETE THE REAL ENTRY. THE USER CHOOSES WHICH VERSION IS TO BE      *
* RETAINED BY HIS CHOICE OF VSAM1 AND VSAM2 - THE VSAM1 ITEM WILL     *
* ALWAYS BE RETAINED.                                                 *
*                                                                     *
***********************************************************************
         EJECT ,
***********************************************************************
*                                                                     *
*        LIMITATIONS                                                  *
*       ------------                                                  *
*                                                                     *
* 1) DESIGNED FOR VERSION 5 OF THE ARCHIVER FROM FILE 147 OF CBT 384, *
*    BUT YOU WILL NEED MACROS FROM FILE 172 (MY FILE) AS WELL.        *
*                                                                     *
* 2) THE USER SHOULD BE AWARE OF THE RAMIFICATIONS OF HIS CHOICE OF   *
* VSAM1 AND VSAM2. ASSUMING THAT THEY ARE BOTH THE SAME VSAM CLUSTER  *
* BUT THAT YOU ARE COMPARING DIFFERENT VERSIONS OF MEMBERS IT DEPENDS *
* WHICH WAY ROUND THEY ARE SPECIFIED AS TO WHETHER YOU KEEP THE OLDER *
* OR THE NEWER VERSIONS. THIS PROGRAM ALWAYS KEEPS THE VSAM1 VERSION  *
* AND MAKES THE VSAM2 VERSION AN ALIAS OF IT. EXISTING ALIASES ARE    *
* PROCESSED  BY THE STANDARD ARCHIVER V5 COMMAND;                     *
*   DELETE ITEM=(.....),DATA=Y,NOTE=Y,BACK=N,ALIASES=N                *
* SO THAT IF YOU ARE DELETING THE OLDER VERSION AND KEEPING THE LATEST*
* ONE YOU MAY RESURRECT AN EXISTING ALIAS AS A REAL MEMBER. IN THIS   *
* CASE THE COMPARE/DELETE PROCESS SHOULD BE REPEATED UNTIL ONLY ONE   *
* REAL MEMBER EXISTS WITH MULTIPLE ALIASES.                           *
* IT IS SIMPLER, BUT MAYBE LESS SATISFACTORY, TO KEEP THE OLDEST      *
* MEMBER AND CREATE NEW VERSIONS AS ALIASES OF THAT.                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*       INPUT                                                         *
*       -----                                                         *
*                                                                     *
* THIS IS A SUB-PROGRAM CALLED FROM 'ARCHCOMP'. INPUT IS CONTAINED    *
* WITHIN THE ARCHIVER MAIN WORK AREA 'MAINWK', THE ADDRESS OF WHICH   *
* IS PASSED TO THIS PROGRAM.                                          *
*                                                                     *
* ON ENTRY  R1 -->  A(MAINWK)      ARCHIVER WORK AREA                 *
*                                                                     *
* IN THE SPECIAL CASE WHERE R1 POINTS TO A FULLWORD OF ZEROES THE     *
* PROGRAM WILL PERFORM ANY TERMINATION HOUSEKEEPING,                  *
* I.E. CLOSE THE OUTPUT FILE.                                         *
* THIS USAGE IS OPTIONAL; IF IT IS NOT PERFORMED THE SYSTEM WILL CLOSE*
* THE FILE(S) FOR YOU.                                                *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*       OUTPUT                                                        *
*       ------                                                        *
*                                                                     *
* 1)CRAMPOUT- DEFINES A CARD IMAGE FILE OF ALIAS AND DELETE STATEMENTS*
*             IF THESE STATEMENTS ARE INPUT TO A SUBSEQUENT RUN OF    *
*             'THE ARCHIVER' THE VERSION OF THE ITEM DEFINED BY THE   *
*             'VSAM2' (I.E. THE 'COMPTO' ITEM) WILL BE DELETED AND    *
*             DEFINED AS AN ALIAS OF THE ITEM ON 'VSAM1'.             *
*             THIS DD STATEMENT IS OPTIONAL - IF IT IS OMITED THE     *
*             PROGRAM WILL DO NOTHING BUT INCREASE THE RESOURCE       *
*             CONSUMPTION OF THE 'COMPARE' FUNCTION BY A SMALL PERCENT*
*                                                                     *
***********************************************************************
         EJECT
*        PRINT ON,GEN              SHOW MACRO EXPANSIONS
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
         SPACE 1
CRAMP    CSECT ,
         SPACE 1
***********************************************************************
*        REGISTER EQUATES AND USAGES.                                 *
***********************************************************************
         SPACE 1
R0       EQU   0                   WORK
R1       EQU   1                   WORK
R2       EQU   2                   DCB TABLE POINTER
REG2     EQU   R2                  WORK REGISTER IN 'SCAN' MACRO
R3       EQU   3                   WORKING HEADER RECORD POINTER
R4       EQU   4                   LINKAGE RETURN
R5       EQU   5                   .
R6       EQU   6                   VSAM1 HEADER RECORD
R7       EQU   7                   VSAM2 HEADER RECORD
R8       EQU   8                   .
R9       EQU   9                   .
R10      EQU   10                  OUTPUT DATA POINTER
R11      EQU   11                  .
R12      EQU   12                  MAIN WORK AREA (MAINWK) BASE
R13      EQU   13                  SAVE AREA / BASE REG. 1
R14      EQU   14                  WORK
R15      EQU   15                  .
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13) STANDARD HOUSEKEEPING
         SPACE 1
         LA    R2,OUTPUTSW         POINT TO MDCB OF OUTPUT FILE
         USING MDCB,R2             ESTABLISH ADDRESSABILITY
         TM    MDCBFLAG,DDINT      ARE WE STILL INTERESTED?
         BNO   ENDOFPGM            NO, NOT THERE. EXIT
         ICM   R12,B'1111',0(R1)   PICK UP WORK AREA
         BNZ   FIRSTIME            THERE IS ONE, CARRY ON
         GOSUB CLOSEM              NONE, SO CLOSE FILES
         B     ENDOFPGM            AND EXIT
         SPACE 1
FIRSTIME DS    0H                  ONCE OFF PROCESSING
         USING MAINWK,R12          ESTABLISH WORK AREA ADDRESSABILITY
         TM    MDCBFLAG,DDOPEN     IS IT OPEN?
         BO    MAINLINE            YES, WE CAN PROCESS THE DATA
         GOSUB OPENEM              NO, GO DO THAT
         MVC   CARDSETV,VS1DSN     COPY VSAM1 DSNAME
         LA    R0,CARDSET          POINT TO 'SET' CARD
         GOSUB WRITING             GO OUTPUT IT
         EJECT
***********************************************************************
*        MAIN PROCESSING ROUTINE                                      *
***********************************************************************
         SPACE 1
MAINLINE DS    0H                  PROGRAM FUNCTION
         L     R6,VS1BUF1          GET VSAM1 HEADER RECORD
         L     R7,VS2BUF1          GET VSAM2 HEADER RECORD
         TM    0(R7),#RTHDR        ENSURE WE HAVE A HEADER
         BNO   ENDOFPGM            EXIT IF NOT
         SPACE 1
         LA    R0,L'CARDDEL        SET LENGTH
         LA    R1,CARDDEL          POINT TO DELETE CARD AREA
         GOSUB BLANK               CLEAR IT TO BLANKS
         LA    R10,CARDDELV        POINT TO OUTPUT START
         LA    R1,VERBDELL         POINT TO DELETE VERB DATA
         GOSUB MOVEIT              COPY IT TO OUTPUT
         LR    R3,R7               POINT TO VSAM2 HEADER RECORD
         GOSUB ITEMISE             CONSTRUCT ITEM DATA
         LA    R1,ITEMLEN          POINT TO ITEM DATA
         GOSUB MOVEIT              COPY TO OUTPUT
         MVI   0(R10),C','         END WITH COMMA FOR CONTINUATION
         LA    R0,CARDDEL          POINT TO 'DELETE' CARD
         GOSUB WRITING             GO OUTPUT IT
*
*        CREATE A CONTINUATION
*
         LA    R0,L'CARDDEL        SET LENGTH
         LA    R1,CARDDEL          POINT TO DELETE CARD AREA
         GOSUB BLANK               CLEAR IT TO BLANKS
         LA    R10,CARDDELV        POINT TO OUTPUT START
         LA    R1,VERBDATL         POINT TO DELETE OPTIONS DATA
         GOSUB MOVEIT              COPY TO OUTPUT
         LA    R0,CARDDEL          POINT TO 'DELETE' CARD
         GOSUB WRITING             GO OUTPUT IT
         EJECT ,
         LA    R0,L'CARDAKA        SET LENGTH
         LA    R1,CARDAKA          POINT TO ALIAS CARD AREA
         GOSUB BLANK               CLEAR IT TO BLANKS
         LA    R10,CARDAKAV        POINT TO OUTPUT START
         LA    R1,VERBADAL         POINT TO ADDALIAS VERB DATA
         GOSUB MOVEIT              COPY IT TO OUTPUT
         LR    R3,R6               POINT TO VSAM1 HEADER RECORD
         GOSUB ITEMISE             CONSTRUCT ITEM DATA
         LA    R1,ITEMLEN          POINT TO ITEM DATA
         GOSUB MOVEIT              COPY TO OUTPUT
         MVI   0(R10),C','         END WITH COMMA FOR CONTINUATION
         LA    R0,CARDAKA          POINT TO 'ADDALIAS' CARD
         GOSUB WRITING             GO OUTPUT IT
*
*        CREATE A CONTINUATION
*
         LA    R0,L'CARDAKA        SET LENGTH
         LA    R1,CARDAKA          POINT TO ALIAS CARD AREA
         GOSUB BLANK               CLEAR IT TO BLANKS
         LA    R10,CARDAKAV        POINT TO OUTPUT START
         LA    R1,VERBALAL         POINT TO ALIAS VERB DATA
         GOSUB MOVEIT              COPY IT TO OUTPUT
         LR    R3,R7               POINT TO VSAM2 HEADER RECORD
         GOSUB ITEMISE             CONSTRUCT ITEM DATA
         LA    R1,ITEMLEN          POINT TO ITEM DATA
         GOSUB MOVEIT              COPY TO OUTPUT
         LA    R0,CARDAKA          POINT TO 'ADDALIAS' CARD
         GOSUB WRITING             GO OUTPUT IT
         EJECT ,
***********************************************************************
*        END OF PROCESSING - RETURN TO ARCHIVER                       *
***********************************************************************
         SPACE 1
ENDOFPGM DS    0H                  NOW SHUTTING DOWN
         PGMOUT RC=RETCODE         EXIT PROGRAM
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         TITLE 'SUB-ROUTINES'
***********************************************************************
*                                                                     *
*        MOVE DATA TO OUTPUT AREA.                                    *
*                                                                     *
* ON ENTRY:                                                           *
*        R1 -> HALFWORD DATA LENGTH FOLLOWED BY DATA                  *
*        R10-> OUTPUT AREA                                            *
* ON EXIT:                                                            *
*        THE DATA HAS BEEN MOVED TO THE OUTPUT AREA AND R10 UPDATED.  *
*                                                                     *
***********************************************************************
         SPACE 1
MOVEIT   SUBIN SAVE=(R4)           SUBROUTINE ENTRY
         SR    R4,R4               CLEAR WORK REGISTER
         ICM   R4,B'0011',0(R1)    PICK UP LENGTH
         BZ    MOVEITZ             EXIT IF NO DATA
         BCTR  R4,0                DECREMENT FOR EXECUTE
         EX    R4,MOVEITEX         EXECUTE MOVE
         LA    R10,1(R4,R10)       UPDATE OUTPUT POINTER
         SPACE 1
MOVEITZ  DS    0H                  END OF SUBROUTINE
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         SPACE 2
MOVEITEX MVC   0(*-*,R10),2(R1)    MOVE DATA                  *EXECUTE*
         EJECT ,
***********************************************************************
*                                                                     *
*        CONSTRUCT AN ITEM SPECIFICATION.                             *
*                                                                     *
* ON ENTRY:                                                           *
*        R3 -> ARCHIVER HEADER RECORD                                 *
* ON EXIT:                                                            *
*        R0  = LENGTH OF ITEM DATA                                    *
*        ITEM DATA CONSTRUCTED STARTING AT 'ITEM'                     *
*                                                                     *
***********************************************************************
         SPACE 1
ITEMISE  SUBIN SAVE=(R4)           SUBROUTINE ENTRY
         USING RECSTART,R3         ESTABLISH HEADER RECORD ADDRESSING
         LA    R0,ITEMLONG         SET LENGTH
         LA    R1,ITEM             POINT TO AREA
         GOSUB BLANK               CLEAR IT TO BLANKS
         MVI   ITEM,C'('           OPEN BRACKETS
         MVC   ITEMN,RECN          COPY MEMBER NAME
         MVI   ITEMCMM1,C','       INSERT COMMA
         MVC   ITEMG,RECG          COPY MEMBER GROUP
         MVI   ITEMCMM2,C','       INSERT COMMA
         MVC   ITEMSG,RECSG        COPY MEMBER SUBGROUP
         MVI   ITEMCMM3,C','       INSERT COMMA
         MVC   ITEMT,RECT          COPY MEMBER TYPE
         LA    R15,ITEMVER         POINT TO RECEIVING FIELD
         ICM   R1,B'1111',RECVER   GET MEMBER VERSION
         BZ    ITEMISES            IF NONE FORGET IT
         LPR   R1,R1               GET POSITIVE VALUE
         BCTR  R1,0                ADJUST TO REAL VALUE
         GOSUB TRIM                OUTPUT VALUE
         MVI   ITEMCMM4,C','       INSERT COMMA
ITEMISES DS    0H                  BASIC DATA THERE
         MVI   0(R15),C')'         CLOSE THE BRACKETS
         LA    R0,ITEMLONG+1       GET LENGTH INCL. BRACKET
         LA    R1,ITEM             POINT TO DATA
         GOSUB UNBLANK             REMOVE IMBEDDED BLANKS
         STCM  R0,B'0011',ITEMLEN  RECORD THE LENGTH
         SPACE 1
ITEMISED DS    0H                  END OF SUBROUTINE
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         SPACE 2
         DROP  R3                  END HEADER ADDRESSABILITY
         TITLE 'COPY BLOCKS'
         COPY  UNBLANK             LEFT SHUFFLE ROUTINE
         SPACE 2
         COPY  BLANK               CLEAR TO BLANKS
         EJECT ,
         COPY  TRIM                NEATEN NUMBERS
         SPACE 2
         COPY  CONVWORD            CONVERT NUMBERS
         EJECT ,
         COPY  WRITING             STANDARD OUTPUT
         SPACE 2
         COPY  PUTMOVE             STANDARD QSAM
         SPACE 2
         COPY  BIOS                STANDARD ACCESS STUFF
         SPACE 2
CRAMP    CSECT ,                   RETURN TO PROGRAM CODE
         TITLE 'DATA AREAS'
BEGSNAP  DS    0D                  SNAP DATA AREAS FOLLOWING
         PUSH PRINT
         PRINT ON,NOGEN            DO NOT EXPAND STANDARD STUFF
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         SPACE 2
         DS    0D                  GET ADDRESSES ALIGNED
         DC    CL8'EYECATCH'       EYECATCHER
         SPACE 1
ZEROWORD DC    F'0'                A LOT OF NOTHING
COMPCODE DC    H'0'                PROGRAM COMPLETION CODE
RETCODE  DC    H'0'                MACRO RETURN CODE SAVE AREA
MAXLEN   DC    H'64'               MAXIMUM STRING LENGTH
ONE      DC    PL1'1'              COUNT INCREMENT
         SPACE 1
CONVWORK DC    CL15' '              DECIMAL WORK AREA
         RIN   GENERATE            REGISTER SAVE AREAS
         TITLE 'CONTROL CARD DATA'
***********************************************************************
*                                                                     *
* SEPARATE 'DELETE' AND 'ALIAS' CARDS ARE CONSTRUCTED EVEN THOUGH THEY*
* COULD BE COMBINED. AT SOME TIME IN THE FUTURE I MIGHT INTRODUCE     *
* SEQUENCE NUMBERING AND I WILL WANT A DIFFERENT SERIES FOR EACH TYPE.*
*                                                                     *
***********************************************************************
         SPACE 2
CARDSET  DS    0CL80               SET CARD AREA
         DC    CL1' '              BLANK
         DC    C'SET VSAM1DSN='    VERB
CARDSETV DC    CL44' '             VSAM DATASET NAME
         DC    CL23' '             REMAINING DATA
         SPACE 1
CARDDEL  DS    0CL80               DELETE CARD AREA
         DC    CL1' '              BLANK
CARDDELV EQU   *                   VERB STARTS HERE
         DC    CL79' '             REMAINING DATA
         SPACE 1
CARDAKA  DS    0CL80               ALIAS CARD AREA
         DC    CL1' '              BLANK
CARDAKAV EQU   *                   VERB STARTS HERE
         DC    CL79' '             REMAINING DATA
         SPACE 2
         DS    0H                  ALIGNMENT
ITEMLEN  DS    AL2(ITEMLONG)       LENGTH OF ITEM SPECIFICATION
ITEM     DC    CL1'('              OPEN BRACKET
ITEMN    DC    CL10' '             MEMBER NAME
ITEMCMM1 DC    CL1','              COMMA
ITEMG    DC    CL10' '             MEMBER GROUP
ITEMCMM2 DC    CL1','              COMMA
ITEMSG   DC    CL10' '             ITEM SUBGROUP
ITEMCMM3 DC    CL1','              COMMA
ITEMT    DC    CL10' '             ITEM TYPE
ITEMCMM4 DC    CL1','              COMMA
ITEMVER  DC    CL15' '             ITEM VERSION NUMBER
ITEMLONG EQU   *-ITEM              MAXIMUM LENGTH OF DATA
         DC    CL1' '              POSSIBLE CLOSE BRACKET
         SPACE 1
         DS    0H                  ALIGNMENT
VERBDELL DC    AL2(VDELLEN)        LENGTH OF 'DELETE' VERB
VERBDEL  DC    C'DELETE ITEM='     DELETE VERB
VDELLEN  EQU   L'VERBDEL           LENGTH OF VERB TEXT
         SPACE 1
         DS    0H                  ALIGNMENT
VERBDATL DC    AL2(VDATLEN)        LENGTH OF 'DELETE' OPTIONS
VERBDAT  DC    C'DATA=Y,NOTE=Y,BACK=N,ALIASES=N' DELETE OPTIONS
VDATLEN  EQU   L'VERBDAT           LENGTH OF VERB TEXT
         SPACE 1
         DS    0H                  ALIGNMENT
VERBADAL DC    AL2(VADALEN)        LENGTH OF 'ADDALIAS' VERB
VERBADA  DC    C'ADDALIAS ITEM='   'ADDALIAS' VERB
VADALEN  EQU   L'VERBADA           LENGTH OF VERB TEXT
         SPACE 1
         DS    0H                  ALIGNMENT
VERBALAL DC    AL2(VALALEN)        LENGTH OF 'ADDALIAS' VERB
VERBALA  DC    C'ALIAS='          'ALIAS' VERB
VALALEN  EQU   L'VERBALA           LENGTH OF VERB TEXT
         TITLE 'LITERAL POOL'
***********************************************************************
*        LITERAL POOL                                                 *
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL GOES HERE
         TITLE 'DCB''S AND I/O CONTROL TABLES'
***********************************************************************
*        DCB'S TABLE                                                  *
***********************************************************************
         SPACE 1
DCBTABLE DS    0F
OUTPUTSW DC    AL1(DDINT)          WE ARE INTERESTED IN THIS DDCARD
         DC    AL3(CRAMPOUT)       ADDRESS OF DCB
         DC    CL8'CRAMPOUT'       DDNAME
         DC    CL8'OUTPUT'         OPEN TYPE
         DC    CL8' '              CLOSE OPTIONS
         DC    PL8'0'              RECORD COUNT
DCBNTRY  EQU   *-DCBTABLE          LENGTH OF ONE TABLE ELEMENT
OPENSIZE EQU   *-DCBTABLE          TABLE SIZE OF FULL TIME FILES
MAXOPEN  EQU   OPENSIZE/DCBNTRY    MAXIMUM NUMBER OF DCB'S TO OPEN
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUM NUMBER OF DCB'S
         EJECT ,
***********************************************************************
*        DATA CONTROL BLOCKS                                          *
***********************************************************************
         SPACE 1
CRAMPOUT DCB   DDNAME=CRAMPOUT,                                        *
               DSORG=PS,                                               *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
SNAPDCB  DCB   DDNAME=SNAP,DSORG=PS,MACRF=W,                           *
               RECFM=VBA,LRECL=125,BLKSIZE=882
         SPACE 3
EOSNAP   DS    0H                  END OF STORAGE AREA TO BE SNAPPED
         SPACE 3
         COPY  #RECS               COPY RECORD FORMATS
         SPACE 3
         COPY  ##ARCHWK            COPY WORK AREA MAPPING
         SPACE 3
         POP   PRINT               RESTORE PRINT STATUS
         END
