DCPCOMP2 TITLE 'DATA COMPRESSION UTILITY'
***********************************************************************
*        PDSDOC *DATA UTILITY - COMPRESS DATA.........................*
*                                                                     *
*        PROGRAM ID. :             DCPCOMP2                           *
*                                                                     *
*        DATE WRITTEN :            APRIL     1994                     *
*                                                                     *
*        AUTHOR :                  D.H.CARTWRIGHT.                    *
*        COPYRIGHT:                DARNICK COMPUTING LTD.             *
*                                                                     *
*        LOCATION :                SUTTON COLDFIELD                   *
*                                  ENGLAND                            *
*                                                                     *
*        HISTORY  :                                                   *
*                                                                     *
* 30MAY94  DC   ADD CODE TO WRITE SUMMARY RECORD AT END.              *
* 26MAY94  DC   EMPIRICALLY STRLEN=3 IS OPTIMUM.                      *
* 05APR94  DC   STARTED WRITING                                       *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        PURPOSE                                                      *
*       ---------                                                     *
*                                                                     *
* THIS IS A COMPRESSION PROGRAM FOR SMF DATA. IT UTILISES THE         *
* CHARACTERISTICS OF SMF DATA TO ACHIEVE HIGH LEVELS OF SPACE         *
* REDUCTION.                                                          *
* IT DOES THIS BY COMPARING EACH BYTE OF AN SMF RECORD TO THE SAME    *
* BYTE IN THE PREVIOUS RECORD. EQUAL BYTES ARE NOT COPIED, MERELY     *
* COUNTED.                                                            *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        LIMITATIONS                                                  *
*       ------------                                                  *
*                                                                     *
* THIS PROGRAM WILL ONLY PROCESS SEQUENTIAL DATASETS HAVING           *
* DEFINED RECORD FORMATS; IT WILL NOT PROCESS RECFM=U FILES.          *
*                                                                     *
* THE COMPRESSION/DECOMPRESSION SEQUENCE IS DESIGNED TO USE           *
* VARIABLE LENGTH RECORDS FOR THE COMPRESSED DATA. IT SHOULD          *
* WORK WITH FIXED LENGTH RECORDS, BUT ON DECOMPRESSION SOME           *
* EXTRA RECORDS CONTAINING HEX '00' MAY BE APPENDED TO THE DATA.      *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*       INPUT                                                         *
*       -----                                                         *
*                                                                     *
* 1)SYSUT1 - DEFINES THE INPUT FILE                                   *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*       OUTPUT                                                        *
*       ------                                                        *
*                                                                     *
* 1)SYSUT2 - DEFINES THE OUTPUT FILE. DCB INFORMATION MUST BE         *
*            PROVIDED. THE RECOMENDED VALUES FOR 3380 ARE;            *
*            RECFM=VBS,LRECL=32756,BLKSIZE=23476                      *
*            REMEMBER TO SPECIFY DCB=BFTEK=A WHEN DE-COMPRESSING      *
*            DATA WITH DCPEXPD2 IF SPANNED RECORDS ARE USED.          *
*                                                                     *
* 2)SYSPRINT - MESSAGE DATASET. VBA RECORDS.                          *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
*        PRINT ON,GEN              SHOW MACRO EXPANSIONS
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
         SPACE 1
DCPCOMP2 CSECT ,                   MAIN CSECT
         SPACE 1
***********************************************************************
*        REGISTER EQUATES AND USAGES.                                 *
***********************************************************************
         SPACE 1
R0       EQU   0
R1       EQU   1                   WORK
R2       EQU   2                   DCB TABLE POINTER,STRING LENGTH
REG2     EQU   R2                  WORK REGISTER IN 'SCAN' MACRO
R3       EQU   3                   OUTPUT LOCATION POINTER
R4       EQU   4                   LINKAGE RETURN
R5       EQU   5                   STRING CONTROL BYTE POINTER
R6       EQU   6                   RECORD 1 POINTER
REC1     EQU   6                   RECORD 1 POINTER
R7       EQU   7                   RECORD 1 LENGTH
REC1LEN  EQU   7                   RECORD 1 LENGTH
R8       EQU   8                   RECORD 2 POINTER
REC2     EQU   8                   RECORD 2 POINTER
R9       EQU   9                   RECORD 2 LENGTH
REC2LEN  EQU   9                   RECORD 2 LENGTH
R10      EQU   10                  OUTPUT RECORD POINTER
R11      EQU   11                  OUTPUT RECORD LENGTH
R12      EQU   12                  BASE REGISTER 2
R13      EQU   13                  SAVE AREA / BASE REG. 1
R14      EQU   14                  .
R15      EQU   15                  .
         SPACE 1
         LCLA  &STRLEN             MINIMUM DUPLICATION LENGTH
&STRLEN  SETA  2                   VALUE SET FOR THIS VERSION
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12) STANDARD HOUSEKEEPING
         GOSUB INITIAL             PERFORM INITIALISATION
         EJECT
***********************************************************************
*        MAIN PROCESSING ROUTINE                                      *
***********************************************************************
         SPACE 1
MAINLINE DS    0H                  PROGRAM FUNCTION
         SPACE 1
         LA    R2,SYSUT1SW         POINT TO INPUT FILE
         BAL   R4,GETTING          GO GET SOME DATA
         STH   R0,R2LEN            SAVE RECORD LENGTH ..
         ST    R1,R2BUFF           .. AND ADDRESS
         LR    R4,R0               COPY LENGTH
         LA    R4,0(R1,R4)         CALCULATE END ADDRESS
*        BCTR  R4,0                DECREMENT TO LAST POSITION
         ST    R4,R2END            SAVE RECORD END
         LR    R8,R1               COPY RECORD ADDRESS
         LR    R9,R0               .. AND LENGTH
         L     R4,BYTESIN          GET BYTE COUNT
         AR    R4,R9               ADD CURRENT RECORD
         ST    R4,BYTESIN          SAVE UPDATED COUNT
*                                                         *TEST*
*        LA    R2,SYSUT2SW         POINT TO INPUT FILE    *TEST*
*        LR    R0,REC2             POINT TO INPUT RECORD  *TEST*
*        BAL   R4,WRITEV           OUTPUT REQUEST         *TEST*
*                                                         *TEST*
         BAL   R4,COMPACT          GO COMPRESS IT
         BAL   R4,COPYREC          SAVE THE LAST RECORD
*        BAL   R4,SYSUT2WT         WRITE OUTPUT           *TEST*
         B     MAINLINE            GO ROUND THE LOOP
         TITLE 'DATA COMPRESSION PROCESSING'
***********************************************************************
*        FIRSTLY TEST FOR SIMILARITIES WITHIN RECORDS
***********************************************************************
         SPACE 2
COMPACT  DS    0H                  COMPACT DATA
         RIN   ,                   SUB-ROUTINE ENTRY
COMPACTA DS    0H                  START OF COMPARISON
         LTR   R2,REC2LEN          SAVE STARTING LENGTH
         BNP   COMPACTX            EXIT IF NONE
         CLCL  REC1,REC2           COMPARE THE RECORDS
*        DC    A(0)                ABEND S0C1                    *TEST*
         SR    R2,REC2LEN          CALCULATE LENGTH OF FIELD
         BZ    COMPACTB            NO EQUAL DATA
         SPACE 1
COMPACTE DS    0H                  DATA EQUAL ROUTINE
         LA    R15,1(,R5)          POINT TO NEXT FREE BYTE
         C     R15,BUFFEND         IS IT WITHIN BUFFER?
         BL    *+4+4               YES, CONTINUE
         BAL   R4,SYSUT2WT         NO, OUTPUT OLD RECORD
         LR    R4,R2               COPY DATA LENGTH
         LA    R15,128             SET MAXIMUM LENGTH
         CR    R15,R4              COMPARE WITH DATA
         BNL   COMPACTF            WILL FIT IN ONE DESCRIPTOR
         LR    R4,R15              COPY MAXIMUM ALLOWED
         SPACE 1
COMPACTF DS    0H                  CREATE AN EQUAL DATA DESCRIPTOR
         BCTR  R4,0                DECREMENT TO EXECUTABLE LENGTH
         STC   R4,0(R5)            SET LENGTH
         LA    R3,1(,R5)           UPDATE OUTPUT POINTER
         LA    R5,1(,R5)           UPDATE SCB POINTER
         SR    R2,R4               CALCULATE LENGTH REMAINING (+1)
         BCT   R2,COMPACTE         IF MORE THAN 1 GO ROUND AGAIN
         LTR   REC2LEN,REC2LEN     ANY INPUT LEFT?
         BZ    COMPACTX            NO, END OF RECORD
*        B     COMPACTB            YES, TEST THE UNEQUAL BITS
         SPACE 1
COMPACTB DS    0H                  HANDLE UNEQUAL DATA
         BAL   R4,COMPRESS         GO EXECUTE COMPRESSION CODE
         LTR   REC1LEN,REC1LEN     CHECK COMPARAND LENGTH
         BP    *+4+2               SOMETHING THERE
         XR    REC1LEN,REC1LEN     OTHERWISE NOTHING
         LTR   REC2LEN,REC2LEN     TEST FOR INPUT
         BZ    COMPACTX            EXIT IF NONE
         BP    COMPACTA            PROCESS COMPLETE RECORD
         SPACE 2
COMPACTX DS    0H                  END OF ROUTINE
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
***********************************************************************
*        BUMP ALONG SOURCE DATA FOR A DUPLICATING FIELD
***********************************************************************
         SPACE 2
COMPRESS DS    0H                  COMPRESS DATA
         RIN   (R2)                SUBROUTINE ENTRY
         USING SCB,R5              ADDRESS STRING CONTROL BYTE
         BAL   R4,INITSTR          INITIALISE FIRST STRING
LOOPX    DS    0H
         C     REC2,R2END          TEST FOR FALLING OFF THE END
         BNL   LOOPEND3            YES, STOP WHATEVER YOU ARE DOING
         TM    0(R5),SCBTYPEB+SCBTYPEC ARE WE PROCESSING A DUP STRING?
         BNO   BUMP001             NO, GO CHECK THE DATA
         SPACE 1
LOOPDUPC DS    0H                  TEST FOR DUPLICATION
         CLC   0(1,REC2),0(R3)     NEXT BYTE SAME AS OLD ONE ?
         BNE   BUMP002             NO. GO TERMINATE THIS STRING
         LA    R2,1(,R2)           INCREMENT COUNTER
         LA    REC2,1(,REC2)       AND ADDRESS NEXT SOURCE BYTE
         LA    REC1,1(,REC1)       UPDATE PREVIOUS RECORD POINTER
         LTR   REC1LEN,REC1LEN     TEST REMAINDER LENGTH
         BZ    *+4+2               SKIP IF ZERO
         BCTR  REC1LEN,0           DECREMENT
         BCTR  REC2LEN,0           DECREMENT INPUT LENGTH
         B     LOOPENDX            GO FETCH NEXT BYTE
         SPACE 1
BUMP001  DS    0H                  NOT PROCESSING DUPLICATE STRING
         LA    R15,&STRLEN+1(,REC2) ADDRESS OF END OF THE DUP TEST
         C     R15,R2END           AM I RISKING AN OC4 ?
         BNL   SKIPDUPT            YES, SKIP OTHER TESTS
         CLC   0(&STRLEN,REC2),0(REC1) COMPARE WITH PREVIOUS RECORD
         BE    LOOPEND3            FINISHED IF MATCH
         CLC   0(&STRLEN,REC2),1(REC2) START OF DUPLICATION STRING ?
         BE    BUMP002             YES. ASSUME START OF NEW DUP STRING
SKIPDUPT DS    0H                  PROCESS NON-DUPLICATE DATA
         MVC   0(1,R3),0(REC2)     COPY THAT BYTE ACROSS
         LA    R3,1(,R3)           AND ADDRESS NEXT OUTPUT BYTE
         LA    REC2,1(,REC2)       AS WELL AS NEXT INPUT BYTE
         BCTR  REC2LEN,0           DECREMENT LENGTH
         LA    REC1,1(,REC1)       PREVIOUS RECORD AS WELL
         LTR   REC1LEN,REC1LEN     TEST SAVED REMAINDER LENGTH
         BZ    *+4+2               SKIP IF ZERO
         BCTR  REC1LEN,0           DECREMENT
         LA    R2,1(,R2)           INCREMENT STRING COUNTER
         SPACE 2
LOOPENDX DS    0H                  TEST FOR STRING TERMINATION
         TM    0(R5),SCBTYPEC      IS IT A DUPLICATE STRING?
         BO    LOOPEND2            YES, WILL FIT ANYWAY
         LA    R15,1(,R3)          CHECK NEXT OUTPUT POSITION
         C     R15,BUFFEND         IS IT OUTSIDE BUFFER?
         BL    LOOPEND2            NO, CARRY ON
         B     BUMP002             YES, GO TERMINATE STRING
         SPACE 1
LOOPEND2 DS    0H                  TEST FOR INPUT TERMINATION
         CH    R2,MAXLEN           LENGTH HAS REACHED MAXIMUM ?
         BNH   LOOPX               NO, LENGTH IS OK
BUMP002  DS    0H                  CHANGE OF STRING CHARACTERISTICS
         BAL   R4,ENDSTRNG         GO TERMINATE THIS STRING
         C     REC2,R2END          REACHED END OF INPUT ?
         BNL   COMPRESX            YES, EXIT THIS LOOP
         LA    R15,&STRLEN+1(,REC2) ADDRESS OF END OF THE DUP TEST
         C     R15,R2END           AM I RISKING AN OC4 ?
         BNL   BUMP002A            YES, SKIP OTHER TESTS
         CLC   0(&STRLEN,REC2),0(REC1) COMPARE WITH PREVIOUS RECORD
         BE    COMPRESX            FINISHED IF MATCH
BUMP002A BAL   R4,INITSTR          START OFF THE NEXT STRING
         B     LOOPX               GO RESTART THE PROCESS
         SPACE 1
LOOPEND3 DS    0H                  WE WILL FALL OFF END OF INPUT RECORD
         BAL   R4,ENDSTRNG         GO TERMINATE THIS STRING
*        DC    A(0)                ABEND S0C1                    *TEST*
*        B     COMPRESX            AND EXIT
         SPACE 2
COMPRESX DS    0H                  END OF COMPRESSION ROUTINE
         ROUT   ,                  RETURN TO CALLER
         EJECT
***********************************************************************
*        END OF A STRING DETECTED. COMPLETE CONTROL BYTE ETC.
***********************************************************************
         SPACE 2
ENDSTRNG DS    0H
         LTR   R2,R2               TEST LENGTH
         BZ    ENDCONT1            NOTHING THERE, EXIT
         BCT   R2,*+4+4            SUBTRACT ONE (NEXT POINTER)
         B     *+4+2               AVOID ERRORS IF ZERO (IMPOSSIBLE?)
         BCTR  R2,0                GET EXECUTABLE LENGTH OF DATA
         XR    R0,R0               CLEAR WORK REGISTER
         IC    R0,0(,R5)           LOAD THE SCB FLAGS
         OR    R0,R2               ADD IN THE LENGTH OF THE DATA
         STC   R0,0(,R5)           STORE THE CONTROL BYTE
         TM    0(R5),SCBTYPEC      WAS THAT A DUPLICATE STRING?
         BZ    ENDNOTDP            NO. NORMAL LENGTH
         LA    R5,2(,R5)           YES, SCB GOES AFTER DUPE CHAR.
         B     ENDCONT1            AND GO CONTINUE
ENDNOTDP DS    0H
         LR    R5,R3               NEXT OUTPUT POSITION FOR SCB
*        B     ENDCONT1            AND GO CONTINUE
         SPACE 1
ENDCONT1 DS    0H
         SR    R2,R2               NULL INITIAL STRING
         BR    R4                  RETURN TO CALLER
         EJECT
***********************************************************************
*        INTITIALISE FOR THE START OF A NEW STRING
***********************************************************************
         SPACE 2
INITSTR  DS    0H
         RIN   ,                   SUBROUTINE ENTRY
         LA    R15,2(,R5)          DO WE HAVE ROOM FOR MINI STRING?
         C     R15,BUFFEND         TEST FOR FIT IN BUFFER
         BL    INITSTR2            OK, CARRY ON
         BAL   R4,SYSUT2WT         WRITE OUTPUT
         SPACE 1
INITSTR2 DS    0H                  NOW HAVE SOMEWHERE FOR A STRING
         MVI   0(R5),SCBTYPEB      SET THE SCB FLAG
         LA    R3,1(,R5)           ADDRESS OF NEXT RECEIVING BYTE
         MVC   0(1,R3),0(REC2)     COPY ACROSS THE FIRST BYTE
         LA    R2,1                SET LENGTH OF ONE CHARACTER
         LA    R15,&STRLEN+1(REC2) ADDRESS OF END OF DUP TEST
         C     R15,R2END           AM I RISKING AN OC4 ?
         BH    NORISKS             YES. BYPASS THE DUP TEST
         CLC   0(&STRLEN,REC2),1(REC2) START OF A DUP STRING?
         BNE   NOTNEWDP            NO. NOT A NEW DUP FIELD
         OI    0(R5),SCBTYPEC      TURN ON DUPLICATE CHARACTERS
         SPACE 1
NORISKS  DS    0H
NOTNEWDP DS    0H
         ROUT  ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        END OF PROCESSING. TIDY UP, REPORT AND LEAVE.                *
***********************************************************************
         SPACE 1
STOPPGM  DS    0H                  NOW SHUTTING DOWN
*        TM    0(R5),SCBTYPEC      WAS LAST STRING A DUPLICATE?
*        BZ    STOPPGM2            NO, LAST RECORD FULLY PROCESSSED
*        BAL   R4,ENDSTRNG         YES, GO TERMINATE STRING
STOPPGM2 DS    0H                  ALL INPUT NOW PROCESSED
         BAL   R4,SYSUT2WT         GO OUTPUT LAST BUFFER
         GOSUB REPORT              GO ISSUE FINAL REPORT
         GOSUB SUMMRISE            GO CREATE TRAILING SUMMARY RECORD
         SPACE 1
         GOSUB CLOSEM              GO CLOSE ALL FILES
         LH    R0,R1LEN            GET BUFFER LENGTH
         L     R1,R1BUFF           .. AND ADDRESS
         BAL   R4,FREESTOR         GO RELEASE THE STORAGE
         LH    R0,BUFFLEN          GET BUFFER LENGTH
         L     R1,BUFFADD          .. AND ADDRESS
         BAL   R4,FREESTOR         GO RELEASE THE STORAGE
         SPACE 2
ENDOFPGM DS    0H                  NOW SHUTTING DOWN
         PGMOUT RC=RETCODE         EXIT PROGRAM
         TITLE 'INITIALISATION PROCESSING'
***********************************************************************
*        OPEN SUPPLIED DD CARDS, ACQUIRE STORAGE                      *
***********************************************************************
         SPACE 1
INITIAL  DS    0H                  PROGRAM INITIALISATION
         RIN   ,                   SUBROUTINE ENTRY
         BAL   R4,OPENEM           GO OPEN SUPPLIED DD CARDS
         SPACE 2
         SR    R0,R0               CLEAR REG. ZERO
         LA    R2,SYSUT1           POINT TO INPUT DCB
         USING IHADCB,R2           ESTABLISH DCB ADDRESSABILITY
         LH    R7,DCBLRECL         GET RECORD LENGTH
         LR    R0,R7               COPY OUTPUT LENGTH
         STH   R7,R1LEN            REMEMBER WORKING LENGTH
         BAL   R4,GETSTORE         GET A WORK AREA FOR ONE RECORD
         ST    R1,R1BUFF           SAVE ITS ADDRESS
         LR    R6,R1               SET OUTPUT POINTER
         BAL   R4,CLEAR            GO CLEAR THE BUFFER
         SPACE 2
INITIALO DS    0H                  INITIALISE OUTPUT BUFFER
         SR    R0,R0               CLEAR REG. ZERO
         LA    R2,SYSUT2           POINT TO OUTPUT DCB
         USING IHADCB,R2           ESTABLISH DCB ADDRESSABILITY
         LH    R11,DCBLRECL        GET RECORD LENGTH
         LR    R0,R11              COPY OUTPUT LENGTH
         STH   R11,BUFFLEN         REMEMBER WORKING LENGTH
         BAL   R4,GETSTORE         GET A WORK AREA FOR ONE RECORD
         ST    R1,BUFFADD          SAVE ITS ADDRESS
         LR    R10,R1              SET OUTPUT POINTER
         LA    R4,0(R10,R11)       SET END OF OUTPUT POINTER
         ST    R4,BUFFEND          SAVE THIS ADDRESS
         BAL   R4,CLEAR            GO CLEAR THE BUFFER
         TM    DCBRECFM,DCBRECV    ARE THEY VARIABLE LENGTH RECORDS?
         BNO   INITIALO            NO, NO NEED FOR A RDW
         LA    R10,4(R10)          STEP OVER RDW
         SPACE 2
INITIALX DS    0H                  END OF INITIALISATION
         LR    R5,R10              POINT SCB REGISTER AT FIRST OUT BYTE
         SR    R10,R10             NULL INITIAL STRING
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
         DROP  R2                  FINISHED WITH DCB
         TITLE 'SUB-ROUTINES'
***********************************************************************
*        REPORT GENERATION                                            *
***********************************************************************
         SPACE 1
REPORT   SUBIN SAVE=(R4)
         SR    R1,R1               ASK FOR CURRENT TIME
         GOSUB TODDATE             GO FORMAT TOD-CLOCK
         DATE  HEADDATE,FORMAT='DD MMM YY',FROM=TODPJUL FORMAT DATE ..
         MVC   HEADTIME,TODTIME    .. AND TIME IN HEADING
         LA    R2,PRINTSW          GET MDCB ADDRESS
*        AP    PAGECOUN,ONE        ADD ONE TO PAGE COUNTER
*        MVC   HEADPAGE,EDITPL2    MOVE IN EDIT MASK
*        ED    HEADPAGE,PAGECOUN   SHOW PAGE NUMBER
         LA    R0,TITLE1           POINT AT PAGE HEADING
         GOSUB WRITEV              GO OUTPUT HEADING
         LA    R0,RPTAHDR2         POINT AT SUB-HEADING
         GOSUB WRITEV              GO OUTPUT HEADING
         LA    R0,RPTAHDR3         POINT AT COLUMN HEADINGS
         GOSUB WRITEV              GO OUTPUT HEADING
         EJECT
***********************************************************************
*        CREATE REPORT DETAIL LINE 1                                  *
***********************************************************************
         SPACE 1
         MVC   RPTADITM(L'RADIRECS),RADIRECS MOVE ITEM NAME
         LA    R2,SYSUT1SW         POINT TO MDCB
         USING MDCB,R2             ESTABLISH MDCB ADDRESSABILITY
         CVB   R1,MDCBCNT          GET INPUT COUNT
         LR    R0,R1               SAVE VALUE
         LA    R15,RPTADIN+4       POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LA    R2,SYSUT2SW         POINT TO OUTPUT MDCB
         CVB   R1,MDCBCNT          GET RECORD COUNT
         LA    R1,1(,R1)           COUNT THE SUMMARY RECORD
         LR    R3,R1               SAVE VALUE
         LA    R15,RPTADOUT+5      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LR    R1,R3               RESTORE INPUT VALUE
         BAL   R4,PERCENT0         GO CALCULATE PERCENTAGE
         LA    R15,RPTADPCT+2      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LA    R0,RPTADETL         POINT AT DETAIL LINE
         LA    R2,PRINTSW          GET MDCB ADDRESS
         GOSUB WRITEV              GO OUTPUT LINE
         EJECT
***********************************************************************
*        CREATE REPORT DETAIL LINE 2                                  *
***********************************************************************
         SPACE 1
         LA    R1,RPTADITM         POINT TO AREA TO CLEAR
         LA    R0,RPTADCLN         SET ITS LENGTH
         BAL   R4,CLEAR            GO CLEAR IT
         MVC   RPTADITM(L'RADIBYTS),RADIBYTS MOVE ITEM NAME
         L     R1,BYTESIN          GET INPUT COUNT
         LR    R0,R1               SAVE VALUE
         LA    R15,RPTADIN+4       POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         L     R1,BYTESOUT         GET OUTPUT COUNT
         LR    R3,R1               SAVE VALUE
         LA    R15,RPTADOUT+5      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LR    R1,R3               RESTORE INPUT VALUE
         BAL   R4,PERCENT0         GO CALCULATE PERCENTAGE
         LA    R15,RPTADPCT+2      POINT TO RIGHT BOUNDARY -1
         BAL   R10,RPTMOVE         GO FILL IN THE VALUE
         LA    R0,RPTADETL         POINT AT DETAIL LINE
*        LA    R2,PRINTSW          GET MDCB ADDRESS
         GOSUB WRITEV              GO OUTPUT LINE
         SPACE 1
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         SPACE 2
***********************************************************************
*        OUTPUT A VALUE                                               *
*        ON INPUT R1  = VALUE                                         *
*                 R10 = RETURN ADDRESS                                *
*                 R15-->OUTPUT FIELD RIGHT BOUNDARY MINUS ONE         *
***********************************************************************
         SPACE 1
RPTMOVE  DS    0H                  DATA MOVING
         BAL   R4,CONVWORD         GO CONVERT VALUE
         SR    R15,R4              START OF FIGURES
         EX    R4,RPTMVC           MOVE FIGURES INTO REPORT
         SPACE 1
RPTMOVED DS    0H                  END OF SUB-ROUTINE
         BR    R10                 RETURN TO CALLER
         SPACE 1
RPTMVC   MVC   0(*-*,R15),0(R1)    PUT VALUE IN COLUMN        *EXECUTE*
         EJECT
***********************************************************************
*        OUTPUT SUMMARY RECORD                                        *
***********************************************************************
         SPACE 1
SUMMRISE DS    0H                  FINAL RECORD
         RIN   ,                   SUBROUTINE ENTRY
         LA    R2,SYSUT1SW         POINT TO INPUT MDCB
         USING MDCB,R2             ESTABLISH MDCB ADDRESSABILITY
         ZAP   RECSIN,MDCBCNT      COPY INPUT COUNT
         LA    R2,SYSUT2SW         POINT TO OUTPUT MDCB
         ZAP   RECSOUT,MDCBCNT     COPY OUTPUT COUNT
         LA    R0,SUMREC           POINT TO SUMMARY RECORD
         BAL   R4,WRITEV           OUTPUT THE RECORD
         SPACE 1
SUMMROSE DS    0H                  END OF SUB-ROUTINE
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         EJECT
***********************************************************************
*        COPY INPUT RECORD TO SAVE BUFFER                             *
***********************************************************************
         SPACE 1
COPYREC  DS    0H                  RECORD SAVING
         RIN   ,                   SUBROUTINE ENTRY
         L     R6,R1BUFF           GET RECORD 1 ADDRESS ..
         LH    R7,R1LEN            .. AND LENGTH
         L     R8,R2BUFF           GET RECORD 2 ADDRESS ..
         LH    R9,R2LEN            .. AND LENGTH
         MVCL  R6,R8               COPY RECORD 2 TO RECORD 1
         L     R6,R1BUFF           REFRESH RECORD 1 ADDRESS ..
         LH    R7,R2LEN            .. AND LENGTH OF NEW SAVED RECORD
         SPACE 1
COPYRECX DS    0H                  END OF SUB-ROUTINE
         ROUT  ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        WRITE SUBROUTINE FOR SYSUT2                                  *
***********************************************************************
         SPACE 1
SYSUT2WT DS    0H                  WRITE A RECORD TO SYSUT2
         RIN   (R2)                SUBROUTINE ENTRY
         L     R10,BUFFADD         REFRESH BUFFER POINTER
         LA    R2,SYSUT2           POINT TO DCB
         USING IHADCB,R2           ESTABLISH DCB ADDRESSABILITY
         LH    R11,DCBLRECL        PRIME LENGTH AS LRECL
         TM    DCBRECFM,DCBRECV    ARE THEY VARIABLE LENGTH RECORDS?
         BNO   SYSUT2W2            NO, NO NEED FOR A RDW
         LR    R11,R5              POINT TO NEXT SCB POSITION
         SR    R11,R10             CALCULATE LENGTH OF DATA
         STH   R11,0(,R10)         SAVE LENGTH IN RDW
         XC    2(2,R10),2(R10)     MAKE REST ZERO
         SPACE 1
SYSUT2W2 DS    0H                  OUTPUT A RECORD
         L     R4,BYTESOUT         GET OUTPUT BYTE COUNT
         AR    R4,R11              ADD THIS RECORD
         ST    R4,BYTESOUT         SAVE OUTPUT BYTE COUNT
         LA    R2,SYSUT2SW         POINT TO FILE CONTROL BLOCK
         LR    R0,R10              POINT TO OUTPUT AREA
         BAL   R4,WRITEV           OUTPUT REQUEST
         SR    R11,R11             SET OUTPUT LENGTH
         LA    R2,SYSUT2           POINT TO DCB
         TM    DCBRECFM,DCBRECV    ARE THEY VARIABLE LENGTH RECORDS?
         BNO   SYSUT2WX            NO, NO NEED FOR A RDW
         ST    R11,0(,R10)         MAKE RDW ZERO
         LA    R11,4               SET NEW RECORD LENGTH
         LA    R10,4(,R10)         STEP OVER RDW
         SPACE 1
SYSUT2WX DS    0H                  RETURN TO CALLER
         LR    R3,R10              SET OUTPUT POINTER
         LR    R5,R10              SET SCB POINTER
         ROUT  ,                   SUBROUTINE EXIT
         DROP  R2                  FINISHED WITH DCB
         TITLE 'COPY BLOCKS'
         COPY  BIOS                STANDARD I/O PROCESSING
         EJECT ,
DCPCOMP2 CSECT ,                   MAIN CSECT
         COPY  GETTINV             INCLUDE GET/LOCATE (VARIABLE)
*        COPY  GETTING             INCLUDE GET/LOCATE
         EJECT ,
         COPY  WRITEV              INCLUDE VB WRITE
         SPACE 2
         COPY  PUTMOVE             INCLUDE STANDARD I/O SKELETON
         EJECT ,
         COPY  GETSTORR            STANDARD GETMAIN CODE
         SPACE 2
         COPY  CLEAR               STANDARD STORAGE CLEAR
         EJECT ,
         COPY  CONVWORD            STANDARD DATA CONVERSION
         SPACE 2
         COPY  TRIM                STANDARD OUTPUT FORMATTING
         EJECT ,
         COPY  BLANK               STANDARD STORAGE BLANKING
         SPACE 2
         COPY  PERCENT0            STANDARD PERCENTAGE SUMS
         EJECT ,
         COPY  TODDATE             STANDARD DATE FORMATTING
         TITLE 'DATA AREAS'
BEGSNAP  DS    0D                  SNAP DATA AREAS FOLLOWING
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         SPACE 2
         DS    0F                  GET ADDRESSES ALIGNED
EYECATCH DC    CL8'EYECATCH'       EYE CATCHER
DEFLTLR  DC    A(27699)            DEFAULT LRECL - HALF 3390 TRACK
R1BUFF   DC    A(0)                RECORD SAVE AREA ADDRESS
R2BUFF   DC    A(0)                RECORD SAVE AREA ADDRESS
BUFFADD  DC    A(0)                OUTPUT CONSTRUCTION AREA ADDRESS
R2END    DC    A(0)                END OF INPUT DATA ADDRESS
BUFFEND  DC    A(0)                END OF OUTPUT AREA
R1LEN    DC    AL2(0)              RECORD SAVE AREA LENGTH
R2LEN    DC    AL2(0)              RECORD SAVE AREA LENGTH
BUFFLEN  DC    AL2(0)              OUTPUT AREA LENGTH
R3LEN    DC    AL2(0)              REMAINING OUTPUT LENGTH
         SPACE 1
DWORK    DC    D'0'                DOUBLEWORD WORK AREA
ZEROWORD DC    F'0'                A LOT OF NOTHING
COMPCODE DC    H'0'                PROGRAM COMPLETION CODE
RETCODE  DC    H'0'                MACRO RETURN CODE SAVE AREA
MAXLEN   DC    H'64'               MAXIMUM STRING LENGTH
         SPACE 1
CONVWORK DC    CL15' '             DECIMAL WORK AREA
ONE      DC    PL1'1'              COUNT INCREMENT
SIGN     EQU   X'F0'               POSITIVE PACKED SIGN
         SPACE 1
         RIN   GENERATE            SUBROUTINE SAVE AREA
         TITLE 'SUMMARY RECORD'
***********************************************************************
*        SUMMARY RECORD - LAST RECORD OUTPUT                          *
***********************************************************************
         SPACE 1
SUMREC   DC    AL2(SUMRECLN)       LENGTH OF SUMMARY RECORD
         DC    AL2(0)
         DC    AL4(-1)             IDENTIFIER
         SPACE 1
BYTESIN  DC    A(0)                NO. BYTES INPUT
BYTESOUT DC    A(0)                NO. BYTES OUTPUT
RECSIN   DC    PL8'0'              INPUT RECORD COUNT
RECSOUT  DC    PL8'0'              OUTPUT RECORD COUNT
         SPACE 1
SUMRECLN EQU   *-SUMREC            LENGTH OF RECORD
         TITLE 'REPORT LINES'
***********************************************************************
*        REPORT LINE SKELETONS                                        *
***********************************************************************
         SPACE 1
TITLE1   EQU   *                   STANDARD NAME
RPTAHDR1 DC    AL2(RPTAH1LN)       LENGTH OF HEADER RECORD     CC
         DC    AL2(0)
RPTAEJCT DC    C'1'                SKIP TO TOP OF FORM          1
         DC    CL18' '             PADDING                      2
         DC    CL35'CRUSH / SMF  -  COMPRESSION REPORT' TITLE  20
         DC    CL10' '             PADDING                     55
HEADDATE DC    CL9' '              REPORT DATE                 65
         SPACE 1
RPTAH1LN EQU   *-RPTAHDR1          LENGTH OF HEADER RECORD     74
         SPACE 1
         DC    CL8' '              PADDING                     75
HEADTIME DS    0CL5                TIME OF REPORT              83
HEADHH   DC    CL2' '              HOUR OF REPORT              83
         DC    CL1'.'              SEPARATOR                   84
HEADMM   DC    CL2' '              MINUTE OF REPORT            85
         DC    CL6' '              PADDING                     87
         DC    CL4'PAGE'                                       23
HEADPAGE DC    CL4'0000'           PAGE NUMBER                127
         SPACE 2
SUBTITLE EQU   *                   STANDARD NAME, DUMMY RECORD
RPTAHDR2 DC    AL2(RPTAH2LN)       LENGTH OF TITLE  RECORD     CC
         DC    AL2(0)
         DC    C'-'                ASA SKIP 3                   1
         DC    CL1' '              PADDING                      2
         SPACE 1
RPTAH2LN EQU   *-RPTAHDR2          LENGTH OF HEADER RECORD      .
         EJECT ,
***********************************************************************
*        HERE ARE STATISTICS MESSAGES SKELETONS                       *
***********************************************************************
         SPACE 1
RPTAHDR3 DC    AL2(RPTAH3LN)       LENGTH OF HEADINGS RECORD   CC
         DC    AL2(0)
         DC    C'-'                ASA SKIP 3                   1
         DC    CL8' '              PADDING                      2
         DC    CL20'ITEM'          HEADING                     10
         DC    CL20'INPUT'         HEADING                     30
         DC    CL20'OUTPUT'        HEADING                     50
         DC    CL3'  %'            HEADING                     70
         SPACE 1
RPTAH3LN EQU   *-RPTAHDR3          LENGTH OF HEADING RECORD    77
         SPACE 2
RPTADETL DC    AL2(RPTADTLN)       LENGTH OF DETAIL RECORD     CC
         DC    AL2(0)
RPTADASA DC    C'0'                ASA SKIP 2                   1
         DC    CL8' '              PADDING                      2
RPTADITM DC    CL20' '             ITEM                        10
RPTADIN  DC    CL20' '             INPUT COUNT                 30
RPTADOUT DC    CL20' '             OUTPUT COUNT                50
RPTADPCT DC    CL3' '              PERCENT                     70
         SPACE 1
RPTADCLN EQU   *-RPTADITM          LENGTH TO BLANK
RPTADTLN EQU   *-RPTADETL          LENGTH OF DETAIL RECORD     77
         SPACE 1
RADIRECS DC    C'RECORDS'          ITEM TYPE
RADIBYTS DC    C'BYTES'            ITEM TYPE
RADIAVG  DC    C'AVERAGE'          ITEM TYPE
         SPACE 1
REPTCOUN DC    PL2'0'              COUNT OF REPORTS
PAGECOUN DC    PL2'0'              COUNT OF PAGES
LINECOUN DC    PL2'60'             COUNT OF LINES
MAXLINE  DC    PL2'56'             MAXIMUM NUMBER OF LINES PER PAGE
         SPACE 1
EDITPL2  DC    X'40202120'         COPIES EDIT MASK
EDITPL4  DC    X'4020202020202120' COUNT EDIT MASK
EDITPL8  DC    X'40202020202020202020202020202120' COUNT EDIT MASK
         TITLE 'LITERAL POOL'
***********************************************************************
*        LITERAL POOL                                                 *
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL GOES HERE
         TITLE 'DCB''S AND I/O CONTROL TABLES'
***********************************************************************
*        DCB'S TABLE                                                  *
***********************************************************************
         SPACE 1
DCBTABLE DS    0F
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'SYSUT1',CL8'INPUT',CL8' '
         DC    PL8'0'              RECORD COUNT
DCBNTRY  EQU   *-DCBTABLE          LENGTH OF ONE TABLE ELEMENT
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'SYSUT2',CL8'OUTPUT',CL8'LEAVE'
         DC    PL8'0'              RECORD COUNT
         SPACE 1
PRINTSW  DC    X'00',AL3(SYSPRINT)
         DC    CL8'SYSPRINT'
         DC    CL8'OUTPUT'
         DC    CL8'LEAVE'
         DC    PL8'0'              RECORD COUNT
         SPACE 1
OPENSIZE EQU   *-DCBTABLE          TABLE SIZE OF FULL TIME FILES
MAXOPEN  EQU   OPENSIZE/DCBNTRY    MAXIMUM NUMBER OF DCB'S TO OPEN
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUM NUMBER OF DCB'S
         SPACE 2
         EJECT ,
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
***********************************************************************
*        DATA CONTROL BLOCKS                                          *
***********************************************************************
         SPACE 1
SYSUT1   DCB   DDNAME=SYSUT1,                                          *
               DSORG=PS,                                               *
               EODAD=STOPPGM,                                          *
               EXLST=EXITLIST,                                         *
               MACRF=GL
         SPACE 3
SYSUT2   DCB   DDNAME=SYSUT2,                                          *
               DSORG=PS,                                               *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
SYSPRINT DCB   DDNAME=SYSPRINT,                                        *
               DSORG=PS,                                               *
               RECFM=VBA,LRECL=137,                                    *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
SNAPDCB  DCB   DDNAME=SNAP,DSORG=PS,MACRF=W,                           *
               RECFM=VBA,LRECL=125,BLKSIZE=882
         TITLE 'WTO MESSAGE SKELETONS'
MSG101   WTO  'DCPCOMP201 RECORDS 999,999,999 IN, 999,999,999 OUT',    X
               ROUTCDE=(11),MF=L   ROUTE TO LOG
         SPACE 1
*        OFFSETS IN MESSAGE DATA LINES
         SPACE 1
MSG01NUM EQU   MSG101+4,8      MESSAGE NUMBER
MSG01IN  EQU   MSG101+4+18,12  INPUT COUNT
MSG01OUT EQU   MSG101+4+34,12  OUTPUT COUNT
MSG01MSK DC    X'402020206B2020206B202120' COUNT EDIT MASK
         SPACE 2
WTOIOE   DS    0F
         DC    AL2(WTOEND-*),H'0',CL109'******** - I/O ERROR -'
WTOEND   EQU   *
EOSNAP   DS    0H                  END OF STORAGE AREA TO BE SNAPPED
         TITLE 'DSECT MAPS'
         COPY DCPSCBF              INCLUDE STRING CONTROL BYTE DEFN.
         SPACE 3
         POP   PRINT               RESTORE PRINT STATUS
         END
