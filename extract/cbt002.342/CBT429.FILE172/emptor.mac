EMPTOR   TITLE 'ENTITY MODEL PROCESSING TO OPTIMISE RESOURCES'
***********************************************************************
*        PDSDOC *VSAM CLUSTER DEFINITION CONTROL CARD GENERATOR.......*
*                                                                     *
*        PROGRAM ID. :             EMPTOR                             *
*                                                                     *
*        DATE WRITTEN :            SEPTEMBER 1992                     *
*                                                                     *
*        AUTHOR :                  D.H.CARTWRIGHT.                    *
*                                                                     *
*        LOCATION :                SPRECHER ENERGIE                   *
*                                  KIRCHWEG 5                         *
*                                  5036 OBERENTFELDEN                 *
*                                  SWITZERLAND                        *
*                                                                     *
*        HISTORY  :                                                   *
*                                                                     *
* 15SEP92 CART1 STARTED WRITING BASED ON 'SERVICE'.                   *
* 22SEP92 CART1 IT SEEMS TO BE WORKING ENOUGH TO TEST.                *
* 24SEP92 CART1 IDCAMS DOES NOT LIKE NULL INPUT, SO DO NOT OPEN       *
*               'AIX' IF NOT NEEDED AND SET RC=4 IN THAT CASE.        *
* 25SEP92 CART1 ALL VSAM IS INTRINSICALLY VARIABLE LENGTH, SO         *
*               CALCULATE RECORD SIZE RATHER THAN RELY ON WHAT        *
*               PROGRAMMERS SAY. THEIR VERSION CAN GIVE EXCESSIVE     *
*               SPACE ALLOCATIONS, ESPECIALLY ON AIX.                 *
* 12OCT92 CART1 'REORG=0' IS A REQUEST FOR AN EXACT DEFINITION        *
* 15OCT92 CART1 PUT 'PSPAN' IN CLUSTER PROCESS LIST                   *
* 16OCT92 CART1 COUNT ALL DELETES AND UPDATES AS 'ACTIVITY'           *
* 10NOV92 CART1 ADD TEST FOR INDEXED FILE, USING S26AMDA GLOBAL       *
* 13NOV92 CART1 ADD 'MODEL=' PARM, DOCUMENT PARM OPTIONS              *
* 18NOV92 CART1 CHANGE MAX. PARM LENGTH 80-->100.                     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        PURPOSE                                                      *
*       ---------                                                     *
*                                                                     *
* THIS PROGRAM WILL CREATE THE IDCAMS CONTROL CARDS REQUIRED TO       *
* REDEFINE AN EXISTING KSDS CLUSTER WITH SOME OPTIMISATION.           *
* RATHER THAN CALCULATE CISIZES, THIS PROGRAM POINTS THE              *
* DEFINITION TO APPROPRIATE MODELS CHOSEN FOR THE SPACE OCCUPIED      *
* BY THE DATA. THUS, TUNING ONE MODEL CAN TUNE LOTS OF FILES.         *
* THIS PROGRAM ATTEMPTS TO REDUCE THE NUMBER OF CI AND CA SPLITS      *
* BY ALLOCATING SUFFICIENT SPACE (IN RECORDS) TO CATER FOR GROWTH     *
* BETWEEN RE-ORGANISATIONS.                                           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        LIMITATIONS                                                  *
*       ------------                                                  *
*                                                                     *
* 1) DYNAMICALLY CALLS 'CATREAD' AND 'GETVVR'.                        *
*                                                                     *
* 2) ASSUMES THAT THE MODELS EXIST.                                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*       INPUT                                                         *
*       -----                                                         *
*                                                                     *
* 1)PARM   - DEFINES THE CLUSTER TO PROCESS AND OPTIONALLY THE        *
*            PERIOD IN DAYS BETWEEN RE-ORGANISATIONS (DEFAULT 30)     *
*            POSSIBLE KEYWORDS ARE:                                   *
*                                                                     *
*            A)CLUSTER= REQUIRED. DEFINES THE VSAM CLUSTER TO         *
*                       BE PROCESSED BY THE PROGRAM.                  *
*            B)MODEL=   OPTIONAL. DEFINES THE VSAM CLUSTER THAT       *
*                       THE PROGRAM WILL SPECIFY AS A MODEL. IF       *
*                       NOT SUPPLIED THE PROGRAM WILL SELECT THE      *
*                       APPROPRIATE ONE FROM A LIST OF MODELS USED*
*                       AT SPRECHER ENERGIE (GERMAN NAMES). NOTE      *
*                       THAT THIS NAME IS NOT USED FOR AN AIX.        *
*            C)REORG=   OPTIONAL. DEFINES THE NUMBER OF DAYS THAT     *
*                       THE CLUSTER WILL GO BETWEEN REORGS. COUNTS*
*                       NON-WORK DAYS, DEFAULT IS 30 DAYS.            *
*                       IF REORG=0 IS SPECIFIED THE DEFINITIONS       *
*                       GENERATED WILL EXACTLY REFLECT THE CURRENT*
*                       SIZE OF THE FILE.                             *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*       OUTPUT                                                        *
*       ------                                                        *
*                                                                     *
* 1)DEFINE - THE OUTPUT CONTROL CARDS TO DEFINE THE CLUSTER TO        *
*            IDCAMS. 80 BYTE CARD IMAGES.                             *
*                                                                     *
* 2)AIX    - THE OUTPUT CONTROL CARDS TO DEFINE ANY ALTERNATE         *
*            INDICES TO IDCAMS. 80 BYTE CARD IMAGES. IF THERE IS      *
*            NO ALTERNATE INDEX THIS FILE IS NOT OPENED AND THE       *
*            PROGRAM ENDS WITH A COMPLETION CODE OF 4                 *
*                                                                     *
* 3)SYSPRINT MESSAGE DATA SET. 133 BYTE FBA LINES, 60 LINES TO        *
*            A PAGE.                                                  *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
*        PRINT ON,GEN              SHOW MACRO EXPANSIONS
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
         SPACE 1
EMPTOR   CSECT
         SPACE 1
***********************************************************************
*        REGISTER EQUATES AND USAGES.                                 *
***********************************************************************
         SPACE 1
R0       EQU   0                   OUTPUT RECORD POINTER
R1       EQU   1                   WORK/LINKAGE
R2       EQU   2                   POINTER TO MDSCB
REG2     EQU   R2                  WORK REGISTER IN 'SCAN' MACRO
R3       EQU   3                   AMDSBCAT POINTER
R4       EQU   4                   LINKAGE RETURN
R5       EQU   5                   KEYWORD/PROCESS POINTER, NAMES COUNT
R6       EQU   6                   KEYWORD/PROCESS TABLE, AMDSB CELL
R7       EQU   7                   POINTER TO ASSOCIATED NAMES LIST
R8       EQU   8                   RESULTS AREA FOR 'CATREAD'
R9       EQU   9                   VVR MAPPING POINTER
R10      EQU   10                  BASE REG. 4 (RESERVED)
R11      EQU   11                  BASE REG. 3
R12      EQU   12                  BASE REG. 2
R13      EQU   13                  SAVE AREA / BASE REG. 1
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12,R11) STANDARD HOUSEKEEPING
         GOSUB INITIAL             PERFORM INITIALISATION
         EJECT
***********************************************************************
*        MAIN PROCESSING ROUTINE                                      *
*                                                                     *
* PROCESS THE CLUSTER USING THE CLUSTER PROCESSES LIST. THIS MAY IN   *
* TURN INVOKE DATA, INDEX AND AIX PROCESSING LISTS WHICH MAY THEN     *
* INVOKE FURTHER LISTS ETC. ETC..                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 1
MAINLINE DS    0H                  PROGRAM FUNCTION
         MVI   CATTYPE,C'C'        CLUSTER ENTRY TYPE
         MVC   CATENT,CLUSTER      COPY MAJOR ENTITY NAME
         GOSUB MAJORGET            GO FIND ENTITY ASSOCIATIONS
         L     R8,ARESULT          REFRESH RESULT POINTER
         USING RESULTS,R8          ESTABLISH ADDRESSABILITY
         LA    R3,AMDSB            AND AMDSB POINTER
         USING S26AMDA,R3          ESTABLISH ADDRESSABILITY
         LA    R2,DEFINESW         START OUTPUT TO DDNAME=DEFINE
         MVC   IDELCLUS,CLUSTER    DELETE THE BASE CLUSTER
         MVI   IDDASH,C' '         DO NOT CONTINUE THIS ONE
         LA    R1,IDELETE          POINT TO DELETE CLUSTER STATEMENT
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVI   IDDASH,C'-'         RESET CONTINUATION MARK
         LA    R1,IDCLUST          POINT TO DEFINE CLUSTER STATEMENT
         GOSUB CARDPUT             GO OUTPUT DEFINE CARD
         LA    R6,LPCLUST          POINT AT PROCESS LIST
         SPACE 1
CLSTLOOP DS    0H                  LOOP THROUGH CLUSTER PROCESSES
         ICM   R5,B'1111',0(R6)    GET PROCESS ADDRESS
         BZ    CLSTLEND            EXIT IF NONE (END OF LIST)
         BALR  R4,R5               ELSE GO EXECUTE PROCESS
         LA    R6,4(,R6)           INCREMENT LIST POINTER
         B     CLSTLOOP            THEN GO ROUND AGAIN
         EJECT
***********************************************************************
*                                                                     *
*        SEARCH FOR ANY ALTERNATE INDICES                             *
*                                                                     *
***********************************************************************
         SPACE 1
CLSTLEND DS    0H                  FINISHED WITH CLUSTER PROCESS LIST
         GOSUB CLOSE               GO CLOSE 'DEFINE'
         SR    R4,R4               CLEAR EVEN REGISTER
         L     R5,LASCLIST         GET COUNT OFF ASSOCIATIONS
         ST    R5,LASCSAVE         SAVE THIS SIZE
         M     R4,=F'45'           MULTIPLY BY LENGTH
         LR    R0,R5               GET SIZE OF ASSOCIATIONS LIST
         GOSUB GETSTORE            GET LIST SAVE AREA
         ST    R1,PASCSAVE         SAVE ITS ADDRESS
         LR    R2,R1               COPY 'TO' ADDRESS ..
         LR    R3,R0               .. AND LENGTH
         L     R4,PASCLIST         LOAD ASSOCIATION LIST POINTER
         MVCL  R2,R4               SAVE CLUSTER ASSOCIATIONS
         LA    R2,AIXSW            START OUTPUT TO DDNAME=AIX
         OI    0(R2),DDINT         EXPRESS INTEREST IN IT
         GOSUB TESTIOT             CHECK FOR PRESENCE
*        GOSUB OPEN                DO NOT OPEN HERE, LET 'WRITING'
CLSTAIX  DS    0H                  LOOP THROUGH ALTERNATE INDICES
         MVC   PASCLIST,PASCSAVE   POINT BACK TO CLUSTER ASSOCIATIONS
         MVC   LASCLIST,LASCSAVE   AND RESET LENGTH
         MVI   ENTFIND,C'G'        WANT ALTERNATE INDEX COMPONENT
         GOSUB MINORGET            FROM CLUSTER ASSOCIATIONS LIST
         B     STOPPGM             EXIT IF NO (MORE) AIX
         GOSUB PAIX                GO EXECUTE PROCESS LIST
         B     CLSTAIX             GO ROUND FOR MORE ALTERNATES
         EJECT ,
***********************************************************************
*        END OF PROCESSING. TIDY UP, REPORT AND LEAVE.                *
***********************************************************************
         SPACE 1
STOPPGM  DS    0H                  NOW SHUTTING DOWN
         GOSUB CLOSEM              CLOSE ANY OPEN DATASETS
         SPACE 3
ENDOFPGM DS    0H                  NOW SHUTTING DOWN
         SR    R15,R15             SET DEFAULT RC=0
         LA    R2,AIXSW            CHECK UP ON DDNAME=AIX
         USING MDCB,R2             ESTABLISH ADDRESSABILITY
         CP    MDCBCNT,ONE         TEST RECORD COUNT
         BNL   *+4+4               USE RC=0 IF AIX WRITTEN
         LA    R15,4               SHOW NO AIX
         PGMOUT RC=(15)            EXIT PROGRAM
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         TITLE 'MINOR ELEMENT PROCESSING - DATA COMPONENT'
***********************************************************************
*        PROCESS A 'DATA' ELEMENT. THIS MAY BE FOR A CLUSTER          *
*        OR AN AIX MAJOR COMPONENT.                                   *
***********************************************************************
         SPACE 1
PDATA    DS    0H                  PROCESS 'DATA' ENTITY
         RIN   (R6)                SUBROUTINE ENTRY
         L     R8,ADATACAT         GET DATA RESULTS AGAIN
         LA    R3,AMDSB            AND AMDSB POINTER
         L     R9,AVVRDATA         GET DATA VVR AGAIN
         LA    R6,LPDATA           POINT AT PROCESS LIST
         SPACE 1
DATALOOP DS    0H                  LOOP THROUGH 'DATA' PROCESSES
         ICM   R5,B'1111',0(R6)    GET PROCESS ADDRESS
         BZ    DATALEND            EXIT IF NONE (END OF LIST)
         BALR  R4,R5               ELSE GO EXECUTE PROCESS
         LA    R6,4(,R6)           INCREMENT LIST POINTER
         B     DATALOOP            THEN GO ROUND AGAIN
         SPACE 2
DATALEND DS    0H                  ALL 'DATA' PROCESSES FINISHED
         ROUT  ,                   RETURN TO CALLER
         TITLE 'MINOR ELEMENT PROCESSING - INDEX COMPONENT'
***********************************************************************
*        PROCESS A 'INDEX' ELEMENT. THIS MAY BE FOR A CLUSTER         *
*        OR AN AIX MAJOR COMPONENT.                                   *
***********************************************************************
         SPACE 1
PINDEX   DS    0H                  PROCESS 'INDEX' ENTITY
         RIN   (R6)                SUBROUTINE ENTRY
         GOSUB IFINDEX             TEST FOR AN INDEX
         B     INDXLEND            NO, SKIP THIS ROUTINE
         L     R8,AINDXCAT         GET INDEX RESULTS AGAIN
         LA    R3,AMDSB            AND AMDSB POINTER
         L     R9,AVVRINDX         GET INDEX VVR AGAIN
         LA    R6,LPINDEX          POINT AT PROCESS LIST
         SPACE 1
INDXLOOP DS    0H                  LOOP THROUGH 'INDEX' PROCESSES
         ICM   R5,B'1111',0(R6)    GET PROCESS ADDRESS
         BZ    INDXLEND            EXIT IF NONE (END OF LIST)
         BALR  R4,R5               ELSE GO EXECUTE PROCESS
         LA    R6,4(,R6)           INCREMENT LIST POINTER
         B     INDXLOOP            THEN GO ROUND AGAIN
         SPACE 2
INDXLEND DS    0H                  ALL 'INDEX' PROCESSES FINISHED
         ROUT  ,                   RETURN TO CALLER
         TITLE 'MINOR ELEMENT PROCESSING - AIX COMPONENT'
***********************************************************************
*        PROCESS AN ALTERNATE INDEX COMPONENT IF PRESENT              *
***********************************************************************
         SPACE 1
PAIX     DS    0H                  PROCESS 'AIX' ENTITY
         SUBIN SAVE=(R2,R4,R6)     SUBROUTINE ENTRY
         OI    RUNFLAG,RUNAIX      PROCESSING AN AIX
         MVI   CATTYPE,C'G'        WANT AN AIX ENTRY
         MVC   CATENT,1(R7)        COPY MAJOR ENTITY NAME
         GOSUB MAJORGET            GO FIND ENTITY ASSOCIATIONS
         L     R8,ARESULT          REFRESH RESULT POINTER
         LA    R3,AMDSB            AND AMDSB POINTER
         LA    R1,IDAIX            POINT TO DEFINE AIX STATEMENT
         GOSUB CARDPUT             GO OUTPUT DEFINE CARD
         LA    R6,LPAIX            POINT AT PROCESS LIST
         SPACE 1
AIXLOOP  DS    0H                  LOOP THROUGH 'AIX' PROCESSES
         ICM   R5,B'1111',0(R6)    GET PROCESS ADDRESS
         BZ    AIXLEND             EXIT IF NONE (END OF LIST)
         BALR  R4,R5               ELSE GO EXECUTE PROCESS
         LA    R6,4(,R6)           INCREMENT LIST POINTER
         B     AIXLOOP             THEN GO ROUND AGAIN
         SPACE 2
AIXLEND  DS    0H                  ALL 'AIX' PROCESSES FINISHED
         SUBOUT RESTORE=(R2,R4,R6)    RETURN TO CALLER
         TITLE 'INITIALISATION PROCESSING'
***********************************************************************
*        PERFORM INITIAL HOUSEKEEPING.                                *
***********************************************************************
         SPACE 1
INITIAL  DS    0H                  PROGRAM INITIALISATION
         RIN   ,                   SUBROUTINE ENTRY
         L     R5,0(,R1)           GET PARM ADDRESS
         SPACE 1
         GOSUB OPENEM              TEST AND OPEN DDCARDS SUPPLIED
         SPACE 2
***********************************************************************
*         DATE PROCESSING                                             *
***********************************************************************
         SR    R1,R1               ASK FOR CURRENT TIME
         GOSUB TODDATE             GO FORMAT TOD-CLOCK
         DATE  HEADDATE,FORMAT='DD MMM YY',FROM=TODPJUL FORMAT DATE ..
         MVC   HEADTIME,TODTIME    .. AND TIME IN HEADING
         EJECT ,
***********************************************************************
*        ANALYZE 'PARM' INFORMATION                                   *
***********************************************************************
         SPACE 1
         LH    R15,0(,R5)          GET LENGTH OF PARM
         LTR   R15,R15             ANYTHING THERE?
*        BZ    PARMDONE            NO, SKIP PARM PROCESSING
         BZ    ERROR1              NO, ERROR
         BCTR  R15,0               DECREMENT LENGTH FOR EXECUTE
         LA    R14,LISTPARM        POINT TO PRINT LINE AREA
         EX    R15,MOVEPARM        COPY PARM DATA TO PRINT LINE
         LA    R14,LENPARM-1       MAX. PERMISSIBLE PARM
         CR    R14,R15             TEST PARM LENGTH
         BL    ERROR0              ERROR IF TOO LONG
         LA    R14,PARMCARD        POINT TO RECEIVING AREA
         EX    R15,MOVEPARM        COPY PARM DATA TO CARD IMAGE
         LA    R0,PARMLINE         POINT TO PRINT LINE
         GOSUB PRINT               GO PRINT THE PARM
         SPACE 1
         LA    R5,PARMCARD         POINT TO NEW PARM AREA
         LA    R6,PARMTABL         POINT TO TABLE OF KEYWORDS
         GOSUB GETOPTNS            GO PARSE THE 'PARM'
         B     PARMDONE            FINISHED PROCESSING PARM FIELD
         SPACE 1
MOVEPARM MVC   0(*-*,R14),2(R5)    MOVE PARM                *EXECUTED*
         SPACE 1
PARMDONE DS    0H                  FINISHED PROCESSING PARM
         MVC   SAVEENT,CLUSTER     SAVE REQUESTED NAME
         L     R0,SRESULT          GET SIZE OF AREA REQUIRED
         GOSUB GETSTORE            GO GET THAT STORAGE
         ST    R1,ARESULT          SAVE ITS ADDRESS
         GOSUB CLEAR               CLEAR RESULTS AREA
         LR    R8,R1               COPY RESULTS ADDRESS
         L     R0,SRESULT          GET SIZE OF AREA REQUIRED
         GOSUB GETSTORE            GO GET THAT STORAGE
         ST    R1,ADATACAT         ADDRESS OF DATA RESULTS SAVEAREA
         GOSUB GETSTORE            GO GET THAT STORAGE
         ST    R1,AINDXCAT         ADDRESS OF INDEX RESULTS SAVEAREA
         L     R0,SS26WRK          GET SIZE OF AREA REQUIRED
         GOSUB GETSTORE            GO GET THAT STORAGE
         ST    R1,AS26WRK          SAVE ITS ADDRESS
         GOSUB CLEAR               CLEAR SVC26 WORK AREA
         L     R0,SVVRWRK          GET SIZE OF AREA FOR DATA VVR
         GOSUB GETSTORE            GO GET THAT STORAGE
         ST    R1,AVVRDATA         SAVE ITS ADDRESS
         GOSUB CLEAR               CLEAR VVR RECORD AREA
         ST    R0,0(,R1)           PUT AREA LENGTH IN THE AREA
         L     R0,SVVRWRK          GET SIZE OF AREA FOR INDEX VVR
         GOSUB GETSTORE            GO GET THAT STORAGE
         ST    R1,AVVRINDX         SAVE ITS ADDRESS
         GOSUB CLEAR               CLEAR VVR RECORD AREA
         ST    R0,0(,R1)           PUT AREA LENGTH IN THE AREA
         SPACE 2
INITIALX DS    0H                  END OF INITIALISATION
         ROUT  ,                   RETURN TO CALLER
         TITLE 'COMMAND PARSING ROUTINES'
***********************************************************************
*        VALIDATE INPUT DATA FROM USER                                *
*        ON ENTRY R5 -----> AREA CONTAINING THE WHOLE COMMAND         *
*        ON ENTRY R6 -----> TABLE OF VALID KEYWORDS, FIRST WORD IS LEN*
***********************************************************************
         SPACE 2
GETOPTNS DS    0H                  TEST COMMAND OPTIONS
         SUBIN SAVE=(R2,R4,R5,R6)  SUBROUTINE ENTRY
         LA    R15,LENPARM         SET LENGTH OF PARAMETERS
         PUSH PRINT                SAVE PRINT VALUES
         PRINT GEN                 SHOW SCAN MACRO
         SCAN  DATA=(R5),LENGTH=(R15),DELIM=('=',','),END=(' '),       *
               RETAREA=SCANBLKS    BREAK DOWN PARAMETERS
         POP   PRINT               RESTORE PRINT VALUES
         EJECT ,
***********************************************************************
*        ANALYZE THE INPUT PARAMETERS AND REPORT                      *
***********************************************************************
         SPACE 1
         L     R2,SCANBLKS         LOAD ADDRESS OF FIRST PART
         LTR   R2,R2               NOTHING BUT DELIMITERS ?
         BNZ   PARMLOOP            NO, SOMETHING THERE TO ANALYSE
         B     ERROR1              YES, THEN GIVE UP
         SPACE 1
PARMLOOP XR    R15,R15             CLEAR WORK REGISTER
         IC    R15,4(R2)           LOAD LENGTH OF KEYWORD
         ICM   R14,B'1111',4(R2)   LOAD ADDRESS OF KEYWORD
         BZ    PARMLOOP            NONE, TRY NEXT ENTRY
         GOSUB TESTKEY             GO CHECK VALIDITY
         BALR  R4,R1               GO PROCESS THE KEYWORD
         SPACE 1
PARMLOOX DS    0H                  RUN UP LIST
         ICM   R2,B'1111',0(R2)    LOAD ADDRESS OF NEXT ENTRY
         BNZ   PARMLOOP            MORE. SO GO PROCESS IT.
         SPACE 2
OPTNEXIT DS    0H                  RETURN TO CALLER
         SUBOUT RESTORE=(R2,R4,R5,R6) SUBROUTINE EXIT
         EJECT
***********************************************************************
*        CHECK THE VALIDITY OF KEYWORDS IN THE PARM FIELD             *
***********************************************************************
         SPACE 2
TESTKEY  DS    0H
         RIN   ,                   SUBROUTINE ENTRY
         LA    R0,WORKKEY          START ADDRESS OF KEYWORD WORK AREA
         LA    R1,L'WORKKEY        LENGTH OF WORK AREA
         ICM   R15,8,=C' '         LOAD PADDING CHARACTER FOR MOVE
         MVCL  R0,R14              MOVE PADDED KEY WORD TO WORK AREA
         LA    R1,4(,R6)           LOAD START ADDRESS OF KEYWORD TABLE
         LA    R14,PARMLEN         LENGTH OF A PARMTAB ENTRY
         LA    R15,PARMEND         END ADDRESS OF TABLE
*        ICM   R15,B'1111',0(R6)   END ADDRESS OF TABLE
*        BZ    TESTKEYX            EXIT IF NONE
         BCTR  R15,0               END ADDRESS FOR BXLE LOOP
         SPACE 1
KEYLOOP  CLC   WORKKEY,0(R1)       VALID KEYWORD FOUND ?
         BE    GOTAKEY             YES. GO LOAD ADDRESS OF PROCESSOR
         BXLE  R1,R14,KEYLOOP      NO.  TRY NEXT ENTRY IN TABLE
         LA    R1,ERROR2           TROUBLE. KEYWORD NOT FOUND
         B     TESTKEYX            RETURN WITH ERROR PROCESSOR
         SPACE 1
GOTAKEY  L     R1,L'KEYNAME(R1)    LOAD ADDRESS OF PROCESSOR
         SPACE 1
TESTKEYX DS    0H                  RETURN TO CALLER
         ROUT   ,                  SUBROUTINE EXIT
         EJECT
***********************************************************************
*        TABLE OF VALID KEYWORDS AND PROCESSING ROUTINES              *
***********************************************************************
         SPACE 1
SCANBLKS DC    20F'0'              WORK AREA FOR SCAN MACRO
WORKKEY  DC    CL8' '              WORK AREA FOR KEY SCAN
         SPACE 2
PARMTABL DS    0F                  PARM FIELD KEYWORD TABLE
         DC    A(PTABLEN)          LENGTH OF TABLE
KEYNAME  DC    CL8'CLUSTER'        FIRST KEYWORD
         DC    AL4(CLUSPROC)       ADDRESS OF PROCESSOR
PARMLEN  EQU   *-KEYNAME           LENGTH OF AN ENTRY
         DC    CL8'MODEL'          KEYWORD
         DC    AL4(MODLPROC)       ADDRESS OF PROCESSOR
         DC    CL8'REORG'          KEYWORD
         DC    AL4(REORPROC)       ADDRESS OF PROCESSOR
         SPACE 1
PARMEND  EQU       *               END OF PARM KEYWORD TABLE
PTABLEN  EQU   *-PARMTABL          LENGTH OF TABLE
         EJECT
***********************************************************************
*        ROUTINE TO PROCESS CLUSTER NAME                              *
***********************************************************************
         SPACE 2
CLUSPROC DS    0H                  PROCESS A CLUSTER NAME
         RIN   ,                   SUBROUTINE ENTRY
         ICM   R2,B'1111',0(R2)    LOAD ADDRESS NEXT SCAN BLOCK
         BZ    ERROR3              NONE,TELL HIM NOT ALLOWED
         SPACE 1
         LA    R1,CLUSTER          LOAD ADDRESS OF RECEIVING FIELD
         LA    R0,L'CLUSTER        LOAD LENGTH OF IT
         GOSUB BLANK               GO CLEAR RECEIVING FIELD
         XR    R15,R15             CLEAR WORK REGISTER
         IC    R15,4(R2)           LOAD LENGTH OF DATA
         CR    R15,R0              HIGHER THAN MAX. VALUE?
         BNH   *+4+4               NO, WE CAN LET HIM DO THAT
         B     ERROR4              TELL HIM NOT ALLOWED
         SPACE 1
         L     R14,4(R2)           LOAD ADDRESS OF DATA
         STC   R15,CLUSTERL        SAVE CLUSTER NAME LENGTH
         BCTR  R15,0               DECREMENT LENGTH FOR EXECUTE
         EX    R15,MOVECLUS        SAVE THE PARAMETER VALUE
         SPACE 1
CLUSOUT  DS    0H                  RETURN TO CALLER
         ROUT  ,                   SUBROUTINE EXIT
         SPACE 1
MOVECLUS MVC   0(*-*,R1),0(R14)   MOVE PARM                 *EXECUTED*
         EJECT
***********************************************************************
*        ROUTINE TO PROCESS MODEL NAME                                *
***********************************************************************
         SPACE 2
MODLPROC DS    0H                  PROCESS A MODEL NAME
         RIN   ,                   SUBROUTINE ENTRY
         ICM   R2,B'1111',0(R2)    LOAD ADDRESS NEXT SCAN BLOCK
         BZ    ERROR3              NONE,TELL HIM NOT ALLOWED
         SPACE 1
         LA    R1,MODEL            LOAD ADDRESS OF RECEIVING FIELD
         LA    R0,L'MODEL          LOAD LENGTH OF IT
         GOSUB BLANK               GO CLEAR RECEIVING FIELD
         XR    R15,R15             CLEAR WORK REGISTER
         IC    R15,4(R2)           LOAD LENGTH OF DATA
         CR    R15,R0              HIGHER THAN MAX. VALUE?
         BNH   *+4+4               NO, WE CAN LET HIM DO THAT
         B     ERROR4              TELL HIM NOT ALLOWED
         SPACE 1
         L     R14,4(R2)           LOAD ADDRESS OF DATA
         STC   R15,MODELL          SAVE MODEL NAME LENGTH
         BCTR  R15,0               DECREMENT LENGTH FOR EXECUTE
         EX    R15,MOVECLUS        SAVE THE PARAMETER VALUE
         SPACE 1
MODLOUT  DS    0H                  RETURN TO CALLER
         ROUT  ,                   SUBROUTINE EXIT
         EJECT
***********************************************************************
*        ROUTINE TO PROCESS REORGANISATION PERIOD                     *
***********************************************************************
         SPACE 2
REORPROC DS    0H                  PROCESS A CLUSTER NAME
         RIN   ,                   SUBROUTINE ENTRY
         ICM   R2,B'1111',0(R2)    LOAD ADDRESS NEXT SCAN BLOCK
         BZ    ERROR3              NONE,TELL HIM NOT ALLOWED
         SR    R15,R15             CLEAR WORK REGISTER
         LR    R14,R15             AND ANOTHER
         ICM   R15,B'0001',4(R2)   GET PARAMETER LENGTH
         LA    R0,3                SET MAX. VALUE
         CR    R15,R0              TEST PARAM. LENGTH
         BH    ERROR4              ERROR IF TOO LONG
         BCTR  R15,0               DECREMENT LENGTH FOR EXECUTE
         ICM   R14,B'0111',5(R2)   GET PARAMETER ADDRESS
         EX    R15,REORGNUM        EXECUTE NUMERIC TEST
         BL    ERROR3              ERROR IF NOT
         EX    R15,REORGPAK        SAVE THE PARAMETER VALUE
         CVB   R1,DWORK            CONVERT IT TO BINARY
         LTR   R1,R1               TEST RESULT
         BNM   *+4+4               SKIP ON IF OK
         LA    R1,30               ELSE RESET DEFAULT
         ST    R1,FREORG           AND SAVE THE VALUE
         SPACE 1
REOROUT  DS    0H                  RETURN TO CALLER
         ROUT  ,                   SUBROUTINE EXIT
         SPACE 1
REORGNUM CLC   0(*-*,R14),=C'000'  TEST NUMERIC             *EXECUTED*
REORGPAK PACK  DWORK,0(*-*,R14)    PACK REOG. DAYS NUMBER   *EXECUTED*
         TITLE 'FIND MAJOR ENTITY - CLUSTER OR AIX'
***********************************************************************
*                                                                     *
* FIND ASSOCIATIONS FOR THE CLUSTER OR AIX AND READ THE VVR'S FOR     *
* ITS DATA AND INDEX COMPONENTS                                       *
*                                                                     *
***********************************************************************
         SPACE 1
MAJORGET RIN   ,                   PROCESS VSAM ENTITY
         GOSUB ASSLIST             GO FIND ASSOCIATIONS
         ICM   R3,B'1111',OPTNLIST+92 GET AMDSB POINTER
         BZ    MAJORGOT            FORGET IT IF NONE
         L     R8,ARESULT          REFRESH POINTER
         USING RESULTS,R8          ESTABLISH ADDRESSABILITY
         LA    R7,CATTYPE          POINT TO PSEUDO ASSOCIATIONS LIST
         GOSUB READCAT             GO FIND CATALOG INFO.
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ERROR6              ERROR EXIT
         L     R8,ADATACAT         POINT TO DATA 'RESULTS' AREA
         MVI   ENTFIND,C'D'        WANT DATA COMPONENT
         GOSUB MINORGET            FROM ASSOCIATIONS LIST
         B     ERROR7              ERROR EXIT
         L     R9,AVVRDATA         GET DATA AREA ADDRESS
         GOSUB READVVDS            GET THE VVR
         B     ERROR8              ERROR EXIT
         MVC   NAMEDATA,ENTNAME    SAVE THE NAME
         GOSUB PARSEVVR            SPLIT UP DATA VVR
         TM    AMDATTR,AMDDST      IS IS A KSDS?
         BNO   MAJORGOT            NO, SKIP INDEX PROCESSING
         SPACE 1
         L     R8,AINDXCAT         POINT TO INDEX 'RESULTS' AREA
         MVI   ENTFIND,C'I'        WANT INDEX COMPONENT
         GOSUB MINORGET            FROM ASSOCIATIONS LIST
         B     ERROR7              ERROR EXIT
         L     R9,AVVRINDX         GET INDEX AREA ADDRESS
         GOSUB READVVDS            GET THE VVR
         B     ERROR8              ERROR EXIT
         MVC   NAMEINDX,ENTNAME    SAVE THE NAME
         SPACE 2
MAJORGOT DS    0H                  HAVE NOW GOT THE IMPORTANT VVR'S
         ROUT  ,                   RETURN TO CALLER
         TITLE 'LOCATE ASSOCIATIONS LIST'
***********************************************************************
*                                                                     *
*        FIND DATA SETS ASSOCIATED WITH THIS ENTITY, FOR WHICH        *
*        THE WORK AREA IS OF THE FOLLOWING FORMAT:                    *
*                                                                     *
*        45 BYTE ENTRIES FOR EACH DATASET                             *
*                                                                     *
*           THIS FIELD IS IN THE FORMAT OF A 1 BYTE TYPE FIELD        *
*           FOLLOWED BY THE 44 BYTE DSNAME.                           *
*                                                                     *
*           TYPE FIELD                                                *
*                                                                     *
*           A - NON-VSAM                                              *
*           B - GDG BASE                                              *
*           C - CLUSTER                                               *
*           D - DATA SET                                              *
*           G - ALTERNATE INDEX                                       *
*           I - INDEX                                                 *
*           M - MASTER CATALOG                                        *
*           P - PAGE SPACE                                            *
*           R - PATH                                                  *
*           U - USER CATALOG                                          *
*           V - VOLUME                                                *
*           X - ALIAS NAME                                            *
*           Y - UPGRADE                                               *
*                                                                     *
*        CALL SVC 26 TO RETURN CLUSTER ASSOCIATIONS                   *
*                                                                     *
***********************************************************************
         SPACE 1
ASSLIST  RIN   (R2)                PROCESS VSAM ENTITY
         XC    CTGPL2,CTGPL2       ZERO PARM LIST
         MVI   CTGPL2,B'00000110'  SET CTGOPTN1
         MVI   CTGPL2+1,B'01000001' SET CTGOPTN2
         MVI   CTGPL2+2,B'10000001' SET CTGOPTN3
         LA    R1,CATENT           LOAD ADDRESS OF NAME
         ST    R1,CTGPL2+4         SET CTGENT
         LA    R1,S26CDSN          LOAD ADDRESS OF CATALOG DSN
*        ST    R1,CTGPL2+8         SAVE CTGCAT
         L     R0,SS26WRK          LOAD LENGTH OF WORK AREA
         L     R15,AS26WRK         LOAD ADDRESS OF SVC26 WORK AREA
         STH   R0,0(R15)           SAVE LENGTH AT START OF WORK AREA
         ST    R15,CTGPL2+12       SET CTGWKA
         MVI   CTGPL2+16,B'00100001' SET CTGOPTNS
         LA    R15,OPTNUM          LOAD NUMBER OF OPTIONS
         STC   R15,CTGPL2+19       SET CTGNOFLD
         LA    R14,OPTNLIST        LOAD ADDRESS OF OPTION LIST
         LA    R1,CTGPL2+28        SAVE IN CTGFIELD
         LA    R2,OPT1             LOAD ADDRESS OF OPTION NAME LIST
OPTLOOP  XC    0(24,R14),0(R14)    ZERO THE ENTRY
         MVI   0(R14),X'01'        SET FIRST FIELD
         ST    R2,8(R14)           SET ADDRESS OF OPTION NAME
         ST    R14,0(R1)           SAVE OPTNLIST ADDRESS IN CTGPL
         LA    R1,4(R1)            POINT TO NEXT OPTNLIST ADDRESS
         LA    R14,24(R14)         POINT TO NEXT ENTRY IN OPTION LIST
         LA    R2,8(R2)            POINT TO NEXT OPTION NAME
         BCT   R15,OPTLOOP         LOOP
         SPACE 3
DOS26    LA    R1,CTGPL2           LOAD ADDRESS OF WORK AREA
         SVC   26                  CALL CATALOG SEARCH FOR ENTITY
         SPACE 1
         LTR   R15,R15             TEST RETURN
         BNZ   ERROR51             BAD, PROCESS ERROR
         SPACE 1
         L     R7,OPTNLIST+68      GET LIST POINTER
         L     R5,OPTNLIST+64      GET LENGTH OF LIST
         SR    R4,R4               CLEAR EVEN REGISTER
         D     R4,=F'45'           DIVIDE BY LENGTH OF EACH ENTRY
*        LTR   R5,R5               TEST RESULT
*        BZ    ERROR5              NONE, ERROR
         ST    R7,PASCLIST         SAVE LIST POINTER
         ST    R5,LASCLIST         SAVE LIST COUNT
ASSLISTX DS     0H                 END OF SEARCH
         ROUT  ,                   RETURN TO CALLER
         TITLE 'LOCATE A MINOR ENTITY - DATA, INDEX OR PATH'
***********************************************************************
*                                                                     *
*        ON ENTRY THE ENTITY TYPE CODE HAS BEEN PLACED IN 'ENTFIND'   *
*        THIS ROUTINE WILL SCAN THE ASSOCIATIONS LIST FOR THAT TYPE   *
*        AND IF FOUND WILL INVOKE 'CATREAD' TO GET THE DETAILS.       *
*        THE ENTRY TYPE IN THE ASSOCIATIONS LIST WILL BE CONVERTED TO *
*        LOWER CASE TO NULLIFY IT WITHOUT LOSING IT.                  *
*                                                                     *
*        ERROR EXIT IS TO R4+0 IF THERE IS NO SUCH ENTRY IN THE LIST  *
*        EXIT IS TO R4+4 IF THE MINOR ENTITY HAS BEEN FOUND IN CATALOG*
*                                                                     *
***********************************************************************
         SPACE 1
MINORGET DS    0H                  PROCESS MINOR ENTITY
         SUBIN SAVE=(R4,R5)        SUBROUTINE ENTRY
         L     R7,PASCLIST         GET ASSOCIATIONS LIST POINTER
         L     R5,LASCLIST         .. AND COUNT
MINORLUP DS    0H                  LOOP THROUGH LIST
         CLC   ENTFIND,0(R7)       TEST ENTITY TYPE
         BE    MINORLUX            FOUND THE RIGHT TYPE
         LA    R7,45(,R7)          ELSE INCREMENT THE POINTER
         BCT   R5,MINORLUP         AND GO ROUND AGAIN
         SR    R14,R14             SET ERROR RETURN
         B     MINORGOT            AND EXIT
         SPACE 1
MINORLUX DS    0H                  FOUND AN ENTRY
         GOSUB READCAT             GO LINK TO CATREAD PGM
         SR    R14,R14             SET ERROR RETURN
         LTR   R15,R15             TEST RETURN CODE
         BNZ   MINORGOT            RETURN IF BAD
         NI    0(R7),B'10111111'   CONVERT TYPE TO LOWER CASE
         LA    R3,AMDSB            POINT AT AMDSBCAT AREA
         LA    R14,4               SET GOOD RETURN OFFSET
         SPACE 1
MINORGOT DS     0H                 END OF SEARCH
         SUBLR R4                  RESTORE RETURN ADDRESS
         LA    R4,0(R4,R14)        ADD RETURN OFFSET
         SUBOUT RESTORE=(R5)       RETURN TO CALLER
         TITLE 'GENERAL IDCAMS KEYWORD PROCESSING'
***********************************************************************
*        PARAMETER PROCESSING ROUTINES                                *
***********************************************************************
         SPACE 1
PNAME    DS    0H                  PROCESS PARAMETER = NAME
         RIN   ,                   SUBROUTINE ENTRY
         MVC   IDNAME,ENTNAME      CREATE 'NAME' CARD
         LA    R0,ICNAME           POINT TO NAME CARD
         GOSUB CARDOUT             GO OUTPUT NAME CARD
         SPACE 1
PNAMEX   DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PPAREN   DS    0H                  PROCESS CLOSE BRACKET
         RIN   ,                   SUBROUTINE ENTRY
         LA    R1,IDPAREN          POINT TO OUTPUT TEXT
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         SPACE 1
PPARENX  DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PMODEL   DS    0H                  PROCESS MODEL STATEMENT
         RIN   (R6)                SUBROUTINE ENTRY
         CLI   CATTYPE,C'G'        IS IT AN AIX?
         BNE   PMODELIN            NOT, TEST FOR SUPPLIED MODEL
         MVC   IDMODELN,MODELAIX   YES, COPY MODEL NAME
         B     PMODELX             GO TERMINATE FUNCTION
         SPACE 1
PMODELIN DS    0H                  PARM  PROCESSING
         CLI   MODELL,X'00'        DID HE/SHE SUPPLY A MODEL NAME?
         BE    PMODELRR            NO, TEST FOR RRDS
         MVC   IDMODELN,MODEL      YES, COPY MODEL NAME
         B     PMODELX             GO TERMINATE FUNCTION
         SPACE 1
PMODELRR DS    0H                  RRDS PROCESSING
         TM    AMDATTR,AMDRRDS     IS IT AN RRDS?
         BNO   PMODELES            NO, GO CHECK FOR ESDS
         MVC   IDMODELN,MODELRRD   YES, COPY MODEL NAME
         B     PMODELX             GO TERMINATE FUNCTION
         SPACE 1
PMODELES DS    0H                  ESDS PROCESSING
         TM    AMDATTR,AMDDST      IS IT A KSDS?
         BO    PMODELKS            YES, GO CHECK FOR SIZE
         MVC   IDMODELN,MODELESD   NO, COPY MODEL NAME
         B     PMODELX             GO TERMINATE FUNCTION
         SPACE 1
PMODELKS DS    0H                  KSDS PROCESSING
         L     R4,TOTRKSU          GET TOTAL TRACKS USED
         C     R4,KSDSMALL         IS THE FILE 'SMALL'?
         BH    PMODELMD            NO, BUT IT MIGHT BE 'MEDIUM'
         MVC   IDMODELN,MODELSML   YES, COPY MODEL NAME
         B     PMODELX             GO TERMINATE FUNCTION
PMODELMD DS    0H
         C     R4,KSDSMED          IS THE FILE 'MEDIUM'?
         BH    PMODELBG            NO, IT IS 'BIG'
         MVC   IDMODELN,MODELMED   YES, COPY MODEL NAME
         B     PMODELX             GO TERMINATE FUNCTION
PMODELBG DS    0H
         MVC   IDMODELN,MODELBIG   COPY BIG MODEL NAME
         SPACE 1
PMODELX  DS    0H                  IDCAMS PARAMETER PROCESSED
         LA    R1,IDMODEL          POINT TO MODEL KEYWORD
         GOSUB CARDPUT             GO OUTPUT MODEL CARD
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PALTIX   DS    0H                  PROCESSES UNIQUE TO ALTERNATE INDEX
         RIN   ,                   SUBROUTINE ENTRY
         MVC   IDRELTO,CLUSTER     RELATES TO ORIGINAL CLUSTER
         LA    R1,IDRELATE         POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         SPACE 1
         LA    R1,IDUPGR           ASSUME AN UPGRADE SET
         ICM   R4,B'1111',OPTNLIST+116 GET RGATTR POINTER
         BZ    ERROR9              ERROR IF NONE
         TM    0(R4),X'80'         PART OF AN UPGRADE SET?
         BO    PALTIXX             YES, OUTPUT
         LA    R1,IDNUPGR          NO, CHANGE GEAR
         SPACE 1
PALTIXX  DS    0H                  IDCAMS PARAMETER PROCESSED
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
*        DC    A(0)                ABEND S0C1                   *TEST*
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PBLDX    DS    0H                  CREATE STATEMENTS TO BUILD INDEX
         RIN   ,                   SUBROUTINE ENTRY
         MVC   IDBLDXIP,CLUSTER    RELATES TO ORIGINAL CLUSTER
         LA    R1,IDBLDX1          POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   IDBLDXOP,CATENT     NAME OF INDEX
         LA    R1,IDBLDX2          POINT TO PARAMETER
         MVI   IDDASH,C' '         DO NOT CONTINUE THIS ONE
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVI   IDDASH,C'-'         RESET CONTINUATION MARK
         SPACE 1
PBLDXX   DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PATHDEF  DS    0H                  CREATE STATEMENTS TO DEFINE PATH
         RIN   ,                   SUBROUTINE ENTRY
         LA    R1,IDPATH           POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   IDPTHAIX,CATENT     NAME OF ALTERNATE INDEX
         MVI   ENTFIND,C'R'        LOOK FOR THE PATH
         GOSUB MINORGET            FROM ASSOCIATIONS LIST
         B     ERROR7              ERROR EXIT
         GOSUB PNAME               OUTPUT 'NAME' CARD
         LA    R1,IDPTHENT         POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   CATENT,ENTNAME      GO DO SVC26 FOR PATH
         GOSUB ASSLIST             IN EXISTING CODE
         ICM   R4,B'1111',OPTNLIST+116 GET RGATTR POINTER
         BZ    ERROR9              ERROR IF NONE
         TM    0(R4),X'80'         PART OF AN UPGRADE SET?
         BO    PATHDEFX            YES, LEAVE DEFAULT (UPDATE)
         LA    R1,IDNOUPDT         NO, POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         SPACE 1
PATHDEFX DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PUNIQK   DS    0H                  CHECK FOR UNIQUEKEY
         RIN   ,                   SUBROUTINE ENTRY
         TM    AMDATTR3,AMDUNQ     IS AIX UNIQUEKEY?
         BO    PUNIQKX             NO, LEAVE THE DEFAULT (NONUNIQUEKEY)
         LA    R1,IDUNIQK          POINT TO IDCAMS PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         SPACE 1
PUNIQKX  DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PSPAN    DS    0H                  CHECK FOR SPANNED RECORDS
         RIN   (R3,R8)             SUBROUTINE ENTRY
         L     R8,ADATACAT         GET DATA ELEMENT RESULT AREA
         LA    R3,AMDSB            POINT TO AMDSB AREA
         LA    R1,IDSPAN           ASSUME IT IS SPANNED
         TM    AMDATTR,AMDSPAN     IS IT SPANNED?
         BNO   PSPANX              NO, LEAVE DEFAULT
         GOSUB CARDPUT             YES, GO OUTPUT KEYWORD CARD
         SPACE 1
PSPANX   DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PCHANGE  DS    0H                  CALCULATE VOLATILITY OF FILE
         RIN   ,                   SUBROUTINE ENTRY
***********************************************************************
* THIS INITIAL VERSION CALCULATES VARIABLES WHICH ARE SAVED AND       *
* USED IN SPACE CALCULATIONS.                                         *
*                                                                     *
***********************************************************************
         SPACE 1
* FIRST COMPUTE GROWTH PERIOD IN DAYS
         LA    R1,AMDSTSP          POINT TO TIME STAMP
         GOSUB TODDATE             GO CONVERT IT
         LA    R1,TODPTIME         POINT TO PACKED DATE
         GOSUB STDDAY11            GO GET DAY NO.
         LR    R0,R1               SAVE IT
         ZAP   DATEWORK,DSETCRDT   COPY CREATE DATE TO 4 BYTES
         LA    R1,DATEWORK         POINT TO IT
         GOSUB STDDAY11            GO GET DAY NO.
         SR    R1,R0               CALCULATE DAYS SINCE RE-ORG
         BP    *+4+4               VALUE IS VALID
         LA    R1,1                OR SET MINIMUM VALUE
         ST    R1,ACTDAYS          SAVE RESULT
         SPACE 1
* NEXT COMPUTE GROWTH IN RECORDS
         L     R1,AMDIREC          GET NO. ADDITIONS
*        S     R1,AMDDELR          LESS DELETIONS
         A     R1,AMDDELR          CALL DELETIONS CHANGE ACTIVITY
         LPR   R1,R1               IF EXCESS DELETIONS, USE THIS VALUE
         L     R14,LRECL           GET AVERAGE RECORD SIZE
         C     R14,MAXLRECL        COMPARE WITH MAXIMUM
*        BE    *+4+4               SKIP NEXT BIT IF FIXED LENGTH
         A     R1,AMDUPR           ADD UPDATE VARIABLE LENGTH RECS
         ST    R1,ACTRECS          SAVE RESULT
         SPACE 1
PCHANGEX DS    0H                  END OF THIS CALCULATION
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PSPACE   DS    0H                  DEFINE SPACE REQUIREMENTS
         RIN   (R6,R7)             SUBROUTINE ENTRY
         GOSUB PARSEVVR            GO PARSE VVR
         USING TYPE@23,R5          ESTABLISH ADDRESSABILITY
         SPACE 1
PSPACEP  DS    0H                  NOW WORK OUT SPACE PARAMETER
*        NOW ADJUST FOR 30 DAY'S GROWTH
         SR    R14,R14             CLEAR EVEN REGISTER
         L     R15,ACTRECS         GET NO. CHANGED RECORDS
         L     R4,FREORG           SET PLANNED DAYS BEFORE REORG
         MR    R14,R4              MULTIPLY TOGETHER
         LR    R4,R15              SAVE THIS VALUE
         L     R15,AMDNLR          GET NO. RECORDS
         M     R14,ACTDAYS         MULTIPLY BY AGE IN DAYS
         AR    R15,R4              ADD PREVIOUS TOTAL
         SR    R14,R14             CLEAR EVEN REG. AGAIN
         D     R14,ACTDAYS         DIVIDE BY DAYS
         LTR   R14,R14             TEST REMAINDER
         BZ    *+4+4               SKIP ROUNDING IF NONE
         LA    R15,1(,R15)         ROUND UP
         ST    R15,FACTOR1         SAVE NEW SIZE IN RECORDS
         LR    R7,R15              AND COPY IT FOR LATER
         LTR   R1,R15              COPY NO. RECORDS
         BP    *+4+4               OK IF NOT ZERO
         LA    R1,1                ELSE ALLOCATE AT LEAST ONE RECORD
         LA    R15,IDSPQNTY        POINT TO OUTPUT FIELD
         GOSUB TRIM                GO FILL IT IN
         ICM   R4,B'1111',FREORG   TEST FOR REORG=ZERO
         BZ    PSPACEX             YES,REQUEST IS FOR EXACT SPACE ONLY
         SPACE 1
* NOW CALCULATE THE INCREMENT ( 30 DAYS' GROWTH)
         LR    R1,R7               REFRESH NEW RECORD COUNT
         S     R1,AMDNLR           WHAT IS GROWTH IN RECORDS?
         BP    *+4+4               WE HAVE A VALUE
         LA    R1,1                ELSE ALLOCATE AT LEAST ONE RECORD
         MVI   0(R15),C' '         BLANK SEPARATOR
         LA    R15,1(,R15)         AND UPDATE OUTPUT POINTER
         GOSUB TRIM                GO FILL IN SECONDARY SPACE
         SPACE 1
PSPACEX  DS    0H                  IDCAMS PARAMETER PROCESSED
         MVI   0(R15),C')'         CLOSE BRACKETS
         LA    R1,IDSPACE          POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   IDSPQNTY,ICBLANK    REFRESH BLANKS
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
         DROP  R5                  END VOLUME CELL ADDRESSING
         EJECT ,
***********************************************************************
* THIS INITIAL VERSION SIMPLY CALCULATES THE PERCENTAGE GROWTH OVER   *
* THE REORG PERIOD AND USES THAT FOR CI'S AND CA'S - ASSUMES UNIFORM  *
* GROWTH AND MAY NOT BE OPTIMUM, BUT SHOULD SATISFY A LOT OF CASES.   *
***********************************************************************
         SPACE 1
PFSPC    DS    0H                  CALCULATE FREE SPACE REQUIREMENT
         RIN   ,                   SUBROUTINE ENTRY
         GOSUB IFINDEX             TEST FOR AN INDEX
         B     PFSPCX              NO, ONLY KSDS HAS FREE SPACE
         L     R1,FACTOR1          GET NEW ESTIMATE OF NO. RECORDS
         L     R0,AMDNLR           GET CURRENT RECORD COUNT
         SR    R1,R0               CALULATE DIFFERENCE
         GOSUB PERCENT0            AND CALCULATE PERCENTAGE
         C     R1,HUNDRED          TEST MAXIMUM VALUE
         BL    *+4+4               VALID, USE IT
         LA    R1,99               INVALID,USE FAKE VALUE
         LA    R15,IDFSPCCI        POINT TO OUTPUT FIELD
         GOSUB TRIM                GO FILL IT IN
         MVI   0(R15),C' '         BLANK SEPARATOR
         LA    R15,1(,R15)         AND UPDATE OUTPUT POINTER
         GOSUB TRIM                USE SAME VALUE FOR CA FREESPACE
         MVI   0(R15),C')'         CLOSE BRACKETS
         LA    R1,IDFSPC           POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   IDFSPCCI,ICBLANK    REFRESH BLANKS
         SPACE 1
PFSPCX   DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PCOMPD   DS    0H                  OUTPUT COMPONENT CARD
         RIN   ,                   SUBROUTINE ENTRY
         LA    R1,IDDATA           POINT TO 'DATA' STATEMENT
         GOSUB CARDPUT             GO OUTPUT DEFINE CARD
         SPACE 1
PCOMPDX  DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PCOMPI   DS    0H                  OUTPUT COMPONENT CARD
         RIN   ,                   SUBROUTINE ENTRY
         LA    R1,IDINDEX          POINT TO 'INDEX' STATEMENT
         GOSUB CARDPUT             GO OUTPUT DEFINE CARD
         SPACE 1
PCOMPIX  DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PEND     DS    0H                  OUTPUT TERMINATOR CARD
         RIN   ,                   SUBROUTINE ENTRY
         MVI   IDDASH,C' '         REMOVE CONTINUATION MARK
         LA    R1,IDPAREN          POINT TO END OF STATEMENTS MODEL
         GOSUB CARDPUT             GO OUTPUT DEFINE CARD
         MVI   IDDASH,C'-'         ENSURE CONTINUATION MARK
         SPACE 1
PENDX    DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PVOLS    DS    0H                  SPECIFY VOLUMES
         RIN   ,                   SUBROUTINE ENTRY
         SR    R1,R1               CLEAR WORK REG.
         LR    R0,R1               CLEAR WORK REG.
         LA    R14,6               SET MAX. ALLOWED
         ICM   R0,B'0011',NBRVOLS  PICK UP NUMBER OF VOLUMES
         CR    R0,R14              TEST IF TOO MANY
         BH    ERR10               GIVE UP IF EXCESSIVE
         LA    R14,SVOLUME         POINT TO FIRST VOLUME ENTRY
         USING S26VOLA,R14         ESTABLISH ADDRESSABILITY
         LA    R4,IDVOLIST         POINT TO VOLUME LIST
         SPACE 1
PVOLSLUP DS    0H                  COPY VOLUME SERIALS
         ICM   R15,B'1111',44(R14) ANY TRACKS USED ON THIS VOLUME?
         BZ    PVOLSINC            NO, DO NOT RE-ALLOCATE
         LA    R1,1(,R1)           INCREMENT COUNT OF VOLUMES
         MVC   0(6,R4),CVOLSER     COPY VOLUME SERIAL
         MVI   6(R4),C' '          PUT A BLANK BETWEEN
         LA    R4,7(,R4)           INCREMENT LIST POINTER
PVOLSINC DS    0H                  INCREMENT FOR NEXT VOLUME
         LA    R14,LVOLUME(,R14)   INCREMENT VOLUME SEGMENT POINTER
         BCT   R0,PVOLSLUP         AND GO ROUND FOR NEXT VOLUME
         LTR   R1,R1               DID WE USE ANY VOLUMES?
         BNZ   PVOLX               YES, CAN CLOSE THE LIST
         LA    R14,SVOLUME         NO, POINT TO FIRST VOLUME ENTRY
         MVC   0(6,R4),CVOLSER     COPY FIRST VOLUME SERIAL
         LA    R4,7(,R4)           INCREMENT LIST POINTER
         SPACE 1
PVOLX    DS    0H                  IDCAMS PARAMETER PROCESSED
         BCTR  R4,0                BACK UP OVER LAST BLANK
         MVI   0(R4),C')'          CLOSE THE BRACKETS
         LA    R1,IDVOLUME         POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   IDVOLIST,ICBLANK    REFRESH BLANKS
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
         DROP  R14                 END VOLUME ENTRY ADDRESSING
         EJECT ,
PKEYS    DS    0H                  SPECIFY THE KEY FIELD
         RIN   ,                   SUBROUTINE ENTRY
         TM    AMDATTR,AMDDST      IS IT A KEYED FILE?
         BNO   PKEYSX              NO, THIS PARAMETER NOT REQUIRED
         LA    R15,IDKEYLO         POINT TO OUTPUT AREA
         SR    R1,R1               CLEAR REGISTER
         ICM   R1,B'0011',AMDKEYLN GET KEY LENGTH
         GOSUB TRIM                WRITE IN FIELD
         MVI   0(R15),C' '         BLANK SEPARATOR
         LA    R15,1(,R15)         INCREMENT POINTER
         TM    RUNFLAG,RUNAIX      IS THIS AN ALTERNATE INDEX?
         BNO   PKEYSRKP            NO, GET KEY DATA
         ICM   R1,B'0011',AMDAKRKP GET AIX RELATIVE KEY POSITION
         B     *+4+4               SKIP PRIMARY RKP
PKEYSRKP DS    0H                  PRIMARX INDEX RKP
         ICM   R1,B'0011',AMDRKP   GET RELATIVE KEY POSITION
         GOSUB TRIM                WRITE IN FIELD
         MVI   0(R15),C')'         CLOSE BRACKETS
         LA    R1,IDKEYS           POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   IDKEYLO,ICBLANK     REFRESH BLANKS
         SPACE 1
PKEYSX   DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
PRECSZ   DS    0H                  DEFINE RECORD SIZES
         RIN   ,                   SUBROUTINE ENTRY
         GOSUB PREALSZ             CALCULATE REAL RECORD SIZE
         LA    R15,IDRECSIZ        POINT TO OUTPUT AREA
         GOSUB TRIM                WRITE AVERAGE RECORD SIZE
         MVI   0(R15),C' '         BLANK SEPARATOR
         LA    R15,1(,R15)         INCREMENT POINTER
         L     R1,MAXLRECL         GET MAX RECORD SIZE
         GOSUB TRIM                WRITE IN FIELD
         MVI   0(R15),C')'         CLOSE BRACKETS
         LA    R1,IDRECSZ          POINT TO PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         MVC   IDRECSIZ,ICBLANK    REFRESH BLANKS
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
***********************************************************************
* THIS ROUTINE CALCULATES THE REAL RECORD SIZE WE WILL USE FROM THE   *
* CURRENT VVR POINTED TO BY R9.                                       *
*        ON EXIT R1  =  RECORD SIZE                                   *
***********************************************************************
         SPACE 1
PREALSZ  DS    0H                  PROCESS REAL RECORD SIZE
         RIN   ,                   SUBROUTINE ENTRY
         SR    R1,R1               CLEAR REGISTER
         L     R1,LRECL            GET AVERAGE RECORD SIZE
         GOSUB BYTESUSE            GO FIND NO. OCCUPIED BYTES
         SR    R0,R0               CLEAR EVEN REGISTER
         D     R0,AMDNLR           DIVIDE BY NUMBER OF RECORDS
         L     R0,MAXLRECL         GET MAXIMUM RECORD LENGTH
         LR    R15,R1              SAVE THE ANSWER
         GOSUB PERCENT0            CALULATE RATIO
         C     R1,=F'88'           NEARLY THE SAME?
         BL    PREALSZX            NOT EVEN CLOSE
         LR    R15,R0              YES, SO SAY FIXED LENGTH
         SPACE 1
PREALSZX DS    0H                  RECORD SIZE KNOWN
         LR    R1,R15              RELOAD THE VALUE WE WILL USE
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
***********************************************************************
* THIS ROUTINE CALCULATES HOW MANY BYTES ARE USED FOR DATA. THIS DOES *
* INCLUDE FREE BYTES WITHIN THE CI'S, BUT IS THE BEST WE CAN DO.      *
*        ON EXIT R1  =  OCCUPIED BYTES                                *
***********************************************************************
         SPACE 1
BYTESUSE DS    0H                  SUB-ROUTINE TO CALCULATE BYTES USED
         RIN   (R5,R6,R7)          SUBROUTINE ENTRY
         GOSUB PARSEVVR            GO FIND DATASET INFO. CELL
         USING TYPE@21,R7          ESTABLISH ITS ADDRESSABILITY
         ICM   R1,B'1111',VVRDSHA  LOAD HIGH ALLOCATED RBA
         ICM   R0,B'1111',VVRDSHU  LOAD HIGH USED RBA
         SR    R1,R0               CALCULATE OVER ALLOCATED BYTES
         L     R0,AMDASPA          GET BYTES OF FREE SPACE
         SR    R0,R1               CALCULATED IMBEDDED FREE SPACE
         ICM   R1,B'1111',VVRDSHU  LOAD HIGH USED RBA
         SR    R1,R0               CALCULATE OCCUPIED BYTES
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
         DROP  R7                  END DSINFO CELL ADDRESSING
         EJECT ,
***********************************************************************
* THESE ROUTINES ARE FROM 'SERVICE', WHICH FORMED THE BASIS OF THIS   *
* PROGRAM. THEY ARE NOT USED NOW, BUT I WILL LEAVE THEM IN FOR FUTURE *
* USE OR DEVELOPMENT.                     16SEP92 CART1               *
***********************************************************************
         SPACE 1
PKEYED   DS    0H                  CHECK FOR INDEXED FILE
         RIN   ,                   SUBROUTINE ENTRY
*        PROCESS AMDATTR FLAGS TO DETERMINE D/S TYPE
         LA    R1,IDKSDS           ASSUME IT IS A KSDS
         TM    AMDATTR,AMDDST      IS IT A KSDS?
         BO    PKEYEDX             YES, CARRY ON
         LA    R1,IDRRDS           ASSUME IT IS AN RRDS
         TM    AMDATTR,AMDRRDS     IS IT AN RRDS?
         BO    PKEYEDX             YES, CARRY ON
         LA    R1,IDESDS           NO, IT MUST BE AN ESDS
         SPACE 1
PKEYEDX  DS    0H                  IDCAMS PARAMETER PROCESSED
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PIMBED   DS    0H                  CHECK FOR IMBEDDED INDEX
         RIN   ,                   SUBROUTINE ENTRY
         TM    AMDATTR,AMDSDT      IS INDEX IMBEDDED?
         BNO   PIMBEDX             NO, LEAVE THE DEFAULT (NOIMBED)
         LA    R1,IDIMBED          POINT TO IDCAMS PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         SPACE 1
PIMBEDX  DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PREPL    DS    0H                  CHECK FOR REPLICATE
         RIN   ,                   SUBROUTINE ENTRY
         TM    AMDATTR,AMDREPL     IS INDEX REPLICATED?
         BNO   PREPLX              NO, LEAVE THE DEFAULT (NOREPLICATE)
         LA    R1,IDREPL           POINT TO IDCAMS PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         SPACE 1
PREPLX   DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         EJECT ,
***********************************************************************
*        THESE PARAMETER ROUTINES USE DATA FROM THE DS. INFO CELL     *
***********************************************************************
         SPACE 1
         USING TYPE@21,R9          ESTABLISH ADDRESSABILITY
PSPEED   DS    0H                  CHECK FOR SPEED OR RECOVERY
         RIN   ,                   SUBROUTINE ENTRY
         LA    R1,IDSPEED          POINT TO IDCAMS PARAMETER
         TM    VVRATTR1,VVRA1SPD   SPEED OPTION?
         BO    PSPEEDX             YES, OUTPUT THE PARAMETER
         LA    R1,IDRECOV          NO, SET THE ALTERNATE KEYWORD
         SPACE 1
PSPEEDX  DS    0H                  IDCAMS PARAMETER PROCESSED
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
PREUSE   DS    0H                  CHECK FOR REUSE
         RIN   ,                   SUBROUTINE ENTRY
         TM    VVRATTR1,VVRA1REU   REUSE OPTION?
         BNO   PREUSEX             NO, ALLOW DEFAULT (NOREUSE)
         LA    R1,IDSPEED          POINT TO IDCAMS PARAMETER
         GOSUB CARDPUT             GO OUTPUT KEYWORD CARD
         SPACE 1
PREUSEX  DS    0H                  IDCAMS PARAMETER PROCESSED
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
         DROP  R9                  END VVR ADDRESSABILITY
         EJECT ,
***********************************************************************
*        THIS CODE LINKS TO THE 'CATREAD' PROGRAM PASSING THE         *
*        PREFORMATTED 'RESULTS' AREA.                                 *
*        ON ENTRY R7  --> ENTITY TYPE/NAME                            *
*                 R8  --> RESULTS AREA                                *
***********************************************************************
         SPACE 1
READCAT  DS    0H                  INVOKE THE CATREAD ROUTINE
         RIN   ,                   SUBROUTINE ENTRY
         LR    R1,R8               COPY RESULTS ADDRESS
         L     R0,SRESULT          GET LENGTH OF RESULT AREA
         GOSUB CLEAR               GO CLEAR ANY EXISTING DATA
         MVC   ENTYPE,0(R7)        REFRESH ENTITY TYPE
         MVC   ENTNAME,1(R7)       COPY ENTRY NAME
         LA    R15,XCATREAD        POINT TO CPB
         GOSUB CALLIT              GO EXECUTE 'CATREAD'
         SPACE 1
READCATX DS    0H                  END OF SUB-ROUTINE
         ROUT  ,                   RETURN TO CALLER
         SPACE 2
***********************************************************************
*        THIS CODE TESTS FOR AN INDEXED FILE.                         *
*        RETURN IS TO R4+0  IF NOT INDEXED                            *
*                     R4+4  IF IS INDEXED                             *
***********************************************************************
         SPACE 1
IFINDEX  DS    0H                  TEST FOR AN IDEXED FILE
         SUBIN SAVE=(R3,R8)        SUBROUTINE ENTRY
         L     R8,ADATACAT         GET DATA RESULTS AGAIN
         LA    R3,AMDSB            AND AMDSB POINTER
         TM    AMDATTR,AMDDST      TEST INDEX REQUIRED
         BNO   IFINDEXX            NO, USE RETURN + 0
         LA    R4,4(,R4)           YES, INCREMENT RETURN ADDRESS
         SPACE 1
IFINDEXX DS    0H                  INDEX STATUS KNOWN
         SUBOUT RESTORE=(R3,R8)    RETURN TO CALLER
         SPACE 2
         DROP  R3                  END AMDSBCAT ADDRESSABILITY
         EJECT ,
***********************************************************************
*        THIS CODE OUTPUTS THE IDCAMS CONTROL CARD THEN CLEARS IT     *
*        TO BLANKS READY FOR THE NEXT PARAMETER                       *
*        ON ENTRY R1 --> IDCAMS KEYWORD TABLE ENTRY                   *
***********************************************************************
         SPACE 1
CARDPUT  DS    0H                  OUTPUT IDCAMS CONTROL CARD
         RIN   ,                   SUBROUTINE ENTRY
         SR    R15,R15             CLEAR WORK REGISTER
         IC    R15,0(R1)           GET EXECUTABLE LENGTH OF KEYWORD
         EX    R15,MOVEKWD         COPY KEYWORD TO CARD
         LA    R0,ICKEYWRD         POINT TO KEYWORD CARD
         GOSUB CARDOUT             GO OUTPUT CARD
         MVC   ICKDATA,ICBLANK     BLANK MOST OF CARD
         SPACE 1
CARDPUTX DS    0H                  IDCAMS CARD PROCESSED
         ROUT  ,                   RETURN TO CALLER
         SPACE 1
MOVEKWD  MVC   IDKEYWRD(*-*),1(R1) MOVE IDCAMS KEYWORD       *EXECUTED*
         SPACE 2
***********************************************************************
*                                                                     *
*        WRITE THE IDCAMS CARD AND LIST IT ON SYSPRINT                *
*                                                                     *
***********************************************************************
         SPACE 1
CARDOUT  DS    0H                  WRITE OUTPUT
         SUBIN SAVE=(R0,R4)        SUBROUTINE ENTRY
         GOSUB WRITING             GO OUTPUT IDCAMS CARD
         LR    R4,R0               COPY CARD ADDRESS
         MVC   DETIDC,0(R4)        SO WE CAN COPY IT
         USING MDCB,R2             ESTABLISH ADDRESSABILITY
         MVC   DETDD,MDCBDDNM      TELL WHICH DDCARD GOT IT
         DROP  R2                  END MDCB ADDRESSABILITY
         LA    R0,DETAIL           POINT AT PRINT DETAIL LINE
         GOSUB PRINT               GO LIST THE CARD
         SPACE 1
CARDOUTX SUBOUT RESTORE=(R0,R4)    RETURN TO CALLER
         TITLE 'GET DATA ELEMENT VVR ENTRY'
***********************************************************************
*                                                                     *
*        ON ENTRY THE 'RESULTS' AREA HAS BEEN FILLED IN FROM THE      *
*        CATALOG. THIS ROUTINE WILL READ THE PRIMARY VVDS RECORD FROM *
*        THE FIRST VOLUME ON THE LIST.                                *
*                                                                     *
*        R9 --> AREA TO CONTAIN VVR, FIRST WORD BEING THE LENGTH      *
*        R8 --> 'RESULTS' AREA - IMPLIED ADDRESSABILITY               *
*                                                                     *
*                                                                     *
*        ERROR EXIT IS TO R4+0 IF THERE IS NO VVDS ENTRY FOR THE DATA *
*        EXIT IS TO R4+4 IF THE MINOR ENTITY HAS BEEN FOUND IN VVDS   *
*                                                                     *
***********************************************************************
         SPACE 1
READVVDS DS    0H                  PROCESS MINOR ENTITY
         SUBIN SAVE=(R4)           SUBROUTINE ENTRY
         SR    R4,R4               CLEAR A REGISTER
         ST    R4,AVVR@21          ZEROISE DS INFO CELL
         ST    R4,AVVR@23          ZEROISE VOL INFO CELL
         LA    R4,SVOLUME+CVOLSER-S26VOLA  FIRST VOLUME ENTRY
         ST    R4,VVRPVOL          STORE IN PARAMETER LIST
         LA    R4,ENTNAME          POINT TO ENTITY NAME
         ST    R4,VVRPNAME         STORE IN PARAMETER LIST
         ST    R9,VVRPWORK         STORE OUTPUT ADDRESS IN LIST
         LA    R1,VVRPARMS         POINT TO PARAMETER LIST
         LA    R15,XGETVVR         POINT PROGRAM CONTROL BLOCK
         GOSUB CALLIT              GO INVOKE GETVVR
         SR    R14,R14             SET ERROR RETURN
         LTR   R15,R15             TEST RETURN CODE
         BNZ   READVVDX            RETURN IF BAD
         LA    R14,4               SET GOOD RETURN
         SPACE 1
READVVDX DS     0H                 END OF SEARCH
         SUBLR R4                  RELAOD RETURN ADDRESS
         LA    R4,0(R4,R14)        ADD RETURN OFFSET
         SUBOUT ,                  RETURN TO CALLER
         TITLE 'SPLIT VVR RECORD INTO CELLS'
         COPY  PARSEVVR            INCLUDE VVR ANALYSIS CODE
         TITLE 'ERROR HANDLING ROUTINES'
ERROR0   DS    0H                  EXCESSIVE PARM LENGTH
         LA    R0,ERROR0M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR1   DS    0H                  NO INPUT PARAMETERS
         LA    R0,ERROR1M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR2   DS    0H                  INVALID INPUT KEYWORD
         MVC   ERR2KEY,WORKKEY     COPY DUFF PARAMETER
         LA    R0,ERROR2M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR3   DS    0H                  NO INPUT VALUE
         MVC   ERR3KEY,WORKKEY     COPY DUFF PARAMETER
         LA    R0,ERROR3M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR4   DS    0H                  PARAMETER TOO LONG
         MVC   ERR4KEY,WORKKEY     COPY DUFF PARAMETER
         LA    R0,ERROR4M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR51  DS    0H                  NON-ZERO CATALOG RETURN CODE
         LR    R8,R0               SAVE REGISTER ZERO
         CVD   R15,DWORK           CONVERT RETURN CODE
         UNPK  ERR5RC,DWORK+6(2)   COPY INTO MESSAGE ..
         OI    ERR5RC+2,X'F0'      MAKE PRINTABLE
         SPACE 1
ERROR5   DS    0H                  NO CATALOG ENTRY
         MVC   ERR5DSN,CLUSTER     COPY DUFF PARAMETER
         LA    R0,ERROR5M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         EJECT ,
ERROR6   DS    0H                  NOT A CLUSTER
         MVC   ERR6DSN,CLUSTER     COPY DUFF PARAMETER
         LA    R0,ERROR6M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR7   DS    0H                  CANNOT LOCATE COMPONENT
         MVC   ERR7TYP,ENTFIND     COPY DUFF PARAMETER
         LA    R0,ERROR7M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR8   DS    0H                  CANNOT LOCATE COMPONENT
         MVC   ERR8DSN,ENTNAME     COPY DUFF PARAMETER
         MVC   ERR8VOL,SVOLUME+CVOLSER-S26VOLA AND VOLUME
         LA    R0,ERROR8M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERROR9   DS    0H                  CANNOT SAY IF AIX IS UPGRADE
         LA    R0,ERROR9M1         POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 1
ERR10    DS    0H                  TOO MANY VOLUMES
         MVC   ERR10ENT,ENTNAME    COPY DUFF PARAMETER
         LA    R15,ERR10VOL        POINT TO MESSAGE FIELD
         GOSUB TRIM                GO FILL IT IN
         LA    R0,ERR10M1          POINT AT MESSAGE
         B     ERRSTOP             GO TO PREMATURE END
         SPACE 2
ERRSTOP  DS    0H                  TERMINATING BECAUSE OF ERRORS
         GOSUB PRINT               PRINT FAILURE EXPLANATION
         LA    R0,ERRSTOPM         SAY WE ARE STOPPING NOW
         GOSUB PRINT               PRINT IT IF YOU CAN
         DC    A(0)                ABEND S0C1                   *TEST*
         LA    R15,16              SET RETURN CODE VALUE
         STH   R15,COMPCODE        SAVE IT
         B     STOPPGM             TERMINATE PROCESSING
         TITLE 'SUB-ROUTINES'
         COPY TRIM                 INCLUDE STANDARD DATA EDITING
         SPACE 2
         COPY CONVWORD             INCLUDE STANDARD DATA CONVERSION
         EJECT
         COPY WRITING              INCLUDE OUTPUT PROCESSING
         EJECT
         COPY PRINT                INCLUDE PRINT MECHANISM
         EJECT
         COPY PUTMOVE              INCLUDE STANDARD I/O HANDLER
         EJECT
         COPY BLKSZRTN             INCLUDE DEFAULT BLOCKSIZE ROUTINE
         EJECT ,
         COPY TESTDD               INCLUDE DD CARD CHECK CODE
         EJECT ,
         COPY JFCBREAD             INCLUDE READJFCB CODE
         EJECT
         COPY OPENEM               INCLUDE STANDARD OPEN LOOP
         EJECT ,
         COPY CLOSEM               INCLUDE STANDARD CLOSE LOOP
         EJECT
         COPY OPENCLOS             INCLUDE STANDARD OPEN/CLOSE CODE
         EJECT
         COPY GETSTORE             INCLUDE STANDARD GETMAIN ROUTINE
         EJECT
         COPY CLEAR                INCLUDE STANDARD STORAGE CLEAR RTN
         SPACE 2
         COPY BLANK                INCLUDE STANDARD STORAGE CLEAR RTN
         EJECT
         COPY CALLIT               INCLUDE STANDARD PROGRAM MANAGEMENT
         EJECT ,
         COPY  PERCENT0            INCLUDE STANDARD PERCENTAGE ROUTINE
         EJECT
         COPY STDDAY11             INCLUDE STANDARD DAY NUMBER CODE
         EJECT
         COPY TODDATE              INCLUDE STANDARD TIME/DATE PROCESS
         TITLE 'DATA AREAS'
BEGSNAP  DS    0D                  SNAP DATA AREAS FOLLOWING
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         SPACE 2
ARESULT  DC    A(0)                ADDRESS OF RESULTS AREA - CLUSTER
ADATACAT DC    A(0)                RESULTS AREA FOR DATA COMPONENT
AINDXCAT DC    A(0)                RESULTS AREA FOR INDEX COMPONENT
SRESULT  DC    F'5120'             SIZE OF RESULTS AREA
AS26WRK  DC    A(0)                ADDRESS OF SVC26 WORK AREA
SS26WRK  DC    F'20480'            SIZE OF SVC26 WORK AREA
AVVRDATA DC    A(0)                ADDRESS OF DATA VVR RECORD AREA
AVVRINDX DC    A(0)                ADDRESS OF INDEX VVR RECORD AREA
SVVRWRK  DC    F'2048'             SIZE OF VVR RECORD AREA
AVVR@21  DC    A(0)                ADDRESS OF VVR DS INFO CELL
AVVR@23  DC    A(0)                ADDRESS OF VVR VOL INFO CELL
LASCLIST DC    A(0)                SAVE AREA FOR COUNT OF ASSOCIATIONS
PASCLIST DC    A(0)                SAVE AREA FOR LIST OF ASSOCIATIONS
LASCSAVE DC    A(0)                SAVE AREA FOR CLUSTER ASSOCIATIONS
PASCSAVE DC    A(0)                SAVE AREA FOR CLUSTER ASSOCIATIONS
ACTDAYS  DC    A(0)                DAYS OF ACTIVITY
ACTRECS  DC    A(0)                NO. RECORD CHANGES
FACTOR1  DC    A(0)                NO. RECORDS IN NEW FILE
FREORG   DC    A(30)               DAYS BETWEEN REORGS - DEFAULT MONTH
DWORK    DC    D'0'                DOUBLEWORD WORK AREA
ZEROWORD DC    F'0'                A LOT OF NOTHING
COMPCODE DC    H'0'                PROGRAM COMPLETION CODE
MAXLEN   DC    H'128'              MAXIMUM STRING LENGTH
CONVWORK DC    CL15' '             CHARACTER WORK AREA
DATEWORK DC    PL4'0'              COPY DATE HERE FOR CONVERSION
         SPACE 1
ONE      DC    PL1'1'              COUNT INCREMENT
SIGN     EQU   X'F0'               POSITIVE PACKED SIGN
         SPACE 1
REPTCOUN DC    PL2'0'              COUNT OF REPORTS
PAGECOUN DC    PL2'0'              COUNT OF PAGES
LINECOUN DC    PL2'60'             COUNT OF LINES
MAXLINE  DC    PL2'56'             MAXIMUM NUMBER OF LINES PER PAGE
         SPACE 1
RUNFLAG  DC    X'00'               RUN TIME FLAG BYTE
RUNAIX   EQU   X'80'               PROCESSING AN ALTERNATE INDEX
PARMCARD DC    CL100' '            AREA FOR PARM DATA
LENPARM  EQU   L'PARMCARD          MAX. ALLOWED PARM LENGTH
SVC26DSN DS    0CL45               NAME PASSED TO SVC26
CLUSTERL DC    X'00'               LENGTH OF CLUSTER NAME
CLUSTER  DC    CL44' '             NAME OF CLUSTER TO PROCESS
MODELL   DC    X'00'               LENGTH OF MODEL NAME
MODEL    DC    CL44' '             NAME OF MODEL TO USE
         DS    0F                  ALIGNMENT
OPTNLIST DC    (OPTNUM)CL24' '     SVC26 OPTION LIST
CTGPL2   DC    XL68'00'            CATALOG MANAGEMENT PARAMETER LIST
         EJECT ,
S26CDSN  DC    CL44' '             CATALOG DSNAME
SAVEENT  DC    CL44' '             ORIGINAL CATALOG ENTRY NAME
ENTFIND  DC    CL1' '              CATALOG ENTRY TYPE TO SEARCH FOR
CATTYPE  DC    CL1' '              CATALOG ENTRY TYPE OF CATENTRY
CATENT   DC    CL44' '             CATALOG ENTRY NAME
CATNAME  DC    CL44' '             CATALOG NAME
NAMEDATA DC    CL44' '             DATA COMPONENT NAME
NAMEINDX DC    CL44' '             INDEX COMPONENT NAME
CATACBA  DC    F'0'                ADDRESS OF CATALOG ACB
         SPACE 1
MODELAIX DC    CL44'SYS2.P000KC00.AIX'    MODEL AIX NAME
MODELESD DC    CL44'SYS2.P000EC00.MITTEL' MODEL ESDS NAME
MODELBIG DC    CL44'SYS2.P000KC00.GROSS'  MODEL NAME OF BIG KSDS
MODELMED DC    CL44'SYS2.P000KC00.MITTEL' MODEL NAME MEDIUM KSDS
MODELSML DC    CL44'SYS2.P000KC00.KLEIN'  MODEL NAME SMALL KSDS
MODELRRD DC    CL44'SYS2.P000RC00.MITTEL' MODEL RRDS NAME
         SPACE 1
KSDSMALL DC    A(30)               MAX. SIZE OF A 'SMALL' KSDS (TRACKS)
KSDSMED  DC    A(120)              MAX. SIZE OF A 'MEDIUM' KSDS
         SPACE 1
XCATREAD CPB   CATREAD             CONTROL BLOCK FOR 'CATREAD'
XGETVVR  CPB   GETVVR              CONTROL BLOCK FOR GETVVR
VVRPARMS DS    0F                  GETVVR PARAMETER LIST
VVRPVOL  DC    A(0)                POINTER TO VOLUME SERIAL
VVRPNAME DC    A(0)                POINTER TO ENTITY NAME
VVRPWORK DC    A(0)                POINTER TO WORK AREA
         SPACE 1
         RIN   GENERATE            SUB-ROUTINE REGISTER SAVE AREA
         EJECT ,
***********************************************************************
*        CATALOG LOCATE OPTIONS LIST                                  *
***********************************************************************
OPT1     DC    CL8'ENTYPE  '
OPT2     DC    CL8'ENTNAME '
OPT3     DC    CL8'NAMEDS  '
OPT4     DC    CL8'AMDSBCAT'
OPT5     DC    CL8'RGATTR  '
         SPACE 1
OPTLEN   EQU   *-OPT1              LENGTH OF LIST
OPTNUM   EQU   OPTLEN/8            NUMBER OF ENTRIES
         EJECT ,
***********************************************************************
*        PROCESSING OPTIONS LISTS                                     *
***********************************************************************
         SPACE 1
LPCLUST  DC    A(PNAME)            PROCESS LIST FOR CLUSTERS
         DC    A(PSPAN)            DEFINE IF SPANNED
         DC    A(PDATA)            PROCESS DATA ELEMENTS (--> LPDATA)
         DC    A(PINDEX)           PROCESS INDEX ELEMENTS (--> LPINDEX)
         DC    A(PEND)             TERMINATE DEFINITION
         DC    A(0)                END OF LIST
         SPACE 1
LPAIX    DC    A(PNAME)            PROCESS LIST FOR ALTERNATE INDEX
         DC    A(PALTIX)           SPECIFIC PARAMETERS
         DC    A(PDATA)            PROCESS DATA ELEMENTS (--> LPDATA)
         DC    A(PUNIQK)           PROCESS PARAMETER = UNIQUEKEY
         DC    A(PINDEX)           PROCESS INDEX ELEMENTS (--> LPINDEX)
         DC    A(PEND)             TERMINATE DEFINITION
         DC    A(PBLDX)            BUILD THE INDEX
         DC    A(PATHDEF)          DEFINE THE PATH
         DC    A(PEND)             TERMINATE DEFINITION
         DC    A(0)                END OF LIST
           SPACE 1
LPDATA   DS    0F                  PROCESS LIST FOR DATA ELEMENTS
         DC    A(PMODEL)           PROCESS MODEL DEFINITION
         DC    A(PPAREN)           CLOSE BRACKETS
         DC    A(PCOMPD)           PROCESS COMPONENT TYPE
         DC    A(PNAME)            PROCESS COMPONENT NAME
*        DC    A(PSPEED)           PROCESS PARAMETER = SPEED
*        DC    A(PREUSE)           PROCESS PARAMETER = REUSE
         DC    A(PKEYS)            PROCESS PARAMETER = KEYSIZE
         DC    A(PRECSZ)           PROCESS PARAMETER = RECORDSIZE
         DC    A(PCHANGE)          CALCULATE VOLATILITY
         DC    A(PSPACE)           PROCESS SPACE REQUIREMENT
         DC    A(PFSPC)            PROCESS FREESPACE REQUIREMENT
         DC    A(PVOLS)            PROCESS PARAMETER = VOLUME
*        DC    A(PCISIZE)          PROCESS PARAMETER = CISIZE
         DC    A(0)                END OF LIST
         SPACE 1
LPINDEX  DS    0F                  PROCESS LIST FOR INDEX ELEMENTS
         DC    A(PPAREN)           CLOSE BRACKETS
         DC    A(PCOMPI)           PROCESS COMPONENT TYPE
         DC    A(PNAME)            PROCESS COMPONENT NAME
         DC    A(PCHANGE)          CALCULATE VOLATILITY
*        DC    A(PSPACE)           PROCESS SPACE REQUIREMENT
         DC    A(PVOLS)            PROCESS PARAMETER = VOLUME
*        DC    A(PIMBED)           PROCESS PARAMETER = IMBED
*        DC    A(PREPL)            PROCESS PARAMETER = REPLICATE
*        DC    A(PREUSE)           PROCESS PARAMETER = REUSE
         DC    A(0)                END OF LIST
         TITLE 'IDCAMS SKELETON CARDS'
***********************************************************************
*        IDCAMS CARDS ARE 80 BYTE AREAS NAMED IC.....                 *
*        THE PARAMETERS ARE FIELDS NAMED ID......                     *
***********************************************************************
         SPACE 1
COMMON   EQU   2,2                 COMMENT OPEN POSITION
COMMOFF  EQU   68,2                COMMENT CLOSE POSITION
COMMOPEN DC    CL2'/*'             COMMENT BEGIN
COMMCLOS DC    CL2'*/'             COMMENT END
ICBLANK  DC    CL80' '             A BLANK CARD
         SPACE 1
*IDCAMS------------------------------------------------------------NAME
ICNAME   DS    0CL80               'NAME' CARD                       00
         DC    CL1' '              PADDING                           01
         DC    CL2' '              BLANKS OR COMMENT                 02
         DC    CL1' '              PADDING                           04
         DC    CL6'NAME ('                                           05
IDNAME   DC    CL44' '             ENTITY NAME                       11
         DC    CL12' )'                                              55
         DC    CL2' '              BLANKS OR COMMENT                 67
         DC    CL2' '              PADDING                           69
         DC    CL10'-'             CONTINUED IN OUR NEXT             71
         SPACE 1
         SPACE 1
*IDCAMS---------------------------------------------------------KEYWORD
ICKEYWRD DS    0CL80               A CARD BEARING ONE IDCAMS KEYWORD 00
ICKDATA  DS    0CL70               DATA BEARING AREA                 00
         DC    CL1' '              PADDING                           01
         DC    CL2' '              BLANKS OR COMMENT                 02
         DC    CL1' '              PADDING                           04
IDKEYWRD DC    CL62' '             SPACE FOR KEYWORD                 05
         DC    CL1' '              PADDING                           67
         DC    CL2' '              BLANKS OR COMMENT                 68
         DC    CL1' '              PADDING                           70
IDDASH   DC    CL1'-'              CONTINUED IN OUR NEXT             71
         DC    CL9' '              PADDING                           72
         TITLE 'IDCAMS KEYWORDS'
***********************************************************************
*        THE PARAMETERS ARE FIELDS NAMED ID......                     *
*        EACH ENTRY IN THIS TABLE CONSISTS OF A ONE BYTE EXECUTABLE   *
*        LENGTH FOLLOWED BY THE KEYWORD.                              *
***********************************************************************
         SPACE 1
*        END OF STATEMENTS
IDPAREN  DC    AL1(1),CL2') '      CLOSE BRACKETS
*        DELETE THE ENTRY
IDELETE  DC    AL1(55),CL10'DELETE   (' CLUSTER TO DELETE
IDELCLUS DC    CL44' '             CLUSTER NAME
         DC    CL2') '             CLOSE BRACKET
*        DEFINE CLUSTER KEYWORD
IDCLUST  DC    AL1(16),CL17'DEFINE CLUSTER ( ' COMPONENT
*        DEFINE 'DATA' KEYWORD
IDDATA   DC    AL1(6),CL7'DATA ( ' COMPONENT
*        DEFINE 'INDEX' KEYWORD
IDINDEX  DC    AL1(6),CL7'INDEX ( ' COMPONENT
*        DEFINE ALTERNATE INDEX KEYWORDS
IDAIX    DC    AL1(22),CL23'DEFINE ALTERNATEINDEX ( ' COMPONENT
*        DEFINE PATH KEYWORDS
IDPATH   DC    AL1(11),CL12'DEFINE PATH(' COMPONENT
*        DEFINE PATHENTRY
IDPTHENT DC    AL1(55),CL10'PATHENTRY(' CLUSTER FOR THE PATH
IDPTHAIX DC    CL44' '             AIX NAME
         DC    CL2') '             CLOSE BRACKET
*        DEFINE MODEL FOR THIS DEFINITION
IDMODEL  DC    AL1(51),CL6'MODEL('
IDMODELN DC    CL44' '             MODEL NAME
         DC    CL2' )'             CLOSE BRACKET
*        DEFINE VOLUMES
IDVOLUME DC    AL1(45),CL4'VOL('
IDVOLIST DC    CL42' '             SPACE FOR VOLUMES
*        DEFINE RELATIONSHIP
IDRELATE DC    AL1(52),CL7'RELATE('
IDRELTO  DC    CL44' '             CLUSTER NAME
         DC    CL2') '             CLOSE BRACKET
*        DEFINE KEYSIZE
IDKEYS   DC    AL1(46),CL5'KEYS('
IDKEYLO  DC    CL42' '             KEY LENGTH AND OFFSET
*        DEFINE RECORD SIZE
IDRECSZ  DC    AL1(24),CL11'RECORDSIZE('
IDRECSIZ DC    CL14' '             AVERAGE AND MAXIMUM
*        DEFINE SPACE REQUEST
IDSPACE  DC    AL1(45)             EXECUTABLE LENGTH OF KEYWORD VALUE
IDSPUNIT DC    CL3'REC'            ALLOCATE IN RECORDS
         DC    CL1'('              OPEN BRACKET
IDSPQNTY DC    CL42' '             AMOUT OF SPACE REQUIRED
*        DEFINE FREESPACE REQUEST
IDFSPC   DC    AL1(24)             EXECUTABLE LENGTH OF KEYWORD VALUE
         DC    CL10'FREESPACE('    PARAMETER
IDFSPCCI DC    CL15' '             AMOUT OF CI FREESPACE, CA FOLLOWS
*        POSSIBLE VALUES FOR TYPE - LINEAR DATASETS NOT SUPPORTED
IDKSDS   DC    AL1(6),CL7'INDEXED' KSDS TYPE VALUE
IDESDS   DC    AL1(9),CL10'NONINDEXED' ESDS TYPE VALUE
IDRRDS   DC    AL1(7),CL8'NUMBERED' RRDS TYPE VALUE
*        POSSIBLE VALUES FOR SPEED
IDSPEED1 DC    AL1(4),CL5'SPEED'   SPEED OPTION
IDSPEED2 DC    AL1(7),CL8'RECOVERY' RECOVERY OPTION
*        POSSIBLE VALUES FOR REUSE
IDREUSE1 DC    AL1(4),CL5'REUSE'   REUSE OPTION
IDREUSE2 DC    AL1(6),CL7'NOREUSE' NOREUSE OPTION
*        POSSIBLE VALUES FOR SPANNED
IDSPAN   DC    AL1(6),CL7'SPANNED'   SPANNED OPTION
IDNSPAN  DC    AL1(9),CL10'NONSPANNED' NONSPANNED OPTION
*        IMBED OPTION - NOIMBED IS DEFAULT
IDIMBED  DC    AL1(4),CL5'IMBED'     IMBED OPTION
*        REPLICATE OPTION - NOREPLICATE IS DEFAULT
IDREPL   DC    AL1(8),CL9'REPLICATE' REPLICATE OPTION
*        UNIQUEKEY OPTION - NONUNIQUEKEY IS DEFAULT
IDUNIQK  DC    AL1(8),CL9'UNIQUEKEY' UNIQUEKEY OPTION
*        DEFINE BUILDINDEX STATEMENT 1
IDBLDX1  DC    AL1(57)             EXECUTABLE LENGTH OF KEYWORD VALUE
         DC    CL13'BLDINDEX IDS(' PARAMETER
IDBLDXIP DC    CL44' '             INDATASET NAME
         DC    CL1')'              CLOSE BRACKET
*        DEFINE BUILDINDEX STATEMENT 2
IDBLDX2  DC    AL1(57)             EXECUTABLE LENGTH OF KEYWORD VALUE
         DC    CL13'         ODS(' PARAMETER NICELY LINED UP
IDBLDXOP DC    CL44' '             OUTDATASET NAME
         DC    CL1')'              CLOSE BRACKET
*        POSSIBLE VALUES FOR UPGRADE
IDUPGR   DC    AL1(6),CL7'UPGRADE'   UPGRADE OPTION
IDNUPGR  DC    AL1(8),CL9'NOUPGRADE' NOUPGRADE OPTION
*        NON-DEFAULT VALUE FOR UPDATE
IDNOUPDT DC    AL1(7),CL8'NOUPDATE'  NON-UPDATE PATH
*        POSSIBLE VALUES FOR SPEED
IDSPEED  DC    AL1(4),CL5'SPEED'     SPEED OPTION
IDRECOV  DC    AL1(7),CL8'RECOVERY'  OR RECOVERY OPTION
         TITLE 'REPORT LINES'
***********************************************************************
*        REPORT LINE SKELETONS                                        *
***********************************************************************
         SPACE 1
TITLE1   DS    0CL133              START OF PAGE HEADER CC
         DC    CL1'1'              ASA SKIP TO PAGE             1
         DC    CL50' '             PADDING                      2
         DC    CL16'SPRECHER ENERGIE'                          52
         DC    CL24' '             PADDING                     68
HEADDATE DC    CL9' '              REPORT DATE                 92
         DC    CL8' '              PADDING                    101
HEADTIME DS    0CL5                TIME OF REPORT             109
HEADHH   DC    CL2' '              HOUR OF REPORT             109
         DC    CL1'.'              SEPARATOR                  111
HEADMM   DC    CL2' '              MINUTE OF REPORT           112
         DC    CL10' '             PADDING                    113
         DC    CL4'PAGE'                                      123
HEADPAGE DC    CL4'0000'           PAGE NUMBER                127
         DC    CL3' '              PADDING                    131
         SPACE 2
SUBTITLE DS    0CL133              COLUMN HEADINGS
         DC    CL1'0'              ASA SKIP 2                   1
         DC    CL40' '             PADDING                      2
         DC    CL38'*  VSAM CLUSTER DEFINITION UTILITY   *'    42
         DC    CL53' '             PADDING                     80
         EJECT
PARMLINE DS    0CL133              REPEAT THE PARM
         DC    CL1' '              ASA SKIP 1                   1
         DC    CL20'    PARM SUPPLIED = '                       2
LISTPARM DC    CL100' '            PARM FIELD                  22
         DC    CL12' '             PADDING                    122
         EJECT
DETAIL   DS    0CL133              COLUMN ENTRIES
         DC    CL1' '              ASA SKIP 1                   1
         DC    CL2'*-'             DECORATION                   2
DETDD    DC    CL8' '              FILE DDNAME                  4
         DC    CL14'------------->' DECORATION                 12
DETIDC   DC    CL80' '             IDCAMS CARD IMAGE           26
         DC    CL14'<-------------' DECORATION                106
         DC    CL14'* '            PADDING                    120
         SPACE 2
PSUMLINE DS    0CL133              PRINT SUMMARY LINE (LAST LINE)
         DC    CL1'0'              ASA SKIP 2                   1
         DC    CL128' '                                         2
         DC    CL4' '              PADDING                    130
         SPACE 1
EDITPL2  DC    X'40202120'         COPIES EDIT MASK
EDITPL4  DC    X'4020202020202120' COUNT EDIT MASK
EDITPL8  DC    X'40202020202020202020202020202120' COUNT EDIT MASK
         TITLE 'ERROR MESSAGES'
ERROR0M1 DS    0CL133              ERROR 0 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL132'EMTP000E PARM FIELD TOO LONG'              2
         SPACE 2
ERROR1M1 DS    0CL133              ERROR 1 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL132'EMTP001E NO VALID CONTROL STATEMENT'       2
         SPACE 2
ERROR2M1 DS    0CL133              ERROR 2 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP002E'                                    2
         DC    CL3' '              PADDING                     10
ERR2KEY  DC    CL8' '              INVALID KEYWORD             13
         DC    CL112' IS NOT A VALID KEYWORD'                  21
         SPACE 2
ERROR3M1 DS    0CL133              ERROR 3 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP003E'                                    2
         DC    CL3' '              PADDING                     10
ERR3KEY  DC    CL8' '              INVALID KEYWORD             13
         DC    CL112' VALUE NOT SUPPLIED'                      21
         SPACE 2
ERROR4M1 DS    0CL133              ERROR 4 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP004E'                                    2
         DC    CL3' '              PADDING                     10
ERR4KEY  DC    CL8' '              INVALID KEYWORD             13
         DC    CL112' PARAMETER VALUE EXCEEDS MAXIMUM LENGTH'  21
         SPACE 2
ERROR5M1 DS    0CL133              ERROR 5 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP005E'                                    2
         DC    CL3' '              PADDING                     10
ERR5DSN  DC    CL44' '             INVALID KEYWORD             13
         DC    CL20'NOT FOUND IN CATALOG'                      57
         DC    CL1' '              PADDING                     77
ERR5RC   DC    CL3' '              CATALOG RETURN CODE         78
         DC    CL52' '             PADDING                     81
         SPACE 2
ERROR6M1 DS    0CL133              ERROR 6 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP006E'                                    2
         DC    CL3' '              PADDING                     10
ERR6DSN  DC    CL44' '             INVALID KEYWORD             13
         DC    CL76'IS NOT A CLUSTER'                          57
         EJECT ,
ERROR7M1 DS    0CL133              ERROR 7 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP007E'                                    2
         DC    CL2' '              PADDING                     10
         DC    CL10'DATA TYPE '                                12
ERR7TYP  DC    CL1' '              INVALID KEYWORD             22
         DC    CL110' CANNOT BE FOUND'                         23
         SPACE 2
ERROR8M1 DS    0CL133              ERROR 8 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP008E'                                    2
         DC    CL3' '                                          10
ERR8DSN  DC    CL44' '             DSNAME                      13
         DC    CL22' FAILURE ON VVDS FOR '                     57
ERR8VOL  DC    CL6' '              VOLUME SERIAL               79
         DC    CL48' '                                         85
         SPACE 2
ERROR9M1 DS    0CL133              ERROR 9 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL132'EMTP009E NO AIX UPGRADE FLAG FOUND'        2
         SPACE 2
ERR10M1  DS    0CL133              ERROR 10 MESSAGE 1
         DC    CL1' '              ASA SKIP 1 LINE              1
         DC    CL8'EMTP010E'                                    2
         DC    CL3' '                                          10
ERR10ENT DC    CL44' '             ENTITY NAME                 13
         DC    CL5' HAS '                                      57
ERR10VOL DC    CL2' '              NO. VOLUMES                 62
         DC    CL70' VOLUMES. MAXIMUM ALLOWED IS 6.'           64
         SPACE 2
ERRSTOPM DS    0CL133              TERMINATING ON ERROR MESSAGE
         DC    CL1'-'              ASA SKIP 3 LINES             1
         DC    CL132'EMPT999E PROGRAM TERMINATED WITH RC 16'    2
         TITLE 'LITERAL POOL'
***********************************************************************
*        LITERAL POOL                                                 *
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL GOES HERE
         TITLE 'DCB''S AND I/O CONTROL TABLES'
***********************************************************************
*        DCB'S TABLE                                                  *
***********************************************************************
         SPACE 1
DCBTABLE DS    0F
DEFINESW DC    X'00',AL3(DEFINE)
         DC    CL8'DEFINE'
         DC    CL8'OUTPUT'
         DC    CL8'LEAVE'
         DC    PL8'0'
DCBNTRY  EQU   *-DCBTABLE          LENGTH OF ONE TABLE ELEMENT
PRINTSW  DC    X'00',AL3(SYSPRINT)
         DC    CL8'SYSPRINT'
         DC    CL8'OUTPUT'
         DC    CL8'LEAVE'
         DC    PL8'0'
OPENSIZE EQU   *-DCBTABLE          TABLE SIZE OF FULL TIME FILES
MAXOPEN  EQU   OPENSIZE/DCBNTRY    MAXIMUM NUMBER OF DCB'S TO OPEN
         SPACE 1
AIXSW    DC    X'00',AL3(AIX)
         DC    CL8'AIX'
         DC    CL8'OUTPUT'
         DC    CL8'LEAVE'
         DC    PL8'0'
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUM NUMBER OF DCB'S
         SPACE 2
EXITLIST DC    X'05',AL3(BLKSZRTN) ENTRY FOR DCB MODIFICATION
         DC    X'87',AL3(IHAJFCB)  ENTRY FOR JFCBREAD
         SPACE 2
         EJECT ,
***********************************************************************
*        DATA CONTROL BLOCKS                                          *
***********************************************************************
         SPACE 1
DEFINE   DCB   DDNAME=DEFINE,                                          *
               DSORG=PS,                                               *
               RECFM=FB,LRECL=80,                                      *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
AIX      DCB   DDNAME=AIX,                                             *
               DSORG=PS,                                               *
               RECFM=FB,LRECL=80,                                      *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
SYSPRINT DCB   DDNAME=SYSPRINT,                                        *
               DSORG=PS,                                               *
               RECFM=FBA,LRECL=133,                                    *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 3
SNAPDCB  DCB   DDNAME=SNAP,DSORG=PS,MACRF=W,                           *
               RECFM=VBA,LRECL=125,BLKSIZE=882
         TITLE 'WTO MESSAGE SKELETONS'
EMPTOR01 WTO   'EMPTOR01 RECORDS 999,999,999 IN, 999,999,999 OUT',     X
               ROUTCDE=(11),MF=L   ROUTE TO LOG
         SPACE 1
*        OFFSETS IN MESSAGE DATA LINES
         SPACE 1
MSG01NUM EQU   EMPTOR01+4,8        MESSAGE NUMBER
MSG01IN  EQU   EMPTOR01+4+16,12    INPUT COUNT
MSG01OUT EQU   EMPTOR01+4+32,12    OUTPUT COUNT
MSG01MSK DC    X'402020206B2020206B202120' COUNT EDIT MASK
         SPACE 2
WTOIOE   DS    0F
         DC    AL2(WTOEND-*),H'0',CL109'******** - I/O ERROR -'
WTOEND   EQU       *
         TITLE 'JFCB AREA'
***********************************************************************
*        JOB FILE CONTROL BLOCK STORAGE                               *
***********************************************************************
         SPACE 1
IHAJFCB  DS    0CL176              JFCB AREA
         IEFJFCBN
         SPACE 3
EOSNAP   DS    0H                  END OF STORAGE AREA TO BE SNAPPED
         TITLE 'DSECT MAPS'
         COPY  RESULTS             INCLUDE CATREAD PARAMETER AREA
         EJECT
         COPY  AMDSB               INCLUDE AMDSBCAT MAPPING
         EJECT
         COPY  S26VOLA             COPY ENTVOL MAPPING
         EJECT
         COPY  VVRDSECT            COPY VVR MAPPING
         EJECT
         COPY  MDCB                INCLUDE DD TABLE ENTRY
         SPACE 2
         CPB   DSECT               MAP CALLED PROGRAM BLOCK
         EJECT
         PUSH PRINT                SAVE PRINT VALUES
         PRINT GEN                 SHOW MACRO EXPANSION
ICFCAT   DSECT ,                   DUMMY SECTION DEFINITION
         #CTGPL                    MAP CATALAOG PARAMETER LIST
         POP   PRINT               RESTORE PRINT VALUES
         EJECT
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT ON,NOGEN            SYSTEM DSECT EXPANSION OPTION
         DCBD  DSORG=PS,DEVD=DA    DCB DSECT
         SPACE 3
         POP   PRINT               RESTORE PRINT STATUS
         END
