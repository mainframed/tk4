* THIS PROGRAM IS COURTESY OF IBM GERMANY
*
* THE ONLY CHANGE THAT HAS BEEN MADE IS IN THE CSECT SIHAUTH HERE I
* HAVE TAKEN OUT THE RACF CHECKS (ORIGINALLY IBM MADE A RACHECK ON
* THE FACILITY CLASS SYSIEH) HOWEVER AS WE DID NOT WANT TO DEFINE A NEW
* CLASS I CHANGED THE CODE TO CHECK IF THE CALLER WAS IN GROUP ÖMVSPFL
* IN THE END WE DECIDED SIMPLY TO GIVE THE PROGRAM A PROFILE WITH
* UACC(NONE) AND AUTHORISE THE GROUP ÖMVSPFL TO READ THIS PROGRAM.
* THE RACF CODING IN CSECT SIHAUTH HAS BEEN COMMENTED OUT. IF HOWEVER
* THE SECURITY PROVES INSUFFICIENT IT WOULD BE A SIMPLE TASK TO
* RE-INTRODUCE A CERTAIN AMOUNT OF SECURITY CHECKING INTO THE PROGRAM
* ITSELF.
*
*
*
         PRINT ON,NODATA                                           V1.0
         PUSH  PRINT                                               V1.0
         PRINT OFF                                                 V1.0
         SPACE 1                                                   V1.0
         MACRO                                                     V1.0
         SIHBDATE &ID=,&EXIT=                                      V1.0
         AIF   ('&EXIT' EQ '').SIHBD01                             V1.0
         B     &EXIT                   Skip identifier             V1.0
         SPACE 1                                                   V1.0
.SIHBD01 ANOP                                                      V1.0
         SPACE 1                                                   V1.0
         DC    X'CCCC'                                             V1.0
         AIF   ('&ID' EQ '').SIHBD02                               V1.0
         DC    CL8'&ID',C' V1.0 '                                  V1.0
.SIHBD02 ANOP                                                      V1.0
         DC    C' 01.08.1993 '         Date        dd.mm.yyyy      V1.0
         DC    X'DDDD'                                             V1.0
         AIF   ('&EXIT' EQ '').SIHBDEX                             V1.0
         SPACE 1                                                   V1.0
&EXIT    DS    0H                      Final start address
.SIHBDEX ANOP                                                      V1.0
         MEND                                                      V1.0
         SPACE 1                                                   V1.0
         MACRO                                                     V1.0
&NAME    EQUATE
         SPACE 1                                                   V1.0
***********************************************************************
*
*        The following section contains the equtes used by SYSIEH
*
*********************************************
         SPACE 3
*        Equates for registers 0-15
         SPACE 1
R00      EQU   00                      Common work register
R01      EQU   01                      Common work register
R02      EQU   02
R03      EQU   03
R04      EQU   04
R05      EQU   05
R06      EQU   06                      Points to work area
R07      EQU   07
R08      EQU   08
R09      EQU   09                      IGCTAB register
R10      EQU   10                      Reserved
R11      EQU   11                      Base register 1
R12      EQU   12                      Base register 2
R13      EQU   13                      Common save area
R14      EQU   14                      Common return register
R15      EQU   15                      Common work register
         SPACE 1
SPWRK    EQU   040                     Subpool for work area
SPCSA    EQU   245                     Subpool for CSA or SQA
         SPACE 1
ASCB     EQU   0
ASCBASID EQU   ASCB+X'24'
ASCBASXB EQU   ASCB+X'6C'
         SPACE 1
CVT      EQU   0
CVTTCBP  EQU   CVT+X'0000'
CVTDCB   EQU   CVT+X'0074'             Check for MVS/XA
CVTMVSE   EQU   X'80'                  If on, XA or ESA system
         SPACE 1
PSA      EQU   0                       PSA
FLCCVT   EQU   PSA+X'0010'
FLCPOPSW EQU   PSA+X'0028'
FLCCSW   EQU   PSA+X'0040'
FLCCAW   EQU   PSA+X'0048'
PSAANEW  EQU   PSA+X'0220'             POINTER TO ASCBOLD
         SPACE 1
RBBASIC  EQU   X'00'                   RB
RBOPSW   EQU   RBBASIC+X'10'
RBLINK   EQU   RBBASIC+X'1C'           RB link field
RBGRSAVE EQU   RBBASIC+X'20'           RB save area
         SPACE 1
RBGR00   EQU   RBGRSAVE+X'00'          RB register
RBGR01   EQU   RBGRSAVE+X'04'          RB register
RBGR02   EQU   RBGRSAVE+X'08'          RB register
RBGR03   EQU   RBGRSAVE+X'0C'          RB register
RBGR04   EQU   RBGRSAVE+X'10'          RB register
RBGR05   EQU   RBGRSAVE+X'14'          RB register
RBGR06   EQU   RBGRSAVE+X'18'          RB register
RBGR07   EQU   RBGRSAVE+X'1C'          RB register
RBGR08   EQU   RBGRSAVE+X'20'          RB register
RBGR09   EQU   RBGRSAVE+X'24'          RB register
RBGR10   EQU   RBGRSAVE+X'28'          RB register
RBGR11   EQU   RBGRSAVE+X'2C'          RB register
RBGR12   EQU   RBGRSAVE+X'30'          RB register
RBGR13   EQU   RBGRSAVE+X'34'          RB register
RBGR14   EQU   RBGRSAVE+X'38'          RB register
RBGR15   EQU   RBGRSAVE+X'3C'          RB register
         SPACE 1
RBEXSAVE EQU   RBBASIC+X'60'           Work space 40 bytes
RBEXR14  EQU   RBEXSAVE+X'00'          Save return address
RBEXR15  EQU   RBEXSAVE+X'04'          Save parmreg R15
RBEXR00  EQU   RBEXSAVE+X'08'          Save parmreg R00
RBEXR01  EQU   RBEXSAVE+X'0C'          Save parmreg R01
RBEXR12  EQU   RBEXSAVE+X'18'
RBEXSTD  EQU   RBEXSAVE+X'1C'          Keep callers exit address
RBEXMULT EQU   RBEXSAVE+X'20'          Multiple work area
RBEXTRC  EQU   RBEXSAVE+X'24'          Exec return address
RBEXLAST EQU   RBEXSAVE+X'2C'          This is last RBSAVE
         SPACE 1
TCBOLD   EQU   X'04'                   Pointer to TCBOLD
TCB      EQU   X'00'                   Base pointer for TCB
TCBRBP   EQU   TCB+X'0000'             Pointer to RB
TCBTIO   EQU   TCB+X'000C'             Pointer to TIOT
TCBCMP   EQU   TCB+X'0010'             Completion code
TCBFLGS7 EQU   TCB+X'00CB'
TCBSVCS  EQU   X'08'                   SVC screening active
TCBSVCA2 EQU   TCB+X'0124'             SVC screening table
         MEND
         SPACE 1
         MACRO
&NAME    SVCTAB
         SPACE 3
****************************************************************-
*
*        The following is the SVC screening table. It is preceded
*        by some private control fields such as eye catcher and
*        others. If activated, TCBSVCA2 points to IGCSTART.
*        SYSIEH uses only one IGCTAB for all TCBs in the address
*        space.
*
****************************************************************-
         SPACE 1
IGCTAB   DS    0D                      Start of table
IGCID    DC    CL8'IGCTAB'             Show block name
IGCSIZE  DC    A(IGCTABE-IGCTAB)       Size of this table
IGCOLD   DC    A(0)                    Address of tab found in TCB
IGCMTCB  DC    A(0)                    This is the SYSIEH TCB
IGCFLG7  DC    X'00'                   Saved TCBFLGS7 here
         SPACE 1
*        Next 8 + 256 bytes must stay contiguous by architecture
         SPACE 1
IGCSTART DS    0D                      Double word allignment
IGCADDR  DC    A(IGCSVC)               Address of SIHSVC
IGCFLAGS DC    X'C0000000'             Type 3 SVCs
IGCENTRY DC    256X'80'                Prevent use of this SVC
IGCTABE  DS    0D                      End of IGCTAB
IGCSVC   DS    0D                      Start of SVC coding
         MEND
         MACRO
&NAME    SIHBEBCD
&NAME    L     R15,=A(SIHBEBCD)        Address of EBCDIC converter
         BALR  R14,R15                 Convert it in EBCDIC string
         MEND
         SPACE 1
         MACRO
&NAME    SIHBINIT
&NAME    L     R15,=A(SIHBINIT)        Get address of SIHBINIT
         BALR  R14,R15                 Initialize Screening
         MEND
         SPACE 1
         MACRO
&NAME    SIHBREST
&NAME    L     R13,04(,R13)            Get previous save
         L     R14,12(,R13)            Restore my registers
         LM    R00,R12,20(R13)         Restore my registers
         MVI   0(R13),X'00'            Set save inactive
         MEND
         SPACE 1
         MACRO
&NAME    SIHBSAVE &BASE=
&NAME    L     R15,=A(SIHBSAVE)        Get address of save routine
         BALR  R15,R15                 Save my registers
         AIF   ('&BASE' EQ '').EXIT    Base specified ?
         USING *,R15
         SPACE 1
         LR    R12,R15                 Get base
         SH    R12,=Y(*-2-&BASE)       Get base
         SPACE 1
         DROP  R15                     No longer needeed
         USING &BASE,R12               Use base now
         SPACE 1
.EXIT    ANOP
         MEND
         SPACE 1
         MACRO
&NAME    SIHBTERM
&NAME    L     R15,=A(SIHBTERM)        Get address of term routine
         BALR  R14,R15                 Go to terminate screening
         LTR   R15,R15                 Check return code
         MEND
         SPACE 1
         POP   PRINT
         TITLE 'SYSIEH Service Aid  Version R010 '
         SPACE 3
****************************************************************-
*
*        Why SYSIEH
*        ----------
*
*        MVS does allocation by dsname. Regardless of the volume
*        allocated, there is almost no official possibility to
*        delete an accidenly allocated dsname, that is currently
*        open on an other volume.
*
*        This program gives some relief to this situation and is
*        thought beeing a tool for the experienced system programmer  *
*        only. To prevent accidenly use of the program, a RACF
*        facility class may be created to allow unauthorized use
*        of this program. You may also protect the program by
*        protecting its library if you want to do so.
*
*        What does SYSIEH
*        ----------------
*
*        SYSIEH  calls IEHPROGM and monitores the ENQ and DEQ for
*        the IEHPROGM. It checks for major resources of SYSDSN and
*        if found changes them to SYSIEH.
*
*        How does SYSIEH perform this
*        ----------------------------
*
*        SYSIEH uses SVC screening and intercept SVC processing
*        for ENQ, DEQ, and ATTACH SVC's.
*
*        ENQ    -- Change Major resource from SYSDSN to SYSIEH
*        DEQ    -- Change Major resource from SYSDSN to SYSIEH
*        ATTACH -- Propagate SVC screening to the next TCB
*
*        A more detailed description of the SYSIEH functions
*        will be seen later in this documentation.
*
*********************************************
         EJECT
         SPACE 3
****************************************************************-
*
*
*        How to install
*        --------------
*
*        Before you can execute SYSIEH, you have to install it.
*        This is archieved by linkedit it in an authorized
*        library. Use the following LKED PARM to do so:
*
*          PARM=(RENT,REUS,REFR,AC=1)
*
*        The program name schould be SYSIEH. Please remember
*        that an authorized programs needs an authorized library.
*
*
*        Warning:
*        --------
*
*        Carefully limit the authorized access to this program
*        to those, that have a need to use it. Either define
*        a facility class to RACF or put this program in a library
*        with restricted access.
*
*        If you use RACF in your SYSTEM, you need also an alter
*        authority to scratch or rename a dataset. So far SYSIEH
*        does no changes for the RACF calls.
*
*********************************************
         EJECT
         SPACE 3
****************************************************************-
*
*        Datsets used on this program
*        ----------------------------
*
*          STEPLIB  libray that contains the SYSIEH program and
*                   the IEHPROGM program. SYSIEH may also lked
*                   in an existing authorized linklibrary.
*
*          SYSMDUMP Specify a dataset according to the rules of
*                   allocating a SYS1.DUMP dataset. This DD -
*                   statement is mutually exclusive to the SYSABEND
*                   and to the SYSUDUMP DD statement. Choose either
*                   type, but normally a SYSUDUMP statement is
*                   sufficient
*
*          SYSUDUMP This dataset is required to allow debugging
*                   of SYSIEH errors. This DD - statement is
*                   mutually exclusive to the SYSMDUMP and the
*                   SYSABEND DD statement. Choose either type
*                   as required.
*
*          SYSABEND This dataset is required to allow debugging
*                   of SYSIEH errors. This DD - statement is
*                   mutually exclusive to the SYSMDUMP and the
*                   SYSUDUMP DD statement. Choose either type
*                   as required.
*
*********************************************
         EJECT
         SPACE 3
****************************************************************-
*
*        Message format used in this program.  All messages are
*        WTO or WTOR messages and start with the character string
*        of "SIH" that stands for SYSIEH. All Messages have a
*        routing code of eleven, sometimes of two and eleven.
*
*        SIHxnnnc
*
*        X     Shows the CSECT that causes the message. The
*              following characters are used:
*
*          A   Message is given by CSECT SYSIEH
*          B   Message is given by CSECT SIHAUTH
*          C   Message is given by CSECT SIHATTCH
*          D   Message is given by CSECT SIHBSAVE
*          E   Message is given by CSECT SIHBEBCD
*          F   Message is given by CSECT SIHBINIT
*          G   Message is given by CSECT SIHBTERM
*
*        NNN   Shows the message number and is a decimal number
*              between 000 to 999.
*
*        C     Shows the return code set by this message.
*
*          0   No return code is set by this message. The
*              message is for information only.
*          4   This return code is usually used for minor errors
*              and thought to lead your attention on it. But
*              processing goes on.
*          8   A return code of eight shows a serious event, please
*              check carefully.
*          C   An even more serious event happened. The return code
*              is set to twelve. The program terminates immediately.
*
*********************************************
         EJECT
         SPACE 3
****************************************************************-
*
*        Messages used in this program.  All messages are WTO or
*        WTOR messages and start with the character string of "SIH"
*        that stands for SYSIEH. The following are SYSIEH messages:
*
*        SIHA0010  SYSIEH RXXX
*
*                  This message is given at the beginning of  a
*                  SYSIEH  run  to  inform  the user  about the
*                  version  she or he  is using. Also it shows
*                  the authors name and informs about the usage
*                  of this program.
*        SIHA0020  SYSIEH RXXX IS STARTED BY USER = XXXXXXXX
*                  in ASID = NNNN.
*
*                  This message is given at the beginning of  a
*                  SYSIEH  run  to  inform  the user  about the
*                  version  she or he  is using and to give her
*                  or him  the ASID used to log the messages to
*                  the system log.
*
*        SIHB003C  SYSIEH IS NOT AUTHORIZED WITH AC=1.
*
*                  SYSIEH requires  a  protection  key of zero.
*                  However testing the authorization code shows
*                  that SYSIEH is not authorized.    Make sure
*                  SYSIEH is linked with the following parm:
*                     'RENT,REUS,AC=1'
*                  Also make sure, that the library used is
*                  really authorized.
*
*        SIHA0060  SYSIEH    STARTED  FOR  JOB XXXXXXXX, PLEASE*
*                  GIVE AUTORIZATION. ENTER "YES"  OR ENTER "NO"
*
*                  IF a RACF facility class  of  SYSIEH is not
*                  defined, the  operator  will  be  asked for
*                  permission. If you do not want this message,
*                  define a fcility class of SYSIEH es descriped
*                  earlier.
*
*        SIHA0088  USER IS NOT AUTHORIZED TO RUN THIS PROGRAM
*
*                  A RACF facility class is defined for SYSIEH
*                  but the user has no permit to use it.
*
*        SIHF009C  SYSIEH GETMAIN    FOR    SPCSA     FAILED,
*                  SYSIEH     TERMINATED.
*
*                  When SYSIEH does a getmain to move the SVC
*                  screening  module  in a   page  fixed  area,
*                  getmain  returned  a  return code other than
*                  zero.
*
*********************************************
         EJECT
         SPACE 3
****************************************************************-
*
*        Abend codes used within SYSIEH
*
*          ABENDU122  This completion code is used as  a general
*                     purpose completion code.  To  find a  more
*                     reasonable  explanation  for the reason of
*                     reason of the abend,  several reason codes
*                     will be available and explainded here:
*
*                 30  Someone tries  to  save his registers, but
*                     there is no dynamic save area left.
*
*                 34  Someone tries  to  save his registers, but
*                     R13 does  not point  within  the save aera
*                     stack.
*
*                 38  SIHBINIT tries  to  get some SPCSA storage
*                     but  getmain  returns  a return code other
*                     than zero.
*
*                 4C  SYSIEH   want  to detach  the IEHPROGM TCB
*                     but found a  completion code  other than 0
*                     in the  TCBCMP  field of the IEHPROGM TCB.
*                     To allow debugging of the  problem, SYSIEH
*                     is abended.
*
*                 58  SIHBTERM tries to free the  SVC  screening
*                     table,  but  the  pointer to the screening
*                     table is no longer present in my TCB.
*
*                 60  SIHSVC  tries  to free some  SPCSA storage
*                     but freemain  returns  a return code other
*                     than zero.
*
*                 64  SIHBTERM tries to free the  SVC  screening
*                     table  but  the  pointer  in  the TCBSVCA2
*                     field has somehow changed.
*
*********************************************
         EJECT
         SPACE 3
****************************************************************-
*
*        How it Works:
*
*        SYSIEH    needs  to  be  authorized to run.  Once it is
*        started it will send a WTO message to allow viewing its
*        use  in  the  system log.  Next  SYSIEH checks if it is
*        authorized  and  can  use authorized functions. This is
*        done in CSECT SIHAUTH. If the program is not authorized
*        message SIHT002C  will  be given  and  the program will
*        terminate with a return code of twelve.
*
*        Next we  ask  RACF,  if a facility  class of SYSIEH is
*        defined. If not, SIHAUTH returns with a return code of
*        four.  If the class is defined,  but  the  user is not
*        authorized, we give message SIHT0088 and return with a
*        return code of eight.
*
*        If the class is not defined to RACF,  we return with a
*        return code of four.  In this case SYSIEH will ask the
*        operator for a permission to run this program.
*
*        The following is an example, how to define, permit and
*        refresh a SYSIEH facility class to RACF:
*
*         RDEF FACILITY(SYSIEH) UACC(NONE)
*         PE SYSIEH CLASS(FACILITY) UACC(UPDATE)
*         SETROPTS RACLIST(FACILITY) REFRESH
*
*        If SYSIEH and the caller of SYSIEH is authorized, the
*        program goes on at label SIEHGO.
*
*
*
*        SIHBINIT than  calculates  the  storage  needed for the
*        event processor (SIHSVC) and  does a getmain for SPCSA.
*        The event processor is moved to the area just getmained
*        to have  it  in  fixed common storage. An SVC screening
*        table  is  constructed   that  contains   the  required
*        sreening table and some other workareas. Its address is
*        than placed in the  SYSIEH TCBSVCA2 field.
*        The old value  of  the TCBSVC2 field is saved for exit.
*        The  SVC  screening  is then  activated for the  ATTACH
*        SVC  allowing  to forward  the  SVC  table  address  to
*        each   TCB   attached   under  control  of SYSIEH TCBs.
*        SYSIEH will enable  SVC screening  for  ATTACH, ENQ and
*        DEQ SVCs.
*
*********************************************
         EJECT                                                     V1.0
         SPACE 3                                                   V1.0
***********************************************************************
*                                                                     *
*        How it Works (CONTINUED):                                    *
*                                                                     *
*        SYSIEH gets  control  back from SIHBINIT.  It than gets      *
*        the  parameter  register  back from the first save area      *
*        and does an  ATTACH to the IEHPROGM.  The ATTACH causes      *
*        the first entry to the  event  processor.                    *
*        It  forwards the TCBSVCA2 pointer to the newly  created      *
*        TCB to have SVC screening active for  the IEHPROGM TCB.      *
*                                                                     *
*        IF an event comes up  the copy of SIHSVC  gets  control      *
*        and  will  immediately  turn  off  TCBSVCS  to  prevent      *
*        recursive entries to SIHSVC. This bit will be set again      *
*        on exit of SIHSVC.                                           *
*                                                                     *
*        Note  that  all SIHSVC entries will  run as a TYP4 SVC.      *
*        However when an SVC is  reexecuted  it  runs  as before      *
*        because during reexecution of the SVC the  TCBSVCS  bit      *
*        in the TCB.   This means,  SVC  screening is disabeled.      *
*        The  so  monitored  SVC  will  always return to SIHSVC,      *
*        unless the  application  or someone  else under control      *
*        of the current SVC goes to abend.                            *
*        IF  everything  runs   fine,  SIHSVC   loads   the  SVC      *
*        return registers and exits to the caller.                    *
*                                                                     *
*********************************************
         EJECT                                                     V1.0
         SPACE 3                                                   V1.0
***********************************************************************
*                                                                     *
*        Programming Technics:                                        *
*        ---------------------                                        *
*                                                                     *
*         The stack technic (SIHBSAVE - SIHBREST)                     *
*                                                                     *
*        SYSIEH    uses  a  stack  technic  to  save and restore      *
*        registers whenever required. SIHBSAVE is the macro used      *
*        to save the registers.  SIHBREST  is the macro  used to      *
*        restore   the   registers.       SIHSVC  is not allowed      *
*        to use SIHBSAVE and SIHBREST because a  pointer  to the      *
*        stack is not available  during event time.  Furthermore      *
*        the number of CPUs  and TCBs using  SIHSVC  at the same      *
*        time  can not be controlled and each subtask would need      *
*        its  own stack. SIHSVC  uses  the PRB and the IGCTAB as      *
*        save  and work  area.                                        *
*                                                                     *
*         The SVC Screening Technic (SIHSVC)                          *
*                                                                     *
*        CSECT  SIHSVC  is  used  to  process  SVC events.  This      *
*        coding  is  located  in  SYSIEH    but  is not executed      *
*        there.  The  program  is moved to SPCSA storage with an      *
*        MVCL instruction to  have it available in  fixed common      *
*        storage. Therefore SIHSVC  is  restricted  not  to  use      *
*        relocatible  data  like  A(SIHSVC). Since more than one      *
*        CPU  may  use SIHSVC at the same time, it must strictly
*        kept fully reentrant and read only.
*        The  SVRB  save  area may be used to keep it reentrant.
*        There  is  one  IGCTAB for all  CPUs and subtasks.  For
*        detailed  information  refer  to  DSECT  IGCTAB in this
*        assembly.  The  MVS  IGCTAB  starts with LABEL IGCADDR.
*        this address is PLACED in the  TCB  TCBSVCA2 field. The
*        MVS  IGCTAB  ends  at  LABEL  IGCSVC.   Furthermore  it
*        requires  the  TCBSVCS  bit  on  in  TCBFLGS7 to BECOME
*        active. SVC screening is not very  often  used. However
*        SYSIEH  will save the previous contents of the TCBSVCA2
*        field  and  the  contents  of  the  TCBFLGS7 FLAG.   It
*        will restore the previous screening field and the flags
*        before returning to the caller.
*
*********************************************
         EJECT
         EQUATE
         EJECT
         SPACE 3
****************************************************************-
*
*        SYSIEH:
*
*        Do some houskeeping buisiness:
*
*         1.  Get a reentrant combined work and save area in SPWRK.
*         2.  Make sure, the area is all zeros.
*         3.  Set up save area chaining.
*         4.  Check for proper program authorization and give
*             message if not.
*         5.  Check for callers authorization . If a RACF facility
*             class is not defined, ask the operator for permission
*             to continue.
*         6.  Attatch IEHPROGM
*
*********************************************
         SPACE 3
         USING SYSIEH,R15
         USING SIEHWRK,R06             Base for work area
         SPACE 1
SYSIEH   CSECT
         SPACE 1
         SIHBDATE ID=SYSIEH,EXIT=JOBMSG1A
         SPACE 1
         STM   R14,R12,12(R13)         Save registers
         LM    R11,R12,BASE            Get base register
         SPACE 1
         DROP  R15
         USING SYSIEH,R11,R12
         SPACE 1
         SLR   R15,R15                 Clear for later use
         ST    R15,16(,R13)            Reset return code to zero
         LA    R14,SIHBEND-SIEHWRK     Size of area
         GETMAIN R,LV=(R14),SP=SPWRK   Get SIEHWRK
         LR    R06,R01                 Keep address
         SPACE 1
*        Clear all storage to zero, using MVCL
         SPACE 1
         LR    R02,R06                 Get address in R02
         L     R03,=A(SIHBEND-SIEHWRK) Length of work area
         SLR   R04,R04                 Dummy address
         SLR   R05,R05                 Dummy lenght
         MVCL  R02,R04                 Clear storage
         SPACE 1
         ST    R06,8(,R13)             Save address in previous
         ST    R13,4(,R06)             Previous save in MINE
         ST    R13,INITSAVE            Keep first save area
         LA    R13,FSAVE               Get my first save area
         SPACE 1
*        Prepare all fields in SIEHWRK that need setup
         SPACE 1
         MVC   SIEHEYE,=CL8'SIEHWRK'   Eye catcher
         L     R01,=A(SIHBEND-SIEHWRK) Length of work area
         O     R01,=A(SPWRK*X'1000000')
         ST    R01,SIHSIZE             Keep it in area
         MVC   SIHBNAME,=CL8'IEHPROGM' Program to process
         B     JOBMSG5A                Give starting message
         SPACE 1
BASE     DC    A(SYSIEH),A(SYSIEH+4096)
         SPACE 1
         LTORG
         EJECT
         SPACE 1
****************************************************************-
*
*        Give start message (Log the user to the system log).
*
*********************************************
         SPACE 1
JOBMSG5A DS    0H
         L     R01,=A(MDBA001)         MSG: internal use only
         WTO   MF=(E,(R01))
         SPACE 1
         MVI   WTOBUFFA,C' '           Clear WTO buffer
         MVC   WTOBUFFA+1(L'WTOBUFFA-1),WTOBUFFA
         L     R01,=A(MDBA002)
         MVC   WTOBUFFA(MDBA002E-MDBA002),00(R01)
         SPACE 1
         L     R01,FLCCVT              Get CVT address
         L     R01,CVTTCBP(,R01)       Get TCB pointers
         L     R01,TCBOLD(,R01)        Get my TCB
         L     R15,TCBTIO(,R01)        Get my TIOT
         SPACE 1
         LH    R14,WTOBUFFA            Get lenght of text
         LA    R14,WTOBUFFA-22(R14)    Get address to move
         MVC   00(08,R14),00(R15)      Move jobname in message
         SPACE 1
*        With some further releases the ASCB may be in
*        31 bit addressing mode. Please take care.
         SPACE 1
         L     R01,FLCCVT              Get CVT address
         TM    CVTDCB(R01),CVTMVSE     Is this MVS/XA ?
         BO    JOBMSG5B                Yes
         L     R01,PSAANEW             Get my ASCB from PSA
         ICM   R01,3,ASCBASID(R01)     Get ASID from ASCB
         B     JOBMSG5D                All done
         SPACE 1
JOBMSG5B DS    0H
         LA    R15,JOBMSG5C            Get exit address
         O     R15,=X'80000000'        Set mode bit
         BSM   R14,R15                 Set mode to full addressing
JOBMSG5C DS    0H
         L     R01,PSAANEW             Get my ASCB from PSA
         ICM   R01,3,ASCBASID(R01)     Get ASID from ASCB
         LA    R15,JOBMSG5D            Get exit address
         N     R14,=X'80000000'        Set mode bit
         OR    R15,R14                 Set old addressing mode
         BSM   R00,R15                 Set mode to old addressing
JOBMSG5D DS    0H
         N     R01,=X'0000FFFF'        Clear flags
         SIHBEBCD                      Convert hex to EBCDIC
         LH    R14,WTOBUFFA            Get lenght of text
         LA    R14,WTOBUFFA-04(R14)    Get address to store
         STCM  R01,15,0(R14)           Store ASID in message
         WTO   MF=(E,WTOBUFFA)
         SPACE 1
         B     JOBMSG5E                Check for authorization
         SPACE 1
         LTORG
         EJECT
         SPACE 1
****************************************************************-
*
*        Check for authorization.
*        If authorization fails because the RACF facility class
*        is not defined, go and ask the operator.
*
*********************************************
         SPACE 1
JOBMSG5E DS    0H
         SPACE 1
*        SIHAUTH  Subroutine checks for program authorization
*        and for user authorization. RC=12 means the program is
*        not authorized. RC=08 means that the program is
*        authorized but not the caller. RC=04 means, that
*        the RACF facility class is not defined and the operator
*        must be asked.
         SPACE 1
         L     R15,=A(SIHAUTH)         Address of SIHAUTH
         BALR  R14,R15                 Check for authorization
         LTR   R15,R15                 Check return code
         BZ    SIEHGO                  All fine
         CH    R15,=Y(04)              RACF facility not defined ?
         BE    JOBMSG5F                Yes, ask the operator
         L     R01,INITSAVE            Get callers save
         C     R15,16(,R01)            Check previous return code
         BNH   JMSGRET                 Leave now
         ST    R15,16(,R01)            Place it in save area
         B     JMSGRET                 Leave now
         SPACE 1
*        The RACF facility class is not defined. Ask the operator
*        to get a permit to drive this program.
         SPACE 1
JOBMSG5F DS    0H
         SPACE 1
         MVI   WTOBUFFA,C' '           Clear buffer
         MVC   WTOBUFFA+1(L'WTOBUFFA-1),WTOBUFFA
         L     R01,=A(MDBA006)         Address of WTO
         MVC   WTOBUFFA(MDBA006E-MDBA006),00(R01)
         L     R01,X'10'               Get CVT
         L     R01,00(,R01)            Get TCB pointers
         L     R01,04(,R01)            This is TCB old
         L     R01,12(,R01)            This is TIOT
         MVC   WTOBUFFA+50(8),0(R01)   Move jobname
         MVI   WTORREPL,C' '           Clear reply area
         MVC   WTORREPL+1(L'WTORREPL-1),WTORREPL
         SLR   R00,R00                 Clear for later use
         ST    R00,WTORECB             Reset WTOR ECB
         LA    R14,WTORREPL            Address of reply area
         LA    R15,WTORECB             Address of wait ECB
         WTOR  MF=(E,WTOBUFFA),,(R14),,(R15)
         WAIT  ECB=WTORECB             Await reply
         LA    R01,L'WTORREPL          Length of buffer
         LA    R15,WTORREPL+L'WTORREPL-1
         BAL   R14,SIHTRANS            Translate WTOR buffer
         CLC   WTORREPL(3),=C'NO '     Is it 'NO' ?
         BE    JMSGRET                 Yes, return
         CLC   WTORREPL(2),=C'U '      Is it 'U' ?
         BE    SIEHGO                  Yes, run the guest
         CLC   WTORREPL(4),=C'YES '    Is it 'YES' ?
         BNE   JOBMSG5F                Repeat the message
         B     SIEHGO                  Go to run the guest
         SPACE 3
****************************************************************-
*
*        SIHTRANS will translate a buffer from low letters to
*        capital letters. Input is as follows:
*
*          R01    Length of buffer
*          R15    End of buffer address
*          R14    Return address
*
*********************************************
         SPACE 3
SIHTRANS DS    0H
         LR    R00,R14                 Keep exit address
         SLR   R14,R14                 Reset R14
SIHTR01  DS    0H
         CLI   0(R15),X'61'            Is this more than 'A'
         BL    SIHTR02                 No, leave
         CLI   0(R15),X'C1'            Capital character ?
         BNL   SIHTR02                 Yes, leave
         IC    R14,0(,R15)             Store character back
         LA    R14,X'40'(,R14)         Increase to capital
         STC   R14,0(,R15)             Store character back
SIHTR02  DS    0H
         BCT   R01,SIHTR01             Repeat for next
         LR    R14,R00                 Restore exit address
         BR    R14                     Return to caller
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        Entry to run the monitored job (Usually IEHPROGM).
*
*********************************************
         SPACE 3
SIEHGO   DS    0H
         SIHBINIT                      Create a SVC table
         LTR   R15,R15                 All OK ?
         BZ    SIEHGO03                Yes, go on
         STM   R00,R15,ABNDSAVE        Save my registers
         ABEND 122,DUMP
         SPACE 1
SIEHGO03 DS    0H
         SLR   R01,R01                 Clear for later use
         ST    R01,TESTTCB             Reset TCB address
         ST    R01,TESTECB             Reset ECB address
         L     R15,ATTACHA             Get exit Address
         SYNCH (R15)
         LTR   R15,R15                 Check return code
         BNZ   SIEHGO04                It is all fine
         ST    R01,TESTTCB
         WAIT  ECB=TESTECB             Wait for tested TASK
         B     SIEHGO06                Go to terminate
         SPACE 1
*        Process an attach return code other than zero
         SPACE 1
SIEHGO04 DS    0H
         L     R01,INITSAVE            Get previous save
         C     R15,16(R01)             Check return code
         BNH   SIEHGO06                Current one is higher
         ST    R15,16(,R01)            Save return code
SIEHGO06 DS    0H
         ICM   R01,15,TESTTCB          Is there a subtask ?
         BZ    SIEHGOEX                No, bypass detach
         L     R15,TCBCMP(,R01)        Get completion code
         ST    R15,TESTCMP             Keep completion code
         DETACH TESTTCB                Detach the TCB
         SLR   R01,R01                 Clear for later use
         ST    R01,TESTTCB             Reset TCB address
         SIHBTERM                      Delete my SVC table
         BZ    SIEHGOEX                Leave now
         L     R01,INITSAVE            Get initial save
         C     R15,16(,R01)            Check return code
         BNH   SIEHGOEX                Already high
         ST    R15,16(,R01)            Keep Return code
SIEHGOEX DS  0H
         B     JMSGRET                 Leave now
         SPACE 1
ATTACHA  DC    A(SIHATTCH)
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        JMSGRET will cleanup everything  required  and return to
*        the caller.
*
*********************************************
         SPACE 3
JMSGRET  DS    0H
         ICM   R01,15,ATTTCB           Get TCB address
         BZ    JMSGR02                 Not present
         SLR   R15,R15                 Clear for later use
         ICM   R15,7,TCBCMP(R01)       All OK ? (First 3 BYTES)
         BZ    JMSGR01                 Yes, go on
         STM   R00,R15,ABNDSAVE        Save my registers
         LA    R15,X'04C'              Get completion code
         ABEND 122,DUMP                Abend the program
         SPACE 1
JMSGR01  DS    0H
         DETACH ATTTCB                 Detach the TCB
         SLR   R01,R01                 Clear for later use
         ST    R01,ATTTCB              Reset TCB field
JMSGR02  DS    0H
         SPACE 1
*        Calculate return code, FREEMAIN and return
         SPACE 1
         L     R13,INITSAVE            Get initial save
         L     R15,TESTCMP             Test return code
         N     R15,=X'00FFF000'        Isolate system code
         BZ    JMSGR03                 Was zero
         SRL   R15,12                  Adjust
         B     JMSGR04                 Skip user code
         SPACE 1
JMSGR03  DS    0H
         L     R15,TESTCMP             Test return code
         N     R15,=X'00000FFF'        Isolate user code
         BZ    JMSGR05                 Was zero
JMSGR04  DS    0H
         C     R15,16(,R13)            Take highest code
         BNH   JMSGR05                 Was high
         ST    R15,16(,R13)            Take highest code
JMSGR05  DS    0H
         ICM   R15,07,SIHRET+1         Test return code
         BZ    JMSGR06                 Was zero
         C     R15,16(,R13)            Take highest code
         BNH   JMSGR06                 Was high
         ST    R15,16(,R13)            Take highest code
JMSGR06  DS    0H
         SLR   R14,R14                 Clear for later use
         ICM   R14,07,SIHSIZE+1        Size of area
         SLR   R02,R02                 Clear for later use
         ICM   R02,01,SIHSIZE          Subpool of area
         FREEMAIN R,LV=(R14),SP=(R02),A=(R06) FREE SIEHWRK
         LM    R14,R12,12(R13)         Restore registers
         BR    R14                     Return to caller
         SPACE 1
         DROP  R06
         DROP  R11
         DROP  R12
         SPACE 1
         LTORG
         TITLE 'SYSIEH SIHATTCH Processor  Version R1.0 - '
         SPACE 3
****************************************************************-
*
*        The following routine is provided to attach the JOB to
*        be tested, using a SYNCH macro.
*
*********************************************
         SPACE 3
         USING SIEHWRK,R06             Base for work area
         USING SIHATTCH,R15
         SPACE 1
SIHATTCH CSECT
         SPACE 1
         SIHBDATE ID=SIHATTCH,EXIT=JDATT01
         SIHBSAVE
         BALR  R12,0                   Get me a base register
         SPACE 1
         DROP  R15
         USING *,R12                   Use new base
         SPACE 1
         XC    SIHBTTL(SIHBTTLE-SIHBTTL),SIHBTTL
         L     R01,INITSAVE            Get callers save
         L     R01,24(,R01)            Get callers parm
         ATTACH SF=(E,SIHBTTL),EPLOC=SIHBNAME,ECB=TESTECB
         L     R14,04(,R13)            Get previous save
         STM   R15,R01,16(R14)         Save parameters
         SIHBREST
         SVC   3                       Return to caller of SYNCH
         SPACE 1
         DROP  R06
         DROP  R12
         SPACE 1
         LTORG
         TITLE 'SYSIEH   SIEHMSG Messages  Version R1.0 - '
         SPACE 3
****************************************************************-
*
*        SIEHMSG
*        This CSECT contains WTO - WTOR messages only. No code
*        is executed in this CSECT.
*
*********************************************
         SPACE 3
SIEHMSG  CSECT
         SPACE 1
MDBA001  WTO   MF=L,'SIHA0010  SYSIEH R010',ROUTCDE=(11)
MDBA001E EQU   *                       End of message
         DS    0F
MDBA002  WTO   MF=L,'SIHA0020  SYSIEH R010 IS STARTED BY JOBNAME= 12345X
               678 IN ASID= 1234',ROUTCDE=(2,11)
MDBA002E EQU   *                       End of message
         DS    0F
MDBB003  WTO   MF=L,'SIHB003C  SYSIEH IS NOT AUTHORIZED WITH AC=1.',   X
               ROUTCDE=(2,11)
MDBB003E EQU   *                       End of message
         DS    0F
MDBA006  WTOR  MF=L,'SIHA0060  SYSIEH    STARTED  FOR  JOB XXXXXXXX, PLX
               EASE GIVE AUTORIZATION. ENTER "YES"  OR ENTER "NO"',    X
               L'WTORREPL,ROUTCDE=(2,11)
MDBA006E EQU   *                       End of message
         DS    0F
MDBA008  WTO   MF=L,'SIHT00088 USER IS NOT AUTHORIZED TO RUN THIS PROGRX
               AM.',ROUTCDE=(2,11)
MDBA008E EQU   *                       End of message
         DS    0F
MDBF009  WTO   MF=L,'SIHF009C  SYSIEH   GETMAIN FOR SPCSA  FAILED, JOBDX
               EBUG TERMINATED.',                                      X
               ROUTCDE=(11)
MDBF009E EQU   *                       End of message
         TITLE 'SYSIEH   SIHAUTH Routine   Version R1.0 '
         SPACE 3
****************************************************************-
*
*        Authority check routine -                                    *
*        If the authority is ok, return with a returncode of zero.    *
*        Otherwise give MSG MDBB003 and return with a return code     *
*        RC=12.                                                       *
*                                                                     *
*        Alo call RACF to check, if the caller is authorized to       *
*        use this facility class. However, if the class is not        *
*        defined to RACF, the program goes on.                        *
*                                                                     *
*        If RACF refuses the use of the resource:                     *
*        MDBA008 is given and the return code is set to RC=04.        *
*                                                                     *
*********************************************
         SPACE 3                                                   V1.0
         USING SIEHWRK,R06             Base for work area          V1.0
         USING SIHAUTH,R15             Temporare usage             V1.0
         SPACE 1                                                   V1.0
SIHAUTH  CSECT                                                     V1.0
         SPACE 1                                                   V1.0
         SIHBDATE ID=SIHAUTH,EXIT=TESTAU0                          V1.0
         SIHBSAVE BASE=SIHAUTH                                     V1.0
         TESTAUTH FCTN=1               Check for AC=1              V1.0
         LTR   R15,R15                 Is the program authorized ? V1.0
         BZ    TESTAU1                 Yes, check for user         V1.0
         L     R01,=A(MDBB003)         Get address of message      V1.0
         WTO   MF=(E,(R01))            Display the message         V1.0
         LA    R15,12                  Set return code             V1.0
         B     TESTAUEX                Return now                  V1.0
         SPACE 1                                                   V1.0
TESTAU1  DS    0H                                                  V1.0
*FINDACEE L     R04,PSAANEW                GET ASCB
*         USING ASCB,R04                   ADDRESS IT
*         L     R04,ASCBASXB               GET ASXB
*         USING ASXB,R04                   ADDRESS IT
*         L     R04,ASXBSENV               GET ACEE
*         LTR   R04,R04                     IS THERE ONE?
*         BZ    CHKMESS                   NO - RETURN
*         USING ACEE,R04                   YES, ADDRESS IT
*CHECKU   EQU   *
*         L     R03,ACEEFCGP               GET THE ADDR OF LIST OF GRPS
*         USING CGRP,R03                   ESTABLISH ADDR
*         LH    R05,CGRPNUM                GET MAXIMUM GROUPS
*         LA    R03,32(R03)                 BUMP TO NAMES LIST
*         USING CGRPENTD,R03
*         LA    R15,0                   Set return code
*CHKLOOP  CLC   AUTHGRP,CGRPNAME          IS IT AUTHORISED
*         BE    TESTAUEX                  YES CARRY ON
*         LA    R03,24(R03)                 BUMP POINTER
*         BCT   R05,CHKLOOP
*CHKMESS  L     R01,=A(MDBA008)         GET ADDRESS OF MESSAGE
*         WTO   MF=(E,(R01))            Display the message
*        LA    R15,08                  Set return code
TESTAUEX DS    0H                                                  V1.0
         SIHBREST                      Restore registers           V1.0
         BR    R14                     Return to caller            V1.0
         SPACE 1                                                   V1.0
AUTHGRP  DC    CL7'ÖMVSPFL'            RACF GROUP
         SPACE 1                                                   V1.0
         LTORG                                                     V1.0
         IHAACEE
         IHAASXB
         ICHPCGRP
         TITLE 'SYSIEH SIHBSAVE Processor  Version R1.0 - '
         SPACE 3                                                   V1.0
***********************************************************************
*                                                                     *
*        The following CSECT is responsible to save the registers     *
*        and to provide save area chaining. In case of stack overflow *
*        the routine will ABEND122 with a reason code of x'30'.       *
*                                                                     *
*        Registers at entrypoint:                                     *
*                                                                     *
*         R06 Must point to the work area
*         R13 Must point to the save area
*         R15 Must point to the return address
*
*        Registers damaged: None
*
*********************************************
         SPACE 3
SIHBSAVE CSECT
         STM   R14,R12,12(R13)         Save registers
         MVI   0(R13),X'FF'            Set save area active
         BALR  R12,0                   Get me a base
         SPACE 1
         USING *,R12                   Set base
         USING SIEHWRK,R06
         SPACE 1
         SIHBDATE ID=SIHBSAVE,EXIT=SIHBA01
         SPACE 1
*        R13 must point within my stack
         SPACE 1
         LA    R14,LSAVE-36*L'FSAVE    Get end of area
         CR    R13,R14                 Within my area ?
         BH    SIHBA30                 No, ABEND122/30
         LA    R14,FSAVE               Get start of area
         CR    R13,R14                 Within my area ?
         BL    SIHBA34                 No, ABEND122/34
         LA    R14,18*L'FSAVE(,R13)    Get next save
         ST    R14,8(,R13)             Save next in previous
         ST    R13,4(,R14)             Save previous in mine
         L     R12,68(,R13)            Restore R12
         L     R14,12(,R13)            Restore R14
         LA    R13,18*L'FSAVE(,R13)    Go to next save
         BR    R15                     Return to caller
         SPACE 1
         DROP  R12
         SPACE 1
SIHBA30  DS    0H
         STM   R14,R12,12(R13)         Save my registers
         LA    R15,X'030'              Get reason code in R15
         ABEND 122,DUMP                Terminate this program
         SPACE 1
SIHBA34  DS    0H
         STM   R14,R12,12(R13)         Save my registers
         LA    R15,X'034'              Get reason code in R15
         ABEND 122,DUMP                Terminate this program
         SPACE 1
         DROP  R06
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        SIHBEBCD  converts  the  hex value of the two low order
*        bytes passed in R01 to (printable) EBCDIC  and  returns
*        the printable characters in R01. Control is returned to
*        the address passed in R14.
*
*        Registers modified:  R15
*
*********************************************
         SPACE 3
         USING SIHBEBCD,R15            Base register
         SPACE 1
SIHBEBCD CSECT
         SPACE 1
         SIHBDATE ID=SIHBEB01,EXIT=SIHBEB1
         SPACE 1
         ST    R14,12(,R13)            Save my exit address
         SLL   R01,4                   Make room for sign
         O     R01,=X'FFF0000F'        Set a sign
         ST    R01,20(,R13)            Keep for decimal instr.
         UNPK  16(4,R13),21(3,R13)     Correct it
         LA    R01,EBCDIC              Address of translate table
         LA    R15,C'0'                Get start of table
         SR    R01,R15                 Get start of table
         TR    16(4,R13),0(R01)        Translate it
         L     R14,12(,R13)            Restore return address
         L     R01,16(,R13)            Restore return value
         L     R14,12(,R13)            Restore exit address
         SLR   R15,R15                 Set return code
         BR    R14                     Return to caller
         SPACE 1
EBCDIC   DS    0C
         DC    C'0123456789ABCDEF'
         SPACE 1
         DROP  R15                     No longer used
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        This routine activates the SVC screening to allow pre
*        and post processing of SVCs as needed.
*
*         1. Create table for SVC screening.
*         2. Move SVC routine to SP239
*
*********************************************
         SPACE 3
         USING SIEHWRK,R06
         USING IGCTAB,R09
         USING SIHBINIT,R15            Temp base
         SPACE 1
SIHBINIT CSECT
         SPACE 1
         SIHBDATE ID=SIHBINIT,EXIT=SCRINIT0
         SIHBSAVE BASE=SIHBINIT
         SPACE 1
         MODESET KEY=ZERO              Set key zero
         SLR   R15,R15                 Set return code
         SLR   R09,R09                 No IGCTAB present
         L     R14,=A(IGCTABE-IGCTAB)  Size of table
         A     R14,=A(SIHSVCE-SIHSVC)  Size of exit
         GETMAIN R,LV=(R14),SP=SPCSA   Get IGCTAB
         LTR   R04,R15                 Everything OK ?
         BZ    SCRINIT2                All clear, go on
         SLL   R04,16                  Get space for return code
         O     R04,X'00000038'         Set completion code
         L     R01,=A(MDBF009)         Get address of message
         WTO   MF=(E,(R01))            Give message
         LR    R15,R04                 Restore return code
         B     SCRINEX1                Leave
         SPACE 1
SCRINIT2 DS    0H
         LR    R09,R01                 Pointer to SVC table
         ST    R09,SIEHSVC             Keep pointer to SVCTAB
         SPACE 1
*        Clear SVCTAB portion of gotten storage
         SPACE 1
         LR    R02,R09                 Get address in R02
         L     R03,=A(IGCTABE-IGCTAB)  Size of table
         SLR   R04,R04                 Dummy address
         SLR   R05,R05                 Dummy lenght
         MVCL  R02,R04                 Clear storage
         SPACE 1
*        Complete the IGCTAB header
         SPACE 1
         MVC   IGCID,=CL8'IGCTAB'      Move ID in
         LA    R14,IGCTABE-IGCTAB      Size of table
         A     R14,=A(SIHSVCE-SIHSVC)  Size of exit
         ST    R14,IGCSIZE             Save size of table
         SPACE 1
*        Set SVC type flags
         SPACE 1
         L     R15,=X'C0000000'        Get flags
         ST    R15,IGCFLAGS            Save as flags
         SPACE 1
*        Set SVC screening address
         SPACE 1
         LA    R01,IGCTABE             Start of module
         ST    R01,IGCADDR             Store it in SVC table
         SPACE 1
*        Set SVC screening options
         SPACE 1
         MVI   IGCENTRY,X'80'          Prevent usage
         MVC   IGCENTRY+1(255),IGCENTRY  -  for all entries
         SPACE 1
*        Activate all needed entries in the SVC tab
         SPACE 1
         MVI   IGCENTRY+X'2A',0        Except for SVC2A
         MVI   IGCENTRY+X'30',0        Except for SVC30
         MVI   IGCENTRY+X'38',0        Except for SVC38
         SPACE 1
*        Move SIHSVC in gotten storage
         SPACE 1
         LA    R02,IGCSVC              Start of module
         L     R03,=A(SIHSVCE-SIHSVC)  Size of load module
         L     R04,=A(SIHSVC)          Address of load module
         LR    R05,R03                 Size of load module
         MVCL  R02,R04                 Copy SIHSVC to tab
         SPACE 1
*        Place address of svctab in currrent TCB
*        Place current TCB address as IGCMTCB
         SPACE 1
         L     R15,FLCCVT              Get pointer to CVT
         L     R15,CVTTCBP(,R15)       Get TCB pointers
         L     R04,TCBOLD(,R15)        This is my TCB
         ST    R04,IGCMTCB             This is MASTER TCB
         L     R15,TCBSVCA2(,R04)      Previous tab address
         ST    R15,IGCOLD              Keep address of next tab
         IC    R15,TCBFLGS7(,R04)      Keep previous FLAG7
         STC   R15,IGCFLG7             Save it in tab
         LA    R15,IGCSTART            Back up ID
         ST    R15,TCBSVCA2(,R04)      Store it in TCB
         OI    TCBFLGS7(R04),TCBSVCS   Set SVC screening
         SLR   R15,R15                 All done
SCRINEX1 DS    0H
         LR    R04,R15                 Save return code
         MODESET KEY=NZERO             Set problem key
         LR    R15,R04                 Restore my return code
         SIHBREST
         BR    R14                     Return
         SPACE 3
SCRINXC  XC    0(0,R01),0(R01)         Clear SVC tab
         SPACE 1
         DROP  R06                     Drop work area
         DROP  R09                     Drop IGCTAB
         DROP  R12                     Drop base
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        The  following   subroutine  is called  by  SYSIEH to
*        terminate the SVC sceening process.
*
*        Return codes:
*        Return codes  of  X'04' to X'10' are provided by system
*        macros as GETMAIN and FREEMAIN. Other  completion codes
*        starting  with X'58'  are provided by this routine. See
*        documentation of reason codes.
*
*        If R15 is not zero on return,  R00 contains the address
*        close to the failing location.
*
*        Return codes (58, 60, 64)
*
*********************************************
         SPACE 3
         USING SIEHWRK,R06
         USING IGCTAB,R09
         USING SIHBTERM,R15
         SPACE 1
SIHBTERM CSECT
         SPACE 1
         SIHBDATE ID=SIHBTERM,EXIT=SCRTERM1
         SIHBSAVE BASE=SIHBTERM
         SPACE 1
         MODESET KEY=ZERO              Set key zero
         LA    R15,X'58'               Set reason code
         L     R04,FLCCVT              Get pointer to CVT
         L     R04,CVTTCBP(,R04)       Get TCB pointers
         L     R04,TCBOLD(,R04)        This is my TCB
         ICM   R09,15,TCBSVCA2(R04)    This is my tab
         BZ    SCRTERM5                Not present, error X'58'
         SH    R09,=Y(IGCSTART-IGCTAB) Subtract header length
         NI    TCBFLGS7(R04),255-TCBSVCS   SVC screening
         SPACE 1
         LA    R15,X'64'               Set reason code
         ICM   R01,15,SIEHSVC          Get SVC screening module
         BZ    SCRTERM5                Not present, error X'64'
         SPACE 1
*        RELEASE IGCTAB SPCSA storage
         SPACE 1
         L     R01,IGCOLD              Get address of next tab
         ST    R01,TCBSVCA2(,R04)      Previous tab address
         TM    IGCFLG7,TCBSVCS         Previous switch on ?
         BNO   SCRTERM4                No, leave as is
         OI    TCBFLGS7(R04),TCBSVCS   Set SVC screening
SCRTERM4 DS    0H
         L     R01,IGCSIZE             Size of table
         MVI   IGCID,C' '              Mark as invalid
         FREEMAIN R,LV=(R01),SP=SPCSA,A=(R09)
         LTR   R04,R15                 Any problem ?
         BZ    SCRTERM5                No, all done
         BALR  R14,0                   Give me a hand
         SLL   R04,16                  Det room for completion
         O     R04,=X'00000060'        O completion code
SCRTERM5 DS    0H
         MODESET KEY=NZERO             Set problem key
         LR    R15,R04                 Restore return code
         SIHBREST                      Restore registers
         BR    R14                     Return
         SPACE 1
         DROP  R06                     Drop work area
         DROP  R09                     Drop IGCTAB
         DROP  R12                     Drop base
         SPACE 1
         LTORG
         TITLE 'SIHSVC -  This Processor is moved to SPCSA   '
         SPACE 3
****************************************************************-
*
*        The  following  CSECT is moved to SPCSA and is used as
*        SVC processor. This CSECT must not have any relocatible
*        data.  It  is  not allowed to have ACCESS  to any other
*        data than SPCSA.
*
*
*        This  routine  scans all SVC'S that are requested to be
*        scanned. The requested action is done.
*
*        Aa entry, register settings are as follow:
*
*          R00 As before the SVC
*          R01 As before the SVC
*          R03 Points to the CVT
*          R04 Points to the TCB requesting the service
*          R05 Points to the TYPE3 SVRB with extended save area
*          R06 Points to the entrypoint of this routine
*          R07 Points to the ASCB requesting the service
*          R09 Used to address IGCTAB
*          R13 As before the SVC
*          R14 Contains the return address
*          R15 As before the SVC
*
*********************************************
         SPACE 3
         USING SIHSVC,R06
         USING SIHSVC+4094,R07
         USING IGCTAB,R09              Address of IGCTAB
         SPACE 1
SIHSVC   CSECT
         SPACE 1
         SIHBDATE ID=SIHSVC,EXIT=SIHSVC1
         SPACE 1
         NI    TCBFLGS7(R04),255-TCBSVCS
         STM   R14,R01,RBEXR14(R05)    Save my parm regs
         L     R09,TCBSVCA2(,R04)      Get my work area
         SH    R09,=Y(IGCSTART-IGCTAB) Back up for ID
         LA    R07,4094(,R06)          Second base
         SPACE 1
         TM    CVTDCB(R03),CVTMVSE     Test for MVS/XA
         BNO   SIHSVC2                 370 addressing mode
         L     R10,RBLINK(,R05)        Address of previous RB
         TM    RBOPSW+4(R10),X'80'     Running in XA MODE ?
         BZ    SIHSVC2                 No, without extended addressing
         LA    R15,SIHSVC2             Get exit address
         O     R15,=X'80000000'        Set mode bit
         BSM   R00,R15                 Set mode to full addressing
SIHSVC2  DS    0H
         L     R10,RBLINK(,R05)        Address of previous RB
         SH    R10,=Y(2)               Point to IC
         SLR   R14,R14                 Clear for later use
         ICM   R14,3,0(R10)            Get interruption code
         SLL   R14,1                   Multiply by two
         LR    R15,R06                 Get entrypoint
         AH    R15,SVCTABEX(R14)       Get exit address
         ST    R15,RBEXSTD(,R05)       Keep STD exit address
         SRL   R14,1                   Divide by two (Set SVC code)
         BR    R15                     Go to entry
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        This routine handles attach SVC's
*
*********************************************
         SPACE 3
IGC02A   DS    0H
*        MODESET EXTKEY=RBT234,WORKREG=10
         L     R10,RBLINK(,R05)        Previous RB
         IC    R10,RBOPSW+01-RBBASIC(R10)
         SPKA  0(R10)                  Set PSW key
         SPACE 1
*        Warning - No base register after attach SVC
         SPACE 1
         LM    R00,R15,RBGRSAVE(R05)   Get callers register set
         SVC   42                      Attach a TCB
         L     R03,FLCCVT              Get my CVT
         L     R04,CVTTCBP(,R03)       Get TCB dispatch
         L     R04,TCBOLD(,R04)        Get my tcb back
         L     R09,TCBSVCA2(,R04)      Get my screening table
         L     R06,IGCADDR-IGCSTART(,R09) Get my base back
         LA    R07,4094(,R06)          Get my second base
         SPACE 1
         USING SIHSVC+4094,R07
         SPACE 1
         SH    R09,=Y(IGCSTART-IGCTAB) Back up for ID
         L     R05,TCBRBP(,R04)        Get my RB pointer
         SPACE 1
*        Go back to KEY0 to allow RB and TCB update.
         SPACE 1
         MODESET EXTKEY=SUPR
         STM   R15,R01,RBEXR15(R05)    Save my parm registers
         LR    R08,R01                 Keep TCB address
         LTR   R15,R15                 Attach successful ?
         BNZ   IGC02A08                No, leave now
         SPACE 1
*        Attach was successful. The key is back to zero.
*        R08 contains the new TCB address. Activate screening
*        now.
         SPACE 1
         LA    R14,(IGCSTART-IGCTAB)(,R01)  Go to start
         ST    R14,TCBSVCA2(,R08)      PUT it in new TCB
         L     R15,TCBSVCA2(,R04)      Get my screening table
         ST    R15,TCBSVCA2(,R08)      Update new TCB
         OI    TCBFLGS7(R08),TCBSVCS   Set SVC screening (New TASK)
IGC02A08 DS    0H
         OI    TCBFLGS7(R04),TCBSVCS   Set SVC screening (OLD TASK)
         LM    R14,R01,RBEXR14(R05)    Restore parm regs
         BR    R14                     Exit
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        The  following  CSECT is used to manage SVC48
*
*        If service is requested:
*
*          1. Calculate the size of the ENQ/DEQ list
*          2. Get storage for a second ENQ/DEQ list.
*          3. Copy the ENQ/DEQ list.
*          4. Scan the copied list for the major resource SYSDSN
*             - If not found goto 10
*          5. CHANGE all major SYSDSN resources to SIHDSN
*          6. Run the modified list.
*          7. Copy the return code back to callers ENQ/DEQ list.
*          8. FREEMAIN the gotten list.
*          9. Exit
*
*         10. Run the unmodified list
*         11. Exit
*
*        At entry, register settings are as follow:
*
*          R00 As before the SVC
*          R01 As before the SVC
*          R03 Points to the CVT
*          R04 Points to the TCB requesting the service
*          R05 Points to the TYPE3 SVRB with extended save area
*          R06 Points to the entrypoint of this routine
*          R07 Points to the ASCB requesting the service
*          R09 Used to address IGCTAB
*          R13 As before the SVC
*          R14 Contains the return address
*          R15 As before the SVC
*
*********************************************
         SPACE 3
IGC030   DS    0H
         BAL   R12,CHKLIST             Get a new list
         LTR   R15,R15                 SYSDSN found ?
         BZ    IGCEXEC                 No, leave
         BAL   R12,GETLIST             Get a new list
         CH    R15,=Y(04)              Use modified list ?
         BNE   IGCEXEC                 No, GETMAIN failure
         BAL   R12,MODLIST             Check list for DSN
         LM    R15,R01,RBEXR15(R05)    Get user parm regs
         SVC   X'30'
         ST    R15,RBEXR15(,R05)       Save true return code
         BAL   R12,RESTLIST            Restore list
         BAL   R12,FREELIST            FREEMAIN list
         OI    TCBFLGS7(R04),TCBSVCS   Set SVC screening
         LM    R14,R01,RBEXR14(R05)    Restore parm regs
         BR    R14                     Leave
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        Return code meanings from modlist are as follow:
*
*          R15 = 00   Run this SVC as usual
*          R15 / 00   Run this SVC, use modified parm list
*          R15 / 00   Run this SVC, use modified parm list            *
*                                                                     *
*********************************************
         SPACE 1                                                   V1.0
IGC038   DS    0H                                                  V1.0
         BAL   R12,CHKLIST             Get a new list              V1.0
         LTR   R15,R15                 SYSDSN found ?              V1.0
         BZ    IGCEXEC                 No, leave                   V1.0
         BAL   R12,GETLIST             Get a new list              V1.0
         CH    R15,=Y(04)              Use modified list ?         V1.0
         BNE   IGCEXEC                 No, GETMAIN failure         V1.0
         BAL   R12,MODLIST             Check list for DSN          V1.0
         LM    R15,R01,RBEXR15(R05)    Get user parm regs          V1.0
         SVC   X'38'                                               V1.0
         ST    R15,RBEXR15(,R05)       Save true return code       V1.0
         BAL   R12,RESTLIST            Restore list                V1.0
         BAL   R12,FREELIST            FREEMAIN list               V1.0
         OI    TCBFLGS7(R04),TCBSVCS   Set SVC screening           V1.0
         LM    R14,R01,RBEXR14(R05)    Restore parm regs           V1.0
         BR    R14                     Leave                       V1.0
         SPACE 1                                                   V1.0
         LTORG                                                     V1.0
         EJECT                                                     V1.0
         SPACE 3                                                   V1.0
***********************************************************************
*                                                                     *
*        Return code returned from CHKLIST are as follow:             *
*                                                                     *
*          R12 =      Return address                                  *
*          R15 = 00   Run this SVC as usual                           *
*          R15 / 00   Run this SVC, use modified parm registers       *
*                                                                     *
*********************************************
         SPACE 1                                                   V1.0
CHKLIST  DS    0H                                                  V1.0
         L     R01,RBEXR01(,R05)       Get my parm register        V1.0
         SLR   R15,R15                 Use callers list            V1.0
CHKLP01  DS    0H                                                  V1.0
         L     R02,04(,R01)            Get the major resource      V1.0
         CLC   0(08,R02),SYSDSN        Check list for SYSDSN       V1.0
         BNE   CHKLP02                 This is not SYSDSN          V1.0
         LA    R15,04                  Show modified               V1.0
CHKLP02  DS    0H                                                  V1.0
         LR    R02,R01                 Keep address                V1.0
         LA    R01,12(,R02)            Next entry                  V1.0
         TM    00(R02),X'80'           Last entry ?                V1.0
         BCR   1,R12                   Yes, return                 V1.0
         TM    02(R02),X'48'           Add UCB ?                   V1.0
         BNM   CHKLP01                 No                          V1.0
         TM    02(R02),X'08'           Add UCB ?                   V1.0
         BNO   CHKLP01                 No                          V1.0
         LA    R01,16(,R02)            Next entry                  V1.0
         B     CHKLP01                 Redo                        V1.0
         SPACE 1                                                   V1.0
         LTORG                                                     V1.0
         EJECT                                                     V1.0
         SPACE 3                                                   V1.0
****************************************************************-
*
*        Create a new ENQ - DEQ list
*
*        The following registers will be used and will not be
*        restored:
*
*          R00,R01,R02,R08,R15
*
*        On exit R08 contains the new ENQ/DEQ parameter list
*
*********************************************
         SPACE 1
GETLIST  DS    0H
         SLR   R08,R08                 No parameter list
         L     R01,RBEXR01(,R05)       Get my parm register
         SPACE 1
*        Scan for end of list and calculate size
         SPACE 1
GETLP01  DS    0H
         LR    R02,R01                 Keep address
         LA    R01,12(,R01)            Next entry
         LA    R08,12(,R08)            Size
         TM    00(R02),X'80'           Last entry ?
         BNO   GETLP01                 No, get next
         LR    R02,R14                 Save exit address
         SPACE 1
*        R08 contains the calculated ENQ/DEQ parameter size
         SPACE 1
         LA    R08,04(,R08)            Add length for prefix
         GETMAIN R,LV=(R08),SP=SPWRK
         LR    R14,R02                 Restore exit address
         LTR   R15,R15                 All done ?
         BZ    GETLP02
         SLR   R15,R15                 Perhaps GETMAIN error
         BR    R12                     Return
         SPACE 1
GETLP02  DS    0H
         ST    R08,00(,R01)            Save size
         LR    R00,R08                 Keep size
         SH    R00,=Y(4)               Subtract length field
         LA    R08,04(,R01)            Copy to address
         SPACE 1
*        Copy area, do not use MVCL, it takes too much regs
*        R01 current 'FROM', R02 current 'TO', R00 remaining size
         SPACE 1
         L     R01,RBEXR01(,R05)       Get my parm register
         LR    R02,R08                 Work register
         LA    R15,255
GETLP03  DS    0H
         SH    R00,=Y(256)             More than ?
         BM    GETLP04                 No
         EX    R15,COPY01              Copy ENQ/DEQ list
         LA    R01,01(R01,R15)         Next 'FROM'
         LA    R02,01(R02,R15)         Next 'TO'
         B     GETLP03                 Redo
         SPACE 1
GETLP04  DS    0H
         LR    R15,R00
         AH    R15,=Y(256)             Value previously subtracted
         BZ    GETLP05                 All done
         BCTR  R15,0
         EX    R15,COPY01
GETLP05  DS    0H
         LA    R15,04                  Set return code (go further)
         BR    R12                     Return
         SPACE 1
COPY01   MVC   0(00,R02),0(R01)
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        Modify callers list to point to SIHDSN instead of SYSDSN.
*        Scan til end of list.
*
*          R08 =      New parm list address
*
*        The following registers will be used and will not be
*        restored:
*
*          R00,R01,R02,R15
*
*********************************************
         SPACE 1
MODLIST  DS    0H
         L     R01,RBEXR01(,R05)       Get my parm register
         SLR   R15,R15                 Set return code
         LA    R00,SIHDSN              Get change address
MODLP01  DS    0H
         L     R02,04(,R01)            Get the major resource
         CLC   0(08,R02),SYSDSN        Check list for SYSDSN
         BNE   MODLP02                 This is not SYSDSN
         ST    R00,04(,R01)            Use SIHDSN
MODLP02  DS    0H
         LR    R02,R01                 Keep address
         LA    R01,12(,R02)            Next entry
         TM    00(R02),X'80'           Last entry ?
         BCR   1,R12                   Yes, return
         TM    02(R02),X'48'           Add UCB ?
         BNM   MODLP01                 No
         TM    02(R02),X'08'           Add UCB ?
         BNO   MODLP01                 No
         LA    R01,16(,R02)            Next entry
         B     MODLP01                 Redo
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        Restore the user pointers to the major resource in
*        callers list, using the previously created shadow
*        list.
*
*          R08 =       Shadow parm list address
*
*        The following registers will be used and will not be
*        restored:
*
*          R00,R01,R02,R15
*
*********************************************
         SPACE 1
RESTLIST DS    0H
         L     R01,RBEXR01(,R05)       Get my parm register
         LR    R02,R08                 Copy list address
         SLR   R15,R15                 Set return code
         SPACE 1
*        Scan til end of list
         SPACE 1
RESTLP01 DS    0H
         MVC   04(01,R01),04(R02)      Copy previous address
         TM    00(R01),X'80'           Last entry ?
         BCR   1,R12                   Yes, return
         LA    R00,12                  Next entry
         TM    02(R01),X'48'           Add UCB ?
         BNM   RESTLP02                No
         TM    02(R02),X'08'           Add UCB ?
         BNO   RESTLP02                No
         LA    R00,16                  Next entry
RESTLP02 DS    0H
         AR    R01,R00                 Next entry
         AR    R02,R00                 Next entry
         B     RESTLP01                Redo
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        Free the new gotten ENQ/DEQ parameter list.
*
*          R08         Parm list address
*
*        The following registers will be used and will not be
*        restored:
*
*          R00,R01,R02,R15
*
*********************************************
         SPACE 1
FREELIST DS    0H
         LR    R02,R14                 Keep R14
         SH    R08,=Y(04)              Start of parm list
         L     R14,00(,R08)            Size of list
         FREEMAIN R,LV=(R14),SP=SPWRK,A=(R08)
         LR    R14,R02                 Restore R14
         BR    R12                     Return to caller
         SPACE 1
         LTORG
         EJECT
         SPACE 3
*        Some other definitions
         SPACE 1
         DS    0D
SIHDSN   DC    CL8'SIHDSN'
SYSDSN   DC    CL8'SYSDSN'
         EJECT
         SPACE 3
****************************************************************-
*
*        This routine is responsible to EXECUTE the requested SVC
*        and return to the caller of the SVC.
*
*********************************************
         SPACE 3
IGCEXEC  DS    0H                      Common executer entry
         BAL   R14,IGCESVC             Run the SVC
         LM    R14,R01,RBEXR14(R05)    Restore my parmregs
         BR    R14                     Exit
         SPACE 1
         LTORG
         EJECT
         SPACE 3
****************************************************************-
*
*        This routine is responsible to execute the requested SVC
*        and to return to the caller.
*
*        RBEXTRC is used to save the return address.
*
*********************************************
         SPACE 3
IGCESVC  DS    0H
         ST    R14,RBEXTRC(,R05)       Save my return address
         SPACE 1
*        Set SVC screening off
         SPACE 1
         L     R10,RBLINK(,R05)        Address of previos RB
         SH    R10,=Y(2)               Point to IC
         SLR   R14,R14                 Clear for later use
         ICM   R14,3,0(R10)            Get interruption code
         NI    TCBFLGS7(R04),255-TCBSVCS  Reset SVC screening
         SPACE 1
*        Get users PK and callers register set and reexecute the SVC
         SPACE 1
*        MODESET EXTKEY=RBT234,WORKREG=10
         L     R10,RBLINK(,R05)        Previous RB
         SLL   R14,16                  Keep interruption code
         IC    R14,RBOPSW+01-RBBASIC(,R10)
         SPACE 1
*        Set all registers to its initial value.
*        Keep R06 and R14 (R14 contains PSW key and INT. code)
         SPACE 1
         LM    R15,R01,RBEXR15(R05)    Restore my registers
         SPACE 1
         DROP  R07
         SPACE 1
*        Get callers register set
*        Warning R05 must be the last register loaded
         SPACE 1
         LM    R07,R13,RBGRSAVE+R07*04(R05)
         LM    R02,R05,RBGRSAVE+R02*04(R05)
         SPKA  0(R14)                  Set PSW key
         SRL   R14,16                  Adjust key
         EX    R14,SVCEX               Reexecute the SVC
         SPACE 1
*        Go back to key zero to allow RB and TCB update
         SPACE 1
         MODESET EXTKEY=SUPR           Set key to zero
         SPACE 1
*        Get my registers back
         SPACE 1
         L     R03,FLCCVT              Get CVT
         L     R04,CVTTCBP(,R03)       Get TCB dispatch
         L     R04,TCBOLD(,R04)        Get my TCB
         L     R09,TCBSVCA2(,R04)      Get my screening table
         L     R05,TCBRBP(,R04)        Get my RB pointer
         L     R06,IGCADDR-IGCSTART(,R09) Get my base
         LA    R07,4094(,R06)          Get my second base
         SPACE 1
         USING SIHSVC+4094,R07
         SPACE 1
         SH    R09,=Y(IGCSTART-IGCTAB) Back up for ID
         STM   R15,R01,RBEXR15(R05)    Save my parameter registers
         OI    TCBFLGS7(R04),TCBSVCS   Set SVC screening
         L     R14,RBEXTRC(,R05)       Get my return address
         BR    R14                     Return now
         SPACE 1
SVCEX    SVC   0                       SVC by execute
         SPACE 1
         LTORG
         EJECT
****************************************************************-
*                                                                     *
*        This branch table is used to find the entrypoint to each     *
*        unique SVC. Fixed addresses (not relocatable) are used       *
*        sinc jobsvc is moved to SPCSA storage.                       *
*                                                                     *
*********************************************
         SPACE 3                                                   V1.0
SVCTABEX DS    0F                      Start of table              V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 00 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 01 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 02 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 03 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 04 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 05 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 06 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 07 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 08 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 09 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 0A Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 0B Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 0C Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 0D Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 0E Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 0F Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 10 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 11 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 12 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 13 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 14 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 15 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 16 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 17 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 18 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 19 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 1A Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 1B Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 1C Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 1D Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 1E Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 1F Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 20 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 21 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 22 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 23 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 24 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 25 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 26 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 27 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 28 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 29 Not used             V1.0
         DC    Y(IGC02A-SIHSVC)        SVC 2A ATTACH SVC           V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 2B Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 2C Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 2D Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 2E Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 2F Not used             V1.0
         DC    Y(IGC030-SIHSVC)        SVC 30 DEQUE processing     V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 31 Not used             V1.0
         DC    Y(IGCEXEC-SIHSVC)       SVC 32 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 33 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 34 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 35 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 36 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 37 Not used
         DC    Y(IGC038-SIHSVC)        SVC 38 ENQ processing
         DC    Y(IGCEXEC-SIHSVC)       SVC 39 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 3A Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 3B Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 3C Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 3D Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 3E Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 3F Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 40 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 41 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 42 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 43 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 44 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 45 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 46 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 47 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 48 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 49 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 4A Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 4B Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 4C Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 4D Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 4E Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 4F Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 50 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 51 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 52 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 53 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 54 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 55 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 56 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 57 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 58 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 59 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 5A Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 5B Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 5C Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 5D Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 5E Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 5F Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 60 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 61 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 62 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 63 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 64 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 65 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 66 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 67 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 68 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 69 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 6A Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 6B Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 6C Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 6D Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 6E Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 6F Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 70 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 71 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 72 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 73 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 74 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 75 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 76 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 77 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 78 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 79 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 7A Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 7B Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 7C Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 7D Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 7E Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 7F Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 80 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 81 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 82 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 83 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 84 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 85 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 86 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 87 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 88 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 89 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 8A Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 8B Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 8C Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 8D Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 8E Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 8F Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 90 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 91 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 92 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 93 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 94 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 95 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 96 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 97 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 98 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 99 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 9A Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 9B Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 9C Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 9D Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 9E Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC 9F Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A0 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A1 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A2 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A3 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A4 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A5 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A6 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A7 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A8 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC A9 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC AA Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC AB Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC AC Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC AD Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC AE Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC AF Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B0 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B1 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B2 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B3 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B4 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B5 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B6 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B7 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B8 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC B9 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC BA Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC BB Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC BC Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC BD Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC BE Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC BF Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C0 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C1 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C2 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C3 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C4 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C5 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C6 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C7 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C8 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC C9 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC CA Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC CB Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC CC Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC CD Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC CE Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC CF Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D0 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D1 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D2 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D3 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D4 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D5 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D6 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D7 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D8 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC D9 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC DA Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC DB Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC DC Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC DD Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC DE Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC DF Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E0 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E1 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E2 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E3 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E4 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E5 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E6 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E7 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E8 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC E9 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC EA Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC EB Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC EC Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC ED Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC EE Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC EF Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F0 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F1 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F2 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F3 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F4 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F5 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F6 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F7 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F8 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC F9 Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC FA Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC FB Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC FC Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC FD Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC FE Not used
         DC    Y(IGCEXEC-SIHSVC)       SVC FF Not used
         SPACE 1
         LTORG
         SPACE 1
SIHSVCE  DS    0D                      End of CSECT SIHSVC
         SPACE 1
         DROP  R06
         DROP  R07
         DROP  R09
         EJECT
         SPACE 3
SVCTAB   DSECT
         SVCTAB
         EJECT
         SPACE 3
****************************************************************-
*
*        This is the non reentrant part of SYSIEH. It is common
*        to all SYSIEH CSECTS.
*
*********************************************
         SPACE 3
SIEHWRK  DSECT
         SPACE 1
*        This SPACE is RESERVED for SYSIEH
         SPACE 1
SIEHEYE  DC    CL8'SIEHWRK'            Name of block
SIHSIZE  DC    F'0'                    Size and subpool
ABNDSAVE DC    16F'0'                  Abend save area
         SPACE 1
FSAVE    DC    18F'0'                  Standart MVS save
         DC    18F'0'                  Standart MVS save
         DC    18F'0'                  Standart MVS save
LSAVE    DC    18F'0'                  Standart MVS save
         SPACE 1
WTOBUFFA DC    XL256'00'               WTO work area
WTORREPL DC    XL119'00'               WTOR reply area
ECBLIST  DC    A(0),A(0)               Wait list
ATTECB   DC    F'00'                   Attach ECB
WTORECB  DC    F'00'                   WTOR ECB
SIEHSVC  DC    A(0)                    Address of SVC screening module
ATTTCB   DC    F'00'                   Attached TCB
         SPACE 1
SIHBTTL  ATTACH SF=L
SIHBTTLE DS    0F                      End of list
SIHBNAME DS    CL8                     Name of tested program
TESTECB  DC    A(0)                    SYSIEH awaits completion
TESTTCB  DC    A(0)                    TCB address of tested job
TESTCMP  DC    A(0)                    TCB return code field
SIHRET   DC    A(0)                    SIH return code field of
*                                       -  the task to be tested.
INITSAVE DC    A(0)                    Address of first save area
SIHBEND  DS    0D                      End of area
         SPACE 3
         END
