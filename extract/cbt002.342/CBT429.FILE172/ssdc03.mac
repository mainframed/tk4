SSDC03   TITLE 'DATA DE-COMPRESSION UTILITY'
***********************************************************************
*        PDSDOC *DATA UTILITY 2 - EXPAND   DATA.......................*
*                                                                     *
*        PROGRAM ID. :             SSDC03                             *
*                                                                     *
*        DATE WRITTEN :            JULY      1990                     *
*                                                                     *
*        AUTHOR :                  D.H.CARTWRIGHT.                    *
*                                                                     *
*        LOCATION :                SPRECHER ENERGIE                   *
*                                  KIRCHWEG 5                         *
*                                  5036 OBERENTFELDEN                 *
*                                  SWITZERLAND                        *
*                                                                     *
*        HISTORY  :                                                   *
*                                                                     *
* 12JUL90 CART1 WROTE PROGRAM.                                        *
* 19JUL90 CART1 MOVED TEST FOR RDW TO END OF EXPAND                   *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        PURPOSE                                                      *
*       ---------                                                     *
*                                                                     *
* THIS PROGRAM IS PART OF THE SIMPLE SOFTWARE RECORD COMPRESSION      *
* AND DECOMPRESSION SYSTEM.  IT IS DESIGNED TO BE USED WITH THE       *
* SSDC02 COMPRESSION UTILITY. THIS PROGRAM WILL DE-COMPRESS DATA      *
* TO ITS ORIGINAL FORMAT. NOTE THAT THE USER MUST SUPPLY DCB          *
* INFORMATION FOR THE OUTPUT, IT IS NOT REMEMBERED FROM THE           *
* ORIGINAL FILE.                                                      *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        LIMITATIONS                                                  *
*       ------------                                                  *
*                                                                     *
* THIS PROGRAM WILL ONLY PROCESS SEQUENTIAL DATASETS HAVING           *
* DEFINED RECORD FORMATS; IT WILL NOT PROCESS RECFM=U FILES.          *
*                                                                     *
* THE COMPRESSION/DECOMPRESSION SEQUENCE IS DESIGNED TO USE           *
* VARIABLE LENGTH RECORDS FOR THE COMPRESSED DATA. IT SHOULD          *
* WORK WITH FIXED LENGTH RECORDS, BUT ON DECOMPRESSION SOME           *
* EXTRA RECORDS CONTAINING HEX '00' MAY BE APPENDED TO THE DATA.      *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*       INPUT                                                         *
*       -----                                                         *
*                                                                     *
* 1)SYSUT1 - DEFINES THE INPUT FILE                                   *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*       OUTPUT                                                        *
*       ------                                                        *
*                                                                     *
* 1)SYSUT2 - DEFINES THE OUTPUT FILE. DCB INFORMATION MUST BE         *
*            GIVEN, PREFERRABLY SIMILAR TO THE ORIGINAL DATA FILE.    *
*            IF A LRECL IS DEFINED WHICH IS DIFFERENT TO THE          *
*            ORIGINAL DATA THE RESULTS ARE UNPREDICTABLE.             *
*                                                                     *
* 2)WTO MESSAGE GIVING INPUT AND OUTPUT RECORD COUNTS                 *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
*        PRINT ON,GEN              SHOW MACRO EXPANSIONS
         PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS
         SPACE 1
SSDC03   CSECT
         SPACE 1
***********************************************************************
*        REGISTER EQUATES AND USAGES.                                 *
***********************************************************************
         SPACE 1
R0       EQU   0
R1       EQU   1                   WORK
R2       EQU   2                   DCB TABLE POINTER
REG2     EQU   R2                  WORK REGISTER IN 'SCAN' MACRO
R3       EQU   3
R4       EQU   4                   LINKAGE RETURN
R5       EQU   5                   STRING LENGTH
R6       EQU   6                   INPUT POINTER
R7       EQU   7                   INPUT LENGTH
R8       EQU   8                   OUTPUT POINTER
R9       EQU   9
R10      EQU   10
R11      EQU   11                  END OF INPUT POINTER
R12      EQU   12                  END OF OUTPUT POINTER
R13      EQU   13                  SAVE AREA / BASE REG. 1
R14      EQU   14                  WORK
R15      EQU   15
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13) STANDARD HOUSEKEEPING
         GOSUB INITIAL             PERFORM INITIALISATION
         EJECT
***********************************************************************
*        MAIN PROCESSING ROUTINE                                      *
***********************************************************************
         SPACE 1
MAINLINE DS    0H                  PROGRAM FUNCTION
         SPACE 1
         BAL   R4,SYSUT1RD         GO GET SOME DATA
         BAL   R4,EXPAND           GO DE-COMPRESS IT
         B     MAINLINE            GO ROUND THE LOOP
         EJECT
***********************************************************************
*        END OF PROCESSING. TIDY UP, REPORT AND LEAVE.                *
***********************************************************************
         SPACE 1
STOPPGM  DS    0H                  NOW SHUTTING DOWN
         BAL   R4,SYSUT2WT         GO OUTPUT LAST BUFFER
         GOSUB REPORT              GO ISSUE FINAL REPORT
         SPACE 3
***********************************************************************
*        CLOSE ANY OPEN DATASETS                                      *
***********************************************************************
         SPACE 1
CLOSEM   DS    0H                  FINAL CLOSES
         LA    R3,MAXDS            ESTABLISH LOOP COUNT
         LA    R2,DCBTABLE         POINT R2 AT DCB TABLE
         USING MDCB,R2             ESTABLISH DCB TABLE ADDRESSABILITY
         SPACE 1
LOOPEND  DS    0H                  CLOSE FILES LOOP
         MVC   MDCBCLOS,=CL8'REWIND' SET FINAL CLOSE OPTION
         GOSUB CLOSE               GO CLOSE A FILE
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,LOOPEND          PROCESS NEXT DATA SET
         SPACE 2
ENDOFPGM DS    0H                  NOW SHUTTING DOWN
         PGMOUT RC=RETCODE         EXIT PROGRAM
         SPACE 1
         DROP  R2                  END MDCB ADDRESSABILITY
         TITLE 'INITIALISATION PROCESSING'
***********************************************************************
*        TEST AND OPEN THE DD'S SUPPLIED.                             *
***********************************************************************
         SPACE 1
INITIAL  DS    0H                  PROGRAM INITIALISATION
         SUBIN SAVE=(R4)           SUBROUTINE ENTRY
         LA    R3,MAXOPEN          ESTABLISH LOOP COUNT
         LA    R2,DCBTABLE         POINT R2 AT DCB TABLE
LOOP0    OI    0(R2),DDINT         INDICATE DD INTEREST
         GOSUB TESTIOT             GO TEST IF DD STATEMENT PRESENT
         GOSUB OPEN                GO OPEN IT IF PRESENT
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,LOOP0            PROCESS NEXT DATA SET
         SPACE 2
         SR    R0,R0               CLEAR REG. ZERO
         LA    R2,SYSUT2           POINT TO OUTPUT DCB
         USING IHADCB,R2           ESTABLISH DCB ADDRESSABILITY
         TM    DCBRECFM,DCBRECV    ARE THEY VARIABLE LENGTH RECORDS?
         BNO   *+4+4               NO,SKIP FLAG
         OI    RUNFLAG,OUTVAR      YES, REMEMBER THIS
         SR    R9,R9               CLEAR LENGTH REGISTER
         ICM   R9,B'0011',DCBLRECL GET RECORD LENGTH
         LR    R0,R9               COPY OUTPUT LENGTH
         ST    R9,BUFFLEN          REMEMBER WORKING LENGTH
         GETMAIN R,LV=(0)          GET A WORK AREA FOR ONE RECORD
         ST    R1,BUFFADD          SAVE ITS ADDRESS
         LR    R8,R1               SET OUTPUT POINTER
         LA    R12,0(R8,R9)        SET END OF OUTPUT POINTER
         ST    R12,BUFFEND         SAVE ITS ADDRESS
         BAL   R4,CLEAR            GO CLEAR THE BUFFER
         SPACE 2
INITIALX DS    0H                  END OF INITIALISATION
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         SPACE 1
         DROP  R2                  FINISHED WITH DCB
         TITLE 'DATA DE-COMPRESSION PROCESSING'
***********************************************************************
*        COPY ACROSS THE DATA TO RECEIVING FIELD
***********************************************************************
         SPACE 2
EXPAND   DS    0H                  DE-COMPRESS DATA
         SUBIN SAVE=(R4)           SUBROUTINE ENTRY
         XR    R5,R5               CLEAR LENGTH REGISTER
EXPLOOP  DS    0H
         CR    R8,R12              END OF OUTPUT BUFFER?
         BL    EXPLOOP2            NO, CONTINUE
         BAL   R4,SYSUT2WT         YES, OUTPUT BUFFER
         SPACE 1
EXPLOOP2 DS    0H                  FILL OUTPUT BUFFER
         IC    R5,0(R6)            LOAD FIRST/NEXT STRING CONTROL BYTE
         N     R5,=F'127'          STRIP OFF TOP BIT
         TM    0(R6),SCBDUP        STRING IS DUPLICATE ?
         BZ    NOTDUP              NO. GO COPY FULL STRING
         MVC   0(1,R8),1(R6)       MOVE NEXT BYTE IN
         BCTR  R5,0                SUBTRACT ONE MORE FOR PROPAGATE
         EX    R5,DUPMOVE          DUPLICATE THE CHARACTER
         B     EXPLOOPX            GO PROCESS THE NEXT STRING
NOTDUP   DS    0H
         EX    R5,NONDUPMV         COPY ACROSS THE NON-DUP STRING
EXPLOOPX DS    0H
         TM    RUNFLAG,OUTRDW      WAS STRING AN RDW?
         BNO   EXPUP               NO, CONTINUE
         SR    R12,R12             CLEAR END POINTER
         ICM   R12,B'0011',0(R8)   PICK UP LENGTH OF OUTPUT
         BNZ   *+4+4               OK IF A VALUE
         DC    X'00000000'         ELSE ABEND S0C1
         A     R12,BUFFADD         WORK OUT NEW END POINT
         NI    RUNFLAG,FF-OUTRDW   RESET RDW FLAG
EXPUP    DS    0H                  INCREMENT POINTERS
         TM    0(R6),SCBDUP        STRING IS DUPLICATE ?
         BZ    EXPUP1              NO. INCREMENT BY COUNT
         LA    R6,2(R6)            ADDRESS OF NEXT CONTROL BYTE
         LA    R8,2(R5,R8)         ADDRESS NEXT RECEIVING FIELD
         LA    R9,2(R5,R9)         INCREMENT OUTPUT LENGTH
         B     EXPUPPED            GO PROCESS THE NEXT STRING
EXPUP1   DS    0H                  INCREMENT POINTERS
         LA    R6,2(R5,R6)         ADDRESS OF NEXT CONTROL BYTE
         LA    R8,1(R5,R8)         ADDRESS NEXT RECEIVING FIELD
         LA    R9,1(R5,R9)         INCREMENT OUTPUT LENGTH
EXPUPPED DS    0H                  INCREMENT POINTERS
         CR    R6,R11              END OF ALL DATA ?
         BL    EXPLOOP             NO. CONTINUE WITH THE LOOP
         SPACE 2
EXPANDX  DS    0H                  END OF DE-COMPRESSION ROUTINE
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         SPACE 2
DUPMOVE  MVC   1(0,R8),0(R8)       EXECUTED TO PROPAGATE DUP CHAR
NONDUPMV MVC   0(0,R8),1(R6)       EXECUTED TO COPY A NON-DUP STRING
         TITLE 'SUB-ROUTINES'
***********************************************************************
*        REPORT GENERATION                                            *
***********************************************************************
         SPACE 1
REPORT   SUBIN SAVE=(R4)
         MVC   MSG01IN,MSG01MSK    COPY EDIT MASK TO INPUT COUNT
         ED    MSG01IN,CNTSUT1+3   MAKE INPUT COUNT PRINTABLE
         MVC   MSG01OUT,MSG01MSK   COPY EDIT MASK TO OUTPUT COUNT
         ED    MSG01OUT,CNTSUT2+3  MAKE OUTPUT COUNT PRINTABLE
         WTO   MF=(E,SSDC0301)     ISSUE COUNTS MESSAGE
         SPACE 1
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         EJECT
***********************************************************************
*        CLEAR WORK BUFFER                                            *
***********************************************************************
         SPACE 1
CLEAR    DS    0H                  BUFFER CLEAR ROUTINE
         SUBIN SAVE=(R2,R3,R4,R5)  SUBROUTINE ENTRY
         SR    R2,R2               CLEAR WORK REGISTER
         SR    R3,R3               CLEAR WORK REGISTER
         L     R4,BUFFADD          GET BUFFER ADDRESS
         L     R5,BUFFLEN          AND LENGTH
         MVCL  R4,R2               CLEAR BUFFER TO ZEROES
         TM    RUNFLAG,OUTVAR      OUTPUT VARIABLE LENGTH?
         BNO   *+4+4               NO, CONTINUE
         OI    RUNFLAG,OUTRDW      YES, REMEMBER FIRST STRING IS RDW
         SPACE 1
         SUBOUT RESTORE=(R2,R3,R4,R5) RETURN TO CALLER
         EJECT
***********************************************************************
*        READ SUBROUTINE FOR SYSUT1                                   *
***********************************************************************
         SPACE 1
SYSUT1RD DS    0H                  READ AN INPUT RECORD
         SUBIN ,                   SUBROUTINE ENTRY
         LA    R2,SYSUT1           POINT TO DCB
         USING IHADCB,R2           ESTABLISH DCB ADDRESSABILITY
         TM    SYSUT1SW,DDINT+DDPRES+DDOPEN TEST IF NEED TO READ
         BNO   STOPPGM             SIMULATE EOF WHEN NO DD CARD
         GET   (R2)                READ IN A RECORD
         AP    CNTSUT1,ONE         INCREMENT RECORD COUNTER
         LR    R6,R1               SET RECORD POINTER
         SR    R7,R7               CLEAR LENGTH REGISTER
         ICM   R7,B'0011',DCBLRECL GET RECORD LENGTH
         TM    DCBRECFM,DCBRECV    ARE THEY VARIABLE LENGTH RECORDS?
         BNO   SYSUT1R2            NO, USE DCBLRECL VALUE
         ICM   R7,B'0011',0(R6)    ELSE GET LENGTH FROM RDW
         LA    R6,4(,R6)           SKIP OVER RDW
         SH    R7,=H'4'            AND SUBTRACT IT FROM THE LENGTH
         SPACE 1
SYSUT1R2 DS    0H                  GOT AN INPUT RECORD
         LA    R11,0(R6,R7)        SET END OF INPUT
         SPACE 1
SYSUT1RX DS    0H                  RETURN TO CALLER
         SUBOUT ,                  SUBROUTINE EXIT
         DROP  R2                  FINISHED WITH DCB
         EJECT
***********************************************************************
*        WRITE SUBROUTINE FOR SYSUT2                                  *
***********************************************************************
         SPACE 1
SYSUT2WT DS    0H                  WRITE A RECORD TO SYSUT2
         SUBIN SAVE=(R2,R4)        SUBROUTINE ENTRY
         LA    R2,SYSUT2SW         POINT TO FILE CONTROL BLOCK
         USING MDCB,R2             ESTABLISH ADDRESSABILITY
         TM    MDCBFLAG,DDPRES+DDOPEN TEST IF ABLE TO WRITE
         BZ    SYSUT2WX            BRANCH IF NO DDCARD
         BO    *+4+4               YES, CONTINUE
         GOSUB OPEN                NO, GO OPEN IT
         L     R2,MDCBDCB          GET DCB ADDRESS
         DROP  R2                  FINISHED WITH MDCB
         SPACE 1
         L     R8,BUFFADD          REFRESH BUFFER POINTER
         PUT   (2),(8)             OUTPUT REQUEST
         BAL   R4,CLEAR            GO CLEAR THE BUFFER
         AP    CNTSUT2,ONE         INCREMENT RECORD COUNTER
         SPACE 1
SYSUT2WX DS    0H                  RETURN TO CALLER
         SUBOUT RESTORE=(R2,R4)    SUBROUTINE EXIT
         EJECT
*        ON ENTRY    R1 --> DCB                                       *
***********************************************************************
*        SUPPLY DEFAULT RECORD LENGTH AND/OR BLOCK SIZE               *
*         IF NOT CODED.                                               *
***********************************************************************
         SPACE 1
BLKSZRTN SUBIN ,                   SUPPLY DEFAULT LRECL AND/OR BLKS
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         TM    DCBRECFM,X'FF'      ANY RECORD FORMAT?
         BNZ   *+4+4               YES, SKIP SETTING DEFAULT
         OI    DCBRECFM,DCBRECV    DEFAULT VARIABLE LENGTH RECORDS?
         LH    R4,DCBLRECL         GET LRECL VALUE
         LTR   R4,R4               ANY SUPPLIED?
         BNZ   *+4+4+4             YES, SKIP SETTING DEFAULT
         L     R4,DEFLTLR          DEFAULT LRECL - HALF TRACK 3380
         STH   R4,DCBLRECL         SET DEFAULT
         LH    R4,DCBLRECL         RE-FETCH LRECL VALUE
         TM    DCBRECFM,DCBRECV    ARE THEY VARIABLE LENGTH RECORDS?
         BO    *+4+4               NO, DO NOT ADD BDW
         LA    R4,4(R4)            DEFAULT BLOCKSIZE INCLUDES BDW
         OC    DCBBLKSI,DCBBLKSI   HOW ABOUT BLOCKSIZE
         BNZ   0(R14)              YES, RETURN TO OPEN
         STH   R4,DCBBLKSI         SET DEFAULT
         SUBOUT RETURN=(R14)       RETURN TO OPEN ROUTINES
         SPACE 1
         DROP  R1                  END DCB ADDRESSING
         SPACE 3
***********************************************************************
*        TEST IF A DD STATEMENT IS PRESENT BEFORE OPEN                *
***********************************************************************
         SPACE 1
TESTIOT  SUBIN ,                   TEST TASK INPUT/OUTPUT TABLE
         TESTIOT DDNAME=4(R2)      TEST IF DDNAME FOUND IN TIOT
         B     *+4(R15)            TEST CONDITION CODE
         OI    0(R2),DDPRES        TELL THAT DD STATEMENT SUPPLIED
         SUBOUT ,                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*        READJFCB ROUTINE                                             *
***********************************************************************
         SPACE 2
READJFCB SUBIN SAVE=(R3)           SUBROUTINE ENTRY
         TM    0(R2),DDINT+DDPRES  ARE WE ABLE TO PROCESS?
         BNO   RJFCBXIT            NO,GIVE UP
         L     R3,0(,R2)           GET DCB ADDRESS
         RDJFCB ((R3))             READ THE JFCB
         SPACE 1
RJFCBXIT DS    0H                  RETURN TO CALLER
         SUBOUT RESTORE=(R3)       SUBROUTINE EXIT
         EJECT
***********************************************************************
*        OPEN ROUTINE                                                 *
***********************************************************************
         SPACE 1
OPEN     SUBIN SAVE=(R3,R4)        OPEN DATA SET
         USING MDCB,R2             ESTABLISH DD LIST ADDRESSABILITY
         TM    MDCBFLAG,DDINT+DDPRES TEST IF DD INTERESTING AND
         BNO   OPENX               BRANCH IF NO    / PRESENT.
         TM    MDCBFLAG,DDOPEN     TEST IF DD ALREADY OPEN
         BO    OPENX               BRANCH IF OPEN
         L     R3,MDCBDCB          GET DCB ADDRESS
         CLC   MDCBOPEN,=CL8'INPUT' TEST FOR INPUT D/S
         BE    OPENZ               BRANCH IF INPUT D/S
         CLC   MDCBOPEN,=CL8'OUTPUT' TEST FOR OUTPUT D/S
         BE    OPENW               BRANCH IF INPUT D/S
         CLC   MDCBOPEN,=CL8'EXTEND' TEST FOR EXTEND D/S
         BNE   OPENX               GIVE UP IF NOT KNOWN
         OPEN  ((R3),(EXTEND))     OPEN EXTEND DATA SET
         B     OPENY               GO SET SWITCH
OPENW    OPEN  ((R3),(OUTPUT))     OPEN OUTPUT DATA SET
         B     OPENY               GO SET SWITCH
OPENZ    OPEN  ((R3),(INPUT))      OPEN INPUT DATA SET
OPENY    OI    MDCBFLAG,DDOPEN     INDICATE DATA SET OPEN
OPENX    SUBOUT RESTORE=(R3,R4)     RETURN TO CALLER
         SPACE 2
***********************************************************************
*        CLOSE ROUTINE                                                *
***********************************************************************
         SPACE 1
CLOSE    SUBIN SAVE=(R3)           CLOSE DATA SET
         TM    MDCBFLAG,DDOPEN     TEST IF DATA SET OPEN
         BZ    CLOSEX              EXIT IF NOT
         L     R3,MDCBDCB          GET DCB ADDRESS
         CLC   MDCBCLOS,=CL8'LEAVE' TEST FOR REPOSITIONING
         BNE   CLSNLV              REPOSITIONING REQUIRED
         CLOSE ((R3),LEAVE)        CLOSE DATA SET, NO REPOSITION
         B     CLOSEX              GO RESET SWITCH
         SPACE 1
CLSNLV   DS    0H                  CLOSE WITH DEFAULT OPTIONS
         CLOSE ((R3))              CLOSE DATA SET
         SPACE 1
CLOSEX   DS    0H                  RETURN TO CALLER
         NI    MDCBFLAG,FF-DDOPEN  SET OFF 'OPEN' SWITCH
         SUBOUT RESTORE=(R3)       SUBROUTINE EXIT
         SPACE 1
         DROP  R2                  END DD LIST ADDRESSABILITY
         TITLE 'DATA AREAS'
BEGSNAP  DS    0D                  SNAP DATA AREAS FOLLOWING
***********************************************************************
*        CONSTANTS AND WORK AREAS                                     *
***********************************************************************
         SPACE 2
         DS    0F                  GET ADDRESSES ALIGNED
DEFLTLR  DC    A(23472)            DEFAULT LRECL - HALF 3380 TRACK
BUFFADD  DC    A(0)                OUTPUT CONSTRUCTION AREA ADDRESS
BUFFEND  DC    A(0)                END OF CONSTRUCTION AREA ADDRESS
BUFFLEN  DC    A(0)                OUTPUT AREA LENGTH
         SPACE 1
DWORK1   DC    D'0'                DOUBLEWORD WORK AREA
ZEROWORD DC    F'0'                A LOT OF NOTHING
COMPCODE DC    H'0'                PROGRAM COMPLETION CODE
RETCODE  DC    H'0'                MACRO RETURN CODE SAVE AREA
MAXLEN   DC    H'128'              MAXIMUM STRING LENGTH
         SPACE 1
CNTSUT1  DC    PL8'0'              INPUT  RECORD COUNT FIELD
CNTSUT2  DC    PL8'0'              OUTPUT RECORD COUNT FIELD
ONE      DC    PL1'1'              COUNT INCREMENT
SIGN     EQU   X'F0'               POSITIVE PACKED SIGN
SCBDUP   EQU   X'80'               SCB BYTE FLAG. THIS IS A DUP STRING
         SPACE 1
RUNFLAG  DC    X'00'               RUN TIME FLAG BYTE
OUTVAR   EQU   X'80'               OUTPUT VARIABLE LENGTH RECORDS
OUTRDW   EQU   X'08'               NEXT OUTPUT FIELD IS THE RDW
         TITLE 'LITERAL POOL'
***********************************************************************
*        LITERAL POOL                                                 *
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL GOES HERE
         TITLE 'DCB''S AND I/O CONTROL TABLES'
***********************************************************************
*        DCB'S TABLE                                                  *
***********************************************************************
         SPACE 1
DCBTABLE DS    0F
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'SYSUT1',CL8'INPUT',CL8' '
DCBNTRY  EQU   *-DCBTABLE          LENGTH OF ONE TABLE ELEMENT
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'SYSUT2',CL8'OUTPUT',CL8'LEAVE'
OPENSIZE EQU   *-DCBTABLE          TABLE SIZE OF FULL TIME FILES
MAXOPEN  EQU   OPENSIZE/DCBNTRY    MAXIMUM NUMBER OF DCB'S TO OPEN
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUM NUMBER OF DCB'S
         SPACE 1
DDBYPASS EQU   128                 DD NON-PROCESS
DDINT    EQU   16                  DD INTEREST
DDPRES   EQU   8                   DD PRESENT
DDOPEN   EQU   1                   DATA SET IS OPEN
FF       EQU   255                 ALL BITS ON
         SPACE 2
         SPACE 1
EXITLIST DC    X'05',AL3(BLKSZRTN) ENTRY FOR DCB MODIFICATION
         DC    X'87',AL3(IHAJFCB)  ENTRY FOR READJFCB
         SPACE 2
         EJECT ,
***********************************************************************
*        DATA CONTROL BLOCKS                                          *
***********************************************************************
         SPACE 1
SYSUT1   DCB   DDNAME=SYSUT1,                                          *
               DSORG=PS,                                               *
               EODAD=STOPPGM,                                          *
               EXLST=EXITLIST,                                         *
               MACRF=GL
         SPACE 3
SYSUT2   DCB   DDNAME=SYSUT2,                                          *
               DSORG=PS,                                               *
               EXLST=EXITLIST,                                         *
               MACRF=PM
         SPACE 2
SNAPDCB  DCB   DDNAME=SNAP,DSORG=PS,MACRF=W,                           *
               RECFM=VBA,LRECL=125,BLKSIZE=882
         TITLE 'WTO MESSAGE SKELETONS'
SSDC0301 WTO   'SSDC0301 RECORDS 999,999,999 IN, 999,999,999 OUT',     X
               ROUTCDE=(11),MF=L   ROUTE TO LOG
         SPACE 1
*        OFFSETS IN MESSAGE DATA LINES
         SPACE 1
MSG01NUM EQU   SSDC0301+4,8        MESSAGE NUMBER
MSG01IN  EQU   SSDC0301+4+16,12    INPUT COUNT
MSG01OUT EQU   SSDC0301+4+32,12    OUTPUT COUNT
MSG01MSK DC    X'402020206B2020206B202120' COUNT EDIT MASK
         SPACE 2
WTOIOE   DS    0F
         DC    AL2(WTOEND-*),H'0',CL109'******** - I/O ERROR -'
WTOEND   EQU   *
         TITLE 'JFCB AREA'
***********************************************************************
*        JOB FILE CONTROL BLOCK STORAGE                               *
***********************************************************************
         SPACE 1
IHAJFCB  DS    0CL176              JFCB AREA
         IEFJFCBN
         SPACE 3
EOSNAP   DS    0H                  END OF STORAGE AREA TO BE SNAPPED
         TITLE 'DSECT MAPS'
***********************************************************************
*        DD TABLE ENTRY FORMAT                                        *
***********************************************************************
         SPACE 1
MDCB     DSECT ,                   FORMAT OF A DCB TABLE ENTRY
MDCBDCB  DS    0F                  DCB POINTER
MDCBFLAG DS    XL1                 FLAGS
         DS    AL3                 ADDRESS OF DCB
MDCBDDNM DS    CL8'DDNAME'         DDNAME
MDCBOPEN DS    CL8'INPUT'          TYPE OF OPEN REQUIRED
MDCBCLOS DS    CL8'REREAD'         TYPE OF CLOSE REQUIRED
         SPACE 1
MDCBLEN  EQU   *-MDCB              LENGTH OF ONE TABLE ENTRY
         EJECT
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT ON,NOGEN            SYSTEM DSECT EXPANSION OPTION
         SPACE 3
         DCBD  DSORG=PS,DEVD=DA    DCB DSECT
         SPACE 3
         POP   PRINT               RESTORE PRINT STATUS
         END
