
               .-----------------------------------.
               ×                                   ×
               ×     How to use the SDSF SVC       ×
               ×                                   ×
               '-----------------------------------'

This is a documentation file that shows how a program
can use the SDSF SVC to switch to KEY=1,MODE=SUP.

The SDSF SVC is an alternative to the TSO/E Service Routine
(IKJEFTSR) that allows selected programs running under TSO, ISPF,
or in batch to issue MODESET or access other authorized functions.

When running in batch, using the SDSF SVC instead of AC=1 offers
the advantage of not having to authorize the whole step:  selected
sub-routines can be designed to use the SDSF SVC when (and only
when) they need to access system functions that require
authorization.

In the TSO environment (batch or on-line), the SDSF SVC offers
two advantages over IKJEFTSR:

1.  you don't have to update the table in IKJTSOxx

2.  your program can access ISPF services

The SDSF SVC is a type-3 extended SVC routine to which IBM
has assigned the extended routing code 11; this means that
the SDSF SVC is the IGX00011 module in your system's LPA.
It is supplied in source format in the ISFSVC member of
the ISFSRC library.

The following sequence of instructions may be used to invoke
the SDSF SVC:

           LA    R0,0           R0 contains zero
           LA    R1,1           R1 contains one
           LA    R15,11         R15 contains the ESR number
           SVC   109            Type-3 Extended SVC Router (ESR)
           LTR   R15,R15        R15 contains zero or an error code
           BNZ   SVCFAILED      Error, quit

Unlike MODESET, any program can invoke the SDSF SVC without
getting an abend (provided, of course, that IGX00011 is present on
the system).  However, you must follow strict coding rules if you
want the SVC to actually do something for you.  In other words,
the SDSF SVC is not one of these "magic SVCs" open to everyone.

Before it switches you to KEY=1,MODE=SUP, the SDSF SVC
checks that ALL of the following conditions are met:

1. the program comes from an APF-authorized library

2. the program has the "rent" attribute

3. the first 3 characters of the program name are ISF;
   (the program name is the name of the load-module, the CSECT
   name can be anything you choose).  If you want to invoke the
   program using another name (something meaningful, perhaps), you
   can define that other name as an alias.  Of course, the ISF
   name you choose should not conflict with that of an actual ISF
   load-module; to be safe, use something like ISF#ABCD.

4. the program must start with a specific prefix, the format of
   which depends on the program's AMODE when SVC 109 is issued
   (see the examples, below).  The prefix contains an ACON that
   points to the first instruction after the SVC 109; this limits
   you to having a single SVC 109 in your program.

5. the program must be invoked via LINK or ATTACH (i.e. the
   current PRB must point to it)

6. the program may NOT be invoked via XCTL

7. if the program establishes an ESTAE recovery environment,
   it must do so AFTER the SDSF SVC has been invoked

Notes:

1. Scary as it seems to security auditors, the SDSF SVC does not
   introduce any particular breach in the security system, since
   it can only be used by programs coming from an APF-authorized
   library.  Anyone who can link into an APF-authorized library
   can use the SDSF SVC and issue MODESET in TSO, but anyone who
   can link into an APF-authorized library can link with AC=1 and
   issue MODESET directly by executing the program in batch.
   There are, however, special considerations to be aware of when
   writing programs that invoke ISPF services.

2. The SDSF SVC can also switch you back to KEY=NZERO,MODE=PROB,
   but it's much simpler to use MODESET.

3. You don't need to specify AC=1 when you link the program

4. A program loaded from an authorized library that has the
   RENT attribute is loaded into KEY 0 storage (SP 252)
   and may not modify itself.

5. SDSF uses KEY 1 (the JES key) to access JES2 control blocks in
   fetch-protected storage;  I find convenient to switch to KEY 8
   immediately by issuing MODESET KEY=NZERO,MODE=SUP; the program
   retains authorization thru MODE=SUP but may not inadvertantly
   overlay storage it shouldn't.


Coding programs that invoke ISPF services

   The SDSF SVC is a convenient way to get authorized in the ISPF
   environment (I believe it's been designed just for that).
   However, be careful NOT to propagate the authorization to other
   programs, in particular to ISPEXEC or ISPLINK.

   If you invoke ISPF services using CALL (or BALR), LINK, ATTACH,
   or XCTL, then your PSW key and mode are transferred to ISPF.
   This is also true if you invoke another program directly.
   Transferring control outside an authorized program while
   in KEY=ZERO and/or MODE=SUP may result in the following:

   1. an S306 abend if ISPF (or another program) tries to
      access a module from a non-authorized library

   2. the condition may have been created under which a program
      that is not supposed to run authorized will run authorized;
      this clearly violates elementary security rules.

   To prevent this, you must:

   1. issue MODESET KEY=NZERO,MODE=PROB before invoking ISPF or
      another program, or

   2. use the SYNCH macro with the RESTORE=YES option, which,
      by default, passes control with KEY=NZERO,MODE=PROB
      and ensures that the contents of the registers
      are not changed by the invoked routine.

   3. prevent un-authorized programs from modifying (maliciously
      or by mistake), work areas that are critical to your program
      (such as save area, switches or branch tables).  Note that
      your program itself is safe (the SDSF SVC ensures that it
      has been loaded in key 0 storage and therefore cannot be
      altered by a non-authorized user).  But other non-reentrant
      modules that you have loaded (or storage that you have
      GETMAIN'd) could be vulnerable.  Allocate all critical
      storage in SP 252 (a key 0 subpool) instead of SP 0 and
      switch to KEY=ZERO whenever you need to modify it.  Also,
      it is imperative that you switch back to unauthorized state
      before you return control to the system with the RETURN
      macro.  The R14 value contained in your invoker's save area
      may have been altered by some program that wants to steal
      your authorization.


Invocation of the SDSF SVC with AMODE24
  (works with any version of SDSF I can remember)

    MYPROG24 CSECT
             B     8(,R15)                   AMODE24 prefix
             DC    A(ISFSVC+2)               AMODE24 prefix
             BALR  R15,0
             SAVE  (14,12),,*
             BALR  basereg,0
             USING *,basereg
     .  .  .  .  .  .  .  .  .
             LA    R15,11                    SDSF ESR#
             SLR   R0,R0                     OPTION CODE
             LA    R1,1                      OPTION CODE
    ISFSVC   SVC   109                       TYPE-3 ESR
             LTR   R15,R15                   OK?
             BNZ   QUIT                      NO, QUIT
             MODESET KEY=NZERO,MODE=SUP      switch to key 8
     .  .  .  .  .  .  .  .  .
     EXIT    MODESET KEY=NZERO,MODE=PROB     remove authorization
             L     R13,4(,R13)
             RETURN (14,12),RC=nn
     .  .  .  .  .  .  .  .  .
             END   MYPROG24

Invocation of the SDSF SVC with AMODE31
  (requires SDSF V1R3M0 or above)

    MYPROG31 START 0
             B     12(,R15)                  AMODE31 prefix
             DC    A(0,ISFSVC+X'80000002')   AMODE31 prefix
             BALR  R15,0
             SAVE  (14,12),,*
             BALR  basereg,0
             USING *,basereg
     .  .  .  .  .  .  .  .  .
             LA    R15,11                    SDSF ESR#
             SLR   R0,R0                     OPTION CODE
             LA    R1,1                      OPTION CODE
    ISFSVC   SVC   109                       TYPE-3 ESR
             LTR   R15,R15                   OK?
             BNZ   QUIT                      NO, QUIT
             MODESET KEY=NZERO,MODE=SUP      switch to key 8
     .  .  .  .  .  .  .  .  .
     EXIT    MODESET KEY=NZERO,MODE=PROB     remove authorization
             L     R13,4(,R13)
             RETURN (14,12),RC=nn
     .  .  .  .  .  .  .  .  .
             END   MYPROG31


Return codes passed in R15

    OK         0                   You passed all the tests,
                                   and are now in KEY=1,MODE=SUP
    BADOPT     4                   BAD OPTION PASSED TO SVC IN R0
    NOTPRB     8                   NOT RUNNING UNDER A PRB
    NOTSDS     12                  not called from an SDSF module
    NOTALIB    16                  CALLING MODULE DOESN'T RESIDE IN AN
                                        AUTHORIZED LIBRARY
    BADMOD     20                  MODULE PREFIX INVALID
    BADSTAE    24                  SVC ENTERED WITH ESTAE ACTIVE
    BADXCTL    28                  SVC ENTERED FROM XCTL
    NOTREN     32                  NOT CALLED FROM REENTRANT MOD
    BADADDR    36                  SVC ENTERED FROM BAD ADDRESS
