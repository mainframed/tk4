          CHEW - Cartwright's Housekeeping External Writer.
          =================================================
This program was written by D.H.Cartwright in January 1995.  The program
was written in Assembler language. It does not have any alias.  It is a
major rewrite of the old MONEXWTR program I wrote at Monsanto Europe SA
with a new internal structure and the additional capability of copying
SYSOUT to disk datasets where it may be managed by your normal Storage
Management systems.  MONEXWTR was designed to archive SYSOUT datasets to
tape. It was intended to be used to handle Production JCL listings,
housekeeping reports, TSO session output and all the other print-out
that is created in a computer installation but which is rarely required
to be read. The program uses standard sub-system interfaces to allocate
print datasets, copies them to tape and then deletes them. However, if
the Job has failed for some reason - a JCL error or ABEND - the output
is not deleted, but is released for hardcopy output.  Over the years I
have found that most installations tend to put all this sort of output
in a dummy SYSOUT class so that it never even gets created. Conventional
reports etc. are managed by Output Management systems such as RMDS, SAR
or INFOPAC.  I have found this very frustrating, I cannot debug problems
with Started Tasks as the output is not there and output I do want
preserved is lost in some horrendously complex archive system which uses
its own file management system I cannot easily get at.  Output
Management Systems generally use their own archive structure in order to
achieve high utilisation of disk space.  Nowadays HSM Users are not
concerned to get the most data onto a track as the file will not occupy
disk space for very long anyway, and then it will be compressed and
packed away by HSM.  There is no need for an Output Management System to
duplicate this effort.  I therefore sat down and revived MONEXWTR as a
simple Output Management System. It will now archive your SYSOUT to
plain flat files on disk which you can browse, print, summarise etc.
with normal, simple tools and which you can manage with HSM or some
other Storage Management system.  Your normal security system can
control access to these files.  I recommend putting them in their own
User Catalog.

Limitations
~~~~~~~~~~~
Although it describes itself as an External Writer it does not in fact
adhere to the standards for that class of program.  This program uses
standard, documented IBM interfaces to Dynamic Allocation and Sub System
Services. Therefore its limitations are mostly those imposed by IBM on
these interfaces.
It has only been tested under JES2. It should work under JES3, but this
is not guaranteed.
It must run as an Authorised program from an Authorised library.
If run for extended periods you may run up against limitations on the
number of DDnames you can allocate dynamically.
It will only handle Line Mode output with LRECL 133 or less.
Output which is released for reprinting will be in the original class.
Under JES2 these datasets may not be printed together, a separator could
be created between each one.
It will only process one SYSOUT class at a time and it will only handle
'HELD' output, one is a function of the other.  It should be possible to
alter the program to process 1 to 8 non-held classes, but in that case
output from failed jobs will not be requeued, it will be purged.
This is the first pass at re-writing MONEXWTR and many things have not
been exhaustively tested.  In addition much error handling is very
crude, e.g. dynamic allocation errors result in a deliberate S0C1 abend.
The author would be grateful if corrections, improvements or suggestions
are sent to him at the address shown in the CBT tape documentation.

Input Data
~~~~~~~~~~
1) PARM field
This program uses the same logic to process the PARM field, Start
parameters and Modify parameters, in that order. Therefore any keywords
supported by the program may be entered as a PARM. The User should refer
to the section on 'KEYWORDS' for further information.

2) JES2 data
Obviously the primary input to this program is supplied by JES2 through
a Sub System Services interface. The program uses Sub System Services to
request a dataset identification from JES2, then uses Dynamic Allocation
to assign that dataset to a system generated DDname.  Everything about
the allocation and use of JES2 datasets is handled by the program, the
User does not need to supply any JCL for this function.
As JES2 grows it takes longer and longer to solicit files.  The User may
see this program swapped out for a Detected Wait during this process.
When this program is Waiting for Work it does not issue the famous
message, but enters a Long Wait.

Output data
~~~~~~~~~~~
1)SYSUT2 DD statement
One of the major outputs from this program is an archive copy of JES2
print datasets to the dataset defined by SYSUT2.  This file combines the
output of all jobs processed by CHEW in one place, and is created in
addition to the individual disk datasets.  It was the primary output of
the old MONEXWTR program and has been retained in the re-write.
However, this dataset is optional and may be omitted if the User
desires.  If present it is a sequential dataset, normally on tape. The
records are fixed length, and because they contain far more information
than just the print line, the LRECL is quite big.

2)SYSUT3 DD statement
This is an output summary sequential file. It contains one record for
every print dataset archived. Although its presence is optional, no
reports will be produced if it is missing.  Because it is subject to
multiple OPENs and CLOSEs you should not specify RLSE or FREE=CLOSE.

3) Report File
This file is dynamically allocated by the program to a system assigned
DDname.  It is allocated as:

      //SYS.....  DD  SYSOUT=A,FREE=CLOSE

and is used to write out activity reports either on request or at the
end of the run.  The format of the report is a hangover from MONEXWTR
and could well be tidied up.

4) Archive file
This file is dynamically allocated by the program to a system assigned
DDname.  It creates a disk dataset with a name which includes a Prefix,
the jobname and number, the SYSOUT class and the date and time it was
archived.  The actual format of the DSNAME is easy to change, so I have
not documented here what it is at the time of writing.  However, the
User should select a name format that makes it easy to manage the print
files and allows the User to easily find any required listing using
normal utilities e.g. SPF 3.4
The dataset is created with variable length records and ANSI control
characters. The program translates Machine control to ANSI standard, so
the number of records output may be different from the number input, but
the report should look the same whether it is printed from JES2 Spool or
reprinted from a CHEW archive.
Note that in the Mk1 version of CHEW this dataset is NOT optional.  It
would be easy to code up a processing option to turn off the creation of
these files, but since they are the raison d'etre of the rewrite I
thought it was silly to suppress them. If you just want to archive to
tape apply to Monsanto Europe SA for a copy of MONEXWTR.  Alternatively
chop CHEWDYNA out of this program.

5) Highlighting
CHEW will by default search the JES2 Job Log, the JCL and the Message
dataset for a number of messages.  If found they will optionally trigger
a message to the Operator and/or cause the output to be requeued in the
same class but not held.  They will also be highlighted with an
arrowhead <------------ in the archived copies of the output on the
SYSUT2 file and on the archive disk dataset. (This is as near as I could
get to the mod to OS/360 HASP which highlighted the message on Spool).
The message was the first way Monsanto Europe had to recognise failures
in Production jobs - nowadays this is done by scheduling systems (see my
version of DRKUX006) or by SMF exits or MPF exits.  If you don't want
the bother of those things this is a cheap way to do it.

Operation
~~~~~~~~~
Keywords
~~~~~~~~
The following keywords control the operation of the program. They may be
entered as PARM information, as START command parameters or as options
of a MODIFY command. Processing in each case is the same.  The program
will only recognise text in upper case.  Many keywords are synonymous,
the author has tried to anticipate standard variations of the same
function. Where one keyword is a synonym of another both versions invoke
the same processing routine.

1) CLASS= or QUEUE= or Q=
These three synonyms are keywords controlling the class of SYSOUT which
the program will select for archiving. Only one class may be specified
at a time. The program will only select output of the requested class
which is HELD, either by being so defined in JES2 initialisation
parameters or explicitly by the user specifying;

   //ddname   DD  SYSOUT=x,HOLD=YES

where the ddname is as required by the user program and x is the SYSOUT
class the user wishes to create.
If no operand is supplied, the program will try to nullify the selection
of output by CLASS. However, if CLASS is the only qualification for job
selection (the default), the request will be denied.  The program will
attempt to respond to each new CLASS specification with a message to the
operator showing the new selection class, or an error message.

2) NOGO
Whenever this keyword is entered, the program terminates immediately.
This may be used as a PARM to prevent any processing.

3) REPORT
This keyword indicates that the user requests a report of activity. Such
a report will be written when the program comes to the end of output for
a JOB, not at the exact instant the report was requested or even at the
end of the curent print dataset being processed. The report is created
to the dynamically allocated SYSOUT dataset by reading in the SYSUT3
summary file. Thus every report produced shows all activity to date for
the run. As many reports as required may be requested during any one run
of the program.  Reports are always created to SYSOUT class A, with
route code, forms, number of copies etc. being left to the installation
defaults defined at JES2 initialisation.
Because these reports are spun-off to dynamically allocated print files
whilst the program is running, the operator cannot display report
datasets awaiting hardcopy output.

4) STATUS
The program will display the current Job selection criteria - class,
route code etc..

5) STOPEOF
If this option is specified the program will continue to process output
until there are no more Jobs eligible for selection. At that point the
program will terminate. By default - i.e.  if this parameter is omitted
- the program will wait one minute, then request more output from JES2.
If none is available it will wait for a further minute and so on. In
that case the program may be terminated by specifying the 'STOPEOF'
command or by a normal MVS Operator stoP command (P CHEW). Note that
using a MVS stoP command takes effect at the end of the current dataset,
whereas the STOPEOF option will leave the program running for as long as
there is work for it to do. The is no command to remove the effect of a
STOPEOF command once it has been entered, although a standard MVS stoP
command may be used to stop at the end of the current dataset.

6) PRINT and NOPRINT
If the PRINT option is in effect, ALL ouput will be queued for harcopy
output after being copied to tape.  The default is NOPRINT - jobs will
normally be purged after archiving, except for failed jobs.

7) MSG and NOMSG
These options may be used to turn off and on the generation of messages
to the Operator. MSG is the default, i.e. messages to the operator will
be generated.
The most important message to the operator occurs when a failed JOB is
archived. The program will then issue a message with reply stating that
the JOB has been queued for reprinting. The Operator should reply as
appropriate to this message - up to about 50 characters will be printed
on the report. The output will be archived and then queued for printing
instead of being purged.
The operator can inhibit the re-print operation by starting his reply
with the word 'PURGE'.

8) TSUMSG and NOTSUMSG
These options may be used to turn off and on the generation of requests
to the operator to confirm failure of Time Sharing Users (TSU's).
TSUMSG is the default, i.e. messages to the operator will be generated.
This option is included because it is not unusual for a TSO session to
Abend - a S522 Abend is quite normal where users leave their screen
unattended for some time. However, if TSU output is being archived, the
Operator does not need to note every one of these failures

Program Structure
~~~~~~~~~~~~~~~~~
MONEXWTR was spaghetti code, some of which has slid through the seive
into CHEW.  However, I have tried to modularise it and have put all the
shared data and sub-routines into one CSECT called CHEWBACA which is
addressable from every module.  This grew in size so I allowed two base
registers for it  - I could have split it into data and code, but
sharing the bases seemed a more flexible approach. The CHEWBACA module,
assembled in CHEWCOMM, contains most of the data you may want to modify
- such things as High Level Qualifier for the disk datasets or default
SYSOUT class.  You should consider changing the blocksizes specified in
the dcb declarations for your own particular device types.  Ensure that
if you change the layout of this storage area you re-assemble all the
CHEW modules.  I have chosen to link-edit the modules together.  I use
my standard dynamic linkage code, so most modules could be separate load
modules if required. I just chose to make it into one because I kept
having to re-assemble everything anyway.  Member CHEW$INS is a guideline
job to install CHEW in an APF authorised library.  I have also included
CHEW$JCL as a sample test job to run CHEW - in practice you may want to
omit SYSUT2 and make SYSUT3 into a GDG.  You would almost certainly run
CHEW as a Started Task, which means updating whatever tables your access
control system uses for STCs.  I wrote CHEW at an ACF2 site during a
short contract, so I did not bother to go through the contortions
required by ACF2.  This means that a lot of the Stop/Modify code has not
been tested, but then it used to work in MONEXWTR.

RETRIEVING OUTPUT
~~~~~~~~~~~~~~~~~
A design criterion was that output could be handled with standard tools,
in particular ISPF option 3.4 - DS List.  From here the output may be
browsed or printed with DSPRINT or equivalent.  Simple batch jobs using
IEBGENER may be used to print the disk archives.  Well I did it a
couple of times during testing and yes, sure, it works fine, but those
DSNames are a real drag to type in.  A real Output Manager will have
some way to allow your scheduling system to print reports as required
once they have been created.  I therefore cobbled together, I mean
carefully crafted an automatic output finding program, CHEWOUT.  This
will pass the last report in a specified hierarchy to SORT.  I tend to
use DF/SORT for most of my data manipulation as it is so easy and
efficient.  Using it in this application allows you to do a straight
copy or record selection or some simple data manipulation.  Be aware
that SYNCSORT may not be totally compatible for this type of application
- it does not take an E15 exit on SORT FIELDS=COPY, for example.
