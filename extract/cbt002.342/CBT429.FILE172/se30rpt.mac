*        PDSDOC *SEAG VERSION OF SMF30 SUMMARY - LARGER TIME FIELDS...*
* 15APR92 CART1 FURTHER INCREASE ELAPSED TIME FIELD SIZES
*
SE30RPT CSECT
         PGMIN USING=(R13,12)     STANDARD HOUSEKEEPING
         OPEN  (RECIN,,REPORT1,(OUTPUT),REPORT2,(OUTPUT))
         OPEN  (REPORT3,(OUTPUT),REPORT4,(OUTPUT))
         EJECT
READREC  EQU   *
         GET   RECIN              * READ RECORD FROM SMF TYPE 30
         LR    R9,R1              * LOAD ADDRESS OF RECORD INTO REG 9
         USING SE30REC,R9         * INPUT RECORD DESCRIPTION
         CLI   JOBNAME,X'00'      * IS JOBNAME HEX ZEROS
         BE    READREC            * YES - GO GET NEXT RECORD
         MVI   CC1,X'40'          * MOV BLANK TO CARRIAGE CONTROL
         MVC   RPT1TIME(132),CC1  * CLEAR DETAIL LINE
         MVI   CC2,X'40'          * MOV BLANK TO CARRIAGE CONTROL
         MVC   RPT2TIME(132),CC2  * CLEAR DETAIL LINE
         MVI   CC3,X'40'          * MOV BLANK TO CARRIAGE CONTROL
         MVC   RPT3TIME(132),CC3  * CLEAR DETAIL LINE
         MVI   CC4,X'40'          * MOV BLANK TO CARRIAGE CONTROL
         MVC   RPT4TIME(132),CC4  * CLEAR DETAIL LINE
         CLI   RECTYPE,C'J'       * IS THIS A JOB RECORD
         BE    JOBSUM             * YES - GO GENERATE JOB REPORT
         EJECT
STEPSUM  EQU   *
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,ENDTIME+1     * LOAD ENDTIME INTO REGISTER 1
         BAL   R14,PCLOCK         * GO CONVERT ENDTIME
         MVC   RPT1TIME,EDWORK+L'EDWORK-L'RPT1TIME * MOVE ENDTIME RPT1
         MVC   RPT2TIME,EDWORK+L'EDWORK-L'RPT2TIME * MOVE ENDTIME RPT2
         MVC   RPT3TIME,EDWORK+L'EDWORK-L'RPT3TIME * MOVE ENDTIME RPT3
         UNPK  DATEWORK,ENDDATE   * UNPACK ENDDATE FOR PRINT
         OI    DATEWORK+5,X'F0'   * MAKE IT PRINTABLE
         MVC   RPT1DATE,DATEWORK+1 * MOVE ENDDATE TO REPORT 1
         MVC   RPT2DATE,DATEWORK+1 * MOVE ENDDATE TO REPORT 2
         MVC   RPT3DATE,DATEWORK+1 * MOVE ENDDATE TO REPORT 3
         MVC   RPT1JOBN,JOBNAME   * MOVE JOBNAME TO REPORT 1
         MVC   RPT2JOBN,JOBNAME   * MOVE JOBNAME TO REPORT 2
         MVC   RPT3JOBN,JOBNAME   * MOVE JOBNAME TO REPORT 3
         MVC   RPT1PGMN,PGMNAME   * MOVE PROGRAM NAME REPORT 1
         MVC   RPT1STPN,STEPNAME  * MOVE STEPNAME TO REPORT 1
         MVC   RPT2STPN,STEPNAME  * MOVE STEPNAME TO REPORT 2
         MVC   RPT3STPN,STEPNAME  * MOVE STEPNAME TO REPORT 3
         LH    R1,PGN             * LOAD PERFORMANCE GROUP NUMBER
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT2PGN,DWORD+L'DWORD-L'RPT2PGN * MOVE PGN TO REPORT 2
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,ENDTIME+1     * LOAD STEP END TIME
         ICM   R0,7,PPGMSTRT+1    * LOAD PGM START TIME
         BAL   R14,PCLOCK         * MAKE IT PRINTABLE
         MVC   ELAPSE1,EDWORK+L'EDWORK-L'ELAPSE1 * MOVE ELAPSE 1 TIME
         MVC   ELAPWRK1,WORK      * ENDTIME MINUS PROBLEM PROGRAM START
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,ENDTIME+1     * LOAD STEP END TIME
         ICM   R0,7,STEPINIT+1    * LOAD STEP INIT TIME
         BAL   R14,PCLOCK         * MAKE IT PRINTABLE
         MVC   ELAPSE2,EDWORK+L'EDWORK-L'ELAPSE2 * MOVE ELAPSE 2 TIME
         MVC   ELAPWRK2,WORK      * ENDTIME MINUS STEP INITIALIZATION
         SR    R0,R0              * ZERO OUT REG 0
         SR    R1,R1              * ZERO OUT REG1
         ICM   R1,7,ELAPWRK2+1    * LOAD ELAPSE2 VALUE
         ICM   R0,7,ELAPWRK1+1    * LOAD ELAPSE1 VALUE
         BAL   R14,PCLOCK         * MAKE IT PRINTABLE
         MVC   E2ME1,EDWORK+L'EDWORK-L'E2ME1 * ELAPSE2 MINUS ELAPSE1
         L     R1,CARDCT          * LOAD CARD COUNT FOR CONVERSION
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT2CARD,DWORD+L'DWORD-L'RPT2CARD * MOVE CARD COUNT IN
         L     R1,NUMTPUT         * LOAD NUMBER OF TPUTS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT2TPUT,DWORD+L'DWORD-L'RPT2TPUT * MOVE TPUT COUNT IN
         L     R1,NUMTGET         * LOAD NUMBER OF TGETS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT2TGET,DWORD+L'DWORD-L'RPT2TGET * MOVE TGET COUNT IN
         L     R1,TOTEXCP         * LOAD TOTAL NUMBER OF EXCPS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT2EXCP,DWORD+L'DWORD-L'RPT2EXCP * MOVE EXCP COUNT IN
         LA    R1,TERMINDC        * INDICATE TYPE OF RETURN CODE
         SR    R0,R0              * CLEAR OUT REGISTER 0
         ICM   R0,3,COMPCODE      * LOAD COMPLETION CODE
         BAL   R14,PRETCDE        * GO MAKE IT PRINTABLE
         MVC   RPT1RCDE,RC        * MOVE COND CODE TO RPT1
         LH    R1,DPRTY           * LOAD DISPATCHING PRIORITY
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1DPRI,DWORD+L'DWORD-L'RPT1DPRI * MOVE DPRTY TO RPT1
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,TCBTIME+1     * LOAD TCB TIME INTO REG 1
         BAL   R14,PCLOCK         * GO MAKE IT PRINTABLE
         MVC   RPT2TCB,EDWORK+L'EDWORK-L'RPT2TCB * MOVE TCBTIME  RPT2
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,SRBTIME+1     * LOAD TCB TIME INTO REG 1
         BAL   R14,PCLOCK         * GO MAKE IT PRINTABLE
         MVC   RPT2SRB,EDWORK+L'EDWORK-L'RPT2SRB * MOVE SRBTIME RPT2
         LH    R1,REGREQ          * LOAD REQUESTED REGION SIZE INTO R1
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1REG,DWORD+L'DWORD-L'RPT1REG * MOVE REGION SIZE RPT1
         LH    R1,PVTSTG          * LOAD PRIVATE REGN USED INTO REG 1
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1PVT,DWORD+L'DWORD-L'RPT1PVT * MOVE PVT SIZE TO RPT1
         LH    R1,SYSSTG          * LOAD SYSTEM REGN USED INTO REG 1
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1SYS,DWORD+L'DWORD-L'RPT1SYS * MOVE SYS SIZE TO RPT1
         L     R1,PAGEINS         * LOAD NUMBER OF PAGEINS INTO REG 1
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1PGI,DWORD+L'DWORD-L'RPT1PGI * MOVE PAGEINS TO RPT1
         L     R1,PAGEOUTS        * LOAD NUMBER OF PAGEOUTS INTO REG 1
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1PGO,DWORD+L'DWORD-L'RPT1PGO * MOVE PAGEOUTS TO RPT1
         L     R1,STEPRECL        * LOAD NUMBER OF PAGE RECLAIMS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3PGR,DWORD+L'DWORD-L'RPT3PGR * MOVE PG RECL TO RPT3
         L     R1,SWAPS           * LOAD NUMBER OF SWAP
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1SWP,DWORD+L'DWORD-L'RPT1SWP * MOVE SWAPS TO RPT1
         L     R1,SWAPINS         * LOAD NUMBER OF SWAPINS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1SWI,DWORD+L'DWORD-L'RPT1SWI * MOVE SWAPINS TO RPT1
         L     R1,SWAPOUTS        * LOAD NUMBER OF SWAPOUTS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1SWO,DWORD+L'DWORD-L'RPT1SWO * MOVE SWAPOUTS TO RPT1
         L     R1,VIOPGIN         * LOAD NUMBER VIO PAGE INS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1VPI,DWORD+L'DWORD-L'RPT1VPI * MOVE VIO PGI TO RPT1
         L     R1,VIOPGOUT        * LOAD NUMBER OF VIO PAGE OUTS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT1VPO,DWORD+L'DWORD-L'RPT1VPO * MOVE VIO PGO TO RPT1
         L     R1,VIOPGREC        * LOAD NUMBER OF VIO PAGE RECLAIMS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3VPR,DWORD+L'DWORD-L'RPT3VPR * MOVE VIO PGR TO RPT3
         L     R1,CMNPGIN         * LOAD NUMBER OF COMMON PAGE INS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3CPI,DWORD+L'DWORD-L'RPT3CPI * MOVE CMN PGI TO RPT3
         L     R1,CMNRECL         * LOAD NUMBER OF COMMON RECLAIMS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3CPR,DWORD+L'DWORD-L'RPT3CPR * MOVE CMN PGR TO RPT3
         L     R1,PGSTOLEN        * LOAD NUMBER OF PAGES STOLEN
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3PGS,DWORD+L'DWORD-L'RPT3PGS * MOVE STOLEN PG TO RPT3
         L     R1,PAGESEC+4       * LOAD NUMBER OF PAGES PER SECOND
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3PPS,DWORD+L'DWORD-L'RPT3PPS MOVE PG/SEC TO RPT3
         L     R1,SERVICE         * LOAD TOTAL SERVICE UNITS USED
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT2SRV,DWORD+L'DWORD-L'RPT2SRV * MOVE SERVICE TO RPT2
         L     R1,CPUSRV          * LOAD CPU SERVICE UNITS USED
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3CPU,DWORD+L'DWORD-L'RPT3CPU * MOVE SERVICE TO RPT3
         L     R1,SRBSRV          * LOAD SRB SERVICE UNITS USED
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3SRB,DWORD+L'DWORD-L'RPT3SRB * MOVE SERVICE TO RPT3
         L     R1,IOSRV           * LOAD I/O SERVICE UNITS USED
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3IO,DWORD+L'DWORD-L'RPT3IO * MOVE IO SERVICE TO RPT3
         L     R1,MSOSRV          * LOAD MSO SERVICE UNITS USED
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT3MSO,DWORD+L'DWORD-L'RPT3MSO * MOVE SERVICE TO RPT3
         SR    R0,R0              * ZERO OUT REG 0
         SR    R1,R1              * ZERO OUT REG 1
         ICM   R1,7,XACTRES+1     * LOAD TRANS ACTION RESIDENCY TIME
         BAL   R14,PCLOCK         * GO MAKE IT PRINTABLE
         MVC   RPT3XRES,EDWORK+L'EDWORK-L'RPT3XRES * MVE RESIDENCY TIME
         BAL   R10,PRTRPT1        * GO PRINT REPORT 1 LINE
         BAL   R10,PRTRPT2        * GO PRINT REPORT 2 LINE
         BAL   R10,PRTRPT3        * GO PRINT REPORT 3 LINE
         B     READREC            * GO GET NEXT RECORD
         EJECT
JOBSUM   EQU   *
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,ENDTIME+1     * LOAD ENDTIME INTO REGISTER 1
         BAL   R14,PCLOCK         * GO CONVERT ENDTIME
         MVC   RPT4TIME,EDWORK+L'EDWORK-L'RPT4TIME * MOVE ENDTIME  RPT4
         UNPK  DATEWORK,ENDDATE   * UNPACK ENDDATE FOR PRINT
         OI    DATEWORK+5,X'F0'   * MAKE IT PRINTABLE
         MVC   RPT4DATE,DATEWORK+1 * MOVE ENDDATE TO REPORT 4
         MVC   RPT4JOBN,JOBNAME   * MOVE JOBNAME TO REPORT 4
         MVC   RPT4CLS,JOBCLASS   * MOVE INPUT CLASS TO REPORT 4
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,15,XACTTIME     * LOAD XACTTIME INTO REGISTER 1
         BAL   R14,PMICRO         * GO MAKE IT HUNDREDTHS OF SECONDS
         BAL   R14,PCLOCK         * GO CONVERT ENDTIME
         MVC   RPT4XACT,EDWORK+L'EDWORK-L'RPT4XACT * TRANSACTION TIME
         LH    R1,PGN             * LOAD PERFORMANCE GROUP NUMBER
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT4PGN,DWORD+L'DWORD-L'RPT4PGN * MOVE PGN TO REPORT 4
         LH    R1,STEPNUMB        * LOAD NUMBER OF STEPS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT4#STP,DWORD+L'DWORD-L'RPT4#STP * MOVE NUMBER OF STEPS
         L     R1,NUMXACT         * LOAD NUMBER OF TSO TRANSACTIONS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT4NXAC,DWORD+L'DWORD-L'RPT4NXAC * MOVE TSO TRNS ACT CT
         L     R1,CARDCT          * LOAD CARD COUNT FOR CONVERSION
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT4CARD,DWORD+L'DWORD-L'RPT4CARD * MOVE CARD COUNT IN
         L     R1,NUMTPUT         * LOAD NUMBER OF TPUTS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT4TPUT,DWORD+L'DWORD-L'RPT4TPUT * MOVE TPUT COUNT IN
         L     R1,NUMTGET         * LOAD NUMBER OF TGETS
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT4TGET,DWORD+L'DWORD-L'RPT4TGET * MOVE TGET COUNT IN
         LA    R1,TERMINDC        * INDICATE TYPE OF RETURN CODE
         SR    R0,R0              * CLEAR OUT REGISTER 0
         ICM   R0,3,COMPCODE      * LOAD COMPLETION CODE
         BAL   R14,PRETCDE        * GO MAKE IT PRINTABLE
         MVC   RPT4RCDE,RC        * MOVE COND CODE TO RPT4
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,TCBTIME+1     * LOAD TCB TIME INTO REG 1
         BAL   R14,PCLOCK         * GO MAKE IT PRINTABLE
         MVC   RPT4TCB,EDWORK+L'EDWORK-L'RPT4TCB * MOVE TCBTIME RPT4
         SR    R0,R0              * ZERO OUT REGISTER 0
         SR    R1,R1              * ZERO OUT REGISTER 1
         ICM   R1,7,SRBTIME+1     * LOAD TCB TIME INTO REG 1
         BAL   R14,PCLOCK         * GO MAKE IT PRINTABLE
         MVC   RPT4SRB,EDWORK+L'EDWORK-L'RPT4SRB * MOVE SRBTIME RPT4
         L     R1,SERVICE         * LOAD TOTAL SERVICE UNITS USED
         BAL   R14,PCOUNT         * GO MAKE IT PRINTABLE
         MVC   RPT4SRV,DWORD+L'DWORD-L'RPT4SRV * MOVE SERVICE TO RPT4
         SR    R0,R0              * ZERO OUT REG 0
         SR    R1,R1              * ZERO OUT REG 1
         ICM   R1,15,XACTRES      * LOAD TRANS ACTION RESIDENCY TIME
         BAL   R14,PMICRO         * GO MAKE IT HUNDREDTHS OF SECONDS
         BAL   R14,PCLOCK         * GO MAKE IT PRINTABLE
         MVC   RPT4XRES,EDWORK+L'EDWORK-L'RPT4XRES * MVE RESIDENCY TIME
         BAL   R10,PRTRPT4        * GO PRINT REPORT 4 LINE
         B     READREC            * GO GET NEXT RECORD
         EJECT
DONE     EQU   *
         CLOSE (RECIN,,REPORT1,,REPORT2,,REPORT3,,REPORT4)
         EJECT
         LR    R1,R13
         L     R13,4(R13)
         RETURN (14,12),RC=0
         EJECT
***********************************************************************
*                                                                     *
*  CONVERT 1024 MICROSECOND UNITS TO HUNDREDTHS OF SECONDS            *
*        INPUT   REG 1 HAS 1024 MICROSECONDS                          *
*        OUTPUT  REG 1 HAS HUNDREDTHS OF SECONDS                      *
*                                                                     *
***********************************************************************
PMICRO   DS    0H                  SUBROUTINE
         M     R0,THOU24           SECONDS * 10**-6
         D     R0,TENTHOU          SECONDS * 10**-2
         SR    R0,R0               CLEAR REMAINDER
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *
*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *
*                                                                     *
***********************************************************************
PCOUNT   SAVE  (14,12)             SAVE CALLER'S REGISTERS
         CVD   R1,DWORD            CONVERT COUNT TO DECIMAL
         MVC   EDWORK2,EDMASK2     MOVE IN EDIT MASK
         ED    EDWORK2,DWORD+K2    CONVERT TO CHARACTER
         CP    DWORD,P99999        IS COUNT>99999?
         BNH   NOFLOAT             NO, BR PAST FLOAT CODE
         MVC   DWORD(L'DWORD-K1),EDWORK2+K2 SHIFT IT RIGHT 3 DEC DIGTS
         MVI   DWORD+L'DWORD-K1,CK MOVE A 'K' FOR THOUSANDS
         B     PCNTEX              BR TO RETURN
NOFLOAT  MVC   DWORD,EDWORK2+K4    MOVE IN UNFLOATED COUNT
PCNTEX   RETURN (14,12)            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS FIRST TIME                                 *
*                REG 0 HAS SECOND TIME
*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *
*                                                                     *
***********************************************************************
PCLOCK   SAVE  (14,12)             SAVE CALLER'S REGISTERS
         SR    R1,R0               GET TIME DIFFERENCE
         BNL   LSTH24              IF DIFFERENCE>=0 THEN SKIP
         A     R1,HR24             ELSE ADD 24 HOURS TO TIME
LSTH24   DS    0H                  SKIPPED TO HERE
         ST    R1,WORK            * KEEP FOR OTHER CALCULATION
         SLR   R0,R0               ZERO REG FOR DIVIDE
         D     R0,=F'360000'      * DIV TIME BY 360000 FOR HOURS
         LR    R8,R1              * SAVE HOURS FOR LATER PROCESSING
         M     R0,=F'100'         * PUT HH INTO HHMM FORMAT
         LR    R6,R1              * SAVE HHMM FOR LATER PROCESSING
         L     R1,WORK            * RELOAD TIME
         SR    R0,R0              * ZERO OUT REGISTER 0
         D     R0,=F'6000'        * GET TOTAL NUMBER OF MINUTES
         LR    R7,R1              * SAVE TOTAL NUMBER OF MINUTES
         LR    R1,R8              * RELOAD NUMBER OF HOURS
         M     R0,=F'60'          * CONVERT HOURS TO MINUTES
         SR    R7,R1              * GET MINUTES LESS THAN AN HOUR
         AR    R6,R7              * ADD MINUTES TO HHMM
         LR    R1,R7              * RELOAD NUMBER OF MINUTES
         M     R0,=F'60'          * CONVERT MINUTES TO SECONDS
         M     R0,=F'100'         * CONVERT SECONDS TO HUNDREDTHS
         LR    R5,R1              * SAVE NUMBER OF SECONDS
         LR    R1,R8              * RELOAD HOURS FOR PROCESSING
         M     R0,=F'60'          * CONVERT HOURS TO MINUTES
         M     R0,=F'60'          * CONVERT MINUTES TO SECONDS
         M     R0,=F'100'         * CONVERT SECONDS TO HUNDREDTHS
         AR    R5,R1              * ADD SEC FROM HOURS TO SEC FROM MIN
         L     R8,WORK            * RELOAD TIME
         SR    R8,R5              * GET REMAINING SECONDS
         LR    R1,R6              * LOAD HHMM INTO REGISTER
         M     R0,=F'10000'       * MAKE IT HHMMSSTT FORMAT
         AR    R1,R8              * ADD SSTT TO HHMMSSTT
NOTOVER  EQU   *
         CVD   R1,DWORD            CONVERT TIME TO DECIMAL
         MVC   EDWORK,EDMASK       MOVE IN EDIT MASK
         ED    EDWORK,DWORD+K3     CONVERT TO CHARACTER
         RETURN (14,12)            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *
*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *
*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *
*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *
*                                                                     *
***********************************************************************
PRETCDE  SAVE  (14,12)             SAVE CALLER'S REGISTERS
         TM    K0(R1),FLUSH        WAS STEP FLUSHED             MSEIPO4
         BNO   NOFLUSH             NO,BRANCH PAST
         MVC   RC,=C' NXEQ'        MOVE IN FLUSHED MESSAGE
         B     PRETEXT             BR TO RETURN
NOFLUSH  TM    K0(R1),ABEND        DID IT ABEND?                MSEIPO4
         BO    STPABEND            YES, GO CONVERT ABEND CODE
         N     R0,=A(X'FFF')       ZERO UNUSED PORTION
         CVD   R0,RWORK            GET ADDRESS OF COND FIELD
         MVC   RC-K1(L'RC+K1),=X'402020212020' MOVE IN EDIT MASK
         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT RET CODE TO CHAR
         B     PRETEXT             BR TO RETURN
STPABEND CLM   R0,2,=X'80'         WAS IT A USER ABEND CODE?
         BL    SYSABND             NO, PROCESS SYSTEM ABEND CODE.
         N     R0,=A(X'FFF')       TURN OFF X'80' BIT
         CVD   R0,RWORK            CONVERT FOR OUTPUT
         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK
         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT TO CHARACTER
         MVI   RC,C'U'             MOVE IN 'U' USER ABEND
         B     PRETEXT             BR TO RETURN
SYSABND  STH   R0,RWORK            STORE ABEND CODE
         UNPK  RWORK+K3(K5),RWORK(K3) ADD ZONES TO CC FIELD
         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO CHARACTERS
         MVC   RC+K2(L'RC-K2),RWORK+K4  MOVE TO OUTPUT LINE
         MVC   RC(K2),=C'*S'       MOVE IN S FOR SYSTEM ABEND
PRETEXT  RETURN (14,12)            RETURN TO CALLER
         EJECT
PRTRPT1  EQU   *
         CP    LNECT1,=P'55'      * IS LINE COUNT EQUAL TO 55
         BL    DETAILO1           * YES - GO PRINT REPORT 1 HEADINGS
         SP    LNECT1,LNECT1      * ZERO OUT LINE COUNTER
         PUT   REPORT1,RPT1TITL   * PRINT REPORT 1 TITLE
         PUT   REPORT1,RPT1HD1    * PRINT REPORT 1 HEADING 1
         PUT   REPORT1,RPT1HD2    * PRINT REPORT 1 HEADING 2
DETAILO1 EQU   *
         PUT   REPORT1,DETAIL1    * PRINT REPORT 1 DETAIL LINE
         AP    LNECT1,=P'1'       * INCREMENT LINE COUNTER
         BR    R10                * RETURN TO CALLER
         EJECT
PRTRPT2  EQU   *
         CP    LNECT2,=P'55'      * IS LINE COUNT EQUAL TO 55
         BL    DETAILO2           * YES - GO PRINT REPORT 2 HEADINGS
         SP    LNECT2,LNECT2      * ZERO OUT LINE COUNTER
         PUT   REPORT2,RPT2TITL   * PRINT REPORT 2 TITLE
         PUT   REPORT2,RPT2HD1    * PRINT REPORT 2 HEADING 1
         PUT   REPORT2,RPT2HD2    * PRINT REPORT 2 HEADING 2
DETAILO2 EQU   *
         PUT   REPORT2,DETAIL2    * PRINT REPORT 2 DETAIL LINE
         AP    LNECT2,=P'1'       * INCREMENT LINE COUNTER
         BR    R10                * RETURN TO CALLER
         EJECT
PRTRPT3  EQU   *
         CP    LNECT3,=P'55'      * IS LINE COUNT EQUAL TO 55
         BL    DETAILO3           * YES - GO PRINT REPORT 3 HEADINGS
         SP    LNECT3,LNECT3      * ZERO OUT LINE COUNTER
         PUT   REPORT3,RPT3TITL   * PRINT REPORT 3 TITLE
         PUT   REPORT3,RPT3HD1    * PRINT REPORT 3 HEADING 1
         PUT   REPORT3,RPT3HD2    * PRINT REPORT 3 HEADING 2
DETAILO3 EQU   *
         PUT   REPORT3,DETAIL3    * PRINT REPORT 3 DETAIL LINE
         AP    LNECT3,=P'1'       * INCREMENT LINE COUNTER
         BR    R10                * RETURN TO CALLER
         EJECT
PRTRPT4  EQU   *
         CP    LNECT4,=P'55'      * IS LINE COUNT EQUAL TO 55
         BL    DETAILO4           * YES - GO PRINT REPORT 4 HEADINGS
         SP    LNECT4,LNECT4      * ZERO OUT LINE COUNTER
         PUT   REPORT4,RPT4TITL   * PRINT REPORT 4 TITLE
         PUT   REPORT4,RPT4HD1    * PRINT REPORT 4 HEADING 1
         PUT   REPORT4,RPT4HD2    * PRINT REPORT 4 HEADING 2
DETAILO4 EQU   *
         PUT   REPORT4,DETAIL4    * PRINT REPORT 4 DETAIL LINE
         AP    LNECT4,=P'1'       * INCREMENT LINE COUNTER
         BR    R10                * RETURN TO CALLER
         EJECT
RPT1TITL DS    0CL133
         DC    CL53'1'
         DC    C'SMF STEP SUMMARY REPORT ONE'
         DC    CL(RPT1TITL+133-*)' '
RPT1HD1  DS    0CL133
         DC    C'0STEP END   DATE     JOB     DSP  PROGRAM     STEP    C
               COND   K-STG  K-STG  K-STG  NUMBER  NUMBER  NMBER  PAGESC
                 PAGES  PAGES  PAGES  '
RPT1HD2  DS    0CL133
         DC    C'   TIME              NAME    PRT   NAME       NAME    C
               CODE   RQSTD   SYST  ALLOC  PAGEIN  PAGOUT  SWAPS  SWAPIC
               N SWAPOT VIOIN  VIOOT  '
         SPACE
RPT2TITL DS    0CL133
         DC    CL53'1'
         DC    C'SMF STEP SUMMARY REPORT TWO'
         DC    CL(RPT2TITL+133-*)' '
RPT2HD1  DS    0CL133
         DC    C'0STEP END   DATE     JOB      STEP    PGN   ELAPSED  EC
               LAPSED   E2 TIME  CPU-TIME  CPU-TIME   TOTAL   TOT     TC
               OT     SYSIN   EXCP    '
RPT2HD2  DS    0CL133
         DC    C'   TIME              NAME     NAME    NUM    TIME-1   C
               TIME-2  MINUS E1    TCB       SRB     SERVICE  TGET    TC
               PUT    COUNT   COUNT   '
         SPACE
RPT3TITL DS    0CL133
         DC    CL53'1'
         DC    C'SMF STEP SUMMARY REPORT THREE'
         DC    CL(RPT3TITL+133-*)' '
RPT3HD1  DS    0CL133
         DC    C'0STEP END   DATE     JOB      STEP   STEP RES  COMMON C
                 STEP      VIO   COMMON      PAGE   PAGES     CPU      C
                SRB     I/O     MSO   '
RPT3HD2  DS    0CL133
         DC    C'   TIME              NAME     NAME     TIME    PAGEINSC
                RECLAIM  RECLAIM  RECLAIM  SECONDS  STOLEN  SERVICE  SEC
               RVICE SERVICE SERVICE  '
         SPACE
RPT4TITL DS    0CL133
         DC    CL53'1'
         DC    C'SMF JOB SUMMARY REPORT FOUR'
         DC    CL(RPT4TITL+133-*)' '
RPT4HD1  DS    0CL133
         DC    C'0 JOB END   DATE     JOB     COND   INP  PGN  NUMB  TOC
               TAL    TOT-TRAN    TSO   CPU-TIME  CPU-TIME  SYSIN   TGEC
               T    TPUT    JOB-RES   '
RPT4HD2  DS    0CL133
         DC    C'   TIME              NAME    CODE   CLS  NUM  STEP  SEC
               RVICE  ACT-TIME  TRANSAC   TCB       SRB     COUNT   COUC
               NT   COUNT    TIME      '
         EJECT
LNECT1   DC    PL2'55'            * INITIALIZE LINE COUNTER TO 55
LNECT2   DC    PL2'55'            * INITIALIZE LINE COUNTER TO 55
LNECT3   DC    PL2'55'            * INITIALIZE LINE COUNTER TO 55
LNECT4   DC    PL2'55'            * INITIALIZE LINE COUNTER TO 55
DATEWORK DS    CL6
HR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS
TEN      DC    A(10)               CONVERSION FACTOR
HUNDRED  DC    A(100)              CONVERSION FACTOR
THOU     DC    A(1000)             CONVERSION FACTOR
TENTHOU  DC    A(10000)            CONVERSION FACTOR
THOU24   DC    A(1024)             CONVERSION FACTOR
EDMASK   DC    XL11'40202020202020214B2020'
P99999   DC    P'99999'
EDMASK2  DC    XL12'402020202020202020202120'
TRTAB    DC    C'0123456789ABCDEF'
DWORD    DS    D
RWORK    DS    D
EDWORK   DC    XL11'00'
EDWORK2  DC    XL12'00'
RC       DS    XL5
FLUSH    EQU   X'01'
ABEND    EQU   X'02'
K0       EQU   0
K1       EQU   1
K2       EQU   2
K3       EQU   3
K4       EQU   4
K5       EQU   5
CASTR    EQU   C'*'
CK       EQU   C'K'
C0       EQU   C'0'
         EJECT
RECIN    DCB   DDNAME=RECIN,DSORG=PS,MACRF=GL,EODAD=DONE
         EJECT
REPORT1  DCB   DDNAME=REPORT1,DSORG=PS,MACRF=PM
         EJECT
REPORT2  DCB   DDNAME=REPORT2,DSORG=PS,MACRF=PM
         EJECT
REPORT3  DCB   DDNAME=REPORT3,DSORG=PS,MACRF=PM
         EJECT
REPORT4  DCB   DDNAME=REPORT4,DSORG=PS,MACRF=PM
         EJECT
         LTORG
         EJECT
WORK     DS    F
ELAPWRK1 DS    F
ELAPWRK2 DS    F
         EJECT
DETAIL1  DS    0CL133
CC1      DS    CL1
RPT1TIME DS    XL9
         DS    CL2
RPT1DATE DS    XL5
         DS    CL2
RPT1JOBN DS    CL8
         DS    CL2
RPT1DPRI DS    XL3
         DS    CL2
RPT1PGMN DS    CL8
         DS    CL2
RPT1STPN DS    CL8
         DS    CL2
RPT1RCDE DS    XL5
         DS    CL2
RPT1REG  DS    XL5
         DS    CL2
RPT1SYS  DS    XL5
         DS    CL2
RPT1PVT  DS    XL5
         DS    CL2
RPT1PGI  DS    XL6
         DS    CL2
RPT1PGO  DS    XL6
         DS    CL2
RPT1SWP  DS    XL5
         DS    CL3
RPT1SWI  DS    XL5
         DS    CL2
RPT1SWO  DS    XL5
         DS    CL2
RPT1VPI  DS    XL5
         DS    CL2
RPT1VPO  DS    XL5
         DS    CL(DETAIL1+133-*)
         EJECT
DETAIL2  DS    0CL133
CC2      DS    CL1
RPT2TIME DS    XL9
         DS    CL2
RPT2DATE DS    XL5
         DS    CL2
RPT2JOBN DS    CL8
         DS    CL2
RPT2STPN DS    CL8
         DS    CL1
RPT2PGN  DS    XL3
         DS    CL1
ELAPSE1  DS    XL9
         DS    CL1
ELAPSE2  DS    XL9
         DS    CL1
E2ME1    DS    XL8
         DS    CL1
RPT2TCB  DS    XL9
         DS    CL1
RPT2SRB  DS    XL9
         DS    CL1
RPT2SRV  DS    XL7
         DS    CL2
RPT2TGET DS    XL6
         DS    CL2
RPT2TPUT DS    XL6
         DS    CL2
RPT2CARD DS    XL6
         DS    CL2
RPT2EXCP DS    XL6
         DS    CL(DETAIL2+133-*)
         EJECT
DETAIL3  DS    0CL133
CC3      DS    CL1
RPT3TIME DS    XL9
         DS    CL2
RPT3DATE DS    XL5
         DS    CL2
RPT3JOBN DS    CL8
         DS    CL2
RPT3STPN DS    CL8
         DS    CL1
RPT3XRES DS    XL9
         DS    CL1
RPT3CPI  DS    XL6
         DS    CL2
RPT3PGR  DS    XL6
         DS    CL3
RPT3VPR  DS    XL6
         DS    CL3
RPT3CPR  DS    XL6
         DS    CL3
RPT3PPS  DS    XL6
         DS    CL2
RPT3PGS  DS    XL6
         DS    CL3
RPT3CPU  DS    XL6
         DS    CL3
RPT3SRB  DS    XL6
         DS    CL2
RPT3IO   DS    XL6
         DS    CL2
RPT3MSO  DS    XL6
         DS    CL(DETAIL3+133-*)
         EJECT
DETAIL4  DS    0CL133
CC4      DS    CL1
RPT4TIME DS    XL9
         DS    CL2
RPT4DATE DS    XL5
         DS    CL2
RPT4JOBN DS    CL8
         DS    CL2
RPT4RCDE DS    XL5
         DS    CL4
RPT4CLS  DS    CL1
         DS    CL2
RPT4PGN  DS    XL3
         DS    CL2
RPT4#STP DS    XL3
         DS    CL2
RPT4SRV  DS    XL8
         DS    CL1
RPT4XACT DS    XL9
         DS    CL3
RPT4NXAC DS    XL6
         DS    CL1
RPT4TCB  DS    XL8
         DS    CL1
RPT4SRB  DS    XL8
         DS    CL2
RPT4CARD DS    XL6
         DS    CL4
RPT4TGET DS    XL6
         DS    CL2
RPT4TPUT DS    XL6
         DS    CL1
RPT4XRES DS    XL9
         DS    CL(DETAIL4+133-*)
         EJECT ,
         COPY  SE30REC             COPY FORMAT OF INPUT RECORDS
         SPACE 2
         END
