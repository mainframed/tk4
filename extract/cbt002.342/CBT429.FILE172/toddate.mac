***********************************************************************
*                                                                     *
*        PDSDOC *TOD-CLOCK DATE CONVERSION ROUTINE....................*
*                                                                     *
* ON ENTRY TO  THIS ROUTINE R1 -->  8-BYTE TOD-CLOCK VALUE            *
* IF R1 = 0 THEN THE CURRENT TOD-CLOCK VALUE IS USED.                 *
* ON EXIT FROM THIS ROUTINE VARIOUS FIELDS DEFINED WITHIN THIS COPY   *
* BLOCK ARE UPDATED. THIS ROUTINE ASSUMES THE STANDARD EPOCH IS USED, *
* I.E. THE YEAR 2000 IS A LEAP YEAR. VALUES PRODUCED FROM THIS CODE   *
* ARE ONLY VALID WITHIN THE STANDARD EPOCH 1900 - 2042.               *
*                                                                     *
* A LOT OF THE CODE CAME FROM THE @STCK MACRO ON THE NASPA TAPE, PLUS *
* VARIOUS VERSIONS OF THE $STCK MACRO ON THE CBT TAPE.                *
*                                                                     *
* HISTORY:                                                            *
* 09NOV98 DC    CORRECT LOCAL TIME OVERFLOW CODE                      *
* 04NOV98 DC    CORRECT LOCAL TIME CODING USING CVTXTNT2              *
* 22MAY92 CART1 REMOVED ALL THE STANDARD DAY NO. STUFF - SEE TODSDAY  *
*               MAKE ALL CONSTANTS INTO LITERALS, MAY SAVE SOMETHING  *
*               ADD TODDSCB FIELD AND CODE                            *
* 11DEC91 CART1 FILL IN PACKED CENTURY FIELD                          *
* 09DEC91 CART1 FINALLY PUT IN CODE TO CONVERT TIME TO SECONDS*100    *
* 29APR91 CART1 STARTED WRITING                                       *
*                                                                     *
***********************************************************************
         SPACE 1
TODDATE  DS    0H                  TOD-CLOCK CONVERSION ROUTINE
         SUBIN SAVE=(R4)           SUBROUTINE ENTRY
         LTR   R1,R1               TEST FOR POINTER
         BNZ   TODDATE2            GOT ONE, USE IT
         STCK  TODCLOCK            ELSE GET CURRENT TOD-CLOCK
         LA    R1,TODCLOCK         AND USE THAT
         SPACE 1
TODDATE2 DS    0H                  ADJUST FOR LOCAL TIME
         L     R15,16              GET CVT ADDRESS
         L     R15,X'148'(,R15)    GET CVTXTNT2 ADDRESS
         L     R4,X'3C'(,R15)      GET LOCAL TIME DEVIATION
         LM    R14,R15,0(R1)       GET TOD-CLOCK VALUE
         ALR   R15,R4              ADD LOCAL DEVIATION
         BNO   *+4+4               NO OVERFLOW
         AL    R14,=F'1'           ADD OVERFLOW
         STM   R14,R15,TODCLOCK    SAVE ADJUSTED TOD-CLOCK VALUE
         LM    R0,R1,TODCLOCK      LOAD ADJUSTED TOD-CLOCK VALUE
         SRDL  R0,12               CONVERT TO MICROSECONDS
         GOSUB TODSUB1             GO TO CONVERSION CODE
         STM   R0,R1,BDAYTOD       SAVE DAYS AND MINUTES..
         STM   R14,R15,BSECTOD     ..AND SECONDS/MICROSECONDS
         CVD   R14,TODWORKD        CONVERT SECONDS TO DECIMAL
         GOSUB TODSUB2             AND THEN TO CHARACTER
         MVC   TODSS,TODWORKC+1    COPY SECONDS TO ANSWER
         LR    R15,R1              GET MINUTES
         SR    R14,R14             CLEAR EVEN REGISTER
         D     R14,=F'60'          GET HOURS
         CVD   R14,TODWORKD        CONVERT MINUTES TO DECIMAL
         GOSUB TODSUB2             AND THEN TO CHARACTER
         MVC   TODMM,TODWORKC+1    COPY MINUTES TO ANSWER
         CVD   R15,TODWORKD        CONVERT HOURS TO DECIMAL
         GOSUB TODSUB2             AND THEN TO CHARACTER
         MVC   TODHH,TODWORKC+1    COPY HOURS TO ANSWER
*
*        CALCULATE THE YEAR
*
         LR    R1,R0               GET DAY NUMBER
         LA    R1,1(R1)            ADD ONE DAY FOR TODAY
         LA    R15,4               1900 IS NOT A LEAP YEAR
         LA    R14,1900            SET START YEAR
         B     TODDATE4            GO LOOP THRU' THE YEARS
         SPACE 1
TODDATE3 DS    0H                  CHECK FOR LEAP YEARS
         C     R1,=F'366'          LESS THAN 1 LEAP YEAR LEFT?
         BNH   TODDATE5            YES, FINISHED
         S     R1,=F'366'          NO, SUBTRACT LEAP YEAR
         LA    R14,1(R14)          ADD ONE TO YEAR
         LA    R15,3               RESET LOOP COUNTER
         SPACE 1
TODDATE4 DS    0H                  CHECK FOR NON-LEAP YEARS
         C     R1,=F'365'          LESS THAN 1 YEAR LEFT?
         BNH   TODDATE5            YES, FINISHED
         S     R1,=F'365'          NO, SUBTRACT LEAP YEAR
         LA    R14,1(R14)          ADD ONE TO YEAR
         BCT   R15,TODDATE4        KEEP CHECKING NORMAL YEARS
         B     TODDATE3            GO CHECK LEAP YEARS
         EJECT ,
TODDATE5 DS    0H                  FOUND THE YEAR
         CVD   R14,TODWORKD        CONVERT YEARS TO DECIMAL
         ZAP   TODPDATE,TODWORKD+4(4) COPY PACKED JULIAN YEARS
         GOSUB TODSUB2             AND THEN TO CHARACTER
         MVC   TODYY,TODWORKC+1    COPY YEARS TO ANSWER
         SRP   TODPDATE,3,0        SHIFT UP THE YEARS
         SPACE 1
         SRP   TODWORKD,64-2,0     SHIFT OUT YEARS, LEAVING CENTURY
         GOSUB TODSUB2             CONVERT TO CHARACTER
         MVC   TODCC,TODWORKC+1    COPY CENTURY TO ANSWER
         SPACE 1
         CVD   R1,TODWORKD         CONVERT JULIAN DAY TO DECIMAL
         GOSUB TODSUB2             AND THEN TO CHARACTER
         MVC   TODDDD,TODWORKC     COPY JULIAN DAYS TO ANSWER
         AP    TODPDATE,TODWORKD+6(2) COPY PACKED JULIAN DAYS
         ZAP   TODPTIME,TODPDATE   COPY PACKED DATE
         SP    TODPTIME,=P'1900000' SUBTRACT EPOCH START
         OI    TODPTIME+3,X'0F'    CONVERT SIGN
         XC    TODWORKD,TODWORKD   CLEAR WORK AREA
         MVC   TODWORKD+6(2),TODPJUL+1 COPY JULIAN DAY
         CVB   R14,TODWORKD        CONVERT TO BINARY
         STCM  R14,B'0011',TODDSCB+1 SAVE BINARY JULIAN DAYS
         STCM  R14,B'1000',TODWORKD+6 CLEAR PART OF WORK AREA
         MVO   TODWORKD+6(2),TODPJUL(1) SET UP PACKED YEAR
         CVB   R14,TODWORKD        CONVERT YEAR TO BINARY
         STC   R14,TODDSCB         SAVE BINARY YEAR NUMBER
         SPACE 1
TODDATE6 DS    0H                  NOW CALCULATE TIME IN SECONDS*100
         SR    R14,R14             CLEAR EVEN REGISTER
         L     R15,BMSCTOD         GET THE MICROSECONDS
         D     R14,=F'10000'       DIVIDE FOR HUNDREDTHS
         LR    R1,R15              COPY ANSWER
         SPACE 1
         SR    R14,R14             CLEAR EVEN REGISTER
         L     R15,BSECTOD         GET THE SECONDS
         M     R14,=F'100'         MULTIPLY FOR HUNDREDTHS
         AR    R1,R15              ADD TO  ANSWER
         SPACE 1
         SR    R14,R14             CLEAR EVEN REGISTER
         L     R15,BMINTOD         GET THE MINUTES
         M     R14,=F'60'          MULTIPLY FOR SECONDS
         M     R14,=F'100'         MULTIPLY FOR HUNDREDTHS
         AR    R1,R15              ADD TO  ANSWER
         SPACE 1
         ST    R1,TODBTIME         SAVE IN DATA AREA
         SPACE 1
TODDATED DS    0H                  SUBROUTINE EXIT
         SUBOUT RESTORE=(R4)       RETURN TO CALLER
         EJECT ,
***********************************************************************
* SUB-ROUTINE TO CONVERT MICROSECONDS TO SOMETHING USEFUL             *
*                                                                     *
* ON ENTRY TO  THIS ROUTINE R0 + R1 = MICROSECONDS                    *
* ON EXIT                      R0   = DAYS                            *
*                              R1   = MINUTES                         *
*                              R14  = SECONDS                         *
*                              R15  = MICROSECONDS                    *
***********************************************************************
         SPACE 1
TODSUB1  DS    0H                  TOD-CLOCK CONVERSION SUB-ROUTINE
         SUBIN ,                   SUB-ROUTINE ENTRY
         D     R0,=AL4(60*1000000) CONVERT TO MINUTES
         LR    R15,R0              GET MICROSECONDS
         SR    R14,R14             CLEAR EVEN REGISTER
         D     R14,=F'1000000'     CONVERT TO SECONDS
         XR    R14,R15             SWAP ..
         XR    R15,R14             .. VALUES
         XR    R14,R15             .. OVER TO MORE LOGICAL SEQUENCE
         SR    R0,R0               CLEAR EVEN REGISTER
         D     R0,=AL4(60*24)      GET NO. DAYS
         XR    R0,R1               SWAP ..
         XR    R1,R0               .. VALUES
         XR    R0,R1               .. OVER TO MORE LOGICAL SEQUENCE
         SPACE 1
TODSUB1X DS    0H                  SUBROUTINE EXIT
         SUBOUT ,                  RETURN TO CALLER
         SPACE 2
***********************************************************************
* SUB-ROUTINE TO BUILD TWO DIGIT CHARACTER FIELD                      *
*                                                                     *
* ON ENTRY TO  THIS ROUTINE TODWORKD CONTAINS AN UNPACKED VALUE       *
* ON EXIT TODWORKC CONTAINS THE LAST THREE CHARACTERS OF THIS VALUE   *
***********************************************************************
         SPACE 1
TODSUB2  DS    0H                  THREE CHARACTER UNPACK ROUTINE
         SUBIN ,                   SUB-ROUTINE ENTRY
         UNPK  TODWORKC(3),TODWORKD+6(2) CONVERT TO CHARACTER
         OI    TODWORKC+2,X'F0'    MAKE SIGN PRINTABLE
         SPACE 1
TODSUB2X DS    0H                  SUBROUTINE EXIT
         SUBOUT ,                  RETURN TO CALLER
         EJECT ,
TODCLOCK DC    D'0'                AREA FOR CURRENT TOD-CLOCK
TODWORKD DC    D'0'                DOUBLEWORD WORK AREA
TODWORKC DC    CL4'    '           FOUR BYTE TEXT WORK AREA
BDAYTOD  DC    F'0'                TOD CLOCK BINARY DAYS..
BMINTOD  DC    F'0'                ..BINARY MINUTES
BSECTOD  DC    F'0'                ..BINARY SECONDS
BMSCTOD  DC    F'0'                ..BINARY MICROSECONDS
TODBTIME DC    F'0'                TIME OF DAY IN SECONDS*100
TODPDATE DC    0PL4'00000'         JULIAN DATE IN PACKED FORMAT
TODPCENT DC    X'00'               CENTURY
TODPJUL  DC    PL3'00000'          DATE WITHIN CENTURY IN PACKED FORMAT
TODPTIME DC    PL4'00000'          DATE IN SAME FORMAT AS 'TIME' DATES
TODDSCB  DC    XL3'000000'         DATE IN SAME FORMAT AS DSCB1 DATES
         SPACE 1
*        TIME AND DATE IN VARIOUS TEXT FORMATS
         SPACE 1
TODTIME  DS    0CL8                TIME HH.MM.SS
TODHH    DC    CL2'00'             HOURS
         DC    CL1':'              SEPARATOR
TODMM    DC    CL2'00'             MINUTES
         DC    CL1':'              SEPARATOR
TODSS    DC    CL2'00'             SECONDS
         SPACE 1
TODCC    DC    CL2'00'             CENTURY
TODYY    DC    CL2'00'             YEAR
TODDDD   DC    CL3'000'            JULIAN DAY
         SPACE 1
TODEND   EQU   *                   END OF TOD CLOCK DATA
TODLEN   EQU   TODEND-TODCLOCK     LENGTH OF TOD CLOCK DATA
