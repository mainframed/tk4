PARS     TITLE 'ARCHIVER V4.0 --- CONTROL STATEMENT PARSE'
*---------------------------------------------------------------------*
*---     ARCHPARS --- THE CONTROL STATEMENT PARSE ROUTINE          ---*
*---                                                               ---*
*---     THIS SERIALLY-REUSABLE ROUTINE DOES ALL THE CONTROL       ---*
*---     STATEMENT PROCESSING FOR THE ARCHIVER.  DUE TO THE        ---*
*---     NATURE OF RPARSE, THIS ROUTINE IS NOT REENTRANT AND       ---*
*---     PROBABLY NEVER WILL BE.  FOR THAT REASON, THE ARCHIVER    ---*
*---     USES THE 'LOAD' MACRO TO MAKE THIS ROUTINE AVAILABLE,     ---*
*---     RATHER THAN A SIMPLE VCON.                                ---*
*---                                                               ---*
*---     INPUT: THE AREA MAPPED BY THE RESULTS AREA IS             ---*
*---     ADDRESSED DIRECTLY BY REGISTER 1.  THIS AREA ALSO         ---*
*---     INCLUDES THE ADDRESSES OF ALL THE ARCHIVER ROUTINES       ---*
*---     THAT MIGHT BE USEFUL, LIKE THE PRINTING ROUTINE.          ---*
*---                                                               ---*
*---     OUTPUT: THE RESULTS AREA IS FILLED IN, USING THE DYNAM    ---*
*---     ROUTINE AS INDICATED BY CONTROL STATEMENTS TO ALLOCATE    ---*
*---     DATASETS.  ONE SPECIAL CASE: THE WORK FILE(S) IS(ARE)     ---*
*---     DYNAMICALLY ALLOCATED BY THE PROCESSORS OF THE ARCHIVER   ---*
*---     THAT NEED THEM, AS NEEDED.  DEFAULT SIZES FOR WORK        ---*
*---     FILES ARE DEFINED IN THE ARCHIVER MAIN PROGRAM.           ---*
*---                                                               ---*
*---     PLEASE NOTE: ANY REFERENCES TO FUNCTIONS NOT IMPLEMENTED  ---*
*---     IMPLIES A 'COMING ATTRACTION', TO BE IMPLEMENTED IN       ---*
*---     SOME FUTURE VERSION OF THE ARCHIVER PROGRAM.              ---*
*---                                                               ---*
*---     ANY CONTROL-STATEMENT-RELATED ERRORS, SUCH AS SYNTAX,     ---*
*---     ARE GENERATED BY THIS ROUTINE AND PRINTED USING A         ---*
*---     SPECIAL FORM OF THE #PUT MACRO.                           ---*
*---                                                               ---*
*---     ATTRIBUTES: SERIALLY-REUSABLE, NON-REENTRANT, AMODE-24,   ---*
*---                 RMODE-24, UNAUTHORIZED.                       ---*
*---                                                               ---*
*---------------------------------------------------------------------*
         MACRO
&LBL     #PUT  &VALUE
         LCLC  &L
&L       SETC  '&LBL'
         AIF   ('&L' EQ '').NOLBL
&LBL     DS    0H
.NOLBL   ANOP
         LA    R1,&VALUE           POINT TO PRINT DATA
         LR    R0,R12              LOAD THE BLOCK START ADDRESS
         L     R15,PRTRTN          POINT TO THE PRINT ROUTINE
         BALR  R14,R15             AND CALL IT
         MEND
ARCHPARS CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         COPY  #ARCBITS             COPY MASTER BIT LIST
         USING ARCHPARS,R15
         B     PASSIT              BRANCH AROUND
         DC    AL1(48)
         DC    CL8'ARCHPARS'       CSECT IDENTIFIER
         DC    CL8' V5 R0 '        VERSION/RELEASE ID
         DC    CL8'BRC0500'        FMID FOR SMP
         DC    CL8'*NONE*'         PTF LEVEL
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         DC    C' (C) 1990 RICHARD A. FOCHTMAN JR., '
         DC    C'LISLE, ILLINOIS '
         DC    H'4096'
PASSIT   DS    0H
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R11,R15             COPY ENTRY ADDRESS
         DROP  R15                 DISCARD OLD BASE
         USING ARCHPARS,R11,R10,R9 DEFINE THE BASE REGISTERS
         LA    R10,0(,R11)
         AH    R10,PASSIT-2
         LA    R9,0(,R10)
         AH    R9,PASSIT-2
         USING MAINWK,R12          AND BASE ITS DSECT
         L     R3,PRSWKL           LOAD WORK AREA LENGTH
         GETMAIN R,LV=(3)          A WORK AREA
         LR    R2,R1               COPY ITS ADDRESS
         LA    R14,0               CLEAR SOURCE POINTER
         LA    R15,0               AND LENGTH/PAD
         MVCL  R2,R14              CLEAR THE WORK AREA
         ST    R1,8(,R13)          STORE FORWARD POINTER
         ST    R13,4(,R1)          AND BACK POINTER
         LR    R13,R1              BUMP POINTER DOWN THE CHAIN
         USING PRSWK,R13
         L     R2,CTLIN            READ A CARD
         USING IHADCB,R2
         MVC   DCBEODA,=AL3(DONE2) NEW EODAD ADDRESS
         DROP  R2
*---------------------------------------------------------------------*
*---     CLEAR ANY SCANNER RESULTS IN ##ARCHWK.                   ----*
*---------------------------------------------------------------------*
IGNORE   DS    0H
         #SET  GENM,OFF            MEMBER NAME IS GENERIC
         #SET  GENG,OFF            GROUP IS GENERIC
         #SET  GENSG,OFF           SUBGROUP IS GENERIC
         #SET  GENT,OFF            TYPE IS GENERIC
         #SET  VRS,OFF             VERSION SPECIFIED
         #SET  SUPM,OFF            MEMBER NAME SUPPLIED
         #SET  SUPG,OFF            GROUP NAME SUPPLIED
         #SET  SUPSG,OFF           SUBGROUP NAME SUPPLIED
         #SET  SUPTYP,OFF          TYPE NAME SUPPLIED
         #SET  SAMECL,OFF          VSAM1 IS ALSO VSAM2
         #SET  REPL,OFF            REPLACE DUPS. DURING RELOAD
         #SET  GREPL,OFF           REPLACE= SUPPLIED
         #SET  RETA,ON             RETAIN ALIAS INFORMATION
         #SET  GRETA,OFF           ALIAS= SUPPLIED
         #SET  SHHDR,ON            PROCESS HEADERS
         #SET  GSHHDR,OFF          HEADER= SUPPLIED
         #SET  SHHEX,OFF           LISTING IS IN HEX
         #SET  GSHHEX,OFF          HEX= SUPPLIED
         #SET  SHITEM,OFF          PROCESS ITEM DATA
         #SET  GSHITEM,OFF         DATA= SUPPLIED
         #SET  ULMODS,ON           RECFM=U MEANS LMODS
         #SET  GULMODS,OFF         ULMODS= SUPPLIED
         #SET  COMK,OFF            COMMDATA KEY IS SPECIFIED
         #SET  PRCB,OFF            DELETE BACK-LEVEL ITEMS ONLY
         #SET  GPRCB,OFF           BACK= SUPPLIED
         #SET  PRCCM,OFF           PROCESS COMMDATA
         #SET  GPRCCM,OFF          NOTE= SUPPLIED
         #SET  NVPAN,OFF           NONVSAM IS A PANLIB
         #SET  GNVPAN,OFF          PANLIB= SUPPLIED
         #SET  NGENM,OFF           MEMBER NAME(2) IS GENERIC
         #SET  NGENG,OFF           GROUP(2) IS GENERIC
         #SET  NGENSG,OFF          SUBGROUP(2) IS GENERIC
         #SET  NGENT,OFF           TYPE(2) IS GENERIC
         #SET  RNGM,OFF            MEMBER IS A RANGE
         #SET  RNGG,OFF            GROUP IS A RANGE
         #SET  RNGSG,OFF           SUBGROUP IS A RANGE
         #SET  RNGT,OFF            TYPE IS A RANGE
         #SET  NVSPS,OFF           NONVSAM DATASET IS SEQUENTIAL
         #SET  NVSPO,OFF           NONVSAM DATASET IS PARTITIONED
         #SET  NOEXP,OFF           BYPASS EXPANDER DURING LOAD
         #SET  CONV,OFF            FORMAT CONVERSION REQUESTED
         #SET  SAMENAME,OFF        COMPTO MEMBER SAME AS ITEM MEMBER
         #SET  SAMEGRP,OFF         COMPTO GROUP SAME AS ITEM GROUP
         #SET  SAMESGRP,OFF        COMPTO SUBGRP SAME AS ITEM SUBGRP
         #SET  SAMETYPE,OFF        COMPTO TYPE SAME AS ITEM TYPE
         #SET  LISTALLC,OFF        LIST ALL COMPARISONS,OFF GOOD OR BAD
         #SET  AUTOALIS,OFF        AUTOMATICALLY DELETE/ASSIGN ALIAS
         #SET  CMPSHRTL,OFF        NOT SHORT-FORM COPY LIST
         MVI   Q1,C' '
         MVC   Q1+1(39),Q1
         XC    Q5,Q5
         MVC   QC1(40),Q1
         XC    QC5,QC5
         MVC   HIGHMEM,Q1
         MVC   VERB,Q1
         MVC   CURKEY,Q1
         MVC   SEPVAL,Q1
P3       DS    0H
*---------------------------------------------------------------------*
*---     NOW THE BREAD-AND-BUTTER PROCESSING. READ A CARD AND      ---*
*---     SCAN OFF THE PARMS, FILLING IN THE RESULTS AREA AS        ---*
*---     NEEDED.                                                   ---*
*---------------------------------------------------------------------*
*---     READ A CARD AND LIST IT OUT                               ---*
*---------------------------------------------------------------------*
         #IF   EODIN,ON,RET4
         L     R2,CTLIN            READ A CARD
         GET   (2),INCARD
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
         MVC   LINE+21(80),INCARD  COPY TO PRINT AREA
         #PUT  LINE                LIST IT FOR THE USER
         LA    R7,INCARD           POINT IT OUT FOR THE SCAN
         CLI   0(R7),C'*'          COMMENT RECORD ??
         BE    P3                  YES; GO FOR ANOTHER
*---------------------------------------------------------------------*
*---     CLOBBER ANY SEQUENCE FIELD AND LOCATE VERB AND OPERAND(S) ---*
*---------------------------------------------------------------------*
         MVC   72(8,R7),BLANKS     CLOBBER SEQUENCE FIELD
         MVC   VERB,BLANKS         CLEAR THE VERB AREA
         LA    R6,73(,R7)          POINT TO LAST POSSIBLE COLUMN
NONAME   DS    0H
         LA    R1,0(,R6)           COPY ENDING ADDRESS
         SR    R1,R7               MINUS STARTING ADDRESS
         BCTR  R1,R0               370 GLITCH
         EX    R1,TRTX             SCAN FOR NON-BLANK
         BZ    ERR1                NONE; CTL STMT ERROR
         LR    R7,R1               COPY ITS ADDRESS
         LR    R1,R6               COPY END ADDRESS
         SR    R1,R7               COMPUTE LENGTH
         BCTR  R1,R0               370 GLITCH (AGAIN)
         EX    R1,TRTY             LOCATE END OF VERB
         BZ    ERR1                NONE; CTL STMT ERROR
         SR    R1,R7               COMPUTE VERB LENGTH
         CH    R1,=H'10'           TOO LONG ??
         BH    ERR4                YES ---
         BCTR  R1,R0               370 GLITCH
         EX    R1,COPYVERB         COPY VERB TO RETURN AREA
         LA    R7,1(R1,R7)         POINT BACK TO SCAN STOPPER
OPNDS    DS    0H
         LR    R1,R6               COPY THE ENDING ADDRESS
         SR    R1,R7               COMPUTE LENGTH LEFT TO SCAN
         EX    R1,TRTX             LOCATE THE NEXT NON-BLANK
         BZ    DONE1               ALL DONE; GO PARSE WORK STRING
         LR    R7,R1               AND COPY ITS ADDRESS
         LR    R1,R6               COPY THE ENDING ADDRESS
         SR    R1,R7               COMPUTE LENGTH LEFT TO SCAN
         EX    R1,TRTY             LOCATE END OF OPERANDS
         SR    R1,R7               COMPUTE OPERAND STRING LENGTH
         LR    R3,R1               COPY THE LENGTH
         LR    R2,R7               AND ADDRESS
         L     R5,STRLEN           LOAD CURRENT WKSTR LENGTH
         LA    R4,WKSTR(R5)        POINT INTO WKSTR
         AR    R5,R3               ADD NEW STRING LENGTH
         ST    R5,STRLEN           SAVE UPDATED LENGTH
         LR    R5,R3               COPY MOVE LENGTH
         MVCL  R4,R2               COPY OPERANDS TO WORK STRING
         L     R3,STRLEN           RELOAD WORK STRING LENGTH
         LA    R3,WKSTR(R3)        POINT TO STRING END
         BCTR  R3,R0               BACK UP A BYTE
         CLI   0(R3),C','          END IN A COMMA ??
         BNE   DONE1               NOPE; PROCESS AS COMPLETE STRING
         L     R2,CTLIN            LOCATE THE INPUT DCB
REGET    DS    0H
         L     R2,CTLIN
         #IF   EODIN,ON,RET4
         GET   (2),INCARD
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
         MVC   LINE+21(80),0(R1)   COPY TO PRINT AREA
         #PUT  LINE                LIST IT FOR THE USER
         LA    R7,INCARD           POINT IT OUT FOR THE SCAN
         CLI   0(R7),C'*'          COMMENT RECORD ??
         BE    REGET               YES; GO FOR ANOTHER
         LA    R6,71(,R7)          POINT TO LAST POSSIBLE COLUMN
         MVC   INCARD+72(8),BLANKS CLOBBER SEQUENCE FIELD
         B     OPNDS               AND GO FOR OPERANDS ---
DONE2    DS    0H
         #SET  EODIN,ON
         NC    STRLEN,STRLEN       NULL STRING ??
         BZ    ENDSCAN             YES; ALL DONE ---
DONE1    DS    0H
         L     R2,STRLEN           LOAD WORK STRING LENGTH
         LTR   R2,R2               NO OPERANDS ??
         BZ    DOVERB              YES ---
         LA    R3,WKSTR            POINT TO THE WORK STRING
         LA    R4,0(R3,R2)         POINT TO WORK STRING END
         BCTR  R4,R0               BACK UP A BYTE
         CLI   0(R4),C','          END IN A COMMA ??
         BE    ERRC                YES; INCOMPLETE
         LA    R4,1(,R4)           POINT BACK TO END
         MVC   0(8,R4),BLANKS      PAD WITH BLANKS
*---------------------------------------------------------------------*
*---     SELECT A PARSE KEYWORD LIST BASED ON THE VERB.  THIS IS   ---*
*---     TO SERVE TWO PURPOSES: FIRST, TO ALLOW DIFFERENT PROC-    ---*
*---     ESSING FOR THE SAME KEYWORD ON TWO CONTROL STATEMENTS     ---*
*---     AND TO ALLOW DEFAULTS TO BE SET HERE, RATHER THAN IN THE  ---*
*---     ARCHMAIN ROUTINE.                                         ---*
*---------------------------------------------------------------------*
DOVERB   DS    0H
         LA    R4,KVBTAB           POINT TO TABLE START
         LA    R14,KVBLEN          LOAD ENTRY LENGTH
         LA    R15,KVBLAST         AND LAST ENTRY
KVBS1    DS    0H
         CLC   VERB,0(R4)          VERBS MATCH ??
         BE    KVBS2               YES; WE'VE GOT IT ---
         BXLE  R4,R14,KVBS1        LOOP, SEARCHINGLY
*        UNKNOWN VERB LANDS HERE
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    MAKE A WHOLE FOREST
         MVC   LINE+1(3),=CL3'***'
         MVC   LINE+5(10),VERB     COPY VERB TO LINE
         MVC   LINE+17(L'VBMSG),VERBMSG MESSAGE TEXT
         #PUT  LINE                OUTPUT THE MESSAGE
         XC    STRLEN,STRLEN       RESET THE WORK STRING
         B     IGNORE              IGNORE THIS STATEMENT
KVBS2    DS    0H
         L     R7,12(,R4)          LOAD PARSE TABLE ADDRESS
         LTR   R7,R7               ANYTHING TO PARSE ??
         BZ    ENDSCAN             NOPE; NO OPERANDS
         CALL  RPARSE,((R3),STRLEN,(7)),MF=(E,CALLIST)
         LR    R1,R15              COPY THE RETURN CODE
         N     R15,=A(X'FF')
         B     P5(R15)             PROCESS THE RETURN CODE
P5       DS    0H
         B     PRC0                ALL IS OK
         B     PRC4                SYNTAX ERROR
         B     PRC8                POS. PARM AFTER KW PARM
         B     PRC12               MIS-MATCHED PARENTHESES
         B     PRC16               MISSING '=' AFTER KW
         B     PRC20               ZERO LENGTH PARAMETER
         B     PRC24               UNKNOWN KEYWORD
         B     PRC28               SUBLIST IMPROPERLY ENDED
         B     PRC32               Q'STR IMPROPERLY ENDED
         B     PRC36               NESTED TOO DEEP
PRC0     DS    0H
         EJECT
*---------------------------------------------------------------------*
*---     FILL IN THE RESULTS AREA FROM THE OUTPUT OF THE           ---*
*---     STATEMENT PARSE. THIS IS DONE BY LOOPING THROUGH          ---*
*---     THE PARSE PARAMETER LIST SELECTED ABOVE AND USING         ---*
*---     THE RSV FIELD OF THE PARSE ELEMENT TO SELECT THE          ---*
*---     OPERAND PROCESSING ROUTINE APPROPRIATE. BECAUSE OF        ---*
*---     THE NATURE OF THIS MECHANISM, ALL SUBLISTS ARE            ---*
*---     ASSUMED TO BE POSITIONAL-TYPE CONTENT.                    ---*
*---------------------------------------------------------------------*
         LH    R6,2(,R7)           LOAD $PARSE TABLE ENTRY COUNT
         LA    R7,4(,R7)           POINT TO FIRST ACTUAL ENTRY
         USING PRSKWKW,R7          AND BASE THE DSECT
PL1      DS    0H
         LR    R8,R7               COPY $PARSE ENTRY ADDRESS
         CLC   =F'0',PRSKWSL       ANY SUBLIST ??
         BE    PL2                 NOPE ---
         L     R8,PRSKWSL          LOAD SUBLIST POINTER
PL2      DS    0H
         CLC   PRSKWLN,=H'0'       ZERO-LENGTH VALUE ??
         BE    PL3                 THAT'S RIGHT ---
         LH    R15,PRSKWRS         LOAD RESERVED-FIELD VALUE
         LA    R15,PLRTAB(R15)     POINT INTO PROCESSOR ADDRESS LIST
         L     R15,0(,R15)         LOAD PROCESSOR ADDRESS
         BR    R15                 AND GO TO IT ---
PL3      DS    0H
         LA    R7,PRSKWBC(,R7)     POINT TO NEXT ENTRY
         BCT   R6,PL1              AND LOOP, PROCESSING EACH PARM
         B     ENDSCAN             AND TERMINATE THE PARSER
         DROP  R7
         USING PRSKWKW,R8          AND REDEFINE THE DSECT
         EJECT
*---------------------------------------------------------------------*
*---     OPERAND PROCESSING STARTS HERE                           ----*
*---------------------------------------------------------------------*
         SPACE 3
*---------------------------------------------------------------------*
*---     PROCESS ALIASES=(YES/Y/NO/N) SPECIFICATION                ---*
*---     TRIGGERS THE RETENTION OF ALIASES DURING LOAD/UNLOAD      ---*
*---------------------------------------------------------------------*
ALIASES  DS    0H
         #SETFLAG BIT=RETA,        SWITCH BIT NAME                     X
               MSGVAL=ALIAS,       SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GRETA           KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
*---------------------------------------------------------------------*
*---     PROCESS BACK=(YES/Y/NO/N) SPECIFICATION                   ---*
*---     PROCESS ALL BACK LEVELS. DELETE/LIST ONLY                 ---*
*---------------------------------------------------------------------*
BACK     DS    0H
         #SETFLAG BIT=PRCB,        SWITCH BIT NAME                     X
               MSGVAL=BACK,        SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GPRCB           KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
*---------------------------------------------------------------------*
*---     PROCESS DATA=(YES/Y/NO/N) SPECIFICATION                   ---*
*---     PROCESS ALL DATA RECDS; LIST/DELETE ONLY                  ---*
*---     DEFAULT = NO                                              ---*
*---------------------------------------------------------------------*
DATA     DS    0H
         #SETFLAG BIT=SHITEM,      SWITCH BIT NAME                     X
               MSGVAL=DATA,        SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GSHITEM         KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
*---------------------------------------------------------------------*
*---     PROCESS HEX=(YES/Y/NO/N) SPECIFICATION                    ---*
*---     LIST INFORMATION IN HEX. LIST ONLY                        ---*
*---     DEFAULT = NO                                              ---*
*---------------------------------------------------------------------*
HEX      DS    0H
         #SETFLAG BIT=SHHEX,       SWITCH BIT NAME                     X
               MSGVAL=HEX,         SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GSHHEX          KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
*---------------------------------------------------------------------*
*---     PROCESS HDR=(YES/Y/NO/N) SPECIFICATION                    ---*
*---     LIST HEADER INFORMATION. LIST ONLY                        ---*
*---     DEFAULT = YES                                             ---*
*---------------------------------------------------------------------*
HEADER   DS    0H
         #SETFLAG BIT=SHHDR,       SWITCH BIT NAME                     X
               MSGVAL=HEADER,      SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GSHHDR          KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
*---------------------------------------------------------------------*
*---     PROCESS NOTE=(YES/Y/NO/N) SPECIFICATION                   ---*
*---     PROCESS NOTE DATA (FORMERLY 'COMMENT' DATA)               ---*
*---     DEFAULT = NO (LIST/DELETE ONLY)                           ---*
*---------------------------------------------------------------------*
NOTE     DS    0H
         #SETFLAG BIT=PRCCM,       SWITCH BIT NAME                     X
               MSGVAL=NOTE,        SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GPRCCM          KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
*---------------------------------------------------------------------*
*---     PROCESS PANLIB=(YES/Y/NO/N) SPECIFICATION                 ---*
*---     NONVSAM DATASET IS A PANLIB                               ---*
*---     DEFAULT = NO (LIST/DELETE ONLY)                           ---*
*---------------------------------------------------------------------*
PANLIB   DS    0H
         #SETFLAG BIT=NVPAN,       SWITCH BIT NAME                     X
               MSGVAL=PANLIB,      SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GNVPAN          KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
*---------------------------------------------------------------------*
*---     PROCESS REPLACE=(YES/Y/NO/N) SPECIFICATION                ---*
*---     REPLACE PRE-EXISTING DUPLICATE DURING LOAD                ---*
*---     DEFAULT = NO                                              ---*
*---------------------------------------------------------------------*
REPLACE  DS    0H
         #SETFLAG BIT=REPL,        SWITCH BIT NAME                     X
               MSGVAL=REPLACE,     SUBSTITUTION VALUE FOR ERROR MSG    X
               KWG=GREPL           KEYWORD-SUPPLIED FLAG BIT NAME
         B     PL3                 RETURN TO OPERAND LOOP
         SPACE 3
*---------------------------------------------------------------------*
*---     PROCESS CHKALIAS=(YES/Y/NO/N) SPECIFICATION               ---*
*---     CHECK ARCHIVE ALIASES DURING LOAD/LOADT                   ---*
*---     DEFAULT = NO                                              ---*
*---------------------------------------------------------------------*
CHKALIAS DS    0H
         #SETFLAG BIT=LDARCHA,     SWITCH BIT NAME                     X
               MSGVAL=CHKALIAS     SUBSTITUTION VALUE FOR ERROR MSG
         B     PL3                 RETURN TO OPERAND LOOP
         SPACE 3
*---------------------------------------------------------------------*
*---     PROCESS SHRTLST=(YES/Y/NO/N) SPECIFICATION                ---*
*---     SHORT-FORM OF ARCHCOMP LISTING.                           ---*
*---     DEFAULT = NO                                              ---*
*---------------------------------------------------------------------*
SHRTLST  DS    0H
         #SETFLAG BIT=CMPSHRTL,    SWITCH BIT NAME                     X
               MSGVAL=SHRTLST      SUBSTITUTION VALUE FOR ERROR MSG
         B     PL3                 RETURN TO OPERAND LOOP
         SPACE 3
*---------------------------------------------------------------------*
*---     PROCESS KEY= SPECIFICATION. THE VALUE MUST BE 1-8         ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.                                           ---*
*---------------------------------------------------------------------*
         SPACE 3
KEY      DS    0H
         MVC   CURKEY,=CL8' '      BLANK THE FIELD
         LH    R1,PRSKWLN          LOAD THE LENGTH
         LTR   R1,R1               IS IT ZERO ??
         BZ    PL3                 YES; SKIP THIS
         CH    R1,=H'8'            TOO LONG ??
         BNH   KEY1                NOPE; PROCESS IT ---
         #PUT  KERR1               ERROR MESSAGE
         #PUT  KERRIGN             'IGNORED' MESSAGE
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              GO GET ANOTHER CONTROL STATEMENT
KEY1     DS    0H
         MVC   CURKEY,=CL8' '      CLEAR OUT THE OLD VALUE
         BCTR  R1,R0               DECREMENT LENGTH FOR MVC GLITCH
         L     R15,PRSKWLOC        POINT TO THE VALUE
         EX    R1,KEY2             COPY VALUE TO RESULTS AREA
         B     PL3                 AND RETURN TO OPERAND PARSE
KEY2     MVC   CURKEY(1),0(R15)    'EX'ED COPY OF KEY VALUE
         SPACE 3
*---------------------------------------------------------------------*
*---     PROCESS SEP= SPECIFICATION. THE VALUE MUST BE 1-8         ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.                                           ---*
*---------------------------------------------------------------------*
SEP      DS    0H
         MVC   IOSEP(4),=X'47F0E000' INITIALIZE TO A NO-OP
         LH    R1,PRSKWLN          LOAD THE LENGTH
         LTR   R1,R1               IS IT ZERO ??
         BZ    PL3                 YES; SKIP THIS
         CH    R1,=H'8'            TOO LONG ??
         BNH   SEP1                NOPE; PROCESS IT ---
         #PUT  SEPERR1             ERROR MESSAGE
         #PUT  KERRIGN             'IGNORED' MESSAGE
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              GO GET ANOTHER CONTROL STATEMENT
SEP1     DS    0H
         MVC   SEPVAL,=CL8' '      CLEAR OUT THE OLD VALUE
         BCTR  R1,R0               DECREMENT LENGTH FOR MVC GLITCH
         L     R15,PRSKWLOC        POINT TO THE VALUE
         EX    R1,SEP2             COPY VALUE TO RESULTS AREA
         B     PL3                 AND RETURN TO OPERAND LOOP
SEP2     MVC   SEPVAL(1),0(R15)    'EX'ED COPY OF SEP VALUE
         EJECT
*---------------------------------------------------------------------*
*---     PROCESS DDN= SPECIFICATION. THE VALUE MUST BE 1-8         ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DDNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
DDNAME   DS    0H
         USING PRSKWKW,R8
         LH    R0,PRSKWLN          LOAD ITS LENGTH
         LTR   R0,R0               WAS IT SUPPLIED ??
         BZ    PL3                 NOPE ---
         #IF   NVDYN,OFF,DDN1      WAS IT DYNAMIC ??
         MVC   FREEDDN,NVSAMDD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  NVDYN,OFF           TURN OFF THE SWITCH
DDN1     DS    0H
         LA    R3,NVSAMDD          RESULTS FIELD
         LH    R1,PRSKWLN          LOAD THE LENGTH
         LTR   R1,R1               IS IT ZERO ??
         BZ    PL3                 YES; SKIP THIS
         CH    R1,=H'8'            TOO LONG ??
         BNH   DDN2                NOPE; PROCESS IT ---
         #PUT  DDERR1              ERROR MESSAGE
         #PUT  KERRIGN             'IGNORED' MESSAGE
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              GO GET ANOTHER CONTROL STATEMENT
DDN2     DS    0H
         MVC   0(8,R3),=CL8' '     START WITH BLANKS
         BCTR  R1,R0               DECREMENT LENGTH FOR MVC GLITCH
         L     R15,PRSKWLOC        POINT TO THE VALUE
         EX    R1,COPYDDN          COPY VALUE TO RESULTS AREA
         OC    0(8,R3),=CL8' '     CAPS AND PADS
         B     PL3                 RETURN TO OPERAND LOOP
         EJECT
*---------------------------------------------------------------------*
*---     PROCESS VSAM1DD= SPECIFICATION. THE VALUE MUST BE 1-8     ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DDNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
DDNV1    DS    0H
         USING PRSKWKW,R8
         LH    R0,PRSKWLN          LOAD ITS LENGTH
         LTR   R0,R0               WAS IT SUPPLIED ??
         BZ    PL3                 NOPE ---
         #IF   V1DYN,OFF,DV11      WAS IT DYNAMIC ??
         MVC   FREEDDN,VSAM1DD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  V1DYN,OFF           TURN OFF THE SWITCH
DV11     DS    0H
         LA    R3,VSAM1DD          RESULTS FIELD
         LH    R1,PRSKWLN          LOAD THE LENGTH
         LTR   R1,R1               IS IT ZERO ??
         BZ    PL3                 YES; SKIP THIS
         CH    R1,=H'8'            TOO LONG ??
         BNH   DV12                NOPE; PROCESS IT ---
         #PUT  DDERR1              ERROR MESSAGE
         #PUT  KERRIGN             'IGNORED' MESSAGE
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              GO GET ANOTHER CONTROL STATEMENT
DV12     DS    0H
         MVC   0(8,R3),=CL8' '     START WITH BLANKS
         BCTR  R1,R0               DECREMENT LENGTH FOR MVC GLITCH
         L     R15,PRSKWLOC        POINT TO THE VALUE
         EX    R1,COPYDDN          COPY VALUE TO RESULTS AREA
         OC    0(8,R3),=CL8' '     CAPS AND PADS
         B     PL3                 RETURN TO OPERAND LOOP
         EJECT
*---------------------------------------------------------------------*
*---     PROCESS VSAM2DD SPECIFICATION. THE VALUE MUST BE 1-8      ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DDNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
DDNV2    DS    0H
         USING PRSKWKW,R8
         LH    R0,PRSKWLN          LOAD ITS LENGTH
         LTR   R0,R0               WAS IT SUPPLIED ??
         BZ    PL3                 NOPE ---
         #IF   V2DYN,OFF,DV21      WAS IT DYNAMIC ??
         MVC   FREEDDN,VSAM2DD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  V2DYN,OFF           TURN OFF THE SWITCH
DV21     DS    0H
         LA    R3,VSAM2DD          RESULTS FIELD
         LH    R1,PRSKWLN          LOAD THE LENGTH
         LTR   R1,R1               IS IT ZERO ??
         BZ    PL3                 YES; SKIP THIS
         CH    R1,=H'8'            TOO LONG ??
         BNH   DV22                NOPE; PROCESS IT ---
         #PUT  DDERR1              ERROR MESSAGE
         #PUT  KERRIGN             'IGNORED' MESSAGE
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              GO GET ANOTHER CONTROL STATEMENT
DV22     DS    0H
         MVC   0(8,R3),=CL8' '     START WITH BLANKS
         BCTR  R1,R0               DECREMENT LENGTH FOR MVC GLITCH
         L     R15,PRSKWLOC        POINT TO THE VALUE
         EX    R1,COPYDDN          COPY VALUE TO RESULTS AREA
         OC    0(8,R3),=CL8' '     CAPS AND PADS
         B     PL3                 RETURN TO OPERAND LOOP
         EJECT
*---------------------------------------------------------------------*
*---     PROCESS VSAM1DD SPECIFICATION. THE VALUE MUST BE 1-8      ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DDNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
EXPDD    DS    0H
         USING PRSKWKW,R8
         LH    R0,PRSKWLN          LOAD ITS LENGTH
         LTR   R0,R0               WAS IT SUPPLIED ??
         BZ    PL3                 NOPE ---
         #IF   EXTDYN,OFF,EXPT1    WAS IT DYNAMIC ??
         MVC   FREEDDN,EXPTPDD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  EXTDYN,OFF          TURN OFF THE SWITCH
EXPT1    DS    0H
         LA    R3,EXPTPDD          RESULTS FIELD
         LH    R1,PRSKWLN          LOAD THE LENGTH
         LTR   R1,R1               IS IT ZERO ??
         BZ    PL3                 YES; SKIP THIS
         CH    R1,=H'8'            TOO LONG ??
         BNH   EXPT2               NOPE; PROCESS IT ---
         #PUT  DDERR1              ERROR MESSAGE
         #PUT  KERRIGN             'IGNORED' MESSAGE
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              GO GET ANOTHER CONTROL STATEMENT
EXPT2    DS    0H
         MVC   0(8,R3),=CL8' '     START WITH BLANKS
         BCTR  R1,R0               DECREMENT LENGTH FOR MVC GLITCH
         L     R15,PRSKWLOC        POINT TO THE VALUE
         EX    R1,COPYDDN          COPY VALUE TO RESULTS AREA
         OC    0(8,R3),=CL8' '     CAPS AND PADS
         B     PL3                 RETURN TO OPERAND LOOP
COPYDDN  MVC   0(*-*,R3),0(R15)    'EX'ED COPY OF KEY VALUE
         EJECT
*---------------------------------------------------------------------*
*---     PROCESS DSN= SPECIFICATION. THE VALUE MUST BE 1-44        ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DDNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
DSN      DS    0H
         LH    R0,PRSKWLN          LOAD VALUE LENGTH
         LTR   R0,R0               ANY VALUE ??
         BZ    PL3                 NOPE ---
         CLI   NVSAMDD,C' '        IS IT ALLOCATED ALREADY ??
         BNH   DSN1                NOPE ---
         #IF   NVDYN,OFF,DSN1
         MVC   FREEDDN,NVSAMDD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  NVDYN,OFF
DSN1     DS    0H
         LA    R3,NVSAMDD          RESULTS FIELD
         #SET  NVDYN,ON
         BAL   R5,DODSN            GO PROCESS DSNAME
         LTR   R15,R15             DID IT ALLOCATE OK ??
         BZ    PL3                 YES ---
         #SET  NVDYN,OFF
         #PUT  BADALLOC
         #PUT  ALLOCIGN
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              IGNORE THE STATEMENT
*---------------------------------------------------------------------*
*---     PROCESS VSAM1DSN= SPECIFICATION. THE VALUE MUST BE 1-44   ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DSNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
V1DSN    DS    0H
         LH    R0,PRSKWLN          LOAD VALUE LENGTH
         LTR   R0,R0               ANY VALUE ??
         BZ    PL3                 NOPE ---
         CLI   VSAM1DD,C' '        IS IT ALLOCATED ALREADY ??
         BNH   V1DSN1              NOPE ---
         #IF   V1DYN,OFF,V1DSN1
         MVC   FREEDDN,VSAM1DD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  V1DYN,OFF
V1DSN1   DS    0H
         #SET  V1DYN,ON
         LA    R3,VSAM1DD          RESULTS FIELD
         BAL   R5,DODSN            GO PROCESS DSNAME
         MVC   VS1DSN,DYNDSN       COPY DATASET NAME              *DHC*
         LTR   R15,R15             DID IT ALLOCATE OK ??
         BZ    PL3                 YES ---
         #SET  V1DYN,OFF
         #PUT  BADALLOC
         #PUT  ALLOCIGN
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              IGNORE THE STATEMENT
*---------------------------------------------------------------------*
*---     PROCESS EXPDSN= SPECIFICATION. THE VALUE MUST BE 1-44     ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DSNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
EXPDSN   DS    0H
         LH    R0,PRSKWLN          LOAD VALUE LENGTH
         LTR   R0,R0               ANY VALUE ??
         BZ    PL3                 NOPE ---
         #IF   EXTDYN,OFF,EXPDSN1  IS IT ALLOCATED ALREADY ??
         MVC   FREEDDN,EXPTPDD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  V1DYN,OFF
EXPDSN1  DS    0H
         #SET  V1DYN,ON
         LA    R3,EXPTPDD          RESULTS FIELD
         BAL   R5,DODSN            GO PROCESS DSNAME
         LTR   R15,R15             DID IT ALLOCATE OK ??
         BZ    PL3                 YES ---
         #SET  V1DYN,OFF
         #PUT  BADALLOC
         #PUT  ALLOCIGN
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              IGNORE THE STATEMENT
*---------------------------------------------------------------------*
*---     PROCESS VSAM2DSN= SPECIFICATION. THE VALUE MUST BE 1-44   ---*
*---     CHARACTERS OF ANY VALUE THAT WILL PASS THROUGH THE        ---*
*---     RPARSE ROUTINE.  (ALSO MUST BE A VALID DSNAME, BUT I      ---*
*---     DON'T CHECK FOR THAT.)                                    ---*
*---------------------------------------------------------------------*
V2DSN    DS    0H
         LH    R0,PRSKWLN          LOAD VALUE LENGTH
         LTR   R0,R0               ANY VALUE ??
         BZ    PL3                 NOPE ---
         CLI   VSAM2DD,C' '        IS IT ALLOCATED ALREADY ??
         BNH   V2DSN1              NOPE ---
         #IF   V2DYN,OFF,V2DSN1
         MVC   FREEDDN,VSAM2DD     COPY TO DYNAM PARM AREA
         CALL  DYNAM,(ZERO,FREE,FREEPRMS),VL
         #SET  V2DYN,OFF
V2DSN1   DS    0H
         #SET  V2DYN,ON
         LA    R3,VSAM2DD          RESULTS FIELD
         BAL   R5,DODSN            GO PROCESS DSNAME
         MVC   VS2DSN,DYNDSN       COPY DATASET NAME              *DHC*
         LTR   R15,R15             DID IT ALLOCATE OK ??
         BZ    PL3                 YES ---
         #SET  V2DYN,OFF
         #PUT  BADALLOC
         #PUT  ALLOCIGN
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         B     IGNORE              IGNORE THE STATEMENT
         EJECT
*---------------------------------------------------------------------*
*---     LOCAL SUBROUTINE TO DYNAMICALLY ALLOCATE DATASETS         ---*
*---------------------------------------------------------------------*
DODSN    DS    0H
         LH    R1,PRSKWLN          LOAD THE KEYWORD LENGTH
         LR    R4,R3               COPY THE OUTPUT DDNAME POINTER
         LA    R3,DYNDSN           FOR REUSE OF COPYDDN INSTR.
         BCTR  R1,R0               DECREMENT LENGTH BY ONE
         MVI   DYNDSN,C' '         SEED IN A BLANK
         MVC   DYNDSN+1(45),DYNDSN CLEAR THE AREA
         L     R15,PRSKWLOC        POINT TO THE DSNAME
         EX    R1,COPYDDN          COPY THE DSNAME TO THE PARM AREA
         LR    R3,R4               RESTORE THE OUTPUT DDNAME POINTER
         CALL  DYNAM,(ZERO,ALLOC,INFAREA,PRMS),VL
         LTR   R15,R15             DID IT ALLOCATE OK ??
         BNZR  R5                  NOPE; ANALYZE AND PRINT ---
         MVC   0(8,R3),DDNRET      COPY BACK THE DDNAME
         LA    R0,NVSAMDD          IS THIS THE NON-VSAM FILE ??
         CR    R3,R0                ???
         BNER  R5                  NOPE; SKIP DSORG COPY
         MVC   NVSDSORG,DSORGRET   COPY DSORG TO RETURN AREA
         BR    R5                  AND RETURN TO MY CALLER
*---------------------------------------------------------------------*
*---     RETURN TO ARCHMAIN FOR PROCESSING.                        ---*
*---------------------------------------------------------------------*
*++++++++++++++++++++++++++++++++++
ENDSCAN  DS    0H
         XC    STRLEN,STRLEN       CLEAR THE WORK STRING
         CLC   VERB,=CL10'SET'     WAS IT THE 'SET' VERB ??
         BE    P3                  YES; GO DO ANOTHER STATEMENT
         LA    R15,0
RETURN   DS    0H
         LR    R1,R13
         L     R13,4(,R13)
         ST    R15,16(,R13)
         L     R0,PRSWKL           LOAD AREA LENGTH
         FREEMAIN R,LV=(0),A=(1)
         LM    R14,R12,12(R13)
         MVI   12(R13),255
         BR    R14
RET4     DS    0H
         LA    R15,4
         B     RETURN
         EJECT
*---------------------------------------------------------------------*
*---     PROCESS THE CONTENTS OF THE 'ITEM=' KEYWORD. WE NEED TO  ----*
*---     EXTRACT EACH VALUE AND PLACE IT IN THE APPROPRIATE FIELD ----*
*---     OF THE ARCHIVER'S MAIN WORK AREA, FOR LATER REFERENCE BY ----*
*---     THE VARIOUS PROCESSING ROUTINES OF THE ARCHIVER.  THIS   ----*
*---     CODE IS GENERALLY FAIRLY STRAIGHTFORWARD AND             ----*
*---     UNDERSTANDABLE.                                          ----*
*---------------------------------------------------------------------*
ITEM     DS    0H
         PUSH  USING
         USING PRSPSLN,R8          AND BASE ITS DSECT
         LA    R8,2(,R8)           POINT PAST THE HEADER
         LA    R3,Q1               POINT TO OUTPUT AREA
         LA    R2,4                LOAD QUALIFIER COUNT
ITEM1    DS    0H
         ICM   R4,15,PRSPSLOC      LOAD POINTER TO THE VALUE
         LH    R15,PRSPSLN         LOAD THE VALUE LENGTH
         LTR   R15,R15             NULL VALUE ??
         BZ    ITEM2               YES; SKIP THIS
         BCTR  R15,R0
         CH    R15,=H'9'           TOO LONG ??
         BH    BADQUAL             YES ---
         EX    R15,MOVEQ           AND COPY THE QUALIFIER
ITEM2    DS    0H
         LA    R8,PRSPSBC(,R8)     BUMP TO NEXT PARSE PARM
         LA    R3,10(,R3)          POINT TO NEXT OUTPUT AREA
         BCT   R2,ITEM1            LOOP FOR FOUR QUALIFIERS
*---------------------------------------------------------------------*
*---     NUMERIC FIFTH QUALIFIER (VERSION NUMBER)                 ----*
*---------------------------------------------------------------------*
         #SET  VRS,OFF             SHOW VERSION, TO START WITH
         ICM   R4,15,PRSPSLOC      LOAD POINTER TO THE VALUE
         MVC   Q5,=XL4'00'         BLANK IT OUT
         LH    R15,PRSPSLN         LOAD THE VALUE LENGTH
         LTR   R15,R15             NULL VALUE ??
         BZ    ITEM3               YES; SKIP THIS
         BCTR  R15,R0              DECREMENT FOR MVC GLITCH
         CH    R15,=H'9'           TOO LONG ??
         BH    BADQUAL             YES ---
         EX    R15,TEST#           ALL NUMERICS ??
         BNZ   BADQUAL             NOPE ---
         LA    R15,X'70'(,R15)     INSERT THE REST OF THE PACK LENGTH
         #SET  VRS,ON              SHOW VERSION, TO START WITH
         EX    R15,VERPACK         PACK THE VERSION NUMBER
         CVB   R0,DWORK            INTO BINARY
         STCM  R0,15,0(R3)         SAVE RESULT
         XC    0(4,R3),=X'FFFFFFFF'  INVERT ALL BITS
ITEM3    DS    0H
*---------------------------------------------------------------------*
*---     ONE LAST LITTLE DETAIL. SEVERAL PROCESSES ARE DEPENDANT   ---*
*---     ON KNOWING WHETHER THE NAME SUPPLIED IS A GENERIC OR      ---*
*---     NOT. THEREFORE, WE USE THIS SLOPPY LITTLE PIECE OF CODE   ---*
*---     TO SET THE VARIOUS 'QUALIFIER IS GENERIC' FLAG BITS.      ---*
*---                                                               ---*
*---     A SHORT DESCRIPTION OF GENERICS: A '*' IN ANY QUALIFIER   ---*
*---     DENOTES THAT THE CHARACTER IN THE MATCHING POSITION OF A  ---*
*---     QUALIFIER, AND ALL FOLLOWING CHARACTERS, ARE TO BE        ---*
*---     CONSIDERED A MATCH IN ALL CASES.  ON THE OTHER HAND, A    ---*
*---     '%' CHARACTER DENOTES A SINGLE CHARACTER, IN THE          ---*
*---     MATCHING POSITION, THAT MAY BE ANYTHING AND STILL         ---*
*---     CONSIDERED A MATCH.  IT'S ALL MODELED AFTER THE GENERIC   ---*
*---     CHARACTERS IN RACF PROFILES.                              ---*
*---------------------------------------------------------------------*
GENCHK   DS    0H
         #SET  GENM,OFF            START
         #SET  GENG,OFF              WITH
         #SET  GENSG,OFF               FLAGS
         #SET  GENT,OFF                  OFF
         LA    R5,Q1+9             POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,Q1               POINT TO QUALIFIER START
GQ1      DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    GQ3                 YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   GQ2                 NOPE ---
         #SET  GENM,ON             SET THE FLAG BIT
GQ2      DS    0H
         BXLE  R3,R4,GQ1           AND LOOP, SEARCHINGLY
         B     GQ4                 DO THE NEXT ITEM ---
GQ3      DS    0H
         #SET  GENM,ON             SET THE FLAG BIT
GQ3A     DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,GQ3A          FOR REST OF STRING
GQ4      DS    0H
         LA    R5,Q2+9             POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,Q2               POINT TO QUALIFIER START
GQ5      DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    GQ7                 YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   GQ6                 NOPE ---
         #SET  GENG,ON             SET THE FLAG BIT
GQ6      DS    0H
         BXLE  R3,R4,GQ5           AND LOOP, SEARCHINGLY
         B     GQ8                 DO THE NEXT ITEM ---
GQ7      DS    0H
         #SET  GENG,ON             SET THE FLAG BIT
GQ7A     DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,GQ7A          FOR REST OF STRING
GQ8      DS    0H
         LA    R5,Q3+9             POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,Q3               POINT TO QUALIFIER START
GQ9      DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    GQ11                YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   GQ10                NOPE ---
         #SET  GENSG,ON            SET THE FLAG BIT
GQ10     DS    0H
         BXLE  R3,R4,GQ9           AND LOOP, SEARCHINGLY
         B     GQ12                DO THE NEXT ITEM ---
GQ11     DS    0H
         #SET  GENSG,ON            SET THE FLAG BIT
GQ11A    DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,GQ11A         FOR REST OF STRING
GQ12     DS    0H
         LA    R5,Q4+9             POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,Q4               POINT TO QUALIFIER START
GQ13     DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    GQ15                YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   GQ14                NOPE ---
         #SET  GENT,ON             SET THE FLAG BIT
GQ14     DS    0H
         BXLE  R3,R4,GQ13          AND LOOP, SEARCHINGLY
         B     GQ16                DO THE NEXT ITEM ---
GQ15     DS    0H
         #SET  GENT,ON             SET THE FLAG BIT
GQ15A    DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,GQ15A         FOR REST OF STRING
GQ16     DS    0H
         B     PL3                 AND RETURN TO CALLER
         POP   USING
*---------------------------------------------------------------------*
*---     THESE INSTRUCTIONS ARE SHARED BY ALL THE QUALIFIER SCAN  ----*
*---     ROUTINES.  THEY ARE HERE FOR CONVENIENCE IN DEVELOPMENT. ----*
*---------------------------------------------------------------------*
VERPACK  PACK  DWORK,0(0,R4)       PACK OF VERSION NUMBER
MOVEQ    MVC   0(0,R3),0(R4)
TEST#    TRT   0(0,R4),NUMBERS     TEST FOR NUMERICS
         EJECT
*---------------------------------------------------------------------*
*---     PROCESS THE CONTENTS OF THE 'COMPTO='/'NEWQ='/'ALIAS='   ----*
*---     KEYWORD.  WE NEED TO EXTRACT EACH VALUE AND PLACE IT IN  ----*
*---     THE APPROPRIATE FIELD OF THE ARCHIVER'S MAIN WORK AREA,  ----*
*---     FOR LATER REFERENCE BY THE VARIOUS PROCESSING ROUTINES   ----*
*---     OF THE ARCHIVER.  THIS CODE IS GENERALLY FAIRLY          ----*
*---     STRAIGHTFORWARD AND UNDERSTANDABLE.                      ----*
*---------------------------------------------------------------------*
NITEM    DS    0H
         PUSH  USING
         USING PRSPSLN,R8          AND BASE ITS DSECT
         LA    R8,2(,R8)           POINT PAST THE HEADER
         LA    R3,QC1              POINT TO OUTPUT AREA
         LA    R14,4               LOAD QUALIFIER COUNT
NITEM1   DS    0H
         ICM   R4,15,PRSPSLOC      LOAD POINTER TO THE VALUE
         LH    R15,PRSPSLN         LOAD THE VALUE LENGTH
         LTR   R15,R15             NULL VALUE ??
         BZ    NITEM2              YES; SKIP THIS
         BCTR  R15,R0
         CH    R15,=H'9'           TOO LONG ??
         BH    BADQUAL             YES ---
         EX    R15,MOVEQ           AND COPY THE QUALIFIER
NITEM2   DS    0H
         LA    R8,PRSPSBC(,R8)     BUMP TO NEXT PARSE PARM
         LA    R3,10(,R3)          POINT TO NEXT OUTPUT AREA
         BCT   R14,NITEM1          LOOP FOR FOUR QUALIFIERS
*---------------------------------------------------------------------*
*---     NUMERIC FIFTH QUALIFIER (VERSION NUMBER)                 ----*
*---------------------------------------------------------------------*
         #SET  VRS,OFF             SHOW VERSION, TO START WITH
         ICM   R4,15,PRSPSLOC      LOAD POINTER TO THE VALUE
         MVC   0(4,R3),=XL4'00'    BLANK IT OUT
         LH    R15,PRSPSLN         LOAD THE VALUE LENGTH
         LTR   R15,R15             NULL VALUE ??
         BZ    NITEM3              YES; SKIP THIS
         BCTR  R15,R0              DECREMENT FOR MVC GLITCH
         CH    R15,=H'9'           TOO LONG ??
         BH    BADQUAL             YES ---
         EX    R15,TEST#           ALL NUMERICS ??
         BNZ   BADQUAL             NOPE ---
         LA    R15,X'70'(,R15)     INSERT THE REST OF THE PACK LENGTH
         #SET  VRS,ON              SHOW VERSION, TO START WITH
         EX    R15,VERPACK         PACK THE VERSION NUMBER
         CVB   R0,DWORK            INTO BINARY
         STCM  R0,15,0(R3)         SAVE RESULT
         XC    0(4,R3),=X'FFFFFFFF'  INVERT ALL BITS
NITEM3   DS    0H
*---------------------------------------------------------------------*
*---     ONE LAST LITTLE DETAIL. SEVERAL PROCESSES ARE DEPENDANT   ---*
*---     ON KNOWING WHETHER THE NAME SUPPLIED IS A GENERIC OR      ---*
*---     NOT. THEREFORE, WE USE THIS SLOPPY LITTLE PIECE OF CODE   ---*
*---     TO SET THE VARIOUS 'QUALIFIER IS GENERIC' FLAG BITS.      ---*
*---                                                               ---*
*---     A SHORT DESCRIPTION OF GENERICS: A '*' IN ANY QUALIFIER   ---*
*---     DENOTES THAT THE CHARACTER IN THE MATCHING POSITION OF A  ---*
*---     QUALIFIER, AND ALL FOLLOWING CHARACTERS, ARE TO BE        ---*
*---     CONSIDERED A MATCH IN ALL CASES.  ON THE OTHER HAND, A    ---*
*---     '%' CHARACTER DENOTES A SINGLE CHARACTER, IN THE          ---*
*---     MATCHING POSITION, THAT MAY BE ANYTHING AND STILL         ---*
*---     CONSIDERED A MATCH.  IT'S ALL MODELED AFTER THE GENERIC   ---*
*---     CHARACTERS IN RACF PROFILES.                              ---*
*---------------------------------------------------------------------*
         #SET  NGENM,OFF           START
         #SET  NGENG,OFF             WITH
         #SET  NGENSG,OFF              FLAGS
         #SET  NGENT,OFF                 OFF
         LA    R5,QC1+9            POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,QC1              POINT TO QUALIFIER START
NGQ1     DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    NGQ3                YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   NGQ2                NOPE ---
         #SET  NGENM,ON            SET THE FLAG BIT
NGQ2     DS    0H
         BXLE  R3,R4,NGQ1          AND LOOP, SEARCHINGLY
         B     NGQ4                DO THE NEXT ITEM ---
NGQ3     DS    0H
         #SET  NGENM,ON            SET THE FLAG BIT
NGQ3A    DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,NGQ3A         FOR REST OF STRING
NGQ4     DS    0H
         LA    R5,QC2+9            POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,QC2              POINT TO QUALIFIER START
NGQ5     DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    NGQ7                YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   NGQ6                NOPE ---
         #SET  NGENG,ON            SET THE FLAG BIT
NGQ6     DS    0H
         BXLE  R3,R4,NGQ5          AND LOOP, SEARCHINGLY
         B     NGQ8                DO THE NEXT ITEM ---
NGQ7     DS    0H
         #SET  NGENG,ON            SET THE FLAG BIT
NGQ7A    DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,NGQ7A         FOR REST OF STRING
NGQ8     DS    0H
         LA    R5,QC3+9            POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,QC3              POINT TO QUALIFIER START
NGQ9     DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    NGQ11               YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   NGQ10               NOPE ---
         #SET  NGENSG,ON           SET THE FLAG BIT
NGQ10    DS    0H
         BXLE  R3,R4,NGQ9          AND LOOP, SEARCHINGLY
         B     NGQ12               DO THE NEXT ITEM ---
NGQ11    DS    0H
         #SET  NGENSG,ON           SET THE FLAG BIT
NGQ11A   DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,NGQ11A        FOR REST OF STRING
NGQ12    DS    0H
         LA    R5,QC4+9            POINT TO QUALIFIER END
         LA    R4,1                LOAD BXLE INCREMENT
         LA    R3,QC4              POINT TO QUALIFIER START
NGQ13    DS    0H
         CLI   0(R3),C'*'          GENERIC TO END ??
         BE    NGQ15               YES ---
         CLI   0(R3),C'%'          GENERIC IN THIS CHARACTER ??
         BNE   NGQ14               NOPE ---
         #SET  NGENT,ON            SET THE FLAG BIT
NGQ14    DS    0H
         BXLE  R3,R4,NGQ13         AND LOOP, SEARCHINGLY
         B     NGQ16               DO THE NEXT ITEM ---
NGQ15    DS    0H
         #SET  NGENT,ON            SET THE FLAG BIT
NGQ15A   DS    0H
         MVI   0(R3),C'%'          GENERIC CHARACTER
         BXLE  R3,R4,NGQ15A        FOR REST OF STRING
NGQ16    DS    0H
         B     PL3                 AND RETURN TO CALLER
         POP   USING
NUMBERS  DC    15X'11111111111111111111111111111111'
         DC    X'00000000000000000000111111111111'
*---------------------------------------------------------------------*
*---     VARIOUS ERROR MESSAGES GENERATED HERE                     ---*
*---------------------------------------------------------------------*
ERR1     DS    0H
         #PUT  TRTER1              OUTPUT AN ERROR MESSAGE
         XC    STRLEN,STRLEN       CLOBBER THE WORK STRING
         B     IGNORE              AND LIST THE RESULT
ERR4     DS    0H
         #PUT  TRTER2              OUTPUT AN ERROR MESSAGE
         XC    STRLEN,STRLEN       CLOBBER THE WORK STRING
         B     IGNORE              AND LIST THE RESULT
ERRC     DS    0H
         #PUT  TRTER3              OUTPUT AN ERROR MESSAGE
         XC    STRLEN,STRLEN       CLOBBER THE WORK STRING
         B     IGNORE              AND LIST THE RESULT
PRERR1   DS    0H
         #PUT  PRSERR10
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    FERTILIZE FOR A FOREST
         MVC   LINE+2(12),VERB
         #PUT  LINE
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    FERTILIZE FOR A FOREST
         MVC   LINE+1(15),0(R7)
         #PUT  LINE
         B     PRC0                AND LIST THE RESULT
BADP1    DS    0H
         #PUT  PRSERR10
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    FERTILIZE FOR A FOREST
         MVC   LINE+2(12),VERB
         #PUT  LINE
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    FERTILIZE FOR A FOREST
         MVC   LINE+1(15),0(R7)
         #PUT  LINE
         B     PRC0                AND LIST THE RESULT
PRC4     DS    0H
         #PUT  PRSERR1
         B     PRC0                AND LIST THE RESULT
PRC8     DS    0H
         #PUT  PRSERR2
         B     PRC0                AND LIST THE RESULT
PRC12    DS    0H
         #PUT  PRSERR3
         B     PRC0                AND LIST THE RESULT
PRC16    DS    0H
         #PUT  PRSERR4
         B     PRC0                AND LIST THE RESULT
PRC20    DS    0H
         #PUT  PRSERR5
         B     PRC0                AND LIST THE RESULT
PRC24    DS    0H
         LR    R15,R1              RE-COPY RETURN VALUE
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE
         LR    R1,R0               COPY KEYWORD ADDRESS
         SRL   R15,24
         BCTR  R15,R0
         EX    R15,MOVEKEY
         #PUT  LINE
         #PUT  PRSERR6
         B     PRC0                AND LIST THE RESULT
MOVEKEY  MVC   LINE+1(1),0(R1)
PRC28    DS    0H
         #PUT  PRSERR7
         B     PRC0                AND LIST THE RESULT
PRC32    DS    0H
         #PUT  PRSERR8
         B     PRC0                AND LIST THE RESULT
PRC36    DS    0H
         #PUT  PRSERR9
         B     PRC0                AND LIST THE RESULT
BADQUAL  DS    0H
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    FERTILIZE FOR A FOREST
         MVC   LINE+1(23),=C' *** INVALID VALUE --> '
         LA    R3,LINE+24          POINT TO PRINT AREA
         EX    R15,MOVEQ           COPY TO PRINT LINE
         #PUT  LINE
         MVI   LINE,C' '           SEED IN A BLANK
         MVC   LINE+1(120),LINE    FERTILIZE FOR A FOREST
         MVC   LINE+1(19),=C'STATEMENT IGNORED. '
         #PUT  LINE
         XC    STRLEN,STRLEN
         B     IGNORE
VBMSG    DC    CL80'INVALID CONTROL STATEMENT. OPERATION NOT KNOWN.'
ZERO     DC    F'0'
ALLOC    DC    CL8'ALLOCR'
PRMS     DC    C' SHR    '
         DC    C' DSN='
DYNDSN   DC    CL46' '
         DC    C' ; '
FREE     DC    CL8'UNALLOC'
FREEPRMS DC    C' DD='
FREEDDN  DC    CL8' '
         DC    C'  ; '
INFAREA  DS    0F
DDNRET   DC    CL8' '
DSNRET   DC    CL44' '
DSORGRET DC    X'0000'
VOLRET   DC    CL6' '
BLANKS   DC    CL12' '
INCARD   DC    CL80' '
         DC    X'FF'
COPYVERB MVC   VERB(1),0(R7)       COPY VERB TO RESULTS AREA
VERBMSG  DC    CL48'  IS AN UNKNOWN FUNCTION. STATEMENT IGNORED.'
BADALLOC DC    CL133'  ARCHPARS:  DYNAMIC ALLOC FAILED. SEE MSG LOG.'
ALLOCIGN DC    CL133'  ARCHPARS:  THE STATEMENT IS IGNORED.'
IGNORED  DC    CL133'  ARCHPARS:  PARAMETER HAS BEEN IGNORED.'
TRTER1   DC    CL133'  ARCHPARS:  UNABLE TO ISOLATE VERB.'
TRTER2   DC    CL133'  ARCHPARS:  UNRECOGNIZABLE FUNCTION.'
TRTER3   DC    CL133'  ARCHPARS:  INCOMPLETE CONTROL STATEMENT.'
KERR1    DC    CL133'  ARCHPARS:  KEY= VALUE IS TOO LONG. 8-CHAR MAX.'
DDERR1   DC    CL133'  ARCHPARS:  DDNAME IS TOO LONG. 8-CHAR MAX.'
SEPERR1  DC    CL133'  ARCHPARS:  SEP= VALUE IS TOO LONG. 8-CHAR MAX.'
KERRIGN  DC    CL133'  ARCHPARS:  STATEMENT HAS BEEN IGNORED.'
PRSERR1  DC    CL133'  RPARSE:  SYNTAX ERROR  '
PRSERR2  DC    CL133'  RPARSE:  POS. PARM FOUND AFTER FIRST KW PARM '
PRSERR3  DC    CL133'  RPARSE:  MIS-MATCHED PARENTHESES             '
PRSERR4  DC    CL133'  RPARSE:  MISSING = AFTER KEYWORD           '
PRSERR5  DC    CL133'  RPARSE:  ZERO-LENGTH KWD/POS. PARM           '
PRSERR6  DC    CL133'  RPARSE:  KEYWORD NOT FOUND IN KEYWORD LIST   '
PRSERR7  DC    CL133'  RPARSE:  SUBLIST IMPROPERLY ENDED            '
PRSERR8  DC    CL133'  RPARSE:  QUOTED STRING IMPROPERLY ENDED      '
PRSERR9  DC    CL133'  RPARSE:  OPERANDS ARE NESTED TOO DEEP        '
PRSERR10 DC    CL133'  ARCHPARS: UNABLE TO DECYPHER ACTION CODE     '
TRMSCAN  DC    CL1' '
PLRTAB   DC    A(ALIASES)          0
         DC    A(BACK)             4
         DC    A(ITEM)             8
         DC    A(NITEM)            12
         DC    A(DATA)             16
         DC    A(DDNAME)           20
         DC    A(DSN)              24
         DC    A(EXPDD)            28
         DC    A(EXPDSN)           32
         DC    A(HEADER)           36
         DC    A(HEX)              40
         DC    A(ITEM)             44
         DC    A(KEY)              48
         DC    A(NITEM)            52
         DC    A(NOTE)             56
         DC    A(PANLIB)           60
         DC    A(REPLACE)          64
         DC    A(SEP)              68
         DC    A(DDNV1)            72
         DC    A(V1DSN)            76
         DC    A(DDNV2)            80
         DC    A(V2DSN)            84
         DC    A(CHKALIAS)         88
         DC    A(SHRTLST)          92
KVBTAB   DS    0F
         DC    CL12'ADDALIAS    ',A(OPLALIAS)
KVBLEN   EQU   *-KVBTAB
         DC    CL12'ALTALIAS    ',A(OPLALIAS)
         DC    CL12'ADDNOTE     ',A(OPLADDN)
         DC    CL12'ALTER       ',A(OPLRSPC)
         DC    CL12'CLEAN       ',A(0) TAKES NO OPERANDS
         DC    CL12'COMPARE     ',A(OPLCOMP)
         DC    CL12'CONVERT     ',A(OPLCONV)
         DC    CL12'COPY        ',A(OPLCOPY)
         DC    CL12'DELALIAS    ',A(OPLALIAS)
         DC    CL12'DELETE      ',A(OPLDEL)
         DC    CL12'EXPORT      ',A(OPLEXP)
         DC    CL12'IMPORT      ',A(OPLIMP)
         DC    CL12'LFILE       ',A(OPLLLFVS)
         DC    CL12'LFILET      ',A(OPLLFTP)
         DC    CL12'LIST        ',A(OPLLIST)
         DC    CL12'LISTT       ',A(OPLLISTT)
         DC    CL12'LOAD        ',A(OPLLOAD)
         DC    CL12'LOADT       ',A(OPLLOADT)
         DC    CL12'RESPECIFY   ',A(OPLRSPC)
         DC    CL12'SET         ',A(OPLSET)
KVBLAST  EQU   *
         DC    CL12'UNLOAD      ',A(OPLUNLD)
PRSWKL   DC    A(ENDPRSWK-PRSWK)   WORK AREA LENGTH
TRTX     TRT   0(0,R7),TTABX
TRTY     TRT   0(0,R7),TTABY
TTABX    DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
TTABY    DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'FF000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         LTORG
OPLADDN  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='KEY',RSV=48
         $PARSE KEYWORD,KEYWD='DDN',RSV=20
         $PARSE KEYWORD,KEYWD='DSN',RSV=24
         $PARSE END
OPLSET   $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='DDN',RSV=20
         $PARSE KEYWORD,KEYWD='DSN',RSV=24
         $PARSE KEYWORD,KEYWD='EXPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='EXPTPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPTPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='VSAM2DD',RSV=80
         $PARSE KEYWORD,KEYWD='VSAM2DSN',RSV=84
         $PARSE END
OPLCOMP  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='VSAM2DD',RSV=80
         $PARSE KEYWORD,KEYWD='VSAM2DSN',RSV=84
         $PARSE KEYWORD,KEYWD='COMPTO',SUBLIST=ITEMN,RSV=52
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE KEYWORD,KEYWD='SHRTLST',RSV=92
         $PARSE END
OPLCOPY  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='VSAM2DD',RSV=80
         $PARSE KEYWORD,KEYWD='VSAM2DSN',RSV=84
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE KEYWORD,KEYWD='CHKALIAS',RSV=88
         $PARSE KEYWORD,KEYWD='REPLACE',RSV=64
         $PARSE END
OPLCONV  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='VSAM2DD',RSV=80
         $PARSE KEYWORD,KEYWD='VSAM2DSN',RSV=84
         $PARSE END
OPLDEL   $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='DATA',RSV=16
         $PARSE KEYWORD,KEYWD='BACK',RSV=04
         $PARSE KEYWORD,KEYWD='NOTE',RSV=56
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE END
OPLEXP   $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='EXPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='EXPTPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPTPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE END
OPLIMP   $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='EXPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='EXPTPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPTPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='REPLACE',RSV=64
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE END
OPLLIST  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='BACK',RSV=04
         $PARSE KEYWORD,KEYWD='DATA',RSV=16
         $PARSE KEYWORD,KEYWD='HEX',RSV=40
         $PARSE KEYWORD,KEYWD='NOTE',RSV=56
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE END
OPLLISTT $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='EXPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='EXPTPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPTPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='DATA',RSV=16
         $PARSE KEYWORD,KEYWD='BACK',RSV=04
         $PARSE KEYWORD,KEYWD='HEX',RSV=40
         $PARSE KEYWORD,KEYWD='NOTE',RSV=56
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE END
OPLLFTP $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='EXPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='EXPTPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPTPDSN',RSV=32
         $PARSE END
OPLLLFVS $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=28
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=32
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=28
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=32
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE END
OPLLOAD  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE KEYWORD,KEYWD='CHKALIAS',RSV=88
         $PARSE KEYWORD,KEYWD='DDN',RSV=20
         $PARSE KEYWORD,KEYWD='DSN',RSV=24
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='REPLACE',RSV=64
         $PARSE KEYWORD,KEYWD='SEP',RSV=68
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE END
OPLLOADT $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE KEYWORD,KEYWD='CHKALIAS',RSV=88
         $PARSE KEYWORD,KEYWD='DDN',RSV=20
         $PARSE KEYWORD,KEYWD='DSN',RSV=24
         $PARSE KEYWORD,KEYWD='EXPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='EXPTPDD',RSV=28
         $PARSE KEYWORD,KEYWD='EXPTPDSN',RSV=32
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='REPLACE',RSV=64
         $PARSE KEYWORD,KEYWD='SEP',RSV=68
         $PARSE END
OPLUNLD  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='ALIASES',RSV=00
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='REPLACE',RSV=64
         $PARSE KEYWORD,KEYWD='DDN',RSV=20
         $PARSE KEYWORD,KEYWD='DSN',RSV=24
         $PARSE END
OPLRSPC  $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='NEW',SUBLIST=ITEMN,RSV=52
         $PARSE END
OPLALIAS $PARSE DEFINE
         $PARSE KEYWORD,KEYWD='ITEM',SUBLIST=ITEMS,RSV=44
         $PARSE KEYWORD,KEYWD='VSAM1DD',RSV=72
         $PARSE KEYWORD,KEYWD='VSAM1DSN',RSV=76
         $PARSE KEYWORD,KEYWD='ALIAS',SUBLIST=ITEMN,RSV=52
         $PARSE END
ITEMS    $PARSE DEFINE
         $PARSE POS
         $PARSE POS
         $PARSE POS
         $PARSE POS
         $PARSE POS
         $PARSE END
ITEMN    $PARSE DEFINE
         $PARSE POS
         $PARSE POS
         $PARSE POS
         $PARSE POS
         $PARSE POS
         $PARSE END
         DCBD  DSORG=QS
         $PARSE DSECT
         COPY  ##ARCHWK
PRSWK    DSECT
SAVEAREA DS    36F
STRLEN   DS    F
WKSTR    DS    8CL256
ENDPRSWK DS    D
         END
