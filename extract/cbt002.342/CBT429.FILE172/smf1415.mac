         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
 SPACE
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
 SPACE
.MEX2    ANOP
       MEND
         MACRO
&LABEL   $PROLOG &LV=0
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
         MACRO
&LABEL   $EPILOG &RC
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         L     R0,16(R13)          GET SAVEAREA LENGTH
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         AIF   (T'&RC EQ 'O').SPEC
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         LA    R15,&RC             SET RETURN CODE
         AGO   .MEND
.SPEC    ANOP
         L     R14,12(R13)         LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE CALLERS REGS
.MEND    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
         MACRO
&SYM     SYSPRINT &HEADER1=,&HEADER2=,&LINES=78,&DDNAME=SYSPRINT,      X
               &LRECL=121
         AIF   (K'&SYM EQ 0).NOSYM
         AIF   (K'&SYM GT 5).ERRSYM
         AIF   (K'&DDNAME GT 8).DDNERR
         AIF   ('&LRECL' GT '133').ERRLEN
         MNOTE *,'DCB = DDNAME=&DDNAME,LRECL=&LRECL,LINES=&LINES'
         AIF   ('&HEADER1' EQ '').HD1
         MNOTE *,'    &HEADER1 IS FIRST HEADER LINE'
         AIF   ('&HEADER2' EQ '').HD2
         MNOTE *,'    &HEADER2 IS SECOND HEADER LINE'
.HD2     MNOTE *,'    THE FIRST BYTE OF ANY BUFFER SPECIFIED WILL'
         MNOTE *,'    BE USED BY THIS ROUTINE FOR ASA CHARACTERS'
         MNOTE *,'    AND UNPREDICTABLE RESULTS MAY OCCUR IF USED.'
         CNOP  0,4
&SYM     NOP   DRC&SYSNDX.C .          NOP BRANCH SET AFTER OPEN
         NOP   DRC&SYSNDX.D .          NOP BRANCH SET AFTER OPEN
         OI    &SYM.+5,C'0' .          SET NOP TO BRANCH
         OI    &SYM.+1,C'0' .          SET FIRST NOP TO BRANCH
         STM   14,2,DRC&SYSNDX.B .     SAVE USERS REGS
         LA    1,DRC&SYSNDX.A .        LOAD ADDRESS OF OPEN LIST
         SVC   19 .                    ISSUE OPEN SVC
         AIF   ('&HEADER1' EQ '').HD4
DRC&SYSNDX.F MVI &HEADER1,C'1' .       SET CARRIAGE CONTROL
         PUT   &SYM.DCB,&HEADER1
         AIF   ('&HEADER2' EQ '').HD5
         MVI   &HEADER2,C'-' .         SET TRIPLE SPACE AFTER SKIP
         PUT   &SYM.DCB,&HEADER2
         AGO   .HD5
.HD4     L     15,DRC&SYSNDX.B+12 .    GET POINTER TO RECORD
DRC&SYSNDX.E MVI 0(15),C'1' .            SKIP TO ONE FIRST TIME
         LA    2,&LINES.+1 .           GET LINE COUNT
         AGO   .HD55
.HD5     L     15,DRC&SYSNDX.B+12 .    PICK UP DATA POINTER
         MVI   0(15),C'0' .            SET DOUBLE SPACE AFTER SK97
         LA    2,&LINES.+1 .           PICK UP LINE COUNT
.HD55    ANOP
DRC&SYSNDX.G BCT 2,DRC&SYSNDX.H .      BR TO PRINT FOR NUMBER OF LINES
         AIF   ('&HEADER1' NE '').HD6
         B     DRC&SYSNDX.E .          START NEW PAGE
         AGO   .P4
.HD6     B     DRC&SYSNDX.F .          GO TO DO SKIP AND PRINT HDR
.P4      ANOP
DRC&SYSNDX.H PUT &SYM.DCB,(15)
         ST    2,DRC&SYSNDX.J .        SAVE THE LINE COUNT
         LM    14,2,DRC&SYSNDX.B .     RESTORE USERS REGS
         MVI   0(1),C' ' .             PLACE BLANK INTO CARRIAGE CONTR
         MVC   1(&LRECL.-1,1),0(1) .   CLEAR THE BUFFER
         BR    14 .                    RETURN
 SPACE
DRC&SYSNDX.D STM 14,2,DRC&SYSNDX.B .   SAVE REGS ALWAYS
         AIF   ('&HEADER1' EQ '').P6
         B     DRC&SYSNDX.F .          GO TO HEADER ROUTINE
         AGO   .P5
.P6     ANOP
         L     15,DRC&SYSNDX.B+12 .    PICK UP POINTER TO DATA
         B     DRC&SYSNDX.E .          GO TO HEADER RTN
.P5      ANOP
DRC&SYSNDX.C STM 14,2,DRC&SYSNDX.B .   SAVE REGS ALWAYS
         L     2,DRC&SYSNDX.J .        RESTORE THE LINE COUNTER
         L     15,DRC&SYSNDX.B+12 .    PICK UP POINTER TO DATA
         MVI   0(15),C' ' .            MOVE X'40' TO ASA
         B     DRC&SYSNDX.G .          GO TEST FOR LINE COUNT
DRC&SYSNDX.M CLC &SYM.DCB+62(2),=H'0' . IS BLOCK SIZE THERE
         BNE   DRC&SYSNDX.L .          IF SO SKIP
         MVC   &SYM.DCB+62(2),=H'&LRECL'  .     MOVE IN DEFAULT SIZE
DRC&SYSNDX.L BR 14 .               RETURN TO OPEN
 SPACE
DRC&SYSNDX.B DC 5F'0' .                PRINT RTNS SAVE AREA
DRC&SYSNDX.J DC F'0' .                 SAVE FOR LINE COUNTER
DRC&SYSNDX.K DC X'85' .                EXIT LIST FOR OPEN
         DC    AL3(DRC&SYSNDX.M) .     POINTER TO THE EXIT ROUTINE
DRC&SYSNDX.A DC AL1(143) .             OPTION BYTE FOR OPEN
         DC    AL3(&SYM.DCB) .         DCB ADCON FOR OPEN
 SPACE
&SYM.DCB DCB DDNAME=&DDNAME,LRECL=&LRECL,RECFM=FBA,EXLST=DRC&SYSNDX.K, X
               DSORG=PS,MACRF=(PM)
         MEXIT
.HD1     AIF   ('&HEADER2' EQ '').HD2
         MNOTE 8,'8,*** HEADER2 INVALID WITHOUT HEADER1 SPECIFIED'
         MEXIT
.ERRLEN MNOTE 8,'8,*** LRECL TOO LARGE FOR SYSPRINT'
         MEXIT
.NOSYM  MNOTE 8,'8,*** SYSPRINT MACRO MUST HAVE A LABEL'
         MEXIT
.ERRSYM MNOTE 8,'8,*** LABEL ON SYSPRINT MACRO MUST BE LESS THAN SIX'
         MEXIT
.DDNERR MNOTE 8,'8 *** MAXIMUM DDNAME SIZE IS EIGHT CHARACTERS'
         MEXIT
.BUFERR  MNOTE 8,'8,*** NO BUFFER SUPPLIED, EXECUTION IMPOSSIBLE'
.END     MEND
         PRINT NOGEN
***********************************************************************
*        PDSDOC *REPORT ON NON-VSAM FILE ACTIVITY FROM SMF 14 + 15....*
*                                                                     *
*        THIS PROGRAM REQUIRES SYS1.AMODGEN IN THE COMPILER SYSLIB    *
*                                                                     *
*        THIS PROGRAM EXTRACTS SMF TYPE 14 AND 15 RECORDS AND         *
*        PROVIDES A REPORT SUMMARIZING THEM.  ADDITIONALLY, IF A      *
*        POST PROCESSOR PROGRAM IS TO BE RUN, THE REFORMATTED DATA    *
*        IS LEFT IN THE FILE USED AS 'SORTIN'.  THE DATA WILL HAVE    *
*        BEEN RESTRUCTURED (AS DEFINED BY THE 'SORT RECORD DSECT').   *
*                                                                     *
*        IF THE 'MERG' OPTION IS USED, ALL DATASETS WITH LIKE NAMES   *
*        ARE MERGED INTO A SINGLE ENTRY (INCLUDING GDG DATASETS)      *
*        AND RECORDS WRITTEN BY THE SAME PROGRAM AT THE SAME          *
*        TIME WILL HAVE BEEN DECOLATED (IN CASES WHERE A FILE IS      *
*        OPENED MORE THAN ONCE WITHIN A JOB-STEP THE RESULTANT        *
*        SMF RECORDS ARE CUMMULATIVE).  THE RECORDS PRODUCED WILL     *
*        CONTAIN ACTUAL (TOTAL) EXCP COUNTS AS DEFINED BY THE 'OUTREC'*
*        DSECT DESCRIPTION.                                           *
*                                                                     *
*        IF THE OPTIONAL EXIT-ROUTINE IS USED, THE CONTENTS OF THE    *
*        'SORTIN' FILE WHICH IS LEFT WILL BE DEPENDENT UPON THE       *
*        SELECTION DONE BY THAT ROUTINE.  PARMS MAY BE USED FREEFORM  *
*        (IN ANY ORDER) EXCEPT 'MOD-NAME' MUST BE LAST IF USED.       *
*                                                                     *
*        THE FOLLOWING LOCAL CONSTANTS MAY BE CHANGED TO YOUR         *
*        SPECIFICATIONS IF REQUIRED.  THEY ARE USED TO CALCULATE      *
*        A NEW BLOCKING FACTOR (AND SUBSEQUENT EXCP SAVINGS).         *
*                                                                     *
*        LCLA      &TBLK,&DBLK                                        *
&TBLK    SETA      32767         SUGGESTED BLKSIZE FOR TAPE FILES     *
&DBLK    SETA      27998         SUGGESTED BLKSIZE FOR DISK FILES 1/2 *
*DBLK    SETA      23476         SUGGESTED BLKSIZE FOR DISK FILES 1/2 *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING ARE THE AVAILABLE 'PARM' OPTIONS:              *
*                                                                     *
*             NOPARM       WILL CAUSE 'ALL' OF THE INPUT TO BE        *
*                          REFORMATTED TO THE OUTPUT 'SORTIN' DD      *
*                          CARD ALLOWING THE USER SPECIALIZED         *
*                          SELECTION VIA A USER PROGRAM.  A REPORT    *
*                          CONTAINING THE FIRST 2500 ENTRIES WILL     *
*                          BE LISTED IF THE USER PROVIDES A SORT      *
*                          CONTROL STATEMENT IN 'SORTCNTL'.           *
*                                                                     *
*             PARM='MOD-NAME' WILL CAUSE 'ALL' OF THE INPUT TO BE     *
*                          REFORMATTED AND PASSED TO THE NAMED MODULE *
*                          FOR SELECTION.  UPON RETURN, IF R15 = ZERO,*
*                          THE RECORD IS PROCESSED AS BELOW.  IF      *
*                          NON-ZERO, THE RECORD IS IGNORED (SKIPPED). *
*                          UPON ENTRY TO THE EXIT ROUTINE, REGISTER   *
*                          ONE WILL POINT TO THE COMPOSIT RECORD AND  *
*                          REGISTER ELEVEN WILL POINT TO THE INPUT SMF*
*                          RECORD.  THE FORMAT OF THE COMPOSIT RECORD *
*                          IS DESCRIBED BELOW.                        *
*             PARM='MERG'  WILL CAUSE THE MERGING OF RECORDS THAT     *
*                          HAVE DUPLICTE DATASET NAMES INCLUDING GDG'S*
*                          ('SORTIN' WILL CONTAIN MERGED RECORDS).    *
*                          THE EXCP COUNT AND EXCP SAVINGS FIELDS     *
*                          WILL BE ADDED FORMING A CUMULATIVE COUNT   *
*                          IN EACH RECORD AND DUPLICATE RECORDS WILL  *
*                          BE SKIPPED.  THE CPU SAVINGS MAY THEN BE   *
*                          CALCULATED ON THE MERGED RECORD COUNTS.    *
*                                                                     *
*             PARM='DISK'  WILL CAUSE SELECTION OF DISK FILE RECORDS  *
*                          ONLY.                                      *
*             PARM='TAPE'  WILL CAUSE SELECTION OF TAPE FILE RECORDS  *
*                          ONLY.                                      *
*             PARM='TEMP'  WILL CAUSE SELECTION OF TEMPORARY DATASET  *
*                          RECORDS ONLY.                              *
*             PARM='PERM'  WILL CAUSE SELECTION OF PERMANENT DATASET  *
*                          RECORDS ONLY.                              *
*             PARM='FULL'  WILL CAUSE 'ALL' OF THE INPUT TO BE        *
*                          LISTED IN THE OPTIONAL REPORT (IF USED).   *
*                                                                     *
*        OPTIONALLY, A DD CARD DEFINED AS 'SORTCNTL' MAY BE USED TO   *
*        PROVIDE THE 'SYSIN' INPUT FOR SORT AND A REPORT CONTAINING   *
*        THE FIRST 2500 RECORDS WILL BE PRODUCED (UNLESS THE 'FULL'   *
*        PARM IS USED).                                               *
*                                                                     *
*        IF THE 'SORTCNTL' DD CARD IS NOT PROVIDED, THEN THE 'SORTIN' *
*        FILE WILL CONTAIN THE REFORMATTED RECORDS FOR SUBSEQUENT     *
*        PROCESSING BY A POST PROCESSOR OR USER MODULE AND NO REPORT  *
*        WILL BE GENERATED.                                           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING ADDITIONAL FUNCTIONS HAVE BEEN CODED BY        *
*        D.H.CARTWRIGHT, SPRECHER ENERGIE AG, CH-5036 OBERENTFELDEN,  *
*        SWITZERLAND.                                                 *
*                                                                     *
*             PARM='LIST'  WILL CREATE THE REPORT FROM AN EXISTING    *
*                          'SORTIN' FILE, AFTER SORTING.              *
*                                                                     *
*             PARM='MEMB'  WILL ALTER THE REPORT TO SHOW PDS MEMBER   *
*                          NAMES INSTEAD OF EXCP SAVINGS. THIS WILL   *
*                          ALSO SHOW RELATIVE GDG NUMBERS ( E.G. '+1')*
*                          WHERE THE FILE IS A GDG RATHER THAN A PDS. *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*        HISTORY   (TOP DOWN)                                         *
*                                                                     *
* 13MAY92 CART1 ADD 'MEMB' OPTION.                                    *
* 06MAY92 CART1 ADD 'LIST' OPTION.                                    *
*                                                                     *
*          JOHN JANCO 03/18/86 CHAGED TO FACILITATE DFSORT            *
*          DATA SET CBT918     AT LEVEL 002 AS OF 12/07/82            *
*          DATA SET CBT918     AT LEVEL 002 AS OF 10/01/78            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING JCL MAY BE USED TO EXECUTE THIS ROUTINE        *
*        AFTER INSURING THAT IT FITS YOUR INSTALLATION.               *
*                                                                     *
* //SMF1415 JOB CLASS=A,NOTIFY=TSO001,MSGCLASS=A                      *
* //SMF1415  EXEC PGM=SMF1415,PERFORM=1                               *
* //SYSUT1 DD DISP=SHR,DSN=SMF.HIST.DATA        <=== INPUT SMF FILE   *
* //SYSPRINT DD SYSOUT=*                        <=== OUTPUT REPORT    *
* //*                                                                 *
* //SYSOUT   DD SYSOUT=*                        <=== SORT LISTING     *
* //SORTIN   DD UNIT=VIO,SPACE=(CYL,(45))       <=== WORK FILE FOR RPT*
* //*                                  OR OUTPUT FILE FOR POST-PROCESS*
* //SORTOUT  DD UNIT=VIO,SPACE=(CYL,(45))       <=== WORK FILE        *
* //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE        *
* //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE        *
* //SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE        *
* //SORTWK04 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE        *
* //SORTWK05 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE        *
* //SORTWK06 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE        *
* //SYSIN    DD UNIT=VIO,SPACE=(CYL,(45))       <=== WORK FILE        *
* //SORTCNTL DD *    <=== TO PROVIDE REPORT LISTING SORTED AS BELOW   *
*  SORT FIELDS=(92,8,CH,D)                      <=== EXCP SAVINGS     *
*                                                                     *
***********************************************************************
         EJECT
SMF1415  $PROLOG R11,R12
*----------------------------------------------------------------------
*
*                     INITIALIZATION
*
*----------------------------------------------------------------------
ENTRY010 DS    0H
         OI    OPTFLG,TAPE+DISK+TEMP+PERM SET DEFAULTS
         L     R1,0(R1)         GET PARM POINTER
         LH    R2,0(R1)         GET PARM SIZE
         LTR   R2,R2            ANY PARM GIVEN?
         BZ    HHH010           NO, TAKE DEFAULT
AAA010   CLC   2(4,R1),=C'FULL' REQUEST FOR 'ALL' OPTION?
         BNE   BBB010           NO, CHECK NEXT OPTION
         OI    OPTFLG,ALL       SET OPTFLG
         B     GGG010           CONTINUE
BBB010   CLC   2(4,R1),=C'TAPE' ONLY TAPE DATASETS REQUESTED?
         BNE   CCC010           NO, CHECK NEXT OPTION
         NI    OPTFLG,X'FF'-DISK RESET OPTFLG
         B     GGG010           CONTINUE
CCC010   CLC   2(4,R1),=C'DISK' ONLY DISK DATASETS REQUESTED?
         BNE   DDD010           NO, CHECK NEXT PARM
         NI    OPTFLG,X'FF'-TAPE RESET OPTFLG
         B     GGG010           CONTINUE
DDD010   CLC   2(4,R1),=C'TEMP' ONLY TEMP DATASETS REQUESTED?
         BNE   EEE010           NO, CHECK NEXT OPTION
         NI    OPTFLG,X'FF'-PERM RESET OPTFLG
         B     GGG010           CONTINUE
EEE010   CLC   2(4,R1),=C'PERM' ONLY PERM DATASETS REQUESTED?
         BNE   LLL010           NO, CHECK NEXT
         NI    OPTFLG,X'FF'-TEMP RESET OPTFLG
         B     GGG010           CONTINUE
LLL010   CLC   2(4,R1),=C'LIST' LIST EXISTING SORTOUT?
         BNE   MMM010           NO, CHECK NEXT
         OI    OPTFLG,LIST      YES, SET OPTFLG
         B     GGG010           CONTINUE
MMM010   CLC   2(4,R1),=C'MERG' MERGE DUPLICATE NAMES?
         BNE   MMM020           NO, CHECK IF PDS MEMBERS
         OI    OPTFLG,MERGE     YES, SET OPTFLG
         B     GGG010           CONTINUE
MMM020   CLC   2(4,R1),=C'MEMB' LIST PDS MEMBERS?
         BNE   FFF010           NO, CHECK IF MODULE NAME
         OI    OPTFLG,MEMB      YES, SET OPTFLG
         B     GGG010           CONTINUE
FFF010   BCTR  R2,0             DECREMENT PARM SIZE (MODULE NAME)
         EX    R2,EXITMOVE      MOVE MODULE NAME
         BLDL  0,BLDLLIST       DOES MODULE NAME EXIST?
         LTR   R15,R15          CHECK RETCODE
         BNZ   ERROR010         NO, INVALID PARM
         LOAD  EPLOC=EXITNAME   YES, LOAD SAME
         ST    R0,EXITRTN       SAVE ADDRESS OF MODULE
         B     HHH010           BEGIN (MODULE NAME MUST BE LAST PARM)
         EJECT
GGG010   LA    R1,5(R1)         BUMP TO NEXT POSSIBLE PARM
         SH    R2,=H'5'         DECREMENT FOR PROCESSED PARM
         BP    AAA010           BRANCH IF MORE PARMS
         B     HHH010           CONTINUE
EXITMOVE MVC   EXITNAME(0),2(R1) MOVE MODULE NAME
ERROR010 WTO   'SMFPOST - INVALID PARM SPECIFIED',                     X
               ROUTCDE=11       INFORM USER
         OI    RETCODE+3,16     SET RETURN CODE
         B     RETURN           RETURN TO THE SYSTEM
HHH010   DS    0H                  TEST WHAT PARMS SUPPLIED
         TM    OPTFLG,LIST      DOES HE JUST WANT A LIST?
         BO    LISTING          YES, LETS GO
         TM    OPTFLG,DISK+TAPE+ALL WAS ANYTHING SELECTED?
         BNZ   EXIT010          YES, PARMS DONE
         TM    OPTFLG,TEMP+PERM WAS ANYTHING SELECTED?
         BNZ   EXIT010          YES, LETS GO
         WTO   'SMFPOST - INVALID PARM (TEMP AND PERM OR DISK AND TAPE X
               ARE MUTUALLY EXCLUSIVE',ROUTCDE=11
         B     RETURN            ALL DONE
EXIT010  OPEN  (SYSUT1,,SORTIN,(OUTPUT),SYSIN,(OUTPUT)) OPEN FILES
         EJECT
*----------------------------------------------------------------------
*
*              GET A RECORD AND DETERMINE IF IT SHOULD BE PROCESSED
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
         USING SMFTYP14,R10
         GET   SYSUT1             GET AN SMF RECORD
         LR    R10,R1             ADDR OF RECORD
         MVI   OT$SMFTY,C'I'      SET DEFAULT TYPE
         CLI   SMF14RTY,X'0E'     TYPE 14 RECORD ?
         BE    AAA020             YES - CONTINUE
         CLI   SMF14RTY,X'0F'     TYPE 15 RECORD ?
         BNE   ENTRY020           NO - GET NEXT RECORD
         MVI   OT$SMFTY,C'O'      SET RECORD TYPE
AAA020   CLI   SMFUCBTY+2,X'20'   IS THIS DISK?
         BNE   BBB020             NO CHECK FOR TAPE
         TM    OPTFLG,DISK        YES, WAS DISK REQUESTED?
         BO    CCC020             YES, PROCESS DISK
         B     ENTRY020           NO GET NEXT RECORD
BBB020   CLI   SMFUCBTY+2,X'80'   IS THIS TAPE?
         BNE   ENTRY020           NO, IGNORE NON-DISK/NON-TAPE
         TM    OPTFLG,TAPE        YES, WAS DISK REQUESTED?
         BNO   ENTRY020           NO GET NEXT RECORD
CCC020   TM    SMF14RIN,SMF14TDS  IS THIS A TEMPORARY DATA SET ?
         BNO   DDD020             NO, CHECK PERM
         TM    OPTFLG,TEMP        WERE TEMPORARIES REQUESTED?
         BNO   ENTRY020           NO, IGNORE IT
         B     EXIT020            YES, PROCESS IT
DDD020   TM    OPTFLG,PERM        WERE PERMANENTS REQUESTED?
         BNO   ENTRY020           NO, IGNORE IT
EXIT020  EQU   *
         MVC   OT$RSD,SMF14RSD    READER DATE
         MVC   OT$RST,SMF14RST    READER TIME
         MVC   OT$DATE,SMF14DTE   RECORD DATE
         MVC   OT$TIME,SMF14TME   RECORD TIME
         EJECT
*----------------------------------------------------------------------
*
*        JOBNAME, DDNAME, DS TYPE
*
*----------------------------------------------------------------------
         MVC   OT$JOBNM,SMF14JBN  MOVE JOBNAME
         MVC   OT$DDNAM,SMFTIOE5  AND DD NAME FOR THIS DSN
         MVC   OT$DSNAM,JFCBDSNM  DATA SET NAME
         MVI   OT$TEMP,C' '       CLEAR FIELD
         TM    SMF14RIN,SMF14TDS  IS THIS A TEMPORARY DATA SET ?
         BZ    AAA030             NO -
         MVI   OT$TEMP,C'T'       YES - SET INDICATOR
AAA030   EQU   *
         TM    SMF14RIN,SMF14VIO  IS THIS A VIO DATA SET ?
         BZ    AAM010             NO -
         MVI   OT$TEMP,C'V'       YES - SET INDICATOR
AAM010   DS    0H                  CHECK PDS MEMBERS
         MVC   OT$ELNM,JFCBELNM   COPY ELEMENT NAME
         SPACE 1
EXIT030  EQU   *
         SPACE 3
*----------------------------------------------------------------------
*
*        DISP OF DATA SET
*
*----------------------------------------------------------------------
         TM    JFCBIND2,JFCNEW    DISP=NEW ?
         BNO   AAA040             NO -
         MVI   OT$DISP,C'N'       YES - MOVE IN 'NEW'
         B     EXIT040
AAA040   EQU   *
         TM    JFCBIND2,JFCMOD    DISP=MOD ?
         BNO   BBB040             NO -
         MVI   OT$DISP,C'M'       YES - MOVE IN 'MOD'
         B     EXIT040
BBB040   EQU   *
         TM    JFCBIND2,JFCOLD    DISP=OLD ?
         BNO   CCC040             NO -
         MVI   OT$DISP,C'O'       YES - MOVE IN 'OLD'
CCC040   EQU   *
         TM    JFCBIND2,JFCSHARE  DISP=SHR ?
         BNO   EXIT040            NO -
         MVI   OT$DISP,C'S'       YES - MOVE IN 'SHR'
EXIT040  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*                             DSORG
*
*----------------------------------------------------------------------
         TM    JFCDSRG1,JFCORGIS  ISAM ?
         BZ    AAA050             NO -
         MVC   OT$DSORG,=C'IS'    YES -
         B     EXIT050
AAA050   EQU   *
         TM    JFCDSRG1,JFCORGPS  SEQUENTIAL ?
         BZ    BBB050             NO -
         MVC   OT$DSORG,=C'PS'    YES -
         B     EXIT050
BBB050   EQU   *
         TM    JFCDSRG1,JFCORGDA  BDAM ?
         BZ    CCC050             NO -
         MVC   OT$DSORG,=C'DA'    YES -
         B     EXIT050
CCC050   EQU   *
         TM    JFCDSRG1,JFCORGCX  BTAM ?
         BZ    DDD050             NO -
         MVC   OT$DSORG,=C'BT'    YES -
         B     EXIT050
DDD050   EQU   *
         TM    JFCDSRG1,JFCORGPO  PDS  ?
         BZ    EEE050             NO -
         MVC   OT$DSORG,=C'PO'    YES -
         B     EXIT050
EEE050   EQU   *
         TM    JFCDSRG2,JFCORGTX  TCAM ?
         BZ    FFF050             NO -
         MVC   OT$DSORG,=C'TC'    YES -
         B     EXIT050
FFF050   EQU   *
         TM    JFCDSRG2,JFCORGAM  VSAM ?
         BZ    EXIT050            NO -
         MVC   OT$DSORG,=C'VS'    YES -
EXIT050  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*                  SPACE ALLOCATION
*
*----------------------------------------------------------------------
         XR    R1,R1              CLEAR R1
         ICM   R1,7,JFCBPQTY      PRIMARY ALLOCATION
         CVD   R1,DBLWRD          CHANGE TO PACK DECIMAL
         MVC   WORK8,EDIT7        MOVE EDIT PATTERN  9999999
         ED    WORK8,DBLWRD+4     UNPK
         MVC   OT$PQTY,WORK8+1    CHANGE SIGN
*
         XR    R1,R1              CLEAR R1
         ICM   R1,7,JFCBSQTY      SECONDARY ALLOCATION
         CVD   R1,DBLWRD          CHANGE TO PACK DECIMAL
         MVC   WORK8,EDIT7        MOVE EDIT PATTERN  9999999
         ED    WORK8,DBLWRD+4     UNPK
         MVC   OT$SQTY,WORK8+1    CHANGE SIGN
*
         CLI   JFCBCTRI,JFCBABS   ABSOLUTE TRACK ADDRESS ?
         BNE   AAA070             NO -
         MVI   OT$ALOC,C'A'       YES -
         B     EXIT070
AAA070   EQU   *
         TM    JFCBCTRI,JFCBAVR   AVERAGE BLOCK ?
         BZ    BBB070             NO -
         MVI   OT$ALOC,C'B'       YES -
         B     EXIT070
BBB070   EQU   *
         TM    JFCBCTRI,JFCBTRK   TRACK ALLOCATION ?
         BZ    CCC070             NO -
         MVI   OT$ALOC,C'T'       YES -
         B     EXIT070
CCC070   EQU   *
         TM    JFCBCTRI,JFCBCYL   CYLINDER ALLOCATION ?
         BZ    EXIT070            NO -
         MVI   OT$ALOC,C'C'       YES -
         B     EXIT070
EXIT070  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*                  CHANNEL/UNIT ADDRESS
*
*----------------------------------------------------------------------
         LA    R1,SMFUCBCH        CHAN/UNIT ADDR
         ST    R1,HXDATA          STORE IN PARM LIST
         MVC   HXLNGTH,=F'2'      LENGTH OF DATA TO BE TRANSLATED
         MVC   HXOUT,=A(DBLWRD)   ADDR OF AREA FOR XLATED DATA
         LA    R1,HXPARMS         PARMS FOR HEXLATE PROGRAM
         L     R15,HXPGM          EPA OF TRANSLATE ROUTINE
         BALR  R14,R15
         LTR   R15,R15            ANY ERRORS ?
         BNZ   ERROR1             YES - TO ERROR ROUTINE
         MVC   OT$CUA,DBLWRD+1    MOVE TO OUTPUT RECORD
         SPACE 2
*----------------------------------------------------------------------
*
*                  RECORD FORMAT
*
*----------------------------------------------------------------------
         MVC   OT$RECFM,=CL3' '   CLEAR RECFM FIELD
         TM    JFCRECFM,JFCUND    UNDEFINED?
         BNO   AAA080             NO
         MVI   OT$RECFM,C'U'      INDICATE RECFM
         B     EXIT080            ALLDONE
AAA080   TM    JFCRECFM,JFCFIX    FIXED?
         BZ    BBB080             NO
         MVI   OT$RECFM,C'F'      INDICATE RECFM
         TM    JFCRECFM,JFCRFB    BLOCKED?
         BZ    CCC080             NO
         MVI   OT$RECFM+1,C'B'    INDICATE BLOCKED
         TM    JFCRECFM,JFCRFS    SPANNED?
         BZ    EXIT080            ALLDONE
         MVI   OT$RECFM+2,C'S'    INDICATE SPANNED
         B     EXIT080            ALLDONE
BBB080   TM    JFCRECFM,JFCVAR    VARIABLE
         BZ    EXIT080            ALLDONE
         MVI   OT$RECFM,C'V'      INDICATE RECFM
         TM    JFCRECFM,JFCRFB    BLOCKED?
         BZ    CCC080             NO
         MVI   OT$RECFM+1,C'B'    INDICATE BLOCKED
         TM    JFCRECFM,JFCRFS    SPANNED?
         BZ    EXIT080            ALLDONE
         MVI   OT$RECFM+2,C'S'    INDICATE SPANNED
         B     EXIT080            ALLDONE
CCC080   TM    JFCRECFM,JFCRFS    SPANNED?
         BZ    EXIT080            ALLDONE
         MVI   OT$RECFM+1,C'S'    INDICATE SPANNED
EXIT080  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*                  VOL SER  AND UNIT TYPE
*
*----------------------------------------------------------------------
         MVC   OT$VOLSR,SMFSRTEV  VOLUME SERIAL NUMBER
         LA    R7,UNITTBL         UNIT TYPE TABLE
         LA    R8,8               TABLE ELEMENT LENGTH
         LA    R9,UNTBLEND-8      END OF TABLE ADDRESS - 8
LOOP090  EQU   *
         CLC   0(2,R7),SMFUCBTY+2 FIND UCBTYPE IN TABLE
         BE    AAA090             FOUND
         BXLE  R7,R8,LOOP090      LOOP THRU TABLE
AAA090   EQU   *
         MVC   OT$DEVC,2(R7)      MOVE DEVICE DESCRIPTION TO OUT REC
         B     EXIT090
UNITTBL  DS    0F
         DC    X'2006',C'2305-1'
         DC    X'2007',C'2305-2'
         DC    X'2008',C'2314  '
         DC    X'2009',C'3330  '
         DC    X'200A',C'3340  '
         DC    X'200B',C'3350  '
         DC    X'200D',C'3330-1'
         DC    X'200E',C'3380  '
         DC    X'8001',C'2400  '
         DC    X'8003',C'3400  '
         DC    X'8080',C'3480  '
UNTBLEND DC    X'0000',C'XXXXXX'
EXIT090  EQU   *
*----------------------------------------------------------------------
*
*                  MACRO INSTRUCTION REFERENCE (MACRF)
*
*----------------------------------------------------------------------
         MVI   OT$MACRF,C' '      CLEAR OUTPUT RECORD FIELD
         TM    SMFDCBMF,X'80'     IS THIS EXCP ACCESS?
         BZ    AAA095             NO, CONTINUE
         MVI   OT$MACRF,C'E'      INDICATE MACRF
         B     EXIT095            ALL DONE
AAA095   TM    SMFDCBMF,X'40'     IS THIS GET ACCESS?
         BZ    BBB095             NO, CONTINUE
         MVI   OT$MACRF,C'G'      INDICATE MACRF
         B     EXIT095            ALL DONE
BBB095   TM    SMFDCBMF+1,X'40'   IS THIS PUT ACCESS?
         BZ    CCC095             NO, CONTINUE
         MVI   OT$MACRF,C'P'      INDICATE MACRF
         B     EXIT095            ALL DONE
CCC095   TM    SMFDCBMF,X'20'     IS THIS READ ACCESS?
         BZ    DDD095             NO, CONTINUE
         MVI   OT$MACRF,C'R'      INDICATE MACRF
         B     EXIT095            ALL DONE
DDD095   TM    SMFDCBMF+1,X'20'   IS THIS WRITE ACCESS?
         BZ    EXIT095            NO, DON'T KNOW THEN
         MVI   OT$MACRF,C'W'      INDICATE MACRF
EXIT095  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*                  EXCP COUNTS, LRECL, BLKSIZE
*
*----------------------------------------------------------------------
         MVC   OT$EXCP(4),SMFEXCP MOVE EXCP COUNT TO OUTPUT RECORD
         MVC   OT$LRECL(2),JFCLRECL MOVE LRECL TO OUTPUT RECORD
         MVC   OT$BLKSI(2),JFCBLKSI MOVE BLKSIZE TO OUTPUT RECORD
         SPACE 2
*----------------------------------------------------------------------
*
*                 INVOKE THE USERS EXIT ROUTINE IF REQUESTED
*
*----------------------------------------------------------------------
         ICM   R15,15,EXITRTN     SHOULD WE LINK TO EXIT ROUTINE?
         BZ    AAA100             NO, CONTINUE WITH DEFAULT
         LA    R1,OUTREC          POINT TO SORTED RECORD FOR EXITRTN
         BALR  R14,R15            YES, GIVE EXIT ROUTINE CONTROL
         LTR   R15,R15            PROCESS THIS RECORD?
         BNZ   ENTRY020           NO, SKIP IT (R15 = NON-ZERO)
AAA100   PUT   SORTIN,OUTREC      WRITE RECORD FOR SORTING
         OI    SWITCH,DATASW      INDICATE DATA TO SORT
         MVI   OUTREC,X'00'       CLEAR OUTREC
         MVC   OUTREC+1(129),OUTREC FOR NEXT BUILD
         B     ENTRY020           GET NEXT RECORD
         SPACE 2
*----------------------------------------------------------------------
*
*            END OF DATA GENERATION, CALL SORT
*
*----------------------------------------------------------------------
ENDGEN   PUT   SYSIN,SORTCARD     WRITE SORT CONTROL CARD
         CLOSE (SYSUT1,,SORTIN,,SYSIN) CLOSE FILES
         TM    SWITCH,DATASW      ARE THERE ANY RECORDS TO SORT?
         BO    AAA110             YES, CONTINUE
         WTO   'SMF1415 - NO 14/15 RECORDS FOUND IN INPUT',ROUTCDE=11
         OC    RETCODE,=F'12'     SET RETURN CODE
         B     RETURN             EXIT
         CNOP  0,4                FULLWORD ALIGN
AAA110   EQU   *
         WTO   'SMF1415 - SORT1                          ',ROUTCDE=11
         LA    R1,PARLST        SET NULL PARM POINTER
BBB110   LINK  EP=SORT            CALL SORT
         LTR   R15,R15            VALID SORT?
         BZ    EXIT110            YES, CONTINUE
         ST    R15,RETCODE        SAVE SORT RETURN CODE
         WTO   'SMF1415 - NON-ZERO SORT RETURN CODE, TEMINATE',        X
               ROUTCDE=11
         B     RETURN
EXIT110  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*            END OF SORT, BUILD COMPOSITE RECORDS BY DATASET
*
*----------------------------------------------------------------------
         OPEN  (SORTOUT,(INPUT),SORTIN,(OUTPUT)) OPEN FILES
         GET   SORTOUT,OUTREC     GET A RECORD
ENTRY120 GET   SORTOUT,OUTREC2    GET A SECOND RECORD
         TM    SWITCH,DECO        WAS LAST RECORD DECOLATED?
         BZ    AA0120             NO, CONTINUE
         CLC   OUTREC(83),OUTREC2 IS THIS THE SAME DSN/JOB/ETC?
         BE    AA1120             YES, CONTINUE DECOLATING
         NI    SWITCH,X'FF'-DECO  RESET DECOLATE SWITCH
         MVC   OUTREC(OT$RECSZ),OUTREC2 IGNORE LAST JOB RECORD
         B     ENTRY120           GET NEXT RECORD
AA0120   CLC   OUTREC(83),OUTREC2 IS THIS THE SAME DSN/JOB/ETC?
         BNE   AAA120             NO, NO CHECK FOR MERGE
AA1120   ICM   R1,15,OT$EXCP      PICK UP LARGEST EXCP COUNT
         ICM   R2,15,OUTREC2+OT$EXCP-OUTREC PICK UP SMALLER COUNT
         SR    R1,R2              DECREMENT TO FORM ACTUAL COUNT
         BM    AAA120             IF INVALID COUNT, IGNORE ADJUSTMENT
         STCM  R1,15,OT$EXCP      UPDATE WITH REAL EXCP COUNT
         OI    SWITCH,DECO        SET DECOLATION SWITCH
         B     EXIT120            PROCESS DECOLATED RECORD
AAA120   TM    OPTFLG,MERGE       IS MERGE REQUESTED?
         BZ    EXIT120            NO, CONTINUE
         CLC   OUTREC(44),BLANKS  IS THIS A BLANK DDNAME (CONCAT)?
         BE    EXIT120            YES, NO MERGE
         CLC   OUTREC(44),OUTREC2 IS THIS THE SAME DSNAME?
         BE    FFF120             YES, MERGE COUNTS
         LA    R15,35             SET LOOP CONTROL
         LA    R1,OUTREC+43       POINT TO END OF DSNAME
BBB120   CLI   0(R1),C' '         CHECK FOR NON-BLANK
         BNE   CCC120             FOUND, CONTINE
         BCTR  R1,0               DECREMENT
         BCT   R15,BBB120         BACK FOR NEXT CHARACTER
         B     EXIT120            NOT A GDG, CONTINUE
CCC120   S     R1,=F'8'           DECREMENT TO PERIOD OF GDG NAME
         CLC   0(2,R1),=C'.G'     IS THIS A GDG?
         BNE   EXIT120            NO, PROCESS IT
         CLC   6(3,R1),=C'V00'    IS THIS A GDG?
         BNE   EXIT120            NO, PROCESS IT
         LA    R14,35             SET LOOP CONTROL
         LA    R2,OUTREC2+43      POINT TO END OF DSNAME
DDD120   CLI   0(R2),C' '         CHECK FOR NON-BLANK
         BNE   EEE120             FOUND, CONTINE
         BCTR  R2,0               DECREMENT
         BCT   R14,DDD120         BACK FOR NEXT CHARACTER
         B     EXIT120            NOT A GDG, CONTINUE
EEE120   S     R2,=F'8'           DECREMENT TO PERIOD OF GDG NAME
         CLC   0(2,R2),=C'.G'     IS THIS A GDG?
         BNE   EXIT120            NO, PROCESS IT
         CLC   6(3,R2),=C'V00'    IS THIS A GDG?
         BNE   EXIT120            NO, PROCESS IT
         CR    R14,R15            SAME SIZE DSN?
         BNE   EXIT120            NO, PROCESS IT
         LA    R15,OUTREC         POINT TO OUTREC
         SR    R1,R15             GET SIZE OF QUALIFIER
         EX    R1,GDGCOMP         COMPARE DSNAME QUALIFIERS
         BNE   EXIT120            DIFFERENT GDG'S PROCESS IT
FFF120   ICM   R1,15,OT$EXCP      PICK UP EXCP COUNT FROM 1ST RECORD
         ICM   R15,15,OUTREC2+OT$EXCP-OUTREC AND SECOND RECORD
         AR    R1,R15             ADD THEM
         STCM  R1,15,OT$EXCP      INTO CURRENT RECORD
         ICM   R1,15,OT$SAVE      PICK UP SAVE COUNT FROM 1ST RECORD
         ICM   R15,15,OUTREC2+OT$SAVE-OUTREC AND SECOND RECORD
         AR    R1,R15             ADD THEM
         STCM  R1,15,OT$SAVE      INTO CURRENT RECORD
         B     ENTRY120           GET NEXT RECORD
GDGCOMP  CLC   OUTREC(0),OUTREC2  COMPARE GDG DSNAME QUALIFIERS
EXIT120  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*                 POTENTIAL EXCP COUNT SAVINGS
*
*----------------------------------------------------------------------
         PRINT GEN
         ZAP   OT$SAVE,=P'0'      ASSUME NO SAVINGS
         L     R1,=F'&TBLK'       ASSUME TAPE BLKSIZE
         CLC   OT$DEVC(2),=C'24'  IS IT TAPE?
         BE    AAA200             YES, BLKSIZE SET
         CLC   OT$DEVC(2),=C'34'  IS IT TAPE?
         BE    AAA200             YES, BLKSIZE SET
         L     R1,=F'&DBLK'       ASSUME DISK DATASET
AAA200   CLM   R1,3,OT$BLKSI      CAN WE HELP?
         BNH   EXIT200            NO, IGNORE SAVINGS
         XR    R2,R2              CLEAR FOR ICM
         CLM   R2,3,OT$BLKSI      ZERO BLKSIZE?
         BE    EXIT200            YES, CANNOT COMPUTE
         ICM   R2,3,OT$LRECL      GET LRECL
         BNZ   BBB200             IF VALID CONTINUE
         ICM   R2,3,OT$BLKSI      NOT VALID, USE BLKSIZE
BBB200   XR    R0,R0              CLEAR FOR DIVIDE
         DR    R0,R2              BY LRECL TO GET NEW BLK FACTOR
         XR    R0,R0              CLEAR REMAINDER FOR MULTIPLY
         MR    R0,R2              BY LRECL TO GET NEW BLKSIZE
         CLM   R1,3,OT$BLKSI      CAN WE HELP?
         BNH   EXIT200            NO, IGNORE SAVINGS
*        R1 NOW CONTAINS THE NEW SUGESTED BLOCK SIZE
         XR    R3,R3              CLEAR FOR ICM
         ICM   R3,3,OT$BLKSI      GET BLKSIZE REALLY USED
         ICM   R4,15,OT$EXCP      GET EXCP COUNT
         BZ    EXIT200            ZERO EXCP COUNT, IGNORE SAVINGS
         XR    R2,R2              CLEAR FOR MULTIPLY
         MR    R2,R4              GET NUMBER OF BYTES TRANSFERED
*        LTR   R1,R1     CHECK TO SEE IF ZERO  AXC-CBT
*        BNZ   OKAYZ     NO ZERO A OKAY        AXC-CBT
*        LA    R1,1      LETS MAKE IT A ONE    AXC-CBT
OKAYZ    DR    R2,R1              DIVIDE BY NEW BLKSIZE TO GET EXCPS
         LTR   R3,R3              IS RESULT ZERO?
         BNZ   CCC200             NO, BLKSIZE LESS THAN $ OF BYTES
         LA    R3,1               WHOLE FILE CAN BE DONE WITH ONE EXCP
*        R3 NOW CONTAINS THE NEW EXCP COUNT POSSIBLE
CCC200   ICM   R2,15,OT$EXCP      GET ACTUAL EXCP COUNT
         SR    R2,R3              SUBTRACT NEW FROM ACTUAL
*        R2 NOW CONTAINS THE EXCP COUNT SAVINGS (DIFFERENCE)
         CVD   R2,DBLWRD          CONVERT SAVE TO PACKED DECIMAL
         ZAP   OT$SAVE,DBLWRD     MOVE TO OUTPUT RECORD
EXIT200  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*                 CONVERT EXCP COUNTS, LRECL, AND BLKSIZE
*
*----------------------------------------------------------------------
         PRINT NOGEN
         ICM   R1,15,OT$EXCP      EXCP COUNT (BINARY)
         CVD   R1,DBLWRD          CONVERT EXCP TO PACKED DECIMAL
         ZAP   OT$EXCP,DBLWRD     MOVE TO OUT RECORD
*
         XR    R1,R1              CLEAR R1
         ICM   R1,3,OT$LRECL      LOGICAL RECORD LENGTH
         CVD   R1,DBLWRD          CHANGE TO PACKED DECIMAL
         MVC   WORK6,EDIT5        EDIT PATTERN 99999
         ED    WORK6,DBLWRD+5     UNPK
         MVC   OT$LRECL,WORK6+1   MOVE TO OUTPUT RECORD
*
         XR    R1,R1              CLEAR R1
         ICM   R1,3,OT$BLKSI      BLOCK SIZE
         CVD   R1,DBLWRD          CHANGE TO PACKED DECIMAL
         MVC   WORK6,EDIT5        EDIT PATTERN 99999
         ED    WORK6,DBLWRD+5     UNPK
         MVC   OT$BLKSI,WORK6+1   MOVE TO OUTPUT RECORD
         SPACE 3
         PUT   SORTIN,OUTREC      PUT OUT RECORD
         MVC   OUTREC(OT$RECSZ),OUTREC2 MOVE BUFFERED RECORD
         B     ENTRY120           GET NEXT RECORD
         EJECT
*----------------------------------------------------------------------
*
*        END OF DATA ON SORTOUT, PROVIDE SORTED REPORT IF REQUESTED
*
*----------------------------------------------------------------------
ENDBLD   TM    SWITCH,EOF1        IS THIS FIRST END OF FILE
         BO    EOJ                NO, ALL DONE
         CLOSE (SORTOUT,,SORTIN)  CLOSE FILES
         SPACE 2
LISTING  DS    0H                  PRODUCE REPORT FROM 'SORTIN'
         OI    SWITCH,EOF1        SET FIRST END OF FILE
         OPEN  (SORTCNTL,(INPUT)) OPEN SORT CONTROL CARD FILE
         TM    SORTCNTL+48,X'10'  WAS OPEN OK?
         BZ    RETURN             NO, ALL DONE
         OPEN  (SYSIN,(OUTPUT))   OPEN SORT SYSIN FILE
NEXTCNTL GET   SORTCNTL,SORTCARD  GET USER'S SORT CARD
         PUT   SYSIN,SORTCARD     PROVIDE SAME FOR SORT
         B     NEXTCNTL           GET NEXT CARD IF ANY
ENDCNTL  CLOSE (SYSIN,,SORTCNTL)  CLOSE FILES
         B     BYPASS             BYPASS ALIGNMENT
         DS    0F                 FULLWORD ALIGN
BYPASS   EQU *
         WTO   'SMF1415 - SORT2                          ',ROUTCDE=11
         LA    R1,PARLST          SET NULL PARM POINTER
BBB220   EQU *
         LINK  EP=SORT            CALL SORT
         LTR   R15,R15            VALID SORT?
         BZ    EXIT220            YES, CONTINUE
         ST    R15,RETCODE        SAVE SORT RETURN CODE
         WTO   'SMF1415 - NON-ZERO SORT RETURN CODE, TEMINATE',        X
               ROUTCDE=11
         B     RETURN
EXIT220  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*            END OF SORT, GENERATE OUTPUT REPORT
*
*----------------------------------------------------------------------
         SPACE 1
         OPEN  (SORTOUT,(INPUT))  OPEN JUST SORTED FILE
         TM    OPTFLG,MEMB         DO WE WANT PDS MEMBERS?
         BNO   AAA230              NO, USE DEFAULT HEADER
         MVC   HEADVAR1,HEADVAL1   YES, ALTER REPORT HEADING
         SPACE 1
AAA230   GET   SORTOUT,OUTREC     GET A RECORD
         CLC   OT$BLKSI,=CL5'    0' ZERO BLOCK SIZE (EXCP)?
         BE    AAA230             YES, IGNORE
*        CLC   OT$SAVE,=X'000000000000500C'  CBT-AXC
*        BL    AAA230                        CBT-AXC
*        CLC   OT$SAVE,=X'000000000000000C'  CBT-AXC
*        BE    AAA230                        CBT-AXC
*        CLC   OT$EXCP,=X'000000000000000C'  SEAG CART1
*        BE    AAA230                        SEAG CART1
         MVC   RP$DSNAM,OT$DSNAM  MOVE DATASET NAME
         CLI   RP$DSNAM,X'04'
         BNE   SKPVTOC
         MVC   RP$DSNAM,RP#VTOC
SKPVTOC  MVC   RP$DDNAM,OT$DDNAM  MOVE DD NAME
         MVC   RP$JOBNM,OT$JOBNM  MOVE JOB NAME
         MVC   RP$TEMP,OT$TEMP    MOVE INDICATOR 1
         MVC   RP$DISP,OT$DISP    MOVE DISPOSITION
         MVC   RP$MACRF,OT$MACRF  MOVE MACRF
         MVC   RP$DSORG,OT$DSORG  MOVE DSORG
         MVC   RP$RECFM,OT$RECFM  MOVE RECORD FORMAT
         MVC   RP$BLKSI,OT$BLKSI  MOVE BLKSIZE
         MVC   RP$LRECL,OT$LRECL  MOVE LRECL
         MVC   RP$VOLSR,OT$VOLSR  MOVE VOLUME SER
         MVC   RP$UCB,OT$CUA       MOVE UCB
         MVC   RP$DEVC,OT$DEVC    MOVE DEVICE TYPE
         MVC   RP$SMFTY,OT$SMFTY  MOVE RECORD TYPE
         MVC   WORK10,EDIT9       MOVE EDIT MASK
         ED    WORK10,OT$EXCP+3   UNPK ACTUAL EXCP'S
         MVC   RP$EXCP,WORK10+1   MOVE TO OUTPUT RECORD
         TM    OPTFLG,MEMB         DO WE WANT PDS MEMBERS?
         BNO   AAL231              NO, GO SHOW EXCP SAVINGS
         MVC   RP$MEMB,OT$ELNM     YES, PRINT ELEMENT NAME
         B     AAL232              BYPASS EXCP SAVINGS
AAL231   DS    0H                  OUTPUT EXCP SAVINGS
         MVC   WORK10,EDIT9       MOVE EDIT MASK
         ED    WORK10,OT$SAVE+3   UNPK POSSIBLE SAVED EXCP'S
         MVC   RP$SAVE,WORK10+1   MOVE TO OUTPUT RECORD
         SPACE 1
AAL232   DS    0H                  OUTPUT REPORT LINE
         LA    R1,RPTREC          POINT TO DETAIL RECORD
         BAL   R14,RPT            WRITE RECORD OUT
         AP    TOTEXCPS,OT$EXCP   ADD TO TOTAL EXCPS
         AP    TOTSAVES,OT$SAVE   ADD TO TOTAL SAVINGS
         L     R2,LCNT            GET LINE COUNT
         LA    R2,1(R2)           BUMP LINE COUNT
         CH    R2,=H'66'          AT THE LIMIT      76
         BNE   NOSUM              NO, CONTINUE
         LA    R1,BLANKS          POINT TO BLANK LINE
         BAL   R14,RPT            PRINT IT
         MVC   WORK10,EDIT9       MOVE EDIT MASK
         ED    WORK10,TOTEXCPS+3  MAKE PRINTABLE
         MVC   SUMEXCPS,WORK10+1  MOVE TO OUTPUT RECORD
         MVC   WORK10,EDIT9       MOVE EDIT MASK
         ED    WORK10,TOTSAVES+3  MAKE PRINTABLE
         MVC   SUMSAVES,WORK10+1  MOVE TO OUTPUT RECORD
         LA    R1,SUMMARY         POINT TO SUMMARY RECORD
         SR    R2,R2              CLEAR LINE COUNT
         BAL   R14,RPT            WRITE SUMMARY RECORD
         TM    OPTFLG,ALL         ALL REQUESTED?
         BO    NOSUM              NO, IGNORE COUNTING PAGES
         L     R15,COUNT          GET PAGE COUNT
         C     R15,=F'50'         ARE WE AT OUR LIMIT?
         BH    EOJ                YES, END OF REPORT
         LA    R15,1(R15)         NO, BUMP COUNT
         ST    R15,COUNT          SAVE COUNT
NOSUM    ST    R2,LCNT            SAVE UPDATED LINE COUNT
         B     AAA230             GET NEXT RECORD
         EJECT
*----------------------------------------------------------------------
*
*            EOJ AND CLEANUP
*
*----------------------------------------------------------------------
EOJ      DS    0H
         CLOSE (SORTOUT,,RPTDCB)
RETURN   EQU   *
         L     R15,RETCODE        LOAD RETURN CODE
         $EPILOG ,                RETURN
         SPACE 5
*----------------------------------------------------------------------
*
*            ERROR ROUTINES
*
*----------------------------------------------------------------------
ERROR1   DS    0H                 INVALID START DATE
         OC    RETCODE,=F'4'      SET RETURN CODE OF 4
         WTO   'SMF1415 - BAD RETURN CODE FROM HEXLATE',ROUTCDE=11
         ABEND 1,DUMP
EXITIN   CLC   SORTIN+62(2),=H'0' ANY BLKSIZE SPECIFIED?
         BNER  R14                YES, RETURN
         MVC   SORTIN+62(2),=H'23400' NO, BLOCK TO HALF TRACK
         BR    R14                RETURN
         EJECT
*----------------------------------------------------------------------
*
*            PROGRAM CONSTANTS
*
*----------------------------------------------------------------------
*----------------------------------------------------------------------
*  SORT PARMLIST   ----------------------------------------------------
         DS    0F
PARLST   DC    X'80',AL3(SORTPRM1)
         DC    H'0'
SORTPRM1 DC    AL2(PARMEND1-PARMBEG1)
PARMBEG1 EQU   *
         DC    A(SORT1,SORTEND1,REC1,RECEND1,0,0)
SORTSIZ1 DC    F'100000'
SORTMSG1 DC    X'FF00'
         DC    C'AP'
PARMEND1 EQU   *
*                                                                     *
SORT1    DS    0H
*
       DC    C' SORT FIELDS=(1,91,CH,D),SIZE=E40000 '
SORTEND1 EQU   *-1
*                                                                     *
REC1     DS    0H
         DC    C' RECORD LENGTH=150,TYPE=F '                        NTL
RECEND1  EQU   *-1
*                                                                     *
********
HEAD     DS   0CL133
CC       DC   C' '
         DC   CL40'---------------------- DSNAME ----------',C' ' DSN
         DC   CL8'DDNAME',C' '
         DC   CL8'JOBNAME',C' '
         DC   CL6'DEVTYP',C' '          DEVICE TYPE
         DC   CL6'VOLSER',C' '          VOL SERIAL NUMBER
         DC   CL3'UCB',C' '             UCB ADDRESS
         DC   CL2'IO',C' '              SMF RECORD TYPE I OR O
         DC   CL2'PT',C' '              TYPE OF DATASET
         DC   CL3'DSP',C' '             DISPOSITION OF DATA SET
         DC   CL3'DSO',C' '             DATA SET ORGANIZATION
         DC   CL3'MAC',C' '             MACRF
         DC   CL3'FMT',C' '             RECFM
         DC   CL5'LRECL',C' '           LRECL
         DC   CL5'BLOCK',C' '           BLKSIZE
         DC   CL9'ACT-EXCPS',C' '       ACTUAL EXCP COUNTS
HEADVAR1 DC   CL9'POSS-SAVE',C' '       POSSIBLE EXCP SAVINGS
         DC   CL06' '               10
********
RPTREC   DS   0CL133
         DC   C' '                  ASA CHAR
RP$DSNAM DC   CL40' ',C' '          DATA SET NAME
RP$DDNAM DC   CL8' ',C' '           DDNAME
RP$JOBNM DC   CL8' ',C' '           JOB NAME
RP$DEVC  DC   CL6' ',C' '           DEVICE TYPE
RP$VOLSR DC   CL6' ',C' '           VOLUME SERIAL NUMBER
RP$UCB   DC   CL3' ',C' '           UCB ADDRESS
RP$SMFTY DC   CL1' ',CL2' '         SMF RECORD TYPE I OR O
RP$TEMP  DC   CL1' ',CL3' '         DATASET TYPE
RP$DISP  DC   CL1' ',CL2' '         DISPOSITION OF DATA SET
RP$DSORG DC   CL2' ',CL3' '         DATA SET ORGANIZATION
RP$MACRF DC   CL1' ',CL2' '         MACRF
RP$RECFM DC   CL3' ',C' '           RECFM
RP$LRECL DC   CL5' ',C' '           LRECL
RP$BLKSI DC   CL5' ',C' '           BLKSIZE
RP$EXCP  DC   CL9' ',C' '           EXCP COUNT
RP$MEMB  DS   0CL8' '               MEMBER NAME
RP$SAVE  DC   CL9' ',C' '           SAVE COUNT
         DC   CL06' '                10
********
SWITCH   DC    X'00'
DATASW   EQU   X'01'         DATA FOUND INDICATOR
EOF1     EQU   X'02'         FIRST END OF FILE SW
DECO     EQU   X'04'         DECOLATION SWITCH
********
OPTFLG   DC    X'00'
ALL      EQU   X'01'         ALL DATA REQUESTED
DISK     EQU   X'02'         ONLY DISK REQUESTED
TAPE     EQU   X'04'         ONLY TAPE REQUESTED
TEMP     EQU   X'08'         ONLY TEMP DATASETS
PERM     EQU   X'10'         ONLY PERM DATASETS
MERGE    EQU   X'20'         MERGE DUPLICATE DATASETS
LIST     EQU   X'40'         ONLY LIST 'SORTIN'
MEMB     EQU   X'80'         LIST PDS MEMBER NAMES
********
RP#VTOC  DC    CL44'VTOC'
HEADVAL1 DC    CL9' MEMBER'  ALTERNATE HEADING FIELD (HEADVAR1)
DBLWRD   DC    D'0'
TOTEXCPS DC    PL8'0'
TOTSAVES DC    PL8'0'
WORK8    DC    CL8' '
WORK6    DC    CL6' '
WORK10   DC    CL10' '
EDIT7    DC    X'4020202020202120'
EDIT5    DC    X'402020202120'
EDIT9    DC    X'40202020202020202120'
HXPGM    DC    V(HEXLATE)
LSTIN    DC    X'85',AL3(EXITIN)
EXITRTN  DC    F'0'
RETCODE  DC    F'0'
COUNT    DC    F'0'
LCNT     DC    F'0'
BLDLLIST DC    H'1',H'12'      NUMBER AND SIZE OF ENTRIES
EXITNAME DC    CL8' '          NAME OF MODULE
TTRC     DC    CL12' '         TTRC AREA
TIME     DS    0CL8
HRS      DC    CL2' '
MIN      DC    CL2' '
SEC      DC    CL2' '
TH       DC    CL2' '
SMFTIME  DC    F'0'
HXPARMS  DS    0F
HXLNGTH  DC    F'0'
HXDATA   DC    A(0)
HXOUT    DC    A(0)
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=ENDGEN,BFTEK=A
SORTIN   DCB   DDNAME=SORTIN,DSORG=PS,MACRF=PM,EXLST=LSTIN,            X
               RECFM=FB,LRECL=OT$RECSZ
SORTOUT  DCB   DDNAME=SORTOUT,DSORG=PS,MACRF=GM,EODAD=ENDBLD,RECFM=FB, X
               LRECL=OT$RECSZ
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80,       X
               BLKSIZE=80
SORTCNTL DCB   DDNAME=SORTCNTL,DSORG=PS,MACRF=GM,RECFM=FB,LRECL=80,    X
               BLKSIZE=80,EODAD=ENDCNTL
RPT      SYSPRINT DDNAME=SYSPRINT,HEADER1=HEAD,LINES=68,LRECL=133
BLANKS   DC    CL133' '
SUMMARY  DS    0CL133
         DC    CL103' '
SUMEXCPS DC    CL9' ',C' '
SUMSAVES DC    CL9' ',C' '
         DC    CL9' ',CL10' '
SORTCARD DC    CL80' SORT FIELDS=(1,91,CH,D) <=== INTERIM SORT'
OUTREC2  DC    CL(OT$RECSZ)' '
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*            SORT RECORD DSECT
*
*----------------------------------------------------------------------
OUTREC   EQU  *           CC
OT$DSNAM DC   CL44' '      1 DATA SET NAME
OT$VOLSR DC   CL6' '      45 VOLUME SERIAL NUMBER
OT$DEVC  DC   CL6' '      51 DEVICE TYPE
OT$CUA   DC   CL3' '      57 CHANNEL/UNIT ADDRESS
OT$DDNAM DC   CL8' '      60 DDNAME
OT$JOBNM DC   CL8' '      68 JOB NAME
OT$RSD   DC   PL4'0'      76 DATE READER RECOGNIZED JOB CARD (PACKED
*                            AND JULIAN 00YYDDD+)
OT$RST   DC   XL4'00'     80 TIME READER RECOGNIZED JOB CARD (IN BINARY
*                            AND IN HUNDREDTHS OF A SECOND)
OT$EXCP  DC   PL8'0'      84 EXCP COUNT
OT$SAVE  DC   PL8'0'      92 POTENTIAL SAVINGS IN EXCP COUNTS
OT$SMFTY DC   CL1' '     100 SMF RECORD TYPE (I=INPUT,O=OUTPUT)
OT$TEMP  DC   CL1' '     101 DATASET TYPE (T=TEMP,V=VIO)
OT$DISP  DC   CL1' '     102 DISPOSITION OF DATA SET (N=NEW,M=MOD,
*                            O=OLD,S=SHR)
OT$MACRF DC   CL1' '     103 MACRF (E=EXCP,G=GET,P=PUT,R=READ,W=WRITE)
OT$RECFM DC   CL3' '     104 RECORD FORMAT (U=UNDEFINED,F=FIXED,
*                            B=BLOCKED,S=SPANNED,V=VARIABLE)
OT$DSORG DC   CL2' '     107 DATA SET ORGANIZATION (IS=ISAM,
*                            PS=PHYSICAL SEQUENTIAL,DA=BDAM,
*                            BT=BTAM,PO=PARTITIONED,TC=TCAM,
*                            VS=VSAM)
OT$BLKSI DC   CL5' '     109 BLKSIZE
OT$LRECL DC   CL5' '     114 LRECL
OT$PQTY  DC   CL7' '     119 PRIMARY ALLOCATION QUANTITY
OT$SQTY  DC   CL7' '     126 SECONDARY ALLOCATION QUANTITY
OT$ALOC  DC   CL1' '     133 ALLOCATION UNIT (T=TRACK,C=CYLINDER,
*                            A=ABSOLUTE TRACK,B=AVERAGE BLOCK)
OT$DATE  DC   PL4'0'     134 DATE RECORD TO SMF BUFFER (PACKED AND
*                            JULIAN 00YYDDD+)
OT$TIME  DC   XL4'00'    138 TIME RECORD TO SMF BUFFER (IN BINARY
*                            AND IN HUNDREDTHS OF A SECOND)
OT$ELNM  DC   CL8' '     142 ELEMENT NAME - MEMBER OR GDG RELATIVE GEN.
         DC   CL1' '     150 RESERVED - SET TO BLANK
         SPACE 1
OT$RECSZ EQU  *-OUTREC   150=SIZE OF SORT RECORD
         EJECT
*----------------------------------------------------------------------
*
*        HEX TO CHARACTER TRANSLATION SUBROUTINE
*
*        R1 ===>  DS   F     LENGTH OF DATA TO BE TRANSLATED
*                 DS   F     DATA TO BE TRANSLATED
*                 DS   F     AREA FOR TRANSLATED OUTPUT
*
*----------------------------------------------------------------------
HEXLATE  $PROLOG LV=20
HXENT010 DS    0H
         LR    R11,R1          SAVE PARM ADDR
         USING PARMS,R11       DSECT FOR PARMS
         L     R2,LNGTH        DATA LENGTH
         LR    R0,R2           PUT IN R0
         GETMAIN R,LV=(0)      GET A WORKAREA
         ST    R1,72(R13)      SAVE ADDR OF FIRST WORKAREA
         LR    R0,R2           PUT IN R0
         GETMAIN R,LV=(0)      GET A WORKAREA
         ST    R1,76(R13)      SAVE ADDR OF SECOND WORKAREA
         L     R0,72(R13)      1ST WORKAREA ADDR
         L     R14,INPUT       INPUT DATA
         L     R1,LNGTH        DATA LENGTH
         L     R15,LNGTH
         MVCL  R0,R14          MOVE DATA TO WORKAREA
         L     R0,76(R13)      2ND WORKAREA ADDR
         L     R14,INPUT       INPUT DATA
         L     R1,LNGTH        DATA LNGTH
         L     R15,LNGTH
         MVCL  R0,R14          MOVE DATA TO WORKAREA
HXEX010  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*        TRANSLATE DATA TO PRINTABLE HEX
*
*----------------------------------------------------------------------
         L     R3,LNGTH        DATA LENGTH
         L     R7,72(R13)      1ST WORKAREA
         L     R8,76(R13)      2ND WORKAREA
HXLP020  EQU   *
         C     R3,=F'256'      DATA LENGTH GREATER THAN 256 ?
         BL    HXB020          NO - 1 TRANSLATE WILL DO IT
         LA    R9,TABLE1       YES - TRANSLATE 256 AT A TIME
         XR    R6,R6           CLEAR R6
         IC    R6,=X'FF'       SET LENGTH CODE FOR EX TO 255
         EX    R6,XLATE1       TRANSLATE 1ST HALF OF EACH BYTE
         LA    R9,TABLE2
         EX    R6,XLATE2       TRANSLATE 2ND HALF OF EACH BYTE
         LA    R7,256(R7)      BUMP WORKAREA1
         LA    R8,256(R8)      BUMP WORKAREA2
         S     R3,=F'256'      DECR REMAINING DATA LENGTH
         B     HXLP020         CONTINUE TRANSLATING ALL DATA
HXB020   EQU   *
         CH    R3,=H'0'        ANY DATA LEFT ??
         BE    HXEX020         NO - TRANSLATE DONE
HXC020   EQU   *
         SH    R3,=H'1'        YES - DECR FOR EX INSTRUCTION
         LA    R9,TABLE1       TRANSLATE
         EX    R3,XLATE1       *        REMAINING
         LA    R9,TABLE2       *               DATA
         EX    R3,XLATE2
HXEX020  EQU   *
         B     HXENT030
*----------------------------------------------------------------------
XLATE1   TR    0(0,R7),0(R9)
XLATE2   TR    0(0,R8),0(R9)
*----------------------------------------------------------------------
         EJECT
*----------------------------------------------------------------------
*
*        PUT DATA BACK TOGETHER IN ONE LINE
*
*----------------------------------------------------------------------
HXENT030 EQU   *
         L     R3,LNGTH        DATA LENGTH
         L     R7,72(R13)      ODD BYTES (FROM 1ST HALF OF EACH BYTE)
         L     R8,76(R13)      EVEN BYTES (FROM 2ND HALF OF EACH BYTE)
         L     R9,OUTPUT       OUTPUT AREA
HXLP030  EQU   *
         MVC   0(1,R9),0(R7)   MOVE 1ST HALF
         MVC   1(1,R9),0(R8)   MOVE 2ND HALF
         LA    R7,1(R7)        BUMP TO NEXT BYTE
         LA    R8,1(R8)        BUMP TO NEXT BYTE
         LA    R9,2(R9)        BUMP
         BCT   R3,HXLP030      MOVE FOR LENGTH OF DATA
HXEX030  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*        CLEANUP AND RETURN
*
*----------------------------------------------------------------------
         L     R0,LNGTH        LENGTH OF WORKAREA
         L     R1,72(R13)      ADDR OF WORKAREA 1
         FREEMAIN R,LV=(0),A=(1)
         L     R0,LNGTH        LENGTH OF WORKAREA
         L     R1,76(R13)      ADDR OF WORKAREA 2
         FREEMAIN R,LV=(0),A=(1)
         $EPILOG 0
         EJECT
TABLE1   DS    0CL256
         DC    16C'0'
         DC    16C'1'
         DC    16C'2'
         DC    16C'3'
         DC    16C'4'
         DC    16C'5'
         DC    16C'6'
         DC    16C'7'
         DC    16C'8'
         DC    16C'9'
         DC    16C'A'
         DC    16C'B'
         DC    16C'C'
         DC    16C'D'
         DC    16C'E'
         DC    16C'F'
*----------------------------------------------------------------------
TABLE2   DS    0CL256
         DC    16C'0123456789ABCDEF'
*----------------------------------------------------------------------
         LTORG
PARMS    DSECT
LNGTH    DS    F
INPUT    DS    F
OUTPUT   DS    F
         PRINT NOGEN
SMFTYP14 DSECT
         IFASMFR 14
         ORG   SMFJFCB1
         IEFJFCBN  LIST=YES
         ORG
         END
