*          DATA SET DBVSAMZAP  AT LEVEL 001 AS OF 08/10/84
VSAMZAP  CSECT                            D. LEES  4-83
***********************************************************************
*    VSAMZAP IS A VSAM UTILITY INTENDED FOR USE IN PLACE OF AMASZAP   *
*    FOR REPAIR OF IMS DATABASE POINTERS. ZAPPING VSAM DATABASES      *
*    WITH AMASZAP REQUIRES LOCATING THE ACTUAL CCCCHHHHRR OF THE      *
*    RECORD WITHIN A DATASPACE AND ZAPPING THE VTOC TO TURN OFF THE   *
*    PASSWORD BIT. THIS UTILITY USES VSAM ACCESS AND NEEDS ONLY       *
*    THE RBA OF THE RECORD AND THE CLUSTER NAME.                      *
*    CONTROL CARDS:   (TOTALLY FIXED FORM)                            *
*    -------------                                                    *
*    RBA XXXXXXXX               RBA     AS AN EIGHT DIGIT HEX NUMBER  *
*                                       (RBN-OFFSET)                  *
*    VER OOOO XXXXXXXX          VERIFY  FOUR DIGIT HEX OFFSET (32767) *
*                                       EIGHT DIGIT HEX DATA          *
*                                       (SETS A GO/NOGO SWITCH)       *
*    REP OOOO XXXXXXXX          REPLACE FOUR DIGIT HEX OFFSET (32767) *
*                                       EIGHT DIGIT HEX DATA          *
*                                                                     *
*    *                          COMMENT CARD                          *
*                                                                     *
*                                                                     *
*   NOTES:                                                            *
*   -----                                                             *
*   THIS WORKS VERY MUCH LIKE AMASZAP SO IT'S A GOOD IDEA TO VERIFY   *
*   EVERYTHING BEFORE DOING ANY REPLACES.                             *
*                                                                     *
*   YES, IT WRITES THE RECORD OUT FOR EVERY REPLACE. YOU CAN ENHANCE  *
*   IT IF YOU LIKE.                                                   *
***********************************************************************
         PRINT  NOGEN
         REGS
         SAVE   (14,12)
         BALR   R12,0
         USING  *,R12
         ST     R13,SAVE+4
         LA     R13,SAVE
INIT     EQU    *
         OPEN   (SYSIN,INPUT,SYSPRINT,OUTPUT)
         GENCB  BLK=ACB,AM=VSAM,DDNAME=SYSLIB,MACRF=(ADR,DIR,OUT)
         LTR    R15,R15
         BZ     GENACBOK
ABEND201 ABEND  201,DUMP
GENACBOK EQU    *
         LR     R3,R1                  R3->ACB
         OPEN   ((R3))
         SHOWCB ACB=(R3),AREA=LRECL,LENGTH=4,FIELDS=(LRECL)
         OI     LRECL,X'80'
         GETMAIN LU,LA=LRECL,A=WHERE,SP=001
         NI     LRECL,X'00'
         L      R4,WHERE                R4->IOAREA
         GENCB  BLK=RPL,ACB=(R3),AM=VSAM,AREA=(R4),                    X
               AREALEN=LRECL,ARG=RBA,OPTCD=(ADR,DIR,UPD,MVE)
         LTR    R15,R15
         BZ     GENRPLOK
ABEND202 ABEND  202,DUMP
GENRPLOK EQU    *
         LR     R5,R1                    R5->RPL
*--------------------------------------------
*        MAIN PROCESS
*--------------------------------------------
GETCARD  EQU    *
         GET    SYSIN,CARD
         PUT    SYSPRINT,CARD
         CLC    CARD(3),=C'RBA'
         BE     SETRBA
         CLC    CARD(3),=C'VER'
         BE     VERIFY
         CLC    CARD(3),=C'REP'
         BE     REPLACE
         CLI    CARD,C'*'
         BE     COMMENT
         B      SYNERR
*--------------------------------------------
*        PROCESSING
*--------------------------------------------
SETRBA   EQU    *
         LA     R6,CARD+4                R6->CC.
         LA     R7,RBA
         LA     R8,4
RBALOOP  EQU    *
         MVC    TWOBYTES,0(R6)
         CALL   CVX,(TWOBYTES,ONEBYTE)
         LTR    R15,R15
         BNZ    SYNERR
         MVC    0(1,R7),ONEBYTE
         LA     R7,1(R7)
         LA     R6,2(R6)
         BCT    R8,RBALOOP
         B      GETCARD
*--------------------------------------------
VERIFY   EQU    *
         BAL    R11,OFFSET
         BAL    R11,DATA
         BAL    R11,GETVSAM
VER      EQU    *
         LH     R9,VSOFFSET         BEWARE (-)
         LTR    R9,R9
         BM     SYNERR
         LA     R9,0(R4,R9)        R9-> VERIFY LOCATION
         CLC    0(4,R9),VSDATA
         BE     VERIFIED
         PUT    SYSPRINT,=CL80'VERIFY FAILED'
         MVI    VERSW,X'00'
         OI     RETCODE+3,X'04'
VERIFIED EQU    *
         B      GETCARD
*--------------------------------------------
REPLACE  EQU    *
         BAL    R11,OFFSET
         BAL    R11,DATA
         BAL    R11,GETVSAM
         CLI    VERSW,X'00'
         BE     BYPASSED
ZAP      EQU    *
         LH     R9,VSOFFSET         BEWARE (-)
         LTR    R9,R9
         BM     SYNERR
         LA     R9,0(R4,R9)        R9-> VERIFY LOCATION
         MVC    0(4,R9),VSDATA
         PUT    RPL=(R5)
         LTR    R15,R15
         BZ     REPLACED
         PUT    SYSPRINT,=CL80'REPLACE FAILED'
ABEND204 ABEND  204,DUMP
REPLACED EQU    *
BYPASSED EQU    *
         B      GETCARD
*--------------------------------------------
SYNERR   EQU    *
         PUT    SYSPRINT,=CL80'SYNTAX ERROR'
         MVI    VERSW,X'00'     SYNTAX ERROR PREVENTS REPLACES
         OI     RETCODE+3,X'08'
         B      GETCARD
*--------------------------------------------
COMMENT  EQU    *
         PUT    SYSPRINT,CARD
         B      GETCARD
*--------------------------------------------
TERM     EQU    *
         CLOSE  ((R3))
         CLOSE  (SYSIN,,SYSPRINT)
         L      R15,RETCODE
         L      R13,SAVE+4
         RETURN (14,12),RC=(15)
*--------------------------------------------
*        SUBROUTINES
*--------------------------------------------
GETVSAM  EQU    *
         GET    RPL=(R5)           R5->RPL
         LTR    R15,R15
         BZR    R11                RETURN-SUCCESSFUL
         CLI    RPLERREG-IFGRPL(R5),X'08'
         BNE    ABEND203
         CLC    RPLCNDCD-IFGRPL(2,R5),=X'0004'   DUMMY,AMP=AMORG
         BNE    ABEND203
         PUT    SYSPRINT,=CL80'ITS NOT NICE TO FOOL MOTHER VSAM'
ABEND203 PUT    SYSPRINT,=CL80'VSAM READ FAILED'
         ABEND  203,DUMP
*--------------------------------------------
OFFSET   EQU    *
         LA     R6,CARD+4
         LA     R7,VSOFFSET
         LA     R8,2
OLOOP    EQU    *
         MVC    TWOBYTES,0(R6)
         CALL   CVX,(TWOBYTES,ONEBYTE)
         LTR    R15,R15
         BNZ    SYNERR
         MVC    0(1,R7),ONEBYTE
         LA     R6,2(R6)
         LA     R7,1(R7)
         BCT    R8,OLOOP
         BR     R11
*--------------------------------------------
DATA     EQU    *
         LA     R6,CARD+9
         LA     R7,VSDATA
         LA     R8,4
DLOOP    EQU    *
         MVC    TWOBYTES,0(R6)
         CALL   CVX,(TWOBYTES,ONEBYTE)
         LTR    R15,R15
         BNZ    SYNERR
         MVC    0(1,R7),ONEBYTE
         LA     R6,2(R6)
         LA     R7,1(R7)
         BCT    R8,DLOOP
         BR     R11
*--------------------------------------------
SYSIN    DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,RECFM=FB,              X
               LRECL=80,EODAD=TERM
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,RECFM=FB,           X
               LRECL=80,BLKSIZE=80,BUFNO=1
SAVE     DC    9D'0'
WHERE    DC    F'0'
LRECL    DC    F'0'
RBA      DC    F'0'
VSDATA   DC    F'0'
RETCODE  DC    F'0'
VSOFFSET DC    H'0'
CARD     DC    CL80' '
TWOBYTES DC    CL2' '
ONEBYTE  DC    CL1' '
VERSW    DC    X'FF'         DEFAULT IS VERIFIED.
         IFGRPL  AM=VSAM,DSECT=YES
         END
