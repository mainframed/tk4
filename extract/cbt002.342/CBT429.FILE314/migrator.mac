          PRINT ON,NOGEN
*********************************************************************
*****                                                              **
***** NUMIGRAT:                                                    **
***** GENERATES AND ISSUES HSM COMMANDS FOR DATASET NAMES INPUT.   **
*****                                                              **
***** CARDIN IS A LIST OF DATASET NAMES IN CARD IMAGE FORMAT       **
***** PUTLINE LISTS ALL HSM COMMANDS EXECUTED AND THE MVS MESSAGES **
***** ASSEMBLE WITH DEBUG SWITCH ON FOR SNAPSHOT TRACING . . .     **
*********************************************************************
***** D.LEES 01/00 FROM A SIMILAR PROGRAM BY S.MAGNANO             **
*********************************************************************
NUMIGRAT CSECT
NUMIGRAT AMODE 31
NUMIGRAT RMODE 24
*
         B     24(R15)       BRANCH AROUND (V.R)
*
         DC    CL20'NU NUMIGRAT V1.R1'
*
*********************************************************************
*  ESTABLISH ADDRESSING MODE AND BASE REGISTERS
*  ENSURE ADDRESSABILITY FOR THIS PGM EVEN IN AR MODE
*********************************************************************
         SAVE  (14,12)                 BACK TO THE TRADITIONAL . .
         SAC   512                     SET AR ADDRESSING MODE.
         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS
         LAE   R12,0                   SET BASE REG AR. = 0
         BASR  R12,0                   SET BASE REG GPR.
         USING *,R12
         ST    R13,SAVE+4              HSA
         LA    R2,SAVE                 SAVE CHAIN VITAL FOR GET/PUT
         ST    R2,8(,R13)              LSA
         LAE   R13,SAVE                SAVEAREA FOR CALLED PROGRAMS
         SAC   0                       SET PRIMARY ADDRESSING MODE.
         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS
***********************************************************************
* NOTE: ASSUME SAC 0 UNLESS SPECIFICALLY SET OTHERWISE
* NOTE: ASSUME AMODE 31 UNLESS SPECIFICALLY SET OTHERWISE
* NOTE: 512 SETS AR MODE FOR ACCESSING NON-PRIMARY ADDRSP. DATA
***********************************************************************
         EJECT
BEGIN    EQU   *
         MVC   WTOT(50),NUMIGR01
         BAL   R10,WTOP
         B     STARTIT                 GO START PROCESSING.
*
***********************************************************************
*******************  NUMIGRAT MAINLINE ********************************
***********************************************************************
STARTIT  EQU   *
         BAL   R10,SNAPINIT
*
         BAL   R10,MCSOPA              GO ACTIVATE CONSOLE.
PROCESS  EQU   *
         BAL   R10,GETDSN              GET INPUT DSNAME
         CLI   EOF,X'80'
         BE    ENDIT
*
         BAL   R10,MGCREE              GO ISSUE "D A" COMMAND
*
         BAL   R10,MCSWAIT             GO WAIT FOR THE CMD RESPONSE.
*
         BAL   R10,MCSGET              GO GET THE COMMAND RESPONSE.
*
         BAL   R10,PRNTLOG             GO STACK RESPONSE MESSAGE.
*
         B     PROCESS
*
ENDIT    EQU   *                       END - OF - INPUT
*
         BAL   R10,MCSOPD              GO DEACTIVATE CONSOLE.
*
         MVC   WTOT(50),NUMIGR03
         BAL   R10,WTOP
*
         CP    FAILURES,=P'1'
         BL    RC0
RC8      L     R13,SAVE+4
         RETURN (14,12),RC=8
RC0      L     R13,SAVE+4
         RETURN (14,12),RC=0
***********************************************************************
*
*  END OF MAINLINE
*
***********************************************************************
        EJECT
***********************************************************************
*****************************  GETDSN    ******************************
***********************************************************************
GETDSN   EQU   *
*
         ST    R10,SAVE10                       ENTERED IN 31 BIT MODE
         LA    R15,GET224                      RESET AMODE TO 24
         N     R15,=X'7FFFFFFF'                 SET 24
         BSM   0,R15                           RMODE(24) !!
GET224   EQU   *
         CLI   OPENSW,X'80'
         BE    GOGET
         MVI   OPENSW,X'80'
         OPEN  (CARDIN,INPUT)
         OPEN  (PUTLINE,OUTPUT),MODE=31
GOGET    GET   CARDIN,CARD
         MVC   SAVEDSN(44),CARD
         TRT   SAVEDSN(44),TRTABL               FIND FIRST BLANK
         MVI   0(R1),C')'                       REPLACE W/R.PAREN
*
         L     R10,SAVE10
         BSM   0,R10                            SET MODE AND RETURN
*
ENDFILE  EQU   *
         ED    SUMMARY3(16),COMMANDS
         ED    SUMMARY5(16),FAILURES
         PUT   PUTLINE,SUMMARY#
         CLOSE (CARDIN,,PUTLINE)
         MVI   EOF,X'80'
         L     R10,SAVE10
         BSM   0,R10                            SET MODE AND RETURN
***********************************************************************
***************************** (END GETDSN) ****************************
***********************************************************************
         EJECT
***********************************************************************
************************  COMMON "WTO" ROUTINE  ***********************
***********************  (50 BYTE MESSAGE AREA)  **********************
***********************************************************************
**
WTOP     EQU   *
         ST    R10,SAVE10              SAVE WTO RETURN ADDRESS.
*
WTO      WTO   'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',   +
               TOKEN=WTOK,DESC=(11)     TEXT MODIFIED PRIOR TO WTO.
         MVC   WTOT(50),=CL50' '       CLEAR TEXT AREA.
*
         L     R10,SAVE10              LOAD WTO RETURN ADDRESS.
         BR    R10
*
WTOT     EQU   WTO+8 ====> WTO TEXT MODIFY AREA
*
WTOD     EQU   WTO+78 ===> WTO DESC MODIFY AREA ((DATA LENGTH) + (28)))
*
*
*    ROUTING AND DESCRIPTOR CODES (REFERENCE)
*
*
*                 (2-BYTE CODE)    <<<<<<<<DESCRIPTION>>>>>>>>>>>>>>
WD1      DC    B'1000000000000000' HI--NO--????  = 1 (SYSTEM FAILURE)
WD2      DC    B'0100000000000000' HI--NO--????  = 2 (IMEDIATE ACTION)
WD3      DC    B'0010000000000000' HI-ROLL-????  = 3 (EVENTUAL ACTION)
WD4      DC    B'0001000000000000' HI-ROLL-????  = 4 (SYSTEM STATUS)
WD5      DC    B'0000100000000000' LO-ROLL-????  = 5 (IMD CMD RESPONSE)
WD6      DC    B'0000010000000000' LO-ROLL-????  = 6 (JOB STATUS)
WD7      DC    B'0000001000000000' LO-ROLL-????  = 7 (APPL PROGRAM)
WD8      DC    B'0000000100000000' LO-ROLL-????  = 8 (OUT-OF-LINE MESG)
WD9      DC    B'0000000010000000' LO-ROLL-????  = 9 (OPERATOR REQUEST)
WD10     DC    B'0000000001000000' LO-ROLL-????  = 10 (DYNAMIC DISPLAY)
WD11     DC    B'0000000000100000' HI--NO--RED   = 11 (CRITICAL EVENT)
WD12     DC    B'0000000000010000' NO-SHOW-BLANK = 12 (RESERVED)
WD13     DC    B'0000000000001000' NO-SHOW-BLANK = 13 (RESERVED)
WD14     DC    B'0000000000000100' NO-SHOW-BLANK = 14 (RESERVED)
WD15     DC    B'0000000000000010' NO-SHOW-BLANK = 15 (RESERVED)
WD16     DC    B'0000000000000001' NO-SHOW-BLANK = 16 (RESERVED)
*
**   OFFSETS   ===>+0         10        20        30        40
**   OFFSETS   ===>+0123456789012345678901234567890123456789012345678
NUMIGR01 DC    CL50'<NUMIGRAT> STARTED '
NUMIGR02 DC    CL50'<NUMIGRAT> ISSUING HSM MIGRATE COMMAND'
NUMIGR03 DC    CL50'<NUMIGRAT> ENDING'
NUMIGR04 DC    CL50'<NUMIGRAT> IN DIAGNOSTIC MODE'
*
***********************************************************************
****************************  END WTO  ********************************
***********************************************************************
         EJECT
***********************************************************************
***********************************************************************
***  EXTRACT MESSAGES FROM THE VIRTUAL CONSOLE MDB DATA STRUCTURES ****
***********************************************************************
***********************************************************************
*
PRNTLOG  EQU   *                       PRINT LOG MESSAGES ROUTINE.
         ST    R10,SAVE10              SAVE PRNTLOG RETURN ADDRESS.
*
* R9 -> DSECT IEAVM105 FOR THE MDB AREAS; SET IN MCSGET ROUTINE (LAE)
*
         SAC   512                     SET AR ADDRESSING MODE.
         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS
         USING MDB,R9                  DSECT FOR MDB HEADER
         LH    R2,MDBLEN               TOTAL LENGTH OF MDB
         LA    R9,MDBHLEN(0,R9)        +HEADER LEN. -> GENERAL OBJECT
         SH    R2,MDBHLEN#             SUBTRACT HEADER LEN. FROM TOTAL
         DROP  R9
         USING MDBG,R9                 DSECT FOR MDB GENERAL OBJECT
         LH    R3,MDBGLEN
         LA    R9,0(R3,R9)             +GENERAL LEN. -> CONTROL OBJ.
         SR    R2,R3                   SUBTRACT OBJECT LEN. FROM TOTAL
         DROP  R9
         USING MDBSCP,R9 DSECT FOR MDB CONTROL OBJECT
         LH    R3,MDBCLEN
         LA    R9,0(R3,R9)             +CONTROL LEN. -> TEXT OBJ.
         SR    R2,R3 SUBTRACT OBJECT LEN. FROM TOTAL
         DROP  R9
         USING MDBT,R9                 DSECT FOR MDB TEXT LINE
         LAE   R8,LOGBUFFR             LOCAL AREA FOR MESSAGE PRINT
         MVI   LOGBUFFR,C' '           CLEAR LINE
         MVC   LOGBUFFR+1(120),LOGBUFFR
         MVC   HEADER2(44),SAVEDSN
ULOG     EQU   *
         SAC   512                     SET AR ADDRESSING MODE.
         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS
         LH    R1,MDBTLEN              LENGTH OF TEXT LINE
         BCTR  R1,0                    (-1)
         EX    R1,TXT2BUFR
**EX     MVC   00(00,R8),11(R9)        MOVE MDB TEXT (VAR) -> IO BUFFER
         CLC   0(7,R8),GOODMSG         I.E. ARC1000I
         BE    SUCCESS
         AP    FAILURES,=P'1'
SUCCESS  EQU   *
         CLI   DEBUG,X'80'
         BNE   NODBG1
*(LONG DISTANCE)
         LH    R2,MDBTLEN              TEXT LENGTH
         BCTR  R2,0                    (-1)
         LAE   R10,0(R2,R9)            DUMP ENTIRE MDB
         STM   R9,R10,SNAPLIST         START-ADDR,END-ADDR,MDBSTOKEN
         OI    SNAPLIST+4,X'80'        VL BIT
         STAM  R9,R9,MDBALET           STORE R9'S ALET
         ALESERV EXTRACT,ALET=MDBALET,STOKEN=MDBSTOKN    GIVE ALET, GET
         LAE   R1,0(0,0)               FORCE R1/AR TO 0, SNAPX DOESNT
         SNAPX DCB=SNAPDD,PDATA=REGS,DSPSTOR=SNAPLIST,ID=1
*(LOCAL)
         LAE   R1,0(0,0)               FORCE R1/AR TO 0, SNAPX DOESNT
         SNAP  DCB=SNAPDD,PDATA=REGS,STORAGE=(SMAP,SMAPEND),ID=2
         PRINT ON,NOGEN
NODBG1   EQU   *
         SAC   0                       SET PRIMARY ADDRESSING MODE.
         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS
         PUT   PUTLINE,HEADER#         WRITE VB LOG RECORD (NON-AR)
         PUT   PUTLINE,LOGBUFF#        WRITE VB LOG RECORD (NON-AR)
         SAC   512                     SET AR ADDRESSING MODE.
         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS
         LH    R3,MDBTLEN              +TEXT LINE LENGTH
         LA    R9,0(R3,R9)             -> NEXT TEXT ENTRY
         SR    R2,R3                   REDUCE TOTAL MDB LENGTH
         BP    ULOG                    REMAINING LEN. > 0 -> ULOG LOOP
ULOGEND  EQU   *                       END LOOP, BACK TO PRIMARY MODE
*
         SAC   0                       SET PRIMARY ADDRESSING MODE.
         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS
         L     R10,SAVE10              LOAD STACKEM RETURN ADDRESS.
         BR    R10
*
TXT2BUFR MVC   00(00,R8),11(R9)        MOVE MDB TEXT (VAR) -> IO BUFFER
*
*
         EJECT
***********************************************************************
*************************  MGCRE EXEC FORM  ***************************
***********************************************************************
*
MGCREE   EQU   *                       MVS COMMAND PROCESSOR ROUTINE.
*
         ST    R10,SAVE10              SAVE MGCREE RETURN ADDRESS.
*
         MVC   MDATA2(44),SAVEDSN      FROM DFDSS SYSPRINT
         MODESET KEY=ZERO,MODE=SUP
         LA    R0,0(0,0)               REQUIRED
         MGCRE TEXT=MTEXTP,CONSNAME=CONLOG,MF=(E,MGCREL)
         MODESET KEY=NZERO,MODE=PROB
         AP    COMMANDS,=P'1'          COUNT COMMANDS ISSUED
*
         L     R10,SAVE10              LOAD MGCREE RETURN ADDRESS.
         BR    R10
*
***********************************************************************
*************************  MGCRE LIST FORM  ***************************
***********************************************************************
*
*
MGCREL   MGCRE MF=L
*
*
         EJECT
***********************************************************************
**********************   MCS CONSOLE OPEN   ***************************
***********************************************************************
*
MCSOPA   EQU   *                       CONSOLE ACTIVATION   ROUTINE.
*
         ST    R10,SAVE10              SAVE MCSOPA RETURN ADDRESS.
*
         LA    R1,MCSOPERA
         USING MCSOPPRM,R1
         OI    MCSOAUTH,MCSOAALL        GIVE CONSOLE COMMAND AUTH.
         MODESET KEY=ZERO,MODE=SUP
         MCSOPER REQUEST=ACTIVATE,NAME=CONLOG,CONSID=CONID,            +
               OPERPARM=MCSOPERA,MCSCSA=MCSSTAT,MCSCSAA=MCSALET,       +
               RTNCODE=MCSCODE,RSNCODE=MCSRC,MSGECB=MCSECB,            +
               TERMNAME=MCSTNAM
         MODESET KEY=NZERO,MODE=PROB
*
         L     R10,SAVE10              LOAD MCSOPA RETURN ADDRESS.
         BR    R10
         EJECT
***********************************************************************
**********************   MCS CONSOLE GET    ***************************
***********************************************************************
*
MCSGET   EQU   *                       CONSOLE MESSAGE GET  ROUTINE.
*
         ST    R10,SAVE10              SAVE MCSGET RETURN ADDRESS.
*
         MODESET KEY=ZERO,MODE=SUP     SVC 107 - NOT IN AR MODE
         SAC   512                     AR REQUIRED FOR MCS GET MACRO
         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS
         MCSOPMSG REQUEST=GETMSG,CONSID=CONID,MF=(E,MCSGL,COMPLETE)
         ST    R1,MDBSAVE              SAVE MDB POINTER.
         LAE   R9,0(,R1)               LOAD CONSOLE ADDRSP. ALET
*        USING IEAVM105,R9             ACTUALLY USED IN PRNTLOG
*
         SAC   0                       AR NO LONGER REQUIRED
         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS
         MODESET KEY=NZERO,MODE=PROB
*
         L     R10,SAVE10              LOAD MCSGET RETURN ADDRESS.
         BR    R10
*
***********************************************************************
*******************   MCS CONSOLE LIST FORM   *************************
***********************************************************************
*
MCSGL    MCSOPMSG MF=(L,MCSDATA)
*
         EJECT
***********************************************************************
**********************   MCS CONSOLE CLOSE  ***************************
***********************************************************************
*
MCSOPD   EQU   *                       CONSOLE DEACTIVATION ROUTINE.
*
         ST    R10,SAVE10              SAVE MCSOPD RETURN ADDR.
*
         MODESET KEY=ZERO,MODE=SUP
         MCSOPER REQUEST=DEACTIVATE,CONSID=CONID
         MODESET KEY=NZERO,MODE=PROB
*
         L     R10,SAVE10              LOAD MCSOPD RETURN ADDR.
         BR    R10
         EJECT
***********************************************************************
*                                (WAIT)                               *
* MCSWAIT                                                             *
*                            (LINK = R10)                             *
***********************************************************************
*
*
MCSWAIT  EQU  *                        ISSUE OPERATOR COMMANDS.
*
         ST   R10,SAVE10               SAVE MGCR RETURN ADDRESS.
*
         WAIT ECB=MCSECB               FROM MCSOPEN
         XC   MCSECB,MCSECB            CLEAR AFTER POST
*
         L    R10,SAVE10
         BR   R10
         EJECT
***********************************************************************
*                                (SNAPINIT)                           *
* SNAPINIT                                                            *
*                            (LINK = R10)                             *
***********************************************************************
         ST     R10,SAVE10
SNAPINIT NOP    SNAPTERM
         OPEN   (SNAPDD,OUTPUT),MODE=31
         MVI    SNAPINIT+1,X'F0'
         B      SNAPTERM
SNAPDD   DCB   DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,             X
               LRECL=125,BLKSIZE=882,DCBE=SNAPXX
SNAPXX   DCBE  RMODE31=BUFF
SNAPTERM EQU   *
         L     R1,SAVE10
         BR    R10
         EJECT
***********************************************************************
************************  DATA AREAS  *********************************
***********************************************************************
         DS    0D
SMAP     EQU   *
BLANKS   DC    CL26' '
CONID    DC    CL4' '
CONLOG   DC    CL8'MIGRATOR'
CARD     DS    CL80
DEBUG    DC    X'00'                   X'80' TO SWITH DEBUG ON
EOF      DC    X'00'
GOODMSG  DC    CL7'ARC1000'
         CNOP  0,4
HEADER#  DC    AL2(125),AL2(0)         RDW
HEADER1  DC    CL21'MIGRATE ISSUED FOR: (' MESSAGE IO AREA (121 CHAR)
HEADER2  DC    CL100' '                MESSAGE IO AREA (121 CHAR)
COMMANDS DC    PL8'0'
FAILURES DC    PL8'0'
         CNOP  0,4
LOGBUFF# DC    AL2(125),AL2(0)         RDW
LOGBUFFR DC    CL121' '                MESSAGE IO AREA (121 CHAR)
MCSALET  DS    F                       MCS A-LET?
MCSAREA  DS    CL40                    MCS PARAMETER AREA?
MCSCODE  DS    F                       MCS RETURN_CODE.
MCSECB   DC    F'0'                    MCS WAIT/POST ECB.
MCSRC    DS    F                       MCS REASON_CODE.
MCSSTAT  DS    CL8                     MCS STATUS AREA?
MCSTNAM  DC    CL8'MIGRATOR'           MCS TERMINAL NAME?
MDATA0   DC    AL2(MDATA99-MDATA0-2)   LENGTH
MDATA1   DC    CL23'F DFHSM,MIGRATE DSNAME('   MIGRATE COMMAND
MDATA2   DC    CL45' '                 NEEDS TRAILING PAREN.
MDATA99  DS    0H                      ALIGN FOR MDBHLEN#
MDBHLEN# DC    AL2(MDBHLEN)
MDBSAVE  DS    F                       MDB POINTER SAVEAREA.
MTEXTP   DC    A(MDATA0)
SAVE     DS    18F                     HOUSEKEEPING SAVE AREA
SAVEDSN  DS    CL44
SAVE10   DS    F
         CNOP  0,4
SUMMARY# DC    AL2(125),AL2(0)         RDW
SUMMARY1 DC    CL18'COMMAND SUMMARY:  ' MESSAGE IO AREA (121 CHAR)
SUMMARY2 DC    CL07'ISSUED '            MESSAGE IO AREA (121 CHAR)
SUMMARY3 DC    XL16'21202020202020202020202020202020'
SUMMARY4 DC    CL07'FAILED '            MESSAGE IO AREA (121 CHAR)
SUMMARY5 DC    XL16'21202020202020202020202020202020'
TRTABL   DC    256X'00'
         ORG   TRTABL+X'40'            TO FIND FIRST BLANK
         DC    X'40'                   REPLACE W/APOSTROPHE
         ORG
WTOK     DC    F'11'                   WTO DELETE TOKEN FOR DOM
OPENSW   DC    X'0'
         DS    0D
SNAPLIST DS    A(0),A(0),0D            ATART-ADDR,END-ADDR,STOKEN
MDBSTOKN DS    D
MDBALET  DS    F
SMAPEND  EQU   *
MCSOPERA DC    44X'00'
         PRINT ON,NOGEN
CARDIN   DCB   DDNAME=CARDIN,EODAD=ENDFILE,MACRF=(GM),DSORG=PS
PUTLINE  DCB   DDNAME=PUTLINE,MACRF=(PM),DSORG=PS,RECFM=VB,LRECL=252,  C
               BLKSIZE=256,DCBE=PUTLINEX
PUTLINEX DCBE  RMODE31=BUFF
         LTORG
***********************************************************************
************************  DSECT ZONE  *********************************
***********************************************************************
         PRINT OFF,NOGEN               ON,GEN
IEZMGCR  DSECT
         IEZMGCR
IEAVM105 DSECT
         IEAVM105
         PRINT OFF,NOGEN               ON,GEN
UCB      DSECT
         IEFUCBOB
         PRINT OFF,NOGEN
         IEZVG111
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
