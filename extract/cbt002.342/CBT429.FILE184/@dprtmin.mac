/**************************** REXX **********************************/
/*                                                                  */
/*      This REXX EXEC will retrieve address space JOBNAME/STCNAME  */
/*      ASID and DISPATCHING PRIORITY by specifying an ASCB or      */
/*      being invoked from @DPRTMAJ.                                */
/*                                                                  */
/*      Keyword operands     ASCB address                           */
/*                                                                  */
/********************************************************************/

arg oneascb

/*******************************************************************/
/*    Check to see if we have a valid environment to run IPCS.     */
/*    Use REXX ADDRESS keyword to set a valid IPCS environment.    */
/*******************************************************************/

subcom ipcs
if rc \= 0 then
   do
     say '@DPRTMIN does not have a valid IPCS environment'
     exit
   end
else NOP


ADDRESS IPCS


if oneascb \= '' then
   do
    if right(oneascb,1) /= '.' then
             oneascb = oneascb××'.'
/*  x = OUTTRAP(mysym,1) */
    " EQUATE X " oneascb
    if rc = 12 then
       do
           say  'you entered an invalid ascb address of' oneascb
           exit
       end
/*  x = OUTTRAP(off) */
   end


if oneascb \= '' then
   do
    " NOTE '***************************************************' PAGE "
    " NOTE '*   @DPRTMIN: PERFORM ADDRESS SPACE CONTROL BLOCK *'      "
    " NOTE '*             LIST OF JOBNAME/STCNAME, ASID AND   *'      "
    " NOTE '*             DISPATCHING PRIORITY FOR A GIVEN    *'      "
    " NOTE '*             ASCB.                               *'      "
    " NOTE '***************************************************'      "
   end

/*******************************************************************/
/*    The @DPRTMAJ RUNCHAIN command passes each ASCB address to    */
/*    the @DPRTMIN rexx exec as IPCS symbols ASCB1, ASCB2, ASCB3,  */
/*    etc.                                                         */
/*                                                                 */
/*    The EVALSYM command will check for the RUNCHAIN CHAIN(999)   */
/*    default limit and place the passed IPCS address symbol       */
/*    into a rexx symbol.                                          */
/*                                                                 */
/*    If @DPRTMIN was executed alone, then the rexx ascb value     */
/*    is set via the oneascb rexx argument.                        */
/*                                                                 */
/*******************************************************************/


if oneascb = '' then
   do
      " EVALSYM LE ASCB999 REXX(ADDRESS(ASCB))"
   end
else ascb = oneascb


/*******************************************************************/
/*    Determine if supplied ASCB or current ASCB is to be used.    */
/*                                                                 */
/*    Perform IPCS EQUATE to get our rexx variable back into the   */
/*    IPCS symbol.                                                 */
/*                                                                 */
/*    Make sure we properly equate the ascb value XXXXXX. and      */
/*    allow the user to specify the ending period (or not).        */
/*******************************************************************/



    if right(ascb,1) /= '.' then
             ascb = ascb××'.'
    " EQUATE ASCB " ascb


/*******************************************************************/
/*    Save the current ASCB information in rexx variables for      */
/*    a later note command.                                        */
/*                                                                 */
/*    For our asid and dispatching priority values, get the        */
/*    decimal and hexadecimal values of each for display.          */
/*                                                                 */
/*    Generate the report.                                         */
/*******************************************************************/


 " EVALUATE ASCB+25 LENGTH(1) REXX(STORAGE(ASIDX)) "
   if rc > 0 then
      do
        say 'EVALUATE for ASID return code is' rc
        exit
      end
   else NOP

/*******************************************************************/
/*    Right-align the decimal and hexadecimal asid value           */
/*    for the report.                                              */
/*******************************************************************/

 asid = x2d(asidx)
 do while length(asid) < 3
    asid = ' '××asid
    end
 do while length(asidx) < 2
    asidx = ' '××asidx
    end
 asidx = '('××asidx××')'


 " EVALUATE ASCB+2B LENGTH(1) REXX(STORAGE(DPRTYX)) "
   if rc > 0 then
      do
        say 'EVALUATE for DPRTY return code is' rc
        exit
      end
   else NOP

/*******************************************************************/
/*    Right-align the decimal and hexadecimal dprty value          */
/*    for the report.                                              */
/*******************************************************************/

 dprty = x2d(dprtyx)
 do while length(dprty) < 3
    dprty = ' '××dprty
    end
 do while length(dprtyx) < 2
    dprtyx = ' '××dprtyx
    end
 dprtyx = '('××dprtyx××')'

/*******************************************************************/
/*    Check each ASCB for a jobname field (if present) and         */
/*    a started-task name field (if present).                      */
/*******************************************************************/

 " EVALUATE ASCB+AC? LENGTH(8) CHARACTER REXX(STORAGE(JOBNAME)) "
   if rc > 0 then
      do
        say 'EVALUATE for ASCB JOBNAME return code is' rc
        exit
      end
   else NOP

 " COMPARE ADDRESS(ASCB+AC) LE(4) WITH(VALUE(X'00000000')) "
   if rc = 0 then
   do
       jobname = 'N/A'
   end


 " EVALUATE ASCB+B0? LENGTH(8) CHARACTER REXX(STORAGE(STCNAME)) "
   if rc > 0 then
      do
        say 'EVALUATE for ASCB STCNAME return code is' rc
        exit
      end
   else NOP

 " COMPARE ADDRESS(ASCB+B0) LE(4) WITH(VALUE(X'00000000')) "
   if rc = 0 then
   do
       stcname = 'N/A'
   end

/*******************************************************************/
/*    ATTENTION: I TURN OFF TRACE DUE TO THE FACT THAT IPCS        */
/*               PERFORMS THE SCREEN DISPLAY BEFORE THE @DPRTMAJ   */
/*               RUNCHAIN HAS COMPLETED.  THIS WILL AVOID          */
/*               MANY NASTY REXX MESSAGES AND NEGATIVE RETURN      */
/*               CODES.                                            */
/*******************************************************************/

 trace off

 " NOTE '                                                        ' "
 " NOTE '  STARTED TASK/TSO LOGON          ===> "STCNAME"        ' "
 " NOTE '  BATCH INITIATED PROGRAM         ===> "JOBNAME"        ' "
 " NOTE '  ASID VALUE (DEC/HEX)            ===> "ASID" "ASIDX"   ' "
 " NOTE '  DISPATCHING PRIORITY (DEC/HEX)  ===> "DPRTY" "DPRTYX" ' "
 " NOTE '                                                        ' "


