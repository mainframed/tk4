The Weird and Wonderful World of Pointer Manipulation

The two callable routines SETPTRTO and SETPTRBY, demonstrate how, once
POINTER is introduced to COBOL, no matter how limited, it is possible
to establish addressing to one's own WORKING-STORAGE and to directly
manipulate pointers without resorting to Assembler at all.  These
routines are self documented.  This text contains excerpts of an
article I have written and explain how they might be used.

SETPTRTO was adapted, with changes from the IBM's GETADDRESS function,
as described in the publication: VS COBOL II, APPLICATION PROGRAMMING
GUIDE.  The purpose of this general routine, which is coded in COBOL,
is to set the pointer POINTER-TO to the address of the object
POINTED-OBJECT.  Since we do not touch the latter, its type is
insignificant, and is reduced, internally, to the minimum, PIC X.

The purpose of SETPTRBY is to set the pointer POINTER-TO, up or down
(according to the value's sign), by some value BY-VALUE.  The idea is
to use INDEX in order to travel on the object and then to
SET ADDRESS OF a subscripted item to the pointer.  This idea uses a
fact, simply understood by any C programmer, that indexes and pointers
are really the same entity.  Note that this program must be compiled
with the NOSSRANGE compile option (or the equivalent in your compiler)
to ensure no compile or run time boundary checking.

One may imagine some useful applications for pointer manipulation.  The
most elegant use I've found for pointer manipulation is to overcome
another limitation of COBOL.  There is no provision in COBOL to
directly manipulate variable length character strings.  The UNSTRING
statement may begin its process anywhere on the character string but
the total length of that string must be known to the UNSTRING at
compile time.  But if we could cheat and tell COBOL at run time that
the string begins somewhere else, we could, in effect, manipulate
variable length strings.

:
000400  DATA DIVISION.
000600  WORKING-STORAGE SECTION.
000610  01  LENGTH-OF-CURRENT-STRING      PIC 9(4) COMP.
000620  01  MAX-LENGTH-OF-STRING          PIC 9(4) COMP VALUE 254.
000700  01  WS-STRING                     PIC X(254) VALUE
000710      'ABC@DEF@GHI@JKLMNOP'.
000900  01  FILLER.
001000      05 WS-VALUE                      PIC S9(9) COMP.
001100      05 WS-PTR                        USAGE POINTER.
001120      05 WS-TALLY                      PIC S9(4) COMP.
001130      05 WS-LEN-9                      PIC 9(4) COMP.
001140      05 WS-POINT                      PIC 9(4) COMP.
001150      05 WS-TOKENS OCCURS 8 INDEXED BY IX-TOKEN.
001160         10 WS-TOKEN                   PIC X(30).
001170         10 WS-DELM                    PIC X.
001180         10 WS-CNT                     PIC S9(4) COMP.
001200  LINKAGE SECTION.
001210  01  LS-STRING                     PIC X(254).
001400  PROCEDURE DIVISION.
:
005200       COMPUTE WS-VALUE = LENGTH-OF-CURRENT-STRING -
005210                          MAX-LENGTH-OF-STRING
005400       CALL 'SETPTRTO' USING WS-PTR WS-STRING
005410       CALL 'SETPTRBY' USING WS-PTR WS-VALUE
005500       SET ADDRESS OF LS-STRING TO WS-PTR.
005600       COMPUTE WS-POINT = MAX-LENGTH-OF-STRING - WS-VALUE + 1.
005700       MOVE ZERO TO WS-TALLY.
005800       UNSTRING  LS-STRING
005900            DELIMITED BY '@' OR '$' OR ALL X'00'
006000            INTO WS-TOKEN (1) DELIMITER WS-DELM (1) COUNT WS-CNT(1
006100                 WS-TOKEN (2) DELIMITER WS-DELM (2) COUNT WS-CNT(2
				:
006700                 WS-TOKEN (8) DELIMITER WS-DELM (8) COUNT WS-CNT(8
006800            WITH POINTER WS-POINT
006900            TALLYING WS-TALLY
007000       END-UNSTRING
	:

One comment regarding pointers, strong type checking and the need to
separate the type from its implementation. Even though portability is
not a main concern in the Mainframe and COBOL world and we know how
pointers are implemented in that world, it is recommended not to
assume that knowledge.  Do not assume that the pointer is implemented
as a binary number or in any known way.  Keep it as a pointer only,
never REDEFINE it and never directly manipulate it as a number.  The
reason for that is that platforms and implementations change.  It
happened once on the mainframe when IBM moved from 24 bits addresses
to 31 bits.  Most of us were affected by that move and vividly
remember the problems that arose out of that move, even in a pure COBOL
environment.  Now if a program relates to a pointer as a signed binary
number (basically, a 32 bit signed integer), it will be rendered
incompatible as soon as the mainframe moves to 64 bits addresses.
Such a move may occur in our lifetime.
