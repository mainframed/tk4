
        REVIEW - ADVANCED TOPICS  (UNDOCUMENTED DETAILS)
        ======   ======== ======   ------------ -------

  0)    CONTENTS
        --------
        1)    MEMBER LIST DISPLAY
        2)    "FASTPATH"
        3)    VSAM
        4)    DATA OPERAND
        5)    VOLUME SERIAL
        6)    "DATA-IN-VIRTUAL"
        7)    ONLINE HELP
        8)    INTERFACING TO THE "PDS" COMMAND
        9)    OFFLOAD FACILITY
       10)    PERFORMANCE
       11)    SMF DATA DISPLAY
       12)    SELECTING DATA DISPLAY COLOUR
       13)    USER PROFILE
       14)    RECURSION
       15)    I/O ERRORS AND DIAGNOSIS
       16)    SUBSYSTEM DATA SETS


  1)    MEMBER LIST DISPLAY
        ------ ---- -------
        PF5 - DISPLAY READ DIRECTORY BLOCKS COUNT
              This will equal the number of used directory blocks
              if reading was allowed to complete (ie. was not
              interrupted), although QSAM may have pre-fetched unused
              blocks that were not needed by program logic.
        PF12- SORT BY VV.MM/SSI
              I was just curious as to IBM's SSI sequencing.
        LOCATING MEMBERS
           By default, members will be in collating sequence order and
        location is based on matching the input string to member names.
        If no exact match is found then the last member that collates
        before the input string is placed at the top of the display.
           When members are not in name collating sequence and an exact
        match is found then this member is placed at the top of the
        display.  An error message is shown when no exact match is
        found unless the members are in "SPFD" TSO userid order in
        which case the input string is used to locate a TSO userid
        rather than a member name.
           PLEASE NOTE that when a concatenated PDS file is being
        REVIEWed an EXACT member name match is not valid for LOCATE
        string input for concatenated members.  That is, when members
        are not in the default sort order, user-typed locate strings
        CANNOT locate any members other than those from the first
        PDS in the concatenation.  Naturally, scrolling can still be
        used for locating any member.
           ALSO NOTE that when a given member name is selected for
        REVIEWing in a concatenated PDS which occurs in more than one
        PDS of the concatenation, the first occurrence of that member
        will ALWAYS be selected.  This is not true, however, for the
        E and B selection codes, where the specifically selected
        occurrence of that member will be processed.
           Be aware that sorting member lists with thousands and
        thousands of members can take appreciable amounts of time,
        and that REVIEW automatically sorts concatenated member lists
        into name collating sequence.  A 'REV ISPPLIB F' took about
        100 seconds on my system, although REVSORTE processing has now
        reduced this to about 40 seconds (about 12000 members in 16
        PDSs on a very lightly loaded 3090-180S).
        PERFORMANCE
           Remember, if you want to leave REVIEW completely just don't
        PF3 back to the member list and PF3 again; use EXIT or =X and
        get faster response.  Similarly, be ready to use the MEM command
        to directly go to the next member you wish to examine, rather
        than unnecessarily going via the member list.
        DIRECTORY I/O
           REVIEW uses QSAM to GET a directory block, processes the
        logical data contained in the block, and if necessary GETs the
        next block.  ISPF considers a member name of X'FFFFFFFFFFFFFFF'
        to denote the end of the directory, while strictly speaking
        a null TTRC is also required to end the directory.  (Hence,
        any 8-byte bit pattern including high values is a valid member
        name.)  So, if the 2 bytes following the 8 bytes of high values
        are not null, REVIEW will display the high values as a member
        name and continue reading directory blocks, probably until
        end-of-file depending upon residual data.  The valid members of
        the PDS should still be processable in the usual way.  Member
        name bit patterns make no difference to the ability to REVIEW or
        BROWSE a member, but an ISPF ERROR 20 message wil result upon
        attempting to EDIT a member with an "invalid" name.
        =EDITMEM
           This member list command allows the user to specify the
        member to be EDITed, even if it does not already exist.  A
        "valid" member name must be specified to avoid the ISPF ERROR 20
        message.  For concatenated files, only the first data set in the
        concatenation will be edited with this method.

  2)    "FASTPATH"
         --------
           I think this feature is adequately documented in the program
        source comments.  Just be aware that if your DASD has different
        geometry to the types catered for then you will have to add
        your own code to exploit this feature.  If your DASD is of the
        "fixed overhead" type then just add another row of constants
        into the table and another test to use it.  If your DASD is of
        the "modulo" type then you will also have to provide a bit more
        logic.  Most disk types from 2305-1 to 3390 have "FASTPATH"
        support.  "FASTPATH" does not support multi-volume disk files.
           Issuing a 'NEWTOP' subcommand disables "FASTPATH" for the
        remainder of the REVIEW session.  So, if you forgot to specify
        the DATA operand when you meant to for a sequential file, you
        can just enter 'NEWTOP' once inside REVIEW for the same effect.
×          Due to user complaints of unpredictable behaviour (by REVIEW,
×       that is) "FASTPATH" will not be activiated when RECFM=FB unless
×       the VTOC indicates more than 256 tracks of data.  This means
×       that for "small" files rigourous file handling methods will be
×       observed without too much overhead, while "large" file handling
×       should still offer fast response to requests such as 'DOWN MAX'
×       and 'LOC 375000'.  This policy change does not affect handling
×       of unblocked files such as the (TMS) TMC, the (TLMS) VMF and
×       SYS1.BRODCAST.


  3)    VSAM
        ----
           The latest release of REVIEW now handles IMBEDded sequence
        set records correctly (ie. ignores them) no matter what the
        record length.  If a DATA component with IMBED is being read,
        then data from the first track of each CONTROLAREA is discarded.
        When a record is read from such a track, REVIEW immediately
        tries to read the first record of the next track.  REVIEW
        determines the number of tracks in a CONTROLAREA from the VVDS
        look-up.  (Watch out for pre-ICF VSAM files.)
           DFP now allows physical blocks larger than 4096 bytes for
        VSAM even though THE VTOC WILL ALWAYS INDICATE 4K BLOCKS.
        REVIEW will use the block size obtained from the VVDS if it is
        larger than 4K, 4K (as merged from the VTOC) if it is smaller,
        or 32760 if not known.  During VVDS look-up DCBBLKSI is 4096
        (again, as merged from the VTOC).
           APF authorization or supervisor state is required for DCB
×       access to VSAM under DFP Version 3.  REVIEW checks for DFP
×       Version 3 or later and will not attempt to OPEN a DCB to VSAM
        unless in an APF environment.  See 15JAN91 change log entry
        for the exact checking sequence.
           The 'REVVSAM' alias is supplied so that an APF authorized
        REVIEW command can be registered under TSO without APFing the
        standard 'REV' and 'REVIEW' command names.  'REV' and 'REVIEW'
        should NOT be APF authorized.  When APF authorized, TSO command
        error recovery is reduced and ISPF facilities are not available.
           REVIEW can only process data sets with VTOC entries.  Access
        to VSAM not via the catalog (ie. with the VOL operand) may not
        be a particularly smooth road to follow depending upon OS and
        DFP releases.  Data sets with more than sixteen extents cannot
×       be REVIEWed with a non-VSAM access method unless they are PDSEs.
×          With REVIEW Release 13 and later, if REVIEW accepts a VSAM
×       cluster name that is also not a component name as a valid
×       data set to REVIEW, then the VSAM access method is used.  In
×       this event, the number of extents is not an issue for functional
×       considerations, and for key-sequenced data sets (KSDSs) data
×       is presented in key sequence rather than physical sequence,
×       as long as the 'DATA' operand is omitted.
×          (When REVVSAMing a VSAM component with a VTOC entry, data
×       is always presented in physical order.)

  4)    DATA OPERAND
        ---- -------
×          Just to reiterate, this operand has four functions:
        a) suppress "fastpath" for fixed-length record non-PDS files;
        b) display physical PDS directory blocks rather than a member
           list;
        c) display physical VSAM component blocks (and skip VVDS
           look-up) rather than attempting to interpret logical
           control-intervals;
×       d) display VSAM KSDS records in RBA (ie. physical) order
×          rather than key order.
        The DATA keyword is essential for correct processing of fixed-
        length record multi-volume disk sequential files, even if all
        disks are the same device type.

  5)    VOLUME SERIAL
        ------ ------
           When REVIEWing a PDS the volume serial number is displayed
        in the top right-hand corner so you can be SURE which system's
        SYS1.PARMLIB you are looking at.  REVIEW passes this volume
        serial number to EDIT or BROWSE so that ISPF (or PFD (yes, or
        PDF)) does not do a catalog look-up and must process the same
        PDS you are REVIEWing.  A potential problem exists when using
        REVIEW as a front-end to ISPF EDIT with RECOVERY ON.  The EDIT
        BACKUP data set will contain the volume serial number specified
        by REVIEW.  At RECOVERY time this volume will be searched for
        the file being edited rather than the catalog, which is not a
        problem unless the data set has been migrated to a different
        volume.  The solution is to 1) move the data set back to the
        original volume -OR- 2) update the EDIT recovery file with the
        new volume serial number.  (In other words, ISPF EDIT behaves
        as if the VOLUME SERIAL was specified on the EDIT entry panel.)
           If the file is not a PDS the volume serial number is shown
        on the heading line.  To be exact, this is the current volume
        serial on the first unit of the data set, so for disk files it
        may not be a true indication of which disk of a multi-volume
        data set you are currently REVIEWing.  For tape data sets
        whose volumes are being mounted serially on a single tape
        drive, the volume serial number will be accurate.
           Note that you can never scroll up to a previous volume under
        REVIEW.  To accomplish this you must exit REVIEW and re-invoke
        it.  If you are doing numerous scrolls-up you should consider
        issuing a NEWTOP command whenever REVIEW reaches a new volume.
        This will clear irrelevant checkpoint information about previous
        volumes and prevent extent errors.  Of course, line numbers
        would then be relative to the current volume.  NEWTOP and TOP
        may cause problems on the non-first volume of a spanned record
        file, so you must NEWTOP to a block that starts with the start
        of a logical record.  (eg. 'NEWTOP 1'; 'NEWTOP 2'; etc. until
        successful file access is re-established.)  Remember that the
        optional NEWTOP operand is a HEXADECIMAL number.  For large
        tape files if you have a block number (from SMF type 21 maybe)
        of the start of the area you wish to examine, then shove it into
        NEWTOP rather than scrolling down or using LIST and you will get
        there a lot faster.

  6)    "DATA-IN-VIRTUAL"
         ---- -- -------
           Just be aware that large region high-water-marks may be
        reported by SMF in XA systems.  Recursive REVIEWs of PDSs may
        cause the extended region to be exhausted whereupon GETMAIN
        will return an area below the line.  When this happens, the
        below-the-line area is freed and "DIV" is disabled for that
×       particular REVIEW session (although up to 6MB may have been
        added to the SMF region-used high-water-mark).  "Data-in-virual"
        invocation is only attempted when REVIEWing PDSs on 31-bit
        capable systems (ie. bit 0 of CVTDCB is 1).

  7)    ONLINE HELP
        ------ ----
           Builtin online HELP in REVIEW is limited to displaying
        current PFK assignments, although access to online HELP is
        fairly extensive, if you get the distinction.  No HELP is
        available from the member selection list.
           REVIEW can call the system HELP command to provide details
        about REVIEW subcommands.  Access to this is via the 'HELP'
        subcommand of REVIEW.  You will note, however, that the default
        value of PF1 is 'HEL' and not 'HELP'.  The 'HEL' subcommand of
        REVIEW will use the HEL command (from the CBT tape) to provide
        fullscreen HELP (as opposed to the line-mode HELP given by the
        system HELP command) if available.  If HEL is not installed on
        your system then 'HEL' will invoke the system supplied HELP
        command.  I would recommend that you install HEL on your system.
           The 'KEYS' and '?' subcommands cause the PFK assignments to
        be displayed.  So does 'HEL' and 'HELP' if entered without any
        operands.  If 'HEL' or 'HELP' is entered with any operands or
        while the PFK assignments are displayed then the HEL or HELP
        (as appropriate) TSO command will be invoked.
           Assuming you have not reassigned PF1, hitting PF1 once will
        cause the current PFK assignments to be displayed.  If the next
        input is also PF1 then HEL (if available, or HELP if HEL is not
        available) will be called to display a list of subcommands.
           Now that 24 PFKs are supported, most screens will require
        two pages of data to display all 24 PFK values.  So, after
        entering '?' or 'KEYS' you will get the first page displayed.
        If you enter any REVIEW subcommand at this stage it will be
        acted upon just as if you had entered it while file data was
        being shown.  To get the second page of PFK assignments just
        hit enter again.  Hitting enter yet again will restore the
        file data display.  Do not issue the END command (or PFK)
        unless you want to leave the file or member.  Model-4 screens
        (43 by 80) only need one page to show all 24 PFK values.
           The message
           USE 'HEL' COMMAND OR PF-KEY FOR FULL-SCREEN TSO HELP
        is shown on the PFK assignment page(s) simply to indicate that
        HEL is (or at least seems to be) installed on your system and is
        available for use.  The REVIEW release number is also shown in
        parentheses on the PFK assignment page(s) in the top right-hand
        corner under the ruler line.

  8)    INTERFACING TO THE "PDS" COMMAND
        ----------- -- --- ----- -------
           REVIEW is also a subcommand of PDS and allows PDS to supply
        a non-ISPF fullscreen browse capabilty.  Under PDS it easy to
        process a large group of members with a single command.  Such a
        process could be EDIT, BROWSE or REVIEW.  With a large member
        group being processed it is quite likely that the user would
        want to terminate the process early rather than hitting PF3
        several hundred times.  Early member group process termination
        is invoked by the TSO ATTENTION INTERRUPT facility.
           REVIEW has a couple of advantages over ISPF BROWSE.  It can
        process VBS, VSAM and tape files, it can break-out and format
        SMF data, and if a FIND or DOWN MAX command is taking too long
        the user can hit PA1/ATTN.  With ISPF BROWSE this rash action
        will terminate the whole BROWSE session so that the user has to
        re-select BROWSE, type in the data set name again and resume
        processing.  Hitting PA1/ATTN under REVIEW causes REVIEW to
        stop where it is and give the user an opportunity to input a
        new command (or even the same command but back in performance
        period 1).  To accomplish this REVIEW issues a STAX macro to
        trap these TSO interrupts.
           Attention interrupts trapped by REVIEW are not detected by
        PDS so PDS cannot terminate member group processing.  For this
        reason when a PDS member is being REVIEWed under "PDS" REVIEW
        will disable its attention trap when input is not inhibited.
        Note that this attention trap disabling is not performed when
        processing a non-PDS (since member group processing cannot be
        active) and is not performed during REVIEW's member selection
        list processing.  When a REVIEW subcommand is entered the
        attention trap will be re-enabled so that the user can still
        stop scrolling and searching without upsetting the general flow
        of PDS processing.  (Note that while in the REVIEW member
        selection list PA1/ATTN can be used to stop directory entry
        reading and sorting and member OFFLOADing.)
           REVIEW will only check for "PDS" subcommand status when
        processing a partitioned data set.  REVIEW will then consider
        itself a PDS subcommand IF THE TOP REQUEST BLOCK OF THE
        ORIGINATING TASK OF REVIEW'S TASK HAS A PROGRAM NAME BEGINNING
        WITH 'PDS'.  Hence, if your PDS command is not called something
        with 'PDS' as the first three characters then REVIEW will not
        disable its attention trap at the appropriate juncture unless
        you change your copy of REVIEW.
           Experienced PDS users will no doubt be aware that all members
        can be specified on PDS subcommands with a single colon ':'.
        This usually indicates that all members are to be processed by
        the subcommand in turn.  In special cases, such as ISPF EDIT and
        BROWSE, the colon indicates that the entire partitioned data set
        is to be processed with one invocation of the subcommand.  For
        these ISPF functions this means that the user is presented with
        the ISPF member selection list so that the user may specify any
        further desired processing without necessarily processing every
        member.  The members #PDSTBL and @PRINTO supplied in this file
        are simply the PDS 8.3 source members of the same names from
        CBT tape file 182 with minor alterations so that REVIEW and
        PRINTOFF also can have this "specify-whole-data-set-with-colon"
        facility.  These simple modifications should be easily fitted
×       to other releases of PDS if desired.  They can be fitted as
×       supplied without further change for PDS 8.4.
           The above discussion refers to when REVIEW is invoked as a
        PDS or PDS/E subcommand.  To support the ISPF functions of PDS
        or PDS/E when it is invoked from the REVIEW TSO subcommand
        REVIEW will examine the TSO command name.  If the TSO command
        name begins with the characters 'PDS' then REVIEW will suppress
        the automatic TSOEXEC in order to preserve any ISPF environment
        that may exist.

  9)    OFFLOAD FACILITY
        ------- --------
           I suppose that this was rather an odd function to tack into a
        full-screen interactive utility, and is, perhaps, a classic
        example ("terminal" case?) of "creeping featurism" where the
        investment of time and effort into creating a satisfactory user
        interface with appropriate error-handling facilities means that
        one is loathe to start a new program when the desired function
        can be added into an existing program which already has these
        facilities.  That is what has happened here.  REVIEW had the
        ability to read PDS members, while the entire member list with
        user-data was "in core", so it was just a matter of adding
        iterative logic to process each member.
           This facility is supposed to provide an offload-PDS-to-SDS
        function for any PDS for which offloading makes any sense.  The
        sequential file created by the OFFLOAD has IEBUPDTE-like control
        statements which, in theory, allow the complete reconstruction
        of the original partitioned data set.  I say IEBUPDTE-like
        because IEBUPDTE can only process an input control file of fixed
        length 80-byte records, while REVIEW's OFFLOAD can create
        fixed-length record files from 80 bytes per record to 32,760
        bytes per record, and variable-length record files with maximum
        logical record lengths ranging from 80 to 32,756.
           Between the TSO HELP and the comments at the start of the
        REVOFFLD CSECT, most of the technicalities are covered, but I
        will just go over the main points here again.
           Only fixed-length and variable-length record libraries can be
        unloaded.  LOAD LIBRARIES CANNOT BE UNLOADED.  OFFLOADed data is
        written using QSAM to the SYSUT2 file.  SYSUT2 must be allocated
        before any OFFLOAD activity can take place.  If you are in a
        REVIEW session which has had a lengthy sort take place and you
        do not want to exit to allocate SYSUT2, just select a member to
        REVIEW and use the TSO subcommand to issue the ALLOC command.
           The '=OFFLOAD' command, when entered in the LOCATE string
        input field of the member selection list, initiates the OFFLOAD
        process.  Members are OFFLOADed in member selection list order.
        First, SYSUT2 is OPENed.  Then the first './ ADD ' statement is
        written, followed by the appropriate member's data.  One logical
        record is written for each logical record OFFLOADed.  If the
        first two data bytes are './' then they are changed to '><' on
        output.  If the member list is in TTR order and the OFFLOADed
        member has one or more aliases, then appropriate './ ALIAS '
        statements are also generated.  This process is then repeated
        for all members which are selected for OFFLOADing.  Then a './
        ENDUP ' statement is written containing the time and date in the
        comment field.  Finally, SYSUT2 is closed before requesting the
        next input from the TSO terminal user.
           The generation of './ ALIAS ' statements occurs only when the
        member list is sorted into TTR order, and only when the alias's
        real member has been offloaded.  (TTR sort now always sorts
        aliases after their real members.)
           Reload information for directory entry user-data is limited
        to 4-byte SSI (System Status Information) and SPF (and PFD)
        statistics.  Any other sort of user-data is not OFFLOADed.  SSI
        data is preserved in the form of eight (8) hexadecimal digits
        following the IEBUPDTE-like 'SSI=' operand on the './ ADD '
        statement.  SPF statistics are placed in the './ ADD ' comment
        field and start in column 22 and can go to column 69, depending
        on the length of the last-change-userid.  (Note that while the
        user-data has room for a "userid" up to ten bytes long, ISPF
        checks that bytes 9 and 10 of this field are blank before
        treating the user-data as SPF statistics.)
           If the member list is sorted into member name collating
        sequence and a concatenated file is being OFFLOADed then only
        one occurrence (the first) of a given member name will be
        processed.  If not in name order, then every occurrence will
        trigger an OFFLOAD of the first occurrence of the same-named
        member.
           Members to be OFFLOADed are selected with the 'O' selection
        code.  (They are just flagged for OFFLOAD, they are not
        OFFLOADed until '=OFFLOAD' is entered.)  Such flagged members
        are displayed in high intensity or red for visual confirmation.
        If a member is mistakenly selected, it can be unflagged with the
        'R' (for RESET) selection code, whereupon it will revert to low
        intensity.  The 'O' and 'R' selection codes have no effect on
        aliases.  If no members are flagged for OFFLOAD at OFFLOAD time
        then ALL members are OFFLOADed.
           The OFFLOAD process can be interrupted with PA1/ATTN which
        forces OFFLOAD termination at the end of the current member.
        The character string '*INT*' will appear as a comment in the './
        ENDUP ' card.
           Having successfully unloaded your partitioned data set to a
        sequential data set, reloading it is your problem.  File 93 on
        the CBT tape has two pairs of batch utility programs which
        perform the OFFLOAD/RELOAD function.  They are OFFLOAD/PDSLOAD
        and UNUPDTE/UPDTE.
           Offloading
           ----------
           REVIEW's offload function is superior to OFFLOAD and UNUPDTE
        in that it supports both fixed and variable format (as does
        UNUPDTE), it supports all record sizes (OFFLOAD must be
        reassembled for each different record size), it supports aliases
        (if required), won't duplicate data pointed to by aliases on
        output, it makes IEBUPDTE loadable files for PDSs with fixed
        format and record sizes between 1 and 80 inclusive, it supports
        SPF statistics and SSI, it supports partial offload (as does
        OFFLOAD) without having to type in whole member names, and can
        offload concatenated files.  Its main drawback is that it MUST
        be driven interactively from a 3270 TSO terminal.  LISTPDS from
        CBT file 316 also has a fairly extensive OFFLOAD facility and
        can apparently handle RECFM=U.  LISTPDS is conventionally run
        as a BATCH utility.
           Reloading
           ---------
           There doesn't seem to be a comparably powerful reload utility
        around at this stage.  Your choice wouid seem to be between:
        a) IEBUPDTE - supports fixed length record files with record
                      sizes between 1 and 80 inclusive, supports SSI
                      user-data, and aliases.
        b) PDSLOAD  - supports fixed length record files with record
                      size between a-bit-less-than-80 and 256 inclusive
                      specified at assemble time, supports SSI and SPF
                      statistics, can make new SPF statistics (with a
                      suitable parameter), and can put the '><' back to
                      './' (with the right parameter).
        c) UPDTE    - supports fixed and variable length record files.
×          =SEQLOAD
×          --------
×          This command was added with Release 13.0.  It is almost
×       identical to '=OFFLOAD' except that the IEBUPDTE-like control
×       statements are not output.  In accordance with this, './'
×       character strings are not translated to '><'.  The purpose of
×       '=SEQLOAD' is to allow the copying of some or all members of a
×       PDS into a sequential file without having to delete any
×       unwanted control statements.  Use '=SEQLOAD' if the sequential
×       file is the desired result, and use '=PDSLOAD' if the sequential
×       file is an intermediate stage before reloading into a PDS.

 10)    PERFORMANCE
        -----------
           To improve performance REVIEWing partitioned data sets, a
        couple of changes have been implemented:
        a) When a member is selected (with an 'S') from the member list
           the "in core" directory information is now retained instead
           of being freed.  ('S' was the only selection code for which
           it was freed.)  This means that ENDing (or DIRing) back to
           the member list is faster since the directory/directories do
           not have to be re-read and re-sorted but can be displayed
           immediately.  (This was always the case with EDIT (CANCEL)
           and BROWSE.)  However, to verify the currency of "in core"
           data DS1LSTAR of the PDS (or first PDS in a concatenation)
           is checked for change after a member has been REVIEWed,
           BROWSEd or EDITed (without a save).  If it has changed a
           directory refresh is initiated.  A directory refresh is also
           initiated unconditionally after an EDIT where data was saved.
           Note that while the DS1LSTAR check will detect new members
           and compresses it will not detect member deletions and
           renames.  A directory refresh can be explicity requested by
           entering '=REFRESH' in the member LOCATE string input area.
           '=REFRESH' also has the effect of resetting all OFFLOAD
           member selections.
        b) When ENDing or DIRing back to the member list from REVIEWing
           an individual member, the BPAM DCB is not CLOSEd.  While this
           makes a small but perceptible improvement to the response
           time of those two subcommands, the big improvement is when
           a subsequent selection for REVIEWing a member occurs, when
           the file does not have to be re-OPENed.  (This change should
           also reduce the number of SMF type 14 records for sites that
           collect them.)
        These changes mean that the only appreciable extra overhead of
        two PF3s versus the EXIT or =X subcommands, and between a DIR or
        END subcommand followed by another member selection versus the
        MEMBER subcommand, is the TSO terminal I/O and an OBTAIN for a
        format-1 DSCB from a VTOC.  The extra OPEN/CLOSE overhead (up to
        two of each) is now removed (assuming no PDS update by another
        task takes place).
           Since FIRST, NEXT, PREV or LAST can now be specified for any
        FIND command (including FINDCHR, FINDHEX and FINDSMF), is it
        obvious that search in the backward direction can now be
        performed.  A backward-search:forward-search performance ratio
        can range from 1:1 to many:1 depending on the nature of the
        file.  If all the data to be searched is "DIV"-managed then
        any performance difference will probably not be noticable since
        no I/O operations will be involved.  For unblocked files
        (including RECFM=U) or files where block boundaries happen to
        coincide with scroll-up page boundaries, forward and backward
        search performance will be identical as long as REVIEW knows
        the location of the first block of the scrolled up page.
        (REVIEW will calculate this if "FASTPATH" is active, or will
        look this up in the checkpoint table otherwise.  If, due to a
        large file size, the entry for this block has been compressed
        out then reading will start from an earlier point and data will
        be discarded until the net effect is scrolling up one page,
        whereupon search string comparing will resume.  This "discarding
        data" phase may well be very large for variable-spanned files.
        Also note that overheads are reduced (as a percentage of total
        activity) with the more lines on the screen.  At a minimum,
        one I/O is required for every page-full of data to be searched
        backwards (this assumes a very large blocksize), while searching
        forward never requires more than one I/O per physical record.)
           Testing for an attention interrupt during a forward FIND
        occurs after every comparison and after every record is searched
        so when a screen is presented after such an interrupt, some of
        the screen may have been searched and some may not.  This is not
        a problem since a repeat FIND will start from the top of the
        screen, thus ensuring that all data is searched.  During a
        backward FIND, testing for an attention interrupt only occurs
        after the current internal page of data has been searched.  The
        idea was that the data in the screen presented after the
        interrupt would have been searched, so that when a repeat FIND
        was issued and the search resumed with the record immediately
        previous to the top record on the screen, the user could be
        sure that no data had escaped the search.  However, to scroll
        up FIND invokes LIST processing which also tests for attention.
        Due to the asynchronous nature of the attention interrupt, it
        could be detected at any stage including the "discard data"
        phase mentioned above.  Therefore, be alert to the possibility
        that interrupting a backward search and then resuming it may
        mean missing one or more occurences of the target string.

 11)    SMF DATA DISPLAY
        --- ---- -------
           When reviewing SMF data, data can be broken-out and formatted
        with the use of the SMF subcommand.  REVIEW calls the REVSMF
        subroutine to produce an 80-byte display line for each SMF
        record.  Highlighting records of the same type as specified
        in the latest FINDSMF subcommand and converting the SMF record
        type 30 subtype digit to a superscript (an APL character) is
        performed by REVIEW proper.
           With 'SMF ON' active, all SMF records will have the record
        type, time, date and system id formatted, while many record
        types will have other type-dependent information also on show.
        It is intended to show only a few relevant data items of major
        interest (for that record type) and there are other space
        limitations.  For example, a type 18 (data set RENAME) format
        shows the "from" name and the (first) volume serial number, but
        not the "to" name.  (In this case, just enter 'SMF OFF' and
        scroll along the record (also with 'HEX OFF') to find the "to"
        name.  Record types 14 and 15 (OPEN/CLOSE) and 17 (SCRATCH)
        will also only show the first volume serial number but IEHIBALL
        with 'SMF OFF' can reveal others for multi-volume data sets.)
           Formats for record types 9 (vary online) and 11 (vary
        offline) will only show up to the first 11 devices, type 10
        (allocation recovery) will only show up to the first 9 devices,
        type 40 (dynamic deallocation) will only show up to the first
        3 devices, and type 72 records (RMF workload activity) will only
        report the average service absorption rate for up to the first
        4 performance periods in a performance group.
           The 80-byte formatted line produced by REVSMF will generally
        be constant for a given record, with the exception of type 30
×       records with EXCP section(s) and RMF record types 70, 73 and 74.
×       For these four record types the information varies with LEFT
        and RIGHT scrolling.  At 'LEFT MAX' the type 30 will show a
        period summary, step termination details or job details,
×       depending on the record subtype, while type 70, 73 and 74
        formats will merely indicate that more information is available
        by scrolling right.  For each page (80 bytes) scrolled RIGHT,
        the type 30 record will show each EXCP section entry
        consecutively (this includes device type, device number, DDname,
        EXCP count, largest blocksize (suppressed when zero), and device
×       connect time (shown in S.SS format if less than 10 seconds or
×       else in HH:MM:SS format but not shown when from a pre-XA system
×       or absolutely zero), while the formats for types 70, 73 and 74
×       will show central processor activity, channel path activity and
        device activity entries respectively averaged over the RMF
        interval.
×          Central processor activity is reported as the average
×       utilization over the RMF interval, with the average I/O rate
×       over the RMF interval also shown.  The PR/SM LPAR name (if PR/SM
×       is active) is also displayed.  A more detailed explanation of
×       the type 70 formatted display is now given.  The type 70 RMF
×       SMF record contains figures kept internally by MVS and figures
×       from PR/SM.  When scrolling RIGHT from LEFT MAX with SMF ON,
×       the MVS internal figures are displayed for the first CP in the
×       OS (MVS) image.  This is the CPU utilization, the I/O rate and
×       the PR/SM LPAR name.  The CPU utilization is the wait time
×       subtracted from 100 percent.  The I/O rate includes interrupts
×       processed through the I/O SLIH and those detected by the TPI
×       instruction.  The PR/SM LPAR name is displayed so that the
×       terminal user can tell which PR/SM partitiion the MVS was
×       running in.  Do not be dismayed if the displayed utilization
×       is 100% even if you know that if was less, because the actual
×       utilization figures from PR/SM are also available.  If you do
×       not dedicate CPs to LPARs and do not allow waits to complete
×       then the MVS wait time field of the type 70 record will be zero,
×       thus giving a 100% utilization display.  Now, assuming an MP,
×       continuing to scroll RIGHT will step through each CP in the OS
×       image.  If PR/SM was not active, further scrolling RIGHT will
×       cause a message suggesting more information is available by
×       scrolling LEFT to be displayed.  If PR/SM was active, scrolling
×       RIGHT past the MVS figures will cause the PR/SM figures to be
×       displayed, one page per CP in each LPAR.  BUT, how do you tell
×       the difference?  That is, given a random LEFT/RIGHT location,
×       how do you know which figures are being presented?  The key is
×       to look for an I/O rate in the display.  If an I/O rate is
×       shown then the figures are from the MVS designated by the SMF
×       system id running in the displayed LPAR.  If no I/O rate is
×       shown then the utilization is for the indicated CP running in
×       the indicated LPAR, and you cannot tell if it is relevant to
×       this MVS from this display page alone.  (Confused?  If so,
×       just REVIEW some type 70s and scroll LEFT and RIGHT until all
×       is obvious.)
           Channel activity formats merely consists of percentage
        utilization, while device activity reports I/O rate and
        milliseconds per I/O broken down into the connect, disconnect
        and pending components.  When scrolling has gone RIGHT more
        pages than there are sections to display, a message indicating
        more information can be obtained by scrolling LEFT is displayed.
        Note, however, that it may not be possible to to scroll RIGHT
        enough to format EXCP sections near the end of a type 30 record
        which is approaching 32K bytes in length since EXCP sections are
        much less than 80 bytes in length.  Very long type 30 records
        are typically produced by long running tasks with many dynamic
×       allocations such as HSM.  Note that type 30 subtype 5 records
×       at LEFT MAX show the number of tape mounts for a job if greater
×       than zero.
           Remember that statistics reported in RMF record formats by
        REVIEW are averages over the RMF interval covered by the
        specific SMF record.  Also note that RMF details are only
        reported if the SMF record flag byte indicates that the
        subsystem identifier follows the system identifier, that
        subtypes are utilized, that the record came from an OS/VS2
        system, and that the record came from an MVS/XA system.  Hence,
        only RMF records from MVS/XA and MVS/ESA will be fully
        formatted.
×          As from August 1992, DB2 SMF records (100, 101 and 102) have
×       LEFT/RIGHT scroll sensitivity.  The DB2 subsystem name is always
×       shown after the system identifier.  At LEFT MAX, the author-
×       ization id, the correlation id, the connection name, the plan
×       name and the original operator id are shown from the correlation
×       header, if present.  At one page to the RIGHT, the authorization
×       id is shown with the correlation id and the plan name being
×       labelled to make it obvious which of the character strings at
×       LEFT MAX they were.  Scrolling RIGHT further, various times,
×       counters and other values are shown depending on the record's
×       type and contents.  At the time of writing only type 100 records
×       have more than one subtype (0 and 1), so type 100 records will
×       have the subtype superscript digit as per type 30 records.
×          Also as from August 1992, DIV SMF records (type 41) are
×       formatted.  Type 41 subtype 3 is the VLF statistics record and
×       the formatting of this with 'SMF ON' is also LEFT/RIGHT scroll
×       sensitive.  At LEFT MAX the "scroll right for more information"
×       message is shown.  Scrolling RIGHT, four (4) pages (each page
×       with two (2) counters) of data is available for each VLF object
×       class.  Scrolling RIGHT past these pages causes the "scroll
×       left for more information" message to be shown.  Type 41
×       formatting also uses a superscript digit to indicate the
×       subtype.
           Also note that REVIEW can be used to browse the system's VSAM
        MANx data sets for up-to-the-latest-buffer record formatting.
        Since these files are in the master catalog of the owning
        system, you cannot look at another system's MANx files (unless
        that system still uses non-VSAM MANX and MANY files and you
        specify the volume).  When you use the FINDSMF subcommand to
        to search (in the forward direction) for a specific SMF record
        type in the SYS1.MANx VSAM data set, REVIEW will stop the
        search at any SMFEOFMARK record encountered, thus avoiding a
        lot of I/O for not-very-full files.  Be aware, however, that if
        the LAST operand is specified then REVIEW will go to the
        physical end of the file even if there is no SMF data in the
        file.
×          Usage note: when REVIEWing a VSAM MANx file that has some
×       SMF records, you can use a command like 'FS 222' (where 222 is
×       a non-existent SMF record type) to scroll down to the latest
×       SMF records.  The last line on the screen will be an SMFEOFMARK
×       record (assuming the MANx file is not full).  If you scroll UP
×       and then DOWN, and notice that the record is no longer an
×       SMFEOFMARK record, then SMF has written at least one more buffer
×       to disk and the 'FS 222'-type command can be used again.  If
×       you scroll down such that more than one SMFEOFMARK is on the
×       screen at a time and then SMF writes more data to disk, then
×       REVIEW will have incorrect record/address checkpoint data which
×       will probably result in incorrect scrolling and locating.  This
×       situation can be rectified by a 'NEWTOP' command.
×          REVIEW has now been updated to check record location data
×       with previously collected checkpoint data and if a mismatch
×       occurs the incorrect and subsequent checkpoint entries will be
×       dropped.  As a result, REVIEW should now be able to handle
×       VSAM ESDS files such as SYS1.MANx while they are being updated
×       dynamically, without the need for an explicit 'NEWTOP' command.
×          The 'FINDSMF' ('FS') subcommand has been changed to support
×       searching for a particular sub-type of a particular SMF record
×       type.  So 'FS 305' will only locate a type-30 subtype-5, whereas
×       'FS 30' will locate any type-30 record.  Sub-type searching is
×       activated when the operand of 'FINDSMF' exceeds 255.  The last
×       digit is then taken to be the sub-type.  Sub-types greater than
×       9 cannot be searched for in this fashion.  Searching for
×       sub-types of system record types (0-127) is only allowed for
×       record types known to have sub-types.  Searching for user
×       record (128-255) subtypes is unrestricted.
×          As of December 1992 the system SMF records that have
×       sub-types are deemed to be:
×       30, 32, 33, 41, 42, 70-79, 82, 83 and 96.

 12)    SELECTING DATA DISPLAY COLOUR
        --------- ---- ------- ------
           The COLOR/COLOUR command, as well as the ON and OFF operands,
        allows a single hex digit as an operand.  This is taken to
        indicate the colour to be used for tha actual data from the
        file being REVIEWed.  The SMF-formatting mode, CHARACTER mode
        and HEXADECIMAL mode colours are independent.  When the command
×       is issued it only takes effect in the current mode (SMF ON, HEX
        ON or HEX OFF).  If extended highlighting is known to not be
        supported on the current terminal then OFF is the only allowed
        operand.  Otherwise, ON or a single digit in the 1-to-7 range is
        allowed.
           Not that I have ever seen one, but according to the 3270
        Data Stream Programmer's Reference manual, there may be some
        terminals around that support 16 colour codes in the 3270 data
        stream.  (They are probably PCs.)  If you ever use one, you may
        also specify a digit in the 9-to-F range as a COLOR/COLOUR
        operand under REVIEW.  These data display colours are stored in
        the user profile (see below).  If you go back to an 8-colour
        (including black) screen your profile colours will be used but
        the X'08' bit will be turned off for the duration of the
        session.  I have disallowed codes 0 and 8 because I didn't think
        black data was a good idea.  (I'm just funny that way.)
           The possible colours and their codes are:
           0 - neutral (VDU:black  PRINTER:white)    8 - black
           1 - blue                                  9 - deep blue
           2 - red                                   A - orange
           3 - pink                                  B - purple
           4 - green                                 C - pale green
           5 - turquoise                             D - pale turquoise
           6 - yellow                                E - grey
           7 - neutral (VDU:white  PRINTER:black)    F - white
           (Aside: I read somewhere that the number of colours
        supported by a 3270 terminal will always be a power of 2.)
           Remember that some informational text derived from the file
        and/or file data is shown in turquoise (eg. link edit details,
        physical record location (see below) and RRDS empty slot flag),
        and some warning text is shown in red (when the second half of
        an RDW in a non-spanned file is not null - this could be caused
×       by processing a VBS file as VB (or a VS file as V); and when the
×       length of a multi-segement record is longer than LRECL), and
×       SMF records of the searched for type are shown in pink, and the
×       ruler and '** BOTTOM OF DATA **' lines are shown in yellow.
×       All of these colours have alternates in case they match the
×       current data colour.

 13)    USER PROFILE
        ---- -------
           REVIEW can now store a user profile on disk to store data
        across REVIEW sessions.  Items stored in the profile are:
           a. scrolling amount;
           b. colour for file data in character mode;
           c. colour for file data in hexadecimal mode;
×          d. colour for formatted data in SMF mode;
           e. values assigned to each of the 24 Program Function Keys.
        These items all have default values which are used unless
        overridden by the profile or by an explicit command.  The
        profile is stored in member $$REVIEW of the ISPPROF file.  If
        either the member or the file allocation do not exist at REVIEW
        time then the defaults are used.  $$REVIEW is 1600 bytes large,
        and also contains a last-changed timestamp.  If the profile has
        not changed it is not written out at EXIT time.  The profile is
        considered to have changed if
           a. a PFKnn  subcommand was issued
           b. a COLOUR n  subcommand was issued
              and COLOUR NOT SUPPORTED was not the response
×          c. the scroll amount input field was used to successfully
×             specify a scroll amount
        even if the result is identical to the value beforehand.  To
        allow temporary profile changes not to be saved the CANCEL
        subcommand is available.  Internally, it just resets the
        "profile-changed" flag and then performs an END.  If a member
        list had not previously been displayed then the REVIEW session
        is ended without any profile (on disk) update.  If a member
        list had been shown then it would be shown again.  The user
        could then select a member and any profile changes would still
        be in effect.  If no further profile changes are made then it
        will not be saved whenever the session ends, but if another
        change is made the "profile-changed" flag will be set again and
        an EXIT will cause all changes for the session to be saved to
        disk.  Naturally, another CANCEL may be issued to reset the
        flag again before exiting REVIEW.
           The existence of the profile member has to be verified at
        exit time again because the user may have issued, for example,
        'TSO FREE F(ISPPROF)' from within REVIEW.  If $$REVIEW exists
        then it is updated in-place with the new profile.  If it does
        not exist or was found to be too small then ISPPROF is opened
        for OUTPUT and a new member is created.

 14)    RECURSION
        ---------
           In the TSO subcommand routine we want to know if a recursive
        REVIEW session is being requested.  If it is then the automatic
        TSOEXEC is suppressed so that any ISPF environment can be
        available to the second (or third or whatever) level REVIEW.  (I
        am confident that REVIEW will restore all registers upon exit so
        that the original REVIEW session will not ABEND.)  Originally I
        checked if the TSO command requested was the same as THIS
        session's TSO command.  But what about aliases?  The check could
        be for 'REV' but in theory REVIEW could be installed under
        another name.  Or there may be other commands beginning with
        'REV'.  Hence the current all-scenario-handling acrobatics in
        the routine.
           Once REVIEW is invoked it checks to see if it is a recursive
        session.  Since it is running it must be the "top" RB of the
        current task.  If there is a second-top RB and if it points to
        the same major CDE as the top RB (ie. it is using the exact same
        load module copy in virtual storage (REVIEW should be RENT,REUS,
        REFR)) then recursion is assumed.  Note that if you have gone
        'REVIEW' from READY, 'TSO PDS' from REVIEW, and 'TSO REVIEW'
        from PDS then recursion will not be detected.
           If a new REVIEW session is recursive then the profile is not
        read but is copied from the virtual storage of the "outer"
        REVIEW session.  Further, the original session's command recall
        stack will be used by all nested REVIEW sessions, so command
        recalls will work across sessions (both inward and outward).
×       Additionally, the TSO terminal is not queried again, but the
×       query results from the "outer" REVIEW will be used.  If the
×       "profile-changed" flag is on then the "outer" REVIEW profile
×       will be overlayed with the profile from the "inner" REVIEW
×       when the "inner" REVIEW terminates.

 15)    I/O ERRORS AND DIAGNOSIS
        --- ------ --- ---------
           You know, I wrote a System/370 architecture I/O program once
        (see member VIEW of CBT FILE 134), and I thought I'd convert it
        to run under XA.  Well, after about ten pages of Princ. of Ops.
        muddle-speak and Lost-in-Space artwork diagrams I gave it away
        as a bad joke.  Things were simpler before XA.  I refer mainly
        to the fact the Channel Status Words always resided at fixed low
        core location 64 (decimal).  I'm fairly sure data management
        access methods copied the CSW from this location to the IOB
        where the problem program could examine the status for itself.
        But since XA?  Forget it.
           So, your job is happily humming along when it suddenly dies
        with some sort of I/O error on the rather large sequential
        variable-length record input file.  So you just whip into REVIEW
        and issue DOWN MAX and wait for a highly informative error
        message to appear on the bottom of your screen (instead of the
        standard ** BOTTOM OF DATA ** line because you are expecting an
        I/O error before the end of the file is reached).  And you wait.
        Well it is a large file.  And if it is a tape file you watch the
        tape spin and spin.  Here comes the I/O error now.  Spin and
        spin.  Now.  Spin and spin.  You thought it was somewhere around
        here.  Spin and spin.  Then eventually you get ** BOTTOM OF DATA
        **.  REVIEW has blissfully sailed passed bad BDWs and RDWs and
        SDWs and reached the end of the file.  PF3.  Back to the drawing
        board.
           Introduce validity check number one.  If the length from the
        BDW does not equal the number of bytes transferred then signal a
        bad block.  But what is the number of bytes transferred?  It is
        the blocksize in the DCB minus the residual count, right?  Well,
        apparently not since XA.  Or at least DFP Version 3.  The
        residual count in the CSW image in the IOB seems to be the
        blocksize (in the DCB) minus the length from the block
        descriptor word.  How do I know?  I zapped a BDW to be incorrect
        but my validity check was never tripped, even though the correct
        number of bytes (ie. the whole block) was transferred from the
        storage media into the virtual storage buffer.  (I tried zapping
        both a smaller and larger length than was correct into the BDW.
        When the length in the BDW (but not the actual block) was bigger
        than DCBBLKSI BSAM complained of a wrong length record.)
           So, when the access method signals an I/O error REVIEW's
        SYNAD exit gets control and performs a SYNADAF/SYNADRLS and
        saves a choice 78 bytes of the error message which is used
        instead of the standard ** BOTTOM OF DATA ** line.  As mentioned
        elsewhere, this means that data before the I/O error remains
        accessable and REVIEWable in the normal way.  Also, it may be
        possible to NEWTOP passed or over the bad block(s) and gain
        access to data beyond the I/O error.  Things detected by the
        access method (BSAM) include overruns and extent errors.  Not
        much can be done about RECFM=U record validity, but for fixed-
        length records block sizes not a multiple of the record size
        will also be detected.  QSAM will validate variable length
        blocks and complain if something doesn't look right, which is
        where your job came in (or fell over).  So now REVIEW does some
        explicit checking so that your DOWN MAX should stop just where
        your job did.
           Variable length block validity checks:
           a.   BDW length is not less than 8
           b.   BDW length is not greater than DCBBLKSI
                (should be trapped by access method first)
           c.   third and fourth bytes of BDW are null
           d.   end-of-record and end-of-block coincide
                (record does not extend past the end of the block)
           e.   first bit of RDW/SDW is off
                (hence NULL SEGMENTs are not supported by REVIEW)
           f.   RDW/SDW length is not less than 4
           g.   RDW/SDW is not greater than DCBLRECL
×               (multi-segment record length is not checked, but if it
×               exceeds DCBLRECL *and* is currently being displayed,
×               then the data length (excluding descriptor word) is
×               shown in decimal in red on the right-hand side of the
×               screen on the same line as the record's data.)
        If a validity check fails then REVIEW simulates end-of-file due
        to an I/O error.  The error message at the bottom of data shows
        the relative address of the bad block (in NEWTOP operand format)
        the BDW in hexadecimal, the length implied by the BDW and the
        blocksize from the DCB.
        ** Remember, you can get the relative physical address(es) of
        the block(s) of the record(s) being displayed with the commands:
           HEX ON
           RIGHT MAX
           HEX OFF           (Try it and see!)
        (For spanned records, the address of the last segment is shown.)
        Thus, you can get NEWTOP operand data even if the actual bottom
×       of data line does not contain a suitable address.  (For VSAM
×       clusters accessed with the VSAM access method the location shown
×       is the hexadecimal RBA, but this value cannot be used as a
×       NEWTOP operand.)  You can allocate a file to the problem data
        set supplying DCB values of RECFM=U and BLKSIZE=32760 (you can
        use the REVTAPE CLIST even for disk data sets by supplying the
        UNIT and VOLUME), and then REVIEW the file, NEWTOP down to just
        before the I/O error and examine the physical records in detail
        on your TSO screen.  (You can now REVIEW files that have null
        DCB values.  REVIEW will use RECFM=U and BLKSIZE=32760.)
           Just a note here that the usual ** BOTTOM OF DATA ** line
        contains a data byte count on the right-hand side.  This does
        not include bytes for descriptor words, CIDFs, RDFs and
        freespace bytes (when in CI-interpret mode).  It includes only
        bytes which have or could have been displayed as data bytes.
        The end-of-file address is on the left-hand side:
           S/W-EOF-TTR is the TTR of the CI with the null CIDF,
        or the TTR of an empty CI after the logical record count read
        exactly matches the VVDS record count and so REVIEW assumes
        there is no more data.
           EOF-TTR is the TTR of the end-of-file marker for a PDS
        member, or the TTR of the last record or end-of-file marker
        for a non-PDS.  (Sequential data sets usually do not end with
        an end-of-file marker.)
           EOF-BLK is the relative address of the last block read from
        the tape.
           For non-PDS disk files, if DS1LSTAR looks incorrect (based
        on where the end-of-file really is) then the approximate
        percentage of used/allocated space is also shown.

 16)    SUBSYSTEM DATA SETS
        --------- ---- ----
           The SUBSYS operand now allows the user to attempt to REVIEW
        subsystem data sets.  Read the TSO HELP regarding VOLUME
        operand conflicts etc.  I have never successfully REVIEWed a
        subsystem data set but I don't have any subsystems which
        support data set allocation apart from JES2.  As my TSO session
        was not a SYSOUT-PROCESSOR I could *not* REVIEW SYSOUT merely
        by entering:  REVVSAM 'JES2.JOB01234.O0000101' SUBSYS(JES2)
        (Note that APF authorization is required, and REVVSAM may be a
        convenient vehicle for this.  Also note that I rely on the
        system using PUTLINE to show the DARC on the terminal, using
        the "recent" SVC 99 parameter extensions.)
           However, recalling SUBSYS=LAM in JCL back in my LIBRARIAN
        days, I thought it may be possible to REVIEW LIBRARIAN master
        file members.  I also believe that PANVALET now has a subsystem
        interface access method, but I could be mistaken.  For LIBRARIAN
        (if this works at all) a member name will probably need to be
        specified.  Since NOTE/POINT is not available "DIV" must be
        employed so as the code stands, XA is required.  I would be
        interested to hear if anyone gets this working, and what
        changes, if any, were required.  If any JES wizard out there
        can figure out how to get BSAM access to SYSOUT, feel free to
        amaze me.

        Happy REVIEWing,
                         Greg Price          6th December, 1990.

