REVIEW   TITLE '  R E V I E W  '
***********************************************************************
*                                                                     *
*         REVIEW - TSO COMMAND FOR EXAMINING A DATA SET               *
*                  ON A 3270 DISPLAY STATION SCREEN                   *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY: BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION: AIR FORCE DATA SERVICES CENTER, PENTAGON.
*        DATE WRITTEN: JANUARY 19 1981.
*        DATE UPDATED: MAY 5 2000.
*        ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)
*        LOCAL MACROS USED: DCS. (DEFINE CONSTANTS FOR SCREEN.)
*        DESCRIPTION:
*         THIS TSO COMMAND DISPLAYS A DATA SET ON A 3270 TERMINAL
*         IN FULLSCREEN MODE.
*
*         LOG OF CHANGES:
*         27MAR81 - ALLOW PFK DEFINITIONS TO BE CHANGED.
*         10JUL81 - IKJRLSA SOON AFTER PARSE. 'VOLUME' KEYWORD.
*                   FIXED BUG OF IKJEFF18 BEING CALLED TWICE.
*                   MISCELLANEOUS INTERNAL RESTRUCTURING OF CODE TO
*                   ALLOW FUTURE CHANGES. OLD CODE HAD USED UP ALL
*                   THREE BASE REGISTERS.
*         14JUL81 - BYPASS IKJEHDEF IF VOL SPECIFIED. ADD 'UNIT' KW.
*                   HEX SUBCOMMAND WITHOUT OPERANDS WILL FLIP-FLOP
*                   BETWEEN HEX ON AND HEX OFF. PFK9 IS NOW HEX
*                   INSTEAD OF HEX ON. PFK12 IS NO LONGER HEX OFF.
*                   SMF SUBCOMMAND WITHOUT OPERANDS WILL FLIP FLOP.
*         20JUL81 - FINDSMF SUBCOMMAND ADDED, FOR SMF RECORD TYPE.
*         29SEP81 - ACCEPT PFK 13-24 CORRESPONDING TO 1-12.
*                   FIX BUG AT CLC FOR REPLY 'FINDSMF'.
*         29JAN82 - SET UP IOPL BEFORE DOING GTSIZE/ERRTERM.
*         29JAN82 - ALLOW MEMBER TO BE SPECIFIED WITH DDNAME, SO USER
*                   CAN DO THINGS LIKE REVIEW SYSPROC(MEMBER) FILE
*                   (AND SHOW DDNAME+NNN IF CONCATENATED).
*                   REPLACE 'POINT' WITH 'FIND' TO SUPPORT
*                   CONCATENATED PDS'S.
*         18MAR82 - CALL REVSMF SUBPROGRAM TO FORMAT SMF DATA.
*  R2.0   22AUG84 - CAN NOW HANDLE ANY DSORG AND KEYS.  REVSMF
*                   SLIGHTLY ENHANCED.  ADDED STAX AND STSIZE MACROS.
*                   PFK SCROLLING MORE LIKE SPF.                GP@SECV
*         11JUN85 - COUPLE OF EXTRA CHARACTERS ADDED TO TRANSLATE TBLS.
*                   TCAM SUPPORT DROPPED.  STSIZE REPLACED BY VTAM
*                   ERASE/WRITE BECAUSE ONLY 80-BYTE LINES SUPPORTED.
*                   CAN BE UP TO 43 LINES, ALSO COLOUR.         GP@SECV
*         11SEP85 - ADD CALL TO REVCMPBF TO COMPRESS TPUT BUFFER.
         EJECT
*         12JAN86 - STSIZE AND ERASE WRITE USED TO PROPERLY HANDLE
*                   NON-80-BYTE MODE.  MODE RESTORED ON EXIT.
*                   SELECTED SMF TYPE ALSO HIGHLIGHTED IN MONOCHROME.
*                   TAPE DATA SETS NOW ALLOWED.                 GP@SECV
*  R3.0   20MAR86 - MEMBER SELECTION LIST (REVPODIR), DIR AND =X ADDED.
*                   STAX FIXED SO NOW FULLY RE-ENTRANT.         GP@SECV
*         24JUN86 - LOAD MODULE ATTRIBUTES, SORT AND ATTENTION HANDLING
*                   ADDED TO REVPODIR.                          GP@P6
*         26JUN86 - FC COMMAND ADDED FOR FIND CHARS WITHOUT FOLDING
*                   TO UPPER CASE.  REVEDIT HOOKS ADDED.        GP@P6
*         27JUN86 - ADDED REVEDIT FOR SPF EDIT OF PDS MEMBERS. AW@IDAPS
*         15AUG86 - REMOVED DEPENDENCE OF "SPF" SCROLLING ON STANDARD
*                   PFKS ('PFALSO' CODE).  ADDED ABL'S CODE FOR TSO
*                   SUBCOMMAND FROM ANOTHER VERSION OF REVIEW.  ADDED
*                   CODE TO SEARCH LPA BEFORE BLDL.  SCROLL LEFT OR
*                   RIGHT TO SHOW FIND TEXT ON SCREEN.  FOUND TEXT
*                   HIGHLIGHTED IN 7-COLOUR MODE.  FINDHEX COMMAND
*                   ADDED.  FINDCHR AN ALIAS OF FC.             GP@P6
*         28OCT86 - ADD LIMITED SUPPORT TO FINDSMF AND SMF FORMATTING
*                   FOR SYS1.MAN% VSAM FILES - ONLY SUPPORT RECORDS
*                   AT CONTROLINTERVAL START.                   GP@P6
*  R4.0   18FEB87 - RESET I/O ERROR AND NO-MEM FLAGS FOR NEW MEMBER.
*                   ADDED "FAST-PATH" FOR FIXED LENGTH RECORD NON-PDS
*                   DISK FILES AND AUTOMATIC TSOEXEC FOR TSO COMMAND.
*                   CHANGE IKJEHDEF TO IKJDFLT FOR F4.          GP@P6
*         03MAR87 - REPOSITION TAPE AFTER END-OF-FILE TO PREVENT
*                   OUT-OF-EXTENT AFTER A POINT MACRO.          GP@P6
*         10MAR87 - INCLUDE A 3480 DISPLAY MESSAGE.             GP@P6
*         19MAR87 - VALIDATE SPF DATES TO AVOID S0C7.           GP@P6
*         20MAR87 - OVERRIDE &SYSSPLV TO '1' SO MVS/XA WILL ASSEMBLE
*                   MVS/370 (AND F4) COMPATIBLE CODE.           GP@P6
*         24MAR87 - AVOID S213-04 ABEND FOR VSAM.               GP@P6
*         16JUL87 - DISPLAY HALFWORD COUNT OF NON-STANDARD DIRECTORY
*                   USER DATA OR SHOW SSI IF TWO HALFWORDS.     GP@P6
*         21JUL87 - VERIFY 7-COLOUR STATUS WITH QUERY.          GP@P6
*         13AUG87 - SUPPORT (REAL) PGM SSI AND PF12 SSI SORT.   GP@P6
*         19AUG87 - ADD ASCII AND EBCDIC COMMANDS.  REVISE B *+10,
*                   EX *-6 CODE.  HANDLE F4 AE PROGRAM ATTRIBUTES.
*                   ADD SUPPORT FOR FACOM 7-COLOUR SCREENS.  ENSURE
*                   HEADINGS ARE WHITE IN 7-COLOUR MODE.  ALLOW
*                   ZEROS AS A VALID FINDHEX ARGUMENT.          GP@P6
         EJECT
*  R5.0   15OCT87 - REMOVE 14 DIGIT LIMIT ON FINDHEX.  SHOW TTRS OF
*                   NON-RECFM U MEMBERS.  REREAD DIRECTORY AFTER SPF
*                   EDIT SAVE.  SHOW SOME DSCB DETAILS AT **END**.
*                   SHOW CURRENT VOLUME SERIAL FOR NON-PDS.  REMOVE
*                   HARD-CODING OF PF3/15.  EXTRACT VSAM LOGICAL
*                   RECORDS.  ADD 'DATA' KEYWORD.  ALLOW 'HALF'/'H'
*                   AND 'PAGE'/'P' AS VALID SCROLL AMOUNTS.  SCROLL
*                   AMOUNT EFFECTIVE IN ALL FOUR DIRECTIONS.  KEEP
*                   SAME SCROLL VALUE FOR NEW MEMBERS.  AVOID S213-20
*                   (LIKELY FOR ICF VSAM).  REPORT % INTO ALLOC'D SPACE
*                   ON ** BOTTOM ** LINE IF VSAM S/W EOF IS READ.
*                   COPIED ABL'S 'HELP' AND UPDATED 'DEBUG' CODE FROM
*                   HEL.  REDUCED CHKPT ENTRIES FROM 20 BYTES TO 8
*                   BYTES BY NOT STORING DEBLOCKING INFO (NOT NEEDED
*                   SINCE ONLY BLOCKS STARTING WITH THE BEGINNING OF
*                   A LOGICAL RECORD ARE CHECKPOINTED).  DELETE 'KEYB'
*                   COMMAND, ADD 'ON' AND 'OFF' KEYWORDS TO 'FULL'.
*                   ADD '?' SUBCOMMAND.  DON'T REPORT BLANKS AS
*                   INVALID COMMAND.  ADD RECALL COMMAND CODE.
*                   CHANGE PFK4 DEFAULT TO 'RECALL'.  ADD IMS
*                   USERDATA HANDLING TO REVPODIR.              GP@P6
*         29OCT87 - ADD REVSORTE CSECT.                         GP@P6
*  R6.0   18APR88 - ADD VVDS LOOK-UP FOR ICF VSAM COMPONENTS.  ADJUST
*                   MAXIMUM RECORD SIZE ACCORDING TO VVDS CONTENTS.
*                   HANDLE MULTI-BLOCK CI - GET CISIZE FROM VVDS.
*                   SHOW NUMBER OF LOGICAL RECORDS COUNTER FROM VVDS
*                   INSTEAD OF COLUMN NUMBERS ON TOP LINE.  HIGHLIGHT
*                   FIRST AND LAST COLUMNS OF RECORD KEYS WITH A '×'
*                   IN CHARACTER MODE (HEX OFF) ONLY, WHEN KNOWN, ON
*                   THE HEADING "RULER" LINE.  REPORT VVDS FREESPACE
*                   BYTE COUNT ON "BOTTOM OF DATA" LINE.  SUPPRESS
*                   IMBEDDED INDEX BLOCKS WHEN DETECTED.  SUPPRESS
*                   '(NULL)' DISPLAY ON EMPTY CI IF NOT YET REACHED
*                   RECORD COUNT FROM VVDS.  SIMULATE SOFTWARE EOF
*                   UPON EMPTY CI AT EXACTLY THIS RECORD COUNT.
*                   REMOVE 'ISPLINK' FROM LOAD MODULE - LOAD IT AT
*                   RUN TIME IF REQUIRED.  HANDLE PDF EDIT RETURN
*                   CODES 14 AND 16.  TREAT I/O ERROR AS END-OF-FILE,
*                   SHOWING ERROR MESSAGE ON BOTTOM LINE.  SUPPRESS
*                   'TSOEXEC' SUBTASKING ON RECURSIVE 'REVIEW' TO
*                   MAINTAIN ISPF(/PDF) EDIT AVAILABILITY.  ADDED THE
*                   'NEWTOP' COMMAND FOR LOOKING PAST I/O ERRORS.  LET
*                   'DATA' SUPPRESS "FASTPATH".  HANDLE DUP CHARACTER
*                   AS RECALL (USER REQUEST).                   GP@P6
*         19OCT88 - FIXED CAUSE OF DUPLICATE CHECKPOINT ENTRIES.
*                   USE SUPERSCRIPT FOR SMF TYPE 30 SUB-TYPES.
*                   LET 'DATA' REVIEW PDS DIRECTORY ASIS.
*                   MAKE 'SYSALLDA' DEFAULT UNIT NAME WITH VOLUME.
*                   ADD REVDIV CSECT.                           GP@P6
         EJECT
*  R7.0   21JUN89 - USE DFP 2.3 (MVS/SP2.2) AND LATER ARL RDJFCB EXIT
*                   TO FETCH ALL DATA SET NAMES FOR CONCATENATED FILES.
*                   BELL NOW SOUNDED FOR ERROR MESSAGES.  IDENTICAL
*                   CONSECUTIVE RECALL STACK ENTRIES ARE NOW
*                   SUPPRESSED.  USE CURSOR TO INDICATE FOUND DATA
*                   AS WELL AS REVERSE VIDEO.  ADD EDIT SUPPORT FOR
*                   CONCATENATED MEMBERS.  ADD BROWSE SUPPORT FOR
*                   MEMBERS SELECTED WITH A 'B'.  ADD THE 'CSR'
*                   SCROLLING AMOUNT.  DISPLAY LINK EDIT DATE ON IDR
*                   LINE WHEN REVIEWING A LOAD MODULE.  SUPPRESS USE
*                   OF TSOEXEC WHEN APF AUTHORIZED.  HANDLE DFP VSAM
*                   WHEN PHYSICAL RECORDS ARE LONGER THAN THE 4096
*                   BYTES INDICATED IN DS1BLKL IN THE VTOC.     GP@P6
*         02AUG89 - REDUCE EXPOSURE TO HDP2230 AND HDP3300 BUGS IN
*                   SVC 64 (RDJFCB) BY NOT USING THE ARL RDJFCB DCB
*                   EXIT FOR UNCONCATENATED FILES, AND ONLY USING IT
*                   UNDER MVS/XA WHEN THE JFCBS RESIDE ABOVE THE 16MB
*                   LINE.  FURTHER, ARL SUPPORT IS NOW SIMULATED BY
*                   'REVIEW' FOR CONCATENATED FILES WHENEVER ARL
*                   EXIT USAGE IS NOT ATTEMPTED.                GP@P6
*  R8.0   12OCT89 - MODIFY SYNADSW CHECKING SO DATA UP TO AN I/O
*                   ERROR CAN CONTINUE TO BE ACCESSED.          GP@P6
*         23NOV89 - ADD 'KEYS' ALIAS OF '?' (USER REQUEST) AND
*                   MAKE PF12 'RECALL' TO INCREASE ISPF SIMILARITY.
*                   PF4 IS NOW 'SMF'.                           GP@P6
*         21DEC89 - IMPROVE RECURSIVE 'REVIEW' RECOGNITION BY
*                   ALSO EXAMINING ALIASES.  FURTHER REDUCE SCREEN
*                   I/O BY OMITTING REDUNDANT COLOUR ORDERS.  NON-DATA
*                   INFO IN BRACKETS IS NOW SHOWN IN TURQUOISE.  LKED
*                   DATE MADE HIGH INTENSITY FOR MONOCHROME.  DELETE
*                   'EBCDIC' AND ADD 'ON' AND 'OFF' OPERANDS TO
*                   'ASCII'.  DUE TO PSYCHOLOGICAL PRESSURE FROM SAM
*                   GOLOB, PF1 IS NOW 'HEL'.  PF2 IS NOW 'ASCII'.
*                   HEX MODE DATA IS NOW BLUE WITH RULER ETC. NOW
*                   TURQUOISE.  WHEN REVIEWING PDS MEMBERS FROM THE
*                   'PDS' COMMAND, THE STAX IS DELETED WHEN INPUT IS
*                   NOT INHIBITED IN ORDER TO ALLOW 'PDS' TO TERMINATE
*                   REVIEWS OF LARGE MEMBER GROUPS (PROBLEM REPORTED
*                   BY SAM GOLOB).  SHOW ASM2 UPDATE DATE ON **END**
*                   LINE IF STORED IN DS1DSSN (NON-LOADLIBS ONLY).
*                   ENSURE IBM SA CODE USED FOR PC AND PS2 3270
*                   EMULATION UNDER FUJITSU'S F4 MSP.  CALL REVSORTE
*                   TO SPEED UP COLLATING SEQUENCE ("NAME") SORT FOR
*                   CONCATENATED PDS FILES.  WHEN MEMBERS SORTED IN
*                   SPFD USERID ORDER AND LOCATE STRING IS NOT AN
*                   EXACT MEMBER NAME THEN USE LOCATE STRING AS A
*                   USERID (PREFIX) FOR POSITIONING.            GP@P6
         EJECT
*         09FEB90 - FIX ABEND FLAG OFFSET IN DCB ABEND EXIT.    GP@P6
*         28FEB90 - KEEP DIRECTORY MEMBER LIST WHEN REVIEWING A
*                   MEMBER (SELECTED WITH AN 'S') SO DIRECTORY DOES
*                   NOT HAVE TO BE RE-READ (AND SORTED) WHEN END-ING
*                   BACK TO THE MEMBER LIST.  DO NOT CLOSE BPAM FILE
*                   WHEN END-ING OR DIR-ING FROM REVIEWING A MEMBER'S
*                   DATA BACK TO THE MEMBER LIST SO SUBSEQUENT REVIEWS
*                   OF MEMBERS IN THE SAME REVIEW SESSION DO NOT
*                   INVOLVE OPEN/CLOSE OVERHEAD.  ADD DS1LSTAR CHANGE
*                   DETECTION TO TRIGGER A DIRECTORY MEMBER LIST
*                   REFRESH.  HANDLE "REGION FULL" CONDITION CORRECTLY
*                   FOR CONCATENATED PDS'S.  ADD '=REFRESH' MEMBER
*                   SELECTION LIST PRIMARY COMMAND TO REFRESH LIST
*                   WITH LATEST DATA FROM DISK.  EXTERNALIZE ALL
*                   INTER-CSECT REFERENCES.  ADD REVOFFLD CSECT FOR
*                   PDS OFFLOAD TO IEBUPDTE-LIKE SEQUENTIAL FILE.
*                   ADD '=OFFLOAD' MEMBER SELECTION LIST PRIMARY
*                   COMMAND AND 'O' AND 'R' MEMBER SELECTION CODES
*                   IN SUPPORT OF OFFLOAD FUNCTION.  MEMBER LIST
*                   SCROLLING NOW USES SCROLL AMOUNT.           GP@P6
*  R9.0   04APR90 - LOAD SCROLL OFFSET INTO R0 BEFORE CALLING
*                   REVSMF, SO REVSMF CAN PROCESS LEFT AND RIGHT
*                   SCROLLING.  IF CISIZE IS 32K THEN USE 16K FOR
*                   BLKSIZE INSTEAD OF 32K (WHICH IS INVALID).
*                   CHANGE IMBEDDED SEQUENCE SET DETECTION TO SKIP
*                   THE FIRST TRACK BUT REMEMBER SIZE OF BLOCKS ON
*                   THE FIRST TRACK, AND THEN SKIP ANY TRACKS WHICH
*                   HAVE THE SAME SIZE BLOCKS.                  GP@P6
*         25JUN90 - CORRECTED CONCATENATED FILE COUNT WHEN NOT USING
*                   ARL JFCB EXIT (WAS INCLUDING FIRST DATA SET OF
*                   NEXT DD).  ADD 3390 SUPPORT TO "FASTPATH".  APF
*                   TEST FOR VSAM NOW ALSO FORCED FOR MVS/XA.  RESET
*                   F668X CHARACTER ATTRS UPON TERMINATION.     GP@P6
         EJECT
*  R10.0  23OCT90 - FORCE DISPLAY OF PHYSICAL BLOCKS FOR LINEAR VSAM
*                   (MAX LRECL=0).  HANDLE QUERY RESPONSE SPREAD OVER
*                   TWO TGETS (NON-GRAPHICS 3472 AFTER A PRINTER
*                   PORT).  IMPROVE DETECTION OF AE LKED IN REVPODIR.
*                   INCREASE MAX DIR GETMAIN FROM 3/8THS TO HALF A
*                   MEGABYTE.  REORGANIZE PHASE 2 FOR BASE REGISTER
*                   CONSTRAINT RELIEF.  SHOW LAST BLOCK ADDRESS ON
*                   ** BOTTOM OF DATA ** LINE.  ALLOW HEX DIGIT
*                   OPERAND ON COLOUR COMMAND.  INHERIT COLOURS, PFKS
*                   AND RECALL STACK WITH RECURSIVE 'REVIEW'.  SHOW
*                   PHYSICAL RELATIVE ADDRESS FOR EACH RECORD WHEN
*                   SCROLLED RIGHT PASSED MAXIMUM RECORD LENGTH.
*                   SUPPRESS TSOEXEC SUBTASKING WHEN 'TSO' REQUESTS A
*                   COMMAND BEGINNING WITH 'PDS' TO ALLOW ISPF
*                   FUNCTIONS UNDER PDS AND PDS/E.  FOR VARIABLE
*                   LENGTH RECORDS, HIGHLIGHT WHEN THE RECORD LENGTH
*                   IS BIGGER THAN THE LRECL AND FOR NON-SPANNED FILES
*                   SHOW THE LAST HALF OF THE RDW IF NOT NULL.  MAKE
*                   PFK VALUES PREFIX TYPED IN DATA.  REMOVE 'PFALSO'
*                   CODE.  ADD "DIV" TRIMMING.  SUPPORT 24 DIFFERENT
*                   PROGRAM FUNCTION KEYS.  DISPLAY DATA BYTE COUNT
*                   ON ** BOTTOM OF DATA ** LINE.  PERFORM CONSERVATIVE
*                   TRIMMING FOR DIV AREA BASED ON DISK DATA SET SIZE.
*                   ADD PROFILE (ISPPROF($$REVIEW)) TO SAVE PFK VALUES,
*                   COLOURS AND SCROLLING AMOUNT.  FORMAT TAPE LABEL
*                   INFORMATION AUTOMATICALLY WHEN REVIEWING TAPE
*                   LABELS.  ADD THE 'CAN'/'CANCEL' COMMAND.    GP@P6
*         19NOV90 - ALLOW AN UNQUOTED ASTERISK TO MEAN THE PREVIOUS
*                   SEARCH STRING FOR FIND/FINDCHR/FINDHEX.  SUPPORT
*                   THE 'FIRST'/'NEXT'/'PREV'/'LAST' OPERANDS ON ALL
*                   FIND SUBCOMMANDS.  ADD VARIABLE LENGTH DATA
*                   VALIDITY CHECKING AND SIMULATE E-O-F FROM I/O ERROR
*                   IF INVALID.  ADD THE '=EDITMEM' MEMBER LIST COMMAND
*                   SO THAT NEW MEMBERS CAN BE EDITED.  DISABLE
*                   "FASTPATH" AFTER ANY VALID 'NEWTOP' SUBCOMMAND TO
*                   AVOID I/O ERRORS.  MAKE LRECL-4 THE RIGHT-MOST
*                   COLUMN FOR VARIABLE LENGTH RECORD FILES.    GP@P6
*         06DEC90 - FIX SMALL POTENTIAL FOR S0C4 IN REVDIV.  MAKE
*                   SCROLLING DOWN WITH ** BOTTOM OF DATA ** LINE ON
*                   SCREEN MORE LIKE ISPF BROWSE.  ADD SOME CODE FOR
*                   ALLOCATING SUBSYSTEM DATA SETS WHICH MAY BE USABLE
*                   WITH PACKAGES LIKE LIBRARIAN AND/OR PANVALET.  (I
*                   DO NOT HAVE THESE PRODUCTS TO TEST IT.)  FINALLY
*                   FIX SEQUENCE SET HANDLING BY SKIPPING OVER THE
*                   FIRST TRACK OF EVERY CONTROLAREA FOR VSAM FILES
*                   WITH IMBED.  BLOCKSIZE IS NO LONGER DERIVED FROM
*                   CISIZE BUT IS READ FROM THE VVDS.           GP@P6
*         18DEC90 - FIX S0C4 ABEND IN REVDIV WHEN FIRST DATA-MODE
*                   REVIEW WAS FOR AN EMPTY OR NON-EXISTENT MEMBER
*                   OF A PDS.                                   GP@P6
         EJECT
*  R11.0  15JAN91 - DO NOT TREAT DCBTRTCH AS DCBKEYLE FOR TAPES BUT
*                   ASSUME ZERO KEYLENGTH FOR TAPE FILES.  (THIS BUG
*                   CAUSED ONLY FIRST BLOCK'S DATA TO BE SHOWN FOR
*                   SOME VARIABLE LENGTH RECORD TAPE FILES.)  A TAPE
*                   INDICATOR IS SHOWN ABOVE THE "RULER" LINE (WHEN
*                   SCROLLED LEFT MAX) SHOWING DENSITY, COMPACTION
*                   OR JUST WHETHER IT IS A 3480 OR TAPE DEPENDING
*                   UPON OS LEVEL.  A REVIEW OF VSAM WILL BE REJECTED
*                   WHEN NOT APF AUTHORIZED IF THE OS IS MVS/XA OR
*                   LATER AND THE DFP IS LATER THAN 2.3.0.      GP@P6
*         19FEB91 - FIX FIND BUGS (DETECTION AND SCROLLING) FOR
*                   VSAM (USUALLY DATA COMPONENT WITH IMBED).   GP@P6
*         26FEB91 - HANDLE OBTAIN FAILURE FOR VSAM DATA COMPONENT
*                   WITH ALTERNATE INDEX.                       GP@P6
*         13MAR91 - FINALLY FIX THE MYSTERIOUS QUERY DATA OVER
*                   TWO TGETS WITH NOEDIT=YES ON STFSMODE.
*                   (MOST OF THE NOW SUPERFLUOUS CODE CHECKING FOR
*                   BAD QUERY SUB-FIELDS REMAINS JUST IN CASE
*                   BAD DATA IS RETURNED FOR SOME REASON.)      GP@P6
*         26JUN91 - CORRECT TRACK SIZE FOR 2305-2 IN DISKTABL.
*                 - CHANGE EYE-CATCHERS FROM 10 TO 11.
*                 - AVOID SB00 ABEND ON READ OF $$REVIEW MEMBER IN
*                   ISPPROF WHEN ISPPROF HAS BIG (IE. > 3760) BLKSIZE.
*                 - TREAT BAD RESIDUAL DATA IN VSAM COMPONENT AS
*                   E-O-F, THUS AVOIDING A S0C4 ABEND.
*                 - DO NOT INCLUDE VVDS LOOK-UP BYTES IN BYTE COUNT
*                   OF DISPLAYABLE DATA FOR VSAM ON ** BOTTOM ** LINE.
*                 - DO NOT TREAT SINGLE TRACK PDSE AS OS/CATALOG.
*                 - IGNORE PDS DIRECTORY BLOCK IF LESS THAN 14 BYTES
*                   (MINIMUM ENTRY SIZE) ARE USED BECAUSE QSAM ON
*                   PDSE DIRECTORY SEEMS TO GIVE BAD BLOCK BEFORE
*                   THE FIRST GOOD BLOCK IS PRESENTED BY 2ND GET.
*                 - FLAG PDSE ON **END** MEMBER LIST LINE.
*                 - IMPROVE NON-FUJITSU TERMINAL RECOGNITION.
*                 - USE GTTERM MF=E TO FILL IN GTTERM PARAMETER LIST.
*                 - ALLOW REVIEW OF PDSE WHEN OVER 16 EXTENTS.  GP@P6
*         25SEP91 - AVOID S0C4 WHEN VOL1 IS THE ONLY TAPE LABEL.
*                 - SIMULATE PGSER R,RELEASE UNDER MSP/EXA.
*                 - ADD 'SUB'/'SUBMIT' SUBCOMMANDS.             GP@P6
*         04DEC91 - RESET ATTN FLAG IN REVEDIT BEFORE RETURN IN CASE
*                   THERE WAS A PA1 IN EDIT WHICH CAUSED REVIEW TO
*                   ONLY SHOW FIRST MEMBER IN MEMBER LIST.
*                 - ALLOW NEWTOP WITH TTR OPERAND TO ACCESS PDS DATA
*                   EVEN IF THERE ARE NO MEMBERS.  (BEFORE NEWTOP
*                   ISSUE "REV DSNAME(FRED)" FROM TSO.)         GP@P6
         EJECT
*  R12.0  05FEB92 - ALLOW ANY DFP VERSION LESS THAN VERSION 3
*                   TO READ VSAM WITHOUT APF AUTHORIZATION.
*         05MAR92 - ALTERED "FASTPATH" ACTIVATION LOGIC IF RECFM=FB
*                   - SEE COMMENTS AFTER LABEL 'PODIRX' FOR DETAILS.
*                 - UPDATE PHASE 1 MESSAGES FOR "USER FRIENDLINESS"
*                   SO IT IS OBVIOUS THAT THEY ARE ISSUED BY "REVIEW".
*                   (USER ISSUED REVIEW FOR MIGRATED VSAM DATA SET
*                   AND THOUGHT THAT THE MESSAGES INDICATED THAT
*                   HSM HAD TO BE APF AUTHORIZED!?!)            GP@P6
*         11MAR92 - MAKE 'SYSALLDA' UNIT NAME FOR VVDS LOOKUP.  GP@P6
*         03APR92 - CHANGE 'FINDSMF'/'FS' SEARCH AND HIGHLIGHTING TO
*                   HANDLE OPERAND GREATER THAN 255, IN WHICH CASE
*                   THE LAST DIGIT IS TAKEN TO BE THE SUBTYPE.  GP@P6
*         12MAY92 - SIMULATE ISPF 3278A TERMINAL HANDLING WHEN
*                   GRAPHIC ESCAPE SUPPORT DETECTED.  SHOW LINK EDIT
*                   DETAILS IN HIGH INTENSITY ON MONOCHROME SCREENS
*                   EVEN IF SENDING COLOUR IN DATA STREAM.      GP@P6
         SPACE 2
*  R13.0  19JUN92 - REMOVED MY SOURCE LINE UPDATE FLAG FROM OVER
*                   1500 NON-COMMENT SOURCE LINES.
*                 - ADDED SYMBOLIC ASSEMBLER VARIABLE FOR 'REVIEW'
*                   RELEASE NUMBER.
*                 - MOVED GTTERM/GTSIZE/STSIZE CODE TO GENERAL SCREEN
*                   INITIALIZATION ROUTINE WHICH USED TO JUST BE THE
*                   READ PARTITION (QUERY) PROCESSING.
*                 - ALTERED 'FIND' WITHOUT OPERANDS ("REPEAT FIND") SO
*                   THAT A FORWARD SEARCH WILL START AT THE TOP AFTER
*                   THE BOTTOM WAS REACHED, AND A BACKWARD SEARCH WILL
*                   START AT THE BOTTOM AFTER THE TOP WAS REACHED.
*                 - ALWAYS USE SEPARATE TPUT TO RESET AID INSTEAD OF
*                   3270DS STRUCTURED FIELD SO QUERY IS STILL DONE
*                   EVEN IF A LINE MESSAGE IS DISPLAYED AT QUERY TIME
*                   (EG.  REVIEWING A MIGRATED DATA SET).
*                 - ADDED THE '=SEQLOAD' PDS MEMBER LIST PRIMARY
*                   COMMAND.
*                 - NO LONGER COUNT RDW BYTES IN DISPLAYABLE BYTE
*                   COUNT IN '** BOTTOM OF DATA **' LINE.
*                 - ADDED NATIVE VSAM SUPPORT FOR KSDS CLUSTERS, WHICH
*                   MEANS A KSDS CAN BE REVIEWED EVEN IF IT HAS MORE
*                   THAN 16 EXTENTS AND WITHOUT APF AUTHORIZATION
*                   (IE. 'REVIEW'/'REV' RATHER THAN 'REVVSAM').
*                 - TRANSLATE UNPRINTABLES OUT OF TAPE LABEL FORMATS.
*                                                               GP@FT
*         09JUL92 - MINOR WORDING CHANGE TO MSG10 AND MSG17.    GP@FT
         EJECT
*  R14.0  24AUG92 - ONLY ACCEPT SMF SUBTYPE SEARCH FOR SYSTEM
*                   RECORD TYPES KNOWN TO HAVE SUBTYPES.
*                 - USE 'K' IN RULER IF ONLY ONE KEY COLUMN.
*                 - ADD VSAM RBA ACCESS SUPPORT TO KEYED ACCESS
*                   SUPPORT SO ESDS VSAM ACCESS IS NOW SUPPORTED.
*                   MSG17 IS NO LONGER FOR NON-KSDS CLUSTER REJECTION.
*                 - ADD CHKPTVFY ROUTINE TO DETECT FILE UPDATES
*                   DURING REVIEW (LIKE VSAM SMF DATA SETS).
*                 - ADD USER SETTING OF SMF DISPLAY COLOUR AND
*                   ENSURE HIGHLIGHTING, WARNING AND INFORMATION
*                   COLOURS ARE DIFFERENT FROM DATA COLOUR, AND
*                   ADD SYMBOLIC VARIABLES FOR DEFAULT SETTINGS OF
*                   SMF FORMAT, CHARACTER AND HEXADECIMAL COLOURS.
*                 - ADD A NEW MEANING TO 'DATA' WHICH IS TO FORCE
*                   VSAM RBA ACCESS OF KSDS CLUSTERS.           GP@FT
         SPACE 2
*  R15.0  30SEP92 - CORRECT NEWTOP LOGIC WHEN NON-ZERO OPERAND
*                   (BUG INTRODUCED WITH VSAM SUPPORT).
*                 - ADD (FIXED LENGTH RECORD) RRDS SUPPORT.
*                 - ADD VRRDS (VARIABLE LENGTH RECORD RRDS) SUPPORT.
*                 - THE "DIV" MAXIMUM GETMAIN REQUEST IS NOW HALVED
*                   TO SIX MEGABYTES, WHICH IS STILL BIGGER THAN
*                   MOST PDS MEMBERS.
*                 - MOVE LKED IDR FORMATTING INTO NEW GENERAL
*                   ESD AND IDR RECORD FORMAT ROUTINE.
*                 - ADD REVDIV CHAINED STORAGE METHOD FOR RECFM=U
*                   RECORDS TO IMPROVE STORAGE UTILIZATION.     GP@FT
*         12OCT92 - FIX CHKPTVFY ROUTINE TO NOT CHECKPOINT ANY
*                   PHYSICAL BLOCKS THAT START WITH A
*                   NON-FIRST/ONLY SPANNED RECORD SEGMENT.      GP@FT
         EJECT
*  R16.0  25JAN93 - ALLOW SMF SUBTYPE FIND FOR RECORD TYPE 96.
*                 - ADD SUPPORT FOR ANY SCREEN LINE COUNT FROM
*                   24 TO 62 AND ANY EVEN-NUMBERED COLUMN COUNT
*                   FROM 80 TO 160.  REMOVE STSIZE MACRO.
*                 - PASS BOTH SCROLL OFFSET AND SCREEN COLUMN
*                   COUNT TO REVSMF IN R0.
*                 - SUPPORT UP TO LINE 999999999 IN LINE NUMBER
*                   AND FOUND-IN-LINE MESSAGE DISPLAY.
*                 - IMPROVE HAND-SHAKING BETWEEN RECURSIVE 'REVIEW'S:
*                   - COPY QUERY RESULTS FROM OUTER 'REVIEW',
*                     SO INNER 'REVIEW' DOES NO QUERY.
*                   - PASS UPDATED PROFILE TO OUTER 'REVIEW' ON EXIT.
*                   - DO NOT TURN OFF FULLSCREEN MODE ON EXIT TO
*                     OUTER 'REVIEW'.
*                 - FIX IEV90 ASSEMBLE ERRORS REPORTED BY BRUCE
*                   LELAND.  (I WAS USING AEV90 (SLAC ASSEMBLER).)
*                 - RETAIN SAME FULL ON/OFF STATUS ACROSS MEMBER
*                   SELECTIONS VIA THE MEMBER LIST.
*                 - IF ANY PROGRAM HAS RMODE=ANY THEN ALSO SHOW
*                   TOTAL RMODE=24 SIZE AS WELL AS TOTAL PROGRAM
*                   SIZE ON **END** OF MEMBER LIST.  THIS IS TO
*                   ASSIST EVALUATING PLPA SIZE CHANGES WHEN
*                   ADDING A LOAD LIBRARY TO THE LPALST.
*                 - RESTORE 255 AS UPPER LIMIT OF FIRST 'FINDSMF'
*                   OPERAND, AND ALLOW A SECOND NUMERIC OPERAND IN
*                   0-255 RANGE TO BE THE SMF RECORD SUBTYPE.
*                   ONLY ONE BYTE IS NOW CHECKED FOR A SUBTYPE MATCH.
*                   THE SUBTYPE BYTE OFFSET IS NOW CUSTOMIZABLE FOR
*                   EACH SMF RECORD TYPE.
*                 - CHANGE KEY COLUMN INDICATORS ON RULER LINE.
*                   FIRST, LAST AND/OR ONLY IS NOW MARKED WITH A 'K'
*                   WITH HEX OFF, OR 'KS', 'KE' AND 'KK' RESPECTIVELY
*                   WITH HEX ON.  ANY PART OF THE RULER LINE CORRES-
*                   PONDING TO KEY COLUMNS IS NOW SHOWN IN RED.
*                 - NO LONGER TRANSLATE UNPRINTABLES OUT OF TAPE
*                   LABEL FORMATS BECAUSE THE DATA IS COPIED FROM THE
*                   SCREEN BUFFER WHICH HAS ALREADY BEEN TRANSLATED.
*                 - RETROFIT BRUCE LELAND'S 'HEL' COMMAND INTO THIS
*                   PROGRAM.  ('HEL' WAS ORIGINALLY DEVELOPED FROM
*                   AN EARLIER VERSION OF 'REVIEW'.)  CHANGE 'MSGS'
*                   AND 'POSIT' OPERANDS TO 'MSGID' AND 'POSITIONAL'
*                   TO MATCH TSO 'HELP' OPERANDS.  ALLOW OPERAND
*                   REQUESTS LIKE 'S013-34' AND '=X'.
*                 - MAKE RECALL INSERT CURSOR AFTER TEXT.       GP@FT
*         08FEB93 - FIX LOGIC WHEN 'HEL' UNDER 'REVIEW' UNDER
*                   ANY SORT OF 'PDS' - REPORTED BY SAM GOLOB.  GP@FT
*         03MAR93 - FIX DISPLAY OF OFFLOAD ACTIVITY MESSAGE
*                   BEFORE CALLING REVOFFLD.  IMPROVE OUTPUT DATA
*                   INTEGRITY AND NOTIFICATION WHEN OFFLOADING
*                   ALIASES AND DUPLICATE MEMBERS.              GP@FT
         EJECT
*  R17.0  03MAY93 - ADD THE 'TOP' OPERAND FOR INITIAL SPECIFICATION
*                   OF THE TOP-OF-DATA RELATIVE ADDRESS.  SO, IF
*                   TOP TTR OR BLOCK IS KNOWN BEFORE 'REVIEW' IS
*                   INVOKED THEN A 'NEWTOP' FROM WITHIN 'REVIEW'
*                   CAN BE CIRCUMVENTED.  IT ALSO ALLOWS THE
*                   REVIEWING OF DELETED MEMBERS WHEN USED BY
*                   THE 'PDSTOOLS' PRODUCT.                     GP@FT
*         14MAY93 - FIX BUG IN GETTING ESD NAME WHEN FORMATTING
*                   ZAP ID RECORDS IN "BIG" LOAD MODULES.       GP@FT
*         19MAY93 - RELOCATE PDS MEMBER DIRECTORY ENTRY
*                   FORMATTING ROUTINE IN CSECT REVPODIR TO
*                   PROVIDE BASE REGISTER CONSTRAINT RELIEF.
*                 - SUPPORT DISPLAY OF SSI FOR LOAD MODULE ALIASES.
*                 - FLAG SCLM MANAGED MEMBERS (OTHER THAN LOAD
*                   MODULES) WITH AN EQUALS (C'=') SIGN.
*                 - CHECK TPG RETURN CODE BEFORE QUERY TGET.    GP@FT
*         31MAY93 - ADD 'TTR' AS AN ALIAS OF 'TOP' FOR
*                   PDSTOOLS HANDSHAKING.  ADD 'T' AS AN ALIAS
*                   OF 'TTR'/'TOP' BECAUSE IT IS A FUNCTIONALLY
*                   UNAMBIGUOUS ABBREVIATION.  THIS 'T' ALIAS
*                   SHOULD BE REMOVED IF ANOTHER OPERAND
*                   BEGINNING WITH 'T' IS ADDED.                GP@FT
*         10JUN93 - REDUCE CHANCE OF OUT-OF-EXTENT ERRORS BY
*                   CHECKING DS1NOEPV IN REVPODIR, AND IF IT HAS
*                   CHANGED THEN CLOSE THE BPAM FILE, SO THAT IF IT
*                   IS REOPENED IT WILL HAVE ACCESS TO ALL EXTENTS.
*                 - PERFORM DIRECTORY REFRESH FOR PDSE UNCONDITIONALLY
*                   - REQUESTED BY ANN P NEE A.  DS1LSTAR CHECK DOES
*                   NOT WORK FOR A PDSE (UNLESS THE EXTENTS CHANGE).
*                   THIS REFRESH IS DONE ONLY WHEN NO SORTING WOULD
*                   BE INVOLVED (UNLESS THE REFRESH IS KNOWN TO BE
*                   REQUIRED) SO THAT RESPONSE TIMES ARE NOT TOO
*                   ELONGATED.  SORTING WOULD BE REQUIRED FOR
*                   CONCATENATED FILES, AND WHEN THE MEMBER LIST IS
*                   NOT IN MEMBER NAME COLLATING SEQUENCE.      GP@FT
         SPACE 2
*  R18.0  03AUG93 - MAKE "FASTPATH" EMPLOY TRKCALC TO GET THE BLOCKS
*                   PER TRACK INSTEAD OF A TABLE LOOK-UP AND SPECIAL
*                   CODE FOR EACH MODULO DASD TYPE.  HENCE, "FASTPATH"
*                   SHOULD NOW SUPPORT EVERY DASD TYPE GENNED INTO THE
*                   SYSTEM.  "DIV" TRIMMING SUPPORT FOR 9345 ADDED.
*                   64K TRACKS ASSUMED FOR UNKNOWN DISK TYPES.  GP@FT
*         20AUG93 - EXTRACT DB2 ROWS AS LOGICAL RECORDS WHEN
*                   REVIEWING A DB2 TABLESPACE.  ROWS ARE PRESENTED IN
*                   PHYSICAL ORDER, SO DIFFERENT TABLES COULD BE
*                   INTERMESHED UNLESS ONE TABLE PER SPACE IS OBSERVED.
*                   NO COLUMN OR DATA INTERPRETATION IS PERFORMED.
*                   CURRENTLY A 'REVVSAM' OF THE DATA COMPONENT
*                   IS REQUIRED.  USE 'DATA' TO SUPPRESS.       GP@FT
*         01SEP93 - FIX TO SUPPORT DB2 2.3 TABLESPACES.         GP@FT
*         24SEP93 - ADD ACCESS TO LINEAR CLUSTER DATA BY USING
*                   CIMODE ACCESS IF RECORD LENGTH IS ZERO.     GP@FT
*         30SEP93 - USE VSAM AS ACCESS METHOD TO ALL VSAM DATA SETS.
*                   HENCE, PATHS AND ALTERNATE INDICES CAN BE REVIEWED.
*                   IF THE DATA SET IS VSAM WITH A VTOC ENTRY (IE. A
*                   DATA OR INDEX COMPONENT) AND REVIEW IS RUNNING
*                   APF AUTHORIZED (REVVSAM) THEN BSAM WILL BE USED
*                   SO THAT VSAM DATA CAN BE BROWSED EVEN WITH BAD
*                   CATALOG/VVDS/CIDF/RDF DATA.  TO LOOK AT PAGESPACE
*                   CONTENTS USE REVVSAM WITH THE 'DATA' OPERAND.
*                   MORE-THAN-16-EXTENTS STATUS IS NOW ONLY CHECKED
*                   WHEN USING BSAM TO ACCESS VSAM.
*                 - EXTRACT DB2 ROWS WHENEVER DB2 PAGESIZE EQUALS
*                   CISIZE WHEN USING VSAM I/O.  SINCE CI SIZE IS
*                   4K, ONLY TABLESPACES WITH 4K PAGES ARE SUPPORTED.
*                   THE REVVSAM INTERFACE SUPPORTS BOTH 4K AND
*                   32K PAGE ROW EXTRACTION.                    GP@FT
*         25OCT93 - FIX REVSORTE TTR SORT CONDITION TEST.       GP@FT
*         01NOV93 - FORCE LRECL TO EQUAL BLOCKSIZE FOR FIXED
*                   LENGTH UNBLOCKED RECORDS.
*                 - FIX "CURSOR IN DATA PART OF SCREEN"
*                   DETECTION FOR ANY SCREEN WIDTH.
*                 - SHOW BAD ATTENTION IDENTIFIER IN MSG21.     GP@FT
*         22NOV93 - ADD 'FINDNOT'/'FN', 'FCN', 'FHN'/'FXN' AND
*                   'RFIND' SUBCOMMANDS.  CHANGE THE DEFAULT
*                   OF PF5 AND PF17 FROM 'FIND' TO 'RFIND'.     GP@FT
*         23NOV93 - FIX HEL SUBCOMMAND LOCATE BUG REPORTED BY
*                   'PDSTOOLS' USER VIA BRUCE LELAND.  COULD
*                   GET HELP FOR 'ABCD' WHEN 'ABC' REQUESTED.   GP@FT
*  R19.0  05JAN94 - ADD LOGREC RECORD FORMATTING.  ADD 'EREP'
*                   SUBCOMMAND TO CONTROL LOGREC RECORD FORMATTING.
*                   FIDDLE WITH DEFAULTS OF PFKS 4 (TSO), 13
*                   (TOP), 14 (BOTTOM) AND 18 (EREP).           GP@FT
*         08FEB94 - PASS BLANKS IN VOLUME SERIAL FIELD (UNLESS
*                   NON-FIRST DATA SET IN A CONCATENATION) TO ISPF
*                   WHEN EDIT/BROWSE DATA SET IS SMS-MANAGED.  THIS
*                   PREVENTS EDIT RECOVERY FAILURE WHEN THE TARGET
*                   DATA SET HAS BEEN RECALLED TO A DIFFERENT VOLUME.
*                   (SMS-MANAGED DATA SETS MUST BE CATALOGED.)  NOTE
*                   THAT THIS PROBLEM MAY STILL BE EXPERIENCED FOR
*                   NON-SMS DATA SETS.
*                 - MOVED SUBCOMMAND TABLE BEYOND BASE REGISTER
*                   RANGE FOR BASE REGISTER CONSTRAINT RELIEF.
*                 - ALLOW THE USE OF BPAM FOR SUBSYSTEM DATA SETS.
*                 - UPDATE MACRO FORM TO DISABLE NOTE/POINT FOR
*                   BSAM ACCESS OF SUBSYSTEM DATA SETS.
*                 - ADD A MEANING TO THE 'DATA' OPERAND WHICH IS TO
*                   FORCE USE OF BSAM (AS OPPOSED TO BPAM) TO ACCESS
*                   A SUBSYSTEM DATA SET EVEN IF A MEMBER NAME IS
*                   SPECIFED.  THE SPECIFIED MEMBER WILL BE
*                   DIRECTLY ACCESSED BUT 'MEM' WILL NOT WORK.
*                   (BSAM AND BPAM ACCESS OF LAM SUBSYSTEM DATA
*                    SETS (CA-LIBRARIAN) HAS NOW BEEN TESTED.)  GP@FT
         EJECT
*  R20.0  09MAY94 - ADD AN EXTRA '9' TO BOTNINES.
*                 - MOVE SNAP MACRO AND SNAP DCB TEMPLATES FROM
*                   MAIN CONTANTS AREA TO SNAP SUBROUTINE FOR BASE
*                   REGISTER CONSTRAINT RELIEF.
*                 - DO NOT FORCE MINIMUM SYSUT2 LRECL OF 80 WHEN
*                   '=SEQLOAD' IS ISSUED.  IT IS STILL REQUIRED BY
*                   '=OFFLOAD' FOR IEBUPDTE COMPATIBILITY.
*                 - ALLOW UP TO 9 DIGITS FOR LIST/LOCATE/UP/DOWN, AND
*                   ALLOW NO MORE THAN 5 DIGITS FOR LEFT/RIGHT.
*                 - DISALLOW 'XCTL' IF 'REVIEW' AND NOT 'HEL'.
*                 - ADD 'APPEND' AND 'CUTOFF' SUBCOMMANDS.
*                 - TIDIED UP MSG14 STUFF.                      GP@FT
*         07JUN94 - CORRECT STCKCONV MINUTES/SECONDS DISPLAY.   GP@FT
         SPACE 2
*  R21.0  05JUL94 - ADD 'ALL' OPERAND TO FIND/FINDNOT COMMANDS.
*                 - ADD 'RESET' ('RES') COMMAND.                GP@FT
*         15JUL94 - CHANGE APL/GE DEFAULT SUPPORT FROM "3278A"
*                   TO "3278T" (BETTER FOR MACLIB COMMENTS).
*                 - ADD 'DISPLAY'/'DISP' COMMAND TO TOGGLE
*                   BETWEEN "3278A" AND "3278T".                GP@FT
*  R21.1  28JUL94 - FIX BAD DISPLAY CODE FOR "3278T" WHEN NO
*                   HIGHLIGHTING SUPPORT.                       GP@FT
*  R21.2  25OCT94 - FLAG FOR UPDATED "REVSMF" SUBROUTINE.       GP@FT
         EJECT
*  R22.0  14NOV94 - FIX SCREEN HANDLING PROBLEMS:
*                   PROBLEM REPORTED BY JOHN H. KEITH FROM MIAMI
*                   IN FLORIDA:
*                     WHEN LOGGED ON TO A MODEL-5 SCREEN (27 BY 132)
*                     UNDER ISPF BUT ISPF DATA DOES NOT EXCEED 80
*                     COLUMNS ISPF PUTS THE SCREEN INTO MODEL-2 (24
*                     BY 80) MODE TO ENHANCE READABILITY.  (GOOD.)
*                     WHEN A TSO COMMAND IS ISSUED ISPF DOES A STSIZE
*                     TO RESTORE 27 BY 132, AND A STLINENO LINE=1,
*                     MODE=OFF SO THAT WHEN THE NEXT LINE-MODE OUTPUT
*                     IS ISSUED TSO WILL DISPLAY THE OUTPUT WITH AN
*                     ERASE/WRITE ALTERNATE COMMAND WHICH WILL SET THE
*                     HARDWARE (IE. THE SCREEN) TO THE ALTERNATE (IE.
*                     27 BY 132) SCREEN SIZE.  (IF YOU INVOKE ISPF WITH
*                     A PARTICULAR SCREEN SIZE, THEN ISPF ASSUMES YOU
*                     WANT TO USE THAT SIZE FOR NATIVE TSO I/O.  IF
*                     THIS IS THE CURRENT ISPF SCREEN SIZE THEN ISPF
*                     DOES NO STSIZE AND SEEMS TO DO A STLINENO LINE=20
*                     OR SO.  IF THESE RAMBLINGS ARE CORRECT, WHEN
*                     SUBMITTING FROM EDIT ON A MODEL-2 WE GET THE
*                     SUBMITTED MESSAGE ON AROUND LINE 20, AND THE
*                     NOTIFY ON LINE 1 AFTER A SCREEN ERASURE.  ALSO,
*                     SUBMITTING *LINE-NUMBERED* JCL FROM A MODEL-5
*                     GIVES A SUBMITTED MESSAGE ON LINE 1 IN 132-
*                     COLUMN MODE AND THE NOTIFY ON LINE 1 IN 80-
*                     COLUMN MODE.  JOHN: PLEASE TEST THIS THEORY.)
*                     NOW, WHEN A TSO COMMAND INVOKES A FULLSCREEN
*                     APPLICATION FROM ISPF (MODEL-5 SCREEN IN MODEL-2
*                     MODE), THE APPLICATION (LIKE 'REVIEW' OR 'HEL')
*                     DOES A GTSIZE TO GET THE SCREEN SIZE (HENCE THE
*                     MACRO NAME), THEN TURNS ON FULLSCREEN MODE BEFORE
*                     ANY I/O TO THE SCREEN HAS OCCURRED, AND THEN
*                     SENDS OUT A DATA STREAM TO SUIT THIS SIZE.  BUT,
*                     WHILE STSIZE AND GTSIZE DEAL WITH THE SCREEN SIZE
*                     AS KNOWN BY THE SOFTWARE, THE PITY OF IT IS THAT
*                     NO-ONE TOLD THE HARDWARE.  AS A RESULT, WE GET A
*                     PROG402 OR SOME SUCH FROM TRYING TO WRITE TO A
*                     BUFFER LOCATION GREATER THAN 1,919 SO THE USER
*                     HAS TO HIT PA1, WHEREUPON TSO RESYNCHRONIZES THE
*                     H/W SCREEN SIZE TO THE S/W SCREEN SIZE.  THIS
*                     PROGRAM WILL NOW ISSUE ERASE/WRITE ALTERNATE UPON
*                     ENTRY IF THE SCREEN HAS MORE THAN 80 COLS.
*                   PROBLEM REPORTED BY DIETMAR WITZLEB AT DEET IN
*                   CANBERRA:
*                     WHEN EXITING FROM 'REVIEW' UNDER PFD ON TSS ON
*                     AN MSP SYSTEM USING A COLOUR 3270 SCREEN, PFD
*                     DATA WHICH WAS BLUE HAS TURNED GREEN.  THIS IS
*                     BECAUSE THE SCREEN WAS NOT RESET AT THE END OF
*                     FULLSCREEN MODE.  ISPF SUPPLIES COLOUR INFO FOR
*                     ITS DATA BUT PFD DOES NOT.  THIS PROGRAM WILL
*                     NOW RESET THE TERMINAL (FOR 4-COLOUR MODE) UPON
*                     EXIT WHENEVER USED ON AN MSP SYSTEM.  THIS HOLDS
*                     FOR 3270 AND 668X SCREENS.  FOR THE FULL
*                     WAFFLE, SEE THE COMMENTS AFTER THE LABEL
*                     'NOSTSIZE' IN THE SOURCE BELOW.           GP@FT
*  R22.1  15MAR95 - FIX EREP FORMATTING ERRORS FOR PRE-SP4 SYSTEMS
*                   WHICH WERE CAUSING INVALID TERMINAL DATA STREAMS.
*                 - FIX OFFLOAD LRECL AND BLKSIZE CALCULATIONS TO
*                   AVOID HALFWORD OVERFLOW.  THIS MEANS THAT SMF
*                   RECORDS CAN NOW BE CUT.                     GP@FT
         SPACE 2
*  R23.0  23MAR95 - CONVERT OUTPUT DATA TO EBCDIC FROM ASCII
*                   WHEN CUTTING RECORDS WITH 'ASCII ON'.
*                   BY PUBLIC DEMAND.                           GP@FT
         SPACE 2
*  R24.0  02MAY95 - FIX WRONG DDNAME WHEN 'DATA' USED WITH PDS
*                   DATA SETS - REPORTED BY SEVERAL USERS.
*                 - ASSUME END OF DIRECTORY WHEN MEMBER NAME IS
*                   HIGH VALUES AND TTR IS 3 NULLS.  IE. DON'T
*                   REQUIRE 4 NULLS FOR TTRN.  (GOOD FOR MSP.)
*                   (THIS STILL ALLOWS 2**64 DIFFERENT MEMBER NAMES
*                   BECAUSE AN ACTUAL MEMBER DOES NOT HAVE A 0 TTR.)
*                 - LOOK FOR TSSEXEC INSTEAD OF TSOEXEC UNDER MSP.
*                 - PERFORM QUERY UNDER MSP EVEN IF THE QUERY BIT
*                   IS OFF WHEN NO FUJITSU "SPECIALTY" FLAGS ARE
*                   RETURNED BY THE TERMTYPE MACRO.  THE MOST LIKELY
*                   TERMINAL IS A PC (OR REAL 3270) WHICH CAN DO
*                   IBM EDS BUT NOT FUJITSU EXTENSIONS.         GP@FT
         SPACE 2
*  R25.0  04AUG95 - ALLOW HEL TO HANDLE MSGID AND POSITIONAL.
*                 - XCTL TO TSO HELP FOR PUTLINE OUTPUT IF MSGID
*                   REQUESTED UNDER PDS OR PDSTOOLS.
*                 - REORGANIZE TSO PARSING MACROS TO REDUCE SIZE.
*                 - HANDLE TSO HELP )I CONTROL STATEMENTS.
*                 - SUPPRESS DISPLAY OF TSO HELP COMMENT LINES.
*                 - AVOID I/O MACROS WHEN FETCHING DATA FROM DIV.
*                 - MAKE HELP SUBCOMMAND NO LONGER SHOW PFK VALUES
*                   BUT GO DIRECTLY TO TSO HELP MEMBER CONTENTS.
*                   (USE 'KEYS' OR '?' TO SHOW CURRENT PFK VALUES.)
*                 - XCTL TO TSO HELP FOR "OFFICIAL" MESSAGES IF
*                   THE TSO HELP DATA SET APPEARS UNSUITABLE.
*                 - SUSPEND FIND/FINDNOT ALL PROCESSING TO SPEED
*                   UP SCREEN I/O RESPONSE AFTER ATTENTION.     GP@FT
*  R25.1  14SEP95 - FIX FIND/FINDNOT ALL PROCESSING IF ALREADY
*                   AT TOP.  ALLOW HEL BLANK MEMBER SELECTION.  GP@FT
*  R25.2  19OCT95 - FIX SCROLL UP BUG WITH DIV WHEN LAST LINE
*                   OF SCREEN HAS LAST RECORD OF BLOCK.  DON'T
*                   USE DIV IF PDS RECFM=VB SO THAT DIV DOESN'T
*                   OVERLAY SHORT RECORDS AT THE START OF GET'S
*                   DEBLOCKING BUFFER WITH A LONGER RECORD.     GP@FT
*  R25.3  17NOV95 - USE &HEL TO RECOGNIZE FULLSCREEN HELP
*                   INVOCATION.  ABBREVIATIONS ALLOWED BECAUSE
*                   COMPARE STOPS WHEN A BLANK IS ENCOUNTERED.  GP@FT
*  R25.4  27DEC95 - FIX RED RULER HANDLING OF KEYED FILES WHEN
*                   RKP > 0, INCLUDING WHEN DCBKEYLE IS ZERO.   GP@FT
         SPACE 2
*  R26.0  15FEB96 - ALTER MAIN OPEN ABEND EXIT AND ADD DIRECTORY
*                   OPEN ABEND EXIT TO TRAP OPEN ABENDS SO THAT
*                   THE DATA SET CAN BE FREED BY REVIEW BEFORE
*                   TERMINATION, AND NOT HOGGED TO HOLD UP BATCH.
*                   SECURITY ABENDS (S913) ARE CAUGHT FOR RACF,
*                   BUT NOT, IT SEEMS, ACF2.
*                 - ADD SUPPORT FOR 'FSHELP' AS ALIAS OF 'HEL'.
*                 - ADD THE '=X' AND '=CAN' MEMBER LIST COMMANDS.
*                 - ADD GENERAL RECORD FORMATTING BASED ON ASSEMBLER
*                   DS (AND DC) STATEMENTS.  THESE STATEMENTS ARE
*                   READ VIA THE (PRE-ALLOCATED) 'REVFMTS' FILE
*                   WHICH MUST BE PARTITIONED.
*                   ALSO ADD THE SUBCOMMANDS 'FORMAT'/'FMT' TO
*                   CONTROL FORMATTING ACTIVATION/DEACTIVATION,
*                   AND 'FMTVAR'/'FV' TO OVERRIDE THE DATA TYPE
*                   OF PARTICULAR DATA ITEMS (VARIABLES).       GP@FT
*  R26.1  22MAY96 - CHANGE DAYCENTI FROM 8460000 TO 8640000.
*                   (SMF RECORDS FROM 23:30 TO 24:00 WERE NOT
*                   BEING FORMATTED BY "SMF ON".)
*                 - FIX BUG WITH CUT TO E-O-F WHERE DATA PAST E-O-F
*                   WAS SHOWN AFTER CUT COMPLETED.              GP@FT
*  R26.2  29AUG96 - ADD 'REST' OPERAND TO FIND SUBCOMMAND FAMILY.
*                 - USING CODE DONATED BY BRUCE LELAND WITH SOME
*                   INPUT FROM MIKE SHAW TO DETERMINE IF DIRECTLY
*                   ATTACHED FROM ISPF OPTION 3.4, AND IF SO THEN
*                   USE THE VOLUME FROM THE DATA SET LIST IF THE
*                   DATA SET IS UNCATALOGUED.  NOTE THAT THE 3.4
*                   PROGRAM NAME OF 'ISRUDL' IS HARD-CODED.  A
*                   DASH PRECEDES THE VOLUME ON THE TOP LINE OF
*                   THE SCREEN IF THE VOLUME USED WAS COPIED
*                   FROM THE ISPF VARIABLE 'ZDLVOL'.            GP@FT
         SPACE 2
*  R27.0  13NOV96 - ADD 'EP0', 'EPXXXXXX', AND 'PG' PROGRAM
*                   ATTRIBUTES TO DIRECTORY DISPLAY.
*                 - ADD REVSRCH CSECT AND '=SEARCH' COMMAND TO
*                   INVOKE IT.  REPLACE 'O' SELECTION CODE WITH
*                   'T' TO TAG MEMBERS FOR OFFLOAD AND/OR SEARCH.
*                 - MOVE DIRECTORY DISPLAY SUBCOMMANDS TO A TABLE.
*                 - ADD '=TAGFLIP', '=RESET' AND VARIOUS ALIASES
*                   AS DIRECTORY DISPLAY SUBCOMMANDS.
*                 - IF ANY MEMBER IS TAGGED THEN PF5/17 FUNCTIONS
*                   AS 'FIND/LOCATE NEXT TAGGED MEMBER'.
*                 - LET FULLSCREEN HELP ACCESS NATIVE REVIEW (NOT
*                   ISPF) FUNCTIONS FROM DIRECTORY DISPLAY.  EG.:
*                   OFFLOAD HELP OF A SINGLE COMMAND CAN CONSOLIDATE
*                   MANY MEMBER INCLUSIONS TO A SINGLE FILE.
*                 - ADD '=HELP' FOR HELP PANEL DISPLAY.
*                 - TREAT BLOCKED KEYED FILES AS UNBLOCKED WHEN
*                   BLOCKING FACTOR IS 1 TO AVOID 2 SCREEN LINES
*                   PER RECORD.  BUG REPORTED BY BRUCE LELAND.  GP@FT
         SPACE 2
*  R28.0  04DEC96 - ADD REVPNS CSECT FOR "POINT-AND-SHOOT".
*                   PLACE THE CURSOR ON A DATA SET NAME AND
*                   INVOKE REVIEW WITHOUT OPERANDS.  NOTE THAT
*                   THIS IS TSO BASED AND NOT ISPF BASED SO IT
*                   WORKS IN LINE MODE AND FULLSCREEN MODE.
*                   UNFORTUNATELY SESSION MANAGER UPDATES THE
*                   SCREEN BEFORE REVIEW GETS CONTROL SO IT
*                   PROBABLY WON'T BE TOO USEFUL THERE.         GP@FT
*  R28.1  06JAN97 - ADD SUPPORT TO REVIEW NON-FIRST OCCURRENCES
*                   OF SAME-NAMED MEMBERS IN A CONCATENATION.   GP@FT
*  R28.2  15JAN97 - TURN OFF FULLSCREEN MODE BEFORE ISSUING A
*                   TERMINATING ERROR MESSAGE.  "POINT-N-SHOOT"
*                   LEFT TSO 'READY' PROMPT IN FULLSCREEN MODE,
*                   REQUIRING PA1 TO FIX.  REPORTED BY ABL.
*                 - LET PF5/17 FIND TOP MEMBER IF TAGGED.       GP@FT
*  R28.3  04MAR97 - AVOID S0C4/INCORROUT WITH SORT PFK AFTER
*                   =HELP BY CLEARING COMMAND FROM SELMEMNM.    GP@FT
*  R28.4  08MAY97 - DEBUG AND IMPROVE FORMAT PROCESSING,
*                   ESPECIALLY FOR SMF MACROS IN SYS1.MACLIB
*                   BY HANDLING SOME 'ORG' AND 'EQU' CASES.
*                   RDW ASSUMED TO BE IN DSECT WHEN RECFM=V(B).
*                   SEE HELP FOR 'FORMAT'/'FMT' FOR EXAMPLES.   GP@FT
         SPACE 2
*  R29.0  26JUL97 - MAKE 'FIND'/'F'/'FINDNOT' CASE INSENSITIVE.
*                   'FINDCHR'/'FC'/'FCN' REMAIN CASE SENSITIVE.
*                 - ADD 'FINDPIC'/'FP'/'FPN' SUBCOMMANDS TO SEARCH
*                   FOR PICTURE STRINGS - ISPF CONVENTIONS APPLY.
*                 - ADJUST "POINT-AND-SHOOT" TO USE INTERNAL ISPF
*                   SCREEN BUFFER IF "APPROPRIATE".
*                 - AVOID A FEW MORE UNNECESSARY TSO SCREEN
*                   CONTROL MACROS FOR RECURSIVE REVIEW SESSIONS.
*                 - ADD '=C'/'=E'/'=F'/'=REF' ABBREVIATIONS
*                   FOR MEMBER LIST SUBCOMMANDS.
*                 - MINOR COSMETICS FOR =SEARCH PANEL.
*                 - MINOR FIX IN HANDLAPL ROUTINE.
*                 - MAKE SCREENW BIG ENOUGH FOR 62 BY 160.  (ONLY
*                   4&1/2 YEARS AFTER THE SUPPORTING CODE WAS ADDED.)
*                 - ISSUE RACROUTE BEFORE OPENING NON-PRE-ALLOCATED
*                   NON-VSAM DATA SETS TO AVOID HOGGING INACCESSIBLE
*                   FILES BY AVOIDING S913 ABEND SO THAT REVIEW
*                   CAN ALSO FREE THE FILE.  THE OPEN ABEND EXITS
*                   ADDED EARLIER ARE SUFFICIENT FOR RACF.      GP@GE
*  R29.1  07SEP97 - SHOW BLANKS FOR AC CODE IN MEMBER LIST IF
*                   APF DATA NOT PRESENT (<=PROGRAM OBJECTS).   GP@GE
*  R29.2  28NOV97 - DISALLOW PICTURE SEARCHES IF ASCII ON.
*                 - HANDLE CASE INSENSITIVE SEARCH FOR ASCII.
*                 - CONVERT FIND TO FINDCHR IF NO ALPHABETICS
*                   IN STRING FOR SIGNIFICANT CPU SAVINGS.
*                 - IMPROVE PDS SEARCH STATUS INDICATORS.       GP@GE
*  R29.3  11DEC97 - FIX ZAP IDR FORMATTING TO GET 2 ENTRIES ON
*                   LINE EVEN IF ESDID VALUES ARE INVALID.      GP@GE
*  R29.4  16JAN98 - IMPROVE PARSING FOR MISSING TRAILING QUOTE.
*                 - ALLOW QUOTING BY DOUBLE-QUOTES.
*                 - FIX RECURSION DETECTION.                    GP@GE
*  R29.5  23JAN98 - SHOW DCB/ACB AND @DATA ADDRESSES IN DEBUG.  GP@GE
*  R29.6  30JAN98 - ALLOW FIND OF A QUOTE CHARACTER.
*                 - FIX S0C4S WITH UNEXPECTEDLY LONG INPUT.     GP@GE
*  R29.7  10APR98 - SUPPLY SUBMIT CMD LENGTH TO PARSING.        GP@GE
*  R29.8  13MAY98 - HANDLE HIDDEN RDW FOR DSECT FORMATTING.     GP@GE
*  R29.9  21MAY98 - FIX DATA CORRUPTION CAUSED BY OVERLAY OF
*                   TRANSLATE TABLE WHEN QUERY RESPONSE IS MORE
*                   THAN 256 BYTES.  OCCURRED ON OS/2 WITH CM/2.
*                 - PASS FULL ON/OFF STATUS UP AND DOWN RECURSIVE
*                   REVIEW SESSIONS.
*                 - REPORT BIND TIME WITH NEW BINDER IDR FORMAT
*                   CREATED BY APAR OW29593.
*                 - RESET LINKAREA DCB TO AVOID S806 WITH A LINK
*                   AFTER DISPLAY OF DIRECTORY HELP PANEL.
*                 - FIX IDR DATA EXTRACTION DIV ACCESS LOGIC FLAW
*                   FOR ESD FORMATTING.  DESIGN CAPACITY LIMITATION
*                   STILL EVIDENT FOR PROGRAMS LIKE ARCCTL WHERE
*                   WHERE MANY MANY CSECTS ARE COMPILED AT ONCE.
*                 - FIX BITROT DECAY TO OFFSETS USED IN IMS PDS
*                   USER DATA PROCESSING IN MEMBER LIST ROUTINE.
*                   ** APAR RESEARCH, QUERY BUG AND IMS BUGS
*                   REPORTED BY ROB VAN RIEL AT ANZ BANK.       GP@GE
*  R29.A  22MAY98 - FIX IMS ACBLIB ENTRY LENGTH ON STORE.
*                   ALSO SHIPPED AS A ZAP.                      GP@GE
*  R29.B  29JUL98 - ADD "JUMP FROM LEADER DOTS" IN MEMBER LIST. GP@GE
*         07AUG98 - DELETE 'TTR' AND 'T' OPERANDS AND MAKE
*                   'TTR' AN ALIAS OF 'TOP'.                    GP@GE
*         21AUG98 - SUPPORT REVIEW OF VTOC ('FORMAT4.DSCB').
*                 - LET 'FMT ON' FORMAT VTOC WITHOUT REVFMTS.   GP@GE
*  R30.0  01SEP98 - SUPPORT PARMLIB LOGICAL SERVICE.
*                   ('REV PARMLIB F' WITH NO PARMLIB FILE.)     GP@GE
*  R30.1  28SEP98 - PREVENT CLEARING OF SCREEN WHEN RECALL
*                   ISSUED ON A WIDE SCREEN.                    GP@GE
*  R30.2  07OCT98 - FIX S0C4 ON EXIT OF RECURSIVE HELP.         GP@GE
*  R30.3  22FEB99 - TURN OFF FULLSCREEN MODE FOR RECURSIVE REVIEW
*                   SO THAT TSO PROMPTING CAN PROCESS TERMINAL INPUT.
*                 - COMMENT OUT 2 STTMPMD MACROS TO CIRCUMVENT TSO
*                   BUG FOUND IN OS/390 2.4 (INTERCOM MSGS LOST).
*                 - CHANGE 'LR' TO 'LD' FOR CESD FORMATTING BECAUSE
*                   IT IS REALLY A LABEL DEFINITION, NOT A REFERENCE.
*                 - MOVE PDS DIRECTORY FILE I/O ROUTINE IN REVPODIR
*                   FOR BASE REGISTER CONSTRAINT RELIEF.
*                 - INCREASE REVPODIR GETMAIN UPPER LIMIT FROM 512K
*                   TO 768K FOR AROUND 15,000 MEMBERS WITH SPF STATS
*                   WHICH ONE SITE HAD IN SOURCE MASTER LIBRARY.
*                 - REDUCE NAME AND TTR MEMBER LIST SORT TIME
*                   BY 10%-20% (BIGGER SORT --> BIGGER %AGE).   GP@P6
         SPACE 2
*  R31.0  06JUN99 - ADD =SETFILE COMMAND TO OVERRIDE SYSUT2 USAGE.
*                 - ADD REVLOAD CSECT FOR =PDSLOAD COMMAND.
*                   WHICH INVOKES THE PDSLOAD (OR REVLMOD) PROGRAM.
*                 - ADD REVDLNK CSECT FOR =DELINK COMMAND,
*                   WHICH INVOKES THE DELINKI PROGRAM.
*                 - SEPARATE = COMMANDS AND MEMBER SELECTION CODES
*                   HELP INTO THEIR OWN HELP PANELS.
*                 - REMOVE REVSMF CSECT INTO ITS OWN LOAD MODULE
*                   WHICH CAN RESIDE ABOVE THE LINE.
*                 - ALLOW =OFFLOAD TO PROCESS UNDEFINED RECORD
*                   FORMAT LIBRARIES.  (REVLMOD WRITTEN FOR RELOAD.)
*                 - FORMAT FIRST TRANSLATOR IDR SLOT IF SECOND SLOT
*                   HAS A ZERO JULIAN DAY.  THIS SEEMS TO BE
*                   CAUSED BY A BUG IN EXPEDITER.               GP@P6
*  R32.0  25OCT99 - ADD ZIP FILE CENTRAL DIRECTORY FORMATTING.
*                 - CHANGE 'SPACE' INSTRUCTIONS IN SOURCE CODE
*                   TO BLANK LINES.
*                 - USE UNZIP PRODUCT IF PRESENT TO ALLOW THE
*                   REVIEWING OF UNZIPPED DATA.                 GP@P6
*         30NOV99 - PROCESS ".PCX" FILES IF TSO TERMINAL HAS
*                   APPROPRIATE 3270 GRAPHICS CAPABILITY.
*                   ADD REVIMAGE CSECT TO OUTPUT RASTER OR
*                   CHARACTER (LOADED SYMBOL) GRAPHICS.
*                 - USE NOEDIT INPUT MODE ONLY FOR QUERY AND
*                   READ BUFFER PROCESSING.                     GP@P6
*         28DEC99 - ADD 'PICDATA' SUBCOMMAND.                   GP@P6
*         10JAN00 - SPEED UP DIV CHAINED RECORD STORE/RETRIEVE
*                   BY REMEMBERING PREVIOUS ACCESS DETAILS.
*                 - ADD REVGDDM CSECT TO CALL GDDM TO OUTPUT
*                   VECTOR GRAPHICS FOR PICTURE RENDERING.
*                 - REMOVE SUBROUTINE CSECTS TO REVSUBS SOURCE
*                   MEMBER TO IMPROVE SOURCE EDIT MANAGABILITY.
*                 - SPEED UP ACCESS TO UNZIPPED DATA.           GP@P6
*  R32.1  15FEB00 - FIX IMS ACBLIB OFFSET BITROT IN REVPODIR.
*                 - ADD IMS ACBLIB Y2K WINDOWING IN REVPODIR.   GP@P6
*  R32.2  27APR00 - CHANGE REVPODIR TO NOT OVERLAY A PDSE
*                   RMODE24 SIZE TOTAL WITH THE LITERAL 'PDSE'.
*                 - USE CORRECT REGISTER FOR UNZIPERX TO
*                   NEWTOP BRANCH TO FIX S0C1 ABEND.            GP@P6
*         05MAY00 - HANDLE MIXED CASE ZIPPED FILE QUALIFIERS.   GP@P6
*
***********************************************************************
         EJECT
***********************************************************************
*
*        NOTES.
*         KNOWN BUGS.
*
*          NON-PARTITIONED DISK FILES WITH FIXED-LENGTH RECORDS AND
*          NON-STANDARD BLOCKING (IMBEDDED SHORT OR MISSING BLOCKS)
*          MAY BE DISPLAYED WITH INCORRECT LINE COUNTS.  USING THE
*          'FIND' SUBCOMMAND FROM THE TOP OR SCROLLING DOWN BY A
*          PAGE OR LESS AT A TIME WILL ENSURE A CORRECT LINE COUNT,
*          OR JUST ISSUE 'NEWTOP' AND PROCEED AS NORMAL.
*
*          NOTE THAT IT IS POSSIBLE WITH FIXED-LENGTH RECORD NON-
*          PARTITIONED DISK FILES TO REVIEW PAST I/O ERRORS (OR, IF
*          DS1LSTAR IN THE VTOC IS ZAPPED, PAST END-OF-FILE MARKS)
*          WITH 'LIST', 'DOWN' AND 'BOTTOM' AS LONG AS NO ATTEMPT IS
*          MADE TO READ THE RECORD(S) CAUSING THE ERRORS.
*
*          SCROLLING UP ON OTHER THAN THE FIRST VOLUME OF A MULTI-
*          VOLUME DATA SET MAY NOT WORK PROPERLY.  IN ANY EVENT,
*          SCROLLING UP TO A PREVIOUS VOLUME IS NOT PERFORMED.  'TOP'
*          WILL DISPLAY THE FIRST RECORDS OF THE CURRENT VOLUME.
*          PROCESSING MAY BE SLOW AFTER END-OF-FILE IS ENCOUNTERED
*          ON TAPE BECAUSE IT MUST BE REWOUND TO AVOID I/O ERRORS.
*
*          WHEN INVOKED FROM A SCREEN THAT HAS THE VTAM QUERY BIT ON
*          'REVIEW' WILL ISSUE A READ PARTITION (QUERY) STRUCTURED
*          FIELD AND VERIFY SUPPORT OF AT LEAST NEUTRAL AND SEVEN
*          OTHER COLOURS AND THREE EXTENDED HIGHLIGHTINGS BEFORE
*          ENABLING 7-COLOUR MODE AUTOMATICALLY.  THE 'COLOUR' COMMAND
*          MAY BE USED SAFELY WITH "MODERN" MONOCHROME SCREENS SUCH AS
*          THE 3180 AND 3192-D TO ACTIVATE EXTENDED HIGHLIGHTING.
*
*          SPANNED RECORDS LONGER THAN 32K WILL NOT BE HANDLED
*          CORRECTLY.  LRECL=X IS NOT SUPPORTED BY 'REVIEW'.  'REVIEW'
*          ASSUMES ANY VSAM COMPONENT MAY HAVE SPANNED RECORDS UP TO
*          32760 BYTES LONG.  (KSDS) LOGICAL RECORDS WITH SEGMENTS
*          PHYSICALLY OUT OF ORDER WILL NOT BE ASSEMBLED CORRECTLY.
*          VSAM LOGICAL RECORD PROCESSING ASSUMES CONTROLINTERVALSIZE
*          EQUALS PHYSICAL BLOCKSIZE, WHICH IS NOT ALWAYS TRUE,
*          ALTHOUGH THIS MAY NOW BE HANDLED CORRECTLY IN MOST CASES
*          AS A RESULT OF VVDS LOOK-UP PROCESSING.
*
*          IF THE TSO SERVICE ROUTINE 'IKJEFTSR' (WITH ITS FRONT-END
*          'TSOEXEC') IS NOT INSTALLED THEN COMMANDS INVOKED BY THE
*          'TSO' SUBCOMMAND WHICH DO NOT RESTORE REGISTERS CORRECTLY
*          WILL PROBABLY CAUSE 'REVIEW' TO ABEND.  'TSOEXEC' WILL NOT
*          BE USED IN AN APF AUTHORIZED ENVIRONMENT IN ORDER TO AVOID
*          SERVICE ROUTINE RETURN CODE 20 WHEN ISSUING AN UNAUTHORIZED
*          TSO COMMAND FROM WITHIN 'REVIEW'.  UNDER DFP VERSION 3 AN
*          APF AUTHORIZED ENVIRONMENT IS REQUIRED TO REVIEW VSAM
*          COMPONENTS.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         THE FOLLOWING HAVE CONTRIBUTED IMPROVEMENTS TO THIS PROGRAM:
*
*          ABL - A. BRUCE LELAND
*          GP  - GREG PRICE
*          AW  - TONY WATSON
*
*
*         IF YOU ENCOUNTER ANY PROBLEMS WITH THIS COMMAND THEN DON'T
*         BE SURPRISED.  YOU MAY CHOOSE TO
*          A) FIX IT                   -OR-
*          B) IGNORE IT                -OR-
*          C) SEND DETAILS TO ME SO THAT I CAN
*             A) FIX IT                   -OR-
*             B) IGNORE IT                -OR-
*             C) NOT BE SURPRISED.
*
*      GREG PRICE OF PRYCROFT SIX PTY LTD
*         (FORMERLY OF GE CAPITAL INFORMATION TECHNOLOGY SOLUTIONS
*                      ASIA-PACIFIC
*                 WHICH WAS FORMERLY FERNTREE COMPUTER CORPORATION)
*         (FORMERLY OF THE STATE ELECTRICITY COMMISSION OF VICTORIA)
*
*
*         INTERNET CONTACT VIA:          GPRICE@OZEMAIL.COM.AU
*                (WAS GIPRICE@IBM.NET)  GIPRICE@ATTGLOBAL.NET
*
***********************************************************************
         EJECT
***********************************************************************
*
*         SYNTAX - REVIEW DSNAME {VOLUME(..) UNIT(..)} {QUICK} {DATA}
*                                         {SUBSYS(..)} {TOP(..)}
*          OR      REVIEW DDNAME FILE
*
*         THE SCREEN WILL NORMALLY CONTAIN 20 RECORDS, ONE PER LINE,
*         80 CHARACTERS PER LINE.  TO DISPLAY RECORDS LONGER THAN 80
*         BYTES, THERE IS A 'RIGHT' SUBCOMMAND WHICH CAUSES DATA TO
*         THE RIGHT OF THE DATA ON THE SCREEN TO BE DISPLAYED.
*         THE 'LEFT' SUBCOMMAND CAN THEN BE USED TO DISPLAY DATA
*         BACK TOWARDS THE FRONT OF THE RECORD.
*
*         SUBCOMMANDS -
*         UP       - DISPLAY RECORDS ABOVE THOSE ON THE SCREEN
*         DOWN     - DISPLAY RECORDS BELOW THOSE ON THE SCREEN
*         TOP      - DISPLAY THE FIRST RECORDS
*         BOTTOM   - DISPLAY THE LAST RECORDS
*         RIGHT    - DISPLAY DATA TO THE RIGHT
*         LEFT     - DISPLAY DATA TO THE LEFT
*         LIST     - DISPLAY A SPECIFIED RECORD NUMBER
*         FIND     - SEARCH FOR A SPECIFIED STRING
*         FINDCHR  - SEARCH FOR A SPECIFIED CHARACTER STRING
*         FINDHEX  - SEARCH FOR A SPECIFIED HEXADECIMAL STRING
*         FINDPIC  - SEARCH FOR A SPECIFIED PICTURE STRING
*         FINDSMF  - SEARCH FOR A SPECIFIED SMF RECORD TYPE
*         FINDNOT  - SEARCH FOR OTHER THAN A SPECIFIED STRING
*         RFIND    - REPEAT LAST FIND OR FINDNOT OPERATION
*         HELP     - DISPLAY PFK SETTINGS AND 'REVIEW' HELP INFORMATION
*         FULL     - USE FULL EBCDIC OR JUST KEYBOARD CHARS FOR DISPLAY
*         ASCII    - SWITCH TRANSLATION OF DATA INTO EBCDIC ON/OFF
*         RECALL   - RECALL COMMANDS PREVIOUSLY TYPED IN
*         HEX ON   - DISPLAY DATA IN HEXADECIMAL FORMAT
*         HEX OFF  - TURN OFF HEXADECIMAL FORMATTING
*         HEX      - SWITCH HEXADECIMAL FORMATTING ON/OFF
*         COLOR ON - DISPLAY DATA IN 7-COLOUR MODE
*         COLOR OFF- TURN OFF 7-COLOUR DISPLAY MODE
*         COLOR    - SWITCH 7-COLOUR DISPLAY ON/OFF
*         PFKNN    - CHANGE DEFINITION OF PF KEY NN
*         SMF ON   - DISPLAY SMF RECORDS WITH TIME AND DATE FORMATTED
*         SMF OFF  - TURN OFF SMF FORMATTING
*         SMF      - SWITCH SMF FORMATTING ON/OFF
*         NEWTOP   - SPECIFY ARBITRARY TOP-OF-DATA ADDRESS
*         MEMBER   - DISPLAY A DIFFERENT MEMBER OF THE SAME PDS
*         DIR      - DISPLAY THE PDS DIRECTORY LIST
*         SUBMIT   - SUBMIT THE JCL BEING REVIEWED
*         TSO      - ISSUE A TSO COMMAND WHILE REVIEWING A FILE
*         CUTOFF   - COPY DATA TO AN OUTPUT FILE
*         APPEND   - COPY DATA TO THE END OF AN OUTPUT FILE
*         END      - END THE COMMAND
*         EXIT     - END THE COMMAND BYPASSING MEMBER LIST
*
***********************************************************************
         EJECT
***********************************************************************
*
*         WHEN A SCROLL COMMAND DOES NOT SPECIFY HOW FAR TO SCROLL,
*         THE 'SCROLL' VALUE IS USED.  THIS VALUE IS ALWAYS DISPLAYED
*         NEAR THE TOP OF THE SCREEN AND CAN BE CHANGED BY MOVING
*         THE CURSOR OVER THE VALUE AND TYPING IN A NEW VALUE.
*         THE NEW VALUE WILL REMAIN IN EFFECT UNTIL THE COMMAND
*         ENDS OR UNTIL YOU CHANGE IT AGAIN.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         PROGRAM FUNCTION KEYS
*
*         SOME OF THE SUBCOMMANDS DO NOT HAVE TO BE TYPED IN
*         IF THE TERMINAL IS EQUIPPED WITH PROGRAM FUNCTION KEYS.
*         FOR EXAMPLE, HITTING KEY 'PF8' IS EQUIVALENT TO
*         TYPING IN 'DOWN' AND HITTING THE 'ENTER' KEY.
*
*         HERE ARE THE MEANINGS ASSIGNED TO EACH PF KEY.
*
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF1/13     I     PF2/14     I     PF3/15     I
*         I                I                I                I
*         I    HEL/TOP     I  ASCII/BOTTOM  I      END       I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF4/16     I     PF5/17     I     PF6/18     I
*         I                I                I                I
*         I    TSO/SMF     I      FIND      I   FULL/EREP    I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF7/19     I     PF8/20     I     PF9/21     I
*         I                I                I                I
*         I      UP        I      DOWN      I      HEX       I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF10/22    I     PF11/23    I     PF12/24    I
*         I                I                I                I
*         I      LEFT      I      RIGHT     I     RECALL     I
*         I                I                I                I
*         ----------------------------------------------------
*
***********************************************************************
         EJECT
***********************************************************************
*
*         IF THE SECOND OPERAND IS 'FILE', THAT MEANS THE
*         FIRST OPERAND IS NOT A DSNAME BUT A DDNAME.
*
*         IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE
*         CATALOG MUST BE READ TWICE, ONCE TO APPEND A
*         TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING
*         ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING
*         THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,
*         OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,
*         PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER
*         AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A
*         FULLY QUALIFIED NAME.
*
*         THE 'FILE' KEYWORD IS USEFUL FOR LOOKING AT TEMPORARY
*         DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST
*         OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.
*         WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE
*         FILENAME WILL BE DISPLAYED (AND QUICKLY, BECAUSE
*         THE COMMAND DOESN'T HAVE TO ALLOCATE ANYTHING).
*
*         THE 'DATA' KEYWORD INDICATES THAT INTERPRETATION OF
*         VSAM CONTROLINTERVAL INFORMATION FOR EXTRACTING
*         LOGICAL RECORDS IS NOT TO BE ATTEMPTED EVEN IF THE
*         DATA SET BEING REVIEWED IS A VSAM COMPONENT.  ITS
*         SPECIFICATION ALSO SUPPRESSES DIRECT ACCESS LOGIC
*         FOR FIXED-LENGTH RECORD NON-PARTITIONED DISK FILES.
*         FOR PARTITIONED DATA SETS ITS SPECIFICATION MEANS
*         THAT THE DATA SET'S DIRECTORY WILL BE REVIEWED AS A
*         SEQUENTIAL FILE WITHOUT ACCESS TO INDIVIDUAL MEMBERS.
*
*         THE 'SUBSYS' OPERAND INDICATES THAT A SUBSYSTEM DATA
*         SET IS TO BE REVIEWED.  THE SPECIFIED SUBSYSTEM MUST
*         BE ACTIVE AND SUPPORT DATA SET ALLOCATION.  'REVVSAM'
*         MAY PROVIDE A SUITABLE VEHICLE FOR APF AUTHORIZATION.
*         'SUBSYS' AND 'VOLUME' ARE MUTUALLY EXCLUSIVE OPERANDS.
*
*         THE 'TOP' OPERAND ALLOWS A 1 TO 6 HEXADECIMAL DIGIT
*         RELATIVE ADDRESS TO BE SPECIFIED AS THE TOP-OF-DATA.
*         THE ADDRESS IS TAKEN TO BE A TTR FOR DASD OR A BLOCK
*         ID FOR TAPE.  THE ADDRESS HAS THE SAME FORMAT AS THE
*         OPERAND OF THE 'NEWTOP' SUBCOMMAND.
*
***********************************************************************
         EJECT
         MACRO
&NAME    DCS
.**********************************************************************
.*                                                                    *
.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *
.*                                                                    *
.*        WRITTEN BY BILL GODFREY                                     *
.*        PLANNING RESEARCH CORPORATION                               *
.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *
.*        DATE WRITTEN: JANUARY 8 1981.                               *
.*        DATE UPDATED: MARCH 18 1982. (ROW AND COL IN PARENS)        *
.*        GP@P6          JULY 25 1986. (EXTENDED ATTRS, MEDIUM INTENS)*
.*        GP@P6     SEPTEMBER 23 1986. (ESCAPES, WRITES, RA, MFA, MF) *
.*        GP@P6        AUGUST 24 1987. (EAU, WSF, RB, RM, RMA)        *
.*        GP@P6       OCTOBER 18 1990. (ALLOW ROW NUMBER UP TO 43)    *
.*                                                                    *
.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *
.*                                                                    *
.*        SAMPLE                                                      *
.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *
.*                                                                    *
.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *
.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *
.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *
.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *
.*           SO YOU DON'T HAVE TO KNOW THE HEX CODES FOR THEM,        *
.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *
.*           (A SET OF RESERVED NAMES) SO YOU DON'T HAVE TO KNOW      *
.*           THE HEX CODES FOR THEM.                                  *
.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *
.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *
.*                                                                    *
.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *
.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *
.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *
.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *
.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *
.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *
.*                                                                    *
.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *
.*        ANY COMBINATION OF THE FOLLOWING.                           *
.*                                                                    *
.*        .  AN ESCAPE CHARACTER.                                     *
.*           VALID ESCAPE CHARACTERS ARE:                             *
.*           ESC - ESCAPE                                             *
.*           GE  - GRAPHIC ESCAPE                                     *
.*        .  A WRITE COMMAND.                                         *
.*           VALID WRITE COMMANDS ARE:                                *
.*           WR  - WRITE (WRT)                                        *
.*           EW  - ERASE/WRITE                                        *
.*           EWA - ERASE/WRITE ALTERNATE                              *
.*           EAU - ERASE ALL UNPROTECTED                              *
.*           WSF - WRITE STRUCTURED FIELD                             *
.*        .  A READ COMMAND.                                          *
.*           VALID READ COMMANDS ARE:                                 *
.*           RB  - READ BUFFER                                        *
.*           RM  - READ MODIFIED                                      *
.*           RMA - READ MODIFIED ALL                                  *
.*        .  AN ORDER.                                                *
.*           VALID ORDERS ARE:                                        *
.*           SBA, SF, RA (RTA), IC, PT, EUA, SA, SFE, MF (MFA).       *
.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *
.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *
.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *
.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *
.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *
.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *
.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *
.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *
.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *
.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *
.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *
.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *
.*           THE ORIGINAL VERSION OF THIS MACRO.                      *
.*        .  AN ATTRIBUTE BYTE.                                       *
.*           VALID ATTRIBUTE BYTES ARE:                               *
.*           UNPLO  - UNPROTECTED NORMAL INTENSITY                    *
.*           UNPMD  - UNPROTECTED MEDIUM INTENSITY                    *
.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *
.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *
.*           PROLO  - PROTECTED NORMAL INTENSITY                      *
.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *
.*           PROMD  - PROTECTED MEDIUM INTENSITY                      *
.*           PROMDS - PROTECTED MEDIUM INTENSITY AUTO-SKIP            *
.*           PROHI  - PROTECTED HIGH INTENSITY                        *
.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *
.*        .  AN EXTENDED ATTRIBUTE TYPE.                              *
.*           VALID ATTRIBUTE TYPES ARE:                               *
.*           FIELD, HILITE, COLOUR AND PGMSYM.                        *
.*        .  AN EXTENDED HIGHLIGHTING SPECIFICATION.                  *
.*           VALID HIGHLIGHTINGS ARE:                                 *
.*           NORMAL, BLINK, REVERSE AND USCORE.                       *
.*        .  AN EXTENDED COLOUR SPECIFICATION.                        *
.*           VALID COLOURS ARE:                                       *
.*           BLUE, RED, PINK, GREEN, TURQ, YELLOW, WHITE AND NORMAL.  *
.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *
.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *
.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *
.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *
.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *
.*                                                                    *
.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *
.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *
.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *
.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *
.*                                                                    *
.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *
.*        SCREEN SIZE OF 43 ROWS BY 80 COLUMNS. FOR SCREENS           *
.*        OF OTHER DIMENSIONS (27 BY 132, 12 BY 40) THE MACRO         *
.*        NEEDS ONLY A FEW CHANGES.                                   *
.*                                                                    *
.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *
.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *
.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *
.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *
.*                                                                    *
.*        PROGRAMMING NOTE:                                           *
.*        SA,NORMAL,NORMAL     WILL DO IN THREE BYTES WHAT            *
.*        SA,HILITE,NORMAL,SA,COLOUR,NORMAL,SA,PGMSYM,NORMAL          *
.*                             WILL DO IN NINE BYTES.                 *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &R,&C,&P,&Q
         LCLA  &AN,&AS,&AL
         LCLB  &B,&NUMERIC,&INTEGER
         LCLC  &T(64)
         LCLC  &N,&ROW,&COL
         LCLC  &CS,&STRING
&T(1)    SETC  '40'
&T(2)    SETC  'C1'
&T(3)    SETC  'C2'
&T(4)    SETC  'C3'
&T(5)    SETC  'C4'
&T(6)    SETC  'C5'
&T(7)    SETC  'C6'
&T(8)    SETC  'C7'
&T(9)    SETC  'C8'
&T(10)   SETC  'C9'
&T(11)   SETC  '4A'
&T(12)   SETC  '4B'
&T(13)   SETC  '4C'
&T(14)   SETC  '4D'
&T(15)   SETC  '4E'
&T(16)   SETC  '4F'
.*
&T(17)   SETC  '50'
&T(18)   SETC  'D1'
&T(19)   SETC  'D2'
&T(20)   SETC  'D3'
&T(21)   SETC  'D4'
&T(22)   SETC  'D5'
&T(23)   SETC  'D6'
&T(24)   SETC  'D7'
&T(25)   SETC  'D8'
&T(26)   SETC  'D9'
&T(27)   SETC  '5A'
&T(28)   SETC  '5B'
&T(29)   SETC  '5C'
&T(30)   SETC  '5D'
&T(31)   SETC  '5E'
&T(32)   SETC  '5F'
.*
&T(33)   SETC  '60'
&T(34)   SETC  '61'
&T(35)   SETC  'E2'
&T(36)   SETC  'E3'
&T(37)   SETC  'E4'
&T(38)   SETC  'E5'
&T(39)   SETC  'E6'
&T(40)   SETC  'E7'
&T(41)   SETC  'E8'
&T(42)   SETC  'E9'
&T(43)   SETC  '6A'
&T(44)   SETC  '6B'
&T(45)   SETC  '6C'
&T(46)   SETC  '6D'
&T(47)   SETC  '6E'
&T(48)   SETC  '6F'
.*
&T(49)   SETC  'F0'
&T(50)   SETC  'F1'
&T(51)   SETC  'F2'
&T(52)   SETC  'F3'
&T(53)   SETC  'F4'
&T(54)   SETC  'F5'
&T(55)   SETC  'F6'
&T(56)   SETC  'F7'
&T(57)   SETC  'F8'
&T(58)   SETC  'F9'
&T(59)   SETC  '7A'
&T(60)   SETC  '7B'
&T(61)   SETC  '7C'
&T(62)   SETC  '7D'
&T(63)   SETC  '7E'
&T(64)   SETC  '7F'
.*
&N       SETC  '&NAME'
&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS
&AS      SETA  0
&B       SETB  0 FALSE
.EACH    AIF   (&AN EQ 0).EPILOG
&AS      SETA  &AS+1
&CS      SETC  '&AS'
&AL      SETA  K'&SYSLIST(&AS)
         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT
         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR
&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')
         AIF   (&NUMERIC AND &INTEGER).ROWCOL
         AIF   (NOT &B).ROWCOLX
         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'
&B       SETB  0 FALSE
.ROWCOLX ANOP
&STRING  SETC  '&SYSLIST(&AS)'
.*             ESCAPES
         AIF   ('&STRING' EQ 'ESC').ESC
         AIF   ('&STRING' EQ 'GE').GE
.*             WRITES
         AIF   ('&STRING' EQ 'WR').WR
         AIF   ('&STRING' EQ 'WRT').WR
         AIF   ('&STRING' EQ 'EW').EW
         AIF   ('&STRING' EQ 'EWA').EWA
         AIF   ('&STRING' EQ 'EAU').EAU
         AIF   ('&STRING' EQ 'WSF').WSF
.*             READS
         AIF   ('&STRING' EQ 'RB').RB
         AIF   ('&STRING' EQ 'RM').RM
         AIF   ('&STRING' EQ 'RMA').RMA
.*             ORDERS
         AIF   ('&STRING' EQ 'SBA').SBA
         AIF   ('&STRING' EQ 'SF').SF
         AIF   ('&STRING' EQ 'SFE').SFE
         AIF   ('&STRING' EQ 'RA').RA
         AIF   ('&STRING' EQ 'RTA').RA
         AIF   ('&STRING' EQ 'IC').IC
         AIF   ('&STRING' EQ 'PT').PT
         AIF   ('&STRING' EQ 'EUA').EUA
         AIF   ('&STRING' EQ 'SA').SA
         AIF   ('&STRING' EQ 'MF').MF
         AIF   ('&STRING' EQ 'MFA').MF
.*             ATTRIBUTES
         AIF   ('&STRING' EQ 'UNPLO').UNPLO
         AIF   ('&STRING' EQ 'UNPMD').UNPMD
         AIF   ('&STRING' EQ 'UNPHI').UNPHI
         AIF   ('&STRING' EQ 'UNPNP').UNPNP
         AIF   ('&STRING' EQ 'PROLO').PROLO
         AIF   ('&STRING' EQ 'PROLOS').PROLOS
         AIF   ('&STRING' EQ 'PROMD').PROMD
         AIF   ('&STRING' EQ 'PROMDS').PROMDS
         AIF   ('&STRING' EQ 'PROHI').PROHI
         AIF   ('&STRING' EQ 'PROHIS').PROHIS
.*             EXTENDED ATTRIBUTE TYPES
         AIF   ('&STRING' EQ 'FIELD').FIELD
         AIF   ('&STRING' EQ 'HILITE').HILITE
         AIF   ('&STRING' EQ 'COLOUR').COLOUR
         AIF   ('&STRING' EQ 'PGMSYM').PGMSYM
.*             HIGHLIGHTING
         AIF   ('&STRING' EQ 'NORMAL').NORMAL
         AIF   ('&STRING' EQ 'BLINK').BLINK
         AIF   ('&STRING' EQ 'REVERSE').REVERSE
         AIF   ('&STRING' EQ 'USCORE').USCORE
.*             COLOURS
         AIF   ('&STRING' EQ 'BLUE').BLUE
         AIF   ('&STRING' EQ 'RED').RED
         AIF   ('&STRING' EQ 'PINK').PINK
         AIF   ('&STRING' EQ 'GREEN').GREEN
         AIF   ('&STRING' EQ 'TURQ').TURQ
         AIF   ('&STRING' EQ 'YELLOW').YELLOW
         AIF   ('&STRING' EQ 'WHITE').WHITE
.*             CONSTANTS
.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS
.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.
.DC      ANOP
&N       DC    &STRING
         AGO   .NEXT
.ESC     ANOP
&N       DC    X'27'               ESCAPE
         AGO   .NEXT
.GE      ANOP
&N       DC    X'08'               GRAPHIC ESCAPE
         AGO   .NEXT
.WR      ANOP
&N       DC    X'F1'               WRITE
         AGO   .NEXT
.EW      ANOP
&N       DC    X'F5'               ERASE/WRITE
         AGO   .NEXT
.EWA     ANOP
&N       DC    X'7E'               ERASE/WRITE ALTERNATE
         AGO   .NEXT
.EAU     ANOP
&N       DC    X'6F'               ERASE ALL UNPROTECTED
         AGO   .NEXT
.WSF     ANOP
&N       DC    X'F3'               WRITE STRUCTURED FIELD
         AGO   .NEXT
.RB      ANOP
&N       DC    X'F2'               READ BUFFER
         AGO   .NEXT
.RM      ANOP
&N       DC    X'F6'               READ MODIFIED
         AGO   .NEXT
.RMA     ANOP
&N       DC    X'6E'               READ MODIFIED ALL
         AGO   .NEXT
.SBA     ANOP
&N       DC    X'11'               SET BUFFER ADDRESS
         AGO   .NEXT
.SF      ANOP
&N       DC    X'1D'               START FIELD
         AGO   .NEXT
.RA      ANOP
&N       DC    X'3C'               REPEAT TO ADDRESS
         AGO   .NEXT
.IC      ANOP
&N       DC    X'13'               INSERT CURSOR
         AGO   .NEXT
.PT      ANOP
&N       DC    X'05'               PROGRAM TAB
         AGO   .NEXT
.EUA     ANOP
&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS
         AGO   .NEXT
.SA      ANOP
&N       DC    X'28'               SET ATTRIBUTE
         AGO   .NEXT
.SFE     ANOP
&N       DC    X'29'               START FIELD EXTENDED
         AGO   .NEXT
.MF      ANOP
&N       DC    X'2C'               MODIFY FIELD ATTRIBUTES
         AGO   .NEXT
.UNPLO   ANOP
&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY
         AGO   .NEXT
.UNPMD   ANOP
&N       DC    X'C4'               UNPROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.UNPHI   ANOP
&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY
         AGO   .NEXT
.UNPNP   ANOP
&N       DC    X'4C'               UNPROTECTED NO-DISPLAY
         AGO   .NEXT
.PROLO   ANOP
&N       DC    X'60'               PROTECTED NORMAL INTENSITY
         AGO   .NEXT
.PROLOS  ANOP
&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP
         AGO   .NEXT
.PROMD   ANOP
&N       DC    X'E4'               PROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.PROMDS  ANOP
&N       DC    X'F4'               PROTECTED MEDIUM INTENSITY SKIP
         AGO   .NEXT
.PROHI   ANOP
&N       DC    X'E8'               PROTECTED HIGH INTENSITY
         AGO   .NEXT
.PROHIS  ANOP
&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP
         AGO   .NEXT
.FIELD   ANOP
&N       DC    X'C0'               FIELD ATTRIBUTE
         AGO   .NEXT
.HILITE  ANOP
&N       DC    X'41'               EXTENDED HIGHLIGHTING
         AGO   .NEXT
.COLOUR  ANOP
&N       DC    X'42'               EXTENDED COLOUR
         AGO   .NEXT
.PGMSYM  ANOP
&N       DC    X'43'               PROGRAMMED SYMBOLS
         AGO   .NEXT
.NORMAL  ANOP
&N       DC    X'00'               CHARACTER ATTRIBUTE RESET (DEFAULT)
         AGO   .NEXT
.BLINK   ANOP
&N       DC    X'F1'               BLINK HIGHLIGHTING
         AGO   .NEXT
.REVERSE ANOP
&N       DC    X'F2'               REVERSE VIDEO HIGHLIGHTING
         AGO   .NEXT
.USCORE  ANOP
&N       DC    X'F4'               UNDERSCORE HIGHLIGHTING
         AGO   .NEXT
.BLUE    ANOP
&N       DC    X'F1'               BLUE COLOUR
         AGO   .NEXT
.RED     ANOP
&N       DC    X'F2'               RED COLOUR
         AGO   .NEXT
.PINK    ANOP
&N       DC    X'F3'               PINK COLOUR
         AGO   .NEXT
.GREEN   ANOP
&N       DC    X'F4'               GREEN COLOUR
         AGO   .NEXT
.TURQ    ANOP
&N       DC    X'F5'               TURQUOISE COLOUR
         AGO   .NEXT
.YELLOW  ANOP
&N       DC    X'F6'               YELLOW COLOUR
         AGO   .NEXT
.WHITE   ANOP
&N       DC    X'F7'               WHITE COLOUR
         AGO   .NEXT
.**********************************************************************
.PAIR    ANOP
         AIF   (N'&SYSLIST(&AS) NE 2).PERR1
&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&R       SETA  &SYSLIST(&AS,1)
&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&C       SETA  &SYSLIST(&AS,2)
         AIF   (&R LT 1 OR &R GT 43).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'
         MEXIT
.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'
         MEXIT
.**********************************************************************
.ROWCOL  ANOP
         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED
&R       SETA  &SYSLIST(&AS)
&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED
         AGO   .NEXTR
.COL     ANOP
&C       SETA  &SYSLIST(&AS)
&B       SETB  0 FALSE             RESET SWITCH
         AIF   (&R LT 1 OR &R GT 43).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 43'
         AGO   .NEXT
.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'
.NEXT    ANOP
&N       SETC  ''                  TURN OFF NAME
.NEXTR   ANOP
&AN      SETA  &AN-1
         AGO   .EACH
.EPILOG  ANOP
         MEND


         MACRO
&NAME    MSG   &MSG
&NAME    DC    AL2(&NAME.L-2)
         DC    C&MSG
&NAME.L  EQU   *-&NAME
         MEND


         GBLB  &MVS
&MVS     SETB  1                   1 - MVS      0 - SVS,MVT
         GBLC  &SYSSPLV
&SYSSPLV SETC  '1'                 1 - ANY MVS  2 - MVS/XA ONLY
         LCLC  &HEL
&HEL     SETC  'HEL'               FULLSCREEN HELP COMMAND NAME
         LCLC  &HEL2
&HEL2    SETC  'FSHELP'            ALTERNATE HELP COMMAND NAME
         LCLC  &IBMHELP
&IBMHELP SETC  'H'                 IBM-SUPPLIED HELP COMMAND NAME
         LCLC  &REL
&REL     SETC  '32.2'              REVIEW RELEASE NUMBER
         LCLC  &FC
&FC      SETC  '5'                 DEFAULT FORMATTING MODE DATA COLOUR
         LCLC  &CC
&CC      SETC  '4'                 DEFAULT CHARACTER MODE DATA COLOUR
         LCLC  &HC
&HC      SETC  '1'                 DEFAULT HEXADECIMAL MODE DATA COLOUR
         TITLE '  R E V I E W   -   P H A S E   1  '
REVIEW   START
         ENTRY &HEL
         ENTRY &HEL2
         ENTRY PFKDEF
&HEL     DS    0D
&HEL2    DS    0D
         USING REVIEW,R10,R11,R12
         B     @PROLOG-*(,R15)
         DC    AL1(27),CL12'REVIEW R&REL'
         DC    CL16' &SYSDATE &SYSTIME '
         DC    CL39'7-COLOUR SUPER-REVIEW AND HEL -- GP@P6 '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
         DC    C'<DYN'             FLAG DYNAMIC AREA SUBPOOL AND SIZE
@PROLOG  STM   R14,R12,12(R13)
         LR    R10,R15             BASE
         LA    R15,1
         LA    R11,4095(R15,R10)   BASE
         LA    R12,4095(R15,R11)   BASE
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R14,R1              COPY TARGET AREA ADDRESS
         SLR   R15,R15
         ICM   R15,7,@SIZE+1       GET TARGET AREA SIZE
         SLR   R3,R3               ZERO SOURCE LENGTH AND PAD
         MVCL  R14,R2              CLEAR ACQUIRED AREA
         LR    R9,R1
         USING @DATA,R9
         ST    R13,4(,R1)          CHAIN SAVEAREA
         ST    R1,8(,R13)          CHAIN SAVEAREA
         LR    R13,R1              NEW SAVEAREA

         STM   R10,R12,BASE1
         L     R14,=V(REVIEW2)
         ST    R14,BASE2
         LA    R15,1
         LA    R14,4095(R15,R14)   BASE
         ST    R14,BASE2+4
         LA    R14,4095(R15,R14)   BASE
         ST    R14,BASE2+8
         LA    R14,4095(R15,R14)   BASE
         ST    R14,BASE2+12
         MVC   SIZE,@SIZE
         ST    R2,CPPLPTR
         MVC   REVCBUF(16),0(R2)   REVCBUF/REVUPT/REVPSCB/REVECT    ABL
         L     R1,CPPLCBUF         POINT TO THE COMMAND BUFFER      ABL
         MVC   COMMND(2),2(R1)     SAVE OFFSET FOR XCTL             ABL
         MVI   STATUS2,STAUTH      ASSUME APF AUTHORIZED
         MVI   STATUS4,CSRSW       KEEP SAME SCROLLING FOR EACH MEMBER
         MVI   STATUS8,DIVFULL+FUOL
*                                  NO I/O CAN BE AVOIDED WITHOUT DIV
*                                  SEARCH TYPE 1 IS PRIMED FOR =FIND
         MVI   SMFSBTYP,X'FF'      INVALIDATE SMF RECORD SUBTYPE
         MVI   SACHAR,X'28'        ASSUME IBM 3270 SET ATTRIBUTE
         MVI   FMTCOLOR,&FC        INITIALIZE COLOUR FOR FORMATS
         MVI   CHRCOLOR,&CC        INITIALIZE COLOUR FOR CHARACTERS
         MVI   HEXCOLOR,&HC        INITIALIZE COLOUR FOR HEXADECIMAL
         MVI   STRINGL,X'FF'       INVALIDATE 'FIND' STRING
         MVI   ARLLEN+1,36         SUPPLY ARL LENGTH
         MVC   ARLIDENT,=C'AR'     SUPPLY IDENTIFIER
         MVI   ARLFIRST+1,2        ONLY FETCH JFCBS FOR CONCATENATIONS
         LA    R0,SACHAR           POINT TO SET ATTRIBUTE CHAR
         ST    R0,CBPRM4           SAVE IN REVCMPBF PLIST
         OI    CBPRM4,X'80'        DENOTE LAST PARAMETER IN LIST
         MVC   BLDL(4),=AL2(1,76)  PREPARE BLDL PARAMETER LIST FOR USE
         L     R1,REVCBUF          POINT TO THE COMMAND BUFFER
         LH    R15,0(,R1)          GET THE COMMAND BUFFER LENGTH
         ST    R15,TGETREGS+8      SAVE IT
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,COPYCBUF        COPY COMMAND BUFFER
         MVC   $MEMBER,=CL8' '
         MVC   $PASSWRD,=CL8' '
         MVC   $VOLSER,=CL8' '     (6 BYTES)
         MVC   $UNIT,=CL8' '
         L     R1,=V(EDITT)        POINT TO DEFAULT TRANSLATE TABLE
         MVC   PERIODS,0(R1)       INITIALIZE DISPLAY TRANSLATE TABLE
         L     R15,16              POINT TO THE CVT
         MVC   OSBITS,116(R15)     COPY OS ARCHITECTURE FLAGS
         L     R15,0(,R15)         POINT TO TCB WORDS
         L     R15,4(,R15)         POINT TO CURRENT TCB
         L     R15,132(,R15)       POINT TO ORIGINATING TASK
         L     R15,0(,R15)         POINT TO ITS ACTIVE RB
         L     R15,12(,R15)        POINT TO ITS CDE
         CLC   =C'PDS',8(R15)      REVIEW ATTACHED FROM SOME PDS CMD?
         BE    ISPDSREV            YES
         CLC   =C'STAR',8(R15)     REVIEW ATTACHED FROM STARTOOL/BAT?
         BNE   PDSREVOK            NO
ISPDSREV OI    STATUS2,STPDS       YES, REMEMBER FOR STAX OR HEL MSGID
PDSREVOK DS    0H
         TESTAUTH FCTN=1           TEST FOR APF AUTHORIZATION
         LTR   R15,R15             APF AUTHORIZED?
         BZ    NOTSOSR             YES, AVOID IKJEFTSR RETURN CODE 20
         NI    STATUS2,255-STAUTH  NO, REMEMBER FOR LATER
         TM    OSBITS,X'9B'        MVS/ESA OR OS/390?
         BO    ISTSOSR             YES, ASSUME TSO/E AND SKIP BLDL
         MVC   BLDLNAME,=CL8'TSOEXEC'
         TM    OSBITS,X'13'        MVS?
         BO    BLDTSEX             YES
         MVI   BLDLNAME+2,C'S'     NO, LOOK FOR TSSEXEC UNDER MSP
BLDTSEX  BLDL  0,BLDL
         LTR   R15,R15             IS TSOEXEC IN THE LINK LIST?
         BNZ   NOTSOSR             NO, NO TSO SERVICE ROUTINE IN SYSTEM
ISTSOSR  OI    STATUS2,EFTSROK     YES, TSOEXEC AND IKJEFTSR EXIST
NOTSOSR  DS    0H

************************************************************
*                                                          *
*         SET UP IOPL FOR PUTLINE                          *
*                                                          *
************************************************************

         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL

         AIF   (NOT &MVS).SKIP1
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
.SKIP1   ANOP
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS

************************************************************
*                                                          *
*         SET UP DAPL FOR DYNAMIC ALLOCATION               *
*                                                          *
************************************************************

         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R15,MYDAPB
         ST    R15,DAPLDAPB
         DROP  R1                  DAPL

************************************************************
*                                                          *
*         SET UP PFK DEFAULTS                              *
*                                                          *
************************************************************

         MVI   PROFDATA,C' '       INITIALIZE RELEASE NUMBER, COLOURS,
         MVC   PROFDATA+1(L'PROFDATA-1),PROFDATA        AND SCROLLING
         MVC   PROFDATA(17),=C'REVIEW&REL. &FC.&CC.&HC.CST'
         LA    R1,PFKDEF
         LA    R15,PFKTAB
         LA    R0,24
PFKINIT  MVI   0(R15),C' '
         MVC   1(PFKTABL-1,R15),0(R15) PAD WITH BLANKS
         MVC   0(PFKDEFL,R15),0(R1) INSERT DEFAULT
         LA    R1,PFKDEFL(,R1)     POINT TO NEXT DEFAULT
         LA    R15,PFKTABL(,R15)   POINT TO NEXT PFK ENTRY
         BCT   R0,PFKINIT          DO NEXT PFK IF ANY
         MVI   0(R15),0            END OF TABLE

**********************************************************************
*                                                          *         *
*         SET UP THE RECALL LINKED LIST                    *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************

         LA    R1,RECALSTK-2048
         LA    R1,2048(,R1)        POINT TO RECALL STACK
         ST    R1,RECALUSE         NEXT ONE TO USE
         LA    R0,RECLDPTH-1       GET NUMBER TO LOOP THROUGH
         MVI   10(R1),C' '         BLANK OUT TEXT OF FIRST ELEMENT
RECALOOP LA    R15,60(,R1)         POINT TO NEXT AFTER CURRENT ELEMENT
         ST    R15,0(,R1)          FORWARD POINTER
         ST    R1,4(,R15)          BACKWARD POINTER
         MVI   8(R15),X'80'        NEGATIVE LENGTH FOR UNUSED ELEMENT
         LA    R1,60(,R1)          INCREMENT ELEMENT POINTER
         BCT   R0,RECALOOP         LOOP THROUGH ELEMENTS
         LA    R1,RECALSTK-2048
         LA    R1,2048(,R1)        POINT TO FIRST ELEMENT AGAIN
         ST    R1,0(,R15)          CLOSE FORWARD POINTER CIRCLE
         ST    R15,4(,R1)          CLOSE BACKWARD POINTER CIRCLE

**********************************************************************
*                                                          *         *
*         PROCESS 'REVIEW' RECURSION                       *  GP@P6  *
*                                                          *  04/88  *
**********************************************************************

         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R14,0(,R1)          CURRENT RB
         LA    R15,HELNAME         POINT TO NAME OF FULLSCREEN HELP
HELCHECK LA    R0,8                GET MAXIMUM LENGTH OF NAME
         L     R1,12(,R14)         CURRENT CDE
HELNAMLP CLI   8(R1),C' '          REACHED END OF COMMAND NAME?
         BE    HELMATCH            YES, CONSIDER IT A NAME MATCH
         CLC   8(1,R1),0(R15)      DOES THE NON-BLANK COMPARE EQUAL?
         BNE   HELCATCH            NO, MISMATCH FOUND
         LA    R1,1(,R1)           YES, NEXT BYTE IN COMMAND NAME
         LA    R15,1(,R15)         NEXT BYTE IN FULLSCREEN HELP NAME
         BCT   R0,HELNAMLP         CONTINUE NAME HELP MATCH CHECK
HELMATCH OI    STATUS6,HELSW       PERFORM FULLSCREEN HELP FUNCTION
         OI    STATUS4,HELOKAY     THEREFORE HEL IS AVAILABLE
         LA    R0,HELNAME2         POINT TO ALTERNATE HELP NAME
         CR    R15,R0              DID WE TRY THE SECOND NAME?
         BNH   HELORNOT            NO, MUST HAVE FOUND THE PRIMARY NAME
         OI    STATUS6,HELALT      YES, USE ALTERNATE NAME
HELORNOT L     R1,12(,R14)         CURRENT CDE
         TM    28(R1),X'04'        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO, BIT CDMIN IN BYTE CDATTR IS OFF
         L     R1,20(,R1)          YES, POINT TO MAJOR CDE
         TM    11(R14),X'80'       LAST RB ON CHAIN?  (RBLINK->TCB?)
         BO    RECURSX             YES, BOTTOM RB SO NO RECURSION
         ICM   R15,7,29(R14)       LOAD RBLINK   (BIT RBTCBNXT IS OFF)
         BZ    RECURSX             ZERO POINTER IS INVALID
         L     R15,12(,R15)        PREVIOUS CDE
         TM    28(R15),X'04'       INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO, BIT CDMIN IN BYTE CDATTR IS OFF
         L     R15,20(,R15)        YES, POINT TO MAJOR CDE
         CR    R1,R15              CURRENT AND PREVIOUS CDE THE SAME?
         BNE   RECURSX             NO, THIS IS NOT A RECURSIVE 'REVIEW'
         OI    MODE,RECURS         YES, THIS IS A RECURSIVE 'REVIEW'

         L     R1,4(,R13)          POINT TO PREVIOUS SAVE AREA
         L     R1,56(,R1)          POINT TO PREVIOUS @DATA (R9 VALUE)
         TM    STATUS4-@DATA(R1),HELOKAY    OUTER LEVEL FOUND 'HEL'?
         BZ    HELHELOK            NO, LEAVE FLAG AS IS
         OI    STATUS4,HELOKAY     YES, SET FLAG ACCORDINGLY
         TM    STATUS6-@DATA(R1),HELALT     USING ALTERNATE NAME?
         BZ    HELHELOK            NO, LEAVE FLAG AS IS
         OI    STATUS6,HELALT      YES, SET FLAG ACCORDINGLY
HELHELOK DS    0H

*                                  COPY QUERY RESULTS
         MVC   STATUS5,STATUS5-@DATA(R1)
         MVC   GRAFDTLS,GRAFDTLS-@DATA(R1)
*                                  COPY SET ATTRIBUTE ORDER CODE
         MVC   SACHAR,SACHAR-@DATA(R1)
*                                  COPY DATA COLOURS
         MVC   FMTCOLOR(3),FMTCOLOR-@DATA(R1)
*                                  COPY RECALL STACK POINTERS
         MVC   RECALPTR(8),RECALPTR-@DATA(R1)
*                                  COPY DISPLAY TRANSLATE TABLE
         MVC   PERIODS,PERIODS-@DATA(R1)
*                                  COPY SCROLL AMOUNT
         MVC   SCROLL,SCROLL-@DATA(R1)
         NI    STATUS4,255-CSRSW
         OC    STATUS4,STATUS4-@DATA(R1)
*                                  COPY PROFILE DATA PREFIX
         MVC   PROFDATA(64),PROFDATA-@DATA(R1)
*                                  COPY PFK VALUES
         LA    R0,6                (PFK-TABLE-SIZE)/256
         LA    R15,PFKTAB          POINT TO TARGET PFK TABLE
COPYPFLP MVC   0(256,R15),PFKTAB-@DATA(R1)
         LA    R15,256(,R15)       POINT TO NEXT TARGET CHUNK
         LA    R1,256(,R1)         POINT TO NEXT SOURCE CHUNK
         BCT   R0,COPYPFLP         COPY LATEST IN-CORE PFK TABLE
         B     PROFINX             AVOID DISK I/O FOR PROFILE READING
*                                    AND 'HEL' AVAILABILITY CHECKING
HELCATCH LA    R0,HELNAME2         RETRY FULLSCREEN HELP NAME MATCHING
         CR    R15,R0              HAVE WE TRIED THE SECOND NAME?
         BNL   HELORNOT            YES, NOT INVOKED AS FULLSCREEN HELP
         LR    R15,R0              NO
         B     HELCHECK            GO TRY IT
RECURSX  DS    0H

**********************************************************************
*                                                          *         *
*         PREPARE 'HEL' MINOR CDE                          *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************

         TM    STATUS4,HELOKAY     IS 'HEL' ALREADY LOADED?
         BO    CDECHKX             YES, BYPASS THIS CODE
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R15,0(,R1)          CURRENT RB
         L     R15,12(,R15)        CURRENT CDE
         TM    28(R15),X'04'       INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO, BIT CDMIN IN BYTE CDATTR IS OFF
         L     R15,20(,R15)        YES, POINT TO MAJOR CDE
         TM    26(R15),X'08'       IS BIT CDELPDE ON IN BYTE CDATTRB?
         BO    HELAVAIL            YES, REVIEW IS IN LINK PACK AREA
*                                      SO ASSUME A PROPER INSTALL
         L     R1,124(,R1)         JOB STEP TCB
         LA    R1,44(,R1)          POINT TO LAST CDE POINTER
CDELOOP  ICM   R1,7,1(R1)          POINT TO NEXT CDE ON CHAIN
         BZ    CDEEVAL             END OF CHAIN SO EVALUATE RESULTS
         MVC   BLDLNAME,HELNAME    FLAG WHICH IF FOUND
         CLC   HELNAME,8(R1)       IS 'HEL' IN THE JOB PACK AREA?
         BE    HELAVAIL            YES, STOP THE SEARCH
         MVC   BLDLNAME,HELNAME2   FLAG WHICH IF FOUND
         CLC   HELNAME2,8(R1)      IS 'FSHELP' IN THE JOB PACK AREA?
         BE    HELAVAIL            YES, STOP THE SEARCH
         B     CDELOOP             CONTINUE SEARCHING FOR 'HEL'
CDEEVAL  TM    STATUS2,STAUTH      APF AUTHORIZED?
         BO    CDEIDENT            YES, CAN MAKE A MINOR CDE
         TM    29(R15),X'02'       NO, IS CDSYSLIB ON IN BYTE CDATTR2?
         BO    CDEBLDLD            YES, CANNOT MAKE A MINOR CDE
CDEIDENT LA    R0,HELNAME          POINT TO HEL COMMAND NAME
         L     R1,16(,R15)         POINT TO REVIEW/HEL ENTRY POINT
         IDENTIFY EPLOC=(0),ENTRY=(1)   MAKE IT KNOWN TO THE SYSTEM
         LTR   R15,R15             DID IDENTIFY SUCCEED?
         BZ    HELAVAIL            YES, HEL IS NOW IN THE JPA
CDEBLDLD MVC   BLDLNAME,HELNAME    NO, RESORT TO A BLDL EVEN THOUGH
CDEBLDL  BLDL  0,BLDL                  IT INVOLVES (*GASP*!!) I/O
         LTR   R15,R15             IS HEL AVAILABLE?
         BZ    HELAVAIL            YES
         CLC   BLDLNAME,HELNAME2   SEARCHED FOR ALTERNATE NAME?
         BE    CDECHKX             YES, USE TSO HELP
         MVC   BLDLNAME,HELNAME2   NO
         B     CDEBLDL             DO IT NOW
HELAVAIL OI    STATUS4,HELOKAY     YES, BUT WHO IS KAY?
         CLC   BLDLNAME,HELNAME2   SEARCHED FOR ALTERNATE NAME?
         BNE   CDECHKX             NO, USE PRIMARY FULLSCREEN HELP NAME
         OI    STATUS6,HELALT      YES, USE ALTERNATE NAME
CDECHKX  DS    0H

**********************************************************************
*                                                          *         *
*         READ IN 'REVIEW' PROFILE FROM DISK               *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************

         SLR   R5,R5
         L     R4,540              GET POINTER TO CURRENT TCB
         L     R4,12(,R4)          POINT TO TIOT
         LA    R4,24(,R4)          POINT TO TIOELNGH
CHKPROFI CLC   4(8,R4),PROFDCB+DCBDDNAM-IHADCB
         BE    OPENPRFI            FILE EXISTS SO GO AND OPEN IT
         IC    R5,0(,R4)           GET TIOT ENTRY LENGTH
         AR    R4,R5               POINT TO NEXT TIOT ENTRY
         CLI   0(R4),0             ZERO LENGTH ENTRY?
         BNE   CHKPROFI            NO, CHECK OUT THIS ENTRY
         B     PROFINX             YES, NOT IN TIOT SO NO PROFILE INPUT
SYNADPRF MVI   SYNADSW,X'FF'       FLAG I/O ERROR
         BR    R14                 RETURN
EODADPRF TM    OPEND,X'0F'         OPENED FOR INPUT?
         BZ    CLOSPRFI            YES
         B     CLOSPRFU            NO
OPENPRFI LA    R4,DYNDCBW          POINT TO ACTUAL DCB AREA TO BE USED
         MVC   0(PROFDCBL,R4),PROFDCB       INITIALIZE THE PROFILE DCB
         USING IHADCB,R4
         MVI   OPEND,X'80'
         OPEN  ((R4),(INPUT)),MF=(E,OPEND)
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         SLR   R3,R3               ZERO FETCHED BYTE COUNT
         ST    R3,HOLDEND          INDICATE NO BUFFER YET
         MVC   BLDLNAME,PROFMEM    LOAD PROFILE MEMBER NAME
         BLDL  (R4),BLDL           VERIFY EXISTENCE OF PROFILE MEMBER
         LTR   R15,R15             DOES PROFILE MEMBER EXIST?
         BNZ   CLOSPRFI            NO
         CLI   BLDLCNCT,0          MEMBER FROM A CONCATENATION?
         BNE   CLOSPRFI            YES, CAN'T WRITE TO IT
         FIND  (R4),BLDLTTRP,C     POINT TO MEMBER FOR FIRST READ
         LA    R1,SCREENW-4080
         LA    R1,4080(,R1)        POINT TO BUFFER IF BLK NOT TOO BIG
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
         LA    R0,1280             10K/8
         SLL   R0,3                GET MAX BUFFER SIZE FOR SCREENW
         CH    R0,DCBBLKSI         IS BLKSIZE TOO BIG FOR SCREENW?
         BNL   READPRFI            NO, SO NO SB00 ABEND & SKIP GETMAIN
         LH    R0,DCBBLKSI         YES, GET THE REQUIRED BUFFER SIZE
         ST    R0,HOLDEND          SAVE IT
         GETMAIN RU,LV=(0),LOC=BELOW
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
READPRFI L     R8,HOLDTOP
         LA    R8,0(R3,R8)         POINT TO THE BUFFER AREA
         READ  DYNDECBW,SF,(R4),(R8),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE READ
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFI            YES, ASSUME NO FURTHER READABLE DATA
         LH    R8,DCBBLKSI
         L     R1,DYNDECBW+16      POINT TO THE IOB
         SH    R8,14(,R1)          GET LENGTH OF BLOCK READ
         AR    R3,R8               ACCUMULUATE BYTE COUNT SO FAR
         CH    R3,PROFSIZE         READ ENOUGH YET?
         BL    READPRFI            NO, READ ANOTHER BLOCK
CLOSPRFI MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         DROP  R4                  IHADCB
         CH    R3,PROFSIZE         READ ENOUGH DATA?
         BL    PROFINFM            NO, JUST USE DEFAULTS
         LA    R3,PROFDATA
         L     R8,HOLDTOP          POINT TO DATA JUST READ IN
         NI    11(R8),X'0F'        GET CHARACTER COLOUR NUMBER
         TM    11(R8),X'07'        VALID COLOUR?
         BZ    PSCDEF              NO, USE PROFILE SMF COLOUR DEFAULT
         MVC   FMTCOLOR,11(R8)     COPY COLOUR CODE FOR USE
         MVC   11(1,R3),11(R8)     COPY COLOUR CODE INTO PROFILE
PSCDEF   NI    12(R8),X'0F'        GET CHARACTER COLOUR NUMBER
         TM    12(R8),X'07'        VALID COLOUR?
         BZ    PCCDEF              NO, USE PROFILE CHAR COLOUR DEFAULT
         MVC   CHRCOLOR,12(R8)     COPY COLOUR CODE FOR USE
         MVC   12(1,R3),12(R8)     COPY COLOUR CODE INTO PROFILE
PCCDEF   NI    13(R8),X'0F'        GET HEXADECIMAL COLOUR NUMBER
         TM    12(R8),X'07'        VALID COLOUR?
         BZ    PXCDEF              NO, USE PROFILE HEX COLOUR DEFAULT
         MVC   HEXCOLOR,13(R8)     COPY COLOUR CODE FOR USE
         MVC   13(1,R3),13(R8)     COPY COLOUR CODE INTO PROFILE
PXCDEF   CLI   14(R8),C'C'         CURSOR SCROLLING?
         BE    PSCRLDEF            YES, THIS IS ALREADY ASSUMED
         NI    STATUS4,255-PGSW    NO, FLAG HALF PAGE SCROLLING
         CLI   14(R8),C'H'         HALF PAGE SCROLLING?
         BE    PSCRLDEF            YES, THIS IS NOW FLAGGED
         NI    STATUS4,255-HFSW    NO, RESET HALF PAGE FLAG
         OI    STATUS4,PGSW        FLAG HALF PAGE SCROLLING
         CLI   14(R8),C'P'         FULL PAGE SCROLLING?
         BE    PSCRLDEF            YES, THIS IS NOW FLAGGED
         CLI   14(R8),C'0'         NO, NUMERIC CHARACTER?
         BL    PSCRLCSR            NO, USE CURSOR SCROLLING
         CLI   15(R8),C'0'         YES, SECOND NUMERIC CHARACTER?
         BL    PSCRLCSR            NO, USE CURSOR SCROLLING
         NI    STATUS4,255-PGSW    YES, RESET PAGE SCROLLING FLAG
         PACK  DOUBLE,14(2,R8)     GET PACKED DECIMAL
         CVB   R0,DOUBLE           GET BINARY
         ST    R0,SCROLL
         B     PSCRLDEF            YES, THIS IS NOW FLAGGED
PSCRLCSR OI    STATUS4,CSRSW       FLAG CURSOR SCROLLING
PSCRLDEF MVC   16(48,R3),16(R8)    COPY TIMESTAMP AND EXTENSIONS >R10.0
         LA    R0,24               LOAD THE NUMBER OF PFK VALUES
         CLI   16(R3),C'A'         STANDARD CODE-POINT INTERPRETATION?
         BE    PPLOADLP            YES, PROCEED
         MVI   16(R3),C'T'         NO, MUST BE "TEXT" INTERPRETATION
PPLOADLP LA    R8,PFKTABL(,R8)     POINT TO NEXT SOURCE PFK VALUE
         LA    R3,PFKTABL(,R3)     POINT TO NEXT TARGET PFK VALUE
         MVC   1(PFKTABL-1,R3),1(R8)        LOAD PFK VALUE
         BCT   R0,PPLOADLP         LOAD NEXT PROFILE PFK IF ANY
PROFINFM ICM   R0,15,HOLDEND       ANY BUFFER TO FREE?
         BZ    PROFINX             NO
         L     R1,HOLDTOP          YES, GET ITS ADDRESS
         FREEMAIN RU,A=(1),LV=(0)  FREE THE BUFFER
PROFINX  MVC   ACTCOLOR,CHRCOLOR   ALWAYS START WITH HEX OFF

**********************************************************************
*                                                          *         *
*         PROCESS "POINT AND SHOOT" REQUEST                *  GP@FT  *
*                                                          *  11/96  *
**********************************************************************

         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    PNSX                YES, POINT-AND-SHOOT INACTIVE
         L     R1,REVECT           POINT TO THE ECT
         USING ECT,R1
         TM    ECTSWS,ECTNOPD      ANY OPERANDS?
         BZ    PNSX                YES, PARSING REQUIRED
         DROP  R1                  ECT
         L     R15,=V(REVPNS)      NO OPERANDS SO DO "POINT-AND-SHOOT"
         BALR  R14,R15             CALL SUBROUTINE
         LTR   R15,R15             A POSITIVE OUTCOME?
         BP    USEDAIR             YES, ATTEMPT ALLOCATION
         BM    ERRPNS              NO, NEGATIVE SO END THIS 'REVIEW'
PNSX     DS    0H

************************************************************
*                                                          *
*         SET UP PPL FOR PARSE                             *
*                                                          *
************************************************************

         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=V(REVPCL)
         TM    STATUS6,HELSW
         BZ    GOTPCL
         L     R0,=V(HELPCL)
GOTPCL   ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL

************************************************************
*                                                          *
*         CALL THE PARSE SERVICE ROUTINE                   *
*                                                          *
************************************************************

         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP2
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK DS    0H
.SKIP2   ANOP
         LINK  EPLOC=IKJPARS,SF=(E,LINKAREA)
PARSEEXT DS    0H

         LTR   R15,R15
         BZ    PARSEOK
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, LET TSO HELP TRY IT
         LA    R1,MSG01
         LA    R0,L'MSG01
         BAL   R14,PUTMSG1
         LA    R15,12
         B     EXIT
IKJPARS  DC    CL8'IKJPARS'
PARSEOK  DS    0H

         L     R3,MYANS
         USING IKJPARMD,R3

************************************************************
*                                                          *
*         FILL IN ALL INFO FROM PARSE                      *
*                                                          *
************************************************************

         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    HARSE               YES - DO PARSING FOR HEL
         MVC   FILEKV,FILEKW
         MVC   DATAKV,DATAKW
         LA    R6,DSN
         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?
         BO    OKDSN               YES - BRANCH
         LA    R1,MSG05            NO - JUST MEMBER NAME
         LA    R0,L'MSG05
         BAL   R14,PUTMSG1
         B     EXITA12
COPYCBUF MVC   REPLY(0),0(R1)      <<< EXECUTED >>>
COPYDSN  MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
COPYMEMB MVC   $MEMBER(0),0(R14)   <<< EXECUTED >>>
COPYPSWD MVC   $PASSWRD(0),0(R14)  <<< EXECUTED >>>
COPYVLSR MVC   $VOLSER(0),0(R14)   <<< EXECUTED >>>
COPYUNIT MVC   $UNIT(0),0(R14)     <<< EXECUTED >>>
COPYTOP  EQU   COPYDSN             <<< EXECUTED >>>
COPYSBSY MVC   $VOLSER+1(0),0(R14) <<< EXECUTED >>>

OKDSN    DS    0H
         MVC   UDSNAME(4),4(R6)    COPY LENGTH AND QUOTE FLAGS
         LA    R15,UDSNAME+4
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         L     R14,0(,R6)          POINT TO DSN VALUE
         LH    R1,4(,R6)           GET LENGTH
         STH   R1,UDSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYDSN          MOVE DSN TO DSNAME (AFTER PREFIX)

         TM    14(R6),X'80'        MEMBER SPECIFIED?
         BZ    PARSEMX             NO - BRANCH
         LH    R1,12(,R6)          GET LENGTH OF MEMBER
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME
         EX    R1,COPYMEMB         MOVE MEMBER NAME
PARSEMX  DS    0H

         TM    22(R6),X'80'        PASSWORD SPECIFIED?
         BZ    PARSEPX             NO - BRANCH
         LH    R1,20(,R6)          GET LENGTH OF PSWD
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,16(,R6)         GET ADDRESS OF PSWD
         EX    R1,COPYPSWD         MOVE PASSWORD
PARSEPX  DS    0H
         LA    R6,VOL
         TM    6(R6),X'80'         VOLUME SPECIFIED?
         BZ    PARSEVX             NO, LEAVE VOL AND UNIT BLANK
         L     R14,0(,R6)          POINT TO VOL VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYVLSR         MOVE VOLUME
         MVC   $UNIT,=CL8'SYSALLDA'
         LA    R6,UNIT
         TM    6(R6),X'80'         UNIT SPECIFIED?
         BZ    PARSEUX             NO, BRANCH
         MVC   $UNIT,=CL8' '       ERASE 'SYSALLDA'
         L     R14,0(,R6)          POINT TO UNITNAME VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYUNIT         MOVE UNIT NAME
PARSEUX  DS    0H
PARSEVX  DS    0H
         LA    R6,TOPTTR
         TM    6(R6),X'80'         TOP TTR/BLK SPECIFIED?
         BZ    PARSETX             NO - BRANCH
         LH    R1,4(,R6)           GET HEX DIGIT COUNT
         LA    R15,6               GET MAXIMUM HEX DIGIT COUNT
         SLR   R15,R1              GET MISSING LEADING ZERO COUNT
         BCTR  R1,0                MINUS 1 FOR EX
         LA    R15,DOUBLE(R15)     POINT TO TARGET
         MVC   DOUBLE(6),=CL6'000000'   ENSURE LEADING ZEROS
         L     R14,0(,R6)          GET ADDRESS OF INITIAL TOP
         EX    R1,COPYTOP          MOVE TOP ADDRESS
         L     R15,=V(HEXDATA)     POINT TO HEX TRANSLATE TABLE
         TR    DOUBLE(6),0(R15)    CONVERT CHARACTERS TO HEXADECIMAL
         PACK  TTR,DOUBLE(7)       CONVERT TO POINT FORMAT
         MVI   TTR+3,0             ERASE GARBAGE - ENSURE TTR0
PARSETX  DS    0H
         LA    R6,SUBSYS
         TM    6(R6),X'80'         SUBSYSTEM SPECIFIED?
         BZ    PARSESX             NO, NORMAL DATA SET TO BE REVIEWED
         CLI   $VOLSER,C' '        WAS ANY VOLUME SPECIFIED?
         BNE   PARSESX             YES, IGNORE SUBSYSTEM
         L     R14,0(,R6)          POINT TO VOL VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYSBSY         MOVE SUBSYSTEM NAME
         MVI   $VOLSER,C'='        INDICATE SUBSYSTEM WITH EQUALS SIGNS
         MVI   $VOLSER+5,C'='               FOR THE HEADING
         XC    TTR,TTR             IGNORE ANY 'TOP' OPERAND
         B     PARSESX             END OF REVIEW COMMAND PARSING

HARSE    MVI   FILEKV,C'N'         ASSUME COMMAND WITH NO SUBCOMMANDS
         MVI   FILEKV+1,X'01'      ASSUME FILE(SYSHELP)
         MVI   $DSNAME,0
         MVI   $DSNAME+1,7
         MVC   $DSNAME+2(8),=CL8'SYSHELP'
         MVC   $SUBCOM,=CL8' '
         MVC   $MEMBER,=CL8'COMMANDS'
         LA    R6,MEMBERPO
         TM    6(R6),X'80'         MEMBER SPECIFIED?
         BZ    HARSEMX             NO, BRANCH
         OI    STATUS6,HELFF       YES, INITIAL POSITIONING REQUIRED
         MVC   $MEMBER,=CL8' '
         L     R14,0(,R6)          POINT TO MEMBER VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYMEMB         MOVE MEMBER NAME
HARSEMX  EQU   *
         L     R1,REVECT           START OF ECT
         CLC   =C'H ',ECTPCMD-ECT(R1)      HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         CLC   IBMHELP,ECTPCMD-ECT(R1)     HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         CLC   HELNAME,ECTPCMD-ECT(R1)     HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         CLC   HELNAME2(3),ECTPCMD-ECT(R1) HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         MVI   FILEKV,C'S'                 COMMAND WITH SUBCOMMANDS
         OI    STATUS6,HELFF+HELNEWS       SUBCOMMAND IS NOT SATISFIED
         MVC   $SUBCOM,$MEMBER             SUBCOMMAND IS MEMBER NAME
         MVC   $MEMBER,ECTPCMD-ECT(R1)     CHANGE MEMBER NAME
         CLC   $MEMBER,HEL4HEL             HELP FOR HEL?
         BNE   *+10                        NO, BRANCH
         MVC   $MEMBER,HELNAME             YES, CONVERT TO HEL
         CLC   $SUBCOM,$MEMBER             COMMAND NAME=SUBCOMMAND?
         BE    HARSEX                      YES, BRANCH
         TM    6(R6),X'80'                 SUBCOMMAND SPECIFIED?
         BO    HARSEO                      YES, BRANCH
HARSEX   NI    STATUS6,255-HELNEWS         SUBCOMMAND IS SATISFIED
         MVC   $SUBCOM,=CL8' '             NO SUBCOMMAND NAME

HARSEO   LA    R0,7
         LA    R15,$SUBCOM+8
HARSEO1  BCTR  R15,0               SCAN
         CLI   0(R15),C' '             FOR
         BNE   HARSEO2                    LAST
         BCT   R0,HARSEO1                     NON-BLANK
HARSEO2  STH   R0,$SUBLEN          MACHINE LENGTH OF SUBCOMMAND

         LA    R4,$OPERAND
         LA    R6,OPLIST
HARSELP  MVI   0(R4),C' '          CLEAR THIS ELEMENT
         MVC   1(19,R4),0(R4)
         LA    R1,0(,R6)           ADDRESS OF PARAMETER START
         LTR   R1,R1               ANY PARAMETER?
         BZ    HARSEOX             NO, BRANCH
         TM    6(R6),X'80'         OPERAND SPECIFIED?
         BZ    HARSEOX             NO, BRANCH
         L     R14,0(,R6)          POINT TO MEMBER VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYOPER         MOVE OPERAND NAME
         LA    R4,20(,R4)          NEXT OPERAND OUTPUT LOCATION
         L     R6,8(,R6)           NEXT OPERAND PARAMETER LOCATION
         B     HARSELP
COPYOPER MVC   0(0,R4),0(R14)      <<< EXECUTED >>>
HARSEOX  DS    0H
         LA    R0,20               MAXIMUM OPERANDS+MSGS SUPPORTED
         LA    R4,$OPERAND
         LA    R6,MSGLIST
HARSMLP1 CLI   0(R4),C' '          BLANK ENTRY?
         BE    HARSMLP2            YES
         LA    R4,20(,R4)          NO, NEXT OPERAND OUTPUT LOCATION
         BCT   R0,HARSMLP1
         B     HARSMX              NO ROOM FOR MESSAGE IDENTIFIERS
HARSMLP2 MVI   0(R4),C' '          CLEAR THIS ELEMENT
         MVC   1(19,R4),0(R4)
         LA    R1,0(,R6)           ADDRESS OF PARAMETER START
         LTR   R1,R1               ANY PARAMETER?
         BZ    HARSMX              NO, BRANCH
         TM    6(R6),X'80'         MESSAGE SPECIFIED?
         BZ    HARSMX              NO, BRANCH
         L     R14,0(,R6)          POINT TO MEMBER VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYOPER         MOVE MESSAGE IDENTIFIER
         LA    R4,20(,R4)          NEXT MESSAGE OUTPUT LOCATION
         L     R6,8(,R6)           NEXT MESSAGE PARAMETER LOCATION
         BCT   R0,HARSMLP2
HARSMX   DS    0H

         MVC   FKV,FKW             GET FUNCTION KEYWORD
         MVC   SKV,SKW             GET SYNTAX KEYWORD
         MVC   OKV,OKW             GET OPERANDS KEYWORD
         MVC   AKV,AKW             GET ALL KEYWORD
         MVC   MKV,MKW             GET MSGID KEYWORD
         MVC   PKV,PKW             GET POSITIONAL KEYWORD
         CLI   MKV+1,0             MSGID SPECIFIED?
         BE    PDSMSGOK            NO
         TM    STATUS2,STPDS       INVOKED AS PDS(TOOLS) SUBCOMMAND?
         BO    XCTLHELP            YES, USE TSO HELP FOR PUTLINE
PDSMSGOK NI    STATUS2,255-STPDS   NOT PDSTOOLS MEMBER GROUP PROCESSING
         CLI   PKV+1,1             POSITIONAL SPECIFIED?
         BNE   PARSESX             NO
         L     R6,POSITFF          YES, POINT TO IT
         MVC   HELPOS#,0(R6)       COPY FULLWORD INTEGER
PARSESX  DS    0H
         DROP  R3                  IKJPARMD
         IKJRLSA MYANS
         XC    MYANS,MYANS
         LA    R15,GET34VOL        GET ISPF 3.4 HANDLER ENTRY POINT
         BALR  R14,R15             INVOKE IT
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    PREFOK              YES - SKIP DEFAULT PREFIXING

************************************************************
*                                                          *
*         QUALIFY THE DSNAME IF NECESSARY                  *
*                                                          *
************************************************************

         LA    R15,$DSNAME+2
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         SLR   R1,R1
         STH   R1,$DSNAME          ZERO DSNAME LENGTH
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BO    NOPREF              YES, SKIP PREFIXING
         CLI   FILEKV+1,1          DSN TO BE TREATED AS DDNAME?
         BE    NOPREF              YES, SKIP PREFIXING
         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX
         L     R14,CPPLUPT         POINT TO UPT
         USING UPT,R14
         IC    R1,UPTPREFL         GET LENGTH OF PREFIX
         LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),UPTPREFX
         DROP  R14                 UPT
.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID
         L     R14,CPPLPSCB        POINT TO PSCB
         USING PSCB,R14
         IC    R1,PSCBUSRL         GET LENGTH OF USERID
         LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),PSCBUSER
         DROP  R14                 PSCB
.SKIPU   ANOP
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
         LA    R15,0(R1,R15)       POINT PAST USERID
         MVI   0(R15),C'.'         APPEND PERIOD
         LA    R15,1(,R15)         POINT PAST PERIOD
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         STH   R1,$DSNAME          STORE LENGTH OF USERID PLUS 1
NOPREF   DS    0H
         LH    R1,UDSNAME          GET LENGTH
         LR    R0,R1
         AH    R0,$DSNAME          ADD LENGTH OF PREFIX OR ZERO
         STH   R0,$DSNAME          SET COMBINED LENGTH
         LA    R14,UDSNAME+4       POINT TO DSN VALUE
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYDSN          MOVE DSN TO DSNAME (AFTER PREFIX)
PREFOK   DS    0H

************************************************************
*                                                          *
*         IF 'FILE' KEYWORD IS SPECIFIED,                  *
*         GET DSNAME FROM JFCB USING FILE NAME.            *
*                                                          *
************************************************************

         CLI   FILEKV+1,1          'FILE' SPECIFIED?
         BNE   NOFILE              NO, BRANCH
         CLI   $DSNAME+1,8         IS LENGTH 8 OR LESS?
         BH    FILERR1             NO, BRANCH
         DEVTYPE $DSNAME+2,DEVDATA GET DEVICE TYPE
         LTR   R15,R15             WAS FILENAME VALID?
         BNZ   FILEHEL             NO, BRANCH
         TM    DEVDATA+2,X'A0'     DIRECT ACCESS OR MAGNETIC TAPE?
         BZ    FILERR3             NO, BRANCH
         LA    R4,DYNDCBW
         L     R1,=V(SEQDCB)
         MVC   0(SEQDCBL,R4),0(R1)
         LA    R1,DYNEXLST
         LA    R0,ARL
         ST    R0,0(,R1)
         MVI   0(R1),X'13'         ALLOCATION RETRIEVAL EXIT (DFP 2.3)
         LA    R0,JFCB
         ST    R0,4(,R1)
         MVI   4(R1),128+X'07'     READ JFCB EXIT
         ST    R1,36(,R4)          DCBEXLST
         MVC   40(8,R4),$DSNAME+2  DCBDDNAM
         MVC   $DDNAML(10),$DSNAME
         LA    R0,4                ADD 4
         AH    R0,$DDNAML           TO LENGTH OF DDNAME
         STH   R0,$DDNAML            FOR +NNN (CONCAT NUMBER)
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,12(,R1)          TIOT
         LA    R1,24(,R1)          TIOENTRY
         SLR   R15,R15
ARDDLOOP ICM   R15,1,0(R1)         TIOELNGH - END OF TIOT?
         BZ    EXITA12             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R1),$DDNAME     DOES DDNAME MATCH?
         BE    ARDDFND
         LA    R1,0(R15,R1)
         B     ARDDLOOP
ARDDFND  LA    R1,0(R15,R1)        NO, POINT TO NEXT DD ENTRY
         CLI   0(R1),0             END OF TIOT?
         BE    DROPARL             YES, NOT CONCATENATED
         CLI   4(R1),C' '          CONCATENATED ENTRY?
         BNE   DROPARL             NO, NOT CONCATENATED
         L     R5,16               CVTPTR
         TM    116(R5),X'9B'       MVS/ESA OR LATER?
         BO    USEARL              YES, LET OS FETCH ALLOCATION DATA
         TM    12(R1),X'FE'        NO, JFCB ADDRESS UNDER 128K LINE?
         BZ    USEARL              YES, WRONG SO MUST BE SVA FOR > 16M
         SLR   R5,R5               NO, SO GO THRU CONCAT'D JFCBS < 16M
         ST    R1,DOUBLE           SAVE FIRST CONCAT'D ENTRY ADDRESS
ARCNCTLP ICM   R15,1,0(R1)         TIOELNGH - END OF TIOT?
         BZ    GOTARCNT            YES, NOW HAVE CONCATENATED COUNT
         CLI   4(R1),C' '          CONCATENATED ENTRY?
         BNE   GOTARCNT            NO, NOW HAVE CONCATENATED COUNT
         LA    R1,0(R15,R1)        YES, POINT TO NEXT DD ENTRY
         LA    R5,1(,R5)           INCREMENT CONCATENATION COUNTER
         B     ARCNCTLP
GOTARCNT STH   R5,ARLRTRVD         SAVE RETRIEVED JFCB COUNT
         MH    R5,=H'180'          GET SIZE OF JFCB LIST
         LA    R5,7(,R5)
         SRL   R5,3
         SLL   R5,3                ROUND TO DOUBLEWORD BOUNDARY
         LR    R0,R5               COPY INTO GETMAIN REGISTER
         ST    R0,ARLPOOL          SAVE SUBPOOL AND SIZE
         GETMAIN R,LV=(0)          GET ALLOCATION RETRIEVAL AREA
         ST    R1,ARLAREA          SAVE ITS ADDRESS
         LH    R0,ARLRTRVD         LOAD COUNT OF JFCB'S TO BE FETCHED
         L     R5,DOUBLE           POINT TO FIRST CONCAT'D TIOT ENTRY
         LA    R6,180              GET THE SIZE OF EACH ARL JFCB ENTRY
         SLR   R15,R15
ARJFCBLP STH   R6,0(,R1)           INITIALIZE ENTRY LENGTH
         L     R7,12(,R5)          LOAD JFCB "TTR"/SVA
         SRL   R7,8                SHIFT TO CORRECT PLACE
         MVC   4(176,R1),16(R7)    COPY THE JFCB (WITHOUT THE PREFIX)
         IC    R15,0(,R5)          GET THIS TIOT ENTRY'S LENGTH
         ALR   R5,R15              POINT TO NEXT TIOT ENTRY
         ALR   R1,R6               POINT TO NEXT ARL JFCB ENTRY
         BCT   R0,ARJFCBLP         PROCESS THE NEXT CONCATENATION
DROPARL  LA    R1,DYNEXLST         POINT TO DCB EXIT LIST
         MVC   0(4,R1),4(R1)       REMOVE X'13' ENTRY FROM LIST
USEARL   MVI   OPEND,X'80'
         RDJFCB ((R4)),MF=(E,OPEND)
         MVC   $DSNAME+2(44),JFCB
         LA    R1,$DSNAME+45       LAST CHAR OF DSNAME
         LA    R0,44               INITIAL LENGTH
FILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK?
         BNE   FILEB               YES, BRANCH
         BCTR  R1,0                BACK UP 1 CHARACTER
         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH
FILEB    STH   R0,$DSNAME          STORE LENGTH OF DSNAME
         MVI   DSORG,X'40'         DSORG PS
         CLI   $MEMBER,C' '        DDNAME(MEMBER)?
         BE    FILEC               NO
         MVI   DSORG,X'02'         YES, INDICATE PARTITIONED
         B     FILED               DON'T LOOK AT JFCB
FILEC    CLI   JFCB+44,X'40'       DDNAME ALLOCATED TO A MEMBER?
         BE    *+14                NO
         MVC   $MEMBER,JFCB+44     YES, SAVE THE MEMBER NAME
         MVI   DSORG,X'02'         DSORG PO
FILED    DS    0H
*        MVC   $VOLSER(6),JFCB+118 GET VOLUME FROM JFCB
         B     FILESPEC
FILERR1  LA    R0,MSG14A
         B     FILERR
FILEHEL  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    FILERR2             NO, MISSING FILE
         MVI   FILEKV+1,0          YES, CHANGE DDNAME SYSHELP
         MVI   $DSNAME+1,9                  TO DSNAME SYS1.HELP
         MVI   $DSNAME+2,C' '
         MVC   $DSNAME+3(43),$DSNAME+2
         MVC   $DSNAME+2(9),=CL9'SYS1.HELP'
         B     DEFX                SKIP DEFAULT QUALIFYING
FILERR2  LA    R0,MSG14B
         CLI   $DSNAME+1,7         IS DDNAME LENGTH 7?
         BNE   FILERR              NO, CAN'T BE PARMLIB
         CLC   PARMLIB,$DSNAME+2
         BNE   FILERR              NOT PARMLIB
         CLI   OSBITS,X'9B'        MVS/ESA OR OS/390?
         BNE   FILERR              NO, CVTOSLVL DOES NOT EXIST
         L     R1,16               CVTPTR
         TM    1265(R1),X'01'      OS/390 1.2 OR LATER?
         BNO   FILERR              NO, NO LOGICAL PARMLIB SERVICE
         MVC   $DDNAME,PARMLIB     YES, PREPARE FOR SERVICE ROUTINE
         LA    R1,SCREENW-4080
         LA    R1,4080(,R1)        POINT TO IEFPRMLB PARAMETER AREA
         IEFPRMLB REQUEST=ALLOCATE,      ALLOCATE PARMLIB FILE(S)      +
               ALLOCDDNAME=$DDNAME,      BETTER USED SPECIFIED DDNAME  +
               READ=NO,                  DO THE I/O HERE (DEFAULT)     +
               CALLERNAME=REVCALER,      IDENTIFY MACRO CALLER         +
               PLISTVER=MAX,             PLENTY OF SPACE FOR GROWTH    +
               MF=(E,(1),COMPLETE)
         OI    STATUS,STALLOC      ASSUME ALLOCATION OCCURRED
         LTR   R15,R15             DID IT REALLY?
         BZ    PREFOK              YES, REDRIVE DDNAME PROCESSING
         NI    STATUS,255-STALLOC  NO, NOTHING TO FREE ON EXIT
BADPRMLB STM   R15,R0,DOUBLE
         MVC   MSG(L'MSG22),MSG22  LOAD THE ERROR MESSAGE
         UNPK  MSG+L'MSG22(3),DOUBLE+3(2)
         UNPK  MSG+L'MSG22+3(3),DOUBLE+7(2)
         TR    MSG+L'MSG22(5),HEXTAB1-240
         MVI   MSG+L'MSG22+2,C'-'  SHOW HEX RETURN AND REASON CODES
         LA    R0,L'MSG22+5        SHOW MSG WITH CODES
         B     LOCERRX
FILERR3  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, LET TSO HELP DEAL WITH IT
         LA    R0,MSG14C
FILERR   MVC   MSG(L'MSG14),MSG14
         LA    R15,MSG+L'MSG14
         LA    R14,$DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         EX    R1,FILEMSLD
         LA    R15,1(R1,R15)
         LR    R14,R0              POINT TO MSG14A, B, OR C
         ICM   R1,3,0(R14)         GET THE MESSAGE SEGMENT LENGTH
         BCTR  R1,0
         EX    R1,FILEMSLD
         LA    R0,L'MSG14+1(,R1)
         AH    R0,$DSNAME          GET THE TOTAL MESSAGE LENGTH
         LA    R1,MSG
         BAL   R14,PUTMSG1
         B     EXITA12
FILEMSLD MVC   0(0,R15),2(R14)     <<< EXECUTED >>>
NOFILE   DS    0H
         TM    UDSNAME+2,X'40'     IS DSNAME QUOTED?
         BO    DEFX                YES - SKIP DEFAULT SERVICE
         CLI   $VOLSER,C' '        IS VOLUME SPECIFIED?
         BNE   DEFX                YES - SKIP DEFAULT SERVICE
         CLI   FILEKV+1,2          IS 'QUICK' SPECIFIED?
         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX

         LA    R15,MYIOPL
         USING IOPL,R15
         LA    R14,MYDFPB
         ST    R14,IOPLIOPB
         USING DFPB,R14
         XC    0(20,R14),0(R14)
         LA    R0,$DSNAME
         ST    R0,DFPBDSN
         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI
         MVC   DFPBPSCB,CPPLPSCB
*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME
         DROP  R14,R15,R2          DFPB, IOPL, CPPL

         LR    R1,R15              POINT TO IOPL
         AIF   (NOT &MVS).SKIP4
         L     R15,16              CVTPTR
         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   EHDEFLNK               THEN DO LINK, NOT CALL
         L     R15,736(,R15)       CVTEHDEF
         BALR  R14,R15             CALL IKJEHDEF
         B     EHDEFEXT            SKIP AROUND LINK
EHDEFLNK DS    0H
.SKIP4   ANOP
         LINK  EPLOC=IKJDFLT,SF=(E,LINKAREA)    KNOWN EP IN MVS AND F4
EHDEFEXT DS    0H

         B     DEFCODE(R15)
IKJDFLT  DC    CL8'IKJDFLT'        ALIAS OF IKJEHDEF
DEFCODE  B     DEF00               SUCCESS
         B     EXITA12             MSG ALREADY ISSUED
         B     DEF08               INVALID NAME GT 44
         B     EXITA12             MSG ALREADY ISSUED
         B     DEF16               NOT IN CATALOG
         B     DEF20               NOT IN CATALOG
         B     DEF24               IMPOSSIBLE
         B     DEF28               COMMAND SYSTEM ERROR
         B     DEF32               IMPOSSIBLE
         B     DEF36               ?
DEF08    DS    0H
DEF16    DS    0H
         B     DEF24
DEF20    DS    0H
LOCERR   DS    0H
         MVC   MSG(L'MSG02),MSG02
         LA    R15,MSG+L'MSG02
         LA    R14,$DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         EX    R1,LOCERR02
         LA    R15,1(R1,R15)
         MVC   0(L'MSG02A,R15),MSG02A
         LA    R0,L'MSG02+L'MSG02A+1(,R1)
LOCERRX  LA    R1,MSG
         BAL   R14,PUTMSG1
         B     EXITA12
LOCERR02 MVC   MSG+L'MSG02(0),2(R14) <<< EXECUTED >>>
DEF24    DS    0H
DEF28    DS    0H
DEF32    DS    0H
DEF36    DS    0H
         LA    R1,MSG03
         LA    R0,L'MSG03
         BAL   R14,PUTMSG1
         B     EXITA12

DEF00    DS    0H
DEFX     DS    0H

**********************************************************************
*                                                          *         *
*         ALLOCATE THE SUBSYSTEM DATA SET WITH DYNALLOC    *  GP@P6  *
*                                                          *  12/90  *
**********************************************************************

*              WHEN SUBSYSTEM DATA SETS ARE BEING REVIEWED THEN:
*         $UCBAD  IS ZERO      -AND-
*         $VOLSER IS =SSSS=    WHERE SSSS IS THE SUBSYSTEM NAME.
*
*         (SHOULD REALLY CONVERT ALL DYNAMIC ALLOCATIONS IN REVIEW
*         FROM DAIR TO SVC 99, NOT JUST HERE BUT IN REVPODIR AS WELL.
*         THE AREA POINTED TO BY DFIDP WOULD ALSO HAVE TO BE CHANGED IN
*         DAIRFAIL.  UNTIL THEN, IKJDAIR IS STILL WORKING PERFECTLY
*         WELL.)
*
*         USE SCREENW FOR DYNALLOC WORK AREA:
*            +0 S99RBPTR
*            +4 S99RB
*           +18 S99RBX
*           +40 S99TUPL
*           +60 S99TUNIT

         CLI   $VOLSER,C'='        WAS SUBSYSTEM SPECIFIED?
         BE    USEDYNAL            YES, PROCEED
         CLI   $VOLSER,C' '        WAS VOLUME SPECIFIED?
         BE    USEDAIR             NO, PROCEED AS NORMAL
         CLI   $DSNAME+1,12        DSNAME LENGTH = 12?
         BNE   USEDAIR             NO, PROCEED AS NORMAL
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BNO   USEDAIR             NO, PROCEED AS NORMAL
         CLI   $MEMBER,C' '        WAS A MEMBER SPECIFIED?
         BNE   USEDAIR             YES, PROCEED AS NORMAL
         CLC   =C'FORMAT4.DSCB',$DSNAME+2    VTOC REQUESTED?
         BNE   USEDAIR             NO, PROCEED AS NORMAL
         B     USESVC99            YES
USEDYNAL TM    STATUS2,STAUTH      APF AUTHORIZED?
         BO    USESVC99            YES, PROCEED WITH DYNALLOC
         LA    R1,MSG11            NO, CANNOT ALLOC SUBSYS DATA SET
         LA    R0,L'MSG11
         BAL   R14,PUTMSG1
         LA    R1,MSG11X           SUGGEST TRYING 'REVVSAM' COMMAND
         LA    R0,L'MSG11X
         BAL   R14,PUTMSG1
         B     EXITA12

USESVC99 LA    R1,SCREENW-4080
         LA    R1,4080(0,R1)       POINT DYNALLOC PARAMETER LIST
         XC    0(256,R1),0(R1)     ERASE SOME RESIDUAL DATA
         USING S99RBPTR,R1
         LA    R15,4(,R1)          POINT TO DYNALLOC REQUEST BLOCK
         USING S99RB,R15
         ST    R15,S99RBPTR        INITIALIZE PARAMETER LIST
         OI    S99RBPTR,S99RBPND   INDICATE END OF PARAMETER LIST
         MVI   S99RBLN,20          SUPPLY REQUEST BLOCK LENGTH
         MVI   S99VERB,S99VRBAL    VERB=X'01' - DSNAME ALLOCATION
         MVI   S99FLG11,S99NOCNV+S99NOMNT   NEW ALLOC AND NOMOUNT
         MVI   S99FLG12,0
         SLR   R0,R0
         STH   R0,S99ERROR         ZERO ERROR REASON CODE
         STH   R0,S99INFO          ZERO INFORMATION REASON CODE
         ST    R0,S99FLAG2         ZERO AUTHORIZED FLAGS
         LA    R14,64(,R1)         GET TEXT POINTERS AREA ADDRESS
         ST    R14,S99TXTPP        SAVE IT
         LA    R0,20(,R15)         GET REQUEST BLOCK EXTENSION ADDR
         ST    R0,S99S99X          SAVE IT
         DROP  R15                 S99RB
         LR    R15,R0
         USING S99RBX,R15
         MVC   S99EID,=C'S99RBX'   SUPPLY CONTROL BLOCK ID
         MVI   S99EVER,S99RBXVR    SUPPLY VERSION NUMBER (X'01')
         MVI   S99EOPTS,S99EIMSG   LET SYSTEM USE PUTLINE FOR MSG(S)
         MVI   S99EMGSV,S99XINFO   SHOW EVEN INFO-LEVEL MESSAGES
         MVC   S99ECPPL,CPPLPTR    SUPPLY CPPL ADDRESS FOR PUTLINE
         SLR   R0,R0
         ST    R0,S99EMRC          ZERO RESERVED BYTES
         STH   R0,S99EERR          ZERO ERROR REASON CODE
         STH   R0,S99EINFO         ZERO INFORMATION REASON CODE
         ST    R0,S99ERSN          ZERO SMS REASON CODE (WAS S99ERSV2)
         DROP  R15                 S99RBX
         USING S99TUPL,R14
         LA    R15,32(,R14)        POINT TO AREA FOR TEXT UNITS
         USING S99TUNIT,R15
         ST    R15,S99TUPTR        SAVE FIRST TEXT UNIT ADDRESS
         LA    R0,DALVLSER         KEY = X'0010' - VOLUME SERIAL
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,6
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 6
         MVC   S99TUPAR(6),$VOLSER LOAD VOLUME SERIAL NUMBER
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE SECOND TEXT UNIT ADDRESS
         LA    R0,DALUNIT          KEY = X'0015' - UNIT DESCRIPTION
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         LENGTH IS 8
         MVC   S99TUPAR(8),=CL8'SYSALLDA'
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE THIRD TEXT UNIT ADDRESS
         LA    R0,DALSTATS         KEY = X'0004' - DATA SET STATUS
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
*        LA    R0,1
         STH   R0,S99TULNG         LENGTH IS 1
         MVI   S99TUPAR,DA08SHR    USE SHARED ENQUEUE
         B     LAST99TU            GO ADD LAST TEXT UNIT
SETDSN99 LA    R0,DALDSNAM         KEY = X'0002' - DATA SET NAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         MVC   S99TULNG(46),$DSNAME  SUPPLY LENGTH AND DATA SET NAME
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,64(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE SECOND TEXT UNIT ADDRESS
         CLI   $MEMBER,C' '        WAS A MEMBER SPECIFIED?
         BE    MEM99OK             NO
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BNE   MEM99OK             NO, ALLOC WHOLE DATA SET FOR BPAM
         LA    R0,DALMEMBR         KEY = X'0003' - DATA SET MEMBER
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),$MEMBER LOAD MEMBER NAME
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE NEXT TEXT UNIT ADDRESS
MEM99OK  LA    R0,DALSSNM          KEY = X'005F' - SUBSYSTEM NAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,4
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 4
         MVC   S99TUPAR(4),$VOLSER+1        LOAD SUBSYSTEM NAME
LAST99TU LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE LAST TEXT UNIT ADDRESS
         OI    S99TUPTR,S99TUPLN   INDICATE THAT IT IS THE LAST
         LA    R0,DALRTDDN         KEY = X'0055' - RETURN DDNAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),=CL8' ' SUPPLY SLOT GENERATED DDNAME
         LA    R0,S99TULNG
         ST    R0,DOUBLE           REMEMBER THIS DDNAME LOCATION
         DROP  R1,R14,R15          S99RBPTR, S99TUPL, S99TUNIT
         DYNALLOC
         LTR   R15,R15             SUCCESS?
         BNZ   EXITA12             NO, TERMINATE (HOPE MVS ISSUED MSG)
         OI    STATUS,STALLOC      YES, TELL CLEANUP TO FREE IT
         L     R1,DOUBLE           POINT TO DDNAME DETAILS
         MVC   $DDNAML(10),0(R1)   COPY DDNAME LENGTH AND DDNAME
         CLI   $VOLSER,C'='        SUBSYSTEM ALLOCATION?
         BE    CHKSSDIV            YES
         MVI   DSORGTYP,X'DD'      FLAG "DISK DIRECTORY"
         NI    STATUS2,255-STPDS   NOT MEMBER GROUP NOR FULLSCREEN HELP
         B     FILESPEC
CHKSSDIV SLR   R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         L     R15,DIVADDR1        LOAD "DIV" ENTRY POINT
         BASSM R14,R15             EXECUTE REVDIV IN AMODE-31
         LTR   R15,R15             SUCCESS?
         BZ    FILESPEC            YES
         LA    R1,MSG12            NO, UNABLE TO OBTAIN "DIV" STORAGE
         LA    R0,L'MSG12
         BAL   R14,PUTMSG1
         B     EXITA12

************************************************************
*                                                          *
*         ALLOCATE THE DATA SET WITH IKJDAIR               *
*                                                          *
************************************************************

USEDAIR  LA    R15,MYDAPB
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,$UNIT
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '     NEVER ALLOCATE WITH MEMBER
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         LA    R1,MYDAPL

         BAL   R14,CALLDAIR
         LTR   R2,R15
         BZ    OKDAIR
         TM    MODE,FSMODE         IN FULLSCREEN MODE?
         BZ    BADDAIR             NO, NO ACTION REQUIRED
         TM    MODE,RECURS         RECURSIVE 'REVIEW' SESSION?
         BO    BADDAIR             YES, STAY IN FULLSCREEN MODE
         STFSMODE OFF              LET 'READY' PROMPT ACCEPT INPUT
         NI    MODE,255-FSMODE     FULL SCREEN MODE NOW OFF
         LR    R15,R2              RESTORE RETURN CODE FOR MESSAGE
BADDAIR  BAL   R14,DAIRFAIL
         B     EXITA12
OKDAIR   DS    0H
         OI    STATUS,STALLOC      TELL CLEANUP TO FREE IT
         LA    R15,MYDAPB
         MVC   $DDNAME,DA08DDN
         MVC   DSORG(1),DA08DSO
         DROP  R15                 DAPB08
FILESPEC DS    0H

************************************************************
*                                                          *
*         GET THE UCB ADDRESS AND VOLUME SERIAL            *
*                                                          *
************************************************************

         XC    ATTNLST(ATTNLEN),ATTNLST  ZERO ATTN LIST
         LA    R5,ATTN             POINT TO ATTENTION EXIT
         ST    R5,ATTNADDR         REMEMBER ITS ADDRESS
         STAX  (R5),REPLACE=NO,USADDR=@DATA,MF=(E,ATTNLST)
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,12(,R1)          TIOT
         LA    R7,24(,R1)          TIOENTRY
DDLOOP   CLI   0(R7),0             END OF TIOT?
         BE    EXITA12             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R7),$DDNAME     DOES DDNAME MATCH?
         BE    DDFOUND
         SLR   R15,R15
         IC    R15,0(,R7)
         LA    R7,0(R15,R7)
         B     DDLOOP
DDFOUND  L     R15,16(,R7)         TIOEFSRT-1
         LA    R15,0(,R15)         CLEAR TOP BYTE
         ST    R15,$UCBAD          SAVE IT FOR LATER
         LTR   R15,R15             ANY UCB?
         BZ    FASTX               NO, FORGET OBTAIN AND "FASTPATH"
         MVC   $VOLSER,28(R15)     UCBVOLI
         MVC   DOUBLE(2),18(R15)   COPY DEVICE TYPE FLAGS
         TM    DOUBLE,X'20'        DIRECT ACCESS DEVICE?
         BO    OBTDSCB             YES, OBTAIN DATA SET CONTROL BLOCK
         OI    STATUS2,MAGTAPE     NO, FLAG AS MAGNETIC TAPE FILE
         NI    STATUS2,255-STPDS   NOT MEMBER GROUP NOR FULLSCREEN HELP
         MVC   $MEMBER,=CL8' '     NO MEMBER ACCESS POSSIBLE
         CLI   DOUBLE+1,X'80'      3480 IN FULL FUNCTION MODE?
         BNE   FASTX               NO, BYPASS OBTAIN AND FASTPATH
         OI    STATUS2,CARTRIDG    YES, HI-SPEED SEARCH & MSGDISP AVAIL
         B     FASTX               BYPASS OBTAIN AND "FASTPATH"

************************************************************
*                                                          *
*         OBTAIN THE DSCB FROM THE VTOC                    *
*                                                          *
************************************************************

OBTDSCB  LA    R1,OBTAINW
         MVC   0(OBTAINL,R1),OBTAIN
         LA    R0,$DSNAME+2        DSN FOR OBTAIN
         CLI   DSORGTYP,X'DD'      PROCESSING VTOC? ("DISK DIRECTORY"?)
         BNE   OBTDSN              NO, HAVE CORRECT DSNAME
         MVI   JFCB,X'04'          YES, USE FORMAT-4 DSCB KEY
         MVC   JFCB+1(43),JFCB
         LA    R0,JFCB             KEY FOR OBTAIN
OBTDSN   ST    R0,4(,R1)
         LA    R0,$VOLSER          VOLUME FOR OBTAIN
         ST    R0,8(,R1)
         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN
         ST    R0,12(,R1)
         OBTAIN (1)
         LTR   R15,R15             WAS OBTAIN SUCCESSFUL?
         BZ    OKDSCB              YES, BRANCH

*               OBTAIN HAS FAILED.  HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL?  ONE WAY IT
*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY
*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL
*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW
*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.

         TM    STATUS,STLOCAT      HAS LOCATE BEEN TRIED ALREADY?
         BZ    OBTALIAS            NO, GO TRY IT

*               OBTAIN HAS FAILED.  HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL?  ANOTHER WAY
*               IT CAN HAPPEN IS IF A VSAM DATA COMPONENT IS
*               NOMINATED WHICH HAS AN ALTERNATE INDEX.  IF THIS
*               IS THE CASE THEN THE FIRST VOLUME ALLOCATED IS
*               THAT OF THE ALTERNATE INDEX, AND IF THE BASE DATA
*               COMPONENT IS ON A DIFFERENT VOLUME THEN A MULTI-UNIT
*               FILE MUST HAVE BEEN ALLOCATED.  THE SOLUTION IS TO
*               ALLOCATE A NEW SINGLE-UNIT FILE TO THE SECOND VOLUME
*               AND PROCESS THAT DDNAME.

         CLI   0(R7),24            SINGLE-UNIT TIOT ENTRY?
         BL    OBTERR              YES, END OF STORY
         L     R15,20(,R7)         NO, LOAD SECOND UNIT'S ENTRY
         LA    R15,0(,R15)         MAKE ADDRESS OKAY FOR ANY AMODE
         LTR   R15,R15             ANY UCB?
         BZ    OBTERR              NO, END OF STORY
         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?
         BZ    OBTERR              NO, END OF STORY
         MVC   $VOLSER,28(R15)     YES, COPY UCBVOLI
         MVC   $UNIT,=CL8'SYSALLDA'
         TM    STATUS,STALLOC      WAS FILE ALLOCATED HERE?
         BZ    USEDAIR             NO, GO GET A NEW SINGLE-UNIT FILE
         LA    R1,MYDAPL           YES, FREE THE CURRENT FILE FIRST
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         DROP  R15                 DAPB18
         BAL   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-STALLOC  UNALLOCATED
         B     USEDAIR

OBTERR   LA    R1,MSG09            UNABLE TO OBTAIN DSCB
         LA    R0,L'MSG09
         BAL   R14,PUTMSG1
         B     EXITA12

OBTALIAS OI    STATUS,STLOCAT      TRIP THE SWITCH
         LA    R1,LOCATEW
         MVC   0(LOCATEL,R1),LOCATE
         LA    R0,$DSNAME+2        DSNAME FOR LOCATE
         ST    R0,4(,R1)
         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE
         ST    R0,12(,R1)
         LOCATE (1)
         LTR   R15,R15             WAS LOCATE SUCCESSFUL?
         BNZ   OBTERR              NO, ISSUE MESSAGE
         LA    R0,44               YES, GET MAX DATA SET NAME LENGTH
         LA    R1,$DSNAME+45       POINT TO LAST DSN CHARACTER
DSNLENLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NEW$DSNL            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,DSNLENLP         DECREMENT LENGTH AND TEST PREVIOUS
NEW$DSNL STH   R0,$DSNAME          SAVE REAL DATA SET NAME LENGTH
         B     OBTDSCB             GO OBTAIN AGAIN

VTOCDSCB NI    STATUS2,255-STPDS   NOT MEMBER GROUP NOR FULLSCREEN HELP
         MVI   DSORG,X'40'         USE SEQUENTIAL ACCESS
         LA    R0,1
         ST    R0,BLKFACTR         VTOCS ARE NOT BLOCKED
         ICM   R0,1,MYDSCB+30      GET DSCBS PER TRACK
         BNP   FASTX               HANDLE OBVIOUSLY WRONG DATA
         MVC   DOUBLE,MYDSCB-44+107   ALIGN VTOC EXTENT DATA
         LH    R15,DOUBLE+4        GET VTOC END CC
         SH    R15,DOUBLE          SUBTRACT VTOC START CC
         MH    R15,MYDSCB+20       MULTIPLY BY TRACKS PER CYLINDER
         AH    R15,DOUBLE+6        ADD VTOC END HH
         SH    R15,DOUBLE+2        SUBTRACT VTOC START HH
         MR    R14,R0              GET VTOC DSCB COUNT
         B     FASTVTOC            ACTIVATE "FASTPATH" FOR VTOC ACCESS

OKDSCB   NI    STATUS,255-STLOCAT  TURN OFF LOCATE SWITCH
         CLI   DSORGTYP,X'DD'      PROCESSING VTOC? ("DISK DIRECTORY"?)
         BE    VTOCDSCB            YES
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    VSAMINIT            NO, DON'T CHECK HELP FILE VALIDITY
         TM    MYDSCB-44+82,X'02'  DSORG = PO?
         BZ    XCTLHELP            NO, LET TSO HELP SAY IT IS INVALID
         CLC   =H'80',MYDSCB-44+88 LRECL = 80?
         BNE   XCTLHELP            NO, LET TSO HELP SAY IT IS INVALID

**********************************************************************
*                                                          *         *
*         PERFORM ADDITIONAL INITIALIZATION FOR VSAM       *  GP@P6  *
*                                                          *  03/87  *
**********************************************************************

VSAMINIT MVC   AMKLN+1(1),MYDSCB-44+90
         MVC   AMRKP,MYDSCB-44+91  COPY KEY DETAILS FOR RULER MARKERS
         TM    MYDSCB-44+83,X'08'  DSORG = VS?
         BZ    NONVSAM             NO
         OC    MYDSCB-44+140(5),MYDSCB-44+140  CCHHR OF DSCB1
         BNZ   DSCBOK              NOT A PHONY VSAM DSCB, SO NO S213-04
COMPACB  LA    R5,SCREENW-4080     CLUSTER, ALSO ACB I/O TO COMPONENT
         LA    R5,4080(,R5)        POINT TO SHOWCAT PARAMETER AREA
         XC    0(16,R5),0(R5)      RESET SHOWCAT PARAMETER LIST
         LA    R3,256(,R5)         POINT TO SHOWCAT WORK AREA
         LA    R0,1024
         STH   R0,0(,R3)           ALLOW SHOWCAT UP TO 1K BYTES
         LA    R2,$DSNAME+2        POINT TO THE VSAM DATA SET NAME
         SHOWCAT AREA=(R3),NAME=(R2),MF=(E,(R5))
         LTR   R15,R15             WAS SHOWCAT SUCCESSFUL?
         BZ    SHOCATOK            YES, PROCEED
SHOCATER STC   R15,DOUBLE          NO, GET THE RETURN CODE
         MVC   MSG(L'MSG18),MSG18  LOAD THE ERROR MESSAGE
         UNPK  MSG+L'MSG18(3),DOUBLE(2)
         TR    MSG+L'MSG18(2),HEXTAB1-240
         LA    R0,L'MSG18+2        SHOW MSG WITH SHOWCAT RETURN CODE
         B     LOCERRX
SHOCATOK CLI   8(R3),C'D'          REVIEWING A DATA COMPONENT?
         BE    COMPOKAY            YES, NO FURTHER SHOWCAT REQUIRED
         CLI   8(R3),C'I'          REVIEWING AN INDEX COMPONENT?
         BE    COMPOKAY            YES, NO FURTHER SHOWCAT REQUIRED
         XC    DOUBLE,DOUBLE       CLEAR SOME BYTES
         LH    R0,10(,R3)          GET THE ASSOCIATED POINTER COUNT
         LA    R1,12(,R3)          POINT TO THE FIRST POINTER
ASSOCLP  CLI   0(R1),C'D'          GOT A DATA POINTER?
         BE    DATAPNTR            YES
         CLI   0(R1),C'I'          GOT AN INDEX POINTER?
         BE    INDEXPTR            YES
NXTASSOC LA    R1,4(,R1)           POINT TO THE NEXT POINTER
         BCT   R0,ASSOCLP          PROCESS IT
         OC    DOUBLE(4),DOUBLE    FOUND THE DATA ASSOCIATION?
         BNZ   ASSOCOK             YES
         LA    R1,MSG17            NO DATA COMPONENT POINTER RETURNED
         LA    R0,L'MSG17
         BAL   R14,PUTMSG1
         B     EXITA12
DATAPNTR MVC   DOUBLE(4),0(R1)     COPY THE DATA POINTER ENTRY
         B     NXTASSOC
INDEXPTR CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    NXTASSOC            YES, SHOW DATA IN RBA ORDER
         OI    $UCBAD,KSDSSW       NO, FLAG FOR ACCESS IN KEY ORDER
         B     NXTASSOC
ASSOCOK  L     R6,4(,R3)           LOAD CATALOG ACB ADDRESS
         XC    0(16,R5),0(R5)      RESET SHOWCAT PARAMETER LIST
*        LA    R3,256(,R5)         POINT TO SHOWCAT WORK AREA
         LA    R0,1024
         STH   R0,0(,R3)           ALLOW SHOWCAT UP TO 1K BYTES
         LA    R2,DOUBLE+1         POINT TO THE CI NUMBER
         SHOWCAT AREA=(R3),ACB=(R6),CI=(R2),MF=(E,(R5))
         LTR   R15,R15             WAS SHOWCAT SUCCESSFUL?
         BNZ   SHOCATER            NO, PRODUCE AN ERROR MESSAGE
COMPOKAY MVC   AMKEY,10(R3)        COPY RECORD KEY OFFSET AND LENGTH
         MVC   AMCIV,14(R3)        COPY CONTROLINTERVAL SIZE
         MVC   AMLCL,18(R3)        COPY MAXIMUM RECORD LENGTH
         OI    $UCBAD,ACBSW        FLAG I/O VIA ACB REQUIRED
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    ICFVSAMX            YES, SUPPRESS DB2 ROW PROCESSING
         B     LINEARVS            NO, GO CHECK IF DB2 TABLESPACE

DSCBOK   TM    STATUS2,STAUTH      APF AUTHORIZED?
         BZ    COMPACB             NO, USE VSAM (ACB) NOT BSAM (DCB)
         CLI   MYDSCB-44+59,17     MORE THAN 16 EXTENTS ON VOL?
         BL    XTNTSOK             NO, PROCEED
         LH    R1,$DSNAME          MORE THAN 16 EXTENTS - AVOID S213-20
         LR    R14,R1
         MVC   MSG(44),$DSNAME+2
         LA    R15,MSG(R1)
         MVC   0(L'MSG15,R15),MSG15
         MVC   L'MSG15(6,R15),$VOLSER
         LA    R0,L'MSG15+6(,R14)
         LA    R1,MSG
         BAL   R14,PUTMSG1
         LA    R1,MSG15X           SUGGEST TRYING 'REVIEW' COMMAND
         LA    R0,L'MSG15X
         BAL   R14,PUTMSG1
         B     EXITA12

XTNTSOK  CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    ICFVSAMX            YES, SHOW ALL CI CONTENTS
         OI    MODE,VSAMSW         NO, SHOW LOGICAL RECORDS
         TM    MYDSCB-44+85,X'80'  IS THIS AN ICF COMPONENT?  (OPTCD)
         BZ    ICFVSAMX            NO, FORGET ABOUT THE VVDS
         MVI   CMDAREA+2,C' '      YES, BLANK THE VVDS DSNAME AREA
         MVC   CMDAREA+3(43),CMDAREA+2
         MVC   CMDAREA+2(11),=C'SYS1.VVDS.V'
         MVC   CMDAREA+13(6),$VOLSER
         LA    R0,17               GET MAX DATA SET NAME LENGTH
         LA    R1,CMDAREA+18       POINT TO LAST DSN CHARACTER
VVDSLNLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NEWVVDSL            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,VVDSLNLP         DECREMENT LENGTH AND TEST PREVIOUS
NEWVVDSL STH   R0,CMDAREA          SAVE VVDS DATA SET NAME LENGTH
         LA    R15,MYDAPB
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,CMDAREA
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,=CL8'SYSALLDA'
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         DROP  R15                 DAPB08

         LA    R1,MYDAPL           POINT TO PARAMETER LIST
         BAL   R14,CALLDAIR        ALLOCATE THE VVDS
         LTR   R15,R15             COULD IT BE ALLOCATED?
         NOP   VVDSFAIL            NO, SHOW PHYSICAL BLOCKS ONLY
* CHANGE NOP ABOVE TO BNZ FOR VVDS ALLOCATION ERROR MESSAGES/DEBUGGING.
         BNZ   ICFVSAMX            NO, PROCEED AS IF NON-ICF VSAM
         MVI   DSORGTYP,X'CF'      YES, ENTER VVDS SCAN MODE
         LA    R15,MYDAPB
         USING DAPB08,R15
         MVC   PCMD,$DDNAME        REMEMBER THE "REAL" $DDNAME
         MVC   $DDNAME,DA08DDN     COPY DDNAME TO ACCESS VVDS
         DROP  R15                 DAPB08
         MVC   CMDAREA+2(44),$DSNAME+2
         LH    R15,$DSNAME         GET LENGTH OF DATA SET NAME
         LA    R15,1(,R15)         ADD ONE
         STH   R15,CMDAREA         MAKE COMPARE DATA FOR VVDS Z RECORD
         L     R15,=V(REVIEW2)     GET ADDRESS OF PHASE 2
         BALR  R14,R15             GO EXTRACT VVDS DETAILS
         SLR   R0,R0
         ST    R0,MAXPOINT         ZERO AFTER VVDS LOOK-UP
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         LA    R1,MYDAPL
         DROP  R15                 DAPB18
         BAL   R14,CALLDAIR        UNALLOCATE THE VVDS
         MVC   $DDNAME,PCMD        RESTORE THE "REAL" $DDNAME
         MVC   PCMD,=CL8' '        JUST TO BE TIDY
         NI    DSORGTYP,VVRCOMTP   JUST KEEP COMPONENT TYPE (D/I)
         ICM   R0,B'1111',AMCIV    ZERO CONTROLINTERVAL SIZE?
         BZ    LINEARDS            YES, VVDS ERROR
         ICM   R0,B'1111',AMLCL    ZERO MAXIMUM RECORD SIZE?
         BZ    LINEARDS            YES, LINEAR DATA SET
         OI    DSORGTYP,X'C0'      NO, LOOKING AT ICF DATA
         B     ICFVSAMX            DISPLAY LOGICAL RECORDS
VVDSFAIL BAL   R14,DAIRFAIL
LINEARDS NI    MODE,255-VSAMSW     DISPLAY PHYSICAL BLOCKS ONLY
LINEARVS CLI   $DSNAME+1,20        "SMALL" DATA SET NAME?
         BL    ICFVSAMX            YES, CAN'T BE DB2
         LA    R1,$DSNAME+2        POINT TO THE DATA SET NAME
         LA    R0,8                GET QUALIFIER MAXIMUM LENGTH
DBDTEST  CLC   =C'.DSNDBD.',1(R1)  IS THIS A DB2 TABLESPACE?
         BE    DB2DBDOK            YES
         CLC   =C'.DSNDBC.',1(R1)  IS THIS A DB2 TABLESPACE?
         BE    DB2DBCOK            YES
         LA    R1,1(,R1)           POINT TO NEXT DATA SET NAME BYTE
         BCT   R0,DBDTEST          CONTINUE TESTING
         B     ICFVSAMX            NOT DB2 SO PROCEED AS USUAL
DB2DBDOK OI    MODE,VSAMSW         SELECT LOGICAL RECORD BREAKOUT WHERE
DB2DBCOK OI    STATUS6,DB2TBL           A LOGICAL RECORD IS A DB2 ROW!
         B     ICFVSAMX

**********************************************************************
*                                                          *         *
*         PERFORM ACF2 NON-VSAM SECURITY CHECK             *  GP@GE  *
*                                                          *  07/97  *
**********************************************************************

NONVSAM  TM    STATUS,STALLOC      WAS FILE ALLOCATED HERE?
         BZ    ICFVSAMX            NO, DON'T NEED TO CLEAN UP ALLOC
         TM    OSBITS,X'13'        SOME FLAVOUR OF MVS?
         BNO   ICFVSAMX            NO, FORGET RACROUTE
         L     R15,16              POINT TO THE CVT
         ICM   R15,15,992(R15)     LOAD CVTRAC FOR ACF CVT
         BZ    ICFVSAMX            NO SECURITY SO FORGET RACROUTE
         CLI   0(R15),C'A'         RCVT SUPPLIED BY ACF2?
         BNE   ICFVSAMX            NO, OPEN ABEND EXIT IS GOOD FOR RACF
         LA    R2,SCREENW-4080
         LA    R2,4080(,R2)
         USING SCREENW,R2
         MVC   SCREENW(RRL),RR     COPY MACRO LIST FORM
         RACROUTE REQUEST=AUTH,    PERFORM A SAF RACHECK               +
               ENTITY=($DSNAME+2), SPECIFY DATA SET NAME               +
               VOLSER=$VOLSER,     SPECIFY VOLUME                      +
               ATTR=READ,          CHECK ABILITY TO READ (DEFAULT)     +
               DSTYPE=N,           CHECK IS FOR A NON-VSAM DATA SET    +
               WORKA=SCREENW+256,  SPECIFY WORK AREA                   +
               MF=(E,SCREENW)
         DROP  R2                  SCREENW
         LTR   R15,R15             READ ACCESS ALLOWED?
         BZ    ICFVSAMX            YES, PROCEED
         MVC   MSG(L'MSG19),MSG19  NO, ISSUE MESSAGE TO THIS EFFECT
         MVC   MSG+L'MSG19(44),$DSNAME+2
         LH    R1,$DSNAME
         LA    R0,L'MSG19(,R1)     GET MESSAGE LENGTH
         B     LOCERRX
ICFVSAMX DS    0H

**********************************************************************
*                                                          *         *
*         INVOKE PARTITIONED DIRECTORY DISPLAY             * GP@SECV *
*                                                          *  03/86  *
**********************************************************************

         TM    MYDSCB-44+78,X'88'  SMS-MANAGED INCLUDING PDSE?
         BNZ   NOTCVOL             YES, CANNOT BE OS/CATALOG
         CLC   MYDSCB-44+98(3),=X'0000FF' CHECK DS1LSTAR
         BE    CVOLPDSD            BRANCH IF OS/CATALOG
NOTCVOL  MVC   DSORG,MYDSCB-44+82
         TM    DSORG,X'02'         DSORG = PO?
         BNO   PODIRX              NO
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    CVOLPDSD            YES, REVIEW PDS DIRECTORY
         TM    OSBITS,X'92'        MVSXA-LIKE WITH OVER 16MB VIRTUAL?
         BNO   NODIV0              NO, DON'T USE "DATA-IN-VIRTUAL"
         CLI   $VOLSER,C' '        VIO DATA SET?
         BE    NODIV0              YES, SUPPRESS "DATA-IN-VIRTUAL"
         TM    MYDSCB-44+84,X'50'  RECFM=VB?  (VARIABLE BLOCKED?)
         BO    NODIV0              YES, AVOID DIV OVERLAYING GET BUFFER
         SLR   R0,R0               GET ENTRY CODE (GETMAIN)
         L     R15,DIVADDR1        LOAD "DIV" ENTRY POINT
         BASSM R14,R15             EXECUTE REVDIV IN AMODE-31
NODIV0   DS    0H                  IT EITHER WORKED OR IT DIDN'T
         CLI   $MEMBER,C' '        WAS A MEMBER SPECIFIED?
         BNE   FASTX               YES, BYPASS "FASTPATH"
         ICM   R0,B'1111',TTR      WAS A MEMBER IMPLIED BY 'TOP'?
         BNZ   FASTX               YES, BYPASS "FASTPATH"
         XC    $MEMBER,$MEMBER     NO, START FROM FIRST MEMBER
         BAL   R14,SCRNINIT        DETERMINE INITIAL DISPLAY MODE
SELNLIST L     R15,=V(REVPODIR)        AND DISPLAY MEMBER LIST
         BALR  R14,R15             CALL REVPODIR
         B     EXITA##             EXIT REVIEW
CVOLPDSD MVI   DSORGTYP,X'FF'      FLAG CVOL OR PDS DIRECTORY
PODIRX   MVC   $MEMBER,=CL8' '     NO MEMBER ACCESS POSSIBLE
         NI    STATUS2,255-STPDS   NOT MEMBER GROUP NOR FULLSCREEN HELP

**********************************************************************
*                                                          *         *
*         DIRECT ACCESS FAST PATH                          *  GP@P6  *
*                                                          *  02/87  *
**********************************************************************

*
*         THIS CODE TAKES ADVANTAGE OF FIXED LENGTH RECORDS TO
*         ALLOW THE CALCULATION OF THE TTR FOR THE POINT MACRO
*         FROM THE RELATIVE RECORD NUMBER.  THIS COULD ALSO BE
*         DONE FOR ALL TAPE FILES EXCEPT VB OR VBS FILES, BUT
*         THIS WOULD BE OF DUBIOUS BENEFIT GIVEN THE SEQUENTIAL
*         NATURE OF TAPES, ALTHOUGH IF THE CODE CATERED FOR THE
*         DIFFERENCES IN FULL-FUNCTION 3480 NOTE/POINT PARAMETERS
*         THEN HIGH-SPEED SEARCHING COULD BE USED WITH 3480 UNITS.
*
*         STRICTLY SPEAKING, FOR DISK FILES THIS METHOD SHOULD
*         ONLY BE USED FOR FS OR FBS FILES.  HOWEVER, FOR MOST
*         UNBLOCKED FILES (EVEN MOD FILES) EACH TRACK (EXCEPT
*         THE LAST) SHOULD BE FULLY LOADED THUS ALLOWING AN
*         ACCURATE CALCULATION.  THIS CANNOT ALWAYS BE RELIED
*         UPON FOR BLOCKED FILES, ESPECIALLY MOD FILES.  NOTE
*         THAT FIND COMMANDS ARE NOT SPEEDED UP BECAUSE ALL THE
*         RELEVANT DATA RECORDS MUST STILL BE PHYSICALLY READ.
*         (RECFM=FS AND RECFM=FBS IMPLY NON-PDS.)
*
*         BY DEFAULT, "FAST PATH" WILL BE USED FOR NON-PDS DISK
*         FILES IF RECFM=F, RECFM=FS OR RECFM=FBS.  IT WILL ALSO
*         USED WHEN RECFM=FB *AND* AT LEAST ONE OF THE FOLLOWING
*         IS TRUE:  1) LRECL=BLKSIZE
*            *OR*   2) DS1LSTAR INDICATES MORE THAN 256 TRACKS USED.
*
*         SPECIFYING THE 'DATA' OPERAND AT INVOCATION TIME, OR
*         ISSUING THE 'NEWTOP' SUBCOMMAND FROM WITHIN 'REVIEW' WILL
*         CAUSE "FAST PATH" TO BE DISABLED FOR THE REVIEW SESSION.
*         IT WILL ALSO BE DISABLED IF THE VTOC INDICATES THAT THERE
*         IS NOT MUCH MORE THAN A SCREENFUL OF RECORDS.
*
         TM    MYDSCB-44+84,X'60'  VARIABLE/UNDEFINED OR TRACKOVERFLOW?
         BNZ   FASTX               YES
         TM    MYDSCB-44+84,X'80'  FIXED LENGTH RECORDS?
         BZ    FASTX               NO
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    FASTX               YES, SUPPRESS "FAST PATH"
         TM    MYDSCB-44+78,X'04'  DATA STRIPED DATA SET?
         BO    FASTX               YES, BETTER PLAY IT SAFE
         LA    R1,1                LOAD UNBLOCKED "BLOCKING FACTOR"
         TM    MYDSCB-44+84,X'10'  BLOCKED?
         BZ    GOFAST              NO, FS IS GOOD, F IS PROBABLY GOOD
         CLC   MYDSCB-44+86(2),MYDSCB-44+88   BLKSIZE = LRECL?
         BE    GOFAST              YES, TREAT THE TURKEY AS RECFM=F
         LH    R1,MYDSCB-44+86     NO, LOAD THE BLOCK SIZE
         LTR   R1,R1               VALID BLOCK SIZE?
         BNP   FASTX               NO, SOMETHING'S A BIT WACKY
         LH    R15,MYDSCB-44+88    LOAD THE LOGICAL RECORD LENGTH
         SLR   R0,R0               CLEAR FOR DIVIDE
         DR    R0,R15              BLKSIZE/LRECL = BLOCKING FACTOR
         LTR   R0,R0               ANY REMAINDER?
         BNZ   FASTX               YES, SOMETHING'S A BIT WACKY
         TM    MYDSCB-44+84,X'08'  FIXED BLOCKED STANDARD?
         BO    GOFAST              YES, EMPLOY "FAST PATH"
         CLI   MYDSCB-44+98,0  **  IS DS1LSTAR TRACKS OVER 255?
         BE    FASTX           **  NO, SUPPRESS "FAST PATH"
GOFAST   ST    R1,BLKFACTR         NO, SAVE THE BLOCKING FACTOR
         L     R2,$UCBAD           POINT TO THE UCB
         LA    R3,1                SPECIFY RECORD ONE FOR WHOLE TRACK
         SLL   R3,24               PROMOTE TO HIGH BYTE
         ICM   R3,4,MYDSCB-44+90   GET THE KEYLENGTH
         ICM   R3,3,MYDSCB-44+86   GET THE PHYSICAL RECORD SIZE
         TRKCALC FUNCTN=TRKCAP,UCB=(R2),RKDD=(R3),REGSAVE=YES,         +
               MF=(E,CALLSAVE+16)  DETERMINE THE RECORDS PER TRACK
         LTR   R15,R15             WAS TRKCALC SUCCESSFULL?
         BNZ   FASTX               NO, SUPPRESS "FAST PATH"
         ICM   R15,3,MYDSCB-44+98  GET TT OF DS1LSTAR TTR
         MR    R14,R0
         IC    R14,MYDSCB-44+100   GET R OF DS1LSTAR TTR
         BCTR  R14,0               DON'T COUNT LAST BLOCK
         AR    R15,R14             GET NUMBER OF BLOCKS IN FILE
         M     R14,BLKFACTR        GET NUMBER OF RECORDS IN FILE
FASTVTOC ST    R0,BLKSATRK         SAVE THE NUMBER OF BLOCKS PER TRACK
         S     R15,SCRNLNES        GET LARGEST RECORD # FOR "FASTPATH"
         BNP   FASTX               TOO SMALL TO WARRANT "FASTPATH"
         ST    R15,MAXPOINT        SAVE IT
         OI    STATUS2,FASTREAD    INDICATE "FASTPATH" AVAILABILITY
FASTX    DS    0H
         BAL   R14,SCRNINIT        DETERMINE INITIAL DISPLAY MODE

************************************************************
*                                                          *
*         CALL PHASE 2 FOR MAIN PROCESSING                 *
*                                                          *
************************************************************

CALLREV2 L     R15,=V(REVIEW2)     GET ADDRESS OF PHASE 2
         BALR  R14,R15             GO TO PHASE 2
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?
         BO    SELNLIST            YES, SHOW MEMBER LIST
         B     EXITARC             NO, EXIT - PHASE 2 HAS SET RC

**********************************************************************
*                                                          *         *
*         DETERMINE TERMINAL CHARACTERISTICS AND SET-UP    *  GP@P6  *
*                                                          *  07/87  *
**********************************************************************

SCRNINIT DS    0H
         ST    R14,READR           SAVE RETURN ADDRESS
         GTTERM PRMSZE=GOTTERM,ALTSZE=GOTTERM+2,ATTRIB=GOTTERM+4,      +
               MF=(E,GETTERML)     GET TERMINAL CHARACTERISTICS
         GTSIZE
         LTR   R0,R0               IS THIS A VDU?
         BZ    ERRTERM             NO, REVIEW CANNOT HANDLE IT
         CH    R0,=H'24'           ENSURE AT LEAST 24 LINES
         BL    ERRSCRN
         CH    R0,=H'62'           ENSURE NO MORE THAN 62 LINES
         BH    ERRSCRN
         CH    R1,=H'80'           ENSURE AT LEAST 80 COLUMNS
         BL    ERRSCRN
         CH    R1,=H'160'          ENSURE NO MORE THAN 160 COLUMNS
         BH    ERRSCRN
         STM   R0,R1,SCRNLNES      SAVE THE SCREEN DIMENSIONS
         TM    SCRNCOLS+3,X'01'    ENSURE AN EVEN NUMBER OF COLUMNS
         BO    ERRCOLS
         SH    R0,=H'4'            SUBTRACT 4 FOR HEADINGS AND RULER
         STH   R0,PAGESIZE         SAVE LINES PER PAGE
         TM    STATUS4,CSRSW       CURSOR, PAGE OR HALF SCROLLING?
         BZ    SCRLOKAY            NO, ALREADY LOADED FROM PROFILE
         ST    R0,SCROLL           START WITH CURSOR/PAGE SCROLLING
         TM    STATUS4,PGSW        CURSOR OR PAGE SCROLLING?
         BO    SCRLOKAY            YES
         SRL   R0,1                NO HALVE IT FOR HALF PAGE SCROLLING
         ST    R0,SCROLL           SAVE HALF PAGE SIZE
SCRLOKAY DS    0H                  SCROLL AMOUNT NOW INITIALIZED
         OI    MODE,FSMODE         FLAG FOR FUTURE REFERENCE
         TM    MODE,RECURS         RECURSIVE 'REVIEW' SESSION?
         BO    QUERYXX             YES, ALREADY HAVE SCREEN DETAILS
         STFSMODE ON,INITIAL=YES,NOEDIT=YES
*2.4 BUG STTMPMD ON                TURN OFF SESSION MANAGER
         CLI   SCRNCOLS+3,80       CHANCE OF ISPF PRIME/ALT MISMATCH?
         BNH   DECIDEOS            NO, H/W & S/W SIZES SHOULD AGREE
         LA    R1,ERSWRALT         YES, POINT TO ERASE/WRITE ALTERNATE
         LA    R0,L'ERSWRALT       LOAD DATA STREAM LENGTH
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           CHANGE SCREEN SIZE IF ISPF MODEL-2
DECIDEOS TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
         BO    QRYORNOT            YES, BAD LUCK IF OS/VS2 SVS
         MVI   SACHAR,X'0E'        NO, LOAD 668X SET ATTRIBUTE CODE
*        TERMTYPE TERMIDL=DOUBLE   NON-MVS MSP-ONLY TSS MACRO
         SLR   R1,R1               ZERO REGISTER 1
         LA    R0,DOUBLE           LOAD VTAM TERMINAL ID LOCATION
         LA    R15,2               LOAD ENTRY CODE
         SLL   R15,24              SHIFT TO TOP BYTE
         OR    R0,R15              GATE INTO REGISTER 0
         LNR   R0,R0               MAKE NEGATIVE
         SVC   94                  ISSUE TERMINAL CONTROL SVC
         LTR   R1,R1               ANY INTERESTING TERMINAL FLAGS?
         BZ    DOTHEQRY            NO, ASSUME IBM 3270 COMPATIBLE,
*                                  PROBABLY WITH THE QUERY BIT TURNED
*                                  OFF BECAUSE THEY CAN'T HANDLE THE
*                                  FUJITSU EXTENDED DATA STREAM
*        B     QRYORNOT            YES, SO FOR FUJITSU F9526/F6680 AND
*                                  JAPANESE TERMINALS LOOK AT QUERY BIT
*
*        FOR AN IBM OS, IF THE TERMINAL CAN HANDLE IBM 3270 EDS (AND
*   THE CONTROLLER CAN HANDLE A QUERY) THEN SET THE QUERY BIT ON.
*   (IN FACT, QUERY IS A CONTROLLER FUNCTION, SO SET IT ON EVEN FOR
*   "OLD" TERMINALS ON "MODERN" CONTROLLERS.)  IF NOT, THEN DON'T.
*   UNDER FUJTISU'S MSP, IF THE GEAR CAN HANDLE 668X EDS THEN SET
*   THE QUERY BIT ON BECAUSE FUJITSU S/W WILL USE THE ORDER CODES FOR
*   THEIR HARDWARE.  IF 3270 GEAR IS CONNECTED DON'T SET THE QUERY BIT
*   ON BECAUSE THE 3270 MAY SAY IT CAN HANDLE EXTENDED COLORS AND HIGH-
*   LIGHTING (FOR EXAMPLE) BUT CAN THEN NOT UNDERSTAND THE 6680 ORDERS
*   REQUESTING THESE FUNCTIONS, AND DATA STREAM ERRORS RESULT.
*        HOWEVER, IF 3270 COMPATIBLE GEAR IS CONNECTED TO MSP, AND THE
*   APPLICATION (SUCH AS THIS PROGRAM) CAN TELL THE DIFFERENCE BETWEEN
*   A 3270 QUERY RESPONSE AND A 6680 QUERY RESPONSE, THEN THE QUERY CAN
*   BE ISSUED ANYWAY, AS LONG AS THE APPLICATION THEN SENDS ORDER CODES
*   APPROPRIATE FOR THE HARDWARE DETECTED AT RUN TIME.
*
QRYORNOT TM    GOTTERM+7,X'01'     IS THE QUERY BIT ON?
         BZ    NOT16CLR            NO, CAN'T DO A QUERY
DOTHEQRY MVC   SBASAVE(TPGL),TPG   YES, INITIALIZE TPG EXECUTE AREA
         LA    R1,RESETAID         RESET THE TERMINAL AID
         LA    R0,L'RESETAID             BEFORE ISSUING THE
         ICM   R1,8,=X'03'               READ PARTITION
         TPUT  (1),(0),R           TPUT FULLSCR,WAIT,NOHOLD
         TCLEARQ INPUT             CLEAR ANY TYPE-AHEAD INPUT
         TPG   MF=(E,SBASAVE)      ISSUE QUERY TO TSO TERMINAL
         LTR   R15,R15             WAS TPG ISSUED SUCCESSFULLY?
         BNZ   QUERYX              NO, DO NOT EXPECT A RESPONSE
         OI    STATUS5,DIDQRY      REMEMBER THAT A QUERY WAS ISSUED
QUERYGET LA    R1,REPLY            POINT TO TGET BUFFER FOR RESPONSE
         LA    R0,512                       FROM READ PARTITION
         ICM   R1,8,=X'81'         FLAGS FOR TGET ASIS,WAIT
         TGET  (1),(0),R           TGET ASIS,WAIT
         STM   R15,R1,TGETREGS     SAVE FOR DEBUG
         CLI   REPLY,X'6B'         VTAM RESHOW REQUEST (PA/CLEAR KEY)?
         BL    QUERYX              NO, ASSUME QUERY NOT FUNCTIONAL
         CLI   REPLY,X'6F'
         BL    QUERYGET            YES, IGNORE AND GET QUERY RESPONSE
         CLI   REPLY,X'88'         QUERY RESPONSE AID?
         BNE   QUERYX              NO, STICK TO 3270 BASICS
         LA    R15,REPLY           POINT TO THE AID
NOTSBFLD LA    R15,1(,R15)         IGNORE A BYTE
         BCT   R1,QUERYFIX         DECREMENT LENGTH
         B     QUERYX              JUST IN CASE THAT WAS THE LAST BYTE
QUERYFIX TM    3(R15),X'80'        LOOK LIKE A VALID QCODE?
         BNO   NOTSBFLD            NO, SKIP A BYTE
         CLI   0(R15),0            LENGTH LESS THAN 256?
         BNE   NOTSBFLD            NO, SKIP A BYTE
QUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?
         BNE   NOTSBFLD            NO, SKIP A BYTE
         CLI   3(R15),X'86'        QUERY REPLY COLOUR ID?
         BE    QUERYCLR            YES
         CLI   3(R15),X'87'        QUERY REPLY HIGHLIGHTING ID?
         BE    QUERYHLT            YES
         CLI   3(R15),X'85'        QUERY REPLY SYMBOL SETS ID?
         BE    QUERYSYM            YES
         CLI   3(R15),X'80'        QUERY REPLY SUMMARY ID?
         BE    QUERYSUM            YES
         CLI   3(R15),X'93'        QUERY REPLY PC ATTACHMENT ID?
         BE    QUERYPCA            YES
         CLI   3(R15),X'A6'        QUERY IMPLICIT PARTITION ID?
         BE    QUERYPCA            YES
         CLI   3(R15),X'95'        QUERY DISTRIBUTED DATA MGMT ID?
         BE    QRYVECTR            YES
NXTSBFLD SLR   R0,R0
         ICM   R0,3,0(R15)         LOAD SUB-FIELD LENGTH
         SR    R1,R0               SUBTRACT FROM TGET LENGTH
         BZ    QUERYEND            END OF QUERY REPLY DATA STREAM
         BM    QUERYGET            MORE DATA RETURNED IN NEXT BLOCK
         AR    R15,R0              POINT TO NEXT SUB-FIELD
         B     QUERYPRS            EXAMINE IT
QUERYCLR CLI   5(R15),8            AT LEAST EIGHT COLOUR PAIRS?
         BL    NXTSBFLD            NO, NO 7-COLOUR SUPPORT
         CLC   8(14,R15),=CL14'11223344556677' YES, ALL 7 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    STATUS5,COLOR       YES, REMEMBER IT
         CLI   5(R15),16           AT LEAST SIXTEEN COLOUR PAIRS?
         BL    NXTSBFLD            NO, NO 16-COLOUR SUPPORT
         OI    STATUS5,COLOR16     YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYHLT CLI   4(R15),4            AT LEAST FOUR HIGHLIGHTING PAIRS?
         BL    NXTSBFLD            NO, NO EXTENDED HIGHLIGHTING SUPPORT
         CLC   6(7,R15),=CL7'0112244'  YES, ALL 3 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    STATUS5,HILITE      YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYSYM OI    STATUS5,SYMSET      SYMBOL SETS SUB-FIELD RETURNED
         MVC   MATRIXSZ,6(R15)     SAVE CHARACTER MATRIX WIDTH & HEIGHT
         TM    4(R15),X'80'        GRAPHIC ESCAPE SUPPORTED?
         BZ    NXTSBFLD            NO, SO UNLIKELY TO HAVE GRAPHICS
         OI    STATUS5,GEOK        YES, REMEMBER IT
         TM    4(R15),X'20'        LOAD PSSF SUPPORTED?
         BZ    NXTSBFLD            NO, CANNOT DO RASTER GRAPHICS
         TM    8(R15),X'40'        FORMAT TYPE 1 SUPPORTED BY TERMINAL?
         BZ    NXTSBFLD            NO, SO FORGET LOADABLE SYMBOLS
         SLR   R14,R14
         LA    R2,13(,R15)         POINT TO FIRST DESCRIPTOR
         ICM   R14,3,0(R15)        GET LENGTH OF WHOLE SUBFIELD
         LA    R0,13
         SR    R14,R0              GET LENGTH OF ALL DESCRIPTORS
         IC    R0,12(,R15)         GET SYMBOL SET DESCRIPTOR LENGTH
         LA    R3,SYMSTG3          POINT TO TRIPLE-PLANE ID LIST
QRYSTGLP TM    1(R2),X'80'         LOADABLE TERMINAL STORAGE?
         BZ    QRYNXSTG            NO, READ-ONLY STORAGE
         CLI   SYMSTGF,0           FIRST LOADABLE STORAGE?
         BNE   QRYLASTG            NO
         MVC   SYMSTGF,0(R2)       YES, LOAD FIRST LOADABLE STORAGE
QRYLASTG MVC   SYMSTGL,0(R2)       UPDATE LAST LOADABLE STORAGE ID
         TM    4(R15),X'10'        LOAD PS EXTENDED SUPPORTED?
         BZ    QRYNXSTG            NO, CANNOT SPECIFY COLOURS
         TM    1(R2),X'40'         TRIPLE PLANE STORAGE
         BZ    QRYNXSTG            NO, SINGLE PLANE STORAGE
         MVC   0(1,R3),0(R2)       YES, COPY STORAGE ID NUMBER
         LA    R3,1(,R3)           INCREMENT LIST POINTER
QRYNXSTG SR    R14,R0              UPDATE REMAINING LENGTH
         BNP   NXTSBFLD            END OF SUBFIELD REACHED
         AR    R2,R0               POINT TO NEXT DESCRIPTOR
         B     QRYSTGLP            LOOK AT IT
QUERYSUM SLR   R14,R14
         LA    R2,4(,R15)          POINT TO FIRST QCODE IN LIST
         ICM   R14,3,0(R15)        GET LENGTH OF WHOLE SUBFIELD
         LA    R0,4
         SR    R14,R0              GET NUMBER OF QCODES IN LIST
QRYSUMLP CLI   0(R2),X'B2'         LINE TYPE?
         BE    QRYVECTR            YES, SEEMS VECTOR GRAPHICS SUPPORTED
         LA    R2,1(,R2)           POINT TO NEXT QCODE
         BCT   R14,QRYSUMLP        CHECK IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QRYVECTR OI    VECFLAGS,VCTR       FLAG VECTOR GRAPHICS SUPPORTED
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYPCA OI    STATUS5,SYMSET      REMEMBER NON-FUJITSU HARDWARE
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYEND TM    STATUS5,SYMSET      WAS THERE A SYMBOL SETS SUB-FIELD?
         BZ    HAVSACHR            NO, DON'T CHANGE SA CODE
         MVI   SACHAR,X'28'        YES, MUST BE IBM 3270 EVEN ON MSP
HAVSACHR TM    STATUS5,COLOR+HILITE 7-COLOUR AND HIGHLIGHTING OK?
         BZ    QUERYX              NO, JUST USE DUAL INTENSITY
         OI    STATUS5,X3270       YES, ACTIVATE 3270 EXTENSIONS
QUERYX   L     R1,=V(EDITT)        POINT TO DEFAULT TRANSLATE TABLE
         MVC   PERIODS,0(R1)       RESTORE IT AFTER TGET BUFFER USAGE
QUERYXX  STFSMODE ON,NOEDIT=NO     TURN OFF NOEDIT INPUT MODE
         L     R14,READR           RESTORE RETURN ADDRESS
         TM    STATUS5,COLOR16     SIXTEEN COLOUR TERMINAL?
         BOR   R14                 YES, ANY COLOUR CODE IS VALID
NOT16CLR NI    CHRCOLOR,X'F7'      NO, ONLY USE SEVEN COLOURS AT MOST
         NI    HEXCOLOR,X'F7'
         NI    FMTCOLOR,X'F7'
         BR    R14

XCTLHELP OI    STATUS6,HELX        XCTL TO TSO HELP IS REQUIRED
         B     EXITARC

ERRPNS   LA    R1,MSGPNS           CANNOT INTERRUPT OUT OF RECURSIVE
         LA    R0,L'MSGPNS         'REVIEW' PROMPTING SO JUST END TO
         BAL   R14,PUTMSG1         AVOID THE POTENTIAL TRAP
         B     EXITA12

ERRCOLS  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, CALL LINE-MODE HELP INSTEAD
         LA    R1,MSGCOLS
         LA    R0,L'MSGCOLS
         BAL   R14,PUTMSG1
         B     EXITA12

ERRSCRN  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, CALL LINE-MODE HELP INSTEAD
         LA    R1,MSGSCRN
         LA    R0,L'MSGSCRN
         BAL   R14,PUTMSG1
         B     EXITA12

ERRTERM  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, CALL LINE-MODE HELP INSTEAD
         LA    R1,MSGTERM
         LA    R0,L'MSGTERM
         BAL   R14,PUTMSG1

************************************************************
*                                                          *
*         RETURN FROM PHASE 2 TO TERMINATE                 *
*                                                          *
************************************************************

EXITA12  LA    R15,12
EXITA##  STH   R15,RC
         TM    STATUS,STABEND      OPEN ABEND OCCURRED?
         BZ    EXITARC             NO
         MVI   RC+1,16             YES, UP THE RETURN CODE A BIT
EXITARC  TM    STATUS,STALLOC      FREE REQUIRED?
         BZ    NOFREE              NO
         CLC   $DDNAME,PARMLIB     IS IT LOGICAL PARMLIB?
         BE    FREPRMLB            YES
         LA    R1,MYDAPL
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         DROP  R15                 DAPB18
         BAL   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-STALLOC  UNALLOCATED
         B     NOFREE
FREPRMLB LA    R1,SCREENW-4080
         LA    R1,4080(,R1)        POINT TO IEFPRMLB PARAMETER AREA
         IEFPRMLB REQUEST=FREE,          ALLOCATE PARMLIB FILE(S)      +
               DDNAME=$DDNAME,           SUPPLY DDNAME USED            +
               CALLERNAME=REVCALER,      IDENTIFY MACRO CALLER         +
               PLISTVER=MAX,             PLENTY OF SPACE FOR GROWTH    +
               MF=(E,(1),COMPLETE)
         NI    STATUS,255-STALLOC  DO NOT RETRY IF FAILED
         LTR   R15,R15             SUCCESSFULLY FREED?
         BNZ   BADPRMLB            NO, ISSUE MESSAGE
NOFREE   DS    0H
         ICM   R0,B'1111',DIVREG1  WAS "DIV" USED?
         BNP   NODIV16             NO, DON'T EXECUTE XA INSTRUCTION
         LA    R0,16               YES, GET ENTRY CODE (FREEMAIN)
         L     R15,DIVADDR1        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
NODIV16  DS    0H                  ANY "DIV" HAS NOW BEEN FREED

         IKJRLSA MYANS

         CLI   RC+1,0              IS RC ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD

         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)

         TCLEARQ
STACKDX  DS    0H

**********************************************************************
*                                                          *         *
*         UPDATE 'REVIEW' PROFILE ON DISK                  *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************

*    THE PROFILE CANNOT BE CHANGED BY A MEMBER LIST REVIEW ALONE.
*    THEREFORE, THIS CODE WILL ALWAYS BE SKIPPED FOR A PDS UNLESS
*    ACTUAL MEMBER CONTENTS WERE REVIEWED.  THIS CODE WILL BE SKIPPED
*    UNLESS A 'COLOR #' COMMAND OR A 'PFK' OR 'DISPLAY' COMMAND WERE
*    SUCCESSFULLY ISSUED, OR THE SCROLL INPUT FIELD WAS UPDATED.

         TM    STATUS,STPROF       WAS THE PROFILE CHANGED?
         BZ    PROFOUTX            NO, AVOID NEEDLESS OPEN, I/O, CLOSE
         TM    MODE,RECURS         RECURSIVE 'REVIEW' SESSION?
         BO    PROFOUTX            YES, AVOID DISK I/O TO REWRITE PROF
         NI    PROFDATA+11,X'0F'   FORMAT COLOURS AND SCROLL AMOUNT
         CLI   PROFDATA+11,9
         BH    *+8
         OI    PROFDATA+11,X'F0'
         OI    PROFDATA+11,X'70'
         NI    PROFDATA+12,X'0F'
         CLI   PROFDATA+12,9
         BH    *+8
         OI    PROFDATA+12,X'F0'
         OI    PROFDATA+12,X'70'
         NI    PROFDATA+13,X'0F'
         CLI   PROFDATA+13,9
         BH    *+8
         OI    PROFDATA+13,X'F0'
         OI    PROFDATA+13,X'70'
         MVC   DOUBLE(1),STATUS4   COPY SCROLLING MODE FLAGS
         NI    DOUBLE,CSRSW        RESET OTHER BITS
         SLR   R1,R1               CLEAR FOR INSERT
         IC    R1,DOUBLE
         SRA   R1,2                SCALE TO CORRECT INDEX
         LA    R1,SCROLLS-2(R1)    POINT TO SCROLL AMOUNT
         BNZ   PRFSCROL            SHOW NON-NUMERIC SCROLL AMOUNT
         L     R1,SCROLL           SHOW NUMERIC SCROLL AMOUNT
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  DOUBLE(2),DOUBLE+6(2)
         LA    R1,DOUBLE
PRFSCROL MVC   PROFDATA+14(2),0(R1)
         SLR   R5,R5
         L     R4,540              GET POINTER TO CURRENT TCB
         L     R4,12(,R4)          POINT TO TIOT
         LA    R4,24(,R4)          POINT TO TIOELNGH
CHKPROFU CLC   4(8,R4),PROFDCB+DCBDDNAM-IHADCB
         BE    OPENPRFU            FILE EXISTS SO GO AND OPEN IT
         IC    R5,0(,R4)           GET TIOT ENTRY LENGTH
         AR    R4,R5               POINT TO NEXT TIOT ENTRY
         CLI   0(R4),0             ZERO LENGTH ENTRY?
         BNE   CHKPROFU            NO, CHECK OUT THIS ENTRY
         B     PROFOUTX            YES, NOT IN TIOT SO SKIP UPDATE
OPENPRFU LA    R4,DYNDCBW          POINT TO ACTUAL DCB AREA TO BE USED
         MVC   0(PROFDCBL,R4),PROFDCB       INITIALIZE THE PROFILE DCB
         USING IHADCB,R4
         MVI   OPEND,X'80'
         OPEN  ((R4),(UPDAT)),MF=(E,OPEND)
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         TIME  DEC
         STM   R0,R1,DOUBLE        SUPPLY UPDATE TIMESTAMP
         UNPK  PROFDATA+17(15),DOUBLE
         SLR   R3,R3               ZERO FETCHED BYTE COUNT
         ST    R3,HOLDEND          INDICATE NO BUFFER YET
         MVC   BLDLNAME,PROFMEM    LOAD PROFILE MEMBER NAME
         BLDL  (R4),BLDL           VERIFY EXISTENCE OF PROFILE MEMBER
         LTR   R15,R15             DOES PROFILE MEMBER EXIST?
         BNZ   CLOSPRFU            NO
         CLI   BLDLCNCT,0          MEMBER FROM A CONCATENATION?
         BNE   CLOSPRFO            YES, CAN'T WRITE TO IT
         FIND  (R4),BLDLTTRP,C     POINT TO MEMBER FOR FIRST READ
         LA    R1,SCREENW-4080
         LA    R1,4080(,R1)        POINT TO BUFFER IF BLK NOT TOO BIG
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
         LA    R0,1280             10K/8
         SLL   R0,3                GET MAX BUFFER SIZE FOR SCREENW
         CH    R0,DCBBLKSI         IS BLKSIZE TOO BIG FOR SCREENW?
         BNL   READPRFU            NO, SO NO SB00 ABEND & SKIP GETMAIN
         LH    R0,DCBBLKSI         YES, GET THE REQUIRED BUFFER SIZE
         ST    R0,HOLDEND          SAVE IT
         GETMAIN RU,LV=(0),LOC=BELOW
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
READPRFU L     R2,HOLDTOP          POINT TO THE BUFFER AREA
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE READ
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFU            YES, RETRY WITH OPEN FOR OUTPUT
         LH    R2,DCBBLKSI
         L     R1,DYNDECBW+16      POINT TO THE IOB
         SH    R2,14(,R1)          GET LENGTH OF BLOCK READ
         LA    R5,PROFDATA(R3)     POINT TO DATA TO REWRITE
         AR    R3,R2               ACCUMULUATE BYTE COUNT SO FAR
         WRITE DYNDECBW,SF,(R4),(R5),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE WRITE
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFU            YES, RETRY WITH OPEN FOR OUTPUT
         CH    R3,PROFSIZE         UPDATED ENOUGH YET?
         BL    READPRFU            NO, READ ANOTHER BLOCK
CLOSPRFU MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         CH    R3,PROFSIZE         UPDATED ENOUGH DATA?
         BNL   PROFOTFM            YES, GO AND EXIT
         OPEN  ((R4),(OUTPUT)),MF=(E,OPEND)
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         SLR   R3,R3               ZERO WRITTEN BYTE COUNT
WRITEPRF LA    R2,PROFDATA(R3)     POINT TO DATA TO WRITE
         LH    R5,PROFSIZE         GET PROFILE MEMBER SIZE
         SR    R5,R3               GET DATA LEFT TO WRITE
         CH    R5,DCBBLKSI         NEED TO WRITE LESS THAN A BLOCK?
         BNL   *+8                 NO
         STH   R5,DCBBLKSI         YES, SAVE THIS LESSER AMOUNT
         AH    R3,DCBBLKSI         ACCUMULATE BYTES ABOUT TO BE WRITTEN
         WRITE DYNDECBW,SF,(R4),(R2),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE READ
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFO            YES, GIVE UP
         CH    R3,PROFSIZE         WRITTEN ENOUGH YET?
         BL    WRITEPRF            NO, WRITE ANOTHER BLOCK
         SLR   R0,R0
         STCM  R0,15,BLDLTTRP      ENSURE NO DIRECTORY ENTRY USERDATA
         STOW  (R4),BLDLNAME,A     ADD THE MEMBER TO THE DIRECTORY
CLOSPRFO MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         DROP  R4                  IHADCB
PROFOTFM ICM   R0,15,HOLDEND       ANY BUFFER TO FREE?
         BZ    PROFOUTX            NO
         L     R1,HOLDTOP          YES, GET ITS ADDRESS
         FREEMAIN RU,A=(1),LV=(0)  FREE THE BUFFER
PROFOUTX DS    0H

         LH    R15,RC

************************************************************
*                                                          *
*         EXIT TO CALLER                                   *
*                                                          *
************************************************************

EXIT     LR    R2,R15
         STAX  ,                   DELETE ATTENTION EXIT
         TM    MODE,RECURS         RECURSIVE 'REVIEW' SESSION?
         BO    FSMODEX             YES, LEAVE IN FULLSCREEN MODE
         TM    STATUS5,SETSIZED    NEED TO RESTORE SCREEN SIZE?
         BZ    NOSTSIZE            NO
         MVC   GOTTERM+7(1),GOTTERM+2
         XC    GOTTERM(3),GOTTERM
         XC    GOTTERM+4(3),GOTTERM+4
         STSIZE SIZELOC=GOTTERM,LINELOC=GOTTERM+4
NOSTSIZE DS    0H
         TM    MODE,FSMODE         STILL IN FULL SCREEN MODE?
         BZ    FSMODEX             NO, PROBABLY NEVER GOT THERE
*
*        FOR FAST TERMINATION WE DON'T WANT TO DO ANY MORE TERMINAL
*   I/O, BUT MERELY TELL THE SYSTEM THAT THIS FULLSCREEN APPLICATION
*   HAS FINISHED, AND THAT THE NEXT OUTPUT IS TO START ON THE FIRST
*   LINE (ASSUMING LINE MODE I/O), WHICH SHOULD CAUSE THE SYSTEM TO
*   CLEAR THE SCREEN WITH THE TPUT THAT SUPPLIES THE FIRST LINE.  BY
*   POSTPONING THIS ACTIVITY, 'REVIEW' IS FREE TO FINISH PRONTO.  MANY
*   PROGRAMS USE A TPUT TO CLEAR THE SCREEN, WHICH MAY INITIATE A
*   SWAP OUT AND THEREFORE NEEDLESSLY DELAY THE PROMPT FROM THE TMP
*   OR ISPF OR CALLER IN GENERAL.
*        CHARACTER ATTRIBUTES OF A DATA STREAM DISPLAY CHARACTER ARE
*   INHERITED FROM THE PREVIOUS CHARACTER BACK TO THE SET ATTRIBUTE
*   ORDERS.  THE DATA AT THE BEGINNING OF EACH WRITE WILL HAVE, IN
*   THE ABSENCE OF APPROPRIATE ORDERS, DEFAULT CHARACTER (AS DISTINCT
*   FROM FIELD) ATTRIBUTES.  THAT IS, FOR IBM 3270, CHARACTER ATTRIB-
*   UTES TO BE INHERITED BY DISPLAY CHARACTERS ARE NOT REMEMBERED
*   ACROSS WRITE COMMANDS.  UNFORTUNATELY, THIS IS NOT THE CASE WITH
*   FUJITSU F668X SCREEN EQUIPMENT.  SUPPOSE A "MONOCHROME" PFD SESSION
*   (REALLY 3-COLOURS) INVOKES REVIEW TO LOOK AT A PDS DIRECTORY.  PF3
*   WILL EXIT REVIEW, BUT MAY LEAVE THE SCREEN WITH A COMPLETELY PINK
*   (MORE OF A LILAC, REALLY) PFD EDIT SESSION.  RATHER THAN LEAVE THE
*   USER TO HIT CLEAR AND THEN PA2, WE WILL ISSUE AN ERASE/WRITE OR
*   ERASE/WRITE ALTERNATE (DEPENDING ON SCREEN SIZES) WITH AN EXTRA
*   TPUT.  THIS IS A SCREEN EQUIPMENT DEPENDENCY AND NOT AN OPERATING
*   SYSTEM DEPENDENCY, SO:
*
*        CLI   SACHAR,X'0E'        FUJITSU TERMINAL HARDWARE?
*        BNE   SETMDOFF            NO, JUMP TO FAST EXIT
*
*   HOWEVER, SINCE PFD (UNLIKE ISPF) DOES NOT USE COLOUR AND HIGH-
*   LIGHTING, USERS OF IBM-COMPATIBLE COLOUR SCREENS ARE LEFT IN
*   2-COLOUR MODE INSTEAD OF 4-COLOUR MODE, WHEREAS IDEALLY THE
*   SCREEN SHOULD BE LEFT IN THE SAME MODE AS IT WAS BEFORE 'REVIEW'
*   WAS INVOKED.  HENCE, WE END UP USING:
*
         TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
         BO    SETMDOFF            YES, JUMP TO FAST EXIT
*
*   ALSO NOTE THAT THE RESET FUNCTION OF THE CLEAR KEY, ERASE/WRITE
*   OR ERASE/WRITE ALTERNATE IS REQUIRED.  A TPUT TO NULL OUT THE
*   SCREEN BUFFER IS INSUFFICIENT.  FULLSCREEN PROGRAMMERS SHOULD
*   ALSO BE AWARE THAT THE CLEAR BUTTON RESETS THE SCREEN SIZE TO
*   THE PRIMARY SIZE (USUALLY 24 BY 80) AND IT IS UP TO THE APPLIC-
*   ATION PROGRAM TO SEND OUT AN ERASE/WRITE ALTERNATE TO CORRECT
*   THE SCREEN SIZE IF APPROPRIATE.  UNDER TSO, THE TMP HANDLES CLEAR
*   UNLESS THE TSO APPLICATION USES THE "STTMPMD ON,KEYS=ALL" MACRO.
*
         LA    R1,ERSWRALT         POINT TO ERASE/WRITE ALTERNATE
         TM    STATUS5,SETSIZED    REVERTING BACK TO ALTERNATE SIZE?
         BO    GOTERASE            YES
         CLI   SCRNLNES+3,24       STAYING WITH ALTERNATE SIZE?
         BH    GOTERASE            YES
         CLI   SCRNCOLS+3,80       STAYING WITH ALTERNATE SIZE?
         BH    GOTERASE            YES
         LA    R1,ERASEWRT         NO, SCREEN TO CLEAR IS 24 BY 80
GOTERASE LA    R0,L'ERASEWRT       LOAD DATA STREAM LENGTH
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           RESET CHARACTER ATTRIBUTES
SETMDOFF DS    0H
*2.4 BUG STTMPMD OFF               ALLOW SESSION MANAGER
         STLINENO LINE=1,MODE=OFF  TURN OFF FS MODE
         NI    MODE,255-FSMODE     FULL SCREEN MODE NOW OFF
FSMODEX  DS    0H
         ICM   R1,B'1111',ARLAREA  GET ARL ADDRESS
         BZ    NOARL               NO ARL WAS CREATED
         L     R0,ARLPOOL          LOAD ARL SUBPOOL AND SIZE
         FREEMAIN R,A=(1),LV=(0)   FREE THE ALLOCATION RETRIEVAL LIST
NOARL    DS    0H
         ICM   R1,B'1111',FMTAREA  GET FORMATTING DYNAMIC AREA ADDRESS
         BZ    NOFMT               FORMATTING WAS NOT USED
         USING @FMTAREA,R1
         L     R0,FMTSIZE          GET FORMAT AREA SUBPOOL AND SIZE
         DROP  R1                  @FMTAREA
         FREEMAIN R,A=(1),LV=(0)   FREE THE FORMATTING DYNAMIC AREA
NOFMT    DS    0H
         LR    R1,R13              POINT TO AREA TO BE FREED (@DATA)
         L     R0,SIZE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         TM    MODE,RECURS         RECURSIVE 'REVIEW' SESSION?
         BZ    FREEDYN             NO
         L     R15,56(,R13)        POINT TO PREVIOUS @DATA (R9 VALUE)
*                                  COPY RECALL STACK POINTERS
         MVC   RECALPTR-@DATA(8,R15),RECALPTR
         TM    STATUS,STPROF       WAS THE PROFILE CHANGED?
         BZ    FREEDYN             NO, DON'T PERCOLATE UPDATES
*                                  YES, TURN ON PROFILE-CHANGED FLAG.
         OI    STATUS-@DATA(R15),STPROF
*                                  COPY DATA COLOURS
         MVC   FMTCOLOR-@DATA(3,R15),FMTCOLOR
*                                  COPY DISPLAY TRANSLATE TABLE
         MVC   PERIODS-@DATA(256,R15),PERIODS
*                                  COPY SCROLL AMOUNT
         MVC   SCROLL-@DATA(L'SCROLL,R15),SCROLL
         NI    STATUS4,CSRSW
         NI    STATUS4-@DATA(R15),255-CSRSW
         OC    STATUS4-@DATA(1,R15),STATUS4
*                                  COPY PFK VALUES
         LA    R14,6               (PFK-TABLE-SIZE)/256
UPDTPFLP MVC   PFKTAB-@DATA(256,R15),PFKTAB
         LA    R15,256(,R15)       POINT TO NEXT TARGET CHUNK
         LA    R9,256(,R9)         POINT TO NEXT SOURCE CHUNK
         BCT   R14,UPDTPFLP        COPY LATEST IN-CORE PFK TABLE
FREEDYN  DS    0H
         TM    STATUS6,HELX        XCTL TO "REAL" HELP?
         BO    XCTLEXIT            YES
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14                 TERMINATE 'REVIEW'

**********************************************************************
*                                                          *         *
*         XCTL TO THE IBM HELP COMMAND                     *   ABL   *
*                                                          *         *
**********************************************************************

XCTLEXIT L     R15,REVECT
         CLI   FILEKV,C'S'                COMMAND WITH SUBCOMMANDS
         BE    *+10                       YES, BRANCH
         MVC   ECTPCMD-ECT(8,R15),IBMHELP NO, HELP REQUEST ONLY
         MVC   ECTSCMD-ECT(8,R15),SCMD    RESTORE SECONDARY COMMAND
         ICM   R13,B'1000',COMMND+1     GET OFFSET TO OPERANDS
         FREEMAIN R,A=(1),LV=(0)
         LM    0,12,20(R13)
         DROP  R10,R11,R12        REVIEW
         L     R14,0(,R1)               POINT TO ORIGINAL CBUF
         STCM  R13,B'1000',3(R14)       RESET OFFSET TO OPERANDS
         L     R14,12(,R13)             RESTORE RETURN ADDRESS
         LA    R13,0(,R13)              CLEAR TOP BYTE FOR 31-BIT HELP
         BALR  R15,0
         USING *,R15
         XCTL  EPLOC=IBMHELP
         DROP  R15

IBMHELP  DC    CL8'&IBMHELP'      IBM-SUPPLIED TSO HELP COMMAND NAME
HELNAME  DC    CL8'&HEL    '      NAME OF THIS FULLSCREEN HELP COMMAND
HELNAME2 DC    CL8'&HEL2   '      ALTERNATE NAME: MUST BE AFTER HELNAME
HEL4HEL  DC    CL8'HLHL    '      PHONY NAME FOR FULLSCREEN HELP OF HEL

         USING REVIEW,R10,R11,R12

************************************************************
*                                                          *
*         CALL IKJDAIR SERVICE ROUTINE                     *
*                                                          *
************************************************************

CALLDAIR ST    R14,DAIRREGS
         AIF   (NOT &MVS).SKIP6
         L     R15,16
         TM    732(R15),X'80'     CVTDAIR
         BNO   DAIRLINK
         L     R15,732(,R15)
         BALR  R14,R15
         B     DAIRFINI
DAIRLINK DS    0H
.SKIP6   ANOP
         LINK  EPLOC=IKJDAIR,SF=(E,LINKAREA)
DAIRFINI L     R14,DAIRREGS
         BR    R14
IKJDAIR  DC    CL8'IKJDAIR'

************************************************************
*                                                          *
*         DYNAMIC ALLOCATION FAILURE ROUTINE               *
*                                                          *
************************************************************

DAIRFAIL ST    R14,MYDFREGS
         LA    R1,MYDFPARM
*        USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,4(,R1)          DFRCP
         LA    R15,MYDAPL
         ST    R15,0(,R1)          DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,8(,R1)          DFJEFF02
         LA    R15,1               DFDAIR               (DFSVC99 IS 50)
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,12(,R1)         DFIDP
         MVC   16(4,R1),CPPLPTR    DFCPPLP
         LINK  EPLOC=IKJEFF18,SF=(E,LINKAREA)
*        DROP  R1                  DFDSECTD
         L     R15,MYDFRC
         L     R14,MYDFREGS
         BR    R14
IKJEFF18 DC    CL8'IKJEFF18'

************************************************************
*                                                          *
*         PHASE 1 INTERFACES TO PHASE 2                    *
*                                                          *
************************************************************

PUTMSG1  ST    R14,BASE1+12
         TM    MODE,FSMODE         IN FULLSCREEN MODE?
         BZ    PUTMSG2             NO, NO ACTION REQUIRED
         TM    MODE,RECURS         RECURSIVE 'REVIEW' SESSION?
         BO    PUTMSG2             YES, STAY IN FULLSCREEN MODE
         STFSMODE OFF              LET 'READY' PROMPT ACCEPT INPUT
         NI    MODE,255-FSMODE     FULL SCREEN MODE NOW OFF
PUTMSG2  L     R15,=V(PUTMSG)
         LM    R10,R12,BASE2       SWITCH BASE REGS
         L     R3,BASE2+12
         BALR  R14,R15
         LM    R10,R12,BASE1       RESTORE BASE REGS
         L     R14,BASE1+12
         BR    R14

         DROP  R10,R11,R12         REVIEW

**********************************************************************
*                                                          *         *
*         ATTENTION EXIT                                   * GP@SECV *
*                                                          *  08/84  *
**********************************************************************

         USING ATTN,R15            ESTABLISH ADDRESSABILITY
ATTN     STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R9,8(,R1)           GET DYNAMIC AREA ADDRESS
         OI    STATUS4,FLAGI       SET INTERRUPT REQUEST FLAG
         STFSMODE ON               RESTORE FULL SCREEN MODE
*        STTMPMD ON                SUPPRESS SESSION MANAGER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN
         DROP  R15                 ATTN
         EJECT
************************************************************
*                                                          *
*         PHASE 1 CONSTANTS                                *
*                                                          *
************************************************************

         LTORG
*              DISKTABL NO LONGER USED - REPLACED BY TRKCALC.
*      THE COMMENTS ARE LEFT HERE IN CASE SOMEONE WANTS TO SEE THE
*      OLD FIXED-OVERHEAD DISK CONSTANTS.  THE MODULO-OVERHEAD DISK
*      "CONSTANTS" ARE DUBIOUS AND WERE NEVER USED BY 'REVIEW' LOGIC.

*              TRKSIZE  D-O/H  K-O/H      DISKS
*        DC    H'13165',H'135',H'56'      3330/3330-1/F478/F479
*        DC    H'19254',H'185',H'82'      3350/F493
*        DC    H'27051',H'258',H'118'     F6421
*        DC    H'08535',H'167',H'75'      3340
*        DC    H'14858',H'198',H'91'      2305-2
*        DC    H'14576',H'432',H'202'     2305-1
**       DC    H'7403',H'101+',H'45+'     2314/2319
**       DC    H'36000',H'484',H'256'  ?  3375
**       DC    H'47968',H'492',H'256'  ?  3380/F6425/F6427
**       DC    H'58786',H'2104',H'256' ?  3390
**       DC    H'48280',H'1824',H'256' ?  9345
PFKDEF   DS    0D                  INITIAL VALUES OF PF KEYS
         DC    X'F1',CL15'&HEL '   1
         DC    X'F2',CL15'ASCII '  2
         DC    X'F3',CL15'END '    3
         DC    X'F4',CL15'TSO '    4
         DC    X'F5',CL15'RFIND '  5
         DC    X'F6',CL15'FULL '   6
         DC    X'F7',CL15'UP '     7
         DC    X'F8',CL15'DOWN '   8
         DC    X'F9',CL15'HEX '    9
         DC    X'7A',CL15'LEFT '   10
         DC    X'7B',CL15'RIGHT '  11
         DC    X'7C',CL15'RECALL ' 12
         DC    X'C1',CL15'TOP'     13
         DC    X'C2',CL15'BOTTOM'  14
         DC    X'C3',CL15'END '    15
         DC    X'C4',CL15'SMF '    16
         DC    X'C5',CL15'RFIND '  17
         DC    X'C6',CL15'EREP '   18
         DC    X'C7',CL15'UP '     19
         DC    X'C8',CL15'DOWN '   20
         DC    X'C9',CL15'HEX '    21
         DC    X'4A',CL15'LEFT '   22
         DC    X'4B',CL15'RIGHT '  23
         DC    X'4C',CL15'RECALL ' 24
PFKDEFL  EQU   16                  LENGTH OF EACH DEFAULT ENTRY

OBTAIN   CAMLST SEARCH,2,3,4
OBTAINL  EQU   *-OBTAIN

LOCATE   CAMLST NAME,2,,4
LOCATEL  EQU   *-LOCATE

DIVADDR1 DC    AL1(X'80'),VL3(REVDIV)

TPG      TPG   QUERY,L'QUERY,NOEDIT,WAIT,MF=L
TPGL     EQU   *-TPG

RR       RACROUTE REQUEST=AUTH,CLASS='DATASET',MF=L
RRL      EQU   *-RR

PARMLIB  DC    CL8'PARMLIB'
REVCALER DC    CL16'REVIEW--&REL.'

PROFDCB  DCB   DSORG=PO,DDNAME=ISPPROF,MACRF=(R,W),RECFM=FB,LRECL=80,  +
               EODAD=EODADPRF,SYNAD=SYNADPRF
PROFDCBL EQU   *-PROFDCB
PROFMEM  DC    CL8'$$REVIEW'
PROFSIZE DC    H'1600'
SCROLLS  DC    C'HFPGCS'          LITERALS OF NON-NUMERIC SCROLL AMTS

ERASEWRT DC    X'27F540'          ESCAPE + ERASE/WRITE + WCC
ERSWRALT DC    X'277E40'          ESCAPE + ERASE/WRITE ALT + WCC
RESETAID DC    X'27F1C3'          ESCAPE + WRITE + WCC
QUERY    DC    X'F3000501FF02'    WRITE STRUCTURED FIELD + QUERY
*QUERYI  DC    X'F300064000F1C3000501FF02' WSF, 3270DS, WRT+WCC, QUERY

MSG01    DC    C'"REVIEW" ENCOUNTERED AN ERROR IN PARSE SERVICE ROUTINE+
               '
MSG02    DC    C'IKJ58503I DATA SET '
MSG02A   DC    C' NOT IN CATALOG'
MSG03    DC    C'"REVIEW" ENCOUNTERED AN ERROR IN DEFAULT SERVICE ROUTI+
               NE'
MSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+
               IED'
*SG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN
*              TIAL'
*SG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'
MSG09    DC    C'"REVIEW" IS UNABLE TO OBTAIN DSCB FOR DATA SET'
*SG10    DC    C'"REVIEW" OF VSAM COMPONENT SPECIFIED BUT ENVIRONMENT N
*              OT APF AUTHORIZED'
MSG11    DC    C'"REVIEW" OF SUBSYSTEM DATA SET SPECIFIED BUT ENVIRONME+
               NT NOT APF AUTHORIZED'
MSG11X   DC    C' - TRY "REVVSAM"'
MSG12    DC    C'"REVIEW" FOUND INSUFFICIENT STORAGE AVAILABLE IN EXTEN+
               DED REGION'
MSG14    DC    C'"REVIEW" FOUND FILENAME '''
MSG14A   MSG   ''' IS INVALID, MORE THAN 8 CHARACTERS'
MSG14B   MSG   ''' IS NOT CURRENTLY ALLOCATED'
MSG14C   MSG   ''' IS NOT ALLOCATED TO A DASD OR TAPE DATA SET'
MSG15    DC    C' HAS MORE THAN 16 EXTENTS ON '
MSG15X   DC    C' - TRY "REVIEW"'
*SG16    DC    C'ENTRY (?) '
*SG16A   DC    C' IS NOT A CLUSTER AND CANNOT BE REVIEWED'
MSG17    DC    C'"REVIEW" FAILED BECAUSE SHOWCAT RETURNED NO DATA COMPO+
               NENT POINTER'
MSG18    DC    C'"REVIEW" ENCOUNTERED SHOWCAT FAILURE - HEX RC = '
MSG19    DC    C'"REVIEW" WAS DENIED ACCESS TO DATA SET '
MSG22    DC    C'"REVIEW" ENCOUNTERED IEFPRMLB FAILURE - HEX RC = '
MSGCOLS  DC    C'"REVIEW" ONLY SUPPORTS SCREENS WITH AN EVEN NUMBER OF +
               COLUMNS PER LINE'
MSGSCRN  DC    C'"REVIEW" ONLY SUPPORTS FROM 80 TO 160 COLUMNS AND FROM+
                24 TO 62 LINES'
MSGTERM  DC    C'"REVIEW" TERMINATED BECAUSE TERMINAL IS NOT A 3270 DIS+
               PLAY'
MSGPNS   DC   C'"REVIEW" CANCELLED - COULD NOT ASCERTAIN DATA SET NAME'
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD

HEXTAB1  DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         EJECT
**********************************************************************
*                                                          *         *
*         GET CORRECT VOLUME FOR ISPF OPTION 3.4           *  GP@FT  *
*                                                          *  08/96  *
**********************************************************************

         USING GET34VOL,R4
GET34VOL DS    0H
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BOR   R14                 YES, VOLUME IS IRRELEVANT
         CLI   $VOLSER,C' '        WAS ANY VOLUME SPECIFIED?
         BNER  R14                 YES, NO NEED TO GET ANOTHER
         CLI   FILEKV+1,1          'FILE' SPECIFIED?
         BER   R14                 YES, VOLUME IS IRRELEVANT
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BNOR  R14                 NO, SO WASN'T SUPPLIED BY ISPF 3.4
         TM    MODE,RECURS         IS THIS A RECURSIVE 'REVIEW'?
         BOR   R14                 YES, SO NOT INVOKED BY ISPF
         TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
         BNOR  R14                 NO, ASSUME NOT ISPF OPTION 3.4

         STM   R14,R12,12(R13)     SAVE REGISTERS
         LA    R1,CALLSAVE         POINT TO NEW SAVE AREA
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              USE NEW SAVE AREA
         LR    R4,R15              SET LOCAL BASE REGISTER

         L     R15,540             POINT TO THE CURRENT TCB
TLDSCAN  L     R1,112(,R15)        GET TCBFSA
         LTR   R1,R1               IS VALUE ZERO?
         BZ    NEXTTCB             YES, PROCESS NEXT TCB
         L     R1,24(,R1)          GET SAVED R1
         LTR   R1,R1               ANY GOOD?
         BNP   NEXTTCB             NO, PROCESS NEXT TCB
         CLI   0(R1),0             HIGH ORDER BYTE NULL?
         BNE   NEXTTCB             NO, PROCESS NEXT TCB
         L     R1,0(,R1)           GET POSSIBLE TLD ADDRESS
         CLC   =C'TLD',0(R1)       TLD?
         BE    YESISPF             YES, AN ISPF ENVIRONMENT
NEXTTCB  L     R15,132(,R15)       POINT TO ORIGINATING TCB
         C     R15,124(,R15)       BACK TO JOB STEP YET?
         BNE   TLDSCAN             NO, TRY THIS TCB
         B     GET34ERR            NOT AN ISPF ENVIRONMENT

YESISPF  L     R1,540              ISPF, BUT...
         C     R15,132(,R1)        DIRECTLY ATTACHED FROM ISPF?
         BNE   GET34ERR            NO, CAN'T BE 3.4 LINE COMMAND
         L     R15,0(,R15)         POINT TO PARENT'S TOP RB
         L     R15,12(,R15)        POINT TO RB'S CDE
         CLC   INITOP34,8(R15)     ATTACHED FROM ISPF OPTION 3.4?
         BNE   GET34ERR            NO, DO NOT FETCH RESIDUAL VARIABLES
*                                  YES, COULD BE PRIMARY THOUGH    :-(

         LA    R0,INITILNK         POINT TO ISPLINK ENTRY POINT NAME
         LOAD  EPLOC=(0),ERRET=GET34ERR  ALSO HANDLE MODULE NOT FOUND
         ST    R0,HOLDTOP          SAVE ISPF INTERFACE ADDRESS
INITV10  LA    R15,INITVDEF        VDEFINE
         LA    R0,INITVZDS         ZDLDSN
         LA    R1,STRING           WHERE TO PLACE OUTPUT
         LA    R2,INITVCHA         CHARACTER
         LA    R14,44              LENGTH 44
         ST    R14,DOUBLE
         LA    R3,DOUBLE           USE AS PARM
         STM   R15,R3,OPDL         PARAMETER LIST
         OI    OPDL+16,X'80'       END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VDEFINE
         LTR   R15,R15             DOES ZDLDSN EXIST?
         BNZ   GET34XIT            NO, BRANCH
         LA    R1,INITVGET         VGET
         LA    R2,INITVZDS         ZDLDSN
         LA    R3,INITVSHA         SHARED
         STM   R1,R3,OPDL          PARAMETER LIST
         OI    OPDL+8,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VGET
         LA    R2,INITVDEL         VDELETE
         LA    R3,INITVZDS         ZDLDSN
         STM   R2,R3,OPDL          PARAMETER LIST
         OI    OPDL+4,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VDELETE
         CLC   STRING(44),UDSNAME+4 THIS DSNAME?
         BNE   GET34XIT            NO, THIS WAS LEFT OVER SOMEHOW
         LA    R15,INITVDEF        VDEFINE
         LA    R0,INITVZCA         ZDLCAT
         LA    R1,STRING           WHERE TO PLACE OUTPUT
         LA    R2,INITVCHA         CHARACTER
         LA    R14,1               LENGTH 1
         ST    R14,DOUBLE
         LA    R3,DOUBLE           USE AS PARM
         STM   R15,R3,OPDL         PARAMETER LIST
         OI    OPDL+16,X'80'       END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VDEFINE
         LTR   R15,R15             DOES ZDLCAT EXIST?
         BNZ   GET34XIT            NO, BRANCH
         LA    R1,INITVGET         VGET
         LA    R2,INITVZCA         ZDLCAT
         LA    R3,INITVSHA         SHARED
         STM   R1,R3,OPDL          PARAMETER LIST
         OI    OPDL+8,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VGET
         LA    R2,INITVDEL         VDELETE
         LA    R3,INITVZCA         ZDLCAT
         STM   R2,R3,OPDL          PARAMETER LIST
         OI    OPDL+4,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VDELETE
         CLI   STRING,C'1'         CATALOGED?
         BL    GET34XIT            YES, SO NO NEED TO SUPPLY VOLUME
         LA    R15,INITVDEF        VDEFINE
         LA    R0,INITVZVO         ZDLVOL
         LA    R1,STRING           WHERE TO PLACE OUTPUT
         LA    R2,INITVCHA         CHARACTER
         LA    R14,6               LENGTH 6
         ST    R14,DOUBLE
         LA    R3,DOUBLE           USE AS PARM
         STM   R15,R3,OPDL         PARAMETER LIST
         OI    OPDL+16,X'80'       END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VDEFINE
         LTR   R15,R15             DOES ZDLVOL EXIST?
         BNZ   GET34XIT            NO, BRANCH
         LA    R1,INITVGET         VGET
         LA    R2,INITVZVO         ZDLVOL
         LA    R3,INITVSHA         SHARED
         STM   R1,R3,OPDL          PARAMETER LIST
         OI    OPDL+8,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VGET
         LA    R2,INITVDEL         VDELETE
         LA    R3,INITVZVO         ZDLVOL
         STM   R2,R3,OPDL          PARAMETER LIST
         OI    OPDL+4,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BALR  R14,R15             PERFORM VDELETE
**********************************************************************
*        CLC   STRING(6),INITMIGR  MIGRAT VOLUME? × IF UNCATALOGUED  *
*        BE    GET34XIT            YES, BRANCH    × ON MIGRAT THEN   *
*        CLC   STRING(6),INITARCI  ARCIVE VOLUME? × MIGRAT MUST BE   *
*        BE    GET34XIT            YES, BRANCH    × A REAL VOLUME.   *
**********************************************************************
         MVC   $VOLSER,STRING      SUBSTITUTE THE VOLUME
         MVC   $UNIT,INITALDA      COULD BE ANY DASD UNIT
         OI    STATUS8,ISPF34      FLAG VOLUME CAME FROM ZDLVOL

GET34XIT DELETE EPLOC=INITILNK     RESET ISPLINK USE COUNT IN JPA

GET34ERR LR    R1,R13              POINT TO CURRENT SAVE AREA
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         XC    0(72,R1),0(R1)      RESET CURRENT SAVE AREA
         XC    8(4,R13),8(R13)     RESET NEW SAVE AREA POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER

         DROP  R4                  GET34VOL

INITILNK DC    CL8'ISPLINK'
INITVDEF DC    CL8'VDEFINE'
INITVGET DC    CL8'VGET'
INITVCHA DC    CL8'CHAR'
INITVSHA DC    CL8'SHARED'
INITVDEL DC    CL8'VDELETE'
INITVZDS DC    CL8'(ZDLDSN)'
INITVZCA DC    CL8'(ZDLCAT)'
INITVZVO DC    CL8'(ZDLVOL)'
INITOP34 DC    CL8'ISRUDL'
INITALDA DC    CL8'SYSALLDA'
*INITMIGR DC    CL6'MIGRAT'
*INITARCI DC    CL6'ARCIVE'
         LTORG

*                   DC    (((*-C-1)/N)*N+N+C-*)X'00'
*                 WHERE N IS BOUNDARY (I.E. 256, 4096, ...)
*                 AND C IS THE BEGINNING OF THE CSECT.
         DC    (((*-REVIEW-1)/256)*256+256+REVIEW-*)X'00'
         DS    0D
         TITLE '  R E V I E W   -   P H A S E   2  '
************************************************************
*                                                          *
*         PHASE 2 INITIALIZATION                           *
*                                                          *
************************************************************

*
*         FROM THIS POINT ON, PROCESSING IS THE SAME
*         FOR BOTH DSNAME AND DDNAME OPTIONS.
*
*         $DSNAME  - CONTAINS THE FULLY QUALIFIED DSNAME,
*                    FROM THE USER OR FROM THE JFCB.
*         $MEMBER  - CONTAINS THE MEMBER NAME, IF SPECIFIED,
*                    FROM THE USER OR FROM THE JFCB.
*         $DDNAME  - CONTAINS THE DDNAME, FROM IKJDAIR OR
*                    FROM THE USER.
*         $UCBAD   - CONTAINS THE UCB ADDRESS,
*                    FROM THE TIOT ENTRY.
*         $VOLSER  - CONTAINS THE VOLUME, FROM THE UCB POINTED
*                    TO BY THE TIOT ENTRY.
*
*         IF THE USER SPECIFIED A DSNAME (DID NOT SPECIFY THE FILE
*         KEYWORD) THEN THE STALLOC BIT IS SET ON SO THE DDNAME
*         WILL BE UNALLOCATED WHEN THE COMMAND IS FINISHED WITH IT.
*
REVIEW2  CSECT
         ENTRY PUTMSG
         ENTRY SEQDCB
         ENTRY FULLT
         ENTRY EDITT
         ENTRY FINDSBA
         ENTRY HEXTEST
         ENTRY HEXDATA
         ENTRY KAPS
         ENTRY TABALPHA
         ENTRY SCREEN1
         WXTRN REVSMF
         USING *,R10,R11,R12,R3
         LR    R10,R15             RESET BASE REGISTER
         LA    R15,1
         LA    R11,4095(R15,R10)   BASE
         LA    R12,4095(R15,R11)   BASE
         LA    R3,4095(R15,R12)    BASE
         ST    R14,RET1

**********************************************************************
*                                                          *         *
*         PERFORM PHASE 2 INITIALIZATION                   *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************

         L     R5,INIT2ADR         LOAD SUBROUTINE ADDRESS
         BR    R5                  PERFORM INITIALIZATION

         USING IHADCB,R4

************************************************************
*                                                          *
*         BUILD DATA SET NAME FOR TOP LINE                 *
*                                                          *
************************************************************

NEWNAME  MVC   DSPLUS(46),DSNAIM
         LA    R15,DSPLUS+2
         AH    R15,DSNAIM          POINT PAST DATA SET NAME
         TM    DCBDSORG,X'02'      CHECK FOR PDS
         BO    DSPMEMBR            GO TACK ON THE MEMBER NAME
* THE ABOVE TEST WILL WORK EVEN FOR A MEMBER NAMED X'4040404040404040'
         CLI   $MEMBER,C' '        MEMBER NAME TO BE DISPLAYED?
         BNE   DSPMEMBR            YES, GO TACK IT ON FOR SUBSYS D/S
         LR    R1,R15
         MVC   0(7,R1),=C' ON VIO'
         LA    R15,6(,R15)         POINT TO LAST CHARACTER
         CLI   $VOLSER,C' '        REALLY ON VIO?
         BE    DSPLUSX             YES
         TM    STATUS8,ISPF34      WAS VOLUME FROM ZDLVOL?
         BNO   FLAG34OK            NO, CONTINUE
         MVI   3(R1),C'-'          YES, LEAVE A SUBTLE HINT
FLAG34OK MVC   4(6,R1),$VOLSER     NO, SHOW REAL VOLUME
         LA    R15,3(,R15)         POINT TO LAST CHARACTER
         B     DSPLUSX
DSPMEMBR MVC   1(8,R15),$MEMBER    MOVE IN MEMBER NAME
         LA    R1,8(,R15)          POINT TO LAST MEMBER NAME CHARACTER
         LA    R6,7                MAXIMUM NUMBER OF TRAILING BLANKS
         MVI   0(R15),C'('
DSPMEM   CLI   0(R1),C' '          TRAILING BLANK?
         BNE   DSPMEMX             NO, SHOW MEMBER NAME UP TO HERE
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R6,DSPMEM           GET NEW LENGTH CODE AND TEST CHAR
DSPMEMX  TR    1(8,R15),FULLT      TRANSLATE OUT UNPRINTABLES
         LA    R15,2(R6,R15)       POINT PAST MEMBER NAME
         MVI   0(R15),C')'
         NI    DSORGTYP,255-OVLY   RESET OVERLAY PROGRAM FLAG
         CLI   BLDLTTRP+2,0        R OF TTR 0? (MEM NOT FOUND?)
         BE    DSPLUSX             YES, NO SPF STATS
         MVC   DOUBLE(1),BLDLINDC  GET USER DATA LENGTH BYTE
         NI    DOUBLE,X'7F'        TURN OFF ALIAS FLAG
         CLI   DOUBLE,15           SPF/PFD TYPE USER DATA?
         BH    OVLYCHK             NO, CHECK FOR OVERLAY PROGRAM
         CLI   DOUBLE,14
         BL    DSPLUSX             NO, END OF NAME FORMAT
         TM    BLDL+25,X'0F'       DATE SIGN AS EXPECTED?
         BNO   DSPLUSX             NO, END OF NAME FORMAT
         TM    BLDL+29,X'0F'       DATE SIGN AS EXPECTED?
         BNO   DSPLUSX             NO, END OF NAME FORMAT
         MVC   1(8,R15),=C' - VV.MM'
         SLR   R1,R1
         IC    R1,BLDL+18          GET SPF VERSION NUMBER
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  4(2,R15),DOUBLE+6(2)
         IC    R1,BLDL+19          GET SPF MODIFICATION NUMBER
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  7(2,R15),DOUBLE+6(2)
         LA    R15,8(,R15)         ADJUST POINTER
DSPLUSX  LA    R1,DSPLUS+1
         SR    R15,R1
         STH   R15,DSPLUS
         LA    R1,BUFFSIZE
         ST    R1,CBPRM1
         LA    R1,SCRNLNES
         ST    R1,CBPRM2
         LA    R1,SCREENW-4080
         LA    R1,4080(,R1)
         MVC   0(SCREEN1L,R1),SCREEN1
         LA    R15,SCRDSN-SCREEN1(,R1)
         LR    R0,R15
         LH    R1,DSPLUS
         CH    R1,HW54             DSPLUS TOO LONG?
         BNH   *+8                 NO
         LA    R1,54               YES, TRUNCATE IT (SPF STATS)
         BCTR  R1,0
         EX    R1,DSPLUSEX
         LA    R15,1(R1,R15)
         MVI   0(R15),C' '
         LR    R15,R0
         MVC   MSGDSN,0(R15)

         CLI   SYNADSW,X'FF'       I/O ERROR ALREADY?
         BE    FILLSCR             YES, MUST BE OPEN ERROR SO SHOW IT
         BAL   R14,FILLHOLD        NO, GO READ FROM FILE
         L     R5,=A(PCXCHECK)     SEE IF FILE IS A SHOWABLE PICTURE
         BR    R5                  PCXCHECK WILL RETURN TO FILLSCR
DSPLUSEX MVC   0(0,R15),DSPLUS+2   <<< EXECUTED >>>

OVLYCHK  TM    TSTRECFM,X'C0'      RECFM U?
         BM    DSPLUSX             NO, CAN'T BE A LOAD MODULE MEMBER
         NI    DOUBLE,X'1F'        YES, RESET TTR COUNT
         CLI   DOUBLE,8            ENOUGH USER HALFWORDS FOR PROGRAM?
         BL    DSPLUSX             NO, END OF NAME FORMAT
         TM    BLDLATR1,X'20'      YES, OVERLAY ATTRIBUTE FLAG SET?
         BZ    DSPLUSX             NO, END OF NAME FORMAT
         OI    DSORGTYP,OVLY       YES, FLAG THIS
         B     DSPLUSX             END OF NAME FORMAT

************************************************************
*                                                          *
*         READ ENOUGH RECORDS TO FILL HOLD AREA            *
*                                                          *
************************************************************

FILLHOLD ST    R14,HOLDR
         L     R0,HOLDPTR
         L     R1,SAVHOLDL
         SLR   R14,R14
         SLR   R15,R15
         ICM   R15,8,BLANKS        LOAD BLANK PAD CHARACTER
         MVCL  R0,R14              FILL HOLD AREA WITH BLANKS
         L     R7,HOLDTOP          POINT TO HOLD AREA DIRECTORY
         LH    R8,PAGESIZE         NUMBER OF DATA LINES PER SCREEN
HILLOOP  DS    0H
         BAL   R14,GET
         ICM   R14,15,COUNT        VERY FIRST RECORD?
         BNZ   HILLFILE            NO, DO NOT CHECK "MAGIC NUMBER"
         LTR   R1,R1               NULL RECORD OR END-OF-FILE?
         BNP   HILLFILE            YES, NO "MAGIC NUMBER" TO CHECK
         C     R1,KOUNT            VERY FIRST TIME?
         BL    HILLFILE            NO, DO NOT CHECK "MAGIC NUMBER"
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    HILLFILE            YES, SHOW RAW DATA
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    HILLFILE            YES, SKIP ZIP PROCESSING
         TM    MODE,FMTSW          ALREADY BEEN THROUGH THIS?
         BO    HILLFILE            YES, SUCCESSFULLY TOO
         L     R5,UNZIPDAD         NO, LOOK AT "MAGIC NUMBER" FOR
         BR    R5                      POSSIBLE SPECIAL PROCESSING
HILLFILE LA    R0,1                COMPUTE
         AR    R0,R14               THE
         ST    R0,COUNT              RECORD NUMBER
         ST    R0,DIRNUM(,R7)      STORE THE RECORD NUMBER
         ST    R1,DIRLEN(,R7)      LENGTH IN DIRECTORY
         MVC   DIRTTR(4,R7),TTR    SAVE BLOCK ADDRESS
         NI    DIRNXT(R7),X'7F'    RESET RRDS EMPTY SLOT FLAG
         LTR   R1,R1               END-OF-FILE?
         BM    HILLED              YES, BRANCH
         OC    DIRNXT(1,R7),DEBLOCKS COPY RRDS EMPTY SLOT FLAG
         C     R1,SAVLRECL         IS RECORD LONGER THAN MAX?
         BNH   *+8                 NO, SKIP NEXT INSTR
         L     R1,SAVLRECL         YES, TRUNCATE TO MAX
         LR    R0,R2               ADDRESS TO MOVE FROM
         L     R14,DIRREC(,R7)     ADDRESS TO MOVE TO
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    HILLNOTV            NO
         SH    R14,HW4             YES, MOVE TO PTR MINUS 4
         L     R15,DIRLEN(,R7)
         SH    R15,HW4
         ST    R15,DIRLEN(,R7)
HILLNOTV LR    R15,R1              LENGTH FOR MOVE
         MVCL  R14,R0
         LR    R1,R7               SAVE PTR TO MOST CURRENT ENTRY
         L     R7,DIRNXT(,R7)      POINT TO NEXT DIRECTORY ENTRY
         BCT   R8,HILLOOP
         LR    R7,R1               GET MOST CURRENT ENTRY
HILLED   DS    0H
         ST    R7,HOLDEND          SAVE LAST RECORD ENTRY
         L     R14,HOLDR
         BR    R14

************************************************************
*                                                          *
*         SET UP THE SCREEN HEADER PRIOR TO DISPLAY        *
*                                                          *
************************************************************

FILLSCR  NI    STATUS4,255-RFRSH   REFRESH NO LONGER REQUIRED
         NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         LA    R6,SCREENW-4080
         LA    R6,4080(,R6)
         MVC   0(SCREEN1L,R6),SCREEN1
         LR    R15,R6              COPY THE BUFFER ADDRESS
         TM    STATUS5,X3270       IN 7-COLOUR MODE?
         BO    GOTPARM3            YES, HAVE CORRECT ADDRESS
         LA    R15,3(,R15)         NO, SKIP OVER SA,COLOUR
*        MVI   0(R15),WCCSTND      SUPPLY THE WCC
GOTPARM3 DS    0H                  NOW HAVE CORRECT BUFFER ADDR
         ST    R15,CBPRM3          SAVE BUFFER ADDRESS FOR REVCMPBF
         LA    R6,SCREEN1L-160(,R6)   POINT PAST INITIAL ORDERS
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    SHOWPOSI            NO
         MVI   1(R6),C' '          YES, BLANK THE HEADING LINE
         MVC   2(190,R6),1(R6)
         MVC   1(14,R6),=CL14'HELP MEMBER==>'
         MVC   15(2,R6),SFUNPHI    ATTRIBUTE BYTE FOR INPUT
         TM    STATUS5,X3270       IN 7-COLOUR MODE?
         BZ    MONOHELP            NO
         MVC   17(3,R6),REDSA      YES, SHOW MEMBER NAME IN RED
         MVC   20(3,R6),USCORE     UNDERLINE THE MEMBER NAME
         MVC   23(8,R6),$MEMBER    SHOW THE HELP MEMBER NAME
         MVC   31(3,R6),NORMAL     REVERT TO HEADING ATTRIBUTES
         MVC   34(3,R6),WHITESA
         MVC   37(2,R6),SFPROHI
         MVC   39(13,R6),=CL13'SUBCOMMAND==>'
         MVC   52(2,R6),SFUNPHI    ATTRIBUTE BYTE FOR INPUT
         MVC   54(3,R6),REDSA      SHOW SUBCOMMAND NAME IN RED
         MVC   57(3,R6),USCORE     UNDERLINE THE SUBCOMMAND NAME
         MVC   60(8,R6),$SUBCOM    SHOW THE SUBCOMMAND NAME
         MVC   68(3,R6),NORMAL     REVERT TO HEADING ATTRIBUTES
         MVC   71(3,R6),WHITESA
         MVC   74(2,R6),SFPROHI
         LA    R6,4+24(,R6)        COUNT EXTRA ATTRIBUTE BYTES
         B     SHOWPOSI
MONOHELP MVC   17(8,R6),$MEMBER    SHOW THE HELP MEMBER NAME
         MVC   25(2,R6),SFPROHI
         MVC   27(13,R6),=CL13'SUBCOMMAND==>'
         MVC   40(2,R6),SFUNPHI    ATTRIBUTE BYTE FOR INPUT
         MVC   42(8,R6),$SUBCOM    SHOW THE SUBCOMMAND NAME
         MVC   50(2,R6),SFPROHI
         LA    R6,4(,R6)           COUNT EXTRA ATTRIBUTE BYTES
SHOWPOSI A     R6,SCRNCOLS         POINT TO THE SECOND SCREEN LINE
         L     R15,=A(FMTCOLS)     GET ROUTINE ADDRESS
         BALR  R14,R15             WORK OUT COLUMN RANGES AND FORMATS
         LR    R14,R6              POINT TO THE SECOND SCREEN LINE
         SH    R14,HW10            FORMAT LAST COLUMN OR RECORD COUNT
         MVC   1(9,R14),SCRMASK    MOVE IN EDIT MASK
         LA    R1,9(,R14)          POINT TO LAST DIGIT IN CASE OF ZERO
         ICM   R15,B'1111',AMNLR   GET NUMBER OF RECORDS (ICF)
         BZ    NOAMNLR             IGNORE ZERO COUNTER
         CVD   R15,DOUBLE          DISPLAY OSTENSIBLE RECORD CONTENTS
         EDMK  0(10,R14),DOUBLE+3
         SH    R1,HW4
         MVC   0(4,R1),=CL4' OF '
         B     FILLCOLX            DO NOT SHOW FIRST AND LAST COLUMNS
NOAMNLR  DS    0H                  SHOW FIRST AND LAST COLUMNS
         CVD   R0,DOUBLE           USE RIGHT-MOST COLUMN FROM FMTCOLS
         EDMK  0(10,R14),DOUBLE+3
         BCTR  R1,0
         MVI   0(R1),C' '
         LR    R14,R1
         SH    R14,HW10            FORMAT FIRST COLUMN NUMBER
         MVC   1(9,R14),SCRMASK    MOVE IN EDIT MASK
         LA    R1,9(,R14)          POINT TO LAST DIGIT IN CASE OF ZERO
         LA    R0,1
         AH    R0,OFFSET           GET NUMBER OF FIRST COLUMN
         CVD   R0,DOUBLE
         EDMK  0(10,R14),DOUBLE+3
         SH    R1,HW5
         MVC   0(5,R1),SCRCOL
FILLCOLX DS    0H
         LR    R14,R1
         SH    R14,HW10            FORMAT FIRST LINE NUMBER
         MVC   1(9,R14),SCRMASK    MOVE IN EDIT MASK
         LA    R1,9(,R14)          POINT TO LAST DIGIT IN CASE OF ZERO
         L     R7,HOLDTOP
         L     R0,DIRNUM(,R7)      GET NUMBER OF FIRST LINE
         CVD   R0,DOUBLE
         EDMK  0(10,R14),DOUBLE+3
         SH    R1,HW6
         MVC   0(6,R1),SCRLINE
         MVI   0(R6),C' '          BLANK ENTIRE SECOND SCREEN LINE
         MVC   1(168,R6),0(R6)
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    FILLREV2            NO, MAKE SECOND LINE FOR REVIEW
         LR    R1,R6               YES, POINT TO SECOND LINE
         SH    R1,HW32             BACKUP TO MESSAGE AREA
         MVC   MSGDSN(32),0(R1)    SAVE LINE AND COLUMN LOCATION
         MVC   0(SCREEN2L,R6),SCREEN2H
         B     FILLSCRL            GO FORMAT SCROLL AMOUNT
FILLREV2 MVC   0(SCREEN2L,R6),SCREEN2
FILLSCRL TM    STATUS5,X3270       IN 7-COLOUR MODE?
         BZ    GETRANGE            NO, GET THE SCROLL AMOUNT
         MVC   SCREEN2L(3,R6),REDSA
         LA    R6,3(,R6)           YES, SHOW SCROLL AMOUNT IN RED
GETRANGE MVC   SCREEN2L(SCRRGEL,R6),SCRRGE
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS
         MVC   SCREEN2L(2,R6),=C'PG'
         TM    STATUS4,PGSW        FULL PAGE SCROLLING ACTIVE?
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS
         MVC   SCREEN2L(2,R6),=C'HF'
         TM    STATUS4,HFSW        HALF PAGE SCROLLING ACTIVE?
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS
         L     R0,SCROLL           SCROLL AMOUNT
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'      DISPLAY SCROLL AMOUNT
         UNPK  SCREEN2L(2,R6),DOUBLE+6(2)
GOTRANGE LA    R6,SCREEN2L+SCRRGEL-80(,R6)    COUNT 3270 ORDER BYTES
         A     R6,SCRNCOLS         POINT TO THE THIRD SCREEN LINE
         ST    R6,SCREENF          SAVE RULER ADDRESS FOR LATER

************************************************************
*                                                          *
*         SET UP THE COLUMN HEADER PRIOR TO DISPLAY        *
*                                                          *
************************************************************

*               IT WOULD BE MORE EFFICIENT TO DO MOST OF THIS WORK
*               ONLY WHEN THE OFFSET IS INITIALIZED OR CHANGED
*               AND SAVE THE RESULTS.

         MVI   LINKAREA,2          RESET TEMP COLOUR FLAG
         BAL   R14,COLRHIGH        SET NEW DISPLAY COLOUR
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)
         LH    R1,OFFSET
         TM    MODE,MODEX          HEX MODE?
         BO    HEXCOLNM            YES

         LTR   R1,R1               IS OFFSET ZERO?
         BNZ   *+10                NO
         MVC   0(8,R6),COL1LBL     YES, SPECIAL CASE, 1
         SLR   R0,R0
         LA    R14,10
         DR    R0,R14
         SR    R14,R0              10 MINUS REMAINDER
         LTR   R0,R0               WAS REMAINDER 0?
         BZ    *+6                 YES, USE 0, NOT 10
         LR    R0,R14
*
         LR    R14,R6
         AR    R14,R0              ADD (0 TO 9) TO LINE
         BCTR  R14,0               START AT LINE-1 FOR OFFSET 0
*                                  LINE+8 FOR OFFSET 1
*                                  LINE+7 FOR OFFSET 2
*                                  LINE+6 FOR OFFSET 3
*                                  LINE+0 FOR OFFSET 9
         LH    R1,OFFSET
         AR    R1,R0               ADD (0 TO 9) TO OFFSET
         LA    R0,17
COLNUML  CH    R1,RECSIZE
         BH    COLNUMX
         CVD   R1,DOUBLE
         MVC   COLNUM,=X'402020202120'
         ED    COLNUM,DOUBLE+5
         CH    R1,HW10000          10000-32768?
         BNL   COLNUMN             YES, USE NNNNN
*        MVC   COLNUM(5),COLNUM+1
*        MVI   COLNUM+5,C' '
*        CH    R1,HW1000           1000-9999?
*        BNL   COLNUMN             YES, USE NNNNX
         MVC   COLNUM(5),COLNUM+1
         MVI   COLNUM+5,C' '
         CH    R1,HW100            100-999?
         BNL   COLNUMN             YES, USE XNNNX
         MVC   COLNUM(5),COLNUM+1  USE XNNXX
         MVI   COLNUM+5,C' '
COLNUMN  DS    0H
         SH    R14,HW2
         CR    R14,R6
         BL    *+10
         MVC   0(5,R14),COLNUM+1
         LA    R14,12(,R14)
         LA    R1,10(,R1)
         BCT   R0,COLNUML
COLNUMX  DS    0H                  COLUMN LABELS COMPLETE
         A     R6,SCRNCOLS         POINT TO RULER LINE
         LH    R1,OFFSET
         SLR   R0,R0
         LA    R14,5
         DR    R0,R14
         LR    R1,R0
         LA    R14,MARKS(R1)
         MVC   0(5,R6),0(R14)
         MVC   5(155,R6),0(R6)
         LH    R1,RECSIZE
         SH    R1,OFFSET
         C     R1,SCRNCOLS
         BNL   MARKX
         ALR   R1,R6
         MVI   0(R1),C' '
         MVC   1(159,R1),0(R1)
MARKX    LH    R1,OFFSET
         LTR   R1,R1               IS OFFSET ZERO?
         BNZ   COL1OK              NO
         MVI   0(R6),C'+'          YES, SPECIAL CASE
         TM    TSTRECFM,X'06'      ANY CARRIAGE CONTROL?
         BZ    COL1OK              NO, A '+' IS GOOD
         MVI   0(R6),C'A'          YES, INDICATE ANSI
         TM    TSTRECFM,X'04'      IS IT ANSI?
         BO    COL1OK              YES, GOOD GUESS
         MVI   0(R6),C'M'          NO, MACHINE CODE
         B     COL1OK              DO COMMON KEY DISPLAY FOR RULER LINE

*                                  HEX MODE HEADER CONSTRUCTION
HEXCOLNM LTR   R1,R1               IS OFFSET ZERO?
         BNZ   *+10                NO
         MVC   1(8,R6),COL1LBL     YES, SPECIAL CASE, 1
         SLR   R0,R0
         LA    R14,5
         DR    R0,R14
         SR    R14,R0              5 MINUS REMAINDER
         LTR   R0,R0               WAS REMAINDER 0?
         BZ    *+6                 YES, USE 0, NOT 5
         LR    R0,R14
*
         LR    R14,R6
         LH    R1,OFFSET
         AR    R1,R0               ADD (0 TO 4) TO OFFSET
         SLL   R0,1                MULTIPLY BY 2
         AR    R14,R0              ADD (0 TO 8) TO LINE
         BCTR  R14,0               START AT LINE-1 FOR OFFSET 0
*                                  LINE+8 FOR OFFSET 1
*                                  LINE+6 FOR OFFSET 2
*                                  LINE+4 FOR OFFSET 3
*                                  LINE+2 FOR OFFSET 4
*                                  LINE+0 FOR OFFSET 5
         LA    R0,17
COLNUMLX CH    R1,RECSIZE
         BH    COLNUMXX
         CVD   R1,DOUBLE
         MVC   COLNUM,=X'402020202120'
         ED    COLNUM,DOUBLE+5
         CH    R1,HW10000          10000-32768?
         BNL   COLNUMNX            YES, USE NNNNN
*        MVC   COLNUM(5),COLNUM+1
*        MVI   COLNUM+5,C' '
*        CH    R1,HW1000           1000-9999?
*        BNL   COLNUMNX            YES, USE NNNNX
         MVC   COLNUM(5),COLNUM+1
         MVI   COLNUM+5,C' '
         CH    R1,HW100            100-999?
         BNL   COLNUMNX            YES, USE XNNNX
         MVC   COLNUM(5),COLNUM+1  USE XNNXX
         MVI   COLNUM+5,C' '
COLNUMNX DS    0H
         SH    R14,HW2
         CR    R14,R6
         BL    *+10
         MVC   0(5,R14),COLNUM+1
         LA    R14,12(,R14)
         LA    R1,5(,R1)
         BCT   R0,COLNUMLX
COLNUMXX DS    0H                  COLUMN LABELS COMPLETE
         A     R6,SCRNCOLS         POINT TO RULER LINE
         LH    R1,OFFSET
         SLR   R0,R0
         LA    R14,5
         DR    R0,R14
         SLL   R0,1                MULTIPLY BY 2
         LR    R1,R0
         LA    R14,MARKSX(R1)
         MVC   0(10,R6),0(R14)
         MVC   10(150,R6),0(R6)
         LH    R1,RECSIZE
         SH    R1,OFFSET
         SLL   R1,1
         C     R1,SCRNCOLS
         BNL   MARKXX
         ALR   R1,R6
         MVI   0(R1),C' '
         MVC   1(159,R1),0(R1)
MARKXX   LH    R1,OFFSET
         LTR   R1,R1               IS OFFSET ZERO?
         BNZ   COL1OK              NO
         MVC   0(2,R6),MARKSX+8    YES, SPECIAL CASE
         TM    TSTRECFM,X'06'      ANY CARRIAGE CONTROL?
         BZ    COL1OK              NO, A '/\' IS GOOD
         MVC   0(2,R6),=C'AA'      YES, INDICATE ANSI
         TM    TSTRECFM,X'04'      IS IT ANSI?
         BO    COL1OK              YES, GOOD GUESS
         MVC   0(2,R6),=C'MM'      NO, MACHINE CODE
COL1OK   LH    R1,AMKLN
         LTR   R1,R1               ANY RECORD KEYS?
         BZ    FILLDATA            NO
         TM    $UCBAD,RRDSSW       YES, BUT IS THIS A VRRDS?
         BO    FILLDATA            YES, SO NO REAL KEYS
         LH    R1,AMRKP            GET RELATIVE KEY POSITION
         SH    R1,OFFSET           GET START OFFSET ON SCREEN
         BM    RKE                 NOT ON SCREEN, DO KEY END STUFF
         TM    MODE,MODEX          HEX MODE?
         BZ    *+8                 NO
         SLL   R1,1                YES, DOUBLE IT
         C     R1,SCRNCOLS         PAST SCREEN?
         BNL   FILLDATA            YES, WHOLE KEY IS RIGHT OF SCREEN
         AR    R6,R1               NO, POINT TO IT
         LR    R15,R6              COPY THIS ADDRESS
         MVI   0(R15),C'K'         DENOTE FIRST COLUMN IN KEY
         TM    MODE,MODEX          HEX MODE?
         BZ    RKSE                NO
         MVI   1(R15),C'S'         YES, DENOTE FIRST DATA BYTE IN KEY
         CLC   AMKLN,HW1           SINGLE BYTE KEY?
         BNE   RKSE                NO, SHOW 'KS'
         MVI   1(R15),C'K'         YES, SHOW 'KK'
RKSE     MVC   160(160,R15),0(R6)  SAVE THE RULER LINE
         BAL   R14,COLRWARN        SET NEW DISPLAY COLOUR
         MVC   0(160,R6),160(R15)  RESTORE THE RULER LINE
         SR    R6,R1               POINT BACK TO NEXT-LINE-MINUS-COLS
         TM    MODE,MODEX          HEX MODE?
         BZ    RKE                 NO
         SRL   R1,1                YES, HALVE IT
RKE      AH    R1,AMKLN            GET OFFSET PAST END OF KEY
         BNP   FILLDATA            WHOLE KEY IS LEFT OF SCREEN
         TM    MODE,MODEX          HEX MODE?
         BZ    *+8                 NO
         SLL   R1,1                YES, DOUBLE IT
         LR    R15,R6              COPY RULER LINE ADDRESS
         MVC   160(160,R15),0(R6)  SAVE THE RULER LINE
         BAL   R14,COLRWARN        NO, ENSURE IN NOTEWORTHY COLOUR
         MVC   0(160,R6),160(R15)  RESTORE THE RULER LINE
         LA    R15,0(R1,R6)        POINT PAST LAST KEY COLUMN
         C     R1,SCRNCOLS         PAST SCREEN?
         BH    FILLDATA            YES, KEY END IS RIGHT OF SCREEN
         CLC   AMKLN,HW1           SINGLE BYTE KEY?
         BE    RKEE                YES, "K" INDICATOR ALREADY DONE
         BCTR  R15,0               POINT TO LAST KEY COLUMN MARKER
         MVI   0(R15),C'K'         DENOTE LAST COLUMN IN KEY
         TM    MODE,MODEX          HEX MODE?
         BZ    RKEE                NO
         BCTR  R15,0               YES, TWO COLUMNS PER BYTE
         MVC   0(2,R15),=C'KE'     DENOTE LAST BYTE IN KEY
RKEE     C     R1,SCRNCOLS         AT THE LAST SCREEN COLUMN?
         BE    FILLDATA            YES, DO NOT BOTHER RESETING COLOUR
         AR    R6,R1               NO, POINT PAST LAST KEY COLUMN
         LR    R15,R6              COPY THIS ADDRESS
         MVC   160(160,R15),0(R6)  SAVE THE RULER LINE
         BAL   R14,COLRHIGH        SET NEW DISPLAY COLOUR
         MVC   0(160,R6),160(R15)  RESTORE THE RULER LINE
         SR    R6,R1               POINT BACK TO NEXT-LINE-MINUS-COLS
*                                  END OF RULER FORMATTING CODE
FILLDATA A     R6,SCRNCOLS         POINT TO FILE DATA SCREEN AREA

************************************************************
*                                                          *
*         FILL IN THE DATA AREA OF THE SCREEN              *
*                                                          *
************************************************************

         SLR   R5,R5
         LH    R8,PAGESIZE         NUMBER OF DATA LINES

**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY PROGRAM FUNCTION KEY VALUES   *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************

         TM    STATUS4,HELPSW      PFK VALUES REQUESTED?
         BZ    FILBUG              NO, BRANCH
         L     R15,PFKEPADR        YES, GET FORMAT ROUTINE ADDRESS
         BR    R15                 INVOKE IT

**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY DEBUG DETAILS                 *   ABL   *
*                                                          *         *
**********************************************************************

FILBUG   TM    STATUS4,DBUGSW      DEBUG REQUESTED?
         BZ    FILLOOP             NO, BRANCH
         BAL   R14,COLRINFO        YES, SET INFORMATION DISPLAY COLOUR
         L     R8,DBGEPADR         GET FORMAT ROUTINE ADDRESS
         BR    R8                  INVOKE IT

************************************************************
*                                                          *
*         FORMAT AND DISPLAY FILE CHARACTERS               *
*                                                          *
************************************************************

FILLOOP  DS    0H
         LM    R1,R2,DIRLEN(R7)    GET LENGTH AND ADDRESS
         LTR   R1,R1               END-OF-FILE?
         BM    FILBOT              YES
         MVI   0(R6),C' '
         MVC   1(199,R6),0(R6)     FILL LINE WITH BLANKS (160+?ORDERS?)
         BZ    FILNUL              BRANCH IF R1 ZERO
         TM    MODE,FMTSW          IS DSECT FORMATTING ON?
         BO    CALLFMT             YES, BRANCH
         TM    MODE,SMFSW          IS SMF FORMATTING ON?
         BO    CALLSMF             YES, BRANCH
         TM    MODE,EREPSW         IS LOGREC FORMATTING ON?
         BO    CALLEREP            YES, BRANCH
FMTNOTON SH    R1,OFFSET           IS OFFSET BEYOND END OF RECORD?
         BNP   FILLNEXT            YES, LEAVE LINE BLANK
         AH    R2,OFFSET
         TM    MODE,MODEX
         BO    FILLHEX
         IC    R0,CHRCOLOR         LOAD CHARACTER COLOUR (GREEN)
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         ST    R6,DOUBLE           SAVE DISPLAY LINE START FOR APL TEST
         C     R1,SCRNCOLS         MAXIMUM DATA IS ONE LINE'S WORTH
         BNH   *+8
         L     R1,SCRNCOLS
         BCTR  R1,0
         EX    R1,LOADCHRS         LOAD CHARACTERS INTO DISPLAY LINE
         TM    MODE,ASCIISW        IN ASCII MODE?
         BZ    AFTER103            NO, BRANCH TO AFTER XLATE
         LA    R0,1(,R1)           YES, GET LENGTH TO TRANSLATE
         LR    R1,R6               POINT TO ASCII DATA
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
AFTER103 DS    0H                  FINISHED WITH SVC 103
         TR    0(160,R6),PERIODS
         CLC   MSG+2(14),MSG31+2   FIND COMMAND ISSUED?
         BNE   FILLCHAR            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FILLCHAR            NO
         MVC   160(160,R6),0(R6)   YES, SAVE A COPY OF THE DATA
         LH    R1,FNDOFF           GET OFFSET OF SEARCH STRING
         SH    R1,OFFSET           GET SCREEN LINE OFFSET OF STRING
         BM    FILLCHAR            SMF TYPE BYTE NOT ON SCREEN
         LA    R15,0(R1,R6)        POINT TO FIRST CHARACTER
         MVI   0(R15),IC           SUPPLY INSERT CURSOR
         TM    STATUS5,X3270       USING 3270 EXTENSIONS?
         BO    HISTRING            YES, ALSO HIGHLIGHT THE STRING
         LR    R1,R6               NO
         A     R1,SCRNCOLS         POINT PAST LINE
         SR    R1,R15              GET REMAINING LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,MONOREST         RESTORE REMAINDER OF LINE
         LA    R6,1(,R6)           GET EXTRA BYTE COUNT (IC)
         B     FILLCHAR            INSERT CSR IS THE ONLY THING EXTRA
HISTRING MVC   1(3,R15),REVERSE    HIGHLIGHTING STARTS HERE
         MVC   4(3,R15),YELLOWSA   HIGHLIGHTING STARTS HERE
         CLI   CHRCOLOR,6          DISPLAYING DATA IN YELLOW?
         BNE   CHRFNDOK            NO, SO YELLOW IS A CONTRAST
         MVI   6(R15),X'F5'        YES, USE TURQUOISE TO CONTRAST
CHRFNDOK LH    R1,STRINGL          GET SEARCH STRING LENGTH CODE
         EX    R1,REVSTRNG         RESTORE SEARCH ARGUMENT
         LA    R15,1(R1,R15)       ADD PAST SEARCH STRING LEN
         MVC   7(3,R15),NORMAL     HIGHLIGHTING STOPS HERE
         MVC   10(2,R15),YELLOWSA  "SA,COLOUR"
         MVC   12(1,R15),CHRCOLOR  REVERT TO STANDARD CHAR COLOUR
         OI    12(R15),X'F0'
         LR    R1,R6               POINT TO LINE
         A     R1,SCRNCOLS         POINT PAST LINE
         SR    R1,R15              GET REMAINING LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,NRMSTRNG         RESTORE REMAINDER OF LINE
         LA    R6,13(,R6)          ADJUST FOR EXTRA ATTRIBUTES
FILLCHAR L     R15,APLEPADR        GET APL ROUTINE ADDRESS
         BR    R15                 INVOKE IT
REVSTRNG MVC   7(0,R15),160(R15)   <<< EXECUTED >>>
NRMSTRNG MVC   13(0,R15),160(R15)  <<< EXECUTED >>>
MONOREST MVC   1(0,R15),160(R15)   <<< EXECUTED >>>
LOADCHRS MVC   0(0,R6),0(R2)       <<< EXECUTED >>>

**********************************************************************
*                                                          *         *
*         CONDITIONALLY SWITCH DISPLAY COLOUR              *  GP@P6  *
*                                                          *  08/92  *
**********************************************************************

COLRHIGH DS    0H                  SET HIGHLIGHTING COLOUR
         LA    R0,6                YELLOW FOR FIRST PREFERENCE
         CLI   ACTCOLOR,6          DATA DISPLAYED IN YELLOW?
         BNE   COLOURSW            NO, SO YELLOW IS DIFFERENT
         LA    R0,5                YES, USE TURQUOISE INSTEAD
         B     COLOURSW            GO SWITCH COLOUR IF APPROPRIATE

COLRWARN DS    0H                  SET WARNING DATA COLOUR
         LA    R0,2                RED FOR FIRST PREFERENCE
         CLI   ACTCOLOR,2          DATA DISPLAYED IN RED?
         BNE   COLOURSW            NO, SO RED IS DIFFERENT
         LA    R0,3                YES, USE PINK INSTEAD
         B     COLOURSW            GO SWITCH COLOUR IF APPROPRIATE

COLRINFO DS    0H                  SET INFORMATION DATA COLOUR
         LA    R0,5                TURQUOISE FOR FIRST PREFERENCE
         CLI   ACTCOLOR,5          DATA DISPLAYED IN TURQUOISE?
         BNE   COLOURSW            NO, SO TURQUOISE IS DIFFERENT
         LA    R0,4                YES, USE GREEN INSTEAD
*        B     COLOURSW            GO SWITCH COLOUR IF APPROPRIATE

COLOURSW DS    0H
         CLM   R0,1,LINKAREA       CHECK TEMPORARY COLOUR CODE FLAG
         BER   R14                 ALREADY RIGHT COLOUR SO EXIT
         STC   R0,LINKAREA         DIFFERENT SO REMEMBER NEW COLOUR
         TM    STATUS5,X3270       USING COLOURS?
         BZR   R14                 NO, SKIP ANY ACTUAL ACTION
         MVC   0(2,R6),TURQOISA    YES, LOAD "SA,COLOUR"
         STC   R0,2(,R6)           SUPPLY COLOUR NUMBER
         TM    STATUS5,COLOR16     16-COLOUR TERMINAL?
         BO    CODEOKAY            YES, ALLOW BIG HEX DIGIT
         NI    2(R6),X'07'         NO, FORCE INTO VALID RANGE
         BNZ   CODEOKAY            SOME BITS LEFT ON SO PROCEED
         MVI   2(R6),WHITE         USE NEUTRAL (WHITE) TO FLAG NULL
CODEOKAY OI    2(R6),X'F0'         CONVERT TO DATA STREAM CODE
         LA    R6,3(,R6)           ADJUST BUFFER POINTER
         BR    R14                 RETURN TO CALLER

************************************************************
*                                                          *
*         FORMAT AND DISPLAY FILE HEXADECIMAL              *
*                                                          *
************************************************************

FILLHEX  DS    0H
         IC    R0,HEXCOLOR         LOAD HEXADECIMAL COLOUR (BLUE)
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         L     R14,SCRNCOLS
         SRL   R14,1
         CR    R1,R14
         BNH   *+6
         LR    R1,R14
         LR    R0,R1
         LR    R1,R2
         LR    R15,R6
         BAL   R14,HEX
         CLC   MSG+2(14),MSG31+2   FIND COMMAND ISSUED?
         BNE   FILLNEXT            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FILLNEXT            NO
         MVC   160(160,R6),0(R6)   YES, SAVE A COPY OF THE DATA
         LH    R1,FNDOFF           GET OFFSET OF SEARCH STRING
         SH    R1,OFFSET           GET CHAR OFFSET OF STRING
         BM    FILLNEXT            SMF TYPE BYTE NOT ON SCREEN
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         SRL   R0,1                GET MAX CHARS DEPICTED WITH HEX ON
         BCTR  R0,0                GET MAX HIGHLIGHT TEXT LENGTH CODE
         SLA   R1,1                GET SCREEN LINE OFFSET OF STRING
         BZ    *+6                 HIGHLIGHTING STARTS IN COL 1
         BCTR  R0,0                FIX MAX HIGHLIGHT TEXT LENGTH CODE
         LA    R15,0(R1,R6)        POINT TO FIRST CHARACTER
         MVI   0(R15),IC           SUPPLY INSERT CURSOR
         TM    STATUS5,X3270       USING 3270 EXTENSIONS?
         BO    HIXSTRNG            YES, ALSO HIGHLIGHT THE STRING
         LA    R1,79(,R6)          NO, POINT PAST LINE (-1 FOR EX)
         SR    R1,R15              GET REMAINING LENGTH
         EX    R1,MONOREST         RESTORE REMAINDER OF LINE
         LA    R6,1(,R6)           GET EXTRA BYTE COUNT (IC)
         B     FILLNEXT            INSERT CSR IS THE ONLY THING EXTRA
HIXSTRNG MVC   1(3,R15),REVERSE    HIGHLIGHTING STARTS HERE
         MVC   4(3,R15),TURQOISA   HIGHLIGHTING STARTS HERE
         CLI   HEXCOLOR,5          DISPLAYING DATA IN TURQUOISE?
         BNE   HEXFNDOK            NO, SO TURQUOISE IS A CONTRAST
         MVI   6(R15),YELLOW       YES, USE YELLOW TO CONTRAST
HEXFNDOK LH    R1,STRINGL          GET SEARCH STRING LENGTH CODE
         CR    R1,R0               IS STRING TOO LONG?
         BNH   *+6                 NO, CONTINUE
         LR    R1,R0               YES, PREVENT SCREEN ERRORS
         LA    R1,1(R1,R1)         GET SEARCH HEX LENGTH CODE
         EX    R1,REVSTRNG         RESTORE SEARCH ARGUMENT
         LA    R15,1(R1,R15)       ADD PAST SEARCH STRING LENGTH
         MVC   7(3,R15),NORMAL     HIGHLIGHTING STOPS HERE
         MVC   10(3,R15),TURQOISA  "SA,COLOUR"
         MVC   12(1,R15),HEXCOLOR  REVERT TO STANDARD HEX COLOUR
         OI    12(R15),X'F0'
         LA    R1,79(,R6)          POINT PAST LINE (-1 FOR EX)
         SR    R1,R15              GET REMAINING LENGTH
         EX    R1,NRMSTRNG         RESTORE REMAINDER OF LINE
         LA    R6,13(,R6)          ADJUST FOR EXTRA ATTRIBUTES
         B     FILLNEXT

************************************************************
*                                                          *
*         PROCESS NULL RECORDS                             *
*                                                          *
************************************************************

FILNUL   DS    0H
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         MVC   0(6,R6),=C'(NULL)'
         B     FILLNEXT

************************************************************
*                                                          *
*         PERFORM SMF RECORD FORMATTING                    *
*                                                          *
************************************************************

CALLSMF  LR    R15,R2              COPY RECORD ADDRESS
         TM    TSTRECFM,X'C0'      RECFM U? (VSAM SMF D/S?)
         BM    SMFRDWOK            NO
         CLC   0(2,R2),HW18        TOO SHORT FOR VALID SMF?
         BL    CALLSMFX            YES, DON'T FORMAT RECORD
         LA    R2,4(,R2)           POINT PAST RDW
SMFRDWOK CH    R1,HW14             TOO SHORT FOR VALID SMF?
         BL    CALLSMFX            YES, DON'T FORMAT RECORD
         CLC   DAYCENTI,2(R2)      VALID CENTISECOND TIME?
         BL    CALLSMFX            NO, DON'T FORMAT RECORD
         TM    9(R2),X'0F'         DATE SIGN AS EXPECTED?
         BNO   CALLSMFX            NO, DON'T FORMAT RECORD
         CLI   9(R2),X'9F'         VALID LOW-ORDER DECIMAL DIGIT?
         BH    CALLSMFX            NO, DON'T FORMAT RECORD
         CLI   8(R2),X'36'         VALID HIGH ORDER DAY DIGITS?
         BH    CALLSMFX            NO, DON'T FORMAT RECORD
         STM   R1,R2,CALLPARM
         IC    R0,FMTCOLOR         LOAD SMF COLOUR (ORIGINALLY RED)
         CLC   SMFTYPE,1(R2)       HIGHLIGHT RECORD?
         BNE   COLORSMF            NO
         CLI   SMFSBTYP,X'FF'      SUB-TYPE REQUESTED?
         BE    SMFHILT1            NO, PERFORM HIGHLIGHTING
*        TM    0(R2),X'C2'         SUBSYSID+SUBTYPES+OS/VS2?
*        BNO   COLORSMF            NO, SUB-TYPE MISMATCH
         L     R1,FSTYPADR         POINT TO SUBTYPE OFFSET TABLE
         SLR   R15,R15
         IC    R15,1(,R2)          GET SMF RECORD TYPE
         IC    R15,0(R15,R1)       GET THE OFFSET FOR THIS TYPE
         ALR   R15,R2              ADD IT TO RECORD ADDRESS
         CLC   1(1,R15),SMFSBTYP+1 CORRECT SUB-TYPE?
         BNE   COLORSMF            NO, SUB-TYPE MISMATCH
SMFHILT1 LA    R0,3                USE PINK FOR THIS SMF RECORD TYPE
         CLI   FMTCOLOR,3          UNHIGHLIGHTED RECORDS IN PINK?
         BNE   COLORSMF            NO, PINK WILL STAND OUT
         LA    R0,2                YES, USE RED TO HIGHLIGHT
COLORSMF BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         ST    R6,CALLPARM+8
         LA    R0,CALLSAVE
         ST    R0,CALLPARM+12
         OI    CALLPARM+12,X'80'
         L     R0,SCRNCOLS         SUPPLY SCREEN WIDTH
         ICM   R0,B'1100',OFFSET   SUPPLY SCROLL RIGHT OFFSET
         LA    R1,CALLPARM
         L     R15,CALLSMFA
         BASSM R14,R15             REVSMF MAY BE AMODE=31 AND RMODE=ANY
         TR    0(160,R6),PERIODS
         CLC   SMFTYPE,1(R2)       HIGHLIGHT RECORD?
         BNE   SUBTYPE#            NO
         CLI   SMFSBTYP,X'FF'      SUB-TYPE REQUESTED?
         BE    SMFHILT2            NO, PERFORM HIGHLIGHTING
*        TM    0(R2),X'C2'         SUBSYSID+SUBTYPES+OS/VS2?
*        BNO   SUBTYPE#            NO, SUB-TYPE MISMATCH
         L     R1,FSTYPADR         POINT TO SUBTYPE OFFSET TABLE
         SLR   R15,R15
         IC    R15,1(,R2)          GET SMF RECORD TYPE
         IC    R15,0(R15,R1)       GET THE OFFSET FOR THIS TYPE
         ALR   R15,R2              ADD IT TO RECORD ADDRESS
         CLC   1(1,R15),SMFSBTYP+1 YES, CORRECT SUB-TYPE?
         BNE   SUBTYPE#            NO, SUB-TYPE MISMATCH
SMFHILT2 DS    0H                  YES
         OC    0(4,R6),MARKS       HIGHLIGHT WITH DASHES FOR MONOCHROME
SUBTYPE# CLI   3(R6),C'0'          NUMERIC SUB-TYPE HERE?
         BL    FILLNXT             NO
         TM    STATUS5,GEOK        GRAPHIC ESCAPE ALLOWABLE?
         BZ    FILLNXT             NO
         MVC   160(157,R6),3(R6)   YES, USE SUPERSCRIPT
         MVC   4(157,R6),160(R6)   MOVE THE DATA TO MAKE ROOM
         MVI   3(R6),X'08'         SUPPLY THE CODE FOR GE
         LA    R6,1(,R6)           COUNT THE EXTRA BYTE (GE)
         B     FILLNXT             BYPASS FORMATTED DATA OVLY
CALLSMFX LR    R2,R15              RESTORE RECORD ADDRESS
         B     FMTNOTON            RECORD FAILED SMF VALIDITY CHECK

**********************************************************************
*                                                          *         *
*         INVOKE LOGREC RECORD FORMATTING ROUTINE          *  GP@FT  *
*                                                          *  01/94  *
**********************************************************************

CALLEREP L     R15,=A(EREPFMT)     GET EREP FORMATTING ROUTINE ADDRESS
         BR    R15                 CALL IT

**********************************************************************
*                                                          *         *
*         INVOKE DSECT RECORD FORMATTING ROUTINE           *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************

CALLFMT  L     R15,=A(FORMATIT)    GET FORMATTING ROUTINE ADDRESS
         BR    R15                 CALL IT

************************************************************
*                                                          *
*         PERFORM FINAL RECORD EDITING                     *
*                                                          *
************************************************************

FILLNEXT TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLLONG            YES, SO DON'T SHOW RECORD ADDRESS
         TM    $UCBAD,ACBSW        USING VSAM ACB?
         BO    FILLTTR             YES, ZERO RBA IS VALID
         ICM   R0,15,DIRTTR(R7)    BLOCK LOCATION KNOWN?
         BZ    FILLLONG            NO, SO SKIP ALL THIS
FILLTTR  L     R15,SCRNCOLS
         SH    R15,HW40            GET LINE OFFSET TO NON-DATA START
         LH    R1,RECSIZE          GET MAXIMUM RECORD LENGTH
         SH    R1,OFFSET           GET DATA BYTES ON SCREEN
         CR    R1,R15              IS IT MORE THAN 40?
         BH    FILLLONG            YES, DON'T SHOW RECORD'S BLOCK
         ALR   R6,R15              POINT TO BLOCK POS'N FORMAT AREA
         CLC   0(40,R6),BLANKS     IS THE AREA REALLY BLANK?
         BNE   FILLONG             NO, DON'T OVERWRITE DATA
         MVC   40(3,R6),BLANKS     ENSURE TRAILING BLANKS
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         MVC   0(30,R6),=C'(RECORD FROM BLOCK AT LOCATION'
         UNPK  31(9,R6),DIRTTR(5,R7)
         TR    31(8,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   39(R6),C')'
         TM    STATUS2,MAGTAPE     TAPE DATA SET?
         BO    FILLTTRX            YES, SHOW EIGHT HEX DIGITS
         TM    $UCBAD,ACBSW        USING VSAM ACB?
         BO    FILLRBA             YES, SHOW EIGHT HEX DIGITS OF RBA
         MVI   37(R6),C')'         NO, SHOW SIX HEX DIGITS OF TTR
         MVC   38(2,R6),BLANKS     SUPPLY TRAILING BLANKS
FILLTTRX SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-COLS
         B     FILLNXT
FILLRBA  MVC   8(22,R6),=C'RELATIVE BYTE ADDRESS '
         TM    $UCBAD,RRDSSW       ACCESSING AN RRDS?
         BZ    FILLTTRX            NO
         MVC   17(13,R6),=C'RECORD NUMBER'
         B     FILLTTRX
FILLONG  SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-COLS
FILLLONG TM    TSTRECFM,X'40'      RECFM V?
         BZ    FILLPGM             NO, DON'T CHECK FOR LONG RECORD
         L     R0,DIRLEN(,R7)      GET TOTAL RECORD LENGTH
         CH    R0,RECSIZE          IS IT LARGER THAN LRECL?
         BNH   FILLSPAN            NO, CHECK FOR SPANNED FLAGS
         CVD   R0,DOUBLE           YES, CONVERT IT TO DECIMAL
         BAL   R14,FILLWARN        HANDLE APL CHARS IN LAST 8 OF LINE
         L     R15,SCRNCOLS
         SH    R15,HW8             LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO RECORD ERROR NOTICE AREA
         BAL   R14,COLRWARN        SET WARNING DISPLAY COLOUR
         MVC   0(3,R6),=C'LEN'     INDICATE LENGTH DATA
         OI    DOUBLE+7,X'0F'      WANT NUMERIC CHARACTERS
         UNPK  3(5,R6),DOUBLE+5(3)
         CLI   3(R6),C'0'          RECORD LENGTH LESS THAN 10,000?
         BNE   FILLONGX            NO, LEAVE DIGIT AND LINE FINISHED
         MVI   3(R6),C'='          YES, ROOM FOR AN EQUALS SIGN
FILLONGX SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-COLS
         B     FILLNXT             THIS DISPLAY LINE IS NOW FINISHED
FILLSPAN TM    TSTRECFM,X'48'      VARIABLE SPANNED RECORD FORMAT?
         BO    FILLNXT             YES, SEGMENT BITS ARE EXPECTED
         L     R2,DIRREC(,R7)      NO, POINT TO AFTER RDW
         BCTR  R2,0
         BCTR  R2,0                POINT TO LAST HALF OF RDW
         ICM   R0,3,0(R2)          IS IT NULL?
         BZ    FILLNXT             YES, NO PROBLEMS AT ALL
         BAL   R14,FILLWARN        HANDLE APL CHARS IN LAST 8 OF LINE
         L     R15,SCRNCOLS
         SH    R15,HW8             LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO RECORD ERROR NOTICE AREA
         BAL   R14,COLRWARN        SET WARNING DISPLAY COLOUR
         MVC   0(4,R6),=C'RDW='    INDICATE HEX DATA IS FROM THE RDW
         UNPK  4(5,R6),0(3,R2)
         TR    4(4,R6),HEXTAB-240  SHOW 2ND HALF OF RDW IN HEX
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-COLS
         B     FILLNXT             THIS DISPLAY LINE IS NOW FINISHED
FILLWARN LA    R0,8                EIGHT DISPLAY BYTES TO CHECK
         L     R15,SCRNCOLS
         AR    R15,R6              POINT PAST CURRENT LINE
         SH    R15,HW2             POINT TO BEFORE LAST CHAR IN LINE
FILWRNLP CLI   0(R15),X'08'        IS IT APL?
         BNE   FILWRNOK            NO, STANDARD CHARACTER
         BCTR  R6,0                YES, ADJUST NEXT-LINE-MINUS-COLS
         BCTR  R15,0               DECREMENT POINTER FOR GE
FILWRNOK BCTR  R15,0               POINT TO PREVIOUS CHARACTER
         BCT   R0,FILWRNLP         TEST IT FOR APL
         BR    R14                 R6 NOW ADJUSTED FOR APL CHARS
FILLPGM  L     R15,=A(PGMFRMAT)
         BALR  R14,R15             PERFORM ANY CESD OR IDR FORMATTING
         TM    DIRNXT(R7),X'80'    TEST RRDS EMPTY SLOT FLAG
         BZ    FILLNXT             THE FLAG IS OFF
         L     R15,SCRNCOLS
         SH    R15,HW12            LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO EMPTY SLOT FLAG AREA
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         MVC   0(12,R6),=C'(EMPTY-SLOT)'
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-COLS
FILLNXT  LA    R5,1(,R5)           COUNT LINES FILLED IN
         A     R6,SCRNCOLS         POINT TO NEXT SCREEN LINE
         L     R7,DIRNXT(,R7)
         BCT   R8,FILLOOP
         B     FILLED

************************************************************
*                                                          *
*         FORMAT AND DISPLAY 'BOTTOM OF DATA' LINE         *
*                                                          *
************************************************************

FILBOT   BAL   R14,COLRHIGH        SET NEW DISPLAY COLOUR
         MVI   0(R6),C'*'
         MVC   1(159,R6),0(R6)
         L     R15,SCRNCOLS
         SRL   R15,1               GET LINE MID-POINT OFFSET
         SH    R15,HW8             GET TEXT LINE OFFSET
         ALR   R15,R6              GET POSITION
         MVC   0(16,R15),=C' BOTTOM OF DATA '
         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?
         BNE   BOTIOERR            YES, BRANCH
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    BOTMDONE            YES, FORGET STATS AND FACTS
         TM    STATUS8,ZIPD+ZIPF   PROCESSING A ZIP FILE?
         BNZ   BOTMDONE            YES, FORGET STATS AND FACTS
         L     R1,KOUNT            GET BYTE COUNT
         TM    STATUS2,FASTREAD    IS "FASTPATH" ACTIVE?
         BZ    KOUNTOK             NO, SO THE BYTE COUNT IS CORRECT
         ICM   R1,B'1111',COUNT    YES, GET RECORD COUNT
         BNP   KOUNT0              LESS THAN ONE RECORD SO SKIP IT
         BCTR  R1,0                DO NOT COUNT BOTTOM OF DATA LINE
         MH    R1,RECSIZE          GET BYTE COUNT
KOUNTOK  LTR   R1,R1               ANY BYTES?
         BNP   KOUNT0              NO, SO SKIP IT
         L     R15,SCRNCOLS
         SH    R15,HW40            GET LINE OFFSET
         ALR   R15,R6              GET POSITION
         CVD   R1,DOUBLE           MAKE DECIMAL
         MVC   15(11,R15),=X'2020202020202020202120'
         ED    14(12,R15),DOUBLE+2
         MVC   26(6,R15),=C'-BYTES' DISPLAY BYTE COUNT FOR FILE/MEMBER
KOUNT0   TM    $UCBAD,ACBSW        ACCESSING FILE VIA AN ACB?
         BO    BOTMDONE            YES, FORMATTING NOW COMPLETE
         TM    STATUS,STNOMEM      IN 'MEMBER-NOT-FOUND' STATUS?
         BO    BOTMDONE            YES, FORMATTING NOW COMPLETE
         ICM   R0,B'1111',$UCBAD   ANY UCB?
         BZ    BOTMDONE            NO, FORMATTING NOW COMPLETE
         TM    STATUS2,SOFTEOF     VSAM SOFTWARE END-OF-FILE?
         BZ    NVSAMEOF            NO, BRANCH
         MVC   2(4,R6),=C'S/W-'    YES, INDICATE NOT EOF MARKER
NVSAMEOF MVC   6(8,R6),=C'EOF-BLK=' NO, REAL EOF MARKER OR EXTENT END
         UNPK  14(9,R6),EOFRELAD(5) DISPLAY END-OF-FILE RELATIVE ADDR
         TR    14(8,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   22(R6),C'*'         ERASE GARBAGE
         TM    STATUS2,MAGTAPE     TAPE FILE?
         BO    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
         MVC   10(3,R6),=C'TTR'    NO, SAY 'TTR' FOR DISK FILE
         MVC   20(2,R6),22(R6)     SUPPRESS TRAILING ZEROS
         TM    DSORG,X'02'         IS DSORG PO?  LOOKING AT MEMBER?
         BO    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
         LTR   R1,R1               ANY BYTES?
         BZ    BOTMDONE            NO, SKIP % USED FORMATTING
         ICM   R1,7,MYDSCB-44+98   IS DS1LSTAR ZERO?
         BZ    SHOWUSED            YES, SHOW % USED (UTILITIES WON'T)
         CLC   EOFRELAD(2),MYDSCB-44+98 EOF MARKER ON DS1LSTAR TRACK?
         BE    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
         LA    R0,CHKPTLN          LENGTH OF CHKPT ENTRY
         L     R1,CHKPTBOT         POINT TO POSSIBLE E-O-F MARKER
         SR    R1,R0               POINT TO POSSIBLE LAST DATA BLOCK
         CLC   4(2,R1),MYDSCB-44+98  LAST DATA BLOCK ON DS1LSTAR TRK?
         BE    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
SHOWUSED SLR   R0,R0               NO, UTILITIES DON'T SHOW % USED
         IC    R0,MYDSCB-44+59     GET DS1NOEPV (NUMBER OF EXTENTS)
         L     R1,DCBDEBAD         POINT TO DATA EXTENT BLOCK
         LA    R15,32(,R1)         POINT TO DEB DASD SECTION
         SLR   R1,R1               ZERO TRACK COUNTER
         SLR   R14,R14             (CAN'T USE AH IF OVER 32K TRK XTNT)
DEBLOOP  ICM   R14,3,14(R15)       GET TRACKS IN THIS EXTENT
         AR    R1,R14              ACCUMULATE TRACK COUNT
         LA    R15,16(,R15)        POINT TO SECTION FOR NEXT EXTENT
         BCT   R0,DEBLOOP          PROCESS NEXT EXTENT IF IT EXISTS
         L     R15,EOFRELAD
         SRL   R15,16              GET TT OF TTR
         LA    R15,1(,R15)         SAY THIS TRACK IS USED
         TM    STATUS2,SOFTEOF     VSAM SOFTWARE END-OF-FILE?
         BZ    EOFADDR             NO
         CLI   EOFRELAD+2,1        WAS FIRST BLOCK ON TRACK?
         BNE   EOFADDR             NO
         BCTR  R15,0               YES, THIS TRACK WASN'T REALLY USED
EOFADDR  CR    R15,R1              EOF TT BIGGER THAN EODS TT?
         BH    BOTMDONE            YES, THAT'S JUST SILLY (MULTI-VOL?)
         LA    R0,100
         MR    R14,R0              TRACKS USED BY 100 FOR PERCENTAGE
         DR    R14,R1              DIVIDE BY NUMBER OF TRACKS ALLOC'D
         CVD   R15,DOUBLE
         MVC   20(5,R6),=X'7C2021206C'
         ED    20(4,R6),DOUBLE+6   SHOW (USED)/(ALLOCATED) AS A %
         CLI   DOUBLE+6,9          LESS THAN 100?
         BH    BOTMDONE            NO, END OF FORMATTING
         MVC   21(4,R6),22(R6)     YES, REMOVE SUPERFLUOUS CHARACTER
         CLI   DOUBLE+6,0          LESS THAN 10?
         BNE   BOTMDONE            NO, END OF FORMATTING
         MVC   21(3,R6),22(R6)     YES, REMOVE SUPERFLUOUS CHARACTER
         B     BOTMDONE
BOTIOERR L     R15,SCRNCOLS
         SRL   R15,1
         SH    R15,HW40            GET LINE OFFSET FOR ERROR MESSAGE
         ALR   R15,R6              GET POSITION FOR I/O ERROR MESSAGE
         MVC   1(78,R15),SYNADMSG  SUPPLY I/O ERROR MESSAGE TEXT
BOTMDONE BCTR  R8,0                ANOTHER SCREEN LINE USED
         A     R6,SCRNCOLS         POINT PAST THIS LINE
         LA    R5,1(,R5)           COUNT LINES FILLED IN
         L     R15,LBLEPADR        LOAD TAPE LABEL ROUTINE ADDRESS
         BALR  R14,R15             CALL IT
FILLED   DS    0H
         CH    R5,PAGESIZE         IS SCREEN FILLED UP?
         BNL   NOPAD               YES
ADDPAD   MVC   0(4,R6),SCRPAD      NO, FILL REMAINING LINES WITH BLANKS
         LA    R6,4(,R6)
NOPAD    L     R15,IMAGEADR        GET ROUTINE ENTRY POINT
         BASSM R14,R15             RENDER PICTURE IF APPROPRIATE
         ST    R6,SCREENF          STORE END-OF-SCREEN FOR TPUT

************************************************************
*                                                          *
*         WRITE SCREEN IMAGE TO TERMINAL                   *
*                                                          *
************************************************************

PROMPT   TM    STATUS6,HELFF       INITIAL POSITIONING FOR HEL?
         BO    FINDHELP            YES
         TM    STATUS4,RFRSH       SCREEN FORMAT REFRESH REQUIRED?
         BO    FILLSCR             YES
         TM    STATUS6,HELPARS     STILL TO LOOK AT PRIMARY INPUT?
         BO    PARSED              YES, PROCESS ANY OTHER COMMAND INPUT
         TM    STATUS4,DBUGSW+HELPSW      DEBUG OR PFK DISPLAY?
         BZ    PROMPTOK            NO
         NI    STATUS4,255-DBUGSW-HELPSW YES, TURN IT OFF FOR NEXT TIME
         OI    STATUS4,RFRSH       SCREEN REFRESH IS NOW REQUIRED
PROMPTOK LA    R1,SCREENW-4080
         LA    R15,4080+SCRDSN-SCREEN1(,R1)
         LH    R1,MSG              GET LENGTH OF MESSAGE
         LTR   R1,R1               ANY MESSAGE?
         BNZ   PROMPTFA            YES, DO NOT OVERLAY IT
         TM    STATUS7,FALL        'FIND/FINDNOT ALL' ACTIVE?
         BZ    PROMPTFA            NO
         MVC   MSG(MSG48L),MSG48   RESULTS OF <<FIND ALL/REST>>
         TM    STATUS7,FNOT        'FINDNOT ALL' ACTIVE?
         BZ    PROMPTAI            NO
         MVC   MSG(MSG49L),MSG49   RESULTS OF <<FINDNOT ALL/REST>>
PROMPTAI TM    STATUS4,FLAGI       ATTENTION INTERRUPT DETECTED?
         BZ    PROMPTLH            NO
         MVC   MSG(MSG50L),MSG50   <<ALL/REST>> PROCESSING INTERRUPTED
         OI    STATUS7,BELL        SOUND BELL FOR WARNING
PROMPTLH LH    R1,MSG              GET LENGTH OF MESSAGE
PROMPTFA NI    STATUS7,255-FANY    RESET 'ALL' RECENTLY RESET FLAG
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    PROMPTMH            YES, PROCESS HEL MESSAGE LOCATION
         LTR   R1,R1               NO, IS THERE A MESSAGE FOR REVIEW?
         BNZ   PROMPTMR            YES, BRANCH
         MVC   0(54,R15),MSGDSN    NO, DISPLAY DSNAME
         B     PROMPTT
PROMPTMH BCTR  R15,0               POINT TO TOP-LEFT ATTRIBUTE
         A     R15,SCRNCOLS
         LA    R15,4(,R15)         COUNT ATTRIBUTE BYTES
         TM    STATUS5,X3270       USING 3270 EXTENSIONS?
         BZ    *+8                 NO, NOW POINTING TO SECOND LINE
         LA    R15,24(,R15)        YES, POINT TO SECOND LINE
         SH    R15,HW32            BACK UP TO MESSAGE AREA
         MVC   0(32,R15),MSGDSN    RESET PREVIOUS MESSAGE WITH LOCATION
         LTR   R1,R1               IS THERE A MESSAGE FOR HEL?
         BZ    PROMPTT             NO, LEAVE LOCATION ON DISPLAY
         CH    R1,HW32             YES, MSG TOO LONG?
         BNH   *+8                 NO
         LA    R1,32               YES, TRUNCATE IT
         MVC   0(32,R15),BLANKS    BLANK OUT LINE AND COLUMN LOCATION
         B     PROMPTML            LOAD THE MESSAGE
PROMPTMV MVC   0(0,R15),MSG+2      <<< EXECUTED >>>
PROMPTMR CH    R1,HW54             MSG TOO LONG?
         BNH   *+8                 NO
         LA    R1,54               YES, TRUNCATE IT
         MVI   0(R15),C'-'
         MVC   1(53,R15),0(R15)
PROMPTML BCTR  R1,0                LENGTH-1 FOR EX
         EX    R1,PROMPTMV
         LA    R15,1(R1,R15)
         MVI   0(R15),C' '
         CLC   MSG+2(14),MSG31+2   FOUND MESSAGE BEING DISPLAYED?
         BNE   *+8                 NO
         OI    STATUS4,RFRSH       YES, SCREEN REFRESH IS NOW REQUIRED
         STCM  R1,B'1110',MSG      SET MESSAGE FLAG OFF
PROMPTT  L     R1,CBPRM3
         MVI   0(R1),WCCSTND       SUPPLY STANDARD WCC
         TM    STATUS7,BELL        BELL REQUESTED?
         BZ    BELLOKAY            NO
         MVI   0(R1),X'C5'         YES, SOUND BELL AS REQUESTED
         NI    STATUS7,255-BELL    RESET BELL REQUEST
BELLOKAY L     R0,SCREENF
         SR    R0,R1               COMPUTE SIZE OF SCREEN
         ST    R0,BUFFSIZE
         LA    R1,CBPRM1           POINT TO PARAMETER LIST
         L     R15,=V(REVCMPBF)
         BALR  R14,R15             CALL BUFFER COMPRESS ROUTINE
         MVC   RECALPTR,RECALUSE   NEXT RECALL STARTS FROM LATEST
PROMPTR  L     R0,BUFFSIZE         GET COMPRESSED BUFFER LENGTH
         L     R1,CBPRM3           GET BUFFER ADDRESS
         LR    R15,R0
         AR    R15,R1              GET COMPRESSED END-OF-SCREEN
         ST    R15,SCREENF         AND SAVE IT
RECALPUT ICM   R1,8,=X'03'
         TPUT  (1),(0),R
         NI    STATUS4,255-FLAGI   CLEAR ATTENTION FLAG

************************************************************
*                                                          *
*         READ REPLY FROM THE TERMINAL                     *
*                                                          *
************************************************************

         MVC   REPLY+128(128),REPLY   FOR DEBUG                    ABL
         MVC   TGETREG2(12),TGETREGS  FOR DEBUG                    ABL
         XC    REPLY(128),REPLY    TO SIMPLIFY DEBUGGING
         TM    STATUS2,STPDS       REVIEWING A PDS UNDER A PDS (CMD)?
         BZ    STAXOKAY            NO, NO NEED TO DISABLE STAX
         STAX  ,                   YES, LET PDS HANDLE ATTENTION
STAXOKAY DS    0H
         LA    R1,REPLY
         LA    R0,128
         ICM   R1,8,=X'81'
         TGET  (1),(0),R
         STM   R15,R1,TGETREGS
         LA    R0,X'0F'            RESET "UNINTERESTING" BITS
         NR    R15,R0                 IN TGET RETURN CODE
         CH    R15,HW12            WAS REPLY AREA LONG ENOUGH?
         BNE   TGETOK              YES, BRANCH
         TCLEARQ INPUT
TGETOK   DS    0H
         CLI   REPLY,X'88'         QUERY RESPONSE?
         BE    STAXOKAY            YES, SHOULD NOT HAPPEN HERE
*               REPLY AREA CONTENTS:
*               OFFSET 0 LENGTH 1  -  ID OF KEY
*               OFFSET 1 LENGTH 2  -  ADDRESS OF CURSOR
*               OFFSET 3 LENGTH 1  -  X'11' IF ANY FIELDS MODIFIED
*               OFFSET 4 LENGTH 2  -  SCREEN ADDRESS OF FIELD
*               OFFSET 6 LENGTH V  -  DATA FROM FIELD
*               DATA EXTENDS TO END OF BUFFER OR NEXT SBA (X'11')
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    PROMPTR             YES, RESHOW SCREEN
         LA    R0,1                GET PA KEY DATA STREAM LENGTH
         C     R0,TGETREGS+8       PA1, PA2, PA3 OR CLEAR?
         BNL   PROMPTR             YES, RESHOW SCREEN
         STCM  R0,B'1100',CSRLOCN  CLEAR CURSOR BUFFER ADDRESS
         ICM   R0,B'0011',REPLY+1  LOAD ACTUAL CURSOR BUFFER ADDRESS
         TM    REPLY+1,X'40'       12-BIT FORMAT CURSOR ADDRESS?
         BZ    CHKCSRLC            NO, 14-BIT FORMAT WAS SUPPLIED
         SLL   R0,2                SHIFT OUT LOW-ORDER "PARITY" BITS
         ICM   R0,B'0010',REPLY+1  RE-LOAD HIGH-ORDER BYTE
         SLL   R0,18               SHIFT OUT HIGH-ORDER "PARITY" BITS
         SRL   R0,20               CONVERT TO 12-BIT BINARY NUMBER
CHKCSRLC L     R5,SCRNCOLS         GET THE NUMBER OF COLUMNS
         SLL   R5,2                MULTIPLY BY FOUR
         CR    R0,R5               CURSOR IN DATA? (IE. PAST RULER?)
         BL    GOTCSRLC            NO, LEAVE CURSOR ADDRESS ZERO
         STH   R0,CSRLOCN          YES, REMEMBER LOCATION FOR LATER
GOTCSRLC DS    0H
         TM    STATUS2,STPDS       REVIEWING A PDS UNDER A PDS (CMD)?
         BZ    STAXISON            NO, NO NEED TO ISSUE STAX AGAIN
         XC    ATTNLST(ATTNLEN),ATTNLST   YES, ZERO ATTN LIST
         L     R5,ATTNADDR         GET ATTENTION EXIT ADDRESS
         STAX  (R5),REPLACE=YES,USADDR=@DATA,MF=(E,ATTNLST)
STAXISON DS    0H
         LA    R15,REPLY
         L     R14,TGETREGS+8      GET LENGTH OF REPLY
         CH    R14,HW3             ANYTHING BEYOND CURSOR ADDRESS?
         BNH   CMDNULL             NO, BRANCH
         CLI   3(R15),SBA          SBA? (SHOULD ALWAYS BE PRESENT)
         BNE   CMDNULL             NO, USER MUST HAVE USED CLEAR KEY
*
*               PROCESS FIELDS IN TGET BUFFER
*
         SLR   R0,R0
         ST    R0,CMDPTR           START WITH COMMAND-NOT-PRESENT
         BCTR  R14,0               LENGTH-1 FOR EX
         EX    R14,TRTSBA
         BZ    CMDNULL             NO FIELDS PRESENT
         LR    R0,R1               ADDRESS OF SBA
         SR    R0,R15              LENGTH OF PRECEDING DATA
         SR    R14,R0              LENGTH CODE OF REMAINING DATA
         BNP   PARSED              BRANCH IF NOTHING FOLLOWS SBA
LOOP     ST    R1,FLDPTR
         LA    R15,1(,R1)          POINT PAST SBA
         BCTR  R14,0               REDUCE LENGTH ACCORDINGLY
         EX    R14,TRTSBA          LOOK FOR SECOND SBA
         BZ    LAST                BRANCH IF NONE PRESENT
         LR    R0,R1               POINT TO NEXT SBA
         SR    R0,R15              GET LENGTH OF THIS DATA
         ST    R0,FLDLEN
         STM   R14,R1,SBASAVE
         BAL   R5,FIELD
         LM    R14,R1,SBASAVE
         SR    R14,R0              LENGTH CODE OF REMAINING DATA
         BNZ   LOOP                SOMETHING FOLLOWS SECOND SBA
         B     PARSED              NOTHING FOLLOWS SECOND SBA
TRTSBA   TRT   0(0,R15),FINDSBA    <<< EXECUTED >>>
LAST     LA    R0,1(,R14)          GET LENGTH OF THIS DATA
         ST    R0,FLDLEN
*        STM   R14,R1,SBASAVE
         BAL   R5,FIELD
         B     PARSED
FIELD    L     R15,FLDPTR          POINT TO SBA FOR FIELD
         L     R1,FLDLEN           GET LENGTH CODE
         TM    1(R15),X'40'        12-BIT ADDRESS?
         BZ    FLD14BIT            NO, ALREADY HAVE FIELD 14-BIT ADDR
         ICM   R0,4,2(R15)         YES, GET SECOND ADDRESS BYTE
         SLL   R0,2                SHIFT 2 "PARITY" BITS OUT OF BYTE
         ICM   R0,8,1(R15)         GET FIRST ADDRESS BYTE
         SLL   R0,2                SHIFT 2 "PARITY" BITS OUT OF BYTE
         SRL   R0,4                REALIGN LOW-ORDER BITS
         STCM  R0,12,1(R15)        OVERLAY 12-BIT WITH 14-BIT ADDRESS
FLD14BIT CLC   1(2,R15),MEMLOCN    HEL MEMBER INPUT?
         BE    FLDM                YES
         CLC   1(2,R15),SUBLOCN    HEL SUBCOMAND INPUT?
         BE    FLDS                YES
         TM    2(R15),X'01'        IS IT COMMAND OR SCROLL AMOUNT?
         BO    FLD2                SCROLL AMOUNT (ODD BUFFER ADDRESS)
*        B     FLD1                COMMAND (EVEN BUFFER ADDRESS)
FLD1     MVC   RECALPTR,RECALUSE   NEXT RECALL STARTS FROM LATEST
         SH    R1,HW3              GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO COMMAND
         ST    R15,CMDPTR          SAVE FOR LATER
         ST    R1,CMDLEN           SAVE LENGTH CODE FOR LATER
         BR    R5                  RETURN
FLD2     SH    R1,HW3              GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO SCROLL AMOUNT
         CH    R1,HW1              IS IT 2 BYTES?
         BNE   FLD2A               NO, BRANCH
         CLC   0(2,R15),BLANKS     BLANK?
         BER   R5                  YES, IGNORE
         CLI   0(R15),C' '         LEADING BLANK
         BNE   FLD2B               NO, BRANCH
         MVC   0(1,R15),1(R15)     YES, PROMOTE NON-BLANK
         B     FLD2C               GO ADJUST LENGTH
FLD2B    CLI   1(R15),C' '         TRAILING BLANK?
         BNE   FLD2A               NO, BRANCH
FLD2C    BCTR  R1,0                YES, REDUCE LENGTH BY 1
FLD2A    TR    0(2,R15),KAPS       UPPER CASE THE INPUT
         CLI   0(R15),C'C'         CURSOR SPECIFIED?
         BNE   FLD2H               NO, TEST FOR HALF
         OI    STATUS4,CSRSW       YES, ACTIVATE CURSOR SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         B     FLD2CHG             UPDATE SCROLL STATUS
FLD2H    CLI   0(R15),C'H'         HALF SPECIFIED?
         BNE   FLD2P               NO, TEST FOR PAGE
         NI    STATUS4,255-PGSW    YES, ENSURE NOT FULL PAGE SCROLLING
         OI    STATUS4,HFSW        ACTIVATE HALF PAGE SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         SRL   R0,1                HALVE IT
         B     FLD2CHG             UPDATE SCROLL STATUS
FLD2P    CLI   0(R15),C'P'         PAGE SPECIFIED?
         BNE   FLD2N               NO, INSIST UPON NUMERIC
         NI    STATUS4,255-HFSW    YES, ENSURE NOT HALF PAGE SCROLLING
         OI    STATUS4,PGSW        ACTIVATE FULL PAGE SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         B     FLD2CHG             UPDATE SCROLL STATUS
FLD2N    EX    R1,TRTNUM           IS DATA NUMERIC?
         BNZR  R5                  NO, IGNORE
         EX    R1,FLD2PACK         YES, PACK IT
         CVB   R0,DOUBLE           CONVERT TO BINARY
         LTR   R0,R0               IS IT ZERO?
         BZR   R5                  YES, IGNORE
*        CH    R0,PAGESIZE         IS IT GREATER THAN SCREEN SIZE?
*        BHR   R5                  YES, IGNORE
         NI    STATUS4,255-PGSW-HFSW    ENSURE NOT PAGE-TYPE SCROLLING
FLD2CHG  ST    R0,SCROLL           SAVE NEW DEFAULT SCROLL AMOUNT
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         OI    STATUS4,RFRSH       SCREEN REFRESH IS NOW REQUIRED
         BR    R5
TRTNUM   TRT   0(0,R15),NUMERIC    <<< EXECUTED >>>
FLD2PACK PACK  DOUBLE(8),0(0,R15)  <<< EXECUTED >>>
FLDHMV   OC    DOUBLE(0),0(R15)    <<< EXECUTED >>>
FLDM     SH    R1,HW3              GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO MEMBER NAME
FLDMBL   MVC   DOUBLE(8),BLANKS
         EX    R1,FLDHMV           MOVE AND UPPER-CASE
         CLC   DOUBLE(8),BLANKS    ALL BLANKS?
         BER   R5                  YES, BRANCH
         LA    R15,1(,R15)         NEXT CHARACTER
         SH    R1,=H'1'            ANY CHARACTERS?
         BMR   R5                  NO, BRANCH
         CLI   DOUBLE,C' '         BLANK FIRST CHARACTER?
         BE    FLDMBL              YES, BRANCH
         MVC   BLDLNAME,DOUBLE     NEW COMMAND NAME
         OI    STATUS6,HELNEWM+HELPARS     NEW MEMBER NAME
         BR    R5                  RETURN
FLDS     SH    R1,HW2              GET LENGTH OF DATA
         BNPR  R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO SUBCOMMAND
FLDSBL   MVC   DOUBLE(8),BLANKS
         BCTR  R1,0                DECREMENT FOR LENGTH CODE
         EX    R1,FLDHMV           MOVE AND UPPER-CASE
         CLC   DOUBLE(8),BLANKS    ALL BLANKS?
         BER   R5                  YES, BRANCH
         LA    R15,1(,R15)         NEXT CHARACTER
         CLI   DOUBLE,C' '         BLANK FIRST CHARACTER?
         BE    FLDSBL              YES, BRANCH
         MVC   $SUBCOM,DOUBLE      NEW SUBCOMMAND NAME
         OI    STATUS6,HELNEWS+HELPARS     NEW SUBCOMMAND
         LTR   R1,R1               SINGLE CHARACTER SUBCOMMAND?
         BZ    FLDSLN              YES, RETURN
         LA    R15,$SUBCOM(R1)     POINT TO LAST TYPED-IN CHARACTER
FLDSLL   CLI   0(R15),C' '         TRAILING BLANK?
         BNE   FLDSLN              NO, NOW HAVE SUBCOMMAND LENGTH
         BCTR  R15,0               YES, BACK UP ONE BYTE
         BCT   R1,FLDSLL
FLDSLN   STH   R1,$SUBLEN          NEW SUBCOMMAND LENGTH CODE
         BR    R5                  RETURN

************************************************************
*                                                          *
*         PROCESS TYPED TEXT PART OF COMMAND               *
*                                                          *
************************************************************

CMDNULL  SLR   R14,R14
         ST    R14,CMDPTR
         BCTR  R14,0
         ST    R14,CMDLEN
PARSED   TM    STATUS6,HELNEWM     NEW HELP MEMBER REQUESTED?
         BO    TOPOFMEM            YES, GO LOOK FOR IT
         TM    STATUS6,HELNEWS     NEW SUBCOMMAND REQUESTED?
         BO    FINDSBCM            YES, GO LOOK FOR IT
         NI    STATUS6,255-HELPARS NOW LOOKING AT PRIMARY INPUT
         L     R15,CMDPTR          POINT TO COMMAND IF ANY
         L     R14,CMDLEN          GET LENGTH CODE
CMDLOAD  MVI   CMDAREA,C' '
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         LTR   R15,R15             ANY COMMAND?
         BZ    RECALCHK            NO, GO CHECK FOR RECALLED TEXT
         EX    R14,CMDMOVE
         LA    R0,60
CMDJUST  CLI   CMDAREA,C' '        IS COMMAND LEFT JUSTIFIED?
         BNE   CMDJUSTX            YES, BRANCH
         MVC   CMDAREA(62),CMDAREA+1    SHIFT IT LEFT
         MVI   CMDAREA+62,C' '     APPEND BLANK
         BCTR  R14,0               REDUCE LENGTH
         BCT   R0,CMDJUST          REPEAT
         CLI   CMDAREA,C' '        ANYTHING TYPED IN?
         BNE   CMDJUSTX            YES, PROCESS IT
RECALCHK CLC   RECALPTR,RECALUSE   NO, WAS A COMMAND RECALLED?
         BE    RECALNOP            NO, NO ACTION
         L     R15,RECALPTR        YES
         L     R15,0(,R15)         POINT TO ELEMENT THAT WAS RECALLED
         LH    R14,8(,R15)         GET TEXT LENGTH CODE
         LA    R15,10(,R15)        POINT TO TEXT
         EX    R14,CMDMOVE         USE UNCHANGED RECALLED TEXT
         CLI   REPLY,X'7D'         ENTER?
         BNE   RECALNOP            NO, MIGHT BE RECALL PFK
CMDJUSTX DS    0H
         LA    R1,CMDAREA          POINT TO COMMAND JUST ENTERED    ABL
         L     R15,RECALUSE        POINT TO CURRENT ELEMENT
         CH    R14,8(,R15)         IS THIS COMMAND LENGTH IDENTICAL?
         BNE   RECALADD            NO, ADD ANOTHER RECALL STACK ENTRY
         EX    R14,RECALTST        YES, IS THIS COMMAND IDENTICAL?
         BE    RECALNOP            YES, SKIP ENTRY DUPLICATION
RECALADD CLI   CMDAREA,X'1C'       DUP CHARACTER?
         BE    RECALNOP            YES, DON'T REMEMBER IT
*        CLC   CMDAREA(8),=CL8'RECALL' RECALL CMD?  (MIGHT BE OPERAND)
*        BE    RECALNOP            YES, DON'T REMEMBER IT    (OF PFK)
         LTR   R14,R14             MORE THAN ONE CHARACTER?
         BNP   RECALNOP            NO, DON'T REMEMBER IT
         LA    R0,RECALDLN-1       GET MAXIMUM RECALL DATA LENGTH CODE
         L     R15,0(,R15)         POINT TO NEXT ONE TO USE
         XC    10(50,R15),10(R15)  SIMPLIFY DEBUGGING
         CR    R14,R0              IS COMMAND TOO LONG?
         BNH   RECALDEX            NO, BUFFER CAN HOLD ALL OF IT
         LR    R14,R0              YES, MUST HAVE HIT CLEAR FIRST
RECALDEX EX    R14,RECALOAD        LOAD COMMAND STACK ENTRY
         STH   R14,8(,R15)         SAVE LENGTH CODE
         ST    R15,RECALUSE        NEW CURRENT ELEMENT
RECALNOP DS    0H
         CLI   REPLY,X'7D'         ENTER?
         BE    NOTPFK              YES

************************************************************
*                                                          *
*         INTERPRET PROGRAM FUNCTION KEY                   *
*                                                          *
************************************************************

         LA    R1,PFKTAB           POINT TO THE PFK TABLE
PFKSRCH  CLI   0(R1),0             END OF PFK TABLE?
         BE    BADPFK              YES, NOT IN TABLE
         CLC   0(1,R1),REPLY       DOES PFK CODE MATCH?
         BE    PFKMOVE             YES, BRANCH
         LA    R1,PFKTABL(,R1)     NO, POINT TO NEXT ENTRY IN TABLE
         B     PFKSRCH             KEEP SEARCHING THE TABLE
PFKMOVE  CLI   1(R1),C' '          IS PFK DEFINITION EMPTY?
         BE    NOTPFK              YES, BRANCH
         MVC   CMDAREA+PFKTABL(63),CMDAREA
         MVC   CMDAREA(PFKTABL-1),1(R1)  MOVE IN THE TEXT           ABL
         LA    R14,PFKTABL(,R14)   COMMAND LENGTH JUST GOT LONGER

**********************************************************************
*                                                          *         *
*         PERFORM UPPERCASING AND RECALL IMPLEMENTATION    *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************

NOTPFK   LA    R1,CMDAREA          POINT TO ASSOCIATED COMMAND      ABL
         TR    0(3,R1),KAPS        UPPER CASE FIRST THREE CHARACTERS
         CLI   0(R1),C' '          ANY COMMAND REQUESTED AT ALL?
         BE    CMDNILL             NA, NOT A SAUSAGE
         MVI   PFKDISP,0           PFK DISPLAY MUST RESTART
         CLC   0(3,R1),=C'FC '     FIND-CHARACTER-STRING COMMAND?
         BE    FCTOFIND            YES, CONVERT TO FIND COMMAND
         TR    0(4,R1),KAPS        UPPER CASE FIRST FOUR CHARACTERS
         CLC   0(4,R1),=C'FCN '    FIND-CHARACTER-STRING-NOT COMMAND?
         BE    FCTOFIND            YES, CONVERT TO FINDNOT COMMAND
         TR    0(8,R1),KAPS        UPPER CASE FIRST EIGHT CHARACTERS
         CLC   0(8,R1),=C'FINDCHR ' FIND-CHARACTER-STRING COMMAND?
         BE    FNDCHR2F            YES, CONVERT TO FIND COMMAND
         NI    STATUS8,255-FCHR    NO, RESET FLAG OF SAME
         TR    0(127,R1),KAPS      UPPER CASE
         B     CMDSCAN
FNDCHR2F MVC   4(120,R1),7(R1)     CONVERT 'FINDCHR' TO 'FIND'
         MVC   124(3,R1),BLANKS    APPEND BLANKS
         OI    STATUS8,FCHR        FLAG CASE SENSITIVE
         SH    R14,HW3             ADJUST COMMAND LENGTH
         B     CMDSCAN             SCAN WITHOUT FOLDING TO UPPER CASE
FCTOFIND MVC   1(125,R1),2(R1)     CONVERT 'FC' COMMAND TO 'F' COMMAND
         MVI   126(R1),C' '        APPEND BLANK
         OI    STATUS8,FCHR        FLAG CASE SENSITIVE
         BCTR  R14,0               ADJUST COMMAND LENGTH
         B     CMDSCAN             SCAN WITHOUT FOLDING TO UPPER CASE
RECALTST CLC   10(0,R15),0(R1)     <<< EXECUTED >>>
RECALOAD MVC   10(0,R15),0(R1)     <<< EXECUTED >>>
CMDMOVE  MVC   CMDAREA(0),0(R15)   <<< EXECUTED >>>
CMDNILL  CLI   PFKDISP,0           PART-WAY THROUGH PFK DISPLAY?
         BNE   GIVEPFKS            YES, MAY AS WELL CONTINUE WITH IT
         TM    STATUS8,ZIPD+ZIPF   IS CURSOR SELECTION ALLOWED?
         BNO   PROMPT              NO, NO ACTION
         L     R5,UNZIPFAD         YES
         BSM   0,R5                INVOKE WITH 31-BIT ADDRESSING

************************************************************
*                                                          *
*         PARSE THE COMMAND AND OPERANDS                   *
*                                                          *
************************************************************

CMDSCAN  DS    0H
         LR    R15,R1              POINT TO COLUMN 1
         LR    R5,R14              LENGTH CODE OF STATEMENT
         LA    R6,OPDL             POINT TO OPERAND DESCRIPTOR LIST
         XC    0(OPDLL,R6),0(R6)   ZERO THE OPDL
         SLR   R1,R1               INSURE HI ORDER BYTE ZERO
         LA    R0,OPDLL/8-1        NUMBER OF ENTRIES IN O.D.L.
*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)
PARLOOP  XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY
         LA    R14,TABNONBL-2048   SET POINTER TO TRANSLATE TABLE
         EX    R5,PARSETRT         FIND A NONBLANK
         BZ    PARDONE             BRANCH IF ALL BLANKS
         LR    R14,R1              GET ADDRESS OF STRING
         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS
         SR    R5,R14              GET LENGTH OF REMAINING TEXT
         LR    R15,R1              GET ADDRESS OF NONBLANK
         BZ    PARLAST             SEARCH FOR ONE NON-BLANK
         LA    R14,TABQUOTE-2048   SET POINTER TO TRANSLATE TABLE
         CLI   0(R15),QUOTE        DOES OPERAND BEGIN WITH A QUOTE?
         BE    PARQUOTE            YES, BRANCH
         LA    R14,TABDBLQO-2048   SET POINTER TO TRANSLATE TABLE
         CLI   0(R15),C'"'         DOES OPERAND BEGIN WITH QUOTES?
         BE    PARQUOTE            YES, BRANCH
         LA    R14,TABBLANK-2048   SET POINTER TO TRANSLATE TABLE
         EX    R5,PARSETRT         FIND A BLANK
         BZ    PARLAST             BRANCH IF NOT FOUND
         LR    R14,R1              GET ADDRESS OF BLANK
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R5,R14              GET LENGTH CODE OF REMAINING TEXT
         BZ    PARDONE             BRANCH IF ONE TRAILING BLANK
         LR    R15,R1              POINT TO BLANK
PARNEXT  LA    R6,8(,R6)           POINT TO NEXT O.D.E.
         BCT   R0,PARLOOP          GO PROCESS NEXT OPERAND
         B     PARDONE             MAX OPERANDS PROCESSED
PARSETRT TRT   0(0,R15),2048(R14)  <<< EXECUTED >>>
PARQUOTE LA    R15,1(,R15)         POINT PAST QUOTE
         LA    R1,1                VALUE 1
         SR    R5,R1               REDUCE LENGTH CODE BY 1
         BM    PARDONE             IGNORE QUOTE IN LAST COLUMN
         EX    R5,PARSETRT         FIND THE NEXT QUOTE
         BZ    PARLASTQ            NOT FOUND, USE ALL REM TEXT
         LR    R14,R1              GET ADDRESS OF QUOTE
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT+QUOTED OPERAND PRESENT AND IN QUOTES
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R5,R14              GET LENGTH CODE OF REM TEXT
         BZ    PARDONE             BRANCH IF QUOTE WAS FINAL CHAR
         LA    R15,1(,R1)          POINT TO CHAR AFTER ENDING QUOTE
         BCTR  R5,0                REDUCE LENGTH CODE BY 1
         B     PARNEXT             SET UP FOR NEXT OPERAND
PARLASTQ OI    6(R6),QUOTED        OPERAND IN QUOTES
PARLAST  LA    R14,1(,R5)          GET LENGTH
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
PARDONE  DS    0H
         L     R1,OPD0             POINT TO COMMAND
         L     R15,=A(RECALL)
         CLI   0(R1),X'1C'         HANDLE DUP CHARACTER
         BER   R15
         CLC   0(8,R1),=CL8'RECALL' HANDLE RECALL CORRECTLY
         BER   R15                 MUST SKIP NEXT LINE IF A 'RECALL'
         L     R15,=A(PFKSET)
         CLC   0(3,R1),=C'PFK'     HANDLE SET-PFK REQUEST
         BER   R15
         LH    R5,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1
         L     R15,=A(SUBCMDTB)    POINT TO BEFORE SUBCOMMAND TABLE
SUBCMDLP LA    R15,SUBCMDL(,R15)   POINT TO NEXT SUBCOMMAND
         EX    R5,CMDTEST          IS IT THIS SUBCOMMAND?
         BL    INVLDCMD            NO, IT'S NOT IN THE (SORTED) TABLE
         BH    SUBCMDLP            NO, NOT FOUND (YET)
         L     R15,8(,R15)         YES, POINT TO ROUTINE ADDRESS
         BR    R15                 GO PERFORM SUBCOMMAND
CMDTEST  CLC   0(0,R1),0(R15)      <<< EXECUTED >>>
INVLDCMD MVC   MSG(MSG20L),MSG20   INVALID COMMAND
BELPRMPT OI    STATUS7,BELL        SOUND BELL FOR ERROR MESSAGE
         B     PROMPT
BADPFK   DS    0H
         MVC   MSG(MSG21L),MSG21
         UNPK  MSG+22(3),REPLY(2)
         TR    MSG+22(2),HEXTAB-240
         MVI   MSG+24,C')'
         B     BELPRMPT

************************************************************
*                                                          *
*         DOWN                                             *
*                                                          *
************************************************************

DOWN     DS    0H
         NI    FINDSW,255-FTOP-FEND
         LA    R15,OPD2            GET SECOND OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRINV              YES, INVALID
         L     R0,SCROLL
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?
         BNO   DOWNOTCS            NO
DOWNCSR  LH    R1,CSRLOCN          YES, GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    DOWNOTCS            NO, CAN'T BE CURSOR SCROLLING
         SLR   R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         L     R0,SCROLL           GET PAGE SCROLL AMOUNT
         SH    R1,HW4              GET LINE COUNT TO SCROLL DOWN
         BNP   DOWNOTCS            SCROLL A PAGE IF REQUIRED
         LR    R0,R1               LOAD INTO CORRECT REGISTER
DOWNOTCS DS    0H                  GOT SCROLL AMOUNT FROM CURSOR
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    DOWNRGE             NO, USE RANGE
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW10             IS LENGTH MORE THAN 9?
         BNL   ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?
         BNE   DOWNFIXD            NO, SCROLL DOWN BY A FIXED AMOUNT
         MVI   6(R15),0            YES, OBLITERATE OPERAND TRACE
         B     DOWNCSR             SCROLL DOWN BY CURSOR AMOUNT
DOWNFIXD LH    R0,PAGESIZE         GET SIZE OF SCREEN PAGE
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    DOWNISH             YES
         SRL   R0,1                HALVE IT
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    DOWNISH             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    BOTTOM              YES
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R0,R1
         BZ    PROMPT
DOWNRGE  TM    STATUS7,FALL        "FIND/FINDNOT ALL" ACTIVE?
         BO    DOWNISH             YES, READ DOWN SPECIFIED LINE COUNT
         CH    R0,PAGESIZE         SCROLL DOWN MORE THAN A PAGE?
         BNH   DOWNISH             NO, READ DOWN TO LINE NUMBER
         L     R7,HOLDTOP
         A     R0,DIRNUM(,R7)      GET THE REQUESTED TOP LINE
         B     LISTAT              INVOKE "FASTPATH"
DOWNISH  ST    R0,DOWNAMT
         BAL   R14,DOWNER
         LTR   R15,R15             ACTION TAKEN?
         BNZ   PROMPT              NO, BRANCH
         B     FILLSCR             YES, BRANCH

DOWNER   DS    0H
*
*         SEE IF EOF IS ON SCREEN TOP AND WOULD BE FORCED OFF
*
         LA    R15,4               PREPARE FOR NO ACTION
         L     R7,HOLDTOP          POINT TO ENTRY FOR FIRST RECORD
         TM    DIRLEN(R7),X'80'    IS THIS END OF DATA?
         BOR   R14                 YES, CAN'T GO DOWN
*
*         EOF CAN MOVE WITHOUT BEING FORCED OFF TOP OF SCREEN
*
         L     R7,HOLDEND          POINT TO ENTRY FOR LAST RECORD
         ST    R14,DOWNR
         L     R8,DOWNAMT          GET NUMBER OF LINES TO GO DOWN
DOWNLOOP L     R15,HOLDTOP         POINT TO TOP ENTRY
         L     R15,DIRNXT(,R15)    GET ADDRESS OF ENTRY AFTER TOP
         ST    R15,HOLDTOP         MAKE IT NEW TOP
         TM    DIRLEN(R15),X'80'   IS EOF ON TOP OF SCREEN?
         BO    DOWNX               YES, EXIT
         TM    DIRLEN(R7),X'80'    IS EOF ON SCREEN?
         BO    DOWNNXT             YES, BYPASS GET
         L     R7,DIRNXT(,R7)      POINT TO NEXT ENTRY
         BAL   R14,GET
         LA    R0,1                COMPUTE
         A     R0,COUNT             THE
         ST    R0,COUNT              RECORD NUMBER
         ST    R0,DIRNUM(,R7)      STORE THE RECORD NUMBER
         ST    R1,DIRLEN(,R7)      STORE LENGTH
         MVC   DIRTTR(4,R7),TTR    SAVE BLOCK ADDRESS
         NI    DIRNXT(R7),X'7F'    RESET RRDS EMPTY SLOT FLAG
         LTR   R1,R1               END-OF-FILE?
         BM    DOWNNXT             YES, BRANCH
         OC    DIRNXT(1,R7),DEBLOCKS COPY RRDS EMPTY SLOT FLAG
         C     R1,SAVLRECL         IS RECORD LONGER THAN MAX?
         BNH   *+8                 NO, SKIP NEXT INSTR
         L     R1,SAVLRECL         YES, TRUNCATE TO MAX
         LR    R0,R2               ADDRESS TO MOVE FROM
         L     R14,DIRREC(,R7)     ADDRESS TO MOVE TO
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    DOWNNOTV            NO
         SH    R14,HW4             YES, MOVE TO PTR MINUS 4
         L     R15,DIRLEN(,R7)
         SH    R15,HW4
         ST    R15,DIRLEN(,R7)
DOWNNOTV L     R15,SAVLRECL        LENGTH OF RECEIVING FIELD
         ICM   R1,8,BLANKS         PAD WITH BLANKS
         MVCL  R14,R0
DOWNNXT  TM    STATUS4,FLAGI       IF ATTENTION INTERRUPT THEN
         BO    DOWNX               PRETEND WE'RE THERE AND STOP
         BCT   R8,DOWNLOOP
DOWNX    ST    R7,HOLDEND          NEW END POINTER
         SLR   R15,R15             INDICATE SOME ACTION TAKEN
         L     R14,DOWNR
         BR    R14

NUMRCTRT TRT   0(0,R14),NUMERIC    <<< EXECUTED >>>
NUMRCPAK PACK  DOUBLE(8),0(0,R14)  <<< EXECUTED >>>

************************************************************
*                                                          *
*         UP                                               *
*                                                          *
************************************************************

UP       DS    0H
         NI    FINDSW,255-FTOP-FEND
         LA    R15,OPD2            GET SECOND OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRINV              YES, INVALID
         TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BZ    UPALLOFF            NO
         NI    STATUS7,255-FALL    YES, RESET 'ALL' STATUS
         OI    STATUS7,FANY        REMEMBER THAT IS WAS RESET
UPALLOFF L     R0,SCROLL
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?
         BNO   UPNOTCSR            NO
UPCSR    LH    R1,CSRLOCN          YES, GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    UPNOTCSR            NO, CAN'T BE CURSOR SCROLLING
         SLR   R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         LA    R1,1(,R1)           CONVERT RELATIVE TO ABSOLUTE LINE
         L     R0,SCROLL           GET PAGE SCROLL AMOUNT
         S     R1,SCRNLNES         GET NEGATIVE LINES TO SCROLL UP
         BNM   UPNOTCSR            SCROLL A PAGE IF REQUIRED
         LPR   R0,R1               CONVERT TO A POSITIVE NUMBER
UPNOTCSR DS    0H                  GOT SCROLL AMOUNT FROM CURSOR
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    UPRANGE             NO, USE RANGE
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW10             IS LENGTH MORE THAN 9?
         BNL   ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?
         BNE   UPFIXED             NO, SCROLL UP BY A FIXED AMOUNT
         MVI   6(R15),0            YES, OBLITERATE OPERAND TRACE
         B     UPCSR               SCROLL UP BY CURSOR AMOUNT
UPFIXED  LH    R0,PAGESIZE         GET SIZE OF SCREEN PAGE
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    UPRANGE             YES
         SRL   R0,1                HALVE IT
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    UPRANGE             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    TOP                 YES
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R0,DOUBLE
UPRANGE  ST    R0,DOWNAMT
         L     R7,HOLDTOP
         TM    DIRLEN(R7),X'80'    IS FIRST LINE EOF?
         BZ    UPTOP               NO, BRANCH
         NC    COUNT,COUNT         IS DATA SET EMPTY?
         BZ    PROMPT              YES, BRANCH
UPTOP    DS    0H
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF TOP LINE
         S     R0,DOWNAMT          GET RECORD NUMBER TO GO BACK TO
         BP    LISTAT              IF POSITIVE THEN LIST IT
*                                     ELSE DROP THOUGH TO TOP

************************************************************
*                                                          *
*         TOP                                              *
*                                                          *
************************************************************

TOP      DS    0H
         NI    FINDSW,255-FTOP-FEND
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         LA    R0,1                WANT TO LIST FIRST RECORD
         TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BO    LISTAT              YES, FILTER FIRST SCREENFUL
         L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         C     R0,DIRNUM(,R7)      ALREADY AT TOP-OF-DATA?
         BE    LISTRDY             YES, NO NEED FOR POSITIONING I/O
         TM    STATUS2,FASTREAD    IS "FASTPATH" AVAILABLE?
         BO    LISTAT              YES, USE IT
         TM    STATUS2,EOTAPE      END-OF-FILE FOR TAPE?
         BO    LISTAT              YES, REPOSITION TAPE
         L     R1,CHKPTTOP
         TM    0(R1),X'80'         IS DATA SET EMPTY?
         BO    PROMPT              YES
         ST    R1,CALLPARM+8       NO, SAVE CHECKPOINT ENTRY ADDRESS
         ICM   R15,B'1111',$UCBAD  TALKING TO PHYSICAL DEVICE?
         BZ    LISTAT              NO, AVOID POINT
         BM    TOPPNTOK            NOT DIRECTLY, AVOID POINT
         TM    STATUS8,DIVFULL     DIV STORING EVERYTHING SO FAR?
         BZ    LISTAT              YES, AVOID NEEDLESS FILE INTERACTION
         MVC   TTR,4(R1)           TTR OF FIRST BLOCK
         POINT (R4),TTR
TOPPNTOK XC    DEBLOCKS(12),DEBLOCKS
         XC    COUNT,COUNT         RESET RELATIVE RECORD NUMBER
         BAL   R14,FILLHOLD
         TM    FINDSW,FACT         IS FIND ACTIVE?
         BO    FINDCONT            YES, CONTINUE WITH FIND
         B     FILLSCR

************************************************************
*                                                          *
*         BOTTOM                                           *
*                                                          *
************************************************************

BOTTOM   DS    0H
         TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BZ    BOTANY              NO
         NI    STATUS7,255-FALL    YES, RESET 'ALL' STATUS
         OI    STATUS7,FANY        REMEMBER THAT IS WAS RESET
BOTANY   NI    FINDSW,255-FTOP-FEND
         L     R0,BOTNINES
         TM    STATUS8,ZIPD+ZIPF   PROCESSING A ZIP FILE?
         BZ    LISTAT              NO
         LA    R0,2
         A     R0,DIVHICNT
         SH    R0,PAGESIZE
         ST    R0,LISTNUM
         BCTR  R0,0
         ST    R0,COUNT
         B     LISTFILL
BOTRET   LH    R0,PAGESIZE         (PAGESIZE, NOT SCROLL)
         BCTR  R0,0                SHOW ** BOTTOM OF DATA **
         B     UPRANGE

************************************************************
*                                                          *
*         LIST                                             *
*                                                          *
************************************************************

LIST     DS    0H
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW10             IS LENGTH MORE THAN 9?
         BNL   ERRINV              YES, ERROR
         TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BZ    LISTANY             NO
         NI    STATUS7,255-FALL    YES, RESET "ALL" STATUS
         OI    STATUS7,FANY        REMEMBER THAT IS WAS RESET
LISTANY  L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R0,R1
         BNP   TOP
         NI    FINDSW,255-FTOP-FEND

LISTAT   ST    R0,LISTNUM
         L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         S     R0,DIRNUM(,R7)      GET REQUIRED CHANGE IN TOP NUMBER
         TM    STATUS7,FALL+FANY   RECORD INCLUSION CRITERIA ALTERED?
         BNZ   LISTFAST            YES, CANNOT AVOID I/O
         LTR   R0,R0               NO, CHECK RELATIVE LOCATION CHANGE
         BZ    LISTRDY             ALREADY THERE SO AVOID I/O
         BM    LISTFAST            HAVE TO GO UP -CHECK FOR "FASTPATH"
         CH    R0,PAGESIZE         SCROLLING DOWN MORE THAN A PAGE?
         BNH   LISTFINE            NO, SO GO DOWN SEQUENTIALLY
LISTFAST L     R0,LISTNUM          RESTORE TARGET TOP SCREEN NO
         TM    STATUS2,FASTREAD    IS "FASTPATH" AVAILABLE?
         BZ    LIST@               NO
         SLR   R1,R1               YES
         ST    R1,CHKPTBOT         ZERO CHECKPOINT TABLE
         XC    DEBLOCKS(12),DEBLOCKS
         C     R0,MAXPOINT         FURTHER THAN ANY MAN HAS GONE B4?
         BNH   *+8                 NO
         L     R0,MAXPOINT         YES, USE DISCRETION
*
         SRDL  R0,32               PREPARE LINE NUMBER FOR DIVIDE
         A     R1,BLKFACTR
         BCTR  R1,0
         D     R0,BLKFACTR         GET RELATIVE BLOCK NUMBER
         LR    R6,R1               SAVE FOR LATER
         SLR   R0,R0
         D     R0,BLKSATRK         GET TT IN R1, R IN R0
         LTR   R0,R0               ZERO REMAINDER?
         BNZ   LISTNOT0            NO
         BCTR  R1,0                YES, DECREMENT RELATIVE TRACK
         L     R0,BLKSATRK         CORRECT RECORD NUMBER
LISTNOT0 STH   R1,TTR              STORE RELATIVE TRACK NUMBER
         STC   R0,TTR+2            STORE RECORD NUMBER
         POINT (R4),TTR            POINT TO THE CHOSEN RECORD
         BCTR  R6,0
         MH    R6,BLKFACTR+2
         ST    R6,COUNT            SAVE PREVIOUS RECORD'S NUMBER
         B     LISTFILL            READ SOME RECORDS
LISTZIP  BCTR  R0,0                DIRECTLY ACCESS DATA IN STORAGE
         ST    R0,COUNT
         C     R0,DIVHICNT
         BNH   LISTFILL
         MVC   COUNT,DIVHICNT
         B     LISTFILL
LIST@    TM    STATUS8,ZIPD+ZIPF   PROCESSING A ZIP FILE?
         BNZ   LISTZIP             YES, DATA MUST BE CACHED
         LA    R15,CHKPTLN         LENGTH OF CHKPT ENTRY
         L     R1,CHKPTBOT
         TM    0(R1),X'80'         IS IT EOF?
         BZ    LISTCK              NO
         C     R1,CHKPTTOP         YES, IS DATA SET EMPTY?
         BE    PROMPT              YES
         SR    R1,R15              NO, BACK UP ONE ENTRY
LISTCK   C     R0,0(,R1)           DOES THIS BLOCK PRECEDE OUR RECORD?
         BH    LISTPNT             YES, GO POINT TO IT
         SR    R1,R15              NO, BACK UP ONE BLOCK ENTRY
         B     LISTCK
LISTPNT  L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         CLC   LISTNUM,DIRNUM(R7)  IS THE SCROLLING DIRECTION DOWN?
         BNH   LISTJUMP            NO, NEED TO POINT TO EARLIER DATA
         CLC   0(4,R1),DIRNUM(R7)  WOULD USING CHKPT BACK US UP?
         BNH   LISTFINE            YES, JUST READ DOWN SEQUENTIALLY
LISTJUMP MVC   COUNT,0(R1)
         ST    R1,CALLPARM+8       SAVE CHECKPOINT ENTRY ADDRESS
         ICM   R0,B'1111',$UCBAD   TALKING DIRECTLY TO PHYSICAL DEVICE?
         BNP   LISTFILL            NO, NO POINT IN A POINT
         TM    STATUS8,DIVFULL     DIV STORING EVERYTHING SO FAR?
         BZ    LISTFILL            YES, AVOID NEEDLESS FILE INTERACTION
         MVC   TTR,4(R1)           TTR OF PRIOR BLOCK
         XC    DEBLOCKS(12),DEBLOCKS
         TM    STATUS2,EOTAPE      END-OF-FILE FOR TAPE?
         BZ    LISTPTOK            NO, CONTINUE AS PLANNED
         MVI   CLOSED,X'80'        YES, REPOSITION FOR POINT
         CLOSE ((R4),REREAD),TYPE=T,MF=(E,CLOSED)
         NI    STATUS2,255-EOTAPE  REPOSITIONED AT START
LISTPTOK POINT (R4),TTR

LISTFILL BAL   R14,FILLHOLD        READ NEXT 20 OR MORE RECORDS

LISTFINE L     R7,HOLDTOP          GET ENTRY FOR TOP OF HOLD AREA
         TM    DIRLEN(R7),X'80'    IS EOF ON TOP OF SCREEN?
         BO    LISTRDY             YES, WE ARE FINISHED
         CLC   LISTNUM,DIRNUM(R7)  IS REQUESTED NUMBER AT TOP?
         BNH   LISTRDY             YES, WE ARE FINISHED
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    FILLSCR             YES
         MVC   DOWNAMT,FW1         DOWN 1
         BAL   R14,DOWNER
         B     LISTFINE
LISTRDY  TM    FINDSW,FACT         IS FIND ACTIVE?
         BO    FINDCONT            YES, CONTINUE WITH FIND
         CLC   LISTNUM,BOTNINES    WAS THIS A LIST 99999999?
         BE    BOTRET              YES, BRANCH
         B     FILLSCR
ERRMISS  MVC   MSG(MSG35L),MSG35   MISSING OPERAND
         B     BELPRMPT

************************************************************
*                                                          *
*         FIND                                             *
*                                                          *
************************************************************

FIND     DS    0H
         LA    R15,OPD4
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         NI    STATUS7,255-FNOT    DO FIND, NOT FINDNOT
FITORNOT TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BZ    FALLOFF             NO
         NI    STATUS7,255-FALL    YES, RESET 'ALL' STATUS
         OI    STATUS7,FANY        REMEMBER THAT IS WAS RESET
FALLOFF  LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, USE PREVIOUS STRING
         MVI   FINDSW,0            CLEAR FIND FLAGS
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,FINDCOL          RESET COLUMN
         LH    R5,4(,R15)          GET LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         TM    6(R15),QUOTED       QUOTED?
         BO    FINDDIFF            YES, CAN'T BE 'FIND *'
         CH    R5,HW1              NO, FIRST OPERAND LENGTH OF ONE?
         BNE   FINDDIFF            NO, CAN'T BE 'FIND *'
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?
         BE    FNDXLATD            YES, LEAVE THE STRING AS IS
FINDDIFF XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING
         LTR   R5,R5               IS IT NULL STRING?
         BZ    FINDNULL            YES, ERROR
         BCTR  R5,0
         STH   R5,STRINGL          SAVE LENGTH CODE
         EX    R5,FINDMVC
         NI    STATUS8,255-FPIC-FUOL       NOT PICTURE + CASE SENSITIVE
         TM    STATUS8,FCHR        CASE SENSITIVE SEARCH REQUIRED?
         BO    FCHARSET            YES, HONOUR CASE TYPED IN
         LA    R14,TABALPHA-2048   ADDRESS ALPHABETIC TABLE
         EX    R5,FINDALFT         ANY ALPABETICS IN STRING?
         BZ    FCHARSET            NO, USE CASE SENSITIVE FOR SPEED
         OI    STATUS8,FUOL        YES, SET CASE INSENSITIVE SEARCH
FCHARSET TM    MODE,ASCIISW        MAKE 'FIND' ARGUMENT ASCII?
         BZ    FNDXLATD            NO, NO TRANSLATION REQUIRED
         LA    R0,1(,R5)           YES, GET THE STRING LENGTH
         LA    R1,STRING           GET THE STRING ADDRESS
         XLATE (1),(0),TO=A        TRANSLATE CHARACTERS TO ASCII CODE
FNDXLATD DS    0H
         LA    R0,2                GET MAXIMUM OPERAND COUNT
         LA    R15,OPD2            POINT TO FIRST OPERAND DETAILS
FOPERLP  TM    6(R15),PRESENT      IS THERE ANOTHER OPERAND?
         BZ    FINDSAME            NO, GO COMMENCE SEARCHING
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINVFA            YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINVFA            YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   FNONUMOP            NO, BRANCH
         TM    FINDSW,FNUM         YES, NUMERIC OPERAND ALREADY DONE?
         BO    ERRINVFA            YES, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R1,R1               IS IT ZERO?
         BZ    ERRINVFA            YES, ERROR
         LH    R7,STRINGL          GET SEARCH STRING LENGTH CODE
         AR    R7,R1               DETERMINE ENDING COLUMN OF DATA
         CH    R7,RECSIZE          END OF STRING PAST END OF RECORD?
         BH    ERRINVFA            YES, ERROR
         STH   R1,FINDCOL          SAVE SEARCH COLUMN
         OI    FINDSW,FNUM         NUMERIC OPERAND NOW DONE
         B     FOPERNXT            PROCESS ANY OTHER OPERAND
FNONUMOP TM    FINDSW,FWRD         NON-NUMERIC OPERAND ALREADY DONE?
         BO    ERRINVFA            YES, ERROR
         TR    0(5,R14),KAPS       ENSURE UPPER CASE FOR FINDCHR
         LH    R1,4(,R15)          GET LENGTH
         CH    R1,HW4              FOUR-BYTE OPERAND?
         BNE   FWRD3CHK            NO, BRANCH
         CLC   =C'NEXT',0(R14)
         BE    FWRDX               PROCESS 'NEXT' REQUEST
         CLC   =C'PREV',0(R14)
         BE    FWRDB               PROCESS 'PREV' REQUEST
         CLC   =C'REST',0(R14)
         BE    FWRDR               PROCESS 'REST' REQUEST
         CLC   =C'LAST',0(R14)
         BNE   ERRINV              ERROR
         OI    FINDSW,FEND+FBAK    PROCESS 'LAST' REQUEST
         B     FWRDX
FWRDR    OI    STATUS7,FALL        PROCESS 'REST' REQUEST
         B     FWRDX
FWRDB    OI    FINDSW,FBAK         SEARCH DIRECTION IS BACKWARD
         STCM  R0,B'1100',FNDOFF   RESET LAST-FOUND COLUMN
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD
         MVC   FNDNUM,DIRNUM(R7)   SET LAST-FOUND RECORD NUMBER
         B     FWRDX
FWRD3CHK CH    R1,HW3              THREE-BYTE OPERAND?
         BNE   FWRD5CHK            NO, BRANCH
         CLC   =C'ALL',0(R14)
         BNE   ERRINV              ERROR
         OI    STATUS7,FALL        PROCESS 'ALL' REQUEST
         OI    FINDSW,FTOP         START SEARCH FROM START OF DATA
         B     FWRDX               START AS IF 'FIRST'
FWRD5CHK CH    R1,HW5              FIVE-BYTE OPERAND?
         BNE   ERRINV              NO, ERROR
         CLC   =C'FIRST',0(R14)
         BNE   ERRINV              ERROR
         OI    FINDSW,FTOP         PROCESS 'FIRST' REQUEST
FWRDX    OI    FINDSW,FWRD         NON-NUMERIC OPERAND NOW DONE
FOPERNXT LA    R15,8(,R15)         POINT TO NEXT POSSIBLE OPD
         BCT   R0,FOPERLP          PROCESS NEXT POSSIBLE OPERAND
FINDSAME DS    0H
         CLI   STRINGL,0           HAS A STRING BEEN ENTERED?
         BNE   FINDNULL            NO, ERROR
         NI    FINDSW,255-FVRT
         TM    STATUS7,FALL        'ALL' OR 'REST' REQUESTED?
         BNO   FINDACTV            NO, ACTIVATE CONVENTIONAL FIND
         TM    FINDSW,FTOP         'ALL' REQUESTED?
         BO    TOP                 YES, FILTER THE FIRST SCREENFUL
         SLR   R0,R0               NO, MUST BE 'REST'
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         L     R0,DIRNUM(,R7)      GET CURRENT LOCATION
         B     LISTAT              FILTER CURRENT SCREENFUL
FINDACTV OI    FINDSW,FACT         FIND NOW ACTIVE AND THAT'S A FACT
         TM    FINDSW,FTOP         SEARCH FROM TOP OF DATA?
         BO    FINDTOP             YES, BRANCH
         TM    FINDSW,FEND         SEARCH FROM END OF DATA?
         BO    FINDLAST            YES, BRANCH
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF FIRST HELD
         TM    STATUS7,FANY        WAS 'ALL' JUST RESET?
         BO    LISTAT              YES, SCREEN DIRECTORY IS INCOMPLETE
         LH    R15,CSRLOCN         GET CURSOR SCREEN ADDRESS
         LTR   R15,R15             IN DATA PART OF SCREEN?
         BZ    FINDCONT            NO, CAN'T BE SEARCH FROM CURSOR
         SLR   R14,R14             YES, PREPARE FOR DIVIDE
         D     R14,SCRNCOLS        GET CURSOR X AND Y COORDINATES
         SH    R15,HW4             TAKE HEADINGS INTO ACCOUNT
         L     R7,HOLDTOP          POINT TO TOP RECORD'S INFO
         A     R15,DIRNUM(,R7)     GET RECORD NUMBER OF CURSOR
         ST    R15,FNDNUM          START SEARCH FROM THIS RECORD
         LR    R1,R14              GET SCREEN COLUMN OFFSET
         BAL   R14,DSP2RECO        CONVERT IT TO RECORD OFFSET
         STH   R1,FNDOFF           START SEARCH FROM THIS OFFSET
FINDCONT LH    R6,FINDCOL
         TM    FINDSW,FBAK         PERFORMING BACKWARD SEARCH?
         BO    FINDBACK            YES
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF FIRST HELD
         ICM   R1,B'1111',FNDNUM   GET RECORD NUMBER WHERE LAST FOUND
         BNP   FINDSCR             NOT FOUND SO START WITH HELD RECORDS
         CR    R0,R1               ARE WE PAST LAST FOUND REC?
         BH    FINDSCR             YES, START WITH HELD RECORDS
         L     R14,HOLDEND
         L     R5,DIRNUM(,R14)     GET RECORD NUMBER OF LAST HELD
         CR    R1,R5               IS LAST FOUND REC ON SCREEN?
         BH    FINDSCR             NO, START WITH HELD RECORDS
FINDPREV C     R1,DIRNUM(,R7)      IS THIS RECORD WHERE LAST FOUND?
         BE    FINDPCOL            YES, BRANCH
         C     R7,HOLDEND          IS THIS LAST RECORD ON SCREEN?
         BE    FINDDOWN            SHOULD NOT HAPPEN
         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD
         B     FINDPREV
FINDPCOL L     R5,DIRREC(,R7)      POINT TO RECORD
         LTR   R6,R6               WAS A COLUMN SPECIFIED?
         BZ    FINDPOFF            NO, LOOK AT SAME RECORD
         LA    R0,1
         AH    R0,FNDOFF           GET LAST FOUND COLUMN
         CR    R0,R6               BEFORE ROW'S SEARCH COLUMN?
         BL    FINDSCR             YES, LOOK AT SAME RECORD
         C     R7,HOLDEND          IS THIS LAST RECORD ON SCREEN?
         BE    FINDDOWN            YES, BRANCH
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
         B     FINDSCR             GO EXAMINE RECORD
FINDPOFF AH    R5,FNDOFF           POINT TO LAST FOUND STRING
         LA    R5,1(,R5)           POINT PAST LAST FOUND STRING
         B     FINDSTR
FINDSBCM MVI   FINDSW,FACT+FTOP    PERFORM SEARCH FOR SUBCOMMAND HELP
         B     FINDTOP             START FROM THE TOP
FINDHELP MVI   FINDSW,FACT+FTOP    DO INITIAL SEARCH FOR HELP SECTION
         CLI   $SUBCOM,C' '        LOOKING FOR SUBCOMMAND HELP?
         BNE   FINDSECT            YES, CHECK SECTION REQUIREMENTS
         CLI   FILEKV,C'S'         COMMAND WITH SUBCOMMANDS?
         BE    FINDTOP             YES, START SEARCH
FINDSECT OC    HELKVS,HELKVS       ANY SPECIFIC HELP SECTION REQUESTED?
         BNZ   FINDTOP             YES, START SEARCH
         MVI   AKV+1,1             NO, ALL IS THE DEFAULT
FINDTOP  NI    FINDSW,255-FTOP     RESET 'FIRST' REQUEST FLAG
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         LA    R0,1
         L     R7,HOLDTOP          GET ENTRY FOR TOP OF HOLD AREA
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         C     R0,DIRNUM(,R7)      TOP OF DATA ON SCREEN?
         BNE   TOP                 NO, GO TO TOP OF DATA
         NI    FINDSW,255-FVRT     YES, NO VERTICAL SCROLLING YET
         TM    STATUS7,FANY        WAS 'ALL' JUST RESET?
         BO    TOP                 YES, RESET LINE EXCLUSION
         B     FINDCONT            CONTINUE WITH FIND
FINDLAST SLR   R0,R0
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         MVC   FNDNUM,BOTNINES     SET LAST-FOUND NUMBER LARGE
         L     R7,HOLDEND          GET SCREEN RECORD ENTRY
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         TM    DIRLEN(R7),X'80'    IS EOF ON THE SCREEN?
         BZ    BOTTOM              NO, GO TO BOTTOM OF DATA
         TM    STATUS7,FANY        WAS 'ALL' JUST RESET?
         BO    BOTTOM              YES, GO TO BOTTOM OF DATA
         NI    FINDSW,255-FVRT     YES, NO VERTICAL SCROLLING YET
         LH    R6,FINDCOL          LOAD ANY COLUMN SPECIFICATION
FINDBACK TM    FINDSW,FEND+FVRT    JUST BACK FROM BOTTOM BRANCH?
         BO    FINDBAK1            YES, SCROLL UP A RECORD FOR SEARCH
         TM    FINDSW,FVRT         BEEN HERE BEFORE?
         BO    FBKNUMOK            YES, SEARCH THIS RECORD
         NI    FINDSW,255-FEND     RESET 'LAST' REQUEST FLAG IF ON
         L     R7,HOLDEND          GET BOTTOM SCREEN RECORD DETAILS
         TM    DIRLEN(R7),X'80'    IS THIS EOF?
         BZ    FNDBKCHK            NO
         CLC   FNDNUM,DIRNUM(R7)   SEARCH BACKWARD FROM PAST EOF?
         BL    FNDBKCHK            NO, PERFORM NORMAL PROCESSING
         MVC   FNDNUM,DIRNUM(R7)   YES, MAKE IT FROM LAST DATA RECORD
         STCM  R6,B'1100',FNDOFF   RESET LAST-FOUND OFFSET
FNDBKCHK LTR   R6,R6               WAS A COLUMN SPECIFIED?
         BZ    FNDBKOFF            NO
         CH    R6,FNDOFF           YES, CURSOR AFTER COL ON THIS LINE?
         BH    FBKNUMLS            NO, CONSIDER THIS LINE SEARCHED
         B     FBKNUMOK            YES, START FROM THIS LINE
FNDBKOFF ICM   R0,3,FNDOFF         IS LAST-FOUND OFFSET ZERO?
         BNZ   FBKNUMOK            NO, SEARCH RECORD NUMBER FNDNUM
FBKNUMLS L     R0,FNDNUM           YES, RECORD NUMBER
         BCTR  R0,0                DECREMENT IT
         LTR   R0,R0               IS NEW NUMBER ZERO?
         BNP   FINDROOF            YES, REACHED TOP OF DATA
         ST    R0,FNDNUM           NO, SAVE IT
         MVC   FNDOFF,RECSIZE      MAKE FNDOFF HIGH
FBKNUMOK L     R7,HOLDTOP          GET FIRST SCREEN RECORD'S DETAILS
         TM    FINDSW,FVRT         SCROLLED UP A BIT FOR THIS RECORD?
         BZ    FBKNUMLP            NO, ASCERTAIN NEXT SEARCH RECORD
         MVC   FNDNUM,OPEND        YES, LOAD NEXT SEARCH RECORD
FBKNUMLP CLC   FNDNUM,DIRNUM(R7)   IS THIS THE RECORD TO SEARCH FROM?
         BL    FINDBAK1            NO, MUST SCROLL UP
         BE    FBAKSRCH            YES
         L     R1,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
         TM    DIRLEN(R1),X'80'    IS NEXT RECORD EOF?
         BO    FBAKSRCH            YES, SHOULDN'T HAPPEN
         LR    R7,R1               NO, NOW CONSIDER NEXT RECORD
         C     R7,HOLDEND          BOTTOM OF SCREEN?
         BE    FBAKSRCH            YES, FORCE THE SEARCH TO START HERE
         B     FBKNUMLP            NO, TRY NEXT RECORD FOR FIND START
FBAKSRCH LH    R14,STRINGL         GET SEARCH STRING LENGTH CODE
*        LH    R6,FINDCOL          LOAD ANY COLUMN SPECIFICATION
         LTR   R6,R6               WAS A COLUMN SPECIFIED?
         BNZ   FINDBCOL            YES, CHECK OUT THIS RECORD
         LH    R0,FNDOFF           NO, GET LAST-FOUND OFFSET
         L     R5,DIRLEN(,R7)      GET THIS RECORD'S LENGTH
         SH    R5,STRINGL          GET BIGGEST COLUMN TO SEARCH FIRST
         BNP   FINDBAK1            THIS RECORD IS TOO SHORT FOR A TEST
         BCTR  R5,0                GET BIGGEST OFFSET TO SEARCH FIRST
         CLC   FNDNUM,DIRNUM(R7)   LAST FOUND IN THIS RECORD?
         BNE   FBKOFFOK            NO
         CR    R5,R0               YES, GOING OVER OLD GROUND?
         BL    FBKOFFOK            NO
         LR    R5,R0               YES, GET LAST-FOUND OFFSET
         BCTR  R5,0                GET NEW STARTING OFFSET
FBKOFFOK A     R5,DIRREC(,R7)      POINT TO FIRST SEARCH ADDRESS
FBAKLOOP C     R5,DIRREC(,R7)      GONE BEYOND START OF RECORD?
         BL    FINDBAK1            YES, GO GET PREVIOUS RECORD
         L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         TM    STATUS7,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    FINDBNOT            YES
         BALR  R14,R15             LOOK FOR STRING
         BE    FOUND               GUESS WHAT
         BCT   R5,FBAKLOOP         DECREMENT POINTER AND RECOMPARE
         B     FINDBAK1            GO GET PREVIOUS RECORD
FINDBNOT BALR  R14,R15             LOOK FOR STRING
         BNE   FOUND               GUESS WHAT
         BCT   R5,FBAKLOOP         DECREMENT POINTER AND RECOMPARE
         B     FINDBAK1            GO GET PREVIOUS RECORD
FINDBCOL LR    R5,R6               GET COLUMN TO BE EXAMINED
         BCTR  R5,0                GET OFFSET TO BE EXAMINED
         A     R5,DIRREC(,R7)      POINT TO COMPARE ADDRESS
         L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         TM    STATUS7,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    FINDNTBC            YES
         BALR  R14,R15             LOOK FOR STRING
         BE    FOUND               GUESS WHAT
         B     FINDBAK1            JUMP OVER FINDNOT PROCESSING
FINDNTBC DS    0H                  FINDSMF-NOT NOT SUPPORTED
         EX    R14,FINDCLC         LOOK FOR NOT STRING AT THE COLUMN
         BNE   FOUND               GUESS WHAT
FINDBAK1 TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    FNDSCRLX            YES
         NI    FINDSW,255-FEND     RESET 'LAST' REQUEST FLAG IF ON
         L     R0,DIRNUM(,R7)      YES, GET THIS RECORD'S NUMBER
         LR    R1,R7               REMEMBER CURRENT RECORD DETAILS
         L     R7,HOLDTOP          POINT TO TOP SCREEN LINE DETAILS
         CR    R7,R1               LOOKING AT THE TOP SCREEN RECORD?
         BNE   FNDPRVLP            NO, PREVIOUS RECORD IS ON SCREEN
         L     R0,DIRNUM(,R7)      YES, GET THIS RECORD'S NUMBER
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         MVC   FNDOFF,RECSIZE      ALLOW SEARCH OF ALL OF PREVIOUS REC
         BCT   R0,FINDBKPG         VERIFY THAT PREVIOUS RECORDS EXIST
         B     FINDROOF            HIT THE ROOF SO CAN'T GO UP MORE
FINDBKPG ST    R0,OPEND            SAVE NEXT RECORD NUMBER TO SEARCH
         A     R0,FW1              RESTORE LAST SEARCHED RECORD NUMBER
         SH    R0,PAGESIZE         SCROLL UP A WHOLE PAGE FOR LESS I/O
         BP    LISTAT              GO GET MORE PREVIOUS RECORDS
         LA    R0,1                LESS THAN A PAGE LEFT SO GO TO TOP
         B     LISTAT
FNDPRVLP C     R1,DIRNXT(,R7)      POINTING TO PREVIOUS RECORD?
         BE    FBAKSRCH            YES, EXAMINE IT
         L     R7,DIRNXT(,R7)      NO, GO DOWN ONE
         B     FNDPRVLP            GO SEE ABOUT THIS ONE
FINDCLC  CLC   0(0,R5),STRING      <<< EXECUTED >>>
FINDMVC  MVC   STRING(0),0(R14)    <<< EXECUTED >>>
FINDALFT TRT   STRING(0),2048(R14) <<< EXECUTED >>>
FINDXTRT TRT   0(0,R14),HEXTEST    <<< EXECUTED >>>
FINDXTR  TR    0(0,R14),HEXDATA    <<< EXECUTED >>>
FINDSCR  TM    DIRLEN(R7),X'80'    ARE WE AT EOF?
         BO    FINDBOT             YES, BRANCH
         L     R5,DIRREC(,R7)      POINT TO FIRST BYTE TO EXAMINE

         DS    0H                  ADDITIONAL CODE FOR HEL POSITIONING
         TM    STATUS6,HELNEWS     POSITIONING FOR HELP SUBCOMMAND?
         BZ    NOTHELNS            NO
         CLI   0(R5),C'='          HELP SECTION HEADER?
         BNE   FINDNEXT            NO
         LH    R1,$SUBLEN          YES, GET SUBCOMMAND NAME LENGTH CODE
HELNSTST EX    R1,HELNSCLC         IS THIS THE RIGHT SUBCOMMAND?
         BE    GOTHELNS            YES
HELNSNXT LA    R5,1(,R5)           NO, POINT PAST '='
HELNSEQU LA    R5,1(,R5)           POINT TO NEXT CHARACTER
         CLI   0(R5),C' '          IS IT A BLANK?
         BE    FINDNEXT            YES, WRONG SUBCOMMAND HEADER
         CLI   0(R5),C'='          NAME INDICATOR?
         BNE   HELNSEQU            NO, KEEP LOOKING FOR EQUALS SIGN
         B     HELNSTST            YES, GO TEST FOR CORRECT NAME
HELNSCLC CLC   1(0,R5),$SUBCOM     <<< EXECUTED >>>
GOTHELNS LA    R1,2(R1,R5)         POINT PAST MATCHED SUBCOMMAND
         CLI   0(R1),C' '          REALLY RIGHT SUBCOMMAND?
         BE    GOTHELOK            YES, PROCEED
         CLI   0(R1),C'='          REALLY RIGHT SUBCOMMAND?
         BE    GOTHELOK            YES, PROCEED
         LH    R1,$SUBLEN          NO, RESTORE SUBCMD NAME LENGTH CODE
         B     HELNSNXT            FOUND LONGER NAME WITH SAME PREFIX
GOTHELOK NI    STATUS6,255-HELNEWS NO LONGER SEARCHING FOR SUBCOMMAND
         LA    R0,1                SHOW FROM AFTER SUBCOMMAND HEADER
         A     R0,DIRNUM(,R7)      GET NEXT RECORD NUMBER
         ST    R0,$SUBLINE         SAVE TOP SUBCMD DATA LINE NUMBER
         TM    STATUS6,HELFF       FIRST FIND UNDER HEL ACTIVE?
         BO    FINDNEXT            YES, LOOK FOR RIGHT SECTION HEADER
         NI    FINDSW,255-FACT     NO, FIND IS NO LONGER ACTIVE
         B     LISTAT              SHOW THIS AS THE TOP LINE
NOTHELNS TM    STATUS6,HELFF       FIRST FIND UNDER HEL ACTIVE?
         BZ    NOTHELFF            NO
         CLI   0(R5),C'='          HELP SUBCOMMAND HEADER?
         BE    FINDBOT             YES, SAME AS END-OF-DATA
         CLI   0(R5),C')'          HELP SECTION HEADER?
         BNE   FINDNEXT            NO
         CLI   1(R5),C')'          OPERAND OR MESSAGE IDENTIFIER?
         BE    FFOP                YES
         CLI   1(R5),C'I'          INSERT HELP MEMBER CONTROL?
         BE    FINDNEXT            YES, IGNORE IT
         CLI   AKV+1,1             ALL REQUESTED?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         CLI   1(R5),C'F'          FUNCTION?
         BE    FFF                 YES
         CLI   1(R5),C'X'          SYNTAX?
         BE    FFX                 YES
         CLI   1(R5),C'O'          OPERANDS?
         BE    FFO                 YES
         CLI   1(R5),C'M'          MSGID?
         BE    FFM                 YES
         CLI   1(R5),C'P'          POSITIONAL?
         BE    FFP                 YES
         CLI   1(R5),C'S'          SUBCOMMANDS?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
         CLI   FILEKV,C'S'         COMMAND WITH SUBCOMMANDS?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
FFLOCATE NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         NI    STATUS6,255-HELFF   NO LONGER DOING INITIAL POSITIONING
         L     R0,DIRNUM(,R7)      GET THIS RECORD NUMBER
         B     LISTAT              SHOW THIS AS THE TOP LINE
FFF      CLI   FKV+1,1             FUNCTION REQUESTED?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         B     FINDNEXT            NO, CONTINUE SEARCH
FFX      CLI   SKV+1,1             SYNTAX REQUESTED?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         B     FINDNEXT            NO, CONTINUE SEARCH
FFM      CLI   MKV+1,1             MSGID REQUESTED?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
         B     FFMO                YES, GO TO COMMON CODE
FFO      CLI   PKV+1,1             POSITIONAL REQUESTED?
         BE    FFPO                YES, SHOW OPERANDS IF NOT FOUND
         CLI   OKV+1,1             OPERANDS REQUESTED?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
FFMO     CLI   $OPERAND,C' '       YES, ANY SPECIFIC OPERAND(S)?
         BE    FFLOCATE            NO, SHOW THIS LINE AS THE TOP
FFPO     MVC   $SUBLINE,DIRNUM(R7) YES, SHOW THIS AS TOP IF NOT FOUND
         B     FINDNEXT            CONTINUE SEARCH
FFOP     LA    R1,$OPERAND         POINT TO FIRST OPERAND IN LIST
FFOPLP   CLI   0(R1),C' '          ANY OPERAND?
         BE    FINDNEXT            NO, END OF SUPPLIED OPERAND LIST
         LA    R14,20(,R1)         YES, POINT PAST IT
         LA    R0,19               GET MAXIMUM OPERAND LENGTH CODE
FFOPBL   BCTR  R14,0               SCAN
         CLI   0(R14),C' '             FOR
         BNE   FFOPLN                     LAST
         BCT   R0,FFOPBL                      NON-BLANK
FFOPLN   LR    R14,R0              COPY LENGTH CODE
         EX    R14,FFOPC           THIS OPERAND?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         LA    R1,20(,R1)          NO, POINT TO NEXT ENTRY
         B     FFOPLP              CHECK NEXT OPERAND ENTRY
FFOPC    CLC   2(0,R5),0(R1)       <<< EXECUTED >>>
FFP      CLI   PKV+1,1             POSITIONAL REQUESTED?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
         L     R0,HELPOS#          YES, GET THE POSITIONAL NUMBER
         BCTR  R0,0                DECREMENT REMAINING COUNT
         ST    R0,HELPOS#          SAVE IT
         LTR   R0,R0               ANY TO GO?
         BNP   FFLOCATE            NO, SHOW THIS LINE AS THE TOP
         B     FINDNEXT            YES, CONTINUE SEARCH

NOTHELFF DS    0H                  STANDARD 'FIND' CODE RESUMES HERE
*        LH    R6,FINDCOL          LOAD ANY COLUMN SPECIFICATION
         LTR   R6,R6               WAS A COLUMN SPECIFIED?
         BZ    FINDSTR             NO, BRANCH
         AR    R5,R6               YES, POINT TO COLUMN PLUS 1
         BCTR  R5,0                POINT TO COLUMN
         TM    FINDSW,FSMF         WAS IT A 'FINDSMF' COMMAND?
         BZ    FNDSMFOK            NO
         CLC   0(9,R5),=C'MFEOFMARK'   SMFEOFMARK?
         BE    FSMFEOF             YES, TERMINATE FINDSMF SEARCH
FNDSMFOK LH    R14,STRINGL
         L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         TM    STATUS7,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    FINDNOTS            YES
         BALR  R14,R15             LOOK FOR STRING
         BE    FOUND
         B     FINDICHK            JUMP OVER FINDNOT PROCESSING
FINDNOTS BALR  R14,R15             LOOK FOR STRING
         BNE   FOUND
FINDICHK TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    FNDSCRLX            YES
         B     FINDNEXT            NO
FSMFEOF  DS    0H
         MVC   MSG(MSG30L),MSG30   END OF SMF RECORDS REACHED
BELFILSC OI    STATUS7,BELL        SOUND BELL FOR ERROR MESSAGE
         B     FILLSCR
FINDSTR  L     R0,DIRLEN(,R7)      GET LENGTH OF RECORD
*        C     R0,SAVLRECL         IS RECORD TRUNCATED?
*        BNH   *+8                 NO, SKIP NEXT INSTR
*        L     R0,SAVLRECL         YES, USE TRUNCATED LENGTH
         L     R1,DIRREC(,R7)      GET ADDRESS OF RECORD
         AR    R0,R1               POINT PAST LAST BYTE OF RECORD
         LH    R14,STRINGL         GET LENGTH CODE OF STRING
         AR    R5,R14              POINT TO LAST BYTE TO BE COMPARED
         SR    R0,R5               GET NUMBER OF COMPARISONS
         BNP   FINDNEXT            STRING TOO LONG FOR REMAINING TEXT
         SR    R5,R14              PUT STRING ADDRESS BACK
         TM    STATUS7,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    FINDNOTC            YES
FINDCOMP L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         BALR  R14,R15             COMPARE STRING TO DATA
         BE    FOUND               MATCH FOUND
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    FNDSCRLX            YES
         LA    R5,1(,R5)           INCREMENT DATA POINTER
         BCT   R0,FINDCOMP         GO COMPARE AGAIN
         B     FINDNEXT            JUMP OVER FINDNOT PROCESSING
FINDNOTC L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         BALR  R14,R15             COMPARE STRING TO DATA
         BNE   FOUND               MISMATCH FOUND
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    FNDSCRLX            YES
         LA    R5,1(,R5)           INCREMENT DATA POINTER
         BCT   R0,FINDNOTC         GO COMPARE AGAIN
FINDNEXT C     R7,HOLDEND          WAS THAT LAST HELD RECORD?
         BE    FINDDOWN            YES, BRANCH
         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD
         B     FINDSCR             GO PROCESS NEXT RECORD
FINDBOT  DS    0H
         TM    STATUS6,HELNEWS     POSITIONING FOR SUBCOMMAND?
         BO    FINDSBOT            YES
         TM    STATUS6,HELFF       INITIAL POSITIONING FOR HEL?
         BO    FINDHBOT            YES
         MVC   MSG(MSG32L),MSG32   BOTTOM OF DATA REACHED
         OI    FINDSW,FTOP         SEARCH FROM TOP OF DATA NEXT TIME
         B     BELFILSC
FINDSBOT MVC   MSG(MSG46L),MSG46   HELP FOR SUBCOMMAND NOT FOUND
         NI    STATUS6,255-HELNEWS-HELPARS   SKIP OTHER HELP PROCESSING
         B     FINDHBEL
FINDHBOT MVC   MSG(MSG45L),MSG45   HELP SECTION NOT FOUND
         ICM   R0,15,$SUBLINE      LOOKING FOR PARTICULAR OPERAND(S)?
         BZ    FINDHBEL            NO, HAVE CORRECT MESSAGE
         MVC   MSG(MSG47L),MSG47   HELP FOR OPERAND(S) NOT FOUND
FINDHBEL OI    STATUS7,BELL        SOUND BELL FOR ERROR MESSAGE
         NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         NI    STATUS6,255-HELFF   NO LONGER DOING INITIAL POSITIONING
         ICM   R0,15,$SUBLINE      LOOKING AT SUBCOMMAND?
         BZ    TOP                 NO, DISPLAY FROM TOP OF HELP MEMBER
         B     LISTAT              YES, DISPLAY FROM TOP OF SUBCMD HELP
FINDROOF DS    0H
         MVC   MSG(MSG44L),MSG44   TOP OF DATA REACHED
         OI    FINDSW,FEND         SEARCH FROM BOTTOM OF DATA NEXT TIME
         B     BELFILSC
FINDDOWN DS    0H
         L     R7,HOLDEND
         TM    DIRLEN(R7),X'80'    ARE WE AT EOF?
         BO    FINDBOT             YES, BRANCH
         MVC   DOWNAMT,FW1         DOWN 1
         BAL   R14,DOWNER          RETURNS WITH NEW HOLDEND IN R7
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         B     FINDSCR
FINDNULL NI    STATUS7,255-FALL    RESET 'ALL' STATUS
         MVC   MSG(MSG33L),MSG33   STRING NOT SPECIFIED
         B     BELPRMPT
ERRINVFA NI    STATUS7,255-FALL    RESET 'ALL' STATUS
ERRINV   MVC   MSG(MSG34L),MSG34   INVALID OPERAND
         B     BELPRMPT
FOUND    TM    FINDSW,FSMF         IS THIS A FINDSMF COMMAND?
         BZ    FOUNDOK             NO, DON'T CHECK SMF SUBTYPE
         CLI   SMFSBTYP,X'FF'      YES, LOOKING FOR A SUBTYPE?
         BE    FOUNDOK             NO, DON'T CHECK SMF SUBTYPE
*        BCTR  R5,0                YES, POINT TO SMF FLAG BYTE
*        TM    0(R5),X'C2'         SUBSYSID+SUBTYPES+OS/VS2?
*        LA    R5,1(,R5)           POINT BACK TO SMF RECORD TYPE
*        BNO   8(,R5)              NO, CONTINUE SEARCH
         L     R1,FSTYPADR         POINT TO SUBTYPE OFFSET TABLE
         SLR   R0,R0
         IC    R0,0(,R5)           GET SMF RECORD TYPE
         ALR   R1,R0               POINT TO OFFSET FOR THIS TYPE
         IC    R0,0(,R1)           GET THE OFFSET
         LR    R1,R0               COPY IT
         ALR   R1,R5               POINT TO SUBTYPE
         CLC   0(1,R1),SMFSBTYP+1  YES, SUBTYPE MATCH?
         BNE   4(,R14)             NO, CONTINUE SEARCH
FOUNDOK  MVC   MSG(MSG31L),MSG31   FOUND IN LINE XXXXXXXXX COL XXXXX
         MVC   FNDNUM,DIRNUM(R7)   SAVE RECORD NUMBER
         S     R5,DIRREC(,R7)      GET OFFSET TO FOUND LOCATION
         STH   R5,FNDOFF           SAVE OFFSET
         LA    R15,1(,R5)          MAKE IT COLUMN NUMBER
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+30(5),DOUBLE+5(3)
         L     R15,FNDNUM
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+16(9),DOUBLE+3(5)  9 DIGIT LINE NUMBER
         LH    R15,MSG             GET THE LENGTH OF MSG31
FNDCOLLP CLI   MSG+30,C'0'         LEADING ZERO IN COLUMN?
         BNE   FNDROWLP            NO, PROCEED
         MVC   MSG+30(5),MSG+31    YES, SHUFFLE UP TO SUPPRESS IT
         BCT   R15,FNDCOLLP        LOOP UNTIL NON-ZERO
FNDROWLP CLI   MSG+16,C'0'         LEADING ZERO IN ROW?
         BNE   FNDMSGOK            NO, PROCEED
         MVC   MSG+16(20),MSG+17   YES, SHUFFLE UP TO SUPPRESS IT
         BCT   R15,FNDROWLP        LOOP UNTIL NON-ZERO
FNDMSGOK STH   R15,MSG             SAVE EDITED MESSAGE LENGTH
         NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         TM    FINDSW,FSMF         WAS IT A 'FINDSMF' COMMAND?
         BO    FNDSCRLX            YES, DON'T SCROLL LEFT
         CLC   FNDOFF,OFFSET       WAS IT FOUND BEFORE 1ST COL?
         BE    FNDSCRLX            NO, AT FIRST COLUMN ALREADY
         LH    R14,STRINGL         GET LENGTH CODE OF FOUND DATA
         BL    FNDSCRL             YES, HAVE TO SCROLL LEFT
         AH    R14,FNDOFF          FIND END OF FOUND STRING
         CH    R14,OFFEND          WAS IT FOUND AFTER LAST COL?
         BL    FNDSCRLX            NO, SO COMPLETELY VIEWABLE
FNDSCRL  ICM   R14,B'0011',FNDOFF  BASIS FOR NEW OFFSET
         BZ    *+6                 ZERO SO HAVE NEW TARGET
         BCTR  R14,0               LEFT ONE COL FOR GOOD LUCK
         LH    R15,OFFEND
         SH    R15,OFFSET          GET EFFECTIVE SCREEN WIDTH
         STH   R14,OFFSET          PRELIMINARY NEW OFFSET
         AR    R14,R15             ADD SCREEN WIDTH
         CH    R14,RECSIZE         LONGER THAN RECSIZE?
         BNH   FNDSCRLX            NO, SCROLLING CALC ALL DONE
         LH    R14,RECSIZE         GET MAX RECORD SIZE
         SR    R14,R15             SUBTRACT SCREEN WIDTH
         BNM   *+6                 NON-NEGATIVE IS OKAY
         SLR   R14,R14             MAKE NEGATIVE OFFSET ZERO
         STH   R14,OFFSET          THAT'S IT
FNDSCRLX DS    0H                  END OF LEFT/RIGHT FOR FIND
*        NI    STATUS4,255-FLAGI   CLEAR ATTENTION FLAG
         TM    STATUS4,FLAGI       ATTENTION FLAG SET?
         BO    FILLSCR             YES, STOP PRONTO
         TM    FINDSW,FVRT         ANY VERTICAL SCROLLING?
         BZ    FILLSCR             NO
         TM    FINDSW,FBAK         SEARCHING BACKWARDS?
         BZ    FINDLN0             NO
         ICM   R0,15,FNDNUM        YES, GET RECORD NUMBER OF TEXT
         BNP   TOP                 BYPASS INVALID NUMBER FOR LISTAT
         BCT   R0,LISTAT           MAKE IT THE SECOND LINE
         B     FILLSCR             DON'T SCROLL UP FOR FIRST RECORD
FINDLN0  LH    R6,PAGESIZE
         C     R6,FNDNUM           FOUND TEXT IN LAST HELD RECORD?
         BNH   FINDLN1             YES, GO DOWN PAGESIZE MINUS 2
         L     R6,FNDNUM           NO, GO DOWN RECORD-NUMBER MINUS 2
FINDLN1  SH    R6,HW2
         BNP   FILLSCR             LEAVE AT TOP FOR RECORDS 1 AND 2
FINDLN2  LA    R1,1
         ST    R1,DOWNAMT
         BAL   R14,DOWNER
         BCT   R6,FINDLN2
         B     FILLSCR

**********************************************************************
*                                                          *         *
*         CONVERT DISPLAY OFFSET TO RECORD OFFSET          *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************

DSP2RECO TM    MODE,MODEX          IN HEXADECIMAL MODE?
         BZ    *+8                 NO
         SRL   R1,1                YES, HALVE APPARENT SCREEN OFFSET
         AH    R1,OFFSET           GET OFFSET INTO RECORD
         TM    MODE,FMTSW          IN GENERAL FORMATTING MODE?
         BNOR  R14                 NO, RETURN
         TM    MODE,MODEX          IN HEXADECIMAL MODE?
         BOR   R14                 YES, SO CAN'T BE FORMATTING, RETURN
         STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R14,FMTAREA         POINT TO FORMATTING DYNAMIC AREA
         ST    R14,8(,R13)         CHAIN SAVE AREAS
         ST    R13,4(,R14)
         LR    R13,R14             POINT TO NEW SAVE AREA
         USING @FMTAREA,R13
         ICM   R7,15,LEFTFEL       POINT TO LEFT-MOST FEL
         BNP   DSP2RECX            INVALID SO RIGHT OF RIGHT-MOST ITEM
         L     R8,LEFTFELO         LOAD ITS RECORD OFFSET
         SH    R1,OFFSET           GET SCREEN OFFSET AGAIN
         L     R0,FMTFELAD         POINT TO FIRST UNUSED FEL
D2ROLOOP ICM   R14,3,FELDSPLN(R7)  ZERO DISPLAY LENGTH?
         BZ    D2RONEXT            YES, IGNORE THIS FEL
         LH    R6,FELDSPOF(,R7)    GET THE ITEM SCREEN DISPLAY OFFSET
         AH    R6,FELDSPLN(,R7)    ADD THE ITEM DISPLAY LENGTH
         CR    R1,R6               WAS CURSOR IN THIS ITEM "COLUMN"
         BL    D2ROITEM            YES
         AH    R8,FELSYMLN(,R7)    GET RECORD OFFSET OF NEXT ITEM
D2RONEXT LA    R7,FELSIZE(,R7)     POINT TO THE NEXT FEL
         CR    R7,R0               WAS THAT THE LAST FEL?
         BL    D2ROLOOP            NO, CONTINUE
         LR    R1,R8               YES, GET LATEST OFFSET
         B     DSP2RECX            USE IT
D2ROITEM SH    R1,FELDSPOF(,R7)    GET OFFSET INTO ITEM
         TM    FELSYMFG(R7),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SRL   R1,1                YES, HALVE BYTES-INTO-ITEM
         TM    FELSYMFG(R7),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SRL   R1,2                YES, QUARTER BYTES-INTO-ITEM
         CH    R1,FELSYMLN(,R7)    LONGER INTO ITEM THAN ITEM SIZE?
         BNH   *+8                 NO
         LH    R1,FELSYMLN(,R7)    YES, USE ITEM SIZE
         AR    R1,R8               GET RECORD OFFSET
         DROP  R13                 @FMTAREA
DSP2RECX L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         ST    R1,24(,R13)         UPDATE THE R1 SLOT
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER

************************************************************
*                                                          *
*         MEMBER                                           *
*                                                          *
************************************************************

MEMBERP  DS    0H
         TM    DCBDSORG,X'02'      USING BPAM DCB?
         BZ    MEMPDS              NO, BRANCH
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRMISS             YES, ERROR
         CH    R1,HW8              IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         MVC   BLDLNAME,BLANKS
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,MEMMVC
TOPOFMEM BLDL  (R4),BLDL
         NI    STATUS6,255-HELNEWM NEW HELP MEMBER SELECTION NOW DONE
         LTR   R15,R15
         BNZ   MEMERR
         TM    STATUS8,SCODE       'S' DIRECTORY LIST SELECTION?
         BNO   SELMEMOK            NO, DO NOT COMPARE BLDL RESULTS
         NI    STATUS8,255-SCODE   YES, RESET FLAG
         CLC   BLDLCNCT,MSGDSN+3   MEMBER IN SAME DATA SET?
         BE    SELMEMOK            YES, SELECTED MEMBER IS GOOD
         BH    MEMERR              NO, NOT FOUND IN THAT DATA SET
         MVC   BLDLTTRP(54),MSGDSN NO, FETCH DATA FROM LATER DATA SET
SELMEMOK NI    STATUS,255-STNOMEM  MEMBER FOUND
         MVC   $MEMBER,BLDLNAME    UPDATE CURRENT MEMBER NAME
         TM    STATUS6,HELNEWS     NEW SUBCOMMAND NAME ALSO SUPPLIED?
         BO    *+10                YES
         MVC   $SUBCOM,BLANKS      NO, RESET HELP SUBCOMMAND NAME
         L     R1,CHKPTTOP
         MVC   4(4,R1),BLDLTTRP    COPY TTR
         MVC   TTR,BLDLTTRP        TTR OF FIRST BLOCK
         FIND  (R4),TTR,C          POINT TO THE NEW MEMBER'S DATA
         MVC   DSNAIM(46),$DSNAME
         SLR   R15,R15
         ICM   R15,1,TTR+3         GET CONCATENATION NUMBER
         STH   R15,$CONCAT         REMEMBER IT FOR MEMBER LIST
         BZ    NOCONCAT
         CLI   ARLRCODE,0          WERE ALL JFCBS READ?
         BNE   USEDDNAM            NO
         ICM   R1,B'1111',ARLAREA  POINT TO FIRST RETRIEVED JFCB
         BZ    USEDDNAM            THERE ARE NONE (BACK LEVEL DFP)
NEXTJFCB BCT   R15,JFCBLOOP        CHAIN THROUGH JFCBS
         B     GOTJFCB             NOW POINTING TO CORRECT JFCB
JFCBLOOP AH    R1,0(,R1)           POINT TO NEXT JFCB
         B     NEXTJFCB            PROCESS IT
GOTJFCB  MVC   DSNAIM+2(44),4(R1)  COPY DATA SET NAME FROM JFCB
         LA    R0,44               GET MAXIMUM DATA SET NAME LENGTH
         LA    R1,DSNAIM+45        POINT TO LAST DATA SET NAME CHAR
CNCTLNLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   GOTDSNLN            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,CNCTLNLP         DECREMENT LENGTH AND TEST PREVIOUS
GOTDSNLN STH   R0,DSNAIM           SAVE DATA SET NAME LENGTH
         B     NOCONCAT            SKIP DDNAME HEADING CODE
USEDDNAM DS    0H
         MVC   DSNAIM(10),$DDNAML  SHOW DDNAME INSTEAD OF DSNAME
         CVD   R15,DOUBLE          APPEND
         OI    DOUBLE+7,X'0F'       CONCAT     ENSURE $DDNAME IS NOT
         LH    R15,$DDNAML           NUMBER                   CORRUPTED
         SH    R15,HW4                TO DDNAME
         LA    R15,DSNAIM+2(R15)        SO IT
         UNPK  1(3,R15),DOUBLE+6(2)      BECOMES
         MVI   0(R15),C'+'                DDNAME+NNN
NOCONCAT DS    0H
         XC    DEBLOCKS(12),DEBLOCKS
         SLR   R0,R0
         ST    R0,CHKPTBOT         ZERO CHKPT TABLE
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,COUNT            RESET LOGICAL RECORD COUNT
         ST    R0,KOUNT            RESET BYTE COUNT
         ST    R0,MAXPOINT         RESET FURTHEST RECORD READ
         MVI   SYNADSW,X'00'       RESET SYNAD ERROR FLAG
         TM    MODE,OFFLDSW        HERE TO OFFLOAD?
         BO    MEMOFFLD            YES
         NI    STATUS7,255-FALL    RESET 'ALL' STATUS
         BAL   R14,FREEHSE         FREE ANY ALLOCATED HSE STORAGE AREAS
         ICM   R15,B'1111',DIVREG1 DIV AVAILABLE?
         BNP   NEWNAME             NO
         LA    R0,12               YES, GET ENTRY CODE (PAGE RELEASE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         B     NEWNAME
MEMOFFLD L     R7,=A(MEMRDWRT)     POINT TO OFFLOAD ROUTINE
         BR    R7                  JUST READ AND WRITE RECORDS
MEMMVC   MVC   BLDLNAME(0),0(R14)  <<< EXECUTED >>>
MEMERR   TM    MODE,OFFLDSW        HERE TO OFFLOAD?
         BO    EXITRC              YES, JUST RETURN
         NI    STATUS6,255-HELFF-HELPARS     SKIP OTHER HELP PROCESSING
         CH    R15,HW4
         BNE   MEMERR2
         MVC   MSG(MSG36L),MSG36   MEMBER NOT FOUND
         B     MEMERRX
MEMERR2  MVC   MSG(MSG37L),MSG37   BLDL FAILED
MEMERRX  TM    STATUS,STNOMEM      LOOKING AT A MEMBER?
         BO    NOCONCAT            NO, DO A BIT OF RESETTING
         B     BELPRMPT
MEMPDS   MVC   MSG(MSG38L),MSG38   NOT PARTITIONED
         B     BELPRMPT

************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT DATA TO HEX                *
*                                                          *
************************************************************

HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER

HEXTAB   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE

**********************************************************************
*                                                          *         *
*         EXTRACT ICF COMPONENT DETAILS FROM VVDS          *  GP@P6  *
*                                                          *  04/88  *
**********************************************************************

VVDSSCAN BAL   R14,GET             GET A VVDS RECORD
         LTR   R2,R2               END-OF-FILE?
         BZ    END                 YES, DETAILS NOT FOUND - VVDS ERROR
         CLI   4(R2),C'Z'          NO, IS IT A PRIMARY VVR HEADER?
         BNE   VVDSSCAN            NO, GET THE NEXT RECORD
         LH    R1,$DSNAME          YES, GET LENGTH CODE FOR COMPARE
         EX    R1,VVDSCMPR         PRIMARY VVR FOR CORRECT COMPONENT?
         BNE   VVDSSCAN            NO, GET THE NEXT RECORD
         MVC   DSORGTYP,5(R2)      YES, COPY VVRFLAG
         NI    DSORGTYP,VVRCOMTP   JUST KEEP COMPONENT TYPE (D/I)
         LA    R1,2                COUNT VVR LENGTH FIELD
         AH    R1,2(,R2)           ADD LENGTH OF HEADER CELL
VVRLOOP  LA    R6,0(R1,R2)         POINT TO NEXT CELL
         CLI   2(R6),X'60'         AMDSB CELL?
         BE    GOTAMDSB            YES, GO EXTRACT USEFUL DATA
         CLI   2(R6),X'23'         VOLUME INFORMATION CELL?
         BE    GOTVICEL            YES, GO EXTRACT USEFUL DATA
VVRNEXT  SLR   R15,R15             NO
         ICM   R15,3,0(R6)         GET LENGTH OF THIS CELL
         AR    R1,R15              ACCUMULATE LENGTH
         CH    R1,0(,R2)           SCANNED ENTIRE VVR?
         BNL   END                 YES, TERMINATE VVDS SCAN
         B     VVRLOOP             NO, PROCESS NEXT VVR
VVDSCMPR CLC   CMDAREA+1(0),10(R2) <<< EXECUTED >>>
GOTAMDSB MVC   AMATR,3(R6)         COPY ATTRIBUTE FLAG BYTE
         MVC   AMKEY,8(R6)         COPY RECORD KEY OFFSET AND LENGTH
         MVC   AMCIV(8),22(R6)     COPY CISIZE AND MAXIMUM RECORD SIZE
         MVC   AMNLR,62(R6)        COPY THE LOGICAL RECORD COUNT
         MVC   AMASP,82(R6)        COPY THE FREE SPACE BYTE COUNT
         B     VVRNEXT             NOW HAVE REQUIRED DATA FROM CELL
GOTVICEL MVC   AMBLKSZ,19(R6)      COPY BLOCKSIZE
         MVC   AMCASZ,24(R6)       COPY TRACKS PER CA (ASSUME < 256)
         B     VVRNEXT             NOW HAVE REQUIRED DATA FROM CELL

************************************************************
*                                                          *
*         SUBROUTINE TO GET A LOGICAL RECORD               *
*                                                          *
************************************************************

*
*               INPUT
*                R4        -  DCB ADDRESS
*                CHKPTTOP  -  TOP OF CHECKPOINT TABLE
*                CHKPTBOT  -  BOTTOM OF CHECKPOINT TABLE, ZERO 1ST TIME
*                COUNT     -  LAST LOGICAL RECORD NUMBER READ
*                BLOCKPTR  -  ADDRESS OF BUFFER
*                DEBLOCKS  -  DEBLOCKING INFO (ZEROS FIRST TIME)
*                SPANPTR   -  ADDRESS OF AREA TO COMBINE
*                             SPANNED RECORD SEGMENTS
*
*               OUTPUT
*                 R1 CONTAINS LENGTH OF RECORD (OR -1 IF END-OF-FILE)
*                 R2 CONTAINS ADDRESS OF RECORD (OR 0 IF END-OF-FILE)
*
GET      ST    R14,READR
         TM    $UCBAD,ACBSW        ACCESSING FILE VIA AN ACB?
         BZ    READDCB             NO, VIA A DCB
         L     R15,=A(ACBREAD)     YES, GET ENTRY POINT OF ROUTINE
         BR    R15                 INVOKE IT
READDCB  ICM   R0,15,SAVSPANL      ARE SPANNED RECORDS POSSIBLE?
         BZ    READGET             NO
         L     R1,SPANPTR          YES, POINT TO SPANNED RECORD AREA
         XC    0(2,R1),0(R1)       RESET CUMULATIVE RECORD LENGTH
READGET  TM    MODE,VSAMSW         VSAM CI INTERPRETATION?
         BO    READVSAM            YES
         TM    MODE,OFFLDSW        HERE TO OFFLOAD?
         BO    READDBLK            YES, JUST READ IT
         CLC   DIVHICNT,COUNT      STORED THIS RECORD IN DIV?
         BL    READDBLK            NO, PROCEED WITH DEBLOCKING
         ICM   R14,B'1111',KOUNT   ANY DATA DIGESTED YET?
         BZ    READDBLK            NO, NO POINT SEARCHING DIV
         TM    STATUS8,DIVFULL     STORED ALL DATA SO FAR IN DIV?
         BZ    READOLD             YES, RETRIEVE RECORD FROM DIV
READDBLK TM    DCBRECFM,X'10'      BLOCKED?
         BZ    READI               NO, BRANCH
         TM    DCBRECFM,X'C0'      UNDEFINED?
         BO    READI               YES, BRANCH
         LM    R0,R2,DEBLOCKS      GET DEBLOCKING STATUS
         AR    R2,R1               POINT TO NEXT RECORD
         CR    R2,R0               END OF BLOCK (OR FIRST TIME)?
         BNL   READI               YES, BRANCH
         TM    TSTRECFM,X'40'      VARIABLE LENGTH?
         BO    READVB              YES, BRANCH
         ST    R2,DEBLOCKS+8       FIXED BLOCKED
         B     READX
READI    LA    R5,CHKPTDUM         JUST IN CASE OF OFFLOAD
         TM    MODE,OFFLDSW        HERE TO OFFLOAD?
         BO    READSPAN            YES, JUST READ IT
         ICM   R5,B'1111',CHKPTBOT GET LAST CHECKPOINT
         BNZ   READNF              PROCESS IT
         L     R5,CHKPTTOP         FIRST READ SO NOTHING READ YET
         B     READNEW             READING A RECORD NOT READ BEFORE
READNF   L     R1,0(,R5)           GET NUMBER OF HIGHEST RECORD READ
         LTR   R1,R1               WAS IT EOF?
         BM    READOLD             YES, BRANCH
         C     R1,COUNT            HAVE WE READ THIS RECORD BEFORE?
         BL    READADD             NO, BRANCH   (BNH CAUSED DUP CHKPTS)
         BE    READSAME            YES, BUT LET ENTRY GET UPDATED
READOLD  LA    R5,CHKPTDUM         YES, DON'T CHANGE CHKPT TABLE
READSAME ICM   R0,B'1111',DIVREG1  DIV AVAILABLE?
         BNP   READ                NO
         LA    R0,8                YES, GET ENTRY CODE (RECORD FETCH)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         LTR   R15,R15             SUCCESSFUL RETRIEVAL?
         BNZ   READ                NO, PROCEED AS IF NO DIV
         B     READFALL            YES, RETURN
READADD  LA    R5,CHKPTLN(,R5)     ADD AN ENTRY TO THE CHKPT TABLE
         C     R5,ENDPTR           IS TABLE FILLED UP?
         BL    READNEW             NO, SKIP NEXT INSTR
         BAL   R14,READHALF        YES, HALVE THE TABLE
READNEW  ST    R5,CHKPTBOT         SAVE NEW CURRENT CHECKPOINT POINTER
READ     MVC   0(4,R5),COUNT
         XC    4(4,R5),4(R5)
         TM    STATUS,STNOMEM      ARE WE IN MEMBER-NOT-FOUND STATUS?
         BO    DYNEOD              YES, JUST GO TO END-OF-FILE
         XC    DOUBLE,DOUBLE       RESET VSAM SPANNING STATUS
READSPAN L     R2,BLOCKPTR
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         TM    STATUS2,MAGTAPE     DOES DATA SET RESIDE ON TAPE?
         BZ    CHECKRD             NO, FIRST UCB VOLUME WON'T CHANGE
         ICM   R1,B'1111',$UCBAD   POINT TO UNIT CONTROL BLOCK
         BZ    CHECKRD             THERE IS NONE
         CLC   $VOLSER,28(R1)      HAS THE VOLUME CHANGED?
         BE    CHECKRD             NO, STILL THE FIRST VOLUME
         LH    R15,DSNAIM          YES, GET DSNAME LENGTH
         LA    R15,MSGDSN(R15)     POINT PAST NAME IN HEADER
         MVC   4(6,R15),28(R1)     SUPPLY LATEST VOLUME SERIAL
CHECKRD  DS    0H                  SEE HOW THE READ WENT
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK
         CHECK DYNDECBW
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW?
         BE    DYNEOD              YES, BRANCH
         LH    R1,DCBBLKSI
         A     R1,SAVKEYLE
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    OKREAD              NO, BRANCH
         CLC   0(2,R2),DCBBLKSI    YES, BDW LENGTH > BLKSIZE?
         BH    BLKEOD              YES, BAD BLOCK SO FORCE EOF
         CLC   0(2,R2),HW8         BDW LENGTH < 8?
         BL    BLKEOD              YES, BAD BLOCK SO FORCE EOF
         ICM   R0,3,2(R2)          IS 2ND HALF OF BDW NULL?
         BNZ   BLKEOD              NO, SEEMS LIKE A BAD BLOCK
         LA    R14,4               GET LENGTH OF BDW
         SLR   R0,R0               CLEAR FOR INSERTS
VARCHKLP LA    R15,0(R14,R2)       POINT TO NEXT RECORD OR SEGMENT
         CLI   0(R15),X'80'        NULL SEGMENT OR JUST SIGN BIT ON?
         BNL   BLKEOD              YES, NOT SUPPORTED OR JUST ERROR
         ICM   R0,3,0(R15)         GET THE RECORD/SEGMENT LENGTH
         CH    R0,HW4              IS IT LESS THAN 4?
         BL    BLKEOD              YES, INVALID
         CH    R0,DCBLRECL         IS IT LARGER THEN THE RECORD SIZE?
         BH    BLKEOD              YES, INVALID
         AR    R14,R0              ACCUMULATE LENGTHS
         CH    R14,0(,R2)          CHECK FOR END OF BLOCK
         BH    BLKEOD              PAST IT SO BAD BLOCK
         BL    VARCHKLP            PROCESS NEXT RECORD/SEGMENT
OKREAD   LA    R0,0(R1,R2)         END OF BLOCK
         STM   R0,R2,DEBLOCKS      SAVE STATUS INFO
         TM    DCBMACF1,DCBMRPT1   NOTE/POINT ALLOWED?
         BZ    NOTED               NO
         NOTE  (R4)
         ST    R1,TTR              SAVE CI ADDRESS FOR REREAD
         ICM   R0,B'1111',4(R5)    IS THIS 2ND READ PER GET?
         BNZ   NOTED               YES, DON'T SAVE IN CHKPT
         ST    R1,4(,R5)           SAVE TTR IN TABLE
NOTED    DS    0H
         LM    R0,R1,DEBLOCKS      RESTORE BLOCK END AND LENGTH
         TM    MODE,VSAMSW         VSAM CI INTERPRETATION?
         BO    OKRDVSAM            YES
         TM    DCBRECFM,X'C0'      UNDEFINED?
         BNM   READX               YES, RECFM=U
         TM    DCBRECFM,X'50'      VARIABLE OR BLOCKED?
         BZ    READX               NO, FIXED UNBLOCKED SO RECFM=F
         TM    DCBRECFM,X'40'      VARIABLE LENGTH?
         BO    READVBI             YES, BDW EXISTS
         CLC   DCBLRECL,DCBBLKSI   RECFM=FB BUT DOES BLKSIZE=LRECL?
         BNL   READX               YES, TREAT THE TURKEY AS RECFM=F
         LH    R1,DCBLRECL         FIXED BLOCKED
         ST    R1,DEBLOCKS+4       SAVE STATUS INFO
         B     READX
READVBI  LA    R2,4(,R2)           POINT PAST BDW
READVB   TM    DCBRECFM,X'08'      SPANNED
         BO    READVBS
READVBR  LH    R1,0(,R2)
         STM   R1,R2,DEBLOCKS+4    SAVE STATUS INFO
         B     READX
READVBS  CLI   2(R2),0             SEGMENT?
         BE    READVBR             NO, BRANCH
*               THIRD BYTE IS X'01' FOR FIRST SEGMENT
*                             X'03' FOR MIDDLE SEGMENT
*                             X'02' FOR LAST SEGMENT
         CLI   2(R2),1             FIRST SEGMENT?
         BNE   READSEG2            NO
         L     R14,SPANPTR         ADDRESS TO MOVE TO
         LH    R15,0(,R2)          LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         LR    R0,R2               ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT RDW AND DATA
         B     READSEGD            GO DEBLOCK NEXT SEGMENT
READSEG2 L     R14,SPANPTR         ADDRESS OF PRIOR SEGMENTS
         LH    R0,0(,R14)          LENGTH OF PRIOR SEGMENTS
         LH    R15,0(,R2)          LENGTH+4 OF NEW SEGMENT
         SH    R15,HW4             LENGTH OF NEW SEGMENT
         LR    R1,R15              LENGTH TO BE MOVED
         AR    R15,R0              COMBINE LENGTHS
         STH   R15,0(,R14)         STORE COMBINED LENGTHS
         LR    R15,R1              LENGTH TO BE MOVED
         AR    R14,R0              ADDRESS TO MOVE TO
         LA    R0,4(,R2)           ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT DATA
         CLI   2(R2),2             LAST SEGMENT?
         BNE   READSEGD            NO, GO DEBLOCK NEXT SEGMENT
         LH    R1,0(,R2)           GET LENGTH OF THIS SEGMENT
         STM   R1,R2,DEBLOCKS+4    SAVE LENGTH AND ADDRESS
         L     R2,SPANPTR          POINT TO COMBINED RECORD
         LH    R1,0(,R2)           GET COMBINED LENGTH
         B     READX               EXIT
READSEGD DS    0H                  NOT NECESSARY TO CHECK RECFM X'10'
         LH    R1,0(,R2)           LENGTH
         AR    R2,R1               POINT TO NEXT SEGMENT
         C     R2,DEBLOCKS         END OF BLOCK?
         BNL   READOLD             YES, BRANCH
         B     READVBS             GO PROCESS NEW SEGMENT
READX    TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    READXX              NO
         LTR   R2,R2               END-OF-FILE?
         BZ    READHEND            YES
         CLI   0(R2),C'*'          TSO HELP COMMENT?
         BE    READDCB             YES, DISCARD
         MVC   72(8,R2),BLANKS     NO, BLANK OUT SEQUENCE NUMBERS
         CLC   =C')I ',0(R2)       INCLUDE SPECIFIED?
         BNE   READXX              NO, SHOW THIS RECORD
         LA    R0,60               GET MAXIMUM SCAN COUNT
         LA    R14,3(,R2)          POINT TO FIRST POSSIBLE SPOT
READINLP CLI   0(R14),C' '         LEADING BLANK?
         BNE   RDGOTINC            NO, FOUND INCLUDE NAME
         LA    R14,1(,R14)         YES, SKIP IT
         BCT   R0,READINLP         LOOK AT NEXT CHARACTER
         B     READXX              NO MEMBER SPECIFIED SO SHOW RECORD
RDGOTINC MVC   BLDLNAME,0(R14)     LOAD INCLUDE MEMBER NAME
         BLDL  (R4),BLDL           VERIFY EXISTENCE OF INCLUDE MEMBER
         LTR   R15,R15             DOES INCLUDE MEMBER EXIST?
         BNZ   READDCB             NO, OMIT RECORD WITHOUT ERROR
         FIND  (R4),BLDLTTRP,C     POINT TO MEMBER FOR FIRST READ
         LA    R0,@HSESIZE         GET HEL STATUS ELEMENT LENGTH
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         XC    0(@HSESIZE,R1),0(R1) CLEAR NEW HSE
         USING @HSESECT,R1
         L     R15,HSEACTIV        POINT TO ACTIVE HSE
         ST    R15,HSELINK         SAVE LINK TO OLDER HSE
         ST    R1,HSEACTIV         SAVE NEW HSE ADDRESS
         MVC   HSETTRZ,TTR         SAVE CURRENT TTR
         MVC   HSEDBLK,DEBLOCKS    SAVE DEBLOCKING STATUS
         MVC   HSEMEMN,BLDLNAME    SAVE MEMBER NAME TO BE INCLUDED
         DROP  R1                  @HSESECT
         XC    DEBLOCKS(12),DEBLOCKS      RESET DEBLOCKING STATUS
         B     READDCB             REDRIVE I/O ROUTINE
READHEND ICM   R15,15,HSEACTIV     ANY INCLUSIONS CURRENTLY OCCURRING?
         BNP   READXX              NO
         LR    R1,R15              YES, POINT TO ACTIVE HSE
         USING @HSESECT,R1
         MVC   TTR,HSETTRZ         RESTORE PHYSICAL STATUS INDICATORS
         MVC   DEBLOCKS(12),HSEDBLK
         MVC   HSEACTIV,HSELINK    OLDER HSE WILL BE REACTIVATED
         DROP  R1                  @HSESECT
         LA    R0,@HSESIZE         GET HEL STATUS ELEMENT LENGTH
         FREEMAIN R,LV=(0),A=(1)   FREE STORAGE OF TOP HSE
         MVC   BLDLNAME,$MEMBER    PREPARE FOR NO ACTIVE HSE
         ICM   R1,15,HSEACTIV      ANY HSE ACTIVE?
         BNP   HSEMEMOK            NO
         USING @HSESECT,R1
         MVC   BLDLNAME,HSEMEMN    YES, LOAD MEMBER NAME
         DROP  R1                  @HSESECT
HSEMEMOK BLDL  (R4),BLDL           VERIFY EXISTENCE OF INCLUDE MEMBER
         SLR   R2,R2               PREPARE FOR END-OF-FILE SIMULATION
         SLR   R1,R1
         BCTR  R1,0
         LTR   R15,R15             OLD MEMBER STILL THERE?
         BNZ   READHEND            NO, IT JUST VANISHED SO SIGNAL EOF
         FIND  (R4),BLDLTTRP,C     POINT TO PREVIOUS MEMBER START
         POINT (R4),TTR            POINT TO THE INTERRUPTED BLOCK
         L     R2,BLOCKPTR
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK
         CHECK DYNDECBW
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW?
         BE    DYNEOD              YES, BRANCH
         B     READDCB             DEBLOCK THE NEXT RECORD
READXX   TM    STATUS2,FASTREAD    "FASTPATH" ACTIVE?
         BO    READXXX             YES, SKIP BYTE COUNT
         CLC   MAXPOINT,COUNT      ALREADY COUNTED THIS RECORD?
         BH    READXXX             YES
         LTR   R0,R1               NO, GET THIS RECORD'S LENGTH
         BNP   READXXX             DO NOT COUNT E-O-F MARKER
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    READXVOK            NO
         SH    R0,=H'4'            DO NOT COUNT RDW AS DATA BYTES
READXVOK A     R0,KOUNT            ACCUMULATE THE BYTE COUNT
         ST    R0,KOUNT
         LA    R0,1
         A     R0,MAXPOINT         REMEMBER NOT TO COUNT THIS RECORD
         ST    R0,MAXPOINT                         AGAIN
READXXX  ICM   R0,B'1111',DIVREG1  DIV AVAILABLE?
         BNP   READDIVX            NO
         LA    R0,4                YES, GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         LTR   R15,R15             WAS THERE ROOM TO STORE IT?
         BZ    READDIVX            YES, SUCCESS
         ICM   R14,B'1111',$UCBAD  TALKING TO A PHYSICAL DEVICE?
         BZ    EOSUBSYS            NO, REGRETABLY MUST FORCE E-O-F
READDIVX DS    0H
         L     R15,=A(CHKPTVFY)    INVOKE CHECKPOINT VERIFY ROUTINE
         BALR  R14,R15
READFALL L     R15,=A(FALLREC)     INVOKE "FIND ALL" DISCARD ROUTINE
         BALR  R14,R15
         L     R14,READR
         BR    R14

**********************************************************************
*                                                          *         *
*         VSAM CONTROLINTERVAL PROCESSING                  *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************

READVSAM OC    DEBLOCKS,DEBLOCKS   FIRST READ?
         BZ    READI               YES
         TM    STATUS6,DB2TBL      READING DB2 TABLESPACE?
         BO    READDB2             YES
         NI    DEBLOCKS,X'7F'      ENSURE RRDS EMPTY SLOT FLAG IS OFF
         LM    R0,R1,DEBLOCKS+4    GET DEBLOCKING STATUS
         L     R2,DEBLOCKS         GET CIDF POINTER
         L     R5,BLOCKPTR         POINT TO THE START OF THE CI
         AH    R5,0(R2)            POINT PAST END OF CI DATA
         AR    R1,R0               POINT TO NEXT RECORD
         CR    R1,R5               END OF CONTROLINTERVAL DATA?
         BNL   READI               YES, BRANCH
         ST    R1,DEBLOCKS+8       NO, SAVE NEXT RECORD POINTER
         L     R1,BLOCKPTR         POINT TO THE START OF THE CI
         SLR   R5,R5
NEXTRDF  SH    R2,HW3              POINT TO "NEXT" RDF
         LA    R0,1                ASSUME ONE RECORD DESCRIBED BY IT
         ICM   R5,3,1(R2)          GET ITS HALFWORD COUNTER
         CLI   0(R2),X'40'         ASSOCIATED WITH RDF TO THE LEFT?
         BNE   RDFLOOP             NO, THE TESTED BYTE SHOULD BE NULL
         SH    R2,HW3              POINT TO ASSOCIATED RDF
         ICM   R0,3,1(R2)          GET ITS HALFWORD COUNTER
RDFLOOP  AR    R1,R5               POINT TO NEXT RECORD
         C     R1,DEBLOCKS+8       PAST THE CURRENT RECORD?
         BH    RDFEXIT             YES, NOW HAVE RECORD'S LENGTH
         BCT   R0,RDFLOOP          NO, KEEP GOING
         B     NEXTRDF             GET MORE RDF'S TO KEEP GOING
RDFEXIT  ST    R5,DEBLOCKS+4       SAVE THE CURRENT RECORD'S LENGTH
MTSLTCHK TM    0(R2),X'04'         EMPTY RRDS SLOT?
         BZ    NOTEMPTY            NO, NOW HAVE VSAM LOGICAL RECORD
         OI    DEBLOCKS,X'80'      YES, FLAG IT AS SUCH
NOTEMPTY LM    R1,R2,DEBLOCKS+4    LOAD RECORD'S LENGTH AND ADDRESS
         B     READX

OKRDVSAM TM    DSORGTYP,VVRCOMTP   INDEX COMPONENT?
         BO    VSAMCIOK            YES, ASSUME ONE BLOCK PER CI
         TM    AMATR,VVRAMSDT      IMBEDDED SEQUENCE SET?
         BZ    NOTIMBED            NO
         SLR   R14,R14             YES, A DIVIDE COMING UP
         SLR   R15,R15
         ICM   R15,3,TTR           GET THE RELATIVE TRACK NUMBER
         SLR   R5,R5
         ICM   R5,1,AMCASZ         GET TRACKS PER CONTROLAREA
         BZ    NOTIMBED            AVOID S0C9 ABEND
         DR    R14,R5              GET RELATIVE TRACK WITHIN CA
         LTR   R14,R14             FIRST TRACK OF CONTROLAREA?
         BZ    VSJUMPSS            YES, SKIP OVER SEQUENCE SET
NOTIMBED TM    STATUS6,DB2TBL      READING DB2 TABLESPACE?
         BZ    CILENCHK            NO
         ICM   R15,15,COUNT        FIRST RECORD BEING READ?
         BNZ   CILENCHK            NO
         ICM   R15,3,9(R2)         FIRST RECORD BEING READ?
         BNZ   CILENCHK            NO
         TM    4095(R2),X'C5'      4K PAGES BEING USED?
         BNO   CILENCHK            NO, STAY WITH 32K PAGES
         MVC   AMCIV+2(2),HW4096   YES, ADJUST "CONTROLINTERVAL" SIZE
CILENCHK C     R1,AMCIV            BLOCK SHORTER THAN CI?
         BE    VSAMCIOK            NO, PROCESS CONTROLINTERVAL
         BH    DYNEOD              NO, TOO LARGE SO SIGNAL E-O-D
         ST    R1,DEBLOCKS+4       YES, REMEMBER SIZE READ SO FAR
         LR    R2,R0               POINT PAST BLOCK JUST READ
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK
         CHECK DYNDECBW
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW?
         BE    DYNEOD              YES, BRANCH
         LH    R1,DCBBLKSI
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         LA    R0,0(R1,R2)         END OF BLOCK
         A     R1,DEBLOCKS+4       ADD PREVIOUSLY READ DATA OF THIS CI
         STM   R0,R1,DEBLOCKS      UPDATE STATUS INFO
         B     CILENCHK            RECHECK FOR END OF CONTROLINTERVAL
VSAMCIOK TM    STATUS6,DB2TBL      READING DB2 TABLESPACE?
         BO    OKRDDB2             YES
         L     R2,DEBLOCKS         POINT PAST END OF CI
         SH    R2,HW4              POINT TO CI DEFINITION FIELD
         ST    R2,DEBLOCKS         SAVE CIDF ADDRESS
         ICM   R0,B'1111',0(R2)    NULL CIDF?
         BZ    SOFTEOD             YES, SOFTWARE END-OF-FILE
         SRA   R0,16               NO, EMPTY CONTROLINTERVAL?
         BNZ   VSAMRDF             NO, PROCESS THE DATA RECORD(S)
         ICM   R0,B'1111',AMNLR    YES, GOT RECORD COUNT FROM VVDS?
         BZ    VSAMRDF             NO, PROCESS THE RDF
         C     R0,COUNT            YES, READ EXACTLY ALL RECORDS?
         BH    VSAMSPAN            NO, THROW NULLS AWAY - GET MORE DATA
         BE    SOFTEOD             YES, ASSUME ONLY EMPTY CI'S LEFT
*        BL    VSAMRDF             NO, FILL SCREEN WITH EMPTY CI'S
VSAMRDF  SH    R2,HW3              POINT TO "FIRST" RDF
         MVC   DEBLOCKS+6(2),1(R2) LOAD LENGTH OF FIRST RECORD
         TM    0(R2),X'30'         VSAM SPANNED SEGMENT?
         BNZ   READVSEG            YES, HANDLE IT
         ICM   R1,B'1111',DOUBLE   NO, GET ACCUMULATED SEGMENT LENGTHS
         BZ    MTSLTCHK            ZERO SO SITUATION NORMAL

VSAMTRNC POINT (R4),TTR            POINT BACK TO CI JUST READ
         L     R2,SPANPTR          POINT TO TRUNCATED COMBINED RECORD
         L     R1,DOUBLE           GET LENGTH OF SOME OF LOGICAL REC
         B     READX               EXIT (RRDS CAN'T BE SPANNED)

VSJUMPSS SLR   R1,R1
         ICM   R1,3,TTR            LOAD THE RELATIVE TRACK NUMBER
         LA    R1,1(,R1)           INCREMENT IT
         STH   R1,TTR              SAVE IT
         MVI   TTR+2,1             START FROM FIRST RECORD OF NEXT TRK
         POINT (R4),TTR            SKIP ENTIRE SEQUENCE SET TRACK
VSAMSPAN LA    R5,CHKPTDUM         DON'T CHANGE CHKPT TABLE
         B     READSPAN            IGNORE THIS RECORD AND FETCH NEXT

*               FLAG BYTE HAS X'50' FOR FIRST SEGMENT
*                             X'70' FOR MIDDLE SEGMENT
*                             X'60' FOR LAST SEGMENT
READVSEG CLI   0(R2),X'50'         FIRST SEGMENT?
         BNE   RDVSSEG2            NO
         ICM   R1,B'1111',DOUBLE   YES, GET ACCUMULATED SEGMENT LENGTHS
         BNZ   VSAMTRNC            NON-ZERO SO MUST BE OUT OF ORDER
         L     R14,SPANPTR         ADDRESS TO MOVE TO
         LH    R15,DEBLOCKS+6      LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         ST    R1,DOUBLE           SAVE LENGTH SO FAR
         L     R0,DEBLOCKS+8       ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE VSAM RECORD SEGMENT
         B     VSAMSPAN            GET NEXT CI FOR NEXT SEGMENT
RDVSSEG2 L     R14,SPANPTR         ADDRESS OF FIRST SEGMENT
         A     R14,DOUBLE          ADDRESS OF THIS SEGMENT
         LH    R15,DEBLOCKS+6      LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         A     R1,DOUBLE           ADD PREVIOUS LENGTH
         ST    R1,DOUBLE           SAVE LENGTH SO FAR
         LR    R1,R15              LENGTH TO MOVE
         L     R0,DEBLOCKS+8       ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT DATA
         CLI   0(R2),X'60'         LAST SEGMENT?
         BNE   VSAMSPAN            NO, GET NEXT CI FOR NEXT SEGMENT
         L     R2,SPANPTR          YES, POINT TO COMBINED RECORD
         L     R1,DOUBLE           GET COMBINED LENGTH
         B     READX               EXIT

**********************************************************************
*                                                          *         *
*         DB2 TABLESPACE PROCESSING                        *  GP@FT  *
*                                                          *  08/93  *
**********************************************************************

OKRDDB2  LM    R0,R1,DEBLOCKS+4    GET DEBLOCKING STATUS
         L     R2,DEBLOCKS         POINT PAST END OF BLOCK
         SH    R2,HW2              POINT TO "CIDF"
         TM    1(R2),X'C5'         DB2 FORMATTED RECORD?
         BNO   SOFTEOD             NO, END OF DB2 DATA
         TM    11(R1),255-X'02'    DB2 DATA PAGE?  (X'00' OR X'02'?)
         BNZ   READ                NO, READ THE NEXT PAGE
         CLI   18(R1),0            ANY ROWS IN THIS PAGE?
         BE    READ                NO, READ THE NEXT PAGE
         MVI   DEBLOCKS+4,0        YES,
         MVC   DEBLOCKS+5(1),18(R1)     GET THE ROW COUNT FOR THIS PAGE
         MVC   DEBLOCKS+6(2),HW1   GET THE ROW COUNT TO BE RETURNED
READDB2  SLR   R1,R1
         ICM   R1,3,DEBLOCKS+6     GET THE ROW-IN-PAGE NUMBER
         CLM   R1,3,DEBLOCKS+4     IS THIS HIGHER THAN THE MAXIMUM?
         BH    READI               YES, READ ANOTHER PAGE
         LA    R1,1(,R1)           NO, GET NEW ROW NUMBER FOR NEXT TIME
         STH   R1,DEBLOCKS+6       SAVE FOR NEXT TIME
         SLL   R1,1                DOUBLE IT FOR INDEX
         L     R2,DEBLOCKS         POINT PAST END OF PAGE
         SLR   R2,R1               POINT TO ROW-IN-PAGE OFFSET
         TM    0(R2),X'80'         EMPTY SLOT?
         BO    READDB2             YES, SKIP IT
         LH    R1,0(R2)            LOAD THIS OFFSET
         L     R2,DEBLOCKS+8       POINT TO THE PAGE
         ALR   R2,R1               POINT TO THE ROW
         CLI   0(R2),X'40'         TEST FLAG BYTE
         BE    READDB2             IGNORE OVERFLOW POINTER
         SLR   R1,R1
         ICM   R1,3,1(R2)          GET THE ROW LENGTH
         LA    R2,6(,R2)           POINT TO THE ROW'S DATA
         SH    R1,HW6              GET THE ROW DATA LENGTH
         B     READX               RETURN

************************************************************
*                                                          *
*         REAL/INDICATED/SIMULATED END-OF-FILE HANDLING    *
*                                                          *
************************************************************

EOSUBSYS MVI   SYNADSW,X'FF'       SIMULATE I/O ERROR
         MVC   SYNADMSG,SSEOFMSG   LOAD INFORMATIVE MESSAGE
         NI    STATUS8,255-DIVFULL NO MORE FILE I/O IS TO BE DONE
         B     DYNEOF
SOFTEOD  OI    STATUS2,SOFTEOF     REMEMBER EOF WAS SOFTWARE
         L     R5,CHKPTBOT         GET LAST CHECKPOINT
         B     DYNEOF
BLKEOD   MVI   SYNADSW,X'BD'       SIMULATE I/O ERROR
         MVC   SYNADMSG,BDBLKMSG   LOAD BAD VARIABLE LENGTH DATA MSG
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'      SHOW LENGTH IN BDW
         UNPK  SYNADMSG+55(5),DOUBLE+5(3)
         UNPK  SYNADMSG+39(9),0(5,R2)
         TR    SYNADMSG+39(8),HEXTAB-240
         MVI   SYNADMSG+47,QUOTE   SHOW WHOLE BDW IN HEX
         ICM   R1,3,DCBBLKSI       LOAD BLOCK SIZE FROM DCB
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  SYNADMSG+70(5),DOUBLE+5(3)
DYNEOD   DS    0H
         TM    DCBMACF1,DCBMRPT1   NOTE/POINT ALLOWED?
         BZ    DYNEOF              NO
         NOTE  (R4)                DETERMINE ADDRESS OF EOF
         ST    R1,TTR              SAVE A BRANCH
         CLI   SYNADSW,X'BD'       BLOCK DESCRIPTOR WORD PROBLEM?
         BNE   DYNEOF              NO, LEAVE SYNADMSG AS IT IS
         UNPK  SYNADMSG+24(9),TTR(5)
         TR    SYNADMSG+24(8),HEXTAB-240
         MVI   SYNADMSG+32,C' '    SHOW BAD BLOCK RELATIVE ADDRESS
         TM    STATUS2,MAGTAPE     REVIEWING A TAPE?
         BO    DYNEOF              YES, NEED EIGHT DIGITS
         MVC   SYNADMSG+30(2),BLANKS
DYNEOF   MVC   EOFRELAD,TTR        REMEMBER EOF LOCATION
         SLR   R1,R1
         BCTR  R1,0                FLAG EOF WITH -1
         ST    R1,0(,R5)           SAVE EOF IN CHKPT TABLE
         SLR   R2,R2
         TM    STATUS2,MAGTAPE     TAPE REPOSITIONING REQUIRED?
         BZ    READX               NO
         OI    STATUS2,EOTAPE      FLAG END-OF-FILE ENCOUNTERED
         B     READX

************************************************************
*                                                          *
*         CHECKPOINT TABLE COMPRESSION ROUTINE             *
*                                                          *
************************************************************

READHALF ST    R14,SBASAVE         SAVE RETURN ADDRESS
         LA    R0,CHKPTLN          LENGTH OF EACH ENTRY
         LR    R14,R0              COPY IT
         SH    R14,HW5             GET LENGTH CODE OF VARIABLE PART
         L     R15,CHKPTTOP        POINT TO FIRST ENTRY
         AR    R15,R0              POINT TO SECOND ENTRY
         LR    R1,R15
         AR    R1,R0               POINT TO THIRD ENTRY
READHMOV MVC   0(4,R15),0(R1)      MOVE 3RD TO 2ND    (MOVE FIXED PART)
         EX    R14,READHVMV             5TH TO 3RD      (MOVE VAR PART)
*                                       7TH TO 4TH, ETC
         MVI   7(R1),X'FF'         FLAG OLD ENTRY (DEBUG)
         AR    R15,R0              RECEIVING FIELD DOWN 1
         AR    R1,R0               SENDING FIELD DOWN 1
         AR    R1,R0               SENDING FIELD DOWN 2
         CR    R1,R5               ARE WE PAST THE LAST ENTRY?
         BL    READHMOV            NO, BRANCH
         LR    R5,R15              YES, NEW CURRENT POINTER
         L     R14,SBASAVE         RESTORE RETURN ADDRESS
         BR    R14                 RETURN
READHVMV MVC   4(0,R15),4(R1)      <<< EXECUTED >>>

**********************************************************************
*                                                          *         *
*         SHOW CURRENT PFK VALUES                          *  GP@FT  *
*                                                          *         *
**********************************************************************

GIVEPFKS OI    STATUS4,HELPSW      SHOW CURRENT PFK VALUES
         B     FILLSCR

**********************************************************************
*                                                          *         *
*         FREE ALL HEL STATUS ELEMENTS ROUTINE             *  GP@FT  *
*                                                          *  08/95  *
**********************************************************************

FREEHSE  ICM   R1,15,HSEACTIV      ANY HSE STORAGE ALLOCATED?
         BZR   R14                 NO, RETURN TO CALLER
         ST    R14,12(,R13)        YES, SAVE RETURN ADDRESS
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    FREEPIC             NO, AREA NOT HSE BUT PICTURE ARRAY
         USING @HSESECT,R1
         MVC   HSEACTIV,HSELINK    SAVE OLDER HSE ADDRESS
         LA    R0,@HSESIZE         GET HEL STATUS ELEMENT LENGTH
         DROP  R1                  @HSESECT
         FREEMAIN R,LV=(0),A=(1)   FREE STORAGE OF TOP HSE
         L     R14,12(,R13)        RESTORE RETURN ADDRESS
         B     FREEHSE             FREE ALL HSE STORAGE AREAS
FREEPIC  L     R0,PICSTGSZ         GET PICTURE ARRAY STORAGE SIZE
         FREEMAIN RU,LV=(0),A=(1),SP=17
         XC    HSEACTIV,HSEACTIV   RESET STORAGE POINTER
         XC    PICDTLS(PICDTLEN),PICDTLS     AND PICTURE STATISTICS
         L     R14,12(,R13)        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER

**********************************************************************
*                                                          *         *
*         CANCEL  -  RESET PROFILE CHANGED FLAG AND END    *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************

CANCEL   NI    STATUS,255-STPROF   TURN OFF PROFILE REWRITE FLAG
         B     END                 NOW PERFORM 'END' PROCESSING

**********************************************************************
*                                                          *         *
*         XCTL  -  TRANSFER CONTROL TO TSO HELP COMMAND    *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************

XCTL     TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    INVLDCMD            NO, COMMAND NOT ALLOWED
         OI    STATUS6,HELX        XCTL TO TSO HELP IS REQUIRED

**********************************************************************
*                                                          *         *
*         END OF PROGRAM  -  BYPASS DIRECTORY DISPLAY      * GP@SECV *
*                                                          *  03/86  *
**********************************************************************

EQUALSX  NI    STATUS,255-STPODIR  DO NOT RETURN TO PDS DIRECTORY
         NI    STATUS8,255-ZIPF    DO NOT RETURN TO ZIP DIRECTORY

************************************************************
*                                                          *
*         END OF PROGRAM                                   *
*                                                          *
************************************************************

END      TM    STATUS8,ZIPF        IS UNZIP POSSIBLE?
         BZ    ENDHSE              NO
         TM    STATUS8,ZIPD        LOOKING AT UNZIPPED DATA NOW?
         BZ    ENDZIP              YES, GO BACK TO DIRECTORY
*   FREEHSE IS NOW CALLED TO CLEAN UP HEL STATUS ELEMENTS WHICH EXIST
*   BECAUSE THE FULLSCREEN HELP HAD NOT SCROLLED DOWN FAR ENOUGH TO
*   TO REACH THE END OF THE INCLUDED HELP MEMBER SPECIFIED ON )I.
*   FREEHSE WILL ALSO FREE THE PCX PIXEL BYTE ARRAY.
ENDHSE   BAL   R14,FREEHSE         FREE ANY ALLOCATED HSE STORAGE AREAS
         ICM   R0,B'1111',DIVREG1  DIV AVAILABLE?
         BNP   NODIV12             NO
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?
         BZ    NODIV12             NO, FREEMAIN WILL BE ISSUED SOON
         LA    R0,12               YES, GET ENTRY CODE (PAGE RELEASE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
NODIV12  SLR   R15,R15
         ST    R15,TTR             SUPPRESS 'TOP' OPERAND PROCESSING
         B     EXITRC

EXIT12   LA    R15,12

EXITRC   CH    R15,RC
         BNH   *+8
         STH   R15,RC              SET HIGHEST RC
         TM    STATUS,STOPEN       IS IT OPEN?
         BZ    NOCLOSE             NO, BRANCH
         TM    DCBOFLGS,X'10'      IS IT OPEN?
         BZ    NOCLOSE             NO, BRANCH
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?
         BO    NOCLOSE             YES, KEEP THE DCB OPEN
         MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
*        DROP  R4                  IHADCB
NOCLOSE  DS    0H
         TM    STATUS,STGMVU
         BZ    NOGMVU
         L     R0,ANSWER+4         LENGTH
         L     R1,ANSWER           ADDRESS
         FREEMAIN R,LV=(0),A=(1)
         NI    STATUS,255-STGMVU
NOGMVU   DS    0H
         LM    R10,R12,BASE1
         L     R14,RET1
         BR    R14                 RETURN TO PHASE 1

**********************************************************************
*                                                          *         *
*         RETURN TO ZIP DIRECTORY DISPLAY                  *  GP@P6  *
*                                                          *  10/99  *
**********************************************************************

ENDZIP   NI    STATUS8,255-ZIPF    RESET UNZIP STATUS FLAG
         NI    STATUS10,255-UZ80   RESET LRECL OVERRIDE STATUS FLAG
         LA    R0,16               GET ENTRY CODE (FREEMAIN)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         NI    MODE,RECURS+FSMODE  ALL OTHER FLAGS HERE SHOULD BE OFF
         MVC   DSNAIM(46),$DSNAME  RESTORE THE HEADING DATA SET NAME
         LA    R0,256
         STCM  R0,12,OFFSET        SHOW FROM FIRST COLUMN
         ST    R0,TTR              SET TTR OF FIRST BLOCK
         POINT (R4),TTR            POINT TO START OF DASD SEQ DATA SET
         MVC   TSTRECFM,DCBRECFM   RESTORE TSTRECFM
         TM    DCBRECFM,X'C0'      RECFM U?
         BNO   NOCONCAT            NO, REPROCESS DISK FILE AFRESH
         NI    TSTRECFM,255-X'C0'  YES, SET BOTH BITS OFF
         B     NOCONCAT            REPROCESS DISK FILE AFRESH

************************************************************
*                                                          *
*         PUTMSG ROUTINE                                   *
*                                                          *
************************************************************

PUTMSG   STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         EX    R14,PUTMSGMV        MOVE MESSAGE IN
         L     R15,MYPUTLEP

         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)

         LM    R14,R1,PUTLINS
         BR    R14
PUTMSGMV MVC   0(0,R15),0(R1)      <<< EXECUTED >>>

************************************************************
*                                                          *
*         SYNAD EXIT                                       *
*                                                          *
************************************************************

*         THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO
*         IF AN I/O ERROR OCCURS.

DYNSYNAD DS    0H
         SYNADAF ACSMETH=BSAM
         MVC   SYNADMSG,50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14

************************************************************
*                                                          *
*         CONSTANTS                                        *
*                                                          *
************************************************************

         LTORG

ON       DC    C'ON'
OFF      DC    C'OFF'
*BLUESA  DCS   SA,COLOUR,BLUE      UNCOMMENT IF REQUIRED   (COLOUR # 1)
REDSA    DCS   SA,COLOUR,RED                               (COLOUR # 2)
*PINKSA  DCS   SA,COLOUR,PINK      UNCOMMENT IF REQUIRED   (COLOUR # 3)
*GREENSA DCS   SA,COLOUR,GREEN     UNCOMMENT IF REQUIRED   (COLOUR # 4)
TURQOISA DCS   SA,COLOUR,TURQ                              (COLOUR # 5)
YELLOWSA DCS   SA,COLOUR,YELLOW                            (COLOUR # 6)
*NEUTRAL DCS   SA,COLOUR,WHITE     UNCOMMENT IF REQUIRED   (COLOUR # 7)
*BLACK    \                                                (COLOUR # 8)
*DEEP BLUE \                                               (COLOUR # 9)
*ORANGE     \                                              (COLOUR # A)
*PURPLE      \                                             (COLOUR # B)
*PALE GREEN   \                                            (COLOUR # C)
*PALE TURQUOISE\                                           (COLOUR # D)
*GREY           \                                          (COLOUR # E)
*WHITE           \____THESE ONLY FOR 16-COLOUR TERMINALS   (COLOUR # F)
BLINK    DCS   SA,HILITE,BLINK
REVERSE  DCS   SA,HILITE,REVERSE
USCORE   DCS   SA,HILITE,USCORE
NORMAL   DCS   SA,HILITE,NORMAL

BOTNINES DC    F'999999999'
DIVADDR2 DC    AL1(X'80'),VL3(REVDIV)
IMAGEADR DC    AL1(X'80'),VL3(REVIMAGE)
INIT2ADR DC    AL4(FAS2INIT)
PFKEPADR DC    AL4(HANDLPFK)
DBGEPADR DC    AL4(HANDLDBG)
LBLEPADR DC    AL4(TAPELBLS)
APLEPADR DC    AL4(HANDLAPL)
FSTYPADR DC    AL4(FSTYPTBL)
UNZIPDAD DC    AL4(UNZIPDIR)
UNZIPFAD DC    AL4(UNZIPFIL+X'80000000')

* NOTIFY OPS OF TSO USER BROWSING CARTRIDGES (ROUTCDE=3,DESC=7)
* (COULD ADD SUPPORT FOR CARTRIDGE HIGH SPEED SEARCH)
DISP3480 MSGDISP MF=L,TXT='REVIEW'
DSP3480L EQU   *-DISP3480

MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L

MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L

         PRINT NOGEN

SEQDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(RP),                       +
               EODAD=DYNEOD,SYNAD=DYNSYNAD
SEQDCBL  EQU   *-SEQDCB

PDSDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=(R),                        +
               EODAD=DYNEOD,SYNAD=DYNSYNAD
PDSDCBL  EQU   *-PDSDCB

         PRINT GEN

DYNREAD  READ  DYNDECB,SF,0,0,'S',MF=L
DYNDECBL EQU   *-DYNDECB

GMVU     GETMAIN VU,MF=L
GMVUL    EQU   *-GMVU

REVSMFEP DC    V(REVSMF)
PFKDEFEP DC    V(PFKDEF)
DAYCENTI DC    F'8640000'          NUMBER OF CENTISECONDS IN A DAY
FW32760  DC    F'32760'
FW1      DC    F'1'
HW1      EQU   FW1+2,2
HW2      DC    H'2'
HW3      DC    H'3'
HW4      DC    H'4'
HW5      DC    H'5'
HW6      DC    H'6'
HW7      DC    H'7'
HW8      DC    H'8'
HW10     DC    H'10'
HW12     DC    H'12'
HW14     DC    H'14'
HW18     DC    H'18'
HW32     DC    H'32'
HW40     DC    H'40'
HW54     DC    H'54'
HW100    DC    H'100'
*HW1000  DC    H'1000'
HW4096   DC    H'4096'
HW10000  DC    H'10000'

*        DCS   (1,17)              12-BIT ADDRESS FOR HEL MEMBER
MEMLOCN  DC    H'16'               14-BIT ADDRESS FOR HEL MEMBER
*        DCS   (1,40)              12-BIT ADDRESS FOR HEL SUBCOMMAND
SUBLOCN  DC    H'39'               14-BIT ADDRESS FOR HEL SUBCOMMAND

MSG04    DC    C'"REVIEW" UNABLE TO OPEN DATASET'
MSG08    DC    C'SPECIFIED MEMBER NOT FOUND IN DATASET'
MSG20    MSG   'INVALID COMMAND'
MSG21    MSG   'INVALID PF KEY (AID=??)'
MSG30    MSG   'END OF SMF RECORDS REACHED'
MSG31    MSG   'FOUND IN LINE XXXXXXXXX COL XXXXX'
MSG32    MSG   'BOTTOM OF DATA REACHED'
MSG33    MSG   'STRING NOT SPECIFIED'
MSG34    MSG   'INVALID OPERAND'
MSG35    MSG   'MISSING OPERAND'
MSG36    MSG   'MEMBER NOT FOUND'
MSG37    MSG   'BLDL FAILED'
MSG38    MSG   'NOT A PDS'
MSG39    MSG   'COMMAND NOT FOUND'
MSG40    MSG   'PFKNN HAS BEEN RESET'
MSG41    MSG   'INVALID PFK COMMAND'
MSG42    MSG   'COLOUR NOT SUPPORTED'
MSG43    MSG   'DEFAULT PFK VALUES SET'
MSG44    MSG   'TOP OF DATA REACHED'
MSG45    MSG   'HELP SECTION NOT FOUND'
MSG46    MSG   'HELP FOR SUBCOMMAND NOT FOUND'
MSG47    MSG   'HELP FOR OPERAND(S) NOT FOUND'
MSG48    MSG   'RESULTS OF <<FIND ALL/REST>>'
MSG49    MSG   'RESULTS OF <<FINDNOT ALL/REST>>'
MSG50    MSG   'WARNING: <<ALL/REST>> PROCESSING INTERRUPTED'

SCREEN1  DCS   X'C1',SA,COLOUR,WHITE,SBA,(1,1)
SFPROHI  DCS   SF,PROHI
SCRDSN   DC    159C'-'
SCREEN1L EQU   *-SCREEN1
WHITESA  EQU   SCREEN1+1,3
SCRLINE  DC    C' LINE '
SCRCOL   DC    C' COL '
SCREEN2  DC    C' COMMAND ===>'
SFUNPHI  DCS   SF,UNPHI,IC
         DC    50X'00'
         DCS   SF,PROHI,C'SCROLL ===>',SF,UNPHI
SCREEN2L EQU   *-SCREEN2
SCREEN2H DC    C'      INPUT===>'
         DCS   SF,UNPHI,IC
         DC    48X'00'
         DCS   SF,PROHI,C'SCROLL ===>',SF,UNPHI
*        EQU   *-SCRN2H            MUST BE SAME AS SCREEN2L
*        DCS   SA,COLOUR,RED       EXTRA ORDER WHEN COLOUR ON
SCRRGE   DC    C'CS'               START WITH CURSOR SCROLLING
SFPROLO  DCS   SF,PROLO
SCRRGEL  EQU   *-SCRRGE
SCRPAD   DCS   RTA,(1,1),C' '
SCRMASK  DC    XL9'202020202020202120'

MARKS    DC    2C'----+'
MARKSX   DC    2C'--------/\'

NOMEM    DC    C'*'
BLANKS   DC    CL44' '             EXTEND IF NECESSARY

BDBLKMSG DC    CL78'** BAD DATA IN BLOCK AT ######## BDW=X''########''=+
               =>LEN=##### DCBBLKSI=12345 **'
SSEOFMSG DC    CL78'*************** REVIEW STORAGE AREA IN EXTENDED REG+
               ION IS FULL ***************'


************************************************************
*                                                          *
*         TRANSLATE TABLES                                 *
*                                                          *
************************************************************

XLATABLS DS    0F

*              3270 EBCDIC/APL TRANSLATION                       GP@P6
EDITT    DC    28X'4B',X'1C4B1E',33X'4B'           DUP AND FIELD MARK
         DC    X'404142434445464748494A4B4C4D4E4F'  (ANY CODES FROM
         DC    X'505152535455565758595A5B5C5D5E5F'  ANY DISPLAY MODE
         DC    X'606162636465666768696A6B6C6D6E6F'  TO BE EDITED WITH
         DC    X'7071724B4B4B4B4B78797A7B7C7D7E7F'  GE ET AL MUST BE
         DC    X'808182838485868788898A8B8C8D8E8F'  LEFT UNTRANSLATED.)
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'

*              FULL 3270 EBCDIC TRANSLATION                     GP@SECV
FULLT    DC    X'00010203044B064B4B4B4B4B0C0D4B4B'
         DC    X'104B4B4B141516174B194B4B1C4B1E4B'
         DC    X'4B4B4B4B4B4B26274B4B4B4B4B2D4B4B'
         DC    X'4B4B4B4B4B4B4B374B4B4B4B4B3D4B3F'
         DC    X'404142434445464748494A4B4C4D4E4F'  (BYTES SHOULD BE
         DC    X'505152535455565758595A5B5C5D5E5F'  TABLE OFFSET OR
         DC    X'606162636465666768696A6B6C6D6E6F'  PERIOD)
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'

FINDSBA  DC    17X'00',X'11',238X'00'
NUMERIC  DC    240X'FF',10X'00',6X'FF'
HEXTEST  DC    193X'FF',6X'00',41X'FF',10X'00',6X'FF'
HEXDATA  DC    193X'00',X'FAFBFCFDFEFF',41X'00',C'0123456789',6X'00'

KAPS     DC    AL1(X'40')          00 BECOMES 40
         DC    128AL1(*-KAPS)      01-80
         DC    9AL1(*-KAPS+X'40')  81-89 BECOME C1-C9
         DC    7AL1(*-KAPS)        8A-90
         DC    9AL1(*-KAPS+X'40')  91-99 BECOME D1-D9
         DC    8AL1(*-KAPS)        9A-A1
         DC    8AL1(*-KAPS+X'40')  A2-A9 BECOME E2-E9
         DC    86AL1(*-KAPS)       AA-FF

TABNONBL DC    64X'FF'
         DC    X'00'               BLANK
         DC    42X'FF'
         DC    X'FF'               COMMA
         DC    148X'FF'
TABBLANK DC    64X'00'
         DC    X'40'               BLANK
         DC    42X'00'
         DC    X'00'               COMMA
         DC    148X'00'
TABALPHA DC    129X'00'
         DC    9X'FF'              LOWER A-I
         DC    7X'00'
         DC    9X'FF'              LOWER J-R
         DC    8X'00'
         DC    8X'FF'              LOWER S-Z
         DC    23X'00'
         DC    9X'FF'              UPPER A-I
         DC    7X'00'
         DC    9X'FF'              UPPER J-R
         DC    8X'00'
         DC    8X'FF'              UPPER S-Z
         DC    22X'00'
TABQUOTE DC    125X'00',X'7D',130X'00'
TABDBLQO DC    127X'00',X'7F',128X'00'


**********************************************************************
*                                                          *         *
*         SUBCOMMAND LOOK-UP TABLE                         *  GP@P6  *
*                                                          *  02/94  *
**********************************************************************

*     SUBCOMMAND TABLE ENTRIES MUST BE SORTED INTO COLLATING SEQUENCE.
*     MAXIMUM SUBCOMMAND LENGTH IS 7 BYTES DUE TO TRAILING BLANK CHECK.

SUBCMDTB DS    0F  SUB-CMD     ROUTINE
         DC    CL8' SUBCMDS',A(0)
         DC    CL8'<       ',A(LEFT)
         DC    CL8'+       ',A(DOWN)
         DC    CL8'-       ',A(UP)
         DC    CL8'>       ',A(RIGHT)
         DC    CL8'?       ',A(GIVEPFKS)
         DC    CL8'=X      ',A(EQUALSX)
         DC    CL8'ADD     ',A(APPEND)
         DC    CL8'APPEND  ',A(APPEND)
         DC    CL8'ASCII   ',A(ASCII)
         DC    CL8'BOT     ',A(BOTTOM)
         DC    CL8'BOTTOM  ',A(BOTTOM)
         DC    CL8'CAN     ',A(CANCEL)
         DC    CL8'CANCEL  ',A(CANCEL)
         DC    CL8'COLOR   ',A(COLRMODE)
         DC    CL8'COLOUR  ',A(COLRMODE)
         DC    CL8'COM     ',A(COMMAND)
         DC    CL8'COMMAND ',A(COMMAND)
         DC    CL8'CUT     ',A(CUTOFF)
         DC    CL8'CUTOFF  ',A(CUTOFF)
         DC    CL8'CUTOVER ',A(CUTOFF)
         DC    CL8'DEBUG   ',A(DEBUG)
         DC    CL8'DIR     ',A(DIRCMD)
         DC    CL8'DISP    ',A(DISPCMD)
         DC    CL8'DISPLAY ',A(DISPCMD)
         DC    CL8'DOWN    ',A(DOWN)
         DC    CL8'END     ',A(END)
         DC    CL8'EREP    ',A(EREPMODE)
         DC    CL8'EXIT    ',A(EQUALSX)
         DC    CL8'F       ',A(FIND)
         DC    CL8'FH      ',A(FINDHEX)
         DC    CL8'FHN     ',A(FINDHEXN)
         DC    CL8'FIND    ',A(FIND)
         DC    CL8'FINDHEX ',A(FINDHEX)
         DC    CL8'FINDNOT ',A(FINDNOT)
         DC    CL8'FINDPIC ',A(FINDPIC)
         DC    CL8'FINDSMF ',A(FINDSMF)
         DC    CL8'FMT     ',A(FMTMODE)
         DC    CL8'FMTVAR  ',A(FMTVAR)
         DC    CL8'FN      ',A(FINDNOT)
         DC    CL8'FORMAT  ',A(FMTMODE)
         DC    CL8'FP      ',A(FINDPIC)
         DC    CL8'FPN     ',A(FINDPICN)
         DC    CL8'FS      ',A(FINDSMF)
         DC    CL8'FSH     ',A(HELCMD)
         DC    CL8'FSHELP  ',A(HELCMD) &HEL2 (REMEMBER COLLATING ORDER)
         DC    CL8'FULL    ',A(FULL)
         DC    CL8'FV      ',A(FMTVAR)
         DC    CL8'FX      ',A(FINDHEX)
         DC    CL8'FXN     ',A(FINDHEXN)
         DC    CL8'HEL     ',A(HELCMD)  &HEL (REMEMBER COLLATING ORDER)
         DC    CL8'HELP    ',A(HELP)
         DC    CL8'HEX     ',A(HEXMODE)
         DC    CL8'KEYS    ',A(GIVEPFKS)
         DC    CL8'L       ',A(LIST)
         DC    CL8'LEFT    ',A(LEFT)
         DC    CL8'LIST    ',A(LIST)
         DC    CL8'LOC     ',A(LIST)
         DC    CL8'LOCATE  ',A(LIST)
         DC    CL8'MEM     ',A(MEMBERP)
         DC    CL8'MEMBER  ',A(MEMBERP)
         DC    CL8'NEWTOP  ',A(NEWTOP)
         DC    CL8'OFFLOAD ',A(CUTOFFLD)
         DC    CL8'PICDATA ',A(PICDATA)
         DC    CL8'RECALL  ',A(RECALL)
         DC    CL8'RES     ',A(RESET)
         DC    CL8'RESET   ',A(RESET)
         DC    CL8'RFIND   ',A(RFIND)
         DC    CL8'RIGHT   ',A(RIGHT)
         DC    CL8'SEQLOAD ',A(CUTOFFLD)
         DC    CL8'SMF     ',A(SMFMODE)
         DC    CL8'SNAP    ',A(SNAP)
         DC    CL8'SUB     ',A(SUB)
         DC    CL8'SUBCOM  ',A(SUBCOMP)
         DC    CL8'SUBMIT  ',A(SUBMIT)
         DC    CL8'TACKON  ',A(APPEND)
         DC    CL8'TOP     ',A(TOP)
         DC    CL8'TSO     ',A(TSO)
         DC    CL8'TSS     ',A(TSO)
         DC    CL8'UP      ',A(UP)
         DC    CL8'XCTL    ',A(XCTL)
         DC    F'-1'                         END OF SUBCOMMAND TABLE
SUBCMDL  EQU   12                            SUBCOMMAND ENTRY LENGTH


**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY PROGRAM FUNCTION KEY VALUES   *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************

HANDLPFK DS    0H
         USING HANDLPFK,R15
         MVC   MSG+2(14),=C'DISPLAY: ASCII'
         LA    R0,14
         STH   R0,MSG
         TM    MODE,ASCIISW        TRANSLATING ASCII?
         BO    DISPPFKS            YES
         MVC   MSG+11(32),=C'EBCDIC FULL STANDARD TRANSLATION'
         MVI   MSG+1,41
         CLI   PERIODS,C'.'        USING FULL EBCDIC TRANSLATION?
         BNE   DISPPFKS            YES
         MVC   MSG+18(23),=C'TEXT DISPLAY CHARACTERS'
         MVI   MSG+1,39
         CLI   PROFDATA+16,C'T'    USING TEXT EBCDIC TRANSLATION?
         BE    DISPPFKS            YES
         MVC   MSG+18(19),=C'KEYBOARD CHARACTERS'
         MVI   MSG+1,35
         TM    STATUS5,GEOK        GE SUPPORTED?
         BZ    DISPPFKS            NO
         MVC   MSG+26(15),=C'/APL CHARACTERS'
         MVI   MSG+1,39
DISPPFKS LA    R7,PFKTAB           POINT TO PFK TABLE
         LA    R0,1                BLUE FOR RELEASE NUMBER
         BAL   R14,COLOURSW
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     BLANK OUT LINE
         ICM   R1,15,FMTAREA       IS THERE A FORMAT DYNAMIC AREA?
         BZ    DSPFMTOK            NO
         USING @FMTAREA,R1
         LA    R0,FMTFELS          YES, POINT TO ELEMENT HOLD AREA
         C     R0,FMTFELAD         ANY ELEMENTS LOADED?
         BNL   DSPFMTOK            NO
         MVC   0(21,R6),=C'LOADED FORMAT NAME IS'
         MVC   22(8,R6),FMTNAME    SHOW FORMAT NAME
         DROP  R1                  @FMTAREA
DSPFMTOK TM    STATUS5,X3270+COLOR+GEOK  7-COLOUR AND GE SUPPORTED?
         BNO   SHOWPFKS            NO
         CLI   PAGESIZE+1,20       AT LEAST 20 DATA LINES?
         BL    SHOWPFKS            NO
         CLI   SCRNCOLS+3,80       80-COLUMN SCREEN?
         BNE   SHOWPFKS            NO
         CLI   0(R6),C'L'          LOADED FORMAT MESSAGE PRESENT?
         BNE   GETSNAZA            NO
         LA    R6,30(,R6)          YES, POINT PAST IT
GETSNAZA MVC   0(SNAZAL,R6),SNAZA  YES, SHOW SNAZZY PFK VALUE SCREEN
         LA    R6,SNAZAL(,R6)      SUPPLY HEADING
         LA    R0,24               LOAD NUMBER OF PFKS
         SLR   R1,R1
         IC    R1,PFKDISP          LOAD PFKS ALREADY SHOWN
         SR    R0,R1               LOAD PFKS TO SHOW
         SLL   R1,6                ASSUME PFKTABL IS 64
         LA    R7,0(R1,R7)         POINT TO FIRST PFK FOR THIS DISPLAY
         SRL   R1,6                ASSUME PFKTABL IS 64
         CLI   PAGESIZE+1,31       AT LEAST 32 DATA LINES?
         BH    SNAZYPFK            YES, PROBABLY A MODEL-4
         LA    R0,12               NO, JUST DO HALF OF THE PFKS
SNAZYPFK MVC   0(SNAZBL,R6),SNAZB  SUPPLY DETAIL LINE TEMPLATE
         LA    R1,1(,R1)           INCREMENT PFK NUMBER
         CVD   R1,DOUBLE
         OI    DOUBLE+7,15         SUPPLY IT
         UNPK  SNAZBPL(2,R6),DOUBLE+6(2)
         MVC   SNAZBL(PFKTABL-1,R6),1(R7)        LOAD PFK VALUE
         MVC   SNAZBL+63(SNAZBBL,R6),SNAZBB      RIGHT BORDER
         MVC   SNAZBL+63+SNAZBBL(9,R6),BLANKS    ALIGN FOR NEXT PFK
         LA    R6,SNAZBL+63+SNAZBBL+9(,R6)       POINT TO NEXT LINE
         LA    R7,PFKTABL(,R7)
         BCT   R0,SNAZYPFK         PROCESS NEXT PFK
         STC   R1,PFKDISP          REMEMBER LAST PFK SHOWN
         CLI   0(R7),0             REACHED END OF PFK TABLE?
         BNE   *+8                 NO, STATUS CORRECTLY FLAGGED
         MVI   PFKDISP,0           YES, NEXT TIME NEEDS A RESTART
         CLI   PAGESIZE+1,31       AT LEAST 32 DATA LINES?
         BH    SNAZOLLA            YES, PROBABLY A MODEL-4
         MVC   0(SNAZCLX,R6),SNAZC SUPPLY BOTTOM LINE TO TABLE DISPLAY
         LA    R6,SNAZCL(,R6)
         TM    STATUS4,HELOKAY     FULLSCREEN HELP AVAILABLE?
         BZ    NOPAD               NO, PADDING ALREADY SUPPLIED
         LA    R6,SNAZCLX-SNAZCL(,R6)  YES
         B     NOPAD               PADDING ALREADY SUPPLIED
SNAZOLLA MVC   0(SNAZDL,R6),SNAZD  SUPPLY BOTTOM LINE TO TABLE DISPLAY
         LA    R6,SNAZDL(,R6)      THE SNAZZINESS CONTINUES
         TM    STATUS4,HELOKAY     FULLSCREEN HELP AVAILABLE?
         BZ    NOPAD               NO, PADDING ALREADY SUPPLIED
         MVC   0(SNAZDLX,R6),HELMPRF   SUPPLY HELMSG ON SCREEN
         MVC   1(2,R6),MOD4POSI    SUPPLY CORRECT POSITION FOR HELMSG
         LA    R6,SNAZDLX(,R6)     ADJUST DATA STREAM LENGTH
         B     NOPAD               PADDING ALREADY SUPPLIED

SHOWPFKS MVC   73(7,R6),PFKRELNO   SHOW 'REVIEW' RELEASE NUMBER
         A     R6,SCRNCOLS
         LA    R0,6                YELLOW FOR HEADING
         BAL   R14,COLOURSW
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     BLANK OUT LINE
         MVC   29(21,R6),=C'CURRENT PF KEY VALUES'
         A     R6,SCRNCOLS
         LA    R0,2                RED FOR DASHES
         BAL   R14,COLOURSW
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     BLANK OUT LINE
         MVI   29(R6),C'-'
         MVC   30(20,R6),29(R6)
         A     R6,SCRNCOLS
         SH    R8,HW3              THREE DISPLAY LINES USED
         SLR   R1,R1
         IC    R1,PFKDISP          LOAD PFKS ALREADY SHOWN
         SLL   R1,6                ASSUME PFKTABL IS 64
         LA    R7,0(R1,R7)         POINT TO FIRST PFK FOR THIS DISPLAY
         SRL   R1,6                ASSUME PFKTABL IS 64
         LA    R5,3
FILPFKLP CLI   0(R7),0             END OF TABLE?
         BE    PFHELMSG            YES
         LA    R0,5                TURQUOISE FOR PFK LABEL
         BAL   R14,COLOURSW
         MVI   0(R6),C' '
         MVC   1(159+3,R6),0(R6)   INITIALIZE WITH BLANKS
         LA    R1,1(,R1)           INCREMENT PFK NUMBER
         MVC   9(3,R6),=C'PFK'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,15         SHOW PFK NUMBER
         UNPK  12(2,R6),DOUBLE+6(2)
         AH    R6,HW14             POINT PAST PFK LABEL
         LA    R0,1                BLUE FOR PFK CONTENTS
         BAL   R14,COLOURSW
         SH    R6,HW14             POINT BACK TO NEXT-LINE-MINUS-COLS
         MVC   17(PFKTABL-1,R6),1(R7)
         LA    R7,PFKTABL(,R7)
         LA    R5,1(,R5)           USED UP ANOTHER LINE
         A     R6,SCRNCOLS
         STC   R1,PFKDISP          REMEMBER LAST PFK SHOWN
         BCT   R8,FILPFKLP         SHOW NEXT PFK
         B     FILLED              RAN OUT OF DISPLAY LINES
PFHELMSG MVI   PFKDISP,0           YES, NEXT TIME NEEDS A RESTART
         TM    STATUS4,HELOKAY     FULLSCREEN HELP AVAILABLE?
         BZ    FILLED              NO
         SH    R8,HW2              STILL HAVE TWO LINES LEFT?
         BM    FILLED              NO, SCREEN IMAGE NOW FULL
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     CLEAR A LINE
         A     R6,SCRNCOLS
         LA    R0,7                WHITE FOR "HEL" MESSAGE
         BAL   R14,COLOURSW
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     CLEAR THE LINE
         MVC   17(L'HELMSG,R6),HELMSG
         A     R6,SCRNCOLS
         LA    R5,2(,R5)           TWO MORE LINES USED
         B     FILLED
         DROP  R15                 HANDLPFK

*        JUST AN EXCUSE TO USE APL DATA IN A SCREEN IMAGE        GP@P6
SNAZA    DCS   RTA,(5,74),C' '
PFKRELNO DC    CL7'(R&REL.)'       REVIEW RELEASE NUMBER
         DCS   SA,COLOUR,RED,RTA,(6,6),C' ',GE,X'C5'
         DCS   RTA,(6,12),GE,X'A2',GE,X'D7'
         DCS   RTA,(6,76),GE,X'A2',GE,X'D5'
         DCS   RTA,(7,6),C' ',GE,X'85'
         DCS   SA,COLOUR,YELLOW,C' PFK ',SA,COLOUR,RED,GE,X'85'
         DCS   SA,COLOUR,YELLOW,RTA,(7,38),C' ',C'CURRENT VALUE'
         DCS   RTA,(7,76),C' ',SA,COLOUR,RED,GE,X'85'
         DCS   RTA,(8,6),C' ',GE,X'C6',RTA,(8,12),GE,X'A2',GE,X'D3'
         DCS   RTA,(8,76),GE,X'A2',GE,X'D6',RTA,(9,6),C' '
SNAZAL   EQU   *-SNAZA
SNAZB    DCS   GE,X'85',SA,COLOUR,TURQ
SNAZBPL  EQU   *-SNAZB+3           OFFSET TO PFK DIGITS
         DC    C'PFK00'
SNAZBB   DCS   SA,COLOUR,RED,GE,X'85'
SNAZBBL  EQU   *-SNAZBB
         DCS   SA,COLOUR,BLUE
SNAZBL   EQU   *-SNAZB
SNAZC    DCS   GE,X'C4',RTA,(21,12),GE,X'A2',GE,X'C7'
         DCS   RTA,(21,76),GE,X'A2',GE,X'D4',RTA,(1,1),C' '
SNAZCL   EQU   *-SNAZC
HELMPRF  DCS   SBA,(23,13),SA,COLOUR,WHITE
HELMSG   DC    C'USE ''&HEL'' COMMAND OR PF-KEY FOR FULL-SCREEN TSO HEL+
               P'
SNAZCLX  EQU   *-SNAZC
SNAZDLX  EQU   *-HELMPRF
SNAZD    DCS   GE,X'C4',RTA,(33,12),GE,X'A2',GE,X'C7'
         DCS   RTA,(33,76),GE,X'A2',GE,X'D4',RTA,(1,1),C' '
SNAZDL   EQU   *-SNAZD
MOD4POSI DCS   (35,13)
         LTORG


**********************************************************************
*                                                          *  MOVED  *
*         FORMAT AND DISPLAY DEBUG DETAILS                 *  GP@GE  *
*                                                          *  01/98  *
**********************************************************************

HANDLDBG DS    0H                  CODE MOVED FROM FILBUG
         USING HANDLDBG,R8
* LINE 1
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     INITIALIZE WITH BLANKS
*        LA    R5,01(,R5)          COUNT LINES FILLED IN
         LA    R1,TGETREG2         POINT TO R15, R0, R1
         LA    R0,4                FIRST 4 BYTES (R15)
         LA    R15,0(,R6)
         BAL   R14,HEX
         LA    R15,1(,R15)
         LA    R0,4                SECOND 4 BYTES (R0)
         BAL   R14,HEX
         LA    R15,1(,R15)
         LA    R0,4                THIRD 4 BYTES (R1)
         BAL   R14,HEX
         LA    R15,1(,R15)
         ST    R4,DOUBLE
         LA    R1,DOUBLE
         LA    R0,4                DCB/ACB ADDRESS (R4)
         BAL   R14,HEX
         LA    R15,1(,R15)
         ST    R9,DOUBLE+4
         LA    R0,4                @DATA ADDRESS (R9)
         BAL   R14,HEX
         A     R6,SCRNCOLS         ADD LINE WIDTH

* LINE 2
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     INITIALIZE WITH BLANKS
*        LA    R5,01(,R5)          COUNT LINES FILLED IN
         LA    R1,REPLY+128        REPLY AREA
         ICM   R14,B'1111',TGETREG2+8 REPLY LENGTH RETURNED BY TGET
         BZ    FILLED
         BCTR  R14,0
         MVC   0(5,R6),=C'DATA:'   CHARACTER HEADER
         EX    R14,DBUGDATA        MOVE IN THE CHARACTER VERSION
         TR    0(160,R6),PERIODS   TRANSLATE UNPRINTABLES
         A     R6,SCRNCOLS         ADD LINE WIDTH

* LINE 3
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     INITIALIZE WITH BLANKS
*        LA    R5,01(,R5)          COUNT LINES FILLED IN
         LA    R1,REPLY+128        REPLY AREA
         L     R0,TGETREG2+8       REPLY LENGTH RETURNED BY TGET
         CH    R0,=H'128'          BIGGER THAN ARBITRARY MAXIMUM?
         BNH   *+8                 NO
         LH    R0,=H'128'          YES, REDUCE TO ARBITRARY MAXIMUM
         LR    R15,R6
         AR    R6,R0
         AR    R6,R0               POINT PAST HEX CHARACTERS
         BAL   R14,HEX             CONVERT REPLY TO HEX
         B     ADDPAD              CLEAR THE REST OF THE SCREEN
DBUGDATA MVC   5(0,R6),0(R1)       <<< EXECUTED >>>
         DROP  R8                  HANDLDBG

         LTORG
         DS    0H


**********************************************************************
*                                                          *         *
*         HANDLE APL CHARACTERS AND SHOW SQUARE BRACKETS   *  GP@P6  *
*                                                          *  05/92  *
**********************************************************************

*
*         THIS CODE IS ONLY INVOKED WHEN IN CHARACTER MODE (IE.
*         'HEX OFF').  ITS FUNCTION IS TO ATTEMPT TO DISPLAY
*         NON-STANDARD PRIMARY CODE POINTS BY USING THE
*         CORRESPONDING CODE POINTS FROM THE ALTERNATE (IE. APL)
*         CHARACTER SET.  WHEN IN 'FULL ON' MODE THE BYTES TO BE
*         DISPLAYED ARE TRANSLATED THROUGH THE "FULLT" TRANSLATE
*         TABLE AND THEN SENT TO THE TERMINAL.  WHEN IN 'FULL OFF'
*         MODE THE BYTES TO BE DISPLAYED ARE TRANSLATED THROUGH
*         THE "EDITT" TRANSLATE TABLE AND THEN EXTRA PROCESSING
*         IS DONE HERE.
*
*         IF THE DISPLAY BYTES DO NOT HAVE ANY CODE POINTS
*         CORRESPONDING TO THE SUPPORTED APL CHARACTERS THEN
*         THE DISPLAY BYTES ARE SENT TO THE TERMINAL UNCHANGED.
*         OTHERWISE, IF GRAPHIC ESCAPE IS NOT SUPPORTED THEN
*         THESE EXTRA CODE POINTS ARE TRANSLATED TO PERIODS WITH
*         THE "APLOFFT" TRANSLATE TABLE.  SINCE FIND TEXT HIGHLIGHTING
*         DATA STREAM ORDERS MAY BE INBEDDED IN THE DATA, CARE MUST
*         BE TAKEN TO AVOID CHANGING 3270 ORDER BIT PATTERNS.  HENCE,
*         THE EXPLICIT TREATMENT OF SA DURING APL SCAN, AND THE
*         NON-TRANSLATION OF X'41' AND X'42' (WHICH HAPPEN TO BE
*         SQUARE BRACKETS FOR 3278 ET AL SCREENS) WHEN APL IS NOT
*         SUPPORTED.
*
*         THE EFFECT OF "EDITT" FOLLOWED BY "APLOFFT" TRANSLATIONS
*         IS SIMILAR TO THE OLD "KEYBT" TRANSLATION COMMENTED OUT
*         BELOW.  NOTE THAT SINCE ASCII TERMINALS SUPPORT SQUARE
*         BRACKETS, X'AD' AND X'BD' ARE SENT UNCHANGED.  THIS
*         CHANGE IS PROMPTED BY THE WIDER USE OF THE 'C' PROGRAMMING
*         LANGUAGE WHICH HAS SQUARE BRACKETS IN ITS SYNTAX.
*         SOME TSO HELP MEMBERS AND SOME OF THE NEWER SYSTEM MACROS
*         ALSO CONTAIN SQUARE BRACKETS (AND OTHER APL CHARACTERS)
*         IN THEIR SYNTAX DOCUMENTATION.
*
*         IF GRAPHIC ESCAPE IS SUPPORTED THEN CODE POINTS FLAGGED
*         IN THE "APLT" TABLE HAVE A GRAPHIC ESCAPE INSERTED IN
*         FRONT OF THEM, THUS CAUSING THE CORRESPONDING CODE POINTS
*         FROM THE APL CHARACTER SET TO BE DISPLAYED.
*
*         AS CODED HERE, "ISPF 3278A" BEHAVIOUR IS PERFORMED
*         AUTOMATICALLY IF APL IS SUPPORTED BY THE TERMINAL,
*         WITHOUT REFERENCE TO ANY PROFILE SETTINGS.
*
*         CHANGED TO ALLOW "ISPF 3278T" BEHAVIOUR FOR BETTER
*         PRINTOUT AND SYS1.MACLIB ESA MACRO COMMENTS READABILITY.
*         THE 'DISPLAY' SUBCOMMAND CAN BE USED TO CONTROL WHICH
*         DISPLAY CHARACTER SET IS USED.
*
*         IN SUMMARY, 'FULL ON' CAUSES AS MANY CODE POINTS AS
*         POSSIBLE TO BE SENT UNTRANSLATED TO THE TERMINAL FOR
*         DISPLAY FROM THE PRIMARY CHARACTER SET.  'FULL OFF' IS
*         MEANT TO MAXIMIZE THE MEANING OF THE CHARACTERS SHOWN.
*         THIS IS DONE BY JUST SHOWING KEYBOARD-SUPPORTED CHARS,
*         NOW INCLUDING SQUARE BRACKETS (SUPPORTED NATIVELY BY
*         ASCII TERMINALS).  FURTHER, OTHER APL CHARS ARE ALSO
*         INCLUDED TO DEMONSTRATE THE GENERALITY OF THIS CODE AND
*         TO JUST BE PERVERSE.  NOTE THAT THE APL DOWN ARROW (CODE
*         POINT X'8A') CORRESPONDS TO NEW-PAGE FOR RECFM=M.
*
*         THIS CODE IS INVOKED ONE DISPLAY LINE AT A TIME, AND
*         ONLY FOR FILE DATA AND NOT FOR STATUS INFORMATION.
*
HANDLAPL DS    0H
         USING HANDLAPL,R15
*        TM    MODE,MODEX          IN CHARACTER MODE?
*        BO    FILLNEXT            NO, BUT ONLY GET HERE IF YES
*        CLC   PERIODS,EDITT       USING KEYBOARD CHARACTERS ONLY?
         CLI   PERIODS,C'.'        USING KEYBOARD CHARACTERS ONLY?
         BNE   FILLNEXT            NO, DO NOT EDIT FULL TRANSLATION
         L     R1,DOUBLE           YES, POINT TO DISPLAY LINE
CHECKAPL LR    R14,R6              POINT TO NEXT-LINE-MINUS-COLS
         A     R14,SCRNCOLS        POINT TO NEXT DISPLAY LINE
         BCTR  R14,0               POINT TO DISPLAY LINE'S LAST BYTE
         ST    R14,DOUBLE+4        SAVE FOR NOT VERY MUCH LATER
         SR    R14,R1              GET LINE'S DATA STREAM LENGTH CODE
         BM    FILLNEXT            RETURN IF WHOLE LINE NOW PROCESSED
         LA    R2,APLTA            POINT TO APL TEST TABLE
         CLI   PROFDATA+16,C'A'    CORRECT TABLE?
         BE    DOAPLCHK            YES
         LA    R2,APLTT            NO, POINT TO TEXT TEST TABLE
DOAPLCHK EX    R14,APLCHECK        ANY CODE POINTS REQUIRING GE?
         BZ    FILLNEXT            NO, NO EDITING REQUIRED
         CLI   0(R1),X'28'         FOUND A SET ATTRIBUTE ORDER?
         BE    SANOTAPL            YES, THIS IS NOT APL - DO NOT EDIT
         CLM   R2,1,APLOFFTA+C'.'  TRANSLATED TO PERIOD?
         BNE   PUTINAGE            NO, MAY HAVE TO INSERT A GE
         STC   R2,0(,R1)           YES, OVERLAY CHARACTER WITH PERIOD
         LA    R1,1(,R1)           THIS BYTE NOW PROCESSED
         B     CHECKAPL            GO TEST FOR MORE APL DATA
PUTINAGE L     R14,DOUBLE+4        GET DATA STREAM LENGTH CODE STILL
         SR    R14,R1                  TO PROCESS FOR THIS LINE
         TM    STATUS5,GEOK        IS GE SUPPORTED BY TERMINAL?
         BZ    REMOVAPL            NO, HANDLE IN THE USUAL WAY
         EX    R14,APLSAVE         MOVE LINE'S TEXT AWAY
         MVI   0(R1),X'08'         INSERT A GRAPHIC ESCAPE
         EX    R14,APLRSTR         MOVE LINE'S TEXT BACK
         CLI   PROFDATA+16,C'A'    ANY TRANSLATION REQUIRED?
         BE    APLCHROK            NO
         TR    1(0,R1),APLTT       CONVERT DATA TO CORRECT CODE POINT
APLCHROK LA    R6,1(,R6)           INCREMENT BUFFER POINTER
         LA    R1,2(,R1)           ADJUST PROCESSED POINTER
         B     CHECKAPL            GO TEST FOR MORE APL DATA
SANOTAPL LA    R1,3(,R1)           SKIP OVER SA ORDER SEQUENCE
         B     CHECKAPL            RESUME SCAN FOR APL CODE POINTS
REMOVAPL LA    R2,APLOFFTA         POINT TO KEYBOARD CHARACTER TABLE
         CLI   PROFDATA+16,C'A'    CORRECT TABLE?
         BE    DOAPLREM            YES
         LA    R2,APLOFFTT         NO, POINT TO PSEUDO-TEXT TABLE
DOAPLREM TR    0(1,R1),0(R2)       TRANSLATE APL CODE POINT
         TM    STATUS5,HILITE      IS UNDERSCORE SUPPORTED BY TERMINAL?
         BZ    APLREMOK            NO, JUST TRANSLATE CODE POINT
         CLI   0(R1),X'40'         VALID DISPLAYABLE CHARACTER?
         BNL   APLREMOK            YES
         OI    0(R1),X'40'         NO, MAKE IT SUCH (<=, +/-, >=)
         SH    R1,HW3
         CLC   0(3,R1),NORMAL      JUST DONE A HIGHLIGHT RESET?
         BNE   ADDUSCOR            NO, HAVE TO INSERT ORDERS
         ICM   R2,15,0(R1)         YES, LOAD ORDER AND CHARACTER
         STCM  R2,1,0(R1)          PLACE CHARACTER OVER ORDER
         STCM  R2,14,1(R1)         REPLACE ORDER AFTER CHARACTER
         LA    R1,3(,R1)           RESTORE POINTER VALUE
APLREMOK OI    0(R1),X'40'         MAKE CHARACTER (<=, +/-, >=) VALID
         LA    R1,1(,R1)           ADJUST PROCESSED POINTER
         B     CHECKAPL            GO SHOW THIS RECORD
ADDUSCOR LA    R1,3(,R1)           RESTORE POINTER VALUE
         EX    R14,APLSAVE         MOVE LINE'S TEXT AWAY
         EX    R14,APLRSTR2        MOVE LINE'S TEXT BACK
         MVC   0(3,R1),USCORE      LOAD ORDER SEQUENCE FOR UNDERSCORE
         MVC   3(1,R1),6(R1)       LOAD DISPLAY CHARACTER
         MVC   4(3,R1),NORMAL      LOAD ORDER SEQUENCE FOR NO HIGHLIGHT
         LA    R6,6(,R6)           INCREMENT BUFFER POINTER
         LA    R1,7(,R1)           ADJUST PROCESSED POINTER
         B     CHECKAPL            GO PROCESS REMAINDER OF RECORD

APLCHECK TRT   0(0,R1),0(R2)       <<< EXECUTED >>>
APLSAVE  MVC   180(0,R1),0(R1)     <<< EXECUTED >>>
APLRSTR  MVC   1(0,R1),180(R1)     <<< EXECUTED >>>
APLRSTR2 MVC   6(0,R1),180(R1)     <<< EXECUTED >>>
         DROP  R15                 HANDLAPL

*                        TABLE OF CODE POINTS ELIGIBLE FOR GE INSERTION

APLTA    DS    0H                                   "3278A"
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000002800000000000000'  SET ATTRIBUTE
         DC    X'00000000000000000000000000000000'
         DC    X'00414243444546474849000000000000'  (BYTES SHOULD BE
         DC    X'00515253545556575859000000000000'  TABLE OFFSET OR
         DC    X'00006263646566676869000000000000'  NULL FOR NATIVE
         DC    X'4B717200000000007800000000000000'  DISPLAY OR PERIOD
         DC    X'800000000000000000008A8B8C8D8E8F'  FOR TRANSLATION
         DC    X'900000000000000000009A9B4B9D4B9F'  TO PERIOD.)
         DC    X'A0000000000000000000AAABACADAEAF'
         DC    X'B0B1B2B3B44BB6B7B84BBABBBCBDBEBF'
         DC    X'00000000000000000000CACB4BCD4BCF'
         DC    X'00000000000000000000DADBDCDDDEDF'
         DC    X'004B0000000000000000EAEB4BEDEEEF'
         DC    X'000000000000000000004BFBFCFDFE00'

APLTT    DS    0H                                   "3278T"
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000002800000000000000'  SET ATTRIBUTE
         DC    X'00000000000000000000000000000000'
         DC    X'004B4B4B4B4B4B4B4B4B000000000000'
         DC    X'00E1E2E34B4B4B4B4B4B000000000000'
         DC    X'00004B4B4B4B4B4B4B4B000000000000'
         DC    X'A4A14B00000000004B00000000000000'
         DC    X'4B0000000000000000008AC08CC1C2D3'
         DC    X'9000000000000000000000D09CD19EC3'
         DC    X'D2000000000000000000FDC4C5ADAEA3'
         DC    X'F0F1F2F3F4F5F6F7F8F9BAD4D5BDBEA2'
         DC    X'00000000000000000000BBC7D778EAEB'
         DC    X'00000000000000000000EEFCC8D89F8F'
         DC    X'00B70000000000000000FBC6D6DDDC71'
         DC    X'00000000000000000000BF8EEFFE8D00'

*                     CONVERT "APLT" CODE POINTS TO PERIODS TRANSLATION

APLOFFTA DS    0H                                   "3278A"
         DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'  DO NOT TRANSLATE
         DC    X'202122232425262728292A2B2C2D2E2F'  POSSIBLE CONTROL
         DC    X'303132333435363738393A3B3C3D3E3F'  CODES AND 3270
         DC    X'4041424B4B4B4B4B4B4B4A4B4C4D4E4F'  ORDERS.
         DC    X'504B4B4B4B4B4B4B4B4B5A5B5C5D5E5F'
         DC    X'60614B4B4B4B4B4B4B4B6A6B6C6D6E6F'
         DC    X'4B4B4B4B4B4B4B4B4B797A7B7C7D7E7F'
         DC    X'4B8182838485868788894B4B4B4B4B4B'
         DC    X'4B9192939495969798994B4B4B4B4B4B'
         DC    X'4BA1A2A3A4A5A6A7A8A94B4B4BAD4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4BBD4B4B'
         DC    X'C0C1C2C3C4C5C6C7C8C94B4B4B4B4B4B'
         DC    X'D0D1D2D3D4D5D6D7D8D94B4B4B4B4B4B'
         DC    X'E04BE2E3E4E5E6E7E8E94B4B4B4B4B4B'
         DC    X'F0F1F2F3F4F5F6F7F8F94B4B4B4B4B4B'

APLOFFTT DS    0H                                   "3278T"
         DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'  DO NOT TRANSLATE
         DC    X'202122232425262728292A2B2C2D2E2F'  POSSIBLE CONTROL
         DC    X'303132333435363738393A3B3C3D3E3F'  CODES AND 3270
         DC    X'4041424B4B4B4B4B4B4B4A4B4C4D4E4F'  ORDERS.
         DC    X'50F1F2F34B4B4B4B4B4B5A5B5C5D5E5F'
         DC    X'60614B4B4B4B4B4B4B4B6A6B6C6D6E6F'
         DC    X'954B4B4B4B4B4B4B4B797A7B7C7D7E7F'
         DC    X'4B8182838485868788894BC00C4D4E4E'
         DC    X'4B9192939495969798994BD05C5D0E4B'
         DC    X'60A1A2A3A4A5A6A7A8A94B6060412E96'
         DC    X'F0F1F2F3F4F5F6F7F8F94B6060425F60'
         DC    X'C0C1C2C3C4C5C6C7C8C94B60604B4B4B'
         DC    X'D0D1D2D3D4D5D6D7D8D94B4B4B4B4C6E'
         DC    X'E0E0E2E3E4E5E6E7E8E94B4F4F4B4B4B'
         DC    X'F0F1F2F3F4F5F6F7F8F94F4F4B4B4F4B'

*               ENGLISH ASCII/EBCDIC KEYBOARD CHARACTERS TRANSLATION
*               WHICH IS EFFECTIVELY USED WHEN IN 'FULL OFF' MODE
*               ON A TERMINAL WITHOUT GRAPHIC ESCAPE (APL) SUPPORT.
*KEYBT   DC    28X'4B',X'1C4B1E',33X'4B',X'40',9X'4B'   DUP,FM,BLANK
*        DC    X'4A4B4C4D4E4F'       CENT,PERIOD,LESS,LPAREN,PLUS,BAR
*        DC    X'50',9X'4B'          AMPERSAND
*        DC    X'5A5B5C5D5E5F'       EXCL,$,ASTERISK,RPAREN,SEMI,NOT
*        DC    X'6061',8X'4B'        HYPHEN,SLASH       POINT
*        DC    X'6A6B6C6D6E6F'       WHAT,COMMA,PERCENT,UNDLN,GT,QM
*        DC    9X'4B',X'79'          70-78              BACK-QUOTE
*        DC    X'7A7B7C7D7E7F'       COLON,POUND,AT,APOST,EQ,DBLQUOTE
*        DC    X'4B'
*        DC    X'818283848586878889',7X'4B'
*        DC    X'919293949596979899',7X'4B'
*        DC    X'A1A2A3A4A5A6A7A8A9'             TILDE
*        DC    3X'4B',X'AD',15X'4B',X'BD4B4B'    SQUARE BRACKETS
*        DC    X'C0',C'ABCDEFGHI',6X'4B'         LEFT BRACE
*        DC    X'D0',C'JKLMNOPQR',6X'4B'         RIGHT BRACE
*        DC    X'E04B',C'STUVWXYZ',6X'4B'        BACK SLASH
*        DC    C'0123456789',6X'4B'
         EJECT
************************************************************
*                                                          *
*         PHASE 2 INITIALIZATION SUBROUTINE                *
*                                                          *
************************************************************

FAS2INIT DS    0H
         USING FAS2INIT,R5
         SLR   R0,R0
         STH   R0,OFFSET           START AT LEFT MAX
         ST    R0,COUNT            RESET LINE COUNT
         ST    R0,KOUNT            ZERO JUST-OPENED FILE BYTE COUNT
         ST    R0,FNDNUM
         STH   R0,FNDOFF
         ST    R0,CHKPTBOT
         ST    R0,CHKPTDUM
         ST    R0,CHKPTDUM+4
         L     R2,ANSWER           MAYBE POINT TO ACB I/O WORK AREA
         TM    STATUS,STGMVU       DONE THIS BEFORE?
         BO    ACBREOPN            YES, MUST BE AFTER AN ACB 'NEWTOP'
         MVC   COL1LBL,BLANKS      INITIALIZE COLUMN 1 LABEL
         MVI   COL1LBL,C'1'
         TM    $UCBAD,ACBSW        WILL I/O BE VIA AN ACB?
         BO    ACBINIT             YES, SO DON'T DO DCB INITIALIZATION

************************************************************
*                                                          *
*         SET UP THE DCB                                   *
*                                                          *
************************************************************

         DS    0H
         LA    R4,DYNDCBW
*        USING IHADCB,R4
         MVC   DOUBLE(1),TSTRECFM  COPY RECFM FOR OPEN BPAM FILE
         TM    STATUS,STOPEN       FILE OPEN? (BEEN HERE BEFORE?)
         BO    OPENX               YES, EVERYTHING IS SET UP
         MVC   DYNDCBW(SEQDCBL),SEQDCB
         ICM   R0,B'1111',$UCBAD   PERFORMING I/O TO ACTUAL DEVICE?
         BZ    SUBSYSAM            NO, USING A SUBSYSTEM ACCESS METHOD
         TM    DSORG,X'02'         PARTITIONED ORGANIZATION DATA SET?
         BZ    DCBINITD            NO, DON'T USE BPAM
         B     USEBPAM             YES, USE BPAM
SUBSYSAM NI    DCBMACR1,255-DCBMRPT1    TURN OFF NOTE/POINT FOR BSAM
         CLC   $MEMBER,BLANKS      MEMBER NAME SUPPLIED?
         BNE   DCBINITD            YES, ASSUME A MEMBER NEEDS ACCESSING
         CLI   DATAKV+1,1          NO, IS 'DATA' SPECIFIED?
         BE    DCBINITD            YES, DO NOT USE BPAM
USEBPAM  MVC   DYNDCBW(PDSDCBL),PDSDCB
DCBINITD MVC   DCBDDNAM(8),$DDNAME LOAD DDNAME INTO DCB BEFORE OPEN
         TM    MYDSCB-44+83,X'08'  VSAM DATA SET?
         BZ    CVOLDIR             NO
         CLI   DSORGTYP,X'CF'      SCANNING VVDS?
         BE    CVOLDIR             YES, USE 4K BLOCKSIZE FROM VTOC
         TM    STATUS6,DB2TBL      REVIEWING DB2 TABLESPACE?
         BO    CVOLDIR             YES, USE 4K BLOCKSIZE FROM VTOC
         LH    R15,AMBLKSZ         YES, LOAD FETCHED BLOCKSIZE
         LTR   R15,R15             IS BLOCK SIZE LOOKING GOOD?
         BP    AMBLKSOK            YES, USE IT
         L     R15,FW32760         NO, USE BIGGEST BLOCKSIZE ALLOWED
AMBLKSOK CH    R15,HW4096          BLOCKSIZE MORE THAN 4K?
         BNH   CVOLDIR             NO, STAY WITH 4K (FROM FMT1 DSCB)
         STH   R15,DCBBLKSI        HANDLE DFP VSAM BLOCKS EVEN
CVOLDIR  DS    0H                      IF LARGER THAN VTOC SAYS
         CLI   DSORGTYP,X'FF'      CVOL? (OR PDS DIRECTORY?)
         BNE   NODCBZAP            NO
         MVC   DYNDCBW(SEQDCBL),SEQDCB
         MVC   DCBDDNAM(8),$DDNAME LOAD DDNAME INTO DCB BEFORE OPEN
         MVC   $MEMBER,BLANKS      ERASE MEMBER NAME
         MVI   DSORG,X'40'         PRETEND TO BE SEQUENTIAL
         MVI   DCBRECFM,X'81'      FIXED & KEYED
         MVI   DCBKEYLE,8          KEYLENGTH = 8
         MVI   AMKLN+1,8           KEYLENGTH = 8
         LA    R15,256
         STH   R15,DCBLRECL        LRECL = 256
         STH   R15,DCBBLKSI        BLKSIZE = 256
NODCBZAP DS    0H

*        LA    R15,DYNEOD
*        STCM  R15,7,DCBEODA

*        LA    R15,DYNSYNAD
*        STCM  R15,7,DCBSYNA

         LA    R15,DYNEXLST
         STCM  R15,7,DCBEXLSA
         LA    R1,DYNDCBEX
         ST    R1,0(,R15)
         MVI   0(R15),X'05'        OPEN EXIT
         LA    R1,DYNABEND
         ST    R1,4(,R15)
         MVI   4(R15),128+X'11'    OPEN ABEND EXIT (MVS)

         MVI   SYNADSW,X'00'       NO SYNAD ERROR YET
         OI    STATUS,STOPEN       TELL CLEANUP TO CLOSE DCB
         MVI   OPEND,X'80'

         CLI   DSORGTYP,X'DD'      PROCESSING VTOC? ("DISK DIRECTORY"?)
         BNE   NORMOPEN            NO, DO NOT USE OPEN-J
         MVI   4(R15),X'11'        OPEN ABEND EXIT NO LONGER LAST EXIT
         LA    R0,JFCB
         ST    R0,8(,R15)
         MVI   8(R15),128+X'07'    READ JFCB EXIT
         RDJFCB ((R4)),MF=(E,OPEND)
         MVI   JFCB,X'04'          SET VTOC DATA SET NAME
         MVC   JFCB+1(43),JFCB
         MVI   DCBRECFM,X'81'      FIXED & KEYED
         MVI   DCBKEYLE,44         KEYLENGTH = 44
         MVI   AMKLN+1,44          KEYLENGTH = 44
         LA    R15,96
         STH   R15,DCBLRECL        LRECL = 96
         STH   R15,DCBBLKSI        BLKSIZE = 96
         MVI   OPEND,X'80'
         OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEND)
         XC    KOUNT,KOUNT         RESET BORROWED DYNEXLST WORD
         B     AFTROPEN

NORMOPEN DS    0H
         OPEN  ((R4),INPUT),MF=(E,OPEND)

AFTROPEN DS    0H
         TM    DCBOFLGS,X'10'
         BO    OKOPEN
         LA    R1,MSG08
         LA    R0,L'MSG08
         TM    STATUS,STNOMEM      MEMBER NOT FOUND?
         BO    DYNOPENM            YES, BRANCH
         LA    R1,MSG04
         LA    R0,L'MSG04
DYNOPENM BAL   R14,PUTMSG
         B     EXIT12

DYNDCBEX DS    0H
*              TESTING THE RECFM FOR RECFM V OR F
*              REQUIRES AT LEAST 2 TESTS BECAUSE BOTH THE
*              V AND F BITS ARE ON WHEN RECFM IS U.
*              THIS ROUTINE MAKES A COPY OF THE RECFM BITS
*              AND ZEROES BOTH THE V AND F BITS IN THE COPY
*              IF THE RECFM IS U.  NOW WE CAN DETERMINE
*              RECFM V OR F IN ONE TEST INSTEAD OF TWO.
*              (DOUBLE ONLY USED TO FUDGE SPANNED BIT FOR VSAM.)
         TM    DCBRECFM,X'C0'      IS RECORD FORMAT F, V OR U?
         BNZ   DYNRFMOK            YES, I SHOULD HOPE SO
         OI    DCBRECFM,X'C0'      NO, MAKE IT U
DYNRFMOK OC    DCBBLKSI,DCBBLKSI   IS THE BLKSIZE NON-ZERO?
         BNZ   DYNBLKOK            YES, I SHOULD HOPE SO
         MVC   DCBBLKSI,FW32760+2  NO, MAKE IT 32760
         OI    DCBRECFM,X'C0'      ALSO FORCE RECFM U
DYNBLKOK MVC   TSTRECFM,DCBRECFM   COPY RECFM
         MVC   DOUBLE(1),DCBRECFM  COPY RECFM AGAIN
         TM    DCBRECFM,X'C0'      RECFM U?
         BNO   DYNTSTOK            NO, BRANCH
         NI    TSTRECFM,255-X'C0'  YES, SET BOTH BITS OFF
DYNTSTOK TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BNOR  R14                 NO
         TM    TSTRECFM,X'10'      FIXED BLOCKED?
         BOR   R14                 YES
         MVC   DCBLRECL,DCBBLKSI   LRECL=BLKSIZE FOR FIXED UNBLOCKED
         BR    R14

DYNABEND DS    0H
         TM    3(R1),B'00001110'   ANY PROCESSING ALLOWED?
         BZR   R14                 NO
         OI    STATUS,STABEND      INDICATE OPEN ABENDED
         L     R8,0(,R1)           GET COMPLETION CODE
         N     R8,=A(X'FFF0FF00')
         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND?
         BNE   *+8                 NO
         OI    STATUS,STNOMEM      INDICATE MEMBER NOT FOUND
         MVI   3(R1),4             IGNORE THE ABEND
         BR    R14

OKOPEN   DS    0H
         TM    STATUS2,CARTRIDG    REVIEWING A 3480?
         BZ    OKOPENOK            NO
         MVC   REPLY(DSP3480L),DISP3480       (TEMPORARY WORK AREA)
         MSGDISP RDY,DCB=(R4),MF=(E,REPLY)    (1ST VOLUME ONLY)
OKOPENOK DS    0H
         MVC   DYNDECBW(DYNDECBL),DYNDECB
OPENX    DS    0H

************************************************************
*                                                          *
*         SET UP THE BUFFER AREA                           *
*                                                          *
************************************************************

         SLR   R0,R0
         IC    R0,DCBKEYLE         KEY LENGTH
         TM    STATUS2,MAGTAPE     MAGNETIC TAPE FILE?
         BZ    GOTKEYLE            NO, HAVE NOW GOT THE KEY LENGTH
         SLR   R0,R0               YES, TAPE BLOCKS DON'T HAVE KEYS
         TM    DCBDEVT,X'80'       MAGNETIC TAPE FILE?
         BZ    GOTKEYLE            NO, HAVE NOW GOT THE KEY LENGTH
         MVC   COL1LBL+2(5),=C'NOCMP'
         CLI   DCBTRTCH,X'04'      NO COMPACTION?
         BE    GOTKEYLE            YES
         MVC   COL1LBL+2(5),=C'CMPAC'
         CLI   DCBTRTCH,X'08'      COMPACTION?
         BE    GOTKEYLE            YES
         MVC   COL1LBL+2(5),=C'DEN=0'
         CLI   DCBDEN,X'03'        200 BPI?
         BE    GOTKEYLE            YES, DENSITY=0
         MVI   COL1LBL+6,C'1'
         CLI   DCBDEN,X'43'        556 BPI?
         BE    GOTKEYLE            YES, DENSITY=1
         MVI   COL1LBL+6,C'2'
         CLI   DCBDEN,X'83'        800 BPI?
         BE    GOTKEYLE            YES, DENSITY=2
         MVI   COL1LBL+6,C'3'
         CLI   DCBDEN,X'C3'        1600 BPI?
         BE    GOTKEYLE            YES, DENSITY=3
         MVI   COL1LBL+6,C'4'
         CLI   DCBDEN,X'D3'        6250 BPI?
         BE    GOTKEYLE            YES, DENSITY=4
         MVC   COL1LBL+2(5),=C'CART '
         CLI   DCBDEVT,X'80'       3480 MAGNETIC TAPE UNIT?
         BE    GOTKEYLE            YES
         MVC   COL1LBL+2(4),=C'TAPE'
GOTKEYLE LTR   R0,R0               READING LEADING KEYS (K OF CKD)?
         BNZ   RESETRKP            YES, ENSURE WE THINK RKP IS ZERO
         ICM   R1,3,AMKLN          NON-KEYED ACCESS OF KEYED FILE?
         BZ    KEYORNOT            NO, JUST PLAIN UNKEYED FILE
         ICM   R1,3,AMRKP          YES, IS KEY IMBEDDED IN DATA?
         BNZ   KEYORNOT            YES, RED RULER FOR SOFTWARE KEY
         STCM  R0,12,AMKLN         NO, KEY NOT READ SO NO RED RULER
*        B     KEYORNOT            AMRKP IS ZERO ANYWAY SO SKIP JUMP
RESETRKP STCM  R0,12,AMRKP         RED RULER FOR LEADING HARDWARE KEY
KEYORNOT ST    R0,SAVKEYLE
         LH    R0,DCBBLKSI
         A     R0,SAVKEYLE
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
         ST    R0,SAVBLKSI         SAVE FOR PARTITIONING

         SLR   R0,R0
         ST    R0,SAVSPANL         ZERO FOR UNSPANNED
         TM    MODE,VSAMSW         VSAM CI INTERPRETATION?
         BZ    SAMDCB              NO, DO USUAL CALCULATIONS
         OI    DOUBLE,X'08'        YES, TURN ON SPANNED BIT
         ICM   R0,B'1111',AMCIV    EXTRACTED CISIZE?
         BZ    USEVSBLK            NO
         ST    R0,SAVBLKSI         YES, USE IT AS BLOCK SIZE
         ICM   R0,15,AMLCL         GET MAXIMUM LRECL
         BZ    DB2TBCHK            ZERO, LINEAR SO CHECK FOR DB2
         TM    AMATR,VVRAMSPN      SPANNED VSAM?
         BO    GOTLRECL            YES, SPANNED FLAG ALREADY ON
         NI    DOUBLE,255-X'08'    DEFINITELY NOT (VVDS SAID SO)
         B     GOTLRECL            USE IT
DB2TBCHK TM    STATUS6,DB2TBL      CHECK FOR DB2 TABLESPACE
         BZ    USEVSBLK            USE BLOCK SIZE IF NON-DB2 LINEAR
         LA    R0,8
         A     R0,FW32760          GET 32K (32768)
         ST    R0,AMCIV            CALL THIS THE "CONTROLINTERVAL" SIZE
USEVSBLK LH    R0,DCBBLKSI         VVDS IS NOT SPANNED
         CLI   DSORGTYP,X'CF'      SCANNING VVDS?
         BE    GOTLRECL            YES, USE BLKSIZE AS MAXIMUM LRECL
         L     R0,FW32760          NO, CATER FOR SPANNED VSAM
         B     GOTLRECL            USE 32K-ISH AS LRECL

SAMDCB   TM    DCBRECFM,X'C0'      RECFM U?
         BO    USEBLKSI            YES, LRECL NOT ALWAYS ZERO
         LH    R0,DCBLRECL
         LTR   R0,R0
         BNZ   USELRECL
USEBLKSI LH    R0,DCBBLKSI
USELRECL A     R0,SAVKEYLE
GOTLRECL STH   R0,RECSIZE
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
*        CH    R0,HW1000           IS LRECL GREATER THAN MAX?
*        BNH   *+8                 NO, SKIP NEXT INSTR
*        LH    R0,HW1000           YES, HELD RECORDS MUST BE TRUNCATED
         ST    R0,SAVLRECL         SAVE FOR HOLD AREA DIVISION
         TM    DOUBLE,X'48'        VS OR VBS OR SPANNED VSAM?
         BNO   NOTSPAN             NO   (DOUBLE NOW FREE FOR WORK AREA)
         ST    R0,SAVSPANL         SAVE FOR PARTITIONING
NOTSPAN  MH    R0,PAGESIZE
         ST    R0,SAVHOLDL         SAVE FOR PARTITIONING

         A     R0,SAVSPANL         COMBINE LENGTHS FOR GETMAIN
         A     R0,SAVBLKSI         COMBINE LENGTHS FOR GETMAIN
         LA    R7,200
         SLL   R7,3                ASSUME CHKPTLN IS 8
         AR    R0,R7               PLUS ROOM FOR 200 CHECKPOINTS
         LA    R7,RANGE
         ST    R0,0(,R7)
         LA    R8,1848
         SLL   R8,3                ASSUME CHKPTLN IS 8
         AR    R0,R8               OPTIONAL ROOM FOR 2048 CHECKPOINTS
         ST    R0,4(,R7)
         LA    R8,ANSWER
         MVC   GMVUW(GMVUL),GMVU
         GETMAIN VU,LA=(R7),A=(R8),MF=(E,GMVUW)
         OI    STATUS,STGMVU
         L     R1,ANSWER
         LR    R0,R1
         A     R0,ANSWER+4
         ST    R0,ENDPTR           END OF GETMAINED AREA
         ST    R1,BLOCKPTR
         A     R1,SAVBLKSI         POINT PAST BLOCK AREA
         ST    R1,SPANPTR
         A     R1,SAVSPANL         POINT PAST SPANNED RECORD AREA
         ST    R1,HOLDPTR
         A     R1,SAVHOLDL         POINT PAST HOLD AREA
         ST    R1,CHKPTTOP
         XC    0(256,R1),0(R1)     FIRST ENTRY IN TABLE
         XC    DEBLOCKS(12),DEBLOCKS
         CLI   DSORGTYP,X'CF'      SCANNING VVDS FOR DETAILS?
         BE    VVDSSCAN            YES, GO DO IT

************************************************************
*                                                          *
*         INITIALIZE HOLD AREA DIRECTORY                   *
*                                                          *
************************************************************

HOLDINIT LA    R7,HOLDDIR-3072
         LA    R7,3072(,R7)
         SLR   R0,R0
         L     R15,HOLDPTR
         LH    R8,PAGESIZE         LINES PER PAGE
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    HOLDLOOP            NO
         LA    R15,4(,R15)         YES, POINT 4 BYTES INTO EACH RECORD
         LH    R1,RECSIZE
         SH    R1,HW4              DISPLAY 4 BYTES LESS THAN LRECL
         STH   R1,RECSIZE
HOLDLOOP ST    R0,DIRNUM(,R7)      PUT ZERO IN RECORD NUMBER
         ST    R0,DIRLEN(,R7)      PUT ZERO IN RECORD LENGTH
         ST    R0,DIRTTR(,R7)      PUT ZERO IN RECORD POSITION
         ST    R15,DIRREC(,R7)     STORE ADDRESS OF HELD RECORD
         A     R15,SAVLRECL        POINT TO NEXT HELD RECORD
         LA    R1,DIRSIZ(,R7)      POINT TO NEXT ENTRY
         ST    R1,DIRNXT(,R7)      STORE ITS ADDRESS IN THIS ENTRY
         LR    R14,R7              SAVE LAST ENTRY
         LR    R7,R1               MAKE NEXT ENTRY THIS ENTRY
         BCT   R8,HOLDLOOP         DO IT FOR ALL BUT LAST ENTRY
         LA    R1,HOLDDIR-3072
         LA    R1,3072(,R1)        ADDRESS OF FIRST ENTRY
         ST    R1,DIRNXT(,R14)     CLOSE THE CIRCLE
         ST    R1,HOLDTOP          START WITH FIRST AS TOP

************************************************************
*                                                          *
*         PROCESS PRE-SPECIFIED MEMBER NAME AND TOP TTR    *
*                                                          *
************************************************************

         MVC   DSNAIM(46),$DSNAME
         ICM   R0,B'1111',TTR      INITIAL TOP-OF-DATA SPECIFIED?
         BZ    TOPTTROK            NO, PERFORM NORMAL DATA ACCESS
         TM    STATUS2,MAGTAPE     MAGNETIC TAPE FILE?
         BZ    TOPBLKOK            NO, TTR CONTENTS IS A TTR
         SRL   R0,8                YES, CONVERT TO BLOCK NUMBER FORMAT
         ST    R0,TTR              SAVE TAPE TOP-OF-DATA BLOCK NUMBER
TOPBLKOK POINT (R4),TTR            POINT TO USER-SPECIFIED TOP-OF-DATA
TOPTTROK TM    DCBDSORG,X'02'      USING BPAM?
         BZ    NEWNAME             NO, SKIP MEMBER PROCESSING
         ICM   R0,B'1111',TTR      INITIAL TOP-OF-DATA SPECIFIED?
         BNZ   TOPTTRNM            YES, GO CONSTRUCT "MEMBER" NAME
         MVC   BLDLNAME,$MEMBER    NO, LOAD MEMBER NAME TO SEARCH FOR
         OI    STATUS,STNOMEM      PREPARE FOR NO MEMBER OF THAT NAME
         MVC   $MEMBER,NOMEM
         B     TOPOFMEM
TOPTTRNM MVI   $MEMBER,C'!'        MAKE "INVALID" MEMBER NAME
         UNPK  $MEMBER+1(7),TTR(4) SHOW SPECIFIED TTR
         TR    $MEMBER+1(6),HEXTAB-240  ENSURE PRINTABLE HEX DIGITS
         MVI   $MEMBER+7,C'!'      TIDY UP GARBAGE
         B     NEWNAME             SKIP MEMBER PROCESSING

**********************************************************************
*                                                          *         *
*         SET UP THE ACB                                   *  GP@FT  *
*                                                          *  06/92  *
**********************************************************************

ACBINIT  DS    0H
         MVI   TSTRECFM,0
         LA    R4,SCREENW-4080     POINT TO MACRO PARAMETER LIST AREA
         LA    R4,4080(,R4)
         LA    R6,DEBLOCKS         GET THE LENGTH OF AN ACB
         SHOWCB AREA=(R6),LENGTH=4,FIELDS=(ACBLEN),MF=(G,(R4))
*        LA    R6,DEBLOCKS+4       GET THE LENGTH OF AN EXLST
*        SHOWCB AREA=(R6),LENGTH=4,FIELDS=(EXLLEN),MF=(G,(R4))
         LA    R6,DEBLOCKS+8       GET THE LENGTH OF AN RPL
         SHOWCB AREA=(R6),LENGTH=4,FIELDS=(RPLLEN),MF=(G,(R4))

         ST    R4,DOUBLE           SAVE THE MACRO WORK AREA ADDRESS
         LA    R6,DEBLOCKS         POINT TO THE 3 RETURNED LENGTHS
         LA    R1,3                GET THE NUMBER OF THESE
ACBLOOP1 L     R0,0(,R6)           GET THE LENGTH
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
         ST    R0,0(,R6)           SAVE THE LENGTH TO BE RESERVED
         LA    R6,4(,R6)           POINT TO THE NEXT LENGTH
         BCT   R1,ACBLOOP1
         L     R0,=F'32767'        GET MAXIMUM SUPPORTED RECORD LENGTH
         CL    R0,AMLCL            IS THIS TOO LONG?
         BNH   ACBLCLOK            NO, TRIM RECORDS TO THIS
         ICM   R0,15,AMLCL         YES, USE REAL MAXIMUM LRECL
         BNZ   ACBLCLOK                 IF NOT A LINEAR DATA SET
         LH    R0,HW4096           ASSUME 4K BLOCKS IF LINEAR
ACBLCLOK STH   R0,RECSIZE          SAVE IT FOR LEFT/RIGHT SCROLLING
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
         ST    R0,SAVLRECL         SAVE FOR HOLD AREA DIVISION
         MH    R0,PAGESIZE
         ST    R0,SAVHOLDL         SAVE FOR PARTITIONING
         LA    R1,200              GET MINIMUM ENTRY COUNT
         LA    R6,1848             GET 1/4 OF OPTIONAL ENTRY COUNT
         SLL   R1,3                GET MINIMUM ROOM (CHKPTLN IS 8)
         SLL   R6,5                GET OPTIONAL ROOM (CHKPTLN IS 8)

         LA    R0,@ACBWLEN         GET ACB I/O SUBROUTINE WORKAREA SIZE
         A     R0,SAVLRECL         ADD RECORD BUFFER SIZE
         A     R0,DEBLOCKS         ADD ACB SIZE
*        A     R0,DEBLOCKS+4       ADD EXLST SIZE
         A     R0,DEBLOCKS+8       ADD RPL SIZE
         A     R0,DEBLOCKS+8       ADD RPL SIZE
         A     R0,SAVHOLDL         ADD SCREEN RECORD HOLD AREA SIZE
         AR    R0,R1               ADD MINIMUM CKECKPOINT SIZE
         LA    R7,RANGE
         ST    R0,0(,R7)
         AR    R0,R6               ADD OPTIONAL CHECKPOINT SIZE
         ST    R0,4(,R7)
         LA    R8,ANSWER
         MVC   GMVUW(GMVUL),GMVU
         GETMAIN VU,LA=(R7),A=(R8),MF=(E,GMVUW)
         OI    STATUS,STGMVU
         L     R2,ANSWER           POINT TO ACB I/O WORK AREA
         USING @ACBDATA,R2
         LR    R0,R2
         A     R0,ANSWER+4
         ST    R0,ENDPTR           END OF GETMAINED AREA
         LA    R1,@ACBWLEN(,R2)
         ST    R1,BLOCKPTR         SAVE RECORD BUFFER ADDRESS
         ST    R1,SPANPTR
         A     R1,SAVLRECL
         ST    R1,ACBADDR          SAVE ACB ADDRESS
         A     R1,DEBLOCKS
*        ST    R1,XLSTADDR         SAVE EXLST ADDRESS
*        A     R1,DEBLOCKS+4
         ST    R1,RPLADDR          SAVE FIRST RPL ADDRESS
         A     R1,DEBLOCKS+8
         ST    R1,RPL2ADDR         SAVE SECOND RPL ADDRESS
         A     R1,DEBLOCKS+8
         ST    R1,HOLDPTR          SAVE SCREEN RECORD HOLD AREA ADDRESS
         A     R1,SAVHOLDL
         ST    R1,CHKPTTOP         SAVE CHECKPOINT TABLE ADDRESS
         XC    0(256,R1),0(R1)     RESET FIRST ENTRY IN TABLE
         XC    VSAMKEY,VSAMKEY     RESET KEY HOLD AREA

**********************************************************************
*                                                          *         *
*         CREATE VSAM I/O CONTROL BLOCKS                   *  GP@FT  *
*                                                          *  06/92  *
**********************************************************************

         L     R4,ACBADDR          POINT TO WHERE THE ACB WILL GO
         L     R14,DEBLOCKS        GET SIZE OF ACB AREA
*        L     R6,XLSTADDR         POINT TO WHERE THE EXLST WILL GO
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         GENCB BLK=ACB,            GENERATE AN ACB                     +
               BUFND=1,            AT LEAST 1 DATA BUFFER              +
               BUFNI=2,            AT LEAST 2 INDEX BUFFERS            +
               DDNAME=DYNAM,       SUPPLY DUMMY DATA DEFINITION NAME   +
               MACRF=(ADR,KEY,DIR,SEQ,IN),                             +
               STRNO=2,            ALLOW TWO CONCURRENT REQUESTS       +
               WAREA=(R4),         SUPPLY ACB ADDRESS                  +
               LENGTH=(R14),       SUPPLY ACB SIZE                     +
               MF=(G,(1))
*              EXLST=(R6),         SUPPLY EXIT LIST ADDRESS           +
         TM    OSBITS,X'80'        IS 31-BIT ADDRESSING FOR VSAM OKAY?
         BZ    ACBOKAY             NO, THE ACB IS NOW INITIALIZED
         L     R1,DOUBLE           YES, EXPLOIT THIS IF POSSIBLE
         MODCB ACB=(R4),           MODIFY THE GENERATED ACB            +
               RMODE31=ALL,        LET VSAM USE ANY PART OF REGION     +
               MF=(G,(1))
ACBOKAY  MVC   DCBDDNAM,$DDNAME    SUPPLY THE REAL DATA DEFINITION NAME

*        L     R14,DEBLOCKS+4      GET SIZE OF EXLST AREA
*        L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
*        GENCB BLK=EXLST,          GENERATE AN EXLST                  +
*              WAREA=(R6),         SUPPLY EXLST ADDRESS               +
*              LENGTH=(R14),       SUPPLY EXLST SIZE                  +
*              MF=(G,(1))

         L     R14,DEBLOCKS+8      GET SIZE OF RPL AREA
         L     R6,RPLADDR          POINT TO WHERE THE RPL WILL GO
         L     R8,SAVLRECL         GET MAXIMUM RECORD LENGTH
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         GENCB BLK=RPL,            GENERATE AN RPL                     +
               ACB=(R4),           SUPPLY ACB ADDRESS                  +
               AREA=(S,VSAMREC),   SUPPLY RECORD MOVE BUFFER ADDRESS   +
               AREALEN=(R8),       SUPPLY RECORD MOVE BUFFER LENGTH    +
               ARG=(S,CHKPTDUM+4), SUPPLY RBA/RRN ARGUMENT ADDRESS     +
               MSGAREA=(S,ACBIOMSG),      SUPPLY AN I/O MESSAGE AREA   +
               MSGLEN=128,                SUPPLY MESSAGE AREA LENGTH   +
               OPTCD=(ADR,SEQ,FWD,SYN,MVE),                            +
               WAREA=(R6),         SUPPLY RPL ADDRESS                  +
               LENGTH=(R14),       SUPPLY RPL SIZE                     +
               MF=(G,(1))
         TM    $UCBAD,KSDSSW       ACCESS IN KEY ORDER REQUIRED?
         BZ    ACBCICHK            NO, SEE IF CIMODE IS REQUIRED
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB RPL=(R6),OPTCD=DIR, CHANGE RBA RPL TO DIRECT ACCESS     +
               MF=(G,(1))
         L     R14,DEBLOCKS+8      GET SIZE OF RPL AREA
         L     R6,RPL2ADDR         POINT TO WHERE THE RPL WILL GO
*        L     R8,SAVLRECL         GET MAXIMUM RECORD LENGTH (DONE B4)
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         GENCB BLK=RPL,            GENERATE AN RPL                     +
               ACB=(R4),           SUPPLY ACB ADDRESS                  +
               AREA=(S,VSAMREC),   SUPPLY RECORD MOVE BUFFER ADDRESS   +
               AREALEN=(R8),       SUPPLY RECORD MOVE BUFFER LENGTH    +
               ARG=(S,VSAMKEY),    SUPPLY KEY ARGUMENT ADDRESS         +
               MSGAREA=(S,ACBIOMSG),      SUPPLY AN I/O MESSAGE AREA   +
               MSGLEN=128,                SUPPLY MESSAGE AREA LENGTH   +
               OPTCD=(KEY,SEQ,FWD,SYN,NUP,KGE,FKS,MVE),                +
               WAREA=(R6),         SUPPLY RPL ADDRESS                  +
               LENGTH=(R14),       SUPPLY RPL SIZE                     +
               MF=(G,(1))

ACBCICHK ICM   R0,15,AMLCL         LINEAR DATA SET?
         BNZ   ACBREOPN            NO, PROCEED
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB ACB=(R4),MACRF=CNV, CHANGE TO CONTROLINTERVAL ACCESS    +
               MF=(G,(1))
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB RPL=(R6),OPTCD=CNV, CHANGE TO CONTROLINTERVAL ACCESS    +
               MF=(G,(1))

ACBREOPN XC    DEBLOCKS(12),DEBLOCKS
         L     R4,ACBADDR          POINT TO THE ACB
         OI    STATUS,STOPEN       TELL CLEANUP TO CLOSE ACB
         MVI   OPEND,X'80'         FIRST OPEN LIST ITEM IS ALSO LAST
         OPEN  ((R4)),MF=(E,OPEND) OPEN THE VSAM FILE
         ST    R15,TTR             SUPPRESS 'TOP' OPERAND PROCESSING
         LTR   R15,R15             WAS THE OPEN SUCCESSFUL?
         BZ    ACBOPEND            YES, CONTINUE WITH INITIALIZATION
         L     R1,CHKPTTOP         NO, SIMULATE
         ST    R1,CHKPTBOT             END-OF-FILE
         MVI   0(R1),X'FF'             TRIGGERED BY I/O ERROR
         MVI   SYNADSW,X'FF'
         MVI   SYNADMSG,C'*'
         MVC   SYNADMSG+1(77),SYNADMSG
         MVC   SYNADMSG+23(32),=CL32' VSAM OPEN ERROR: RC=XX REAS=XX '
         STC   R15,DOUBLE+4
         UNPK  SYNADMSG+44(3),DOUBLE+4(2)
         TR    SYNADMSG+44(3),HEXTAB-240
         MVI   SYNADMSG+46,C' '
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         SHOWCB ACB=((R4)),        SHOW DATA FROM THE ACB              +
               AREA=(S,DOUBLE),    PUT THE ANSWER IN DOUBLE            +
               LENGTH=8,           ONLY 4 OF 8 BYTES SHOULD BE USED    +
               FIELDS=(ERROR),     EXTRACT THE OPEN REASON CODE        +
               MF=(G,(1))
         UNPK  SYNADMSG+52(3),DOUBLE+3(2)
         TR    SYNADMSG+52(3),HEXTAB-240
         MVI   SYNADMSG+54,C' '
         LA    R7,HOLDDIR-3072
         LA    R7,3072(,R7)
         LA    R0,1
         ST    R0,DIRNUM(,R7)      PUT ONE IN RECORD NUMBER
         SLR   R0,R0
         ST    R0,DIRTTR(,R7)      PUT ZERO IN RECORD POSITION
         ST    R0,DIRREC(,R7)      PUT ZERO IN RECORD ADDRESS
         BCTR  R0,0
         ST    R0,DIRLEN(,R7)      PUT NEGATIVE ONE IN RECORD LENGTH
         ST    R7,DIRNXT(,R7)      POINT TO ITSELF FOR ONE ENTRY CHAIN
         ST    R7,HOLDTOP          START WITH THIS AS TOP
         ST    R7,HOLDEND          START WITH THIS AS END
         MVC   DSNAIM(46),$DSNAME  INITIALIZE HEADING DATA SET NAME
         CLI   DOUBLE+3,X'A0'      TRYING TO READ EMPTY CLUSTER?
         BNE   NEWNAME             NO, CONTINUE
         MVC   SYNADMSG+55(9),=C'==>EMPTY?'  POSSIBLY, SO SHOW THIS
         B     NEWNAME
ACBOPEND LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         TESTCB ACB=(R4),          TEST THE DATA SET ATTRIBUTES        +
               ATRB=(KSDS),        CHECK FOR A KSDS CLUSTER            +
               MF=(G,(1))
         BE    HOLDINIT            CLUSTER IS A KSDS SO CONTINUE
         CLI   AMKLN+1,4           IS THE KEY LENGTH FOUR?
         BE    ACBRRDS             YES, CLUSTER MUST BE A VRRDS
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         TESTCB ACB=(R4),          TEST THE DATA SET ATTRIBUTES        +
               ATRB=(RRDS),        CHECK FOR AN RRDS CLUSTER           +
               MF=(G,(1))
         BNE   HOLDINIT            CLUSTER IS AN ESDS SO CONTINUE
ACBRRDS  LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         L     R6,RPLADDR          POINT TO THE RPL TO BE USED
         MODCB RPL=(R6),           CLUSTER IS A (V)RRDS SO USE AND     +
               OPTCD=(KEY,SEQ),            CHECKPOINT THE RRN          +
               MF=(G,(1))
         NI    $UCBAD,255-KSDSSW   RESET KSDS FLAG
         OI    $UCBAD,RRDSSW       SET RRDS FLAG
         B     HOLDINIT            CONTINUE WITH INITIALIZATION
         DROP  R5,R2               FAS2INIT, @ACBDATA

         LTORG

**********************************************************************
*                                                          *         *
*         READ A VSAM RECORD                               *  GP@FT  *
*                                                          *  06/92  *
**********************************************************************

ACBREAD  STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R1,ANSWER           POINT TO ACB I/O WORK AREA
         ST    R1,8(,R13)          FORWARD SAVE AREA POINTER
         ST    R13,4(,R1)          BACKWARD SAVE AREA POINTER
         LR    R13,R1
         USING @ACBDATA,R13
         LR    R7,R15
         USING ACBREAD,R7
         LA    R5,CHKPTDUM         JUST IN CASE OF OFFLOAD
         TM    MODE,OFFLDSW        HERE TO OFFLOAD?
         BO    ACBGET              YES, JUST READ IT
         ICM   R5,B'1111',CHKPTBOT GET LAST CHECKPOINT
         BNZ   ACBRDNF             PROCESS IT
         L     R5,CHKPTTOP         FIRST READ SO NOTHING READ YET
         MVC   ACBCOUNT,COUNT      INITIALIZE LOGICAL RECORD NUMBER
         B     ACBRDNEW            READING A RECORD NOT READ BEFORE
ACBRDNF  LA    R0,1                INCREMENT RECORD COUNT
         A     R0,ACBCOUNT
         C     R0,COUNT            SEQUENTIAL ACCESS REQUEST?
         BE    ACBPNTOK            YES, NO NEED FOR A POINT
         XC    DEBLOCKS(12),DEBLOCKS   NO, RESET ROW EXTRACTION STATUS
         L     R6,RPLADDR          POINT TO THE RBA ACCESS RPL
         L     R1,CALLPARM+8       GET THE RELEVANT CHKPT ENTRY
         MVC   CHKPTDUM+4(4),4(R1) COPY THE RELEVANT RBA
         POINT RPL=(R6)            POSITION TO THE DESIRED RECORD
         LTR   R15,R15             WAS THE POINT SUCCESSFUL?
         BNZ   ACBPNTDN            NO, REPORT BAD RETURN CODE
         TM    $UCBAD,KSDSSW       YES, USING KEYED ACCESS?
         BNO   ACBPNTDN            NO, STAY WITH RBA ACCESS
         GET   RPL=(R6)            GET THE VSAM RECORD SYNCHRONOUSLY
         LTR   R15,R15             WAS THE GET SUCCESSFUL?
         BNZ   ACBPNTDN            NO, REPORT BAD RETURN CODE
         LH    R15,AMKLN           YES, GET THE KEY LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LA    R1,VSAMREC          POINT TO THE FETCHED RECORD
         AH    R1,AMRKP            POINT TO THE KEY OF THE RECORD
         EX    R15,ACBKEYLD        LOAD KEY INTO RPL ARGUMENT AREA
         L     R6,RPL2ADDR         POINT TO THE KEYED ACCESS RPL
         POINT RPL=(R6)            POSITION TO THE DESIRED RECORD

ACBPNTDN SRL   R15,2               ENSURE THAT THE RETURN CODE
         SLL   R15,30                     IS A MULTIPLE OF FOUR
         SRL   R15,28                     IN THE ZERO TO TWELVE RANGE
         LTR   R15,R15             NOW TEST THE RETURN CODE
         BNZ   ACBRPLRC            NON-ZERO SO POINT FAILED
         L     R0,COUNT            POINT SUCCEEDED SO GET RECORD NUMBER
ACBPNTOK ST    R0,ACBCOUNT         UPDATE LOGICAL RECORD NUMBER
         OC    DEBLOCKS(12),DEBLOCKS  DB2 ROWS TO BE EXTRACTED?
         BNZ   ACBGTDB2            YES, PROCESS CURRENT CI FIRST
ACBOKGET L     R1,0(,R5)           GET NUMBER OF HIGHEST RECORD READ
         LTR   R1,R1               WAS IT EOF?
         BM    ACBRDOLD            YES, BRANCH
         C     R1,COUNT            HAVE WE READ THIS RECORD BEFORE?
         BL    ACBRDADD            NO, BRANCH
ACBRDOLD LA    R5,CHKPTDUM         YES, DON'T CHANGE CHKPT TABLE
         B     ACBGET
ACBRDADD LA    R5,CHKPTLN(,R5)     ADD AN ENTRY TO THE CHKPT TABLE
         L     R6,ENDPTR           DETERMINE THE LAST ENTRY ADDRESS
         CR    R5,R6               IS TABLE FILLED UP?
         BL    ACBRDNEW            NO, SKIP NEXT INSTR
         BAL   R14,READHALF        YES, HALVE THE TABLE
ACBRDNEW ST    R5,CHKPTBOT         SAVE NEW CURRENT CHECKPOINT POINTER
ACBGET   MVC   0(4,R5),COUNT       LOAD CHECKPOINT ENTRY RECORD NUMBER
         XC    4(4,R5),4(R5)       RESET RBA AREA
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS GET
         L     R6,RPLADDR          POINT TO THE RBA ACCESS RPL
         TM    $UCBAD,KSDSSW       USING KEYED ACCESS?
         BNO   ACBDOGET            NO, STAY WITH RBA ACCESS
         L     R6,RPL2ADDR         YES, POINT TO THE KEYED ACCESS RPL
ACBDOGET DS    0H
         GET   RPL=(R6)            GET A VSAM RECORD SYNCHRONOUSLY

         SRL   R15,2               ENSURE THAT THE RETURN CODE
         SLL   R15,30                     IS A MULTIPLE OF FOUR
         SRL   R15,28                     IN THE ZERO TO TWELVE RANGE
ACBRPLRC B     ACBGOTEP(R15)       BRANCH TO APPROPRIATE CODE

ACBGOTEP B     ACBGOT              GET RC=0 - A RECORD WAS RETRIEVED
         B     ACBLOGER            GET RC=4 - THE GET WAS NOT ACCEPTED
         B     ACBLOGER            GET RC=8 - LOGICAL ERROR
         DS    0H                  GET RC=C - PHYSICAL ERROR
         MVI   SYNADSW,X'FF'       FLAG FILE FAILURE
         MVC   SYNADMSG,ACBIOMSG+50
         B     ACBEOD              SIGNAL END-OF-FILE

ACBGOT   DS    0H                  A RECORD WAS RETRIEVED
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         SHOWCB RPL=(R6),          EXTRACT SOME DATA FROM THE RPL      +
               AREA=(S,ACBRBA),    DETERMINE THE RBA AND RECORD LENGTH +
               LENGTH=8,           8 BYTES ARE REQUIRED                +
               FIELDS=(RBA,RECLEN),  EXTRACT THE RBA AND RECORD LENGTH +
               MF=(G,(1))
         TM    STATUS6,DB2TBL      PROCESSING DB2 ROWS?
         BZ    ACBNODB2            NO
         ICM   R0,15,ACBRBA        HAVE JUST READ FIRST DB2 BLOCK?
         BNZ   ACBADROK            NO
         L     R2,BLOCKPTR         YES, POINT TO THE BLOCK
         A     R2,ACBRECLN         POINT PAST THE BLOCK
         BCTR  R2,0                POINT TO LAST BYTE IN THE BLOCK
         TM    0(R2),X'C5'         ONE DB2 PAGE PER CI?
         BO    ACBADROK            YES, PERFORM DB2 ROW EXTRACTION
         NI    STATUS6,255-DB2TBL  NO, SUPPRESS DB2 ROW EXTRACTION
ACBNODB2 TM    $UCBAD,RRDSSW       ACCESSING AN RRDS?
         BZ    ACBADROK            NO, THE RBA IS THE ADDRESS TO NOTE
         MVC   ACBRBA,CHKPTDUM+4   YES, GET THE RELATIVE RECORD NUMBER
ACBADROK MVC   4(4,R5),ACBRBA      CHECKPOINT THE RECORD'S ADDRESS
         MVC   TTR,ACBRBA          COPY THE RBA FOR DISPLAY
         L     R1,ACBRECLN         GET THE RECORD LENGTH
         L     R2,BLOCKPTR         GET THE RECORD ADDRESS
         TM    STATUS6,DB2TBL      PROCESSING DB2 ROWS?
         BO    ACBGODB2            YES, PERFORM ROW EXTRACTION
ACBREADX L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R3,R12,32(R13)      RESTORE APPROPRIATE REGISTERS
         B     READX               RETURN AND EXIT

ACBGODB2 LA    R0,0(R1,R2)         POINT PAST END OF BLOCK
         STM   R0,R2,DEBLOCKS      UPDATE STATUS INFO
         LR    R2,R0               POINT PAST END OF BLOCK
         LM    R0,R1,DEBLOCKS+4    GET DEBLOCKING STATUS
         BCTR  R2,0                POINT TO LAST BYTE OF BLOCK
         TM    0(R2),X'C5'         DB2 FORMATTED RECORD?
         BNO   ACBEOD              NO, END OF DB2 DATA
         TM    11(R1),255-X'02'    DB2 DATA PAGE?  (X'00' OR X'02'?)
         BNZ   ACBOKGET            NO, READ THE NEXT PAGE
         CLI   18(R1),0            ANY ROWS IN THIS PAGE?
         BE    ACBOKGET            NO, READ THE NEXT PAGE
         MVI   DEBLOCKS+4,0        YES,
         MVC   DEBLOCKS+5(1),18(R1)     GET THE ROW COUNT FOR THIS PAGE
         MVC   DEBLOCKS+6(2),HW1   GET THE ROW COUNT TO BE RETURNED
ACBGTDB2 SLR   R1,R1
         ICM   R1,3,DEBLOCKS+6     GET THE ROW-IN-PAGE NUMBER
         CLM   R1,3,DEBLOCKS+4     IS THIS HIGHER THAN THE MAXIMUM?
         BH    ACBOKGET            YES, READ ANOTHER PAGE
         LA    R1,1(,R1)           NO, GET NEW ROW NUMBER FOR NEXT TIME
         STH   R1,DEBLOCKS+6       SAVE FOR NEXT TIME
         SLL   R1,1                DOUBLE IT FOR INDEX
         L     R2,DEBLOCKS         POINT PAST END OF PAGE
         SLR   R2,R1               POINT TO ROW-IN-PAGE OFFSET
         TM    0(R2),X'80'         EMPTY SLOT?
         BO    ACBGTDB2            YES, SKIP IT
         LH    R1,0(R2)            LOAD THIS OFFSET
         L     R2,DEBLOCKS+8       POINT TO THE PAGE
         ALR   R2,R1               POINT TO THE ROW
         CLI   0(R2),X'40'         TEST FLAG BYTE
         BE    ACBGTDB2            IGNORE OVERFLOW POINTER
         SLR   R1,R1
         ICM   R1,3,1(R2)          GET THE ROW LENGTH
         LA    R2,6(,R2)           POINT TO THE ROW'S DATA
         SH    R1,HW6              GET THE ROW DATA LENGTH
         B     ACBREADX            RETURN

ACBLOGER DS    0H                  RECORD WAS NOT RETRIEVED
         MVI   SYNADMSG,C'*'
         MVC   SYNADMSG+1(77),SYNADMSG
         MVC   SYNADMSG+23(32),=CL32' VSAM READ ERROR: RC=XX REAS=XX '
         STC   R15,DOUBLE+4
         UNPK  SYNADMSG+44(3),DOUBLE+4(2)
         TR    SYNADMSG+44(3),HEXTAB-240
         MVI   SYNADMSG+46,C' '
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         SHOWCB RPL=(R6),          EXTRACT SOME DATA FROM THE RPL      +
               AREA=(S,DOUBLE),    PUT THE ANSWER IN DOUBLE            +
               LENGTH=8,           ONLY 4 OF 8 BYTES SHOULD BE USED    +
               FIELDS=(FDBK),      EXTRACT THE RPL FEEDBACK CODE       +
               MF=(G,(1))
         UNPK  SYNADMSG+52(3),DOUBLE+3(2)
         TR    SYNADMSG+52(3),HEXTAB-240
         MVI   SYNADMSG+54,C' '
         CLI   DOUBLE+3,4          NORMAL END-OF-FILE?
         BE    ACBEOD              YES, NOT AN ERROR
         MVI   SYNADSW,X'FF'       NO, FLAG FILE FAILURE
*        CLI   DOUBLE+3,X'FC'      REJECT OF LDS RECORD ACCESS?
*        BNE   ACBEOD              NO, BECAUSE REVIEW SUPPORTS LINEAR
*        MVC   SYNADMSG+55(18),=C'==>LINEAR-DATA-SET'  YES, SHOW THIS
ACBEOD   SLR   R1,R1               GET THE RECORD LENGTH
         BCTR  R1,0                NEGATIVE ONE FOR E-O-F
         ST    R1,0(,R5)           SAVE EOF IN CHKPT TABLE
         SLR   R2,R2               GET THE RECORD ADDRESS
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R3,R12,32(R13)      RESTORE APPROPRIATE REGISTERS
         B     READX               RETURN AND EXIT
ACBKEYLD MVC   VSAMKEY(0),0(R1)    <<< EXECUTED >>>
         DROP  R7,R13              ACBREAD, @ACBDATA

         LTORG

**********************************************************************
*                                                          *         *
*         TSO                                              *   ABL   *
*                                                          *         *
**********************************************************************

*        NOTE THAT A COMMAND WHICH DOES NOT PERFORM STANDARD
*        OS LINKAGE WILL PROBABLY CAUSE REVIEW TO ABEND.

         USING TSO,R5
TSO      LR    R5,R15              TEMPORARY BASE REGISTER
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,0(,R1)           CURRENT RB
         L     R1,12(,R1)          CURRENT CDE
         SLR   R0,R0
         TM    28(R1),X'04'        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO
         L     R0,20(,R1)          YES, POINT TO MAJOR CDE
         STM   R0,R1,DOUBLE        SAVE CDE ADDRESS(ES)
TSORETRY LA    R1,CMDAREA          START OF TSO PARAMETERS
         LA    R0,L'CMDAREA        LENGTH OF PARSE STRING
         STH   R0,0(,R1)           SAVE FOR PARSE
         LA    R15,OPD1            FIRST PARAMETER
         TM    6(R15),PRESENT      ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         TM    6(R15),QUOTED       QUOTED?
         BO    ERRINV              YES, INVALID
         L     R14,0(,R15)         START OF PARAMETER
         LH    R15,4(,R15)         LENGTH OF PARAMETER
         LTR   R15,R15             IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R15,HW8             IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         BCTR  R15,0               MACHINE LENGTH
         MVC   BLDLNAME,BLANKS
         EX    R15,MVOPRND         MOVE IN THE COMMAND NAME
         ICM   R15,B'1111',DOUBLE  POINT TO MAJOR CDE IF ALIAS USED
         BZ    REALREV1            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDLNAME   WILL IT BE A RECURSIVE 'REVIEW'?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
REALREV1 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDLNAME   WILL BE RECURSIVE 'REVIEW' OR 'REV'?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
         CLC   =C'PDS',BLDLNAME    PDS OR PDS/E REQUEST?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
         TM    STATUS2,EFTSROK     TSO SERVICE ROUTINE AVAILABLE?
         BZ    NOEFTSR             NO
         LA    R1,CMDTSOEX         YES, MAKE THE BUFFER START EARLIER
         LA    R0,L'CMDAREA+8      NEW LENGTH OF PARSE STRING
         STH   R0,0(,R1)           SAVE FOR PARSE
         MVC   4(8,R1),=C'TSOEXEC '     OVERWRITE TSO WITH TSOEXEC
         LA    R15,OPD1            MAKE COMMAND NAME OPERAND OF TSOEXEC
         TM    OSBITS,X'13'        MVS?
         BO    CBUFHDR             YES
         MVI   6(R1),C'S'          NO, CHANGE TO TSSEXEC FOR MSP
         B     CBUFHDR             CONSTRUCT COMMAND BUFFER HEADER
MVOPRND  MVC   BLDLNAME(0),0(R14)  <<< EXECUTED >>>
NOEFTSR  LA    R15,OPD2            START OF SECOND ODL
CBUFHDR  L     R6,REVECT           ECT ADDRESS
         MVC   PCMD,ECTPCMD-ECT(R6)       SAVE CURRENT COMMAND NAME
         MVC   ECTPCMD-ECT(8,R6),BLDLNAME COMMAND NAME IS CHANGED
         MVC   ECTSCMD-ECT(8,R6),BLANKS   NO SECONDARY COMMAND NAME
         L     R14,0(,R15)         START OF SECOND PARAMETER
         LA    R14,0(,R14)         DROP TOP BYTE
         SR    R14,R1              OFFSET TO SECOND PARAMETER
         SH    R14,HW4             LESS TEXT LENGTH FIELDS
         NI    ECTSWS-ECT(R6),X'FF'-ECTNOPD ASSUME OPERANDS
         TM    6(R15),PRESENT      ANY OPERANDS?
         BO    TSOOPSW             YES, BRANCH
         LA    R14,L'CMDAREA       NO, USE DEFAULT
         OI    ECTSWS-ECT(R6),ECTNOPD   NO OPERANDS

TSOOPSW  TM    6(R15),QUOTED       QUOTED?
         BNO   *+6                 NO, BRANCH
         BCTR  R14,0               YES, POINT TO FIRST '
         STH   R14,2(,R1)          OFFSET TO OPERANDS
         ST    R1,REVCBUF          START OF COMMAND TEXT
         ICM   R15,B'1111',DOUBLE  POINT TO MAJOR CDE IF ALIAS USED
         BZ    REALREV2            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDLNAME   WILL IT BE A RECURSIVE 'REVIEW'?
         BE    TSOREV              YES, ISPF EDIT SHOULD STILL WORK
REALREV2 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDLNAME   WILL BE RECURSIVE 'REVIEW' OR 'REV'?
         BE    TSOREV              YES, ISPF EDIT SHOULD STILL WORK

**********************************************************************
*                                                          *         *
*         SEARCH LPAQ FOR PRE-LOADED LINK LIST MODULE      *  GP@P6  *
*                                                          *  08/86  *
**********************************************************************

         L     R15,16                      CVTPTR
         LA    R15,188(,R15)               CVTQLPAQ
TSOLPAQ  ICM   R15,B'1111',0(R15)          LAST LPDE ON CHAIN?
         BZ    TSOPLPA                     YES, TRY PLPA
         CLC   BLDLNAME,8(R15)             FOUND THE COMMAND?
         BE    TSOJPA                      YES, CALL IT FROM MLPA/FLPA
         B     TSOLPAQ                     NO, TRY NEXT ONE

**********************************************************************
*                                                          *         *
*         CALL IEAVVMSR TO SEARCH PLPA DIRECTORY           *  GP@P6  *
*                                                          *  08/86  *
**********************************************************************

*              REGS 0 AND 1 - CONTAIN NAME
*              REG 3        - CVT
*              REGS 7 8 9   - WORK REGS
*              REG 14       - RETURN - BAD RETURN 4(14)
*              REG 0        - POINTS TO LPDE AFTER GOOD RETURN

TSOPLPA  LM    R0,R1,BLDLNAME
         STM   R14,R12,12(R13)
         L     R3,16                       CVTPTR
         L     R15,352(,R3)                CVTLPDSR
         BALR  R14,R15
         B     TSOPLPAX
         B     TSOTIME                     NOT IN PLPA, DO BLDL
TSOPLPAX LM    R14,R12,12(R13)
TSOJPA   TM    STATUS2,EFTSROK     TSO SERVICE ROUTINE AVAILABLE?
         BZ    TSOJPAX             NO
         CLC   =C'PDS',BLDLNAME    PDS OR PDS/E REQUEST?
         BE    TSOJPAX             YES, DON'T MAKE NEW SUBTASK
TSOEXCIT MVC   BLDLNAME,=C'TSOEXEC '
         TM    OSBITS,X'13'        MVS?
         BO    TSOJPAX             YES
         MVI   BLDLNAME+2,C'S'     NO, USE TSSEXEC UNDER MSP
TSOREV   EQU   *                   TURN OFF FSMODE FOR PROMPTING
TSOJPAX  STLINENO LINE=1,MODE=OFF          TURN OFF FULLSCREEN
         LA    R1,REVCBUF                  CPPL START
         LINK  EPLOC=BLDLNAME,SF=(E,LINKAREA) USE TASK/STEPLIB OR J/LPA
         B     TSOLNKED                    TSO PROCESSED WITHOUT A BLDL
TSOTIME  LM    R14,R12,12(R13)
         CLC   BLDLNAME,=C'TIME    '       TIME REQUEST?
         BNE   TSOBLDL                     NO, SEARCH LINK LIST
         MVC   BLDLNAME,=C'IKJEFT25'       YES, USE IKJEFT25
         B     TSOJPAX                     USE THE ONE IN JOB PACK AREA
*                                  WITHOUT TSOEXEC MAKING A NEW SUBTASK
TSOBLDL  BLDL  0,BLDL
         LTR   R15,R15             SUCCESSFUL BLDL?
         BNZ   TSOMEM              NO, BRANCH
         TM    BLDLINDC,X'80'      IS REQUESTED COMMAND AN ALIAS?
         BZ    TSOBLDLX            NO
         ICM   R15,B'1111',DOUBLE  POINT TO MAJOR CDE IF UNDER ALIAS
         BZ    REALREV3            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDL+42    WILL IT BE A RECURSIVE 'REVIEW'?
         BE    TSOREDO             YES, SUPPRESS TSOEXEC
REALREV3 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDL+42    RECURSIVE 'REVIEW' OR 'REV'?
         BNE   TSOBLDLX            NO, TSOEXEC IS ALLOWED
TSOREDO  MVC   CALLPARM(8),BLDLNAME YES, SAVE THIS ALIAS NAME
         LA    R1,CALLPARM-8       POINT TO PHONY "CDE"
         ST    R1,DOUBLE           SAVE ITS ADDRESS
         L     R1,REVECT
         MVC   ECTPCMD-ECT(8,R1),PCMD  RESET COMMAND NAME
         B     TSORETRY            REDO THE WHOLE MESS
TSOBLDLX CLC   =C'PDS',BLDLNAME    PDS OR PDS/E OR PDSTOOLS REQUEST?
         BE    TSOLINK             YES, DON'T MAKE NEW SUBTASK
         CLC   =C'STAR',BLDLNAME   STARTOOL REQUEST?
         BE    TSOLINK             YES, DON'T MAKE NEW SUBTASK
         TM    STATUS2,EFTSROK     TSO SERVICE ROUTINE AVAILABLE?
         BO    TSOEXCIT            YES, USE IT

TSOLINK  STLINENO LINE=1,MODE=OFF  TURN OFF FULLSCREEN
         LA    R1,REVCBUF          CPPL START
         LA    R7,BLDLNAME         START OF BLDL INFORMATION
         LINK  DE=(R7),SF=(E,LINKAREA) USE TASK/STEPLIB OR LINK LIST
TSOLNKED STFSMODE ON               TURN ON FULLSCREEN
         L     R1,REVECT
         MVC   ECTPCMD-ECT(8,R1),PCMD  RESET COMMAND NAME
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLSCR             YES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         B     FILLSCR

TSOMEM   MVC   MSG(MSG39L),MSG39   COMMAND NOT FOUND
         L     R1,REVECT
         MVC   ECTPCMD-ECT(8,R1),PCMD  RESET COMMAND NAME
         OI    STATUS7,BELL        SOUND BELL FOR ERROR MESSAGE
         B     FILLSCR
         DROP  R5                  TSO

         LTORG

************************************************************
*                                                          *
*         RIGHT                                            *
*                                                          *
************************************************************

         USING RIGHT,R5
RIGHT    LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD2            GET SECOND OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRINV              YES, INVALID
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    RIGHTDEF            NO, USE DEFAULT
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW5              IS LENGTH MORE THAN 5?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR REQUESTED?
         BE    RIGHTCSR            YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    RIGHTMAX            YES
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    RITEPAGE            YES
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    RITEHALF            YES
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R1,R1
         BZ    PROMPT
         B     RIGHTR1
RIGHTCSR LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    RITEPAGE            NO, CAN'T BE CURSOR SCROLLING
         SLR   R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         LTR   R1,R0               LOAD CURSOR COLUMN OFFSET
         BZ    RITEPAGE            CURSOR WAS IN COLUMN 1
         BAL   R14,DSP2RECO        CONVERT FOR DISPLAY TYPE
         SH    R1,OFFSET           CURSOR AT FORMATTED START OF LINE?
         BNP   RITEPAGE            YES, SCROLL RIGHT A PAGE
         B     RIGHTR1             NO, GO SCROLL RIGHT
RITEHALF L     R1,SCRNCOLS
         SRL   R1,1                GET HALF OF SCREEN WIDTH
         BAL   R14,DSP2RECO        CONVERT FOR DISPLAY TYPE
         LR    R0,R1
         B     RIGHTR0             OFFSET ALREADY ADDED BY ROUTINE
RITEPAGE LH    R0,OFFEND
         B     RIGHTR0             OFFSET ALREADY ADDED
RIGHTMAX LH    R1,RECSIZE
         B     RIGHTR1
RIGHTDEF TM    STATUS4,CSRSW       CURSOR SCROLLING?
         BO    RIGHTCSR            YES
         TM    STATUS4,PGSW        FULL PAGE SCROLLING?
         BO    RITEPAGE            YES, IT MEANS RIGHT-A-PAGE
         TM    STATUS4,HFSW        HALF PAGE SCROLLING?
         BO    RITEHALF            YES, IT MEANS HALF-A-PAGE
         L     R1,SCROLL           NO, USE SCROLL AMOUNT
RIGHTR1  LH    R0,OFFSET
         AR    R0,R1
RIGHTR0  LH    R1,RECSIZE
         L     R15,SCRNCOLS
         TM    MODE,MODEX
         BZ    RIGHTNX
         SRL   R15,1
         B     RIGHTED
RIGHTNX  TM    MODE,FMTSW
         BNO   RIGHTED
         SRL   R15,2
RIGHTED  SR    R1,R15              GET RECSIZE-COLS
         BNM   *+6                 IF RECSIZE IS LESS THAN COLS
         SLR   R1,R1                  THEN RECSIZE-COLS IS ZERO
         CR    R0,R1               IF OFFSET+COLS GT RECSIZE-COLS
         BNH   *+6                    THEN
         LR    R0,R1                  USE RECSIZE-COLS
         STH   R0,OFFSET
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLSCR             YES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         B     FILLSCR
         DROP  R5                  RIGHT

************************************************************
*                                                          *
*         LEFT                                             *
*                                                          *
************************************************************

         USING LEFT,R5
LEFT     LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD2            GET SECOND OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRINV              YES, INVALID
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    LEFTDEF             NO, USE DEFAULT
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW5              IS LENGTH MORE THAN 5?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR REQUESTED?
         BE    LEFTCSR             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    LEFTMAX             YES
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    LEFTPAGE            YES
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    LEFTHALF            YES
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R15,R1
         BZ    PROMPT
         B     LEFTR15
LEFTCSR  LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    LEFTPAGE            NO, CAN'T BE CURSOR SCROLLING
         SLR   R0,R0               YES, PREPARE FOR DIVIDE
         L     R15,SCRNCOLS        GET THE NUMBER OF SCREEN COLUMNS
         DR    R0,R15              GET CURSOR X AND Y COORDINATES
         BCTR  R15,0               GET COLS-MINUS-ONE
         SR    R15,R0              LOAD CURSOR OFFSET FROM RIGHT SIDE
         BZ    LEFTPAGE            CURSOR WAS IN LAST COLUMN
         TM    MODE,MODEX          IS HEX DISPLAY ON?
         BZ    LEFTFMT             NO, GO SCROLL LEFT
         SRA   R15,1               YES, HALVE SCROLL AMOUNT
         BZ    LEFTPAGE            CURSOR WAS IN SECOND LAST COLUMN
         B     LEFTR15             GO SCROLL LEFT
LEFTHALF L     R15,SCRNCOLS
         SRL   R15,1               GET HALF OF SCREEN WIDTH
         B     LEFTMODE
LEFTDEF  TM    STATUS4,CSRSW       CURSOR SCROLLING?
         BO    LEFTCSR             YES
         TM    STATUS4,PGSW        FULL PAGE SCROLLING?
         BO    LEFTPAGE            YES, IT MEANS LEFT-A-PAGE
         TM    STATUS4,HFSW        HALF PAGE SCROLLING?
         BO    LEFTHALF            YES, IT MEANS HALF-A-PAGE
         L     R15,SCROLL          NO, USE SCROLL AMOUNT
         B     LEFTR15
LEFTPAGE L     R15,SCRNCOLS
LEFTMODE TM    MODE,MODEX          IS HEX DISPLAY ON?
         BZ    LEFTFMT             NO, GO SCROLL LEFT
         SRL   R15,1               YES, HALVE SCROLL AMOUNT
         B     LEFTR15             NO FORMATTING WHEN HEX ON
LEFTFMT  TM    MODE,FMTSW          GENERAL FORMATTING ACTIVE?
         BNO   LEFTR15             NO, KNOW DATA COLS FROM SCREEN COLS
         STM   R14,R12,12(R13)     YES, SAVE REGISTERS
         L     R1,FMTAREA          POINT TO FORMATTING DYNAMIC AREA
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO NEW SAVE AREA
         USING @FMTAREA,R13
         L     R7,LEFTFEL          POINT TO LEFT-MOST VISIBLE FEL
         L     R8,LEFTFELO         GET ITS OFFSET
         LH    R0,FELDSPOF(,R7)    LOAD ZERO OR NEGATIVE DISPLAY OFFSET
         AR    R15,R0              ADD IT
         BNP   LEFTELEM            NO NEED TO LOOK AT PREVIOUS ELEMENTS
         LTR   R0,R0               WAS ITEM LEFT-JUSTIFIED ON SCREEN?
         BZ    *+6                 YES, DON'T ALLOW FOR BLANK
         BCTR  R15,0               NO, ALLOW FOR INTER-ITEM BLANK
         LA    R0,FMTFELS          POINT TO FIRST FEL
         LA    R14,FELSIZE         GET THE LENGTH OF A FORMAT ELEMENT
LEFTFELP CR    R0,R7               WANT LEFT OF FIRST ELEMENT?
         BNL   LEFTFMAX            YES, GO SETTLE FOR LEFT MAX
         SLR   R7,R14              POINT TO PREVIOUS FEL
         OC    FELSYMLN(2,R7),FELSYMLN(R7)
         BZ    LEFTFELP            IGNORE ZERO LENGTH SYMBOL FEL
         SH    R8,FELSYMLN(,R7)    SUBTRACT DATA ITEM BYTE COUNT
         SH    R15,FELDSPLN(,R7)   SUBTRACT DISPLAY LENGTH
         BNP   LEFTELEM            NO NEED TO LOOK AT PREVIOUS ELEMENTS
         BCTR  R15,0               ALLOW FOR INTER-ITEM BLANK
         B     LEFTFELP            LOOK BACK THROUGH FORMAT ELEMENTS
LEFTFMAX SLR   R8,R8
         SLR   R15,R15
LEFTELEM TM    FELSYMFG(R7),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SRA   R15,1               YES, HALVE DATA BYTES PER COLOUMN
         TM    FELSYMFG(R7),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SRA   R15,2               YES, QUARTER DATA BYTES PER COLUMN
         SR    R8,R15              SUBTRACT NEGATIVE NUMBER FROM OFFSET
         LTR   R8,R8               IS FINAL OFFSET NEGATIVE?
         BNM   *+6                 NO
         SLR   R8,R8               YES, MAKE IT ZERO (SHOULDN'T HAPPEN)
         STH   R8,OFFSET           SAVE NEW OFFSET
         DROP  R13                 @FMTAREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR
LEFTR15  LH    R0,OFFSET
         SR    R0,R15              REDUCE OFFSET BY SCROLL AMOUNT
         BNM   *+6                 IF RESULT IS NEGATIVE
LEFTMAX  SLR   R0,R0                  THEN MAKE IT ZERO
         STH   R0,OFFSET
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLSCR             YES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         B     FILLSCR
         DROP  R5                  LEFT

**********************************************************************
*                                                          *         *
*         NEWTOP  -  SPECIFY ARBITRARY TOP-OF-DATA         *  GP@P6  *
*                                                          *  04/88  *
**********************************************************************

         USING NEWTOP,R5
NEWTOP   LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         ICM   R0,B'1111',$UCBAD   TALKING TO PHYSICAL DEVICE?
         BZ    INVLDCMD            NO, SO NEWTOP IS INVALID
         TM    STATUS8,ZIPD+ZIPF   PROCESSING A ZIP FILE?
         BNZ   INVLDCMD            YES, COMMAND NOT ALLOWED
         TM    DCBOFLGS,X'10'      IS THE FILE OPEN?
         BZ    INVLDCMD            NO, SO NEWTOP IS INVALID
         LA    R15,OPD2            GET SECOND OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRINV              YES, INVALID
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    NEWTOP0             NO, RESET TO REAL TOP
         TM    6(R15),QUOTED       QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    NEWTOP0             YES, RESET TO REAL TOP
         CH    R1,HW6              IS LENGTH MORE THAN 6?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   ERRINV              NO, INVALID
         EX    R1,FINDXTR          YES, CONVERT TO ZONED HEX
         LA    R1,1(,R1)           GET LENGTH COUNT AGAIN
         SLR   R0,R0               ZERO ACCUMULATOR
         LR    R15,R0              ZERO WORK REGISTER
NEWTOPLP SLL   R0,4                PROMOTE PREVIOUS HEX DIGITS
         NI    0(R14),X'0F'        ZERO ZONE
         IC    R15,0(,R14)         LOAD DIGIT
         OR    R0,R15              GATE DIGIT THROUGH TO ACCUMULATOR
         LA    R14,1(,R14)         POINT TO NEXT POSSIBLE DIGIT
         BCT   R1,NEWTOPLP         PROCESS NEXT DIGIT
         LTR   R0,R0               IS REAL TOP REQUESTED?
         BZ    NEWTOP0             YES
         ICM   R1,B'1111',$UCBAD   TALKING DIRECTLY TO PHYSICAL DEVICE?
         BNP   ERRINV              NO, SO NON-ZERO OPERAND IS INVALID
NEWTOPS  TM    STATUS2,MAGTAPE     REVIEWING A TAPE FILE?
         BO    *+8                 YES, OPERAND IS RELATIVE BLOCK ADDR
         SLL   R0,8                NO, CONVERT RELATIVE TTR TO TTR0
         ST    R0,TTR              SAVE ADDRESS OF NEW TOP-OF-DATA
         TM    STATUS2,EOTAPE      END-OF-FILE FOR TAPE?
         BZ    NEWTOPX             NO, PROCEED WITH POINT
         MVI   CLOSED,X'80'        YES, REPOSITION FOR POINT
         CLOSE ((R4),REREAD),TYPE=T,MF=(E,CLOSED)
         NI    STATUS2,255-EOTAPE  REPOSITIONED AT START
NEWTOPX  POINT (R4),TTR            POINT TO REQUESTED ADDRESS
         NI    STATUS2,255-FASTREAD      DISABLE "FASTPATH"
         NI    STATUS,255-STNOMEM  ALLOW I/O EVEN IF NO MEMBERS
         B     NOCONCAT            RESET POINTERS AND PROCEED
NEWTOP0  LA    R0,1                LOAD FIRST PHYSICAL BLOCK NUMBER
         NI    STATUS7,255-FALL    RESET 'ALL' STATUS
         TM    $UCBAD,ACBSW        ACCESSING DATA VIA ACB?
         BO    NEWTOPOC            YES, PERFORM OPEN/CLOSE PROCESSING
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    NEWTOPS             NO, PHYSICAL SEQUENTIAL
         MVC   BLDLNAME,$MEMBER    YES, LOAD MEMBER NAME
         OI    STATUS,STNOMEM      PREPARE FOR NO MEMBER OF THAT NAME
         MVC   $MEMBER,NOMEM
         B     TOPOFMEM            GO VERIFY AND READ LATEST STOW
NEWTOPOC MVI   CLOSED,X'80'        THIS IS ONE WAY TO DROP ALL BUFFERS
         CLOSE ((R4)),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
         XC    MAXPOINT,MAXPOINT   RESET RECORD READ HIGH-WATER-MARK
         L     R5,INIT2ADR         LOAD SUBROUTINE ADDRESS
         BR    R5                  PERFORM RE-INITIALIZATION
         DROP  R5                  NEWTOP

************************************************************
*                                                          *
*         FINDSMF  -  FIND SMF RECORD (SUB)TYPE            *
*                                                          *
************************************************************

         USING FINDSMF,R5
FINDSMF  LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD4
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         NI    STATUS7,255-FNOT-FALL CAN'T DO FINDSMF-NOT - RESET 'ALL'
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, USE PREVIOUS STRING
         MVI   FINDSW,FSMF         INDICATE FINDSMF
         XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,FINDCOL          RESET COLUMN
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    FINDNULL            YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R7,DOUBLE
         CH    R7,=H'255'          IS IT GREATER THAN 255?
         BH    ERRINV              YES, ERROR
         NI    STATUS8,255-FUOL    PRECISE BIT PATTERN MATCH REQUIRED
         STC   R7,SMFTYPE          STORE FLAVOUR OF THE DAY
         STC   R7,STRING           STORE BINARY VALUE 0 TO 255
         MVI   SMFSBTYP,X'FF'      INVALIDATE SMF RECORD SUBTYPE
         LA    R1,2                COLUMN 2
         TM    TSTRECFM,X'C0'      RECFM U? (VSAM SMF D/S?)
         BM    *+8                 NO
         LA    R1,6                COLUMN 6 (INCLUDING RDW)
         STH   R1,FINDCOL
         SLR   R1,R1               LENGTH MINUS 1 IS ZERO
         STH   R1,STRINGL          SAVE LENGTH CODE
         OI    FINDSW,FNUM         DISALLOW COLUMN SPECIFICATION
         LA    R8,OPD2             GET FIRST OPERAND ENTRY
         LA    R15,OPD3            GET SECOND OPERAND ENTRY
         TM    6(R8),PRESENT       ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, USE PREVIOUS STRING
         LA    R0,1                PREPARE FIND MAINLINE OP CHECK COUNT
FSOPRLP  TM    6(R8),QUOTED        IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R8)           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         L     R14,0(,R8)          GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   FSOPRSWP            NO, TRY FOR OTHER OPERAND
         EX    R1,NUMRCPAK
         CVB   R8,DOUBLE
         CH    R8,=H'255'          IS IT GREATER THAN 255?
         BH    ERRINV              YES, ERROR
         CLI   SMFTYPE,127         IS TYPE GREATER THAN 127?
         BH    FSUSRTYP            YES, ALLOW SUBTYPES FOR USER RECORDS
         STC   R7,DOUBLE           NO, SYSTEM TYPE SMF RECORD
         TRT   DOUBLE(1),FSTYPTBL  DOES THIS TYPE HAVE SUBTYPES?
         BZ    ERRINV              NO, ERROR
FSUSRTYP STH   R8,SMFSBTYP         SAVE SUBTYPE
         B     FOPERLP             GO CHECK IT
FSOPRSWP DS    0H                  NON-NUMERIC OPERAND FOUND
         CR    R8,R15              FIRST TIME HERE?
         BH    ERRINV              NO, ERROR
         XR    R8,R15              YES, SWAP OPERAND POINTERS
         XR    R15,R8
         XR    R8,R15
         TM    6(R8),PRESENT       SECOND OPERAND SPECIFIED?
         BO    FSOPRLP             YES, GO CHECK IT OUT
         B     FOPERLP             NO, GO CHECK THE FIRST OPERAND
         DROP  R5                  FINDSMF

*              TABLE OF SUBTYPE OFFSETS BY SMF RECORD TYPE
*                 OFFSET IS FROM SMFRTY (RECORD TYPE) BYTE
*                 OFFSET OF ZERO MEANS RECORD TYPE HAS NO SUBTYPES
FSTYPTBL DS    0H                                  SYSTEM RECORD TYPES
         DC    X'00000000000000000000000000000000' X'00'-X'0F' 000-015
         DC    X'00000000000000000000000012001200' X'10'-X'1F' 016-031
         DC    X'12120000000000002612120000000000' X'20'-X'2F' 032-047
         DC    X'00000000000000000000000000000000' X'30'-X'3F' 048-063
         DC    X'00000000000012121212121212121212' X'40'-X'4F' 064-079
         DC    X'00001212140000000000200000000000' X'50'-X'5F' 080-095
         DC    X'12000000110000000000000000000000' X'60'-X'6F' 096-111
         DC    X'00000000000000000000000000000000' X'70'-X'7F' 112-127
*               (INSTALLATION-TAILORABLE)          "USER" RECORD TYPES
         DC    X'12121212121212121212121212121212' X'80'-X'8F' 128-143
         DC    X'12121212121212121212121212121212' X'90'-X'9F' 144-159
         DC    X'12121212121212121212121212121212' X'A0'-X'AF' 160-175
         DC    X'12121212121212121212121212121212' X'B0'-X'BF' 176-191
         DC    X'12121212121212121212121212121212' X'C0'-X'CF' 192-207
         DC    X'12121212121212121212121212121212' X'D0'-X'DF' 208-223
         DC    X'12121212121212121212121212121212' X'E0'-X'EF' 224-239
         DC    X'12121212121212121212121212121212' X'F0'-X'FF' 240-255
         LTORG

**********************************************************************
*                                                          *         *
*         RFIND  -  REPEAT SEARCH (FIND OR NOTFIND)        *  GP@FT  *
*                                                          *  11/93  *
**********************************************************************

         USING RFIND,R15
RFIND    LA    R1,OPD1
         TM    6(R1),PRESENT       ANY OPERANDS?
         BO    ERRINV              YES, TOO MANY
         TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BZ    FINDSAME            NO, BRANCH TO COMMON CODE
         NI    STATUS7,255-FALL    RESET 'ALL' STATUS
         OI    STATUS7,FANY        REMEMBER THAT IS WAS RESET
         B     FINDSAME            BRANCH TO COMMON CODE
         DROP  R15                 RFIND

**********************************************************************
*                                                          *         *
*         FINDNOT                                          *  GP@FT  *
*                                                          *  11/93  *
**********************************************************************

         USING FINDNOT,R15
FINDNOT  LA    R1,OPD4
         TM    6(R1),PRESENT       TOO MANY OPERANDS?
         BO    ERRINV              YES
         OI    STATUS7,FNOT        DO FINDNOT, NOT FIND
         B     FITORNOT            BRANCH TO COMMON CODE
         DROP  R15                 FINDNOT

**********************************************************************
*                                                          *         *
*         FXN  -  FINDHEX NOT                              *  GP@FT  *
*                                                          *  11/93  *
**********************************************************************

         USING FINDHEXN,R15
FINDHEXN LA    R1,OPD4
         TM    6(R1),PRESENT       TOO MANY OPERANDS?
         BO    ERRINV              YES
         OI    STATUS7,FNOT        DO FINDNOT, NOT FIND
         LA    R5,FINDHEX          SET COMMON CODE BASE REGISTER
         B     FXORNOTX            BRANCH TO COMMON CODE
         DROP  R15                 FINDHEXN

**********************************************************************
*                                                          *         *
*         FINDHEX                                          *  GP@P6  *
*                                                          *  08/86  *
**********************************************************************

         USING FINDHEX,R5
FINDHEX  LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD4
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         NI    STATUS7,255-FNOT    DO FIND, NOT FINDNOT
FXORNOTX TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BZ    FXALLOFF            NO, BRANCH TO COMMON CODE
         NI    STATUS7,255-FALL    YES, RESET 'ALL' STATUS
         OI    STATUS7,FANY        REMEMBER THAT IS WAS RESET
FXALLOFF LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, SAME AS A FIND COMMAND
         MVI   FINDSW,0            CLEAR FIND FLAGS
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,FINDCOL          RESET COLUMN
         LH    R1,4(,R15)          GET LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         TM    6(R15),QUOTED       QUOTED?
         BO    FINDXDIF            YES, CAN'T BE 'FIND *'
         CH    R1,HW1              NO, FIRST OPERAND LENGTH OF ONE?
         BNE   FINDXDIF            NO, CAN'T BE 'FIND *'
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?
         BE    FNDXLATD            YES, LEAVE THE STRING AS IS
FINDXDIF LTR   R1,R1               IS IT NULL STRING?
         BZ    FINDNULL            YES, ERROR
         TM    5(R15),X'01'        IS THE LENGTH AN ODD NUMBER?
         BO    ERRINV              YES, INVALID NUMBER OF HEX DIGITS
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   ERRINV              NO, INVALID
         EX    R1,FINDXTR          YES, CONVERT TO ZONED HEX
         XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING
         LA    R1,1(,R1)           GET BACK LENGTH OF OPERAND
         SRL   R1,1                GET LENGTH OF FIND ARGUMENT
         LR    R0,R1               COPY HEX FIND TARGET LENGTH
         LA    R15,STRING          POINT TO FIND COMPARISON TARGET
FINDXPAK PACK  0(2,R15),0(3,R14)   CONVERT TWO HEX DIGITS TO A BYTE
         LA    R15,1(,R15)         POINT TO NEXT TARGET BYTE
         LA    R14,2(,R14)         POINT TO NEXT HEX DIGIT PAIR
         BCT   R0,FINDXPAK         PROCESS NEXT HEX DIGIT PAIR
         MVI   0(R15),0            TIDY UP FOR THE FUN OF IT
         BCTR  R1,0
         STH   R1,STRINGL          SAVE LENGTH CODE
         NI    STATUS8,255-FUOL-FPIC  EXACT BIT PATTERN MATCH REQUIRED
         B     FNDXLATD            PROCESS ANY COLUMN SPECIFICATION
         DROP  R5                  FINDHEX

**********************************************************************
*                                                          *         *
*         FPN  -  FINDPIC NOT                              *  GP@GE  *
*                                                          *  07/97  *
**********************************************************************

         USING FINDPICN,R15
FINDPICN LA    R1,OPD4
         TM    6(R1),PRESENT       TOO MANY OPERANDS?
         BO    ERRINV              YES
         LA    R5,FINDPIC          SET COMMON CODE BASE REGISTER
         TM    MODE,ASCIISW        IN ASCII MODE?
         BO    FPASCII             YES, CAN'T DO PICTURE
         OI    STATUS7,FNOT        DO FINDNOT, NOT FIND
         B     FPORNOTP            BRANCH TO COMMON CODE
         DROP  R15                 FINDPICN

**********************************************************************
*                                                          *         *
*         FINDPIC                                          *  GP@GE  *
*                                                          *  07/97  *
**********************************************************************

         USING FINDPIC,R5
FINDPIC  LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD4
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         TM    MODE,ASCIISW        IN ASCII MODE?
         BO    FPASCII             YES, CAN'T DO PICTURE
         NI    STATUS7,255-FNOT    DO FIND, NOT FINDNOT
FPORNOTP TM    STATUS7,FALL        IS 'ALL' STATUS SET?
         BZ    FPALLOFF            NO, BRANCH TO COMMON CODE
         NI    STATUS7,255-FALL    YES, RESET 'ALL' STATUS
         OI    STATUS7,FANY        REMEMBER THAT IS WAS RESET
FPALLOFF LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, SAME AS A FIND COMMAND
         MVI   FINDSW,0            CLEAR FIND FLAGS
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,FINDCOL          RESET COLUMN
         LH    R1,4(,R15)          GET LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         TM    6(R15),QUOTED       QUOTED?
         BO    FINDPDIF            YES, CAN'T BE 'FIND *'
         CH    R1,HW1              NO, FIRST OPERAND LENGTH OF ONE?
         BNE   FINDPDIF            NO, CAN'T BE 'FIND *'
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?
         BE    FNDXLATD            YES, LEAVE THE STRING AS IS
FINDPDIF LTR   R1,R1               IS IT NULL STRING?
         BZ    FINDNULL            YES, ERROR
         BCTR  R1,0
         STH   R1,STRINGL          SAVE LENGTH CODE
         EX    R1,FINDMVC
         OI    STATUS8,FUOL+FPIC   FLAG PICTURE STRING SEARCH
         B     FNDXLATD            DO NOT TRANSLATE SEARCH ARGUMENT
         B     FNDXLATD            PROCESS ANY COLUMN SPECIFICATION
FPASCII  MVC   MSG(MSGFP1L),MSGFP1 CAN'T DO PICTURE WITH ASCII DATA
         B     BELPRMPT
         DROP  R5                  FINDPIC
MSGFP1   MSG   'PICTURE NOT SUPPORTED WITH ASCII ON'

**********************************************************************
*                                                          *         *
*         HELP                                             *   ABL   *
*                                                          *         *
**********************************************************************

         USING HELP,R15
HELP     DS    0H
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    HELCMD              YES, FILE SYSHELP WILL BE IN USE
         NI    STATUS4,255-HELYES  HELP EXPLICTLY REQUESTED
         B     HELPHEL
         DROP  R15                 HELP

HELCMD   DS    0H
         OI    STATUS4,HELYES      HEL EXPLICTLY REQUESTED
HELPHEL  BALR  R5,0                TEMPORARY BASE REGISTER
         USING *,R5
         LA    R15,OPD1            FIRST PARAMETER
         LA    R1,CMDAREA          START OF HELP PARAMETERS
         LA    R0,63               LENGTH OF PARSE STRING
         SLL   R0,16               SHIFT AS REQUIRED
         STCM  R0,B'1111',0(R1)    SAVE FOR PARSE
         TM    6(R15),QUOTED       QUOTED?
         BO    ERRINV              YES, INVALID
         L     R14,0(,R15)         START OF PARAMETER
         LH    R15,4(,R15)         LENGTH OF PARAMETER
         L     R6,REVECT           ECT ADDRESS
         OI    ECTSWS-ECT(R6),ECTNOPD      ASSUME NO OPERAND
         MVC   ECTSCMD-ECT(8,R6),HELPEP    SUBCOMMAND IS HELP
         LTR   R15,R15                     NULL STRING?
         BZ    HELP040                     YES, BRANCH
         CH    R15,HW8                     IS LENGTH MORE THAN 8?
         BH    ERRINV                      YES, ERROR
         BCTR  R15,0                       MACHINE LENGTH
         MVC   BLDLNAME,BLANKS
         EX    R15,MVOPRNDH        COMMAND NAME
         LA    R15,OPD1            START OF FIRST ODL
         L     R14,0(,R15)         START OF FIRST PARAMETER
         LA    R14,0(,R14)         DROP TOP BYTE
         SR    R14,R1              OFFSET TO SECOND PARAMETER
         SH    R14,HW4             LESS TEXT LENGTH FIELDS
         NI    ECTSWS-ECT(R6),X'FF'-ECTNOPD ASSUME OPERANDS
         TM    6(R15),PRESENT      ANY OPERANDS?
         BO    HELP030             YES, BRANCH
         LA    R14,63              NO, USE DEFAULT
         OI    ECTSWS-ECT(R6),ECTNOPD      ASSUME NO OPERAND

HELP030  STH   R14,2(,R1)                  OFFSET TO OPERANDS
HELP040  ST    R1,REVCBUF                  START OF COMMAND TEXT
         LA    R1,REVCBUF          CPPL START
         TM    STATUS4,HELOKAY+HELYES   USE HEL OR HELP?
         BO    HELHELP             HELP IS HEL
         LINK  EPLOC=HELPEP,SF=(E,LINKAREA)
         B     FILLSCR
MVOPRNDH MVC   BLDLNAME(0),0(R14)  <<< EXECUTED >>>
HELHELP  DS    0H
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    *+10                NO, MUST BE AS REVIEW
         MVC   ECTPCMD-ECT(8,R6),HELID YES, COMMAND NAME IS CHANGED
         LA    R14,HELEP           POINT TO THE HELP COMMAND NAME
         TM    STATUS6,HELALT      HAVE TO USE ALTERNATE NAME?
         BZ    *+8                 NO
         LA    R14,HELEP2          YES, POINT TO IT
         LINK  EPLOC=(R14),SF=(E,LINKAREA)
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,0(,R1)           CURRENT RB
         L     R1,12(,R1)          CURRENT CDE
         MVC   ECTPCMD-ECT(8,R6),8(R1)     RESTORE COMMAND NAME
         B     FILLSCR
         DROP  R5                  HELPHEL+2
HELPEP   DC    CL8'&IBMHELP'       SYSTEM TSO HELP ENTRY POINT NAME
HELEP    DC    CL8'&HEL    '       FULLSCREEN HELP ENTRY POINT NAME
HELEP2   DC    CL8'&HEL2   '       FULLSCREEN HELP ENTRY POINT NAME
HELID    DC    CL8'HLHL    '       PHONY NAME FOR HELP OF HEL

**********************************************************************
*                                                          *         *
*         DEBUG  -  SHOW TGET RESULTS ON SCREEN            *   ABL   *
*                                                          *         *
**********************************************************************

DEBUG    DS    0H
         OI    STATUS4,DBUGSW      REFRESH OF SCREEN NEEDED
         B     FILLSCR

**********************************************************************
*                                                          *         *
*         DIR  -  SHOW DIRECTORY MEMBER LIST               * GP@SECV *
*                                                          *  03/86  *
**********************************************************************

         USING DIRCMD,R5
DIRCMD   LR    R5,R15              TEMPORARY BASE REGISTER
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    MEMPDS              NO, BRANCH
         TM    STATUS,STPODIR      ALREADY IN MEMBER SELECT MODE?
         BO    END                 YES, DON'T DO OBTAIN TWICE
         LA    R1,OBTAINW          GET THE LATEST DSCB DETAILS
         OBTAIN (1)                    FROM THE VTOC
         OI    STATUS,STPODIR      TURN ON MEMBER SELECT MODE
         B     END                     AND RETURN TO MAINLINE
         DROP  R5                  DIRCMD

************************************************************
*                                                          *
*         SNAP                                             *
*                                                          *
************************************************************

         USING SNAP,R5
SNAP     LR    R5,R15              TEMPORARY BASE REGISTER
         SLR   R0,R0
         L     R7,540              GET POINTER TO CURRENT TCB
         L     R7,12(,R7)          POINT TO TIOT
         LA    R7,24(,R7)          POINT TO TIOELNGH
SNAPDDNM CLC   4(8,R7),SNAPD+DCBDDNAM-IHADCB
         BE    SNAPSNAP            FILE EXISTS SO GO AND USE IT
         IC    R0,0(,R7)           GET TIOT ENTRY LENGTH
         AR    R7,R0               POINT TO NEXT TIOT ENTRY
         CLI   0(R7),0             ZERO LENGTH ENTRY?
         BNE   SNAPDDNM            NO, CHECK OUT THIS ENTRY
         B     INVLDCMD            YES, NOT IN TIOT SO FORGET SNAP
SNAPSNAP LA    R7,SNAPR
         LA    R0,@DATA
         ST    R0,0(,R7)
         A     R0,=A(@DATAL)
         BCTR  R0,0
         ST    R0,4(,R7)
         L     R0,CHKPTTOP         (COULD USE "ANSWER" HERE TO INCLUDE
         ST    R0,8(,R7)                  THE HOLDING AREA IN THE SNAP)
         LA    R0,32
         A     R0,CHKPTBOT
         C     R0,ENDPTR
         BNH   *+8
         L     R0,ENDPTR
         BCTR  R0,0
         ST    R0,12(,R7)
         OI    12(R7),X'80'
         MVC   SNAPDW(SNAPDL),SNAPD
         LA    R6,SNAPDW
         MVI   OPEND,X'80'
         OPEN  ((R6),OUTPUT),MF=(E,OPEND)
         TM    48(R6),X'10'
         BNO   PROMPT
         MVC   SNAPLW(SNAPLL),SNAPL
         SNAP  DCB=(R6),ID=7,PDATA=(REGS),LIST=(R7),MF=(E,SNAPLW)
         MVI   CLOSED,X'80'
         CLOSE ((R6)),MF=(E,CLOSED)
         B     PROMPT
         DROP  R5                  SNAP

SNAPL    SNAP  DCB=0,ID=7,PDATA=(REGS),LIST=0,MF=L
SNAPLL   EQU   *-SNAPL
*SNAPD   DCB   DDNAME=SNAPOUT,MACRF=(W),DSORG=PS,
*              RECFM=VBA,LRECL=125,BLKSIZE=882
SNAPD    DC    0F'0',20X'00',A(1),X'00004000',A(1,1),X'54',AL3(0)
         DC    CL8'SNAPOUT',X'02000020',A(1,1),AL2(0,882)
         DC    A(0,1,1,1),AL2(0,125),A(1)
SNAPDL   EQU   *-SNAPD

         LTORG

************************************************************
*                                                          *
*         HEX                                              *
*                                                          *
************************************************************

         USING HEXMODE,R5
HEXMODE  LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    HEXFLIP             NO, FLIP FLOP
         L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   HEXOFF              NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         OI    MODE,MODEX
         MVC   ACTCOLOR,HEXCOLOR   SET ACTIVE COLOUR FOR HEX ON
         B     FILLSCR
HEXOFF   CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV
         CLC   OFF,0(R14)
         BNE   ERRINV
         NI    MODE,255-MODEX
         MVC   ACTCOLOR,CHRCOLOR   SET ACTIVE COLOUR FOR HEX OFF
         B     FILLSCR
HEXFLIP  XI    MODE,MODEX          FLIP FLOP THE SWITCH
         XC    ACTCOLOR,CHRCOLOR   FLIP FLOP THE ACTIVE COLOUR
         XC    ACTCOLOR,HEXCOLOR
         B     FILLSCR
         DROP  R5                  HEXMODE

************************************************************
*                                                          *
*         PFK SET                                          *
*                                                          *
************************************************************

         USING PFKSET,R5
PFKSET   LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,3(,R1)          POINT TO NN AFTER PFK
         TRT   0(1,R15),NUMERIC    PFKN
         BNZ   PFKSET9             ERROR, N NOT NUMERIC
         PACK  DOUBLE,0(1,R15)
         CLI   1(R15),C' '         SINGLE DIGIT
         BE    PFKSET1             YES, BRANCH
         TRT   1(1,R15),NUMERIC
         BNZ   PFKSET9             SECOND DIGIT NOT NUMERIC
         CLI   2(R15),C' '
         BNE   PFKSET9             MORE THAN 2 DIGITS
         PACK  DOUBLE,0(2,R15)
PFKSET1  CVB   R1,DOUBLE           GET VALUE OF N OR NN
         LTR   R1,R1
         BZ    PFKSET0             ZERO SO SET DEFAULTS
         LA    R0,24
         CR    R1,R0
         BH    PFKSET9             ERROR, GREATER THAN 24
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         LA    R0,PFKTABL          LENGTH OF EACH PFK ENTRY
         MR    R0,R0               COMPUTE OFFSET INTO TABLE
         LA    R15,PROFDATA(R1)    POINT TO TABLE ENTRY
         LA    R1,OPD1             GET FIRST OPERAND ENTRY
         TM    6(R1),PRESENT       ARE THERE ANY OPERANDS?
         BZ    PFKSETF             NO, BLANK IT
         CLI   5(R1),0             IS IT NULL LENGTH?
         BE    PFKSETF             YES, BLANK IT
         L     R1,0(,R1)           POINT TO OPERAND
         CLC   0(3,R1),PFK         IS OPERAND ANOTHER PFK COMMAND?
         BE    PFKSET9             YES, ERROR
         LA    R0,CMDAREA+62       POINT TO END OF COMMAND AREA
         SR    R0,R1               GET LENGTH CODE OF COMMAND
         BM    PFKSET9
         LR    R14,R0
         MVI   1(R15),C' '
         MVC   2(PFKTABL-2,R15),1(R15)
         EX    R14,PFKLOAD         MOVE COMMAND INTO PFK TABLE
PFKSETX  MVC   MSG(MSG40L),MSG40   PFKNN HAS BEEN RESET
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+5(2),DOUBLE+6(2)
         B     PROMPT
PFKSETF  MVI   1(R15),C' '
         MVC   2(PFKTABL-2,R15),1(R15)
         B     PFKSETX
PFKSET9  MVC   MSG(MSG41L),MSG41   INVALID PFK COMMAND
         B     BELPRMPT
PFKLOAD  MVC   1(0,R15),0(R1)      <<< EXECUTED >>>

PFKSET0  LA    R1,OPD1             GET FIRST OPERAND ENTRY
         TM    6(R1),PRESENT       ARE THERE ANY OPERANDS?
         BO    ERRINV              YES, ABORT TO AVOID DISAPPOINTMENT
         OI    STATUS,STPROF       NO, PROFILE REWRITE NOW REQUIRED
         L     R1,PFKDEFEP         POINT TO PFK DEFAULTS
         LA    R15,PFKTAB
         LA    R0,24               LOAD NUMBER OF PF KEYS
PFKINIT2 MVI   0(R15),C' '
         MVC   1(PFKTABL-1,R15),0(R15) PAD WITH BLANKS
         MVC   0(PFKDEFL,R15),0(R1) INSERT DEFAULT
         LA    R1,PFKDEFL(,R1)     POINT TO NEXT DEFAULT
         LA    R15,PFKTABL(,R15)   POINT TO NEXT PFK ENTRY
         BCT   R0,PFKINIT2         DO NEXT PFK IF ANY
         MVC   MSG(MSG43L),MSG43   DEFAULT PFK VALUES SET
         B     PROMPT
         DROP  R5                  PFKSET
PFK      DC    C'PFK'
         DS    0H

************************************************************
*                                                          *
*         SMF  -  FORMAT SMF RECORDS                       *
*                                                          *
************************************************************

         USING SMFMODE,R5
SMFMODE  LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    SMFFLIP             NO, FLIP FLOP
         L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   SMFOFF              NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         OI    MODE,SMFSW          YES, ENABLE SMF FORMATTING
         NI    MODE,255-EREPSW     DISABLE EREP FORMATTING
SMFLOAD  ICM   R15,B'1111',CALLSMFA GET REVSMF ADDRESS - IS IT LOADED?
         BNZ   FILLSCR             YES, BRANCH
         ICM   R0,15,REVSMFEP      REVSMF LINK-EDITED IN?
         BNZ   SMFLKED             YES
         LOAD  EPLOC=REVSMFNM,ERRET=SMFERR
SMFLKED  ST    R0,CALLSMFA         SAVE ADDRESS OF REVSMF
         B     FILLSCR
SMFOFF   CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV
         CLC   OFF,0(R14)
         BNE   ERRINV
         NI    MODE,255-SMFSW
         B     FILLSCR
SMFFLIP  XI    MODE,SMFSW
         NI    MODE,255-EREPSW     DISABLE EREP FORMATTING
         TM    MODE,SMFSW          DID WE FLIP IT ON?
         BO    SMFLOAD             YES - CHECK FOR REVSMF
         B     FILLSCR
SMFERR   NI    MODE,255-SMFSW
         MVC   MSG(MSGSMFL),MSGSMF REVSMF COULD NOT BE LOADED
         SLL   R1,4                LEAVE ROOM FOR "SIGN"
         ST    R1,DOUBLE+4         SHOW ABEND CODE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+MSGSMFL-6(3),DOUBLE
         TR    MSG+MSGSMFL-6(3),HEXTAB-240
         CVD   R15,DOUBLE          SHOW REASON CODE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+MSGSMFL-2(2),DOUBLE
         B     BELPRMPT
         DROP  R5                  SMFMODE
REVSMFNM DC    CL8'REVSMF  '
MSGSMF   MSG   'REVSMF COULD NOT BE LOADED - SXXX-RC'

**********************************************************************
*                                                          *         *
*         EREP  -  FORMAT LOGREC RECORDS                   *  GP@FT  *
*                                                          *  01/94  *
**********************************************************************

         USING EREPMODE,R5
EREPMODE LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    EREPSEQ             NO, BRANCH
         TM    TSTRECFM,X'C0'      UNDEFINED RECORD FORMAT?
         BZ    INVLDCMD            YES, ONLY ALLOWED FOR SYS1.LOGREC
EREPSEQ  TM    STATUS2,MAGTAPE     MAGNETIC TAPE FILE?
         BO    EREPNKEY            YES, CAN'T BE A KEYED FILE
         CLI   DCBKEYLE,0          NO, IS DISK FILE KEYED?
         BNE   INVLDCMD            YES, CAN'T BE LOGREC RECORDS
EREPNKEY LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    EREPFLIP            NO, FLIP FLOP
         L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   EREPOFF             NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         OI    MODE,EREPSW         YES, ENABLE EREP FORMATTING
         NI    MODE,255-SMFSW      DISABLE SMF FORMATTING
         B     FILLSCR
EREPOFF  CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV              NO, INVALID OPERAND
         CLC   OFF,0(R14)          YES, IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         NI    MODE,255-EREPSW     YES, TURN IT OFF
         B     FILLSCR
EREPFLIP XI    MODE,EREPSW
         NI    MODE,255-SMFSW      DISABLE SMF FORMATTING
         B     FILLSCR
         DROP  R5                  EREPMODE

**********************************************************************
*                                                          *         *
*         COLOUR                                           * GP@SECV *
*                                                          *  06/85  *
**********************************************************************

         USING COLRMODE,R5
COLRMODE LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    COLOURON            YES, CHECK IT OUT
         TM    STATUS5,X3270       NO, FLIP-FLOP
         BZ    COLOR7ON            NOW OFF SO TURN IT ON
         B     COLR7OFF            NOW ON SO TURN IT OFF
COLOURON L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   COLOROFF            NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
COLOR7ON TM    STATUS5,DIDQRY+HILITE HIGHLIGHTING DEFINITELY A NO-NO?
         BM    ERRCOLOR            YES, REJECT THE 'ON' OPERAND
         OI    STATUS5,X3270       COLOUR OK OR CLEVER MONOCHROME OR
         B     FILLSCR                          NO QUERY WAS DONE
COLOROFF CLI   5(R15),3            IS LENGTH 3?
         BNE   COLOUR#             NO, TRY COLOUR NOMINATION
         CLC   OFF,0(R14)          YES, IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
COLR7OFF NI    STATUS5,255-X3270
         B     FILLSCR
COLOUR#  CLI   5(R15),1            IS LENGTH 1?
         BNE   ERRINV              NO
         TRT   0(1,R14),HEXTEST    YES, HEX DIGIT?
         BNZ   ERRINV              NO
         TM    STATUS5,DIDQRY+COLOR IS 7-COLOUR A POSSIBILITY?
         BM    ERRCOLOR            NO, REJECT THE NOMINATED COLOUR
         TR    0(1,R14),HEXDATA    YES, CONVERT OPERAND TO HEXADECIMAL
         TM    0(R14),X'07'        COLOUR 0 OR 8 NOMINATED?
         BZ    ERRCOLOR            YES, BLACK ON VDU IS RIGHT OUT
         CLI   0(R14),X'F8'        IS IT A 7-COLOUR COLOUR?
         BL    COLOR#OK            YES, PROCEED
         TM    STATUS5,COLOR16     NO, IS THIS A 16-COLOUR TERMINAL?
         BZ    ERRCOLOR            NO, CANNOT DO A COLOUR THIS FANCY
COLOR#OK TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    COLORHEL            YES, NO PICTURE DATA PRESENT
         ICM   R15,15,HSEACTIV     PICTURE DATA PRESENT?
         BNZ   COLR#PIC            YES
COLORHEL OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         OI    STATUS5,X3270       TURN ON COLOUR AT THE SAME TIME
         NI    0(R14),X'0F'        CONVERT TO BINARY
         TM    MODE,FMTSW          CURRENTLY FORMATTING RECORDS?
         BNZ   COLR#SMF            YES
         TM    MODE,MODEX          IN HEX MODE?
         BO    COLR#HEX            YES
         MVC   CHRCOLOR,0(R14)     NO, UPDATE CHARACTER MODE COLOUR
         MVC   PROFDATA+12(1),0(R14)
         MVC   ACTCOLOR,0(R14)     UPDATE NON-SMF ACTIVE COLOUR
         B     FILLSCR             REPAINT SCREEN
COLR#HEX MVC   HEXCOLOR,0(R14)     UPDATE HEXADECIMAL MODE COLOUR
         MVC   PROFDATA+13(1),0(R14)
         MVC   ACTCOLOR,0(R14)     UPDATE NON-SMF ACTIVE COLOUR
         B     FILLSCR             REPAINT SCREEN
COLR#SMF MVC   FMTCOLOR,0(R14)     UPDATE SMF MODE COLOUR
         MVC   PROFDATA+11(1),0(R14)
         B     FILLSCR             REPAINT SCREEN
COLR#PIC MVC   PICCOLOR,0(R14)     UPDATE PICTURE RENDERING COLOUR
         NI    PICFLAGS,255-PICOK  PICTURE REDRAW NOW REQUIRED
         B     FILLSCR             REPAINT SCREEN
ERRCOLOR MVC   MSG(MSG42L),MSG42   COLOUR NOT SUPPORTED
         B     BELPRMPT
         DROP  R5                  COLRMODE

**********************************************************************
*                                                          *         *
*         FMTVAR                                           *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************

         USING FMTVAR,R5
FMTVAR   LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD3
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         LA    R15,OPD2
         TM    6(R15),PRESENT      ENOUGH OPERANDS?
         BZ    ERRMISS             NO
         CLI   5(R15),1            IS SECOND OPERAND 1 BYTE LONG?
         BNE   ERRINV              NO, INVALID
         LA    R15,OPD1
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRMISS             YES, ERROR
         CH    R1,HW8              IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         MVC   DOUBLE,BLANKS
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0                GET SYMBOL NAME LENGTH CODE
         EX    R1,SYMNAMLD         MOVE IN THE SYMBOL NAME
         ICM   R1,15,FMTAREA       HAS A FORMAT BEEN LOADED?
         BZ    DOMSGFV1            NO, NO SYMBOLS TO SEARCH
         USING @FMTAREA,R1
         LA    R7,FMTFELS          YES, POINT TO ELEMENT HOLD AREA
         C     R7,FMTFELAD         ANY ELEMENTS LOADED?
         BNL   DOMSGFV1            NO, NO SYMBOLS TO SEARCH
FVSRCHLP CLC   DOUBLE,FELSYMNM(R7) FOUND THE SYMBOL ENTRY?
         BE    FVUPDATE            YES, GO UPDATE IT
         LA    R7,FELSIZE(,R7)     NO, POINT TO NEXT FORMAT ELEMENT
         C     R7,FMTFELAD         ANY MORE ELEMENTS TO CHECK?
         BL    FVSRCHLP            YES
         DROP  R1                  @FMTAREA
         MVC   MSG(MSGFV2L),MSGFV2 NO, SYMBOL NOT FOUND
         MVC   MSG+9(8),DOUBLE     SHOW NAME THAT WAS SOUGHT
         LA    R15,MSG+16          POINT TO LAST BYTE OF NAME
         LH    R0,MSG              GET THE MESSAGE LENGTH
FVMSG2LP CLI   0(R15),C' '         TRAILING BLANK?
         BNE   BELPRMPT            NO, ISSUE MESSAGE
         MVC   0(10,R15),1(R15)    YES, OVERLAY IT
         BCTR  R15,0               BACK UP A BYTE
         BCTR  R0,0                DECREMENT MESSAGE LENGTH
         STH   R0,MSG              UPDATE MESSAGE LENGTH
         B     FVMSG2LP
FVUPDATE LA    R15,OPD2            POINT TO DATA TYPE ODE
         L     R14,0(,R15)         POINT TO DATA TYPE OPERAND
         MVC   MSG(MSGFV3L),MSGFV3 DATA TYPE SET FOR SYMBOL
         MVC   MSG+12(1),0(R14)    SHOW DATA TYPE
         MVC   MSG+22(8),DOUBLE    SHOW NAME OF SYMBOL THAT WAS UPDATED
         LA    R15,MSG+29          POINT TO LAST BYTE OF NAME
         LH    R0,MSG              GET THE MESSAGE LENGTH
FVMSG3LP CLI   0(R15),C' '         TRAILING BLANK?
         BNE   FVMSG3OK            NO, PROCEED
         BCTR  R0,0                DECREMENT MESSAGE LENGTH
         STH   R0,MSG              UPDATE MESSAGE LENGTH
         BCT   R15,FVMSG3LP        BACK UP A BYTE
FVMSG3OK CLI   0(R14),C'C'         CHARACTER REQUEST?
         BE    FMTVARCZ            YES
         CLI   0(R14),C'X'         HEXADECIMAL REQUEST?
         BE    FMTVARX             YES
         CLI   0(R14),C'Z'         ZONED DECIMAL REQUEST?
         BE    FMTVARCZ            YES
         CLI   0(R14),C'P'         PACKED DECIMAL REQUEST?
         BE    FMTVARP             YES
         CLI   0(R14),C'I'         SIGNED INTEGER REQUEST?
         BE    FMTVARB             YES
         CLI   0(R14),C'U'         UNSIGNED INTEGER REQUEST?
         BE    FMTVARB             YES
         B     ERRINV              UNKNOWN DATA TYPE, INVALID OPERAND
FMTVARCZ NI    FELSYMFG(R7),255-FELHEX-FELBIN-FELDEC-FELUNS
         LH    R0,FELSYMLN(,R7)    GET DATA ELEMENT LENGTH
         STH   R0,FELDSPLN(,R7)    THIS IS NOW THE DISPLAY LENGTH
         CLI   0(R14),C'C'         CHARACTERS REQUEST?
         BE    FVLENCHK            YES
         OI    FELSYMFG(R7),FELDEC NO, MUST BE ZONED DECIMAL
         B     FVLENCHK
FMTVARX  NI    FELSYMFG(R7),255-FELBIN-FELDEC-FELUNS
         OI    FELSYMFG(R7),FELHEX
FMTVARXP LH    R0,FELSYMLN(,R7)    GET DATA ELEMENT LENGTH
         SLL   R0,1                DOUBLE IT
         STH   R0,FELDSPLN(,R7)    THIS IS NOW THE DISPLAY LENGTH
         B     FVLENCHK
FMTVARP  NI    FELSYMFG(R7),255-FELBIN-FELUNS
         OI    FELSYMFG(R7),FELHEX+FELDEC
         B     FMTVARXP            BRANCH TO COMMON CODE
FMTVARB  CLC   HW4,FELSYMLN(R7)    IS DATA ITEM LONGER THAN 4 BYTES?
         BL    DOMSGFV4            YES
         NI    FELSYMFG(R7),255-FELHEX-FELDEC-FELUNS
         OI    FELSYMFG(R7),FELBIN
         LH    R0,FELSYMLN(,R7)    GET DATA ELEMENT LENGTH
         SLL   R0,2                QUADRUPLE IT
         STH   R0,FELDSPLN(,R7)    THIS IS NOW THE DISPLAY LENGTH
         CLI   0(R14),C'U'         UNSIGNED REQUEST?
         BNE   FVLENCHK            NO
         OI    FELSYMFG(R7),FELUNS YES
FVLENCHK LA    R0,8                GET MAXIMUM SYMBOL NAME LENGTH
         LH    R15,FELDSPLN(,R7)   GET DISPLAY WIDTH
         SR    R0,R15              GET MAXIMUM POSSIBLE ENTENSION
         BNP   FILLSCR             NOT A PROBLEM ANYWAY
         SLR   R14,R14
         LA    R15,FELSYMNM(R15,R7) POINT TO FIRST "LOST" NAME BYTE
FVDLENLP CLI   0(R15),C' '         TRAILING BLANK?
         BE    FVLENADD            YES, DON'T HAVE TO EXTEND WIDTH
         LA    R14,1(,R14)         NO, EXTEND DISPLAY WIDTH FOR NAME
         LA    R15,1(,R15)         POINT TO NEXT BYTE IN NAME
         BCT   R0,FVDLENLP
FVLENADD AH    R14,FELDSPLN(,R7)   GET NEW DISPLAY WIDTH
         STH   R14,FELDSPLN(,R7)   SAVE IT
         B     FILLSCR             REPAINT SCREEN
DOMSGFV1 MVC   MSG(MSGFV1L),MSGFV1 NO FORMAT CURRENTLY LOADED
         B     BELPRMPT
DOMSGFV4 MVC   MSG(MSGFV4L),MSGFV4 DATA ITEM TOO LONG FOR DATA TYPE
         B     BELPRMPT
SYMNAMLD MVC   DOUBLE(0),0(R14)    <<< EXECUTED >>>
         DROP  R5                  FMTVAR
MSGFV1   MSG   'NO FORMAT CURRENTLY LOADED'
MSGFV2   MSG   'SYMBOL ???????? NOT FOUND'
MSGFV3   MSG   'DATA TYPE ? SET FOR ????????'
MSGFV4   MSG   'DATA ITEM TOO LONG FOR DATA TYPE'

**********************************************************************
*                                                          *         *
*         OFFLOAD MEMBER CONTENTS TO SEQUENTIAL FILE       *  GP@P6  *
*                                                          *  02/90  *
**********************************************************************

         USING MEMRDWRT,R7
MEMRDWRT DS    0H                  READ AND WRITE MEMBER CONTENTS
         TM    STATUS3,TTRSORT     ARE ENTRIES IN TTR ORDER?
         BZ    MEMINOUT            NO, PROCESS AN ALIAS AS REAL MEMBER
         TM    BLDLINDC,X'80'      IS THIS MEMBER AN ALIAS?
         BZ    MEMINOUT            NO, PROCEED WITH DATA COPY
         TM    TSTRECFM,X'C0'      UNDEFINED RECORD FORMAT?
         BNM   NODIV12             YES, NO DATA AFTER ./ ALIAS
MEMINOUT BAL   R14,GET             GET A RECORD FROM THE MEMBER
         LTR   R0,R2               END-OF-FILE?
         BZ    NODIV12             YES, THIS MEMBER NOW OFFLOADED
         TM    STATUS7,FALL        IS "FIND ALL" ACTIVE?
         BZ    MEMWRTRD            NO, WRITE RECORD JUST READ
         MVI   CALLPARM,X'FF'      SET "SEARCH MATCH FOUND" FLAG
         B     NODIV12             STOP SEARCH AND RETURN TO REVSRCH
MEMWRTRD TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BO    GTOFFREC            YES
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BO    GTOFVREC            YES
         L     R14,CALLPARM+4      POINT TO EIGHTY BYTE OUTPUT BUFFER
         ST    R1,0(,R14)          SAVE THE LENGTH OF THIS BLOCK
         LR    R5,R1               SET THE REMAINING LENGTH
         LA    R14,4(,R14)         SET OUTPUT BUFFER POINTER
         LA    R1,76               GET LENGTH OF CARD IMAGE LEFT
         B     PGM1ST76
PGMNXT80 LA    R1,80               GET CAPACITY OF CARD IMAGE
         L     R14,CALLPARM+4      POINT TO EIGHTY BYTE OUTPUT BUFFER
PGM1ST76 CR    R5,R1               WILL RECORD FIT IN THIS CARD?
         BH    PGMCHUNK            NO, FILL UP ANOTHER CARD IMAGE
         LR    R1,R5               YES, GET LENGTH OF LAST OF DATA
         MVI   0(R14),C' '
         MVC   1(79,R14),0(R14)    BLANK RESIDUAL DATA
PGMCHUNK SR    R5,R1               UPDATE REMAINING BYTE COUNT
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,FIXSMALL         COPY PIECE OF PROGRAM
         LA    R2,1(R1,R2)         POINT PAST COPIED DATA
         L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         L     R0,CALLPARM+4       POINT TO THE EIGHTY BYTE RECORD
         PUT   (1),(0)             PUT IT OUT TO SYSUT2
         LTR   R5,R5               ANY DATA REMAINING FOR THIS BLOCK?
         BP    PGMNXT80            YES
         TM    BLDLINDC,X'60'      ANY TTR(S) IN USER DATA?
         BZ    MEMINOUT            NO, GET NEXT BLOCK
         CLC   BLDLTTRT,TTR        FIRST TTR MATCH?
         BNE   CHKNOTE2            NO
         L     R14,CALLPARM+4      POINT TO EIGHTY BYTE OUTPUT BUFFER
         MVI   0(R14),C' '
         MVC   1(79,R14),0(R14)    BLANK IT
         MVC   0(8,R14),=C'./ NOTE1'
         L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         LR    R0,R14              POINT TO THE EIGHTY BYTE RECORD
         PUT   (1),(0)             PUT IT OUT TO SYSUT2
CHKNOTE2 TM    BLDLINDC,X'40'      MORE THAN ONE TTR IN USER DATA?
         BZ    MEMINOUT            NO, GET NEXT BLOCK
         CLC   BLDLTTRN,TTR        SECOND TTR MATCH?
         BNE   MEMINOUT            NO
         L     R14,CALLPARM+4      POINT TO EIGHTY BYTE OUTPUT BUFFER
         MVI   0(R14),C' '
         MVC   1(79,R14),0(R14)    BLANK IT
         MVC   0(8,R14),=C'./ NOTE2'
         L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         LR    R0,R14              POINT TO THE EIGHTY BYTE RECORD
         PUT   (1),(0)             PUT IT OUT TO SYSUT2
         B     MEMINOUT            GET NEXT BLOCK
GTOFVREC LA    R2,4(,R2)           YES, POINT PAST RDW
GTOFFREC L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         TM    STATUS3,UPDTECTL    IEBUPDTE CONTROL CARDS TO BE MADE?
         BZ    NOTUPDTE            NO, DO NOT EDIT DATA RECORDS
         CLC   0(2,R2),=C'./'      IEBUPDTE CONTROL CARD?
         BNE   NOTUPDTE            NO
         MVC   0(2,R2),=C'><'      PROBABLY, BETTER CHANGE IT
NOTUPDTE TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    PTOFFREC            NO, MUST BE VARIABLE LENGTH SO OKAY
         LA    R15,80
         CH    R15,DCBLRECL        FIXED RECORD LENGTH LESS THAN 80?
         BNH   PTOFFREC            NO, PROCEED
         LH    R15,DCBLRECL        YES, LOAD IT
         BCTR  R15,0               DECREMENT FOR EXECUTE
         L     R14,CALLPARM+4      POINT TO EIGHTY BLANKS
         EX    R15,FIXSMALL        CREATE OUTPUT CARD IMAGE
         LR    R0,R14              POINT TO THE EIGHTY BYTE RECORD
PTOFFREC PUT   (1),(0)             PUT IT OUT TO SYSUT2
         B     MEMINOUT            GO BACK FOR ANOTHER
FIXSMALL MVC   0(0,R14),0(R2)      <<< EXECUTED >>>
         DROP  R7                  MEMRDWRT

         LTORG

**********************************************************************
*                                                          *         *
*         COMMAND                                          *  GP@P6  *
*                                                          *  01/93  *
**********************************************************************

COMMAND  DS    0H
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    MEMBERP             YES, SAME AS 'MEMBER'
         B     INVLDCMD            NO, COMMAND NOT ALLOWED

**********************************************************************
*                                                          *         *
*         FULL  -  ALLOW FULL EBCDIC TRANSLATION           *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************

         USING FULL,R5
FULL     LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    FULLON              YES, CHECK IT OUT
         XC    PERIODS,FULLT       NO, FLIP-FLOP
         XC    PERIODS,EDITT           WITHOUT KNOWING WHICH IS ACTIVE
         B     FILLSCR
FULLON   L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   FULLOFF             NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         MVC   PERIODS,FULLT       YES
         B     FILLSCR
FULLOFF  CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV              NO, INVALID OPERAND
         CLC   OFF,0(R14)          YES, IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         MVC   PERIODS,EDITT       YES
         B     FILLSCR
         DROP  R5                  FULL

**********************************************************************
*                                                          *         *
*         DISPLAY - SHOW APL OR TN/T11 CHARACTERS          *  GP@P6  *
*                                                          *  05/92  *
**********************************************************************

         USING DISPCMD,R5
DISPCMD  LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    DISPTHIS            YES, CHECK IT OUT
         XI    PROFDATA+16,C'T'-C'A'    NO, FLIP-FLOP
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         B     FILLSCR
DISPTHIS L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),1            IS LENGTH 1?
         BNE   ERRINV              NO, INVALID OPERAND
         CLI   0(R14),C'A'         APL REQUEST?
         BE    DISPOKAY            YES
         CLI   0(R14),C'T'         TN/T11 PRINT TRAIN REQUEST?
         BNE   ERRINV              NO, INVALID OPERAND
DISPOKAY CLC   PROFDATA+16(1),0(R14)   ANY CHANGE IN PROFILE?
         BE    FILLSCR             NO
         MVC   PROFDATA+16(1),0(R14)   SET REQUESTED DISPLAY CHARACTERS
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         B     FILLSCR
         DROP  R5                  DISPCMD

**********************************************************************
*                                                          *         *
*         PICDATA - WRITE PICTURE "SOURCE CODE"            *  GP@P6  *
*                                                          *  12/99  *
**********************************************************************

         USING PICDATA,R5
PICDATA  LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         OC    HSEACTIV,HSEACTIV   IS ANY PICTURE DATA PRESENT?
         BZ    INVLDCMD            NO, INVALID REQUEST
         LA    R15,OPD2
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         LA    R15,OPD1
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO
         L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),8            TOO LONG FOR DDNAME?
         BH    ERRINV              YES, INVALID OPERAND
         LH    R1,4(,R15)          NO, GET FIELD LENGTH
         LTR   R1,R1               SENSIBLE VALUE?
         BNP   ERRINV              NO, INVALID OPERAND
         MVC   PICSRCDD,BLANKS     CLEAR TARGET DDNAME FIELD
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,PICSETDD         GET THE OUTPUT DDNAME
         SLR   R0,R0
         L     R7,540              GET POINTER TO CURRENT TCB
         L     R7,12(,R7)          POINT TO TIOT
         LA    R7,24(,R7)          POINT TO TIOELNGH
PICSDDNM CLC   PICSRCDD,4(R7)      MATCHING DDNAME?
         BE    PICSDDOK            YES, FILE EXISTS SO GO AND USE IT
         IC    R0,0(,R7)           NO, GET TIOT ENTRY LENGTH
         AR    R7,R0               POINT TO NEXT TIOT ENTRY
         CLI   0(R7),0             ZERO LENGTH ENTRY?
         BNE   PICSDDNM            NO, CHECK OUT THIS ENTRY
         MVC   MSG(MSGPSDDL),MSGPSDD
         MVC   MSGPSDDN,PICSRCDD
         XC    PICSRCDD,PICSRCDD   CLEAR USELESS DDNAME
         B     BELPRMPT
PICSDDOK NI    PICFLAGS,255-PICOK  FORCE REDRAW OF PICTURE
         B     FILLSCR
PICSETDD MVC   PICSRCDD(0),0(R14)  <<< EXECUTED >>>
MSGPSDD  MSG   'DDNAME 12345678 NOT ALLOCATED'
MSGPSDDN EQU   MSG+9,8
         DROP  R5                  PICDATA

**********************************************************************
*                                                          *         *
*         ASCII - TRANSLATE ASCII DATA FOR DISPLAY         *  GP@P6  *
*                                                          *  08/87  *
**********************************************************************

         USING ASCII,R5
ASCII    LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    ASCIION             YES, CHECK IT OUT
         XI    MODE,ASCIISW        NO, FLIP-FLOP
         B     FILLSCR
ASCIION  L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   ASCIIOFF            NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         OI    MODE,ASCIISW        YES
         B     FILLSCR
ASCIIOFF CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV              NO, INVALID OPERAND
         CLC   OFF,0(R14)          YES, IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         NI    MODE,255-ASCIISW    YES
         B     FILLSCR
         DROP  R5                  ASCII

**********************************************************************
*                                                          *         *
*         RECALL - RECALL PREVIOUSLY ENTERED COMMANDS      *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************

         USING RECALL,R5
RECALL   LR    R5,R15              TEMPORARY BASE REGISTER
         L     R1,RECALPTR         GET RECALL STACK ELEMENT
RECALLNT TM    8(R1),X'80'         NEGATIVE LENGTH CODE?
         BZ    RECALLNN            NO, NON-NEGATIVE
         L     R1,4(,R1)           YES, LOAD BACKWARD POINTER
         B     RECALLNT            PERFORM NEGATIVE TEST AGAIN
RECALLNN LA    R8,REPLY+64         TEMPORARY TPUT BUFFER
         MVC   0(RECALPLN,R8),RECALPFX
         LR    R0,R1               SAVE ADDRESS
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R1,14(,R1)          GET REVIEW PRIMARY INPUT LOCATION
         LA    R6,50(,R1)          GET END OF INPUT AREA ADDRESS
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    *+8                 NO, NOW HAVE CORRECT LOCATION
         LA    R1,2(,R1)           YES, GET HEL PRIMARY INPUT LOCATION
         L     R15,=V(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BALR  R14,R15             GET 3270 PRIMARY INPUT ADDRESS
         STCM  R1,3,2(R8)          UPDATE DATA STREAM
         STCM  R1,3,9(R8)
         LR    R1,R6               COPY END OF FIELD ADDRESS
         L     R15,=V(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BALR  R14,R15             GET END OF INPUT FIELD ADDRESS
         STCM  R1,3,5(R8)          UPDATE DATA STREAM
         LR    R1,R0               RESTORE ADDRESS
         TM    STATUS5,X3270       USING 3270 EXTENSIONS?
         BZ    RECALRED            NO
         MVC   RECALPLN(3,R8),REDSA     YES, SUPPLY A COLOUR
         MVC   RECALPLN(1,R8),SACHAR    ENSURE CORRECT SET ATTRIBUTE
         LA    R8,3(,R8)           ADJUST BUFFER POINTER
RECALRED LH    R14,8(,R1)          GET LENGTH CODE
         LTR   R14,R14             ONE BLANK FOR END OF STACK?
         BP    RECALTXT            NO, RECALL THE TEXT
         LA    R14,REPLY+64+RECALPLN  YES, POINT PAST DATA SO FAR
         B     RECALLIC            GO SUPPLY INSERT CURSOR
RECALTXT LA    R0,50-1             GET MAXIMUM FOR REVIEW
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    *+8                 NO, NOW HAVE MAXIMUM LENGTH CODE
         LA    R0,48-1             YES, GET MAXIMUM FOR HEL
         CLR   R14,R0              TOO LONG FOR PRIMARY INPUT AREA?
         BNH   *+6                 NO, PROCEED
         LR    R14,R0              YES, REDUCE TO INPUT AREA LENGTH
         EX    R14,RECALLMV        LOAD RECALLED TEXT
         LA    R14,RECALPLN+1(R14,R8)   POINT PAST END OF RECALL TEXT
RECALLIC MVI   0(R14),IC           INSERT CURSOR AFTER TEXT
         LA    R0,1(,R14)          POINT PAST END OF DATA STREAM
         MVC   RECALPTR,4(R1)      UPDATE NEXT-TO-BE-RECALLED POINTER
         LA    R1,REPLY+64         GET TPUT BUFFER ADDRESS
         SR    R0,R1               GET TPUT BUFFER LENGTH
         B     RECALPUT            DISPLAY RECALLED TEXT
RECALLMV MVC   RECALPLN(0,R8),10(R1)   <<< EXECUTED >>>
         DROP  R5                  RECALL

RECALPFX DCS   X'C1',SBA,(2,15),RTA,(2,65),X'00',SBA,(2,15),IC
RECALPLN EQU   *-RECALPFX-1        INSERT CURSOR AFTER TEXT
         LTORG

**********************************************************************
*                                                          *         *
*         SUB  -  ABBREVIATION FOR SUBCOM OR SUBMIT        *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************

         USING SUB,R5
SUB      LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,SUBMIT          POINT TO SUBMIT SUBCOMMAND CODE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZR   R15                 NO, PERFORM 'SUBMIT'
         LA    R15,SUBCOMP         YES, PERFORM 'SUBCOM'
         DROP  R5                  SUB

**********************************************************************
*                                                          *         *
*         SUBCOM  -  SPECIFY NEW SUBCOMMAND FOR HELP       *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************

         USING SUBCOMP,R5
SUBCOMP  LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    INVLDCMD            NO, COMMAND NOT ALLOWED
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    SUBCOMOP            YES, GO CHECK FOR SUBCOMMAND
         CLC   $SUBCOM,BLANKS      NO, ANY PREVIOUS SUBCOMMAND?
         BE    ERRMISS             NO, ERROR
         B     SUBCOMLK            YES, GO LOOK FOR IT AGAIN
SUBCOMOP TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRMISS             YES, ERROR
         CH    R1,HW8              IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         MVC   $SUBCOM,BLANKS
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0                GET SUBCOMMAND NAME LENGTH CODE
         EX    R1,SUBCOMLD         MOVE IN THE SUBCOMMAND NAME
         STH   R1,$SUBLEN          SAVE IT FOR SEARCH PROCESSING
SUBCOMLK OI    STATUS6,HELNEWS     LOOK FOR NEW SUBCOMMAND
         MVI   FINDSW,FACT+FTOP    ACTIVATE FIND PROCESSING
         B     FINDTOP             START SEARCHING FROM THE TOP
SUBCOMLD MVC   $SUBCOM(0),0(R14)   <<< EXECUTED >>>
         DROP  R5                  SUBCOMP

**********************************************************************
*                                                          *         *
*         SUBMIT                                           *  GP@P6  *
*                                                          *  09/91  *
**********************************************************************

         USING SUBMIT,R5
SUBMIT   LR    R5,R15              TEMPORARY BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS8,ZIPD+ZIPF   PROCESSING A ZIP FILE?
         BNZ   INVLDCMD            YES, COMMAND NOT ALLOWED
         TM    MYDSCB-44+82,X'42'  SEQUENTIAL OR PARTITIONED?
         BNM   INVLDCMD            NO, INVALID DATA SET TYPE
         CLC   =H'80',MYDSCB-44+88 IS RECORD LENGTH 80?
         BNE   INVLDCMD            NO, INVALID DATA SET TYPE
         TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    INVLDCMD            NO, INVALID DATA SET TYPE
*         THE ABOVE THREE TESTS REPRESENT NO LOSS OF FUNCTION
*               BECAUSE TSO SUBMIT ALSO MAKES THESE TESTS.
         LA    R15,OPD1
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         MVC   CMDAREA(12),=CL12'TSO SUBMIT '''
         MVC   CMDAREA+12(44),$DSNAME+2     LOAD DATA SET NAME
         LH    R1,$DSNAME          GET LENGTH OF DATA SET NAME
         LA    R1,CMDAREA+12(R1)   POINT PAST DATA SET NAME
         MVI   0(R1),QUOTE         SUPPLY TRAILING QUOTE
         LR    R14,R1              POINT TO TRAILING QUOTE
         LA    R0,CMDAREA          POINT TO GENERATED COMMAND
         SR    R14,R0              GET COMMAND LENGTH CODE
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    NOTPFK              NO, SUBMIT SEQUENTIAL DATA SET
         MVI   0(R1),C'('          YES, SUPPLY OPEN BRACKET
         MVC   1(8,R1),$MEMBER     SUPPLY MEMBER NAME
         MVI   9(R1),C')'          SUPPLY CLOSE BRACKET
         MVI   10(R1),QUOTE        SUPPLY TRAILING QUOTE
         LA    R1,8(,R1)           POINT TO LAST BYTE OF MEMBER NAME
         LA    R14,8(,R14)         ADJUST LENGTH CODE
SUBMITLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NOTPFK              NO, SUBMIT THE PDS MEMBER
         MVC   0(3,R1),1(R1)       YES, SHUFFLE BRACKET, QUOTE + BLANK
         BCTR  R1,0                POINT TO NEW LAST MEMBER NAME BYTE
         BCTR  R14,0               ADJUST LENGTH CODE
         B     SUBMITLP            RE-CHECK FOR TRAILING BLANK
         DROP  R5                  SUBMIT

         LTORG

**********************************************************************
*                                                          *         *
*         VERIFY CHECKPOINT ENTRY ACCURACY                 *  GP@FT  *
*                                                          *  08/92  *
**********************************************************************

         USING CHKPTVFY,R15
CHKPTVFY TM    STATUS2,FASTREAD    IS "FASTPATH" BEING USED?
         BOR   R14                 YES, PERFORM NO ACTION HERE
         LTR   R0,R0               IS DIV BEING USED?
         BPR   R14                 YES, PERFORM NO ACTION HERE
         LTR   R1,R1               RE-READ OF END-OF-FILE?
         BMR   R14                 YES, PERFORM NO ACTION HERE
         CLC   COUNT,CHKPTDUM      RE-READ OF ANY PHYSICAL RECORD?
         BNER  R14                 NO, VERIFY NOT APPROPRIATE
         OC    COUNT,COUNT         ACCESSING FIRST RECORD?
         BZR   R14                 YES, VERIFY NOT APPROPRIATE
         OC    $UCBAD,$UCBAD       TALKING TO ANY I/O DEVICE?
         BZR   R14                 NO, VERIFY NOT APPROPRIATE
         STM   R14,R12,12(R13)     PROCEED, SAVE REGISTERS
         LA    R0,CHKPTLN          GET LENGTH OF CHECKPOINT ENTRY
         L     R1,CHKPTTOP         GET FIRST CHECKPOINT ENTRY ADDRESS
         ICM   R2,15,CHKPTBOT      GET LAST CHECKPOINT ENTRY ADDRESS
         BZ    CPVFYXIT            UNDEFINED CHECKPOINT TABLE STATUS
         LM    R6,R7,CHKPTDUM      LOAD LATEST STATUS FROM I/O MEDIUM
CPVFYLP  CLR   R1,R2               GONE PAST LAST CHECKPOINT ENTRY?
         BH    CPVFYXIT            YES, BUT THIS SHOULDN'T HAPPEN
         CL    R6,0(,R1)           CHECKPOINT ENTRY MATCH?
         BL    CPVFYMIS            NO, ENTRY IS MISSING FROM TABLE
         BE    CPVMATCH            YES, GO COMPARE DATA
         ALR   R1,R0               NO, POINT TO NEXT ENTRY
         B     CPVFYLP             CONTINUE LOOPING THROUGH TABLE
CPVFYMIS TM    0(R1),X'80'         ENCOUNTERED E-O-F ENTRY?
         BZ    CPVFYXIT            NO, ENTRY COMPRESSED OUT OF TABLE
         TM    TSTRECFM,X'48'      VARIABLE LENGTH SPANNED RECORDS?
         BNO   CPVOVRLY            NO, GO OVERLAY WITH NEW ENTRY
         L     R5,BLOCKPTR         POINT TO PHYSICAL BLOCK
         TM    6(R5),X'02'         IS "NOT FIRST SEGMENT" FLAG ON?
         BO    CPVFYXIT            YES, DO NOT CHECKPOINT THIS BLOCK
CPVOVRLY STM   R6,R7,0(R1)         OVERLAY WITH NEW ENTRY
         ST    R1,CHKPTBOT         THIS SHOULD BE SUPERFLUOUS
         B     CPVFYXIT            NEW RECORD(S) ADDED TO END OF DATA
CPVMATCH CL    R7,4(,R1)           IS RECORD MEDIUM ADDRESS CORRECT?
         BE    CPVFYXIT            YES, NO UPDATE SINCE PREVIOUS READ
         ST    R7,4(,R1)           NO, CORRECT IT
         ST    R1,CHKPTBOT         DROP SUBSEQUENT TABLE ENTRIES
CPVFYXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R15,R4              CHKPTVFY, IHADCB

**********************************************************************
*                                                          *         *
*         DISCARD RECORD FOR FIND/FINDNOT ALL              *  GP@FT  *
*                                                          *  07/94  *
**********************************************************************

**********************************************************************
* ON ENTRY:    R1 CONTAINS LENGTH OF RECORD (OR -1 IF END-OF-FILE)   *
*              R2 CONTAINS ADDRESS OF RECORD (OR 0 IF END-OF-FILE)   *
**********************************************************************

         USING FALLREC,R4
FALLREC  TM    STATUS7,FALL        IS "FIND/FINDNOT ALL" ACTIVE?
         BNOR  R14                 NO, PERFORM NO ACTION HERE
         LTR   R1,R1               IS THIS RECORD END-OF-FILE?
         BMR   R14                 YES, PERFORM NO ACTION HERE
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT CURRENT?
         BOR   R14                 YES, PERFORM NO ACTION HERE
         STM   R14,R12,12(R13)     PROCEED, SAVE REGISTERS
         LR    R4,R15              SET LOCAL BASE REGISTER
         LA    R5,CALLSAVE         POINT TO NEW SAVE AREA
         ST    R5,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R5)
         LR    R13,R5              ACTIVATE NEW SAVE AREA
         LH    R5,FINDCOL          GET ANY COLUMN SPECIFICATION
         LTR   R5,R5               ANY COLUMN SPECIFIED?
         BNZ   FALLCOL             YES, CHECK THIS LOCATION ONLY
         LR    R0,R1               GET THE RECORD LENGTH
         SH    R0,STRINGL          GET THE REQUIRED COMPARE COUNT
         BNP   FAILFIND            RECORD IS TOO SHORT TO TEST
         LR    R5,R2               POINT TO START OF RECORD DATA
         TM    STATUS7,FNOT        IS THIS FOR A FINDNOT?
         BO    FNALLOOP            YES
FALLLOOP LA    R15,SEARCHIT        GET MATCHING SUBROUTINE ENTRY POINT
         BALR  R14,R15             COMPARE STRING TO DATA
         BE    FALLRECX            FOUND DATA SO SHOW RECORD
         LA    R5,1(,R5)           POINT TO NEXT RECORD LOCATION
         BCT   R0,FALLLOOP         CONTINUE THE SEARCH
         B     FAILRECX            NOT FOUND SO DISCARD RECORD
FNALLOOP LA    R15,SEARCHIT        GET MATCHING SUBROUTINE ENTRY POINT
         BALR  R14,R15             COMPARE STRING TO DATA
         BNE   FALLRECX            FOUND NOT-DATA SO SHOW RECORD
         LA    R5,1(,R5)           POINT TO NEXT RECORD LOCATION
         BCT   R0,FNALLOOP         CONTINUE THE SEARCH
         B     FAILRECX            FOUND ONLY IT SO DISCARD RECORD
FALLCOL  TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    FALLCOLX            NO.
         SH    R1,HW4              YES, ADJUST RECORD LENGTH
         AH    R2,HW4              ADJUST DATA ORIGIN
FALLCOLX LR    R7,R5               COPY COLUMN
         AH    R7,STRINGL          GET ENDING COLUMN
         CR    R7,R1               IS RECORD LONG ENOUGH?
         BH    FAILFIND            NO
         BCTR  R5,0                CONVERT COLUMN TO OFFSET
         AR    R5,R2               POINT TO RECORD CONTENTS
         LA    R15,SEARCHIT        GET MATCHING SUBROUTINE ENTRY POINT
         BALR  R14,R15             COMPARE STRING TO DATA
         BNE   FAILFIND            STRING NOT FOUND
         TM    FINDSW,FSMF         IS THIS A FINDSMF COMMAND?
         BZ    FALLSMFD            NO, DON'T CHECK SMF SUBTYPE
         CLI   SMFSBTYP,X'FF'      YES, LOOKING FOR A SUBTYPE?
         BE    FALLSMFD            NO, DON'T CHECK SMF SUBTYPE
         L     R1,FSTYPADR         POINT TO SUBTYPE OFFSET TABLE
         SLR   R0,R0
         IC    R0,0(,R5)           GET SMF RECORD TYPE
         ALR   R1,R0               POINT TO OFFSET FOR THIS TYPE
         IC    R0,0(,R1)           GET THE OFFSET
         LR    R1,R0               COPY IT
         ALR   R1,R5               POINT TO SUBTYPE
         CLC   0(1,R1),SMFSBTYP+1  SUBTYPE MATCH?
         BNE   FAILFIND            NO, CONTINUE SEARCH
FALLSMFD TM    STATUS7,FNOT        YES, IS THIS FOR A FINDNOT?
         BZ    FALLRECX            NO, SHOW RECORD FOR "FIND ALL"
         B     FAILRECX            FOUND DATA FOR FINDNOT - DISCARD
FAILFIND TM    STATUS7,FNOT        IS THIS A FINDNOT?
         BZ    FAILRECX            NO, DISCARD RECORD FOR "FIND ALL"
FALLRECX L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
FAILRECX LA    R0,1
         A     R0,COUNT            INCREMENT LAST READ RECORD NUMBER
         ST    R0,COUNT
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R15,R12,16(R13)     RESTORE REGISTERS
         L     R14,READR           GET ULTIMATE RETURN ADDRESS
         B     GET                 REDRIVE THE "READ A RECORD" ROUTINE
         DROP  R4                  FALLREC

**********************************************************************
*                                                          *         *
*         RESET "FIND/FINDNOT ALL" STATUS                  *  GP@FT  *
*                                                          *  07/94  *
**********************************************************************

         USING RESET,R15
RESET    NI    STATUS7,255-FALL    RESET "ALL" STATUS
         OI    STATUS7,FANY        REMEMBER THAT IT WAS RESET
         L     R7,HOLDTOP          POINT TO HOLD AREA DIRECTORY
         L     R0,DIRNUM(,R7)      GET THE FIRST RECORD TO DISPLAY
         B     LISTAT              GO GET A SCREENFUL
         DROP  R15                 RESET

**********************************************************************
*                                                          *         *
*         DETERMINE FIND MATCH RESULTS                     *  GP@GE  *
*                                                          *  07/97  *
**********************************************************************

**********************************************************************
*                                                                    *
*           THIS SUBROUTINE TESTS WHETHER THE DATA CURRENTLY BEING   *
*        EXAMINED MATCHES THE SPECIFIED SEARCH STRING.  WHEN AN      *
*        EXACT MATCH IS REQUIRED A SIMPLE COMPARE IS PERFORMED.      *
*        FOR CASE INSENSITIVE AND PICTURE SEARCHES REGISTERS ARE     *
*        SAVED AND MORE SOPHISTICATED PROCESSING IS PERFORMED.       *
*        THE SEARCH ARGUMENT IS IN STRING.  ITS LENGTH CODE IS IN    *
*        STRINGL.                                                    *
*                                                                    *
**********************************************************************
* ON ENTRY:           R5 -> FILE DATA BEING EXAMINED                 *
*                     R14-> RETURN BRANCH TARGET                     *
*                     R15-> ENTRY POINT                              *
* ON EXIT:            PSW CONDITION CODE CONTAINS RESULT OF COMPARE  *
**********************************************************************

         USING SEARCHIT,R15
SEARCHIT TM    STATUS8,FUOL+FPIC   EXTENDED EXAMINATION REQUIRED?
         BNZ   SEARCHEX            YES, PERFORM EXTENDED CHECKING
         LH    R15,STRINGL         NO, GET THE STRING LENGTH CODE
         EX    R15,FINDCLC         PERFORM A SIMPLE COMPARE
         BR    R14                 RETURN TO CALLER WITH COND CODE SET
SEARCHEX STM   R14,R12,12(R13)     PROCURE SOME WORK REGISTERS
         LH    R2,STRINGL          GET THE STRING LENGTH CODE
         EX    R2,SEARCHLD         COPY THE FILE DATA
         TM    MODE,ASCIISW        IS ASCII ON?
         BZ    SEARCHEB            NO, PROCESS EBCDIC
         EX    R2,SEARCHTA         TRANSLATE ASCII TO UPPER CASE
         B     SEARCHMC            **** SKIP PICTURE FOR ASCII ****
SEARCHEB EX    R2,SEARCHTR         TRANSLATE EBCDIC TO UPPER CASE
         TM    STATUS8,FPIC        PICTURE STRING SEARCH?
         BO    SEARCHPC            YES, PERFORM PICTURE CHECKING
SEARCHMC EX    R2,SEARCHCL         NO, COMPARE STRING TO MONOCASE DATA
SEARCHX  LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER WITH COND CODE SET
SEARCHLD MVC   REPLY+64(0),0(R5)   <<< EXECUTED >>>
SEARCHTR TR    REPLY+64(0),KAPS    <<< EXECUTED >>>
SEARCHTA TR    REPLY+64(0),KAPASCI <<< EXECUTED >>>
SEARCHCL CLC   REPLY+64(0),STRING  <<< EXECUTED >>>
SEARCHPC LA    R0,1(,R2)           GET NUMBER OF BYTES TO COMPARE
         SLR   R2,R2               CLEAR TRANSLATE-AND-TEST REGISTER
         LA    R3,STRING           POINT TO SPECIFIED PICTURE STRING
         LA    R4,REPLY+64         POINT TO MONOCASE FILE DATA
SRCHPCLP TRT   0(1,R3),TABPIC      PICTURE MASK CHARACTER?
         BNZ   SRCHGTAD            YES, GO GET SUBROUTINE ADDRESS
         CLC   0(1,R3),0(R4)       DOES NON-MASK CHARACTER MATCH?
         BNE   SEARCHX             NO, STOP BECAUSE MISMATCH FOUND
SRCHNXT  SR    R14,R14             RESET PSW CONDITION CODE
         LA    R3,1(,R3)           POINT TO NEXT ARGUMENT BYTE
         LA    R4,1(,R4)           POINT TO NEXT MONOCASE DATA BYTE
         LA    R5,1(,R5)           POINT TO NEXT FILE DATA BYTE
         BCT   R0,SRCHPCLP         YES, PROCESS NEXT CHARACTER
         B     SEARCHX             PICTURE STRING MATCH FOUND
SRCHGTAD LH    R14,SRCHPATB-2(R2)  GET PICTURE ADDRESS TABLE ENTRY
         ALR   R14,R15             PERFORM RELOCATION
         BR    R14                 PROCESS PICTURE MASK CHARACTER
SRCHINV  CLI   0(R5),X'40'         DATA BYTE IN X'00' TO X'3F' RANGE?
         BL    SRCHNXT             YES, DATA BYTE IS INVALID
         CLI   0(R5),X'FF'         NO, IS DATA BYTE X'FF'?
         BE    SRCHNXT             YES, DATA BYTE IS INVALID
         B     SEARCHX             NO, STOP BECAUSE MISMATCH FOUND
SRCHLWR  CLI   0(R5),X'81'         DATA BYTE BEFORE LOWER CASE 'A'?
         BL    SEARCHX             YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),X'A9'         DATA BYTE ABOVE LOWER CASE 'Z'?
         BH    SEARCHX             YES, STOP SEARCH BECAUSE OF MISMATCH
         TRT   0(1,R5),TABALF-X'80' NO, IS BYTE A LOWER CASE LETTER?
         BZ    SRCHNXT             YES, DATA BYTE IS LOWER CASE
         B     SEARCHX             NO, STOP BECAUSE MISMATCH FOUND
SRCH@    CLI   0(R5),C'A'          CAN DATA BYTE BE UPPER CASE?
         BL    SRCHLWR             NO, TRY LOWER CASE
SRCHUPR  CLI   0(R5),C'A'          DATA BYTE BEFORE UPPER CASE 'A'?
         BL    SEARCHX             YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),C'Z'          DATA BYTE ABOVE UPPER CASE 'Z'?
         BH    SEARCHX             YES, STOP SEARCH BECAUSE OF MISMATCH
         TRT   0(1,R5),TABALF-X'C0' NO, IS BYTE A UPPER CASE LETTER?
         BZ    SRCHNXT             YES, DATA BYTE IS UPPER CASE
         B     SEARCHX             NO, STOP BECAUSE MISMATCH FOUND
SRCH$    TRT   0(1,R5),TAB$        SPECIAL CHARACTER?
         BZ    SRCHNXT             YES
         B     SEARCHX             NO, STOP BECAUSE MISMATCH FOUND
SRCHNTB  CLI   0(R5),C' '          NON-BLANK?
         BNE   SRCHNXT             YES
         CR    R11,R12             NO, GENERATE NON-ZERO PSW CC
         B     SEARCHX             STOP BECAUSE MISMATCH FOUND
SRCH#    CLI   0(R5),C'0'          DATA BYTE BEFORE '0'?
         BL    SEARCHX             YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),C'9'          DATA BYTE ABOVE '9'?
         BH    SEARCHX             YES, STOP SEARCH BECAUSE OF MISMATCH
         B     SRCHNXT             DATA BYTE IS NUMERIC
SRCHN#   CLI   0(R5),X'EF'         DATA BYTE BEFORE '0'?
         BNH   SRCHNXT             YES, DATA IS NON-NUMERIC
         CLI   0(R5),X'FA'         DATA BYTE ABOVE '9'?
         BNL   SRCHNXT             YES, DATA IS NON-NUMERIC
         B     SEARCHX             STOP BECAUSE MISMATCH FOUND
         DROP  R15                 SEARCHIT

SRCHPATB DS    0H                  PICTURE MASK SUBROUTINE TABLE
         DC    Y(SRCHINV-SEARCHIT) EP FOR INVALID CHARACTER
         DC    Y(SRCHLWR-SEARCHIT) EP FOR LOWER CASE ALPHABETIC
         DC    Y(SRCH$-SEARCHIT)   EP FOR SPECIAL CHARACTER
         DC    Y(SRCHNTB-SEARCHIT) EP FOR NON-BLANK
         DC    Y(SRCHN#-SEARCHIT)  EP FOR NON-NUMERIC
         DC    Y(SRCHUPR-SEARCHIT) EP FOR UPPER CASE ALPHABETIC
         DC    Y(SRCH#-SEARCHIT)   EP FOR NUMERIC
         DC    Y(SRCH@-SEARCHIT)   EP FOR ALPHABETIC
         DC    Y(SRCHNXT-SEARCHIT) EP FOR ANY CHARACTER

TABPIC   DS    0CL256              PICTURE MASK CHARACTER TABLE
         DC    75AL1(0)
         DC    AL1(1*2)      (4B)  . INVALID CHARACTER
         DC    AL1(2*2)      (4C)  < LOWER CASE ALPHABETIC CHARACTER
         DC    14AL1(0)
         DC    AL1(3*2)      (5B)  $ SPECIAL CHARACTER
         DC    3AL1(0)
         DC    AL1(4*2)      (5F)  ^ NON-BLANK CHARACTER
         DC    AL1(5*2)      (60)  - NON-NUMERIC CHARACTER
         DC    13AL1(0)
         DC    AL1(6*2)      (6E)  > UPPER CASE ALPHABETIC CHARACTER
         DC    12AL1(0)
         DC    AL1(7*2)      (7B)  # NUMERIC CHARACTER
         DC    AL1(8*2)      (7C)  @ ALPHABETIC CHARACTER
         DC    AL1(0)
         DC    AL1(9*2)      (7E)  = ANY CHARACTER
         DC    129AL1(0)

TABALF   DC    X'FF000000000000000000FFFFFFFFFFFF'
         DC    X'FF000000000000000000FFFFFFFFFFFF'
         DC    X'FFFF0000000000000000'

TAB$     DS    0CL256                SPECIAL CHARACTERS
         DC    4X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  X'00' - X'3F'
         DC    1X'FF000000000000000000000000000000'  X'40' - X'4F'
         DC    3X'00000000000000000000000000000000'  X'50' - X'7F'
         DC    2X'00FFFFFFFFFFFFFFFFFF000000000000'  X'80' - X'9F'
         DC    1X'0000FFFFFFFFFFFFFFFF000000000000'  X'A0' - X'AF'
         DC    1X'00000000000000000000000000000000'  X'B0' - X'BF'
         DC    2X'00FFFFFFFFFFFFFFFFFF000000000000'  X'C0' - X'DF'
         DC    1X'0000FFFFFFFFFFFFFFFF000000000000'  X'E0' - X'EF'
         DC    1X'FFFFFFFFFFFFFFFFFFFF0000000000FF'  X'F0' - X'FF'

KAPASCI  DC    97AL1(*-KAPASCI)          00-60
         DC    26AL1(*-KAPASCI-X'20')    61-7A BECOME 41-5A
         DC    123AL1(*-KAPASCI)         7B-FF

**********************************************************************
*                                                          *         *
*         LOAD MODULE RECORD FORMAT ROUTINE                *  GP@FT  *
*                                                          *  09/92  *
**********************************************************************

         USING PGMFRMAT,R8
PGMFRMAT TM    DSORG,X'02'         IS DSORG PO?
         BZR   R14                 NO, CAN'T BE A LOAD MODULE
         TM    TSTRECFM,X'C0'      RECFM U?
         BMR   R14                 NO, CAN'T BE A LOAD MODULE
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R8,R15              SET BASE REGISTER
         LA    R15,CALLSAVE        POINT TO NEW SAVE AREA
         ST    R13,4(,R15)         CHAIN SAVE AREAS
         ST    R15,8(,R13)
         LR    R13,R15             POINT TO NEW SAVE AREA
         L     R2,DIRREC(,R7)      POINT TO DATA RECORD
         CLI   0(R2),X'20'         COMPOSITE EXTERNAL SYMBOL RECORD?
         BE    ESDFRMAT            POSSIBLY, PERFORM ANY ESD FORMATTING
         CLI   0(R2),X'80'         IDENTIFICATION RECORD?
         BE    IDRFRMAT            POSSIBLY, PERFORM ANY IDR FORMATTING
PGMFMXIT L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         ST    R6,44(,R13)         UPDATE R6 SAVE SLOT
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER

**********************************************************************
*                                                          *         *
*         FORMAT EXTERNAL SYMBOL DICTIONARY RECORD         *  GP@FT  *
*                                                          *  09/92  *
**********************************************************************

ESDFRMAT DS    0H                  BREAK OUT CESD RECORD DATA
         LH    R1,6(,R2)           GET ESD DATA LENGTH INDICATOR
         LA    R0,8(,R1)           GET THE RECORD LENGTH
         C     R0,DIRLEN(,R7)      IS THIS CORRECT?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
         CLI   6(R2),0             CESD DATA LENGTH LESS THAN 256?
         BNE   PGMFMXIT            NO, UNEXPECTED FORMAT SO EXIT
         TM    7(R2),X'0F'         CESD DATA LENGTH A MULTIPLE OF 16?
         BNZ   PGMFMXIT            NO, UNEXPECTED FORMAT SO EXIT
         LH    R1,OFFSET           GET LEFT/RIGHT SCROLL OFFSET
         SH    R1,=H'280'          GET INDEX NUMBER OF ENTRY TO SHOW
         BM    PGMFMXIT            TOO FAR LEFT FOR ANY FORMATTING
         SLR   R0,R0               PREPARE FOR DIVIDE
         L     R15,SCRNCOLS
         DR    R0,R15              GET ENTRY INDEX NUMBER
         LR    R15,R1              COPY IT
         SLL   R1,4                MULTIPLY BY 16 FOR INDEX
         CH    R1,6(,R2)           IS THE CESD RECORD LONG ENOUGH?
         BNL   PGMFMXIT            NO, TOO FAR RIGHT FOR ANY FORMATTING
         LA    R1,8(R1,R2)         YES, POINT TO THE ESD ENTRY
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         TM    STATUS5,X3270+COLOR+HILITE USING COLOURS?
         BO    ESDHIOK1            YES, HIGHLIGHTING FINISHED
         MVC   0(2,R6),SFPROHI     NO, MAKE HIGH INTENSITY
         LA    R6,1(,R6)           ADJUST FOR EXTRA BYTE
ESDHIOK1 AH    R15,4(,R2)          GET ESD ID
         STH   R15,LINKAREA+2
         UNPK  1(5,R6),LINKAREA+2(3)    LOAD ESD ID INTO DISPLAY LINE
         TR    1(4,R6),HEXTAB-240  MAKE DISPLAYABLE HEX CHARACTERS
         MVI   5(R6),C' '          ERASE GARBAGE
         MVC   6(8,R6),0(R1)       COPY THE EXTERNAL SYMBOL NAME
         OC    6(8,R6),6(R6)       IS IT NULL?
         BNZ   *+10                NO
         MVC   6(8,R6),=CL8'--NULL--' YES, INDICATE THIS
         CLC   6(8,R6),BLANKS      IS IT BLANK?
         BNE   *+10                NO
         MVC   6(8,R6),$PRIVATE    YES, INDICATE THIS
         TR    6(8,R6),PERIODS     TRANSLATE UNPRINTABLES
         UNPK  15(3,R6),8(2,R1)    LOAD SYMBOL TYPE INTO DISPLAY LINE
         TR    15(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   17(R6),C' '         ERASE GARBAGE
         CLI   8(R1),X'0A'         KNOWN ESD TYPE?
         BH    ESDTYPOK            NO, SUPPRESS INTERPRETATION
         SLR   R15,R15
         IC    R15,8(,R1)          LOAD SYMBOL TYPE
         SLL   R15,1               DOUBLE FOR INDEX
         LA    R15,ESDTYPES(R15)   POINT TO TYPE LABEL
         MVC   15(2,R6),0(R15)     LOAD SYMBOL TYPE INTO DISPLAY LINE
         MVC   18(14,R6),$UNRESOL  PREPARE FOR UNRESOLVED REFERENCE
         CLI   8(R1),X'0A'         WEAK EXTERNAL REFERENCE?
         BE    ESDFMTOK            YES, DO NOT SHOW LENGTH OR OFFSET
         MVC   29(3,R6),BLANKS     NO, ERASE THE '(W)'
         CLI   8(R1),X'02'         EXTERNAL REFERENCE?
         BE    ESDFMTOK            YES, DO NOT SHOW LENGTH OR OFFSET
         MVC   18(11,R6),BLANKS    ERASE THE '$UNRESOLVED'
ESDTYPOK UNPK  18(7,R6),9(4,R1)    LOAD SYMBOL OFFSET INTO DISPLAY LINE
         TR    18(6,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   24(R6),C' '         ERASE GARBAGE
         UNPK  32(3,R6),12(2,R1)   LOAD XA FLAGS INTO DISPLAY LINE
         TR    32(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   34(R6),C' '         ERASE GARBAGE
         CLI   8(R1),X'03'         LABEL REFERENCE?
         BE    ESDXACHK            YES, SUPPRESS LENGTH AND IDR SEARCH
         CLI   8(R1),X'07'         NULL REFERENCE?
         BE    ESDXACHK            YES, SUPPRESS LENGTH AND IDR SEARCH
         UNPK  25(7,R6),13(4,R1)   LOAD SYMBOL LENGTH INTO DISPLAY LINE
         TR    25(6,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   31(R6),C' '         ERASE GARBAGE
         MVC   DOUBLE(4),COUNT     SAVE CURRENT COUNT VALUE
         MVI   LINKAREA+1,0        CLEAR A FLAG BYTE
         SLR   R1,R1               ZERO BYTES-TO-GO COUNTER
ESDHLDLP TM    LINKAREA+1,X'80'    EXTRACTING DATA FROM DIV?
         BO    ESDIVREC            YES, EXAMINE DIV
         C     R7,HOLDEND          IS THIS THE LAST HELD RECORD?
         BE    ESDIVREC            YES, EXAMINE DIV
         MVC   COUNT,DIRNUM(R7)    NO, SAVE THIS RECORD NUMBER
         L     R7,DIRNXT(,R7)      POINT TO NEXT HELD RECORD DETAILS
         TM    DIRLEN(R7),X'80'    IS THIS END-OF-FILE?
         BO    ESDFMTDN            YES, ABORT IDR SEARCH
         L     R0,DIRLEN(,R7)      GET THE LENGTH OF THE RECORD
         L     R2,DIRREC(,R7)      POINT TO THE RECORD DATA
         B     ESDRECRD            LOOK AT THE RECORD DATA
ESDIVREC OI    LINKAREA+1,X'80'    FLAG USING DIV FOR IDR RECORD SCAN
         ICM   R0,B'1111',DIVREG1  DIV AVAILABLE?
         BP    ESDDIVLP            YES, GO INVOKE IT
         MVC   60(19,R6),ESDNOIDM  NO, IDR RECORDS MAY NOT BE ON SCREEN
         B     ESDFMTDN            TERMINATE IDR SCAN
ESDDIVLP LR    R4,R1               SAVE THE BYTES-TO-GO COUNTER
         LR    R5,R15              SAVE THE IDR SCANNING CURSOR
         ICM   R5,8,$UCBAD         SAVE THE FLAG BYTE OF $UCBAD
         OI    $UCBAD,ACBSW        TELL REVDIV TO SKIP THE POINT
         LA    R0,1                INCREMENT RECORD NUMBER
         A     R0,COUNT
         ST    R0,COUNT
         LA    R0,8                GET ENTRY CODE (RECORD FETCH)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         STCM  R5,8,$UCBAD         RESTORE THE FLAG BYTE OF $UCBAD
         LTR   R15,R15             SUCCESSFUL RETRIEVAL?
         BNZ   ESDFDOWN            NO, NEED TO SCROLL DOWN MORE FIRST
         LTR   R0,R1               YES, COPY THE RECORD LENGTH
         BNP   ESDFMTDN            ABORT IDR SCAN IF END-OF-FILE
         LR    R1,R4               RESTORE THE BYTES-TO-GO COUNTER
         LA    R15,0(,R5)          RESTORE THE IDR SCANNING CURSOR
ESDRECRD CLI   0(R2),X'80'         IDENTIFICATION RECORD?
         BNE   ESDHLDLP            NO, READ NEXT RECORD
         SLR   R14,R14             CLEAR FOR INSERT
         IC    R14,1(,R2)          GET THE IDR DATA LENGTH
         LA    R14,1(,R14)         COUNT THE IDR TYPE BYTE
         CR    R14,R0              CORRECT LENGTH FOR IDR RECORD?
         BNE   ESDFMTDN            NO, UNEXPECTED FORMAT SO ABORT SCAN
         LTR   R1,R1               YES, ANY DATA FROM PREVIOUS RECORD?
         BNZ   ESDPTROK            YES, DO NOT RESET CURRENT POINTER
         L     R15,BLOCKPTR        NO
         LA    R15,256(,R15)       RESTART FROM START OF AREA
ESDPTROK L     R14,SAVLRECL        GET THE MAXIMUM BLOCK LENGTH
         SRL   R14,1               HALVE IT
         AL    R14,BLOCKPTR        POINT TO HALF-WAY ALONG BLOCK
         CR    R14,R15             COMBINED IDR PASSED THIS POINT?
         BNL   ESDRMOK             NO, STILL ROOM FOR IDR CONCAT
         L     R14,BLOCKPTR        YES
         LA    R14,256(,R14)       POINT TO START OF AREA
         MVC   0(256,R14),0(R15)   SHUFFLE DATA LEFT TO ENSURE ROOM
         MVC   256(256,R14),256(R15)
         MVC   512(256,R14),512(R15)
         LR    R15,R14             UPDATE CURRENT POINTER
ESDRMOK  LA    R14,0(R1,R15)       POINT PAST ANY PREVIOUS DATA
         MVC   0(253,R14),3(R2)    CONCATENATE IDR (MAX LENGTH IS 256)
         SLR   R0,R0
         IC    R0,1(,R2)           GET THE IDR DATA LENGTH
         SH    R0,HW2
         AR    R1,R0               ADJUST REMAINING IDR BYTE COUNT
         BAL   R14,ESDIDREC        EXTRACT SOME (MORE) IDR DATA
*                                  RETURN HERE ONLY IF MORE IDRS FOLLOW
         B     ESDHLDLP            GET NEXT HELD RECORD
ESDXACHK TM    DSORGTYP,OVLY       IS THIS AN OVERLAY PROGRAM?
         BO    ESDFMTOK            YES, BYTE IS NOT XA FLAGS
         TM    12(R1),X'06'        ANY XA FLAGS ON FOR THIS LABEL?
         BZ    ESDFMTOK            NO  (ALWAYS ZERO FOR NULL)
         LA    R15,34
         ALR   R6,R15              POINT TO AFTER XA FLAG BYTE DISPLAY
         LA    R0,1                DISPLAY ESDXAMSG IN BLUE
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO NEXT LINE MINUS 80
         TM    STATUS5,X3270+COLOR+HILITE USING COLOURS?
         BO    ESDXALOK            YES, HIGHLIGHTING FINISHED
         MVC   34(2,R6),SFPROLO    NO, REVERT TO LOW INTENSITY
         LA    R6,1(,R6)           ADJUST FOR EXTRA BYTE
ESDXALOK MVC   35(45,R6),ESDXAMSG  YES, SHOW AMODE/RMODE BIT MEANINGS
         B     ESDHIOK2            THIS LINE DONE SO GO LOAD HEADINGS
ESDFDOWN MVC   60(18,R6),ESDDOWNM  NEED TO SCROLL DOWN FOR ID RECORDS
ESDFMTDN MVC   COUNT,DOUBLE        RESTORE CURRENT COUNT VALUE
ESDFMTOK TM    STATUS5,X3270       USING EXTENDED ATTRIBUTES?
         BZ    ESDZAPOK            NO, SHOW IN HIGH INTENSITY
         CLI   57(R6),C'Y'         ZAP DATA INDICATED FOR THIS ENTRY?
         BNE   ESDZAPOK            NO, NO ZAP DATA INDICATED
         MVC   166(22,R6),58(R6)   YES, SAVE REST OF DISPLAY LINE
         MVC   64(22,R6),166(R6)   MOVE IT BACK SIX BYTES LATER
         MVC   60(1,R6),57(R6)     MOVE ZAP FLAG TO THREE BYTES LATER
         MVC   57(3,R6),BLINK      MAKE THE ZAP FLAG BLINK
         MVC   61(3,R6),NORMAL     MAKE MOST OF THE SCREEN NOT BLINK
         LA    R6,6(,R6)           ADJUST SCREEN POINTER FOR ATTRIBUTES
ESDZAPOK TM    STATUS5,X3270+COLOR+HILITE USING COLOURS?
         BO    ESDHIOK2            YES, HIGHLIGHTING FINISHED
         MVC   79(2,R6),SFPROLO    NO, REVERT TO LOW INTENSITY
         LA    R6,1(,R6)           ADJUST FOR EXTRA BYTE
ESDHIOK2 L     R1,SCREENF          POINT TO THE COLUMNS LABEL LINE
         CLI   1(R1),X'42'         SET ATTRIBUTE COLOUR CODE?
         BNE   *+8                 NO, NOT USING COLOUR
         LA    R1,3(,R1)           YES, POINT PAST IT
         AL    R1,SCRNCOLS         POINT TO THE RULER LINE
         MVC   0(80,R1),ESDFMTHD   SUPPLY ESD FORMAT COLUMN HEADINGS
         TM    DSORGTYP,OVLY       IS THIS AN OVERLAY PROGRAM?
         BZ    PGMFMXIT            NO, ESD FORMATTING NOW COMPLETE
         MVC   32(2,R1),=C'OV'     YES, CORRECT HEADING
         B     PGMFMXIT            ESD FORMATTING NOW COMPLETE

ESDIDREC DS    0H                  EXTRACT DETAILS FOR AN ESDID
         TM    2(R2),X'01'         ZAP SERVICE AID TYPE?
         BO    ESDIDZAP            YES
         TM    2(R2),X'04'         TRANSLATOR TYPE?
         BO    ESDIDTRN            YES
         TM    2(R2),X'08'         USER TYPE?
         BO    ESDIDUSR            YES
         B     ESDIDNUL            NO, DISCARD RECORD AND RETURN
ESDIDZAP DS    0H                  PROCESS ZAP IDR
         CLI   1(R2),X'FA'         250 DATA BYTES?
         BNE   ESDIDNUL            NO, DISCARD RECORD AND RETURN
         ICM   R1,8,3(R2)          LOAD THE ZAP ENTRY COUNT BYTE
         SLL   R1,3                SHIFT OUT POSSIBLE FLAG BITS
         SRL   R1,27               GET THE ZAP ENTRY COUNT
         LTR   R1,R1
         BNP   ESDIDRTN            ZERO SO NO DATA IN THIS RECORD
         LA    R15,4(,R2)          POINT TO FIRST ZAP ENTRY
ESDZAPLP CLC   0(2,R15),LINKAREA+2 MATCHING ESD ID?
         BE    ESDZAPON            YES
         LA    R15,13(,R15)        NO, POINT TO NEXT ZAP ENTRY
         BCT   R1,ESDZAPLP         CONTINUE SCAN OF ZAP IDR
         B     ESDIDRTN            SCAN OF ZAP IDR NOW COMPLETE
ESDZAPON MVI   57(R6),C'Y'         INDICATE THAT CSECT HAS BEEN ZAPPED
         B     ESDIDNUL            SCAN OF ZAP IDR NOW COMPLETE
ESDIDTRN DS    0H                  PROCESS TRANSLATOR IDR
         CLI   35(R6),C' '         SOME INFORMATION ALREADY LOADED?
         BNE   ESDIDNUL            YES, DISCARD THIS RECORD
ESDTRNLP CH    R1,=H'320'          MORE THAN 320 BYTES TO GO?
         BH    ESDTRNOK            YES, CONTINUE
         CLI   1(R2),X'FF'         LAST IDR OF THIS TYPE?
         BNE   ESDTRNOK            YES, CONTINUE
         TM    2(R2),X'80'         LAST IDR RECORD OF ANY TYPE?
         BZ    ESDIDRTN            NO, TACK ON MORE DATA TO SCAN
ESDTRNOK ICM   R0,12,0(R15)        LOAD ESD ID
         SLL   R0,1                SHIFT OUT LAST-ID BIT
         SRL   R0,1                RESTORE TO CORRECT ALIGNMENT
         CLM   R0,12,LINKAREA+2    MATCHING ESDID?
         BE    ESDGOTRN            YES
         TM    0(R15),X'80'        LAST ESD ID IN ENTRY?
         BO    ESDNXTRN            YES
         LA    R15,2(,R15)         NO, POINT TO NEXT ESD ID
         SH    R1,HW2              ADJUST DATA COUNT
         BP    ESDTRNLP            NO DATA LEFT SO RETURN
         B     ESDIDNUL            GO TACK ON MORE DATA TO SCAN
ESDNXTRN LA    R0,18               GET LENGTH IF ONE TRANSLATOR
         TM    2(R15),X'01'        TWO TRANSLATORS?
         BZ    *+8                 NO
         LA    R0,18+15            YES, GET OFFSET TO NEXT ENTRY
         AR    R15,R0              POINT TO NEXT TRANSLATOR
         SR    R1,R0               ADJUST LENGTH
         BNP   ESDIDNUL            NO DATA LEFT SO RETURN
         B     ESDTRNLP            PROCESS NEXT ESD TRANSLATOR ENTRY
ESDGOTRN TM    0(R15),X'80'        LAST ESD ID IN ENTRY?
         BO    ESDLDTRN            YES
         LA    R15,2(,R15)         NO, POINT TO NEXT ESD ID
         SH    R1,HW2              ADJUST DATA COUNT
         BNP   ESDIDNUL            NO DATA LEFT SO RETURN
         B     ESDGOTRN            SEE IF THIS IS THE LAST ONE
ESDLDTRN TM    2(R15),X'01'        TWO TRANSLATORS?
         BZ    ESDSLTRN            NO, JUST ONE SLOT PRESENT
         CLC   =X'000F',31(R15)    ZERO JULIAN DAY IN SECOND SLOT?
         BE    ESDSLTRN            YES, NOT A "PROPER" SLOT SO USE 1ST
         LA    R0,15               NO, GET 1ST TO 2ND OFFSET DIFFERENCE
         AR    R15,R0              USE THE SECOND TRANSLATOR IDR SLOT
         SR    R1,R0
ESDSLTRN STM   R14,R5,12(R13)      SAVE REGISTERS
         MVC   52(8,R13),DOUBLE    SAVE DOUBLE
         LA    R2,35(,R6)          POINT TO THE DATE DISPLAY SLOT
         ICM   R4,7,15(R15)        LOAD THE JULIAN DATE OF TRANSLATE
ESDCHKDT ST    R4,DOUBLE           STORE DATE FOR EXAMINATION
         TM    DOUBLE+3,X'0F'      SIGN AS EXPECTED?
         BNO   ESDDATDN            NO, REJECT IT
         NI    DOUBLE+3,X'F0'      YES, ZERO IT
         CLI   DOUBLE+2,X'36'      DDD OVER 369?
         BH    ESDDATDN            YES, REJECT IT
         LA    R0,3                THREE BYTES TO CHECK
         LA    R1,DOUBLE+1         POINT TO FIRST BYTE
ESDVFYLP CLI   0(R1),X'A0'         IS THE HIGH-ORDER DIGIT DECIMAL?
         BNL   ESDDATDN            NO, REJECT IT
         NI    0(R1),X'0F'         YES, ZERO IT
         CLI   0(R1),X'0A'         IS THE LOW-ORDER DIGIT DECIMAL?
         BNL   ESDDATDN            NO, REJECT IT
         LA    R1,1(,R1)           THIS BYTE OKAY, POINT TO THE NEXT
         BCT   R0,ESDVFYLP         PROCESS NEXT BYTE
         L     R15,=V(IDRDATE)
         BALR  R14,R15             CONVERT JULIAN DATE TO YY/MM/DD
         MVC   0(8,R2),DOUBLE      LOAD THE DATE INTO THE DISPLAY LINE
         MVI   8(R2),C'_'          INDICATE RELATED DATUM
ESDDATDN MVC   DOUBLE,52(R13)      RESTORE DOUBLE
         LM    R14,R5,12(R13)      RESTORE REGISTERS
         TM    2(R2),X'08'         USER TYPE?
         BO    ESDFMTDN            YES, TERMINATE ESD FORMATTING
         MVC   44(10,R6),3(R15)    NO, LOAD THE TRANSLATOR NAME
         TR    44(10,R6),PERIODS   TRANSLATE UNPRINTABLES
         LA    R0,9                CHECK FOR LEADING BLANK NINE TIMES
ESDTRBLP CLI   44(R6),C' '         LEADING BLANK?
         BNE   ESDTRBOK            NO
         MVC   44(10,R6),45(R6)    YES, SUPPRESS IT
         BCT   R0,ESDTRBLP         CONTINUE
ESDTRBOK CLI   53(R6),C' '         ONE BLANK TO SPARE?
         BE    ESDTR1BL            YES
         CLI   13(R15),X'0F'       SINGLE HEX DIGIT VERSION/RELEASE?
         BH    ESDIDNUL            NO, SKIP TRANSLATOR RELEASE FORMAT
         MVI   54(R6),C'_'         YES, INDICATE RELATED DATUM
         MVC   55(1,R6),13(R15)    SHOW ONE HEX DIGIT VERSION/RELEASE
         TR    55(1,R6),HEXTAB     MAKE IT HEX NUMERIC CHARACTER
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTR1BL LA    R4,52(,R6)          POINT TO BEFORE TARGET BYTE
ESDTRBLT CLI   0(R4),C' '          ANOTHER TRAILING BLANK?
         BNE   ESDTRFMT            NO, START FORMATTING
         BCTR  R4,0                YES, BACK UP ONE BYTE
         B     ESDTRBLT            GO TEST FOR BLANK AGAIN
ESDTRFMT MVI   1(R4),C'_'          YES, INDICATE RELATED DATUM
         UNPK  2(3,R4),13(2,R15)   SHOW TWO HEX DIGIT VERSION/RELEASE
         TR    2(2,R4),HEXTAB-240  MAKE IT HEX NUMERIC CHARACTERS
         MVI   4(R4),C' '          ERASE GARBAGE
         CLI   2(R4),C'0'          LEADING ZERO?
         BNE   *+10                NO
         MVC   2(2,R4),3(R4)       YES, SHUFFLE UP TO SUPPRESS IT
         CLI   55(R6),C' '         ROOM FOR MORE DATA?
         BNE   ESDIDNUL            NO, DONE FORMAT PROCESSING
         CLI   14(R15),16          SINGLE DIGIT TRANSLATOR MOD-LEVEL?
         BL    ESDTRREL            YES, GO USE IT
         CLI   53(R6),C' '         NO, ROOM FOR '.MM'?
         BNE   ESDTRMD1            NO, TRY AGAIN FOR SINGLE DIGIT
         MVI   53(R6),C'.'         YES, SUPPLY THE POINT
         UNPK  54(3,R6),14(2,R15)  LOAD THE TRANSLATOR MODIFICATION
         TR    54(2,R6),HEXTAB-240 MAKE IT HEX NUMERIC CHARACTER
         MVI   56(R6),C' '         ERASE GARBAGE
         LA    R4,52(,R6)          POINT TO BEFORE POINT
ESDTRM2L CLI   0(R4),C' '          POINT PRECEEDED BY A BLANK?
         BNE   ESDIDNUL            NO, TRANSLATOR LEVEL FORMATTING DONE
         MVC   0(4,R4),1(R4)       YES, SHUFFLE UP
         BCTR  R4,0                BACKUP ONE BYTE
         B     ESDTRM2L            CONTINUE IMBEDDED BLANK CHECK
ESDTRMD1 TM    14(R15),X'0F'       SINGLE DIGIT TRANSLATOR MOD-LEVEL?
         BNZ   ESDIDNUL            NO, TERMINATE TRANSLATOR LEVEL FMT
         UNPK  55(1,R6),14(1,R15)  COPY THE TRANSLATOR MODIFICATION
         B     ESDTRLOK            JUMP OVER THE CONVENTIONAL MOVE
ESDTRREL MVC   55(1,R6),14(R15)    COPY THE TRANSLATOR MODIFICATION
ESDTRLOK TR    55(1,R6),HEXTAB     MAKE IT HEX NUMERIC CHARACTER
         CLI   54(R6),C' '         ROOM FOR THE POINT?
         BNE   ESDTRNLC            NO, TRY TO SHOW IT IN LOWER CASE
         MVI   54(R6),C'.'         YES, SUPPLY THE POINT
         LA    R4,53(,R6)          POINT TO BEFORE THE POINT
ESDTRPBL CLI   0(R4),C' '          POINT PRECEEDED BY A BLANK?
         BNE   ESDIDNUL            NO, TRANSLATOR LEVEL FORMATTING DONE
         MVC   0(3,R4),1(R4)       YES, SHUFFLE UP
         BCTR  R4,0                BACKUP ONE BYTE
         B     ESDTRPBL            CONTINUE IMBEDDED BLANK CHECK
ESDTRNLC CLI   55(R6),C'0'         DECIMAL NUMERIC?
         BL    ESDTRELX            NO, HEX DIGIT GREATER THAN NINE
         BH    ESDTRNGE            YES, MAYBE USE SUPERSCRIPT DIGIT
         MVI   55(R6),C' '         SUPPRESS ZERO MODIFICATION LEVEL
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTRNGE TM    STATUS5,GEOK        GRAPHIC ESCAPE ALLOWABLE?
         BO    ESDTRNSS            YES, USE SUPERSCRIPT FOR MOD LEVEL
         MVI   55(R6),C' '         NO, ERASE MOD LEVEL DIGIT (1 TO 9)
*                                  BECAUSE 2.1 WOULD LOOK LIKE 21
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTRNSS MVC   80(25,R6),55(R6)    SAVE REST OF DISPLAY LINE
         MVI   55(R6),X'08'        INSERT GRAPHIC ESCAPE
         MVC   56(25,R6),80(R6)    RESTORE REST OF DISPLAY LINE
         LA    R6,1(,R6)           INCREMENT FOR GRAPHIC ESCAPE
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTRELX NI    55(R6),X'BF'        CHANGE ALPHA HEX DIGIT TO LOWER CASE
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDIDUSR DS    0H                  PROCESS USER IDENTIFY IDR
ESDUSRLP CLC   0(2,R15),LINKAREA+2 MATCHING ESDID?
         BE    ESDGOTID            YES
         ICM   R4,8,5(R15)         NO, GET LENGTH OF IDENTIFY DATA
         SLL   R4,2                MAX LENGTH IS FORTY
         SRL   R4,26
         LA    R0,6(,R4)           GET THE LENGTH OF THIS ENTRY
         AR    R15,R0              POINT TO NEXT USER IDENTIFY ENTRY
         SR    R1,R0               ADJUST LENGTH
         BNP   ESDIDRTN            NO DATA LEFT SO RETURN
         CH    R1,=H'320'          MORE THAN 320 BYTES TO GO?
         BH    ESDUSRLP            YES, CONTINUE
         CLI   1(R2),X'FF'         LAST IDR OF THIS TYPE?
         BNE   ESDUSRLP            YES, CONTINUE
         TM    2(R2),X'80'         LAST IDR RECORD OF ANY TYPE?
         BO    ESDUSRLP            YES, CONTINUE
         B     ESDIDRTN            NO, TACK ON MORE DATA TO SCAN
ESDGOTID STM   R14,R5,12(R13)      SAVE REGISTERS
         MVC   52(8,R13),DOUBLE    SAVE DOUBLE
         ICM   R4,8,5(R15)         GET LENGTH OF IDENTIFY DATA
         SLL   R4,2                MAX LENGTH IS FORTY
         SRL   R4,26
         BCTR  R4,0                DECREMENT FOR EXECUTE
         EX    R4,ESDLDUSR         SHOW THE USER IDENTIFY DATA
         EX    R4,ESDTRUSR         TRANSLATE UNPRINTABLES
         LA    R2,59(,R6)          POINT TO THE DATE DISPLAY SLOT
         ICM   R4,7,2(R15)         LOAD THE JULIAN DATE OF IDENTIFY
         B     ESDCHKDT            GO PROCESS DATE INFORMATION
ESDLDUSR MVC   68(0,R6),6(R15)     <<< EXECUTED >>>
ESDTRUSR TR    68(12,R6),PERIODS   <<< EXECUTED >>>
ESDIDNUL SLR   R1,R1               DISCARD THIS RECORD COMPLETELY
ESDIDRTN DS    0H                  RETURN FOR THE NEXT RECORD
         TM    2(R2),X'80'         LAST IDR RECORD?
         BO    ESDFMTDN            YES, THIS SCREEN LINE NOW COMPLETE
         BR    R14                 NO, RETURN FOR NEXT RECORD

**********************************************************************
*                                                          *         *
*         FORMAT LOAD MODULE IDENTIFICATION RECORD         *  GP@FT  *
*                                                          *  09/92  *
**********************************************************************

IDRFRMAT DS    0H                  BREAK OUT IDENTIFICATION RECORD DATA
         SLR   R1,R1               PREPARE FOR INSERT
         IC    R1,1(,R2)           GET IDR LENGTH INDICATOR
         LA    R0,1(,R1)           GET THE RECORD LENGTH
         C     R0,DIRLEN(,R7)      IS THIS CORRECT?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
         SH    R0,OFFSET           GET LENGTH EXTENDING ON TO SCREEN
         TM    MODE,MODEX          IN HEXADECIMAL MODE?
         BZ    *+8                 NO
         SLL   R0,1                YES, SO DOUBLE IT
         CH    R0,=H'38'           GOT FORTY-TWO BLANKS FOR FORMAT?
         BH    PGMFMXIT            NO, SO RETURN WITHOUT ACTION
         TM    2(R2),X'01'         ZAP SERVICE AID TYPE?
         BO    IDRZAP1             YES
         TM    2(R2),X'02'         LINKAGE EDITOR TYPE?
         BO    IDRLKED1            YES
         TM    2(R2),X'04'         TRANSLATOR TYPE?
         BO    IDRTRAN1            YES
         TM    2(R2),X'08'         USER TYPE?
         BO    IDRUSER1            YES
         B     PGMFMXIT            UNSUPPORTED TYPE SO JUST EXIT

IDRZAP1  CLI   1(R2),X'FA'         250 DATA BYTES?
         BNE   PGMFMXIT            NO, CAN'T BE A ZAP IDR
         LH    R1,OFFSET           GET THE SCROLL LEFT/RIGHT OFFSET
         SH    R1,=H'240'
         BM    PGMFMXIT            TOO FAR LEFT FOR ANY EXTRA DISPLAY
         ICM   R4,8,3(R2)          LOAD THE ZAP ENTRY COUNT BYTE
         SLL   R4,3                SHIFT OUT POSSIBLE FLAG BITS
         SRL   R4,27               GET THE ZAP ENTRY COUNT
         L     R15,SCRNCOLS
         SRL   R15,1
         SR    R1,R15
         BM    IDRZAPCT            JUST SHOW THE ZAP COUNT
         SLR   R0,R0               CLEAR FOR DIVIDE
         DR    R0,R15              DETERMINE WHICH ENTRIES TO FORMAT
         LTR   R1,R1
         BZ    IDRZAPCT            JUST SHOW THE ZAP COUNT
         CR    R1,R4               TOO FAR RIGHT FOR DETAILS?
         BH    IDRZAPCT            YES, JUST SHOW THE ZAP COUNT
         STC   R1,LINKAREA+3       NO, SAVE THE NUMBER FOR LATER
         BCTR  R1,0                DECREMENT FOR INDEX
         MH    R1,=H'13'
         LA    R1,4(R1,R2)         POINT TO THE ZAP IDR ENTRY
         ST    R1,CALLPARM+12      REMEMBER FOR LATER
         ICM   R4,7,2(R1)          LOAD JULIAN DATE OF ZAP
         B     IDRDTCHK            GO CHECK THE IDR DATE
IDRZAPCT LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO ZAP COUNT FORMAT AREA
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80
         MVC   46(34,R6),IDRZPMSG
         CVD   R4,DOUBLE           SHOW THE RECORD'S ZAP ENTRY COUNT
         MVC   42(3,R6),=X'202120'
         LA    R1,44(,R6)          IN CASE OF ZERO COUNT
         EDMK  41(4,R6),DOUBLE+6
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         MVI   0(R1),C'('
         CLI   3(R2),1             EXACTLY ONE ENTRY?
         BNE   IDRTIDY             NO, GO DO FINAL TIDY UP
         MVC   76(4,R6),IDRZPSUF   YES, CHANGE NOUN TO SINGULAR
         B     IDRTIDY             GO DO FINAL TIDY UP

IDRLKED1 ICM   R4,7,15(R2)         LOAD JULIAN DATE OF LINK EDIT
         CLI   1(R2),17            SEVENTEEN DATA BYTES?
         BE    IDRDTCHK            YES, GO CHECK THE IDR DATE
         CLI   1(R2),17+4          TWENTY-ONE DATA BYTES?
         BE    IDRDTCHK            YES, GO CHECK THE IDR DATE
         B     PGMFMXIT            NO, CAN'T BE A LINK EDIT IDR

IDRTRAN1 CLI   1(R2),X'FF'         PROBABLE DATA OVERFLOW?
         BE    PGMFMXIT            YES, RETURN WITHOUT ACTION
         CLI   1(R2),20            AT LEAST TWENTY IDR DATA BYTES?
         BL    PGMFMXIT            NO, RETURN WITHOUT ACTION
         L     R1,DIRLEN(,R7)      LOAD THE RECORD LENGTH
         SH    R1,HW4              GET OFFSET TO JULIAN DATE
         LA    R1,0(R1,R2)         POINT TO THE DATE
         ICM   R4,7,1(R1)          LOAD JULIAN DATE OF TRANSLATE
         B     IDRDTCHK            GO CHECK THE IDR DATE

IDRUSER1 CLI   2(R2),X'88'         LAST IDR IN LOAD MODULE?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
         SLR   R1,R1
         IC    R1,8(,R2)           GET ENTRY DATA LENGTH
         LA    R1,8(,R1)           GET RECORD DATA LENGTH
         CLM   R1,1,1(R2)          CORRECT ASSUMPTION?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
         ICM   R4,7,5(R2)          YES, ONLY ONE ENTRY SO LOAD DATE
*        B     IDRDTCHK            GO CHECK THE IDR DATE

IDRDTCHK ST    R4,DOUBLE           STORE DATE FOR EXAMINATION
         TM    DOUBLE+3,X'0F'      SIGN AS EXPECTED?
         BNO   PGMFMXIT            NO, REJECT IT
         NI    DOUBLE+3,X'F0'      YES, ZERO IT
         CLI   DOUBLE+2,X'36'      DDD OVER 369?
         BH    PGMFMXIT            YES, REJECT IT
         ICM   R0,3,DOUBLE+2       ZERO DDD?
         BZ    PGMFMXIT            YES, REJECT IT
         LA    R0,3                THREE BYTES TO CHECK
         LA    R1,DOUBLE+1         POINT TO FIRST BYTE
IDRVFYLP CLI   0(R1),X'A0'         IS THE HIGH-ORDER DIGIT DECIMAL?
         BNL   PGMFMXIT            NO, REJECT IT
         NI    0(R1),X'0F'         YES, ZERO IT
         CLI   0(R1),X'0A'         IS THE LOW-ORDER DIGIT DECIMAL?
         BNL   PGMFMXIT            NO, REJECT IT
         LA    R1,1(,R1)           THIS BYTE OKAY, POINT TO THE NEXT
         BCT   R0,IDRVFYLP         PROCESS NEXT BYTE
         L     R15,=V(IDRDATE)
         BALR  R14,R15             CONVERT JULIAN DATE TO YY/MM/DD
         TM    2(R2),X'01'         ZAP SERVICE AID TYPE?
         BO    IDRZAP2             YES
         TM    2(R2),X'02'         LINKAGE EDITOR TYPE?
         BO    IDRLKED2            YES
         TM    2(R2),X'04'         TRANSLATOR TYPE?
         BO    IDRTRAN2            YES
*        TM    2(R2),X'08'         USER TYPE?
         B     IDRUSER2            YES

IDRZAP2  CLI   0(R6),C'('          ALREADY DONE ONE ON THIS LINE?
         BE    IDRZAP3             YES, GO FORMAT ON THE RIGHT
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         TM    STATUS5,X3270+COLOR+HILITE USING COLOURS?
         BO    IDRZOKAY            YES, HIGHLIGHTING FINISHED
         MVC   0(2,R6),SFPROHI     NO, MAKE HIGH INTENSITY
         MVC   80(2,R6),SFPROLO    REVERT TO LOW INTENSITY
         LA    R6,2(,R6)           ADJUST FOR EXTRA BYTES
IDRZOKAY L     R1,CALLPARM+12      POINT TO THE ZAP IDR ENTRY
         MVC   0(4,R6),=C'(ZAP'
         MVC   5(8,R6),5(R1)       LOAD IDR DATA INTO DISPLAY LINE
         TR    5(8,R6),PERIODS     TRANSLATE UNPRINTABLES
         MVC   14(7,R6),=X'A39640C5E28984'   C'TO ESID'
         UNPK  21(5,R6),0(3,R1)    LOAD ESD ID INTO DISPLAY LINE
         TR    21(4,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   25(R6),C' '         ERASE GARBAGE
         MVC   26(2,R6),=X'9695'   C'ON'
         MVC   29(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVI   37(R6),C')'
         BAL   R14,IDRESDID        ATTEMPT TO IDENTIFY EXTERNAL SYMBOL
         L     R7,4(,R13)          POINT TO PREVIOUS SAVE AREA
         L     R7,48(,R7)          RESTORE CURRENT RECORD POINTERS
         L     R2,DIRREC(,R7)
         LTR   R15,R15             SUCCESSFUL IDENTIFICATION?
         BNP   IDRIDOKL            NO
         MVC   17(8,R6),0(R15)     YES, LOAD EXTERNAL SYMBOL NAME
         TR    17(8,R6),PERIODS    TRANSLATE UNPRINTABLES
IDRIDOKL CLC   3(1,R2),LINKAREA+3  ANOTHER ENTRY AFTER THIS?
         BNH   IDRTIDYX            NO, GO DO FINAL TIDY UP
         ICM   R4,7,15(R1)         YES, GET ITS DATE
         B     IDRDTCHK            VERIFY THE DATE FORMAT
IDRZAP3  L     R1,CALLPARM+12      POINT TO FIRST (LEFT) ENTRY
         LA    R1,13(,R1)          POINT TO NEXT (RIGHT) ENTRY
         ST    R1,CALLPARM+12      SAVE FOR IDRESDID
         MVC   40(4,R6),=C'(ZAP'
         MVC   45(8,R6),5(R1)      LOAD IDR DATA INTO DISPLAY LINE
         TR    45(8,R6),PERIODS    TRANSLATE UNPRINTABLES
         MVC   54(7,R6),=X'A39640C5E28984'   C'TO ESID'
         UNPK  61(5,R6),0(3,R1)    LOAD ESD ID INTO DISPLAY LINE
         TR    61(4,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   65(R6),C' '         ERASE GARBAGE
         MVC   66(2,R6),=X'9695'   C'ON'
         MVC   69(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVI   77(R6),C')'
         BAL   R14,IDRESDID        ATTEMPT TO IDENTIFY EXTERNAL SYMBOL
         LTR   R15,R15             SUCCESSFUL IDENTIFICATION?
         BNP   IDRTIDYX            NO, GO DO FINAL TIDY UP
         MVC   57(8,R6),0(R15)     YES, LOAD EXTERNAL SYMBOL NAME
         TR    57(8,R6),PERIODS    TRANSLATE UNPRINTABLES
         B     IDRTIDYX            GO DO FINAL TIDY UP

IDRLKED2 LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80
         MVC   40(5,R6),=C'(LKED'
         BAL   R14,IDRTRAN3        CALL COMMON FORMAT ROUTINE
         CLI   1(R2),21            FOUR-BYTE TIME EXTENSION PRESENT?
         BNE   IDRTIDY             NO, GO DO FINAL TIDY UP
         TM    21(R2),X'0F'        EXPECTED DECIMAL SIGN?
         BNO   IDRTIDY             NO, GO DO FINAL TIDY UP
         UNPK  DOUBLE,18(4,R2)     YES, UNPACK THE TIME
         MVC   41(4,R6),=C'BIND'   FLAG NEW IDR FORMAT
         MVC   58(2,R6),=X'81A3'   C'AT'
         MVC   61(2,R6),DOUBLE+2   COPY HH
         MVI   63(R6),C':'
         MVC   64(2,R6),DOUBLE+4   COPY MM
         MVI   66(R6),C':'
         MVC   67(2,R6),DOUBLE+6   COPY SS
         MVC   69(2,R6),BLANKS     ERASE LAST OF BINDER NAME
         B     IDRTIDY             GO DO FINAL TIDY UP

IDRTRAN3 MVC   46(2,R6),=X'9695'   C'ON'
         MVC   49(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVC   58(2,R6),=X'82A8'   C'BY'
         MVC   61(10,R6),3(R2)     LOAD THE LINKAGE EDITOR NAME
         MVI   72(R6),C'V'
         UNPK  73(3,R6),13(2,R2)   SHOW LINKAGE EDITOR VERSION NUMBER
         TR    73(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   75(R6),C' '         ERASE GARBAGE
         MVI   76(R6),C'M'
         UNPK  77(3,R6),14(2,R2)   SHOW LINKAGE EDITOR MOD LEVEL
         TR    77(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   79(R6),C')'         ERASE GARBAGE
         BR    R14                 RETURN TO CALLER

IDRTRAN2 LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80
         A     R2,DIRLEN(,R7)      POINT PAST END OF RECORD
         SH    R2,HW18             POINT TO LAST 18 BYTES OF RECORD
         MVC   40(5,R6),=C'(TRAN'
         BAL   R14,IDRTRAN3        USE CODE COMMON WITH LINK EDIT IDR
         B     IDRTIDY             GO DO FINAL TIDY UP

IDRUIDLD MVC   65(0,R6),9(R2)      <<< EXECUTED >>>
IDRUSER2 LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80
         MVC   40(9,R6),=C'(IDENTIFY'
         MVC   50(2,R6),=X'9695'   C'ON'
         MVC   53(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVC   62(2,R6),=X'89A2'   C'IS'
         MVC   64(16,R6),BLANKS    ERASE RESIDUAL DATA
         SLR   R1,R1
         IC    R1,8(,R2)           GET THE IDENTIFY DATA LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,IDRUIDLD         COPY THE IDENTIFY DATA
         LA    R1,66(R1,R6)        POINT PAST THE COPIED DATA
         MVI   0(R1),C')'
*        B     IDRTIDY             GO DO FINAL TIDY UP

IDRTIDY  TR    40(40,R6),PERIODS   TRANSLATE UNPRINTABLES
IDRTIDYX TM    STATUS5,X3270+COLOR+HILITE USING COLOURS?
         BO    PGMFMXIT            YES, HIGHLIGHTING FINISHED
         MVC   38(2,R6),SFPROHI    NO, MAKE HIGH INTENSITY
         MVC   80(2,R6),SFPROLO    REVERT TO LOW INTENSITY
         LA    R6,2(,R6)           ADJUST FOR EXTRA BYTES
         B     PGMFMXIT            FORMAT SUCCESSFULLY COMPLETED

IDRESDID DS    0H                  LOOK FOR CESD ENTRY IN DATA ON SCRN
         SLR   R15,R15             INDICATE NOTHING FOUND YET
         L     R7,HOLDTOP          POINT TO FIRST HELD RECORD ENTRY
IDRESTST ICM   R2,15,DIRREC(R7)    POINT TO DATA OF RECORD
         BZR   R14                 RETURN IF E-O-F (SHOULDN'T HAPPEN)
         CLI   0(R2),X'40'         TEST/SYM RECORD?
         BE    IDRESNXT            YES, IGNORE AND GET THE NEXT RECORD
         CLI   0(R2),X'20'         CESD RECORD?
         BNE   IDRESDIV            NO, PAST THEM SO CHECK DIV
         SLR   R15,R15             PREPARE FOR INSERT
         ICM   R15,3,0(R1)         GET THE REQUIRED ESDID
         SH    R15,4(,R2)          GET ENTRY INTO THIS RECORD
         BM    IDRESDIV            PAST IT SO CHECK DIV
         SLL   R15,4               MULTIPLY BY SIXTEEN FOR INDEX
         LA    R15,8(,R15)         GET ENTRY OFFSET INTO RECORD
         C     R15,DIRLEN(,R7)     IS THE ENTRY IN THIS RECORD?
         BNL   IDRESNXT            NO, TRY NEXT RECORD
         ALR   R15,R2              POINT TO THE EXTERNAL SYMBOL NAME
         BR    R14                 RETURN TO CALLER
IDRESNXT SLR   R15,R15             INDICATE NOTHING FOUND YET
         C     R7,HOLDEND          WAS THAT LAST HELD RECORD?
         BER   R14                 YES, REQUIRED DATA NOT ON SCREEN
         L     R7,DIRNXT(,R7)      POINT TO THE NEXT HELD RECORD
         B     IDRESTST            GO TEST THIS RECORD
IDRESDIV DS    0H                  CESD ENTRY NOT ON SCREEN SO TRY DIV
         ICM   R15,B'1111',DIVREG1 DIV AVAILABLE?
         BNPR  R14                 NO, RETURN WITHOUT SYMBOL NAME
         MVC   DOUBLE(4),COUNT     SAVE CURRENT COUNT VALUE
         ST    R14,DOUBLE+4        SAVE THE RETURN ADDRESS
         XC    COUNT,COUNT         START RETRIEVAL WITH FIRST RECORD
IDRESDTS LA    R0,8                GET ENTRY CODE (RECORD FETCH)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         L     R1,CALLPARM+12      RESTORE IDR ENTRY POINTER
         LTR   R15,R15             SUCCESSFUL RETRIEVAL?
         BNZ   IDRESDNO            NO, SO GIVE UP
         CLI   0(R2),X'40'         TEST/SYM RECORD?
         BE    IDRESDNX            YES, IGNORE AND GET THE NEXT RECORD
         CLI   0(R2),X'20'         CESD RECORD?
         BNE   IDRESDNO            NO, PAST THEM SO GIVE UP
         ICM   R15,3,0(R1)         GET THE REQUIRED ESDID
         SH    R15,4(,R2)          GET ENTRY INTO THIS RECORD
         BM    IDRESDNO            PAST IT SO GIVE UP
         SLL   R15,4               MULTIPLY BY SIXTEEN FOR INDEX
         CH    R15,6(,R2)          IS THE ENTRY IN THIS RECORD?
         BNL   IDRESDNX            NO, TRY NEXT RECORD
         LA    R15,8(R15,R2)       POINT TO THE EXTERNAL SYMBOL NAME
         MVC   COUNT,DOUBLE        RESTORE CURRENT COUNT VALUE
         L     R14,DOUBLE+4        RESTORE THE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
IDRESDNX LA    R0,1                INCREMENT RECORD NUMBER
         A     R0,COUNT
         ST    R0,COUNT
         B     IDRESDTS            GO TEST NEXT RECORD
IDRESDNO SLR   R15,R15             INDICATE NOTHING FOUND YET
         MVC   COUNT,DOUBLE        RESTORE CURRENT COUNT VALUE
         L     R14,DOUBLE+4        RESTORE THE RETURN ADDRESS
         BR    R14                 YES, REQUIRED DATA NOT ON SCREEN
         DROP  R8                  PGMFRMAT

*        DC    C'$PRIVATE'
$PRIVATE DC    X'5B979989A581A385'
*        DC    C'$UNRESOLVED(W)'
$UNRESOL DC    X'5BA4959985A29693A585844DA65D'
ESDTYPES DC    C'SD01ERLDPCCMPRNL0809WX' PC0D0E0F10111213OT'
*        SD  - SYMBOL DEFINITION
*        ER  - EXTERNAL REFERENCE ($UNRESOLVED)
*        LD  - LABEL DEFINITION
*        PC  - PRIVATE CODE DEFINITION ($PRIVATE)
*        CM  - COMMON BLOCK
*        PR  - PSEUDO REGISTER
*        NL  - NULL
*        WX  - WEAK EXTERNAL ($UNRESOLVED WEAK)
*        OT  - OVERLAY SEGMENT/ENTRY TABLE
ESDFMTHD DC    CL80' ESID SYMBOL+TYPE OFFSET LENGTH XA TRANSLATION-DETA+
               ILS ZAP USER-IDENTIFY-DETAILS'
*        DC    C'(XA:  04-RMODE=ANY  02-AMODE=31  01-AMODE=24)'
ESDXAMSG DC    C'(XA:  04-R',X'94968485',C'=ANY  02-A',X'94968485'
         DC    C'=31  01-A',X'94968485',C'=24)'
*        DC    C'IDR DATA OFF SCREEN'
ESDNOIDM DC    C'IDR ',X'8481A3814096868640A28399858595'
*        DC    C'(GO DOWN FOR DATA)'
ESDDOWNM DC    C'(',X'8796',C' DOWN ',X'869699408481A381',C')'
*        DC    C'ZAP IDENTIFICATION RECORD ENTRIES)'
IDRZPMSG DC    C'ZAP ID',X'8595A38986898381A389969540D9858396998440'
         DC    X'8595A3998985A2',C')'
*        DC    C'Y)  '
IDRZPSUF DC    X'A8',C')  '
         LTORG

**********************************************************************
*                                                          *         *
*         TAPE LABEL FORMAT ROUTINES                       *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************

         USING TAPELBLS,R15
TAPELBLS TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BOR   R14                 YES, CAN'T BE TAPE LABELS
         ICM   R0,3,OFFSET         SCROLLED LEFT MAXIMUM?
         BNZR  R14                 NO, WON'T HAVE RIGHT DATA ON SHOW
         CLC   MSG+2(14),MSG31+2   FIND COMMAND ISSUED?
         BER   R14                 YES, SCREEN DATA MAY HAVE SA CODES
         L     R1,SCREENF          POINT TO COLUMNS LABEL LINE
         CLI   0(R1),X'28'         SET ATTRIBUTE CODE?
         BE    TPSAJMP1            YES
         CLI   0(R1),X'0E'         SET ATTRIBUTE CODE?
         BNE   TPJMP1OK            NO
TPSAJMP1 LA    R1,3(,R1)           YES, JUMP OVER SET ATTRIBUTE
TPJMP1OK AL    R1,SCRNCOLS         JUMP OVER COLUMNS LABEL LINE
         AL    R1,SCRNCOLS         JUMP OVER RULER LINE
         CLI   0(R1),X'28'         SET ATTRIBUTE CODE?
         BE    TPSAJMP2            YES
         CLI   0(R1),X'0E'         SET ATTRIBUTE CODE?
         BNE   TAPE1CHK            NO
TPSAJMP2 LA    R1,3(,R1)           YES, JUMP OVER SET ATTRIBUTE
TAPE1CHK CLI   3(R1),C'1'          VOL1/HDR1/EOV1/EOF1?
         BNER  R14                 NO, CAN'T BE TAPE LABELS
         ST    R14,HOLDR           SAVE RETURN ADDRESS
         CLC   VOLLBL,0(R1)        VOL1?
         BNE   DSLB1CHK            NO
         SH    R8,HW3              YES, ROOM FOR THREE LINES?
         BMR   R14                 NO, CAN'T SHOW ANYTHING
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         MVI   0(R6),C' '          BLANK THREE LINES
         MVC   1(160,R6),0(R6)     BLANK A LINE
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(160,R6),0(R6)     BLANK ANOTHER LINE
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(159,R6),0(R6)     BLANK A FURTHER LINE
         MVC   0(8,R6),VOLAB11     SUPPLY 'VOL=SER='
         MVC   8(6,R6),4(R1)       SUPPLY VOLUME SERIAL NUMBER
         MVC   53(6,R6),VOLAB12    SUPPLY 'OWNER='
         MVC   59(10,R6),41(R1)    SUPPLY THE OWNER NAME
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         LA    R5,3(,R5)           ADD EXTRA LINES USED
         A     R1,SCRNCOLS         POINT TO NEXT DATA LINE
         CLI   3(R1),C'1'          HDR1/EOV1/EOF1?
         BNE   TPLBLRTN            NO, CAN'T BE TAPE LABELS
DSLB1CHK CLC   HDRLBL,0(R1)        HDR1?
         BE    DODSLBL1            YES
         CLC   EOVLBL,0(R1)        EOV1?
         BE    DODSLBL1            YES
         CLC   EOFLBL,0(R1)        EOF1?
         BNE   TPLBLRTN            NO, RETURN
DODSLBL1 SH    R8,HW4              ROOM FOR FOUR LINES?
         BM    TPLBLRTN            NO
         BAL   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         MVI   0(R6),C' '
         MVC   1(160,R6),0(R6)     BLANK A LINE
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(160,R6),0(R6)     BLANK ANOTHER LINE
         MVC   0(80,R6),DSLAB11    SUPPLY TEMPLATE
         MVC   7(17,R6),4(R1)      LOAD DATA SET IDENTIFIER
         MVC   42(6,R6),21(R1)     LOAD DATA SET SERIAL NUMBER (VOL #1)
         MVC   69(4,R6),27(R1)     LOAD VOLUME SEQUENCE NUMBER
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(160,R6),0(R6)     BLANK ANOTHER LINE
         MVC   0(80,R6),DSLAB12    SUPPLY TEMPLATE
         MVC   7(4,R6),31(R1)      LOAD DATA SET SEQUENCE NUMBER
         TM    MODE,ASCIISW        TRANSLATING ASCII DATA?
         BZ    LABTYPOK            NO, ASSUME IBM STANDARD LABELS
         MVI   12(R6),C'A'         YES, INDICATE ASCII LABELS
LABTYPOK MVC   32(3,R6),47(R1)     LOAD EXPIRATION DATE CYY
         MVC   36(3,R6),50(R1)     LOAD EXPIRATION DATE DDD
         MVI   31(R6),C'2'         ASSUME 21ST CENTURY
         CLI   32(R6),C'0'         CORRECT?
         BNL   EXPDTOK             YES
         MVC   31(2,R6),CENT20TH   NO, IT WAS THE 20TH CENTURY
EXPDTOK  CLI   53(R1),C'1'         PASSWORD PROTECTED?
         BE    PWRDPROT            YES
         CLI   53(R1),C'3'         PASSWORD PROTECTED FOR CHANGE?
         BE    PWWRPROT            YES
         MVC   15(26,R6),23(R6)    NO, SUPPRESS LABEL SUBFIELD
         B     PWPROTOK
PWRDPROT MVC   15(8,R6),PASWRDLB   SUPPLY LABEL=(,,,PASSWORD,)
         B     PWPROTOK
PWWRPROT MVC   15(8,R6),NOPWRDLB   SUPPLY LABEL=(,,,NOPWREAD,)
PWPROTOK MVC   65(6,R6),54(R1)     LOAD BLOCK COUNT
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(159,R6),0(R6)     BLANK THE NEXT LINE
         MVC   0(80,R6),DSLAB13    SUPPLY TEMPLATE
         MVC   15(3,R6),41(R1)     LOAD CREATION DATE CYY
         MVC   19(3,R6),44(R1)     LOAD CREATION DATE DDD
         MVI   14(R6),C'2'         ASSUME 21ST CENTURY
         CLI   15(R6),C'0'         CORRECT?
         BNL   CREDTOK             YES
         MVC   14(2,R6),CENT20TH   NO, IT WAS THE 20TH CENTURY
CREDTOK  MVC   43(1,R6),53(R1)     LOAD DATA SET SECURITY CODE
         MVC   65(13,R6),60(R1)    LOAD OPERATING SYSTEM CODE
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         LA    R5,4(,R5)           ADD EXTRA LINES USED
         A     R1,SCRNCOLS         POINT TO NEXT DATA LINE
         CLI   3(R1),C'2'          HDR2/EOV2/EOF2?
         BNE   TPLBLRTN            NO, CAN'T BE TAPE LABELS
         CLC   HDRLBL,0(R1)        HDR2?
         BE    DODSLBL2            YES
         CLC   EOVLBL,0(R1)        EOV2?
         BE    DODSLBL2            YES
         CLC   EOFLBL,0(R1)        EOF2?
         BNE   TPLBLRTN            NO, RETURN
DODSLBL2 SH    R8,HW4              ROOM FOR FOUR LINES?
         BM    TPLBLRTN            NO
         MVI   0(R6),C' '
         MVC   1(160,R6),0(R6)     BLANK A LINE
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(160,R6),0(R6)     BLANK ANOTHER LINE
         MVC   0(80,R6),DSLAB21    SUPPLY TEMPLATE
         LA    R14,6(,R6)          POINT TO RECFM DISPLAY AREA
         MVC   0(1,R14),4(R1)      LOAD FIRST RECORD FORMAT CODE
         MVC   1(1,R14),38(R1)     LOAD SECOND RECORD FORMAT CODE
         CLI   1(R14),C'R'         IS IT AN 'R'?
         BNE   TPRECFM1            NO, LEAVE IT
         MVC   1(2,R14),RECFMBS    YES, THIS MEANS 'BS'
TPRECFM1 LA    R14,1(,R14)
         CLI   0(R14),C' '         FOUND A BLANK?
         BNE   TPRECFM1            NO, INCREMENT AND TRY AGAIN
         MVC   0(1,R14),36(R1)     LOAD THIRD RECORD FORMAT CODE
         MVC   39(5,R6),5(R1)      LOAD BLOCK LENGTH
         MVC   21(5,R6),10(R1)     LOAD RECORD LENGTH
         MVC   53(1,R6),15(R1)     LOAD TAPE DENSITY
         CLI   15(R1),C'0'         KNOWN DENSITY CODE?
         BL    DENSDONE            NO
         CLI   15(R1),C'4'         KNOWN DENSITY CODE?
         BH    DENSDONE            NO
         MVC   DOUBLE(1),15(R1)    YES, COPY IT
         NI    DOUBLE,X'0F'        ZERO THE ZONE
         SLR   R14,R14
         IC    R14,DOUBLE
         MH    R14,HW10            GET INDEX INTO DENSTBL
         LA    R14,DENSTBL(R14)    POINT TO CORRECT ENTRY
         MVC   55(10,R6),0(R14)    SHOW BITS-PER-INCH MEANING OF CODE
DENSDONE MVC   75(2,R6),34(R1)     LOAD TAPE RECORDING TECHNIQUE
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(160,R6),0(R6)     BLANK A FURTHER LINE
         MVC   0(80,R6),DSLAB22    SUPPLY TEMPLATE
         MVC   14(1,R6),16(R1)     LOAD DATA SET POSITION
         CLI   16(R1),C'1'         KNOWN MEANING?
         BH    POSIDONE            NO
         CLI   16(R1),C'0'         KNOWN MEANING?
         BL    POSIDONE            NO
         MVC   16(24,R6),SINGLBL   YES, INDICATE SINGLE VOLUME DS
         BE    POSIDONE            GOOD GUESS
         MVC   17(5,R6),MULTLBL    INDICATE MULTIPLE VOLUME DS
         MVC   22(20,R6),23(R6)    TIDY UP EDITING
POSIDONE MVC   62(17,R6),17(R1)    LOAD JOB/JOBSTEP IDENTIFICATION
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         MVC   1(159,R6),0(R6)     BLANK A STILL FURTHER DIFFERENT LINE
         MVC   0(80,R6),DSLAB23    SUPPLY TEMPLATE
         MVC   11(8,R6),39(R1)     LOAD TAPE DRIVE PARTICULARS
         MVC   47(1,R6),47(R1)     LOAD CHECKPOINT DATA SET IDENTIFIER
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         ADD LINE BYTE COUNT
         LA    R5,4(,R5)           ADD EXTRA LINES USED
TPLBLRTN L     R14,HOLDR           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R15                 TAPELBLS

VOLLBL   DC    C'VOL'
HDRLBL   DC    C'HDR'
EOVLBL   DC    C'EOV'
EOFLBL   DC    C'EOF'
VOLAB11  DC    C'VOL=SER='
VOLAB12  DC    C'OWNER='
RECFMBS  DC    C'BS'
CENT20TH DC    C'19'
PASWRDLB DC    C'PASSWORD'
NOPWRDLB DC    C'NOPWREAD'
DENSTBL  EQU   *
         DC    CL10'(200 BPI) '
         DC    CL10'(556 BPI) '
         DC    CL10'(800 BPI) '
         DC    CL10'(1600 BPI)'
         DC    CL10'(6250 BPI)'
DSLAB11  DC    CL80'DSNAME=12345678.12345678     FIRST-VOLUME=123456   +
                 VOLUME-SEQUENCE=1234       '
DSLAB12  DC    CL80'LABEL=(1234,SL,________,,EXPDT=YYYY/DDD)           +
                 BLOCK-COUNT=123456         '
DSLAB13  DC    CL80'CREATION-DATE=YYYY/DDD       SECURITY-CODE=?       +
                 SYSTEM-CODE=123456789ABCD  '
DSLAB21  DC    CL80'RECFM=?        LRECL=12345     BLKSIZE=12345     DE+
               N=1               TRTCH=12   '
DSLAB22  DC    CL80'VOLUME-SWITCH=1                                  CR+
               EATION-JOB=AJOBNAME/STEPNAME '
DSLAB23  DC    CL80'TAPE-DRIVE=12345678            CHECKPOINT-FLAG=1 ('+
               'C'' FOR CHECKPOINT DATA SET)  '
SINGLBL  DC    C'(SINGLE-VOLUME DATA SET)'
MULTLBL  DC    C'MULTI'

**********************************************************************
*                                                          *         *
*         PERFORM LOGREC RECORD FORMATTING                 *  GP@FT  *
*                                                          *  01/94  *
**********************************************************************

         USING EREPFMT,R5
EREPFMT  STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R5,R15              LOAD BASE REGISTER
         L     R15,SCREENF         POINT TO THE COLUMNS LABEL LINE
         CLI   1(R15),X'42'        SET ATTRIBUTE COLOUR CODE?
         BNE   *+8                 NO, NOT USING COLOUR
         LA    R15,3(,R15)         YES, POINT PAST IT
         AL    R15,SCRNCOLS        POINT TO THE RULER LINE
         MVC   0(80,R15),EREPFMHD  SUPPLY EREP FORMAT COLUMN HEADINGS
         CH    R1,=H'24'           IS RECORD TOO SHORT TO BE VALID?
         BL    EREPNOOP            YES, DO NOT ATTEMPT FORMATTING
         TM    TSTRECFM,X'C0'      UNDEFINED RECORD FORMAT?
         BZ    EREPOKAY            YES, CAN'T HAVE EREP ON LOAD LIBRARY
         CLI   2(R2),X'18'         NO, MUST HAVE BEEN COPIED BY EREP
         BE    EREPOKAY            WITH 370XA MODE AND TIME MACRO FMT
         CLI   2(R2),X'28'         ALSO ACCEPT MVS/370 RECORD WITH
         BNE   EREPNOOP            TIMESTAMP IN TIME MACRO FORMAT
EREPOKAY IC    R0,FMTCOLOR         LOAD FORMATTING COLOUR
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         ST    R6,44(,R13)         UPDATE BUFFER POINTER IN SAVE AREA
         CLC   =X'FFFF',0(R2)      HEADER RECORD IDENTIFIER?
         BE    EREPHD40            YES, GO FORMAT HEADER
         TM    2(R2),X'08'         TIME MACRO USED?
         BZ    EREPSTCK            NO, STORE CLOCK INSTRUCTION WAS USED
         UNPK  0(3,R6),9(2,R2)     SHOW THE YEAR
         UNPK  3(3,R6),10(2,R2)    SHOW THE JULIAN DAY
         UNPK  7(3,R6),12(2,R2)    SHOW THE HOUR
         UNPK  10(3,R6),13(2,R2)   SHOW THE MINUTE
         UNPK  13(3,R6),14(2,R2)   SHOW THE SECOND
         UNPK  16(3,R6),15(2,R2)   SHOW THE CENTISECOND
         B     EREPTSOK
EREPNOOP LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FMTNOTON            SKIP FORMATTING WITHOUT COMMENT
EREPSTCK MVC   0(18,R6),=CL18'NO STCKCONV (<SP4)'
         L     R15,16              POINT TO THE CVT
         TM    116(R15),X'9B'      MVS/ESA?
         BNO   EREPTSDN            NO, STCKCONV NOT AVAILABLE
         TM    1264(R15),X'08'     MVS/SP 4.1 OR LATER?
         BNO   EREPTSDN            NO, STCKCONV NOT AVAILABLE
         MVC   DOUBLE,8(R2)        COPY THE STCK VALUE
         STCKCONV STCKVAL=DOUBLE,  POINT TO INPUT STCK VALUE           +
               CONVVAL=SBASAVE,    POINT TO OUTPUT FOUR WORDS          +
               TIMETYPE=DEC,       GET TIME DECIMAL DIGITS (DEFAULT)   +
               DATETYPE=YYYYDDD,   SPECIFY DATE FORMAT (DEFAULT)       +
               MF=(E,STCKCNVL)     SPECIFY PARAMETER LIST
         L     R0,SBASAVE+8        LOAD 0YYYYDDD
         SLL   R0,4                CONVERT IT TO YYYYDDD0
         ST    R0,SBASAVE+8        STORE IT FOR UNPACKING
*        OI    SBASAVE+11,X'0F'    SUPPLY SIGN - DONE LATER AT EREPTSOK
         UNPK  0(3,R6),SBASAVE+9(2)   SHOW THE YEAR
         UNPK  3(3,R6),SBASAVE+10(2)  SHOW THE JULIAN DAY
         UNPK  7(3,R6),SBASAVE(2)     SHOW THE HOUR
         UNPK  10(3,R6),SBASAVE+1(2)  SHOW THE MINUTE
         UNPK  13(3,R6),SBASAVE+2(2)  SHOW THE SECOND
         UNPK  16(3,R6),SBASAVE+3(2)  SHOW THE CENTISECOND
EREPTSOK OI    5(R6),X'F0'         HANDLE BAD SIGN IN DATE
         TR    0(17,R6),HEXTAB-240 HANDLE BAD DECIMAL DIGITS
         MVI   2(R6),C'.'          SUPPLY SEPARATORS AND
         MVI   6(R6),C' '                 TIDY UP AFTER TRANSLATE
         MVI   9(R6),C':'                 AND THE LAST UNPACK
         MVI   12(R6),C':'
         MVI   15(R6),C'.'
         MVI   18(R6),C' '
EREPTSDN UNPK  26(7,R6),17(4,R2)   SHOW CPU SERIAL NUMBER
         TR    26(6,R6),HEXTAB-240
         MVI   32(R6),C'-'
         UNPK  33(5,R6),20(3,R2)   SHOW CPU MODEL NUMBER
         TR    33(4,R6),HEXTAB-240
         MVI   37(R6),C' '
         CLI   0(R2),X'13'         MACHINE CHECK RECORD?
         BE    EREPMCH             YES
         CLI   0(R2),X'21'         CHANNEL CHECK RECORD?
         BE    EREPCCH             YES
         CLI   0(R2),X'23'         SUBCHANNEL LOGOUT HANDLER RECORD?
         BE    EREPSLH             YES
         CLI   0(R2),X'25'         CHANNEL REPORT WORD RECORD?
         BE    EREPCRW             YES
         CLI   0(R2),X'30'         OUTBOARD RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'34'         TCAM OUTBOARD RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'36'         VTAM OUTBOARD RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'3A'         DYNAMIC PATHING AVAILABILITY RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'3C'         DYN PATH VALIDATION ANALYSIS RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'40'         SOFTWARE ABEND RECORD?
         BE    EREPABND            YES
         CLI   0(R2),X'42'         SOFTWARE PROGRAM INTERRUPT RECORD?
         BE    EREPSPI             YES
         CLI   0(R2),X'44'         OPERATOR RESTART RECORD?
         BE    EREPSRST            YES
         CLI   0(R2),X'48'         MACHINE CHECK (RTM1) RECORD?
         BE    EREPSMCH            YES
         CLI   0(R2),X'4C'         SOFTWARE SYMPTOM RECORD?
         BE    EREPSYMP            YES
         CLI   0(R2),X'4F'         RECORDS LOST RECORD?
         BE    EREPLOST            YES
         CLI   0(R2),X'50'         IPL RECORD?
         BE    EREPIPL             YES
         CLI   0(R2),X'60'         DDR RECORD?
         BE    EREPDDR             YES
         CLI   0(R2),X'70'         MISSING INTERRUPT HANDLER RECORD?
         BE    EREPMIH             YES
         CLI   0(R2),X'71'         MISSING INTERRUPT HANDLER RECORD?
         BE    EREPMIX             YES
         CLI   0(R2),X'80'         EOD RECORD?
         BE    EREPEOD             YES
         CLI   0(R2),X'90'         MISCELLANEOUS DATA RECORD?
         BE    EREPMDR             YES
         CLI   0(R2),X'91'         MISCELLANEOUS DASD RECORD?
         BE    EREPDASD            YES
         CLI   0(R2),X'A1'         EXTERNAL TIME REFERENCE RECORD?
         BE    EREPCLOK            YES
         CLI   0(R2),X'A2'         LINK MAINTENANCE INFORMATION RECORD?
         BE    EREPLINK            YES
         CLI   0(R2),X'A3'         ASYNCHRONOUS NOTIFICATION RECORD?
         BE    EREPNTFY            YES
         CLI   0(R2),X'A0'         A-TO-F TYPE RECORD?
         BNL   EREPXREC            YES
         MVC   19(6,R6),=C'<UNKN>' UNKNOWN RECORD TYPE
EREPHD40 L     R1,DIRLEN(,R7)      GET THE RECORD LENGTH
         CH    R1,HW40             FORTY-BYTE RECORD?
         BNE   EREPEXIT            NO
         LA    R0,2
         C     R0,DIRNUM(,R7)      RECORD 1 OR RECORD 2?
         BL    EREPEXIT            NO
         MVC   19(6,R6),=C'LOGREC' INDICATE SYS1.LOGREC RECORD ONLY
         BH    EREPCKPT            HANDLE FIRST RECORD
         MVC   38(24,R6),=C'3-MINUTE CURRENCY RECORD'
         B     EREPEXIT
EREPCKPT MVC   39(41,R6),=C'* INVALID SYS1.LOGREC CHECKPOINT RECORD *'
         CLC   =X'FFFF',0(R2)      CORRECT RECORD IDENTIFIER?
         BNE   EREPEXIT            NO
         CLI   39(R2),X'FF'        CORRECT CHECK BYTE?
         BNE   EREPEXIT            NO
         MVC   0(5,R6),=C'XTNT:'   NOTE: ASSUME LESS THAN 257 TRACKS
         UNPK  5(5,R6),2(3,R2)           PER CYLINDER ON LOGREC DISK
         UNPK  10(3,R6),5(2,R2)    SHOW DATA SET EXTENT START
         UNPK  13(5,R6),6(3,R2)
         UNPK  18(3,R6),9(2,R2)    SHOW DATA SET EXTENT END
         TR    5(15,R6),HEXTAB-240
         MVI   9(R6),C'.'          SUPPLY SEPARATOR FOR START CCCC.HH
         MVI   12(R6),C'-'         CONNECT START AND END OF EXTENT
         MVI   17(R6),C'.'         SUPPLY SEPARATOR FOR END CCCC.HH
         MVC   20(11,R6),=C'  LAST-REC:'
         UNPK  31(5,R6),24(3,R2)
         UNPK  36(3,R6),27(2,R2)
         UNPK  39(3,R6),28(2,R2)   SHOW LATEST RECORD ADDRESS
         TR    31(10,R6),HEXTAB-240
         MVI   35(R6),C'.'
         MVI   38(R6),C'.'         SUPPLY SEPARATORS FOR CCCC.HH.RR
         MVC   41(6,R6),=C'  90%:'
         UNPK  47(5,R6),34(3,R2)
         UNPK  52(3,R6),37(2,R2)
         TR    47(7,R6),HEXTAB-240
         MVI   51(R6),C'.'         SUPPLY SEPARATOR FOR 90% CCCC.HH
         MVC   54(10,R6),=C'  DEVTYPE='
         UNPK  64(3,R6),33(2,R2)   DISPLAY DASD DEVICE TYPE FLAG
         TR    64(2,R6),HEXTAB-240
         MVC   66(14,R6),=C':BAD ???%-FULL'
         ICM   R15,15,$UCBAD       GET DEVICE UCB ADDRESS
         BNP   EREPDTYP            NO UCB SO NO MATCH
         CLC   33(1,R2),19(R15)    DEVICE TYPE FLAG BYTE MATCH?
         BNE   EREPDTYP            NO, LEAVE 'BAD' ON DISPLAY
         MVC   67(3,R6),=C'OK '    YES, OVERLAY 'BAD' WITH 'OK '
EREPDTYP SLR   R1,R1
         ICM   R1,3,29(R2)         GET HIGHEST HEAD NUMBER
         LA    R1,1(,R1)           GET TRACKS PER CYLINDER
         ST    R1,DOUBLE           SAVE IT FOR LATER
         SLR   R14,R14
         ICM   R14,3,2(R2)         GET THE EXTENT START CCCC
         SLR   R15,R15
         ICM   R15,3,6(R2)         GET THE EXTENT END CCCC
         SR    R15,R14
         MR    R14,R1              GET TRACKS IN CYLINDERS
         SLR   R0,R0
         ICM   R0,3,4(R2)          GET THE EXTENT START HHHH
         ICM   R1,3,8(R2)          GET THE EXTENT END HHHH
         SR    R1,R0
         LA    R1,1(R1,R15)        GET TOTAL TRACKS IN EXTENT
         ST    R1,DOUBLE+4         SAVE IT FOR LATER
         ICM   R14,3,2(R2)         GET THE EXTENT START CCCC
         ICM   R15,3,24(R2)        GET THE LAST RECORD CCCC
         SR    R15,R14
         M     R14,DOUBLE          GET TRACKS IN CYLINDERS
         ICM   R1,3,26(R2)         GET THE LAST RECORD HHHH
         SR    R1,R0
         LA    R1,1(R1,R15)        GET TOTAL USED TRACKS
         M     R0,=F'1000'         PREPARE FOR PERCENTAGE
         D     R0,DOUBLE+4         GET FULLNESS PERMILLAGE
         CVD   R1,DOUBLE
         MVC   70(4,R6),=X'40202120'
         CP    DOUBLE,=PL2'99'     MORE THAN 9.9% FULL?
         BH    EREPFULL            YES
         ED    70(4,R6),DOUBLE+6
         MVC   71(1,R6),72(R6)
         MVI   72(R6),C'.'         SHOW TENTHS OF PERCENT IF < 10%
         B     EREPEXIT
EREPFULL SRP   DOUBLE,64-1,5       ROUND TO PERCENTAGE
         ED    70(4,R6),DOUBLE+6
EREPEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLNXT
EREPMCH  MVC   19(3,R6),=C'MCH'    X'13'
         B     EREPEXIT
EREPCCH  MVC   19(3,R6),=C'CCH'    X'21'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         UNPK  47(5,R6),76(3,R2)   SHOW DEVICE NUMBER
         TM    5(R2),X'04'         CHANNEL RECONFIGURATION HARDWARE?
         BZ    EREPHDEV            NO
         MVC   22(3,R6),=C'CRH'    YES
         B     EREPHDEV
EREPSLH  MVC   19(3,R6),=C'SLH'    X'23'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         OC    52(6,R6),122(R2)    COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),120(3,R2)  SHOW DEVICE NUMBER
         B     EREPHDEV
EREPCRW  MVC   19(3,R6),=C'CRW'    X'25'
         OC    61(8,R6),24(R2)     SHOW RECORDING MODULE CSECT NAME
         UNPK  47(5,R6),44(3,R2)   SHOW DEVICE NUMBER
         B     EREPHDEV
EREPOBR  MVC   19(3,R6),=C'OBR'    X'30'
         BAL   R14,EREPOTYP
         TM    3(R2),X'20'         SHORT RECORD?
         BO    EREPOSHT            YES
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         UNPK  47(5,R6),50(3,R2)   SHOW DEVICE NUMBER
         CLI   0(R2),X'36'         VTAM OUTBOARD RECORDER?
         BNE   EREPHDEV            NO
         OC    52(8,R6),72(R2)     SHOW VTAM LOGICAL UNIT NAME
         B     EREPHDEV
EREPOSHT UNPK  47(5,R6),30(3,R2)   SHOW DEVICE NUMBER
         B     EREPHDEV
EREPOTYP CLI   0(R2),X'3A'         DYNAMIC PATHING AVAILABILITY?
         BE    EREPODPA            YES
         CLI   0(R2),X'3C'         DYNAMIC PATHING VALIDATION ANALYSIS?
         BE    EREPODPS            YES
         TM    3(R2),X'80'         COUNTERS DUMPED AT END-OF-DAY?
         BO    EREPOEOD            YES
         TM    3(R2),X'40'         TEMPORARY SWITCH (COUNTERS FULL)?
         BO    EREPOTMP            YES
         TM    3(R2),X'04'         VOLUME DEMOUNT?
         BO    EREPODMT            YES
         BR    R14
EREPODPA MVC   22(3,R6),=C'DPA'
         BR    R14
EREPODPS MVC   22(3,R6),=C'DPS'
         BR    R14
EREPOEOD MVC   22(3,R6),=C'EOD'
         BR    R14
EREPOTMP MVC   22(3,R6),=C'TMP'
         BR    R14
EREPODMT MVC   22(3,R6),=C'DMT'
         OC    52(6,R6),64(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         BR    R14
EREPABND MVC   19(6,R6),=C'SFTABN' X'40'
EREPABCD OC    38(8,R6),24(R2)     SHOW JOB NAME
         LA    R15,32(,R2)         POINT TO SDWA
         USING SDWA,R15
         UNPK  47(5,R6),SDWAASID(3)
         TR    47(4,R6),HEXTAB-240 SHOW THE HOME ASID
         MVI   51(R6),C' '
         OC    52(8,R6),SDWAMODN   SHOW THE LOAD MODULE NAME
         OC    61(8,R6),SDWACSCT   SHOW THE CSECT NAME
         CLI   SDWAREXN,C' '       ANY RECOVERY ROUTINE NAME?
         BNH   EREPMDOK            NO, DON'T SHOW IT
         CLC   SDWAREXN,=C'UNKNOWN '
         BE    EREPMDOK
         CLC   SDWAMODN,SDWACSCT   BOTH LOAD MODULE AND CSECT THE SAME?
         BNE   EREPMDOK            NO, SHOULD BE SOME VALID DATA
         CLI   SDWAMODN,C' '       YES, ANY DATA?
         BNH   EREPRRTN            NO, SHOW RECOVERY ROUTINE NAME
         CLC   SDWAMODN,=C'UNKNOWN '
         BNE   EREPMDOK
EREPRRTN MVC   52(9,R6),=C' REC.RTN='
         MVC   61(8,R6),SDWAREXN
EREPMDOK L     R0,SDWAABCC         LOAD THE ABEND CODE
         SLL   R0,8                SHIFT OUT FLAG BYTE
         SRL   R0,20               SHIFT OUT USER ABEND CODE
         SLA   R0,4                LEAVE ROOM FOR DECIMAL SIGN
         BZ    EREPUSRA            IF ZERO THEN MUST BE USER ABEND
         ST    R0,DOUBLE+4
         OI    DOUBLE+7,X'0F'
         UNPK  70(5,R6),DOUBLE+5(3)
         TR    70(5,R6),HEXTAB-240
         MVI   70(R6),C'S'         INDICATE SYSTEM ABEND
         TM    SDWAERRA,SDWAPCHK+SDWARKEY+SDWATEXC
         BZ    EREPABRC            DO NOT SHOW INTERRUPT CODE
         UNPK  76(5,R6),SDWAINC1(3)
         B     EREPAIRC            GO TIDY UP INTERRUPT CODE
EREPABRC TM    SDWAERRA,SDWASVCD+SDWASVCE
         BZ    EREPEXIT            NO REASON CODE FOR SYSTEM ABTERM
         UNPK  76(5,R6),SDWAGR15+2(3)
EREPAIRC MVI   75(R6),C'-'         TIDY UP INTERRUPT OR REASON CODE
         TR    76(4,R6),HEXTAB-240
         B     EREPEXIT
EREPUSRA L     R0,SDWAABCC         LOAD THE ABEND CODE
         SLL   R0,20
         SRL   R0,20               EXTRACT USER ABEND CODE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  70(5,R6),DOUBLE+5(3)
         MVI   70(R6),C'U'         INDICATE USER ABEND
         B     EREPEXIT
         DROP  R15                 SDWA
EREPSPI  MVC   19(5,R6),=C'SFTPI'  X'42'
         B     EREPABCD
EREPSRST MVC   19(6,R6),=C'SFTRST' X'44'
         B     EREPABCD
EREPSMCH MVC   19(6,R6),=C'SFTMCH' X'48'
         B     EREPABCD
EREPSYMP MVC   19(6,R6),=C'SFTSYM' X'4C'
         MVC   38(6,R6),58(R2)     SHOW SYSTEM NAME
         L     R0,DIRLEN(,R7)      GET THE RECORD LENGTH
         SH    R0,=H'88'
         BM    EREPEXIT            TOO SHORT FOR SEARCH
         LA    R1,80(,R2)
EREPABLP CLC   =C'AB/',0(R1)       FOUND THE ABEND CODE?
         BE    EREPSYMA            YES
         LA    R1,1(,R1)           NO, CONTINUE SEARCH
         BCT   R0,EREPABLP
         B     EREPEXIT
EREPSYMA MVC   70(5,R6),3(R1)      DISPLAY ABEND CODE
         CLC   =C'PRCS/',9(R1)     REASON CODE PRESENT?
         BNE   EREPID1L            NO
         MVI   75(R6),C'-'         YES
         MVC   76(4,R6),18(R1)     DISPLAY REASON CODE
EREPID1L CLC   =C'RIDS/',0(R1)     FOUND THE LOAD MODULE NAME?
         BE    EREPSYLM            YES
         LA    R1,1(,R1)           NO, CONTINUE SEARCH
         BCT   R0,EREPID1L
         B     EREPEXIT
EREPSYLM MVC   52(8,R6),5(R1)      DISPLAY LOAD MODULE NAME
EREPID2L CLC   =C'RIDS/',0(R1)     FOUND THE CSECT NAME?
         BE    EREPSYCS            YES
         LA    R1,1(,R1)           NO, CONTINUE SEARCH
         BCT   R0,EREPID2L
         B     EREPEXIT
EREPSYCS MVC   61(8,R6),5(R1)      DISPLAY CSECT NAME
         B     EREPEXIT
EREPLOST MVC   19(6,R6),=C'SFTLST' X'4F'
         SLR   R0,R0
         IC    R0,24(R2)           SHOW THE LOST RECORD COUNT
         CVD   R0,DOUBLE
         MVC   46(4,R6),=X'40202120'
         ED    46(4,R6),DOUBLE+6
         MVC   51(12,R6),=C'RECORDS LOST'
         B     EREPEXIT
EREPIPL  MVC   19(3,R6),=C'IPL'    X'50'
         MVC   38(7,R6),=C'REASON='
         OC    45(2,R6),28(R2)     SHOW IPL REASON CODE
         MVC   48(10,R6),=C'SUBSYS-ID='
         UNPK  58(3,R6),24(1,R2)   SHOW SUBSYSTEM IDENTIFIER
         TR    58(2,R6),HEXTAB-240
         MVI   60(R6),C' '
         B     EREPEXIT
EREPDDR  MVC   19(3,R6),=C'DDR'    X'60'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         UNPK  47(5,R6),46(3,R2)   SHOW "FROM" DEVICE NUMBER
         OC    52(6,R6),38(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  59(5,R6),54(3,R2)   SHOW "TO" DEVICE NUMBER
         TR    59(4,R6),HEXTAB-240
         MVI   63(R6),C' '
         CLI   59(R6),C'0'         LEADING ZERO ON DEVICE NUMBER?
         BNE   EREPDDR2            NO
         MVI   59(R6),C' '         YES, SUPPRESS IT
EREPDDR2 TM    3(R2),X'02'         OPERATOR REQUESTED DEVICE SWAP?
         BZ    EREPHDEV            NO
         MVC   22(3,R6),=C'OPR'    YES
         B     EREPHDEV            TIDY UP "FROM" DEVICE NUMBER
EREPMIH  MVC   19(3,R6),=C'MIH370' X'70'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         OC    52(6,R6),38(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),33(3,R2)   SHOW DEVICE NUMBER
         TM    3(R2),X'C0'         CHANNEL-END OR DEVICE-END?
         BZ    EREPHDEV            NO
         MVC   22(3,R6),=C'CE '
         TM    3(R2),X'80'
         BO    EREPHDEV            NO
         MVI   22(R6),C'D'
         B     EREPHDEV
EREPMIX  MVC   19(3,R6),=C'MIH'    X'71'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         OC    52(6,R6),130(R2)    COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),122(3,R2)  SHOW DEVICE NUMBER
         TM    92(R2),X'04'        MOUNT PENDING?
         BZ    EREPHDEV            NO
         MVC   59(13,R6),=C'MOUNT-PENDING'
         B     EREPHDEV
EREPEOD  MVC   19(3,R6),=C'EOD'    X'80'
         B     EREPEXIT
EREPMDR  MVC   19(3,R6),=C'MDR'    X'90' (FROM VOLSTAT ==> NOT DASD)
EREPMDEV OC    52(6,R6),26(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),24(3,R2)   SHOW DEVICE NUMBER
EREPHDEV TR    47(4,R6),HEXTAB-240
         MVI   51(R6),C' '
         CLI   47(R6),C'0'         LEADING ZERO ON DEVICE NUMBER?
         BNE   EREPEXIT            NO
         MVI   47(R6),C' '         YES, SUPPRESS IT
         B     EREPEXIT
EREPDASD MVC   19(6,R6),=C'MDRDAS' X'91'
         B     EREPMDEV
EREPCLOK MVC   19(5,R6),=C'CLOCK'  X'A1'
         OC    38(42,R6),162(R2)   SHOW FIRST BIT OF OPERATOR MESSAGE
         B     EREPEXIT
EREPLINK MVC   19(4,R6),=C'LINK'   X'A2'
         B     EREPEXIT
EREPNTFY MVC   19(6,R6),=C'NOTIFY' X'A3'
         UNPK  47(5,R6),57(3,R2)   SHOW DEVICE NUMBER
         B     EREPHDEV
EREPXREC MVC   20(5,R6),=C'X-REC'  X'A0' TO X'FF'
         UNPK  19(1,R6),0(1,R2)
         OI    19(R6),X'F0'        SHOW FIRST HEX DIGIT OF RECORD TYPE
         TR    19(1,R6),HEXTAB-240
         B     EREPEXIT
         DROP  R5                  EREPFMT

EREPFMHD DC    CL80'*DATE* TIME-OF-DAY RECTYP CPU-SERIAL# JOB-NAME IDNO+
                VOLUME/LMOD+CSECT ABEND-REAS'
         LTORG

**********************************************************************
*                                                          *         *
*         CALCULATE HORIZONTAL SCREEN FORMAT               *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************

         USING FMTCOLS,R15
FMTCOLS  DS    0H                  CALCULATE OFFSET OF RIGHT SIDE OF
*                                  SCREEN, AS WELL AS THE DISPLAY
*                                  OFFSET FOR EVERY FEL FROM THE
*                                  LEFT-MOST VISIBLE ITEM TO THE END
*                                  OF THE RECORD.
         L     R0,SCRNCOLS         GET HEX OFF DATA COLUMN COUNT
         TM    MODE,MODEX
         BZ    *+8
         SRL   R0,1                GET HEX ON DATA COLUMN COUNT
         AH    R0,OFFSET           GET NUMBER OF LAST COLUMN
         CH    R0,RECSIZE          DO NOT EXCEED THE MAX RECORD LENGTH
         BNH   *+8
         LH    R0,RECSIZE
         STH   R0,OFFEND           SAVE LAST SCREEN COLUMN NUMBER
         TM    MODE,FMTSW          IN GENERAL FORMATTING MODE?
         BNOR  R14                 NO, RETURN TO CALLER
         STM   R14,R12,12(R13)     YES, HERE FOR THE LONG HAUL
         L     R1,FMTAREA          POINT TO THE FORMATTING DYNAMIC AREA
         ST    R13,4(,R1)          BACKWARD POINTER
         ST    R1,8(,R13)          FORWARD POINTER
         LR    R13,R1              POINT TO THE NEW SAVE AREA
         USING @FMTAREA,R13
         MVI   LEFTFEL,X'FF'       INVALIDATE LEFT-MOST FEL ADDRESS
         SLR   R6,R6               RESET OFFSET COUNTER
         LA    R1,FMTFELS          POINT TO THE FIRST FORMAT ELEMENT
         LH    R4,OFFSET           GET CURRENT LEFT/RIGHT SCROLL OFFSET
         TM    $UCBAD,ACBSW        FILE DATA ACCESSED VIA A DCB?
         BO    FMTFELLP            NO
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS?
         BZ    FMTFELLP            NO
         LA    R0,4                YES, GET LENGTH OF RDW
         SR    R6,R0               ADJUST FOR HIDDEN RDW
FMTFELLP AH    R6,FELSYMLN(,R1)    ADD LENGTH OF THIS FIELD
         OC    FELSYMLN(2,R1),FELSYMLN(R1)
         BZ    FMTFESKP            IGNORE ZERO LENGTH SYMBOL FEL
         CR    R6,R4               UP TO VISIBLE VARIABLE YET?
         BH    FMTOFFOK            YES
FMTFESKP LA    R1,FELSIZE(,R1)     NO, POINT TO NEXT FORMATTING ELEMENT
         C     R1,FMTFELAD         PAST LAST FORMATTING ELEMENT?
         BL    FMTFELLP            NO
         B     FMTCOLSX            YES, RECORD TOO LONG FOR FORMATTING
FMTOFFOK SH    R6,FELSYMLN(,R1)    GET OFFSET OF VISIBLE FIRST ITEM
         ST    R6,LEFTFELO         SAVE OFFSET OF LEFT-MOST SHOWING FEL
         LR    R4,R6               COPY IT
         ST    R1,LEFTFEL          SAVE LEFT-MOST SHOWING FEL ADDRESS
         SH    R6,OFFSET           GET SCREEN OFFSET
         LR    R7,R6               COPY RECORD OFFSET - SCROLL VALUE
         SLA   R7,1                DOUBLE IT FOR HEX MODE
         SLR   R5,R5               CLEAR A REGISTER
         TM    FELSYMFG(R1),FELHEX+FELBIN
         BZ    FMTCOLLP            IF CHARACTER THEN OFFSET IS KNOWN
         SLA   R6,1                DOUBLE OFFSET FOR HEX-ISH
         TM    FELSYMFG(R1),FELBIN
         BZ    FMTCOLLP            IF HEX-ISH OFFSET IS KNOWN
         SLA   R6,1                DOUBLE OFFSET FOR HEX-ISH
FMTCOLLP OC    FELSYMLN(2,R1),FELSYMLN(R1)
         BZ    FMTCLSKP            IGNORE ZERO LENGTH SYMBOL FEL
         STH   R7,FELDSPOF(,R1)    SAVE HEX MODE SCREEN OFFSET IN FEL
         TM    MODE,MODEX          IN HEX MODE?
         BO    FMTCLNXT            YES, NOW KNOW THE DISPLAY OFFSET
         STH   R6,FELDSPOF(,R1)    NO, USE FORMAT MODE OFFSET INSTEAD
         AH    R6,FELDSPLN(,R1)    POINT PAST THIS ITEM IN LINE
         LA    R6,1(,R6)           GET DISPLAY OFFSET FOR NEXT ITEM
         LTR   R5,R5               RIGHT-MOST VISIBLE FEL FOUND?
         BNZ   FMTCLNXT            YES
         AH    R4,FELSYMLN(,R1)    GET RECORD OFFSET OF NEXT FEL
         C     R6,SCRNCOLS         WILL NEXT FEL BE PAST SCREEN?
         BL    FMTCLNXT            NO
         LR    R5,R1               YES, POINT TO RIGHT-MOST VISIBLE FEL
         SH    R4,FELSYMLN(,R1)    GET RECORD OFFSET OF THIS ITEM AGAIN
         ST    R4,RITEFELO         SAVE IT
FMTCLNXT LH    R0,FELSYMLN(,R1)    GET BYTE COUNT OF DATA ITEM
         SLA   R0,1                DOUBLE IT FOR HEX MODE
         AR    R7,R0               GET NEXT HEX MODE DISPLAY OFFSET
FMTCLSKP LA    R1,FELSIZE(,R1)     POINT TO THE NEXT FORMAT ELEMENT
         C     R1,FMTFELAD         WAS THAT THE LAST ONE?
         BL    FMTCOLLP            NO, PROCESS NEXT ITEM IN RECORD
         TM    MODE,MODEX          IN HEX MODE?
         BO    FMTCOLSX            YES, NOW FINISHED HERE
         LTR   R5,R5               DID WE FIND THE RIGHT-MOST FEL?
         BNZ   FMTCOLRM            YES
         LA    R5,FELSIZE          NO
         SLR   R1,R5               POINT TO THE LAST FEL
         LR    R5,R1               USE IT
         SH    R4,FELSYMLN(,R5)    GET RECORD OFFSET OF THIS ITEM AGAIN
         ST    R4,RITEFELO         SAVE IT
FMTCOLRM ST    R5,RITEFEL          SAVE ITS ADDRESS
         L     R4,SCRNCOLS         GET THE WIDTH OF THE SCREEN
         SH    R4,FELDSPOF(,R5)    GET LENGTH DISPLAYED OF THE LAST FEL
         TM    FELSYMFG(R5),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SRL   R4,1                YES, HALVE DATA BYTES ON SHOW
         TM    FELSYMFG(R5),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SRL   R4,2                YES, QUARTER DATA BYTES ON SHOW
         CH    R4,FELSYMLN(,R5)    LONGER THAN THE ITEM LENGTH?
         BNH   *+8                 NO
         LH    R4,FELSYMLN(,R5)    YES
         AL    R4,RITEFELO         ADD RECORD OFFSET OF THIS FEL
         L     R1,4(,R13)          POINT TO PREVIOUS SAVE AREA
         ST    R4,20(,R1)          UPDATE R0 SLOT WITH RIGHT COL NUMBER
         DROP  R15,R13             FMTCOLS, @FMTAREA
FMTCOLSX L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         STH   R0,OFFEND           SAVE LAST SCREEN COLUMN NUMBER
         BR    R14                 SHOW RECORD WITHOUT FORMATTING

**********************************************************************
*                                                          *         *
*         PERFORM DSECT RECORD FORMATTING                  *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************

         USING FORMATIT,R5
FORMATIT STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R5,R15              LOAD BASE REGISTER
         L     R1,FMTAREA          POINT TO THE FORMATTING DYNAMIC AREA
         ST    R13,4(,R1)          BACKWARD POINTER
         ST    R1,8(,R13)          FORWARD POINTER
         LR    R13,R1              POINT TO THE NEW SAVE AREA
         USING @FMTAREA,R13
         C     R7,HOLDTOP          IS THIS THE FIRST DATA LINE?
         BNE   FMTHDGDN            NO, HEADING ALREADY DONE
         ICM   R1,15,LEFTFEL       POINT TO LEFT-MOST VISIBLE FEL
         BP    FMTDOHDG            GO LOAD THE ITEM HEADING LINE
FMTNONE  L     R13,4(,R13)         RECORD TOO LONG FOR FORMATTING
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FMTNOTON            SHOW RECORD WITHOUT FORMATTING
FMTDOHDG L     R0,LEFTFELO         GET OFFSET OF LEFT-MOST SHOWING FEL
         L     R1,LEFTFEL          GET LEFT-MOST SHOWING FEL ADDRESS
         ST    R0,20(,R13)         SAVE RECORD OFFSET VALUE
         L     R15,SCREENF         POINT TO THE COLUMNS LABEL LINE
         CLI   1(R15),X'42'        SET ATTRIBUTE COLOUR CODE?
         BNE   *+8                 NO, NOT USING COLOUR
         LA    R15,3(,R15)         YES, POINT PAST IT
         MVI   0(R15),C' '         BLANK BOTH HEADING LINES
         MVC   1(160,R15),0(R15)   HANDLE UP TO 160 SCREEN COLUMNS
         MVC   161(159,R15),160(R15)
         AL    R15,SCRNCOLS        GET "RULER" LINE ADDRESS
         ST    R15,16(,R13)        SAVE IT
FMTHDGLP ICM   R15,3,FELSYMLN(R1)  ZERO LENGTH SYMBOL FEL?
         BZ    FMTHDNXT            YES, IGNORE THIS FEL
         LH    R6,FELDSPOF(,R1)    GET THE DISPLAY OFFSET OF THE ITEM
         L     R15,16(,R13)        POINT TO LABEL LINE
         LTR   R6,R6
         BNM   FMTHDNRM            LEFT OF FEL IS NOT TO LEFT OF SCREEN
         AH    R6,HW7              GET LENGTH OF VISIBLE PART OF LABEL
         BM    FMTHDNXT            WHOLE OF LABEL IS LEFT OF SCREEN
*                                  POINT TO LAST BYTE OF SYMBOL NAME
         LA    R14,FELSYMNM+FELSYMNL-1(,R1)
         SLR   R14,R6              POINT TO FIRST VISIBLE PART OF LABEL
         EX    R6,FMTLDCOL         SHOW TRAILING PART OF SYMBOL NAME
         B     FMTHDNXT            DO NOT SHOW STARTING COLUMN NUMBER
FMTHDNRM C     R6,SCRNCOLS         PAST RIGHT OF SCREEN?
         BNL   FMTHDGOK            YES, HEADING NOW DONE
         ALR   R15,R6              POINT TO POSITION IN LABEL LINE
         MVC   0(8,R15),FELSYMNM(R1)     LOAD SYMBOL NAME AS LABEL
         SL    R15,SCRNCOLS        POINT TO COLUMN NUMBER LINE POSITION
         L     R14,20(,R13)        GET ITEM OFFSET INTO RECORD
         LA    R0,1(,R14)          GET FIRST COLUMN NUMBER OF ITEM
         CVD   R0,DOUBLE           GET INTO DECIMAL
         OI    DOUBLE+7,X'0F'
         UNPK  FSYNADMS(5),DOUBLE+5(3)
         LA    R6,4                GET MAXIMUM NUMBER LENGTH CODE
         LA    R14,FSYNADMS        POINT TO NUMBER
FITMCOLP CLI   0(R14),C'0'         LEADING ZERO?
         BNE   FITEMCOL            NO, GOT NUMBER TO SHOW
         LA    R14,1(,R14)         YES, POINT TO NEXT DIGIT
         BCT   R6,FITMCOLP
FITEMCOL LA    R0,1(R6,R15)        POINT PAST WHERE LAST DIGIT WILL GO
         C     R0,16(,R13)         INTO SECOND HEADING (LABEL) LINE?
         BH    FMTHDNXT            YES, DON'T SHOW COLUMN NUMBER
         TM    MODE,MODEX          IN HEXADECIMAL DISPLAY MODE?
         BO    FITMCOLX            YES
         LA    R0,1(,R6)           GET NUMBER LENGTH
         CH    R0,FELDSPLN(,R1)    IS IT LONGER THAN DISPLAY LENGTH?
         BH    FMTHDNXT            YES, DON'T SHOW COLUMN NUMBER
         B     FITMCOLD            NO, GO SHOW THE NUMBER
FITMCOLX LH    R0,FELSYMLN(,R1)    GET THE ITEM BYTE COUNT
         SLL   R0,1                DOUBLE IT FOR HEX DIGITS
         BCTR  R0,0                GET HEX DATA LENGTH CODE
         CR    R0,R6               HEX DATA LONGER THAN COLUMN NUMBER?
         BNH   FMTHDNXT            NO, NO ROOM FOR NUMBER AND A BLANK
FITMCOLD EX    R6,FMTLDCOL         LOAD FIRST COLUMN NUMBER OF ITEM
FMTHDNXT L     R14,20(,R13)        GET ITEM OFFSET INTO RECORD
         AH    R14,FELSYMLN(,R1)   GET OFFSET OF NEXT RECORD ITEM
         ST    R14,20(,R13)        SAVE RECORD OFFSET OF NEXT ITEM
         LA    R1,FELSIZE(,R1)     POINT TO THE NEXT FORMAT ELEMENT
         C     R1,FMTFELAD         WAS THAT THE LAST ONE?
         BL    FMTHDGLP            NO, PROCESS NEXT ITEM IN RECORD
         TM    STATUS8,ZIPD+ZIPF   CAN CURSOR SELECTION TRIGGER UNZIP?
         BNO   FMTHDGOK            NO
         L     R15,SCREENF         YES, POINT TO THE COLUMNS LABEL LINE
         CLI   1(R15),X'42'        SET ATTRIBUTE COLOUR CODE?
         BNE   *+8                 NO, NOT USING COLOUR
         LA    R15,3(,R15)         YES, POINT PAST IT
         MVC   0(80,R15),UNZIPMSG  SUPPLY CURSOR SELECTION MESSAGE
FMTHDGOK L     R1,4(,R13)          POINT TO PREVIOUS SAVE AREA
         L     R6,44(,R1)          GET CURRENT SCREEN BUFFER ADDRESS
         TM    STATUS5,X3270       EXTENDED HIGHLIGHTING ALLOWED?
         BZ    FMTHDGDN            NO
         L     R6,16(,R13)         YES, POINT TO "RULER" LINE
         MVC   500(160,R6),0(R6)   SAVE COLUMN HEADINGS
         MVC   0(3,R6),USCORE      SUPPLY UNDERSCORE
         MVC   3(160,R6),500(R6)   RESTORE COLUMN HEADINGS
         AL    R6,SCRNCOLS
         MVC   3(3,R6),NORMAL      TURN UNDERSCORE OFF
         LA    R6,6(,R6)           POINT PAST "RULER" LINE
         ST    R6,44(,R1)          UPDATE R6 SLOT WITH NEW ADDRESS
FMTHDGDN TM    MODE,MODEX          IN HEX DISPLAY MODE?
         BO    FMTNONE             YES, DO NO SPECIAL FORMATTING
         ICM   R8,15,LEFTFEL       DATA BEYOND ITEM DEFINITIONS?
         BNP   FMTNONE             YES, DO NO SPECIAL FORMATTING
         IC    R0,FMTCOLOR         LOAD FORMATTING COLOUR
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         ST    R6,44(,R1)          UPDATE R6 SLOT WITH NEW ADDRESS
         L     R14,LEFTFELO        GET FIRST ITEM'S RECORD OFFSET
FMTDSPLP ST    R14,20(,R13)        SAVE ITEM'S RECORD OFFSET
         LH    R15,FELDSPOF(,R8)   GET THIS ITEM'S DISPLAY OFFSET
         C     R15,SCRNCOLS        IS IT BEYOND SCREEN WIDTH?
         BNL   FMTDONE             YES, LINE NOW FORMATTED
         LH    R1,FELSYMLN(,R8)    NO, GET ITEM'S LENGTH
         LTR   R1,R1               ZERO LENGTH SYMBOL FEL?
         BZ    FMTITMDN            YES, IGNORE THIS FEL
         TM    FELSYMFG(R8),FELBIN BINARY INTEGER?
         BZ    FMTBNOK1            NO
         ALR   R14,R2              POINT TO DATA ITEM
         SLR   R0,R0
         TM    FELSYMFG(R8),FELUNS UNSIGNED BINARY INTEGER?
         BO    FMTBNLP2            YES
         ALR   R14,R1              POINT PAST DATA ITEM
FMTBNLP1 BCTR  R14,0               POINT TO NEXT DATA BYTE TO PROCESS
         SRL   R0,8                DEMOTE PREVIOUS BYTES
         ICM   R0,8,0(R14)         GET NEW HIGH-ORDER BYTE
         BCT   R1,FMTBNLP1
         LA    R1,4                GET MAXIMUM ITEM LENGTH
         SH    R1,FELSYMLN(,R8)    GET BYTE COUNT TO BE SHIFTED
         SLL   R1,3                MULTIPLY BY 8 FOR BIT COUNT
         SRA   R0,0(R1)            MOVE DATA TO CORRECT POSITION
         CVD   R0,DOUBLE           (SIGN SHOULD BE PRESERVED)
         B     FMTBINUM            NOW HAVE DECIMAL OF DATA ITEM
FMTBNLP2 SLL   R0,8                PROMOTE PREVIOUS BYTES
         IC    R0,0(,R14)          GET NEW LOW-ORDER BYTE
         LA    R14,1(,R14)         POINT TO NEXT DATA BYTE
         BCT   R1,FMTBNLP2
         ST    R0,60(,R13)         SAVE FOR SIGN BIT CHECK LATER
         SLL   R0,1
         SRL   R0,1                SHIFT OUT SIGN BIT
         CVD   R0,DOUBLE
         TM    60(R13),X'80'       WAS THE SIGN (TOP) BIT ON?
         BZ    *+10                NO
         AP    DOUBLE,FMT2GIG      YES
FMTBINUM MVC   FSYNADMS(16),FMTBNMSK
         LA    R1,FSYNADMS+15      HANDLE ZERO
         EDMK  FSYNADMS,DOUBLE+2
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         TM    DOUBLE+7,X'03'      POSITIVE?
         BNM   *+8                 YES
         MVI   0(R1),C'-'          NO, INSERT MINUS SIGN
         L     R14,20(,R13)        RESTORE ITEM'S RECORD OFFSET
FMTBNOK1 LTR   R15,R15             IS START OF ITEM ON SCREEN?
         BNM   FMTITEM             YES
         LPR   R15,R15             GET SIZE OF LEFT TO HIDE
         TM    FELSYMFG(R8),FELHEX USING 2 SCREEN BYTES PER DATA BYTE?
         BZ    *+8                 NO
         SRA   R15,1               YES, HALVE FOR DATA BYTES TO SKIP
         SLR   R1,R15              REDUCE DATA LENGTH TO FORMAT
         ALR   R14,R15             SKIP START OF ITEM
         SLR   R15,R15             START FROM LEFT OF SCREEN
FMTITEM  C     R14,DIRLEN(,R7)     DOES RECORD END BEFORE THIS ITEM?
         BNL   FMTDONE             YES, LINE NOW FORMATTED
         L     R0,DIRLEN(,R7)      GET THE RECORD LENGTH
         SR    R0,R14              SUBTRACT DATA LENGTH LEFT OF ITEM
         CR    R1,R0               SHOW MORE DATA THAN RECORD HAS?
         BNH   *+6                 NO
         LR    R1,R0               YES, REDUCE DATA-TO-FORMAT SIZE
         L     R0,SCRNCOLS         GET THE SCREEN WIDTH
         TM    FELSYMFG(R8),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO, CHARACTER DATA
         SRL   R0,1                YES, CAN ONLY HANDLE HALF
         CR    R1,R0               MORE DATA THAN SCREEN WIDTH?
         BNH   *+6                 NO
         LR    R1,R0               YES, TRUNCATE DATA
         ALR   R15,R6              POINT TO TARGET IN SCREEN BUFFER
         ALR   R14,R2              POINT TO SOURCE IN DATA RECORD
         TM    FELSYMFG(R8),FELHEX HEXADECIMAL DATA?
         BO    FMTHXNUM            YES, SHOW HEX DIGITS
         TM    FELSYMFG(R8),FELBIN BINARY DATA?
         BZ    FMTCHROK            NO, SHOW CHARACTERS
         LH    R1,FELDSPLN(,R8)    YES, GET THE DISPLAY LENGTH
         LA    R14,FSYNADMS+16     POINT PAST FORMATTED NUMBER
         SLR   R14,R1              BACK UP TO START OF NUMBER
         TM    FELDSPOF(R8),X'80'  NEGATIVE DISPLAY OFFSET?
         BZ    FMTCHROK            NO, PROCEED
         AH    R1,FELDSPOF(,R8)    YES, REDUCE DATA LENGTH
         SH    R14,FELDSPOF(,R8)   BUMP UP DATA SOURCE ADDRESS
FMTCHROK BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,FMTLDCOL         LOAD CHARACTERS INTO LINE
         TM    FELSYMFG(R8),FELBIN BINARY DATA?
         BO    FMTITMDN            YES, NUMBER NOW LOADED
         LA    R0,1(,R1)           NO, GET CHARACTER LENGTH
         STM   R15,R0,DOUBLE       SAVE ADDRESS AND LENGTH FOR LATER
         TM    MODE,ASCIISW        IN ASCII MODE?
         BZ    FMTCHRDN            NO, CHARACTERS NOW LOADED
         LR    R1,R15              YES, POINT TO ASCII DATA
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
FMTCHRDN TM    FELSYMFG(R8),FELDEC ZONED DECIMAL DATA?
         BZ    FMTITMDN            NO, CHARACTERS NOW LOADED
         LH    R0,FELDSPOF(,R8)    GET THE DISPLAY OFFSET OT ITEM
         LTR   R0,R0               ITEM STARTING TO LEFT OF SCREEN?
         BNM   FMTDECZN            NO
         LPR   R0,R0               YES, GET HIDDEN BYTE COUNT
FMTZONLP CLI   0(R14),C'0'         LEADING ZERO?  (BAD LUCK IF ASCII)
         BNE   FMTITMDN            NO, DO NO ZERO SUPPRESSION
         LA    R14,1(,R14)         POINT TO NEXT SOURCE BYTE
         BCT   R0,FMTZONLP
FMTDECZN LM    R15,R0,DOUBLE       GET DISPLAY ADDRESS AND LENGTH
         BCTR  R0,0                LEAVE LAST DIGIT VISIBLE
         LTR   R0,R0               ANY DIGITS TO SCAN?
         BP    FMTDECLP            YES, GO SUPPRESS LEADING ZEROS
         B     FMTITMDN            CHARACTERS NOW LOADED
FMTHXNUM LR    R0,R1               GET NUMBER OF BYTES TO UNPACK
         LR    R1,R14              COPY SOURCE ADDRESS
         STM   R15,R0,DOUBLE       SAVE DECIMAL POSTPROCESSING DATA
         BAL   R14,HEX             UNPACK DATA BYTES
         TM    FELSYMFG(R8),FELDEC PACKED DECIMAL?
         BZ    FMTITMDN            NO, JUST STRAIGHT HEX
         BCTR  R15,0               YES, POINT TO POSSIBLE SIGN
         CLI   0(R15),C'0'         DECIMAL DIGIT IN SIGN POSITION?
         BNL   *+10                YES, UNSIGNED PACKED DECIMAL
         TR    0(1,R15),PACKSIGN-C'A'  NO, TREAT ACCORDINGLY
         LH    R1,FELDSPOF(,R8)    GET THE ITEM DISPLAY OFFSET
         LTR   R1,R1               NEGATIVE DISPLAY OFFSET?
         BNM   FMTDEC00            NO, START OF ITEM IS VISIBLE
         LPR   R1,R1               GET DIGIT COUNT TO LEFT OF SCREEN
         SLL   R1,1                GET BYTE COUNT TO LEFT OF SCREEN
         BCTR  R1,0                DECREMENT FOR EXECUTE
         L     R14,20(,R13)        RESTORE ITEM'S RECORD OFFSET
         ALR   R14,R2              POINT TO SOURCE IN DATA RECORD
         EX    R1,FDEC0TST         ARE ALL MISSING BYTES NULL?
         BNZ   FMTITMDN            NO, DO NO ZERO SUPPRESSION
FMTDEC00 LM    R15,R0,DOUBLE       RESTORE DISPLAY ADDRESS & DATA SIZE
         BCTR  R0,0                DO NOT ZERO SUPPRESS LAST DIGIT
         SLA   R0,1                DOUBLE FOR DIGIT COUNT
         BZ    FMTITMDN            SKIP EDIT IF ZERO DIGITS TO SCAN
FMTDECLP CLI   0(R15),C'0'         LEADING ZERO?
         BNE   FMTITMDN            NO, NUMBER NOW READY TO SHOW
         MVI   0(R15),C' '         YES, OVERLAY WITH BLANK
         LA    R15,1(,R15)         POINT TO NEXT BYTE
         BCT   R0,FMTDECLP
FMTITMDN BAL   R14,FMTDSCB1        PERFORM EXTRA DSCB-1 FORMATTING
         L     R14,20(,R13)        GET RECORD OFFSET OF THIS ITEM
         AH    R14,FELSYMLN(,R8)   ADD LENGTH OF THIS ITEM
         LA    R8,FELSIZE(,R8)     POINT TO NEXT FEL
         C     R8,FMTFELAD         ANOTHER FEL TO LOOK AT?
         BL    FMTDSPLP            YES
FMTDONE  TR    0(160,R6),PERIODS   ENSURE NO UNPRINTABLES ON LINE
         ST    R6,DOUBLE           SAVE LINE START ADDRESS FOR APL
         CLC   MSG+2(14),MSG31+2   FIND COMMAND ISSUED?
         BNE   FORMATDN            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FORMATDN            NO
         MVC   160(160,R6),0(R6)   YES, SAVE A COPY OF THE DATA
         LH    R15,FNDOFF          GET OFFSET OF SEARCH STRING
         LR    R1,R15              COPY IT
         SH    R1,OFFSET           IS DATA LEFT OF SCREEN SOMEHOW?
         BM    FORMATDN            YES, DO NOT MOVE CURSOR TO IT
         NI    FMTFLAGS,255-FFSW   FLAG DOING START OF FOUND DATA
         BAL   R14,FGTDSPOF        GET DISPLAY OFFSET OF FOUND DATA
         C     R1,SCRNCOLS         GREATER THAN SCREEN WIDTH?
         BNL   FORMATDN            YES, DATA TO RIGHT OF SCREEN
         ALR   R1,R6               POINT TO FOUND DATA
         MVI   0(R1),IC            SUPPLY INSERT CURSOR
         TM    STATUS5,X3270       USING 3270 ENTENSIONS?
         BZ    FMTFMONO            NO
         ST    R1,32(,R13)         YES, SAVE THIS ADDRESS FOR A BIT
         MVC   1(3,R1),REVERSE     HIGHLIGHTING STARTS HERE
         MVC   4(3,R1),REDSA       HIGHLIGHTING STARTS HERE
         CLI   FMTCOLOR,3          USING PINK AS FORMAT COLOUR?
         BE    *+8                 YES, KEEP RED TO CONTRAST
         MVI   6(R1),X'F3'         NO, USE PINK AS HIGHLIGHT COLOR
         AH    R15,STRINGL         ADD LENGTH CODE OF FIND DATA
         LA    R15,1(,R15)         GET OFFSET PAST FOUND DATA
         OI    FMTFLAGS,FFSW       FLAG DOING END OF FOUND DATA
         BAL   R14,FGTDSPOF        GET DISPLAY OFFSET PAST FOUND DATA
         C     R1,SCRNCOLS         GREATER THAN SCREEN WIDTH?
         BNH   *+8                 NO
         L     R1,SCRNCOLS         YES, END HIGHLIGHT AT END OF LINE
         ST    R1,36(,R13)         SAVE THIS OFFSET FOR A BIT
         ALR   R1,R6               ADD LINE ADDRESS TO OFFSET
         L     R15,32(,R13)        RESTORE FOUND DATA POINTER
         SLR   R1,R15              GET FOUND DATA HIGHLIGHT LENGTH
         LA    R14,160(,R15)       POINT TO FOUND DATA COPY
         LA    R15,7(,R15)         POINT PAST HIGHLIGHTING ORDERS
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,FMTLDCOL         RESTORE DATA THAT WAS FOUND
         LA    R15,1(R1,R15)       POINT PAST RESTORED DATA
         LA    R14,1(R1,R14)       POINT PAST FOUND DATA COPY
         MVC   0(3,R15),NORMAL     HIGHLIGHTING STOPS HERE
         MVC   3(2,R15),YELLOWSA   "SA,COLOUR"
         MVC   5(1,R15),FMTCOLOR   REVERT TO STANDARD FORMAT COLOUR
         OI    5(R15),X'F0'
         LA    R15,6(,R15)         POINT PAST RESETTING ORDERS
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         S     R1,36(,R13)         GET DATA BYTE COUNT AFTER RESET
         BNP   FFDATAOK            SKIP IT IF AT END OF LINE
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,FMTLDCOL         COMPLETE RESTORE OF DATA LINE
FFDATAOK LA    R6,13(,R6)          COUNT EXTRA DATA STREAM BYTES
         B     FMTFINDN            FORMATTING OF FIND STUFF NOW DONE
FMTFMONO MVC   1(160,R1),160(R1)   RESTORE REST OF LINE
         LA    R6,1(,R6)           COUNT EXTRA DATA STREAM BYTE
FMTFINDN L     R1,4(,R13)          POINT TO PREVIOUS SAVE AREA
         ST    R6,44(,R1)          UPDATE R6 SLOT WITH NEW ADDRESS
FORMATDN L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLCHAR            EDIT ANY CHARACTER DATA
FMTLDCOL MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
FDEC0TST OC    0(0,R14),0(R14)     <<< EXECUTED >>>

FGTDSPOF DS    0H                  CONVERT OFFSET TO DISPLAY OFFSET
         L     R8,LEFTFEL          POINT TO THE FIRST VISIBLE FEL
         L     R1,LEFTFELO         GET ITS OFFSET
FMTFNDLP AH    R1,FELSYMLN(,R8)    GET OFFSET OF NEXT FEL
         CR    R1,R15              IS OFFSET IN THIS DATA ITEM?
         BH    FMTFIND             YES
         BL    FMTFNDNX            NO
         TM    FMTFLAGS,FFSW       DOING END OF FOUND DATA?
         BO    FMTFIND             YES, LEAVE INTER-ITEM BLANK NORMAL
FMTFNDNX LA    R8,FELSIZE(,R8)     NO, POINT TO NEXT FEL
         C     R8,FMTFELAD         WAS THAT THE LAST FEL?
         BL    FMTFNDLP            NO, CONTINUE SCAN
         B     FORMATDN            YES
FMTFIND  SH    R1,FELSYMLN(,R8)    GET OFFSET OF ITEM
         SR    R1,R15
         LPR   R1,R1               GET FIND OFFSET INTO DATA ITEM
         CH    R1,FELSYMLN(,R8)    OFFSET AT END OF ITEM?
         BE    FMTHIEND            YES, ONLY HAPPENS FOR HIGHLIGHT END
         TM    FELSYMFG(R8),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SLL   R1,1                YES, DOUBLE FOR DISPLAY WIDTH
         TM    FELSYMFG(R8),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SLL   R1,2                YES, QUADRUPLE FOR DISPLAY WIDTH
         AH    R1,FELDSPOF(,R8)    GET FIND DATA SCREEN OFFSET
         BR    R14                 RETURN TO CALLER
FMTHIEND LH    R1,FELDSPLN(,R8)    HIGHLIGHT ENDS AT END OF ITEM
         AH    R1,FELDSPOF(,R8)    GET FIND DATA SCREEN OFFSET
         BR    R14                 RETURN TO CALLER

FMTDSCB1 TM    FELSYMFG(R8),FELDS1 EXTRA FORMATTING FOR FORMAT-1 DSCB?
         BZR   R14                 NO, RETURN WITHOUT ACTION
         L     R1,20(,R13)         RESTORE ITEM'S RECORD OFFSET
         ALR   R1,R2               POINT TO SOURCE IN DATA RECORD
         LH    R4,FELDSPOF(,R8)    GET ITEM'S DISPLAY OFFSET
         ALR   R4,R6               POINT TO TARGET IN SCREEN LINE
         CLI   44(R2),C'1'         IS THIS A FORMAT-1 DSCB?
         BNE   FMTDSCB0            NO, CHECK FOR FORMAT-0 DSCB
         SLR   R15,R15
         CLI   23(R13),53          CREATION DATE?
         BE    FMTDATE1            YES
         CLI   23(R13),56          EXPIRY DATE?
         BE    FMTDATE1            YES
         CLI   23(R13),75          REFERENCE DATE?
         BE    FMTDATE1            YES
         CLI   23(R13),82          DATA SET ORGANISATION?
         BE    FMTDSORG            YES
         CLI   23(R13),84          RECORD FORMAT?
         BE    FMTRECFM            YES
         CLI   23(R13),93          DATA SET INDICATORS?
         BE    FMTDSIND            YES
         CLI   23(R13),94          SECONDARY ALLOCATION TYPE?
         BE    FMTSCAL1            YES
         BR    R14                 UNKNOWN FIELD OFFSET
FMTDSCB0 CLI   44(R2),X'00'        IS THIS A FORMAT-0 DSCB?
         BNER  R14                 NO, RETURN WITHOUT ACTION
         CLI   FELSYMFG(R8),FELDS1 CHARACTER FIELD?
         BNER  R14                 NO, RETURN WITHOUT ACTION
         LH    R15,FELSYMLN(,R8)   GET ITEM'S DATA LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,FMT0ZERO        IS THE WHOLE FIELD ZERO?
         BNZR  R14                 NO, RETURN WITHOUT ACTION
         LH    R0,FELDSPOF(,R8)    GET ITEM'S DISPLAY OFFSET
         LTR   R0,R0               IS ITEM'S DISPLAY OFFSET NEGATIVE?
         BNM   FMT0LNOK            NO
         AR    R15,R0              YES, DECREASE DISPLAY LENGTH
         LR    R4,R6               START FROM START OF DISPLAY LINE
FMT0LNOK EX    R15,FMT0BLNK        JUST SHOW BLANKS FOR NULL DATA
         BR    R14                 EXTRA FORMATTING FOR DSCB-0 DONE
FMT0ZERO OC    0(0,R1),0(R1)       <<< EXECUTED >>>
FMT0BLNK MVC   0(0,R4),BLANKS      <<< EXECUTED >>>
FMTDATE1 CLI   FELDSPOF(R8),X'FF'  NEGATIVE DISPLAY OFFSET?
         BNE   FMTDATE0            NO, CAN ACCESS WHOLE DISPLAY AREA
         MVC   0(4,R6),BLANKS      YES, BLANK START OF LINE INSTEAD
         B     FMT1DAT0            ZERO DATE HANDLING NOW COMPLETE
FMTDATE0 MVC   1(5,R4),BLANKS      SHOW ONE 0 FOR ZERO DATE
FMT1DAT0 ICM   R0,7,0(R1)          ZERO DATE?
         BZR   R14                 YES, RETURN
         IC    R15,0(,R1)          GET BINARY YEAR SINCE 1900
         LA    R15,1900(,R15)      GET 4-DIGIT YEAR
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         CLI   FELDSPOF(R8),X'FF'  NEGATIVE DISPLAY OFFSET?
         BNE   FMT1YROK            NO, OKAY TO FORMAT YEAR NORMALLY
         CLI   FELDSPOF+1(R8),X'FE'    IS IT NEGATIVE TWO?
         BNE   FMT1YRDN            NO, NO ROOM FOR YEAR
         UNPK  2(2,R4),DOUBLE+6(2) YES, ROOM FOR LAST 2 YEAR DIGITS
         B     FMT1YRDN            YEAR FORMATTING NOW DONE
FMT1YROK UNPK  0(4,R4),DOUBLE+5(3) SHOW YEAR
FMT1YRDN MVI   4(R4),C'.'
         ICM   R15,3,1(R1)         GET JULIAN DAY
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  5(3,R4),DOUBLE+6(2) SHOW JULIAN DAY
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTDSORG TM    0(R1),X'01'         UNMOVABLE?
         BZ    *+8                 NO
         MVI   7(R4),C'U'          YES, FLAG IT
         ICM   R15,12,0(R1)        LOAD DS1DSORG
         LA    R0,14               LOAD COUNT OF BITS TO TEST
         LA    R1,DSORGLIT         POINT TO DSORG LABELS
FMTDSOLP LTR   R15,R15             TOP BIT ON?
         BM    FMTDSOOK            YES, FOUND DSORG
         SLL   R15,1               NO, PROMOTE NEXT BIT
         LA    R1,2(,R1)           POINT TO NEXT LABEL
         BCT   R0,FMTDSOLP
         BR    R14                 RETURN WITHOUT LABEL
FMTDSOOK MVI   4(R4),C'-'
         MVC   5(2,R4),0(R1)       SUPPLY DSORG LABEL
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTRECFM ICM   R15,1,0(R1)         LOAD DS1RECFM
         BZR   R14                 NO LABEL FOR NULL RECFM
         SRL   R15,6
         LA    R15,RECFM1ST(R15)   POINT TO FIRST RECFM LETTER
         MVI   2(R4),C'-'
         MVC   3(1,R4),0(R15)      SHOW FIRST RECFM LETTER
         IC    R15,0(,R1)          LOAD DS1RECFM
         SLL   R15,26              PROMOT BITS OF INTEREST
         LA    R0,5                LOAD COUNT OF BITS TO TEST
         LA    R1,RECFMLIT         POINT TO DSORG LABELS
FMTRFMLP LTR   R15,R15             TOP BIT ON?
         BNM   FMTRFMOK            YES, FOUND RECFM
         MVC   4(1,R4),0(R1)       SUPPLY RECFM LETTER
         LA    R4,1(,R4)           INCREMENT DISPLAY POINTER
FMTRFMOK SLL   R15,1               NO, PROMOTE NEXT BIT
         LA    R1,1(,R1)           POINT TO NEXT LABEL
         BCT   R0,FMTRFMLP
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTDSIND TM    0(R1),X'02'         DATA SET CHANGED?
         BZR   R14                 NO, RETURN WITHOUT ACTION
         MVC   2(6,R4),=CL6'-CHNGD'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTSCAL1 CLI   0(R1),0             ABSOLUTE TRACK ALLOCATION?
         BE    FMTABSTR            YES
         TM    0(R1),X'C0'         CYLINDER ALLOCATION?
         BO    FMTCYLS             YES
         TM    0(R1),X'80'         TRACK ALLOCATION?
         BNO   FMTNOTRK            NO
         MVC   2(4,R4),=CL4'-TRK'
FMTNOTRK TM    0(R1),X'40'         BLOCK ALLOCATION?
         BNO   FMTNOBLK            NO
         MVC   2(4,R4),=CL4'-BLK'
FMTNOBLK TM    0(R1),X'01'         ROUNDED ALLOCATION?
         BNOR  R14                 NO
         MVC   6(2,R4),=CL2'-R'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTABSTR MVC   2(6,R4),=CL6'-ABSTR'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTCYLS  MVC   2(4,R4),=CL5'-CYL'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE

         DROP  R5,R13              FORMATIT, @FMTAREA

UNZIPMSG EQU   *,80
*        DC    CL40' ** PLACE CURSOR ON ZIPPED FILE ENTRY AN'
         DC    XL20'405C5C40D7938183854083A499A2969940969540'
         DC    XL20'A989979785844086899385408595A399A8408195'
*        DC    CL40'D PRESS <ENTER> TO SEE UNZIPPED DATA ** '
         DC    XL20'8440979985A2A2404CC5D5E3C5D96E40A39640A2'
         DC    XL20'858540A495A98997978584408481A381405C5C40'
DSORGLIT DC    CL28'ISPSDACXCQMQPO  GSTXTQ??VSTR'
RECFM1ST DC    CL4'*VFU'
RECFMLIT DC    CL5'TBSAM'
*              PACKED DECIMAL MAY BE SIGNED OR UNSIGNED.
*              IF UNSIGNED THEN SHOW THE LAST DIGIT.
*              IF SIGNED AND NEGATIVE THAN REPLACE WITH MINUS SIGN.
*              IF SIGNED AND POSITIVE THAN REPLACE WITH BLANK.
*   SIGN VALUE-> ABCDEF
PACKSIGN DC    C' - -  '           DISPLAY TABLE FOR DECIMAL SIGN
FMT2GIG  DC    P'2147483648'       UNSIGNED VALUE OF TOP BINARY BIT
FMTBNMSK DC    X'404020206B2020206B2020206B202120'
         LTORG
         DS    0H

**********************************************************************
*                                                          *         *
*         CUT REVIEWED DATA AND PASTE TO FILE              *  GP@FT  *
*                                                          *  05/94  *
**********************************************************************

         USING APPEND,R15
APPEND   OI    STATUS7,TACKON      FLAG APPEND REQUESTED FOR CUT
         LA    R5,CUTOFF           INITIALIZE NEW BASE REGISTER
         B     CUT                 BRANCH TO COMMON CODE
         DROP  R15                 APPEND

         USING CUTOFF,R5
CUTOFF   LR    R5,R15              LOAD BASE REGISTER
         NI    STATUS7,255-TACKON  FLAG OVERLAY REQUESTED FOR CUT
CUT      LA    R15,OPD3
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         L     R7,HOLDTOP          POINT TO FIRST LINE DIRECTORY ENTRY
         TM    DIRLEN(R7),X'80'    IS EOF AT TOP OF SCREEN?
         BO    CUTNONE             YES, NO DATA TO CUT
         NI    STATUS7,255-CUTNUM-CUTWRD
         L     R1,=V(STOFFDCB)     POINT TO OFFLOAD DCB TEMPLATE
         LA    R6,SNAPDW           POINT TO TARGET DCB
         MVC   0(OFFDCBLN,R6),0(R1)     INITIALIZE DCB
         USING IHADCB,R6
         SLR   R0,R0
         ST    R0,RANGE            RESET REQUESTED LINE COUNT
         LA    R0,2                GET MAXIMUM OPERAND COUNT
         LA    R15,OPD1            POINT TO FIRST OPERAND DETAILS
CUTOPRLP TM    6(R15),PRESENT      IS THERE ANOTHER OPERAND?
         BZ    CUTIT               NO, GO COMMENCE CUTTING
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   CUTNONUM            NO, BRANCH
         TM    STATUS7,CUTNUM      YES, NUMERIC OPERAND ALREADY DONE?
         BO    ERRINV              YES, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R1,R1               IS IT ZERO?
         BZ    ERRINV              YES, ERROR
         ST    R1,RANGE            NO, SAVE IT
         OI    STATUS7,CUTNUM      NUMERIC OPERAND NOW DONE
         B     CUTNXTOP            PROCESS ANY OTHER OPERAND
CUTDDNLD MVC   DCBDDNAM(0),0(R14)  <<< EXECUTED >>>
CUTNONUM TM    STATUS7,CUTWRD      NON-NUMERIC OPERAND ALREADY DONE?
         BO    ERRINV              YES, ERROR
         LH    R1,4(,R15)          GET LENGTH
         CH    R1,HW8              LONGER THAN 8 CHARACTERS?
         BH    ERRINV              YES, INVALID DDNAME
         MVC   DCBDDNAM,BLANKS     NO, CLEAR DEFAULT DDNAME
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,CUTDDNLD         UPDATE DDNAME IN DCB
CUTNXTOP LA    R15,8(,R15)         POINT TO NEXT POSSIBLE OPD
         BCT   R0,CUTOPRLP         PROCESS NEXT POSSIBLE OPERAND
CUTIT    SLR   R0,R0
         L     R15,540             GET POINTER TO CURRENT TCB
         L     R15,12(,R15)        POINT TO TIOT
         LA    R15,24(,R15)        POINT TO TIOELNGH
CUTLOADD CLC   DCBDDNAM,4(R15)     CHECK FOR REQUIRED DD ENTRY
         BE    CUTLDTRY            FILE EXISTS SO GO AND USE IT
         IC    R0,0(,R15)          GET TIOT ENTRY LENGTH
         AR    R15,R0              POINT TO NEXT TIOT ENTRY
         CLI   0(R15),0            ZERO LENGTH ENTRY?
         BNE   CUTLOADD            NO, CHECK OUT THIS ENTRY
         MVC   MSG(MSGCUT2L),MSGCUT2
         MVC   MSG+7(8),DCBDDNAM
         LH    R1,MSG              GET THE MESSAGE LENGTH
         LA    R15,MSG+14          POINT TO THE LAST DDNAME CHARACTER
CUTLDLP  CLI   0(R15),C' '         TRAILING BLANK?
         BNE   BELPRMPT            NO, GO RING THE BELL
         MVC   0(MSGCUT2L-15,R15),1(R15)  YES, OVERLAY THE BLANK
         BCTR  R15,0               BACK UP A CHARACTER
         BCTR  R1,0                UPDATE THE MESSAGE LENGTH
         STH   R1,MSG              SAVE THE NEW LENGTH
         B     CUTLDLP             GO CHECK FOR ANOTHER TRAILING BLANK
CUTLDTRY MVI   DCBRECFM,X'90'      SET RECFM=FB
         MVC   DCBLRECL,=H'80'     SET LRECL=80
         TM    STATUS10,UZ80       UNZIPPING "CARD IMAGE" FILE?
         BO    CUTLRLOK            YES, CHECK BLKSIZE
         MVC   DCBRECFM,TSTRECFM   SET OUTPUT RECORD FORMAT
         MVC   DCBLRECL,RECSIZE    SET OUTPUT RECORD LENGTH
         TM    DCBRECFM,X'C0'      DEFINED RECORD FORMAT?
         BNM   CUTRFMUN            NO, UNDEFINED RECORD FORMAT
         OI    DCBRECFM,X'10'      YES, ALLOW OUTPUT DATA TO BE BLOCKED
         TM    DCBRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    CUTLRLOK            NO, LOGICAL RECORD LENGTH SET
         LA    R0,4                YES
         AH    R0,RECSIZE          RESTORE CORRECT MAX RECORD LENGTH
         STH   R0,DCBLRECL
         CH    R0,=H'32756'        IS MAX RECORD LENGTH TOO BIG?
         BNH   CUTLRLOK            NO
         MVC   DCBLRECL,=H'32756'  YES, RESET TO MAXIMUM
CUTLRLOK ICM   R0,7,17(R15)        ZERO UCB POINTER?
         BNZ   CUTRFMOK            NO, LET DFP INSERT BLOCK SIZE
         MVC   DCBBLKSI,RECSIZE    YES, UNBLOCKED FOR TSO OR SYSOUT
         NI    DCBRECFM,255-X'08'  TURN OFF STANDARD/SPANNED FORMAT
         TM    DCBRECFM,X'80'      FIXED LENGTH RECORDS?
         BO    CUTRFMOK            YES, BLKSIZE=LRECL WILL WORK
         LA    R0,4                NO, VARIABLE LENGTH RECORDS
         AH    R0,DCBLRECL         ADD 4 TO LRECL FOR BLKSIZE
         STH   R0,DCBBLKSI
         B     CUTRFMOK            BLKSIZE=LRECL+4 WILL WORK
CUTRFMUN OI    DCBRECFM,X'C0'      MAKE OUTPUT RECFM=U
         MVC   DCBBLKSI,RECSIZE    SET OUTPUT BLOCK SIZE
         XC    DCBLRECL,DCBLRECL   ZERO LRECL IN DATA SET LABEL(S)
         CLC   DCBBLKSI,=H'32760'  IS MAX BLOCK LENGTH TOO BIG?
         BNH   CUTRFMOK            NO
         MVC   DCBBLKSI,=H'32760'  YES, RESET TO MAXIMUM
CUTRFMOK MVI   OPEND,X'80'         OPEN THE OUTPUT DCB
         TM    STATUS7,TACKON      DATA TO BE APPENDED?
         BZ    CUTOVER             NO, OVERWRITE DATA IN OUTPUT FILE
         OPEN  ((R6),EXTEND),MF=(E,OPEND)
         B     CUTOPEN             GO WRITE TO OPEN FILE
CUTOVER  OPEN  ((R6),OUTPUT),MF=(E,OPEND)
CUTOPEN  L     R8,RANGE            GET REQUESTED LINE COUNT
         SLR   R0,R0
         ST    R0,RANGE            RESET CUT RECORDS COUNTER
CUTDIRLP TM    DIRLEN(R7),X'80'    EOF?
         BO    CUTCLOSE            YES, END OF DATA TO CUT
         TM    MODE,ASCIISW        IN ASCII MODE?
         BZ    CUTXLTOK            NO, BRANCH TO AFTER XLATE
         L     R0,DIRLEN(,R7)      YES, GET LENGTH TO TRANSLATE
         L     R1,DIRREC(,R7)      POINT TO THE RECORD TO TRANSLATE
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
CUTXLTOK L     R0,DIRREC(,R7)      POINT TO THE RECORD TO WRITE
         TM    DCBRECFM,X'C0'      FIXED OR VARIABLE LENGTH RECORDS?
         BNM   CUTDPUTU            NO, UNDEFINED RECORD FORMAT
         TM    DCBRECFM,X'80'      FIXED LENGTH RECORDS?
         BO    CUTDIRPT            YES, RECORD READY TO WRITE
         SH    R0,HW4              NO, POINT TO RDW FOR VARIABLE
         B     CUTDIRPT            NOW RECORD READY TO WRITE
CUTDPUTU MVC   DCBLRECL,DIRLEN+2(R7)   SUPPLY THE RECORD LENGTH
CUTDIRPT PUT   (R6),(0)            COPY THE RECORD
         LA    R0,1
         A     R0,RANGE            INCREMENT THE CUT LINE COUNTER
         ST    R0,RANGE
         MVC   RANGE+4(4),DIRNUM(R7)   REMEMBER LAST RECORD CUT
         BCT   R8,CUTDIRLN         DECREMENT REMAINING LINE COUNTER
         B     CUTCLOSE            NO MORE LINES HAVE TO BE COPIED
CUTDIRLN C     R7,HOLDEND          IS THIS THE LAST HELD RECORD?
         BE    CUTDEEPR            YES, PREPARE TO READ MORE RECORDS
         L     R7,DIRNXT(,R7)      POINT TO THE NEXT HOLD ENTRY
         B     CUTDIRLP
CUTDEEPR ST    R5,DOWNR            SAVE BASE REGISTER
         BAL   R14,GET             GET THE NEXT RECORD
         L     R5,DOWNR            LOAD BASE REGISTER
         LTR   R1,R1               END-OF-FILE?
         BM    CUTEOF              YES, NO MORE DATA TO COPY
         LA    R0,1                COMPUTE
         A     R0,COUNT             THE
         ST    R0,COUNT              RECORD NUMBER
         TM    DCBRECFM,X'C0'      FIXED OR VARIABLE LENGTH RECORDS?
         BM    CUTXLCHK            YES
         STH   R1,DCBLRECL         NO, SUPPLY THE RECORD LENGTH
CUTXLCHK TM    MODE,ASCIISW        IN ASCII MODE?
         BZ    CUTPUT              NO, BRANCH TO AFTER XLATE
         LR    R0,R1               YES, GET LENGTH TO TRANSLATE
         LR    R1,R2               POINT TO THE RECORD TO TRANSLATE
         TM    DCBRECFM,X'80'      VARIABLE LENGTH RECORDS?
         BO    CUTXLATE            NO, READY TO TRANSLATE
         SH    R0,HW4              YES
         LA    R1,4(,R1)           DO NOT TRANSLATE RDW
CUTXLATE XLATE (1),(0),TO=E        PERFORM TRANSLATION
CUTPUT   PUT   (R6),(R2)           COPY THE RECORD
         MVC   RANGE+4(4),COUNT    REMEMBER LAST RECORD CUT
         LA    R0,1
         A     R0,RANGE            INCREMENT THE CUT LINE COUNTER
         ST    R0,RANGE
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    CUTCUT              YES, TERMINATE CUT PREMATURELY
         BCT   R8,CUTDEEPR         SEE IF REQUESTED LINE COUNT REACHED
         B     CUTCLOSE            CLOSE OUTPUT FILE WITHOUT MUCH ADO
CUTEOF   L     R7,HOLDTOP          POINT TO FIRST SCREEN RECORD ENTRY
         ST    R1,DIRLEN(,R7)      SAY IT'S EOF TO INVALIDATE BUFFER
         B     CUTCLOSE
CUTCUT   OI    STATUS7,BELL        SOUND BELL TO HIGHLIGHT TRUNCATION
CUTCLOSE MVI   CLOSED,X'80'        CLOSE THE OUTPUT DCB
         CLOSE ((R6)),MF=(E,CLOSED)
         L     R0,RANGE            GET THE CUT LINE TOTAL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+2(15),DOUBLE    SHOW THIS COUNT
         LA    R1,15               GET THE NUMBER LENGTH
CUT0LOOP CLI   MSG+2,C'0'          LEADING ZERO?
         BNE   CUT0DONE            NO
         MVC   MSG+2(14),MSG+3     YES, DELETE IT
         BCT   R1,CUT0LOOP
CUT0DONE LA    R15,MSG+2(R1)       POINT PAST NUMBER
         MVC   0(L'MSGCUT1,R15),MSGCUT1
         MVC   L'MSGCUT1(8,R15),DCBDDNAM
         LA    R15,L'MSGCUT1+7(,R15)   POINT TO LAST DDNAME CHAR
         LA    R1,L'MSGCUT1+8(,R1) GET TOTAL MESSAGE LENGTH
CUTBLANK CLI   0(R15),C' '         TRAILING BLANK IN DDNAME?
         BNE   CUTMSGOK            NO, MESSAGE NOW READY
         BCTR  R15,0               YES, BACK UP A CHARACTER
         BCT   R1,CUTBLANK         ADJUST MESSAGE LENGTH
CUTMSGOK STH   R1,MSG              LOAD MESSAGE LENGTH
         LA    R0,1
         A     R0,RANGE+4          GET FIRST RECORD AFTER CUT RECORDS
         NI    STATUS4,255-FLAGI   ALLOW LOCATE TO COMPLETE
         TM    DIRLEN(R7),X'80'    E-O-F NOW AT TOP?
         BZ    LISTAT              NO, GO ADJUST TOP-OF-SCREEN
         ST    R0,DIRNUM(,R7)      YES, SUPPLY THE RECORD NUMBER
         B     LISTAT              ADJUST TOP-OF-SCREEN

CUTNONE  MVC   MSG(MSGCUT0L),MSGCUT0
         B     BELPRMPT
         DROP  R5,R6               CUTOFF, IHADCB

         USING CUTOFFLD,R15
CUTOFFLD MVC   MSG(MSGCUT3L),MSGCUT3
         B     BELPRMPT
         DROP  R15                 CUTOFFLD

MSGCUT0  MSG   'END-OF-FILE - NO DATA TO COPY'
MSGCUT1  DC    C' RECORDS COPIED TO '
MSGCUT2  MSG   'FILE ???????? NOT PRE-ALLOCATED'
MSGCUT3  MSG   'USE ''CUTOFF'' OR ''APPEND'''
         LTORG


**********************************************************************
*                                                          *         *
*         PROCESS PCX (ZSOFT PAINTBRUSH) FILES             *  GP@P6  *
*                                                          *  11/99  *
**********************************************************************

*      THIS ROUTINE IS CALLED ONCE AFTER THE INITIAL SCREENFUL OF
*   RECORDS HAS BEEN READ.  IT DETERMINES IF THE DATA SET BEING
*   REVIEWED IS A ".PCX" OR "ZSOFT PAINTBRUSH" FILE.  IF NOT THEN
*   NO ACTION IS TAKEN AND "NORMAL" REVIEW PROCESSING CONTINUES.
*
*      IF IT IS, AND IS A TYPE THAT CAN BE HANDLED BY REVIEW (WHICH
*   PROBABLY MEANS IT WAS NOT WRITTEN BY A RECENT RELEASE OF
*   PAINTBRUSH) THEN THIS ROUTINE STORES THE PICTURE AS ONE BYTE
*   PER PICTURE ELEMENT (PIXEL OR PEL) IN AN ARRAY WHICH IS PROCESSED
*   LATER AT SCREEN-FORMAT TIME BY REVIMAGE OR REVGDDM.
*
*      FOR BLACK-AND-WHITE THE BYTE VALUES ARE:
*          X'00' - BLACK
*          X'01' - WHITE
*
*      FOR COLOUR THE BYTE CONTAINS THE BINARY 3270 COLOUR NUMBER,
*   WHICH IS DERIVED FROM THE APPROPRIATE COLOUR PALETTE ENTRY.  THE
*   HIGH BITS OF THE RGB TRIPLETS ARE RETAINED AND CONVERTED TO 3270
*   GRB FLAGS FOR THE PIXEL.  THUS, RGB VALUES OF 128 OR MORE TRIGGER
*   THE PRESENCE OF THAT COLOUR FOR THAT PIXEL ON THE TERMINAL.  IT
*   IS OBVIOUS THAT THIS PRODUCES A VERY COARSE COLOUR TRANSLATION.

         USING PCXCHECK,R5
PCXCHECK DS    0H
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    FILLSCR             YES, SHOW RAW DATA, NOT PICTURE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLSCR             YES, SKIP PCX PROCESSING
         LA    R7,130              HEADER LENGTH PLUS FUDGE FACTOR
         C     R7,KOUNT            AT LEAST MINIMAL DATA PRESENT?
         BNL   FILLSCR             NO, NOT A PCX FILE
         L     R7,HOLDTOP          POINT TO FIRST RECORD DETAILS
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         CH    R1,=H'80'           SENSIBLE RECORD LENGTH?
         BL    FILLSCR             NO, SKIP PCX PROCESSING
         USING PCXHDR,R2
         CLI   PCXMFR,10           ZSOFT PCX FILE?
         BNE   FILLSCR             NO, GO SHOW FIRST PAGE OF FILE DATA
         CLI   PCXMETHD,1          KNOWN ENCODING METHOD?
         BH    FILLSCR             NO, PROBABLY NOT A PCX FILE
         CLI   PCXRESV,0           EXPECTED ZERO BYTE?
         BNE   FILLSCR             NO, PROBABLY NOT A PCX FILE
         CLI   PCXNPLNS,1          SINGLE COLOUR PLANE?
         BE    PCXPLNOK            YES
         BL    FILLSCR             PROBABLY NOT A PCX FILE
         LA    R1,=CL40'"REVIEW" CANNOT INTERPRET MULTIPLANE PCX'
         LA    R0,40
         TPUT  (1),(0),R
         B     FILLSCR             SHOW FIRST PAGE OF FILE DATA
PCXPLNOK CLI   PCXBITPP,1          BLACK AND WHITE PICTURE?
         BE    PCXBPPOK            YES
         CLI   PCXBITPP,4          16-COLOUR PICTURE?
         BE    PCXBPPOK            YES
         CLI   PCXBITPP,8          256-COLOUR PICTURE?
         BE    PCXBPPOK            YES
         LA    R1,=CL40'"REVIEW" CANNOT INTERPRET PCX COLOR MODE'
         LA    R0,40
         TPUT  (1),(0),R
         SLR   R0,R0
         IC    R0,PCXBITPP
         CVD   R0,DOUBLE
         MVC   DOUBLE(4),=X'40202120'
         ED    DOUBLE(4),DOUBLE+6
         MVC   DOUBLE+4(4),=CL4'-BIT'
         LA    R1,DOUBLE
         LA    R0,8
         TPUT  (1),(0),R
         B     FILLSCR             RETURN TO CALLER
PCXBPPOK TM    VECFLAGS,VCTR       VECTOR GRAPHICS AVAILABLE?
         BO    PCXGRFOK            YES, CAN RENDER PICTURE
         CLI   SYMSTGF,0           ANY LOADABLE SYMBOL CAPABILITY?
         BE    FILLSCR             NO, CAN'T DO GRAPHICS
         CLI   PCXBITPP,1          BLACK AND WHITE PICTURE?
         BE    PCXGRFOK            YES, 3270 SINGLE-PLANE WILL DO
         CLI   SYMSTG3,0           3270 TRIPLE-PLANE AVAILABLE?
         BE    FILLSCR             NO, INSUFFICIENT GRAPHICS CAPABILITY
PCXGRFOK LA    R14,FILLSCR         PREPARE 24-BIT RETURN ADDRESS
         STM   R14,R12,12(R13)     SAVE REGISTERS
         SLR   R7,R7
         IC    R7,PCXBITPP         GET BITS PER PIXEL
         ST    R7,PICOLRES         SAVE IT FOR DISPLAY ROUTINE
         ICM   R7,1,PCXBYTLN
         ICM   R7,2,PCXBYTLN+1     GET THE UNCOMPRESSED BYTES PER LINE
         LA    R1,7(,R7)
         SRL   R1,3
         SLL   R1,3                ROUND UP TO NEXT DOUBLEWORD
         LA    R0,@PCXWKLN(,R1)    GET THE WORKING STORAGE SIZE
         LR    R6,R0               COPY IT
         GETMAIN R,LV=(0)          ACQUIRE STORAGE
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1
         USING @PCXWORK,R13
         ST    R6,PCXWKLEN         SAVE THE GETMAIN SIZE
         MVC   PCXHDRWS,PCXHDR     COPY THE FILE HEADER
         DROP  R2                  PCXHDR
         USING PCXHDR,PCXHDRWS
         STH   R7,PCXBYTLN         DECODE BYTES PER LINE
         LA    R7,PCXSCNLN(R7)     POINT PAST DECODED SCAN LINE AREA
         ST    R7,PCXEOSCN         SAVE THE ADDRESS FOR COMPARISON
         LA    R0,4                DECODE 4 PICTURE BOUNDARY CO-ORDS
         LA    R15,PCXWINDW        POINT TO THE FIRST ONE
CO_ORDLP ICM   R7,1,0(R15)
         ICM   R7,2,1(R15)
         STH   R7,0(R15)
         LA    R15,2(,R15)         POINT TO NEXT CO-ORDINATE
         BCT   R0,CO_ORDLP
         LA    R6,1                GET UNCOMPRESSED PIXEL COUNT
         LR    R7,R6
         AH    R6,PCXXMAX
         AH    R7,PCXYMAX
         SH    R6,PCXXMIN
         SH    R7,PCXYMIN
         STM   R6,R7,X_Y_PELS      SAVE PICTURE DIMENSIONS
         ST    R7,LINES2GO
         MR    R6,R6
         ST    R7,PICPELCT
         LA    R0,7(,R7)
         SRL   R0,3
         SLL   R0,3                ROUND TO DOUBLEWORD MULTIPLE
         ST    R0,PICSTGSZ
         GETMAIN RU,LV=(0),SP=17,LOC=ANY
         ST    R1,HSEACTIV         SAVE ADDRESS FOR CLEAN-UP
         ST    R1,PELLDCSR         SAVE PIXEL LOAD CURSOR
         A     R1,PICSTGSZ         POINT PAST END OF PICTURE ARRAY
         ST    R1,PICENDAD         SAVE FOR DISPLAY ROUTINE
         MVI   PICCOLOR,X'F7'      START PICTURE DISPLAY IN NEUTRAL
         MVC   PCXPAL16,PCXCOLMP   COPY 16-COLOUR PALETTE
         L     R15,PCXEXPAD        POINT TO EXPANSION ROUTINE
         BSM   0,R15               INVOKE IT WITH 31-BIT ADDRESSING

PCXHDRST MVC   0(0,R8),0(R1)       <<< EXECUTED >>>
PCXREPIT MVC   1(0,R6),0(R6)       <<< EXECUTED >>>

PCXEXPND EQU   *                   31-BIT ROUTINE
         MVI   PCXRUNLN,0          PREPARE FOR USE
         L     R7,HOLDTOP          POINT TO FIRST RECORD DETAILS
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LA    R6,PCXSCNLN         POINT TO SCAN LINE EXPANSION AREA
         LA    R8,PCXHDR(R1)       POINT PAST LOADED PART OF HEADER
         LA    R0,128              GET THE HEADER LENGTH
         AR    R2,R0               POINT PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BP    LDPIXELS            FIRST RECORD HAS HEADER PLUS MORE
PCXHDRLP LPR   R15,R1              GET LENGTH OF REST OF HEADER
         L     R7,DIRNXT(,R7)      POINT TO SECOND RECORD DETAILS
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LR    R0,R15              COPY REMAINING HEADER LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LTR   R15,R15             WAS FIRST RECORD JUST COMPLETE HDR?
         BM    *+8                 YES, HAVE HDR BUT END OF 1ST RECORD
         EX    R15,PCXHDRST        LOAD REST OF PCX 128-BYTE HEADER
         AR    R8,R1               PREPARE FOR (VERY) SHORT 2ND RECORD
         AR    R2,R0               POINT PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BNP   PCXHDRLP            HANDLE EMBEDDED (VERY) SHORT RECORD

LDPIXELS MVI   PCXRUNLN+1,1        SET RUN-LENGTH COUNT TO ONE
         TM    0(R2),X'C0'         IS THIS A RUN-LENGTH COUNT?
         BNO   PELBYTOK            NO
         CLI   PCXMETHD,0          IS THIS FILE COMPRESSED?
         BE    PELBYTOK            NO
         MVC   PCXRUNLN+1(1),0(R2) YES, COPY RUN-LENGTH COUNT
         NI    PCXRUNLN+1,X'3F'    RESET FLAG BITS TO GET COUNT
         LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,PELBYTOK         ADJUST REMAINING BYTE COUNT
         LA    R15,PCXNXTRC        END OF RECORD REACHED
         BASSM R14,R15             GET THE NEXT RECORD
PELBYTOK MVC   0(1,R6),0(R2)       LOAD DATA BYTE
         LH    R15,PCXRUNLN        GET RUN-LENGTH
         LA    R0,2
         SR    R15,R0              GET REPETITION AND ALLOW FOR EXECUTE
         BM    *+8                 NO REPETITION FOR RUN-LENGTH OF 1
         EX    R15,PCXREPIT        PROPAGATE DATA BYTE
         AR    R15,R0              RESTORE RUN-LENGTH COUNT
         AR    R6,R15              POINT PAST LOADED DATA
         C     R6,PCXEOSCN         SCAN LINE FINISHED?
         BNL   SCANDALN            YES, HAVE NOW SCANNED A LINE
LDNEXTLN LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,LDPIXELS         ADJUST REMAINING BYTE COUNT
         LA    R15,PCXNXTRC        END OF RECORD REACHED
         BASSM R14,R15             GET THE NEXT RECORD
         B     LDPIXELS            GOT THE NEXT RECORD

PCXNXTRC EQU   *                   24-BIT ROUTINE
         C     R7,HOLDEND          END OF LAST CACHED RECORD?
         BE    PCXGETRC            YES, HAVE TO READ FROM FILE
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
PCXGOTRC LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LTR   R1,R1               END-OF-FILE?
         BM    PCXENDRC            YES, END OF DATA
         BZ    PCXNXTRC            DISCARD NULL RECORD
         BSM   0,R14               RETURN WITH 31-BIT ADDRESSING
PCXENDRC L     R14,EOPCXADR        END OF INPUT FILE DATA REACHED
         BSM   0,R14               PROCEED WITH 31-BIT ADDRESSING
PCXGETRC ST    R14,PCXSAVER        SAVE THE RETURN ADDRESS
         MVC   DOWNAMT,FW1         NEED TO READ ANOTHER RECORD
         STM   R5,R8,PCXSECSV      SAVE LOCAL STATUS
         BAL   R14,DOWNER          RETURNS WITH NEW HOLDEND IN R7
         LM    R5,R6,PCXSECSV      RESTORE LOCAL STATUS
         L     R8,PCXSECSV+12
         L     R14,PCXSAVER
         B     PCXGOTRC

SCANDALN STM   R1,R2,PCXSECSV      SAVE RECORD PROCESSING STATUS
         L     R8,PELLDCSR         LOAD PICTURE ARRAY CURSOR
         LA    R6,PCXSCNLN         POINT TO SCAN LINE EXPANSION AREA
         L     R0,X_PELS           GET PIXEL COUNT PER SCAN LINE
         SLR   R14,R14             CLEAR FOR DIVIDE
         LA    R15,32              GET BITS PER WORD
         SLR   R1,R1               CLEAR FOR INSERT
         IC    R1,PCXBITPP         GET BITS PER PEL
         DR    R14,R1              GET PELS PER WORD
         ST    R15,DOUBLE          SAVE PELS PER WORD
ARRAYLP1 L     R2,DOUBLE           LOAD PELS PER WORD
         L     R15,0(,R6)          LOAD SOME PIXEL DATA
         LA    R6,4(,R6)           POINT TO NEXT DATA TO LOAD
ARRAYLP2 SLR   R14,R14             CLEAR FOR SHIFT
         SLDL  R14,0(R1)           GET PIXEL BITS FOR AN ARRAY ELEMENT
         STC   R14,0(,R8)          SAVE IT INTO THE ARRAY
         LA    R8,1(,R8)           POINT TO NEXT ARRAY ELEMENT
         BCT   R0,ARRAYNX2         DECREMENT REMAINING WIDTH
         B     SCANXTLN            PREPARE TO PROCESS NEXT SCAN LINE
ARRAYNX2 BCT   R2,ARRAYLP2         PROCESS NEXT PIXEL BYTE
         B     ARRAYLP1            GET ANOTHER POET (WORD'S WORTH)
SCANXTLN ST    R8,PELLDCSR         SAVE PIXEL LOAD CURSOR
         LA    R6,PCXSCNLN         POINT TO SCAN LINE EXPANSION AREA
         LM    R1,R2,PCXSECSV      RESTORE RECORD PROCESSING STATUS
         L     R0,LINES2GO         DECREMENT REMAINING SCAN LINE COUNT
         BCTR  R0,0
         ST    R0,LINES2GO
         LTR   R0,R0               NEED MORE SCAN LINES?
         BP    LDNEXTLN            YES, EXPAND NEXT SCAN LINE
         CLI   PCXBITPP,8          256-COLOUR PICTURE?
         BNE   ENDOFPCX            NO, SKIP 256-COLOUR PALETTE SEARCH

         LA    R8,PCXPALET         POINT TO PALETTE HOLD AREA
         LA    R6,768(,R8)         POINT PAST PALETTE HOLD AREA
PCXCLOOP LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,PCXCTEST         ADJUST REMAINING BYTE COUNT
         LA    R15,PCXNXTRC        END OF RECORD REACHED
         BASSM R14,R15             GET THE NEXT RECORD
PCXCTEST CLI   0(R2),12            256-COLOUR PALETTE FLAG?
         BNE   PCXCLOOP            NO, BUT KEEP LOOKING FOR IT
PCXPALLP LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,PCXLDPAL         ADJUST REMAINING BYTE COUNT
         LA    R15,PCXNXTRC        END OF RECORD REACHED
         BASSM R14,R15             GET THE NEXT RECORD
PCXLDPAL MVC   0(1,R8),0(R2)       COPY A PALETTE BYTE
         LA    R8,1(,R8)           INCREMENT HOLD AREA CURSOR
         CR    R8,R6               PALETTE LOAD NOW COMPLETE?
         BL    PCXPALLP            NO, KEEP LOADING COLOUR PALETTE

ENDOFPCX CLI   PCXBITPP,1          BLACK-AND-WHITE PICTURE?
         BE    PCXCOLRD            YES, ASSUME PALETTE NOT NEEDED

         SLR   R0,R0               CLEAR BIT ACCUMULATOR
         LA    R1,3                GET BYTE COUNT PER PALETTE COLOUR
         LA    R6,PCXPALET         POINT TO COLOUR PALETTE
         L     R7,PICPELCT         GET THE NUMBER OF PIXELS
         L     R8,HSEACTIV         POINT TO PIXEL BYTE ARRAY STORAGE
PCXCLRLP SLR   R15,R15             CLEAR FOR INSERT
         IC    R15,0(,R8)          LOAD PALETTE COLOUR INDEX
         MR    R14,R1              CONVERT TO PALETTE STORAGE INDEX
         LA    R15,0(R15,R6)       POINT TO PALETTE ENTRY
         IC    R0,1(,R15)          LOAD GREEN LEVEL
         SLL   R0,1                KEEP HIGH BIT
         IC    R0,0(,R15)          LOAD RED LEVEL
         SLL   R0,1                KEEP HIGH BIT
         IC    R0,2(,R15)          LOAD BLUE LEVEL
         SRL   R0,7                KEEP HIGH BITS
         STC   R0,0(,R8)           OVERLAY INDEX WITH 3270 GRB FLAGS
         LA    R8,1(,R8)           POINT TO NEXT PIXEL ARRAY ELEMENT
         BCT   R7,PCXCLRLP         CONTINUE CONVERSION TO 3270 COLOUR

PCXCOLRD SLR   R0,R0               FIND PICTURE DISPLAY POSITION
         L     R1,X_PELS           LOAD PICTURE HORIZONTAL PEL COUNT
         LA    R15,9               GET PELS PER BYTE WIDTH
         AR    R1,R15
         BCTR  R1,0                ROUND UP TO NEXT INTEGRAL BYTE
         DR    R0,R15              GET PICTURE WIDTH IN BYTES
         STH   R1,X_BYTES          SAVE IT
         L     R0,SCRNCOLS         GET SCREEN COLUMN COUNT
         SR    R0,R1               GET COLUMN COUNT UNUSED BY PICTURE
         SRA   R0,1                HALVE IT
         BNP   *+8                 LEAVE OFFSET 0 IF PCX NOT NARROWER
         STH   R0,X_OFFSET         SAVE OFFSET FOR DISPLAY ROUTINE
         L     R1,Y_PELS           LOAD PICTURE VERTICAL PEL COUNT
         LA    R1,15(,R1)          ROUND UP TO NEXT INTEGRAL BYTE
         SRL   R1,4                GET PICTURE HEIGHT IN BYTES
         STH   R1,Y_BYTES          SAVE IT
         LA    R0,1
         AH    R0,PAGESIZE         GET MAXIMUM PICTURE ROW COUNT
         SR    R0,R1               GET ROW COUNT UNUSED BY PICTURE
         SRA   R0,1                HALVE IT
         BNP   *+8                 LEAVE OFFSET 0 IF PCX NOT SHORTER
         STH   R0,Y_OFFSET         SAVE OFFSET FOR DISPLAY ROUTINE
         LH    R1,X_BYTES
         MH    R1,Y_BYTES          GET TOTAL PICTURE LOCATION COUNT
         ST    R1,X_Y_SYMS         SAVE NEEDED SYMBOL COUNT

         L     R0,PCXWKLEN         GET WORK AREA LENGTH
         LR    R1,R13              GET WORK AREA ADDRESS
         DROP  R13                 @PCXWORK
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE LOCAL WORK AREA STORAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BSM   0,R14               RETURN WITH 24-BIT ADDRESSING

PCXEXPAD DC    A(PCXEXPND+X'80000000')
EOPCXADR DC    A(ENDOFPCX+X'80000000')

         LTORG
         DS    0H


**********************************************************************
*                                                          *         *
*         INVOKE PROGRAM PRODUCT TO UNZIP FILE             *  GP@P6  *
*                                                          *  10/99  *
**********************************************************************

         USING UNZIPFIL,R5
UNZIPFIL DS    0H
         STM   R14,R12,12(R13)     SAVE REGISTERS

*         DETERMINE IF A ZIPPED FILE WAS SELECTED

         LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    UNZFLNOP            NO, NOTHING TO DO HERE
         SLR   R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         L     R7,HOLDTOP          GET TOP-OF-SCREEN RECORD DETAILS
         SH    R1,HW4              GET RELATIVE SCREEN DATA LINE NUMBER
         BZ    UNZCSRLN            THE TOP DATA LINE WAS SELECTED
UNZCSRLP C     R7,HOLDEND          END OF DATA LINES?
         BE    UNZFLNOP            YES, CURSOR WAS BELOW DATA
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT HOLD ENTRY
         BCT   R1,UNZCSRLP
UNZCSRLN L     R2,DIRREC(,R7)      GET RECORD ADDRESS
         L     R7,DIRLEN(,R7)      GET RECORD LENGTH
         LA    R0,RZDEFIXL         GET DATA LENGTH BEFORE FILE NAME
         SR    R7,R0               IS THE FETCHED RECORD LONG ENOUGH?
         BP    UNZPFILE            YES, PROCESS UNZIP REQUEST
UNZFLNOP LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R5,PROMPT           GET RETURN ADDRESS
         BSM   0,R5                ENSURE 24-BIT ADDRESSING

*         ACQUIRE WORKING STORAGE

UNZPFILE LA    R0,@UNZWKLN
         GETMAIN R,LV=(0)          GET WORKING STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @UNZWORK,R13

*         DETERMINE SELECTED FILE

         USING RZDE,R2
         STH   R7,UNZSELEN         SAVE THE FILE NAME LENGTH
         BCTR  R7,0                DECREMENT FOR EXECUTE
UNZSELLD MVC   UNZSELNM(0),RZDEFNM <<< EXECUTED >>>
         EX    R7,UNZSELLD         LOAD THE TARGET FILE NAME
         ZAP   DOUBLE,RZDESIZE     COPY THE FILE'S FULL SIZE
         DROP  R2                  RZDE
         CVB   R1,DOUBLE           GET FILE SIZE IN BINARY
         SLR   R0,R0               CLEAR FOR DIVIDE
         LA    R15,80
         DR    R0,R15
         LTR   R0,R0               IS FILE SIZE A MULTIPLE OF 80?
         BNZ   UNZPLINT            NO, DO NOT TRY TOO HARD TO FIT
         OI    STATUS10,UZ80       YES, REMEMBER "CARD-IMAGENESS"
         CP    DOUBLE,=P'28000000' SIZE BIGGER THAN 28 MILLION?
         BH    UNZPLINT            YES, FORGET ABOUT TRYING TO FIT
         LA    R15,88              YES, GET DIV SIZE PER RECORD
         MR    R0,R15              GET TOTAL DIV SIZE NEEDED TO FIT
         LA    R1,4095(,R1)
         SRL   R1,10               ROUND UP TO NEXT PAGE BOUNDARY
         SLL   R1,10
         ST    R1,DIVSZREQ         SAVE REQUIRED SIZE

*         INITIALIZE PARAMETER LISTS

UNZPLINT LA    R0,UNZTOKEN
         ST    R0,UNZPARM1         PRODUCT TOKEN
         ST    R0,UNZPARM2
         LA    R0,UNZFNCTN
         ST    R0,UNZPARM1+4       FUNCTION CODE
         ST    R0,UNZPARM2+4
         LA    R0,UNZMSGBF
         ST    R0,UNZPARM1+8       MESSAGE BUFFER
         ST    R0,UNZPARM2+8
         LA    R0,$DDNAME
         ST    R0,UNZPARM1+12      DDNAME OF ZIP FILE
         LA    R0,UNZSELEN
         ST    R0,UNZPARM1+16      FILE NAME SELECTION MASK(S)
         LA    R0,UNZFLAGS
         ST    R0,UNZPARM1+20      PROCESSING CONTROL FLAGS
         LA    R0,UNZFILEN
         ST    R0,UNZPARM1+24      SELECTED FILE NAME
         SLR   R0,R0
         ST    R0,UNZPARM1+28      DEFAULT TRANSLATE TABLE
         LA    R0,DOUBLE
         ST    R0,UNZPARM1+32      DATE-TIME STAMP
*        LA    R0,PERIODS+C' '
         SLR   R0,R0               DO NOT UNNECESSARILY EXTEND RECORD
         ST    R0,UNZPARM1+36      FILL CHARACTER
         OI    UNZPARM2+36,X'80'   FLAG LAST PARAMETER IN LIST
         LA    R0,UNZRECAD
         ST    R0,UNZPARM2+12      RECORD ADDRESS
         LA    R0,UNZRECLN
         ST    R0,UNZPARM2+16      RECORD LENGTH
         OI    UNZPARM2+16,X'80'   FLAG LAST PARAMETER IN LIST

*         FREE ZIP DIRECTORY RELATED STORAGE AND ACQUIRE NEW "DIV" AREA

         LA    R0,16               GET ENTRY CODE (FREEMAIN)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         NI    STATUS8,255-ZIPD    NO GOING BACK NOW
         NI    MODE,255-FMTSW      DISABLE FORMATTING
         L     R1,FMTAREA          GET FORMATTING DYNAMIC AREA ADDRESS
         USING @FMTAREA,R1
         L     R0,FMTSIZE          GET FORMAT AREA SUBPOOL AND SIZE
         DROP  R1                  @FMTAREA
         FREEMAIN R,A=(1),LV=(0)   FREE THE FORMATTING DYNAMIC AREA
         SLR   R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         ST    R0,FMTAREA          FLAG NO FORMATTING STORAGE
         L     R15,DIVADDR2        LOAD "DIV" ENTRY POINT
         BASSM R14,R15             EXECUTE REVDIV IN AMODE-31
         LTR   R15,R15             SUCCESS?
         BZ    UNZIPOPN            YES
         LA    R1,=CL35'"REVIEW" STORAGE FOR DATA EXHAUSTED'
         LA    R0,35               NO
UNZFERRX TPUT  (1),(0),R           ISSUE ERROR MESSAGE
         MVI   DATAKV+1,1          PRETEND 'DATA' WAS SPECIFIED
UNZIPNIL LA    R14,ENDZIP          PROCESS DASD FILE AFRESH
         BSM   0,R14               ENSURE 24-BIT ADDRESSING

*         OPEN ZIP FILE FOR DECOMPRESSION

UNZIPOPN SLR   R0,R0
         ST    R0,COUNT            RESET READ RECORD COUNT
         ST    R0,UNZTOKEN         RESET TOKEN
         LA    R0,4
         ST    R0,UNZFNCTN         SET DECOMPRESSION FUNCTION
         LA    R0,L'UNZFILNM
         STH   R0,UNZFILEN         SET MAXIMUM FILE NAME LENGTH
         LA    R0,UNZREC
         ST    R0,UNZRECAD         SET RECORD BUFFER ADDRESS
         MVI   UNZFLAGS,UNZASCII+UNZCRLF
         CLI   UNZSELNM,0          NULL FILE NAME?
         BE    UNZBINFL            YES, BETTER NOT TRANSLATE DATA
         LH    R1,UNZSELEN         GET THE FILE NAME LENGTH
         SH    R1,HW4              SUBTRACT LENGTH OF .EXT
         BNP   UNZFLGOK            NAME TOO SHORT TO CHECK
         LA    R1,UNZSELNM(R1)     POINT TO EXTENSION
         MVC   DOUBLE(4),0(R1)     COPY EXTENSION
         OC    DOUBLE(4),BLANKS    FOLD TO UPPER CASE
         CLC   =C'MIT',DOUBLE+1    TSO/E TRANSMIT FILE?
         BE    UNZBINFL            YES
         CLC   =C'XMI',DOUBLE+1    TSO/E TRANSMIT FILE?
         BE    UNZBINFL            YES
         CLC   =C'OBJ',DOUBLE+1    OBJECT CODE?
         BE    UNZBINFL            YES
         CLC   =C'ZIP',DOUBLE+1    EMBEDDED ZIP FILE?
         BE    UNZBINFL            YES
         CLC   =C'BIN',DOUBLE+1    BINARY FILE?
         BE    UNZBINFL            YES
         NI    STATUS10,255-UZ80   ASSUME MULTIPLE OF 80 IS COINCIDENCE
         B     UNZFLGOK
UNZBINFL MVI   UNZFLAGS,0          YES, AVOID TRANSLATION
UNZFLGOK LA    R0,L'UNZMSGBF-2
         STH   R0,UNZMSGBF         SET MESSAGE BUFFER LENGTH
         LA    R1,UNZPARM1         POINT TO THE PARAMETER LIST
         L     R15,UNZIPROD        GET UNZIP ROUTINE ENTRY POINT
         BALR  R14,R15             CALL IT
         LTR   R15,R15             SUCCESS?
         BZ    UNZFOPEN            YES, THE FILE WAS FOUND
         LA    R1,UNZMSGBF+2
         LH    R0,UNZMSGBF
         CH    R15,HW8
         BH    UNZFERRX
         LA    R1,=CL30'SELECTED FILE NOT FOUND IN ZIP'
         LA    R0,30
         TPUT  (1),(0),R
         B     UNZCLOSE

UNZFOPEN MVI   UNZFNCTN+3,8        SET DATA FUNCTION
         MVI   SYNADSW,0           RESET I/O ERROR FLAG

*         UNZIP A RECORD AND STORE IT

UNZFLGET LA    R0,80               GET WIDTH FOR BINARY
         TM    UNZFLAGS,UNZASCII+UNZCRLF
         BNO   *+8
         LA    R0,256              GET RECORD BUFFER SIZE
         CH    R0,RECSIZE          ARE HOLD AREAS LARGE ENOUGH?
         BNH   *+8                 YES
         LH    R0,RECSIZE          NO, REDUCE TO MAXIMUM
         ST    R0,UNZRECLN         SET THE MAXIMUM RECORD LENGTH
         LA    R0,L'UNZMSGBF-2
         STH   R0,UNZMSGBF         SET MESSAGE BUFFER LENGTH
         LA    R1,UNZPARM2         POINT TO THE PARAMETER LIST
         L     R15,UNZIPROD        GET UNZIP ROUTINE ENTRY POINT
         BALR  R14,R15             CALL IT
         CH    R15,HW4             SUCCESS?
         BH    UNZFLEND            NO, END-OF-FILE REACHED
         LA    R2,UNZREC           GET RECORD ADDRESS
         L     R1,UNZRECLN         GET RECORD LENGTH
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS EXPECTED?
         BZ    UNZPFDIV            NO
         TM    STATUS10,UZ80       FORCING FIXED-LENGTH RECORDS?
         BO    UNZPFDIV            YES
         LA    R2,UNZRECLN         POINT TO "RDW"
         LA    R1,4(,R1)           ADD RDW LENGTH TO RECORD LENGTH
         STH   R1,UNZRECLN         SUPPLY RECORD LENGTH
         STCM  R1,12,UNZRECLN+2    CLEAR REST OF "RDW"
UNZPFDIV LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         LTR   R15,R15             WAS THERE ROOM TO STORE IT?
         BNZ   UNZFLEOD            NO
         LA    R0,1
         A     R0,COUNT            INCREMENT RECORD COUNT
         ST    R0,COUNT
         B     UNZFLGET            PROCESS NEXT ZIPPED DATA RECORD

*         HANDLE END OF ZIP DATA

UNZFLEOD MVI   SYNADSW,X'F0'       SIMULATE I/O ERROR
         MVC   SYNADMSG,SSEOFMSG   LOAD INFORMATIVE MESSAGE
         B     UNZFLEOF

UNZFLEND CH    R15,HW8             NORMAL END-OF-FILE?
         BNH   UNZFLEOF            YES
         MVI   SYNADSW,X'F0'       SIMULATE I/O ERROR
         MVC   SYNADMSG,UNZMSGBF+2 LOAD INFORMATIVE MESSAGE

UNZFLEOF SLR   R1,R1
         BCTR  R1,0                FLAG E-O-F
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         L     R15,CHKPTTOP
         XC    0(4,R15),0(R15)     INDICATE NON-EMPTY DATA SET
         LA    R15,CHKPTLN(,R15)
         ST    R1,0(,R15)          INDICATE HAVE READ E-O-F
         ST    R15,CHKPTBOT

*         CLOSE THE ZIP FILE

UNZCLOSE MVI   UNZFNCTN+3,12       SET CLOSE FUNCTION
         LA    R0,L'UNZMSGBF-2
         STH   R0,UNZMSGBF         SET MESSAGE BUFFER LENGTH
         OI    UNZPARM2+8,X'80'    FLAG LAST PARAMETER IN LIST
         LA    R1,UNZPARM2         POINT TO THE PARAMETER LIST
         L     R15,UNZIPROD        GET UNZIP ROUTINE ENTRY POINT
         BALR  R14,R15             CALL IT

*         RESUME DATA REVIEW - BUT NOW REVIEW UNZIPPED DATA

         OI    STATUS8,ZIPF        FLAG FILE HAS BEEN UNZIPPED
         MVC   DSNAIM(46),UNZFILEN SHOW NAME OF ZIPPED FILE
         TR    DSNAIM+2(44),EDITT  HANDLE BAD FILE NAME CHARACTERS
         LA    R0,@ZIPWKLN         GET DYNAMIC AREA SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE DYNAMIC AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SLR   R14,R14
         C     R14,COUNT           ANY DATA UNZIPPED?
         BE    UNZIPNIL            NO, DO NOT ATTEMPT TO SHOW IT
         ST    R14,COUNT           SHOW FROM FIRST ENTRY
         STH   R14,OFFSET          SHOW FROM FIRST COLUMN
         TM    STATUS10,UZ80       FORCING FIXED-LENGTH RECORDS?
         BZ    *+8                 NO
         MVI   TSTRECFM,X'90'      YES, BEHAVE AS IF RECFM=FB
         LA    R14,NEWNAME         UPDATE DISPLAY WITH ZIP CONTENTS
         BSM   0,R14               ENSURE 24-BIT ADDRESSING

         DROP  R5,R13              UNZIPFIL, @UNZWORK

         LTORG

         DS    0H

**********************************************************************
*                                                          *         *
*         ZIP FILE DIRECTORY HANDLER                       *  GP@P6  *
*                                                          *  09/99  *
**********************************************************************

         USING UNZIPDIR,R5
UNZIPDIR DS    0H
         LR    R15,R2              COPY RECORD ADDRESS
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS?
         BZ    *+8                 NO
         LA    R15,4(,R2)          POINT PAST RDW TO DATA
         CLC   =X'504B0304',0(R15) PKZIP FILE?
         BNE   HILLFILE            NO
         ICM   R15,15,$UCBAD       TALKING TO PHYSICAL DEVICE?
         BZ    HILLFILE            NO
         CLI   18(R15),X'20'       DASD?
         BNE   HILLFILE            NO
         TM    MYDSCB-44+82,X'40'  DSORG = PS?
         BZ    HILLFILE            NO
         SLR   R0,R0
         ICM   R0,7,MYDSCB-44+98   EMPTY ACCORDING TO VTOC?
         BZ    HILLFILE            YES, DS1LSTAR IS ZERO

         STM   R14,R12,12(R13)     PROCEED, SAVE REGISTERS
         SRL   R0,8                GET LAST RELATIVE TRACK
         CH    R0,=H'3'            DOES FILE FIT INTO 4 TRACKS?
         BNH   UNZIPTOK            YES, NO NEED TO POINT LATER
         SH    R0,=H'3'            NO, POINT TO FOURTH LAST TRACK
         STH   R0,TTR              SET FOURTH LAST RELATIVE TRACK
         MVI   TTR+2,1             SET FIRST BLOCK ON THIS TRACK
UNZIPTOK LA    R0,@ZIPWKLN         GET DYNAMIC AREA SIZE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R2,R13              SAVE OLD ADDRESS
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @ZIPWORK,R13
         LA    R0,256              ALLOW UP TO 64K PER TRACK
         SLL   R0,10
         ST    R0,ZIPBFLEN         USE 256K BUFFER
         GETMAIN RU,LV=(0),LOC=ANY
         ST    R1,ZIPBFADR
         ST    R1,ZIPBFHWM
         LM    R1,R2,24(R2)        RESTORE FIRST RECORD DETAILS
         ICM   R0,3,TTR            GOING TO USE FIRST BLOCK?
         BZ    UNZIPGOT            YES, PROCESS FIRST RECORD
         POINT (R4),TTR            NO, POINT TO FIRST DESIRED BLOCK
         XC    DEBLOCKS(12),DEBLOCKS   ENSURE NEW BLOCK IS READ

UNZIPGET LR    R7,R5               SAVE LOCAL BASE REGISTER
         BAL   R14,GET             GET A RECORD FROM THE ZIP FILE
         LR    R5,R7               RESTORE LOCAL BASE REGISTER
         CLI   SYNADSW,X'FF'       I/O ERROR?
         BE    UNZIOERX            YES, ISSUE MESSAGE AND EXIT
         LTR   R1,R1               END-OF-FILE?
         BM    UNZIPEOF            YES, STOP READING RECORDS
         BZ    UNZIPGET            IGNORE NULL RECORD
UNZIPGOT L     R15,UNZADADR        POINT TO ACCUMULATE ROUTINE
         BASSM R14,R15             ADD THIS RECORD
         B     UNZIPGET            GO GET NEXT RECORD

UNZIOERX LA    R1,SYNADMSG         GET I/O ERROR MESSAGE ADDRESS
         LA    R0,L'SYNADMSG       GET I/O ERROR MESSAGE LENGTH
UNZIPERX TPUT  (1),(0),R           SHOW ERROR MESSAGE
         LM    R0,R1,ZIPBFLEN      LOAD ZIP DIRECTORY BUFFER DETAILS
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
         LA    R0,@ZIPWKLN         GET DYNAMIC AREA SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE DYNAMIC AREA
         MVI   SYNADSW,0           CLEAR I/O ERROR FLAG
         MVI   DATAKV+1,1          PRETEND 'DATA' WAS SPECIFIED
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         L     R15,=A(NEWTOP)      RESTART SHOWING RAW DATA
         BSM   0,R15               ENSURE 24-BIT ADDRESSING

UNZIPADD LR    R0,R2               COPY RECORD ADDRESS
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS?
         BZ    UNZIPVOK            NO
         LA    R15,4               YES, GET RDW LENGTH
         AR    R0,R15              POINT PAST RDW
         SR    R1,R15              REDUCE LENGTH
UNZIPVOK L     R6,ZIPBFHWM         POINT TO TARGET ADDRESS
         LR    R7,R1               TARGET LENGTH EQUALS SOURCE LENGTH
         MVCL  R6,R0               APPEND THIS RECORD'S DATA
         ST    R6,ZIPBFHWM         UPDATE ZIP DIRECTORY BUFFER H-W-M
         BSM   0,R14               RETURN TO CALLER

UNZIPEOF LA    R0,1
         SLL   R0,31               SET SIGN BIT
         LA    R15,UNZIPCNT
         OR    R15,R0
         BSM   0,R15               SET 31-BIT ADDRESSING
UNZIPCNT L     R8,ZIPBFHWM         POINT PAST END OF ZIP FILE DATA
         LA    R0,ZEOCMNLN         GET MINIMUM TRAILER RECORD LENGTH
         SR    R8,R0               BACK UP TO LATEST TRAILER START
         LR    R0,R8               COPY THIS ADDRESS
         S     R0,ZIPBFADR         GET PRE-TRAILER CACHE SIZE
         USING ZEOC,R8
UNZEOCLP CLC   =X'504B0506',ZEOCID END OF CENTRAL DIRECTORY SIGNATURE?
         BE    UNZEOCOK            YES, FOUND DIRECTORY TRAILER
         BCTR  R8,0                NO, BACK UP A BYTE (COMMENT PRESENT)
         BCT   R0,UNZEOCLP         CONTINUE SEARCH
         LA    R1,=CL43'CANNOT FIND END-OF-CENTRAL-DIRECTORY RECORD'
         LA    R0,43
         B     UNZIPERX            ABORT ZIP FILE INTERPRETATION
UNZEOCOK ICM   R7,1,ZEOCCDSZ       GET CENTRAL DIRECTORY SIZE
         ICM   R7,2,ZEOCCDSZ+1
         ICM   R7,4,ZEOCCDSZ+2
         ICM   R7,8,ZEOCCDSZ+3
         CLR   R7,R0               IS IT ALL CACHED?
         BNH   ZFCDSZOK            YES, ZIP FILE CENTRAL DIR SIZE OKAY
         LA    R1,=CL43'CENTRAL DIRECTORY SIZE TOO BIG FOR "REVIEW"'
         LA    R0,43
         B     UNZIPERX            ABORT ZIP FILE INTERPRETATION
UNZEMPTY LA    R1,=CL17'ZIP FILE IS EMPTY'
         LA    R0,17
         B     UNZIPERX            ABORT ZIP FILE INTERPRETATION
UNZNODIR LA    R1,=CL41'CANNOT FIND FIRST CENTRAL DIRECTORY ENTRY'
         LA    R0,41
         B     UNZIPERX            ABORT ZIP FILE INTERPRETATION
ZFCDSZOK LTR   R7,R7               NON-ZERO CENTRAL DIRECTORY SIZE?
         BZ    UNZEMPTY            NO, ZIP FILE MUST BE EMPTY
         SLR   R6,R6
         ICM   R6,1,ZEOCENTT       GET CENTRAL DIRECTORY ENTRY COUNT
         ICM   R6,2,ZEOCENTT+1
         LTR   R6,R6               ANY ENTRIES?
         BZ    UNZEMPTY            NO, ZIP FILE MUST BE EMPTY
         DROP  R8                  ZEOC
         SR    R8,R7               POINT TO CENTRAL DIRECTORY START
         USING ZCFH,R8
         CLC   =X'504B0102',ZCFHID CENTRAL DIRECTORY ENTRY SIGNATURE?
         BNE   UNZNODIR            NO, CANNOT FIND FIRST ENTRY
         SLR   R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         ST    R0,TTR              CLEAR LOCATION DATA
         L     R15,DIVADDR2        LOAD "DIV" ENTRY POINT
         BASSM R14,R15             EXECUTE REVDIV IN AMODE-31
         LTR   R15,R15             SUCCESS?
         BZ    UNZDIVOK            YES
         LA    R1,=CL35'"REVIEW" STORAGE FOR DATA EXHAUSTED'
         LA    R0,35               NO
         B     UNZIPERX            TERMINATE ZIP PROCESSING
UNZDIVOK OI    STATUS8,ZIPD        FLAG STORE METHOD TO REVDIV
         USING RZDE,R2
ZSTORELP L     R2,BLOCKPTR         POINT TO RECORD WORK AREA
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS EXPECTED?
         BZ    *+8                 NO
         LA    R2,4(,R2)           YES, LEAVE ROOM FOR DESCRIPTOR WORD
         CLC   =X'504B0102',ZCFHID CENTRAL DIRECTORY ENTRY SIGNATURE?
         BNE   UNZBADID            NO, END ZIP ENTRY FORMATTING
         SLR   R1,R1               LOAD ZIP INTERNAL DIRECTORY ENTRY
         IC    R1,ZCFHVER          GET ZIP VERSION USED FOR COMPRESSION
         CVD   R1,DOUBLE
         MVC   RZDEVER,=X'40212020'
         ED    RZDEVER,DOUBLE+6
         MVC   RZDEVER(2),RZDEVER+1
         MVI   RZDEVER+2,C'.'
         IC    R1,ZCFHOSFS         LOAD OPERATING SYSTEM FILE SYSTEM
         LA    R0,ZFSMAX
         CR    R1,R0               VALUE TOO LARGE?
         BNH   UNZFSOK             NO
         LR    R1,R0               YES, REDUCE TO MAXIMUM
UNZFSOK  SLL   R1,2                MULTIPLY BY FOUR FOR INDEX
         LA    R1,ZFS(R1)
         MVC   RZDEOSFS,0(R1)
         SLR   R1,R1
         ICM   R1,1,ZCFHMETH       FORMAT COMPRESSION METHOD
         ICM   R1,2,ZCFHMETH+1
         LA    R0,ZMETHMAX
         CR    R1,R0               KNOWN METHOD?
         BL    ZMETHKNO            YES
         CVD   R1,DOUBLE           NO
         OI    DOUBLE+7,X'0F'
         UNPK  RZDEMETH,DOUBLE     LOAD METHOD NUMBER
         MVI   RZDEMETH,C'U'       INDICATE UNKNOWN
         B     ZMETHOK
ZMETHKNO SLL   R1,2                MULTIPLY BY FOUR FOR INDEX
         LA    R1,ZMETH(R1)
         MVC   RZDEMETH,0(R1)
         CLI   ZCFHMETH,6          IMPLODED?
         BE    ZMETH6              YES
         CLI   ZCFHMETH,8          DEFLATED?
         BE    ZMETH8              YES
         B     ZMETHOK
ZMETH6   TM    ZCFHFLG1,ZIDICT8K   8K SLIDING DICTIONARY USED?
         BZ    Z6DICTOK            NO, 4K SLIDING DICTIONARY
         MVI   RZDEMETH+1,C'8'     YES
Z6DICTOK TM    ZCFHFLG1,ZI3SFTRE   3 SHANNON-FANO TREES USED?
         BZ    ZMETHOK             NO, 2 SHANNON-FANO TREES
         MVI   RZDEMETH+3,C'3'     YES
         B     ZMETHOK
ZMETH8   IC    R1,ZCFHFLG1
         SLL   R1,29
         SRL   R1,30
         LA    R1,Z8TYPE(R1)
         MVC   RZDEMETH+3(1),0(R1)
ZMETHOK  ICM   R15,1,ZCFHSZUN      GET UNCOMPRESSED FILE SIZE
         ICM   R15,2,ZCFHSZUN+1
         ICM   R15,4,ZCFHSZUN+2
         ICM   R15,8,ZCFHSZUN+3
         CVD   R15,DOUBLE          CONVERT SIZE TO DECIMAL FOR DISPLAY
         ZAP   RZDESIZE,DOUBLE
         ICM   R0,1,ZCFHSZCM       GET COMPRESSED FILE SIZE
         ICM   R0,2,ZCFHSZCM+1
         ICM   R0,4,ZCFHSZCM+2
         ICM   R0,8,ZCFHSZCM+3
         CVD   R0,DOUBLE           CONVERT SIZE TO DECIMAL FOR DISPLAY
         ZAP   RZDEPACK,DOUBLE
         MVC   RZDERDUC,=C' N/A'
         LTR   R1,R15              ZERO BYTES?
         BNP   ZREDUCOK            YES, AVOID S0C9
         MVC   RZDERDUC,=C' < 0'
         SR    R1,R0               GET BYTE COUNT REDUCTION
         BM    ZREDUCOK            FILE GOT BIGGER
         M     R0,=F'100'          PREPARE FOR PERCENTAGE
         DR    R0,R15
         CVD   R1,DOUBLE
         MVC   RZDERDUC,=X'40202120'
         ED    RZDERDUC,DOUBLE+6
         MVC   RZDERDUC(3),RZDERDUC+1
         MVI   RZDERDUC+3,C'%'
ZREDUCOK SLR   R1,R1
         ICM   R1,1,ZCFHDATE       LOAD MODIFICATION DATE
         ICM   R1,2,ZCFHDATE+1
         LR    R0,R1               COPY MODIFICATION DATE
         SLL   R0,27
         SRL   R0,27               GET DAY (5 BITS)
         LA    R15,RZDEDATE+6      POINT TO DISPLAY AREA
         BAL   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDEDATE+5,C'/'
         LR    R0,R1               COPY MODIFICATION DATE
         SLL   R0,23
         SRL   R0,28               GET MONTH (4 BITS)
         LA    R15,RZDEDATE+3      POINT TO DISPLAY AREA
         BAL   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDEDATE+2,C'/'
         SRL   R1,9                GET YEAR (7 BITS)
         LA    R0,80(,R1)          ADJUST FOR BASE OF 1980
         LA    R15,RZDEDATE        POINT TO DISPLAY AREA
         BAL   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDETPAD,C' '
         ICM   R0,1,ZCFHTIME       LOAD MODIFICATION TIME
         ICM   R0,2,ZCFHTIME+1
         SRDL  R0,11               GET HOUR (5 BITS)
         LA    R15,RZDEHOUR        POINT TO DISPLAY AREA
         BAL   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDETSEP,C':'
         SLR   R0,R0
         SLDL  R0,6                GET MINUTE (6 BITS)
         LA    R15,RZDEMINS        POINT TO DISPLAY AREA
         BAL   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDETYPE,C'E'       PREPARE FOR EBCDIC TEXT FILE
         TM    ZCFHINAT,ZCFHEBCD   EBCDIC FILE?
         BO    UNZTYPOK            YES
         MVI   RZDETYPE,C'A'       PREPARE FOR ASCII TEXT FILE
         TM    ZCFHINAT,ZCFHASCI   ASCII FILE?
         BO    UNZTYPOK            YES
         MVI   RZDETYPE,C'B'       DENOTE BINARY FILE
UNZTYPOK TM    ZCFHFLG1,ZENCRYPT   IS THE FILE ENCRYPTED?
         BO    *+8                 YES, LEAVE TYPE IN UPPER CASE
         XI    RZDETYPE,X'40'      NO, CHANGE TYPE TO LOWER CASE
         ICM   R0,3,ZCFHXFLN       IS THERE AN EXTRA FIELD PRESENT?
         BZ    UNZXLCHK            NO
         MVI   RZDEXTRA,X'A7'      YES, DENOTE THIS
         TM    ZCFHFLG1,ZDATADSC   EXTENDED LOCAL HEADER PRESENT?
         BZ    UNZEXTOK            NO
         MVI   RZDEXTRA,C'X'       YES, DENOTE THIS
         B     UNZEXTOK
UNZXLCHK MVI   RZDEXTRA,C'-'       PREPARE FOR NO EXTRA FIELDS
         TM    ZCFHFLG1,ZDATADSC   EXTENDED LOCAL HEADER PRESENT?
         BZ    UNZEXTOK            NO
         MVI   RZDEXTRA,X'93'      YES, DENOTE THIS
UNZEXTOK SLR   R7,R7
         ICM   R7,1,ZCFHNMLN       LOAD FILE NAME LENGTH
         ICM   R7,2,ZCFHNMLN+1
         LTR   R1,R7               COPY IT
         BZ    UNZNAMOK            SKIP FORMATTING IF ZERO LENGTH
         LA    R0,256              GET THE MAXIMUM LENGTH
         CR    R1,R0               NAME TOO LONG TO FIT?
         BNH   *+6                 NO  (HOPE 256 NOT BIGGER THAN BLKSI)
         LR    R1,R0               YES, REDUCE TO MAXIMUM
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,ZFNMLOAD         LOAD THE FILE NAME
         LA    R1,RZDEFNM          POINT TO FILE NAME
         LR    R0,R7               GET LENGTH OF FILE NAME
         XLATE (1),(0),TO=E        TRANSLATE FILE NAME INTO EBCDIC
UNZNAMOK SLR   R1,R1
         ICM   R1,1,ZCFHXFLN       LOAD EXTRA FIELD LENGTH
         ICM   R1,2,ZCFHXFLN+1
         SLR   R0,R0
         ICM   R0,1,ZCFHCMLN       LOAD COMMENT LENGTH
         ICM   R0,2,ZCFHCMLN+1
         AR    R1,R0
         AR    R1,R7               GET LENGTH OF ALL VARIABLE FIELDS
         LA    R8,ZCFHNAME(R1)     POINT TO NEXT CENTRAL FILE HEADER
         LA    R1,RZDEFIXL(,R7)    GET RECORD LENGTH
         CH    R1,RECSIZE          DATA LONGER THAN LRECL?
         BNH   *+8                 NO
         LH    R1,RECSIZE          YES, REDUCE TO MAXIMUM DISPLAYABLE
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS EXPECTED?
         BZ    UNZPDDIV            NO
         L     R2,BLOCKPTR         YES, POINT TO "RDW"
         LA    R1,4(,R1)           ADD RDW LENGTH TO RECORD LENGTH
         STH   R1,0(,R2)           SUPPLY RECORD LENGTH
UNZPDDIV LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         LTR   R15,R15             WAS THERE ROOM TO STORE IT?
         BNZ   UNZIPFUL            NO
         LA    R0,1
         A     R0,COUNT            INCREMENT RECORD COUNT
         ST    R0,COUNT
         BCT   R6,ZSTORELP         PROCESS NEXT ZIP DIRECTORY ENTRY

UNZIPEND SLR   R1,R1
         BCTR  R1,0                FLAG E-O-F
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE
         L     R15,CHKPTTOP        FLAG NON-EMPTY FULLY READ DATA SET
         XC    0(2*CHKPTLN,R15),0(R15)
         LA    R15,CHKPTLN(,R15)
         ST    R1,0(,R15)          INDICATE HAVE READ E-O-F
         ST    R15,CHKPTBOT
         LM    R0,R1,ZIPBFLEN      LOAD ZIP DIRECTORY BUFFER DETAILS
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
         ICM   R1,15,FMTAREA       FORMAT AREA ALREADY CREATED?
         BNZ   UNZFMTOK            YES, USE IT
         L     R0,UNZFMTSZ         GET FORMAT AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         GETMAIN R,LV=(0)
         ST    R1,FMTAREA          POINT TO THIS AREA FROM @DATA
         USING @FMTAREA,R1
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
UNZFMTOK MVC   FMTFELS(ZIPFELEN),ZIPFELS
         LA    R15,FMTFELS
         LA    R15,ZIPFELEN(,R15)
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS EXPECTED?
         BZ    UNZFMTLN            NO
         MVC   FMTFELS(ZIPFELNV),ZIPFELSV
         LA    R15,FMTFELS
         LA    R15,ZIPFELNV(,R15)
UNZFMTLN ST    R15,FMTFELAD        INDICATE USED FELS
         MVC   FMTNAME,=C'*ZIPFILE'
         DROP  R1                  @FMTAREA
         OI    MODE,FMTSW          ENABLE FORMATTING
         NI    MODE,255-ASCIISW-MODEX
         ICM   R0,15,UNZIPROD      UNZIP PRODUCT ALREADY LOADED?
         BNZ   UNZPRDOK            YES
         LOAD  EPLOC=UNZPRDNM,ERRET=UNZPRDDN
         ST    R0,UNZIPROD         SAVE THE ENTRY POINT ADDRESS
UNZPRDOK OI    STATUS8,ZIPF        ALLOW CURSOR SELECTION
UNZPRDDN LA    R0,@ZIPWKLN         GET DYNAMIC AREA SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE DYNAMIC AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
*        SLR   R14,R14             ZERO CONTENTS JUST RESTORED
         STH   R14,OFFSET          SHOW FROM FIRST COLUMN
         ST    R14,COUNT           SHOW FROM FIRST ENTRY
         LA    R14,HILLOOP         RESUME DATA LOAD AND SHOW
         BSM   0,R14               ENSURE 24-BIT ADDRESSING

ZFNMLOAD MVC   RZDEFNM(0),ZCFHNAME <<< EXECUTED >>>
         DROP  R8,R2               ZCFH, RZDE

UNZIPFUL MVI   SYNADSW,X'FF'       SIMULATE I/O ERROR
         MVC   SYNADMSG,SSEOFMSG   LOAD INFORMATIVE MESSAGE
         B     UNZIPEND

UNZBADID MVI   SYNADSW,X'FF'       SIMULATE I/O ERROR
         MVC   SYNADMSG,ZIPIDMSG   LOAD INFORMATIVE MESSAGE
         B     UNZIPEND

UNZFMT2  CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R15),DOUBLE
         BR    R14

         DROP  R5,R13              UNZIPDIR, @ZIPWORK

ZIPIDMSG DC    CL78'******* INVALID ZIP FILE CENTRAL DIRECTORY ENTRY SI+
               GNATURE ENCOUNTERED *******'
UNZADADR DC    A(UNZIPADD+X'80000000')
UNZFMTSZ DC    AL1(1),AL3(@FMTLEN)

ZFS      DS    0F                  OPERATING SYSTEM FILE SYSTEM TYPES
         DC    C'FAT '         0 - FAT + PKZIPW 2.50 VFAT,NTFS
         DC    X'C1948781'     1 - AMIGA
         DC    C'VMS '         2 - VMS (VAX OR ALPHA AXP)
         DC    C'UNIX'         3 - UNIX
         DC    C'CMS '         4 - VM/CMS
         DC    X'C1A39989'     5 - ATARI
         DC    C'HPFS'         6 - HPFS (OS/2,NT 3.X)
         DC    X'D4818340'     7 - MACINTOSH
         DC    C'ZSYS'         8 - Z-SYSTEM
         DC    C'CP/M'         9 - CP/M
         DC    C'TOPS'        10 - TOPS-20 (DOC'D AS PKZIPW 2.50 NTFS)
         DC    C'NTFS'        11 - NTFS (NT)  (USED BY INFO-ZIP, ONLY)
         DC    C'QDOS'        12 - SMS/QDOS
         DC    X'C1839995'    13 - ACORN RISC OS
         DC    C'VFAT'        14 - VFAT        (INFO-ZIP RSVD, UNUSED)
         DC    C'MVS '        15 - MVS
         DC    X'C285D6E2'    16 - BEOS (BEBOX OR POWERMAC)
         DC    X'E3958494'    17 - TANDEM
ZFSMAX   EQU   (*-ZFS)/4           MAXIMUM FILE SYSTEM NUMBER
         DC    C'????'             UNUSED AND/OR UNKNOWN

ZMETH    DS    0F                  COMPRESSION METHODS
         DC    C'STOR'         0 - STORED (NO COMPRESSION)
         DC    X'E2889992'     1 - SHRUNK
         DC    C'RE:1'         2 - REDUCED WITH COMPRESSION FACTOR 1
         DC    C'RE:2'         3 - REDUCED WITH COMPRESSION FACTOR 2
         DC    C'RE:3'         4 - REDUCED WITH COMPRESSION FACTOR 3
         DC    C'RE:4'         5 - REDUCED WITH COMPRESSION FACTOR 4
         DC    C'I4:2'         6 - IMPLODED
         DC    C'TOKN'         7 - RSVD FOR TOKENIZING COMP'N ALGORITHM
         DC    X'C485867B'     8 - DEFLATED
         DC    C'EDEF'         9 - RESERVED FOR ENHANCED DEFLATING
         DC    C'DCLI'        10 - PKWARE DATA COMP'N LIBRARY IMPLODING
ZMETHMAX EQU   (*-ZMETH)/4         MAXIMUM COMPRESSION METHOD NUMBER
*        DC    C'U###'             UNUSED AND/OR UNKNOWN
Z8TYPE   EQU   *                   DEFLATE COMPRESSION TYPE
         DC    C'N'                NORMAL
         DC    C'X'                MAXIMUM
         DC    C'F'                FAST
         DC    C'S'                SUPER FAST

         DS    0D                  READY-TO-USE FEL TABLE FOR ZIP
*               SYMBOL-NAME  FLAGS TYPE LENGTH  COLUMNS OFFSET
ZIPFELSV DC    CL8' RDW    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
ZIPFELS  DC    CL8' ZIP    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
         DC    CL8'OSFS    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
         DC    CL8'FULLSIZE',X'A0',C'P',AL2(05),AL2(10),AL2(0)
         DC    CL8'PACKSIZE',X'A0',C'P',AL2(05),AL2(10),AL2(0)
         DC    CL8'COMP    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
         DC    CL8'METH    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
         DC    CL8'TX      ',X'00',C'C',AL2(02),AL2(02),AL2(0)
         DC    CL8'MODIFIED',X'00',C'C',AL2(14),AL2(14),AL2(0)
         DC    CL8'FILENAME',X'00',C'C',AL2(256),AL2(256),AL2(0)
ZIPFELEN EQU   *-ZIPFELS
ZIPFELNV EQU   *-ZIPFELSV
UNZPRDNM DC    CL8'ASEXZIPD'       UNZIP PROGRAM PRODUCT ENTRY POINT
         LTORG

         DS    0H

**********************************************************************
*                                                          *         *
*         FORMAT  -  PROCESS RECORD DEFINE STATEMENTS      *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************

         USING FMTMODE,R5
FMTMODE  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    INVLDCMD            YES, COMMAND NOT ALLOWED
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD2            GET SECOND OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRINV              YES, INVALID
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FMTFLIP             NO, FLIP FLOP
         CLI   5(R15),8            IS IT TOO LONG FOR A MEMBER NAME?
         BH    ERRINV              YES, INVALID
         CLI   5(R15),0            IS IT A NULL STRING?
         BE    ERRINV              YES, INVALID
         L     R14,0(,R15)         POINT TO OPERAND
         TM    6(R15),QUOTED       IS THE OPERAND QUOTED?
         BO    FMTNAMED            YES, CAN'T BE THE ON OR OFF KEYWORDS
         CLI   5(R15),2            IS LENGTH 2?
         BNE   FMTOFF              NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   FMTNAMED            NO, GET THE FORMAT NAME
FMTOI    ICM   R1,15,FMTAREA       HAS A FORMAT BEEN LOADED?
         BZ    FMTDSCB             NO, NEED FORMAT NAME UNLESS VTOC
         USING @FMTAREA,R1
         LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         C     R0,FMTFELAD         ANY DATA YET?
         BE    FMTNMLES            NO, SHOULD HAVE SPECIFIED NAME
         DROP  R1                  @FMTAREA
FMTOIX   OI    MODE,FMTSW          YES, ENABLE FORMATTING
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR             GO REFORMAT THE SCREEN CONTENTS
FMTDSCB  CLI   DSORGTYP,X'DD'      LOOKING AT A VTOC?
         BNE   FMTNMLES            NO, SHOULD HAVE SPECIFIED FMT NAME
         L     R0,@FMTSIZE         GET DYNAMIC AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         GETMAIN R,LV=(0)
         ST    R1,FMTAREA          POINT TO THIS AREA FROM @DATA
         USING @FMTAREA,R1
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
         MVC   FMTFELS(256),DS1FELS
         MVC   FMTFELS+256(DS1FELEN-256),DS1FELS+256
         MVC   FMTNAME,=C'**VTOC**'
         LA    R15,FMTFELS
         LA    R15,DS1FELEN(,R15)
         ST    R15,FMTFELAD        INDICATE USED FELS
         B     FMTOIX              INITIATE DSCB FORMATTING
         DROP  R1                  @FMTAREA
FMTOFF   CLI   5(R15),3            IS LENGTH 3?
         BNE   FMTNAMED            NO, GET THE FORMAT NAME
         CLC   OFF,0(R14)          YES, IS IT 'OFF'?
         BNE   FMTNAMED            NO, GET THE FORMAT NAME
         BAL   R14,FREEHSE         FREE PICTURE DATA TO STOP DISPLAY
FMTNI    NI    MODE,255-FMTSW      YES, TURN OFF FORMATTING
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR             GO UNFORMAT THE SCREEN CONTENTS
FMTFLIP  TM    MODE,FMTSW          IS FORMATTING OFF?
         BNO   FMTOI               YES, GO TURN IT ON
         B     FMTNI               NO, SO TURN IT OFF
FMTNMLES MVC   MSG(MSGFMT0L),MSGFMT0
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     BELPRMPT            GO RING THE BELL FOR ERROR MESSAGE

FMTNAMED SLR   R6,R6               CLEAR FOR INSERT
         L     R7,540              GET POINTER TO CURRENT TCB
         L     R7,12(,R7)          POINT TO TIOT
         LA    R7,24(,R7)          POINT TO TIOELNGH
FMTSCHEK CLC   FMTDDN,4(R7)        CHECK FOR REQUIRED FILE
         BE    FMTSOPEN            FILE EXISTS SO GO AND OPEN IT
         IC    R6,0(,R7)           GET TIOT ENTRY LENGTH
         AR    R7,R6               POINT TO NEXT TIOT ENTRY
         CLI   0(R7),0             ZERO LENGTH ENTRY?
         BNE   FMTSCHEK            NO, CHECK OUT THIS ENTRY
FMTBADDS MVC   MSG(MSGFMT1L),MSGFMT1
FMTBELLX LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     BELPRMPT            GO RING THE BELL FOR ERROR MESSAGE
FMTNOMEM MVC   MSG(MSGFMT2L),MSGFMT2
         MVC   MSG+2(8),BLDLNAME   SHOW MEMBER NAME IN MSG
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LA    R1,MSG+9            POINT TO LAST FORMAT NAME CHAR
         LH    R0,MSG              GET THE LENGTH OF THE MESSAGE
FMTMS2LP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   FMTBELLX            NO, GO SHOW MSG AND RING BELL
         MVC   0(MSGFMT2L-10,R1),1(R1) OVERLAY TRAILING BLANK
         BCTR  R1,0                POINT TO BEFORE OVERLAID BYTE
         BCTR  R0,0                DECREMENT LENGTH
         STH   R0,MSG              SAVE SHORTER LENGTH
         B     FMTMS2LP            CONTINUE CHOPPING TRAILING BLANKS

FMTSOPEN ICM   R6,7,17(R7)         LOAD UCB POINTER
         BZ    FMTBADDS            ZERO SO CAN'T BE DASD
         CLI   18(R6),X'20'        DASD DEVICE CLASS?
         BNE   FMTBADDS            NO, SO CAN'T BE PDS
         BAL   R14,FREEHSE         FREE PICTURE DATA
         L     R0,@FMTSIZE         GET DYNAMIC AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         ICM   R1,15,FMTAREA       POINT TO FORMATTING WORK AREA
         BNZ   FMTWKOK             ALREADY EXISTS SO SKIP GETMAIN
         GETMAIN R,LV=(0)
FMTWKOK  ST    R13,4(,R1)
         ST    R1,8(R13)
         LR    R13,R1
         ST    R13,FMTAREA         POINT TO THIS AREA FROM @DATA
         USING @FMTAREA,R13
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
         LA    R2,0(,R2)           CLEAR SUBPOOL FROM TOP BYTE
         LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         ST    R0,FMTFELAD         SAVE ADDRESS OF FIRST FOR NEXT
         AR    R1,R2               POINT PAST END OF WORK AREA
         LA    R0,FELSIZE          GET FORMAT ELEMENT SIZE
         SLR   R1,R0               POINT TO LAST ALLOWABLE ELEMENT
         ST    R1,FMTELAST         SAVE THIS ADDRESS
         MVI   FMTFLAGS,0          RESET FLAGS
         XC    FMTORGCT,FMTORGCT   ZERO "ORG" BYTES NOW REQUIRED
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    *+8                 NO
         MVI   FMTORGCT+3,4        YES, IGNORE RDW IN DSECT
         XC    FMTBLKFM,FMTBLKFM   FLAG NO READ BUFFER CREATED YET
         MVC   FMTDCB(PDSDCBL),PDSDCB
         LA    R4,FMTDCB
         USING IHADCB,R4           NOW REFERENCING REVFMTS DCB
         MVC   DCBDDNAM,FMTDDN     LOAD REVFMTS DDNAME
         LA    R0,FMTCLOSE
         STCM  R0,7,DCBEODA        SET END-OF-DATA ADDRESS
         LA    R0,FMTSYNAD
         STCM  R0,7,DCBSYNA        SET SYNAD EXIT ADDRESS
         MVI   OPEND,X'80'
         OPEN  ((R4),(INPUT)),MF=(E,OPEND)
         MVC   BLDLNAME,BLANKS
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         LH    R1,4(,R15)          GET FIRST OPERAND LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,MEMMVC
         MVI   FMTNAME,X'FF'       FLAG FIND FAILURE FOR LATER
         NI    MODE,255-FMTSW      RESET PREVIOUS FORMATTING
         BLDL  (R4),BLDL
         LTR   R15,R15             IS THE MEMBER PRESENT?
         BNZ   FMTCLOSE            NO, NO USEFUL DATA SO CLOSE FILE
         MVC   TTR,BLDLTTRP        TTR OF FIRST BLOCK
         FIND  (R4),TTR,C          POINT TO THE NEW MEMBER'S DATA
         LA    R0,7
         AH    R0,DCBBLKSI
         SRA   R0,3                GET BLKSIZE ROUNDED UP TO DOUBLEWORD
         BNP   FMTCLOSE            ZERO BLKSIZE IS UNACCEPTABLE
         SLA   R0,3
         ICM   R0,8,FMTSIZE        LOAD SUBPOOL
         ST    R0,FMTBLKSZ         SAVE READ BUFFER SUBPOOL AND SIZE
         GETMAIN R,LV=(0)          ACQUIRE A READ BUFFER
         ST    R1,FMTBUFR          SAVE READ BUFFER ADDRESS
         MVC   FMTDECB(DYNDECBL),DYNDECB
         MVC   FMTNAME,BLDLNAME    FLAG THAT DATA SET LOOKS GOOD
FMTRDLP  L     R2,FMTBUFR          POINT TO THE READ BUFFER
         READ  FMTDECB,SF,(R4),(R2),'S',MF=E
         CHECK FMTDECB
         TM    FMTFLAGS,FSYNADSW   I/O ERROR ENCOUNTERED?
         BO    FMTIOERR            YES, TERMINATE FORMAT PROCESSING
         LH    R1,DCBBLKSI
         L     R14,FMTDECB+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         LA    R0,0(R1,R2)         END OF BLOCK
         ST    R0,FMTBFEND         SAVE END OF BUFFER ADDRESS
         ST    R2,FMTRECAD         SAVE ADDRESS OF NEXT LOGICAL RECORD
FMTGETLP L     R2,FMTRECAD         POINT TO THE NEXT LOGICAL RECORD
         C     R2,FMTBFEND         REACHED END OF BLOCK?
         BNL   FMTRDLP             YES, GO READ ANOTHER BLOCK
         LH    R1,DCBLRECL         NO, GET LOGICAL RECORD LENGTH
         ALR   R1,R2               POINT TO NEXT RECORD
         ST    R1,FMTRECAD         SAVE ADDRESS OF NEXT LOGICAL RECORD
         CLI   0(R2),C'*'          COMMENT?
         BE    FMTGETLP            YES
         CLI   1(R2),C'*'          MACRO COMMENT?
         BE    FMTGETLP            YES
         LR    R6,R2               POINT START OF THIS RECORD
         L     R7,FMTFELAD         POINT TO NEXT FORMAT ELEMENT SLOT
         MVC   FELSYMNM(FELSYMNL,R7),BLANKS      CLEAR SYMBOL NAME
         LA    R1,FELSYMNM(,R7)    POINT TO SYMBOL ENTRY NAME AREA
         LA    R0,FELSYMNL         GET MAXIMUM SYMBOL NAME LENGTH
         CLI   0(R6),C'&&'         SYMBOLIC VARIABLE?
         BNE   FMTSYMLP            NO
         LA    R6,1(,R6)           YES, DON'T USE AMPERSAND
FMTSYMLP CLI   0(R6),C' '          END OF SYMBOL NAME?
         BE    FMTVERB             YES
         MVC   0(1,R1),0(R6)       NO, COPY A NAME CHARACTER
         LA    R1,1(,R1)
         LA    R6,1(,R6)
         BCT   R0,FMTSYMLP
FMTVERB  LA    R0,72(,R2)          POINT TO END OF ALLOWABLE DATA
FMTSYMFL CLI   0(R6),C' '          FOUND A BLANK?
         BE    FMTVERBL            YES
         LA    R6,1(,R6)           NO, POINT PAST NON-BLANK
         CR    R6,R0               UP TO END OF LINE?
         BL    FMTSYMFL            NO, FLUSH REST OF SYMBOL NAME
         B     FMTGETLP            BAD SYNTAX, DISCARD
FMTVERBL LA    R6,1(,R6)           POINT PAST BLANK
         CLI   0(R6),C' '          FOUND ANOTHER BLANK?
         BNE   FMTGTVRB            NO, CHECK STATEMENT VERB
         CR    R6,R0               UP TO END OF LINE?
         BL    FMTVERBL            NO, CONTINUE SEARCH FOR VERB
         B     FMTGETLP            BAD SYNTAX, DISCARD
FMTGTVRB CLC   =C'DC ',0(R6)       DEFINE CONSTANT?
         BE    FMTDCDS             YES
         CLC   =C'DS ',0(R6)       DEFINE STORAGE?
         BE    FMTDCDS             YES
         CLC   =C'ORG ',0(R6)      ORGANIZATION OVERRIDE?
         BE    FMTORG              YES
         CLC   =C'EQU ',0(R6)      EQUATE?
         BE    FMTEQU              YES
         CLC   =C'MEND ',0(R6)     END OF MACRO?
         BE    FMTCLOSE            YES
         CLC   =C'END ',0(R6)      END OF SOURCE?
         BE    FMTCLOSE            YES
         CLC   =C'DSECT ',0(R6)    NEW DATA SECTION?
         BE    FMTSECT             YES
         CLC   =C'CSECT ',0(R6)    NEW CONTROL SECTION?
         BE    FMTSECT             YES
         B     FMTGETLP            UNKNOWN VERB, DISCARD
FMTEQU   CLI   FELSYMNM(R7),C' '   SYMBOL NAME SUPPLIED?
         BE    FMTGETLP            NO, CAN'T BE REFERENCED SO DISCARD
         LA    R6,4(,R6)           POINT TO EARLIEST POSSIBLE OPERAND
*                                  RESET FEL EXCEPT FOR SYMBOL NAME
         XC    FELSYMNL(FELSIZE-FELSYMNL,R7),FELSYMNL(R7)
FMTEQULP CLI   0(R6),C' '          FOUND AN OPERAND?
         BNE   FMTEQUOP            YES
         LA    R6,1(,R6)           NO, POINT TO NEXT BYTE
         CR    R6,R0               END OF SOURCE RECORD?
         BL    FMTEQULP            NO, CONTINUE SCAN FOR OPERAND
         B     FMTGETLP            LOOKS LIKE BAD SYNTAX SO DISCARD
FMTEQUOP CLC   =C'* ',0(R6)        EQUATE TO CURRENT LOCATION?
         BE    FMFELNOK            YES, ALLOW ORG REFERENCE
         B     FMTGETLP            NO, CAN'T BE PROCESSED SO DISCARD
FMTORG   LA    R6,4(,R6)           POINT TO EARLIEST POSSIBLE OPERAND
FMTORGLP CLI   0(R6),C','          NO OPERANDS?
         BE    FMTNOORG            YES, TURN OFF "ORG MODE"
         CLI   0(R6),C' '          FOUND AN OPERAND?
         BNE   FMTORGON            YES, SET "ORG MODE"
         LA    R6,1(,R6)           NO, POINT TO NEXT BYTE
         CR    R6,R0               END OF SOURCE RECORD?
         BL    FMTORGLP            NO, CONTINUE SCAN FOR OPERAND
FMTNOORG NI    FMTFLAGS,255-FORG   NOW OUT OF "ORG MODE"
         XC    FMTORGCT,FMTORGCT   ZERO "ORG" BYTES NOW REQUIRED
         B     FMTGETLP
FMTORGON OI    FMTFLAGS,FORG       FLAG NOW IN "ORG MODE"
         XC    DOUBLE,DOUBLE       CLEAR WORK AREA
         L     R7,FMTFELAD         POINT TO NEXT FORMAT ELEMENT SLOT
         MVC   FELSYMNM(FELSYMNL,R7),BLANKS      CLEAR SYMBOL NAME
         MVI   FMTORGCT,X'7F'      USE LARGE NUMBER FOR UNKNOWN
         CLI   0(R6),C'+'          LEADING PLUS?
         BE    FMTORGSN            YES, HANDLE IT
         CLI   0(R6),C'-'          LEADING MINUS?
         BE    FMTORGSN            YES, HANDLE IT
FMTORGOP CLI   0(R6),C'0'          NUMBER?
         BL    FMTORGLB            NO, PROCESS LABEL
         BAL   R14,FMTGTNUM        YES, GET ITS NUMERIC VALUE
         CLI   DOUBLE+4,C'-'       IS NUMBER NEGATIVE?
         BNE   FMTOSIGN            NO
         LNR   R1,R1               YES
FMTOSIGN A     R1,DOUBLE           ACCUMULATE NUMBER
         ST    R1,DOUBLE
         B     FMTORGSN            NUMBER NOW PROCESSED
FMTORGLB LA    R1,FELSYMNM(,R7)    POINT TO SYMBOL ENTRY NAME AREA
         CLI   0(R1),C' '          HAS THIS BEEN USED?
         BNE   FMTGETLP            YES, CAN'T CALCULATE RIGHT OFFSET
         LA    R0,FELSYMNL         GET MAXIMUM SYMBOL NAME LENGTH
         CLI   0(R6),C'&&'         SYMBOLIC VARIABLE?
         BNE   FMTOSYML            NO
         LA    R6,1(,R6)           YES, DON'T USE AMPERSAND
FMTOSYML CLI   0(R6),C' '          END OF SYMBOL NAME?
         BE    FMTORGSN            YES, SYMBOL NOW PROCESSED
         MVC   0(1,R1),0(R6)       NO, COPY A NAME CHARACTER
         LA    R1,1(,R1)
         LA    R6,1(,R6)
         BCT   R0,FMTOSYML
FMTORGSN MVC   DOUBLE+4(1),0(R6)   COPY POSSIBLE SIGN
         LA    R6,1(,R6)           POINT PAST POSSIBLE SIGN
         CLI   DOUBLE+4,C'+'       PLUS?
         BE    FMTORGOP            YES, PROCESS NEXT ITEM
         CLI   DOUBLE+4,C'-'       MINUS?
         BE    FMTORGOP            YES, PROCESS NEXT ITEM
         SLR   R15,R15             RESET ACCUMULATOR
         LA    R1,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
FMTOSLP1 CR    R1,R7               END OF FORMAT ELEMENTS?
         BNL   FMTGETLP            YES, SPECIFIED SYMBOL NOT FOUND
         CLC   FELSYMNM(FELSYMNL,R1),FELSYMNM(R7) FOUND SYMBOL'S FEL?
         BE    FMTOSLP2            YES
         LA    R1,FELSIZE(,R1)     NO, POINT TO NEXT FEL
         B     FMTOSLP1
FMTOSLP2 AH    R15,FELSYMLN(,R1)   ACCUMULATE SYMBOL LENGTH(S)
         LA    R1,FELSIZE(,R1)     POINT TO NEXT FEL
         CR    R1,R7               END OF FORMAT ELEMENTS?
         BL    FMTOSLP2            NO, KEEP ACCUMULATING
         A     R15,DOUBLE          ADD ANY TYPED NUMBERS TO OFFSET
         ST    R15,FMTORGCT        SET "BYTES TO GO FOR ORG"
         B     FMTGETLP
FMTSECT  LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         C     R0,FMTFELAD         ANY DATA YET?
         BNE   FMTCLOSE            YES, BUT WON'T GET ANY MORE
         B     FMTGETLP            NO, CONTINUE
FMTDCDS  LA    R6,2(,R6)           POINT TO PAST VERB
FMTDCDSL LA    R6,1(,R6)           POINT PAST BLANK
         CLI   0(R6),C' '          FOUND ANOTHER BLANK?
         BNE   FMTGTOP             NO, CHECK STATEMENT OPERAND(S)
         CR    R6,R0               UP TO END OF LINE?
         BL    FMTDCDSL            NO, CONTINUE SEARCH FOR OPERAND
         B     FMTGETLP            BAD SYNTAX, DISCARD
FMTGTOP  LA    R1,1                ASSUME MULTIPLIER OF 1
         CLI   0(R6),C'0'          LEADING MULTIPLIER?
         BL    FMTOP#OK            NO
         BAL   R14,FMTGTNUM        YES, GET ITS NUMERIC VALUE
FMTOP#OK ST    R1,FMTMLHLD         REMEMBER IT
         TR    0(1,R6),FMTYPIDX    DIGEST DATA TYPE
         CLI   0(R6),0             KNOWN DATA TYPE?
         BE    FMTGETLP            NO, DISCARD
         SLR   R1,R1               YES
         IC    R1,0(,R6)           GET INDEX CODE
         SLL   R1,2                MULTIPLY BY 4 FOR INDEX
         LA    R1,FMTYPTAB-4(R1)   POINT TO DATA TYPE ENTRY
         MVC   FELSYMFG(4,R7),0(R1) COPY DATA TYPE RELEVANCIES
         LH    R1,FELSYMLN(,R7)    LOAD THE DEAULT LENGTH
         LA    R6,1(,R6)           POINT PAST TYPE BYTE
         CLI   0(R6),C' '          BLANK FOUND?
         BE    FMTFELOK            YES, END OF STATEMENT
         CLI   0(R6),C'L'          LENGTH SPECIFIED?
         BNE   FMTFELOK            NO, STATEMENT PROCESSED
         CLI   1(R6),C'0'          NUMERIC LENGTH SPECIFIED?
         BL    FMTFELOK            NO, STATEMENT PROCESSED
         LA    R6,1(,R6)           YES, POINT TO NUMERICS
         BAL   R14,FMTGTNUM        GET ITS NUMERIC VALUE
FMTFELOK M     R0,FMTMLHLD         GET TOTAL SIZE OF THIS FIELD
         STH   R1,FELSYMLN(,R7)    SAVE THE LENGTH OF THIS SYMBOL
         STH   R1,FELDSPLN(,R7)    SET DISPLAY LENGTH
         TM    FMTFLAGS,FORG       IN "ORG MODE"?
         BNO   FMTOCTOK            NO, NO NEED TO ADJUST "ORG" COUNT
         L     R14,FMTORGCT        GET "ORG" REMAINING BYTE COUNT
         SR    R14,R1              SUBTRACT LENGTH OF THIS SYMBOL
         ST    R14,FMTORGCT        UPDATE "ORG" BYTE COUNT
         BP    FMTGETLP            STILL IN "ORG" MODE SO DISCARD ITEM
         B     FMTNOORG            CLEARED "ORG" MODE SO RESET STATUS
FMTOCTOK LTR   R1,R1               ZERO LENGTH SYMBOL?
         BZ    FMFELNOK            YES, PLACEHOLDER FOR ORG REFERENCES
         TM    FELSYMFG(R7),FELHEX+FELBIN
         BZ    FMTYPEOK            CHARACTER SO DISPLAY LENGTH IS SAME
         SLL   R1,1                DOUBLE IT
         STH   R1,FELDSPLN(,R7)    SET DISPLAY LENGTH
         TM    FELSYMFG(R7),FELHEX ALWAYS SHOW HEX DIGITS?
         BO    FMTYPEOK            YES, SO DISPLAY LENGTH IS DOUBLE
         CH    R1,HW8              ITEM LENGTH GREATER THAN FOUR?
         BNH   FMTBINOK            NO, DO BINARY CONVERSION
         NI    FELSYMFG(R7),255-FELBIN
         OI    FELSYMFG(R7),FELHEX YES, ALWAYS SHOW AS HEX
         B     FMTYPEOK
FMTBINOK SLL   R1,1                DISPLAY LENGTH IS 4 TIMES DATA SIZE
         STH   R1,FELDSPLN(,R7)    SET DISPLAY LENGTH
         TM    FELSYMLN+1(R7),X'01'    IS ITEM 1 OR 3 BYTES?
         BZ    FMTYPEOK            NO, TREAT 2 OR 4 BYTES AS SIGNED
         OI    FELSYMFG(R7),FELUNS YES, TREAT ITEM AS UNSIGNED BINARY
FMTYPEOK CLI   FELSYMNM(R7),C' '   BLANK SYMBOL NAME?
         BE    FMFELNOK            YES, DISPLAY LENGTH ALREADY DONE
         LA    R1,FELSYMNM+FELSYMNL(,R7)  POINT PAST SYMBOL NAME
         LA    R15,FELSYMNM(,R7)   POINT TO SYMBOL NAME
         LA    R14,TABBLANK-2048   SET POINTER TO TRANSLATE TABLE
         TRT   0(8,R15),2048(R14)  FIND A BLANK
         SR    R1,R15              GET SYMBOL NAME LENGTH
         CH    R1,FELDSPLN(,R7)    IS DISPLAY WIDE ENOUGH FOR NAME?
         BNH   FMFELNOK            YES
         STH   R1,FELDSPLN(,R7)    NO, INCREASE WIDTH FOR NAME
FMFELNOK LA    R7,FELSIZE(,R7)     POINT TO NEXT FIELD ELEMENT SLOT
         ST    R7,FMTFELAD         SAVE THE ADDRESS
         C     R7,FMTELAST         GONE PAST LAST ALLOWABLE ADDRESS?
         BNH   FMTGETLP            NO, PROCESS NEXT CARD IMAGE
         B     FMTCLOSE            YES, SIMULATE E-O-F

FMTIOERR LA    R0,L'FSYNADMS       GET I/O ERROR MESSAGE LENGTH
         LA    R1,FSYNADMS         GET I/O ERROR MESSAGE ADDRESS
         TPUT  (1),(0),R           GIVE USER SOME HINT OF I/O ERROR
FMTCLOSE MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         LM    R0,R1,FMTBLKFM      LOAD BUFFER FREEMAIN VALUES
         LTR   R0,R0               ANY BUFFER TO FREE?
         BZ    FMTNOBUF            NO
         FREEMAIN R,LV=0,A=(1)     FREE THE READ BUFFER
FMTNOBUF CLI   FMTNAME,X'FF'       DID THE BLDL FIND THE MEMBER?
         BE    FMTNOMEM            NO, SHOW THIS AS THE MESSAGE
         LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         C     R0,FMTFELAD         ANY DATA YET?
         BE    FMTALLDN            NO, DON'T TURN ON FORMATTING
         OI    MODE,FMTSW          YES, TURN ON FORMATTING
FMTALLDN L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR             GO UNFORMAT THE SCREEN CONTENTS
         DROP  R4                  IHADCB

FMTGTNUM SLR   R0,R0               CLEAR FOR INSERT
         SLR   R1,R1               RESET ACCUMULATOR
FMTNUMLP IC    R0,0(,R6)           GET NUMERIC CHARACTER
         SLL   R0,28               SHIFT OUT ZONE
         SRL   R0,28
         MH    R1,HW10             PROMOTE PREVIOUS DIGITS
         AR    R1,R0
         LA    R6,1(,R6)           POINT PAST PROCESSED DIGIT
         CLI   0(R6),C'0'          ANOTHER NUMERIC DIGIT?
         BNL   FMTNUMLP            YES, PROCESS IT
         BR    R14                 NO, RETURN TO CALLER

         DROP  R13                 @FMTAREA

         USING @FMTAREA,R2
FMTSYNAD DS    0H
         LR    R2,R13
         SYNADAF ACSMETH=BSAM
         MVC   FSYNADMS(78),50(R1)
         OI    FMTFLAGS,FSYNADSW   FLAG I/O ERROR ENCOUNTERED
         SYNADRLS
         BR    R14
         DROP  R2                  @FMTAREA

         DROP  R5                  FMTMODE


FMTYPIDX DS    0F                  SYMBOL TYPE INDEX TABLE
         DC    12XL16'00'                            X'00' - X'BF'
         DC    X'00010203040506000700000000000000'   X'C0' - X'CF'
         DC    X'00000008000000090A00000000000000'   X'D0' - X'DF'
         DC    X'00000B00000C000D0E0F000000000000'   X'E0' - X'EF'
         DC    XL16'00'                              X'F0' - X'FF'
FMTYPTAB DS    0F                  SYMBOL TYPE TABLE
*              FLAGS TYPE LENGTH
         DC    X'80',C'A',H'4'     ADDRESS VALUE
         DC    X'80',C'B',H'1'     BINARY DIGITS
         DC    X'00',C'C',H'1'     CHARACTERS
         DC    X'80',C'D',H'8'     LONG FLOATING-POINT
         DC    X'80',C'E',H'4'     SHORT FLOATING-POINT
         DC    X'40',C'F',H'4'     FIXED-POINT BINARY
         DC    X'40',C'H',H'2'     FIXED-POINT BINARY
         DC    X'80',C'L',H'16'    EXTENDED FLOATING-POINT
         DC    X'A0',C'P',H'1'     PACKED DECIMAL
         DC    X'80',C'Q',H'4'     SYMBOL ADDRESS
         DC    X'80',C'S',H'2'     BASE-DISPLACEMENT ADDRESS
         DC    X'80',C'V',H'4'     EXTERNAL ADDRESS
         DC    X'80',C'X',H'1'     HEXADECIMAL DIGITS
         DC    X'80',C'Y',H'2'     ADDRESS VALUE
         DC    X'20',C'Z',H'1'     ZONED DECIMAL
*              +0 DISPLAY FLAGS
*                 X'80' - ALWAYS SHOW IN HEX
*                 X'40' - INTERPRET BINARY
*                 X'20' - INTERPRET DECIMAL
*                 X'08' - INTERPRET UNSIGNED BINARY
*              +1 ORIGINAL DATA TYPE
*              +2 DEFAULT LENGTH

@FMTSIZE DC    AL1(1),AL3(@FMTLEN)
FMTDDN   DC    CL8'REVFMTS '
MSGFMT0  MSG   'NO FORMAT NAME WAS SPECIFIED'
MSGFMT1  MSG   'REVFMTS FILE IS UNUSABLE'
MSGFMT2  MSG   '???????? NOT FOUND IN REVFMTS FILE'
         LTORG

DS1FELS  DS    0D                  READY-TO-USE FEL TABLE FOR VTOC
*               SYMBOL-NAME  FLAGS TYPE LENGTH  COLUMNS OFFSET
         DC    CL8'DS1DSNAM',X'01',C'C',AL2(44),AL2(44),AL2(0)
         DC    CL8'DS1FMTID',X'80',C'C',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1DSSN ',X'01',C'C',AL2(06),AL2(07),AL2(0)
         DC    CL8'DS1VOLSQ',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1CREDT',X'81',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1EXPDT',X'81',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1NOEPV',X'48',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1NOBDB',X'48',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1FLAG1',X'80',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SYSCD',X'01',C'C',AL2(13),AL2(13),AL2(0)
         DC    CL8'DS1REFD ',X'81',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1SMSFG',X'80',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCXTF',X'80',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCXTV',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1DSORG',X'81',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1RECFM',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1OPTCD',X'80',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1BLKL ',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1LRECL',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1KEYL ',X'48',C'X',AL2(01),AL2(07),AL2(0)
         DC    CL8'DS1RKP  ',X'48',C'X',AL2(02),AL2(06),AL2(0)
         DC    CL8'DS1DSIND',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCAL1',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCAL3',X'80',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1LSTAR',X'80',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1TRBAL',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'        ',X'80',C'X',AL2(02),AL2(04),AL2(0)
         DC    CL8'DS1EXT1 ',X'80',C'X',AL2(10),AL2(20),AL2(0)
         DC    CL8'DS1EXT2 ',X'80',C'X',AL2(10),AL2(20),AL2(0)
         DC    CL8'DS1EXT3 ',X'80',C'X',AL2(10),AL2(20),AL2(0)
         DC    CL8'DS1PTRDS',X'80',C'X',AL2(05),AL2(10),AL2(0)
DS1FELEN EQU   *-DS1FELS

         DS    0D                  END OF CSECT

         DROP  R10,R11,R12,R3      REVIEW2
         TITLE '  R E V I E W   -   C P   O P E R A N D S  '
*        PRINT NOGEN
REVPCL   IKJPARM
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
UNITKW   IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=UNITSF
VOLKW    IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSF
         IKJNAME 'SUBSYS',SUBFLD=SUBSYSSF
TOPKW    IKJKEYWD
         IKJNAME 'TOP',SUBFLD=TOPSF,ALIAS=('TTR')
FILEKW   IKJKEYWD
         IKJNAME 'FILE'
         IKJNAME 'QUICK'
DATAKW   IKJKEYWD
         IKJNAME 'DATA'
TOPSF    IKJSUBF
TOPTTR   IKJIDENT 'TOP TTR',                                           +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +
               PROMPT='TOP RELATIVE ADDRESS (TTR)',                    +
               HELP=('HEXADECIMAL TTR OR TAPE BLOCK ID TO BE CONSIDERED+
                AS TOP-OF-DATA'),                                      +
               VALIDCK=VALIDTOP
UNITSF   IKJSUBF
UNIT     IKJIDENT 'UNIT NAME',                                         +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +
               PROMPT='UNIT NAME'
VOLSF    IKJSUBF
VOL      IKJIDENT 'VOLUME SERIAL',                                     +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +
               PROMPT='VOLUME SERIAL NUMBER'
SUBSYSSF IKJSUBF
SUBSYS   IKJIDENT 'SUBSYSTEM',                                         +
               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=4,                   +
               PROMPT='SUBSYSTEM NAME'
         IKJENDP
REVPCL   CSECT

**********************************************************************
*                                                          *         *
*         VALIDATE 'TOP' OPERAND                           *  GP@FT  *
*                                                          *  03/93  *
**********************************************************************

         USING VALIDTOP,R12
VALIDTOP STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         L     R6,0(,R1)           POINT TO PDE (FIRST PARAMETER)
         LH    R3,4(,R6)           GET HEX DIGIT COUNT
         BCTR  R3,0                MINUS 1 FOR EX
         L     R14,0(,R6)          GET ADDRESS OF USER-SUPPLIED OPERAND
         L     R5,=V(HEXTEST)      POINT TO TRANSLATE AND TEST TABLE
         SLR   R15,R15             PREPARE FOR VALID HEXADECIMAL
         EX    R3,VALIDTRT         VALID HEXADECIMAL OPERAND?
         BZ    VALIDXIT            YES, SO RETURN WITH RC=0
         LA    R15,4               NO, SO RETURN WITH RC=4
VALIDXIT L     R14,12(,R13)        RESTORE RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R12                 VALIDTOP
VALIDTRT TRT   0(0,R14),0(R5)      <<< EXECUTED >>>
         LTORG
         DS    0D                  END OF CSECT


HELPCL   IKJPARM
MEMBERPO IKJIDENT 'MEMBER OR SUBCOMMAND NAME',                         +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8
FKW      IKJKEYWD
         IKJNAME 'FUNCTION'
SKW      IKJKEYWD
         IKJNAME 'SYNTAX'
OKW      IKJKEYWD
         IKJNAME 'OPERANDS',SUBFLD=OPLISTS
AKW      IKJKEYWD
         IKJNAME 'ALL'
MKW      IKJKEYWD
         IKJNAME 'MSGID',SUBFLD=MSGLISTS
PKW      IKJKEYWD
         IKJNAME 'POSITIONAL',SUBFLD=POSITF
POSITF   IKJSUBF
POSITFF  IKJIDENT 'POSITIONAL NUMBER',                                 +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=8,INTEG,DEFAULT='1'
OPLISTS  IKJSUBF
OPLIST   IKJIDENT 'HELP OPERAND NAME',LIST,                            +
               FIRST=ANY,OTHER=ANY,MAXLNTH=20
MSGLISTS IKJSUBF
MSGLIST  IKJIDENT 'HELP MSG IDENTIFIER',LIST,                          +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=20
         IKJENDP
HELPCL   CSECT ,                   RESUME PCL CSECT
         DS    0D                  END OF CSECT
         PRINT GEN
         TITLE '  R E V I E W   -   D S E C T S  '
************************************************************
*                                                          *
*         DSECTS                                           *
*                                                          *
************************************************************

@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
SIZE     DS    F                   SIZE OF THIS AREA
CPPLPTR  DS    F
LINKAREA DS    2F
BASE1    DS    4F
BASE2    DS    4F
DOUBLE   DS    D
RET1     DS    F
CALLSMFA DS    F
CALLPARM DS    4F
CALLSAVE DS    10D                 18 WORD SAVE AREA PLUS 1 DOUBLE WORD
LOCBUF   DS    0D                  USES NEXT 265 BYTES
MYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR
MSG      DS    CL128
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256            USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   ADDRESS OF IKJPUTL
MYSTPB   DS    0F                  5 WORDS USED BY STACK DELETE
MYDAPL   DS    5F
MYDAPB   DS    21F                 DAPB AND DEBLOCKS SAVE AREA
MYDFPB   DS    5F
REVCBUF  DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVUPT   DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVPSCB  DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVECT   DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
PCMD     DS    CL8                 PRIMARY COMMAND NAME             ABL
SCMD     DS    CL8                 SUBCOMMAND NAME                  ABL
UDSNAME  DS    2H,CL44
$PASSWRD DS    CL8
$VOLSER  DS    CL6
$DSNAME  DS    H,CL44
$UCBAD   DS    F
ACBSW    EQU   X'80'               DATA SET I/O VIA AN ACB, NOT A DCB
KSDSSW   EQU   X'40'               ACCESS VSAM KSDS IN KEY ORDER
RRDSSW   EQU   X'20'               ACCESS VSAM RRDS IN RRN ORDER
$UNIT    DS    CL8
$MEMBER  DS    CL8          _____/ THESE TWO
$CONCAT  DS    H                 \  TOGETHER
$DDNAML  DS    H            _____/ THESE TWO
$DDNAME  DS    CL8               \  TOGETHER
DSNAIM   DS    H,CL44
DSPLUS   DS    H,CL62              (44 DSN + 10 (MEMBER) + 8 SPF STATS)
CSRLOCN  DS    H                   CURSOR SCREEN LOCATION
COL1LBL  DS    CL8                 SPECIAL TEXT FOR COLUMN 1
LOCATEW  DS    0F
OBTAINW  DS    4F
STATUS   DS    XL1                 STATUS FLAGS
STALLOC  EQU   X'80'               UNALLOCATION REQUIRED
STOPEN   EQU   X'40'               CLOSE REQUIRED
STABEND  EQU   X'20'               OPEN ABEND OCCURRED
STLOCAT  EQU   X'10'               LOCATE DONE FOR ALIAS
STGMVU   EQU   X'08'               FREEMAIN OF VARIABLE AREA REQUIRED
STPODIR  EQU   X'04'               PDS MEMBER LIST DONE
STPROF   EQU   X'02'               PROFILE CHANGED SO DO REWRITE
STNOMEM  EQU   X'01'               NO VALID MEMBER BEING REVIEWED
STATUS2  DS    XL1                 MORE STATUS FLAGS
STPDS    EQU   X'80'               DISABLE STAX DURING TGET FOR PDS CMD
STAUTH   EQU   X'40'               APF AUTHORIZED
SOFTEOF  EQU   X'20'               EOF WAS ZERO VSAM CIDF
FASTREAD EQU   X'10'               PERFORM DIRECT ACCESS FOR SPEED
EFTSROK  EQU   X'08'               TSOEXEC TSO COMMAND AVAILABLE
MAGTAPE  EQU   X'04'               REVIEWED FILE ON MAGNETIC TAPE
EOTAPE   EQU   X'02'               TAPE REWIND REQUIRED AFTER EOF
CARTRIDG EQU   X'01'               REVIEWED FILE ON UNIT=3480
STATUS3  DS    XL1                 EVEN MORE STATUS FLAGS
UPDTECTL EQU   X'80'               MAKE IEBUPDTE-LIKE CONTROL CARDS
SORTMODE EQU   X'7F'               PDS DIRECTORY SORT STATUS FLAGS
TTRSORT  EQU   X'40'               SORTED INTO ASCENDING TTRS (LOC'N)
SIZESORT EQU   X'20'               SORTED INTO DESCENDING SIZE
DATESORT EQU   X'10'               SORTED INTO DESCENDING CHANGE DATE
USERSORT EQU   X'08'               SORTED INTO USERID ORDER
SSISORT  EQU   X'04'               SORTED INTO ASCENDING SSI ORDER
SORTSWAP EQU   X'01'               ORDER CHANGED BY THIS PASS
*        EQU   X'00'               SORTED INTO COLLATING SEQUENCE
MODE     DS    XL1                 DISPLAY FORMAT FLAGS
SMFSW    EQU   X'80'               SHOW IN SMF RECORD FORMATTING MODE
MODEX    EQU   X'40'               SHOW IN HEXADECIMAL FORMATTING MODE
ASCIISW  EQU   X'20'               TRANSLATE CHARACTERS TO EBCDIC
VSAMSW   EQU   X'10'               EXTRACT VSAM LOGICAL RECORDS
OFFLDSW  EQU   X'08'               WRITE MEMBER CONTENTS TO SYSUT2
RECURS   EQU   X'04'               RECURSIVE 'REVIEW' SESSION
EREPSW   EQU   X'02'               FORMAT LOGREC RECORDS
FSMODE   EQU   X'01'               FULLSCREEN MODE IS ACTIVE
FMTSW    EQU   SMFSW+EREPSW        FORMAT RECORDS FROM SOURCE
DSORG    DS    XL2
DSORGTYP DS    XL1                 SPECIAL DATA SET TYPE FLAG
OVLY     EQU   X'20'               CURRENT MEMBER IS OVERLAY PROGRAM
VVRCOMTP EQU   X'08'               COMPONENT TYPE 'D' (0) OR 'I' (1)
AMATR    DS    XL1                 ICF COMPONENT ATTRIBUTE BYTE
VVRAMDST EQU   X'80'               ON FOR KSDS, OFF FOR ESDS
VVRAMWCK EQU   X'40'               WRITE CHECK
VVRAMSDT EQU   X'20'               SEQUENCE SET WITH DATA (IMBED)
VVRAMREP EQU   X'10'               REPLICATION
VVRAMORD EQU   X'08'               USE VOLUMES IN LIST ORDER
VVRAMRGE EQU   X'04'               KEY RANGE DATA SET
VVRAMRDS EQU   X'02'               ON FOR RRDS
VVRAMSPN EQU   X'01'               SPANNED RECORDS ALLOWED
TSTRECFM DS    XL1
FINDSW   DS    XL1
FACT     EQU   X'80'               FIND COMMAND IS ACTIVE
FTOP     EQU   X'40'               SEARCH FROM TOP OF DATA
FEND     EQU   X'20'               SEARCH FROM BOTTOM OF DATA
FBAK     EQU   X'10'               SEARCH DIRECTION IS BACKWARD
FWRD     EQU   X'08'               NON-NUMERIC OPERAND SPECIFIED
FNUM     EQU   X'04'               NUMERIC OPERAND SPECIFIED
FSMF     EQU   X'02'               FINDSMF COMMAND REQUESTED
FVRT     EQU   X'01'               VERTICAL SCROLLING OCCURRED
RC       DS    H
MYDFPARM DS    5F                  USED BY DAIRFAIL
MYDFREGS DS    F                   USED BY DAIRFAIL
MYDFRC   DS    F                   USED BY DAIRFAIL
MYJEFF02 DS    F                   USED BY DAIRFAIL
MYDFID   DS    H                   USED BY DAIRFAIL
COLNUM   DS    CL6
GRAFDTLS EQU   *,12                RASTER AND VECTOR GRAPHICS DETAILS
MATRIXSZ DS    XL2                 CHARACTER MATRIX WIDTH AND DEPTH
SYMSTGF  DS    X                   FIRST LOADABLE TERMINAL STORAGE ID
SYMSTGL  DS    X                   LAST LOADABLE TERMINAL STORAGE ID
SYMSTG3  DS    7X                  TRIPLE PLANE TERMINAL STORAGE IDS
VECFLAGS DS    X                   VECTOR DETAILS
VCTR     EQU   X'80'               VECTOR GRAPHICS SUPPORTED
FILEKV   DS    H
DATAKV   DS    H
HELKVS   EQU   *,12                HELP SECTION OPERAND FLAGS
FKV      DS    H
SKV      DS    H
OKV      DS    H
AKV      DS    H
MKV      DS    H
PKV      DS    H
UNZIPROD DS    0F                  UNZIP PRODUCT ENTRY POINT
HELPOS#  DS    F
COMMND   DS    H
$SUBLEN  DS    H
$SUBCOM  DS    CL8
$SUBLINE DS    F
$OPERAND DS    21CL20              TWENTY OPERANDS (EACH MAX. 20 BYTES)
         ORG   $OPERAND
ASPLTADR DS    F                   ENTRY POINT OF ADMASPLT
PICDTLS  EQU   *
PICSRCDD DS    CL8                 PICTURE SOURCE CODE OUTPUT DDNAME
X_Y_PELS EQU   *,8                 SIZE OF PICTURE IN PIXELS
X_PELS   DS    F                   WIDTH OF PICTURE IN PIXELS
Y_PELS   DS    F                   HEIGHT OF PICTURE IN PIXELS
PICPELCT DS    F                   TOTAL NUMBER OF PIXELS
PICSTGSZ DS    F                   PCX BYTE ARRAY STORAGE SIZE
PICENDAD DS    F                   FIRST BYTE PAST PICTURE DATA
PICOLRES DS    F                   COLOUR RESOLUTION (MAX # COLOURS)
X_BYTES  DS    H                   WIDTH OF PICTURE IN SCREEN COLUMNS
Y_BYTES  DS    H                   HEIGHT OF PICTURE IN SCREEN ROWS
X_OFFSET DS    H                   FIRST PICTURE COLUMN OFFSET
Y_OFFSET DS    H                   FIRST PICTURE ROW OFFSET
X_Y_SYMS DS    F                   SYMBOL COUNT FOR RENDERING PICTURE
PICCOLOR DS    X                   COLOR CODE TO USE FOR PICTURE
PICFLAGS DS    X                   FLAGS FOR PICTURE PROCESSING
PICOK    EQU   X'80'               PICTURE HAS BEEN RENDERED
PICOVR   EQU   X'40'               LPS OVERFLOW
PICDTLEN EQU   *-PICDTLS           LENGTH OF PICTURE INFORMATION
         ORG
GOTTERM  DS    2F                  RESULTS FROM GTTERM MACRO
GETTERML GTTERM MF=L               PARAMETER LIST FOR GTTERM
STCKCNVL STCKCONV MF=L             PARAMETER LIST FOR STCKCONV
DAIRREGS DS    F
OPEND    DS    0F
CLOSED   DS    F
DYNEXLST DS    2F           _____/ THESE TWO
KOUNT    DS    F                 \ TOGETHER (FOR DYNEXLST OVERFLOW)
DYNDCBW  DS    0F,XL(SEQDCBL)
DYNDECBW DS    0F,XL(DYNDECBL)
RANGE    DS    2F
ANSWER   DS    2F
GMVUW    DS    0F,XL(GMVUL)
SAVKEYLE DS    F
SAVSPANL DS    F
SAVLRECL DS    F
SAVBLKSI DS    F
SAVHOLDL DS    F
BLOCKPTR DS    F
SPANPTR  DS    F
HOLDPTR  DS    F
CHKPTLN  EQU   8                   LENGTH OF CHECKPOINT ENTRY
CHKPTTOP DS    F                   ADDRESS OF TOP CHECKPOINT ENTRY
CHKPTBOT DS    F                   ADDRESS OF BOTTOM CHECKPOINT ENTRY
CHKPTDUM DS    2F                  DUMMY CHECKPOINT ENTRY
ENDPTR   DS    F                   ADDRESS PAST VARIABLE DYNAMIC AREA
HOLDTOP  DS    F                   ADDRESS OF FIRST DIRECTORY ENTRY
HOLDEND  DS    F                   ADDRESS OF LAST DIRECTORY ENTRY
DIVREGS  EQU   *,8
DIVREG0  DS    F                   SIZE OF DIV AREA
DIVREG1  DS    F                   ADDRESS OF DIV AREA
DIVHITTR DS    F                   HIGHEST TTR OF RECORD STORED BY DIV
DIVHICNT DS    F                   HIGHEST RECORD NUMBER STORED BY DIV
DIVSZREQ DS    F                   DIV SIZE SPECIFICALLY REQUESTED
DIVCHKPT EQU   *,8
DIVCPCNT DS    F                   LATEST RECORD PROCESSED BY DIV
DIVCPADR DS    F                   LATEST RECORD DIV ENTRY ADDRESS
STATUS10 DS    X                   GUESS WHAT
UZ80     EQU   X'80'               UNZIP HAS FIXED LRECL TO 80
*        EQU   X'40'               SPARE
*        EQU   X'20'               SPARE
*        EQU   X'10'               SPARE
*        EQU   X'08'               SPARE
*        EQU   X'04'               SPARE
*        EQU   X'02'               SPARE
*        EQU   X'01'               SPARE
         DS    3X                  SPARE
AMKEY    DS    0F                  RECORD KEY DETAILS
AMRKP    DS    H                   RELATIVE KEY POSITION
AMKLN    DS    H                   KEY LENGTH
AMCIV    DS    F                   CONTROLINTERVAL SIZE
AMLCL    DS    F                   MAXIMUM RECORD LENGTH
AMNLR    DS    F                   NUMBER OF LOGICAL RECORDS
AMASP    DS    F                   BYTES OF FREE SPACE
OFFSET   DS    H                   SCROLLED-RIGHT-FROM-LEFT-MAX AMOUNT
RECSIZE  DS    H                   MAXIMUM DISPLAYABLE RECORD LENGTH
COUNT    DS    F
TTR      DS    F
EOFRELAD DS    F                   END-OF-FILE RELATIVE ADDRESS
ATTNADDR DS    F                   ATTENTION EXIT ADDRESS
SCROLL   DS    F                   CURRENT SCROLL AMOUNT
DOWNAMT  DS    F
LISTNUM  DS    F
FLDPTR   DS    F
FLDLEN   DS    F
CMDPTR   DS    F
CMDLEN   DS    F
CMDTSOEX DS    CL8                 SPACE TO CONVERT TSO TO TSOEXEC
CMDAREA  DS    CL127
MSGDSN   DS    CL54
SMFSBTYP DS    H                   SMF SUB-TYPE TO BE HIGHLIGHTED
SACHAR   DS    X                   ORDER CODE FOR SET ATTRIBUTE
SBASAVE  DS    4F
PAGESIZE DS    H                   DATA LINES PER SCREEN
FINDCOL  DS    H
BUFFSIZE DS    F                   LENGTH OF TPUT BUFFER
SCRNLNES DS    F                   NUMBER OF SCREEN LINES
SCRNCOLS DS    F                   NUMBER OF SCREEN COLUMNS
CBPRM1   DS    F                   POINTER TO BUFFSIZE
CBPRM2   DS    F                   POINTER TO SCRNLNES
CBPRM3   DS    F                   POINTER TO BUFFER (UPDATED IN PLACE)
CBPRM4   DS    F                   POINTER TO SACHAR
FNDNUM   DS    F
FNDOFF   DS    H
STRINGL  DS    H
STRING   DS    CL64
OPDL     DS    0F                  OPERAND DESCRIPTOR LIST
OPD0     DS    2F                  COMMAND DESCRIPTOR
OPD1     DS    2F                  OPERAND DESCRIPTOR 1
OPD2     DS    2F                  OPERAND DESCRIPTOR 2
OPD3     DS    2F                  OPERAND DESCRIPTOR 3
OPD4     DS    2F                  OPERAND DESCRIPTOR 4
OPD5     DS    2F                  OPERAND DESCRIPTOR 5
OPDLL    EQU   *-OPDL              LENGTH OF LIST
PRESENT  EQU   X'80'
QUOTED   EQU   X'40'
ATTNLST  STAX  ATTN,MF=L
ATTNLEN  EQU   *-ATTNLST
STATUS4  DS    XL1                 STILL MORE STATUS FLAGS
FLAGI    EQU   X'80'               INTERRUPT OCCURRED
DBUGSW   EQU   X'40'               DEBUG FORMAT DISPLAY REQUIRED
RFRSH    EQU   X'20'               SCREEN FORMAT REFRESH REQUIRED
CSRSW    EQU   X'18'               CURSOR SCROLLING ACTIVE
PGSW     EQU   X'10'               FULL PAGE SCROLLING ACTIVE
HFSW     EQU   X'08'               HALF PAGE SCROLLING ACTIVE
HELOKAY  EQU   X'04'               HEL IS AVAILABLE
HELYES   EQU   X'02'               HEL IS REQUESTED
HELPSW   EQU   X'01'               SHOW PFKS
SMFTYPE  DS    XL1                 SMF RECORD TYPE TO BE HIGHLIGHTED
STATUS5  DS    XL1                 AND SOME MORE STATUS FLAGS
DIDQRY   EQU   X'80'               TURNED ON IF QUERY WAS DONE
COLOR    EQU   X'40'               7-COLOUR DEFINITELY SUPPORTED
HILITE   EQU   X'20'               EXTENDED HILITING SURE IS OK
SYMSET   EQU   X'10'               SYMBOL SETS SUB-FIELD RETURNED
GEOK     EQU   X'08'               GRAPHIC ESCAPE DEFINITELY OK
X3270    EQU   X'04'               CURRENTLY USING 3270 EXTENSIONS
COLOR16  EQU   X'02'               SIXTEEN COLOUR TERMINAL
SETSIZED EQU   X'01'               RESTORE SCREEN SIZE ON EXIT
OSBITS   DS    XL1                 LOADED FROM CVTDCB
FMTCOLOR DS    XL1                 COLOUR FOR FORMATTED DATA
CHRCOLOR DS    XL1                 COLOUR FOR CHARACTER DATA
HEXCOLOR DS    XL1                 COLOUR FOR HEXADECIMAL DATA
ACTCOLOR DS    XL1                 COLOUR ACTIVE FOR NON-SMF DATA
BLKFACTR DS    F                   FIXED BLOCKING FACTOR
BLKSATRK DS    F                   NUMBER OF BLOCKS PER TRACK
MAXPOINT DS    F                   MAXIMUM BLOCK NUMBER FOR POINT
HOLDR    DS    F
READR    DS    F
DOWNR    DS    F
DEBLOCKS DS    3F
SCREENF  DS    F
TGETREGS DS    3F
TGETREG2 DS    3F                  FOR DEBUG                       ABL
OFFLDCNT DS    F                   FLAGGED-FOR-OFFLOAD (TAGGED) COUNT
SYNADSW  DS    F
SYNADMSG DS    CL78
STATUS6  DS    X                   AND EVEN MORE STATUS FLAGS
HELSW    EQU   X'80'               INVOKED AS FULLSCREEN HELP
HELFF    EQU   X'40'               PERFORMING HEL INITIAL POSITIONING
HELNEWM  EQU   X'20'               NEW MEMBER REQUESTED FOR HEL
HELNEWS  EQU   X'10'               NEW SUBCMD REQUESTED FOR HEL
HELX     EQU   X'08'               PERFORM XCTL TO TSO HELP COMMAND
HELPARS  EQU   X'04'               PROCESS PRIMARY INPUT AFTER SEARCH
HELALT   EQU   X'02'               MUST USE ALTERNATE HEL EP NAME
DB2TBL   EQU   X'01'               REVIEWING A DB2 TABLESPACE
STATUS7  DS    X                   FURTHER DIFFERENT STATUS FLAGS
FNOT     EQU   X'80'               FINDNOT COMMAND REQUESTED
EDITED   EQU   X'40'               SPF EDIT SAVED A MEMBER
TACKON   EQU   X'20'               CUT APPEND REQUESTED
CUTNUM   EQU   X'10'               NUMERIC OPERAND SUPPLIED
CUTWRD   EQU   X'08'               NON-NUMERIC OPERAND SUPPLIED
FALL     EQU   X'04'               FIND/FINDNOT ALL COMMAND REQUESTED
FANY     EQU   X'02'               FIND/FINDNOT ALL RECENTLY RESET
BELL     EQU   X'01'               SOUND BELL REQUEST FLAG
DEVDATA  DS    2F
JFCB     DS    0F,CL176
FMTAREA  DS    F                   RECORD FORMATTING DYNAMIC AREA ADDR
SNAPDW   DS    0F,(SNAPDL)X
SNAPLW   DS    0F,(SNAPLL)X
SNAPR    DS    4F
*        IHAARL PREFIX=ARL,DSECT=NO,DESCR=NO
ARL      DS    0F
ARLLEN   DS    H                   LENGTH OF THIS AREA - AT LEAST 36
ARLIDENT DS    CL2                 AREA ID - MUST BE 'AR'
ARLOPT1  DS    X                   OPTION BYTE - X'80'=AREA ABOVE LINE
ARLRSVD1 DS    XL7                 RESERVED - SHOULD BE ZERO
ARLRETRV DS    H                   DS # TO GET DATA FOR - 0 FOR ALL
ARLFIRST DS    H                   1ST DS # TO GET DATA FOR - 0/1=1ST
ARLAREA  DS    A                   ADDRESS OF ALLOC'N RETRIEVAL AREA
ARLPOOL  DS    HL1                 SUBPOOL - 0=>KEY 8-F, 230=>KEY 0-7
ARLRLEN  DS    FL3                 LENGTH OF ALLOC'N RETRIEVAL AREA
ARLRTRVD DS    H                   DS # FOR WHICH INFO WAS FETCHED
ARLCONC  DS    H                   DS # CONCATENATED IN DD
ARLRCODE DS    HL1                 REASON CODE
ARLRSVD2 DS    XL7                 RESERVED - SET BY RDJFCB
*        IHAARL MACRO CALL SUPPRESSED - EXPANDED ABOVE
RECALPTR DS    F                   RECALLED BUFFER POINTER
RECALUSE DS    F                   RECALL BUFFER FOR NEXT SAVE
PFKDISP  DS    CL1                 BYTE FOR TRACKING PFK DISPLAY
AMCASZ   DS    X                   TRACKS PER CONTROLAREA
AMBLKSZ  DS    H                   VSAM BLOCK SIZE
HSEACTIV DS    F                   ACTIVE HEL STATUS ELEMENT ADDRESS
*        EQU   X'80'               POINTER REALLY FOR PCX DATA, NOT HSE
REPLY    DS    CL256
PERIODS  DS    CL256
BLDL     DS    0H,CL80
         ORG   BLDL+4
BLDLNAME DS    CL8                 MEMBER NAME
BLDLTTRP DS    XL3                 MEMBER START TTR
BLDLCNCT DS    XL1                 CONCATENATION NUMBER
BLDLLIBF DS    XL1                 LOCATION CODE
BLDLINDC DS    XL1                 INDICATOR BYTE (ALIAS, ETC.)
BLDLTTRT DS    XL3                 TTR OF FIRST BLOCK OF PROGRAM TEXT
BLDLZERO DS    XL1                 ZERO BYTE
BLDLTTRN DS    XL3                 TTR OF NOTE LIST OR SCATTER TABLE
BLDLNL   DS    XL1                 NUMBER OF ENTRIES IN NOTE LIST
BLDLATR1 DS    XL1                 FIRST BYTE OF PROGRAM ATTRIBUTES
         ORG
OFFEND   DS    H                   OFFSET OF DATA START TO RIGHT OF PG
STATUS8  DS    X                   STATUS FLAGS WHICH SEEM LIKE DATA
*                                  BUT ARE REALLY ONLY STATUS FLAGS
DIVFULL  EQU   X'80'               DIV HAS FAILED TO STORE A RECORD
ISPF34   EQU   X'40'               VOLUME SUPPLIED FROM ZDLVOL
SCODE    EQU   X'20'               'S' MEMBER SELECTION JUST MADE
FUOL     EQU   X'10'               FIND UPPER OR LOWER CASE
FPIC     EQU   X'08'               FIND PICTURE STRING SPECIFIED
FCHR     EQU   X'04'               FIND CHARACTER STRING SPECIFIED
ZIPD     EQU   X'02'               NOW SHOWING ZIP FILE CENTRAL DIR
ZIPF     EQU   X'01'               ZIP FILE CONTENTS CAN BE UNZIPPED
PROFDATA DS    CL64                NON-PFK PROFILE DATA
PFKTAB   DS    24CL64              PFK PROFILE DATA (24 PFKS)
         DS    CL1                 NULL BYTE FOR END OF PFKTAB
PFKTABL  EQU   64                  LENGTH OF EACH ENTRY
RECLDPTH EQU   20                  STACK DEPTH (CHAIN LENGTH)
         DS    0F
RECALSTK DS    (RECLDPTH)XL60      RECALL BUFFER STACK (CHAIN)
*        DS    F                   FORWARD POINTER
*        DS    F                   BACKWARD POINTER
*        DS    H                   LENGTH OF RECALL DATA
*        DS    CL50                DATA TO BE RECALLED
RECALDLN EQU   50                  MAXIMUM LENGTH OF RECALL DATA
HOLDDIR  DS    290F                ENOUGH EVEN FOR 62 BY 160
DIRNUM   EQU   0
DIRLEN   EQU   4
DIRREC   EQU   8
DIRNXT   EQU   12
DIRTTR   EQU   16
DIRSIZ   EQU   20
SCREENW  DS    0D,64CL160          HANDLE 62 BY 160 PLUS ORDERS
@DATAEND DS    0D                  END OF DSECT
@DATAL   EQU   *-@DATA


@HSESECT DSECT ,                   HEL STATUS ELEMENT
HSELINK  DS    F                   POINTER TO OLDER HEL STATUS ELEMENT
HSETTRZ  DS    F                   TTRZ OF INTERRUPTED BLOCK
HSEDBLK  DS    XL12                DEBLOCKS AFTER )I RECORD
HSEMEMN  DS    CL8                 MEMBER NAME TO BE INCLUDED
         DS    0D                  END OF DSECT
@HSESIZE EQU   *-@HSESECT          HEL STATUS ELEMENT LENGTH


@FMTAREA DSECT ,                   RECORD FORMATTING DYNAMIC AREA
         DS    18F                 FORMATTING REGISTER SAVE AREA
FMTNAME  DS    CL8                 NAME OF CURRENT FORMAT
FMTBLKFM EQU   *,8                 FREEMAIN VALUES FOR READ BUFFER
FMTBLKSZ DS    F                   SIZE OF READ BUFFER
FMTBUFR  DS    F                   ADDRESS OF READ BUFFER
FMTSIZE  DS    F                   SUBPOOL AND SIZE OF THIS AREA
FMTRECAD DS    F                   ADDRESS OF NEXT LOGICAL RECORD
FMTBFEND DS    F                   ADDRESS OF END OF READ BUFFER
FMTFELAD DS    F                   ADDRESS OF NEXT SYMBOL SLOT
FMTELAST DS    F                   ADDRESS OF LAST ALLOWABLE FEL
FMTMLHLD DS    F                   MULTIPLIER HOLDING AREA
FMTORGCT DS    F                   BYTES TO GO BEFORE ORG IS CANCELLED
FMTDCB   DS    0F,XL(PDSDCBL)
FMTDECB  DS    0F,XL(DYNDECBL)
LEFTFEL  DS    F                   ADDRESS OF LEFT-MOST VISIBLE FEL
LEFTFELO DS    F                   OFFSET OF LEFT-MOST VISIBLE FEL
RITEFEL  DS    F                   ADDRESS OF RIGHT-MOST VISIBLE FEL
RITEFELO DS    F                   OFFSET OF RIGHT-MOST VISIBLE FEL
FSYNADMS DS    CL78                I/O ERROR MESSAGE
FMTFLAGS DS    X
FORG     EQU   X'80'               CURRENTLY IN ORG MODE - IGNORE DC/DS
FSYNADSW EQU   X'40'               REVFMTS I/O ERROR FLAG
FFSW     EQU   X'20'               FORMAT FIND START OR END FLAG
*        EQU   X'10'               SPARE
*        EQU   X'08'               SPARE
*        EQU   X'04'               SPARE
*        EQU   X'02'               SPARE
*        EQU   X'01'               SPARE
         DS    X                   SPARE
         DS    0D                  FORCE ALIGNMENT FOR FORMAT ELEMENTS
FELSYMNM EQU   0                   ENTRY OFFSET FOR SYMBOL NAME
FELSYMNL EQU   8                   MAXIMUM SYMBOL NAME LENGTH
FELSYMFG EQU   8                   ENTRY OFFSET FOR SYMBOL TYPE FLAGS
FELHEX   EQU   X'80'               ALWAYS SHOW IN HEX
FELBIN   EQU   X'40'               INTERPRET BINARY
FELDEC   EQU   X'20'               INTERPRET PACKED SIGN
FELUNS   EQU   X'08'               BINARY IS UNSIGNED
FELDS1   EQU   X'01'               EXTRA FORMATTING FOR DSCB-1 FIELD
FELSYMTY EQU   9                   ENTRY OFFSET FOR SYMBOL TYPE
FELSYMLN EQU   10                  ENTRY OFFSET FOR SYMBOL LENGTH
FELDSPLN EQU   12                  ENTRY OFFSET FOR DISPLAY LENGTH
FELDSPOF EQU   14                  ENTRY OFFSET FOR SCREEN OFFSET
FELSIZE  EQU   16                  LENGTH OF FORMATTING ELEMENT
FMTFELS  DS    0F                  REVIEW FORMAT SYMBOL SLOTS
@FMTLEN  EQU   8192                LENGTH OF FORMATTING DYNAMIC AREA
@FMTEND  EQU   @FMTAREA+@FMTLEN    END OF FORMATTING DYNAMIC AREA


@PCXWORK DSECT
         DS    18F                 REGISTER SAVE AREA
PCXSECSV DS    4F                  SECONDARY SAVE AREA
PCXWKLEN DS    F                   SIZE OF THIS AREA
PELLDCSR DS    F                   PIXEL LOAD CURSOR
PCXEOSCN DS    F                   END OF DECODED LINE ADDRESS
LINES2GO DS    F                   SCAN LINES LEFT TO READ FROM FILE
PCXSAVER DS    F                   RETURN ADDRESS SAVE AREA
PCXRUNLN DS    H                   DATA BYTE RUN-LENGTH
         DS    0D
PCXHDRWS DS    CL128               PCX HEADER HOLD AREA
PCXPAL16 DS    0XL48               16-COLOUR RGB PALETTE HOLD AREA
PCXPALET DS    XL768               256-COLOUR RGB PALETTE HOLD AREA
PCXSCNLN DS    0D                  SCAN LINE EXPANSION AREA
@PCXWKLN EQU   *-@PCXWORK          SIZE OF FIXED DYNAMIC AREA


@ZIPWORK DSECT ,                   ZIP DIRECTORY PROCESSOR WORK AREA
         DS    18F                 REGISTER SAVE AREA
ZIPBFLEN DS    F     \___________/ ZIP TRAILER ASSEMBLEY BUFFER LENGTH
ZIPBFADR DS    A     /           \ ZIP TRAILER ASSEMBLEY BUFFER ADDRESS
ZIPBFHWM DS    A                   ZIP TRAILER END POINTER
         DS    0D                  END OF DSECT
@ZIPWKLN EQU   *-@ZIPWORK


@UNZWORK DSECT ,                   UNZIP FRONT-END WORK AREA
         DS    18F                 REGISTER SAVE AREA
UNZPARM1 DS    0F
         DS    A                   -> FULLWORD TOKEN
         DS    A                   -> FUNCTION NUMBER
         DS    A                   -> MESSAGE BUFFER
         DS    A                   -> DDNAME
         DS    A                   -> PC FILENAME SELECTION CRITERIA
         DS    A                   -> FLAGS
         DS    A                   -> SELECTED FILE NAME
         DS    A                   -> TRANSLATE TABLE (0 FOR NO TABLE)
         DS    A                   -> DATE-TIME STAMP
         DS    A                   -> FILL CHARACTER
UNZPARM2 DS    0F
         DS    A                   -> FULLWORD TOKEN
         DS    A                   -> FUNCTION NUMBER
         DS    A                   -> MESSAGE BUFFER
         DS    A                   ->-> RECORD
         DS    A                   -> RECORD LENGTH
*
UNZTOKEN DS    F                   USED BY UNZIP PRODUCT
UNZFNCTN DS    F                   FUNCTION NUMBER
UNZMSGBF DS    CL128               MESSAGE BUFFER
UNZSELEN DS    H                   PC FILENAME SELECTION CRITERIA
UNZSELNM DS    CL256
UNZFILEN DS    H                   PC FILENAME RETURNED
UNZFILNM DS    CL256
UNZFLAGS DS    X                   FLAGS
UNZASCII EQU   4                   TRANSLATE FROM ASCII TO EBCDIC
UNZCRLF  EQU   8                   REMOVE CARRIAGE RETURN LINE FEED
UNZTRUNC EQU   32                  TRUNCATE INSTEAD OF WRAP RECORD
UNZRECAD DS    F                   -> RECORD
UNZRECLN DS    F                   RECORD LENGTH
UNZREC   DS    CL256               RECORD BUFFER
@UNZWKLN EQU   *-@UNZWORK


*ZIP OSFS FULLSIZE   PACKSIZE   CMP METH TX MODIFIED       FILE-NAME
*2.4 HPFS 200000000  100000000  50% RDUC A- YY/MM/DD HH:MM README.TXT
RZDE     DSECT                     REVIEW INTERNAL ZIP DIRECTORY ENTRY
RZDEVER  DS    CL4                 ZIP VERSION USED FOR COMPRESSION
RZDEOSFS DS    CL4                 OPERATING SYSTEM FILE SYSTEM
RZDESIZE DS    PL5                 UNCOMPRESSED FILE BYTE COUNT
RZDEPACK DS    PL5                 COMPRESSED FILE BYTE COUNT
RZDERDUC DS    CL4                 COMPRESSION REDUCTION PERCENTAGE
RZDEMETH DS    CL4    _________    COMPRESSION METHOD
RZDETYPE DS    C     /  UPPER  \   FILE TYPE
*        EQU   C'E' /  CASE IF  \  EBCDIC TEXT
*        EQU   C'A' \ ENCRYPTED /  ASCII TEXT
*        EQU   C'B'  \_________/   BINARY DATA
RZDEXTRA DS    C                   EXTRA FIELD STATUS
*        EQU   C'-'                NO EXTRA FIELDS
*        EQU   C'X' (LOWER CASE)   CENTRAL FILE HEADER HAS EXTRA FIELD
*        EQU   C'L' (LOWER CASE)   LOCAL FILE HDR HAS DATA DESCRIPTOR
*        EQU   C'X' (UPPER CASE)   BOTH OF THE ABOVE
RZDEDATE DS    CL8                 DATE FILE LAST MODIFIED
RZDETPAD DS    CL1                 C' '
RZDEHOUR DS    CL2                 HOUR FILE LAST MODIFIED
RZDETSEP DS    CL1                 C':'
RZDEMINS DS    CL2                 MINUTE FILE LAST MODIFIED
RZDEFIXL EQU   *-RZDE              LENGTH OF FIXED PART OF ENTRY
RZDEFNM  EQU   *                   FILE NAME

         TITLE '  Z I P   F I L E   D I R E C T O R Y   E N T R I E S '
ZCFH     DSECT                     ZIP CENTRAL FILE HEADER RECORD
ZCFHID   DC    XL4'504B0102'       CENTRAL FILE HEADER SIGNATURE
ZCFHVER  DS    XL1                 VERSION USED FOR COMPRESSION
ZCFHOSFS DS    XL1                 OPERATING SYSTEM FILE SYSTEM
ZCFHVERX DS    XL2                 VERSION NEEDED FOR EXTRACTION
ZCFHFLG1 DS    XL1                 GENERAL PURPOSE BIT FLAGS
ZENCRYPT EQU   X'01'               FILE IS ENCRYPTED
ZIDICT8K EQU   X'02'               IMPLODE USED 8K SLIDING DICTIONARY
ZI3SFTRE EQU   X'04'               IMPLODE USED 3 SHANNON-FANO TREES
ZDATADSC EQU   X'08'               DATA DESCRIPTOR PRESENT AFTER DATA
ZCFHFLG2 DS    XL1                 GENERAL PURPOSE BIT FLAGS
ZCFHMETH DS    XL2                 COMPRESSION METHOD
ZCFHTIME DS    XL2                 TIME FILE LAST MODIFIED
ZCFHDATE DS    XL2                 DATE FILE LAST MODIFIED
ZCFHCRC  DS    XL4                 CRC-32
ZCFHSZCM DS    XL4                 COMPRESSED SIZE
ZCFHSZUN DS    XL4                 UNCOMPRESSED SIZE
ZCFHNMLN DS    XL2                 FILE NAME LENGTH
ZCFHXFLN DS    XL2                 EXTRA FIELD LENGTH
ZCFHCMLN DS    XL2                 FILE COMMENT LENGTH
ZCFHDISK DS    XL2                 DISK NUMBER OF FILE START
ZCFHINAT DS    XL2                 INTERNAL FILE ATTRIBUTES
ZCFHBNRY EQU   0                   FILE CONTAINS BINARY DATA
ZCFHASCI EQU   1                   FILE CONTAINS ASCII TEXT
ZCFHEBCD EQU   2                   FILE CONTAINS EBCDIC TEXT
ZCFHEXAT DS    XL4                 EXTERNAL FILE ATTRIBUTES
ZCFHOFST DS    XL4                 RELATIVE OFFSET OF LOCAL HEADER
ZCFHNAME DS    0C                  VARIABLE-LENGTH FILE NAME
*        DS    0X                  VARIABLE-LENGTH EXTRA FIELD
*        DS    0C                  VARIABLE-LENGTH FILE COMMENT

ZEOC     DSECT                     ZIP END OF CENTRAL DIRECTORY RECORD
ZEOCID   DC    XL4'504B0506'       END OF CENTRAL DIRECTORY SIGNATURE
ZEOCDSKL DS    XL2                 NUMBER OF THIS (LAST) DISK
ZEOCDSKC DS    XL2                 DISK NUMBER OF CENTRAL DIR START
ZEOCENTD DS    XL2                 CENTRAL DIR ENTRY COUNT ON THIS DISK
ZEOCENTT DS    XL2                 TOTAL CENTRAL DIRECTORY ENTRY COUNT
ZEOCCDSZ DS    XL4                 SIZE OF THE CENTRAL DIRECTORY
ZEOCOFST DS    XL4                 CENTRAL DIRECTORY START OFFSET
ZEOCCMLN DS    XL2                 ZIP FILE COMMENT LENGTH
ZEOCMNLN EQU   *-ZEOC              MINIMUM LENGTH OF RECORD
ZEOCCMNT DS    0C                  VARIABLE-LENGTH ZIP FILE COMMENT

         TITLE '  P C X   F I L E   H E A D E R  '
PCXHDR   DSECT                     PCX PICTURE FILE HEADER
PCXMFR   DS    X                   "MANUFACTURER"
*        EQU   10                  ZSOFT (IE. PCX FORMAT FILE)
PCXVER   DS    X                   VERSION
*                              0 = VERSION 2.5 OF PC PAINTBRUSH
*                              2 = VERSION 2.8 WITH PALETTE INFORMATION
*                              3 = VERSION 2.8 W/O PALETTE INFORMATION
*                              4 = PC PAINTBRUSH FOR WINDOWS(PLUS FOR
*                                  WINDOWS USES VER 5)
*                              5 = VERSION 3.0 AND > OF PC PAINTBRUSH
*                                  AND PC PAINTBRUSH +, INCLUDES
*                                  PUBLISHER'S PAINTBRUSH . INCLUDES
*                                  24-BIT .PCX FILES
PCXMETHD DS    X                   ENCODING METHOD
*        EQU   0                   NO COMPRESSION (NEVER SEEN IT)
*        EQU   1                   LIMITED RLE (RUN LENGTH ENCODING)
PCXBITPP DS    X                   NUMBER OF BITS PER PIXEL PER PLANE
PCXWINDW DS    0XL8                IMAGE WINDOW DIMENSIONS
PCXXMIN  DS    XL2
PCXYMIN  DS    XL2
PCXXMAX  DS    XL2
PCXYMAX  DS    XL2
PCXHDPI  DS    XL2                 HORIZONTAL RESOLUTION DOTS PER INCH
PCXVDPI  DS    XL2                 VERTICAL RESOLUTION DOTS PER INCH
PCXCOLMP DS    16XL3               16-COLOUR RGB PALETTE
PCXRESV  DS    X                   SHOULD BE ZERO
PCXNPLNS DS    X                   NUMBER OF COLOUR PLANES
PCXBYTLN DS    XL2                 NUMBER OF BYTES PER SCANLINE
*                                  MUST BE EVEN - DON'T USE XMAX-XMIN+1
PCXPALIN DS    XL2                 PALETTE INTERPRETATION INFORMATION
*        EQU   1                   COLOUR OR BLACK-AND-WHITE
*        EQU   2                   GREYSCALE
PCXHSSIZ DS    XL2                 HORIZONTAL SIZE IN PIXELS      (NEW)
PCXVSSIZ DS    XL2                 VERTICAL SIZE IN PIXELS        (NEW)
PCXFILL  DS    XL54                REST OF HEADER - SHOULD BE ZERO
PCXDATA  DS    0X                  PICTURE DATA BEGINS HERE

*   IF PCXVER IS 5 OR MORE THEN A 256-COLOUR PALETTE MAY BE PRESENT.
*   IF THE 256-COLOUR PALETTE IS PRESENT THEN THE LAST 769 BYTES OF
*   THE FILE IS AL1(12) FOLLOWED BY 256 3-BYTE RGB VALUES.

         TITLE '  R E V I E W   -   A C B   W O R K   A R E A  '
@ACBDATA DSECT
         DS    18F                 WORKING SAVE AREA
ACBADDR  DS    F                   ADDRESS OF ACB
*XLSTADDR DS   F                   ADDRESS OF EXLST
RPLADDR  DS    F                   ADDRESS OF FIRST RPL
RPL2ADDR DS    F                   ADDRESS OF SECOND RPL
ACBRBA   DS    F                   SAVE AREA FOR VSAM RECORD RBA
ACBRECLN DS    F                   SAVE AREA FOR VSAM RECORD LENGTH
ACBCOUNT DS    F                   SAVE AREA FOR PREVIOUS COUNT VALUE
ACBIOMSG DS    CL128               ACB O/C AND RPL SYNAD MESSAGE AREA
VSAMKEY  DS    CL256               KEY HOLD AREA FOR KEYED ACCESS
@ACBWEND DS    0D
@ACBWLEN EQU   *-@ACBDATA
VSAMREC  EQU   *                   VSAM CLUSTER RECORD HOLD AREA
*ACB                               VSAM ACCESS CONTROL BLOCK
*EXLST                             VSAM EXIT LIST
*RPL                               VSAM REQUEST PARAMETER LIST
*HOLD                              SCREEN RECORDS HOLD AREA
*CHKPT                             RECORD CHECKPOINT TABLE


         COPY  REVSUBS             INCLUDE SUBROUTINE CSECTS
         TITLE '  R E V I E W   -   C O N T R O L   B L O C K S  '
IHADCB   DSECT
         DS    16XL1
DCBKEYLE DS    XL1
DCBTRTCH EQU   DCBKEYLE
DCBDEVT  DS    XL1
DCBDEN   DS    XL1
         DS    7XL1
DCBDSORG DS    XL2
         DS    4XL1
DCBBFTEK DS    XL1
DCBEODA  DS    AL3
DCBRECFM DS    X
DCBEXLSA DS    AL3
DCBDDNAM DS    CL8
DCBDEBAD EQU   *-4,4
DCBOFLGS DS    X
         DS    X
DCBMACF1 EQU   DCBDDNAM+2,1        SAME AS DCBMACR1 AFTER OPEN
DCBMACR1 DS    X
DCBMRPT1 EQU   X'04'
         DS    5XL1
         DS    X
DCBSYNA  DS    AL3
DCBBLKSI EQU   IHADCB+62,2
DCBLRECL EQU   IHADCB+82,2

         PRINT NOGEN

         IHASDWA VRAMAP=NO

         IKJCPPL

         IKJPPL

         IKJDFPB

         IKJUPT

         IKJIOPL

         IKJDAPL

         IKJDAP08

         IKJDAP18

         IKJDAP30

         IEFZB4D0

         IEFZB4D2

         IKJPSCB

         IKJECT

         PRINT GEN
         TITLE '  R E V I E W   -   E Q U A T E   C O N S T A N T S  '
WCCNULL  EQU   X'40'               NO ACTION WRITE CONTROL CHARACTER
WCCSTND  EQU   X'C1'               STANDARD WRITE CONTROL CHARACTER
WCCBELL  EQU   X'C5'               SOUND BELL WRITE CONTROL CHARACTER
GE       EQU   X'08'               GRAPHIC ESCAPE
SBA      EQU   X'11'               SET BUFFER ADDRESS
IC       EQU   X'13'               INSERT CURSOR
SF       EQU   X'1D'               START FIELD
SA       EQU   X'28'               SET ATTRIBUTE
SFE      EQU   X'29'               START FIELD EXTENDED
RA       EQU   X'3C'               REPEAT TO ADDRESS
HILT     EQU   X'41'               HIGHLIGHTING ATTRIBUTE
COLR     EQU   X'42'               COLOUR ATTRIBUTE
PROHI    EQU   X'E8'               PROTECTED HIGH INTENSITY
PROHIS   EQU   X'F8'               PROTECTED HIGH INTENSITY AUTOSKIP
PROLOS   EQU   X'F0'               PROTECTED LOW INTENSITY AUTOSKIP
UNPHI    EQU   X'C8'               UNPROTECTED HIGH INTENSITY (INPUT)
UNPHIM   EQU   X'C9'               UNPROTECTED HIGH MODIFIED  (INPUT)
NULL     EQU   X'00'               NORMAL / DEFAULT / ALL ATTRIBUTES
BLUE     EQU   X'F1'               BLUE
RED      EQU   X'F2'               RED
PINK     EQU   X'F3'               PINK
GREEN    EQU   X'F4'               GREEN
TURQOISE EQU   X'F5'               TURQUOISE
YELLOW   EQU   X'F6'               YELLOW
WHITE    EQU   X'F7'               WHITE, NEUTRAL
RVRSE    EQU   X'F2'               REVERSE VIDEO
USCR     EQU   X'F4'               UNDERSCORE
QUOTE    EQU   X'7D'               SINGLE QUOTE

R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15

         END   REVIEW
