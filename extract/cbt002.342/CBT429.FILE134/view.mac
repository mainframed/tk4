         TITLE ' V I E W  -  PERFORM A 3270 READ BUFFER '
***********************************************************************
*
*         THIS PROGRAM ACCEPTS A REQUEST FROM THE PROGRAM PARAMETER
*  AND ISSUES 370-ARCHITECTURE I/O INSTRUCTIONS ACCORDINGLY.  THE
*  PROGRAM PARAMETER MUST BE FIVE BYTES LONG, THE FIRST TWO BYTES
*  SPECIFYING THE REQUEST TYPE AND THE LAST THREE NOMINATING THE
*  ADDRESS OF THE I/O DEVICE TO BE INTERROGATED.
*
*         VALID REQUEST TYPES ARE:
*              ID - ISSUE A SENSE-ID TO ANY DEVICE TYPE OTHER
*                   THAN COMMUNICATIONS CLASS AND DISPLAY THE
*                   RESPONSE ON THE INVOKER'S TERMINAL.
*              RD - ISSUE A READ BUFFER TO A GRAPHIC DISPLAY CLASS
*                   DEVICE AND DISPLAY THE RESPONSE ON THE
*                   INVOKER'S TERMINAL WHICH HAS NO EXTENDED DATA
*                   STREAM SUPPORT.
*              RI - ISSUE A READ BUFFER TO GRAPHIC DISPLAY CLASS
*                   DEVICE AND DISPLAY THE RESPONSE ON THE
*                   INVOKER'S TERMINAL WHICH SUPPORTS THE IBM 3270
*                   EXTENDED DATA STREAM.
*              RF - ISSUE A READ BUFFER TO GRAPHIC DISPLAY CLASS
*                   DEVICE AND DISPLAY THE RESPONSE ON THE
*                   INVOKER'S TERMINAL WHICH SUPPORTS THE FACOM 6681
*                   EXTENDED DATA STREAM.
*
*         COMMUNICATIONS CLASS DEVICES ARE EXCLUDED BECAUSE THEY
*  GENERALLY DON'T SUPPORT SENSE ID AND ANY NON-VTAM I/O TO A CCP
*  WILL CAUSE NCP ERROR RECOVERY WHICH DISCONNECTS ALL ACTIVE NCP
*  SESSIONS.  TALKING TO A CTCA ISN'T LIKELY TO BE FRUITFUL EITHER.
*
*         THE UNIT ADDRESS SPECIFIED MUST HAVE AN OS UCB AND MUST HAVE
*  NON-ZERO DATA IN THE LAST-PATH-USED FIELD.
*
*         THE FOLLOWING NON-ZERO RETURN CODES MAY BE ISSUED:
*              12 - ZERO LAST-PATH-USED FIELD IN UCB WHICH INDICATES
*                   THAT MVS HAS NEVER TALKED TO THE DEVICE.
*              16 - INVALID REQUEST OR WRONG OPERATING SYSTEM.
*                   THE SPECIFIED UNIT MUST HAVE A UNIT CONTROL BLOCK
*                   AND MUST BE OF A DEVICE CLASS APPROPRIATE FOR THE
*                   REQUEST.  EXTENDED ARCHITECTURE IS NOT SUPPORTED.
*                   COMMUNICATION WITH INVOKER'S TERMINAL IS VIA
*                   TGET/TPUT (SVC 93) SO TSO OR TSS IS REQUIRED.
*              20 - THE PROGRAM IS NOT PAGE ALIGNED.  PROGRAM LOGIC
*                   DEPENDS UPON BEING LOADED ON A 4K BYTE BOUNDARY.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         PROGRAM SIZE = 4096 BYTES.
*                        EXECUTABLE CODE IS LESS THAN 2K WHICH
*                        ALLOWS A SCREEN BUFFER OF UP TO 2K.
*
*         THIS PROGRAM IS NOT RE-ENTRANT NOR SERIALLY REUSEABLE.
*
*         APF AUTHORIZATION IS REQUIRED.  (I'M NOT THAT CLEVER.)
*
*         PAGE ALIGNMENT IS REQUIRED.
*
*         PROGRAM ASSEMBLY REQUIRES MACROS FROM SYS1.MACLIB.
*
*         UNDER F4, A TERMTYPE MACRO IS ISSUED TO DETERMINE IF
*         F9526 EXTENDED ATTRIBUTES ARE SUPPORTED OR NOT.  THE
*         OUTPUT DATA STREAM IS ADJUSTED ACCORDINGLY.
*
*         AFTER A DISPLAY BUFFER IS SHOWN, THE USER MAY RESPOND WITH
*  PA2 TO RESHOW THE DISPLAYED DATA, ENTER TO PERFORM ANOTHER READ
*  BUFFER AND SHOW THE UPDATED DATA, OR ANY OTHER PA OR PF KEY TO EXIT.
*
*         UNDER MVS A PAGE FIX WILL ENSURE A REAL ADDRESS BELOW THE
*  16 MEGABYTE LINE.  BECAUSE FUJITSU HARDWARE HAS CHANNEL-DAT THIS
*  IS NOT THE CASE WITH F4.  IF, UNDER F4, THE PROGRAM IS FIXED ABOVE
*  THE 16 MEG (REAL) LINE THEN A TRANSFER (IN) VIRTUAL AND LOCK (TVL)
*  CCW HAS TO BE BUILT POINTING TO THE CHANNEL PROGRAM WHICH WILL NOW
*  USE VIRTUAL ADDRESSES.  A SUITABLE DOUBLEWORD IS STOLEN FROM THE
*  NUCLEUS (SINCE IT IS UNLIKELY TO BE A BUFFER FOR A CONCURRENT I/O
*  OPERATION) FOR THIS PURPOSE, ITS DATA BEING SAVED AND RESTORED
*  AFTERWARDS.  (ANOTHER ADVANTAGE OF THE NUCLEUS IS THAT V=R.)  DAT IS
*  NOT DISABLED BY THIS PROGRAM WHEN CHANNEL-DAT IS TO BE USED.
*
*         THIS PROGRAM IS MOST CONVENIENTLY INVOKED FROM AN APF
*  AUTHORIZED COPY OF THE $ COMMAND.  PARAMETER HANDLING COULD BE
*  ALTERED TO MAKE IT A TSO/TSS COMMAND.  NOPR INSTRUCTIONS BELOW
*  COULD BE REPLACED WITH USER SVC CALLS IF DESIRED.
*
*         WRITTEN BY GREG PRICE OF PRYCROFT SIX PTY. LTD. - NOV 1988.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         TECHO TRIVIA - DIS AND DAT
*
*         F4 IOS BEGINS ITS CHANNEL PROGRAMS WITH EITHER A TL (TRANSFER
*  AND LOCK) OR A TVL (TRANSFER VIRTUAL AND LOCK) CCW (CHANNEL COMMAND
*  WORD).  WHEN ACTIVATED BY AN I/O INSTRUCTION, A SUBCHANNEL COMMENCES
*  OPERATION IN REAL ADDRESSING MODE.  IT CAN BE LOCKED INTO REAL
*  ADDRESSING FOR THE ENTIRE CHANNEL PROGRAM BY A TL CCW.  A TVL CCW
*  CAUSES THE SECOND WORD OF THE TVL CCW TO BE STORED AS AN STW
*  (SUBCHANNEL TRANSFORMATION WORD) IN THE SUBCHANNEL.  THE SUBCHANNEL
*  THEN ENTERS VIRTUAL ADDRESSING MODE AND REMAINS LOCKED IN THIS MODE
*  DURING CHAINED OPERATIONS FOR THE INSTRUCTION SEQUENCE.  THE STW
*  CONTAINS THE SEGMENT TABLE LENGTH, THE REAL SEQMENT TABLE ORIGIN
*  AND CODE BITS INDICATING PAGE AND SEGMENT SIZES.  THE SECOND WORD
*  OF A TL CCW IS UNUSED.  THE FIRST WORD OF BOTH CCWS CONTAINS THE
*  COMMAND CODE (X'10' FOR TVL, X'20' FOR TL, BOTH OF WHICH ARE
*  INVALID UNDER SYSTEM/370) AND THE NEXT CCW ADDRESS (REAL FOR TL,
*  VIRTUAL FOR TVL) BECAUSE BOTH CCWS INCORPORATE THE TIC (TRANSFER
*  IN CHANNEL) FUNCTION.  PRESUMABLY TL CCWS ARE USED SO THAT GARBAGE
*  WHICH LOOKS LIKE A TVL CCW WILL BE REJECTED AS GARBAGE.  CHANNEL
*  PROGRAMS WITHOUT A TL OR TVL CCW BEHAVE AS PER SYSTEM/370.  THE
*  SUBCHANNEL RE-TRANSLATES VIRTUAL ADDRESSES TO REAL WHENEVER DATA
*  ADDRESSES CROSS PAGE BOUNDARIES, SO CHANNEL DAT MEANS THAT REAL
*  CHANNEL PROGRAMS DO NOT HAVE TO BE BUILT FROM USER VIRTUAL CHANNEL
*  PROGRAMS AND IDAW (INDIRECT ADDRESS WORD) LISTS DO NOT HAVE TO BE
*  BUILT WHEN I/O BUFFERS ARE NOT IN CONTIGUOUS MAIN STORAGE.
*
***********************************************************************
         EJECT
VIEW     CSECT
         STM   R14,R12,12(R13)
         LA    R12,0(,R15)         ENSURE ADDRESS FORMAT.
         USING VIEW,R12
         SRL   R15,12
         SLL   R15,12
         CR    R12,R15
         BE    ALIGNOK
         LA    R15,20              RC = 20, NOT PAGE ALIGNED.
EXITRC   L     R14,12(,R13)        RESTORE RETURN ADDRESS.
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS.
         BR    R14                 RETURN TO CALLER.
ALIGNOK  LA    R15,16              RC = 16, INVALID REQUEST, WRONG OS.
         ICM   R1,15,0(R1)         GET PARAMETER ADDRESS.
         BNM   EXITRC              NOT THE LAST PARAMETER SO EXIT.
         CLI   0(R1),0             PARAMETER LENGTH < 256?
         BNE   EXITRC              NO, SO EXIT.
         CLI   1(R1),5             PARAMETER LENGTH OF FIVE?
         BNE   EXITRC              NO, SO EXIT.
         MVC   UCBNAME,4(R1)       YES, GET THE SPECIFIED UNIT ADDRESS.
         CLI   2(R1),C'I'          SENSE ID REQUEST?
         BNE   READBUFR            NO.
         CLI   3(R1),C'D'
         BNE   EXITRC              NO, INVALID PARAMETER.
         OI    FLAGS,SNSID         YES, DON'T FORGET.
         B     IDORNOT             NOW HAVE REQUEST TYPE.
READBUFR CLI   2(R1),C'R'          READ BUFFER REQUEST?
         BNE   EXITRC              NO, INVALID REQUEST TYPE.
         CLI   3(R1),C'D'          PLAIN READ REQUEST?
         BE    IDORNOT             YES.
         MVI   SACHAR,X'28'        IBM 3270 SET ATTRIBUTE CODE.
         MVI   SFECHAR,X'29'       IBM 3270 START FIELD EXTENDED.
         CLI   3(R1),C'I'          IBM 3270 EXTENSIONS REQUESTED?
         BE    IDORNOT             YES.
         MVI   SACHAR,X'0E'        FACOM 6682 SET ATTRIBUTE CODE.
         MVI   SFECHAR,X'0F'       FACOM 6682 START FIELD EXTENDED.
         CLI   3(R1),C'F'          FACOM 6682 EXTENSIONS REQUESTED?
         BNE   EXITRC              NO, INVALID PARAMETER.
IDORNOT  SLR   R3,R3               CLEAR UCB ADDRESS POINTER.
         L     R4,16               POINT TO THE CVT.
         CLI   116(R4),X'13'       MVS/370?
         BE    OSOKAY              YES, OPERATING SYSTEM IS SUPPORTED.
         CLI   116(R4),X'12'       OSIV/F4?
         BNE   EXITRC              NO, INVALID OPERATING SYSTEM.
         CLC   SIXTNMEG,312(R4)    YES, MORE THAN SIXTEEN MEG REAL?
         BNL   F9526CHK            NO, CAN'T BE PAGE-FIXED OVER 16MEG.
         OI    FLAGS,CHNDAT        YES, USE CHANNEL DAT AND STAY V=V.
F9526CHK TERMTYPE TERMIDL=BUFFER   GET TERMINAL TYPE DETAILS.
         LA    R15,16              RC = 16, INVALID REQUEST, WRONG OS.
         ST    R1,WORK             ASSUME 8 IN LOW BYTE OF R0.
         TM    WORK+2,X'60'        ON A F9526 TERMINAL?
         BZ    OSOKAY              NO, SHOULD BE A F9525/3270 TYPE.
         OI    FLAGS,F9526         YES, DON'T FORGET IT.
OSOKAY   L     R4,40(,R4)          POINT TO THE UCB LOOKUP TABLE.
         B     FIRSTUCB            PROCESS THE FIRST UCB ADDRESS.
NEXTUCB  LA    R4,2(,R4)           POINT TO THE NEXT UCB ADDRESS.
FIRSTUCB CLC   FFFF,0(R4)          END OF THE UCB LOOKUP TABLE?
         BE    EXITRC              YES, REQUESTED UNIT NOT FOUND.
         ICM   R3,3,0(R4)          LOAD THE UCB ADDRESS.
         BZ    NEXTUCB             GET THE NEXT ONE IF THIS IS EMPTY.
         CLI   2(R3),X'FF'         STANDARD UCB?
         BNE   NEXTUCB             NO, TRY THE NEXT ONE.
         CLC   UCBNAME,13(R3)      FOUND THE REQUESTED UNIT?
         BNE   NEXTUCB             NO, TRY THE NEXT ONE.
         TM    FLAGS,SNSID         ARE WE SENSING ID?
         BO    DEVOKAY             YES, CONTINUE.
         CLI   18(R3),X'10'        GRAPHIC DISPLAY UNIT?
         BNE   EXITRC              NO, INVALID UNIT TYPE.
DEVOKAY  CLI   18(R3),X'40'        COMMUNICATION DEVICE CLASS?
         BE    EXITRC              YES, AVOID NCP RECOVERY.
         LA    R15,12              RC = 12, UNIT WAS NEVER THERE.
         SLR   R4,R4               CLEAR I/O ADDRESS.
         ICM   R4,3,4(R3)          LOAD PATH OF LAST I/O.
         BZ    EXITRC              PITY ABOUT UNIT=000.
         TESTAUTH FCTN=1           APF AUTHORIZED?
         LTR   R15,R15
         BZ    AUTHOK              YES.
NOAUTH   LA    R1,999              LOAD AUTHORIZATION CODE.
         NOPR  0                   ISSUE USER "MAGIC" SVC.
         B     AUTHON
AUTHOK   OI    FLAGS,AUTH          REMEMBER AC=1.
AUTHON   DS    0H
         MODESET MF=(E,MDSTSUP0)   GET INTO SUPER STATE AND KEY ZERO.
         XC    ECB,ECB             YOU KNOW ABOUT ECBS....
         LR    R1,R12              GET THE ADDRESS OF THIS PAGE.
         LA    R15,1
         LA    R15,4095(R15,R1)    GET END OF THIS PAGE PLUS ONE.
         LA    R0,ECB              POINT TO THE ECB.
         PGFIX R,A=(1),EA=(15),ECB=(0),LONG=N
         WAIT  1,ECB=ECB           WAIT FOR THE PGFIX.
         TM    FLAGS,CHNDAT        IS CHANNEL DAT TO BE USED?
         BZ    DATAWAY             NO, PAGE-FIXED BELOW 16MB REAL.
         STNSM STOSM+1,X'0C'       YES, ONLY LEAVE AE AND DAT ON.
*        24-BIT AMODE PROGRAM SO AE BIT SHOULD BE OFF, BUT NOW IS
*        NOT THE TIME TO START UPSETTING ANY STORAGE ADDRESSABILITY.
         L     R1,16               GET THE CVT ADDRESS.
         LA    R0,8                GET THE SIZE OF A DOUBLEWORD.
         SR    R1,R0               POINT INTO CVT PREFIX.
         SRL   R1,3
         SLL   R1,3                ENSURE ON A DOUBLEWORD BOUNDARY.
         ST    R1,NUCDWADR         SAVE THE DOUBLEWORD'S ADDRESS.
         MVC   NUCDBLWD,0(R1)      SAVE ITS CONTENTS (OS EYE-CATCHER).
         STCTL R0,R1,WORK          GET CONTROL REGISTERS 0 AND 1.
         L     R0,WORK             LOAD CONTROL REGISTER 0 CONTENTS.
         SLL   R0,8                DROP OFF BITS 0 TO 7.
         SRL   R0,27               DROP OFF BITS 13 TO 31.
         SLL   R0,1                POSITION TRANSLATION FORMAT BITS.
         NI    WORK+7,X'C0'        THEY WERE PROBABLY ZERO ANYWAY.
         O     R0,WORK+4           GATE IN SEGMENT TABLE SIZE + ORIGIN.
         ST    R0,4(,R1)           SAVE SUBCHANNEL TRANSFORMATION WORD.
         B     REALCORE            GO DETERMINE CHANNEL PROGRAM.
DATAWAY  LA    R0,DATNOWON         GET V=V "RETURN" ADDRESS.
         ST    R0,PSWVIRT+4        PLACE IT IN PSW INSTRUCTION ADDRESS.
         LRA   R0,REALCORE         GET REAL "ENTRY POINT" ADDRESS.
         ST    R0,PSWREAL+4        PLACE IT IN PSW INSTRUCTION ADDRESS.
         STOSM PSWVIRT,X'00'       REMEMBER CURRENT SYSTEM MASK.
         LPSW  PSWREAL             I HAVE CONTROL.
         DROP  R12                 NOW NO SUCH THING AS VIRTUAL.
REALCORE BALR  R11,0               GET REAL.
         USING *,R11
         LA    R1,CCWSNSID         POINT TO THE SENSE-ID CCW.
         TM    FLAGS,SNSID         RIGHT ONE?
         BO    GOTCCW              YES.
         LA    R1,CCWRDBUF         NO, DOING A READ BUFFER.
GOTCCW   LA    R2,BUFFER           GET I/O BUFFER ADDRESS.
         STCM  R2,7,1(R1)          PUT IT INTO THE CCW.
         TM    FLAGS,CHNDAT        USING CHANNEL DAT?
         BZ    S370IO              NO.
         L     R2,NUCDWADR         POINT TO THAT STOLEN DOUBLEWORD.
         ST    R1,0(,R2)           SUPPLY CCW ADDRESS.
         MVI   0(R2),X'10'         SUPPLY TVL COMMAND CODE.
         LRA   R2,0(,R2)           JUST IN CASE NUCLEUS V^=R.
         ST    R2,72               LOAD THE CAW.
         B     REDRIVE             GO USE CHANNEL DAT.
S370IO   ST    R1,72               LOAD THE CAW.
REDRIVE  SIO   0(R4)               START I/O DOWN LAST PATH USED.
         BC    8,SIODONE           SIO WAS ACCEPTED.
         BC    4,SIOCSW            CSW STATUS WAS STORED.
         BC    2,SIOBUSY           CHANNEL/SUBCHANNEL WAS BUSY.
DEVDOWN  OI    FLAGS,NOTOPER       THE DEVICE IS NOT OPERATIONAL.
         B     ABDICATE            LET THE OS HAVE THE CPU BACK.
SIOCSW   CLI   68,X'10'            DEVICE BUSY THE ONLY PROBLEM?
         BE    SIOBUSY             YES, SAME AS PATH BUSY.
         TM    68,X'02'            UNIT CHECK?
         BO    TIOCROOK            YES, TIO WILL NOT BE DONE.
         TM    FLAGS,CLRD          TRIED TO CLEAR I/O BEFORE?
         BO    SIODEAD             YES, FORGET IT.
         OI    FLAGS,CLRD          NO, HAVE NOW THOUGH.
         CLRIO 0(R4)               ATTEMPT TO FLUSH EXCEPTION.
         BAL   R14,VIEWSPIN        SPIN A BIT JUST IN CASE.
         B     REDRIVE             RETRY START I/O.
SIODEAD  OI    FLAGS,CSWST         NO, FLAG CSW STATUS STORED.
         MVC   CSWSTAT,68          SAVE THE CSW STATUS BYTES.
         B     ABDICATE            GIVE UP.
VIEWSPIN LA    R0,4095             THINK OF A NUMBER.
         SLL   R0,2                MULTIPLY IT BY FOUR.
         BCT   R0,*                SPIN WAIT.
         BR    R14                 RETURN.
SIOBUSY  LA    R0,1
         AH    R0,WORK+6
         STH   R0,WORK+6
         MVI   WORK+5,C'1'
         CLI   WORK+7,100
         BH    SIODEAD             DESPAIR....
         BAL   R14,VIEWSPIN        SPIN A BIT.
         B     REDRIVE             REDRIVE THE I/O.
TIOBUSY  LA    R0,1
         AH    R0,WORK+6
         STH   R0,WORK+6
         MVI   WORK+5,C'2'
         CLI   WORK+7,100
         BH    SIODEAD             DESPAIR....
         BAL   R14,VIEWSPIN        WAIT FOR THE I/O A BIT.
SIODONE  TIO   0(R4)               TEST FOR I/O INTERRUPT PENDING.
         BC    8,REDRIVE           WHAT HAPPENED TO THE INTERRUPT??
         BC    2,TIOBUSY           STILL BUSY SO WAIT A BIT.
         BC    1,DEVDOWN           NOW HE #^%*& TELLS ME!!
         TM    68,X'08'            CHANNEL END?
         BZ    NOTCE               NO.
         MVC   CSWRESID,70         YES, SAVE THE RESIDUAL BYTE COUNT.
NOTCE    TM    68,X'C3'            ANYTHING UNTOWARD?
         BNZ   TIOCROOK            YES.
         TM    68,X'04'            DEVICE END?
         BO    ABDICATE            YES, END OF I/O.
         B     SIODONE             NO, WAIT FOR DEVICE END.
TIOCROOK OI    FLAGS,CSWST         FLAG CSW STATUS STORED.
         MVC   CSWSTAT,68          SAVE THE CSW STATUS BYTES.
         TM    68,X'02'            UNIT CHECK?
         BZ    ABDICATE            NO.
         TM    FLAGS,BASICSNS      YES, HAS A SENSE ALREADY BEEN DONE?
         BO    ABDICATE            YES, GIVE UP.
         LA    R1,CCWBASNS         NO, POINT TO THE BASIC SENSE CCW.
         OI    FLAGS,BASICSNS      REMEMBER THAT A SENSE WAS DONE.
         NI    FLAGS,255-SNSID     REMEMBER THAT A SENSE-ID WASN'T.
         B     GOTCCW              PERFORM THE SENSE.
ABDICATE TM    FLAGS,CHNDAT        WAS CHANNEL DAT USED?
         BO    FIXUPNUC            YES, GO REPAIR THE NUCLEUS.
         LPSW  PSWVIRT             NO, REVERT TO V=V USER.
FIXUPNUC L     R1,NUCDWADR         YES, GET ADDRESS OF STOLEN DW.
         MVC   0(8,R1),NUCDBLWD    RESTORE OS EYE-CATCHER.
STOSM    STOSM WORK,X'07'          ENABLE INTRPTS (ALTERED BY STNSM).
         DROP  R11
         USING VIEW,R12
DATNOWON LR    R1,R12              GET THE ADDRESS OF THIS PAGE.
         LA    R15,1
         LA    R15,4095(R15,R1)    GET END OF THIS PAGE PLUS ONE.
         PGFREE R,A=(1),EA=(15)    UNDO THE PAGE-FIX.
         MODESET MF=(E,MDSTPROB)   BACK TO PLEBBIE MODE.
         TM    FLAGS,AUTH          APF'D?
         BO    AUTHOFF             YES.
         LA    R1,0                NO, UNDO USER SVC.
         NOPR  0
AUTHOFF  TM    FLAGS,SNSID+NOTOPER+CSWST+BASICSNS
         BZ    REDBUFER            READ BUFFER WAS PERFORMED.
         LA    R1,BUFFER+8         GET THE START OF THE TPUT BUFFER.
         LR    R2,R1               INITIALIZE BUFFER POINTER.
         MVC   0(3,R2),13(R3)      SUPPLY THE UCB NAME.
         MVI   3(R2),C'-'
         UNPK  4(9,R2),16(5,R3)    UNPACK UCBTYP.
         TR    4(8,R2),HEX-C'0'    MAKE DISPLAYABLE.
         MVI   12(R2),C' '         ERASE GARBAGE.
         TM    FLAGS,NOTOPER       UNIT OPERATIONAL?
         BZ    UNITOPER            YES.
         MVC   13(15,R2),=CL15'NOT OPERATIONAL'
         LA    R2,28(,R2)          ADJUST BUFFER POINTER.
         B     SHOWLINE            DISPLAY MESSAGE.
UNITOPER TM    FLAGS,CSWST         CSW STATUS TO BE REPORTED?
         BZ    SHOWSENS            NO, SHOW SENSID RESULTS.
         MVC   13(13,R2),=CL13'CSW STATUS = '
         UNPK  26(5,R2),CSWSTAT(3)
         TR    26(4,R2),HEX-C'0'
         LA    R2,30(,R2)          ADJUST BUFFER POINTER.
         LA    R0,16               SIXTEEN BITS TO TEST.
         LA    R5,UNITSTAT         POINT TO "MEANINGFUL" CHARACTERS.
         ICM   R15,12,CSWSTAT      LOAD CSW STATUS FLAGS.
CSWLOOP  LTR   R15,R15             TEST THE TOP BIT.
         BNM   CSBITOFF            IT IS NOT ON.
         MVC   0(5,R2),0(R5)       BIT ON SO LOAD "MEANING".
         LA    R2,5(,R2)           ADJUST BUFFER POINTER.
CSBITOFF LA    R5,5(,R5)           POINT TO NEXT BIT'S ACRONYM.
         SLL   R15,1               PROMOTE NEXT BIT.
         BCT   R0,CSWLOOP          TEST NEXT BIT.
         B     SHOWLINE            DONE ALL BITS SO SHOW RESULT.
SHOWSENS MVC   13(11,R2),=CL11'SENSE-ID = '
         UNPK  24(15,R2),BUFFER(8)
         TR    24(14,R2),HEX-C'0'
         LA    R15,7               GET SENSE CCW COUNT.
         SH    R15,CSWRESID        GET THE BYTE COUNT OF DATA READ.
         SLL   R15,1               DOUBLE IT FOR UNPACKED FORMAT.
         LA    R2,24(R15,R2)       ADJUST THE BUFFER POINTER.
SHOWLINE LR    R0,R2               POINT PAST END OF TPUT DATA.
         SR    R0,R1               GET TPUT DATA LENGTH.
         TPUT  (1),(0),R           SHOW THE RESULTS.
         TM    FLAGS,BASICSNS      WAS A BASIC SENSE PERFORMED?
         BZ    NOSNSDAT            NO.
         LA    R1,BUFFER+8         GET THE START OF THE TPUT BUFFER.
         LR    R2,R1               INITIALIZE BUFFER POINTER.
         MVC   13(13,R2),=CL13'SENSE BYTE = '
         UNPK  26(3,R2),BUFFER(2)  UNPACK THE SENSE BYTE.
         TR    26(2,R2),HEX-C'0'
         LA    R2,28(,R2)          ADJUST BUFFER POINTER.
         LA    R0,8                EIGHT BITS TO TEST.
         LA    R5,SENSSTAT         POINT TO "MEANINGFUL" CHARACTERS.
         ICM   R15,8,BUFFER        LOAD SENSE BYTE.
SENSLOOP LTR   R15,R15             TEST THE TOP BIT.
         BNM   SNBITOFF            IT IS NOT ON.
         MVC   0(8,R2),0(R5)       BIT ON SO LOAD "MEANING".
         LA    R2,8(,R2)           ADJUST BUFFER POINTER.
SNBITOFF LA    R5,8(,R5)           POINT TO NEXT BIT'S ACRONYM.
         SLL   R15,1               PROMOTE NEXT BIT.
         BCT   R0,SENSLOOP         TEST NEXT BIT.
         LR    R0,R2               POINT PAST END OF TPUT DATA.
         SR    R0,R1               GET TPUT DATA LENGTH.
         TPUT  (1),(0),R           SHOW THE BASIC SENSE RESULTS.
NOSNSDAT CLI   WORK+7,9            ANYTHING MORE TO SHOW?
         BL    EXITRC              NO, EXIT WITH TPUT RETURN CODE.
         MVI   BUFFER+4,C'-'
         MVC   BUFFER+5(1),WORK+5
         LH    R0,WORK+6
         CVD   R0,WORK
         MVC   BUFFER(4),=X'40202120'
         ED    BUFFER(4),WORK+6
         LA    R1,BUFFER
         LA    R0,6
         TPUT  (1),(0),R
         B     EXITRC              EXIT WITH TPUT RETURN CODE.
REDBUFER LA    R5,2048             GET READ CCW COUNT.
         SH    R5,CSWRESID         GET THE BYTE COUNT OF DATA READ.
         LA    R1,BUFFER           POINT TO THE I/O BUFFER.
         LR    R15,R1              COPY IT.
         LR    R2,R5               GET THE DATA STREAM LENGTH.
BYTELOOP CLI   0(R15),X'1B'        F9526 SFE?
         BE    SFE9526             YES, HANDLE IT.
         CLI   0(R15),X'29'        IBM SFE?
         BE    SFE                 YES, HANDLE IT.
         CLI   0(R15),X'0F'        FACOM SFE?
         BE    SFE                 YES, HANDLE IT.
         CLI   0(R15),X'28'        IBM SA?
         BE    SA                  YES, HANDLE IT.
         CLI   0(R15),X'0E'        FACOM SA?
         BE    SA                  YES, HANDLE IT.
NEXTBYTE LA    R15,1(,R15)         POINT TO NEXT BYTE.
         BCT   R2,BYTELOOP         PROCESS IT.
         LA    R2,0(R5,R1)         POINT PAST LAST DATA BYTE.
         MVI   0(R2),X'11'         SUPPLY A SET-BUFFER-ADDRESS.
         MVC   1(2,R2),1(R1)       COPY THE CURSOR ADDRESS.
         MVI   3(R2),X'13'         SUPPLY AN INSERT-CURSOR.
         MVC   1(2,R1),=X'F5C3'    SUPPLY ERASE-WRITE, WCC.
         LA    R5,3(,R5)           GET THE LENGTH OF THE DATA STREAM.
         LA    R4,BUFFER+1         POINT TO VTAM WRITE COMMAND.
         STM   R4,R5,WORK          SAVE FOR RESHOW.
RESHOW   TPUT  (4),(5),NOEDIT,MF=(E,TPUTNOED) SHOW TARGET SCREEN IMAGE.
         LA    R1,BUFFER           POINT TO THE INPUT BUFFER.
         LA    R0,2048             THIS SHOULD BE BIG ENOUGH.
         ICM   R1,8,TGETFLAG       LOAD TGET ASIS FLAGS.
         TGET  (1),(0),R           WAIT FOR SOME INPUT.
         STLINENO LINE=1           GET THE SCREEN CLEARED UPON EXIT.
         CLI   BUFFER,X'6E'        PA2?
         BNE   NORESHOW            NO, NOT A REQUEST FOR SCREEN RESHOW.
         LM    R4,R5,WORK          YES, RESTORE TPUT REGISTERS.
         B     RESHOW              RESHOW THE SCREEN IMAGE.
NORESHOW CLI   BUFFER,X'7D'        ENTER?
         BNE   EXITRC              NO, EXIT WITH TGET RETURN CODE.
         XC    WORK,WORK           RESET SPIN COUNTER.
         SLR   R4,R4               CLEAR I/O ADDRESS.
         ICM   R4,3,4(R3)          LOAD PATH OF LAST I/O.
         TM    FLAGS,AUTH          YES, APF AUTHORIZED?
         BO    AUTHOK              YES, LOOP BACK TO MODESET.
         B     NOAUTH              NO, LOOP BACK TO USER SVC.
SFE9526  TM    FLAGS,F9526         F9526 SCREEN?
         BO    ORDEROK             YES.
         MVI   0(R15),X'1D'        NO, REPLACE SFE WITH SF.
         MVI   2(R15),X'13'        DISCARD EXTENDED ATTRIBUTE BYTE.
ORDEROK  LA    R15,2(,R15)         ADJUST POINTER.
         BCTR  R2,0                DECREMENT COUNTER.
         BCTR  R2,0
         B     NEXTBYTE            CONTINUE DATA SCAN.
SFE      MVC   0(1,R15),SFECHAR    SUPPLY CORRECT SFE.
         B     ORDEROK
SA       MVC   0(1,R15),SACHAR     SUPPLY CORRECT SA.
         B     ORDEROK
MDSTSUP0 MODESET MODE=SUP,KEY=ZERO,MF=L
MDSTPROB MODESET MODE=PROB,KEY=NZERO,MF=L
TPUTNOED TPUT  0,0,NOEDIT,WAIT,MF=L
WORK     DC    D'0'
NUCDBLWD DC    D'0'                SAVE AREA FOR STOLEN NUCLEUS DW.
PSWREAL  DC    X'000C000000000000' PSW TO TURN DAT OFF.
PSWVIRT  DC    X'070C000000000000' PSW TO TURN DAT ON.
CCWSNSID CCW   X'E4',0,X'20',7     SENSE-ID (WITH SLI).
CCWBASNS CCW   X'04',0,X'20',2     BASIC SENSE (WITH SLI).
CCWRDBUF CCW   X'02',0,X'20',2048  READ (3270 READ-BUFFER WITH SLI).
HEX      DC    C'0123456789ABCDEF'
UNITSTAT DC    C'-ATTN-STMD--CUE-BUSY---CE---DE-UCHK-UEXC'
CHANSTAT DC    C'--PCI-LENG-PROG-PROT--CDC--CCC--ICC-CHNG'
SENSSTAT DC    C' CMD-REJ INT-REQ BUS-OUT EQU-CHK'
         DC    C' DAT-CHK OVR-RUN CTL-CHK OPR-CHK'
NUCDWADR DC    F'0'                ADDRESS OF STOLEN NUCLEUS DW.
SIXTNMEG DC    F'16777216'         SIXTEEN MEG.
ECB      DC    F'0'                WAIT EVENT CONTROL BLOCK.
CSWRESID DC    H'0'                CSW RESIDUAL BYTE COUNT.
CSWSTAT  DC    H'0'                CSW STATUS BYTES.
SACHAR   DC    X'13'               CODE TO BE USED FOR SA.
SFECHAR  DC    X'13'               CODE TO BE USED FOR SFE.
FFFF     DC    X'FFFF'
UCBNAME  DC    CL3' '              UCB NAME OF REQUESTED UNIT.
FLAGS    DC    X'00'               STATUS FLAG BYTE.
SNSID    EQU   X'80'               SENSE-ID IS REQUESTED.
NOTOPER  EQU   X'40'               THE UNIT IS NOT OPERATIONAL.
CSWST    EQU   X'20'               CSW STATUS FLAG BYTES ARE SAVED.
CLRD     EQU   X'10'               CLRIO HAS BEEN ISSUED.
CHNDAT   EQU   X'08'               CHANNEL DAT IS TO BE USED.
F9526    EQU   X'04'               VIEWER IS ON A F9526 TERMINAL.
AUTH     EQU   X'02'               VIEW IS APF AUTHORIZED.
BASICSNS EQU   X'01'               BASIC SENSE WAS SENT.
TGETFLAG DC    X'81'               FLAG BYTE FOR TGET ASIS,WAIT.
         LTORG
BUFFER   DS    0D                  I/O BUFFER.
         ORG   VIEW+4096
         DS    0D                  END OF CSECT.
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
