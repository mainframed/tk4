XPRNTSUB TITLE 'XPRNTSUB - GENERAL PRINTING SUBROUTINE'
         SPACE 2
* AUTHOR:  R. F. MORSE, MIT INSTRUMENTATION LABORATORY
         SPACE
* FUNCTION/OPERATION:  THIS IS A GENERAL PRINTING SUBROUTINE TO MANAGE
*        THE DETAILS OF PAGINATION, HEADINGS, AND OUTPUT COMPRESSION
*        FOR PRINTED OUTPUT.  IT IS INVOKED FROM A PROBLEM PROGRAM VIA
*        THE MACRO 'XPRNT', WHICH HAS THE FOLLOWING CALL MODES:
*           OPEN - INITIALIZES PAGE SIZE PARAMETERS AND MAXIMUM NUMBER
*              OF OUTPUT LINES, RESETS PAGE NUMBER, CLEARS HEADING
*              LINES AND INSERTS CURRENT DATE AND TIME, INSERTS DDNAME
*              IN DCB, AND OPENS THE DATA SET.
*           MODIFY - ALTERS ANY OR ALL OF THE PARAMETERS LISTED UNDER
*              'OPEN' EXCEPT THE DDNAME.
*           SETHEAD - SUPPLIES TEXT FOR ONE OR MORE LINES TO BE USED
*              PAGE HEADINGS.
*           PRINT - DELIVERS ONE OR MORE LINES TO BE PRINTED.
*           SPACE - MOVES THE PAGE VERTICALLY A GIVEN NUMBER OF LINES.
*           EJECT - CONDITIONAL OR UNCONDITIONAL SKIP TO HEAD-OF-FORM.
*           CLOSE - CLOSES THE DATA SET.
         SPACE
* ENTRY POINTS:  EACH MODE HAS A SEPARATE ENTRY AT A FIXED OFFSET FROM
*        THE BASE ADDRESS.  ENTRYS ARE EFFECTED BY A  BAL  14,D(15)
*        (WHERE D IS A DISPLACEMENT WHICH SELECTS THE DESIRED MODE) AND
*        ASSUMES THAT REGISTER 13 ADDRESSES A STANDARD 18-WORD SAVE
*        AREA.
         SPACE
* INPUT:  ON ENTRY, REG 0 POINTS TO A WORK AREA FOR THE DATA SET, WHICH
*        IS DESCRIBED IN THIS CODING BY THE DUMMY SECTION 'WORKAREA'.
*        REG 1 POINTS TO A PARAMETER LIST OF A FORM APPROPRIATE TO THE
*        CALL MODE.  THESE LISTS ARE EITHER DESCRIBED BY DUMMY SECTIONS
*        OR ARE STANDARD VARIABLE-LENGTH ADDRESS LISTS.
         SPACE
* OUTPUT:  PRINT LINES AND SPACE CONTROL RECORDS ARE DELIVERED VIA QSAM
*        TO A SEQUENTIAL DATA SET.  EACH LINE IS REDUCED TO ITS MIN-
*        IMUM LENGTH BY TRUNCATING TRAILING BLANKS.
         SPACE
* DATA SETS:  THE OUTPUT DATA SET IS SEQUENTIAL, ARRANGED FOR BLOCKED
*        FORMAT V RECORDS USING MACHINE CONTROL CHARACTERS APPROPRIATE
*        TO 1403 OR 1404 PRINTERS.  THE DDNAME IS SUPPLIED BY THE
*        'OPEN' CALL; THE STANDARD VALUE IS 'SYSPRINT'.
         SPACE
* EXTERNAL ROUTINES:  CALLS 'XDATEDIT' TO FORMAT THE DATE FOR THE
*        PAGE HEADING LINE.
         SPACE
* EXITS - NORMAL:  RETURNS VIA REG 14 WITH RETURN CODE 0 IN REG 15.
*        THE CURRENT PAGE NUMBER (IN BINARY) IS IN REG 0 AND THE BINARY
*        NUMBER OF LINES REMAINING ON THE CURRENT PAGE IS IN REG 1.
*        IF AN OPEN CALL CANNOT OPEN THE DCB, THE RETURN CODE IS 4.
         SPACE
* EXITS - ERROR:  ERRONEOUS CALLS RESULT IN AN 'ABEND' WITH ONE OF THE
*        FOLLOWING COMPLETION CODES:
*           4000 - ROUTINE WAS ILLEGALLY ENTERED AT ITS BASE ADDRESS.
*           4002 - A CALL MODE OTHER THAN 'OPEN' WAS DIRECTED TO A DATA
*              SET WHICH WAS NOT OPEN.
*           4003 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LARGE A PAGE WIDTH.
*           4004 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LONG A PAGE.
*           4005 - 'PRINT' OR 'SETHEAD' SPECIFIED A LINE WHOSE TEXT
*              LENGTH PLUS OFFSET EXCEEDED THE PAGE WIDTH.
*           4006 - THE MAXIMUM NUMBER OF OUTPUT LINES WAS EXCEEDED.
*           4007 - SYNCHRONOUS I/O ERROR.
         SPACE
* TABLES/WORK AREAS:  THE CALL PARAMETER LISTS, WORK AREA, AND PRINT
*        LINE DESCRIPTOR BLOCK ARE ALL DESCRIBED BY DUMMY SECTIONS
*        AT THE END OF THE PROGRAM.
         SPACE
* ATTRIBUTES:  REENTRANT, READ-ONLY.  WILL HANDLE ANY NUMBER OF DATA
*        SETS SIMULTANEOUSLY, USING A SEPARATE WORK AREA FOR EACH.
         SPACE
* OPERATING ENVIRONMENT:  RUNS UNDER OPERATING SYSTEM/360, USING
*        QSAM DATA MANAGEMENT WITH LOCATE-MODE PUT MACROS AND SIMPLE
*        BUFFERING.  ASSUMES OPTION 6A OR 6B FOR TIME OF DAY.
         SPACE
* NOTES:  NONE.
         EJECT
XPRNTSUB CSECT
         SPACE 2
* REGISTER ASSIGNMENTS:
         SPACE 2
* N.B.  REGISTER GROUPS 'RWA,RWB,RWC,RWD' AND 'RLPEXIT,RPARM' MUST BE
* KEPT IN ORDER FOR LM AND STM ORDERS.
         SPACE
RWA      EQU   2               GENERAL WORK REG
RWB      EQU   3               GENERAL WORK REG
RWC      EQU   4               GENERAL WORK REG
RWD      EQU   5               GENERAL WORK REG
RSPACE   EQU   6               NUMBER OF LINES TO SPACE
RBAL     EQU   7               NUMBER OF LINES LEFT ON PAGE
RLPEXIT  EQU   8               EXIT FROM LIST PROCESSING ROUTINE
RPARM    EQU   9               CALL PARAMETER LIST ADDR
RPLD     EQU   10              PLD BLOCK BASE
RWKAREA  EQU   11              BASE REGISTER FOR WORK AREA
RBASE    EQU   12              BASE REGISTER FOR CODING
RRET     EQU   14              STANDARD RETURN ADDR
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
* MASKS FOR CONTROL BYTE "SWITCHES":
         SPACE
HOFBIT   EQU   X'80'           PAGE IS AT PHYSICAL HEAD-OF-FORM
NOSKBIT  EQU   X'40'           DISALLOW EJECT DURING HEAD PRINTING
TXT1BIT  EQU   X'20'           ON FOR FIRST TEXT LINE ON PAGE
HD1BIT   EQU   X'10'           ON FOR FIRST HEAD LINE WITH PAGE NO, ETC
SP0BIT   EQU   X'08'           LAST LINE SPACED 0
         SPACE 2
EJFORCE  EQU   255             SPACING QUANTITY TO FORCE PAGE EJECT
OPENBIT  EQU   X'10'           TO TEST 'DCBOFLGS' FOR SUCCESSFUL OPEN
MAXLNGTH EQU   254             MAXIMUM PAGE LENGTH
MAXWIDTH EQU   132             MAXIMUM PAGE WIDTH
DEFBLKSZ EQU   1692            DEFAULT DCB BLOCK SIZE
         EJECT
**********************
* ENTRY AND PROLOGUE *
**********************
         SPACE
* ENTER FROM THE CALLING SEQUENCE VIA THE INSTRUCTION "BAL 14,X(,15)".
* REGISTER 15 IS SET TO THE BASE OF THE ROUTINE AND THE DISPLACEMENT
* "X" SELECTS THE ENTRY POINT.  EACH ENTRY SAVES REGISTERS, LOADS THE
* ADDRESS OF THE APPROPRIATE SUBROUTINE, AND GOES TO A COMMON
* PROLOGUE.  NOTE THAT AN ATTEMPT TO ENTER AT THE BASE RESULTS IN
* AN ABEND.
         SPACE 2
BASEADDR B     14(,R15)                BRANCH AROUND MODULE IDENTIFIER
         DC    AL1(8)                  LENGTH OF IDENTIFIER
         DC    CL8'XPRNTSUB'
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         SR    R1,R1                   SET ABEND COMPLETION CODE
         LR    RBASE,R15               SET BASE REG FOR ABEND ROUTINE
         USING BASEADDR,RBASE
         B     ABEND
         DROP  RBASE
         SPACE 2
* ENTRY POINTS FOR VARIOUS FUNCTIONS, AT 12-BYTE INTERVALS BEGINNING
* AT BASEADDR+32.  EACH LOADS "RWA" WITH THE ADDRESS OF THE SUBROUTINE
* TO GO TO AFTER EXECUTING "PROLOGUE".
         SPACE
         ORG   XPRNTSUB+32
         USING BASEADDR,R15
         SPACE
PRENTRY  STM   R14,R12,12(R13)         PRINT
         LA    RWA,PRPROC
         B     PROLOGUE
SPENTRY  STM   R14,R12,12(R13)         SPACE
         LA    RWA,SPPROC
         B     PROLOGUE
OPENTRY  STM   R14,R12,12(R13)         OPEN
         LA    RWA,OPPROC
         B     PROLOGUE
CLENTRY  STM   R14,R12,12(R13)         CLOSE
         LA    RWA,CLPROC
         B     PROLOGUE
SHENTRY  STM   R14,R12,12(R13)         SETHEAD
         LA    RWA,SHPROC
         B     PROLOGUE
EJENTRY  STM   R14,R12,12(R13)         EJECT
         LA    RWA,EJPROC
         B     PROLOGUE
MDENTRY  STM   R14,R12,12(R13)         MODIFY
         LA    RWA,MDPROC
         B     PROLOGUE
         SPACE 2
* PROLOGUE.  SET UP BASE REGISTERS FOR CODING AND WORK AREA.  CHAIN
* SAVE AREAS IN STANDARD FASHION.  LOAD "RBAL" WITH CURRENT PAGE
* BALANCE AND "RPARM" WITH THE CALLING PARAMETER LIST ADDRESS.
         SPACE
PROLOGUE LR    RBASE,R15               LOAD CODING BASE REG
         USING BASEADDR,RBASE
         DROP  R15
         SPACE
         LR    RWKAREA,R0              BASE REG FOR WORK AREA
         USING WORKAREA,RWKAREA
         SPACE
         LR    RWB,R13                 ADDR OF CALLER'S SAVE AREA
         LA    R13,SAVEAREA            ADDR OF OUR SAVE AREA
         ST    R13,8(,RWB)             CHAIN TO US FROM CALLER
         ST    RWB,SAVEAREA+4          CHAIN TO CALLER FROM US
         SPACE
         LR    RPARM,R1                LOAD PARAMETER LIST ADDR
         LH    RBAL,PAGEBAL            LOAD PAGE LINE COUNT BALANCE
         MVC   DCBSYNAD(3),=AL3(SYNAD) PUT ERROR ROUTINE ADDRESS IN DCB
         SPACE
         TM    DCBOFLGS,OPENBIT        MAKE SURE DATA SET IS OPEN
         BCR   1,RWA                   BRANCH IF OPEN
         CL    RWA,=A(OPPROC)          IF NOT, ONLY OPEN CALL ALLOWED
         BCR   8,RWA                   BR IF OPEN CALL
         LA    R1,2                    ERROR CODE 2, GO TO ABEND
         SPACE 3
* ABEND ROUTINE FOR SERIOUS ERRORS.  ENTER WITH ERROR NUMBER IN R1.
* ADD DECIMAL 4000 FOR USER CONPLETION CODE AND ISSUE 'ABEND' WITH DUMP
         SPACE
         CNOP  2,4                     ALIGN CONSTANT FOLLOWING SVC
ABEND    AL    R1,*+6                  LOAD ABEND CODES
         SVC   13                      ISSUE ABEND SVC
         DC    X'80'                   'DUMP' BIT FOR ABEND
         DC    AL3(4000)               BASE FOR COMPLETION CODE
         EJECT
************
* EPILOGUE *
************
         SPACE
* ALL MODES RETURN TO THE CALLER VIA THIS ROUTINE.  IT EXITS WITH
* THE RETURN CODE IN REGISTER 15, THE PAGE NUMBER IN REGISTER 0, AND
* THE NUMBER OF LINES REMAINING ON THE PAGE IN REGISTER 1.
         SPACE 2
EXIT4    LA    R15,4                   SET RETURN CODE 4
         B     EXIT
         SPACE
EXIT0    SR    R15,R15                 SET RETURN CODE 0
         SPACE
EXIT     LH    R0,PAGENO               LOAD CURRENT PAGE NUMBER
         LR    R1,RBAL                 LOAD NUMBER OF LINES LEFT
         STH   RBAL,PAGEBAL            SAVE PAGE BALANCE
         XC    DCBSYNAD(3),DCBSYNAD    CLEAR ERROR ROUTINE ADDRESS
         SPACE
         L     R13,SAVEAREA+4          ADDRESS OF CALLER'S SAVE AREA
         L     R14,12(,R13)            LOAD RETURN ADDRESS
         LM    R2,R12,28(R13)          RESTORE CALLER'S REGISTERS
         MVI   12(R13),X'FF'           SET RETURN INDICATION
         BR    R14                     RETURN TO CALLER
         EJECT
******************
* PRINT FUNCTION *
******************
         SPACE
* PRINT LINE DELIVERY CALL.  THE PARAMETER LIST IS A VARIABLE-LENGTH
* LIST OF ADDRESSES, THE LAST OF WHICH IS NEGATIVE (I.E. BIT 0 IS A 1).
* EACH ADDRESS POINTS TO A PLD DESCRIBING A LINE TO BE PRINTED.  CALL
         SPACE 2
* THE GENERAL LIST PROCESSING ROUTINE TO DO THE DIRTY WORK.
PRPROC   BAL   RLPEXIT,LISTPROC        INVOKE LIST PROCESSOR
         SPACE
         B     EXIT0                   EXIT TO CALLER
         EJECT
******************
* SPACE FUNCTION *
******************
         SPACE
* CALL TO MOVE THE PAPER A SPECIFIED NUMBER OF LINES.  IF THE NUMBER
* OF LINES EXCEEDS THE CURRENT PAGE BALANCE, AN EJECT RESULTS, UNLESS
* SUPPRESSED BY THE 'SPNOEJ' BIT IN THE PARAMETER LIST.  IF THE PAGE
* IS AT HEAD-OF-FORM, SPACING IS SUPPRESSED UNLESS THE 'SPATHOF' BIT
* IS SET IN THE PARAMETER LIST.  IN THE LATTER CASE, THE PAGE HEADINGS
* WILL BE PRINTED BEFORE THE SPACING IS EXECUTED.
         SPACE 2
         USING SPPARM,RPARM            ADDRESSING FOR PARM LIST
         SPACE
SPPROC   TM    SWITCHES,HOFBIT         TEST IF AT HEAD-OF-FORM
         BZ    SPSUBTR                 BR IF NOT
         TM    SPCOND,SPATHOF          IS SPACE ALLOWED AT HOF?
         BZ    EXIT0                   EXIT IF NOT
         BAL   RRET,HEADPRNT           IF SO, PRINT HEADINGS FIRST
         SPACE
SPSUBTR  SR    RSPACE,RSPACE
         IC    RSPACE,SPQUAN           LOAD SPACING AMOUNT
         SR    RBAL,RSPACE             COMPUTE NEW PAGE BALANCE
         SPACE
         BP    SPMOVE                  BRANCH IF BAL STILL > 0
         TM    SPCOND,SPNOEJ           TEST IF EJECT ALLOWED
         BO    SPMOVE                  BRANCH IF NOT
         LA    RSPACE,EJFORCE          IF ALLOWED, FORCE EJECT
         SPACE
SPMOVE   BAL   RWA,MOVE                CALL PAPER MOVING SUB
         B     EXIT0                   EXIT TO CALLER
         SPACE
         DROP  RPARM
         EJECT
******************
* EJECT FUNCTION *
******************
         SPACE
* CALL TO MOVE THE PAPER TO HEAD-OF-FORM.  IF THE PAGE IS ALREADY
* THERE, THE EJECT IS NOT EXECUTED UNLESS THE 'EJATHOF' BIT IN THE
* PARAMETER LIST IS ON.  IN THE LATTER CASE, A SKIP IS EXECUTED WITHOUT
* PRINTING ANY HEADINGS, RESULTING IN A BLANK PAGE.  IF THE MASK BITS
* IN THE 'EJCOND' PARAMETER ARE NOT ALL ONES, A CONDITIONAL EJECT IS
* REQUESTED.  THE PAGE BALANCE IS COMPARED AGAINST THE TEST QUANTITY
* 'EJQUAN' IN THE PARAMETER LIST, THEN THE DECISION TO EJECT OR NOT
* IS MADE WITH A 'BC' ORDER USING THE 'EJCOND' BITS AS A MASK.
         SPACE 2
         USING EJPARM,RPARM            FOR PARM LIST ADDRESSING
         SPACE
EJPROC   TM    SWITCHES,HOFBIT         TEST IF AT HOF
         BZ    EJTEST                  BR IF NOT
         TM    EJCOND,EJATHOF          IF SO, IS EJECT ALLOWED?
         BZ    EXIT0                   IF NOT, EXIT
         SPACE
EJTEST   SR    R0,R0
         IC    R0,EJQUAN               LOAD TEST QUANTITY
         IC    R1,EJCOND               GET CONDITIONAL TEST MASK
         N     R1,=XL4'000000F0'       KEEP BITS 24-27 ONLY
         CR    RBAL,R0                 COMPARE BALANCE WITH TEST QUAN
         EX    R1,EJBC                 EXECUTE BC WITH MASK FROM PARM
         B     EXIT0                   EXIT IF CONDITION NOT MET
         SPACE
EJMOVE   LA    RSPACE,EJFORCE          TO FORCE EJECT
         BAL   RWA,MOVE                CALL PAPER MOVER SUB
         B     EXIT0                   EXIT TO CALLER
         SPACE 2
EJBC     BC    0,EJMOVE                BRANCH IF EJECT REQUIRED
         SPACE
         DROP  RPARM
         EJECT
*****************
* OPEN FUNCTION *
*****************
         SPACE
* THIS MUST BE THE FIRST CALL FOR A NEW DATA SET.  IT SETS THE DDNAME
* IN THE DCB AND OPENS THE DATA SET.   ALL COUNTERS AND SWITCHES ARE
* SET TO THEIR NOMINAL VALUES BEFORE PROCESSING ANY OPTIONS WHICH
* MAY HAVE BEEN SUPPLIED WITH THE CALL.  THE PAGE BALANCE IS SET TO
* ZERO, BUT THE PAGE IS NOT MOVED.  THE PROGRAMMER SHOULD NORMALLY
* ISSUE AN 'EJECT' CALL BEFORE BEGINNING HIS OUTPUT.
         SPACE
* IF THE DATA SET IS ALREADY OPEN, THE DDNAME IS IGNORED, THE NOMINAL
* OPTIONS ARE SET, THEN THIS CALL IS TREATED EXACTLY AS IF IT WERE A
* 'MODIFY' CALL.
         SPACE 2
         USING OMPARM,RPARM
         SPACE
OPPROC   MVC   PAPARMS(DEFSIZE),DEFAULTS  SET STANDARD OPTIONS
         MVI   HLTEXT,C' '             CLEAR HEADING TEXT
         MVC   HLTEXT+1(HLTXTLNG-1),HLTEXT
         SPACE
         TIME  DEC                     GET CURRENT DATE & TIME
         STM   R0,R1,HPRSAVE           SAVE TIME AND DATE
         SPACE
* NOW IF DATA SET IS ALREADY OPEN, GO TO 'MDPROC'.  OTHERWISE, INSERT
* DDNAME AND OPEN IT.
         SPACE
         TM    DCBOFLGS,OPENBIT        TEST IF OPEN
         BO    OPJOIN                  BR TO 'MDPROC' IF OPEN
         MVC   DCBDDNAM(8),OMDDNAME    INSERT DDNAME INTO CLOSED DCB
         MVC   DCBEXLST(3),=AL3(EXLST) INSERT ADDRESS OF EXIT LIST
         SPACE
         MVI   DWORK,X'80'             SET END-OF-LIST BIT
         OPEN  (PRINTDCB,(OUTPUT,LEAVE)),MF=(E,DWORK)
         SPACE
         XC    DCBEXLST(3),DCBEXLST    CLEAR ADDRESS OF EXIT LIST
         TM    DCBOFLGS,OPENBIT        TEST FOR SUCCESSFUL OPEN
         BO    OPJOIN                  TO 'MDPROC' IF O.K.
         B     EXIT4                   EXIT WITH RC=4 IF OPEN FAILS
         SPACE
         DROP  RPARM
         EJECT
* DCB EXIT ROUTINE FOR OPEN.  SET BLOCK SIZE TO THE DEFAULT VALUE IF
* NOT SPECIFIED IN DS LABEL OR DD CARD.
         SPACE
EXLST    DS    0F                      EXIT LIST, ON BOUNDARY
         DC    X'85'
         DC    AL3(DCBMOD)
         SPACE
DCBMOD   LH    RWA,DCBBLKSZ            LOAD BLOCK SIZE
         LTR   RWA,RWA                 TEST IF ZERO
         BNZ   DCBNZ                   BRANCH IF NOT ZERO
SETDEF   LA    RWA,DEFBLKSZ            SET DEFAULT BLOCK SIZE
         STH   RWA,DCBBLKSZ            STORE IN DCB
         BR    R14                     RETURN TO OPEN ROUTINE
DCBNZ    CH    RWA,=H'141'             TEST FOR MINIMUM BLOCKSIZE
         BL    SETDEF                  USE DEFAULT IF TOO LOW
         BR    R14                     RETURN TO OPEN IF OK
         EJECT
*******************
* MODIFY FUNCTION *
*******************
         SPACE
* THIS CALL MAY ALTER ANY  OR ALL OF THE FOLLOWING: DATE, TIME, PAGE
* NUMBER, PAGE LENGTH, PAGE WIDTH, MAXIMUM NUMBER OF OUTPUT LINES.
* THE NEW VALUES ARE PRESENTED IN A PARAMETER LIST.  IF A PARAMETER IS
* ZERO, THE CORRESPONDING QUANTITY IS NOT ALTERED.
         SPACE
* THE DATE AND TIME FIELDS MAY BE SUPPLIED BY THE 'OPEN' ROUTINE,
* WHICH JOINS THIS CODING AT 'OPJOIN'.  IN THAT CASE, THE VALUES
* INSERTED BY 'OPEN' ARE USED UNLESS OVERRIDDEN BY THE PARAMETER LIST.
         SPACE
         USING OMPARM,RPARM
         SPACE
MDPROC   SR    R0,R0                   GENERATE TWO ZERO WORDS
         SR    R1,R1
         STM   R0,R1,HPRSAVE           SET DATE & TIME FIELDS TO ZERO
         SPACE
* ENTER HERE FROM 'OPEN'.  THE OBJECT OF THE FOLLOWING IS TO GET THE
* ACTUAL TIME AND DATE (IN PACKED DECIMAL) INTO 'HPRSAVE' AND
* 'HPRSAVE+4', RESPECTIVELY.  THOSE FIELDS MAY HAVE BEEN FILLED IN BY
* THE OPEN ROUTINE, OR THEY MAY HAVE BEEN SET TO ZEROS BY 'MDPROC'
* ABOVE.  NOW WE SEE IF ADDRESSES FOR TIME AND/OR DATE VALUES WERE
* PROVIDED IN THE PARAMETER LIST, AND TRANSFER THE VALUES IF SO.
         SPACE
OPJOIN   LM    RWA,RWB,OMTIMEAD        LOAD TIME & DATE ADDRS FROM PARM
         LTR   RWA,RWA                 TEST FOR TIME ADDR SUPPLIED
         BZ    NOTIME                  BRANCH IF ZERO
         MVC   HPRSAVE(4),0(RWA)       GET TIME AS DECIMAL 'HHMMSSTH'
NOTIME   LTR   RWB,RWB                 TEST IF DATE ADDR SUPPLIED
         BZ    DATEEDIT                BR IF NOT
         MVC   HPRSAVE+4(4),0(RWB)     GET DECIMAL DATE AS '00YYDDD+'
         SPACE
* IF THE DATE VALUE IS NOT ZERO, EDIT INTO THE HEADING LINE TEXT.  BOTH
* THE DAY NUMBER AND THE DAY-MONTH-YEAR FORM ARE USED.
         SPACE
DATEEDIT LM    RWA,RWB,HPRSAVE         LOAD TIME & DATE FOR TESTING
         LTR   RWB,RWB                 TEST IF DATE WAS GIVEN
         BZ    TIMEEDIT                BRANCH IF ZERO
         SPACE
         MVC   HLDAY(4),=C'DAY='       INSERT DAY NUMBER
         UNPK  HLDAY+4(3),HPRSAVE+6(2) UNPACK DAY NUMBER
         OI    HLDAY+6,X'F0'           TIDY UP SIGN BITS
         SPACE
         ST    RWB,DWORK+4             STORE DATE ARG FOR EDIT RTNE
         LA    R1,DWORK                CONSTRUCT ONE-WORD PARM LIST
         ST    R1,HPRSAVE+4              FOR XDATEDIT CALL
         LA    R1,HPRSAVE+4            LOAD PARM LIST ADDRESS
         L     R15,=V(XDATEDIT)        LOAD ADDRESS OF DATE EDIT RTNE
         BALR  R14,R15                   TO EDIT DATE AS 'DD/MM/YY'
         MVC   HLDATE(8),DWORK         INSERT RESULT IN HL TEXT
         SPACE
* EDIT TIME IN HOURS AND MINUTES, IF SUPPLIED.
         SPACE
TIMEEDIT LTR   RWA,RWA                 TEST IF TIME GIVEN
         BZ    TSTPGNO                 BR IF ZERO
         SRL   RWA,4                   ADD LEADING ZERO TO TIME
         ST    RWA,HPRSAVE             STORE TIME IN WORK LOC
         MVC   HLTIME(7),=X'402120207A2020'  EDIT CONTROL CHAR
         ED    HLTIME(7),HPRSAVE       EDIT INTO ALPHA
         SPACE
* MODIFY PAGE NUMBER.  VALUE GIVEN IS DECREMENTED BY ONE, SINCE IT IS
* INCREMENTED BEFORE USE.
         SPACE
TSTPGNO  LH    RWA,OMPAGENO            GET VALUE FROM PARM LIST
         LTR   RWA,RWA                 TEST IF ZERO
         BZ    TSTPGWID                BR IF ZERO
         BCTR  RWA,0                   DECREMENT BY 1
         STH   RWA,PAGENO              STORE
         SPACE
* MODIFY PAGE WIDTH, TESTING FOR MAXIMUM ALLOWED.
         SPACE
TSTPGWID SR    RWA,RWA
         IC    RWA,OMPAGWID            GET WIDTH FROM PARM LIST
         LTR   RWA,RWA                 TEST IF ZERO
         BZ    TSTPGLNG                BRANCH IF SO
         CLI   OMPAGWID,MAXWIDTH       TEST MAXIMUM SIZE
         BNH   PGWIDOK
         LA    R1,3                    ERROR, TOO LARGE
         B     ABEND
PGWIDOK  STH   RWA,PAGWIDTH
         SPACE
* MODIFY PAGE LENGTH, TESTING FOR MAXIMUM VALUE.
         SPACE
TSTPGLNG SR    RWA,RWA
         IC    RWA,OMPAGLNG            GET FROM PARM LIST
         LTR   RWA,RWA                 TEST IF SUPPLIED
         BZ    TSTMAXLN                BR IF NOT
         CLI   OMPAGLNG,MAXLNGTH       TEST FOR LEGAL VALUE
         BNH   PGLNGOK
         LA    R1,4                    ERROR, ABORT
         B     ABEND
PGLNGOK  STH   RWA,PAGELNG             STORE
         SPACE
* MODIFY PRINT LINE LIMIT COUNTER.
         SPACE
TSTMAXLN L     RWA,OMMAXLIN            GET FROM PARM LIST
         LTR   RWA,RWA                 TEST IF SUPPLIED
         BZ    EXIT0                   EXIT IF NOT
         ST    RWA,MAXLINES            STORE
         B     EXIT0                   EXIT TO CALLER
         SPACE
         DROP  RPARM
         EJECT
********************
* SETHEAD FUNCTION *
********************
         SPACE
* THIS CALL PRESENTS A LIST OF LINES WHICH WILL BE USED AS PAGE HEADING
* AND SUB-HEADING LINES.  THE PARAMETER LIST IS A VARIABLE-LENGTH LIST
* OF PLD ADDRESSES, EXACTLY AS FOR 'PRINT' CALLS.  THE FIRST LINE WILL
* HAVE ADDED TO ITS RIGHT END THE DATE, TIME, AND PAGE NUMBER.
* HOWEVER, IF ITS LENGTH EXCEEDS 98 BYTES, IT WILL OVERLAY THOSE
* FIELDS.  THE SECOND AND SUBSEQUENT LINES WILL BE PRINTED NORMALLY.
* NOTE THAT THESE LINES ARE NOT PRINTED WHEN THE PAGE IS EJECTED, BUT
* WHEN THE LINE WHICH WILL BE FIRST ON THE NEW PAGE IS DELIVERED, THUS
* ALLOWING THE HEADINGS TO BE ALTERED AFTER DELIVERY OF THE LAST LINE
* ON THE PRECEDING PAGE.  THE ADDRESS OF THE PARAMETER LIST IS SAVED
* BY THE PRINTING ROUTINE, BUT THE PARAMETER LIST, THE PLD'S TO WHICH
* IT POINTS, AND THE LINE TEXTS TO WHICH THEY POINT, MUST BE PRESERVED
* BY THE PROBLEM PROGRAM FOR AS LONG AS THEY ARE IN USE, SINCE THEY
* ARE REFERRED TO AT THE BEGINNING OF EACH NEW PAGE.  EACH CALL TO
* TO 'SETHEAD' SUPERSEDES THE EFFECT OF THE PREVIOUS CALL.  A CALL WITH
* A PARAMETER LIST ADDRESS OF ZERO INDICATES THAT NO HEADINGS ARE
* PROVIDED BY THE PROBLEM PROGRAM, AND ONLY THE PAGE NUMBER, DATE, AND
* TIME WILL BE PRINTED, WITH A STANDARD SPACING OF THREE.
         SPACE 2
SHPROC   LTR   RPARM,RPARM             TEST FOR NULL LIST ADDR
         BNZ   SHOK                    BRANCH IF NON-ZERO
         LA    RPARM,NOHDLIST          ADDRESS OF PLD FOR BLANK LINE
SHOK     ST    RPARM,HEADLIST          STORE ADDR OF HEADING PARMS
         B     EXIT0                   EXIT
         EJECT
******************
* CLOSE FUNCTION *
******************
         SPACE
* THIS CALL CLOSES THE PRINTER DATA SET.  IT DOES NOT MOVE THE PAGE
* OR ALTER ANY SWITCHES OR VARIABLES EXCEPT THE DCB ITSELF.
* AFTER CLOSING THE DCB, IT RELEASES THE PRINT BUFFERS.
         SPACE 2
CLPROC   TM    DCBOFLGS,OPENBIT        IS DCB OPEN NOW?
         BZ    EXIT0                   EXIT IF ALREADY CLOSED
         MVI   DWORK,X'80'             SET END-OF-LIST BIT
         CLOSE (PRINTDCB,LEAVE),MF=(E,DWORK)
         SPACE
         FREEPOOL  PRINTDCB            FREE THE BUFFER CORE
         SPACE
         B     EXIT0                   EXIT TO CALLER
         EJECT
************
* LISTPROC *
************
         SPACE
* THIS ROUTINE PROCESSES A LIST OF PLD ADDRESSES, FORMATTING EACH PRINT
* LINE AND PERFORMING THE NECESSARY PRE- AND POST-SPACING OPERATIONS.
* IT IS ENTERED WITH 'RPARM' POINTING TO THE LIST OF ADDRESSES AND
* 'RLPEXIT' CONTAINING THE EXIT ADDRESS.  IT MAY DISCOVER THAT ITS
* SPACING OPERATIONS HAVE BROUGHT THE PAGE TO HEAD OF FORM, REQUIRING
* THAT THE HEADING AND SUB-HEADING LINES BE PRINTED.  WHEN THIS OCCURS,
* IT BRANCHES TO 'HEADPRNT', WHICH SAVES 'RPARM' AND 'RLPEXIT' AND
* REENTERS THIS ROUTINE WITH AN ADDRESS LIST FOR THE HEADING LINES.
* (WHEN THIS SECOND-LEVEL CALL IS MADE, SWITCH 'NOSKPBIT' IS ON,
* PREVENTING ANY FURTHER PAGE SKIPS AND ELIMINATING THE POSSIBILITY OF
* YET ANOTHER CALL TO 'HEADPRNT'.)  AFTER THE HEADINGS ARE PRINTED,
* THE ORIGINAL VALUES ARE RETURNED TO 'RPARM' AND 'RLPEXIT' AND
* PROCESSING OF THE LIST OF TEXT LINES PROVIDED BY THE CALLER IS
* CONTINUED.
         SPACE 2
         USING PLDBLOCK,RPLD           TO ADDRESS PLD BLOCKS
         SPACE
LISTPROC L     RPLD,0(,RPARM)          LOAD A PLD BLOCK ADDRESS
         SPACE
* IF PAGE IS NOW AT HEAD OF FORM, EXECUTE 'HEADPRNT'.
         SPACE
         LA    RRET,LISTPROC           EXIT FROM HEADPRNT STARTS AGAIN
         TM    SWITCHES,HOFBIT         SEE IF HEAD-OF-FORM FLAG IS ON
         BO    HEADPRNT                EXIT IF SO
         SPACE 2
* TEST WHETHER WE ARE AT THE FIRST TEXT LINE ON A PAGE, AND, IF SO,
* WHETHER PRE-SPACING IS ALLOWED IN THAT POSITION.  IF NOT, BYPASS
* PRE-SPACING ALTOGETHER.
         SPACE
         TM    SWITCHES,TXT1BIT        TEST IF FIRST TEXT LINE
         BZ    PRSUBTR                 BRANCH IF NOT
         TM    PLDFLAGS,PRHOFBIT       TEST IF ALLOW SKIP AT HOF
         BZ    POSTSP                  SKIP PRESPACING IF NOT
         SPACE
* DECREMENT THE PAGE BALANCE BY THE AMOUNT TO BE SPACED.
         SPACE
PRSUBTR  SR    RSPACE,RSPACE
         IC    RSPACE,PLDSPB           LOAD AMOUNT TO SPACE
         SR    RBAL,RSPACE             DECREMENT PAGE BALANCE
         SPACE
* IF SKIPPING IS ALLOWED BY BOTH THE SYSTEM AND THE USER, TEST THE
* BALANCE AND FORCE A PAGE SKIP IF <= ZERO.
         SPACE
         TM    SWITCHES,NOSKBIT        TEST IF SYSTEM ALLOWS SKIP
         BO    PREMOVE                 BRANCH IF NOT
         TM    PLDFLAGS,PRSKPBIT       TEST IF USER ALLOWS SKIP
         BO    PREMOVE                 BRANCH IF NOT
         LTR   RBAL,RBAL               TEST PAGE BALANCE
         BP    PREMOVE                 BRANCH IF SOME LINES LEFT
         LA    RSPACE,EJFORCE          FORCE A PAGE SKIP
         SPACE
* MOVE THE PAGE THE NUMBER OF LINES IN 'RSPACE'.
         SPACE
PREMOVE  BAL   RWA,MOVE                TO PAPER MOVING SUBROUTINE
         SPACE
* IF THAT MOVING PUT US AT HEAD-OF-FORM, PRINT THE HEADINGS.
         SPACE
         LA    RRET,LISTPROC           EXIT FROM HEADPRNT STARTS AGAIN
         TM    SWITCHES,HOFBIT         TEST HEAD-OF-FORM BIT
         BO    HEADPRNT                EXIT IF AT HEAD
         SPACE 2
* NOW CONSIDER THE SPACING TO BE PERFORMED WHEN THE TEXT OF THE LINE
* IS PRINTED.  BEGIN BY COMPUTING THE NEW PAGE BALANCE.
         SPACE
POSTSP   SR    RSPACE,RSPACE
         IC    RSPACE,PLDSPA           LOAD AMOUNT TO SPACE AFTER PRINT
         SR    RBAL,RSPACE             COMPUTE NEW PAGE BALANCE
         SPACE
* IF THE SYSTEM AND USER BOTH ALLOW SKIPPING, TEST THE PAGE BALANCE,
* AND FORCE A SKIP IF <= ZERO.
         SPACE
         TM    SWITCHES,NOSKBIT        TEST IF SYSTEM ALLOWS SKIPPING
         BO    GETPRCC                 BRANCH IF NOT
         TM    PLDFLAGS,SPSKPBIT       TEST IF USER ALLOWS SKIPPING
         BO    GETPRCC                 BRANCH IF NOT
         LTR   RBAL,RBAL               TEST FOR PAGE END
         BP    GETPRCC                 BRANCH IF SOME LINES LEFT
         LA    RSPACE,EJFORCE          FORCE PAGE SKIP
         SPACE
* NOW CONSTRUCT THE PRINT LINE IN AN OUTPUT BUFFER.  IN THE INTERESTS
* OF SAVING BUFFER SPACE, THE CALLER'S TEXT IS SCANNED FROM THE RIGHT
* TO REDUCE ITS NOMINAL LENGTH BY THE NUMBER OF RIGHT BLANKS.  IN THE
* EXTREME CASE THAT IT IS ENTIRELY BLANK, BYPASS PRINTING ALTOGETHER
* AND MERELY SPACE.  IF THIS IS TO BE THE FIRST HEADING LINE OF THE
* PAGE ('HD1BIT' SET), SCANNING IS OMITTED, THE RECORD LENGTH IS SET TO
* THE PAGE WIDTH, AND THE DATE, TIME, AND PAGE NUMBER ARE INSERTED.
         SPACE
GETPRCC  DS    0H
         SR    RWA,RWA
         IC    RWA,PLDLNGTH            LOAD NOMINAL LENGTH OF TEXT
         SR    RWB,RWB
         IC    RWB,PLDOFFST            LOAD LEFT MARGIN OFFSET
         SPACE
         LA    R0,0(RWA,RWB)           LINE LENGTH = TEXT + OFFSET
         CH    R0,PAGWIDTH             TEST AGAINST PAGE WIDTH
         BNH   TSTHD1                  BR IF OK
         LA    R1,5                    ERROR, LINE TOO LONG
         B     ABEND
         SPACE
TSTHD1   TM    SWITCHES,HD1BIT         TEST IF FIRST HEADING LINE
         BZ    BLNKSCAN                BR IF NOT
         LH    RWB,PAGWIDTH            SET RECORD LENGTH AS PAGE WIDTH
         B     GETBUF                  SKIP BLANK SCANNING
         SPACE
* SET UP A 'BXH' FOR SCAN.  R0 IS INCREMENT, R1 IS COMPARAND, RWA
* VARIABLE.
         SPACE
BLNKSCAN LH    R0,=H'-1'               INCREMENT IS MINUS 1
         L     R1,PLDTXTAD-1           LOAD TEXT ADDRESS
         LA    R1,0(,R1)               ZERO HIGH-ORDER BYTE
         BCTR  R1,0                    DECREMENT BY ONE
         AR    RWA,R1                  SET RWA TO RIGHT-MOST TEXT BYTE
         SPACE
* SCAN THE LINE, SEARCHING FOR FIRST NON-BLANK.  RESULT IS NEW TEXT
* LENGTH IN RWA, WHICH WILL BE ZERO FOR BLANK LINES.
         SPACE
BLNKLOOP CLI   0(RWA),C' '             TEST FOR NON-BLANK CHAR
         BNE   BLNKDONE                EXIT WHEN FOUND
         BXH   RWA,R0,BLNKLOOP
BLNKDONE SR    RWA,R1                  NOW RWA IS NEW TEXT LENGTH
         BC    13,POSTMOVE             NO PRINTING IF <= 0
         SPACE
* NOW ADD OFFSET TO LENGTH OF SURVIVING TEXT TO GET ACTUAL LINE LENGTH.
         SPACE
         AR    RWB,RWA                 ADD TEXT LENGTH
         SPACE
* NOW RWA IS THE LENGTH OF THE CALLER'S TEXT, AND RWB IS THE LENGTH OF
* THE LINE.  THE RECORD LENGTH WILL BE FIVE MORE THAT THE LENGTH OF THE
* LINE, TO INCLUDE FORMAT 'V'  AND PRINTER CONTROL CHARACTERS.  GET
* A BUFFER OF THE PROPER LENGTH, KEEPING ITS ADDRESS IN R1.
         SPACE
GETBUF   LA    RWC,5(,RWB)             LOAD LENGTH OF RECORD IN RWC
         STH   RWC,DCBLRECL            PUT LRECL IN DCB FOR PUT CALL
         SPACE
         PUT   PRINTDCB                GET BUFFER ADDRESS IN R1
         SPACE
         ST    R1,CCLAST               SAVE LOCATION OF THIS LINE
         LR    RWD,R1                  RWD BECOMES BUFFER BASE REG
         MVI   3(RWD),C' '             CLEAR BUFFER TO BLANKS
         EX    RWB,BLNKMOVE
         SLL   RWC,16                  SET UP 4-BYTE 'V' CONTROL FIELD
         ST    RWC,DWORK               CAN'T ASSUME BUFFER ON ANY
         MVC   0(4,RWD),DWORK            BOUNDARY
         SPACE
* IF THIS IS THE FIRST HEADING LINE, INSERT DATE AND TIME, AND EDIT
* THE PAGE NUMBER.
         SPACE
         TM    SWITCHES,HD1BIT         TEST IF FIRST LINE
         BZ    MOVETEXT                BRANCH IF NOT
         SPACE
         LA    RWC,0(RWB,RWD)          ADDRESS RIGHT END -5
         SH    RWC,=AL2(HLTXTLNG+10-5) LOCATE PLACE FOR HEADING INFO
         MVC   0(HLTXTLNG,RWC),HLTEXT  INSERT DATE & TIME
         SPACE
         LH    R1,PAGENO               INCREMENT PAGE NUMBER
         LA    R1,1(,R1)
         STH   R1,PAGENO
         CVD   R1,DWORK                CONVERT TO DECIMAL
         MVC   HLTXTLNG(10,RWC),=XL10'40404040402020202120'  EDIT CHARS
         LA    R1,HLTXTLNG+9(RWC)      IN CASE SIGNIFIGANCE FORCED
         EDMK  HLTXTLNG+4(6,RWC),DWORK+5  EDIT AND MARK SPOT FOR "PAGE"
         SH    R1,=H'5'
         MVC   0(4,R1),=C'PAGE'        INSERT WORD "PAGE"
         SPACE
* PUT PRINTER CONTROL CHARACTER AND CALLER'S TEXT INTO THE BUFFER.
* REGISTER RWA CONTAINS THE LENGTH OF THE TEXT.
         SPACE
MOVETEXT BAL   RWB,CCGEN               GO GET CONTROL CHAR
         STC   R0,4(,RWD)              INSERT IN BUFFER
         NI    4(RWD),B'11111101'      CHANGE SPACE IMMEDIATE TO WRITE
         SPACE
         SR    RWB,RWB
         IC    RWB,PLDOFFST            LOAD LEFT MARGIN OFFSET
         LA    RWB,5(RWB,RWD)          ADDRESS FOR FIRST TEXT BYTE
         BCTR  RWA,0                   DECREMENT LENGTH BY 1 FOR MVC
         L     RWC,PLDTXTAD-1          LOAD ADDRESS OF CALLER'S TEXT
         EX    RWA,MOVEINST            MOVE TEXT
         SPACE
         NI    SWITCHES,255-HD1BIT-TXT1BIT  RESET ONE-SHOT BITS
         SPACE
* DECREMENT PRINT LINE LIMIT COUNTER, ABORTING IF IT GOES NEGATIVE.
         SPACE
         L     R1,MAXLINES
         S     R1,=F'1'                BCTR WOULD NOT SET COND CODE
         ST    R1,MAXLINES
         BP    POSTMOVE                BRANCH IF POSITIVE
         LA    R1,6                    ABORT, TOO MUCH OUTPUT
         B     ABEND
         SPACE
* DO ANY ADDITIONAL SPACING NECESSARY.  AMOUNT STILL IN 'RSPACE'.
         SPACE
POSTMOVE BAL   RWA,MOVE                CALL PAPER MOVING SUBROUTINE
         SPACE 2
* NOW WE ARE FINISHED WITH THAT LINE.  IF THE ADDRESS WHICH POINTED TO
* ITS PLD WAS NEGATIVE, THE LIST IS EXHAUSTED AND THE ROUTINE EXITS.
* OTHERWISE, INCREMENT THE LIST POINTER BY 4 AND START THE NEXT ONE.
         SPACE
         LTR   RPLD,RPLD               TEST CURRENT PLD ADDRESS
         BCR   4,RLPEXIT               EXIT IF NEGATIVE
         SPACE
         LA    RPARM,4(,RPARM)         INCREMENT LIST POINTER
         B     LISTPROC                TO PROCESS NEXT LINE
         SPACE 2
* EXECUTED INSTRUCTIONS:
         SPACE
BLNKMOVE MVC   4(0,RWD),3(RWD)         SPREAD BLANKS IN OUTPUT BUFFER
MOVEINST MVC   0(0,RWB),0(RWC)         MOVE CALLER'S TEXT TO OUTPUT BUF
         SPACE
         DROP  RPLD
         EJECT
************
* HEADPRNT *
************
         SPACE
* ENTER THIS ROUTINE WHEN IT IS DISCOVERED THAT WE ARE AT
* HEAD-OF-FORM AND ARE ABOUT TO PRINT A LINE.  SAVE THE REGISTERS
* DEFINING THE STATE OF 'LISTPROC' AND CALL IT WITH A LIST SPECIFYING
* THE HEADING AND SUB-HEADING LINES.
         SPACE 2
HEADPRNT ST    RRET,HPREXIT            SAVE RETURN ADDRESS
         STM   RLPEXIT,RPARM,HPRSAVE   STORE LISTPROC REGISTERS
         SPACE
* RESET HEAD-OF-FORM BIT AND SET NO-SKIP BIT TO SUPPRESS FORM SKIPS
* AND HEADING LINE BIT TO INCLUDE THE PAGE NUMBER.  RESET PAGE BALANCE.
         SPACE
         NI    SWITCHES,255-HOFBIT     RESET HOF BIT
         OI    SWITCHES,HD1BIT+NOSKBIT SET HEADING AND NOSKIP BITS
         LH    RBAL,PAGELNG            RESET PAGE BALANCE
         SPACE
* LOAD ADDRESS OF HEADINGS LIST AND CALL LIST PROCESSOR.
         SPACE
         L     RPARM,HEADLIST          ADDRESS OF HEADINGS LIST
         BAL   RLPEXIT,LISTPROC        CALL PROCESSING ROUTINE
         SPACE
* AFTER PRINTING THE HEADINGS, TURN SYSTEM SKIP-SUPPRESSION BIT OFF
* AND SET 'TXT1BIT' TO INDICATE THAT THERE ARE NO TEXT LINES ON THE
* PAGE YET.  THEN RESTORE THE 'LISTPROC' REGISTERS AND RETURN TO
* PROCESSING THE CALLER'S LINES.
         SPACE
         NI    SWITCHES,255-NOSKBIT    RESET NO-SKIP BIT
         OI    SWITCHES,TXT1BIT        SET FIRST-TEXT-LINE BIT
         SPACE
         LM    RLPEXIT,RPARM,HPRSAVE   RESTORE LISTPROC REGISTERS
         L     RRET,HPREXIT            RECOVER EXIT ADDRESS AND
         BR    RRET                      RETURN TO CALLER
         EJECT
***********************************
* MOVE - VERTICAL SPACING ROUTINE *
***********************************
         SPACE
* SUBROUTINE TO MOVE THE PAPER BY THE NUMBER OF LINES IN REGISTER
* 'RSPACE'.  RETURN ADDRESS IS IN 'RWA'.  IF THE CONTROL CHARACTER FOR
* THE LAST LINE SPACED 0 LINES, REPLACE IT WITH A NEW ONE BEFORE
* GENERATING ANY EXTRA LINES.
         SPACE 2
MOVE     LTR   RSPACE,RSPACE           TEST NUMBER OF LINES TO BE MOVED
         BCR   13,RWA                  EXIT IF <= ZERO
         TM    SWITCHES,SP0BIT         DID PREVIOUS LINE SPACE 0?
         BZ    PREVNOT0                BRANCH IF NOT
         L     R1,CCLAST               GET ADDRESS OF PREVIOUS LINE
         BAL   RWB,CCGEN               GENERATE NEW CONTROL CHAR
         NI    4(R1),X'02'             TEST WRITE/SPACE BIT IN OLD CC
         STC   R0,4(,R1)               STORE NEW CC IN PREVIOUS LINE
         BNZ   *+8                     BR IF WRITE/SPACE BIT WAS ON
         NI    4(R1),255-X'02'         TURN WRITE/SPACE BIT OFF
PREVNOT0 DS    0H
         MVC   DCBLRECL(2),MOVELINE    SET LOGICAL RECORD LENGTH IN DCB
         SPACE
         PUT   PRINTDCB                GET BUFFER ADDRESS IN R1
         SPACE
         ST    R1,CCLAST               SAVE LOCATION OF THIS LINE
         MVC   0(6,R1),MOVELINE        INSERT FORMAT 'V' CONTROL RECORD
         BAL   RWB,CCGEN               GET PRINT CONTROL CHAR IN R0
         STC   R0,4(,R1)               INSERT IN RECORD
         SPACE
         B     MOVE                    LOOP UNTIL 'RSPACE' IS ZERO
         SPACE 3
MOVELINE DC    XL6'000600000340'       FORMAT 'V' CONTROL RECORD
         EJECT
*****************************************
* CCGEN - GENERATE PRINTER CONTROL CHAR *
*****************************************
         SPACE
* THIS ROUTINE GENERATES A PRINTER CONTROL CHARACTER TO SPACE OR EJECT
* IMMEDIATELY (WITHOUT PRINTING).  ENTER WITH THE TOTAL NUMBER OF
* LINES TO BE MOVED IN 'RSPACE' AND RETURN ADDRESS IN 'RWB'.  EXITS
* WITH THE CONTROL CHARACTER IN BITS 24-31 OF REGISTER 0 AND THE COUNT
* IN 'RSPACE' DECREMENTED BY THE AMOUNT WHICH THE CHARACTER WILL SPACE.
* A SPACE VALUE OF 255 OR GREATER WILL GENERATE AN EJECT CONTROL
* CHARACTER, SET 'RSPACE' AND 'RBAL' TO ZERO, AND SET THE HEAD-OF-FORM
* BIT.  NOTE:  MUST NOT USE R1.
         SPACE 2
CCGEN    NI    SWITCHES,255-SP0BIT     RESET 'PREVIOUS SPACED 0' BIT
         CH    RSPACE,=AL2(EJFORCE)    TEST FOR EJECT REQUEST
         BL    CCNOEJ                  BRANCH IF NOT
         LA    R0,X'8B'                LOAD 'SKIP TO CHAN 1' CC
         OI    SWITCHES,HOFBIT         SET HEAD-OF-PAGE BIT
         SR    RBAL,RBAL               SET PAGE BALANCE TO ZERO
         SR    RSPACE,RSPACE           SET REMAINING SPACING TO ZERO
         BR    RWB                     EXIT
         SPACE
CCNOEJ   LR    R15,RSPACE              LOAD WORK REGISTER
         CH    RSPACE,=H'3'            TEST IF OVER THREE LINES
         BNH   CCOK                    BR IF <= 3
         LA    R15,3                   SET 3, MAXIMUM FOR 1 OPERATION
CCOK     SR    RSPACE,R15              DECR RSPACE BY AMOUNT SPACED
         SLL   R15,3                   PUT AMOUNT IN BITS 2-4 OF BYTE
         LA    R0,X'03'(,R15)          ADD COMMAND BITS AND PUT IN R0
         LTR   R15,R15                 TEST FOR ZERO SPACING
         BCR   7,RWB                   EXIT IF NOT ZERO
         OI    SWITCHES,SP0BIT         SET 'LINE SPACED 0' BIT
         BR    RWB                     EXIT
         EJECT
***********************
* SYNAD ERROR ROUTINE *
***********************
         SPACE
* IF A PERMANENT I/O ERROR OCCURS, TYPE A DIAGNOSTIC MESSAGE AND ABORT.
         SPACE
SYNAD    SYNADAF  ACSMETH=QSAM         GET ERROR MESSAGE FROM O/S
         LR    RWA,R1                  SAVE MESSAGE ADDRESS
         GETMAIN  R,LV=128             GET BUFFER FOR MESSAGE
         MVC   0(LIOMSG,R1),IOMSG      INSERT MESSAGE BEGINNING
         MVC   LIOMSG(79,R1),49(RWA)   ADD TEXT FROM O/S
         LR    RWA,R1                  SAVE MESSAGE ADDRESS
         SYNADRLS                      FREE O/S MESSAGE
         WTO   MF=(E,(RWA))            TYPE MESSAGE ON CONSOLE
         LA    R1,7                    LOAD ERROR CODE
         B     ABEND                   TO ABORT AND DUMP
         SPACE
IOMSG    DC    AL2(LIOMSG+78,0)        FORMAT V CONTROL FIELD
         DC    C'XPRNTSUB I/O ERROR'
LIOMSG   EQU   *-IOMSG
         EJECT
**************************
* CONSTANTS AND LITERALS *
**************************
         SPACE
* DUMMY PARAMETER LIST AND PLD FOR USE WHEN NO HEADING IS PROVIDED.
         SPACE
NOHDLIST DS    0F
         DC    XL1'80'                 VL LIST BIT
         DC    AL3(NOHDPLD)            ADDRESS OF PLD BELOW
         SPACE
NOHDPLD  DS    0F                      ALIGN ON FULL-WORD BOUNDARY
         DC    BL1'00010000'           OPTION BITS
         DC    AL3(BLANK1)             PRINT TEXT ADDRESS
         DC    AL1(1)                  PRINT TEXT LENGTH
         DC    AL1(0)                  LEFT MARGIN INDENTATION
         DC    AL1(0)                  SPACING BEFORE PRINTING
         DC    AL1(3)                  SPACING AFTER PRINTING
         SPACE
* CONSTANTS TO INITIALIZE PARAMETERS AND SWITCHES WHEN 'OPEN' CALL IS
* RECEIVED.  THE ORDER MUST MATCH THE 'PAPARMS' LIST IN THE WORK AREA.
         SPACE
DEFAULTS DS    0F
         DC    A(NOHDLIST)     PAGE HEADING PARM LIST ADDRESS
         DC    F'1000000'      MAXIMUM NUMBER OF OUTPUT LINES
         DC    H'132'          PAGE WIDTH
         DC    H'57'           PAGE LENGTH
         DC    H'0'            PAGE NUMBER (-1)
         DC    H'0'            PAGE BALANCE
         DC    X'00'           SWITCHES
DEFSIZE  EQU   *-DEFAULTS
         SPACE
* MISCELLANEOUS CONSTANTS:
         SPACE
BLANK1   DC    C' '                    TEXT OF DUMMY HEADING LINE
         LTORG
         EJECT
*******************
* WORK AREA DSECT *
*******************
         SPACE
* THIS DUMMY SECTION DEFINES THE WORK AREA PROVIDED BY THE PROBLEM
* PROGRAM FOR EACH DATA SET.  ITS ADDRESS IS PASSED IN PARAMETER
* REGISTER 0 AT EACH CALL.
         SPACE 2
WORKAREA DSECT
         SPACE 2
* STANDARD 18-WORD SAVE AREA:
         SPACE
SAVEAREA DS    18F
         SPACE 2
* DATA CONTROL BLOCK FOR PRINTER DATA SET:
         SPACE
         PRINT NOGEN
PRINTDCB DCB   DDNAME=SYSPRINT,                                        X
               DSORG=PS,                                               X
               RECFM=VBM,                                              X
               LRECL=137,                                              X
               MACRF=PL,                                               X
               BFTEK=S,                                                X
               BUFNO=2,                                                X
               EROPT=ACC
         PRINT GEN
         SPACE
DCBEXLST EQU   PRINTDCB+37     ADDRESS OF EXIT LIST
DCBOFLGS EQU   PRINTDCB+48     CONTAINS 'OPENED SUCCESSFULLY' BIT
DCBDDNAM EQU   PRINTDCB+40     DDNAME (WHEN CLOSED)
DCBSYNAD EQU   PRINTDCB+57     ADDRESS OF SYNCHRONOUS ERROR ROUTINE
DCBBLKSZ EQU   PRINTDCB+62     BLOCK SIZE
DCBLRECL EQU   PRINTDCB+82     LOGICAL RECORD LENGTH
         SPACE 2
* ADDRESS OF LAST BUFFER OBTAINED BY "PUT" MACRO:
         SPACE
CCLAST   DS    1A
         SPACE
         DS    1F              SPARE FULL WORD
         SPACE 2
* TEMPORARY WORK CELLS:
         SPACE
DWORK    DS    1D              DOUBLE-WORD WORK CELL
HPREXIT  DS    1F              HEADPRNT EXIT SAVE
HPRSAVE  DS    2F              HEADPRNT REGISTER STORAGE
         SPACE 2
* PARAMETERS AND SWITCHES WHICH DEFINE THE PAGE SIZE AND STATUS.
* SEQUENCE MUST MATCH THAT IN 'DEFAULTS', WHICH INITIALIZES THEM.
         SPACE
PAPARMS  DS    0F
HEADLIST DS    1A              PAGE HEADING PARM LIST ADDRESS
MAXLINES DS    1F              MAXIMUM NUMBER OF OUTPUT LINES
PAGWIDTH DS    1H              PAGE WIDTH
PAGELNG  DS    1H              PAGE LENGTH
PAGENO   DS    1H              PAGE NUMBER OF CURRENT PAGE
PAGEBAL  DS    1H              PAGE BALANCE
SWITCHES DS    1X              SWITCHES
         SPACE 2
* STORAGE FOR DATE AND TIME PORTION OF PAGE HEADING:
         SPACE
HLTXTLNG EQU   24
HLTEXT   DS    CL(HLTXTLNG)
HLDAY    EQU   HLTEXT
HLTIME   EQU   HLTEXT+7
HLDATE   EQU   HLTEXT+16
         EJECT
*************************
* PARAMETER LIST DSECTS *
*************************
         SPACE 2
* PARAMETER LIST FOR 'EJECT' CALL:
         SPACE
EJPARM   DSECT
         SPACE
EJCOND   DS    1X              CONDITIONAL MASK AND SWITCHES
EJQUAN   DS    1X              CONDITIONAL TEST QUANTITY
         SPACE
EJATHOF  EQU   X'01'           MASK FOR 'EJCOND'
         SPACE 6
* PARAMETER LIST FOR 'SPACE' CALL:
         SPACE
SPPARM   DSECT
         SPACE
SPCOND   DS    1X              CONDITIONAL BITS
SPQUAN   DS    1X              NUMBER OF LINES TO SPACE
         SPACE
SPATHOF  EQU   X'01'           MASK FOR 'SPCOND'
SPNOEJ   EQU   X'02'           MASK FOR 'SPCOND'
         SPACE 6
* PARAMETER LIST FOR 'OPEN' AND 'MODIFY' CALLS:
         SPACE
OMPARM   DSECT
         SPACE
OMMAXLIN DS    1F              MAXIMUM NUMBER OF OUTPUT LINES
OMPAGENO DS    1H              INITIAL PAGE NUMBER
OMPAGWID DS    1X              PAGE WIDTH
OMPAGLNG DS    1X              PAGE LENGTH
OMTIMEAD DS    1A              ADDRESS OF TIME
OMDATEAD DS    1A              ADDRESS OF DATE
OMDDNAME DS    CL8             DDNAME (OPEN CALL ONLY)
         EJECT
*************
* PLD DSECT *
*************
         SPACE
* PRINT LINE DESCRIPTOR DUMMY SECTION:
         SPACE 2
*        ******************************************************
*        *            *                                       *
*        *   OPTION   *                                       *
*        *    BITS    *             TEXT ADDRESS              *
*        *            *                                       *
*        ******************************************************
*        *            *            *            *             *
*        *    TEXT    *    TEXT    *   SPACE    *    SPACE    *
*        *   LENGTH   *   OFFSET   *   BEFORE   *    AFTER    *
*        *            *            *            *             *
*        ******************************************************
         SPACE 3
PLDBLOCK DSECT
         SPACE
PLDFLAGS DS    1X              OPTION BITS
PLDTXTAD DS    AL3             TEXT ADDRESS
PLDLNGTH DS    1X              TEXT LENGTH
PLDOFFST DS    1X              TEXT OFFSET, OR LEFT MARGIN
PLDSPB   DS    1X              AMOUNT TO SPACE BEFORE PRINTING
PLDSPA   DS    1X              AMOUNT TO SPACE AFTER PRINTING
         SPACE 2
PRHOFBIT EQU   B'00000010'     MASK FOR 'PLDFLAGS'
PRSKPBIT EQU   B'00000001'     MASK FOR 'PLDFLAGS'
SPSKPBIT EQU   B'00010000'     MASK FOR 'PLDFLAGS'
         SPACE 6
         END
