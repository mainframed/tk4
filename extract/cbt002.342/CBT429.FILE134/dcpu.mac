         TITLE ' D I S P L A Y   C P U   U T I L I Z A T I O N '
*        DATA SET DCPU       AT LEVEL 001 AS OF 13/08/82
*
* THIS PROGRAM WAS WRITTEN BY GREG PRICE OF THE STATE ELECTRICITY
*   COMMISSION OF VICTORIA, 1982, USING SOME CODE FROM DJOBS.
*
* THIS LITTLE GEM WILL SCURRY AROUND THE ASCBS AND CSCBS TO DISPLAY
*   JOB CPU TIME PERCENTAGES.  ALL CALCULATIONS AND FORMATTING ARE
*   DONE BEFORE ANY OUTPUT IS COMMENCED.  TO INCREASE MAXUSER CAPACITY
*   EITHER CHANGE THE TABLE SIZE AND REASSEMBLE OR USE THE "EXPAND"
*   LINKAGE EDITOR CONTROL STATEMENT.  ADD 64 BYTES FOR EACH EXTRA
*   ADDRESS SPACE.  (TABLE INITIALLY 1024 FULLWORDS FOR MAXUSER=64.)
*
* APF AUTHORIZATION IS REQUIRED TO READ THE LCCA.  SYSEVENT IS ALSO
*   USED TO PREVENT SWAPPING.
*
* THIS WORKS FOR OSIV/F4 E40 AND REQUIRES MACROS FROM SYS1.FMODGEN;
*   CONSOLE DISPLAYS ONLY TAKE ONE SCREEN LINE PER WTO.
*
* MODIFIED SO THAT THE TABLE IS DYNAMICALLY GETMAINED.  THE SIZE OF
*   THE TABLE IS MAXUSER*64 BYTES.                 (GP  11 JAN 83)
*
* MODIFIED TO SHOW TOTAL TCB CPU TIME AND SRB CPU TIME
*   PERCENTAGES.                                   (GP  29 MAR 83)
*
* MODIFIED TO SHOW OUCBNDP IF AN OUCB EXISTS INSTEAD OF ASCDPRTY
*   TO PREVENT SHOWING 255 BECAUSE OF SWAPOUT.     (GP  14 NOV 84)
*
* CONVERTED TO MVS/XA (FMODGEN MEANS AMODGEN)   (GP@P6  27 NOV 86)
*
* IMPROVEMENTS ADDED:                           (GP@P6  27 FEB 89)
*    1.  ASID NOW SHOWN IN HEX.
*    2.  DEFAULT WAIT REDUCED FROM 5 TO 1 SECOND SO PARAMETER NOW
*        SPECIFIES THE NUMBER OF SECONDS TO SAMPLE OVER.
*    3.  MVS OVERHEAD IS CALCULATED USING LCCAWTIM (MP OKAY TOO).
*    4.  NEGATIVE TIME INCREASES ARE NOW HANDLED A BIT BETTER.
*    5.  CHANNEL-CONNECT/ELAPSED TIME PERCENTAGE NOW SHOWN.
*
* UPDATED TO HANDLE BOTH MVS/XA AND MVS/ESA     (GP@P6  31 MAY 89)
*
* UPDATED TO FIX FUNNY UTILIZATIONS FOR MP      (GP@P6  26 JUN 90)
*
         MACRO
&NAME    PGM   &BASE=R12,&SAVE=$$SAVE,&START=$$START,&EOJ=$$EOJ,&RC=16
&NAME    CSECT
&NAME    AMODE 31
&NAME    RMODE 24
         B     14(0,R15)           BRANCH AROUND PROGRAM ID.
         DC    AL1(8)              CSECT NAME LENGTH.
         DC    CL8'&NAME'          CSECT IDENTIFIER.
         DC    X'FF'               FILLER.
         STM   R14,R12,12(R13)     STORE THE REGISTERS.
         BASR  &BASE,0             ESTABLISH ADDRESSABILITY.
         USING *,&BASE             TELL ASSEMBLER ABOUT BASE REGISTER.
R0       EQU   0                   REGISTER 0.
R1       EQU   1                   REGISTER 1.
R2       EQU   2                   REGISTER 2.
R3       EQU   3                   REGISTER 3.
R4       EQU   4                   REGISTER 4.
R5       EQU   5                   REGISTER 5.
R6       EQU   6                   REGISTER 6.
R7       EQU   7                   REGISTER 7.
R8       EQU   8                   REGISTER 8.
R9       EQU   9                   REGISTER 9.
R10      EQU   10                  REGISTER 10.
R11      EQU   11                  REGISTER 11.
R12      EQU   12                  REGISTER 12.
R13      EQU   13                  REGISTER 13.
R14      EQU   14                  REGISTER 14.
R15      EQU   15                  REGISTER 15.
         LA    R15,&SAVE           ADDRESS OF OUR SAVE AREA.
         ST    R13,4(R15)          BACKWARD SAVE AREA CHAIN.
         ST    R15,8(R13)          FORWARD SAVE AREA CHAIN.
         LR    R13,R15             POINT R13 TO CURRENT SAVE AREA.
         B     &START              BRANCH TO ENTRY CODE.
&EOJ     CH    R15,$$RC            IS RETURN CODE HIGHER THAN &RC?
         BNH   *+6                 YES - LETS ZERO R15.
         SLR   R15,R15             ZERO OUT REGISTER 15.
         L     R13,&SAVE+4         POINT R13 TO PREVIOUS SAVE AREA.
         L     R14,12(R13)         RESTORE REGISTER 14.
         LM    R0,R12,20(R13)      RESTORE THE REGISTERS.
         BR    R14                 RETURN TO OS.
&SAVE    DC    18F'0'              OUR SAVE AREA.
$$RC     DC    H'&RC'              RETURN CODE.
$$START  DS    0H                  DEFAULT ENTRY POINT.
         MEND
         EJECT
DCPU     PGM                ,PGM TO SHOW EXEC JOBS AND STC
         MVI   BUFFER,C' '        CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         L     R2,X'21C'          POINT TO CURRENT TCB
         L     R2,12(0,R2)        POINT TO TIOT
         CLI   0(R1),X'80'        INVOKED VIA CALL OR $?
         BNE   XTRCT              NO, TSO COMMAND
         L     R1,0(,R1)          GET PARAMETER ADDRESS
PARMPROC CLI   1(R1),X'00'        ANY PARAMETER?
         BE    XTRCT              NO, LENGTH IS ZERO
         SLR   R3,R3
         IC    R3,2(,R1)          GET 1ST BYTE OF PARM (IGNORE REST)
         N     R3,=F'15'          CONVERT FACTOR TO BINARY
         CLI   1(R1),X'01'        WAS LENGTH 1?
         BE    GETDELAY           YES
         M     R2,=F'10'          NO, TAKE A SECOND DIGIT
         SLR   R2,R2
         IC    R2,3(,R1)
         N     R2,=F'15'          CONVERT FACTOR TO BINARY
         AR    R3,R2              ADD UNITS TO TENS
GETDELAY M     R2,DELAY           MULTIPLY BY 1 SECOND DELAY
         AH    R3,=H'50'          ADD HALF A SEC IN CASE OF ZERO
         ST    R3,DELAY           STORE NEW DELAY LENGTH
XTRCT    EQU   *
         EXTRACT MF=(E,EXTRACT)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
*
         L     R11,CVTPTR         (R11)=ADDR CVT
         USING CVT,R11
         L     R9,CVTOPCTP        (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)= MAX NUMB OF ASCB ENTRIES
         LR    R0,R5              GET MAXUSER
         SLL   R0,6                  *64 BYTES FOR TABLE SIZE
         ST    R5,MAXUSER         SAVE FOR LATER
         GETMAIN RU,LV=(0),SP=6,LOC=(ANY,ANY) GET STORAGE FOR TABLE
         ST    R1,TBLORIGN        SAVE ADDRESS FOR SECOND PASS
         LR    R6,R1              (R6)= A.S. INFO ENTRY
         MODESET MF=(E,MDSTSUP0)  GET INTO KEY ZERO.
         LA    R0,X'29'           LOAD DONTSWAP SYSEVENT CODE.
         SVC   95                 ISSUE SYSEVENT SVC.
         TIME  BIN
         ST    R0,STARTIME        GET TIME OF DAY
         LA    R9,ASVTENTY        (R9)= ADDR OF FIRST ASCB ENTRY
         DROP  R9
         USING ENTRY,R6
         SPACE
DOIT1    LA    R0,1               INCREMENT ASID
         A     R0,AS#
         ST    R0,AS#
         UNPK  ASID(5),AS#+2(3)
         TR    ASID,HEX-C'0'
         MVI   FILL2,C' '
         XC    TCBTIM(12),TCBTIM  ZERO TIMES FOR EMPTY ASID
         ICM   R8,15,0(R9)        LOAD ASCB ADDR.
         BM    ASCBLP1            NOT ASSIGNED -> TRY AGAIN.
         USING ASCB,R8
         LM    R0,R1,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R0,12             CONVERT TO MICRO-SECONDS.
         ST    R1,TCBTIM
         LM    R0,R1,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R0,12             CONVERT TO MICROSECONDS.
         ST    R1,SRBTIM
         MVC   CHNTIM,ASCBDCTI   REMEMBER CHANNEL CONNECT TIME.
ASCBLP1  LA    R9,4(0,R9)         INCR INTO ASVT
         LA    R6,64(,R6)         POINT TO TABLE ENTRY
         BCT   R5,DOIT1           CHECK COUNT
         DROP  R6
         L     R1,CVTLCCAT       --> LCCA VECTOR TABLE
         LA    R0,16              GET MAXIMUM CPU COUNT
         SLR   R14,R14            ZERO ACCUMULATOR
LCC1LOOP ICM   R15,15,0(R1)       POINT TO LCCA OF THIS CPU
         BZ    NEXTLCC1           ZERO POINTER SO CHECK OUT NEXT CPU
         LM    R2,R3,616(R15)     LOAD ACCUMULATED CPU WAIT TIME
         SRDL  R2,12              CONVERT TO MICROSECONDS
         ALR   R14,R3             ADD IT TO ACCUMULATOR
NEXTLCC1 LA    R1,4(,R1)          POINT TO NEXT LCCA POINTER
         BCT   R0,LCC1LOOP
         ST    R14,WAITACUM       SAVE IT FOR LATER
         STIMER WAIT,BINTVL=DELAY
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)= MAX NUMB OF ASCB ENTRIES
         LA    R9,ASVTENTY        (R9)= ADDR OF FIRST ASCB ENTRY
         DROP  R9,R11
         L     R11,RMCTPTR       --> RMCT
         L     R11,4(0,R11)      --> CCT
         LH    R11,102(,R11)     GET CCVUTILP
         ST    R11,SAVUTILP      SAVE FOR LATER
         L     R11,TBLORIGN       (R11)= A.S. INFO ENTRY
         USING ENTRY,R11
         TIME  BIN
         S     R0,STARTIME        GET REAL DELAY
         ST    R0,DELAY
         CVD   R0,WRKD            REPORT ELAPSED SAMPLE TIME
         L     R1,CVTPTR           (R1)=ADDR CVT
         USING CVT,R1
         L     R1,CVTLCCAT       --> LCCA VECTOR TABLE
         DROP  R1
         LA    R0,16              GET MAXIMUM CPU COUNT
         SLR   R15,R15            ZERO ACCUMULATOR
         SLR   R8,R8              ZERO CPU COUNTER
LCC2LOOP ICM   R14,15,0(R1)       POINT TO LCCA OF THIS CPU
         BZ    NEXTLCC2           ZERO POINTER SO CHECK OUT NEXT CPU
         LM    R2,R3,616(R14)     LOAD ACCUMULATED CPU WAIT TIME
         SRDL  R2,12              CONVERT TO MICROSECONDS
         ALR   R15,R3             ADD IT TO ACCUMULATOR
         LA    R8,1(,R8)          INCREMENT CPU COUNTER
NEXTLCC2 LA    R1,4(,R1)          POINT TO NEXT LCCA POINTER
         BCT   R0,LCC2LOOP
         SL    R15,WAITACUM       GET THE WAIT TIME DIFFERENCE
         SLR   R14,R14            PREPARE FOR DIVIDE
         DR    R14,R8             SCALE TO CP AVERAGE (IN CASE MP)
         ST    R15,WAITACUM       SAVE IT FOR LATER
         OI    WRKD+6,X'0F'       CONTINUE WITH SAMPLE TIME DISPLAY
         UNPK  SECS,WRKD+5(2)
         CLI   SECS,C'0'          MORE THAN 99 SECONDS?
         BNE   DOIT               NO, GO GET FIRST ASCB.
         MVI   SECS,C':'          YES, SUPPRESS LEADING ZERO.
         CLI   SECS+1,C'0'        MORE THAN 9 SECONDS?
         BNE   DOIT               NO, GO GET FIRST ASCB.
         MVI   SECS+1,C' '        YES, SUPPRESS LEADING ZERO.
*
* LOOP THROUGH ALL ASCBS
*
DOIT     ICM   R8,15,0(R9)        LOAD ASCB ADDR.
         BM    NEXTONE            ASID UNASSIGNED -> TRY AGAIN.
         L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
         SLR   R3,R3
         IC    R3,CHTRKID         GET ADDRESS SPACE TYPE
         LA    R3,TYPES(R3)       GET ADDRESS SPACE CODE
         MVC   FLAG,0(R3)
         SPACE
GETJOBNM ICM   R3,15,ASCBJBNI     GET JOBNAME
         BNZ   GOTJOBNM           GOT IT
         ICM   R3,15,ASCBJBNS     GET JOBNAME
         BZ    STARTING           NO JOB NAME YET
GOTJOBNM MVC   JOBNAME,0(R3)
*        MVC   JOBNAME,CHCLS      MOVE IN JOBNAME FROM CSCB
*        MVC   PROCNAME,CHKEY     MOVE IN PROCNAME FROM CSCB
*        MVC   STEPNAME,CHPRCSTP  MOVE IN STEPNAME FROM CSCB
         B     GETREST
STARTING MVC   JOBNAME,=C'STARTING'
         SPACE
GETREST  MVC   FILL1,=C'  '
         BAS   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
NEXTONE  LA    R9,4(0,R9)         INCR INTO ASVT.
         LA    R11,64(0,R11)      INCR INTO TABLE.
         BCT   R5,DOIT            CHECK COUNT.
         EJECT
*        TM    TSOFLAG,X'80'      TSO USER?
*        BZ    NOCLEAR            NO, NO SCREEEN TO CLEAR
*        STLINENO LINE=1          CLEAR SCREEN
NOCLEAR  LA    R1,HEADING1
         BAS   R6,PUTMSG          WRITE OUT HEADING1
         LA    R1,HEADING2
         BAS   R6,PUTMSG          WRITE OUT HEADING2
         L     R5,MAXUSER         GET MAX NO. OF ADDRESS SPACES
         L     R11,TBLORIGN       GET TABLE ADDRESS
REPTLOOP CLC   CPUUSE+2(2),=C' 0' ANY APPRECIABLE CPU TIME USED?
         BH    SHOWLINE           YES, SO REPORT IT.
         CLC   CHNUSE+2(2),=C' 1' ANY APPRECIABLE CHANNEL TIME USED?
         BNH   NEXTLINE           NO, SO DON'T REPORT IT.
         SPACE
SHOWLINE MVC   BUFFER(L'BUFFER),ENTRY
         LA    R1,MSGWTO
         BAS   R6,PUTMSG          SHOVEL IT OUT
         MVI   BUFFER,C' '         AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
NEXTLINE LA    R11,64(0,R11)      POINT TO NEXT ENTRY
         BCT   R5,REPTLOOP
         EJECT
CLEANUP  L     R5,JOBTIME        GET ALL BATCH CPU TIME.
         SLR   R4,R4
         D     R4,DELAY          GET % CPU USAGE FOR ALL JOBS.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   JOBS(4),=X'40202120'
         ED    JOBS(4),WRKD+6
         L     R5,TSUTIME        GET ALL TSU CPU TIME.
         SLR   R4,R4
         D     R4,DELAY          GET % CPU USAGE FOR ALL TSUS.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   TSUS(4),=X'40202120'
         ED    TSUS(4),WRKD+6
         L     R5,STCTIME        GET ALL STC CPU TIME.
         SLR   R4,R4
         D     R4,DELAY          GET % CPU USAGE FOR ALL STCS.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   STCS(4),=X'40202120'
         ED    STCS(4),WRKD+6
         L     R5,SYSTIME        GET SYSTEM ADDRESS SPACE CPU TIME.
         SLR   R4,R4
         D     R4,DELAY          GET % CPU USAGE FOR OVERHEAD.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   SYSS(4),=X'40202120'
         ED    SYSS(4),WRKD+6
         L     R5,TCBTIME        GET TCB CPU TIME.
         SLR   R4,R4
         D     R4,DELAY          GET % CPU USAGE UNDER TCBS.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   TCBS(4),=X'40202120'
         ED    TCBS(4),WRKD+6
         L     R5,SRBTIME        GET SRB CPU TIME.
         SLR   R4,R4
         D     R4,DELAY          GET % CPU USAGE UNDER SRBS.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   SRBS(4),=X'40202120'
         ED    SRBS(4),WRKD+6
         L     R5,DELAY          GET ACTUAL DELAY IN CENTISECONDS.
         M     R4,=F'10000'      CONVERT TO MICROSECONDS.
         S     R5,WAITACUM       SUBTRACT WAIT TIME.
         LR    R1,R5             REMEMBER NON-WAIT MICROSECONDS.
         D     R4,DELAY          GET % CPU USAGE FOR EVERYTHING.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   CPUS(4),=X'40202120'
         ED    CPUS(4),WRKD+6
         S     R1,JOBTIME        SUBTRACT ATTRIBUTED JOB ASID CPU TIME.
         S     R1,STCTIME        SUBTRACT ATTRIBUTED STC ASID CPU TIME.
         S     R1,TSUTIME        SUBTRACT ATTRIBUTED TSU ASID CPU TIME.
         S     R1,SYSTIME        SUBTRACT ATTRIBUTED SYS ASID CPU TIME.
         BNP   NEGOVRHD          NEGATIVE/NEGLIGIBLE OVERHEAD.
         SLR   R0,R0
         D     R0,DELAY          GET % OVERHEAD.
         A     R1,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R0,R0
         D     R0,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R1,WRKD
         MVC   OVHD(4),=X'40202120'
         ED    OVHD(4),WRKD+6
         MVC   OVHD+4(10),=C'% OVERHEAD'
NEGOVRHD L     R2,SAVUTILP       GET CCVUTILP AS AT SAMPLE-END TIME.
         CVD   R2,WRKD
         MVC   CCVUTILP(4),=X'40202120'
         ED    CCVUTILP(4),WRKD+6
         LA    R1,MSG1
         BAS   R6,PUTMSG         SHOVEL OUT SUMMARY MESSAGES.
         LA    R1,MSG2
         BAS   R6,PUTMSG
         LA    R1,MSG3
         BAS   R6,PUTMSG
*
         LA    R0,X'2A'           LOAD OKSWAP SYSEVENT CODE.
         SVC   95                 ISSUE SYSEVENT SVC.
         MODESET MF=(E,MDSTPROB)  GET BACK TO PROBLEM STATE.
         L     R0,MAXUSER
         SLL   R0,6               GET DYNAMIC TABLE SIZE.
         L     R1,TBLORIGN        GET TABLE ADDRESS.
         FREEMAIN RU,LV=(0),A=(1),SP=6 FREE STORAGE FOR TABLE.
         SPACE
         B     $$EOJ              RETURN.
*
         EJECT
*
*  LOCAL  SUBROUTINE TO CALC CPU TIME, CHANNEL CONNECT TIME & REAL
*                                                       STORAGE USAGE
*  ENTER  WITH BAS R6,COMPTIME  (ALL REGS PRESERVED)
*                               (R8=ASCB,R4-6=WORK)
*
*
COMPTIME STM   R4,R7,SAVEREGS    SAVE WORK REGS
         SPACE 1
*
*   COMPUTE TOTAL CPU TIME USED IN THE CURRENT STEP.
*
         LM    R4,R5,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R4,12             CONVERT TO MICRO-SECONDS.
         CL    R5,TCBTIM         HAS TCB TIME DECREASED?
         BL    TCBNEG            YES, JUST USE THE NEW TIME.
         SL    R5,TCBTIM         GET CHANGE IN TCB TIME.
TCBNEG   ST    R5,TCBTIM
         LR    R6,R5             REMEMBER IT
         A     R5,TCBTIME        ADD TO SYSTEM TOTAL TCB TIME.
         ST    R5,TCBTIME
         LM    R4,R5,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R4,12             CONVERT TO MICROSECONDS.
         CL    R5,SRBTIM         HAS SRB TIME DECREASED?
         BL    SRBNEG            YES, JUST USE THE NEW TIME.
         SL    R5,SRBTIM         GET CHANGE IN SRB TIME.
SRBNEG   ST    R5,SRBTIM
         AR    R6,R5             GET JOB CPU TIME CONSUMPTION.
         A     R5,SRBTIME        ADD TO SYSTEM TOTAL SRB TIME.
         ST    R5,SRBTIME
         LR    R5,R6             GET JOB CPU TIME CONSUMPTION.
         CLI   FLAG,C'J'         BATCH JOB?
         BNE   CPULBLA
         A     R6,JOBTIME        ADD TO TOTAL BATCH USAGE.
         ST    R6,JOBTIME
         B     CPULBLD
CPULBLA  CLI   FLAG,C'S'         STARTED TASK?
         BNE   CPULBLB
         A     R6,STCTIME        ADD TO TOTAL STC USAGE.
         ST    R6,STCTIME
         B     CPULBLD
CPULBLB  CLI   FLAG,C'T'         TIME SHARING USER?
         BNE   CPULBLC
         A     R6,TSUTIME
         ST    R6,TSUTIME        ADD TO TOTAL TSO USAGE.
         B     CPULBLD
CPULBLC  A     R6,SYSTIME        ADD TO TOTAL SYSTEM ASID USAGE.
         ST    R6,SYSTIME
CPULBLD  SLR   R4,R4
         D     R4,DELAY          GET % CPU USAGE FOR THIS JOB.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   CPUUSE(4),=X'40202120'
         ED    CPUUSE(4),WRKD+6
         SLR   R4,R4
         L     R5,ASCBDCTI       LOAD ACCUMULATED CHANNEL CONNECT TIME.
         CL    R5,CHNTIM         HAS CHANNEL CONNECT TIME DECREASED?
         BL    CHNNEG            YES, JUST USE THE NEW TIME.
         SL    R5,CHNTIM         GET CHANGE IN CHANNEL CONNECT TIME.
CHNNEG   SLDL  R4,7              CONVERT TO MICROSECONDS.
         D     R4,DELAY          GET % CPU USAGE FOR THIS JOB.
         A     R5,=F'50'         ROUND TO NEAREST PERCENT.
         SLR   R4,R4
         D     R4,=F'100'        GET THE RIGHT SCALING FACTOR.
         CVD   R5,WRKD
         MVC   CHNUSE(4),=X'40202120'
         ED    CHNUSE(4),WRKD+6
         MVI   FILL3,C'%'
         MVI   FILL4,C' '
         MVI   FILL5,C'%'
         SLR   R4,R4
         SLR   R5,R5
         IC    R5,ASCBDP         GET A.S. DISPATCHING PRIORITY.
         ICM   R7,15,ASCBOUCB    GET OUCB ADDRESS.
         BZ    FORMATDP          IF NO OUCB THEN USE ASCDPRTY.
         USING OUCB,R7           GET THE D. P. THE JOB RUNS AT,
         IC    R5,OUCBNDP        AND DON'T SHOW 255 JUST BECAUSE
         DROP  R7                IT MAY BE SWAPPED OUT NOW.
FORMATDP CVD   R5,WRKD
         MVC   DPRTY(4),=X'40202120'
         ED    DPRTY(4),WRKD+6
         D     R4,=F'16'         GET THE DP HEX DIGITS.
         CVD   R5,WRKD
         UNPK  PRTYHI(2),WRKD+6(2)
         OI    PRTYHI+1,C'0'
         CVD   R4,WRKD
         UNPK  PRTYLO(2),WRKD+6(2)
         OI    PRTYLO+1,C'0'
         MVI   FILL6,C'('
         MVI   FILL7,C','
         MVI   FILL8,C')'
         SPACE 2
         SLR   R4,R4              HANDLE OVER 32767 FRAMES CORRECTLY.
         ICM   R4,3,ASCBFMCT      LOAD CURRENT ALLOCATED FRAME COUNT.
         L     R5,CVTPTR
         USING CVT,R5
         CLI   CVTDCB,X'9B'       LATER OS THAN MVS/XA?
         BNE   FMCTOK             NO, ASCBFMCT SHOULD BE OKAY.
         DROP  R5
         L     R5,ASCBRSME        YES, POINT TO RSM ASCB EXTENSION.
         USING RAX,R5
         L     R4,RAXFMCT         LOAD CURRENT ALLOCATED FRAME COUNT.
         DROP  R5
FMCTOK   SLL   R4,2               TIMES FOUR FOR KB PER PAGE.
         CVD   R4,WRKD
         MVC   SIZE,=X'402020202120'
         ED    SIZE,WRKD+5
         SPACE 2
         LM    R4,R7,SAVEREGS    RESTORE REGISTERS
         BR    R6                AND RETURN.
         EJECT
*.....................................................................*
*        LOCAL SUBROUTINE FOR IO TO OPER/USER                         *
*.....................................................................*
         SPACE
*
* ENTER WITH WTO,WTOR LIST FORM POINTED TO BY R1
*
*    BAS  R6,PUTMSG         OR
*    BAS  R6,PUTGET
*
*  USES R14 FOR WORK
*
*
PUTMSG   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TPUTIT              YES-> GO DO TPUT
         SVC   35                  NO-> USE WTO
         BR    R6
TPUTIT   DS    0H
         LH    R0,0(,R1)           GET LENGTH OF WTO MESSAGE
         S     R0,=F'4'            SUBTRACT OFF HEADER
         LA    R1,4(,R1)           BUMP MSG ADDRESS PAST HDR
         TPUT  (1),(0),R           DO THE TPUT
         BR    R6
         EJECT
PUTGET   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TSOIT               YES-> GO USE TGET
         LR    R14,R1              NO-> USE WTOR .. SAVE MSG ADDRESS
         SVC   35                  DO THE WTOR...
         L     R1,4(,R14)          GET ADDR OF ECB
         XC    0(4,R1),0(R1)       CLEAN OUT THE ECB....
         LA    R0,1
         SVC   1                   WAIT FOR WTOR TO COMPLETE
         B     PUTRET              RETURN
TSOIT    DS    0H
         LR    R14,R1              SAVE
         LH    R0,8(,R1)           PUT LENGTH
         S     R0,=F'4'
         LA    R1,12(,R1)          PAST HDR
         TPUT  (1),(0),R
         SLR   R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
         L     R1,0(,R14)          GET REPLY ADRS
         LA    R1,0(,R1)
         ICM   R1,B'1000',=X'80'   INDICATE TGET...
         TGET  (1),(0),R
PUTRET   DS    0H
         L     R1,0(,R14)          GET REPLY ADRS
         XR    R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
UPPER    DS    0H
         OI    0(R1),C' '          UPPER CASE
         LA    R1,1(,R1)           NXT
         BCT   R0,UPPER
         BR    R6
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L
         SPACE 2
MDSTSUP0 MODESET MODE=SUP,KEY=ZERO,MF=L
         SPACE 2
MDSTPROB MODESET MODE=PROB,KEY=NZERO,MF=L
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
SWITCH   DC    XL1'00'
TSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO
ANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT
TBLORIGN DC    F'0'                ADDRESS OF WORK TABLE - 64
         SPACE 2
WRKD     DC    D'0'
DELAY    DC    F'100'              SET TIMER DELAY UNIT IN CENTISECONDS
TCBTIME  DC    F'0'
SRBTIME  DC    F'0'
JOBTIME  DC    F'0'
STCTIME  DC    F'0'
TSUTIME  DC    F'0'
SYSTIME  DC    F'0'
RMCTPTR  DC    F'0'
WAITACUM DC    F'0'
STARTIME DC    F'0'
SAVEREGS DC    4F'0'
MAXUSER  DC    F'0'
AS#      DC    F'0'
SAVUTILP DC    F'0'
TYPES    DC    C'OTSJO'            JOB TYPES: TSU, STC, JOB, SYS-AS
         EJECT
*.....................................................................*
*        MESSAGE FORMATS                                              *
*.....................................................................*
         SPACE 2
MSG1     WTO   '* 101% BATCH  101% TSO  101% STC  101% SYS-AS          X
                    ',ROUTCDE=(2,11),MF=L                      101% OVE
         ORG   MSG1+5
JOBS     DS    CL4
         ORG   MSG1+17
TSUS     DS    CL4
         ORG   MSG1+27
STCS     DS    CL4
         ORG   MSG1+37
SYSS     DS    CL4
         ORG   MSG1+50
OVHD     DS    CL4
         ORG
         SPACE 2
MSG2     WTO   '* 101% TASK CONTROL BLOCK  101% SERVICE REQUEST BLOCK',X
               ROUTCDE=(2,11),MF=L
         ORG   MSG2+5
TCBS     DS    CL4
         ORG   MSG2+30
SRBS     DS    CL4
         ORG
         SPACE 2
MSG3     WTO   '* THE CPU IS BUSY 101% OF THE TIME.  (CCVUTILP IS 101%.X
               )',ROUTCDE=(2,11),MF=L
         ORG   MSG3+21
CPUS     DS    CL4
         ORG   MSG3+53
CCVUTILP DS    CL4
         ORG
         SPACE 2
MSGWTO   WTO   '123456789.123456789.123456789.123456789.    ',         X
               ROUTCDE=(2,11),MF=L
         ORG   MSGWTO+4
BUFFER   DS    CL43
         ORG
         EJECT
*               @@@@@@@@  XXXX  ZZ9%  ZZ9% ZZZZ9 ZZ9(99,99)
HEADING1 WTO   '(SAMPLE:Z9 SEC) USING USING REAL DISPATCHING',         X
               ROUTCDE=(2,11),MF=L
         ORG   HEADING1+11
SECS     DS    CL3
         ORG
HEADING2 WTO   ' JOBNAME  ASID   CPU   CHN   KB   PRIORITY',           X
               ROUTCDE=(2,11),MF=L
         EJECT
*.....................................................................*
*        LITERALS                                                     *
*.....................................................................*
         SPACE 2
HEX      DC    C'0123456789ABCDEF'
         SPACE
         LTORG
         EJECT
ENTRY    DSECT
JOBNAME  DC    CL8' '
FILL1    DC    CL2' '
ASID     DC    CL4' '
FILL2    DC    CL1' '
CPUUSE   DC    CL4' '
FILL3    DC    CL1'%'
FILL4    DC    CL1' '
CHNUSE   DC    CL4' '
FILL5    DC    CL1'%'
SIZE     DC    CL6' '
DPRTY    DC    CL4' '
FILL6    DC    CL1'('
PRTYHI   DC    CL2' '
FILL7    DC    CL1','
PRTYLO   DC    CL2' '
FILL8    DC    CL1')'
FLAG     DC    CL1' '
         DS    0F
TCBTIM   DC    F'0'
SRBTIM   DC    F'0'
CHNTIM   DC    F'0'
         CVT   DSECT=YES
         EJECT
CSCB     DSECT
         IEECHAIN
         EJECT
         IHAASCB
         EJECT
         IHAASVT
         EJECT
         IRAOUCB
         EJECT
         IARRAX
         END
