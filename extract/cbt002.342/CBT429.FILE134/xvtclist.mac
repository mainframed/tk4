XVTCLIST TITLE 'DIRECT-ACCESS VOLUME TABLE OF CONTENTS LISTER'
         SPACE 2
* AUTHOR:  R. F. MORSE, MIT INSTRUMENTATION LABORATORY
         SPACE
* FUNCTION/OPERATION:  READS AND EDITS THE VOLUME TABLE OF CONTENTS
*        (VTOC) FROM ONE OR MORE DIRECT ACCESS VOLUMES AND PRINTS
*        INFORMATION ABOUT THE DATA SETS ON IT AND A TRACK USAGE MAP.
*        OPTIONALLY, IT LISTS THE DIRECTORY OF EACH PARTITIONED DATA
*        SET ON THE VOLUME.
         SPACE
* ENTRY POINTS:  ENTER AT 'GENESIS' WITH A BALR 14,15 AND REGISTER 13
*        SET TO A STANDARD SAVE AREA.  REGISTER 1 POINTS TO A FULL WORD
*        WHICH POINTS TO A PARAMETER FIELD.
         SPACE
* INPUT:  THE PARAMETER FIELD REFERENCED BY R1 BEGINS WITH A HALF-WORD
*        CONTAINING THE BINARY LENGTH OF THE BYTE STRING WHICH FOLLOWS
*        IT.  THE STRING CONSISTS OF A SERIES OF PARAMETER WORDS
*        SEPARATED BY COMMAS.  LEGAL WORDS ARE:
*              DUMP    CAUSES THE DSCB'S TO BE LISTED IN HEX FOLLOWING
*                      THEIR FORMATTED LISTINGS.
*              PDS     CAUSES THE DIRECTORY OF EACH PDS TO BE LISTED.
*              MAP     CAUSES THE TRACK USAGE MAP TO BE PRINTED.
         SPACE
* OUTPUT:  A PRINTED LISTING DESCRIBING THE DATA SETS AND TRACK USAGE
*        FOR EACH VOLUME.
         SPACE
* DATA SETS:  PRINTED OUTPUT IS DELIVERED TO A DATA SET DESCRIBED ON A
*        DD CARD WITH DDNAME 'SYSPRINT'.  EACH VOLUME TO BE LISTED MUST
*        HAVE A DD CARD WITH THE DDNAME "VOL.....", WHERE ONLY THE
*        FIRST THREE CHARACTERS ARE TESTED.  THE DD CARDS ARE
*        REQUIRED TO SPECIFY ONLY THE VOLUME SERIAL, UNIT, AND
*        A DISPOSITION OF 'OLD'.
         SPACE
* EXTERNAL ROUTINES:
*        CALLS 'XVTCREAD' TO READ VTOC FROM DIRECT-ACCESS DEVICES,
*              AND REFERS TO 'XVTCDCB' TO ACCESS THE VTOC DCB.
*        CALLS 'XPRNTSUB' TO DO PRINTING AND PAGINATION.
*        CALLS 'XVTCLOG'  TO CALCULATE NATURAL LOGARITHMS.
         SPACE
* EXITS-NORMAL:  RETURNS VIA REG 14 WITH RETURN CODE 0.
         SPACE
* EXITS-ERROR:  RETURNS VIA REG 14 WITH RETURN CODES AS FOLLOWS:
*        04 - MISSING DD CARD OR CVAFTST ERROR;
*        08 - BAD FORMAT IN A DSCB OR CVAFDSM ERROR;
*        12 - PERMANENT I/O ERROR IN A VTOC OR PDS DIRECTORY;
*        20 - UNABLE TO OPEN 'SYSPRINT' DATA SET.
         SPACE
* TABLES/WORK AREAS:  USES SYSTEM MACROS 'IEFJFCBN' AND 'IECSDSL1' TO
*        DEFINE A JOB FILE CONTROL BLOCK AND VARIOUS DATA SET CONTROL
*        BLOCK FORMATS.  USES MACRO 'IEFTIOT1' TO DEFINE TASK IO TABLE.
         SPACE
* ATTRIBUTES:  SERIALLY REUSABLE.
         SPACE
* MACHINE REQUIREMENTS:  USES A PRINTER WITH 132-CHARACTER PRINT LINE
*        AND A 60-CHARACTER PRINT TRAIN (PN OR QN ARRANGEMENT).  USES
*        ONLY THE STANDARD INSTRUCTION SET, EXCEPT FOR A FEW 'EDIT'
*        INSTRUCTIONS.  CORE REQUIREMENT VARIES WITH THE SIZE OF THE
*        VTOC BEING LISTED.  A 160-BLOCK VTOC REQUIRES ABOUT 30K.
         SPACE
* NOTES:  THE INPUT PARAMETER LIST STRUCTURE IS THAT USED TO PASS
*        INFORMATION FROM THE 'PARM' FIELD OF AN 'EXEC' CARD.
         SPACE
*        CURRENTLY IGNORES FORMAT 2 DSCB'S FOR ISAM AND FORMAT 6 DSCB'S
*        FOR SPLIT-CYLINDER ALLOCATION.
         SPACE
* MODIFICATIONS:  S.E.C.V. MODIFICATIONS ARE LARGELY A DISTILLATION OF
*        THE NUMEROUS RELATED OFFERINGS IN THE CBT MODS TAPE, ALTHOUGH
*        THERE IS SOME ORIGINAL WORK.  MODIFICATIONS INCLUDE:
*        1. SUPPORT FOR INDEXED VTOCS;
*        2. SUPPORT FOR DATA SETS WITH MORE THAN 16 EXTENTS;
*        3. SUPPORT FOR ADDITIONAL DEVICE TYPES;
*        4. CALCULATION OF FRAGMENTATION INDEX;
*        4. COSMETIC CHANGES (AND SOME CORRECTIONS).
         EJECT
XVTCLIST CSECT
         SPACE 2
* REGISTER ASSIGNMENTS:
         SPACE
E0       EQU   0
R0       EQU   0
R1       EQU   1
RPARM    EQU   1
E2       EQU   2
R2       EQU   2
RWK1     EQU   2
R3       EQU   3
RWK2     EQU   3
RWK3     EQU   4
RWK4     EQU   5
R6       EQU   6
RBASE3   EQU   7
RPDS     EQU   8
RDS1     EQU   9
RDS4     EQU   9
RMB      EQU   9
RDS3     EQU   10
RDS5     EQU   10
RDCB     EQU   10
RBASE1   EQU   11
RBASE2   EQU   12
RSAVE    EQU   13
RRET     EQU   14
R15      EQU   15
RGO      EQU   15
         EJECT
* PARAMETERS AND ASSIGNS:
         SPACE
GETSIZE  EQU   2048            BLOCK SIZE FOR GETMAIN REQUESTS
PGLENGTH EQU   57              LINES PER PAGE
TOPMARGN EQU   3               LINES TO SKIP BEFORE PAGE HEADING
ALIASMSK EQU   X'80'           PDS DIRECTORY ENTRY IS AN ALIAS
         SPACE
DADEVICE EQU   X'20'           CLASS FOR DIRECT ACCESS DEVICES
DEV23052 EQU   X'07'           UNIT TYPE FOR 2305-2 DRUM
DEV3330  EQU   X'09'           UNIT TYPE FOR 3330 MODEL 1 DISK
DEV3340  EQU   X'0A'           UNIT TYPE FOR 3340 MODEL 35 DISK
DEV3340E EQU   X'0A'           UNIT TYPE FOR 3340 MODEL 70 DISK
DEV3350  EQU   X'0B'           UNIT TYPE FOR 3350 DISK
DEV3375  EQU   X'0C'           UNIT TYPE FOR 3375 DISK
DEV33311 EQU   X'0D'           UNIT TYPE FOR 3330 MODEL 11 DISK
DEV3380  EQU   X'0E'           UNIT TYPE FOR 3380 DISK
DEV3380E EQU   X'0E'           UNIT TYPE FOR 3380-E DISK
DEV3380K EQU   X'0E'           UNIT TYPE FOR 3380-K DISK
DEV3390  EQU   X'0F'           UNIT TYPE FOR 3390 DISK
         SPACE
IXVTMASK EQU   X'80'           INDEXED VTOC MASK
DUMPMASK EQU   X'01'           OPTION TO DUMP DSCB'S IN HEX
PDSLMASK EQU   X'02'           OPTION TO LIST PDS DIRECTORIES
MAPMASK  EQU   X'08'           OPTION TO LIST TRACK USAGE
         SPACE
PRSP0    EQU   X'00'           PSEUDO CONTROL CHARACTERS FOR PRINTER
PRSP1    EQU   X'01'
PRSP2    EQU   X'02'
PRSP3    EQU   X'03'
         EJECT
*************************
* ENTRANCE AND PROLOGUE *
*************************
         SPACE
* ENTER HERE TO PERFORM STANDARD SAVE OPERATIONS AND ESTABLISH TWO BASE
* REGISTERS WITH A CONTINUOUS RANGE OF 8K BYTES.
         SPACE
GENESIS  SAVE  (14,12),,XVTCLIST-&SYSDATE
         SPACE
         LR    RBASE1,R15              SET UP BASE REGISTER
         USING GENESIS,RBASE1,RBASE2,RBASE3
         LA    RBASE2,4095(,RBASE1)    LOAD SECOND BASE 4096 BYTES
         LA    RBASE2,1(,RBASE2)         HIGHER
         LA    RBASE3,4095(,RBASE2)    LOAD THIRD BASE 4096 BYTES
         LA    RBASE3,1(,RBASE3)         HIGHER
         SPACE
         LR    RWK1,RSAVE
         LA    RSAVE,SAVEAREA          LOCAL SAVE AREA, 18 WORDS
         ST    RWK1,SAVEAREA+4         FORWARD CHAIN
         ST    RSAVE,8(,RWK1)          BACKWARD CHAIN
         SPACE
         SLR   R1,R1                   GENERATE ZERO PROGRAM MASK
         SPM   R1                      MASK OVERFLOW INTERRUPTS
         SPACE 3
* CALL PRINTING SUBROUTINE TO OPEN THE SYSPRINT DATA SET.  SET INITIAL
* PAGE DIMENSIONS AND HEADING, AND SKIP TO HEAD OF FORM.
         SPACE
         XPROPEN  PWA,PAGELEN=PGLENGTH,DDNAME=SYSPRINT
         LTR   R15,R15                 TEST FOR SUCCESSFUL OPEN
         BNZ   PROPBAD                 ERROR IF UNABLE TO PRINT
         SPACE
         XPRHEAD  PWA,LIST=INITHEAD
         SPACE
         XPRNTLIN  PWA,TEXT=REVMSG,LENGTH=L'REVMSG,SPB=SKIP,           *
               SPA=3,OFFSET=9
         SPACE 3
* INITIALIZE OTHER MISCELLANEOUS THINGS.
         SPACE
         SLR   R0,R0                   GENERATE USEFUL ZERO
         ST    R0,RETCODE              ZERO RETURN CODE REGISTER
         STC   R0,MODESW               LISTING OPTION SWITCH
         SPACE
* LOCATE THE TIOT AND SAVE THE JOB NAME.
         SPACE
         EXTRACT  TIOTLOC,FIELDS=TIOT  OBTAIN TIOT ADDRESS FROM TCB
         SPACE
         L     R1,TIOTLOC
         USING TIOT1,R1
         MVC   JOBNAME,TIOCNJOB        SAVE JOB NAME
         LA    R1,TIOENTRY             LOAD ADDR OF FIRST TABLE ENTRY
         DROP  R1
         ST    R1,TIOTLOC              SAVE TIOT ENTRY ADDRESS
         EJECT
******************************
* INPUT PARAMETER PROCESSING *
******************************
         SPACE
* RETRIEVE AND PRINT THE PARAMETER FIELD.  SCAN IT FOR WORDS AND SET
* LISTING MODE SWITCHES AND VOLUME COUNT ACCORDINGLY.
         SPACE 2
PARMGET  L     R1,SAVEAREA+4           SAVE AREA WHERE R1 STORED
         L     R1,24(,R1)              R1 WHICH WAS PASSED TO US
         L     RWK1,0(,R1)             ADDRESS OF PARM FIELD
         LH    RWK2,0(,RWK1)           LENGTH OF PARM FIELD
         LA    RWK1,2(,RWK1)           SET RWK1 TO FIRST BYTE
         SPACE
* PRINT FIELD, OR COMPLAIN IF IT IS TOO LONG.
         SPACE
         MVC   PL+10(21),=C'EXEC PARAMETER FIELD:'
         CH    RWK2,=H'99'             TEST FIELD LENGTH
         BL    PLNGOK
         MVC   PL+30(29),=C'  IS TOO LONG AND WAS IGNORED'
         SLR   RWK2,RWK2               SET LENGTH TO 0
         B     PARMPR
         SPACE
PLNGOK   LTR   R1,RWK2                 FIX UP LENGTH FOR MOVE
         BZ    PARMPR                  SKIP MOVE IF LENGTH ZERO
         BCTR  R1,0                    SUBTRACT 1 FOR MVC
         STC   R1,PARMOVE+1
PARMOVE  MVC   PL+33(0),0(RWK1)        MOVE PARM FIELD TO PRINT LINE
PARMPR   MVI   PL,PRSP3                PRINT AND SPACE 3
         BAL   RRET,PRINTSUB
         SPACE
* LOOP TO GET PARAMETER WORDS AND SET SWITCHES.
         SPACE
PARMLOOP BAL   RRET,SCAN               GET A WORD
         CLI   SCANWORD,C' '           BLANK WORD MEANS END OF STRING
         BE    PARMDONE
         SPACE
PDUMP    CLC   SCANWORD(5),=C'DUMP '
         BNE   PPDS
         OI    MODESW,DUMPMASK
         B     PARMLOOP
         SPACE
PPDS     CLC   SCANWORD(4),=C'PDS '
         BNE   PMAP
         OI    MODESW,PDSLMASK
         B     PARMLOOP
         SPACE
PMAP     CLC   SCANWORD(4),=C'MAP '
         BNE   BADPARM
         OI    MODESW,MAPMASK
         B     PARMLOOP
         SPACE
* PRINT ERROR MESSAGE FOR UNRECOGNIZED PARAMETERS.
         SPACE
BADPARM  MVC   PL+10(50),=C'"        " IS AN ILLEGAL PARAMETER AND WAS *
               IGNORED'
         MVC   PL+11(8),SCANWORD
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         B     PARMLOOP
         SPACE
* ALL PARAMETERS HAVE BEEN PROCESSED.  LOAD TIOT POINTER TO PROCESS
* FIRST VOLUME.
         SPACE
PARMDONE DS    0H
         L     RWK1,TIOTLOC            LOAD TIOT ADDRESS
         B     VOLJOIN
         EJECT
**********************
* BEGIN A NEW VOLUME *
**********************
         SPACE
* SEARCH TIOT FOR "VOL....." DDNAME.
         SPACE
NEWVOL   DS    0H
         L     RWK1,TIOTLOC            LOAD TIOT ADDRESS
         USING TIOENTRY,RWK1
         SLR   R1,R1
         IC    R1,TIOELNGH             GET LENGTH OF CURRENT ENTRY
         AR    RWK1,R1                 ADVANCE TO NEXT ENTRY
         ST    RWK1,TIOTLOC            SAVE UPDATED TIOT ADDRESS
VOLJOIN  CLI   TIOELNGH,X'00'          TEST IF ZERO-LENGTH ENTRY
         BE    EXODUS                  END OF VOLUMES IF SO
         CLC   TIOEDDNM(3),=C'VOL'     TEST IF "VOL....." DDNAME
         BNE   NEWVOL                  SKIP ENTRY IF NOT
         MVC   DDNAME,TIOEDDNM         SAVE DDNAME
         DROP  RWK1
         SPACE
* RESET PAGE NUMBER AND SKIP TO A FRESH PAGE.
         SPACE
         XPRMOD  PWA,PAGENO=1          RESET PAGE NUMBER TO 1
         SPACE
         XPREJECT  PWA                 SKIP TO A FRESH PAGE
         SPACE
         XPRHEAD  PWA,LIST=F1HD3       SET PAGE HEADING LINE
         SPACE
* RESET VARIOUS POINTERS AND COUNTERS FOR A NEW VOLUME.
         SPACE
         LA    R1,LASTFMT1             RESET FORMAT 1 CHAIN POINTER
         ST    R1,FMT1ADDR
         SPACE
         LA    R1,MBBASE               RESET TRACK MAP CHAIN POINTER
         ST    R1,MBBASE
         SPACE
         SLR   R0,R0                   GENERATE USEFUL ZERO
         ST    R0,FREECYLS             ZERO FREE CYLINDER COUNT
         ST    R0,FREETRKS               AND FREE TRACK COUNT
         ST    R0,F5EXTNTS               AND FREE EXTENTS COUNT
         ST    R0,DSCOUNT                AND DATA SET COUNT
         STCM  R0,7,FREEMAX              AND MAXIMUM CONTIGUOUS EXTENT
         STH   R0,FRAGINDX               AND FRAGMENTATION INDEX
         ST    R0,FISIGMA                AND FRAGMENTATION INDEX SIGMA
         STH   R0,CVFL1                  AND CVAF FLAG BYTES
         ST    R0,CVIOAR                 AND CVAF I/O AREA ADDRESS
         ST    R0,CVMRCDS                AND CVAF BUFFER POOL ADDRESS
         NI    MODESW,255-IXVTMASK       AND INDEXED VTOC INDICATOR
         SPACE
* INSERT DDNAME IN DCB FOR PDS DIRECTORY READING.
         SPACE
         USING IHADCB,RDCB
         LA    RDCB,PDSDCB             FIX DCB FOR PDS LISTING
         MVC   DCBDDNAM,DDNAME
         DROP  RDCB
         SPACE
* GET DEVICE TYPE AND VERIFY THAT IT IS DIRECT ACCESS.
         SPACE
         DEVTYPE  DDNAME,DEVCHAR       GET DEVICE CHARACTERISTICS
         SPACE
         LTR   RGO,RGO                 TEST R15 IF DDNAME FOUND
         BNZ   NODDCARD                ERROR, DDNAME NOT FOUND
         CLI   DEVCHAR+2,DADEVICE      TEST FOR DIRECT-ACCESS DEVICE
         BNE   NOTDACC                 ERROR, NOT DIRECT-ACCESS DEVICE
         SPACE
* LOOK UP DEVICE TYPE IN TABLE.
         SPACE
         MVC   DEVNAMOB(1),UNITTYPE    PUT UNIT TYPE AT END OF TABLE
         LA    RWK1,DEVNAMES           ADDRESS TABLE BEGINNING
DEVNAMLP CLC   DEVNAMOB(1),0(RWK1)     TEST FOR MATCH ON DEVICE TYPE
         BE    DEVNAMF                 BRANCH WHEN FOUND
         LA    RWK1,16(,RWK1)          STEP THROUGH TABLE
         B     DEVNAMLP
         SPACE
DEVNAMF  CLC   1(7,RWK1),UNKNOWN       TEST IF DEVICE KNOWN TO US
         BE    UNKNDEV                 BRANCH IF NOT
         ST    RWK1,DEVNAMAD           SAVE ADDRESS OF TABLE ENTRY
         SPACE
* DETERMINE IF INDEXED VTOC.
         SPACE
         L     R1,TIOTLOC              ADDRESS OF CURRENT TIOT ENTRY
         L     RWK1,TIOESTTB-TIOENTRY(,R1) UCB ADDRESS
         LA    RWK1,0(,RWK1)           CLEAR HIGH-ORDER BYTE
         CVAFTST UCB=(RWK1)            TEST FOR INDEXED VTOC
         B     *+4(R15)
         B     GETSER                  RC=00 - NO INDEXED VTOC SUPPORT
         B     GETSER                  RC=04 - NOT AN INDEXED VTOC
         B     IXVTSET                 RC=08 - INDEXED VTOC
         B     GETSER                  RC=12 - INDETERMINATE VTOC
         B     IXVTERR                 RC=16 - ERROR
IXVTSET  OI    MODESW,IXVTMASK         SET MASK FOR INDEXED VTOC
         SPACE
* READ JFCB AND EXTRACT VOLUME SERIAL NUMBER.
         SPACE
GETSER   RDJFCB  (PDSDCB)              READ JOB FILE CONTROL BLOCK
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   VOLUME,JFCBVOLS         SAVE VOLUME SERIAL NUMBER
         DROP  R1
         SPACE
         MVC   F1HSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   F1HSER2(6),VOLUME
         SPACE
* CALL VTOC READING ROUTINE TO OPEN VTOC.
         SPACE
         LA    R0,1                    CALL MODE 1 FOR OPEN
         LA    R1,DDNAME               ADDRESS OF DDNAME
         L     RGO,VTOCREAD            ADDRESS OF SUBROUTINE
         BALR  RRET,RGO                CALL XVTCREAD
         B     *+4(R15)                BRANCH ON RETURN CODE
         B     VOPENED                 RC=00 - SUCCESS
         B     CANTOPEN                RC=04 - UNABLE TO OPEN
         B     NOTDACC                 RC=08 - NOT DIRECT ACCESS
VOPENED  DS    0H
         SPACE
* MAKE UP A TRACK MAP ENTRY FOR THE VOLUME LABEL ON TRACK 0.
         SPACE
         MVC   FB+4(20),TRK0MAP        INSERT DUMMY ENTRY
         LA    RWK1,FB
         BAL   RRET,FILEMAP            GO INSERT IN MAP
         EJECT
* READ VTOC INTO CORE.
         SPACE
* FOR INDEXED VTOCS, DETERMINE THE NUMBER OF FREE DSCBS AND FREE VIRS.
         SPACE
         TM    MODESW,IXVTMASK         INDEXED VTOC?
         BZ    READFMT4                BRANCH IF NO
         L     RWK1,VTOCDCBA           ADDRESS OF VTOC DCB
         L     RWK1,DCBDEBAD-IHADCB(,RWK1) ADDRESS OF DEB FOR VTOC DCB
         ST    RWK1,CVDEB              STORE IN CVPL
         SPACE
         CVAFDSM ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,CTAREA=FREEDSCB,    *
               MF=(E,CVPL)
         LTR   R15,R15                 CVAF CALL SUCCESSFUL?
         BNZ   IXDSCBER                BRANCH IF NO
         SPACE
         CVAFDSM ACCESS=MAPDATA,MAP=INDEX,COUNT=YES,CTAREA=FREEVIR,    *
               MF=(E,CVPL)
         LTR   R15,R15                 CVAF CALL SUCCESSFUL?
         BNZ   IXVIRERR                BRANCH IF NO
         MVI   CVFL2,X'00'             CLEAR SECOND CVAF FLAG BYTE
         XC    CVCTAR,CVCTAR           ZERO COUNT AREA ADDRESS
         SPACE
* READ THE FIRST DSCB, WHICH SHOULD BE TYPE 4, DESCRIBING THE VOLUME
* AND VTOC CHARACTERISTICS.
         SPACE
         USING DS4,RDS4
READFMT4 LA    RWK3,DS4SIZE            SIZE OF CORE BLOCK
         BAL   RRET,GETBLOCK           GET CORE AREA
         ST    RWK2,FMT4ADDR           SAVE ADDRESS
         LR    RDS4,RWK2               SET BASE REG FOR FORMAT 4
         BAL   RRET,READSEQ            READ FIRST BLOCK
         BAL   RRET,DISASTER           END OF DATA RETURN
         CLI   DS4IDFMT,X'F4'          CHECK TYPE
         BNE   FRSTNOT4                ERROR, FIRST BLOCK NOT TYPE 4
         SPACE
* DETERMINE TRACK ADDRESS CONVERSION PARAMETERS.
         SPACE
         LH    RWK1,DS4DEVSZ+2         PICK UP TRACKS/CYLINDER
         STH   RWK1,FCYL               SET TRACKS/CYLINDER
         STH   RWK1,FC2                SET SECOND 'C' OF 'CCHH'
         SLL   RWK1,8                  MULTIPLY BY 256
         STH   RWK1,FC1                SET FIRST 'C' OF 'CCHH'
         LH    RWK1,DS4DEVSZ           PICK UP CYLINDERS/VOLUME
         MH    RWK1,FCYL               DETERMINE TRACKS/VOLUME
         SH    RWK1,DS4NOATK           SUBTRACT REMAINING ALTERNATES
         STH   RWK1,FMAXTT             SET MAX RELATIVE TRACK ADDRESS
         SPACE
* RESET DEVICE NAME IF NECESSARY (3340/3344 AND 3380).
         SPACE
         CLI   UNITTYPE,DEV3340E       3340/3344 DEVICE?
         BNE   TEST3380                NO - CHECK FOR 3380
         CLC   DS4DEVSZ(2),=X'0230'    3340/3344 MODEL 75?
         BNE   F4MAP                   NO - CONTINUE
         LA    RWK1,DVN3340E           DEVICE NAME ADDRESS
         B     SETDEVN
TEST3380 CLI   UNITTYPE,DEV3380E       3380 DEVICE?
         BNE   F4MAP                   NO - CONTINUE
         CLC   DS4DEVSZ(2),=X'06EB'    3380-E DEVICE?
         BL    F4MAP                   NO - CONTINUE
         BH    DSK3380K                NO - MUST BE 3380-K
         LA    RWK1,DVN3380E           DEVICE NAME ADDRESS
         B     SETDEVN
DSK3380K LA    RWK1,DVN3380K           DEVICE NAME ADDRESS
SETDEVN  ST    RWK1,DEVNAMAD           STORE ADDRESS OF DEVICE NAME
         SPACE
* PUT VTOC EXTENT INTO THE TRACK MAP.
         SPACE
F4MAP    MVC   FB+FBCCHH1(8),DS4VTOCE+2
         LA    RWK1,DS4VTOCE
         BAL   RRET,F13CNVT            GET EXTENT SIZE IN R0
         STH   R0,FB+FBNTRKS
         ST    R0,VTOCSIZE             SAVE N TRACKS IN VTOC
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL IN TRACK MAP ENTRY
         MVC   FB+FBEXT(1),DS4VTOCE+1  EXTENT NUMBER (-1)
         MVI   FB+FBFLAG,X'00'         INDICATE VALID EXTENT NUMBER
         MVC   FB+FBNAME(4),=A(VTOCNAME)  INSERT ADDR OF NAME FOR VTOC
         LA    RWK1,FB
         BAL   RRET,FILEMAP            PUT ENTRY IN TRACK MAP
         DROP  RDS4
         SPACE 3
* READ FORMAT 5 DSCB'S INTO CORE, CHAINING THEM TOGETHER.  THE FIRST
* ONE FOLLOWS THE FORMAT 4 BLOCK; THE OTHERS ARE EACH ADDRESSED FROM
* THE PRECEDING ONE (FOR NON-INDEXED VTOCS ONLY).
         SPACE
         USING DS5,RDS5
         LA    RWK3,DS5SIZE            SIZE OF BLOCK REQUIRED
         BAL   RRET,GETBLOCK
         ST    RWK2,FMT5ADDR           SAVE ADDR OF FIRST FMT 5 BLOCK
         LR    RDS5,RWK2               SET FORMAT 5 BASE REG
         BAL   RRET,READSEQ            READ FIRST FMT 5 BLOCK
         BAL   RRET,DISASTER           END FILE NOT EXPECTED HERE
         TM    MODESW,IXVTMASK         INDEXED VTOC?
         BZ    DS5JOIN                 NO  - FOLLOW FORMAT 5 CHAIN
         BO    IX5LOOP                 YES - OBTAIN IXVTOC SPACE MAP
         SPACE
DS5LOOP  LA    RWK3,DS5SIZE
         BAL   RRET,GETBLOCK
         ST    RWK2,DS5CHAIN           CHAIN FROM CURRENT TO NEW
         LA    RWK1,DS5PTRDS           ADDR OF DISK ADDRESS
         LR    RDS5,RWK2               UPDATE BASE REG TO NEW BLOCK
         BAL   RRET,READDIR            READ NEW BLOCK
DS5JOIN  CLI   DS5FMTID,X'F5'          MUST BE FORMAT 5, OR ELSE.....
         BNE   BADFMT5                 ERROR, NOT FORMAT 5 BLOCK
         SPACE
         BAL   RRET,F5SPANAL           GO ANALYZE FREE SPACE EXTENTS
         SPACE
         NC    DS5PTRDS,DS5PTRDS       IS THERE ANOTHER BLOCK TO FOLLOW
         BNZ   DS5LOOP                 BRANCH IF YES
         B     DS5FIN
         SPACE 1
* USE CVAF MACRO CVAFDSM TO CONSTRUCT DUMMY FORMAT 5 DSCB'S, CHAINING
* THEM TOGETHER TO THE SINGLE REAL (BUT INCORRECT) FORMAT 5 DSCB.
         SPACE
IX5LOOP  LA    RWK3,DS5SIZE
         BAL   RRET,GETBLOCK
         ST    RWK2,DS5CHAIN           CHAIN FROM CURRENT TO NEW
         MVI   4(RWK2),26              REQUEST 26 EXTENTS
         MVC   5(2,RWK2),DS5MAVET+17*5 SPECIFY STARTING RTA
         LR    RDS5,RWK2               UPDATE BASE REG TO NEW BLOCK
         LA    RWK2,4(,RWK2)           POINT TO START OF EXTENTS
         ST    RWK2,CVEXTS             STORE IN CVPL
         SPACE
         CVAFDSM ACCESS=MAPDATA,MAP=VOLUME,MAPRCDS=YES,MF=(E,CVPL)
         CH    R15,=H'4'               TEST CVAF RETURN CODE
         BL    IX5BLD                  RC=00 - SUCCESSFUL
         BH    IXMAPERR                RC>04 - CVAF ERROR
         CLI   CVSTAT,STAT032          RC=04 - END OF DATA?
         BNE   IXMAPERR                        NO, CVAF ERROR
         SPACE
IX5BLD   MVC   DS5KEYID,=XL4'05050505'
         MVC   DS5AVEXT(40),DS5AVEXT+1 MASSAGE TO LOOK LIKE
         MVI   DS5FMTID,X'F5'            REAL FORMAT 5 DSCB
         XC    DS5PTRDS,DS5PTRDS
         XC    DS5FDAD,DS5FDAD         CLEAR CCHHR OF (DUMMY) DSCB
         SPACE
         BAL   RRET,F5SPANAL           GO ANALYZE FREE SPACE EXTENTS
         SPACE
         CLI   CVSTAT,STAT032          END OF DATA?
         BNE   IX5LOOP                 BRANCH IF NO
         CVAFDSM ACCESS=RLSE,MF=(E,CVPL) RELEASE CVAF BUFFERS
         SPACE
DS5FIN   SLR   R0,R0                   SET CHAIN OF LAST
         ST    R0,DS5CHAIN               BLOCK TO ZERO
         DROP  RDS5
         SPACE 3
* READ ALL THE FORMAT 1 DSCB'S AND CHAIN THEM IN COLLATING SEQUENCE BY
* DATA SET NAME.  IF THERE ARE FORMAT 3 DSCB'S, THEY ARE READ AND
* CHAINED TO THE FORMAT 1 BLOCK.
         SPACE
         USING DS1,RDS1
F1RDLOOP LA    RWK3,DS1SIZE            LOAD SIZE OF BLOCK REQUIRED
         BAL   RRET,GETBLOCK
         LR    RDS1,RWK2               LOAD BASE REG
F1RDNEXT BAL   RRET,READSEQ            READ NEXT SEQUENTIAL BLOCK
         B     VTRDDONE                EXIT AT END OF FILE
         CLI   DS1FMTID,X'F1'          TEST FOR FORMAT 1
         BNE   F1RDNEXT                IGNORE IF NOT FORMAT 1
         SPACE
         L     R1,DSCOUNT              COUNT DATA SETS
         LA    R1,1(,R1)
         ST    R1,DSCOUNT
         SPACE
         L     RWK1,FMT1ADDR           LOAD BEGINNING OF CHAIN
         L     RWK2,=A(FMT1ADDR-FM1NXTF1)  LOAD CHAIN HISTORY REG
F1SORT   CLC   DS1DSNAM,FM1DSNAM(RWK1) SORT INTO SEQUENCE
         BL    F1THREAD                BRANCH WHEN PLACE IS FOUND
         LR    RWK2,RWK1               UPDATE HISTORY REG
         L     RWK1,FM1NXTF1(,RWK1)    FOLLOW CHAIN TO NEXT
         B     F1SORT
         SPACE
F1THREAD ST    RWK1,DS1NXTF1           CHAIN TO FOLLOWING BLOCK
         ST    RDS1,FM1NXTF1(,RWK2)    CHAIN FROM PRECEDING BLOCK
         SLR   R0,R0                   ZERO CHAIN TO POSSIBLE FORMAT 3
         ST    R0,DS1CHAIN               BLOCK
         SPACE
         NC    DS1PTRDS,DS1PTRDS       TEST FOR FORMAT 3 ADDRESS
         BZ    F1RDLOOP                BRANCH IF NO (F1 ONLY)
         SPACE
         LA    RWK3,DS3SIZE            LENGTH OF BLOCK FOR FORMAT 3
         BAL   RRET,GETBLOCK
         LR    RDS3,RWK2               BASE REG FOR FORMAT 3 DSECT
         USING DS3,RDS3
         LA    RWK1,DS1PTRDS           DISK ADDRESS DSCB CHAIN PTR.
F3RD     BAL   RRET,READDIR            READ BLOCK
         CLI   DS3FMTID,X'F3'          TEST FOR FORMAT 3
         BE    F3GOT                   BRANCH IF FOUND
         SPACE
         NC    DS3PTRDS,DS3PTRDS       IF NOT 3, TRY FOR ANOTHER
         BZ    F1RDLOOP                BRANCH IF NO MORE
         LA    RWK1,DS3PTRDS           DISK ADDRESS OF FORMAT 3
         B     F3RD                    TRY AGAIN
         SPACE
F3GOT    ST    RDS3,DS1CHAIN           CHAIN FROM FORMAT 1
F3LOOP   SLR   R0,R0                   ZERO CHAIN TO POSSIBLE FORMAT 3
         ST    R0,DS3CHAIN               BLOCK
         NC    DS3PTRDS,DS3PTRDS       TEST FOR FURTHER FORMAT 3
         BZ    F1RDLOOP                BRANCH IF NO (GET NEXT F1)
         SPACE
         LA    RWK1,DS3PTRDS           DISK ADDRESS OF NEW FORMAT 3
         LA    RWK3,DS3SIZE            LENGTH OF BLOCK FOR FORMAT 3
         BAL   RRET,GETBLOCK
         ST    RWK2,DS3CHAIN           CHAIN FROM CURRENT FORMAT 3
         LR    RDS3,RWK2               BASE REG FOR NEW FORMAT 3
         BAL   RRET,READDIR            READ BLOCK
         B     F3LOOP
         DROP  RDS1,RDS3
         SPACE 3
* VTOC IS COMPLETELY READ.  CLOSE READING SUBROUTINE.
         SPACE
VTRDDONE LA    R0,2                    CALL MODE 2 FOR CLOSE
         L     RGO,VTOCREAD            ADDRESS OF XVTCREAD
         BALR  RRET,RGO                BRANCH TO ROUTINE
         EJECT
* CALCULATE FRAGMENTATION INDEX. THE FORMULA GIVEN IN
*   SC26-4125  DF/DSS USER'S GUIDE AND REFERENCE
*   IS    F.I. = 1000*(AMT*LOG(AMT) - SIGMA)/AMT*(LOG(AMT)-1)
*   WHERE AMT   IS THE SUM OF FREE TRACKS IN ALL EXTENTS,
*   AND   SIGMA IS THE SUM OF (EXTENT*LOG(EXTENT)) FOR ALL EXTENTS.
* EXCEPTIONS:
*   IF (AMT=0), F.I. IS INDETERMINATE. SET F.I. = 0;
*   IF (AMT=1), F.I. = 0;
*   IF (AMT=2), F.I. <= 0. SET F.I. = 0.
* IN GENERAL, IF THERE ARE FEW FREE EXTENTS, THE FRAGMENTATION INDEX
* DETERMINED BY THE FORMULA IS NOT PARTICULARLY DEFINITIVE.
         SPACE
         L     R0,FREETRKS             TOTAL NO. OF FREE TRACKS (AMT)
         CH    R0,=H'2'                TOTAL FREE TRACKS < 3?
         BNH   FM4PRNT                 BRANCH IF YES
         BAL   RRET,FIXFL              CONVERT TO FLOATING POINT
         STE   E0,FLNUM                SAVE RESULT
         LA    RPARM,LOGPARM           ADDRESS OF LOG PARAMETER LIST
         L     RGO,LOGADDR             ENTRY POINT OF LOG FUNCTION
         BALR  RRET,RGO                CALCULATE LOG(AMT)
         ME    E0,FLNUM                CALCULATE AMT*LOG(AMT)
         SDR   E2,E2                   CLEAR FLOATING POINT REGISTER 2
         LER   E2,E0                   SAVE AMT*LOG(AMT) IN F.P. REG 2
         SE    E0,FISIGMA              CALCULATE (AMT*LOG(AMT) - SIGMA)
         ME    E0,=E'1000.'            MULTIPLY BY 1000
         SE    E2,FLNUM                CALCULATE (AMT*(LOG(AMT) - 1)
         DER   E0,E2                   CALCULATE FRAGMENTATION INDEX
         BAL   RRET,FLFIX              CONVERT TO FIXED POINT
         CH    R0,=H'1000'             FRAGMENTATION INDEX > 1000?
         BNH   FISTORE                 BRANCH IF NO
         LH    R0,=H'1000'             SET FRAGMENTATION INDEX = 1000
FISTORE  STH   R0,FRAGINDX             SAVE FRAGMENTATION INDEX
         EJECT
* EDIT FIRST LINE FROM FORMAT 4 DSCB, DESCRIBING DEVICE PARAMETERS.
         SPACE
         USING DS4,RDS4
FM4PRNT  L     RDS4,FMT4ADDR
         SPACE
         MVC   V1+1(19),=C'DEVICE DESCRIPTION:'
         SPACE
         MVC   V1TYPE(5),=C'TYPE='
         L     RWK1,DEVNAMAD           LOAD ADDRESS OF TABLE FOR DEVICE
         MVC   V1TYPE+5(15),1(RWK1)    INSERT DEVICE NAME IN PRINT LINE
         SPACE
         MVC   V1NOCYL(7),=C'NOCYLS='  NUMBER OF LOGICAL CYLINDERS
         LA    RWK1,DS4DEVSZ
         BAL   RRET,BINALF2
         MVC   V1NOCYL+7(5),BTAALFJ
         SPACE
         MVC   V1TRCYL(9),=C'TRKS/CYL='
         LA    RWK1,DS4DEVSZ+2         TRACKS PER CYLINDER
         BAL   RRET,BINALF2
         MVC   V1TRCYL+9(4),BTAALFJ
         SPACE
         MVC   V1NUMALT(7),=C'NUMALT=' NUMBER OF ALTERNATE TRACKS
         LA    RWK1,DS4NOATK
         BAL   RRET,BINALF2
         MVC   V1NUMALT+7(5),BTAALFJ
         SPACE
         MVC   V1NXTALT(13),=C'NEXTALT=    .'  ADDRESS OF NEXT ALT TRK
         UNPK  HEXWORK(15),DS4HCCHH(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V1NXTALT+8(4),HEXWORK
         MVC   V1NXTALT+13(4),HEXWORK+4
         SPACE
         MVI   V1,PRSP1                PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         MVC   V1DEVTK(8),=C'TRKSIZE=' LENGTH OF TRACK
         LA    RWK1,DS4DEVTK
         BAL   RRET,BINALF2
         MVC   V1DEVTK+8(5),BTAALFJ
         SPACE
         MVC   V1DEVDT(9),=C'DSCB/TRK='  DSCB'S PER TRACK
         LA    RWK1,DS4DEVDT
         BAL   RRET,BINALF1
         MVC   V1DEVDT+9(3),BTAALFJ
         SPACE
         MVC   V1DEVDB(8),=C'PDS/TRK=' PDS DIRECTORY BLOCKS PER TRACK
         LA    RWK1,DS4DEVDB
         BAL   RRET,BINALF1
         MVC   V1DEVDB+8(3),BTAALFJ
         SPACE
         MVI   V1,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* EDIT THE SECOND LINE FROM THE FORMAT 4 DSCB, DESCRIBING THE VTOC
* DATA SET.
         SPACE
         MVC   V2+1(17),=C'VTOC DESCRIPTION:'
         SPACE
         MVC   V2DSCBCT(10),=C'NUM DSCBS='  NUMBER OF DSCBS
         SLR   R0,R0
         IC    R0,DS4DEVDT             INSERT DSCB'S PER TRACK
         MH    R0,VTOCSIZE+2           TIMES NUMBER OF VTOC TRACKS
         BAL   RRET,BINALFR
         MVC   V2DSCBCT+10(5),BTAALFJ
         SPACE
         MVC   V2VTEXT(12),=C'VTOC EXTENT='  VTOC TRACK ADDRESSES
         MVI   V2VTEXT+16,C'.'
         MVI   V2VTEXT+21,C'-'
         MVI   V2VTEXT+26,C'.'
         UNPK  HEXWORK(15),DS4VTOCE+2(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+12(4),HEXWORK
         MVC   V2VTEXT+17(4),HEXWORK+4
         UNPK  HEXWORK(15),DS4VTOCE+6(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+22(4),HEXWORK
         MVC   V2VTEXT+27(4),HEXWORK+4
         SPACE
         TM    MODESW,IXVTMASK         INDEXED VTOC?
         BO    F4IXVT                  BRANCH IF YES
         MVC   V2DESC(11),=C'NON-INDEXED'   INDICATE NON-INDEXED VTOC
         MVC   V2DSCBAV(12),=C'AVAIL DSCBS='  NUM UNUSED DSCB'S
         LA    RWK1,DS4DSREC
         BAL   RRET,BINALF2
         MVC   V2DSCBAV+12(5),BTAALFJ
         B     V2PRNT
         SPACE
F4IXVT   MVC   V2DESC(7),=C'INDEXED'   INDICATE INDEXED VTOC
         MVC   V2DSCBAV(12),=C'AVAIL DSCBS='  NUM UNUSED DSCB'S
         LA    RWK1,FREEDSCB+2
         BAL   RRET,BINALF2
         MVC   V2DSCBAV+12(5),BTAALFJ
         MVC   V2VIRAV(11),=C'AVAIL VIRS='  NUM UNUSED VIR'S
         LA    RWK1,FREEVIR+2
         BAL   RRET,BINALF2
         MVC   V2VIRAV+11(5),BTAALFJ
         SPACE
V2PRNT   MVI   V2,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* PRINT A LINE SUMMARIZING THE AVAILABLE SPACE DESCRIBED IN FORMAT
* 5 DSCB'S.
         SPACE
         MVC   V3+1(16),=C'AVAILABLE SPACE:'
         SPACE
         L     R0,FREETRKS             TOTAL NUMBER OF FREE TRACKS
         BAL   RRET,BINALFR
         MVC   V3FRTRKS(5),BTAALF+7
         MVC   V3FRTRKS+6(9),=C'TRACKS IN'
         SPACE
         L     R0,F5EXTNTS             NUMBER OF FREE EXTENTS
         BAL   RRET,BINALFR
         MVC   V3FREXTS(4),BTAALF+8
         MVC   V3FREXTS+5(18),=C'EXTENTS, INCLUDING'
         SPACE
         L     R0,FREECYLS             NUMBER OF FREE FULL CYLINDERS
         BAL   RRET,BINALFR
         MVC   V3FRCYLS(4),BTAALF+8
         MVC   V3FRCYLS+5(16),=C'WHOLE CYLINDERS.'
         SPACE
         MVI   V3,PRSP1                PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         MVC   V3CONTIG(26),=C'MAXIMUM CONTIGUOUS EXTENT:'
         LA    RWK1,FREEMAX            MAXIMUM FREE CYLINDERS
         BAL   RRET,BINALF2
         MVC   V3MAXCYL(4),BTAALF+8
         MVC   V3MAXCYL+5(13),=C'CYLINDERS AND'
         LA    RWK1,FREEMAX+2          MAXIMUM FREE TRACKS
         BAL   RRET,BINALF1
         MVC   V3MAXTRK(2),BTAALF+10
         MVC   V3MAXTRK+3(7),=C'TRACKS.'
         SPACE
         MVC   V3FRAG(26),=C'FRAGMENTATION INDEX: 0.000'
         LA    RWK1,FRAGINDX           FRAGMENTATION INDEX
         BAL   RRET,BINALF2
         MVC   V3FRAG+21(1),BTAALFZ+8
         MVC   V3FRAG+23(3),BTAALFZ+9
         SPACE
         MVI   V3,PRSP2                PRINT AND SPACE 2
         BAL   RRET,PRINTSUB
         SPACE 3
* IF DOS CONTAMINATION FLAG IS ON, WARN USER, AND FORCE TRACK MAP LIST.
         SPACE
         TM    MODESW,IXVTMASK         TEST IF INDEXED VTOC
         BO    DS5OK                   BRANCH IF YES
         TM    DS4VTOCI,DS4DOSBT       TEST IF DOS BIT IS ON
         BZ    DS5OK                   BRANCH IF NOT
         OI    MODESW,MAPMASK          FORCE TRACK MAP LISTING
         XPRNTLIN  PWA,TEXT=DS5WARN,LENGTH=L'DS5WARN,SPA=2
DS5OK    DS    0H
         SPACE 3
* IF THE DUMP SWITCH IS ON, EDIT THE FORMAT 4 AND 5 BLOCKS IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F5DONE
         SPACE
         LR    RWK1,RDS4               ADDRESS OF FORMAT 4 BLOCK
         LA    RWK2,DS4FDAD              AND ITS DISK ADDRESS
         BAL   RRET,DUMPDSCB
         SPACE
         USING DS5,RDS5
         L     RDS5,FMT5ADDR           ADDRESS OF FIRST BLOCK
DUMP5LUP LTR   RDS5,RDS5               TEST FOR END OF CHAIN
         BZ    DUMP5DON
         LR    RWK1,RDS5               ADDRESS OF DSCB
         LA    RWK2,DS5FDAD              AND ITS DISK ADDRESS
         BAL   RRET,DUMPDSCB           GO TO PRINT IN HEX
         L     RDS5,DS5CHAIN           FOLLOW CHAIN TO NEXT BLOCK
         B     DUMP5LUP
         SPACE
DUMP5DON XPRSPACE  PWA,LINES=2         SPACE UP TWO LINES
         SPACE
F5DONE   DS    0H
         DROP  RDS4,RDS5
         SPACE 3
         EJECT
*************************
* FORMAT 1 EDITING LOOP *
*************************
         SPACE
* NOW ALL FORMAT 1 DSCB'S ARE IN CORE WITH THEIR OPTIONAL FORMAT 3
* BLOCKS ATTACHED.  EDIT ONE LINE FOR EACH, THEN DUMP THE BLOCKS IN
* HEX IF THE DUMP SWITCH IS ON.
         SPACE 2
         USING DS1,RDS1
         USING DS3,RDS3
F1EDIT   L     RDS1,=A(FMT1ADDR-FM1NXTF1)  LOAD CHAIN BEGINNING
         SPACE
* PRINT SUB-HEADING LINES ON PAGE FOLLOWING FORMAT 4 AND 5 INFO, AND
* SET UP PRINTING ROUTINE TO PRINT SUB-HEAD ON SUBSEQUENT PAGES.
         SPACE
         XPRLIST  PWA,LIST=(F1SA,F1SB) PRINT SUB-HEADING LINES
         SPACE
         XPRHEAD  PWA,LIST=(F1HD2,F1SA,F1SB)  SET UP FULL HEADING
         SPACE 3
* BEGIN EACH NEW DATA SET HERE:
         SPACE
F1EDLOOP L     RDS1,DS1NXTF1           FOLLOW CHAIN TO NEXT BLOCK
         CLC   DS1DSNAM,LASTFMT1       CHECK FOR CHAIN TERMINATOR
         BE    ENDF1                   BRANCH AT END
         L     RDS3,DS1CHAIN           LOAD FORMAT 3 ADDRESS
         SPACE
         BAL   RRET,F1SPANAL           ANALYZE SPACE OCCUPIED
         SPACE
* TEST PAGE BALANCE TO BE SURE ALL OUTPUT FOR A DATA SET WILL APPEAR
* ON THE SAME PAGE (TEST DOES NOT ALLOW FOR PDS DIRECTORY DUMP)
         SPACE
         LA    RWK1,1                  AT LEAST 1 LINE ALWAYS NEEDED
         TM    MODESW,PDSLMASK         PDS OPTION REQUESTED?
         BZ    F1DMPTST                BRANCH IF NO
         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?
         BZ    F1DMPTST                BRANCH IF NO
         LA    RWK1,2                  AT LEAST 2 LINES NEEDED
F1DMPTST TM    MODESW,DUMPMASK         TEST FOR DUMP
         BZ    F1TEST                  BRANCH IF ONLY 1 LINE
         LA    RWK1,4(,RWK1)           ADD 4 FOR FORMAT 1 BLOCK DUMP
         LTR   RDS3,RDS3               TEST FOR PRESENCE OF FORMAT 3
         BZ    F1TEST                  BRANCH IF NONE
         SLR   R0,R0
         SLR   R1,R1
         IC    R1,DS1NOEPV             PICK UP NUMBER OF EXTENTS
         LA    R1,9(,R1)               (EXTENTS IN FORMAT 3'S) + 12
         D     R0,=F'13'               NUMBER OF FORMAT 3'S
         SLL   R1,2                    ALLOW 4 FOR EACH FORMAT 3 BLOCK
         AR    RWK1,R1                 NUMBER OF LINES TO PRINT
F1TEST   BAL   RRET,PAGECHEK
         SPACE 3
* PRINT ONE LINE OF INFORMATION FROM A FORMAT 1 DSCB.
         SPACE
         MVC   F1DSNAM,DS1DSNAM        DATA SET NAME
         SPACE
         TM    DS1DSIND,DS1IND10       IS THE DATA SET PROTECTED?
         BZ    NOTPROT                 BRANCH IF NO
         MVI   F1PROTFL,C'W'           ASSUME WRITE PROTECTED
         TM    DS1DSIND,DS1IND04       IS IT WRITE PROTECTED?
         BO    NOTPROT                 BRANCH IF YES
         MVI   F1PROTFL,C'P'           INDICATE READ PROTECTED
NOTPROT  DS    0H
         TM    DS1DSIND,DS1IND40       IS THE DATA SET RACF DEFINED?
         BZ    NOTRACF                 BRANCH IF NO
         MVI   F1PROTFL,C'R'           INDICATE RACF DEFINED
NOTRACF  DS    0H
         SPACE
         MVC   F1DSSN(6),DS1DSSN       VOLUME SERIAL
         SPACE
         LA    RWK1,1
         CLM   RWK1,3,DS1VOLSQ         VOLUME SEQUENCE NUMBER
         BE    *+8
         MVI   F1VOLSQ,C'*'            FLAG IF VOLSEQ > 1
         SPACE
         LA    RWK1,DS1REFD            ADDRESS OF LAST REFERENCE DATE
         LA    RWK2,F1REFDT
         BAL   RRET,VTDATED
         SPACE
         TM    DS1DSIND,DS1DSCHA       MODIFIED SINCE LAST BACKUP
         BZ    NOTCHA                  BRANCH IF NO
         MVI   F1DSCHA,C'M'            INDICATE DATA SET MODIFIED
NOTCHA   DS    0H
         SPACE
         LA    RWK1,DS1CREDT           ADDRESS OF CREATION DATE
         LA    RWK2,F1CREDT
         BAL   RRET,VTDATED
         SPACE
         LA    RWK1,DS1EXPDT           ADDRESS OF EXPIRATION DATE
         LA    RWK2,F1EXPDT
         BAL   RRET,VTDATED
         SPACE
         LA    RWK1,F1DSORG            ADDR OF DATA SET ORG FIELD
         TM    DS1DSORG+1,DS1ORGAM     TEST VSAM
         BZ    NOTVS
         MVC   0(2,RWK1),=C'VS'
         LA    RWK1,2(,RWK1)
NOTVS    TM    DS1DSORG,DS1DSGIS       TEST INDEXED SEQUENTIAL
         BZ    NOTIS
         MVC   0(2,RWK1),=C'IS'
         LA    RWK1,2(,RWK1)
NOTIS    TM    DS1DSORG,DS1DSGPS       TEST PHYSICAL SEQUENTIAL
         BZ    NOTPS
         MVC   0(2,RWK1),=C'PS'
         LA    RWK1,2(,RWK1)
NOTPS    TM    DS1DSORG,DS1DSGDA       TEST DIRECT ACCESS
         BZ    NOTDA
         MVC   0(2,RWK1),=C'DA'
         LA    RWK1,2(,RWK1)
NOTDA    TM    DS1DSORG,DS1DSGPO       TEST PARTITIONED
         BZ    NOTPO
         MVC   0(2,RWK1),=C'PO'
         LA    RWK1,2(,RWK1)
NOTPO    TM    DS1DSORG,DS1DSGU        TEST UNMOVEABLE
         BZ    NOTU
         MVI   0(RWK1),C'U'
NOTU     DS    0H
         SPACE
         UNPK  HEXWORK(15),DS1OPTCD(8) OPTION CODE, IN HEX
         TR    HEXWORK(15),HEXEDTAB
         MVC   F1OPTCD,HEXWORK
         SPACE
         LA    RWK1,F1RECFM            ADDR OF RECORD FORMAT FIELD
         TM    DS1RECFM,DS1RECFU
         BZ    RECFMUP                 ZEROS NOT DEFINED
         MVI   0(RWK1),C'U'
         BO    RECFMUP                 '11..' IS FORMAT 'U'
         TM    DS1RECFM,DS1RECFF       WE NOW KNOW IT'S MIXED
         MVI   0(RWK1),C'F'            '10..' IS FORMAT 'F'
         BO    RECFMUP
         MVI   0(RWK1),C'V'            '01..' IS FORMAT 'V'
RECFMUP  LA    RWK1,1(,RWK1)
         TM    DS1RECFM,DS1RECFT       TEST TRACK OVERFLOW
         BZ    RECFMB
         MVI   0(RWK1),C'T'
         LA    RWK1,1(,RWK1)
RECFMB   TM    DS1RECFM,DS1RECFB       TEST FOR BLOCKED
         BZ    RECFMS
         MVI   0(RWK1),C'B'
         LA    RWK1,1(,RWK1)
RECFMS   TM    DS1RECFM,DS1RECFS       TEST FOR STANDARD BLOCKS
         BZ    RECFMAM
         MVI   0(RWK1),C'S'
         LA    RWK1,1(,RWK1)
RECFMAM  TM    DS1RECFM,DS1RECFA+DS1RECMC   TEST CONTROL CHAR TYPE
         BNM   RECFME                  BRANCH IF NOT MIXED
         TM    DS1RECFM,DS1RECFA
         MVI   0(RWK1),C'A'
         BO    RECFME
         MVI   0(RWK1),C'M'
RECFME   DS    0H
         SPACE
         LA    RWK1,DS1BLKL            BLOCK SIZE
         BAL   RRET,BINALF2
         MVC   F1BLKL,BTAALF+L'BTAALF-L'F1BLKL
         SPACE
         LA    RWK1,DS1LRECL           LOGICAL RECORD LENGTH
         BAL   RRET,BINALF2
         MVC   F1LRECL,BTAALF+L'BTAALF-L'F1LRECL
         SPACE
         LA    RWK1,DS1KEYL            KEY LENGTH
         BAL   RRET,BINALF1
         MVC   F1KEYL,BTAALF+L'BTAALF-L'F1KEYL
         SPACE
         MVI   F1TRALOC+4,C'0'
         MVI   F1TRUSE+4,C'0'
         MVI   F1PCTUS+2,C'0'
         L     R0,F1TRCNT              ALLOCATION SIZE IN TRACKS
         LTR   RWK1,R0                 SEE IF ANY TRACKS ASSIGNED
         BZ    NONEUSED                BRANCH IF NO
         ST    RWK1,TTRKLOC
         A     RWK1,TTRKTOT
         ST    RWK1,TTRKTOT
         BAL   RRET,BINALFR
         MVC   F1TRALOC,BTAALF+L'BTAALF-L'F1TRALOC
         SPACE
         NC    DS1LSTAR,DS1LSTAR       SEE IF EMPTY DATA SET
         BZ    NONEUSED                YES; USAGE IS ZERO PERCENT
         SLR   R0,R0
         ICM   R0,3,DS1LSTAR           TRACKS ACTUALLY USED
         AH    R0,=H'1'
         LR    RWK1,R0
         ST    RWK1,TTRKUSE
         A     RWK1,TTRKUTOT
         ST    RWK1,TTRKUTOT
         BAL   RRET,BINALFR
         MVC   F1TRUSE,BTAALF+L'BTAALF-L'F1TRUSE
         SPACE
         L     R15,TTRKLOC
         L     RWK2,TTRKUSE
         BAL   RRET,PCTCALC
         MVC   F1PCTUS,BTAALF+L'BTAALF-L'F1PCTUS
NONEUSED DS    0H
         SPACE
         LA    RWK1,DS1NOEPV           NUMBER OF EXTENTS
         BAL   RRET,BINALF1
         MVC   F1NOEPV,BTAALF+L'BTAALF-L'F1NOEPV
         SPACE
         LA    RWK1,DS1SCALO+1         SECONDARY QUANTITY SIZE
         BAL   RRET,BINALF3
         MVC   F1SCALO,BTAALF+L'BTAALF-L'F1SCALO
         SPACE
         TM    DS1SCALO,DS1DSPAC       TYPE OF SPACE ALLOCATION
         BNO   NOTCYL                  BRANCH IF NOT ONES
         MVI   F1ALCTYP,C'C'           CYLINDER
         B     SCALDONE
NOTCYL   BNZ   NOTABSTR                BRANCH IF NOT ZEROS
         MVI   F1ALCTYP,C'A'           ABSOLUTE TRACK
         B     SCALDONE
NOTABSTR TM    DS1SCALO,DS1TRK         NOW KNOW IT IS MIXED
         BO    TRKALO
         MVI   F1ALCTYP,C'B'           BLOCK
         B     SCALDONE
TRKALO   MVI   F1ALCTYP,C'T'           TRACK
SCALDONE DS    0H
         SPACE
* EACH DATA SET LINE IS SINGLE-SPACED, UNLESS FOLLOWED BY A DUMP
         SPACE
         MVI   F1A,PRSP1
         TM    MODESW,DUMPMASK         TEST IF DUMP FOLLOWS
         BZ    F1PRINT1                NO, SINGLE SPACE
         MVI   F1A,PRSP2               DOUBLE SPACE
F1PRINT1 BAL   RRET,PRINTSUB           PRINT THE LINE
         SPACE
* IF DUMP SWITCH IS SET, EDIT THE DSCB'S IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F1DMPDON                BRANCH IF NO DUMP
         SPACE
         LA    RWK1,DS1                DUMP FORMAT 1 DSCB
         LA    RWK2,DS1FDAD
         BAL   RRET,DUMPDSCB
         SPACE
F3DUMPLP LTR   RDS3,RDS3               TEST FOR CHAINED FORMAT 3 BLOCK
         BZ    F1DMPDON
         LA    RWK1,DS3
         LA    RWK2,DS3FDAD
         BAL   RRET,DUMPDSCB
         SPACE
         L     RDS3,DS3CHAIN           ADDRESS OF CHAINED FORMAT 3
         B     F3DUMPLP
         SPACE
F1DMPDON DS    0H
         SPACE
* IF THE PDS SWITCH IS SET AND THIS IS A PDS, EDIT ITS DIRECTORY.
         SPACE
         TM    MODESW,PDSLMASK         TEST IF LISTING CALLED FOR
         BZ    F1PDSDON
         TM    DS1DSORG,DS1DSGPO       TEST IF PARTITIONED
         BZ    F1PDSDON
         LA    RWK1,DS1DSNAM
         BAL   RRET,PDSLIST            CALL LISTING SUBROUTINE
F1PDSDON DS    0H
         B     F1EDLOOP
         SPACE 3
* END DATA SET LISTING.  PRINT A LINE GIVING THE NUMBER OF DATA SETS.
         SPACE
ENDF1    DS    0H
         MVC   F1TRALOC(15),F1SUBBX
         MVI   F1A,PRSP1
         BAL   RRET,PRINTSUB           PRINT THE LINE
         L     R0,TTRKTOT
         BAL   RRET,BINALFR
         MVC   F1TRALOC,BTAALF+L'BTAALF-L'F1TRALOC
         L     R0,TTRKUTOT
         BAL   RRET,BINALFR
         MVC   F1TRUSE,BTAALF+L'BTAALF-L'F1TRUSE
         L     R15,TTRKTOT
         L     RWK2,TTRKUTOT
         BAL   RRET,PCTCALC
         MVC   F1PCTUS,BTAALF+L'BTAALF-L'F1PCTUS
         MVI   F1A,PRSP1
         BAL   RRET,PRINTSUB           PRINT THE LINE
         SLR   RWK1,RWK1
         ST    RWK1,TTRKTOT
         ST    RWK2,TTRKUTOT
         MVC   PL+49(14),=C'<<<<< END VTOC'
         L     R0,DSCOUNT
         BAL   RRET,BINALFR
         MVC   PL+64(5),BTAALF+7
         MVC   PL+70(15),=C'DATA SETS >>>>>'
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=0
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         SPACE 3
         DROP  RDS1,RDS3
         EJECT
**********************
* TRACK MAP PRINTING *
**********************
         SPACE
* START A FRESH PAGE AND PRINT THE TRACK MAP FROM CORE, ONE LINE
* PER ENTRY.
         SPACE 2
         USING MB,RMB
MAPEDIT  TM    MODESW,MAPMASK          TEST IF MAP WANTED
         BZ    ENDVOL                  BRANCH IF NOT
         SPACE
         XPREJECT  PWA                 SKIP TO FRESH PAGE
         SPACE
         MVC   TMHSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   TMHSER2(6),VOLUME
         XPRHEAD  PWA,LIST=(TMHEAD,TMSA,TMSB)  SET UP HEADING LINES
         SPACE
         L     RMB,MBBASE              BEGINNING OF ENTRY CHAIN
         L     RWK3,=F'-1'             CLEAR HIGHEST TTREL FOUND
         SLR   RWK4,RWK4               CLEAR TRACK COUNTER
         SPACE
MAPELOOP CLC   MBCCHH1,MBTERM          TEST FOR END OF CHAIN
         BE    ENDMAPED
         SPACE
* CHECK EACH EXTENT FOR POSSIBLE ERRORS.  BEGIN BY SEEING THAT THE
* HIGHER RELATIVE TRACK NUMBER DOES NOT EXCEED THE NUMBER OF TRACKS IN
* THE VOLUME, AND THAT THE LOWER TTREL DOES NOT EXCEED THE HIGHER ONE.
         SPACE
TESTEX   CLC   MBTTREL2,FMAXTT         TEST 2ND FOR MAX
         BNL   EXINVAL                 EXTENT INVALID IF HIGH
         CLC   MBTTREL1,MBTTREL2       TEST IF LOWER NOT > HIGHER
         BH    EXINVAL                 INVALID IF SO
         SPACE
* TEST THAT LOWER TTREL IS ONE GREATER THAN THE PREVIOUS HIGHEST TTREL.
         SPACE
         SLR   R0,R0
         ICM   R0,3,MBTTREL1           GET CURRENT LOWER TTREL
         SR    R0,RWK3                 SUBTRACT HIGHEST TTREL TO DATE
         S     R0,=F'1'
         BZ    EXOK                    OK IF EQUAL
         BP    TMISSING                POSITIVE MEANS MISSING TRACKS
         SPACE
* A NEGATIVE DIFFERENCE INDICATES AN OVERLAP WITH A PREVIOUS EXTENT.
* FLAG THE CURRENT EXTENT, AND SET THE HIGH WATER MARK FROM IT ONLY IF
* LARGER THAN THE CURRENT VALUE.
         SPACE
         MVC   TMERROR-7(7),=C'OVERLAP'
         CLM   RWK3,3,MBTTREL2         TEST AGAINST PREVIOUS MARK
         BNL   BYPWK3                  BRANCH IF SMALLER
         SPACE
* UPDATE THE HIGH-WATER MARK AND ACCUMULATE THE NUMBER OF TRACKS WHICH
* HAVE BEEN ACCOUNTED FOR.
         SPACE
EXOK     SLR   RWK3,RWK3
         ICM   RWK3,3,MBTTREL2         UPDATE HIGHEST TRACK YET
BYPWK3   SLR   R0,R0
         ICM   R0,3,MBNTRKS            LOAD N TRACKS IN EXTENT
         AR    RWK4,R0                 ACCUMULATE
         BAL   RRET,BINALFR            CONVERT N TO ALPHA FOR PRINTING
         MVC   TMEXTSIZ(5),BTAALF+7    PUT IN PRINT LINE
         B     EDITCCHH                CONTINUE WITH EDITING
         SPACE
* FLAG INVALID EXTENTS AND BYPASS HIGHEST TRACK AND COUNT UPDATING.
         SPACE
EXINVAL  MVC   TMERROR-14(14),=C'INVALID EXTENT'
         B     EDITCCHH
         SPACE
* WHEN TRACKS ARE MISSING, INDICATE HOW MANY BEFORE PRINTING THE
* NEXT EXTENT NORMALLY.
         SPACE
TMISSING BAL   RRET,BINALFR            EDIT N MISSING TRACKS TO ALF
         MVC   TMERROR-14(14),=C'TRACKS MISSING'
         MVC   TMERROR-20(5),BTAALF+7  INSERT N MISSING IN PRINT LINE
         MVI   TM1,PRSP1
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         B     EXOK
         SPACE
* INSERT LOWER AND UPPER ADDRESSES IN CCHH FORM, AND ADD DATA SET NAME.
         SPACE
EDITCCHH UNPK  HEXWORK(15),MBCCHH1(8)  FIRST TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH1(4),HEXWORK
         MVI   TMCCHH1+4,C'.'
         MVC   TMCCHH1+5(4),HEXWORK+4
         SPACE
         UNPK  HEXWORK(15),MBCCHH2(8)  ADDR OF LAST TRACK
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH2(4),HEXWORK
         MVI   TMCCHH2+4,C'.'
         MVC   TMCCHH2+5(4),HEXWORK+4
         SPACE
         TM    MBFLAG,MBEXTINV         TEST IF VALID EXTENT NUMBER
         BO    TMBLEXT                 BRANCH IF NO
         SLR   R0,R0
         IC    R0,MBEXT
         AH    R0,=H'1'
         BAL   RRET,BINALFR
         MVC   TMEXTNO(3),BTAALF+9
TMBLEXT  DS    0H
         SPACE
         L     R1,MBNAME               ADDRESS OF DSNAME
         MVC   TMDSNAM(44),0(R1)
         SPACE
         MVI   TM1,PRSP1               PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         L     RMB,MBCHAIN             FOLLOW CHAIN TO NEXT BLOCK
         B     MAPELOOP
         SPACE 2
* END OF MAP.  CHECK THAT THE LAST ENTRY BROUGHT US TO THE LAST
* PRIMARY TRACK.
         SPACE
ENDMAPED SLR   R0,R0
         ICM   R0,3,FMAXTT             LOAD LAST TRK +1
         SR    R0,RWK3                 TEST AGAINST HIGHEST FOUND
         S     R0,=F'1'
         BNP   ENDMAPPR                BRANCH IF ALL FOUND
         SPACE
* SOME TRACKS ARE MISSING, SO PRINT A WARNING.
         SPACE
         BAL   RRET,BINALFR            EDIT NUMBER MISSING
         MVC   TMERROR-14(40),=C'TRACKS MISSING OR ASSIGNED AS ALTERNAT*
               ES'
         MVC   TMERROR-20(5),BTAALF+7
         MVI   TM1,PRSP1
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         SPACE
ENDMAPPR DS    0H
         LR    R0,RWK4                 LOAD TRACK COUNT
         BAL   RRET,BINALFR            EDIT TO ALPHA
         MVC   TMEXTSIZ(5),BTAALF+7
         MVC   TMEXTSIZ+7(20),=C'TRACKS ACCOUNTED FOR'
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=2
         SPACE
         MVI   PL+1,C' '
         MVC   PL+2(131),PL+1
         SPACE
         MVC   PL+52(28),=C'<<<<< END OF TRACK MAP >>>>>'
         MVI   PL,PRSP0
         BAL   RRET,PRINTSUB
         SPACE
         DROP  RMB
         SPACE 6
* END OF VOLUME LISTINGS
         SPACE
ENDVOL   DS    0H
         BAL   RRET,GBRESET            RELEASE DSCB CORE
         SPACE
         B     NEWVOL
         EJECT
**************************
* ERROR MESSAGE PRINTING *
**************************
         SPACE
* ERRORS WHILE TRYING TO OPEN THE VTOC OR VTOC INDEX:
         SPACE
NODDCARD MVC   PL+41(19),=C'CANNOT FIND DD CARD'
         B     PRERR1
         SPACE
NOTDACC  ABEND 69,DUMP
         B     PRERR1
         SPACE
UNKNDEV  MVC   PL+41(19),=C'UNKNOWN DEVICE TYPE'
         B     PRERR1
         SPACE
IXVTERR  MVC   PL+41(22),=C'CVAFTST RETURN CODE 16'
         B     PRERR1
         SPACE
CANTOPEN MVC   PL+41(27),=C'ATTEMPT TO OPEN VTOC FAILED'
         B     PRERR1
         SPACE
PRERR1   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),DDNAME
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         LA    R0,4                    SET RETURN CODE OF 4
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL
         SPACE 3
* CVAF ERRORS:
         SPACE
IXDSCBER MVC   PL+41(36),=C'CVAF ERROR OBTAINING FREE DSCB COUNT'
         B     PRERR2
         SPACE
IXVIRERR MVC   PL+41(35),=C'CVAF ERROR OBTAINING FREE VIR COUNT'
         B     PRERR2
         SPACE
IXMAPERR MVC   PL+41(37),=C'CVAF ERROR OBTAINING VOLUME SPACE MAP'
         B     PRERR2
         SPACE
PRERR2   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),DDNAME
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         B     CLOSE
         SPACE 3
* ERRORS IN DSCB FORMAT:
         SPACE
FRSTNOT4 MVC   PL+41(21),=C'FIRST DSCB NOT TYPE 4'
         LA    RWK1,RDS4               ADDRESS OF BAD BLOCK
         B     PRERR3
         SPACE
BADFMT5  MVC   PL+41(33),=C'BAD DSCB, SHOULD HAVE BEEN TYPE 5'
         LA    RWK1,RDS5               ADDRESS OF BAD BLOCK
         B     PRERR3
         SPACE
* PRINT ERROR MESSAGE AND DUMP BAD BLOCK.
         SPACE
PRERR3   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),DDNAME
         MVI   PL,PRSP3
         BAL   RRET,PRINTSUB
         SPACE
         LA    RWK2,140(,RWK1)         ADDR OF FULL DISK ADDRESS
         BAL   RRET,DUMPDSCB           DUMP BAD BLOCK IN HEX
         SPACE
* CLOSE THIS VTOC, SET RETURN CODE, AND GO ON TO NEXT VOLUME.
         SPACE
CLOSE    LA    R0,2                    CALL MODE 2 FOR CLOSE
         L     RGO,VTOCREAD            ADDRESS OF ROUTINE
         BALR  RRET,RGO                BRANCH TO XVTCREAD
         SPACE
         LA    R0,8                    SET RETURN CODE OF 8
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL                  CONTINUE WITH NEXT VOLUME
         EJECT
*******************************************
* PARTITIONED DATA SET DIRECTORY PRINTING *
*******************************************
         SPACE
* ENTER THIS ROUTINE WITH THE NAME OF A PARTITIONED DATA SET AT (RWK1).
* THE DDNAME REFERRING TO THE PROPER VOLUME IS ALREADY SET UP IN THE
* DCB.  LIST THE MEMBER ENTRYS FROM THE DIRECTORY, AND PRINT THE
* NUMBER OF MEMBERS, THE NUMBER OF BLOCKS, AND THE NUMBER OF BLOCKS
* ACTUALLY USED.
         SPACE 2
PDSLIST  ST    RRET,PDSEXIT            SAVE RETURN ADDRESS
         STM   RWK1,RWK4,PDSSAVE         AND WORK REGISTERS
         SPACE
* THE JFCB FOR THIS VOLUME IS ALREADY IN CORE, HAVING BEEN READ WHEN
* THE VTOC WAS OPENED.
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   JFCBDSNM,0(RWK1)        INSERT DATA SET NAME
         DROP  R1
         SPACE
         LM    R2,R3,=CL8'NOUSAGE '    PREVENT SETTING DATA SET USAGE
         OPEN  (PDSDCB,(INPUT)),TYPE=J
         SPACE
         SLR   R0,R0                   RESET VARIOUS COUNTERS
         STH   R0,PDSBAL
         STH   R0,PDSDIRCT             DIRECTORY BLOCK COUNT
         STH   R0,PDSDIRUS             BLOCKS USED
         STH   R0,PDSMEMCT             MEMBER COUNT
         STH   R0,PDSALCT              ALIAS COUNT
         SPACE
* GET A MEMBER FROM THE DIRECTORY, SETTING REGISTER 'RPDS' TO IT.
         SPACE
GETPDS   LH    R0,PDSBAL               LOAD BALANCE IN CURRENT BLOCK
         OC    PDSDIRUS(2),PDSDIRUS
         BNZ   *+10
         LTR   R0,R0                   TEST FOR ZERO
         BP    PDSBALOK                BR IF BLOCK NOT EMPTY
         SPACE
         READ  PDSECB,SF,PDSDCB,PDSBUF    READ A DIRECTORY BLOCK
         SPACE
         CHECK PDSECB
         SPACE
         L     RWK1,=A(PDSBUF)
         USING PDSBUF,RWK1
         LH    R1,PDSDIRCT             COUNT DIRECTORY BLOCKS
         LA    R1,1(,R1)
         STH   R1,PDSDIRCT
         LH    R0,PDSLRECL             SET BLOCK BALANCE FROM LOGICAL
         SH    R0,=H'2'                  BLOCK LENGTH FIELD
         STH   R0,PDSBAL
         LA    R1,PDSDATA              SET PDSCLC TO BEGINNING OF BLOCK
         ST    R1,PDSCLC
         B     GETPDS                  TEST BALANCE....
         DROP  RWK1
         SPACE 2
         USING DIRBLOCK,RPDS
PDSBALOK L     RPDS,PDSCLC             LOAD ADDRESS OF DIRECTORY ENTRY
         IC    RWK1,DIRC               GET USER DATA LENGTH
         N     RWK1,=F'31'
         SLL   RWK1,1
         LR    R1,RPDS                 UPDATE BLOCK CLC
         AR    R1,RWK1
         LA    R1,12(,R1)
         ST    R1,PDSCLC
         LH    R1,PDSBAL               DECREMENT BLOCK BALANCE
         SR    R1,RWK1
         SH    R1,=H'12'
         STH   R1,PDSBAL
         SPACE
         CLC   DIRNAME(8),=8X'FF'      TEST FOR LAST NAME
         BNE   EDITMEMB
         MVC   PDSDIRUS(2),PDSDIRCT    SAVE COUNT OF BLOCKS USED
         B     GETPDS                  READ ALL BLOCKS TO GET COUNT
         SPACE
* EDIT A LINE FOR THE MEMBER.  IF THE USER DATA WAS MORE THAN 44 BYTES,
* A SECOND LINE IS REQUIRED.
         SPACE
EDITMEMB MVC   PDSMEMB(8),DIRNAME      MEMBER OR ALIAS NAME TO PRINTLIN
         TM    DIRC,ALIASMSK           TEST IF ALIAS
         BZ    NOTALIAS                BRANCH IF NOT ALIAS
         SPACE
         LH    R1,PDSALCT              COUNT ALIASES
         LA    R1,1(,R1)
         STH   R1,PDSALCT
         MVI   PDSALIAS,C'A'           MARK ALIAS IN PRINT LINE
         B     PDSTTRED
         SPACE
NOTALIAS LH    R1,PDSMEMCT             COUNT MEMBER NAMES
         LA    R1,1(,R1)
         STH   R1,PDSMEMCT
         SPACE
PDSTTRED DS    0H
         TM    MODESW,DUMPMASK         HEX DUMP REQUESTED?
         BNO   GETPDS                  NO, DON'T PRINT PDSBLKS
         UNPK  HEXWORK(15),DIRTTR(8)   EDIT RELATIVE TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   PDSTTR(4),HEXWORK
         MVI   PDSTTR+4,C'.'
         MVC   PDSTTR+5(2),HEXWORK+4
         SPACE
         IC    R0,DIRC                 EDIT NUMBER OF TTR'S
         SRL   R0,5
         N     R0,=F'3'
         STC   R0,PDSNTT
         OI    PDSNTT,X'F0'
         SPACE
         LR    RWK4,RWK1               LENGTH OF USER DATA
         CH    RWK1,=H'44'             TEST IF MORE THAN ONE LINE
         BNH   PDS1LINE                BR IF ONE LINE
         SPACE
         LA    RWK1,2                  ENSURE BOTH LINES ON SAME PAGE
         BAL   RRET,PAGECHEK
         LR    RWK1,RWK4               RESTORE RWK1
         LA    RWK4,44                 LENGTH FOR FIRST LINE
         SPACE
PDS1LINE LA    RWK2,DIRUDATA           ADDRESS OF USER DATA
         LA    RWK3,PDSHEX             PRINT LINE OUTPUT AREA
         BAL   RRET,DUMPEDIT           EDIT DATA INTO HEX
         MVI   PDS1,PRSP1              PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         CH    RWK1,=H'44'             TEST IF SECOND LINE REQUIRED
         BNH   GETPDS                  BR IF NOT
         LR    RWK4,RWK1               COMPUTE REMAINING DATA LENGTH
         SH    RWK4,=H'44'
         LA    RWK2,DIRUDATA+44
         LA    RWK3,PDSHEX
         BAL   RRET,DUMPEDIT
         MVI   PDS1,PRSP1
         BAL   RRET,PRINTSUB
         SPACE
         B     GETPDS
         DROP  RPDS
         SPACE 3
* WHEN THE END OF THE DIRECTORY IS REACHED, CLOSE THE DATA SET AND
* PRINT A SUMMARY LINE WITH THE ACCUMULATED TOTALS.
         SPACE
PDSEODAD DS    0H
         SPACE
         LH    R0,PDSMEMCT             COUNT OF MEMBERS
         BAL   RRET,BINALFR
         MVC   PDSSUMMC(4),BTAALF+8
         LH    R0,PDSALCT              COUNT OF ALIASES
         BAL   RRET,BINALFR
         MVC   PDSSUMAC(4),BTAALF+8
         LH    R0,PDSDIRUS             DIRECTORY BLOCK USED
         BAL   RRET,BINALFR
         MVC   PDSSUMUC(4),BTAALF+8
         LH    R0,PDSDIRCT             NUMBER OF BLOCKS ALLOCATED
         BAL   RRET,BINALFR
         MVC   PDSSUMDC(4),BTAALF+8
         SPACE
         XPRNTLIN  PWA,TEXT=PDSSUM,LENGTH=PDSSUMSZ,OFFSET=16,SPA=3
         SPACE
PDSCLOSE CLOSE (PDSDCB)
         SPACE
         SPACE
         LM    RWK1,RWK4,PDSSAVE
         L     RRET,PDSEXIT
         BR    RRET
         SPACE 3
* PDS SUMMARY LINE:
         SPACE
PDSSUM   DC    C'DIRECTORY CONTAINS '
PDSSUMMC DC    C'0000 MEMBERS AND '
PDSSUMAC DC    C'0000 ALIASES, AND USES '
PDSSUMUC DC    C'0000 OF THE '
PDSSUMDC DC    C'0000 DIRECTORY BLOCKS ALLOCATED'
PDSSUMSZ EQU   *-PDSSUM
         SPACE 2
PDSEXIT  DC    F'0'
PDSSAVE  DC    4F'0'
PDSCLC   DC    A(0)
PDSBAL   DC    H'0'
PDSDIRCT DC    H'0'
PDSDIRUS DC    H'0'
PDSMEMCT DC    H'0'
PDSALCT  DC    H'0'
         SPACE 3
* SYNAD ROUTINE FOR PDS DIRECTORY.  GET ERROR MESSAGE AND LOAD INTO
* PRINT LINE.  BRANCH TO CLOSE DCB.
         SPACE
PDSSYNAD SYNADAF  ACSMETH=BSAM         GET ERROR MESSAGE FROM OS
         SPACE
         MVC   PL+1(30),=C'*******PDS DIRECTORY I/O ERROR'
         MVC   PL+31(79),49(R1)        ADD TEXT FROM SYNADAF
         SPACE
         SYNADRLS                      FREE OS MESSAGE BUFFER
         SPACE
         MVI   PL,PRSP3                SET TO SPACE 3
         BAL   RRET,PRINTSUB           PRINT ERROR MESSAGE
         NI    PDSDCB+DCBIFLGS-IHADCB,255-DCBIFEC RESET DCB ERROR FLAGS
         MVI   RETCODE+3,12            SET RETURN CODE OF 12
         B     PDSCLOSE                CLOSE DCB
         EJECT
*********************
* VTOC READ ROUTINE *
*********************
         SPACE
* ROUTINE 'READSEQ' READS THE NEXT DSCB IN SEQUENCE INTO THE
* 140-BYTE AREA ADDRESSED BY 'RWK2'.  IT CALLS ROUTINE 'XVTCREAD' TO DO
* THE DIRTY WORK.  NORMAL RETURN IS TO THE ADDRESS IN
* RRET+4.  IF END-OF-DATA IS ENCOUNTERED, RETURN IS TO RRET.
* THE FULL DISK ADDRESS (MBBCCHHR) IS SAVED IN THE 8 BYTES FOLLOWING
* THE BUFFER.
         SPACE 2
READSEQ  ST    RRET,RDSEQXT            SAVE RETURN ADDRESS
         SPACE
         SLR   R0,R0                   CALL MODE 0 FOR READ
         L     RGO,VTOCREAD            ADDRESS OF XVTCREAD ROUTINE
         BALR  RRET,RGO                BRANCH TO ROUTINE
         CH    R15,=H'4'               TEST FOR END OF FILE
         BE    RDEODAD                 BRANCH IF SO
         MVC   0(140,RWK2),8(R1)       MOVE KEY AND DATA
         XC    140(3,RWK2),140(RWK2)   ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,RWK2),0(R1)       INSERT 'CCHHR' PART OF ADDRESS
         SPACE
         L     RRET,RDSEQXT
         LA    RRET,4(,RRET)           INCREMENT FOR NORMAL RETURN
         BR    RRET
         SPACE 2
RDEODAD  L     RRET,RDSEQXT            RETURN AT END OF DATA
         BR    RRET
         SPACE 3
RDSEQXT  DC    F'0'
         EJECT
**********************************
* PERCENTAGE CALCULATION ROUTINE *
**********************************
         SPACE
* ROUTINE 'PCTCALC' CALCULATES THE PERCENTAGE OF TRACKS USED
* IN RELATION TO TRACKS ALLOCATED. ENTER WITH REGISTER 'RWK2' SET TO
* THE DIVIDEND (TRK USED) AND THE DIVISOR (TRK ALLOCATED) IN REGISTER
* 'R15'.  THE ALPHA OUTPUT IS IN THREE 12-BYTE FIELDS:
*        'BTAALF' IS RIGHT-ALIGNED WITH LEADING ZEROS BLANKED;
*        'BTAALFZ' IS RIGHT-ALIGNED WITH LEADING ZEROS;
*        'BTAALFJ' IS LEFT-ALIGNED WITH TRAILING BLANKS ADDED.
* RETURN TO CALLER IS VIA REGISTER 'RRET'.  REGISTER 'R0' IS USED AND
* IS NOT RESTORED.
         SPACE 2
PCTCALC  DS    0H
         ST    RRET,PCTCALCX           SAVE RETURN ADDRESS
         SPACE
         SLR   R0,R0
         LTR   R15,R15
         BZ    NOPTCALC
         SLR   RWK1,RWK1
         MH    RWK2,=H'100'
         DR    RWK1,R15
         LR    R0,RWK2
NOPTCALC DS    0H
         BAL   RRET,BINALFR
         SPACE
         L     RRET,PCTCALCX
         BR    RRET
         SPACE 3
PCTCALCX DC    F'0'
TTRKLOC  DC    F'0'
TTRKUSE  DC    F'0'
TTRKTOT  DC    F'0'
TTRKUTOT DC    F'0'
         SPACE
*
         EJECT
* ROUTINE 'READDIR' IS USED TO READ THE DSCB SPECIFIED BY THE 5-BYTE
* 'CCHHR' FIELD POINTED TO BY RWK1 INTO THE 140-BYTE BUFFER AT RWK2.
* THE FULL DISK ADDRESS 'MBBCCHHR' IS INSERTED IN THE 8 BYTES FOLLOW-
* ING THE 140-BYTE BLOCK.
         SPACE 2
READDIR  ST    RRET,RDDIRXT            SAVE EXIT ADDRESS
         MVC   OBCCHHR,0(RWK1)         GET ADDRESS FROM CALLER
         SPACE
         OBTAIN  OBCAMLST              READ SPECIFIED BLOCK
         SPACE
         LTR   R15,R15                 TEST RETURN CODE
         BZ    *+8                     BRANCH IF ZERO
         BAL   RRET,DISASTER           NO ERROR CONDITIONS TOLERATED
         L     R1,=A(OBWORK)           ADDRESS WORK AREA
         MVC   0(140,RWK2),0(R1)       MOVE DSCB TO USER'S AREA
         XC    140(3,RWK2),0(RWK2)     ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,RWK2),0(RWK1)     INSERT CCHHR FROM ORIGINAL CALL
         L     RRET,RDDIRXT
         BR    RRET                    RETURN TO CALLER
         SPACE 3
OBCAMLST CAMLST  SEEK,OBCCHHR,VOLUME,OBWORK
         SPACE
RDDIRXT  DC    F'0'
OBCCHHR  DC    XL5'00'
         EJECT
************************************
* COMPUTE DATA SET ALLOCATION SIZE *
************************************
         SPACE
* ENTER HERE TO COMPUTE THE NUMBER OF TRACKS ASSIGNED TO A DATA SET AND
* PUT THE RESULT IN 'F1TRCNT'.  THE FORMAT 1 DSCB IS ASSUMED
* TO BE IN AREA 'DS1', AND, IF THE NUMBER OF EXTENTS EXCEEDS 3,
* THE FIRST FORMAT 3 DSCB IS ASSUMED TO BE IN AREA 'DS3'.
* EACH EXTENT IS FILED IN THE TRACK MAP.
         SPACE
         USING DS1,RDS1
         USING DS3,RDS3
         SPACE
F1SPANAL ST    RRET,F1SPAXT            SAVE RETURN ADDRESS
         SLR   RWK4,RWK4
         ST    RWK4,F1TRCNT            ZERO SIZE RESULT FIELD
         IC    RWK4,DS1NOEPV           INSERT NUMBER OF EXTENTS
         LTR   RWK4,RWK4               TEST FOR ZERO EXTENTS
         BZR   RRET                    EXIT IF ZERO
         SLR   RWK2,RWK2               ZERO EXTENT INDEX
         SLR   RWK3,RWK3               TRACK COUNT ACCUMULATOR
         SPACE
EXTLOOP  EX    0,EXTLIST(RWK2)         LOAD AN EXTENT ADDRESS IN RWK1
         BAL   RRET,F13CNVT            GET NUMBER OF TRACKS IN EXTENT
         LTR   R0,R0                   ZERO TRACKS?
         BZ    NEXTEXT                 NO - SKIP EXTENT MAPPING
         AR    RWK3,R0                 ADD TO TOTAL
         SPACE
         MVC   FB+FBCCHH1(8),2(RWK1)   MAKE UP TRACK MAP ENTRY
         STH   R0,FB+FBNTRKS           SIZE OF EXTENT
         MVC   FB+FBEXT(1),1(RWK1)     EXTENT NUMBER (-1)
         MVI   FB+FBFLAG,X'00'         INDICATE VALID EXTENT NUMBER
         MVC   FB+FBTTREL1(4),RELTT1   INSERT REL TRACK LIMITS
         LA    R0,DS1DSNAM             ADDRESS OF DATA SET NAME
         ST    R0,FB+FBNAME
         LA    RWK1,FB
         BAL   RRET,FILEMAP            FILE IN TRACK MAP
         SPACE
NEXTEXT  LA    RWK2,4(,RWK2)           INDEX TO NEXT EXTENT
         CH    RWK2,=AL2(EXTLEND-EXTLIST)   END OF EXTENT TABLE?
         BL    CONTEXT                 BRANCH IF NO
         L     RDS3,DS3CHAIN           CHAIN TO NEXT FORMAT 3
         LA    RWK2,EXTLSTF3-EXTLIST   INDEX TO FIRST FORMAT 3 EXTENT
CONTEXT  BCT   RWK4,EXTLOOP            LOOP THROUGH ALL EXTENTS
         SPACE
         L     RDS3,DS1CHAIN           RESTORE FIRST FORMAT 3 POINTER
         ST    RWK3,F1TRCNT            STORE RESULT
         L     RRET,F1SPAXT            LOAD RETURN ADDRESS
         BR    RRET
         SPACE 3
F1SPAXT  DC    F'0'
F1TRCNT  DC    F'0'
         SPACE
* EXECUTED INSTRUCTIONS TO LOAD EXTENT ADDRESSES:
         SPACE
EXTLIST  LA    RWK1,DS1EXT1
         LA    RWK1,DS1EXT2
         LA    RWK1,DS1EXT3
EXTLSTF3 LA    RWK1,DS3EXTNT
         LA    RWK1,DS3EXTNT+10
         LA    RWK1,DS3EXTNT+20
         LA    RWK1,DS3EXTNT+30
         LA    RWK1,DS3ADEXT
         LA    RWK1,DS3ADEXT+10
         LA    RWK1,DS3ADEXT+20
         LA    RWK1,DS3ADEXT+30
         LA    RWK1,DS3ADEXT+40
         LA    RWK1,DS3ADEXT+50
         LA    RWK1,DS3ADEXT+60
         LA    RWK1,DS3ADEXT+70
         LA    RWK1,DS3ADEXT+80
EXTLEND  EQU   *
         SPACE
         DROP  RDS1,RDS3
         EJECT
***********************************
* FORMAT 1 AND 3 EXTENT CONVERTER *
***********************************
         SPACE
* ENTER WITH THE ADDRESS OF A TEN-BYTE EXTENT DISCRIPTION IN RWK1.
* RETURN WITH RELATIVE TRACK NUMBERS OF FIRST AND LAST TRACKS IN
* 'TTREL1' AND 'TTREL2', AND NUMBER OF TRACKS IN R0.
         SPACE 2
F13CNVT  SR    R0,R0                   RESET TRACK COUNT.
         CLI   0(RWK1),X'00'           TEST IF THIS IS AN ACTIVE EXTENT
         BER   RRET                    EXIT IF ZERO
         LA    RWK1,2(,RWK1)           ADDR OF STARTING CCHH
         BAL   RGO,CCHHCNVT            GET REL TRACK
         STH   R0,RELTT1
         LA    RWK1,4(,RWK1)           ADDR OF ENDING CCHH
         BAL   RGO,CCHHCNVT            CONVERT TO TTREL
         STH   R0,RELTT2
         SLR   R1,R1
         ICM   R1,3,RELTT1
         SR    R0,R1                   COMPUTE NUMBER OF TRACKS
         AH    R0,=H'1'
         S     RWK1,=F'6'              RESTORE RWK1 TO CALLER'S VALUE
         BR    RRET                    RETURN TO CALLER
         SPACE
* CONVERT ADDRESS FROM 'CCHH' TO RELATIVE TRACK NUMBER.
         SPACE
CCHHCNVT SLR   R0,R0                   RESULT WILL BE IN R0
         IC    R0,0(,RWK1)             BYTE C1
         MH    R0,FC1
         SLR   R1,R1
         IC    R1,1(,RWK1)
         MH    R1,FC2
         AR    R0,R1
         SLR   R1,R1
         IC    R1,2(,RWK1)
         MH    R1,FH1
         AR    R0,R1
         SLR   R1,R1
         IC    R1,3(,RWK1)
         MH    R1,FH2
         AR    R0,R1
         BR    RGO
         SPACE 2
*THESE MUST BE TOGETHER IN THE ORDER SHOWN:
         SPACE
RELTT1   DC    H'0'
RELTT2   DC    H'0'
         EJECT
***************************
* FORMAT 5 SPACE ANALYSIS *
***************************
         SPACE
* ROUTINE TO ANALYZE THE FREE SPACE EXTENTS DESCRIBED IN A FORMAT 5
* DSCB.  ENTER WITH 'RDS5' SET TO A DSCB.  COMPUTE THE NUMBER OF FREE
* TRACKS, FREE CYLINDERS, AND EXTENTS.  FILE AN ENTRY IN THE TRACK MAP
* FOR EACH EXTENT.
         SPACE 2
         USING DS5,RDS5
F5SPANAL ST    RRET,F5SPAXIT           SAVE RETURN ADDRESS
         SPACE
         LA    RWK1,DS5AVEXT           ADDR OF 1ST GROUP OF 8 EXTENTS
         LA    RWK2,8                  COUNTER
F5SPLUP1 BAL   RRET,F5EXANAL           ANALYZE INDIVIDUAL EXTENT
         LA    RWK1,5(,RWK1)           INDEX TO NEXT ONE
         BCT   RWK2,F5SPLUP1
         SPACE
         LA    RWK1,DS5MAVET           ADDR OF 2ND GROUP OF 18 EXTENTS
         LA    RWK2,18
F5SPLUP2 BAL   RRET,F5EXANAL
         LA    RWK1,5(,RWK1)
         BCT   RWK2,F5SPLUP2
         SPACE
         L     RRET,F5SPAXIT
         BR    RRET
         DROP  RDS5
         SPACE 3
* ANALYZE AN INDIVIDUAL FREE SPACE EXTENT.  IF ALL FIVE BYTES ARE
* ZERO, NO EXTENT IS DESCRIBED.
         SPACE
F5EXANAL ST    RRET,F5EXAXT            SAVE RETURN ADDRESS
         STM   RWK1,RWK4,F5EXASAV        AND OTHER REGISTERS
         NC    0(5,RWK1),0(RWK1)       TEST FOR ACTIVE EXTENT
         BZR   RRET                    EXIT IF ZEROS
         SPACE
         L     R1,F5EXTNTS             COUNT FREE EXTENTS
         LA    R1,1(,R1)
         ST    R1,F5EXTNTS
         SPACE
         CLC   FREEMAX,2(RWK1)
         BNL   F5COMP                  RESET MAXIMUM CONTIGUOUS SPACE
         MVC   FREEMAX,2(RWK1)
         SPACE
F5COMP   MVC   FWORK(4),0(RWK1)        LOAD REGISTERS:
         SLR   RWK2,RWK2
         ICM   RWK2,3,FWORK              RWK2=RELATIVE ADDR OF 1ST TR
         SLR   RWK3,RWK3
         ICM   RWK3,3,FWORK+2            RWK3=NUMBER OF FULL CYLS
         SLR   RWK4,RWK4
         IC    RWK4,4(,RWK1)             RWK4=NUMBER OF ODD TRACKS
         STH   RWK2,RELTT1             SAVE TT REL OF FIRST TRACK
         SPACE
         L     R0,FREECYLS             COUNT FREE CYLINDERS
         AR    R0,RWK3
         ST    R0,FREECYLS
         SPACE
         LR    R0,RWK3                 COMPUTE EXTENT SIZE
         MH    R0,FCYL
         AR    R0,RWK4
         STH   R0,FB+FBNTRKS
         LR    R1,R0                   LOAD SIZE OF THIS EXTENT
         A     R1,FREETRKS             COUNT TOTAL FREE TRACKS
         ST    R1,FREETRKS
         SPACE
         CH    R0,=H'1'                ONE TRACK EXTENT?
         BE    F5TTRE                  IF SO, LOG(EXTENT) = 0
         BAL   RRET,FIXFL              CONVERT EXTENT TO FLOATING POINT
         STE   E0,FLNUM                SAVE RESULT
         LA    RPARM,LOGPARM           PARAMETER LIST FOR LOG FUNCTION
         L     RGO,LOGADDR             ENTRY POINT OF LOG FUNCTION
         BALR  RRET,RGO                CALCULATE LOG(EXTENT)
         ME    E0,FLNUM                CALCULATE (EXTENT*LOG(EXTENT))
         AE    E0,FISIGMA              ADD RUNNING TOTAL OF ABOVE
         STE   E0,FISIGMA              STORE UPDATED RUNNING TOTAL
         SPACE
F5TTRE   AR    R0,RWK2                 MAKE TTREL OF LAST TRACK
         BCTR  R0,0                    DECREMENT BY 1
         STH   R0,RELTT2
         SPACE
         SLR   R1,R1
         ICM   R1,3,RELTT1             CONVERT TTREL TO CCHH FOR MAP
         BAL   RRET,TTCNVT
         MVC   FB+FBCCHH1(4),CCHH
         SLR   R1,R1
         ICM   R1,3,RELTT2
         BAL   RRET,TTCNVT
         MVC   FB+FBCCHH2(4),CCHH
         SPACE
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL INTO TRACK MAP
         MVI   FB+FBEXT,X'00'          NO EXTENT NUMBER
         MVI   FB+FBFLAG,MBEXTINV      INDICATE INVALID EXTENT NUMBER
         LA    R0,=CL44'   AVAILABLE'  DSNAME FOR AVAILABLE SPACE
         ST    R0,FB+FBNAME
         LA    RWK1,FB
         BAL   RRET,FILEMAP            FILE DATA IN TRACK MAP
         SPACE
         LM    RWK1,RWK4,F5EXASAV      RESTORE REGISTERS
         L     RRET,F5EXAXT
         BR    RRET
         SPACE 3
F5SPAXIT DC    F'0'
F5EXAXT  DC    F'0'
F5EXASAV DC    4F'0'
         EJECT
*************************
* CONVERT TTREL TO CCHH *
*************************
         SPACE
* CONVERT RELATIVE TRACK ADDRESS TO ABSOLUTE CCHH FORM.  TTREL IS
* SUPPLIED IN R1, RESULT IN 'CCHH'.
         SPACE 2
TTCNVT   SLR   R0,R0                   R0-R1 USED FOR DIVIDE
         ST    R0,CCHH                 ZERO OUTPUT FIELD
         LH    RGO,FC1
         LTR   RGO,RGO                 WATCH FOR DIVIDE BY ZERO
         BZ    ZFC1
         DR    R0,RGO
         STC   R1,CCHH
         LR    R1,R0
         SLR   R0,R0
ZFC1     LH    RGO,FC2
         LTR   RGO,RGO
         BZ    ZFC2
         DR    R0,RGO
         STC   R1,CCHH+1
         LR    R1,R0
         SLR   R0,R0
ZFC2     LH    RGO,FH1
         LTR   RGO,RGO
         BZ    ZFH1
         DR    R0,RGO
         STC   R1,CCHH+2
         STC   R0,CCHH+3
         BR    RRET
ZFH1     STC   R1,CCHH+3
         BR    RRET
         SPACE 2
CCHH     DC    F'0'
         EJECT
**************************
* FILE ITEM IN TRACK MAP *
**************************
         SPACE
* SUBROUTINE USED BY 'F1SPANAL' AND 'F5SPANAL' TO INSERT A SIX-WORD
* EXTENT DESCRIPTOR BLOCK INTO THE TRACK MAP.  ENTER WITH THE ADDRESS
* OF THE NEW BLOCK IN 'RWK1'.  THE ROUTINE GETS CORE, MOVES THE BLOCK,
* AND CHAINS IT IN SEQUENCE WITH OTHER MAP BLOCKS BY ASCENDING ORDER OF
* LOWER CCHH.
         SPACE 2
FILEMAP  ST    RRET,FMEXIT             SAVE EXIT AND WORK REGISTERS
         STM   RWK2,RWK4,FMSAVE
         SPACE
         LA    RWK3,MBSIZE             GET A CORE BLOCK
         BAL   RRET,GETBLOCK           RETURNS ADDRESS IN RWK2
         USING MB,RWK2
         MVC   MB(MBSIZE),0(RWK1)      MOVE NEW BLOCK
         SPACE
         L     RWK1,MBBASE             GET CHAIN BEGINNING
         LA    RWK3,MBBASE             CHAIN HISTORY REG
         SPACE
FMSORT   CLC   MBCCHH1,FBCCHH1(RWK1)
         BL    FMTHREAD
         LR    RWK3,RWK1
         L     RWK1,FBCHAIN(,RWK1)     FOLLOW CHAIN TO NEXT ITEM
         B     FMSORT
         SPACE
FMTHREAD ST    RWK1,MBCHAIN            THREAD FROM NEW TO NEXT
         ST    RWK2,FBCHAIN(,RWK3)     THREAD FROM PRECEDING TO NEW
         SPACE
         LM    RWK2,RWK4,FMSAVE        RESTORE REGISTERS
         L     RRET,FMEXIT
         BR    RRET
         DROP  RWK2
         SPACE 2
FMSAVE   DC    3F'0'
FMEXIT   DC    F'0'
MBBASE   DC    A(*)                    CHAIN BASE ADDRESS
MBTERM   DC    XL4'FFFFFFFF'           CHAIN END, MUST FOLLOW 'MBBASE'
         SPACE
FB       DS    0F                      WORK BLOCK USED BY F1SPANAL
         DS    24X                       AND F5SPANAL TO ASSEMBLE BLKS
         EJECT
***************************
* BINARY TO ALPHA ROUTINE *
***************************
         SPACE
* ROUTINE TO CONVERT A BINARY NUMBER TO DECIMAL AND EDIT INTO THREE
* ALPHA FORMATS.  ENTER WITH REGISTER 'RWK1' SET TO THE FIRST BYTE OF
* THE BINARY FIELD AND THE NUMBER OF BYTES (UP TO FOUR) IN REGISTER
* 'RWK2'.  THE ALPHA OUTPUT IS IN THREE 12-BYTE FIELDS:
*        'BTAALF' IS RIGHT-ALIGNED WITH LEADING ZEROS BLANKED;
*        'BTAALFZ' IS RIGHT-ALIGNED WITH LEADING ZEROS;
*        'BTAALFJ' IS LEFT-ALIGNED WITH TRAILING BLANKS ADDED.
* RETURN TO CALLER IS VIA REGISTER 'RRET'.  REGISTER 'R0' IS USED AND
* IS NOT RESTORED.
         SPACE
* THE ALTERNATE ENTRANCE 'BINALFR' MAY BE USED WHEN THE ARGUMENT IS
* ALREADY IN REGISTER 'R0'.
         SPACE 2
BINALF1  LA    RWK2,1                  ENTRANCE FOR 1-BYTE ARG
         B     BTA
BINALF2  LA    RWK2,2                  ENTRANCE FOR 2-BYTE ARG
         B     BTA
BINALF3  LA    RWK2,3                  ENTRANCE FOR 3-BYTE ARG
         SPACE
BTA      SLR   R0,R0                   CLEAR ACCUMULATOR
BTALUP1  SLL   R0,8                    MOVE OVER FOR NEXT BYTE
         IC    R0,0(,RWK1)             GET NEXT BYTE OF ARGUMENT
         LA    RWK1,1(,RWK1)           INCREMENT ADDR OF ARGUMENT
         BCT   RWK2,BTALUP1            LOOP TO EXTRACT ALL BYTES
         SPACE
BINALFR  LPR   R0,R0                   TAKE ABSOLUTE VALUE
         CVD   R0,BTADWD               CONVERT ARG TO PACKED DECIMAL
         UNPK  BTAALFZ(12),BTADWD(8)   UNPACK VERSION WITH ZEROS
         OI    BTAALFZ+11,X'F0'        COVER UP SIGN
         SPACE
         MVC   BTAALF(12),BTAPTRN      INSERT EDIT CONTROL CHAR
         ED    BTAALF(12),BTADWD+2     EDIT ZERO-SUPPRESSED VERSION
         SPACE
         MVC   BTAALFJ(11),BTAALF+1    NOTE: BTAALFJ+11 PERMANENT BLANK
BTALUP2  CLI   BTAALFJ,C' '            CHECK FOR LEADING BLANK
         BNER  RRET                    EXIT IF NOT BLANK, IE, DIGIT
         MVC   BTAALFJ(11),BTAALFJ+1   SHIFT ONE LEFT
         B     BTALUP2                 CONTINUE
         SPACE 3
BTADWD   DC    D'0'
BTAPTRN  DC    XL12'402020202020202020202120'     EDIT CONTROL CHARS
BTAALF   DC    CL12' '
BTAALFJ  DC    CL12' '
BTAALFZ  DC    CL12' '
         EJECT
**********************************************
* FIXED - FLOATING POINT CONVERSION ROUTINES *
**********************************************
         SPACE
* ROUTINE FIXFL CONVERTS A BINARY NUMBER IN GENERAL REGISTER 0 TO A
* FLOATING POINT NUMBER IN FLOATING POINT REGISTER 0.
* ROUTINE FLFIX CONVERTS A FLOATING POINT NUMBER IN FLOATING POINT
* REGISTER 0 TO A BINARY NUMBER IN GENERAL REGISTER 0.
         SPACE
FIXFL    X     R0,FLCONST+4
         ST    R0,FLTEMP+4
         X     R0,FLCONST+4
         LD    E0,FLTEMP
         SD    E0,FLCONST
         BR    RRET
         SPACE
FLFIX    AD    E0,FIXCONST
         STD   E0,FIXTEMP
         L     R0,FIXTEMP+4
         BR    RRET
         SPACE
         DS    0D
FLCONST  DC    XL8'4E00000080000000'
FIXCONST DC    XL8'4F08000000000000'
FLTEMP   DC    XL8'4E00000000000000'
FIXTEMP  DC    XL8'0000000000000000'
         EJECT
*********************
* VTOC DATE EDITING *
*********************
         SPACE
* SUBROUTINE TO CONVERT FROM THE BINARY FORM 'YDD' IN A DSCB INTO THE
* ALPHANUMERIC FORM 'YY.DDD'.  ENTER WITH ADDRESS OF 3-BYTE BINARY
* ARGUMENT IN RWK1 AND ADDRESS OF 6-BYTE ALPHA RECEIVER IN RWK2.
         SPACE 2
VTDATED  SLR   R0,R0                   CLEAR REGISTER FOR IC
         IC    R0,0(,RWK1)             BINARY YEAR
         MH    R0,=H'1000'             MULTIPLY BY 1000
         AH    R0,1(,RWK1)             ADD BINARY YEAR
         CVD   R0,DECDATE              CONVERT TO PACKED DECIMAL
         OI    DECDATE+7,X'0F'         RESET SIGN BITS
         MVC   0(6,RWK2),=X'402120202020'  EDIT MASK
         ED    0(6,RWK2),DECDATE+5     EDIT INTO YYDDD FORM
         OI    1(RWK2),X'F0'           CONVERT LEADING BLANK TO ZERO
         BR    RRET
         EJECT
*************************
* DSCB HEX DUMP ROUTINE *
*************************
         SPACE
* THIS SUBROUTINE EDITS A DSCB IN HEX IN THREE LINES.  ENTER WITH THE
* ADDRESS OF THE DSCB IN RWK1 AND THE ADDRESS OF ITS DISK ADDRESS
* (MBBCCHHR) IN RWK2.  CHECKS TO BE SURE ALL THREE LINES WILL BE ON
* THE SAME PAGE.
         SPACE 2
DUMPDSCB ST    RRET,DUMPEXIT           SAVE RETURN
         LR    RWK3,RWK1               TEMP SAVE RWK1
         LA    RWK1,3                  TO TEST PAGE BALANCE
         BAL   RRET,PAGECHEK
         LR    RWK1,RWK3
         SPACE
         MVC   PL+8(17),=C'BLK 1234.5678.90:'
         UNPK  HEXWORK(15),3(8,RWK2)   EDIT DISK ADDRESS OF BLOCK
         TR    HEXWORK(15),HEXEDTAB
         MVC   PL+12(4),HEXWORK
         MVC   PL+17(4),HEXWORK+4
         MVC   PL+22(2),HEXWORK+8
         LA    RWK2,0(,RWK1)
         LA    RWK3,PL+35
         LA    RWK4,44
         BAL   RRET,DUMPEDIT           EDIT HEX CHARS OF KEY
         MVI   PL,PRSP1                PRINT AND SPACE 1
         BAL   RRET,PRINTSUB
         SPACE
         MVC   PL+8(13),=C'FORMAT N DSCB'
         MVC   PL+15(1),44(RWK1)       DSCB TYPE NUMBER
         OI    PL+15,X'F0'             FOR TYPE 0, IF EVER USED
         LA    RWK2,44(,RWK1)
         LA    RWK3,PL+26
         LA    RWK4,48
         BAL   RRET,DUMPEDIT
         MVI   PL,PRSP1
         BAL   RRET,PRINTSUB
         SPACE
         LA    RWK2,92(,RWK1)
         LA    RWK3,PL+26
         LA    RWK4,48
         BAL   RRET,DUMPEDIT
         MVI   PL,PRSP2                SPACE 2 ON LAST LINE
         BAL   RRET,PRINTSUB
         SPACE
         L     RRET,DUMPEXIT
         BR    RRET
         SPACE
DUMPEXIT DC    F'0'
         EJECT
* HEX DUMP EDIT SUBROUTINE
         SPACE
* ROUTINE TO EDIT INTO HEX IN 4-BYTE GROUPS.  'RWK2' IS THE SOURCE
* ADDRESS, 'RWK3' IS THE RECEIVER ADDRESS, AND 'RWK4' CONTAINS THE
* NUMBER OF BYTES TO EDIT.
         SPACE 2
DUMPEDIT LTR   RWK4,RWK4               TEST FOR ZERO BYTES
         BNPR  RRET                    EXIT IF ZERO
         B     DUMPJOIN
         SPACE
DUMPLOOP BCT   R1,DUMPMOVE             TEST FOR 4TH BYTE
         MVI   0(RWK3),C' '            INSERT BLANK EVERY 4 BYTES
         LA    RWK3,1(,RWK3)           INCREMENT RECEIVER ADDRESS
DUMPJOIN LA    R1,4                    BEGIN NEW 4-BYTE GROUP
         SPACE
DUMPMOVE UNPK  HEXWORK(3),0(2,RWK2)    EDIT ONE BYTE INTO ALPHA
         TR    HEXWORK(2),HEXEDTAB
         MVC   0(2,RWK3),HEXWORK
         LA    RWK2,1(,RWK2)           INCREMENT SOURCE ADDR
         LA    RWK3,2(,RWK3)           INCREMENT RECEIVER ADDR
         BCT   RWK4,DUMPLOOP           COUNT NUMBER OF BYTES EDITED
         BR    RRET
         EJECT
*************************
* FIELD SCAN SUBROUTINE *
*************************
         SPACE
* SUBROUTINE TO READ A WORD FROM A CHARACTER STRING.  ENTER WITH 'RWK1'
* SET TO THE BEGINNING OF THE STRING AND 'RWK2' CONTAINING THE LENGTH
* OF THE STRING.  RETURNS WITH THE WORD IN 8 BYTES AT 'SCANWORD' AND
* UPDATES 'RWK1' AND 'RWK2' TO GET NEXT WORD IN NEXT CALL.
         SPACE 2
SCAN     DS    0H
         MVC   SCANWORD(8),=8C' '      BLANK OUTPUT FIELD
         LA    RWK3,SCANWORD
         SPACE
SCLOOP   LTR   RWK2,RWK2               TEST FOR END OF INPUT STRING
         BNPR  RRET                    EXIT WHEN REACHED
         CLI   0(RWK1),C' '            BLANKS ARE IGNORED
         BE    SCANEXT
         CLI   0(RWK1),C','            TEST FOR COMMA (WORD SEPARATOR)
         BE    SCANDONE
         SPACE
         C     RWK3,=A(SCANWORD+8)     TEST FOR MAX OUTPUT LENGTH
         BNL   SCANEXT                 SKIP DELIVERY IF OVER 8
         MVC   0(1,RWK3),0(RWK1)       DELIVER CHAR TO OUTPUT WORD
         LA    RWK3,1(,RWK3)           INCR OUTPUT INDEX
SCANEXT  LA    RWK1,1(,RWK1)           INCR TO NEXT INPUT CHAR, AND
         BCTR  RWK2,0                    DECREMENT COUNT
         B     SCLOOP
         SPACE
SCANDONE LA    RWK1,1(,RWK1)           INCR PAST SEPARATOR AND EXIT
         BCTR  RWK2,0
         BR    RRET
         SPACE 2
SCANWORD DC    CL8' '
         EJECT
************************
* CORE BLOCK ALLOCATOR *
************************
         SPACE
* THIS ROUTINE IS ENTERED WITH THE SIZE OF A DESIRED BLOCK OF CORE IN
* 'RWK3'.  IT RETURNS WITH THE ADDRESS OF AN AVAILABLE AREA IN 'RWK2'.
* THE BLOCK WILL BE ALIGNED ON A FULL-WORD BOUNDARY.
         SPACE
* THESE SMALL BLOCKS ARE ALLOCATED FROM LARGE BLOCKS OBTAINED FROM THE
* SUPERVISOR VIA 'GETMAIN' CALLS.  THE FIRST WORD OF EACH LARGE BLOCK
* POINTS TO THE NEXT ONE, EXCEPT FOR THE LAST, WHICH CONTAINS A ZERO
* WORD.  THIS CHAIN IS USED BY THE 'GBRESET' ROUTINE TO RELEASE THE
* CORE.
         SPACE 2
GETBLOCK A     RWK3,=F'3'              ROUND SIZE TO NEXT WORD
         N     RWK3,ROUND4             'ROUND4 IS X'FFFFFFFC'
GBJOIN   L     R0,GBBAL                LOAD CURRENT BALANCE
         SR    R0,RWK3                 SUBTRACT SIZE DESIRED
         BM    NEWBLOCK                BRANCH IF NOT ENOUGH
         ST    R0,GBBAL                SAVE NEW BALANCE
         L     RWK2,GBCLC              LOAD ADDRESS OF BLOCK
         LR    R0,RWK2
         AR    R0,RWK3                 UPDATE ADDRESS OF AVAILABLE AREA
         ST    R0,GBCLC
         BR    RRET
         SPACE
* GET A NEW BLOCK AND CHAIN.
         SPACE
NEWBLOCK GETMAIN  EC,LV=GETSIZE,A=GBNEWBL  CONDITIONAL REQUEST FOR CORE
         LTR   R15,R15                 DID WE GET IT?
         BNZ   GMFAIL                  NO, BRANCH
         L     R1,GBNEWBL              LOAD ADDRESS OF GOTTEN CORE
         L     RWK2,GBBASE             BASE OF CURRENT BLOCK
         ST    R1,0(,RWK2)             CHAIN TO NEW BLOCK
         ST    R1,GBBASE               UPDATE BASE CELL
         SLR   R0,R0
         ST    R0,0(,R1)               ZERO CHAIN IN NEW BLOCK
         LA    R1,4(,R1)               SET TO FIRST AVAILABLE BYTE
         ST    R1,GBCLC
         MVC   GBBAL(4),NEWBAL         RESET BALANCE COUNTER
         B     GBJOIN
         SPACE 3
* RESET ROUTINE TO RELEASE ALL CORE AND RESET POINTERS.
         SPACE
GBRESET  L     RWK1,GBFIRST            ADDR OF FIRST BLOCK OF CORE
GBR1     LTR   RWK1,RWK1               TEST FOR END OF CHAIN
         BZ    GBR2                    BRANCH IF RELEASING DONE
         LR    R1,RWK1                 ADDR OF BLOCK TO RELEASE
         L     RWK1,0(,RWK1)           FOLLOW CHAIN TO NEXT BLOCK
         LA    R0,GETSIZE              SIZE OF BLOCK
         SPACE
         FREEMAIN  R,LV=(0),A=(1)
         SPACE
         B     GBR1
         SPACE
GBR2     SLR   R0,R0
         ST    R0,GBBAL                SET ZERO BALANCE
         ST    R0,GBFIRST              SET ZERO INITIAL BLOCK ADDRESS
         LA    R0,GBFIRST
         ST    R0,GBBASE               POINT BASE BACK TO INITIAL CELL
         BR    RRET
         SPACE 2
* RAN OUT OF CORE.  PRINT MESSAGE AND GO DIRECTLY TO END VOLUME ROUTINE
         SPACE
GMFAIL   XPRNTLIN  PWA,TEXT=GMFMSG,LENGTH=L'GMFMSG,SPB=1,SPA=1
         B     ENDVOL
         SPACE 3
GBNEWBL  DC    F'0'
GBBAL    DC    F'0'
GBCLC    DC    A(0)
GBBASE   DC    A(GBFIRST)
GBFIRST  DC    A(0)
NEWBAL   DC    A(GETSIZE-4)
         EJECT
********************
* PRINTING ROUTINE *
********************
         SPACE
* ROUTINE TO INTERFACE WITH THE PRINTING ROUTINE.  CALL WITH TEXT IN
* 133-BYTE LINE 'PL'.  FIRST BYTE CONTAINS DESIRED SPACING AFTER
* PRINTING.  'PL' IS BLANKED AFTER PRINTING.
         SPACE
PRINTSUB ST    RRET,PRSEXIT            SAVE RETURN ADDRESS
         IC    R0,PL                   PICK UP SPACING AMOUNT
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPA=((R0))
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         L     RRET,PRSEXIT            LOAD RETURN ADDRESS
         BR    RRET                    RETURN TO CALLER
         SPACE
* PAGE BALANCE TEST ROUTINE.  SKIP TO HEAD-OF-FORM IF REMAINING LINES
* ON PAGE ARE LESS THAN THE NUMBER IN 'RWK1'.
         SPACE
PAGECHEK ST    RRET,PRSEXIT            SAVE RETURN ADDRESS
         XPREJECT  PWA,COND=(LT,(RWK1))
         L     RRET,PRSEXIT            RESTORE EXIT ADDRESS
         BR    RRET                    RETURN TO CALLER
         SPACE
PRSEXIT  DS    F
         EJECT
*****************
* PAGE HEADINGS *
*****************
         SPACE
INITHEAD XPRLDEF  TEXT=IHTXT,LENGTH=L'IHTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
IHTXT    DC    C'XVTCLIST - S.E.C.V. DIRECT-ACCESS VOLUME TABLE OF CONT*
               ENTS LISTER'
         SPACE 3
F1HD2    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
F1HD3    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
F1HTXT   DC    CL20' '
F1HSER1  EQU   F1HTXT
         DC    C'TABLE OF CONTENTS FOR VOLUME SERIAL='
F1HSER2  DC    CL6' '
LF1HTXT  EQU   *-F1HTXT
         SPACE 3
F1SA     XPRLDEF TEXT=F1SUBA,LENGTH=LF1SUBA,SPA=0
         SPACE
F1SUBA   DS    0C
         DC    CL44'DATA SET NAME'
         DC    C'   SERIAL   REFDT   CREDT EXPDT '
         DC    C'DSO RECFM BLKSZ LRECL KEY OP '
         DC    C'TRKAL TRKUS %US EXT SECQU T'
LF1SUBA  EQU   *-F1SUBA
         SPACE 3
F1SB     XPRLDEF  TEXT=F1SUBB,LENGTH=LF1SUBB,SPA=2
         SPACE
F1SUBB   DS    0C
         DC    44C'_'
         DC    C' _ ______ _ _____ _ _____ _____ '
         DC    C'___ _____ _____ _____ ___ __ '
F1SUBBX  DC    C'_____ _____ ___ ___ _____ _'
LF1SUBB  EQU   *-F1SUBB
         SPACE
* PAGE SUB-HEADING LINES FOR TRACK MAP EDITING
         SPACE
TMHEAD   XPRLDEF  TEXT=TMHTXT,LENGTH=LTMHTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
         SPACE
TMHTXT   DC    CL20' '
TMHSER1  EQU   TMHTXT
         DC    C'TRACK ALLOCATION MAP FOR VOLUME SERIAL='
TMHSER2  DC    CL6' '
LTMHTXT  EQU   *-TMHTXT
         SPACE 3
TMSA     XPRLDEF  TEXT=TMSUBA,LENGTH=LTMSUBA,OFFSET=27,SPA=0
         SPACE
TMSUBA   DS    0C
         DC    C'FIRST TRK   LAST TRK  #TRKS  EXT  '
         DC    C'DATA SET NAME OR USAGE'
LTMSUBA  EQU   *-TMSUBA
         SPACE 3
TMSB     XPRLDEF  TEXT=TMSUBB,LENGTH=LTMSUBB,OFFSET=27,SPA=2
         SPACE
TMSUBB   DS    0C
         DC    C'_________  _________  _____  ___  '
         DC    44C'_'
LTMSUBB  EQU   *-TMSUBB
         EJECT
* PRINT LINE FIELD DEFINITIONS
         SPACE 2
PL       DC    CL133' '
         SPACE 3
* PRINT LINES FOR VOLUME DESCRIPTION:
         SPACE
V1       EQU   PL
V1TYPE   EQU   V1+22
V1NOCYL  EQU   V1+45
V1TRCYL  EQU   V1+62
V1NUMALT EQU   V1+77
V1NXTALT EQU   V1+91
V1DEVTK  EQU   V1+45
V1DEVDT  EQU   V1+62
V1DEVDB  EQU   V1+77
         SPACE
V2       EQU   PL
V2DESC   EQU   V2+22
V2DSCBCT EQU   V2+37
V2DSCBAV EQU   V2+54
V2VIRAV  EQU   V2+73
V2VTEXT  EQU   V2+91
         SPACE
V3       EQU   PL
V3FRTRKS EQU   V3+22
V3FREXTS EQU   V3+38
V3FRCYLS EQU   V3+62
V3CONTIG EQU   V3+22
V3MAXCYL EQU   V3+49
V3MAXTRK EQU   V3+68
V3FRAG   EQU   V3+91
         SPACE
* PRINT LINES FOR FORMAT 1 DSCB DESCRIPTION:
         SPACE
F1A      EQU   PL
F1DSNAM  EQU   F1A+1,44
F1PROTFL EQU   F1A+46,1
F1DSSN   EQU   F1A+48,6
F1VOLSQ  EQU   F1A+55,1
F1REFDT  EQU   F1A+56,6
F1DSCHA  EQU   F1A+63,1
F1CREDT  EQU   F1A+64,6
F1EXPDT  EQU   F1A+70,6
F1DSORG  EQU   F1A+77,3
F1RECFM  EQU   F1A+81,5
F1BLKL   EQU   F1A+87,5
F1LRECL  EQU   F1A+93,5
F1KEYL   EQU   F1A+99,3
F1OPTCD  EQU   F1A+103,2
F1TRALOC EQU   F1A+106,5
F1TRUSE  EQU   F1A+112,5
F1PCTUS  EQU   F1A+118,3
F1NOEPV  EQU   F1A+122,3
F1SCALO  EQU   F1A+126,5
F1ALCTYP EQU   F1A+132,1
         SPACE
* PRINT LINES FOR TRACK MAP EDITING:
         SPACE
TM1      EQU   PL
TMERROR  EQU   TM1+26
TMCCHH1  EQU   TM1+28,9
TMCCHH2  EQU   TM1+39,9
TMEXTSIZ EQU   TM1+50,5
TMEXTNO  EQU   TM1+57,3
TMDSNAM  EQU   TM1+62,44
         SPACE
* PRINT LINES FOR PDS DIRECTORY LISTING:
         SPACE
PDS1     EQU   PL
PDSMEMB  EQU   PDS1+12
PDSALIAS EQU   PDS1+21
PDSTTR   EQU   PDS1+23
PDSNTT   EQU   PDS1+32
PDSHEX   EQU   PDS1+35
         EJECT
* EXODUS
         SPACE
* WHEN ALL VOLUMES ARE COMPLETED, COME HERE TO CLOSE THE PRINTER,
* TIDY UP LOOSE ENDS, AND RETURN.
         SPACE 2
EXODUS   DS    0H
         SPACE
         XPRCLOSE  PWA
         SPACE
         L     RSAVE,SAVEAREA+4
         L     RGO,RETCODE             INSERT RETURN CODE IN REG 15
         RETURN  (14,12),T,RC=(15)
         SPACE 6
* DISASTER ROUTINE
         SPACE
* COME HERE TO ABEND FOR CONDITIONS WHICH WERE NOT SUPPOSED TO HAPPEN,
* OR ERRORS FOR WHICH NO SPECIAL ROUTINE ARE WRITTEN.
         SPACE 2
DISASTER ABEND 100,DUMP
         EJECT
* PDS DIRECTORY DATA CONTROL BLOCK
         SPACE 2
PDSDCB   DCB   DSORG=PS,                                               *
               MACRF=R,                                                *
               DDNAME=VOLUME01,                                        *
               DEVD=DA,                                                *
               RECFM=F,                                                *
               KEYLEN=8,                                               *
               BLKSIZE=256,                                            *
               EODAD=PDSEODAD,                                         *
               SYNAD=PDSSYNAD,                                         *
               EXLST=JFCBADR
         SPACE 6
* DCB EXIT LIST:
         SPACE
JFCBADR  DS    0F
         DC    X'87'
         DC    AL3(JFCB)
         EJECT
* PRINT SUBROUTINE DATA CONTROL BLOCK AND WORK AREA:
         SPACE 2
* UNABLE TO OPEN SYSPRINT - WRITE ERROR MESSAGE AND EXIT.
         SPACE
PROPBAD  DS    0H
         MVC   PROPMSG+12(8),JOBNAME   INSERT JOB NAME IN MESSAGE
         WTO   MF=(E,PROPMSG)          WRITE COMPLAINT TO JOB LOG
         MVI   RETCODE+3,20            SET RETURN CODE TO 20
         B     EXODUS                  EXIT
         SPACE
PROPMSG  DS    0F
         WTO   'JOB 12345678 - XVTCLIST UNABLE TO OPEN SYSPRINT DCB',  *
               ROUTCDE=(11),MF=L
         SPACE 6
PWA      XPRDCB  DDNAME=SYSPRINT
         EJECT
* MISCELLANEOUS CONSTANTS AND WORK CELLS:
         SPACE 2
DECDATE  DC    D'0'
DZERO    DC    D'0'
         SPACE
DECTIME  DC    F'0'
DEVCHAR  DC    2F'0'
UNITTYPE EQU   DEVCHAR+3
FMT1ADDR DC    F'0'
FMT4ADDR DC    F'0'
FMT5ADDR DC    F'0'
FWORK    DC    F'0'
RETCODE  DC    F'0'
F3SAVE   DC    F'0'
ROUND4   DC    X'FFFFFFFC'
SAVEAREA DC    18F'0'
TIOTLOC  DC    A(0)
VTOCREAD DC    V(XVTCREAD)
VTOCDCBA DC    V(XVTCDCB)
LOGADDR  DC    V(XVTCLOG)
FREEDSCB DC    F'0'
FREEVIR  DC    F'0'
FISIGMA  DC    E'0'
FLNUM    DC    E'0'
LOGPARM  DC    X'80',AL3(FLNUM)        PARAMETER LIST FOR LOG FUNCTION
         SPACE
DSCOUNT  DC    F'0'
FREECYLS DC    F'0'
FREETRKS DC    F'0'
F5EXTNTS DC    F'0'
VTOCSIZE DC    F'0'
FRAGINDX DC    H'0'
         SPACE
DDNAME   DC    CL8'VOLUME00'
JOBNAME  DS    CL8
VOLUME   DS    CL6
HEXWORK  DC    CL16' '
LASTFMT1 DC    44X'FF'
FREEMAX  DC    XL3'000000'
MODESW   DC    X'00'
         SPACE
         DC    CL16'0123456789ABCDEF'
HEXEDTAB EQU   *-256
         SPACE
* DUMMY TRACK MAP ENTRY FOR VOLUME LABEL ON TRACK 0:
         SPACE
TRK0MAP  DC    2F'0'
         DC    H'1'
         DC    XL2'0080'
         DC    A(TRK0NAME)
         DC    F'0'
         EJECT
* TABLE OF DEVICE SIZE CONSTANTS, FILLED IN FROM THE FORMAT 4 DSCB WHEN
* DEVICE TYPE IS DETERMINED.  THE FOUR CONSTANTS FC1, FC2, FH1, AND FH2
* ARE SCALING FACTORS TO BE APPLIED TO A FULL DIRECT-ACCESS ADDRESS OF
* THE FORM 'CCHH'.  EACH CONSTANT IS THE NUMBER OF TRACKS REPRESENTED
* BY ONE UNIT OF THE CORRESPONDING ADDRESS BYTE.  'FMAXTT' IS THE
* MAXIMUM RELATIVE TRACK ADDRESS FOR THE DEVICE, AND 'FCYL' IS THE
* NUMBER OF TRACKS PER CYLINDER, AS APPLIED TO THE CYLINDER COUNT IN A
* FORMAT 5 EXTENT ENTRY.  'DEVNAMAD' IS THE ADDRESS OF THE DEVICE NAME
* IN THE DEVICE NAME TABLE.
         SPACE
DEVNAMAD DC    A(0)
FC1      DC    H'0'
FC2      DC    H'0'
FH1      DC    H'0'   <--- NEVER MORE THAN 255 TRACKS PER CYLINDER
FH2      DC    H'1'
FCYL     DC    H'0'
FMAXTT   DC    H'0'
         SPACE 2
* DEVICE NAME TABLE, TO PROVIDE SPECIFIC INFORMATION FOR EACH DEVICE.
* THE ORDER OF THE HALF-WORD CONSTANTS MUST CORRESPOND TO "FC1..."
* ABOVE.
         SPACE
DVN3340E DC    AL1(DEV3340E)
         DC    CL15'3340 MOD70 DISK'
         SPACE
DVN3380E DC    AL1(DEV3380E)
         DC    CL15'3380-E DISK'
         SPACE
DVN3380K DC    AL1(DEV3380K)
         DC    CL15'3380-K DISK'
         SPACE
DEVNAMES DS    0H
         DC    AL1(DEV23052)
         DC    CL15'2305-2 DRUM'
         SPACE
         DC    AL1(DEV3330)
         DC    CL15'3330 DISK'
         SPACE
         DC    AL1(DEV3340)
         DC    CL15'3340 MOD35 DISK'
         SPACE
         DC    AL1(DEV3350)
         DC    CL15'3350 DISK'
         SPACE
         DC    AL1(DEV3375)
         DC    CL15'3375 DISK'
         SPACE
         DC    AL1(DEV33311)
         DC    CL15'3330-1 DISK'
         SPACE
         DC    AL1(DEV3380)
         DC    CL15'3380 DISK'
         SPACE
         DC    AL1(DEV3390)
         DC    CL15'3390 DISK'
         SPACE
DEVNAMOB DC    X'00'                   OBJECT FOR LOOKUP
UNKNOWN  DC    C'UNKNOWN'
         EJECT
* CVAF PARAMETER LIST
         SPACE 2
CVPL     CVAFDSM MF=L                  CVAF PARAMETER LIST
         SPACE
         ORG   CVPL                    OVERLAY CVPL WITH EXPANSION
CVPLMAP  ICVAFPL DSECT=NO
         EJECT
* LITERALS
         SPACE 2
         LTORG
         SPACE 2
         DROP  RBASE1,RBASE2,RBASE3
         EJECT
* WORK AREAS WHICH ARE NOT COVERED BY BASE REGISTERS:
         SPACE
         ORG   GENESIS+12288           KEEP US HONEST ABOUT BASE REG
         SPACE 2
* BUFFER FOR JOB FILE CONTROL BLOCK:
         SPACE
         DS    0D
JFCB     DS    CL176
         SPACE 2
* PDS DIRECTORY BLOCK BUFFER:
         SPACE
PDSBUF   DS    1D              KEY
PDSLRECL DS    1H              LOGICAL RECORD LENGTH
PDSDATA  DS    CL254           DATA
         SPACE 2
* WORK AREA FOR 'OBTAIN' MACRO:
         SPACE
         ORG   PDSBUF                  OVERLAPS PDS DIRECTORY BUFFER
OBWORK   DS    0D                      'OBTAIN' WORK AREA
         DS    350C
         SPACE 2
* MISCELLANEOUS.
         SPACE
TRK0NAME DC    CL44'VOLUME LABEL'
VTOCNAME DC    CL44'VOLUME TABLE OF CONTENTS'
REVMSG   DC    C'VERSION 1.0, 01 JULY, 1987'
DS5WARN  DC    C'*******WARNING--DOS FLAG IS ON; FORMAT 5 DSCB''S MAY N*
               OT REFLECT TRUE STATUS OF AVAILABLE TRACKS'
GMFMSG   DC    C'*******INSUFFICIENT CORE TO HOLD ENTIRE VTOC; GOING ON*
                TO NEXT VOLUME'
 TITLE 'DIRECT-ACCESS VOLUME TABLE OF CONTENTS LISTER - DUMMY SECTIONS'
* DUMMY SECTION TO DEFINE TRACK MAP ENTRY
         SPACE 2
*              *************************
*              *                       *
*            0 * ADDRESS OF NEXT ENTRY *
*              *                       *
*              *************************
*              *                       *
*            4 *        CC HH 1        *
*              *                       *
*              *************************
*              *                       *
*            8 *        CC HH 2        *
*              *                       *
*              *************************
*              *           *     *     *
*           12 * NUMB TRKS * EXT * FLG *
*              *           *     *     *
*              *************************
*              *                       *
*           16 *   ADDRESS OF DSNAME   *
*              *                       *
*              *************************
*              *           *           *
*           20 *  TTREL 1  *  TTREL 2  *
*              *           *           *
*              *************************
         SPACE 2
MB       DSECT
MBCHAIN  DS    F
MBCCHH1  DS    F
MBCCHH2  DS    F
MBNTRKS  DS    H
MBEXT    DS    CL1
MBFLAG   DS    CL1
MBEXTINV EQU   X'80'                   EXTENT NUMBER INVALID MASK
MBNAME   DS    F
MBTTREL1 DS    H
MBTTREL2 DS    H
         SPACE
MBSIZE   EQU   *-MB
         SPACE
FBCHAIN  EQU   MBCHAIN-MB
FBCCHH1  EQU   MBCCHH1-MB
FBCCHH2  EQU   MBCCHH2-MB
FBNTRKS  EQU   MBNTRKS-MB
FBEXT    EQU   MBEXT-MB
FBFLAG   EQU   MBFLAG-MB
FBNAME   EQU   MBNAME-MB
FBTTREL1 EQU   MBTTREL1-MB
FBTTREL2 EQU   MBTTREL2-MB
         EJECT
* DUMMY SECTION TO DEFINE PDS DIRECTORY ITEM
         SPACE 2
*              *************************
*              *                       *
*            0 *                       *
*              *      MEMBER NAME      *
*            4 *                       *
*              *                       *
*              *************************
*              *                 *     *
*            8 *       TT R      *  C  *
*              *                 *     *
*              *************************
*              *                       *
*           12 *       USER DATA       *
*            . *                       *
*            . *      0-62 BYTES       *
*            . *                       *
*            . *           *************
*            . *           *
*           72 *           *
*              *           *
*              *************
         SPACE 2
DIRBLOCK DSECT
         SPACE
DIRNAME  DS    CL8
DIRTTR   DS    CL3
DIRC     DS    CL1
DIRUDATA DS    CL62
         EJECT
* DSCB FORMATTING DUMMY SECTIONS
         SPACE
* FORMAT 1 DSCB:
         SPACE
DS1      DSECT
         IECSDSL1  1
DS1FDAD  DS    CL8
DS1CHAIN DS    F
DS1NXTF1 DS    F
         SPACE
DS1SIZE  EQU   *-DS1
         SPACE
FM1NXTF1 EQU   DS1NXTF1-DS1
FM1DSNAM EQU   DS1DSNAM-DS1
         EJECT
* FORMAT 2 DSCB:
         SPACE
DS2      DSECT
         IECSDSL1  2
DS2FDAD  DS    CL8
         SPACE
DS2SIZE  EQU   *-DS2
         EJECT
* FORMAT 3 DSCB:
         SPACE
DS3      DSECT
         IECSDSL1  3
DS3FDAD  DS    CL8
DS3CHAIN DS    F
         SPACE
DS3SIZE  EQU   *-DS3
         EJECT
* FORMAT 4 DSCB:
         SPACE
DS4      DSECT
DS4DSNAM DS    11F
         IECSDSL1  4
DS4FDAD  DS    CL8
         SPACE
DS4SIZE  EQU   *-DS4
         EJECT
* FORMAT 5 DSCB:
         SPACE
DS5      DSECT
         IECSDSL1  5
DS5FDAD  DS    CL8
DS5CHAIN DS    F
         SPACE
DS5SIZE  EQU   *-DS5
         EJECT
* DCB FIELD DEFINING DUMMY SECTION
         SPACE 2
         DCBD  DSORG=PS,DEVD=DA
         EJECT
* JOB FILE CONTROL BLOCK DUMMY SECTION
         SPACE 2
JFDUMMY  DSECT
         IEFJFCBN
         EJECT
* TASK I/O TABLE (TIOT) DEFINING DUMMY SECTION:
         SPACE 2
TIOT     DSECT
         IEFTIOT1
         SPACE 6
         END   XVTCLIST
