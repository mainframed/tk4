REVSMF   TITLE '  R E V S M F   '
***********************************************************************
*                                                                     *
*        REVSMF - A SUBROUTINE OF THE REVIEW TSO COMMAND              *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY: BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION: AIR FORCE DATA SERVICES CENTER, PENTAGON.
*        DATE WRITTEN: MARCH 18 1982.
*        DATE UPDATED: JUNE  24 1985.  VIRTUALLY REWRITTEN WITH A LOT
*                                      OF CODE FROM $SMFBRWS.   GP@SECV
*                      OCT.  21 1986.  MVS/XA CHANGES.          GP@P6
*                      MAY   05 1988.  DFSORT CHANGES.          GP@P6
*                      SEPT. 21 1988.  SUPPORT SOME RMF.        GP@P6
*                      OCT.  05 1988.  ENHANCE TYPE 30 STUFF.   GP@P6
*                      APRIL 13 1989.  ORACLE, HSMVOL, DSKSPC.  GP@P6
*                      DEC.  19 1989.  PR/SM RMF CPU BUSY %.    GP@P6
*                      MARCH 09 1990.  HANDLE 0 DEVS IN 9/11.   GP@P6
*                      MARCH 16 1990.  RMF RECORD VALIDATION.   GP@P6
*                      APRIL 04 1990.  LEFT/RIGHT FOR 30,73,74. GP@P6
*                      OCT.  24 1990.  TYPE 30 VIO, JES RIGOUR. GP@P6
*                      JAN.  17 1991.  ENHANCE TYPE 21 DISPLAY. GP@P6
*                      FEB.  07 1991.  ADD SYSSMF, SLSSRC.      GP@P6
*                      FEB.  12 1991.  ADD OFFLOD FOR TYPE 24.  GP@P6
*                      JUNE  12 1991.  ICFACT - TYPE/FULL NAME. GP@P6
*                      SEP.  25 1991.  ESCON+LEFT/RIGHT FOR 70. GP@P6
*                      FEB.  14 1992.  FIX 70 FOR NON-PR/SM.
*                                      FIX PAGE D/S DEVICE NO.
*                                      HANDLE HSM SMF(240).     GP@P6
*                      MARCH 20 1992.  BASE REGISTER REORG.     GP@P6
*                      MAY   06 1992.  FUJITSU PDLF STUFF.      GP@P6
*                      JULY  31 1992.  CORRECT 9 & 11 UNDER SP4.
*                                      ENHANCE HSM FSR AND NON-
*                                      PRIMARY VSR PROCESSING,
*                                      AND ADD DSR PROCESSING.
*                                      FIX TYPE 23 PROCESSING.  GP@FT
*                      AUG.  26 1992.  ADD DB2 RECORD STUFF.
*                                      FIDDLE WITH SLSS STUFF.
*                                      ADD DIV/VLF STUFF.
*                                      ADD TYPE 64 EXCP COUNT.  GP@FT
*                      AUG.  28 1992.  FIX VSAM TYPE/STATUS.    GP@FT
*                      OCT.  12 1992.  FIX TO VSMOPN & VSMUSE.  GP@FT
*                      DEC.  18 1992.  FIXED IEV90 ASM ERRORS
*                                      FOUND BY BRUCE LELAND.   GP@FT
*                      JAN.  11 1993.  ADD SMF EXIT INDICATORS
*                                      TO CCRCCOMP ROUTINE.     GP@FT
*                      JAN.  26 1993.  HANDLE ANY SCREEN WIDTH.
*                                      ADD IOCNFG FOR TYPE 8.
*                                      ADD APPCTP FOR TYPE 33.
*                                      ENHANCE DSETIO (14/15).
*                                      ENHANCE VSMUSE (64).     GP@FT
*                      OCT.  25 1994.  ADD NJE (55-58) STUFF.   GP@FT
*                      NOV.  14 1994.  TYPE 6 FIDDLE.           GP@FT
         EJECT
*                      JULY  20 1995.  IMPROVE ORACLE VALIDITY CHECKS.
*                                      PUT RECORD LENGTH IN R1 FOR
*                                      RECORD TYPE SUBROUTINES.
*                                      EXPLOIT WIDE SCREENS FOR
*                                      TYPES 14/15, 17, 18 AND 21.
*                                      CHECK ALL USER RECORD LENGTHS.
*                                      ADD TSOMON (199,200).    GP@FT
*                      JULY  15 1996.  CORRECTED DAYCENTI.
*                                      TYPE 0 SP5 AND CHANGE KB TO MB.
*                                      TYPE 6 JES JOBID RIGOUR.
*                                      TYPE 14/15 HANDLE OPEN DATE.
*                                      TYPE 40 FUNCTION AS SUBTYPE.
*                                      TYPE 42 ADDED.
*                                      TYPE 70 CP WEIGHT/DEDICATED.
*                                      TYPE 73 SHOW CHANNEL TYPE.
*                                      TYPE 90 DETAILS.
*                                      TYPE 24 CLASS AND HOLD.  GP@FT
*                      FEB.  04 1997.  SHOW TEMP 3380/3390.     GP@FT
*                      SEP.  30 1997.  CORRECT SLSS OFFSETS.    GP@FT
*                      OCT.  30 1997.  REDO 110.  DEBUG 73.     GP@GE
*                      MAY   12 1998.  ADD WLM - 72 SUBTYPE 3.  GP@GE
*                      MARCH 12 1999.  MAKE AMODE31, RMODEANY.  GP@P6
*
*
*
*        ATTRIBUTES: RE-ENTRANT.
*        LOCAL MACROS USED: NONE.
*        DESCRIPTION:
*         THIS SUBROUTINE FORMATS AN SMF RECORD INTO A LINE OF DATA
*         FOR THE SCREEN.  LINES OF AT LEAST 80-COLUMNS ARE ASSUMED.
*         UPON ENTRY:
*              R0 CONTAINS THE SCROLL (LEFT/RIGHT) OFFSET,
*                      AND THE NUMBER OF COLUMNS PER LINE.
*              R1 POINTS TO A FOUR-WORD PARAMETER LIST.
*         DURING PROCESSING:
*              R2 POINTS TO SMF RECORD DATA AFTER RDW, AND
*              R6 POINTS TO SCREEN DISPLAY LINE OF FROM 80 TO 160 COLS.
*
         TITLE 'MAINLINE'
REVSMF   START
REVSMF   AMODE 31
REVSMF   RMODE ANY
         USING *,R10
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'REVSMF '
         DC    CL16' &SYSDATC &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(0)
@PROLOG  STM   R14,R12,12(R13)
         LR    R10,R15             BASE
         LM    R1,R4,0(R1)         LENGTH, RECORD, OUTPUT, WORK
         ST    R13,4(,R4)          CHAIN SAVE AREAS
         ST    R4,8(,R13)
         LR    R13,R4
         USING @DATA,R13
         LR    R6,R3
*        MVI   0(R6),C' '          BLANKING DONE IN 'REVIEW' MAINLINE
*        MVC   1(159,R6),0(R6)
         SR    R8,R8
         IC    R8,1(,R2)           RECORD TYPE
         CVD   R8,DOUBLE
         MVC   0(4,R6),=X'40202120'
         ED    0(4,R6),DOUBLE+6
         MVC   0(3,R6),1(R6)
         MVI   3(R6),C' '
         LR    R7,R1               LENGTH
         ICM   R1,15,2(R2)         TIME
         LA    R15,4(,R6)
         BAL   R14,TIMEX
         UNPK  14(5,R6),7(3,R2)    DATE
         MVC   13(2,R6),14(R6)
         MVI   15(R6),C'.'
         MVC   20(4,R6),10(R2)     SYSTEM ID
         LR    R1,R7               LENGTH
         SPACE
         CLI   1(R2),128           USER RECORD TYPE?
         BL    SYSSMF              NO, RECORD TYPE IS LESS THAN 128
         SPACE
         L     R5,=A(HSMREC)
         CLC   30(8,R2),=C'**HSM***'
         BER   R5                  OBVIOUSLY AN HSM RECORD
         CLC   31(7,R2),=C'*H*S*M*'
         BER   R5                  OBVIOUSLY AN HSM RECORD
         L     R5,=A(HSMDAY)
         CLC   16(4,R2),HSMDSR
         BER   R5                  OBVIOUSLY AN HSM DAILY STATS RECORD
         L     R5,=A(HSMVOL)
         CLC   16(4,R2),HSMVSR
         BER   R5                  OBVIOUSLY AN HSM VOLUME STATS RECORD
         L     R5,=A(SLSSRC)
         CLC   =C'SLS',14(R2)
         BER   R5                  OBVIOUSLY FROM STO TEK ACS 4400 HSC
         L     R5,=A(DSKSPC)
         CLI   1(R2),255       *** DISK SPACE MANAGEMENT TABLE     ***
         BER   R5
         L     R5,=A(TSOMNC)
         CLI   1(R2),199       *** TSOMON COMMAND SMF RECORD TYPE  ***
         BER   R5
         L     R5,=A(TSOMNS)
         CLI   1(R2),200       *** TSOMON SYSTEM SMF RECORD TYPE   ***
         BER   R5
         L     R5,=A(UACTRT)
         CLI   1(R2),158       *** IEFACTRT USER SMF RECORD TYPE   ***
         BER   R5
         L     R5,=A(HSMREC)
         CLI   1(R2),129       *** SETSYS SMF(128) ASSUMED FOR HSM ***
         BER   R5
         CLI   1(R2),241       *** SETSYS SMF(240) ASSUMED FOR HSM ***
         BER   R5
         B     UNUSED              USER SMF RECORD TYPE NOT KNOWN
         SPACE
SYSSMF   DS    0H                  SYSTEM SMF RECORD TYPE
         SLA   R8,2                MULTIPLY TYPE BY FOUR
         L     R5,SMFTYPES(R8)     GET ROUTINE ENTRY POINT ADDRESS
         BR    R5                  BRANCH TO ROUTINE
         TITLE 'COMMON SUBROUTINES'
LEFTMSG  DS    0H
         MVC   34(40,R6),MSGLEFT
         B     RTNREC
         SPACE 2
RIGHTMSG DS    0H
         MVC   40(40,R6),MSGRIGHT
         B     RTNREC
         SPACE 2
UNUSED   DS    0H
         CH    R1,=H'22'            RECORD OBVIOUSLY TOO SHORT?
         BL    RTNREC               YES
         LR    R3,R2                PREPARE FOR TRT
         TRT   14(8,R3),GOODNAME    CHECK FOR PRINTABLE JOB NAME
         BNZ   SUBCHK
         MVC   25(8,R6),14(R3)      JOB NAME
         B     RTNREC
         SPACE 2
SUBCHK   DS    0H
         LR    R2,R3                RESTORE RECORD POINTER
SUBREC   DS    0H
         TM    0(R2),X'40'          SMF RECORD SUBTYPES UTILIZED?
         BNO   RTNREC               NO
PUTSUB   MVC   25(4,R6),14(R2)      YES, SHOW SUBSYSTEM NAME
         SR    R1,R1
         ICM   R1,3,18(R2)          YES, SHOW SUBTYPE
         CVD   R1,DOUBLE
         MVC   44(5,R6),ED5
         ED    43(6,R6),DOUBLE+5
         MVC   34(7,R6),SUBTYPE
         SPACE 2
RTNREC   DS    0H
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BSM   0,R14
         EJECT
**********************************************************************
*                                                          *         *
*         SUBROUTINE TO FORMAT COMPLETION CODES            * KHPRDC  *
*                                                          *         *
**********************************************************************
         SPACE
*         INPUT: CODE IN R0, FLAG BYTE ADDRESS IN R1
*         OUTPUT: 15-BYTE AREA ADDRESS IN R15
*         (ONLY 7 BYTES ARE USED UNLESS AN SMF EXIT CANCEL FLAG IS ON)
         SPACE
CCRCCOMP TM    0(R1),X'01'    WAS IT FLUSHED?
         BO    CCRFLUSH       YES
CCRCOMPJ TM    0(R1),X'02'    DID IT ABEND?
         BO    CCRCABND       YES, DO ABEND
         N     R0,=A(X'FFF')  ZERO UNUSED PORTION
         CVD   R0,DOUBLE      CONVERT TO DEC
         MVC   1(6,R15),=X'402120202020'
         ED    1(6,R15),DOUBLE+5    RET CODE TO CHAR
         MVC   0(3,R15),=C'CC='
         B     CCRCEXIT
CCRCABND DS    0H             PROCESS ABENDS
         CLM   R0,2,=X'80'    USER ABEND CODE?
         BL    CCRCSYSA       NO, DO SYSTEM ABEND
         N     R0,=A(X'FFF')  TURN OFF X'80' BIT
         CVD   R0,DOUBLE      CONVERT TO DECIMAL
         MVC   0(6,R15),=X'402120202020'
         ED    0(6,R15),DOUBLE+5    CONVERT TO CHAR
         MVI   1(R15),C'U'    DENOTE USER ABEND
         B     CCRCEXIT
CCRCSYSA STH   R0,DOUBLE      STORE SYS ABEND CODE
         UNPK  DOUBLE+3(5),DOUBLE(3) ADD ZONES TO CC FIELD
         TR    DOUBLE+4(3),HEXCHARS-240
         MVI   2(R15),C'S'    DENOTE SYSTEM ABEND
         MVC   3(3,R15),DOUBLE+4
         B     CCRCEXIT
CCRFLUSH MVC   0(7,R15),=X'C693A4A2888584'  C'FLUSHED'
CCRCEXIT TM    0(R1),X'78'    IS ANY SMF EXIT CANCEL FLAG ON?
         BZR   R14            NO, RETURN TO CALLER
         MVC   7(8,R15),=C'-UACTRT ' YES, USE ANOTHER 8 DISPLAY BYTES
         TM    0(R1),X'08'    IS IT IEFACTRT?
         BOR   R14            YES, RETURN TO CALLER
         MVC   8(6,R15),=C'IEFUSI'
         TM    0(R1),X'10'    IS IT IEFUSI?
         BOR   R14            YES, RETURN TO CALLER
         MVC   8(6,R15),=C'IEFUJI'
         TM    0(R1),X'20'    IS IT IEFUJI?
         BOR   R14            YES, RETURN TO CALLER
         MVC   8(6,R15),=C'IEFUJV'
*        TM    0(R1),X'40'    IS IT IEFUJV?
*        BOR   R14            YES, RETURN TO CALLER
         BR    R14            RETURN
         EJECT
**********************************************************************
*                                                          *         *
*         SUBROUTINE TO GET SECONDS IN RMF INTERVAL        * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
*         INPUT: RMF SMF RECORD
*         OUTPUT: MILLISECONDS IN R1, ADDRESS OF SMF RDW IN R15
         SPACE
RMFINTVL TM    0(R2),X'C6'    RMF SMF RECORD FROM OS/VS2 MVS/XA?
         BNO   SUBREC         NO, BETTER TAKE EVASIVE ACTION
         CLI   18(R2),0       RMF SMF RECORD SUBTYPE LESS THAN 256?
         BNE   SUBREC         NO, BETTER TAKE EVASIVE ACTION
         ICM   R1,3,30(R2)    GET NUMBER OF RMF PRODUCT SECTIONS
         BZ    SUBREC         SKIP PROCESSING IF ZERO
         ICM   R1,15,24(R2)   GET RMF PRODUCTION SECTION OFFSET
         LA    R15,14(R1,R2)  POINT TO RMF MEASUREMENT INTERVAL LENGTH
         SLR   R0,R0
         ST    R0,DOUBLE      ZERO TOP HALF OF DOUBLE
         ICM   R0,2,0(R15)    GET DECIMAL MINUTES OF DURATION
         IC    R0,HEXCHARS    USE THIS FOR THE SIGN
         SRL   R0,4           GET PACKED DECIMAL MINUTES
         ST    R0,DOUBLE+4    MAKE IT A DOUBLEWORD
         CVB   R1,DOUBLE      GET BINARY MINUTES
         M     R0,=F'60000'   GET WHOLE MINUTES IN MILLISECONDS
         MVC   DOUBLE+5(3),1(R15)  COPY REMAINING MILLISECONDS
         CVB   R0,DOUBLE
         AR    R1,R0          TOTAL MILLISECONDS IN RMF INTERVAL
         LA    R0,4           LENGTH OF RDW
         LR    R15,R2         POINT TO SMF RECORD FLAG BYTE
         SLR   R15,R0         POINT TO RDW TO SIMPLIFY PROCESSING
         MVC   25(4,R6),18(R15)   LOAD SUBSYSTEM IDENTIFIER ('RMF ')
         BR    R14            RETURN
         SPACE 2
**********************************************************************
*                                                          *         *
*         SUBROUTINE TO GET LEFT/RIGHT PAGE NUMBER         *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*         INPUT: REVIEW MAINLINE SCROLL OFFSET IN R0 SAVE AREA SLOT
*         OUTPUT: RELATIVE PAGE NUMBER IN R0
         SPACE
PAGECALC L     R15,4(,R13)    GET REVIEW MAINLINE-SUPPLIED SAVE AREA
         LH    R0,22(,R15)    ACCESS R0 SLOT FOR (1) COLUMNS PER PAGE
         LH    R15,20(,R15)     AND (2) REVIEW MAINLINE SCROLL OFFSET
         SLR   R14,R14        ZERO FOR DIVIDE
         DR    R14,R0         GET RELATIVE PAGE NUMBER
         LTR   R0,R15         LOAD THE ANSWER AND SET CONDITION CODE
         BR    R8             RETURN
         EJECT
************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT 2 HEX BYTES TO 4 CHARS     *
*                                                          *
************************************************************
         SPACE
*         INPUT IN DOUBLE, OUTPUT IN DOUBLE
         SPACE
CONV     DS    0H
         ICM   R9,12,DOUBLE
         SR    R8,R8
         SLDA  R8,4
         IC    R0,HEXCHARS(R8)
         STC   R0,DOUBLE
         SR    R8,R8
         SLDA  R8,4
         IC    R0,HEXCHARS(R8)
         STC   R0,DOUBLE+1
         SR    R8,R8
         SLDA  R8,4
         IC    R0,HEXCHARS(R8)
         STC   R0,DOUBLE+2
         SR    R8,R8
         SLDA  R8,4
         IC    R0,HEXCHARS(R8)
         STC   R0,DOUBLE+3
         BR    R14
         EJECT
************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT TIME TO HH:MM:SS           *
*                                                          *
************************************************************
         SPACE
*         INPUT: TIME IN R1, OUTPUT ADDRESS IN R15
         SPACE
TIMEX    SLR   R0,R0
         D     R0,=F'360000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R15),DOUBLE+6(2)
         LR    R1,R0
         SLR   R0,R0
         D     R0,=F'6000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  3(2,R15),DOUBLE+6(2)
         LR    R1,R0
         SLR   R0,R0
         D     R0,=F'100'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  6(2,R15),DOUBLE+6(2)
         MVI   2(R15),C':'
         MVI   5(R15),C':'
         BR    R14
         TITLE 'CONSTANTS AND LITERALS'
HSMDSR   DC    X'10',C'DSR'
HSMVSR   DC    X'10',C'VSR'
ED15     EQU   *,15
         DC    X'2020'
ED13     EQU   *,13
         DC    X'2020'
ED11     EQU   *,11
         DC    X'2020'
ED9      EQU   *,9
         DC    X'2020'
ED7      EQU   *,7
         DC    X'2020'
ED5      EQU   *,5
         DC    X'2020'
ED3      DC    X'202120'
         SPACE
SUBTYPE  DC    X'A2A482A3A89785'
SEQ#     DC    X'A285987B'
MSGLEFT  EQU   *,40      CL40'<<==== SCROLL LEFT FOR MORE INFORMATION '
         DC    XL20'4C4C7E7E7E7E40E2839996939340938586A34086'
         DC    XL20'969940949699854089958696999481A389969540'
MSGRIGHT EQU   *,40      CL40'SCROLL RIGHT FOR MORE INFORMATION ====>>'
         DC    XL20'E283999693934099898788A34086969940949699'
         DC    XL20'854089958696999481A3899695407E7E7E7E6E6E'
         SPACE
         LTORG
         SPACE
         DS    0D
FIXCONST DC    XL8'4F08000000000000'
DAYCENTI DC    F'8640000'          NUMBER OF CENTISECONDS IN A DAY
HEXCHARS DC    C'0123456789ABCDEF'
GOODNAME DC    256X'01'
         ORG   GOODNAME+C' '
         DC    X'00'
         ORG   GOODNAME+C'$'
         DC    X'00'
         ORG   GOODNAME+C'#'
         DC    2X'00'
         ORG   GOODNAME+C'A'
         DC    9X'00'
         ORG   GOODNAME+C'J'
         DC    9X'00'
         ORG   GOODNAME+C'S'
         DC    8X'00'
         ORG   GOODNAME+C'0'
         DC    10X'00'
         ORG
         TITLE 'SMF RECORD TYPE SUBROUTINE ENTRY POINT ADDRESS TABLE'
SMFTYPES DS    0F
         DC    A(IPLREC)           00 IPL.
         DC    A(RTNREC)           01 OS/360 WAIT TIME.
         DC    A(RTNREC)           02 DUMP HEADER.
         DC    A(RTNREC)           03 DUMP TRAILER.
         DC    A(STPREC)           04 STEP TERMINATION.
         DC    A(JOBREC)           05 JOB TERMINATION.
         DC    A(SYSOUT)           06 OUTPUT WRITER.
         DC    A(LOSDAT)           07 SMF DATA LOST.
         DC    A(IOCNFG)           08 I/O CONFIGURATION.
         DC    A(VRYDEV)           09 VARY ONLINE.
         DC    A(ALLREC)           10 ALLOCATION RECOVERY.
         DC    A(VRYDEV)           11 VARY OFFLINE.
         DC    A(UNUSED)           12 OS/360 END-OF-DAY.
         DC    A(UNUSED)           13 OS/MFT PARTITIONS.
         DC    A(DSETIO)           14 INPUT DATA SET ACTIVITY.
         DC    A(DSETIO)           15 OUTPUT DATA SET ACTIVITY.
         DC    A(SORTMG)           16 DFSORT/MERGE STATISTICS.
         DC    A(DASCRT)           17 SCRATCH DATA SET STATUS.
         DC    A(RENAME)           18 RENAME DATA SET STATUS.
         DC    A(DASVOL)           19 DIRECT-ACCESS VOLUME.
         DC    A(NEWJOB)           20 JOB INITIATION.
         DC    A(ERSTAT)           21 ERROR STATISTICS BY VOLUME.
         DC    A(CONFIG)           22 CONFIGURATION.
         DC    A(SMFSTA)           23 SMF STATUS.
         DC    A(OFFLOD)           24 JES2 SPOOL OFFLOAD.
         DC    A(JES3AL)           25 JES3 DEVICE ALLOCATION.
         DC    A(PURGE)            26 JES2/JES3 JOB PURGE.
         DC    A(UNUSED)           27 DOES NOT EXIST.
         DC    A(UNUSED)           28 NPM STATISTICS (V3).
         DC    A(UNUSED)           29 DOES NOT EXIST.
         DC    A(CMNASW)           30 COMMON ADDRESS SPACE WORK.
         DC    A(TIOCIN)           31 TIOC INITIALIZATION.
         DC    A(UNUSED)           32 TSO USER WORK ACCOUNTING.
         DC    A(APPCTP)           33 APPC/MVS TP ACCOUNTING.
         DC    A(TSSTEP)           34 TS-STEP TERMINATION.
         DC    A(LOGOFF)           35 TS-JOB TERMINATION (LOGOFF).
         DC    A(UNUSED)           36 ICF CATALOG.
         DC    A(UNUSED)           37 NETVIEW HARDWARE MONITOR (NPDA).
         DC    A(UNUSED)           38 NPM STATISTICS (V2).
         DC    A(UNUSED)           39 NETVIEW (NLDM) RESPONSE TIME.
         DC    A(DDYNAM)           40 DYNAMIC DD.
         DC    A(DIVVLF)           41 DIV OBJECTS AND VLF STATISTICS.
         DC    A(DFSMS)            42 DFP STATISTICS AND CONFIGURATION.
         DC    A(JES2ST)           43 JES2/JES3 START.
         DC    A(UNUSED)           44 DOES NOT EXIST.
         DC    A(JESTOP)           45 JES2/JES3 WITHDRAWAL.
         DC    A(UNUSED)           46 DOES NOT EXIST.
         DC    A(RJEON)            47 JES2/JES3 RJE SIGNON.
         DC    A(RJEOFF)           48 JES2/JES3 RJE SIGNOFF.
         DC    A(RJEINT)           49 JES2/JES3 RJE INTEGRITY.
         DC    A(ACFTUN)           50 ACF/VTAM TUNING STATISTICS.
         DC    A(UNUSED)           51 DOES NOT EXIST.
         DC    A(SNAON)            52 JES2 SNA LOGON.
         DC    A(SNAOFF)           53 JES2 SNA LOGOFF.
         DC    A(SNAINT)           54 JES2 SNA INTEGRITY.
         DC    A(NJEREC)           55 JES2 NJE NETWORK SIGNON.
         DC    A(NJEREC)           56 JES2 NJE NETWORK INTEGRITY.
         DC    A(NJEOUT)           57 JES2/JES3 NETWORK SYSOUT XMIT.
         DC    A(NJEREC)           58 JES2 NJE NETWORK SIGNOFF.
         DC    A(UNUSED)           59 MVS/BDT FILE-TO-FILE XMIT.
         DC    A(VSMVDS)           60 VSAM VOLUME DATA SET UPDATED.
         DC    A(ICFACT)           61 ICF DEFINE ACTIVITY.
         DC    A(VSMOPN)           62 VSAM COMPONENT OR CLUSTER OPENED.
         DC    A(VSMDEF)           63 VSAM COMPONENT OR CLUSTER CATLGD.
         DC    A(VSMUSE)           64 VSAM COMPONENT OR CLUSTER STATUS.
         DC    A(ICFACT)           65 ICF DELETE ACTIVITY.
         DC    A(ICFACT)           66 ICF ALTER ACTIVITY.
         DC    A(VSMDEL)           67 VSAM ENTRY DELETED.
         DC    A(VSMREN)           68 VSAM ENTRY RENAMED.
         DC    A(UNUSED)           69 VSAM DATA SPC DEFD, XTND OR DELD.
         DC    A(RMFCPU)           70 CPU ACTIVITY.
         DC    A(RMFPAG)           71 PAGING ACTIVITY.
         DC    A(RMFWRK)           72 WORKLOAD ACTIVITY/MONITOR III.
         DC    A(RMFCHN)           73 CHANNEL PATH ACTIVITY.
         DC    A(RMFDEV)           74 DEVICE ACTIVITY.
         DC    A(RMFPDS)           75 PAGE/SWAP DATA SET ACTIVITY.
         DC    A(UNUSED)           76 TRACE ACTIVITY.
         DC    A(UNUSED)           77 ENQUEUE ACTIVITY.
         DC    A(UNUSED)           78 MONITOR I ACTIVITY.
         DC    A(UNUSED)           79 MONITOR II ACTIVITY.
         DC    A(RACFUS)           80 RACF PROCESSING.
         DC    A(RTNREC)           81 RACF INITIALIZATION.
         DC    A(CRYPTO)           82 SECURITY RECORD.
         DC    A(UNUSED)           83 RACF AUDIT RECORD FOR DATA SETS.
         DC    A(UNUSED)           84 JES3 MONITORING FACILITY DATA.
         DC    A(UNUSED)           85 DOES NOT EXIST.
         DC    A(UNUSED)           86 DOES NOT EXIST.
         DC    A(UNUSED)           87 DOES NOT EXIST.
         DC    A(UNUSED)           88 SYSTEM LOGGER DATA.
         DC    A(UNUSED)           89 USAGE DATA.
         DC    A(SYSTAT)           90 SYSTEM STATUS.
         DC    A(UNUSED)           91 BATCHPIPES/MVS STATISTICS.
         DC    A(UNUSED)           92 OPENMVS FILE SYSTEM ACTIVITY.
         DC    A(UNUSED)           93 DOES NOT EXIST.
         DC    A(UNUSED)           94 3495 TAPE LIBRARY DATASERVER.
         DC    A(UNUSED)           95 DOES NOT EXIST.
         DC    A(UNUSED)           96 TIRS SERVER STATISTICS.
         DC    A(UNUSED)           97 DOES NOT EXIST.
         DC    A(UNUSED)           98 DOES NOT EXIST.
         DC    A(UNUSED)           99 SRM DECISIONS.
         DC    A(DB2SYS)          100 DATABASE 2 STATISTICS.
         DC    A(DB2REC)          101 DATABASE 2 ACCOUNTING.
         DC    A(DB2REC)          102 DATABASE 2 PERFORMANCE.
         DC    A(UNUSED)          103 DOES NOT EXIST.
         DC    A(UNUSED)          104 DOES NOT EXIST.
         DC    A(UNUSED)          105 DOES NOT EXIST.
         DC    A(UNUSED)          106 DOES NOT EXIST.
         DC    A(UNUSED)          107 DOES NOT EXIST.
         DC    A(UNUSED)          108 DOES NOT EXIST.
         DC    A(UNUSED)          109 DOES NOT EXIST.
         DC    A(CICSRC)          110 CICS STATISTICS.
         DC    A(UNUSED)          111 DOES NOT EXIST.
         DC    A(UNUSED)          112 DOES NOT EXIST.
         DC    A(UNUSED)          113 DOES NOT EXIST.
         DC    A(UNUSED)          114 DOES NOT EXIST.
         DC    A(UNUSED)          115 DOES NOT EXIST.
         DC    A(UNUSED)          116 DOES NOT EXIST.
         DC    A(UNUSED)          117 DOES NOT EXIST.
         DC    A(UNUSED)          118 TCP/IP FOR MVS.
         DC    A(UNUSED)          119 DOES NOT EXIST.
         DC    A(UNUSED)          120 DOES NOT EXIST.
         DC    A(UNUSED)          121 DOES NOT EXIST.
         DC    A(UNUSED)          122 DOES NOT EXIST.
         DC    A(UNUSED)          123 DOES NOT EXIST.
         DC    A(UNUSED)          124 DOES NOT EXIST.
         DC    A(UNUSED)          125 DOES NOT EXIST.
         DC    A(UNUSED)          126 DOES NOT EXIST.
         DC    A(PDLFRC)          127 FUJITSU PDLF.
         TITLE 'SMF RECORD TYPE SUBROUTINES'
         USING IPLREC,R5
IPLREC   DS    0H                  SMF RECORD TYPE 0
         ICM   R0,15,27(R2)         GET REAL STORAGE SIZE
         SRL   R0,10                CONVERT KB TO MB
         CVD   R0,DOUBLE            CONVERT TO DEC
         MVC   25(5,R6),ED5         PUT IN MESSAGE
         ED    24(6,R6),DOUBLE+5
         MVC   30(23,R6),MSG000
         ICM   R0,15,14(R2)         GET JOB WAIT TIME
         CVD   R0,DOUBLE            CONVERT TO DEC
         MVC   43(5,R6),ED5         PUT IN MESSAGE
         ED    42(6,R6),DOUBLE+5
         CH    R1,=H'56'            PRE-SP5 RECORD?
         BL    RTNREC               YES
         MVC   54(8,R6),32(R2)      MVS PRODUCT NAME
         MVC   63(8,R6),40(R2)      SYSTEM NAME
         MVC   72(8,R6),48(R2)      SYSPLEX NAME
         B     RTNREC
         DROP  R5                   IPLREC
         SPACE
*        DC    C'M REAL - JWT XXXXX MINS'
MSG000   DC    X'D440D9858193406040D1E6E340E7E7E7E7E740948995A2'
         LTORG
         SPACE 3
         USING STPREC,R5
STPREC   DS    0H                  SMF RECORD TYPE 4
         MVC   25(8,R6),14(R2)      JOB NAME
         MVI   34(R6),C'#'
         SR    R8,R8
         IC    R8,38(R2)            STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         OC    39(8,R6),62(R2)      STEP NAME     (INITIATOR HAS NULLS)
         MVC   48(8,R6),54(R2)      PROGRAM NAME
         LA    R1,83(,R2)           POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,51(R2)          GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCCOMP         COMPUTE RC/CC
         B     RTNREC
         DROP  R5                   STPREC
         SPACE
         LTORG
         SPACE 3
         USING JOBREC,R5
JOBREC   DS    0H                  SMF RECORD TYPE 5
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(20,R6),93(R2)     PROGRAMMER NAME
         MVC   55(1,R6),71(R2)      JOB CLASS
         LA    R1,62(,R2)           POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,51(R2)          GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCOMPJ         COMPUTE RC/CC (FLUSH BIT RESERVED)
         B     RTNREC
         DROP  R5                   JOBREC
         SPACE
         LTORG
         SPACE 3
         USING SYSOUT,R5
SYSOUT   DS    0H                  SMF RECORD TYPE 6
         MVC   25(8,R6),14(R2)      JOB NAME
         CLI   64(R2),C'0'          ANY 4-DIGIT NUMBER?
         BL    OUTNUMOK             NO
         MVC   34(4,R6),=X'9185A27B'  C'JES#'
         MVC   38(4,R6),64(R2)      JES JOB NUMBER (NUMERIC PART)
OUTNUMOK OC    43(8,R6),68(R2)      OUTPUT DEVICE NAME OR ZERO FOR XWTR
         MVC   52(1,R6),38(R2)      SYSOUT CLASS
         MVC   54(4,R6),53(R2)      FORM ID
         OC    59(4,R6),76(R2)      FCB NAME OR ZERO
         OC    64(4,R6),80(R2)      UCS NAME OR ZERO
         ICM   R1,15,47(R2)         GET # LINES DONE BY PPU
         CVD   R1,DOUBLE            CONVERT TO DEC
         MVC   70(10,R6),=X'40202020202020202120'
         ED    70(10,R6),DOUBLE+3   EDIT TO PRINT
         TM    57(R2),X'40'         COMMON SECTION PRESENT?
         BZ    RTNREC               NO, CAN'T GET TO SMF6JBID
         SLR   R7,R7
         ICM   R7,3,60(R2)          GET LENGTH OF I/O DATA SECTION
         LA    R7,60(R7,R2)         POINT PAST I/O DATA SECTION
         TM    57(R2),X'80'         3800 SECTION PRESENT?
         BZ    PAST3800             NO
         SLR   R0,R0                YES
         ICM   R0,3,0(R7)           GET 3800 SECTION LENGTH
         ALR   R7,R0                POINT TO COMMON SECTION
PAST3800 MVC   34(8,R6),30(R7)      SUPPLY COMPLETE JOB IDENTIFIER
         B     RTNREC
         DROP  R5                   SYSOUT
         SPACE
         LTORG
         SPACE 3
         USING LOSDAT,R5
LOSDAT   DS    0H                  SMF RECORD TYPE 7
         SR    R1,R1                CLEAR REGISTER
         ICM   R1,3,14(R2)          GET # OF RECORDS LOST
         CVD   R1,DOUBLE            CONVERT TO DECIMAL
         MVC   25(6,R6),=X'402020202120'
         ED    25(6,R6),DOUBLE+5    EDIT TO PRINT
         MVC   32(18,R6),MSG007
         MVC   DOUBLE(4),16(R2)     TIME
         L     R1,DOUBLE
         LA    R15,51(,R6)
         BAL   R14,TIMEX
         UNPK  61(5,R6),21(3,R2)    DATE
         MVC   60(2,R6),61(R6)
         MVI   62(R6),C'.'
         B     RTNREC
         DROP  R5                   LOSDAT
         SPACE
*        DC    C'RECORDS LOST SINCE'
MSG007   DC    X'998583969984A2409396A2A340A289958385'
         LTORG
         SPACE 3
         USING IOCNFG,R5
IOCNFG   DS    0H                  SMF RECORD TYPE 8
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         BZ    RIGHTMSG             JUST SHOW MESSAGE AT LEFT MAX
         LR    R1,R0                SAVE THE ANSWER
         BCTR  R1,0                 DECREMENT FOR RELATIVE OFFSET
         SLL   R1,4                 MULTIPLY BY 16 FOR INDEX
         LA    R1,4(,R1)            ADD SIZE OF ONE ENTRY
         LA    R7,4                 GET THE DISPLAY COUNT FOR LINE
         LA    R3,34(,R6)           POINT TO FIRST DISPLAY SLOT
         CLM   R1,3,14(R2)          COMPARE TO DATA LENGTH IN RECORD
         BH    LEFTMSG              SCROLLED TOO FAR RIGHT FOR DATA
IOCNFGLP LA    R11,12(R1,R2)        POINT TO FIRST ENTRY TO BE SHOWN
         MVC   DOUBLE(2),2(R11)     LOAD DEVICE NUMBER
         BAL   R14,CONV             CONVERT TO HEXADECIMAL
         MVC   0(4,R3),DOUBLE       LOAD DEVICE NUMBER INTO LINE
         CLI   0(R3),C'0'           LEADING ZERO?
         BNE   IOCNFGDV             NO
         MVI   0(R3),C' '           YES, SUPPRESS IT
IOCNFGDV MVI   4(R3),C'-'           INDICATE RELATED DATUM
         MVC   DOUBLE(2),0(R11)     LOAD DEVICE CLASS AND UNIT TYPE
         BAL   R14,CONV             CONVERT TO HEXADECIMAL
         MVC   5(4,R3),DOUBLE       LOAD DEVICE TYPE INTO LINE
         LA    R3,12(,R3)           POINT TO NEXT DISPLAY SLOT
         LA    R1,4(,R1)            ADD SIZE OF ONE ENTRY
         CLM   R1,3,14(R2)          COMPARE TO DATA LENGTH IN RECORD
         BH    RTNREC               END OF DATA SO RETURN
         BCT   R7,IOCNFGLP
         B     RTNREC
         DROP  R5                   IOCNFG
         SPACE
         LTORG
         SPACE 3
         USING VRYDEV,R5
VRYDEV   DS    0H                  SMF RECORD TYPES 9 AND 11
         SR    R7,R7
         ICM   R7,3,14(R2)          GET VARIABLE LENGTH
         SRA   R7,2                 DIVIDE BY 4 FOR NUMBER OF ENTRIES
         BZ    RTNREC               RETURN IF NONE  (CONFIG CHP OFF?)
         LA    R1,4                 GET DEVICE ENTRY LENGTH
         TM    0(R2),X'1E'          MVS/SP V4?
         BNO   VARYESA              NO
         SRA   R7,1                 DIVIDE BY 8 IN TOTAL FOR ENTRIES
         BZ    RTNREC               RETURN IF NONE  (SHOULDN'T OCCUR)
         LA    R1,8                 GET DEVICE ENTRY LENGTH
VARYESA  CH    R7,=H'11'            MORE THAN 11 DEVICES?
         BNH   VARYOK               NO
         LA    R7,11                YES, ONLY ROOM FOR 11
VARYOK   LA    R3,20(,R6)
         LA    R11,18(,R2)          POINT TO FIRST DEVICE NUMBER
VARYLOOP LA    R3,5(,R3)            NEXT MESSAGE LINE SLOT
         MVC   DOUBLE(2),0(R11)     (4-CHAR ADDRESS REPORTED)
         ALR   R11,R1               NEXT SMF RECORD DEVICE ENTRY
         BAL   R14,CONV
         MVC   0(4,R3),DOUBLE
         CLI   0(R3),C'0'           LEADING ZERO?
         BNE   VARYNUM              NO
         MVI   0(R3),C' '           YES, SUPPRESS IT
VARYNUM  BCT   R7,VARYLOOP
         B     RTNREC
         DROP  R5                   VRYDEV
         SPACE
         LTORG
         SPACE 3
         USING ALLREC,R5
ALLREC   DS    0H                  SMF RECORD TYPE 10
         MVC   25(8,R6),14(R2)      JOB NAME
         SR    R7,R7
         ICM   R7,3,38(R2)          GET VARIABLE LENGTH
         SRA   R7,2                 DIVIDE BY 4 FOR NUMBER OF ENTRIES
         BZ    RTNREC               RETURN IF NONE  (SHOULDN'T HAPPEN)
         CH    R7,=H'9'             MORE THAN 9 DEVICES?
         BNH   ALCRECOK             NO
         LA    R7,9                 YES, ONLY ROOM FOR 9
ALCRECOK LA    R3,30(,R6)
         LA    R11,38(,R2)
ALOCLOOP LA    R3,5(,R3)            NEXT MESSAGE LINE SLOT
         LA    R11,4(,R11)          NEXT SMF RECORD DEVICE ENTRY
         MVC   DOUBLE(2),0(R11)     (4-CHAR ADDRESS REPORTED)
         BAL   R14,CONV
         MVC   0(4,R3),DOUBLE
         CLI   0(R3),C'0'           LEADING ZERO?
         BNE   ALOCNUM              NO
         MVI   0(R3),C' '           YES, SUPPRESS IT
ALOCNUM  BCT   R7,ALOCLOOP
         B     RTNREC
         DROP  R5                   ALLREC
         SPACE
         LTORG
         SPACE 3
         USING DSETIO,R5
DSETIO   DS    0H                  SMF RECORD TYPES 14 AND 15
         MVC   25(8,R6),14(R2)      JOB NAME
         TM    38(R2),X'40'         END-OF-VOLUME?
         BZ    EORCOK               NO, RECORD CREATED BY CLOSE
         MVI   12(R6),X'85'   C'E'  YES, FLAG THIS
         MVI   19(R6),X'96'   C'O'
         MVI   24(R6),X'A5'   C'V'
EORCOK   LR    R7,R2                COPY RECORD DATA ADDRESS
         TM    267(R2),X'0F'        DATA SET OPEN DATE PRESENT?
         BNO   DSETLN               NO, PRE-DFSMS
         LA    R7,4(,R7)            ADJUST BASE FOR FIELDS AFTER DATE
DSETLN   TM    38(R2),X'20'         DASD DATA SET?
         BO    DSETDA               YES
         ICM   R1,15,252(R2)        NO, GET TAPE VOLUME BLOCK COUNT
         B     DSIOOK
DSETDA   ICM   R1,15,280(R7)        FIRST UNIT EXCP COUNT
DSIOOK   CVD   R1,DOUBLE
         L     R3,4(,R13)           POINT TO PREVIOUS SAVE AREA
         LH    R3,22(,R3)           GET COLUMNS FROM R0 SLOT
         AR    R3,R6                POINT PAST DISPLAY LINE
         SH    R3,=H'80'            POINT TO DISPLAY AREA
         CLI   266(R2),C' '         VOLUME SERIAL NUMBER BLANK?
         BNE   GETVOL               NO, SHOW FIRST VOLUME SERIAL NUMBER
         MVC   69(11,R3),ED11
         LA    R1,79(,R3)
         EDMK  68(32,R3),DOUBLE+2
         B     DSNCUT
GETVOL   MVC   74(6,R3),266(R7)     FIRST VOLUME SERIAL NUMBER
         MVC   62(11,R3),ED11
         LA    R1,72(,R3)
         EDMK  61(12,R3),DOUBLE+2
DSNCUT   TM    38(R2),X'10'         TEMPORARY DATA SET?
         BO    DSTEMP               YES, DO NOT SHOW DATA SET NAME
         BCTR  R1,0                 POINT TO BEHIND FIRST DIGIT
         MVC   34(16,R6),=CL16'**FORMAT4.DSCB**'
         CLI   64(R2),X'04'         IS THE DATA SET A VTOC?
         BE    DSETAM               YES, NOW HAVE DATA SET NAME
         LA    R15,34(,R6)          ADDRESS OF DSNAME START
         SR    R1,R15               GET LENGTH OF NAME THAT WILL FIT
         LA    R0,44                MAXIMUM DATA SET NAME LENGTH
         CR    R1,R0
         BNH   DSETNMLD
         LR    R1,R0
DSETNMLD BCTR  R1,0                 LESS 1 FOR EXECUTE
         EX    R1,GETDSN
         B     DSETAM
GETDSN   MVC   34(0,R6),64(R2)      DATA SET NAME <<<EXECUTED>>>
         SPACE
DSTEMP   MVC   34(8,R6),52(R2)      SHOW DDNAME FOR TEMPORARY FILE
         MVC   43(4,R6),=X'A3859497'     C'TEMP'
         TM    38(R2),X'20'         DASD DATA SET?
         BO    DATEMP               YES
         MVC   48(4,R6),=X'A3819785' NO  C'TAPE'
         B     DSETAM
DATEMP   TM    38(R2),X'01'         VIO DATA SET?
         BO    DSVIRT               YES
         MVC   48(4,R6),=C'3390'    NO
         CLI   275(R7),X'0F'        3390?
         BE    DSETAM               YES
         MVC   48(4,R6),=C'3380'    NO
         CLI   275(R7),X'0E'        3380?
         BE    DSETAM               YES
         MVC   48(4,R6),=X'8489A292' NO  C'DISK'
         B     DSETAM
DSVIRT   MVC   48(3,R6),=C'VIO'     INDICATE VIRTUAL DISK
         SPACE
DSETAM   CLC   52(6,R3),=CL9' '     ROOM FOR ACCESS METHOD NAME?
         BNE   DSBLSZ               NO, GO TRY FOR BLOCK SIZE
         MVC   53(4,R3),=C'EXCP'
         TM    243(R2),X'80'        EXCP PROCESSING USED?
         BO    DSBLSZ               YES
         TM    240(R2),X'E2'        KNOWN ACCESS METHOD?
         BZ    DSBLSZ               NO, LEAVE AS EXCP
         MVC   53(4,R3),=C'BPAM'
         TM    240(R2),X'02'        BPAM?
         BO    DSBLSZ               YES
         MVC   53(4,R3),=C'BDAM'
         TM    240(R2),X'20'        BDAM?
         BO    DSBLSZ               YES
         MVC   53(4,R3),=C'ISAM'
         TM    240(R2),X'80'        ISAM?
         BO    DSBLSZ               YES
*        TM    240(R2),X'40'        BSAM OR QSAM?
*        BZ    DSBLSZ               NO ASSUME EXCP
         MVC   53(4,R3),=C'BSAM'
         LA    R1,243(,R2)          POINT TO DCBMACRF
         LA    R0,2                 2 BYTES TO TEST (INPUT AND OUTPUT)
DSMACR   TM    0(R1),X'60'          TEST BASIC AND QUEUED BITS
         BM    BSORQS               DIFFERENT SO SEE WHICH TYPE
         LA    R1,1(,R1)            POINT TO NEXT BYTE
         BCT   R0,DSMACR
         B     DSBLSZ               SHOULD NOT HAPPEN BUT LEAVE AS BSAM
BSORQS   TM    0(R1),X'40'          IS THE QUEUED BIT ON?
         BZ    DSBLSZ               NO, SO THE BASIC BIT IS ON
         MVC   53(4,R3),=C'QSAM'    YES
         SPACE
DSBLSZ   SLR   R0,R0
         ICM   R0,3,166(R2)         GET DATA SET BLOCK SIZE
         BZ    RTNREC               ZERO SO DO NOT SHOW IT
         CLC   57(9,R3),=CL9' '     ROOM FOR BLOCK SIZE?
         BNE   RTNREC               NO, END OF FORMATTING
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         MVC   58(2,R3),=C'B='
         UNPK  60(5,R3),DOUBLE+5(3)
DSBLK0   CLI   60(R3),C'0'          LEADING ZERO?
         BNE   RTNREC               NO, END OF FORMATTING
         MVC   60(5,R3),61(R3)      YES, SUPPRESS IT
         B     DSBLK0
         DROP  R5                   DSETIO
         SPACE
         LTORG
         SPACE 3
         USING SORTMG,R5
SORTMG   DS    0H                  SMF RECORD TYPE 16
         MVC   25(8,R6),14(R2)      JOB NAME
         MVI   34(R6),C'#'
         SR    R8,R8
         IC    R8,38(R2)            STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         ICM   R8,3,62(R2)          LOAD NUMBER OF DATA SECTIONS
         BZ    RTNREC               NONE SO END OF PROCESSING
         ICM   R8,15,56(R2)         LOAD OFFSET TO DATA SECTION
         ALR   R8,R2                POINT TO DATA SECTION + 4
         ICM   R1,15,6(R8)          NUMBER OF RECORDS SORTED
         CVD   R1,DOUBLE
         MVC   39(7,R6),ED7
         ED    38(8,R6),DOUBLE+4
         MVC   47(4,R6),=X'998583A2'   C'RECS'
         ICM   R1,15,10(R8)         NUMBER OF BYTES SORTED
         SRL   R1,10                CONVERT TO KILOBYTES
         CVD   R1,DOUBLE
         MVC   52(7,R6),ED7
         ED    51(8,R6),DOUBLE+4
         MVC   59(9,R6),=X'928240839697898584'    C'KB COPIED'
         TM    32(R8),X'20'         COPY FUNCTION INVOKED?
         BO    RTNREC               YES
         MVC   62(6,R6),=X'948599878584'          C'MERGED'
         TM    32(R8),X'40'         MERGE FUNCTION INVOKED?
         BO    RTNREC               YES
         MVC   62(14,R6),=X'A29699A385844089954083969985' SORTED INCORE
         ICM   R1,15,26(R8)         LOAD USED WORK FILE TRACK COUNT
         BZ    RTNREC               ZERO SO IT WAS AN IN-CORE SORT
         CVD   R1,DOUBLE
         MVC   69(5,R6),ED5
         ED    68(6,R6),DOUBLE+5
         MVC   74(6,R6),=X'40A692E39992'    C' WKTRK'
         B     RTNREC
         DROP  R5                   SORTMG
         SPACE
         LTORG
         SPACE 3
         USING DASCRT,R5
DASCRT   DS    0H                  SMF RECORD TYPE 17
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),40(R2)     DATA SET NAME
         CLI   90(R2),C' '          VOLUME SERIAL NUMBER BLANK?
         BE    RTNREC               YES, DON'T OVERWRITE DSN CHARS
         L     R3,4(,R13)           POINT TO PREVIOUS SAVE AREA
         LH    R3,22(,R3)           GET COLUMNS FROM R0 SLOT
         AR    R3,R6                POINT PAST DISPLAY LINE
         SH    R3,=H'80'            POINT TO DISPLAY AREA
         MVC   74(6,R3),90(R2)      FIRST VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   DASCRT
         SPACE
         LTORG
         SPACE 3
         USING RENAME,R5
RENAME   DS    0H                  SMF RECORD TYPE 18
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),40(R2)     OLD DATA SET NAME
         CLI   134(R2),C' '         VOLUME SERIAL NUMBER BLANK?
         BE    RTNREC               YES, DON'T OVERWRITE DSN CHARS
         L     R3,4(,R13)           POINT TO PREVIOUS SAVE AREA
         LH    R3,22(,R3)           GET COLUMNS FROM R0 SLOT
         AR    R3,R6                POINT PAST DISPLAY LINE
         SH    R3,=H'80'            POINT TO DISPLAY AREA
         MVC   74(6,R3),134(R2)     FIRST VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   RENAME
         SPACE
         LTORG
         SPACE 3
         USING DASVOL,R5
DASVOL   DS    0H                  SMF RECORD TYPE 19
         MVC   25(6,R6),16(R2)      VOLUME SERIAL NUMBER
         MVC   DOUBLE(2),60(R2)
         BAL   R14,CONV
         MVC   32(4,R6),DOUBLE      4-CHAR CHANNEL-UNIT ADDRESS
         CLI   32(R6),C'0'          LEADING ZERO?
         BNE   CUA19OK              NO
         MVI   32(R6),C' '          YES, NOT ANY MORE
CUA19OK  MVC   DOUBLE(2),32(R2)
         BAL   R14,CONV
         MVC   37(4,R6),DOUBLE      UCBTYP 1ST WORD
         MVC   DOUBLE(2),34(R2)
         BAL   R14,CONV
         MVC   41(4,R6),DOUBLE      UCBTYP 2ND WORD
         MVC   47(5,R6),=X'C69985857A'     C'FREE:'
         SR    R1,R1
         ICM   R1,3,44(R2)          FREE DSCBS
         CVD   R1,DOUBLE
         MVC   53(5,R6),ED5
         ED    52(6,R6),DOUBLE+5
         ICM   R1,3,48(R2)          FREE CYLINDERS
         CVD   R1,DOUBLE
         MVC   59(5,R6),ED5
         ED    58(6,R6),DOUBLE+5
         MVC   64(2,R6),=X'834E'    (CYLINDERS PLUS)
         ICM   R1,3,50(R2)          FREE TRACKS (ADDITIONAL)
         CVD   R1,DOUBLE
         MVC   67(5,R6),ED5
         ED    66(6,R6),DOUBLE+5
         MVI   72(R6),X'A3'         (TRACKS)
         ICM   R1,3,56(R2)          FREE EXTENTS
         CVD   R1,DOUBLE
         MVC   74(5,R6),ED5
         ED    73(6,R6),DOUBLE+5
         MVI   79(R6),X'A7'         (EXTENTS)
         B     RTNREC
         DROP  R5                   DASVOL
         SPACE
         LTORG
         SPACE 3
         USING NEWJOB,R5
NEWJOB   DS    0H                  SMF RECORD TYPE 20
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(20,R6),40(R2)     PROGRAMMER NAME
         SR    R1,R1
         ICM   R1,3,38(R2)          OFFSET TO RACF SECTION
         LA    R1,2(R1,R2)          POINT TO RACF SECTION
         OC    55(8,R6),8(R1)       RACF USER ID     (DON'T SHOW NULLS)
         OC    63(8,R6),0(R1)       RACF GROUP ID    (  "    "     "  )
         OC    72(8,R6),16(R1)      TERMINAL NAME    (  "    "     "  )
         B     RTNREC
         DROP  R5                   NEWJOB
         SPACE
         LTORG
         SPACE 3
         USING ERSTAT,R5
ERSTAT   DS    0H                  SMF RECORD TYPE 21
         OC    25(6,R6),16(R2)      VOLUME SERIAL NUMBER
         MVC   DOUBLE(2),22(R2)                   (NULLS IF NO TAPE)
         BAL   R14,CONV
         MVC   32(4,R6),DOUBLE      4-CHAR CHANNEL-UNIT ADDRESS
         LA    R11,36(,R6)          POINT TO DENSITY DISPLAY SLOT
         L     R3,4(,R13)           POINT TO PREVIOUS SAVE AREA
         LH    R3,22(,R3)           GET COLUMNS FROM R0 SLOT
         LA    R0,36                GET USED DISPLAY AREA COLUMNS
         SR    R3,R0                GET REMAINING DISPLAY AREA LENGTH
         CLI   32(R6),C'0'          LEADING ZERO?
         BNE   CUA21OK              NO
         MVC   32(4,R6),33(R6)      YES, NOT ANY MORE
         BCTR  R11,0                POINT TO NEW DENSITY DISPLAY SLOT
         LA    R3,1(,R3)            GET REMAINING DISPLAY AREA LENGTH
CUA21OK  LA    R0,5                 GET LENGTH OF DENSITY DISPLAY SLOT
         MVC   1(4,R11),=C' 200'
         CLI   39(R2),X'03'
         BE    GOTDENS
         MVC   1(4,R11),=C' 556'
         CLI   39(R2),X'43'
         BE    GOTDENS
         MVC   1(4,R11),=C' 800'
         CLI   39(R2),X'83'
         BE    GOTDENS
         MVC   1(4,R11),=C'1600'
         CLI   39(R2),X'C3'
         BE    GOTDENS
         CLI   39(R2),X'42'         HANDLE BRAZILIAN 3424
         BE    GOTDENS
         MVC   1(4,R11),=C'6250'
         CLI   39(R2),X'D3'
         BE    GOTDENS
         CLI   39(R2),X'C2'         HANDLE BRAZILIAN 3424
         BE    GOTDENS
         MVC   1(4,R11),0(R11)      BLANK FOR UNKNOWN DENSITY
         B     DONEDENS
GOTDENS  AR    R11,R0               POINT TO NEXT DISPLAY SLOT
         SR    R3,R0                REDUCE DISPLAY AREA LEFT
*  LITERALS SHOWN BESIDE NUMERIC VALUES ON THE DISPLAY LINE ARE
*  DERIVED FROM THE SMF RECORD FIELD NAME WITHOUT THE 'SMF21' PREFIX.
DONEDENS SR    R1,R1
         LA    R15,=X'A399'         C'TR'
         ICM   R1,1,28(R2)          TEMPORARY READ ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'A3A6'         C'TW'
         ICM   R1,1,29(R2)          TEMPORARY WRITE ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'9799'         C'PR'
         ICM   R1,1,32(R2)          PERMANENT READ ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'97A6'         C'PW'
         ICM   R1,1,33(R2)          PERMANENT WRITE ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'9582'         C'NB'
         ICM   R1,1,34(R2)          NOISE BLOCKS
         BAL   R14,ESV1BYT
         LA    R15,=X'A28996'       C'SIO'
         ICM   R1,3,30(R2)          START I/O (SSCH) COUNT
         BAL   R14,ESV2BYT
         LA    R15,=X'859987'       C'ERG'
         ICM   R1,3,35(R2)          ERASE GAPS
         BAL   R14,ESV2BYT
         LA    R15,=X'839395'       C'CLN'
         ICM   R1,3,37(R2)          CLEANER ACTIONS
         BAL   R14,ESV2BYT
         LA    R15,=X'8293A2'       C'BLS'
         ICM   R1,3,40(R2)          BLOCK SIZE
         BAL   R14,ESV2BYT
         CLI   15(R2),44            MODERN RECORD?
         BL    CARTOKAY             NO, DOESN'T HAVE 3480 STUFF
         LA    R15,=X'A39986'       C'TRF'
         ICM   R1,3,46(R2)          TEMPORARY READ FORWARD ERRORS
         BAL   R14,ESV2BYT
         LA    R15,=X'A39982'       C'TRB'
         ICM   R1,3,48(R2)          TEMPORARY READ BACKWARD ERRORS
         BAL   R14,ESV2BYT
         LA    R15,=X'A3A686'       C'TWF'
         ICM   R1,3,46(R2)          TEMPORARY WRITE ERRORS
         BAL   R14,ESV2BYT
         LA    R15,=X'928299948299' C'KBRMBR'
         ICM   R1,7,52(R2)          4K BYTES READ
         BAL   R14,ESV3BYT
         LA    R15,=X'9282A69482A6' C'KBWMBW'
         ICM   R1,7,55(R2)          4K BYTES WRITTEN
         BAL   R14,ESV3BYT
CARTOKAY CH    R3,=H'9'             ENOUGH LEFT FOR TAPE DRIVE SERIAL?
         BL    RTNREC               NO, SO EXIT
         ICM   R1,7,43(R2)          TAPE UNIT SERIAL
         BZ    RTNREC               SUPPRESS DISPLAY OF ZERO
         SLL   R1,4                 MAKE ROOM FOR SIGN
         STCM  R1,7,DOUBLE+5        (LEADING NIBBLE USUALLY ZERO)
         OI    DOUBLE+7,X'0F'       GET A GOOD SIGN FOR UNPACK
         L     R11,4(,R13)          POINT TO PREVIOUS SAVE AREA
         LH    R11,22(,R11)         GET COLUMNS FROM R0 SLOT
         SH    R11,=H'9'            GET TARGET DISPLAY OFFSET
         ALR   R11,R6               POINT TO DISPLAY AREA
         UNPK  1(5,R11),DOUBLE+5(3) HANDLE NON-DECIMAL SERIAL NUMBER
         TR    1(5,R11),HEXCHARS-240
         MVC   6(3,R11),=X'A3A4A2'  C'TUS'
         B     RTNREC
         SPACE
ESV3BYT  BZR   R14                  SUPPRESS DISPLAY OF ZERO COUNTER
         CLM   R1,6,=H'3'           WILL KILOBYTES FIT IN FIVE DIGITS?
         BNH   ESVKBYT              YES, SHOW KILOBYTES
         LA    R15,3(,R15)          NO, SHOW MEGABYTES LABEL
         SRL   R1,8                 CONVERT FROM 4K BYTES TO MEGABYTES
         B     ESV2BYT
ESVKBYT  SLL   R1,2                 CONVERT FROM 4K BYTES TO KILOBYTES
         SPACE
ESV2BYT  BZR   R14                  SUPPRESS DISPLAY OF ZERO COUNTER
         LA    R0,9                 DISPLAY AREA LENGTH REQUIRED
         CR    R3,R0                ENOUGH LEFT?
         BL    RTNREC               NO, SO EXIT
         CVD   R1,DOUBLE            NON-ZERO COUNTER SO SHOW IT
         MVC   1(5,R11),ED5
         ED    0(6,R11),DOUBLE+5    LOAD COUNTER VALUE
         MVC   6(3,R11),0(R15)      LOAD DESCRIBING LITERAL
         SR    R3,R0                REDUCE DISPLAY AREA LEFT
         AR    R11,R0               POINT TO NEXT DISPLAY SLOT
         BR    R14                  RETURN TO CALLER
         SPACE
ESV1BYT  BZR   R14                  SUPPRESS DISPLAY OF ZERO COUNTER
         LA    R0,6                 DISPLAY AREA LENGTH REQUIRED
         CR    R3,R0                ENOUGH LEFT?
         BL    RTNREC               NO, SO EXIT
         CVD   R1,DOUBLE            NON-ZERO COUNTER SO SHOW IT
         MVC   1(3,R11),ED3
         ED    0(4,R11),DOUBLE+6    LOAD COUNTER VALUE
         MVC   4(2,R11),0(R15)      LOAD DESCRIBING LITERAL
         SR    R3,R0                REDUCE DISPLAY AREA LEFT
         AR    R11,R0               POINT TO NEXT DISPLAY SLOT
         BR    R14                  RETURN TO CALLER
         DROP  R5                   ERSTAT
         SPACE
         LTORG
         SPACE 3
         USING CONFIG,R5
CONFIG   DS    0H                  SMF RECORD TYPE 22
         SR    R1,R1
         ICM   R1,3,14(R2)          RECORD CREATOR INDICATOR
         CVD   R1,DOUBLE            CALL IT SUBTYPE (VARY TYPE)
         MVC   33(3,R6),ED3
         ED    32(4,R6),DOUBLE+6
         MVC   25(7,R6),SUBTYPE
         B     RTNREC
         DROP  R5                   CONFIG
         SPACE
         LTORG
         SPACE 3
         USING SMFSTA,R5
SMFSTA   DS    0H                  SMF RECORD TYPE 23
         LA    R0,4
         LR    R15,R2               POINT TO SMF FLAG BYTE
         SLR   R15,R0               POINT TO RDW
         LA    R0,1
         CLM   R0,3,26(R15)         ONE PRODUCT SECTION PRESENT?
         BNE   SMFSTATS             NO, THAT DOESN'T SEEM RIGHT
         ICM   R7,15,20(R15)        YES, GET OFFSET TO PRODUCT SECTION
         ALR   R7,R15               POINT TO PRODUCT SECTION
         MVC   25(8,R6),4(R7)       SHOW PRODUCT NAME ('SMF     ')
SMFSTATS CLM   R0,3,42(R15)         ONE STATISTICS SECTION PRESENT?
         BNE   RTNREC               NO, THAT DOESN'T SEEM RIGHT
         ICM   R7,15,36(R15)        YES, GET ITS OFFSET
         ALR   R7,R15               POINT TO STATISTICS SECTION
         ICM   R1,15,0(R7)          SHOW NUMBER OF BUFFERS WRITTEN
         CVD   R1,DOUBLE
         MVC   36(11,R6),ED11
         ED    35(12,R6),DOUBLE+2
         MVC   48(7,R6),=X'82A486868599A2'  C'BUFFERS'
         ICM   R1,15,12(R7)         SHOW NUMBER OF RECORDS WRITTEN
         CVD   R1,DOUBLE
         MVC   56(11,R6),ED11
         ED    55(12,R6),DOUBLE+2
         MVC   68(7,R6),=X'998583969984A2'  C'RECORDS'
         B     RTNREC
         DROP  R5                   SMFSTA
         SPACE
         LTORG
         SPACE 3
         USING OFFLOD,R5
OFFLOD   DS    0H                  SMF RECORD TYPE 24
         LA    R1,4
         CLM   R1,3,18(R2)          SUBTYPE HIGHER THAN 4?
         BL    UNUSED               YES, UNKNOWN SUBTYPE
         ICM   R1,3,18(R2)          LOAD THE SUBTYPE
         BNP   UNUSED               UNKNOWN SUBTYPE IF NEGATIVE OR ZERO
         BCTR  R1,0
         SLL   R1,1                 GET INDEX
         LA    R1,OFFLDTYP(R1)      POINT TO CORRECT SUBTYPE LABEL *ABL
         MVC   58(2,R6),0(R1)       DISPLAY IT
         MVC   25(4,R6),14(R2)      LOAD SUBSYSTEM NAME
         ICM   R1,3,38(R2)          ANY GENERAL SECTION(S)?
         BZ    RTNREC               NO, THAT SEEMS A BIT ODD
         ICM   R1,15,32(R2)         YES, GET ITS OFFSET FROM THE RDW
         LA    R1,0(R1,R2)          POINT 4 BYTES INTO GENERAL SECTION
         MVC   30(8,R6),0(R1)       LOAD THE JOB NAME
         MVC   39(8,R6),8(R1)       LOAD THE ORIGINAL JOB NUMBER
         CLC   8(8,R1),16(R1)       ANY CHANGE IN JOB NUMBER?
         BE    OFFJOBID             NO
         MVC   47(2,R6),=C'->'      INDICATE CHANGE
         MVC   49(8,R6),16(R1)      LOAD THE CURRENT JOB NUMBER
OFFJOBID ICM   R0,15,72(R1)         LOAD THE XMIT/RECEIVE RECORD COUNT
         CLI   58(R6),C'S'          SYSOUT DATA SET PROCESSING?
         BNE   OFFLD#OK             NO, USE THIS RECORD COUNT
         ICM   R1,3,46(R2)          YES, ANY SYSOUT SECTION(S)?
         BZ    OFFLD#OK             NO, THAT SEEMS A BIT ODD
         ICM   R1,15,40(R2)         YES, GET ITS OFFSET FROM THE RDW
         LA    R1,0(R1,R2)          POINT 4 BYTES INTO SYSOUT SECTION
         ICM   R0,15,52(R1)         LOAD SYSOUT DATA SET RECORD COUNT
OFFLD#OK CVD   R0,DOUBLE            MAKE IT DECIMAL
         MVC   61(11,R6),ED11       LOAD EDIT MASK
         ED    60(12,R6),DOUBLE+2   DISPLAY THE RECORD COUNT
         MVC   73(7,R6),=X'998583969984A2'  C'RECORDS'
         CLI   49(R6),C' '          ROOM FOR CLASS?
         BNE   RTNREC               NO
         ICM   R1,3,46(R2)          ANY SELECTION SECTION PRESENT?
         BZ    RTNREC               NO
         ICM   R1,15,40(R2)         YES, GET OFFSET
         ALR   R1,R2                POINT TO NODE NAME
         BCTR  R1,0                 POINT TO CLASS
         MVC   49(1,R6),0(R1)       SHOW CLASS
         BCTR  R1,0                 POINT TO FLAG BYTE
         TM    0(R1),X'80'          HELD?
         BZ    RTNREC               NO
         MVC   51(4,R6),=C'HELD'
         B     RTNREC
         DROP  R5                   OFFLOD
         SPACE
OFFLDTYP DC    C'JTJRSTSR'          SUBTYPE LABELS
         LTORG
         SPACE 3
         USING JES3AL,R5
JES3AL   DS    0H                  SMF RECORD TYPE 25
         MVC   25(8,R6),14(R2)      JOB NAME
         ICM   R1,15,64(R2)         NUMBER OF TAPES MOUNTED
         CVD   R1,DOUBLE
         MVC   36(7,R6),ED7
         ED    35(8,R6),DOUBLE+4
         MVC   44(5,R6),=X'A3819785A2'      C'TAPES'
         ICM   R1,15,68(R2)         NUMBER OF DISKS MOUNTED
         CVD   R1,DOUBLE
         MVC   51(7,R6),ED7
         ED    52(8,R6),DOUBLE+4
         MVC   61(5,R6),=X'8489A292A2'      C'DISKS'
         B     RTNREC
         DROP  R5                   JES3AL
         SPACE
         LTORG
         SPACE 3
         USING PURGE,R5
PURGE    DS    0H                  SMF RECORD TYPE 26
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(8,R6),56(R2)      JOB NUMBER
         OC    43(8,R6),92(R2)      LOGICAL READER NAME (NULLS FOR MSP)
         MVC   52(1,R6),84(R2)      MESSAGE CLASS
         MVC   54(1,R6),85(R2)      JOB CLASS
         OC    56(20,R6),64(R2)     PROGRAMMER NAME  (DON'T SHOW NULLS)
         OC    76(4,R6),104(R2)     ROOM NUMBER      (DON'T SHOW NULLS)
         B     RTNREC
         DROP  R5                   PURGE
         SPACE
         LTORG
         TITLE 'SMF RECORD TYPE 30 SUBROUTINE'
         USING CMNASW,R5
CMNASW   DS    0H                  SMF RECORD TYPE 30
         LR    R3,R2                COPY RECORD ADDRESS
         LA    R1,4
         SLR   R3,R1                POINT TO LOGICAL RDW OF SMF RECORD
         ICM   R7,15,24(R3)         GET OFFSET TO SUBSYSTEM SECTION
         ALR   R7,R3                POINT TO SUBSYSTEM SECTION
         SLR   R1,R1
         ICM   R1,3,0(R7)           LOAD RECORD 30 SUBTYPE
         CH    R1,=H'9'             FUNNY SUBTYPE?
         BH    UNUSED               YES, ATTEMPT TO SHOW IT
         STC   R1,3(,R6)            SHOW RECORD 30 SUBTYPE
*        NI    3(R6),X'0F'          ENSURE SUBTYPE LESS THAN 16
*        TR    3(1,R6),HEXCHARS     CATER FOR SUBTYPE UP TO 15
         OI    3(R6),X'F0'          CATER FOR SUBTYPE UP TO 9
         ICM   R7,15,32(R3)         GET OFFSET TO ID SECTION
         ALR   R7,R3                POINT TO IDENTIFICATION SECTION
         MVC   25(8,R6),0(R7)       JOB NAME
         SLL   R1,2                 GET SUBTYPE BRANCH INDEX
         ICM   R8,3,102(R3)         TEST IF EXCP SECTION PRESENT
         BZ    RC30TYPE(R1)         PROCESS SUBTYPE IF NOT
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         BZ    RC30TYPE(R1)         PROCESS SUBTYPE IF MAX(ISH) LEFT
         CLM   R0,3,102(R3)         COMPARE PAGE NUMBER TO DD COUNT
         BH    LEFTMSG              SCROLLED TOO FAR RIGHT FOR DATA
         SLR   R8,R8
         ICM   R8,3,100(R3)         GET EXCP SECTION LENGTH
         ICM   R7,15,96(R3)         GET OFFSET TO FIRST EXCP SECTION
         ALR   R7,R3                POINT TO FIRST EXCP SECTION
EXCPLOOP ALR   R7,R8                POINT TO NEXT EXCP SECTION
         BCT   R0,EXCPLOOP
         SLR   R7,R8                BACK UP ONE
         ICM   R14,15,0(R7)         IS IT A JES OR DUMMY FILE?
         BZ    JESDMY30             YES
         TM    0(R2),X'06'          OS/VS2 MVS/XA OR LATER?
         BO    VIOXA030             YES, USE THE XA VIO TEST
         CLC   =X'00000FFF',0(R7)   IS IT VIO?
         BE    ISVIO030             YES
VIOXA030 CLC   =X'00007FFF',0(R7)   IS IT VIO? (XA)
         BE    ISVIO030             YES
NONVIO30 MVC   DOUBLE(2),0(R7)      DEVICE CLASS AND UNIT TYPE
         BAL   R14,CONV
         MVC   34(4,R6),DOUBLE
         MVC   DOUBLE(2),2(R7)      DEVICE NUMBER
         BAL   R14,CONV
         MVC   39(4,R6),DOUBLE
         CLI   39(R6),C'0'          LEADING ZERO?
         BNE   NOTVIO30             NO
         MVI   39(R6),C' '          YES, NOT ANY MORE
         B     NOTVIO30
JESDMY30 MVC   34(9,R6),=C'-JES/DMY-'
         ICM   R1,15,12(R7)         EXCP COUNT
         BZ    DDNAME30             SUPPRESS PROBABLY MISLEADING ZERO
         B     EXCPCT30             HANDLE IF IBM EVER KEEPS COUNT
ISVIO030 MVC   34(9,R6),=C'---VIO---'
NOTVIO30 ICM   R1,15,12(R7)         EXCP COUNT
EXCPCT30 CVD   R1,DOUBLE
         MVC   52(9,R6),ED9
         ED    51(10,R6),DOUBLE+3
DDNAME30 OC    44(8,R6),4(R7)       DDNAME (SUPPRESS NULLS FOR CATALOG)
         ICM   R1,12,16(R7)         BLKSIZE
         BZ    NULBLK30             SUPPRESS 'BLK=00000'
         SLL   R1,1                 SHIFT OFF SIGN BIT
         SRL   R1,17                SCALE DOWN TO UNITS
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'       GET A GOOD SIGN FOR UNPACK
         MVC   62(4,R6),=C'BLK='
         UNPK  66(5,R6),DOUBLE+5(3)
EDBLOK30 CLI   66(R6),C'0'          LEADING ZERO?
         BNE   NULBLK30             NO, BLOCK SIZE NOW FORMATTED
         MVC   66(5,R6),67(R6)      YES, SUPPRESS IT
         B     EDBLOK30
NULBLK30 TM    0(R2),X'06'          OS/VS2 MVS/XA OR LATER?
         BNO   RTNREC               NO, SO NO CHANNEL CONNECT TIME
         SLR   R0,R0
         ICM   R1,15,18(R7)         CHANNEL CONNECT TIME
         BZ    RTNREC               OMIT DISPLAY IF ABSOLUTELY ZERO
         SLDL  R0,7                 CONVERT TO MICROSECONDS
         D     R0,=F'10000'         CONVERT TO CENTISECONDS
         C     R1,=F'1000'          CONNECT TIME LESS THAN 10 SECONDS?
         BL    SMALIO30             YES, SHOW SECONDS
         LA    R15,72(,R6)          NO, SHOW HOURS, MINUTES AND SECONDS
         BAL   R14,TIMEX
         B     RTNREC               END OF EXCP DD FORMATTING
SMALIO30 MVC   72(8,R6),=X'214B2020A28583A2' EDIT MASK + C'SECS'
         CVD   R1,DOUBLE
         ED    71(5,R6),DOUBLE+6
         OI    72(R6),X'F0'         ENSURE LEADING DIGIT
         B     RTNREC               END OF EXCP DD FORMATTING
RC30TYPE B     RTNREC               SUBTYPE 0 - INVALID
         B     NEWJOB30             SUBTYPE 1 - JOB START
         B     INTRVL30             SUBTYPE 2 - INTERVAL
         B     INTRVL30             SUBTYPE 3 - STEP TERMINATION
         B     STPEND30             SUBTYPE 4 - STEP TOTAL
         B     JOBEND30             SUBTYPE 5 - JOB END
         B     INTRVL30             SUBTYPE 6 - SYSTEM ADDRESS SPACE
         B     RTNREC               SUBTYPE 7 - INVALID
         B     RTNREC               SUBTYPE 8 - INVALID
         B     RTNREC               SUBTYPE 9 - INVALID
NEWJOB30 MVC   34(8,R6),32(R7)      JOB NUMBER
         OC    53(1,R6),42(R7)      JOB CLASS   (NULLS FOR SYSTEM A.S.)
         OC    55(8,R6),108(R7)     RACF USER ID     (NULLS IF NO RACF)
         OC    63(8,R6),100(R7)     RACF GROUP ID    (  "   "  "   "  )
         MVC   72(8,R6),116(R7)     RACF TERMINAL ID
         CLI   72(R6),0             WERE NULLS COPIED?
         BNE   RTNREC               NO, DISPLAY LINE FULL
         MVC   72(20,R6),80(R7)     YES, SHOW SOME OF PROGRAMMER NAME
         B     RTNREC               END OF JOB START PROCESSING
INTRVL30 MVC   34(8,R6),32(R7)      JOB NUMBER
         OC    43(8,R6),16(R7)      STEP NAME     (INITIATOR HAS NULLS)
         ICM   R0,3,62(R3)          PROCESSOR SECTION PRESENT?
         BZ    INTRVLIO             NO, CAN'T REPORT CPU TIME
         ICM   R7,15,56(R3)         GET OFFSET TO PROCESSOR SECTION
         ALR   R7,R3                POINT TO PROCESSOR SECTION
         ICM   R1,15,4(R7)          GET STEP TCB TIME
         ICM   R0,15,8(R7)          GET STEP SRB TIME
         AR    R1,R0                ADD IT
         ICM   R0,15,12(R7)         GET INITIATOR TCB TIME
         AR    R1,R0                ADD IT
         ICM   R0,15,16(R7)         GET INITIATOR SRB TIME
         AR    R1,R0                ADD IT
         MVC   52(4,R6),=C'CPU-'
         LA    R15,56(,R6)
         BAL   R14,TIMEX            LOAD CPU HH:MM:SS
INTRVLIO ICM   R1,3,46(R3)          I/O ACTIVITY SECTION PRESENT?
         BZ    RTNREC               NO, NO CAN'T REPORT EXCP COUNT
         ICM   R1,15,40(R3)         OFFSET TO I/O ACTIVITY SECTION
         ALR   R1,R3                POINT TO I/O ACTIVITY SECTION
         ICM   R1,15,4(R1)          TOTAL BLOCKS TRANSFERRED
         CVD   R1,DOUBLE
         MVC   65(4,R6),=C'I/O-'
         MVC   69(11,R6),ED11
         ED    68(12,R6),DOUBLE+2
         B     RTNREC
STPEND30 MVI   34(R6),C'#'
         SLR   R8,R8
         ICM   R8,3,40(R7)          STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         OC    39(8,R6),16(R7)      STEP NAME     (INITIATOR HAS NULLS)
         MVC   48(8,R6),8(R7)       PROGRAM NAME
         ICM   R8,3,44(R7)          PERFORMANCE GROUP NUMBER
         CVD   R8,DOUBLE
         MVC   77(3,R6),ED3
         ED    76(4,R6),DOUBLE+6
         MVC   74(3,R6),=X'D78795'  C'PGN'
         ICM   R0,3,54(R3)          COMPLETION SECTION PRESENT?
         BZ    RTNREC               NO
         ICM   R7,15,48(R3)         GET OFFSET TO COMPLETION SECTION
         ALR   R7,R3                POINT TO COMPLETION SECTION
         LA    R1,2(,R7)            POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,0(R7)           GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCCOMP         COMPUTE RC/CC
         B     RTNREC
JOBEND30 MVC   34(8,R6),32(R7)      JOB NUMBER
         CLC   =C'TSU',32(R7)       TIME SHARING USER?
         BE    TSOEND30             YES, FORMAT TSO STATISTICS
         OC    43(1,R6),42(R7)      JOB CLASS   (NULLS FOR SYSTEM A.S.)
         OC    45(8,R6),108(R7)     RACF USER ID     (NULLS IF NO RACF)
         MVC   54(20,R6),80(R7)     PROGRAMMER NAME
         ICM   R0,3,94(R3)          OPERATOR SECTION PRESENT?
         BZ    RTNREC               NO
         ICM   R7,15,88(R3)         GET OFFSET TO OPERATOR SECTION
         ALR   R7,R3                POINT TO OPERATOR SECTION
         ICM   R0,15,8(R7)          GET NON-SPECIFIC TAPE MOUNT COUNT
         ICM   R1,15,12(R7)         GET SPECIFIC TAPE MOUNT COUNT
         AR    R1,R0                GET TOTAL TAPE MOUNT COUNT
         BZ    RTNREC               SKIP IT IF ZERO
         CVD   R1,DOUBLE
         MVC   75(3,R6),ED3
         ED    74(4,R6),DOUBLE+6
         MVC   78(2,R6),=X'94A3'    C'MT'   DENOTE MAG TAPE MOUNTS
         B     RTNREC
TSOEND30 ICM   R1,15,80(R3)         OFFSET TO PERFORMANCE SECTION
         ALR   R1,R3                POINT TO PERFORMANCE SECTION
         ICM   R1,15,32(R1)         TOTAL TRANSACTIONS
         CVD   R1,DOUBLE
         MVC   73(5,R6),ED5
         ED    72(6,R6),DOUBLE+5
         MVC   78(2,R6),=X'A795'    C'XN'
         OC    43(8,R6),116(R7)     RACF TERMINAL ID
         ICM   R1,15,40(R3)         OFFSET TO I/O ACTIVITY SECTION
         ALR   R1,R3                POINT TO I/O ACTIVITY SECTION
         ICM   R8,15,8(R1)          NUMBER OF TPUTS
         CVD   R8,DOUBLE
         MVC   53(5,R6),ED5
         ED    52(6,R6),DOUBLE+5
         MVC   58(4,R6),=X'A397A4A3'     C'TPUT'
         ICM   R8,15,12(R1)         NUMBER OF TGETS
         CVD   R8,DOUBLE
         MVC   63(5,R6),ED5
         ED    62(6,R6),DOUBLE+5
         MVC   68(4,R6),=X'A38785A3'     C'TGET'
         B     RTNREC
         DROP  R5                   CMNASW
         SPACE
         LTORG
         TITLE 'SMF RECORD TYPE SUBROUTINES'
         USING TIOCIN,R5
TIOCIN   DS    0H                  SMF RECORD TYPE 31
         MVC   25(4,R6),=C'TIOC'
         B     RTNREC
         DROP  R5                   TIOCIN
         SPACE
         LTORG
         SPACE 3
         USING APPCTP,R5
APPCTP   DS    0H                  SMF RECORD TYPE 33
         CLC   =H'1',18(R2)         SUBTYPE 1?
         BNE   UNUSED               NO
         CLC   =H'1',30(R2)         ONE PRODUCT SECTION PRESENT?
         BNE   UNUSED               NO, UNEXPECTED FORMAT
         CLC   =H'1',38(R2)         ONE TP ID SECTION PRESENT?
         BNE   UNUSED               NO, UNEXPECTED FORMAT
         CLC   =H'1',46(R2)         ONE TP USAGE SECTION PRESENT?
         BNE   UNUSED               NO, UNEXPECTED FORMAT
         LR    R3,R2                COPY RECORD ADDRESS
         LA    R1,4
         SLR   R3,R1                POINT TO LOGICAL RDW OF SMF RECORD
         ICM   R1,15,40(R2)         GET OFFSET TO TP USAGE SECTION
         ALR   R3,R1                POINT TO TP USAGE SECTION
         OC    25(8,R6),0(R3)       RACF USER
         OC    34(8,R6),8(R3)       RACF GROUP
         ICM   R0,15,28(R3)         GET TP USAGE COUNT
         CVD   R0,DOUBLE
         MVC   66(9,R6),ED9
         ED    65(10,R6),DOUBLE+3
         MVC   76(4,R6),=X'A4A285A2'     C'USES'
         ICM   R1,15,32(R2)         GET IDENTIFICATION SECTION OFFSET
         ALR   R1,R2                POINT TO 4 BYTES INTO ID SECTION
         MVC   43(6,R6),=X'C39381A2A27E' C'CLASS='
         MVC   49(8,R6),0(R1)       TP CLASS
         B     RTNREC
         DROP  R5                   APPCTP
         SPACE
         LTORG
         SPACE 3
         USING TSSTEP,R5
TSSTEP   DS    0H                  SMF RECORD TYPE 34
         MVC   25(8,R6),14(R2)      JOB NAME
         MVI   34(R6),C'#'
         SR    R8,R8
         IC    R8,38(R2)            STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         MVC   39(8,R6),62(R2)      STEP NAME
         MVC   48(8,R6),54(R2)      PROGRAM NAME
         LA    R1,83(,R2)           POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,51(R2)          GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCCOMP         COMPUTE RC/CC
         B     RTNREC
         DROP  R5                   TSSTEP
         SPACE
         LTORG
         SPACE 3
         USING LOGOFF,R5
LOGOFF   DS    0H                  SMF RECORD TYPE 35
         MVC   25(8,R6),14(R2)      JOB NAME
         ICM   R1,15,43(R2)         NUMBER OF TPUTS
         CVD   R1,DOUBLE
         MVC   35(5,R6),ED5
         ED    34(6,R6),DOUBLE+5
         MVC   41(5,R6),=X'A397A4A3A2'      C'TPUTS'
         ICM   R1,15,47(R2)         NUMBER OF TGETS
         CVD   R1,DOUBLE
         MVC   48(5,R6),ED5
         ED    47(6,R6),DOUBLE+5
         MVC   54(5,R6),=X'A38785A3A2'      C'TGETS'
         ICM   R1,15,84(R2)         NUMBER OF TRANSACTIONS
         CVD   R1,DOUBLE
         MVC   61(5,R6),ED5
         ED    60(6,R6),DOUBLE+5
         MVC   67(6,R6),=X'A78183A395A2'    C'XACTNS'
         B     RTNREC
         DROP  R5                   LOGOFF
         SPACE
         LTORG
         SPACE 3
         USING DDYNAM,R5
DDYNAM   DS    0H                  SMF RECORD TYPE 40
         MVC   25(8,R6),14(R2)      JOB NAME
         CLI   39(R2),9             REPORTABLE FUNCTIONAL INDICATOR?
         BH    DDFUNCOK             NO
         MVC   3(1,R6),39(R2)       YES, SHOW IT AS SUBTYPE
         OI    3(R6),X'F0'          MAKE NUMERIC CHARACTER
DDFUNCOK SR    R7,R7
         ICM   R7,3,60(R2)          GET VARIABLE LENGTH
         BNP   RTNREC               IGNORE BAD DATA
         SRA   R7,3                 DIVIDE BY 8 FOR NUMBER OF ENTRIES
         BZ    RTNREC               HANDLE ZERO ENRIES
         CH    R7,=H'3'             MORE THAN 3 DEVICES?
         BNH   DALCOK               NO
         LA    R7,3                 YES, ONLY ROOM FOR 3
DALCOK   LA    R3,19(,R6)
         LA    R11,54(,R2)
DALCLOOP LA    R3,15(,R3)           NEXT MESSAGE LINE SLOT
         LA    R11,8(,R11)          NEXT SMF RECORD DEVICE ENTRY
         ICM   R1,15,4(R11)         EXCP COUNT
         CVD   R1,DOUBLE
         MVC   1(9,R3),ED9
         ED    0(10,R3),DOUBLE+3
         MVC   11(3,R3),=C'VIO'
         TM    0(R2),X'06'          OS/VS2 MVS/XA OR LATER?
         BO    VIOXA040             YES, USE THE XA VIO TEST
         CLC   =X'00000FFF',0(R11)  IS IT VIO?
         BE    DALCVIO              YES
VIOXA040 CLC   =X'00007FFF',0(R11)  IS IT VIO? (XA)
         BE    DALCVIO              YES
         MVC   DOUBLE(2),2(R11)     (4-CHAR ADDRESS REPORTED)
         BAL   R14,CONV
         MVC   11(4,R3),DOUBLE
         CLI   11(R3),C'0'          LEADING ZERO?
         BNE   DALCVIO              NO
         MVI   11(R3),C' '          YES, SUPPRESS IT
DALCVIO  DS    0H
         BCT   R7,DALCLOOP
         B     RTNREC
         DROP  R5                   DDYNAM
         SPACE
         LTORG
         SPACE 3
         USING DIVVLF,R5
DIVVLF   DS    0H                  SMF RECORD TYPE 41
         LA    R0,4
         LR    R15,R2               POINT TO SMF FLAG BYTE
         SLR   R15,R0               POINT TO RDW
         CLM   R0,3,22(R15)         SUBTYPE LESS THAN 4?
         BNH   PUTSUB               NO, REJECT UNEXPECTED FORMAT
         CLC   =H'1',34(R15)        ONE PRODUCT SECTION PRESENT?
         BNE   UNUSED               NO, REJECT UNEXPECTED FORMAT
         MVC   3(1,R6),23(R15)      SHOW SUBTYPE
         OI    3(R6),X'F0'          MAKE NUMERIC CHARACTER
         CLI   23(R15),3            SUBTYPE 3?
         BE    VLFREC               YES, VLF STATISTICS RECORD
         CLC   =H'1',42(R15)        OBJECT ACCESS SECTION PRESENT?
         BNE   UNUSED               NO, REJECT UNEXPECTED FORMAT
         ICM   R7,15,36(R15)        YES, GET ITS OFFSET
         ALR   R7,R15               POINT TO IT
         MVC   25(8,R6),18(R7)      SHOW JOB NAME
         MVC   34(8,R6),0(R7)       SHOW OBJECT DDNAME
         MVC   43(19,R6),MSG41ACC
         CLI   17(R7),1             READ ACCESS MODE?
         BE    DIVACCOK             YES
         MVC   58(6,R6),=X'E4978481A385' C'UPDATE'
         CLI   17(R7),2             UPDATE ACCESS MODE?
         BE    DIVACCOK             YES
         MVC   58(7,R6),=X'A495929596A695' C'UNKNOWN'
DIVACCOK CLC   =H'1',58(R15)        I/O ACTIVITY SECTION PRESENT?
         BNE   RTNREC               NO, PROBABLY SUBTYPE 1
         ICM   R7,15,52(R15)        YES, GET ITS OFFSET
         ALR   R7,R15               POINT TO IT
         ICM   R0,15,0(R7)          GET TOTAL READS
         CVD   R0,DOUBLE
         MVC   43(9,R6),ED9
         ED    42(10,R6),DOUBLE+3   C' TOTAL READS '
         MVC   52(13,R6),=X'40E396A3819340D9858184A240'
         ICM   R0,15,4(R7)          GET TOTAL WRITES
         CVD   R0,DOUBLE
         MVC   65(9,R6),ED9
         ED    64(10,R6),DOUBLE+3   C' WRTS '
         MVC   74(6,R6),=X'40E699A3A240'
         B     RTNREC
         SPACE
VLFREC   ICM   R7,15,28(R15)        GET PRODUCT SECTION OFFSET
         ALR   R7,R15               POINT TO PRODUCT SECTION
         MVC   25(4,R6),8(R7)       COPY PRODUCT NAME ('VLF ')
         ICM   R7,15,60(R15)        GET THE OFFSET TO THE VLF SECTION
         BNP   RTNREC               REJECT UNEXPECTED FORMAT
         ALR   R7,R15               POINT TO THE FIRST VLF SECTION
         SLR   R1,R1
         ICM   R1,3,66(R15)         GET THE NUMBER OF VLF SECTIONS
         BNP   RTNREC               REJECT UNEXPECTED FORMAT
         SLR   R4,R4
         ICM   R4,3,64(R15)         GET THE VLF SECTION LENGTH
         BNP   RTNREC               REJECT UNEXPECTED FORMAT
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         BZ    RIGHTMSG             JUST SHOW MESSAGE AT LEFT MAX
VLFLOOP  CH    R0,=H'4'             LOOKING FOR VLF DATA?
         BNH   VLFDATA              YES
         SH    R0,=H'4'             NO, NOT YET ANYWAY
         ALR   R7,R4                POINT TO NEXT VLF SECTION
         BCT   R1,VLFLOOP
         B     LEFTMSG              SCROLLED TOO FAR RIGHT FOR ANY DATA
VLFDATA  LR    R8,R0                YES, SAVE THE ANSWER
         LA    R1,VLFLABLS-30       POINT TO LABELS
VLFLBLLP LA    R1,30(,R1)           POINT TO LABELS OF NEXT PAGE
         BCT   R0,VLFLBLLP
         BCTR  R8,0                 DECREMENT FOR INDEX
         SLL   R8,3
         LA    R8,8(R8,R7)          POINT TO COUNTERS
         ICM   R0,15,0(R8)          LOAD LEFT COUNTER
         CVD   R0,DOUBLE
         MVC   30(9,R6),ED9         LOAD LEFT EDIT MASK
         ED    29(10,R6),DOUBLE+3
         ICM   R0,15,4(R8)          LOAD RIGHT COUNTER
         CVD   R0,DOUBLE
         MVC   55(9,R6),ED9         LOAD RIGHT EDIT MASK
         ED    54(10,R6),DOUBLE+3
         MVC   40(15,R6),0(R1)      LOAD LEFT COUNTER LABEL
         MVC   65(15,R6),15(R1)     LOAD RIGHT COUNTER LABEL
         CLI   33(R6),C' '          ROOM FOR VLF CLASS NAME?
         BNE   RTNREC               NO, SO LINE NOW FINISHED
         MVC   25(8,R6),0(R7)       YES, SO SHOW IT
         B     RTNREC               PROCESSING SUCCESSFULLY COMPLETED
         DROP  R5                   DIVVLF
         SPACE
VLFLABLS DS    0C                                          PG
*                                   VLF STATISTICS COUNTERS
*        DC    CL15'MAXVIRT PAGES  ',CL15'CRNT VIRT PAGES'  1
         DC    XL15'D4C1E7E5C9D9E34097818785A24040'
         DC    XL15'C39995A340E58999A34097818785A2'
*        DC    CL15'CACHE SEARCHES ',CL15'OBJECTS FOUND  '  2
         DC    XL15'C38183888540E2858199838885A240'
         DC    XL15'D682918583A3A240C696A495844040'
*        DC    CL15'OBJECTS ADDED  ',CL15'OBJECTS DELETED'  3
         DC    XL15'D682918583A3A240C1848485844040'
         DC    XL15'D682918583A3A240C4859385A38584'
*        DC    CL15'OBJECTS TRIMMED',CL15'LRGST OBJ ATMPT'  4
         DC    XL15'D682918583A3A240E3998994948584'
         DC    XL15'D39987A2A340D6829140C1A39497A3'
*        DC    CL19'ACCESS MODE IS READ'
MSG41ACC DC    XL19'C1838385A2A240949684854089A240D9858184'
         LTORG
         SPACE 3
         USING DFSMS,R5
DFSMS    DS    0H                  SMF RECORD TYPE 42
         CLC   =H'3',18(R2)         SUBTYPE 3?
         BE    DFSMS3               YES
         CLC   =H'6',18(R2)         SUBTYPE 6?
         BE    DFSMS6               YES
         B     PUTSUB               JUST SHOW SUBTYPE
DFSMS3   MVI   3(R6),C'3'           SHOW SUBTYPE
         ICM   R8,3,42(R15)         ANY EVENT AUDIT SECTIONS?
         BZ    RTNREC               NO
         ICM   R7,15,36(R15)        GET OFFSET OF EVENT AUDIT SECTION
         ALR   R7,R15               POINT TO EVENT AUDIT SECTION
         MVC   25(8,R6),0(R7)       NAME THE ACTION
         CLI   0(R7),C'A'           ACTIVATE?
         BE    SMS3ACT              YES
         CLI   0(R7),C'E'           ENF?
         BE    SMS3ENF              YES
         CLI   0(R7),C'V'           VARY SMS?
         BE    SMS3VARY             YES
         B     RTNREC               UNKNOWN
SMS3ACT  MVC   34(44,R6),104(R7)    NAME THE SOURCE CONTROL DATA SET
         B     RTNREC               UNKNOWN
SMS3ENF  OC    34(4,R6),20(R7)      VOLUME SERIAL NUMBER
         CLI   28(R7),5             KNOWN VALUE?
         BH    RTNREC               NO
         CLI   29(R7),5             KNOWN VALUE?
         BH    RTNREC               NO
         SLR   R1,R1
         IC    R1,28(,R7)           OLD VOLUME STATUS
         SLL   R1,4                 MULTIPLY BY 16 FOR INDEX
         LA    R1,ENFVTAB(R1)
         MVC   44(16,R6),0(R1)
         MVC   61(2,R6),=C'->'
         SLR   R1,R1
         IC    R1,29(,R7)           NEW VOLUME STATUS
         SLL   R1,4                 MULTIPLY BY 16 FOR INDEX
         LA    R1,ENFVTAB(R1)
         MVC   64(16,R6),0(R1)
         B     RTNREC
SMS3VARY MVC   34(8,R6),32(R7)      SHOW VARY TYPE
         CLI   32(R7),C'V'          VOLUME?
         BE    SMS3VOL              YES
         MVC   43(30,R6),42(R7)     SHOW STOGRP, LIBRARY, DRIVE NAME
         MVC   68(12,R6),88(R7)     SHOW NEW STATUS
SMS3VOL  MVC   43(6,R6),72(R7)      VOLUME SERIAL NUMBER
         MVC   50(12,R6),88(R7)     SHOW NEW STATUS
         B     RTNREC
DFSMS6   MVI   3(R6),C'6'           SHOW SUBTYPE
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LA    R8,4
         LR    R15,R2               POINT TO SMF RECORD FLAG BYTE
         SLR   R15,R8               POINT TO SMF RECORD RDW
         ICM   R8,3,42(R15)         ANY JOB HEADERS?
         BZ    RTNREC               NO
         ICM   R7,15,36(R15)        GET OFFSET OF JOB HEADER
         ALR   R7,R15               POINT TO JOB HEADER
         MVC   25(8,R6),0(R7)       JOB NAME
         LTR   R0,R0                ON FIRST PAGE?
         BP    SMS6RITE             NO
         MVC   40(40,R6),MSGRIGHT   SUGGEST SCROLLING RIGHT
SMS6TYPE MVC   34(5,R6),=C'CLOSE'
         CLI   30(R7),0             CLOSE RECORD?
         BE    RTNREC               YES
         MVC   34(5,R6),=C'INTVL'   NO, SMF INTERVAL RECORD
         B     RTNREC
SMS6LEFT MVC   40(40,R6),MSGLEFT    SUGGEST SCROLLING LEFT
         B     SMS6TYPE
SMS6RITE LR    R1,R0                COPY PAGE NUMBER
         BCTR  R1,0                 MAKE RELATIVE TO DATA DISPLAY
         SLR   R0,R0
         D     R0,=F'14'            GET "LOGICAL" PAGE NUMBER
         ICM   R7,15,24(R7)         FIRST DATA SET HEADER OFFSET
         BNP   RTNREC               HANDLE BAD OFFSET
         ALR   R7,R15               POINT TO FIRST DATA SET HEADER
         LTR   R1,R1                PROCESS FIRST DATA SET?
         BNP   SMS6DSOK             YES
SMS6DSLP ICM   R7,15,0(R7)          NEXT DATA SET HEADER OFFSET
         BNP   LEFTMSG              GONE PAST END OF RECORD DATA
         ALR   R7,R15               POINT TO DATA SET HEADER
         BCT   R1,SMS6DSLP
SMS6DSOK LTR   R1,R0                GET PAGE WITHIN DATA SET DETAILS
         BZ    SMS6PG1              DO FIRST PAGE
         CH    R1,=H'8'             PAST PAGE 8?
         BNL   SMS6AMSS             YES, SHOW CACHE DETAILS
         BCT   R1,SMS6INDX          NO, DECREMENT AND USE BRANCH TABLE
         B     SMS6PG2              DO SECOND PAGE
SMS6NOIO MVC   40(40,R6),SMS6NIOM   INDICATE SECTION NOT PRESENT
         B     RTNREC
SMS6INDX ICM   R7,15,52(R7)         I/O STATISTICS SECTION OFFSET
         BNP   SMS6NOIO             HANDLE MISSING SECTION
         ALR   R7,R15               POINT TO I/O STATISTICS SECTION
         SLL   R1,2                 MULTIPLY BY FOUR FOR INDEX
SMS6BRIO B     SMS6BRIO(R1)
         B     SMS6PG3
         B     SMS6PG4
         B     SMS6PG5
         B     SMS6PG6
         B     SMS6PG7
         B     SMS6PG8
SMS6PG1  MVC   34(44,R6),4(R7)      DATA SET NAME
         MVC   78(2,R6),MSGRIGHT+38
         B     RTNREC
SMS6PG2  SLR   R1,R1
         IC    R1,48(,R7)           DATA SET TYPE
         CH    R1,=H'23'            TYPE MORE THAN 23?
         BNH   *+8                  NO
         LH    R1,=H'23'            YES, REDUCE IT
         CH    R1,=H'16'            TYPE LESS THAN 16?
         BL    *+8                  YES
         SH    R1,=H'8'             NO, ADJUST FOR TABLE LOOK-UP
         SLL   R1,2                 MULTIPLY BY FOUR FOR INDEX
         LA    R1,SMS6AMTB(R1)
         MVC   34(4,R6),0(R1)       LABEL DATA SET TYPE
         MVC   39(4,R6),=C'DEV='
         MVC   DOUBLE(2),66(R7)     DEVICE NUMBER
         BAL   R14,CONV
         MVC   43(4,R6),DOUBLE
         MVI   47(R6),C'-'
         MVC   48(6,R6),60(R7)      VOLUME SERIAL NUMBER
         CLI   68(R7),0             NULL STORAGE CLASS?
         BE    RTNREC               YES, NOT SMS-MANAGED
         MVC   67(3,R6),=C'SC='
         MVC   71(8,R6),68(R7)      STORAGE CLASS
         B     RTNREC
SMS6PG3  ICM   R1,15,4(R7)          AVERAGE I/O CONNECT TIME
         LA    R8,33(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSCMB           SHOW MILLSECONDS PER I/O
         MVI   4(R8),X'83'          C'C' FOR CONNECT
         MVI   6(R8),C'+'
         ICM   R1,15,12(R7)         AVERAGE I/O DISCONNECT TIME
         LA    R8,40(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSCMB           SHOW MILLSECONDS PER I/O
         MVI   4(R8),X'84'          C'D' FOR DISCONNECT
         MVI   6(R8),C'+'
         ICM   R1,15,8(R7)          AVERAGE I/O PENDING TIME
         LA    R8,47(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSCMB           SHOW MILLSECONDS PER I/O
         MVI   4(R8),X'97'          C'P' FOR PENDING
         MVI   6(R8),C'+'
         ICM   R1,15,16(R7)         AVERAGE I/O CONTROL UNIT QUEUE TIME
         LA    R8,54(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSCMB           SHOW MILLSECONDS PER I/O
         MVC   4(3,R8),=X'83A498'   C'CUQ' FOR CONTROL UNIT QUEUE
         MVI   8(R8),C'='
SMS6RESP ICM   R1,15,0(R7)          AVERAGE I/O RESPONSE TIME
         LA    R8,62(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSCMB           SHOW MILLSECONDS PER I/O
         MVC   4(10,R8),=X'94A2409985A297618996'  C'MS RESP/IO'
         B     RTNREC
SMS6PG4  ICM   R1,15,20(R7)         GET TOTAL NUMBER OF I/OS
         CVD   R1,DOUBLE
         MVC   34(15,R6),ED15
         ED    33(16,R6),DOUBLE
         MVC   50(4,R6),=X'C961D6A2' C'I/OS'
         B     SMS6RESP
SMS6PG5  ICM   R1,15,24(R7)         NUMBER OF CACHE CANDIDATES
         LA    R8,34(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         MVC   9(10,R8),=X'C3819584898481A385A2'   C'CANDIDATES'
         ICM   R1,15,28(R7)         NUMBER OF CACHE HITS
         LA    R8,58(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         MVC   9(10,R8),=X'C381838885408889A3A2'   C'CACHE HITS'
         B     RTNREC
SMS6PG6  ICM   R1,15,32(R7)         NUMBER OF WRITE CANDIDATES
         LA    R8,34(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         MVC   9(10,R8),=X'C3819584898481A385A2'   C'CANDIDATES'
         ICM   R1,15,36(R7)         NUMBER OF WRITE HITS
         LA    R8,58(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         MVC   9(10,R8),=X'A69989A385408889A3A2'   C'WRITE HITS'
         B     RTNREC
SMS6PG7  ICM   R1,15,40(R7)         NUMBER OF SEQUENTIAL I/OS
         LA    R8,34(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         MVC   9(9,R8),=X'E285984B40C961D6A2'   C'SEQ. I/OS'
         ICM   R1,15,44(R7)         RECORD LEVEL CACHE I/OS
         LA    R8,58(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         MVC   9(13,R8),=X'D985834093A594408381838885' C'REC LVL CACHE'
         B     RTNREC
SMS6PG8  ICM   R1,15,48(R7)         NUMBER OF INHIBIT CACHE LOAD I/OS
         LA    R8,34(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         MVC   9(14,R8),=X'C995888982408381838885409384'
*                                   C'INHIB CACHE LD'
         B     RTNREC
SMS6AMSS ICM   R7,15,56(R7)         ACCESS METHOD STATISTICS SECTION
         ALR   R7,R15               POINT TO IT
         SH    R1,=H'8'             CONVERT 8-13 TO 0-5
         SLL   R1,3                 MULTIPLY BY EIGHT FOR INDEX
         ALR   R7,R1                POINT TO STATS FOR THIS PAGE
         SLL   R1,1                 DOUBLE INDEX
         LA    R1,SMS6IOTB(R1)      POINT TO I/O TYPE LABEL
         MVC   43(16,R6),0(R1)      SHOW I/O TYPE
         ICM   R1,15,0(R7)
         LA    R8,34(,R6)           POINT TO DISPLAY AREA
         BAL   R14,SMSED7           SHOW I/O COUNT
         LTR   R1,R1                ANY I/O IN THIS CATEGORY?
         BNP   RTNREC               NO
         ICM   R15,15,4(R7)         GET TOTAL DELAY
         BNP   RTNREC               NO DELAY MEASURED
         SLR   R14,R14
         SLDL  R14,7                CONVERT TO MICROSECONDS
         D     R14,=F'1000'         CONVERT TO MILLISECONDS
         SLR   R14,R14
         DR    R14,R1               CONVERT TO MILLISECONDS PER I/O
         CVD   R15,DOUBLE
         MVC   61(3,R6),ED3
         ED    60(4,R6),DOUBLE+6
         MVC   65(11,R6),=X'94A24084859381A8618996'   C'MS DELAY/IO'
         B     RTNREC
SMSCMB   SLR   R0,R0                PROCESS CMB ACTIVITY TIME
         SLDL  R0,7                 CONVERT TO MICROSECONDS
         D     R0,=F'1000'          GET MILLISECONDS PER I/O
         CVD   R1,DOUBLE
         MVC   1(3,R8),ED3
         ED    0(4,R8),DOUBLE+6
         BR    R14
SMSED7   CVD   R1,DOUBLE
         MVC   1(7,R8),ED7
         ED    0(8,R8),DOUBLE+4
         BR    R14
         DROP  R5                   DFSMS
         SPACE
ENFVTAB  DS    0H
         DC    CL16' UNKNOWN STATUS '
         DC    CL16'     ONLINE     '
         DC    CL16'    OFFLINE     '
         DC    CL16'PENDING OFFLINE '
         DC    CL16'     BOXED      '
         DC    CL16'   NOT READY    '
SMS6AMTB DC    C'OTHRPS  PDS PDSEDA  ISAMEXCPPS-E'   TYPES 00 TO 07
         DC    C'DATAINDXVRRDVRRIRRDSLDS ESDS'       TYPES 16 TO 22
         DC    X'A4959295'          C'UNKN'
SMS6IOTB DS    0H
*        DC    CL16'SEQ. READ BLOCKS'
         DC    XL16'E285984B4099858184408293968392A2'
*        DC    CL16'SEQ. WRITE BLKS '
         DC    XL16'E285984B40A69989A38540829392A240'
*        DC    CL16'DIRECT RD BLOCKS'
         DC    XL16'C489998583A3409984408293968392A2'
*        DC    CL16'DIRECT WRT BLKS '
         DC    XL16'C489998583A340A699A340829392A240'
*        DC    CL16'DIRECTORY READS '
         DC    XL16'C489998583A39699A84099858184A240'
*        DC    CL16'DIRECTORY WRITES'
         DC    XL16'C489998583A39699A840A69989A385A2'
SMS6NIOM DS    0CL40
*        DC    CL40'MISSING DATA SET I/O STATISTICS SECTION!'
         DC    XL20'D489A2A289958740C481A38140E285A340C961D6'
         DC    XL20'40E2A381A389A2A38983A240E28583A38996955A'
         LTORG
         SPACE 3
         USING JES2ST,R5
JES2ST   DS    0H                  SMF RECORD TYPE 43
         MVC   25(17,R6),MSG043A
         CLI   15(R2),X'05'         JES3?
         BNE   JES2S                NO
         MVC   25(4,R6),34(R2)      YES, SUPPLY ACTUAL PROCEDURE NAME
         TM    22(R2),X'40'         WARM START?
         BO    RTNREC               YES
         MVC   30(4,R6),=X'83969384'   C'COLD'
         TM    22(R2),X'80'         COLD START?
         BO    RTNREC               YES
         MVC   30(4,R6),=X'408896A3'   C' HOT'
         TM    22(R2),X'20'         HOT START?
         BO    RTNREC               YES
         MVC   30(4,R6),=X'83969693'   C'COOL'       (SARKY FOR DUNNO)
         B     RTNREC
JES2S    TM    22(R2),X'80'         $E SYS?
         BZ    SJ2                  NO
         MVC   25(13,R6),=C'$E SYS,RESET='
         MVC   38(4,R6),24(R2)      RESET SID
         B     RTNREC
SJ2      TM    23(R2),X'40'         COLD START?
         BZ    RTNREC               NO
         MVC   30(4,R6),=X'83969384'   C'COLD'
         TM    23(R2),X'80'         SPOOL FORMATED
         BZ    RTNREC               NO
         MVC   43(21,R6),MSG043B
         B     RTNREC
         DROP  R5                   JES2ST
         SPACE
*        DC    C'JES2 WARM STARTED'
MSG043A  DC    C'JES2 ',X'A681999440A2A38199A38584'
*        DC    C'- SPOOL WAS FORMATTED'
MSG043B  DC    C'- SPOOL ',X'A681A2408696999481A3A38584'
         LTORG
         SPACE 3
         USING JESTOP,R5
JESTOP   DS    0H                  SMF RECORD TYPE 45
         MVC   25(14,R6),MSG045
         CLI   15(R2),X'05'         JES3?
         BNE   JES2P                NO
         MVI   28(R6),C'3'          YES
JES2P    TM    20(R2),X'80'         ABENDED?
         BZ    RTNREC               NO
         MVC   30(9,R6),=X'818285958485844060'       C'ABENDED -'
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,22(R2)          GET RC/CC
         LA    R15,40(,R6)          POINT TO 'ABENDED' AREA
         BAL   R14,CCRCABND         COMPUTE RC/CC
         B     RTNREC
         DROP  R5                   JESTOP
         SPACE
*        DC    C'JES2 WITHDRAWN'
MSG045   DC    C'JES2 ',X'A689A388849981A695'
         LTORG
         SPACE 3
         USING RJEON,R5
RJEON    DS    0H                  SMF RECORD TYPE 47
         OC    25(8,R6),24(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),32(R2)      LINE NAME
         MVC   43(8,R6),40(R2)      PASSWORD
         MVC   52(10,R6),=X'9389958540A2A38199A3'  C'LINE START'
         TM    21(R2),X'02'         START LINE?
         BO    RTNREC               YES
         MVC   52(10,R6),=X'D9D1C540A28987959695'  C'RJE SIGNON'
         B     RTNREC
         DROP  R5                   RJEON
         SPACE
         LTORG
         SPACE 3
         USING RJEOFF,R5
RJEOFF   DS    0H                  SMF RECORD TYPE 48
         OC    25(8,R6),24(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),32(R2)      LINE NAME
         MVC   43(12,R6),=X'9389958540A2A39697978584' C'LINE STOPPED'
         TM    21(R2),X'02'         STOP LINE?
         BO    RJEEXCP              YES
         MVC   43(12,R6),=X'D9D1C540A289879596868640' C'RJE SIGNOFF '
RJEEXCP  MVC   56(3,R6),68(R2)      UCB NAME
         ICM   R1,15,48(R2)         EXCP COUNT
         CVD   R1,DOUBLE
         MVC   61(11,R6),ED11
         ED    60(12,R6),DOUBLE+2
         B     RTNREC
         DROP  R5                   RJEOFF
         SPACE
         LTORG
         SPACE 3
         USING RJEINT,R5
RJEINT   DS    0H                  SMF RECORD TYPE 49
         OC    25(8,R6),24(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),32(R2)      LINE NAME
         MVC   43(8,R6),40(R2)      INVALID PASSWORD
         MVC   52(36,R6),50(R2)     MESSAGE TEXT
         B     RTNREC
         DROP  R5                   RJEINT
         SPACE
         LTORG
         SPACE 3
         USING ACFTUN,R5
ACFTUN   DS    0H                  SMF RECORD TYPE 50
         MVC   25(8,R6),14(R2)      INTELLIGENCE CONTROLLER NAME
         LR    R15,R2               COPY RECORD ADDRESS
         L     R1,16                POINT TO THE CVT
         CLI   116(R1),X'12'        OSIV/F4?
         BNE   REC50OK              NO, SHOULD BE SOME SORT OF MVS
         LA    R15,2(,R15)          YES, ADJUST BASE FOR VTAM-G OFFSETS
*                                   (FULLWORD ALIGNMENT BY FUJITSU)
REC50OK  ICM   R1,15,26(R15)        NUMBER OF WRITE CHANNEL PROGRAMS
         CVD   R1,DOUBLE
         MVC   35(7,R6),ED7
         ED    34(8,R6),DOUBLE+4
         MVC   43(2,R6),=X'A699'    C'WR'
         ICM   R1,15,30(R15)        NUMBER OF READ CHANNEL PROGRAMS
         CVD   R1,DOUBLE
         MVC   46(7,R6),ED7
         ED    45(8,R6),DOUBLE+4
         MVC   54(2,R6),=X'9984'    C'RD'
         ICM   R1,15,34(R15)        NUMBER OF ATTENTIONS RECEIVED
         CVD   R1,DOUBLE
         MVC   57(7,R6),ED7
         ED    56(8,R6),DOUBLE+4
         MVC   65(4,R6),=X'81A3A395'  C'ATTN'
         ICM   R1,15,54(R15)        NCP SLOWDOWN COUNT
         CVD   R1,DOUBLE
         MVC   70(3,R6),ED3
         ED    69(4,R6),DOUBLE+5
         MVC   74(6,R6),=X'A29396A68495' C'SLOWDN'
         B     RTNREC
         DROP  R5                   ACFTUN
         SPACE
         LTORG
         SPACE 3
         USING SNAON,R5
SNAON    DS    0H                  SMF RECORD TYPE 52
         OC    25(8,R6),34(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),42(R2)      LINE NAME
         MVC   43(8,R6),50(R2)      LINE PASSWORD
         MVC   52(10,R6),=X'9389958540A2A38199A3'  C'LINE START'
         TM    27(R2),X'02'         START LINE?
         BO    RTNREC               YES
         MVC   52(10,R6),=X'E2D5C140939687969540'  C'SNA LOGON '
         B     RTNREC
         DROP  R5                   SNAON
         SPACE
         LTORG
         SPACE 3
         USING SNAOFF,R5
SNAOFF   DS    0H                  SMF RECORD TYPE 53
         OC    25(8,R6),34(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),42(R2)      LINE NAME
         MVC   43(12,R6),=X'9389958540A2A39697978584' C'LINE STOPPED'
         TM    27(R2),X'02'         STOP LINE?
         BO    SNAVTAM              YES
         MVC   43(12,R6),=X'E2D5C1409396879686864040' C'SNA LOGOFF  '
SNAVTAM  MVC   56(3,R6),78(R2)      SNA NAME
         ICM   R1,15,58(R2)         VTAM REQUESTS PROCESSED
         CVD   R1,DOUBLE
         MVC   61(11,R6),ED11
         ED    60(12,R6),DOUBLE+2
         B     RTNREC
         DROP  R5                   SNAOFF
         SPACE
         LTORG
         SPACE 3
         USING SNAINT,R5
SNAINT   DS    0H                  SMF RECORD TYPE 54
         OC    25(8,R6),34(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),42(R2)      LINE NAME
         MVC   43(8,R6),50(R2)      LINE PASSWORD
         B     RTNREC
         DROP  R5                   SNAINT
         SPACE
         LTORG
         SPACE 3
         USING NJEREC,R5
NJEREC   DS    0H                  SMF RECORD TYPE 55, 56 AND 58
         MVC   25(8,R6),20(R2)      NODE NAME
         SLR   R1,R1
         IC    R1,28(R2)            GET THE MEMBER NUMBER
         CVD   R1,DOUBLE
         MVI   33(R6),C'.'
         MVC   34(3,R6),ED3
         ED    33(4,R6),DOUBLE+6
NJEMEMBL CLI   34(R6),C'.'          EXCESS PERIOD?
         BNE   NJEMEMOK             NO
         MVC   34(3,R6),35(R6)      YES, SHUFFLE UP
         B     NJEMEMBL
NJEMEMOK MVC   39(2,R6),=X'9695'    C'ON'
         MVC   52(10,R6),=X'D5D1C540A28987959695'  C'NJE SIGNON'
         CLI   1(R2),58             NJE SIGNOFF RECORD?
         BE    NJEOFF               YES
         MVC   42(8,R6),46(R2)      LINE NAME
         MVC   63(9,R6),=X'4D899589A38981935D'     C'(INITIAL)'
         TM    29(R2),X'80'         RESPONSE SIGN-ON?
         BZ    NJEINT               NO, INITIAL IS CORRECT
         MVC   63(10,R6),=X'4D9985A2979695A2855D'  C'(RESPONSE)'
NJEINT   CLI   1(R2),56             NJE INTEGRITY RECORD?
         BNE   RTNREC               NO, MUST BE A SIGNON RECORD
         MVC   74(6,R6),=C'BAD PW'  YES
         B     RTNREC
NJEOFF   MVC   61(2,R6),=X'8686'    C'FF'
         MVC   42(8,R6),30(R2)      LINE NAME
         B     RTNREC
         DROP  R5                   NJEREC
         SPACE
         LTORG
         SPACE 3
         USING NJEOUT,R5
NJEOUT   DS    0H                  SMF RECORD TYPE 57
         CLI   15(R2),2             JES2 SMF RECORD?
         BNE   RTNREC               NO
         MVC   25(8,R6),20(R2)      ORIGINAL JOB IDENTIFICATION
         MVC   34(8,R6),36(R2)      ORIGINAL NODE NAME
         LA    R15,41(,R6)
NJEBLLP1 CLI   0(R15),C' '          TRAILING BLANK?
         BNE   NJEAROW1             NO
         BCTR  R15,0                YES, BACK-UP ONE
         B     NJEBLLP1
NJEAROW1 MVC   1(2,R15),=C'->'      INDICATE SYSOUT FLOW
         CLC   36(8,R2),44(R2)      ON ORIGINAL NODE?
         BE    NJENXTND             YES, JUST SHOW NEXT NODE
         MVC   3(8,R15),44(R2)      NO, SHOW THIS NODE'S NAME
         LA    R15,9(,R15)
NJEBLLP2 CLI   0(R15),C' '          TRAILING BLANK?
         BNE   NJEAROW2             NO
         BCTR  R15,0                YES, BACK-UP ONE
         B     NJEBLLP2
NJEAROW2 MVC   1(2,R15),=C'->'      INDICATE SYSOUT FLOW
NJENXTND MVC   3(8,R15),52(R2)      NEXT NODE NAME
         MVC   63(2,R6),=X'9695'    C'ON'
         ICM   R1,15,96(R2)         GET LOGICAL TP RECORD COUNT
         CVD   R1,DOUBLE            YES
         MVC   73(7,R6),ED7
         ED    72(8,R6),DOUBLE+4
         MVC   66(8,R6),60(R2)      SYSOUT TRANSMITTER DEVICE NAME
         B     RTNREC
         DROP  R5                   NJEOUT
         SPACE
         LTORG
         SPACE 3
         USING VSMVDS,R5
VSMVDS   DS    0H                  SMF RECORD TYPE 60
         MVC   25(8,R6),46(R2)      JOB NAME
         OC    34(36,R6),116(R2)    ENTRY NAME         (SUPPRESS NULLS)
         MVI   70(R6),C'('
         MVC   71(2,R6),18(R2)      INDICATE INSERT, UPDATE OR DELETE
         MVI   73(R6),C')'
         MVC   74(6,R6),82(R2)      VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   VSMVDS
         SPACE
         LTORG
         SPACE 3
         USING ICFACT,R5
ICFACT   DS    0H                  SMF RECORD TYPES 61, 65 AND 66
         MVC   25(8,R6),46(R2)      JOB NAME
         MVC   34(36,R6),116(R2)    ENTRY NAME
         MVI   70(R6),C'('
         MVC   71(2,R6),18(R2)      INDICATE INSERT, UPDATE OR DELETE
         MVI   73(R6),C')'
         MVI   78(R6),C'-'          INDICATE TYPE RELATED TO NAME
         MVC   79(1,R6),115(R2)     ENTRY TYPE
         CLI   1(R2),65             TYPE 65 RECORD?
         BNE   RTNREC               NO
         MVC   3(1,R6),70(R2)       YES, SHOW SCRATCH/UNCATALOG FLAG
         B     RTNREC
         DROP  R5                   ICFACT
         SPACE
         LTORG
         SPACE 3
         USING VSMOPN,R5
VSMOPN   DS    0H                  SMF RECORD TYPE 62
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(40,R6),92(R2)     COMPONENT OR CLUSTER NAME
         MVC   74(6,R6),138(R2)     FIRST VOLUME SERIAL NUMBER
         LA    R15,VSMSITU          LOAD SITUATION ROUTINE ADDRESS
         CLI   34(R6),C' '          DISPLAYABLE CLUSTER NAME?
         BHR   R15                  YES, GO EXECUTE ROUTINE
         MVC   34(40,R6),42(R2)     NO, SHOW CATALOG NAME
         BR    R15                  GO EXECUTE ROUTINE
         DROP  R5                   VSMOPN
         SPACE
         LTORG
         SPACE 3
         USING VSMDEF,R5
VSMDEF   DS    0H                  SMF RECORD TYPE 63
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),88(R2)     COMPONENT OR CLUSTER NAME
         LA    R15,VSMSITU          LOAD SITUATION ROUTINE ADDRESS
         BR    R15                  GO EXECUTE IT
         DROP  R5                   VSMDEF
         SPACE
         LTORG
         SPACE 3
         USING VSMUSE,R5
VSMUSE   DS    0H                  SMF RECORD TYPE 64
         MVC   25(8,R6),14(R2)      JOB NAME
         TM    38(R2),X'40'         END-OF-VOLUME?
         BZ    VSEORC               NO, RECORD CREATED BY CLOSE
         MVI   12(R6),X'85'   C'E'  YES, FLAG THIS
         MVI   19(R6),X'96'   C'O'
         MVI   24(R6),X'A5'   C'V'
VSEORC   SLR   R1,R1
         ICM   R1,3,134(R2)         GET EXTENT SECTION LENGTH
         LA    R15,136(R1,R2)       POINT TO STATISTICS SECTION
         ICM   R1,15,88(R15)        GET THE EXCP CHANGE
         LPR   R1,R1                ENSURE NUMBER IS POSITIVE
         CVD   R1,DOUBLE
         CLI   144(R2),C' '         VOLUME SERIAL NUMBER BLANK?
         BNE   GETVSV               NO, SHOW FIRST VOLUME SERIAL NUMBER
         MVC   69(11,R6),ED11
         LA    R1,79(,R6)
         EDMK  68(12,R6),DOUBLE+2
         B     VSMCUT
GETVSV   MVC   74(6,R6),144(R2)     FIRST VOLUME SERIAL NUMBER
         MVC   62(11,R6),ED11
         LA    R1,72(,R6)
         EDMK  61(12,R6),DOUBLE+2
VSMCUT   BCTR  R1,0                 POINT TO BEHIND FIRST DIGIT
         LA    R0,34(,R6)           ADDRESS OF DSNAME START
         SR    R1,R0                GET LENGTH OF NAME THAT WILL FIT
         BCTR  R1,0                 LESS 1 FOR EXECUTE
         EX    R1,GETVSN
         CLC   52(6,R6),=CL9' '     ROOM FOR ACCESS METHOD NAME?
         BNE   VSBLSZ               NO, GO TRY FOR BLOCK SIZE
         MVC   53(4,R6),=C'VSAM'    NON-VSAM FORMAT COMPATIBILITY
VSBLSZ   ICM   R0,15,92(R15)        GET DATA SET BLOCK SIZE
         BZ    VSMUEX               ZERO SO DO NOT SHOW IT
         CLC   57(9,R6),=CL9' '     ROOM FOR BLOCK SIZE?
         BNE   VSMUEX               NO, END OF FORMATTING
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         MVC   58(2,R6),=C'B='
         UNPK  60(5,R6),DOUBLE+5(3)
VSBLK0   CLI   60(R6),C'0'          LEADING ZERO?
         BNE   VSMUEX               NO, END OF FORMATTING
         MVC   60(5,R6),61(R6)      YES, SUPPRESS IT
         B     VSBLK0
VSMUEX   LA    R15,VSMSITU          LOAD SITUATION ROUTINE ADDRESS
         BR    R15                  GO EXECUTE IT
GETVSN   OC    34(0,R6),84(R2)      DATA SET NAME <<<EXECUTED>>>
         DROP  R5                   VSMUSE
         SPACE
         LTORG
         SPACE 3
         USING VSMDEL,R5
VSMDEL   DS    0H                  SMF RECORD TYPE 67
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),84(R2)     COMPONENT OR CLUSTER NAME
         SLR   R0,R0
         IC    R0,38(,R2)           LOAD UNCAT/SCRATCH FLAGS
         SRL   R0,6                 JUST KEEP BITS 0 AND 1
         STC   R0,3(,R6)
         OI    3(R6),X'F0'          SHOW UNCAT/SCRATCH EVENTS
         MVI   78(R6),C'-'          INDICATE TYPE RELATED TO NAME
         ICM   R0,8,39(R2)          LOAD ENTRY TYPE FLAGS
         LA    R1,=CL8'CDIUABX?'    POINT TO FLAG LITERALS
         LA    R7,8                 GET MAXIMUM NUMBER OF BITS TO TEST
VSMDELLP LTR   R0,R0                IS TOP BIT ON?
         BM    VSMDELOK             YES
         SLL   R0,1                 NO, PROMOTE NEXT BIT
         LA    R1,1(,R1)            POINT TO NEXT HEXADECIMAL DIGIT
         BCT   R7,VSMDELLP          GO TEST IT
         B     RTNREC               RETURN WITHOUT INDICATION
VSMDELOK MVC   79(1,R6),0(R1)       SUPPLY CATALOG ENTRY TYPE
         B     RTNREC               RETURN WITH INDICATION DONE
         DROP  R5                   VSMDEL
         SPACE
         LTORG
         SPACE 3
         USING VSMREN,R5
VSMREN   DS    0H                  SMF RECORD TYPE 68
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),82(R2)     OLD COMPONENT OR CLUSTER NAME
         B     RTNREC
         DROP  R5                   VSMREN
         SPACE
         LTORG
         SPACE 3
         USING VSMSITU,R15
VSMSITU  DS    0H                  SHOW FIRST BIT ON IN SITUATION BYTE
         ICM   R0,12,38(R2)         LOAD SITUATION BYTES
         LA    R1,HEXCHARS          POINT TO HEXADECIMAL DIGITS
         LA    R7,16                GET MAXIMUM NUMBER OF BITS TO TEST
VSMSITLP LTR   R0,R0                IS TOP BIT ON?
         BM    VSMSITON             YES
         SLL   R0,1                 NO, PROMOTE NEXT BIT
         LA    R1,1(,R1)            POINT TO NEXT HEXADECIMAL DIGIT
         BCT   R7,VSMSITLP          GO TEST IT
         B     RTNREC               RETURN WITHOUT INDICATION
VSMSITON MVC   3(1,R6),0(R1)        SUPPLY BIT NUMBER
         B     RTNREC               RETURN WITH INDICATION DONE
         DROP  R15                  VSMSITU
         TITLE 'RMF RECORD TYPE SUBROUTINES'
         USING RMFCPU,R5
RMFCPU   DS    0H                  SMF RECORD TYPE 70
         CLI   19(R2),1             SUBTYPE 1?
         BNE   SUBREC               NO
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO CPU CONTROL SECTION
         ALR   R7,R15               POINT TO CPU CONTROL SECTION
         UNPK  29(5,R6),0(3,R7)     SHOW CPU MODEL NUMBER
         MVI   33(R6),C' '          ERASE GARBAGE
         LTR   R0,R8                RESTORE RELATIVE PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         ICM   R8,3,50(R15)         GET CPU DATA SECTION COUNT
         CR    R0,R8                COMPARE PAGE NUMBER SECTION COUNT
         BH    RMFPRSM              TOO FAR RIGHT SO CHECK FOR PR/SM
         ICM   R8,3,48(R15)         GET CPU DATA SECTION LENGTH
         ICM   R7,15,44(R15)        GET OFFSET TO FIRST CPU SECTION
         ALR   R7,R15               POINT TO FIRST CPU DATA SECTION
RMFCPULP ALR   R7,R8                POINT TO NEXT CPU DATA SECTION
         BCT   R0,RMFCPULP
         SLR   R7,R8                BACK UP ONE
         ICM   R8,15,16(R7)         GET I/O COUNT VIA I/O SLIH
         ICM   R9,15,20(R7)         GET I/O COUNT VIA TPI INSTRUCTION
         ALR   R9,R8                GET TOTAL I/O COUNT FOR THIS CP
         M     R8,=F'10000'
         DR    R8,R1                GET I/O RATE FOR THIS CP
         CVD   R9,DOUBLE
         MVC   51(7,R6),=X'40202021204B20'
         ED    51(7,R6),DOUBLE+5
         MVC   59(4,R6),=X'899661A2'   C'IO/S'
         ICM   R8,15,0(R7)          GET HIGH HALF OF CPU WAIT TIME
         ICM   R9,15,4(R7)          GET LOW HALF OF CPU WAIT TIME
         SRDL  R8,12                CONVERT TO MICROSECONDS
         DR    R8,R1                GET CPU WAIT PERMILLAGE
         LA    R8,1000
         SR    R8,R9                GET CPU BUSY PERMILLAGE
         CVD   R8,DOUBLE
         TM    0(R2),X'01'          PR/SM MACHINE?
         BZ    RMFUTIL              NO
         ICM   R9,15,28(R15)        YES, GET RMF PRODUCT SECTION OFFSET
         ALR   R9,R15               POINT TO IT
         SLR   R0,R0
         ICM   R0,1,50(R9)          GET PR/SM PARTITION NO. OF THIS MVS
         BZ    RMFUTIL              ZERO, BUT SHOULD NOT HAPPEN
         CLM   R0,3,66(R15)         ENOUGH PR/SM SECTIONS IN RECORD?
         BH    RMFUTIL              NO, BUT THERE ALWAYS SHOULD BE
         ICM   R9,15,60(R15)        GET OFFSET TO PR/SM PART DATA SECTN
         ALR   R9,R15               POINT TO IT
         ICM   R8,3,64(R15)         GET PR/SM PART. DATA SECTION LENGTH
RMFPARTN ALR   R9,R8                POINT TO NEXT PART. DATA SECTION
         BCT   R0,RMFPARTN
         SLR   R9,R8                BACK UP ONE
         MVC   72(8,R6),0(R9)       SHOW PR/SM PART'N NAME OF THIS MVS
RMFUTIL  MVC   37(13,R6),=X'402021204B20206C4082A4A2A8' C'% BUSY'
         ICM   R9,15,38(R6)
         STCM  R9,15,39(R6)         EDIT EDIT MASK AFTER LITERAL REUSE
         ED    37(7,R6),DOUBLE+5
         MVC   37(1,R6),9(R7)       GET CPU NUMBER
         NI    37(R6),X'0F'         ENSURE VALID RANGE
         TR    37(1,R6),HEXCHARS    MAKE PRINTABLE
         MVC   34(3,R6),=C'CP#'
         B     RTNREC
RMFPRSM  CLI   25(R15),6            AT LEAST SIX TRIPLETS?
         BL    LEFTMSG              NO, PRE-PR/SM RMF
         TM    0(R2),X'01'          PR/SM MACHINE?
         BZ    LEFTMSG              NO
         SR    R0,R8                YES, GET PR/SM DISPLAY PAGE NUMBER
         SLR   R9,R9                CLEAR FOR INSERT
         SLR   R11,R11              CLEAR FOR INSERT
         ICM   R11,3,64(R15)        GET PR/SM PARTITION DATA SECT. LEN.
         ICM   R8,3,66(R15)         GET PR/SM PARTITION DATA SECT. CNT.
         BZ    LEFTMSG              NOT A PR/SM SYSTEM
         ICM   R7,15,60(R15)        GET OFFSET TO PARTITION DATA SECTN
         ALR   R7,R15               POINT TO IT
PRSMLOOP ICM   R9,3,10(R7)          GET PROCESSOR COUNT FOR PARTITION
         CR    R0,R9                DISPLAY FOR THIS PARTITION?
         BNH   PRSMHERE             YES
         SR    R0,R9                NO, ADJUST PAGES TO GO
         ALR   R7,R11               POINT TO NEXT PARTIT'N DATA SECTION
         BCT   R8,PRSMLOOP          TRY NEXT PARTITION
         B     LEFTMSG              SCROLLED TOO FAR RIGHT FOR DATA
PRSMHERE ICM   R9,15,12(R7)         GET LOG. PROC. DATA SECTS TO SKIP
         AR    R0,R9                GET SECTION NUMBER TO DISPLAY
         MVC   72(8,R6),0(R7)       DISPLAY LOGICAL PARTITION NAME
         CLM   R0,3,74(R15)         ENOUGH SECTIONS IN RECORD?
         BH    LEFTMSG              NO, BUT THIS SHOULD NOT HAPPEN
         ICM   R7,15,68(R15)        GET OFFSET TO LOG. PROC. DATA SECTN
         ALR   R7,R15               POINT TO IT
         ICM   R8,3,72(R15)         GET LOG. PROC. DATA SECTION LENGTH
RMFPRCLP ALR   R7,R8                POINT TO NEXT PROC. DATA SECTION
         BCT   R0,RMFPRCLP
         SLR   R7,R8                BACK UP ONE
         ICM   R0,3,10(R7)          GET PARTITION CPU WEIGHT FACTOR
         BNM   CPSHARED             NOT DEDICATED PROCESSOR
         MVC   55(9,R6),=X'C48584898381A38584'    C'DEDICATED'
         B     PARTWTOK             DEDICATED PROCESSOR
CPSHARED CVD   R0,DOUBLE
         MVC   59(3,R6),ED3
         ED    58(4,R6),DOUBLE+6
         MVC   52(7,R6),=X'E685898788A37E'        C'WEIGHT='
         TM    12(R7),X'10'         IS CAPPING ENABLED?
         BZ    PARTWTOK             NO
         MVC   64(6,R6),=X'C38197978584'          C'CAPPED'
PARTWTOK ICM   R8,15,0(R7)          GET HIGH HALF OF CPU DISPATCH TIME
         ICM   R9,15,4(R7)          GET LOW HALF OF CPU DISPATCH TIME
*                                   THIS IS IN MICROSECONDS
         DR    R8,R1                GET LOGICAL PROC. BUSY PERMILLAGE
         CVD   R9,DOUBLE             IN LOGICAL PARTITION
         B     RMFUTIL              DISPLAY CPU UTILIZATION
         DROP  R5                   RMFCPU
         SPACE
         LTORG
         SPACE 3
         USING RMFPAG,R5
RMFPAG   DS    0H                  SMF RECORD TYPE 71
         CLI   19(R2),1             SUBTYPE 1?
         BNE   SUBREC               NO
         ICM   R0,3,38(R2)          ANY PAGING DATA SECTION?
         BZ    SUBREC               NO, SKIP USUAL DETAILS
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO PAGING DATA SECTION
         ALR   R7,R15               POINT TO PAGING DATA SECTION
         ICM   R8,15,0(R7)          GET NON-VIO NON-SWAP PAGE-INS
         ICM   R9,15,4(R7)          GET NON-VIO NON-SWAP PAGE-OUTS
         AR    R9,R8                GET NON-VIO NON-SWAP PAGE TRANSFERS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   30(7,R6),=X'40202021204B20'
         ED    30(7,R6),DOUBLE+5
         MVC   37(4,R6),=X'978761A2'  C'PG/S'
         ICM   R8,15,24(R7)         GET VIO NON-SWAP PAGE-INS
         ICM   R9,15,28(R7)         GET VIO NON-SWAP PAGE-OUTS
         AR    R9,R8                GET VIO NON-SWAP PAGE TRANSFERS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   41(7,R6),=X'40202021204B20'
         ED    41(7,R6),DOUBLE+5
         MVC   48(5,R6),=X'A5899661A2'  C'VIO/S'
         ICM   R8,15,16(R7)         GET SWAP PAGE-INS
         ICM   R9,15,20(R7)         GET SWAP PAGE-OUTS
         AR    R9,R8                GET SWAP PAGE TRANSFERS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   53(7,R6),=X'40202021204B20'
         ED    53(7,R6),DOUBLE+5
         MVC   60(7,R6),=X'A2A697978761A2'  C'SWPPG/S'
         ICM   R8,15,8(R7)          GET NON-VIO NON-SWAP PAGE RECLAIMS
         ICM   R9,15,32(R7)         GET VIO NON-SWAP PAGE RECLAIMS
         AR    R9,R8                GET TOTAL PAGE RECLAIMS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   67(7,R6),=X'40202021204B20'
         ED    67(7,R6),DOUBLE+5
         MVC   74(6,R6),=X'9983939461A2'    C'RCLM/S'
         B     RTNREC
         DROP  R5                   RMFPAG
         SPACE
         LTORG
         SPACE 3
         USING RMFWRK,R5
RMFWRK   DS    0H                  SMF RECORD TYPE 72
         ICM   R0,3,38(R2)          ANY WORKLOAD CONTROL SECTION?
         BZ    SUBREC               NO, SKIP USUAL DETAILS
         CLI   19(R2),3             SUBTYPE 3?
         BE    RMFWLM               YES, SYSTEM IS IN GOAL MODE
         CLI   19(R2),1             SUBTYPE 1?
         BNE   SUBREC               NO, PROBABLY MONITOR III
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO WKLD CONTROL SECTION
         ALR   R7,R15               POINT TO WORKLOAD CONTROL SECTION
         SLR   R0,R0
         ICM   R0,3,2(R7)           GET PERFORMANCE GROUP NUMBER
         CVD   R0,DOUBLE
         MVC   29(4,R6),=X'40202120'
         ED    29(4,R6),DOUBLE+6    SHOW PERFORMANCE GROUP NUMBER
         MVI   29(R6),X'97'         C'P'
         CLI   30(R6),C' '          NUMBER OVER 99?
         BNE   GOTPGN               YES
         MVI   30(R6),X'87'         C'G'
GOTPGN   SLR   R0,R0
         ICM   R0,3,50(R15)         GET NUMBER OF PG PERIOD SECTIONS
         BZ    RTNREC               JUST IN CASE
         ICM   R7,15,44(R15)        GET OFFSET TO PG PERIOD SECTION
         ALR   R7,R15               POINT TO PG PERIOD SECTION
         LA    R11,33(,R6)          POINT TO NEXT DISPLAY LINE BYTE
WKLDLOOP ICM   R9,15,8(R7)          GET TOTAL SERVICE USED
         M     R8,=F'1000'          SCALE UP FOR MILLISECONDS
         DR    R8,R1                GET SERVICE UNITS PER SECOND
         CVD   R9,DOUBLE
         MVC   1(5,R11),ED5
         ED    0(6,R11),DOUBLE+5
         MVC   6(7,R11),=X'A299A561A28583'   C'SRV/SEC'
         LA    R11,13(,R11)         POINT TO NEXT DISPLAY SLOT
         SLR   R8,R8
         ICM   R8,3,48(R15)         GET LENGTH OF PG PERIOD SECTION
         ALR   R7,R8                POINT TO NEXT PG PERIOD SECTION
         BCT   R0,WKLDLOOP          PROCESS IT
         B     RTNREC               NO MORE PERFORMANCE GROUP PERIODS
RMFWLM   BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO WKLD CONTROL SECTION
         ALR   R7,R15               POINT TO WLM CONTROL SECTION
         MVC   29(8,R6),120(R7)     SHOW SERVICE CLASS NAME
         LTR   R8,R8                AT LEFT MAX?
         BZ    SRVDESC0             YES
         CLM   R8,3,66(R15)         PAGED PAST NUMBER OF PERIODS?
         BH    SRVDESC              YES
         MVI   38(R6),C'P'          NO, SHOW PERIOD NUMBER
         STC   R8,39(,R6)
         NI    39(R6),X'0F'         JUST IN CASE OF WACKY PERIOD NUMBER
         TR    39(1,R6),HEXCHARS
         BCTR  R8,0                 GET RELATIVE PAGE NUMBER
         MVC   DOUBLE(2),64(R15)    COPY PERIOD SECTION LENGTH
         MH    R8,DOUBLE
         ICM   R0,15,60(R15)        GET OFFSET TO FIRST PERIOD SECTION
         ALR   R8,R0                GET RELEVANT OFFSET
         ALR   R8,R15               POINT TO RELEVANT PERIOD SECTION
         CLI   19(R8),0             ANY IMPORTANCE?
         BE    IMPORTOK             NO
         MVI   41(R6),C'I'          YES, SHOW IMPORTANCE LEVEL
         MVC   42(1,R6),19(R8)
         NI    42(R6),X'0F'         JUST IN CASE OF WACKY IMPORTANCE
         TR    42(1,R6),HEXCHARS
IMPORTOK TM    10(R8),X'80'         PERCENTILE RESPONSE TIME GOAL?
         BZ    PCTILEOK             NO
         MVC   75(5,R6),=C'G=ALL'   YES
         CLI   17(R8),99            MORE THAN 99% SPECIFIED?
         BH    PCTILEOK             YES
         SLR   R0,R0                NO
         ICM   R0,3,16(R8)          GET PERCENTILE GOAL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  77(2,R6),DOUBLE+6(2)
         MVI   79(R6),C'%'
PCTILEOK TM    10(R8),X'C0'         RESPONSE TIME GOAL?
         BZ    WLMDELAY             NO
         LA    R1,GOALABLS          POINT TO TIME UNIT LABELS
         ICM   R14,8,9(R8)          LOAD TIME UNIT FLAGS
         LA    R0,4                 GET NUMBER OF KNOWN UNIT TYPES
GOALULP  LTR   R14,R14              UNIT FLAG ON?
         BM    GOTGOALU             YES
         LA    R1,2(,R1)            NO, POINT TO NEXT UNIT TYPE LABEL
         SLL   R14,1                PROMOTE NEXT BIT TO SIGN BIT
         BCT   R0,GOALULP
GOTGOALU MVC   71(2,R6),0(R1)       LOAD TIME UNIT TYPE LABEL
         ICM   R0,15,12(R8)         GET RESPONSE TIME GOAL
         CVD   R0,DOUBLE
         MVC   66(5,R6),ED5
         ED    65(6,R6),DOUBLE+5    SHOW GOAL NUMBER OF TIME UNITS
         SLR   R0,R0
         ICM   R0,3,0(R8)           GET RESPONSE TIME SECTION INDEX
         BNP   RTNREC               TERMINATE IF SILLY VALUE
         CLM   R0,3,74(R15)         SUFFICIENT SECTIONS PRESENT?
         BNL   RTNREC               NO
         MVC   DOUBLE(2),72(R15)    YES, GET SECTION LENGTH
         MH    R0,DOUBLE            GET RELATIVE OFFSET
         ICM   R4,15,68(R15)        GET OFFSET FOR FIRST SECTION
         ALR   R4,R0                GET OFFSET FOR RELEVANT SECTION
         ALR   R4,R15               POINT TO RELEVANT SECTION
         LA    R0,6                 GET COUNT OF COUNTS NOT ABOVE 100%
         SLR   R7,R7                RESET ACCUMULATOR
WLMLP1   ICM   R1,15,0(R4)          GET PERCENTILE COUNTER
         AR    R7,R1                ACCUMULATE COUNT
         LA    R4,4(,R4)            POINT TO NEXT COUNTER
         BCT   R0,WLMLP1
         LR    R15,R7               COPY COUNT NOT OVER TARGET
         LA    R0,8                 GET COUNT OF COUNTS ABOVE 100%
WLMLP2   ICM   R1,15,0(R4)          COPY COUNTER
         AR    R7,R1                ACCUMULATE COUNT
         LA    R4,4(,R4)            POINT TO NEXT COUNTER
         BCT   R0,WLMLP2
         LTR   R7,R7                ANY TRANSACTIONS?
         BNP   RTNREC               NO, AVOID S0C9 ABEND
         M     R14,=F'100'          SCALE FOR PERCENTAGE
         DR    R14,R7               GET TRANSACTION %AGE WITHIN TARGET
         CVD   R15,DOUBLE
         MVI   62(R6),C'%'
         MVI   64(R6),C'<'
         MVC   57(5,R6),ED5
         ED    56(6,R6),DOUBLE+5    SHOW GOAL NUMBER OF TIME UNITS
         TM    7(R8),X'40'          RESPONSE TIME DATA AVAILABLE?
         BZ    RTNREC               NO
         MVC   DOUBLE,200(R8)       COPY TOTAL TRANSACTION ELASPED TIME
         LD    E0,DOUBLE
         AD    E0,FIXCONST          PERFORM SCALING
         STD   E0,DOUBLE
         ICM   R1,15,DOUBLE+4       GET INTEGER 1024MICROSECOND UNITS
         BNP   RTNREC               SKIP IF SCALING PROBLEM FOR INTEGER
         SLR   R0,R0
         SLDL  R0,10                MULTIPLY BY 1024 FOR MICROSECONDS
         D     R0,=F'1000'          CONVERT TO MILLISECONDS
         SLR   R0,R0
         DR    R0,R7                GET AVERAGE MILLISECS/TRANSACTION
         CVD   R1,DOUBLE
         MVC   46(5,R6),ED5
         OC    DOUBLE(5),DOUBLE     MORE THAN 99,999 MILLISECONDS?
         BNZ   WHOLESEC             YES
         ED    45(6,R6),DOUBLE+5
         MVC   51(2,R6),GOALABLS    C'MS'
         MVC   54(2,R6),=X'81A5'    C'AV'
         B     RTNREC
WHOLESEC SRP   DOUBLE,64-3,5        DIVIDE BY 1000 FOR SECONDS
         ED    45(6,R6),DOUBLE+5
         MVI   51(R6),X'A2'         C'S'
         MVC   53(2,R6),=X'81A5'    C'AV'
         B     RTNREC
WLMDELAY TM    7(R8),X'20'          DELAY INFORMATION AVAILABLE?
         BZ    RTNREC               NO
         ICM   R4,15,288(R8)        GET CPU/DELAY SAMPLE COUNT
         BZ    RTNREC               SEEMS LIKE NO ACTIVITY IN CLASS
         ICM   R1,15,224(R8)        GET USING CPU COUNT
         LA    R15,44(,R6)          POINT TO OUTPUT AREA
         BAL   R14,WLMFMTPC         FORMAT THE PERCENTAGE
         MVC   5(3,R15),=X'8397A4'  C'CPU'
         ICM   R1,15,232(R8)        GET WAITING FOR CPU COUNT
         LR    R7,R1                REMEMBER IT
         LA    R15,52(,R6)          POINT TO OUTPUT AREA
         BAL   R14,WLMFMTPC         FORMAT THE PERCENTAGE
         MVC   5(4,R15),=X'8397A6A3'  C'CPWT'
         ICM   R1,15,236(R8)        GET CPU CAPPED COUNT
         AR    R7,R1                GET 2-COUNT SUM
         ICM   R1,15,228(R8)        GET VELOCITY TOTAL DELAY 10-COUNT
         SR    R1,R7                GET AUXILIARY STORAGE 8-COUNT TOTAL
         LA    R15,61(,R6)          POINT TO OUTPUT AREA
         BAL   R14,WLMFMTPC         FORMAT THE PERCENTAGE
         MVC   5(5,R15),=X'81A4A7A6A3'  C'AUXWT'
         ICM   R1,15,236(R8)        GET CPU CAPPED COUNT
         LR    R7,R1                REMEMBER IT
         ICM   R1,15,280(R8)        GET RESOURCE GROUP CAPPED COUNT
         AR    R7,R1                ACCUMULATE IT
         ICM   R1,15,284(R8)        GET QUIESCED COUNT
         AR    R1,R7                GET TOTAL "CAPPED" COUNT
         LA    R15,71(,R6)          POINT TO OUTPUT AREA
         BZ    SHOWIDLE             NO CAPPING SO SHOW IDLE AMOUNT
         BAL   R14,WLMFMTPC         FORMAT THE PERCENTAGE
         MVC   5(3,R15),=X'838197'  C'CAP'
         B     RTNREC
SHOWIDLE ICM   R1,15,276(R8)        GET IDLE COUNT
         BAL   R14,WLMFMTPC         FORMAT THE PERCENTAGE
         MVC   5(4,R15),=X'89849385' C'IDLE'
         B     RTNREC
WLMFMTPC M     R0,=F'100'
         DR    R0,R4
         CVD   R1,DOUBLE
         MVC   1(3,R15),ED3
         ED    0(4,R15),DOUBLE+6
         MVI   4(R15),C'%'
         BR    R14
SRVDESC0 MVC   40(32,R6),128(R7)    SHOW SERVICE CLASS DESCRIPTION
         MVC   74(6,R6),MSGRIGHT+34
         B     RTNREC
SRVDESC  MVC   48(32,R6),128(R7)    SHOW SERVICE CLASS DESCRIPTION
         MVC   40(6,R6),MSGLEFT
         B     RTNREC
         DROP  R5                   RMFWRK
         SPACE
GOALABLS DC    X'94A2A240944088406F6F'  C'MSS M H ??'
         SPACE
         LTORG
         SPACE 3
         USING RMFCHN,R5
RMFCHN   DS    0H                  SMF RECORD TYPE 73
         CLI   19(R2),1             SUBTYPE 1?
         BNE   SUBREC               NO
         ICM   R0,3,38(R2)          ANY CHANNEL PATH CONTROL SECTION?
         BZ    SUBREC               NO, SKIP USUAL DETAILS
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         LTR   R0,R8                RESTORE RELATIVE PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         CLM   R0,3,50(R15)         PAGE NO. HIGHER THAN CHANNEL COUNT?
         BH    LEFTMSG              YES, GONE TOO FAR RIGHT FOR DATA
         ICM   R7,15,36(R15)        GET OFFSET TO CONTROL SECTION
         ALR   R7,R15               POINT TO CHPID CONTROL SECTION
         ICM   R3,15,0(R7)          LOAD THE SAMPLE COUNT
         BNP   RTNREC               AVOID S0C9
         SLR   R4,R4
         ICM   R4,3,48(R15)         GET CHPID DATA SECTION LENGTH
         ICM   R7,15,44(R15)        GET OFFSET TO FIRST DATA SECTION
         ALR   R7,R15               POINT TO FIRST CHPID DATA SECTION
CHPIDLP  ALR   R7,R4                POINT TO NEXT CHPID DATA SECTION
         BCT   R0,CHPIDLP
         SLR   R7,R4                BACK UP ONE
         MVC   34(12,R6),=X'83888195958593409781A388' C'CHANNEL PATH'
         MVC   DOUBLE(1),0(R7)      COPY CHANNEL PATH IDENTIFIER
         BAL   R14,CONV
         MVC   47(2,R6),DOUBLE      DISPLAY CHANNEL PATH IDENTIFIER
         CH    R4,=H'16'            ENTRY LONG ENOUGH FOR SMF73CPD?
         BNH   CHPOLDNT             NO, DO IT THE OLD WAY
         OC    1(16,R7),1(R7)       DUMMY ENTRY?
         BZ    CHNTYPOK             YES, CHANNEL DOESN'T EXIST
         MVC   50(5,R6),=X'4DA3A89785'  C'(TYPE'
         MVC   DOUBLE(1),16(R7)     COPY CHANNEL PATH DESCRIPTION
         BAL   R14,CONV
         MVC   56(2,R6),DOUBLE      DISPLAY CHANNEL PATH DESCRIPTION
         MVI   59(R6),C')'
         CLI   16(R7),X'13'         GOT A BETTER ONE?
         BH    CHNTYPOK             NO
         SLR   R14,R14              YES
         IC    R14,16(,R7)          GET THE TYPE
         SLL   R14,3                MULTIPLY BY EIGHT FOR INDEX
         LA    R14,CHNTYPES(R14)    POINT TO THE ENTRY
         MVC   51(8,R6),0(R14)      LOAD DESCRIPTION
         B     CHNTYPOK
CHPOLDNT MVC   50(10,R6),=X'4DC5E260839695954B5D'  C'(ES-CONN.)'
         TM    2(R7),X'80'          ES CONNECTION CHANNEL?
         BNZ   CHNTYPOK             YES
         MVC   51(8,R6),=X'A285938583A39699'  C'SELECTOR'
         TM    1(R7),X'30'          BYTE OR BLOCK MULTIPLEXOR?
         BNM   CHNTYPOK             NO, SAY SELECTOR INSTEAD OF UNKNOWN
         MVC   51(8,R6),BYTEMUX
         TM    1(R7),X'10'          BYTE MULTIPLEXOR?
         BO    CHNTYPOK             YES
         MVC   51(8,R6),BLOCKMX     NO, SAY BLOCK MX
CHNTYPOK MVC   61(7,R6),=X'96868693899585'    C'OFFLINE'
         TM    1(R7),X'01'          CHANNEL PATH ONLINE?
         BZ    RTNREC               NO
         MVC   61(12,R6),=X'9985839695868987A4998584' C'RECONFIGURED'
         TM    1(R7),X'02'          RECONFIGURED DURING INTERVAL?
         BO    RTNREC               YES
         MVC   61(13,R6),=X'978199A389819340A2A381A3A2' 'PARTIAL STATS'
         TM    1(R7),X'04'          PARTIAL STATISTICS?
         BO    RTNREC               YES
         ICM   R9,15,4(R7)          LOAD CHANNEL PATH BUSY COUNT
         M     R8,=F'10000'         PERCENTAGE AND 2 DECIMAL PLACES
         DR    R8,R3                GET BUSY PERCENTAGE
         CVD   R9,DOUBLE
         MVC   61(13,R6),=X'402021204B20206C4082A4A2A8' C'% BUSY'
         ED    61(7,R6),DOUBLE+5
         TM    2(R7),X'01'          CHANNEL SHARED BETWEEN LPARS?
         BZ    RTNREC               NO
         MVC   75(5,R6),=C'-EMIF'   YES
         B     RTNREC
         DROP  R5                   RMFCHN
         SPACE
CHNTYPES DS    0H
         DC    XL8'A495929596A69540'       CL8'UNKNOWN '
BLOCKMX  DC    XL8'82939683924094A7'       CL8'BLOCK MX'
BYTEMUX  DC    XL8'82A8A3854094A4A7'       CL8'BYTE MUX'
         DC    XL8'97A340A3964097A3'       CL8'PT TO PT'
         DC    XL8'A3A8978540F0F440'       CL8'TYPE 04 '
         DC    XL8'A2A64B97A36097A3'       CL8'SW.PT-PT'
         DC    XL8'85A7608293968392'       CL8'EX-BLOCK'
         DC    XL8'A3A8978540F0F740'       CL8'TYPE 07 '
         DC    XL8'83A3838140404040'       CL8'CTCA    '
         DC    XL8'83A3838140A2A64B'       CL8'CTCS SW.'
         DC    XL8'A3A8978540F0C140'       CL8'TYPE 0A '
         DC    XL8'948640A760A2A8A2'       CL8'MF X-SYS'
         DC    XL8'949740A760A2A8A2'       CL8'MP X-SYS'
         DC    XL8'A3A8978540F0C440'       CL8'TYPE 0D '
         DC    XL8'A3A8978540F0C540'       CL8'TYPE 0E '
         DC    XL8'85A7A36082A8A385'       CL8'EXT-BYTE'
         DC    XL8'A3A8978540F1F040'       CL8'TYPE 10 '
         DC    XL8'A3A8978540F1F140'       CL8'TYPE 11 '
         DC    CL8'OSA     '
         DC    CL8'ISD     '
         LTORG
         SPACE 3
         USING RMFDEV,R5
RMFDEV   DS    0H                  SMF RECORD TYPE 74
         CLI   19(R2),1             SUBTYPE 1?
         BNE   SUBREC               NO
         ICM   R0,3,46(R2)          ANY DEVICE DATA SECTIONS?
         BZ    SUBREC               NO, SKIP USUAL DETAILS
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         LTR   R0,R8                RESTORE RELATIVE PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         CLM   R0,3,50(R15)         PAGE NO. HIGHER THAN DEVICE COUNT?
         BH    LEFTMSG              YES, GONE TOO FAR RIGHT FOR DATA
         SLR   R8,R8
         ICM   R8,3,48(R15)         GET DEVICE DATA SECTION LENGTH
         ICM   R7,15,44(R15)        GET OFFSET TO FIRST DATA SECTION
         ALR   R7,R15               POINT TO FIRST DEVICE DATA SECTION
DEVICELP ALR   R7,R8                POINT TO NEXT DEVICE DATA SECTION
         BCT   R0,DEVICELP
         SLR   R7,R8                BACK UP ONE
         MVC   DOUBLE(2),0(R7)      COPY CHANNEL PATH IDENTIFIER
         BAL   R14,CONV
         MVC   29(4,R6),DOUBLE      DISPLAY DEVICE NUMBER
         CLI   29(R6),C'0'          LEADING ZERO?
         BNE   VOLCHK74             NO
         MVI   29(R6),C' '          YES, NOT ANY MORE
VOLCHK74 CLI   6(R7),C' '           ANY VOLUME SERIAL NUMBER?
         BNH   VOLOK74              NO
         MVC   13(6,R6),6(R7)       YES, DISPLAY IT
         MVI   12(R6),C'_'          HIGHLIGHT OVERLAY OF YY.DDD
         MVI   19(R6),C'_'          (OR ELSE MAY NOT NOTICE IT)
VOLOK74  MVC   DOUBLE(2),12(R7)     TOP HALF OF UCB TYPE
         BAL   R14,CONV
         MVC   34(4,R6),DOUBLE
         MVC   DOUBLE(2),14(R7)     LOW HALF OF UCB TYPE
         BAL   R14,CONV
         MVC   38(4,R6),DOUBLE
         MVC   43(7,R6),=X'96868693899585'             C'OFFLINE'
         TM    5(R7),X'01'          DEVICE PATH ONLINE?
         BZ    RTNREC               NO
         MVC   43(12,R6),=X'9985839695868987A4998584'  C'RECONFIGURED'
         TM    5(R7),X'02'          RECONFIGURED DURING INTERVAL?
         BO    RTNREC               YES
         MVC   43(13,R6),=X'978199A389819340A2A381A3A2' 'PARTIAL STATS'
         TM    5(R7),X'08'          PARTIAL STATISTICS?
         BO    RTNREC               YES
         MVC   43(13,R6),42(R6)     NO, ERASE LITERAL
         ICM   R9,15,20(R7)         LOAD START SUBCHANNEL COUNT
         M     R8,=F'10000'         PERMILLAGE AND 1 DECIMAL PLACE
         DR    R8,R1                GET I/O RATE
         CVD   R9,DOUBLE
         MVC   42(7,R6),=X'40202021204B20'
         ED    42(7,R6),DOUBLE+5
         MVC   42(6,R6),43(R6)      SAVE A BYTE ON DISPLAY LINE
         MVC   48(4,R6),=X'899661A2'   C'IO/S'
         TM    5(R7),X'20'          VALID CMB DATA?
         BO    RTNREC               NO
         ICM   R0,15,24(R7)         LOAD SAMPLED START SUBCHANNEL COUNT
         BZ    RTNREC               AVOID S0C9 ABEND
         LA    R15,52(,R6)          POINT TO DISPLAY AREA
         ICM   R9,15,28(R7)         LOAD DEVICE SAMPLED CONNECT TIME
         BAL   R14,DEVCMB74
         MVI   56(R6),X'83'         DENOTE CONNECT TIME
         LA    R15,58(,R6)          POINT TO DISPLAY AREA
         ICM   R9,15,40(R7)         LOAD DEVICE SAMPLED DISCONNECT TIME
         BAL   R14,DEVCMB74
         MVI   58(R6),C'+'
         MVI   62(R6),X'84'         DENOTE DISCONNECT TIME
         LA    R15,64(,R6)          POINT TO DISPLAY AREA
         ICM   R9,15,32(R7)         LOAD DEVICE SAMPLED PENDING TIME
         BAL   R14,DEVCMB74
         MVI   64(R6),C'+'
         MVI   68(R6),X'97'         DENOTE PENDING TIME
         SLR   R8,R8                PROCESS CMB ACTIVITY TIME
         ICM   R9,15,36(R7)         LOAD DEVICE SAMPLED ACTIVE TIME
         SLDL  R8,7                 CONVERT TO MICROSECONDS
         DR    R8,R0                GET MICROSECONDS PER I/O
         SLR   R8,R8
         D     R8,=F'1000'          GET MILLISECONDS PER I/O
         CVD   R9,DOUBLE
         MVC   70(5,R6),ED5
         ED    69(6,R6),DOUBLE+5
         MVI   70(R6),C'='          COMPLETE THE EQUATION NOTATION
         MVC   75(5,R6),=X'94A2618996'           C'MS/IO'
         B     RTNREC
         SPACE
DEVCMB74 SLR   R8,R8                PROCESS CMB ACTIVITY TIME
         SLDL  R8,7                 CONVERT TO MICROSECONDS
         DR    R8,R0                GET MICROSECONDS PER I/O
         SLR   R8,R8
         D     R8,=F'1000'          GET MILLISECONDS PER I/O
         CVD   R9,DOUBLE
         MVC   1(3,R15),ED3
         ED    0(4,R15),DOUBLE+6
         BR    R14
         DROP  R5                   RMFDEV
         SPACE
         LTORG
         SPACE 3
         USING RMFPDS,R5
RMFPDS   DS    0H                  SMF RECORD TYPE 75
         CLI   19(R2),1             SUBTYPE 1?
         BNE   SUBREC               NO
         ICM   R0,3,38(R2)          ANY DATA SET SECTION?
         BZ    SUBREC               NO, SKIP USUAL DETAILS
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO DATA SET SECTION
         ALR   R7,R15               POINT TO PAGE/SWAP DATA SET SECTION
         UNPK  29(5,R6),51(3,R7)    UNPACK UCB NAME
         TR    29(4,R6),HEXCHARS-240
         MVI   33(R6),C' '          ERASE GARBAGE
         CLI   29(R6),C'0'          LEADING ZERO IN DEVICE NUMBER?
         BNE   DON75UCB             NO
         MVI   29(R6),C' '          YES, SUPPRESS IT
DON75UCB MVC   34(22,R6),0(R7)      GET DATA SET NAME (HOPE < 23 CHARS)
         ICM   R9,15,92(R7)         GET DATA SET I/O REQUEST COUNT
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET I/O'S PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   57(7,R6),=X'40202021204B20'
         ED    57(7,R6),DOUBLE+5
         MVC   64(4,R6),=X'899661A2'   C'IO/S'
         TM    44(R7),X'08'         SWAP DATA SET?
         BO    RTNREC               YES, PAGE TRANSFER COUNT IS N/A
         ICM   R9,15,96(R7)         GET DATA SET PAGE TRANSFER COUNT
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   68(7,R6),=X'40202021204B20'
         ED    68(7,R6),DOUBLE+5
         MVC   75(5,R6),=X'A7869961A2'  C'XFR/S'
         B     RTNREC
         DROP  R5                   RMFPDS
         SPACE
         LTORG
         TITLE 'SMF RECORD TYPE SUBROUTINES'
         USING RACFUS,R5
RACFUS   DS    0H                  SMF RECORD TYPE 80
         OC    25(8,R6),50(R2)      JOB NAME         (DON'T SHOW NULLS)
         OC    34(8,R6),18(R2)      RACF USER ID OR JOB NAME
         OC    43(8,R6),26(R2)      RACF GROUP ID OR STEP NAME
         OC    52(8,R6),42(R2)      TERMINAL ID OR ZERO
         B     RTNREC
         DROP  R5                   RACFUS
         SPACE
         LTORG
         SPACE 3
         USING CRYPTO,R5
CRYPTO   DS    0H                  SMF RECORD TYPE 82
         MVC   25(8,R6),20(R2)      JOB NAME OR RACF USERID
         MVC   34(8,R6),28(R2)      STEPNAME OR RACF GROUP
         B     RTNREC
         DROP  R5                   CRYPTO
         SPACE
         LTORG
         SPACE 3
         USING SYSTAT,R5
SYSTAT   DS    0H                  SMF RECORD TYPE 90
         LA    R1,4
         LR    R15,R2
         SLR   R15,R1               POINT TO RDW
         ICM   R0,3,26(R15)         ANY PRODUCT SECTIONS?
         BNP   RTNREC               NO, UNEXPECTED FORMAT
         ICM   R7,15,20(R15)        GET OFFSET TO PRODUCT SECTION
         ALR   R7,R15               POINT TO PRODUCT SECTION
         MVC   25(8,R6),4(R7)       LOAD PRODUCT NAME
         ICM   R1,3,0(R7)           SUBTYPE
         CVD   R1,DOUBLE
         MVC   42(3,R6),ED3
         ED    41(4,R6),DOUBLE+6
         MVC   34(7,R6),SUBTYPE
         CH    R1,=H'28'            KNOWN SUBTYPE?
         BH    RTNREC               NO
         SLL   R1,4                 MULTIPLY SUBTYPE BY 16 FOR INDEX
         LA    R1,SYSTATAB-16(R1)   POINT TO ENTRY
         MVC   46(12,R6),0(R1)      LABEL SYSTEM STATUS CHANGE TYPE
         ICM   R0,3,34(R15)         ANY DATA SECTIONS?
         BNP   RTNREC               NO, UNEXPECTED FORMAT
         ICM   R7,15,28(R15)        GET OFFSET TO DATA SECTION
         ALR   R7,R15               POINT TO DATA SECTION
         B     12(,R1)              BRANCH TO SUBTYPE SUBROUTINE
SETDMN   SLR   R0,R0
         IC    R0,8(R7)             DOMAIN NUMBER
         CVD   R0,DOUBLE
         MVC   53(3,R6),ED3
         ED    52(4,R6),DOUBLE+6
         LA    R8,56(,R6)           POINT TO NEXT OUTPUT LOCATION
         TM    9(R7),X'80'          MIN MPL CHANGED?
         BZ    SDMINOK              NO
         MVC   0(5,R8),=C',MIN='
         ICM   R0,3,10(R7)          NEW MINIMUM MPL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  5(5,R8),DOUBLE+5(3)
         LA    R8,10(,R8)           POINT TO NEXT OUTPUT LOCATION
SDMINOK  TM    9(R7),X'40'          MAX MPL CHANGED?
         BZ    RTNREC               NO
         MVC   0(5,R8),=C',MAX='
         ICM   R0,3,12(R7)          NEW MAXIMUM MPL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  5(5,R8),DOUBLE+5(3)
         B     RTNREC
SETPARM  MVC   60(8,R6),8(R7)       OLD MEMBER NAME
         MVC   68(2,R6),=C'=>'      FLOW INDICATOR
         MVC   70(8,R6),16(R7)      NEW MEMBER NAME
         B     RTNREC
SETMPF   LA    R7,32(,R7)           JUMP OVER RESERVED FIELDS
         LA    R8,53(,R6)           POINT TO OUTPUT AREA
SETPARMS MVC   0(2,R8),=C'=('
         ICM   R0,15,16(R7)         GET MEMBER COUNT
         BZ    SETPARMX             NONE
         LA    R14,20(,R7)          POINT TO MEMBER SUFFIX LIST
SETPRMLP MVC   2(2,R8),0(R14)       COPY A SUFFIX
         MVI   4(R8),C','           SEPARATOR
         LA    R8,3(,R8)            ADJUST TARGET POINTER
         LA    R14,2(,R14)          ADJUST TARGET POINTER
         BCT   R0,SETPRMLP
         BCTR  R8,0                 OVERLAY UNNEEDED COMMA
SETPARMX MVI   2(R8),C')'
         B     RTNREC
SETGRSRN LA    R8,56(,R6)           POINT TO OUTPUT AREA
         B     SETPARMS
SETMEM   ICM   R0,15,8(R7)          GET MEMBER COUNT
         BNP   RTNREC
         CH    R0,=H'8'             SENSIBLE VALUE?
         BNH   *+8                  YES
         LH    R0,=H'8'             NO, IS NOW
         LA    R8,60(,R6)           POINT TO OUTPUT AREA
SETMEMLP MVC   0(8,R8),12(R7)       SHOW MEMBER NAME
         LA    R7,8(,R7)            ADJUST SOURCE
         LA    R8,9(,R8)            ADJUST TARGET
         BCT   R0,SETMEMLP
         B     RTNREC
SETCNGRP LA    R8,55(,R6)           POINT TO OUTPUT AREA
         B     SETPARMS
IPLWLM   MVC   60(8,R6),0(R7)       SERVICE DEFINITION NAME
         MVC   69(2,R6),=X'82A8'    C'BY'
         MVC   72(8,R6),16(R7)      USERID OF INSTALLER
         B     RTNREC
MODWLM   MVC   60(8,R6),=C'*COMPAT*'
         MVC   69(2,R6),=X'82A8'    C'BY'
         MVC   72(8,R6),76(R7)      MODIFY WLM ISSUER OPERATOR ID
         TM    0(R7),X'80'          GOING TO COMPATIBILITY MODE?
         BO    RTNREC               YES
         MVC   60(8,R6),12(R7)      NO, SHOW SERVICE DEFINITION NAME
         B     RTNREC
LOGREC   MVC   60(10,R6),124(R7)    SHOW NEW MODE
         CLI   124(R6),C'I'         WAS IT 'IGNORED'?
         BE    RTNREC               YES
         MVC   60(26,R6),134(R7)    SHOW NEW LOG STREAM NAME
         CLI   124(R6),C'L'         WAS IT 'LOGSTREAM'?
         BE    RTNREC               YES
         MVC   60(44,R6),80(R7)     SHOW NEW DATA SET NAME
         B     RTNREC               MUST HAVE BEEN 'DATASET'
SETXCF   MVC   60(8,R6),0(R7)       SHOW POLICY NAME
         B     RTNREC
         SPACE
SYSTATAB DS    0F
         DC    CL12'SET TIME    '   01
         B     RTNREC
         DC    CL12'SET DATE    '   02
         B     RTNREC
         DC    CL12'SETDMN      '   03
         B     SETDMN
         DC    CL12'SET IPS     '   04
         B     SETPARM
         DC    CL12'SET SMF     '   05
         B     RTNREC
         DC    CL12'SWITCH SMF  '   06
         B     RTNREC
         DC    CL12'HALT EOD    '   07
         B     RTNREC
         DC    CL12'IPL PROMPT  '   08
         B     RTNREC
         DC    CL12'IPL SMF     '   09
         B     RTNREC
         DC    CL12'IPL SRM     '   10
         B     RTNREC
         DC    CL12'SET OPT     '   11
         B     SETPARM
         DC    CL12'SET ICS     '   12
         B     SETPARM
         DC    CL12'SETSMF      '   13
         B     RTNREC
         DC    CL12'SET MPF     '   14
         B     SETMPF
         DC    CL12'SET SMF-R/S '   15
         B     RTNREC
         DC    CL12'SET DAE     '   16
         B     SETPARM
         DC    CL12'SET PFK     '   17
         B     SETPARM
         DC    CL12'SET GRSRNL  '   18
         B     SETGRSRN
         DC    CL12'SET APPC    '   19
         B     SETMEM
         DC    CL12'SET ASCH    '   20
         B     SETMEM
         DC    CL12'SET SCH     '   21
         B     SETMEM
         DC    CL12'SET CNGRP   '   22
         B     SETCNGRP
         DC    CL12'IPL WLM     '   23
         B     IPLWLM
         DC    CL12'VARY WLM    '   24
         B     RTNREC
         DC    CL12'MODIFY WLM  '   25
         B     MODWLM
         DC    CL12'IPL LOGREC  '   26
         B     LOGREC
         DC    CL12'SETXCF START'   27
         B     SETXCF
         DC    CL12'SETXCF STOP '   28
         B     SETXCF
         SPACE
         DROP  R5                   SYSTAT
         SPACE
         LTORG
         TITLE 'DB2 RECORD TYPE SUBROUTINES'
         USING DB2SYS,R5
DB2SYS   DS    0H                  SMF RECORD TYPE 100
         MVC   3(1,R6),18(R2)       COPY SUBTYPE CODE
         NI    3(R6),X'0F'          ONLY HANDLE UP TO SUBTYPE 15
         TR    3(1,R6),HEXCHARS     MAKE DISPLAYABLE
         LA    R5,DB2REC            LOAD MAIN DB2 ROUTINE ADDRESS
         BR    R5                   INVOKE IT
         DROP  R5                   DB2SYS
         SPACE
         LTORG
         SPACE 2
         USING DB2REC,R5
DB2REC   DS    0H                  SMF RECORD TYPE 100, 101 AND 102
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         LA    R0,4                 LENGTH OF RDW
         LR    R15,R2               POINT TO SMF RECORD FLAG BYTE
         SLR   R15,R0               POINT TO RDW TO SIMPLIFY PROCESSING
         MVC   25(4,R6),18(R15)     SHOW DB2 SUBSYSTEM NAME
         CLC   =H'1',34(R15)        IS ONE PRODUCT SECTION PRESENT?
         BNE   RTNREC               NO, THAT IS STRANGE
         SLR   R11,R11
         ICM   R11,3,32(R15)        GET PRODUCT SECTION LENGTH
         ICM   R7,15,28(R15)        GET OFFSET TO PRODUCT SECTION
         ALR   R7,R15               POINT TO PRODUCT SECTION
DB2HDRLP CLI   2(R7),1              STANDARD HEADER?
         BE    DB2HDR1              YES
         CLI   2(R7),2              CORRELATION HEADER?
         BE    DB2HDR2              YES
DB2HDROK SLR   R1,R1
         ICM   R1,3,0(R7)           GET THE LENGTH OF THIS HEADER
         ALR   R7,R1                POINT TO NEXT HEADER
         SR    R11,R1               GET LENGTH OF REMAINING HEADERS
         BP    DB2HDRLP             PROCESS IT
         MVC   30(L'CORRELNA,R6),CORRELNA
         B     RTNREC               END OF PROCESSING
DB2HDR1  CLM   R8,3,=H'1'           FETCH DISPLAY DATA FROM HERE?
         BNH   DB2HDROK             NO, FROM CORRELATION HEADER
         BCTR  R8,0                 ADJUST ORIGIN FOR CONVENIENCE
         SLR   R11,R11
         IC    R11,6(,R7)           GET SELF-DEFINING SECTION COUNT
         BCTR  R11,0                DECREMENT FOR PRODUCT SECTION
         LTR   R11,R11
         BNP   RTNREC               REJECT UNEXPECTED VALUE
         CLC   =H'1',4(R7)          IS IFCID FOR SYSTEM STATISTICS?
         BE    IFCID1               YES, TYPE 100 (SUBTYPE 0)
         CLC   =H'2',4(R7)          IS IFCID FOR DATA BASE STATISTICS?
         BE    IFCID2               YES, TYPE 100 (SUBTYPE 1)
         CLC   =H'3',4(R7)          IS IFCID FOR ACCOUNTING?
         BE    IFCID3               YES, TYPE 101
         MVC   34(8,R6),IFCIDIS     NO,  TYPE 102
         ICM   R11,3,4(R7)          SHOW INSTRUMENTATION FACILITY
         CVD   R11,DOUBLE                COMPONENT IDENTIFIER
         MVC   43(5,R6),ED5
         ED    42(6,R6),DOUBLE+5
         B     RTNREC               NO, END OF PROCESSING
         SPACE
IFCID1   LR    R0,R8                COPY "PAGE NUMBER"
         MVC   DOUBLE(2),=H'60'     SUPPLY QSST CONTROL BLOCK ID
         MVC   DOUBLE+2(2),=H'72'   SUPPLY QSST MINIMUM LENGTH
         CH    R8,=H'8'             LOOKING FOR QSST DATA?
         BNH   DB2XTRCT             YES
         SH    R8,=H'8'             NO
         MVC   DOUBLE(2),=H'147'    SUPPLY QJST CONTROL BLOCK ID
         MVC   DOUBLE+2(2),=H'64'   SUPPLY QJST MINIMUM LENGTH
         CH    R8,=H'7'             LOOKING FOR QJST DATA?
         BNH   DB2XTRCT             YES
         B     LEFTMSG              SCROLLED TOO FAR RIGHT FOR ANY DATA
DB2XTRCT BAL   R14,DB2SECT          EXTRACT REQUIRED RECORD SECTION
         LA    R1,IFC1LBLS-30       POINT TO LABELS
DB2LABEL L     R14,DOUBLE+4         SAVE THE EYE CATCHER FOR LATER
DB2LBLLP LA    R1,30(,R1)           POINT TO LABELS OF NEXT PAGE
         BCT   R0,DB2LBLLP
         SLL   R8,3
         LA    R8,0(R8,R7)          POINT TO COUNTERS
         ICM   R0,15,0(R8)          LOAD LEFT COUNTER
         CVD   R0,DOUBLE
         MVC   30(9,R6),ED9         LOAD LEFT EDIT MASK
         ED    29(10,R6),DOUBLE+3
         ICM   R0,15,4(R8)          LOAD RIGHT COUNTER
         CVD   R0,DOUBLE
         MVC   55(9,R6),ED9         LOAD RIGHT EDIT MASK
         ED    54(10,R6),DOUBLE+3
         MVC   40(15,R6),0(R1)      LOAD LEFT COUNTER LABEL
         MVC   65(15,R6),15(R1)     LOAD RIGHT COUNTER LABEL
         CLI   34(R6),C' '          ROOM FOR CONTROL BLOCK NAME?
         BH    RTNREC               NO, SO FORMATTING COMPLETE
         STCM  R14,15,30(R6)        YES, SHOW IT
         B     RTNREC               PROCESSING SUCCESSFULLY COMPLETED
         SPACE
IFCID2   LR    R0,R8                COPY "PAGE NUMBER"
         MVC   DOUBLE(2),=H'8341'   SUPPLY QXST CONTROL BLOCK ID
         MVC   DOUBLE+2(2),=H'164'  SUPPLY QXST MINIMUM LENGTH
         CH    R8,=H'18'            LOOKING FOR QXST DATA?
         BNH   DB2XTRC2             YES
         SH    R8,=H'18'            NO
         MVC   DOUBLE(2),=H'8340'   SUPPLY QTST CONTROL BLOCK ID
         MVC   DOUBLE+2(2),=H'88'   SUPPLY QTST MINIMUM LENGTH
         CH    R8,=H'10'            LOOKING FOR QTST DATA?
         BNH   DB2XTRC2             YES
         SH    R8,=H'10'            NO
         CH    R8,=H'5'             LOOKING FOR QISE DATA?
         BNH   QISEDATA             YES
         SH    R8,=H'5'             NO
         SLR   R14,R14
         ICM   R14,3,56(R15)        GET THE QBST SECTION LENGTH
         CLM   14,3,=H'116'         ARE QBST SECTIONS LONG ENOUGH?
         BL    LEFTMSG              NO, UNEXPECTED FORMAT
         ICM   R7,15,52(R15)        GET THE OFFSET TO THE SECTION
         BNP   LEFTMSG              REJECT UNEXPECTED FORMAT
         ALR   R7,R15               POINT TO THE DATA SECTION
         SLR   R1,R1
         ICM   R1,3,58(R15)         GET THE NUMBER OF QBST SECTIONS
         BNP   LEFTMSG              REJECT UNEXPECTED FORMAT
QBSTLOOP CH    R8,=H'14'            LOOKING FOR QBST DATA?
         BNH   QBSTDATA             YES
         SH    R8,=H'14'            NO, NOT YET ANYWAY
         ALR   R7,R14               POINT TO NEXT QBST SECTION
         BCT   R1,QBSTLOOP
         B     LEFTMSG              SCROLLED TOO FAR RIGHT FOR ANY DATA
DB2XTRC2 BAL   R14,DB2SECT          EXTRACT REQUIRED RECORD SECTION
         LA    R1,IFC2LBLS-30       POINT TO LABELS
         B     DB2LABEL             BRANCH TO COMMON PROCESSING
QISEDATA CLC   =H'1',82(R15)        ONE EDM POOL STATS SECTION PRESENT?
         BNE   RTNREC               NO, UNEXPECTED FORMAT OR CONTENT
         CLC   =H'40',80(R15)       EDM POOL STATS SECT. LONG ENOUGH?
         BL    RTNREC               NO, UNEXPECTED FORMAT OR CONTENT
         ICM   R7,15,76(R15)        YES, GET DATA SECTION OFFSET
         ALR   R7,R15               GET EDM POOL SECTION ADDRESS
         BCTR  R8,0                 DECREMENT FOR INDEX
         LA    R1,IFC2LBLS-30       POINT TO LABELS
         MVC   DOUBLE+4(4),=C'EDM:' SUPPLY STATISTICS CATEGORY NAME
         B     DB2LABEL             BRANCH TO COMMON PROCESSING
QBSTDATA LR    R0,R8                COPY "PAGE NUMBER"
         LA    R1,IFC2QBST-30       POINT TO LABELS
         BCTR  R8,0                 DECREMENT FOR INDEX
         ICM   R14,15,0(R7)         LOAD BUFFER POOL IDENTIFIER
         CVD   R14,DOUBLE
         MVC   31(3,R6),ED3
         ED    30(4,R6),DOUBLE+6    USE BUFFER POOL ID AS EYE-CATCHER
         MVI   30(R6),X'82'         C'B'
         ICM   R14,15,30(R6)
         CLI   31(R6),C' '          ROOM FOR C'P'?
         BNE   QBSTOKAY             NO
         MVI   31(R6),X'97'         C'P'
         ICM   R14,15,30(R6)        YES
QBSTOKAY LA    R7,4(,R7)            POINT TO FIRST REPORTABLE COUNTER
         B     DB2LBLLP
         SPACE
IFCID3   LR    R0,R8                COPY "PAGE NUMBER"
         MVC   DOUBLE(2),=H'8341'   SUPPLY QXST CONTROL BLOCK ID
         MVC   DOUBLE+2(2),=H'164'  SUPPLY QXST MINIMUM LENGTH
         CH    R8,=H'18'            LOOKING FOR QXST DATA?
         BNH   DB2XTRC2             YES
         SH    R8,=H'18'            NO
         CH    R8,=H'7'             LOOKING FOR QWAC DATA?
         BNH   QWACDATA             YES
         SH    R8,=H'7'             NO
         SLR   R14,R14
         ICM   R14,3,56(R15)        GET THE QBAC SECTION LENGTH
         CLM   14,3,=H'32'          ARE QBAC SECTIONS LONG ENOUGH?
         BL    LEFTMSG              NO, UNEXPECTED FORMAT
         ICM   R7,15,52(R15)        GET THE OFFSET TO THE SECTION
         BNP   LEFTMSG              REJECT UNEXPECTED FORMAT
         ALR   R7,R15               POINT TO THE DATA SECTION
         SLR   R1,R1
         ICM   R1,3,58(R15)         GET THE NUMBER OF QBAC SECTIONS
         BNP   LEFTMSG              REJECT UNEXPECTED FORMAT
QBACLOOP CH    R8,=H'4'             LOOKING FOR QBAC DATA?
         BNH   QBACDATA             YES
         SH    R8,=H'4'             NO, NOT YET ANYWAY
         ALR   R7,R14               POINT TO NEXT QBAC SECTION
         BCT   R1,QBACLOOP
         B     LEFTMSG              SCROLLED TOO FAR RIGHT FOR ANY DATA
QWACDATA CLC   =H'1',42(R15)        ONE ACCOUNTING DATA SECTION HERE?
         BNE   RTNREC               NO, UNEXPECTED FORMAT
         CLC   =H'124',40(R15)      YES, IS IT LONG ENOUGH?
         BH    RTNREC               NO, UNEXPECTED FORMAT
         ICM   R7,15,36(R15)        GET THE OFFSET TO THE SECTION
         BNP   RTNREC               REJECT UNEXPECTED FORMAT
         ALR   R7,R15               POINT TO THE DATA SECTION
         SLL   R8,2                 MULTIPLY BY FOUR FOR INDEX
         B     *(R8)
         B     QWAC1
         B     QWAC2
         B     QWAC3
         B     QWAC4
         B     QWAC5
         B     QWAC6
         B     QWAC7
QWAC1    LA    R4,30(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101D         CALL TIME DIFFERENTIAL ROUTINE
         MVC   40(12,R6),=X'85938197A2858440A3899485' C'ELAPSED TIME'
         LA    R7,16(,R7)           POINT TO TCB TIMES
         LA    R4,55(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101D         CALL TIME DIFFERENTIAL ROUTINE
         MVC   65(8,R6),=X'E3C3C240A3899485' C'TCB TIME'
         B     RTNREC
QWAC2    LA    R7,32(,R7)           POINT TO SRB TIMES
         LA    R4,30(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101D         CALL TIME DIFFERENTIAL ROUTINE
         MVC   40(8,R6),=X'E2D9C240A3899485' C'SRB TIME'
         ICM   R0,15,16(R7)         GET REASON ACCOUNTING WAS INVOKED
         CVD   R0,DOUBLE
         MVC   55(9,R6),ED9         LOAD RIGHT EDIT MASK
         ED    54(10,R6),DOUBLE+3   C'IS ACCT REASON'
         MVC   65(14,R6),=X'89A240C18383A340D98581A29695'
         B     RTNREC
QWAC3    LA    R1,IFC3LBLS-30       POINT TO LABELS
         LA    R7,68(,R7)           POINT TO COUNTERS
         SLR   R8,R8                ZERO INDEX
         LA    R0,1
         ICM   R14,15,30(R6)        LOAD BLANK EYE-CATCHER TO SHOW
         B     DB2LBLLP
QWAC4    LA    R7,76-8(,R7)         POINT TO BEFORE DB2 ELAPSED TIME
         LA    R4,30(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101A         CALL ABSOLUTE TIME ROUTINE
         MVC   40(8,R6),=X'C4C2F24085938197A28584' C'DB2 ELAPSED'
         LA    R7,8(,R7)            POINT TO BEFORE HOME TCB IN DB2
         LA    R4,55(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101A         CALL ABSOLUTE TIME ROUTINE
         MVC   65(15,R6),=X'C896948540E3C3C240899540C4C2F2'
         B     RTNREC               C'HOME TCB IN DB2'
QWAC5    LA    R7,92-8(,R7)         POINT TO BEFORE HOME SRB IN DB2
         LA    R4,30(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101A         CALL ABSOLUTE TIME ROUTINE
         MVC   40(15,R6),=X'C896948540E2D9C240899540C4C2F2'
*                                   C'HOME SRB IN DB2'
         LA    R7,8(,R7)            POINT TO BEFORE I/O ELAPSED TIME
         LA    R4,55(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101A         CALL ABSOLUTE TIME ROUTINE
         MVC   65(15,R6),=X'C961D64085938197A28440A68189A3'
         B     RTNREC               C'I/O ELAPSD WAIT'
QWAC6    MVC   72(8,R6),52(R7)      LOAD CCB NETWORK ID CHARACTER PART
         MVC   61(11,R6),=X'D585A3A696999260C9847E' C'NETWORK-ID='
         LA    R7,108-8(,R7)        POINT TO BEFORE LOCK+LATCH TIME
         LA    R4,30(,R6)           POINT TO OUTPUT AREA
         BAL   R14,TIME101A         CALL ABSOLUTE TIME ROUTINE
         MVC   40(15,R6),=X'D39683924ED381A3838840A3899485'
         B     RTNREC               C'LOCK+LATCH TIME'
QWAC7    LA    R1,IFC3LBLS          POINT TO LABELS
         LA    R7,116(,R7)          POINT TO COUNTERS
         SLR   R8,R8                ZERO INDEX
         LA    R0,1
         ICM   R14,15,30(R6)        LOAD BLANK EYE-CATCHER TO SHOW
         B     DB2LBLLP
QBACDATA LR    R0,R8                COPY "PAGE NUMBER"
         LA    R1,IFC3LBLS+30       POINT TO LABELS
         BCTR  R8,0                 DECREMENT FOR INDEX
         ICM   R14,15,0(R7)         LOAD BUFFER POOL IDENTIFIER
         CVD   R14,DOUBLE
         MVC   31(3,R6),ED3
         ED    30(4,R6),DOUBLE+6    USE BUFFER POOL ID AS EYE-CATCHER
         MVI   30(R6),X'82'         C'B'
         ICM   R14,15,30(R6)
         CLI   31(R6),C' '          ROOM FOR C'P'?
         BNE   DB2LBLLP             NO
         MVI   31(R6),X'97'         C'P'
         ICM   R14,15,30(R6)        YES
         B     DB2LBLLP
         SPACE
TIME101A STM   R14,R12,12(R13)      SAVE REGISTERS
         SLR   R0,R0
         SLR   R1,R1                ZERO "BEGINNING TIME"
         B     TIME101E
TIME101D STM   R14,R12,12(R13)      SAVE REGISTERS
         LM    R0,R1,0(R7)          LOAD BEGINNING TIME
         SRDL  R0,12                CONVERT TO MICROSECONDS
TIME101E LM    R8,R9,8(R7)          LOAD ENDING TIME
         SRDL  R8,12                CONVERT TO MICROSECONDS
         SLR   R9,R1                GET THE LOW-ORDER DIFFERENCE
         BNM   TIME101C             NO CARRY
         AH    R0,=H'1'             PERFORM CARRY
TIME101C SLR   R8,R0                GET THE HIGH-ORDER DIFFERENCE
         D     R8,=F'10000'         CONVERT TO CENTISECONDS
         CL    R9,=F'1000'          TIME LESS THAN 10 SECONDS?
         BL    SMAL101T             YES, SHOW SECONDS
         LA    R15,1(,R4)           NO, SHOW HOURS, MINUTES AND SECONDS
         BAL   R14,TIMEX
         B     EXIT101T
SMAL101T MVC   1(8,R4),=X'214B2020A28583A2' EDIT MASK + C'SECS'
         CVD   R9,DOUBLE
         ED    0(5,R4),DOUBLE+6
*        OI    1(R4),X'F0'          ENSURE LEADING DIGIT
EXIT101T LM    R14,R12,12(R13)      RESTORE REGISTERS
         BR    R14                  RETURN TO CALLER
         SPACE
DB2HDR2  CLM   R8,3,=H'1'           FETCH DISPLAY DATA FROM HERE?
         BH    DB2HDROK             NO, SO RETURN
         MVC   30(8,R6),4(R7)       SHOW AUTHORIZATION ID
         LTR   R8,R8                CURRENTLY LEFT MAX(-ISH)?
         BNZ   DB2PAGE              NO, NOT PAGE ZERO
         OC    39(12,R6),12(R7)     SHOW CORRELATION ID
         MVC   52(8,R6),24(R7)      SHOW CONNECTION NAME
         MVC   60(8,R6),32(R7)      SHOW PLAN NAME
         MVC   69(8,R6),40(R7)      SHOW ORIGINAL OPERATOR ID
         B     RTNREC               PROCESSING SUCCESSFULLY COMPLETED
DB2PAGE  MVC   39(15,R6),CORRELBL
         OC    54(12,R6),12(R7)     SHOW CORRELATION ID
         MVC   67(5,R6),PLANLBL
         MVC   72(8,R6),32(R7)      SHOW PLAN NAME
         B     RTNREC               PROCESSING SUCCESSFULLY COMPLETED
         SPACE
*       ROUTINE TO GET A DATA SECTION FROM A DB2 SMF RECORD.
*       DOUBLE FORMS THE INTERFACE BETWEEN THIS ROUTINE AND THE CALLER.
*       +0 - 2-BYTE CONTROL BLOCK ID.
*       +2 - 2-BYTE MINIMUM ACCEPTABLE DATA SECTION LENGTH.
*       +4 - 4-BYTE CONTROL BLOCK EYE CATCHER RETURNED BY THIS ROUTINE.
*       R11 CONTAINS THE NON-PRODUCT DATA SECTION COUNT.
*       R14 CONTAINS THE RETURN ADDRESS.
*       R15 POINTS TO THE SMF RECORD RDW.
DB2SECT  LA    R1,36(,R15)          POINT TO FIRST DATA SECTION DETAILS
SDSLOOP  CLC   =H'1',6(R1)          ONLY ONE OF THIS SECTION?
         BNE   NEXTSDS              NO, CAN'T BE THE REQUIRED TYPE
         CLC   4(2,R1),DOUBLE+2     EXPECTED SECTION LENGTH?
         BL    NEXTSDS              NO, TOO SHORT FOR REQUIRED DATA
         ICM   R7,15,0(R1)          YES, GET SECTION OFFSET
         BNP   NEXTSDS              REJECT UNEXPECTED FORMAT
         ALR   R7,R15               GET DATA SECTION ADDRESS
         CLC   0(2,R7),DOUBLE       CORRECT CONTROL BLOCK ID?
         BNE   NEXTSDS              NO, TRY FOR THE NEXT ONE
         MVC   DOUBLE+4(4),4(R7)    YES, SUPPLY EYE CATCHER
         BR    R14                  RETURN WITH SUCCESS
NEXTSDS  LA    R1,8(,R1)            NO, POINT TO NEXT SELF-DEFINING
         BCT   R11,SDSLOOP              SECTION AND PROCESS IT
         MVC   35(L'DB2SNOTF,R6),DB2SNOTF
         B     RTNREC               NOT FOUND SO SHOW MESSAGE AND EXIT
         SPACE
         DROP  R5                   DB2REC
         SPACE
IFCIDIS  DC    C'IFCID ',X'89A2'    C'IFCID IS'
CORRELBL DC    X'C3969999859381A389969560C9847E' C'CORRELATION-ID='
*        DC    C'CORRELATION HEADER NOT PRESENT'
CORRELNA DC    X'C3969999859381A389969540C88581848599409596A340979985A2+
               8595A3'
PLANLBL  DC    X'D79381957E'        C'PLAN='
IFC1LBLS DS    0C                                          PG
*                                   QSST SECTION COUNTERS
*        DC    CL15'FIX POOL CREATE',CL15'FIX POOL DEALOC'  1
         DC    XL15'C689A740D796969340C3998581A385'
         DC    XL15'C689A740D796969340C48581939683'
*        DC    CL15'F.P. SEGS FREED',CL15'F.P. SEGS EXPND'  2
         DC    XL15'C64BD74B40E28587A240C699858584'
         DC    XL15'C64BD74B40E28587A240C5A7979584'
*        DC    CL15'F.P SEGS CNTRCT',CL15'VAR POOL CREATE'  3
         DC    XL15'C64BD740E28587A240C395A39983A3'
         DC    XL15'E5819940D796969340C3998581A385'
*        DC    CL15'VAR POOL DEALOC',CL15'V.P. SEGS FREED'  4
         DC    XL15'E5819940D796969340C48581939683'
         DC    XL15'E54BD74B40E28587A240C699858584'
*        DC    CL15'V.P. SEGS EXPND',CL15'V.P SEGS CNTRCT'  5
         DC    XL15'E54BD74B40E28587A240C5A7979584'
         DC    XL15'E54BD740E28587A240C395A39983A3'
*        DC    CL15'GETMAIN ^FX/VAR',CL15'FREEMAIN ^FX/VR'  6
         DC    CL15'GETMAIN ^FX/VAR'
         DC    CL15'FREEMAIN ^FX/VR'
*        DC    CL15'G(/F)MAIN RC^=0',CL15'SHRT STG CNTRCT'  7
         DC    CL15'G(/F)MAIN RC^=0'
         DC    XL15'E28899A340E2A38740C395A39983A3'
*        DC    CL15'SHORT ON STORAG',CL15'ABENDS FROM S-S'  8
         DC    XL15'E2889699A340969540E2A396998187'
         DC    XL15'C182859584A2408699969440E260E2'
*                                   QJST SECTION COUNTERS
*        DC    CL15'WRITES, WAIT   ',CL15'WRITES, NOWAIT '  1
         DC    XL15'E69989A385A26B40E6C1C9E3404040'
         DC    XL15'E69989A385A26B40D5D6E6C1C9E340'
*        DC    CL15'WRITES, FORCE  ',CL15'ACTIVE BFR WAIT'  2
         DC    XL15'E69989A385A26B40C6D6D9C3C54040'
         DC    XL15'C183A389A58540C2869940E68189A3'
*        DC    CL15'OUTPUT BFR READ',CL15'ACTIVE LOG READ'  3
         DC    XL15'D6A4A397A4A340C2869940D9858184'
         DC    XL15'C183A389A58540D3968740D9858184'
*        DC    CL15'ARCHIV LOG READ',CL15'ALLOC DLY READS'  4
         DC    XL15'C199838889A540D3968740D9858184'
         DC    XL15'C19393968340C493A840D9858184A2'
*        DC    CL15'BSDS ACCESSES  ',CL15'ACT LOG OTPT CI'  5
         DC    XL15'C2E2C4E240C1838385A2A285A24040'
         DC    XL15'C183A340D3968740D6A397A340C3C9'
*        DC    CL15'LOG WRITE CALLS',CL15'ARCH LOG RD ALC'  6
         DC    XL15'D3968740E69989A38540C3819393A2'
         DC    XL15'C199838840D3968740D98440C19383'
*        DC    CL15'ARCH LOG WR ALC',CL15'CONTROLINTRVALS'  7
         DC    XL15'C199838840D3968740E69940C19383'
         DC    XL15'C39695A3999693C995A399A58193A2'
         SPACE
IFC2LBLS DS    0C                                          PG
*                                   QXST SECTION COUNTERS
*        DC    CL15'SELECTS        ',CL15'INSERTS        '  1
         DC    XL15'E285938583A3A24040404040404040'
         DC    XL15'C995A28599A3A24040404040404040'
*        DC    CL15'UPDATES        ',CL15'DELETES        '  2
         DC    XL15'E4978481A385A24040404040404040'
         DC    XL15'C4859385A385A24040404040404040'
*        DC    CL15'DESCRIBES      ',CL15'PREPARES       '  3
         DC    XL15'C485A28399898285A2404040404040'
         DC    XL15'D7998597819985A240404040404040'
*        DC    CL15'OPENS          ',CL15'CLOSES         '  4
         DC    XL15'D6978595A240404040404040404040'
         DC    XL15'C39396A285A2404040404040404040'
*        DC    CL15'CREATE TABLE   ',CL15'CREATE INDEX   '  5
         DC    XL15'C3998581A38540E381829385404040'
         DC    XL15'C3998581A38540C9958485A7404040'
*        DC    CL15'CREATE TABLESPC',CL15'CREATE SYNONYM '  6
         DC    XL15'C3998581A38540E381829385A29783'
         DC    XL15'C3998581A38540E2A8959695A89440'
*        DC    CL15'CREATE DATABASE',CL15'CREATE STOGROUP'  7
         DC    XL15'C3998581A38540C481A3818281A285'
         DC    XL15'C3998581A38540E2A396879996A497'
*        DC    CL15'CREATE VIEW    ',CL15'DROP INDEX     '  8
         DC    XL15'C3998581A38540E58985A640404040'
         DC    XL15'C499969740C9958485A74040404040'
*        DC    CL15'DROP TABLE     ',CL15'DROP TABLESPACE'  9
         DC    XL15'C499969740E3818293854040404040'
         DC    XL15'C499969740E381829385A297818385'
*        DC    CL15'DROP DATABASE  ',CL15'DROP SYNONYM   ' 10
         DC    XL15'C499969740C481A3818281A2854040'
         DC    XL15'C499969740E2A8959695A894404040'
*        DC    CL15'DROP STORGROUP ',CL15'DROP VIEW      ' 11
         DC    XL15'C499969740E2A39699879996A49740'
         DC    XL15'C499969740E58985A6404040404040'
*        DC    CL15'ALTER STORGROUP',CL15'FETCHS         ' 12
         DC    XL15'C193A3859940E2A39699879996A497'
         DC    XL15'C685A38388A2404040404040404040'
*        DC    CL15'ALTER TABLESPAC',CL15'ALTER TABLE    ' 13
         DC    XL15'C193A3859940E381829385A2978183'
         DC    XL15'C193A3859940E38182938540404040'
*        DC    CL15'ALTER INDEX    ',CL15'COMMENT ON     ' 14
         DC    XL15'C193A3859940C9958485A740404040'
         DC    XL15'C39694948595A340D6954040404040'
*        DC    CL15'LOCK TABLE     ',CL15'GRANTS         ' 15
         DC    XL15'D396839240E3818293854040404040'
         DC    XL15'C7998195A3A2404040404040404040'
*        DC    CL15'REVOKES        ',CL15'INCREMNTL BINDS' 16
         DC    XL15'D985A5969285A24040404040404040'
         DC    XL15'C9958399859495A39340C2899584A2'
*        DC    CL15'LABEL ON       ',CL15'SET CURNT SQLID' 17
         DC    XL15'D38182859340D69540404040404040'
         DC    XL15'E285A340C3A49995A340E2D8D38984'
*        DC    CL15'CREATE ALIAS   ',CL15'DROP ALIAS     ' 18
         DC    XL15'C3998581A38540C1938981A2404040'
         DC    XL15'C499969740C1938981A24040404040'
*                                   QTST SECTION COUNTERS
*        DC    CL15'ALLOC ATTEMPTS ',CL15'ALLOC SUCCESSES'  1
         DC    XL15'C1939396834081A3A3859497A3A240'
         DC    XL15'C19393968340A2A4838385A2A285A2'
*        DC    CL15'AUTO BIND TRIES',CL15'AUTO BINDS OKAY'  2
         DC    XL15'C1A4A39640C289958440A3998985A2'
         DC    XL15'C1A4A39640C2899584A240969281A8'
*        DC    CL15'BAD RESOURCE-ID',CL15'BIND ADD SUBCMD'  3
         DC    XL15'C2818440D983A296A499838560C984'
         DC    XL15'C289958440C1848440A2A482839484'
*        DC    CL15'BIND REP SUBCMD',CL15'TEST BINDS     '  4
         DC    XL15'C289958440D9859740A2A482839484'
         DC    XL15'E385A2A340C2899584A24040404040'
*        DC    CL15'PLANS BOUND    ',CL15'REBIND SUB-CMDS'  5
         DC    XL15'D7938195A240C296A4958440404040'
         DC    XL15'D9858289958440A2A48260839484A2'
*        DC    CL15'REBIND ATTEMPTS',CL15'PLANS REBOUND  '  6
         DC    XL15'D985828995844081A3A3859497A3A2'
         DC    XL15'D7938195A240D9858296A495844040'
*        DC    CL15'FREE SUB-CMDS  ',CL15'PLAN FREE ATMPS'  7
         DC    XL15'C699858540A2A48260839484A24040'
         DC    XL15'D793819540C69985854081A39497A2'
*        DC    CL15'PLANS FREED    ',CL15'AUTHORZATN CHKS'  8
         DC    XL15'D7938195A240C69985858440404040'
         DC    XL15'C1A4A3889699A981A39540C38892A2'
*        DC    CL15'AUTH CHECKS OK ',CL15'DATA SETS OPEN '  9
         DC    XL15'C1A4A38840C388858392A240D6D240'
         DC    XL15'C481A38140E285A3A240D697859540'
*        DC    CL15'MAX D/S OPEN   ',CL15'CACHE AUTHCH OK' 10
         DC    XL15'D481A740C461E240D6978595404040'
         DC    XL15'C38183888540C1A4A388838840D6D2'
*                                   QISE SECTION COUNTERS
*        DC    CL15'POOL FULL FAILS',CL15'EDM POOL PAGES '  1
         DC    XL15'D796969340C6A493934086818993A2'
         DC    XL15'C5C4D440D79696934097818785A240'
*        DC    CL15'CT SECTION REQS',CL15'CT SECT DA LOAD'  2
         DC    XL15'C3E340E28583A389969540998598A2'
         DC    XL15'C3E340E28583A340C4C14093968184'
*        DC    CL15'CT PAGES USED  ',CL15'FREE CHAIN PGS '  3
         DC    XL15'C3E340D7818785A240A4A285844040'
         DC    XL15'C699858540C388818995409787A240'
*        DC    CL15'DBD PAGES USED ',CL15'SKCT PAGES USED'  4
         DC    XL15'C4C2C440D7818785A240A4A2858440'
         DC    XL15'E2D2C3E340D7818785A240A4A28584'
*        DC    CL15'DBD REQUESTS   ',CL15'DBD DASD LOADS '  5
         DC    XL15'C4C2C440998598A485A2A3A2404040'
         DC    XL15'C4C2C440C4C1E2C44093968184A240'
*                                   QBST SECTION COUNTERS
*        DC    CL15'GET PAGES      ',CL15'SYNC READ I/OS '  1
IFC2QBST DC    XL15'C785A340D7818785A2404040404040'
         DC    XL15'E2A8958340D985818440C961D6A240'
*        DC    CL15'BUFR POOL EXPAN',CL15'MAXLIM XPN FAIL'  2
         DC    XL15'C2A4869940D79696934085A7978195'
         DC    XL15'9481A793899440A797954086818993'
*        DC    CL15'GETMN XPAN FAIL',CL15'SYSTEM PG SETWS'  3
         DC    XL15'C785A3949540A79781954086818993'
         DC    XL15'E2A8A2A3859440978740E2C5E3E6A2'
*        DC    CL15'UW PAGE SETWS  ',CL15'SYS PAGE WRITES'  4
         DC    XL15'E4E6409781878540E2C5E3E6A24040'
         DC    XL15'E2A8A2409781878540E69989A385A2'
*        DC    CL15'UW PAGE WRITES ',CL15'ASYNC WRITE I/O'  5
         DC    XL15'E4E6409781878540E69989A385A240'
         DC    XL15'C1A2A8958340E69989A38540C961D6'
*        DC    CL15'CRNT ACT BUFFRS',CL15'PG-IN/READ-I/O '  6
         DC    XL15'839995A3408183A34082A4868699A2'
         DC    XL15'D78760899561D985818460C961D640'
*        DC    CL15'PG-IN/WRITE-I/O',CL15'D/S OPENED OKAY'  7
         DC    XL15'D78760899561E69989A38560C961D6'
         DC    XL15'8461A24096978595858440969281A8'
*        DC    CL15'SYNC WRITE I/OS',CL15'SEQ PREFETCHES '  8
         DC    XL15'E2A8958340E69989A38540C961D6A2'
         DC    XL15'E2859840D799858685A3838885A240'
*        DC    CL15'SEQ PRE PG READ',CL15'PRE DISAB (BFR)'  9
         DC    XL15'E2859840D7998540D7874099858184'
         DC    XL15'D79985408489A28182404D8286995D'
*        DC    CL15'PRE DISAB (ENG)',CL15'WRT ENG UNAVAIL' 10
         DC    XL15'D79985408489A28182404D8595875D'
         DC    XL15'E699A340C5958740A49581A5818993'
*        DC    CL15'DFR WRITE THRSH',CL15'WPHFWT THRESHLD' 11
         DC    XL15'C4869940E69989A38540A38899A288'
         DC    XL15'E6D7C8C6E6E340A3889985A2889384'
*        DC    CL15'MIGRATED D/SETS',CL15'RECALL TIMEOUTS' 12
         DC    XL15'D489879981A38584408461A285A3A2'
         DC    XL15'D9858381939340A389948596A4A3A2'
*        DC    CL15'ASYNC READ I/OS',CL15'WK PREFTCH FAIL' 13
         DC    XL15'C1A2A8958340D985818440C961D6A2'
         DC    XL15'E6D24097998586A383884086818993'
*        DC    CL15'WK D/S BFR FAIL',CL15'PRE DISAB (CON)' 14
         DC    XL15'E6D2408461A2408286994086818993'
         DC    XL15'D79985408489A28182404D8396955D'
         SPACE
IFC3LBLS DS    0C                                          PG
*                                   QWAC SECTION COUNTERS
*        DC    CL15'PHS2 COMMIT REQ',CL15'ABORT REQUESTS '  3
         DC    XL15'D788A2F240C396949489A340998598'
         DC    XL15'C1829699A340998598A485A2A3A240'
*        DC    CL15'DB2 ENTRY/EXITS',CL15'WAIT TRACE EVNT'  6
         DC    XL15'C4C2F2408595A399A86185A789A3A2'
         DC    XL15'E68189A340E3998183854085A595A3'
*                                   QBAC SECTION COUNTERS
*        DC    CL15'BUFFER POOL ID ',CL15'GET PAGES      '  1
         DC    XL15'C2A48686859940D796969340C98440'
         DC    XL15'C785A340D7818785A2404040404040'
*        DC    CL15'BUFR POOL EXPAN',CL15'SYSTEM PG SETWS'  2
         DC    XL15'C2A4869940D79696934085A7978195'
         DC    XL15'E2A8A2A3859440978740E2C5E3E6A2'
*        DC    CL15'UW PAGE SETWS  ',CL15'SYNC READ I/OS '  3
         DC    XL15'E4E6409781878540E2C5E3E6A24040'
         DC    XL15'E2A8958340D985818440C961D6A240'
*        DC    CL15'SEQ PREFETCHES ',CL15'SYNC WRITE I/OS'  4
         DC    XL15'E2859840D799858685A3838885A240'
         DC    XL15'E2A8958340E69989A38540C961D6A2'
*        DC    C'DATA SECTION NOT FOUND'
DB2SNOTF DC    X'C481A38140E28583A3899695409596A3408696A49584'
         LTORG
         TITLE 'CICS RECORD TYPE SUBROUTINE'
         USING CICSRC,R5
CICSRC   DS    0H                  SMF RECORD TYPE 110
         TM    0(R2),X'C0'          SUBSYSTEM AND SUBTYPE PRESENT?
         BNO   UNUSED               PROBABLY AN F4 AIM RECORD (110-117)
         MVC   25(4,R6),14(R2)      SHOW SUBSYSTEM NAME 'CICS'
         LA    R0,4                 LENGTH OF RDW
         LR    R15,R2               POINT TO SMF RECORD TYPE
         SLR   R15,R0               POINT TO RDW TO SIMPLIFY PROCESSING
         ICM   R0,3,20(R2)          GET NUMBER OF TRIPLETS
         LA    R3,2
         CR    R0,R3                ENOUGH SETS OF TRIPLETS?
         BL    RTNREC               NO
         LA    R3,9
         CLM   R3,3,18(R2)          SHOWABLE SUBTYPE NUMBER?
         BL    CICSUBOK             NO
         MVC   3(1,R6),19(R2)       YES
         OI    3(R6),X'F0'          SHOW SUBTYPE
CICSUBOK LA    R0,1
         CLM   R0,3,30(R2)          ONE PRODUCT SECTION?
         BNE   RTNREC               NO, THIS IS UNEXPECTED
         ICM   R0,15,24(R2)         YES, GET ITS OFFSET
         ALR   R15,R0               POINT TO IT
         UNPK  29(5,R6),0(3,R15)    SHOW CICS VERSION
         TR    29(4,R6),HEXCHARS-240
         MVI   33(R6),C' '
         CLI   29(R6),C'0'          LEADING ZERO?
         BNE   *+8                  NO
         MVI   29(R6),C' '          YES, SUPPRESS IT
         MVC   34(8,R6),2(R15)      SHOW GENERIC APPLID
         MVC   43(8,R6),10(R15)     SHOW SPECIFIC APPLID
         B     RTNREC
         DROP  R5                   CICSRC
         SPACE
         LTORG
         TITLE 'PDLF RECORD TYPE SUBROUTINES'
         USING PDLFRC,R5
PDLFRC   DS    0H                  SMF RECORD TYPE 127
         MVC   25(4,R6),16(R2)      DISPLAY RECORD IDENTIFIER
         SLR   R11,R11
         ICM   R11,3,42(R2)         GET THE ELEMENT COUNT
         BZ    PDLFZERO             REPORT NO ELEMENTS IN RECORD
         CLI   16(R2),C'S'          SYSTEM PERFORMANCE DATA?
         BE    PDLFSYS              YES
         CLI   16(R2),C'I'          I/O PERFORMANCE DATA?
         BE    PDLFIO               YES
         CLI   16(R2),C'P'          PERFORMANCE GROUP PERFORMANCE DATA?
         BE    PDLFSYS              YES
         B     RTNREC               OTHER RECORD TYPES NOT SUPPORTED
         SPACE
PDLFSYS  BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         CLR   R11,R0
         BL    LEFTMSG              ELEMENT COUNT LESS THAN PAGE NUMBER
         SLR   R7,R7
         ICM   R7,3,40(R2)          GET OFFSET TO FIRST ELEMENT
         LA    R7,16(R7,R2)         POINT TO FIRST ELEMENT
         LA    R1,44(,R2)           POINT TO FIRST ELEMENT DESCRIPTOR
         SLR   R3,R3
PDLFSLP1 CLM   R0,1,0(R1)           UP TO CORRECT ELEMENT?
         BE    PDLFSEOK             YES
         ICM   R3,3,2(R1)           NO, GET LENGTH OF THIS ELEMENT
         ALR   R7,R3                POINT TO NEXT ELEMENT
         LA    R1,4(,R1)            POINT TO NEXT ELEMENT DESCRIPTOR
         BCT   R11,PDLFSLP1
         B     RTNREC               AVOID INFINITE LOOP IF FORMAT ERROR
PDLFSEOK CLI   16(R2),C'P'          PERFORMANCE GROUP PERFORMANCE DATA?
         BE    PDLFPERF             YES, SHOW PERFORMANCE PERIOD DATA
         CLI   0(R1),1              ELEMENT 1?
         BE    PDLFS1               YES, SHOW CPU UTILIZATION
         CLI   0(R1),2              ELEMENT 2?
         BE    PDLFS2               YES, SHOW PAGING FIGURES
         CLI   0(R1),3              ELEMENT 3?
         BE    PDLFS3               YES, SHOW STORAGE FIGURES
         MVC   40(20,R6),PDLFMSG1   UNKNOWN ELEMENT TYPE
         STC   R0,48(,R6)
         TR    48(1,R6),HEXCHARS    SHOW ELEMENT NUMBER IN MESSAGE
         B     RTNREC
         SPACE
PDLFS1   MVC   35(4,R6),=C'CPU:'    DENOTE CPU UTILIZATION
         LA    R11,40(,R6)          POINT TO FIRST CP DISPLAY SLOT
         ICM   R0,3,2(R1)           GET THE MAX CP COUNT (8)
         SLR   R3,R3                CLEAR FOR INSERT
PDLFS1CP CLI   0(R7),X'FF'          OFFLINE CP?
         BE    PDLFS1NX             YES, LEAVE THIS DISPLAY SLOT BLANK
         IC    R3,0(,R7)            GET CP UTILIZATION
         CVD   R3,DOUBLE
         MVC   1(3,R11),ED3
         ED    0(4,R11),DOUBLE+6    SHOW CP UTLIZATION
         MVI   4(R11),C'%'          INDICATE PERCENTAGE
PDLFS1NX LA    R7,1(,R7)            POINT TO THE NEXT CP SLOT
         LA    R11,5(,R11)          POINT TO THE NEXT DISPLAY SLOT
         BCT   R0,PDLFS1CP          PROCESS NEXT CP
         B     RTNREC
         SPACE
PDLFS2   SLR   R1,R1
         ICM   R1,3,32(R2)          GET THE INTERVAL IN MINUTES
         MH    R1,=H'6'             CONVERT TO DEKASECONDS
         ICM   R8,15,0(R7)          GET NON-SWAP PAGE-INS
         ICM   R9,15,4(R7)          GET NON-SWAP PAGE-OUTS
         AR    R9,R8                GET NON-SWAP PAGE TRANSFERS
         SLR   R8,R8
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   31(7,R6),=X'40202021204B20'
         ED    31(7,R6),DOUBLE+5
         MVC   38(4,R6),=X'978761A2'        C'PG/S'
         ICM   R9,15,8(R7)          GET SWAP COUNT
         M     R8,=F'10'
         DR    R8,R1                GET SWAPS PER CENTASECOND
         CVD   R9,DOUBLE
         MVC   43(7,R6),=X'402021204B2020'
         ED    43(7,R6),DOUBLE+5
         MVC   50(15,R6),=X'9788A8A28983819360A2A6819761A2'
*                                           C'PHYSICAL-SWAP/S'
         ICM   R8,15,12(R7)         GET SWAP PAGE-INS
         ICM   R9,15,16(R7)         GET SWAP PAGE-OUTS
         AR    R9,R8                GET SWAP PAGE TRANSFERS
         SLR   R8,R8
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   66(7,R6),=X'40202021204B20'
         ED    66(7,R6),DOUBLE+5
         MVC   73(7,R6),=X'A2A697978761A2'  C'SWPPG/S'
         B     RTNREC
         SPACE
PDLFS3   MVC   25(7,R6),=C'(E)CSA:'
         ICM   R1,15,0(R7)          GET CSA+ECSA AVERAGE FRAME COUNT
         SLL   R1,2                 CONVERT TO KILOBYTES
         CVD   R1,DOUBLE
         MVC   33(5,R6),ED5
         ED    32(6,R6),DOUBLE+5
         MVC   38(6,R6),=X'D260D9858193'    C'K-REAL'
         ICM   R1,15,4(R7)          GET CSA+ECSA AVERAGE PAGE COUNT
         SLL   R1,2                 CONVERT TO KILOBYTES
         CVD   R1,DOUBLE
         MVC   45(5,R6),ED5
         ED    44(6,R6),DOUBLE+5
         MVC   50(6,R6),=X'D260E58999A3'    C'K-VIRT'
         ICM   R1,15,8(R7)          GET SQA AVERAGE PAGE COUNT
         SLL   R1,2                 CONVERT TO KILOBYTES
         CVD   R1,DOUBLE
         MVC   58(5,R6),ED5
         ED    57(6,R6),DOUBLE+5
         MVC   63(5,R6),=C'K-SQA'
         ICM   R1,15,12(R7)         GET ESQA AVERAGE PAGE COUNT
         SLL   R1,2                 CONVERT TO KILOBYTES
         CVD   R1,DOUBLE
         MVC   69(5,R6),ED5
         ED    68(6,R6),DOUBLE+5
         MVC   74(6,R6),=C'K-ESQA'
         B     RTNREC
         SPACE
PDLFIO   BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         SLR   R7,R7
         ICM   R7,3,40(R2)          GET OFFSET TO FIRST ELEMENT
         LA    R7,16(R7,R2)         POINT TO FIRST ELEMENT
         LA    R1,44(,R2)           POINT TO FIRST ELEMENT DESCRIPTOR
         CLI   0(R1),1              DESCRIBING ELEMENT 1?
         BNE   RTNREC               NO, FORMAT ERROR
         SLR   R3,R3                YES
         ICM   R3,3,2(R1)           GET LENGTH OF THIS ELEMENT
         SRA   R3,1                 GET THE NUMBER OF CHANNELS
         BZ    PDLFDEV              DO DEVICES IF RECORD CONTINUATION
         SLR   R8,R8                RESET CHANNEL IDENTIFIER
PDLFCHLP CLI   0(R7),X'FF'          OFFLINE CHANNEL?
         BE    PDLFCHNX             YES, LEAVE THIS DISPLAY SLOT BLANK
         BCT   R0,PDLFCHNX          NO, COUNT THIS AS A DISPLAY PAGE
         MVC   30(7,R6),=X'C3888195958593'  C'CHANNEL'
         STC   8,DOUBLE             SHOW THE CHANNEL NUMBER
         UNPK  38(3,R6),DOUBLE(2)
         TR    38(2,R6),HEXCHARS-240
         MVI   40(R6),C':'          ERASE GARBAGE
         ICM   R8,3,0(R7)           GET CHANNEL UTILIZATION
         CVD   R8,DOUBLE
         MVC   42(3,R6),ED3
         ED    41(4,R6),DOUBLE+6    SHOW CHANNEL UTLIZATION
         MVI   45(R6),C'%'          INDICATE PERCENTAGE
         B     RTNREC               DISPLAY NOW DONE
PDLFCHNX LA    R7,2(,R7)            POINT TO NEXT CHANNEL SLOT
         LA    R8,1(,R8)            INCREMENT CHANNEL IDENTIFIER NUMBER
         BCT   R3,PDLFCHLP
PDLFDEV  CLI   4(R1),2              SECOND ELEMENT DESCRIPTOR FOLLOWS?
         BNE   LEFTMSG              NO, FORMAT ERROR BUT ELEMENT 1 OK
         ICM   R3,3,6(R1)           GET LENGTH OF SECOND ELEMENT
         SRA   R3,6                 GET NUMBER OF DEVICES
PDLFDVLP BCT   R0,PDLFDVNX          COUNT ONLINE DASD AS A DISPLAY PAGE
         UNPK  30(5,R6),8(3,R7)     SHOW DEVICE NUMBER OR ADDRESS
         TR    30(4,R6),HEXCHARS-240
         MVI   34(R6),C' '
         CLI   30(R6),C'0'          LEADING ZERO?
         BNE   PDLFUAOK             NO, LEAVE DIGIT ON SHOW
         MVI   30(R6),C' '          YES, SUPPRESS IT
PDLFUAOK MVC   36(6,R6),32(R7)      COPY VOLUME SERIAL NUMBER
         MVC   44(8,R6),40(R7)      COPY DEVICE TYPE NAME
         ICM   R9,15,12(R7)         GET I/O OPERATION COUNT
         BZ    RTNREC               LEAVE BLANK IF NO ACTIVITY
         SLR   R1,R1
         ICM   R1,3,32(R2)          GET THE INTERVAL IN MINUTES
         MH    R1,=H'6'             CONVERT TO DEKASECONDS
         SLR   R8,R8
         DR    R8,R1                GET I/O OPERATIONS PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   53(7,R6),=X'40202021204B20'
         ED    53(7,R6),DOUBLE+5
         MVC   60(4,R6),=X'899661A2'        C'IO/S'
         ICM   R9,15,16(R7)         GET TOTAL RESPONSE TIME (MS)
         ICM   R1,15,12(R7)         GET I/O OPERATION COUNT
         SLR   R8,R8
         DR    R8,R1                GET MILLISECONDS PER I/O
         CVD   R9,DOUBLE
         MVC   66(3,R6),ED3
         ED    65(4,R6),DOUBLE+6
         MVC   69(5,R6),=X'94A2618996'      C'MS/IO'
         ICM   R8,3,22(R7)          GET DEVICE UTILIZATION
         CVD   R8,DOUBLE
         MVC   76(3,R6),ED3
         ED    75(4,R6),DOUBLE+6    SHOW DEVICE UTLIZATION
         MVI   79(R6),C'%'          INDICATE PERCENTAGE
         B     RTNREC               DISPLAY NOW DONE
PDLFDVNX LA    R7,64(,R7)           POINT TO NEXT DEVICE SLOT
         BCT   R3,PDLFDVLP
         B     LEFTMSG              PAGE NUMBER IS TOO LARGE
         SPACE
PDLFPERF SLR   R0,R0                SHOW PERFORMANCE GROUP NUMBER
         IC    R0,0(,R7)
         CVD   R0,DOUBLE
         MVC   32(4,R6),=X'60202120'
         ED    32(4,R6),DOUBLE+6
         MVC   30(3,R6),=X'D78795'          C'PGN'
         MVC   37(2,R6),=X'9797'            C'PP'
         MVC   39(1,R6),1(R7)       SHOW PERFORMANCE PERIOD NUMBER
         TR    39(1,R6),HEXCHARS
         SLR   R9,R9                ZERO ACCUMULATOR
         LA    R8,4(,R7)            POINT TO FIRST CP SLOT
         LA    R11,8                LOAD MAXIMUM CP COUNT
PDLFPCP  CLI   0(R8),X'FF'          ACTIVE CP?
         BE    PDLFPCPN             NO
         IC    R0,0(,R8)            YES, GET PERCENTAGE
         AR    R9,R0                ACCUMULATE
PDLFPCPN LA    R8,1(,R8)            POINT TO NEXT CP SLOT
         BCT   R11,PDLFPCP
         CVD   R9,DOUBLE            SHOW TOTAL CP UTILIZATION
         MVC   42(3,R6),ED3
         ED    41(4,R6),DOUBLE+6
         MVC   45(4,R6),=X'6C8397A4'        C'%CPU'
         ICM   R9,15,12(R7)         GET I/O OPERATION COUNT
         BZ    RTNREC               LEAVE BLANK IF NO ACTIVITY
         SLR   R1,R1
         ICM   R1,3,32(R2)          GET THE INTERVAL IN MINUTES
         MH    R1,=H'6'             CONVERT TO DEKASECONDS
         SLR   R8,R8
         DR    R8,R1                GET I/O OPERATIONS PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   49(7,R6),=X'40202021204B20'
         ED    49(7,R6),DOUBLE+5
         MVC   56(4,R6),=X'899661A2'        C'IO/S'
         ICM   R9,15,16(R7)         GET TOTAL RESPONSE TIME (MS)
         ICM   R1,15,12(R7)         GET I/O OPERATION COUNT
         SLR   R8,R8
         DR    R8,R1                GET MILLISECONDS PER I/O
         CVD   R9,DOUBLE
         MVC   61(5,R6),ED5
         ED    60(6,R6),DOUBLE+5
         MVC   66(5,R6),=X'94A2618996'      C'MS/IO'
         SLR   R1,R1
         ICM   R1,3,44(R7)          GET THE TRANSACTION/JOB COUNT
         BZ    RTNREC               LEAVE TIME BLANK IF NONE
         ICM   R9,15,48(R7)         GET TOTAL MILLISECONDS
         SLR   R8,R8
         DR    R8,R1                GET TIME PER TRANSACTION
         CVD   R9,DOUBLE
         OC    DOUBLE(5),DOUBLE     MORE THAN 99999 MILLISECONDS?
         BNZ   PDLFPBIG             YES
         MVC   73(5,R6),ED5         NO
         ED    72(6,R6),DOUBLE+5    SHOW MILLISECONDS
         MVC   78(2,R6),=X'94A2'            C'MS'
         B     RTNREC
PDLFPBIG SRP   DOUBLE,64-3,5        ROUND TO SECONDS
         MVC   72(5,R6),ED5         NO
         ED    71(6,R6),DOUBLE+5    SHOW SECONDS
         MVC   77(3,R6),=X'A28583'          C'SEC'
         B     RTNREC
         SPACE
PDLFZERO MVC   40(26,R6),PDLFMSG0   INDICATE NO PDLF DATA PRESENT
         B     RTNREC
         DROP  R5                   PDLFRC
         SPACE
*        DC    C'NO PDLF ELEMENTS IN RECORD'
PDLFMSG0 DC    X'D59640D7C4D3C640859385948595A3A240899540998583969984'
*        DC    C'ELEMENT X IS UNKNOWN'
PDLFMSG1 DC    X'C59385948595A340E74089A240A495929596A695'
         LTORG
         TITLE 'USER RECORD TYPE SUBROUTINES'
         USING HSMDAY,R5
HSMDAY   DS    0H                  SMF RECORD TYPE 128 OR 240
         SLR   R0,R0
         ICM   R0,3,136(R2)         SYSTEM-REQUESTED VOLUME DUMP COUNT
         CVD   R0,DOUBLE
         MVC   20(5,R6),ED5
         ED    19(6,R6),DOUBLE+5
         MVI   26(R6),C'+'
         ICM   R0,3,138(R2)         USER-REQUESTED VOLUME DUMP COUNT
         CVD   R0,DOUBLE
         MVC   28(5,R6),ED5
         ED    27(6,R6),DOUBLE+5
         MVI   34(R6),C'-'
         ICM   R0,3,140(R2)         VOLUME DUMP FAILURE COUNT
         CVD   R0,DOUBLE
         MVC   36(5,R6),ED5
         ED    35(6,R6),DOUBLE+5
         MVC   42(5,R6),=X'84A49497A2'   C'DUMPS'
         ICM   R0,3,142(R2)         SYSTEM-REQUESTED VOLUME DUMP COPIES
         CVD   R0,DOUBLE
         MVC   52(5,R6),ED5
         ED    51(6,R6),DOUBLE+5
         MVI   58(R6),C'+'
         ICM   R0,3,144(R2)         USER-REQUESTED VOLUME DUMP COPIES
         CVD   R0,DOUBLE
         MVC   60(5,R6),ED5
         ED    59(6,R6),DOUBLE+5
         MVI   66(R6),C'-'
         ICM   R0,3,146(R2)         VOLUME DUMP COPIES FAILURE COUNT
         CVD   R0,DOUBLE
         MVC   68(5,R6),ED5
         ED    67(6,R6),DOUBLE+5
         MVC   74(6,R6),=X'8396978985A2'   C'COPIES'
         B     RTNREC
         DROP  R5                   HSMDAY
         SPACE
         LTORG
         SPACE 3
         USING HSMVOL,R5
HSMVOL   DS    0H                  SMF RECORD TYPE 128 OR 240
         CH    R1,=H'128'           RECORD OBVIOUSLY TOO SHORT?
         BL    UNUSED               YES
         MVC   25(6,R6),20(R2)      VOLUME SERIAL NUMBER
         MVI   31(R6),C'('
         MVC   32(1,R6),80(R2)      HSM VOLUME TYPE
         MVI   33(R6),C')'
         OC    35(8,R6),120(R2)     VOLUME UNIT TYPE (DON'T SHOW NULLS)
         SLR   R0,R0
         ICM   R0,3,86(R2)          LOAD MIGRATION MINIMUM AGE
         BNZ   HSMPRIME             MIGRATION FROM PRIMARY VOLUME
         ICM   R0,3,84(R2)          LOAD NON-VSAM DATA SET COUNT
         CVD   R0,DOUBLE
         MVC   44(5,R6),ED5
         ED    43(6,R6),DOUBLE+5
         MVC   50(30,R6),HSMNVSAM
         B     RTNREC
HSMPRIME CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         MVC   44(7,R6),=X'9489958187857E'     C'MINAGE='
         UNPK  51(3,R6),DOUBLE+6(2)
         ICM   R0,15,88(R2)         LOAD NON-VSAM TRACK COUNT
         CVD   R0,DOUBLE
         MVC   55(5,R6),ED5
         ED    54(6,R6),DOUBLE+5
         MVC   60(9,R6),=X'819393968360A39992' C'ALLOC-TRK'
         ICM   R0,15,104(R2)        LOAD FRAGMENTATION INDEX
         CVD   R0,DOUBLE
         MVC   70(5,R6),ED5
         ED    69(6,R6),DOUBLE+5
         MVC   75(5,R6),=C'=F.I.'
         B     RTNREC
         DROP  R5                   HSMVOL
         SPACE
*        DC    CL30'NON-VSAM DATA SET(S) PROCESSED'
HSMNVSAM DC    XL30'95969560E5E2C1D4408481A38140A285A34DA25D40979996838+
               5A2A28584'
         LTORG
         SPACE 3
         USING HSMREC,R5
HSMREC   DS    0H                  SMF RECORD TYPE 129 OR 241
         CH    R1,=H'302'           RECORD OBVIOUSLY TOO SHORT?
         BL    UNUSED               YES
         OC    25(8,R6),14(R2)      JOB NAME         (DON'T SHOW NULLS)
         OC    34(44,R6),40(R2)     DATA SET NAME
         SLR   R1,R1
         CLI   38(R2),X'0E'         KNOWN FUNCTION TYPE CODE?
         BH    HSMFUNOK             NO, SKIP LABEL LOAD
         CLI   38(R2),X'0D'         FULL VOLUME DUMP?
         BE    HSMDUMP              YES, PERFORM DIFFERENT FORMATTING
         IC    R1,38(R2)            GET FUNCTION TYPE CODE
         SLL   R1,3                 MULTIPLY BY EIGHT FOR INDEX
HSMFUNOK LA    R1,HSMACTN(R1)       POINT TO TYPE LABEL
         MVC   73(7,R6),1(R1)       DISPLAY IT
*        ICM   R0,3,238(R2)         ANY OUTPUT TAPES?
*        BNZ   RTNREC               YES, RECYCLING SO RETURN
         CLI   0(R1),C'-'           VOLUME SERIAL(S) REQUIRED?
         BE    RTNREC               NO, END OF FORMATTING
         CLI   64(R6),C' '          ROOM FOR TARGET VOLUME SERIAL?
         BH    RTNREC               NO, END OF FORMATTING
         OC    65(6,R6),84(R2)      VOLUME SERIAL NUMBER OR ZERO
         CLI   65(R6),C' '          OUTPUT VOLUME SERIAL LOADED?
         BH    HSMTGTOK             YES
         ICM   R0,3,236(R2)         ANY TAPE VOLUMES USED?
         BZ    HSMFLOW              NO, OMIT DATA FLOW INDICATOR
         MVC   65(6,R6),296(R2)     YES, SHOW FIRST ONE
HSMTGTOK CLI   63(R6),C' '          ROOM FOR DATA FLOW INDICATOR?
         BH    HSMFLOW              NO
         CLI   0(R1),C'>'           DATA FLOW INDICATOR APPROPRIATE?
         BNE   HSMFLOW              NO
         MVC   63(2,R6),=C'->'      YES, INDICATE DATA FLOW
HSMFLOW  LA    R15,56(,R6)          POINT TO INPUT VOLUME SLOT
         CLI   0(R1),C'1'           SINGLE VOLUME OPERATION?
         BNE   HSMVFMT              NO, CHECK SOURCE VOLUME SLOT
         LA    R15,64(,R6)          YES, USE TARGET VOLUME SLOT
HSMVFMT  CLI   0(R15),C' '          ROOM FOR SOURCE VOLUME SERIAL?
         BH    RTNREC               NO, END OF FORMATTING
         OC    1(6,R15),94(R2)      VOLUME SERIAL NUMBER OR ZERO
         CLI   1(R15),C' '          INPUT VOLUME SERIAL LOADED?
         BH    RTNREC               YES
         ICM   R0,3,236(R2)         ANY TAPE VOLUMES USED?
         BZ    RTNREC               NO
         MVC   1(6,R15),296(R2)     YES, SHOW FIRST ONE
         B     RTNREC
HSMDUMP  MVC   34(12,R6),HSMVOLBL
         MVC   47(6,R6),94(R2)      VOLUME SERIAL BEING DUMPED
         MVC   54(6,R6),=X'C39381A2A27E'   C'CLASS='
         OC    60(20,R6),244(R2)    SHOW ANY DUMPCLASS(ES)
         B     RTNREC
         DROP  R5                   HSMREC
         SPACE
HSMACTN  DC    CL8'        '         0 - NOT USED
         DC    CL8'>HMIG-L1'         1 - PRIMARY TO ML1
         DC    CL8'>MIG-MIG'         2 - ML1/2 TO ML1/2
         DC    CL8'>HMIG-L2'         3 - PRIMARY TO ML2
         DC    CL8'>HRECA-1'         4 - ML1 TO PRIMARY
         DC    CL8'>HRECA-2'         5 - ML2 TO PRIMARY
         DC    CL8'1HDELETE'         6 - HDELETE
         DC    CL8'>DBACKUP'         7 - DAILY BACKUP
         DC    CL8'>SBACKUP'         8 - SPILL BACKUP
         DC    CL8'>HRECOV '         9 - HRECOVER
         DC    CL8'-RECYCLE'         A - RECYCLE BACKUP VOLUME
         DC    CL8'1DEL-AGE'         B - DELETE BY AGE
         DC    CL8'-RECYCLE'         C - RECYCLE MIGRATION VOLUME
         DC    CL8' DUMPVOL'         D - FULL VOLUME DUMP
         DC    CL8'>RESTORE'         E - VOLUME OR DATA SET RESTORE
*        DC    CL12'FULL DUMP OF'
HSMVOLBL DC    XL12'C6A4939340C4E4D4D7409686'
         LTORG
         SPACE 3
         USING UACTRT,R5
UACTRT   DS    0H                  SMF RECORD TYPE 158
         CH    R1,=H'88'            RECORD OBVIOUSLY TOO SHORT?
         BL    UNUSED               YES
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(8,R6),48(R2)      JOB NUMBER
         MVC   43(9,R6),=X'4DA2A482A3A897F05D' C'(SUBTYP0)'
         OC    50(1,R6),31(R2)      RECORD SUBTYPE
         ICM   R3,15,64(R2)         SERVICE UNITS
         CVD   R3,DOUBLE
         MVC   53(11,R6),ED11
         ED    52(12,R6),DOUBLE+2
         MVC   64(3,R6),=X'A299A5'  C'SRV'
         ICM   R3,15,84(R2)         COST IN DOLLARS
         CVD   R3,DOUBLE
         LA    R1,79(,R6)           JUST IN CASE OF ZERO DOLLARS
         MVC   69(11,R6),ED11
         EDMK  68(12,R6),DOUBLE+2
         BCTR  R1,0
         MVI   0(R1),C'$'
         B     RTNREC
         DROP  R5                   UACTRT
         SPACE
         LTORG
         SPACE 3
         USING TSOMNC,R5
TSOMNC   DS    0H                  SMF RECORD TYPE 199
         CH    R1,=H'146'           RECORD OBVIOUSLY TOO SHORT?
         BL    TSOMNBAD             YES
         LR    R3,R2                PREPARE FOR TRT
         TRT   16(8,R3),GOODNAME    VALID TSO USERID?
         LR    R2,R3                RESTORE RECORD POINTER
         BNZ   TSOMNBAD             NO, NOT A TSOMON COMMAND RECORD
         CLC   DAYCENTI,24(R2)      VALID CENTISECOND TIME-OF-DAY?
         BL    TSOMNBAD             NO, NOT A TSOMON COMMAND RECORD
         CLC   DAYCENTI,32(R2)      VALID CENTISECOND TIME-OF-DAY?
         BL    TSOMNBAD             NO, NOT A TSOMON COMMAND RECORD
         TM    31(R2),X'0F'         EXPECTED DECIMAL SIGN ON DATE?
         BNO   TSOMNBAD             NO, NOT A TSOMON COMMAND RECORD
         TM    39(R2),X'0F'         EXPECTED DECIMAL SIGN ON DATE?
         BNO   TSOMNBAD             NO, NOT A TSOMON COMMAND RECORD
         MVC   25(8,R6),16(R2)      TSO USERID
         LA    R3,42(,R6)           POINT TO DISPLAY AREA
         SLR   R0,R0
         ICM   R0,3,144(R2)         SWAP-IN COUNT
         BAL   R14,TSOMNMBR
         BAL   R14,TSOMBLNK
         MVC   0(3,R3),=X'A2A697'   C'SWP'
         LA    R3,3(,R3)
         ICM   R0,15,72(R2)         EXCP COUNT
         BAL   R14,TSOMNMBR
         BAL   R14,TSOMBLNK
         MVC   0(3,R3),=X'A78397'   C'XCP'
         LA    R3,3(,R3)
         ICM   R0,15,60(R2)         TPUT CHARACTERS
         BAL   R14,TSOMNMBR
         BAL   R14,TSOMBLNK
         SLR   R0,R0
         ICM   R0,3,54(R2)          TPUT COUNT
         BAL   R14,TSOMNMBR
         MVI   0(R3),C'/'
         BAL   R14,TSOMBLNK
         MVC   0(3,R3),=X'A397A3'   C'TPT'
         LA    R3,3(,R3)
         ICM   R0,15,56(R2)         TGET CHARACTERS
         BAL   R14,TSOMNMBR
         BAL   R14,TSOMBLNK
         SLR   R0,R0
         ICM   R0,3,52(R2)          TGET COUNT
         BAL   R14,TSOMNMBR
         MVI   0(R3),C'/'
         BAL   R14,TSOMBLNK
         MVC   0(3,R3),=X'A387A3'   C'TGT'
         CLI   44(R2),C' '          ANY PROGRAM NAME?
         BNH   RTNREC               NO
         MVC   34(8,R6),44(R2)      YES, SHOW IT
         B     RTNREC
TSOMNMBR CVD   R0,DOUBLE
         MVC   1(11,R3),ED11
         ED    0(12,R3),DOUBLE+2
TSOMNOLP CLI   1(R3),C' '           LEADING BLANK?
         BNER  R14                  NO, RETURN
         MVC   1(12,R3),2(R3)       YES, OVERLAY
         B     TSOMNOLP
TSOMBLNK LA    R3,1(,R3)
         CLI   0(R3),C' '
         BNE   TSOMBLNK
         BR    R14
TSOMNBAD LA    R5,ORACLE            NOT A TSOMON COMMAND RECORD
         BR    R5                   TRY FOR AN ORACLE RECORD
         DROP  R5                   TSOMNC
         SPACE
         LTORG
         SPACE 3
         USING ORACLE,R5
ORACLE   DS    0H                  SMF RECORD TYPE 199
         LA    R0,4                 LENGTH OF RDW
         LR    R15,R2               POINT TO SMF RECORD TYPE
         SLR   R15,R0               POINT TO RDW TO SIMPLIFY PROCESSING
         CLM   R1,15,28(R15)        LENGTH LARGER THAN OFFSET?
         BNH   RTNREC               NO, SKIP ORACLE FORMATTING
         CLM   R1,15,36(R15)        LENGTH LARGER THAN OFFSET?
         BNH   RTNREC               NO, SKIP ORACLE FORMATTING
         CLM   R1,15,44(R15)        LENGTH LARGER THAN OFFSET?
         BNH   RTNREC               NO, SKIP ORACLE FORMATTING
         MVC   25(4,R6),14(R2)      SUBSYSTEM ID
         LR    R1,R15               REMEMBER RDW ADDRESS
         ICM   R0,15,28(R15)        GET OFFSET TO CORRELATION SECTION
         ALR   R15,R0               POINT TO CORRELATION SECTION
         OC    30(8,R6),0(R15)      AUTHORIZATION ID (DON'T SHOW NULLS)
         MVC   39(8,R6),8(R15)      CORRELATION ID
         LR    R15,R1               POINT TO RDW
         ICM   R0,15,36(R15)        GET OFFSET TO MPM SECTION
         ALR   R15,R0               POINT TO MPM SECTION
         ICM   R0,15,48(R15)        LOAD PC COUNT
         CVD   R0,DOUBLE
         MVC   48(3,R6),ED3
         ED    47(4,R6),DOUBLE+6
         MVC   51(2,R6),=X'9783'    SHOW PC COUNT
         ICM   R0,15,44(R1)         GET OFFSET TO KERNAL SECTION
         ALR   R1,R0                POINT TO KERNAL SECTION
         ICM   R0,15,0(R1)          LOAD LOGICAL READ COUNT
         CVD   R0,DOUBLE
         MVC   54(5,R6),ED5
         ED    53(6,R6),DOUBLE+5
         MVC   59(3,R6),=X'939984'  SHOW LOGICAL READ COUNT
         ICM   R0,15,4(R1)          LOAD PHYSICAL READ COUNT
         CVD   R0,DOUBLE
         MVC   63(5,R6),ED5
         ED    62(6,R6),DOUBLE+5
         MVC   68(2,R6),=X'9984'    SHOW PHYSICAL READ COUNT
         ICM   R0,15,8(R1)          LOAD LOGICAL WRITE COUNT
         CVD   R0,DOUBLE
         MVC   71(5,R6),ED5
         ED    70(6,R6),DOUBLE+5
         MVC   76(4,R6),=X'93A699A3'     SHOW LOGICAL WRITE COUNT
         B     RTNREC
         DROP  R5                   ORACLE
         SPACE
         LTORG
         SPACE 3
         USING TSOMNS,R5
TSOMNS   DS    0H                  SMF RECORD TYPE 200
         CH    R1,=H'112'           RECORD OBVIOUSLY TOO SHORT?
         BL    UNUSED               YES
         CLC   DAYCENTI,40(R2)      VALID CENTISECOND TIME-OF-DAY?
         BL    RTNREC               NO, NOT A TSOMON SYSTEM RECORD
         SLR   R0,R0
         IC    R0,24(,R2)           SEGMENT NUMBER
         MVC   34(7,R7),=X'E28587948595A3'  C'SEGMENT'
         CVD   R0,DOUBLE
         MVC   42(3,R6),ED3
         ED    41(4,R6),DOUBLE+6
         CLI   24(R2),1             FIRST SEGMENT?
         BNE   RTNREC               NO
         ICM   R0,3,88(R2)          MAXIMUM USERS LOGGED ON IN INTERVAL
         CVD   R0,DOUBLE
         MVC   46(5,R6),ED5
         ED    45(6,R6),DOUBLE+5
         MVC   52(31,R6),=C'MAX USERS LOGGED ON IN INTERVAL'
         B     RTNREC
         DROP  R5                   TSOMNS
         SPACE
         LTORG
         SPACE 3
         USING DSKSPC,R5
DSKSPC   DS    0H                  SMF RECORD TYPE 255
         LR    R3,R2                PREPARE FOR TRT
         TRT   14(10,R3),GOODNAME   1ST 10 BYTES AFTER HEADER ALL CHAR?
         LR    R2,R3                RESTORE RECORD POINTER
         BNZ   UNUSED               NO, NOT REALLY A DMT SMF RECORD
         MVC   25(2,R6),14(R2)      RECORD SUBTYPE
         MVC   28(8,R6),16(R2)      HIGH-ORDER QUALIFIER
         XC    DOUBLE,DOUBLE
         MVC   DOUBLE,68(R2)        FETCH MAXIMUM SPACE
         OC    DOUBLE(7),76(R2)     ACCESS CURRENT SPACE
         BZ    DISKDS               GROUP TOTALS UNKNOWN
         ICM   R0,15,76(R2)
         ICM   R1,15,80(R2)
         SRDL  R0,24                DIVIDE DECIMAL NUMBER BY A MILLION
         STM   R0,R1,DOUBLE
         OI    DOUBLE+7,X'0F'       MAKE SIGN VALID
         MVC   37(9,R6),ED9
         ED    36(10,R6),DOUBLE+3   SHOW USED MEGABYTES
         MVC   46(7,R6),=X'948260A4A28584'    C'MB-USED'
         ICM   R0,15,68(R2)
         ICM   R1,15,72(R2)
         SRDL  R0,24                DIVIDE DECIMAL NUMBER BY A MILLION
         STM   R0,R1,DOUBLE
         OI    DOUBLE+7,X'0F'       MAKE SIGN VALID
         MVC   54(9,R6),ED9
         ED    53(10,R6),DOUBLE+3   SHOW USED MEGABYTES
         MVC   63(6,R6),=X'9482609481A7' C'MB-MAX'
         B     RTNREC
DISKDS   MVC   37(15,R6),ED15
         ED    36(16,R6),60(R2)     SHOW SPACE OF THIS DATA SET
         MVC   53(18,R6),MSG255
         B     RTNREC
         DROP  R5                   DSKSPC
         SPACE
*        DC    C'BYTES FOR DATA SET'
MSG255   DC    X'82A8A385A240869699408481A38140A285A3'
         LTORG
         SPACE 3
         USING SLSSRC,R5
SLSSRC   DS    0H                  SMF RECORD TYPE 255
         CH    R1,=H'88'            RECORD OBVIOUSLY TOO SHORT?
         BL    UNUSED               YES
         LR    R3,R2                PREPARE FOR TRT
         TRT   14(4,R3),GOODNAME    PRINTABLE SUBSYSTEM NAME?
         BNZ   RTNREC               NO, JUST RETURN
         LR    R2,R3                YES, RESTORE RECORD POINTER
         CLC   =H'7',18(R2)         SUBTYPE OVER 7?
         BL    PUTSUB               YES, SHOW IT
         MVC   25(4,R6),14(R2)      SHOW SUBSYSTEM NAME
         MVC   3(1,R6),19(R2)       COPY SUBTYPE
         OI    3(R6),X'F0'          MAKE IT DISPLAYABLE
         CLI   19(R2),5             SUBTYPE 5?
         BE    SLSEJECT             YES
         CLI   19(R2),6             SUBTYPE 6?
         BE    SLSENTER             YES
         CLI   19(R2),7             SUBTYPE 7?
         BNE   PUTSUB               NO, SHOW SUBTYPE
         MVC   30(5,R6),=C'?????'   JUST IN CASE ALL TYPE FLAGS ARE OFF
         ICM   R0,8,20(R2)          YES, GET ACTIVITY TYPE
         BZ    DON07TYP
         LA    R1,SLSS07TT          POINT TO THE TYPE TABLE
CHK07TYP LTR   R0,R0                IS SIGN BIT ON?
         BM    GOT07TYP             YES, NOW HAVE THE ACTIVITY TYPE
         SLL   R0,1                 NO, PROMOTE NEXT BIT
         LA    R1,5(,R1)            POINT TO NEXT LITERAL
         B     CHK07TYP             GO TEST IT
GOT07TYP MVC   30(5,R6),0(R1)       LOAD ACTIVITY NAME
DON07TYP MVC   36(6,R6),68(R2)      LOAD VOLUME SERIAL NUMBER
         CLI   67(R2),C'1'          LABEL MODIFIER KNOWN?
         BL    DON07LBL             NO
         CLI   67(R2),C'4'
         BH    DON07LBL             NO
         ICM   R1,8,67(R2)          YES, LOAD IT
         SLL   R1,4                 SHIFT OUT THE ZONE
         SRL   R1,28                GET THE NUMBER
         BCTR  R1,0
         MH    R1,=H'3'             GET AN INDEX
         LA    R1,LMLABELS(R1)      POINT TO CORRECT LABEL
         MVC   43(3,R6),0(R1)       LOAD THE LABEL MODIFIER LABEL
DON07LBL MVC   47(8,R6),47(R2)      LOAD THE ACTIVITY INSTIGATOR
         OC    56(8,R6),55(R2)      (DON'T SHOW NULLS)
         TM    22(R2),X'80'         ANY SOURCE UNIT?
         BZ    DON07SRC             NO
         MVC   DOUBLE(2),87(R2)     YES, COPY THE DEVICE NUMBER
         BAL   R14,CONV
         MVC   64(4,R6),DOUBLE
         CLI   64(R6),C'0'          LEADING ZERO IN DEVICE NUMBER?
         BNE   DON07SRC             NO
         MVI   64(R6),C' '          YES, SUPPRESS IT
DON07SRC TM    22(R2),X'40'         ANY DESTINATION UNIT?
         BZ    DON07DST             NO
         MVC   DOUBLE(2),89(R2)     YES, COPY THE DEVICE NUMBER
         BAL   R14,CONV
         MVC   64(4,R6),DOUBLE
         CLI   64(R6),C'0'          LEADING ZERO IN DEVICE NUMBER?
         BNE   DON07DST             NO
         MVI   64(R6),C' '          YES, SUPPRESS IT
DON07DST TM    22(R2),X'08'         PERFORMANCE IMPACTED BY LMU RETRY?
         BZ    RTNREC               NO
         MVC   69(11,R6),=X'9985A399A86084859381A8'  C'RETRY-DELAY'
         B     RTNREC
SLSEJECT MVC   30(5,R6),SLS7EJCT    C'EJECT'
         B     SLSSEE
SLSENTER MVC   30(5,R6),SLS7ENTR    C'ENTER'
SLSSEE   MVC   36(6,R6),26(R2)      LOAD VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   SLSSRC
         SPACE
LMLABELS DC    C'SL NL BLPLMU'      LABEL MODIFIER LITERALS
SLSS07TT DC    X'D460A28399'        C'M-SCR'
         DC    X'D46095A283'        C'M-NSC'
         DC    X'D260A28399'        C'K-SCR'
         DC    X'D26095A283'        C'K-NSC'
         DC    X'40E2A68197'        C' SWAP'
         DC    X'40D496A585'        C' MOVE'
SLS7ENTR DC    X'C595A38599'        C'ENTER'
SLS7EJCT DC    X'C5918583A3'        C'EJECT'
         LTORG
         SPACE 2
         DS    0D                  END OF CSECT
         TITLE 'DSECTS'
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
DOUBLE   DS    D                   DYNAMIC WORK AREA
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
E0       EQU   0
E2       EQU   2
E4       EQU   4
E6       EQU   6
         SPACE
         END
