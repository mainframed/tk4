./ ADD NAME=$$$INDEX 0104-91142-92083-1516-00040-00031-00000-ZGIP01
           SAMPLE EXITS AND USERMODS AT MVS/ESA SP4 LEVEL
           ====== ===== === ======== == ======= === =====

           PLEASE EVALUATE AND INSTALL IF APPROPRIATE


EXIT008  - JES2 NOTIFY MOD EXIT
           SOURCE - CBT FILE 088 - ORIGINAL AUTHOR BRIAN WESTERMAN  PRC
           CHANGES BY GP - FOR JES2 SP 4.2.0 (WAS SP 1.3.4)
EXIT016  - JES2 NOTIFY MOD EXIT
           SOURCE - CBT FILE 088 - ORIGINAL AUTHOR BRIAN WESTERMAN  PRC
           CHANGES BY GP - FOR JES2 SP 4.2.0 (WAS SP 1.3.4)
GFC0002  - SDSF USERMOD TO SHOW @ AND Ö CLASSES.
           SOURCE - JES2 MODS TAPE.
GFC0003  - ZAP FOR TSO TEST LIST I STOPPING AT BAD OPCODE
           SOURCE - CBT FILE 300 -AND- AUGUST 1990 TECHNICAL SUPPORT
                    MAGAZINE ARTICLE BY ALAN FIELD
         **NOTE ALSO XA/ESA VERSIONS OF IKJT9FI AND IKJT9LB
           LOAD MODULES SUPPLIED IN CBT FILE 135 - ALSO SEE IKJTSO00
           IKJT9FI AND IKJT9LB SOURCE IN CBT FILE 300 BUT MAKE THEM
           AMODE=31 AND RMODE=ANY FOR XA/ESA
GFC0004  - USERMOD TO INSTALL JESIOSVC - ADJUST JCLIN FOR YOUR SVC NO.
GFC0005  - USERMOD TO USE JESIOSVC - ADJUST ZAP HEX FOR YOUR SVC NO.
IKJTSO00 - SAMPLE PARMLIB MEMBER FOR TSO/E ESA
           NOTE INCLUSION OF TEST SUBCOMMANDS FROM CBT FILE 300
           AND GENERAL PUBLIC DOMAIN COMMANDS REQUIRING APF
JESIOSVC - PART OF MOD TO MAINTAIN JES I/O COUNT FOR EACH DD
MPFLST00 - SAMPLE PARMLIB MEMBER - FUNCTIONS ARE:
           1) SUPPLY "NICE" CONSOLE COLOUR SCHEME
           2) STOP RETAINING MESSAGES THAT NEVER GET DOM'D
           3) INVOKE MSG2USER WHEN REQUIRED
MSG2USER - MPF EXIT FOR IEF863I (WAITING FOR DATA SETS)
           SOURCE - CBT FILE 011 - ORIGINAL AUTHOR MILTON SOONG
           CHANGES BY GP - SEE COMMENTS

           UNFORTUNATELY, I DO NOT HAVE A VERSION OF THE FAMOUS I/O
           COUNT ZAP FOR A POST TERMINATE-JOB-TO-AVOID-NOT-CATLG-2 SPE
           ESA SYSTEM.  PERHAPS SOME KIND SOUL WILL FIT ONE FOR ME.
           (PREFERABLY ONE WHICH ALSO HANDLES DYNAMICALLY FREED FILES.)

./ ADD NAME=EXIT008  0110-90068-92029-1625-00240-00223-00048-ZGIP01
EX8      TITLE 'PRC - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
* MODULE NAME: EXIT008             (CONTROL BLOCK READ/WRITE EXIT)    *
*                                                                     *
* DESCRIPTIVE NAME: JES2 EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT  *
*                                                                     *
* AUTHOR: BRIAN WESTERMAN                                             *
*                                                                     *
* DATE WRITTEN: MAY 1986                                              *
* DATE CHANGED: MARCH 1990 BY GREG PRICE (PRYCROFT SIX) FOR SP3.1.1   *
*               JANUARY 1992 BY GREG PRICE (FERNTREE) FOR SP4.2.0     *
*                                                                     *
* FMID: HJE4420 (MVS/SP-JES2 4.2.0)                                   *
*                                                                     *
* PURPOSE: THIS EXIT PLACES OBTAINS AND STORES IN THE JCT EITHER      *
*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *
*          THE ABEND CODE OF THE JOB.                                 *
*                                                                     *
* INVOCATION POINT: EXIT008                                           *
*                                                                     *
* ENTRY POINT: EXIT08                                                 *
*                                                                     *
* REGISTERS ON INPUT:                                                 *
*     R0: ADDRESS OF THE XPL                                          *
*     R1: ADDRESS OF THE JCT                                          *
*     R2-R10: N/A                                                     *
*     R11: ADDRESS OF THE SVT                                         *
*     R12: N/A                                                        *
*     R13: ADDRESS OF AN OS-STYLE SAVE AREA                           *
*     R14: RETURN ADDRESS                                             *
*     R15: ENTRY ADDRESS                                              *
*                                                                     *
* REGISTERS ON RETURN:                                                *
*     R0-R1: N/A                                                      *
*     R15: A RETURN CODE:                                             *
*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *
*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *
*              PROCESSING                                             *
*                                                                     *
* JES2 MACROS USED:                                                   *
*     $MODULE, $ENTRY, $MODEND                                        *
*                                                                     *
***********************************************************************
         EJECT
         COPY $HASPGBL                 COPY HASP GLOBALS
         EJECT
EXIT008  $MODULE ENVIRON=USER,                                         C
               SSOB,                   REQ'D TO DETERMINE INVOKER      C
               RPL,                    REQ'D BY $BUFFER                C
               $BUFFER,                REQ'D BY JCT                    C
               $CADDR,                 REQ'D BY SOMETHING              C
               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C
               $HCCT,                  REQ'D TO DETERMINE INVOKER      C
               $HFAME,                 REQ'D BY $HCCT                  C
               $JCT,                   REQ'D TO SAVE ABEND/COND CODE   C
               $MIT,                   REQ'D BY $MODEND, $HCCT         C
               $PADDR,                 REQ'D BY SOMETHING              C
               $PARMLST,               REQ'D BY SOMETHING              C
               $PSV,                   REQ'D BY SOMETHING              C
               $SCAT,                  REQ'D BY $HCCT                  C
               $SJB,                   REQ'D TO DETERMINE INVOKER      C
               $TQE,                   REQ'D BY $SJB                   C
               $USERCBS,               REQ'D BY SOMETHING              C
               $XECB,                  REQ'D BY $HCCT                  C
               $XPL                    REQ'D TO CHECK PARAMETER LIST
EXIT008  AMODE 31
EXIT008  RMODE 24
         TITLE 'PRC - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
*  INITIALIZATION                                                     *
*                                                                     *
***********************************************************************
         SPACE 1
EXIT08   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT
         SPACE 3
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R12,R15                 LOAD LOCAL BASE REGISTER
         SLR   R15,R15                 SET DEFAULT RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*  CHECK TO SEE IF THERE IS A JCT , IF IT IS FOR A BATCH JOB AND      *
*  IF NOTIFY WAS REQUESTED.  IF NOT, RETURN.                          *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    R10,R0                  GET ADDRESS OF XPL
         USING XPL,R10
         SPACE 1
         CLC   =C'JCT ',X008CBID       IS A JCT BEING PROCESSED?
         BNE   RETURN                  NO
         SPACE 1
         CLI   XPLCOND,X008CBWR        IS A JCT BEING WRITTEN?
         BNE   RETURN                  NO
         DROP  R10                     XPL
         SPACE 1
         LR    R10,R1                  GET ADDRESS OF JCT
         USING JCT,R10
         SPACE 1
         CLI   JCTJOBID,C'J'           IS THIS A BATCH JOB?
         BNE   RETURN                  NO, RETURN
         SPACE 1
         CLI   JCTTSUID,C' '           WAS NOTIFY REQUESTED?
         BE    RETURN                  NO, RETURN
         SPACE 1
         TM    JCTJBOPT,JCTXBMII       IS THIS AN EXECUTION BATCH      C
               (JCTXBMII WAS JCTXBACH)   MONITOR?
         BO    RETURN                  YES, RETURN
         SPACE 3
***********************************************************************
*                                                                     *
*  FIND THE SJB ON THE JOBS EXECUTING BY CLASS QUEUE THAT BELONGS TO  *
*  THIS JOB'S JCT.  IF THE SJB INDICATES THE JOB IS NOT IN            *
*  TERMINATION, THEN RETURN.                                          *
*                                                                     *
***********************************************************************
         SPACE 1
         USING HCCT,R11                PROVIDE SSVT ADDRESSABILITY
         SPACE 1
         L     R2,CCTJXCLS             GET EXECUTING SJB'S QUEUE
         USING SJB,R2                  PROVIDE SJB ADDRESSABILITY
GETSJB   DS    0H
         LTR   R2,R2                   TEST FOR END OF QUEUE
         BZ    RETURN                  RETURN IF NO MATCH
         CLC   JCTJOBID(8),SJBJOBID    IS THIS THE SJB FOR THIS JCT?
         BE    FOUNDSJB                YES, PROCESS IT
         L     R2,SJBXQCHN             GET POINTER TO NEXT SJB
         B     GETSJB                  LOOP BACK THRU
         SPACE 1
FOUNDSJB DS    0H
         CLI   SJBXQFN1+1,SSOBTERM     WAS EXIT INVOKED BY JOB         C
                                         TERMINATION (HOSTERM)?
         BNE   RETURN                  NO, RETURN
         EJECT
***********************************************************************
*                                                                     *
*  FIND THE OS JCT FOR THIS JOB AND CHECK TO SEE IF THE JOB ABENDED.  *
*  IF IT DID ABEND, GET THE ABEND CODE.                               *
*                                                                     *
***********************************************************************
         SPACE 1
GETCVT   EQU   *
         L     R2,CVTPTR               LOAD ADDR OF CVT POINTER
         L     R2,0(,R2)               LOAD ADDR OF NEXT/CURR TCB'S
         L     R2,OURTCB(,R2)          LOAD ADDR OF OUR TCB
         L     R2,TCBJSCB(,R2)         LOAD ADDR OF JSCB
         L     R2,JSCBACT(,R2)         LOAD ADDR OF ACTIVE JSCB
         L     R2,JSCBJCT(,R2)         LOAD ADDR OF OS JCT
         USING INJMJCT-16,R2           ESTABLISH OS JCT ADDRESSABILITY
         SPACE 1
         TM    JCTJSTAT,JCTABEND       DID JOB ABEND?
         BNO   GETMAXCC                NO, GET MAXIMUM CONDITION CODE
         L     R3,JCTACODE             YES, GET ABEND CODE
         B     SAVECODE                GO TO SAVE IT
         SPACE 3
***********************************************************************
*                                                                     *
*  IF THE JOB DID NOT ABEND, THEN SCAN THE SCT'S FOR THE JOB AND      *
*  FIND THE MAXIMUM CONDITION CODE OUT OF ALL THE JOB'S STEPS.        *
*                                                                     *
***********************************************************************
         SPACE 1
GETMAXCC DS    0H
         L     R2,JCTSDKAD             GET FIRST SCT ADDRESS
         USING INSMSCT-16,R2           ESTABLISH SCT ADDRESSABILITY
         SPACE 1
         SLR   R3,R3                   ZERO OUT WORK REGISTER
         SPACE 1
SCTLOOP  DS    0H
         SRL   R2,8                    GET ADDRESS IN PROPER FORM
         LTR   R2,R2                   ARE THERE ANY MORE SCT'S?
         BZ    SAVECODE                NO, GO TO FINISH
         TM    SCTSTEND,SCTSTSRT+SCTSTPND  DID STEP RUN?
         BNO   NEXTSCT                 NO, GET NEXT SCT
         CH    R3,SCTSEXEC             IS THIS STEP'S CONDITION CODE   C
                                         GREATER THAN THE MAXIMUM?
         BNL   NEXTSCT                 NO, GET NEXT SCT
         LH    R3,SCTSEXEC             YES, SAVE NEW MAX COND CODE
NEXTSCT  DS    0H
         L     R2,SCTANSCT             GET NEXT SCT
         B     SCTLOOP                 LOOP TO CHECK NEXT SCT
         EJECT
***********************************************************************
*                                                                     *
*  SAVE EITHER THE ABEND CODE OR THE MAXIMUM CONDITION CODE FOR       *
*  ANY STEP OF THE JOB IN A JCT USER FIELD.  THIS INFORMATION WILL    *
*  BE USED LATER IN EXIT016 - TSO NOTIFY.                             *
*                                                                     *
***********************************************************************
         SPACE 1
SAVECODE DS    0H
         ST    R3,JCTUSER1             SAVE ABEND/MAX COND CODE
         MVI   JCTUSER1,X'80'          MARK IT AS PROCESSED
         SPACE 3
***********************************************************************
*                                                                     *
*  GO BYE-BYE.                                                        *
*                                                                     *
***********************************************************************
         SPACE 1
RETURN   DS    0H
         L     R14,12(,R13)            LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         BR    R14                     RETURN
         EJECT
PATCH    DS    CL200
         DC    CL8'ENDPATCH'
CVTPTR   EQU   X'10'         ADDRESS OF CVT POINTER
OURTCB   EQU   X'04'         OFFSET INTO TCB LIST OF OUR TCB ADDRESS
TCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS
JSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS
JSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS
         SPACE 3
JCTDSCT  DSECT
*        THIS CONTROL BLOCK IS A COPY OF OS JCT DEFINING
*        ONLY THOSE FIELDS USED BY THIS MOD.  THE OS JCT,
*        IEFAJCTB, CONTAINS DUPLICATE FIELD NAMES OF THOSE
*        USED BY THE JES2 JCT (JCTID, JCTJNAM, AND JCTJMR)
*        AND CAUSES ASSEMBLY ERRORS IF IT USED.
INJMJCT  EQU    *
         DS     CL5                    FILLER
JCTJSTAT DS     1C                     JOB STATUS INDICATORS
JCTABEND EQU    8                      BIT 4 - JCT ABEND BIT
         DS     CL26                   FILLER
JCTSDKAD DS     CL4                    DISK ADDRESS OF FIRST SCT
         DS     CL132                  FILLER
JCTACODE DS     CL4                    ABEND CODE FIELD
         EJECT
         PUSH   PRINT
         PRINT  NOGEN
SCTDSCT  DSECT
         IEFASCTB
         POP    PRINT
EXIT008  CSECT
         SPACE  3
         LTORG
        $MODEND
         END
./ ADD NAME=EXIT016  0103-90068-92029-1552-00205-00197-00026-ZGIP01
EXIT016  TITLE 'PRC - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
* MODULE NAME: EXIT016                                                *
*                                                                     *
* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT  *
*                                                                     *
* AUTHOR: BRIAN WESTERMAN                                             *
*         PLANNING RESEARCH CORP.                                     *
*                                                                     *
*                                                                     *
* DATE WRITTEN: MAY  1986                                             *
*                                                                     *
* FMID: HJE4420 (MVS/SP-JES2 4.2.0)                                   *
*                                                                     *
* PURPOSE: THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING EITHER   *
*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *
*          THE ABEND CODE OF THE JOB.                                 *
*                                                                     *
* ENTRY POINT: EXIT16                                                 *
*                                                                     *
* REGISTERS ON INPUT:                                                 *
*     R0: A CODE INDICATING IF THIS IS THE FIRST OR SUCCEEDING        *
*         $HASP165 (JOB NNNNN ENDED -- REASON TEXT) MESSAGE           *
*         =0, INDICATES THAT THIS IS THE FIRST (AND POSSIBLY ONLY)    *
*             MESSAGE INDICATING THE END OF THE JOB                   *
*         =4, INDICATES THAT THIS NOT THE FIRST MESSAGE FOR THIS      *
*             JOB GOING THROUGH THE OUTPUT PROCESSOR                  *
*     R1: ADDRESS OF 3-WORD PARMETER LIST WITH THE FOLLOWING LAYOUT:  *
*         WORD 1 (+0) ADDRESS OF THE MESSAGE TO BE SEND               *
*         WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST              *
*         WORD 3 (+8) ADDRESS OF THE JCT                              *
*     R2-R10: N/A                                                     *
*     R11: ADDRESS OF THE HCT                                         *
*     R12: N/A                                                        *
*     R13: ADDRESS OF THE OUTPUT PROCESSOR PCE                        *
*     R14: RETURN ADDRESS                                             *
*     R15: ENTRY ADDRESS                                              *
*                                                                     *
* REGISTERS ON RETURN:                                                *
*     R0: N/A                                                         *
*     R1: ADDRESS OF THE 3-WORD PARAMETER LIST                        *
*     R15: A RETURN CODE:                                             *
*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *
*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *
*              PROCESSING                                             *
*          =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO                *
*                                                                     *
* JES2 MACROS USED:                                                   *
*     $MODULE, $ENTRY, $SAVE, $RETURN, $MODEND                        *
*                                                                     *
***********************************************************************
         EJECT
         COPY $HASPGBL                 COPY HASP GLOBALS
         EJECT
EXIT016  $MODULE ENVIRON=JES2,                                         C
               $BUFFER,                REQ'D BY JCT                    C
               $CAT,                   REQ'D BY HCT                    C
               $CMB,                   REQ'D TO MAP $WTO PARM LIST     C
               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C
               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C
               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C
               $JQE,                   REQ'D BY HCT                    C
               $MIT,                   REQ'D BY $MODEND, HCT           C
               $PCE                    REQ'D TO GET PROCESSOR INFO
EXIT016  AMODE 31
EXIT016  RMODE 24
         TITLE 'PRC - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'
***********************************************************************
*                                                                     *
*  INITIALIZATION                                                     *
*                                                                     *
***********************************************************************
         SPACE  1
EXIT16   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT
         SPACE  2
         $SAVE                          SAVE CALLER'S REGISTERS
         LR    R12,R15                 LOAD LOCAL BASE REGISTER
         L     R10,8(,R1)              LOAD JCT ADDRESS
         SLR   R15,R15                 SET DEFAULT RETURN CODE
         SPACE 3
***********************************************************************
*                                                                     *
*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *
*  BEEN SAVED.  IF NOT, RETURN.                                       *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JCT,R10
         SPACE 1
         CLI   JCTUSER1,X'80'          IS JOB'S ABEND/MAX CC SAVED?
         BNE   RETURN                  NO, RETURN
         CLI   JCTJTFLG,X'80'  80=FAIL,IS MESSAGE TO BE ALTERED?
         BE    RETURN                  NO, SKIP
         EJECT
***********************************************************************
*                                                                     *
*  PREPARE TO ALTER THE NOTIFY MESSAGE.                               *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R4,4(,R1)               GET ADDRESS OF $WTO PARM LIST
         USING CMBWTOPL,R4             ESTABLISH $CMD ADDRESSABILITY
         SLR   R5,R5                   ZERO WORK REGISTER
         IC    R5,CMBML                GET MESSAGE LENGTH
         CH    R5,=H'68'               MSG TOO LONG TO UPDATE IN PLACE?
         BH    RETURN                  YES, RETURN (SHOULDN'T HAPPEN)
         L     R6,0(,R1)               GET ADDRESS IF MESSAGE TEXT
         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT
         SPACE 3
***********************************************************************
*                                                                     *
*  CHECK TO SEE IF THE JOB ABENDED.  IF IT DID, GET THE ABEND CODE.   *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    JCTJTFLG,X'20'  20=ABEND,  DID JOB ABEND?
         BZ    MAXCONDC                NO, GO GET MAXIMUM COND CODE
         SPACE 1
         L     R2,JCTUSER1             GET ABEND CODE
         LA    R2,0(,R2)               CLEAR HIGH ORDER BYTE
         SRL   R2,12                   OBTAIN SYSTEM CODE
         LTR   R2,R2                   WAS IT A SYSTEM CODE ABEND?
         BZ    USRABEND                NO, GO PROCESS USER CODE ABEND
         EJECT
***********************************************************************
*                                                                     *
*  IF THE JOB ABENDED WITH A SYSTEM ABEND CODE, COME HERE TO ALTER    *
*  THE NOTIFY MESSAGE TO INCLUDE THE SYSTEM ABEND CODE.               *
*                                                                     *
***********************************************************************
         SPACE 1
SYSABEND DS    0H
         LA    R5,10(,R5)              INCR. MSG LENGTH
         MVC   0(10,R6),=C'SYSTEM XXX' ADD SYSTEM ABEND CODE TO MSG
         SRDL  R2,12                   CONVERT IT TO HEX
         SR    R2,R2                          "
         SLDL  R2,4                           "
         IC    R2,CONVTABL(R2)                "
         STC   R2,7(,R6)                      "
         SR    R2,R2                          "
         SLDL  R2,4                           "
         IC    R2,CONVTABL(R2)                "
         STC   R2,8(,R6)                      "
         SR    R2,R2                          "
         SLDL  R2,4                           "
         IC    R2,CONVTABL(R2)                "
         STC   R2,9(,R6)                      "
         B     STORELEN                GO CHECK NEW MESSAGE LENGTH
         SPACE 3
***********************************************************************
*                                                                     *
*  IF THE JOB ABENDED WITH A USER ABEND CODE, COME HERE TO ALTER THE  *
*  NOTIFY MESSAGE TO INCLUDE THE USER ABEND CODE.                     *
*                                                                     *
***********************************************************************
         SPACE 1
USRABEND DS    0H
         LA    R5,9(,R5)               INCR. MSG LENGTH
         MVC   0(9,R6),=C'USER XXXX'   ADD USER ABEND CODE TO MSG
         LH    R2,JCTUSER1+2           GET USER ABEND CODE
         CVD   R2,5(,R6)               CONVERT TO DECIMAL
         UNPK  5(4,R6),5(8,R6)         UNPK FOUR LOW DIGITS
         OI    8(R6),X'F0'             SET ZONE
         MVC   9(2,R6),=C'  '          CLEAR TWO  BYTES
         B     STORELEN                GO CONVERT TO DEC/PRINTABLE
         EJECT
***********************************************************************
*                                                                     *
*  IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY MESSAGE   *
*  TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY STEP IN THE JOB.     *
*                                                                     *
***********************************************************************
         SPACE 1
MAXCONDC DS    0H
         MVC   0(20,R6),=C'- MAX COND CODE XXXX'  ADD MAXCC TO MSG
         LA    R5,20(,R5)              INCR. MESSAGE LENGTH
         LH    R2,JCTUSER1+2           GET MAX CONDITION CODE
         CVD   R2,16(,R6)              CONVERT TO DECIMAL
         UNPK  16(4,R6),16(8,R6)       UNPK FOUR LOW DIGITS
         OI    19(R6),X'F0'            SET ZONE
         MVC   20(2,R6),=C'  '         CLEAR TWO  BYTES
         SPACE 3
***********************************************************************
*                                                                     *
*  STORE NEW MESSAGE LENGTH IN CMB PARM LIST.                         *
*                                                                     *
***********************************************************************
         SPACE 1
STORELEN DS    0H
         STC   R5,CMBML                STORE MSG LEN IN CMB PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*  GO BYE-BYE.                                                        *
*                                                                     *
***********************************************************************
         SPACE 1
RETURN   DS    0H
        $RETURN RC=(R15)               RETURN TO CALLER
         EJECT
CONVTABL DC    CL16'0123456789ABCDEF'  CONVERSION TABLE
         LTORG
        $MODEND
         END
./ ADD NAME=GFC0002  0100-92021-92021-1433-00053-00053-00000-GREG
//GREGU02 JOB SPG,'GFC0002 - SDSF @ Ö  ',CLASS=A,MSGCLASS=X,
//             NOTIFY=GREG
//*
//*  DISPLAY JOBS ON @ (XMIT) AND Ö ($OUTPUT) QUEUES
//*
//*                              DO NOT RENUMBER!!!!
//*
//STEP1   EXEC SERVSMPE
//SMPPTFIN DD  *
++USERMOD(GFC0002)
                /*
                     1. THIS USERMOD CAUSES '@' QUEUE (JOBS WAITING
                     FOR NETWORK XMIT) TO BE DISPLAYED BY DEFAULT
                     ON INPUT DISPLAY. NOTE THAT OUTPUT DISPLAY
                     ALREADY INCLUDES '@' QUEUE.

                     2. USER MODIFICATION TO ADD 'Ö' AS CLASS ON 'I'
                     COMMAND TO DISPLAY JOBS ON $OUTPUT QUEUE THAT
                     HAVE BEEN EXPLICITLY 'HELD' BY OPERATOR
                     COMMAND OR FOR ANY OTHER REASON HAVE NOT YET
                     COMPLETED OUTPUT PROCESSING. ALSO INCLUDE 'Ö'
                     BY DEFAULT.
                  */ .
++VER(Z038) FMID(HQX1320)
          /* PRE(
                 UL?????
                ) */
                 .
++SRCUPD(ISFIN) .
.\ CHANGE NAME=ISFIN
ALLCLASS EQU   L'ALLCLS        ALL ALLOWED CLASSES              GFC0002
ALLCLS   DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789*@Ö'       GFC0002
         COPY  ISFIN1          DEF QUEUES FOR USER 'CLASSES'    GFC0002
         COPY  ISFIN2          DEF QUEUES FOR USER 'CLASSES'    GFC0002
CLASSES  DS    CL(L'ALLCLS)    INPUT CLASSES TO PROCESS         GFC0002
++MAC(ISFIN1) DISTLIB(ISFSRC) .
         ORG   CLSTR+C'Ö'      USE 'Ö' FOR $OUTPUT QUEUE        GFC0002
         DC    X'08'           $OUTPUT = 12 - 4                 GFC0002
         ORG   ,               TO END OF TBL                    GFC0002
++MAC(ISFIN2) DISTLIB(ISFSRC) .
         ORG   CLSTR+C'Ö'      USE 'Ö' FOR $OUTPUT QUEUE        GFC0002
         DC    X'08'           $OUTPUT = 12 - 4                 GFC0002
         ORG   ,               TO END OF TBL                    GFC0002
/*
//SMPEIN   DD  *
 SET BOUNDARY(MVSTZN).
  RESTORE  SELECT (GFC0002).
 SET BOUNDARY(GLOBAL).
  RECEIVE  SELECT (GFC0002)  SYSMOD  SOURCEID (GASNFUEL).
 SET BOUNDARY(MVSTZN).
    APPLY  SELECT (GFC0002).
/*
//
./ ADD NAME=GFC0003  0101-92021-93026-1435-00042-00042-00000-GREG
//GREGTEST JOB SPG,'GFC0003 - TEST LIST',CLASS=A,MSGCLASS=X,
//             NOTIFY=GREG
//*
//*  ZAP TO STOP TSO TEST 'LIST .... I' STOPPING AT BAD OPCODE.
//*
//STEP1   EXEC SERVSMPE
//SMPPTFIN DD  *
++USERMOD(GFC0003).
++VER(Z038) FMID(HTE23D2).
++ZAP(IKJEGLSA) DISTLIB(ACMDLIB).
NAME IKJEGLSA
IDRDATA GFC0003
VER 0CE2 12FF,4770,B021
VER 16C4 E9E9,E9E9,E9E9,E9E9   PATCH AREA
REP 0CE2 47F0,B6C5,0700        B     TO THE FOLLOWING CODE
REP 16C4 55F0,B4F1             CL    R15,FFOUR
REP 16C8 4740,B713             BL    GOBACK
REP 16CC 4720,B021             BH    LIST180
REP 16D0 D207,6004,B70B        MVC   4(8,R6),DC
REP 16D6 58F0,A07C             L     R15,VPDEPT
REP 16DA F342,600C,F000        UNPK  12(5,R6),0(3,R15)
REP 16E0 DC03,600C,B60B        TR    12(4,R6),TRTAB-240
REP 16E6 927D,6010             MVI   16(R6),C''''
REP 16EA 41F0,F002             LA    R15,2(,R15)
REP 16EE 4130,3002             LA    R3,2(,R3)
REP 16F2 4160,6011             LA    R6,17(,R6)
REP 16F6 47F0,CD5A             B     LIST170
REP 16FA F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6   TRTAB  DC  C'0123...DEF'
REP 170A C4C340404040E77D  DC  DC    C'DC    X'''
REP 1712 12FF         GOBACK   LTR   R15,R15
REP 1714 4770,B021             BNZ   LIST180
REP 1718 47F0,CCE8             B     BACK TO WHERE WE CAME FROM
/*
//SMPEIN   DD  *
 SET BOUNDARY(MVSTZN).
  RESTORE  SELECT (GFC0003).
 SET BOUNDARY(GLOBAL).
  RECEIVE  SELECT (GFC0003)  SYSMOD  SOURCEID (GASNFUEL).
 SET BOUNDARY(MVSTZN).
    APPLY  SELECT (GFC0003).
/*
//
./ ADD NAME=GFC0004  0102-91130-92021-1830-00062-00064-00000-GREG
//GREGU04  JOB SPG,'GFC0004 - JESIOSVC',CLASS=A,MSGCLASS=X,
//             NOTIFY=GREG,COND=(0,NE)
//*
//*  THIS JOB INSTALLS THE JES I/O COUNT USER SVC.  IT MUST BE
//*  REGISTERED IN THE SVC TABLE VIA IEASVC00 IN SYS1.PARMLIB
//*  AS A TYPE 3 WITH NO LOCKS.  APF AUTHORIZATION IS NOT REQUIRED.
//*
//*  HERE IT IS INSTALLED AS SVC 219 - SEE THE ALIAS IN THE JCLIN.
//*
//*  THE SVC IS DFP RELEASE INDEPENDENT, BUT IS ASSOCIATED WITH
//*  DFP BECAUSE IT IS INVOKED BY TWO DFP-OWNED MODULES:
//*  IGG019DJ (QSAM) AND IGG019DK (BSAM).
//*
//*  THIS USERMOD SHOULD BE NAMED AS A PRE-REQ BY THE USERMOD
//*  WHICH INSTALLS THE SVC CALLS INTO IGG019DJ AND IGG019DK.
//*  IT IS A SEPARATE USERMOD SO THAT THE ZAPS CAN BE RE-INSTALLED
//*  AS REQUIRED BY PUT MAINTENANCE WITHOUT RE-INSTALLING THIS SVC.
//*
//STEP1   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DATA,DLM=$$
++USERMOD(GFC0004).
++VER(Z038) FMID(HDP3330).
++JCLIN.
//LK1   EXEC LINKS,
// PARM='NCAL,LET,REUS,RENT,REFR,AMODE=31,RMODE=ANY',
//    UNIT='',SER=,N=,NAME=LPALIB,P1=' ',
//    MOD=,P2=' ',OBJ=,CLASS=
//AOSD0 DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSD0
//SYSLIN DD *
  INCLUDE AOSD0(JESIOSVC)
  ENTRY JESIOSVC
  ALIAS IGC0021I
  NAME  JESIOSVC(R)
/*
++MOD(JESIOSVC) DISTLIB(AOSD0).
$$
//SYSUT2   DD  DSN=&&PTFIN,DISP=(NEW,PASS),UNIT=VIO3330, <== CHECK UNIT
//             SPACE=(TRK,(10,10)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)
//SYSIN    DD  DUMMY
//STEP2   EXEC PGM=IEV90,PARM='NODECK,OBJECT'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=VIO3330,SPACE=(CYL,(1,1))   <=== CHECK UNIT
//SYSLIN   DD  DSN=&&PTFIN,DISP=(MOD,PASS)
//SYSIN    DD  DSN=ALLAN.SMP.USERMODS(JESIOSVC),DISP=SHR  <=========
//STEP3   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY JESIOSVC('GFC0004')
/*
//SYSUT2   DD  DSN=&&PTFIN,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//STEP4   EXEC SERVSMPE
//SMPPTFIN DD  DSN=&&PTFIN,DISP=(OLD,PASS)
//SMPEIN   DD  *                    <==== CHECK ZONE NAME, SOURCEID
 SET BOUNDARY(GLOBAL).
  RECEIVE  SELECT (GFC0004)  SYSMOD  SOURCEID (GASNFUEL).
 SET BOUNDARY(MVSTZN).
    APPLY  SELECT (GFC0004).
/*
//
./ ADD NAME=GFC0005  0102-91130-92021-1841-00060-00062-00000-GREG
//GREGU05  JOB SPG,'GFC0005 - I/O COUNT',CLASS=A,MSGCLASS=X,
//             NOTIFY=GREG
//*
//*  ZAP TO CALL USER SVC 219 TO COUNT JES SAM I/O MACRO CALLS
//*
//STEP1   EXEC SERVSMPE
//SMPPTFIN DD  *
++ USERMOD(GFC0005)    /* MAINTAIN JES I/O COUNTS IN TCT */ .
++ VER(Z038) FMID(HDP3330) PRE(GFC0004).
++ ZAP(IGG019DJ) .
 NAME IGG019DJ
 EXPAND IGG019DJ(18)
IDRDATA GFC0005
VER 0000 0000,000C           DC    A(GETENTRY)
VER 0004 0000,0018           DC    A(PUTENTRY)
VER 000C 47F0,F042  GETENTRY B     GETROUTN
VER 0018 47F0,F1EA  PUTENTRY B     PUTROUTN
VER 001C 47F0,F5F8           B     PUTXRTN
VER 06AA 0000
VER 06AC 0000,0000
VER 06B0 0000
VER 06B2 0000,0000
VER 06B6 0000
VER 06B8 0000,0000
REP 000C 47F0,F69E  GETENTRY B     GETSVC
REP 0018 47F0,F698  PUTENTRY B     PUTSVC
REP 001C 47F0,F69E           B     PUTXSVC
REP 06AA 0ADB       GETSVC   SVC   219
REP 06AC 47F0,F042           B     GETROUTN
REP 06B0 0ADB       PUTSVC   SVC   219
REP 06B2 47F0,F1EA           B     PUTROUTN
REP 06B6 0ADB       PUTXSVC  SVC   219
REP 06B8 47F0,F5F8           B     PUTXRTN
++ ZAP(IGG019DK) .
 NAME IGG019DK
 EXPAND IGG019DK(10)
IDRDATA GFC0005
VER 0008 0000,00FA           DC    A(ENTCHECK)
VER 00FA 90EC,D00C  ENTCHECK SAVE  (14,12)
VER 00FE 1871                LR    RDECB,R1
VER 0100 5880,7008           L     RDCB,DECDCBAD(,RDECB)
VER 0104 4160,0008           LA    R6,8
VER 0108 47F0,F03C           B     BEGIN
VER 0922 0000
VER 0924 0000
VER 0926 0000
VER 0928 0000,0000
REP 0108 47F0,F828           B     SVCCHECK
REP 0922 1818       SVCCHECK LR    R1,RDCB
REP 0924 0ADB                SVC   219
REP 0926 1817                LR    R1,RDECB
REP 0928 47F0,F03C           B     BEGIN
/*
//SMPEIN   DD  *                    <==== CHECK ZONE NAME, SOURCEID
 SET BOUNDARY(GLOBAL).
  RECEIVE  SELECT (GFC0005)  SYSMOD  SOURCEID (GASNFUEL).
 SET BOUNDARY(MVSTZN).
    APPLY  SELECT (GFC0005).
/*
//
./ ADD NAME=IKJTSO00 0114-89129-91085-1314-00152-00103-00000-SPGIP
/********************************************************************/
/*                                                                  */
/*      THIS IS A SAMPLE MEMBER WHICH MAY BE PLACED INTO            */
/*  SYS1.PARMLIB(IKJTSO00).  THE DATA IN THE MEMBER IKJTSO00        */
/*  IS USED AT IPL TIME TO DEFINE THE AUTHORIZED COMMAND            */
/*  LIST, THE AUTHORIZED PROGRAM LIST, THE NOT BACKGROUND           */
/*  COMMAND LIST, THE AUTHORIZED BY THE TSO SERVICE                 */
/*  FACILITY LIST, AND TO CREATE THE DEFAULTS THE SEND COMMAND      */
/*  WILL USE.                                                       */
/*                                                                  */
/*      THE DATA IN THIS MEMBER SHOULD BE MODIFIED AS APPROPRIATE   */
/*  AND PLACED INTO THE DATA SET SYS1.PARMLIB(IKJTSO00).            */
/*                                                                  */
/*                                                                  */
/********************************************************************/

AUTHCMD NAMES(               /* AUTHORIZED COMMANDS */      +
   RECEIVE                   /*  TSO COMMANDS       */      +
   TRANSMIT XMIT             /*                     */      +
   LISTB    LISTBC           /*                     */      +
   LISTD    LISTDS           /*                     */      +
   SE       SEND             /*                     */      +
   RACONVRT                  /*                     */      +
   SYNC                      /*                     */      +
   TESTAUTH TESTA            /*                     */      +
   PARMLIB  IKJPRMLB         /*                     */      +
   VLFNOTE                   /*                     */      +
   NDVRC1                    /* ENDEVOR             */      +
                             /*                     */      +
   BINDDATA BDATA            /*  DASD CACHE RELATED */      +
   LISTDATA LDATA            /*                     */      +
   SETCACHE SETC             /*                     */      +
                             /*                     */      +
   ALTER                     /* AMS AND SMS RELATED */      +
   DCOLLECT DCOL             /*                     */      +
                             /*                     */      +
   AD       ADDSD            /*  RACF 5740-XXH      */      +
   ADIR     ADDDIR           /*  RACF 5740-XXH      */      +
   AF       ADDFILE          /*  RACF 5740-XXH      */      +
   AG       ADDGROUP         /*  RACF 5740-XXH      */      +
   AU       ADDUSER          /*  RACF 5740-XXH      */      +
   ALG      ALTGROUP         /*  RACF 5740-XXH      */      +
   ALD      ALTDSD           /*  RACF 5740-XXH      */      +
   ALF      ALTFILE          /*  RACF 5740-XXH      */      +
   ALTDIR                    /*  RACF 5740-XXH      */      +
   ALU      ALTUSER          /*  RACF 5740-XXH      */      +
   BLKUPD                    /*  RACF 5740-XXH      */      +
   CO       CONNECT          /*  RACF 5740-XXH      */      +
   DD       DELDSD           /*  RACF 5740-XXH      */      +
   DDIR     DELDIR           /*  RACF 5740-XXH      */      +
   DF       DELFILE          /*  RACF 5740-XXH      */      +
   DG       DELGROUP         /*  RACF 5740-XXH      */      +
   DU       DELUSER          /*  RACF 5740-XXH      */      +
   LD       LISTDSD          /*  RACF 5740-XXH      */      +
   LDIR     LDIRECT          /*  RACF 5740-XXH      */      +
   LF       LFILE            /*  RACF 5740-XXH      */      +
   LG       LISTGRP          /*  RACF 5740-XXH      */      +
   LU       LISTUSER         /*  RACF 5740-XXH      */      +
   RALT     RALTER           /*  RACF 5740-XXH      */      +
   RDEF     RDEFINE          /*  RACF 5740-XXH      */      +
   RDEL     RDELETE          /*  RACF 5740-XXH      */      +
   RE       REMOVE           /*  RACF 5740-XXH      */      +
   RL       RLIST            /*  RACF 5740-XXH      */      +
   RVARY                     /*  RACF 5740-XXH      */      +
   PW       PASSWORD         /*  RACF 5740-XXH      */      +
   PE       PERMIT           /*  RACF 5740-XXH      */      +
   PDIR     PERMDIR          /*  RACF 5740-XXH      */      +
   PF       PERMFILE         /*  RACF 5740-XXH      */      +
   SETR     SETROPTS         /*  RACF 5740-XXH      */      +
   SR       SEARCH           /*  RACF 5740-XXH      */      +
   SRDIR                     /*  RACF 5740-XXH      */      +
   SRF      SRFILE           /*  RACF 5740-XXH      */      +
   IRRDPI00                  /*  RACF 5740-XXH      */      +
                             /*                     */      +
   $                         /* ROYAL INSURANCE CMDS*/      +
   CDSCB                     /*                     */      +
   DEBUG                     /*                     */      +
   IM                        /*                     */      +
   LOOK                      /*                     */      +
   ON                        /*                     */      +
   REVVSAM                   /*                     */      +
   TSOPNAME                  /*                     */      +
   ZAP                       /*                     */      +
   TMONCICS                  /* TMON/CICS           */      +
                  )

AUTHPGM NAMES(               /* AUTHORIZED PROGRAMS */      +
   IEBCOPY                   /*                     */      +
                             /*                     */      +
   NDVRC1                    /* ENDEVOR             */      +
                             /*                     */      +
   ICHUT100                  /*  RACF 5740-XXH      */      +
   ICHUT200                  /*  RACF 5740-XXH      */      +
   ICHUT400                  /*  RACF 5740-XXH      */      +
   IRRUT100                  /*  RACF 5740-XXH      */      +
   IRRUT200                  /*  RACF 5740-XXH      */      +
   IRRUT400                  /*  RACF 5740-XXH      */      +
   IRRDSC00                  /*  RACF 5740-XXH      */      +
   ICHDSM00                  /*  RACF 5740-XXH      */      +
   IRRDPI00                  /*  RACF 5740-XXH      */      +
           )

NOTBKGND NAMES(        /* COMMANDS WHICH MAY NOT BE */      +
                       /* ISSUED IN THE BACKGROUND. */      +
   OPER     OPERATOR         /*                     */      +
   TERM     TERMINAL)        /*                     */

AUTHTSF NAMES(   /* PROGRAMS TO BE AUTHORIZED WHEN  */      +
                 /* WHEN CALLED THROUGH THE TSO     */      +
                 /* SERVICE FACILITY.               */      +
   IEBCOPY                   /*                     */      +
   NDVRC1                    /* ENDEVOR             */      +
   IKJEFF76)                 /*                     */

SEND                       /* SEND COMMAND DEFAULTS */      +
   OPERSEND(ON)              /*                     */      +
   USERSEND(ON)              /*                     */      +
   SAVE(ON)                  /*                     */      +
   CHKBROD(OFF)              /*                     */      +
   LOGNAME(SYS1.BRODCAST)    /*                     */

ALLOCATE                   /* ALLOCATE COMMAND DEFAULT          */  +
   DEFAULT(OLD)              /*                                 */

TRANSREC NODESMF((NODENAME,SMF)) /* TRANSMIT/RECEIVE DEFAULTS      */ +
                                  /*                               */ +
         CIPHER(YES)              /*                               */ +
         SPOOLCL(B)               /*                               */ +
         OUTWARN(10000,5000)      /*                               */ +
         OUTLIM(30000)            /*                               */ +
         VIO(VIO)                 /*                               */ +
         LOGSEL(LOG)              /*                               */ +
         LOGNAME(MISC)            /*                               */ +
         DAPREFIX(TUPREFIX)       /*                               */ +
         USRCTL(NAMES.TEXT)       /*                               */ +
         SYSOUT(*)                /*                               */

TEST  SUBCMD(          /* EXTRA TEST SUBNCOMMANDS   */      +
   (LB,IKJT9LB)              /* LIST BREAK POINTS   */      +
   (LISTBK,IKJT9LB)          /* LIST BREAK POINTS   */      +
   (F,IKJT9FI)               /* FIND                */      +
   (FIND,IKJT9FI)            /* FIND                */      +
   )                                                        +
      TSOCMD(                                               +
   ALIST                     /*                     */      +
   PDS                       /*                     */      +
   REV      REVIEW           /*                     */      +
   SDS      SHOWDS           /*                     */      +
   TIOT                      /*                     */      +
   TSOEXEC                   /*                     */      +
   )

./ ADD NAME=JESIOSVC 0100-91128-91144-1153-00150-00108-00000-SPGIP
JESIOSVC TITLE ' ROUTINE TO REGISTER LOGICAL JES I/O IN SMF '
***********************************************************************
*                                                                     *
*   THIS ROUTINE WAS WRITTEN BECAUSE JES2 AND JES3 FILE I/O IS NOT    *
*   BEING COUNTED IN SMF RECORDS.  FOR JES2, EXCP COUNTS AND CONNECT  *
*   TIME ARE ONLY BEING COUNTED AT THE ADDRESS SPACE LEVEL, AND NOT   *
*   AT THE DD LEVEL.  IT SEEMS A BIT DIFFICULT TO TRAP THE PARTIC-    *
*   ULARS OF PHYSICAL I/O OPERATIONS AT THE DD LEVEL SO A LOGICAL     *
*   RECORD COUNT WAS DEEMED TO SUFFICE.  CHANNEL CONNECT TIME FOR     *
*   THE FILE WILL REMAIN ZERO, AND ADDRESS SPACE ACCOUNTING WILL      *
*   NOT BE ALTERED.                                                   *
*                                                                     *
*   THIS ROUTINE MERELY INCREMENTS THE I/O COUNT FOR THE FILE OF      *
*   THE DCB POINTED TO BY REGISTER 1 UPON INVOCATION.  IT IS INVOKED  *
*   FROM THE JES SAM-SI QSAM PROCESSOR IGG019DJ AND THE SAM-SI BSAM   *
*   PROCESSOR IGG019DK.  IGG019DJ AND IGG019DK ARE INVOKED BY SAM     *
*   I/O MACROS AND RUN IN THE USER'S ENVIRONMENT, WHEREAS THE I/O     *
*   COUNTS ARE IN KEY ZERO STORAGE IN LSQA.  AS A RESULT, THE SVC     *
*   MECHANISM WAS CHOSEN TO GET INTO KEY ZERO, INCREMENT THE COUNTER  *
*   AND RESTORE THE USER ENVIRONMENT.  HENCE, THIS ROUTINE MUST BE    *
*   INSTALLED AS A TYPE 3 USER SVC.                                   *
*                                                                     *
*   NOTE THAT A USERMOD MUST BE APPLIED TO IGG019DJ AND IGG019DK TO   *
*   ISSUE THIS SVC AFTER THIS SVC HAS BEEN INSTALLED.  SEPARATE CODE  *
*   WILL PROBABLY HAVE TO BE SUPPLIED FOR EACH RELEVANT ENTRY POINT.  *
*                                                                     *
*   TO SIMPLIFY THE IGG019DJ AND IGG019DK USERMOD REGISTER 15 CANNOT  *
*   BE USED AS AN ENTRY CODE, SO THIS ROUTINE CANNOT BE INSTALLED AS  *
*   AN ESR ROUTINE.                                                   *
*                                                                     *
*   ONCE THE I/O COUNTS ARE IN THE TCT THE NEXT PROBLEM IS TO GET     *
*   THEM COPIED TO SMF.  DATA WILL NOT BE COPIED FROM ENTRIES FOR     *
*   NON-VIO DATA SETS WITH ZERO UCB POINTERS.  ONE ALTERNATIVE IS     *
*   TO APPLY ZAPS TO IEEMB848 AND IEFTB722 IN IEFW21SD AND IEFTB728   *
*   IN IEEMB836 TO CHANGE THIS LOGIC.  THE METHOD USED HERE IS TO     *
*   SUPPLY A PHONY UCB POINTER IN THE TCT ENTRY SO THAT EXISTING      *
*   LOGIC WILL COPY THE "EXCP" COUNT AND THE (ZERO) CHANNEL CONNECT   *
*   TIME TO SMF RECORDS.  SINCE THE PHONY UCB ADDRESS WILL POINT TO   *
*   NULLS THE SMF RECORD WILL STILL CONTAIN ZEROS FOR THE UCBCHAN     *
*   AND UCBTYP VALUES, THUS IDENTIFYING THE SLOT AS BEING FOR A       *
*   SYSIN, SYSOUT OR DUMMY DATA SET.  A NON-ZERO I/O COUNT WILL       *
*   OBVIOUSLY ELIMINATE THE DUMMY DATA SET POSSIBILITY.               *
*                                                                     *
*   THE "PHONY UCB" IS INSIDE THIS CSECT SO IT WILL CONTAIN AN        *
*   ADDRESS ABOVE THE 16-MEGABYTE LINE.  SINCE IEEMB848, IEFTB722     *
*   AND IEFTB728 RUN WITH AMODE=31 (ESPECIALLY IF THEY WANT BASE      *
*   REGISTER ADDRESSABILITY) THIS WILL NOT BE A PROBLEM.  HOWEVER,    *
*   IF ANY INSTALLATION CODE EXPECTS OR ENFORCES A 24-BIT UCB         *
*   ADDRESS WHILE EXAMINING THE TCT I/O TABLE, THEN LOGIC CAN BE      *
*   CHANGED TO FIND SOME NULLS BELOW THE LINE OR, MORE SIMPLY,        *
*   RMODE=24 CAN BE SPECIFIED BEFORE THIS SVC IS INSTALLED.           *
*                                                                     *
*   NO USERMOD CODE WILL BE EXECUTED FOR FILES THAT ARE MERELY        *
*   OPENED AND CLOSED.  SMF RECORD SIZES WILL NOT BE AFFECTED,        *
*   BUT WITH THIS USERMOD SOME BYTES IN SMF RECORDS THAT WOULD        *
*   OTHERWISE HAVE BEEN NULL WILL NOW CONTAIN NON-ZERO DATA.          *
*                                                                     *
*   ATTRIBUTES:  REUSABLE, RE-ENTRANT, REFRESHABLE,                   *
*                AMODE 31, RMODE ANY.                                 *
*                                                                     *
*   SVC NUMBER:  219  (CAN BE CHANGED BY THE INSTALLATION.)           *
*                                                                     *
*   PARAMETERS:  REGISTER 1 POINTS TO THE DCB, AS REQUIRED FOR        *
*                THE READ, WRITE, GET AND PUT MACROS.                 *
*                                                                     *
*   ON RETURN:   ALL REGISTERS SHOULD BE RESTORED UNCHANGED WHEN      *
*                CONTROL IS RETURN TO IGG019DJ.  HENCE, THIS SVC      *
*                DOES NOT ALTER THE COMMUNICATION REGISTERS.          *
*                                                                     *
*   WRITTEN BY:  GREG PRICE OF PRYCROFT SIX PTY. LTD. ON 08 MAY 1991. *
*                                                                     *
***********************************************************************
         TITLE ' EXECUTABLE CODE '
JESIOSVC CSECT
JESIOSVC AMODE 31
JESIOSVC RMODE ANY
         USING JESIOSVC,R6
         B     START
         DC    AL1(29),CL29'COUNT-JES-I/O-MACRO-CALLS SVC'
START    ICM   R8,B'1111',164(R4)  POINT TO TCT FROM TCB.
         BZR   R14                 RETURN IF NO SMF TABLES.
         LR    R7,R1               COPY DCB POINTER.
         SLL   R7,8                ENSURE 24-BIT ADDRESS.
         SRL   R7,8
         SLR   R2,R2
         ICM   R2,B'0011',40(R7)   GET DCBTIOT FOR TIOT OFFSET.
         BZR   R14                 ZERO OFFSET SHOULD NOT OCCUR.
         LR    R10,R2              COPY TIOT OFFSET.
         AL    R10,12(,R4)         ADD TIOT ADDR TO POINT TO ENTRY.
         CLI   0(R10),20           TIOT ENTRY AT LEAST 20 BYTES?
         BLR   R14                 NO, BUT SHOULD NOT HAPPEN.
         ICM   R10,B'0111',17(R10) LOAD UCB POINTER.
         BNZR  R14                 SHOULD BE ZERO FOR JES DATA SET.
         ICM   R9,B'1111',12(R8)   POINT TO THE TCT I/O TABLE.
         BZR   R14                 RETURN IF NO SMF TABLES.
         SLR   R10,R10
         ICM   R11,B'1111',4(R9)   GET ENTRY COUNT TIMES 24.
         BZR   R14                 ZERO COUNT SHOULD NOT OCCUR.
         D     R10,=F'24'          GET THE ENTRY COUNT.
         LTR   R10,R10             WAS THE REMAINDER ZERO?
         BNZR  R14                 NO, BUT THIS SHOULD NOT HAPPEN.
         LA    R10,8(,R9)          POINT TO FIRST I/O ENTRY.
IOENTYLP C     R2,0(,R10)          CORRECT TIOT ENTRY?
         BE    FOUNDIT             YES.
         LA    R10,8(,R10)         NO, POINT TO NEXT ENTRY.
         BCT   R11,IOENTYLP        CONTINUE ENTRY SEARCH.
         BR    R14                 NOT FOUND SO RETURN WITHOUT ACTION.
FOUNDIT  L     R2,4(,R10)          LOAD TCT ENTRY OFFSET.
         ALR   R2,R9               POINT TO THE ENTRY.
         LA    R10,1
         AL    R10,8(,R2)          ADD EXCP COUNT TO ONE.
         ST    R10,8(,R2)          SAVE INCREMENTED VALUE.
         ICM   R10,B'1111',0(R2)   BEEN HERE BEFORE?
         BNZR  R14                 YES, RETURN IN TRIUMPH.
         LA    R10,PHONYUCB        NO, POINT TO SOME NULLS.
         ST    R10,0(,R2)          SAVE THE "UCB" ADDRESS.
         MVC   6(2,R2),62(R7)      COPY THE BLOCK SIZE FROM THE DCB.
         BR    R14                 RETURN IN TRIUMPH.
         TITLE ' CONSTANTS AND EQUATES '
PHONYUCB DS    0F
         DC    XL4'00000000'
         DC    XL2'0000'           UCBCHAN - COPIED BY SMF.
         DC    XL7'00000000000000'
         DC    CL3'JES'            UCBNAME - OFTEN COPIED BY USER CODE.
         DC    XL4'00000000'       UCBTYP - BYTES 3 & 4 COPIED BY SMF.
         DC    XL8'0000000000000000'
         DC    CL6'*SPOOL'         UCBVOLI - OFTEN COPIED BY USER CODE.
         SPACE
         LTORG
         SPACE
         DS    0D                  END OF CSECT.
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         END
./ ADD NAME=MPFLST00 0100-89129-91142-1427-00028-00019-00000-SPGIP
.MSGCOLR ENTRYARA(P,N,N)
.MSGCOLR EVETACTN(B,N,N)
.MSGCOLR GENMSG(T,N,N)
.MSGCOLR IMEDACTN(Y,N,H)
.MSGCOLR INSTRERR(W,N,H)
.MSGCOLR OOLCNTL(T,N,N)
.MSGCOLR OOLDATA(G,N,N)
.MSGCOLR OOLLABEL(T,N,N)
.MSGCOLR PPMSG(B,N,N)
.MSGCOLR SELPEN(R,N,N)
.MSGCOLR URGATTN(P,N,H)
.MSGCOLR WARNLGEN(G,N,N)
.MSGCOLR WARNRGEN(G,N,N)
.MSGCOLR WARNRURG(R,B,H)
ARC0020I,SUP(YES),RETAIN(NO)
ARC0036I,SUP(YES),RETAIN(NO)
ARC0100I,SUP(YES),RETAIN(NO)
ARC0120I,SUP(YES),RETAIN(NO)
ARC0216I,SUP(YES),RETAIN(NO)
ARC0229I,SUP(YES),RETAIN(NO)
ARC0270I,SUP(YES),RETAIN(NO)
ARC040*,SUP(YES),RETAIN(NO)
IEA911E,SUP(NO),RETAIN(NO)
IEC502E,SUP(NO),RETAIN(NO)
IEF233D,SUP(NO),RETAIN(NO)
IEF234E,SUP(NO),RETAIN(NO)
IEF863I,SUP(NO),USEREXIT(MSG2USER)
IOS070E,SUP(NO),RETAIN(NO)
./ ADD NAME=MSG2USER 0101-90065-93123-1315-00574-00534-00035-ZGIP01
MSG2USER TITLE 'INTEL EXIT TO INFORM TSO USERS ENQUED ON A DATASET'
MSG2USER CSECT
MSG2USER AMODE 31                 31 BIT ADDRESSING MODE
MSG2USER RMODE ANY                31 BIT RESIDENCY MODE
       TITLE 'PROGRAM MAINTANCE DESCRIPTIONS'
*START PROLOG*********************************************START PROLOG*
*                                                                     *
*  LAST MODIFIED   PROGRAMMER           DESCRIPTION                   *
*     DATE           NAME                                             *
*                                                                     *
*   23 FEB 87      MILTON SOONG    AUTHOR OF THIS PROGRAM.            *
*                                                                     *
*   08 MAR 90      GREG PRICE      CHANGED GETMAIN/FREEMAINS TO USE   *
*                                  SVC 120 EXPANSION AND SUBPOOL 230  *
*                                  INSTEAD OF SUBPOOL 0.  GETMAINS    *
*                                  MADE CONDITIONAL TO EXPLOIT CODE'S *
*                                  TESTING OF RETURN CODE.  GQSCAN    *
*                                  AREA NOW GETMAINED FROM ABOVE THE  *
*                                  SIXTEEN MEGABYTE LINE.  MESSAGE    *
*                                  PREFIX CHANGED FROM 'NTL' TO 'IEF' *
*                                  TO IMPROVE USER "LOOKUPABLENESS".  *
*                                  ENQUEUES FROM OTHER SYSTEMS NOW    *
*                                  DISCARDED SO INCORRECT USERS DO    *
*                                  NOT GET THE MESSAGES.  INCREASED   *
*                                  ASID VALIDATION AGAINST THE ASVT.  *
*                                                                     *
*   03 MAY 93      GREG PRICE      PARSE DSNAME FOR TRAILING BLANK    *
*                                  BECAUSE THE MESSAGE FORMAT HAS     *
*                                  CHANGED.  THE JOB NAME IS SHOWN    *
*                                  AFTER THE DATA SET NAME.           *
*                                  (UY68851/UY68855 @SP420/PUT9107)   *
*                                  REMOVE SP=230 FROM GETMAINS AND    *
*                                  FREEMAINS TO FIX ABEND S09A-A118.  *
*                                  EXIT RUNS IN MASTER SCHEDULAR      *
*                                  ADDRESS SPACE SO SUBPOOL ZERO      *
*                                  USAGE WILL NOT AFFECT USER         *
*                                  REGION HIGH WATER MARK ANYWAY.     *
*                                                                     *
*END   PROLOG*********************************************END   PROLOG*
 TITLE 'TABLE OF CONTENTS'
***********************************************************************
*****                                                             *****
*****  T A B L E   O F   C O N T E N T S                          *****
*****                                                             *****
***********************************************************************
* SECTION      CONTENTS DESCRIPTION                                   *
* -------      ------------------------------------------------------ *
*                                                                     *
*   1          NARRATIVE DESCRIPTION                                  *
* 100          PROGRAM ENTRY AND EXIT.                                *
* 200          SUBROUTINES                                            *
* 200-010      GET THIS TASK'S ASID                         (GTMYASID)*
* 200-020      BUILD DSNAME TO SCAN                         (BLDDSN  )*
* 200-030      BUILD ASID TABLE USING GQSCAN                (BLDASIDT)*
* 200-040      SEND MESSAGES TO TSO USER                    (SENDMSGS)*
* 800          CONSTANTS, LITERALS AND LTORG DEFINITIONS.             *
* 900          DSECT DEFINITIONS.                                     *
* 900-010      COMMUNICATIONS VECTOR TABLE(CVT) DSECT                 *
* 900-020      PREFIX SAVE AREA(PSA) DSECT                            *
* 900-030      ADDRESS SPACE VECTOR TABLE(ASVT) DSECT                 *
* 900-040      ADDRESS SPACE CONTROL BLOCK(ASCB) DSECT                *
* 900-050      RESOURCE INFORMATION BLOCK(RIB) DSECT                  *
* 900-060      WTO USER EXIT PARAMETER LIST DSECT                     *
* 900-070      TPUT MESSAGE WORK AREA DSECT                           *
* 900-080      WTO MESSAGE TEXT DSECT                                 *
* 900-090      DYNAMIC WORK AREA DSECT                                *
*                                                                     *
***********************************************************************
 TITLE '***SEC. 1*** - PROGRAM NARRATIVE DESCRIPTION'
***********************************************************************
*              P R O G R A M   D E S C R I P T I O N                  *
***********************************************************************
*                                                                     *
* NAME         MSG2USER                                               *
*                                                                     *
* ENTRY POINT  MSG2USER                                               *
*                                                                     *
* PURPOSE      THE PURPOSE OF THIS EXIT IS TO ISSUE MESSAGES TO TSO   *
*              USERS WHO ARE ENQUED ON A DATASET CAUSING A BATCH JOB  *
*              TO WAIT.                                               *
*                                                                     *
* OPERATION    THIS WTO EXIT GAINS CONTROL WHENEVER MESSAGE 'IEF863I' *
*              IS ISSUED ON THE OPERATOR' CONSOLE.  THIS EXIT WILL    *
*              THEN USE THE DSNAME PASSED IN THE IEF863I MESSAGE AND  *
*              ISSUE A ''GQSCAN'' FOR ONLY THAT DSNAME.   ''GQSCAN''  *
*              RETURNS ''RESOURCE INFORMATION BLOCK EXTENSIONS(RIBE)''*
*              FOR EVERY TSO USER OR BATCH JOB ENQUED ON THIS DSNAME. *
*              THE EXIT WILL THEN DETERMINE THE JOBNAME OF THE BATCH  *
*              JOB THAT IS WAITING AND WILL ALSO DETERMINE THE TSO    *
*              USERS WHO HAVE THE DATASET ENQUED.  THE FOLLOWING      *
*              MESSAGES WILL BE SENT TO EACH TSO USER ENQUED ON THE   *
*              DATASET:                                               *
*               IEF861I FOLLOWING RESERVED DATASET UNAVAILABLE TO JJJ *
*               IEF863I DSN = DDDDDDDDDD                              *
*                                                                     *
*              IF YOU RECEIVE THIS MESSAGE YOU SHOULD FREE THE DATASET*
*              TO ALLOW THE BATCH JOB TO COMPLETE.                    *
*                                                                     *
* RESTRICTIONS THIS EXIT RECEIVES CONTROL IN 31-BIT ADDRESSING MODE   *
*              RMODE=ANY.  TPUT WHICH IS THE METHOD USED TO SEND THE  *
*              MESSAGES TO TSO USERS CAN BE ISSUED IN 31-BIT MODE BUT *
*              IT'S WORKAREA MUST RESIDE BELOW THE LINE.              *
*                                                                     *
*              THIS EXIT ROUTINE MUST RESIDE IN AN AUTHORIZED LIBRARY *
*              AND ON THE ''LNKLST'' CONCATENATION.                   *
*                                                                     *
*              THE FOLLOWING ENTRY MUST BE ADDED TO THE ACTIVE        *
*              ''MPFLSTXX'' MEMBER OF SYS1.PARMLIB':                  *
*                                                                     *
*                      IEF863I,SUP(NO),USEREXIT(MSG2USER)             *
*                                                                     *
* INPUT        R1   POINTS TO THE ADDRESS OF THE CTXT(WTO TEXT MSG.)  *
*              R13  POINTS ADDRESS OF STANDARD SAVE AREA              *
*              R14  RETURN ADDRESS                                    *
*              R15  ENTRY POINT ADDRESS                               *
*                                                                     *
* OUTPUT       THE FOLLOWING MESSAGES IS ISSUED TO THE TSO USER ENQUED*
*              ON THE DATASET CAUSING JOB TO WAIT:                    *
*                                                                     *
*               IEF861I FOLLOWING RESERVED DATASET UNAVAILABLE TO JJJ *
*               IEF863I DSN = DDDDDDDDDD                              *
*                                                                     *
***********************************************************************
 TITLE '***SEC. 100*** - PROGRAM ENTRY AND EXIT'
MSG2USER CSECT
***********************************************************************
*        R E G I S T E R   E Q U A T E S   A N D   U S A G E          *
***********************************************************************
         SPACE 2
R0       EQU   0   PARAMETER REGISTER
R1       EQU   1   PARAMETER REGISTER OR PARAMETER LIST REGISTER
R2       EQU   2   USE TO BRANCH AND LINK TO SUBROUTINES
R3       EQU   3   WORK REGISTER
R4       EQU   4   WORK REGISTER
R5       EQU   5   WORK REGISTER
R6       EQU   6   WORK REGISTER
R7       EQU   7   WORK REGISTER
R8       EQU   8   WORK REGISTER
R9       EQU   9   BASE REGISTER FOR WTO EXIT PARAMETER LIST
R10      EQU   10  BASE REGISTER FOR OUR DYNAMIC STORAGE AREA.
R11      EQU   11  RESERVED FOR SECOND BASE REGISTER IF NEEDED.
R12      EQU   12  $$$$$$$$ B A S E   R E G I S T E R $$$$$$$$
R13      EQU   13  SAVEAREA REGISTER     (LINKAGE REGISTER)
R14      EQU   14  RETURN REGISTER       (LINKAGE REGISTER)
R15      EQU   15  ENTRY POINT REGISTER  (LINKAGE REGISTER)
         SPACE 1
*        PRINT NOGEN
         TITLE  'PROGRAM MAIN LINE LOGIC ROUTINE'
         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS
         BALR  R12,0              ESTABLISH MODULES BASE REGISTER
         USING *,R12              R12 IS NOW OUR BASE REGISTER
         L     R9,0(R1)           R9==> WTO EXIT PARAMETER LIST
         USING CTXT,R9            ESTABLISH ADDRESSABLITY TO IT
         SPACE
         LA    R0,DYNLEN          R0= LENGTH OF DYNAMIC STORAGE
         GETMAIN RC,LV=(0),LOC=ANY   GET SOME STORAGE
         LTR   R15,R15            Q. DID WE GET IT?
         BNZ   ALLDONE            A. NO.  NO SENSE IN CONTINUING
         LR    R10,R1             ESTABLISH ADDRESSABILITY TO DYNAREA
         USING DYNAREA,R10
         SPACE
         BAL   R2,GTMYASID        GET MY ASID
         BAL   R2,BLDDSN          BUILD DSNAME TO SCAN
         BAL   R2,BLDASIDT        BUILD ASID TABLE USING GQSCAN
         BAL   R2,SENDMSGS        SEND MESSAGES TO TSO USERS
         SPACE
PREDONE  EQU   *
         LA    R0,DYNLEN          R0= L'(DYNAMIC STORAGE AREA)
         FREEMAIN RU,LV=(0),A=(10) R10==> DYNAMIC WKAREA TO FREE
         SPACE
ALLDONE  EQU   *
         LM    R14,R12,12(R13)    RESTORE CALLERS REGISTERS
         BR    R14                CLEAN UP AND RETURN
 TITLE '***SEC. 200*** - SUBROUTINES FOR THIS PROGRAM'
         SPACE 5
***********************************************************************
*                                                                     *
*                                                                     *
*                                                                     *
*      THE FOLLOWING PAGES ARE ALL OUR SUBROUTINES WE USE IN          *
*      THIS PROGRAM.                                                  *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
 TITLE '***SEC. 200-010*** - GET THIS TASKS ASID'
         DS    0D
         DC    CL8'GTMYASID'
*********************************************************************
*               G T M Y A S I D   S U B R O U T I N E               *
*-------------------------------------------------------------------*
*                                                                   *
* THIS SUBROUTINE WILL EXTRACT THE ASID OF THE CURRENTLY RUNING TASK*
* THAT IS   W A I T I N G   FOR THE DATASET NAME WHICH IS DISPLAYED *
* IN THE MESSAGE TEXT: IEF863I DSN = DSNAME.                        *
*                                                                   *
* WE DO IT THIS WAY BECAUSE THIS EXIT GETS CONTROL FIRST AND THEN   *
* THE DISPATCHER GETS CONTROL.  THEREFORE PSAAOLD WILL CONTAIN THE  *
* THE ASCB OF THE TASK WAITING FOR THE DATASET.                     *
*                                                                   *
*********************************************************************
         SPACE 2
GTMYASID EQU   *
         L     R1,PSAAOLD-PSA(0,0)     EXTRACT WAITING TASK'S ASID
         MVC   ALCMASID,ASCBASID-ASCB(R1)   AND SAVE IT FOR LATER USE
         SPACE 2
         BR    R2                 RETURN TO MAINLINE ROUTINE
 TITLE '***SEC. 200-020*** - BUILD DSNAME TO SCAN'
         DS    0D
         DC    CL8'BLDDSN'
*********************************************************************
*                   B L D D S N   S U B R O U T I N E               *
*-------------------------------------------------------------------*
*                                                                   *
* AT ENTRY TO THIS SUBROUTINE REGISTER 9 POINTS TO THE WTO EXIT     *
* INPUT PARAMETER LIST.  FROM THIS PARAMETER LIST REGISTER 3 IS     *
* LOADED WITH THE ADDRESS OF THE MESSAGE ATTRIBUTES.  THEN THE      *
* ADDRESS OF MESSAGE (IEF863I DSN= XXXX) IS LOADED INTO REGISTER 4. *
* THE LENGTH OF THE DSNAME IS COMPUTED AND SAVED FOR LATER USE.     *
* THE DSNAME IS SAVED ALSO FOR LATER USE.                           *
*                                                                   *
*********************************************************************
         SPACE 2
BLDDSN   EQU   *
         L     R3,CTXTTXPJ        ESTABLISH ADDRESSABILITY TO
         USING CTXTATTR,R3        THE MESSAGE ATTRIBUTES.
         LA    R4,CTXTTMSG        R4===> A(IEF863I DSN= ) TEXT
         USING MSGTEXT,R4         ESTABLISH ADDRESSABILITY TO IT
         SPACE 2
         MVI   ALCDSNM,C' '       CLEAR DSNAME WORKAREA
         MVC   ALCDSNM+1(L'ALCDSNM-1),ALCDSNM
         SLR   R5,R5              CLEAR R5
         LH    R0,CTXTTLEN        R0= L'(WTO MESSAGE TEXT)
         LA    R6,MSGFXLEN        R6= L('FIXED PORTION OF MESSAGE)
*                                       'IEF863I DSN = '
         SR    R0,R6              COMPUTE MAXIMUM LENGTH OF DSNAME
         BNP   PREDONE            HANDLE ZERO LENGTH
         LA    R6,MSGDSN          POINT TO DATA SET NAME IN MESSAGE
         LA    R1,44              GET MAXIMUM DATA SET NAME LENGTH
         CR    R0,R1              IS DETERMINED MAXIMUM TOO HIGH?
         BNH   BLDDSNLP           NO, PROCEED
         LR    R0,R1              YES, REDUCE IT JUST TO BE SURE
BLDDSNLP CLI   0(R6),C' '         FOUND A TRAILING BLANK?
         BE    GOTDSNLN           YES, STOP DSNAME PARSE
         LA    R5,1(,R5)          NO, INCREMENT DSNAME LENGTH COUNTER
         LA    R6,1(,R6)          POINT TO NEXT CHARACTER IN DSNAME
         BCT   R0,BLDDSNLP        GO TEST IT
GOTDSNLN LTR   R5,R5              NOW HAVE LENGTH OF DATA SET NAME
         BNP   PREDONE            HANDLE ZERO LENGTH
         ST    R5,ALCDSNLN        SAVE LENGTH OF DSNAME FOR LATER USE
         BCTR  R5,0               MINUS 1 FOR EXECUTED MOVE
         EX    R5,SAVDSN          MVC   ALCDSNM(0),MSGDSN
         SPACE 2
         BR    R2                 RETURN TO MAINLINE
         SPACE 2
SAVDSN   MVC   ALCDSNM(0),MSGDSN  <<< EXECUTED >>>
         SPACE 3
         DROP  R3
         DROP  R4
 TITLE '***SEC. 200-030*** - BUILD ASID TABLE USING GQSCAN'
         DS    0D
         DC    CL8'BLDASIDT'
*********************************************************************
*               B L D A S I D T   S U B R O U T I N E               *
*-------------------------------------------------------------------*
*                                                                   *
* THIS SUBROUTINE WILL INVOKE THE 'GQSCAN' MACRO TO SEARCH FOR ALL  *
* JOBS OR TSO USERS THAT ARE ENQUED TO A DATASET.  THE DATASET NAME *
* WAS PASSED IN THE WTO INPUT PARAMETER LIST AND SAVED IN AN AREA   *
* LABELED 'ALCDSNM'. 'GQSCAN' RETURNS RIBES OF EACH TSO USER OR JOB *
* ENQUED TO THIS DATASET.  THIS SUBROUTINE WILL INSPECT EACH RIBE   *
* RETURNED AND SAVE THE ASID IN A TABLE.  THIS TABLE WILL BE USED   *
* BY THE 'SENDMSG' SUBROUTINE TO SEND MESSAGES.  IF THE ASID BELONGS*
* TO THIS TASK IT WILL NOT BE SAVED IN THE TABLE.  IF THE ASID IS   *
* WAITING FOR A RESOURCE THEN IT WILL BECOME THE JOBNAME AND HIS    *
* ASID WILL NOT BE SAVED IN THE TABLE.  ONLY ENQS ON THIS SYSTEM    *
* WILL BE EXAMINED BECAUSE MESSAGES CAN ONLY BE SENT TO USERS ON    *
* THIS SYSTEM.                                                      *
*                                                                   *
*********************************************************************
         SPACE 2
BLDASIDT EQU   *
         STM   R0,R15,ALCSAVE     SAVE ALL MY REGISTERS
         SPACE 2
         LA    R3,ALCSVIDS        R3===> A(TABLE TO HOLD ASIDS)
         ST    R3,ALCENIDS        SAVE END OF TABLE ADDRESS
         SPACE 1
         L     R6,ALCDSNLN        R6= L'(ENQUED DSNAME)
         LA    R5,ALCDSNM         R5===> A(ENQUEUED DSNAME)
         L     R0,SCANGM          R0= L'(GQSCAN STORAGE)
         GETMAIN RC,LV=(0),LOC=ANY
         LTR   R15,R15            Q. DID WE GET OUR STORAGE?
         BNZ   TSOEND             A. NO.  DON'T CONTINUE
         ST    R1,SCANPTR         A. YES. SAVE ADDRESS OF GETMAIN CORE
         LR    R7,R1              TELL GQSCAN WHERE THE STORAGE STARTS
         LA    R13,ALCSAVE2       GIVE GQSCAN A 18 FULLWORD SAVEAREA
         SPACE 1
         GQSCAN AREA=((R7),8192),REQLIM=10,SCOPE=ALL,                  X
               RESNAME=(MAJNAM,(R5),(R6)),MF=(E,GQPARMS)
         SPACE 1
         LTR   R15,R15            Q. GQSCAN SUCCESSFUL?
         BNZ   TSOEND             A. NO. DONT CONTINUE
         ST    R0,RIBLNGTH        STORE L'RIB AND L'RIBE
         ST    R1,NUMRIBS         SAVE NUMBER OF RIBS RETURNED
         LTR   R8,R1              Q. ANY RIBS RETURNED?
         BZ    TSOEND             A. NO. DONT CONTINUE
         L     R7,SCANPTR         R7===> A(RIBS RETURNED)
         USING RIB,R7             ESTABLISH ADDRESSABILITY TO RIB
RIBLOOP  EQU   *
         LR    R3,R7
         AH    R3,RIBLNGTH        R3===> A(RIB VARIABLE SECTION)
         AH    R3,RIBVLEN         R3===> A(FIRST RIBE) OR RIB EXTENSION
         USING RIBE,R3            ESTABLISH ADDRESSABILITY TO RIBE
         L     R1,RIBNRIBE        R1= NUMBER OF RIB EXTENSIONS RETURNED
         LA    R15,ALCSVIDS       R15===> START OF ASID TABLE
         LA    R14,ALCSVIDE       R14===> END OF ASID TABLE
RIBELOOP EQU   *
         TM    RIBESFLG,RIBESTAT  Q. IS THIS THE OWNER OF THE RESOURCE?
         BO    RIBOWNER           A. YES HE IS AND HE IS NOT WAITING.
         MVC   ALCJOBNM,RIBEJBNM  A. NO. THIS GUY IS WAITING FOR DSNAME
         B     BUMPRIBE              SAVE HIS NAME BUT NOT HIS ASID.
RIBOWNER EQU   *
         L     R4,CVTPTR          R4===> A(CVT)
         CLC   RIBESYSN,CVTSNAME-CVT(R4)  Q. REQUESTOR ON THIS SYSTEM?
         BNE   BUMPRIBE                   A. NO.  CANNOT SEND A MESSAGE
         CLC   ALCMASID,RIBEASID  Q. IS IT THE TASK'S ASID?
         BE    BUMPRIBE           A. YES. JUST IGNORE IT
         MVC   0(2,R15),RIBEASID  ELSE KEEP THE ASID
         LA    R15,2(R15)         BUMP TABLE POINTER
         CR    R15,R14            Q. IS THE ASID TABLE FULL?
         BNL   RIBEOUT            A. YES.
BUMPRIBE EQU   *
         AH    R3,RIBELENG        POINT TO NEXT RIB EXTENSION
         BCT   R1,RIBELOOP        AND INSPECT IT.
         SPACE 1
BUMPRIB  EQU   *
         SLR   R4,R4              CLEAR R4 FOR WORK
         L     R5,RIBNRIBE        NUMBER OF RIBES
BUMPLOOP EQU   *
         AH    R4,RIBELENG        ADD LENGTH OF A RIBE
         BCT   R5,BUMPLOOP        ADD TIMES NUMBER OF RIBES
         AH    R4,RIBLNGTH        ADD LENGTH OF RIB
         AH    R4,RIBVLEN         ADD LENGTH OF VARIABLE SECTION
         AR    R7,R4              R7===> POINTS TO NEXT RIB
         BCT   R8,RIBLOOP         START WITH NEXT RIB
         SPACE 1
RIBEOUT  EQU   *
         ST    R15,ALCENIDS       SAVE THE END OF TABLE ADDRESS.
         L     R0,SCANGM          GRAB GQSCAN WORKAREA LENGTH
         L     R1,SCANPTR         R1===> A(GQSCAN WORKAREA)
         SPACE 1
         FREEMAIN RU,LV=(0),A=(1) FREE GQSCAN WORKAREA
         SPACE 3
         LM    R0,R15,ALCSAVE     RESTORE REGISTERS
         BR    R2                 RETURN TO MAINLINE ROUTINE
         SPACE 3
TSOEND   EQU   *
         LM    R0,R15,ALCSAVE     RESTORE REGISTERS
         B     PREDONE            AND GET OUT OF THIS EXIT.
 TITLE '***SEC. 200-040*** - SEND MESSAGES TO TSO USER'
         DS    0D
         DC    CL8'SENDMSGS'
*********************************************************************
*               S E N D M S G S   S U B R O U T I N E               *
*-------------------------------------------------------------------*
*                                                                   *
* THIS SUBROUTINE WILL SEND THE FOLLOWING MESSAGES TO ALL TSO USERS *
* WHO HAVE THE DATASET ENQUED CAUSING A BATCH JOB TO WAIT:          *
*        IEF861I FOLLOWING RESERVED DATA SET IS UNAVAILABLE TO JJJ  *
*        IEF863I DSN= DSNAME ENQUED                                 *
*                                                                   *
* THIS SUBROUTINE WILL DO A GETMAIN FOR STORAGE BELOW THE LINE.  WE *
* HAVE TO DO IT THIS WAY BECAUSE THIS EXIT RECEIVES CONTROL IN 31   *
* BIT ADDRESSING MODE AND CAN RESIDE ABOVE OR BELOW THE LINE.  TPUT *
* CAN BE ISSUED IN 31 BIT ADDRESSING MODE BUT THE INPUT TO IT MUST  *
* BE BELOW THE LINE.                                                *
*                                                                   *
* TPUT IS THE METHOD USED TO SEND THE MESSAGES TO THE TSO USER.     *
*                                                                   *
*********************************************************************
         SPACE 2
SENDMSGS EQU   *
         STM   R0,R15,ALCSAVE     SAVE ALL MY REGISTERS
         SPACE 2
         LA    R0,TPUTALEN        R0= L(TPUT WORKAREA LENGTH)
         GETMAIN RC,LV=(0),LOC=BELOW GET STORAGE BELOW THE LINE
         LTR   R15,R15            Q. DID WE GET STORAGE?
         BNZ   SENDEXT            A. NO. DON'T CONTINUE
         ST    R1,TPUTPTR         A. YES. SAVE ITS ADDRESS
         LR    R11,R1             USE R11 AS THE
         USING TPUTAREA,R11         BASE FOR TPUT WORKAREA.
         SPACE 1
********************************************************
* BUILD TEXT MESSAGES 1 AND 2.  THE MESSAGES ARE BUILT *
* BUILT IN A GETMAINED AREA BELOW THE LINE BECAUSE THE *
* TPUT MACRO REQUIRES THAT IT'S INPUT BE IN 24 BIT MODE*
********************************************************
         MVC   TPUTTXT1(64),TMSGTXT1 BUILD MESSAGE TEXT 1
         MVC   TPUTTXT2(57),TMSGTXT2 BUILD MESSAGE TEXT 2
         MVC   TPUTJBNM,ALCJOBNM  MOVE JOBNAME TO MESSAGE
         L     R3,ALCDSNLN        R3= L(ENQUED DSNAME)
         BCTR  R3,0               MINUS 1 FOR EXECUTED MVC
         EX    R3,MVCDSN          MVC   TPUTDSN(0),MSGDSN
         LA    R3,1(,R3)          RESTORE ORIGINAL LENGTH VALUE
         SPACE 2
         LA    R3,ALCSVIDS        R3===> A(ASID TABLE)
         L     R4,CVTPTR          R4===> A(CVT)
         L     R4,CVTASVT-CVTMAP(,R4)  R4===> ASVT
         SLR   R14,R14
         SPACE 1
SENDMSG1 EQU   *
         C     R3,ALCENIDS        Q. END OF ASID TABLE?
         BNL   SENDEND            A. YES IT IS.
         SPACE 1
         SLR   R5,R5              CLEAR FOR INSERT (ASID < 64K)
         ICM   R5,3,0(R3)         PICKUP ASID TABLE ENTRY
         BZ    SENDMSG2           ZERO ASID IS INVALID
         C     R5,ASVTMAXU-ASVT(,R4)     Q. ASID TOO BIG TO BE VALID?
         BH    SENDMSG2                  A. YES.  ASID CANNOT EXIST.
         SLL   R5,2               COMPUTE ENTRY IN ASVT
         L     R5,ASVTFRST-ASVT(R5,R4)
         LTR   R5,R5                     Q. IS THIS ASID ASSIGNED?
         BNP   SENDMSG2                  A. NO.  CAN'T SEND IT A MSG.
         ICM   R0,15,ASCBTSB-ASCB(R5)    Q. IS THIS A TSO ASCB?
         BZ    SENDMSG2                  A. NO.  IT MUST BE BATCH.
         SPACE 1
********************************************************
* SEND MESSAGES TO THE TSO USERS WHO HAVE THE RESOURCE *
* ENQUED.                                              *
********************************************************
         LA    R6,TMSGT1L         R6= L'(TPUT TEXT1)
         STH   R6,TPUTMSGL        SAVE IT
         ICM   R0,12,0(3)         ASID OF TSO USER
         ICM   R0,3,TPUTMSGL      MESSAGE LENGTH OF TEXT 1
         LA    R1,TPUTTXT1        ADDRESS OF MESSAGE TEXT 1
         TPUT  (1),(0),R          SEND IT TO THE TSO USER
         SPACE 1
         LA    R6,TMSGT2L         R6= L'(TPUT TEXT1)
         STH   R6,TPUTMSGL        SAVE IT
         ICM   R0,12,0(3)         ASID OF TSO USER
         ICM   R0,3,TPUTMSGL      MESSAGE LENGTH OF TEXT 2
         LA    R1,TPUTTXT2        ADDRESS OF MESSAGE TEXT 2
         TPUT  (1),(0),R          SEND IT TO THE TSO USER
         SPACE 1
SENDMSG2 EQU   *
         LA    R3,2(R3)           R3===> A(NEXT ASID IN TABLE)
         B     SENDMSG1           CONTINUE UNTIL END OF ASID TABLE.
         SPACE 2
SENDEND  EQU   *
         L     R1,TPUTPTR         R1====> A(STORAGE TO FREE)
         LA    R0,TPUTALEN        R0====> STORAGE TO GETMAIN
         SPACE 1
         FREEMAIN RU,LV=(0),A=(1)
         SPACE 2
SENDEXT  EQU   *
         LM    R0,R15,ALCSAVE     RESTORE ALL REGISTERS
         BR    R2                 RETURN TO MAINLINE
MVCDSN   MVC   TPUTDSN(0),ALCDSNM <<< EXECUTED >>>
 TITLE '***SEC. 800*** - CONSTANTS, LITERALS AND LTORG DEFINITIONS'
         SPACE 2
         DS    0D
         DC    CL8'CONSTANTS'
MAJNAM   DC    CL8'SYSDSN  '      MAJOR RESOURCE NAME FOR GQSCAN
SCANGM   DC    AL1(000),AL3(16384) GETMAIN SIZE FOR GQSCAN
         DS    0D
TMSGTXT1 EQU   *
         DC    CL08'IEF861I '     MESSAGE ID
         DC    CL48'FOLLOWING RESERVED DATA SET NAME UNAVAILABLE TO '
         DC    CL08'        '
TMSGT1L  EQU   *-TMSGTXT1
         SPACE 1
TMSGTXT2 EQU   *
         DC    CL08'IEF863I '
         DC    CL05'DSN= '
         DC    CL44'                                            '
TMSGT2L  EQU   *-TMSGTXT2
         SPACE 3
         PRINT GEN
         LTORG
         DS    0D                 END OF CSECT
 TITLE '***SEC. 900-010*** - COMMUNICATIONS VECTOR TABLE(CVT) DSECT'
*********************************************************************
* THIS DSECT IS A MAP THE MVS COMMUNICATIONS VECTOR TABLE WHICH IS  *
* REFERRED TO AS THE CVT.  IT CONTAINS POINTERS TO MANY OF THE MVS  *
* CONTROL BLOCKS.                                                   *
*********************************************************************
         SPACE 2
CVTMAP   CVT   LIST=YES,DSECT=YES
 TITLE '***SEC. 900-020*** - PREFIX SAVE AREA DSECT'
PSA      IHAPSA
 TITLE '***SEC. 900-030 - ADDRES SPACE VECTOR TABLE DSECT'
ASVT     IHAASVT
 TITLE '***SEC. 900-040 - ADDRESS SPACE CONTROL BLOCK DSECT'
ASCB     IHAASCB
 TITLE '***SEC. 900-050 - RESOURCE INFORMATION BLOCK DSECT'
RIB      ISGRIB
 TITLE '***SEC. 900-060 - WTO USER EXIT PARAMETER LIST DSECT'
         IEZVX100
 TITLE '***SEC. 900-070 - TSO TPUT MESSAGE WORK AREA DSECT'
**********************************************************************
* THIS DSECT IS USED TO ESTABLISH ADDRESSABILITY TO STORAGE OBTAINED *
* BY A GETMAIN INSTRUCTION.  THIS STORAGE AREA MUST RESIDE BELOW THE *
* 16 MEG LINE BECAUSE THE TPUT SVC REQUIRES IT TO BE BELOW THE LINE. *
**********************************************************************
         SPACE 2
TPUTAREA DSECT
         DS    0D
TPUTTXT1 EQU   *
         DS    CL08               MESSAGE ID='IEF861I '
         DS    CL48               MESSAGE TEXT1
TPUTJBNM DS    CL08               JOBNAME (MAX EIGHT CHARACTERS)
         SPACE 2
TPUTTXT2 EQU   *
         DS    CL08               MESSAGE ID='IEF863I '
         DS    CL05               MESSAGE TEXT2 PART 1= 'DSN= '
TPUTDSN  DS    CL44               DSNAME
         SPACE 2
TSOASID  DS    H                  TSO USER ASID TO SEND THE MESSAGES TO
TPUTMSGL DS    H                  LENGTH OF MESSAGE TO TPUT TO USER
TPUTALEN EQU   ((*-TPUTAREA+7)/8)*8 LENGTH OF TPUT WORK AREAS
 TITLE '***SEC. 900-080 - WTO MESSAGE TEXT DSECT'
**********************************************************************
* THIS DSECT IS USED TO ESTABLISH ADDRESSABILITY TO THE WTO MESSAGE  *
* PASSED TO THIS EXIT AT ENTRY TO THIS EXIT.                         *
**********************************************************************
         SPACE 2
MSGTEXT  DSECT
MSGID    DS    CL7              MESSAGE ID = 'IEF863I'
         DS    CL7              ' DSN = '
MSGFXLEN EQU   *-MSGTEXT        LENGTH OF FIXED PORTION OF MESSAGE
MSGDSN   DS    CL44             DSNAME. (MAX 44 BYTES)
MSGDSNL  EQU   *-MSGDSN         MAX LENGTH OF ANY DSNAME
         DS    CL1              BLANK
         DS    CL8              JOB NAME
MSGTEXTL EQU   *-MSGTEXT        MAX LENGTH OF MESSAGE
 TITLE '***SEC. 900-090*** - DYNAMIC STORAGE AREA DSECT'
*********************************************************************
* THIS DSECT IS A MAP OF ALL OUR WORKING STORAGE FOR THIS PROGRAM.  *
* REG. 10 IS THE BASE REGISTER USED.  THIS IS TO MAKE THIS PROGRAM  *
* RE-ENTRANT.                                                       *
*       NOTE: THIS STORAGE AREA HAS RMODE=ANY AND WILL PROBABLY     *
*             RESIDE ABOVE THE LINE.                                *
*********************************************************************
         SPACE 2
DYNAREA  DSECT
         DS    0D
ALCSAVE  DS    18F                AREA FOR SUBROUTINES TO SAVE REGS.
ALCSAVE2 DS    18F                AREA FOR GQSCAN TO SAVE REGS.
GQPARMS  GQSCAN AREA=(*-*,8192),REQLIM=10,SCOPE=ALL,                   X
               RESNAME=(*-*,*-*,0),MF=L
SCANPTR  DS    A                  A(GQSCAN WORKAREA)
TPUTPTR  DS    A                  FULLWORD TO SAVE GETMAINED CORE ADDR.
RIBLNGTH DS    H                  L'RIB(MUST PRECEED RIBELENG)
RIBELENG DS    H                  L'RIBE(MUST PROCEED RIBLENGTH)
NUMRIBS  DS    F                  NUMBER OF RIBS RETURNED BY GQSCAN
ALCMASID DS    H                  OUR ASID
ALCJOBNM DS    CL8                JOBNAME OF JOB WAITING FOR RESOURCE
ALCDSNM  DS    CL44               AREA TO SAVE DSNAME WTO TEXT
ALCDSNLN DS    F                  LENGTH OF DSNAME THAT IS ENQUED.
         SPACE 2
**********************************************************************
* NOTE: DO NOT CHANGE THE ORDER OF 'ALCENIDS' 'ALCSVIDS' 'ALCSVIDE'. *
*       THEY MUST BE IN THAT ORDER.                                  *
**********************************************************************
         DS    0D
ALCENIDS DS    A                  ADDRESS OF THE END OF ASID TABLE
ALCSVIDS DS    128H               ASID TABLE (128 ASIDS)
ALCSVIDE EQU   *                  END OF ASID TABLE
         SPACE 2
         DS    0D
DYNLEN   EQU   *-DYNAREA          LENGTH OF DYNAMIC STORAGE AREA
         TITLE 'END OF MSG2USER'
         END   MSG2USER
./ ENDUP       "REVIEW" PDS MEMBER OFFLOAD AT 16:15 ON 93/05/03
