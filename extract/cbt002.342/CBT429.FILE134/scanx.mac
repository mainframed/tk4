**********************************************************************
*  SCAN: THIS PROGRAM SEARCHES ALL OR SELECTED MEMBERS OF A PDS      *
*        FOR A STRING OR NUMBER OF STRINGS. IF MORE THAN ONE         *
*        STRING IS SPECIFIED LOGICAL OPERATORS MUST BE USED TO       *
*        TO RELATE THE STRINGS; REVERSE POLISH NOTATION IS USED.     *
*                                                                    *
* SYNTAX: CALL SCAN 'ARG1,ARG2,ARG3...ARG21'                         *
*     OR  CALL SCAN 'ARG1,ARG2....ARG21,%SEL,MEM1,MEM2..MEM12'       *
*     OR  CALL SCAN 'ARG1,ARG2....ARG21,%EXC,MEM1,MEM2..MEM12'       *
*  UP TO 21 ARGUMENTS CAN BE SPECIFIED WHERE ARG IS A STRING         *
*  OR AN OPERATOR; REVERSE POLISH NOTATION IS REQUIRED, WHICH ALSO   *
*  IMPLIES THE FOLLOWING: ARG1 MUST BE A STRING, TOTAL NO. OF        *
*  OPERATORS MUST BE ONE LESS THAN TOTAL NO. OF OPERANDS, AND LAST   *
*  ARG MUST BE AN OPERATOR. STRINGS MUST BE LESS THAN 81 BYTES       *
*  LONG, WHILE TOTAL LENGTH OF PARM LIST MUST BE 100 BYTES OR LESS.  *
*  VALID OPERATORS ARE: OR, AND, ORN ( OR NOT), ANDN ( AND NOT),     *
*                       XOR ( EXCLUSIVE OR), NORN ( NOT OR NOT ),    *
*                       NAN (NOT AND NOT).                           *
*  SELECT ARGUMENTS ARE MEMBER NAMES OR PARTS THEREOF.               *
*                                                                    *
*  EXAMPLES: 'ZZZZZ,%SEL,ASM,X,S ,C'   LOOKS FOR STRING ZZZZZZ IN    *
*  ALL MEMBERS BEGINNING WITH ASM, X, OR C AND ALSO IN MEMBER 'S'.   *
*  CLEARLY IF A BLANK IS NOT PUT AFTER THE MEMBER NAME IT ASSUMES    *
*  THAT ALL MEMBERS WITH THOSE CHARACTERS AS THEIR PREFIX WILL BE    *
*  BE INSPECTED.                                                     *
*            'A,B,C,D,E,F,AND,OR,XOR,AND,NORN' WILL INSPECT ALL      *
*  MEMBERS FOR STRINGS 'A','B','C','E','D','E' AND 'F'. IT WILL      *
*  PRINT THE RECORD ONLY IF THE LOGIC IS SATISFIED, WHICH IN         *
*  NORMAL TERMINOLOGY IS:                                            *
*     NOT(A) OR NOT(B AND (C XOR (D OR (E AND F))))                  *
*                                                                    *
*  THE LOGIC ((A OR B) AND (C XOR D)) AND ((NOT(E) AND F) OR G)      *
*  WOULD BE REPRESENTED BY:                                          *
*            'A,B,OR,C,D,XOR,AND,F,E,ANDN,G,OR,AND'                  *
*                                                                    *
*  WHEN A MEMBER HAS BEEN SELECTED FOR INSPECTION BUT HAS NO         *
*  RECORDS THAT SATISFY THE CRITERIA, THE MEMBER NAME IS STILL       *
*  PRINTED TO SHOW THAT IT WAS INCLUDED BUT FAILED THE TEST.         *
*                                                                    *
**********************************************************************
         PRINT NOGEN
SCAN     START 0
SCAN     CSECT
         BC    15,14(0,15)
         DC    X'08'
         DC    CL8'SCAN    '
         DS    0H
         STM   14,12,12(13)        SAVE REGISTERS
         LR    12,15
         LA    4,2048(,12)
         LA    4,2048(,4)
         USING SCAN,12,4           ESTABLISH CSECT BASE REGISTER
         ST    13,SAVE+4
         LR    2,13
         LA    13,SAVE             ESTABLISH LOCAL SAVE AREA
         ST    13,8(0,2)
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
* CHECK PARM FIELD, AND OPEN SYSPRINT. PARMS ARE SEPARATED BY COMMAS.
* TWO STACKS ARE USED. IF THE PARM IS A STRING IT IS PUT IN A STRING
* STACK WITH A POINTER TO IT'S EFFECTIVE POSITION IN THE LOGIC STACK.
* IN THE LOGIC STACK A FULL WORD IS RESERVED FOR STRINGS(TRUE OR FALSE)
* AND OPERATORS ARE STORED THERE AS WELL. THIS PRESERVES THE ORDER OF
* THE LOGIC. A THIRD STACK IS USED ONCE A RECORD IS PROCESSED WHERE
* TRUE OR FALSE VALUES ARE KEPT AS THE OP/STRING STACK IS PROCESSED.
* THIS PRESERVES THE OP/STRING STACK FOR FUTURE USE.
*
         L     R8,0(R1)      LOAD PARM LENGTH ADDR
         OPEN  (SYSPRINT,(OUTPUT))
         TM    SYSPRINT+48,X'10'          OPEN OK?
         BO    OPNOK
         B     ERROR9
OPNOK    LH    R2,0(R8)      LOAD PARM LENGTH
         LTR   R2,R2         TEST FOR ZERO
         BZ    ERROR1
         LA    R6,2(,R8)       START ADDRESS OF PARM INTO R6
         BCTR  R6,0            DECREMENT ADJUSTMENT FOR LABEL 'AGAIN'
         LR    R8,R6           START ADDRESS INTO R8 ALSO
         LA    R9,1(R2,R8)     END ADDRESS OF PARM LIST
         LA    R7,PARM1        START ADDRESS OF STACK FOR 'STRINGS'
         LA    R5,PILE         START ADDRESS OF STACK FOR OPS/STRINGS
AGAIN    LA    R8,1(,R6)       INCREMENT START OF PARM PTR
LOPP     LA    R6,1(,R6)       INCREMENT CURRENT PTR
         CR    R6,R9           END OF PARM LIST?
         BNL   DDDD            YES - PROCESS LAST PARM
         CLI   0(R6),C','      PARM SEPARATOR?
         BNE   LOPP            NO - BRANCH TO PTR INCREMENT CODE
DDDD     LR    R2,R6           SUBTRACT R8 FROM R6 TO GIVE PARM LENGTH
         SR    R2,R8
         CH    R2,=H'80'       CHECK LESS THAN 80 CHARS
         BH    ERROR1
         LTR   R2,R2           TEST IF NO LENGTH
         BZ    ERROR1
         BCTR  R2,0            DECREMENT LENGTH FOR ALL FUTURE 'EXECS'
         CH    R2,=H'03'       DOES LENGTH QUALIFY IT AS AN OPERATOR
         BH    NEXTO           NO
         MVC   BLANKS,BLANKS-1 YES - CLEAR COMPARISON AREA
         EX    R2,MOVEW        MOVE PARM THERE
         LA    R3,OPLIST       LOAD R3 WITH START OF VALID OPS LIST
         LR    R11,R3          LOAD R11 AS WELL
BLIP     CLC   BLANKS,0(R3)    EQUAL?
         BNE   OVER            NO
         SR    R3,R11          YES - SUBTRACT R11 FROM R3 FOR RELATIVE
         ST    R3,0(,R5)             POSITION NUMBER OF OPERATOR. STORE
         AR    R3,R11                THIS IN CURRENT TOP OF OP/STRING
         LA    R5,4(,R5)             STACK & RESTORE R3. INCR PILE PTR
         L     R10,OPCNT       INCREMENT OPERATOR COUNT. IF IT HAS
         LA    R10,1(,R10)           EXCEEDED OPERAND COUNT-1 THEN
         ST    R10,OPCNT             RETURN WITH ERROR MSG.....
         LA    10,1(,10)
         C     R10,ARGCNT
         BH    ERROR4
         C     R5,ENDPILE      END OF OP/STRING STACK?
         BNL   ERROR5          YES - ERROR
         B     OUTOP           WAS OPERATOR SO SKIP OPERAND CODE
OVER     LA    R3,4(,R3)       INCREMENT OP LIST PTR
         C     R3,ENDOP        END OF OPERATOR LIST?
         BL    BLIP            NO - COMPARE AGAIN
NEXTO    EX    R2,COMP4        NOT OPERATOR; KEYWORD 'SELECT' ??
         BE    LADIDA          YES - NEXT PARM CODE BLOCK
         EX    R2,COMP4A       NOT OPERATOR; KEYWORD 'SELECT' ??
         BE    LODIDO          YES - NEXT PARM CODE BLOCK
         ST    R5,84(,R7)      NO - STORE ADDRESS OF STRING POSITION IN
         ST    R2,80(,R7)           PILE AT END OF STRING. STORE LENGTH
         EX    R2,MOVEZ             AS WELL AND MOVE STRING TO STRING
         L     R10,ARGCNT           STACK. INCR STRING COUNT.
         LA    R10,1(,R10)
         ST    R10,ARGCNT
         LA    R5,4(,R5)       INCR PILE PTR.
         C     R5,ENDPILE      END OF PILE STACK?
         BNL   ERROR5          YES - ERROR5
         LA    R7,92(,R7)      INCR STRING STACK PTR
         C     R7,ENDPARM      END OF STRING STACK?
         BNL   ERROR5          YES - ERROR5
*
* SET TRANSLATE TABLE FOR FIRST CHAR OF STRING
*
         LA    R11,TSTABLE    GET STRT ADDR OF TRANS TABLE
         SR    R3,R3
         IC    R3,0(R8)       LOAD CHAR DISP IN TABLE
         AR    R3,R11         LOCATION OF CHAR IN TABLE
         MVI   0(R3),X'01'    FLAG INTO TABLE
OUTOP    CR    R6,R9          IF END OF PARM LIST FALL THRU ELSE REPEAT
         BL    AGAIN
*
* GET REST OF PARMS AFTER '%SEL' KEYWORD (IF PRESENT). THE REMAINING
* PARMS ARE INSPECTED FOR LENGTH 1 TO 8 AND IF OK ADDED TO 'MEMLIST'.
* THIS LIST IS SCANNED LATER IN THE PROGRAM TO SEE IF THE 'LATEST'
* MEMBER IS TO BE SCANNED OR IGNORED. IF NO MEMBERS FOLLOW SELECT IT'S
* AS IF SELECT WAS NOT SPECIFIED. THE LIST REMAINS EMPTY AND THE
* PROGRAM THUS KNOWS TO LOOK AT EVERY MEMBER.
*
LADIDA   CLI   FLAG,X'00'
         BE    CCCCC
         L     R10,OPCNT       ALL OPERATORS/OPERANDS HAVE BEEN
         LA    R10,1(,R10)         PROCESSED, SO CHECK IF #OPERATORS
         C     R10,ARGCNT          IS EQUAL TO #STRINGS-1.
         BNE   ERROR4          ERROR4 IF SO
         MVI   FLAG,X'00'
         ST    R7,ENDPARM      OTHERWISE ENDPARM IS REDUCED TO CURRENT
         S     R5,FOUR             TOP OF STACK, AS IS ENDPILE. THESE
         ST    R5,ENDPILE          VALUES ARE VITAL TO LATER CODE.
CCCCC    LA    R7,MEMLIST      SET R7 TO START OF MEMBER LIST
BACK     CR    R6,R9           END OF PARM LIST?
         BNL   ENDPRM          YES - ALL HAVE BEEN PROCESSED.
         LA    R8,1(,R6)       INCREMENT TO POINT TO NEXT PARM
LOPPP    LA    R6,1(,R6)       INCREMENT BYTE POINTER
         CLI   0(R6),C','      IS IT A SEPARATOR?
         BE    DDDDD
         CR    R6,R9           NO - END OF PARM LIST?
         BL    LOPPP           NO - NEXT BYTE
DDDDD    LR    R2,R6           SEPARATOR OR END OF PARM LIST, SO
         SR    R2,R8               GET LENGTH OF PARM
         CH    R2,=H'08'       CHECK LESS THAN 8 BYTES
         BH    ERROR3
         LTR   R2,R2           TEST IF ZERO BYTES
         BZ    ERROR3
         BCTR  2,0             DECREMENT LENGTH FOR ALL LATER 'EXECS'
         STCM  2,1,0(R7)       STORE LENGTH AT START OF MEMBER SLOT
         EX    R2,COMP4A       NOT OPERATOR; KEYWORD '%EXC' ??
         BE    ENDIDO          YES - NEXT PARM CODE BLOCK
         EX    2,MOVEX         MOVE MEMBER AFTER LENGTH FIELD
         LA    R7,9(,R7)       INCREMENT MEMBER LIST POINTER
         C     R7,ENDLIST      END OF LIST?
         BNL   ERROR6          YES - ERROR6
         B     BACK            REPEAT PROCESS
ENDIDO   LA    R8,9            DECREMENT END OF LIST AND RESTORE IT
         SR    R7,R8               TO IT'S ORIGINAL LOCATION TO
         ST    R7,ENDLIST          REFLECT TRUE END OF LIST
         B     LODIDO
ENDPRM   LA    R8,9            DECREMENT END OF LIST AND RESTORE IT
         SR    R7,R8               TO IT'S ORIGINAL LOCATION TO
         ST    R7,ENDLIST          REFLECT TRUE END OF LIST
*
* GET REST OF PARMS AFTER '%EXC' KEYWORD (IF PRESENT). THE REMAINING
* PARMS ARE INSPECTED FOR LENGTH 1 TO 8 AND IF OK ADDED TO 'MEMLIST'.
* THIS LIST IS SCANNED LATER IN THE PROGRAM TO SEE IF THE 'LATEST'
* MEMBER IS TO BE SCANNED OR IGNORED. IF NO MEMBERS FOLLOW SELECT IT'S
* AS IF SELECT WAS NOT SPECIFIED. THE LIST REMAINS EMPTY AND THE
* PROGRAM THUS KNOWS TO LOOK AT EVERY MEMBER.
*
LODIDO   CLI   FLAG,X'00'
         BE    CCCC
         L     R10,OPCNT       ALL OPERATORS/OPERANDS HAVE BEEN
         LA    R10,1(,R10)         PROCESSED, SO CHECK IF #OPERATORS
         C     R10,ARGCNT          IS EQUAL TO #STRINGS-1.
         BNE   ERROR4          ERROR4 IF SO
         MVI   FLAG,X'00'
         ST    R7,ENDPARM      OTHERWISE ENDPARM IS REDUCED TO CURRENT
         S     R5,FOUR             TOP OF STACK, AS IS ENDPILE. THESE
         ST    R5,ENDPILE          VALUES ARE VITAL TO LATER CODE.
CCCC     LA    R7,MEMLOST      SET R7 TO START OF MEMBER LIST
BACKK    CR    R6,R9           END OF PARM LIST?
         BNL   ENDPRMM         YES - ALL HAVE BEEN PROCESSED.
         LA    R8,1(,R6)       INCREMENT TO POINT TO NEXT PARM
LOPPPP   LA    R6,1(,R6)       INCREMENT BYTE POINTER
         CLI   0(R6),C','      IS IT A SEPARATOR?
         BE    DDDDDD
         CR    R6,R9           NO - END OF PARM LIST?
         BL    LOPPPP          NO - NEXT BYTE
DDDDDD   LR    R2,R6           SEPARATOR OR END OF PARM LIST, SO
         SR    R2,R8               GET LENGTH OF PARM
         CH    R2,=H'08'       CHECK LESS THAN 8 BYTES
         BH    ERROR3
         LTR   R2,R2           TEST IF ZERO BYTES
         BZ    ERROR3
         BCTR  2,0             DECREMENT LENGTH FOR ALL LATER 'EXECS'
         STCM  2,1,0(R7)       STORE LENGTH AT START OF MEMBER SLOT
         EX    R2,COMP4        NOT OPERATOR; KEYWORD '%SEL' ??
         BE    ENDIDA          YES - NEXT PARM CODE BLOCK
         EX    2,MOVEX         MOVE MEMBER AFTER LENGTH FIELD
         LA    R7,9(,R7)       INCREMENT MEMBER LIST POINTER
         C     R7,ENDLOST      END OF LIST?
         BNL   ERROR6          YES - ERROR6
         B     BACKK           REPEAT PROCESS
ENDIDA   LA    R8,9            DECREMENT END OF LIST AND RESTORE IT
         SR    R7,R8               TO IT'S ORIGINAL LOCATION TO
         ST    R7,ENDLOST          REFLECT TRUE END OF LIST
         B     LADIDA
ENDPRMM  LA    R8,9            DECREMENT END OF LIST AND RESTORE IT
         SR    R7,R8               TO IT'S ORIGINAL LOCATION TO
         ST    R7,ENDLOST          REFLECT TRUE END OF LIST
*
* OPEN INPUT DATA SETS AND GET WORKAREA
*
OUTSKI   OPEN (PDSDD,(INPUT),MBRDCB,(INPUT))
         TM    MBRDCB+48,X'10'            OPEN OK?
         BO    OPENOK
         B     ERROR7
OPENOK   LH    R0,PDSDD+DCBBLKSI-IHADCB   BLOCKSIZE FOR BUFFER
         ST    R0,ADDRESS
         GETMAIN  R,LV=(R0)
         LR    R11,R1
         ST    R11,ADDRESS2
*
*  READ DIRECTORY BLOCK
*
RDLOOP   READ  DIRECT,SF,PDSDD,DIRAREA,256  READ DIR BLOCK
         CHECK DIRECT         WAIT
         SR    R5,R5          ZERO R5
         MVC   BYTECNT,DIRAREA   SAVE BYTE CNT
         LA    R5,2(R5)       MOVE POINTER ON
         SR    R9,R9          ZERO R9
         B     CON1
*
* THIS MOVES THE POINTER ONTO THE NEXT DIRECTORY ENTRY.
* THE ENTRY IS THEN COMPARED TO EVERY LIST MEMBER. IF THE LIST IS
* EMPTY ( FIRST ENTRY FF'S ) THEN NO COMPARISONS ARE DONE AND ALL
* MEMBERS ARE PROCESSED. NOTE THAT NOT ALL 8 BYTES ARE COMPARED. THE
* COMPARISON LENGTH IS TAKEN FROM THE MEMBER LIST ENTRY SO THAT ONLY
* THE FIRST X BYTES CORRESPONDING TO THE LIST ENTRY'S X BYTES NEED
* SATISFY THE COMPARISON.
*
MBRLOP   IC    R9,DIRAREA+11(R5)        PICK OUT USER DATA CNT
         N     R9,=XL4'1F'              MASK OUT BITS 0-2
         SLL   R9,1                     MULTIPY HALFWORDS FOR BYTES
         LA    R5,12(R9,R5)             SET R5 TO START OF NEXT ENTRY
         CH    R5,BYTECNT               END OF THIS BLOCK
         BNL   RDLOOP                   YES - BRANCH
CON1     LA    R10,DIRAREA(R5)          SET R10 TO START OF MEMBER NAM
         CLC   FINNAM(8),0(R10)         CHECK FOR SPECIAL NAME
         BE    PREFIN                   YES - BRANCH
         CLC   FF,MEMLIST      LIST EMPTY?
         BE    SKIPP           YES - NO COMPARISON DONE
         LA    R7,MEMLIST      NO  - LOAD R7 WITH MEMBER LIST ADDRESS
ROUT     ICM   R2,1,0(R7)      LOAD LIST ENTRY LENGTH
         EX    R2,COMP2        COMPARE IT WITH CURRENT MEMBER NAME
         BE    SKIPP           IF EQUAL PRINT IT
         LA    R7,9(,R7)          OTHERWISE INCREMENT LIST POINTER
         C     R7,ENDLIST         END OF LIST?
         BH    SKIPINC            YES - READ NEXT ENTRY
         B     ROUT               NO  - FETCH NEXT LIST MEMBER
SKIPP    CLC   FF,MEMLOST      LIST EMPTY?
         BE    SKIP            YES - NO COMPARISON DONE
         LA    R7,MEMLOST      NO  - LOAD R7 WITH MEMBER LIST ADDRESS
ROUTT    ICM   R2,1,0(R7)      LOAD LIST ENTRY LENGTH
         EX    R2,COMP2        COMPARE IT WITH CURRENT MEMBER NAME
         BNE   NEXTEX          IF EQUAL FETCH NEXT MEMBER
SKIPINC  ST    R2,WORK
         L     R2,SKIPNUM
         LA    R2,1(,R2)
         ST    R2,SKIPNUM
         L     R2,WORK
         B     MBRLOP
NEXTEX   LA    R7,9(,R7)          OTHERWISE INCREMENT LIST POINTER
         C     R7,ENDLOST         END OF LIST?
         BH    SKIP               YES - READ NEXT ENTRY
         B     ROUTT              NO  - FETCH NEXT LIST MEMBER
SKIP     MVC   MEMNAM(8),0(R10)
         ST    R2,WORK
         L     R2,SCANNUM
         LA    R2,1(,R2)
         ST    R2,SCANNUM
         L     R2,WORK
         MVI   FLAGHEAD,X'00'
         MVI   FLAGDONE,X'01'
*
* READ BLOCK AND DETERMINE LENGTH
*
         LA    R3,DIRAREA+8(R5)  TRACK ADDRESS OF FIRST BLOCK
         LA    R2,TTRX                 MOVE 3 TTR BYTES TO 4 BYTE FIELD
         MVC   0(3,R2),0(R3)           WHERE LOW ORDER BYTE IS ZERO
         POINT MBRDCB,TTRX             POINT FOR NEXT READ
READBLK  READ  MEMBER,SF,MBRDCB,(R11),'S'   READ MEMBER IN
         CHECK MEMBER
         L     R3,MBRDCB+68             IOB PREFIX ADDR
         LA    R3,22(R3)                CSW ADDR
         LH    R3,0(R3)                 RESIDUAL BYTE COUNT
         ST    R3,WORK
         LH    R3,MBRDCB+62             MAX BLKSIZE
         S     R3,WORK                  BYTES READ
         LR    R7,R11                   SET R7 TO START OF INPUT AREA
         AR    R3,R7                    END ADDR OF BLOCK
*
* SEARCH EACH LINE FOR FIRST CHAR, IF FOUND CHECK AGAINST EACH STRING
*
LOOP1    L     R6,=F'79'                MAX FIELD (-1)
         L     R10,=F'-1'
LOOP2    STC   R6,TRANSL+1              SET LENGTH FOR TRANSLATE INS
         LA    R6,79(R7)           R6 --> LAST BYTE OF RECORD
         LA    R10,1(R10)               START SEARCH 1 POSITION ON
         STC   R10,TRANSL+3
*
TRANSL   TRT   0(0,R7),TSTABLE          SEARCH FOR 1ST CHAR OF FIELD
         BC    11,NEXTCARD              BRANCH IF NOT FOUND IN THIS
*                                       RECORD
         LR    R10,R1                   SAVE ADDR OF 1ST CHAR
         SR    R6,R10          SUBTRACT CURRENT POSITION FROM END OF
*                                     RECORD GIVING REMAINING LENGTH
         LA    R2,PARM1        LOAD R2 WITH START OF STRING STACK
LOPPO    L     R8,80(,R2)      LOAD R8 WITH THE STRING'S LENGTH
         CR    R8,R6
         BH    FLAGNO          THIS TESTS FOR 0C4 POSSIBILITY
         EX    R8,COMP5        COMPARE IT WITH LATEST 'TRT' FIND
         BNE   FLAGNO          SKIP IF NOT EQUAL
         MVC   88(4,R2),FF     MOVE VALUE OF 'TRUE' TO VALUE FIELD
FLAGNO   LA    R2,92(,R2)      INCREMENT STRING STACK PTR
         C     R2,ENDPARM      END OF STACK LIST?
         BL    LOPPO           NO - REPEAT COMPARISON
         SR    R10,R7          YES- RESET R10 AS DISPLACEMENT
         BCTR  R6,0
         LTR   R6,R6           ANY BYTES LEFT IN RECORD?
         BP    LOOP2           YES - TRY AGAIN
*  EXECUTE LOGIC.
*  MOVE TRUE OR FALSE VALUES FROM THEIR POSITION AT THE END OF THE
*  THE STRING INTO 'PILE'. THEN PROCESSS PILE WITH THE FOLLOWING
*  ALGORITHM: START AT BOTTOM OF PILE; IF ELEMENT IS A TRUE OR FALSE
*  VALUE THEN MOVE IT TO THE TOP OF THE WORKING STACK (CALLED 'STACK');
*  IF THE ELEMENT IS AN OPERATOR THEN EVALUATE X OP Y WHERE Y IS
*  TOP ELEMENT OF WORKING STACK AND X THE NEXT ONE DOWN. PUT RESULT
*  IN X'S PLACE AND REDUCE WORKING STACK POINTER. THIS GOES ON UNTIL
*  END OF PILE. THE LOGIC CHECK AT PARSE TIME ENSURES THE ALGORITHM
*  WILL NOT GO AWRY.
*
NEXTCARD LA    R2,PARM1        END OF RECORD; R2=START OF STRING STACK
LIP      L     R8,84(,R2)      R8 = PTR TO RESERVED WORD IN PILE
         MVC   0(2,R8),88(R2)  VALUE ( T OR F ) MOVED TO THIS PILE WORD
         MVC   88(4,R2),ZERO   STRING'S VALUE RESET TO FALSE
         LA    R2,92(,R2)      INCREMENT STRING STACK PTR
         C     R2,ENDPARM      END OF STACK?
         BL    LIP             NO - REPEAT PROCESS
         LA    R2,PILE         R2 = START OF PILE
         LA    R8,STACK-8      R8 = 'EFFECTIVE' START OF WORK STACK
SS       CLC   2(2,R2),FF      CURRENT PILE ELEMENT VALUE OR OPERATOR?
         BNE   SS2             TO SS2 IF OPERATOR
         MVC   8(2,R8),0(R2)   MOVE VALUE TO CURRENT TOP OF WORK STACK
         LA    R2,4(,R2)       INCREMENT PILE PTR
         LA    R8,4(,R8)       INCREMENT STACK PTR
         C     R2,ENDPILE      END OF PILE?
         BNH   SS              REPEAT IF NOT
         B     X9              DOWN DOWN DOWN TO X9 OTHERWISE
SS2      L     R9,0(,R2)       OPERATOR; LOAD R9 WITH IT'S 'POS. NO.'
         B     *+4(R9)         BRANCH ON THIS WITH OFFSET FOUR
         B     XOR             0TH OP IN OPLIST; LABELS PREF IS 'X'
         B     XAND            1ST OP IN OPLIST
         B     XANDN           2ND OP
         B     XORN            3RD
         B     XXOR            4TH
         B     XXORN           5TH
         B     XNANDN          6TH
         B     XNORN           7TH OP IN OPLIST
XOR      OC    0(2,R8),4(R8)   OR LOGIC; OR TOP TWO STACK ELEMENTS
         B     X3
XAND     NC    0(2,R8),4(R8)   AND LOGIC
         B     X3
XANDN    XC    4(2,R8),FF      'NOT' TOP ELEMENT
         NC    0(2,R8),4(R8)   AND TOP TWO
         B     X3
XORN     XC    4(2,R8),FF      'NOT' TOP ELEMENT
         OC    0(2,R8),4(R8)   OR TOP TWO
         B     X3
XXOR     XC    0(2,R8),4(R8)   EXCLUSIVE OR TOP TWO
         B     X3
XXORN    XC    4(2,R8),FF      'NOT' TOP ELEMENT
         XC    0(2,R8),4(R8)   XOR TOP TWO
         B     X3
XNANDN   XC    4(2,R8),FF      'NOT' TOP ELEMENT
         XC    0(2,R8),FF      'NOT' TOP-1 ELEMENT
         NC    0(2,R8),4(R8)   AND TOP TWO
         B     X3
XNORN    XC    4(2,R8),FF      'NOT' TOP ELEMENT
         XC    0(2,R8),FF      'NOT' TOP-1 ELEMENT
         OC    0(2,R8),4(R8)   OR TOP TWO
X3       S     R8,FOUR         DECR WORK STACK PTR; OP REDUCES IT BY 1
         LA    R2,4(,R2)       INCR PILE PTR
         C     R2,ENDPILE      END OF PILE?
         BNH   SS              REPEAT IF NOT
X9       CLC   4(2,R8),FF      PROCESS END;TOP OF STACK TRUE OR FALSE??
         BNE   NOGO            IF YES THEN DUMP RECORD OUT
         CLI   FLAGHEAD,X'01'
         BE    WRITELNE
         ST    R2,WORK
         L     R2,SCANNUM
         BCTR  R2,R0
         ST    R2,SCANNUM
         A     R2,SKIPNUM
         LTR   R2,R2
         BNZ   MOVEOK
         L     R2,WORK
         B     WRITEMEM
MOVEOK   MVC   OUTLIO,OUTLIO-1         WRITE MEMBER NAME
         L     R2,SCANNUM
         CVD   R2,PACKAREA
         MVC   OUTLIO+4(8),PATTGEN
         ED    OUTLIO+4(8),PACKAREA+4
         MVC   OUTLIO+12(16),=C' MEMBERS SCANNED'
         MVC   OUTLIO+30(8),PATTGEN
         L     R2,SKIPNUM
         CVD   R2,PACKAREA
         ED    OUTLIO+30(8),PACKAREA+4
         MVC   OUTLIO+38(16),=C' MEMBERS SKIPPED'
         PUT   SYSPRINT,OUTLIO
WRITEMEM MVI   FLAGHEAD,X'01'
         SR    R2,R2
         ST    R2,SCANNUM
         ST    R2,SKIPNUM
WRITELNE MVI   OUTLIN+9,C'_'
         MVC   OUTLIN+1(8),MEMNAM
         LA    R2,OUTLIN
SPIN     CLI   0(R2),C' '
         BNE   SPINOUT
         MVI   0(R2),C'_'
SPINOUT  LA    R2,1(,R2)
         CLI   0(R2),C'_'
         BNE   SPIN
         MVC   OUTLIN+11(68),0(R7)
         PUT   SYSPRINT,OUTLIN
         L     R2,WORK
NOGO     LA    R7,80(R7)       ELSE INCREMENT OVER RECORD
         CR    R7,R3           CHECK END OF BLOCK
         BL    LOOP1           NOT YET
         B     READBLK         GET NEXT BLOCK
PREFIN   CLI   FLAGDONE,X'00'
         BE    TELL
         L     R2,SCANNUM
         A     R2,SKIPNUM
         LTR   R2,R2
         BZ    FINISH
TELL     MVC   OUTLIO,OUTLIO-1
         L     R2,SCANNUM
         CVD   R2,PACKAREA
         MVC   OUTLIO+4(8),PATTGEN
         ED    OUTLIO+4(8),PACKAREA+4
         MVC   OUTLIO+12(16),=C' MEMBERS SCANNED'
         MVC   OUTLIO+30(8),PATTGEN
         L     R2,SKIPNUM
         CVD   R2,PACKAREA
         ED    OUTLIO+30(8),PACKAREA+4
         MVC   OUTLIO+38(16),=C' MEMBERS SKIPPED'
         PUT   SYSPRINT,OUTLIO
         B     FINISH
*
* ENDING
*
ERROR1   MVC   OUTLIN,OUTLIN-1       CLEAR OUTPUT LINE WITH BLANKS
         MVC   OUTLIN(L'ERR1),ERR1   MOVE ERROR MSG TO OUTPUT LINE
         B     ERROROUT              GOTO OUTPUT CODE FOR ERROR
ERROR2   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR2),ERR2
         B     ERROROUT
ERROR3   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR3),ERR3
         B     ERROROUT
ERROR4   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR4),ERR4
         B     ERROROUT
ERROR5   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR5),ERR5
         B     ERROROUT
ERROR6   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR6),ERR6
         B     ERROROUT
ERROR7   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR7),ERR7
         B     ERROROUT
ERROR8   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR8),ERR8
         B     ERROROUT
ERROR9   MVC   OUTLIN,OUTLIN-1
         MVC   OUTLIN(L'ERR9),ERR9
         LH    R0,=H'79'
         LA    R1,OUTLIN             HIGH 2 BYTES R0 0 = NO ASID
         TPUT  (1),(0),R             HIGH R1 BYTE 0 = 'EDIT'
         B     RETURN
ERROROUT PUT   SYSPRINT,OUTLIN       OUTPUT ERROR MSG
         L     R15,=F'04'            SET R15 TO RCODE FOUR
         B     RETURN                RETURN TO CALLER
FINISH   L     R15,=F'00'
RETURN   L     R11,ADDRESS2
         LTR   R11,R11
         BZ    NOFREE
         L     R1,ADDRESS
         FREEMAIN R,A=(11),LV=(1)
NOFREE   L     13,SAVE+4
         L     14,12(13)
         LM    0,12,20(13)
         BR    14
*
* CONSTANTS
*
SAVE     DS    18F             LOCAL SAVE AREA
TSTABLE  DC    XL256'00'       XLATE AREA; >0 FOR 1ST CHAR OF EACH STR
PARM1    DC    12XL92'00'      STACK OR STRINGS
ENDPARM  DC    A(ENDPARM)      END OF STACK ADDRESS
PILE     DC    24XL4'0000FFFF' FOR STR VALUES + OPERATORS; L=2*#STR-1
ENDPILE  DC    A(ENDPILE)      END OF PILE ADDRESS
ADDRESS  DC    F'0'            MISNOMER: LNGTH OF GETSIZE FOR FREEMAIN
ADDRESS2 DC    F'0'            GETMAIN START ADDRESS
TTRX     DC    F'0'            POINT NEEDS 4 BYTE TTRX WITH X=0/1
OPCNT    DC    F'0'            COUNT OF OPERATORS ENCOUNTERED
ARGCNT   DC    F'0'            COUNT OF STRINGS ENCOUNTERED
WORK     DC    F'0'            WORK AREA
SELECT   DC    CL4'%SEL'       KEYWORD IN PARM LIST
EXCLUD   DC    CL4'%EXC'       KEYWORD IN PARM LIST
MOVEX    MVC   1(0,R7),0(R8)   LIST OF OPS FOR EXEC STATEMENTS
MOVEW    MVC   BLANKS(0),0(R8)
MOVEZ    MVC   0(0,R7),0(R8)
COMP2    CLC   1(0,R7),0(R10)
COMP4    CLC   SELECT(0),0(R8)
COMP4A   CLC   EXCLUD(0),0(R8)
COMP5    CLC   0(0,R2),0(R10)
OPLIST   DC    CL4'OR  '       LIST OF VALID OPERATORS
         DC    CL4'AND '
         DC    CL4'ANDN'
         DC    CL4'ORN '
         DC    CL4'XOR '
         DC    CL4'XORN'
         DC    CL4'NAN '
         DC    CL4'NORN'
ENDOP    DC    A(ENDOP)
STACK    DS    12F             WORK STACK; L= #STRINGS*FULLWORDS
ZERO     DC    XL4'00000000'   GENERAL USE 0
FOUR     DC    XL4'00000004'   GENERAL USE 4; BOTH ARE MAGIC NUMBERS
FINNAM   DC    8XL1'FF'        LAST MEMBER NAME
BYTECNT  DC    H'0'
DIRAREA  DS    CL256           MEMBER DIRECTORY AREA
OUTLINE  DS    0CL80           OUTPUT AREA
         DC    CL1' '          CLEARING AGENT
OUTLIN   DC    CL79' '
         DC    CL1' '
OUTLIOE  DS    0CL80           OUTPUT AREA
         DC    CL1'_'          SEED
OUTLIO   DC    CL79' '
         DC    CL1' '
ERR1     DC    CL36' PARM INVALID - LENGTH EQ 0 OR GT 80'
ERR2     DC    CL32' SYSTEM ERROR - EOF ON DIRECTORY'
ERR3     DC    CL49' SELECT/EXCLUDE ARG INVALID - LENGTH EQ 0 OR GT 8'
ERR4     DC    CL28' INVALID OR INCOMPLETE LOGIC'
ERR5     DC    CL28' TOO MANY OPERATORS/OPERANDS'
ERR6     DC    CL27' TOO MANY MEMBERS SPECIFIED'
ERR7     DC    CL18' PDSDD OPEN ERROR '
ERR8     DC    CL18' PDSDD READ ERROR '
ERR9     DC    CL27' SYSPRINT OPEN/WRITE ERROR '
MEMLIST  DC    12XL9'FFFFFFFFFFFFFFFFFF'      LIST OF SELECT ARGUMENTS
ENDLIST  DC    A(ENDLIST)                     END OF LIST ADDRESS
MEMLOST  DC    12XL9'FFFFFFFFFFFFFFFFFF'      LIST OF SELECT ARGUMENTS
ENDLOST  DC    A(ENDLOST)                     END OF LIST ADDRESS
FF       DC    XL9'FFFFFFFFFFFFFFFFFF'        GENERAL USE FF'S
FLAGHEAD DC    XL1'00'
FLAGDONE DC    XL1'00'
FLAG     DC    XL1'01'
         DC    XL1'40'                        CLEARING AGENT
MEMNAM   DC    CL8' '
BLANKS   DC    XL4'40404040'                  WORK AREA FOR PARSE
PATTGEN  DC    XL8'6D20202020202120'
PACKAREA DS    D
SCANNUM  DC    F'0'
SKIPNUM  DC    F'0'
*
* DCB'S
*
SYSPRINT DCB   MACRF=(PM),DSORG=PS,DDNAME=SYSPRINT,LRECL=80,RECFM=FB,  *
               BLKSIZE=80,EODAD=ERROR9,SYNAD=ERROR9
*
PDSDD    DCB   MACRF=(R),DSORG=PS,DDNAME=PDSDD,EODAD=ERROR2,RECFM=U,   *
               SYNAD=ERROR8
*
MBRDCB   DCB   MACRF=(R),DSORG=PO,DDNAME=PDSDD,EODAD=MBRLOP,           *
               SYNAD=ERROR8
         IHADCB DSORG=PS,DEVD=DA
         END   SCAN
