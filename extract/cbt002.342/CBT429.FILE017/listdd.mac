*          DATA SET CBT1837    AT LEVEL 001 AS OF 08/22/88
         TITLE 'LISTDD - LIST DATASETS ALLOCATED TO TSO SESSION'
         PRINT NOGEN
***********************************************************************
*TSO DD ALLOCATION LIST -- AN ALTERNATIVE TO THE TSO LISTALC COMMAND  *
*                                                                     *
*AUTHOR: ANTHONY M. HECHT                                             *
*        FIREMAN'S FUND INSURANCE COMPANY -- JULY 1988                *
*        (415) 492-5026                                               *
***********************************************************************
* FEATURES: ALLOCATION INFO SORTED BY DDNAME                          *
*           SPEED GREATLY IMPROVED (OVER LISTALC)                     *
*           ALLOCATED PDS MEMBERNAMES DISPLAYED                       *
*           INPUT PARAMETER FLEXIBILITY                               *
*           OUTPUT WITH PUTLINE FOR &SYSOUTTRAP COMPATIBILITY         *
*           DATASET VOLSER AND DISPOSTION INFO INCLUDED               *
*                                                                     *
* FORMAT:   LISTDD  {DDNAME}                                          *
*           IF DDNAME SUPPLIED, LISTS DSN INFO FOR THAT DD. WILDCARD  *
*           CHARACTER '*' PERMITTED AT END OF SUPPLIED DDNAME.  IF    *
*           NO DDNAME SUPPLIED, EXTRACTS AND SORTS ALL DD'S ALLOCATED *
*           FOR SESSION.                                              *
*                                                                     *
* TSO                                                                 *
* EXAMPLES: LISTDD SYSPROC                                            *
*            DISPLAYS INFO FOR ALL DATASETS ALLOCATED TO DDNAME       *
*            "SYSPROC".                                               *
*           LISTDD ISP*                                               *
*            DISPLAYS INFO FOR ALL DATASETS ALLOCATED TO ALL DDNAMES  *
*            BEGINNING WITH THE CHARACTERS "ISP", SORTED BY DDNAME.   *
*           LISTDD                                                    *
*            DISPLAYS INFO FOR ALL DATASETS ALLOCATED TO ALL DDNAMES, *
*            SORTED BY DDNAME.                                        *
*                                                                     *
*                                                                     *
* RETURN CODES:   0 -- ALL OKAY                                       *
*                11_ -- INPUT PARM ERRORS:                            *
*                  113 -- DDNAME > 8 CHARACTERS                       *
*                130 -- DDNAME NOT FOUND                              *
*                140 -- TABLE SIZE EXCEEDED                           *
*                                                                     *
* REGISTER USAGE:                                                     *
*                 R9  - ADDRESS LISTDD TABLE                          *
*                 R10 - ADDRESS TIOT                                  *
*                 R11 - BRANCH-AND-LINK REGISTER                      *
*                 R12 - BASE REGISTER                                 *
*                                                                     *
* ASSEMBLY/LINK INSTRUCTIONS:                                         *
*                 ASSEMBLED WITH IEV90 (ASM-H), LINK-EDITED WITH IEWL.*
*                 NO SPECIAL ATTRIBUTES REQUIRED.                     *
*                 //SYSLIB DD FOR ASM STEP MUST INCLUDE LIBRARIES     *
*                 CONTAINING THE FOLLOWING SYSTEM MACROS:             *
*                 IHAPSA IKJTCB IEFTIOT1 IEFJFCBN IKJCPPL AND IKJIOPL *
*                                                                     *
***********************************************************************
LISTDD   CSECT 0
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         SAVE  (14,12)             SAVE REGISTERS
         USING LISTDD,R12          OS
         LR    R12,R15              STAN-
         ST    R13,SAVEAREA+4        DARD
         LA    R13,SAVEAREA           LINK-
         ST    R13,SAVEAREA+8          AGE
         B     BEGIN
SAVEAREA DS    18F
         DC    C'&SYSDATE AT &SYSTIME FROM LISTDD'
         USING SORTLINE,R9             ADDRESS LISTDD TABLE
         USING TIOENTRY,R10            ADDRESS TIOT
         USING INFMJFCB,R5             ADDRESS JFCB
BEGIN    DS    0H
         ST    R1,PARMADDR        SAVE REGISTER 1 FOR AWHILE
*
         BAL   R11,INIT1          INITIALIZATION
         CLI   ERRFLAG1,C'Y'        ERRORS FOUND?
         BE    EOJ                  YES: QUIT
*
         BAL   R11,SCAN1          SCAN INPUT REQUEST
         CLI   ERRFLAG1,C'Y'        ERRORS FOUND?
         BE    EOJ                  YES: QUIT
*
         BAL   R11,GETM1          ALLOCATE LISTDD TABLE
*
         BAL   R11,SCTT1          SCAN TASK I/O TABLE FOR DDNAMES
         CLI   ERRFLAG1,C'Y'        ERRORS FOUND?
         BE    FREEMAIN             YES: FREE TABLE AND QUIT
*
         BAL   R11,SORT1          SORT ACQUIRED LISTDD TABLE
*
         BAL   R11,DISP1          DISPLAY RESULTS TABLE
*
FREEMAIN DS    0H
         BAL   R11,FREE1          FREE LISTDD TABLE
         B     EOJ
*
***************************
** EOJ                   **
***************************
EOJ      DS    0H
         L     R15,RETCODE
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)
*
**********************************************************
**** PUTLINE CONTROL BLOCKS INITIALIZATION ROUTINE      **
**********************************************************
         DS    F
INIT1    ST    R11,INIT1-4        SAVE RETURN ADDRESS
         L     R2,PARMADDR        RETRIEVE PARM ADDRESS
         TM    0(R2),X'80'        IS THIS A CMD PROCESSOR?
         BZ    INIT1$01           YES, CONTINUE
         TPUT  ERRMSG00,L'ERRMSG00  NO: SEND ERROR MSG
         MVI   ERRFLAG1,C'Y'      SET ERROR FLAG
         B     INIT1END           AND GO TO RETURN
*
INIT1$01 DS    0H
         MVC   MYIOPL+IOPLUPT-IOPL,CPPLUPT-CPPL(R2)
         MVC   MYIOPL+IOPLECT-IOPL,CPPLECT-CPPL(R2)
         LA    R1,MYECB                EVENT CONTROL BLOCK ADDRESS
         ST    R1,MYIOPL+IOPLECB-IOPL
         LA    R1,PUTLISTF             PUTLINE PARAMETER BLOCK ADDRESS
         ST    R1,MYIOPL+IOPLIOPB-IOPL
*
INIT1END L     R11,INIT1-4        GET RETURN ADDRESS
         BR    R11                AND RETURN
*
************************************
**** INPUT BUFFER SCAN ROUTINE    **
************************************
         DS    F
SCAN1    ST    R11,SCAN1-4        SAVE RETURN ADDRESS
         L     R2,PARMADDR        RETRIEVE PARM ADDRESS
         L     R2,0(R2)           ADDRESS OF CP INPUT STRING
         LH    R3,0(R2)           OVERALL LENGTH OF INPUT STRING
         LH    R4,2(R2)           LENGTH OF COMMAND NAME
         SR    R3,R4              GET LENGTH OF PARM: SUBTRACT
         SH    R3,=H'4'             4 (FOR LENGTH OF FIRST FULLWORD)
         STH   R3,PARMLEN         SAVE PARM LENGTH
         BNZ   SCAN1$01           PARM GIVEN: GO CHECK IT
         MVI   INPUTDD,C'*'       NO PARMS GIVEN: LIST ALL DD'S
         B     SCAN1END           ALL DONE SCANNING
*
SCAN1$01 DS    0H
         CH    R3,=H'8'           DDNAME > 8 CHARACTERS?
         BNH   SCAN1$02           NO: OK CONTINUE
         MVC   RETCODE,=F'113'    SET BAD RETURN CODE
         MVC   PLDATA(L'ERRMSG13),ERRMSG13 SEND
         BAL   R11,PUTLINE                   MESSAGE
         MVI   ERRFLAG1,C'Y'      SET ERROR FLAG
         B     SCAN1END           AND GO TO RETURN
*
SCAN1$02 DS    0H
         LA    R2,4(R2,R4)        POINT R2 AT START OF REAL PARM
         BCTR  R3,0               SUBTRACT 1 FOR EXECUTE
         EX    R3,MVCIT1          MOVE INPUT PARMS TO HOLD AREA
         OC    INPUTDD,=8C' '     FOLD TO UPPERCASE
*
SCAN1$03 DS    0H
         LA    R2,0(R2,R3)        POINT TO LAST CHARACTER
         CLI   0(R2),C'*'         IS IT THE WILDCARD CHARACTER?
         BNE   SCAN1END           NO: NON-GENERIC REQUEST; DONE
         BCTR  R3,0               YES: REQUEST IS GENERIC;
         STH   R3,COMPLEN          SAVE LENGTH FOR EXECUTED COMPARE
*
SCAN1END L     R11,SCAN1-4        GET RETURN ADDRESS
         BR    R11                AND RETURN
*
***************************
** GETMAIN ROUTINE       **
***************************
         DS    F
GETM1    ST    R11,GETM1-4          SAVE RETURN ADDRESS
         GETMAIN RC,LV=20000          GET AREA FOR TABLE
         LR    R9,R1                  SAVE TABLE BEGINNING ADDRESS
         ST    R9,TABLBEG             STORE TABLE BEGINNING ADDRESS
         A     R1,=F'19999'           CALCULATE ENDING TABLE ADDRESS
         ST    R1,TABLEND             STORE TABLE ENDING ADDRESS
         L     R11,GETM1-4          GET RETURN ADDRESS
         BR    R11                  AND RETURN
*
*************************************
** SCAN TASK I/O TABLE ROUTINE     **
*************************************
         DS    F
SCTT1    ST    R11,SCTT1-4          SAVE RETURN ADDRESS
         L     R10,PSATOLD-PSA         CURRENT TCB ADDR
         L     R10,TCBTIO-TCB(,R10)    OUR TIOT ADDR
         LA    R10,TIOENTRY-TIOT(,R10) 1ST DD SEGMENT IN TIOT
         SR    R4,R4                   CLEAR FOR WORK (TIO ENT LENGTH)
         SR    R5,R5                   CLEAR FOR WORK
         SR    R6,R6                   CLEAR FOR WORK (SEQ COUNTER)
*
SCTT1$01 DS    0H
         MVI   SORTLINE,C' '           CLEAR CURRENT TABLE LINE
         MVC   SORTLINE+1(L'SORTLINE-1),SORTLINE      TO BLANKS
         LA    R10,TIOENTRY(R4)        POINT TO NEXT TIOT ENTRY
         CLI   TIOELNGH,0              END OF TIOT?
         BE    SCTT1$18                YES: DONE SCANNING TIOT
         IC    R4,TIOELNGH             LENGTH OF THIS ENTRY
         CLI   TIOEDDNM,C'A'           DDNAME FIRST CHARACTER VALID?
         BNL   SCTT1$02                YES: USE AS IS
         CLC   TIOEDDNM,=8C' '         ALL BLANKS?
         BNE   SCTT1$01                NO: DEALLOCATED; SKIP IT.
         MVC   SORTDDN,PREVDDN         YES: CONCAT DD'S; USE PREV DDN
         B     SCTT1$03                GO CHECK FOR DDNAME REQUEST
*
SCTT1$02 DS    0H
         MVC   SORTDDN,TIOEDDNM        MOVE DDNAME FOR SORT
         MVC   PREVDDN,SORTDDN         AND SAVE IT FOR POSSIBLE CONCATS
*
SCTT1$03 DS    0H
         CLI   INPUTDD,C'*'            IS THIS AN 'ALL' REQUEST?
         BE    SCTT1$04                YES: CONTINUE
         LH    R2,COMPLEN              GET COMPARE LENGTH FOR EXECUTE
         EX    R2,COMPIT1              IS THIS THE DD WE WANT?
         BE    SCTT1$04                YES: CONTINUE
         B     SCTT1$01                NO: CONTINUE LOOKING
*
SCTT1$04 DS    0H
         STCM  R6,B'0011',SORTTAG      TO KEEP CONCAT SEQUENCE W/ SORT
         LA    R6,1(,R6)               INCREMENT SEQ COUNTER
         ICM   R5,7,TIOEJFCB           JFCB POINTER
         LA    R5,16(R5)               FIX IT
         MVC   SORTDSN,JFCBDSNM        MOVE DSNAME FOR DISPLAY
         MVC   SORTVOLS,JFCBVOLS       MOVE VOLS FOR DISPLAY
         TM    JFCFLGS1,JFCVRDS        VIO DATASET?
         BZ    SCTT1$05                NO: CONTINUE CHECKING
         MVC   SORTVOLS,=CL6'(VIO)'    YES: MOVE LITERAL
         B     SCTT1$06                CONTINUE
*
SCTT1$05 DS    0H
         TM    TIOELINK,TIOTTERM       IS DEVICE A TERMINAL?
         BZ    SCTT1$06                NO: USE VOLSER AND CONTINUE
         MVC   SORTVOLS,=C'(TERM)'     YES: MOVE LITERAL
*
SCTT1$06 DS    0H
         TM    JFCBIND1,JFCPDS         IS ALLOC TO A PDS MEMBER?
         BZ    SCTT1$11                NO: GO GET DISPOSITION
         LA    R2,SORTDSN              FIND
         LA    R3,45                    END
*
SCTT1$07 DS    0H                        OF
         CLI   0(R2),C' '                 DSN
         BE    SCTT1$08                    FIELD
         LA    R2,1(,R2)                    TO
         BCT   R3,SCTT1$07                   PLACE
*
SCTT1$08 DS    0H                             MEMBER NAME
         MVI   0(R2),C'('              MOVE LITERAL
         MVC   1(8,R2),JFCBELNM        MOVE MEMBER NAME
         LA    R3,9                    FIND
*
SCTT1$09 DS    0H                       END
         CLI   0(R2),C' '                OF
         BE    SCTT1$10                   MEMBER
         LA    R2,1(,R2)                   NAME
         BCT   R3,SCTT1$09                  TO
*
SCTT1$10 DS    0H                            PLACE ')'
         MVI   0(R2),C')'              MOVE LITERAL
*
SCTT1$11 DS    0H
         TM    JFCBIND2,JFCTEMP        TEMP DATASET?
         BZ    SCTT1$12                NO: KEEP TRYING
         MVC   SORTDISP,=C'TMP'        YES: MOVE LITERAL
         B     SCTT1$17                AND CONTINUE
*
SCTT1$12 DS    0H
         TM    JFCBIND2,JFCSHARE       SHR DATASET?
         BZ    SCTT1$13                NO: KEEP TRYING
         MVC   SORTDISP,=C'SHR'        YES: MOVE LITERAL
         B     SCTT1$17                AND CONTINUE
*
SCTT1$13 DS    0H
         TM    JFCBIND2,JFCOLD         OLD DATASET?
         BZ    SCTT1$14                NO: KEEP TRYING
         MVC   SORTDISP,=C'OLD'        YES: MOVE LITERAL
         B     SCTT1$17                AND CONTINUE
*
SCTT1$14 DS    0H
         TM    JFCBIND2,JFCMOD         MOD DATASET?
         BZ    SCTT1$15                NO: KEEP TRYING
         MVC   SORTDISP,=C'MOD'        YES: MOVE LITERAL
         B     SCTT1$17                AND CONTINUE
*
SCTT1$15 DS    0H
         TM    JFCBIND2,JFCNEW         NEW DATASET?
         BZ    SCTT1$16                NO: LEAVE BLANK
         MVC   SORTDISP,=C'NEW'        YES: MOVE LITERAL
         B     SCTT1$17                AND CONTINUE
*
SCTT1$16 DS    0H
         MVC   SORTDISP,=C'   '        INSERT BLANKS
*
SCTT1$17 DS    0H
         CLI   ERRFLAG2,C'E'           TABLE SIZE ALREADY EXCEEDED?
         BE    SCTT1$01                YES: JUST KEEP COUNTING
         LA    R9,80(,R9)              BUMP TABLE POINTER
         C     R9,TABLEND              PAST TABLE END?
         BNH   SCTT1$01                NO: ITERATE
         MVI   ERRFLAG2,C'E'           YES: FLAG TABLE SIZE EXCEEDED
         B     SCTT1$01                BUT CONTINUE COUNTING
*
SCTT1$18 DS    0H
         CLI   ERRFLAG2,C'E'           TABLE SIZE EXCEEDED?
         BNE   SCTT1$19                NO: CONTINUE
         MVC   PLDATA(ERR40LEN),ERRMSG40  NOTIFY USER,
         BAL   R11,PUTLINE                 TABLE SIZE EXCEEDED
         MVC   RETCODE,=F'140'         SET BAD RETURN CODE
         MVI   ERRFLAG1,C'Y'           SET ERROR FLAG
         B     SCTT1END                DONE PROCESSING
*
SCTT1$19 DS    0H
         STH   R6,DSNSAVE              SAVE NUMBER OF DATASETS
         LTR   R6,R6                   DID WE FIND ANY?
         BNZ   SCTT1END                YES: DONE
         MVC   ERR30DDN,INPUTDD        NO: FILL IN ERROR PARAMETER
         LH    R10,PARMLEN             GET LENGTH OF PARM
         LA    R4,ERR30DDN(R10)         TO BUILD ERROR MSG
         MVC   1(L'ERRMSG31,R4),ERRMSG31 AND JUSTIFY
         MVC   PLDATA(ERR30LEN),ERRMSG30  SEND
         BAL   R11,PUTLINE                 MSG
         MVC   RETCODE,=F'130'    SET BAD RETURN CODE
         MVI   ERRFLAG1,C'Y'           SET ERROR FLAG
*
SCTT1END L     R11,SCTT1-4          GET RETURN ADDRESS
         BR    R11                  AND RETURN
*
****************************************************
** SORT ROUTINE FOR ACQUIRED LISTDD TABLE         **
****************************************************
         DS    F
SORT1    ST    R11,SORT1-4          SAVE RETURN ADDRESS
         L     R9,TABLBEG              RESET TO BEGINNING OF TABLE
         LH    R6,DSNSAVE              GET NUMBER OF DATASETS
         BCTR  R6,0                    R6=# OF SORT SCANS REMAINING
         LTR   R6,R6                   ONLY 1 RECORD?
         BZ    SORT1END                YES: DON'T BOTHER TO SORT
SORT1$01 LR    R7,R6                   R7=# OF COMPARES FOR THIS SCAN
         LA    R8,80(,R9)              POINT TO TEST RECORD FOR COMPARE
*
SORT1$02 DS    0H
         CLC   0(L'SORTKEY,R8),SORTKEY IS THIS RECORD < CURRENT?
         BNL   SORT1$03                NO: TRY NEXT RECORD
         XC    SORTLINE,0(R8)  ----+
         XC    0(80,R8),SORTLINE   +-- YES: SWAP 'EM
         XC    SORTLINE,0(R8)  ----+
*
SORT1$03 LA    R8,80(,R8)              BUMP COMPARE POINTER
         BCT   R7,SORT1$02             ITERATE R7 TIMES
         LA    R9,80(,R9)              BUMP BASE POINTER
         BCT   R6,SORT1$01             ITERATE R6 TIMES
*
SORT1END L     R11,SORT1-4          GET RETURN ADDRESS
         BR    R11                  AND RETURN
*
******************************
** TABLE DISPLAY ROUTINE    **
******************************
         DS    F
DISP1    ST    R11,DISP1-4          SAVE RETURN ADDRESS
         LH    R6,DSNSAVE              RETRIEVE NUMBER OF DATASETS
         CVD   R6,DBLWORK              CONVERT NUMBER
         UNPK  DSNCOUNT,DBLWORK+6(2)    OF DATASETS
         OI    DSNCOUNT+2,X'F0'          TO DISPLAY FORMAT
         CLI   DSNCOUNT,C'0'           ONLY TWO SIGNIFICANT DIGITS?
         BNE   DISP1$01                NO: GO DISPLAY LINE
         MVC   HDR1(HDR1LEN-1),HDR1+1  YES: SHIFT AND DESTROY
         CLI   DSNCOUNT,C'0'           ONLY ONE SIGNIFICANT DIGIT??
         BNE   DISP1$01                NO: GO DISPLAY LINE
         MVC   HDR1(HDR1LEN-1),HDR1+1  YES: SHIFT AND DESTROY
*
DISP1$01 DS    0H
         MVC   PLDATA(HDR1LEN),HDR1    AND DISPLAY
         BAL   R11,PUTLINE              MSG LINE
*
DISP1$02 DS    0H
         MVI   PLDATA,C' '             DISPLAY
         BAL   R11,PUTLINE              BLANK LINE
         MVC   PLDATA(HDR2LEN),HDR2    DISPLAY
         BAL   R11,PUTLINE              MSG LINE
         MVC   PLDATA(HDR3LEN),HDR3    DISPLAY
         BAL   R11,PUTLINE              MSG LINE
*
         L     R9,TABLBEG              START OF TABLE
         MVC   PREVDDN,=8C' '          INITIALIZE DDNAME HOLD AREA
DISP1$03 DS    0H
         CLC   SORTDDN,PREVDDN         SAME DDNAME?
         BNE   DISP1$04                NO: USE IT
         MVC   SORTDDN,=8C' '          YES: BLANK IT OUT
         B     DISP1$05                AND GO DISPLAY
DISP1$04 DS    0H
         MVC   PREVDDN,SORTDDN         SET NEW DDNAME HOLD AREA
DISP1$05 DS    0H
         MVC   SORTTAG,=C'  '          ERASE TAG CHARACTER
         MVC   SORTLTRL,=C'DD'         FILL IN 'DD'
         MVC   PLDATA(L'SORTLINE-1),SORTLINE  DISPLAY
         BAL   R11,PUTLINE                     DATALINE
         LA    R9,80(,R9)              BUMP BASE POINTER
         BCT   R6,DISP1$03             ITERATE
DISP1END L     R11,DISP1-4          GET RETURN ADDRESS
         BR    R11                  AND RETURN
*
***************************
** FREEMAIN ROUTINE      **
***************************
         DS    F
FREE1    ST    R11,FREE1-4          SAVE RETURN ADDRESS
         L     R1,TABLBEG
         FREEMAIN RC,LV=20000,A=(R1)
         L     R11,FREE1-4          GET RETURN ADDRESS
         BR    R11                  AND RETURN
*
***************************
** PUTLINE ROUTINE       **
***************************
         DS    F
PUTLINE  ST    R11,PUTLINE-4        SAVE RETURN ADDRESS
         PUTLINE OUTPUT=(PLLINE,,,DATA),MF=(E,MYIOPL)
         MVI   PLDATA,C' '                 BLANK OUT
         MVC   PLDATA+1(L'PLDATA-1),PLDATA   DATA LINE
         L     R11,PUTLINE-4        GET RETURN ADDRESS
         BR    R11                  AND RETURN
*
***************************
** DATA AREAS            **
***************************
MVCIT1   MVC   INPUTDD(0),0(R2)        EXECUTED
COMPIT1  CLC   SORTDDN(0),INPUTDD      EXECUTED
PUTLISTF PUTLINE MF=L
*
DBLWORK  DS    D
TABLBEG  DS    F
TABLEND  DS    F
PARMADDR DS    F
RETCODE  DC    F'0'
MYECB    DC    F'0'       FOR PUTLINE
MYIOPL   DC    4F'0'      FOR PUTLINE
PARMLEN  DC    H'0'
COMPLEN  DC    H'7'       ASSUME NON-GENERIC (IE, FULL-LENGTH) REQUEST
DSNSAVE  DC    H'0'
INPUTDD  DC    CL8' '
PREVDDN  DS    CL8' '
ERRFLAG1 DC    C'N'
ERRFLAG2 DC    C'N'
*
PLLINE   DC    H'84',H'0'   DATA LENGTH + 4 FOR THESE 2 HALFWORDS
PLDATA   DC    CL80' '
*
HDR1     DS    0C
DSNCOUNT DS    PL3
         DC    C' DATASET(S) CURRENTLY ALLOCATED. '
HDR1LEN  EQU   *-HDR1
HDR2     DS    0C
         DC    CL7'DDNAME:'
         DC    5C' '
         DC    CL13'DATASET NAME:'
         DC    42C' '
         DC    CL11'VOLSR: DSP:'
HDR2LEN  EQU   *-HDR2
HDR3     DS    0C
         DC    CL7'------ '
         DC    5C' '
         DC    CL13'------- ---- '
         DC    42C' '
         DC    CL11'-----  --- '
HDR3LEN  EQU   *-HDR3
*
ERRMSG00 DC    C'ERROR: LISTDD MUST BE INVOKED AS A TSO CMD PROCESSOR.'
ERRMSG13 DC    C'DDNAME MUST BE 8 CHARACTERS OR LESS IN LENGTH.'
ERRMSG30 DC    C'DDNAME '
ERR30DDN DC    CL8' '
ERR30LN1 EQU   *-ERRMSG30
         DC    CL30' '
ERRMSG31 DC    C'IS NOT CURRENTLY ALLOCATED.'
ERR31LN1 EQU   *-ERRMSG31
ERR30LEN EQU   ERR30LN1+ERR31LN1+1
ERRMSG40 DC    C'UNFORTUNATELY, THIS IS TOO MANY FOR LISTDD TO SORT '
         DC    C'AND DISPLAY.  TERMINATING.'
ERR40LEN EQU   *-ERRMSG40
         DSECT
SORTLINE DS    0CL80
SORTKEY  DS    0CL10
SORTDDN  DS    CL8
SORTTAG  DS    XL2
         ORG   SORTTAG+1
SORTLTRL DS    CL2
         DS    CL1
SORTDSN  DS    CL44
         DS    CL11     SPACE FOR MEMBER NAME IF FOUND
SORTVOLS DS    CL6        (VOLUME LIST TRUNCATED TO 1 VOLSER)
         DS    CL1
SORTDISP DS    CL3
         ORG   SORTLINE+80
         EJECT
*
*  MVS MAPPING MACROS
*
         CSECT
         IHAPSA
         IKJTCB
TIOT     DSECT
         IEFTIOT1
JFCB     DSECT
         IEFJFCBN
         IKJCPPL
         IKJIOPL
#PAN$AUD CSECT
$PAN#AUD DC    CL21'001CBT1837   08/22/88'
         END   LISTDD
