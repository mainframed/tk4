Œ\INMR01








VE


  /* this rexx exec is expected to be invoked by the EXEC command
     thus:
     EXec 'dsname($RECEIVE)'
       and it will then issue the TSO RECEIVE command for the
       EXEC and PANELS members to create 3 new datasets:
       userid.prmck.EXEC and
       useÿ
         userid.prmck.PANELS
         You will then need to copy these datasets/members into
         datasets for proÿ
           */

        parse source with x1 x2 x3 dsn .ÿ
           x = PROMPT("ON") /* enable prompting */
          queue "dsn(prmck.exec)"
          "Receive inds('"dsn"(exec)')"                ÿ
            queue "dsn(prmck.execfb)"
            "Receive inds('"dsn"(execfb)')"
            queue "dsn(prmck.panels)"                                 %
              "Receive inds('"dsn"(panels)')"
      

                                This application consists of a REXX Exec
ISPF Panel.  To use             tÿ
or the VB version) into           a library in your SYSPROC or SYSEXEC c
tion.  You then need to           copy the panel into a library in your
concatenation.                                  ÿ
                                    Usage is to Edit the desired member
PARMLIB and enter the               command PRMCK.
                                                               ÿ
                                      Syntax: PRMCK cat sysres (debug

                                      valid options are:
                                              ?   - will prompt for cata
sysres                                        cat - is a name that will
in the master                                       catalog lookup (find
* below) and ÿ
as the master                                         catalog name (ente
t quotes).                                      sysres is the volser of
em ipl volume               ÿ
ser of ****** is                                        coded.
                                                  (debug - will turn on
                                           ÿ
                                              Support for PROGxx member
ts                                               - LNKLST
                                                 - APF    ÿ
                                                   - LPA
                                                   - SYSLIB
                                                Support for LNKLSTxx and
Txx members
                                                  Verification is not 10
ame as the system will perform when               used but it does a fai
 of verih fication.  Errors and Warnings            are inserted into th
isplay as non-saveable messages.                    
INMR01

&





 




--------------- *
            *
        *
        *
    *
*
*

      *            Support for LNKLSTxx and LPALSTxxÿ
    *    ÿ
  *  Syntaxc PRMCK cat sysres (debug                            *
                                                            *
alid options are:       ÿ
   ?   - will prompt for catalog and sysres             *
at - is a name that will be used in the master      *
 catalÿ
 if not found will be used as the master        *
alog name (enter without quotes).           *
 volser of the system iÿ
hecked when a volser of ****** is       *
                                    *
 tracing                        *
                                *
in PROGxx for the volser    *
be there for them in    *
    +
  ÿ
on which verifies *
ssarily that the*
s are also  *
 on the   *
cked  *
 add*
ed*
<

        *                                                             *
    * Author:    Lionel B. Dyck                +
  *            Kaiser Permanente             ÿ
  *            Walnut Creek, CA 94598                           *
           (925) 926-5332                                   *
       Internet: lionel.b.dyck@kp.org                   *
                                                        *
                                                    *
1/19/99 - fixed dup msg if ext and sec > 0      *

/99 - fixed SYSLIB checking                 *
- find missing parenthesis              *
d support for voÿ
ke lookup table more generic        *
 on vol - find where cataloged  *
 table and other options    *
 cleanup                    *
bolic support           *
MCK                 *
palstxx support     *
                *
            *
----------- *
        *
--- */
    ÿ
ON" then
        Select
     When left(memberÿ+
,4) = "PROG" then noÿ
"

          Address ISPExec "Setmsg mÿ
caps
     parse value "" with null dsname volser sms first ,
           cont lnklpaxx_dsname ,
sysres paren
 /* ----------------------------------------------------- *
ess the parm                                      *
----------------------------------------- */

EBUG" then +
ÿ

Address ISREdit
    sysres = reÿ
------------- *
    *
        * --------------------ÿ
    Select
at = xSYS (Ncal)     *
     When right(cat,3) = "SYS" then
hen
  /* -------------------------- *


------------------------ *
        * -------------------------- */
"0" then
aster_cat = "ICF."cat".MSTRCAT"

------- */ÿ
            end
-------- *

        if sysres = null then

      * Get master catalog name         +
* ------------------------------------ÿ
er_cat = null then do
TSO,
"
   /* ----------------------------------------------------- *
master catalog volser                             *
---------------------ÿ

   call outtrap "off"
with "VOLSER------------" master_vol .ÿ
---ÿ
he edit dataset(member)   *
--------------- */
+ 0
rd
            if length(line) > 0 then call test_card
     if dsname <> null then
n do
               end
rrors = "No"
 "
dlmsg "With "warnings ,
    Address ISPExec,
st <> null then "locate" fÿ
xit 0

     * ------------------------------------ÿ
st_Card:
   call test_word word(line,word)
yword
          end
- *
      data = strip(line)
ength(data)
p + 1

en
---------------- *
       *
/
      When left(keyword,2) = "/*" then new_card = 1
er,4) = "PROG" then call Test_Prog
then do
PAxx

          end
turn
*
    * ----------------------------------------------------- */
Prÿ
        "Addpop column(11) row(2)"
  "Rempop"
-------------------+
STxx and LPALSTxx mÿ
------------------------------------ */
cat_test = 1
  if cont = 0 then call Cont_After_Eÿ
hen cont = 1
pos("(",keyword) > 0 then
olser ")" .
 "," .
me = dsname
 ÿ
---------------------------------------- *
YS1.PARMLIB                    *
----------------ÿ
  When ÿ
         cardk   = card
" then do

 - 1
1
er sms
When keyword = "LNKLST" then do
         mcat_test = 1
            card = card - 1
           card = card + 1
lue "" with dsname volser
 end
  = "SYSLIB"
ll then do
_dsname
         ÿ
               end
 type    = "LPA"
> null then do
all test_dsname

= card
call Disp_Process
 then call test_apf

   when type = "LPA" then call test_lpa
" then call test_syslib
end
  /* ----------------------------------------------------- *
ÿ
---------------------------------------- */
lectÿ
"DELETE" then nopÿ
      When left(keyword,7) = "DSNAME(" then do
yword with "DSNAME(ÿ
then
                dispmsg = dsname
         end
      parse value keyword with "DSN(" dsname ")"
eyword,1) <> ")" then
 = word + 1
rocess

n left(keyword,7) = "VOLUME(" then
 "VOLUME(" volser ")"
     ÿ
left(keyword,7) = "FORMAT(" then do

0 then val = 1
      end
--------------+
T keywords (ÿ
--------------------------------------- */
lect
 = "DELETE"   then nop
          When keyword = "UNDEFINE" then nop
Y"   then nop
n keyword = "LAST"     then nop
ME(" then nop
    When left(keyword,8) = "JOBNAME(" then nop
) = "MODNAME(" then do
modname ")"
call Disp_Process
XITNAME(" then do
name ")"
all Disp_Process
DSNAME(" then do
"
word(line,word+1) = ")" then word = word + 1ÿ
me
ü
    if wordpos(state,"ACTIVE INACTIVE") = 0 then val = 1
d
 value keyword with "FORCE(" force ")ÿ
S NO") = 0 then val = 1

-------------------------------- *
                         *
-------------- ÿ
en keyword = "ACTIVATE"   then nop
hen nop
yword = "ATTOP"      then nop
op
 =ÿ

"UPDATE"     then nop
        When leftÿ
rd,4) = "JOB(" then nop
Ñ
t(keyword,4) = "DSN(" then do
AME(" dsname ")"
     ÿ
 dispmsg = dsname

value keyword with "DSÿ
 <> ")" then
 1

            parse value keyword with "NAME(" name ")"
yword,7) = "VOLSER(" then
" volser ")"
      parse value keyword with "VOLUME(" volser ")"
= 1

    * Test LPA keywords    (progxx)                         *
--------------------------------------------------- */
         Select
   When keyword = "CURRENT"    then nop
  then nÿ
en keyword = "OLDEST"     then nop
hen nop
left(keyword,7) = "CSALIMÿ
K(" then nop
      When left(keyword,6) = "FORCE(" then do
word with "FORCE(" force ")"


     if right(keyword,1) <> ")" then
) = ")" then word = word + 1
    cÿ
ll
Ô
    if right(keywordÿ
 = ")" then word = word + 1
   call Disp_ÿ
l

herwise val = 1
return
- *
        * ---------------------------------------ÿ
 Test_SYSLIB:
then do
              if right(keyword,1) <> ")" then
ne,word+1) = ")" then word = word + 1
             call Disp_Process
        dsname = null
= "ÿ
me ")"
if word(line,ÿ
sname

(keyword,7) = "CSSLIB(" thenÿ
SSLIB(" dsname ")"
              if word(line,word+1) ÿ
   dispmsg = dsname
ll test_dsname
     When left(keyword,8) = "LINKLIB(" then do
keyword with "LINKLIB(" dsname ")"
)" then

            call test_dsname
   end

     *ÿ
--------ÿ
e:
ame) > 0 then call fix_ÿ

test_sms
Ã
then volser = sysres
 "Vol("volser")"
    end
--------------------- *
              *
--- */
bol '.' .
- parse value dsname with symbol '&' .


-p1ÿ
substr(newdsnr,2)
nr
------------------ÿ
 of dataset                            *
---------------------------- */
 "'"dsname"' norecall smsinfo"
ate_Msg
SMS
 end
------------------ *
         *
/
ess TSO "Liÿ
uttrap "off"
       if cat_rc > 0 then do
turn
ll outtrap "c."
at"')"
 if c_rc > 0 ÿ
er = "******" then volser = sysres
 = "Vol("volser")"
        return
----------- *
  *
       Test_Volume:

i "'"dsname"'"
vol = sysvolume
nVolume
e,"LNKLST") = 1 then do
ents
mult_extents
o
ysmgmtclass <> null then call not_defined_sms
       e+
------ÿ
                   *
-------- */

do
ser = mvsvar('symdef',volser)
    ÿ
 * Set messages                                          *
---------------------------------------------- */
      if first = nullÿ
sing_Paren:
sis",
 errors = errors + 1
       Cont_After_End:
 Continuation '"


=ÿ
SMS Status'"
          return
ine 'Error:" dsnÿ
         call set_first
      "line_after" card "= msgline 'Error:" dsname ,
ged in the Master Catalog'"
ll set_fiÿ
und_vol <> null then
 on:" found_vol "'"
"Not on" volser"'"
 null
          "line_after" card "= msgline 'Warning:" dsname,
           "Not SMS Managed'"
    call set_first
  "line_after" card "= msgline '         volume:" volser "'"
e_after" card "= msgline 'Warning:" dsname,
S Managed but defined to'"
all set_first
after" cardÿ
Ó
h a secondary allocation of" sysseconds "'"ÿç
ings = warnings + 1
    Invalid_Keyword:

 "'"


2
CLS  
AHR 



ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ{B
                                                               {

9231237



ç







e  -------------------- *                 * Name:      PRMCK (ParmLib Ch
                        *                 *
                        *         ÿ
tion                        *                 *            Support for P
mber statements             *                 *               - LNKLST
                            *                 *    ÿ
        ÿ
                                *                 *               - SYSL
                                *                 *            Suppoÿ
LSTxx and LPALSTxx membÿ
                                    *                 *  Syntaxc PRMCK c
s (debug                            *                 *
     ÿ
                                        *                 *        ?   -
ompt for catalog and sysres             *                 *        cat -
me that will be used iÿ
alog lookup (find *custom* below) and       *                 *
not found will be used as the master        *                 *
alog name (enter without quotes).      ÿ
s is the volser of the system ipl volume        *                 *
 to be checked when a volser of ****** is       *                 *
 coded.                                         *       ÿ
BUGÿ
                                                    *                 *
symbolics are supported in PROGxx for the volser    *                 *
is time.  Future s+
 dataset name anÿ
                                                          *
he member vaÿ
 that the keywords used are valÿ
*  right keywords are used together.  Dataset names are also  *
*  validated, including existÿ
  *  volume.  Multiple occurances of a keywordÿ
    *  nor are inappropriate uses of keywords (e.g. delete and add*
    *  in the same statement).  However this pÿ
      *  and has caught the majority of the errors that we maÿ
        *                                                             *
        * Syntax:    %PRMCK                                    +
          *                                                  ÿ
              * Author:    Lionel B. Dyck
              *            Kaiser Permanente
              *            Walnut Creek, CA 94598
           ÿ
*                 *            Internet: lionel.b.dyck@kp.org
*                 *
*              ÿ
    *                 *            11/19/99 - fixed dup msg if ext and s
    *                 *            11/08/99 - fixed &SYSR1
    *                 *         ÿ
        *                 *            11/03/99 - find missing parenthes
        *                 *            10/20/99 - add support for vol of
(apf)   *                 *            10/19/99 -ÿ
eric        *                 *            10/19/99 - if not on vol - fi
 cataloged  *                 *            10/18/99 - add lookup table a
 options    *                 *            09/30/99 - additional cÿ
                *                 *            09/28/99 - extent and sym
pport           *                 *                     - changed name t
                *                 *            09/27/99 - add lnklstxx a
txxÿ
                    *                 *
                    *                 * --------------------------------
------------------- ÿÿ
                        *                 * ----------------------------
----------------------- */                Address ISREDIT
                                    +
                                  ÿ

                                                "(savecaÿ
                                                 ÿ
                                                       "CAPS = OFF"

                                                       "(member)ÿ
                                                         Select
                                                           When left(mem
 "LNKLST" ÿ

4) = "PROG" then nop                                           Otherwise
                           +
              ÿ
 "Member" member "is not a supported member type",
 "by this system parmlib validation process."                          A
SPExec "Setmsg msg(isrz001)" ÿ
 =" savecaps
4
                                            ÿ


 value "" with null dsname volser sms first ,              ÿ
                   cont lnklpaxx_dsname ,
                   master_cat sysres paren
rrors   = 0
 warnings = 0  ÿ

 /* ----------------------------------------------------- *
  * Proceÿ
      * ----------------------------------------------------- */
       parm = translate(parm)
       parse value parm ÿ
           if debug = "DEBUG" then trace "?i"
           if cat = "?" then do
             cat = null                ÿ
                 Address ISPExec
                 "Addpop column(11) row(2)"
                 "Display Panel(PRMCKP)"              +
   ÿ
                        Address ISREdit
                       end
                    ÿ
                            sysres = res

                       /* -----------ÿ
- ÿ
    *                       *  Master catalog 'lookup' table.
    *                       * ------------------------ÿ
----- */         ÿ
                                  /* -------------------------- *
                                   * When Cat = xSYS (Ncal)     *      +
                                ÿ
                                         When right(cat,3) = "SYS" then
                                              if length(cat) = 4 then
                                               ÿ
left(catÿ
                                             * Hawaii Kaiser
                                             * ---------------ÿ
                         ÿ
                                                      master_cat = "ICF.
RCAT"                                           /* ---------------------
*                                         ÿ
  *                                                  * -----------------
- */                                                 When substr(cat,3,1
then        ÿ
 then                                                             master
ICF."cat".MSTRCAT"                                      /* -------------
----- *                    ÿ
astercat  *                                                  * ---------
--------- */                                                 Otherwise
                                          ÿ
 cat         ÿ

                                                         ÿ
------------------------------ÿ
olser                                     *                       * ----
----------------------------------------- */                      if sys
null then                                      ÿ
s = mvsvar('symdef','sysr1')
                                                                       /
----------------------------------------------- *               ÿ
masteÿ
--------------------------------------------------- */
aster_cat = null then do
aÿ
   Address TSO,
   "Listc ent('sys1.linklib')"
   call outtrap "oÿ
       master_cat = word(cat.2,3)
       end
                                   +
       /* -------------------------ÿ
          * Get master catalog volser                             *
          * -----------------------------------------------------ÿ
            call outtrap "cat."                     ÿ
              Address TSO,
              "Listc ent('"master_cat"') volser"
ÿ
                  last = cat.0
                  parse value cat.last with "VOLSER------------" master_
               ÿ
      ÿ
                      * Process all card images in the edit dataset(memb
                      * ------ÿ
*/                     ÿ
                          last = last + 0
                                             ÿ
                            do card = 1 ÿ
                                  "(line)  = line" card
                                  new_card = 0              ÿ
                                    line = left(strip(linÿ
                                      if length(line) > 0 then call test
                                      end
                                     if dsname <> null then
                                          if dsname <> lnklpaxx_dsname t
                                             card = card - 1
          +
        ÿ
                                             zedsmsg = null
                                             if errors = 0 then errors =
                       ÿ
ors were encountered. "                          if warnings = 0 then wa
 "No"                                            zedlmsg = zedlmsg "With
gs ,                                  ÿ
ered."                                               Address ISPExec,
                                                        "Setmsg msg(isrz
                                                     ÿ
locate" first-1                                          "CAPS =" saveca
                                                         Exit 0
                                                                    ÿ
 +

 control statements                   *                       * --------
---ÿ
                ÿ
                                                                  do wor
 words(line)      ÿ
_word word(line,word)            ÿ
= 1 then call invalid_keyword
card = 1 then leave              ÿ
 0                                                ÿ

------------------------------------------------ÿ
w test for missing paren's                          */             ÿ
a = strip(line)
= 0 ; rp = 0                                                   ÿ
o c = 1 to length(data)
  ifÿ
       lp = lp + 1
      if substr(data,c,1) = ")" then
         rp = rp + 1 ÿ
        end
      if lp <ÿ
           call missing_paren         ÿ
          return
                            +
           /* ------------ÿ
                * Test specific keyword
                * -----------------------------------------------------
                Test_Word:               ÿ
                    arg keyword
                    Select
                      When left(keyword,2) = "/*" then nÿ
           ÿ
                          When left(member,6) = "LNKLST" then do
                               type = "LNKLST"                         ÿ
                            ÿ
                                   end
                              When left(member,6) = "LPALST" then do
      ÿ
                                       callÿ
                                         end
                     ÿ
                                      end                   ÿ
                                      return
                                    ÿ
                                       /* ------------------------------
----------------- *                       * Process ongoing process mess
                  *                       * -------ÿ
------------------- */                      Disp_Process:
              ÿ
                                              "Control Display Locÿ
                                                "Addpop column(11) row(2
                               ÿ
                                                  "Rempop"
 ÿ
                                                ÿ

                ÿ
------------------------------- *                       * Test LNÿ
ALSTxx members                    *                       * ------------
-------------------------------ÿ
                                                            mcat_test =
  ÿ
                                              +
                                            ÿ
en call Cont_After_Enÿ
word,1) = "," then cont = 1
              else cont = 0                                ÿ
,keyword) > 0 then                    ÿ
 value keyword with dsname "(" volser ")" .

se value keyword with dsname "," .                     ÿ
olser = null
nd
paxx_dsnaÿ
dispmsg = dsname
call Disp_Process
call test_dsname        ÿ
  return +
       ÿ
                                       ÿ
       /* ----------------------------------------------------- *
        * Test PROGxx meÿ
          * ------------------------------------------ÿ
            Test_Prog:
            Select                       ÿ
                When keyword = "EXIT" then do                        ÿ
                       type    = "EXIT"
                       cardk   = card                     ÿ
                         end
    ÿ
                           type    = "APF"
                             mcat_test = 0
                   ÿ
                                  card = card - 1
            ÿ
                                  ÿ
                                      end
                             ÿ
                                     cardk   = caÿ
                                       end
                                  When keywordÿ
                                         type    = "LNKLST"     +
                                           mcat_test = 1      ÿ
                                             if dsname <> null thÿ
                                                  card = card - 1
                                                  call test_dsname
                                                    card = card + 1
  ÿ
                                                   parse value "" with d
lser        ÿ
                   ÿ
                                                  When keyword = "SYSLIB
o                          ÿ
                                    ÿ
                                                           if dsname <>
n do                                      ÿ
                                                     +
me                                                 ÿ
+ 1                                                      ÿ
                                                                   parse
" with dsname                                                      cÿ
ard                                                                  end
                                                                  When k
 "LPA" then do                                                         t
 "LPAÿ
st = 1 ÿ
name <> null then do
rd = card - 1         ÿ
call test_dsname      ÿ
  card = card + 1
  end                                  ÿ
 parse value "" with dsname volser   ÿ
   cardk   = card
   end                                                  ÿ
otherwise do                                        ÿ
       call Disp_Process
       Select
         when type = "APF" then call test_apf                      ÿ
           when type = "EXIT" then call test_exit
           when type = "LNKLST" then call test_lnklst
          ÿ
  ÿç
                           otherwise val = 1
                           end         ÿ
                 ÿ
                          end
                        return                          ÿ
                                ÿ
                           /* ------------------------------------------
--- *                       * Test APF keywords (Progxx)
      *                       * ---------------ÿ
------- */                      Test_APF:
                                Select
          ÿ
                                      When keyword = "DELETE" then nop
                                      When keyword = "SMS" then sms = "S
                           +
do                         ÿ
E(" dsname ")"                                   if right(keyword,1) <>
                                                    if word(line,word+1)
hen word = wÿ
                                                     call Disp_Process
                                                     end
                           ÿ
" then do                                                parse value key
h "DSN(" dsname ")"                                      if right(keywor
")" then                                  ÿ
d+1) = ")" then word = word + 1                              dispmsg = d
                                                             call Disp_P
                                                         ÿ
               ÿ
 = "VOL(" then                                                   parse v
word with "VOL(" volser ")"                                 When left(ke
7) = "VOLUME(" then             ÿ
 keyword with "VOLUME(" volser ")"                              When lef
d,7) = "VOLSER(" then                                                par
 keyworÿ
yword,7) = "FORMAT(" then do
alue keyword with "FORMAT(" format ")"
pos(format,"DYNAMIC ST+
                    ÿ
ise val = 1

ix_ÿ
turn

--------------------ÿ
* Test EXIT keywords (Progxx)                           *
* ----------------------------------------------------- */
Test_Exit:                           ÿ
    Select
      When keyword = "ADD"      then nop
      When keyword = "DELETE"   then nop              ÿ
ÿ
          When keyword = "UNDEFINE" then nop
          When keyword = "MODIFY"   then nop                           +
            Wheÿ
                When keyword = "LAST"     then nop
                When left(keyword,9) = "EXITNAME(" then nop
                When left(keywÿ
        ÿ
                    When left(keyword,8) = "MODNAME(" then do
                         parse value keyword ÿ
                         ÿ
                             call Disp_Process
                             end                            ÿ
                          When left(keyworÿ
                                 parse value keyword with "EXITNAME(" ex
)"                               dispmsg = "Exitname" exitname
                                   call Disp_Process       ÿ
                                     end
                                When left(keyword,7) = "DSNAME(" then do
          ÿ
me ")"                                   if right(keyword,1) <> ")" then
                                            if word(line,word+1) = ")" t
 = word + 1              ÿ
             -                               end
                             ÿç
ATE(" then do                           +
 with "STATE(" state ")"              ÿ
"ACTIVE INACTIVE") = 0 then val = 1             ÿ
                                                            When left(ke
 = "FORCE(" then do                                  ÿ
eyword with "FORCE(" force ")"                                   ÿ
force,"YES NO") = 0 then val = 1                                     end
                                                                otheÿ
= 1                                                               end
  ÿ

   ÿ
-------------------ÿ
LST keywords (progxx)                         *                       *
------------------ÿ
LST:                                ÿ

 keyword = "ACTIVATE"   then nop ÿ
en keyword = "ADD"        then nop                   ÿ
When keyword = "ATBOTTOM"   then nop
When keyword = "ATTOP"      then nop            ÿ
  When keyword = "DEFINE"     then nop                                ÿ
    When keyword = "DELETE"     then nop
    When keyword = "NOCHECK"    then nop                       ÿ
      When keyword = "UNALLOCATE" then nop
      Wÿ
        When keyword = "UPDATE"     then nop
          When keyword = "SMS" then sms = "SMS"
          When left(keywÿ
            When left(keyword,4) = "JOB(" then nop
            Wÿ
              When left(keyword,9) = "COPÿ
                When left(keyword,4) = "DSN(" then do
                     parse vÿ
                       if right(keyword,1) <> ")" then    ÿ
                            if word(line,word+1) = ")" then word = word
                         dispmsg = dsname  ÿ
                           call Disp_Process
                             end
                          When left(keyword,7) = "DSNAME("+
                                 parse value keyword witÿ
                                   if right(keyword,1) <> ")" then
            ÿ
ord + 1                              dispmsg = dsname                  ÿ
                                       call Disp_Process
                             ÿ
                                    When left(keyword,5) = "NAME(" then
      ÿ
 ")"                                  When lefÿ
                                             parse value keyword with "V
volser ")"           ÿ
                                               parse value keywÿ
E(" volser ")"                              otherwise val = 1
                                    ÿ
                                              call fix_volser
ÿ
                                                   ÿ
                                               /* ----------------------
-----------------ÿ
)                         *                       * --------------ÿ
--------------------------- */                      Test_LPA:
                                  ÿ
                                                        When keyword = "
 ÿ
T"    then nop                                     ÿ
TE"     then nop                                            When keyword
D"      then nopÿ
DEST"     then nop                                            When kÿ
PAGEABLE"   then nop                                            When key
PAGEPROTPAGE" then nop         ÿ
ord,7) = "CSALIM(" then nop                                       When l
ord,5ÿ
yword,8) = "MODNAME(" then nop                ÿ
keyword,6) = "FORCE(" then do
 value keyword with "Fÿ
force <> "YES" then val = 1                                  ÿ
nd
eft(keyword,7) = "DSNAME(" then do     +
 parse value keyword with "DSNAME(" dÿ
     if right(keyword,1) <> ")" then
          if word(line,word+1) = ")" then word = word + 1
       dispmsg = dsname                                 ÿ
         call Disp_Process
         ÿ
           end
        When left(keyword,4) = "DSN(" then do
             parse valueÿ
               if right(keyword,1) <> ")" then
          ÿ
                 dispmsg = dsname      ÿ
                   call Disp_Process
                   if dsnamÿ
                     end                              ÿ
                  When left(keyword,7) = "VOLSER(" then
                       parse value keyword wÿ
                    otherwise val = 1                                ÿ
                      end
                      call fix_volser                        ÿ
                        return
    ÿ
                       /* ----------------------------------------------
- *                       * Test SYSLIB keywords (progxx)
  *                ÿ
--- */                      Test_SYSLIB:
               ÿ
                                Whÿ
                                       parse value keyword with "LPALIB(
 ")"                            ÿ
                                            if woÿ
rd = word + 1                              dispmsg = dsname
                                           call Dÿ
                                             call test_dsname   ÿ
                                               dsname = null
                                               end                ÿ
                                            When left(keyword,7) = "MIGL

LIB(" dsname ")"                                   if right(keyword,1) <
en +
)ÿ
            ÿ
                                                           call test_dsn
                    ÿ
                           ÿ
                                                          When left(keyw
 "CSSLIB(" then do                   ÿ
word with "CSSLIB(" dsname ")"            ÿ
ord,1) <> ")" then                                                    if
ne,word+1) = ")" then word = word + 1                 ÿ
sname                                                    ÿ
_Process                                                               c
_dsname                                                                ÿ
= null
                                                                      Wh
keyword,8) = "LINKLIB(" then do
 value kÿ
right(kÿ
  if word(line,word+1) = ")" then word = word + 1
ispmsg = dsname          ÿ
 call Disp_Process    ÿ
   call test_dsname
   dsname = null                          ÿ
     end                             ÿ
  otherwise val = 1
  end                                                      ÿ
    return                                          ÿ

   /* ----------------------------------------------------- *
      * Test validity of the dataset name                     *    ÿ
        * ----------------------------------------------------- */
        Test_Dsname:
        lmvolÿ
  ÿ
               if pos("&",dsname) > 0 then call fix_symdef
                              ÿ
                 ÿ
                Select
                When sms = "SMS" then call test+
                  When volser = +
                           calÿ
                        When volser <> null then do
                             if volser = "******" then volser = ÿ
                               call fix_volseÿ
                                 lmvol = "Vol("volser")"
                                 call test_volume
 ÿ
                                end
                                return
                  ÿ
                                   /* ----------------------------------
----------- *                       * Fixup dsname found with system sym
            *                      ÿ
----------ÿ
                                          parse value dsname with . '&'
.' .                                      if pos("&"ÿ
                         ÿ
'&' .                                         p1 = pos("&"symbol,dsname)
                                              p1l = length(symbol)   ÿ
                                        ÿ
                                                  p1r = p1l + p1
                                                  newdsnr = right(dsname
dsnameÿ
then                                                     newdsnr = subst
r,2)                                                  newdsn = newdsnl""
symdef',symbol)""newdsnÿ
                                                        return

                                        ÿ
-----ÿ
 dataset                            *                       * ----------
----------------------------------- */                   ÿ
                    ÿ
dsname"' norecall smsinfo"                                      if (sysr
 = 9 then call Migrate_Msg                                      else do
                                   ÿ
tclass = null then call Not_SMS                                        i
ume    = null then call Not_Catalog                                    e
           +
           ÿ

--------------------------------------------------- *
st Catalog status of datasetÿ
* ----------------------------------------------------- */
Test_Catalog:
call outtrap "cat."                          ÿ
    Address TSO "Listc ent('"dsname"') vol"
    cat_rc = rc
    call outtrap "off"                                        ÿ
      x = catÿ
        volser = substr(cat.x,26,6)
        if cat_rc > 0 then do

               return
               end
            if Mÿ
                   call outtrap "c."
                   Address TSO "Listc ent('"dsname"') cat('"master_cat"'
                   c_rc = rc     ÿ
                       call outtrap "off"
                       if c_rc > 0 then call Not_Master_Cat
                       end                        ÿ
                        if volser = "******" then volser = sysres
                        call fix_volser
                        lmvol = "Vol("volser")"                    ÿ
        ÿ
                            call test_volume
                            return
    ÿ
                               /* --------------------------------------
------- *                       * Test dataset on volume
        *            ÿ
----------- */                      Test_Volume:
                                    sysvolume = null
                                    caÿ
                                        if sysreason > 0 then do
                                           call listdsi "'"dsname"'"
                                           if sysvolume+
                                                  foundÿ
                                                   else found_vol = null
                                                   call Not_OnVolume
                                                   end
 ÿ
                                                         if wordpos(type
") = 1 then do                                              if sysextent
en call mÿ
                                                                if sysse
0 then call mult_extents                                        end
                          ÿ
ll then do                                                          call
 "'"dsname"' smsinfo"                                               if s
ass <> null then call not_defined_sms      ÿ
                                                                     end
                                                                return
                                                            ÿÿ
                                                                   /* --
------------------------------------------- *                       * fi
er                                          *                       * --

er:
ser = "*MCAT*" then
ser = masteÿ
 left(volser,1) = "&" then do
 volser = right(volser,length(volser)-1)
 volser = mvsvar('symdef',ÿ
     end
return
                                         ÿ
   /* ----------------------------------------------------- *
    * Set messages                                          *
    * --------------------------------------------------ÿ
        Set_First:
         if first = null then first = cardk
         return                                                        ÿ
    ÿ
             "line_after" card "= msgline 'Warning: Missing parenthesis"
                               "on the previous statement.'"
      ÿç
                              cÿ
                                return
                     ÿ
                                 "line_after" caÿ
Continuation '"                     errors = errors + 1
                                    ÿ
                                      return                     ÿ
                                      Migrate_Msg:
                                       "line_after"ÿ
Dataset Migrated",                          "unable to determine SMS Sta
  ÿ
                                            call set_first        ÿ
                                              return
                   ÿ
                                               "line_after" card "= msgl
oÿ
                                    ÿ
                                                    return
                ÿ
                                                     ÿ
ine 'Error:" dsname ,                                     "Not Cataloged
Master Catalog'"               ÿ
                                                          call set_firÿ
                                                            return
                                              ÿ
                                                             if found_vo
l then ÿ
 "= msgline '       was found on:" found_vol "'"             ÿ
rd "= msgline 'Error:" dsname "Not on" volser"'"                  errors
s + 1                   ÿ
null                                                                call
irst                                                                  re
                                         ÿ
                                                                       "
er" card "=ÿ
           "Not SMS Managed'"                             ÿ
ings = warnings + 1
 set_first                +
turn                    ÿ
Not_Defined_SMS:
   "line_after" card "= msgline '         volume:" volser "'"
   "line_after" card "= msgline 'Warninÿ
                       "SMS Managed but defined to'"
      warninÿ
        call set_first                                ÿ
          return
        Mult_Extents:        ÿ
           "line_after" card "= msgline '        ",                  ÿ
              "in" sysextents "extents'"
             "line_after" card "= msgline 'Warÿ
                "with a secondary allocation of" sysseconds "'"
    ÿ
                  call set_first                               ÿ
                    return
                  Iÿ
                     "line_after" card "= msgline 'Error: Above",
ÿ
                        keyword "'ÿ
                          errors = errors + 1
                 &          return
                 {ç
   

FMATTR 
PRT  
WFMO  


ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿÿÿ{B

00229231240

INMR02
Ç
ç



CK   
   ÿÿÿÿÿÿÿÿ


                                           /* + type(text  ) intens(low
            information only  */              _ type( input) intens(high
ff) just(left )                             ÿ
aps(off) just(left ) color(yellow)                @ type(output) intens(
aps(off) just(right) color(yellow)                % type(text) intens(hi
                                                  ~ type(textÿ
lor(blue) hiÿ
                                                   ~                   P
alidation                                          +Processing: `dispmsg
                           ÿ
f@last  +                                              )Proc
                                                       )End
               Í                          ÿ
	°
     /* + type(text  ) intens(low )                   information only
        _ type( input) intens(high) caps(on) just(left ) ÿ
        ÿ
            ` type(output) intens(high)  caps(off) just(left ) color(yel
            @ type(output) intens(high)  caps(off) just(right) color(yel
              % type(textÿ
                ~ type(text) intens(high) color(blue) hilite(reverse)
             )Body window(59,5) expand(//)
       ÿ
                 %Command ===>_zcmd

                 +Mast+
                    ÿ
                       )Proc
                        ver (&cat,dsname)
                         )End      z
                           
                                            {
