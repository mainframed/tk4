        /* ---------------------  rexx procedure  ----------------------
         * Name:      ISPFPROD
         *
         * Function:  To provide a generalized stub to drive ISPF
         *            applications without requiring the writing of
         *            specific individual clists or execs and without
         *            requiring that the application be installed into
         *            existing allocated libraries.
         *
         *--------------------------------------------------------------
         *            NOTE:
         *            Use of Tone's Dynastep or Gilbert Saint-flour's
         *            dynamic STEPLIB command are supported.
         *
         *            Find *custom* to change the default from
         *            Dynastep to Steplib or to none if neither are
         *            installed.
         *--------------------------------------------------------------
         *
         * Syntax:    %ispfprod options
         *            Where the options are:
         *
         *            APPLID(ISPF Application ID)
         *            SCRNAME(Screen-name)
         *            CLIST(CLIST Library or Libraries)      (note 1)
         *            EXEC(Rexx Library or Libraries)        (note 1)
         *            LLIB(ISPF Load Library or Libraries)   (note 1)
         *            STEP(Steplib Library or Libraries)     (note 1)
         *            MSGS(ISPF Messages Library or Libraries)  (note 1)
         *            PANELS(ISPF Panels Library or Libraries)  (note 1)
         *            SKELS(ISPF Skeleton Library or Libraries) (note 1)
         *            TABLE(ISPF Table Library or Libraries)    (note 1)
         *            PREFIX(library prefix)                    (note 2)
         *            CMD(command options)
         *            or
         *            PGM(program) PARM(parm)
         *            or
         *            PANEL(panel-name) OPT(option)
         *
         * Note 1:    Use of PREFIX(hlq.xxxx) will look for and use
         *            datasets which match the prefix plus CLIST,
         *            EXEC, MSGS, PANELS, SKELS, TABLES in lieu of
         *            coding the specific parameter.  LOAD or LLIB
         *            dsname suffixes will be used for the LLIB parm
         *            and STEPLIB will be used for the STEP parm.
         *
         *            Alternately ISPCLIB, ISPLLIB, ISPMLIB, ISPPLIB,
         *                        ISPSLIB, and ISPTLIB will be used
         *                        appropriately for those who like
         *                        these suffixes.
         *
         * Note 2:    Use of a specific parm will over-ride the PREFIX
         *
         * Author:    Lionel B. Dyck
         *            Kaiser Permanente
         *            Walnut Creek, CA 94598
         *            (925) 926-5332
         *            Internet: lionel.b.dyck@kp.org
         *
         * History:
         *            v1.4 - 02/28/00 - add scrname option
         *            v1.3 - 08/19/99 - add prefix option
         *            v1.2 - 08/09/99 - cleanup steplib
         *            v1.1 - 08/06/99 - more doc and support no steplib
         *            v1.0 - 08/06/99 - release level code (?)
         *            v0.1 - 08/03/99 - creation
         *
         * -------------------------------------------------------------

        arg options

        /* ----------------------------------------------------- *
         * Define the steplib command being used                 *
         *    Tone = Tone's Dynastep                             *
         *    GSF  = Gilbert Saint-flour's Steplib               *
         *    None = neither installed                           *
         * ----------------------------------------------------- */
        /* steplib = "Tone" */
        /* steplib = "GSF" */
        /* steplib = "None" */
        steplib = "Tone"

        /* ----------------------------------------------------- *
         * Test for debug option                                 *
         * ----------------------------------------------------- */
        if wordpos("DEBUG",options) > 1 then trace "?i"

        /* ----------------------------------------------------- *
         * Setup defaults                                        *
         * ----------------------------------------------------- */
         id = sysvar('sysicmd')":"
         bl = left(" ",3)

        /* ----------------------------------------------------- *
         * Test for operands - report if none                    *
         * ----------------------------------------------------- */
        if length(options) = 0 then do
           say id "Invalid syntax - no options specified"
           signal  Invalid_Syntax
           end

        /* ----------------------------------------------------- *
         * Clear out variables that we will be using             *
         * ----------------------------------------------------- */
        parse value "" with null step table skels msgs panels,
                            applid cmd llib exec clist,
                            pgm parm panel opt sel prefix scrname

        /* ----------------------------------------------------- *
         * Now process all the keywords that we will use         *
         * Remove option as processed to find invalid options    *
         * ----------------------------------------------------- */
        if pos("APPLID(",options) > 0 then do
           parse value options with . "APPLID(" applid ")" .
           p1 = pos("APPLID(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("CLIST(",options) > 0 then do
           parse value options with . "CLIST(" clist ")" .
           p1 = pos("CLIST(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("CMD(",options) > 0 then do
           parse value options with . "CMD(" cmd ")" .
           p1 = pos("CMD(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("EXEC(",options) > 0 then do
           parse value options with . "EXEC(" exec ")" .
           p1 = pos("EXEC(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("LLIB(",options) > 0 then do
           parse value options with . "LLIB(" llib ")" .
           p1 = pos("LLIB(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("MSGS(",options) > 0 then do
           parse value options with . "MSGS(" msgs ")" .
           p1 = pos("MSGS(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("PANEL(",options) > 0 then do
           parse value options with . "PANEL(" panel ")" .
           p1 = pos("PANEL(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("PANELS(",options) > 0 then do
           parse value options with . "PANELS(" panels ")" .
           p1 = pos("PANELS(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("PARM(",options) > 0 then do
           p1 = pos("PARM(",options)
           if pos("PARM((",options) > 0 then do
              parse value options with . " PARM((" parm "))" .
              pd = 2
              p2 = pos("))",options,p1)
              parm = "("parm")"
              end
           else do
              pd = 1
              p2 = pos(")",options,p1)
              parse value options with . "PARM(" parm ")" .
              end
           options = delstr(options,p1,p2-p1+pd)
           end
        if pos("PGM(",options) > 0 then do
           parse value options with . "PGM(" pgm ")" .
           p1 = pos("PGM(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("OPT(",options) > 0 then do
           parse value options with . "OPT(" opt ")" .
           p1 = pos("OPT(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("SCRNAME(",options) > 0 then do
           parse value options with . "SCRNAME(" scrname ")" .
           p1 = pos("SCRNAME(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("SKELS(",options) > 0 then do
           parse value options with . "SKELS(" skels ")" .
           p1 = pos("SKELS(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        steplib = translate(steplib)
        if steplib <> "NONE" then
           if pos("STEP(",options) > 0 then do
              parse value options with . "STEP(" step ")" .
              p1 = pos("STEP(",options)
              p2 = pos(")",options,p1)
              options = delstr(options,p1,p2-p1+1)
              end
        if pos("TABLE(",options) > 0 then do
           parse value options with . "TABLE(" table ")" .
           p1 = pos("TABLE(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end
        if pos("PREFIX(",options) > 0 then do
           parse value options with . "PREFIX(" prefix ")" .
           prefix = strip(prefix)
           p1 = pos("PREFIX(",options)
           p2 = pos(")",options,p1)
           options = delstr(options,p1,p2-p1+1)
           end

        /* ----------------------------------------------------- *
         * If PREFIX coded find the libraries for it             *
         * ----------------------------------------------------- */
        if prefix <> null then do
           if clist = null then
              if sysdsn("'"prefix".CLIST'") = "OK" then
                 clist = "'"prefix".CLIST'"
           if clist = null then
              if sysdsn("'"prefix".ISPCLIB'") = "OK" then
                 clist = "'"prefix".ISPCLIB'"
           if exec = null then
              if sysdsn("'"prefix".EXEC'") = "OK" then
                 exec  = "'"prefix".EXEC'"
           if msgs = null then
              if sysdsn("'"prefix".MSGS'") = "OK" then
                 msgs  = "'"prefix".MSGS'"
           if msgs = null then
              if sysdsn("'"prefix".ISPMLIB'") = "OK" then
                 msgs  = "'"prefix".ISPMLIB'"
           if panels = null then
              if sysdsn("'"prefix".PANELS'") = "OK" then
                 panels  = "'"prefix".PANELS'"
           if panels = null then
              if sysdsn("'"prefix".ISPPLIB'") = "OK" then
                 panels  = "'"prefix".ISPPLIB'"
           if skels = null then
              if sysdsn("'"prefix".SKELS'") = "OK" then
                 skels  = "'"prefix".SKELS'"
           if skels = null then
              if sysdsn("'"prefix".ISPSLIB'") = "OK" then
                 skels  = "'"prefix".ISPSLIB'"
           if tables = null then
              if sysdsn("'"prefix".TABLES'") = "OK" then
                 tables  = "'"prefix".TABLES'"
           if tables = null then
              if sysdsn("'"prefix".ISPTLIB'") = "OK" then
                 tables  = "'"prefix".ISPTLIB'"
           if llib = null then
              if sysdsn("'"prefix".LLIB'") = "OK" then
                 llib  = "'"prefix".LLIB'"
           if llib = null then
              if sysdsn("'"prefix".ISPLLIB'") = "OK" then
                 llib  = "'"prefix".ISPLLIB'"
           if step = null then
              if sysdsn("'"prefix".STEPLIB'") = "OK" then
                 step  = "'"prefix".STEPLIB'"
           end

        /* ----------------------------------------------------- *
         * Test for any unknown options                          *
         * ----------------------------------------------------- */
        options = strip(options)
        if length(options) > 0 then do
           say id "Invalid options:" options
           signal  Invalid_Syntax
           end

        /* ----------------------------------------------------- *
         * Generate the ISPEXEC Select command                   *
         * ----------------------------------------------------- */
        select
          when pgm <> null then do
               sel = "PGM("pgm")"
               if parm <> null then
                  sel = sel "PARM("parm")"
               end
          when panel <> null then do
               sel = "PANEL("panel")"
               if opt <> null then
                  sel = sel "OPT("opt")"
               end
          when cmd <> null then do
               sel = "CMD("cmd")"
               end
          otherwise nop
          end

        if length(scrname) > 0 then
          sel = sel "SCRName("scrname")"

        if length(sel) = 0 then do
           say id "Invalid syntax - no CMD, PGM, or PANEL specified."
           signal  Invalid_Syntax
           end

        if applid <> null then
           sel = sel "Newappl("applid") Passlib"

        /* ----------------------------------------------------- *
         * Once we have the keywords setup the environment.      *
         * ----------------------------------------------------- */
        if length(step) > 0 then call do_steplib
        if length(clist) > 0 then
           "ALTLIB ACTIVATE APPLICATION(clist)",
                  "DATASET("clist")"
        if length(exec) > 0 then
           "ALTLIB ACTIVATE APPLICATION(exec)",
                  "DATASET("exec")"

        Address ISPExec

        if length(llib) > 0 then
           "Libdef ISPLLIB Dataset id("llib") Stack"
        if length(msgs) > 0 then
           "Libdef ISPMLIB Dataset id("msgs") Stack"
        if length(panels) > 0 then
           "Libdef ISPPLIB Dataset id("panels") Stack"
        if length(skels) > 0 then
           "Libdef ISPSLIB Dataset id("skels") Stack"
        if length(table) > 0 then
           "Libdef ISPTLIB Dataset id("table") Stack"

        /* ----------------------------------------------------- *
         * Invoke the specified application                      *
         * ----------------------------------------------------- */
         "Select" sel

        /* ----------------------------------------------------- *
         * Back from the application - now clean up              *
         * ----------------------------------------------------- */
        if length(step) > 0 then call free_steplib
        if length(llib) > 0 then
           "Libdef ISPLLIB"
        if length(msgs) > 0 then
           "Libdef ISPMLIB"
        if length(panels) > 0 then
           "Libdef ISPPLIB"
        if length(skels) > 0 then
           "Libdef ISPSLIB"
        if length(table) > 0 then
           "Libdef ISPTLIB"
        if length(clist) > 0 then
          Address TSO,
            "ALTLIB DEACTIVATE APPLICATION(clist)"
        if length(exec) > 0 then
          Address TSO,
            "ALTLIB DEACTIVATE APPLICATION(exec)"
        exit 0

        /* ----------------------------------------------------- *
         * Setup the steplib environment                         *
         * ----------------------------------------------------- */
        Do_Steplib:
        if left(steplib,1) = "T" then
             "DS Add("step") Front Push Nomsg"
        if left(steplib,1) = "G" then do
             stepdd = "step"random(999)
             "Alloc f("stepdd") shr reuse ds("step")"
             "Steplib Set("stepdd")"
             end
        Return

        /* ----------------------------------------------------- *
         * Free up the steplib environment                       *
         * ----------------------------------------------------- */
        Free_Steplib:
        if left(steplib,1) = "T" then
           Address TSO "DS Nomsg"
        if left(steplib,1) = "G" then
             "Steplib Close"
        Return

        /* ----------------------------------------------------- *
         * Invalid Syntax                                        *
         * ----------------------------------------------------- */
        Invalid_Syntax:
           say id " "
           say id "The correct syntax is:"
           say id "%ISPFPROD"
           say id bl "APPLID(ISPF Application ID)"
           say id bl "SCRNAME(ISPF Screen Name)"
           say id bl "CLIST(CLIST Library or Libraries)"
           say id bl "EXEC(Rexx Library or Libraries)"
           say id bl "LLIB(ISPF Load Library or Libraries)"
           if steplib <> "None" then
              say id bl "STEP(Steplib Library or Libraries)"
           say id bl "MSGS(ISPF Messages Library or Libraries)"
           say id bl "PANELS(ISPF Panels Library or Libraries)"
           say id bl "SKELS(ISPF Skeleton Library or Libraries)"
           say id bl "TABLE(ISPF Table Library or Libraries)"
           say id bl "or"
           say id bl "PREFIX(hlq.dsname for libraries)"
           say id bl "CMD(command options)"
           say id bl "or"
           say id bl "PGM(program) PARM(parm)"
           say id bl "or"
           say id bl "PANEL(panel-name) OPT(option)"
           exit 8
