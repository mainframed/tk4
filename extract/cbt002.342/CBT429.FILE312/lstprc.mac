        /* --------------------  rexx procedure  -------------------- *
         * Name:      lstproc                                         *
         *                                                            *
         * Function:  Display active JES2 proclib's                   *
         *                                                            *
         * Syntax:    %lstproc proc                                   *
         *                                                            *
         * Assumptions:                                               *
         *            1. if proc not specified then use JES2          *
         *            2. only //PROCxx will be looked at              *
         *            3. comments will be ignored                     *
         *            4. symbolics are supported                      *
         *            5. system symbolics are supported               *
         *            6. only cataloged datasets are supported        *
         *            6. JES2 Dynalloc procs are not supported        *
         *                                                            *
         * Author:    Lionel B. Dyck                                  *
         *            Kaiser Permanente Information Technology        *
         *            Walnut Creek, CA 94598                          *
         *            (925) 926-5332                                  *
         *            Internet: lionel.b.dyck@kp.org                  *
         *                                                            *
         * History:                                                   *
         *            06/15/00 - clean up                             *
         *            06/14/00 - support system symbolics             *
         *                     - if no mstjclxx then default to       *
         *                       sys1.proclib                         *
         *                     - add return code checking from alloc  *
         *                     - change 3390 to sysallda for the alloc*
         *                     - add code to dynamically find mstjclxx*
         *                       from zpn6@cdc.gov ???                *
         *            06/13/00 - creation                             *
         *                                                            *
         * ---------------------------------------------------------- */

        arg options

        /* ----------------------------------------------------- *
         * Setup defaults                                        *
         * ----------------------------------------------------- */
        parse value "" with null ddn test mstrjcl proclibs,
                            proc syms procs
        ddn = "JCL"random(9999)

        /* ----------------------------------------------------- *
         * test options and use for procname or use JES2         *
         * ----------------------------------------------------- */
        if options = null then jes2 = "JES2"
                          else jes2 = options

        /* ----------------------------------------------------- *
         * Code from zpn6@cdc.gov to get mstjcl info             *
         * ----------------------------------------------------- */
        CVT=STORAGE('10',4)
        PCCA=STORAGE('208',4)
        CVTEXTV=STORAGE(D2X(C2D(CVT)+1196),4)
        LPAT=STORAGE(D2X(C2D(CVTEXTV)+56),4)
        RACFCVT=STORAGE(D2X(C2D(CVT)+992),4)
        CVTEXT1=STORAGE(D2X(C2D(CVT)+252),4)
        CVTEXT2=STORAGE(D2X(C2D(CVT)+328),4)
        VTAMCVT=STORAGE(D2X(C2D(CVTEXT2)+64),4)
        CVTECVT=STORAGE(D2X(C2D(CVT)+140),4)
        /* GET THE IPL LOADPARMS */
        LOADPARM=STORAGE(D2X(C2D(CVTECVT)+168),8)
        /* address of IHAIPA control block */
        CVTIPA=STORAGE(D2X(C2D(CVTECVT)+392),4)
        /* mstjcl section in IPA */
        MJC=STORAGE(D2X(C2D(CVTIPA)+2448),4)
        /* mstjcl section in IPA length */
        MJCLEN=C2D(STORAGE(D2X(C2D(CVTIPA)+2452),2))
        /* ieasys source in mstjclxx */
        MJCSYS=STORAGE(D2X(C2D(CVTIPA)+2454),2)
        /* mstjcl xx value */
        MJCXX=STORAGE(D2X(C2D(MJC)+0),MJCLEN)
        if left(mjcxx,1) = "(" then
            parse value mjcxx with "(" mjcxx ")" .
        /* parmlib volser */
        PARMVOL=STORAGE(D2X(C2D(CVTIPA)+461),6)
        /* parmlib dataset name */
        PARMDSN=STORAGE(D2X(C2D(CVTIPA)+416),44)

        /* ----------------------------------------------------- *
         * Alloc and read master jcl parmlib member              *
         * ----------------------------------------------------- */
        mstrjcl = "'"strip(parmdsn)"(MSTJCL"mjcxx")'"
        if "OK" <> sysdsn(mstrjcl) then do
           in.0 = 1
           in.1 = "//IEFPDSI DSN=SYS1.PROCLIB  "
           end
        else do
             "Alloc f("ddn") ds("mstrjcl") shr reuse" ,
                 "Vol("parmvol") Unit(sysallda)"
             "Execio * diskr" ddn "(finis stem in."
             "Free  f("ddn")"
             end

        /* ----------------------------------------------------- *
         * Find all proclibs in IEFPDSI and save them            *
         * ----------------------------------------------------- */
        hit = 0
        do i = 1 to in.0
           if hit = 1 then do
              if substr(in.i,3,1) = " "
                 then do
                      parse value in.i with . "DSN=" dsn "," .
                      proclibs = proclibs dsn
                      end
                 else hit = 0
              end
           if left(in.i,9) = "//IEFPDSI" then do
              hit = 1
              parse value in.i with . "DSN=" dsn "," .
              proclibs = proclibs dsn
              end
           end

        /* ----------------------------------------------------- *
         * Alloc all Master JCL Proclib's to DD: PROCMSTR        *
         * ----------------------------------------------------- */
        alloc_procs = null
        do i = 1 to words(proclibs)
           proc  = "'"word(proclibs,i)"'"
           alloc_procs = alloc_procs proc
           end
        "Alloc f(PROCMSTR) ds("alloc_procs") shr reuse"

        /* ----------------------------------------------------- *
         * Now look thru Master JCL Proclibs for JES2 Proc       *
         * ----------------------------------------------------- */
        do i = 1 to words(proclibs)
           proc  = "'"word(proclibs,i)"("jes2")'"
           if "OK" = sysdsn(proc) then leave
           end

        /* ----------------------------------------------------- *
         * Now read in the JES2 Proc                             *
         * ----------------------------------------------------- */
        "Alloc f("ddn") ds("proc") shr reuse"
        "Execio * diskr" ddn "(finis stem in."
        "Free  f("ddn")"

        /* ----------------------------------------------------- *
         * Now find all //PROCxx and save proc names             *
         * ----------------------------------------------------- */
        hit = 0
        sym = "sym"
        proc = "proc"
        do i = 1 to in.0
           if left(in.i,3) = "//*" then iterate
           If hit = 1 then do
              if substr(in.i,3,1) >= "A" then hit = 3
              end
           If pos(" PROC ",in.i) > 0 then hit = 1
           if hit = 3 then
              if left(in.i,6) = "//PROC" then do
                 parse value in.i with "//" w1 .
                 if length(w1) = 6 then
                     hit = 4
                 end
           if hit = 4 then do
              if left(in.i,6) <> "//PROC" then
                 if substr(in.i,3,1) >= "A" then hit = 3
              if left(in.i,6) = "//PROC" then do
                 parse value in.i with "//" w1 .
                 if length(w1) > 6 then hit = 3
                 end
              if hit = 3 then iterate
              if left(in.i,6) = "//PROC" then do
                 nn = substr(in.i,7,2)
                 proc.nn = null
                 procs = procs nn
                 end
              parse value in.i with . "DSN=" dsn ","
              dsn = word(strip(dsn),1)
              if pos("&",dsn) > 0 then call fix_sym
              if dsn <> null then do
                 if left(dsn,1) <> "'" then
                    dsn = "'"dsn"'"
                 proc.nn = proc.nn dsn
                 end
              end
           If hit = 1 then do
              If pos(" PROC ",in.i) > 0
                 then test = word(in.i,3)
                 else test = word(in.i,2)
              test = translate(test," ",",")
              if words(test) > 1 then
                do j = 1 to words(test)
                   parse value word(test,j) with symb "=" dsn ","
                   sym.symb = strip(dsn)
                   syms = syms symb
                end
              else do
                   parse value test with  symb "=" dsn ","
                   sym.symb = strip(dsn)
                   syms = syms symb
                   end
              end
           if hit >1 then iterate
           end

        /* ----------------------------------------------------- *
         * Now alloc DD: PROCxx                                  *
         * ----------------------------------------------------- */
           alloc_procs = null
           do i = 1 to words(procs)
              if alloc_procs <> null then
                 "Alloc f(PROC"nn") ds("alloc_procs")",
                    "shr reuse"
              nn = word(procs,i)
              alloc_procs = null
              do j = 1 to words(proc.nn)
                 pr = word(proc.nn,j)
                 alloc_procs = alloc_procs pr
                 end
              end
           if alloc_procs <> null then
              "Alloc f(PROC"nn") ds("alloc_procs")",
                 "shr reuse"

        /* ----------------------------------------------------- *
         * Now invoke ISRDDN to display allocations              *
         * ----------------------------------------------------- */
           Address ISPExec
           zedsmsg = null
           zedlmsg = "System and JES2 Proclib's",
                     "have been identified and allocated",
                     "using PROCMSTR for the Master JCL",
                     "Proclibs and PROCxx for the JES2",
                     "Proclibs.               ",
                     "Issue a L PROC to scroll to the",
                     "allocated DD's. Or issue ONLY PROC",
                     "to display only DD's with PROC in the",
                     "ddname."
           "Setmsg msg(isrz001)"
           "Select cmd(isrddn)"

          /* -------------------------- *
           * Now free all allocations   *
           * -------------------------- */
           Address TSO
           "Free f(procmstr)"
           do i = 1 to words(procs)
              "Free f(PROC"word(procs,i)
              end
           Exit 0

        /* ----------------------------------------------------- *
         * Fix up symbolics in the dsname                        *
         * ----------------------------------------------------- */
           Fix_Sym: procedure expose dsn syms sym. null
           do forever
              parse value dsn with left "&" symbol "." right
              syssym = mvsvar('symdef',symbol)
              if syssym <> null then do
                 dsn = left""syssym"".""right""
                 end
              else do
                 if wordpos(symbol,syms) = 0 then leave
                 wp   = wordpos(symbol,syms)
                 symb = word(syms,wp)
                 dsn  = left""sym.symb""right
                 end
              if pos("&",dsn) = 0 then leave
              end
           return
