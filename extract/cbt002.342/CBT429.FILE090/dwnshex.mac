DWNSHEX  TITLE 'PL/I SUBROUTINE TO CONVERT BIT STRINGS TO HEX CHARS.'
***********************************************************************
*                                                                     *
*      THIS SUBROUTINE MUST BE CALLED FROM THE PL/I ENVIRONMENT       *
*                                                                     *
***********************************************************************
* THIS SUBROUTINE TAKES A BIT STRING AS ITS PARAMETER AND RETURNS A
* VARYING LENGTH CHARACTER STRING AS A RESULT. THE INPUT STRING AND THE
* RESULT MAY EACH BE OF ANY LENGTH ALLOWED BY PL/I, BUT THE RESULT WILL
* ALWAYS BE ONE QUARTER THE LENGTH OF THE PARAMETER AND WILL OCCUPY
* TWICE AS MANY BYTES OF STORAGE.
*
* THIS SUBROUTINE SHOULD BE DECLARED AS FOLLOWS :-
*     DCL    DWNSHEX    ENTRY(BIT(*) ALIGNED) RETURNS(CHAR(???) VAR);
* WHERE ??? SHOULD BE REPLACED BY ANY NUMBER SUITABLY LARGE FOR THE
* PARTICULAR APPLICATION PROGRAM.
* TO CALL THIS SUBROUTINE (ACTUALLY A FUNCTION) ONE SHOULD CODE
* SOMETHING LIKE :-
*      HEX_CHARS = DWNSHEX(BIT_STRING);
*                 OR
*      HEX_CHARS = DWNSHEX(UNSPEC(ANY_VARIABLE));
*
* AUTHOR :- DAVID W NOON
*           APRIL 1990
* STARTOPT:
* COMPOPT: RENT,XREF(SHORT)
* PREPOPT: NOPREP
* LINKOPT: NCAL,MAP,LIST,RENT,REFR
* ENDOPT:
         EJECT
DWNSHEX1 START
DWNSHEX1 AMODE ANY
DWNSHEX1 RMODE ANY
DWNSHEX  DWNMPRLG DSASIZE=DSASIZE
         USING DSA,13                   MAKE OUR DSA ADDRESSABLE
         LM    4,5,0(1)                 LOAD PARM POINTERS
         L     6,0(0,4)                 LOAD BIT ADDRESS FROM LOCATOR
         L     7,0(0,5)                 LOAD CHAR ADDRESS FROM LOCATOR
         XC    0(2,7),0(7)              SET RESULT LENGTH TO ZERO
         LH    8,4(0,4)                 LOAD LENGTH OF BITS
         LR    9,8                      COPY LENGTH OF BITS
         N     9,THREE                  TAKE MODULO 4
         BNZ   SIGERROR                 NOT A MULTIPLE OF 4
         LR    9,8                      COPY LENGTH AGAIN
         SRA   9,2                      DIVIDE BY 4
         BZ    RETURN                   ZERO MEANS A NULL STRING
         CH    9,4(0,5)                 MAX. LENGTH OF RESULT
         BH    SIGERROR                 TOO LONG ?
         STH   9,0(0,7)                 PUT LENGTH IN PLACE
         LA    7,2(0,7)                 SKIP OVER LENGTH BYTES
         LA    14,1024                  CONVERT IN 128 BYTE CHUNKS
         CR    8,14                     HAVE WE 1024 OR FEWER BITS ?
         BNH   LASTBITS                 YES - NO NEED TO LOOP
         LR    15,14                    EXIT LOOP WHEN <= 1024 BIT LEFT
         LNR   14,14                    MAKE INCREMENT A DECREMENT
LOOP     MVC   FIRSTDIG(128),0(6)       MOVE FOR 1ST DIGIT CONVERSION
         MVC   SECNDDIG(128),0(6)       MOVE FOR 2ND DIGIT CONVERSION
         TR    FIRSTDIG(128),TRTAB1     CONVERT 128 1ST DIGITS
         TR    SECNDDIG(128),TRTAB2     CONVERT 128 2ND DIGITS
         MVC   0(256,7),TRTAB3          COPY TR TABLE TO RESULT
         TR    0(256,7),FIRSTDIG        CONVERT TO HEX
         LA    7,256(0,7)               INCREMENT OUTPUT ADDRESS
         LA    6,128(0,6)               INCREMENT INPUT ADDRESS
         BXH   8,14,LOOP                GO BACK FOR MORE
LASTBITS LA    9,7(0,8)                 COULD BE A SPARE HALF BYTE
         SRA   9,3                      CONVERT TO BYTES
         BCTR  9,0                      LESS ONE FOR M/C LENGTH
         LR    10,9                     COPY LENGTH
         ALR   10,10                    DOUBLE IT
         EX    9,MOVE1ST                COPY FOR 1ST DIGIT CONVERSION
         EX    9,MOVE2ND                COPY FOR 2ND DIGIT CONVERSION
         EX    9,TRAN1ST                CONVERT 1ST DIGITS
         EX    9,TRAN2ND                CONVERT 2ND DIGITS
         N     8,SEVEN                  CHECK IF WE HAVE AN EXTRA HALF
         BNZ   *+8                      NO - DON'T MOVE IT THEN
         LA    10,1(0,10)               WE'VE AN EXTRA BYTE NOW
         EX    10,MOVEIT                COPY TO RESULT
         EX    10,TRANSLAT              CONVERT X'FA' - X'FF'
RETURN   L     13,4(0,13)               RESTORE CALLER'S DSA
         LM    14,12,12(13)             RESTORE CALLER'S REGISTERS
         BR    14                       RETURN TO CALLER
         SPACE 2
* REMOTELY EXECUTED INSTRUCTIONS
MOVE1ST  MVC   FIRSTDIG(0),0(6)         <<< EXECUTED >>>
MOVE2ND  MVC   SECNDDIG(0),0(6)         <<< EXECUTED >>>
TRAN1ST  TR    FIRSTDIG(0),TRTAB1       <<< EXECUTED >>>
TRAN2ND  TR    SECNDDIG(0),TRTAB2       <<< EXECUTED >>>
MOVEIT   MVC   0(0,7),TRTAB3            <<< EXECUTED >>>
TRANSLAT TR    0(0,7),FIRSTDIG          <<< EXECUTED >>>
         EJECT
* CODE TO PERFORM SIGNAL ERROR.
SIGERROR PLISIG ERRFLAGS                SIGNAL ERROR
         B     RETURN                   WHO KNOWS ?
         SPACE 2
* FLAG BYTES FOR SIGNAL ERROR
ERRFLAGS PLIICB ERROR
         EJECT
* CONSTANTS
THREE    DC    F'3'
SEVEN    DC    F'7'
TRTAB1   DC    16C'0',16C'1',16C'2',16C'3',16C'4',16C'5',16C'6',16C'7'
         DC    16C'8',16C'9',16C'A',16C'B',16C'C',16C'D',16C'E',16C'F'
TRTAB2   DC    16C'0123456789ABCDEF'
TRTAB3   DC    128AL1((*-TRTAB3)/2,(*-TRTAB3+1)/2+127)
         SPACE 2
* WORKING STORAGE
DSA      DSECT
         DS    22F                      PL/I DSA
FIRSTDIG DS    CL128                    ) THESE MUST ...
SECNDDIG DS    CL128                    ) ... REMAIN CONTIGUOUS
         ORG
         DS    0D
DSASIZE  EQU   *-DSA
         END   DWNSHEX
