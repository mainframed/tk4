         TITLE 'ITAB MANIPULATION IEX20'
*STATUS: CHANGE LEVEL 000                                             *
*                                                                     *
*FUNCTION/OPERATION: EACH ITAB BLOCK IS SCANNED FOR DUPLICATE         *
*   IDENTIFIERS.                                                      *
*   RELATIVE DISPLACEMENTS IN DSA IS ALLOCATED FOR ALL IDENTIFIERS,   *
*   EXCEPT PROCEDURES, LABELS AND SWITCHES.                           *
*   THE ITAB BLOCKS ARE WRITTEN IN PROGRAM BLOCK NUMBER ORDER TO      *
*   SYSUT3.                                                           *
*   THE ITAB BLOCKS ARE PRINTED ON SYSPRINT IN PROGRAM BLOCK NUMBER   *
*   ORDER AND WITH THE IDENTIFIERS IN ALPHABETIC FORM WITHIN EACH     *
*   BLOCK, IF THE OPTION 'SOURCE' IS SPECIFIED.                       *
*   CREATES PBTAB2                                                    *
*                                                                     *
*ENTRY POINT:                                                         *
*        IEX20000 ITAB MANIPULATION     XCTL EP=IEX20                 *
*                                                                     *
*INPUT: THE ITAB BLOCKS ARE READ IN FROM SYSUT3.                      *
*                                                                     *
*OUTPUT: THE ITAB BLOCKS ARE WRITTEN TO SYSUT3 AND PRINTED ON SYSPRINT*
*   IF THE OPTION 'SOURCE' IS SPECIFIED.                              *
*                                                                     *
*EXTERNAL ROUTINES: THE PRINT ROUTINE IN IEX00 IS USED.               *
*                                                                     *
*EXITS-NORMAL: CONTROL IS GIVEN TO IEX21  XCTL EP=IEX21               *
*                                                                     *
*     -ERROR: N/A                                                     *
*                                                                     *
*TABLES/WORKAREA:                                                     *
*   ATAB  FOR ADDRESS IS OF THE ITAB RECORDS IN PROGRAM BLOCK NUMBER  *
*         ORDER                                                       *
*   TRTAB FOR TRANSLATION OC INTERNAL CHATACTERS TO EBCDIC CHARACTERS.*
*   TAB   FOR PRINTING OF HEXADECIMAL DIGITS.                         *
*   WORK  FOR BUILDING THE PRINT ENTRIES.                             *
*                                                                     *
*ATTRIBUTES: NONE.                                                    *
*                                                                     *
*NOTES: CHARACTER CODE DEPENDENCE.                                    *
*   THE OUTPUT ON SYSPRINT:                                           *
*   THE IDENTIFIER NAME IS TRANSLATED BY MEANS OF TRTAB, WHICH IS     *
*   A CHARACTER TABLE.                                                *
*   THE HEXADECIMAL PART IS TRANSLATED BY MEANS OF TAB.               *
*   THE REMAININ PARTS DEPEND ON THE INTERNAL REPRESENTATION OF THE   *
*   EXTERNAL CHARACTER SET WHICH IS EQUIVALENT TO THE ONE USED AT     *
*   ASSEMBLY TIME.                                                    *
*   THE OPERATION OF THE OTHER PARTS OF THE PHASE DOES NOT DEPEND     *
*   UPON A PARTICULAT INTERNAL REPRESENTATION OF THE EXTERNAL         *
*   CHARACTER SET                                                     *
IEX20000 START
* RELEASE 19 CHANGES
* 110600                                                         A28230
REG0     EQU   0                  CALCULATIONS
REGI     EQU   1                  PBN
REGZ     EQU   2                  CALCULATIONS
REGD     EQU   3                  PARAMETER FOR CONVERT ROUTINE
DP       EQU   3                  DOUBLE WORD POINTER
WP       EQU   4                  WORD POINTER
REGC     EQU   5                  KEEPS TRACK OF WHEN TO PRINT
HP       EQU   5                  HALF WORD POINTER
BP       EQU   6                  BYTE POINTER
RAID     EQU   7                  CURRENT IDENTIFIER
AIB      EQU   8                  CURRENT BLOCKHEAD
RAKOM    EQU   9                  SCANS FOR DUPLICATES
REGY     EQU   10
REGDIM   EQU   10                 ARRAY STORAGE ALLOCATIONS
REG11    EQU   11                 BASE REGISTER
REGB     EQU   12                 RETURN FROM CONVERT, PRINT ROUTINE
REGP     EQU   14                 PBN DURING PRINTING
REG15    EQU   15
         SPACE 2
*****   INITIALIZATION  ***********************************************
*              GETMAIN FOR ITAB AND ATAB
*              FIRST ENTRY IN ATAB IS MADE ZERO IF NO PBN 0
*              PRINTING OF HEADLINES IS INTITLIZED IF SOURCE SPECIFIED
*              C IS MADE 4 IF SHORT SPECIFIED OTHERWISE IT REMAINS 8
         SPACE 2
         BALR  REG11,0
         USING *,REG11
         USING WORKAREA,13
         LA    REG15,SLUT2        INTERUPT BEFORE GETMAIN
         ST    REG15,ERET
         L     REGI,ITAB20S       ITAB
         LA    REGI,1024(0,REGI)      ATAB
         LR    REG0,REGI
         GETMAIN R,LV=(0)              GET ITAB ATAB AREAS
         LA    REG15,SLUT
         ST    REG15,ERET         INTERUPT ADD. AFTER GETMAIN
         ST    REGI,AREALOC
         ST    REGI,AITAB         ITAB START LOCATION
         A     REGI,ITAB20S
         ST    REGI,ATABAD        ATAB START LOCATION
         SR    REGZ,REGZ
         ST    REGZ,KOPOOL
         ST    REGZ,SAVEPB
         TM    HCOMPMOD,PROC       Q. IS THERE A PB0
         BO    *+12
         LA    REG15,1             NO- PROGRAM BLOCK 1 IS FIRST BLOCK
         ST    REG15,SAVEPB
         MVC   0(4,REGI),KOPOOL
         ST    REGZ,SAVE                INITILIZE WITH ZEROS
         MVC   SAVE1(16),SAVE
         STC   REGZ,BITS1               INITILIZE SWITCHES
         LA    REGY,PBTAB2
         ST    REGY,APBTAB2              START ADDRESS OF PBTAB2
         TM    HCOMPMOD+1,NSRCE   Q. SOURCE SPECIFIED
         BO    INITIAL            NO
         MVI   LINCNT,X'7F'
         MVI   PAGEHD1,X'02'
         MVI   PAGEHD1+1,X'11'
         MVI   PAGEHEAD+2,X'40'
         MVC   PAGEHEAD+3(81),PAGEHEAD+2
         MVC   PAGEHEAD+39(16),HDING1
         MVI   PAGEHD2,X'01'
         MVI   PAGEHD2+1,X'09'
         MVC   PAGEHD2+2(90),HEAD1
         MVI   PAGEHD3,X'01'
         MVI   PAGEHD3+1,X'11'
         MVC   PAGEHD3+2(90),HEAD2
         BAL   REGB,PRINTITB            INITILIZE PRINTING FOR ITAB
INITIAL  SR    REGI,REGI
         TM    HCOMPMOD,LNG        LONG OR SHORT PRECISION
         BO    *+8                 LONG
         MVI   C+1,X'04'          SHORT   C=4
*****   SCAN FOR DUPLICATES   *****************************************
*                   READS IN A NEW BLOCK
*                   START ADDRESS IN AIB END ADDRESS IN AITAB
*                   COMPARES EACH IDENTIFIER WITH ALL IDENTIFIERS
*                        FOLLOWING IT IN THE BLOCK
*                   IF TWO EQUAL FOUND AND IF NOT FIRST ONE IS A
*                        FORMAL PARAMETER AND SECOND NOT E45 IS
*                        GENERATED
*                   WHEN ALL IDENTIFIERS IN THE BLOCK HAVE BEEN
*                        CHECK THE EXIT IS TO ALLOSTUR
READBLK  L     REGB,AITAB         START ADD. OF NEW BLOCK
         L     REGZ,UT3ADD        READ IN NEW BLOCK
         READ  ITABC,SF,(REGZ),(REGB),'S'
         CHECK ITABC
         SR    REGZ,REGZ
         IC    REGZ,10(0,REGB)    GET NEW PBN
         SLA   REGZ,2
         L     RAID,ATABAD
         ST    REGB,0(REGZ,RAID)        SAVE ADD. OF BLOCK IN ATAB
         LR    AIB,REGB
         MVC   LENCOUNT(2),0(REGB)      GET LENTH OF BLOCK
         AH    REGB,LENCOUNT
         ST    REGB,AITAB               SAVE END ADDRESS OF BLOCK
         LR    RAID,AIB
         TM    8(AIB),X'80'        Q. IS BLOCK TYPE PROC
         BZ    SCANNXT             NO
         LA    RAID,22(0,AIB)      YES- SKIP  CHECKING AGAINST
         B     SCANNXT+4           TYPE PROCEDURE NAME
SCANNXT  LA    RAID,11(0,RAID)
         C     RAID,AITAB               Q. ALL IDENTIFIERS CHECKED
         BE    ALLOSTOR                 YES- GO TO ALLOCATE STORAGE
         CLI   5(RAID),X'2B'       Q. FOR HEAD OR CONT. ENTRY
         BE    SCANNXT                  YES- SKIP CHECKING
         CLI   0(RAID),X'00'            Q. INVALID PROCEDURE NAME
         BE    SCANNXT                  YES- SKIP CHECKING
         LR    RAKOM,RAID
CHECKNXT LA    RAKOM,11(0,RAKOM)
         C     RAKOM,AITAB              Q. ALL IDENT. CHECKED AGAINST
         BE    SCANNXT                  THE ONE PROCESSED
         CLI   5(RAKOM),X'2B'        Q. FOR HEAD OR CONT ENTRY
         BE    CHECKNXT
         CLC   0(6,RAKOM),0(RAID)       COMPARE EACH IDENTIFIER AGAINST
*ALL FOLLOWING INDENTIFIERS IN THE      BLOCK
         BNE   CHECKNXT
         TM    7(RAID),X'30'            TWO EQUAL FOUND Q. PROCESSED
         BM    *+8                     ONE FORMAL PARAMETER
         B     E43                     NO
         TM    7(RAKOM),X'30'      Q. COMPARED ONE IS FORMAL PARAMETER
         BM    E43                     YES
         B     CHECKNXT                NO
         SPACE 2
*****   ALLOSTOR ******************************************************
*                   ALLOCATETS STORAGE FOR THE IDENTIFIERS
*                   FOR A TYPE PROC BLOCK ALLOCATION STARTS AT 32
*                        OTHERWISE AT 24
*                   NO BLOCK MAY GET MORE THAN 4K ALLOCATED
*                   IT IS ALSO CHECKED THAT THERE IS NO PROC, STRING
*                        OR SWITCH CALLED BY VALUE
*                        WHEN ALL DECLARATIONS IN THE BLOCK ARE
*                             PROCESSED DP-C WILL BE PUT IN PBTAB2
*                        IF THERE ARE MORE BLOCKS TO BE PROCESSED THE
*                             EXIT IS TO IDENTIFIER SCAN OTHERWISE
*                             TO WRITE ITAB
*                        FOUR POINTERS ARE USED DP DOUBLE WORD POINTER
*                                               WP WORD
*                                               HP HALF WORD
*                                               BP BOOLEAN
*                        DP IS INCREASED BY C WHICH IS 8 FOR LONG
*                                                      4 FOR SHORT
*                        FOR LONG PRESITION ALL 4 POINTERS ARE USED
*                        FOR SHORT WP IS NEVER USED, WILL CONTAIN 0
*                             ALL THE TIME
*                        REAL WILL BE ALLOCATED TO DP, 4 OR 8 BYTES
*                        INTEGER WILL GET DP OR WP. DP ALLWAYS IF SHORT
*                             WP IF LONG AND WP NOT ZERO
*                             OTHERWISE DP, IN WHITCH CASE WP WILL
*                             EQUAL DP+4 FOR THE NEXT INTEGER
*                        BOOLEAN WILL GET DP, WP, HP OR BP IF LONG
*                             DP, HP OR BP IF SHORT
*                        FIRST BOOLEAN FOUND WILL GET EITHER WP OR DP
*                                 HP IS THEN INITILIZED TO WP+2 OR DP+2
*                                 BP                       WP+1    DP+1
*                        SECOND BOOLEND WILL GET THE VALUE OF BP
*                             AND BP WILL BE 0
*                        THIRD BOOLEAN WILL GET HP AND HP WILL BE 0
*                                  BP=HP+1
*                        FORTH BOOLEAN WILL GET BP AND BP WILL BE 0
*                        THIS WILL THEN BE REPEATED FOR EVERY FOUR
*                             BOOLEAN IDENTIFIERS
*                        ALL FORMAL PARAMETERS WILL GET THE DP VALUE
*                             AND DP WILL BE INCREASED BY 8
*                        ARRAYS WILL GET DP VALUE AND DP WILL BE
*                             INCREASED BY 4(DIM+6)+X WHERE X IS 4
*                             WHEN LONG PRECITION AND DIM IS AN UNEVAN
*                             NUMBER, OTHERWISE X IS 0
*                        LABEL, SWITCH , PROCEDURE WILL NOT GET ANYTHIN
*                        EX. OF STORAGE ALLOCATION
*                        LONG           SHORT
*                        01234567       01234567  FP   FORMAL PARAMETER
*                        FP             FP        R    REAL
*                        FP             FP        INT  INTEGER
*                        R              R   INT   B    BOOLEAN
*                        INT INT        INT INT   NU   NOT USED SPACE
*                        INT BBB        BBB R
*                        R              INT R
*                        INT NU
*                        R
         SPACE 2
ALLOSTOR TM    8(AIB),X'80'   Q. IS THE BLOCK A TYPE PROCEDURE
         BZ    STARTALL-4     NO
         LA    DP,32          YES- SET DOUBLE WORD POINTER
         NI    8(AIB),X'7F'   CLEAR TYPE PROCEDURE INDICATION
         B     *+8
         LA    DP,24          SET DOUBLE WORD POINTER
STARTALL LA    WP,0                SET ALL POINTERS TO ZERO
         LA    HP,0
         LA    BP,0
         LR    RAID,AIB            GET FIRST VARIABLE
         B     GETNEXT
STORALLO AH    DP,C           INCREASE ALLOCATION POINTER
         C     DP,FOURK            Q. HAS FOURK BEEN ALLOCATED ALLREADY
         BH    E44
GETNEXT  LA    RAID,11(0,RAID)     GET NEXT VARIABLE
         STM   DP,BP,DPC           STORE ALL POINTERS
         C     RAID,AITAB          Q. ALL VARIABLES TAKEN CARE OF
         BE    LASTREC             YES
         CLI   5(RAID),X'2B'       Q. FOR HEADING OR CONTINUATION
         BE    GETNEXT
         CLI   6(RAID),X'91'       Q. ALL PURPOS IDENTIFIER
         BE    GETNEXT
         TM    7(RAID),X'30'       Q. FORMPARAM, DEK. VARIABL. OR CONST
         BM    FORMPARM
         BZ    CONST
         TM    7(RAID),X'03'       Q. BOOLEAN VARIABLE
         BO    BOOLEAN
         TM    HCOMPMOD,LNG      Q,SHORT PRESISION
         BZ    REAL                YES- ALLOCATE SAME FOR REAL AND
*                                  INTEGER
         TM    7(RAID),X'01'       Q. INTEGER OR REAL
         BO    INTEGER
REAL     MVC   9(2,RAID),DPC+2     MOVE IN DISPLACEMENT
         B     STORALLO
INTEGER  LTR   WP,WP               Q. EMTY HOLE LEFT FOR INTEGER
         BZ    *+18                NO
         MVC   9(2,RAID),WPC+2     YES- FILL THE HOLE AND MAKE
         LA    WP,0                WORDPOINTER= 0.
         B     GETNEXT
         MVC   9(2,RAID),DPC+2     MOVE IN DOUBLEWORD POINTER AND MAKE
         LA    WP,4(0,DP)          WORDPOINTER POINT TD EMPTY HOLE NEXT
         B     STORALLO            TO IT
BOOLEAN  LTR   BP,BP               Q SPACE LEFT NEXT TO PREVIOUS BOOL.
         BZ    *+18                NO
         MVC   9(2,RAID),BPC+2     YES- MOVE IN DISPLACEMENT AND MAKE
         LA    BP,0                BYTE  POINTER 0
         B     GETNEXT
         LTR   HP,HP               Q.SPACE LEFT NEXT TO 2 PREVIOUS BOOL
         BZ    TESTWP-8            NO
         MVC   9(2,RAID),HPC+2     YES- MOVE IN DISPLACEMENT AND MAKE
         LA    BP,1(0,HP)          MAKE BYTEPOINTER POINT TO NEXT
         LA    HP,0                HALFWORD POINTER 0
         B     GETNEXT             FREE BYTE
         TM    HCOMPMOD,LNG      Q, SHORT PRECISION
         BZ    TAKEDP              YES- DO NOT USE WP POINTER
TESTWP   LTR   WP,WP               Q. WPPOINTE FREE
         BZ    TAKEDP              NO- TAKE DP POINTER INSTEAP
         MVC   9(2,RAID),WPC+2     YES- USE WP AS DISPLACEMENT
         LA    BP,1(0,WP)          SET  HP AND BP TO FREE BYTES IN WORD
         LA    HP,2(0,WP)
         LA    WP,0                SET WP TO ZERO
         B     GETNEXT
TAKEDP   MVC   9(2,RAID),DPC+2     USE DP AS DISPLACEMENT
         LA    BP,1(0,DP)          SET WP, HP, BP TO FREE BYTES WITHIN
         LA    HP,2(0,DP)          THE DOUBLE WORD
         LA    WP,4(0,DP)
         B     STORALLO
CONST    TM    7(RAID),X'04'       FOR LABEL, STRING, PROCEDURE DO NOT
         BZ    GETNEXT
         TM    7(RAID),X'08'       ALLOCATE ANY STORAGE
         BO    GETNEXT
         SR    REGDIM,REGDIM
         IC    REGDIM,9(RAID)
         SRA   REGDIM,4            FOR  AN ARRAY
         LA    REGDIM,6(0,REGDIM)      STORAGE NEEDED IS 4(DIM+6)+X
         SLA   REGDIM,2
         OC    9(2,RAID),DPC+2    OR IN THE DISP. TO SAVE DIMENSIONS
         TM    HCOMPMOD,LNG        X IS 4 IF LONG PRECITION AND DIM IS
         BZ    *+16
         TM    9(RAID),X'10'       AN UNEVAN NUMBER
         BZ    *+8                 INCREASE IF NEEDED TO GET
         LA    REGDIM,4(0,REGDIM)       ON DOUBLE WORD BOUNDARY
         LA    DP,0(REGDIM,DP)
         B     STORALLO+4
FORMPARM TM    7(RAID),X'03'       Q. TYPE PARAMETER
         BZ    NOTTYPE             NO
FORMPALL MVC   9(2,RAID),DPC+2     MOVE IN DISPLACEMENT
         LA    DP,8(0,DP)
         B     STORALLO+4
NOTTYPE  TM    7(RAID),X'10'       Q. CALL BY NAME
         BO    FORMPALL            YES
         TM    7(RAID),X'03'       NO- CHECK IF VALUE CALL CORRECT
         BZ    *+8
         B     FORMPALL
         CLI   7(RAID),X'28'       Q. LABLE CALLED BY VALUE
         BE    FORMPALL
         B     E45       PROC SWITCH OR STRING CALLED BY VALUE
LASTREC  SR    REGZ,REGZ           CONSTRUCT ENTRY OF PBTAB2
       IC    REGZ,10(0,AIB)       GET PBN
         SLA   REGZ,1
         L     REGP,APBTAB2
         LA    REGP,0(REGZ,REGP)
         SH    DP,C               GET LAST BYTE USED
         STH   DP,0(0,REGP)
         L     REGI,SAVEPB
         CH    REGI,PBN       Q.ALL ITAB-REC WRITTEN OUT
         LA    REGI,1(0,REGI)
         ST    REGI,SAVEPB
         BNE   READBLK            NO
         SPACE 2
*****   WRITITAB ******************************************************
*                   WRITES THE ITABRECORD TO SYSUT3 IN PROGRAM BLOCK
*                        NUMBER ORDER
*                   THE ADDRESS TO WHERE THE BLOCK IS GOING TO BE
*                        WRITTEN IS PICKED UP FROM ATAB
*                   IN EACH BLOCK THE LENGTH OF THE NEXT BLOCK IS
*                        INSERTED
         SPACE 2
WRITITAB L     REGB,ATABAD        START OF ADDRESS TABLE
         L     REGY,UT3ADD        DCB ADDRESS
         CLOSE ((REGY),REREAD),TYPE=T   GET  TO START OF SYSUT3
         SR    REGZ,REGZ
         TM    HCOMPMOD,PROC       Q. IS THERE A PB0
         BZ    ITLP2              NO
ITABLOOP L     REGY,0(0,REGB)     GET ADDRESS OF BLOCK
         L     RAID,UT3ADD        DCB ADDRESS
         L     REGC,4(0,REGB)     GET ADDRESS OF NEXT BLOCK
         CH    REGZ,PBN            Q. LAST BLOCK
         BE    *+10               YES
         MVC   2(2,REGY),0(REGC)      INSERT LENGTH OF NEXT BLOCK
         MVC   LENCOUNT(2),0(REGY)    GET LENGTH OF CURRENT BLOCK
         LH    REG15,LENCOUNT
         WRITE PRCH4,SF,(RAID),(REGY),(REG15)
         CHECK PRCH4
ITLP2    LA    REGB,4(0,REGB)       GET ADDRESS OF NEXT BLOCK
         CH    REGZ,PBN       Q.ALL ITAB-REC WRITTEN OUT
         LA    REGZ,1(0,REGZ)
         BNE   ITABLOOP            NO
         B     ITABPRNT           YES
         SPACE 2
*****   E43      ****************************************************
*                   GENERATES ERROR MESSAGE 45
*                   RETURNS TO SCANNING FOR DUPLICATES
         SPACE 2
E43      BAL   REG15,ERRNAME
         MVI   1(REGY),X'2D'       E45
         B     SCANNXT
         SPACE 2
*****   E45      ******************************************************
*                   GENERATER ERROR MESSAGE 47
*                   RETURNS TO FORMPALL AS IF VAR. WAS CORRECT
         SPACE 2
E45      BAL   REG15,ERRNAME
         MVI   1(REGY),X'2F'       E47
         B     FORMPALL
         SPACE 2
*****   E44      ******************************************************
*                   GENERATES ERROR MESSAGE 214
*                   RETURNS TO LASTREC TO TAKE NEXT BLOCK, IF ANY
*                                                                     *
*                                                                     *
E44      L     REGD,SAVEPB
         BAL   REGB,CONVERT        CONVERT PBN
         L     REGY,NEXTERR
         LA    REGB,7(0,REGY)        Q. SPACE LEFT IN ERRORPOOL
         C     REGB,ENDPOOL
         BH    E0
         ST    REGB,NEXTERR
         MVI   0(REGY),X'87'       MOVE LENGTH AND BLANK SC INDICATOR
         MVI   1(REGB),X'D6'            E214
         MVC   4(3,REGY),SAVE+1          PBN
         B     LASTREC
         SPACE 2
*****   ERRNAME  *****
*                   FINDS THE LENGTH OF THE VAR. IN ERROR CHECKS FOR
*                        ERRPOOL OVERFLOW, MOVES IN THE NAME OF THE
*                        VAR. AND LENGTH OF MESSAGE
*                        RETURNS TO CALLING PROGRAM, E43 OR E44
         SPACE 2
ERRNAME  LA    REGB,5
         STC   REGB,*+7
         CLI   0(RAID),X'00'      FIND LENGTH OF NAME
         BNE   *+8
         BCT   REGB,ERRNAME+4
         L     RAKOM,NEXTERR
         LA    RAKOM,5(REGB,RAKOM)
         C     RAKOM,ENDPOOL      CHECK SPACE IN ERRORPOOL
         BH    E0
         L     REGY,NEXTERR
         ST    RAKOM,NEXTERR
         EX    REGB,MOVE          INSERT NAME IN ERROR PATTERN
         LA    REGB,5(0,REGB)
         STC   REGB,0(REGY)
         OI    0(REGY),X'80'       BLANK SC INDICATOR
         BCR   15,REG15
         CNOP  0,4
MOVE     MVC   4(1,REGY),0(RAID)
E0       LA    REGB,NEXTERR
         MVI   0(REGB),X'02'
         MVI   1(REGB),X'D4'            E212
         ST    REGB,NEXTERR
         B     SLUT
         SPACE 2
         SPACE 2
*****   ITABPRNT ******************************************************
*                   PRINTS ON SYSPRINT, IF SOURCE SPECIFIED, ALL VAR.
*                   THE BLOCKS IN PBN NUMBER ORDER AND WITH THE VAR
*                        SORTED WITHIN EACH BLOCK
*                   REGC KEEPS TRACK OF WHEN PRINTING IS NEEDED, THE
*                        INFORMATION ABOUT EACH VAR. IS BUILT UP IN
*                        WORK AND THEN TRANSFERD TO PRINTAREA. WHEN
*                        3 VAR. HAVE BEEN PLACED IN THE PRINTAREA THE
*                        LINES IS PRINTED
*                   THE ADDRESS TO THE BLOCK IS TAKEN FROM ATAB
*                   THE LENGTH IS TAKEN FROM THE FIRST 2 BYTES IN THE
*                        BLOCK.
*                   THE SURROUNDING PBN FROM PBTAB1
*                   THE STARTING SC COUNTER FOR THE BLOCK FROM BYTE 6
*                        AND 7 IN THE BLOCK
*                   IF THE BLOCK DOES NOT CONTAIN ANY VAR. ONLY THE
*                        PBN AND SURROUNDING PBN ARE PRINTED
*                   ALL HEADENTRIES, FOR AND CONTLINES ARE SKIPPED
*                   EACH NEW BLOCK IS PRECEEDED BY A BLANK LINE
*                   START ADDRESS OF THE BLOCK IS IN AIB
*                   END ADDRESS OF THE BLOCK IS IN AITAB, THIS ADD.
*                        WILL BE AIB+11 WHEN ALL VAR. PROCESSED
         SPACE 2
ITABPRNT TM    HCOMPMOD+1,NSRCE     Q. SOURCE SPECIFIED
         BO    SLUT               NO
         SR    REGP,REGP           CLEAR REGISTER
         TM    HCOMPMOD,PROC       IS THERE A PB0
         BO    GETPB+4             YES- PROCESS PB0, REGP=0
GETPB    LA    REGP,1(0,REGP)      INCREASE PBN
         LR    REGB,REGP
         SLA   REGB,2
         L     AIB,ATABAD               GET ADDRESS OF NEW BLOCK
         L     AIB,0(REGB,AIB)          VIA ATAB+ 4 TIMES PBN
         MVC   LENCOUNT(2),0(AIB)       GET LENGTH OF THE BLOCK
         LH    REGB,LENCOUNT
         LA    REGB,0(REGB,AIB)         GET END OF BLOCK
         ST    REGB,AITAB          STORE END OF IT
         BAL   REGB,PRINTITB       PRINT A BLANK LINE
         LR    REGD,REGP           CONVERT PBN
         BAL   REGB,CONVERT
         MVC   0(3,REGI),SAVE+1    NEW PBN
         IC    REGD,PBTAB1(REGP)   CONVERT SURROUNDING PBN
         BAL   REGB,CONVERT
         MVC   10(3,REGI),SAVE+1   SURROUNDING PBN
         MVC   SCSAVE(2),6(AIB)    CONVERT SC COUNTER TO DECIMAL
         LH    REGB,SCSAVE
         CVD   REGB,DOUBLE    STARTING SC OF BLOCK IS INSERTED
         UNPK  4(5,REGI),DOUBLE(8)
         MVZ   8(1,REGI),7(REGI)
         CLC   LENCOUNT(2),ELEVEN    Q. EMPTY BLOCK
         BNE   *+12               NO
         BAL   REGB,PRINTITB      FOR AN EMPTY BLOCK PRINT
         B     ENDBLOCK            ONLY THE BLOCK NUMBERS
         SR    REGC,REGC
         SPACE 2
*****   GETNVAR  *****
*                   LOOPS THROUGH BLOCK TO GET THE CURRENT LOWEST
*                        VAR.
*                   EXITS TO ENDBLOCK WHEN ALL VAR. IN THE BLOCK HAVE
*                        BEEN PROCESSED, OTHERWISE TO TESTVAR
         SPACE 2
GETNVAR  LA    RAID,11(0,AIB)           GET FIRST VAR. AFTER HEADING
         LR    REGY,RAID
         C     RAID,AITAB               Q. ALL VAR. PROCESSED
         BE    ENDBLOCK                 YES
         CLI   5(RAID),X'2B'            Q. HEAD OR CONTINUATION LINE
         BE    ENDVAR2
TESTNXT  LA    REGY,11(0,REGY)          GET NEXT VAR.
         C     REGY,AITAB               Q. ALL VAR. COMPARED
         BE    TESTVAR
         CLI   5(REGY),X'2B'            Q. HEAD OR CONTINUATION LINE
         BE    TESTNXT                  YES- SKIP THAT LINE
         CLC   0(6,RAID),0(REGY)        Q. COMPARE CURRENT LOWEST - NEW
         BL    TESTNXT                  CURRENT LOWEST STILL LOW
         LR    RAID,REGY                NO- SHIFT RAID TO NEW
         B     TESTNXT
         SPACE 2
*****   TESTVAR  *****
*                   CHECKS THE INTERNAL NAME TO FIND TYPE AND MOVES
*                        CHARACTERISTICS TO WORKAREA
         SPACE 2
TESTVAR  TM    6(RAID),X'91'      Q. ALL PURPOSE IDENTIFIER
         BO    ENDVAR             YES
         TM    7(RAID),X'03'       Q. TYPE
         BO    BOL                 TYPE=BOOLEAN
         BZ    BOL+4               NOT TYPE
         TM    7(RAID),X'01'      Q.INTEGER OR REAL
         BZ    *+12
         MVI   WORK+7,C'I'         INTEGER
         B     BOL+4
         MVI   WORK+7,C'R'         REAL
         B     BOL+4
BOL      MVI   WORK+7,C'B'         BOOLEAN
         TM    7(RAID),X'0C'
         BZ    TESTPROC
         BO    SWITCH
         TM    7(RAID),X'08'       Q. ARRAY OR LABEL
         BZ    ARRAY
         MVI   WORK+8,C'L'         LABEL
TESTPROC TM    7(RAID),X'C0'
         BO    PROCEDUR
         BZ    FORMAL
         TM    7(RAID),X'40'
         BZ    FORMAL
         MVI   WORK+11,C'C'        CODE PROCEDURE
         B     PROCEDUR
FORMAL   TM    7(RAID),X'30'       Q. SPECIFIED IDENTIFIER
         BO    ENDVAR
         BZ    ENDVAR
         NI    BITS1,PROCOFF       RESET PROCEDURE BIT
         TM    6(RAID),X'01'
         BZ    *+8
         MVI   WORK+8,C'T'         STRING
         TM    7(RAID),X'10'       Q. NAME OR VALUE CALL
         BZ    *+12
         MVI   WORK+10,C'N'        NAME
         B     ENDVAR
         MVI   WORK+10,C'V'        VALUE
         B     ENDVAR
SWITCH   MVI   WORK+8,C'S'             SWITCH                    A28230
         B     CONVERT2            CONVERT NR. OF COMPONENTS
PROCEDUR MVI   WORK+9,C'P'         PROCEDURE
         OI    BITS1,PROCBIT       SET PROCEDURE BIT
         B     CONVERT2            CONVERT NR. OF PARAMETERS
ARRAY    MVI   WORK+9,C'A'         ARRAY
         SPACE 2
*****   CONVERT2 *****
*                   ENTERED FOR PROCEDURE, ARRAY AND SWITCH CONVERTS
*                        THE NUMBER OF PARAMETERS, DIMENSIONS OR
*                        COMPONENTS TO DECIMAL FORM AND PUTS IT IN
*                        WORK
*                   FOR ARRAY OR SWITCH THE COUNTER IS FIRST
*                        INCREASED BY ONE TO GET THE REAL VALUE
         SPACE 2
CONVERT2 TM    7(RAID),X'30'
         BM    FORMAL+12
         IC    REGD,9(0,RAID)
         SRA   REGD,4              SWITCH OR PROCEDURE
         TM    BITS1,PROCBIT     TEST IF PROC PARAMETERS
         BO    *+8                 YES
         LA    REGD,1(0,REGD)      NO- INCREASE DIM COUNTER
         NI    BITS1,PROCOFF       TO GIVE CORRECT VALUE
         BAL   REGB,CONVERT             CONVERT IT TO DECIMAL
         MVC   WORK+13(2),SAVE+2   AND MOVE IT OUT
         B     FORMAL
         SPACE 2
*****   CONVERT  *****
*                   CONVERTS FROM HEXADECIMAL TO DECIMAL
*                   USED FOR LN, DISP AND PBN TO BE WRITEN OUT
         SPACE 2
CONVERT  CVD   REGD,DOUBLE         CONVERT TO DECIMAL
         UNPK  SAVE(4),DOUBLE+5(3)      UNPACK AND
         MVZ   SAVE+3(1),SAVE+2         CLEAR SIGN
         BCR   15,REGB                  RETURN
         SPACE 2
*****   PRINTITB *****
*                   PRINTS A LINE, SAVES NEW PRINTAREA ADDRESS, RESETS
*                        REGC, RETURNS
         SPACE 2
PRINTITB STM   14,15,SAVE1
         L     15,PRTRTADD         PRINT A RECORD
         BALR  14,15
         ST    REGI,APRNTAR        SAVE ADD. OF NEXT PRINT AREA
         LM    14,15,SAVE1
         SR    REGC,REGC           RESET REGC
         BCR   15,REGB             RETURN
         SPACE 2
*****   ENDVAR   *****
*                   MOVES EXTERNAL NAME TO WORK, TRANSLATES IT
*                   CONVERTS LN OR DISP AND MOVES THAT TO WORK
*                   MOVES WORK TO CURRENT PRINTAREA WITH HELP OF AN
*                        EXECUTET MOVE
*                   INCREASES REGC AND CHECKS IF ONE LINE HAS BEEN
*                        FILLED UP. IN THAT CASE - PRINTS THAT LINE
*                   SHIFTS AWAY THE NOW PROCESSED VAR. AND STORES THE
*                        NEW ENDING ADDRESS OF THE BLOCK IN AITAB
*                   RETURNS TO PROCESS NEXT VAR.
         SPACE 2
ENDVAR   MVC   WORK(6),0(RAID)     MOVE EXTERNAL NAME
         TR    WORK(6),TRTAB
         MVC   SAVE2+1(1),10(RAID) MOVE
         MVN   SAVE2(1),9(RAID)    AND
         UNPK  SAVE3(5),SAVE2(3)        CONVERT DISP. OR LABELNUMBER
         TR    SAVE3+1(3),TAB-X'EF'     TO BE WRITTEN OUT
         MVC   WORK+16(3),SAVE3+1
         EX    REG0,MOVEVAR(REGC)  MOVE OUT WORK TO PRINTAREA
         MVI   WORK,C' '          CLEAR WORKAREA
         MVC   WORK+1(29),WORK
         LA    REGC,8(0,REGC)
         C     REGC,TWOFOUR        Q. TIME TO PRINT
         BNE   *+8                 NO
         BAL   REGB,PRINTITB       YES- CALL FOR PRINTROUTINE
ENDVAR2  L     REGY,AITAB
         LA    REGB,12(0,RAID)          LEN. TO MOVE ITAB UP TO
         C     REGB,AITAB               Q. NOTHING TO MOVE
         BNH   *+12
         ST    RAID,AITAB          STOREADD. OF CURRENT AS END ADD.
         B     GETNVAR
         SR    REGY,REGB           CALCULATE NEW END ADDRESS OF THE
         LA    REGB,1(REGY,RAID)   BLOCKAND STORE IT IN AITAB
         ST    REGB,AITAB
COMPARE  C     REGY,D256
         BNH   EX1
         MVC   0(256,RAID),11(RAID)     TRANSFER A 256 BYTE SECTION
         LA    RAID,256(0,RAID)         OF THE BLOCK AT THE TIME
         S     REGY,D256
         B     COMPARE
EX1      EX    REGY,MOVEITAB            MOVE LAST PARTIAL SECTION
         B     GETNVAR
         SPACE 2
*****   ENDBLOCK *****
*                   PRINTS LAST LINE OF BLOCK, IF NEEDED
*                   EXITS TO GETPB IF ANY BLOCK LEFT TO BE PROCESSED
*                   OTHERWISE A FREEMAIN IS DONE AND IEX21 IS LINKED
*                        TO
         SPACE 2
ENDBLOCK C     REGC,ZERO           Q VAR LEFT TO BE WRITTEN OUT
         BE    *+8
         BAL   REGB,PRINTITB
         LA    REGB,1(0,REGP)
         CH    REGB,PBN            Q ALL BLOCKS PROCESSED
         BNH   GETPB               NO- TAKE NEXT
SLUT     L     REGI,ITAB20S        ITAB AREA
         LA    REGI,1024(0,REGI)   AND ATAB AREA ARE MADE
         LR    REG0,REGI           FREEMAIN FOR
         L     REGI,AREALOC
         FREEMAIN R,LV=(0),A=(1)
SLUT2    XCTL  EP=IEX21000
HDING1   DC    C'IDENTIFIER TABLE'
HEAD1    DC    CL90'PBN SC    PBN      NAME   TYPE  DM DSP       NAME  X
                TYPE  DM DSP       NAME   TYPE  DM DSP'
HEAD2    DC    CL90'          SURR                  PR LN              X
                      PR LN                     PR LN '
SCSAVE   DS    H                  SAVE SEMICOLON COUNTER
D256     DC    F'256'             USED BY MOVE LOOP
SAVE2    DC    C'000'             USED FOR CONVERTION
SAVE3    DC    5X'EF'
DOUBLE   DC    D'0'
MOVEITAB MVC   0(1,RAID),11(RAID)     USED BY ENDVAR
WORK     DC    30C' '        USED TO BUILD PRINT REC.
FOURK    DC    F'4095'            STORAGE ALLOCATION MAXIMUM
MOVEVAR  MVC   19(27,REGI),WORK     USED TO SORT REC. TO BE PRINTED
         CNOP  0,4
         MVC   45(27,REGI),WORK
         CNOP  0,4
         MVC   71(19,REGI),WORK
TWOFOUR  DC    F'24'              USED BY ENDVAR
C        DC    H'8'      INCREASE VALUE DURING STORAGE ALLOCATION
*                            USED TO TRANSLATE FROM INTERNAL
*                            TO EBCDIC CODE
TRTAB    DS    0CL90
         DC    C' '
         DC    47C')'
         DC    C'0123456789'
         DC    6C')'
         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
TAB      DC    C' 0123456789ABCDEF'    FOR PRINTABLE HEXADECIMAL
ELEVEN   DC    X'000B'
WORKAREA DSECT
         COPY  WORKAREA
KOPOOL   DS    F                  ZERO CONSTANT
ZERO     EQU   KOPOOL
SAVE     DS    F
SAVE1    DS    4F
APBTAB2  DS    A                  START ADD. OF PBTAB2
ATABAD   DS    A                  START ADD. OF ATAB
DPC      DS    F                  SAVE AREAS FOR DP, WP, HP AND BP
WPC      DS    F
HPC      DS    F
BPC      DS    F
AITAB    DS    F                  ITAB ADDRESS
APRNTAR  DS    A                  ADDRESS OF CURRENT PRINTAREA
AREALOC  DS    A                  ADDRESS OF GETMAIN POOL
SAVEPB   DS    F                  COUNTS NR. OF BLOCKS READ
LENCOUNT DS    H                  SAVES LENGTH OF BLOCK
BITS1    DS    C
PROCBIT  EQU   X'02'              PROCEDURE IS PROCESSED
PROCOFF  EQU   X'FD'
         END   IEX20000
