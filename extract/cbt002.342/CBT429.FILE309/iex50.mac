 TITLE 'IEX50, COMPILATION PHASE'
*                                                                     *
*STATUS  CHANGE LEVEL 000.                                            *
*                                                                     *
*FUNCTION/OPERATION  THIS MODULE PERFORMS THE REAL TRANSLATION OF THE *
*   SOURCE PROGRAM INTO SYSTEM/360 INSTRUCTIONS. THE SOURCE PROGRAM   *
*   IS AT MODIFICATION LEVEL 2 AND CONSISTS OF A SEQUENCE OF ONE-BYTE *
*   OPERATORS AND FIVE-BYTE OPERANDS, WHICH IS SCANNED SEQUENTIALLY.  *
*   THE STATUS OF RECOGNITION OF THE SOURCE PROGRAM IS DESCRIBED BY   *
*   1. A SEQUENCE OF CONTEXTS (SEE BELOW)                             *
*   2. A SEQUENCE OF STACKED OPERATORS (THE OPERATOR STACK)           *
*   THE ACTION OF THE COMPILER IS DETERMINED BY THE OPERATOR PAIR     *
*   STACK-SOURCE OPERATOR AND THE CURRENT CONTEXT. THE OPERATOR PAIR  *
*   DETERMINES AN ELEMENT IN A DECISION MATRIX, WHICH IS DETERMINED   *
*   BY THE CONTEXT. THE MATRIXELEMENTS REPRESENT ADDRESSES OF THE     *
*   COMPILER PROGRAMS, WHICH PERFORM THE ACTIONS REQUESTED BY ALL     *
*   POSSIBLE OPERATOR PAIRS.                                          *
*   THERE ARE THREE CONTEXTS, PROGRAM, STATEMENT, AND EXPRESSION CON- *
*   TEXT, AND THE CURRENT CONTEXT IS INDICATED BY A REGISTER. SWITCH- *
*   ING FROM ONE CONTEXT TO ANOTHER IS IN MOST CASES DETERMINED BY    *
*   THE STACK-SOURCE OPERATOR PAIR, I.E., THE COMPILER PROGRAM ACTI-  *
*   VATED JUST PERFORMS THE CHANGE OF CONTEXT, BUT IN A FEW CASES THE *
*   SOURCE OPERATOR ALONE DETERMINES THE NEW CONTEXT. IN THIS LATTER  *
*   CASE THE OPERATOR IS STACKED TOGETHER WITH A CONTEXT OPERATOR,    *
*   INDICATING THE PRECEDING CONTEXT.                                 *
*                                                                     *
*   BESIDES THE COMPILER PROGRAMS THERE ARE OTHER ROUTINES PROVIDING  *
*   DIFFERENT SERVICES. THE MOST IMPORTANT ARE (THOSE MARKED WITH *   *
*   ARE USED AS SUBROUTINES BY THE COMPILER PROGRAMS)                 *
*   SNOT       SCAN TO NEXT OPERATOR IN SOURCE PROGRAM                *
*   COMP       CHOOSE COMPILER PROGRAM AND BRANCH                     *
*   JBUFFER    READ A NEW SOURCE PROGRAM RECORD                       *
*   NXTOPT    *GET NEXT ENTRY OF OPTAB                                *
*   SERR      *GENERATE AN ERROR PATTERN                              *
*   CPEND      NORMAL TERMINATION                                     *
*   CPERRI     ABNORMAL TERMINATION                                   *
*   GENERATE  *GENERATE TXT AND RLD-RECORDS                           *
*                                                                     *
*   A COMPILER PROGRAM IS ALWAYS FOLLOWED BY SNOT OR COMP OR A BRANCH *
*   TO ANOTHER COMPILER PROGRAM.                                      *
*                                                                     *
*   THE MODULE CONSISTS OF SEVEN CONTROL SECTIONS                     *
*   IEX50000 - INITIALIZATION AND SUBROUTINES                         *
*   IEX50001 - DECICION MATRIXES                                      *
*   IEX50002 - COMPILER PROGRAMS HANDLING FOR-STATEMENTS AND SUBSCRIPT*
*              OPTIMIZATION                                           *
*   IEX50003 - COMPILER PROGRAMS HANDLING BEGIN AND END OF COMPOUND   *
*              STATEMENTS AND BLOCKS, PROCEDURE DECLARATIONS, ARRAY   *
*              DECLARATIONS, SWITCH DECLARATIONS, GOTO STATEMENTS,    *
*              SUBSCRIPTED VARIABLES AND SWITCH DESIGNATORS,          *
*              SEMICOLON COUNTER.                                     *
*   IEX50004 - COMPILER PROGRAMS HANDLING ASSIGNMENTS,                *
*              PROCEDURE CALLS, STANDARD PROCEDURE CALLS.             *
*   IEX50005 - COMPILER PROGRAMS HANDLING ERRONEOUS CASES, BOOLEAN    *
*              OPERATIONS, ARITHMETIC MINUS, IF, THEN, ELSE.          *
*   IEX50006 - COMPILER PROGRAM HANDLING ARITHMETICAL OPERATIONS.     *
*                                                                     *
*ENTRY POINT                                                          *
*        IEX50000 - COMPILATION PHASE   XCTL EP=IEX50.                *
*   THE MODULE IS ENTERED FROM IEX40                                  *
*                                                                     *
*INPUT  THE SOURCE PROGRAM IS READ FROM SYSUT2.                       *
*   OPTAB IS READ FROM SYSUT3.                                        *
*                                                                     *
*OUTPUT  THE MAIN PART OF THE OBJECT MODULE IS PUT OUT ON SYSLIN AND/ *
*   OR SYSPUNCH IF THE OPTIONS 'LOAD' AND/OR 'DECK' ARE SPECIFIED.    *
*                                                                     *
*EXTERNAL ROUTINES  N/A                                               *
*                                                                     *
*EXIT-NORMAL  IF NO TERMINATING ERROR HAS OCCURRED, CONTROL IS GIVEN  *
*   TO THE TERMINATING MODULE BY MEANS OF  XCTL EP=IEX51000.          *
*                                                                     *
*EXIT-ERROR  IF A TERMINATING ERROR HAS OCCURED, CONTROL IS GIVEN TO  *
*   THE TERMINATING MODULE BY MEANS OF  XCTL EP=IEX51ER1.             *
*                                                                     *
*TABLES/WORKAREAS                                                     *
*   SCPTAB   - COMPILER PROGRAM ADDRESS TABLE USED BY ROUTINE COMP    *
*   TXTT     - INFORMATION FOR TXT-RECORDS USED BY ROUTINE GENERATE   *
*   RLDT     - INFORMATION FOR RLD-RECORDS USED BY ROUTINE GENERATE   *
*   DECAREA  - DECISION MATRIXES USED BY ROUTINE COMP                 *
*                                                                     *
*   THE PART OF COMMON WORKAREA STARTING AT DCBUT1 IS INITIALIZED BY  *
*   THE PRECEDING LOAD MODULE AND USED BY THIS AND THE NEXT LOAD      *
*   MODULE.                                                           *
*                                                                     *
*ATTRIBUTES  NONE.                                                    *
*                                                                     *
*CHARACTER CODE DEPENDENCE  THE OPERATION OF THE ROUTINE GENERATE     *
*   DEPENDS UPON AN INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER *
*   SET WHICH IS EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.         *
*                                                                     *
*   THIS MODULE IS ONLY INTENDED TO BE EXECUTED IN CONNECTION         *
*   WITH THE OTHER MODULES OF THE ALGOL COMPILER. IN PARTICULAR IT    *
*   REQUIRES THE COMMON WORKAREA.                                     *
*
         EJECT
IEX50000 CSECT
* RELEASE 19 CHANGES
* 090620-090740                                                  A28233
*C090200,090250                                                  A32978
         SPACE
         SPACE
*        COMPILETIME REGISTER DEFINITIONS
         SPACE
R0       EQU   0                   *
R1       EQU   1                   *
R2       EQU   2                   *
R3       EQU   3                   *   VARIABLE USE
R4       EQU   4                   *
WRK      EQU   4                   *
SBR      EQU   5                   ADDRESSES SUBROUTINE POOL
PRPOINT  EQU   6                   CONTAINS REL ADDRESS IN OBJ PROGRAM
P        EQU   7                   CONTAINS DISP IN OBJECT TIME STACK
SOURCE   EQU   8                   SOURCE PROGRAM POINTER
OPDK     EQU   9                   OPERAND STACK POINTER
OPTK     EQU   10                  OPERATOR STACK POINTER
RCCT     EQU   11                  INDICATES CURRENT CONTEXT
CCT      EQU   11                             - '' -
BASE     EQU   12                  CONTAINS BASE ADDR OF COMP PROGRAMS
WAREG    EQU   13                  ADDRESSES COMMON WORKAREA
GREG     EQU   14                   ARRAY IDENTIFIER COUNT
R14      EQU   14                  VARIABLE
R15      EQU   15                           USE
         SPACE
*        OBJECTTIME REGISTER DEFINITIONS
         SPACE
FPR0     EQU   0                   *
FPR2     EQU   2                   *
GPRA     EQU   3                   *   VARIABLE USE
GPRB     EQU   5                   *
GPRC     EQU   6                   *
ADR      EQU   8                   FOR TRANSFER OF ADDRESSES
STH      EQU   14                  FOR TEMPORARY USE
CDSA     EQU   10                  ADDRESSES CURRENT DSA
GDSA     EQU   9                   ADDRESSES GLOBAL DSA
PBT      EQU   11                  ADDRESSES PROGRAM BLOCK TABLE
LAT      EQU   12                  ADDRESSES LABEL ADDRESS TABLE
FSA      EQU   13                  ADDRESSES FIXED STORAGE AREA
ENTRY    EQU   15                  ENTRY POINT OF LIBRARY SUBROUTINES
BRR      EQU   15                  LINK REGISTER
         EJECT
*
* INITIALIZATION    THIS ROUTINE PERFORMS THE REMAINING INITIALIZATION,
*                   THE MAIN PART IS MADE IN IEX40001
*
         USING *,R15                    USE ENTRY POINT REG AS BASE
         LA    SBR,SNOT                 LOAD BASE REG
         USING SNOT,SBR                               FOR SNOT
         SPACE
         LA    WRK,CPERR1               PROVIDE DIRECTORY
         ST    WRK,ERET(WAREG)          RETURN ADDRESS
         SPACE
         L     RCCT,DECAADD(SBR)        LOAD ADDR OF CCT
         LA    WRK,JB3                  PROVIDE
         ST    WRK,EODUT2(0,WAREG)              EOD ADDR
         LA    WRK,NX4                                   FOR UT2
         ST    WRK,EODUT3(0,WAREG)                               & UT3
         DROP  R15
         CNOP  0,8
         TITLE 'IEX50, COMPILATION PHASE, SUBROUTINE POOL'
*  SUBROUTINE POOL
         SPACE
SBRPOOL  EQU   *                   START OF SUBROUTINE POOL
SNOT     EQU   SBRPOOL
SBRSTRT  EQU   SNOT                     SUBROUTINE POOL START
         SPACE 3
* SCAN SOURCE INPUT TO NEXT OPERATOR
         SPACE
ABB1     NI    HCOMPMOD(WAREG),X'FE'    OPERAND FLAG OFF
ABC1     CLI   1(SOURCE),X'2F'          TEST     SOURCE
         BL    ABD3                     OPERATOR
         BH    ABD1                     OPERAND
         BAL   R4,JBUFFCH               BUFFERCHANGE
         B     ABC1                     CONTINUE
ABD3     LA    SOURCE,1(0,SOURCE)       SOURCE REG INCREASE
         B     ACB1                     CHOOSE CP
ABD1     OI    HCOMPMOD(WAREG),X'01'    OPERAND FLAG ON
         SH    OPDK,CON5(0,SBR)         SOURCE OPERAND
         CR    OPTK,OPDK                * TO
         BNL   STERMERR                 * STACK
         MVC   0(5,OPDK),1(SOURCE)      *
         LA    SOURCE,5(0,SOURCE)       SOURCE REG INCREASE
         B     ABC1                     CONTINUE
         SPACE
* AN OPERAND IS NOT ALLOWED IN SOURCE
         SPACE
SPEC     EQU   *-ABB1
SNOTSP    EQU   SPEC
ABC3     CLI   1(SOURCE),X'2F'          SPECIAL TEST
         BL    ABD3                     OPERATOR
         BH    ABD5                     OPERAND
         BAL   R4,JBUFFCH               BUFFER CHANGE
         B     ABC3
ABD5     LA    SOURCE,6(SOURCE)              SOURCE REG INCREASE   0220
         BAL   R4,SERR3(0,SBR)                                     0220
ERROR    DC    H'191'                                              0220
         BCTR  SOURCE,0                      SOURCE REG MINUS ONE  0220
         B     ABC3
         SPACE
* CHOOSE CP PROGRAM
         SPACE
COMP     EQU   *-ABB1
ACB1     SR    R1,R1
         LR    R2,R1
         IC    R1,0(0,SOURCE)           FETCH SOURCE OPERATOR
         IC    R1,0(R1,CCT)             COLUMN VECTOR
         IC    R2,0(0,OPTK)             FETCH STACK OPERATOR
         IC    R2,50(R2,CCT)            ROW VECTOR
         AR    R1,R2
         IC    R1,100(R1,CCT)
         SLL   R1,2(0)                  COMPILER PROGRAM FROM MATRIX
         L     BASE,SCPTAB(R1)          FIND BASE ADDRESS
         BR    BASE                     BRANCH TO COMPILER PROGRAM
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        JBUFFER PERFORMS CHANGE OF INPUT BUFFER
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,JBUFFCH           ( FROM SNOT )                 *
*        BAL   RETURN,JBUFFER(0,SBR)    ( FROM COMPILER PROGRAMS )    *
         SPACE 2
* REGISTER DEFINITIONS
         SPACE
RDCB     EQU   3                        ADDRESS OF DCB FOR UT2
RCUR     EQU   2                        ADDRESS OF CURRENT BUFFER
RREAD    EQU   SOURCE                   ADDRESS OF CURRENT INPUT BUFFER
RWRK      EQU   RDCB                     WORKREG
         SPACE 2
JBUFFER  EQU   *-ABB1              CHANGE OF INPUT BUFFER
JBUFFCH  L     RDCB,UT2ADD(0,WAREG)     GET DCB ADDRESS
         L     RCUR,SOURCEB(0,WAREG)    GET ADDRESS OF CURRENT BUFFER
         SPACE
JB1      BC    15,JB2                   NO CHECK FIRST TIME
         SPACE
         CHECK SRCECO                   CHECK PREVIOUS READ
         SPACE
JB2      READ  SRCECO,SF,(RDCB),(RCUR)
         SPACE
JB3      L     RREAD,RSRCB(0,WAREG)     GET ADDRESS OF OLD READ BUFFER
         ST    RCUR,RSRCB(0,WAREG)      CHANGE
         ST    RREAD,SOURCEB(0,WAREG)          ADDRESSES
         BCTR  RREAD,0                  GET START ADDRESS - 1
         IC    RWRK,NUMBBL(0,WAREG)     STEP
         LA    RWRK,1(0,RWRK)                RECORD
         STC   RWRK,NUMBBL(0,WAREG)                 COUNTER
         SPACE
         MVI   JB1+1,X'00'              CHANGE BRANCH CONDITION
         BR    RETURN                   RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        NXTOPT ACQUIRES NEXT ENTRY OF OPTAB
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,NXTOPT(0,SBR)                                   *
         SPACE
* REGISTER DEFINITIONS
         SPACE
RREL     EQU   3
         SPACE 2
NXTOPT   EQU   *-ABB1              GET NEXT ENTRY OF OPTAB
         L     RCUR,OPBUFB(0,WAREG)     GET ADDR OF CURRENT BUFFER
         L     RREL,OPREL               GET REL ADDR
         LA    RREL,14(0,RREL)                       OF NEW ENTRY
         C     RREL,OPTABS(0,WAREG)     IS ANEW BUFFER REQUIRED
         BNL   NX1                      YES
         SPACE
         AR    RCUR,RREL                NO, STORE
         ST    RCUR,AOPTABE(WAREG)      ADDRESS OF
         B     NX3                                        NEW ENTRY
         SPACE
NX1      BC    15,NX2                   NO CHECK FIRST TIME
         CHECK OPTCO                    CHECK PREVIOUS READ
         SPACE
NX2      L     RDCB,UT3ADD(0,WAREG)     GET DCB ADDRESS
         READ  OPTCO,SF,(RDCB),(RCUR),'S'    READ OPTAB RECORD
         SPACE
         MVI   NX1+1,X'00'              CHANGE BRANCH CONDITION
NX4      L     R1,ROPTB(0,WAREG)        GET ADDR OF OLD READ BUFFER
         ST    R1,OPBUFB(0,WAREG)       CHANGE
         ST    RCUR,ROPTB(0,WAREG)             ADDRESSES
         ST    R1,AOPTABE(WAREG)        STORE
         SR    RREL,RREL                      ADDRESSES OF
NX3      ST    RREL,OPREL                                  NEW ENTRY
         BR    RETURN                   RETURN
         SPACE 2
OPREL    DC    F'0'                     REL ADDRESS IN CURRENT BUFFER
*  CONSTANTS LOCATED IN SUBROUTINE POOL
         SPACE
CON2     EQU   *-ABB1
         DC    H'2'
CON4     EQU   *-ABB1
         DC    H'4'
CON5     EQU   *-ABB1
         DC    H'5'
CON8     EQU   *-ABB1
         DC    H'8'
CON9     EQU   *-SBRPOOL
         DC    H'9'
CON10    EQU   *-ABB1
         DC    H'10'
CON15    EQU   *-ABB1
         DC    H'15'
CON20    EQU   *-ABB1
         DC    H'20'
CON290   EQU   *-ABB1
         DC    H'290'
CON324   EQU   *-ABB1
         DC    H'324'
CON614   EQU   *-ABB1
         DC    H'614'
API      EQU   *-ABB1                   ALL PURPOSE IDENTIFIER
         DC    X'91FF01000000'
         DS    0F
TYPETEST EQU   *-ABB1                   TO EXTRACT TYPE BITS
         DC    F'3'
SWVAL    EQU   *-ABB1                   SWITCH FOR VALUE
         DC    H'0'
SWREL    EQU   *-SBRPOOL                SWITCH FOR VARIABLE USE
         DC    H'0'
GREGN    EQU   *-SBRPOOL                NUMBER OF ARRAY IDENTIFIERS-1
         DC    H'0'
         DS    0F
DECAADD  EQU   *-SBRSTRT
         DC    A(DECAREA)               ADDR OF DECISION AREA
HEXFFF   EQU   *-SBRPOOL
         DC    X'00000FFF'
PRC      EQU   DECAADD                  ADDR OF PROG CONTEXT COL VECTOR
         DC    A(ADRSTC)
STC      EQU   *-SBRPOOL-4              ADDR OF STATEM CONTEXT COL VECT
         DC    A(ADREXC)
EXC      EQU   *-SBRPOOL-4              ADDR OF EXPR CONTEXT COL VECTOR
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              COMPILER PROGRAM ADDRESS TABLE                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DS    0F
DSCPTAB  EQU   *-ABB1
SCPTAB   DC    A(CP0,CP1,CP84,CP3,CP4,CP84,CP6,CP7,CP8,CP84,CP84,CP84,CX
               P12,CP84,CP84,CP84,CP16,CP17,CP18,CP19,CP20,CP21,CP22)
         DC    A(CP23,CP24,CP25,CP26,CP27,CP28,CP29,CP30,CP31,CP84)
         DC    A(CP33)
         DC    A(CP34,CP84,CP36,CP84,CP38,CP84,CP40,CP41,CP84,CP43,CP84X
               ,CP45,CP84,CP47,CP84,CP49,CP84,CP51,CP52,CP84,CP54)
         DC    A(CP84,CP56,CP57,CP84,CP59,CP84,CP61,CP62,CP63,CP64,CP65X
               )
         DC    A(CP66,CP67,CP68,CP69,CP70,CP71,CP72,CP73,CP74,CP75,CP76X
               ,CP77,CP78,CP79,CP80,CP81,CP84,CP83,CP84,CP85,CP86,CP87)
         SPACE 3
* LIST OF NOT EXISTING COMPILER PROGRAMS
*
*   CP2, CP5, CP9, CP10, CP11, CP13, CP14, CP15, CP32, CP35, CP37,
*   CP39,
*   CP42, CP44, CP46, CP48, CP50, CP53, CP55, CP58, CP60, CP82
*
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        ERROR PATTERN GENERATION
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,SERRX(0,SBR)          X=1, 2, 3, 4, SP          *
*        DC    H'N'                         N=MSG NR                  *
         SPACE 2
* REGISTER DEFINITIONS
         SPACE
SWORK    EQU   1
SHERPIN  EQU   2
SWITCH   EQU   3
SRETURN  EQU   4
RPOOL    EQU   15
         SPACE 2
SERR4    EQU   *-SBRPOOL           ENTRY BOTH OPERATORS
         LA    SWITCH,2
         LA    SHERPIN,6                GET LENGTH OF ENTRY
         B     ER2
         SPACE 2
SERR2    EQU   *-SBRPOOL           ENTRY STACK OPERATOR
         LA    SWITCH,3
         B     ER1
         SPACE 2
SERR3    EQU   *-SBRPOOL           ENTRY SOURCE OPERATOR
         LA    SWITCH,1
ER1      LA    SHERPIN,5                GET LENGTH OF ENTRY
ER2      L     RPOOL,NEXTERR(0,WAREG)   GET ADDRESS OF POOL ENTRY
         STC   SHERPIN,0(0,RPOOL)       INSERT LENGTH OF ENTRY
         SPACE
         LA    SHERPIN,4                SET POINTER FOR OPERATOR INSERT
         BCT   SWITCH,ER4               BRANCH IF STACK OR BOTH
         SPACE
ER3      MVC   EP212+3(1),0(SOURCE)     GET SOURCE OP
         OI    EP212+3,X'80'                          AND PUT A TAG
         IC    SWORK,EP212+3            INSERT SOURCE OPERATOR
         B     ER5
         SPACE
ER4      IC    SWORK,0(0,OPTK)          FETCH STACK OPERATOR
ER5      STC   SWORK,0(SHERPIN,RPOOL)   INSERT OPERATOR
         SPACE
         LA    SHERPIN,1(0,SHERPIN)     INCREASE POINTER
         BCT   SWITCH,ER6               BRANCH IF STACK OR SOURCE
         B     ER3                      IF BOTH
         SPACE 2
SERRSP   EQU   *-SBRPOOL           SPECIAL ENTRY FOR MSG 214
         L     RPOOL,NEXTERR(0,WAREG)   GET ADDR OF POOL ENTRY
         LH    SWITCH,SPBNST(0,WAREG)   GET CURRENT PBN
         CVD   SWITCH,ERDOUBLE          CONVERT
         UNPK  ERDOUBLE(3),ERDOUBLE+6(2)        TO
         MVZ   ERDOUBLE+2(1),ERDOUBLE              DECIMAL
         MVC   4(3,RPOOL),ERDOUBLE      MOVE TO ERROR PATTERN
         SPACE
         LA    SHERPIN,7                GET LENGTH
         STC   SHERPIN,0(0,RPOOL)                  OF ENTRY
         B     ER6
         SPACE
         SPACE
SERR1    EQU   *-SBRPOOL
         L     RPOOL,NEXTERR(0,WAREG)   ENTRY NO OPERATOR
         LA    SHERPIN,4                INSERT LENGTH
         STC   SHERPIN,0(0,RPOOL)                     OF ENTRY
         SPACE
ER6      MVC   2(2,RPOOL),SEMCNT(WAREG)     INSERT SEMICOLON COUNTER
         IC    SWITCH,1(0,SRETURN)          INSERT
         STC   SWITCH,1(0,RPOOL)                    ERROR NUMBER
         SPACE
         LA    RPOOL,0(SHERPIN,RPOOL)   UPDATE PTR
         ST    RPOOL,NEXTERR(0,WAREG)              TO NEXT ENTRY
         C     RPOOL,ENDPOOL(0,WAREG)   IS POOL FULL
         BNH   ER7                      NO
         SPACE
         MVC   EP212+2(2),SEMCNT(WAREG)     YES, MOVE PATTERN
         MVC   0(4,RPOOL),EP212                                FOR M212
         LA    RPOOL,4(0,RPOOL)         UPDATE PTR TO
         ST    RPOOL,NEXTERR(0,WAREG)                 NEXT ENTRY
         B     CPERR1                   GO TO TERMINATION
         SPACE
ER7      OI    HCOMPMOD(WAREG),X'80'    SET COMPILE MODE FALSE
         LA    SWITCH,2                 STEP
         AR    SRETURN,SWITCH                RETURN ADDRESS
         BR    SRETURN                  RETURN TO CALLER
         SPACE 2
EP212    DC    X'04D40000'              ERROR PATTERN FOR MSG 212
ERDOUBLE DS    D
         EJECT
* OPERAND /OPERATOR STACK OVERFLOW    CALL IS B    STACKOFL(SBR)
         SPACE
STACKOFL EQU   *-ABB1
STERMERR BAL   R4,SERR1(0,SBR)
         DC    H'186'
         B     CPERR1
         SPACE 2
CPEND    EQU   *                   NORMAL TERMINATION
         TM    HCOMPMOD+2(WAREG),X'40'       SOURCE IN CORE        2846
         BC    1,CPEND1                      YES                   2846
         BAL   RETURN,JBUFFER(0,SBR)         NO   CHECK LAST READ  2846
CPEND1   TM    NX1+1,X'F0'             OPTAB READ IN IEX50?      A32978
         BC    1,CPEND2                NO                        A32978
         BAL   RETURN,NXTOPT(0,SBR)          NO   CHECK LAST READ  2846
CPEND2   XCTL  EP=IEX51000                   BRANCH TO NEXT MODULE 2846
         SPACE
CPERR1   EQU   *                   DIRECTORY RETURN ADDRESS
         TM    JB1+1,X'F0'             READ TO INPUT BUFFERS     A28233
         BC    1,CPERR10               NO                        A28233
         CHECK SRCECO                  CHECK LAST READ           A28233
CPERR10  TM    NX1+1,X'F0'             OPTAB READ                A28233
         BC    1,CPERR11               NO                        A28233
         CHECK OPTCO                   CHECK LAST READ           A28233
CPERR11  EQU   *                                                 A28233
         XCTL  EP=IEX51ER1              TO ERROR MSG EDITING AND TERM
         EJECT
         DS    0H
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              CONVERTION INTEGER TO REAL                             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* GENERATES CALL OF CONVERTION ROUTINE FROM INTEGER TO REAL AFTER
* LOCATING THE OPERAND. RESERVES ONE OBJECT STACK TIME ENTRY SETS
* RIR INTRODUCES OPERAND ADDRESSS INTO RUTR AND ADJUSTS OPERAND
*                                                                     *
* CALL   BAL   RETURN,TRINRE(0,SBR)
*                                                                     *
*                                                                     *
TRINRE   EQU   *-SBRPOOL
         ST    RETURN,RETADR(0,WAREG)       STORE RETURN ADDRESS
         LA    RETURN,HQF21
         BAL   R3,ROUTIN15(0,SBR)
         SR   R1,R1
         IC    R1,3(OPDK)                    PREPARE INSTRUCTION
         SRL   R1,4
         LA    R2,1
         SLL   R2,0(R1)
         STC   R2,HQD2+1
         XI    HQD2+1,X'FF'
HQD2     NI    RII+1(WAREG),X'00'
         BAL   RETURN,ROUTINE8(0,SBR)        RELILO
         MVN   HQG1+1(1),VPLACE(WAREG)
         BAL   INFORM,GENTXT2(0,SBR)
HQG1     LR    STH,0                         ***GENERATE***
HQH1     TM    RIR+1(WAREG),X'01'            IS FPRO FREE
         BZ    HQJ1                          BRANCH IF FREE
         BAL   RETURN,ROUTIN14(0,SBR)        STFPR0
HQJ1     TM    RII(WAREG),X'01'              IS ADR FREE
         BZ    HQJ11
         BAL   RETURN,ROUTIN10(0,SBR)
HQJ11    BAL   INFORM,GENTXT4(0,SBR)         CALL CONVER. ROUTINE
         BAL   ADR,CNVIRD(0,FSA)             ***GENERATE***
         OI    0(OPDK),X'80'                ADJUST OPDK ENTRY
         NI    0(OPDK),X'9F'
         OI    1(OPDK),X'32'
         NI    1(OPDK),X'FE'
         MVC   2(1,OPDK),SPBNST+1(WAREG)
         AH    P,ONEENTRY(0,WAREG)
         STH   P,WORKPL(0,WAREG)
         MVC   3(2,OPDK),WORKPL(WAREG)       INTRODUCE STACK ADD
         ST    OPDK,RUTR(0,WAREG)           INTRODUCE OPDK ADD IN RUTR
         OI    RIR+1(WAREG),X'01'            SET RIR TO ONE
         MVI   CIR+1(WAREG),X'00'            CIR=0
         L     RETURN,RETADR(0,WAREG)       LOAD RETURN ADDRESS
         BR    RETURN
HQF21    MVN   HQG2+1(1),VPLACE(WAREG)       PREPARE INSTRUCTION
         MVC   HQG2+2(2),WPLACE(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)
HQG2     L     STH,0(0,0)                    ***GENERATE***
         B     HQH1
         EJECT
         DS    0H
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        CONVERSION REAL TO INTEGER                                   *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,TRRE IN(SBR)
*  AT OBJECT TIME THE INTEGER VALUE IS IN REGISTER STH AFTER CONVERSION
         SPACE 2
* BIT PATTERNS
         SPACE
OBJSTM   EQU   X'C0'                    OBJECT STACK MASK
RADRFREM EQU   X'01'                    REG. ADR FREE MASK
FPROOCM  EQU   X'01'                    FPR0 MASK
OPDVALUM EQU   X'20'                    VALUE MASK
OPDREGM  EQU   X'40'                    REGISTER MASK
DISP     EQU   0
         SPACE 2
TRREIN   EQU   *-SBRSTRT           SUBROUTINE TO GENERATE CODE TO CALL
*                                  REAL-INTEGER CONVERSION ROUTINE
         ST    RETURN,SAVTRREI          SAVE RETURN ADDRESS
         TM    RIR+1(WAREG),FPROOCM        FPR0 OCCUPIED
         BZ    TRREIN1                  NO
         C     OPDK,RUTR(0,WAREG)       IS OPERAND IN FRR0
         BE    TRREIN8                  YES, REALEASE FPREG0
         BAL   RETURN,ROUTIN14(0,SBR)     STORE FLOTING REGISTER 0
         NI    RIR+1(WAREG),X'FE'
TRREIN1  LA    R3,TRREIN4               ADDRESS IF VALUE IN REG
         BAL   RETURN,ROUTIN15(SBR)     FIND DISPL    AND REG
TRREIN2  MVN   TRREIN3+1(1),VPLACE(WAREG)     INSERT REGISTER AND
         MVC   TRREIN3+2(2),WPLACE(WAREG)     DISPL. IN LOAD INSTR.
         BAL   INFORM,GENTXTP4(0,SBR)     GENERATE A LOAD FPR0
TRREIN3  LD    FPR0,DISP(0,0)           *INSTRUCTION,FLOATING POINT A.
TRREIN6  TM    RII(WAREG),RADRFREM      REG. ADR FREE
         BC    8,TRREIN9                YES
         BAL   RETURN,ROUTIN10(0,SBR)   STORE ADR AND RETURN
         NI    RII(WAREG),X'FE'
TRREIN9  BAL   INFORM,GENTXT4(0,SBR)    GENERATE A CALL TO THE REAL-
         BAL   ADR,CNVRDI(FSA,0)        *INTEGER CONVERSION ROUTINE
         L     RETURN,SAVTRREI
         BR    RETURN
TRREIN4  MVN   TRREIN5+1(1),VPLACE(WAREG)
         BAL   INFORM,GENTXTP2(0,SBR)     GENERATE A LOAD  FPR0
TRREIN5  LDR   FPR0,0                   *INSTRUCTION,FLOATING POINT A.
TRREIN8  BAL   RETURN,ROUTIN12(SBR)     RELEASE REG.CONTAINING OPD
         B     TRREIN6
         SPACE 2
SAVTRREI DS    F                        SAVE AREA FOR RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        S U B R O U T I N E   G E N E R A T E                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
* GENERATE RLD-RECORDS
* CALL   L     INFORM,                  VALUE OF PROGRAM POINTER
*        BAL   LENGTH,GENRLD(SBR)
*        DC    H' '                     LENGTH OF ADDRESS TABLE
*        DC    H'  '                    ESID OF RELOCATION FACTOR R
*        DC    H'  '                    ESID OF POSITION IDENTIFIER P
*        ---                            RETURN AFTER CALL GENERATE
*
*
* GENERATE TXT-RECORDS SIX DIFFERENT CALLS
*        BAL   INFORM,GENTXT2(SBR)
*        RR FORMAT INSTRUCTION OR DATA 2 BYTES LONG
*        ---                            RETURN AFTER CALL GENERATE
*
*        BAL   INFORM,GENTXTP2(SBR)
*        RR FORMAT FLOATING POINT LONG FORM INSTRUCTION
*        ---                            RETURN AFTER CALL GENERATE
*
*        BAL   INFORM,GENTXT4(SBR)
*        INSTRUCTION(S) OR DATA 4 BYTES LONG
*        ---                            RETURN AFTER CALL GENERATE
*
*        BAL   INFORM,GENTXTP4(SBR)
*        RX  FORMAT FLOATING POINT LONG FORM INSTRUCTION
*        ---                            RETURN AFTER CALL GENERATE
*
*        BAL   INFORM,GENTXT6(SBR)
*        INSTRUCTIONS OR DATA 6 BYTES LONG
*        ---                            RETURN AFTER CALL GENERATE
*
*        LA    INFORM,        ADDRESS OF CODE TO BE GENERATED
*        BAL   LENGTH,GENTXT8(SBR)
*        DC    H'  '          LENGTH OF CODE IN BYTES
*        ---                            RETURN AFTER CALL GENERATE
         EJECT
* REGISTER DEFINITIONS
REG0     EQU   0                        VARIABLE USE
OUTAREA  EQU   1                        OUTPUT RECORD POINTER
INFORM   EQU   2                        ADDRESS OF INFORMATION
TYPER    EQU   3                        TYPE OF RECORD TO BE GENERATED
RETURN   EQU   4                        RETURN REGISTER
LENGTH   EQU   14                       LENGTH OF INFORM. FROM CALL
L        EQU   15                       LENGTH WITHIN RECORD
         SPACE 2
*ADDRESS DISPLACEMENTS
RSTART   EQU   0                        START OF RECORD TYPE TABLE
RTYP     EQU   1                        RECORD IDENTIFICATION
RLEN     EQU   4                        INITIAL LENGTH 0 OR 4
RESID    EQU   6                        ESID OR BLANKS
RMAX     EQU   12                       MAXIMUM NUMBER OF BYTES IN REC
RMOV     EQU   14                       START OF MOVE ROUTINE
INFL     EQU   10                       LENGTH OF INFORM IN A RECORD
         SPACE 2
* BIT PATTERNS
SDENTRY  EQU   X'00'                    SD-ENTRY IDENTIFICATION
LDENTRY  EQU   X'01'                    LD-ENTRY IDENTIFICATION
RLDFLAG  EQU   B'00001100'              FLAG USED IN RLD-ENTRY
         SPACE 3
         DS    0H
GENRLD   EQU   *-ABB1              START OF GENERATE RLD-RECORDS
         LA    RETURN,6(0,LENGTH)       COMPUTE RETURN ADDRESS
         LA    TYPER,RLDT               INDICZTE RLD-CALL
         LH    LENGTH,0(0,LENGTH)       LOAD LENGTH GIVEN IN CALL
         SLL   LENGTH,1                 DOUBLE LENGTH
         B     GEN1                     CONTINUE COMMON PART
*
GENTXTS  EQU   *-ABB1              START OF GENERATE TXT-RECORD,S
         LA    RETURN,2(0,LENGTH)       COMPUTE RETURN ADDRESS
         LH    LENGTH,0(0,LENGTH)       LOAD LENGTH GIVEN IN CALL
         B     GEN2                     CONTINUE TXT-ENTRY
*
*
GENTXTP4 EQU   *-SBRSTRT           GENERATE RX OR RS INST.,CHANGE PREC.
         XI    GENTXT6+7(SBR),X'06'     MODIFY LENGTH INSTRUCTION
GENTXTP2 EQU   *-SBRSTRT           GENERATE RR INST.,CHANGE PRECISION
         OC    0(1,INFORM),PRECMASK(WAREG)     MODIFY INSTR. L OR S
GENTXT2  EQU   *-ABB1              START OF GENERATE TXT-RECORD,2
         XI    GENTXT6+7(SBR),X'06'     MODIFY LENGTH INSTRUCTION
*
GENTXT4  EQU   *-ABB1              START OF GENERATE TXT-RECORD,4
         XI    GENTXT6+7(SBR),X'02'     MODIFY LENGTH INSTRUCTION
*
GENTXT6  EQU   *-ABB1              START OF GENERATE TXT-RECORD,6
         ST    LENGTH,PLACE14(0,WAREG)           SAVE LENGTH REGISTER
         LA    LENGTH,6                 LENGTH=2,4 OR 6
         MVI   GENTXT6+7(SBR),X'06'     RESTORE MODIFIED INSTR.
         LA    RETURN,0(INFORM,LENGTH)      COMPUTE RETURN ADDRESS
GEN2     LA    TYPER,TXTT               INDICATE TXT-CALL
         SPACE 3
GEN1     L     OUTAREA,SAVOUTA(WAREG)     FETCH OLD OUTPUT RECORD ADD.
         TM    HCOMPMOD+1(WAREG),X'60'     LOAD OR DECK SPECIFIED
         BO    GEN4+6                   NO OUT OF GENERATE
         TM    HCOMPMOD(WAREG),X'80'
         BO    GEN4+6
         CLC   RTYP(3,OUTAREA),RTYP(TYPER)     RECORD RIGTH TYPE
         BNE   GEN3                     NO,CALL IOR NEW
         CLC   INFL(2,OUTAREA),RMAX(TYPER)     RECORD FILLED
         BNL   GEN3                     YES,CALL FOR NEW
GEN6     EQU   *
         LA    L,56
         LH    REG0,INFL(0,OUTAREA)     REG0=LENGTH OF INFORM IN REC
         SR    L,REG0                   L=EMPTY POS LEFT IN RECORD
         CR    L,LENGTH                 ENOUTH SPACE LEFT
         BL    *+6                      NO
         LR    L,LENGTH                 YES L=LENGTH FROM CALL
         AR    L,REG0
         STH   L,INFL(0,OUTAREA)        INSERT NEW LENGTH INTO RECORD
*
         SR    L,REG0
         AR    OUTAREA,REG0             START ADDRESS WITHIN RECORD
         SR    LENGTH,L                 REMAINING LENGTH
         B     RMOV(TYPER)              TO DIFFERENT MOVE ROUTINES
*
GEN4     LTR   LENGTH,LENGTH            MORE INFORMATION MUST BE MOVED
         BH    GEN3                     YES
         L     LENGTH,PLACE14(0,WAREG)           RESTORE REG LENGTH
         BR    RETURN
         SPACE 3
GEN3     EQU   *                        CALL FOR NEW OUTPUT RECORD
PUNCH    ST    LENGTH,SAVELT            SAVE LENGTH
         TM    HCOMPMOD+1(WAREG),X'60'    BOTH LOAD AND DECK SPECIFIED
         BZ    BOTH                     YES
         TM    HCOMPMOD+1(WAREG),NDCK     ONLY DECK
         L     OUTAREA,PCHADD(WAREG)    IF ONLY DECK
         BZ    PUT1                     YES
         L     OUTAREA,LINADD(WAREG)         SYSLIN OUTPUT
PUT1     PUT   (OUTAREA)                PUT FOR SYSLIN AND SYSPUNCH IF
         ST    OUTAREA,SAVOUTA(WAREG)      SYSPUNCH OR SYSLIN ADDRESS
         L     LENGTH,SAVELT            RESTORE LENGTH
         B     PUNCHOUT                 OUT OF ROUTINE PUNCH
BOTH     L     LENGTH,OUTAREA2(WAREG)     COPY SYSLIN B. INTO SYSPUNCH
         L     OUTAREA,SAVOUTA(WAREG)
         MVC   0(80,LENGTH),0(OUTAREA)  BUFFER
PUT2     L     OUTAREA,PCHADD(WAREG)
         PUT   (OUTAREA)                PUT FOR SYSPUNCH WHEN BOTH HAS
         ST    OUTAREA,OUTAREA2(WAREG)     *BEEN SPECIFIED
         B     PUT1-4                   GO TO PUT SYSLIN
PUNCHOUT EQU   *
         MVC   0(4,OUTAREA),RSTART(TYPER)     INSERT FIRST 4 BYTES
         MVI   4(OUTAREA),C' '          INSERT ONE BLANK
         MVC   5(67,OUTAREA),4(OUTAREA)      BLANK OUTPUT RECORD
         MVC   72(4,OUTAREA),PIDENT(WAREG)     INSERT PROGRAM IDENT
         L     L,SEQU(WAREG)            STEP
         LA    L,1(0,L)                      SEQUENCE
         ST    L,SEQU(WAREG)                          NR
         CVD   L,DBL                    CONVERT
         UNPK  76(4,OUTAREA),DBL+5(3)           TO DECIMAL
         MVZ   79(1,OUTAREA),76(OUTAREA)
         MVC   10(2,OUTAREA),RLEN(TYPER)     INSERT INITIAL LENGTH
         MVC   14(6,OUTAREA),RESID(TYPER)     INSERT ESID+R AND P
         CLC   TXTT+1(3),RTYP(TYPER)    TXT-RECORD PROCESSED
         BNE   GEN6                     NO
         ST    PRPOINT,4(OUTAREA)       YES INSERT PRPOINT
         MVI   4(OUTAREA),C' '
         B     GEN6
         SPACE 3
* TABLES AND MOVE ROUTINES
         SPACE 2
TXTT     DS    0H                  START OF TXT-RECORD  TABLE
         DC    X'02'                    CARD CODE
         DC    C'TXT'                   IDENTIFICATION
         DC    H'0'                     INITIAL LENGTH 0
         DC    H'1'                     ESID
         DC    C'    '
         DC    H'56'                    MAXIMUM LENGTH
GEN8     EQU   *                   MOVE TXT-INFORMATION TO OUTAREA
         BCTR  L,0                      L=L-1
         STC   L,*+5                    INSERT PROPER LENGTH TO MOVE
         MVC   16(0,OUTAREA),0(INFORM)      MOVE INFORM TO OUTAREA
         LA    PRPOINT,1(L,PRPOINT)     INCREASE PROGRAM POINTER
         LA    INFORM,1(L,INFORM)       MODIFY DATA ADDRESS
         B     GEN4                     OUT OF MOVE TXT ROUTINE
         SPACE 3
RLDT     DS    0H                  START OF RLD-RECORD TABLE
         DC    X'02'                    CARD CODE
         DC    C'RLD'                   IDENTIFICATION
         DC    H'0'                     INITIAL LENGTH 0
         DC    C'  '
RANDP    DC    H'1',H'1'                R AND P ESID ARE 1 AT START
         DC    H'56'                    MAXIMUM LENGTH IN RECORD
GEN9     EQU   *                   MOVE RLD-INFORMATION TO OUTAREA
         AR    L,OUTAREA                INDICATE LAST ENTRY
GEN5     MVC   16(4,OUTAREA),RANDP
         ST    INFORM,20(OUTAREA)       MOVE PROGRAM POINTER VALUE AND
         MVI   20(OUTAREA),RLDFLAG      * FLAG TO OUTAREA
         LA    OUTAREA,8(OUTAREA)       NEXT ENTRY
         LA    INFORM,4(0,INFORM)       NEXT PROGRAM POINTER VALUE
         CR    OUTAREA,L                LAST COLUMN FILLED
         BL    GEN5                     NO,CONTINUE
         B     GEN4                     OUT OF MOVE RLD ROUTINE
         SPACE 3
* VARIABLES AND CONSTANTS
         SPACE
DBL      DS    D                        FOR CONV OF SEQUENCE NR
SAVELT   DS    F                       SAVE AREA FOR LENGTH
         EJECT
         DS    0H
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              SUBROUTINE CLEAR REGISTERS
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
* CALL   BAL   RETURN,CLEARRG(0,SBR)                                  *
* GENERATES STORE INSTRUCTIONS FOR ALL REGISTERS THAT CONTAIN
* VALID INFORMATION- SET CII,CIR,RII,RIR.
*                                                                     *
         SPACE 2
CLEARRG  EQU   *-SBRPOOL
         MVI   GPBN+1(WAREG),X'FF'      DESTROY GDSA
         ST    RETURN,RETADR(0,WAREG)   STORE RETURN ADDRESS
         SR    R14,R14
         BCTR  R14,0
         BCTR  R14,0
         LH    R2,RIR(0,WAREG)
KIF22    LA    R14,2(0,R14)
         LTR   R2,R2
         BZ    KIF21                    BRANCH IF YES
         SRDL  R2,1
         LTR   R3,R3
         BC    10,KIF22                 BRANCH IF NO
         ST    R2,RETADR+64(WAREG)
         BAL   RETURN,ROUTIN13(0,SBR)
         L     R2,RETADR+64(0,WAREG)
         B     KIF22
KIF21    MVI   CIR(WAREG),X'00'
         MVI   CIR+1(WAREG),X'06'
         MVC   RIR(2,WAREG),ZEROHW(WAREG)   CLEAR RIR
         SR    R14,R14
         BCTR  R14,0
         LH    R2,RII(0,WAREG)
KIF25    LA    R14,1(0,R14)
         LTR   R2,R2
         BZ    KIF24                    BRANCH IF YES
         SRDL  R2,1
         LTR   R3,R3
         BC    10,KIF25                 BRANCH IF NO
         ST    R2,RETADR+64(WAREG)
         BAL   RETURN,ROUTINE9(0,SBR)
         L     R2,RETADR+64(WAREG)
         B     KIF25
KIF24    MVI   CII(WAREG),X'00'
         MVI   CII+1(WAREG),X'07'
         MVC   RII(2,WAREG),ZEROHW(WAREG)   CLEAR RII
         L     RETURN,RETADR(0,WAREG)   LOAD RETURN ADDRESS
         BR    RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        O P E R A N D R E C O G N I Z E R                            *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,OPDREC(SBR)
* CHECK IF OPERAND IN STACK IS A FORMAL PARAMETER OR A PROCEDURE
* WITHOUT PARAMETERS .OPDREC GENERATES AN ACTUAL PARAMETER OR A
* PROCEDURE CALL .
*  IF OPERAND IS A FORMAL PARAMETER CALLED BY VALUE LABEL OR ARRAY
* OPDREC GENERATES  LOAD OF REGISTERS GDSA AND/OR ADR
         SPACE 2
* ADDRESS DISPLACEMENTS
TYPS     EQU   1                        SECOND BYTE TYPE IN IDENTIFIER
NUMP     EQU   3                        NR OF PARAMETERS IN IDENTIFIER
PBNP     EQU   2                        DISP OF PBN IN IDENTIFIER
TYPF     EQU   0                        FIRST BYTE TYPE IN IDENTIFIER
RUTIADR  EQU   4*8                      ENTRY IN RUTI-TABLE FOR ADR
         SPACE 2
* BIT PATTERNS
VARIAM   EQU   X'30'                    MASK FOR VARIABLE
INTRVM   EQU   X'7F'                    INTERMIDIATE VALUE  IN STACK
INTRRM   EQU   X'60'                    INTERMIDIATE VALUE ADDR.IN REG.
DESTROY  EQU   X'FF'                    INDICATE THAT GDSA IS NOT VALID
ARRAYM   EQU   X'04'                    ARRAY IDENTIFIER MASK
LABARRM  EQU   X'0C'                    LABEL OR ARRAY IDENTIFIER MASK
NOTMIX   EQU   9
RIIADRM  EQU   X'01'                    RII-MASK FOR RESERVATION OF ADR
FORMPM   EQU   X'30'                    FORMAL PARAMETER MASK
PROCM    EQU   X'C0'                    PROCEDURE MASK
ZERO     EQU   8
NOTZERO  EQU   5
STPROCM  EQU   X'40'                    STANDARD PROCEDURE MASK
PARAM    EQU   X'F0'                    NUMBER OF PARAMETER MASK
FUNCPM   EQU   X'03'                    FUNCTION PROCEDURE MASK
VALUEM   EQU   X'20'                    VALUE PARAMETER SPEC.
REGADRM  EQU   ADR*16                   REGISTER ADR MASK
         SPACE 2
         DS    0H
OPDREC EQU     *-SBRSTRT           START OF OPERAND RECOGNIZER IN SBR
         TM    0(OPDK),X'C0'            IDENTIFIER FROM ITAB
         BCR   12,RETURN                NO RETURN
         TM    TYPS(OPDK),FORMPM        OPERAND FORMAL PARAMETER
         ST    RETURN,SAVRT             SAVE RETURN ADDRESS
         BM    OPDREC1                  YES,FORMAL
         TM    TYPS(OPDK),PROCM         PROCEDURE IDENTIFIER
         BCR   ZERO,RETURN              NO,RETURN
         TM    TYPS(OPDK),STPROCM       STANDARD PROCEDURE
         BCR   ZERO,RETURN              YES,RETURN
         TM    NUMP(OPDK),PARAM         PARAMETERLESS PROCEDURE
         BCR   NOTZERO,RETURN           NO,RETURN
         SPACE 1
*        EQU   *                   PARAMETERLESS PROCEDURE FOUND
         BAL   RETURN,CLEARRG(0,SBR)      CLEAR ALL OBJ.TIME REGISTERS
         MVC   PPCODE+2(2),NUMP(OPDK)     INSERT DISPL. OF LABEL
         MVC   PPCODE+5(1),PBNP(OPDK)     INSERT PROGRAM BLOCK NR
         LA    INFORM,PPCODE            GENERATE A PARAMETERLESS
         BAL   LENGTH,GENTXTS(0,SBR)    *PROCEDURE
         DC    H'12'                    *CALL
         TM    TYPS(OPDK),FUNCPM        FUNCTION PROCEDURE
         L     RETURN,SAVRT
         BCR   ZERO,RETURN              NO,RETURN
         SPACE 1
*        EQU   *                   PARAMETERLESS FUNCTION PROC.FOUND
         B     OPDREC4
OPDREC1  EQU   *                   FORMAL PARAMETER FOUND
         TM    TYPS(OPDK),VALUEM        CALLED BY NAME
         BO    OPDREC3                  NO
         SPACE 1
*        EQU   *                   FORMAL PARAMETER CALLED BY NAME
         BAL   RETURN,CLEARRG(0,SBR)      CLEAR ALL OBJ.TIME REGISTERS
         SR    REGGEN,REGGEN
         IC    REGGEN,PBNP(0,OPDK)      PROCEDURE PBN FROM IDENTIFIER
         SLL   REGGEN,3                 DISPLACEMENT IN PBT
         STH   REGGEN,CAP+4             *INSERTED IN CAP CODE
         LH    REGGEN,SPBNST(0,WAREG)     CURRENT PBN
         SLL   REGGEN,3                 *DISPLACEMENT IN PBT
         STH   REGGEN,CAP+6             *INSERTED IN CAP CODE
         MVC   CAP+10(2),NUMP(OPDK)     INSERT FORMAL PARAM. DISPL
         LA    INFORM,CAP               GENERATE CALL ACTUAL PARAMETER
         BAL   LENGTH,GENTXTS(0,SBR)     *CODE
         DC    H'12'
         TM    TYPS(OPDK),PROCM         PROCEDURE
         BZ    OPDREC4                  NO
         TM    PROCWPS(SBR),X'80'
         BO    OPDREC4                  NOT PARAMETERLESS,SET IN CP57
         LA    INFORM,OPDREC6           GENERATE
         BAL   LENGTH,GENTXTS(SBR)      * CHECK FOR PARAMETERLESS
         DC    H'10'                    *PROCEDURE
OPDREC4  AH    P,ONEENTRY(0,WAREG)      RESERVE ONE ENTRY IN OBJ.STACK
         STH   P,SPBNST+2(0,WAREG)      INSERT NEW DISPL. AND
         MVC   PBNP(3,OPDK),SPBNST+1(WAREG)     *PBN IN INTERNAL NAME
         XI    TYPF(OPDK),INTRRM        ADDRESS OF OPERAND IN REGISTER
         OI    NUMP(OPDK),REGADRM       INDICATE REGISTER ADR
         ST    OPDK,RUTI+RUTIADR(0,WAREG)     GPR CONTROL ENTRY RUTI
         OI    RII(WAREG),RIIADRM       GPR CONTROL ENTRY RII
         L     RETURN,SAVRT
         TM    TYPS(OPDK),ARRAYM
         BCR   1,RETURN
         TM    TYPS(OPDK),X'03'
         BCR   8,RETURN
         MVI   PBNP(OPDK),X'00'         INDICATE SPECIAL ADDRESS.ADR
*                                       MAY POINT TO FCTVALST IN FSA
*                                       ROUTINE 9 CHECK THIS
         BR    RETURN                   RETURN
         SPACE 1
OPDREC3  EQU   *                   FORMAL PARAMETER CALLED BY VALUE
         TM    TYPS(OPDK),LABARRM       LABEL OR ARRAY IDENTIFIER
         BCR   NOTMIX,RETURN            NO,RETURN
         BAL   RETURN,ROUTINE3(0,SBR)   GENERATE LOAD ADR
         AH    P,ONEENTRY(0,WAREG)      OBJECT TIME STACK NOT RELEASED
         TM    TYPS(OPDK),ARRAYM        ARRAY IDENTIFIER
         BO    OPDREC4                  YES,INTERNAL NAME AND REG.CONTR
         LA    REGGEN,4
         AH    REGGEN,GRD3+2            ADD 4 TO DISP,GRD3 IN ROUTINE3
         STH   REGGEN,OPDREC5+2         INSERT DISP.+4(CDSA OR GDSA)
         MVN   OPDREC5+1(1),GRD3+1        * IN LOAD GDSA INSTR.
         BAL   INFORM,GENTXT4(0,SBR)    GENERATE A LOAD GDSA
OPDREC5  L     GDSA,DISP+4              *INSTRUCTION
         MVI   GPBN+1(WAREG),DESTROY      NOTE THAT GDSA IS DESTROYED
         B     OPDREC4                  INTERNAL NAME AND REG.CONTROL
         SPACE 3
*CONSTANTS AND VARIABLES
         SPACE
PPCODE   L     ADR,DISP(LAT,0)          PARAMETERLESS PROCEDURE CALL
         MVI   PROLPBN(FSA),DISP        *CODE,DISP INSERTED
         BAL   BRR,PROLOG(0,FSA)        *CODE IS 12 BYTES
         SPACE
* CALL ACTUAL PARAMETER,GENERATED CODE,DISPL,PBNP AND PBNC INSERTED
CAP      EQU   *                   CALL ACTUAL PARAMETER CODE
         BAL   BRR,CAP1(0,FSA)          TO CAP SUBROUTINE FIRST PART
         DS    H                        PBNP,PBN-DISP OF PROCEDURE
         DS    H                        PBNC,PBN-DISP OF CURRENT BLOCK
         L     ADR,DISP(CDSA,0)         THUNK-ADDR FROM PROCEDURE DSA
OPDREC6   LA   STH,FCTVALST(FSA)        CHECK THAT ACTUAL
         CR    STH,ADR                  *PARAMETER PROCEDURE
         BNE   OERR21(FSA)              *IS PARAMETERLESS
         SPACE
SAVRT    DS    F                        SAVE AREA FOR RETURN
PROCWPS  EQU   *-SBRSTRT                SWITCH TO AVOID PARAMETER-
         DC    X'00'                    *LESS PROCEDURE CHECK
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        S U B R O U T I N E   M A X C H E C K                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DS    0H
MAXCH    EQU   *-SBRSTRT           SUBROUTINE TO CHECK THAT OBJECT TIME
*                                  STACK POINTER VALUE IS LESS THAN MAX
*                                       VALUE PLACED IN WORKPL BY
*                                       CALLING ROUTINE
         SPACE 1
* CALL   BAL   RETURN,MAXCH(SBR)
*
         SPACE
* REGISTER DEFINITIONS
REGGEN   EQU   3                        VARIABLE USE
R        EQU   RETURN                   VARIABLE USE
REGONE   EQU   15                       FIRST REG DESTROYED BY SERR1
         SPACE
* BIT PATTERNS
SYNTCM   EQU   X'80'                    SYNTAX CHECK MODE MASK
         SPACE 2
         STM   REGONE,RETURN,MCHSAV     SAVE REGISTERS
         LH    R,WORKPL(0,WAREG)        FETCH CHECKVALUE FROM WORKAREA
         LH    REGGEN,SPBNST(0,WAREG)     CURRENT PBN FROM WORKAREA
         SLL   REGGEN,2                 PBT-DISPLACEMENT
         CH    R,PBTAB3(REGGEN,WAREG)       R LESS THAN MAX IN PBTAB3
         BNH   MAXCH1                   YES,RETURN
         STH   R,PBTAB3(REGGEN,WAREG)      INSERT R AS NEW MAX
         CH    R,MAXOVERF(0,WAREG)      OVERFLOW OF OBJECT TIME STACK
         BNH   MAXCH1                   NO,RETURN
         CR    P,R                      HAS P ALREADY BEEN RESET
         BL    MAXCH1                   YES, NO ERROR MSG
         SR    P,P                      NO, RESET P TO ZERO
         BAL   SRETURN,SERRSP(0,SBR)    ERROR PATTERN GENERATION
         DC    H'214'                   ERROR 214
MAXCH1   LM    REGONE,RETURN,MCHSAV     RESTORE REGISTERS
         BR    RETURN                   RETURN
         SPACE 2
* VARIABLES AND CONSTANTS
         SPACE
MCHSAV    DS   6F                       SAVE AREA FOR REGISTERS
         EJECT
         DS    0H
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        SEMICOLON COUNTER HANDLING                                   *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL RETURN,SCHDL(SBR)
*              SET SEMICOLON COUNTER AND MOVE SOURCE POINTER
*              IN SOURCE STRING
* GENERATES SEMICOLON TRACE IF OPTION SPECIFIED
*
         SPACE 2
SCHDL    EQU   *-SBRPOOL
         ST    RETURN,SCHDLR(SBR)       SAVE RETURN ADDRESS
         MVC   SCSC(2,WAREG),1(SOURCE)  STORE SEMICOLON NR
         LA    SOURCE,2(SOURCE)         STEP SOURCE POINTER
*
*              GENERATE BRANCH TO TRACE-ROUTINE
*
         MVC   SCHDL1(2),SCSC(WAREG)    SC NR TO GENERATED CODE
         TM    HCOMPMOD+2(WAREG),NOTEST
         BO    SCHDL1+2                 NO SEMICOLON TRACE GEN
         BAL   INFORM,GENTXT6(SBR)
         BAL   BRR,TRACE(FSA)           **GENERATED CODE**
SCHDL1   DC    H'0'                     **GENERATED CODE**
         SPACE
         L     RETURN,SCHDLR(SBR)
         BR    RETURN
         SPACE
         DS    0F
SCHDLR   EQU   *-SBRPOOL                TO SAVE RETURN ADDRESS
         DS    F
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 1                                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* LOAD IN W-PLACE THE DISPLACEMENT OF AN OPERAND THAT IS NOT AN ADDRESS
* LOAD IN V-PLACE AA OR 99 DEPENDING ON WHERE THE VARIABLE,CONSTANT OR
* INTERMEDIATE RESULT IS AND GENERATES A LOADING OF GDSA IF NECESSARY
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTINE1(0,SBR)
         SPACE
ROUTINE1 EQU   *-SBRPOOL
         MVC   WPLACE(2,WAREG),3(OPDK)  MOVE DISPL OF LO TO W
GPE2     MVI   VPLACE(WAREG),X'AA'      MOVE CDSA REG TO V
         CLC   2(1,OPDK),SPBNST+1(WAREG)   IS PBN OF LO CDSA
          BCR   8,RETURN                 RETURN IF CURRENT DSA
GPE3     MVI   VPLACE(WAREG),X'99'      MOVE GLOBAL DSA REG TO V
         CLI   GPBN+1(WAREG),X'FF'      IS C(GDSA) DESTROYED
         BE    GPC3                     BRANCH IF DESTROYED
         CLC   GPBN(1,WAREG),2(OPDK)    COMPARE GDSA WITH PBN OF LO
         BCR   8,RETURN                RETURN IF EQUAL
GPC31    SR    R1,R1                    CLEAR R1
         ST    RETURN,RETADR+4(0,WAREG) STORE RETURN ADDRESS
         MVC   GPBN(1,WAREG),2(OPDK)    KEEP NEW LOADED GDSA
         IC    R1,2(0,OPDK)             LOAD IN R1 PBN OF LO
         SLA   R1,3                     MULTIPLY BY 8
         STH   R1,WORKPL(0,WAREG)      PREPARE INSTRUCTION
         MVC   GPC4+2(2),WORKPL(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)    GENERATE
GPC4     L     GDSA,0(PBT,0)
         L     RETURN,RETADR+4(0,WAREG) LOAD RETURN ADDRESS
         BR    RETURN                   RETURN
GPC3     MVI   GPBN+1(WAREG),X'00'      RECONSTRUCT GDSA
         B     GPC31
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 2                                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* GENERATES A LOAD INSTRUCTION INTO THE FLOATING POINT REGISTER
* SPECIFIED BY R14 OF AN OPERAND THAT IS AN ADDRESS- ADJUSTS THE
* OPERAND, STORES OPERAND STACK ADDRESS INTO RUTR
*                                                                     *
*                                                                     *
* CAL    BAL   RETURN,ROURINE2(0,SBR)
         SPACE 2
ROUTINE2 EQU   *-SBRPOOL
         ST    RETURN,RETADR+8(WAREG)        STORE RETURN ADDRESS
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTINE3(0,SBR)        BRANCH TO ROUTINE NR.3
GQE3     SLL   R14,1                         INTRODUCE OPDK ADD IN RUTR
         ST    OPDK,RUTR(R14,WAREG)
         SLL   R14,3                         PREPARE INSTRUCTION
         STC   R14,GQD3+1
         MVN   GQD3+1(1),VPLACE(WAREG)
         MVC   GQD3+2(2),WPLACE(WAREG)
         BAL   INFORM,GENTXTP4(0,SBR)
GQD3     LD    0,0(0,0)                      ***GENERATE***
GQF3     SRL   R14,4
         SH    OPDK,CON5(0,SBR)              REDUCE OPDK
         STH   P,WORKPL(0,WAREG)             INTROD. P INTO OPDK ENTRY
         MVC   8(2,OPDK),WORKPL(WAREG)
         MVZ   8(1,OPDK),GQD3+1              INTROD. REG. NUMBER
         MVC   7(1,OPDK),SPBNST+1(WAREG)     INTROD. PBN
         OI    5(OPDK),X'80'                 ADJUST OPDK ENTRY
         NI    5(OPDK),X'9F'
         L     RETURN,RETADR+8(WAREG)        LOAD RETURN ADDRESS
         BR    RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 3
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* LOAD IN W-PLACE ZERO. LOAD IN V-PLACE 88. GENERATES A LOADING OF ADR
* IF NECCESSARY, IN THIS CASE THE OPERAND IS AN ADDRESS
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN, ROUTINES3(0,SBR)
         SPACE
ROUTINE3 EQU   *-SBRPOOL
         ST    RETURN,RETADR+12(0,WAREG)   STORE RETURN ADDRESS
         TM    0(OPDK),X'40'             IS ADDRESS OF LO IN ADR
         BO    GRC3                      BRANCH IF NOT
         MVI   RII(WAREG),X'00'          CLEAR RIT OF ADR
GRE3     SH    P,ONEENTRY(0,WAREG)       REDUCE P BY 8
GRG2     MVI   VPLACE(WAREG),X'88'       V EQUAL ADR
         MVC   WPLACE(2,WAREG),ZEROHW(WAREG)  W EQUAL ZERO
         L     RETURN,RETADR+12(0,WAREG)   LOAD RETURN ADDRESS
         BR    RETURN                    RET
GRC3     TM    RII(WAREG),X'01'          IS ADR FREE
         BZ    GRD31                    BRANCH IF FREE
GRC4     ST   R14,RETADR3
         BAL   RETURN,ROUTIN10(0,SBR)
         L     R14,RETADR3
GRD31    BAL   RETURN,ROUTINE1(0,SBR)    BRANCH TO ROUTINE1
         MVC   GRD3+2(2),WPLACE(WAREG)  MOVE DISPLACEMENT
         MVN   GRD3+1(1),VPLACE(WAREG)   MOVE BASE REG
         BAL   INFORM,GENTXT4(0,SBR)    GENERATE
GRD3     L     ADR,0(0,0)               ***GENERATE***
         ST    OPDK,RUTI+32(0,WAREG)                               5601
         B     GRE3
         DS    0F
RETADR3  DS    F
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 4
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* GENERATES A LOAD INSTRUCTION INTO THE FLOATING POINT REGISTER
* SPECIFIED BY R14 OF AN OPERAND THAT IS NOT AN ADDRESS- ADJUSTS THE
* OPERAND AND STORES THE OPERAND STACK ADDRESS INTO RUTR
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTINE4(0,SBR)
         SPACE
ROUTINE4 EQU   *-SBRPOOL
         ST    RETURN,RETADR+8(WAREG)        STORE RETURN ADDRESS
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTINE1(0,SBR)        BRANCH TO ROUTINE NR1
         OI    1(OPDK),X'30'                SET TO VARIABLE
         B     GQE3                          BRANCH TO ROUTINE NR2
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 5
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* GENERATES A LOAD INSTRUCTION INTO A GENERAL PURPOSE REGISTER
* SPECIFIED BY R14 OF AN OPERAND THAT IS NOT AN ADDRESS- ADJUSTS THE
* OPERAND AND STORES THE OPERAND STACK ADDRESS INTO RUTI
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTINE5(0,SBR)
         SPACE
ROUTINE5 EQU   *-SBRPOOL
         ST    RETURN,RETADR+8(WAREG)        STORE RETURN  ADDRESS
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTINE1(0,SBR)        BRANCH TO ROUTINE NR.1
         OI    1(OPDK),X'30'                SET TO VARIABLE
GTE3     SLL   R14,2                         INTRODUCE OPDK ADD IN RUTI
         ST    OPDK,RUTI(R14,WAREG)
         SLL   R14,2                         PREPARE INSTRUCTION
         STC   R14,GTD3+1
         STC   R14,GQD3+1
         MVN   GTD3+1(1),VPLACE(WAREG)
         MVC   GTD3+2(2),WPLACE(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)
GTD3     L     0,0(0,0)                      ***GENERATE***
         B     GQF3                          BRANCH TO ROUTINE NR.2
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 6
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* GENERATES A LOAD INSTRUCTION INTO A GENRAL PURPOSE REGISTER
* SPECIFIED BY R14 OF AN OPERAND THAT IS AN ADDRESS- ADJUSTS THE
* OPERAND AND STORES THE OPERAND STACK ADDRESS INTO RUTI.
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTINE6(0,SBR)
         SPACE
ROUTINE6 EQU   *-SBRPOOL
         ST    RETURN,RETADR+8(WAREG)        STORE RETURN ADDRESS
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTINE3(0,SBR)        BRANCH TO ROUTINE NR 3
         B     GTE3                          BRANCH TO ROUTINE NR 5
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 7
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* LOADS INTO R14 THE NUMBER OF THE NEXT GENERAL PURPOSE REGISTER TO BE
* USED ACCORDING TO CII. IF IT IS OCCUPIED IT BRANCHES TO ROUTINE NR.
* 9 THAT GENERATES A STORE INSTRUCTION. CII AND RII ARE SET. RESERVES
* ONE OBJECT TIME STACK ENTRY.
*                                                                     *
*                                                                     *
* CALL   BALL  RETURN,ROUTINE7(0,SBR)
         SPACE
ROUTINE7 EQU   *-SBRPOOL
         SR    R14,R14
         CLI   CII+1(WAREG),X'07'            CHECK IF CII IS 7
         BE    GVC2                          BRANCH IF CII IS 7
         IC    R14,CII+1(0,WAREG)            INCREASE CII BY ONE
         LA    R14,1(0,R14)
GVC2     STC   R14,CII+1(0,WAREG)
         LA    R15,1                         LOAD ONE INTO R15
         SLL   R15,0(R14)                    GENERATE MASK
         STC   R15,GVC21+1
GVC21    TM    RII+1(WAREG),X'00'            IS GPR OCCUPIED
         BZ    GVE2                          BRANCH IF NOT OCCUPIED
         ST    RETURN,RETADR+28(0,WAREG)     STORE RETURN ADDRESS
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         L     RETURN,RETADR+28(0,WAREG)     LOAD RETURN ADDRESS
GVE2     OC    RII+1(1,WAREG),GVC21+1        SET TO ONE RII
GVF2     AH    P,ONEENTRY(0,WAREG)           INCREASE P
         BR    RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR.8
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* THE LAST GENERAL PURPOSE REGISTER RESERVED IS RELEASED. CII AND RII
* ARE SET. ONE OBJECT STACK ENTRY IS RELEASED
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTINE8(0,SBR)
         SPACE
ROUTINE8 EQU   *-SBRPOOL
         SR    R14,R14                        CLEAR R14
         IC    R14,CII+1(0,WAREG)            LOAD CII INTO R14
         LA    R15,1                        CLEAR RII OF LO
         SLL   R15,0(R14)
         STC   R15,GWD51+1
         XI    GWD51+1,X'FF'
GWD51    NI    RII+1(WAREG),X'00'
         SH    P,ONEENTRY(0,WAREG)           REDUCE P
GWD5     CLI   CII+1(WAREG),X'00'            IS CII EQUAL TO ZERO
         BZ    GWD3                          BRANCH IF YES
         BCTR  R14,0                         REDUCE BY ONE
         STC   R14,CII+1(0,WAREG)            STORE NEW CII
         SRL   R15,1                   IS GPR INDICATED BY
GWD6     STC   R15,GWD4+1                    CII FREE
GWD4     TM    RII+1(WAREG),X'00'
         BZ    GWD5                          BRANCH IF FREE
         BR    RETURN                        RETURN
GWD3     MVI   CII+1(WAREG),X'07'            MAKE CII = 7
         LA    R14,7
         CLI   RII+1(WAREG),X'00'            ARE ALL GPR FREE
         BCR   8,RETURN                       RETURN IF ALL FREE
         LA    R15,128                       LOAD MASK
         B     GWD6
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 10
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* CLEARS RII OF ADR, LOADS 8 INTO R14 AND BRANCHES TO ROUTINE 9-
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTIN10(0,SBR)
         SPACE
ROUTIN10 EQU   *-SBRPOOL
         MVI   RII(WAREG),X'00'
         LH    R14,CON8(0,SBR)
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 9
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* GENERATES CODE TO STORE GENERAL PURPOSE REGISTER SPECIFIED BY 214
* IF THE PBN IS NOT ZERO- IF THE PBN IS ZERO IT GENERATES A MOVE
* INSTRUCTION- THE OPERAND IS ADJUSTED
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTIN9(0,SBR)
         SPACE
ROUTINE9 EQU   *-SBRPOOL
         ST    RETURN,RETADR+36(0,WAREG)     STORE RETURN ADDRESS
         SLL   R14,2                         MULTIPLY BY 4
         LA    R15,RUTI(0,WAREG)             LOAD ADD OF RUTI
         L     R15,0(R14,R15)                LOAD ADD OF OPD TO STORE
         SLL   R14,2                         PREPARE INSTRUCTION
         NI    3(R15),X'0F'
         ST    R15,RETADR+48(WAREG)
         TM    2(R15),X'FF'
         BZ    GXC4
         LA    R14,10(0,R14)
         STC   R14,GXC3+1
         MVC   GXC3+2(2),3(R15)              PREPARE INSTRUCTION
         BAL   INFORM,GENTXT4(0,SBR)
GXC3     ST    0,0(CDSA,0)                   ***GENERATE***
         B     HBC2
GXC4     MVC   GXC5+2(2),3(R15)
         OI    GXC5+2,X'A0'
         MVI   GXC5+1,X'07'
         TM    HCOMPMOD(WAREG),X'02'
         BO    GXC6
         MVI   GXC5+1,X'03'
GXC6     NI    0(R15),X'DF'
         MVC   2(1,R15),SPBNST+1(WAREG)
         BAL   INFORM,GENTXT6(0,SBR)
GXC5     MVC   0(4,CDSA),0(ADR)
         B     HBC2
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 11
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* LOADS INTO R14 THE NUMBER OF THE NEXT FLOATING POINT REGISTER TO BE
* USED ACCORDING TO CIR, IF IT IS OCCUPIED IT BRANCHES TO ROUTINE
* NR. 13  THAT GENERATES A STORE INSTRUCTION. CIR AND RIR ARE
* SET. ONE OBJECT TIME ENTRY IS RESERVED
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTIN11(0,SBR)
         SPACE
ROUTIN11 EQU   *-SBRPOOL
         SR    R14,R14                       CLEAR R14
         CLI   CIR+1(WAREG),X'06'           CHECK IF CIR IS 6
         BE    GZC2
         IC    R14,CIR+1(WAREG)              LOAD CIR INTO R14
         LA    R14,2(0,R14)                  INCREASE CIR BY 2
GZC2     STH   R14,CIR(0,WAREG)              STORE NEW CIR
         SRL   R14,1                         DIVIDE R14 BY 2
         LA    R15,1                         LOAD ONE INTO R15
         SLL   R15,0(R14)                    GENERATE MASK
         SLL   R14,1
         STC   R15,GZC21+1
GZC21    TM    RIR+1(WAREG),X'00'            IS FPR OCCUPIED
         BZ    GZE2                          BRANCH IF FPR FREE
         ST    RETURN,RETADR+44(0,WAREG)     STORE RETURN ADDRESS
         BAL   RETURN,ROUTIN13(0,SBR)        STOPREAL
         L     RETURN,RETADR+44(0,WAREG)     LOAD  RETURN ADDRESS
GZE2     OC    RIR+1(1,WAREG),GZC21+1
GZF2     AH    P,ONEENTRY(0,WAREG)          INCREASE P
         BR    RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 12
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* THE LAST FLOATING POINT REGISTER RESERVED IS RELEASED. CIR AND RIR
* ARE SET. ONE OBJECT STACK ENTRY IS RELEASED
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTIN12(0,SBR)
         SPACE
ROUTIN12 EQU   *-SBRPOOL
         LH    R14,CIR(0,WAREG)              LOAD INTO R14 CIR
         LA    R15,1                         CLEAR RIR OF BLO
         SRL   R14,1
         SLL   R15,0(R14)
         STC   R15,HAD4+1
         XI    HAD4+1,X'FF'
HAD4     NI    RIR+1(WAREG),X'00'
         SH    P,ONEENTRY(0,WAREG)           REDUCE P
         SLL   R14,1
HAD1     CLI   CIR+1(WAREG),X'00'
         BZ    HAD3                          BRANCH IF YES
         SH    R14,CON2(0,SBR)
         STC   R14,CIR+1(0,WAREG)
         SRL   R15,1
HAD0     STC   R15,HAD2+1
HAD2     TM    RIR+1(WAREG),X'00'
         BZ    HAD1
         BR    RETURN
HAD3     MVI   CIR+1(WAREG),X'06'            MAKE CIR=6
         LH    R14,CIR(0,WAREG)
         CLI   RIR+1(WAREG),X'00'
         BCR   8,RETURN
         LA    R15,8
         B     HAD0
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 14
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* LOAD ZERO INTO R14
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTIN14(0,SBR)
         SPACE
ROUTIN14 EQU   *-SBRPOOL
         SR    R14,R14
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 13
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* GENERATES CODE TO STORE FLOATING POINT REGISTER SPECIFIED BY R14
* THE OPERAND IS ADJUSTED
*                                                                     *
*                                                                     *
         SPACE
ROUTIN13 EQU   *-SBRPOOL                STORE EPR INDICATED BY R14
         ST    RETURN,RETADR+36(0,WAREG)     STORE RETURN ADDRESS
         SLL   R14,1                    MULTIPLY R14 BY 2
         LA    R15,RUTR(0,WAREG)         LOAD ADDRESS OF RUTR
         L     R15,0(R14,R15)           LOAD OPDK ADDRESS OF OPERAND
         SLL   R14,3                    SHIFT REG NR TO OREOARE INSTRUC
         LA    R14,10(0,R14)            INTRODUCE CDSA
         STC   R14,HBC3+1
         NI    3(R15),X'0F'
         MVC   HBC3+2(2),3(R15)
         ST    R15,RETADR+48(WAREG)
         BAL   INFORM,GENTXTP4(0,SBR)
HBC3     STD   0,0(CDSA,0)
HBC2     L     R15,RETADR+48(WAREG)
         XI    0(R15),X'C0'
         MVC   WORKPL(2,WAREG),3(R15)
         BAL   RETURN,MAXCH(0,SBR)
         SRL   R14,4
         L     RETURN,RETADR+36(0,WAREG)
         BR    RETURN                   RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              ROUTINE NR. 15
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                                                                     *
* IF THE OPERAND IS AN ADDRESS IT BRANCHES TO ROUTINE NR.3   IF THE
* OPERAND IS NOT AN ADDRESS AND IS IN A REGISTER IT GETS THE REGISTER
* NUMBER TO V-PLACE, ELSE IT BRANCHES TO ROUTINE NR. 1
*                                                                     *
*                                                                     *
* CALL   BAL   RETURN,ROUTIN15(0,SBR)
ROUTIN15 EQU   *-SBRPOOL
         TM    0(OPDK),X'20'
         BO    ROUTINE3(0,SBR)
         TM    0(OPDK),X'40'
         BZ    ROUT151
         TM    0(OPDK),X'80'
         BO    ROUTINE1(0,SBR)
         SH    P,ONEENTRY(WAREG)
         B     ROUTINE1(0,SBR)
ROUT151  IC    R15,3(OPDK)              GET
         SRL   R15,4                        REG
         STC   R15,VPLACE(WAREG)                NUMBER
         MVZ   VPLACE(1,WAREG),3(OPDK)                 TO VPLACE
         BR    R3                       RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              DECOMPOSE OPERAND BY MOVING ITS PARTS
*              INTO LOW ENDS OF HALFWORDS
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,DECOMP(0,SBR)                                   *
         SPACE 2
DECOMP   EQU   *-SBRPOOL
         MVC   OPDPBN+1(1,WAREG),2(OPDK)    MOVE PBN
         MVC   OPDADR(2,WAREG),3(OPDK)      MOVE ADDRESS
         LH    R1,OPDADR(WAREG)
         N     R1,HEXFFF(SBR)
         STH   R1,OPDLN(WAREG)              LABEL NUMBER
         BR    RETURN
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              STACK ALL PURPOSE IDENTIFIER (API)
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,STACKAPI(SBR)
         SPACE
STACKAPI EQU   *-SBRPOOL
         SH    OPDK,CON5(SBR)
         CR    OPTK,OPDK
         BNL   STACKOFL(SBR)
         MVC   0(5,OPDK),API(SBR)
         BR    RETURN
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        PROGRAM BLOCK NUMBER HANDLING                                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,PBNHDL(SBR)
* PROGRAM BLOCK NUMBER HANDLING INSERTS NEW PBN IN WORKAREA,SPBNST.
* SAVES REGISTER P IN PBTAB2 AND INSERTS NEW OBJECT TIME STACK POINTER
* VALUE TO P
         SPACE
PBNHDL   EQU   *-SBRPOOL
         SR    R2,R2
         IC    R2,3(SOURCE)
         CLI   0(SOURCE),X'0D'          IS SOURCE OPERATOR BETA
         BE    PBNHDL1(SBR)             YES
         CLI   0(SOURCE),X'2A'          IS SOURCE OPERATOR EPSILON
         BNE   PBNHDL2(SBR)             NO
*                                       (=BRANCH IF OPTR IS PI OR PHI)
PBNHDL1  EQU   *-SBRPOOL
         IC    R2,1(SOURCE)             OPERATOR IS BETA OR EPSILON
         LA    SOURCE,1(SOURCE)
PBNHDL2  EQU   *-SBRPOOL
         LH    R1,SPBNST(WAREG)         STORE
         SLL   R1,1                           OLD
         STH   P,PBTAB2(R1,WAREG)                 P-VALUE
         STC   R2,SPBNST+1(WAREG)       INSERT NEW PBN
         SLL   R2,1                     GET DISP IN PBTAB2
         LH    P,PBTAB2(R2,WAREG)       LOAD NEW P-VALUE
         TM    HCOMPMOD(WAREG),X'80'    CMT
         BCR   1,RETURN                 FALSE
         B     CLEARRG(SBR)             CLEAR REGISTERS RETURN DIRECT
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              PARAMETERLESS PROCEDURE STATEMENT HANDLING
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,PLPRST(SBR)
*  CHECKS THAT OPERAND IS A PARAMETERLESS PROCEDURE.
*
         SPACE
PLPRST   EQU   *-SBRPOOL
         ST    RETURN,STRETURN(WAREG)   SAVE RETURN ADDRESS
         BAL   RETURN,DECOMP(SBR)       DECOMPOSE OPERAND
         TM    1(OPDK),X'C0'            TEST IF PROCEDURE IDENTIFIER
         BZ    PLPRST4(SBR)             ERROR IF NOT
         LH    RETURN,OPDADR(WAREG)
         SRL   RETURN,12                GET NR OF PARAMETERS
         LTR   RETURN,RETURN            IS NR ZERO
         BZ    PLPRST1(SBR)             YES
PLPRST0  EQU   *-SBRPOOL
         BAL   RETURN,SERR1(SBR)        ERROR
         DC    H'187'
         B     PLPRST3(SBR)
PLPRST4  EQU   *-SBRPOOL
         BAL   RETURN,SERR3(SBR)        ERROR
         DC    H'183'
         B     PLPRST3(SBR)
PLPRST1  EQU   *-SBRPOOL
         TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO    PLPRST3(SBR)             BRANCH IF FALSE
         BAL   RETURN,OPDREC(SBR)       OPERAND RECOGNIZER
         TM    3(OPDK),REGADRM          OPERAND IN ADR
         BZ    PLPRST3(SBR)             NO
         SH    P,ONEENTRY(WAREG)        RELEASE STACK
         XI    RII(WAREG),RIIADRM       ADR NOT OCCUPIED
PLPRST3  EQU   *-SBRPOOL
         L     RETURN,STRETURN(WAREG)   LOAD RETURN ADDRESS
         BR    RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              SUBROUTINE 'LOAD VPLACE, WPLACE'
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,LDVWPLC(0,SBR)
*
         SPACE
LDVWPLC  EQU   *-SBRPOOL
         ST    RETURN,LDRET
         BAL   RETURN,OPDREC(SBR)       OPERAND RECOGNIZER
         TM    0(OPDK),X'20'            ADDRESS OR VALUE
         BO    LDVW1                    ADDRESS
         SPACE
         TM    0(OPDK),X'40'            IS IT VALUE IN REG
         BO    LDVW3                    NO
         SR    R4,R4
         IC    R4,3(OPDK)               GET REG
         SRL   R4,4                             NR
         SLL   R4,1                     DOUBLE IT
         TM    1(OPDK),X'01'            IS VALUE INTEGER
         BZ    LDVW4                    NO
         SLL   R4,1                     YES, 4 TIMES REG NR
         ST    OPDK,RUTI(R4,WAREG)      INTRODUCE CORRECT OPDK ADDR
         B     LDVW3
LDVW4    ST    OPDK,RUTR(R4,WAREG)      INTRODUCE CORRECT OPDK ADDR
LDVW3    BAL   RETURN,CLEARRG(SBR)      CLEAR REGISTERS
         BAL   RETURN,ROUTINE1(SBR)     USE ROUTINE 1 TO LOAD VW-PLACE
         B     LDVWR
LDVW1    CLI   2(OPDK),X'00'            FUNCTION VALUE IN FSA
         BNE   *+16                                                0216
         ST    OPDK,RUTI+32(WAREG)      INTRODUCE CORRECT OPDK ADD 0216
         CLI   0(SOURCE),X'25'          SOURCE OPERATOR COMMA      0216
         BE    LDVW3                    YES                        0216
         SPACE
         TM    0(OPDK),X'40'            IS ADDRESS IN STACK
         BO    LDVW2                    YES
         SPACE
         MVI   VPLACE(WAREG),X'88'      ADDRESS IN REG ADR
         MVC   WPLACE(2,WAREG),ZEROHW(WAREG)
         B     LDVWR
         SPACE
LDVW2    MVI   VPLACE(WAREG),X'AA'      ADDRESS
         MVC   WPLACE(2,WAREG),3(OPDK)          IN STACK
         SPACE
LDVWR    L     RETURN,LDRET
         BR    RETURN
         SPACE
LDRET    DS    F
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*               SUBROUTINES FOR MOVING STACK POINTERS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MOVEOPTK EQU   *-SBRPOOL           ENTRY FOR MOVING OPERATOR STACK PTR
          LA    OPTK,1(OPTK)
          B     MOVERET(SBR)
MOVEOPDK EQU    *-SBRPOOL          ENTRY FOR MOVING OPDSTACK POINTER
          SH    OPDK,CON5(SBR)
MOVERET   EQU   *-SBRPOOL
         CR    OPTK,OPDK
          BNL   STACKOFL(SBR)
          BR    RETURN
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        TARITHM                                                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,TARITHM(SBR)    RETURN TO RETURN IF OPERAND
* INTEGER OR REAL.OTHERWISE RETURN TO RETURN+4 AFTER ERROR MESSAGE
* 163 IS GIVEN
* CHECK ALSO FOR ARRAY OR PROCEDURE IDENTIFIER
*
         SPACE
TARITHM  EQU   *-SBRPOOL           TEST IF OPERAND IS ARETHMETIC
         TM    0(OPDK),APIMASK          API IN STACK               5603
         BCR   1,RETURN                 YES ,RETURN NO ERROR
         TM    1(OPDK),X'03'            OPERAND ARITHMETIC
         BM    PROGARR                  YES CONTINUE CHECK
         ST    RETURN,SAVTARIT          SAVE RETURN
         BAL   RETURN,SERR2(SBR)
         DC    H'163'                   ERROR 163
         L     RETURN,SAVTARIT
         B     4(RETURN)                RETURN ERROR MESSAGE 163 GIVEN
PROGARR  LA    R1,4(RETURN)
         ST    R1,SAVTARIT              ERROR RETURN FROM ARRTEST
         B     ARRTEST1+4(SBR)          CHECK FOR PROCEDURE OR ARRAY
SAVTARIT EQU   SAVTRREI                 SAVE AREA FOR RETURN
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        LATRES                                                       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,LATRES(0,SBR)
*              RESERVE ONE ENTRY IN LABEL ADDRESS TABLE
*              AND CHECK IF OVERFLOW
*
         SPACE
LATRES   EQU   *-SBRPOOL           RESERVE NEXT LAT-ENTRY
         LH    R1,LN(0,WAREG)           GET CURRENT LN
         LA    R1,4(0,R1)               ADD ONE ENTRY
         STH   R1,LN(0,WAREG)           STORE NEW LN
         SPACE
LATOVFLO EQU   *-SBRPOOL           CHECK IF LAT-OVERFLOW
         TM    LN(WAREG),X'F0'          IS LAT FULL
         BCR   8,RETURN                 NO
         ST    RETURN,LATRET            SAVE RETURN ADDRESS
         BAL   RETURN,SERR1(SBR)        GENERATE ERROR PATTERN
         DC    H'216'
         SPACE
         LA    R1,LATBEG                RESET POINTER
         STH   R1,LN(0,WAREG)                         TO FIRST ENTRY
         SPACE
         L     RETURN,LATRET
         BR    RETURN
         SPACE
LATRET   EQU   LDRET
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        ARRAY AND PROCEDURE TEST                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,ARRTEST1(0,SBR)
*
         SPACE
ARRTEST1 EQU   *-SBRPOOL
         ST    RETURN,SAVTARIT          SAVE RETURN
         TM    0(OPDK),APIMASK          IS OPERAND API             5603
         BCR   1,RETURN                 RETURN IF API
         TM    1(OPDK),X'C0'                 PROCEDURE             0224
         BC    9,*+12                                              0224
         TM    1(OPDK),X'40'                 STANDARD PROCEDURE    0224
         BZ    PROCTES1                      YES ERROR             0224
         TM    0(OPDK),X'C0'            IDENTIFIER FROM ITAB
         BCR   12,RETURN                NO RETURN
         TM    1(OPDK),X'04'
         BZ    PROCTEST                 NO ARRAY CONTINUE TEST
         BAL   RETURN,SERR3(0,SBR)
         DC    H'196'
ARRTEST3 L     RETURN,SAVTARIT          RESTORE RETURN
         BR    RETURN
PROCTEST  TM    1(OPDK),X'C0'           PROCEDURE
         BCR   8,RETURN                 NO RETURN
         TM    3(OPDK),X'F0'            PARAMETERLESS
         BCR   8,RETURN                 YES RETURN
PROCTES1 BAL   RETURN,SERR1(SBR)        ERROR 187
         DC    H'187'
         B     ARRTEST3
ARRTEST2 EQU   *-SBRPOOL
         ST    RETURN,RETARR2
         LA    OPDK,5(0,OPDK)
         BCTR  OPTK,0
         BAL   RETURN,ARRTEST1(0,SBR)
         LA    OPTK,1(0,OPTK)
         SH    OPDK,CON5(0,SBR)
         L     RETURN,RETARR2
         B     ARRTEST1(0,SBR)
         SPACE
         DS    0F
RETARR2  DS    F
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        OPERAND TEST                                                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* CALL   BAL   RETURN,OPDTESF(0,SBR)                                  *
         SPACE 2
OPDTESF  EQU   *-SBRPOOL           GIVE ERROR MESSAGE 162 IF OPERAND
*                                  IS MISSING,STACK ALL PURPOUSE IDENT.
*                                  AND RETURN VIA REG.RETURN IF NO
*                                  ERROR RETURN VIA REG 3
OPDTEST  EQU   OPDTESF
         TM    HCOMPMOD(WAREG),X'01'     OPERAND PRESENT
         BCR   1,R3                     YES,RETURN
         ST    RETURN,STRETURN(WAREG)
         BAL   RETURN,SERR4(SBR)        ERROR 162
         DC    H'162'
         L     RETURN,STRETURN(WAREG)
         OI    HCOMPMOD(WAREG),X'01'    OPERAND SWITCH ON
         B     STACKAPI(SBR)            STACK API RETURN DIRECT
ERR166   EQU   *-SBRPOOL
BVB1     ST    RETURN,RETADR(0,WAREG)        STORE RETURN ADDRESS
         TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    BYB2                          BRANCH IF FALSE
         LA    OPDK,5(0,OPDK)                CLOPD
         NI    HCOMPMOD(WAREG),X'FE'         OPDFL=FALSE
BYB2     BAL   RETURN,SERR1(SBR)        ERROR 166
         DC    H'166'
         L     RETURN,RETADR(0,WAREG)        LOAD RETURN ADDRESS
         BR    RETURN                        RETURN
         TITLE 'IEX50, COMPILATION PHASE, DECISION MATRIXES'
IEX50001 CSECT
         SPACE
*  DECISION MATRICIES
         SPACE
DECAREA  EQU   *                   START OF DECICION AREA
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              PROGRAM CONTEXT COLUMN VECTOR                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DC    X'0A0A0A0A0A0A09120703030B000002020A0A0A0A0A0A080404'
         DC    X'121212120512060A0A0A0A0A121201120C0D0E0F1110000000'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              PROGRAM CONTEXT ROW VECTOR                             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DC    X'ABABABABABABABABABAB853926131313ABABABABABAB72ABAB'
         DC    X'ABABAB98ABABABABABABABAB00AB4C5FABABABABABAB000030'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              PROGRAM CONTEXT MATRIX                                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DC    X'00010454545454545454545454545454540354'
         DC    X'0001040407074B0707074B191810545453544B'
         DC    X'00011D1D06084B290C404B191C54541054544B'
         DC    X'00011A1A06084B290C404B171C17171754544B'
         DC    X'00011A1A064B11290C404B121C12121254544B'
         DC    X'00011A1A06084B290C404B121C12121254544B'
         DC    X'1B1E1A1A1B131429151616141C14141454544B'
         DC    X'5454545454545454555454541C545454545454'
         DC    X'00011D1D06084B290C404B1A1C54515454544B'
         DC    X'1F1E1F1F1F1F1F1F1F1F1F1F1C1F1F1F545416'
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              STATEMENT CONTEXT COLUMN VECTOR                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ADRSTC   EQU   *
         DC    X'090909090909010D030F0F0C0F0F0F0F0A0A0A0A0A0A060F0F'
         DC    X'0708070B000F0C0A0A0A0A0A05020F040E0C0C0C0F0F000000'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              STATEMENT CONTEXT ROW VECTOR                           *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DC    X'D0D0D0D0D0D0D0B03040D0D0D0D0D0D0D0D0D0D0D0D0D00060'
         DC    X'8090A0D0D0D0D0D0D0D0D0D0D0D0D0D02050D0C07010000033'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              STATEMENT CONTEXT MATRIX                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DC    X'22384B294B4B4B4B4B4B4B4B3E4B1C1B'
         DC    X'22384B294B3B544B4B4B4B4B1B543B1B'
         DC    X'224039294B394B4B4B21214B1B4B1C1B'
         DC    X'22404B2926264B4B4B214B4B1B4B1C1B'
         DC    X'5454543454345454545454541B543654'
         DC    X'22403D294B3D4B4B4B21214B1B4B1C1B'
         DC    X'4B4B4B294B4B284B4B4B4B1B1B4B1C1B'
         DC    X'22404B294B2B4B2B4B214B2B1B4B1C1B'
         DC    X'22404B294B4B4B4B2D214B1B1B4B1C1B'
         DC    X'22404B294B2F4B4B4B214B2F1B4B1C1B'
         DC    X'22404B294B314B4B4B2121311B4B1C1B'
         DC    X'22404B2933334B4B4B214B4B1B4B1C1B'
         DC    X'22404B294B4B544B4B214B4B1B241C1B'
         DC    X'224B4B4B4B4B4B4B4B4B4B4B474B1C47'
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              EXPRESSION CONTEXT COLUMN VECTOR                       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ADREXC   EQU   *
         DC    X'0B0B0C0C0C0D050F070F0F0F0F0F0F0F0E0E0E0E0E0E0F0F0F'
         DC    X'0F0F0F0F08090A00020304010F060F0F0F0F0F0F0F0F000000'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              EXPRESSION CONTEXT ROW VECTOR                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DC    X'A0A0B0B0B0C050E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0E0E0E0'
         DC    X'E0E0E0E06070800020304010E060E0E0E0E090E0E0E000003F'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              EXPRESSION CONTEXT MATRIX                              *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DC    X'4B4D4D4D4D404D29494D4D424343434D'
         DC    X'414C434343404C29494C4C424343434C'
         DC    X'414C4C4343404C29494C4C424343434C'
         DC    X'414C4C4C43404C29494C4C424343434C'
         DC    X'414C4C4C4C404C29494C4C424343434C'
         DC    X'4143434343404429501B1B424343431B'
         DC    X'4143434343404B29414E56424343431B'
         DC    X'4143434343404B29494B57424343431B'
         DC    X'4143434343404F29414F48424343434F'
         DC    X'4B3F3F3F3F403F29493F3F3F3F433F3F'
         DC    X'4B454545454045294945454543434545'
         DC    X'4B454545454045294945454545434545'
         DC    X'4B454545454045294945454545454545'
         DC    X'4B454545454045294945454243434A45'
         DC    X'4143434343404629464B464243434346'
         TITLE 'IEX50, COMPILATION PHASE, WORKAREA DSECT'
CPWORKAR DSECT
         SPACE
* DUMMY CONTROL SECTION TO PROVIDE ADDRESSABILITY OF WORKAREA
*        AUG 16 1966
         SPACE
WKST     EQU   *
         DS    0F                       WORKAREA START
SAVEAREA EQU   *-WKST                               ***
         DS    F
         DS    F         HIGHER LEVEL SAVEAREA ADDR   *
         DS    F         LOWER LEVEL SAVEAREA ADDR    *
         DS    F         RETURN ADDR                  *
         DS    F         ENTRY POINT ADDR             *
SVEREG0  EQU   *-WKST    ***                          *
         DS    F
SVEREG1  EQU   *-WKST      *                          *
         DS    F
SVEREG2  EQU   *-WKST      *                          *
         DS    F
SVEREG3  EQU   *-WKST      *                          *  SAVEAREA
         DS    F
SVEREG4  EQU   *-WKST      *                          *
         DS    F
SVEREG5  EQU   *-WKST      *                          *
         DS    F
SVEREG6  EQU   *-WKST      * SAVEAREA FOR REGISTERS   *
         DS    F
SVEREG7  EQU   *-WKST      *                          *
         DS    F
SVEREG8  EQU   *-WKST      *                          *
         DS    F
SVEREG9  EQU   *-WKST      *                          *
         DS    F
SVEREG10 EQU   *-WKST      *                          *
         DS    F
SVEREG11 EQU   *-WKST      *                          *
         DS    F
SVEREG12 EQU   *-WKST    ***                        ***
         DS    A
         SPACE
LINADD   EQU   *-WKST    ***
         DS    A
         DS    A           *
         DS    A           *
         DS    A           *
INADD    EQU   *-WKST      *  ADDRESSES OF DATA CONTROL BLOCKS
         DS    A
