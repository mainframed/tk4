 TITLE 'IEX30, SCAN III'
*                                                                     *
*STATUS: CHANGE LEVEL 000.                                            *
*                                                                     *
*FUNCTION/OPERATION: THE SOURCE PROGRAM IS TRANSFORMED FROM MODIFICA- *
*   TION LEVEL 1 INTO MODIFICATION LEVEL 2. MAIN FUNCTIONS: EXTERNAL  *
*   NAMES OF IDENTIFIERS ARE REPLACED BY THE INTERNAL NAMES CONTAINED *
*   IN THE ITAB-ENTRY OF THE IDENTIFIER, AND CONSTANTS ARE REPLACED BY*
*   INTERNAL NAMES CONSTRUCTED IN IEX30.                              *
*   OBJECT CODE IS PRODUCED FROM THE CONSTANT POOL IF ANY OF THE PARA-*
*   METERS DECK OR LOAD IS SPECIFIED IN THE EXEC-CARD.                *
*   FOR STATEMENTS ARE CLASSIFIED FOR FUTHER USE BY IEX50.            *
*   THE SUBSCRIPT TABLE (SUTAB)AND THE LEFT VARIABLE TABLE (LVTAB) ARE*
*   CONSTRUCTED FOR FUTHER USE BY IEX40.                              *
*   SOURCE PROGRAM ERRORS CAUSES GENERATION OF ERROR PATTERNS FOR     *
*   FUTHER USE BY 1EX31.                                              *
*                                                                     *
*ENTRY POINT:                                                         *
*        IEX30000.                                                    *
*                                                                     *
*INPUT: THE SOURCE PROGRAM MODIFICATION LEVEL 1 IS READ IN FROM       *
*   SYSUT1.                                                           *
*   THE IDENTIFIER TABLE (ITAB) IS READ IN FROM SYSUT3.               *
*                                                                     *
*OUTPUT: THE SOURCE PROGRAM MODIFICATION LEVEL 2 IS WRITTEN OUT ON    *
*   SYSUT2.                                                           *
*   OBJECT TXT-RECORDS IS WRITTEN ON SYSLIN OR/AND SYSPUNCH IF THE    *
*   PARAMETERS LOAD OR/AND DECK ARE SPECIFIED IN THE EXEC-CARD.       *
*   THE SUBSCRIPT TABLE (SUTAB) IS WRITTEN OUT ON SYSUT3. A LINEAR    *
*   SUBSCRIPT EXPRESSION ENCOUNTED IN A FOR STATEMENT THAT IS OPTIMI- *
*   ZABLE IN REGARD TO SUBSCRIPTS WILL GENERATE AN ENTRY IN THIS      *
*   TABLE.                                                            *
*   THE LEFT VARIABLE TABLE (LVTAB) IS WRITTEN OUT ON SYSUT3. INTEGER *
*   LEFT VARIABLES ENCOUNTED IN FOR STATEMENT THAT IS OPTIMIZABLE IN  *
*   REGARD TO SUBSCRIPTS WILL GENERATE AN ENTRY IN THIS TABLE.        *
*                                                                     *
*EXTERNAL ROUTINES: THE INTERRUPT ROUTINE OF IEX00 ARE USED FOR ALL   *
*   INTERRUPTS EXCEPT FLOATING POINT OVERFLOW.                        *
*                                                                     *
*EXITS-NORMAL: CONTROL IS ALWAYS GIVEN TO IEX31 BY MEANS OF           *
*        XCTL  EP=IEX31.                                              *
*                                                                     *
*TABLES/WORKAREAS: GROUP TABLE (GPTAB) CONSTRUCTED IN IEX11, USED TO  *
*   DIAGNOSE BRANCHES INTO FOR STATEMENTS.                            *
*   SCOPE TABLE (SPTAB) CONSTRUCTED IN IEX11, USED TO CHECK SUBSCRIPT *
*   EXPRESSIONS FOR POSSIBLE OPTIMIZATION.                            *
*   FOR STATEMENT TABLE (FSTAB) CONSTRUCTED IN IEX30 COMPLEATED IN    *
*   IEX40 AND FINALLY USED IN IEX50, CONTAINS A CLASSIFICATION BYTE   *
*   FOR EVERY FOR STATEMENT                                           *
*   ERROR POOL CONSTRUCTED IN IEX30 AND USED IN IEX31, CONTAINS ERROR *
*   PATTERNS GENERATED FROM SOURCE PROGRAM ERRORS.                    *
*   CONSTANT POOL INTERNAL TABLE IN IEX30. THE FIRST APPEARANCE OF A  *
*   CONSTANT IN THE SOURCE STREAM GENERATES AN ENTRY IN THE TABLE. THE*
*   RELATIVE ADDRESS OF THE CONSTANT POOL ENTRY IS USED IN CONSTRUCT- *
*   ING THE INTERNAL NAME OF A CONSTANT.                              *
*   CRITICAL VARIABLE TABLE (CRIDTAB) INTERNAL TABLE IN IEX30. DURING *
*   THE TREATMENT OF A FOR STATEMENT THE TABLE CONTAINS ENTRIES       *
*   CORRESPONDING TO THE IDENTIFIERS IN THE FOR LIST.                 *
*                                                                     *
*ATTRIBUTES: NONE.                                                    *
*                                                                     *
*NOTES: THE OPERATION OF THIS MODULE DOES NOT DEPEND ON ANY SPECIAL   *
*   REPRESENTATION OF THE CHARACTER SET.                              *
*   THIS MODULE IS ONLY INTENDED TO BE EXECUTED IN CONNECTION         *
*   WITH THE OTHER MODULES OF THE ALGOL COMPILER. IN PARTICULAR IT    *
*   REQUIRES THE COMMON WORKAREA.                                     *
*                                                                     *
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
ZINR     EQU   3                        INPUT RECORD POINTER REGISTER
ZOUR     EQU   4                        OUTPUT RECORD POINTER REGISTER
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                       BASE REGISTER
R11      EQU   11                       BASE REGISTER
R12      EQU   12                       BASE REGISTER
WAREG    EQU   13                       WORKAREA BASE REGISTER
R14      EQU   14
R15      EQU   15
WORKR    EQU   R5
WORKX    EQU   R6
         SPACE
*              LENGTHS OF VARIABEL AREAS
FIXITABL EQU   319                      LENGTH OF ITAB FIXED PART
         SPACE
*              BIT PATTERNS
ONEREC   EQU   X'40'                    SOURCE INPUT IN CORE STORAGE
MANYREC  EQU   X'BF'                    SOURCE INPUT ON SYSUT1
SYNTAX   EQU   X'80'                    SYNTAX CHECK MODE
SARRAY   EQU   X'80'                    HANDLING ARRAY DECLARATION
SSWITCH  EQU   X'40'                    HANDLING SWITCH DECLARATION
FF       EQU   X'FF'
         SPACE
*                                       SCALE FACTOR MASKS
SFSIGN   EQU   X'80'                    SIGNED SCALE FACTOR
SFL0     EQU   X'40'                    LEADING ZERO IN SCALE FACTOR
SF19     EQU   X'20'                    SIGNIFICANT DIGIT IN SCALE FAC.
SF       EQU   X'10'                    SCALE FACTOR PRESENT
SFDIGIT  EQU   X'60'
SFLSIGN  EQU   X'E0'
PRECERR  EQU   X'08'                    REAL CONSTANT EXCEEDS PRECITION
         SPACE
*              CLASSIFICATION MASKS OF I/O STATUS ON SYSUT3
READM    EQU   X'80'                    UNCHECKED READ OPERATION
WRITEM   EQU   X'40'                    UNCHECKED WRITE OPERATION
READC    EQU   X'20'                    CHECKED READ OPERATION
WRITEC   EQU   X'10'                    CHECKED WRITE OPERATION
         SPACE
*              FOR STATEMENT CLASSIFICATION MASKS
NOCOUNT  EQU   X'80'                    COUNTING LOOP IMPOSSIBLE
NOSUOP   EQU   X'40'                    NO SUBSCRIPT OPTIMIZATION
OUTOFFOR EQU   X'20'                    BRANCH OUT OF FOR STATEMENT
NORMAL   EQU   X'F0'                    NORMAL LOOP
STEPM    EQU   X'08'                    STEP IN FORLIST
WHILEM   EQU   X'84'                    WHILE IN FOR LIST
         EJECT
IEX30000 CSECT
*3491                                                              1511
*3491265600                                                        1513
* RELEASE 20 CHANGES                                             A32962
* 205400-206400                                                  A32962
START    BALR  R12,0
         USING *,R12
         USING IEX30001,R11
         USING IEX30002,R10
         USING WORKAREA,WAREG
         L     R11,ASEC1
         L     R10,ASEC2
         B     INITIATE
         EJECT
ZERO     DC    3H'0'
ONE      DC    H'1'
FIVE     DC    H'5'
SEVEN    DC    H'7'
EIGHT    DC    H'8'
NINE     DC    H'9'
TEN      DC    H'10'
ELEVEN   DC    H'11'
TWELVE   DC    H'12'
FIFTEEN  DC    H'15'
EIGHTEEN DC    H'18'
FIVSIX   DC    H'56'
SIXFOUR  DC    H'64'
TWOFIVFI DC    H'255'
C1792    DC    H'1792'
FOURK    DC    H'4096'
         SPACE
*              ERROR MESSAGE NUMBERS
INVOP    DC    H'80'                    SYNTAX ERROR IN OPERAND
UNDEFOP  DC    H'81'                    UNDEFINED IDENTIFIER
RANGEREA DC    H'82'                    REAL CONSTANT OUT OF RANGE
RANGEINT DC    H'83'                    INTEGER OUT OF RANGE
PRECREAL DC    H'84'                    PRECITION OF REAL TOO GREAT
GOTOFOR  DC    H'85'                    GO TO INTO FOR STATEMENT
MANYCON  DC    H'86'                    TOO MANY CONSTANTS
TABOVER  DC    H'87'                    OPTIMIZATION TABLE OVERFLOW
ARRAYERR DC    H'88'                    INVALID ARRAY LIST IDENTIFIER
SWITCHER DC    H'89'                    SWITCH DECLARATION ERROR
ITABOVER DC    H'213'                   ITAB OVERFLOW
TOOMANY  EQU   212                      TOO MANY ERRORS
TOOLONG  DC    H'215'                   TOO MUCH SOURCE OUTPUT
         SPACE
*              SUBSCRIPT TABLE
ZSUTAPO  DS    F                        CURRENT SUTAB PT
ZSUDAD   DS    F                        ADDRESS OF FIRST SUTAB ENTRY
ZSUTMAX  DS    F                        SUTAB END PT
SUSTRT   DS    F                        START ADDRESS OF SUTAB RECORD
SUKEY    DC    C'SUTB'                  SUTAB RECORD IDENTIFICATION
SULENGTH DC    F'0'                     ACCUMULATED LENGTH OF SUTAB
SUCNT    DC    H'0'                     NUMBER OF WRITTEN SUTAB RECORDS
         SPACE
*              LEFT VARIABLE TABLE
ZLESTA   DS    F                        ADDRESS OF FIRST LVTAB ENTRY
ZLEVA    DS    F                        CURRENT LVTAB PT
ZLEMAX   DS    F                        LVTAB END PT
LVSTRT   DS    F                        START ADDRESS OF LVTAB RECORD
LVKEY    DC    C'LVTB'                  LVTAB RECORD IDENTIFICATION
LVLENGTH DC    F'0'                     ACCUMULATED LENGTH OF LVTAB
LVCNT    DC    H'0'                     NUMBER OF WRITTEN LVTAB RECORDS
         SPACE
*              INPUT RECORD
ZIBRUN   DS    F                        START OF ACTIVE INPUT BUF
ZIBREAD  DS    F                        START OF NEXT INPUT BUFFER
         SPACE
*              OUTPUT RECORD
ZOBWORK  DS    F                        START OF ACTIVE OUTPUT BUFFER
ZOBWRITE DS    F                        START OF LAST OUTPUT BUFFER
ZFILE1   DS    F                        OUTPUT RECORD END - 1
ZFILE2   DS    F                        OUTPUT RECORD END - 2
ZFILE3   DS    F                        OUTPUT RECORD END - 3
ZFILE5   DS    F                        OUTPUT RECORD END - 5
ZFILE6   DS    F                        OUTPUT RECORD END - 6
ZFILE9   DS    F                        OUTPUT RECORD END - 9
ZOUTCOT  DC    H'1'                     OUTPUT RECORD NUMBER
         SPACE
*              IDENTIFIER TABLE
ZIBSTAO  DS    F                        ITAB START ADDRESS
ZITAN    DS    F                        ADDR OF ITAB ENTRY OF LAST ID.
ZCURITEN DS    F                        ADDRESS OF LAST ITAB ENTRY
ZITREC   DS    F                        START OF NEXT ITAB RECORD
ZITEND   DS    F                        ITAB END ADDRESS
ZCURITLE DS    H                        LENGTH OF LAST ITAB RECORD
         SPACE
*              ERROR MESSAGES
ZBEGERR  DS    F                        START OF VARIABLE INFORMATION
ZENDERR  DS    F                        END OF VARIABLE INFORMATION
ZERRONU  DS    H                        ERROR NUMBER
         SPACE
*              ARRAY IDENTIFIER STACK
ZARMAX   DC    A(ZARSTACK+28)           END ADDRESS IN ARIDSTACK
ZARNO    DC    A(ZARSTACK-7)            START ADDRESS OF ARIDSTACK
ZARSPO   DC    A(ZARSTACK-7)            CURRENT PT IN ARIDSTACK
ZPOSIX   DC    H'0'                     COMPONENT NUMBER IN ARRAY
ZARSTACK DS    CL35                     ARIDSTACK
         SPACE
*              SUBSCRIPT TEST ROUTIN2
SUBEND   DS    F                        SUBSCRIPT END ADDRESS
ADDEND   DS    3H                       SAVE AREA FOR ADDEND
FACTOR   DS    3H                       SAVE AREA FOR FACTOR
ZEROELEM DC    XL6'00C801000000'        INTERNAL CODE FOR +0
ONEELEM  DC    XL6'00C801000004'        INTERNAL CODE FOR +1
ZBRACK   DS    F                        SUBSCRIPT START ADDRESS - 1
         SPACE
ZSTO     DS    F                        TEMPORARY STORAGE
ZSTO1    DC    X'0670'                                           A32962
ZSTO2    DC    X'0240'                                           A32962
ZIGN     DC    H'0'                     CURRENT IDENTIFIER GROUP NUMBER
ZPOINT   DC    X'3E3E3E3E3E3E'
ZALLPUP  DC    X'91FF010000'            ALL PURPOSE IDENTIFIER
ZALLPU   EQU   ZALLPUP-6
ZIDEX    DS    37C                      WORKAREA
NUMBER   EQU   ZIDEX+1
OPSTART  DC    A(ZIDEX)
         SPACE
BRCNT    DS    H                        BRACKET COUNTER IN ARRAY DECL.
STATUS   DC    X'00'                    STATUS BYTE
CURPBN   DS    C                        PBN OF LAST BLOCK
ZCLOBRA  DC    X'00'                    SUBSCRIPT TEST BYTE
ZFORTEST DC    X'00'                    FOR STATEMENT TEST BYTE
ZLVOV    DC    X'00'                    SET X'FF' IF NO MORE SUBSC OPT
ZFSN     DS    C                        CURRENT FOR STATEMENT NUMBER
FSNEMBR  DS    C                        NUMBER OR EMBRACING BLOCK
IOBYTE   DS    C                        STATUS BYTE FOR SYSUT3
NOTEW    DS    F                        ID. OF LAST WRITTEN RECORD
NOTER    DS    F                        ID. OF LAST READ ITAB RECORD
         SPACE
*              CRITICAL VARIABLE TABLE
PFA      DS    F                        CURRENT CRIDTAB PT
PFANO    DS    F                        START ADDRESS OF CRIDTAB
PFAMAX   DS    F                        END ADDRESS OF CRIDTAB
ZFSPTR   DS    F                        PT TO CURRENT FSTAB ENTRY
ZFOCRI   DS    F
         SPACE
*              CONSTANT POOL
ZKOPOOL  DS    F                        START ADDRESS OF POOL
ZKOPEND  DS    F                        END ADDRESS OF POOL
ZLITSTA  DS    F                        START ADDRESS OF USED PART
ZTEXTCO  DS    F                        END ADDRESS OF TXT PIECE
ZKBNMAX  DS    H                        NUMBER OF NEXT POOL
TXTPUT   DC    H'56'                    LENGTH OF TXT PIECE
         SPACE
ZPACK    DS    D                        WORKAREA TO PACK NUMBERS
ZEROFLOA DC    D'0.0'
ZONEFLOA DC    D'1.0'
ZTEN9    DC    D'1.0E+9'
ZFLOFIEL DC    X'4E00000000000000'      WORKAREA FOR FLOATING CONVERS.
ROUND    DC    X'0000000080000000'      USED TO ROUND SHORT FORM REAL
ZWP      DS    F                        WORD PT IN CONSTANT POOL
ZDWP     DS    F                        DOUBLE WORD PT IN CONSTANT POOL
NSTART   DC    A(NUMBER)                PTR TO NUMBER
SCALEMSK DC    XL4'38'
LREAL    DC    F'8'                     SHORT PREC 4, LONG PREC 8
NREAL    DC    F'18'                    SHORT PREC 7, LONG PREC 18
ZLIRE    DS    H
ZINTYP   DC    X'C801'                  ID. OF INTEGER CONSTANT
ZREALTYP DC    X'C802'                  ID. OF REAL CONSTANT
SREF     DC    P'+1'                    PLUS
         DC    P'-1'                    MINUS, MUST FOLLOW SREF
SCATEST  DS    C                        SCALE FACTOR TEST BYTE
SCALEQ   DC    X'2E00'
SCALE    EQU   SCALEQ+1
MAXNR    DC    X'32313437343833363437'  INTERNAL CODE OF MAX INTEGER
SCAWORK  DS    10C                      STORE FOR SCALE FACTOR
ZTO      DS    F
ZEXCORR  DS    F
ZTOSCA   DS    F
SCAWORKA DC    A(SCAWORK+1)
         SPACE
OLDSPIE  DS    F                        ADDRESS OF OLD PICA
TABSIZE  DS    F                        ACCUMULATED SIZE OF TABLES
REGSAVE  DS    5F                       SAVE AREA FOR REGISTERS
SPECUSE  DC    XL4'06'
ALIGN    DC    F'0'                     FULL WORD ALIGNMENT
ALIGNH   EQU   ALIGN+2                  HALF WORD ALIGNMENT
         SPACE
ZEXTABP  DC    D'1.0E+1'
         DC    D'1.0E+2'                                           0892
         DC    D'1.0E+3'                                           0900
         DC    D'1.0E+4'                                           0908
         DC    D'1.0E+5'                                           0916
         DC    D'1.0E+6'                                           0924
         DC    D'1.0E+7'                                           0932
         SPACE
         DC    D'1.0E+8'                                           0940
         DC    D'1.0E+16'
         DC    D'1.0E+24'                                          0956
         DC    D'1.0E+32'                                          0964
         DC    D'1.0E+40'                                          0972
         DC    D'1.0E+48'                                          0980
         DC    D'1.0E+56'                                          0988
         DC    D'1.0E+64'                                          0996
         SPACE
ZEXTABN  DC    D'1.0E-1'
         DC    D'1.0E-2'                                           1024
         DC    D'1.0E-3'                                           1032
         DC    D'1.0E-4'                                           1040
         DC    D'1.0E-5'                                           1048
         DC    D'1.0E-6'                                           1056
         DC    D'1.0E-7'                                           1064
         SPACE
         DC    D'1.0E-8'                                           1072
         DC    D'1.0E-16'                                          1080
         DC    D'1.0E-24'                                          1088
         DC    D'1.0E-32'
         DC    D'1.0E-40'                                          1104
         DC    D'1.0E-48'                                          1112
         DC    D'1.0E-56'                                          1120
         DC    D'1.0E-64'                                          1128
GENER    EQU   *
         DC    X'5454546854685454'
         DC    X'3C606438541C2020'
         DC    8X'54'
         DC    X'245C543430'
         DC    8X'54'
         DC    X'4054544438282C545018480C'
         DC    9X'08'
         DC    X'00004C581014'
         DC    26X'04'
IDENTI   DC    45X'10'                                             1292
         DC    X'000C04'
         DC    13X'00'
         DC    X'080C0C'
         DC    26X'00'
DIG19    DC    45X'18'
         DC    X'000C10'                                           1372
         DC    13X'00'
         DC    X'140408'
         DC    26X'0C'
DIG0     DC    45X'1C'                                             1452
         DC    X'00081400'
         DC    9X'04'
         DC    X'000000180C10'
         DC    26X'08'
DECPO    DC    45X'14'                                             1532
         DC    X'00081004'
         DC    13X'00'
         DC    X'080C'
         DC    26X'08'
SCAFAC   DC    X'0C0C'                                             1612
         DC    43X'18'
         DC    X'00101408'
         DC    9X'04'
         DC    4X'00'
         DC    28X'10'
         SPACE
*              ITAB ENTRIES OF STANDARD PROCEDURES
FIXITAB  EQU   *
         DC    X'013F0000002B0000000000'     HEADER FOR PBN O
         DC    X'4041520000008882002080'     ABS
         DC    X'5248464D000088810020C0'     SIGN
         DC    X'4B444D46534788810000E0'     LENGTH
         DC    X'5258524042538A80911203'     SYSACT
         DC    X'5250515300008882002004'     SQRT
         DC    X'52484D0000008882002008'     SIN
         DC    X'424E52000000888200200C'     COS
         DC    X'40514253404D8882002010'     ARCTAN
         DC    X'4B4D000000008882002014'     LN
         DC    X'44574F0000008882002018'     EXP
         DC    X'444D5348445188810020F0'     ENTIER
         DC    X'484D52584C418A8090181F'     INSYMB
         DC    X'484D5144404B8A800A1822'     INREAL
         DC    X'484D484D53448A80091826'     ININTE
         DC    X'484D414E4E4B8A800B182A'     INBOOL
         DC    X'484D4051514088800E182E'     INARRA
         DC    X'484D5340515188800D1832'     INTARR
         DC    X'484D414051518880071836'     INBARR
         DC    X'4E545352584C888010143B'     OUTSYM
         DC    X'4E5453514440888002143E'     OUTREA
         DC    X'4E5453484D538880011442'     OUTINT
         DC    X'4E5453414E4E8880031446'     OUTBOO
         DC    X'4E5453405151888006144A'     OUTARR
         DC    X'4E5453534051888005144E'     OUTTAR
         DC    X'4E54534140518880071452'     OUTBAR
         DC    X'4E54535253518880001456'     OUTSTR
         DC    X'4F54530000008A8004115A'     PUT
         DC    X'4644530000008A8004115E'     GET
         SPACE
ASEC1    DC    A(IEX30001)
ASEC2    DC    A(IEX30002)
         EJECT
INITIATE EQU   *
         LA    WORKR,TERM1              ERROR EXIT ADDRESS
         ST    WORKR,ERET
         LA    WORKR,LOMEGA6            PROVIDE EOD ADDR           2846
         ST    WORKR,EODUT1                      FOR UT1           2846
         MVC   SEMCNT(2),ZERO           SET SEMICOLON COUNTER TO ZERO
         SPIE  INTERUPT,((1,7),9,11,12,15)
         ST    R1,OLDSPIE               SAVE ADDRESS OF OLD PICA
         SPACE
*                                  ALLOCATE STORAGE FOR TABLESD
         LH    R0,FOURK                 CONSTANT POOL SIZE
         A     R0,ITAB30S               ITABSIZE
         A     R0,SRCE1S                INPUT BUFFER SIZE
         A     R0,SRCE3S                OUTPUT BUFFER SIZE
         A     R0,SRCE3S                OUTPUT BUFFER SIZE
         A     R0,CRIDTABS              CRIDTAB SIZE
         A     R0,SUTAB30S              SUTAB SIZE
         A     R0,LVTAB30S              LVTAB SIZE
         AH    R0,EIGHT                 RECORD KEY LENGTH
         ST    R0,TABSIZE               SAVE TABLE AREA LENGTH
         GETMAIN R,LV=(0)               ALLOCATE STORAGE
         LA    WORKR,TERM2              ERROR RETURN ADDRESS
         ST    WORKR,ERET
         ST    R1,ZKOPOOL               CONSTANT POOL START ADDRESS
         AH    R1,FOURK
         ST    R1,ZIBSTAO               ITAB START ADDRESS
         A     R1,ITAB30S
         ST    R1,ZIBREAD               SECOND INPUT BUFFER START ADDR.
         A     R1,SRCE1S
         ST    R1,ZOBWORK               OUTPUT BUFFER START ADDRESS
         A     R1,SRCE3S
         ST    R1,ZOBWRITE              OUTPUT BUFFER START ADDRESS
         A     R1,SRCE3S
         ST    R1,ZFOCRI                CRIDTAB START ADDRESS
         A     R1,CRIDTABS
         ST    R1,SUSTRT                SUTAB START ADDRESS
         A     R1,SUTAB30S
         LA    R1,4(0,R1)
         ST    R1,LVSTRT                LVTAB START ADDRESS
         SPACE
*              INITILIZE INPUT BUFFERS
         L     ZINR,SRCE1ADD            ADDRESS OF FIRST INPUT BUFFER
         ST    ZINR,ZIBRUN
         TM    HCOMPMOD+2,ONEREC        INPUT ALREADY IN CORE
         BO    INCORE                   YES
         BAL   R15,ICHAI                READ FIRST RECORD
INCORE   EQU   *
         SPACE
*              ITAB POINTERS INITIALIZATION
         L     R1,ZIBSTAO               ITAB START ADDRESS
         MVC   0(256,R1),FIXITAB        INSERT ITAB FIXED PART
         MVC   256(FIXITABL-256,R1),FIXITAB+256
         LA    WORKR,FIXITABL-11(0,R1)  ADDRESS LAST FIXED ENTRY
         ST    WORKR,ZCURITEN
         LA    WORKR,11(0,WORKR)        ADDRESS FIRST FREE ITAB ENTRY
         ST    WORKR,ZITREC
         A     R1,ITAB30S               ITAB END ADDRESS PLUS 1
         ST    R1,ZITEND
         L     R1,UT3ADD                ADDRESS OF DCB-SUSUT3
         NOTE  (1)                      ID OF LAST ITAB BLOCK
         ST    R1,SULTSTRT              TRANSFER TO SUBSCRIPT HANDLING
         ST    R1,NOTEW                 PREPARE WRITE OF SUTAB OR LVTAB
         L     WORKR,UT3ADD             DCB ADDRESS
         CLOSE ((WORKR),REREAD),TYPE=T  TEMPORARY CLOSE
         BAL   R15,ITABREAD             READ FIRST ITAB RECORD
         SPACE
*              INITILIZE OUTPUT BUFFERS
         L     ZOUR,ZOBWORK             START OF ACTIVE OUTPUT BUFFER
         L     WORKR,SRCE3S             LENGTH OF OUTPUT BUFFER
         SH    WORKR,TWELVE        SET BUFFER END PTRS
         AR    WORKR,ZOUR
         ST    WORKR,ZFILE9
         LA    WORKR,3(0,WORKR)
         ST    WORKR,ZFILE6
         LA    WORKR,1(0,WORKR)
         ST    WORKR,ZFILE5
         LA    WORKR,2(0,WORKR)
         ST    WORKR,ZFILE3
         LA    WORKR,1(0,WORKR)
         ST    WORKR,ZFILE2
         LA    WORKR,1(0,WORKR)
         ST    WORKR,ZFILE1
         BCTR  ZOUR,0
         SPACE
*              CRIDTAB AND FSTAB INITIALIZATION
         L     R1,ZFOCRI                CRIDTAB START ADDRESS
         SH    R1,NINE                  INITILIZE PTRS
         ST    R1,PFANO
         ST    R1,PFA                   CURRENT CRIDTAB PTR
         A     R1,CRIDTABS              GET ADDRESS OF LAST ENTRY
         ST    R1,PFAMAX                END PTR
         MVI   ZFOSTA,X'00'             ZEROIZE FSTAB
         MVC   ZFOSTA+1(254),ZFOSTA
         LA    WORKR,FSTAB-1            START ADDRESS OF FSTAB -1
         ST    WORKR,ZFSPTR             INITILIZE FORSTATEMENT ZERO
         SPACE
*              SUTAB INITIALIZATION
         L     R1,SUSTRT                SUTAB START ADDRESS
         MVC   0(4,R1),SUKEY            SET SUTAB KEY
         SH    R1,TEN                   INITILIZE PTRS
         ST    R1,ZSUDAD                START PTR
         ST    R1,ZSUTAPO               CURRENT PTR
         A     R1,SUTAB30S
         ST    R1,ZSUTMAX               END PTR
         SPACE
*              LVTAB INITIALIZATION
         L     R1,LVSTRT                LVTAB START ADDRESS
         MVC   0(4,R1),LVKEY            SET LVTAB KEY
         ST    R1,ZLESTA                START PTR
         ST    R1,ZLEVA                 CURRENT PTR
         A     R1,LVTAB30S
         ST    R1,ZLEMAX                END PTR
         SPACE
*              LITERAL HANDLING INITIALIZATION
         TM    HCOMPMOD,X'02'           LONG PRECITION
         BNZ   INLIT2                   YES
         LA    WORKR,4
         ST    WORKR,LREAL
         LA    WORKR,7
         ST    WORKR,NREAL              MAXIMAL PRECITION
INLIT2   EQU   *
         SPACE
*              CONSTANT POOL INITALIZATION
         L     R1,ZKOPOOL               CONSTANT POOL START ADDRESS
         LH    WORKR,FOURK              LENGTH OF CONSTANT POOL
         AR    WORKR,R1                 CONSTANT POOL END ADDRESS
         ST    WORKR,ZKOPEND            END PTR
         A     R1,PRPT
         ST    R1,ZWP                   WORD PTR
         ST    R1,ZDWP                  DOUBLE WORD PTR
         ST    R1,ZLITSTA               START ADDRESS OF ACTIVE POOL
         AH    R1,TXTPUT                TXT OUTPUT PTR
         ST    R1,ZTEXTCO
         MVC   ZKBNMAX(2),PBN           PREPARE CONSTANT POOL EXCHANGE
         MVC   KBN(2),ZERO              CURRENT POOL NUMBER
         SPACE
*              START READ INTO ALTERNATE INPUTBUFFER IF NECCESSARY
         TM    HCOMPMOD+2,ONEREC
         BO    INITEND                  YES
         BAL   R15,ICHA
INITEND  EQU   *
         SPACE
         NI    HCOMPMOD+2,X'FF'-NOSC    SET SEMICOLON COUNTER ACTIVE
         TM    HCOMPMOD,PROC            PRECOMPILED PROCEDURE
         BZ    *+8                      NO
         BAL   R15,ITABMOVE             YES, GET ITAB RECORD
         B     GENTEST
         EJECT
GENTEST1 LA    ZINR,1(0,ZINR)
GENTEST  SR    R2,R2
         TRT   0(80,ZINR),GENER
         B     *(R2)
         B     LETTER
         B     DIGIT19
         B     DIGIT0
         B     DECPOIN
         B     SCAFACT
         B     QUOTE
         B     BETA
         B     PIPHI
         B     FOR
         B     EPSILON
         B     ETA
         B     DO
         B     WHILE
         B     SEMIDELT
         B     OPBRACK
         B     COMMA
         B     CLOBRACK
         B     ZETA
         B     GAMMA
         B     OMEGA
         B     OTHOP
         B     RHO
         B     STEP
         B     ARRAY
         B     SWITCH
         B     DIPOW
         SPACE 3
*              STRING OR LOGICAL VALUE
QUOTE    EQU   *
         C     ZOUR,ZFILE5              OUTPUT BUFFER EXCHANGE
         BH    LQUOT2                   YES
LQUOT3   MVC   1(5,ZOUR),1(ZINR)        OUTPUT INTERNAL NAME
         LA    ZINR,6(0,ZINR)
         CLI   0(ZINR),X'2E'            FOLLOWS AN OPERATOR
         BNL   LQUOT1                   PROBABLY NOT, MIGHT BE ZETA
LQUOT5   LA    ZOUR,5(0,ZOUR)           STEP OUTPUT PTR
         B     GENTEST                  BRANCH TO GENTEST
LQUOT2   BAL   R15,OUCHA                BRANCH TO SUBROUTINE OUCHA
         B     LQUOT3                   BRANCH TO LQUOT3
LQUOT1   CLI   0(ZINR),X'2F'            ZETA
         BNE   LQUOT4                   NO, GIVE ERROR MESSAGE
         BAL   R15,ICHA                 CHANGE INPUT BUFFER
         CLI   0(ZINR),X'2E'            FOLLOWS OPERATOR
         BL    LQUOT5                   YES
LQUOT4   MVC   ZIDEX(6),ZPOINT          REPLACE OPERAND BY SIX POINTS
         LA    RTO,ZIDEX+6
         LA    R0,ZIDEX+12
         MVC   ZERRONU(2),INVOP
         B     INCOROP                  INCORRECT OPERAND ERROR ROUTINE
         SPACE 3
*              PROGRAM BLOCK BEGIN
BETA     EQU   *
         CLI   LETTERB,X'F0'            PROCEDURE BLOCK TO READ
         BE    LBETA4                   YES
BETA1    BAL   R15,ITABMOVE             READ ITAB BLOCK
LBETA2   C     ZOUR,ZFILE2             COMPARE ZOUT WITH ZFILE(2)
         BH    LBETA1                   BRANCH IF HIGH
LBETA3   MVC   1(2,ZOUR),0(ZINR)
         LA    ZOUR,2(0,ZOUR)           ZOUT IS INCREASED BY 2
         MVC   ZIGN(2),2(ZINR)         IGN IS RECOGNIZED AND STORED
         LA    ZINR,4(0,ZINR)           ZIN IS INCREASED BY 4
         B     GENTEST                  BRANCH TO GENTEST
LBETA1   BAL   R15,OUCHA                BRANCH TO SUBROUTINE OUCHA
         B     LBETA3                  BRANCH TO LBETA 2
LBETA4   BAL   R15,ITABMOP              READ PROCEDURE BLOCK
         B     BETA1
         SPACE 3
*              PROCEDURE BLOCK BEGIN
PIPHI    EQU   *
         NI    PROCHD,X'0F'             PROC. HEAD SWITCH ON       0209
         CLI   LETTERB,X'F0'            PROCEDURE BLOCK TO READ
         BE    LPIPHI6
PIPHI1   MVC   ZIGN(2),1(ZINR)          SAVE CURRENT IGN
         C     ZOUR,ZFILE6              SPACE IN OUTPUT BUFFER
         BH    LPIPHI1                  BRANCH IF HIGH
LPIPHI2  MVC   1(1,ZOUR),0(ZINR)        OPERATOR IS MOVED TO O-BUFFER
         LA    ZOUR,1(0,ZOUR)           ZOUT IS INCREASED BY 1
         LA    ZINR,3(0,ZINR)          ZIN IS INCREASED BY 3
LPIPHI3  CLI   0(ZINR),X'40'            LETTER FOLLOWS IN SOURCE INPUT
         BL    LPIPHI4                  NO
         OI    LETTERB,X'F0'            YES, SET PROCEDURE SWITCH
         B     LETTER                   GET IDENT. AND READ ITAB   0209
         SPACE
LPIPHI4  CLI   0(ZINR),X'2F'       ZETA IN SOURCE INPUT
         BE    LPIPHI5                  YES
         BAL   R15,ITABMOVE             NO, READ ITAB BLOCK
         B     GENTEST
         SPACE
LPIPHI5  BAL   R15,ICHA                 GET NEXT INPUT RECORD
         B     LPIPHI3
LPIPHI1  BAL   R15,OUCHA                BRANCH TO SUBROUTINE OUCHA
         B     LPIPHI2                  BRANCH TO LPIPHI2
LPIPHI6  BAL   R15,ITABMOP              READ PROCEDURE BLOCK
         B     PIPHI1
         SPACE 3
*              FOR STATEMENT BEGIN
FOR      MVI   ZFORTEST,X'C0'          ZFORTEST IS SET TO X'C0'
         L     WORKR,ZFSPTR             UPDATE PTR TO FSTAB ENTRY
         LA    WORKR,1(0,WORKR)
         ST    WORKR,ZFSPTR
         LA    WORKX,FSTAB              GET FOR STATEMENT NUMBER
         SR    WORKR,WORKX
         STC   WORKR,ZFSN
LFOR3    MVC   ZIGN(2),1(ZINR)         IGN IS RECOGNIZED AND STORED
         C     ZOUR,ZFILE1              TEST IF SPACE IN OUTPUT-BUFFER
         BH    LFOR1                    BRANCH IF HIGH
LFOR4    MVC   1(1,ZOUR),0(ZINR)
         LA    ZOUR,1(0,ZOUR)           ZOUT IS INCREASED BY 1
         LA    ZINR,3(0,ZINR)           ZIN IS INCREASED BY 3
         B     GENTEST                  BRANCH TO GENTEST
LFOR1    BAL   R15,OUCHA                BRANCH TO SUBROUTINE OUCHA
         B     LFOR4                   BRANCH TO LFOR2
         SPACE 3
*              END OF PROGRAM OR PROCED URE BLOCK
EPSILON  EQU   *
         CLI   LETTERB,X'F0'            ITAB BLOCK TO READ
         BE    EPSILON2                 YES
EPSILON1 L     R6,ZCURITEN              ADDRESS LAST ITAB ENTRY
         SH    R6,ZCURITLE             ZCURITEN=ZCURITEN-ZCURITLE
         ST    R6,ZCURITEN             ZCURITEN IS STORED
         MVC   ZCURITLE(2),17(R6)      ZCURITLE IS UPDATED
         B     LBETA2                   BRANCH TO LBETA2
EPSILON2 BAL   R15,ITABMOP              READ ITAB BLOCK
         B     EPSILON1
         SPACE 3
*              FOR STATEMENT END
ETA      MVI   ZFORTEST,X'00'           ZFORTEST IS SET TO X'00'
         TM    HCOMPMOD,SYNTAX          COMPILE MODE
         BO    LFOR3                    NO
         BAL   R15,CRIFODEL             BRANCH TO SUBROUTINE CRIFODEL
         B     LFOR3                    BRANCH TO LFOR3
         SPACE 3
*              FOR LIST END
DO       MVI   ZFORTEST,X'00'          ZFORTEST IS SET TO X'00'
LDO3     C     ZOUR,ZFILE1             COMPARE ZOUT WITH ZFILE(1)
OTHOP    EQU   LDO3
         BH    LDO1                     BRANCH IF HIGH
LDO2     MVC   1(1,ZOUR),0(ZINR)        OPERATOR IS MOVED TO O-BUFFER
         LA    ZOUR,1(0,ZOUR)           ZOUT IS INCREASED BY 1
         B     GENTEST1
LDO1     BAL   R15,OUCHA               BRANCH TO SUBROUTINE OUCHA
         B     LDO2                     BRANCH TO LDO2
         SPACE 3
*              WHILE
WHILE    EQU   *
         L     WORKR,ZFSPTR             ADDRESS FSTAB ENTRY
         OI    0(WORKR),WHILEM          INDICATE 'WHILE HAS APPEARED'
         B     LDO3
         SPACE 3
*              STEP OPERATOR
STEP     EQU   *
         L     WORKR,ZFSPTR             ADDRESS FSTAB ENTRY
         OI    0(WORKR),STEPM           INDICATE 'STEP HAS APPEARED'
         B     LDO3
         SPACE 3
*              DIVIDE AND POWER ROUTINE
DIPOW    EQU   *
         CLI   ZFORTEST,X'00'           OPERATOR IN FOR LIST
         BE    OTHOP                    NO, MOVE TO OUTPUT STREAM
         L     WORKR,ZFSPTR             YES, ADDRESS FSTAB ENTRY
         OI    0(WORKR),NOCOUNT         COUNTING LOOP IMPOSSIBLE
         B     OTHOP                    MOVE TO OUTPUT STREAM
         SPACE 3
*              SEMICOLON OR DELTA
SEMIDELT MVC   SEMCNT(2),1(ZINR)        SAVE SEMICOLON COUNTER
         OI    PROCHD,X'F0'             PROC. HEAD SWITCH OFF      0209
         C     ZOUR,ZFILE3             COMPARE ZOUT WITH ZFILE(3)
         BH    LSEM1                    BRANCH IF HIGH
LSEM2    MVC   1(3,ZOUR),0(ZINR)        OPERATOR,SC ARE MOVED TO O-BUFF
         LA    ZOUR,3(0,ZOUR)           ZOUT IS INCREASED BY 3
         LA    ZINR,3(0,ZINR)           ZIN IS INCREASED BY 3
         MVI   STATUS,X'00'             TURN OFF SWITCH OR ARRAY BITS
         B     GENTEST                  BRANCH TO GENTEST
LSEM1    BAL   R15,OUCHA               BRANCH TO SUBROUTINE OUCHA
         B     LSEM2                    BRANCH TO LSEM2
         SPACE 3
SWITCH   OI    STATUS,SSWITCH           SET ON SWITCH SWITCH
         B     OTHOP
         SPACE 3
ARRAY    OI    STATUS,SARRAY            SET ON ARRAY SWOTCH
         MVC   BRCNT(2),ZERO            ZEROISE BRACKET COUNTER
         B     OTHOP                    OUTPUT OPERATOR
         SPACE 3
*              PROGRAM END
OMEGA    MVC   1(1,ZOUR),0(ZINR)
         OI    HCOMPMOD+2,NOSC          SET SEMICOLON COUNTER INACTIVE
         TM    HCOMPMOD+2,ONEREC        INPUT AT ONCE IN CORE      2846
         BO    LOMEGA6                  YES                        2846
         CHECK SREAD                                               2846
LOMEGA6  L     WORKR,UT1ADD                                        2846
         CLOSE ((WORKR))                CLOSE UTILITY 1 FINALY
         CLC   ONE(2),ZOUTCOT           COMPARE ZOUTCOT WITH 1
         BE    LOMEGA1
         LA    ZOUR,1(0,ZOUR)           SAVE OMEGA FROM OVERLAY
         BAL   R15,OUCHA                WRITE LAST RECORD
         NI    HCOMPMOD+2,MANYREC       OUTPUT ON SECONDARY STORAGE
         CHECK SWRITE              CHECK LAST OUTPUT RECORD
         SPACE
LOMEGA3  EQU   *
*                                       WRITE OUT CONSTANT POOL
         L     RWP,ZDWP                 ADDRESS OF FREE BYTE IN C.POOL
         LR    WORKR,RWP
         AH    WORKR,TXTPUT             MORE TXT TO WRITE
         C     WORKR,ZTEXTCO
         BE    LOMEGA2
         BAL   R14,TXTTRAF              YES, WRITE REST OF CONST.POOL
         SPACE
LOMEGA2  EQU   *
TERM2    EQU   *
         SR    WORKR,WORKR
         IC    WORKR,ZFSN
         STH   WORKR,FSNMAX
         MVC   SUCOUNT(2),SUCNT         NUMBER OF SUTAB RECORDS
         MVC   LVCOUNT(2),LVCNT         NUMBER OF LVTAB RECORDS
         SPACE
         L     R1,SULENGTH              GET FULL LENGTH OF SUTAB
         A     R1,ZSUTAPO
         S     R1,ZSUDAD
         ST    R1,ZSUTEN                LENGTH OF SUTAB
         BZ    LOMEGA4
         CLC   ZSUTAPO(4),ZSUDAD        ANYTHING IN SUTAB BUFFER
         BE    LOMEGA5                  NO
         SPACE
         BAL   WORKR,CHECK              CHECK LAST I/O OPERATION ON UT3
         L     WORKR,SUSTRT             WRITE START ADDRESS
         L     WORKX,SUTAB30S           LENGTH OF RECORD
         BAL   R15,WRITE                WRITE
         SPACE
LOMEGA5  EQU   *
         L     R1,LVLENGTH              GET FULL LENGTH OF LVTAB
         A     R1,ZLEVA
         S     R1,ZLESTA
         ST    R1,ZLEVEN                LENGTH OF LVTAB
         BZ    LOMEGA4
         CLC   ZLEVA(4),ZLESTA          ANYTHING IN LVTAB BUFFER
         BE    LOMEGA4                  NO
         SPACE
         BAL   WORKR,CHECK              CHECK LAST I/O OPERATION ON UT3
         L     WORKR,LVSTRT             LVTAB BUFFER START ADDRESS
         L     WORKX,LVTAB30S           LENGTH OF LVTAB BUFFER
         BAL   R15,WRITE                WRITE
         SPACE
LOMEGA4  BAL   WORKR,CHECK              CHECK LAST I/O OPERATION ON UT3
         L     WORKR,UT2ADD
         CLOSE ((WORKR),REREAD),TYPE=T  CLOSE UTILITY 2 TEMPORARILY
         SPACE
*                                  RELEASE MAIN STORAGE
         L     R0,TABSIZE
         L     R1,ZKOPOOL
         FREEMAIN R,LV=(0),A=(1)
TERM1    EQU   *
         L     R1,OLDSPIE
         SPIE  MF=(E,(1))
         XCTL  EP=IEX31                 TRANSFER TO NEXT PHASE
         SPACE
LOMEGA1  OI    HCOMPMOD+2,ONEREC        INDICATE ONLY ONE OUTPUT RECORD
         L     R1,SRCE1ADD              ADDRESS OF RESIDENT BUFFER
         L     R2,ZOBWORK               ADDRESS OF OUTPUT BUFFER
         L     WORKR,SRCE1S             BUFFER LENGTH
         BCTR  WORKR,0
         LR    WORKX,WORKR
         SRA   WORKX,8                  GET MULTIPLE OF 256
         LTR   WORKX,WORKX              MAXIMUM 256
         BZ    LOMEGA12                 YES
LOMEGA11 MVC   0(256,R1),0(R2)          MOVE BLOCK OF 256
         LA    R1,256(0,R1)
         LA    R2,256(0,R2)
         BCT   WORKX,LOMEGA11
LOMEGA12 EX    WORKR,ONERM              MOVE REST OF BUFFER
         B     LOMEGA3
ONERM    MVC   0(0,R1),0(R2)            LENGTH IN WORKR
         SPACE 3
*              CODE PROCEDURE
GAMMA    C     ZOUR,ZFILE9             COMPARE ZOUT WITH ZFILE9
         BH    LGAMMA1                       BRANCH IF HIGH
LGAMMA2  MVI   1(ZOUR),X'2E'            NEW CODE FOR GAMMA IS SET
         MVC   2(8,ZOUR),1(ZINR)        OPT,EXTERN.NAME TO O-BUFF.
         LA    ZINR,9(0,ZINR)                ZIN IS INCREASE BY 9
         LA    ZOUR,9(0,ZOUR)
         B     GENTEST                       BRANCH TO GENETEST
LGAMMA1  BAL   R15,OUCHA
         B     LGAMMA2                       BRANCH TO LGAMMA2
         SPACE 3
*              END OF INPUT BUFFER
ZETA     EQU   *
         BAL   R15,ICHA                      BRANCH TO SUBROUTINE ICHA
         B     GENTEST                       BRANCH TO GENTEST
         SPACE 3
*              OPENING BRACKET
OPBRACK  EQU   *
         TM    STATUS,SARRAY            HANDLING ARRAY DECLARATION
         BO    LOPBRA5                  YES
         TM    HCOMPMOD,SYNTAX          COMPILE MODE
         BO    OTHOP                    NO
         L     R7,ZITAN                ZITEAN IS LOADED INTO R7
         TM    7(R7),X'08'              IS IT AN ARRAY IDENTIFIER
         BO    LDO3                     NO
         TM    7(R7),X'04'
         BZ    LDO3
         CLC   PFA(4),PFANO             PFA IS COMPARED WITH PFANO
         BE    LDO3                          BRANCH IF EQUAL
         CLI   ZLVOV,X'FF'              TABLE OVERFLOW
         BE    LDO3                     YES
         CLC   ZARSPO(4),ZARNO         COMPARE ZARSPO WITH ZARNO
         BE    LOPBRA4             NO SUBSCRIPT NESTING
         BAL   SUCRIDX,SUCRIDEL
         L     R8,ZARSPO               ZARSPO IS SET INTO R8
         C     R8,ZARMAX               COMPARE ZARSPO WITH ZARMAX
         BE    LOPBRA4                  BRANCH IF EQUAL
         MVC   10(1,R8),ZPOSIX+1        NUMBER OF COMMAS TO ARIDSTACK
          LA   R8,7(0,R8)               ADDRESS NEXT ENTRY
LOPBRA3  ST    R8,ZARSPO               ZARSPO IS SET TO ZARSTACK
         MVC   0(3,R8),8(R7)            ARRAY IDENTIFIER IS STORED
         LA    R0,1(0,ZOUR)
         ST    R0,ZBRACK               ZBRACK IS SET TO ZOUT+1
         S     R0,ZOBWORK
         ST    R0,ALIGN                 RELATIVE BUFFER ADDRESS
         MVC   5(2,R8),ALIGNH
         MVC   4(1,R8),ZOUTCOT+1        RECORD COUNTER TO ARIDSTAB
         MVC   ZPOSIX(2),ZERO          ZPOSIX IS SET TO 0
         MVI   ZCLOBRA,X'00'           ZCLOBRA IS SET TO X'00'
         B     LDO2                     PUT OUT OPERATOR
LOPBRA4  LA    R8,ZARSTACK              STARTADDRESS OF ARIDSTAB
         B     LOPBRA3                       BRANCH TO LOPBRA3
LOPBRA5  LH    WORKR,BRCNT              INCREASE BRACKET COUNTER
         LA    WORKR,1(0,WORKR)
         STH   WORKR,BRCNT
         B     OTHOP                    OUTPUT OPERATOR
         SPACE 3
*              COMMA
COMMA    EQU   *
         TM    HCOMPMOD,SYNTAX          COMPILE MODE
         BO    OTHOP                    YES
         CLC   ZARSPO(4),ZARNO         ZARSPO=ZARNO
         BE    LDO3                          BRANCH IF EQUAL
         CLC   ZPOSIX(2),FIFTEEN       ZPOSIX=15
         BE    LCOMMA1                       BRANCH IF EQUAL
         CLI   ZCLOBRA,X'00'            IS ZCLOBRA = X'FF'
         BNE   LCOMMA2
         L     R7,ZBRACK               ZBRACK IS SET INTO R7
         LA    R7,18(0,R7)
         CR    ZOUR,R7                       COMPARE ZOUT AND ZBRACK+18
         BH    LCOMMA3
         BAL   SUBTSTX,SUSCRITE         TEST IF OPTIMIZATION POSSIBLE
LCOMMA4  LH    R7,ZPOSIX               ZPOSIX IS SET INTO R7
         LA    R7,1(0,R7)                    ZPOSIX IS INCREASED BY 1
         STH   R7,ZPOSIX
         LA    R7,1(0,ZOUR)
         ST    R7,ZBRACK               ZBRACK IS SET TO ZOUT+1
         B     LDO2                     PUT OUT OPERATOR
LCOMMA1  OI    HCOMPMOD,X'80'          SWITCH SYNTAX CHECK MODE
         B     LDO3                          BRANCH TO LDO3
LCOMMA2  MVI   ZCLOBRA,X'00'           ZCLOBRA IS SET TO X'00'
LCOMMA3  BAL   SUCRIDX,SUCRIDEL
         B     LCOMMA4                      BRANCH TO LCOMMA4
         SPACE 3
*              CLOSING BRACKET
CLOBRACK EQU   *
         TM    STATUS,SARRAY            HANDLING ARRAY DECLARATION
         BO    CLOBRA3
         TM    HCOMPMOD,SYNTAX          COMPILE MODE
         BO    OTHOP                    YES
         CLC   ZARSPO(4),ZARNO          IS THERE AN ARIDSTAB-ENTRY
         BE    LDO3                     NO
         CLI   ZCLOBRA,X'00'            PRECEEDING SUBSCR.OPER. CLOBRA.
         BNE   CLOBRA1                  YES
         L     R7,ZBRACK                SUBSCRIPT MORE THAN 18 BYTES
         LA    R7,18(0,R7)
         CR    ZOUR,R7
         BH    CLOBRA1                  YES, NO OPTIMIZATION
         BAL   SUBTSTX,SUSCRITE         TEST IF OPTIMIZABLE
CLOBRA2  L     R7,ZARSPO                UPDATE CURRENT ARIDSTAB PTR
         SH    R7,SEVEN
         ST    R7,ZARSPO
         C     R7,ZARNO                 ARIDSTAB EMPTY
         BE    LDO3                     YES
         MVC   ZPOSIX+1(1),10(R7)       RESET SUBSC.POSITION CNTR. 0217
         LA    R7,1(0,ZOUR)             SET ZBRACK
         ST    R7,ZBRACK
         MVI   ZCLOBRA,X'FF'            LAST SUBSCR. OPER. CLOBRACK
         B     LDO3
CLOBRA1  BAL   SUCRIDX,SUCRIDEL         NO OPTIMIZATION POSSIBLE
         B     CLOBRA2
CLOBRA3  LH    WORKR,BRCNT              DECREASE BRACKET COUNTER
         BCTR  WORKR,0
         STH   WORKR,BRCNT
         B     OTHOP                    OUTPUT OPERATOR
         EJECT
IEX30001 CSECT
*                   *****  LETTER  *****
         SPACE
*              SCAN FOR END OF IDENTIFIER. BRANCH TO IDENT TO SEARCH
*              FOR THE IDENTIFIER IN ITAB. REPLACE IDENTIFIER BY INTER-
*              NAL NAME.
         SPACE
*              INITILIZED REG ZIDSTAR = IDENTIFIER START ADDRESS
*              SUBROUTINE LINK IDENTX
         SPACE
LETTER5  BAL   R15,ITABMOP              READ ITAB RECORD
         B     LETTERP
LETTER   NOP   LETTER5                  BRANCH TO READ ITAB RECORD
LETTERB  EQU   LETTER+1
LETTERP  LA    RTO,ZIDEX
         LA    R0,ZIDEX+6
LETTER4  LR    RFI,ZINR
         SR    R2,R2
         SR    R1,R1
LETTER6  TRT   0(256,ZINR),IDENTI
         BZ    LETTER0                  STILL SAME IDENTIFIER
         LR    ZINR,1                   UPDATE ZINR
         B     *(R2)
         B     ZETALET
         B     RHO
         B     ERROR1
*                                  END OF IDENTIFIER IS FOUND
         B     IDENT                    ITAB SEARCH
LETTER1  ST    ZITANR,ZITAN             SAVE POINTER TO LAST IDENTIFIER
         C     ZOUR,ZFILE5              SPACE IN OUTPUTBUFFER
         BH    LETTER2                  NO SPACE
LETTER3  MVC   1(5,ZOUR),6(ZITANR)      MOVE INTERNAL NAME TO OUTPUTBUF
         LA    ZOUR,5(0,ZOUR)
         B     GENTEST
LETTER2  BAL   R15,OUCHA
         B     LETTER3
LETTER0  LA    ZINR,256(0,ZINR)         UPDATE INPUT PTR
         B     LETTER6
         SPACE 3
*              END OF INPUT BUFFER IN THE MIDLE OF AN IDENTIFIER
ZETALET  BAL   MOVEX,MOVE
         BAL   R15,ICHA
         B     LETTER4
         SPACE 3
*              LETTER STRING USED AS PARAMETER DELIMITER. REPLACE
*              STRING BY COMMA.
RHO      CLI   0(ZOUR),X'26'            RIGHT PARENTHES
         BNE   GENTEST1                 NO
         MVI   0(ZOUR),X'25'            REPLACE PARENTHES BY COMMA
         B     GENTEST1
         SPACE 3
*              INVALID CHARACTER IN IDENTIFIER
ERROR1   EQU   *
         BAL   MOVEX,MOVE
         MVC   ZERRONU(2),INVOP
         B     INCOROP
         SPACE 3
*                   *****  IDENT  *****
         SPACE
*              A SEARCH THRU ITAB FOR THE IDENTIFIER WITH THE STARTADD-
*              RESS IN ZIDSTAR IS DONE. IF FOUND BRANCH TO ROUTINE FOL1
*              FOR TYPECHECK, IF NOT REPLACE IDENTIFIER WITH ALL PUR-
*              POSE IDENTIFIER.
         SPACE
*              RECIEVED REG ZIDSTAR = ADDRESS OF IDENTIFIER START *D*
*              INITILIZED REG ZITANR
         SPACE
FOLIR    EQU   WORKR
ZITANR   EQU   R7
IDENT    BAL   MOVEX,MOVE               MOVE IDENTIFIER
         MVC   0(5,RTO),ZERO            FILL UP WITH ZERO
*                                  START ITAB SEARCH
         L     ZITANR,ZCURITEN          ADDRESS OF LAST ITAB-ENTRY
         L     R1,ZIBSTAO               ITAB START ADDRESS
         LH    R0,ELEVEN
         LCR   R0,R0                    MINUS ELEVEN
IDENT2   LA    FOLIR,IDENT4
IDENT3   CLC   0(6,ZITANR),ZIDEX        IDENTIFIER SEARCH
         BCR   8,FOLIR                  FOUND
IDENT6   BXH   ZITANR,R0,IDENT3         PROCEED SEARCH, IF NOT ITAB0209
         SPACE
         MVC   ZBEGERR(4),OPSTART
         ST    RTO,ZENDERR
         MVC   ZERRONU(2),UNDEFOP
         BAL   MOVERROX,MOVERRO
         OI    HCOMPMOD,X'80'           SWITCH SYNTAX CHECK MODE
         LA    ZITANR,ZALLPU            ALL PURPOSE IDENTIFIER
         B     LETTER1
         SPACE
IDENT4   BC    15,IDENT5                BRANCH IF NOT PROC.HEAD    0209
PROCHD   EQU   IDENT4+1                 PROC.HEAD SWITCH           0209
         TM    6(ZITANR),X'02'          PROC.OR FORMAL PARAMETER   0209
         BZ    IDENT6                   NO,CONTINUE SEARCH         0209
         CLC   8(1,ZITANR),CURPBN       DECLARED IN LAST BLOCK     0209
         BNE   IDENT6                   NO,CONTINUE SEARCH         0209
IDENT5   TM    STATUS,SARRAY            HANDLING ARRAY DECLARATION 0209
         BZ    FOLI                     NO
         CLC   BRCNT(2),ZERO            IDENTIFIER IN ARRAY LIST
         BE    FOLI                     NO, ARRAY IDENTIFIER
         CLC   8(1,ZITANR),CURPBN       DECLARED IN LAST BLOCK
         BL    FOLI                     NO                       A32962
         MVC   ZSTO(2),6(ZITANR)        IDENT CHARACTERISTIC     A32962
         NC    ZSTO(2),ZSTO1                                     A32962
         CLC   ZSTO(2),ZSTO2            FUNCTION PROCEDURE?      A32962
         BE    IDENT7                   YES                      A32962
         CLI   ZSTO,X'02'               FORMAL PARAM OR PROC?    A32962
         BE    FOLI                     YES                      A32962
IDENT7   MVC   ZBEGERR(4),OPSTART       GIVE WARNING MESSAGE     A32962
         ST    RTO,ZENDERR
         MVC   ZERRONU(2),ARRAYERR
         BAL   MOVERROX,MOVERRO
         AR    ZITANR,R0                PROCEED SEARCH FOR IDENTIFIER
         B     IDENT2
         SPACE 3
*                   *****  FOLI  *****
         SPACE
*              CHECK TYPE OF IDENTIFIER
FOLI     IC    WORKR,6(0,ZITANR)        ISOLATE SPECIAL USE BITS
         N     WORKR,SPECUSE            X'6'
         AR    WORKR,WORKR              SPECIALUSE BITS MULTIPLIED BY 4
         B     *+4(WORKR)
         B     NOCRI                    NON-CRITICAL IDENTIFIER
         B     PROFU                    PROCEDURE OR FORMAL PARAMETER
         B     SWILA                    LABEL OR SWITCH
         B     CRITI                    CRITICAL IDENTIFIER
NOCRI    EQU   *
         TM    HCOMPMOD,SYNTAX          COMPILE MODE
         BO    LETTER1
         CLI   ZFORTEST,X'00'           APPEARS IDENT. BETWEEN FOR - DO
         BNE   NOCRI1                   YES
*                                  SHOULD ENTRY TO LVTAB BE DONE
         CLC   PFA(4),PFANO             FOR-STATMENT
         BE    LETTER1                  NO, NO LVTAB-ENTRY
         CLI   0(ZINR),X'16'            IDENTIFIER FOLLOWED BY ASSIGN.
         BC    7,LETTER1                NO, NO LVTEB-ENTRY
         TM    7(ZITANR),X'02'          INTEGER
         BO    LETTER1                  NO, NO LVTAB-ENTRY
         BAL   LETRAFX,LETRAF           MAKE ENTRY IN LVTAB
         B     LETTER1                  RETURN
NOCRI1   BAL   CRIMAX,CRIMA             MAKE CRIDTAB ENTRY
         B     LETTER1
         SPACE 3
*                   *****  PROFU  *****
         SPACE
*              BECAUSE OF POSSIBLE SIDE EFFECTS OF A PROCEDURE, OPTIMI-
*              ZATION OF SUBSCRIPTS AND FOR-STATEMENTS IS INHIBITED
         SPACE
*              SUBROUTINE LINK DELCRIVX
         SPACE
PROFU    EQU   *
         TM    HCOMPMOD,SYNTAX          SYNTAX CHECK MODE
         BO    LETTER1                  YES
         MVC   ZARSPO(4),ZARNO          SKIP ARIDSTAB
         CLI   ZFORTEST,X'C0'           CONTROLLED VARIABLE
         BNE   PROFU1                   NO
         L     WORKR,ZFSPTR             YES, CLASSIFIE NORMAL
         OI    0(WORKR),NORMAL
PROFU1   EQU   *
         MVI   ZFORTEST,X'00'           TURN OFF FOR-SWITCH
         CLC   PFA(4),PFANO             CRIDTAB EMPTY
         BE    LETTER1                  YES, RETURN
         BAL   DELCRIVX,DELCRIV         DELETE ALL CRIDTAB-ENTRIES
         B     LETTER1                  RETURN
         SPACE 2
*                   *****  SWILA  *****
         SPACE
*              IN CASE OF SWITCH OF LABEL DECLARATION NO ACTION IS
*              TAKEN. IF USED IN A GO-TO-STATEMENT A TEST IS DONE IF
*              THE ALFOL-RULES IS FOLLOWED. IF NOT GIVE MESSAGE
         SPACE
*              RECIEVED REG ZITANR, ZIDSTAR
*              WORK REG ZITHEADR, SIGNEMBR, ZFOSTAR, ZIGNDECR
         SPACE
ZITHEADR EQU   R1
ZFOSTAR  EQU   R1
ZIGNEMBR EQU   R2
ZIGNDECR EQU   R9
         SPACE
SWILA    LR    ZITHEADR,ZITANR          START SEARCH FOR HEADING ENTRY
SWILA1   SH    ZITHEADR,ELEVEN
         CLI   5(ZITHEADR),X'2B'        HEADING TEST
         BNE   SWILA1                   NO HEADING
         MVC   ALIGNH(2),8(ZITHEADR)
         L     ZIGNDECR,ALIGN
         LH    ZIGNEMBR,ZIGN            ACTUELL IGN
         LA    ZFOSTAR,ZFOSTA-1         ADDRESS OF BYTE PRECEED. FSTAB
SWILA2   CR    ZIGNEMBR,ZIGNDECR        COMPORE DECLARAD AND CUR. IGN
         BH    SWILA3                   CHECK EMBRACING IGN TO CUR. IGN
         BE    LETTER1
         TM    STATUS,SSWITCH           IN SWITCH DECLARATION
         BZ    SWILA21                  NO, SERIOUS ERROR
         MVC   ZBEGERR(4),OPSTART       YES, GEVE WARNING MESSAGE
         ST    RTO,ZENDERR
         MVC   ZERRONU(2),SWITCHER
         BAL   MOVERROX,MOVERRO
         B     LETTER1
SWILA21  EQU   *
         MVC   ZERRONU(2),GOTOFOR
         B     INCOROP
SWILA3   LR    WORKR,ZIGNEMBR           COMPUTE ADDRESS OF IGN-TAB-ENTR
         AR    WORKR,ZIGNEMBR
         AR    WORKR,ZIGNEMBR           3+ZIGNEMB
         LA    WORKR,GPTAB(WORKR)       GPTAB+3*ZIGNEMB
         CLI   2(WORKR),X'00'           TEST IF FORGROUP
         BE    SWILA4                   NO
         MVC   *+9(1),2(WORKR)          ADDRESS ACTUELL ENTRY IN FSTAB
         OI    0(ZFOSTAR),X'20'         SET BIT INDICAT BRANCH OUTOF FS
SWILA4   MVC   ALIGNH(2),0(WORKR)
         L     ZIGNEMBR,ALIGN           LOAD EMBRACING IGN
         B     SWILA2
         SPACE 3
*                   *****  CRITI  *****
         SPACE
*              ROUTINE ENTRED WHEN A CRITICAL IDENTIFIER IS FOUND IN
*              ITAB. IF THE IDENTIFIER APPEARS BETWEEN FOR AND DO A
*              NEW CHAINED CRIDTAB-ENTRY IS MADE. OTHERWISE ONLY THE
*              FSTAB-ENTRY IS TREATED.
         SPACE
*              WORK REG ZMR,PFAR
         SPACE
ZMR      EQU   R1
CRITI    CLI   ZFORTEST,X'00'           CRITICAL IDENTIFIER IN FOR-LIST
         BNE   CRITIF                   YES
         SPACE
*                                  IDENTIFIER NOT FOR-LIST-ELEMENT
         CLC   ZARSPO(4),ZARNO          CURRENTLY HANDLING SUBSCR.EXPR.
         BC    7,LETTER1                YES
         L     ZMR,PFA                  POINTER TO LAST CRIDTAB-ENTRY
CRITI1   CLC   1(3,ZMR),8(ZITANR)       SCAN CRIDTAB FOR LAST ENTRY
         BE    CRITI2                   FOUND
         SH    ZMR,NINE
         B     CRITI1
         SPACE
CRITI2   CLI   0(ZINR),X'16'            IDENTIFIER FOLLOWED BY ASSIGNM
         BE    CRITI3                   YES
         TM    4(ZMR),X'80'             CONTROLLED VARIABEL
         BZ    LETTER1                  NO, RETURN
         SR    WORKR,WORKR              ADDRESS FSTAB-ENTRY
         IC    WORKR,0(0,ZMR)
         LA    WORKR,ZFOSTA(WORKR)
         OI    0(WORKR),X'80'           ELEMENTARY LOOP
         B     LETTER1                  RETURN
         SPACE
*                                  IDENTIFIER FOLLOWED BY ASSIGNMENT
CRITI3   SR    WORKR,WORKR              GET ADDRESS OF FSTAB-ENTRY
         IC    WORKR,0(0,ZMR)
         LA    WORKR,ZFOSTA(WORKR)
         TM    4(ZMR),X'80'             CONTROLLED VARIABEL
         BO    CRITI4                   YES
         OI    0(WORKR),NORMAL          NORMAL LOOP
         TM    4(ZMR),X'40'             MORE CHAINED ENTRIES
         BZ    LETTER1                  NO, RETURN
         MVC   ALIGNH(2),5(ZMR)         GET ADDRESS OF NEXT ENTRY
         L     ZMR,ALIGN
         A     ZMR,ZFOCRI
         B     CRITI3                   HANDLE NEXT ENTRY
CRITI4   OI    0(WORKR),X'40'           INDICATE ASSIGN. TO CTR VAR
         B     LETTER1
         SPACE
*                                  TREATMENT OF CRIT. ID. IN FOR-LIST
CRITIF   BAL   CRIMAX,CRIMA             MAKE CRIDTAB-ENTRY
         L     PFAR,PFA                 PTR TO LAST CRIDTAB-ENTRY
         LR    ZMR,PFAR            START SCAN FOR PREVIOUS ENTRY
CRITIF1  SH    ZMR,NINE
         C     ZMR,PFANO                IS THARE A PREVIOUS ENTRY
         BC    12,LETTER1               NO, DELETED AT CRIDTAB-OVERFLOW
         CLC   1(3,ZMR),1(PFAR)         PREVIOUS ENTRY
         BNE   CRITIF1                  NO
         SPACE
*                                  PREVIOUS ENTRY IN CRIDTAB FOUND
         BAL   PUTCHX,PUTCHAIN          CHAIN NEW ENTRY TO PREVIOUS
         TM    4(PFAR),X'80'            NEW ENTRY CONTROLLED VARIABEL
         BZ    CRITIN                   NO
         SPACE
*                                  TREATMENT OF CONTROLLED VARIABEL
CRITIC   SR    WORKR,WORKR
         IC    WORKR,0(0,ZMR)           FSN OF CHAINED CRIDTAB-ENTRY
         LA    WORKR,ZFOSTA(WORKR)      ADDRESS OF CHAINED FSTAB-ENTRY
         TM    4(ZMR),X'80'             CHAINED ENTRY CONTROLLED
         BO    CRITIC1                  YES
         OI    0(WORKR),NORMAL          INDICATE NORMAL LOOP
         TM    4(ZMR),X'40'             MORE CHAINED ENTRIES
         BZ    LETTER1                  NO, RETURN
         MVC   ALIGNH(2),5(ZMR)    GET ADDRESS OF NEXT CHAINED ENTRY
         L     ZMR,ALIGN
         A     ZMR,ZFOCRI
         B     CRITIC
         SPACE
CRITIC1  OI    0(WORKR),X'40'           BIT FOR ASSIGN. TO CONTR. VAR.
         B     LETTER1
         SPACE
*                                  TREATMENT OF NON-CONTROLLED VARIABEL
CRITIN   TM    4(ZMR),X'80'             CHAINED ENTRY CONTROLLED
         BO    CRITIN1                  YES
         TM    4(ZMR),X'40'             MORE CHAINED ENTRIES
         BZ    LETTER1                  NO
         MVC   ALIGNH(2),5(ZMR)         GET ADDRESS OF CHAINED ENTRY
         L     ZMR,ALIGN
         A     ZMR,ZFOCRI
         B     CRITIN
         SPACE
CRITIN1  SR    WORKR,WORKR              GET ADDRESS OF CHAINED FSTAB-EN
         IC    WORKR,0(0,ZMR)
         LA    WORKR,ZFOSTA(WORKR)
         CLC   0(1,ZMR),ZFSN            CHAINED ENTRY PART OF ACTIV FOR
         BE    CRITIN2                  YES
         CLC   ZARSPO(4),ZARNO          CURRENTLY HANDLING A SUBSCRIPT
         BC    7,LETTER1                YES, RETURN
         OI    0(WORKR),X'80'           SET ELEMENTARY LOOP
         B     LETTER1
CRITIN2  OI    0(WORKR),NORMAL          INDICATE NORMAL LOOP
         B     LETTER1
         SPACE 3
*                   *****  PUTCHAIN  *****
         SPACE
*              ROUTINE TO CHAIN NEW CRIDTAB-ENTRY TO PREVIOUS
         SPACE
*              RETURN REG PUTCHX
*              RECIEVED REG PFAR, ZMR
         SPACE
PUTCHX   EQU   R15
PUTCHAIN OI    4(PFAR),X'40'            BIT FOR PREVIOUS CRITICAL IDENT
         OI    4(ZMR),X'20'             BIT FOR SUBSEQUENT CRIT. IDENT
         L     WORKX,ZFOCRI             CRIDTAB START ADDRESS
         LR    WORKR,ZMR                GET BACKWARD CHAIN
         SR    WORKR,WORKX
         ST    WORKR,ALIGN
         MVC   5(2,PFAR),ALIGNH
         LR    WORKR,PFAR               GET FORWARD CHAIN
         SR    WORKR,WORKX
         ST    WORKR,ALIGN
         MVC   7(2,ZMR),ALIGNH
         BR    PUTCHX                   RETURN
         SPACE 3
*                   *****  CRIMA  *****
         SPACE
*              SUBROUTINE TO MAKE A NEW CRIDTAB-ENTRY. IN CASE OF
*              CRIDTAB OVERFLOW THE ROUTINE CRIFLOW IS ENTRED TO
*              DELETE FROM CRIDTAB ALL ENTRIES BELONG TO THE MOST
*              EMBRACING FOR-STATEMENT. CRIFODEL IS ENTERED IF AN
*              ARRAY ELEMENT IS HANDELED.
         SPACE
*              RETURN REG CRIMAX
*              RECIEVED REG ZITANR  POINTER TO ACTUELL ITAB ENTRY
*              WORK REG PFAR
*              SUBROUTINE CRIFLOW, LETRAF,CRIFODEL, SUCRIDEL
         SPACE
PFAR     EQU   R8
CRIMAX   EQU   R14
         SPACE
CRIMA    TM    7(ZITANR),X'04'          ARRAY
         BO    CRIMA1                   YES, NO OPTIMIZATION POSSIBLE
         L     PFAR,PFA                 CURRENT CRIDTAB PTR
         TM    ZFORTEST,X'C0'           CONTROLLED VARIABLE
         BO    CRIMAC                   YES
         SPACE
*                                  TREATMENT OF 'NOT CONTROLLED' VARIAB
         C     PFAR,PFAMAX              CRIDTAB OVERFLOW
         BE    CRIMAN1                  YES
CRIMAN2  LA    PFAR,9(0,PFAR)           UPDATE CURRENT PTR
         MVI   4(PFAR),X'00'            FLAG-BYTE SHOWS NO CTR.VARIABEL
         TM    7(ZITANR),X'02'          INTEGER
         BZ    CRIMA2                   YES
         L     WORKR,ZFSPTR             ADDRESS FSTAB ENTRY
         OI    0(WORKR),NOCOUNT         CLASSIFY AS NOT COUNTING LOOP
         SPACE
CRIMA2   MVC   1(3,PFAR),8(ZITANR)      MOVE ADDRESS PART TO CRIDTAB
         MVC   0(1,PFAR),ZFSN           MOVE FSN TO CRIDTAB
         LR    WORKR,ZITANR             GET RELATIVE ADDRESS IN ITAB
         S     WORKR,ZIBSTAO
         ST    WORKR,ALIGN              ITAB RELATIVE ADDRESS
         MVC   5(2,PFAR),ALIGNH
         OI    6(ZITANR),X'06'          TURN ON SPECIAL USE BITS
         ST    PFAR,PFA                 SAVE CURRENT PTR
         BR    CRIMAX                   RETURN
         SPACE
CRIMAN1  EQU   *
         BAL   CRIFLOWX,CRIFLOW         DELETE MOST EMBRACING FOR-STAT.
         C     PFAR,PFANO               ALL CRIDTAB DELETED
         BNE   CRIMAN2                  NO
         MVI   ZFORTEST,X'00'           NO MOR CRIDTABENTRIES TO BE DON
         BR    CRIMAX
         SPACE
CRIMAC   TM    7(ZITANR),X'02'          INTEGER
         BZ    CRIMAC1                  YES
         L     WORKR,ZFSPTR             CURRENT FSTAB PTR
         OI    0(WORKR),X'80'           SET BIT FOR ELEMENTARY LOOP
CRIMAC4  C     PFAR,PFAMAX              OVERFLOW
         BE    CRIMAC2                  YES
CRIMAC3  LA    PFAR,9(0,PFAR)           UPDATE CURRENT PTR
         MVI   ZFORTEST,X'80'           INDICATE CONTR. VAR. TREATED
         MVI   4(PFAR),X'80'            SET BIT FOR CONTROLLED VAR.
         B     CRIMA2
         SPACE
CRIMAC1  C     PFAR,PFANO               NESTED FOR STATEMENT
         BE    CRIMAC3                  NO
         BAL   LETRAFX,LETRAF           MAKE LVTAB ENTRY
         B     CRIMAC4
CRIMAC2  BAL   CRIFLOWX,CRIFLOW         CRIDTAB OVERFLOW
         B     CRIMAC3
CRIMA1   L     WORKR,ZFSPTR             CURRENT FSTAB PTR
         OI    0(WORKR),NORMAL          NORMAL LOOP
         MVI   ZFORTEST,X'00'           NO MORE CRIDTAB-ENTRIES
         BR    CRIMAX                   RETURN
         SPACE 3
*                   *****  CRIFLOW  *****
         SPACE
*              THE SUBROUTINE IS ENTERED AT CRIDTAB OVERFLOW TO DELETE
*              ALL CRIDTAB-ENTRIES BELONGING TO THE MOST EMBRACING
*              FOR-STATEMENT
         SPACE
*              RETURN REG CRIFLOWX
*              WORK REG ZMAR, ZMIR, ZMATOR
         SPACE
ZMIR     EQU   R1
ZMATOR   EQU   R9
CRIFLOWX EQU   R15
         SPACE
CRIFLOW  L     ZMAR,ZFOCRI              CRIDTAB START ADDRESS
         CLC   0(1,ZMAR),0(PFAR)        ALL ENTRIES FROM SAME FOR-ST.
         BE    DELCRIV                  YES, DELETE WHOLE CRIDTAB
         MVC   FSNEMBR(1),0(ZMAR)       SAVE MOST EMBRACING FSN
CRIFLOW1 CLC   0(1,ZMAR),FSNEMBR        ENTRY OF MOST EMBRACING FOR-ST.
         BNE   CRIFLOW2                 NO
         TM    4(ZMAR),X'20'            SUBSEQUENT CHAINED ENTRY
         BO    CRIFLOW3                 YES
         SPACE
         MVC   ALIGNH(2),5(ZMAR)        ADDRESS ITAB-ENTRY
         L     WORKR,ALIGN
         A     WORKR,ZIBSTAO
         NI    6(WORKR),X'F9'           SET SPECIAL USE BITS TO 00
CRIFLOW4 LA    ZMAR,9(0,ZMAR)           ADDRESS NEXT CRIDTAB ENTRY
         B     CRIFLOW1
         SPACE
CRIFLOW3 MVC   ALIGNH(2),7(ZMAR)        ADDRESS CHAINED ENTRY
         L     WORKR,ALIGN
         A     WORKR,ZFOCRI
         NI    4(WORKR),X'B0'           TURN OFF BIT FOR PRECEED. ENTRY
         MVC   5(2,WORKR),5(ZMAR)       INSERT RELATIVE ITAB-ADDRESS
         B     CRIFLOW4
         SPACE
CRIFLOW2 SR    WORKR,WORKR              ADDRESS FSTAB-ENTRY OF DEL. FOR
         IC    WORKR,FSNEMBR
         LA    WORKR,ZFOSTA(WORKR)
         OI    0(WORKR),NORMAL          NORMAL LOOP
         L     ZMATOR,ZFOCRI            CRIDTAB START ADDRESS
         LR    ZMIR,ZMAR
         SR    ZMIR,ZMATOR              GET LENGTH OF DELETED PART
         SPACE
CRIFLOW5 TM    4(ZMAR),X'40'       PRECEEDING CRIDTAB-ENTRY
         BZ    CRIFLOW6            NO
         MVC   ALIGNH(2),5(ZMAR)        DECREASE CHAIN-ADDRESS
         L     WORKR,ALIGN
         SR    WORKR,ZMIR
         ST    WORKR,ALIGN
         MVC   5(2,ZMAR),ALIGNH
CRIFLOW6 TM    4(ZMAR),X'20'       SUBSEQUENT CRITAB-ENTRY
         BZ    CRIFLOW7
         MVC   ALIGNH(2),7(ZMAR)        DECREASE CHAIN-ADDRESS
         L     WORKR,ALIGN
         SR    WORKR,ZMIR
         ST    WORKR,ALIGN
         MVC   7(2,ZMAR),ALIGNH
CRIFLOW7 MVC   0(9,ZMATOR),0(ZMAR)      MOVE ENTRY DOWN IN CRIDTAB
         CR    ZMAR,PFAR                LAST ENTRY
         BE    CRIFLOW8            YES
         LA    ZMAR,9(0,ZMAR)      ADDRESS NEXT ENTRY
         LA    ZMATOR,9(0,ZMATOR)
         B     CRIFLOW5
         SPACE
CRIFLOW8 SR    PFAR,ZMIR                GET ADDRESS OF LAST CRIDTAB-ENT
         BR    CRIFLOWX
         SPACE 3
*                   *****  DELCRIV  *****
         SPACE
*              ROUTINE TO DELETE ALL ENTRIES IN CRIDTAB AND TURN OFF
*              THE SPECIAL USE BITS OF CORRESPONDING ITAB ENTRY. ALL
*              FOR-STATEMENTS WITH CRIDTAB-ENTRIES WILL BE CLASSIFIED
*              NORMAL
         SPACE
*              RETURN REG DELCRIVX
*              INITILIZED REG PFAR
         SPACE
DELCRIVX EQU   CRIFLOWX
         SPACE
DELCRIV  L     WORKR,ZFOCRI             CRIDTAB START ADDRESS
DELCRIV1 SR    WORKX,WORKX              ADDRESS FSTAB-ENTRY
         IC    WORKX,0(0,WORKR)
         LA    WORKX,ZFOSTA(WORKX)
         OI    0(WORKX),NORMAL          CLASSIFIE NORMAL
         TM    4(WORKR),X'40'           IDENT. CRIT.IN EMBR. FOR-STAT.
         BO    DELCRIV2                 YES, ITAB-ENTRY ALREADY NON-CRI
         MVC   ALIGNH(2),5(WORKR)       ADDRESS ITAB ENTRY
         L     WORKX,ALIGN
         A     WORKX,ZIBSTAO
         NI    6(WORKX),X'F9'           CLEAR SPEC. USE BITS
DELCRIV2 C     WORKR,PFA                LAST CRIDTAB-ENTRY
         BE    DELCRIV3                 YES
         LA    WORKR,9(0,WORKR)         ADDRESS NEXT CRIDTAB-ENTRY
         B     DELCRIV1
DELCRIV3 L     PFAR,PFANO
         ST    PFAR,PFA
         BR    DELCRIVX
         SPACE 3
*                   *****  CRIFODEL  *****
         SPACE
*              ROUTINE TO DELETE THE CRIDTAB ENTRIES OF THE LAST FOR-
*              STATEMENT
         SPACE
*              RETURN REG R15
*              WORK REG PFAR
         SPACE
CRIFODEL L     PFAR,PFA                 POINTER TO LAST CRIDTAB-ENTRY
         MVC   CRIFODS+1(1),0(PFAR)     INSERT FOR STATEMENT NUMBER
CRIFOD1  C     PFAR,PFANO               CRIDTAB EMPTY
         BE    CRIFOD4                  YES, RETURN
CRIFODS  CLI   0(PFAR),X'00'            NEW FORSTATEMENT, OLD FSN INSER
         BNE   CRIFOD4                  YES, RETURN
         TM    4(PFAR),X'40'            IDENTIFIER USED IN EMBR. FOR-ST
         BO    CRIFOD2                  YES
         SPACE
         MVC   ALIGNH(2),5(PFAR)   CLEAR SPECIAL USE BITS IN CRIDTAB
         L     WORKR,ALIGN
         A     WORKR,ZIBSTAO            ABSOLUTE ITAB ADDRESS
         NI    6(WORKR),X'F9'           CLEAR SPECIAL USE BITS IN ITAB
CRIFOD3  SH    PFAR,NINE                POINT TO PRECEEDING ENTRY
         B     CRIFOD1
         SPACE
CRIFOD2  L     WORKR,ZFOCRI        TURN OFF BIT FOR SUBSEQUENT ENTRY
         MVC   ALIGNH(2),5(PFAR)        ADDRESS OF PREVIOUS CRIDTAB-ENT
         A     WORKR,ALIGN
         NI    4(WORKR),X'CF'           TURN OFF BIT FOR SUBSEQ. ENTRY
         B     CRIFOD3                  GET NEXT ENTRY
         SPACE
CRIFOD4  ST    PFAR,PFA
         BR    R15
         SPACE 3
*                   *****  SUCRIDEL  *****
*              THE SUBROUTINE IS ENTERED WHEN UNOPTIMIZABLE SUB-
*              SCRIPT EXPRESSION IS FOUND. A SCAN BETWEEN THE TWO LAST
*              SUBSCRIPT OPERATORS IS DONE IN THE OUTPUT BUFFER. IF A
*              CONTROLLED CRITICAL IDENTIFIER IS FOUND, CORRESPONDING
*              ENTRY IN FSTAB IS MADE ELEMENTARY. OTHERWISE NO ACTION.
         SPACE
*              RETURN REG SUCRIDX
*              WORK REG ZSUPOR, ZLESUR, ZMSR
         SPACE
ZSUPOR   EQU   R1
ZLESUR   EQU    R2
ZMSR     EQU   R14
SUCRIDX  EQU   R15
SUCRIDEL CLC   PFA(4),PFANO             CRIDTAB EMPTY
         BCR   8,SUCRIDX                YES, RETURN
         LA    ZLESUR,1(0,ZOUR)         ADDRESS OF LAST SUBSCR. OPERAND
         L     ZSUPOR,ZBRACK            ADDRESS OF FIRST SUBSCR.OPERAND
         SPACE
SUCRID1  LA    ZSUPOR,1(0,ZSUPOR)       CHECK NEXT BYTE
SUCRID2  CR    ZSUPOR,ZLESUR            END OF SCAN
         BCR   10,SUCRIDX               YES, RETURN
         TM    0(ZSUPOR),X'80'          IS AN OPERAND FOUND
         BZ    SUCRID1                  NO
         TM    0(ZSUPOR),X'06'          CRITICAL IDENTIFIER
         BO    SUCRID4                  YES
SUCRID3  LA    ZSUPOR,5(0,ZSUPOR)       ADDRESS NEXT ELEMENT
         B     SUCRID2
         SPACE
*                                  TREATMENT OF CRITICAL IDENTIFIERS
SUCRID4  L     ZMSR,PFA                 ADDRESS OF LAST CRIDTAB ENTRY
         LA    ZMSR,9(0,ZMSR)
SUCRID5  SH    ZMSR,NINE                FIND IDENTIFIER IN CRIDTAB
         CLC   1(3,ZMSR),2(ZSUPOR)      IDENTIFIER FOUND
         BNE   SUCRID5                  NO
         SPACE
SUCRID6  TM    4(ZMSR),X'80'            CONTROLLED VARIABEL
         BZ    SUCRID7                  NO
         LA    WORKR,ZFOSTA             ADDRESS OF FSTAB
         MVC   *+9(1),0(ZMSR)           DISPLACEMENT EQVALS FOR-NUMBER
         OI    0(WORKR),X'80'           ELEMENTARY LOUP
         B     SUCRID3
         SPACE
*                                  FIND CHAINED CONTROLLED VARIABEL
SUCRID7  TM    4(ZMSR),X'40'            ANY CHAINING
         BZ    SUCRID3                  NO
         MVC   ALIGNH(2),5(ZMSR)        CRIDTAB CHAIN
         L     ZMSR,ALIGN
         A     ZMSR,ZFOCRI              ADDRESS CHAINED ENTRY
         B     SUCRID6
         SPACE 3
*                   *****  LETRAF  *****
         SPACE
*              MAKE ENTRIES IN LVTAB CORRESPONDING TO ALL SUBSCRIPTABLE
*              NESTED FOR-STATEMENTS
         SPACE
*              RETURN REG LETRAFX
*              RECIEVED REG ZITANR
*              WORK REG ZMER, ZMAR, ZLEVAR
         SPACE
ZMER     EQU   R1
ZMAR     EQU   R2
ZLEVAR   EQU   WORKX
LETRAFX  EQU   R9
LETRAF   EQU   *
         CLI   ZLVOV,X'FF'              HAS TABLE OVERFLOW OCCURED
         BCR   8,LETRAFX                YES
         L     ZMER,PFA                 ADDRESS OF LAST CRIDTAB ENTRY
LETRAF1  LR    ZMAR,ZMER
         LA    WORKR,ZFOSTA
         MVC   *+9(1),0(ZMER)           ADDRESS ACTUAL FSTAB-ENTRY
         TM    0(WORKR),NOSUOP
         BO    LETRAF2
         L     ZLEVAR,ZLEVA
         C     ZLEVAR,ZLESTA            HAS A WRITE BEEN ISSUED
         BNE   LETRAF5                  NO
         BAL   WORKR,CHECK         YES, CHECK
          CLC   LVLENGTH(4),LVTAB40S    MORE OUTPUT ALLOWED
         BNL   LETRAF4                  NO
          LH   WORKR,LVCNT              STEP RECORD COUNTER
         LA    WORKR,1(0,WORKR)
         STH   WORKR,LVCNT
LETRAF5  LA    ZLEVAR,4(0,ZLEVAR)
         MVC   0(1,ZLEVAR),0(ZMER)      PLUG IN FS-NUMBER
         MVC   1(3,ZLEVAR),8(ZITANR)    PLUG IN ADDRESSPART OF CUR. ID.
         C     ZLEVAR,ZLEMAX            LVTAB FILLED UP
         BE    LETRAF3                  YES
LETRAF6  ST    ZLEVAR,ZLEVA
LETRAF2  SH    ZMER,NINE                GET NEXT CRIDTAB-ENTRY
         C     ZMER,PFANO               BEGINNING OF CRIDTAB
         BCR   8,LETRAFX                YES, RETURN
         CLC   0(1,ZMER),0(ZMAR)        IS IT AN ENTRY IN SAME FS
         BE    LETRAF2                  SAME
         B     LETRAF1                  NEW
         SPACE
LETRAF3  EQU   *
         BAL   WORKR,CHECK              CHECK POSSIBLE WRITE
         L     WORKR,LVSTRT             WRITE START ADDRESS
         L     WORKX,LVTAB30S           LENGTH OF WRITE
         BAL   R15,WRITE                WRITE
         L     WORKR,LVLENGTH           LENGTH OF LVTAB
         A     WORKR,LVTAB30S           BUFFER LENGTH
         ST    WORKR,LVLENGTH
         L     ZLEVAR,ZLESTA            START ADDRESS OF LVTAB
         B     LETRAF6
LETRAF4  EQU   *
         BAL   R15,TABOFLO
         BAL   MOVERROX,MOVERRO
         BR    LETRAFX
         EJECT
*                   *****  SUSCRITE  ******
         SPACE
*              ROUTINE TO CHECK IF AN SUBSCRIPT EXPRESSION IS OPTIMIZA-
*              BLE IN WHAT CASE AN SUTAB-ENTRY IS DONE, OTHER SUBROU-
*              TINE SUCRIDEL IS ENTRED BEFORE RETURN.
         SPACE
*              RETURN REG SUBTSTX
*              WORK REG ZARSPOR, SUBR, OPPTR, ADDENDR, CVR, SUTR
*              SUBROUTINE LINKS OPERANDX, SUBMULTX, SUTABX
         SPACE
SUBR     EQU   R1
SUTR     EQU   R1
OPPTR    EQU   R2
ZARSPOR  EQU   R2
ADDENDR  EQU   R7
CVR      EQU   R8
SUTABX   EQU   R14
SUBTSTX  EQU   R9
SUBMULTX EQU   R14
OPERANDX EQU   R15
         SPACE
SUSCRITE L     SUBR,ZBRACK              INITILIZE CURRENT POINTER
         LR    WORKR,ZOUR               ADDRESS OF LAST BYTE OF SUBSCR.
         SH    WORKR,FIVE               ADDRESS OPERATOR BEFOR LAST OPD
         ST    WORKR,SUBEND
         CLI   1(SUBR),X'01'            SUBSCRIPT START WITH + OR -
         BH    SUB1                     NO
         LA    SUBR,1(0,SUBR)           POINT TO BYTE BEFORE OPERAND
         SPACE
SUB1     C     SUBR,SUBEND              ANY OPERAND IN SUBSCRIPT
         BCR   2,SUBTSTX                NO, RETURN
         BAL   OPERANDX,OPERAND         TEST OPERAND
         C     SUBR,SUBEND              END OF SUBSCRIPT
         BE    SUBONE
         CLI   6(SUBR),X'02'            WHAT FOLLOWS FIRST OPERAND
         BL    SUBPM                    PLUS OR MINUS
         BE    SUBAST                   ASTERISK
         SPACE
*                                  UNOPTIMIZABLE SUBSCRIPT EXPRESSION
SUBNOOP  BAL   SUCRIDX,SUCRIDEL         HANDLE UNOPTIMIZABLE EXPRESSION
         BR    SUBTSTX                  RETURN
         SPACE
         SPACE
*                                  ONLY ONE OPERAND
SUBONE   LTR   CVR,OPPTR                CONTROLLED VARIABLE
         BP    SUBONE3                  YES
         MVC   ADDEND(6),0(SUBR)        OPERAND IS ADDEND
         MVC   FACTOR(6),ZEROELEM       SET FACTOR TO ZERO
         L     CVR,ZFOCRI               ADDRESS OF LAST CRIDTAB ENTRY
         L     ZARSPOR,ZARSPO           ADDRESS CURRENT ARIDSTAB-ENTRY
SUBONE1  SR    WORKR,WORKR              GET FSN
         IC    WORKR,0(0,CVR)
         STC   WORKR,OLDFSN
         LA    WORKX,ZFOSTA(WORKR)      ADDRESS FSTAB-ENTRY
         TM    0(WORKX),X'40'           SUBSCRIPT OPTIMIZATION POSSIBLE
         BO    SUBONE2
         L     ZARSPOR,ZARSPO           ADDRESS LAST ARIDSTACK ENTRY
         LA    WORKX,SPTAB(WORKR)       ADDRESS SPTAB-ENTRY
         CLC   0(1,WORKX),0(ZARSPOR)    SCOPE OF ARRAY OK
         BL    SUBONE2                  NO
         TM    ADDEND+2,X'30'           CONSTANT
         BZ    SUBONE4                  YES
         CLC   0(1,WORKX),ADDEND+3      SCOPE-TEST OF ADDEND
         BL    SUBONE2                  NOT OK
SUBONE4  BAL   SUTABX,SUTABENT          MAKE SUTAB-ENTRY
SUBONE2  C     CVR,PFA                  END OF CRIDTAB
         BCR   8,SUBTSTX                YES,RETURN
         LA    CVR,9(0,CVR)             FIND ENCLOSED FOR STATEMENT
OLDFSN   EQU   *+1
         CLI   0(CVR),X'00'             ENTRY TO SAME FOR-STATEMENT
         BE    SUBONE2                  YES, CHECK NEXT ENTRY
         B     SUBONE1                  NO, POSSIBLY NEW SUTAB-ENTRY
         SPACE
*                                  OPERAND IS CONTROLLED VARIABEL
SUBONE3  MVC   FACTOR(1),0(SUBR)        OPERATOR TO FACTOR
         MVC   FACTOR+1(5),ONEELEM+1    SET FACTOR TO ONE
SUBONE5  MVC   ADDEND(6),ZEROELEM       SET ADDEND TO ZERO
         B     SUBFIN1
*                                  FIRST OPERAND FOLLOWED BY + OR -.
SUBPM    MVC   ADDEND(6),0(SUBR)        FIRST OPERAND PROBABLY ADDEND
         LR    ADDENDR,OPPTR            SAVE CRIDTAB POINTER
         LA    SUBR,6(0,SUBR)           ADDRESS SIGN OF SECOND OPERAND
         BAL   OPERANDX,OPERAND         CHECK SECOND OPERAND
         C     SUBR,SUBEND              END OF SUBSCRIPT
         BE    SUBPM1                   YES
         CLI   6(SUBR),X'02'            ASTERISK SHOULD FOLLOW
         BNE   SUBNOOP                  NOT OPTIMIZABLE
         BAL   SUBMULTX,SUBMULT         CHECK MULTIPLICATION
         B     SUBFIN                   TERMINATE
         SPACE
SUBPM1   CR    OPPTR,ADDENDR            WHAT IS SECOND OPERAND
         BL    SUBPM3                   ADDEND
         BE    SUBPM4                   NOT OPTIMIZABLE EXPRESSION
         LR    CVR,OPPTR                ADDRESS CRIDTAB-ENTRY OF CONTR.
         MVC   FACTOR(1),0(SUBR)        SIGN OF FACTOR
SUBPM2   MVC   FACTOR+1(5),ONEELEM+1    SET FACTOR TO ONE
         B     SUBFIN
SUBPM3   LR    CVR,ADDENDR              SECOND OPERAND ADDEND, SHIFT
         LR    ADDENDR,OPPTR
         MVC   FACTOR(1),ADDEND         SIGN OF FACTOR
         MVC   ADDEND(6),0(SUBR)
         B     SUBPM2
SUBPM4   LTR   CVR,ADDENDR              CONTROLLED VARIABEL
         BCR   8,SUBTSTX                NO
         B     SUBFIN4                  YES
         SPACE
*                                  FIRST OPERAND FOLLOWED BY ASTERISK
SUBAST   BAL   SUBMULTX,SUBMULT         CHECK MULTIPLICATION
         C     SUBR,SUBEND              END OF SUBSCRIPT
         BE    SUBONE5                  YES, SET ADDEND TO ZERO
         CLI   6(SUBR),X'01'            PLUS OR MINUS
         BH    SUBNOOP                  NO, NO SUBSCRIPT OPTIMIZATION
         LA    SUBR,6(0,SUBR)           ADDRESS SIGN
         BAL   OPERANDX,OPERAND         CHECK OPERAND
         MVC   ADDEND(6),0(SUBR)        SAVE ADDEND
         LR    ADDENDR,OPPTR            LAST OPERAND WAS ADDEND
         SPACE
SUBFIN   LTR   ADDENDR,ADDENDR          ADDEND CONTROLLED VARIABEL
         BZ    SUBFIN1                  NO
         SR    WORKR,WORKR              YES INDICATE ELEMENTARY LOOP
         IC    WORKR,0(0,ADDENDR)
         LA    WORKX,ZFOSTA(WORKR)
         OI    0(WORKX),X'80'
         CR    CVR,ADDENDR              OPTIMIZATION POSSIBLE
         BNH   SUBFIN4                  NO
SUBFIN1  SR    WORKR,WORKR              FSN OF CONTROLLED VAR.TO RE6
         IC    WORKR,0(0,CVR)
         L     ZARSPOR,ZARSPO           ADDRESS LAST ARIDSTAB-ENTRY
         LA    WORKX,ZFOSTA(WORKR)      ADDRESS FSTAB-ENTRY
         TM    0(WORKX),X'40'           SUBSCRIPT OPTIMIZATION POSSIBLE
         BO    SUBFIN4                  NO, NO OPTIMIZATION
         LA    WORKX,SPTAB(WORKR)       ADDRESS SPTAB-ENTRY
         CLC   0(1,WORKX),0(ZARSPOR)    SCOPE OF ARRAY OK
         BL    SUBFIN4                  NO, NO OPTIMIZATION
         TM    FACTOR+2,X'30'           FACTOR CONSTANT
         BZ    SUBFIN2                  YES
         CLC   0(1,WORKX),FACTOR+3      SCOPE OF FACTOR OK
         BL    SUBFIN4                  NO, NO OPTIMIZATION
SUBFIN2  TM    ADDEND+2,X'30'           ADDEND CONSTANT
         BZ    SUBFIN3                  YES
         CLC   0(1,WORKX),ADDEND+3      SCOPE OF ADDEND OK
         BL    SUBFIN4                  NO, NO OPTIMIZATION
SUBFIN3  BAL   SUTABX,SUTABENT          MAKE SUTAB ENTRY
         BR    SUBTSTX                  RETURN
         SPACE
SUBFIN4  SR    WORKR,WORKR
         IC    WORKR,0(0,CVR)           FSN OF CONTROLLED VARIABEL
         LA    WORKX,ZFOSTA(WORKR)      ADDRESS FSTAB-ENTRY
         OI    0(WORKX),X'80'           ELEMENTARY LOOP
         BR    SUBTSTX
         SPACE 3
*                   *****  OPERAND  *****
         SPACE
*              SUBROUTINE TO SUSCRITE TO CHECK WHAT FOLLOWS AN OPERATOR
*              IF NOT AN INTEGER OPERAND AN ERROR-EXIT IS TAKEN. OTHER-
*              WISE THE SETTING OF REGISTER OPPTR SHOWS TYPE OF OPERAND
         SPACE
*              INITILIZED REGISTER OPPTR
         SPACE
OPERAND  TM    1(SUBR),X'80'            OPERAND
         BZ    SUBNOOP                  NO
         TM    2(SUBR),X'CE'            INTEGER
         BM    SUBNOOP                  NO
         TM    1(SUBR),X'06'            CRITICAL IDENTIFIER
         BO    OPERAND1                 YES
OPERAND4 SR    OPPTR,OPPTR              INDICATE 'NO-CONTROLLED VARIAB.
         BR    OPERANDX                 RETURN
         SPACE
*                                  IS OPERAND CONTROLLED VARIABEL
OPERAND1 L     OPPTR,PFA                ADDRESS OF LAST CRIDTAB ENTRY
         LA    OPPTR,9(0,OPPTR)         INITILIZE LOOP
OPERAND2 SH    OPPTR,NINE               GET NEXT ENTRY
         CLC   1(3,OPPTR),3(SUBR)       OPERAND FOUND
         BNE   OPERAND2                 NO, GET NEXT CRIDTAB ENTRY
         SPACE
OPERAND3 TM    4(OPPTR),X'80'           CONTROLLED VARIABEL
         BCR   1,OPERANDX               YES
         TM    4(OPPTR),X'40'           PRECEEDING CRITICAL IDENTIFIER
         BZ    OPERAND4                 NO
         MVC   ALIGNH(2),5(OPPTR)       GET CRIDTAB CHAIN
         L     OPPTR,ALIGN              GET ADDRESS OF CHAINED ENTRY
         A     OPPTR,ZFOCRI
         B     OPERAND3                 CHECK THIS ENTRY
         SPACE 3
*                   *****  SUBMULT  *****
         SPACE
*              SUBROUTINE TO SUSCRITE TO CHECK WHAT FOLLOWS AN ASTERISK
*              IF NOT INTEGER FACTOR TIMES INTEGER CONTROLLED VARIABEL
*              AN ERROR-EXIT IS TAKEN. OTHERWISE REGISTER CVR AND BUC-
*              KET FACTOR ARE INITILIZED.
         SPACE
*              INITILIZED REG CVR
         SPACE
SUBMULT  MVC   FACTOR(6),0(SUBR)        MOVE OPERAND TO FACTOR
         LR    CVR,OPPTR                SAVE PTR
         LA    SUBR,6(0,SUBR)           ADDRESS NEXT OPERAND
         BAL   OPERANDX,OPERAND         CHECK SECOND OPERAND
         CR    OPPTR,CVR                WHICH OPERAND IS FACTOR
         BH    SUBMULT2                 FIRST
         BE    SUBNOOP                  NONE, NO OPTIMIZATION
         MVC   FACTOR+1(5),1(SUBR)      SECOND, MOVE OPERAND TO FACTOR
SUBMULT1 LTR   OPPTR,OPPTR              FACTOR CONTROLLED VARIABEL
         BCR   8,SUBMULTX               NO, RETURN
         SR    WORKR,WORKR         SET FOR-LOOP OF FACTOR ELEMENTARY
         IC    WORKR,0(0,OPPTR)         FSN OF FACTOR
         LA    WORKX,ZFOSTA(WORKR)      ADDRESS FSTAB-ENTRY
         OI    0(WORKX),X'80'           MAKE LOOP ELEMENTARY
         BR    SUBMULTX                 RETURN
SUBMULT2 LR    WORKR,OPPTR              EXCHANGE REGISTERS
         LR    OPPTR,CVR
         LR    CVR,WORKR
         B     SUBMULT1
         SPACE 3
*                    *****  SUTABENT  *****
         SPACE
*              SUBROUTINE TO SUBSCRITE TO MAKE AN SUTAB-ENTRY.
         SPACE
SUTABENT L     SUTR,ZSUTAPO             CURRENT SUTAB PTR
         C     SUTR,ZSUDAD              HAS A WRITE MACRO BEEN GIVEN
         BNE   SUTAB1                   NO
         BAL   WORKR,CHECK              CHECK LAST OPERATION NO UT3
         CLC   SULENGTH(4),SUTAB40S     TABLE OVERFLOW
         BNL   SUTAB4                   YES
         LH    WORKR,SUCNT              STEP RECORD COUNTER
         LA    WORKR,1(0,WORKR)
         STH   WORKR,SUCNT
SUTAB1   LA    SUTR,14(0,SUTR)          ADDRESS NEW SUTAB-ENTRY
         ST    SUTR,ZSUTAPO             SAVE SUTAB PTR
*                                  MAKE SUTAB ENTRY
         MVC   0(1,SUTR),0(CVR)         INSERT FSN
         MVC   1(3,SUTR),0(ZARSPOR)     ADDRESS PART OF ARRAY
         MVC   4(3,SUTR),FACTOR+3       ADDRESS PART OF FACTOR
         MVC   7(3,SUTR),ADDEND+3       ADDRESS PART OF ADDEND
         MVC   10(1,SUTR),ZPOSIX+1      SUBSCRIPT NUMBER
         CLI   FACTOR,X'01'             SIGN OF FACTOR MINUS
         BNE   SUTAB2                   NO
         OI    10(SUTR),X'80'           YES, SET 1.BIT TO ONE
SUTAB2   CLI   ADDEND,X'01'             SIGN OF ADDEND MINUS
         BNE   SUTAB3                   NO
         OI    10(SUTR),X'40'           YES, SET 2.BIT TO ONE
SUTAB3   MVC   11(3,SUTR),4(ZARSPOR)    POSITION OF OPENING BRACKET
         SPACE
         C     SUTR,ZSUTMAX             SUTAB FILLED UP
         BCR   4,SUTABX
         BAL   WORKR,CHECK              CHECK POSSIBLE WRITE
         L     WORKR,SUSTRT             WRITE START ADDRESS
         L     WORKX,SUTAB30S           LENGTH OF WRITE
         BAL   R15,WRITE                WRITE
         L     WORKR,SULENGTH           GET FULL SUTAB LENGTH
         A     WORKR,SUTAB30S
         ST    WORKR,SULENGTH
         MVC   ZSUTAPO(4),ZSUDAD        INITILIZE CURRENT SUTAB PTR
         BR    SUTABX
         SPACE
SUTAB4   EQU   *
         BAL   R15,TABOFLO              HANDLE TABLE OVERFLOW
         BAL   MOVERROX,MOVERRO
         B     SUBFIN4                  NO OPT, MAKE LOOP ELEMENTARY
         SPACE 3
OUCHA    EQU   *
         STM   R14,R2,REGSAVE           SAVE REGISTERS
LOUCHAF  B     LOUCHA7                  BRANCH ONLY IF FIRST RECORD
         CHECK SWRITE
LOUCHA6  CLC   ZARSPO(4),ZARNO          BUFFER EXCHANGE IN SUBSCR.EXPR.
         BNE   LOUCHA1                  YES
LOUCHA5  MVI   1(ZOUR),X'2F'                 ZETA TERMINATES O-BUFFER
         L     ZOUR,ZOBWRITE
         LR    WORKX,ZOUR
         BCTR  ZOUR,0                   INITILIZE ZOUR
LOUCHA4  L     WORKR,SRCE3S             OUTPUT BUFFER LENGTH
         SH    WORKR,TWELVE             SET END PTRS
         AR    WORKR,WORKX
         ST    WORKR,ZFILE9
         LA    WORKR,3(0,WORKR)
         ST    WORKR,ZFILE6
         LA    WORKR,1(0,WORKR)
         ST    WORKR,ZFILE5
         LA    WORKR,2(0,WORKR)
         ST    WORKR,ZFILE3
         LA    WORKR,1(0,WORKR)
         ST    WORKR,ZFILE2
         LA    WORKR,1(0,WORKR)
         ST    WORKR,ZFILE1
         MVC   ZOBWRITE(4),ZOBWORK     ZOBWRITE=ZOBWORK
         ST    WORKX,ZOBWORK            STARTADDRESS OF NEW OUT-BUFFER
         LH    WORKR,ZOUTCOT            OUTPUT RECORD COUNTER
         CH    WORKR,TWOFIVFI           TOO MUCH SOURCE OUTPUT
         BE    LOUCHA8                  YES
         LA    WORKR,1(0,WORKR)
         STH   WORKR,ZOUTCOT
         L     WORKR,UT2ADD             DCB ADDRESS
         L     WORKX,ZOBWRITE           AREA ADDRESS
         WRITE SWRITE,SF,(WORKR),(WORKX)
         LM    R14,R2,REGSAVE
         BR    R15
LOUCHA1  L     WORKR,ZBRACK        GET  CURRENT LENGTH OF SUBSCRIPT
         LR    WORKX,ZOUR
         SR    WORKX,WORKR              SUBSCRIPT LENGTH
         BM    LOUCHA5                  NOTHING TO SAVE
         CH    WORKX,EIGHTEEN           SUBSCRIPT ALREADY TOO LONG
         BH    LOUCHA2                  YES
         STC   WORKX,LOUCHAM+1          LENGTH OF SUBSCRIPT
         STC   WORKX,LOUCHAL+3
         L     WORKX,ZOBWRITE           STARTADDRESS OF NEW OUT-BUFFER
LOUCHAM  MVC   0(1,WORKX),0(WORKR)      SAVE SUBSCRIPT
         MVI   0(WORKR),X'2F'           REPLACE OPENING BRACKET BY ZETA
LOUCHAL  LA    ZOUR,0(0,WORKX)          DISPLACEMENT LENGTH OF SUB
         ST    WORKX,ZBRACK             ADDRESS OF OPENING BRACKET
         CLI   0(WORKX),X'08'           IS SUBSCRIPT OPERATOR OPEN BRAC
         BNE   LOUCHA4                  NO
         L     WORKR,ZARSPO             YES, UPDATE ARIDSTAB-ENTRY
         LH    WORKX,ZOUTCOT            OUTPUT-RECORD COUNTER
         LA    WORKX,1(0,WORKX)         UPDATE
         STC   WORKX,4(0,WORKR)         STORE RECORD COUNTER
         MVC   5(2,WORKR),ZERO          SET RELATIVE ADDRESS TO ZERO
         L     WORKX,ZOBWRITE           START ADDRESS OF NEW BUFFER
         B     LOUCHA4
LOUCHA2  BAL   SUCRIDX,SUCRIDEL
         MVI   ZCLOBRA,X'FF'           ZCLOBRA IS SET TO X'FF'
         L     WORKR,ZOBWRITE           START ADDRESS OF NEW BUFFER
         BCTR  WORKR,0
         ST    WORKR,ZBRACK
         B     LOUCHA5                       BRANCH TO LOUCHA5
LOUCHA7  MVI   LOUCHAF+1,X'00'          TURN OFF SWITCH
         B     LOUCHA6
LOUCHA8  MVC   ZERRONU(2),TOOLONG
         MVC   ZBEGERR(4),ZENDERR
         BAL   MOVERROX,MOVERRO
         B     LOMEGA3
         SPACE 3
*                   *****  ICHA  *****
         SPACE
*              THE ROUTINE IS ENTERED WHEN OPERATOR ZETA (END OF INPUT-
*              BUFFER) IS FOUND. IF NECESSARY A PART OF THE OLD BUFFER
*              IS SAVED IMMEDIATLY BEFORE THE NEW BUFFER. START ADDRESS
*              OF SAVED AREA IS STORED IN ZIBWORK
         SPACE
*              RETURN REG R15
         SPACE
ICHA     EQU   *
         STM   R14,R2,REGSAVE           SAVE REGISTERS
         CHECK SREAD                    CHECK LAST READ
ICHA1    L     WORKR,UT1ADD             DCB ADDRESS
         L     WORKX,ZIBRUN             AREA ADDRESS
         READ  SREAD,SF,(WORKR),(WORKX)
         LM    R14,R2,REGSAVE           RESTORE REGISTERS
         L     ZINR,ZIBREAD             BEGIN OF ACTIVITED BUFFER
         MVC   ZIBREAD(4),ZIBRUN        EXCHANGE POINTERS
         ST    ZINR,ZIBRUN
         BR    R15
ICHAI    STM   R14,R2,REGSAVE
         B     ICHA1
         SPACE 3
*                   *****  ITABMOVE  ****
         SPACE
*              ITABMOVE IS ENTERD AT THE BEGINNING OF A NEW PROGRAM-
*              BLOCK AND DURING INITIALIZATION. THE READ OF NEXT ITAB-
*              RECORD IS ALREADY INITILIZED. IF A MOVE OF NEXT RECORD
*              IS NECESSARY IT IS DONE BY THE SUBROUTINE ITABM. ALL
*              CURRENT ITAB-POINTERS IS UPDATED
         SPACE
*              RETURN REG R15
*              WORKREG ZITRECR, ZITABSTR
*              SUBROUTINE ITABM, MOVERRO
         SPACE
ZITRECR  EQU   R7
ZITABSTR EQU   R8
ITABMOP  MVI   LETTERB,X'00'            TURN OFF PROCEDURE SWITCH
ITABMOVE EQU   *
         STM   R14,R2,REGSAVE
         CLI   IOBYTE,READM             INITILIZED READ OPERATION
         BNE   ITAB4                    NO
         CHECK RITAB                    YES, CHECK
         MVI   IOBYTE,READC             SET READ CHECK MASK
ITAB4    EQU   *
         L     ZITRECR,ZITREC           ADDRESS OF BLOCKBEGIN
         MVC   6(2,ZITRECR),ZCURITLE    ITAB REC LENGTH OF EMBR BLOCK
         MVC   ZCURITLE(2),0(ZITRECR)   LENGTH OF BLOCK
         SPACE
         L     ZITABSTR,ZCURITEN   TEST IF A MOVE IS NECESSARY
         LA    ZITABSTR,11(0,ZITABSTR)
         CR    ZITABSTR,ZITRECR
         BE    ITAB1                    NO MOVE
         SPACE
*                                  MOVE ITAB RECORD
         LH    WORKX,ZCURITLE           LENGTH OF ITAB RECORD
         EX    WORKX,ITABMEX            MOVE FIRST PART
         LR    WORKR,WORKX
         AR    ZITRECR,WORKR            END ADDRESS OF MOVED RECORD
         AR    WORKR,ZITABSTR           END ADDRESS OR UNMOVED RECORD
         SH    ZITRECR,C1792            PREPARE MOVE
         SH    WORKR,C1792              PREPARE MOVE
         SRA   WORKX,8                  PREPARE BRANCH
         SLA   WORKX,2
         B     *+4(WORKX)
         B     ITABM8
         B     ITABM7
         B     ITABM6
         B     ITABM5
         B     ITABM4
         B     ITABM3
         B     ITABM2
         MVC   0(256,WORKR),0(ZITRECR)
ITABM2   MVC   256(256,WORKR),256(ZITRECR)
ITABM3   MVC   512(256,WORKR),512(ZITRECR)
ITABM4   MVC   768(256,WORKR),768(ZITRECR)
ITABM5   MVC   1024(256,WORKR),1024(ZITRECR)
ITABM6   MVC   1280(256,WORKR),1280(ZITRECR)
ITABM7   MVC   1536(256,WORKR),1536(ZITRECR)
ITABM8   EQU   *
         SPACE
ITAB1    LH    WORKR,ZCURITLE           GET ADDRESS OF LAST ITAB ENTRY
         A     WORKR,ZCURITEN           ACTUELL RECORDLENGTH + PREV.ADD
         ST    WORKR,ZCURITEN
         LA    WORKR,11(0,WORKR)        ADDRESS OF FIRST FREE BYTE
         ST    WORKR,ZITREC
         CLC   10(1,ZITABSTR),PBN+1     LAST ITAB RECORD
         BE    ITAB7                    YES
         MVC   ALIGNH(2),2(ZITABSTR)    LENGTH OF NEXT BLOCK
         A     WORKR,ALIGN              END ADDRESS OF NEXT BLOCK
         C     WORKR,ZITEND             ITAB OVERFLOW
         BH    ITAB10                   YES
         CLI   IOBYTE,READC             WHICH I/O STATUS
         BE    ITAB6                    CHECKED READ OPERATION
         BL    ITAB5                    CHECKED WRITE OPERATION
         CHECK TWRITE                   INITILIZED WRITE OPERATION
ITAB5    EQU   *
         L     R1,UT3ADD                DCB ADDRESS
         NOTE  (1)                      SAVE ID OF LAST BLOCK
         ST    R1,NOTEW
         L     R1,UT3ADD                DCB ADDRESS
         MVI   NOTER+3,X'01'            ADDRESS NEXT ITAB BLOCK
         POINT (1),NOTER
ITAB6    EQU   *
         L     WORKR,UT3ADD             DCB ADDRESS
         L     WORKX,ZITREC             READ START ADDRESS
         READ  RITAB,SF,(WORKR),(WORKX),'S'
         MVI   IOBYTE,READM             SET ITAB READ
ITAB7    EQU   *
         LM    R14,R2,REGSAVE
         MVC   CURPBN(1),10(ZITABSTR)   SAVE CURRENT PBN
         BR    R15                      RETURN
ITAB10   ST    ZINR,ZBEGERR        ERROR EDIT
         ST    ZINR,ZENDERR
         MVC   ZERRONU(2),ITABOVER
         BAL   MOVERROX,MOVERRO
         B     LOMEGA3
ITABREAD EQU   *
         STM   R14,R2,REGSAVE
         LA    ZITABSTR,GENER           ADDRESS DUMMY HEADER
         B     ITAB6
         SPACE
ITABMEX  MVC   0(1,ZITABSTR),0(ZITRECR)
         SPACE 3
*              INVALID OPERAND FOUND. SET SYNTAX CHECK MODE AND GIVE
*              ERRORMESSAGE.
INCOROP  OI    HCOMPMOD,X'80'           SET SYNTAX CHECK MODE
         LA    R0,ZIDEX+12
INCOROP5 LR    RFI,ZINR
INCOROP1 CLI   0(ZINR),X'2E'            END OF OPERAND
         BL    INCOROP2                 YES
         BE    INCOROP3                 STRING OR LOGICAL VALUE
         CLI   0(ZINR),X'2F'            END OF INPUT BUFFER
         BE    INCOROP4                 YES
         LA    ZINR,1(0,ZINR)           PROCEED SCAN FOR OPERAND END
         B     INCOROP1
         SPACE
INCOROP4 EQU   *
         LR    R1,ZINR
         BAL   MOVEX,MOVE
         BAL   R15,ICHA
         B     INCOROP5
INCOROP2 EQU   *
         LR    R1,ZINR
         BAL   MOVEX,MOVE
         ST    RTO,ZENDERR
         MVC   ZBEGERR,OPSTART
         BAL   MOVERROX,MOVERRO
         LA    ZITANR,ZALLPU            REPLACE INCOR.ID. BY ALL PUB.ID
         B     LETTER1
         SPACE
INCOROP3 MVC   0(6,ZINR),ZPOINT         REPLACE INT.NAME BY SIX PERIODS
         LA    ZINR,6(0,ZINR)
         B     INCOROP1
         SPACE 2
*                   *****  MOVERRO  *****
         SPACE
*              ERROR-EDITING ROUTINE. OUTPUTS ALWAYS FIXED PART CON-
*              TAINING LENGTH OF ENTRY, ERROR NUMBER AND SEMICOLON
*              COUNTER. SOMETMES VARIABEL PART WHOS STARTADDRESS IS
*              STORED IN ZBEGERR AND (END ADDRESS + 1) IN ZENDERR.
         SPACE
*              RETURN REG MOVERROX
         SPACE
ZERRPOR  EQU   WORKR
ZLER     EQU   WORKX
MOVERROX EQU   R15
MOVERRO  EQU   *
         L     ZERRPOR,NEXTERR
         C     ZERRPOR,ENDPOOL          ERROR POOL OVERFLOW
         BH    MOVERRO2                 YES
         L     ZLER,ZENDERR             GET LENGTH OF VARIABEL PART
         S     ZLER,ZBEGERR
         CH    ZLER,TWELVE              DOES LENGTH EXCEEDS MAXIMUM
         BNH   MOVERRO1                 NO
         LH    ZLER,TWELVE              YES, SET LENGTH TO MAX
MOVERRO1 LA    ZLER,4(0,ZLER)           LENGTH OF FULL ERROR ENTRY
         SPACE
         AR    ZERRPOR,ZLER             GET ADDRESS OF NEXT ERROR ENTRY
         ST    ZERRPOR,NEXTERR
         SR    ZERRPOR,ZLER
         SPACE
         STC   ZLER,0(0,ZERRPOR)   FIXED PART OF ERROR ENTRY, LENGTH
         MVC   1(1,ZERRPOR),ZERRONU+1   ERROR NUMBER
         MVC   2(2,ZERRPOR),SEMCNT      SEMICOLON COUNTER
         SPACE
         SH    ZLER,FIVE                ANY VARIABEL PART
         BM    MOVERRO3                 NO
         STC   ZLER,MOVERROM+1          LENGTH OF MOVE
         L     ZLER,ZBEGERR             START ADD OF ADDITIONAL PART
MOVERROM MVC   4(1,ZERRPOR),0(ZLER)     MOVE ADDITIONAL PART
MOVERRO3 BR    MOVERROX
MOVERRO2 EQU   *
         MVI   0(ZERRPOR),X'04'         TERMINATING ERROR ENTRY
         MVI   1(ZERRPOR),TOOMANY
         MVC   2(2,ZERRPOR),SEMCNT
         LA    ZERRPOR,4(0,ZERRPOR)
         ST    ZERRPOR,NEXTERR
         B     LOMEGA3
         SPACE 3
MOVEX    EQU   R15
RTO      EQU   R8
RFI      EQU   R9
         SPACE
MOVEP    EQU   *
         LR    WORKR,ZINR               FIELD OF ONE BYTE
         SR    WORKR,RFI
         BC    7,MOVE
         LTR   REXCORR,REXCORR          POINT FOLLOWED BY ZERO
         BCR   4,MOVEX                  YES, NO SYNTAX ERROR
         LA    WORKR,NUMBER(REXCORR)    ADDRESS IMPLIED POINT
         CR    WORKR,RTO                POINT TERMINATE NUMBER
         BE    QTORLT1                  YES
         SPACE
MOVE     EQU   *
         SR    R1,RFI                   LENGTH OF MOVE
         LR    WORKR,RTO                CALCULATE END ADDRESS
         AR    WORKR,R1
         CR    WORKR,R0                 FULL MOVE POSSIBLE
         BH    MOVE1                    NO
         EX    R1,MOVEEX                MOVE
         LR    RTO,WORKR                STEP PTR
         BR    MOVEX
         SPACE
MOVE1    LR    WORKR,R0                 CALCULATE LENGTH OF POSSI .MOVE
         SR    WORKR,RTO
         EX    WORKR,MOVEEX
         LR    RTO,R0
         BR    MOVEX
         SPACE
MOVEEX   MVC   0(0,RTO),0(RFI)
         SPACE 3
CHECK    EQU   *
         CLI   IOBYTE,WRITEM            INITILIZED WRITE OPERATION
         BCR   7,WORKR                  NO, RETURN
         STM   R14,R2,REGSAVE
         CHECK TWRITE                   CHECK LAST WRITE
         MVI   IOBYTE,WRITEC            SET WRITE CHECK MASK
         LM    R14,R2,REGSAVE
         BR    WORKR
         SPACE 3
WRITE    EQU   *
         STM   R14,R2,REGSAVE
         CLI   IOBYTE,READC             WHICH I/O STATUS
         BL    WRITE2                   CHECKED WRITE OPERATION
         BE    WRITE1                   CHECKED READ OPERATION
         CHECK RITAB                    INITILIZED READ OPERATION
WRITE1   EQU   *
         L     R1,UT3ADD                DCB ADDRESS
         NOTE  (1)                      SAVE ID OF LAST BLOCK
         ST    R1,NOTER
         L     R1,UT3ADD                DCB ADDRESS
         MVI   NOTEW+3,X'01'            ADDRESS NEXT OUTPUT BLOCK
         POINT (1),NOTEW
WRITE2   EQU   *
         L     R0,UT3ADD                DCB ADDRESS
         LA    WORKX,4(0,WORKX)         ADD KEY-LENGTH
         WRITE TWRITE,SF,(R0),(WORKR),(WORKX)
         MVI   IOBYTE,WRITEM            SET WRITE MASK
         LM    R14,R2,REGSAVE
         BR    R15
         SPACE
TABOFLO  EQU   *
         L     WORKR,PFA                ADDRESS OF LAST CRIDTAB ENTRY
TABOFLO1 SR    WORKX,WORKX
         IC    WORKX,0(0,WORKR)         FOR STATEMENT NUMBER
         LA    WORKX,FSTAB(WORKX)       ADDRESS FOR STATEMENT ENTRY
         OI    0(WORKX),NOSUOP
         SH    WORKR,NINE
         C     WORKR,PFANO              END OF CRIDTAB
         BNH   TABOFLO1                 NO
         SPACE
         MVI   ZLVOV,X'FF'              SET ERROR SWITCH
         MVC   ZARSPO(4),ZARNO          SKIP ALL ARIDSTAB-ENTRIES
         ST    ZINR,ZBEGERR             ERROR EDITING
         ST    ZINR,ZENDERR
         MVC   ZERRONU(2),TABOVER
         BR    R15
         EJECT
IEX30002 CSECT
RET      EQU   R14
REXCORR  EQU   R7
         SPACE
DIGIT19  EQU   *
         LA    RTO,NUMBER
         LA    R0,NUMBER+19             MAX LENGTH OF CONSTANT + 1
         SR    REXCORR,REXCORR
         LR    RFI,ZINR                 SET FIELD START
         MVI   SCATEST,X'00'
DIG191   LA    R1,1(0,ZINR)             TRT START
DIG192   SR    R2,R2
DIG193   TRT   0(256,R1),DIG19
         BZ    DIGL19                   MORE THAN 256 BYTES
         LR    ZINR,R1                  UPDATE ZINR
         B     *(R2)                    BRANCH TABLE
         B     DECPTM
         B     SCAFACTM
         B     QTORLT
         B     ZETAM
         B     RHO
         B     OTHER
         SPACE
DECPTM   EQU   *
         BAL   MOVEX,MOVE
         AR    REXCORR,R1               EXPONENT CORRECTION
         B     DECPOIN1
         SPACE
SCAFACTM BAL   MOVEX,MOVE
         AR    REXCORR,R1               EXPONENT CORRECTION
         B     SCA1
         SPACE
QTORLT   EQU   *
         BAL   MOVEX,MOVE
         AR    REXCORR,R1               NUMBER OF INTEGERS
QTORLT1  ST    REXCORR,ZEXCORR
         BAL   CERRX,CERR               REBUILD CONSTANT
         MVC   ZERRONU(2),INVOP
         B     INCOROP
         SPACE
ZETAM    EQU   *
         BAL   MOVEX,MOVE
         AR    REXCORR,R1               EXPONENT CORRECTION
         BAL   R15,ICHA
         LR    R1,ZINR
         LR    RFI,ZINR
         B     DIG192
         SPACE
OTHER    EQU   *
         C     RTO,NSTART               BUFFER EXCHANGE WITHIN INTEGER
         BNE   OTHER1                   YES
         LR    REXCORR,ZINR             COMPUTE NUMBER OF DIGITS
         SR    REXCORR,RFI
         B     INTCON
OTHER1   BAL   MOVEX,MOVE
         AR    REXCORR,R1               GET NUMBER OF DIGITS
         LR    R1,RTO                   ADJUST POINTERS
         LA    RFI,NUMBER
         B     INTCON
         SPACE
DIGL19   LA    R1,256(0,R1)             UPDATE INPUT PTR
         B     DIG193
         SPACE
DIGIT0   EQU   *
         LA    RTO,NUMBER
         LA    R0,NUMBER+19             MAX LENGTH OF CONSTANT + 1
         SR    REXCORR,REXCORR
         MVI   SCATEST,X'00'
         LA    R1,1(0,ZINR)
DIG01    SR    R2,R2
DIG02    TRT   0(256,R1),DIG0
         BZ    DIGL0                    MORE THAN 256 BYTES
         LR    ZINR,R1
         LR    RFI,ZINR
         B     *(R2)
         B     DIG191
         B     QTORLT
         B     DECPOIN1
         B     SCA0
         B     ZETA0
         B     RHO
         B     OTHOP0
         SPACE
SCA0     EQU   *
         LD    XFLOAT,ZEROFLOA          FLOATING ZERO
         B     SCA1
         SPACE
ZETA0    EQU   *
         BAL   R15,ICHA                 CHANGE INPUT BUFFER
         LR    R1,ZINR
         B     DIG01
         SPACE
OTHOP0   EQU   *
         C     ZOUR,ZFILE5              OUTPUT BUFFER FULL
         BNH   *+8                      NO
         BAL   R15,OUCHA                YES
         MVC   3(3,ZOUR),ZERO           ADDRESSPART OF INTERNAL NAME
         MVC   1(2,ZOUR),ZINTYP         INDICATE INTEGER
         LA    ZOUR,5(0,ZOUR)
         B     GENTEST
         SPACE
DIGL0    LA    R1,256(0,R1)             UPDATE INPUT PTR
         B     DIG02
         SPACE
DECPOIN  EQU   *
         LA    RTO,NUMBER
         LA    R0,NUMBER+19             MAX LENGTH OF CONSTANT + 1
         SR    REXCORR,REXCORR
         MVI   SCATEST,X'00'
DECPOIN1 LA    RFI,1(0,ZINR)
DECPOIN2 LA    R1,1(0,ZINR)
DECPOIN3 SR    R2,R2
DECPOIN4 TRT   0(256,R1),DECPO
         BZ    DECPOINL                 MORE THAN 256 BYTES
         LR    ZINR,R1
         B     *(R2)
         B     DECP0                    ZERO
         B     QTORLTP
         B     DECPSCA                  SCALE FACTOR
         B     DECPZETA                 ZETA
         B     DECPOT                   OTHER OPERATOR
         SPACE
DECP0    EQU   *
         CR    RFI,ZINR                 ZERO FOLLOWING POINT
         BNE   DECPOIN2                 NO
         C     RTO,NSTART               PRECEEDING SIGNIFICANT DIGIT
         BNE   DECPOIN2                 YES
         BCTR  REXCORR,0                NO, DECREASE EXPONENT
         B     DECPOIN1
         SPACE
QTORLTP  BAL   MOVEX,MOVE
         B     QTORLT1
         SPACE
DECPSCA  EQU   *
         BAL   MOVEX,MOVEP              SYNTAX CHECK AND MOVE
         C     RTO,NSTART               ZERO
         BNE   SCA1                     NO
         LD    XFLOAT,ZEROFLOA          YES, FLOATING ZERO
         B     SCA1
         SPACE
DECPZETA EQU   *
         BAL   MOVEX,MOVE
         BAL   R15,ICHA
         LR    RFI,ZINR
         LR    R1,ZINR
         B     DECPOIN3
         SPACE
DECPOT   EQU   *
         ST    REXCORR,ZEXCORR
         BAL   MOVEX,MOVEP              SYNTAX CHECK AND MOVE
         C     RTO,NSTART               ZERO
         BNE   REALCON                  NO, CONVERT NUMBER
         LD    XFLOAT,ZEROFLOA          YES, NUMBER IS FLOATING ZERO
         B     REALHAN                  MAKE A CONSTANT POOL ENTRY
         SPACE
DECPOINL LA    R1,256(0,R1)             UPDATE INPUT PTR
         B     DECPOIN4
         SPACE
SCAFACT  EQU   *
         SR    REXCORR,REXCORR
         LD    XFLOAT,ZONEFLOA          MANTISSA SET TO ONE
         LA    RTO,NUMBER               NO MANTISSA DIGIT
SCA1     ST    RTO,ZTO
         ST    REXCORR,ZEXCORR
         LA    RTO,SCAWORK
         LA    R0,SCAWORK+9
         MVI   SCATEST,X'10'            SCALE FACTOR PRESENT
         MVI   SCALE,X'00'              CLEAR OLD SIGN
SCA20    LA    RFI,1(0,ZINR)
SCA2     LA    R1,1(0,ZINR)
SCA3     SR    R2,R2
SCA4     TRT   0(256,R1),SCAFAC
         BZ    SCAL                     MORE THAN 256 BYTES
         LR    ZINR,R1
         B     *(R2)
         B     SCA19
         B     SCAZERO
         B     SCASIGN
         B     SCAQL
         B     SCAZETA
         B     SCAOT
         SPACE
SCA19    EQU   *
         OI    SCATEST,SF19             SIGNIFICANT DIGIT PRESENT
         B     SCA2
         SPACE
SCAZERO  EQU   *
         TM    SCATEST,SF19             ANY SIGNIFICANT DIGIT
         BO    SCA2                     YES
         OI    SCATEST,SFL0             LEADING ZERO
         B     SCA20
         SPACE
SCASIGN  EQU   *
         TM    SCATEST,SFLSIGN          LEADING SIGN
         BC    7,SCAOT                  NO,TREAT AS OTHER OPERATOR
         MVC   SCALE(1),0(ZINR)         SAVE SIGN
         OI    SCATEST,SFSIGN           SIGNED SCALE FACTOR
         B     SCA20
         SPACE
SCAZETA  EQU   *
         BAL   MOVEX,MOVE               SAVE FIELD
         BAL   R15,ICHA
         LR    R1,ZINR
         LR    RFI,ZINR
         B     SCA3
         SPACE
SCAOT    EQU   *
         TM    SCATEST,SFDIGIT          ANY DIGIT
         BZ    SCAQL                    NO, ERROR MESSAGE
         TM    SCATEST,SF19             ANY SIGNIFICANT DIGIT
         BZ    SCAOT1                   NO
         BAL   MOVEX,MOVE
         S     RTO,SCAWORKA
         EX    RTO,SCAPACK
         MVN   ZPACK+7(1),SREF          SET SIGN TO PLUS
         CLI   SCALE,X'01'              MUNUS SIGN
         BNE   *+10                     NO
         MVN   ZPACK+7(1),SREF+1        YES, REPLACE PLUS SIGN
         CVB   WORKR,ZPACK              CONVERT
         AR    REXCORR,WORKR            GET EXPONENT
         SPACE
SCAOT1   ST    RTO,ZTOSCA
         L     RTO,ZTO
         B     REALCON
SCAPACK  PACK  ZPACK(8),SCAWORK(0)
         SPACE
SCAQL    EQU   *
         BAL   MOVEX,MOVE
         S     RTO,SCAWORKA             SCALE FACTOR LENGTH
         ST    RTO,ZTOSCA
         L     RTO,ZTO
         BAL   CERRX,CERR               REBUILD CONSTANT
         MVC   ZERRONU(2),INVOP
         B     INCOROP
         SPACE
SCAL     LA    R1,256(0,R1)             UPDATE INPUT PTR
         B     SCA4
         SPACE 3
CERRX    EQU   R2
         SPACE
CERR     EQU   *                   CONSTANT ERROR ROUTINE
         TM    SCATEST,PRECERR          CONSTANT ALREADY REBUILT
         BCR   1,CERRX                  YES
         L     WORKR,ZEXCORR            NUMBER OF INTEGERS IN MANTISSA
         LTR   WORKR,WORKR              LEADING ZEROS AFTER POINT
         BM    CERR1                    YES
         CH    WORKR,TWELVE             CONSTANT TOO LONG
         BNH   *+8                      NO
         LH    WORKR,TWELVE             SET MAXIMAL LENGTH
         EX    WORKR,CERREX             MOVE CONSTANT INTEGERS
         A     WORKR,OPSTART            ADDRESS DECIMAL POINT
         MVI   0(WORKR),X'3E'           INSERT POINT
         BCTR  RTO,0
         CR    RTO,WORKR                ANY DECIMAL POINT
         BE    *+8                      NO
         LA    RTO,1(0,RTO)             PREVENT POINT OVERLAY
         B     CERR2
         SPACE
CERR1    MVI   ZIDEX,X'3E'              INSERT POINT
CERR2    EQU   *
         TM    SCATEST,SF               SCALE FACTOR PRESENT
         BZ    CERR3                    NO
         LA    R0,NUMBER+21
         MVC   0(2,RTO),SCALEQ          INSERT QUOTE AND SIGN
         TM    SCATEST,SFSIGN           SIGNED SCALE FACTOR
         BO    *+6                      YES
         BCTR  RTO,0
         LA    RTO,2(0,RTO)
         L     R1,ZTOSCA
         LA    R1,1(0,R1)          SCALE FACTOR LENGTH
         LA    RFI,SCAWORK
         AR    R1,RFI                   SCALE FACTOR END ADDRESS
         BAL   MOVEX,MOVE               MOVE SCALE FACTOR
         SPACE
CERR3    LA    WORKR,ZIDEX+12
         CR    RTO,WORKR                MORE THAN 12 CHARACTERS
         BNH   *+6                      NO
         LR    RTO,WORKR                YES SET LENGTH TO 12
         ST    RTO,ZENDERR
         MVC   ZBEGERR(4),OPSTART
         BR    CERRX
CERREX   MVC   ZIDEX(0),NUMBER
         EJECT
RLIT     EQU   R1
RBIN     EQU   R2
RCNT     EQU   R9
REXNU    EQU   R9
REXNX    EQU   R1
REXTAB   EQU   R2
XFLOAT   EQU   0
         SPACE
INTCON   EQU   *
         CH    REXCORR,TEN              NUMBER OF DIGITS
         BL    INTCON1                  NO
         BH    INTCON2                  YES, REAL CONSTANT
         CLC   0(10,RFI),MAXNR          MAXIMAL INTEGER
         BH    INTCON2                  GREATER, REAL CONSTANT
INTCON1  BCTR  REXCORR,0
         EX    REXCORR,INTPACK          PACK
         MVN   ZPACK+7(1),SREF          SET PLUS SIGN
         CVB   RBIN,ZPACK               PACK
         B     INTHAN
INTCON2  ST    RFI,ZBEGERR              GIVE ERROR MESSAGE
         ST    R1,ZENDERR
         MVC   ZERRONU(2),RANGEINT
         BAL   MOVERROX,MOVERRO
         ST    REXCORR,ZEXCORR
         L     RTO,NSTART
         BAL   MOVEX,MOVE
         B     REALCON
INTPACK  PACK  ZPACK(8),0(0,RFI)        LENGTH IN R1
         EJECT
REALCON  EQU   *
         LR    WORKX,RTO                GET LENGTH OF CONSTANT
         S     WORKX,NSTART
         BZ    REALCON7
         SPACE
*              CONVERT MANTISSA TO FLOATING FORM
         LD    XFLOAT,ZEROFLOA          ZEROIZE REGISTER
         LR    RCNT,WORKX               NUMBER OF DIGITS
         SR    REXCORR,RCNT             UPDATE EXPONENT CORRECTION
         CH    RCNT,NINE                CONVERSION IN ONE STEP
         BH    REALCON1                 NO
         BCTR  RCNT,0
         EX    RCNT,REPACK              PACK
REALCON2 MVN   ZPACK+7(1),SREF          SET PLUS SIGN
         CVB   WORKR,ZPACK              CONVERT TO BINARY
         ST    WORKR,ZFLOFIEL+4         CONVERT TO FLOATING FORM
         AD    XFLOAT,ZFLOFIEL           GET NORMALIZED FLOATING NUMBER
         SPACE
         C     WORKX,NREAL              MORE DIGITS THAN ALLOWED
         BNH   REALCON3                 NO
         BAL   CERRX,CERR               REBUILD CONSTANT
         MVC   ZERRONU(2),PRECREAL
         BAL   MOVERROX,MOVERRO
         OI    SCATEST,PRECERR          INDICATE PRECITION ERROR
         B     REALCON3
         SPACE
*              CONVERT EXPONENT TO FLOATING FORM
REALCON7 EQU   *
         LTDR  XFLOAT,XFLOAT            FLOATING ZERO
         BZ    REALHAN                  YES
REALCON3 LPR   REXNU,REXCORR            ZERO EXPONENT
         BZ    REALHAN                  YES
         LR    REXNX,REXNU
         LA    REXTAB,ZEXTABP-8         TABLE FOR POSITIVE EXPONENT
         LTR   REXCORR,REXCORR          POSITIVE EXPONENT
         BP    *+8                      YES
         LA    REXTAB,ZEXTABN-8         N/, TABLE FOR NEGATIVE EXPONENT
REALCON6 CH    REXNU,SIXFOUR            EXPONENT MORE THAN 64
         BNL   REALCON5                 YES
         N     REXNU,SCALEMSK           NO, X'38'
         BZ    REALCON8
         MD    XFLOAT,56(REXNU,REXTAB)
REALCON8 EQU   *
         SLA   REXNX,3                  MULTIPLY BY 8
         N     REXNX,SCALEMSK
         BZ    REALCON9
         MD    XFLOAT,0(REXNX,REXTAB)
REALCON9 EQU   *
         LTDR  XFLOAT,XFLOAT            EXPONENT UNDERFLOW
         BZ    REALERR1
         B     REALHAN
REALCON5 MD    XFLOAT,120(0,REXTAB)     10 ** +- 64
         LTDR  XFLOAT,XFLOAT
         BZ    REALERR1
         SH    REXNU,SIXFOUR            ADJUST EXPONENT
         B     REALCON6
REALCON1 SH    RCNT,TEN
         CH    RCNT,NINE                CONSTANT TOO LONG
         BL    *+10                     NO
         BCTR  RCNT,0                   YES, SKIP THE NINETEENTH DIGIT
         AH    REXCORR,ONE              UPDATE REXCORR
         EX    RCNT,REPACK              PACK FIRST PART
         MVN   ZPACK+7(1),SREF          SET PLUS SIGN
         CVB   WORKR,ZPACK              CONVERT TO BINARY
         ST    WORKR,ZFLOFIEL+4         CONVERT TO FLOATING FORM
         AD    XFLOAT,ZFLOFIEL          NORMALIZE
         MD    XFLOAT,ZTEN9             MULTIPLY BY 10 ** 9
         LA    RCNT,NUMBER+1(RCNT)      ADDRESS SECOND PART
         PACK  ZPACK(8),0(9,RCNT)       PACK SECOND PART
         B      REALCON2                TERMINATE CONVERSION
REPACK   PACK  ZPACK(8),NUMBER(0)       LENGTH OF NUMBER IN RCNT
         SPACE
REALERR  EQU   *
         LA    WORKR,REALHAN            SET EXIT ADDRESS
         ST    WORKR,ZSTO
         MVC   9(3,R1),ZSTO+1           MODIFIE OLD PSW IN PIE
         BAL   CERRX,CERR               REBUILD CONSTANT
         MVC   ZERRONU(2),RANGEREA
         BAL   MOVERROX,MOVERRO
         OI    HCOMPMOD,X'80'
         BR    R14
REALERR1 BAL   CERRX,CERR               REBUILD CONSTANT
         MVC   ZERRONU(2),RANGEREA
         BAL   MOVERROX,MOVERRO
         OI    HCOMPMOD,SYNTAX
         B     REALHAN
         EJECT
RWP      EQU   R9                       CANNOT BE CHANGED
RDWP     EQU   R7                       CANNOT BE CHANGED
RINTL    EQU   R14
REALL    EQU   R14
         SPACE
INTHAN   EQU   *                   INTEGER HANDLING
         C     ZOUR,ZFILE5              SPACE ENOUGH IN OUTPUT BUFFER
         BNH   *+8                      YES
         BAL   R15,OUCHA                NO, CHANGE BUFFER
         MVC   1(2,ZOUR),ZINTYP         FIRST TWO BYTES OF INTERNAL NAM
INTHANR  EQU   *
         CH    RBIN,FIFTEEN             IS NUMBER GREATER THAN 15
         BH    INTHAN2                  YES
         SLA   RBIN,2                   NO, MULTIPLY BY 4
         STH   RBIN,ZLIRE
         MVI   3(ZOUR),X'00'                    OUTPUT
         MVC   4(2,ZOUR),ZLIRE                         FIELD
         LA    ZOUR,5(0,ZOUR)           UPDATE OUTPUT POINTER
         B     GENTEST                  RETURN
INTHAN2  EQU   *
         TM    HCOMPMOD,SYNTAX          COMPILE MODE
         BO    INTHAN1                  NO
         LA    RINTL,INTHAN6       INITILIZE INTEGER SEARCH
         LA    R8,4
         L     RWP,ZWP
         L     RDWP,ZDWP
         L     RLIT,ZLITSTA
         SR    RLIT,R8
         SR    RWP,R8
INTHAN6  BXH   RLIT,R8,INTHAN3          EXIT FOR END OF SEARCH
         C     RBIN,0(0,RLIT)           INTEGER FOUND
         BCR   7,RINTL                  NO, PROCEED SEARCH
         SPACE
REALH1   EQU   *
INTHAN1  EQU   *
         S     RLIT,ZKOPOOL             GET REL ADDRESS
         STH   RLIT,ZLIRE                               IN CONST POOL
         MVC   3(1,ZOUR),KBN+1          INSERT CONSTANT BLOCK NUMBER
         MVC   4(2,ZOUR),ZLIRE          DISPLACEMENT ADDRESS
         LA    ZOUR,5(0,ZOUR)
         B     GENTEST
         SPACE
INTHAN3  EQU   *
         AR    RWP,R8
         CR    RWP,RDWP                 DOUBLE WORD BOUNDARY
         BE    INTHAN9                  YES
         SPACE
INTHAN4  LA    RLIT,4(0,RLIT)           SCAN REST OF CONSTANT POOL
         CR    RLIT,RDWP                CURRENT END OF CONSTANT POOL
         BE    INTHAN10                 YES
         C     RBIN,0(0,RLIT)           LITERAL FOUND
         BNE   INTHAN4                  NO
         BE    INTHAN1
         SPACE
INTHAN10 LR    RLIT,RWP
         LR    RWP,RDWP
INTHAN7  ST    RWP,ZWP                  SAVE PTR
         ST    RBIN,0(0,RLIT)           MAKE LITERAL POOL ENTRY
         B     INTHAN1
INTHAN9  C     RWP,ZKOPEND              END OF LITERAL POOL
         BNL   INTHAN8
         C     RWP,ZTEXTCO              WRITE TXT-CARD
         BL    INTHAN5                  NO
         BAL   R14,TXTTRAF              WRITE
INTHAN5  LA    RWP,4(0,RWP)             UPDATE POINTERS
         A     RDWP,LREAL
         ST    RDWP,ZDWP                SAVE UPDATE ZDWP
         B     INTHAN7
         SPACE
INTHAN8  CLC   ZKBNMAX(2),TWOFIVFI      LAST CONST POOL
         BE    INTHAN11                 YES, GIVE ERROR MESSAGE
         L     RWP,ZDWP                                            1511
         BAL   R14,TXTTRAF              OUTPUT TXT-RECORD
         BAL   R14,CPOLEX               CONSTANT POOL EXCHANGE
         L     RLIT,ZKOPOOL             START ADDRESS OF CONSTANT POOL
         LA    RWP,4(0,RLIT)            UPDATE POINTERS
         LR    RDWP,RLIT
         A     RDWP,LREAL
         ST    RWP,ZWP
         ST    RDWP,ZDWP
         ST    RLIT,ZLITSTA
         ST    RBIN,0(0,RLIT)
         B     INTHAN1
         SPACE
INTHAN11 ST    R1,ZBEGERR               GIVE
         ST    R1,ZENDERR                    ERROR
         MVC   ZERRONU(2),MANYCON
         BAL   R15,MOVERRO              GO TO ERROR RTN
         OI    HCOMPMOD,X'80'           SET SYNTAX CHECK BIT
         B     INTHAN1
         EJECT
REALHAN  EQU   *
         C     ZOUR,ZFILE5              SPACE ENOUGH IN OUTPUT BUFFER
         BNH   *+8                      YES
         BAL   R15,OUCHA                NO, CHANGE BUFFER
         MVC   1(2,ZOUR),ZREALTYP       FIRST TWO BYTES OF INTERNAL NAM
         CLI   ZFORTEST,X'00'           IN FOR LIST
         BE    REALHAN1                 NO
         L     WORKR,ZFSPTR             ADDRESS FSTAB ENTRY
         OI    0(WORKR),NOCOUNT         CLASSIFY AS NO COUNTING LOOP
REALHAN1 EQU   *
         TM    HCOMPMOD,X'02'           WHICH PRESITION
         BO    REALH                    LONG
         STE   XFLOAT,ZSTO              START ROUNDING
         MVC   ROUND(1),ZSTO
         AD    XFLOAT,ROUND             ROUND
         STE   XFLOAT,ZSTO              SHORT, TREAT AS INTEGER
         L     RBIN,ZSTO
         B     INTHANR
         SPACE
REALH    EQU   *
         L     RLIT,ZLITSTA             INITILIZE LITERAL SEARCH
         TM    HCOMPMOD,SYNTAX          COMPILE MODE
         BO    REALH1                   YES
         LA    R6,8
         LR    R8,R6
         SR    RLIT,R6
         L     RWP,ZWP
         L     RDWP,ZDWP
         CR    RWP,RDWP
         BE    REALH2
         SR    RDWP,R6
         LA    REALL,REALH3
REALH3   BXH   RLIT,R8,REALH4           EXIT AT END OF SEARCH
         CD    XFLOAT,0(0,RLIT)         LITERAL FOUND
         BCR   7,REALL                  NO
         SPACE
REALH4   LA    REALL,REALH5
         SR    RLIT,R6
REALH5   BXH   RLIT,R6,REALH6           EXIT AT END OF SCAN
         CD    XFLOAT,0(0,RLIT)         CONSTANT FOUND
         BCR   7,REALL                  NO
         B     REALH1                   YES
         SPACE
REALH6   AR    RDWP,R6
         C     RDWP,ZKOPEND             END OF LITERAL POOL
         BNL   REALH10                  YES
REALH8   AR    RDWP,R6                  UPDATE ZDWP
         ST    RDWP,ZDWP
         STD   XFLOAT,0(0,RLIT)
         B     REALH1
         SPACE
REALH7   BAL   RET,TXTTRAF              OUTPUT TXT
REALH9   AR    R8,RDWP                  UPDATE ZWP
         ST    R8,ZWP
         B     REALH8
         SPACE
REALH2   LA    REALL,REALH21
         SR    RDWP,R6
REALH21  BXH   RLIT,R6,REALH22          EXIT AT END OF SCAN
         CD    XFLOAT,0(0,RLIT)         LITERAL FOUND
         BCR   7,REALL                  NO
         B     REALH1                   YES
         SPACE
REALH22  AR    RDWP,R6
         C     RDWP,ZKOPEND             END OF LITERAL POOL
         BNL   REALH10
         C     RDWP,ZTEXTCO             TXT TO BE PUT OUT
         BL    REALH9                   NO
         B     REALH7                   YES
         SPACE
REALH10  CLC   ZKBNMAX(2),TWOFIVFI      LAST CONSTANT POOL
         BE    REALH11                  YES
         L     RWP,ZDWP                                            1511
         BAL   RET,TXTTRAF              OUTPUT TXT
         BAL   RET,CPOLEX               CONSTANT POOL EXCHANGE
         L     RLIT,ZKOPOOL             START ADDRESS OF CONSTANT POOL
         LA    RDWP,8(0,RLIT)           UPDATE PTRS
         ST    RDWP,ZDWP
         ST    RDWP,ZWP
         ST    RLIT,ZLITSTA
         STD   XFLOAT,0(0,RLIT)         LITERAL ENTRY
         B     REALH1
         SPACE
REALH11  ST    ZINR,ZBEGERR             TOO MANY LITERALS, MESSAGE
         ST    ZINR,ZENDERR
         MVC   ZERRONU(2),MANYCON
         BAL   MOVERROX,MOVERRO
         OI    HCOMPMOD,X'80'           SYNTAX CHECK MODE
         B     REALH1
         EJECT
CPOLEX   EQU   *                   CONSTANT POOL EXCHANGE
         L     R15,ZKOPOOL              UPDATE
         ST    R15,ZLITSTA
         AH    R15,TXTPUT
         ST    R15,ZTEXTCO                     TXT-RECORD POINTER
         LH    R15,ZKBNMAX
         LA    R15,1(0,R15)
         STH   R15,ZKBNMAX                     CONSTANT POOL
         STH   R15,KBN                            NUMBER
         BR    R14                      RETURN
         SPACE
TXTTRAF  EQU   *                   TRANSFER TXT-RECORD
         STM   14,6,TXTSAV              SAVE REGISTERS
         L     INFORM,ZTEXTCO
         SH    INFORM,TXTPUT            ADDRESS OUTPUT TXT
         LR    WORKR,RWP                CALCULATE LENGTH OF TXT
         SR    WORKR,INFORM
         STH   WORKR,TXTLE
         LR    WORKR,RWP                GET NEW PUT ADDRESS
         AH    WORKR,TXTPUT
         ST    WORKR,ZTEXTCO
         L     PRPOINT,PRPT             LOAD PROGRAM PTR
         TM    HCOMPMOD+1,X'60'         NOLOAD AND NODECK
         BO    TXTLE2                   YES
         BAL   LENGTH,GENTXT            OUTPUT OF TEXT
TXTLE    DS    H                        INSERT LENGTH OF TEXT
TXTLE1   ST    PRPOINT,PRPT             STORE PROGRAM PTR
         LM    14,6,TXTSAV              RESTORE REGISTERS
         BR    R14                      RETURN
TXTLE2   AR    PRPOINT,WORKR            UPDATE PROGRAM PTR
         B     TXTLE1
         SPACE
REG0     EQU   0
OUTAREA  EQU   1
TYPER    EQU   3
RETURN   EQU   4
L        EQU   15
PRPOINT  EQU   6
INFORM   EQU   2
LENGTH   EQU   14
         SPACE
GENTXT   EQU   *                   GENERATE TXT-RECORDS
         LA    RETURN,2(0,LENGTH)       COMPUTE RETURN ADDRESS
         LH    LENGTH,0(0,LENGTH)       LOAD LENGTH GIVEN IN CALL
         LA    TYPER,TXTT               INDICATE TXT-CALL
         SPACE
         L     OUTAREA,SAVOUTA          LOAD ADDRESS OF OUT RECORD
         CLC   RTYP(3,OUTAREA),RTYP(TYPER)     RECORD RIGTH TYPE
         BNE   GEN3                     NO,CALL IOR NEW
         CLC   INFL(2,OUTAREA),RMAX(TYPER)     RECORD FILLED
         BNL   GEN3                     YES,CALL FOR NEW
         SPACE
GEN6     LA    L,56
         LH    REG0,INFL(0,OUTAREA)     REG0=LENGTH OF INFORM IN REC
         SR    L,REG0                   L=EMPTY POS LEFT IN RECORD
         CR    L,LENGTH                 ENOUTH SPACE LEFT
         BL    *+6                      NO
         LR    L,LENGTH                 YES L=LENGTH FROM CALL
         AR    L,REG0
         STH   L,INFL(0,OUTAREA)        INSERT NEW LENGTH INTO RECORD
         SR    L,REG0
         AR    OUTAREA,REG0             START ADDRESS WITHIN RECORD
         SR    LENGTH,L                 REMAINING LENGTH
         B     GEN8                     GO TO MOVE TEXT
         SPACE
GEN4     LTR   LENGTH,LENGTH            MORE INFORMATION MUST BE MOVED
         BCR   8,RETURN                 NO, RETURN TO CALLING ROUTINE
         SPACE
GEN3     EQU   *                   CALL FOR NEW OUTPUT RECORD
         ST    LENGTH,SAVELT            SAVE LENGTH
         TM    HCOMPMOD+1,X'60'    Q. BOTH DECK AND LOAD SPECIFIED
         BZ    BOTH                     YES
         TM    HCOMPMOD+1,NDCK         Q. ONLY DECK
         L     OUTAREA,PCHADD           IF ONLY DECK
         BZ    PUT1                     YES
         L     OUTAREA,LINADD           ONLY SYSLIN
PUT1     PUT   (OUTAREA)                PUT FOR SYSLIN AND SYSPUNCH IF
         ST    OUTAREA,SAVOUTA          ONLY SYSPUNCH SPECIFIED
         L     LENGTH,SAVELT           RESTORE LENGTH
         B     PUNCHOUT
SAVELT   DS    F                       SAVE AREA FOR LENGTH
BOTH     L     LENGTH,OUTAREA2         COPY SYSLIN BUFFER TO SYSPUNCH
         L     OUTAREA,SAVOUTA
         MVC   0(80,LENGTH),0(OUTAREA)  BUFFER
         L     OUTAREA,PCHADD
         PUT   (OUTAREA)                PUT FOR SYSPUNCH WHEN BOTH HAS
         ST    OUTAREA,OUTAREA2         BEEN SPECIFIED
         B     PUT1-4                   GO TO PUT SYSLIN
         SPACE
PUNCHOUT EQU   *
         MVC   0(4,OUTAREA),RSTART(TYPER)     INSERT FIRST 4 BYTES
         MVI   4(OUTAREA),C' '          INSERT ONE BLANK
         MVC   5(67,OUTAREA),4(OUTAREA)      BLANK OUTPUT RECORD
         MVC   72(4,OUTAREA),PIDENT     INSERT PROGRAM IDENT
         L     L,SEQU                   STEP SEQUENCE NUMBER
         LA    L,1(0,L)
         ST    L,SEQU
         CVD   L,ZPACK                  CONVERT TO DECIMAL
         UNPK  76(4,OUTAREA),ZPACK+5(3)
         MVZ   79(1,OUTAREA),76(OUTAREA)
         MVC   10(2,OUTAREA),RLEN(TYPER)     INSERT INITIAL LENGTH
         MVC   14(6,OUTAREA),RESID(TYPER)     INSERT ESID+R AND P
         ST    PRPOINT,4(0,OUTAREA)
         MVI   4(OUTAREA),C' '
         B     GEN6
         SPACE
* TABLE AND MOVE ROUTINE
         SPACE
TXTT     DS    0H                  START OF TXT-RECORD  TABLE
         DC    X'02'                    CARD CODE
         DC    C'TXT'                   IDENTIFICATION
         DC    H'0'                     INITIAL LENGTH 0
         DC    H'1'                     ESID
         DC    C'    '
         DC    H'56'                    MAXIMUM LENGTH
         SPACE
GEN8     EQU   *                   MOVE TXT-INFORMATION TO OUTAREA
         BCTR  L,0                      L=L-1
         STC   L,*+5                    INSERT PROPER LENGTH TO MOVE
         MVC   16(0,OUTAREA),0(INFORM)      MOVE INFORM TO OUTAREA
         LA    PRPOINT,1(L,PRPOINT)     INCREASE PROGRAM POINTER
         LA    INFORM,1(L,INFORM)       MODIFY DATA ADDRESS
         B     GEN4                     OUT OF MOVE TXT ROUTINE
* ADDRESS DISPLACEMENTS FOR GENTXT
         SPACE
RSTART   EQU   0                        START OF RECORD TYPE TABLE
RTYP     EQU   1                        RECORD IDENTIFICATION
RLEN     EQU   4                        INITIAL LENGTH 0 OR 4
RESID    EQU   6                        ESID OR BLANKS
RMAX     EQU   12                       MAXIMUM NUMBER OF BYTES IN REC
INFL     EQU   10                       LENGTH OF INFORM IN A RECORD
         SPACE
* AREAS AND CONSTANTS LOCAL FOR GENTXT
         SPACE
TXTSAV   DS    9F                       REGISTER SAVE AREA
         SPACE
         EJECT
INTERUPT CLI   7(R1),X'0C'              FLOATING POINT OVERFLOW
         BE    REALERR                  YES
         L     WORKR,OLDSPIE            NO, USE DIRECTORY ROUTINE
         L     R15,0(0,WORKR)           ADDRESS ERROR ROUTINE OF DIREC.
         BR    R15                      ENTER ERROR ROUTINE
         EJECT
WORKAREA DSECT
         COPY  WORKAREA
ZFOSTA   EQU   FSTAB
         ORG   DCBUT1
FSNMAX   DS    H
LVCOUNT  DS    H
SUCOUNT  DS    H
ZLEVEN   DS    F
ZSUTEN   DS    F
         END   START
