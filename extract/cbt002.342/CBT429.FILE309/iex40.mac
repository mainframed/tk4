 TITLE 'IEX40, SUBSCRIPT HANDLING AND INITIALIZATION OF COMPILATION PHAX
               SE'
*                                                                     *
*STATUS: CHANGE LEVEL 000.                                            *
*                                                                     *
*FUNCTION/OPERATION: CSECT IEX40000 BUILDS THE OPTIMIZATION TABLE     *
*   (OPTAB) USING THE SUBSCRIPT TABLE, THE LEFT VARIABLE TABLE AND    *
*   THE FOR STATEMENT TABLE. AN OPTAB ENTRY "ORRESPOND TO AN OPTIMI-  *
*   ZABLE SUBSCRIPT EXPRESSION INSIDE A FORSTATEMENT. IF NO OPTAB IS  *
*   PRODUCED THIS IS INDICATED IN THE COMPILER STATUS BYTES           *
*   (HCOMPMOD).                                                       *
*   CSECT IEX40001 IS THE INITIALIZATION OF NEXT MODULE, IEX50, AND   *
*   PERFORMS THE FOLLOWING FUNCTIONS: CALCULATION AND RESERVATION OF  *
*   CORE STORAGE AREAS NEEDED, LOADING REGISTERS WITH START ADDRESSES,*
*   READING THE FIRST RECORDS OF SOURCE PROGRAM AND OPTAB, AND SETTING*
*   INITIAL VALUES IN THE PRIVATE PART OF COMMON WORKAREA.            *
*                                                                     *
*ENTRY POINT:                                                         *
*        IEX40000.                                                    *
*                                                                     *
*INPUT: CSECT IEX40000 READS TWO TABLES CONSTRUCTED IN IEX30 FROM     *
*   SYSUT3. THE SUBSCRIPT TABLE (SUTAB) CONTAINS ENTRIES FOR LINEAR   *
*   SUBSCRIPT EXPRESSIONS IN FOR STATEMENTS THAT ARE OPTIMIZABLE IN   *
*   REGARD TO SUBSCRIPTS.                                             *
*   THE LEFT VARIABLE TABLE (LVTAB) CONTAINS ENTRIES FOR INTEGER LEFT *
*   VARIABLES IN FOR STATEMENTS THAT ARE OPTIMIZABLE IN REGARD TO     *
*   SUBSCRIPTS.                                                       *
*   CSECT IEX40001 READS THE FIRST TWO RECORDS OF THE SOURCE PROGRAM  *
*   FROM SYSUT2 INTO TWO SOURCE BUFFERS.                              *
*   THE FIRST TWO RECORDS OF OPTAB ARE READ IN FROM SYSUT3 TO TWO     *
*   OPTAB BUFFERS.                                                    *
*                                                                     *
*OUTPUT: THE OPTIMIZATION TABLE (UPTAB)IS WRITTEN OUT ON SYSUT3. OPTAB*
*   CONTAINS ONE ENTRY FOR EVERY OPTIMIZABLE SUBSCRIPT EXPRESSION IN  *
*   A FOR STATEMENT                                                   *
*                                                                     *
*EXTERNAL ROUTINES: THE INTERRUPT ROUTINES OF IEX00 ARE USED.         *
*                                                                     *
*EXIT-NORMAL: CONTROL IS GIVEN TO THE NEXT LOAD MODULE BY MEANS OF    *
*        XCTL  EP=IEX50.                                              *
*                                                                     *
*EXITS-ERROR: INPUT/OUTPUT ERRORS AND PROGRAM INTERRUPTS ARE HANDLED  *
*   BY A DIRECTORY ROUTINE WHICH RETURNS CONTROL TO THE INTERRUPTED   *
*   MODULE. IF THE ERROR OCCURED BEFORE THE GETMAIN IN IEX40001       *
*   CONTROL IS GIVEN TO THE \ERMINATING MODULE BY MEANS OF            *
*        XCTL  EP=IEX51ER2.                                           *
*   IF THE ERROR OCCURED AFTER THE GETMAIN CONTROL IS GIVEN TO THE    *
*   TERMINATING MODULE BY MEANS OF                                    *
*        XCTL  EP=IEX51ER1.                                           *
*                                                                     *
*TABLES/WORKAREAS: THE FOR STATEMENT TABLE (FSTAB) CONSTRUCTED IN     *
*   IEX30 AND POSSIBLY REVISED BY IEX40000 CONTAINS CLASSIFICATIONS   *
*   OF THE FOR STATEMENTS.                                            *
*                                                                     *
*ATTRIBUTES: NONE.                                                    *
*                                                                     *
*NOTES: THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON ANY SPECIAL *
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET.                     *
*   THIS MODULE IS ONLY INTENDED TO BE EXECUTED IN CONNECTION         *
*   WITH THE OTHER MODULES OF THE ALGOL COMPILER. IN PARTICULAR IT    *
*   REQUIRES THE COMMON WORKAREA.                                     *
*                                                                     *
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
WORKR    EQU   R2
WORKX    EQU   R3
         SPACE
*              BIT PATTERNS
FIRSTM   EQU   X'20'                    FIRST ENTRY IN SUTAB CHAIN
SUCM     EQU   X'10'                    SUCCEDING ENTRY IN SUTAB CHAIN
LASTM    EQU   X'30'                    LAST ENTRY IN SUTAB CHAIN
OFFM     EQU   X'CF'                    TURN OFF SUTAB CHAIN BITS
SUOP     EQU   X'40'                    SUBSCRIPT OPTIMIZATION BIT
NOOP     EQU   X'20'                    NO SUBSCRIPT OPTIMIZATION
SYNTAX   EQU   X'80'                    SYNTAX CHEXK MASK
         EJECT
IEX40000 CSECT
* RELEASE 19 CHANGES                                             A27002
* 020800,056000,068800                                           A27002
START    BALR  R12,0
         USING *,R12
         USING WORKAREA,R13
         TM    HCOMPMOD,SYNTAX          SYNTAX CHECK MODE
         BO    NOSUTAB                  YES
         SPACE
*              INITILIZE SUTAB
         SPACE
         SPACE
         CLC   ZSUTEN(4),ZERO           SUTAB EMPTY
         BE    NOSUTAB                  YES
*                                                                A27002
*              ANY NESTED FOR LOOPS                              A27002
*                                                                A27002
         SR    WORKR,WORKR                                       A27002
         ST    WORKR,FOR1                                        A27002
         MVC   FOR1+4(255),FOR1+3      SET FOR STMNT COUNT       A27002
         MVC   FOR2+2(255),FOR2+1       AREAS TO ZERO            A27002
         LH    R0,FSNMAX                                         A27002
         AH    R0,FOR5                  NO OF FOR STMNT          A27002
         LA    R1,GPTAB                                          A27002
GP1      LA    R1,3(0,R1)               PTR TO NEXT GPTAB RECORD A27002
         CLC   ZERO(1),2(R1)            FOR STATEMENT?           A27002
         BE    GP1                      NO                       A27002
         SH    R0,FOR5                 ALL FOR STMNT CHECKED?    A27002
         BM    GP10                    YES                       A27002
         MVC   FOR4(3),0(R1)           MOVE GPTAB RECORD         A27002
         LH    WORKX,FOR4              MULTIPLY GPTAB PTR BY 3   A27002
         AR    WORKX,WORKX              GIVES CORRECT ADDRESS    A27002
         AH    WORKX,FOR4                IN GPTAB                A27002
         LA    WORKX,GPTAB(WORKX)                                A27002
         CLC   ZERO(1),2(WORKX)        Q. NESTED                 A27002
         BE    GP1                      NO                       A27002
         IC    WORKR,FOR4+2            FOR STMNT NO+1            A27002
         LA    R4,FOR2-1(WORKR)                                  A27002
         MVC   0(1,R4),2(WORKX)         STORE ENCLOSING FSN      A27002
         B     GP1                                               A27002
         SPACE 1
GP10     LA    WORKR,TERMIN2           TERMINATION ADDRESS       A27002
         ST    WORKR,ERET
         L     R0,SUTAB40S              RESERVE TABLE AREA
         A     R0,OPTABS
         AR    R0,R0
         AH    R0,EIGHT
         ST    R0,TABSIZE               SAVE LENGTH OF TABLE AREA
         GETMAIN R,LV=(0)               ALLOCATE STORAGE TO SUTAB
         LA    WORKR,TERM1              ERROR RETURN ADDRESS
         ST    WORKR,ERET
         ST    R1,TSTART                SUTAB START ADDRESS
         SPACE
*                                  READ SUTAB
         SPACE
         LH    RCOUNT,SUCOUNT           NUMBER OF SUTAB RECORDS - 1
         L     RTYPE,SUTYPE             SUTAB RECORD IDENTIFICATION
         L     RLE,SUTAB30S             LENGTH OF WRITTEN SUTAB RECORDS
         L     RSTART,TSTART            TABLE START ADDRESS
         BAL   READX,READ               READ FULL SUTAB
         EJECT
RSUDEN   EQU   R11                      END ADDRESS OF UNSORTED SUTAB
RFSN     EQU   R10                      FOR STATEMENT NUMBER
RSEARCH  EQU   R9                       CURRENT PTR IN UNSORTED SUTAB
RS       EQU   R8                       PTR FOR CHAINING CHECK
RFALL    EQU   R7                       FULL LENGTH OF DELETED ENTRIES
         SPACE
*              SCAN SUTAB FOR ENTRY CHAINING AND ENTRY DELETION
         SPACE
         L     RSEARCH,TSTART           TABLE START ADDRESS WITH KEY
         LA    RSEARCH,4(0,RSEARCH)     DELETE KEY
         LR    RSUDEN,RSEARCH           CLACULATE END.ADDRESS
         A     RSUDEN,ZSUTEN
         SR    RFSN,RFSN
         SR    RFALL,RFALL
         SPACE
SUTABS   IC    RFSN,0(0,RSEARCH)        ISOLATE ACTUELL FOR STATEM.NUMB
         LA    WORKR,FSTAB(RFSN)        ADDRESS ACRUELL FOR ENTRY
         TM    0(WORKR),SUOP            SUBSCRIPT OPTIMIZATION POSSIBLE
         BZ    SUTABS2                  YES
         LA    RFALL,14(0,RFALL)        LENGTH OF DELETED ENTRIES
         MVI   0(RSEARCH),X'FF'         NOT OPTIMIZABLE ENTRY
         LA    RSEARCH,14(0,RSEARCH)    GET NEXT ENTRY
         CR    RSEARCH,RSUDEN           SUTAB END
         BE    SORTSU                   YES
         B     SUTABS
         SPACE
SUTABS2  LR    RS,RSEARCH               CHECK ENTRY CHAINING
SUTABS3  EQU   *
         LA    RS,14(0,RS)              SCAN SUTAB FOWORD FOR CHAINING
         CR    RS,RSUDEN                SUTAB END
         BE    SORTSU                   YES
         CLC   10(4,RSEARCH),10(RS)     CHAIN
         BE    SUTABS4                  YES
         LR    RSEARCH,RS               PROCESS NEW ENTRY AS FIRST
         B     SUTABS
         SPACE
SUTABS4  IC    RFSN,0(0,RS)             ISOLATE FSN OF NEW ENTRY
         LA    WORKR,FSTAB(RFSN)        ADDRESS FSTAB ENTRY
         TM    0(WORKR),SUOP            SUBSCRIPT OPTIMIZABLE
         BZ    SUTABS5                  YES
         MVI   0(RS),X'FF'              NO, DELETE ENTRY
         LA    RFALL,14(0,RFALL)        COUNT LENGTH OF DELETED ENTRIES
         B     SUTABS3                  CHECK NEXT ENTRY
         SPACE
SUTABS5  OI    10(RSEARCH),FIRSTM       INDICATE FIRST ENTRY IN CHAIN
SUTABS6  LR    RSEARCH,RS               ADDRESS CURRENT LAST CHAIN ENTR
SUTABS7  EQU   *
         LA    RS,14(0,RS)              CHECK NEXT SUTAB ENTRY
         CR    RS,RSUDEN                SUTAB END
         BE    SUTABS9                  YES
         CLC   10(4,RSEARCH),10(RS)     ANOTHER CHAINED ENTRY
         BE    SUTABS8                  YES
         OI    10(RSEARCH),LASTM        INDICATE ENTRY IN CHAEN
         LR    RSEARCH,RS               PROCESS NEW ENTRY AS FIRST
         B     SUTABS
         SPACE
SUTABS8  IC    RFSN,0(0,RS)             NEW FOR STATEMENT NUMBER
         LA    WORKR,FSTAB(RFSN)        ADDRESS FSTAB ENTRY
         TM    0(WORKR),SUOP            SUBSCRIPT OPTIMIZATION POSSIBLE
         BZ    SUTABS10                 YES, CHAIN
         SPACE
         MVI   0(RS),X'FF'              DELETE ENTRY
         LA    RFALL,14(0,RFALL)        CALCULATE DELETED LENGTH
         B     SUTABS7
         SPACE
SUTABS9  OI    10(RSEARCH),LASTM        INDICATE LAST ENTRY IN CHAIN
         B     SORTSU
         SPACE
SUTABS10 OI    10(RSEARCH),SUCM         INDICATE BETWEEN ENTRY
         B     SUTABS6
         SPACE
SORTSU   EQU   *
         L     WORKX,TSTART
         LA    WORKR,4(0,WORKX)         START ADDRESS OF UNSORTED SUTAB
         ST    WORKR,ZSTAD              START OF UNSORTED TABLE
         L     REND,ZSUTEN              GET END OF UNSORTED SUTAB
         AR    REND,WORKR
         A     WORKX,TABSIZE            END ADDRESS OF SORTED SUTAB
         ST    WORKX,ZSUDEN
         S     WORKX,ZSUTEN
         AR    WORKX,RFALL              START OF SORTED SUTAB
         C     WORKX,ZSUDEN             WHOLE SUTAB DELETED
         BE    NOSUTAB1                 YES
         ST    WORKX,ZSUDAD
         ST    WORKX,ZSORTSTA
         LA    RENTRY,14                ENTRY LENGTH
         BAL   SORTX,SORT               SORT SUTAB
         SPACE
*                                  INITILIZE OPTAB BUFFERS
         L     WORKR,TSTART
         ST    WORKR,ZOTAWRI            SECOND OPTAB BUFFER
         A     WORKR,OPTABS
         ST    WORKR,ZOTAFILL           FIRST OPTAB BUFFER
         A     WORKR,OPTABS
         ST    WORKR,ZOTMAX             ACTUELL BUFFER END
         SPACE
         CLC   ZLEVEN(4),ZERO           LVTAB EMPTY
         BNE   SORTLE                   NO
         MVC   ZLESTA(4),ZOTMAX         SET DUMMY START ADDRESS
         B     SORTLE1
         SPACE
SORTLE   EQU   *
         LH    RCOUNT,LVCOUNT           NUMBER OF LVTAB RECORDS -7
         L     RTYPE,LVTYPE             LVTAB-RECORD IDENTIFICATION
         L     RLE,LVTAB30S             LENGTH OF LVTAB RECORD
         L     RSTART,TSTART            START ADDRESS OF TABLE AREA
         BAL   READX,READ               READ LVTAB INTO CORE
         SPACE
         L     WORKR,TSTART
         LA    WORKR,4(0,WORKR)
         ST    WORKR,ZSTAD              START ADDRESS OF UNSORTED TABLE
         A     WORKR,ZLEVEN
         LR    REND,WORKR               END OF UNSORTED TABLE
         C     WORKR,ZOTMAX             LVTAB LONGER THAN OPTAB BUFFER
         BH    *+8                      YES
         L     WORKR,ZOTMAX             NO,START SORTED TAB AFTER OPTAB
         ST    WORKR,ZSORTSTA           START ADDRESS OF SORTED TABLE
         ST    WORKR,ZLESTA
         LA    RENTRY,4                 ENTRY LENGTH
         BAL   SORTX,SORT               SORT LVTAB
         SPACE
SORTLE1  L     WORKR,ZLESTA
         A     WORKR,ZLEVEN
         MVI   0(WORKR),X'FF'           SET LVTAB END
         SPACE
         L     WORKR,UT3ADD
         CLOSE ((WORKR),REREAD),TYPE=T  POINT TO BEGINNING OF DATA SET
         SPACE
RLV      EQU   R4                       PTR TO START OF LVTAB GROUP
RL       EQU   R5                       CURRENT PTR IN LVTAB GROUP
RSUPO    EQU   R6                       CURRENT SUTAB PTR
RSU      EQU   R7                       SUTAB CHAIN SEARCHING PTR
ROTPO    EQU   R8                       CURRENT OPTAB BUFFER PTR
OTACHAX  EQU   R9
OPTAB    EQU   *
         L     RLV,ZLESTA               START OF LVTAB
         L     RSUPO,ZSUDAD             START OF SUTAB
         L     ROTPO,ZOTAFILL           START OF FIRST OPT AB BUFFER
         SPACE
OPT1     EQU   *
*              DOES LVTAB-GROUP CORRESPOND TO THIS SUTAB ENTRY
         CLC   0(1,RSUPO),0(RLV)
         BL    OPT3                     NO LVTAB-ENTRIES TO THIS FOR-ST
         LR    RL,RLV                   INITILIZE CURRENT GROUP PTR
         BH    OPT6                     SCAN FOR NEXT LVTAB GROUP
OPT2     CLC   1(3,RL),4(RSUPO)         CHECK FACTOR
         BE    OPT71                    NO OPTIMIZATION
         CLC   1(3,RL),7(RSUPO)         CHECK ADDEND
         BE    OPT7                     NO OPTIMIZATION
         LA    RL,4(0,RL)               ADDRESS NEXT LVTAB ENTRY
         CLC   0(1,RL),0(RLV)           NEW ENTRY OF SAME GROUP
         BE    OPT2                     YES, PROCEED CHECK
         SPACE
OPT3     C     ROTPO,ZOTMAX             END OF OPTAB BUFFER
         BNL   OPT10                    YES
OPT4     MVC   0(14,ROTPO),0(RSUPO)     MOVE SUTAB ENTRY TO OPTAB
         SR    R2,R2                                             A27002
         IC    R2,0(0,ROTPO)           FOR STATEMENT NO          A27002
         SR    R0,R0                                             A27002
OPT42    IC    R0,FOR1(R2)             FOR STATEMENT COUNT       A27002
         AH    R0,FOR5                 INCREASE FS COUNT         A27002
         CL    R0,FOR3                 >85 ENTRIES IN OPTAB      A27002
         BL    OPT44                   NO                        A27002
         LA    R1,FSTAB(R2)                                      A27002
         OI    0(R1),X'80'             SET ELEMENTARY LOOP       A27002
OPT44    STC   R0,FOR1(R2)             RESTORE FSN COUNT         A27002
         IC    R2,FOR2(R2)                                       A27002
         CL    R2,ZERO                 ANY ENCLOSING FOR STMT    A27002
         BE    OPT46                    NO                       A27002
         SH    R2,FOR5                 GIVES CORRECT FSN         A27002
         B     OPT42                    ADD UP ENCLOSING LOOP    A27002
OPT46    LA    ROTPO,14(0,ROTPO)       UPDATE OPTAB PTR          A27002
OPT5     LA    RSUPO,14(0,RSUPO)        GET NEXT SUTAB ENTRY
         C     RSUPO,ZSUDEN             SUTAB END
         BE    TERMIN                   YES
         TM    10(RSUPO),SUCM           ACTIVE ENTRY
         BZ    OPT1                     YES
         B     OPT5                     NO, GET NEXT ENTRY
         SPACE
OPT6     EQU   *                   SCAN FOR NEXT LVTAB GROUP
         LA    RL,4(0,RL)               GET NEXT LVTAB ENTRY
         CLC   0(1,RL),0(RLV)           SAME GROUP
         BE    OPT6                     YES
         LR    RLV,RL                   NO, SET LVTAB GROUP PTR
         B     OPT1
         SPACE
OPT7     EQU   *
         CLC   4(3,RSUPO),ZERO          FACTOR ZERO
         BE    OPT72                    YES
OPT71    SR    WORKR,WORKR              ADDRESS FSTAB ENTRY
         IC    WORKR,0(0,RSUPO)
         LA    WORKR,FSTAB(WORKR)
         OI    0(WORKR),X'80'           SET ELEMENTARY LOOP
         SPACE
OPT72    EQU   *                   HANDLE SUTAB CHAINING
         TM    10(RSUPO),FIRSTM         ANY CHAINING
         BZ    OPT5
         LR    RSU,RSUPO                INITILIZE CHAIN SZARCH
OPT8     LA    RSU,14(0,RSU)            NEXT SUTAB ENTRY
         CLC   11(3,RSU),11(RSUPO)      ENTRY IN CHAIN
         BNE   OPT8                     NO
         MVN   SUPOS(1),10(RSU)         SUBSCRIPT NUMBER
         MVN   *+7(1),10(RSUPO)         SUBSCRIPT NUMBER
         CLI   SUPOS,X'00'              SUBSCRIPT NUMBER EQUAL
         BNE   OPT8                     NO
         SPACE
         TM    10(RSU),LASTM            LAST ENTRY IN CHAIN
         BO    OPT9                     YES
         NI    10(RSU),OFFM             TURN OFF CHAIN BITS
         OI    10(RSU),FIRSTM           SET FIRST ENTRY BIT
         B     OPT5
         SPACE
OPT9     NI    10(RSU),OFFM             TURN OFF CHAIN BITS
         B     OPT5
         SPACE
OPT10    BAL   OTACHAX,OTACHA           CHANGE OPTAB BUFFER
         B     OPT4
         SPACE
TERMIN   EQU   *
         C     ROTPO,ZOTAFILL           ANY OPTAB
         BNE   *+12                     YES
         OI    HCOMPMOD+2,NOOP          NO OPTAB PRESENT
         B     TERM1
         SPACE
         C     ROTPO,ZOTMAX             END OF OPTAB BUFFER
         BNE   TERMIN1                  NO
         BAL   OTACHAX,OTACHA           CHANGE OUTPUT BUFFER
TERMIN1  MVI   0(ROTPO),X'FF'           INDICATE END OF SUTAB
         BAL   OTACHAX,OTACHA           WRITE LAST OPTAB RECORD
         CHECK OWRITE                   CHECK LAST OPTAB RECORD
         SPACE
         L     R0,UT3ADD                DCB ADDRESS
         CLOSE ((R0),REREAD),TYPE=T     POINT TO BEGINNING OF DATASET
         SPACE
         SPACE 1
TERM1    LH    R4,FSNMAX                                         A27002
         SR    R3,R3                                             A27002
         SR    R1,R1                                             A27002
TERM12   LA    R1,1(0,R1)                                        A27002
         CLR   R1,R4                   ALL FOR STMNT CHECKED     A27002
         BH    TERM15                  YES                       A27002
         LA    R2,FOR2(R1)                                       A27002
         CLC   ZERO(1),0(R2)           ANY ENCLOSING LOOP?       A27002
         BE    TERM12                  NO                        A27002
         IC    R3,0(R2)                GET NO OF OPTAB ENTRIES   A27002
         SR    R2,R2                                             A27002
         IC    R2,FOR1-1(R3)            IN ENCLOSING LOOP        A27002
         CL    R2,FOR3                 MORE THAN 85              A27002
         BL    TERM12                  NO                        A27002
         LA    R2,255                  MARK FOR SUCCEDING FS     A27002
         STC   R2,FOR1(R1)              THAT THIS FS IS ELEMEN.  A27002
         LA    R2,FSTAB(R1)                                      A27002
         OI    0(R2),X'80'             SET ELEMENTARY LOOP       A27002
         B     TERM12                                            A27002
         SPACE 1
TERM15   L     R0,TABSIZE              LENGTH OF TABLE AREA      A27002
         L     R0,TABSIZE               LENGTH OF TABLE AREA
         L     R1,TSTART
         FREEMAIN R,LV=(0),A=(1)
         SPACE
TERMIN2  EQU   *
         TM    HCOMPMOD,ERR             ERROR CONDITION
         BO    TERMERR                  YES
         L     R12,VSEC1                ADDRESS OF NEXT CSECT
         BR    R12
         SPACE
TERMERR  EQU   *
         XCTL  EP=IEX51ER2
         SPACE
NOSUTAB  EQU   *
         OI    HCOMPMOD+2,NOOP          NO SUBSCRIPT OPTIMIZATION BIT
         B     TERMIN2
         SPACE
NOSUTAB1 EQU   *
         OI    HCOMPMOD+2,NOOP          NO OPTAB BIT
         B     TERM1
         EJECT
OTACHA   EQU   *
         B     OTACHA2                  FIRST TIME SWITCH
         CHECK OWRITE
OTACHA1  EQU   *
         L     R0,UT3ADD                DCB ADDRESS
         L     WORKR,ZOTAFILL           ADDRESS OF BUFFER TO WRITE
         L     WORKX,OPTABS             SIZE OF OPTAB BUFFER
         WRITE OWRITE,SF,(R0),(WORKR),(WORKX)
         L     ROTPO,ZOTAWRI            CHANGE OPTAB BUFFERS
         MVC   ZOTAWRI(4),ZOTAFILL
         ST    ROTPO,ZOTAFILL
         LR    WORKR,ROTPO
         A     WORKR,OPTABS             BUFFER END ADDRESS
         ST    WORKR,ZOTMAX
         BR    OTACHAX
OTACHA2  MVI   OTACHA+1,X'00'           SET OFF FIRST TIME SWITCH
         B     OTACHA1
         SPACE 3
RSTART   EQU   R11                      START  ADDRESS OF INPUT AREA
RCOUNT   EQU   R10                      RECORD COUNT
RTYPE    EQU   R9                       RECORD IDENTIFICATION
RLE      EQU   R8                       RECORD LENGTH
READX    EQU   R7                       RETURN REGISTER
READ     EQU   *
         L     R1,UT3ADD                DCB ADDRESS
         MVI   SULTSTRT+3,X'01'         ADDRESS FIRST INPUT RECORD
         POINT (1),SULTSTRT
         SPACE
READ1    L     WORKR,UT3ADD             DCB ADDRESS
         READ  READR,SF,(WORKR),(RSTART),'S'
         CHECK READR
         C     RTYPE,0(0,RSTART)
         BNE   READ1
         SPACE
         MVC   0(4,RSTART),SAVETAB      RESTORE OVERLAYED PART
         BCT   RCOUNT,READ2             MORE RECORDS TO READ
         BR    READX                    NO
         SPACE
READ2    AR    RSTART,RLE               UPDATE CURRENT PT2
         MVC   SAVETAB(4),0(RSTART)
         B     READ1
         SPACE 3
RENTRY   EQU   R11                      LENGTH OF TABLE ENTRY
RPO      EQU   R10                      CURRENT PTR IN UNSORTED TABLE
REND     EQU   R9                       END OF UNSORTED TABLE
SORTX    EQU   R15                      RETURN REGISTER
         SPACE
REL      EQU   RPO                      RELATIVE ADDRESS IN SORTED TAB.
RPAD     EQU   R8                       PTR TO ACTUEL ADDRESS TAB ENTRY
RGO      EQU   R7                       PTR TO ACTUEL COUNT TAB ENTRY
RE       EQU   WORKX                    ADDRESS OF LAST COUNT TAB ENTRY
         SPACE
RTO      EQU   RPAD                     START ADDRESS OF SORTED TABLE
         SPACE 3
SORT     EQU   *
         MVC   ZCOSTA(1),ZERO           ZEROIZE TABLES
         MVC   ZCOSTA+1(254),ZCOSTA
         MVC   ZCOSTA+255(255),ZCOSTA
         MVC   ZADSTA(255),ZCOSTA
         MVC   ZADSTA+255(255),ZCOSTA
         L     RPO,ZSTAD                CURRENT PTR
         SPACE
SORT1    CLI   0(RPO),X'FF'             DELETED ENTRY
         BE    SORT2                    YES
         SR    WORKR,WORKR              ISOLATE ACTUELL FSN
         IC    WORKR,0(0,RPO)
         AR    WORKR,WORKR              FSN * 2
         LH    WORKX,ZCOSTA(WORKR)      GET OLD COUNTER
         LA    WORKX,1(0,WORKX)         INCREASE BY ONE
         STH   WORKX,ZCOSTA(WORKR)      STORE NEW COUNTER
         SPACE
SORT2    AR    RPO,RENTRY               ADDRESS NEXT ENTRY
         CR    RPO,REND                 END OF TABLE
         BL    SORT1                    NO
         SPACE
*              BUILD ADDRESS TABLE
         LH    WORKR,FSNMAX             GET ADDRESS OF LAST COUNT ENTRY
         AR    WORKR,WORKR
         LA    RE,ZCOSTA(WORKR)         LAST ENTRY
         SPACE
         SR    REL,REL                  RELATIVE ADDRESS IN NEW TABLE
         LA    RGO,ZCOSTA               CURRENT COUNT TABLE PTR
         LA    RPAD,ZADSTA+2            CURRENT ADDRESS TABLE PTR
SORT3    EQU   *
         CR    RGO,RE                   LAST ENTRY
         BH    SORT4                    YES
         LH    R1,0(0,RGO)              NUMBER OF ENTRIES
         MR    R0,RENTRY                COMPUTE TABLE LENGTH
         AR    REL,R1                   RELATIVE TABLE ADDRESS
         STH   REL,0(0,RPAD)            MAKE ENTRY IN ADDRESS TABLE
         LA    RGO,2(0,RGO)             ADDRESS NEXT ENTRY
         LA    RPAD,2(0,RPAD)           ADDRESS NEXT ENTRY
         B     SORT3
         SPACE
*              BUILD SORTED TABLE
SORT4    EQU   *
         L     RPO,ZSTAD                START OF UNSORTED TABLE
         L     RTO,ZSORTSTA             START OF SORTED TABLE
         LR    WORKR,RENTRY             INITLIZE MOVE OF ENTRY
         BCTR  WORKR,0
         STC   WORKR,SORTM+1
         SPACE
SORT5    CLI   0(RPO),X'FF'             DELETED ENTRY
         BE    SORT6                    YES
         SR    WORKR,WORKR              ISOLATE FSN
         IC    WORKR,0(0,RPO)
         AR    WORKR,WORKR              FSN * 2
         LH    WORKX,ZADSTA(WORKR)      GET RELATIVE ADDRESS
         LR    R0,WORKX                 UPDATE RELATIVE ADDRESS
         AR    R0,RENTRY
         STH   R0,ZADSTA(WORKR)
         AR    WORKX,RTO                GET ADDRESS IN SORTED TABLE
SORTM    MVC   0(0,WORKX),0(RPO)        MOVE ENTRY
SORT6    EQU   *
         AR    RPO,RENTRY               GET NEXT ENTRY
         CR    RPO,REND                 END OF TABLE
         BNE   SORT5                    NO
         BR    SORTX
         EJECT
VSEC1    DC    V(IEX40001)              ADDRESS OF IEX40001
SUTYPE   DC    C'SUTB'                  SUTAB IDENTIFICATION
LVTYPE   DC    C'LVTB'                  LVTAB IDENTIFICATION
ZERO     DC    F'0'
EIGHT    DC    H'8'
SUPOS    DC    X'00'
         DS    0F                                                A27002
FOR1     DS    CL256                   FOR STMNT COUNT AREA      A27002
FOR2     DS    CL256                    ENCLOSING FS MARK AREA   A27002
FOR3     DC    F'86'                    MAX ENTRIES IN OPTAB     A27002
FOR4     DS    3H                      WORK AREA FOR GPTAB REC   A27002
FOR5     DC    H'1'                                              A27002
         EJECT
         TITLE 'IEX40001, INITIALIZATION OF COMPILATION PHASE'
IEX40001 CSECT
         SPACE 2
* REGISTER DEFINITIONS
         SPACE
RESAR    EQU   1
RLTOTAR  EQU   2
WRK1     EQU   2
RLIBUF1  EQU   3
WRK2     EQU   3
WRK3     EQU   4
RLOPBUF1 EQU   4
WRK4     EQU   5
RLOPDST  EQU   6
RPRPT    EQU   6
RLLAT    EQU   7
RSOURCE  EQU   8
ROPDK    EQU   9
ROPTK    EQU   10
RBASE    EQU   12
RWRKA    EQU   13
         EJECT
         USING *,RBASE
         USING WORKAREA,RWRKA
         SPACE 2
*                                  CALCULATE AND RESERVE SPACE NEEDED
         LA    WRK1,INERR1              PROVIDE DIRECTORY
         ST    WRK1,ERET                                  RETURN ADDR
         SR    RLTOTAR,RLTOTAR          INITIATE LENGTH OF RES AREA
         L     RLIBUF1,SRCE1S           GET LENGTH OF 1ST SOURCE BUFFER
         TM    HCOMPMOD+2,X'40'         IS SOURCE PRG IN CORE
         BO    IN16                     YES
         LR    RLTOTAR,RLIBUF1          NO, OBTAIN A SECOND BUFFER
IN16     TM    HCOMPMOD+2,X'20'         ANY OPTAB
         BO    IN17                     NO
         L     RLOPBUF1,OPTABS           OBTAIN LENGTH OF OPTAB-BUFFER
         AR    RLTOTAR,RLOPBUF1         ADD TO TOTAL LENGTH
         AR    RLTOTAR,RLOPBUF1         ADD LENGTH OF 2ND OPTAB-BUFFER
IN17     L     RLOPDST,OOSTACKS         OBTAIN LENGTH OF OPERATOR STACK
         AR    RLTOTAR,RLOPDST          ADD TO TOTAL LENGTH
         LH    RLLAT,LLAT               OBTAIN LENGTH OF LAT
         AR    RLTOTAR,RLLAT            ADD TO TOTAL LENGTH
         ST    RLTOTAR,FREEMSIZ         STORE LENGTH OF RESERVED AREA
         SPACE
         GETMAIN R,LV=(2)               RESERVE AREA
         SPACE
         LA    WRK4,INERR2              PROVIDE NEW
         ST    WRK4,ERET                            DIR RETURN ADDRESS
         ST    RESAR,FREEMADR           STORE ADDRESS OF RESERVED AREA
         SPACE 2
*                                  LOAD REGISTERS FOR REST OF PHASE
         L     RSOURCE,IBUF1            SET 1ST BUFFER
         ST    RSOURCE,SOURCEB                         AS CURRENT
         LR    ROPTK,RESAR              GET CORRECT REG FOR OPT ST ADR
         SPACE
         TM    HCOMPMOD+2,X'40'         IS SOURCE PROGRAM IN CORE
         BO    IN18                     YES
         SPACE
         ST    ROPTK,IBUF2              NO, STORE ADDR OF 2ND INPUT BUF
         ST    ROPTK,RSRCB              SECOND BUFFER = READ BUFFER
         LA    ROPTK,0(RLIBUF1,ROPTK)   GET ADDR OF NEXT RESERVED AREA
         SPACE
IN18     TM    HCOMPMOD+2,X'20'         ANY OPTAB
         BO    IN19                     NO
         SPACE
         ST    ROPTK,OPBUF1             YES, STORE ADDR OF 1ST OPTBUF
         ST    ROPTK,AOPTABE            ADDRESS FIRST OPTAB ENTRY
         ST    ROPTK,OPBUFB             1ST OPTBUF = CURRENT
         LA    ROPTK,0(RLOPBUF1,ROPTK)  GET ADDR OF 2ND OPTABBUFFER
         ST    ROPTK,OPBUF2             STORE        -''-
         ST    ROPTK,ROPTB              2ND OPTBUF = READ BUFFER
         LA    ROPTK,0(RLOPBUF1,ROPTK)  GET ADDR OF OPERATOR STACK
         SPACE
IN19     LA    ROPDK,0(RLOPDST,ROPTK)   GET ADDR OF LAT
         ST    ROPDK,LATAB              STORE IT
         BCTR  ROPDK,0                  GET ADDR OF OPERAND STACK
         L     RPRPT,PRPT               PRPOINTER
         SPACE 2
*                                  INITILIZE WORKAREA FOR REST OF PHASE
         TM    HCOMPMOD+2,NOPT          ANY OPTAB
         BZ    *+12                     YES
         LA    WRK3,MAXFSN              NO, STORE ADDRESS OF
         ST    WRK3,AOPTABE                                  MAX FS NR
         LA    WRK3,SUTABC-9            INITIATE LAST USED
         ST    WRK3,SUTABCA                                SUTAB ENTRY
         SPACE
         LA    WRK3,IOTAB               COMPUTE
         LA    WRK2,GPBN                        LENGTH OF AREA
         SR    WRK2,WRK3                                       WITH 0
         STC   WRK2,*+9                 STORE IN MOVE-INSTR
         MVI   0(WRK3),X'00'            MOVE
         MVC   1(0,WRK3),0(WRK3)             ZEROES
         SPACE
         MVI   MAXFSN,X'FF'             INSERT MAX FS NUMBER
         MVI   CII+1,X'07'
         MVI   CIR+1,X'06'
         MVI   CLEARDIS,X'F0'           INSERT
         MVI   ONEENTRY+1,X'08'                VALUES FOR
         MVC   MAXOVERF(2),LONG                           LONG PREC
         TM    HCOMPMOD,X'02'           TEST PRECISION
         BO    IN3                      LONG
         MVI   ONEENTRY+1,X'04'         SHORT,
         MVI   PRECMASK,X'10'                  CHANGE
         MVC   MAXOVERF(2),SHORT                      VALUES
IN3      MVI   GPBN+1,X'FF'
         MVC   SEMCNT(2),ZEROHW         INITIATE SEMICOLON COUNTER
         SPACE 2
*                                  INITILIZE OPERATOR STACK
         MVI   0(ROPTK),X'25'           INSERT OPERATOR ALPHA
         SPACE 2
*                                  INITIALIZATION OF LABEL ADDRESS TAB
         L     WRK1,LATAB
         MVI   0(WRK1),X'00'            ZERO BEGIN
         MVC   1(LATBEG-1,WRK1),0(WRK1)            OF LAT
         LA    1,15                *    ZERO
         LA    11,79(0,WRK1)       *         REST
TSTZER   MVC   1(256,11),0(11)     *              OF
         LA    11,256(0,11)        *                   LAT
         BCT   1,TSTZER            *                       FOR
         MVC   1(176,11),0(11)     *                            TEST
         LA    WRK2,LATNR
IN4      MVI   0(WRK1),X'80'            TURN ON FIRST BIT IN LAT-ENTRY
         LA    WRK1,4(0,WRK1)           STEP ADDRESS
         BCT   WRK2,IN4                 HANDLE NEXT ENTRY IF ANY
         SPACE 2
*                                  START READ-IN OF SOURCE PRG, IF NEC
         TM    HCOMPMOD+2,X'40'         IS SOURCE PRG IN CORE
         BZ    IN6                      NO, NO BRANCHES WILL BE TAKEN
         OI    IN6+1,X'F0'              YES, ALL
         OI    IN9+1,X'F0'                       BRANCHES WILL
         OI    IN14+1,X'F0'                                    BE TAKEN
         SPACE
IN6      BC    0,IN22                   BRANCH IF SOURCE PRG IN CORE
         L     WRK2,UT2ADD              LOAD ADDRESS OF DCB
         READ  SRC1,SF,(3),(8)          READ 1ST SOURCE RECORD
IN22     BCTR  RSOURCE,0                INITIATE SOURCE POINTER
         SPACE 2
*                                  CONSTRUCT PBTAB3
         LA    WRK1,PBTAB2              START ADDR OF PBTAB2 IN WORKAR
         LA    WRK4,PBTAB3              START ADDR OF PBTAB3 IN WORKAR
         LH    WRK3,PBN                 GET NR OF PRG BLOCKS
         LA    WRK3,1(0,WRK3)
IN8      MVC   0(2,WRK4),0(WRK1)        MOVE ONE PBTAB2 ENTRY
         MVC   2(2,WRK4),ZEROHW         ZERO REST OF ENTRY
         LA    WRK1,2(0,WRK1)           STEP
         LA    WRK4,4(0,WRK4)                ADDRESSES
         BCT   WRK3,IN8                 MOVE NEXT IF NOT ALL MOVED
         SPACE 2
IN9      EQU   *                   CHECK READ OF 1ST SOURCE REC IF NEC
         BC    0,IN10                   BRANCH IF SOURCE PRG IN CORE
         CHECK SRC1
         SPACE
IN10     LA    WRK1,1                   INITIATE RECORD COUNT
         STC   WRK1,NUMBBL              STORE IT
         SPACE
         SPACE
*                                  START READING OF OPTAB
         TM    HCOMPMOD+2,X'20'         IS OPTAB EMPTY
         BO    IN14                     YES, BYPASS READING
         SPACE
         LA    WRK1,IN14                GIVE ADDR OF
         ST    WRK1,EODUT3                           EOD RTN TO DIR
         L     WRK1,OPBUF1              GET ADDRESS OF 1ST BUFFER
         L     WRK3,UT3ADD              GET ADDRESS OF DCB
         SPACE
IN12     READ  OPTB1,SF,(4),(2),'S'     READ 1ST RECORD
         SPACE
         CHECK OPTB1
         SPACE
IN13     BC    0,IN14                   BRANCH AFTER 2ND CHECK
         L     WRK1,OPBUF2              GET ADDRESS OF 2ND BUFFER
         OI    IN13+1,X'F0'
         B     IN12                     READ 2ND RECORD
         SPACE
         SPACE
IN14     EQU   *                   READ 2ND SOURCE RECORD IF ANY
         BC    0,IN15                   BRANCH IF SOURCE PRG IN CORE
         LA    WRK1,IN15                GIVE ADDR OF
         ST    WRK1,EODUT2                           EOD RTN TO DIR
         L     WRK1,IBUF2               GET ADDRESS OF 2ND BUFFER
         READ  SRC2,SF,(3),(2)          READ 2ND RECORD
         SPACE
         CHECK SRC2
         SPACE
         SPACE
IN15     EQU   *                   GO TO NEXT LOAD MODULE
         NI    HCOMPMOD+2,X'F7'         SET OFF NOSC SWITCH
         XCTL  EP=IEX50000
         SPACE
         SPACE
INERR1   EQU   *                   DIRECTORY RETURN BEFORE GETMAIN
         XCTL  EP=IEX51ER2
         SPACE
         SPACE
INERR2   EQU   *                   DIRECTORY RETURN AFTER GETMAIN
         XCTL  EP=IEX51ER1
         EJECT
* CONSTANTS
         SPACE
LLAT     DC    H'4096'                  LENGTH OF LABEL ADDRESS TABLE
SHORT    DC    H'4092'                  TO CHECK OBJ TIME STACK OVFLOW
LONG     DC    H'4088'                               -''-
         EJECT
WORKAREA DSECT
         COPY  WORKAREA
         ORG   DCBUT1
FSNMAX   DS    H
LVCOUNT  DS    H
SUCOUNT  DS    H
ZLEVEN   DS    F
ZSUTEN   DS    F
ZCOSTA   DS    255H                     SORT COUNT TABLE
ZADSTA   DS    255H                     SORT ADDRESS TABLE
TSTART   DS    F                        START OF TABLE AREA
SAVETAB  DS    F                        AREA TO SAVE TABLE END
ZSTAD    DS    F                        START ADDRESS OF UNSORTED TABLE
ZSORTSTA DS    F                        START ADDRESS OF SORTED TABLE
ZSUDAD   DS    F                        START OF SORTED SUTAB
ZSUDEN   DS    F                        END ADDRESS OF SORTED SUTAB
ZLESTA   DS    F                        START ADDRESS OF SORTED LUTAB
ZOTAFILL DS    F                        OPTAB WORK-BUFFER ADDRESS
ZOTAWRI  DS    F                        OPTAB WRITE-BUFFER ADDRESS
ZOTMAX   DS    F                        END OF OUTPUT BUFFER IN USE
TABSIZE  DS    F                        SIZE OF TABLE AREA
         EJECT
*
* AREA USED BY COMPILATION PHASE
*
         SPACE
         ORG   DCBUT1
         SPACE
RETADR   DS    17F                      SAVE AREA
PLACE14  DS    F                           -''-
RUTI     DS    9F                       GPR CONTROL
RUTR     DS    4F                       FLREG CONTROL
GPROLN   DS    H                        LABEL NR OF OBJ PRG ENTRY POINT
KONSUM   DS    H                        WORKPLACE
WORKPL   DS    F                        WORKPLACE
IBUF1    EQU   SRCE1ADD                 ADDR OF FIRST SOURCE BUFFER
IBUF2    DS    A                          -''  SECOND    -''-
SOURCEB  DS    A                          -''  CURRENT   -''-
RSRCB    DS    A                          -''  READ      -''-
OPBUF1   DS    A                        ADDR OF FIRST OPTAB BUFFER
OPBUF2   DS    A                          -''-  SECOND    -''-
OPBUFB   DS    A                          -''-  CURRENT   -''-
ROPTB    DS    A                          -''-  READ      -''-
AOPTABE  DS    A                        ADDRESS OF CURRENT OPTAB ENTRY
LATAB    DS    A                        ADDR OF LABEL ADDRESS TABLE
APBTAB4  EQU   LATAB                    ADDRESS OF PBTAB4
SUTABCA  DS    A                        ADDR OF LAST USED SUTAB ENTRY
STRETURN DS    F                        RETURN ADDRESS
FREEMADR DS    A                       ADR FOR FREEMAIN IN 50000
FREEMSIZ DS    F                        SIZE          -''-
         SPACE
PBTAB3   DS    1024C                    PROGRAM BLOCK TABLE, 3RD VERS
         SPACE
IOTAB    DC    18X'00'                  LIST OF DATA SETS
CII      DC    H'0'                     REGISTER CONTROL
CIR      DC    H'0'                          -''-
RII      DC    H'0'                          -''-
RIR      DC    H'0'                          -''-
OPDPBN   DC    H'0'                     PROGRAM BLOCK NR (BYTE 2 OF OPD
OPDADR   DC    H'0'                     BYTES 3 AND 4 OF OPERAND
OPDLN    DC    H'0'                     LABEL NUMBER TIMES FOUR
SCSC     EQU   SEMCNT                  SEMICOLON COUNTER
ZEROHW   DC    H'0'                     ZEROES
CFSN     DC    X'00'                    CURRENT FS NUMBER
MAXFSN   DC    X'FF'                    MAX FS NUMBER
CLEARDIS DC    X'F000'                  FOR CLEARING OF DISPLACEM PART
ONEENTRY DC    H'4'                     SHORT, FOR INCR OF OT STACK PTR
         ORG   ONEENTRY
         DC    H'8'                     LONG            -''-
PRECMASK DC    X'10'                    SHORT, TO MODIFY INSTRUCTIONS
         ORG   PRECMASK
         DC    X'00'                    LONG            -''-
NUMBBL   DC    X'00'                    RECORD COUNTER
         DS    H
SPBNST   DC    H'0'                     CURRENT PBN
         DS    H                                    AND DISPLACEMENT
GPBN     DC    H'255'                   GLOBAL DSA CONTROL
MAXOVERF DC    H'4092'                  SHORT, TO CHECK OT STACK OVERFL
         ORG   MAXOVERF
         DC    H'4088'                  LONG            -''-
HALFW    DS    H                        WORKPLACE
USPEI2   DS    H                        FOR ARRAY DECLA-
USPEI4   DS    H                                        RATION HANDLING
WPLACE   DS    H                        FOR INSTRUCTION GENERATION
XPLACE   DS    H
YPLACE   DS    H
UPLACE   DS    H
VPLACE   DS    C                                    -''-
STRDNAME DS    5C                       TO STORE OPERAND
CBVTAB   DS    48C                      CALLED-BY-VALUE TABLE
SUTABC   DS    768C                     FOR SUBSCRIPT OPTIMIZATION
         ORG   SUTABC
DSTAB    DS    608C                     DATA SET TABLE
         END   START
