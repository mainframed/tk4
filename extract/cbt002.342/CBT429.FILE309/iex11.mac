         TITLE 'SCAN I/II  IEX11000'
*STATUS: CHANGE LEVEL 000                                             *
*                                                                     *
*FUNCTION/OPERATION: TO TRANSFORM THE SOURCE PROGRAM TO               *
*   MODIFICATION LEVEL 1, WHICH INCLUDES A ONE FOR ONE TRANSLATION OF *
*   ALL CHARACTERS, THE REPLACEMENT OF ALL ALGOL DELIMITERS BY ONE    *
*   BYTE OPERATORS AND THE REMOVAL OR MODIFICATION OF ALL             *
*   DECLARATIONS.                                                     *
*   TO TABULATE AND CLASSIFY ALL VALID IDENTIFIERS.                   *
*   TO ASSIGN A SERIAL PROGRAM BLOCK NUMBER TO ALL BLOCKS AND         *
*   PROCEDURES AND A SERIAL GROUP NUMBER TO ALL BLOCKS, PROCEDURES    *
*   AND FOR STATEMENTS.                                               *
*   TO RECOGNIZE SYNTACTICAL ERRORS IN THE SOURCE PROGRAM AND TO      *
*   GENERATE APPROPRIATE ERROR PATTERNS.                              *
*   TO PRINT A LISTING ON SYSPRINT OF THE SOURCE PROGRAM IF OPTION    *
*   'SOURCE' IS SPECIFIED.                                            *
*   TO PREPARE TABLES TO BE USED BY THE SUCCEEDING PHASES. THE TABLES *
*   ARE PBTAB1, GROUPTABLE, AND SCOPETABLE.                           *
*                                                                     *
*ENTRY POINTS:                                                        *
*        IEX11000   SCAN I/II    XCTL EP=IEX11000                     *
*                                                                     *
*INPUT: THE SOURCE PROGRAM IS READ IN FROM SYSIN.                     *
*                                                                     *
*OUTPUT: THE SOURCE PROGRAM, MODIFICATION LEVEL 1, IS WRITTEN ON      *
*   SYSUT1.                                                           *
*   AN ITAB RECORD IS WRITTEN FOR EACH BLOCK ON SYSUT3.               *
*   ESD CARD FOR THE OBJECT MODULE AND TXT CARDS FOR THE CONSTANTS 0  *
*   THROUGH 15 AND THE STRINGS IN THE CONSTANT POOL ARE WRITTEN ON    *
*   SYSLIN AND OR SYSPUNCH IF THE OPTIONS 'LOAD' AND OR 'DECK' IS     *
*   SPECIFIED.                                                        *
*   THE SOURCE PROGRAM IS LISTED ON SYSPRINT IF OPTION 'SOURCE' IS    *
*   SPECIFIED.                                                        *
*                                                                     *
*EXITS-NORMAL: CONTROL IS GIVEN TO ITAB MANIPULATION, XCTL EP=IEX20000*
*   IF NO TERMINATING ERROR HAS BEEN DETECTED.                        *
*                                                                     *
*EXITS-ERROR: IF A TERMINATING ERROR HAS BEEN DETECTED CONTROL IS     *
*   GIVEN TO THE ERROR MESSAGE HANDLING PHASE        XCTL  EP=IEX21000*
*                                                                     *
*EXTERNAL ROUTINES: THE PRINT ROUTINE IN IEX00 IS USED.               *
*                                                                     *
*TABLES/WORKAREAS:                                                    *
*   BPRTAB    BRANCH ADDRESS TABLE                                    *
*   TESTTABL  FOR MAINLOOP SCANNING                                   *
*   RETRANS   FOR TRANSLATION FROM INTERNAL TO EBCDIC CHARACTER SET   *
*   COMTABLE  USED BY COMMENT PROGRAM                                 *
*   STRTABLE  USED BY STRING PROGRAM                                  *
*   BTABLE    USED BY BLANK PROGRAM                                   *
*   KEYTAB    USED BY TRANSOP                                         *
*   PTTABLE   USED BY POINT AND POINT IN LIST PROGRAMS                *
*   TRLTABLE  FOR TRANSLATION FROM EBCDIC TO INTERNAL CHARACTER SET   *
*   KOPOOL    CONTAIN THE CONSTANTS 0 THROUGH 15                      *
*   ATABLE    USED BY APOSTROF                                        *
*   SCTAB     USED TO SAVE THE STARTING SC COUNTER FOR THE BLOCKS     *
*   WITAB     USED FOR THE ALGOL DELIMITERS                           *
*   LITAB     FOR DISPLACEMENTS TO WITAB                              *
*   DELPRGTB  BRANCH ADDRESS TABLE AFTER A DELIMITER HAS BEEN FOUND   *
*   ARTABLE   USED BY LIST PROGRAM                                    *
*   WA        80 BYTE WORKAREA WITH 17 PRECEEDING CHARACTERS, USED FOR*
*             INPUT RECORDS. THE 17 EXTRA BYTES USED TO OVERLAP       *
*             BETWEEN ONE RECORD AND THE NEXT ONE.                    *
*   STACK     USED FOR THE SCOPE STRUCTURE HANDLING                   *
*   ITAB      USED TO TABULATE ALL VALID IDENTIFIERS                  *
*   SAVEPRT   DUMMY PRINTAREA. USED TO PICK UP STRINGS FROM IN EBCDIC *
*             FORM IF THE OPTION 'NOSOURCE IS SPECIFIED.              *
*                                                                     *
*ATTRIBUTES: NONE                                                     *
*                                                                     *
*NOTES: CHARACTER CODE DEPENDENCE                                     *
*   IF THE SOURCE PROGRAM IS IN ISO CODE A SCAN IS MADE IN THE        *
*   PROGRAM CIB TO EXCHANGE THE CHARACTERS   4C, 7B, 7C, 6C, 50,      *
*   WITH THE EBCDIC CHARACTERS               5D, 7E, 7D, 4D, 4E.      *
*   THEN WHEN THE SOURCE PROGRAM IN WA IS IN EBCDIC FORM IT IS        *
*   TRANSFERRED TO THE PRINTBUFFER, POSSIBLY THE DUMMY PRINTAREA.     *
*   THE SOURCE PROGRAM IN WA IS THEN TRANSLATED TO INTERNAL CODE BY   *
*   MEANS OF THE HEXADECIMAL TABLE TRLTABLE.                          *
*   THE INVERS TABLE, TRANSLATING FROM INTERNAL TO EBCDIC CODE IS     *
*   CALLED RETRANS AND IS IN CHARACTER FROM.                          *
*   THE TRANSFER OF PRECOMPILED AND CODE PROCEDURE NAMES, THE         *
*   TRANSFER OF STRINGS AND CONSTANTS TO THE CONSTANT POOL AND THE    *
*   OPERATION OF THE ROUTINE GENERATE DEPENDS ON AN INTERNAL          *
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS             *
*   EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.
*   THE OPERATION OF THE OTHER PARTS DOES NOT DEPEND UPON A           *
*   PARTICULAR INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET. *
*                                                                     *
*   THIS MODULE IS ONLY INTENDED TO BE EXECUTED IN CONNECTION         *
*   WITH THE OTHER MODULES OF THE ALGOL COMPILER. IN PARTICULAR IT    *
*   REQUIRES THE COMMON WORKAREA.                                     *
*                                                                     *
*                                                                     *
*                                                                     *
         SPACE 2
         SPACE 2
         SPACE 2
*   CONTROL SECTION 1 CONTAINS:
*                               INITIALIZATION
*                               MAINLOOP AND ITS SUBPROGRAMS
*                                       BLANK
*                                       TRANSOP (*,/,(,>,<,NOT,)
*                                       RIGHTPAR
*                                       POINT
*                                       COLON
*                                            LABEL
*                                            LETDEL
*                                            ASSIGN
*                                       APOSTROPHE
*                                            SCALE
*                                            BLKAPOS
*                                            ZETAAPOS
*                                            NPAFAPO (NOT PERMITTED)
*                               SOME GENERAL ROUTINES
*                                       STATE  (STATEMENT PROGRAM)
*                                       ERROR ROUTINES
*                                       ITABCLEA
*                                       IDCHCK1
*                                       FINDSEMCO
*                             AND TABLES AND CONSTANTS OUTSIDE CWA
*   CONTROL SECTION 2 CONTAINS:
*                               COB (CHANGE OUTPUT BUFFER)
*                               CIB (CHANGE INPUT BUFFER)
*                               DELIMITER
*                                       EROUT (DELIMITER ERROR ROUTINE)
*                             NORMAL (/ OR AND NOT STEP LESS
*                                     IMPL UNTIL WHILE POWER EQUIU
*                                     NOTLESS GREATER NOTEQUAL
*                                     NOT GREATER)
*                                       BOLCON ('TRUE', 'FALSE')
*                                       GIF (GOTO, IF)
*                                       TED (THEN, ELSE, DO)
*                                       BEGIN
*                                       BEGI (BLOCKHEAD)
*                                       END
*                                            FOREND
*                                            PBLCKEND
*                                       COM (COMMENT)
*                                       FOR
*                                       TYPE ( REAL, INTEGER, BOOLEAN)
*                                  IER (IDENT. ERROR ROUTINE)
*                                       CODE
*   CONTROL SECTION 3 CONTAINS:
*                               IDCHECK (SPECIFIED IDENTIFIERS)
*                               VALUE
*                               TYPEARRAY
*                                       ARRAY
*                               TRATE (ARRAY AND SWITCH LIST)
*                                       PONTLST
*                                       SEMCLST
*                                       LEFTPARL
*                                       RIGHTPARL
*                                       SLASHLST
*                                       COMMALST
*                                       COLONLST
*                               SWITCH
*                               STRING
*                               TYPPROC
*                               PROCEDURE
*                                     PROCEDEL (PROC. LETTERSTRING)
*                               ENDMISSIN (UNBALLANCED BEGIN END COUNT)
*   CONTROL SECTION 4 CONTAINS:
*                               TERMINATION
*
*
*
IEX11000 START
* RELEASE 19 CHANGES
* 777400                                                         A22571
*                                                                A28230
*                                                                A28251
* RELEASE 20 CHANGES
* 112800,348000                                                  A32949
REG0     EQU   0
REGI     EQU   1                  INPUT POINTER
K        EQU   2
REGZ     EQU   2
EAP      EQU   3                  OUTPUT POINTER
REGM     EQU   4                  POINTS TO FIRST APOSTROPHE
KEY      EQU   4                  TRANSOP REGISTER
REGE     EQU   4              LINKREGISTER FOR PRGBLOCKEND
REGF     EQU   4              LINKREGISTER FOR FDREND
REGB     EQU   6                  RETURN REG. FROM ERROR ROUTINES
IN       EQU   7                  ITAB POINTER
REGN     EQU   7
REG7     EQU   7
REG8     EQU   8                  BASE REGISTER
REGX     EQU   9                  RETURN REGISTER FROM BEGI
REG9     EQU   9
REGIX    EQU   9                  RETURN REG. FROM CIB
REGA     EQU   9
RET      EQU   10                 TESTLOOP AND LIST MAIN RETURN REG.
REG11    EQU   11                 BASE REGISTER
REGPS    EQU   12                 SPECIFICATION HANDLING
REG12    EQU   12
REGOX    EQU   12                 RETURN REG. FROM COB
PIN      EQU   14                 LABEL POINTER
REGL     EQU   14
REGY     EQU   15
REGH     EQU   15
         SPACE 2
*****   INITIALIZATION   **********************************************
*                   GETMAIN FOR KOPOOL
*                                STACK
*                                ITABBUF
*                                OUTPUTAREA2
*                                ITAB
*                   ALPHA  00 IS PUT IN STACK AND SP (STACK POINTER)
*                        IS MADE TO POINT TO NEXT BYTE                *
*                   ADDRESS OF THE FIRST O/P AREA IS TAKEN FROM CWA
*                        AND PUT IN ADDARI. THE ADDRESS OF SECOND
*                        O/P AREA (FROM GETMAIN) IS PUT IN ADDARI+4
*                   AITAB, LIGP, LPBP, AITAB AND ELI ARE INITILIZED IN*
*                        ITAB. HEADLINE FOR PB0 IS CREATED.           *
*                   AITAB, LPBP, LIGP WILL POINT TO PB0 HEAD
*                   AITL TO NEXT FREE ENTRY
*                   ELI TO LAST POSITION+1 OF ITAB                    *
*                   APE WILL POINT TO LAST POSSITION IN FIRST
*                        OUTPUT BUFFER
*                   WADDARI (CURRENT OUTPUT BUFFER) WILL POINT TO
*                        FIRST OUTPUT BUFFER
*                   EAP (REGISTR 3) WILL POINT TO FIRST O/P BUFFER
*                   PRINTING OF HEADLINES IS INITILIZED IF SOURCE
*                        WAS SPECIFIED
*                   SWITCHES ARE SET TO ZERO
*                   FIRST ENTRIES IN TABLES ARE SET TO ZERO
         SPACE 2
         USING IEX11001,8
         USING IEX11002,11
         BALR  5,0                      GET BASE REGISTERS
         USING *,5
         USING WORKAREA,13
         L     REG8,VIEX1
         L     REG11,VIEX2
         LA    REGOX,SLUT2
         ST    REGOX,ERET               INTERUPT BEFORE GETMAIN
         LH    REGI,FOURKA              KOPOOL
         LA    REGI,1000(0,REGI)        STACK
         A     REGI,SRCE1S              O/P BUFFER 1
         A     REGI,ITAB10S             ITAB
         LA    REGI,2000(0,REGI)        ITAB BUF
         ST    REGI,POOLLEN             STORE TOTAL LENGTH
         LR    REG0,REGI
         GETMAIN R,LV=(0)               GET AREAS NEEDED
         ST    REGI,POOLLOC             SAVE LOCATION
         LA    REGOX,ENDMISS       END OF DATA ADDRESS
         ST    REGOX,EODIN
         LA    REGOX,EODADIN
         ST    REGOX,ERET               INTERUPT ADDRESS AFTER GETMAIN
         ST    REGI,AKOPOOL             ADDRESS OF KOPOOL
         LA    REGI,4095(0,REGI)
         MVC   1(4,REGI),KOPOOL         INITILIZE STACK
         LA    REGI,2(0,REGI)
         ST    REGI,SP                  ADDRESS OF SECOND BYTE IN STACK
         LA    REGI,999(0,REGI)
         ST    REGI,AITABBUF            INITILIZE ITAB BUFFER
         LA    REGI,2000(0,REGI)
         ST    REGI,ADDARI+4                      OUTPUTAREA 2
         A     REGI,SRCE1S
         ST    REGI,AITAB                         ITAB
         ST    REGI,LIGP                SURROUNDING GROUP ADDRESS
         ST    REGI,LPBP                            BLOCK ADDRESS
         MVI   0(REGI),X'00'       CLEAR FIRST TWO ITABENTRIES
         MVC   1(21,REGI),0(REGI)
         MVI   3(REGI),X'FF'       CONSTRUCT CONTINUATION
         MVI   5(REGI),X'2B'       LINE FOR PB0
         LA    REGOX,11(0,REGI)
         ST    REGOX,AITL               ADDRESS OF FIRST FREE ENTRY
         A     REGI,ITAB10S
         ST    REGI,ELI            END OF ITAB
         L     EAP,SRCE1ADD        ADD OF FIRST OUTPUT BUFFER
         A     EAP,SRCE1S
         BCTR  EAP,0
         ST    EAP,APE                  END OF FIRST O/P BUFFER
         L     EAP,SRCE1ADD             OUTPUTAREAS' CONSTANTS
         MVC   ADDARI(4),SRCE1ADD
         MVC   WADDARI(4),ADDARI        CURRENT O/P AREA ADDRESS
         LA    REGOX,SAVEPRNT           APRNTAR IS INITILIZED WITH
         ST    REGOX,APRNTAR            DUMMY PRINTAREA ADDRESS
         MVI   PAGEHEAD+2,X'40'         CREATE HEADLINES
         MVC   PAGEHEAD+3(81),PAGEHEAD+2
         MVC   PAGEHEAD+39(14),HDING1
         MVI   PAGEHEAD+92,X'02'
         MVI   PAGEHEAD+93,X'11'
         MVI   PAGEHEAD+94,X'40'
         MVC   PAGEHEAD+95(81),PAGEHEAD+94
         MVC   PAGEHEAD+94(24),HDING2
         MVI   PAGEHEAD+186,X'FF'
         MVI   LINCNT,X'7F'
         BAL   REGIX,CIB                GET FIRST RECORD AND ADDRESS
*                                       OF FIRST PRINTAREA
         SR    REGZ,REGZ
         STC   REGZ,ONC                 USE REGZ TO ZERO COUNTERS
         STC   REGZ,DISP                AND SWITCHES
         LA    REGOX,64            INITIAL VALUE FOR KOPOOL ASSAIGNMENT
         ST    REGOX,SPCLT
         STH   REGZ,IGC            ITABGROUPCOUNTER AND
         ST    REGZ,MGESITL
         STC   REGZ,PBC            INITIAL VALUE OF PROGRAMBLOCKCOUNTER
         STC   REGZ,ONC           OUTPUTRECORDCOUNTER
         STC   REGZ,BITS1          INITIAL VALUE OF SWITCHBITS
         STC   REGZ,BITS2
         STC   REGZ,BITS3
         STH   REGZ,SC                  INITIAL VALUE OF SC COUNTER
         STC   REGZ,FSN          INITIAL VALUE OF FSN
         STC   REGZ,PBTAB1       INITIAL VALUE OF PB0
         ST    REGZ,GPTAB+3             INITILIZE GROUP AND SCOUP TABLE
         STC   REGZ,SPTAB
         STC   REGZ,0(0,EAP)      FIRST BYTE IN FIRST OUTPUTRECORD
         ST    EAP,OPIN
         ST    EAP,LAPIN                SET LABEL POINTERS
         STC   REGZ,OPIN+4
         LA    REGOX,GPTAB
         ST    REGOX,AGT                ADDRESS TO GROUPTABLE
         LA    REGOX,0                 MAKE                      A28251
         ST    REGOX,BRACKET                BRACKETCOUNTER ZERO  A28251
         L     REGOX,AITABBUF
         BCTR  REGOX,0
         ST    REGOX,ATOPSTAK           HIGHEST BYTE IN STACK TO USE
         B     TESTLOOP                 GO TO START PROCESSING
         DS    0H
MOVE     MVC   0(1,EAP),0(REGM)
         SPACE 3
SAVE1    DS    7F
SAVEPRNT DS    CL88
         SPACE 2
*****   BPRTAB   ******************************************************
*                   CONTAINS ADDRESSCONSTANTS OF PROGRAMS UTILIZED BY
*                        TEST
*                        LIST
*                        POINT
*                        APOSTROF
*                        POINTLST
*                   THE ADDRESSES ARE PICKED UP WITH DISPLACEMENTS FROM
*                        TESTTABL
*                        ARTABLE
*                        PTTABLE
*                        ATABLE
*                        PTTABLE FOR POINTLST 56 IS ADDED TO DISP GIVEN
         SPACE 2
         DS    0F
BPRTAB   DS    0CL140
         DC    4X'00'
         DC    A(TRANSOP)
         DC    A(TRANSOP)
         DC    A(TRANSOP)
         DC    A(TRANSOP)
         DC    A(TRANSOP)
         DC    A(TRANSOP)
         DC    A(COLON)                COLON
         DC    A(SEMCO)                SEMICOLON
         DC    A(RIGHTPAR)
         DC    A(BLANK)
         DC    A(ERR1)
         DC    A(POINT)
         DC    A(APOSTROF)
         DC    A(CIB)
         DC    A(ASSIGN)
         DC    A(DECPOINT)
         DC    A(ERR5)             ERROR AFTER POINT
         DC    A(BLKAPOS)              BLANK AFTER APOSTROPHE
         DC    A(NPAFTAPO)             NOT PERMITTED AFTER APOSTR
         DC    A(SCALE)                DIGIT OR SIGN AFTER APOSTROPHE
         DC    A(COLONLST)             COLON IN LIST
         DC    A(SEMCLST)              SEMICOLON IN LIST
         DC    A(DELIMIT)              DELIMITER PROGRAM
         DC    A(ZETAAPO)              ZETA AFTER APOSTROPHE
         DC    A(EROUT)                ERROR (FROM W1,W2OR W3 TAB)
         DC    A(LEFTPARL)             LEFT PARENTHESIS IN LIST
         DC    A(RIGTPARL)             RIGHT PARENTHESIS IN LIST
         DC    A(PZETA)                ZETA AFTER POINT IN LIST
         DC    A(ASSIGN)               ASSIGNMENT POINT IN LIST
         DC    A(DECPOINT)             DECPOINT IN LIST
         DC    A(ERR5A)            POINT ERROR IN LIST
         DC    A(COMMALST)             COMMA IN LIST
         DC    A(PONTLST)              POINT IN LIST
         DC    A(SLASHLST)             SLASH IN LIST
         DC    A(QUOTE)                QUOTE
         DC    A(SEMC60)
         SPACE 2
*****   TESTTABL ******************************************************
*                   USED BY TEST - GIVES DISPLACEMENTS TO BPRTAB
         SPACE 2
TESTTABL DS    0CL90
         DC    2X'00'
         DC    X'0408'
         DC    2X'00'
         DC    X'0C1C'
         DC    3X'00'
         DC    X'90'
         DC    4X'00'
         DC    X'001014'
         DC    13X'00'
         DC    X'18'
         DC    5X'00'
         DC    X'24'
         DC    4X'00'
         DC    X'282C303438'
         DC    42X'00'
         SPACE 2
*****   RETRANS  ******************************************************
*                   CONVERT TABLE FOR INTERNAL CODE TO EBCDIC
*                   USED BY CODE TO TRANSLATE PROCEDURE NAME
*                           PROCEDURE TO TRANSLATE PROCEDURE NAME FOR
*                                     ESD CARD IF PRECOMPILED SPECIFIED
         SPACE 2
RETRANS  DS    0CL90
         DC    C' '
         DC    47C'"'
         DC    C'0123456789'
         DC    6C'"'
         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         SPACE 2
*****   COMTABLE ******************************************************
*                   USED BY COMMENT PROGRAM
*                   TESTS FOR POINT, SEMICOLON, ZETA AND APOSTROPHE
*                   GIVES DISPLACEMENT TO PROGRAMS FROM COMCEE2+2
COMTABLE DS    0CL90
         DC    11X'00'
         DC    X'2A'
         DC    33X'00'
         DC    X'220E1E'
         DC    42X'00'
         SPACE 2
*****   STRTABLE ******************************************************
*                   USED BY STRING PROGRAM. SCANS FOR APOSTROPHE OR   *
*                        ZETA
*                   GIVES DISPLACEMENTS TO BPRTAB
         SPACE 2
STRTABLE DS    0CL90         TRT-TABLE USED BY STRING-PROGRAM
         DC    46X'00'
         DC    X'8C38'
         DC    42X'00'
         SPACE 2
*****   BTABLE   ******************************************************
*                   BLANK TABLES - SCANNES FOR FIRST NONBLANK CHARACTER
*                   USED BY BLANK
*                           BLKAPOS  BLANK AFTER APOSTROPHE
*                           READROUT IN TERMINATION
         SPACE 2
BTABLE   DS    0CL90
         DC    4X'FF'
         DC    2X'00'
         DC    2X'FF'
         DC    3X'00'
         DC    X'FF'
         DC    4X'00'
         DC    3X'FF'
         DC    13X'00'
         DC    X'FF'
         DC    X'00'
         DC    2X'FF'
         DC    X'00'
         DC    2X'FF'
         DC    5X'00'
         DC    14X'FF'
         DC    6X'00'
         DC    26X'FF'
         DS    0F
         SPACE 2
*****   KEYTAB   ******************************************************
*                   USED BY TRANSOP
*                   BYTE 3 IS EXCPECTED BYTE, IF THAT ONE MATCHES CHAR.
*                        IN INPUT BYTE 1 IS PUT OUT OTHERWISE BYTE 2
*                   THE DISPLACEMENT FROM TESTTABL OR ATABLE IS USED  *
*                        TO GET THE APPROPRIATE ENTRY IN KEYTAB
*                   USED WHEN  *  FOUND      EXCPECTED  *
*                              /                        )
*                              (                        /
*                              <  LESS THAN             = EQUAL
*                              >  GREATER THAN          =
*                              ^  NOT                   =
         SPACE 2
KEYTAB   DS    0CL28
         DS    CL4
         DC    X'00050202'
         DC    X'00280326'
         DC    X'00080603'
         DC    X'00141110'
         DC    X'00151210'
         DC    X'00132010'
         SPACE 2
*****   PTTABLE  ******************************************************
*                   USED BY POINT
*                            PONTLST
*                   GIVES DISPLACEMENTS TO BPRTAB
*                   WHEN USED BY PONTLST 56 IS ADDED TO ORIGINAL DISP.
         SPACE 2
PTTABLE  DS    0CL90
         DC    4X'44'
         DC    2X'00'
         DC    2X'44'
         DC    3X'00'
         DC    X'44'
         DC    4X'00'
         DC    X'3C'
         DC    2X'44'
         DC    13X'00'
         DC    X'44'
         DC    X'00'
         DC    2X'44'
         DC    X'00'
         DC    X'2044'
         DC    5X'00'
         DC    X'441C4438'
         DC    10X'40'
         DC    6X'00'
         DC    26X'44'
         SPACE 2
*****   TRLTABLE ******************************************************
*                   USED IN CIB TO TRANSLAT FROM EBCDIC TO INTERNAL
*                        CODE
         SPACE 2
TRLTABLE DS    0CL256
         DC    64X'2C'
         DC    X'2B'
         DC    10X'2C'
         DC    X'2D1106002223'
         DC    11X'2C'
         DC    X'02260B200103'
         DC    9X'2C'
         DC    X'25'
         DC    2X'2C'
         DC    X'12'
         DC    11X'2C'
         DC    X'07'
         DC    2X'2C'
         DC    X'2E10'
         DC    66X'2C'
         DC    X'404142434445464748'
         DC    7X'2C'
         DC    X'494A4B4C4D4E4F5051'
         DC    8X'2C'
         DC    X'5253545556575859'
         DC    6X'2C'
         DC    X'30313233343536373839'
         DC    6X'2C'
         SPACE 2
*****   KOPOOL   ******************************************************
*                   KEEPS THE CONSTANTS 0 THROUGH 15
*                   THE CONSTANS ARE USED WITHIN SCAN 1/2 FOR
*                        CALCULATION AND ARE THEN INSERTED AS
*                        THE FIRST 64 BYTES OF THE CONSTANT POOL
         SPACE 2
KOPOOL   DC    F'0'
         DC    F'1'
         DC    F'2'
         DC    F'3'
         DC    F'4'
         DC    F'5'
         DC    F'6'
         DC    F'7'
         DC    F'8'
         DC    F'9'
         DC    F'10'
         DC    F'11'
         DC    F'12'
         DC    F'13'
         DC    F'14'
         DC    F'15'
         SPACE 2
*****   ATABLE   ******************************************************
*                   USED BY THE APOSTROPHE PROGRAM
*                   GIVES DISPLACEMENTS TO BPRTAB
         SPACE 2
ATABLE   DS    0CL90
         DC    2X'50'
         DC    X'64'
         DC    X'00'
         DC    2X'00'
         DC    X'0064'
         DC    3X'00'
         DC    X'64'                   SEMICOLON                 A32949
         DC    4X'00'
         DC    3X'64'
         DC    13X'00'
         DC    X'64'
         DC    X'00'
         DC    2X'64'
         DC    X'00'
         DC    2X'64'
         DC    4X'00'
         DC    X'484C645C60'
         DC    10X'50'
         DC    32X'00'
         SPACE 2
*****   CONSTANTS  ****************************************************
TWOFIVEK DC    F'25000'
TWOK     DC    F'2000'
FOURK    DC    F'4095'
FOURKA   DC    H'4096'
DOUBLE   DC    D'0'
D256     DC    F'256'
INT      DC    X'2EC8030000'           COMMON PART OF THE INTERNAL
*                                  NAMES OF BOOLEAN CONSTANTS
ENDCOUNT DC    H'0'
ERRSAVE  DS    4F
SAVAR    EQU   ERRSAVE
VIEX1    DC    A(IEX11001)
VIEX2    DC    A(IEX11002)
VIEX14   DC    V(IEX11003)
ESDPARAM DC    8C' '
HDING1   DC    C'SOURCE PROGRAM'
HDING2   DC    C' SC     SOURCE STATEMENT'
OPINCHAR DC    C'0'
BRACKET  DS    F                       BRACKET COUNTER           A28251
         SPACE 2
         SPACE 2
*****   MAINLOOP ******************************************************
*
*              SCANS  THE INPUT STREAM
*              EVERYTHING PRECEDING THE FIRST REAL ALGOL WORD WILL BE
*              SKIPED WITH THE HELP OF BITS2,X'20'
         SPACE 2
TESTLOOP BALR  RET,0
         LR    REGIX,RET          RETURNADDRESS FOR CIBPROGRAM
         LR    REGM,REGI
         SR    REGZ,REGZ
         TRT   0(73,REGI),TESTTABL
         TM    BITS2,X'20'              Q. FIRST BEGIN FOUND
         BZ    FIRSTSTR                 NO
CONT     LR    REGH,REGI                FIND LENGTH OF SCANNED BYTES
         SR    REGH,REGM
         BZ    SUBROUT
         BAL   REGOX,COB
         LA    REG0,0(REGH,EAP)
         C     REG0,APE                 Q. SPACE LEFT IN O/P BUFFER
         BH    MSBLOOP
         BCTR  REGH,0
         EX    REGH,MOVE                MOVE SCANNED BYTES
         LR    EAP,REG0           INCREASE OUTPUTPOINTER
SUBROUT  L     REGB,BPRTAB(REGZ)
         BCR   15,REGB                  BRANCH TO PROGRAM
*                             MSBLOOP-  USED WHEN SCANNED BYTES HAS
*                                       TO BE PLACED IN TWO O/P AREAS
MSBLOOP  L     REGB,APE
         SR    REGB,EAP
         BCTR  REGB,0
         EX    REGB,MOVE          MOVE TO FIRST O/P AREA
         LA    EAP,1(REGB,EAP)
         BAL   REGOX,COB+8        CHANGE O/P BUFFER
         LA    REGOX,1(REGB,REGM)
         SR    REGH,REGB
         BCTR  REGH,0
         BCTR  REGH,0
         EX    REGH,MOVERST       MOVE TO 2ND O/P BUFFER
         LA    EAP,1(REGH,EAP)
         B     SUBROUT            RETURN
         CNOP  0,4
MOVERST  MVC   0(1,EAP),0(REGOX)
FIRSTSTR CLI   0(REGI),X'2E'       Q APOSTROPHY
         BE    APOSTROF
         CLI   0(REGI),X'2F'         Q. ZETA
         BE    CIB
         LA    REGI,1(0,REGI)           IF NEITHER- CONTINUE SCANNING
         B     TESTLOOP
         SPACE 2
*****   BLANK    ******************************************************
*              SCANS   TO THE NEXT NONBLANK CHARACTER
*              ALL BLANK CHARACTER WILL BE SKIPPED
*              USED BY MAIN LOOP AND ARRAYLIST
         SPACE 2
BLANK    LA    REGI,1(0,REGI)           INCREASE INPUTPOINTER
         CLI   0(REGI),X'2B'            COMPARE BLANK
         BCR   7,RET                    IF NO , RETURN
         LA    REGI,1(0,REGI)           IF YES, INCREASE INPUTPOINTER
         SR    REGZ,REGZ
         TRT   0(73,REGI),BTABLE        SCAN INPUT TO NEXT DELIMITER
         BCR   15,RET                   RETURN
         SPACE 2
*****   TRANSOP  ******************************************************
*
*              CHECKS THE NEXT BYTE IN THE INPUT INPUTAREA AGAINS A KEY
*              I.E. IF ( FOUND, NEXT BYTE WILL BE CHECKED FOR /, IF A
*              SLASH IS FOUND A LEFT SQUARE BRACKET WILL BE TRANSFERED
*              OTHERWISE A (
*              USED BY MAIN LOOP AND ARRAYLIST
         SPACE 2
TRANSOP  LA    KEY,KEYTAB(REGZ)         GET CORRECT ENTRY IN TABLE
         CNOP  0,4
INCR     LA    REGI,1(0,REGI)
         CLC   0(1,REGI),3(KEY)      Q. INPUT EQUAL EXPECTED ONE
         BE    TROE                     YES TAKE SUBSTITUTE CHAR.
         CLI   0(REGI),X'2B'      Q. BLANK
         BE    INCR
         CLI   0(REGI),X'2F'      Q. ZETA
         BNE   TRONE              IF NEITHER TAKE CHAR. IN I/P
         LA    REGIX,INCR+4
         BC    15,CIB
TRONE    BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVC   0(1,EAP),2(KEY)          TAKE CHAR FOUND IN INPUT
         LA    EAP,1(0,EAP)
         BCR   15,RET             RETURN
TROE     BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVC   0(1,EAP),1(KEY)          TAKE SUBSTITUE CHAR FROM TABLE
         L     REGOX,BRACKET                                     A28251
         TM    0(EAP),X'28'            IS IT RIGHT BRACKET       A28251
         BC    14,TSTMORE              NO                        A28251
         BCTR  REGOX,0                 YES  SUBTRACT 1 FROM CTR  A28251
         BC    15,NOUPDAT                                        A28251
TSTMORE  TM    0(EAP),X'08'            IS IT LEFT BRACKET        A28251
         BC    14,NOUPDAT              NO                        A28251
         LA    REGOX,1(REGOX)          YES  ADD 1 TO CTR         A28251
NOUPDAT  ST    REGOX,BRACKET                                     A28251
         LA    EAP,1(0,EAP)
         LA    REGI,1(0,REGI)
         BCR   15,RET             RETURN
         SPACE 2
*****   RIGHTPAR ******************************************************
*              INSERTS A ) IN O/P, SETS THE LABEL POINTERS
         SPACE 2
RIGHTPAR BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'26'        TRANSFER ) TO OUTPUTBUFFER
         ST    EAP,OPIN            NOTE ITS POSITION
         MVI   OPINCHAR,X'26'
         MVC   OPIN+4(1),ONC       AND THE OUTPUTRECORDNUMBER
         LA    EAP,1(0,EAP)
         ST    EAP,LAPIN           NOTE POSITION WHERE LETTERSTRING
         LA    REGI,1(0,REGI)      MAY START
         B     TESTLOOP
         SPACE 2
*****   POINT    ******************************************************
*              SCANS FOR : DECPOINT
*                          ERROR
*                          COLON
*                          SEMICOLON
*                          ASSIGN
*              USED BY MAIN LOOP AND ARRAYLIST
         SPACE 2
POINT    LA    REGI,1(0,REGI)           SCAN SOURCESTRING
         CNOP  0,4
         LA    REGIX,*            RETURNADDRESS FOR CIBPROGRAM
         SR    REGZ,REGZ
         TRT   0(73,REGI),PTTABLE       TO NEXT DELIMITER
         L     REGB,BPRTAB(REGZ)        BRANCH TO SUITABLE
         BCR   15,REGB                  SUBROUTINE
         SPACE 2
*****   DECPOINT ******************************************************
*              TRANSFERS A DECIMAL POINT
         SPACE 2
DECPOINT BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'3E'             TRANSFER DECIMALPOINT
         LA    EAP,1(0,EAP)
         BCR   15,RET
         SPACE 2
*****   ASSIGN   ******************************************************
*              TRANSFERS A ASSIGN CHAR TO O/P. RETURNS VIA STATEMENT
         SPACE 2
ASSIGN   BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'16'        TRANSFER .= TO OUTPUTBUFFER
         LA    REGI,1(0,REGI)      INCREASE INPUT- AND
         LA    EAP,1(0,EAP)        OUTPUTPOINTER
         BC    15,STATE            BRANCH TO STATEMENT PROGRAM
         SPACE 2
*****   STATE    ******************************************************
*
*                   CHECKS WITH PROBIT IF FIRST LABEL, FOR, IF, GOTO
*                   OR ASSIGN STATMENT AFTER A PROCEDURE
*                   CHECKS THAT ALL PARAMETERS HAVE BEEN SPECIFIED
*                   TURNS OFF THE PROBIT
*                   AND THE BEGBIT, POSSIBLE PROCEEDING BEGIN WILL BE
*                   COMPOOND BEGIN
         SPACE 2
STATE    NI    BITS1,X'7F'              BEGBIT = 0
         L     REGY,SP
         CLI   0(REGY),X'0C'            Q. PROC IN STACK
         BCR   7,RET               IF NO.RETURN
         MVI   0(REGY),X'14'
         NI    BITS1,X'BF'         PROBIT.=0
         CLI   PZ,X'00'                 Q. ALL PARAMETERS SPECIFIED
         BCR   8,RET                    YES RETURN
         BAL   REGOX,ERROR10            NO- GENERATE E10
         BCR   15,RET             RETURN
         SPACE 2
*****   APOSTROF ******************************************************
*              SCANS FOR : SCALE
*                                 BLANK
*                               ZETA
*                               NOT PERMITTED
*                               ONE MORE APOSTROPHE (DELIMITER)
*                   REGM WILL POINT TO THE APOSTROPHE
*                   USED BY TESTLOOP AND LIST
         SPACE 2
APOSTROF MVI   FBYTE,X'00'              ZEROSET FBYTE
ENTRAPR  LR    REGM,REGI          REGM WILL POINT TO FIRST APOSTROPHE
         LA    REGI,1(0,REGI)
         BALR  REGIX,0
         SR    REGZ,REGZ
         TRT   0(73,REGI),ATABLE   SOURCESTRING IS SCANNED TO THE NEXT
         L     REGB,BPRTAB(REGZ)   SIGNIFICANT DELIMITER AND THE
         BCR   15,REGB             SUITABLE SUBROUTINE SELECTED
         SPACE 2
*****   SCALE    ******************************************************
*                CORRECT ONLY DIRECT AFTER TESTLOOP OR LIST
*                CHECK THAT THE APOSTROPHE IS ONLY ONE CHAR. IN FRONT
*                    OF DIGIT
         SPACE 2
SCALE    TM    FBYTE,X'FF'
         BO    COMCEE2            COMMENT UNDER PROCESS
         BM    TYPESPEC           DECLARATION UNDER PROCESS
SCALEOK  LR    REGB,REGI
         TM    BITS2,X'20'        Q. PROGRAM STARTED YET
         BZ    TESTLOOP           NO - RETURN
         BCTR  REGB,0
         CLI   0(REGB),X'2E'  Q  APOSTOF ONE BYTE BEFORE SIGN OR DIGIT
         BNE   EROUT               IF NO,BRANCH TO ERROR-ROUTINE
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
MOVETEN  MVI   0(EAP),X'3F'        MOVE SCALEFACTOR TO OUTPUT RECORD
         LA    EAP,1(0,EAP)        INCREASE OUTPUT- AND
         BCR   15,RET              RETURN
         SPACE 2
*****   BLKAPOS  ******************************************************
*                   SHIFT THE BLANK OR BLANKS AWAY AND MOVES THE
*                   APOSTROPHE AND VALID CHARACTERS UP TO THE RIGHT
*                   SETS REGM TO POINT NEW LOCATION OF THE
*                   APOSTROPHE
*                   USED BY MAINLOOP AND INDIRECT BY THE ARRYLIST
*                          AND THE NPAFTAPO
         SPACE 2
BLKAPOS  LR    REGH,REGI           NOTE POSITION OF FIRST BLANK.
         TRT   0(73,REGI),BTABLE
         LR    REGB,REGI           COMPUTE  NUMBER OF BLANKS .
         SR    REGB,REGH           NUMBER OF BLANKS IN REGB .
         LR    REGL,REGH
         SR    REGL,REGM
         C     REGL,KOPOOL+44      Q BYTES EXEED THE LIMIT ALLREADY
         BH    EROUT
         BCTR  REGL,0         NUMBER OF BYTES TO BE SHIFTED
         LA    REGH,0(REGB,REGM)   COMPUTE NEW POSITION OF APOSTPOPHE,
         EX    REGL,MAPOS     MOVE APOSTROPHE AND SCANNED CHARACTERS
         EX    REGL,MAPOS2
         LR    REGM,REGH           NOTE NEW POSITION OF APOSTROPHE .
         BCR   15,REGIX           RETURN
         CNOP  0,4
MAPOS    MVC   BUCKET(1),0(REGM)
         CNOP  0,4
MAPOS2   MVC   0(1,REGH),BUCKET
BUCKET   DC    11X'00'
         SPACE 2
*****   ZETAAPO  ******************************************************
*                   MOVES SCANED BYTES AND APOSTROPHE IN FRONT OF WA
*                   AND PUTS REGM TO NEW START LOCATION
*                   OF POSSIBLE DELIMITER
*                   USED BY MAINLOOP AND ARRAYLIST
         SPACE 2
ZETAAPO  LR    REGY,REGM               COMPUTE
         LR    REGL,REGI               NR OF SCANNED
         SR    REGL,REGM               BYTES
         C     REGL,KOPOOL+44      Q EXEED LIMIT
         BH    EROUT                    YES
         LA    REGM,WA                  NO- CALCULATE WHERE TO MOVE
         SR    REGM,REGL                CHAR. STRING
         BCTR  REGL,0
         EX    REGL,MOVBEFWA            MOVE CHAR IN FRONT OF WA
         B     CIB                CHANGE INPUT BUFFER
         CNOP  0,4
MOVBEFWA MVC   0(1,REGM),0(REGY)
         SPACE 2
*****   NPAFAPO  ******************************************************
*                   GIVES ERROR MESSAGE AND UTILIZES BLANKAPO TO SHIFT
*                   THE INVALID CHARACTER AWAY
*                   USED BY MAINLOOP AND ARRAYLIST
         SPACE 2
NPAFTAPO TM    FBYTE,X'FF'
         BM    TYPESPEC            INVALID IDENTIFIER
         BO    COMCED2            COMMENT UNDER PROCESS
         TM    BITS2,X'20'         Q. PROGRAM STARTED YET
         BZ    *+10                NO
         BAL   REGB,ERR7
         DC    X'0401'             E1
         LR    REGH,REGI
         LA    REGI,1(0,REGI)           GO TO BLKAPOS TO SHIFT AWAY
         B     BLKAPOS+2                INVALID CHARACTER
         SPACE 2
*****   COLON    ******************************************************
*                   ENTERD FROM MAINLOOP OR POINT
*                   CHECKS FOR   :=  ASSIGN
*                                :(  DELIMITER
*                                    LABEL
         SPACE 2
COLON    LR    REGB,REGI           STORE PRECEEDING 6 CHARACTERS
         S     REGB,KOPOOL+24      TO BE USED ONLY IF INCORRECT
         MVC   BUCKET(6),0(REGB)   USE OF COLON E3
COLON2   LA    REGI,1(0,REGI)
EQUAL    CLI   0(REGI),X'10'       IF COLON IS FOLLOWED BY EQUALSIGN
         BE    ASSIGN              BRANCH TO ASSIGN-PROGRAM
         CLI   0(REGI),X'06'       IF COLON IS FOLLOWED BY LEFT PAREN-
         BE    LETDEL              THESIS,BRANCH TO DELIMITERPROCESSING
         CLI   0(REGI),X'2B'       IF COLON IS FOLLOWED BY BLANK
         BE    COLON2              REPEAT SEARCH
         CLI   0(REGI),X'2F'       IF COLON IS FOLLOWED BY ZETA
         BNE   *+12
         LA    REGIX,EQUAL         PROVIDE RETURNADDRESS AND
         BC    15,CIB              CHANGE INPUTBUFFER
         SPACE 2
*****   LABEL    ******************************************************
*                   OPIN POINTS TO LAST OPERATOR WHICH MIGHT BE       *
*                        FOLLOWED BY A LABEL.                         *
*                   PIN IS THE POINTER, STEPPING UP BETWEEN LAPIN AND
*                        THE COLON WHICH EAP POINTS TO
*                   OPIN+4 CONTAINS THE O/P REC. NUMBER WHEN OPIN
*                        WAS SET
*                   LABEL IS CHECKED FOR VALIDITY. THE FIRST 6 CHAR.
*                        ARE MOVED TO OUTPUT AND ITAB.                *
*                   CHECKS IF THE LABEL IS SPLIT OVER MORE THAN
*                        ONE  O/P BUFFER
*                   IF THE LABEL IS SPLIT BY ONE O/P BUFFER END THE
*                        HANDLING IS THE SAME AS IF NOT EXEPT THAT WHEN
*                        ZETA- RECORD END - IS FOUND PIN IS UPDATED TO
*                        THE FIRST CHARACTER OF THE CURRENT O/P REC.  *
*                   E3 IF THERE IS NO LABEL
*                   E6 IF LABEL LONGER THAN 1024 BYTES
*                   E7 IF LABEL CONTAINS INVALID CHARACTER
*                   E8 IF LABEL STARTS WITH INVALID CHAR.
         SPACE 2
         CLC   ONC(1),OPIN+4         Q. LABEL EXCEEDS ONE O/P REC.
         BE    LABEL                    NO
         SR    REGM,REGM
         IC    REGM,OPIN+4
         LA    REGM,1(0,REGM)
         IC    REGZ,ONC
         CR    REGZ,REGM                Q. LABEL EXCEEDS 2 O/P REC.
         BE    *+10                     NO
         BAL   REGB,ERR4
         DC    X'0406'        E6   TERMINATING ERROR
LABEL    L     PIN,LAPIN
         CR    EAP,PIN             IS THERE ANY IDENTIFIER
         BE    ERROR3              E3 COLON DELETED
         CLI   OPINCHAR,X'26'      Q LABEL PROCEEDED BY RIGHT
         BE    ERROR3              PARENTHESIS IF YES E3 IS GIVEN
LABNAME  CLI   0(PIN),X'40'     Q. FIRST CHAR. IS LETTER
         BL    LABNAMER
         L     IN,AITL
         MVC   0(1,IN),0(PIN)           MOVE CONTENTS OF PIN TO ITAB
         LA    IN,1(0,IN)                INCREABE IN
         LA    K,1                      INITILIZE K WITH 1
LABID    LA    PIN,1(0,PIN)        GET NEXT CHAR.
         CR    PIN,EAP                   Q(PIN=EAP
         BE    LABEND
LABCHECK CLI   0(PIN),X'2F'        Q. LETTER, DIGIT
*                                         OR ZETA
         BNE   *+12
         L     PIN,WADDARI              GET START OF CURRENT O/P AREA
         B     LABCHECK
         BL    ERROR7
         C     K,KOPOOL+24              Q. K=6
         BE    LABID                    YES- DON'T MOVE MORE CHAR. TO
*                                       ITAB
         MVC   0(1,IN),0(PIN)            MOVE CONTENT OF PINTOIN
         LA    IN,1(0,IN)                INCREASE  IN ANO PIN
         LA    K,1(0,K)                 AND K
         B     LABID
LABNAMER CLI   0(PIN),X'2F'        Q. ZETA  OR DIGIT
         BNE   *+12
         L     PIN,WADDARI         UPDATE PIN TO CURRENT O/P BUFFER
         B     LABNAME
         CLI   0(PIN),X'2B'        Q. BLANK
         BE    LABNAME
         BAL   REGB,ERR7
         DC    X'0408'        E8
         B     ERROR7+6
ERROR7   BAL   REGB,ERR2
         DC    X'0007'             E7 INCORRECT LABEL
         L     REGY,AITL
         BAL   REGOX,ITABCLEA+8         CLEAR  THE ITAB ENTRY
         BCR   15,RET
         SPACE 2
********LABEND   ******************************************************
*                   IF  (LABEL:LABELX) THE LN (LABEL NUMBER)
*                   WILL ONLY BE INCREASE ONCE
*                   INTERNAL NAME IS CREATED AND LN INSERTED
*                   X'27' IS MOVED TO THE O/P TO INDICATE LABEL
*                   OPIN, OPIN+4 AND LAPIN ARE UPDATED
*                   ITABCLEA IS ACTIVATED TO PREPARE NEXT ITABENTRY
         SPACE 2
LABEND   CLI   OPINCHAR,X'27'           +. LABEL PRECEEDED BY LABEL
         BE    LABLAHEI                 YES- DO NOT UPDATE LN
         LH    REGY,LN             LN=LN+4
         LA    REGY,4(0,REGY)
LABCREAT CLC   LN(2),FOURKA      Q. LN= 2**12
         BL    *+14
         BAL   REGB,ERR7
         DC    X'04D8'                  E216
         LA    REGY,LATBEG         RESET LN
         STH   REGY,LN
LABLAHEI L     REGY,AITL
         MVI   6(REGY),X'CC'            CREATE INTERNAL NAME
         MVI   7(REGY),X'08'
         L     REGL,LPBP
         MVC   8(1,REGY),10(REGL)      PROGRAMMBLOCKNR   AITL + 7
         MVC   9(2,REGY),LN             LN IN AITL+9
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'27'             MOVE LABEL IND. TO O/P
         ST    EAP,OPIN                 SET LABEL POINTERS
         MVI   OPINCHAR,X'27'
         MVC   OPIN+4(1),ONC
         LA    EAP,1(0,EAP)
         ST    EAP,LAPIN
         BAL   REG12,ITABCLEA           CHECK AND CLEAR NEXT ITABENTRY
         B     STATE                    RETURN VIA STATEMENT PCM
         SPACE 2
*****   LETDEL   ******************************************************
*                   :( HAS BEEN FOUND IN THE I/P
*                  IF OPIN POINTS TO A RIGHT PARENTHESIS IT SHOULD BE
*                   LETTER DELIMITER, WHITCH SHOULD BE REMOVED AND
*                   REPLACED BY A COMMA
*                   IT IS CHECKED THAT ALL CHARACTERS ARE LETTERS
*                        OTHERWISE E3 IS GIVEN
         SPACE 2
LETDEL   CLI   OPINCHAR,X'26'           Q. OPIN POINTS TO A RIGHT PAREN
         BNE   ERROR3                   NO- E3- COLON DELETED
         CLC   ONC(1),OPIN+4           Q LETDEL EXCEEDS ONE O/P REC
         BNE   LETDELB2                YES
         L     PIN,OPIN
         LA    REGB,1(0,PIN)
         CR    REGB,EAP                 Q. AT LEAST ONE CHAR.
         BE    ERROR3                   NO- E3 DELETE COLON
LETDELE1 LA    PIN,1(0,PIN)            OTHER CHAR. THAN
         CLI   0(PIN),X'39'            LETTERS
         BNH   ERROR3
         LA    REGB,1(0,PIN)
         CR    REGB,EAP                 Q. ALL CHAR. CHECKED
         BNE   LETDELE1                 NO- CHECK NEXT
         L     EAP,OPIN            SET O/P POINTER TO BEGINING OF
         MVI   0(EAP),X'25'            THE STRING,MOVE IN A COMMA
         LA    EAP,1(0,EAP)
         LA    REGI,1(0,REGI)          GET NEXT CHAR.
         BCR   15,RET
*  DELIMITER EXCEEDS  ONE O/P RECORD
LETDELB2 SR    REGB,REGB           Q. DOES THE STRING
         IC    REGB,OPIN+4           Q. EXCEED 2 O/P RECORDS
         LA    REGB,1(0,REGB)
         IC    REGZ,ONC
         CR    REGB,REGZ
         BE    *+10                     NO
         BAL   REGB,ERR4
         DC    X'0404'             E4  GOES TO COMPFIN
         L     PIN,OPIN                MAKE PIN POINT TO LETTER DEL.
LETDELB3 LA    PIN,1(0,PIN)
         CLI   0(PIN),X'40'            Q LETTER
         BNL   *-8                     YES
         CLI   0(PIN),X'2F'            NO-Q ZETA
         BNE   ERROR3
         L     PIN,WADDARI         CHANGE BACK SO PIN POINT TO CURR.O/P
LETDELF4 CLI   0(PIN),X'40'            Q LETTER
         BL    ERROR3                   E3 DELETE COLON
         LA    PIN,1(0,PIN)            SKIP ALL LETTERS
         CR    PIN,EAP            UNTIL END OF DELIMITERS
         BNE   LETDELF4
         L     EAP,WADDARI         LOAD ADD. OF CURRENT  O/P REC
         MVI   0(EAP),X'3D'            MOVE IN $ RHO
         LA    EAP,1(0,EAP)
         LA    REGI,1(0,REGI)          GET NEXT CHAR
         BCR   15,RET
         SPACE 2
*****   SEMCO    ******************************************************
*                   IF THE DELTA BIT IS ON, THE DELTA AND SEMICOLON
*                   COUNTER (SC) IS MOVED TO THE OUTPUT
*                   IF THE DELTABIT IS OFF THE STACK IS INSPECTED
*                   BEGIN, BETA OR PROC* - A SEMICOLON AND THE SC
*                             IS MOVED TO THE O/P AND PROCESSING IS
*                             CONTINUES VIA TEST
*                   FOR - THE FORSTATMENT IS COMPLETE, THE FOREND
*                             PROGRAM IS ACTIUATED
*                             THE RETURN IS TO STACKTST TO SEE IF ONE
*                             MORE FOR STATEMENT OR A PROC** HAS ENDED
*                             AT THE SAME TIME
*                   PROC - A PROCEDURE CONSISTING OF ONLY ONE
*                             STATMENT OR A DOMMY STATMENT HAS ENDED
*                             IT IS CHECKED THAT ALL PARAMETERS HAVE
*                             BEEN SPECIFIED, AND THE PROC** PGM IS
*                             JOINED
*                   PROC** - A PROCEDURE CONSISTING OF ONE LABELED
*                             STATEMENT OR ONE FOR, IF, GOTO OR ASSIGN
*                             STATEMENT HAS ENDED
*                             THE PROGRAM BLOCKEND PROGRAM IS ACTIVATED
*                             AND A DELTA AND THE SC IS MOVED OUT
*                   THE FINAL EXIT IS IN ALL CASES TO TEST
         SPACE 2
SEMC60   OI    HCOMPMOD+2,SET60         SET SWITCH FOR 60 CHAR. SET
SEMCO    LH    REGM,SC
         C     REGM,SCOVFL         TEST SC OVERFLOW
         BL    SEMCO01
         BAL   REGB,ERR7
         DC    X'0411'             E17
         MVC   SC(2),KOPOOL        RESET SC COUNTER TO ZERO
SEMCO01  LA    REGM,1(0,REGM)      INCREASE SC
         STH   REGM,SC
         LA    REG0,3(0,EAP)       PROVIDE 3 BYTES IN OUTPUTBUFFER
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         NI    BITS3,FMOFF
         TM    BITS1,X'20'         TEST DELTABIT
         BO    DELTA               IF  1  BRANCH TO DELTATRANSFER
         LA    REGE,STACKTST       RETURN REGISTER ( FOREND, PBLCKEND )
         L     REGY,SP             SELECT
         IC    REGZ,0(0,REGY)      BRANCH
         L     REGB,PROG2(REGZ)    ADDRESS
         BCR   15,REGB             DEPENDING ON WHAT IS IN STACK
         DS    0F
PROG2    DC    A(ERR8)             SHOULD NOT OCCUR, TOPBYTE IS ALPHA
         DC    A(SCTRANS)                                      BETA
         DC    A(SCTRANS)                                      BEGIN
         DC    A(SEMPROC)                                      PROC
         DC    A(SCTRANS)                                      PROC*
         DC    A(SEMPROC2)                                     PROC**
         DC    A(FOREND)                                       FOR
DELTA    NI    BITS1,X'DF'         DELTA BIT= 0
         MVI   0(EAP),X'29'        TRANSFER DELTA
         BC    15,SCTRANS+4
SCTRANS  MVI   0(EAP),X'0B'        TRANSFER SEMICOLON
         MVI   OPINCHAR,X'0B'
         ST    EAP,OPIN            NOTE POSITION OF SEMICOLON IN OPIN
         MVC   OPIN+4(1),ONC       AND O/P NO
         MVC   1(2,EAP),SC         TRANSFER SEMICOLONCOUNTER
         LA    EAP,3(0,EAP)        INCREASE OUTPUTPOINTER
         ST    EAP,LAPIN
         NI    BITS1,X'7F'         BEGBIT.=0
         LA    REGI,1(0,REGI)      INCREASE INPUTPOINTER
         B     TESTLOOP
SCOVFL   DC    F'65535'           (2**16)-1
SEMPROC  NI    BITS1,X'BF'         PROBIT.=0
         CLI   PZ,X'00'            ALL PARAMETERS SPECIFIED
         BE    *+8
         BAL   REGOX,ERROR10
SEMPROC2 BAL   REGE,PBLCKEND
         LA    REG0,3(0,EAP)       PROVIDE 3 BYTES IN OUTPUTBUFFER
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         MVI   0(EAP),X'29'        TRANSFER DELTA
         BC    15,SCTRANS+4
STACKTST CLI   0(REGY),X'14'
         BE    SEMPROC2            PROC**
         BH    FOREND              FOR
         LA    REG0,3(0,EAP)
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         B     SCTRANS
         SPACE 2
         SPACE 2
*****   ERROR ROUTINE  ************************************************
*                   GENERATES ERROR PATTERNS
*                   MAINLY CLOSED SUBROUTINES, ENTERED WITH BAL REGB
*                        FOLLOWED BY TWO BYTES. FIRST BYTE SPECIFIES
*                        THE LENGTH, IF KNOW AND SECOND BYTE ERROR
*                        NUMBER
*                   USES ERROR1 TO CHECK FOR ERRORPOL OVERFLOW AND
*                        TO INSERT NUMBER, LENGTH AND SC
         SPACE 2
*****   ERR0     ******************************************************
*                   GENERATES E212 PATTERN
*                   EXITS TO COMFIN
         SPACE 2
ERR0     MVI   0(REGY),X'02'
         MVI   1(REGY),X'D4'       E212
         LA    REGY,2(0,REGY)
         ST    REGY,NEXTERR
         B     COMPFIN
         SPACE 2
*****   ERR1     ******************************************************
*                   E1
*                   ACTIVATES ERR7, SKIPPS INVALID CHARACTER AND
*                        RETURNS TO EITHER TESTLOOP OR LIST
*                        ENTERED VIA BPRTAB WHEN USED BY TESTLOOP OR
*                             LIST
*                        INVALID CHARACTER FOLLOWING AN APOSTROPHE IS
*                             TREATED SPECIALLY IN NPAFTAPO
         SPACE 2
ERR1     BAL   REGB,ERR7     NOT PERMITTED CHARACTER
         DC    X'0401'        E1
         LA    REGI,1(0,REGI)
         BCR   15,RET              RETURN TO TEST OR TRATE
         SPACE 2
*****   ERR2     ******************************************************
*                   ERR2      7, 16, 31, 32, 33, 34
*                        ENTERED   ERROR7, IER, ARRAYERR, SWITCHERR
*                                  SLASHERR, SEMCLST, SEMCLER, ARRYSLSH
*                                  SLASHLST, PNAMERR
*                        NAME TAKE FROM AITL
*                   ERR2B          10, 36, 37
*                                  ERROR10, PROCFIN, ERROP37
*                        NAME TAKEN FROM LPBP-11
*                   ERR2C     14
*                                  EROUT
*                        DELIMITER TAKEN FROM BUCKET
*                   ERR2E     16, 26, 27, 30
*                                  IDVALCHK, VALDLB2, IDSELSE, NOTFOUND
*                        NAME TAKEN FROM IDBUCKET
*                   ERR2D UTILISES ERROR2 TO FIND LENGTH
*                                  ERROR1 TO CREATE MESSAGE
*                                  MOVES IN INFORMATION
*                                  RETURNS TO CALLING SEQUENCE
         SPACE 2
ERR2     L     IN,AITL                  NAME FROM AITL
         B     ERR2D
ERR2B    L     IN,LPBP                  NAME FRM LPBP-11
         S     IN,KOPOOL+44
         B     ERR2D
ERR2C    MVC   BUCKET(6),1(REGM)        DELIMITER FROM BUCKET
         LA    IN,BUCKET
         B     ERR2D
ERR2E    LA    IN,IDBUCKET     E26      NAME FROM IDBUCKET
ERR2D    STM   12,15,ERRSAVE
         BAL   REG12,ERROR2             GET NAME AND LENGTHS
         BAL   REG12,ERROR1             CREATE ENTRY IN ERRPOOL
         EX    K,ERRMOVE                MOVE THE NAME
         LM    12,15,ERRSAVE
         BC    15,2(0,REGB)
         SPACE 2
*****   ERROR3   ******************************************************
*                   GENERATES PATTERN FOR E3
*                   ENTERED FROM LABEL, COLONLST
*                   TAKES INFORMATION FROM BUCKET
         SPACE 2
ERROR3   STM   12,15,ERRSAVE            GET PARAMETER FIELD
         LA    REGB,PARAM3
         BAL   REG12,ERROR1             CREATE PATTERN
         MVC   4(6,REGY),BUCKET         MOVE IN INFORMATION
         LM    12,15,ERRSAVE
         BCR   15,RET
PARAM3   DC    X'0A03'
         SPACE 2
*****   ERR4     ******************************************************
*                   TAKES CARE OF ALL TERMINATING ERRORS THAT ARE
*                        4 BYTETS LONG
*                   THAT IS   4, 6, 20, 22, 38, 41, 44, 213, 215, 216
*                   ENTERED FROM   LABEL, ITABCLEA, COB, BEGIN, BEG1,
*                                  PBLCKEND, FOR, PROCEDUR, ENDMISS
*                   EXITS TO COMPFIN
         SPACE 2
ERR4     BAL   REG12,ERROR1
         SPACE 2
*****   COMPFIN  ******************************************************
*                   TERMINATING ERROR HAS BEEN FOUND
*                   SETS TERMBIT IN HCOMPMOD
*                   EXITS TO KOPOOLRL IN TERMINATION
*
COMPFIN  OI    HCOMPMOD,X'08'      SET TERMINATING ERROR BIT
         L     REG11,VIEX14
         USING IEX11003,11
         B     KOPOOLRL                 EXIT TO ERMINATION
         USING IEX11002,11
         SPACE 2
*****   ERR5     ******************************************************
*                   ERR5A     E35  FROM BPRTAB, DISP IN TESTTABL
*                   ERR5      E2   FROM BPRTAB, DISP IN ARTABLE
*                   GENERATES ERROR PATTERN RETURNS TO TESTLOOP OR LIST
*
         SPACE 2
ERR5A    LA    REGB,PPARLST             GET PARAMETER FIELD
         B     *+8
ERR5     LA    REGB,PONTPAR             GET PARAMETER FIELD
         STM   12,15,ERRSAVE
         BAL   REGOX,ERROR1             GENERATE PATTERN
         LM    12,15,ERRSAVE
         BCR   15,RET                   RETURN TO TESTLOOP OR LIST
PPARLST  DC    X'0423'
PONTPAR  DC    X'0402'             E2
         SPACE 2
*****   ERR6     ******************************************************
*                   GENERATES PATTERN FOR E6
*                   TESTS IF PROGRAM STARTED IF NOT, NO ERROR MESSAGE
*                   TEST IF IN COMMENT OR IDENTIFIER PROGRAM
*                   TAKES THE 6 CHARACTERS PRECEEDING THE FIRST
*                        APOSTROPHE
*                   RETURNS TO APOSTROPHE PROGRAM TO TEST ON SECOND
*                        APOSTROPHE
         SPACE 2
ERR6     TM    BITS2,X'20'              Q. FIRST BEGIN FOUND YET
         BZ    TESTLOOP                 NO
         TM    FBYTE,X'FF'
         BO    ENTRAPR             INVALID IDENTIFIER
         BZ    *+12                COMMENT
         LA    REGI,1(0,REGI)
         B     TPSPECER
         BCTR  REGI,0
         STM   12,15,ERRSAVE
         BAL   REG12,ERROR1
         S     REGI,KOPOOL+24      SUBTRACT 6
         MVC   4(6,REGY),0(REGI)        MOVE OUT INFORMATION TO POOL
         LA    REGI,7(0,REGI)
          LM    12,15,ERRSAVE
         B     ENTRAPR             RETURN TO TEST SECOND APOSTROPHE
         SPACE 2
*****   ERR7     ******************************************************
*                   TAKES CARE OF ALL SERIOUS AND WARNING MESSAGES THAT
*                        ARE 4 BYTES LONG
*                   ENTERED FROM ERR1, IERSPEC, ARNAMSE, SWITCHNSE
*                                 PNAMESE, LABNAMER, CODE, SEMCO, ERR18
*                                 ERR23, CODE, SPEC, VALUE, VALDLB2,
*                                  FIRSTBEG, ERR9, LABEL, PROCEDURE,
*                                 SWITCH, COM
*                   1, 5, 8, 15, 17, 18, 23, 24, 25, 28, 29, 42, 43,216
*                   RETURNS TO CALLING SEQUENCE
         SPACE 2
ERR7     STM   12,15,ERRSAVE
         BAL   REG12,ERROR1             CREATE ENTRY
         LM    12,15,ERRSAVE
         BC    15,2(0,REGB)
         SPACE 2
*****   ERR8     ******************************************************
*                   GENERATES ERROR PATTERN E11 ONCE
*                   IF FOUND DELIMITER IS COMMENT E18 IS GIVEN
*                        INSTEAD
*                   ENTERED FROM   TYPESPEC
*                                  STARTDEL
*                   EXITS TO TESTLOOP
         SPACE 2
ERR8     TM    BITS3,E11BIT             Q. MESSAGE ALLREADY GIVEN ONCE
         LA    REGI,1(0,REGI)      GET NEXT CARACTER
         BO    TESTLOOP                 YES- RETURN
         CLI   BCHAR,X'38'              Q COMMENT FOUND
         BE    E18                YES GENERATE E18 INSTEAD
         OI    BITS3,E11BIT             SET E11BIT
         BAL   REGB,ERR7                GENERATE E11 PATTERN
         DC    X'040B'
         B     *+10
E18      BAL   REGB,ERR7
         DC    X'0412'
         BCR   15,RET              RETURN
         SPACE 2
*****   ERR9    *******************************************************
*                   GENERATE  E9 PATTERN
*                   ENTERED FROM TED
*                                 END
*                                 READROUT
*                   EXITS TO EODADIN
         SPACE 2
ERR9     BAL   REGB,ERR7           PROGRAM CONTINIUED AFTER LAST END
         DC    X'042B'
         B     EODADIN
         SPACE 2
*****   ERROR10  ******************************************************
*                   GENERATES E10 PATTERN
*                   INSERTS IN THE NOT SPECIFID PARAMETERS A
*                        ALLPURPOS IDENTIFIER
*                   RETURNS TO CALLING PROGRAM
         SPACE 2
ERROR10  BAL   REGB,ERR2B
         DC    X'000A'             E10
         L     REGB,LPBP
FINDEMTY LA    REGB,11(0,REGB)     GET FIRST PARAMETER
         C     REGB,AITL                Q. ALL PARAMETERS CHECKED
         BCR   8,REGOX             WHEN ALL CHECKED RETURN
         CLI   6(REGB),X'00'       INSERT ALL PURPOSE IDENTIFIER
         BNE   FINDEMTY            IN EMPTY INTERNAL NAMES
         MVC   6(5,REGB),ALLPUPOS
         B     FINDEMTY
ALLPUPOS DC    X'91FF010000'
         SPACE 2
*****   ERR13    ******************************************************
*                   GENERATES E13 PATTERN
*                   PICKS UP THE DELIMITER FROM W1TAB
         SPACE 2
ERR13    STM   12,15,ERRSAVE
         LA    REGOX,5(0,REGL)     INCREASE TO GET WHOLE LENGTH
         STC   REGOX,0(REGB)
         BAL   REGOX,ERROR1
         L     REGL,ERRSAVE+8      GET LENGTH OF DELIMITER
         LA    IN,1(0,REGM)        GET START ADDRESS OF DELIMITER
         EX    REGL,ERRMOVE        MOVE DELIMITER TO ERROR PATTER
         LM    12,15,ERRSAVE
         BC    15,2(0,REGB)        RETURN
         SPACE 2
*****   ERROR21  ******************************************************
*                   GENERATES E21 PATTERN
*                   PICKS UP DELIMITER FROM DELIMITER TABLE
*                   EXITS TO PROGRAM WHICH CALLED FOR BEG1
         SPACE 2
ERROR21  STM   12,15,ERRSAVE
         LA    REGB,5(0,REGL)           INCREASE L TO GET WHOLE LENGTH
         STC   REGB,E21PAR
         LA    REGB,E21PAR
         BAL   REG12,ERROR1
         L     IN,SAVE1                 GET DEK. FROM DELIMITER TABEL
         L     REGL,ERRSAVE+8                LENGTH FROM SAVEAREA
         EX    REGL,ERRMOVE             MOVE IN DEK. IN ERROR MESSAGE
         LA    EAP,1(0,EAP)             SUBSTITUTE BEG1 DECREASION
         LM    12,15,ERRSAVE            BEGIN WILL REMAIN COMPOUND
         BCR   15,REGX                  RETURN
E21PAR   DC    X'0015'                  E21
         SPACE 2
         SPACE 2
*****   ERROR1   ******************************************************
*                   CHECKS IF SPACE LEFT IN ERRORPOOL
*                   INSERTS LENGTH, SC, ERROR NUMBER
*                   RETURNS TO CALLIN ERROR PUTINE
         SPACE 2
ERROR1   MVC   ERRMOD1+3(1),0(REGB)     MOVES IN THE LENGTH AND
         MVC   ERRMOD2+1(1),0(REGB)     ERRORNUMBER IN THE FOLLOWING
         MVC   ERRMOD3+1(1),1(REGB)     INSTRUCTIONS
         L     REGY,NEXTERR
ERRMOD1  LA    REGL,0(0,REGY)
         C     REGL,ENDPOOL        Q. ROOM LEFT IN ERRORPOOL
         BNH   *+8                 FOR THIS MESSAGE
         B     ERR0                     NO- GENERATE E212
         L     REGY,NEXTERR
         ST    REGL,NEXTERR             CORRECT NEXTERR POINTER
ERRMOD2  MVI   0(REGY),X'00'            MOVE IN LENGTH
ERRMOD3  MVI   1(REGY),X'00'                    ERRORNUMBER
         MVC   2(2,REGY),SC                     SC COUNTER
         LR    REGL,REGI                MAKE REGL POINT TO SIX CHAR
         SH    REGL,SEVEN               BEFORE CURRENT INPUT POINTER
         BCR   15,REG12
         SPACE 2
*****   ERROR2   ******************************************************
*                   FINDS FIRST NONZERO CHAR. IN BUCKET, ITAB,
*                   IDBUCKET OR BUCKET
         SPACE 2
ERROR2   LA    K,5                      INITILIZE K FOR THE LOOP
         STC   K,ERRKCAL+3
ERRKCAL  CLI   0(IN),X'00'              LOOP TO FIND THE FIRST 0 CHAR
         BNE   *+8                      OR END OF EXTERNALNAME
         BCT   K,ERRKCAL-4
         LA    REGY,5(0,K)    INCREASE TO GET THE WHOLE
         STC   REGY,0(0,REGB)      ERROR MESSAGE LENGTH
         BCR   15,REG12
         CNOP  0,4
ERRMOVE  MVC   4(1,REGY),0(IN)
SEVEN    DC    X'0007'
         SPACE 2
*****   IDCHECK1 ******************************************************
*                   CHECKS IDENTIFIER NAMES FOR ARRAY, PROCEDURE AND
*                   SWITCH
*                   MOVES THE FIRST 6 CHARATERS OF THE NAME TO ITAB
*                   AND THE OUTPUT
*                   RETURNS VIA REGB WHEN A CHARACTER IS FOUND THAT
*                   IS NOT LETTER, DIGIT, BLANK OR ZETA
         SPACE 2
IDCHECK1 BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVC   0(1,EAP),0(REGI)    MOVE OUT FIRST CHAR.
         LA    EAP,1(0,EAP)
         L     IN,AITL             GET ITAB POINTER
         MVC   0(1,IN),0(REGI)     MOVE IN FIRST CHAR. TO ITAB
         LA    IN,1(0,IN)
         LA    K,1                 INITILIZE K
         LA    REGIX,*+8
IDCHECK2 LA    REGI,1(0,REGI)      GET NEXT CHAR.
         CLI   0(REGI),X'2F'       Q.WHAT IS CHAR.
         BCR   4,REGB              NOT LETTER OR ZETA
         BE    CIB                 ZETA
         C     K,KOPOOL+24         LETTER Q. 6 CHAR. MOVED ALLREADY
         BE    IDCHECK2            YES SKIP ADDITIONAL CHAR
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVC   0(1,EAP),0(REGI)    MOVE CHAR TO OUTPUT
         LA    EAP,1(0,EAP)
         MVC   0(1,IN),0(REGI)               TO ITAB
         LA    IN,1(0,IN)          INCREASE
         LA    K,1(0,K)            POINTERS
         B     IDCHECK2            GO AND CHECK NEXT CHAR.
         SPACE 2
*****   FINDSEMC ******************************************************
*                   CHECKS FOR SEMICOLON OR POINT- COMMA
*                   BLANKS AND I/P BUFFER CHANGE IS HANDLED
*                   IF SEMICOLON IS FOUND THE RETURN IS VIA REG12
*                   IF NOT THE RETURN IS VIA REGB
         SPACE 2
         LA    REGI,1(0,REGI)
FINDSEMC LA    REGIX,*
         CLI   0(REGI),X'0B'       Q. SEMICOLON
         BC    8,0(0,REG12)        EQUAL- SEMICOLON FOUND
         CLI   0(REGI),X'2D'       Q POINT
         BE    FINDCOMA                 YES- LOOK FOR COMMA
         CLI   0(REGI),X'2B'       Q BLANK
         BE    FINDSEMC-4
         CLI   0(REGI),X'2F'
         BE    CIB
         BCR   15,REGB             ERROR- NO SEMICOLON
FINDCOMA LA    REGIX,*+8
         LA    REGI,1(0,REGI)
         CLI   0(REGI),X'25'       Q COMMA
         BC    8,0(0,REG12)        EQUAL- SEMICOLON FOUND
         CLI   0(REGI),X'2B'       Q BLANK
         BE    FINDCOMA+4
         CLI   0(REGI),X'2F'
         BE    CIB
         BCR   15,REGB             ERROR NO SEMICOLON
         SPACE 2
*****   ITABCLEA ***
*                   CHECKS FOR ITABOVERFLOW AND CLEARS THE NEXT ENTRY
         SPACE 2
ITABCLEA L     REGY,AITL
         LA    REGY,11(0,REGY)
         C     REGY,ELI            Q ROOM FOR ONE MORE ITAB ENTRY
         BL    *+10
         BAL   REGB,ERR4
         DC    X'04D5'             E213
         LR    IN,REGY             INCREASE ITAB POINTERS
         ST    REGY,AITL
         MVI   0(REGY),X'00'       CLEAR NEXT
         MVC   1(10,REGY),0(REGY)  ITAB ENTRY
         BCR   15,REG12            RETURN
IEX11001 CSECT
         SPACE 2
*****   COB      ******************************************************
*                   CHECKS IF NEW O/P BUFFER IS NEEDED
*                   ENTRY IS TO COBSPEC IF TWO OR MORE CONTINIOUS
*                        BYTES ARE NEEDED
*                   THE CHANGE OF ADDRESS BETWEEN THE TWO BUFFERS IS
*                        DONE WITH DISP. DISP IS EITHER 0 OR 4
*                        SO ADDARI+DISP WILL PICK UP EITHER ADDARI OR
*                        THE ADDRESS OF THE ALTERNATE O/P BUFFER
*                   WADDARI POINTS TO THE FIRST BYTE OF THE CURRENT
*                        O/P BUFFER
*                   EAP IS THE CURRENT O/P POINTER
*                   APE POINTS TO THE LAST BYTE OF THE CORRENT BUFFER
*                   ONC CONTAINS THE CURRENT O/P RECORD NUMBER
*                   ZETA IS THE BUFFER END INDICATION
         SPACE 2
COBSPEC  C     REG0,APE                 Q. SPACE LEFT FOR X MORE BYTES
         BC    4,0(0,REGOX)             YES- RETURN
         B     *+12                NO CHANGE OUTPUT BUFFER FIRST
COB      C     EAP,APE                  Q. SPACE LEFT FOR ONE MORE BYTE
         BC    4,0(0,REGOX)             YES- RETURN
         MVI   0(EAP),X'2F'             MOVE ZETA TO O/P BUFFER
         STM   14,2,SAVE1          SAVE REGISTERS
         ST    REGB,SAVE1+24
         CLI   ONC,X'FF'           Q ALREADY 256 OUTPUTRECORDS
         BL    *+10
         BAL   REGB,ERR4           IF YES TERMINATE COMPILATION
         DC    X'04D7'             E215
         L     EAP,WADDARI         LOAD ADD. OF CURRENT  O/P REC
         LA    REGB,DCBUT1         DCBADDRESS
         CLI   ONC,X'00'           Q FIRST OUTPUTRECORD
         BE    WRITEOB             IF YES SKIP CHECK
         CHECK ODECB               CHECK IF BEFORELAST RECORD IS
*                                  WRITTEN
WRITEOB  WRITE ODECB,SF,(REGB),(EAP)
         XI    DISP,X'04'          CHANGE ADDRESSDISPLACEMENT
         IC    REGZ,DISP
         L     EAP,ADDARI(REGZ)         COMPUTE VALID O/P BUFFERADD
         ST    EAP,WADDARI              STORE IT IN WADDARI
         LR    REGL,EAP            COMPUTE ADDRESS OF LAST BYTE IN
         A     REGL,SRCE1S         THE NEW OUTPUT AREA
         BCTR  REGL,0              AND SAVE IT
         ST    REGL,APE            IN APE
         IC    REGZ,ONC            INCREASE OUTPUTRECORDCOUNTER
         LA    REGZ,1(0,REGZ)
         STC   REGZ,ONC
         L     REGB,SAVE1+24
         LM    14,2,SAVE1
         BCR   15,REGOX                 RETURN TO CALLING SEQUENCE
         SPACE 2
*****   CIB      ******************************************************
*                   GET NEXT RECORD AND PRINTS IT WITH THE SC
*                   IF ISO CODE IS SPECIFIED A TRANSLATION IS FIRST
*                        MADE TO EBCDIC
*                   THE RECORD IS TRANSLATE AND THE RECORD END
*                        INDICATION - ZETA- IS INSERTED
         SPACE 2
CIB      STM   14,2,SAVE1          SAVE REGISTERS
         SH    REGI,SEVEN          MOVE SEVEN CHAR INFRONT
         MVC   WABEFOR(7),0(REGI)  OF WORKAREA
         TM    HCOMPMOD+1,NSRCE         Q. NOSOURCE SPECIFIED
         BO    GETREC                   YES SKIP PRINTING
         L     15,PRTRTADD              PRINT
         BALR  14,15
         ST    REGI,APRNTAR             SAVE NEW PRINT BUFFER ADDRESS
GETREC   L     REGI,INADD               DCBADDRESS
         GET   (1),WA              GET NEXT RECORD
TESTISO  TM    HCOMPMOD+1,ISO      TEST IF ISO INPUT
         BO    ISOTRANS                 YES TRANSLATE ISO TO EBCDIC
         L     REGI,APRNTAR
         TM    HCOMPMOD+1,NSRCE         Q. NOSOURCE SPECIFIED
         BO    NOPRINT                  YES- MOVE TO DUMMY PRINTAREA
         LH    REGY,SC        CONVERT  SEMICOLON  COUNTER
         CVD   REGY,DOUBLE
         UNPK  0(5,REGI),DOUBLE(8)
         MVZ   4(1,REGI),3(REGI)        MOVE OUT SC COUNTER
         MVC   8(80,REGI),WA       MOVE RECORD TO PRINTAREA
         B     *+10
NOPRINT  MVC   SAVEPRNT+8(72),WA   IF NSRCE MOVE RECORD TO DUMMY PRINT
         LM    14,2,SAVE1
         LA    REGI,WA             SET INPUT POINTER
         TR    WA(72),TRLTABLE     TRANSLATE RECORD
         MVI   72(REGI),X'2F'      MOVE RECORD END IDENTIFIER
         BCR   15,REGIX            RETURN
ISOTRANS ST    REGB,SAVE1+24
         LA    REGB,WA                  GET START OF WA
         LA    REGY,79(0,REGB)          GET END OF WA
LOOP     CLI   0(REGB),X'4C'       )
         BE    IRPAR
         CLI   0(REGB),X'7B'       =
         BE    IEQUAL
         CLI   0(REGB),X'7C'       '
         BE    IAPOST
         CLI   0(REGB),X'6C'       (
         BE    ILPAR
         CLI   0(REGB),X'50'       +
         BNE   LOOPEND
         MVI   0(REGB),X'4E'       +
         B     LOOPEND
IRPAR    MVI   0(REGB),X'5D'       )
         B     LOOPEND
IEQUAL   MVI   0(REGB),X'7E'       =
         B     LOOPEND
IAPOST   MVI   0(REGB),X'7D'       '
         B     LOOPEND
ILPAR    MVI   0(REGB),X'4D'       (
LOOPEND  LA    REGB,1(0,REGB)
         CR    REGB,REGY                Q. ALL CHAR. CHECKE IN WA
         BNH   LOOP                     NO- CHECK NEXT
         L     REGB,SAVE1+24            YES RETURN
          B     TESTISO+8
         SPACE 2
*****   WITAB    ******************************************************
*                   CONTAINS ALL DELIMITERS, EACH FOLLOWED BY
*                        3 BYTES OF INFORMATION, 2 CHARACTERISTICS
*                   AND A DISPLACEMENT TO DELPRGTB
         SPACE 2
W1TAB    DS    0CL256
B1       DC    X'020304000006000004'
*                  SLASH    STRING
B2       DC    X'03434E1C000848451D000C4E51220000'
*                   DO        IF        OR
B3       DC    X'04444D43000010454E51000014404D432300004D4E53200000'
*                   END                     AND         NOT
B4       DC    X'095144404BC212185253444F1900005347444D1E0008444B52441F$
               0008464E534E17000C5351544407001C4B445252110000424E4344'
*                   REAL          STEP          THEN         ELSE
*                   GOTO          TRUE          LESS         CODE
         DC    X'000020484C4F4B210000'
*                       IMPL
*                       IMPL
B5       DC    X'0A414446484D000024544D53484B1A00004051514058CA16285540$
               4B544400002C4B4041444BCA18305647484B441B000045404B5244'
*                   BEGIN           UNTIL          ARRAY            VA
*              LUE          LABEL           WHILE           FALSE
         DC    X'00001C4F4E564451050000445054404B10000044'
*                       POWER           EQUAL
         DC    X'50544855240000'
*                   EQUIV
B6       DC    X'02525648534247CA1C34525351484D46CB1030'
*                   SWITCH            STRING
B7       DC    X'05484D5344464451C21118414E4E4B44404DC21318424E4C4C444D$
               530000384D4E534B44525215000046514440534451120000'
*                   INTEGER             BOOLEAN              COMMENT
*                       NOTLESS             GREATER
B8       DC    X'014D4E53445054404B130000'
*                   NOTEQUAL
B9       DC    X'014F514E424443545144CAD03C'
*                   PROCEDURE
B10      DC    X'014D4E5346514440534451140000'
*                   NOTGREATER
         DS    0F
         SPACE 2
*****   LITAB    ******************************************************
*                   USED TO SET REFERENCE IN W1TAB TO STRING
*                        DELIMITERS WITH A PATICULARY LENGTH
         SPACE 2
L1TAB    DC    A(B1)
         DC    A(B2)
         DC    A(B3)
         DC    A(B4)
         DC    A(B5)
         DC    A(B6)
         DC    A(B7)
         DC    A(B8)
         DC    A(B9)
         DC    A(B10)
         SPACE 2
*****   DELPRGTB ******************************************************
*                   BRANCH ADDRESS TABLE USED AFTER A DELIMITER
*                        HAS BEEN FOUND
         SPACE 2
DELPRGTB DS    0CL68
         DC    A(NORMAL)
         DC    A(STRING)
         DC    A(TED)
         DC    A(GIF)
         DC    A(END)
         DC    A(FOR)
         DC    A(TYPE)
         DC    A(BOLCON)
         DC    A(CODE)
         DC    A(BEGIN)
         DC    A(ARRAY)
         DC    A(VALUE)
         DC    A(SPEC)
         DC    A(SWITCH)
         DC    A(COM)
         DC    A(PROCEDUR)
         DC    A(TYPEARRY)
         DC    A(TYPPROC)
         SPACE 2
*****   DELTMIT  ******************************************************
*                   TWO APOSTROPHES HAVE BEEN FOUND
*                   IT IS CHECKED THAT THE LENGTH IS NOT ZERO OR EXCEED
*                        THE LIMIT FOR A DELIMITER (10 CHARACTERS)
*                   REGM POINTS TO THE FIRST AND REGI TO THE LAST
*                        APOSTROPHE
*                   THE LENGTH IS USED TO GET A DISPLACEMENT FROM THE
*                        LITAB FOR A SECTION IN THE WITAB
*                   A    SECTION IN THE WITAR CONTAINS ALL DELIMITERS
*                        OF THE SAME LENGTH
*                   THE FIRST BYTE IN EACH SECTION SAYS HOW MANY
*                        ENTRIES THERE ARE IN THE SECTION
*                        THEREAFTER A DELIMITER PLUS 3 BYTES OF
*                        INTERNAL CODE MAKES A SUBSECTION
*                        THE FIRST 2 BYTES OF THE INTERNAL CODE IS
*                        CHARECTERISTCS FOR THE DELIMITER
*                        THE THIRD BYTE IS A DISPLACEMENT TO THE
*                        DELPRGTB, WHERE THE ADDRESS IS PICKED UP
*                        TO THE PROGRAM TO HANDLE THE DELIMITER
*                   A CHECK IS MADE WHEN A DILIMITER IS FOUND IF IF IS
*                        THE FIRST FOUND IN THE PROGRAM - THE EXIT IS
*                        THEN TO STARTDEL. THE TEST IS ON BITS2 X'20'
*                   IF NO DELIMITER IS FOUND THE EXIT IS TO THE EROUT
*                        PROGRAM
*                   FBYTE- SWITCH
*                        THE FBYTE IS FF IF AN APOSTROPHE IS FOUND IN
*                        THE COMMENT PROGRAM
*                        THE FBYTE IS F0 IF AN APOSTROPHE IS FOUND IN
*                        THE TYPE PROGRAM INSTEAD OF THE FIRST
*                        CHARACTER OF THE NAME
*                        OTHERWISE IT IS 00
         SPACE 2
DELIMIT  SR    REGY,REGY
         SR    REGL,REGL
         LR    REGL,REGI
         BCTR  REGL,0
         SR    REGL,REGM           COMPUTE LENGTH L
         BP    *+10                     Q. GREATER THAN ZERO
         BAL   REGB,ERR6
         DC    X'0A0C'        E12 DELETE FIRST APOSTROPHE
         C     REGL,KOPOOL+44      Q. LIMIT EXEEDED ALLREADY
         BH    EROUT               BRANCH TO ERRORROUTINE
         BCTR  REGL,0
         LA    REGX,L1TAB
         TM    FBYTE,X'FF'              TEST FBYTE
         BO    COMSPEC
         BM    TYPESPEC
         SLA   REGL,2(0)               START OF LOOKUP STRING
         L     REGX,0(REGL,REGX)
         IC    REGY,0(0,REGX)      NUMBER OF ENTRIES IN THIS SECTION
         LA    REGX,1(0,REGX)      AND ADDRESS OF FIRST WORDENTRY
         SRA   REGL,2(0)
CLC      EX    REGL,COMPARE             Q. DELIMITER FOUND
         BNE   NOTEQUAL                    NO- TRY NEXT IN SAME SECTION
         IC    REGZ,3(REGL,REGX)
         TM    BITS2,X'20'              Q. PROGRAM STARTED YET
         BO    *+8                      YES
         B     STARTDEL                 NO- CHECK FOR CORRECT START
         L     REGB,DELPRGTB(REGZ)      BRANCH TO APPROPRIATE SUBPGM
         BCR   15,REGB                  DEPENDING ON DISP IN WITAB
NOTEQUAL LA    REGX,4(REGL,REGX)   GET  NEXT DELIMITER
         BCT   REGY,CLC                 Q. AMY DELIMITERS LEFT TO CHECK
         BC    15,EROUT            BRANCH TO ERRORROUTINE
         CNOP  0,4
COMPARE  CLC   1(1,REGM),0(REGX)
         SPACE 2
*****   EROUT    ******************************************************
*                   CHECKS ALL SECTIONS OF THE WITAB FOR AN EQUAL
*                   DELIMITER TO THE ONE IN I/P, DISREGARDING LENGTH
*                   IF NO EQUAL FOUND E14 IS GENERATED AND THE FIRST
*                   APOSTROPHE IS DELETED. EXIT IS THEN TO TEST
*                   IF AN EQUAL IS FOUND E13 IS FENERATED AND AN BRANCH
*                   IS TAKEN TO THE APPROPRIATE SUBPROGRAM
         SPACE 2
EROUT    TM    FBYTE,X'FF'
         BM    TYPESPEC                 INVALID IDENTIFIER
         BO    COMCEE2                 COMMENT                   A32949
EROUTOK  LA    REGZ,10       GO THROUGH ALL POSSIBILITIES
         SR    REGY,REGY
         LA    REGL,0                   INITILIZE REGL= 0
EROUT2   SLA   REGL,2(0)
         LA    REGX,L1TAB
         L     REGX,0(REGL,REGX)        GET SECTION IN WITAB
         IC    REGY,0(0,REGX)          NUMBER OF ENTRIES IN STRING
         LA    REGX,1(0,REGX)          FIRST ENTRY
         SRA   REGL,2(0)
CLCERR   EX    REGL,COMPARE             Q. DELIMITER FOUND
         BNE   EROUT3                   NO
         TM    BITS2,STARTBIT           Q. PROGRAM STARTED YET
         BZ    STARTDEL                 NO- CHECK FOR A CORRECT START
         BAL   REGB,ERR13
         DC    X'000D'             E13
         LA    REGI,1(REGL,REGM)  SET REGI TO ONE BEYOND DELIMITER
         IC    REGZ,3(REGL,REGX)       GET DISPLACEMENT OF PROGRAM
         L     REGB,DELPRGTB(REGZ)     IN DELPRGTB
         BCR   15,REGB                 BRANCH TO PROGRAM
EROUT3   LA    REGX,4(REGL,REGX)   NO GET NEXT DELIMITER
         BCT   REGY,CLCERR             Q ALL DEL IN STRING CHECKED
         LA    REGL,1(0,REGL)          YES-GET NEXT STRING
         BCT   REGZ,EROUT2
         TM    BITS2,X'20'         Q. PROGRAM STARTED YET
         BZ    TESTLOOP            NO RETURN TO MAINLOOP SCANNING
         BAL   REGB,ERR2C
         DC    X'0A0E'        E14
         LA    REGI,1(0,REGM)          GET NEXT CHAR
         BCR   15,RET                  RETURN
         SPACE 2
*****   TYPESPEC ******************************************************
*                   'REAL'' OR 'INTEGER'' OR 'BOOLEAN'' HAS BEEN FOUND
*                   THE ONLY VALID DELIMITERS ARE AT THIS POINT
*                   ARRAY OR PROCEDURE
         SPACE 2
TYPESPEC CLC   1(9,REGM),B9+1      Q. TYPE PROCEDURE
         BE    TYPPROC                  YES
         TM    BITS2,X'20'              Q. PROGRAM STARTED YET
         BZ    ERR8                     NO- GENERATE E11
         CLC   1(5,REGM),B5+17     Q. TYPE ARRAY
         BE    TYPEARRY                 YES
*                                       INVALID IDENTIFIER HAS BEEN
*                                       FOUND GO TO IER SPEC
TPSPECER TM    BITS1,X'40'              Q. SPECIFICATION
         BO    *+12
         LA    REGH,TYPEDAFI            NO- SET RETURN TO TYPE PGM.
         B     IERSPEC
         LA    REGH,IDCHECK             YES- SET RETURN TO IDCHECK
         B     IERSPEC
         SPACE 2
*****   COMSPEC  ******
*                   TWO APOSTROPHES HAVE BEEN FOUND IN A COMMENT
*                   VALID DELIMITERS TO END A COMMENT ARE
*                   END OR ELSE
         SPACE 2
COMSPEC  LA    REGX,B4+22      Q.COMMENT ENDING WITH ELSE
         CLC   1(4,REGM),B4+22
         BNE   *+16                     NO
         C     REGL,KOPOOL+12      CHECK CORRECT LENGTH
         BE    TED
         B     ENTRAPR         RETURN TO FIND ANOTHER APOSTROPHE   4762
         CLC   1(3,REGM),B3+1           Q. COMMENT ENDED WITH END
         BNE   ENTRAPR         RETURN TO FIND ANOTHER APOSTROPHE   4762
         C     REGL,KOPOOL+8       CHECK CORRECT LENGTH
         BE    END                 END
         B     ENTRAPR         RETURN TO FIND ANOTHER APOSTROPHE   4762
         SPACE 2
*****   STARTDEL ******************************************************
*                   THE ONLY VALID DELIMITERS TO START A PROGRAM IS
*                   BEGIN OR IF PRECOMPILED PROCEDURE IS SPECIFIED
*                   PROCEDURE OR TYPE PROCEDURE
         SPACE 2
STARTDEL STC   REGZ,BCHAR               GET DELIMITERS CHARACTERISTIC
*                                       FROM WITAB
         CLI   BCHAR,X'24'              Q. BEGIN FOUND
         BE    FIRSTBEG                 YES
         TM    HCOMPMOD,PROC       Q. PRECOMPIELED SPECIFIED
         BZ    ERR8                     NO- GENERATE E11
         CLI   BCHAR,X'3C'         Q. FOUND WORD IS PROCEDURE
         BNE   TYPEPREC-8          NO
         B     PROCEDUR                 YES
         CLI   BCHAR,X'18'         Q. TYPE FOUND
         BNE   ERR8                NO
TYPEPREC LA    REGI,1(0,REGI)           LOOK FOR APOSTROPHE- TYPE PROC
         CLI   0(REGI),X'2E'            Q. APOSTROPHE FOUND
         BNE   *+10
         BCTR  REGI,0                   YES- DECREASE TO LET TYPE PGM
         B     TYPE                     FIND THE APOSTROPHE AGAIN
         CLI   0(REGI),X'2B'            Q. BLANK
         BE    TYPEPREC
         CLI   0(REGI),X'2F'            Q. ZETA
         BNE   ERR8                     NEITHER- GENERATE E11
         ST    REGX,SAVE1+20            CHANGE I/P AND LOOK AGAIN
         BAL   REGIX,CIB
         L     REGX,SAVE1+20
         B     TYPEPREC+4
         SPACE 2
         SPACE 2
*****   NORMAL   ******************************************************
*                   INSERTS IN THE O/P THE INTERNAL CODE FROM WITAB
         SPACE 2
NORMAL   BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         LA    REGX,1(REGL,REGX)   COMPUTE ADDRESS OF CODE
         MVC   0(1,EAP),0(REGX)    MOVE CODE TO OUTPUTBUFFER
         LA    EAP,1(0,EAP)        INCREASE OUTPUT- AND
         LA    REGI,1(0,REGI)      INPUTPOINTERS
         BCR   15,RET
         SPACE 2
*****   BOLCON   ******************************************************
*                   MOVES OUT SIX BYTES OF INTERNAL CODE FOR
*                   FALSE OR TRUE
         SPACE 2
BOLCON   LA    REG0,6(0,EAP)
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         MVC   0(5,EAP),INT        TRANSFER FIRST PART OF INTERNAL NAME
         LA    REGN,1(REGL,REGX)   AND
         MVC   5(1,EAP),0(REGN)    LAST PART
         LA    EAP,6(0,EAP)        INCREASE OUTPUT-
         LA    REGI,1(0,REGI)      AND INPUTPOINTERS
         BCR   15,RET
         SPACE 2
*****   GIF      ******************************************************
*                   TRANSFERS INTERNAL CODEBYTE AND EXITS
*                   TO THE STATEMENT PROGRAM TO CHECK IF A PROCEDURE
*                   BOBY HAS STARTED
         SPACE 2
GIF      BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         LA    REGN,1(REGL,REGX)   TRANSFER INTERNAL CODE
         MVC   0(1,EAP),0(REGN)
         LA    EAP,1(0,EAP)        INCREASE OUTPUT-
         LA    REGI,1(0,REGI)      AND INPUTPOINTER
         BC    15,STATE            BRANCH TO STATEMENTPROGRAM
         SPACE 2
*****   TED      ******************************************************
*                   TRANSFERS INTERNAL CODE
*                   SETS POSSIBLE LABEL POINTERS
         SPACE 2
TED      TM    BITS2,ENDBIT      Q. ELSE ENDED FINAL END COMMENT
         BO    ERR9              YES
         BAL   REGOX,COB
         LA    REGX,1(REGL,REGX)
         MVC   0(1,EAP),0(REGX)         TRANSFER INTERNAL CODE
         ST    EAP,OPIN                 SET LABEL POINTERS
         MVC   OPIN+4(1),ONC
         MVC   OPINCHAR(1),0(REGX)
         LA    EAP,1(0,EAP)
         ST    EAP,LAPIN
         LA    REGI,1(0,REGI)
         NI    BITS2,X'FE'         SET ENDELSE BIT TO ZERO
         BCR   15,RET
         SPACE 2
*****   BEGIN    ******************************************************
*                   TEST IF PROC IN STACK
*                   TRANSFERS 'BEGIN' TO OUTPUT AND STACK
*                   SETS OPIN, OPIN+4, LAPIN, BEGBIT
*                   BEGBIT IS USED TO DISTINGUISH BETWEEN COMPOUND
*                        BEGIN AND BLOCK BEGIN. IF A DECLARATION IS
*                        FOUND WHEN THE BEGBIT IS ON IT'S A BLOCK BEGIN
*                        THE BEGBIT IS TURNED OF BY THE STATEMENT
*                        PROGRAM AND THE BEG1 PROGRAM
         SPACE 2
BEGIN    L     REGY,SP
         CLI   0(REGY),X'0C'            Q. PROC IN STACK
         BE    BEGPROC             IF YES BRANCH TO PROC PROCESSING
         LA    REG0,4(0,EAP)
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         MVI   0(EAP),X'0C'   TRANSFER BEGIN TO O/P
         MVI   OPINCHAR,X'0C'           SET LABELSAVE
         ST    EAP,OPIN            NOTE ITS POSITION IN OPIN AND
         MVC   OPIN+4(1),ONC       THE NUMBER OF THE OUTPUTBUFFER
         LA    EAP,1(0,EAP)        INCREASE OUTPUTPOINTER
         ST    EAP,LAPIN           NOTE WHERE LABEL MAY START
         OI    BITS1,X'80'         BEGBIT.= 1
         LA    REGY,1(0,REGY)     INCREASE STACKPOINTER
         C     REGY,ATOPSTAK
         BL    *+10
         BAL   REGB,ERR4           STACK OVERFLOW
         DC    X'0414'             E20
         MVI   0(REGY),X'08'            PUT BEGIN IN STACK
         ST    REGY,SP
         LA    REGI,1(0,REGI)
         B     TESTLOOP
         SPACE 2
*****   BEGPROC  ******************************************************
*                   PROCEDURE- SPECIFICATIONS- BEGIN HAS BEEN FOUND
*                   PROC BOBY IS TO COME. PROC IS CHANGED TO PROC*
*                   ITS CHECKED THAT ALL PARAMETERS HAVE BEEN
*                        SPECIFIED
*                   THE RETURN IS TO TEST VIA THE BEGIN PROGRAM
         SPACE 2
BEGPROC  MVI   0(REGY),X'10'       CONVERT PROC INTO PROC*
         NI    BITS1,X'BF'         PROBIT=0
         CLI   PZ,X'00'            TEST IF ALL PARAMETERS SPECIFIED
         BE    BEGPROC-8                YES
         BAL   REGOX,ERROR10            NO- GENERATE E11
         B     BEGPROC-8
         SPACE 2
*****   FIRSTBEG ******************************************************
*                   THE FIRST BEGIN IS CONSIDERED AS A BLOCK BEGIN
*                   THE START BIT IS TURNED OFF
*                   THE BEG1 PROGRAM IS JOINED
*                   IF PRECOMPILED PROCEDURE HAS BEEN SPECIFID E42 IS
*                        GIVEN AS A WARNING AND THE BEGIN IS
*                        DISREGARDED
         SPACE 2
FIRSTBEG TM    HCOMPMOD,PROC       Q. PRECOMPIELED PROCEDURE
         BZ    *+18
         BAL   REGB,ERR7           YES  GIVE WARNING MESSAGE
         DC    X'042A'
         LA    REGI,1(0,REGI)      DISREGARD THE BEGIN
         B     TESTLOOP
         OI    BITS2,X'20'         NO  TURN STARTBIT OFF
         LA    REGX,TESTLOOP            MAKE RETURN FROM BEGI BE TEST
         LA    REGI,1(0,REGI)
         B     BEG1FRST       FIRST BEGIN =BLOCK BEGIN
         SPACE 2
*****   BEGI     ******************************************************
*                   BLOCKBEGIN PROGRAM
*                   CHANGES BEGIN TO BETA IN STACK AND OUTPUT
*                   INCREASES ITAB GROUP NR. AND PROGRAM BLOCK NR.
*                   ENTRIES ARE MADE IN.
*                        GROUPTABEL
*                             SORROUNDING BLOCKS IG. NR
*                        PBTAB1
*                             SURROUNDING PBN
*                        SCTAB - CURRENTSC COUNTER
*                        ITAB
*                             ADDRESSES OF SORROUNDIN BLOCK AND
*                             IG HEADENTRIES, NEW PBN AND IGN.
*                   LPBP (ADDRESS OF CURRENT PROGRAM BLOCK HEAD ENTRY)
*                        AND
*                   LIGP (ADDRESS OF CURRENT ITAB GROUP HEAD ENTRY)
*                        ARE UPDATED
*                   PUTS BETA + NEW PBN AND IGN TO OUTPUT REC.
         SPACE 2
BEG1     BCTR  EAP,0
         NI    BITS1,BEGOFF        BEGBIT 0
         CLI   0(EAP),X'0C'          Q. BEGIN IN O/P
         BNE   ERROR21                  NO- DECLARATION INCORRECT PLACE
BEG1FRST MVI   0(EAP),X'0D'             MOVE BETA TO O/P
         L     REGY,SP             AND
         MVI   0(REGY),X'04'       STACK
         SR    REGB,REGB
         LH    REGB,IGC
         LA    REGB,1(0,REGB)           INCREASE ITABGROUPNUMBER
         STH   REGB,IGC
         AR    REGB,REGB                ENTRY IS TO GO INTO
         AH    REGB,IGC                 A(GT)+3*(IGC)
         A     REGB,AGT
         L     REG7,LIGP
         MVC   0(2,REGB),8(REG7)        ENTRY INTO GROUPTABLE
         MVI   2(REGB),X'00'
         NI    0(REGB),X'7F'            CLEAR POSSIBLE PHI IND.
         CLI   PBC,X'FF'                Q. MORE THAN 255 BLOCKS
         BNE   *+10
         BAL   REGB,ERR4
         DC    X'0416'             E22
         IC    REGZ,PBC                 INCREASE
         LA    REGZ,1(0,REGZ)      PROGRAMBLOCKNUMBER
         STC   REGZ,PBC
         L     REG7,LPBP
         LA    REGB,PBTAB1
         AR    REGB,REGZ
         MVC   0(1,REGB),10(REG7)       ENTRY INTO PROGRAMBLOCKTABLE
         STC   REGZ,1(0,EAP)            TRANSFER PBN TO O/P
         AR    REGZ,REGZ           MAKE ENTRY OF CURRENT
         LA    REGB,SCTAB(REGZ)    SC COUNTER IN SCTAB
         MVC   0(2,REGB),SC
         MVC   2(2,EAP),IGC        IGN IN OUTPUT BUFFER
         LA    EAP,4(0,EAP)
         ST    EAP,LAPIN                SET LABEL POINTERS
         L     REGY,AITL                MAKE BLOCK HEAD IN ITAB
         MVC   0(4,REGY),LIGP
         MVC   4(4,REGY),LPBP
         MVC   8(2,REGY),IGC
         MVC   10(1,REGY),PBC
         ST    REGY,LPBP                UPDATE LIGP AND LPBP
         ST    REGY,LIGP
         BAL   REG12,ITABCLEA           CHECK AND CLEAR NEXT ITABENTRY
         BCR   15,REGX
         SPACE 2
*****   END      ******************************************************
*                   ACTION DEPENDS ON WHAT IS IN THE STACK
*                   TURNS IN ALL CASES OFF THE DELTABIT AND THE
*                        END ELSE BIT
*                   GENERAL RETURN POINT IS CSPEND IF RETURN
*                        ADDRESS - IN REGE- IS NOT CHANGED
*                   FINAL RETURN IS TO TEST VIA SEMCO OR COMMENT
*                        PROGRAM
*                   PROC** IN STACK ACTIVATES PBLOCKEND AND RETURNS
*                        TO END TO INSPECT THE STACK AGAIN
         SPACE 2
END      NI    BITS1,X'DF'         DELTABIT.=0
         TM    BITS2,ENDBIT      Q. END FINISHED FINAL END COMMENT
         BO    ERR9              YES
         NI    BITS2,X'FE'         SET ENDELSE BIT TO ZERO
CSPEND   LA    REGE,*             RETURN FOR PBLCKEND, FOREND
         L     REGY,SP
         IC    REGZ,0(0,REGY)      BRANCH
         L     REGB,PROG1(REGZ)    DEPENDING ON TOPBYTE
         BCR   15,REGB             OF THE STACK
         CNOP  0,4
PROG1    DC    A(ERR8)                  E11 IF ALPHA
         DC    A(BLOCKEND)                     BETA
         DC    A(COMPDEND)                     BEGIN
         DC    A(PREND)                        PROC
         DC    A(STAREND)                    PROC*
         DC    A(PBLCKEND)
         DC    A(FOREND)                FOR
         SPACE 2
*****   STAREND  ******************************************************
*                   PROC* HAS ENDED
*                        ACTIVATES THE PBLOCKEND PROGRAM AND RETURNS
*                        AFTERWARDS TO TEST VIA COMMENT PROGRAM
         SPACE 2
STAREND  OI    BITS1,X'20'         DELTABIT= 1
         LA    REGE,COMMEND        LOAD ADDRESS OF ENDENTRY INTO COM-
*                                  MENTPROGRAM
         BC    15,PBLCKEND
         SPACE 2
*****   PREND    ******************************************************
*                   PROC  HAS ENDED
*                        CHECKS IF ALL PARAMETERS SPECIFIED
*                        TURNS OFF THE PROBIT
*                   A PROC THAT ENDS WITH 'END' IS NOT CORRECTED,
*                        THEREFOR THE STACK IS AGAIN INSPECTED AFTER
*                        THE PBLOCKEND PROGRAM HAS BEEN ACTIVATED
         SPACE 2
PREND    NI    BITS1,X'BF'         PROBIT.=0
         CLI   PZ,X'00'            ALL PARAMETERS SPECIFIED
         BE    PBLCKEND                 YES- ACTIVATE PBLCKEND
         BAL   REGOX,ERROR10            NO- GENERATE E10 FIRST
         B     PBLCKEND
         SPACE 2
*****   COMPDEND ******************************************************
*                   A COMPOUND STATMENT HAS ENDED
*                        TRANSFERS END '2C' TO OUTPUT AND RELEASES
*                        BEGIN IN STACK
*                   THEN- IT CHECKS IF THE END OF THIS COMPOUND
*                        STATEMENT INDICATETS THE END OF ANY
*                        FORSTATMENT(S) OR PROC**.
*                        THIS IS DONE WITH BITS2 X'01' AND THE
*                        COMMENT PROGRAM
*                        IF THE END IS FOLLOWED BY A ., OR 'END' THE
*                        STACK IS INSPECTED AGAIN
*                        IF THE END IS FOLLOWED BY AN 'ELSE' THE
*                        COUMPOUND STATMENT ITSELF IS ALL THAT HAS
*                        ENDED AT THIS POINT
         SPACE 2
COMPDEND BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'2C'        TRANSFER END TO OUTPUTBUFFER
         LA    EAP,1(0,EAP)        INCREASE OUTPUTPOINTER
         L     REGY,SP             RELEASE BEGIN IN
         BCTR  REGY,0              STACK
         ST    REGY,SP
COMPENDI CLI   0(REGY),X'00'       Q. ALPHA IN STACK
         BE    PGMEND                   YES- LOGICAL PROGRAM END
         CLI   0(REGY),X'14'       Q. PROC**
         BL    COMMEND             BRANCH TO COM-PROGRAM,END-ENTRY
*                                  FOR BEGIN OR BETA OR PROC* IN STACK
         OI    BITS2,X'01'         SET END-ELSE BIT
         B     COMMEND                  CHECK HOW ENDCOMMENT ENDS
*                                  ENDCOMMENT ENDED WITH A SEMICOLON
COMPEND2 NI    BITS2,X'FE'         RESET END ELSE BIT
         L     REGY,SP                  INSPECT STACK AGAIN
         CLI   0(REGY),X'14'            Q. PROC** OR FOR IN STACK
         BE    *+12                     PROC**
         LA    REGE,COMPEND4            FOR  GOTO FORENS AND THEN
         B     FOREND                   TEST AGAIN - COMPEND4
COMPEND3 OI    BITS1,X'20'              PROC**- SET DELTABIT
         LA    REGE,SEMCO               RETURN FROM PBLCKEND
         B     PBLCKEND                 BLOCKEND FOR PROC**
COMPEND4 CLI   0(REGY),X'14'            Q. PROC**,FOR OR S.E.
         BE    COMPEND3                 PROC**
         BH    FOREND                   FOR
         B     SEMCO                    SOMETHING ELSE
         SPACE 2
*****   BLOCKEND ******************************************************
*                   A BETA BLOCK HAS ENDED
*                        THE RETURN AFTER THE PBLOCKEND PROGRAM IS
*                        TO THE COMPENDI TO CHECK IF SOME MORE
*                        ITAB GROUP SHOULD END AT THIS POINT
         SPACE 2
BLOCKEND BAL   REGE,PBLCKEND       EXECUTE PROGRAMBLOCKEND-PROGRAM
         B     COMPENDI
         SPACE 2
*****   FOREND   ******************************************************
*                   CORRECTS THE LIGP POINTER
*                   INSERTS A CONTINUATION LINE IN ITAB IF THE
*                        FORSTATMENT CONTAINED ANY LABEL
*                   IF THE FORSTATMENT DID NOT CONTAIN ANY DEKLARATIONS
*                        THE PREVIOUSC CREATED FOR HEADENTRY IS
*                        ERASED
*                   IF ONE CONTINUATION LINE IS CREATED, FOLLOWING
*                        ENCLOSING FORSTATEMENTS WILL OVERLAY THE
*                        FIRST CONTINUATION LINE, IF LABELS OR NOT
*                   ETA AND SURROVNDING ITABGROUPS IG NR. IS MOVED
*                        TO THE OUTPUT
*                   FOR IS RELEASED IN THE STACK
*                   ENTERED FROM SEMCO
*                                END
*                   EXITS TO     END
*                                COMPEND4
*                                STACKTST (IN SEMCO)
         SPACE 2
FOREND   L     REGB,LIGP
         MVC   LIGP(4),0(REGB)     GET PREVIOUS LIGP HEAD
         L     REGY,AITL           CURRENT ENTRY
         S     REGY,KOPOOL+44           MINUS ELEVEN
         TM    6(REGY),X'FF'       Q. IS CONTINUATION LINE NEEDED
         BZ    EMPTYFOR            NO
         BO    *+8                 OVERLAY PREVIOUS CONT. LINE
         LA    REGY,11(0,REGY)     CREATE NEW CONT. LINE
         L     REGB,LIGP
         MVC   8(2,REGY),8(REGB)        COPY IG NUMBER
         MVI   6(REGY),X'FF'       CONTINUATION LINE INDICATOR
         NI    8(REGY),X'7F'            CLEAR POSSIBLE PHI INDICATOR
         MVI   5(REGY),X'2B'
         BAL   REG12,ITABCLEA+4    CLEA NEXT ENTRY
         B     *+8
EMPTYFOR BAL   REG12,ITABCLEA+8    CLEAR FORHEAD FOR EMPTY FORGROUP
         LA    REG0,3(0,EAP)
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         MVI   0(EAP),X'2B'        INSERT ETA
         L     REGB,LIGP
         MVC   1(2,EAP),8(REGB)    AND CURRENT  IGN  IN OUTPUTBUFFER
         NI    1(EAP),X'7F'        CLEAR EVENTUALLY PHI
         LA    EAP,3(0,EAP)
         L     REGY,SP             RELEASE FOR IN STACK
         BCTR  REGY,0
         ST    REGY,SP
         BCR   15,REGF             RETURN
         SPACE 2
*****   PBLCKEND ******************************************************
*                   ERASES EMPTY CONTINUATION LINES
*                   WRITES OUT THE PROGRAMBLOCK TO SYSUT 3
*                        LENGTH IS CALCULATED AND SAVED IN ITABLEN
*                        AND STORED IN THE FIRST TWO BYTES OF THE
*                        ITAB RECORD
*                   THE SC IS PICKED UP FROM SCTAB AND ENTERED IN BYTES
*                        6 AND 7
*                        THE BLOCK IS MOVED TO THE ITABBUFFER WHERE
*                        FROM IT IS WRITTEN OUT.
*                   THE SURROUNDING BLOCKS NEW DECLARATIONS WILL
*                   BE OVERLAYING THE OUTWRITTEN RECORD
*                   AITL WILL POINT TO THE HEADENTRY'S PLACE OF THE
*                       BLOCK WHICH NOW WAS WRITTEN OUT
*                   LPBP TO THE SURROUNDING BLOCKS HEADENTRY
*                   LIGP TO THE SURROUNDING ITABGROUPS HEADENTRY
*                   AITL, LPBP AND LIGP WILL BE MODIFIED ACCORDINLY
*                   EPSILON, THE SURROUNDING BLOCKS PBN AND IGN WILL
*                        BE PUT TO THE OUTPUT
*                   THE BLOCK INDICATOR IN THE STACK WILL BE RELEASED
*                   IF STACK NOW IS EMPTY - ALPHA IN STACK - PGMEND
*                        WILL SET THE END BIT AND CHANGE END OF DATA
*                        EXIT TO EODADIN. THIS WILL CAUSE THE COMMENT
*                        PROGRAM TO CHECK FOR AN CORRECT ENDCOMMENT
*                        BUT NOTHING MORE IS TO BE PROCESSED
*                   FOR PROGRAM BLOCK 0, IF ANY, THE BLOCK WILL ONLY
*                        BE WRITTEN OUT AND NO FURTHER ACTIONS TAKEN
*                   ENTERED FROM END (BETA, PROC* )
*                                SEMCO (PROC, PROC**)
*                   EXITS  TO    COMMEND  (NORMAL)
*                                COMPEND4 ( PROC OR PROC** FOLLOWED BY
*                                          END)
*                                TERMINATION (NOPBN0)
         SPACE 2
PBLCKEND L     REGY,AITL
         S     REGY,KOPOOL+44           SUBTRACT 11 TO EARSE
         CLI   6(REGY),X'00'       EMPTY
         BE    *-8                      CONTINUATION
         LA    REGY,11(0,REGY)
WRTITAB  S     REGY,LPBP            COMPUTE LENGTH OFITABSECTION
         ST    REGY,ITABLEN
         C     REGY,TWOK                Q. ITAB SECTION TOO LONG
         BL    *+10
         BAL   REGB,ERR4
         DC    X'0426'        E38  MORE THAN 184 IDENTIFIERS
         MVC   AITL(4),LPBP             UPDATE AITL
         L     REGB,LPBP
         MVC   LIGP(4),0(REGB)          UPDATE LIGP
         MVC   LPBP(4),4(REGB)         UPDATE LPBP
         MVC   0(2,REGB),ITABLEN+2      INSERT LENGTH IN HEADENTRY
         MVI   5(REGB),X'2B'
         STM   14,3,SAVE1          SAVE REGISTERS
         SR    REGZ,REGZ
         IC    REGZ,10(0,REGB)          GET CORRENT PBN
         AR    REGZ,REGZ           INSERT SC AT BLOCKSTART
         LA    REG7,SCTAB(REGZ)    IN HEADING
         MVC   6(2,REGB),0(REG7)
         TM    BITS2,X'08'             IS IT PB0                 A28230
         BC    8,*+12                  NO                        A28230
         MVI   6(REGB),X'00'           CORRECT SC                A28230
         MVI   7(REGB),X'00'                FOR PB0              A28230
         TM    BITS3,FRSITB             Q. FIRST BLOCK TO BE WRITEN
         BZ    WRT1                     YES- DO NOT CHECK
         STM   14,15,ERRSAVE            CHECK PREVIOUS WRITE
         CHECK ITABC
         LM    14,15,ERRSAVE
WRT      L     REG7,AITABBUF       ADDRESS OF BUFFER
COMPARE1 C     REGY,D256                Q. MORE THAN 256 BYTES TO MOVE
         BL    EX1                      NO MOVE ALL AT ONCE
         MVC   0(256,REG7),0(REGB)      YES- MOVE A SECTION OF 256
         LA    REGB,256(0,REGB)         BYTES AT A TIME
         LA    REG7,256(0,REG7)
         S     REGY,D256
         C     REGY,D256                Q. STILL MORE THAN 256 LEFT
         BH    COMPARE1+8               YES MOVE NEXT SECTION
EX1      EX    REGY,MOVE4               MOVE A SECTION OF LESS THAN 256
         LA    EAP,0(REGY,REG7)
         L     REG7,AITABBUF          LOAD ADD. OF ITABBUFFER
         L     REGY,UT3ADD                        DCB
         L     REGL,ITABLEN                       LENGTH
        WRITE ITABC,SF,(REGY),(REG7),(REGL)
         LM    14,3,SAVE1
         TM    BITS2,X'08'              Q. PB0 WAS WRITTEN
         BCR   1,REGE              BRANCH BACK IF TERBIT ON
         L     REGB,AITL                CLEAR
         MVI   0(REGB),X'00'            NEXT
         MVC   1(10,REGB),0(REGB)       ITABENTRY
         LA    REG0,4(0,EAP)
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         MVI   0(EAP),X'2A'             INSERT EPSILON
         L     REGB,LPBP
         MVC   1(1,EAP),10(REGB)                         PBN
         L     REGB,LIGP
         MVC   2(2,EAP),8(REGB)                          IGN
         NI    2(EAP),X'7F'        CLEAR FIRST BIT OF IGN (PHI IND)
         LA    EAP,4(0,EAP)
         L     REGY,SP       RELEASE
         BCTR  REGY,0        TOPBYTE
         ST    REGY,SP       IN STACK
         TM    BITS1,X'01'        Q. TERMINATION BIT ON
         BCR   1,REGE                   YES- RETURN TO ENDMISS PGM.
         CLI   0(REGY),X'00'         Q.  STACK EMPTY
         BE    PGMEND                   YES- LOGICAL PROGRAM ENP
         BCR   15,REGE                  RETURN
PGMEND   OI    BITS2,ENDBIT      SET ENDBIT
         LA    REGOX,EODADIN            NEW.EOD ADDRESS
         ST    REGOX,EODIN
         B     COMMEND
WRT1     OI    BITS3,FRSITB        DON'T CHECK FIRST TIME
         B     WRT
         CNOP  0,4
MOVE4    MVC   0(1,REG7),0(REGB)        PBLCKEND MOVE FOR ITAB
SCTAB    DS    CL510
         SPACE 2
*****   COMMENT  ******************************************************
*                   THREE ENTRIES
*                       1 COM  FOR THE ALGOL WORD COMMENT
*                             SETS CODIT=1, CHECKS THAT COMMENT IS IN
*                             A LEGAL POSSITION
*                       2 COMERR FOR ERRORS IN DECLARATIONS ALL CHAR
*                             TO NEXT SEMICOLON WILL BE SKIPPED
*                             SET COBIT AND DELTABIT=1
*                       3 COMMEND  ENTERED AFTER AN END IS FOUND.
*                             SKIPPS ALL CHARACTERS TO NEXT ., OR END
*                             OR ELSE
*                             SETS THE COBIT =0
         SPACE 2
COMERR   OI    BITS2,X'40'         SET COBIT AND
         OI    BITS1,X'20'             DELTABIT ON
         B     COMCEE2
COMMEND  NI    BITS2,X'BF'           SET  COBIT TO 0
         BC    15,COMCED2
COM      OI    BITS2,X'40'           SET  COBIT  TO  I
         LR    REGM,EAP
         BCTR  REGM,0
         CLI   0(REGM),X'0C'            Q. BEGIN IN O/P
         BE    COMCED2
         BCTR  REGM,0
         BCTR  REGM,0
         CLI   0(REGM),X'0B'            Q. BETA IN O/P
         BE    COMCED2
         CLI   0(REGM),X'29'            Q. DELTA IN O/P
         BE    COMCED2
         BCTR  REGM,0
         CLI   0(REGM),X'0D'            SEMICOLON IN O/P
         BE    COMCED2
         BAL   REGB,ERR7                E18
         DC    X'0412'
COMCED2  LA    REGI,1(0,REGI)        INCREASE  REGI BY I
COMCEE2  BALR  REGIX,0
         SR    REGZ,REGZ
         TRT   0(73,REGI),COMTABLE      SCAN THE COMMENT
         LA    REGM,0(REGZ,REGIX)       BRANCH WITH HELP OF DISP.
         BCR   15,REGM                  TO APPROPRIATE SUB. PGM.
         SPACE 2
*****   COMAPOST *****
*                   IF AN END COMMENT IS PROCESSED, COBIT= 0, CHECK IF
*                        APOSTROPHE IS THE START OF END OR ELSE
*                   OTHERWISE RETURN TO SCAN THE COMMENT AGAIN
         SPACE 2
COMAPOST TM    BITS2,X'40'              Q. COBIT ON
         BO    COMCED2                  YES- RETURN TO SCANNING AGAIN
         MVI   FBYTE,X'FF'              SET FBYTE
         BC    15,ENTRAPR                 RETUN TO APOSTROFPROGRAM
COMZETA  B     CIB                 ZETA - RETURN TO COMERR
         SPACE 2
*****   COMPOINT *****
*                   CHECK FOR SEMICOLON ., IF NOT RETURN
         SPACE 2
COMPOINT LA    REGB,COMCEE2             RETURN IF NOT SEMCOLON
         BAL   REG12,FINDSEMC
         SPACE 2
*****   COMSEMCO *****
*                   ENDELSE BIT ON- END COMMENT AFTER BEGIN OR BETA
*                        ENDED WITH A ., MEANS THAT THE END MIGHT ALSO
*                        CLOSE AN FORSTATEMENT OR A PROCEDURE
*                   ENDBIT ON- FINAL END HAS BEEN REACHED NOTHING IS TO
*                        FOLLOW THIS COMMENT IN THE CORRECT CASE
*                   AN SEMICOLON AFTER AN COMMENT IS NOT TO BE COUNTED
*                        THAT IS COBIT= 1 AND DELTABIT=0 RETURN TO
*                        TEST OTHERWISE RETURN VIA SEMICOLON PROGRAM
         SPACE 2
COMSEMCO TM    BITS2,X'01'         END ELSE BIT
         BO    COMPEND2            YES
         TM    BITS2,ENDBIT      Q.FINAL END COMMENT HAS ENDED
         BO    READROUT            YES OK
         TM    BITS2,X'40'              Q. COMMENT
         BZ    SEMCO                    NO
         TM    BITS1,X'20'              Q. DELIMITER ERROR
         BO    SEMCO                    YES
         LA    REGI,1(0,REGI)           FOR A COMMENT SKIP SEMICOLON
         B     TESTLOOP
         SPACE 2
*****   FOR      ******************************************************
*                   INCREASES IG AND FSN NUMBER
*                   MAKES ENTRIES IN SCOPE AND GROUPTABEL
*                   MOVES FOR (18) TO OUTPUT FOLLOWED BY NEW IG NUMBER
*                   CHECKS IF PROC IN STACK, IF YES PROC IS CHANGED TO
*                        PROC**
*                   PUTS FOR IN STACK
*                   AN FORHEAD ENTRY IS MADE IN ITAB
*                   THE RETURN IS TO TEST
         SPACE 2
FOR      LA    REG0,3(0,EAP)
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         LH    REGY,IGC            INCREASE ITABGROUPNUMBER
         LA    REGY,1(0,REGY)
         MVI   0(EAP),X'18'        MOVE 'FOR'
         STH   REGY,IGC            AND  IGN
         MVC   1(2,EAP),IGC
         LA    EAP,3(0,EAP)        TO OUTPUTBUFFER
         CLI   FSN,X'FF'           Q. MORE THAN 255 FOR STATEMENTS
         BNE   *+10
         BAL   REGB,ERR4
         DC    X'0429'             E41
         IC    REGZ,FSN            INCREASE FSN
         LA    REGZ,1(0,REGZ)
         STC   REGZ,FSN
         LA    REG12,SPTAB-1
         AR    REG12,REGZ
         L     REGY,LPBP
         MVC   0(1,REG12),10(REGY) MAKE ENTRY IN SCOUPTABLE
         NI    BITS1,X'7F'              BEGBIT= 0
         L     REG12,SP
         C     REG12,ATOPSTAK           Q. STACK OVERFLOW
         BL    *+10
         BAL   REGB,ERR4
         DC    X'0414'             E20
         CLI   0(REG12),X'0C'           Q. PROC IN STACK
         BNE   NOPROCBY                 NO
         MVI   0(REG12),X'14'           MAKE PROC BE PROC**
         NI    BITS1,X'BF'        PROBIT=0
         CLI   PZ,X'00'            Q.ALLPARAMETERS SPECIFIED
         BE    *+8                 YES
         BAL   REGOX,ERROR10       NO- GENERATE E10
NOPROCBY L     REG12,SP
         LA    REG12,1(0,REG12)    INCREASE STACKPOINTER
         MVI   0(REG12),X'18'      PUT FOR INTO STACK
         ST    REG12,SP
         LH    REG12,IGC
         AR    REG12,REG12
         AH    REG12,IGC
         A     REG12,AGT
         L     REGY,LIGP
         MVC   0(2,REG12),8(REGY)  ENTRY INTO GROUPTABLE
         STC   REGZ,2(REG12)
         NI    0(REGOX),X'7F'      CLEAR POSSIBLE PHI IND.
         L     REGY,AITL
         MVC   0(4,REGY),LIGP      CONSTRUCT FOR HEADENTRY IN ITAB
         MVI   5(REGY),X'2B'
         MVC   8(2,REGY),IGC
         ST    REGY,LIGP           UPDATE LIGP
         BAL   REG12,ITABCLEA           CHECK AND CLEAR NEXT ITABENTRY
         LA    REGI,1(0,REGI)
         B     TESTLOOP
         SPACE 2
*****   TYPE     ******************************************************
*                   ENTRED FOR INTEGER, REAL AND BOOLEAN
*                   TESTS FOR NEWBLOCK, BEGBIT, AND IF IDENTIFIER IS
*                        SPECIFIED, PROBIT
*                   MOVES INTERNAL NAME CHARACTERISTICS AND PBN TO ITAB
*                   CHECKS THE IDENTIFIER FOR VALIDITY AND MOVES UP TO
*                        6 CHARACTERS TO ITAB EXTERNAL NAME
*                   IF THE FIRST CHARACTER FOUND IS AN OPOSTROPHE THE
*                        CHECK IS VIA APOSTROF, DELIMITER AND TYPESPEC
*                        FOR ARRAY OR PROCEDURE (FBYTE=F0)
         SPACE 2
TYPE     TM    BITS1,X'40'               Q PROBIT = 1
         BO    SPECENT                   YES
         TM    BITS1,X'80'               Q BEGBIT = 1
         BZ    *+16
         ST    REGX,SAVE1               IF YES GO TO BEGI PGM
         BAL   REGX,BEG1
         L     REGX,SAVE1
         L     REGY,AITL                MOVE CHARACTERISTICS TO ITAB
         MVI   6(REGY),X'C0'             TO  THE  7TH  AND  8TH
         MVI   7(REGY),X'30'            BYTE OF THE ENTRY
         LA    REGB,2(REGL,REGX)        MODIFIY THE LAST 4 BITS WITH
         MVN   7(1,REGY),0(REGB)        INFORMATION FROM THE WITAB
         L     REGB,LPBP
         MVC   8(1,REGY),10(REGB)  MOVE IN PROGRAMBLOCK NUMBER
TYPEDAFI LA    REGI,1(0,REGI)            GET NEXT CHARACTER
         CLI   0(REGI),X'40'       Q IS CHAR A LETTER
         BNL   TYPENAME                  YES
         CLI   0(REGI),X'2B'               Q IS IT BLANK
         BE    TYPEDAFI
         CLI   0(REGI),X'2F'     Q. IS IT ZETA
         BNE   *+12
         LA    REGIX,TYPEDAFI+4    CHANGE INPUT
         BC    15,CIB                       BUFFER
         CLI   0(REGI),X'2E'               Q  IS  IT  APOSTROPHE
         BE    *+12
         LA    REGH,TYPEDAFI               STORE RETURN ADDR
         B     IERSPEC             GO TO ERRORROUTINE
         MVI   FBYTE,X'F0'                 MOVE F0 TO FBYTE
         BC    15,ENTRAPR               CHECK FOR TYPE ARRAY OR PROC
TYPENAME L     IN,AITL             GET ITAB POINTER
         MVC   0(1,IN),0(REGI)     MOVE FIRST CHAR. TO ITAB
         LA    IN,1(0,IN)          INCREASE POINTER
         LA    K,1                 INITILIZE COUNTER
         LA    REGIX,*+8           RETURN IF CHANGE OF I/P BUF. NEEDED
TYPENM02 LA    REGI,1(0,REGI)      GET NEXT CHAR.
         CLI   0(REGI),X'2F'       Q. LETTER, ZETA OR SOMETHING ELSE
         BE    CIB                 CHANGE I/P BUFFER
         BL    TLISTSE             CHECK FURTHER
         C     K,KOPOOL+24         Q. 6 CHAR. ALLREADY MOVED IN
         BE    TYPENM02            YES
         MVC   0(1,IN),0(REGI)     NO- MOVE IN NEXT CHAR
         LA    IN,1(0,IN)          INCREASE
         LA    K,1(0,K)            POINTERS
         B     TYPENM02            TAKE NEXT CHAR.
TLISTSE  CLI   0(REGI),X'2B'  Q. BLANK
         BE    TYPENM02
         CLI   0(REGI),X'25'       Q. COMMA
         BE    TYPECOMA
         LA    REGH,TYPEDAFI            RETURN ADDRESS FOR IER
         LA    REGB,IER                 RETURN ADDRESS IF NO SEMICOLON
         BAL   REG12,FINDSEMC           LOOK FOR SEMICOLON
         SPACE 2
*****   TYPESEMC ******
*                   SEMICOLON FOUND
*                   END OF THIS DECLARATION
*                   DELTABIT IS TURNED ON AND THE RETURN TO TEST IS
*                        VIA SEMCO
         SPACE 2
TYPESEMC BAL   REG12,ITABCLEA           CLEAR NEXT ITAB ENTRY
         OI    BITS1,X'20'              SET DELTABIT TO ONE
         B     SEMCO                    GO TO SEMICOLON PROGRAM
         SPACE 2
*****   TYPECOMA ******
*                   AN COMMA ENDED THE IDENTIFIER
*                   THE INTERNAL NAME IS COPIED AND TYPEPROGRAM
*                        UTILIZED AGAIN
         SPACE 2
TYPECOMA L     REGA,AITL
         BAL   REG12,ITABCLEA           CHECK AND CLEAR NEXT ITABENTRY
         MVC   6(3,REGY),6(REGA)        COPY ID AND PBN FIELDS
         B     TYPEDAFI                 RETURN TO CHECK NEXT IDENTIFIER
         SPACE 2
*****   IER      ******************************************************
*                   IDENTIFIER ERROR ROUTINE
*                   HAS 2 ENTRIES
*                       1. IERSPEC IF FIRST CHARACTER IS IN ERROR, E5
*                       2. IER ANY OTHER CHARACTER, E16
*                   THE RETURN
*                       1. VIA REGH IF AN COMMA IS FOUND AFTER THE
*                             IDENTIFIER IN ERROR
*                       2. TO TEST VIA SEMCO IF AN SEMICOLON IS FOUND
*                       3. TO PROCFIN IF AN RIGHT PARENTHESIS IS FOUND
*                             AND THE FMBIT IS ON WHITCH INDICATES
*                             THAT THE FORMAL PARAMETER LIST OF A
*                             PROCEDURE IS UNDER PROCESS
*                   REGH MIGHT LEAD TO TYPEDAFI
*                                       IDCHECK
*                                       PROCID
         SPACE 2
IERSPEC  BAL   REGB,ERR7
         DC    X'0405'             E5
         B     *+10
IER      BAL   REGB,ERR2
         DC    X'0010'             E16
         L     IN,AITL                      RESET IN TO START
         MVI   0(IN),X'00'              CLEAR EXTERNAL NAME PART
         MVC   1(5,IN),0(IN)
IERCOMMA LA    REGI,1(0,REGI)
         LA    REGB,IERSELSE       RETURN IF NO SEMICOLON FOUND
         BAL   REG12,FINDSEMC      LOOK FOR SEMICOLON
IERSEMCO L     REGY,AITL           SEMICOLON FOUND - END OF DECLARATION
         BAL   REG12,ITABCLEA+8    CLEAR ITAB ENTRY
         TM    BITS3,FMBIT         Q. FORMAL PARAMETER LIST PROCESSED
         BO    SCYES3-8            YES RETURN TO PROCEDURE END
         OI    BITS1,X'20'         DELTABIT = 1
         NI    BITS2,X'EF'              VALBIT=0
         MVC   KB(2),KOPOOL        CKB = 00
         B     SEMCO               RETURN TO TEST VIA SEMCO
IERSELSE CLI   0(REGI),X'25'       Q COMMA
         BCR   8,REGH              RETURN IF COMMA FOUND
         TM    BITS3,FMBIT         Q. FORMAL PARAMETER LIST PROCESSED
         BZ    IERCOMMA            NO
         CLI   0(REGI),X'26'       Q CHAR IS RIGHT PARENTHESIS
         BE    PROCFIN        YES GO TO PROCEDURE END HANDLING
         B     IERCOMMA            CONTINUE CHECKING NEXT CHAR
         SPACE 2
*****   CODE     ******************************************************
*                   SETS THE PROBIT TO ZERO
*                   CHECKS THAT CODE IS IN THE CORRECT PLACE AND IS
*                        FOLLOWED BY A SEMICOLON
*                   CORRECTS THE INTERNAL NAME OF THE PROCEDURE
*                   TRANSFER THE NAME IN EXTERNAL FORM TO OUTPUT
*                   RETURNS VIA PROGRAM BLOCK END TO TEST
         SPACE 2
CODE     NI    BITS1,X'BF'         PROBIT=0
         CLI   PZ,X'00'            Q. ALL PARAMETERS SPECIFIED
         BZ    *+8                 YES
         BAL   REGOX,ERROR10       NO- GENERATE E10
         L     REGY,SP
         CLI   0(REGY),X'0C'       PROC IN STACK
         BNE   CODERR              IF NO BRANCH TO ERROR
         LR    REGL,EAP
         S     REGL,KOPOOL+12
         CLI   0(REGL),X'29'       Q. DELTA IN O/P
         BNE   CODERR              IF NO  BRANCH TO ERROR
         L     REGY,LPBP
         S     REGY,KOPOOL+44      GET PROCEDURE NAME
         XI    7(REGY),X'80'       INTERNAL NAME IS CORRECTED
         TM    19(REGY),X'80'      Q. TYPE PROCEDURE
         BZ    *+8
         XI    29(REGY),X'80'      YES- CORRECT SECOND NAME ENTRY
         LA    REG0,9(0,EAP)
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         MVI   0(EAP),X'3C'        TRANSFER GAMMA
         MVC   1(6,EAP),0(REGY)    TRANSFER NAME AND
         TR    1(6,EAP),RETRANS    CONVERT TO EXTERNAL CODE
         MVC   7(1,EAP),RETRANS    INSERT EXTERNAL BLANKS
         MVC   8(1,EAP),RETRANS
         LA    EAP,9(0,EAP)
         OI    BITS1,X'20'         DELTABIT.=1
SEARCH   LA    REGB,NOSEMC         RETURN IF NO SEMICOLON FOUND
         LA    REGE,SEMCO          RETURN ADD. FOR PBLCKEND
         LA    REGI,1(0,REGI)
         BAL   REG12,FINDSEMC      Q. SEMICOLON FOLLOWS
         B     PBLCKEND            SEMICOLON FOUND- GO TO PBLCKEND
NOSEMC   BAL   REGB,ERR7
         DC    X'040F'             E15
         LA    REGB,FINDSEMC       Q WAS A PERIOD FOUND
         CR    REGB,REGIX
         BE    PBLCKEND            NO
         BCTR  REGI,0              YES-
         MVI   0(REGI),X'2D'       MOVE IN A PERIOD
         BCTR  REGI,0              DECREASE REGI, WILL BE INCREASED
         B     PBLCKEND            BY SEMCO. RETURN VIA PBLCKEND
*                                  AND SEMCO TO TEST
CODERR   BAL   REGB,ERR7
         DC    X'0418'             E24
         B     COMERR              SKIP TO NEXT SEMICOLON
         SPACE 2
IEX11002 CSECT
         SPACE 2
*****   SPEC     ******************************************************
*                   ENTERED FOR LABEL AND STRING
*                   CHECKS THAT THEY ARE IN PROCEDURE HEAD
         SPACE 2
SPEC     TM    BITS1,X'40'         Q. PROBIT ON
         BO    SPECENT YES PROCESS SPECIFIED LABEL OR STRING
         BAL   REGB,ERR7
         DC    X'0419'             E25
         B     COMERR              SKIP TO NEXT SEMICOLON
         SPACE 2
*****   SPECENT  ******************************************************
*                   ENTERED FOR SPECIFICATIONS FROM
*                                                 TYPE
*                                                 SPEC
*                                                ARRAY
*                                                SWITCH
*                                                PROCEDURE
*                   SAVES IN KB THE CHARACTERISTICS TAKEN FROM THE
*                        DELIMITER TABLE
         SPACE 2
SPECENT  LA    REGY,1(REGL,REGX)   MOVE IN IDFIELD
         MVC   KB(2),0(REGY)
         SPACE 2
*****   IDCHECK  ******************************************************
*                   ENTERED FROM VALUE
*                                 TYPEARRAY
*                                 TYPEPROCEDURE
*                                  SPECENT
*                   CHECKS THE NAME FOR FORMAL PARAMETERS
*                   FINDS THE ENTRY IN ITAB AND INSERTS THERE THE
*                        CHARACTERISTICS AND PROGRAM BLOCK NUMBER
*                   DECREASES THE PARAMETER COUNT PZ BY ONE FOR EACH
*                        CORRECT PARAMETER FOUND
*                   IF A COMMA ENDS THE IDENTIFIER IDCHECK WILL BE
*                        ACTIVATED AGIAN
*                   IF A SEMICOLON ENDS THE DELIMITER THE RETURN IS TO
*                        TEST VIA SEMICOLON PROGRAM
         SPACE 2
IDCHECK  LA    REGI,1(0,REGI)               GET NEXT  CHAR
         CLI   0(REGI),X'39'              Q IS IT A LETTER
         BNH   IDNOLETR                     NO
         MVC   IDBUCKET(6),KOPOOL       CLEAR BUCKET WITH ZEROS
         LA    IN,IDBUCKET
         LA    REGL,1
         MVC   0(1,IN),0(REGI)     MOVE FIRST CHAR. TO BOCKET
         LA    IN,1(0,IN)
         LA    REGIX,*+8           RETURN IF CIB NEEDED
IDLOOP   LA    REGI,1(0,REGI)      GET NEXT CHAR.
         CLI   0(REGI),X'2F'            Q ZETA
         BE    CIB                      YES
         BL    IDSEARCH                 SOMETHING ELSE
         C     REGL,KOPOOL+24           LETTER OR DIGIT
         BE    IDLOOP                   Q 6 CHAR MOVED ALLREADY YES
         MVC   0(1,IN),0(REGI)          NO MOVE CHAR
         LA    IN,1(0,IN)          INCREASE POINTERS
         LA    REGL,1(0,REGL)
         B     IDLOOP              TAKE NEXT CHAR.
IDNOLETR CLI   0(REGI),X'2B'      FIRST CHAR WAS NOT LETTER. Q. BLANK
         BE    IDCHECK                       YES . GET NEXT CHAR
         CLI   0(REGI),X'2F'                Q  IS IT A ZETA
         BNE   *+12
         LA    REGIX,IDCHECK+4         YES- CHANGE I/P-BUFFER
         BC    15,CIB                        BUFFER
         CLI   0(REGI),X'2E'                 Q  IS IT A APOSTROPHE
         BE    *+12
         LA    REGH,IDCHECK             NO- SET RETURN ADD AND GOTO
         B     IERSPEC                  IDENTIFIER ERROR ROUTINE
         MVI   FBYTE,X'F0'              SET FBYTE- LOOK FOR TYPE
         BC    15,ENTRAPR               ARRAY OR TYPE PROC
IDSELSE  BAL   REGB,ERR2E
         DC    X'0010'                  E16
         LA    REGH,IDCHECK             RETURN ADD FOR IER
         B     IERCOMMA                 GO TO IDENTIFIER ERROR ROUTINE
IDBUCKET DC    6X'00'
IDSEARCH CLI   0(REGI),X'2B'            Q BLANK
         BE    IDLOOP
         CLI   0(REGI),X'25'            Q COMMA
         BE    IDCOMMA
         LA    REGB,IDSELSE             IF NOT SEMICOLON FOUND
         BAL   REG12,FINDSEMC           LOOK FOR SEMICOLON
         OI    BITS1,X'20'              SEMICOLON FOUND SET DELTABIT
IDCOMMA  CLC   PRIMPAR(4),KOPOOL        Q. ARE THERE ANY PARAMETER
         BE    NOTFOUND                 NO
         L     REGPS,PRIMPAR            GET FIRST PARAMETER
         SPACE 2
*****   COMPID   ******
*                   A LOOP TO FIND THE PARAMETER IN ITAB
         SPACE 2
COMPID   CLC   IDBUCKET(6),0(REGPS)     CHECK IF IDENTIFIER FOUND
         BE    IDVALCHK                     FOUND
         LA    REGPS,11(0,REGPS)        NOT FOUND  TRY NEXT PARAMETER
         C     REGPS,AITL                   IF THERE ARE ANY LEFT
         BNE   COMPID                       YES
NOTFOUND BAL   REGB,ERR2E
         DC    X'001B'                  E27
         B     IDENDER
IDVALCHK TM    BITS2,X'10'                   VALUE  CALL
         BO    VALDLB2                      YES - GO TO VAL ROUTINE
         TM    6(REGPS),X'06'           Q SPECIAL USE BITS ON
         BZ    IDCHKEND                 NO
         BAL   REGB,ERR2E               YES CREATE
         DC    X'001A'                  E26
         B     IDENDER        GET NEXT IDENTIFIER
         SPACE 2
*****   IDCHKEND ******
*                   INSERTS CHARACTERISTICS AND PBN, DECRESES PZ
*                   IF BOTH VALUE AND NAME BIT ON BYTE 7 EQVALS 30
*                        A VALUE SPECIFICATION HAS BEEN MADE EARLIER
*                        SO IT IS CORRECTED TO BE A CALL BY VALUE
         SPACE 2
IDCHKEND L     REGB,LPBP
         MVC   8(1,REGPS),10(REGB)      INSERT PBN
         OC    6(2,REGPS),KB
         IC    REGB,PZ                 CORRECT IDFIELD IS CREATED
         BCTR  REGB,0              PZ= PZ-1
         STC   REGB,PZ
         TM    7(REGPS),X'30'           Q. VALUE BIT ON
         BM    *+8
VALCALL  NI    7(REGPS),X'EF'           YES- ZERO NAME BIT
IDENDER  TM    BITS1,X'20'         Q. DELTABIT ON
         BZ    IDCHECK                  NO-GET NEXT  IDENT.
         MVC   KB(2),KOPOOL        YES CLEAR IDFIELD
         NI    BITS2,X'EF'         SET VALBIT TO ZERO
         BC    15,SEMCO                  GO TO SEMICOLON PROGRAM.
         SPACE 2
*****   VALUE    ******
*                   CHECKS THAT SPECIFICATION IS IN A PROCEDURE HEAD
*                   EXITS FIRST TO IDCHECK TO FIND THE PARAMETER
*                   WILL THEN RETURN TO VALDLB2 FOR FUTHER CHECKS AND
*                   TO INSERT THE VALUE BIT IN THE INTERNAL NAME
         SPACE 2
VALUE    TM    BITS1,X'40'            Q PROCEDDRE  PROCECED
         BZ    *+12                   NO- ERROR
         OI    BITS2,X'10'              YES- SET VALUE BIT TO ONE
         BC    15,IDCHECK             AND GO TO IDCHEK
         BAL   REGB,ERR7                E28  VALVE
         DC    X'041C'                   OUTSIDE PROC.
         B     COMERR              SKIP TO NEXT SEMICOLON
VALDLB2  TM    7(REGPS),X'20'      Q. VALUE BIT ON IN IDENTIFIER
         BZ    *+14                     NO
         BAL   REGB,ERR2E
         DC    X'001E'             E30
         B     IDENDER        GET NEXT IDENTIFIER
         TM    6(REGPS),X'06'        Q SPECIAL USE BIT ENTERED
         BZ    *+18                     NO
         BAL   REGB,ERR7
         DC    X'041D'             E29
         XI    7(REGPS),X'30'          MOVE IN IDFIELD
         B     IDENDER        GET NEXT IDENTIFIER
         MVI   7(REGPS),X'30'           CORRECT - MOVE IN IDFIELD
         B     IDENDER        GET NEXT IDENTIFIER
         SPACE 2
*****   TYPEARRAY *****************************************************
*                   ENTERED FROM TYPESPEC
*                   TEST FOR PROBIT, BEGBIT
*                   INSERTS CHARACTERISTICS IN INTERNAL NAME WITHOUT
*                        DESTROYING THE TYPE SPECIFICATIONS ENTERED BY
*                        THE TYPE PROGRAM
*                   JOINS ARRAY PROGRAM
*                   FOR A SPECIFIED TYPEARRAY THE EXIT IS TO IDCHECK
         SPACE 2
TYPEARRY TM    BITS1,X'40'             Q IS PROBIT ON
         BO    TARYDHB3               YES - SPECIFICATION
         TM    BITS1,X'80'              Q. BEGBIT ON
         BZ    *+16
         ST    REGX,SAVE1               YES
         BAL   REGX,BEG1           GO AND PROCESS PROGRAMBLOCK HEAD
         L     REGX,SAVE1
         L     IN,AITL
         MVI   6(IN),X'C8'              MOVE IN
         XI    7(IN),X'34'              ID FIELD
         BC    15,ARRYDME1           GO  TO ARRAY  PROCECING
TARYDHB3 MVI   KB,X'CA'                 MOVE IN
         OI    KB+1,X'04'             TYPE ARRAY SPECIFICATION ID
         BC    15,IDCHECK
         SPACE 2
*****   ARRAY    ******************************************************
*                   TESTS FOR PRO AND BEGBIT
*                   ENTERS CHARACTERISTICS IN INTERNAL NAME
*                TYPEARRAY JOINS HERE
*                   PBN IS ENTERED IN INTERNAL NAME
*                   09 FOR ARRAY IS MOVED TO OUTPUT
*                   THE NAME IS CHECKED AND MOVED TO OUTPUT AND ITAB
*                   SHOULD BE FOLLOWED BY A COMMA OR LEFT PARENTHISIS
*                SETS N (NUMBER OF ARRAYS WITH SAME DIMENSIONS) TO ONE
         SPACE 2
ARRAY    TM    BITS1,X'40'               Q  PROBIT  ON
         BO    SPECENT                    YES
         TM    BITS1,X'80'               Q  BEGBITI  ON
         BZ    *+16
         ST    REGX,SAVE1     YES- GO TO PROCESS PROGRAMBLOCKHEAD
         BAL   REGX,BEG1
         L     REGX,SAVE1
         L     IN,AITL
         MVI   6(IN),X'C8'              MOVE IN
         MVI   7(IN),X'06'                IO-FIELD
ARRYDME1 L     REGB,LPBP
         MVC   8(1,IN),10(REGB)           MOVE IN PROGRAMBLOCK NR.
         LA    REGB,9(0,IN)               MOVE  ADD  OF  AITL+9
         ST    REGB,DIM                   TO  DIM
         BAL   REGOX,COB
         MVI   0(EAP),X'09'             MOVE ARRAY ID TO O/P
         LA    EAP,1(0,EAP)
ARRYNAME LA    REGI,1(0,REGI)           GET FIRST CHAR
         CLI   0(REGI),X'39'            Q. LETTER
         BNH   ARNAMESE                 NO
         TM    BITS1,X'04'              Q. LISTBIT ON
         BO    ARRYMULT                 YES
         MVC   N(1),KOPOOL+7            SET N=1
ARRYID   BAL   REGB,IDCHECK1       CHECK, MOVE IDENT. TO ITAB AND O/P
ARRYSE   CLI   0(REGI),X'2B'       Q. BLANK
         BE    IDCHECK2
         CLI   0(REGI),X'06'       Q  LEFT PARENTHESIS
         BE    ARRYLPAR
         CLI   0(REGI),X'25'       Q. COMMA
         BE    ARCOMMA
ARRAYERR BAL   REGB,ERR2           SOMETHING ELSE FOUND
         DC    X'0010'             E16
         BAL   REGOX,COB
         MVI   0(EAP),X'3D'   MOVE IN RHA
         LA    EAP,1(0,EAP)
ARYEXIT  L     REGY,AITL
         BAL   REG12,ITABCLEA+8         CLEAR ITAB-ENTRY
         NI    BITS1,X'F7'    TURN OFF ARBIT
         LA    RET,TESTLOOP        RESET RETURN REGISTER TO MAINLOOP
         B     COMERR              SKIP TO NEXT SEMICOLON
ARNAMESE CLI   0(REGI),X'2B'       Q. NAME STARTS WITH BLANK
         BE    ARRYNAME
         CLI   0(REGI),X'2F'       Q. ZETA
         BNE   *+12
         LA    REGIX,ARRYNAME+4
         B     CIB
         BAL   REGB,ERR7                FIRST CHAR. OF NAME IN ERROR
         DC    X'0405'
         B     ARYEXIT             DELETE DECLARATION
         SPACE 2
*****   ARRAYPAR ******
*                   ENTERED WHEN A LEFT PARENTHESIS IS FOUND AFTER THE
*                        NAME
*                   INITILIZES D DIMENSION COUNTER=0
*                   SETS THE ARBIT
*                              C PARENTHESIS COUNT=1
*                   SEARCHES FOR A SLASH
*                   MOVES OUT SUBSCRIPT BRACKETS TO OUTPUT
*                   EXITS TO ARRAYLIST
         SPACE 2
ARRYLPAR OI    BITS1,X'08'              ARBIT = 1
         LA    REGOX,1
         STH   REGOX,C                  C=1
         LA    REGOX,0
         STC   REGOX,D                  D=0
         LA    REGI,1(0,REGI)          GET NEXT CHAR
ARRYSLSH CLI   0(REGI),X'03'            Q SLASH
         BE    ARRYLSQB                 YES- MOVE IN LEFT SQ. BRACKET
         CLI   0(REGI),X'2B'            Q CHAR IS BLANK
         BE    ARRYSLSH-4               YES-GET NEXT CHAR.
         CLI   0(REGI),X'2F'            Q CHAR IS ZETA
         BNE   *+12                     NO-GOTO ERROR ROUTIEN
         LA    REGIX,ARRYSLSH           YES- CHANGE
         BC    15,CIB                  INPUT  BUFFER
         BAL   REGB,ERR2
         DC    X'001F'        E31
         BCTR  REGI,0
ARRYLSQB BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'08'             MOVE IN LEFT SQUAREBRACKET
         LA    EAP,1(0,EAP)             INCREASE
         LA    REGI,1(0,REGI)      POINTERS
         B     LIST                     GO TO PROCESS ARRAY LIST
         SPACE 2
*****   ARCOMMA  ******
*                   COPIES INTERNAL PART OF ITAB ENTRY SETS THE LISBIT
*                   EXITS TO ARRAYNAME TO CHECK FIRST CHARACTER OF NEXT
*                        NAME. THE LIST BIT WILL THEN CAUSE ARRAYMULT
*                        TO BE EXECUTED BEFORE THE REST OF THE NAME
*                        IS CHECKED
*                   INCREASES N, NUMBER OF ARRAYS WITH THE SAME
*                        DIMENSIONS, BY ONE
         SPACE 2
ARCOMMA  L     REGA,AITL                SAVE AITL
         BAL   REG12,ITABCLEA           CHECK AND CLEAR NEXT ITABENTRY
         MVC   6(3,REGY),6(REGA)        COPY ID AND PBN FIELDS
         IC    REGB,N                   INCREASE
         LA    REGB,1(0,REGB)      N
         STC   REGB,N                   BY ONE
         OI    BITS1,X'04'              SET LISTBIT TO ONE
         B     ARRYNAME            GET NEXT EXTERNAL NAME
         SPACE 2
*****   ARRAYMULT  ******
*                   MOVES OUT THE COMMA PREVIONSLY FOUND
*                   SETS THE LISTBIT TO ZERO
*                   RETURNS TO ARRAYID (AVOIDS RESETING N TO ONE)
         SPACE 2
ARRYMULT BAL   REGOX,COB
         MVI   0(EAP),X'25'        MOVE OUT THE COMMA
         LA    EAP,1(0,EAP)
         NI    BITS1,X'FB'         SET LISTBIT TO ZERO
         B     ARRYID
         SPACE 2
*****   ARTABLE  ******************************************************
*                  USED BY LIST EQUIVALENT TO THE USE OF TESTTABLE
*                        BY TESTLOOP. GIVES DISPLACEMENT TO BPRTAB
         SPACE 2
ARTABLE  DS    0CL90
         DC    2X'00'
         DC    X'0488'
         DC    2X'00'
         DC    X'6854'
         DC    3X'00'
         DC    X'58'
         DC    5X'00'
         DC    X'1014'
         DC    13X'00'
         DC    X'18'
         DC    4X'00'
         DC    X'806C'
         DC    4X'00'
         DC    X'282C843438'
         DC    42X'00'
         SPACE 2
*****   LIST     ******************************************************
*                   USED FOR ARRAY AND SWITCH LIST PROCESSING
*                   MAKES THE TRT AGAINST ARTABLE AND UTILIZES MAINLOOP
*                        TO MOVE SCANNED BYTES AND BRANCH TO THE
*                        APPROPRIATE PROGRAM, EITHER A LIST PROGRAM
*                        OR ONE OF THE COMMON PROGRAMS
*                        THE RETURN WILL BE TO LIST VIA REGISTER 10,
*                   RET WILL POINT TO LIST UNTIL CHANGED BY ENDLIST
*                        TO POINT TO TESTLOOP AGAIN
         SPACE 2
LIST     BALR  RET,0                    SET RETURN REGISTER
         LR    REGM,REGI                START CHAR IN SCAN
         LR    REGIX,RET                RETURN FROM CIB
         SR    REGZ,REGZ
         TRT   0(73,REGI),ARTABLE       SCAN AGAINST AR TABLE
         B     CONT                     UTILIZE TESTLOOP
         SPACE 2
*****   PONTLST  ******
*                   USES THE SAME POINTABEL AS MAINLOOP BUT
*                   ADDS 56 TO THE DISPLACEMENTS
         SPACE 2
PONTLST  LA    REGI,1(0,REGI)                GET NEXT CHAR.
         SR    REGZ,REGZ
         TRT   0(73,REGI),PTTABLE       SCAN TO NEXT DELIMITER
         LA    REGB,BPRTAB         IN PTTABLE
         L     REGB,56(REGB,REGZ)
         BCR   15,REGB             BRANCH ACCORDING TO 56+ DISP+ BPRTAB
         SPACE 2
PZETA    LA    REGIX,PONTLST+4               ZETA IN POINTLIST
         BC    15,CIB
         SPACE 2
*****   RIGTPARL ******  MOVES OUT THE RIGHT PARENTHESIS DECREASES THE
*                        PARENTHESIS COUNT AND RETURNS TO LIST
         SPACE 2
RIGTPARL BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'26'            MOVE  IN   $   RIGHT  PAREN.
         LA    EAP,1(0,EAP)
         LA    REGI,1(0,REGI)           GET NEXT  CHAR.
         LH    REGB,C
         BCTR  REGB,0              DECREASE PARENTHESIS COUNT
         STH   REGB,C
         BCR   15,RET
         SPACE 2
*****   LEFTPARL ******
*                        INCREASES THE PARENTHESIS COUNT
*                        CHECKS IF NEXT CHARACTER IS A SLASH, IF IT IS
*                        MOVES A SUBSCRIPT BRACKET OUTPUT, IF NOT
*                        MOVES A SIMPLE PARENTHESIS
         SPACE 2
LEFTPARL LH    REGB,C              INCREASE PARENTHESIS COUNT
         LA    REGB,1(0,REGB)
         STH   REGB,C
LPARDQC3 LA    REGI,1(0,REGI)           GET  NEXT  CHAR.
         CLI   0(REGI),X'03'            Q   SLASH
         BNE   SIMPLPAR                 NO SIMPLE PARENTHESIS
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'08'            YES - MOVE IN SQUARE BRACKET
LPARDQ63 LA    REGI,1(0,REGI)      INCREASE POINTERS
         LA    EAP,1(0,EAP)
         BCR   15,RET              RETURN
SIMPLPAR CLI   0(REGI),X'2B'           Q IS NEXT CHAR  BLANK
         BE    LPARDQC3                YES
         CLI   0(REGI),X'2F'           NO -  Q    ZETA
         BNE   *+12
         LA    REGIX,LPARDQC3+4                                    1520
         BC    15,CIB
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'06'              MOVE  IN  LEFT  PARENTHESIS
         B     LPARDQ63+4
         SPACE 2
*****   COMMALST ******
*                   INCREASES THE DIEMSION COUNTER D IF C THE
*                        PARENTHESIS COUNTER IS 1 FOR ARRAY OR 0 FOR
*                        SWITCH LIST
         SPACE 2
COMMALST TM    BITS1,X'08'             Q AR BIT = 0
         BZ    COMMAG3
         CLC   C(2),KOPOOL+6  Q. C=1
         BNE   COMMAJ2                  NO
COMMAH2  IC    REGZ,D                  INCREASE D-COUNTER
         LA    REGZ,1(0,REGZ)
         STC   REGZ,D
COMMAJ2  BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'25'            MOVE COMMA TO OUTPUT
         LA    EAP,1(0,EAP)            INCREASE POINTERS
         LA    REGI,1(0,REGI)
         BCR   15,RET
COMMAG3  CLC   C(2),KOPOOL         Q. C=0
         BE    COMMAH2
         BC    15,COMMAJ2
         SPACE 2
*****   COLONLST ******
*                   CORRECT ONLY FOR AN ARRAYLIST
         SPACE 2
COLONLST TM    BITS1,X'08'         Q. ARBIT ON
         BZ    ERROR3              E3 COLON DELETE D
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'07'            MOVE $ COLON TO O/P
         LA    EAP,1(0,EAP)
         LA    REGI,1(0,REGI)          GET NEXT CHAR
         BCR   15,RET                  AND RETURN
         SPACE 2
*****   SEMCLST  ******
*                   IS ONLY VALID FOR AN SWITCH IN WHITCH CASE
*                        INDICATES THE END OF THE SWITCH LIST
*                   THE NUMBER OF COMPONENTS IS INSERTED IN THE
*                        INTERNAL NAME
*                   EXIT IS TO ENDLIST
         SPACE 2
SEMCLST  TM    BITS1,X'08'                   Q ARBIT=1
         BO    SEMCLER             YES- ERROR
*  END OF SWITCH HANDLING
         CLI   D,X'10'                  Q. MORE THAN 15 COMPONENTS
         BL    *+14
         BAL   REGB,ERR2
         DC    X'0021'             E33
         B     COMPFIN
         L     IN,AITL                  INSERT DIMENSION COUNTER
         SR    REGB,REGB
         IC    REGB,D
         SLA   REGB,4(0)                IN LEFTMOST 4 BYTES
         STC   REGB,D
         MVZ   9(1,IN),D                IN DECLARATION
         B     ENDLIST                  GO TO ENDLIST
         SPACE 2
*****   SEMCLER  ******
*                   ENTERED IF A SEMICOLON IS FOUND IN AN ARRAY
*                        LIST
*                   GIVES E32, CLEAR THE ITAB ENTRY SETS THE
*                        ARBIT OFF, DELTABIT ON AND RETURNS TO
*                        TEST VIA SEMCO
         SPACE 2
SEMCLER  BAL   REGB,ERR2
         DC    X'0020'        E32
         L     REGY,AITL
         BAL   REG12,ITABCLEA+8    CLEAR THE ENTRY
         OI    BITS1,X'20'         DELTABIT ON
         NI    BITS1,X'F7'         ARRAYBIT OFF
         B     SEMCO                    RETURN TO SEMCO- WILL RESET RET
         SPACE 2
*****   SLASHLST ******
*                   CHECKS IF NEXT CHARACTER IS A RIGHT PARENTHESIS
*                        IT IS NOT MOVES OUT A SLASH
*                   IF IT IS MOVES OUT A RIGHT SQUARE BRACKET
*                   DECREASES THE PARENTHESIS COUNT
*                   RETURNS TO LIST IF EITHER AN SWITCH LIST IS
*                        PROCESSED OR THE PARENTHESIS COUNT NOT IS 0
         SPACE 2
SLASHLST LA    REGI,1(0,REGI)              GET NEXT CHAR.
         CLI   0(REGI),X'26'               Q  LEFT  PARENTHWSIS
         BNE   SLASHSE                  NO SOMETHING ELSE
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'28'        TRANSFER A RIGHT SQUARE BRACKET
         LA    EAP,1(0,EAP)
         LA    REGI,1(0,REGI)
         LH    REGB,C
         BCTR  REGB,0              DECREASE PARENTHESIS COUNT
         STH   REGB,C
         TM    BITS1,X'08'               Q ARBIT = 1
         BC    8,0(0,RET)          NO- RETURN
         CLC   C(2),KOPOOL         Q. C=0
         BC    7,0(0,RET)          NO- RETURN
         SPACE 2
*****   ARRAY END HANDLING
*                   INSERT THE DIMENSION COUNTERS IN THE INTERNAL
*                        NAME OR NAMES IF MORE THAN ONE ARRAY WITH
*                        THE SAME DIMENSIONS
*                   IF A COMMA FOLLOWS THE CHARACTERISTICS AND THE PBN
*                        IS COPIED AND THE NEXT ARRAY NAME IS HANDLED
*                   IF A SEMICOLON FOLLOWS ENDLIST IS ACTIVATED
         SPACE 2
         IC    REGZ,D
         CLI   D,X'10'             Q. MORE THAN 16 DIMENSIONS
         BL    *+14
         BAL   REGB,ERR2
         DC    X'0021'             EOO
         B     COMPFIN
         SLA   REGZ,4                   SHIFT DIMENSION COUNTER
         STC   REGZ,D
SLASHREP L     REGB,DIM
         MVZ   0(1,REGB),D              INSERT DIMENSION COUNTER
         LA    REGB,11(0,REGB)           INCREASE   DIM POINTER
         ST    REGB,DIM
         IC    REGOX,N                   DECREASE
         BCTR  REGOX,0                  REP.DECLARATION COUNTER
         STC   REGOX,N
         CLC   N(1),KOPOOL              Q. IS IT ZERO
         BNE   SLASHREP                 NO INSERT DIM IN NEXT
         B     SLASHEND+4               ITAB ENTRY
SLASHSE  CLI   0(REGI),X'2B'            Q. BLANK
         BE    SLASHLST
         CLI   0(REGI),X'2F'            Q. ZETA
         BNE   *+12
         LA    REGIX,SLASHLST+4
         BC    15,CIB
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'03'              MOVE  IN  A  SLASH
         LA    EAP,1(0,EAP)
         BCR   15,RET
SLASHEND LA    REGI,1(0,REGI)            GET NEXT  CHAR.
         CLI   0(REGI),X'25'             Q   COMMA
         BNE   SLSHENSE                 NO SOMETHING ELSE
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'25'             MOVE IN A COMMA
         LA    EAP,1(0,EAP)
         L     REGA,AITL           SAVE AITL
         BAL   REG12,ITABCLEA      CHECK AND CLEAR NEXT ITABENTRY
         MVC   6(3,REGY),6(REGA)   COPY ID AND PBN FIELDS
         B     ARRYNAME            GET NEXT NAME
SLSHENSE CLI   0(REGI),X'2B'            Q BLANK
         BE    SLASHEND
         CLI   0(REGI),X'2F'       Q ZETA
         BNE   *+12
         LA    REGIX,SLASHEND+4
         B     CIB
         LA    REGB,SLASHERR       RETURN IF NO SEMICOLON FOUND
         BAL   REG12,FINDSEMC      LOOK FOR SEMICOLON
         SPACE 2
*****   ENDLIST  ******
*                   SETS DELTABIT TO ONE, ARBIT TO ZERO, CLEARS NEXT
*                        ITABENTRY
*                   RESETS THE RETUN REGISTER TO TEST
*                   RETURNS TO TESTLOOP VIA SEMCO
         SPACE 2
ENDLIST  OI    BITS1,X'20'                 DELTA BIT =1
         NI    BITS1,X'F7'         ARBIT= 0
         BAL   REG12,ITABCLEA      CHECK AND CLEAR NEXT ITABENTRY
         LA    RET,TESTLOOP        RESET RETURN REGISTER TO MAINLOOP
         B     SEMCO               GO TO SEMICOLONPROGRAM
SLASHERR BAL   REGB,ERR2
         DC    X'0022'             E34
         BAL   REG12,ITABCLEA      CHECK AND CLEA NEXT ITABENTRY
         B     ARYEXIT+8           CLEAR THE ENTRY IN ITAB AND RETURN
         SPACE 2
*****   SWITCH   ******************************************************
*                   TESTS ON PROBIT (SPECIFICATION) AND BEGBIT
*                        (PROGRAM BLOCK HEAD)
*                   INSERTS CHARACTERISTICS AND PBN IN INTERNAL NAME
*                   INCREASES AND INSERTS LABELNUMBER LN
*                   MOVES 0A SWITCH TO OUTPUT
*                   SETS ARBIT TO ZERO
*                   CHECKS THE NAME FOR VALIDITY AND MOVES FIRST 6
*                        CHARACTERS TO OUTPUT AND ITAB VIA IDCHECK
*                   SEARCHES FOR ASSIGN TO FOLLOW THE SWITCHNAME
*                   INITILIZES C PARENTHESIS COUNT AND D DIMENSION
*                        COUNT WITH ZERO AND N WITH ONE
*                   EXITS TO LIST
         SPACE 2
SWITCH   TM    BITS1,X'40'             Q PROCEDURE HEAD
         BO    SPECENT                 YES
         TM    BITS1,X'80'             Q BLOCK START
         BZ    *+16
         ST    REGX,SAVE1
         BAL   REGX,BEG1                YES- PROCESS BLOCKBEGIN
         L     REGX,SAVE1
         L     REGY,AITL                MOVE IN ID FIELDS
         MVI   6(REGY),X'CC'
         MVI   7(REGY),X'0C'
         L     REGOX,LPBP
         MVC   8(1,REGY),10(REGOX)      AND PBN- NUMBER
         LH    REGOX,LN                IN CREASE LABELNUMBER
         LA    REGOX,4(0,REGOX)
         CLC   LN(2),FOURKA             Q. LN OVERFLOW
         BL    *+14
         BAL   REGB,ERR7
         DC    X'04D8'        E216
         LA    REGOX,LATBEG        RESET LN
         STH   REGOX,LN
         MVC   9(2,REGY),LN             MOVE IN LABEL NUMBER
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'0A'            MOVE IN $ SWITCH
         LA    EAP,1(0,EAP)
         NI    BITS1,X'F7'         SET ARBIT TO ZERO
SWTCHB3  LA    REGI,1(0,REGI)      GET FIRST CHAR.
         CLI   0(REGI),X'39'           Q IS IT A LETTER
         BL    SWTCHNSE                 NO
         BAL   REGB,IDCHECK1  INIILIZ N WITH ONE
SWITCHSE CLI   0(REGI),X'2B'           Q IS CHAR A BLANK
         BE    IDCHECK2
         CLI   0(REGI),X'07'       Q COLON
         BE    SWCOLON
         CLI   0(REGI),X'2D'       Q. POINT
         BNE   SWITCHER
SWPOINT  LA    REGI,1(0,REGI)      ONE POINT HAS BEEN FOUND
         CLI   0(REGI),X'2D'       Q. ONE MORE POINT
         BE    SWCOLON
         CLI   0(REGI),X'10'       Q. EQUALSIGN  E.G.  .=
         BE    EQUALOK
         CLI   0(REGI),X'2B'       Q. BLANK
         BE    SWPOINT
         CLI   0(REGI),X'2F'       Q.ZETA
         BNE   SWITCHER
         LA    REGIX,SWPOINT+4
         B     CIB
SWCOLON  LA    REGI,1(0,REGI)      NOW A COLON OR TWO POINTS ARE FOUND
         CLI   0(REGI),X'10'       Q EQUALSIGN
         BE    EQUALOK             IF YES '= OR  .= OR ..= ARE FOUND
         CLI   0(REGI),X'2B'       Q BLANK
         BE    SWCOLON
         CLI   0(REGI),X'2F'       Q  ZETA
         BNE   SWITCHER
         LA    REGIX,SWCOLON+4
         B     CIB
EQUALOK  BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'16'            MOVE IN $ EQUALSIGN
         LA    EAP,1(0,EAP)            INCREASE O/P POINTER
         SR    REGB,REGB
         STH   REGB,C                   C=0                        1514
         MVI   N,X'01'                  N=1
         STC   REGB,D                   D=0
         LA    REGI,1(0,REGI)          GET NEXT CHAR
         B     LIST                     GO TO PROCESS LIST
SWTCHNSE CLI   0(REGI),X'2B'       Q. BLANK
         BE    SWTCHB3
         CLI   0(REGI),X'2F'       Q. ZETA
         BNE   *+12
         LA    REGIX,SWTCHB3+4
         B     CIB
         BAL   REGB,ERR7
         DC    X'0405'             E5
         B     SWITCHER+18
SWITCHER BAL   REGB,ERR2
         DC    X'0010'             E16
         BAL   REGOX,COB
         MVI   0(EAP),X'3D'        MOVE IN RHA
         LA    EAP,1(0,EAP)
         L     REGB,AITL               CLEAR ITAB-ENTRY
         MVI   0(REGB),X'00'
         MVC   1(10,REGB),0(REGB)
         BC    15,COMERR               COM-PRGM ERROR-ENTRY
         SPACE 2
*****   STRING   ******************************************************
*                   MOVES INTERNAL NAME TO OUTPUT
*                   THE STRING IS TAKEN FROM THE PRINTAREA (OR DUMMY)
*                        AND MOVED TO KOPOOL, START ADDRESS IS IN
*                        SPCLT
*                   THE STRINGS TWO FIRST BYTES SPECIFIES ITS LENGTH
*                   THE TRT TESTS ONLY FOR APOSTROPHE AND ZETA
         SPACE 2
STRING   LA    REG0,6(0,EAP)       PROVIDE 6 BYTES IN O/P
         BAL   REGOX,COBSPEC
         MVC   0(4,EAP),SINT       MOVE FIRST 4 BYTES OF INTERNAL NAME
         MVC   4(2,EAP),SPCLT+2         AND LAST TWO BYTES IN O/P
         LA    EAP,6(0,EAP)
         L     REGL,SPCLT          GET CURRENT DISP WITHIN KOPOOL
         LA    REGL,2(0,REGL)      INCREASE FOR LENGTH SPECIFICATION
         C     REGL,FOURK          Q  STRINGPOOL  OVERFLOW
         BNH   *+8
         BAL   REGOX,E23
         LA    REGI,1(0,REGI)
         MVC   SQC(4),KOPOOL+4     STRINQUOTE=1
CDE2     LA    REGIX,*             PROVIDE RETURNADDRESS FOR CIB
         LR    REGM,REGI
         SR    REGZ,REGZ
         TRT   0(73,REGI),STRTABLE SCAN STRING
         LR    REGN,REGI           COMPUTE NUMBER OF SCANNED BYTES
         SR    REGN,REGM
         BZ    SROUT
         LA    REG0,0(REGN,REGL)   Q. STRINGPOOL OVERFLOW
         C     REG0,FOURK
         BNH   *+8
         BAL   REGOX,E23
         BCTR  REGN,0              MOVE SCANNED BYTES TO KOPOOL
         L     REGB,AKOPOOL
         LA    REGY,0(REGB,REGL)  COMPUTE NEW KOPOOL ADDRESS
         LA    REG0,WA             COMPUTE ADDRESS
         LR    REG12,REGM          OF STRING IN
         SR    REG12,REG0          PRINTBUFFER
         L     REGB,APRNTAR
         LA    REG12,8(REGB,REG12) GET STRING FROM PRINTBUFFER
         EX    REGN,MV1
         LA    REGL,1(REGN,REGL)   INCREASE SPCLT
SROUT    L     REG12,BPRTAB(REGZ)  BRANCH TO APPROPRIATE
         BCR   15,REG12            SUBROUTINE
         SPACE 2
*****   QUOTE   *****
*                   CHECKS IF THE APOSTROPHE IS THE START OF A QUOTE
*                        SIGN
*                   USES REPL TO MOVE THE FOUND CHARACTER(S) TO
*                        KOPOOL. REPL+1 WILL BE A LEFT OR RIGHT
*                        PARENTHESIS
*                   HOW MUCH OF REPL THAT IS TO BE MOVED TO KOPOOL
*                        IS KEPT TRACK OF IN REGN
*                   IF A COMPLETE LEFT STRING QUOTE IS FOUND THE
*                        STRING QUOTE COUNTER IS INCREASED AND THE
*                        REPL MOVED TO KOPOOL
*                   IF A COMPLETE RIGHT STRING QUOTE IS FOUND IT IS
*                        CHECKED IF IT IS THE CLOSING ONE FOR THE
*                        STRING (SQC=0) IF IT IS ENDSTRING IS ACTIVATED
*                        IF NOT REPL IS MOVED TO KOPOOL AFTER
*                        SQC IS DECREASED
*                   IF NO COMPLETE QUOTE IS FOUND THE CHARACTER(S)
*                        FOUND ARE MOVED TO KOPOOL FROM REPL, LENGTH
*                        SPECIFIED BY REGN AND THE SCANNING OF
*                        THE STRING IS REASSUMED
         SPACE 2
QUOTE    LA    REGI,1(0,REGI)
         LA    REGIX,*+4
         CLI   0(REGI),X'26'       Q RIGHT PARENTHESIS IN SOURCE
         BNE   NORIP
         MVI   REPL+1,C')'         MAKE REPL A RIGHT STRING QUOTE
         B     TESTAPOS            LOOK FOR APOSTROPHE
NORIP    CLI   0(REGI),X'06'       Q. LEFT PARENTHESIS
         BNE   TESTZETA            NO
         MVI   REPL+1,C'('         MAKE REPL A LEFT STRING QUOTE
         B     TESTAPOS            LOOK FOR APOSTROPHE
TESTZETA CLI   0(REGI),X'2F'       Q.ZETA
         BE    CIB                 YES
         LA    REGN,1              NO MOVE TO STRING ONLY FIRST APOST .
         B     CID1                MOVE REPL
TESTAPOS LA    REGI,1(0,REGI)
         LA    REGIX,*+4           NEW RETURN FOR CIB
         CLI   0(REGI),X'2E'       Q. SECOND APOSTROPHE
         BE    CID                 YES
         CLI   0(REGI),X'2F'       ZETA
         BE    CIB                 YES
         LA    REGN,2              NO MOVE TO STRING ONLY THE FIRST
         B     CID1                APOSTROPHE AND THE PARENTHESIS
CID      LA    REGI,1(0,REGI)
         L     REGOX,SQC
         CLI   REPL+1,X'4D'        Q. LEFT STRING QUOTE
         BNE   *+12                NO
         LA    REGOX,1(0,REGOX)    YES- INCREASE STRING QUOTE COUNT
         B     *+12
         S     REGOX,KOPOOL+4      RIGHT QUOTE- DECREASE QUOTE COUNT
         BC    13,ENDSTRIN         BRANCH IF LAST QUOTE
         ST    REGOX,SQC
         LA    REGN,3
CID1     LA    REG0,0(REGN,REGL)
         C     REG0,FOURK          Q STRINGPOOL OVERFLOW
         BNH   *+8
         BAL   REGOX,E23
         L     REGB,AKOPOOL
         LA    REGB,0(REGB,REGL)   COMPUTE NEW KOPOOL ADDRESS
         BCTR  REGN,0
         EX    REGN,MV2            MOVE CONTENTS OF REPL TO KOPOOL
         LA    REGL,1(REGN,REGL)   INCREASE SPCLT
         BC    15,CDE2                  RESUME SCAN OF STRING
         SPACE 2
*****   ENDSTRIN *****
*                   INCREASES SPCLT
*                   PUTS THE LENGTH OF THE STRING (DIFFERENCE BETWEEN
*                        NEW AND OLD SPCLT) AS TWO FIRST BYTES IN THE
*                        STRING
         SPACE 2
ENDSTRIN L     REG9,SPCLT          COMPUTE LENGTH AND PUT IT
         STH   REGL,SPCLT+2        AS THE FIRST 2 BYTES IN STRING
         L     REGB,AKOPOOL        AND
         LA    REGOX,0(REGB,REG9)   STORE NEW DISPLACEMENT
         SR    REGL,REG9                IN  SPCLT
         STH   REGL,LENSTRIG
         MVC   0(2,REGOX),LENSTRIG
         BCR   15,RET              RETURN TO TESTLOOP
E23      BC    0,*+10                   NO BRANCH FIRST TIME       0208
         BAL   REGB,ERR7                RECORD ERROR               0208
         DC    X'0417'             E23
         OI    E23+1,X'F0'              NO ERROR RECORDING NEXT    0208
         LA    REGL,64
         ST    REGL,SPCLT          RESETSPCLT TO 64 AGAIN
         BCR   15,REGOX            RESUME STRING PROCESSING
         CNOP  0,4
MV1      MVC   0(1,REGY),0(REG12)
LENSTRIG DS    H                        MUST NOT BE MOVED
MV2      MVC   0(1,REGB),REPL
SQC      DC    F'0'                STRINGQOUTECOUNTER  (AFTER MV2
SINT     DC    X'2EC90000'             STRING INTERNAL NAME
*                             OF THE CONSTANT POOL NAMED KOPOOL
REPL     DC    C''' '''                 BUCKET TO BUILD STRING QUOTES
         SPACE 2
*****   TYPPROC  ******************************************************
*                   TEST PRO AND BEGBIT (FORMAL PARAMETER, BLOCKSTART)
*                   MOVE PHI TO OUTPUT
*                   INSERT CHARACTERISTICS IN INTERNAL NAME
*                   JOIN PROCEDURE PROGRAM
         SPACE 2
TYPPROC  TM    BITS1,X'40'           QPROCEDURE PROCEDED
         BZ    *+16                  NO
         MVI   KB,X'CA'            YES-MOVE IN IDFIELD
         OI    KB+1,X'C0'
         BC    15,IDCHECK
         TM    BITS1,X'80'         Q. BEGBIT ON
         BZ    *+16                NO
         ST    REGX,SAVE1
         BAL   REGX,BEG1           GO TO PROCESS PROGRAM BLOCK HEAD
         L     REGX,SAVE1
         LA    REG0,4(0,EAP)      PROVIDE FOUR BYTES IN OUTPUT
         BAL   REGOX,COBSPEC       CHECK IF ENOUGH SPACE IN O/P
         MVI   0(EAP),X'0F'        MOVE PHI TO O/P
         L     REGY,AITL
         XI    7(REGY),X'F0'            MOVE IN THE IDCODE
         MVI   6(REGY),X'CA'            TO ITAB
         B     PROCEAG1            JOIN THE PROCEDUR PROGRAM
         SPACE 2
*****   PROCEDURE *****************************************************
*                   TEST PRO AND BEGBIT
*                   MOVE PI TO OUTPUT
*                   INSERT CHARACTERISTICS IN INTERNAL NAME
*                   TYPEPROCEDURE JOINS PROCEDURE PROGRAM AT THIS POINT
*                   IF ALPHA IN STACK, PRECOMPILED PROCEDURE,
*                        THE STARTBIT IS TURNED ON
*                   PROC IS PUT IN STACK
*                   PROGRAM BLOCK AND ITAB GROUP NUMBER ARE INCREASED
*                        THE NEW PBN IS INSERTED IN THE INTERNAL NAME
*                   LABELNUMBER IS INCREASED AND INSERTED IN THE
*                        INTERNAL NAME
*                   THE SURRONDING BLOCKNUMBET IS ENTERED IN PBTAB1
*                   THE SURROUNDING ITABGROUP NUMBER IN GROUPTABLE
*                   THE SC IS ENTERED IN SCTAB
*                   PROBIT AND IDBIT ARE SET TO ONE
*                   PROBIT WILL STAY AS ONE TILL THE WHOLE PROCEDURE
*                        HEAD IS PROCESSED. THE IDBIT IS ONLY ONE
*                        WHILE THE PROCEDURE NAME IS PROCESSED
*                   THE FM (FORMAL PARAMETER)BIT IS ONE WHEN THE
*                        FORMAL PARAMETER LIST IS PROCESSED
*                   THE ITABGROUP NUMBER IS MOVED TO O/P
         SPACE 2
PROCEDUR TM    BITS1,X'40'         IF PROBIT IS ONE
         BO    SPECENT             GOTO IDCHECK VIA SPECENT
         TM    BITS1,X'80'         Q. BEGBIT ON
         BZ    *+16                NO
         ST    REGX,SAVE1
         BAL   REGX,BEG1      GO TO PROCESS PROGRAMBLOCKHEAD
         L     REGX,SAVE1
         LA    REG0,4(0,EAP)      PROVIDE FOUR BYTES IN OUTPUT
         BAL   REGOX,COBSPEC
         MVI   0(EAP),X'0E'        TRANSFER PI IN OUTPUTBUFFER
         L     REGY,AITL
         MVI   6(REGY),X'CA'       CONSTRUCT FIRST PART
         MVI   7(REGY),X'C0'       OF INTERNAL NAME
PROCEAG1 L     REGL,SP
         CLI   0(REGL),X'00'       Q ALPHA IN STACK
         BNE   L3
         OI    BITS2,X'20'         TURN ON THE STARTBIT
         OI    BITS3,PROCESD
L3       LA    REGL,1(0,REGL)      INCREASE STACKPOINTER
         C     REGL,ATOPSTAK       Q STACKOVERFLOW
         BL    *+10
         BAL   REGB,ERR4
         DC    X'0414'             E20
         MVI   0(REGL),X'0C'       PUT PROC IN STACK
         ST    REGL,SP
         CLI   PBC,X'FF'           Q.PBN OVERFLOW
         BNE   *+10                NO
         BAL   REGB,ERR4
         DC    X'0416'             E22
         IC    REGZ,PBC
         LA    REGZ,1(0,REGZ)      INCREASE PROGRAMBLOCKNUMBER
         STC   REGZ,8(0,REGY)      INSERT PBN IN INTERVAL NAME
         STC   REGZ,PBC
         LA    REGL,PBTAB1(REGZ)   CONSTRUCTION
         L     REGB,LPBP           PBTAB1-ENTRY
         MVC   0(1,REGL),10(REGB)
         AR    REGZ,REGZ
         LA    REGL,SCTAB(REGZ)
         MVC   0(2,REGL),SC        MAKE ENTRY IN SCTAB
         LH    REGL,LN             INCREASE
         LA    REGL,4(0,REGL)      LABELNUMBER BY 4
         CLC   LN(2),FOURKA        Q. LNOVERFLOW
         BL    *+14
         BAL   REGB,ERR7
         DC    X'04D8'        E216
         LA    REGL,LATBEG         RESET LN
         STH   REGL,LN
         L     REGY,AITL
         MVC   9(2,REGY),LN        PUT LN IN INTERNAL NAME
         LH    REGY,IGC            INCREASE
         LA    REGY,1(0,REGY)      ITABGROUPNUMBER
         STH   REGY,IGC
         MVC   1(2,EAP),IGC        INSERT IT IN OUTPUT BUFFER
         LA    EAP,3(0,EAP)
         AR    REGY,REGY
         AH    REGY,IGC
         A     REGY,AGT
         L     REG7,LIGP
         MVC   0(2,REGY),8(REG7)   CONSTRACT ENTRY
         MVI   2(REGY),X'00'       IN   GROUPTABEL
         NI    0(REGY),X'7F'       CLEAR POSSIBLE PHI IND.
         MVC   PRIMPAR(4),KOPOOL   CLEARPRIMPAR WITH ZEROS
         OI    BITS1,X'50'         PROBIT =1,IDBIT =1
         MVI   PZ,X'00'       SET PARAMTER COUNT TO ZERO
         SPACE 2
*****   PROCID   *****
*                   PROCESSES PROCEDURE NAME (IDBIT=1)
*                        AND THE FORMAL PARAMETER LIST (IDBIT=0)
*                   CHECKS THE NAMES FOR VALIDITY AND MOVES THEM
*                        TO ITAB AND OUTPUT
*                        THIS IS DONE VIA IDCHECK1
         SPACE 2
PROCID   LA    REGI,1(0,REGI)
         CLI   0(REGI),X'40'            Q IDENTIFIER STARTS WITH LETTER
         BL    NOLETTER
         BAL   REGB,IDCHECK1  CHECK AND MOVE IDENTIFIER TO O/P AND ITAB
         CLI   0(REGI),X'2B'       Q BLANK
         BE    IDCHECK2
         TM    BITS1,X'10'         Q IDBIT ONE
         BZ    EDA1                GOTO PROCESS FORMAL PARAMETER NAME
         SPACE 2
*****   PROCEDURE NAME  *****
*                   CHECKS IF NAME IS FOLLOWED BY (A FORMAL PARAMETER
*                        LIST FOLLOWS OR ., NO PARAMETERS
*                   CHECKS IF PROCEDURE IS TO BE PRECOMPILED, IF YES
*                       THE NAME IN EXTERNAL FORM AND EXPANDED WITH
*                        TWO ZEROS IS PUT FOR AN ESDCARD IF SYLIN OR
*                        DECK HAS BEEN SPECIFIED
*                   THE NEW BLOCK ENTRY IS DONE IN ITAB
*                        ADD, OF SURROUNDIN BLOCK AND ITAB GROUP, PBN
*                             AND IGN ARE INSERTED
*                       IF TYPEPROCEDURE, BIT 0 IN BYTE 8 IS
*                        TURNED ON AND A SECOND ENTRY OF THE NAME
*                        IS DONE AFTER THE HEAD ENTRY
*                   IDBIT IS SET TO ZERO, FMBIT TO ONE
*                   IF THE NAME WAS FOLLOWED BY A SEMICOLON THE
*                   SEMCO IS ACTIUATED
*                   IF THE NAME WAS FOLLOWED BY A(PROCID IS
*                        ACTIVATED TO PROCESS THE NAME IN THE LIST
         SPACE 2
         CLI   0(REGI),X'06'       Q IDENTIFIER FOLLOWED BY )
         BE    EBF4
         LA    REGB,ERROR16             RETURN IF NOT SEMICOLON
         BAL   REG12,FINDSEMC           Q SEMICOLON
         OI    BITS1,X'20'          YES DELTABIT = 1
EBF4     TM    BITS3,PROCESD
         BZ    DEL1                NO
         NI    BITS3,PROCOFF
         TM    HCOMPMOD+1,X'60' Q. DECK AND OR LOAD SPECIFIED
         BO    DEL1                 NO- NO NEED FOR ESDCARD
         L     REGY,AITL
         LA    REGB,ESDPARAM
         MVC   0(6,REGB),0(REGY)   MOVE IN AND TRANSLATE EXTERNAL NAME
         TR    0(6,REGB),RETRANS
DEL1     TM    BITS1,X'20'         Q DELTABIT = 1
         BO    ECA3
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         MVI   0(EAP),X'06'        INSERT )
         LA    EAP,1(0,EAP)
ECA3     BAL   REG12,ITABCLEA
         MVC   0(4,REGY),LIGP      MOVE ADDRESS HEADINGENTRY OF EMBRAC
         MVC   4(4,REGY),LPBP      ING ITABGROUP AND PBLOCK TO ENTRY
         MVC   8(2,REGY),IGC            INSERT CURRENT IGN
         MVC   10(1,REGY),PBC      AND CURRENT PBN
         ST    REGY,LIGP           NEW VALUE OF LIGP
         ST    REGY,LPBP           AND LPBP
         S     REGY,KOPOOL+44      DECREASE REGY BY 11
         TM    7(REGY),X'03'       Q TYPEPROCEDURE
         BC    5,TPROHEAD
         LA    REGY,22(0,REGY)     IF NO INCREASE ITABPOINTER
ECJ3     BAL   REG12,ITABCLEA+8
         OI    BITS3,FMBIT         FMBIT
         TM    BITS1,X'20'         Q DELTABIT = 1
         BO    SEMCO               IF YES BRANCH TO SEMICOLONPROGRAM
         NI    BITS1,X'EF'         IDBIT'= 0
         BC    15,PROCID           CHECK NEXT IDENTIFIER
*                CONSTRUCT TYPE PROCEDURE ENTRIES
TPROHEAD OI    19(REGY),X'80'           FLAGBIT IN IGN IS SET ON
         LA    REG0,22(0,REGY)     Q ONE MORE ENTRY IN ITAB AVAILABLE
         C     REG0,ELI
         BNE   *+10
         BAL   REGB,ERR4
         DC    X'04D5'             E213
         MVC   22(11,REGY),0(REGY) ENTER PROCEDURE NAME ONCE MORE
         XI    28(REGY),X'08'      NO-ASSIGNMENTBIT IS SWITCHED OFF
         LA    REGY,33(0,REGY)     INCREASE ITABPOINTER
         BC    15,ECJ3             BRANCH BACK TO MAINPROGRAM
NOLETTER CLI   0(REGI),X'2B'            Q BLANK INSTEAD OF LETTER
         BE    PROCID
         LA    REGIX,PROCID+4
         CLI   0(REGI),X'2F'            Q ZETA
         BE    CIB                 CHANGE INPUTBUFFER
         TM    BITS1,X'10'
         BO    PNAMERR-10
         LA    REGH,PROCID         LOAD RETURN ADDRESS
         B     IERSPEC             BRANCH TO IDENTIFIER ERROR ROUTINE
ERROR16  BAL   REGOX,COB
         MVI   0(EAP),X'3D'        MOVE IN RHA
         LA    EAP,1(0,EAP)
         TM    BITS1,X'10'         Q. PROC NAME UNDER PROCESS
         BO    PNAMERR             YES
         LA    REGH,PROCID         LOAD RETURN ADDRESS
         B     IER                 GO TO IDENTIFIER ERROR ROUTINE
         BAL   REGB,ERR7
         DC    X'0405'             E5
         B     *+10
PNAMERR  BAL   REGB,ERR2
         DC    X'0010'             E16
         L     IN,AITL
         MVI   0(IN),X'00'       CLEAR ERRONEOUS NAME
         MVC   1(5,IN),0(IN)
         LA    REGB,PROCIDSE       THE PROCEDURE HEAD SHOULD
         BAL   REGOX,FINDSEMC
         B     EBF4-4              BE FOLLOWED BY EITHER  ( OR .,
PROCIDSE CLI   0(REGI),X'06'       KEEP LOOPING UNTIL ONE OF TWO FOUND
         BE    EBF4                LEFT PARENTHESIS FOUND
         BAL   REGOX,FINDSEMC-4
         B     EBF4-4              SEMICOLON FOUND
         SPACE 2
*****   FORMAL PARAMETER LIST *****
*                   IF A COMMA TERMINATES THE NAME, THE COMMA IS
*                        TRANSFERED TO OUTPUT AND THE PARAMETER COUNT
*                        (PZ) IS INCREASED BY ONE
*                        AND PROCID IS ACTIVATED AGAIN TO TAKE NEXT
*                        NAME
*                   IF A ) FOLLOWED BY A SEMICOLON TERMINATES THE NAME
*                        PROCFIN IS ACTIVATED
*                   IF A ) BUT NO SEMICOLON TERMINATES THE NAME
*                        PROCDEL IS ACTIVATED
*                   IS SOMETHING ELSE IS FOUND RHA IS MOVED TO OUTPUT,
*                        THE PARAMETER COUNT IS NOT INCREASED AND IER
*                        ACTIVATED (NOLETTER, ERROR16)
         SPACE 2
EDA1     CLI   0(REGI),X'25'       Q COMMA TERMINATES IDENTIFIER
         BNE   PAR
PROCEND  IC    REGZ,PZ             INCREASE
         LA    REGZ,1(0,REGZ)      PARAMETER
         STC   REGZ,PZ             COUNT BY ONE
         BAL   REG12,ITABCLEA      CHECK AND CLEAR NEXT ITABENTRY
         BAL   REGOX,COB           CHECK IF O/P AREA FILLED
         CLI   0(REGI),X'25'       Q COMMA
         BNE   PROCFIN
         MVI   0(EAP),X'25'        MOVE COMMA TO OUTPUTBUFFER
         LA    EAP,1(0,EAP)        INCREASE OUTPUTPOINTER
         BC    15,PROCID           BRANCK TO CHECK THE NEXT IDENTIFIER
PAR      CLI   0(REGI),X'26'       Q ( TERMINATES IDENTIFIER
         BE    PROCEND
         BAL   REGOX,COB
         MVI   0(EAP),X'3D'        MOVE IN RHA
         LA    EAP,1(0,EAP)
         LA    REGH,PROCID              NOTE RETURN ADDRESS AND BRANCH
         BC    15,IER              TO IER
         SPACE 2
*****   PROCFIN  *****
*                   THE PARAMERER LIST HAS BEEN COMPLETLY CHECKED
*                        THE RIGHT PARENTHESIS IS MOVED TO OUTPUT
*                        DELTABIT IS SET TO ONE
*                   THE PARENTHESIS COUNT IS INSERTED IN THE
*                        PROCEDURE NAME (NAMES IF TYPEPROCEDURE)
*                   FMBIT IS TURNED OFF
*                   THE RETURN TO TEST IS VIA SEMCO
*                   IF SOMETHING ELSE, E5 OR E16 IS GENERATED AND
*                        EVERYTHING SKIPPED TILL A (OR A., IS
*                        FOUND (NOLETTER, PNAMERR)
         SPACE 2
PROCFIN  LA    REGI,1(0,REGI)
         LA    REGB,PROCDEL        RETURN IF NO SEMICOLON
         BAL   REG12,FINDSEMC           Q SEMICOLON
         BAL   REGOX,COB
         LA    REGL,SEMCO          EXIT FROM PROCEDUR
SCYES3   MVI   0(EAP),X'26'        MOVE RIGHT PARENTHESIS
         LA    EAP,1(0,EAP)
         OI    BITS1,X'20'         DELTABIT'=1
         CLI   PZ,X'10'       Q.MORE THAN 15 PARAMETERS
         BL    *+14
         BAL   REGB,ERR2B
         DC    X'0024'             E36
         B     COMPFIN
         L     REGY,LPBP
         S     REGY,KOPOOL+44      REGY CONTAINS ADDRESS OF PROC ENTRY
         SR    REGB,REGB
         IC    REGB,PZ
         SLA   REGB,4(0)
         STC   REGB,PZ
         MVZ   9(1,REGY),PZ        INSERT NUMBER OF PARAMETERS INTO
*                                  INTERNAL NAME OF THE PROCEDURE
         SRA   REGB,4(0)
         STC   REGB,PZ             NOTE NUMBER OF PARAMETER
         NI    BITS3,FMOFF         FMBIT=0
         TM    19(REGY),X'80'      Q TYPE PROCEDURE
         BZ    TESTPAR             NO
         MVZ   31(1,REGY),9(REGY)  INSERT NUMBER OF PARAMETERS INTO
*                                  SECOND NAME-ENTRY IN ITAB
         LA    REGY,33(0,REGY)     GET ADDRESS OF FIRST PARAMETER
         B     *+8
TESTPAR  LA    REGY,22(0,REGY)
         CLI   PZ,X'00'            Q. IS THERE ANY PARAMETERS
         BCR   8,REGL              NO BRANCH TO SEMCO OR COMERR
         ST    REGY,PRIMPAR        YES- SAVE ADDRESS OF FIRST
         BCR   15,REGL             B TO SEMCO OR COMERR
         SPACE 2
*****   PROCDEL  *****
*                   A RIGHT PARENTHESIS HAS BEEN FOUND IN THE LIST
*                        THAT NOT WAS FOLLOWED BY A .,
*                   IF A LETTERSTRING IS FOUND, NOTHING BUT LETTERS
*                        AND BLANKS FOLLOWED BY ..(A COMMA IS MOVED
*                        TO OUTPUT AND PROCID ACTIVATED TO TAKE
*                        NEXT NAME
*                   IF ANYTHING ELSE IS FOUND E37 IS GENERATED
*                        AND COMERR ACTIVATED TO SKIP TO NEXT
*                        SEMICOLON
*                   ADDRESS OF COMERR IS PUT IN REGL
         SPACE 2
PROCDEL  LA    REGIX,DELCHECK+4
DELCHECK LA    REGI,1(0,REGI)
         CLI   0(REGI),X'40'       Q. LETTER
         BNL   DELCHECK
         CLI   0(REGI),X'2F'       Q. ZETA
         BE    CIB
         CLI   0(REGI),X'07'       Q. COLON
         BE    DELCOLON
         CLI   0(REGI),X'2B'
         BE    DELCHECK
         CLI   0(REGI),X'2D'       Q. POINT
         BNE   ERROR37
DELPOINT LA    REGI,1(0,REGI)
         CLI   0(REGI),X'2D'       Q. ONE MORE POINT
         BE    DELCOLON
         CLI   0(REGI),X'2B'
         BE    DELPOINT
         CLI   0(REGI),X'2F'       Q  ZETA
         BNE   ERROR37
         LA    REGIX,DELPOINT+4
         B     CIB
DELCOLON LA    REGI,1(0,REGI)
         CLI   0(REGI),X'06'       Q LEFT PARENTHESIS
         BE    DELPAREN
         CLI   0(REGI),X'2B'       Q. BLANK
         BE    DELCOLON
         CLI   0(REGI),X'2F'       Q. ZETA
         BNE   *+12
         LA    REGIX,DELCOLON+4
         B     CIB
         BCTR  REGI,0              NO PARENTHESIS FOLLOWS THE COLON
         B     ERROR37             RESET REGI AND GO TO ERROR 37
DELPAREN BAL   REGOX,COB
         MVI   0(EAP),X'25'        MOVE COMMA TO OUTPUT INSTEAD OF
         LA    EAP,1(0,EAP)        DELIMITER INCREASE  O/P POINTER
         B     PROCID              RETURN TO  PROCEDURE  CHECKING
ERROR37  BAL   REGB,ERR2B
         DC    X'0025'             E37
         LA    REGL,COMERR
         B     SCYES3
         SPACE 2
*****   ENDMISS  ******************************************************
*                   ENTERED VIA OS IF END OF DATA SENSED BEFORE
*                   LOGICAL PROGRAM END IS FOUND BY SCAN I/II
*                   CLOSES WHAT REMAINS OPEN IN STACK
*                   GENERATES PATTERN FOR ERR. MESS. 39.
         SPACE 2
ENDMISS  TM    BITS2,STARTBIT           Q. FIRST BEGIN FOUND
         BO *+10                        YES
         BAL   REGB,ERR4
         DC    X'042C'             E44 NOTHING PROCESSED
         OI    BITS1,TERBIT
TERMSEAC LA    REGE,TERMSEAC            RETURN FOR PBLCKEND PROG.
         L     REGY,SP             GET STACKPOINTER
         CLI   0(REGY),X'04'            Q.BETA IN STACK
         BE    STEPUP
         CLI   0(REGY),X'08'            Q.BEGIN
         BE    STEPUP
         CLI   0(REGY),X'10'            Q. PROC*
         BNE   TERMBRNC
STEPUP   LH    REGB,ENDCOUNT            INCREASE ENDCOUNT
         LA    REGB,1(0,REGB)
         STH   REGB,ENDCOUNT
TERMBRNC IC    REGZ,0(0,REGY)
         L     REGB,TERMTAB(REGZ)       BRANCH ACORDING TO STACKBYTE
         BCR   15,REGB
         CNOP  0,4
TERMTAB  DC    A(ERROR39)
         DC    A(PBLCKEND)              BEGIN
         DC    A(TERMBGN)               BETA
         DC    A(PBLCKEND)              PROC
         DC    A(PBLCKEND)              PROC*
         DC    A(PBLCKEND)              PROC**
         DC    A(FOREND)                FOR
TERMBGN  BAL   REGOX,COB
         MVI   0(EAP),X'2C'             MOVE OUT END TO O/P
         LA    EAP,1(0,EAP)
         L     REGY,SP
         BCTR  REGY,0                   RELEASE BEGIN IN STACK
         ST    REGY,SP
         B     TERMSEAC
         SPACE 2
*****   SLUT2    ******************************************************
*                   INTERED FROM IEX00 IF INTERUPT OCCURS BEFORE
*                   GETMAIN
         SPACE 2
SLUT2    OI    BITS3,NOFREE        INTERUPT OCCURED PRIOR TO GETMAIN
         L     REG11,VIEX14
         USING IEX11003,11
         B     SCANEND                  GO TO PROCESS TERMINATING PART
         USING IEX11002,11
         SPACE 2
*****   READROUT ******************************************************
*                   ENTERED AFTER FINAL ENDCOMMENT HAS BEEN CHECKED
*                   SHOULD EXIT TO EODADIN VIA OS EOD ROUTINE
         SPACE 2
READROUT LA    REGI,1(0,REGI)
         LA    REGIX,*+4
         TRT   0(73,REGI),BTABLE        ONLY VALID CHARACTER AFTER
         CLI   0(REGI),X'2F'            FINAL END COMMENT IS ZETA
         BE    CIB
         B     ERR9                     ANYTHING ELSE FOUND
E39PAR   DC    X'0727'             E39
ERROR39  LA    REGB,E39PAR
         BAL   REG12,ERROR1             CREATE E39 PATTERN
         LH    REGB,ENDCOUNT
         CVD   REGB,DOUBLE
         UNPK  SAVE1(4),DOUBLE+5(3)
         MVZ   SAVE1+3(1),SAVE1+2       INSERT NUMBER OF ENDS MISSING
         MVC   4(3,REGY),SAVE1+1        IN ERROR PATTERN
         SPACE 2
*****   EODADIN  ******************************************************
*                   FALL THROUGH TO TERMINATION SECTION
         SPACE 2
EODADIN  L     REG11,VIEX14
         USING IEX11003,11
         B     TERMOK
IEX11003 CSECT
         SPACE 2
*****   TERMINATION  **************************************************
*                   WRITES PB0 ITAB BLOCK FOR A PRECOMPILED PROCEDURE
*                   WRITES LAST O/P REC IF MORE THAN ONE O/P REC
*                   CORRECTS SPCLT AND MOVES THE CONSTANTS 0 TROUGH
*                        15 TO THE CONSTANT POOL
*                   IF NO TERMINATION ERROR AND EITHER DECK OR LOAD
*                        IS SPECIFIED ESD CARD AND TXT CARDS ARE
*                        GENERATED WITH GENERATE
*                   CHECKS LAST ITAB RECORD WRITTEN, IF ANY
*                   CLOSES SYSIN, SYSUT1, SYSUT3
*                   MAKES A FREEMAIN
*                   EXITS TO IEX20 IF NO TERMINATING ERROR
*                            IEX21 IF TERMINATING ERROR
         SPACE 2
TERMOK   TM    HCOMPMOD,X'08'           Q. TERMINATING ERROR
         BO    KOPOOLRL                 YES- DO NOT WRITE OUT ANYTHING
         L     REGI,AITAB          CHECK IF PB0
         LA    REGI,11(0,REGI)     CONTAINS  ANYTHING
         C     REGI,AITL
         BE    NOPBN0                   NO PB0
         L     REGY,AITL
         OI    BITS2,X'08'              SET SWITCH
         BAL   REGE,WRTITAB        WRITE OUT PB0
NOPBN0   BAL   REGOX,COB
         MVI   0(EAP),X'2D'             MOVE OMEGA TO O/P
         LA    EAP,1(0,EAP)
         CLI   ONC,X'00'           Q  ONLY ONE O/P RECORD
         BE    *+12                EQUAL=YES
         BAL   REGOX,COB+8         NO- WRITE LAST O/P BUFFER
         B     KOPOOLRL
         OI    HCOMPMOD+2,X'40'    YES- LEAVE THE SINGLE BUFFER IN CORE
KOPOOLRL L     REG7,POOLLOC
         MVC   0(64,REG7),KOPOOL        MOVE THE CONSTANTS 0 TO 15
         L     REGB,SPCLT
         A     REGB,KOPOOL+28      MAKE SPCLT POINT
         ST    REGB,SPCLT          TO THE NEAREST
         NI    SPCLT+3,X'F8'            DOUBLE WORD BOUNDARY
         MVC   PBN+1(1),PBC             SAVE NUMBER OF BLOCKS
         IC    REGI,FSN
         BCTR  REGI,0                   CORRECT FSN
         STC   REGI,ZFSNMAX             SET FOR SCAN 3
         CLC   MGESITL,TWOFIVEK         Q. WILL ITAB OVERFLOW
         BL    *+10
         BAL   REGB,ERR7
         DC    X'0413'               E 19
         TM    HCOMPMOD+1,X'60'         DECK AND OR LOAD SPECIFIED
         BO    SCANEND                  NO SKIP ESD CARD GENERATION
        SR    PRPOINT,PRPOINT
         TM    HCOMPMOD,PROC       Q. PRECOMPILED PROCEDURE
         BZ    *+10           NO
         MVC   ESDPAR2(8),ESDPARAM      GET NAME OF PROCEDURE
         BAL   INFORM,GENESD            WRITE ESD
ESDPAR2  DC    8X'40'
         DC    X'00'
         MVC   29(3,OUTAREA),KOPOOL    CORRECT FIRST ESD CARD    A22571
SKIPESD  L     INFORM,AKOPOOL
         MVC   *+10(2),SPCLT+2          GET LENGTH OF KOPOOL FOR TXT
         BAL   LENGTH,GENTXTS           GENERATE TXT CARD
         DC    H'0'
SCANEND  TM    BITS3,FRSITB
         BZ    CLSYSUT3
         CHECK ITABC
CLSYSUT3 L     REGB,UT3ADD
         CLOSE ((REGB),REREAD),TYPE=T   RESET SYSUT3
         L     REGB,INADD          CLOSE SYSIN
         CLOSE ((REGB),REREAD)
         L     1,INADD                  FREE QSAM BUFFER POOL
         FREEPOOL (1)
         L     REGB,UT1ADD
         TM    HCOMPMOD,X'08'           Q. TERMINATING ERROR
         BO    CLSPERM             YES- CLOSE SYSUT1 FOR GOOD
         CLOSE ((REGB),REREAD),TYPE=T   RESET SYSUT1
         B     FREE
CLSPERM  CLOSE ((REGB),REREAD)          CLOSE SYSUT1
FREE     TM    BITS3,NOFREE          Q. INTERUPT BEFOR GETMAIN
         BO    GETERRPH                 YES- DONOT MAKE FREEMAIN
         L     REG0,POOLLEN
         L     REGI,POOLLOC
         FREEMAIN R,LV=(0),A=(1)
         OI    HCOMPMOD+2,NOSC          SET SWITCH FOR ERROR MESSAGES
         TM    HCOMPMOD,X'08'           Q. TERMINATING ERROR
         BO    GETERRPH                 YES- CALL IEX21
         L     REGB,BRACKET                                      A28251
         SR    REGOX,REGOX                                       A28251
         CR    REGOX,REGB              IS BRACKETCOUNTER ZERO    A28251
         BC    8,*+8                   YES                       A28251
         OI    HCOMPMOD,X'90'          NO  SET SYNTAX MODE       A28251
         XCTL  EP=IEX20000         GO TO ITAB-MANIPULATION
GETERRPH XCTL  EP=IEX21000         GO TO ERROR MESSAGE HANDLING
         SPACE 2
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        S U B R O U T I N E   G E N E R A T E                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
* REGISTER DEFINITIONS
OUTAREA  EQU   1                        OUTPUT RECORD POINTER
INFORM   EQU   2                        ADDRESS OF INFORMATION
TYPER    EQU   3                        TYPE OF RECORD TO BE GENERATED
RETURN   EQU   4                        RETURN REGISTER
PRPOINT  EQU   6
LENGTH   EQU   14                       LENGTH OF INFORM. FROM CALL
L        EQU   15                       LENGTH WITHIN RECORD
         SPACE 3
* BIT PATTERNS
SDENTRY  EQU   X'00'                    SD-ENTRY IDENTIFICATION
LDENTRY  EQU   X'01'                    LD-ENTRY IDENTIFICATION
RLDFLAG  EQU   B'00001101'              FLAG USED IN RLD-ENTRY
*ADDRESS DISPLACEMENTS
RSTART   EQU   0                        START OF RECORD TYPE TABLE
RTYP     EQU   1                        RECORD IDENTIFICATION
RLEN     EQU   4                        INITIAL LENGTH 0 OR 4
RESID    EQU   6                        ESID OR BLANKS
RMAX     EQU   12                       MAXIMUM NUMBER OF BYTES IN REC
RMOV     EQU   14                       START OF MOVE ROUTINE
INFL     EQU   10                       LENGTH OF INFORM IN A RECORD
         SPACE 3
GENESD   LA    LENGTH,16            LENGTH ALLWAYS 16
         LA    TYPER,ESDT               INDICATE ESD-CALL
         MVC   PIDENT(4),0(INFORM)      NAME TO IDENT. PART
         B     GEN3                     CALLFOR FIRST OUT REC
*
GENTXTS  LA    RETURN,2(0,LENGTH)   COMPUTE RETURN ADDRESS
         LH    LENGTH,0(0,LENGTH)       LOAD LENGTH GIVEN IN CALL
GEN2     LA    TYPER,TXTT               INDICATE TXT-CALL
         SPACE 3
GEN1     L     OUTAREA,SAVOUTA         LOAD ADDRESS OF OUT RECORD
         CLC   RTYP(3,OUTAREA),RTYP(TYPER)     RECORD RIGTH TYPE
         BNE   GEN3                     NO,CALL IOR NEW
         CLC   INFL(2,OUTAREA),RMAX(TYPER)     RECORD FILLED
         BNL   GEN3                     YES,CALL FOR NEW
GEN6     LA    L,56
         LH    REG0,INFL(0,OUTAREA)     REG0=LENGTH OF INFORM IN REC
         SR    L,REG0                   L=EMPTY POS LEFT IN RECORD
         CR    L,LENGTH                 ENOUTH SPACE LEFT
         BL    *+6                      NO
         LR    L,LENGTH                 YES L=LENGTH FROM CALL
         AR    L,REG0
         STH   L,INFL(0,OUTAREA)        INSERT NEW LENGTH INTO RECORD
*
         SR    L,REG0
         AR    OUTAREA,REG0             START ADDRESS WITHIN RECORD
         SR    LENGTH,L                 REMAINING LENGTH
         B     RMOV(TYPER)              TO DIFFERENT MOVE ROUTINES
*
GEN4     LTR   LENGTH,LENGTH            MORE INFORMATION MUST BE MOVED
         BH    GEN3                     YES
         BR    RETURN
         SPACE 3
GEN3     EQU   *                        CALL FOR NEW OUTPUT RECORD
PUNCH    ST  14,SAVAR
         TM    HCOMPMOD+1,X'60'    Q. BOTH DECK AND LOAD SPECIFIED
         BZ    BOTH                     YES
         TM    HCOMPMOD+1,NDCK         Q. ONLY DECK
         L     OUTAREA,PCHADD           IF ONLY DECK
         BZ    PUT1                     YES
         L     OUTAREA,LINADD           ONLY SYSLIN
PUT1     PUT   (OUTAREA)                PUT FOR SYSLIN AND SYSPUNCH IF
         ST    OUTAREA,SAVOUTA          ONLY SYSPUNCH SPECIFIED
         L     14,SAVAR
         B     PUNCHOUT
BOTH     TM    BITS2,X'02'              Q. FIRST PUT
         BZ    FIRSTPUT                 YES
         L     LENGTH,OUTAREA2          COPY SYSLIN BUFFER TO SYSPUNCH
         L     OUTAREA,SAVOUTA
         MVC   0(80,LENGTH),0(OUTAREA)  BUFFER
PUT2     L     OUTAREA,PCHADD
         PUT   (OUTAREA)                PUT FOR SYSPUNCH WHEN BOTH HAS
         ST    OUTAREA,OUTAREA2         BEEN SPECIFIED
         B     PUT1-4                   GO TO PUT SYSLIN
FIRSTPUT OI    BITS2,X'02'
         B     PUT2
PUNCHOUT EQU   *
         MVC   0(4,OUTAREA),RSTART(TYPER)     INSERT FIRST 4 BYTES
         MVI   4(OUTAREA),C' '          INSERT ONE BLANK
         MVC   5(67,OUTAREA),4(OUTAREA)      BLANK OUTPUT RECORD
         MVC   72(4,OUTAREA),PIDENT     INSERT PROGRAM IDENT
         L     L,SEQU
         LA    L,1(0,L)
         ST    L,SEQU
         CVD   L,DOUBLE
         UNPK  76(4,OUTAREA),DOUBLE+5(3)
         MVZ   79(1,OUTAREA),76(OUTAREA)
         MVC   10(2,OUTAREA),RLEN(TYPER)     INSERT INITIAL LENGTH
         MVC   14(6,OUTAREA),RESID(TYPER)     INSERT ESID+R AND P
         CLC   TXTT+1(3),RTYP(TYPER)    TXT-RECORD PROCESSED
         BNE   GEN6                     NO
         ST    PRPOINT,4(OUTAREA)       YES INSERT PRPOINT
         MVI   4(OUTAREA),C' '
         B     GEN6
         SPACE 3
* TABLES AND MOVE ROUTINES
         SPACE 3
ESDT     DS    0H                  START OF ESD-RECORD TABLE
         DC    X'02'                    CARD CODE
         DC    C'ESD'                   IDENTIFICATION
         DC    H'0'                     INITIAL LENGTH 0
         DC    C'      '
         DC    H'48'                    MAXIMUM LENTH IN RECORD
GEN7     EQU   *                   MOVE ESD-INFORMATION TO OUTAREA
         MVC   16(16,OUTAREA),0(INFORM)     MOVE INFORM TO OUTAREA
         MVC   25(7,OUTAREA),ESDCON     CHANGE LAST PART OF ENTRY
         LA    TYPER,1                 ESID NR IS 1
         STH   TYPER,14(OUTAREA)        YES INSERT ESID NUMBER
         B     10(INFORM)               RETURN TO CALLING ROUTINE
         SPACE 3
TXTT     DS    0H                  START OF TXT-RECORD  TABLE
         DC    X'02'                    CARD CODE
         DC    C'TXT'                   IDENTIFICATION
         DC    H'0'                     INITIAL LENGTH 0
         DC    H'1'                     ESID
         DC    C'    '
         DC    H'56'                    MAXIMUM LENGTH
GEN8     EQU   *                   MOVE TXT-INFORMATION TO OUTAREA
         BCTR  L,0                      L=L-1
         STC   L,*+5                    INSERT PROPER LENGTH TO MOVE
         MVC   16(0,OUTAREA),0(INFORM)      MOVE INFORM TO OUTAREA
         LA    PRPOINT,1(L,PRPOINT)     INCREASE PROGRAM POINTER
         LA    INFORM,1(L,INFORM)       MODIFY DATA ADDRESS
         B     GEN4                     OUT OF MOVE TXT ROUTINE
         SPACE 3
* VARIABLES AND CONSTANTS
DEC1     DC    P'1'                     ADD CONSTANT
ESDCON   DC    X'000000'                ESD-
         DC    C'    '                  *CONSTANT,7 BYTES
         SPACE 3
WORKAREA DSECT
         COPY  WORKAREA
C        DS    H                  PARENTHESIS COUNT
KB       DS    H                  HOLDS ID FIELD FOR SPECIFICATIONS
POOLLEN  DS    F                  LENGTH OF AREA GOTTEN FROM GETMAIN
POOLLOC  DS    F                  START LOC. OF AREA FROM GETMAIN
AITABBUF DS    F                  ADD. OF ITAB BUFFER
ELI      DS    F                  ADD. OF ONE LOC. BEYOND ITAB AREA
ADDARI   DS    A                  ADDRESS OF FIRST O/P BUFFER
         DS    A                  ADD. OF SECOND O/P BUFFER
DISP     DS    C                  DISPLACEMENT TO ADDARI
D        DS    C                  DIMENSION COUNTER
SPCLT    EQU   PRPT
SP       DS    F                  CURRENT STACK POINTER
SC       EQU   SEMCNT
APE      DS    F                  LAST AVAILABLE BYTE IN CURRENT O/P
WASAVE   DS    CL12
WABEFOR  DS    CL7
WA       DS    CL80               INPUT AREA
APRNTAR  DS    A                  ADD. OF CURRENT PRINTAREA
ATOPSTAK DS    A                  LAST BYTE IN THE STACK
IGC      DS    H                  ITAB GROUP COUNTER
AGT      DS    A                  ADD. OF GROUPE TAB. -3
AKOPOOL  DS    A                  ADD. OF THE CONSTANT POOL (0)
LAPIN    DS    A                  ADD. OF LAST POSS. LABEL START
DIM      DS    A                  ADD. FOR DIMENSION IN ITAB NAME
PRIMPAR  DS    A                  ADD. OF FIRST SPECIFICATION
AITAB    DS    A                  START ADD. OF ITAB
AITL     DS    A                  CURRENT ITAB ENTRY ADD.
LIGP     DS    A                  POINTER TO CURRENT IG HEAD ENTRY
LPBP     DS    A                 POINTER TO CURRENT PBHEADING
WADDARI  DS    A                  CURRENT O/P BUFFER ADD.
ITABLEN  DS    F                  ITAB LENGTH
MGESITL  DS    F                  ACCUMULATED ITAB LENGTH
BCHAR    DS    C                  SAVE CHAR.
FBYTE    DS    CL1                SWITCH BYTE FOR APOSTROPHE
FSN      DS    C                 FORSTATEMENR COUNTER
ZFSNMAX  DS    C
PBC      DS    C                  PROGRAM BLOCK COUNTER
ONC      DS    C                  O/P REC. COUNTER
N        DS    C                  NR. OF ARRAYS WITH SAME DIM.
OPIN     DS    A                  POINTS TO LAST LABEL OPERATER
         DS    C                  O/P REC. NR. WHEN OPIN WAS SET
PZ       DS    C                  COUNTS NR. OF PARMETERS
BITS1    DS    C                  INTERNAL SWITCHES
BEGBIT   EQU   X'80'              BLOCK BEGIN
BEGOFF   EQU   X'7F'
PROBIT   EQU   X'40'              PROCEDURE HEAD PROCESSING
DELTABIT EQU   X'20'              SEMICOLON FOUND AFTER DECLARATION
IDBIT    EQU   X'10'              PROCEDURE NAME
ARBIT    EQU   X'08'              ARRAY PROCESSED
LISTBIT  EQU   X'04'              COMMA FOUND AFTER ARRAY NAME
TERBIT   EQU   X'01'              RETURN TO TERM. AFTER PBLCKEND
BITS2    DS    C
ENDBIT   EQU   X'80'              LOGICAL END HAS BEEN FOUND
COBIT    EQU   X'40'              COMMENT
STARTBIT EQU   X'20'              ZERO UNTIL FIRST BEGIN FOUND
VALBIT   EQU   X'10'              VALUE
PB0BIT   EQU   X'08'              WRITE PB0 FOR PRE. COMP. PROC.
FRSTPUT  EQU   X'02'              FIRST PUT IN GENERATE
ENDELSE  EQU   X'01'              END MAY CLOSE FOR OR PROC**
BITS3    DS    C
E11BIT   EQU   X'80'              E11 HAS BEEN GENERATED ONCE
FMBIT    EQU   X'40'               FORMAL PARAMETER BIT
FMOFF    EQU   X'BF'
NOFREE   EQU   X'20'              INTERUPT BEFORE GETMAIN
FRSITB   EQU   X'10'              FIRST ITAB REC. IS WRITTEN
PROCESD  EQU   X'08'              WRITE SED CARD FOR PRE. COMP. PROC.
PROCOFF  EQU   X'F7'
         END   IEX11000
