 TITLE 'IEX51, TERMINATION OF COMPILATION'
*                                                                     *
*STATUS: CHANGE LEVEL 000                                             *
*                                                                     *
*FUNCTION/OPERATION:                                                  *
*   CSECT IEX51000: THE TABLES NEEDED AT OBJECT TIME ARE PREPARED AND *
*   INCLUDED IN THE OBJECT MODULE. THEY ARE PROGRAM BLOCK TABLE, LABEL*
*   ADDRESS TABLE, AND DATA SET TABLE. ESD-CARDS FOR THE REQUIRED     *
*   LIBRARY ROUTINES ARE GENERATED. THE INFORMATION REQUIRED TO START *
*   THE EXECUTION, INCLUDING THE END-CARD, IS GENERATED. A TABLE      *
*   CONTAINING THE DSA-SIZES FOR THE PROGRAM BLOCKS IS PREPARED AND   *
*   TOGETHER WITH THE OBJECT MODULE SIZE PUT OUT TO SYSPRINT.         *
*   CSECT IEX60000: THE ERROR PATTERNS GENERATED DURING COMPILATION   *
*   PHASE ARE HANDLED AND THE CORRESPONDING DIAGNOSTIC MESSAGES ARE   *
*   GENERATED.                                                        *
*   CSECT IEX51002: ALL AREAS RESERVED ARE RELEASED AND THE DATA      *
*   CONTROL BLOCKS NOT CLOSED EARLIER ARE CLOSED, THE ORIGINAL PICA IS*
*   RESTORED, THE RETURN CODE IS FOUND, AND CONTROL IS GIVEN TO       *
*   COMPILER DIRECTORY, IEX00.                                        *
*                                                                     *
*ENTRY POINTS:                                                        *
*        IEX51000 - NORMAL END OF COMPILATION.    XCTL EP=IEX51000    *
*   THE MODULE IS NORMALLY ENTERED FROM IEX40.                        *
*        IEX51ER1 - ABNORMAL END OF COMPILATION.  XCTL EP=IEX51ER1    *
*   IS USED BY IEX40 AND IEX50.                                       *
*        IEX51ER2 - ABNORMAL END OF COMPILATION.  XCTL EP=IEX51ER2    *
*   IS USED BY IEX40.                                                 *
*        IEX51002 - ABNORMAL END OF COMPILATION.  XCTL EP=IEX51002    *
*   IS USED BY IEX00, IEX21, AND IEX31.                               *
*                                                                     *
*INPUT: N/A                                                           *
*                                                                     *
*OUTPUT: PART OF THE OBJECT MODULE IS GENERATED AND PUT OUT ON SYSLIN *
*   AND/OR SYSPUNCH.                                                  *
*   STORAGE REQUIREMENTS AND DIAGNOSTIC MESSAGES ARE PUT OUT ON       *
*   SYSPRINT.                                                         *
*                                                                     *
*EXTERNAL ROUTINES: THE PRINT ROUTINE IN IEX00 IS USED.               *
*                                                                     *
*EXIT-NORMAL: CONTROL IS GIVEN TO COMPILER DIRECTORY, IEX00, BY MEANS *
*   OF THE RETURN MACRO INSTRUCTION AT LOCATION RETURN.               *
*                                                                     *
*EXIT-ERROR: AFTER PROGRAM INTERRUPTS AND I/O-ERRORS THE MODULE GETS  *
*   CONTROL BACK AND EXITS NORMALLY.                                  *
*                                                                     *
*TABLES/WORKAREAS: THE MESSAGE TEXTS WITH CORRESPONDING ADDRESS TABLE *
*   ARE IN THE LOAD MODULE IEX51M.                                    *
*   THE ERROR MESSAGE EDITING ROUTINE, CSECT IEX60000, ALSO USES THE  *
*   FOLLOWING TABLES:                                                 *
*   WINTEBC   FOR TRANSLATION OF INTERNAL CHARACTERS TO EBCDIC        *
*   WSYMBSRC  FOR TRANSLATION OF                                      *
*   WSYMBSTK                     INTERNAL SYMBOLS TO EBCDIC           *
*   WORDSEBC  FOR TRANSLATION OF COMPOUND SYMBOLS IF SOURCE IN EBCDIC *
*   WORDSISO  FOR TRANSLATION OF COMPOUND SYMBOLS IF SOURCE IN ISOCODE*
*   WEBCDIC   FOR TRANSLATION EBCDIC-EBCDIC                           *
*   A WORKAREA OF 270 BYTES, WAREA, IS USED FOR BUILDING THE MESSAGES.*
*                                                                     *
*   FOR THE EXTERNAL REFERENCES TO THE LIBRARY ROUTINES ONE OF THE    *
*   TABLES SHRTAB AND LNGTAB, CONTAINING THE MODULE NAMES, IS USED.   *
*   THE GENERATE ROUTINE USES THREE TABLES, ESDT, TXTT, AND RLDT, FOR *
*   GENERATION OF THE DIFFERENT TYPES OF OBJECT RECORDS.              *
*                                                                     *
*   THE PART OF COMMON WORKAREA STARTING AT DCBUT1 IS INITIALIZED BY  *
*   THE LOAD MODULE IEX40 AND IS USED BY THIS AND THE PRECEDING LOAD  *
*   MODULE.                                                           *
*                                                                     *
*ATTRIBUTES: NONE.                                                    *
*                                                                     *
*NOTES: CHARACTER CODE DEPENDENCE:                                    *
*   CSECT IEX51000: THE OPERATION OF THE ROUTINES 'GENERATE' AND      *
*   'PRINT STORAGE REQUIREMENTS' DEPENDS UPON AN INTERNAL REPRESENTA- *
*   TION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT TO THE ONE *
*   USED AT ASSEMBLY TIME.                                            *
*                                                                     *
*   CSECT IEX60000: FOR THE BUILDING OF A MESSAGE (CODE PART BETWEEN  *
*   COT03 AND COT12) THE FOLLOWING APPLIES:                           *
*   IN CASE NO SOURCE INFORMATION IS TO BE INSERTED (COT31), OR IF    *
*   THE INFORMATION IS EBCDIC-CHARACTERS (COT07), THE OPERATION OF    *
*   CSECT IEX60000 DEPENDS UPON AN INTERNAL REPRESENTATION OF THE     *
*   EXTERNAL CHARACTER SET WHICH IS EQUIVALENT TO THE ONE USED AT     *
*   ASSEMBLY TIME.                                                    *
*   IF THE SOURCE INFORMATION TO BE INSERTED IS INTERNAL CHARACTERS   *
*   (COT33) THE OPERATION OF CSECT IEX60000 DEPENDS UPON A TRANSLATION*
*   FROM THE INTERNAL REPRESENTATION TO THE EBCDIC CHARACTER SET BY   *
*   MEANS OF THE TABLE 'WINTEBC'.                                     *
*   IF THE SOURCE INFORMATION TO BE INSERTED IS INTERNAL ALGOL SYMBOLS*
*   (COT10) THE OPERATION OF CSECT IEX60000 DEPENDS UPON A TRANSLATION*
*   FROM THE INTERNAL REPRESENTATION TO THE EBCDIC CHARACTER SET BY   *
*   MEANS OF THE TABLES 'WSYMBSTK'/'WSYMBSRC' AND 'WORDSISO'/         *
*   'WORDSEBC'.                                                       *
*   FOR THE OUTPUT OF A MESSAGE (CODE PART BETWEEN COT12 AND COT21)   *
*   THE FOLLOWING APPLIES:                                            *
*   WHEN A MESSAGE HAS BEEN BUILT IN EBCDIC, AN EBCDIC-EBCDIC TRANSLA-*
*   TION IS PERFORMED BEFORE OUTPUT BY MEANS OF THE TABLE 'WEBCDIC'.  *
*   THUS THE OUTPUT MAY BE MODIFIED BY MAKING CHANGES IN THIS TABLE.  *
*                                                                     *
*   THE OPERATION OF THE OTHER PARTS DOES NOT DEPEND UPON A PARTICULAR*
*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *
*                                                                     *
*   AT SYSTEM GENERATION THIS MODULE WILL BE LINKED TOGETHER WITH     *
*   THE MODULE IEX51M TO FORM THE MODULE IEX51 IN LINKLIB.            *
*                                                                     *
*   THIS MODULE IS ONLY INTENDED TO BE EXECUTED IN CONNECTION         *
*   WITH THE OTHER MODULES OF THE ALGOL COMPILER. IN PARTICULAR IT    *
*   REQUIRES THE COMMON WORKAREA.                                     *
*                                                                     *
         EJECT
IEX51000 CSECT
*0057056200                                                        1511
         SPACE 2
* REGISTER DEFINITIONS
         SPACE
WRK      EQU   1
RAREA    EQU   1
RINFO    EQU   1                        ADDRESSES INFO FOR ERROR ED
RCOT     EQU   2                        ADDRESSES ERROR ED ROUTINE
WRK1     EQU   2
WRK2     EQU   3
WRK3     EQU   4
WRK4     EQU   5
RMDSN    EQU   5
RPRPT    EQU   6
WRK8     EQU   6
RIO      EQU   7
WRK5     EQU   7
RZERO    EQU   8
WRK9     EQU   8
WRK6     EQU   9
RBASE    EQU   10
WRK7     EQU   11
RWRKA    EQU   13
RET      EQU   14
RENTRY   EQU   15
         SPACE 2
* OTHER DEFINITIONS
         SPACE
RASLGT   EQU   2048                     LENGTH OF RETURN ADDRESS STACK
LPGCF    EQU   28                       LENGTHOF PUT/GET CONTROL FIELD
         SPACE 2
* ENTRY POINTS
         SPACE
         ENTRY IEX51ER1
         ENTRY IEX51ER2
         EJECT
         USING *,RBASE
         USING WORKAREA,RWRKA
         SPACE
         LR    RBASE,RENTRY
         SR    RZERO,RZERO
         SPACE 2
TRM1     EQU   *                   TEST MODE
         LA    WRK1,TRMERR1             GIVE DIRECTORY
         ST    WRK1,ERET                               RETURN ADDRESS
         OI    HCOMPMOD+2,NOSC          INDICATE NO SC AVAILABLE
         TM    HCOMPMOD,X'80'           COMPILE MODE
         BO    TRM10                    NO, BYPASS ALL CODE GENERATION
         TM    HCOMPMOD+1,X'60'         ARE NOLOAD AND NODECK SPECIFIED
         BO    TRM10                    YES, NO CODE GENERATION
         SPACE 2
TRM8     EQU   *                   GENERATE LAT, TXT-CARDS
         ST    RPRPT,PRPTAR             SET
         TM    PRPTAR+3,X'02'               PRPOINTER
         BZ    TRM4                                   TO
         LA    WRK1,ZEROHW              FULL-
         BAL   RET,GENTXTS                   WORD
         DC    H'2'                               BOUNDARY
TRM4     ST    RPRPT,ALAT               SAVE PRPOINTER AT LAT-BEGIN
         SPACE
         L     WRK1,LATAB               GET ADDRESS OF LAT
         LH    WRK2,LN                  GET DISPLACEMENT OF LAST LABEL
         LA    WRK2,4(0,WRK2)           LENGTH OF LAT
         STH   WRK2,*+8
         BAL   RET,GENTXTS              GENERATE TXT-CARDS
TRM39    DC    H'0'                     LENGTH OF LAT
         SPACE 2
TRM40    EQU   *                   RLD-CARDS FOR LAT
         LH    WRK2,TRM39               GET LENGTH OF LAT
         LA    WRK3,LATBEG+4            GET LENGTH OF 1ST PART
         SR    WRK2,WRK3                GET LENGTH OF LAST PART
         BC    12,TRM42                 BRANCH IF NOT GRT ZERO
         STH   WRK2,TRM41               STORE LENGTH OF LAST PART
         SPACE
         L     WRK1,ALAT                GET PRPOINTER AT LAT BEGIN
         LA    WRK1,LATBEG+4(0,WRK1)    PRPOINTER AT LAST PART
         BAL   RET,GENRLD               GENERATE RLD-CARD
TRM41    DC    H'0'                     LENGTH OF LAST PART
         DC    H'1'
         DC    H'1'
         SPACE 2
TRM42    EQU   *                   ESD-CARDS FOR LAT
         L     WRK4,LATAB               GET ADDRESS OF LAT
         LA    WRK5,LATNR               GET NR OF ENTRIES FOR ST FUNCS
         LA    WRK6,SHRTAB              ADDRESS TABLE FOR SHORT PREC
         TM    HCOMPMOD,X'02'           TEST PRECISION
         BZ    *+8                      SHORT
         LA    WRK6,LNGTAB              LONG, CHANGE ADDRESS
         SPACE
TRM44    CLI   0(WRK4),X'00'            IS ROUTINE USED
         BNE   TRM45                    NO
         MVC   TRM43+3(5),0(WRK6)       YES, MOVE NAME TO ESD CALL
         SPACE
         BAL   WRK1,GENESD              GENERATE ESD-CARD
TRM43    DC    CL8'IHI     '
         DC    X'02'
         SPACE
TRM45    LA    WRK4,4(0,WRK4)           STEP
         LA    WRK6,5(0,WRK6)                ADDRESSES
         BCT   WRK5,TRM44               HANDLE NEXT ENTRY IF ANY
         SPACE 2
TRM46    EQU   *                   RLD-CARDS FOR ESD-ENTRIES IN LAT
         L     WRK7,ALAT                GET PRPOINTER AT LAT BEGIN
         L     WRK4,LATAB               GET ADDRESS OF LAT
         LA    WRK5,LATNR               GET NR OF ENTRIES FOR ST FUNCS
         LA    WRK6,1                   INIT REG FOR R-ESID FOR RLDCALL
         SPACE
TRM49    CLI   0(WRK4),X'00'            IS ROUTINE USED
         BNE   TRM48                    NO
         LA    WRK6,1(0,WRK6)           YES, GET ESID FOR R
         STH   WRK6,TRM47               GIVE TO RLD-CALL
         SPACE
         LR    WRK1,WRK7
         BAL   RET,GENRLD               GENERATE RLD-CARD
         DC    H'4'                     LENGTH OF ADDRESS TABLE
TRM47    DC    H'0'                     ESID OF RELOC FACTOR R
         DC    H'1'                     ESID OF POSITION IDENTIFIER P
         SPACE
TRM48    LA    WRK7,4(0,WRK7)           STEP
         LA    WRK4,4(0,WRK4)                ADDRESSES
         BCT   WRK5,TRM49               HANDLE NEXT ENTRY IF ANY
         SPACE 2
TRM2     EQU   *                   GENERATE PBTAB, 4TH VERSION, TXTCRDS
         ST    RPRPT,APBT               STORE PRPOINTER
         LA    WRK2,PBTAB3+4            GET START-
         L     WRK3,APBTAB4                       ADDRESSES
         ST    RZERO,0(0,WRK3)          SET ZEROES
         LH    WRK1,PBN                 GET NR OF PROGRAM BLOCKS
         SPACE
         LA    WRK3,4(0,WRK3)           STEP ADDRESS
         MVC   0(4,WRK3),PIDENT         INSERT PROGRAM IDENTIFICATION
TRM5     ST    RZERO,4(0,WRK3)          INSERT ZEROES
         LA    WRK3,8(0,WRK3)           STEP ADDRESS
         L     WRK7,0(0,WRK2)           TAKE PBTAB3 ENTRY
         LH    WRK4,ONEENTRY            ADD
         SLL   WRK4,16                      SIZE OF
         AR    WRK7,WRK4                            ONE ENTRY
         ST    WRK7,0(0,WRK3)                                 IN DSA
         LA    WRK2,4(0,WRK2)           STEP ADDRESS
         BCT   WRK1,TRM5                MOVE NEXT IF ANY
         LA    WRK3,4(0,WRK3)
         SPACE
         LH    WRK1,KBN                 GET NUMBER
         LTR   WRK1,WRK1                           OF LAST CONST BLOCK
         BC    8,TRM7                   NO MORE BLOCK THAN NR ZERO
         SPACE
         SH    WRK1,PBN                 GET NR OF CONST BLKS EXCEPT 0
         LH    WRK2,FOURK               GET LENGTH OF CONST BLOCK
         LR    WRK4,WRK2
         ST    RZERO,4(0,WRK3)          INSERT ZEROES
TRM6     ST    WRK2,0(0,WRK3)           STORE DISP OF CONST BLOCK
         LA    WRK3,8(0,WRK3)           STEP ADDRESS
         AR    WRK2,WRK4                INCREASE DISPLACEMENT
         BCT   WRK1,TRM6                STORE NEXT IF ANY
         SPACE
TRM7     L     WRK1,APBTAB4             GET ADDR OF PBTAB4
         LR    WRK4,WRK3                COMPUTE
         SR    WRK4,WRK1                        LENGTH OF
         STH   WRK4,*+8                                   PBTAB4
         BAL   RET,GENTXTS              GENERATE TXT-CARDS
         DC    H'0'                     LENGTH OF PBTAB4
         SPACE 2
TRM52    EQU   *                   RLD-CARDS FOR PBTAB4
         L     WRK5,APBT                GET PRPOINTER AT PBTAB4 BEGIN
         B     TRM53                    GENERATE RLD-CARD
TRM70    NI    TRM71+1,X'0F'            CHANGE BRANCH CONDITION
         SPACE
         LH    WRK4,KBN                 GET NR OF LAST CONST BLOCK
         CR    RZERO,WRK4               IS IT ZERO
         BE    TRM10                    YES
         LH    WRK1,PBN                 NO, GET NR OF
         SR    WRK4,WRK1                              CONST BLKS EXC 0
         SLL   WRK1,3                   GET PRPOINTER
         LA    WRK5,8(WRK1,WRK5)            AT 2ND CONST BLK       1511
         SPACE
TRM53    LR    WRK1,WRK5
         BAL   RET,GENRLD
         DC    H'4'
         DC    H'1'
         DC    H'1'
         SPACE
TRM71    BC    15,TRM70                 BRANCH AFTER FIRST CARD
         LA    WRK5,8(0,WRK5)           STEP ADDRESS
         BCT   WRK4,TRM53               HANDLE NEXT ENTRY IF ANY
         SPACE 2
TRM10    EQU   *                   CONSTRUCT DATA SET TABLE
         LA    WRK1,DSTAB               GET ADDR OF DSTAB
         ST    RPRPT,DSTABPRP           STORE PRPOINTER
         LA    RIO,IOTAB                GET ADDR OF IOTAB
         SPACE
         LA    RMDSN,15                 LOAD MAX DS NUMBER
         TM    16(RIO),X'FF'            HAS UNDET DS NR OCCURRED
         BC    7,TRM12-2                YES, MDSN=15
         LA    WRK2,15                      DETER-
         LA    WRK7,1
TRM11    LA    WRK3,0(WRK2,RIO)
         CLI   0(WRK3),X'00'
         BNE   *+12                                    MAX
         BCTR  WRK2,0                                      DS
         CR    WRK2,WRK7
         BNE   TRM11
         LR    RMDSN,WRK2                                     NR
         STH   WRK2,MDSN                                         USED
         BCTR  RMDSN,0                  GET MAX DS NR MINUS ONE
         SPACE
TRM12    LA    WRK2,36                  CALC
         MH    WRK2,MDSN                     LGT OF DSTAB
         LA    WRK2,40(0,WRK2)                            WITHOUT PGCF
         STH   WRK2,DSTABLGT
         LA    WRK2,0(WRK2,RPRPT)       STORE
         ST    WRK2,0(0,WRK1)                 PGCF-POINTER
         SPACE
         SR    WRK7,WRK7                LOAD DS NR FOR ERROR PATTERN
         TM    0(RIO),X'70'             CORRECT SPEC FOR SYSIN
         LA    RET,TRM19                GET RETURN ADDR FOR ERROR RTN
         BC    7,ERR188                 NO,GENERATE ERROR PATTERN
         MVC   4(36,WRK1),DSTEM         YES, INSERT STANDARD MASK
         LA    WRK7,1                   LOAD DS NR FOR ERROR PATTERN
         TM    1(RIO),X'A0'             CORRECT SPEC FOR SYSPRINT
         BC    7,ERR188                 NO, GENERATE ERROR PATTERN
         MVC   40(36,WRK1),DSTEM        YES, INSERT STANDARD MASK
         MVI   66(WRK1),X'02'           CHANGE DS FIELD
         MVI   74(WRK1),X'02'
         SPACE
TRM19    LR    WRK2,RMDSN               GET MAX DS NR MINUS ONE
         LTR   WRK2,WRK2                IS RESULT ZERO
         BC    8,TRM22                  YES, BYPASS MANIP ON BYTES 2-15
         NI    16(RIO),X'EF'            RESET SYSACT8 BIT
         TM    16(RIO),X'01'            TEST IF PRE.COMP. PROCEDURE
         BZ    TRM192                   NO
         LA    WRK3,76(0,WRK1)          GET ADDR OF DS2 IN DSTAB
TRM191   MVC   0(36,WRK3),DSTEM         MOVE STANDARD MASK
         MVI   26(WRK3),X'42'           CHANGE DS FIELD
         MVI   34(WRK3),X'42'
         LA    WRK3,36(0,WRK3)          NEXT DS NR IN DSTAB
         BCT   WRK2,TRM191
         B     TRM22
TRM192   TM    16(RIO),X'FF'            IS BYTE 16 ZERO
         BZ    TRM15                    YES
TRM14    LA    WRK3,1(WRK2,RIO)         NO, OR
         TM    0(WRK3),X'10'                   BYTE 16
         BO    *+10                                    INTO BYTES NOT
         OC    0(1,WRK3),16(RIO)        CONTAINING
         BCT   WRK2,TRM14                          SYSACT8 INDICATION
         SPACE
TRM15    LR    WRK2,RMDSN               GET MAX DS NR MINUS ONE
TRM16    LA    WRK3,1(WRK2,RIO)         INDICATE
         TM    0(WRK3),X'C0'                     SYSACT4/13
         BC    14,*+8                                       IN BYTES
         OI    0(WRK3),X'20'            WITH INPUT
         BCT   WRK2,TRM16                          AND OUTPUT INDIC
         SPACE
         LR    WRK2,RMDSN               GET MAX DS NR MINUS ONE
TRM17    LA    WRK3,1(WRK2,RIO)
         LA    WRK7,1(0,WRK2)           LOAD DS NR FOR ERROR PATTERN
         TM    0(WRK3),X'10'            IS SYSACT8 INDICATED
         BZ    TRM18                    NO
         TM    0(WRK3),X'A0'            YES, IS INPUTOR SYSACT4/13 IND
         BZ    *+12                     NO
         LA    RET,*+12                 YES, GENERATE
         B     ERR188                                 ERROR PATTERN
         NI    0(WRK3),X'F7'            RESET UNDET SYSACT BIT
TRM18    BCT   WRK2,TRM17               EXAMINE NEXT BYTE IF ANY
         SPACE
         LR    WRK2,RMDSN               GET MAX DS NR MINUS ONE
         LA    WRK3,76(0,WRK1)          GET ADDR OF DS2 IN DSTAB
         LA    WRK,2(0,RIO)             GET ADDR OF 2ND BYTE IN IOTAB
TRM20    MVC   0(36,WRK3),DSTEM         MOVE STANDARD MASK
         TM    0(WRK),X'28'             IS SYSACT4/13 OR UND SA IND
         BC    7,TRM21                  YES
         TM    0(WRK),X'40'             NO, IS OUTPUT INDICATED
         BZ    TRM211
         MVI   26(WRK3),X'02'           YES, CHANGE DS FIELD
         MVI   34(WRK3),X'02'
         B     TRM211
TRM21    TM    0(WRK),X'40'             IS OUTPUT INDICATED
         BO    *+16                     YES
         MVI   26(WRK3),X'40'           NO, CHANGE DS FIELD
         MVI   34(WRK3),X'40'
         B     *+12
         MVI   26(WRK3),X'42'           CHANGE DS FIELD
         MVI   34(WRK3),X'42'
TRM211   LA    WRK3,36(0,WRK3)          NEXT DS NR IN DSTAB
         LA    WRK,1(0,WRK)             NEXT BYTE IN IOTAB
         BCT   WRK2,TRM20
         SPACE
TRM22    TM    17(RIO),X'FF'            IS BYTE 17 ZERO
         BZ    TRM27                    YES
         LH    WRK2,DSTABLGT            NO, GET ADDRESS
         LA    WRK2,0(WRK2,WRK1)                        OF PGCFIELD
         MVI   0(WRK2),X'00'            INSERT ZEROES
         MVC   1(27,WRK2),0(WRK2)                     IN PGCF
         LA    WRK3,2048                INITIATE
         ST    WRK3,16(0,WRK2)                   BE-FIELD
         B     TRM23
         SPACE
TRM27    MVI   0(WRK1),X'80'            INDICATE NO PUT/GET
         SPACE 2
TRM23    EQU   *                   GENERATE DSTABLE, TXT-CARDS
         TM    HCOMPMOD,X'80'           IS IT COMPILE MODE
         BO    TRM37                    NO, BYPASS CODE GENERATION
         TM    HCOMPMOD+1,X'60'         ARE NOLOAD AND NODECK SPECIFIED
         BO    TRM37                    YES, NO CODE GENERATION
         TM    HCOMPMOD,PROC            IS IT PROCEDURE COMPILATION
         BO    TRM24                    YES
         SPACE
         LH    WRK2,DSTABLGT            GET LGTH OF DSTAB WITHOUT PGCF
         CLI   0(WRK1),X'80'            IS THERE A PGCF
         BE    *+8                      NO
         LA    WRK2,LPGCF(0,WRK2)       YES,  ADD PGCF-LENGTH
         STH   WRK2,*+8                 STORE LENGTH IN CALLING SEQ
         BAL   RET,GENTXTS              GENERATE TXT-CARDS
         DC    H'0'                     LENGTH OF DSTAB
         SPACE 2
TRM32    EQU   *                   RLD-CARD FOR PGCF-ADDRESS IN DSTAB
         L     WRK1,DSTABPRP            GET PRPOINTER AT DSTAB BEGIN
         BAL   RET,GENRLD               GENERATE RLD-CARD
         DC    H'4'                     LENGTH OF ADDRESS
         DC    H'1'
         DC    H'1'
         SPACE 2
TRM24    EQU   *                   GENERATE TXT-CARDS, ADR TABLE
         MVC   ASTART(3),PRPT+1         GET PRPOINTER AT 1ST INSTR
         TM    HCOMPMOD,X'02'           TEST PRECISION
         BZ    *+8                      SHORT
         MVI   SW,X'00'                 LONG, CHANGE MASK
         ST    RPRPT,ADRPRP             STORE PRPOINTER AT ADR TABLE
         LA    WRK1,APBT                GET ADDRESS OF TEXT
         BAL   RET,GENTXTS
         DC    H'12'                    LENGTH OF TEXT
         SPACE 2
TRM28    EQU   *                   ESD-CARD FOR FSA-ADDRESS
         TM    HCOMPMOD,PROC            IS IT PROCEDURE COMPILATION
         BO    TRM54                    YES
         BAL   WRK1,GENESD              GENERATE ESD-CARD
TRM29    DC    C'IHIFSAIN'
         DC    X'0200'
         SPACE 2
TRM54    EQU   *                   RLD-CARDS FOR ADDRESS TABLE
         L     WRK1,ADRPRP              GET PRPOINTER AT ADDRESS TABLE
         BAL   RET,GENRLD               GENERATE RLD-CARDS
         DC    H'12'
         DC    H'1'
         DC    H'1'
         SPACE 2
TRM25    EQU   *                   ESD-CARD, LD ENTRY, FOR ENTRY INFO
         TM    HCOMPMOD,PROC            IS IT PROCEDURE COMPILATION
         BO    TRM35                    YES, BYPASS NEXT TWO CARDS
         SPACE
         MVC   TRM26(3),ADRPRP+1        MOVE PRPOINTER TO CALL
         BAL   WRK1,GENESD
         DC    CL8'IHIENTIF'            NAME
         DC    X'01'
TRM26    DC    X'000000'                PRPOINTER
         DC    C' '
         DC    X'000001'
         SPACE 2
TRM56    EQU   *                   ESD-CARD, LD ENTRY, FOR DSTAB
         MVC   TRM57(3),DSTABPRP+1      MOVE PRPOINTER TO CALL
         BAL   WRK1,GENESD
         DC    CL8'IHIDSTAB'            NAME
         DC    X'01'
TRM57    DC    X'000000'                PRPOINTER
         DC    C' '
         DC    X'000001'
         SPACE 2
TRM35    EQU   *                   GENERATE END-CARD
         LA    TYPER,ENDATA             GIVE ADDRESS OF DATA
         OI    GEN31+1,X'F0'            CHANGE BRANCH CONDITION
         B     GEN3                     GENERATE END-RECORD
TRM36    ST    RPRPT,28(0,OUTAREA)      STORE LENGTH OF CSECT IN ENDREC
         TM    HCOMPMOD,PROC            IS IT PROCEDURE COMPILATION
         BO    TRM34                    YES, MODIFY END-RECORD
         MVC   16(8,OUTAREA),TRM29      STORE ENTRY POINT IN END RECORD
         B     TRM33
TRM34    MVC   5(3,OUTAREA),ADRPRP+1    ADDRESS TABLE IS ENTRY POINT
         MVC   14(2,OUTAREA),TRM32+10   GET ESID FOR ENTRY POINT
TRM33    TM    HCOMPMOD+1,X'60'         BOTH SYSLIN AND SYSPUNCH
         BC    7,TRM51                  NO
         L     WRK1,OUTAREA2            MOVE END-RECORD
         MVC   0(80,WRK1),0(OUTAREA)                    TO PUNCH BUFFER
         EJECT
TRM51    EQU   *                   PRINT STORAGE REQUIREMENTS
         MVI   PAGEHEAD+2,C' '          BLANK LIST-
         MVC   PAGEHEAD+3(81),PAGEHEAD+2           HEADING 1
         MVC   PAGEHEAD+35(30),HD       PUT HEADING 1
         MVI   PAGEHEAD,X'01'           FOR LINE COUNT
         MVI   PAGEHEAD+1,X'09'
         MVI   PAGEHEAD+94,C' '         BLANK
         MVC   PAGEHEAD+95(89),PAGEHEAD+94    HEADING 2
         MVI   PAGEHEAD+186,X'FF'       NO HEADING 3
         MVI   LINCNT,X'7F'             NEW PAGE
         SPACE
         CVD   RPRPT,DEC                CONVERT LENGTH OF OBJECT MODULE
         BAL   RET,EDNR                 EDIT
         SPACE
         BAL   RET,PRINTT               OBTAIN OUTPUT BUFFER
         BCTR  RAREA,0                  SPACE
         MVI   0(RAREA),X'11'                 AFTER
         LA    RAREA,1(0,RAREA)                     THIS LINE
         MVC   0(19,RAREA),OBJ          MOVE FIRST TEXT PART
         LA    WRK1,L'EDAREA            FIND
         LA    WRK2,EDAREA                   FIRST
TRM55    CLI   0(WRK2),C' '                        SIGNIFICANT
         BNE   TRM58                                           DIGIT
         LA    WRK2,1(0,WRK2)           TEST
         BCT   WRK1,TRM55                    NEXT
         MVI   19(RAREA),C'0'           IF NO SIGNIFICANT DIGIT FOUND
         B     TRM59
TRM58    BCTR  WRK1,0                   MOVE
         STC   WRK1,*+5                      NUM-
         MVC   19(0,RAREA),0(WRK2)               BER
TRM59    LA    RAREA,1(WRK1,RAREA)      MOVE SECOND
         MVC   19(7,RAREA),BYT                     TEXT PART
          SPACE
         BAL   RET,PRINTT               OBTAIN OUTPUT BUFFER
         BCTR  RAREA,0                  SPACE
         MVI   0(RAREA),X'11'                 ONE LINE
         MVC   1(23,RAREA),DSA          SECOND PRINT LINE
         BAL   RET,PRINTT               OBTAIN OUTPUT BUFFER
         BCTR  RAREA,0                  SPACE
         MVI   0(RAREA),X'11'                 ONE LINE
         LA    WRK1,5                   GET NR OF ENTRIES IN ONE LINE
TRM60    MVC   3(11,RAREA),BLBY         BUILD
         LA    RAREA,18(0,RAREA)              THIRD
         BCT   WRK1,TRM60                           PRINT LINE
         SPACE
         BAL   RET,PRINTT
         SPACE
         L     WRK2,APBTAB4             INITIATE
         LH    WRK9,PBN                          REGISTERS
         SR    WRK3,WRK3                                   FOR TABLE
TRM62    LA    WRK1,5                   INITIATE FOR EACH PRINT LINE
         SPACE
TRM61    LA    WRK4,L'EDAREA            INITIATE
         SR    WRK6,WRK6                         FOR
         LA    WRK5,EDAREA                           EACH
         LA    WRK3,1(0,WRK3)                             ENTRY
         SPACE
         CVD   WRK3,DEC                 CONVERT
         UNPK  BLNR(3),DEC+6(2)                 AND MOVE
         MVZ   BLNR+2(1),BLNR+1                          BLOCK
         MVC   2(3,RAREA),BLNR                                 NUMBER
         SPACE
         LA    WRK2,8(0,WRK2)           GET PBTAB ENTRY
         LH    WRK7,4(0,WRK2)           GET DSA SIZE
         CVD   WRK7,DEC                 CONVERT TO DECIMAL
         BAL   RET,EDNR                 EDIT
TRM63    CLI   0(WRK5),C' '             FIND FIRST
         BNE   TRM64                               SIGNIFICANT DIGIT
         LA    WRK5,1(0,WRK5)           STEP FOR EVERY
         LA    WRK6,1(0,WRK6)                          NON-SIGNIF ZERO
         BCT   WRK4,TRM63
         MVI   12(RAREA),C'0'           IF ONLY ZEROES
         B     TRM65
TRM64    LA    WRK8,0(WRK6,RAREA)       STEP NR OF NON-SIGNIF ZEROES
         BCTR  WRK4,0                   STORE LENGTH
         STC   WRK4,*+5                              IN MOVE INSTR
         MVC   6(0,WRK8),0(WRK5)        MOVE EDITED NUMBER
         SPACE
TRM65    BCTR  WRK9,0                   ARE ALL PBTAB
         LTR   WRK9,WRK9                              ENTRIES HANDLED
         BC    8,TRM37                  YES
         SPACE
         LA    RAREA,18(0,RAREA)        MAKE NXT ENTRY
         BCT   WRK1,TRM61                              IF LINE NOT FULL
         SPACE
         BAL   RET,PRINTT               OBTAIN PRINT BUFFER
         B     TRM62
PRINTT   EQU   *                   OBTAIN OUTPUT BUFFER AND BLANK IT
         STM   RET,RENTRY,SV            SAVE REGS 14 AND 15
         L     RENTRY,PRTRTADD          CALL
         BALR  RET,RENTRY                    PRINT ROUTINE
         LM    RET,RENTRY,SV            RESTORE REGS
         SPACE
         BR    RET
         SPACE 2
EDNR     EQU   *                   EDIT DECIMAL NUMBER
         MVC   EDAREA(7),EDPTRN         MOVE PATTERN
         ED    EDAREA-1(8),DEC+4        EDIT
         BR    RET
         EJECT
TRMERR1  EQU   *                   DIRECTORY RETURN BEFORE FREEMAIN
IEX51ER1 EQU   *                   FREEMAIN
TRM37    L     WRK1,FREEMSIZ            GET INFO FOR
         L     RAREA,FREEMADR                        AREA RELEASE
         SPACE
         FREEMAIN R,LV=(2),A=(1)        RELEASE AREA
         SPACE
         BALR  RENTRY,0                 LOAD NEW BASE REGISTER
         SPACE 2
IEX51ER2 EQU   *                   TERMINATION
         USING *,RENTRY
         SPACE
TRM38    L     RCOT,=A(IEX60000)        ADDRESS IEX60000
         L     RET,=A(IEX51002)         LOAD RETURN ADDRESS
         LA    RINFO,ERRINFO            ADDRESS INFO FOR ERROR ED ROUT
         BR    RCOT                     GO TO ERROR MESSAGE EDITING
         SPACE
         LTORG
         SPACE
         DROP  RENTRY
         EJECT
ERR188   EQU   *                   GENERATE A PATTERN FOR ERROR MSG 188
         SR    WRK6,WRK6
         LA    WRK6,10                  IS DS NR
         CR    WRK7,WRK6                         9 OR LOWER
         BL    ER1                      YES
         SPACE
         SR    WRK7,WRK6                NO, SUBTRACT 10
         STC   WRK7,EP188+11                            AND STORE
         TR    EP188+11(1),NRTRA        CONVERT TO CHARACTER
         MVI   EP188+10,C'1'            INSERT FIRST DIGIT
         LA    WRK6,13                  GET LENGTH OF ENTRY
         B     ER2
         SPACE
ER1      STC   WRK7,EP188+10            STORE NUMBER
         TR    EP188+10(1),NRTRA                     AND CONVERT IT
         MVI   EP188+11,C'.'            INSERT PERIOD
         LA    WRK6,12                  GET LENGTH OF ENTRY
         SPACE
ER2      STC   WRK6,EP188               INSERT LENGTH OF ENTRY
         OI    EP188,X'80'              PUT A TAG FOR BLANK SC
         BCTR  WRK6,0                   DECREASE BY ONE
         STC   WRK6,ER3+1               STORE LENGTH IN MOVE INSTR
         SPACE
         L     WRK7,NEXTERR             GET NEXT ENTRY IN POOL
ER3      MVC   0(0,WRK7),EP188          MOVE PATTERN
         LA    WRK7,1(WRK6,WRK7)        UPDATE PTR TO
         ST    WRK7,NEXTERR                           NEXT FREE ENTRY
         C     WRK7,ENDPOOL             IS POOL FULL
         BH    ER4                      YES
         OI    HCOMPMOD,X'80'           NO, SET COMPILE MODE FALSE
         BR    RET                      RETURN
         SPACE
ER4      MVC   0(4,WRK7),EP0            MOVE PATTERN EP0
         LA    WRK7,4(0,WRK7)           UPDATE PTR AND
         ST    WRK7,NEXTERR                            STORE IT
         B     TRM37                    TERMINATE COMPILATION
         EJECT
* CONSTANTS AND AREAS
         SPACE
PRPTAR   DS    F                        AREA TO HANDLE PRPOINTER
DSTABPRP DS    F                        PRPOINTER AT DSTAB BEGIN
AFSAPRP  DS    F                        PRPOINTER AT AFSA
ADRPRP   DS    F                        PRPOINTER AT APBT
MDSN     DC    H'15'                    MAX DS NUMBER
FOURK    DC    H'4096'                  LENGTH OF CONSTANT BLOCK
DSTEM    DC    F'0'                     ADCB
         DC    F'0'                     R
         DC    F'0'                     RE
         DC    F'0'                     NBB
         DC    F'0'                     BB
         DC    H'1'                     S
         DC    H'80'                    P
         DC    X'02'                    K
         DC    X'00'                    Q
         DC    H'00'                    DS
         DC    F'0'                     NOTE ADDR
         DC    F'0'                     BL+ TWO ARB
DSTABLGT DS    H                        LENGTH OF DSTAB WITHOUT PGCF
ENDATA   DS    0H                  DATA TO BE INSERTED IN THE END-CARD
         DC    X'02'                    CARD CODE
         DC    C'END'                   IDENTIFICATION
         DC    C'  '                    BLANKS
         DC    C'  '                    BLANKS
         DC    C'    '                  BLANKS
APBT     DC    A(0)                     ADDRESS OF PBT
ALAT     DC    A(0)                     ADDRESS OF LAT
SW       DC    X'20'                    SWITCH FOR LONG/SHORT PREC
ASTART   DC    AL3(0)                   ADDRESS OF FIRST INSTRUCTION
         SPACE
HD       DC    C'STORAGE REQUIREMENTS (DECIMAL)'
OBJ      DC    C'OBJECT MODULE SIZE '
BYT      DC    C' BYTES.'
DSA      DC    C'DATA STORAGE AREA SIZES'
BLBY     DC    C'PBN   BYTES'
DEC      DS    D                        FOR CONVERSION OF NUMBERS
EDPTRN   DC    X'20202020202020'        PATTERN FOR EDITING
         DC    C' '                     FILL CHARACTER
EDAREA   DS    CL7                      FOR EDITING OF NUMBERS
BLNR     DS    3C                       FOR CONVERSION OF BLOCK NUMBER
SV       DS    2F                       SAVE AREA
         SPACE
EP188    DC    X'00BC0000'              ERROR PATTERN FOR
         DC    C'DSN = 00.'                               MESSAGE 188
EP0      DC    X'04000000'              ERROR PATTERN FOR MESSAGE 0
NRTRA    DC    C'0123456789'            FOR TRANSL OF DS NUMBER
         SPACE
ERRINFO  DC    V(IEX51M00)              ADDRESS OF MESSAGE TEXTS
         DC    V(IEX51M01)              ADDRESS OF ADDRESS TABLE
         DC    H'12'                    MODIFICATION NUMBER
         SPACE 2
         DS    0F
         SPACE 2
SHRTAB   EQU   *                   NAMES OF LIBRARY ROUTINES, SHORT
         DC    C'SYSCT'
         DC    C'SSQ  '
         DC    C'SSCS '
         DC    C'SSCC '
         DC    C'SAT  '
         DC    C'SLO  '
         DC    C'SEX  '
         DC    C'ISYMB'
         DC    C'IDEIR'
         DC    C'IDEII'
         DC    C'IBOOL'
         DC    C'IARRY'
         DC    C'IARRT'
         DC    C'IBARR'
         DC    C'OSYMB'
         DC    C'SOREL'
         DC    C'OINTG'
         DC    C'OBOOL'
         DC    C'OARRY'
         DC    C'OTARR'
         DC    C'OBARR'
         DC    C'OSTRG'
         DC    C'GPRPT'
         DC    C'GPRGT'
         DC    C'FII  '
         DC    C'FRI  '
         DC    C'FRR  '
         SPACE
LNGTAB   EQU   *                   NAMES OF LIBRARY ROUTINES, LONG
         DC    C'SYSCT'
         DC    C'LSQ  '
         DC    C'LSCS '
         DC    C'LSCC '
         DC    C'LAT  '
         DC    C'LLO  '
         DC    C'LEX  '
         DC    C'ISYMB'
         DC    C'IDEIR'
         DC    C'IDEII'
         DC    C'IBOOL'
         DC    C'IARRY'
         DC    C'IARRT'
         DC    C'IBARR'
         DC    C'OSYMB'
         DC    C'LOREL'
         DC    C'OINTG'
         DC    C'OBOOL'
         DC    C'OARRY'
         DC    C'OTARR'
         DC    C'OBARR'
         DC    C'OSTRG'
         DC    C'GPRPT'
         DC    C'GPRGT'
         DC    C'FII  '
         DC    C'FDI  '
         DC    C'FDD  '
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        S U B R O U T I N E   G E N E R A T E                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
* REGISTER DEFINITIONS
REG0     EQU   0                        VARIABLE USE
OUTAREA  EQU   1                        OUTPUT RECORD POINTER
INFORM   EQU   2                        ADDRESS OF INFORMATION
TYPER    EQU   3                        TYPE OF RECORD TO BE GENERATED
RETURN   EQU   4                        RETURN REGISTER
PRPOINT  EQU   6
LENGTH   EQU   14                       LENGTH OF INFORM. FROM CALL
L        EQU   15                       LENGTH WITHIN RECORD
         SPACE 3
*ADDRESS DISPLACEMENTS
RSTART   EQU   0                        START OF RECORD TYPE TABLE
RTYP     EQU   1                        RECORD IDENTIFICATION
RLEN     EQU   4                        INITIAL LENGTH 0 OR 4
RESID    EQU   6                        ESID OR BLANKS
RMAX     EQU   12                       MAXIMUM NUMBER OF BYTES IN REC
RMOV     EQU   14                       START OF MOVE ROUTINE
INFL     EQU   10                       LENGTH OF INFORM IN A RECORD
         SPACE 3
* BIT PATTERNS
SDENTRY  EQU   X'00'                    SD-ENTRY IDENTIFICATION
LDENTRY  EQU   X'01'                    LD-ENTRY IDENTIFICATION
RLDFLAG  EQU   B'00001100'              FLAG USED IN RLD-ENTRY
         SPACE 3
GENESD   EQU   *                   START OF GENERATE ESD-RECORDS
         LA    LENGTH,16                LENGTH ALWAYS 16
         LA    TYPER,ESDT               INDICATE ESD-CALL
         B     GEN1
*
GENTXTS  EQU   *                   START OF GENERATE TXT-RECORD,S
         LA    RETURN,2(0,LENGTH)       COMPUTE RETURN ADDRESS
         LH    LENGTH,0(0,LENGTH)       LOAD LENGTH GIVEN IN CALL
GEN2     LA    TYPER,TXTT               INDICATE TXT-CALL
         B     GEN1                     CONTINUE COMMON PART
*
*
GENRLD   EQU   *                   START OF GENERATE RLD-RECORDS
         LA    RETURN,6(0,LENGTH)       COMPUTE RETURN ADDRESS
         LA    TYPER,RLDT               INDICZTE RLD-CALL
         MVC   RANDP(4),2(LENGTH)       INSERT NEW R AND P
         LH    LENGTH,0(0,LENGTH)       LOAD LENGTH GIVEN IN CALL
         SLL   LENGTH,1                 DOUBLE LENGTH
         SPACE 3
GEN1     L     OUTAREA,SAVOUTA         LOAD ADDRESS OF OUT RECORD
         CLC   RTYP(3,OUTAREA),RTYP(TYPER)     RECORD RIGTH TYPE
         BNE   GEN3                     NO,CALL IOR NEW
         CLC   INFL(2,OUTAREA),RMAX(TYPER)     RECORD FILLED
         BNL   GEN3                     YES,CALL FOR NEW
GEN6     LA    L,56
         LH    REG0,INFL(0,OUTAREA)     REG0=LENGTH OF INFORM IN REC
         SR    L,REG0                   L=EMPTY POS LEFT IN RECORD
         CR    L,LENGTH                 ENOUTH SPACE LEFT
         BL    *+6                      NO
         LR    L,LENGTH                 YES L=LENGTH FROM CALL
         AR    L,REG0
         STH   L,INFL(0,OUTAREA)        INSERT NEW LENGTH INTO RECORD
*
         SR    L,REG0
         AR    OUTAREA,REG0             START ADDRESS WITHIN RECORD
         SR    LENGTH,L                 REMAINING LENGTH
         B     RMOV(TYPER)              TO DIFFERENT MOVE ROUTINES
*
GEN4     LTR   LENGTH,LENGTH            MORE INFORMATION MUST BE MOVED
         BH    GEN3                     YES
         BR    RETURN
         SPACE 3
GEN3     EQU   *                        CALL FOR NEW OUTPUT RECORD
PUNCH    ST    LENGTH,SAVELT           SAVE LENGTH
         TM    HCOMPMOD+1,X'60'    Q. BOTH DECK AND LOAD SPECIFIED
         BZ    BOTH                     YES
         TM    HCOMPMOD+1,NDCK         Q. ONLY DECK
         L     OUTAREA,PCHADD           IF ONLY DECK
         BZ    PUT1                     YES
         L     OUTAREA,LINADD           ONLY SYSLIN
PUT1     PUT   (OUTAREA)                PUT FOR SYSLIN AND SYSPUNCH IF
         ST    OUTAREA,SAVOUTA          ONLY SYSPUNCH SPECIFIED
         L     LENGTH,SAVELT           RESTORE LENGTH
         B     PUNCHOUT
BOTH     L     LENGTH,OUTAREA2         COPY SYSLIN BUFFER TO SYSPUNCH
         L     OUTAREA,SAVOUTA
         MVC   0(80,LENGTH),0(OUTAREA)  BUFFER
PUT2     L     OUTAREA,PCHADD
         PUT   (OUTAREA)                PUT FOR SYSPUNCH WHEN BOTH HAS
         ST    OUTAREA,OUTAREA2         BEEN SPECIFIED
         B     PUT1-4                   GO TO PUT SYSLIN
PUNCHOUT EQU   *
         MVC   0(4,OUTAREA),RSTART(TYPER)     INSERT FIRST 4 BYTES
         MVI   4(OUTAREA),C' '          INSERT ONE BLANK
         MVC   5(67,OUTAREA),4(OUTAREA)      BLANK OUTPUT RECORD
         MVC   72(4,OUTAREA),PIDENT     INSERT PROGRAM IDENT
         L     L,SEQU                   STEP
         LA    L,1(0,L)                      SEQUENCE
         ST    L,SEQU                                 NR
         CVD   L,DBL                    CONVERT
         UNPK  76(4,OUTAREA),DBL+5(3)           TO DECIMAL
         MVZ   79(1,OUTAREA),76(OUTAREA)
         MVC   10(2,OUTAREA),RLEN(TYPER)     INSERT INITIAL LENGTH
         MVC   14(6,OUTAREA),RESID(TYPER)     INSERT ESID+R AND P
GEN31    BC    0,TRM36                  RETURN AFTER GEN OF END CARD
         CLC   TXTT+1(3),RTYP(TYPER)    TXT-RECORD PROCESSED
         BNE   GEN6                     NO
         ST    PRPOINT,4(OUTAREA)       YES INSERT PRPOINT
         MVI   4(OUTAREA),C' '
         B     GEN6
         SPACE 3
* TABLES AND MOVE ROUTINES
         SPACE 3
ESDT     DS    0H                  START OF ESD-RECORD TABLE
         DC    X'02'                    CARD CODE
         DC    C'ESD'                   IDENTIFICATION
         DC    H'0'                     INITIAL LENGTH 0
         DC    C'      '
         DC    H'48'                    MAXIMUM LENTH IN RECORD
GEN7     EQU   *                   MOVE ESD-INFORMATION TO OUTAREA
         MVC   16(16,OUTAREA),0(INFORM)     MOVE INFORM TO OUTAREA
         CLI   8(INFORM),LDENTRY        LD ENTRY MOVED
         BE    16(INFORM)               YES RETURNTO CALLING ROUTINE
         MVC   25(7,OUTAREA),ESDCON     CHANGE LAST PART OF ENTRY
         LH    TYPER,ESID               INCREASE
         LA    TYPER,1(0,TYPER)         *AND STORE
         STH   TYPER,ESID               *NEW ESID NUMBER
         SR    OUTAREA,REG0
         CLI   14(OUTAREA),C' '         FIRST SD OR ER ENTRY
         BNE   10(INFORM)               NO, RETURNTO CALLING ROUTINE
         STH   TYPER,14(OUTAREA)        YES INSERT ESID NUMBER
         B     10(INFORM)               RETURN TO CALLING ROUTINE
         SPACE 3
TXTT     DS    0H                  START OF TXT-RECORD  TABLE
         DC    X'02'                    CARD CODE
         DC    C'TXT'                   IDENTIFICATION
         DC    H'0'                     INITIAL LENGTH 0
         DC    H'1'                     ESID
         DC    C'    '
         DC    H'56'                    MAXIMUM LENGTH
GEN8     EQU   *                   MOVE TXT-INFORMATION TO OUTAREA
         BCTR  L,0                      L=L-1
         STC   L,*+5                    INSERT PROPER LENGTH TO MOVE
         MVC   16(0,OUTAREA),0(INFORM)      MOVE INFORM TO OUTAREA
         LA    PRPOINT,1(L,PRPOINT)     INCREASE PROGRAM POINTER
         LA    INFORM,1(L,INFORM)       MODIFY DATA ADDRESS
         B     GEN4                     OUT OF MOVE TXT ROUTINE
         SPACE 3
RLDT     DS    0H                  START OF RLD-RECORD TABLE
         DC    X'02'                    CARD CODE
         DC    C'RLD'                   IDENTIFICATION
         DC    H'0'
         DC    C'  '
RANDP    DC    C'    '                  R AND P
         DC    H'56'                    MAXIMUM LENGTH IN RECORD
GEN9     EQU   *                   MOVE RLD-INFORMATION TO OUTAREA
         AR    L,OUTAREA                INDICATE LAST ENTRY
GEN5     MVC   16(4,OUTAREA),RANDP      INSERT R AND P
         ST    INFORM,20(0,OUTAREA)     MOVE PROGRAM POINTER VALUE AND
         MVI   20(OUTAREA),RLDFLAG      *FLAG TO OUTAREA
         LA    OUTAREA,8(0,OUTAREA)     NEXT ENTRY
         LA    INFORM,4(0,INFORM)       NEXT PROGRAM POINTER VALUE
         CR    OUTAREA,L                LAST COLUMN FILLED
         BL    GEN5                     NO,CONTINUE
         B     GEN4                     OUT OF MOVE RLD ROUTINE
         SPACE 3
* VARIABLES AND CONSTANTS
DBL      DS    D                        FOR CONV OF SEQUENCE NR
SAVELT   DS    F                       SAVE AREA FOR LENGTH
ESID     DC    H'1'                    ESID VARIABLE 1 AT START
ESDCON   DC    X'000000'                ESD-
         DC    C'    '                  *CONSTANT,7 BYTES
         TITLE 'IEX51, TERMINATION OF COMPILATION, ERROR MSG EDITING'
         COPY  IEX60000
         TITLE  'IEX51, TERMINATION OF COMPILATION'
IEX51002 CSECT
         SPACE
* REGISTER ASSIGNMENTS
         SPACE
R0       EQU   0
BASE     EQU   2
R3       EQU   3
RA       EQU   4
R8       EQU   8
R9       EQU   9
R13      EQU   13
R15      EQU   15
         SPACE 2
         BALR  BASE,0
         USING *,BASE
         SPACE
         OI    HCOMPMOD+1,TERM     INDICATE THIS ROUTINE IS ENTERED
         LA    R0,CLOSE            PROVIDE DIRECTORY
         ST    R0,ERET                               RETURN ADDRESS
         SPACE 2
* FREE THE STORAGE OF THE ERROR POOL AND SOURCE PROG BUFFER 1
         SPACE
         TM    HCOMPMOD+1,NOBUF
         BO    RESTPGCT            IF NO GETMAIN FOR BUFFERS WAS 1SSUED
         L     R0,POOLS            SIZE OF ERROR POOL
         A     R0,SRCE1S           SIZE OF SOURCE PROG BUFFER 1
         L     R1,ERRPOOL          ADDR OF ERROR POOL
      FREEMAIN R,LV=(0),A=(1)
         SPACE 2
* RESTORE THE INVOKERS PAGE COUNT
         SPACE
RESTPGCT L     RA,HDING            POINTER TO INVOKERS HEADING INFO
         LTR   RA,RA
         BC    8,CLOSE             IF NO HEADING INFO PROVIDED
         MVC   2(4,RA),PAGECNT
         SPACE 2
* CLOSE THE DATA CONTROL BLOCKS AND FREE THE BUFFER POOLS
         SPACE
CLOSE    BALR  BASE,0
         USING *,BASE
         LA    R0,SPIE             PROVIDE NEW DIR
         ST    R0,ERET                             RETURN ADDRESS
         LM    3,12,LINADD
         USING IHADCB,R8
         TM    DCBOFLGS,X'10'
         DROP  R8
         BO    *+8
         OI    SWITCH+1,X'F0'
         CLOSE ((3),,(8),,(9),,(11),,(12))
         TM    HCOMPMOD+1,NLOAD
         BO    FRPPCH              IF NOLOAD OPTION
         LR    R1,R3
      FREEPOOL (1)
FRPPCH   TM    HCOMPMOD+1,NDCK
         BO    FRPPRT              IF NODECK OPTION
         LR    R1,R9
      FREEPOOL (1)
FRPPRT   LR    R1,R8
SWITCH   BC    0,SPIE
      FREEPOOL (1)
         SPACE 2
* EXECUTE SPIE MACRO
         SPACE
SPIE     BALR  BASE,0
         USING *,BASE
         L     4,OLDPICA
         SPIE  MF=(E,(4))
         SPACE 2
* FIND THE RETURN CODE AND RETURN TO IEX00
         SPACE
RTNCODE  TM    HCOMPMOD,X'08'
         BZ    NOTERM              IF NO TERMINAL ERROR
         LH    R15,=H'16'
         B     RETURNN
NOTERM   TM    HCOMPMOD,X'10'
         BZ    NOSER               IF NO SERIOUS ERROR
         LH    R15,=H'8'
         B     RETURNN
NOSER    SR    R15,R15
         TM    HCOMPMOD,X'20'
         BZ    RETURNN
         LH    R15,=H'4'
RETURNN  L     R13,SAVEAREA+4
        RETURN (14,12),RC=(15)
         SPACE
         LTORG
 EJECT
* DUMMY CONTROL SECTION TO PROVIDE ADRESSABILITY OF DCB
         SPACE
         DCBD  DSORG=(PS)
 EJECT
WORKAREA DSECT
         COPY  WORKAREA
         EJECT
*
* AREA USED BY COMPILATION PHASE
*
         SPACE
         ORG   DCBUT1
         SPACE
RETADR   DS    17F                      SAVE AREA
PLACE14  DS    F                           -''-
RUTI     DS    9F                       GPR CONTROL
RUTR     DS    4F                       FLREG CONTROL
GPROLN   DS    H                        LABEL NR OF OBJ PRG ENTRY POINT
KONSUM   DS    H                        WORKPLACE
WORKPL   DS    F                        WORKPLACE
IBUF1    EQU   SRCE1ADD                 ADDR OF FIRST SOURCE BUFFER
IBUF2    DS    A                          -''  SECOND    -''-
SOURCEB  DS    A                          -''  CURRENT   -''-
RSRCB    DS    A                          -''  READ      -''-
OPBUF1   DS    A                        ADDR OF FIRST OPTAB BUFFER
OPBUF2   DS    A                          -''-  SECOND    -''-
OPBUFB   DS    A                          -''-  CURRENT   -''-
ROPTB    DS    A                          -''-  READ      -''-
AOPTABE  DS    A                        ADDRESS OF CURRENT OPTAB ENTRY
LATAB    DS    A                        ADDR OF LABEL ADDRESS TABLE
APBTAB4  EQU   LATAB                    ADDRESS OF PBTAB4
SUTABCA  DS    A                        ADDR OF LAST USED SUTAB ENTRY
STRETURN DS    F                        RETURN ADDRESS
FREEMADR DS    A                       ADR FOR FREEMAIN IN 50000
FREEMSIZ DS    F                        SIZE          -''-
         SPACE
PBTAB3   DS    1024C                    PROGRAM BLOCK TABLE, 3RD VERS
         SPACE
IOTAB    DC    18X'00'                  LIST OF DATA SETS
CII      DC    H'0'                     REGISTER CONTROL
CIR      DC    H'0'                          -''-
RII      DC    H'0'                          -''-
RIR      DC    H'0'                          -''-
OPDPBN   DC    H'0'                     PROGRAM BLOCK NR (BYTE 2 OF OPD
OPDADR   DC    H'0'                     BYTES 3 AND 4 OF OPERAND
OPDLN    DC    H'0'                     LABEL NUMBER TIMES FOUR
SCSC     EQU   SEMCNT                  SEMICOLON COUNTER
ZEROHW   DC    H'0'                     ZEROES
CFSN     DC    X'00'                    CURRENT FS NUMBER
MAXFSN   DC    X'FF'                    MAX FS NUMBER
CLEARDIS DC    X'F000'                  FOR CLEARING OF DISPLACEM PART
ONEENTRY DC    H'4'                     SHORT, FOR INCR OF OT STACK PTR
         ORG   ONEENTRY
         DC    H'8'                     LONG            -''-
PRECMASK DC    X'10'                    SHORT, TO MODIFY INSTRUCTIONS
         ORG   PRECMASK
         DC    X'00'                    LONG            -''-
NUMBBL   DC    X'00'                    RECORD COUNTER
         DS    H
SPBNST   DC    H'0'                     CURRENT PBN
         DS    H                                    AND DISPLACEMENT
GPBN     DC    H'255'                   GLOBAL DSA CONTROL
MAXOVERF DC    H'4092'                  SHORT, TO CHECK OT STACK OVERFL
         ORG   MAXOVERF
         DC    H'4088'                  LONG            -''-
HALFW    DS    H                        WORKPLACE
USPEI2   DS    H                        FOR ARRAY DECLA-
USPEI4   DS    H                                        RATION HANDLING
WPLACE   DS    H                        FOR INSTRUCTION GENERATION
XPLACE   DS    H
YPLACE   DS    H
UPLACE   DS    H
VPLACE   DS    C                                    -''-
STRDNAME DS    5C                       TO STORE OPERAND
CBVTAB   DS    48C                      CALLED-BY-VALUE TABLE
SUTABC   DS    768C
         ORG   SUTABC
DSTAB    DS    608C                     DATA SET TABLE
         END
