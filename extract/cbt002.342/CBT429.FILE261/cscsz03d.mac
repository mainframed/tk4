         TITLE 'IEESZ03D -   #Z  DISPLAY ACTIVE REPLACEMENT'
***********************************************************************
***********************************************************************
***                                                                 ***
***                                                                 ***
***                                                                 ***
***                     COMMAND  SUB-SYSTEM                         ***
***                  -------------------------                      ***
***                                                                 ***
***                                                                 ***
***       IEESZ03D -       #Z  DISPLAY ACTIVE REPLACEMENT           ***
***                                                                 ***
***       VERSION -        1.1                                      ***
***                                                                 ***
***       MVS LEVEL -      MVS/SE  3.8.   WITHOUT  SE2 OR SU64.     ***
***                                                                 ***
***       UPDATED -        07/19/81   AXC-CBT HANDLE ESTAE OKAY     ***
***                        08/10/81   JGS - #J CHANGES            NERDC
***                        08/10/81   JCC-BCB TEST FOR END OF ASCB JCC*
***                        01/26/83   AXC-CBT CHANGE ESTAE PARM LEN ***
***                                                                 ***
***                                                                 ***
***********************************************************************
***********************************************************************
         EJECT
IEESZ03D CSECT
         LR    R12,R15
         USING IEESZ03D,R12
         L     R0,SIZE             LOAD GETMAIN AREA SIZE AND SUBPOOL
         GETMAIN R,LV=(0)
         LR    R13,R1
         USING WORK,R13
         ST    R14,SAVRET          SAVE RETURN ADDR
         ST    R2,XSASAVE          SAVE XSA ADDR
         USING XSA,R2
         LR    R10,R13             LOAD SAVE AREA ADDR
         B     ESTAEBYP            BYPASS ESTAE LIST
ESTAEOVL ESTAE STAEXIT,CT,MF=L               * ESTAE PARM FIX GLA-BFG*
ESTAEOVX EQU   *-ESTAEOVL                    * ESTAE PARM FIX GLA-BFG*
ESTAEBYP MVC   ESTAELST(ESTAEOVX),ESTAEOVL   * ESTAE PARM FIX GLA-BFG*
         LA    R1,ESTAELST
         ESTAE PARAM=(10),MF=(E,(1))
         MVI   TSOSW,C' '
         L     R3,XAL              PARM LIST ADDR
         LA    R3,0(0,R3)
         LTR   R3,R3               ANY PARM
         BZ    PARM2               NO
         MVC   TSOSW(2),0(R3)      SAVE PARM
         CLI   TSOSW,C'T'          TSO DISPLAY
         BE    PARM2               YES, CONTINUE
         CLI   TSOSW,C' '          TEST FOR A BLANK                WJB
         BE    PARM1               YES CONTINUE                    WJB
         MVC   DOUBLE(2),=C'00'
         MVZ   DOUBLE(2),TSOSW
         CLC   DOUBLE(2),=C'00'    DOMAIN DISPLAY
         BNE   PARM1
         PACK  DOUBLE(8),TSOSW(2)
         CVB   R1,DOUBLE
         STC   R1,DOMAIN           SAVE DOMAIN
         MVI   TSOSW,C'D'
         B     PARM2
         SPACE 1
PARM1    MVI   TSOSW,C' '
         SPACE 1
PARM2    MVC   WTOLIST(4),=X'00410100'                            NERDC
         MVI   SCANRET,C' '        SET FOUND
         SR    R8,R8               CLEAR ASID
         MVI   SCANTYPE,C'I'       SET IN QUEUE SCAN
         LA    R1,HDRI             IN QUEUE HDR
         BAL   R11,MSGRTN1
         EJECT
JOBOUT   MVI   JOBMSG,C' '
         MVC   JOBMSG+1(L'JOBMSG-1),JOBMSG                        NERDC
         LR    R5,R8               LOAD ASID
         LTR   R5,R5               ZERO ASID
         BZ    *+6                 YES, BYPASS ADJUST
         BCTR  R5,0                ADJUST ASID
         SLL   R5,2                MULTIPLY BY 4
         L     R4,16               CVT ADDR
         L     R4,556(0,R4)        ASVT ADDR
         L     R6,516(0,R4)        MAX # OF ASIDS                 JCC
         MH    R6,=H'4'            MULT BY LENGTH                 JCC
         LA    R6,528(R4,R6)       FIND END OF ASID LIST          JCC
         ST    R6,ASVTEND          STORE THAT ADDR                JCC
         LA    R4,524(R5,R4)       ASCB SLOT ADDR
         B     JOBOUT4
         SPACE 1
JOBOUT1  L     R5,0(0,R4)          ASCB ADDR
         L     R6,56(0,R5)         CSCB ADDR
         L     R7,144(0,R5)        LOAD OUCB ADDR
         CLI   SCANTYPE,C'I'       IN QUEUE SCAN
         BNE   JOBOUT2             NO
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*  THIS CHANGE MADE TO HANDLE MVS SE(SU50)         AXC          *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        TM    114(R5),X'80'       ON ASCB DSP QUEUE               WJB
*        BO    JOBOUT4             NO, OUT QUEUE                   WJB
         CLI   41(R7),0            DOES IT HAVE A SWAP REASON CODE WJB
         BNE   JOBOUT6             YES, CHECK SRC                  WJB
         CLI   38(R5),X'7F'        MVS SE                          WJB
         BE    JOBOUT4                                             WJB
         B     JOBOUT3             CONTINUE
         SPACE 1
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*  THIS CHANGE MADE TO HANDLE MVS SE(SU50)         AXC          *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*JOBOUT2 TM    114(R5),X'80'       ON ASCB DSP QUEUE    MVS/SE     WJB
*        BE    JOBOUT4             YES, IN QUEUE        MVS/SE     WJB
JOBOUT2  CLI   38(R5),X'7F'        MVS/SE                          WJB
         BE    JOBOUT3        YES GO PROCESS THIS AS ON OUTQUEUE   WJB
         CLI   41(R7),0            THIS HAVE A SWAP REASON CODE?   WJB
         BE    JOBOUT4             NO, IT'S IN THE IN QUEUE        WJB
         CLI   41(R7),X'06'        DETECTED WAIT
         BNE   JOBOUT3             NO, OUT QUEUE
         TM    21(R7),X'01'        MSO DETECTED WAIT BIT ON
         BZ    JOBOUT4             NO, SRC IS NO GOOD
         SPACE 1
JOBOUT3  BAL   R11,ASCBFORM        GO FORMAT ASCB INFO
         L     R6,144(0,R5)        OUCB ADDR
         L     R3,60(0,R5)         TSB ADDR
         L     R5,56(0,R5)         CSCB ADDR
         BAL   R11,CSCBFORM        GO FORMAT CSCB INFO
         BAL   R11,OUCBFORM        GO FORMAT OUCB INFO
         LA    R1,WTOLIST          MSG AREA
         BAL   R11,MSGRTN          GO PRINT MSG
         SPACE 1
JOBOUT4  LA    R4,4(0,R4)          INCR INTO ASVT
         C     R4,ASVTEND          END OF ASVT                    JCC
         BNL   JOBOUT5             YES, RETURN                    JCC
         TM    0(R4),X'80'         AVAILABLE ENTRY
         BO    JOBOUT4             YES, CHECK NEXT
         B     JOBOUT1             GO USE IT
         SPACE 1
JOBOUT5  CLI   SCANTYPE,C'O'       OUT QUEUE SCAN
         BE    RETURN              YES, EXIT
         MVI   SCANRET,C' '        INIT OUTPUT SWITCH
         MVI   SCANTYPE,C'O'       SET OUT QUEUE SCAN NEXT
         LA    R1,HDRO             OUT QUEUE HDR
         BAL   R11,MSGRTN1
         B     JOBOUT              NEXT PASS
         SPACE 1
JOBOUT6  CLI   41(R7),X'06'        DETECTED WAIT
         BNE   JOBOUT4             NO, OUT QUEUE
         TM    21(R7),X'01'        MSO DETECTED WAIT BIT ON
         BZ    JOBOUT3             NO, SRC IS NO GOOD
         B     JOBOUT4             OUT QUEUE
         EJECT
ASCBFORM UNPK  DOUBLE(5),36(3,R5)
         NC    DOUBLE(4),=4X'0F'
         TR    DOUBLE(4),=C'0123456789ABCDEF'
         MVC   ASID(4),DOUBLE      SET ASID IN MSG
*        SR    R9,R9                                              NERDC
*        IC    R9,43(0,R5)         DPRTY TO MSG                   NERDC
*        CVD   R9,DOUBLE                                          NERDC
*        UNPK  DPRTY(3),DOUBLE+6(2)                               NERDC
*        OI    DPRTY+2,X'F0'                                      NERDC
         UNPK  DPRTY(3),43(2,R5)   DPRTY TO MSG                   NERDC
         NC    DPRTY(2),=4X'0F'                                   NERDC
         TR    DPRTY(2),=C'0123456789ABCDEF'                      NERDC
         MVI   DPRTY+2,C' '                                       NERDC
         LH    R1,38(0,R5)         DISP POSITION
         CVD   R1,DOUBLE
         UNPK  SRC(2),DOUBLE+6(2)
         OI    SRC+1,X'F0'
*        MVC   EXECTIME(10),=XL10'402021204B40404B4040'           NERDC
*        LM    R14,R15,64(R5)      CPU TIME                       NERDC
*        SRDL  R14,22                                             NERDC
*        LR    R9,R15              SAVE CPU TIME                  NERDC
*        LM    R14,R15,200(R5)     SRB TIME                       NERDC
*        SRDL  R14,22                                             NERDC
*        AR    R15,R9              CPU PLUS SRB TIME              NERDC
*        SR    R14,R14                                            NERDC
*        D     R14,=F'10'          HUNDREDTHS                     NERDC
*        SR    R14,R14                                            NERDC
*        D     R14,=F'100'         SECONDS                        NERDC
*        CVD   R14,DOUBLE          HUNDREDTHS TO PRINT            NERDC
*        UNPK  EXECTIME+8(2),DOUBLE+6(2)                          NERDC
*        OI    EXECTIME+9,X'F0'                                   NERDC
*        SR    R14,R14                                            NERDC
*        D     R14,=F'60'          MINUTES                        NERDC
*        CVD   R14,DOUBLE          SECONDS TO PRINT               NERDC
*        UNPK  EXECTIME+5(2),DOUBLE+6(2)                          NERDC
*        OI    EXECTIME+6,X'F0'                                   NERDC
*        CVD   R15,DOUBLE          MINUTES TO PRINT               NERDC
*        ED    EXECTIME(4),DOUBLE+6                               NERDC
*        MVI   FLAGS-1,C'-'                                       NERDC
         L     R15,64(R5)          CPU TIME                       NERDC
         A     R15,200(R5)           + SRB TIME                   NERDC
         LTR   R15,R15             TEST FOR ZERO                  NERDC
         BP    *+6                 SKIP IF PLUS                   NERDC
         SR    R15,R15             ELSE SET TO ZERO               NERDC
         SR    R14,R14                                            NERDC
         SLDL  R14,20              CONVERT TO SECONDS             NERDC
         D     R14,=F'1000000'     SEC = TOD * 1.048576           NERDC
         CVD   R15,DOUBLE          TO DECIMAL                     NERDC
         MVC   CPUTIME-1(6),=X'402020202120'                      NERDC
         ED    CPUTIME-1(6),DOUBLE+5  TO PRINT                    NERDC
         L     R15,80(R5)          STEP TIME LIMIT                NERDC
         S     R15,64(R5)           - TIME USED = TIME REMAINING  NERDC
         LTR   R15,R15             TEST FOR ZERO                  NERDC
         BP    *+6                 SKIP IF OK                     NERDC
         SR    R15,R15             ELSE SET TO ZERO               NERDC
         SR    R14,R14                                            NERDC
         SLDA  R14,20              CONVERT TO                     NERDC
         D     R14,=F'1000000'       SECONDS                      NERDC
         CVD   R15,DOUBLE          TO PRINTABLE                   NERDC
         MVC   CPUREM-1(6),=X'402020202120'                       NERDC
         ED    CPUREM-1(6),DOUBLE+5  TO PRINT LINE                NERDC
         MVC   SC(2),=C'  '        CLEAR FOR LATER TEST           NERDC
         TM    52(R5),X'10'        V=R
         BCR   8,R11               NO
*        MVI   FLAGS-1,C'R'                                       NERDC
         MVC   SC(2),=C' R'        SET IN SWAP COUNT FIELD        NERDC
         BR    R11
         EJECT
CSCBFORM CLI   TSOSW,C'T'          TSO USER DISPLAY
         BNE   CSCBFRM0            NO
         CLI   28(R5),X'01'        TSO USER
         BNE   JOBOUT4             NO, BYPASS
         B     CSCBFRM6
         SPACE 1
CSCBFRM0 CLI   28(R5),X'01'        TSO USER
         BE    JOBOUT4             YES, DONT PROCESS
         CLI   28(R5),X'03'        INIT
         BNE   CSCBFRM3            NO, GO HANDLE
         LA    R9,0(0,R5)          SAVE CSCB ADDR
         SR    R10,R10             INSERT
         IC    R10,30(0,R5)
         SLL   R10,8               ASID
         IC    R10,31(0,R5)
         SPACE 1
CSCBFRM1 L     R5,0(0,R5)          NEXT CSCB
         LA    R5,0(0,R5)          CLEAR HIGH ORDER
         LTR   R5,R5               END OF CSCBS
         BNZ   *+10                NO, CONTINUE
         LR    R5,R9               LOAD CSCB ADDR
         B     JOBOUT4             NO GOOD
         CR    R5,R9               SAME CSCB
         BE    JOBOUT4             YES, NO GOOD
         CH    R10,30(0,R5)        SAME ASID
         BNE   CSCBFRM1            NO, CHECK NEXT
         SPACE 1
CSCBFRM2 MVC   JOBNAME(8),8(R5)
         MVC   STEPNAME(8),64(R5)
         MVC   PROCNAME(8),32(R5)
         B     CSCBFRM4
         SPACE 1
CSCBFRM3 MVC   JOBNAME(8),16(R5)
         MVC   STEPNAME(8),8(R5)
         MVC   PROCNAME(8),32(R5)
         SPACE 1
CSCBFRM4 CLI   TSOSW,C'D'          DOMAIN DISPLAY
         BNE   CSCBFRM5            NO
         CLC   DOMAIN(1),40(R6)    DOMAIN MATCH    MVS/SE         WJB
         BNE   JOBOUT4
         SPACE 1
CSCBFRM5 CLC   ASID(4),=C'0001'
         BCR   7,R11
         MVC   JOBNAME(26),=CL26'MASTER'
         BR    R11
         SPACE 1
CSCBFRM6 MVC   JOBNAME(8),8(R5)
         MVC   STEPNAME(8),16(R5)
         CLC   TSTSVC35(2),=X'0A23'  IS THIS TSO EXECUTION OF #J
         BNE   CSCBFRM5              YES, BYPASS 0C4
*   IF YOU HAVE VTAM NO - OP NEXT THREE INSTRUCTIONS               WJB
         UNPK  PROCNAME(5),82(3,R3)  LINE NUMBER                   WJB
         NC    PROCNAME(4),=8X'0F'                                 WJB
         TR    PROCNAME(4),=C'0123456789ABCDEF'                    WJB
 SPACE 3
         MVC   PROCNAME+4(4),=CL4' '
         B     CSCBFRM5
         EJECT
OUCBFORM DS    0H                                                  WJB
         CLI   41(R6),X'00'        JOB ON IN QUEUE                 WJB
         BE    OUCBFRM0            YES, NO SWAP REASON
         UNPK  SRC(3),41(2,R6)     SWAP REASON             MVS/SE WJB
         NC    SRC(2),=8X'0F'
         TR    SRC(2),=C'0123456789ABCDEF'
         MVI   SRC+2,C' '
         CLI   38(R5),X'7F'        MVS SE                          WJB
         BNE   OUCBLOG1                                            WJB
         MVC   SRC(2),=CL3'LG'     FAKE UP LOGICAL SWAP CODE       WJB
         B     OUCBFRM0            AND CONTINUE                    WJB
OUCBLOG1 DS    0H                                                  WJB
         SPACE 1
OUCBFRM0 MVC   FLAGS(3),=CL3'NSW'
         TM    17(R6),X'80'        NON-SWAPPABLE
         BO    OUCBFRM1
         MVC   FLAGS(3),=CL3'IN'
         CLI   SCANTYPE,C'I'       IN QUEUE SCAN
         BE    OUCBFRM1
         MVC   FLAGS(3),=CL3'OUT'
         TM    16(R6),X'E0'        GOING IN/OUT
         BZ    OUCBFRM1            NO, JUST OUT
         MVC   FLAGS(3),=CL3'GOO'
         TM    16(R6),X'80'        GOING OUT
         BO    OUCBFRM1
         MVC   FLAGS(3),=CL3'GOB'
         TM    16(R6),X'20'        TRANSITIONING
         BO    OUCBFRM1
         MVC   FLAGS(3),=CL3'GOI'
         SPACE 1
OUCBFRM1 MVC   FLAGS+3(2),=CL2'A'
         TM    18(R6),X'04'        AUX STORAGE SHORTAGE
         BC    1,OUCBFRM2                                         NERDC
         MVC   FLAGS+3(2),=CL2'S'
         TM    18(R6),X'01'        REAL STORAGE SHORTAGE
         BC    1,OUCBFRM2                                         NERDC
         MVC   FLAGS+3(2),=CL2'LW'
         TM    21(R6),X'80'        LONG WAIT
         BC    1,OUCBFRM2                                         NERDC
         MVC   FLAGS+3(2),=CL2'MW'
         TM    21(R6),X'01'        DETECTED WAIT
         BC    1,OUCBFRM2                                         NERDC
         MVC   FLAGS+3(2),=CL2'CP'
         TM    19(R6),X'10'        CPU USER
         BC    1,OUCBFRM2                                         NERDC
         MVC   FLAGS+3(2),=CL2' '
OUCBFRM2 LH    R1,184(R6)          OUCBNPG (PERFORM GRP NO)       NERDC
         CVD   R1,DOUBLE                                          NERDC
         UNPK  PG(2),DOUBLE+6(2)                                  NERDC
         OI    PG+1,X'F0'                                         NERDC
         CLI   SC+1,C'R'           V=R SET?                       NERDC
         BER   R11                 YES, SKIP SETTING SWAP COUNT   NERDC
         LH    R1,42(R6)           SWAP COUNT                     NERDC
         CVD   R1,DOUBLE                                          NERDC
         UNPK  SC(2),DOUBLE+6(2)                                  NERDC
         OI    SC+1,X'F0'                                         NERDC
         CH    R1,=H'100'                                         NERDC
         BL    *+4+6                                              NERDC
         MVC   SC(2),=C'**'        SET OVERFLOW                   NERDC
         BR    R11
         EJECT
         USING *,R15
STAEXIT  CH    R0,=H'12'           SDWA GOTTEN
         BE    STAEXIT1            NO, FORCE RETURN
************************************************************** GLA-BFG
*  THIS WILL RECORD ANY ABENDS IN LOGREC WITH THE              GLA-BFG
*  OPERANDS, REGISTERS, AND PSW IN IT.                         GLA-BFG
************************************************************** GLA-BFG
         STM   R14,R12,12(R13)     SAVE REGISTER               GLA-BFG
         LR    R14,R13             SAVE ORIG R13               GLA-BFG
         L     R13,0(R1)           GET ESTAE PARM              GLA-BFG
         L     R2,XSASAVE          GET XSA ADDRESS             GLA-BFG
         LR    R13,R14             RESTORE R13                 GLA-BFG
         ICM   R2,15,XAL-XSA(R2)   GET PARM ADDRESS            GLA-BFG
         BZ    ESTNOP              IF NO PARMS THEN SKIP DATA  GLA-BFG
         OI    SDWADPVA-SDWA(1),SDWAVRAM+SDWAEBC SET TO VRA    GLA-BFG
*                                  AND EBCDIC                  GLA-BFG
         MVC   SDWAVRA-SDWA(L'ESTPRFX,1),ESTPRFX MOVE HEADER   GLA-BFG
         MVC   SDWAVRA+11-SDWA(8,1),0(R2) MOVE IN DATA         GLA-BFG
         MVI   SDWAURAL-SDWA(1),19 SET LENGTH OF DATA          GLA-BFG
         B     ESTNOP              SKIP CONSTANTS              GLA-BFG
         ESTMODS ,                                             GLA-BFG
ESTPRFX  DC    0CL11' ',AL1(VRAHID,7),C'OPERAND',AL1(VRARRK,8) GLA-BFG
ESTNOP   L     R2,=A(STAERTRY)     GET RETRY ADDRESS           GLA-BFG
         LA    R3,ESTMODS          POINT AT NAMES              GLA-BFG
         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO,           GLA-BFG X
               RECORD=YES,RECPARM=(3),REGS=(14,12)             GLA-BFG
         SPACE 3
STAEXIT1 L     R0,=A(STAERTRY)     LOAD RETRY ADDR
         LA    R15,4
         BR    R14
         DROP  R15
         SPACE 3
         USING *,R15
STAERTRY L     R12,=A(IEESZ03D)    LOAD ENTRY POINT ADDR
         LR    R13,R1              RELOAD WORK AREA ADDR
         DROP  R15
         LA    R1,STAEMSG          ADDRESSING ERROR
         L     R2,XSASAVE          RELOAD XSA ADDR
         LA    R11,RETURN          LOAD RET ADDR
         EJECT
MSGRTN   MVI   SCANRET,C'P'
         SPACE 1
MSGRTN1  SR    R0,R0
         IC    R0,XAU              INSERT MCS ID
TSTSVC35 EQU   *
         SVC   35                  ISSUE WTO
         BR    R11
         SPACE 3
RETURN   EQU   *
         CLI   SCANRET,C' '        ANY FOUND
         BE    NOTFOUND            NO, TELL OPERATOR
         ESTAE  0
         L     R0,SIZE             LOAD GETMAIN SIZE AND SUBPOOL
         LR    R1,R13              LOAD GETMAIN AREA ADDR
         L     R14,SAVRET          RETURN ADDR
         FREEMAIN R,LV=(0),A=(1)
         SR    R15,R15
         BR    R14
         SPACE 3
NOTFOUND LA    R11,RETURN
         LA    R1,NFNDMSG
         B     MSGRTN
         EJECT
         LTORG
         DS    0F
SIZE     DC    X'F1',AL3(WORKEND-WORKSTRT)
         SPACE 3
         DS    0F
STAEMSG  DC    X'00360100'
         DC    CL50'ERROR ENCOUNTERED IN CONTROL BLOCKS, RETRY COMMAND'
         SPACE 3
         DS    0F
NFNDMSG  DC    X'00360100'
         DC    CL50'NO JOBS ON OUT QUEUE'
         SPACE 3
HDRI     DC    X'00410100'                                        NERDC
         DC    CL26'*****   IN   QUEUE   *****'                   NERDC
         DC    CL35' ASID DP PG QP SC FLAGS   CPU  CPUR'          NERDC
         SPACE 3
HDRO     DC    X'00410100'                                        NERDC
         DC    CL26'*****   OUT  QUEUE   *****'
         DC    CL35' ASID DP PG SR SC FLAGS   CPU  CPUR'          NERDC
         EJECT
WORK     DSECT
WORKSTRT DS    0D
SAVRET   DS    18F
DOUBLE   DS    2F
XSASAVE  DS    F
ASVTEND  DS    F                                                  JCC
SCANRET  DS    C
SCANTYPE DS    C
TSOSW    DS    C
DOMAIN   DS    C
         SPACE 5
         DS    0F
WTOLIST  DS    F
JOBMSG   DS    0CL61                                              NERDC
JOBNAME  DS    CL9
STEPNAME DS    CL9
PROCNAME DS    CL9                                                NERDC
ASID     DS    CL5                                                NERDC
DPRTY    DS    CL3                                                NERDC
PG       DS    CL3                                                NERDC
SRC      DS    CL3                                                NERDC
SC       DS    CL3                                                NERDC
FLAGS    DS    CL6
CPUTIME  DS    CL6                                                NERDC
CPUREM   DS    CL5                                                NERDC
         SPACE 3
ESTAELST DS    0F,(ESTAEOVX)X     AXC-CBT
WORKEND  DS    0F
         EJECT
XSA      DSECT
XAP      DS    F
XAD      DS    F
XAX      DS    D
XAE      DS    0C
XAR      DS    F
XAN      DS    0C
XAL      DS    F
XAV      DS    D
XAS      DS    D
XAU      DS    C
         DS    C
XAJ      DS    H
         DS    F
         EJECT
         IHASDWA
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
