Received: (from <IBM-MAIN@RICEVM1.BITNET> via BSMTP at RICEVM1.RICE.EDU)
Received: (from MAILER@RICEVM1 for MAILER@USCMVSA via NJE)
 (UCLA/Mail V1.426 M-RSCS0062-0062-460); Tue, 27 Oct 92 11:36:39 PST
X-RSCS-Info:  FileName=IBM-MAIN  FileType=MAIL      DistCode=RICEVM1
Received: by RICEVM1 (Mailer R2.08 R208004) id 8491;
          Tue, 27 Oct 92 13:38:32 CST
Received: from RICEVM1.BITNET by RICEVM1.RICE.EDU (LISTSERV release 1.7d
          NJE id 2341 for IBM-MAIN@RICEVM1.RICE.EDU; Tue,
          27 Oct 1992 13:37:36 -0600
Received: from RICEVM1 by RICEVM1.RICE.EDU (Mailer R2.08 R208004) with B
          8267; Tue, 27 Oct 92 13:35:59 CST
Received: from gray.csi.cam.ac.uk by ricevm1.rice.edu (IBM VM SMTP V2R2)
          TCP; Tue, 27 Oct 92 13:35:54 CST
Received: from phx.cam.ac.uk by ppsw1.cam.ac.uk with NIFTP (PP-6.0) Camb
          as ppsw.cam.ac.uk id <29943-0@ppsw1.cam.ac.uk>; Tue,
          27 Oct 1992 19:33:46 +0000
Message-ID:   <A681828A35B96690@UK.AC.CAMBRIDGE.PHOENIX>
Newsgroups:   bit.listserv.ibm-main
Date:         Tue, 27 Oct 1992 19:33:38 GMT
Reply-To:     IBM Mainframe Discussion list <IBM-MAIN@RICEVM1.BITNET>
Sender:       IBM Mainframe Discussion list <IBM-MAIN@RICEVM1.BITNET>
From:         A Grant <AG129@PHX.CAM.AC.UK>
Subject:      Re: File wildcarding macro
Comments: To: ibm-main@ricevm1.rice.edu
To:           Local BBoard - Postmaster <#IBMMAIN@MVSA.USC.EDU>

Steve Bacher writes:
> Yes!  Please post it if you're so inclined...

Ok, here it is. You may need to do it twice (FN and FT for CMS, DSN and
member name for MVS). Using OPT=MVS gives wildcards that are upwards
compatible from RACF generic profiles and some recent IBM utilities, i.e
using '.**' to match either nothing, or some arbitrary string of chars
starting with '.' - the sequence '*.**' therefore matches any string,
possibly null. Obviously you also need code to retrieve file info from C
ADTs (never used it with SFS), MVS catalogs, VTOCs, CVAF, PDS directorie
HSM etc. (Anyone want a VTOC scanner that chains format-3s in one pass?)
The matching routine appears to produce identical results to CMS FILELIS
though with entirely different code. Note the use of a stack to let you
write commands that do things like:

  rename MYFILE.*.X%%%.**.V* as FRED.*.**.Y%%%.VERSION.#*

(er, the code to expand the new name is not here, either...) This macro
the core of a wildcard support module (containing the aforementioned
catalog/PDS scanning routines) that is in constant use by many file
management commands on our production timesharing system.

p.s. going back to string searching, another useful command on our syste

  search *.FRED.*(*Z*) /anystring

but this uses a custom I/O package. If only IBM would provide an access
method that didn't make assembler users worry about unlike concatenation
spanned records, machine-cc-to-ANSI conversion etc.!

--- cut here ---
         MACRO
&LABEL   #MATCH &ARG,&PAT,                                             *
               &YES=,&NO=,                                             *
               &STACK=,&SINGLES=,                                      *
               &SPARE=,&OPT=,                                          *
               &WILD='*',&PLACE='%',&FLDWILD=,&FIELD='.'
.*************************************************************
.*                                                           *
.*  MATCH: Compare two strings, with wildcards.              *
.*                                                           *
.*  Can be used for CMS and MVS dataset wildcard matching.   *
.*                                                           *
.*  The argument ARG is matched to the pattern PAT.          *
.*  Each string can be specified as                          *
.*    ((reg),(reg))                                          *
.*    ((reg),length)                                         *
.*    ((reg),TO,(reg))                                       *
.*    (address,(reg))                                        *
.*    (address,length)                                       *
.*    (address,TO,(reg))                                     *
.*                                                           *
.*  Internally they are represented as (start,end) register  *
.*  pairs (AO,AL) and (WO,WL).                               *
.*                                                           *
.*  If successful, branch to YES, else branch to NO.         *
.*  (YES and NO are labels or bracketed registers.)          *
.*                                                           *
.*  Options:                                                 *
.*    ASTRIP - strip trailing spaces from argument           *
.*    WSTRIP - strip trailing spaces from pattern            *
.*    MVS    - MVS generic dataset names                     *
.*                                                           *
.*  All registers are specified as parameters.               *
.*                                                           *
.*  WL (i.e. the length or end register of the wildcard      *
.*  string) can be R0, but none of the others can.           *
.*  SPARE specifies a list of spare registers. No registers  *
.*  will be used unless passed as parameters or in SPARE.    *
.*                                                           *
.*  A stack is used, based on STACK. Frames are 20 bytes:    *
.*                                                           *
.*    AO, WO, REGN, SING, STAR.                              *
.*                                                           *
.*  On successful exit, the stack pointer points to the top  *
.*  of the stack; the substrings matched to '*' wildcards    *
.*  can be found as a (start,end) pair at offset 16 in each  *
.*  stack frame. Single characters matched to '%' are placed *
.*  in a buffer specified by the SINGLES keyword. If this    *
.*  buffer is specified by a register, on a successful match *
.*  this register points after the last character put in the *
.*  buffer.                                                  *
.*                                                           *
.*  Alasdair Grant, University of London Computer Centre     *
.*  April 1987 / December 1990                               *
.*                                                           *
.*  Support for MVS generic dataset names                    *
.*  A. Grant, Cambridge University, May 1991                 *
.*                                                           *
.*************************************************************
         LCLA  &SNEXT,&FRAME,&N
         LCLB  &UST,&ASTRIP,&WSTRIP,&MVS
         LCLC  &AO,&AL,&WO,&WL,&O
         LCLC  &ASTART,&ALEN,&WSTART,&WLEN
         LCLC  &REGN,&RN,&JUMPN,&RY,&JUMPY,&JSING,&REGST,&LAB,&REGSN
         LCLC  &FCHAR
&LAB     SETC  '&LABEL'
.*
         AIF   (K'&OPT EQ 0).OPTE
&N       SETA  1
&O       SETC  '&OPT'
         AIF   ('&OPT'(1,1) NE '(').OPTB
         AGO   .OPTA
.OPTD    ANOP
&N       SETA  &N+1
.OPTA    AIF   (&N GT N'&OPT).OPTE
&O       SETC  '&OPT(&N)'
.OPTB    AIF   ('&O' NE 'ASTRIP').OPT1
&ASTRIP  SETB  1
         AGO   .OPTD
.OPT1    AIF   ('&O' NE 'WSTRIP').OPT2
&WSTRIP  SETB  1
         AGO   .OPTD
.OPT2    AIF   ('&O' NE 'MVS').OPT3
&MVS     SETB  1
&FCHAR   SETC  '''*'''
         AGO   .OPTD
.OPT3    AIF   ('&O' NE 'SAVE').OPT4
&UST     SETB  1
         AGO   .OPTD
.OPT4    MNOTE 4,'Bad option: &O'
.OPTE    ANOP
.*
&ASTART  SETC  '&ARG(1)'
&WSTART  SETC  '&PAT(1)'
.*
         AIF   ('&ASTART'(1,1) NE '(').R1J1
&AO      SETC  '&ASTART'(2,K'&ASTART-2)
         AGO   .R1J3
.R1J1    AIF   (&SNEXT EQ N'&SPARE).R1J2
&SNEXT   SETA  &SNEXT+1
&AO      SETC  '&SPARE(&SNEXT)'
         AGO   .R1J4
.R1J2    MNOTE 12,'Not enough spare registers'
&AO      SETC  '0'
.R1J4    ANOP
&LAB     LA    &AO,&ASTART         Point to argument
&LAB     SETC  ''
.R1J3    ANOP
.*
         AIF   ('&WSTART'(1,1) NE '(').R2J1
&WO      SETC  '&WSTART'(2,K'&WSTART-2)
         AGO   .R2J3
.R2J1    AIF   (&SNEXT EQ N'&SPARE).R2J2
&SNEXT   SETA  &SNEXT+1
&WO      SETC  '&SPARE(&SNEXT)'
         AGO   .R2J4
.R2J2    MNOTE 12,'Not enough spare registers'
&WO      SETC  '0'
.R2J4    ANOP
&LAB     LA    &WO,&WSTART         Point to pattern
&LAB     SETC  ''
.R2J3    ANOP
.*
         AIF   (N'&ARG EQ 3 AND '&ARG(2)' EQ 'TO').ARG3
         AIF   (N'&ARG NE 2).BADARG
&ALEN    SETC  '&ARG(2)'
         AIF   ('&ALEN'(1,1) NE '(').R3J1
&AL      SETC  '&ALEN'(2,K'&ALEN-2)
&LAB     AR    &AL,&AO             Point to end of argument
         AGO   .R3J3
.R3J1    AIF   (&SNEXT EQ N'&SPARE).R3J2
&SNEXT   SETA  &SNEXT+1
&AL      SETC  '&SPARE(&SNEXT)'
         AGO   .R3J4
.R3J2    MNOTE 12,'Not enough spare registers'
&AL      SETC  '0'
.R3J4    ANOP
&LAB     LA    &AL,&ALEN.(,&AO)    Point to end of argument
.R3J3    ANOP
&LAB     SETC  ''
         AGO   .AENDSET
.ARG3    ANOP
&AL      SETC  '&ARG(3,1)'
.AENDSET ANOP
.*
         AIF   (N'&PAT EQ 3 AND '&PAT(2)' EQ 'TO').PAT3
         AIF   (N'&PAT NE 2).BADARG
&WLEN    SETC  '&PAT(2)'
         AIF   ('&WLEN'(1,1) NE '(').R4J1
&WL      SETC  '&WLEN'(2,K'&WLEN-2)
&LAB     AR    &WL,&WO             Point to end of pattern
         AGO   .R4J3
.R4J1    AIF   (&SNEXT EQ N'&SPARE).R4J2
&SNEXT   SETA  &SNEXT+1
&WL      SETC  '&SPARE(&SNEXT)'
         AGO   .R4J4
.R4J2    MNOTE 12,'Not enough spare registers'
&WL      SETC  '0'
.R4J4    ANOP
&LAB     LA    &WL,&WLEN.(,&WO)    Point to end of pattern
.R4J3    ANOP
&LAB     SETC  ''
         AGO   .WENDSET
.PAT3    ANOP
&WL      SETC  '&PAT(3,1)'
.WENDSET ANOP
.*
.*  Deal with success jump. Can be specified as register or
.*  address. If omitted, jump to the end of the code.
.*
&RY      SETC  ''
&JUMPY   SETC  'Y&SYSNDX'
         AIF   (K'&YES EQ 0).YJ1
&JUMPY   SETC  '&YES'
         AIF   ('&YES'(1,1) NE '(').YJ1
&RY      SETC  'R'
&JUMPY   SETC  '&YES'(2,K'&YES-2)
.YJ1     ANOP
.*
.*  Deal with failure jump. Can be specified as register or
.*  address. If omitted, jump to the end of the code. We still
.*  need a register for it though.
.*
&RN      SETC  ''
&JUMPN   SETC  'Z&SYSNDX'
         AIF   (K'&NO EQ 0).NJ1
&JUMPN   SETC  '&NO'
         AIF   ('&NO'(1,1) NE '(').NJ1
&RN      SETC  'R'
&REGN    SETC  '&NO'(2,K'&NO-2)
         AGO   .NJ2
.NJ1     AIF   (&SNEXT EQ N'&SPARE).NJ8
&SNEXT   SETA  &SNEXT+1
&REGN    SETC  '&SPARE(&SNEXT)'
         AGO   .NJ2
.NJ8     MNOTE 12,'Not enough spare registers'
&REGN    SETC  '0'
.NJ2     ANOP
.*
&FRAME   SETA  20
         AIF   ('&STACK'(1,1) NE '(').STJ1
&REGST   SETC  '&STACK'(2,K'&STACK-2)
&UST     SETB  1
         AGO   .STJ2
.STJ1    AIF   (&SNEXT EQ N'&SPARE).STJ3
&SNEXT   SETA  &SNEXT+1
&REGST   SETC  '&SPARE(&SNEXT)'
         AGO   .STJ4
.STJ3    MNOTE 12,'Not enough spare registers'
&REGST   SETC  '0'
.STJ4    LA    &REGST,&STACK       Initial stack pointer
         AIF   (&UST).STJ2
&FRAME   SETA  12
         AIF   (K'&SINGLES EQ 0).STJ2
&FRAME   SETA  16
.STJ2    ANOP
.*
         AIF   (K'&SINGLES EQ 0).SNJ1
         AIF   ('&SINGLES'(1,1) NE '(').SNJ2
&REGSN   SETC  '&SINGLES(1)'
         AGO   .SNJ1
.SNJ2    AIF   (&SNEXT EQ N'&SPARE).SNJ3
&SNEXT   SETA  &SNEXT+1
&REGSN   SETC  '&SPARE(&SNEXT)'
         AGO   .SNJ4
.SNJ3    MNOTE 12,'Not enough spare registers'
&REGSN   SETC  '0'
.SNJ4    LA    &REGSN,&SINGLES     Initial singles pointer
.SNJ1    ANOP
.*
         AIF   ('&RN' EQ 'R').NJ3
&LAB     LA    &REGN,&JUMPN        Initial failure address
&LAB     SETC  ''
.NJ3     ANOP
.*
         AIF   ('&LAB' EQ '').NOLAB
&LAB     DS    0H
.NOLAB   ANOP
.*
.*  Strip trailing spaces from either string
.*
         AIF   (NOT &ASTRIP).NASTR
S&SYSNDX CLR   &AO,&AL             Strip string
         BER   &REGN               Fail on empty string
         BCTR  &AL,0
         CLI   0(&AL),C' '
         BE    S&SYSNDX            Lose space and try again
         LA    &AL,1(,&AL)         Get the char back
.NASTR   ANOP
.*
         AIF   (NOT &WSTRIP).NWSTR
U&SYSNDX CLR   &WO,&WL             Strip pattern
         BER   &REGN               Fail on empty pattern
         BCTR  &WL,0
         CLI   0(&WL),C' '
         BE    U&SYSNDX            Lose space and try again
         LA    &WL,1(,&WL)         Get the char back
.NWSTR   ANOP
.*
.*  R: recursive entry point. E is for when only AO has been
.*  changed since the last call.
.*
R&SYSNDX ST    &WO,4(,&REGST)      Save pattern pointer
         ST    &REGN,8(,&REGST)    Save failure address
         AIF   (K'&SINGLES EQ 0).SJ1
         ST    &REGSN,12(,&REGST)  Save '?' pointer
.SJ1     ANOP
E&SYSNDX ST    &AO,0(,&REGST)      Save string pointer
.*
.*  WO=WL: succeed if AO=AL, otherwise fail
.*  WO~=WL, AO=AL: check for '*' wildcard, otherwise fail
.*  WO~=WL, AO~=AL: check for '*', then compare characters
.*
I&SYSNDX CLR   &WO,&WL             Any more wildcards?
         BE    O&SYSNDX             no: try for null string
         AIF   (&MVS).MVS1
         CLI   0(&WO),C&WILD       Arbitrary string?
         BE    W&SYSNDX             yes: go do recursion
         AIF   ('&FCHAR' EQ '').NOFLD
         CLI   0(&WO),C&FCHAR      Arbitrary field?
         BE    F&SYSNDX
.NOFLD   AGO   .MVS1E
.MVS1    CLI   0(&WO),C&FCHAR      Arbitrary field?
         BE    F&SYSNDX
         CLC   0(3,&WO),=C'.**'    Arbitrary string?
         BE    W&SYSNDX
.MVS1E   ANOP
         CLR   &AO,&AL             At end of string?
         BE    N&SYSNDX             yes: must fail
         CLC   0(1,&WO),0(&AO)     Same character?
         BE    G&SYSNDX
         CLI   0(&WO),C&PLACE      '?' matches any character
         BNE   N&SYSNDX             no: don't match
         CLI   0(&AO),C&FIELD      '?' doesn't match dot
         BE    N&SYSNDX
         AIF   (K'&SINGLES EQ 0).SJ2
T&SYSNDX MVC   0(1,&REGSN),0(&AO)  Save for user
         LA    &REGSN,1(,&REGSN)
.SJ2     ANOP
G&SYSNDX LA    &AO,1(,&AO)         Next char of string
         LA    &WO,1(,&WO)         Next char of pattern
         B     I&SYSNDX            Iterate
*
.* At end of wildcard pattern
.*
O&SYSNDX CLR   &AO,&AL             Only null can match null
         BE&RY &JUMPY              Null: succeed
.*
.*  Fail. Restore registers.
.*
N&SYSNDX L     &AO,0(,&REGST)      Restore string pointer
         L     &WO,4(,&REGST)      Restore pattern pointer
         AIF   (K'&SINGLES EQ 0).SJ3
         L     &REGSN,12(,&REGST)  Restore '?' pointer
.SJ3     ANOP
         BR    &REGN               ... and fail
*
.*
.*  WO is pointing to a '*'. Call ourselves (E&SYSNDX) as a
.*  subroutine. We must match some string (even if null)
.*  against this wildcard, so store AO in the stack now.
.*
         AIF   (&MVS).MVS2
W&SYSNDX LA    &WO,1(,&WO)         Skip past wildcard
         AGO   .MVS2E
.MVS2    ANOP
W&SYSNDX LA    &WO,3(,&WO)         Skip past '.**'
.MVS2E   ANOP
         AIF   (NOT &UST).UJ1
         ST    &AO,16(,&REGST)     Let user get the substring
         AIF   (NOT &MVS).MVS4E
         OI    16(&REGST),X'80'
.MVS4E   ANOP
.UJ1     ANOP
         LA    &REGST,&FRAME.(,&REGST)
         AIF   (NOT &MVS).MVS3E
         CLR   &WO,&WL
         BNE   A&SYSNDX
         CLR   &AO,&AL
         BE    B&SYSNDX
         CLI   0(&AO),C'.'
         BNE   A&SYSNDX
B&SYSNDX ST    &AL,0(,&REGST)
         BE&RY &JUMPY
*
A&SYSNDX BAS   &REGN,R&SYSNDX
         CLI   0(&AO),C'.'
         BNE   L&SYSNDX
         LA    &AO,1(,&AO)
.MVS3E   ANOP
         BAS   &REGN,R&SYSNDX
J&SYSNDX LA    &AO,1(,&AO)
         CLR   &AO,&AL
         BNH   E&SYSNDX            Will return to right place
L&SYSNDX SH    &REGST,=Y(&FRAME)   Unwind stack
         L     &REGN,8(,&REGST)    Only restored here
         B     N&SYSNDX            No match
*
         AIF   ('&FCHAR' EQ '').NOFLD2
.*
.*  Match characters within a field
.*
F&SYSNDX LA    &WO,1(,&WO)         Skip past wildcard
         AIF   (NOT &UST).UJ2
         ST    &AO,16(,&REGST)     Let user get the substring
.UJ2     ANOP
         LA    &REGST,&FRAME.(,&REGST)
         BAS   &REGN,R&SYSNDX
         AIF   (&MVS).MVS5
         CLI   0(&AO),C&FIELD      End of field?
         BE    L&SYSNDX            Yes, stop scanning
         B     J&SYSNDX
         AGO   .MVS5E
.MVS5    ANOP
         CLR   &AO,&AL
         BE    L&SYSNDX
         CLI   0(&AO),C&FIELD      End of field?
         BE    L&SYSNDX            Yes, stop scanning
         LA    &AO,1(,&AO)
         B     E&SYSNDX
.MVS5E   ANOP
*
.NOFLD2  ANOP
.*
.*  Define continuation exits
.*
         AIF   ('&JUMPN' NE 'Z&SYSNDX').NJ5
         AIF   ('&JUMPY' EQ 'Y&SYSNDX').NJ6
Z&SYSNDX DS    0H                  Failure point
         AGO   .YJ2
.NJ6     ANOP
Z&SYSNDX LTR   &AO,&AO             Condition code NE
.NJ5     AIF   ('&JUMPY' NE 'Y&SYSNDX').YJ2
Y&SYSNDX DS    0H                  Success point
.YJ2     ANOP
         MEXIT
.*
.BADARG  MNOTE 12,'Invalid arguments'
&LAB     DS    0H      ** DEFINED TO AVOID ERROR PROPAGATION **
         MEND
