RXVSAM

Mark Winges
415-752-8291
LynMark@compuserve.com
76742.1117@compuserve.com

RXVSAM is a REXX function to access VSAM files in an MVS, TSO or
ISPF environment.  You can access VSAM ESDS, KSDS or RRDS files
using RXVSAM, and its syntax is like any other REXX function.
RXVSAM consists of two assembler CSECTS, supplied in source code
format.

Syntax

All calls to the RXVSAM function take the form:
        RXVSAM(request,ddname,key/filetype,recordarea)

The first two arguments are always required, arguments 3 and 4 are
sometimes optional.  Argument definitions:

        request - what you want to do, for example:  read a record,
                begin browsing a file in a forward direction, and so
                on.
        ddname - the MVS ddname for the VSAM file that contains your
                data.  The ddname may come from an allocate
                statement when in TSO or ISPF, or a ddname in your
                JCL if you are running your REXX program in batch.
        key / filetype - the key or relative record number for your
                data or the type of VSAM file (ESDS, KSDS or RRDS).
                The filetype indication is only required for open
                requests.  For other requests, you will usually
                indicate a key.  For some requests, this argument
                may be omitted, and its absence should be indicated
                by a comma when the next argument is present (see
                below for more information).
        recordarea - the REXX variable name that contains your data.
                You can omit this argument too, and RXVSAM will use
                the default variable name RXVSAM_RECORD.

Request Values

There are 5 types of requests:  opens, closes, reads, writes and
starts.  The values for request may be coded as a literal (within
quotes) or as a REXX variable set to the  desired request value.
The request, whether it is a REXX variable or a literal, must be in
uppercase, coded exactly as shown below:

                OPENINPUT OPENOUTPUT OPENIO
                CLOSE
                READ READGENERIC READNEXT READPREV READLAST
                WRITE REWRITE DELETE
                STARTFWD STARTBWD

The above values are self-explanatory, mirroring the actions you
would perform from a COBOL program, or in a CICS EXEC
statement.  There are the usual restrictions:  you must read a record
before attempting to rewrite or delete it, you must have established
positioning within a file using STARTFWD (for reading forward in a
file) or STARTBWD (for reading backward in a file) before a READNEXT
or READPREV request, you must have a file open for input (or I/O) if
you are going to read records, and you must have a file open for
output (or I/O) if you are going to write records.

DDNAME Values

There are no restrictions on the ddname other than those imposed by
MVS.  It must be 1 to 8 uppercase or national characters.  If you
are executing in a TSO or ISPF session, the file must be allocated
prior to any RXVSAM calls.  If you are executing in batch, the
ddname must be present in your JCL.

Key / Filetype Values

Filetype must be in uppercase.  Indicate either 'ESDS', 'KSDS', or
'RRDS' depending on the type of your VSAM file.  Filetype is only
valid with one of the open requests.  For other requests you will
most often code a key.  This key may be either a REXX variable or a
literal.  For RRN datasets, code the key as a normal REXX numeric
(for example '24' to read record number 24).  For keys that contain
packed decimal data, you must construct the components of the key
carefully.  REXX does not recognize packed decimal (other than as a
string of characters), and you may need to "build" your key using a
combination of hexadecimal and character literals.

The key should be null for the following cases:
        READNEXT, READPREV and READLAST requests
        Writing sequentially to an RRDS for the first time
            (initialization)
        Writing to an ESDS
Note that direct reads on an ESDS are possible, using the RBA as the
"key".  This is given in decimal just as a "key" for an RRDS.
However, if your RBA is not an address that is on a record boundry,
you will get an error.

Recordarea Values

This is the name of the variable that contains record data.  It is
important to note that this is the NAME of the variable. Most often,
this will be a literal.  If you code a variable, its value will be
the name used as the record area.  Of course, since an uninitialized
REXX variable's value is the uppercase version of the variable name,
if you accidently omit the surrounding quotes when you mean to use a
literal, you may get the desired result.  This is not clear REXX
coding, however.

If you omit this argument, RXVSAM will use a default name of
RXVSAM_RECORD.  For simple programs that read / write only one file,
it might be easier to use this default.

Examples:
The following example will open a KSDS file, perform a direct read
on a record with a key of "AAA001", then close the file.

        rxvsam_result = RXVSAM('OPENINPUT','VSAMFILE','KSDS')
        IF rxvsam_result \= 0 THEN SAY 'Open Failed'
        keyaaaa = 'AAA001'          /* set value of key data */
        rxvsam_result = RXVSAM('READ','VSAMFILE','KEYAAAA','MY_REC')
        IF rxvsam_result \= 0 THEN SAY 'Read Failed'
        ELSE SAY 'The record is:' my_rec
        rxvsam_result = RXVSAM('CLOSE','VSAMFILE')


The following example will open an RRDS file, and write two records
to it.

        rxvsam_result = RXVSAM('OPENOUTPUT','VSAMFILE','RRDS')
        IF rxvsam_result \= 0 THEN SAY 'Open Failed'
        my_rec = 'AAAAAAAAAAAAAAAAAAAA'
        rxvsam_result = RXVSAM('WRITE','VSAMFILE',,'MY_REC')
        IF rxvsam_result \= 0 THEN SAY 'First write Failed'
        my_rec = 'BBBBBBBBBBBBBBBBBBBB'
        rxvsam_result = RXVSAM('WRITE','VSAMFILE',,'MY_REC')
        IF rxvsam_result \= 0 THEN SAY 'Second write Failed'
        rxvsam_result = RXVSAM('CLOSE','VSAMFILE')

Error Messages

RXVSAM always returns a result, which is a decimal number.  In
addition, it sets the REXX variable RXVSAM_RETURNMSG with an
explanatory text.  All messages are in the form:  nnnns "text" where
nnnn is the message number, s is the severity level (I -
information, W - warning, E - error), and  text is a short
explanation of the problem.  In some cases, VSAM raised a condition
that RXVSAM is not prepared to handle (this may indicate a problem
with RXVSAM).  In that case, an additional variable,
RXVSAM_VSAMERRORMSG is set with the return and reason codes from
VSAM, and the location (label) in RXVSAM where the error occurred.

Following is a list of all messages:

0000I Request successfully processed
        no further action necessary

0001E Invalid argument passed
        a keyword or request is probably misspelled

0002E Open failed
        RXVSAM could not generate an ACB - check RXVSAM_VSAMERRORMSG
        for a return code from VSAM and check to see the DDNAME is
        correct

0003E Close failed
        check RXVSAM_VSAMERRORMSG for the VSAM return code and check
        to see the DDNAME is correct

0004W End of File
        perform end of file logic in your REXX program

0005E File is already open
        A previous OPEN was done for this DDNAME - ensure the DDNAME
        is correct

0007E REXX record variable could not be accessed or was undefined
        This error can occur on a WRITE or REWRITE request and
        usually indicates the variable that contains record data is
        an undefined variable.

0008E Duplicate record
        VSAM indicates this is a duplicate record

0010E Unable to save VSAM error data
        This is an internal RXVSAM error

0011E Unable to set return message text
        This is an internal RXVSAM error

0012E ACB was not available to perform CLOSE request - file may not
        be open. No ACB could be found for the DDNAME you specified -
        ensure the DDNAME is for the correct file, and that the file
        has been opened

0014E ACB was not available to perform request - file may not be
        open. No ACB could be found for the DDNAME you specified -
        ensure the DDNAME is for  the correct file, and that the
        file has been opened

0015E Unable to obtain max record length for this file
        This is probably an internal RXVSAM error (a SHOWCB macro
        failed), check RXVSAM_VSAMERRORMSG for the VSAM return code

0016W Record not found
        Perform not found logic in your REXX program

0016E Record not found - a FULL KEY must be specified when issuing a
        STARTBWD request.  For STARTBWD only: if you specified a full
        key, perform not found logic in your REXX program.  You
        cannot specify a partial (generic) key for a STARTBWD
        request.

0017E Cannot determine length of record
        This is probably an internal RXVSAM error (a SHOWCB macro
        failed), check RXVSAM_VSAMERRORMSG for the VSAM return code

0018E Unable to modify RPL for "UPDate"
        This is probably an internal RXVSAM error (a MODCB macro
        failed), check RXVSAM_VSAMERRORMSG for the VSAM return code

0019E Function failed
        This is probably an internal RXVSAM error,
        RXVSAM_VSAMERRORMSG may give additional information

0020E Unable to update RECORD variable
        This may indicate a storage constraint if you are running in
        a TSO or ISPF session, or an internal error in RXVSAM

0021E File is not open for INPUT
        You are trying to perform a READ function, but the file is
        only open for output

0022E File is not open for OUTPUT
        You are trying to perform a WRITE, REWRITE or DELETE
        function, but the file is only open for input

0023E Unable to switch to DIR processing
        This is probably an internal RXVSAM error,
        RXVSAM_VSAMERRORMSG may give additional information

0024E READGENERIC only allowed for KSDS
        You are attempting a READGENERIC function on an ESDS or RRDS

0025E Non-numeric key specified for an RRDS
        The key you passed for an RRDS is not numeric.  If you are
        passing a REXX variable, ensure the variable contains a
        valid numeric string, and not a binary or packed number

0026E This function is not allowed for an ESDS
        START, REWRITE and DELETE are not allowed for an ESDS

0088E READPREV attempted without a previous STARTBWD
        You must first issue a STARTBWD for positioning before
        READPREV request

0092E REWRITE or DELETE attempted without a previous READ
        You must first read a record before attempting to rewrite or
        delete it

0108E Record length = 0, > max, < key length (KSDS) or not equal to
        slot size (fixed length RRDS). This is a catchall record
        length error.  For a KSDS, a record must be at least the
        size of the key, and may not be greater than the maximum
        record size defined for the file when it was created.  For a
        fixed-length RRDS, all records must be equal to the record
        slot size.  In all cases, ensure the record variable you
        pass RXVSAM is not set to a null string as this will be a
        "zero length" record.


Installation

RXVSAM consists of two CSECTs: RXVSAM and RXVSAMSG.  RXVSAM contains
executable code, and RXVSAMSG contains texts for error messages.  A
VCON in RXVSAM points to RXVSAMSG, so the two CSECTs should be
link-edited together as one load module.  Total module size is a
little over 10K (2A08).  RXVSAM is reentrant, and runs in 31-bit
mode (AMODE=31, RMODE=ANY).

In addition to the VSAM and REXX macros, name / token services and a
few "standard" MVS control block macros are used in RXVSAM.  These
macros are found in SYS1.MACLIB in most installations.  Primary
testing was done using HLASM 5696-234, release 2.0.

To install, assemble the CSECTs and link.  TSO/ISPF users: make sure
the load library into which RXVSAM is linked is either a common one
in the link list, or specifically allocated via the ISPLLIB dd in
your TSO session.  Similarly, for batch users, RXVSAM must be in one
of the link list libraries, or allocated via a JOBLIB or STEPLIB
card.


