MODL     TITLE 'LIST LOAD MODULE AND CSECT ATTRIBUTES'
*---------------------------------------------------------------------*
*---     THIS PROGRAM LISTS THE LINK-EDIT ATTRIBUTES AND, FOR      ---*
*---     COBOL PROGRAMS, THE COMPILER VERSION AND SELECTED         ---*
*---     COMPILER OPTIONS OF AN ENTIRE LIBRARY.                    ---*
*---                                                               ---*
*---     INPUT DD STATEMENTS: THE SYSLIB DD STATEMENT DESIGNATES   ---*
*---     THE LIBRARY TO BE EXAMINED.  CONCATENATED DATASETS ARE    ---*
*---     NOT ALLOWED.                                              ---*
*---                                                               ---*
*---     INPUT PARM FIELD: IF A PARM OF 'NOLIB' IS SUPPLIED, THE   ---*
*---     VARIOUS 'INVISIBLE' LIBRARY ROUTINES ARE NOT LISTED.      ---*
*---     THESE ROUTINES ARE ALL THOSE WHOSE NAMES START WITH       ---*
*---     'ILB', 'IGZ', 'IHO', 'IHC', 'IHN', 'IBM', 'IHE', OR       ---*
*---     'IHD'.                                                    ---*
*---                                                               ---*
*---     OUTPUT CONSISTS OF A LISTING OF ALL THE LOAD MODULE       ---*
*---     ATTRIBUTES THAT CAN BE DETERMINED AS WELL AS ATTRIBUTE    ---*
*---     INFORMATION ABOUT EACH CSECT, OTHER THAN THOSE EXCLUDED   ---*
*---     BY THE NOLIB OPTION.  THE OUTPUT DATASET, SYSPRINT, MUST  ---*
*---     HAVE ALL DCB ATTRIBUTES SPECIFIED.  LRECL MAY BE          ---*
*---     ANYWHERE FROM 80 TO 255 BYTES AND THE RECORD FORMAT MUST  ---*
*---     BE FIXED.  ANSI CARRIAGE CONTROLS ARE USED THROUGHOUT.    ---*
*---                                                               ---*
*---     ONE SUGGESTION: YOU SHOULD RUN THIS PROGRAM IN THE        ---*
*---     LARGEST AVAILABLE REGION BELOW THE 16M LINE.  PART OF     ---*
*---     THE PROCESSING CONSISTS OF EXECUTING THE LOAD MACRO       ---*
*---     INSTRUCTION AGAINST EACH LOAD MODULE, SO THAT THE TEXT    ---*
*---     MAY BE SEARCHED FOR THE COBOL TCT AREA.  THOSE MODULES    ---*
*---     THAT ARE LINKED WITH THE RMODE=31 ATTRIBUTE ARE LOADED    ---*
*---     ABOVE THE 16M LINE, WHILE ALL OTHERS ARE LOADED BELOW     ---*
*---     THE 16M LINE, POSSIBLY REQUIRING A LARGE AMOUNT OF        ---*
*---     STORAGE.                                                  ---*
*---                                                               ---*
*---     ***POSSIBLE BUGS IN "LOAD" CODE.                          ---*
*---                                                               ---*
*---     RICK FOCHTMAN                                             ---*
*---     SR. SYSTEMS PROGRAMMING SPECIALIST                        ---*
*---     BOARD OF TRADE CLEARING CORP.                             ---*
*---     141 W. JACKSON BLVD, SUITE 1460                           ---*
*---     CHICAGO, IL  60604                                        ---*
*---     (312) 786-5772                                            ---*
*---     PREFERRED E-MAIL: RICKFOCHTMAN@COMPUSERVE.COM             ---*
*---------------------------------------------------------------------*
         EJECT
*---------------------------------------------------------------------*
*---     STANDARD NON-REENTRANT ENTRY LINKAGE STUFF                ---*
*---------------------------------------------------------------------*
*---     DEFINE AMODE/RMODE AND VARIOUS SWITCHES                   ---*
*---------------------------------------------------------------------*
MODLIST  CSECT
MODLIST  AMODE 24
MODLIST  RMODE 24
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
PDS2ATR1 $DSW  RENT,REUS,OVLY,TEST,LOAD,SCTR,EXEC,SNGLBLK,             X
               TYPE=NODATA
PDS2ATR2 $DSW  FLVL,ORG0,EP0,NRLD,EDIT,TSTN,LEF,REFR,TYPE=NODATA
MISCFLGS $DSW  NOLIB,TYPE=NODATA
         B     12(,R15)
         DC    AL1(7),CL7'MODLIST'
         STM   R14,R12,12(R13)
         BAS   R2,96(,R15)
         USING *,R13,R12,R11
         DS    18F
         DC    A(4096)
         LA    R2,0(,R2)           CLEAR HIGH-ORDER BYTE
         XC    0(72,R2),0(R2)      CLEAR THE NEW SAVE AREA
         ST    R2,8(,R13)          ADD TO FORWARD CHAIN
         ST    R13,4(,R2)          UPDATE BACK CHAIN POINTER
         LR    R13,R2              LOAD FIRST BASE REGISTER
         LR    R12,R13             COPY TO SECOND BASE
         AL    R12,72(,R13)        SET SECOND BASE REGISTER
         LR    R11,R12             COPY TO THIRD BASE REGISTER
         AL    R11,72(,R13)        SET THIRD BASE REGISTER
         L     R2,0(R1)            GET THE PARM POINTER
         LH    R1,0(R2)            GET PARM LENGTH
         CH    R1,=H'5'            LONG ENOUGH FOR 'NOLIB' ??
         BL    ALLESD              NOPE ---
         CLC   2(5,R2),=CL5'NOLIB' SKIP LIBRARY ROUTINES ??
         BNE   ALLESD              NOPE ---
         NI    SKIPLIB+1,X'0F'     YES; TURN OFF THE BRANCH
ALLESD   DS    0H
*---------------------------------------------------------------------*
*---     ALLOCATE MY ESD AND IDR TABLE SPACE.  I FORCE THEM        ---*
*---     ABOVE THE 16M LINE BY THE GETMAIN VC AND FREEMAIN VC      ---*
*---     THAT GRAB ALL THE AVAILABLE STORAGE BELOW THE LINE FIRST. ---*
*---------------------------------------------------------------------*
         L     R3,DATALEN
         GETMAIN RU,LV=(R3),BNDRY=PAGE,SP=40
         ST    R1,ESDTAB           SAVE AS ESD TABLE ADDRESS
         ST    R3,0(,R1)           SAVE SIZE IN HEADER
*---------------------------------------------------------------------*
*---     OPEN THE VARIOUS FILES NEEDED AND READ IN THE PDS         ---*
*---     DIRECTORY. ALSO, INITIALIZE THE 'SEG' FIELDS FOR THE      ---*
*---     REPORT DETAIL LINES.                                      ---*
*---------------------------------------------------------------------*
         OPEN  (PDS,INPUT,PRNT,OUTPUT)
         RDJFCB (PDS)
         MVC   DSNAME,JFCB
         LH    R0,PRNT+82          LOAD THE DCB LRECL VALUE
         STCM  R0,15,LINE1         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE2         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE3         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE4         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE5         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE6         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE7         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE8         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE9         STORE IN 'SEG' CONTROL FIELD
         STCM  R0,15,LINE10        STORE IN 'SEG' CONTROL FIELD
         CALL  GETALIAS,(DDN,CHAIN)
*---------------------------------------------------------------------*
*---     THE MAJOR PROCESSING LOOP STARTS HERE. START BY READING   ---*
*---     THE ENTIRE CESD AND IDR INFORMATION FROM THE LOAD MODULE. ---*
*---------------------------------------------------------------------*
REREAD   DS    0H
         NC    CHAIN,CHAIN         ANYTHING RETURNED ??
         BZ    ENDOFJOB            NOPE; QUIT RIGHT HERE
         #SEG  LINE1,SEPLINE       MOVE IN A SEPARATOR LINE
         BAS   R8,PUTR             GO PRINT THAT LINE
         L     R10,CHAIN           LOAD THE ENTRY POINTER
         MVC   LIST+4(76),8(R10)   COPY ENTRY TO MY LIST AREA
         MVC   CHAIN,0(R10)        UNCHAIN THAT LINK
         L     R2,ESDTAB           LOAD ESD TABLE ADDRESSES
         CALL  GETCESD,(PDS,LIST+12,(2))
         L     R2,ESDTAB           LOAD TABLE POINTER
         L     R3,4(,R2)           LOAD 'BYTES-USED' VALUE
         AR    R3,R2               POINT TO TABLE END
         ST    R3,ESDEND           SAVE NEW END POINTER
         LA    R9,LIST+4           LOAD DIRENTRY POINTER
         USING PDS2,R9             AND BASE THE DSECT
*---------------------------------------------------------------------*
*---     CHECK THE MODULE; IF EXECUTABLE, LOAD IT INTO MAIN        ---*
*---     STORAGE.  THEN SET THE BOUNDARIES OF THE MODULE FOR       ---*
*---     LATER USE DURING THE EXAMINATION PHASE.  IF THE MODULE    ---*
*---     ISN'T EXECUTABLE, WE SKIP THE EXAMINATION PHASE. ALSO,    ---*
*---     IF WE CAN'T LOAD THE MODULE, WE PUT OUT AN ERROR MESSAGE  ---*
*---     AND AGAIN SKIP THE EXAMINATION PHASE.                     ---*
*---------------------------------------------------------------------*
         LA    R7,PDS2NAME(R4)     POINT TO BLOCK END, FOR LATER
         #SEG  LINE1,=C'   ',1     SEED IN A LEADING BLANK
         #SEG  LINE1,LIST+4,8      MEMBER NAME TO LINE
         #SEG  LINE1,=C'   ',3     PAD WITH BLANKS
         HEXCNVT DWORK,PDS2TTRP,3  'HEX' THE TTR
         #SEG  LINE1,DWORK,6
         #SEG  LINE1,=C'   ',2
         HEXCNVT DWORK,PDS2STOR,3  'HEX' THE MODULE SIZE
         #SEG  LINE1,DWORK,6
         #SEG  LINE1,=C'   ',2
         L     R6,ESDTAB           LOAD POINTER TO ESD TABLE
         L     R5,ESDEND           LOAD TABLE-END ADDRESS
         LA    R4,16               LOAD TABLE ENTRY LENGTH
         BCTR  R5,R0               GLITCH FOR BXLE
         AL    R6,=F'8'            ACCOUNT FOR HEADER
GETEP    DS    0H
         CLI   8(R6),X'07'         'NULL' SECTION ??
         BE    SKIPEP              YES; SKIP IT
         TM    8(R6),X'10'         DELETED SECTION ??
         BO    SKIPEP              YES; SKIP IT
         CLC   9(3,R6),PDS2EPA     IS THIS THE EPA NAME
         BE    GOTEP
SKIPEP   DS    0H
         BXLE  R6,R4,GETEP
         #SEG  LINE1,=CL8' ',8
         B     NOEP
GOTEP    DS    0H
         #SEG  LINE1,0(,R6),8      ADD EP NAME TO LINE
NOEP     DS    0H
         #SEG  LINE1,=C'   ',2
         CALL  RDLKDATE,(PDS,LIST+12)
         ST    R0,XTTR             SAVE THAT DATE
         UNPK  DWORK,XTTR          INSERT THE ZONES
         OI    DWORK+7,X'F0'       FORCE LAST ZONE NUMERIC
         MVC   DWORK+2(2),DWORK+3  MAKE ROOM FOR PERIOD
         MVI   DWORK+4,C'.'
         #SEG  LINE1,DWORK+2,6     ADD TO LINE
         #SEG  LINE1,=C'   ',2
         MVC   DWORK,=CL8'*NO SSI*'
         TM    PDS2FTB1,PDS2SSI    IS SSI DATA PRESENT ??
         BZ    NOSSI               NOPE ---
         LR    R3,R7               COPY THE POINTER
         TM    PDS2FTB1,PDSAPFLG   IS APF DATA VALID ??
         BZ    NOSCTR              NOPE ---
         SH    R3,=H'2'            BACK UP PAST IT
NOSCTR   DS    0H
         SH    R3,=H'4'            BACK TO SSI START
         MVC   XTTR(4),0(R3)       COPY TO SCRATCH AREA
         HEXCNVT DWORK,XTTR,4      MAKE IT READABLE
NOSSI    DS    0H
         #SEG  LINE1,DWORK,8
         #SEG  LINE1,=C'   ',2
         MVC   DWORK,=CL8' '
         TM    PDS2FTB1,PDSAPFLG   IS APF DATA VALID ??
         BZ    NOAPF               NOPE ---
         SH    R7,=H'2'            BACK UP TO APF FLAG START
         IC    R0,1(,R7)           INSERT THE VALUE
         ICM   R0,14,=X'000000'    PAD WITH ZEROS
         CVD   R0,DWORK            CONVERT TO DECIMAL
         MVC   XTTR,=X'40202020'   EDIT MASK
         ED    XTTR,DWORK+6
NOAPF    DS    0H
         #SEG  LINE1,XTTR+1,3      INSERT INTO LINE
         #SEG  LINE1,=C'   ',2
         TM    PDS2FTB1,PDS2PAGA   PAGE ALIGNMENT REQUIRED ??
         BZ    NAT0                NOPE ---
         #SEG  LINE1,=C'PAGE,',5
NAT0     DS    0H
         TM    PDS2FTB2,PDSLRMOD   RMODE-31 ??
         BZ    NATA                NOPE ---
         #SEG  LINE1,=C'RMODE=ANY ',10 YES ---
         B     NATB                AND CONTINUE
NATA     DS    0H
         #SEG  LINE1,=C'RMODE=24 ',9  YES ---
NATB     DS    0H
         IC    R4,PDS2FTB2         INSERT THE FLAG BYTE
         N     R4,=F'3'            TRIM TO JUST AMODE BITS
         SLL   R4,2                TIMES 4
         B     *+4(R4)             BRANCH TO DATA INSERT
         B     NATW                AMODE=24
         B     NATW                AMODE=24
         B     NATX                AMODE=31
         B     NATY                AMODE=ANY
NATY     DS    0H
         #SEG  LINE1,=C'AMODE=ANY ',10
         B     NATZ                AND GO ---
NATW     DS    0H
         #SEG  LINE1,=C'AMODE=24 ',9
         B     NATZ                AND GO ---
NATX     DS    0H
         #SEG  LINE1,=C'AMODE=31 ',9
NATZ     DS    0H
         IF    RENT,OFF,GOTO=NAT1  REENTRANT ??
         #SEG  LINE1,=C'RENT ',5
NAT1     DS    0H
         IF    REUS,OFF,GOTO=NAT2
         #SEG  LINE1,=C'REUS ',5
NAT2     DS    0H
         IF    OVLY,OFF,GOTO=NAT3
         #SEG  LINE1,=C'OVLY ',5
NAT3     DS    0H
         IF    TEST,OFF,GOTO=NAT4
         #SEG  LINE1,=C'TEST ',5
NAT4     DS    0H
         IF    LOAD,OFF,GOTO=NAT5
         #SEG  LINE1,=C'OL ',3
NAT5     DS    0H
         IF    SCTR,OFF,GOTO=NAT6
         #SEG  LINE1,=C'SCTR ',5
NAT6     DS    0H
         IF    EXEC,ON,GOTO=NAT7
         #SEG  LINE1,=C'NOTEXEC ',8
NAT7     DS    0H
         IF    SNGLBLK,OFF,GOTO=NAT8
         #SEG  LINE1,=C'1-BLK ',6
NAT8     DS    0H
         IF    FLVL,OFF,GOTO=NAT9
         #SEG  LINE1,=C'DC ',3
NAT9     DS    0H
         IF    ORG0,OFF,GOTO=NAT10
         #SEG  LINE1,=C'ORIG-ZERO ',10
NAT10    DS    0H
         IF    EP0,OFF,GOTO=NAT11
         #SEG  LINE1,=C'EP-ZERO ',8
NAT11    DS    0H
         IF    NRLD,OFF,GOTO=NAT12
         #SEG  LINE1,=C'NO-RLD ',7
NAT12    DS    0H
         IF    EDIT,OFF,GOTO=NAT13
         #SEG  LINE1,=C'NE ',3
NAT13    DS    0H
         IF    TSTN,OFF,GOTO=NAT14
         #SEG  LINE1,=C'SYMS ',5
NAT14    DS    0H
         IF    LEF,OFF,GOTO=NAT15
         #SEG  LINE1,=C'LKED-F ',7
NAT15    DS    0H
         IF    REFR,OFF,GOTO=NAT16
         #SEG  LINE1,=C'REFR ',5
NAT16    DS    0H
         #SEG  LINE2,=C'     ',5
         BAS   R8,PUTR             OUTPUT THE LINE
         TM    PDS2ATR1,PDS2EXEC   EXECUTABLE ??
         BZ    BADLOAD             NOPE; SKIP IT
         MVC   LIST+4(8),0(R9)     COPY FOR A BLDL
         BLDL  PDS,LIST            REBUILD THE DIRECTORY ENTRY
         LOAD  DE=LIST+4,DCB=PDS,LOADPT=MODSTART,ERRET=BADLOAD,        X
               LSEARCH=NO
         N     R1,=A(X'FFFFFF')    TRIM R1 TO BARE MODULE LENGTH
         SLL   R1,3                TIMES 8
         AL    R1,MODSTART         ADD STARTING ADDRESS
         ST    R1,MODEND           STORE ENDING ADDRESS
         DROP  R9
*---------------------------------------------------------------------*
*---     START OF EXAMINATION PHASE                                ---*
*---------------------------------------------------------------------*
*---     LOOP THROUGH THE ESD TABLE, LOOKING AT EACH CSECT IN      ---*
*---     THE LOAD MODULE.  USING THE MASKS DEFINED AT AREA         ---*
*---     'MASKS', SEE IF IT'S A COBOL MODULE, WHAT TYPE OF         ---*
*---     COBOL AND CALL THE APPROPRIATE FORMATTER TO CHECK OUT     ---*
*---     THE COMPILE OPTIONS.  ALSO IF IT'S COBOL, LOOK THROUGH    ---*
*---     THE DATA DIVISION FOR THE PANVALET LEVEL STAMP THAT IS    ---*
*---     PECULIAR TO BOTCC.  IF FOUND, PRINT THAT DATA AS WELL.    ---*
*---------------------------------------------------------------------*
         L     R6,ESDTAB           LOAD POINTER TO ESD TABLE
         L     R5,ESDEND           LOAD TABLE-END ADDRESS
         LA    R4,16               LOAD TABLE ENTRY LENGTH
         BCTR  R5,R0               GLITCH FOR BXLE
         AL    R6,=F'8'            ACCOUNT FOR HEADER
ESDLP    DS    0H
         TM    8(R6),X'10'         DELETED OR REPLACED ??
         BO    NEXTESD             YES; SKIP IT
         NI    8(R6),X'0F'         TRIM MAP/JUNK BYTES
         CLI   8(R6),0             SECTION DEFINITION ??
         BE    ESDFORM             YES ---
         CLI   8(R6),4             PRIVATE CODE ??
         BE    ESDFORM             YES ---
         CLI   8(R6),5             COMMON ??
         BE    ESDFORM             YES ---
         B     NEXTESD             NOPE; SKIP IT ---
ESDFORM  DS    0H
SKIPLIB  B     NOSKIP               TURNED OFF FOR 'NOLIB' PARM
         CLC   0(3,R6),=CL3'ILB'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               COBOL V2, V3, V4, VS LIBRARY
         CLC   0(3,R6),=CL3'IGZ'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               COBOL II LIBRARY
         CLC   0(3,R6),=CL3'IHO'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               FORTRAN MOD II LIBRARY
         CLC   0(3,R6),=CL3'IHC'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               FORTRAN FREEBIE LIBRARY
         CLC   0(3,R6),=CL3'IHN'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               FORTRAN MOD I LIBRARY
         CLC   0(3,R6),=CL3'IBM'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               PL/I OPTIMIZER LIBRARY
         CLC   0(3,R6),=CL3'IHE'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               PL/I FREEBIE LIBRARY
         CLC   0(3,R6),=CL3'IHD'    IS IT A SUPPRESSED NAME
         BE    NEXTESD               COBOL F LIBRARY (ANCIENT)
NOSKIP   DS    0H
         #SEG  LINE1,=C'   CS-',6
         #SEG  LINE1,0(,R6),8
         #SEG  LINE1,=C'  ',2
         SR    R7,R7               CLEAR A REGISTER
         ICM   R7,7,9(R6)          INSERT CSECT OFFSET
         A     R7,MODSTART         POINT TO ACTUAL MODULE
         LA    R10,FORMTAB         POINT TO FORMAT TABLE
         LA    R9,FORMEND          POINT TO TABLE END
         LA    R8,16               LOAD TABLE ENTRY LENGTH
         LA    R3,MODWRK
         #XA   SET31
FORMLP1  DS    0H
         LM    R15,R2,0(R10)       LOAD TABLE ENTRIES
         CLM   R15,7,13(R6)        LONG ENOUGH ??
         BH    NOMATCH             NOPE ---
         BCTR  R15,R0
         EX    R15,COPY1           COPY A SECTION OF CODE
         EX    R15,AND1            'AND' WITH THE MASK
         EX    R15,CLC1            AND COMPARE RESULTS
         BE    FORMAT              MATCHES; GO FORMAT IT
NOMATCH  DS    0H
         BXLE  R10,R8,FORMLP1      CONTINUE SEARCHING/COMPARING
         #SEG  LINE1,=C'NOT COBOL ',10
         #XA   SET24
         BAS   R8,PUTR             OUTPUT THE LINE
         B     NEXTESD             GO DO THE NEXT CSECT
COPY1    MVC   0(1,R3),0(R7)       COPY A CHUNK OF CODE
AND1     NC    0(1,R3),0(R2)       CLEAR VARIABLE STUFF
CLC1     CLC   0(1,R3),0(R1)       AND COMPARE WITH 'MASK'
FORMAT   DS    0H
         LR    R15,R0              COPY SUBROUTINE ADDRESS
         LTR   R15,R15             WAS SYMBOL RESOLVED ??
         BZ    NOCALL              NOPE ---
         SR    R2,R2               CLEAR PARM REGISTER
         ICM   R2,7,9(R6)          INSERT CSECT OFFSET
         AL    R2,MODSTART         POINT TO ACTUAL SECTION
         LR    R1,R2               COPY ENTRY ADDRESS
         O     R15,=X'80000000'
         BASSM R14,R15             CALL THE FORMATTING ROUTINE
NOCALL   DS    0H
         #XA   SET24
         BAS   R8,PUTR             OUTPUT THE LINES WE BUILT
NEXTESD  DS    0H
         BXLE  R6,R4,ESDLP
         DELETE EPLOC=LIST+4
         B     REREAD
ENDOFJOB DS    0H
         FREEMAIN R,SP=40
         CLOSE (PRNT,,PDS)
         FREEPOOL PRNT
         L     R13,4(,R13)         LOAD BACK S.A. POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0
         BR    R14
BADLOAD  DS    0H
         #SEG  LINE1,=CL16' ',16
         #SEG  LINE1,NOLOAD
         BAS   R8,PUTR             OUTPUT THE ERROR MESSAGE
         B     REREAD              GO SKIP THE PROCESSING
         EJECT
*---------------------------------------------------------------------*
*---     THIS LITTLE LOCAL SUBROUTINE DOES ALL PRINTING AND        ---*
*---     PAGINATION FOR THE MODLIST UTILITY.  IT IS CALLED VIA     ---*
*---     BAS ON R8 AND RESETS ADDRESSING MODE DURING RETURN.       ---*
*---                                                               ---*
*---     PARAMETERS:  THERE IS NO PARM LIST. RATHER, THE CONTENTS  ---*
*---     OF LINE1-LINE10 ARE EXAMINED.  IF NON-EMPTY, THE LINE IS  ---*
*---     PRINTED AND CLEARED.  PAGE HEADER LINES ARE NOT COUNTED   ---*
*---     AS PART OF THE PAGE SIZE, SO BEWARE OF CHANGES HERE.      ---*
*---     ALSO, THE DATA LENGTH OF EACH LINE IS NOT CHECKED.        ---*
*---------------------------------------------------------------------*
PUTR     DS    0H
         STM   R14,R12,PUTSAVE     SAVE ENTRY REGISTERS
         LA    R6,LINE1            POINT TO LOOP START ADDRESS
         LA    R4,LINE2            POINT TO SECOND LINE
         SR    R4,R6               COMPUTE LINE LENGTH
         LA    R5,LASTLINE         POINT TO LOOP END
PUT1     DS    0H
         CLC   0(2,R6),=H'0'       PRINT THIS LINE ??
         BE    PUT6                NOPE ---
         CLI   4(R6),C' '          SINGLE SPACE ??
         BE    PUT4                YES ---
         CLI   4(R6),C'0'          DOUBLE SPACE ??
         BE    PUT3                YES ---
         CLI   4(R6),C'-'          TRIPLE SPACE !!
         BE    PUT2                YES ---
         CLI   4(R6),C'+'          SUPPRESS SPACE ??
         BE    PUT5                YES ---
         MVI   4(R6),C' '          REPLACE INVALID CC WITH BLANK
         B     PUT4                TREAT AS SINGLE SPACE
PUT2     DS    0H
         AP    LINECNT,=P'1'       ADD ONE TO LINE COUNT
PUT3     DS    0H
         AP    LINECNT,=P'1'       ADD ONE TO LINE COUNT
PUT4     DS    0H
         AP    LINECNT,=P'1'       ADD ONE TO LINE COUNT
         CP    LINECNT,PAGESIZE    OFF PAGE END ??
         BL    PUT5                NOPE; JUST PRINT THE LINE
         ZAP   LINECNT,=P'1'       RESET THE COUNTER
         PUT   PRNT,HDR1           OUTPUT THE PAGE HEADER(S)
         PUT   PRNT,HDR1A          OUTPUT THE PAGE HEADER(S)
         PUT   PRNT,HDR2           OUTPUT THE PAGE HEADER(S)
         PUT   PRNT,HDR3           OUTPUT THE PAGE HEADER(S)
         PUT   PRNT,HDR4           OUTPUT THE PAGE HEADER(S)
         PUT   PRNT,HDR5           OUTPUT THE PAGE HEADER(S)
PUT5     DS    0H
         PUT   PRNT,4(,R6)         OUTPUT THE LINE
         XC    0(2,R6),0(R6)       RESET 'CURRENT LENGTH'
         MVI   4(R6),C' '
         MVC   5(254,R6),4(R6)
PUT6     DS    0H
         BXLE  R6,R4,PUT1          LOOP FOR ALL THE LINES
         LM    R14,R12,PUTSAVE     RESTORE REGISTERS
         BSM   R0,R8               AND RETURN, RESTORING AMODE
PUTSAVE  DS    15F
HDR1     DC    CL255'1 LOAD MODULE/CSECT ATTRIBUTE REPORT'
HDR1A    DS    0CL255
         DC    C'    DATASET NAME = '
DSNAME   DC    CL44' '
         DC    CL200' '
HDR2     DC    CL255' '
HDR3     DC    C'                             '
         DC    C'ENTRY     LINK'
         DC    CL255' '
HDR4     DC    C'  MEMBER      '
         DC    C'TTR    '
         DC    C'LENGTH  '
         DC    C'POINT     '
         DC    C'DATE   '
         DC    C'SSI DATA  APF  LKED ATTRIBUTES'
         DC    CL255' '
HDR5     DC    CL255' '
SEPLINE  DS    0CL255
         DC    255C'-'
LINECNT  DC    P'99'
PAGESIZE DC    P'50'
         EJECT
DWORK    DS    D
         DC    F'0'
XTTR     DS    F
         DC    F'0'
NOLOAD   DC    CL35'CANNOT BE LOADED INTO MAIN STORAGE.'
DATALEN  DC    A(2048*1024)
MODSTART DC    A(0)                LOAD MODULE START ADDRESS
MODEND   DC    A(0)                LOAD MODULE END ADDRESS + 1
MODE31   DC    X'80000000'
DDN      DC    CL8'SYSLIB'
LOWSIZE  DC    A(1024)             MINSIZE
         DC    X'00FFFFFF'         MAXSIZE
LOWAREA  DC    2F'0'               ADDR. AND LENGTH RETURNED
CHAIN    DC    F'0'
         DC    C'ESD TABLE POINTERS ---->'
ESDTAB   DC    F'-1'
ESDEND   DC    F'-1'
LIST     DC    AL2(1,80)
         DC    CL8'MISSING '
         DC    CL80' '
PDS      DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,EXLST=JFCBL
JFCBL    DS    0F
         DC    X'07',AL3(JFCB)
         DC    X'80000000'
JFCB     DS    22D
PRNT     DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT
         DC    C' '
LINE     DC    CL255' '
         ENTRY LINE1,LINE2,LINE3,LINE4,LINE5
LINE1    DC    H'0,0'
LINE1D   DC    CL255' '
LINE2    DC    H'0,0'
LINE2D   DC    CL255' '
LINE3    DC    H'0,0'
LINE3D   DC    CL255' '
LINE4    DC    H'0,0'
LINE4D   DC    CL255' '
LINE5    DC    H'0,0'
LINE5D   DC    CL255' '
LINE6    DC    H'0,0'
LINE6D   DC    CL255' '
LINE7    DC    H'0,0'
LINE7D   DC    CL255' '
LINE8    DC    H'0,0'
LINE8D   DC    CL255' '
LINE9    DC    H'0,0'
LINE9D   DC    CL255' '
LASTLINE DS    0H
LINE10   DC    H'0,0'
LINE10D  DC    CL255' '
         LTORG
*---------------------------------------------------------------------*
*---     ENTRY POINTS OF THE VARIOUS OPTION-FORMATTING ROUTINES    ---*
*---                                                               ---*
*---     THE FORMATTING OF SECONDARY ENTRY DATA IS SIMPLY TO       ---*
*---     LOCATE THE MAIN ENTRY POINT, USING THE ENTRY DATA,        ---*
*---     AND BRANCH TO THE MAIN ENTRY-POINT HANDLER.               ---*
*---------------------------------------------------------------------*
         WXTRN FRMSMEP       FORMAT VSCOBOL MAIN ENTRY POINT
         WXTRN FRM2MEP       FORMAT VSCOBOL II MAIN ENTRY POINT
         WXTRN FRM4MEP       FORMAT ANS4 COBOL MAIN ENTRY POINT
FORMTAB  DC    A(44,FRM4MEP,ANS4MEP,ANS4MEPM)
         DC    A(44,FRMSMEP,CBVSMEP,CBVSMEPM)
FORMEND  DC    A(126,FRM2MEP,CBL2MEP,CBL2MEPM)
MODWRK   DC    256X'00'
*---------------------------------------------------------------------*
*---     THE SOLE PURPOSE OF THESE CONSTANTS IS TO DETERMINE IF    ---*
*---     THE ENTRY POINT IS IN A MODULE CREATED BY THE ANS4        ---*
*---     COBOL COMPILER, THE VS COBOL 2.4 COMPILER OR THE VS       ---*
*---     COBOL II COMPILER.  TO USE THESE MASKS, COPY THE DATA     ---*
*---     FROM THE ENTRY POINT ADDRESS FOR THE LENGTH OF THE        ---*
*---     MASK TO A WORK AREA.   THEN 'AND' THE XXXXXXXM MASK       ---*
*---     WITH THAT WORD AREA AND COMPARE TO THE XXXXXXX MASK.      ---*
*---     IF EQUAL, YOU'VE GOT A MATCH FOR THE COMPILER TYPE.       ---*
*---------------------------------------------------------------------*
*---     ANS4 COBOL COMPILED MAIN ENTRY POINT                      ---*
*---------------------------------------------------------------------*
ANS4MEP  DC    XL8'90ECD00C185D05F0'
         DC    XL8'4580F01000000000'
         DC    XL8'00000000C1D5E2F4'
         DC    XL8'0700989FF02407FF'
         DC    XL8'9602103407FE41F0'
         DC    XL4'000107FE'
ANS4MEPM DC    XL8'FFFFFFFFFFFFFFFF'
         DC    XL8'FFFFFFFF00000000'
         DC    XL8'00000000FFFFFFFF'
         DC    XL8'FFFFFFFFFFFFFFFF'
         DC    XL8'FFFFFFFFFFFFFFFF'
         DC    XL4'FFFFFFFF'
*---------------------------------------------------------------------*
*---     VS COBOL 2.4 COMPILED MAIN ENTRY POINT                    ---*
*---------------------------------------------------------------------*
CBVSMEP  DC    X'90ECD00C185D05F0'
         DC    X'4580F01040404040'
         DC    X'40404040E5E2D9F1'
         DC    X'0700989FF02407FF'
         DC    X'9602103407FE41F0'
         DC    X'000107FE'
CBVSMEPM DC    X'FFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFF40404040'
         DC    X'40404040FFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFF'
*---------------------------------------------------------------------*
*---     VS COBOL II COMPILED MAIN ENTRY POINT                     ---*
*---------------------------------------------------------------------*
CBL2MEP  DC    X'47F0F07023404040404040404040C3F2' +00
         DC    X'40F04BF04BF040F0F061F0F061F0F040' +10
         DC    X'F0F04BF0F04BF0F00000000000000000' +20
         DC    X'00000000000000000000000000000000' +30
         DC    X'00000000000000000000000000000000' +40
         DC    X'00000000000000000000000000000000' +50
         DC    X'00000000000000000000000000000000' +60
         DC    X'90ECD00C5810F02898EFF06807FF'     +70
CBL2MEPM DC    X'FFFFFFFFFF4040404040404040FFFFFF' +00
         DC    X'FFF0FFF0FFF0FFF0F0FFF0F0FFF0F040' +10
         DC    X'F0F0FFF0F0FFF0F00000000000000000' +20
         DC    X'00000000000000000000000000000000' +30
         DC    X'00000000000000000000000000000000' +40
         DC    X'00000000000000000000000000000000' +50
         DC    X'00000000000000000000000000000000' +60
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFF'     +70
*---------------------------------------------------------------------*
*---     ESD RECORD WITHIN A LOAD MODULE                           ---*
*---                                                               ---*
*---     CREATED BY: LINKAGE EDITOR                                ---*
*---                                                               ---*
*---     ADDRESS: N/A                                              ---*
*---                                                               ---*
*---     LENGTH: 24-248 BYTES                                      ---*
*---------------------------------------------------------------------*
ESDREC   DSECT
ESDRID   DS    XL1      RECORD ID (X'20')
ESDRFLG  DS    XL1      SPECIAL FLAG FIELD
*        0... ....  BYTE 12 OF ESD DATA ITEM
*                   CONTAINS SEGMENT NUMBERS
*        1... ....  BYTE 12 OF ESD DATA ITEM
*                   CONTAINS RSECT/RMODE/AMODE FLAGS
         DS    XL2      UNUSED BYTES
ESDFID   DS    H        ESDID OF FIRST ESD DATA ITEM
ESDRCNT  DS    H        BYTE COUNT OF ESD DATA
ESDDATA  DS    CL240    UP TO 240 BYTES OF ESD DATA
*---------------------------------------------------------------------*
*---     ESD DATA ITEM WITHIN THE ESD RECORD                       ---*
*---                                                               ---*
*---     CREATED BY: LINKAGE EDITOR                                ---*
*---                                                               ---*
*---     ADDRESS: N/A                                              ---*
*---                                                               ---*
*---     LENGTH: 16 BYTES                                          ---*
*---------------------------------------------------------------------*
ESDMAP   DSECT
ESDNAME  DS    CL8      SYMBOL NAME
ESDTYPE  DS    BL1      ESD TYPE
*        .... 0000  SECTION DEFINITION (SD)
*        .... 0011  LABEL REFERENCE (LR)
*        .... 0100  PRIVATE CODE (PC)
*        .... 0101  COMMON (CM)
*        .... 0110  PESUDO REGISTER (PR)
*        .... 0111  NULL
*        .... 0010  EXTERNAL REFERENCE (ER)
*        .... 1010  WEAK EXTERNAL REFERENCE (WX)
*        ...1 .100  PRIVATE CODE MARKED DELETE
*                   ($SEGTAB / $ENTAB SECTIONS)
*        ...1 ....  DELETE FLAG
*        ...1 ....  ALSO REPLACE FLAG
*        ..1. ....  INSERT FLAG
*        .1.. ....  CHAIN FLAG
*        1... ....  MAP FLAG
ESDADDR  DS    AL3      LINKAGE-EDITOR ASSIGNED ADDRESS
*        ZERO IF TYPE = ER,WX OR NULL
ESDFLG1  DS    BL1      MISC. FLAGS
*        ZERO FOR ER, WX OR NULL
*        SEGMENT NUMBER, IF BYTE 1, BIT 0 IS 0
*        AMODE/RMODE/RSECT FLAGS, IF BYTE 1, BIT 0 IS 1
*        XXXX ....  NOT USED
*        .... 1...  READ-ONLY SECTION
*        .... 0...  NOT READ-ONLY SECTION
*        .... .0..  RMODE = 24
*        .... .1..  RMODE = ANY
*        .... ..00  AMODE = 24
*        .... ..01  AMODE = 24
*        .... ..10  AMODE = 31
*        .... ..11  AMODE = ANY
*        ALIGNMENT FACTOR, IF TYPE = PR
*        0000 0111  DOUBLEWORD ALIGNMENT
*        0000 0011  FULLWORD ALIGNMENT
*        0000 0001  HALFWORD ALIGNMENT
*        0000 0000  BYTE ALIGNMENT
ESDIDF   DS    AL3      ANOTHER MULTI-USE FIELD
*        LENGTH, IF TYPE IS SD,PD,CM OR PR
*        ESDID, IF TYPE = LR
*        ZERO, IF TYPE IS WX,NULL OR ER (X'06' INDICATES NEVERCALL)
         IHAPDS PDSBLDL=NO
         END
FRMSMEP  CSECT
FRMSMEP  AMODE 31
FRMSMEP  RMODE 24
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         B     12(,R15)
         DC    AL1(7),CL7'FRMSMEP' CSECT IDENTIFIER
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         BAS   R2,92(,R15)
         USING *,R13
         DS    18F
         XC    0(72,R2),0(R2)
         ST    R2,8(,R13)
         ST    R13,4(,R2)
         LR    R13,R2
         LR    R12,R1              COPY INPUT POINTER
         USING COBINIT,R12         AND BASE ITS DSECT
*
*        FIRST LOOK FOR IDENTIFIER WITHIN THE INITIALIZATION CODE
*
MAINLINE DS    0H
         LA    R10,LINETAB         POINT TO OUTPUT LINE TABLE
         L     R11,0(,R10)         POINT TO FIRST OUTPUT LINE
         #SEG  0(,R11),CBESIGID
         #SEG  0(,R11),BLANKS,2
         #SEG  0(,R11),CBECOMP     COMPILER ID
         #SEG  0(,R11),BLANKS,8
         #SEG  0(,R11),CBECDATE     COMPILE DATE
         #SEG  0(,R11),BLANKS,2
         #SEG  0(,R11),CBECTIME     COMPILE TIME
         #SEG  0(,R11),BLANKS,2
         L     R5,CBETGT           GET TASK GLOBAL TABLE POINTER
         CLC   KSYSOUT,X'1BC'(R5)  CHECK FOR GOOD TGT
         BNE   NOTTGT              GOT PROBLEMS UNDERSTANDING
         TM    72(R5),X'10'        MAIN PGM ??
         BNO   NB1                 NOPE ---
         #SEG  0(,R11),KMAIN,NOFIT=NEWLINE
NB1      DS    0H
         TM    72(R5),X'08'        SYMDUMP ??
         BNO   NB2                 NOPE ---
         #SEG  0(,R11),KSYMD,NOFIT=NEWLINE
NB2      DS    0H
         TM    72(R5),X'04'        FLOW ??
         BNO   NB3                 NOPE ---
         #SEG  0(,R11),KFLOW,NOFIT=NEWLINE
NB3      DS    0H
         TM    72(R5),X'02'        STATE ??
         BNO   NB4                 NOPE ---
         #SEG  0(,R11),KSTATE,NOFIT=NEWLINE
NB4      DS    0H
         TM    72(R5),X'01'        OPTIMIZE ??
         BNO   NB5                 NOPE ---
         #SEG  0(,R11),KOPT,NOFIT=NEWLINE
NB5      DS    0H
         TM    73(R5),X'10'        TEST ??
         BNO   NB6                 NOPE ---
         #SEG  0(,R11),KTEST,NOFIT=NEWLINE
NB6      DS    0H
         TM    74(R5),X'80'        RES ??
         BO    NB8                 NOPE ---
         #SEG  0(,R11),KRES,NOFIT=NEWLINE
NB8      DS    0H
         TM    74(R5),X'40'        ENDJOB ??
         BNO   NB9                 NOPE ---
         #SEG  0(,R11),KENDJOB,NOFIT=NEWLINE
NB9      DS    0H
         TM    74(R5),X'20'        OBJ370 ??
         BNO   NB10                NOPE ---
         #SEG  0(,R11),KOBJ370,NOFIT=NEWLINE
NB10     DS    0H
         TM    74(R5),X'08'        COUNT ??
         BNO   NB11                NOPE ---
         #SEG  0(,R11),KCOUNT,NOFIT=NEWLINE
NB11     DS    0H
         TM    74(R5),X'04'        TRACE VERB PRESENT ??
         BNO   NB12                NOPE ---
         #SEG  0(,R11),KTRACE,NOFIT=NEWLINE
NB12     DS    0H
         LA    R10,4(,R10)
         L     R11,0(,R10)         POINT TO NEXT PRINT LINE
         #SEG  0(,R11),BLANKS
         #SEG  0(,R11),KPAN
         LH    R8,0(,R11)          LOAD LINE HEADER
         LA    R8,4(R8,R11)        POINT TO, OUTPUT AREA
          CALL  GETSTAMP,((12),(5),(8)) GO LOCATE THE TIME STAMP
         LTR   R15,R15             WAS IT FOUND ??
         BZ    DONEFMT             YES ---
         #SEG  0(,R11),KNOPAN
DONEFMT  DS    0H
         L     R13,4(,R13)         LOAD BACK POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ZERO RETURN CODE
         BSM   R0,R14              RETURN TO CALLER
NEWLINE  DS    0H
         LA    R10,4(,R10)         POINT TO NEXT LINE ENTRY
         L     R11,0(,R10)         POINT TI LINE AREA
         XC    0(2,R11),0(R11)     'CLEAR' IT OUT
         #SEG  0(,R11),BLANKS      LEADING BLANK STUFF
         BR    R9                  AND RETURN TO RE-SEG
*
*        UNABLE TO FIND THE TASK GLOBAL TABLE  -
*
NOTTGT   DC    H'0'
         #SEG  0(,R11),KNOTGT
         B     DONEFMT
KSYSOUT  DC    CL8'SYSOUT'
KMAIN    DC    CL5'MAIN '
KSYMD    DC    CL8'SYMDUMP '
KFLOW    DC    CL5'FLOW '
KSTATE   DC    CL6'STATE '
KOPT     DC    CL9'OPTIMIZE '
KTEST    DC    CL5'TEST '
KRES     DC    CL4'RES '
KENDJOB  DC    CL7'ENDJOB '
KOBJ370  DC    CL7'OBJ370 '
KCOUNT   DC    CL6'COUNT '
KTRACE   DC    CL19'TRACE-VERB-PRESENT '
KPAN     DC    CL11'PAN STAMP:'
KNOPAN   DC    CL26'NO PANVALET STAMP FOUND.'
KNOTGT   DC    CL16'NO TGT FOUND.'
LINETAB  DC    V(LINE1)
         DC    V(LINE2)
         DC    V(LINE3)
         DC    V(LINE4)
         DC    V(LINE5)
BLANKS   DC    CL16' '
         LTORG
*---------------------------------------------------------------------*
*---     THIS DSECT DESCRIBES THE PARTS OF THE INITIALIZATION CODE ---*
*---     THAT WE ARE MOST INTERESTED IN.                           ---*
*---------------------------------------------------------------------*
COBINIT  DSECT
CBES     DS    3F      THREE WORDS OF CODE
CBESIGID DS    CL8     PROGRAM NAME
CBECOMP  DS    CL4     COMPILER IDENTIFIER
         ORG   COBINIT+X'3C'
CBETGT   DS    A       TGT ADDRESS
         ORG   COBINIT+X'88'
CBECTIME DS    CL8     COMPILE TIME
CBECDATE DS    CL12    COMPILE DATE
         ORG
VSTGT    DSECT
         ORG   VSTGT+X'48'
VSTGTOPT DS    XL4     COMPILER OPTIONS BYTES
         ORG   VSTGT+X'1BC'
VSTGTDD  DS    CL8    'SYSOUT  ' CONSTANT
         ORG   VSTGT+X'1C8'
VSTGTWS  DS    A      ADDRESS OF WORKING STORAGE
         ORG
         END
FRM2MEP  CSECT
FRM2MEP  AMODE 31
FRM2MEP  RMODE 24
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         PRINT ON,NOGEN
CBLINF1  $DSW  ADV,APOST,DATA31,DECK,DUMP,DYNAM,FASTSRT,FDUMP,         X
               TYPE=NODATA
CBLINF2  $DSW  LIB,LIST,MAP,NUM,OBJ,OFFSET,OPTIMIZE,DDNAME,            X
               TYPE=NODATA
CBLINF3  $DSW  PFDSGN,RENT,RES,SEQUENCE,SIZEMAX,SOURCE,SSRANGE,        X
               TERM,TYPE=NODATA
CBLINF4  $DSW  TEST,TRUNC,URSVWD,VBREF,XREF,ZWB,NAME,CMPR2,            X
               TYPE=NODATA
CBLINF5  $DSW  NUMPROCM,NUMCLASS,DBCS,AWO,TRUNCBIN,TYPE=NODATA
         PRINT ON,GEN,NODATA
         B     12(,R15)
         DC    AL1(7),CL7'FRM2MEP' CSECT IDENTIFIER
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         BAS   R2,92(,R15)
         USING *,R13
         DS    18F
         XC    0(72,R2),0(R2)
         ST    R2,8(,R13)
         ST    R13,4(,R2)
         LR    R13,R2
         LR    R12,R1              COPY INPUT POINTER
         USING COBINIT,R12         AND BASE ITS DSECT
*
*        FIRST LOOK FOR IDENTIFIER WITHIN THE INITIALIZATION CODE
*
MAINLINE DS    0H
         LA    R10,LINETAB         POINT TO OUTPUT LINE TABLE
         L     R11,0(,R10)         POINT TO FIRST OUTPUT LINE
         #SEG  0(,R11),CBLSIGID
         #SEG  0(,R11),BLANKS,2
         #SEG  0(,R11),CBLCOMP      COMPILER ID
         #SEG  0(,R11),BLANKS,2
         #SEG  0(,R11),CBLVRM       COMPILER VERSION/RELEASE/MOD
         #SEG  0(,R11),BLANKS,2
         #SEG  0(,R11),CBLDATE      COMPILE DATE
         #SEG  0(,R11),BLANKS,3
         #SEG  0(,R11),CBLTIME      COMPILE TIME
         #SEG  0(,R11),BLANKS,2
         IF    ADV,OFF,GOTO=OPT1
         #SEG  0(,R11),KADV,NOFIT=NEWLINE
OPT1     DS    0H
         IF    DATA31,OFF,GOTO=OPT2A
         #SEG  0(,R11),KDATA31,NOFIT=NEWLINE
         B     OPT2B
OPT2A    DS    0H
         #SEG  0(,R11),KDATA24,NOFIT=NEWLINE
OPT2B    DS    0H
         IF    DYNAM,OFF,GOTO=OPT6A
         #SEG  0(,R11),KDYNAM,NOFIT=NEWLINE
OPT6A    DS    0H
         IF    FASTSRT,OFF,GOTO=OPT7A
         #SEG  0(,R11),KFASTSRT,NOFIT=NEWLINE
OPT7A    DS    0H
         IF    FDUMP,OFF,GOTO=OPT8A
         #SEG  0(,R11),KFDUMP,NOFIT=NEWLINE
OPT8A    DS    0H
         IF    OPTIMIZE,OFF,GOTO=OPT15A
         #SEG  0(,R11),KOPT,NOFIT=NEWLINE
OPT15A   DS    0H
         IF    DDNAME,OFF,GOTO=OPT16A
         #SEG  0(,R11),KDDNAME,NOFIT=NEWLINE
OPT16A   DS    0H
         IF    PFDSGN,OFF,GOTO=OPT17A
         #SEG  0(,R11),KPFDSGN,NOFIT=NEWLINE
OPT17A   DS    0H
         IF    RENT,OFF,GOTO=OPT18A
         #SEG  0(,R11),KRENT,NOFIT=NEWLINE
OPT18A   DS    0H
         IF    RES,OFF,GOTO=OPT19A
         #SEG  0(,R11),KRES,NOFIT=NEWLINE
OPT19A   DS    0H
         IF    SSRANGE,OFF,GOTO=OPT23A
         #SEG  0(,R11),KSSRANGE,NOFIT=NEWLINE
OPT23A   DS    0H
         IF    TEST,OFF,GOTO=OPT25A
         #SEG  0(,R11),KTEST,NOFIT=NEWLINE
OPT25A   DS    0H
         IF    TRUNC,OFF,GOTO=OPT26A
         #SEG  0(,R11),KTRUNC,NOFIT=NEWLINE
OPT26A   DS    0H
         IF    ZWB,OFF,GOTO=OPT30A
         #SEG  0(,R11),KZWB,NOFIT=NEWLINE
OPT30A   DS    0H
         IF    CMPR2,OFF,GOTO=OPT32A
         #SEG  0(,R11),KCMPR2,NOFIT=NEWLINE
OPT32A   DS    0H
         IF    NUMPROCM,OFF,GOTO=OPT33A
         #SEG  0(,R11),KNUMPR,NOFIT=NEWLINE
OPT33A   DS    0H
         IF    NUMCLASS,OFF,GOTO=OPT34A
         #SEG  0(,R11),KNUMC,NOFIT=NEWLINE
OPT34A   DS    0H
         IF    DBCS,OFF,GOTO=OPT35A
         #SEG  0(,R11),KDBCS,NOFIT=NEWLINE
OPT35A   DS    0H
         IF    AWO,OFF,GOTO=OPT36A
         #SEG  0(,R11),KAWO,NOFIT=NEWLINE
OPT36A   DS    0H
         IF    TRUNCBIN,OFF,GOTO=OPT37A
         #SEG  0(,R11),KTRUNCB,NOFIT=NEWLINE
OPT37A   DS    0H
         LA    R10,4(,R10)
         L     R11,0(,R10)         POINT TO NEXT PRINT LINE
         #SEG  0(,R11),BLANKS
         #SEG  0(,R11),KSTAMP
         LH    R8,0(,R11)          LOAD LINE HEADER
         LA    R8,4(R8,R11)        POINT TO, OUTPUT AREA
         L     R2,X'05C'(,R12)     LOAD TGT ADDRESS
          CALL  GETSTAMP,((12),(2),(8)) GO LOCATE THE TIME STAMP
         LTR   R15,R15             WAS IT FOUND ??
         BZ    DONEFMT             YES ---
         #SEG  0(,R11),KNOPAN
DONEFMT  DS    0H
         L     R13,4(,R13)         LOAD BACK POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ZERO RETURN CODE
         BSM   R0,R14              RETURN TO CALLER
NEWLINE  DS    0H
         LA    R10,4(,R10)         POINT TO NEXT LINE ENTRY
         L     R11,0(,R10)         POINT TI LINE AREA
         XC    0(2,R11),0(R11)     'CLEAR' IT OUT
         #SEG  0(,R11),BLANKS      LEADING BLANK STUFF
         BR    R9                  AND RETURN TO RE-SEG
KADV     DC    CL4'ADV'
KAWO     DC    CL4'AWO' ?????????
KRES     DC    CL4'RES'
KZWB     DC    CL4'ZWB'
KDBCS    DC    CL5'DBCS'
KRENT    DC    CL5'RENT'
KTEST    DC    CL5'TEST'
KCMPR2   DC    CL6'CMPR2'
KDYNAM   DC    CL6'DYNAM'
KFDUMP   DC    CL6'FDUMP'
KTRUNC   DC    CL6'TRUNC'
KDDNAME  DC    CL7'DDNAME'  ?????????
KPFDSGN  DC    CL7'PFDSGN'
KFASTSRT DC    CL8'FASTSRT'
KSSRANGE DC    CL8'SSRANGE'
KDATA24  DC    CL9'DATA(24)'
KDATA31  DC    CL9'DATA(31)'
KNUMC    DC    CL9'NUMCLASS' ????????
KOPT     DC    CL9'OPTIMIZE'
KSTAMP   DC    CL11'PAN STAMP:'
KTRUNCB  DC    CL11'TRUNC(BIN)'
KNUMPR   DC    CL13'NUMPROC(MIG)'  ????????
KNOPAN   DC    CL24'NO PANVALET STAMP FOUND.'
LINETAB  DC    V(LINE1)
         DC    V(LINE2)
         DC    V(LINE3)
         DC    V(LINE4)
         DC    V(LINE5)
BLANKS   DC    CL16' '
         LTORG
*---------------------------------------------------------------------*
*---     THIS DSECT DESCRIBES THE PARTS OF THE INITIALIZATION CODE ---*
*---     THAT WE ARE MOST INTERESTED IN.                           ---*
*---------------------------------------------------------------------*
COBINIT  DSECT
CBLS     DS    F       '47XXXXXX' INSTRUCTION
CBLSIGLN DS    FL1     SIGNATURE LENGTH
CBLSIGID DS    CL8     PROGRAM NAME
CBLCOMP  DS    CL4     COMPILER IDENTIFIER
CBLVRM   DS    CL6     VERSION/RELEASE/MOD
CBLDATE  DS    CL9     DATE COMPILED
CBLTIME  DS    CL8     TIME COMPILED
CBLPRMS  DS    A       INIT. RTN PARMS
CBLINF1  DS    XL1     INFO BYTES
CBLINF2  DS    XL1     INFO BYTES
CBLINF3  DS    XL1     INFO BYTES
CBLINF4  DS    XL1     INFO BYTES
CBLINF5  DS    XL1     INFO BYTES
CBLINF6  DS    XL1     INFO BYTES
CBLINF7  DS    XL1     INFO BYTES
CBLINF8  DS    XL1     INFO BYTES
CBLINF9  DS    XL1     INFO BYTES
CBLINF10 DS    XL1     INFO BYTES
CBLINF11 DS    XL1     INFO BYTES
CBLINF12 DS    XL1     INFO BYTES
CBLINF13 DS    XL1     INFO BYTES
CBLINF14 DS    XL1     INFO BYTES
CBLINF15 DS    XL1     INFO BYTES
CBLINF16 DS    XL1     INFO BYTES
CBLINF17 DS    XL1     INFO BYTES
CBLINF18 DS    XL1     INFO BYTES
CBLINF19 DS    XL1     INFO BYTES
CBLINF20 DS    XL1     INFO BYTES
CBLINF21 DS    XL1     INFO BYTES
CBLINF22 DS    XL1     INFO BYTES
CBLINF23 DS    XL1     INFO BYTES
CBLRS1   DS    XL1     RESERVED BYTE
CBL#DATA DS    F       # OF DATA DIV. STATEMENTS
CBL#PROC DS    F       # OF PROC. DIV. STATEMENTS
CBLINF24 DS    XL1     INFO BYTES
CBLINF25 DS    XL1     INFO BYTES
CBLRS2   DS    XL2     RESERVED
CBLLINFO DS    CL4     USER LEVEL INFO (LVINFO)
CBLEPA   DS    A       MAIN ENTRY POINT ADDRESS
CBLPGT   DS    A       PGT ADDRESS
CBLTGT   DS    A       TGT ADDRESS
CBLEPNAM DS    A       ADDRESS OF EP NAME
CBLEPCUR DS    A       CURRENT EP ADDRESS
CBLSTRT  DS    A       ADDRESS OF PROCEDURE CODE
CBLINIT  DS    A       ADDRESS OF INIT ROUTINE
CBLSTM   DC    XL14'90ECD00C5810F02898EFF06807FF'
         END
FRM4MEP  CSECT
FRM4MEP  AMODE 31
FRM4MEP  RMODE 24
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         B     12(,R15)
         DC    AL1(7),CL7'FRM4MEP' CSECT IDENTIFIER
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         BAS   R2,92(,R15)
         USING *,R13
         DS    18F
         XC    0(72,R2),0(R2)
         ST    R2,8(,R13)
         ST    R13,4(,R2)
         LR    R13,R2
         LR    R12,R1              COPY INPUT POINTER
         USING COBINIT,R12            AND BASE ITS DSECT
*
*        FIRST LOOK FOR IDENTIFIER WITHIN THE INITIALIZATION CODE
*
MAINLINE DS    0H
         LA    R10,LINETAB         POINT TO OUTPUT LINE TABLE
         L     R11,0(,R10)         POINT TO FIRST OUTPUT LINE
         #SEG  0(,R11),CBESIGID
         #SEG  0(,R11),BLANKS,2
         #SEG  0(,R11),CBECOMP     COMPILER ID
         #SEG  0(,R11),BLANKS,8
         #SEG  0(,R11),BLANKS,12    COMPILE DATE
         #SEG  0(,R11),BLANKS,2
         #SEG  0(,R11),BLANKS,8     COMPILE TIME
         #SEG  0(,R11),BLANKS,2
         L     R5,CBETGT           GET TASK GLOBAL TABLE POINTER
         CLC   KSYSOUT,X'1BC'(R5)  CHECK FOR GOOD TGT
         BNE   NOTTGT              GOT PROBLEMS UNDERSTANDING
         TM    72(R5),X'10'        MAIN PGM ??
         BNO   NB1                 NOPE ---
         #SEG  0(,R11),KMAIN,NOFIT=NEWLINE
NB1      DS    0H
         TM    72(R5),X'08'        SYMDUMP ??
         BNO   NB2                 NOPE ---
         #SEG  0(,R11),KSYMD,NOFIT=NEWLINE
NB2      DS    0H
         TM    72(R5),X'04'        FLOW ??
         BNO   NB3                 NOPE ---
         #SEG  0(,R11),KFLOW,NOFIT=NEWLINE
NB3      DS    0H
         TM    72(R5),X'02'        STATE ??
         BNO   NB4                 NOPE ---
         #SEG  0(,R11),KSTATE,NOFIT=NEWLINE
NB4      DS    0H
         TM    72(R5),X'01'        OPTIMIZE ??
         BNO   NB5                 NOPE ---
         #SEG  0(,R11),KOPT,NOFIT=NEWLINE
NB5      DS    0H
         TM    73(R5),X'10'        TEST ??
         BNO   NB6                 NOPE ---
         #SEG  0(,R11),KTEST,NOFIT=NEWLINE
NB6      DS    0H
         TM    74(R5),X'80'        RES ??
         BO    NB8                 NOPE ---
         #SEG  0(,R11),KRES,NOFIT=NEWLINE
NB8      DS    0H
         TM    74(R5),X'40'        ENDJOB ??
         BNO   NB9                 NOPE ---
         #SEG  0(,R11),KENDJOB,NOFIT=NEWLINE
NB9      DS    0H
         TM    74(R5),X'20'        OBJ370 ??
         BNO   NB10                NOPE ---
         #SEG  0(,R11),KOBJ370,NOFIT=NEWLINE
NB10     DS    0H
         TM    74(R5),X'08'        COUNT ??
         BNO   NB11                NOPE ---
         #SEG  0(,R11),KCOUNT,NOFIT=NEWLINE
NB11     DS    0H
         TM    74(R5),X'04'        TRACE VERB PRESENT ??
         BNO   NB12                NOPE ---
         #SEG  0(,R11),KTRACE,NOFIT=NEWLINE
NB12     DS    0H
*         BYTE 1  BIT 0 MASK X'80'  USED BY ON SIZE ERROR
*         BYTE 1  BIT 1 MASK X'40'  USED BY READY TRACE VERB
*         BYTE 1  BIT 2 MASK X'20'  INITIALIZATION FLAG
*         BYTE 1  BIT 3 MASK X'10'  MAIN PROGRAM FLAG
*         BYTE 1  BIT 4 MASK X'08'  SYMDUMP FLAG
*         BYTE 1  BIT 5 MASK X'04'  FLOW FLAG
*         BYTE 1  BIT 6 MASK X'02'  STATE FLAG / REUSED AT RUN TIME
*         BYTE 1  BIT 7 MASK X'01'  OPTIMIZATION FLAG
*         BYTE 2  BIT 0 MASK X'80'  RESERVED
*         BYTE 2  BIT 1 MASK X'40'  USED BY CALL AND CANCEL
*         BYTE 2  BIT 2 MASK X'20'  EXEC TIME STATE FLAG
*         BYTE 2  BIT 3 MASK X'10'  TEST ATTRIBUTE FLAG
*         BYTE 2  BIT 4 MASK X'08'  QUOTE IS APOST FLAG
*         BYTE 2  BIT 5 MASK X'04'  SPECIAL SYMDUMP USAGE
*         BYTE 2  BIT 6 MASK X'02'  LONG TGT FLAG, ALWAYS 1 FOR V4 / VS
*         BYTE 2  BIT 7 MASK X'01'  Q-ROUTINE USAGE
*         BYTE 3  BIT 0 MASK X'80'  NORES FLAG, SET TO 0 FOR RES OPTION
*         BYTE 3  BIT 1 MASK X'40'  ENDJOB WAS SPECIFIED
*         BYTE 3  BIT 2 MASK X'20'  OBJECT COMPUTER 370 SPECIFIED
*         BYTE 3  BIT 3 MASK X'10'  Q-ROUTINE FLAG
*         BYTE 3  BIT 4 MASK X'08'  COUNT OPTION - VS
*         BYTE 3  BIT 5 MASK X'04'  TRACE VERB IS PRESENT
*         BYTE 3  BIT 6 MASK X'02'  SYNADAF USAGE
*         BYTE 3  BIT 7 MASK X'01'  UNUSED BIT
*         BYTE 4  DEC POINT IS COMMA BYTE
*                 C',' IF SPECIFIED, ELSE C'.'
         LA    R10,4(,R10)
         L     R11,0(,R10)         POINT TO NEXT PRINT LINE
         #SEG  0(,R11),BLANKS
         #SEG  0(,R11),KSTAMP
         LH    R8,0(,R11)          LOAD LINE HEADER
         LA    R8,4(R8,R11)        POINT TO, OUTPUT AREA
         L     R3,X'1C8'(,R2)      LOAD WORKING STORAGE ADDRESS
          CALL  GETSTAMP,((12),(5),(8)) GO LOCATE THE TIME STAMP
         LTR   R15,R15             WAS IT FOUND ??
         BZ    DONEFMT             YES ---
         #SEG  0(,R11),KNOPAN
DONEFMT  DS    0H
         L     R13,4(,R13)         LOAD BACK POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,0               ZERO RETURN CODE
         BSM   R0,R14              RETURN TO CALLER
NEWLINE  DS    0H
         LA    R10,4(,R10)         POINT TO NEXT LINE ENTRY
         L     R11,0(,R10)         POINT TO LINE AREA
         XC    0(2,R11),0(R11)     'CLEAR' IT OUT
         #SEG  0(,R11),BLANKS      LEADING BLANK STUFF
         BR    R9                  AND RETURN TO RE-SEG
*
*        UNABLE TO FIND THE TASK GLOBAL TABLE  -
*
NOTTGT   DC    H'0'
         #SEG  0(,R11),KNOTGT
         B     DONEFMT
KSYSOUT  DC    CL8'SYSOUT'
KMAIN    DC    CL5'MAIN'
KSYMD    DC    CL8'SYMDUMP'
KFLOW    DC    CL5'FLOW'
KSTATE   DC    CL6'STATE'
KOPT     DC    CL9'OPTIMIZE'
KTEST    DC    CL5'TEST'
KRES     DC    CL4'RES'
KENDJOB  DC    CL7'ENDJOB'
KOBJ370  DC    CL7'OBJ370'
KCOUNT   DC    CL6'COUNT'
KTRACE   DC    CL19'TRACE-VERB-PRESENT'
KSTAMP   DC    CL11'PAN STAMP:'
KNOPAN   DC    CL24'NO PANVALET STAMP FOUND.'
KNOTGT   DC    CL16'NO TGT     '
LINETAB  DC    V(LINE1)
         DC    V(LINE2)
         DC    V(LINE3)
         DC    V(LINE4)
         DC    V(LINE5)
BLANKS   DC    CL16' '
         LTORG
*---------------------------------------------------------------------*
*---     THIS DSECT DESCRIBES THE PARTS OF THE INITIALIZATION CODE ---*
*---     THAT WE ARE MOST INTERESTED IN.                           ---*
*---------------------------------------------------------------------*
COBINIT  DSECT
CBES     DS    3F      THREE WORDS OF CODE
CBESIGID DS    CL8     PROGRAM NAME
CBECOMP  DS    CL4     COMPILER IDENTIFIER
         ORG   CBES+X'3C'
CBETGT   DS    A       TGT ADDRESS
         ORG
VSTGT    DSECT
         ORG   VSTGT+X'48'
VSTGTOPT DS    XL4     COMPILER OPTIONS BYTES
         ORG   VSTGT+X'1BC'
VSTGTDD  DS    CL8    'SYSOUT  ' CONSTANT
         ORG   VSTGT+X'1C8'
VSTGTWS  DS    A      ADDRESS OF WORKING STORAGE
         ORG
         END
         TITLE 'GETALIAS --- READ PDS DIRECTORY INTO STORAGE'
*---------------------------------------------------------------------*
*---     GETALIAS --- READ A COMPLETE PDS DIRECTORY AND BUILD A    ---*
*---           LIST OF NAMES AND ALIASES                           ---*
*---                                                               ---*
*---     PARAMETERS:                                               ---*
*---           1. DDNAME OF THE DD STATEMENT THAT DESIGNATES THE   ---*
*---              PDS TO BE EXAMINED.                              ---*
*---                                                               ---*
*---           2. A SINGLE WORD THAT WILL CONTAIN THE ADDRESS OF   ---*
*---              START OF THE NAME-ALIAS CHAIN. STORAGE FOR THE   ---*
*---              CHAIN IS OBTAINED FROM SUBPOOL 84 AND MAY BE     ---*
*---              RELEASE BY A SUBPOOL-LEVEL FREEMAIN.             ---*
*---                                                               ---*
*---     CHAIN FORMAT:                                             ---*
*---           DS  A  ADDRESS OF NEXT CHAIN LINK, OR ZERO.         ---*
*---           DS  A  ADDRESS OF FIRST ALIAS, OR ZERO              ---*
*---           DS  CL80 COMPLETE DIRECTORY ENTRY, MINUS BLDL       ---*
*---                    BYTES.                                     ---*
*---                                                               ---*
*---     ALL ALIASES ARE CHAINED IN EXACTLY THE SAME FASHION,      ---*
*---           INCLUDING THE COMPLETE DIRECTORY ENTRY.             ---*
*---                                                               ---*
*---     ALIAS CHAIN FORMAT:                                       ---*
*---           DS  A  ADDRESS OF NON-ALIAS MEMBER NAME ENTRY       ---*
*---           DS  A  ADDRESS OF NEXT ALIAS, OR ZERO               ---*
*---           DS  CL80 COMPLETE DIRECTORY ENTRY, MINUS BLDL       ---*
*---                    BYTES.                                     ---*
*---                                                               ---*
*---     ORPHAN ALIASES WILL BE NOTED BY THE FIRST WORD OF THE     ---*
*---     ALIAS CHAIN LINK SET TO ZERO, TO DENOTE THAT NO NON-      ---*
*---     ALIAS MEMBER EXISTS FOR THIS ALIAS.                       ---*
*---------------------------------------------------------------------*
         EJECT
*---------------------------------------------------------------------*
*---      STANDARD OPERATING SYSTEM ENTRY LINKAGE CRAP             ---*
*---------------------------------------------------------------------*
GETALIAS CSECT
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
*---------------------------------------------------------------------*
*---     STANDARD NON-REENTRANT ENTRY LINKAGE.                     ---*
*---------------------------------------------------------------------*
         B     12(,R15)            BRANCH AROUND
         DC    X'07',CL7'GETALIAS' CSECT IDENTIFIER
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         BAS   R2,92(,R15)         'BAL' AROUND
         USING *,R13
         DS    18F                 NEW SAVE AREA
         XC    0(72,R2),0(R2)      CLEAR NEW SAVE AREA
         ST    R13,4(,R2)          STORE BACKWARD AND
         ST    R2,8(,R13)          FORWARD POINTERS
         LR    R13,R2              LOAD PGM BASE REGISTER
*---------------------------------------------------------------------*
*---     LOAD THE PARM LIST                                        ---*
*---------------------------------------------------------------------*
         LM    R2,R3,0(R1)         LOAD PARM LIST POINTER
*---------------------------------------------------------------------*
*---     R2 --> 8-BYTE DDNAME                                      ---*
*---     R3 --> 4-BYTE ROOT ADDRESS                                ---*
*---------------------------------------------------------------------*
         XC    0(4,R3),0(R3)       START WITH EMPTY CHAIN
         LA    R1,GETA20           LOAD DCB POINTER
         USING IHADCB,R1           AND BASE THE DCB DSECT
         MVC   DCBDDNAM,0(R2)      MOVE DDNAME INTO THE DCB
         OPEN  GETA20              OPEN THE DCB
         LA    R1,GETA20           RELOAD DCB POINTER
         TM    DCBOFLGS,X'10'      IS DCB OPEN ??
         BZ    GETA18              NOPE; 8 RETURN CODE AND QUIT
         DROP  R1
*---------------------------------------------------------------------*
*---     LOOP THROUGH THE DIRECTORY, PICKING OUT THE NON-ALIAS     ---*
*---     MEMBER NAMES AND CHAINING THEM.                           ---*
*---------------------------------------------------------------------*
GETA1    DS    0H
         GET   GETA20              READ A DIRECTORY BLOCK
         LA    R4,2(,R1)           POINT TO DATA START
         LH    R5,0(,R1)           LOAD BYTES-USED VALUE
         BCTR  R5,R0               DECREMENT BY ONE
         LA    R5,0(R5,R1)         POINT TO LAST VALID BYTE
         USING PDS2,R4             BASE THE DIRECTORY ENTRY DSECT
GETA2    DS    0H
         CLC   PDS2NAME,GETA19     END-OF-DIRECTORY MARKER ??
         BE    GETA7               YES; DO THE ALIASES NOW
         IC    R6,PDS2INDC         INSERT ALIAS/LENGTH BITS
         N     R6,=A(PDS2LUSR)     ISOLATE LENGTH
         LA    R6,12(R6,R6)        COMPUTE FULL ENTRY LENGTH
         TM    PDS2INDC,PDS2ALIS   IS THIS AN ALIAS ??
         BO    GETA5               YES; SKIP IT THIS TIME
         GETMAIN R,LV=88,SP=84     GRAB SOME STORAGE
         XC    0(88,R1),0(R1)      CLEAR IT OUT
         EX    R6,GETA6            COPY IN THE DIRECTORY DATA
         LR    R7,R3               COPY THE CHAIN START POINTER
GETA3    DS    0H
         NC    0(4,R7),0(R7)       NULL POINTER ??
         BZ    GETA4               YES; STORE NEW LINK POINTER
         L     R7,0(,R7)           BUMP DOWN THE CHAIN
         B     GETA3               CONTINUE LOOPING AND SEARCHING
GETA4    DS    0H
         ST    R1,0(,R7)           STORE NEW LINK POINTER
GETA5    DS    0H
         LA    R4,0(R6,R4)         POINT DOWN THE BLOCK
         CR    R4,R5               PAST END OF BLOCK
         BL    GETA2               NOPE; JUST CONTINUE DEBLOCKING
         B     GETA1               YES; GET A FRESH BLOCK
GETA6    MVC   8(1,R1),PDS2NAME    COPY OF DIRECTORY ENTRY
*---------------------------------------------------------------------*
*---     RE-READ THE DIRECTORY, LOOKING FOR ALIASES.               ---*
*---------------------------------------------------------------------*
GETA7    DS    0H
         CLOSE (GETA20,REREAD)     CLOSE DIRECTORY FOR RE-READ
         LA    R1,GETA20
         USING IHADCB,R1
         MVC   DCBEODA,=AL3(GETA16)
         DROP  R1
         OPEN  GETA20              AND RE-OPEN
GETA8    DS    0H
         GET   GETA20              READ A DIRECTORY BLOCK
         LA    R4,2(,R1)           POINT TO DATA START
         LH    R5,0(,R1)           LOAD BYTES-USED VALUE
         BCTR  R5,R0               DECREMENT BY ONE
         LA    R5,0(R5,R1)         POINT TO LAST VALID BYTE
         USING PDS2,R4             BASE THE DIRECTORY ENTRY DSECT
GETA9    CLC   PDS2NAME,GETA19     END-OF-DIRECTORY MARKER ??
         BE    GETA16              YES; DO THE ALIASES NOW
         IC    R6,PDS2INDC         INSERT ALIAS/LENGTH BITS
         N     R6,=A(PDS2LUSR)     ISOLATE LENGTH
         LA    R6,12(R6,R6)        COMPUTE FULL ENTRY LENGTH
         TM    PDS2INDC,PDS2ALIS   IS THIS AN ALIAS ??
         BZ    GETA15              NOPE; SKIP IT THIS TIME
         GETMAIN R,LV=88,SP=84     GRAB SOME STORAGE
         XC    0(88,R1),0(R1)      CLEAR IT OUT
         EX    R6,GETA6            COPY IN THE DIRECTORY DATA
         LR    R7,R3               COPY THE CHAIN START POINTER
GETA10   NC    0(4,R7),0(R7)       NULL POINTER ??
         BZ    GETA11              YES; STORE NEW LINK POINTER
         CLC   GETA21(3,R1),GETA21(R7) DO TTR'S MATCH ??
         BE    GETA12              YES; INSERT KNOWN ALIAS
         L     R7,0(,R7)           BUMP DOWN THE CHAIN
         B     GETA10              CONTINUE LOOPING AND SEARCHING
GETA11   DS    0H
         ST    R1,0(,R7)           STORE NEW LINK POINTER
         B     GETA15              AND GO DEBLOCK SOME MORE
GETA12   DS    0H
         ST    R7,0(,R1)           STORE POINTER TO NON-ALIAS NAME
GETA13   DS    0H
         NC    4(4,R7),4(R7)       ALIAS CHAIN EMPTY ??
         BZ    GETA14              YES; INSERT NEW ALIAS
         L     R7,4(,R7)           BUMP DOWN THE CHAIN
         B     GETA13              AND KEEP SEARCHING
GETA14   DS    0H
         ST    R1,4(,R7)
GETA15   DS    0H
         LA    R4,0(R6,R4)         POINT DOWN THE BLOCK
         CR    R4,R5               PAST END OF BLOCK
         BL    GETA9               NOPE; JUST CONTINUE DEBLOCKING
         B     GETA8               YES; GET A FRESH BLOCK
*---------------------------------------------------------------------*
*---     ALL DONE; CLOSE DCB, FREE THE BUFFER POOL AND RETURN      ---*
*---------------------------------------------------------------------*
GETA16   DS    0H
         L     R1,4(,R13)          LOAD BACK S.A. POINTER
         MVC   16(4,R1),=F'0'      SET THE RETURN CODE
         CLOSE GETA20
         FREEPOOL GETA20
GETA17   DS    0H
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         MVI   12(R13),255
         BR    R14
GETA18   DS    0H
         L     R1,4(,R13)          LOAD BACK S.A. POINTER
         MVC   16(4,R1),=F'4'      SET THE RETURN CODE
         B     GETA17              AND RETURN
         EJECT
*---------------------------------------------------------------------*
*---     MISC CONSTANTS AND DATA AREAS                             ---*
*---------------------------------------------------------------------*
GETA19   DC    8X'FF'
GETA20   DCB   DSORG=PS,MACRF=GL,DDNAME=DD00,RECFM=U,BLKSIZE=256,      X
               EODAD=GETA7
         DCBD  DSORG=PS
         IHAPDS PDSBLDL=NO
GETA21   EQU   (PDS2TTRP-PDS2)+8
         END
         TITLE 'GETCESD --- LOAD ESD/IDR FROM LMOD INTO STORAGE'
*---------------------------------------------------------------------*
*---     GETCESD --- READ LOAD-MODULE ESD DATA INTO THE            ---*
*---           USER-SUPPLIED AREA OF MAIN STORAGE.                 ---*
*---                                                               ---*
*---     PARAMETERS:                                               ---*
*---           R1 --> A(PDSDCB)                                    ---*
*---                  A(MEMBER TTR)                                ---*
*---                  A(CESD DATA AREA)                            ---*
*---                                                               ---*
*---     THE CESD AREA IS FORMATTED THUSLY:                        ---*
*---                                                               ---*
*---           OFFSET 0, LENGTH 4 --- TOTAL AREA LENGTH,           ---*
*---              INCLUDING THESE CONTROL WORDS.                   ---*
*---                                                               ---*
*---           OFFSET 4, LENGTH 4 --- TOTAL AREA USED, AGAIN       ---*
*---              INCLUDING THESE CONTROL WORDS.                   ---*
*---                                                               ---*
*---           OFFSET 8, LENGTH ?? --- ACTUAL ESD DATA READ FROM   ---*
*---              THE LOAD MODULE.                                 ---*
*---                                                               ---*
*---     THE CALLER IS RESPONSIBLE FOR SETTING THE VALUE IN THE    ---*
*---     FIRST WORD. THE VALUE IN THE SECOND WORD WILL BE SET      ---*
*---     BY THIS SUBROUTINE AND ANY PREVIOUS VALUE WILL BE         ---*
*---     IGNORED.                                                  ---*
*---                                                               ---*
*---     RETURN CODE IS 4 IF ANY AREA PROVIDED BY THE CALLER IS    ---*
*---           TOO SMALL; OTHERWISE RETURN CODE IS ZERO            ---*
*---                                                               ---*
*---     ATTRIBUTES: REENTRANT, REUSABLE                           ---*
*---------------------------------------------------------------------*
GETCESD  CSECT
GETCESD  AMODE 24
GETCESD  RMODE 24
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
*---------------------------------------------------------------------*
*---     STANDARD REENTRANT ENTRY LINKAGE.                         ---*
*---------------------------------------------------------------------*
         B     12(,R15)            BRANCH AROUND
         DC    X'07',CL7'GETCESD'  CSECT IDENTIFIER
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         LR    R12,R15             COPY E.P. ADDRESS
         LA    R12,0(,R12)         CLEAR HIGH-ORDER BYTE
         USING GETCESD,R12         AND DECLARE THE BASE
         LR    R2,R1               COPY PARM LIST POINTER
         L     R5,GETC5            LOAD MY AREA LENGTH
         GETMAIN RU,LV=(5),LOC=BELOW GRAB SOME STORAGE
         LA    R4,0(,R1)           COPY ITS ADDRESS
         LA    R14,0
         LA    R15,0
         MVCL  R4,R14              CLEAR THE AREA
         ST    R1,8(,R13)
         ST    R13,4(,R1)
         LR    R13,R1
         USING WAREA,R13           BASE WORK-AREA DSECT
         MVC   PARMS,0(R2)         COPY PARMS TO MY AREA
*---------------------------------------------------------------------*
*---     SET UP WORD2 OF EACH CALLER-SUPPLIED DATA AREA            ---*
*---------------------------------------------------------------------*
         L     R1,CESDAA           LOAD ESD AREA POINTER
         MVC   4(4,R1),=F'8'       START WITH 8 BYTES USED
*---------------------------------------------------------------------*
*---     SET-UP BUFFERS, TTR POINTER                               ---*
*---------------------------------------------------------------------*
         L     R11,PDSDCBA         LOAD BPAM DCB ADDRESS
         USING IHADCB,R11          BASE THE DCB DSECT
         MVC   DCBEODA(3),=AL3(GETC4) SET THE EOF ADDRESS
         L     R2,TTRA             POINT TO INPUT TTR
         MVC   TTR(3),0(R2)        COPY TTR POINTER
         POINT (11),TTR            POINT TO MEMBER START
*---------------------------------------------------------------------*
*---     LOOP, READING ALL CESD DATA INTO SUPPLIED AREA            ---*
*---------------------------------------------------------------------*
GETC1    DS    0H
         READ  PDSDECB,SF,(11),BUFFER,'S',MF=E READ A CESD RECORD
         CHECK PDSDECB
         CLI   BUFFER,X'80'        WAS THIS AN IDR RECORD ??
         BE    GETC4               YES; ALL DONE ---
         CLI   BUFFER,X'20'        WAS THIS AN ESD RECORD ??
         BE    GETC2               YES; COPY AND CONTINUE ---
         B     GETC1               JUST CONTINUE ---
*---------------------------------------------------------------------*
*---     SET UP REGS FOR ESDDATA MOVE                              ---*
*---------------------------------------------------------------------*
GETC2    DS    0H
         LH    R14,BUFFER+6        GET ESD RECORD LENGTH
         L     R10,CESDAA          POINT TO THE RIGHT AREA
         L     R0,0(,R10)          LOAD TOTAL AREA LENGTH
         S     R0,4(,R10)          COMPUTE BYTES LEFT
         CR    R14,R0              ENOUGH ROOM ??
         BNH   GETC3               YES ---
         LR    R14,R0              NOPE; JUST MOVE WHAT WE CAN
         L     R15,4(,R13)         LOAD S.A. BACK POINTER
         MVC   16(4,R15),=F'4'     SET THE RETURN CODE
GETC3    DS    0H
         L     R2,4(,R10)          LOAD BYTES USED
         AR    R2,R10              POINT INTO THE AREA
         LR    R3,R14              AND SET THE LENGTH
         LA    R6,BUFFER+8         POINT TO INPUT BUFFER
         LR    R7,R14              AND SET THE LENGTH
         MVCL  R2,R6               MOVE DATA TO BUFFER
         A     R14,4(,R10)         SUM: USED PLUS ADDED
         ST    R14,4(,R10)         SAVE UPDATED VALUE
         B     GETC1               YES; CONTINUE
         EJECT
*---------------------------------------------------------------------*
*---     ALL FUNCTIONS COMPLETE. TERMINATE QUIETLY                 ---*
*---------------------------------------------------------------------*
GETC4    DS    0H
         LR    R1,R13
         L     R13,4(,R13)
         L     R0,GETC5            LOAD AREA SIZE
         FREEMAIN R,LV=(0),A=(1)   RELEASE MY WORK AREA
         LM    R14,R12,12(R13)
         LA    R15,0
         BR    R14
         EJECT
*---------------------------------------------------------------------*
*---     MISC CONSTANTS AND DATA AREAS                             ---*
*---------------------------------------------------------------------*
         LTORG
GETC5    DC    A(WALEN)
         DCBD  DSORG=PS
WAREA    DSECT
NSAVE    DS    18F           NEW SAVE AREA
PARMS    DS    0CL12
PDSDCBA  DS    A             PDS DCB POINTER
TTRA     DS    A             ADDRESS OF MEMBER TTR
CESDAA   DS    A             POINTER TO CESD AREA
TTR      DS    A             ACTUAL TTR OF MEMBER START
         READ  PDSDECB,SF,MF=L
BUFFER   DS    4000D         PDS I/O BUFFER
WALEN    EQU   *-WAREA
         END
*---------------------------------------------------------------------*
*---     GETSTAMP - SEARCH WORKING STORAGE FOR COBOL/PANVALET      ---*
*---           LEVEL STAMP INFORMATION.                            ---*
*---                                                               ---*
*---     PARAMETERS: A THREE-WORD PARAMETER LIST                   ---*
*---           WORD1: POINTER TO WORKING STORAGE START             ---*
*---           WORD2: POINTER TO THE TGT                           ---*
*---           WORD3: AREA TO COPY THE STAMP INTO                  ---*
*---                                                               ---*
*---     RETURN CODES: 0 IF THE STAMP IS FOUND AND COPIED          ---*
*---                   4 IF NO STAMP IS FOUND                      ---*
*---                                                               ---*
*---     CSECT ATTRIBUTES: REENTRANT, REUSABLE,REFRESHABLE,        ---*
*---           AMODE(ANY), RMODE(ANY)                              ---*
*---                                                               ---*
*---     MACROS: GETMAIN, FREEMAIN                                 ---*
*---                                                               ---*
*---     METHOD: THE WORKING STORAGE IS SEARCHED USING A           ---*
*---           'MASKING' ALGORITHM BASED ON THE STAMP FORMAT.      ---*
*---           THE WORKING STORAGE IS SEARCHED FOR A ZONED         ---*
*---           DECIMAL DIGIT.  EACH TIME THIS IS FOUND, THE BYTES  ---*
*---           FOLLOWING ARE COPIED TO A PRIVATE WORK AREA AND     ---*
*---           CHECKED USING THE MASK.  WHAT I DO IS THIS: FIRST,  ---*
*---           REDUCE THE CHARACTERS TO BLANKS, DIGITS AND         ---*
*---           SPECIAL CHARACTERS, VIA THE 'NC' INSTRUCTION, THE   ---*
*---           RESULT IS COMPARED TO A SECOND STRING FOR AN EXACT  ---*
*---           MATCH.  IF FOUND, I ASSUME THAT THIS IS THE STAMP   ---*
*---           AND RETURN IT TO MY CALLER.                         ---*
*---------------------------------------------------------------------*
GETSTAMP CSECT
GETSTAMP AMODE 31
GETSTAMP RMODE 24
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
         B     12(,R15)
         DC    AL1(7),CL7'GETSTAMP'
         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS
         LR    R12,R15             COPY E.P. ADDRESS
         USING GETSTAMP,R12
         LR    R2,R1               COPY PARM LIST POINTER
         L     R5,WALEN            LOAD WORK-AREA LENGTH
         GETMAIN RU,LV=(5)         GRAB STORAGE FOR WORK AREA
         LR    R4,R1               COPY ITS ADDRESS
         SR    R14,R14             CLEAR TWO OTHER
         SR    R15,R15               REGISTERS
         MVCL  R4,R14              CLEAR MY WORK AREA
         ST    R1,8(,R13)          FORWARD CHAIN
         ST    R13,4(,R1)          BACK CHAIN
         LR    R13,R1              BUMP POINTER DOWN THE CHAIN
         USING WAREA,R13           AND BASE THE DSECT
         MVC   PARMS,0(R2)         COPY PARM POINTERS
         L     R5,END              LOAD TGT POINTER
         L     R6,START            POINT TO WORKING STORAGE
         LA    R4,1                LOAD LOOP INCREMENT
SRCLOOP  DS    0H
         CLI   0(R6),240           NUMERIC DIGIT ??
         BL    NOTHERE             NOPE ---
         CLI   0(R6),249           TOO HIGH FOR NUMERIC ??
         BH    NOTHERE             YES; SKIP IT
         MVC   STMPTST,0(R6)       COPY SOME FOR STAMP TEST
         NC    STMPTST,MASK1       REDUCE TO BASIC FORMAT
         CLC   STMPTST,MASK2       COMPARE TO EXPECTED RESULT
         BE    MOVEIT              GOT IT; MOVE THE DATA
NOTHERE  DS    0H
         BXLE  R6,R4,SRCLOOP       KEEP SEARCHING
         LA    R9,4                LOAD MY 'NOT FOUND' CODE
RETURN   DS    0H
         LR    R1,R13              COPY MY WORK-AREA ADDRESS
         L     R13,4(,R13)         LOAD BACK SAVE-AREA POINTER
         L     R0,WALEN            LOAD AREA LENGTH
         FREEMAIN RU,LV=(0),A=(1)  RELEASE MY STORAGE
         LR    R15,R9              SET THE RETURN CODE
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BR    R14                 AND RETURN TO CALLER
MOVEIT   DS    0H
         L     R2,OUTPUT           LOAD OUTPUT AREA POINTER
         MVC   0(STMPLEN,R2),0(R6) COPY THE STAMP DATA
         LA    R9,0                SET ZERO RETURN CODE
         B     RETURN              AND GO RETURN TO CALLER
MASK1    DC    X'F0F0F0004040404040404040404000F0'
         DC    X'F0FFF0F0FFF0F000F0F0FFF0F0FFF0F0'
STMPLEN  EQU   *-MASK1
MASK2    DC    X'F0F0F0004040404040404040404000F0'
         DC    X'F061F0F061F0F000F0F07AF0F07AF0F0'
WALEN    DC    A(ENDWK-WAREA)
WAREA    DSECT
SAVEAREA DS    18F
PARMS    DS    0CL12
START    DS    A
END      DS    A
OUTPUT   DS    A
STMPTST  DS    CL32
ENDWK    DS    0D
         END
*---------------------------------------------------------------------*
*---     RDLKDATE --- LOCATE LINKEDIT DATE IN A LOAD MODULE.       ---*
*---                                                               ---*
*---     PARAMETERS: R1 --> A(PDSDCB)                              ---*
*---                        A(MEMBER TTR)                          ---*
*---                                                               ---*
*---     THE LKED DATE, IF FOUND, IS RETURNED IN R0 AS A PACKED    ---*
*---     DECIMAL NUMBER IN THE FORMAT '00YYDDDF'. IF NO DATE IS    ---*
*---     FOUND, THE REGISTER IS SET TO ZEROS.                      ---*
*---                                                               ---*
*---     ATTRIBUTES: NON-REENTRANT, REUSABLE                       ---*
*---                                                               ---*
*---     STANDARD OPERATING SYSTEM ENTRY LINKAGE CRAP              ---*
*---------------------------------------------------------------------*
RDLKDATE CSECT
RDLKDATE RMODE 24
RDLKDATE AMODE 24
R0       EQU   0                   R
R1       EQU   1                    E
R2       EQU   2                     G
R3       EQU   3                      I
R4       EQU   4                       S
R5       EQU   5                        T
R6       EQU   6                         E
R7       EQU   7                          R
R8       EQU   8
R9       EQU   9                   E
R10      EQU   10                   Q
R11      EQU   11                    U
R12      EQU   12                     A
R13      EQU   13                      T
R14      EQU   14                       E
R15      EQU   15                        S
*---------------------------------------------------------------------*
*---     STANDARD NON-REENTRANT ENTRY LINKAGE. USE ONE BASE REG.   ---*
*---------------------------------------------------------------------*
         B     12(,R15)            BRANCH AROUND
         DC    X'07',CL7'RDLKDATE' CSECT IDENTIFIER
         STM   R14,R12,12(R13)     STORE ENTRY REGISTERS
         BAS   R2,92(,R15)         'BAL' AROUND
         USING *,R13
         DS    18F                 NEW SAVE AREA
         XC    0(72,R2),0(R2)      CLEAR NEW SAVE AREA
         ST    R13,4(,R2)          STORE BACKWARD AND
         ST    R2,8(,R13)          FORWARD POINTERS
         LR    R13,R2              LOAD PGM BASE REGISTER
         L     R2,4(,R2)           POINT TO BACK SAVE AREA
         XC    20(4,R2),20(R2)     DEFAULT RETURN VALUE
*---------------------------------------------------------------------*
*---     SET-UP BUFFER, TTR POINTER                                ---*
*---------------------------------------------------------------------*
         LM    R2,R3,0(R1)         LOAD PARM POINTERS
         USING IHADCB,R2           BASE THE DCB DSECT
         MVC   DCBEODA(3),=AL3(ENDOFJOB) SET THE EOF ADDRESS
         LH    R7,DCBBLKSI         LOAD ITS BLKSIZE
         GETMAIN R,LV=(7)          GRAB AN I/O BUFFER
         LR    R12,R1              SAVE ITS ADDRESS
         MVC   TTR(3),0(R3)        COPY TTR POINTER
         LA    R5,0(,R7)           LOAD OUTPUT AREA LENGTH
*---------------------------------------------------------------------*
*---     LOOP, READING LINKAGE EDITOR DATA INTO AREA               ---*
*---------------------------------------------------------------------*
         POINT (2),TTR             POINT TO MEMBER START
IDRLOOP1 DS    0H
         READ  PDS,SF,(2),(12),'S' READ A IDR RECORD
         CHECK PDS
         CLI   0(R12),X'80'        WAS THIS AN IDR RECORD ??
         BNE   IDRLOOP1            NOPE ---
         TM    2(R12),X'02'        LKED IDR DATA ??
         BO    IDRMOVE             YES; PROCESS AND QUIT
         TM    2(R12),X'80'        LAST IDR ??
         BO    ENDOFJOB            YES; JUST QUIT
         B     IDRLOOP1            NOPE; KEEP SEARCHING
IDRMOVE  DS    0H
         SR    R0,R0               CLEAR A WORK REGISTER
         ICM   R0,7,15(R12)        INSERT THE LINK DATE
         L     R2,4(,R13)          POINT TO BACK SAVE AREA
         ST    R0,20(,R2)          SET THE RETURN VALUE
         EJECT
*---------------------------------------------------------------------*
*---     ALL FUNCTIONS COMPLETE. TERMINATE QUIETLY                 ---*
*---------------------------------------------------------------------*
ENDOFJOB DS    0H
         FREEMAIN R,LV=(7),A=(12) RELEASE MY BUFFER
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         SR    R15,R15             ALWAYS ZERO RETURN CODE
         MVI   12(R13),255
         BR    R14
         EJECT
*---------------------------------------------------------------------*
*---     MISC CONSTANTS AND DATA AREAS                             ---*
*---------------------------------------------------------------------*
         LTORG
TTR      DC    F'0'
         DCBD  DSORG=PS
         END
