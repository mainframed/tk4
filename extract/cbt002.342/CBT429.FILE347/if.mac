         MACRO
&NAME    IF    &GOTO=,&NOTGOTO=
.*
.*       CONDITIONAL BRANCH MACRO
.*
.*       IF    A,OP<,B><,OR/AND>...
.*             OP - UNARY OR BINARY OPERATOR
.*
.*       NOTGOTO= KEYWORD USED BY DOWHILE MACRO
.*       IT SPECIFIES BRANCH ADRS TO BE TAKEN IF COND. FALSE
.*       ADRS SPECIFIED BY NOTGOTO CAN ONLY BE INSTRUCTION LABEL
         GBLB  &ERROR              INNER MACRO ERROR CODE.
         GBLC  &RPMSW              DATA SWITCH BYTE NAME.
         GBLC  &RPMSWT          DATA SWITCH BYTE TEST EXPR.
         GBLC  &DONAME(9)          LABELS FOR DO GROUPS 9 LEVELS DEEP.
         GBLC  &EIFNAME(9)         ENDIF LABEL.
         GBLA  &PGMNEST            CURRENT PGM BLOCK NEST LEVEL.
         GBLC  &PGMBTYP(9)         BLOCK TYPE(IF,CASE,WHILE, OR DO).
         GBLC  &DOEND(9)           'ENDDO' BRANCH LABEL.
         GBLA  &DOLVL              DO-BLOCK NEST LEVEL.
         GBLA  &DONEST             CURRENT DO GROUP NEST LEVEL.
         GBLA  &VERIFYV
         GBLA  &NCBQTS,&TPLITRL
         GBLA  &RPDECTP            EXTERNAL DATA REQUIREMENTS FLAG
         GBLA  &RPMUSER            EXTERNAL DATA REQUIREMENTS FLAG
         GBLA  &BLKTAB,&NBLKTAB    EXT. DATA REQ. FLAGS
         GBLC  &SWQUOTE            USED BY FIXQUOTE INNER MACRO
         GBLA  &MACLEV,&KEYV
         GBLC  &CASEND(9)
         GBLA  &CASELVL
         GBLA  &WHLNEST            NEST LEVEL FOR DOWHILE MACRO
         GBLC  &WHLOUT(9)             LABEL FOR BRANCH TO JUST PAST
.*             ENDWHILE MACRO
         GBLB  &SDOCASE  1 - IF CALLED BY SECONDARY DOCASE CONDITIONS
         GBLC  &OLDR14,&OLDDCTP
         LCLB  &AREG,&CREG         REGISTER FORMAT FLAGS FOR A AND C.
         LCLC  &AA,&OPCD,&NOPCD,&OPND,&GOR,&AR
         LCLC  &CC,&CR
         LCLC  &B
         LCLC  &GO
         LCLC  &TA,&TC
         LCLA  &L
         LCLA  &CNUMB              0 - &C NOT #
.*                                 1 - &C ×#× < 32768
.*                                 2 - &C ×#× > 32767
         LCLC  &CLM,&CLMM
         LCLC  &LABEL
         LCLA  &K,&I
         LCLC  &Q
         LCLA  &CABSNUM
         LCLC  &TEMPV
         LCLC  &TEMP
         LCLA  &LA,&LC
         LCLC  &TMPOPCD            TEMPOARARY FOR OP CODE SWAP
         LCLA  &IP                 WHICH POSITIONAL PARM BEING USED
         LCLA  &NUMARG
         LCLA  &V
         LCLB  &AND,&OR
         LCLC  &LAB,&LABSAVE,&BCD,&BOPND
         LCLB  &OREVER             SET TO 1 IF OR EVER HIT
         LCLC  &ORBNCH             ADRS FOR BRANCHING WHEN OR TRUE
         LCLC  &ANDBNCH            ADRS FOR BRANCHING WHEN AND FALSE IN
.*                                 LAST AND CHAIN
         LCLA  &BOLANDC            BEGINNING OF LAST AND CHAIN IF LAST
         LCLB  &R14FLD,&DCTPFLD,&R14CHG,&DCTPCHG
         LCLC  &WTAB               NAME OF TRT TABLE
         SPACE 1
&MACLEV  SETA  &MACLEV+1
&GO      SETC  '&GOTO'
&LABEL   SETC  '&NAME'
&IP      SETA  1
&NUMARG  SETA  N'&SYSLIST
.*       IF 'IF' HAS NOT BE CALLED BY DOCASE FOR SECONDARY CONDITIONS
.*       THEN SET OLDR14 AND OLDDCTP TO NULL STRINGS.
.*       THIS WILL FORCE RELOADING OF R14 AND/OR CWADECTP INTIAL
.*       TIME THRU, IF NECESSARY.
         AIF   (&SDOCASE).NOVCLR
&OLDR14  SETC  ''
&OLDDCTP SETC  ''
.NOVCLR  ANOP
&L       SETA  K'&GO
         AIF   (&L GT 0 OR T'&NOTGOTO NE 'O').PROCGO1
&TA      SETC  '&SYSLIST(&NUMARG)'
         AIF   (K'&TA LT 5).NOLEAVE
         AIF   ('&TA'(1,5) NE 'LEAVE').NOLEAVE
         AIF   (K'&TA LT 9).BADLFOR
         AIF   ('&TA'(6,1) EQ '(' AND '&TA'(K'&TA,1) EQ ')').LEAVE
.BADLFOR MNOTE 8,'** ERROR**, INVALID LEAVE FORMAT.'
         AGO   .EXIT
.LEAVE   ANOP
         AIF   (K'&TA LE 7).BADLFOR
         AIF   (&PGMNEST GE 1).CHEKBLK
         MNOTE 8,'** ERROR **, NOT IN BLOCK; LEAVE UNDEFINED.'
         AGO   .EXIT
.CHEKBLK ANOP
&TA      SETC  '&TA'(7,K'&TA-7)
        MKEYWORD &TA,KEYS=(IF,CASE,WHILE,DO)
         AIF   (&KEYV GT 0).BTYPOK1
.BADBLK  MNOTE 8,'** ERROR **, INVALID BLOCK TYPE OF ''&TA'' SPECIFIED *
               FOR LEAVE OPTION.'
         AGO   .EXIT
.BTYPOK1 AIF   ('&TA' EQ '&PGMBTYP(&PGMNEST)').BTYPOK2
    MNOTE 8,'** ERROR **, ATTEMPT TO LEAVE OTHER THAN CURRENT BLOCK.'
         AGO   .EXIT
.BTYPOK2 ANOP
&NUMARG  SETA  &NUMARG-1        MAKE LEAVE(EFFECTIVELY) NOT BE THERE.
         AIF   (&KEYV NE 1).NOTIF
&GO      SETC  '&EIFNAME(&DONEST)'
         AGO   .PROCGO1
.NOTIF   AIF   (&KEYV NE 2).NOTCASE
&GO      SETC  '&CASEND(&CASELVL)'
         AGO   .PROCGO1
.NOTCASE AIF   (&KEYV NE 3).NOTWHIL
&GO      SETC  '&WHLOUT(&WHLNEST)'
         AGO   .PROCGO1
.NOTWHIL AIF   (&KEYV NE 4).BADBLK
&GO      SETC  '&DOEND(&DOLVL)'
         AGO   .PROCGO1
.NOLEAVE ANOP
&DONEST  SETA  &DONEST+1           INCREMENT NESTING LEVEL
&DONAME(&DONEST) SETC 'RPM&SYSNDX.A' CREATE LABEL FOR FALSE CONDITION
&EIFNAME(&DONEST) SETC 'RPM&SYSNDX.C' CREATE LABEL FOR ENDIF MACRO.
         AGO   .RELOCGO
.PROCGO1 ANOP
&OPND    SETC  '&GO'
         AIF   (&L LT 3).RELOCGO
         AIF   ('&GO'(1,1) NE '(' OR '&GO'(&L,1) NE ')').RELOCGO
&OPND    SETC  '&GO'(2,&L-2)
&GOR     SETC  'R'
.RELOCGO ANOP
.*       FIRST NULL PARAMETER PASSED IN WILL ALSO EST. NUMARG
.NUMLOOP ANOP
&K       SETA  &K+1
         AIF   (&K GT &NUMARG).NUMEND
         AIF   (T'&SYSLIST(&K) NE 'O').NUMLOOP
&NUMARG  SETA  &K-1
.NUMEND  ANOP
         AIF   (&NUMARG LE 3).NOLOGIC
&ORBNCH  SETC  '&OPND'               SET OR BRANCH ADRS
&ANDBNCH SETC  'ANDF&SYSNDX'       SET AND FALSE BRANCH FOR LAST CHAIN
         AIF   (&L NE 0).GOSPEC    BRANCH IF GO SPEC.
&ORBNCH  SETC  'ORTR&SYSNDX'       SET OR TRUE BRANCH ADRS
         AIF   (T'&NOTGOTO EQ 'O').NOTNOGO
&ANDBNCH SETC  '&WHLOUT(&WHLNEST)' SET AND FALSE BRANCH FOR LAST CHAIN
         AGO   .GOSPEC
.NOTNOGO ANOP
&ANDBNCH SETC  '&DONAME(&DONEST)' SET AND FALSE BRANCH FOR LAST CHAIN
.GOSPEC  ANOP
.*       SCAN FOR BEGINNING OF LAST CHAIN IF IT WAS AN 'AND' CHAIN
&BOLANDC SETA  10000               SET OBVIOUS IMPOSSIBLE VALUE
&IP      SETA  1                   SET TO 1ST OPERAND
&B       SETC  '&SYSLIST(1)'
         AIF   (NOT ('&B' EQ 'VERIFIED' OR                             *
               '&B'EQ 'NOTVERIFIED')).NEXTPP
&IP      SETA  &IP+1               SKIP TO NEXT POS. PARAMETER
.NEXTPP  ANOP                      BEGIN PROCESSING NEXT ENTRY
&IP      SETA  &IP+1               POINT TO OPERATOR
         AIF   (&IP GT &NUMARG).SCANDN BRANCH IF DONE
&B       SETC  '&SYSLIST(&IP)'     PUT OPERATOR INTO &B
         MKEYWORD &B,              SEE IF UARY OPERATOR                *
               KEYS=(ON,OFF,MIXED,NMIXED,ZERO,NZERO,POS,NPOS,NEG,NNEG)
         AIF   (&KEYV NE 0).OPFND  BRANCH IF UARY OP. FOUND
         MKEYWORD &B,              SEE IF BINARY OPERATOR              *
               KEYS=(EQ,NE,LT,GT,GE,LE)
         AIF   (&KEYV EQ 0).NOFUNC
&IP      SETA  &IP+1               PT TO 2ND OPERATOR
.OPFND   ANOP
&IP      SETA  &IP+1               PT TO LOGICAL OPERATOR
         AIF   (&IP GT &NUMARG).SCANDN BRANCH IF DONE
&B       SETC  '&SYSLIST(&IP)'     SAVE LOGICAL OPERATOR
         AIF   ('&B' NE 'AND').NOAND
         AIF   (&AND).OPDONE       BRANCH IF PREV. GUY WAS AND
&AND     SETB  1                   SAY THAT AND HIT
&BOLANDC SETA  &IP                 SAVE POS. OF LOGICAL OP. HIT
&OR      SETB  0                   RESET ANY OR HIT IND.
.OPDONE  ANOP                      LOG. OPER. RECOGNITION DONE
&IP      SETA  &IP+1               PT TO NEXT POS. PARAM.
         AGO   .NEXTPP
.NOAND   ANOP                      LOGICAL OPER. WAS NOT AND
         AIF   ('&B' NE 'OR').BADLOG ERROR IF NOT OR
         AIF   (&OR).OPDONE        BRANCH IF PREV. GUY WAS OR
&OREVER  SETB  1                   SAY THAT AT LEAST 1 OR HIT
&OR      SETB  1                   SAY THAT OR HIT
&AND     SETB  0                   RESET ANY POSSIBLE AND HIT FLAG
&BOLANDC SETA  10000               SET TO IMPOSSIBLE VALUE
         AGO   .OPDONE
.SCANDN  ANOP                      RESET FLAGS FOR LATER USE
&OR      SETB  0
&AND     SETB  0
&IP      SETA  1
.NOLOGIC ANOP
.*
.*       PROCESS A OPERAND
.*
.COMPROC ANOP                      ENTRY FOR MORE IF PROCESSING
&AREG    SETB  0
&TA      SETC  T'&SYSLIST(&IP)
&K       SETA  K'&SYSLIST(&IP)
&AA      SETC  '&SYSLIST(&IP)'
&B       SETC  '&SYSLIST(&IP+1)'
         AIF   (&K LT 3).RELOCA
         AIF   ('&AA'(1,1) NE '(' OR '&AA'(&K,1) NE ')').RELOCA
&TA      SETC  'R'                 REGISTER FORMAT
&AR      SETC  'R'
&AREG    SETB  1
&AA      SETC  '&AA'(2,&K-2)
         AGO   .MOREA1
.RELOCA  ANOP
         AIF   ('&TA' EQ 'U').MOREA1
         AIF   (NOT ('&TA' EQ 'H' OR '&TA' EQ 'Y')).ANOTH
.SAH     ANOP
&TA      SETC  'H'
         AGO   .MOREA
.ANOTH   ANOP
         AIF   (NOT ('&TA' EQ 'F' OR '&TA' EQ 'A' OR                   *
               '&TA' EQ 'V')).ANOTF
.SAF     ANOP
&TA      SETC  'F'
         AGO   .MOREA
.ANOTF   ANOP
         AIF   ('&TA' NE 'D').ANOTD
&TA      SETC  'P'
.ANOTD   ANOP
         AIF   ('&TA' EQ 'X').MOREA
         AIF   ('&TA' EQ 'P' OR '&TA' EQ 'C' OR                        *
               '&TA' EQ 'Z').MOREA
         AIF   ('&TA' NE 'R' AND '&TA' NE 'G').ANOTRG
&LA      SETA  L'&SYSLIST(&IP)
         AIF   (&LA EQ 2).SAH
         AIF   (&LA EQ 4).SAF
.SETAX   ANOP
&TA      SETC  'X'
         AGO   .MOREA
.ANOTRG  ANOP
         AIF   ('&TA' EQ 'B').SETAX
         AIF   (('&B' EQ 'ON') OR ('&B' EQ 'OFF') OR                   *
               ('&B' EQ 'MIXED') OR ('&B' EQ 'NMIXED')).MOREA1
         MNOTE 4,'VARIABLE &AA HAS AN INVALID DATA TYPE OF &TA,''U'' AS*
               SUMED'
&TA      SETC  'U'
         AGO   .MOREA1
.MOREA   ANOP
&LA      SETA  L'&SYSLIST(&IP)
.MOREA1  ANOP
.*
.*
.*
.*       SEE IF UNARY OPERATOR
.*
         AIF   ('&B' EQ 'ON').ON
         AIF   ('&B' EQ 'OFF').OFF
         AIF   ('&B' EQ 'MIXED').MIXED
         AIF   ('&B' EQ 'NMIXED').NMIXED
         AIF   ('&B' EQ 'ZERO').ZERO
         AIF   ('&B' EQ 'NZERO').NZERO
         AIF   ('&B' EQ 'POS').POS
         AIF   ('&B' EQ 'NPOS').NPOS
         AIF   ('&B' EQ 'NEG').NEG
         AIF   ('&B' EQ 'NNEG').NNEG
         AIF   ('&B' EQ 'BLANK').BLANK
         AIF   ('&B' EQ 'NBLANK').NBLANK
.*
.*       SEE IF LEGAL BINARY OPERATOR
.*
         AIF   ('&B' EQ 'EQ').EQ
         AIF   ('&B' EQ 'NE').NE
         AIF   ('&B' EQ 'GT').GT
         AIF   ('&B' EQ 'LT').LT
         AIF   ('&B' EQ 'LE').LE
         AIF   ('&B' EQ 'GE').GE
         AIF   ('&B' EQ '' AND &IP EQ 1).NOP
         AGO   .NOFUNC
.*
.*       NO OPERATOR
.*
.NOP     ANOP
&NUMARG  SETA  &NUMARG+1
&IP      SETA  &IP-1
         AIF   ('&AA' EQ 'VERIFIED').ZERO      (USED WITH VERIFY MACRO)
         AIF   ('&AA' EQ 'NOTVERIFIED').NZERO  (USED WITH VERIFY MACRO)
         AGO   .NOFORM
.*
.*       UNARY OPERATOR PROCESSING
.*
.*
.*       ON/OFF/MIXED CHECK
.*
.ON      ANOP
&OPCD    SETC  'O'
&NOPCD   SETC  'NO'
         AGO   .CHECK
.OFF     ANOP
&OPCD    SETC  'Z'
&NOPCD   SETC  'NZ'
         AGO   .CHECK
.MIXED   ANOP
&OPCD    SETC  'M'
&NOPCD   SETC  'NM'
         AGO   .CHECK
.NMIXED  ANOP
&OPCD    SETC  'NM'
&NOPCD   SETC  'M'
.CHECK   ANOP
         FINDSW &SYSLIST(&IP)      SET DATA SWITCH BYTE NAME.
         AIF   (&ERROR).EXIT
&LABEL   TM    &RPMSW,&RPMSWT      .SWITCH ON ?
&NUMARG  SETA  &NUMARG-2
&IP      SETA  &IP+2
         AGO   .BRANCH
.*
.*       POS/NPOS/ZERO/NZERO/NEG/NNEG/BLANK/NBLANK CHECK
.*
.POS     ANOP
&OPCD    SETC  'P'
&NOPCD   SETC  'NP'
         AGO   .CHK2
.NPOS    ANOP
&OPCD    SETC  'NP'
&NOPCD   SETC  'P'
         AGO   .CHK2
.ZERO    ANOP
&OPCD    SETC  'Z'
&NOPCD   SETC  'NZ'
         AGO   .CHK2
.NZERO   ANOP
&OPCD    SETC  'NZ'
&NOPCD   SETC  'Z'
         AGO   .CHK2
.NEG     ANOP
&OPCD    SETC  'M'
&NOPCD   SETC  'NM'
         AGO   .CHK2
.NNEG    ANOP
&OPCD    SETC  'NM'
&NOPCD   SETC  'M'
         AGO   .CHK2
.BLANK   ANOP
&OPCD    SETC  'Z'
&NOPCD   SETC  'NZ'
&BLKTAB  SETA  1
&WTAB    SETC  'CWABLKTB'
         AGO   .CHK2
.NBLANK  ANOP
&OPCD    SETC  'Z'
&NOPCD   SETC  'NZ'
&NBLKTAB SETA  1
&WTAB    SETC  'CWANOBTB'
         AGO   .CHK2
.*
.CHK2    ANOP
&NUMARG  SETA  &NUMARG-2
&IP      SETA  &IP+2
         AIF   (K'&B EQ 0).BRANCH  BR IF NO TEST TO BE DONE.
         AIF   ('&B' EQ 'BLANK' OR '&B' EQ 'NBLANK').BLNKCHK
         AIF   (NOT &AREG).UNOTREG
&LABEL   LTR   &AA,&AA             .TEST REGISTER STATE.
         AGO   .BRANCH
.UNOTREG ANOP
         AIF   ('&TA' NE 'F').UNOTF
&R14CHG  SETB  ('&OLDR14' EQ '&AA')
         AIF   (&R14CHG).UN1
&LABEL   L     14,&AA
.UN2     ANOP
&OLDR14  SETC  '&AA'
&LABEL   SETC  ''
.UN1     ANOP
&LABEL   LTR   14,14
         AGO   .BRANCH
.UNOTF   ANOP
         AIF   ('&TA' NE 'H').UNOTH
.AHALF   ANOP
&R14CHG  SETB  ('&OLDR14' EQ '&AA')
         AIF   (&R14CHG).UN1
&LABEL   LH    14,&AA
         AGO   .UN2
.UNOTH   ANOP
         AIF   ('&TA' NE 'P').UNOTP
&LABEL   CP    &AA,=P'0'
         AGO   .BRANCH
.UNOTP   ANOP
         AIF   ('&TA' NE 'Z').UNOTZ
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&DCTPCHG SETB  ('&OLDDCTP' EQ '&AA')
         AIF   (&DCTPCHG).UN3
&LABEL   PACK  CWADECTP,&AA
&OLDDCTP SETC  '&AA'
&LABEL   SETC  ''
.UN3     ANOP
&LABEL   CP    CWADECTP,=P'0'
         AGO   .BRANCH
.UNOTZ   ANOP
         AIF   ('&B' NE 'ZERO' AND '&B' NE 'NZERO').ILLUNI
         AIF   ('&TA' EQ 'U').ILLUNI
         AIF   (&LA GT 1).UBIG
&LABEL   CLI   &AA,0
         AGO   .BRANCH
.UBIG    ANOP
&LABEL   OC    &AA,&AA
         AGO   .BRANCH
.BLNKCHK ANOP
         AIF   (NOT &AREG).IF1
&LABEL   CLM   &AA,X'F',=CL4'    '
         AGO   .BRANCH
.IF1     ANOP
&LABEL   STM   1,2,12(13)
         TRT   &AA,&WTAB
         LM    1,2,12(13)
         AGO   .BRANCH
.*
.*
.*       BINARY OPERATOR PROCESSING
.*
.*       EQ/NE/GT/LT/LE/GE CHECK
.*
.*
.EQ      ANOP
&OPCD    SETC  'E'
&NOPCD   SETC  'NE'
         AGO   .CHK1
.NE      ANOP
&OPCD    SETC  'NE'
&NOPCD   SETC  'E'
         AGO   .CHK1
.GT      ANOP
&OPCD    SETC  'H'
&NOPCD   SETC  'NH'
         AGO   .CHK1
.LT      ANOP
&OPCD    SETC  'L'
&NOPCD   SETC  'NL'
         AGO   .CHK1
.LE      ANOP
&OPCD    SETC  'NH'
&NOPCD   SETC  'H'
         AGO   .CHK1
.GE      ANOP
&OPCD    SETC  'NL'
&NOPCD   SETC  'L'
         AGO   .CHK1
.*
.CHK1    ANOP
.*
.*       PROCESS C OPERAND
.*
&CREG    SETB  0
&TC      SETC  T'&SYSLIST(&IP+2)
&CC      SETC  '&SYSLIST(&IP+2)'
&Q       SETC  '&CC'(1,1)
&K       SETA  K'&CC
         AIF   (&K LT 3).RELOCC
         AIF   ('&Q' NE '(' OR '&CC'(&K,1) NE ')').TRYI
&TC      SETC  'R'                 SET TYPE TO IND. REGISTER
&CR      SETC  'R'
&CREG    SETB  1
&CC      SETC  '&CC'(2,&K-2)
         AGO   .MOREC1
.TRYI    ANOP
         AIF   ('&Q' NE '/' OR '&CC'(&K,1) NE '/').RELOCC
&TC      SETC  'I'                 SET TYPE TO IND. IMMED.
&CC      SETC  '&CC'(2,&K-2)
         AGO   .MOREC1
.RELOCC  ANOP
         AIF   ('&TC' EQ 'U' OR '&TC' EQ 'N').CIFLIT
         AIF   (NOT ('&TC' EQ 'H' OR '&TC' EQ 'Y')).CNOTH
.SCH     ANOP
&TC      SETC  'H'
         AGO   .MOREC
.CNOTH   ANOP
         AIF   (NOT ('&TC' EQ 'F' OR '&TC' EQ 'A' OR                   *
               '&TC' EQ 'V')).CNOTF
.SCF     ANOP
&TC      SETC  'F'
         AGO   .MOREC
.CNOTF   ANOP
         AIF   ('&TC' NE 'D').CNOTD
&TC      SETC  'P'
.CNOTD   ANOP
         AIF   ('&TC' EQ 'X').MOREC
         AIF   ('&TC' EQ 'P' OR '&TC' EQ 'Z' OR                        *
               '&TC' EQ 'C').MOREC
         AIF   ('&TC' NE 'R').CNOTR
&LC      SETA  L'&SYSLIST(&IP+2)
         AIF   (&LC EQ 2).SCH
         AIF   (&LC EQ 4).SCF
.SETCX   ANOP
&TC      SETC  'X'
         AGO   .MOREC
.CNOTR   ANOP
         AIF   ('&TC' EQ 'B').SETCX
         MNOTE 4,'VARIABLE &CC HAS AN INVALID DATA TYPE OF &TC,''U'' AS*
               SUMED'
&TC      SETC  'U'
         AGO   .MOREC1
.*
.*       SEE IF LITERAL SPECIFIED
.*
.CIFLIT  ANOP
         AIF   ('&CC'(&K,1) NE '''').NOTLIT
.*       LITERAL WAS SPECIFIED
         AIF   ('&Q' NE '''').NOA1
&CC      SETC  'C'.'&CC'
&K       SETA  &K+1
         AGO   .QUOTAMP
.NOA1    ANOP
         AIF   ('&CC'(2,1) NE '''').NOTLIT
         AIF   ('&Q' NE 'C').NOA0
.QUOTAMP ANOP
&TC      SETC  'C'
&LC      SETA  &K-3
&I       SETA  2
.QLOOP   ANOP
&I       SETA  &I+1
         AIF   (&I GE &K).QADONE
         AIF   ('&CC'(&I,1) NE '''' AND '&CC'(&I,1) NE '&&'(1,1)).QLOOP
&I       SETA  &I+1                SKIP NEXT CHAR.
&LC      SETA  &LC-1               ADJUST TO ACTUAL LEN AT XEQ
         AGO   .QLOOP
.QADONE  ANOP
         AGO   .PUTEQ
.NOA0    ANOP
         AIF   ('&Q' NE 'X').NOA2
&TC      SETC  'X'
&LC      SETA  ((&K-3)+1)/2
.PUTEQ   ANOP
&CC      SETC  '='.'&CC'
         AGO   .MOREC1
.NOA2    ANOP
         AIF   ('&Q' NE 'B').NOA3
&TC      SETC  'X'
&LC      SETA  ((&K-3)+7)/8
         AGO   .PUTEQ
.NOA3    ANOP
         AIF   ('&Q' NE 'H').NOA4
&TC      SETC  'H'
&LC      SETA  2
         AGO   .PUTEQ
.NOA4    ANOP
         AIF   ('&Q' NE 'F').NOA5
&TC      SETC  'F'
&LC      SETA  4
         AGO   .PUTEQ
.NOA5    ANOP
         AIF   ('&Q' NE 'P').NOA6
&TC      SETC  'P'
&LC      SETA  (&K-1)/2
         AGO   .PUTEQ
.NOA6    ANOP
         AIF   ('&Q' NE 'Z').NOA7
&TC      SETC  'Z'
&LC      SETA  &K-3
         AGO   .PUTEQ
.NOA7    ANOP
.NOTLIT  ANOP
&TEMPV   SETC  '0123456789'
&TEMP    SETC  '&CC'
&CNUMB   SETA  0
         AIF   (NOT ('&Q' EQ '-' OR '&Q' EQ '+')).NOPORM
&TEMP    SETC  '&CC'(2,&K-1)
.NOPORM  ANOP
         MVERIFY &TEMP,&TEMPV
         AIF   (&VERIFYV NE 0).MOREC1
&CABSNUM SETA  &TEMP
&CNUMB   SETA  1
         AIF   (&CABSNUM LE 32767).MOREC1
&CNUMB   SETA  2
         AGO   .MOREC1
.MOREC   ANOP
&LC      SETA  L'&SYSLIST(&IP+2)
.MOREC1  ANOP
&NUMARG  SETA  &NUMARG-3
&IP      SETA  &IP+3               POINT TO POSSIBLE LOGICAL OPERATOR
.*****************************************************
         AIF   (NOT &AREG).XNOTREG
.SIDEI   ANOP                      SIDE ENTRY POINT FOR OTHER GUYS
.*       X WAS A (RX) SPEC.
         AIF   (NOT &CREG).I1
.*       Y WAS A (RY)
&LABEL   CR    &AA,&CC
         AGO   .BRANCH
.I1      ANOP
         AIF   ('&TC' NE 'H').I2
.I15     ANOP
&LABEL   CH    &AA,&CC
         AGO   .BRANCH
.I2      ANOP
         AIF   ('&TC' NE 'F').I3
.I25     ANOP
&LABEL   C     &AA,&CC
         AGO   .BRANCH
.I3      ANOP
         AIF   ('&TC' NE 'P').I4
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&DCTPCHG SETB  ('&OLDDCTP' EQ '&AA')
         AIF   (&DCTPCHG).I32
&LABEL   CVD   &AA,CWADECTP
&OLDDCTP SETC  '&AA'
&LABEL   SETC  ''
.I32     ANOP
&LABEL   CP    CWADECTP,&CC
         AGO   .BRANCH
.I4      ANOP
         AIF   ('&TC' NE 'Z').I5
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&RPMUSER SETA  1                   SET DOUBLE REQUIRED.
&DCTPCHG SETB  ('&OLDDCTP' EQ '&AA')
         AIF   (&DCTPCHG).I34
&LABEL   CVD   &AA,CWADECTP
&OLDDCTP SETC  '&AA'
&LABEL   SETC  ''
.I34     ANOP
&LABEL   PACK  TWAUSER,&CC
         CP    CWADECTP,TWAUSER
         AGO   .BRANCH
.I5      ANOP
         AIF   ('&TC' NE 'I').I55
&LABEL   C     &AA,=A(&CC)
         AGO   .BRANCH
.I55     ANOP
         AIF   (&CNUMB EQ 0).I6
         AIF   (&CNUMB GT 1).I7
&LABEL   CH    &AA,=H'&CC'
         AGO   .BRANCH
.I7      ANOP
&LABEL   C     &AA,=F'&CC'
         AGO   .BRANCH
.I6      ANOP
         AIF   ('&TC' EQ 'U').I8
&CLM     SETC  'F'
         AIF   (&LC GT 3).I81
&CLMM    SETC  '137'
&CLM     SETC  '&CLMM'(&LC,1)
.I81     ANOP
&LABEL   CLM   &AA,X'&CLM',&CC
         AGO   .BRANCH
.I8      ANOP
&LABEL   C     &AA,&CC
         AGO   .BRANCH
.XNOTREG ANOP
         AIF   ('&TA' NE 'P').XNOTPAK
.*       X IS A PACKED FIELD
         AIF   ('&TC' NE 'P').II0
&LABEL   CP    &AA,&CC
         AGO   .BRANCH
.II0     ANOP
         AIF   (NOT &CREG).II1
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&DCTPCHG SETB  ('&OLDDCTP' EQ '&CC')
         AIF   (&DCTPCHG).II22
&LABEL   CVD   &CC,CWADECTP
&OLDDCTP SETC  '&CC'
&LABEL   SETC  ''
.II22    ANOP
&LABEL   CP    &AA,CWADECTP
         AGO   .BRANCH
.II1     ANOP
         AIF   ('&TC' NE 'H').II2
&R14CHG  SETB  ('&OLDR14' EQ '&CC')
         AIF   (&R14CHG).II24
&LABEL   LH    14,&CC
.AII1    ANOP
&OLDR14  SETC  '&CC'
&LABEL   SETC  ''
.II24    ANOP
&DCTPCHG SETB  ('&OLDDCTP' EQ '&CC')
         AIF   (&DCTPCHG).II27
&LABEL   CVD   14,CWADECTP
&OLDDCTP SETC  '&CC'
&LABEL   SETC  ''
.II27    ANOP
&LABEL   CP    &AA,CWADECTP
         AGO   .BRANCH
.II2     ANOP
         AIF   ('&TC' NE 'F').II3
.II25    ANOP
&R14CHG  SETB  ('&OLDR14' EQ '&CC')
         AIF   (&R14CHG).II24
&LABEL   L     14,&CC
         AGO   .AII1
.II3     ANOP
         AIF   ('&TC' NE 'Z').II38
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&DCTPCHG SETB  ('&OLDDCTP' EQ '&CC')
         AIF   (&DCTPCHG).II42
&LABEL   PACK  CWADECTP,&CC
&OLDDCTP SETC  '&CC'
&LABEL   SETC  ''
.II42    ANOP
&LABEL   CP    &AA,CWADECTP
         AGO   .BRANCH
.II38    ANOP
         AIF   ('&TC' NE 'I').II37
&CC      SETC  '=A(&CC.)'
         AGO   .II25
.II37    ANOP
         AIF   (&CNUMB EQ 0).II5
&LABEL   CP    &AA,=P'&CC'
         AGO   .BRANCH
.II5     ANOP
         AIF   ('&TC' EQ 'C' OR '&TC' EQ 'X').ABNCOMP
&LABEL   CP    &AA,&CC
         AGO   .BRANCH
.XNOTPAK ANOP
         AIF   ('&TA' NE 'Z').XNOTZON
         AIF   (NOT &CREG).III1
&LABEL   CVD   &CC,TWAUSER
&LABEL   SETC  ''
.AIII1   ANOP
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&RPMUSER SETA  1                   SET DOUBLE REQUIRED.
&DCTPCHG SETB  ('&OLDDCTP' EQ '&AA')
         AIF   (&DCTPCHG).II44
&LABEL   PACK  CWADECTP,&AA
&OLDDCTP SETC  '&AA'
&LABEL   SETC  ''
.II44    ANOP
&LABEL   CP    CWADECTP,TWAUSER
         AGO   .BRANCH
.III1    ANOP
         AIF   ('&TC' NE 'H').III2
.III15   ANOP
&R14CHG  SETB  ('&OLDR14' EQ '&CC')
         AIF   (&R14CHG).III11
&LABEL   LH    14,&CC
.III12   ANOP
&OLDR14  SETC  '&CC'
&LABEL   SETC  ''
.III11   ANOP
&RPMUSER SETA  1
&LABEL   CVD   14,TWAUSER
         AGO   .AIII1
.III2    ANOP
         AIF   ('&TC' NE 'F').III3
.III25   ANOP
&R14CHG  SETB  ('&OLDR14' EQ '&CC')
         AIF   (&R14CHG).III11
&LABEL   L     14,&CC
         AGO   .III12
.III3    ANOP
         AIF   ('&TC' NE 'P').III4
.III35   ANOP
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&DCTPCHG SETB  ('&OLDDCTP' EQ '&AA')
         AIF   (&DCTPCHG).III31
&LABEL   PACK  CWADECTP,&AA
&OLDDCTP SETC  '&AA'
&LABEL   SETC  ''
.III31   ANOP
&LABEL   CP    CWADECTP,&CC
         AGO   .BRANCH
.III4    ANOP
         AIF   ('&TC' NE 'Z').III41
&LABEL   PACK  TWAUSER,&CC
&LABEL   SETC  ''
         AGO   .AIII1
.III41   ANOP
         AIF   ('&TC' NE 'I').III42
&LABEL   CLI   &AA,&CC
         AGO   .BRANCH
.III42   ANOP
         AIF   (&CNUMB EQ 0).III5
&RPDECTP SETA  1                   SET DOUBLE REQUIRED
&CC      SETC  '=P''&CC'''
         AGO   .III35
.III5    ANOP
         AIF   ('&TC' EQ 'U').III6
         AIF   ((('&TC' EQ 'C' OR '&TC' EQ 'X') AND (&LC EQ 1))        *
               AND ('&CC'(1,1) EQ '=')).ZLIT
         AIF   ('&AA'(K'&AA,1) EQ ')').III6
         AIF   (&LA EQ &LC).III6
&L       SETA  &LC
         AIF   (&LC LE &LA).III7
.*       &LC > &LA
&L       SETA  &LA          SETUP A LENGTH BECAUSE C TOO BIG.
         FIXQUOTE &CC
  MNOTE 4,'**WARNING**, ONLY THE FIRST &L CHARS. OF "&SWQUOTE" USED IN *
               COMPARISON'
.III7    ANOP
&LABEL   CLC   &AA.(&L),&CC
         AGO   .BRANCH
.III6    ANOP
&LABEL   CLC   &AA,&CC
         AGO   .BRANCH
.ZLIT    ANOP
&CC      SETC  '&CC'(2,K'&CC-1)
&LABEL   CLI   &AA,&CC
         AGO   .BRANCH
.XNOTZON ANOP
         AIF   ('&TA' NE 'H').XNOTHY
.*       FIRST OPERAND IS 1/2 WORD
         AIF   (NOT &CREG).T1
         AIF   ('&OPCD' EQ 'E').T11
.*       REVERSE CONDITION
&TMPOPCD SETC  '&OPCD'
&OPCD    SETC  '&NOPCD'
&NOPCD   SETC  '&TMPOPCD'
.T11     ANOP
&LABEL   CH    &CC,&AA
         AGO   .BRANCH
.T1      ANOP
         AIF   ('&TC' EQ 'C' OR '&TC' EQ 'X').ABNCOMP
         AIF   (&CNUMB EQ 2).CERR
&R14CHG  SETB  ('&OLDR14' EQ '&AA')
         AIF   (&R14CHG).S1
&LABEL   LH    14,&AA
&OLDR14  SETC  '&AA'
&LABEL   SETC  ''
.S1      ANOP
         AIF   ('&TC' NE 'I').S12
&LABEL   CH    14,=Y(&CC)
         AGO   .BRANCH
.S12     ANOP
         AIF   ('&TC' NE 'U').S13
&LABEL   CH    14,&CC
         AGO   .BRANCH
.S13     ANOP
&AA      SETC  '14'                PHONY THINGS UP AS IF REG. SPECFIED
         AGO   .SIDEI
.XNOTHY  ANOP
         AIF   ('&TA' NE 'F').XNOTFA
         AIF   (NOT &CREG).T2
         AIF   ('&OPCD' EQ 'E').T22
.*       REVERSE CONDITION
&TMPOPCD SETC  '&OPCD'
&OPCD    SETC  '&NOPCD'
&NOPCD   SETC  '&TMPOPCD'
.T22     ANOP
&LABEL   C     &CC,&AA
         AGO   .BRANCH
.T2      ANOP
         AIF   ('&TC' EQ 'C' OR '&TC' EQ 'X').ABNCOMP
&R14CHG  SETB  ('&OLDR14' EQ '&AA')
         AIF   (&R14CHG).T13
&LABEL   L     14,&AA
&OLDR14  SETC  '&AA'
&LABEL   SETC  ''
.T13     ANOP
         AIF   ('&TC' NE 'I').S13
&LABEL   C     14,=A(&CC)
         AGO   .BRANCH
.XNOTFA  ANOP
         AIF   (NOT &CREG).NCREG
         AIF   ('&OPCD' EQ 'E').T33
.*       REVERSE CONDITION
&TMPOPCD SETC  '&OPCD'
&OPCD    SETC  '&NOPCD'
&NOPCD   SETC  '&TMPOPCD'
.T33     ANOP
         AIF   ('&TA' NE 'U').NCREG1
&LABEL   C     &CC,&AA
         AGO   .BRANCH
.NCREG1  ANOP
&CLM     SETC  'F'
         AIF   (&LA GT 3).V81
&CLMM    SETC  '137'
&CLM     SETC  '&CLMM'(&LA,1)
.V81     ANOP
&LABEL   CLM   &CC,X'&CLM',&AA
         AGO   .BRANCH
.NCREG   ANOP
         AIF   ('&TC' NE 'N').CNNUM
         AIF   ('&TA' EQ 'U').CERR
         AIF   (&LA NE 1).AN1
&LABEL   CLI   &AA,&CC
         AGO   .BRANCH
.AN1     ANOP
&LABEL   CLC   &AA,=FL&LA.'&CC'
         AGO   .BRANCH
.CNNUM   ANOP
         AIF   ('&TA' EQ 'U').IV1
         AIF   ('&TC' EQ 'H' OR '&TC' EQ 'F' OR '&TC' EQ 'P').ABNCOMP
.IV1     ANOP
         AIF   ('&TC' NE 'I').NOCLI
.YESCLI  ANOP
&LABEL   CLI   &AA,&CC
         AGO   .BRANCH
.NOCLI   ANOP
         AIF   ('&CC'(1,1) NE '=' OR &LC NE 1).NOTCLI1
&K       SETA  K'&CC
&CC      SETC  '&CC'(2,&K-1)
         AGO   .YESCLI
.ABNCOMP ANOP
         MNOTE 4,'** WARNING **,INCOMPATIBLE DATA TYPES, STRING COMPARI*
               SON ASSUMMED'
.NOTCLI1 ANOP
         AIF   ('&TA' NE 'U').ANOTU
         AIF   ('&TC' NE 'P').NP1
&LABEL   CP    &AA,&CC
         AGO   .BRANCH
.NP1     ANOP
         AIF   ('&TC' NE 'H').NH1
&R14CHG  SETB  ('&OLDR14' EQ '&AA')
         AIF   (&R14CHG).T14
&LABEL   LH    14,&AA
&OLDR14  SETC  '&AA'
&LABEL   SETC  ''
.T14     ANOP
&LABEL   CH    14,&CC
         AGO   .BRANCH
.NH1     ANOP
         AIF   ('&TC' NE 'F').NF1
&R14CHG  SETB  ('&OLDR14' EQ '&AA')
         AIF   (&R14CHG).T15
&LABEL   L     14,&AA
&OLDR14  SETC  '&AA'
&LABEL   SETC  ''
.T15     ANOP
&LABEL   C     14,&CC
         AGO   .BRANCH
.NF1     ANOP
         AIF   ('&TA' NE 'U').ANOTU
.*       IF C IS NOT 'U' AND IF LEN. IS NOT EXPLICITLY SPECIFIED IN A
.*                                 THEN USE C LEN.
         AIF   ('&TC' NE 'U').CNOTU1
.DOIT    ANOP
&LABEL   CLC   &AA,&CC
         AGO   .BRANCH
.CNOTU1  ANOP
         AIF   ('&AA'(K'&AA,1) EQ ')').DOIT
&LABEL   CLC   &AA.(&LC),&CC
         AGO   .BRANCH
.ANOTU   ANOP
         AIF   ('&TC' NE 'U').CNOTU2
         AIF   ('&AA'(K'&AA,1) EQ ')').LS1
&LABEL   CLC   &AA.(&LA),&CC
         AGO   .BRANCH
.LS1     ANOP
&LABEL   CLC   &AA,&CC
         AGO   .BRANCH
.CNOTU2  ANOP
         AIF   ('&AA'(K'&AA,1) EQ ')' OR &LA EQ &LC).DOIT
&L       SETA  &LC
         AIF   (&LC LE &LA).LOK
.*       &LC > &LA
&L       SETA  &LA
         FIXQUOTE &CC
 MNOTE 4,'**WARNING**, ONLY THE FIRST &L CHARS. OF "&SWQUOTE" USED IN C*
               OMPARISON'
.LOK     ANOP
&LABEL   CLC   &AA.(&L),&CC
         AGO   .BRANCH
.*
.*       CONSTRUCT 'DO' GROUP OR 'GOTO' LABEL
.*
.BRANCH  ANOP
&LABEL   SETC  ''
         AIF   (&NUMARG LE 0).DONE1
.*       MORE OPERANDS FOLLOW
&B       SETC  '&SYSLIST(&IP)'
&IP      SETA  &IP+1
&NUMARG  SETA  &NUMARG-1
         AIF   ('&B' EQ 'OR').OR
         AIF   ('&B' EQ 'AND').AND
         AGO   .BADLOG
.*
.OR      ANOP                      OR OPERATOR HIT
&BCD     SETC  'B&OPCD'
         AIF   (K'&GO EQ 0).OR1    BRANCH IF GOTO NOT SPECIFIED
&BCD     SETC  '&BCD&GOR'          ADD IN POSSIBLE 'R' TO OP CODE
.OR1     ANOP
         AIF   (&OR).GENBNCH       SKIP AHEAD IF PREV GUY WAS OR
&BOPND   SETC  '&ORBNCH'           SETUP TRUE BRANCH ADRS
&OR      SETB  1                   SAY THAT OR HIT
         AIF   (NOT &AND).GENBNCH   BRANCH IF NO PREV. AND
.*       OR OPERATOR HIT BUT 'AND' OP. WAS IMMED. PREV. GUY
.*       WE MUST GENERATE A LABEL
&AND     SETB  0                   RESET OLD 'AND' IND.
&LAB     SETC  'AND&V&SYSNDX'      SETUP LABEL
&V       SETA  &V+1
&R14FLD  SETB  (&R14FLD OR (NOT &R14CHG))
         AIF   (NOT &R14FLD).NR14
&R14FLD  SETB  0
&OLDR14  SETC  ''
.NR14    ANOP
&DCTPFLD SETB  (&DCTPFLD OR (NOT &DCTPCHG))
         AIF   (NOT &DCTPFLD).GENBNCH
&DCTPFLD SETB  0
&OLDDCTP SETC  ''
         AGO   .GENBNCH
.*
.AND     ANOP                      AND OPERATOR HIT
&BCD     SETC  'B&NOPCD'           SETUP OPCODE
         AIF   (&AND).PREVAND      BRANCH IF PREV. OP. AND ALSO
&R14CHG  SETB  1
&DCTPCHG SETB  1
&BOPND   SETC  '&ANDBNCH'          SETUP AS IF IN LAST AND CHAIN
         AIF   (&IP GE &BOLANDC).NIANDC BRANCH IF  IN LAST AND CHAIN
&BOPND   SETC  'AND&V&SYSNDX'      SETUP BRANCH TO JUST BEFORE NEXT OR
.NIANDC  ANOP                      NOT IN AND CHAIN
&AND     SETB  1                   SAY THAT AND ENCOUNTERED
&OR      SETB  0                   RESET OR HIT IND.
         AGO   .GENBNCH
.PREVAND ANOP
&R14FLD  SETB  (&R14FLD OR (NOT &R14CHG))
&DCTPFLD SETB  (&DCTPFLD OR (NOT &DCTPCHG))
.GENBNCH ANOP                      GENERATE BRANCH INSTRUCTION
         &BCD  &BOPND
         AIF   (K'&LAB EQ 0).NOLOGIC
&LABEL   SETC  '&LAB'              GENERATE LABEL FOR PREV. ANDS
&LAB     SETC  ''
         AGO   .NOLOGIC
.DONE1   ANOP
         AIF   (T'&NOTGOTO NE 'O').NOMNOTE
         AIF   ('&GO' EQ '').DO    BR IF DO GROUP WANTED.
&OPCD    SETC  'B&OPCD&GOR    '(1,5)
         &OPCD &OPND               .BRANCH IF TRUE.
         AIF   (NOT &AND).EXIT
&ANDBNCH DS    0H
.EXIT    ANOP
&MACLEV  SETA  &MACLEV-1
         MEXIT
.DO      ANOP
         AIF   (&MACLEV GT 1).NOMNOTE
&PGMNEST SETA  &PGMNEST+1          INCREMENT BLOCK NESTING LEVEL.
&PGMBTYP(&PGMNEST) SETC 'IF'        SHOW BLOCK TYPE.
         MNOTE *,'        &PGMNEST'
.NOMNOTE ANOP
&OPCD    SETC  'B&NOPCD    '(1,5)
         AIF   (T'&NOTGOTO EQ 'O').DOS
&OPND    SETC  '&WHLOUT(&WHLNEST)'
         AGO   .DOS1
.DOS     ANOP
&OPND    SETC  '&DONAME(&DONEST)'
.DOS1    ANOP
         &OPCD &OPND               .SKIP 'THEN' CLAUSE IF FALSE.
         AIF   (NOT &OREVER).EXIT
&ORBNCH  DS    0H
         AGO   .EXIT
.NOFUNC  MNOTE 8,'** ERROR ** MACRO FUNCTION ''&B'' NOT SUPPORTED'
         AGO   .EXIT
.NOFORM  MNOTE 8,'** ERROR ** FEATURE NOT SUPPORTED'
         AGO   .EXIT
.BADLOG  ANOP
         MNOTE 8,'** ERROR ** LOGICAL OPERATOR &B IS INVALID'
         AGO   .EXIT
.CERR    ANOP
         FIXQUOTE &CC
         MNOTE 8,'** ERROR ** OPERAND "&SWQUOTE" IS ILLEGAL'
         AGO   .EXIT
.ILLUNI  MNOTE 8,'** ERROR ** &B OPERATION IS NOT VALID FOR &AA'
         AGO   .EXIT
         MEND
