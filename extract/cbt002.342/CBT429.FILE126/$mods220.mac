./ ADD NAME=$$$220   0100-88137-88153-1445-00011-00003-00000-GIBSON

  This library is the SP220 version of the L.L. Bean Mods and Exits.

      Contributed by:  James A. Gibson
                       L.L. Bean
                       Technical Services
                       LL Building
                       LL Street
                       Freeport, ME 04033
                       (207) 865-4761

./ ADD NAME=$$DOC    0100-88137-88153-1445-00136-00136-00000-GIBSON
1
  This library contains exits and modifications for SP220 that allow
  1) Auto reply to WTOR and auto issue of commands for WTO or WTOR
     by exit IAEVMXIT
     Jobname  Member   Desc
              Used
     @SMVMXIT IEAVMXIT WTO EXIT INCLUDES R2D2 AND PSWD SUPPORT
     @SMC3PO  IEEC3PO  SETS TABLE FOR IEAVMXIT
     @SMC3PO  KEYSCAN  KEYWORD PARSING ROUTINE
     @SMC3PO  C3POTABL DSECT FOR C3PO TABLE IN CSA
     @SMC3PO  MSGENT   DSECT FOR ENTRY IN TABLE
  2) Putting password's in JCL for non-RACF shops
     Jobname  Member   Desc
              Used
     @SM0025B IGC0025B PASSWORD MOD SVC
     @SMEXIT8 @SMEXIT8 PASSWORD MOD HASPSSSM UPDATE
     @SMEXIT8 @SMEXIT8 PASSWORD MOD $HASPEQU UPDATE
     @SMEXIT8 HASPSJ08 PASSWORD MOD JES2 JCT READ/WRITE EXIT (SSSM)
     @SMEXIT4 HASPXJ04 PASSWORD MOD JES2 CONTROL CARD EXIT
     @SMEXIT7 HASPXJ07 PASSWORD MOD JES2 JCT READ/WRITE EXIT (JES2)
     @ZAPRDPS @ZAPRDPS PASSWORD MOD READPSWD ZAP
      WTOR    WTOR     A PROGRAM THAT PUTS OUT REQUESTED WTO'S OR WTOR'S
                       FOR TESTING OF IEAVMXIT.
1
 Installation consists of submitting jobs in members starting with
 an @, updating JES2PARMS and adding an SVC.
 The JCL in the jobs will have to be updated. The name of the source
 library needs to be changed to the name of this library and the
 object library will either have to be changed to a temp or
 an object lib will have to be set up.
 *WARNING* These jobs are set up to go against system libraries
           You may want to set them up to go against test copies.
 Member JES2PARM contains JES2 parms to be added to your JES2 parms
 Member IEASVC00 contains the entry for IEASVC00 for the SVC.
 If you want to change the SVC number make sure to change the
 SVC 252 line in IEAVMXIT.

1


  Input to IEEC3PO

  IEEC3PO builds a table in CSA that IEAVMXIT uses to do replies.

  The input consists of the characters /* in columns 1 and
  2, the word PASSWORD in columns 3-10, a password beginning in column
  12 followed by at least one blank and an optional keyword parameter
  DSN.
  Columns 72-80 are ignored.

     _______________________________________________________________
   /           _                 _  _             _  _          _
   ×ID=(msgid)×,CMD=('cmd')       ××,ROUTCDE=(rcde)××,DESC=(dcde)×
              ×     ('R XX,reply')××              _  _          _
+              _                 _  _

  ID=(msgid)
      msgid is id of message to be acted on.

  CMD=('cmd')
     cmd must be in quotes. It is the command to be issued if message
     msgid is issued
  CMD=('R XX,reply')
     R XX,reply must be in quotes
     The R XX, shows this to be a reply to a WTOR instead of a command
     reply is the the reply to be issued
  ROUTCDE=(rcde)
     rcde is the route codes this message is to be set to
  DESC=(dcde)
     dcde is the descriptor codes this message is to be set to

  Examples.

  ID=(IKT005I),CMD=('S CNM04'),CMD=('S RSCSLINK')
  ID=(IKT012D),CMD=('R XX,U')
  ID=(DFH0606),ROUTCDE=(1),DESC=(11)         /* MAKE IT NON-DELETABLE */
1


  The PASSWORD Statement


  Control Statement

          The PASSWORD statement permits you to specify passwords
          for VSAM and NON-VSAM datasets.


  The PASSWORD statement consists of the characters /* in columns 1 and
  2, the word PASSWORD in columns 3-10, a password beginning in column
  12 followed by at least one blank and an optional keyword parameter
  DSN.
  Columns 72-80 are ignored.

     __________________________________________
   /                     _       _
   ×/*PASSWORD password ×parameter×
+                        _       _

  The following parameter may be coded.
   _               _
  ×DSN=data set name×
+  _               _


  password
    the password (1 to 8 characters) for specified dataset

  DSN=data set name
    The data set name (1 to 44 characters) for which password is to be
    used.

  Rules for coding
    * If DSN= keyword parameter is not specified on a PASSWORD statement
      the password on that statement will be used as the default
      password
    * If more than one PASSWORD statement has the same data set name
      (or no data set name) the last PASSWORD statement specifying the
      data set name is used.
    * Place the PASSWORD statement after the job statement.


  Example of the PASSWORD statement
    /*PASSWORD WTFGASAW DSN=MY.DSN
   The password WTFGASAW will be used for the data set MY.DSN


     My address is:  James A. Gibson
                     L.L. Bean
                     Technical Services
                     LL Building
                     LL Street
                     Freeport, ME 04033
                     (207) 865-4761


./ ADD NAME=$USERCBS 0100-88137-88153-1457-00034-00034-00000-GIBSON
         MACRO -- $USERCBS -- USER CONTROL BLOCKS
         $USERCBS
***********************************************************************
*                                                                     *
*        EQUATES USED IN EXITS                                        *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*        THE FOLLOWING FLIELDS ARE USED IN THE JCT DSECT              *
*        JCTUSER0 - THE FIRST BYTE IS USED FOR FLAGS (SEE BELOW)      *
*        JCTUSER1 - IN STORAGE BUFFER ADDRESS OF THE "PCT"            *
*        JCTUSER2 - "PCT" TRACK ADDRESS                               *
*        THE FOLLOWING FLAGS ARE DEFINED FOR JCTUSER0                 *
***********************************************************************
JCTPW    EQU   B'10000000'     PASSWORD FLAG
JCTPWDEF EQU   B'01000000'     DEFAULT PASSWORD SUPPLIED
         EJECT ,
         TITLE 'HASP PASSWORD CONTROL TABLE (PCT) DSECT'
         SPACE 5
PCT      DSECT                     HASP PASSWORD CONTROL TABLE DSECT
         DS    (BUFSTART-BFPDSECT)X     BUFFER CONTROL INFORMATION
PCTSTART EQU   *                   START OF DATA WRITTEN TO SPOOL
PCTID    DS    CL4'PCT'            PCT IDENTIFIER
PCTLENG  DS    AL2(*-*)            LENGTH OF PCT INCLUDING PREFIX
PCTPWCNT DS    H
PCTJBKEY DS    XL4                 JOB IDENTIFIER KEY
PCTTRACK DS    XL4                 TRACK ADDRESS OF THIS PCT
PCTPCTTR DS    XL4                 TRACK ADDRESS OF NEXT PCT
PCTPCT   DS    A                   STORAGE ADDRESS OF NEXT PCT
PCTENTOF DS    F                   OFFSET BEYOND LAST ENT IN OCT
         DS    XL4                 RESERVED FOR FUTURE USE
PCTTABL  DS    0H
         MEND
./ ADD NAME=@SMC3PO  0100-88137-88153-1457-00036-00036-00000-GIBSON
//IEEC3PO  JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K
//IEEC3PO  EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'
//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//         DD   DSN=SYS1.HASPSRC,DISP=SHR
//         DD   DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT2   DD   DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT3   DD   DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IEEC3PO),DISP=SHR
//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IEEC3PO),DISP=SHR
//*
//KEYSCAN  EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'
//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//         DD   DSN=SYS1.HASPSRC,DISP=SHR
//         DD   DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(KEYSCAN),DISP=SHR
//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(KEYSCAN),DISP=SHR
//*
//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'
//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR
//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   *
 INCLUDE JESOBJ(IEEC3PO)
 INCLUDE JESOBJ(KEYSCAN)
 SETCODE AC(1)
 NAME IEEC3PO(R)
/*
./ ADD NAME=@SMEXIT4 0100-88137-88153-1457-00022-00022-00000-GIBSON
//@SMEXIT4 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K
//JESEXIT4 EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'
//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//         DD   DSN=SYS1.HASPSRC,DISP=SHR
//         DD   DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXJ04),DISP=SHR
//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXJ04),DISP=SHR
//*
//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'
//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR
//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   *
 INCLUDE LLBOBJ(HASPXJ04)
 NAME HASPXJ04(R)
/*
./ ADD NAME=@SMEXIT7 0100-88137-88153-1457-00023-00023-00000-GIBSON
//@SMEXIT7 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K
//JESEXIT7 EXEC PGM=IEV90,PARM='DECK,NOLOAD,XREF(SHORT)'
//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//         DD   DSN=SYS1.HASPSRC,DISP=SHR
//         DD   DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXJ07),DISP=SHR
//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXJ07),DISP=SHR
//*
//LINK1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL'
//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR
//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   *
 INCLUDE LLBOBJ(HASPXJ07)
 NAME HASPXJ07(R)
/*
//*
./ ADD NAME=@SMEXIT8 0100-88137-88153-1457-00049-00049-00000-GIBSON
//@SMEXIT8 JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K
//HEQUUPDT EXEC PGM=IEBUPDTE
//SYSPRINT DD   SYSOUT=*
//SYSUT1   DD   DSN=SYS1.HASPSRC,DISP=SHR
//SYSUT2   DD   DSN=SYS1.HASPSRC,DISP=OLD
//SYSIN    DD   *
./ CHANGE NAME=$HASPEQU
$VERPCT  EQU   $VERSWBI+1          TYPE-CODE FOR PCT        @LLB0014
//SSSMUPDT EXEC PGM=IEBUPDTE
//SYSPRINT DD   SYSOUT=*
//SYSUT1   DD   DSN=SYS1.HASPSRC,DISP=SHR
//SYSUT2   DD   DSN=SYS1.HASPSRC,DISP=OLD
//SYSIN    DD   *
./       CHANGE NAME=HASPSSSM
               $USERCBS,           GENERATE USER TABLES     @LLB0014   C
         SPACE 1                                            @LLB0014
         ENTRY HCBGM                                        @LLB0014
         SPACE 1                                            @LLB0014
         ENTRY HCBFM                                        @LLB0014
         SPACE 1                                            @LLB0014
         ENTRY HCBRD                                        @LLB0014
*        CHK, IOT, JCT, OCT, SWBIT AND PCT                  @LLB0014  *
        $VERTAB TYPE=$VERPCT,ID=PCT,IDOFF=PCTID-PCT,        @LLB0014   C
               KEYOFF=PCTJBKEY-PCT,KEYLEN=PCTJBKEY          @LLB0014
//JESEXIT8 EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'
//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//         DD   DSN=SYS1.HASPSRC,DISP=SHR
//         DD   DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(HASPXS08),DISP=SHR
//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(HASPXS08),DISP=SHR
//*
//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,RENT,REFR,NCAL,AC=1'
//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR
//SYSLMOD  DD   DSN=SYS1.LPALIB,DISP=SHR
//AOSH3    DD   DSN=SYS1.AOSH3,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   *
 INCLUDE JESOBJ(HASPSSSM)
 INCLUDE AOSH3(HASPAM)
 INCLUDE JESOBJ(HASPXS08)
 ORDER HASPSSSM
 NAME HASPSSSM(R)
/*
./ ADD NAME=@SMVMXIT 0100-88137-88153-1457-00023-00023-00000-GIBSON
//IEAVMXIT JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K
//IEAVMXIT EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'
//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//         DD   DSN=SYS1.HASPSRC,DISP=SHR
//         DD   DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT2   DD   DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT3   DD   DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IEAVMXIT),DISP=SHR
//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IEAVMXIT),DISP=SHR
/*
//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT'
//JESOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR
//SYSLMOD  DD   DSN=SYS1.LINKLIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   *
 INCLUDE JESOBJ(IEAVMXIT)
 SETCODE AC(1)
 NAME IEAVMXIT(R)
//*
./ ADD NAME=@SM0025B 0100-88137-88153-1457-00021-00021-00000-GIBSON
//@SM0025B JOB  TS,GIBSON,MSGCLASS=X,REGION=2048K
//IGC0025B EXEC PGM=IEV90,PARM='DECK,NOLOAD,RENT,XREF(SHORT)'
//SYSLIB   DD   DSN=SYS1.SMPMTS,DISP=SHR,DCB=BLKSIZE=19040
//         DD   DSN=SYS1.MACLIB,DISP=SHR
//         DD   DSN=SYS1.HASPSRC,DISP=SHR
//         DD   DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=GIBSON.JES2.EXITLIB(IGC0025B),DISP=SHR
//SYSPUNCH DD   DSN=GIBSON.JES2.OBJECT(IGC0025B),DISP=SHR
//*
//LINK2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,RENT,REFR,NCAL,AC=1'
//LLBOBJ   DD   DSN=GIBSON.JES2.OBJECT,DISP=SHR
//SYSLMOD  DD   DSN=SYS1.LPALIB,DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   *
 INCLUDE LLBOBJ(IGC0025B)
 NAME IGC0025B(R)
./ ADD NAME=@ZAPRDPS 0100-88137-88153-1457-00045-00045-00000-GIBSON
//@ZAPRDPS JOB  TS,GIBSON,MSGCLASS=X,CLASS=Y
//*
//* DESCRIPTION:
//*              PASSWORD MOD
//*              CHANGE READPSWD SO MSG IEC301A (ASK OPER FOR PASSWORD)
//*              INCLUDES DSNAME
//*
//STEP2    EXEC PGM=AMASPZAP
//SYSPRINT DD   SYSOUT=*
//SYSLIB   DD   DSN=SYS1.LPALIB,DISP=SHR
//SYSIN    DD   *
    NAME READPSWD
    VER 004A 9502D088         .         CLI   MYCODE,K2
    VER 004E 478030CA         .         BE    OSQ41500
    VER 0052 9503D088         .         CLI   MYCODE,K3
    VER 0056 478030CA         .         BE    OSQ41500
    VER 005A 5810D2B4         .         L     R1,MYTCB
    VER 005E 5810100C         .         L     R1,TCBIO-TCB(,R1)
    VER 0062 D207D0BA1000     .         MVC   MYMJOBN,TIOCNJOB-TIOT(R1)
    VER 0068 D205D0C2329E     .         MVC   MYMSTEP,OSQ4835K
    VER 006E D207D0C81008     .         MVC   MYMSTEPN,
*                             .                TIOCSTEP-TIOT(R1)
    VER 0074 D207D0D032A4     .         MVC   MYMDDNM,OSQ4840K
    VER 00CC D206D0B632B5     .         MVC   MYMDSN(MYMDSNN-MYMDSN),
*                             .                OSQ4855K
    VER 00D2 D22BD0BDD104     .         MVC   MYMDSNN(L'MYDSN),MYDSN
    VER 00D8 4110D0E8         .         LA    R1,MYMDSNN+L'MYDSN-1
    VER 02A6 6BC4C4D5C1D4C540 .OSQ4840K DC    C',DDNAME '
*****                         .
    REP 004A 5810D2B4         .         L     R1,MYTCB
    REP 004E 5810100C         .         L     R1,TCBIO-TCB(,R1)
    REP 0052 D207D0BA1000     .         MVC   MYMJOBN,TIOCNJOB-TIOT(R1)
    REP 0058 D205D0C2329E     .         MVC   MYMSTEP,OSQ4835K
    REP 005E D207D0C81008     .         MVC   MYMSTEPN,
*                             .                TIOCSTEP-TIOT(R1)
    REP 0064 D207D0D032A4     .         MVC   MYMDDNM,OSQ4840K
    REP 006A 9502D088         .         CLI   MYCODE,K2
    REP 006E 47F030CA         .         B     OSQ41500
    REP 0072 9503D088         .         CLI   MYCODE,K3
    REP 0076 478030CA         .         BE    OSQ41500
    REP 00CC 47000000         .         NOP   0
    REP 00D0 0700             .         NOPR  0
    REP 00D2 D22BD0D8D104     .         MVC   MYMDDNMN(L'MYDSN),MYDSN
    REP 00D8 4110D103         .         LA    R1,MYMDDNMN+L'MYDSN-1
    REP 02A6 6BC4E2D5C1D4C540 .OSQ4840K DC    CL8',DSNAME '
./ ADD NAME=C3POTBL  0100-88137-88153-1457-00018-00018-00000-GIBSON
         MACRO
         C3POTABL
*---------------------------------------------------------------------*
*                                                                     *
*        CSA TABLE DSECT                                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
C3POTABL DSECT
C3POID   DS    CL8
C3PONXT  DS    A
C3PO1ST  DS    A
C3POEND  DS    A
C3POLEN  DS    A
C3PORSV  DS    A
C3POHDRL EQU   *-C3POTABL
C3POENT  EQU   *
         MEND
./ ADD NAME=HASPXJ04 0100-88137-88153-1457-00312-00312-00000-GIBSON
         TITLE 'JESEXIT4 - JCL AND JES2 CONTROL STATEMENT SCAN'
***********************************************************************
*                                                                     *
* MODULE NAME: HASPXJ04                                               *
*                                                                     *
* DESCRIPTION: SCAN JES2 CONTROL STAEMENTS FOR /*PASSWORD CARDS AND   *
*              IF FOUND PROCESS THEM                                  *
*                                                                     *
*                                                                     *
*  ENTRY POINT:                                                       *
*      HASPXJ04                                                       *
*         CALLED FROM HASPRDR                                         *
*                                                                     *
*  PURPOSE:                                                           *
*      TO PROCESS /*PASSWORD JES2 CONTROL STAEMENTS                   *
*                                                                     *
*  INPUT:                                                             *
*      R0  = CODE INDICATING WHETHER A JES2 CONTROL STATEMENT OR JCL  *
*            IS BEING PROCESSED.                                      *
*                0 INDICATES JES2 CONTROL STATEMENT                   *
*                4 INDICATES JCL STATEMENT                            *
*      R1  = POINTER TO A 3 WORD PARAMETER LIST WITH FORMAT           *
*            WORD 1 - ADDRESS OF THE CONTROL STATEMENT/JCL IMAGE BUFF *
*            WORD 2 - ADDRESS OF THE EXIT FLAG BYTE, RDWFLAGX, IN PCE *
*            WORD 3 - ADDRESS OF THE JCTXWRK FIELD IN THE JCT         *
*      R10 = ADDRESS OF THE JCT                                       *
*      R11 = ADDRESS OF THE HCT                                       *
*      R13 = ADDRESS OF TE PCE                                        *
*      R14 = RETURN ADDRESS                                           *
*      R15 = ENTRY ADDRESS                                            *
*                                                                     *
*  OUTPUT:                                                            *
*      R0-R14 SAME AS ENTRY                                           *
*      R15   RETURN CODE                                              *
*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *
*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*
*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*
*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*
*            ATED WITH THIS EXIT, PERFORM STANDARD HASPRDR PROCESSING.*
*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *
*            THIS EXIT AND TO PERFORM STANDARD HASPRDR PROCESSING.    *
*        8 - FOR JES2 CONTROL STATEMENTS, TELLS JES2 NOT TO PERFORM   *
*            STANDARD HASPRCCS PROCESSING: INSTEAD, IMMEDIATELY       *
*            CONVERT THE STATEMENT TO A COMMENT (//*) WITH THE NULL-ON*
*            -INPUT FLAG SET TO ONE AND WRITE THE STATEMENT TO THE JCL*
*            IMAGES DATA SET. FOR JCL STATEMENTS, TELLS JES2 TO       *
*            PERFORM STANDARD HASPRDR PROCESSING.                     *
*       12 - TELLS JES2 TO CANCEL THE JOB BECAUSE AN ILLEGAL CONTROL  *
*            STATEMENT HAS BEEN DETECTED;                             *
*            OUTPUT (THE INCOMPLETE JCL IMAGE) IS PRODUCED.           *
*       16 - TELLS JES2 TO PURGE THE JOB BECAUSE AN ILLEGAL CONTROL   *
*            STATEMENT HAS BEEN DETECTED; NO OUTPUT IS PRODUCED.      *
*                                                                     *
***********************************************************************
         EJECT ,
         PRINT ON,NOGEN
         COPY  $HASPGBL
         EJECT ,
HASPXJ04 $MODULE NOTICE=NONE,                                          C
               TITLE='JESEXIT4 - JCL AND JES2 CONTROL STATEMENT SCAN', C
               RPL,                GENERATE MVS  RPL    DSECT          C
               $BUFFER,            GENERATE HASP BUFFER DSECT          C
               $HASPEQU,           GENERATE HASP EQUATES               C
               $JCT,                                                   C
               $JQE,                                                   C
               $PCE,                                                   C
               $CAT,                                                   C
               $HCT,                                                   C
               $MIT,                                                   C
               $MITETBL,                                               C
               $MODMAP,                                                C
               $RDRWORK,                                               C
               $USERCBS,                                               C
               $XECB,              GENERATE HASP XECB DSECT            C
               $XIT                GENERATE HASP XIT DSECT
         PRINT ON,GEN,NODATA
         SPACE 2
***********************************************************************
*                                                                     *
*        CHECK FOR /*PASSWORD CONTROL CARD                            *
*                                                                     *
***********************************************************************
UEXIT4  $ENTRY CSECT=YES,BASE=R12   EXIT ROUTINE ENTRY POINT
        $SAVE
         USING JCT,R10
         LR    R12,R15         LOAD BASE REGISTER
         LTR   R0,R0           IS IT FOR JES2 CONTROL CARD ?
         BNZ   RET0            NO, RETURN CODE 0
         LM    R2,R4,0(R1)     LOAD POINTERS TO PARAMS
         LTR   R4,R4           IS THERE A JCT ?
         BZ    RET0            NO, RETURN CODE 0
         CLC   0(10,R2),=CL10'/*PASSWORD'  IS IT A PSW CONTROL CARD ?
         BNE   RET0            NO, RETURN CODE 0
         MVC   JCTXWRK,=CL52' ' INITIAL TEMP PCT ENTRY TO BLANKS
         EJECT ,
***********************************************************************
*                                                                     *
*        CHECK FORMAT                                                 *
*                                                                     *
***********************************************************************
         LA    R1,ERRMSG1      POINT TO ERROR MSG 1
         CLI   10(R2),C' '     IS COL 11 A BLANK ?
         BNE   RET12           NO, RETURN CODE 12 WITH MSG1
         CLI   11(R2),C' '     IS COL 12 A BLANK ?
         BE    RET12           YES, RETURN CODE 12 WITH MSG1
         SPACE 2
***********************************************************************
*                                                                     *
*        MOVE DSN TO WORK AREA AND BLANK OUT IN CONTROL CARD          *
*                                                                     *
***********************************************************************
         LA    R1,ERRMSG2      POINT TO ERROR MSG 2
         LA    R5,11(,R2)      LOAD FOR START OF SCAN FOR BLANK
         LA    R6,1            LOAD INCREMENT FOR BXLE
         LA    R7,19(,R2)      LOAD FOR END OF SCAN
         LA    R8,JCTXWRK      LOAD ADDRESS TO MOVE PW
SCNLP1   CLI   0(R5),C' '      FOUND A BLANK ?
         BE    SCNLP1E         YES, EXIT LOOP
         MVC   0(1,R8),0(R5)   MOVE NEXT CHARACTER OF PW
         MVI   0(R5),C' '      BLANK OUT PASSWORD IN CARD
         LA    R8,1(,R8)       BUMP POINTER
         BXLE  R5,R6,SCNLP1    LOOP
         B     RET12           RETURN CODE 12 WITH MSG 2
SCNLP1E  DS    0H
         SPACE 2
***********************************************************************
*                                                                     *
*        FIND FIRST NON-BLANK AFTER PASSWORD                          *
*                                                                     *
***********************************************************************
         LA    R7,68(,R2)      LOAD FOR END OF SCAN
SCNLP2   CLI   0(R5),C' '      FOUND NON-BLANK ?
         BNE   SCNLP2E         YES, EXIT LOOP
         BXLE  R5,R6,SCNLP2    NO, LOOP
         B     SETDEF          BRANCH TO SET DEFAULT PASSWORD
SCNLP2E  DS    0H
         SPACE 2
***********************************************************************
*                                                                     *
*        CHECK FOR DSN= KEYWORD                                       *
*                                                                     *
***********************************************************************
         CLC   0(4,R5),=CL4'DSN=' FOUND DSN= KW ?
         BNE   SETDEF          NO, BRANCH TO SET DEFAULT PASSWORD
         SPACE 2
***********************************************************************
*                                                                     *
*        CHECK FOR DSN AFTER DSN= KEYWORD                             *
*                                                                     *
***********************************************************************
         LA    R1,ERRMSG6      POINT TO ERROR MSG 6
         LA    R7,71(,R2)      POINT TO COL 72
         LA    R5,4(,R5)       POINT PAST KEYWORD
         CR    R5,R7           AT END OF CARD ?
         BNL   RET12           YES, RETURN CODE 12 WITH MSG 6
         CLI   0(R5),C' '      IS THERE A DSN ?
         BE    RET12           NO, RETURN CODE 12 WITH MSG 6
         SPACE 2
***********************************************************************
*                                                                     *
*        MOVE DSN TO WORK AREA                                        *
*                                                                     *
***********************************************************************
         LA    R1,ERRMSG3      POINT TO ERROR MSG 3
         LA    R7,71(,R2)      LOAD FOR END OF SCAN
         LA    R8,JCTXWRK+7    LOAD ADDRESS TO MOVE DSN - 1
         LA    R9,JCTXWRK+52   LOAD END OF TABLE ENTRY
SCNLP4   CLI   0(R5),C' '      FOUND A BLANK ?
         BE    SCNLP4E         YES, EXIT LOOP
         LA    R8,1(,R8)       BUMP POINTER
         CR    R8,R9           MOVED 44 CHARS ALREADY ?
         BE    RET12           YES, RETURN CODE 12 WITH MSG 3
         MVC   0(1,R8),0(R5)   MOVE NEXT CHARACTER OF DSN
         BXLE  R5,R6,SCNLP4    LOOP
SCNLP4E  DS    0H
         B     SETENT1         BRANCH TO SET ENTRY IN PCT
         EJECT ,
***********************************************************************
*                                                                     *
*        SET DEFAULT PASSWORD SUPPLIED FLAG                           *
*                                                                     *
***********************************************************************
SETDEF   DS    0H
         OI    JCTUSER0,JCTPWDEF  SET PW DEFAULT FLAG
         B     SETENT1         BRANCH TO SET ENTRY IN PCT
         EJECT ,
***********************************************************************
*                                                                     *
*        INTIALIZE PCT                                                *
*                                                                     *
***********************************************************************
SETENT1  DS    0H
         TM    JCTUSER0,JCTPW  ALREADY BEEN HERE ONCE ?
         BO    SETENT2         YES, SKIP GETBUF
         OI    JCTUSER0,JCTPW  SET PW FLAG
        $GETBUF WAIT=YES       GET BUFFER
         LR    R2,R1           SAVE ADDRESS IN R2
         USING PCT,R2          ADDRESS PCT
         XC    PCTSTART(PCTTABL-PCTSTART),PCTSTART CLEAR PCT HEADER
         MVC   PCTID,=CL4'PCT' SET PCT ID
         LH    R0,$BUFLENG     SET BLOCK ...
         STH   R0,PCTLENG      ... LENGTH
         MVC   PCTJBKEY,JCTJBKEY   SET JOB KEY
         LA    R9,PCTTABL-PCT       SET INITIAL ...
         ST    R9,PCTENTOF         ... OFFSET
         ST    R2,JCTUSER2     SAVE BUFFER ADDRESS
         EJECT ,
***********************************************************************
*                                                                     *
*        SCAN TABLE FOR DUPLICATE DSN                                 *
*                                                                     *
***********************************************************************
SETENT2  DS    0H
         L     R2,JCTUSER2     LOAD ADDRESS OF PCT
         XC    JCTXWRK,=52X'FF' SCRAMBLE
         LA    R5,PCTTABL      GET POINTER TO START OF TABLE
         L     R7,PCTENTOF     GET OFFSET TO NEXT AVAILABLE ENTRY
         LA    R7,PCT(R7)      POINT TO LAST ENTRY
         CR    R7,R5           DOES TABLE HAVE ANY ENTRIES ?
         BNH   SETENT3         NO, THEN SKIP SEARCH
         LA    R6,52           GET TABLE ENTRY LENGTH
         SR    R7,R6           POINT TO LAST ENTRY
         SR    R5,R6           BACK UP ONE ENTRY LENGTH FOR BXH
SETENT2A DS    0H
         BXH   R5,R6,SETENT3
         CLC   8(44,R5),JCTXWRK+8 DATA SET NAMES COMPARE ?
         BNE   SETENT2A        NO, LOOP
         MVC   0(52,R5),JCTXWRK   MOVE IN TABLE ENTRY
         B     RET8             RET CODE 8 TO TELL JES NOT TO PROCESS
         EJECT ,
***********************************************************************
*                                                                     *
*        CHECK FOR AVAILABLE SPACE IN PCT AND MOVE IN ENTRY           *
*                                                                     *
***********************************************************************
SETENT3  DS    0H
         LA    R1,ERRMSG5      POINT TO ERROR MSG 5
         LH    R9,PCTPWCNT     GET COUNT
         CH    R9,=H'15'        ALREADY HAVE 15 PW ENTRYS
         BE    RET12            YES, RETURN CODE 12 WTIH MESSAGE
         LA    R9,1(,R9)        BUMP COUNT BY ONE
         STH   R9,PCTPWCNT      AND STORE BACK
         SPACE 1
         LA    R1,ERRMSG7       POINT TO ERROR MSG 7
         L     R5,PCTENTOF      GET CURRENT OFFSET
         LA    R0,52(,R5)       ADD 52 FOR OFFSET FOR NEXT ENTRY
         CH    R0,PCTLENG       OVER MAXIMUM LENGTH ?
         BH    RET12            YES, RETURN CODE 12 WITH MESSAGE
         ST    R0,PCTENTOF      SET NEW OFFSET
         SPACE 1
*        MOVE IN PCT ENTRY
         SPACE 1
SETENT3A DS    0H
         LA    R5,PCT(R5)       POINT TO  ENTRY
         MVC   0(52,R5),JCTXWRK MOVE IN TABLE ENTRY
         B     RET8             RET CODE 8 TO TELL JES NOT TO PROCESS
         DROP  R2
         EJECT ,
***********************************************************************
*                                                                     *
*        RETURN                                                       *
*                                                                     *
***********************************************************************
RET0     DS    0H
         LA    R15,0           LOAD RETURN CODE 0
         B     RETURN          BR TO RETURN
         SPACE 2
RET8     DS    0H
         LA    R15,8           LOAD RETURN CODE OF 8
         B     RETURN          BR TO RETURN
         SPACE 2
RET12    DS    0H
         MVC   JCTXWRK(80),0(R1) MOVE IN ERROR MESSAG
         OI    RDWFLAGX,RDWXXSEM FLAG ERROR MESSAGE SUPPLIED
         L     R1,JCTUSER2     GET ADDRESS OF BUFFER
         LTR   R1,R1           IS THERE ONE ?
         BZ    RET12A          NO, SKIP FREEBUF
         XC    JCTUSER2,JCTUSER2 CLEAR PCT ADDRESS
        $FREEBUF (R1)          FREE BUFFER
RET12A   DS    0H
         LA    R15,12          LOAD RETURN CODE OF 12
         B     RETURN          BR TO RETURN
         SPACE 2
RETURN   DS    0H
        $RETURN RC=(R15)       RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        ERROR MESSAGES                                               *
*                                                                     *
***********************************************************************
ERRMSG1  DC    CL80'INVALID PASSWORD CONTROL CARD, INVALID FORMAT'
ERRMSG2  DC    CL80'INVALID PASSWORD CONTROL CARD, PASSWORD IS LONGER TX
               HAN 8 CHARACTERS'
ERRMSG3  DC    CL80'INVALID PASSWORD CONTROL CARD, DATA SET NAME IS LONX
               GER THAN 44 CHARACTERS'
ERRMSG4  DC    CL80'INVALID PASSWORD CONTROL CARD, MULTIPLE DEFAULT PASX
               SWORDS SUPPLIED'
ERRMSG5  DC    CL80'INVALID PASSWORD CONTROL CARD, MORE THAN 15 PASSWORX
               D CONTROL CARDS SUPPLIED'
ERRMSG6  DC    CL80'INVALID PASSWORD CONTROL CARD, NO DATA SET NAME FOLX
               LOWING DSN KEYWORD'
ERRMSG7  DC    CL80'PCT EXCEEDS BUFFER SIZE. NOTIFY SYSTEMS PROGRAMMER'
         EJECT ,
***********************************************************************
*                                                                     *
*        LITERALS                                                     *
*                                                                     *
***********************************************************************
         LTORG ,
        $MODEND
         END
./ ADD NAME=HASPXJ07 0100-88137-88153-1457-00189-00189-00000-GIBSON
         TITLE 'JESEXIT7 - MAIN TASK JCT READ/WRITE EXIT'
***********************************************************************
*                                                                     *
* MODULE NAME: HASPXJ07                                               *
*                                                                     *
* DESCRIPTION: MAIN TASK JCT READ/WRITE EXIT                          *
*              IF FOUND PROCESS THEM                                  *
*                                                                     *
*                                                                     *
*                                                                     *
*  ENTRY POINT:                                                       *
*      HASPXJ07                                                       *
*         CALLED FROM HASPNUC                                         *
*                                                                     *
*  PURPOSE:                                                           *
*      TO READ/WRITE PCT (PASSWORD CONTROL TABLE) WHEN JCT IO OCCURS  *
*                                                                     *
*  INPUT:                                                             *
*      R0  = CODE INDICATING WHETHER A JCT IS BEING READ OR WRITTEN   *
*                0 INDICATES JCT HAS BEEN READ FROM SPOOL             *
*                4 INDICATES JCT WILL BE WRITTEN TO SPOOL             *
*      R1  = ADDRESS OF THE JCT                                       *
*      R11 = ADDRESS OF THE HCT                                       *
*      R13 = ADDRESS OF TE PCE                                        *
*      R14 = RETURN ADDRESS                                           *
*      R15 = ENTRY ADDRESS                                            *
*                                                                     *
*  OUTPUT:                                                            *
*      R0-R14 SAME AS ENTRY                                           *
*      R15   RETURN CODE                                              *
*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *
*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*
*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*
*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*
*            ATED WITH THIS EXIT, CONTINUE NORMAL PROCESSING.         *
*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *
*            THIS EXIT AND TO CONTINUE NORMAL PROCESSING.             *
*                                                                     *
*  NOTES:                                                             *
*      IF A MACRO SUCH AS $TRACK IS ISSUED THAT WILL RELINQUISH       *
*      CONTROL SO THAT ANOTHER TASK GET USE THE PCE OR THE CONTENTS   *
*      ARE ALTERED IT IS IMPERATIVE THAT THE FOLLOWING FIELDS BE      *
*      RESOTRED BEFORE RETURN                                         *
*        PCEIOEWF WITH POINTER TO PCE (R13)                           *
*        PCEBUFAD WITH POINTER TO JCT (R10)                           *
*        PCESEEK  WITH DASD TRACK ADDRESS (JCTTRACK)                  *
*                                                                     *
***********************************************************************
         EJECT ,
         PRINT ON,NOGEN
         COPY  $HASPGBL
         EJECT ,
HASPXJ07 $MODULE NOTICE=NONE,                                          C
               TITLE='JESEXIT7 - MAIN TASK JCT READ/WRITE EXIT',       C
               RPL,                GENERATE MVS  RPL    DSECT          C
               $BUFFER,            GENERATE HASP BUFFER DSECT          C
               $HASPEQU,           GENERATE HASP EQUATES               C
               $JCT,                                                   C
               $JQE,                                                   C
               $PCE,                                                   C
               $CAT,                                                   C
               $HCT,                                                   C
               $IOT,                                                   C
               $MIT,                                                   C
               $MITETBL,                                               C
               $MODMAP,                                                C
               $RDRWORK,                                               C
               $TAB,                                                   C
               $USERCBS,                                               C
               $XECB,              GENERATE HASP XECB DSECT            C
               $XIT                GENERATE HASP XIT DSECT
         SPACE 2
***********************************************************************
*                                                                     *
*        ENTRY AND INITIAL CHECKING                                   *
*                                                                     *
***********************************************************************
UEXIT7  $ENTRY CSECT=YES,BASE=R12   EXIT ROUTINE ENTRY POINT
        $SAVE
         LR    R12,R15         LOAD BASE REGISTER
         LR    R10,R1          LOAD JCT ADDRESS
         USING JCT,R10
         CLC   JCTID,=CL4'JCT'
         BE    JCTOK
        $MID   999
         WTO   '&MID. EXIT7: R1 DOES NOT POINT TO JCT ON ENTRY',       X
               ROUTCDE=2,DESC=4
         B     RET0
JCTOK    DS    0H
         C     R10,PCEBUFAD
         BE    PCEOK1
        $MID   998
         WTO   '&MID. EXIT7: PCEBUFAD DOES NOT POINT TO JCT AT ENTRY', X
               ROUTCDE=2,DESC=4
         B     RET0
         EJECT ,
***********************************************************************
*                                                                     *
*        CHECK ENTRY CODE AND BRANCH TO PROPER ROUTINE                *
*                                                                     *
***********************************************************************
PCEOK1   DS    0H
         LR    R2,R0           LOAD ENTRY CODE
         LA    R2,BRTBL(R2)    GET OFFSET INTO BRANCH TABLE
         BR    R2              BRANCH INTO BRANCH TABLE
         SPACE 3
BRTBL    DS    0H
         B     JCTREAD         BRANCH TO JCT READ
         B     JCTWRITE        BRANCH TO JCT WRITE
         EJECT ,
***********************************************************************
*                                                                     *
*        JCT READ ROUTINE (NULL ROUNTINE)                             *
*                                                                     *
***********************************************************************
JCTREAD  DS    0H
         B     RET0            NO PROCESSING FOR JCT READ IN MAIN TASK
         EJECT ,
***********************************************************************
*                                                                     *
*        JCT WRITE ROUTINE (DO INITIAL CHECKING)                      *
*                                                                     *
***********************************************************************
JCTWRITE DS    0H
         L     R1,$JOBQPTR
         AL    R1,JCTJQE
         TM    JQETYPE-JQE(R1),$INPUT
         BNO   RET0
         TM    JCTUSER0,JCTPW  PASSWORDS SUPPLIED IN JCL ?
         BNO   RET0            NO, RETURN CODE 0
         CLC   JCTUSER1,=A(0)  ALREADY GOT TRACK SPACE ?
         BNE   RET0            YES, RETURN CODE 0
         CLC   JCTUSER2,=A(0)  IS THERE A PCT ?
         BE    RET0            NO, RETURN CODE 0
         SPACE 2
***********************************************************************
*                                                                     *
*        GET SPOOL SPACE FOR PCT                                      *
*                                                                     *
***********************************************************************
         L     R1,RDWIOT
         LA    R1,IOTMSTAB-IOT(,R1)
        $TRACK (R1),JQE=PCEJQE
         ST    R1,JCTUSER1
***********************************************************************
*                                                                     *
*        WRITE OUT PCT                                                *
*                                                                     *
***********************************************************************
         ST    R13,PCEIOEWF
         ST    R1,PCESEEK
         MVC   PCEBUFAD(4),JCTUSER2
         LA    R1,PCEDADCT
        $EXCP  (R1),WAIT=YES
***********************************************************************
*                                                                     *
*        FREE BUFFER FOR INCORE PCT                                   *
*                                                                     *
***********************************************************************
         L     R1,JCTUSER2
         XC    JCTUSER2,JCTUSER2
        $FREEBUF (R1)
***********************************************************************
*                                                                     *
*        SET PCE BACK THE WAY IT WAS                                  *
*                                                                     *
***********************************************************************
         ST    R13,PCEIOEWF
         ST    R10,PCEBUFAD
         MVC   PCESEEK(4),JCTTRAK
         B     RET0
         EJECT ,
***********************************************************************
*                                                                     *
*        RETURN                                                       *
*                                                                     *
***********************************************************************
RET0     DS    0H
         LA    R15,0           LOAD RETURN CODE 0
        $RETURN RC=(R15)       RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        LITERALS                                                     *
*                                                                     *
***********************************************************************
         LTORG ,
        $MODEND
         END
./ ADD NAME=HASPXS08 0100-88137-88153-1457-00234-00234-00000-GIBSON
         TITLE 'JESEXIT8 - MAIN TASK JCT READ/WRITE EXIT'
***********************************************************************
*                                                                     *
* MODULE NAME: HASPXS08                                               *
*                                                                     *
* DESCRIPTION: MAIN TASK JCT READ/WRITE EXIT                          *
*              IF FOUND PROCESS THEM                                  *
*                                                                     *
*                                                                     *
*  ENTRY POINT:                                                       *
*      HASPXS08                                                       *
*         CALLED FROM HASPNUC                                         *
*                                                                     *
*  PURPOSE:                                                           *
*      TO READ/WRITE PCT (PASSWORD CONTROL TABLE) WHEN JCT IO OCCURS  *
*                                                                     *
*  INPUT:                                                             *
*      R0  = CODE INDICATING WHETHER A JCT IS BEING READ OR WRITTEN   *
*                0 INDICATES JCT HAS BEEN READ FROM SPOOL             *
*                4 INDICATES JCT WILL BE WRITTEN TO SPOOL             *
*                8 INDICATES JCT IS ALREADY IN MAIN STORAGE           *
*      R1  = ADDRESS OF THE JCT                                       *
*      R11 = ADDRESS OF THE HCT                                       *
*      R13 = ADDRESS OF TE PCE                                        *
*      R14 = RETURN ADDRESS                                           *
*      R15 = ENTRY ADDRESS                                            *
*                                                                     *
*  OUTPUT:                                                            *
*      R0-R14 SAME AS ENTRY                                           *
*      R15   RETURN CODE                                              *
*      RETURN CODES HAVE THE FOLLOWING MEANINGS                       *
*        0 - TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES*
*            ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE EXIT*
*            ROUTINE. IF THERE ARE NO ADDITIONAL EXIT ROUTINES ASSOCI-*
*            ATED WITH THIS EXIT, CONTINUE NORMAL PROCESSING.         *
*        4 - TELLS JES2 TO IGNORE OTHER EXIT ROUTINES ASSOCIATED WITH *
*            THIS EXIT AND TO CONTINUE NORMAL PROCESSING.             *
*                                                                     *
***********************************************************************
         EJECT ,
         COPY  $HASPGBL            COPY HASP GLOBALS
HASPXS08 $MODULE NOTICE=NONE,ENVIRON=USER,                             C
               TITLE='JESEXIT8 - MAIN TASK JCT READ/WRITE EXIT',       C
               ASCB,               GENERATE MVS ASCB DSECT             C
               DEB,                GENERATE MVS DEB DSECT              C
               PSA,                GENERATE MVS PSA DSECT              C
               RPL,                GENERATE MVS RGP DSECT              C
               SDWA,               GENERATE MVS SDWA DSECT             C
               $BUFFER,            GENERATE HASP BUFFER DSECT          C
               $CAT,               GENERATE HASP CAT DSECT             C
               $HASPEQU,           GENERATE HASP EQUATES               C
               $HCT,               GENERATE HASP HCT DSECT             C
               $IOT,               GENERATE HASP IOT DSECT             C
               $JCT,               GENERATE HASP JCT DSECT             C
               $JQE,               GENERATE HASP JQE DSECT             C
               $MIT,               GENERATE HASP MIT DSECT             C
               $MITETBL,           GENERATE HASP MITETBL DSECT         C
               $PCE,               GENERATE HASP PCE DSECT             C
               $PDDB,              GENERATE HASP PDDB DSECT            C
               $SCAT,              GENERATE HASP SCAT DSECT            C
               $SJB,               GENERATE HASP SJB DSECT             C
               $SVT,               GENERATE HASP SSVT DSECT            C
               $TAB,               GENERATE HASP TAB DSECT             C
               $TQE,               GENERATE HASP TQE DSECT             C
               $USERCBS,           GENERATE USER CONTROL BLOCKS        C
               $XECB               GENERATE HASP XECB DSECT
         PRINT ON,GEN,NODATA
         SPACE 2
***********************************************************************
*                                                                     *
*        ENTRY FOR JCT READ/WRITE                                     *
*                                                                     *
***********************************************************************
UEXIT8  $ENTRY CSECT=YES,BASE=R12  EXIT ROUTINE ENTRY POINT
         USING JCT,R10             ADDRESS JCT
         USING SSVT,R11            ADDRESS SSVT
         USING USAVE,R13           ADDRESS CALLER SAVE AREA
         STM   R14,R12,USAVER      SAVE CALLING REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         LR    R3,R0               SAVE ENTRY CODE
         LR    R10,R1              SAVE JCT POINTER
         LA    R0,ULEN             GET DATA AREA LENGTH
         GETMAIN  RC,LV=(0),SP=230 GET STORAGE FOR WORKAREA
         LTR   R15,R15             TEST RETURN FROM GETMAIN
         BNZ   RET0                QUIT HERE IF NO STORAGE
         LR    R8,R1               SAVE WORKAREA ADDRESS
         ST    R8,UOURSAV          POINT CALLER SAVE TO OURS
         DROP  R13                 DROP OLD SAVEAREA ADDRESS
         USING USAVE,R8            ADDRESS OUR WORKAREA
         ST    R13,UCALLER
         IPK   0(0)            SAVE CURRENT ...
         STC   R2,USAVEKEY     ... PROTECTION KEY
         LA    R3,BRTBL(R3)    GET OFFSET INTO BRANCH TABLE
         BR    R3              BRANCH INTO BRANCH TABLE
         EJECT ,
***********************************************************************
*                                                                     *
*        BRANCH TABLE                                                 *
*                                                                     *
***********************************************************************
BRTBL    DS    0H
         B     JCTREAD         BRANCH TO JCT READ
         B     JCTWRITE        BRANCH TO JCT WRITE
         EJECT ,
***********************************************************************
*                                                                     *
*        TEST FOR PASSWORD CONTROL TABLE                              *
*                                                                     *
***********************************************************************
JCTREAD  DS    0H
         TM    JCTUSER0,JCTPW      PASSWORDS SUPPLIED IN JCL ?
         BNO   RET0C               NO, RETURN
         CLC   JCTUSER1,=A(0)      IS THERE A PCT ?
         BE    RET0C               NO, RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        FIND SJB                                                     *
*                                                                     *
***********************************************************************
         USING PSA,R0
         L     R1,PSAAOLD          CURRENT ASCB
         LH    R1,ASCBASID-ASCB(,R1) GET ASID
         LR    R0,R1               COPY ASID
         BCTR  R0,0                REDUCE BY ONE
         LTR   R0,R0               INSURE ASID GREATER THAN ONE
         BNP   RET0C               EXIT TO IGNORE ROUTINE
         CLC   PSAAOLD,SVTPOSTE+4  CHECK FOR HASP ASCB
         BNE   SFNDSJBA            DO NORMAL PICK UP IF NOT
         ICM   R0,15,SVTHASP       HASP STILL UP
         BNE   RET0C               EXIT TO IGNORE IF NOT
SFNDSJBA SLL   R1,2                GET ASID * 4 ( WORD/ASID )
         AL    R1,SVTHAVT          POINT TO VECTOR TABLE ENTRY
         L     R0,0(0,R1)          POINT TO SJB
SFNDSJBB LTR   R1,R0               COPY POINTER
         BZ    RET0C               RETURN TO IGNORE IF NO SJB
         L     R0,SJBSJB-SJB(,R1) POINT TO NEXT LOWER
         LTR   R0,R0               TEST FOR END
         BNZ   SFNDSJBB            LOOP IF NOT
         LR    R13,R1               POINT TO SJB
         USING SJB,R13
         EJECT ,
***********************************************************************
*                                                                     *
*        GET BUFFER TO READ PCT INTO                                  *
*                                                                     *
***********************************************************************
        $AMODE 24
         MVC   USAVESJB(18*4),SJBSAVE  COPY SJB SAVE AREA
         MODESET EXTKEY=ZERO,SAVEKEY=USAVEKEY,WORKREG=2
         CALL  HCBGM
         BNZ   RET0B
         EJECT ,
***********************************************************************
*                                                                     *
*        READ IN PASSWORD CONTROL TABLE                               *
*                                                                     *
***********************************************************************
         ST    R1,JCTUSER2       SAVE POINTER TO PASSWORD CONTROL TABLE
         L     R0,JCTUSER1       LOAD DISK ADDRESS OF PCT
         CALL  HCBRD             BRANCH TO READ PCT
         BNZ   FREEBUF           BRANCH TO FREE BUFFERS IF NOGO
         B     RET0B             BRANCH TO RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        FREE JES BUFFER                                              *
*                                                                     *
***********************************************************************
FREEBUF  DS    0H
         L     R1,JCTUSER2 LOAD ADDRESS OF BUFFER
         XC    JCTUSER2,JCTUSER2 CLEAR BUFFER ADDRESS
         NI    JCTUSER0,255-JCTPW CLEAR PASSWORD FLAG
         CALL  HCBFM             FREE BUFFER
         B     RET0B             BRANCH TO RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        JCT WRITE ROUTINE (NULL ROUTINE)                             *
*                                                                     *
***********************************************************************
JCTWRITE DS    0H
         B     RET0C           NO PROCESSING FOR JCT WRITE
         EJECT ,
***********************************************************************
*                                                                     *
*        RETURN                                                       *
*                                                                     *
***********************************************************************
RET0B    DS    0H
         MVC   SJBSAVE(18*4),USAVESJB  RESTORE SJB SAVE AREA
         DROP  R13
         MODESET KEYADDR=USAVEKEY,WORKREG=2
        $AMODE 31
         SPACE ,
RET0C    DS    0H
         L     R13,UCALLER         RESTORE CALLER'S SAVEAREA
         DROP  R8                  DROP OUR SAVE AREA
         USING USAVE,R13           USE  CALLER'S SAVE AREA
         LR    R1,R8               POINT TO AREA
         LA    R0,ULEN             GET LENGTH OF DATA AREA
         ICM   R0,B'1000',=AL1(230) SET SUBPOOL
         FREEMAIN R,LV=(0),A=(1)
         SPACE ,
RET0     DS    0H
         LA    R15,0           LOAD RETURN CODE 0
         L     R14,USAVER      RETURN
         LM    R0,R12,USAVER+8
         BR    R14
         DROP  R13
         EJECT ,
***********************************************************************
*                                                                     *
*        CONSTANTS, EQUATES AND LITERALS                              *
*                                                                     *
***********************************************************************
         LTORG ,
        $MODEND
         EJECT ,
***********************************************************************
*                                                                     *
*        USER SAVE AREA DSECT                                         *
*                                                                     *
***********************************************************************
USAVE    DSECT
         DS    F
UCALLER  DS    F                   CALLER'S CALLER SAVE
UOURSAV  DS    F                   OUR SAVE
USAVER   DS    15F                 REGISTERS 14,15,0-12
USAVESJB DS    18F                 SJB REGISTERS
USAVEKEY DS    X                   SAVE STORAGE KEY IN PSW
ULEN     EQU   *-USAVE             LENGTH OF EXTENDED AREA
         SPACE 3
         END
./ ADD NAME=IEASVC00 0100-88137-88153-1457-00002-00002-00000-GIBSON
SVCPARM 252,REPLACE,TYPE(3),           /* READPSWD SVC  JAG 05/17/83 */
            APF(NO),NPRMPT(NO)
./ ADD NAME=IEAVMXIT 0100-88137-88153-1457-00868-00868-00000-GIBSON
         TITLE 'IEAVMXIT  '
         PRINT  GEN
*---------------------------------------------------------------------*
*                                                                     *
*        FUNCTION:  THIS PROGRAM IS A COMMUNICATIONS TASK EXIT.       *
*              IT CAN MANIPULATE CONSOLE MESSAGES OR TRIGGER AN       *
*              EVENT BASED ON A CONSOLE MESSAGE BEING ISSUED.         *
*                                                                     *
*        ENTRY:  IEAVMXIT                                             *
*                                                                     *
*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *
*                                                                     *
*        INPUT:  REGISTER 1 POINTS TO CTXT                            *
*                                                                     *
*                                                                     *
*  NOTES ON MACRO IEEMSG                                              *
*                                                                     *
* IEEMSG - BUILD AN ENTRY FOR WTO MSG TABLE                           *
*                                                                     *
*         THE IEEMSG MACRO INSTRUCTION IS USED TO BUILD AN ENTRY      *
*         FOR THE WTO MSG TABLE USED TO MODIFY ROUTING AND DESC       *
*         CODES FOR WTO MESSAGES, ISSUE COMMANDS AND RESOND TO        *
*         WTOR'S.                                                     *
*                                                                     *
*         THE IEEMSG IS WRITTEN AS FOLLOWS:                           *
*                                                                     *
*          ____________________________________________________       *
*         ×                                                    ×      *
*         × SYMBOL × IEEMSG   × ID="WTOMSGID"                  ×      *
*         ×        ×          × /ROUTCDE=("ROUTE CODES")/      ×      *
*         ×        ×          × /DESC=("DESCRIPTOR CODES")/    ×      *
*         ×        ×          × /CMD1="CMD"/                   ×      *
*         ×        ×          × /CMD2="CMD"/                   ×      *
*         ×        ×          × /CMD3="CMD"/                   ×      *
*         ×        ×          × /CMD4="CMD"/                   ×      *
*         ×        ×          × /CMD5="CMD"/                   ×      *
*         ×        ×          × /CMD6="CMD"/                   ×      *
*         ×        ×          × /CMD7="CMD"/                   ×      *
*         ×        ×          × /CMD8="CMD"/                   ×      *
*         ×        ×          × /CMD9="CMD"/                   ×      *
*         ×        ×          × /CMD10="CMD"/                  ×      *
*         ×        ×          × /JOBNAME="JOBNAME"/            ×      *
*          ____________________________________________________       *
*                                                                     *
*         SYMBOLS:                                                    *
*           SLASHES (/) ARE USED TO ENCLOSE OPTIONAL ELEMENTS         *
*           DOUBLE QUOTES (") ARE USED TO ENCLOSE ELEMENTS FOR WHICH  *
*           YOU CODE VALUES THAT YOU CHOSE                            *
*           OR SIGN (×) IS USED TO SEPARATE ALTERNATIVE ELEMENTS.     *
*                                                                     *
*         THE FOLLOWING DESCRIBES THE IEEMSG OPERANDS                 *
*           ID="WTOMSGID"                                             *
*             THE ID OPERAND SPECFIES THE WTO OR WTOR MESSAGES TO BE  *
*             ACTED UPON. THE LENGTH MUST BE GREATER THAN 2 AND LESS  *
*             THAN 125. THIS IS COMPARED TO THE BEGINNING OF EACH     *
*             WTO OR WTOR MESSAGE.                                    *
*                                                                     *
*           ROUTCDE=("ROUTE CODES")                                   *
*             THE ROUTCDE OPERAND SPECIFIES THE ROUTING CODES TO BE   *
*             ASSIGNED TO THE MESSAGE.                                *
*                                                                     *
*           DESC=("DESCRIPTOR CODES")                                 *
*             THE DESC OPERAND SPECIFIES THE DESCRIPTOR CODES TO BE   *
*             ASSIGNED TO THE MESSAGE.                                *
*                                                                     *
*           CMD1="CMD"                                                *
*           CMD2="CMD"                                                *
*           CMD3="CMD"                                                *
*           CMD4="CMD"                                                *
*           CMD5="CMD"                                                *
*           CMD6="CMD"                                                *
*           CMD7="CMD"                                                *
*           CMD8="CMD"                                                *
*           CMD9="CMD"                                                *
*           CMD10="CMD"                                               *
*             THE CMD OPERAND SPECIFIES THE COMMANDS TO BE ISSUED.    *
*             THE LENGTH MUST BE LESS THAN 120 .                      *
*             10 SEPARATE COMMANDS CAN BE SPECIFIED.                  *
*                                                                     *
*           JOBNAME="JOBNAME"                                         *
*             THE JOBNAME OPERAND SPECIFIES THE NAME OF THE JOB THAT  *
*             MUST BE ISSUEING THE WTO/WTOR FOR THIS ENTRY.           *
*             THE LENGTH MUST BE 8 CHARATCTERS OR LESS.               *
*                                                                     *
*                                                                     *
*         EXAMPLE 1                                                   *
*           OPERATION: CHANGE THE ROUTE CODES TO 0 SO MESSAGE WILL    *
*           NOT APPEAR ON THE CONSOLE ONLY IN THE LOG.                *
*                                                                     *
*           IEEMSG ID=NDP00005,ROUTCDE=0                              *
*                                                                     *
*         EXAMPLE 2                                                   *
*           OPERATION: CHANGE THE ROUTE CODES TO 2 AND THE DESC CODE  *
*           TO 4 SO THAT A NON-DEL MESSAGE WILL ROLL .                *
*                                                                     *
*           IEEMSG ID=IEE362A,ROUTCDE=(2),DESC=(4)                    *
*                                                                     *
*         EXAMPLE 3                                                   *
*           OPERATION: CHANGE THE ROUTE CODES SO MESSAGE WILL APPEAR  *
*           ON ALL CONSOLES.                                          *
*                                                                     *
*           IEEMSG ID=IEE362A,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11,12,13, *
*                 14,15,16)                                           *
*                                                                     *
*         EXAMPLE 4                                                   *
*           OPERATION: ISSUE COMMANDS 'S TSO' AND '$SLGN1' FOR        *
*                      MESSAGE IST020I.                               *
*                                                                     *
*           IEEMSG ID=IST020I,CMD1='S TSO',CMD2=$SLGN1                *
*                                                                     *
*         EXAMPLE 5                                                   *
*           OPERATION: ISSUE REPLY 'U' FOR MESSAGE IKT012D.           *
*                                                                     *
*           IEEMSG ID=IKT012D,CMD1='R XX,U'                           *
*                                                                     *
*                                                                     *
*        FILES:  NONE.                                                *
*                                                                     *
*        NOTES ON OPERATION:  THIS ROUTINE OPERATES AS A              *
*           COMMUNICATIONS TASK EXIT.                                 *
*           IT IS CAPABLE OF PERFORMING THE FOLLOWING FUNCTIONS:      *
*                                                                     *
*            . CHANGING ROUTING CODES ON MESSAGES SO THAT MESSAGES    *
*              CAN BE SENT TO DIFFERENT CONSOLES THAN THOSE           *
*              ORIGINALLY REQUESTED.                                  *
*                                                                     *
*            . CHANGING DESCRIPTOR CODES ON MESSAGES IN ORDER TO      *
*              KEEP MESSAGES FROM ROLLING OFF THE SCREEN.             *
*                                                                     *
*            . KEEPING MESSAGES OFF THE CONSOLE COMPLETELY BY         *
*              CHANGING THE ROUTING CODE TO ZERO                      *
*                                                                     *
*            . TRIGGERING AN ACTIVITY (I.E. START A TASK) IF A        *
*              SPECIFIC MESSAGE IS ISSUED.                            *
*                                                                     *
*            . REPLY TO 'WTORS' AUTOMATICALLY                         *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*    MACRO DEFINITIONS                                                *
*---------------------------------------------------------------------*
         MACRO
&LABEL   IEEMSG   &ID=,&ROUTCDE=,&DESC=,&JOBNAME=,                     X
               &CMD1=,                                                 X
               &CMD2=,                                                 X
               &CMD3=,                                                 X
               &CMD4=,                                                 X
               &CMD5=,                                                 X
               &CMD6=,                                                 X
               &CMD7=,                                                 X
               &CMD8=,                                                 X
               &CMD9=,                                                 X
               &CMD10=
         LCLC  &DCODE,&RCODE,&FLG,&MSGID,&JBNM,&CRD
         LCLC  &CRDM(10)
         LCLA  &LCRDM(10)
         LCLA  &NUMCMD
         LCLA  &I,&N,&LID,&RCFLG,&DCFLG,&CMFLG,&RSFLG,&LCRD
         LCLA  &JBFLG
         LCLB  &CMDFLG
&DCODE   SETC  '0000000000000000'
&RCODE   SETC  '0000000000000000'
&FLG     SETC  '00000000'
&JBNM    SETC  '        '
&DCFLG   SETA  0
&RCFLG   SETA  1
&CMFLG   SETA  2
&JBFLG   SETA  4
&CMDFLG  SETB  0
.*
.* CHECK PARAMETERS
.*
.IDCHK1  AIF   (T'&ID NE 'O').IDCHK1A
         MNOTE 8,'* * * ERROR * * * ID NOT SPECIFIED'
         MEXIT
.IDCHK1A AIF   (K'&ID GE 3).IDCHK1B
         MNOTE 8,'* * * ERROR * * * ID LESS THAN 3 CHARACTERS'
         MEXIT
.IDCHK1B AIF   (K'&ID LE 125).IDCHK1C
         MNOTE 8,'* * * ERROR * * * ID GREATER THAN 125 CHARACTERS'
         MEXIT
.IDCHK1C ANOP
         AIF   (T'&CMD1 EQ 'O').IDCHK1E
&CMDFLG  SETB  1
&CRDM(1) SETC  '&CMD1'
         AIF   ('&CMD1'(1,1) NE '''' OR                                X
               '&CMD1'(K'&CMD1,1) NE '''').IDCK1D1
&CRDM(1) SETC  '&CMD1'(2,K'&CMD1-2)
.IDCK1D1 AIF   (K'&CRDM(1) LE 120).IDCHK1E
         MNOTE 8,'* * * ERROR * * * CMD1 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1E AIF   (T'&CMD2 EQ 'O').IDCHK1F
&CMDFLG  SETB  1
&CRDM(2) SETC  '&CMD2'
         AIF   ('&CMD2'(1,1) NE '''' OR                                X
               '&CMD2'(K'&CMD2,1) NE '''').IDCK1E1
&CRDM(2) SETC  '&CMD2'(2,K'&CMD2-2)
.IDCK1E1 AIF   (K'&CRDM(2) LE 120).IDCHK1F
         MNOTE 8,'* * * ERROR * * * CMD2 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1F AIF   (T'&CMD3 EQ 'O').IDCHK1G
&CMDFLG  SETB  1
&CRDM(3) SETC  '&CMD3'
         AIF   ('&CMD3'(1,1) NE '''' OR                                X
               '&CMD3'(K'&CMD3,1) NE '''').IDCK1F1
&CRDM(3) SETC  '&CMD3'(2,K'&CMD3-2)
.IDCK1F1 AIF   (K'&CRDM(3) LE 120).IDCHK1G
         MNOTE 8,'* * * ERROR * * * CMD3 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1G AIF   (T'&CMD4 EQ 'O').IDCHK1H
&CMDFLG  SETB  1
&CRDM(4) SETC  '&CMD4'
         AIF   ('&CMD4'(1,1) NE '''' OR                                X
               '&CMD4'(K'&CMD4,1) NE '''').IDCK1G1
&CRDM(4) SETC  '&CMD4'(2,K'&CMD4-2)
.IDCK1G1 AIF   (K'&CRDM(4) LE 120).IDCHK1H
         MNOTE 8,'* * * ERROR * * * CMD4 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1H AIF   (T'&CMD5 EQ 'O').IDCHK1I
&CMDFLG  SETB  1
&CRDM(5) SETC  '&CMD5'
         AIF   ('&CMD5'(1,1) NE '''' OR                                X
               '&CMD5'(K'&CMD5,1) NE '''').IDCK1H1
&CRDM(5) SETC  '&CMD5'(2,K'&CMD5-2)
.IDCK1H1 AIF   (K'&CRDM(5) LE 120).IDCHK1I
         MNOTE 8,'* * * ERROR * * * CMD5 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1I AIF   (T'&CMD6 EQ 'O').IDCHK1J
&CMDFLG  SETB  1
&CRDM(6) SETC  '&CMD6'
         AIF   ('&CMD6'(1,1) NE '''' OR                                X
               '&CMD6'(K'&CMD6,1) NE '''').IDCK1I1
&CRDM(6) SETC  '&CMD6'(2,K'&CMD6-2)
.IDCK1I1 AIF   (K'&CRDM(6) LE 120).IDCHK1J
         MNOTE 8,'* * * ERROR * * * CMD6 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1J AIF   (T'&CMD7 EQ 'O').IDCHK1K
&CMDFLG  SETB  1
&CRDM(7) SETC  '&CMD7'
         AIF   ('&CMD7'(1,1) NE '''' OR                                X
               '&CMD7'(K'&CMD7,1) NE '''').IDCK1J1
&CRDM(7) SETC  '&CMD7'(2,K'&CMD7-2)
.IDCK1J1 AIF   (K'&CRDM(7) LE 120).IDCHK1K
         MNOTE 8,'* * * ERROR * * * CMD7 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1K AIF   (T'&CMD8 EQ 'O').IDCHK1L
&CMDFLG  SETB  1
&CRDM(8) SETC  '&CMD8'
         AIF   ('&CMD8'(1,1) NE '''' OR                                X
               '&CMD8'(K'&CMD8,1) NE '''').IDCK1K1
&CRDM(8) SETC  '&CMD8'(2,K'&CMD8-2)
.IDCK1K1 AIF   (K'&CRDM(8) LE 120).IDCHK1L
         MNOTE 8,'* * * ERROR * * * CMD8 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1L AIF   (T'&CMD9 EQ 'O').IDCHK1M
&CMDFLG  SETB  1
&CRDM(9) SETC  '&CMD9'
         AIF   ('&CMD9'(1,1) NE '''' OR                                X
               '&CMD9'(K'&CMD9,1) NE '''').IDCK1L1
&CRDM(9) SETC  '&CMD9'(2,K'&CMD9-2)
.IDCK1L1 AIF   (K'&CRDM(9) LE 120).IDCHK1M
         MNOTE 8,'* * * ERROR * * * CMD9 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1M AIF   (T'&CMD10 EQ 'O').IDCHK2
&CMDFLG  SETB  1
&CRDM(10) SETC '&CMD10'
         AIF   ('&CMD10'(1,1) NE '''' OR                               X
               '&CMD10'(K'&CMD10,1) NE '''').IDCK1M1
&CRDM(10) SETC '&CMD10'(2,K'&CMD10-2)
.IDCK1M1 AIF   (K'&CRDM(10) LE 120).IDCHK2
         MNOTE 8,'* * * ERROR * * * CMD10 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK2  ANOP
         AIF   (K'&JOBNAME LE 8).IDCHK99
         MNOTE 8,'* * * ERROR * * * JOBNAME GREATER THAN 8 CHARACTERS'
         MEXIT
.IDCHK99 ANOP
.*
.* DESCRIPTOR CODES
.*
.DCHK    AIF   (T'&DESC EQ 'O').RCHK
         AIF   (N'&DESC EQ 1 AND &DESC(1) EQ 0).DFLG
&I       SETA  1
.DLOOP   ANOP
&N       SETA  &DESC(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGND
         MNOTE 8,'&N IS INVALID DESCRIPTOR - IGNORED'
         AGO   .NXTD
.ASSIGND ANOP
&DCODE   SETC  '&DCODE'(1,&N-1).'1'.'&DCODE'(&N+1,16-&N)
.NXTD    AIF  (&I LE N'&DESC).DLOOP
.DFLG    ANOP
&FLG     SETC  '&FLG'(1,&DCFLG).'1'.'&FLG'(&DCFLG+2,8-&DCFLG+1)
.*
.* ROUTE CODES
.*
.RCHK    AIF   (T'&ROUTCDE EQ 'O').IDCHK
         AIF   (N'&ROUTCDE EQ 1 AND &ROUTCDE(1) EQ 0).RFLG
&I       SETA  1
.RLOOP   ANOP
&N       SETA  &ROUTCDE(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGNR
         MNOTE 8,'&N IS INVALID ROUTE - IGNORED'
         AGO   .NXTR
.ASSIGNR ANOP
&RCODE   SETC  '&RCODE'(1,&N-1).'1'.'&RCODE'(&N+1,16-&N)
.NXTR    AIF   (&I LE N'&ROUTCDE).RLOOP
.RFLG    ANOP
&FLG     SETC  '&FLG'(1,&RCFLG).'1'.'&FLG'(&RCFLG+2,8-&RCFLG+1)
.*
.* MESSAGE ID
.*
.IDCHK   ANOP
&MSGID   SETC  '&ID'
         AIF   ('&MSGID'(1,1) NE '''' OR '&MSGID'(K'&ID,1) NE '''').ID2
&MSGID   SETC  '&MSGID'(2,K'&MSGID-2)
.ID2     ANOP
&LID     SETA  K'&MSGID
.*
.* COMMAND
.*
.CMCHK   AIF   (NOT &CMDFLG).JBNMCHK
&NUMCMD  SETA  0
&I       SETA  0
.CMLP    ANOP
&I       SETA  &I+1
&LCRDM(&I) SETA  0
         AIF   (K'&CRDM(&I) EQ 0).CMLPB
&LCRDM(&I) SETA  K'&CRDM(&I)
&NUMCMD  SETA  &NUMCMD+1
.CMLPB   AIF  (&I LT 10).CMLP
&FLG     SETC  '&FLG'(1,&CMFLG).'1'.'&FLG'(&CMFLG+2,8-&CMFLG+1)
.*
.* JOBNAME
.*
.JBNMCHK AIF   (T'&JOBNAME EQ 'O').ASSIGNC
&JBNM    SETC  '&JOBNAME'
&FLG     SETC  '&FLG'(1,&JBFLG).'1'.'&FLG'(&JBFLG+2,8-&JBFLG+1)
.*
.*
.*
.ASSIGNC ANOP
&LABEL   DS   0H
S&SYSNDX EQU  *
         DC   AL2(E&SYSNDX-S&SYSNDX)
         DC   BL2'&DCODE'
         DC   BL2'&RCODE'
         DC   BL1'&FLG'
         DC   BL1'00000000'
         DC   CL8'&JBNM'
         DC   AL1(&LID)
         DC   C'&MSGID'
         AIF  (NOT &CMDFLG).END
         DC   AL1(&NUMCMD)
&I       SETA  0
.BLP     ANOP
&I       SETA  &I+1
         AIF   (K'&CRDM(&I) EQ 0).BLPB
         DC   AL1(&LCRDM(&I))
         DC   C'&CRDM(&I)'
.BLPB    AIF  (&I LT 10).BLP
.END     ANOP
E&SYSNDX DS   0H
         MEND
         EJECT ,
*---------------------------------------------------------------------*
*        START THE PROGRAM                                            *
*---------------------------------------------------------------------*
         SPACE ,
         TITLE 'IEAVMXIT  WTO/WTOR EXIT'
IEAVMXIT CSECT
IEAVMXIT AMODE 31
IEAVMXIT RMODE ANY
         SAVE  (14,12),,'IEAVMXIT,&SYSDATE,&SYSTIME'
         LR    R12,R15                 SAVE ENTRY ADRESS
         USING IEAVMXIT,R12,R11        REAL BASE ADDRESS=R12
         LA    R11,2048(,R12)          SET UP ...
         LA    R11,2048(,R11)          ...    SECOND BASE REG
         SPACE ,
         L     R2,0(,R1)               SET ADDR TO CTXT DSECT
         USING CTXT,R2                 EST. ADDR TO CTXT DSECT
         L     R3,CTXTTXPJ             SET ADDR TO TEXT OF MAJOR LINE
         USING CTXTATTR,R3             EST. ADDRESSABILITY
         SPACE ,
         GETMAIN RU,LV=WKAREAL,SP=230,LOC=BELOW
         LR    R10,R1                  SAVE THE ADDRESS
         USING WKAREA,R10              GET ADDRESSABILITY
         ST    R13,SAVE+4              CHAIN ...
         LA    R1,SAVE                    ...
         ST    R1,8(,R13)              ...  SAVEAREAS
         LR    R13,R1                  PUT SAVE AREA ADDRESS INTO R13
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        TEST FOR COMTASK ASID AND IF SO EXIT                         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         USING PSA,0                   ADDRESS LOW CORE
         L     R4,CVTPTR               POINT TO CVT
         L     R1,CVTTCBP-CVT(,R4)     GET TCB POINTERS
         L     R1,12(,R1)              GET ASCB POINTER
         L     R4,CVTCUCB-CVT(,R4)     GET UCM ADDRESS
         LH    R4,UCMCTID-UCM(,R4)     GET COMTASK ASID
         LTR   R4,R4                   IS THERE ONE ?
         BNP   RETURN                  NO, RETURN
         CH    R4,ASCBASID-ASCB(,R1)   ARE WE COMING FROM COMTASK ?
         BE    RETURN                  YES, RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        TURN OFF ROUTE 14 REGARDLESS                                 *
*                                                                     *
*        THIS CODE IS USED SO ROUTE CODE 14 WILL APPEAR ONLY IN THE   *
*        LOG.                                                         *
*---------------------------------------------------------------------*
         SPACE ,
         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK
         USING CTXTROUT,R1
         TM    CTXTR002,CTXTR14        IS ROUTE CODE 14 ON ?
         BNO   ROUTE13                 NO, BRANCH
         NI    CTXTR002,X'FF'-CTXTR14  YES, TURN IT OFF
         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG
         EJECT ,
*---------------------------------------------------------------------*
*        DONT LOG ROUTE 13 REGARDLESS                                 *
*                                                                     *
*        THIS CODE IS USED SO ROUTE CODE 13 WILL NOT APPEAR  IN THE   *
*        LOG.                                                         *
*---------------------------------------------------------------------*
         SPACE ,
ROUTE13  DS    0H
         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK
         USING CTXTROUT,R1
         CLI   CTXTR002,CTXTR13        IS ONLY ROUTE 13 ON (2ND HALF)?
         BNE   SCANTBL                 NO, BRANCH
         CLI   CTXTR001,X'00'          IS ONLY ROUTE 13 ON (1ST HALF)?
         BNE   SCANTBL                 NO, BRANCH
         OI    CTXTRFB2,CTXTRNHC       YES, SET NO HARDCOPY FLAG
         DROP  R1
         EJECT ,
*---------------------------------------------------------------------*
*        SCAN TABLE                                                   *
*---------------------------------------------------------------------*
         SPACE ,
SCANTBL  DS    0H
         L     R1,CVTPTR               LOAD ADDRESS OF CVT
         L     R1,CVTTCBP-CVT(,R1)     GET POINTER TO ...
         L     R1,12(,R1)              ... ASCB
         USING ASCB,R1
         L     R7,ASCBJBNI             LOAD POINTER TO INIT JOBNAME
         LTR   R7,R7                   IS THERE AN INIT JOBNAME PTR ?
         BNZ   SCANTBL1                YES, USE IT
         L     R7,ASCBJBNS             LOAD STC JOBNAME POINTER
         LTR   R7,R7                   IS THERE AN STC JOBNAME PTR ?
         BNZ   SCANTBL1                YES, SKIP LOAD OF BLANK PTR
         LA    R7,=CL8' '              POINT TO BLANKS
SCANTBL1 DS    0H
         SLR   R4,R4                   CLEAR FOR ICM
         ICM   R4,B'0011',ASCBASID     LOAD ASID
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         ST    R5,CURASID              SAVE
         OC    CURASID,=X'F0F0F0F0'    CONVERT TO ZONED
         TR    CURASID,TRHEXTBL        TR 0-9,A-F
         MVC   CURJBNM(8),0(R7)        SAVE JOBNAME
         DROP  R1
         SPACE 2
         LA    R4,8                    MAX LJOBNAME LENGTH
         LA    R5,CURJBNM              POINT TO JOBNAME
SCANTBL2 DS    0H
         CLI   0(R5),C' '              FOUND THE END OF THE JOBNAME ?
         BE    SCANTBL3                YES, BRANCH TO STORE LENGTH
         LA    R5,1(,R5)               BUMP POINTER
         BCT   R4,SCANTBL2             LOOP TO FIND LENGTH
SCANTBL3 DS    0H
         LA    R5,8                    MAX LENGTH
         SR    R5,R4                   CALCULATE LENGTH
         STH   R5,CURJBNLN             SAVE JOBNAME LENGTH
         SPACE 2
         L     R1,CVTPTR               LOAD ADDRESS OF CVT
         LA    R5,CVTUSER-CVT(,R1)     LOAD ADDRESS OF CVTUSER
         USING C3POTABL,R5
         SPACE ,
         LM    R8,R9,TABLPRMS          POINT TO START & END OF TABLE
         USING MSGENT,R8               ADDRESS IT
SCANLP   DS    0H
         CR    R8,R9                   REACHED END OF TABLE ?
         BNL   SCANEND                 YES, EXIT LOOP
         TM    ENTFLAG,JBNMFLG         WAS JOBNAME SPECIFIED ?
         BNO   SCANIT                  NO, SKIP COMPARE OF JOBNAMES
         CLC   CURJBNM,ENTJBNM         COMPARE JOBNAMES
         BNE   SCANSKP                 SKIP ENTRY IF NOT EQUAL
SCANIT   DS    0H
         SLR   R1,R1                   CLEAR FOR IC
         ICM   R1,B'0001',ENTLID       GET LENGTH OF MESSAGE ID
         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)
         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE
         EX    R1,ENTCLC               COMPARE ID'S
         BE    GOTENT                  BRANCH IF MATCH
SCANSKP  DS    0H
         ICM   R1,B'0011',ENTLEN       GET LENGTH OF ENTRY
         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)
         LA    R8,0(R1,R8)             POINT TO NEXT ENTRY
         B     SCANLP                  LOOP
SCANEND  DS    0H
         SPACE ,
         L     R5,0(,R5)               POINT TO NEXT R2D2 TABLE
         LTR   R5,R5                   IS THERE ONE ?
         BZ    CHKPSWD                 NO, SO CHECK FOR PASSWORD
         CLC   C3POID,=CL8'C3POTABL'   DOES ID CHECK ?
         BNE   CHKPSWD                 NO, SO CHECK FOR PASSWORD
         LM    R8,R9,C3PO1ST           POINT TO START AND END OF TABLE
         LA    R5,C3PONXT              GET POINTER TO NEXT SEG.
         B     SCANLP                  LOOP TO SCAN TABLE
         SPACE ,
ENTCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        CHECK FOR PASSWORD MESSAGE                                   *
*---------------------------------------------------------------------*
         SPACE ,
CHKPSWD  DS    0H
         LA    R8,PSWDMSG              POINT TO PASSWORD MSG ENTRY
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,ENTLID               GET LENGTH OF MESSAGE ID
         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE
         EX    R1,PSWCLC               COMPARE ID'S
         BE    DOPSWD                  BRANCH IF MATCH
         B     RETURN                  NOT FOUND
         SPACE ,
PSWCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        PROCESS   PASSWORD MESSAGE                                   *
*---------------------------------------------------------------------*
         SPACE ,
DOPSWD   DS    0H
         LA    R0,CTXTTMSG+128-51      POINT TO END OF SCAN
         LA    R7,CTXTTMSG+10          POINT TO POSSIBLE DSN FIELD
         LA    R9,61                   LENGTH OF MESSAGE
DOPSWDLP DS    0H
         CLC   0(6,R7),=CL6'DSNAME'    LOOK FOR DSNAME IN MESSAGE
         BE    GOTDSN                  FOUND IT
         LA    R7,1(,R7)               BUMP POINTER
         LA    R9,1(,R9)               BUMP POINTER
         CR    R7,R0                   REACHED END OF SCAN ?
         BL    DOPSWDLP                NO, LOOP
         B     RETURN                  RETURN
         SPACE ,
GOTDSN   DS    0H
         MVC   DSN(44),7(R7)           MOVE DSN
         LA    R0,PSWDRPLY             POINT TO FIELD FOR PASSWORD
         LA    R1,DSN                  POINT TO DSN FIELD
         SVC   252                     ASK FOR PASSWORD
         LTR   R15,R15                 DID I GET ONE
         BNZ   RETURN                  NO, RETURN
         MVC   PSWDENT(PSWDMSGL),MSGENT MOVE ENTRY
         LA    R8,PSWDENT              POINT R8 TO NEW ENTRY
         STC   R9,ENTLID               SAVE MESSAGE LENGTH
         BCTR  R9,0                    LESS ONE FOR EX MVC
         EX    R9,MVCPWENT             MOVE MESSAGE
         LA    R9,1(,R9)               GET BACK LENGTH
         LA    R7,ENTID(R9)            POINT TO REPLY AREA
         MVI   0(R7),1                 MOVE IN NUMER OF "COMMANDS"
         MVI   1(R7),13                MOVE IN REPLY LENGTH
         MVC   2(L'REPLYKW,R7),REPLYKW MOVE IN REPLY KEY WORD
         MVC   7(8,R7),PSWDRPLY        MOVE IN PASSWORD
         B     GOTENT                  PROCESS AS REGULAR ENTRY
         SPACE ,
MVCPWENT MVC   ENTID(*-*),CTXTTMSG
         EJECT ,
*---------------------------------------------------------------------*
*        GOT TABLE ENTRY NOW PROCESS IT                               *
*---------------------------------------------------------------------*
         SPACE ,
GOTENT   DS    0H
         SPACE ,
CHKDESC  DS    0H
         TM    ENTFLAG,DESCFLG         DO WE WANT TO SET DESC. CODE
         BNO   CHKROUT                 NO, BRANCH TO CHECK NEXT FLAG
         L     R1,CTXTDCP              POINT TO DESC CODE BLOCK
         USING CTXTDESC,R1
         MVC   CTXTDESC-CTXTDESC(2,R1),ENTDESC     MOVE IN DESC
         OI    CTXTRFB1,CTXTRCDC       AND TURN ON DC CHANGED FLAG
         DROP  R1
         SPACE ,
CHKROUT  DS    0H
         TM    ENTFLAG,ROUTFLG         DO WE WANT TO SET ROUT. CODE
         BNO   CHKCMD                  NO, BRANCH TO CHECK NEXT FLAG
         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK
         USING CTXTROUT,R1
         MVC   CTXTROUT-CTXTROUT(2,R1),ENTROUT     MOVE IN ROUT
         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG
         DROP  R1
         SPACE ,
CHKCMD   DS    0H
         TM    ENTFLAG,CMMDFLG         ARE WE DOING A COMMAND ?
         BO    COMMAND                 YES, BRANCH TO DO COMMAND
         B     RETURN                  RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        SET UP TO ISSUE COMMAND                                      *
*---------------------------------------------------------------------*
         SPACE ,
COMMAND  EQU  *
         SLR   R5,R5                   CLEAR FOR IC
         IC    R5,ENTLID               GET LENGTH OF MESSAGE
         LA    R5,ENTID(R5)            POINT TO COMMANDS
         SLR   R4,R4                   CLEAR FOR IC
         ICM   R4,B'0001',0(R5)        GET NUMBER OF COMMANDS
         BZ    RETURN                  EXIT IF NONE
         LA    R5,1(,R5)               BUMP UP PAST NUMBER OF CMDS
CMDLOOP  DS    0H
         LA    R9,WTOAREA              POINT TO WTO AREA
         USING CMDDSECT,R9             USE IT
         MVI   WTOAREA,C' '            CLEAR ...
         MVC   WTOAREA+1(L'WTOAREA-1),WTOAREA ... WTOAREA
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,0(,R5)               GET LENGTH
         LTR   R1,R1                   ZERO LENGTH ?
         BZ    RETURN                  YES, LEAVE
         CH    R1,=AL2(L'WTOAREA-CWTOLEN)  TOO LARGE TO MOVE ?
         BH    RETURN                  YES, LEAVE
         SPACE ,
         BCTR  R1,0                    LESS ONE FOR EX
         EX    R1,$MVCCMD              MOVE CMD
         B     CMDEXSKP                SKIP OVER EXECUTED CODE
         SPACE
$MVCCMD  MVC   WTOAREA+4(*-*),1(R5)    EXECUTED
         SPACE
CMDEXSKP DS    0H
         LA    R1,1(,R1)               GET BACK REAL LENGTH
         SPACE ,
         LR    R0,R1                   AND SAVE IN R0
         MVC   CMDDSECT(CMDHDRLN),CMDWTO MOVE FIRST PART OF WTO COMMAND
         AH    R0,CMDWTO               ADD LEN OF WTO TO LEN OF CMD
         STH   R0,CMDLEN               STORE LENGTH OF COMMAND WTO
         LA    R1,CMDCMD(R1)           POINT PAST CMD
         MVC   0(CWTOLEN-CMDHDRLN,R1),CMDWTO+CMDHDRLN MOVE REST OF WTO
         SPACE
         CLC   CMDCMD(5),REPLYKW       REPLY REQUESTED ?
         BNE   CMDJBNSC                NO, BRANCH TO SCAN FOR JOBNAME
         TM    CTXTTFB1,CTXTTFWR       IS IT A WTOR ?
         BNO   RETERR1                 NO, BR TO ISSUE ERR MSG AND RET
         OI    CTXTRFB2,CTXTRHCO       SET TO HARDCOPY ONLY
         MVC   CMDRPNUM(L'CTXTRPID),CTXTRPID  MOVE IN REPLY NUM
         SPACE
CMDJBNSC DS    0H
         SLR   R7,R7                   CLEAR R7 FOR IC
         IC    R7,0(,R5)               GET LENGTH OF CMD
         S     R7,=A(L'JOBNKW-1)       GET LENGTH OF SEARCH
         BNP   CMDISSUE                SKIP SRCH IF NOT LONG ENOUGH
         LA    R1,CMDCMD               POINT TO CMD IN WTO
         SPACE ,
         DROP  R9
         SPACE ,
CMDSCNLP DS    0H
         CLC   0(8,R1),JOBNKW          SEARCH FOR JOB NAME KEYWORD
         BE    CMDMVJBN                MOVE IN JOBNAME
         LA    R1,1(,R1)               BUMP POINTER
         BCT   R7,CMDSCNLP             LOOP
         B     CMDISSUE                BR TO ISSUE CMD
         EJECT ,
*---------------------------------------------------------------------*
*        MOVE JOBNAME INTO COMMAND IF REQUESTED                       *
*---------------------------------------------------------------------*
         SPACE ,
CMDMVJBN DS    0H
         MVC   0(8,R1),CURJBNM         MOVE IN JOBNAME
         LA    R9,8(,R1)               POINT TO DISPLACE PLACE
         AH    R1,CURJBNLN             ADD LENGTH OF JOBNAME
         LA    R8,8                    MAX JOBNAME LENGTH
         SH    R8,CURJBNLN             AMOUNT TO DISPLACE REST OF WTO
         BNP   CMDMVJB2                SKIP IF NOTHING TO DISPLACE
         LA    R7,0(R8,R7)             GET AMOUNT TO MOVE
         LTR   R7,R7                   IS THERE ANY?
         BNP   CMDMVJB1                NO, SKIP MOVE
         BCTR  R7,0                    LESS ONE FOR EX
         EX    R7,$CMDMVC1             MOVE RIGHT
         B     CMDMVJB1
         SPACE
$CMDMVC1 MVC   0(*-*,R1),0(R9)         EXECUTED
         SPACE
CMDMVJB1 DS    0H
         LA    R9,WTOAREA              POINT TO WTO AREA
         USING CMDDSECT,R9             USE IT
         LH    R1,CMDLEN               LOAD LENGTH OF WTO
         SR    R1,R8                   LESS AMOUNT MOVED
         STH   R1,CMDLEN               STORE NEW LENGTH
CMDMVJB2 DS    0H
         B     CMDISSUE
         DROP  R9
         EJECT ,
*---------------------------------------------------------------------*
*        ISSUE COMMAND                                                *
*---------------------------------------------------------------------*
         SPACE ,
CMDISSUE DS    0H
         LA    R1,WTOAREA              POINT R1 TO COMMAND WTO
         SR    R0,R0                   SHOW COMMAND
         SVC   34                      ISSUE COMMAND
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,0(,R5)               GET LENGTH
         LA    R5,1(R1,R5)             POINT TO NEXT CMD
         BCT   R4,CMDLOOP              LOOP THROUGH COMMANDS
         SPACE ,
         B     RETURN                  BRANCH TO EXIT
         EJECT ,
CMDWTO   WTO   ' ',ROUTCDE=(1),DESC=(5),MF=L
CWTOLEN  EQU   *-CMDWTO
         EJECT ,
*---------------------------------------------------------------------*
*        ISSUE ERROR MESSAGE WTO                                      *
*---------------------------------------------------------------------*
         SPACE ,
RETERR1  DS    0H
         WTO   'R2D20001 REPLY REQUESTED AND MESSAGE IS NOT A WTOR'
         B     RETURN                  BRANCH TO RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO DO FREEMAIN       *
*---------------------------------------------------------------------*
         SPACE ,
RETURN   DS    0H
         LR    R1,R10                  GET AREA ADDRESS
         L     R13,SAVE+4              RELOAD SAVE AREA ADDRESS
         FREEMAIN RU,A=(1),LV=WKAREAL,SP=230
         LM    R14,R12,12(R13)         RELOAD REGISTERS
         SLR   R15,R15                 SET RETURN CODE
         BR    R14                     RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        LITERAL POOL                                                 *
*---------------------------------------------------------------------*
         SPACE ,
         LTORG ,
         EJECT ,
*---------------------------------------------------------------------*
*        TABLE OF MESSAGE ID'S TO BE ACTED ON                         *
*---------------------------------------------------------------------*
         SPACE ,
TABLPRMS DC     A(MSGTABS),A(MSGTABE),A(0),A(0)
MSGTABS  DS     0H
         IEEMSG ID=IEE362A,ROUTCDE=2,DESC=4  LET IT ROLL
         IEEMSG ID=IST020I,CMD1='S TSO',CMD2='$SLGN1;DQ'
MSGTABE  EQU    *
         DC     512X'0'
TABLEND  EQU    *
         EJECT ,
*---------------------------------------------------------------------*
*        "DUMMY" TABLE FOR PASSWORD MESSAGES                          *
*---------------------------------------------------------------------*
         SPACE ,
PSWDMSG  IEEMSG ID=IEC301A,CMD1='R XX,        '
PSWDMSGL EQU   *-PSWDMSG
         EJECT ,
*---------------------------------------------------------------------*
*                CONSTANTS                                            *
*---------------------------------------------------------------------*
         SPACE ,
REPLYKW  DC    CL5'R XX,'
JOBNKW   DC    CL8'&&JOBNAME'
ASIDKW   DC    CL8'&&ASID'
TRHEXTBL EQU   *-X'F0'
         DC    C'01234567'
         DC    C'89ABCDEF'
         EJECT ,
*---------------------------------------------------------------------*
*        PATCH AREA                                                   *
*---------------------------------------------------------------------*
         SPACE ,
         DC    32X'0'
         EJECT ,
*---------------------------------------------------------------------*
*                EQUATES                                              *
*---------------------------------------------------------------------*
         SPACE ,
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        COMMAND DSECT                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMDDSECT DSECT
CMDLEN   DS    AL2                     LENGTH OF COMMAND WTO
CMDMCS   DC    B'0000000000000000'     MCS FLAGS
CMDHDRLN EQU   *-CMDDSECT
CMDCMD   EQU   *                       COMMAND GOES HERE
CMDRPNUM EQU   *+2                     REPLYNUM GOES HERE
         EJECT ,
*---------------------------------------------------------------------*
*        CSA TABLE DSECT                                              *
*---------------------------------------------------------------------*
         SPACE ,
         C3POTABL
         EJECT ,
*---------------------------------------------------------------------*
*        MESSAGE TABLE ENTRY DSECT                                    *
*---------------------------------------------------------------------*
         SPACE ,
         MSGENT
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SYSTEM DSECTS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         PRINT OFF
         CVT   DSECT=YES
         IHAPSA
         IHASDWA
         IHASRB
         IKJTCB
         IHAASVT
         IHAASCB
         IHARB
         IKJTSB
         IEECUCM FORMAT=NEW,DSECT=YES
         IEZJSCB
         IEFJSSIB
         IHAORE
         IHAWQE
         IEZVX100
         PRINT ON
         EJECT ,
*---------------------------------------------------------------------*
*        WORK AREA DSECT                                              *
*---------------------------------------------------------------------*
         SPACE ,
WKAREA   DSECT
SAVE     DS    18F                     SAVE AREA
DSN      DS    CL44                    DSN FOR PASSWORD
CURJBNM  DS    CL8                     JOBNAME
CURJBNLN DS    H                       JOBNAME LENGTH
CURASID  DS    F                       ASID
PSWDENT  DS    CL(PSWDMSGL)
         DS    CL88                    ROOM TO EXPAND ENTRY
PSWDRPLY DS    CL8                     PASSWORD REPLY
WTOAREA  DS    CL128                   AREA FOR SVC 34
WKAREAL  EQU   *-WKAREA
         END
./ ADD NAME=IEBCOPY  0100-88137-88153-1457-00011-00011-00000-GIBSON
//IEBCOPY JOB   TS,GIBSON,MSGCLASS=X,CLASS=Y,TYPRUN=HOLD
//STEP1  EXEC   PGM=IEBCOPY
//SYSPRINT DD SYSOUT=*
//INDD     DD  DSN=GIBSON.JES2.EXITLIB,DISP=SHR
//OUTDD    DD  DSN=GIBSON.JES2.EXITLIB,UNIT=TAPE,VOL=SER=LLBCBT,
//         DISP=(NEW,KEEP),LABEL=(1,SL,EXPDT=98000)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSIN    DD  *
 COPY INDD=INDD,OUTDD=OUTDD
/*
./ ADD NAME=IEEC3PO  0100-88137-88153-1457-01141-01141-00000-GIBSON
         TITLE 'BUILD R2D2 TABLE  -    IEEC3PO  '
         PRINT  GEN
*---------------------------------------------------------------------*
*                                                                     *
*        FUNCTION:  THIS PROGRAM BUILDS A TABLE IN CSA  FOR THE WTO   *
*              EXIT IEAVMXIT, WHICH INCLUDES IEECR2D2. IT RESPOND TO  *
*              A WTOR OR ISSUE COMMANDS KEYED OFF A WTO.              *
*                                                                     *
*        ENTRY:  IEEC3PO                                              *
*                                                                     *
*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *
*                                                                     *
*        INPUT:  NONE                                                 *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*    MACRO DEFINITIONS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&LABEL   ERRMSG   &RC=,&TXT1=,&TXT2=,&TXT3=,&MSGNUM=
         LCLA  &LTXT1,&LTXT2,&LTXT3
.*
.* CHECK PARAMETERS
.*
.RCCHK1  AIF   (T'&RC NE 'O').RCCHK9
         MNOTE 8,'* * * ERROR * * * RC NOT SPECIFIED'
         MEXIT
.RCCHK9  ANOP
.NMCHK1  AIF   (T'&MSGNUM NE 'O').NMCHK2
         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT SPECIFIED'
         MEXIT
.NMCHK2  AIF   (K'&MSGNUM EQ 4).NMCHK9
         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT 5 CHARACTERS'
         MEXIT
.NMCHK9  ANOP
.TX1CHK1 AIF   (T'&TXT1 NE 'O').TX1CHK9
         MNOTE 8,'* * * ERROR * * * TXT1 NOT SPECIFIED'
         MEXIT
.TX1CHK9 ANOP
.TX2CHK1 AIF   (T'&TXT2 NE 'O').TX2CHK9
         AIF   (T'&TXT3 EQ 'O').TX2CHK9
         MNOTE 8,'* * * ERROR * * * TXT3 WAS SPECIFIED BUT NOT TXT2'
         MEXIT
.TX2CHK9 ANOP
.*
.* SET LENGTHS
.*
&LTXT1   SETA  K'&TXT1-2
&LTXT2   SETA  K'&TXT2-2
&LTXT3   SETA  K'&TXT3-2
.*
.* COMMAND
.*
&LABEL   DC   F'&RC'
         DC   CL5'&MSGNUM'
         DC   AL1(&LTXT1)
         DC   C&TXT1
         AIF   (T'&TXT2 EQ 'O').OUT
         DC   AL1(&LTXT2)
         DC   C&TXT2
         AIF   (T'&TXT3 EQ 'O').OUT
         DC   AL1(&LTXT3)
         DC   C&TXT3
.OUT     ANOP
         DC   AL1(0)
         MEND
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        START THE PROGRAM                                            *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
IEEC3PO  CSECT
         SAVE  (14,12),,'IEEC3PO,&SYSDATE,&SYSTIME'
         LR    R12,R15                 SAVE ENTRY ADRESS
         USING IEEC3PO,R12,R11         REAL BASE ADDRESS=R12
         LA    R11,2048(,R12)          SET UP ...
         LA    R11,2048(,R11)          ...    SECOND BASE REG
         SPACE ,
         GETMAIN R,LV=WKAREAL,SP=250   GET CORE FROM SP=250
         ST    R13,SAVE+4-WKAREA(,R1)  CHAIN ...
         ST    R1,8(,R13)              ...  SAVEAREAS
         LR    R10,R1                  PUT SAVE AREA ADDRESS INTO R13
         L     R1,24(,R13)             RELOAD PARM REG.
         USING WKAREA,R10              GET ADDRESSABILITY
         LA    R13,SAVE                LOAD SAVE AREA ADDRESS INTO R13
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        PROCESS PARM                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         L     R1,0(,R1)               POINT TO PARM
         CLC   0(2,R1),=H'0'           NO PARM SPECIFIED ?
         BE    DODCBS                  GO DO DCB S
         CLC   0(2,R1),=H'6'           6 CHARS ?
         BNE   DODCBS                  NO, GO DO DCB S
         CLC   =CL6'VERIFY',2(R1)      IS IT VERIFY ?
         BNE   DODCBS                  NO, BR TO DO DCBS
         OI    FLAGS3,TSTFLG           SET TEST FLAG
         B     DODCBS                  B DO DCB S
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SET UP DCB'S                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DODCBS   DS    0H
         MVC   INPUT(INPUTL),INPUTC        SET UP SYSIN DCB
         MVC   OUTPUT(OUTPUTL),OUTPUTC     SET UP SYSOUT DCB
         MVC   OPENIN(OPENINL),OPENINC     SET UP OPEN FOR SYSIN
         MVC   OPENOUT(OPENOUTL),OPENOUTC  SET UP OPEN FOR SYSOUT
         MVC   CLOSIN(CLOSINL),CLOSINC     SET UP CLOSE FOR SYSIN
         MVC   CLOSOUT(CLOSOUTL),CLOSOUTC  SET UP CLOSE FOR SYSOUT
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        GET INPUT                                                    *
*                                                                     *
*---------------------------------------------------------------------*
CMDGETIN DS    0H
         LA    R2,OUTPUT           POINT TO OUTPUT DCB
         OPEN  ((2)),MF=(E,OPENOUT) OPEN OUTPUT
         TM    OUTPUT+48,X'10'     DID OUTPUT OPEN
         BZ    OUTERR              NO - BRANCH TO PUT OUT ERROR MSG
         LA    R2,INPUT            POINT TO INPUT DCB
         OPEN  ((2)),MF=(E,OPENIN) OPEN INPUT
         TM    INPUT+48,X'10'      DID IT OPEN
         BZ    INERR               NO, BRANCH TO PUT OUT ERROR MSG
         ZAP   CMDCOUNT,=P'0'      CLEAR COUTER
         SPACE ,
CMDGET   DS    0H
         XC    COLCOUNT,COLCOUNT   CLEAR COL COUNT FOR CONTINUATIONS
         SPACE ,
CMDGET1  DS    0H
         CLI   EOD,X'FF'           REACHED END OF INPUT ?
         BE    MOVTAB              YES, BRANCH TO MOV TABLE TO CSA
         GET   INPUT               READ RECORD FROM SYSIN
         SPACE ,
CMDOUT   DS    0H
         MVI   OUTBUF,C' '         CLEAR OUTPUT...
         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ... BUFFER
         MVC   OUTCMD(80),0(R1)    MOVE CMD TO OUTPUT
         LR    R4,R1 SAVE INPUT RECORD POINTER
         PUT   OUTPUT,OUTBUF       PUT MSG TO OUTPUT FILE
         NI    FLAGS2,255-CONT     ASSUME NOT CONT AND CLEAR CONT FLAG
         CLI   71(R4),C' '         CONTINUATION ?
         BE    SKPSET              NO, SKIP SETTING CONT FLAG
         OI    FLAGS2,CONT         YES, SET CONT FLAG
         SPACE ,
SKPSET   DS    0H
         LH    R2,COLCOUNT         LOAD COL COUNT
         LA    R3,CMDTXT(R2)       POINT R3 INTO CMDTXT TO MOVE INPUT
         LA    R2,71(,R2)          LOAD NEW COLCOUNT INTO R2
         STH   R2,COLCOUNT         STORE NEW COL COUNT
         MVC   0(71,R3),0(R4)      MOVE INPUT INTO BUFFER
         C     R2,=F'1729'         OVER MAX ?
         BL    CONTOK1             NO, SKIP PUTTING OUT ERR MSG
         XC    ERRPRM1(8),ERRPRM1  PUT ...
         LA    R1,CONTERR1         ... OUT ...
         ST    R1,ERRPRM3          ...... ERROR ...
         LA    R1,ERRPRM1          ......... MESSAGE ...
         BAL   R14,ERRPUT
         SPACE ,
CONTOK1  DS    0H
         TM    FLAGS2,CONT         THIS A CONT ?
         BO    CMDGET1             YES, GET NEXT RECORD
         B     CALLSCAN            NO, BRANCH TO CALL SCAN ROUTINE
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CALL SCAN ROUTINE                                            *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CALLSCAN DS    0H
         LA    R4,CLRSTRT          CLEAR
         LA    R5,CLRLEN           STORAGE
         LA    R6,CLRSTRT-1        ...
         SLR   R7,R7               ...
         MVCL  R4,R6               ...
         SPACE ,
         AP    CMDCOUNT,=P'1'      ADD ONE TO CMD COUNT
         LA    R0,CMDBUF           GET ADDR OF CHAR STRING
         LA    R1,KEYTBL           KEYWORD TABLE ADDRESS
         CALL  KEYSCAN             SCAN
         STM   R0,R1,ERRPRM1       SAVE FOR POSSIBLE ERROR
         B     SCANERR(R15)        SET ERROR MSG
         SPACE 1
SCANERR  DS    0H
         B     CHKMSGID            NO ERRS BR TO CHK MSG ID SPECIFIED
         B     SCANER4             VALUE MISSING FOR KEYWORD
         B     SCANER8             INVALID KEYWORD
         B     SCANER12            TOO MANY/FEW VALUES FOR KEYWORD
         B     CMDGET              NULL INPUT
         B     SCANER20            INVALID VALUE FOR KEYWORD
         B     SCANER24            VALUE TOO LONG FOR KEYWORD
         B     SCANER28            KEYWORD SPECIFIED TWICE
         B     SCANER32            NUMERIC VALUE TOO HIGH
         B     SCANER36            KEYWORD SPECIFIED MUTUALLY EXC
         B     SCANER40            KEYWORD SPECIFIED TOO MANY TIMES
         B     SCANER44            VALUE SPECIFIED TWICE FOR KEYWORD
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SET AND PUT ERROR MSG                                        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
SCANER4  DS    0H
         LA    R1,ERRSCN4
         B     SCANER99
         SPACE 1
SCANER8  DS    0H
         LA    R1,ERRSCN8
         B     SCANER99
         SPACE 1
SCANER12 DS    0H
         LA    R1,ERRSCN12
         B     SCANER99
         SPACE 1
SCANER16 DS    0H
         LA    R1,ERRSCN16
         B     SCANER99
         SPACE 1
SCANER20 DS    0H
         LA    R1,ERRSCN20
         B     SCANER99
         SPACE 1
SCANER24 DS    0H
         LA    R1,ERRSCN24
         B     SCANER99
         SPACE 1
SCANER28 DS    0H
         LA    R1,ERRSCN28
         B     SCANER99
         SPACE 1
SCANER32 DS    0H
         LA    R1,ERRSCN32
         B     SCANER99
         SPACE 1
SCANER36 DS    0H
         LA    R1,ERRSCN36
         B     SCANER99
         SPACE 1
SCANER40 DS    0H
         LA    R1,ERRSCN40
         B     SCANER99
         SPACE 1
SCANER44 DS    0H
         LA    R1,ERRSCN44
         B     SCANER99
         SPACE 1
SCANER99 DS    0H
         ST    R1,ERRPRM3
         LA    R1,ERRPRM1
         BAL   R14,ERRPUT
         B     CMDGET
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        MAKE SURE MSG ID OR DELETE SPECIFIED                         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CHKMSGID DS    0H
         TM    FLAGS1,DELFLG       DELETE SPECIFIED ?
         BO    GOTID               YES, BR, ITS OK
         TM    FLAGS2,IDFLG        MESSAGE ID SPECIFIED ?
         BO    GOTID               YES, BR, ITS OK
         XC    ERRPRM1(8),ERRPRM1  PUT ...
         LA    R1,ERRID            ERR ...
         ST    R1,ERRPRM3          MSG ...
         LA    R1,ERRPRM1          ...
         BAL   R14,ERRPUT          ...
         B     CMDGET              ...
         SPACE ,
GOTID    DS    0H
         CLC   RETCODE,=F'4'       IS RETCODE GREATER THAN 4 ?
         BH    CMDGET              YES, GET NEXT, DONT SET TABLE
         B     MOVEENT             BR TO MOVE ENT INTO CMDBLK
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SET UP CMD BLOCK                                             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
MOVEENT  DS    0H
         LA    R2,ENTHDRLN         ADD HDR LEN TO TOTAL ENT LEN
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,MSGID+1          GET LEN OF MSGID
         LA    R2,1(R3,R2)         ADD TO TOTAL ENT LEN
         TM    FLAGS1,CMMDFLG      CMD SPECIFIED ?
         BZ    NOCMD               NO, SKIP ADDING CMD LEN
         L     R3,CMDLEN           LOAD CMD LEN
         LA    R2,1(R3,R2)         ADD TO TOTAL LEN
         L     R1,=A(CMBLKLEN-(CMBLK1ST-CMBLK)) GET MAX LEN
         CR    R2,R1               TOO HIGH ?
         BNH   NOCMD               NO, SKIP
         EX    R0,*                YES, ABEND
         SPACE ,
NOCMD    DS    0H
         L     R9,BLKPTRL          POINT TO LAST CMDBLK
         LTR   R9,R9               IS THERE ONE ?
         BZ    GETCMBLK            NO, GO GET ONE
         USING CMBLK,R9            SET ADDRESSABILITY
         L     R4,CMBLKNXT         POINT TO NXT BLK ENTRY
         LA    R4,0(R2,R4)         ADD ENTRY LEN
         C     R4,CMBLKEND         PAST END ?
         BL    SKIPGET             NO, SKIP GETTING NEW BLK
         SPACE ,
GETCMBLK DS    0H
         GETMAIN R,LV=CMBLKLEN,SP=250   GET CORE FROM SP=250
         LTR   R9,R9               IS THIS FORST BLK ?
         BNZ   NOTFIRST            NO, SKIP
         LR    R9,R1               LOAD POINTER TO NEW BLK
         ST    R9,BLKPTRF          STORE ADD IN FIRST BLK PTR
         XC    CMBLKFWD,CMBLKFWD   CLEAR FWD POINTER
         XC    CMBLKBCK,CMBLKBCK   CLEAR BACKWD POINTER
         B     SKPCHAIN            AND SKIP CHAINING
         SPACE ,
NOTFIRST DS    0H
         ST    R1,CMBLKFWD         CHAIN FWD
         ST    R9,CMBLKBCK-CMBLK(,R1) CHAIN BACK
         LR    R9,R1               POINT TO NEW BLK
         SPACE ,
SKPCHAIN DS    0H
         ST    R9,BLKPTRL          SAVE PTR TO LAST BLK
         L     R1,=A(CMBLKLEN)     GET LENGTH OF BLK
         LA    R1,0(R1,R9)         ADD TO START
         ST    R1,CMBLKEND         STORE END OF BLK
         LA    R4,CMBLK1ST         GET POINTER TO FISRT ENT
         ST    R4,CMBLKNXT         SAVE AS NEXT AVAILABLE ENT
         LA    R4,0(R2,R4)
         SPACE ,
SKIPGET  DS    0H
         L     R8,CMBLKNXT         GET POINTER TO NEXT AVAIL ENT
         ST    R4,CMBLKNXT         SAVE NEW PTR
         USING MSGENT,R8
         STH   R2,ENTLEN           STORE ENT LEN
         MVC   ENTDESC,DESCFLGS    MOVE DESC FLAGS
         MVC   ENTROUT,ROUTFLGS    MOVE ROUT FLAGS
         MVC   ENTFLAG,FLAGS1      MOVE FLAGS
         MVC   ENTJBNM,=CL8' '     CLEAR JOB NAME
         TM    FLAGS1,JBNMFLG      WAS JOBNAME SPECIFIED ?
         BNO   NOJBNM              NO, SKIP SETTING JOB NAME
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,JOBNAME+1        GET LENGTH OF JOBNAME
         BCTR  R3,0                LESS ONE FOR EX
         EX    R3,JOBNMMVC         MOVE JOBNAME
         SPACE ,
NOJBNM   DS    0H
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,MSGID+1          GET MSG ID LEN
         EX    R3,MSGIDMVC         MOV MSGID PLUS LEN
         TM    FLAGS1,CMMDFLG      WAS CMD SPECIFIED ?
         BZ    NOCMDMOV            NO, SKIP CMD MOV
         LA    R4,ENTLID+1(R3)     POINT TO AREA TO MOVE CMD
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,CMDNM            GET NUMBER OF CMDS
         STC   R3,0(,R4)           STORE
         LA    R4,1(,R4)           BUMP PTR UP ONE
         L     R5,CMDLEN           GET CMD LEN
         LA    R6,CMD1             POINT TO CMDS
         LR    R7,R5               SET LENGTH OF TARGET AREA
         MVCL  R4,R6               MOVE CMDS
         SPACE ,
NOCMDMOV DS    0H
         B     CMDGET
         SPACE ,
JOBNMMVC MVC   ENTJBNM(*-*),JOBNAME+2
MSGIDMVC MVC   ENTLID(*-*),MSGID+1
         DROP  R8
         DROP  R9
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        END OF DATA ROUTINE                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMDEOD   DS    0H
         MVI   EOD,X'FF'           SET EOD FLAG
         LA    R2,INPUT            POINT TO INPUT DCB
         CLOSE ((2)),MF=(E,CLOSIN) CLOSE INPUT
         TM    FLAGS2,CONT         CONTINUATION ON LAST CARD ?
         BNO   CMDEOD1             NO, SKIP
         XC    ERRPRM1(8),ERRPRM1  PUT ...
         LA    R1,CONTERR2         ERR ...
         ST    R1,ERRPRM3          MSG ...
         LA    R1,ERRPRM1          ...
         BAL   R14,ERRPUT          ...
         B     CALLSCAN            ...
         SPACE ,
CMDEOD1  DS    0H
         B     MOVTAB              BR, TO MOVE TABLE TO CSA
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        MOVE TABLE INTO CSA                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
MOVTAB   DS    0H
         TM    FLAGS3,TSTFLG       TEST FLAG ON
         BO    RETURN              YES, BRANCH TO RETURN
         CLC   RETCODE,=F'4'       RET CODE GREATER THAN 4 ?
         BH    RETURN              YES, ALL DONE
         TM    FLAGS1,DELFLG       DELETE REQUESTED ?
         BO    DELETE              YES, GO DO DELETE
         SLR   R0,R0               CLEAR R0 FOR TOTAL COUNT
         USING CMBLK,R4
         L     R4,BLKPTRF          POINT TO FIRST CMDBLK
         SPACE ,
CNTLP    DS    0H
         L     R5,CMBLKNXT         POINT R5 TO NEXT CMDBLK
         LA    R6,CMBLK1ST         POINT R6 TO FIRST ENTRY
         SR    R5,R6               GET LENGTH OF BLK
         AR    R0,R5               ADD TO TOTAL LEN
         L     R4,CMBLKFWD         POINT TO NEXT BLK
         LTR   R4,R4               IS THERE ONE ?
         BNZ   CNTLP               YES, LOOP
         DROP  R4
         LA    R6,C3POHDRL         GET LEN OF C3PO CSA TABLE HEADER
         AR    R0,R6               ADD TO TOTAL LEN
         LR    R2,R0               SAVE IN R2
         LR    R3,R0               AND R3
         GETMAIN R,LV=(2),SP=241 SP=241 GET CSA
         LR    R8,R1               PUT ADDR INTO R8
         USING C3POTABL,R8
         MVC   C3POID,=CL8'C3POTABL' SET C3PO ID
         L     R5,CVTPTR           POINT R5 TO CVT
         L     R5,CVTUSER-CVT(,R5) LOAD R5 FROM CVTUSER
         ST    R5,C3PONXT          CHAIN NEW TABLE IN FRONT OF OLD
         LA    R5,C3POENT          LOAD POINTER TO FISRT ENT
         ST    R5,C3PO1ST          ST POINTER TO FISRT ENT
         LA    R5,C3POTABL         LOAD PTR TO TABLE
         AR    R5,R3               ADD LEN OF TABLE
         ST    R5,C3POEND          STO PTR TO END OF TABLE
         ST    R3,C3POLEN          ST LEN OF TABLE
         XC    C3PORSV,C3PORSV     CLEAR RESV
         LA    R6,C3POENT          POINT TO FIRST ENT
         USING CMBLK,R3
         L     R3,BLKPTRF          LOAD ADDR OF FISRT CMD BLK
         SPACE ,
MOVLOOP  DS    0H
         LA    R4,CMBLK1ST         LOAD ADDR OF FIRST ENT IN CMD BLK
         L     R5,CMBLKNXT         LOAD POINTER TO NEXT AVAIL ENT
         SR    R5,R4               GET LEN OF CMD BLK ENTRIES
         LR    R7,R5               AND SET AS TARGET LEN
         MVCL  R6,R4               MOVE CMD ENTER INTO CSA
         L     R3,CMBLKFWD         POINT TO NEXT CMDBLK
         LTR   R3,R3               IS THERE ONE ?
         BNZ   MOVLOOP             YES, LOOP
         L     R4,CVTPTR               LOAD ADDRESS OF CVT
         USING CVT,R4
         L     R2,CVTUSER              LOAD OLD CONTENTS OF CVTUSER
         MODESET KEY=ZERO
         ST    R8,CVTUSER              SET PTR TO NEW C3PO TABLE
         DROP  R4
         MODESET KEY=NZERO
         B     RETURN                  RETURN
         DROP  R8
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        FREEMAIN OLD R2D2 TABLE                                      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DELETE   DS    0H
         L     R4,CVTPTR           GET POINTER TO ...
         L     R2,CVTUSER-CVT(,R4) ... C3PO TABLE
         USING C3POTABL,R2
         LR    R3,R2               SAVE POINTER
         SPACE ,
DELLOOP  DS    0H
         LTR   R2,R3               DOES TABLE EXIST ?
         BZ    DELLPEND            NO, ALL DONE
         L     R3,C3PONXT          YES, LOAD POINTER TO NEXT TABLE
         CLC   C3POID,=CL8'C3POTABL' IS IT AN R2D2 TABLE ?
         BNE   DELXIT              NO, EXIT SOMETHING NOT RIGHT
         LR    R1,R2               LOAD FREEMAIN ADDRESS
         L     R2,C3POLEN          LOAD FREEMAIN LENGTH
         DROP  R2
         LTR   R2,R2               IS LENGTH ZERO ?
         BZ    DELXIT              YES, DON'T FREE IT
         FREEMAIN R,A=(1),LV=(2),SP=241 DO FREEMAIN
         B     DELLOOP             LOOP TO FREE NEXT TABLE
         SPACE ,
DELLPEND DS    0H
         MODESET KEY=ZERO
         XC    CVTUSER-CVT(4,R4),CVTUSER-CVT(R4) CLEAR PTR IN CVT
         MODESET KEY=NZERO
         SPACE ,
DELXIT   DS    0H
         B     RETURN              RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO FREE UP           *
*        OUR GOTTEN CORE FROM SP=250                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
RETURN   DS    0H
         LA    R2,OUTPUT           POINT TO OUTPUT DCB
         CLOSE ((2)),MF=(E,CLOSOUT) CLOSE OUTPUT
         L     R9,BLKPTRF          GET POINTER TO FIRST CMD BLK
         SPACE ,
FREELP   DS    0H
         LTR   R9,R9               IS THER ONE ?
         BZ    SKIPFREE            NO, THEN DONT FREE IT
         USING CMBLK,R9
         LR    R1,R9               LOAD POINTER TO CMD BLK
         L     R9,CMBLKFWD         LOAD POINTER TO NEXT CMD BLK
         FREEMAIN R,A=(1),LV=CMBLKLEN,SP=250 DO FREEMAIN
         B     FREELP              LOOP
         SPACE 2
SKIPFREE DS    0H
         L     R2,RETCODE          LOAD RETURN CODE
         LR    R1,R13              GET AREA ADDRESS
         L     R13,SAVE+4          RELOAD SAVE AREA ADDRESS
         FREEMAIN R,A=(1),LV=WKAREAL,SP=250 DO FREEMAIN
         LR    R15,R2              LOAD RETCODE INTO R15
         RETURN (14,12),RC=(15)    RETURN
         DROP  R9
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        DISASTEROUS ERRORS                                           *
*        WTO ERROR MSG AND RETURN WITH CODE 12                        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
OUTERR   DS    0H
         WTO   'C3PO0901D ERROR OPENING OUTPUT FILE, EXECUTION ENDS',  X
               ROUTCDE=(12)
         MVC   RETCODE,=F'12'      SET ERROR CODE
         B     RETURN
         SPACE ,
INERR    DS    0H
         WTO   'C3PO0902D ERROR OPENING INPUT FILE, EXECUTION ENDS',   X
               ROUTCDE=(12)
         MVC   RETCODE,=F'12'      SET ERROR CODE
         B     RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        ERROR MESSAGE SUBROUTINE                                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
ERRPUT   DS    0H
         STM   R14,R12,SAVAREA2    SAVE REGISTERS
         L     R2,8(,R1)           LOAD POINTER TO ERR MSG BLK
         L     R3,0(,R2)           LOAD RETURN CODE
         LA    R4,4(,R2)           POINT TO MSG NUM
         LA    R2,9(,R2)           POINT TO FIRST ERR MSG TXT
         C     R3,RETCODE          IS RETCODE GREATER THAN CURNT ?
         BNH   ERRSKP              NO, SKIP RET CODE SET
         ST    R3,RETCODE          ST NEW RETCODE
         SPACE ,
ERRSKP   DS    0H
         MVI   OUTBUF,C' '         CLEAR OUTPUT BUFFER ...
         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ...
         MVC   OUTMSG(4),=C'C3PO'  SET MSG HDR
         MVC   OUTMSG+4(4),0(R4)   SET MSG NUM
         MVI   OUTMSG+8,C'I'       SET MSG TYPE AS INFORMATIONAL
         C     R3,=F'4'            IS RETCODE < 4 ?
         BL    ERRSKP1             YES, SKIP
         MVI   OUTMSG+8,C'W'       SET MSG TYPE AS WARNING
         C     R3,=F'8'            IS RETCODE < 8 ?
         BL    ERRSKP1             YES, SKIP
         MVI   OUTMSG+8,C'E'       SET MSG TYPE AS ERROR
         C     R3,=F'12'           IS RETCODE < 12 ?
         BL    ERRSKP1             YES SKIP
         MVI   OUTMSG+8,C'D'       SET MSG TYPE AS DISASTOR
         SPACE ,
ERRSKP1  DS    0H
         SLR   R5,R5               CLEAR OFFSET
         LA    R6,OUTCMD           POINT TO OUTCMD
         SPACE ,
ERRLP    DS    0H
         ICM   R3,B'0001',0(R2)    LOAD TXT LEN INTO R3
         BZ    ERRPUTIT            IF ZERO DONE
         LA    R6,OUTCMD(R5)       LOAD POINTER INTO BUFFER
         BCTR  R3,0                BUMP LEN BACK ONE FOR EX
         EX    R3,ERRMVC1          MOVE TEXT
         LA    R3,1(,R3)           ADD BACK ONE
         LA    R5,0(R3,R5)         BUMP OFFSET
         LA    R2,1(R3,R2)         POINT TO NEXT TEXT STR
         ICM   R3,B'0001',0(R2)    LOAD LEN
         BZ    ERRPUTIT            DONE IF ZERO
         SPACE ,
         L     R7,0(,R1)           POINT TO FIRST DYNAMIC
         LA    R1,4(,R1)           POINT TO NEXT DYNAMIC
         LA    R8,8                LOAD MAX LEN
         LA    R4,ERRWORK          POINT TO ERR WORK
         SPACE ,
ERRLP2   DS    0H
         CLI   0(R7),C','          END OF STR ?
         BE    ERRSKP2             YES
         CLI   0(R7),C' '          END OF STR ?
         BE    ERRSKP2             YES
         CLI   0(R7),C')'          END OF STR ?
         BE    ERRSKP2             YES
         CLI   0(R7),C'='          END OF STR ?
         BE    ERRSKP2             YES
         MVC   0(1,R4),0(R7)       MOVE BYTE
         LA    R4,1(,R4)           BUMP TARGET POINTER
         LA    R7,1(,R7)           BUMP SOURCE POINTER
         BCT   R8,ERRLP2           LOOP
         SPACE ,
ERRSKP2  DS    0H
         LA    R4,8                LOAD MAX LEN
         SR    R4,R8               GET LEN OF STR
         BNP   ERRSKP3             NONE END
         LA    R6,OUTCMD(R5)       POINT INTO OUTCMD
         BCTR  R4,0                LESS ONE FOR EX
         EX    R4,ERRMVC2          MOVE STR
         LA    R4,1(,R4)           ADD BACK
         LA    R5,0(R4,R5)         SET OFFSET POINTER
         SPACE ,
ERRSKP3  DS    0H
         B     ERRLP               LOOP
         SPACE ,
ERRPUTIT DS    0H
         PUT   OUTPUT,OUTBUF       PUT STR
         LM    R14,R12,SAVAREA2    RELOAD REGS
         BR    R14                 RETURN
         SPACE ,
ERRMVC1  MVC   0(*-*,R6),1(R2)
ERRMVC2  MVC   0(*-*,R6),ERRWORK
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        ERROR MESSAGES                                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CONTERR1 ERRMSG RC=8,TXT1='MORE THAN 25 CONTINUATION CARDS',           X
               MSGNUM=0001
CONTERR2 ERRMSG RC=4,TXT1='CONTINUATION SPECIFIED ON LAST CARD',       X
               MSGNUM=0002
ERRSCN4  ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': NOT SPECIFIED',                 X
               MSGNUM=0003
ERRSCN8  ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': INVALID',                                       X
               MSGNUM=0004
ERRSCN12 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': TOO MANY OR TOO FEW VALUES SPECIFIED',          X
               MSGNUM=0005
ERRSCN16 ERRMSG RC=8,TXT1='LOGIC ERROR',                               X
               MSGNUM=0991
ERRSCN20 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': INVALID',                       X
               MSGNUM=0006
ERRSCN24 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': TOO LONG',                      X
               MSGNUM=0007
ERRSCN28 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': SPECIFIED TWICE',                               X
               MSGNUM=0008
ERRSCN32 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': GREATER THAN 16',               X
               MSGNUM=0009
ERRSCN36 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': MUTUALLY EXCLUSIVE WITH OTHER SPECIFIED KEYWORD'X
               ,MSGNUM=0010
ERRSCN40 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': SPECIFIED TOO MANY TIMES',                      X
               MSGNUM=0011
ERRSCN44 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': SPECIFIED TWICE',               X
               MSGNUM=0012
ERRID    ERRMSG RC=8,TXT1='KEYWORD ID: NOT SPECIFIED',                 X
               MSGNUM=0013
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        KEYWORD CHECK SUBROUTINES                                    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK MESSAGE ID                                             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
IDCHK    DS    0H
         SAVE  (14,12),,IDCHK      SAVE REGS
         TM    FLAGS2,IDFLG        ID ALREADY SPECIFIED ?
         BO    IDCRET28            YES, ERROR
         OI    FLAGS2,IDFLG        SET ID FLAG
         B     IDCRET0             BR TO RET CODE 0
         SPACE ,
IDCRET0  DS    0H
         SLR   R15,R15             CLEAR RET CODE
         B     IDCRET
         SPACE ,
IDCRET28 DS    0H
         LA    R15,28              SET RETCODE TO 28
         B     IDCRET
         SPACE ,
IDCRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK JOBNAME                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
JOBCHK   DS    0H
         SAVE  (14,12),,JOBCHK     SAVE REGS
         TM    FLAGS1,JBNMFLG      JOBNAME ALREADY SPECIFIED ?
         BO    JOBRET28            YES, ERROR
         OI    FLAGS1,JBNMFLG      SET JOBNAME FLAG
         B     JOBRET0             BR
         SPACE ,
JOBRET0  DS    0H
         SLR   R15,R15             SET RET CODE TO ZERO
         B     JOBRET
         SPACE ,
JOBRET28 DS   0H
         LA    R15,28              SET RETCODE TO 28
         B     JOBRET
         SPACE ,
JOBRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK ROUTE                                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
ROUCHK   DS    0H
         SAVE  (14,12),,ROUCHK     SAVE REGS
         TM    FLAGS1,ROUTFLG      ROUT ALREADY SPECIFIED ?
         BO    ROURET28            YES ERROR
         OI    FLAGS1,ROUTFLG      SET ROUT FLAG
         SPACE 1
         LR    R8,R0               POINT TO STR AREA
         SLR   R4,R4               CLEAR R4 FOR IC
         IC    R4,0(,R8)           GET NUMBER OF ENTRIES
         SLR   R5,R5               CLEAR R5
         SPACE 1
ROULP    DS    0H
         LA    R8,1(R5,R8)         POINT TO ROU PARAMETER
         LA    R3,1(,R8)           POINT R3 TO FIRST
         CLI   0(R8),X'02'         IS LEN > 2 ?
         BH    ROURET32            LESS ERROR
         ICM   R5,B'0001',0(R8)    LOAD LEN
         BZ    ROUNULL             END IF ZERO
         BCTR  R5,0                LESS ONE FOR EX
         EX    R5,ROUPACK          PACK IT
         LA    R5,1(,R5)           ADD BACK
         CVB   R2,WRKDWRD          CONVERT TO BIN
         C     R2,=F'16'           IS IT > 16 ?
         BH    ROURET32            YES, ERROR
         BCTR  R2,0                SUB ONE FOR SHIFT
         ICM   R6,B'1111',=X'00008000' SET "MASK"  ...
         SLR   R7,R7               ...
         SRL   R6,0(R2)            MOVE OVER ...
         SRDL  R6,8                ...
         SRL   R7,24               ...
         EX    R6,ROUTM1           ALREADY SPECIFIED ?
         BO    ROURET44            YES, ERROR
         EX    R7,ROUTM2           ALREADY SPECIFIED ?
         BO    ROURET44            YES, ERROR
         EX    R6,ROUOI1           SET BIT
         EX    R7,ROUOI2           SET BIT
         SPACE ,
ROUNULL  DS    0H
         BCT   R4,ROULP            LOOP
         SPACE 1
         B     ROURET0             ALL DONE
         SPACE ,
ROURET0  DS    0H
         SLR   R15,R15             SET RET CODE TO 1
         B     ROURET
         SPACE ,
ROURET28 DS    0H
         LA    R15,28              SET ERROR CODE
         B     ROURET
         SPACE ,
ROURET32 DS    0H
         LA    R15,32              SET ERROR CODE
         B     ROURET
         SPACE ,
ROURET44 DS    0H
         LA    R15,44              SET ERROR CODE
         B     ROURET
         SPACE ,
ROURET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         SPACE ,
ROUPACK  PACK  WRKDWRD(8),0(*-*,R3)
ROUTM1   TM    ROUTFLGS,*-*
ROUTM2   TM    ROUTFLGS+1,*-*
ROUOI1   OI    ROUTFLGS,*-*
ROUOI2   OI    ROUTFLGS+1,*-*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK DESC                                                   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DESCHK   DS    0H
         SAVE  (14,12),,DESCHK     SAVE REGS
         TM    FLAGS1,DESCFLG      DESC ALREADY SPECIFIED ?
         BO    DESRET28            YES, ERROR
         OI    FLAGS1,DESCFLG      SET DESC FLAG
         SPACE 1
         LR    R8,R0               POINT TO PARAM AREA
         SLR   R4,R4               CLEAR R4
         IC    R4,0(,R8)           LOAD NUMBER OF PARAMS
         SLR   R5,R5               CLEAR R5
         SPACE 1
DESLP    DS    0H
         LA    R8,1(R5,R8)         BUMP PARAM AREA POINTER
         LA    R3,1(,R8)           POINT R3 TO PARAM
         CLI   0(R8),X'02'         IS LEN > 2 ?
         BH    DESRET32            YES, ERROR
         ICM   R5,B'0001',0(R8)    LOAD LEN
         BZ    DESNULL             BR IF ZERO
         BCTR  R5,0                LESS ONE FOR EX
         EX    R5,DESPACK          PACK
         LA    R5,1(,R5)           ADD BACK
         CVB   R2,WRKDWRD          CONVERT
         C     R2,=F'16'           > 16 ?
         BH    DESRET32            YES, ERROR
         BCTR  R2,0                SUB ONE FOR MOVE
         ICM   R6,B'1111',=X'00008000' SET MASK ...
         SLR   R7,R7               ...
         SRL   R6,0(R2)            SHIFT
         SRDL  R6,8                ...
         SRL   R7,24               ...
         EX    R6,DESTM1           ALREADY ON ?
         BO    DESRET44            YES, ERROR
         EX    R7,DESTM2           ALREADY ON ?
         BO    DESRET44            YES, ERROR
         EX    R6,DESOI1           SET BIT
         EX    R7,DESOI2           SET BIT
         SPACE ,
DESNULL  DS    0H
         BCT   R4,DESLP            LOOP
         SPACE 1
         B     DESRET0             ALL DONE
         SPACE ,
DESRET0  DS    0H
         SLR   R15,R15             SET RETCODE TO ZERO
         B     DESRET
         SPACE ,
DESRET28 DS   0H
         LA    R15,28              SET RET CODE
         B     DESRET
         SPACE ,
DESRET32 DS   0H
         LA    R15,32              SET RET CODE
         B     DESRET
         SPACE ,
DESRET44 DS   0H
         LA    R15,44              SET RET CODE
         B     DESRET
         SPACE ,
DESRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         SPACE ,
DESPACK  PACK  WRKDWRD(8),0(*-*,R3)
DESTM1   TM    DESCFLGS,*-*
DESTM2   TM    DESCFLGS+1,*-*
DESOI1   OI    DESCFLGS,*-*
DESOI2   OI    DESCFLGS+1,*-*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK COMMAND                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMDCHK   DS    0H
         SAVE  (14,12),,CMDCHK     SAVE REGS
         OI    FLAGS1,CMMDFLG      SET CMD FLAG
         LA    R2,CMD1             POINT TO CMD AREA
         LA    R3,8                MAX CMDS
         SLR   R1,R1               CLEAR R1
         SPACE ,
CMDLP    DS    0H
         CLI   0(R2),X'00'         ANY CMDS YET ?
         BE    CMDMVC              NO, SKIP
         IC    R1,0(,R2)           GET LEN
         LA    R2,1(R1,R2)         POINT TO NEXT CMD
         BCT   R3,CMDLP            LOOP
         B     CMDRET40            ERROR, TOO MANY
         SPACE ,
CMDMVC   DS    0H
         IC    R1,CMD+1            GET CMD LEN
         EX    R1,CMDCHMVC         MOVE CMD PLUS LEN
         L     R2,CMDLEN           LOAD TOTAL CMD LEN
         LA    R2,1(R1,R2)         ADD LEN OF CRNT CMD
         ST    R2,CMDLEN           ST CMDLEN
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,CMDNM            GET NUMBER OF CMDS
         LA    R3,1(,R3)           ADD ONE
         STC   R3,CMDNM            STORE
         B     CMDRET0             RETURN CODE 0
         SPACE ,
CMDRET0  DS    0H
         SLR   R15,R15             CLEAR RET CODE
         B     CMDRET
         SPACE ,
CMDRET40 DS   0H
         LA    R15,40              SET RET CODE
         B     CMDRET
         SPACE ,
CMDRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         SPACE ,
CMDCHMVC MVC   0(*-*,R2),CMD+1
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK DELETE                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DELCHK   DS    0H
         SAVE  (14,12),,DELCHK     SAVE REGS
         TM    FLAGS1,DELFLG       DEL ALREADY SET
         BO    DELRET28            YES, ERROR
         TM    FLAGS1,B'11111111'  ANYTHING ELSE SET
         BNZ   DELRET36            YES, ERROR
         OI    FLAGS1,DELFLG       SET DEL FLAG
         B     DELRET0             RETURN CODE 0
         SPACE ,
DELRET0  DS    0H
         SLR   R15,R15             CLEAR RET CODE
         B     DELRET
         SPACE ,
DELRET28 DS   0H
         LA    R15,28              SET RET CODE
         B     DELRET
         SPACE ,
DELRET36 DS   0H
         LA    R15,36              SET RET CODE
         B     DELRET
         SPACE ,
DELRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        KEYWORD TABLE                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
KEYTBL   KEYT  'DELETE',(DELCHK),,,(0,0)
         KEYT  'ID=',(IDCHK),MSGID,,,                                  X
               LEN=(1,120)
         KEYT  'JOBNAME=',(JOBCHK),JOBNAME,ALPHANUM,,                  X
               LEN=(1,8)
         KEYT  'ROUTCDE=',(ROUCHK),ROUTCDE,NUMERIC,(1,16),             X
               LEN=(1,2)
         KEYT  'DESC=',(DESCHK),DESC,NUMERIC,(1,16),                   X
               LEN=(1,2)
         KEYT  'CMD=',(CMDCHK),CMD,,,                                  X
               LEN=(1,120),                                            X
               END=YES
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        LITERAL POOL                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         LTORG ,
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*                CONSTANTS AND EQUATES                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        PATCH AREA                                                   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         DC    32X'0'
         EJECT ,
*                                                                     *
OUTPUTC  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X
               RECFM=FBA,LRECL=133,BLKSIZE=13300
OUTPUTL  EQU   *-OUTPUTC
INPUTC   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD
INPUTL   EQU   *-INPUTC
OPENINC  OPEN  (,),MF=L
OPENINL  EQU   *-OPENINC
OPENOUTC OPEN  (,(OUTPUT)),MF=L
OPENOUTL EQU   *-OPENOUTC
CLOSINC  CLOSE (,),MF=L
CLOSINL  EQU   *-CLOSINC
CLOSOUTC CLOSE (,),MF=L
CLOSOUTL EQU   *-CLOSOUTC
         TITLE 'DSECTS USED BY IEEC3PO'
*---------------------------------------------------------------------*
*                                                                     *
*        SYSTEM DSECTS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         PRINT OFF
         CVT   DSECT=YES
         PRINT ON
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CSA TABLE DSECT                                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         C3POTABL
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        COMMAND BLOCK DSECT                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMBLK    DSECT
CMBLKFWD DS    A
CMBLKBCK DS    A
CMBLKNXT DS    A
CMBLKEND DS    A
CMBLK1ST EQU   *
CMBLKLEN EQU   4096
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        WORK AREA DSECT                                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
WKAREA   DSECT
SAVE     DS    18F                     SAVE AREA
SAVAREA2 DS    18F                     SAVE AREA
CLRSTRT  EQU   *
MSGID    DS    CL122
ROUTCDE  DS    CL122
DESC     DS    CL122
JOBNAME  DS    CL10
CMD      DS    CL122
CMDLEN   DS    F
CMDNM    DS    XL1
CMD1     DS    8CL122
FLAGS1   DS    X'00'
*        BITS ARE DEFINED IN MESSAGE ENTRY DSECT IN ENTFLAG           *
FLAGS2   DS    X'00'
CONT     EQU   B'10000000'
IDFLG    EQU   B'01000000'
WRKDWRD  DS    D'0'
WRKWRD1  DS    F'0'
WRKWRD2  DS    F'0'
ROUTFLGS DS    XL2'0000'
DESCFLGS DS    XL2'0000'
CLRLEN   EQU   *-CLRSTRT
FLAGS3   DS    X'00'
TSTFLG   EQU   B'10000000'
ERRPRM1  DS    F
ERRPRM2  DS    F
ERRPRM3  DS    F
ERRWORK  DS    D
EOD      DS    X
BLKPTRF  DS    A
BLKPTRL  DS    A
RETCODE  DS    F
OUTBUF   DS    0CL133
OUTCC    DS    CL1
OUTMSG   DS    CL10
OUTCMD   DS    CL122
OPENIN   OPEN  (,),MF=L
OPENOUT  OPEN  (,(OUTPUT)),MF=L
CLOSIN   CLOSE (,),MF=L
CLOSOUT  CLOSE (,),MF=L
OUTPUT   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X
               RECFM=FBA,LRECL=133,BLKSIZE=13300
INPUT    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD
CMDCOUNT DS    PL4
CMDBUF   DS    0H
COLCOUNT DS    H
CMDTXT   DS    CL1800
WKAREAL  EQU   *-WKAREA
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        MESSAGE TABLE ENTRY DSECT                                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         MSGENT
         END
./ ADD NAME=IGC0025B 0100-88137-88153-1457-00200-00200-00000-GIBSON
         TITLE 'IGC0025B - GET PASSWORD FROM JES2 - TYPE 4 SVC'
***********************************************************************
*                                                                     *
* MODULE NAME: IGC0025B (SVC 252)                                     *
*                                                                     *
* DESCRIPTION: ROUTINE TO GET PASSWORD FROM JCL                       *
*                                                                     *
* FUNCTION:                                                           *
*                                                                     *
*  1) GET POINTER TO JCT                                              *
*         IF NOT FOUND RETURN WITH CODE 4                             *
*                                                                     *
*  2)     SCAN TABLE FOR DSN MATCH OR BLANK DSN (FOR DEFAULT PW)      *
*             IF NONE FOUND RETURN WITH CODE 4                        *
*                ELSE MOVE PSW AND RETURN WITH CODE 0                 *
*                                                                     *
*  ENTRY POINT:                                                       *
*      IGC0025B CALLED FROM IEAVMXIT                                  *
*                                                                     *
*  PURPOSE:                                                           *
*      TO GET PASSWORD FROM JES2                                      *
*                                                                     *
*  INPUT:                                                             *
*      R0  = ADDRESS OF FIELD IN WHICH PASSWORD IS RETURNED           *
*      R1  = ADDRESS OF DSN                                           *
*      R6  = ENTRY POINT                                              *
*      R7  = ADDRESS OF ASCB                                          *
*      R13 =                                                          *
*      R14 = RETURN ADDRESS                                           *
*                                                                     *
*  OUTPUT:                                                            *
*      IF PASSWORD FOUND                                              *
*          PASSWORD AT ADDRESS PASSED IN R0                           *
*          RETURN CODE 0                                              *
*      ELSE                                                           *
*          RETURN CODE 4                                              *
*                                                                     *
*  REGISTER USEAGE:                                                   *
*       R0  - WORK REGISTER                                           *
*       R1  - WORK REGISTER                                           *
*       R2  - WORK                                                    *
*       R3  - WORK                                                    *
*       R4  - WORK                                                    *
*       R5  - WORK                                                    *
*       R6  - BASE REGISTER FOR PROGRAM                               *
*       R7  - BASE REGISTER FOR ASCB DSECT                            *
*       R8  - UNUSED                                                  *
*       R9  - UNUSED                                                  *
*       R10 - BASE REGISTER FOR JCT DSECT                             *
*       R11 - UNUSED                                                  *
*       R12 - UNUSED                                                  *
*       R13 - UNUSED                                                  *
*       R14 - RETURN ADDRESS                                          *
*       R15 - RETURN CODE                                             *
*                                                                     *
***********************************************************************
         EJECT ,
         PRINT ON,GEN
         IFGRPL
         $HASPEQU
         $HFAME
         $BUFFER
         $JCT
         $TQE
         $SJB
         $XECB
         $SCAT
         $SVT
         $USERCBS
         IECDSECS CVT,TCB,JSCB,PSCB,UPT,DSAB,TIOT,UCB,ASCB,            X
               DEB,PSA,JESCT,                                          X
               SECCORE,(MAIN,(IOB=NO)),WTG,PREFX,EXPAND=YES
         IEFJSCVT
         PRINT ON,GEN
         TITLE 'IGC0025B - GET PASSWORD FROM JES2 - TYPE 4 SVC'
IGC0025B CSECT
         USING PSA,0
         USING ASCB,R7
         USING IGC0025B,R6     SET ADDRESSABILITY
         SPACE 2
***********************************************************************
*                                                                     *
*        SAVE PARAMETERS                                              *
*                                                                     *
***********************************************************************
         LR    R4,R0            SAVE PASSWORD RETURN ADDRESS
         LR    R5,R1            SAVE DSN ADDRESS
         SPACE 2
***********************************************************************
*                                                                     *
*        GET POINTER TO JCT                                           *
*                                                                     *
***********************************************************************
         L     R1,ASCBJBNI              CHECK FOR INITIATED JOB
         LTR   R1,R1                    IS IT ?
         BZ    RET4                     NO, THEN LEAVE RET 4
         LH    R2,ASCBASID              GET ASID
         SLL   R2,2                     TIMES 4
         L     R1,FLCCVT                GET POINTER TO CVT
         L     R1,CVTJESCT-CVT(,R1)     GET POINTER TO JESCT
         L     R1,JESSSCT-JESCT(,R1)    GET POINTER TO SSCVT
SSCVTLP  DS    0H
         LR    R3,R1                    SAVE POINTER
         CLC   SSCTSNAM-SSCT(3,R1),=CL3'JES' THIS A JES SSCT ?
         BNE   SSCVTLP2                 NO, SKIP
         L     R1,SSCTSSVT-SSCT(,R1)    GET POINTER TO SSVT
         LTR   R1,R1                    IS THERE ONE ?
         BZ    SSCVTLP2                 NO, SKIP
         SPACE 2
         L     R1,SVTHAVT-SSVT(,R1)     GET POINTER TO HAVT
         LTR   R1,R1                    IS THERE ONE ?
         BZ    SSCVTLP2                 NO, SKIP
         SPACE 2
         LA    R1,0(R2,R1)              POINT TO ...
         ICM   R1,B'1111',0(R1)         ... FIRST SJB IN CHAIN
         BZ    SSCVTLP2                 SKIP IF NONE FOUND
         SPACE 2
SJBLOOP  DS    0H
         LR    R0,R1                    LOAD R0 WITH SJB ADDRESS
         TM    SJBFLG2-SJB(R1),SJB2INIT         TEST FOR BATCH JOB
         BE    GOTSJB                   GOT SJB BRANCH TO PROCESS
         ICM   R1,B'1111',SJBSJB-SJB(R1)       POINT TO NEXT SJB
         BNZ   SJBLOOP                  LOOP UNTILL END OF CHAIN
         B     SSCVTLP2                 IF NO JOB SJB FOUND ...
*                                       ... TRY NEXT SUB-SYSTEM
         SPACE 2
SSCVTLP2 DS    0H
         ICM   R1,B'1111',SSCTSCTA-SSCT(R3)    POINT TO NEXT SSCVT
         BZ    RET4                     RETURN CODE 4 IF NONE
         B     SSCVTLP                  ELSE LOOP
         EJECT ,
GOTSJB   DS    0H
         LR    R1,R0                    POINT TO LAST SJB
         ICM   R10,B'1111',SJBJCT-SJB(R1) GET POINTER TO JCT
         BZ    RET4                     RETURN CODE 4 IF NO JCT
         SPACE 2
***********************************************************************
*                                                                     *
*        CHECK PASSWORD MODE                                          *
*                                                                     *
***********************************************************************
         TM    JCTUSER0-JCT(R10),JCTPW   PASSWORD SUPPLIED IN JCL ?
         BNO   RET4                     NO, RETURN CODE 4
         EJECT ,
***********************************************************************
*                                                                     *
*        PASSWORD PROCESSING ROUTINE                                  *
*                                                                     *
***********************************************************************
         USING PCT,R1
         L     R1,JCTUSER2-JCT(,R10)     PTR TO PASSWORD CONTROL TABLE
         LTR   R1,R1                    IS THERE ONE ?
         BZ    RET4                     NO, RETURN CODE 4
         LH    R0,PCTPWCNT              GET COUNT
         LA    R1,PCTTABL               POINT TO FIRST ENTRY
         DROP  R1
         SPACE ,
PWDSRCH  DS    0H
         XC    8(44,R1),=52X'FF'        UNSCRAMBLE DSN
         CLC   8(44,R1),0(R5)           DATA SET NAMES COMPARE ?
         BE    PWDSRCH1                 YES, BR TO MOVE PW
         CLC   8(44,R1),=CL44' '        ENTRY FOR DEFAULT PASSWORD ?
         BNE   PWDSRCH2                 NO, BRANCH TO CONTINUE
         MVC   0(8,R4),0(R1)            MOVE IN PASSWORD
         XC    0(8,R4),=52X'FF'         UNSCRAMBLE PASSWORD
PWDSRCH2 DS    0H
         XC    8(44,R1),=52X'FF'        RESCRAMBLE DSN
         LA    R1,52(,R1)               BUMP TO NEXT ENTRY
         BCT   R0,PWDSRCH               LOOP TO END OF TABLE
         TM    JCTUSER0-JCT(R10),JCTPWDEF WAS THERE A DEFLT PASSWORD ?
         BO    RET0                     YES, BRANCH RETURN CODE 0
         B     RET4                     NO, BR RET CODE 4 PW NOT FOUND
         SPACE ,
PWDSRCH1 DS    0H
         XC    8(44,R1),=52X'FF'        RESCRAMBLE DSN
         MVC   0(8,R4),0(R1)            MOVE IN PASSWORD
         XC    0(8,R4),=52X'FF'         UNSCRAMBLE PASSWORD
         B     RET0                     BRANCH TO RETURN CODE 0
         EJECT ,
***********************************************************************
*                                                                     *
*        RETURN                                                       *
*                                                                     *
***********************************************************************
RET0     DS    0H
         LA    R15,0                    LOAD RETURN CODE 0
         B     RETURN                   BR TO RETURN
RET4     DS    0H
         LA    R15,4                    LOAD RETURN CODE OF 4
         B     RETURN                   BR TO RETURN
RETURN   DS    0H
         BR    R14                      RETURN
         EJECT ,
***********************************************************************
*                                                                     *
*        LITERALS                                                     *
*                                                                     *
***********************************************************************
         LTORG ,
         END
./ ADD NAME=JES2PARM 0100-88137-88153-1457-00014-00014-00000-GIBSON
EXIT001  ROUTINE=(UEXIT1),
         ENABLE
EXIT003  ROUTINE=(UEXIT3),
         ENABLE
EXIT004  ROUTINE=(UEXIT4),
         ENABLE
EXIT007  ROUTINE=(UEXIT7),
         ENABLE
EXIT008  ROUTINE=(UEXIT8),
         ENABLE
LOAD     HASPXJ01
LOAD     HASPXJ03
LOAD     HASPXJ04
LOAD     HASPXJ07
./ ADD NAME=KEYSCAN  0100-88137-88153-1457-00856-00856-00000-GIBSON
***********************************************************************
****                                                                ***
****                                                                ***
****  GENERAL FUNCTION: TO VALIDATE A CHARACTER STRING CONTAINING   ***
****                    KEYWORDS AND VALUES AND PERFORM REQUESTED   ***
****                    OPERATIONS AS SPECIFIED IN THE KEYWORD      ***
****                    VALIDATION TABLE DEFINED WITH ONE OR MORE   ***
****                    KEYT MACROS.  THIS MACRO EXPANDS TO AN      ***
****                    INDEPENDENT CSECT UPON INITIAL INVOCATION   ***
****                    AND IS ACCESSED VIA V-TYPE ADDRESSING       ***
****                    FOR SUBSEQUENT INVOCATIONS.  THERE ARE 2    ***
****                    BASIC PARTS TO THIS MACRO.  THE FIRST PART  ***
****                    SETS UP THE APPROPRIATE PARMS BASED UPON    ***
****                    THE USER PARAMETERS SUPPLIED.  THE SECOND   ***
****                    PART DOES THE STRING MANIPULATION, PERFORMS ***
****                    THE REQUESTED FUNCTIONS AND SETS RETURN     ***
****                    CODES.                                      ***
****                                                                ***
****                                                                ***
****                                                                ***
****  ENTRY REGS:   R0   AL4  ADDR OF CHAR STRING                   ***
****                R1   AL4  ADDRESS OF 1ST KEYT ENTRY             ***
****                R2                                              ***
****                R3                                              ***
****                R4                                              ***
****                R5                                              ***
****                R6                                              ***
****                R7                                              ***
****                R8                                              ***
****                R9                                              ***
****                R10                                             ***
****                R11                                             ***
****                R12                                             ***
****                R13  SAVE AREA                                  ***
****                R14  RETURN ADDRESS                             ***
****                R15                                             ***
****                                                                ***
****  REGISTER USAGE:  R0   WORK                                    ***
****                   R1   WORK                                    ***
****                   R2   WORK                                    ***
****                   R3   CHAR STRING LENGTH                      ***
****                   R4   CHAR STRING ADDRESS                     ***
****                   R5   WORK                                    ***
****                   R6   WORK                                    ***
****                   R7   WORK                                    ***
****                   R8   WORK                                    ***
****                   R9   SAVED RETURN CODE                       ***
****                   R10  WORKAREA BASE                           ***
****                   R11  PROGRAM BASE                            ***
****                   R12  PROGRAM BASE                            ***
****                   R13  OLD SAVEAREA                            ***
****                   R14  KEYWORD TABLE BASE                      ***
****                   R15  RETURN CODE                             ***
****                                                                ***
****                                                                ***
****                                                                ***
****                                                                ***
****  AUTHOR: E STEWART                DATE: 05/29/80               ***
****                                                                ***
****                                                                ***
****  ATTRIBUTES: RENT,REUS,REFR                                    ***
****                                                                ***
****                                                                ***
****  CALLED BY: UTILITY FUNCTION                                   ***
****                                                                ***
****                                                                ***
****  MACROS USED: GETMAIN,FREEMAIN                                 ***
****                                                                ***
****                                                                ***
****  ROUTINES CALLED: NONE                                         ***
****                                                                ***
****                                                                ***
****  NORMAL EXIT: BR R14                                           ***
****                                                                ***
****  EXIT REGS:     R0   AL4  ADDR OF KEYWORD IN CHAR STRING WHERE ***
****                           VALIDATION ERROR OCCURED             ***
****                 R1   AL4  ADDR OF VALUE IN CHAR STRING WHERE   ***
****                           VALIDATION ERROR OCCURED             ***
****                 R15       00  KEYWORD(S)VALUE(S) FOUND AND     ***
****                               OP(S) PERFORMED                  ***
****                           04  KEYWORD(S) FOUND, SOME VALUE NOT ***
****                               FOUND IN KEYT                    ***
****                           08  A KEYWORD WAS NOT FOUND IN KEYT  ***
****                           12  'VALCNT' DID NOT PASS VALIDATION ***
****                           16  MORE INPUT EXPECTED, I.E. ONLY   ***
****                               BLANKS, COMMENTS, OR ),BLANK WAS ***
****                               FOUND. OTHERWISE RC=00 WOULD HAVE***
****                               BEEN RETURNED.                   ***
****                           20  'TYPE' DID NOT PASS VALIDATION.  ***
****                           24  'LEN' DID NOT PASS VALIDATION.   ***
****                                                                ***
****                                                                ***
****  ABEND CODES: NONE (I HOPE)                                    ***
****                                                                ***
****                                                                ***
****  MESSAGES ISSUED: NONE                                         ***
****                                                                ***
****                                                                ***
****                                                                ***
****                                                                ***
****  DSECTS/MACROS USED: NONE FROM AN EXTERNAL SOURCE              ***
****                                                                ***
****                                                                ***
****  SPECIAL NOTES:                                                ***
****                                                                ***
****                                                                ***
****                                                                ***
***********************************************************************
KEYSCAN  CSECT ,
         SAVE  (14,12),,'KEYSCAN,&SYSDATE,&SYSTIME'
         LR    R12,R15                 SAVE ENTRY ADRESS
         USING KEYSCAN,R12,R11         REAL BASE ADDRESS=R12
         LA    R11,2048(,R12)          SET UP ...
         LA    R11,2048(,R11)          ...    SECOND BASE REG
         SPACE ,
         USING KVDSVR,R14          TABLE ADDRESS BASE
         GETMAIN R,LV=KVWALNTH     GET WORKAREA
         LR    R10,R1              PUT INTO BASE REG
         USING KVWAVR,R10          WORKAREA BASE
         L     R4,20(,R13)         GET STRING ADDRESS INTO REG 4
         SR    R3,R3               CLEAR WORK REG
         ICM   R3,B'0011',0(R4)    GET STRING LENGTH
         LA    R4,2(,R4)           BUMP OVER STRING LENGTH
         MVI   KVWAFL1,0           CLEAR FLAG BYTE
         MVI   KVWAKWVA,0          CLEAR COUNT BYTE
         MVC   KVWASAV1(4*13),20(R13) SAVE REGS 0-12
         MVC   KVWASAV1+(4*14)(4*2),12(R13) SAVE REGS 14-15
         ST    R13,KVWASAV1+(4*13)  SAVE REG 13 FROM CALLER
KVR004   DS    0H
         L     R14,24(,R13)        TABLE ADDRESS
         LA    R6,KVWAVR
         LA    R7,KVWACLR
         LA    R8,KVWAVR+KVWACLR
         SLR   R9,R9
         MVCL  R6,R8
         LTR   R3,R3               Q. ANY DATA TO SCAN
         BP    KVR005              A. YES, CONTINUE AS NORMAL
         LA    R9,16               SET BAD RC
         B     KVR900              AND RETURN
KVR005   DS    0H
         SR    R2,R2               CLEAR FOR LATER
         ST    R4,KVWALOC          SAVE STRING LOC
         ST    R4,KVWAKEY          SAVE STRING LOC
KVR005A  DS    0H
         LR    R5,R3               LOAD LENGTH INTO R5
         C     R5,KVA256           IS IT GREATER THAN 256 ?
         BNH   KVR005B             NO, NO PROBLEM
         L     R5,KVA256           YES, THEN SET TO 256
KVR005B  DS    0H
         BCTR  R5,R0               REDUCE BY ONE
         EX    R5,KVTR1VR          SEARCH FOR NON BLANK
         LA    R5,1(,R3)           GET ORIG LENGTH
         CLM   R2,B'0001',KVAX00   Q. ANYTHING FOUND
         BNE   KVR006              A. YES, SEE WHAT IT IS
         SR    R3,R5               SUB OFF FROM TOTAL LENGTH
         BNP   KVR005C             NOTHING LEFT
         LA    R4,256(,R4)         BUMP UP LOCATION
         B     KVR005A
KVR005C  DS    0H
         LA    R9,16               SET BLANKS RETURN CODE
         B     KVR900              RETURN TO CALLER
KVR006   DS    0H
         LR    R5,R1               SAVE REG 1
         SR    R1,R4               GET NEW
         SR    R3,R1               DATA LENGTH
         LR    R4,R5               GET NEW LOCATION
         CLM   R2,B'0001',KVASLASH Q. COULD THIS BE COMMENT
         BNE   KVR020              A. NO, CONTINUE
         CLI   1(R4),C'*'          Q .WAS THIS A COMMENT
         BE    KVR008              A. YES, CONTINUE
         LA    R9,8                SAY INVALID KEYWORD
         B     KVR900              AND RETURN
KVR008   DS    0H                  VALIDATE COMMENT
         LA    R4,2(,R4)           BUMP OVER /*
         BCTR  R3,0                REDUCE COUNT
         BCTR  R3,0                REDUCE COUNT
KVR010   DS    0H
         CLI   0(R4),C'*'          Q. IS IT REALLY A COMMENT
         BE    KVR014              A. YES, CONTINUE
KVR012   DS    0H
         LA    R4,1(,R4)           BUMP ADDRESS
         BCT   R3,KVR010           LOOP THROUGH
         LA    R9,8                SET RETURN CODE
         B     KVR900              AND RETURN
KVR014   DS    0H
         CLI   1(R4),C'/'          Q. IS 2ND CHAR A SLASH
         BNE   KVR012              A. NO, CONTINUE SCAN FOR END
         LA    R4,2(,R4)           BUMP OVER */
         BCTR  R3,0                REDUCE COUNT
         BCTR  R3,0                REDUCE COUNT
         B     KVR005              AND CONTINUE SCAN
KVR020   DS    0H                  VALIDATE CHARACTERS FOUND
         ST    R4,KVWALOC          SAVE STRING ADDR
         ST    R4,KVWAKEY          SAVE STRING ADDR
         SR    R5,R5               CLEAR FOR KEYWORD COMPARE
         SR    R6,R6               CLEAR FOR KEYWORD COMPARE
         SR    R7,R7               CLEAR FOR KEYWORD COMPARE
KVR022   DS    0H
         IC    R5,KVLL0001         GET KEYWORD LEN
         EX    R5,KVCVR            Q. KEYWORD FOUND
         BE    KVR080              A. YES,CONTINUE
KVR023   DS    0H
         IC    R6,KVVN0001         GET COUNT OF VALUE ENTRIES
         LA    R14,0(R14,R5)       BUMP OVER VARIABLE KEYWORD
         LTR   R6,R6               Q. ANY MORE VALUES TO DO
         BZ    KVR028              A. NO, CONTINUE AS IS
KVR024   DS    0H
         IC    R7,KVVL0001         LENGTH OF VALUE KEYWORD
         LA    R14,KVVG0001(R7,R14) BUMP OVER VALUE ENTRY
         BCT   R6,KVR024           CONTINUE THRU ALL VALUES
KVR028   DS    0H
         LA    R14,KVKL0001+1(R14) BUMP OVER KEYWORD ENTRY
         CLC   KVAFFFF,KVDSVR      Q. LAST ENTRY
         BNE   KVR022              A. NO, CONTINUE SCAN
         LA    R9,8                SET RETURN CODE
         B     KVR900              AND RETURN
KVR080   DS    0H                  KEYWORD FOUND
         LA    R6,1(R5,R4)         GO TO NEXT BYTE BEYOND KEYWORD
         CLI   0(R6),C'('          Q. IS THIS DELIMITER
         BE    KVR082              A. YES, CONTINUE
         CLI   0(R6),C' '          Q. IS THIS DELIMITER
         BE    KVR082              A. YES, CONTINUE
         CLI   0(R6),C','          Q. IS THIS DELIMITER
         BE    KVR082              A. YES, CONTINUE
         LR    R9,R3               CURRENT LENGTH
         SR    R9,R5               MINUS KEYWORD EX LENGTH
         BCTR  R9,0                MINUS ONE
         LTR   R9,R9               Q. ANY DATA LEFT IN STRING
         BZ    KVR082              A. NO, JUST CONTINUE NORMALLY
         SR    R6,R6               CLEAR FOR LATER
         B     KVR023              ELSE LOOK FOR ANOTHER KEYWORD
KVR082   DS    0H
         SR    R6,R6               CLEAR WORK REG
         ICM   R6,B'0011',KVRA0001 GET EXIT ROUTINE ADDR
         BZ    KVR084              BRANCH IF NOT SPECIFIED
         SRDL  R6,12               GET REG INTO R6
         SLL   R6,2                X 4
         LA    R1,KVWASAV1         ADDR OF SAVE AREA
         L     R6,0(R6,R1)         GET CONTENTS OF RTN BASE REG
         SRL   R7,20               SHIFT TO LOWER END
         LA    R7,0(R7,R6)         GET ROUTINE ADDRESS
         ST    R7,KVWARTN          SAVE RTN ADDRESS
KVR084   DS    0H
         SR    R6,R6               CLEAR WORK REG
         ICM   R6,B'0011',KVRP0001 GET EXIT ROUTINE PARM
         BZ    KVR088              BRANCH IF NOT SPECIFIED
         SRDL  R6,12               GET REG INTO R6
         SLL   R6,2                X 4
         LA    R1,KVWASAV1         ADDR OF SAVE AREA
         L     R6,0(R6,R1)         GET CONTENTS OF PARM BASE REG
         SRL   R7,20               SHIFT TO LOWER END
         LA    R7,0(R7,R6)         GET PARM ADDRESS
         ST    R7,KVWAPRM          SAVE PARM ADDRESS
KVR088   DS    0H
         LA    R4,1(R5,R4)         GO TO NEXT BYTE BEYOND KEYWORD
         SR    R3,R5               REDUCE STRING COUNT
         BCTR  R3,0                REDUCE STRING COUNT
         CLI   0(R4),C'('          Q. VALUE(S) SPECIFIED
         BE    KVR110              A. YES, CONTINUE
         CLI   KVHV0001,0          Q. ANY VALUES REQUIRED
         BNE   KVR090              A. NO, JUST RETURN
         SR    R9,R9               SET ZERO RETURN CODE
         B     KVR900              AND RETURN
KVR090   DS    0H
         MVI   KVWAKWVA,0          CLEAR COUNT
         B     KVR172              GO PROCESS THIS KEYWORD
KVR110   DS    0H                  MOVE ALL VALUES TO LOCAL STORAGE
         SR    R1,R1               CLEAR FOR LATER
         MVI   KVWAKWVA,0          CLEAR COUNT
         BCTR  R3,0                REDUCE COUNT
         LA    R4,1(,R4)           BUMP TO NEXT BYTE
         CLI   0(R4),C')'          Q. NULL KEYWORDS
         BNE   KVR120              A. NO, CONTINUE NORMALLY
         B     KVR140              GO PROCESS NULL ENTRY
KVR120   DS    0H
         SR    R1,R1               CLEAR FOR LATER
         CLI   0(R4),C''''         Q. QUOTED STRING FOR THIS VALUE
         BNE   KVR124              A. NO, DONT SET FLAG
         OI    KVWAQUO,KVWAQQ      SAY IN QUOTE MODE
         LA    R4,1(,R4)           BUMP OVER QUOTE
         BCTR  R3,0                REDUCE STRING COUNT
KVR124   DS    0H
         LA    R2,KVWATMP          ADDR OF TEMP WORK AREA
         LR    R5,R4               SAVE OLD VALUES LOCATION
         ST    R5,KVWALOC          SAVE STRING ADDR
KVR130   DS    0H
         CLI   0(R4),C'('          Q. OPEN  PAREN
         BNE   KVR130A             A. NO, CONTINUE
         TM    KVWAQUO,KVWAQQ      Q. IN QOUTE QUOTE MODE ?
         BO    KVR130A             A. YES, CONTINUE
         OI    KVWAQUO,KVWAQP      SET PARENED QUOTE MODE
         L     R0,KVWAPRN          LOAD PAREN COUNT
         A     R0,=F'1'            ADD ONE TO PAREN COUNT
         ST    R0,KVWAPRN          STORE PAREN COUNT
         B     KVR134
KVR130A  DS    0H
         CLI   0(R4),C')'          Q. TERMINATING DELIMITER
         BNE   KVR130B             A. NO, CONTINUE
         TM    KVWAQUO,KVWAQQ      Q. IN QOUTE QUOTE MODE ?
         BO    KVR140              A. YES, CONTINUE
         TM    KVWAQUO,KVWAQP      Q. IN PAREN QUOTE MODE
         BNO   KVR140              A. NO, SAVE THIS KEYWORD
         L     R0,KVWAPRN          LOAD PAREN COUNT
         S     R0,=F'1'            SUB ONE
         BP    KVR134              IF POSITIVE CONTINUE
         NI    KVWAQUO,255-KVWAQP  TURN OFF PAREN QUOTE MODE
         B     KVR134              AND CONTINUE
KVR130B  DS    0H
         CLI   0(R4),C','          Q. COMMA DELIMITER
         BE    KVR140              A. YES, SAVE THIS KEYWORD
         CLI   0(R4),C''''         Q. END OF QUOTED STRING
         BNE   KVR134              A. NO, CONTINUE
         LA    R4,1(,R4)           BUMP ADDRESS
         BCTR  R3,0                REDUCE COUNT
         LA    R1,1(,R1)           ADD 1 FOR LATER STRING MOVE
         CLI   0(R4),C''''         Q. REALLY END OF STRING
         BE    KVR134              A. NO, NOT YET JUST DOUBLE QUOTES
         NI    KVWAQUO,255-KVWAQQ  RESET QUOTE MODE FLAG
         B     KVR130              AND CONTINUE
KVR134   DS    0H
         MVC   0(1,R2),0(R4)       SAVE THIS BYTE
         LA    R2,1(,R2)           BUMP WORK BYTE
         LA    R4,1(,R4)           GO TO NEXT BYTE
         BCT   R3,KVR130           CONTINUE SCAN
         LA    R9,4                SET RETURN CODE
         B     KVR900              AND RETURN
KVR140   DS    0H                  PROCESS FOUND VALUE
         CLI   KVWAQUO,0           Q. ARE WE IN QUOTE MODE
         BNE   KVR134              A. YES, IGNORE OTHER DELIMITERS
         LR    R6,R4               SAVE NEW ADDR
         SR    R6,R5               GET VALUE LENGTH
         SR    R6,R1               SUBTRACT ANY QUOTED STRING BYTES
         SR    R5,R5               CLEAR WORK REG
         ICM   R5,B'0001',KVWAKWVA GET WORK AREA COUNT
         BNZ   KVR146              BRANCH IF ALREADY SOME IN THERE
         LA    R8,KVWAKWVA+1       GET NEXT LOC ADDRESS
         B     KVR148              AND CONTINUE
KVR146   DS    0H                  LOOK FOR VALUES END LOCATION
         LA    R8,KVWAKWVA+1       GET START ADDRESS
         SR    R7,R7               CLEAR WORK REG
         ICM   R7,B'0001',KVWAKWVA+1   GET LENGTH OF LAST ONE
KVR147   DS    0H
         LA    R8,1(R7,R8)         GO TO NEXT SLOT
         ICM   R7,B'0001',0(R8)    GET NEXT LENGTH
         BCT   R5,KVR147            LOOP THRU
KVR148   DS    0H                  MOVE NEW VALUE IN NOW
         LTR   R6,R6               Q. NULL VALUE SPECIFIED
         BNZ   KVR150              A. NO, CONTINUE MVC
         STC   R6,0(,R8)           SAVE NULL VALUE LENGTH
         B     KVR160              AND UPDATE VALUES COUNT
KVR150   DS    0H                  MOVE NEW VALUES INTO WORKAREA
         L     R5,KVWALOC          RESTORE STRING ADDR
         STC   R6,0(,R8)           SAVE STRING LENGTH
         BCTR  R6,0                REDUCE COUNT
         EX    R6,KVM1VR           PERFORM THE MOVE
         TM    KVVT0001,X'FF'      Q. ANY VALIDATION REQUIRED
         BZ    KVR160              A. NO, JUST CONTINUE
         SR    R2,R2               CLEAR WORK REG
         ICM   R2,B'0001',KVVT0001 GET VALIDATION CODE
         SLL   R2,2                X 4
         B     *+0(R2)             GO TO VALIDATE IT
         B     KVR154              ALPHA
         B     KVR156              NUMERIC
         B     KVR158              ALPH/NUMERIC
KVR154   DS    0H                  ALPHA VALIDATION
         EX    R6,KVTR2VR          A. ALPHA FIELD
         BZ    KVR160              A. YES, CONTINUE
KVR155   DS    0H                  ERROR RETURN
         LA    R9,20               SET RC
         B     KVR900              AND RETURN
KVR156   DS    0H                  NUMERIC
         EX    R6,KVTR3VR          Q. NUMERIC FIELD
         BZ    KVR160              A. YES, CONTINUE
         B     KVR155              ELSE SET BAD RC
KVR158   DS    0H                  ALPHA/NUMERIC
         EX    R6,KVTR4VR          Q. ALPHA/NUMERIC
         BZ    KVR160              A. YES, CONTINUE
         B     KVR155              ELSE ERROR RETURN
KVR160   DS    0H
         CLI   KVVLL001,0          Q. WAS VALUE LEN VALIDATION REQUSTED
         BE    KVR169              A. NO, BYPASS LENGTH VALIDATION
         LA    R6,1(,R6)           RESTORE FULL LENGTH
         CLM   R6,B'0001',KVVLL001 Q. WAS LOW VALUE PRECEEDED
         BL    KVR168              A. YES, ERROR CONDITION
         CLM   R6,B'0001',KVVLH001 Q. WAS HIGH VALUE EXCEEDED
         BH    KVR168              A. YES, ERROR CONDITION
         B     KVR169              VALUE LENGTH PASSED VALIDATION
KVR168   DS    0H
         LA    R9,24               SET VALUE ERROR
         B     KVR900              AND RETURN
KVR169   DS    0H
         IC    R7,KVWAKWVA         GET CURRENT COUNT
         LA    R7,1(,R7)           ADD ONE
         STC   R7,KVWAKWVA         AND SAVE THE COUNT
         CLI   0(R4),C')'          Q. WAS IT ENDING DELIMETER
         BE    KVR170              A. YES, TERMINATE SCAN
         LA    R4,1(,R4)           BUMP OVER COMMA
         BCTR  R3,0                REDUCE STRING LENGTH
         B     KVR120              CONTINUE FOR MORE KEYWORDS
KVR170   DS    0H                  PROCESS ENDING DELIMITER
         LA    R4,1(,R4)           BUMP OVER )
         BCTR  R3,0                REDUCE COUNT
KVR172   DS    0H                  PROCESS ENDING DELIMITER
         SR    R5,R5               CLEAR WORK REG
         SR    R6,R6               CLEAR WORK REG
         ICM   R5,B'0001',KVHV0001 GET VALUE(S) COUNT HIGH NUMBER
         BNZ   KVR180              GO HERE IF NOT ZERO COUNT
         CLM   R5,B'0001',KVWAKWVA Q. WAS COUNT FOUND ALSO ZERO
         BE    KVR180              A. YES, CONTINUE WITHOUT ERROR YET
KVR174   DS    0H
         LA    R9,12               SAY COUNT EXCEEDED
         B     KVR900              AND RETURN
KVR180   DS    0H
         CLM   R5,B'0001',KVWAKWVA Q. HIGH COUNT EXCEEDED
         BL    KVR174              A. YES, ERROR AND GET OUT
         ICM   R5,B'0001',KVLV0001 GET LOW VALUE(S) COUNT
         BZ    KVR182              GET OUT IF ZERO COUNT
         CLM   R5,B'0001',KVWAKWVA Q. COUNT LESS THAN LOW VALUE
         BH    KVR174              A. YES, GET OUT WITH ERROR
KVR182   DS    0H
         ICM   R5,B'0011',KVAA0001 Q. IS THERE AN AREA PROVIDED
         BZ    KVR200              A. NO, JUST CONTINUE
         SR    R6,R6               CLEAR WORK REG
         SR    R7,R7               CLEAR WORK REG
         ICM   R6,B'0011',KVAA0001 GET WORKAREA ADDRESS
         SRDL  R6,12               GET REG NO. INTO R2
         SLL   R6,2                X 4
         LA    R1,KVWASAV1         ADDR OF SAVE AREA
         L     R6,0(R6,R1)         GET CONTENTS OF AREA BASE REG
         SRL   R7,20               SHIFT TO LOWER END
         LA    R6,0(R7,R6)         GET WORKAREA ADDRESS
         LA    R5,KVWAKWVA         GET MY AREA ADDRESS
         SR    R2,R2               CLEAR WORK REG
         IC    R2,KVWAKWVA         GET COUNT
         MVC   0(1,R6),KVWAKWVA    MOVE COUNT BYTE
         LA    R6,1(,R6)           BUMP OVER COUNT BYTE
         LA    R5,1(,R5)           BUMP OVER COUNT BYTE
KVR184   DS    0H
         MVC   0(1,R6),0(R5)       MOVE FIRST LENGTH BYTE
         LTR   R2,R2               WAS ANYTHING IN THE AREA
         BNZ   KVR186              YES, CONTINUE WITH MOVE
         MVI   KVWAKWVA,1          SAY SOMETHING WAS THERE
         B     KVR200              AND CONTINUE
KVR186   DS    0H
         SR    R7,R7               CLEAR FOR NEXT INSTR
         ICM   R7,B'0001',0(R5)    GET BYTE COUNT
         BNZ   KVR188              BRANCH FOR NON ZERO MOVE
         LA    R6,1(,R6)           BUMP OVER NULL BYTE
         LA    R5,1(,R5)           BUMP OVER NULL BYTE
         B     KVR194              AND CONTINUE
KVR188   DS    0H
         BCTR  R7,0                REDUCE BY ONE
         EX    R7,KVM2VR           MOVE DATA OVER
KVR190   DS    0H
         LA    R6,2(R7,R6)         BUMP OVER OUTPUT
         LA    R5,2(R7,R5)         BUMP OVER INPUT
KVR194   DS    0H
         BCT   R2,KVR184           COUNTINUE MOVE
KVR200   DS    0H                  SEE IF VALUES TO BE COMPARED
         SPACE
*        AT THIS POINT THE VALUES HAVE BEEN MOVED TO MY WORKAREA
*        AND TO THE USER WORK AREA IF AREA HAS BEEN SPECIFIED
*        IN THE KEYT MACRO
         SPACE
         SR    R2,R2               CLEAR WORK REG
         ICM   R2,B'0001',KVVN0001 Q. WERE ANY VALUES TO BE VERIFIED
*                                     OR WAS THERE WORK TO BE DONE
         BNZ   KVR220              A. YES, CONTINUE AS USUAL
         SR    R9,R9               CLEAR RC
         B     KVR900              AND RETURN TO CALLER
KVR220   DS    0H
         ST    R2,KVVNCNT          SAVE COUNT
         ST    R14,KVWAR14         SAVE KEYT ADDR
         LA    R5,KVWAKWVA+1       ADDR OF FOUND VALUES
         ST    R5,KVWASV           SAVE VALUES ADDR
         MVC   KVWASVC,KVWAKWVA    SAVE VALUES COUNT
         SR    R2,R2               CLEAR REG
         ICM   R2,B'0001',KVWASVC  Q. ANY VALUES FOUND
         BNZ   KVR230              A. YES, CONTINUE WITH COUNT
         MVI   KVWASVC,1           ELSE SAY AT LEAST ONE FOUND
KVR230   DS    0H
         L     R2,KVVNCNT          GET COUNT
         L     R14,KVWAR14         GET TABLE ADDR
         L     R5,KVWASV           GET ADDR OF CURRENT VALUE TO FIND
         SR    R1,R1               CLEAR WORK REG
         ICM   R1,B'0001',KVWASVC  GET COUNT
         BZ    KVR500              STOP SCAN IF NONE LEFT
         BCTR  R1,0                REDUCE COUNT
         STC   R1,KVWASVC          SAVE NEW COUNT
         ICM   R1,B'0001',0(R5)    GET LENGTH OF CURRENT VALUE
         LA    R1,1(R1,R5)         BUMP TO WHERE NEW VALUE WILL BE
         ST    R1,KVWASV           AND SAVE ADDRESS
         SR    R7,R7               CLEAR FOR LATER
         IC    R7,KVLL0001         GET KEYWORD LENGTH
         LA    R14,0(R14,R7)       BUMP OVER VARIABLE LENGTH KEYWORD
KVR240   DS    0H                  SCAN TABLE FOR THIS VALUE
         ST    R2,KVWAR2           SAVE CURRENT COUNT
         ICM   R7,B'0001',KVVL0001 LENGTH OF VALUE
         BZ    KVR300              IF NO KEYWORD VALUE HAS BEEN PUT
*                                  IN KEYT DONT LOOK FOR A MATCH, JUST
*                                  DO THE WORK IF ANY
         BCTR  R7,0                REDUCE FOR EX INSTR
         EX    R7,KVC2VR           Q. ARE VALUES EQUAL
         BE    KVR300              A. YES, GO SEE IF ANY WORK TO DO
KVR250   DS    0H
         L     R2,KVWAR2           RELOAD LOOP COUNTER
         SR    R1,R1               CLEAR WORK REG
         IC    R1,KVVL0001         GET LENGTH OF VALUE
         LA    R14,KVVG0001(R1,R14) GO TO NEXT ENTRY
         BCT   R2,KVR240           AND CONTINUE SCAN
         CLI   KVWAVF,X'FF'        Q. WERE VALUE(S) MATCHED IN KEYT
         BE    KVR260              A. YES, CONTINUE WITH NO ERRORS
         LA    R9,4                VALUE NOT FOUND RC
         B     KVR900              AND RETURN
KVR260   DS    0H
         MVI   KVWAVF,0            RESET VALUES FOUND FLAG
         B     KVR230              AND CONTINUE WITH OTHER VALUES
KVR300   DS    0H                  VALUE FOUND SEE IF ANY WORK TO DO
         MVI   KVWAVF,X'FF'        SAY VALUES FOUND
         TM    KVOP0001,X'FF'      Q. ANY OP CODES SPECIFIED
         BNZ   KVR320              A. YES, SEE IF SOME WORK TO DO
         B     KVR250              ELSE CONTINUE VALUES SCAN
KVR320   DS    0H                  DECODE OP CODES AND DO THEM
         LA    R6,KVVV0001         GET ADDR OF VALUES ENTRY
         LA    R1,KVWAFLN          ADDR OF SAVE TABLE
         ICM   R7,B'1111',KVWACN1  GET CURRENT COUNT OF VALUES ALREADY
*                                  PROCESSED
         BZ    KVR326              ADD THIS ONE IF NONE YET
KVR322   DS    0H
         C     R6,0(,R1)           Q. ALREADY PROCESSED THIS ENTRY
         BE    KVR250              A. YES BYPASS FURTHER PROCESSING
         LA    R1,4(,R1)           BUMP TABLE ADDRESS
         BCT   R7,KVR322           CONTINUE SCAN
KVR326   DS    0H
         ST    R6,0(,R1)           SAVE ADDRESS OF THIS ENTRY FOR LATER
*                                  COMPARE OF OTHER VALUES
         L     R7,KVWACN1          GET OLD COUNT
         LA    R7,1(,R7)           ADD 1 TO IT
         ST    R7,KVWACN1          AND SAVE IT
         SR    R6,R6               CLEAR WORK REG
         SR    R7,R7               CLEAR WORK REG
         ICM   R6,B'0011',KVTO0001 GET TO ADDRESS
         SRDL  R6,12               GET REG NO. INTO R2
         SLL   R6,2                X 4
         LA    R1,KVWASAV1         ADDR OF SAVE AREA
         L     R6,0(R6,R1)         GET CONTENTS OF TO BASE REG
         SRL   R7,20               SHIFT TO LOWER END
         LA    R2,0(R7,R6)         GET TO ADDREESS
         SR    R6,R6               CLEAR WORK REG
         SR    R7,R7               CLEAR WORK REG
         ICM   R6,B'0011',KVFR0001 GET FROM ADDRESS
         SRDL  R6,12               GET REG NO. INTO R6
         SLL   R6,2                X 4
         LTR   R6,R6               Q. WAS THIS SELF DEFINING TERM
         BZ    KVR330              A. YES, DONT LOAD NONEXISTENT BASE
         LA    R1,KVWASAV1         ADDR OF SAVE AREA
         L     R6,0(R6,R1)         GET CONTENTS OF FROM BASE REG
KVR330   DS    0H
         SRL   R7,20               SHIFT TO LOWER END
         LA    R8,0(R7,R6)         GET FROM ADDRESS
         SR    R1,R1               CLEAR WORK REG
         ICM   R1,B'0011',KVOL0001 GET LENGTH OF FIELD
         BCTR  R1,0                GET EX LENGTH
         SR    R7,R7               CLEAR WORK REG
         IC    R7,KVOP0001         GET OP CODE
         SLL   R7,2                MULTIPLY BY 4
         B     *+0(R7)             BRANCH TO OP CODE ROUTINE
         B     KVR360              N OP CODE SPECIFIED
         B     KVR380              O OP CODE SPECIFIED
         B     KVR400              M OP CODE SPECIFIED
         B     KVR420              X OP CODE SPECIFIED
KVR360   DS    0H                  N OP CODE
         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING
         BNZ   KVR366              A. NO, CONTINUE STOR-STOR OPERATION
         EX    R8,KVOPNI           ISSUE THE AND OP CODE STOR-IMED
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR366   DS    0H                  N OP CODE
         EX    R1,KVOPN            ISSUE THE AND OP CODE STOR-STOR
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR380   DS    0H                  O OP CODE
         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING
         BNZ   KVR386              A. NO, CONTINUE STOR-STOR OPERATION
         EX    R8,KVOPOI           ISSUE THE OR OP CODE STOR-IMED
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR386   DS    0H                  N OP CODE
         EX    R1,KVOPO            ISSUE THE OR OP CODE STOR-STOR
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR400   DS    0H                  M OP CODE
         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING
         BNZ   KVR406              A. NO, CONTINUE STOR-STOR OPERATION
         EX    R8,KVOPMI           ISSUE THE MVC OP CODE STOR-IMED
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR406   DS    0H                  N OP CODE
         EX    R1,KVOPM            ISSUE THE MVC OP CODE STOR-STOR
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR420   DS    0H                  N OP CODE
         LTR   R6,R6               Q. WAS FROM FIELD SELF DEFINING
         BNZ   KVR426              A. NO, CONTINUE STOR-STOR OPERATION
         EX    R8,KVOPXI           ISSUE THE XI OP CODE STOR-IMED
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR426   DS    0H                  N OP CODE
         EX    R1,KVOPX            ISSUE THE XC OP CODE STOR-STOR
         B     KVR250              AND CONTINUE WITH OTHER VALUES
KVR500   DS    0H                  ALL VALUES SCANNED
         SR    R9,R9               CLEAR RC
         B     KVR900              AND RETURN
KVR900   DS    0H                  RETURN POINT
         LTR   R9,R9               Q . RC=00
         BNZ   KVR930              A. NO, CONTINUE RETURN TO CALLER
         ICM   R1,B'1111',KVWARTN  Q. RTN TO CALL
         BZ    KVR910              A. NO, CONTINUE NO CALL
         MVC   KVWASKIP(KVRRLEN),KVRSKIP SET UP REG RELOAD ROUTINE
         LR    R15,R1              GET RTN ADDR
         LA    R0,KVWAKWVA         GET STRING ADDR
         ST    R13,KVWASAV+4       SAVE CALLERS SAVE AREA ADDR
         LA    R13,KVWASAV         MY SAVE AREA
         L     R1,KVWAPRM          GET PARM DATA ADDR
         STM   R0,R15,KVWASAV9     SAVE REGS
         LA    R14,KVWASKIP        LOAD RETURN ADDRESS
         LM    R2,R12,KVWASAV1+(4*2) LOAD CALLING REGS
         BR    R15                 CALL USERS ROUTINE
KVR900A  DS    0H
         L     R13,KVWASAV+4       SAVE CALLERS SAVE AREA ADDR
         LTR   R9,R15              WAS RETURN CODE ZERO?
         BNZ   KVR930              NO, RETURN TO CALLER
KVR910   DS    0H
         MVI   KVWAFL1,1           SAY AT LEAST 1 GOOD FIND
         B     KVR004              GO DO MORE NOW
KVR930   DS    0H
         L     R4,KVWALOC          SAVE STRING LOCATION
         L     R5,KVWAKEY          SAVE KEYWORD LOCATION
         CLI   KVWAFL1,0           Q. ANY GOOD FINDS
         BE    KVR950              A. NO, LEAVE RC AS IS
         C     R9,KVASIX           Q. WAS RC=16
         BNE   KVR950              A. NO, LEAVE RC AS IS
         SR    R9,R9               SET ZERO RC
KVR950   DS    0H
         LR    R1,R10              GET WORKAREA ADDRESS
         LA    R0,KVWALNTH         GET WORKAREA LENGTH
         FREEMAIN R,LV=(0),A=(1)   FREE WORKAREA
         LR    R15,R9              SETUP RETURN CODE
         LM    R6,R12,11*4(R13)    RESTORE REGS
         LR    R0,R5               PUT IN KEYWORD LOCATION
         LR    R1,R4               PUT IN STRING LOCATION
         LM    R2,R5,7*4(R13)      RESTORE OTHER REGS
         L     R14,3*4(R13)        RESTORE RETURN REG
         BR    R14                 RETURN TO CALLER
         EJECT ,
KVRSKIP  DS    0F
         B     KVRRELD-*(,R14)
KVRSAV9  DC    16F'0'
KVRRELD  LM    R0,R14,4(R14)
KVRRET   B     KVR900A
KVRRLEN  EQU   *-KVRSKIP
         EJECT ,
KVOPN    NC    0(*-*,R2),0(R8)
KVOPNI   NI    0(R2),*-*
KVOPO    OC    0(*-*,R2),0(R8)
KVOPOI   OI    0(R2),*-*
KVOPM    MVC   0(*-*,R2),0(R8)
KVOPMI   MVI   0(R2),*-*
KVOPX    XC    0(*-*,R2),0(R8)
KVOPXI   XI    0(R2),*-*
KVCVR    CLC   KVKV0001(*-*),0(R4)
KVTR1VR  TRT   0(*-*,R4),KTVRT1    NON-BLANK TEST
KVTR2VR  TRT   1(*-*,R8),KTVRT2    ALPHA TEST
KVTR3VR  TRT   1(*-*,R8),KTVRT3    NUMERIC TEST
KVTR4VR  TRT   1(*-*,R8),KTVRT4    ALPHA/NUMERIC NATIONAL TEST
KVC2VR   CLC   KVVV0001(*-*),1(R5)
KVM1VR   MVC   1(*-*,R8),KVWATMP
KVM2VR   MVC   1(*-*,R6),1(R5)
         EJECT ,
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
KTVRT1   DC    X'00000000000000000000000000000000' - 00
         DC    X'00000000000000000000000000000000' - 10
         DC    X'00000000000000000000000000000000' - 20
         DC    X'00000000000000000000000000000000' - 30
         DC    X'000000000000000000004A4B4C4D4E4F' - 40
         DC    X'500000000000000000005A5B5C5D5E5F' - 50
         DC    X'6061000000000000000000006C6D6E6F' - 60
         DC    X'0000000000000000007D7A7B7C407E7F' - 70
         DC    X'00C1C2C3C4C5C6C7C8C9000000000000' - 80
         DC    X'00D1D2D3D4D5D6D7D8D9000000000000' - 90
         DC    X'0000E2E3E4E5E6E7E8E9000000000000' - A0
         DC    X'00000000000000000000000000000000' - B0
         DC    X'00C1C2C3C4C5C6C7C8C9000000000000' - C0
         DC    X'00D1D2D3D4D5D6D7D8D9000000000000' - D0
         DC    X'0000E2E3E4E5E6E7E8E9000000000000' - E0
         DC    X'F0F1F2F3F4F5F6F7F8F9000000000000' - F0
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         EJECT ,
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
KTVRT2   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 0
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 1
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 2
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 3
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 4
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 5
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 6
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 7
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 8
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 9
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B
         DC    X'FF000000000000000000FFFFFFFFFFFF' - C
         DC    X'FF000000000000000000FFFFFFFFFFFF' - D
         DC    X'FFFF0000000000000000FFFFFFFFFFFF' - E
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - F
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         EJECT ,
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
KTVRT3   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 00
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 10
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 20
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 30
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 40
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 50
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 60
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 70
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 80
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 90
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A0
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B0
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - C0
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - D0
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - E0
         DC    X'00000000000000000000FFFFFFFFFFFF' - F0
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         EJECT ,
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
KTVRT4   DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 00
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 10
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 20
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 30
         DC    X'FFFFFFFFFFFFFFFFFFFFFF00FFFFFFFF' - 40
         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF' - 50
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 60
         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF' - 70
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 80
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - 90
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - A0
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' - B0
         DC    X'FF000000000000000000FFFFFFFFFFFF' - C0
         DC    X'FF000000000000000000FFFFFFFFFFFF' - D0
         DC    X'FFFF0000000000000000FFFFFFFFFFFF' - E0
         DC    X'00000000000000000000FFFFFFFFFFFF' - F0
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         EJECT ,
*---------------------------------------------------------------------*
*        CONSTANTS USED BY KEYWORD PARSE ROUTINE                      *
*---------------------------------------------------------------------*
KVAFFFF  DC    X'FFFF'
KVASIX   DC    F'16'
KVA256   DC    F'256'
KVAX00   DC    X'00'
KVASLASH DC    C'/'
         EJECT ,
*---------------------------------------------------------------------*
*        LITERAL POOL                                                 *
*---------------------------------------------------------------------*
         SPACE ,
         LTORG ,
         EJECT ,
*---------------------------------------------------------------------*
*                CONSTANTS AND EQUATES                                *
*---------------------------------------------------------------------*
         SPACE ,
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT ,
*---------------------------------------------------------------------*
*        PATCH AREA                                                   *
*---------------------------------------------------------------------*
         SPACE ,
         DC    32X'0'
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
KVWAVR   DSECT ,                   START OF PARSE WORK AREA
KVWASAV  DS    18F                 SAVE AREA TO CALL RTN
KVWAVF   DS    X                   VALUES FOUND FLAG
KVWAQUO  DS    X                   QUOTED STRING MODE FLAG
KVWAQQ   EQU   B'10000000'         QUOTED QUOTED STRING
KVWAQP   EQU   B'01000000'         PARENED QUOTED STRING
KVWAPRN  DS    F                   COUNT OF PAREN NESTING
KVWASV   DS    F                   ADDR OF VALUES FOUND
KVWARTN  DS    F                   ADDRESS OF RTN TO CALL
KVWAPRM  DS    F                   ADDRESS OF RTN PARM
KVWALOC  DS    F                   LOCATION OF INPUT STRING
KVWAR14  DS    F                   SAVE AREA FOR REG 14
KVWAR2   DS    F                   SAVE AREA FOR REG 2
KVVNCNT  DS    F                   VALUE COUNT SAVEAREA
KVWAKEY  DS    F                   ADDRESS OF CURRENT KEYWORD IN STRING
KVWACN1  DS    F                   COUNT OF VALUE ADDRS IN KVWAFLN
KVWASVC  DS    X                   COUNT OF VALUES FOUND
KVWAKWVA DS    512X                WORKAREA FOR VALUE MOVE
KVWATMP  DS    256X                WORKAREA FOR TEMP VALUE MOVE
KVWACLR  EQU   *-KVWAVR            LENGTH OF WORKAREA TO CLEAR
KVWAFL1  DS    X                   FLAG TO SHOW SOME GOOD WORDS FOUND
KVWASAV1 DS    16F                 SAVE AREA FOR CALLERS REGS
KVWASKIP DS    F                   REGISTER RELOAD ROUTINE
KVWASAV9 DS    16F                 REGISTER RELOAD SAVE AREA
KVWARELD DS    F                   REGISTER RELOAD
KVWARET  DS    F                   REGISTER RELOAD RETURN
KVWAFLN  DS    15XL4               SAVEAREA FOR MAX COUNT OF FIELDN'S
KVWALNTH EQU   *-KVWAVR
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
KVDSVR   DSECT
KVLL0001 DS    AL1                 LENGTH OF KEY-1
KVRA0001 DS    SL2                 RTN ADDRESS
KVRP0001 DS    SL2                 RTN PARM
KVAA0001 DS    SL2                 AREA ADDRESS
KVVLL001 DS    AL1                 VALUE LENGTH LOW
KVVLH001 DS    AL1                 VALUE LENGTH HIGH
KVLV0001 DS    AL1                 VALUE COUNT LOW
KVHV0001 DS    AL1                 VALUE COUNT HIGH
KVVT0001 DS    XL1                 VALUE TYPE
KVTA0001 EQU   X'01'               ALPHA TYPE
KVTN0001 EQU   X'02'               NUMERIC TYPE
KVTB0001 EQU   X'03'               ALPHA OR NUMERIC TYPE
KVVN0001 DS    AL1                 COUNT OF VALUE ENTRIES
KVKL0001 EQU   *-KVLL0001          LENGTH OF TABLE ENTRY MINUS KEYWORD
KVKV0001 DS    C                   KEYWORD
KVVL0001 DS    AL1                 VALUE LENGTH
KVOP0001 DS    XL1                 OP CODE
KVVA0001 EQU   X'01'               N  OP CODE
KVVO0001 EQU   X'02'               O  OP CODE
KVVM0001 EQU   X'03'               M  OP CODE
KVVX0001 EQU   X'04'               X  OP CODE
KVTO0001 DS    SL2                 TO ADDRESS
KVFR0001 DS    SL2                 FROM ADDRESS
KVOL0001 DS    AL2                 LENGTH OF TO FIELD
KVVG0001 EQU   *-KVVL0001          ENTRY LENGTH MINUS VALUE CONSTANT
KVVV0001 DS    C                   VALUE CONSTANT
KVLA0001 EQU   *,2                 LAST ENTRY =X'FFFF'
         END
./ ADD NAME=KEYT     0100-88137-88153-1457-00326-00326-00000-GIBSON
         MACRO
&NAME    KEYT  &KEYWORD,&RTN,&AREA,&TYPE,&VALCNT,&FIELD1=,&FIELD2=,    X
               &FIELD3=,&FIELD4=,&FIELD5=,&FIELD6=,&FIELD7=,           X
               &FIELD8=,&FIELD9=,&FIELD10=,&FIELD11=,&FIELD12=,        X
               &FIELD13,&FIELD14=,&FIELD15=,&END=,                     X
               &LEN=
         LCLA  &KVVN,&CNTR1,&KVLL,&CNTR2
         LCLC  &P1,&P2,&P3,&P4,&LEN1,&LEN2,&KEYWORK
         AIF   ('&SYSLIST(1)' NE '').KVRM020 ONLY REQUIRED KEYWORD
         MNOTE 8,'1ST PARM MISSING AND IS REQUIRED'
         MEXIT
.KVRM020 ANOP
&KEYWORK SETC  '&KEYWORD'
         AIF   ('&KEYWORK'(1,1) NE '''' OR                             X
               '&KEYWORK'(K'&KEYWORD,1) NE '''').KW1
&KEYWORK SETC  '&KEYWORK'(2,K'&KEYWORK-2)
.KW1     ANOP
&KVLL    SETA  K'&KEYWORK-1        SET KEYWORD LENGTH-1
&NAME    DC    AL1(&KVLL)          KEY LENGTH-1
         AIF   ('&SYSLIST(2)' NE '').KVRM030 IS EXIT RTN SPECIFIED
         DC    SL2(0)              EXIT RTN NOT SPECIFIED
         DC    SL2(0)              EXIT PARM NOT SPECIFIED
         AGO   .KVRM049
.KVRM030 ANOP
         DC    SL2(&SYSLIST(2,1))  EXIT ROUTINE ADDR
         AIF   (N'&SYSLIST(2) NE 1).KVRM046
         DC    SL2(0)              NO RTN PARM INFO REQUESTED
         AGO   .KVRM049
.KVRM046 ANOP
         DC    SL2(&SYSLIST(2,2))  EXIT RTN PARM SPECIFIED
.KVRM049 ANOP
         AIF   ('&SYSLIST(3)' NE '').KVRM050
         DC    SL2(0)              NO AREA SPECIFIED
         AGO   .KVRM060
.KVRM050 ANOP
         DC    SL2(&AREA)          AREA ADDR SPECIFIED
.KVRM060 ANOP
         AIF   ('&LEN' NE '').KVRM070
         DC    AL1(0)              VALUE LENGTH LOW DEFAULT
         DC    AL1(0)              VALUE LENGTH HIGH DEFAULT
         AGO   .KVRM078
.KVRM070 ANOP
&LEN1    SETC  '&LEN(1)'
&LEN2    SETC  '&LEN(2)'
         AIF   ('&LEN1' NE '').KVRM074
         DC    AL1(1)              VALUE LENGTH LOW IMPLIED
         AGO   .KVRM077
.KVRM074 ANOP
         DC    AL1(&LEN1)          VALUE LENGTH LOW SPECIFIED
.KVRM076 ANOP
         AIF   ('&LEN2' NE '').KVRM077
         DC    AL1(&LEN1)          VALUE LENGTH HIGH SPECIFIED
         AGO   .KVRM078
.KVRM077 ANOP
         DC    AL1(&LEN2)          VALUE LENGTH HIGH SPECIFIED
.KVRM078 ANOP
         AIF   (N'&SYSLIST(5) NE 0).KVRM090 VALUE COUNT SPECIFIED
         DC    AL1(1)              VALUE COUNT LOW DEFAULT
         DC    AL1(1)              VALUE COUNT HIGH DEFAULT
         AGO   .KVRM110
.KVRM090 ANOP
         AIF   (N'&SYSLIST(5) NE 1).KVRM094
         AIF   ('&SYSLIST(5,1)' EQ '(').KVRM094
         DC    AL1(0)              VALUE COUNT LOW IMPLIED
         DC    AL1(&VALCNT)        VALUE COUNT HIGH SPECIFIED
         AGO   .KVRM110
.KVRM094 ANOP
         AIF   ('&SYSLIST(5,1)' EQ ')').KVRM096
         DC    AL1(&SYSLIST(5,1))  VALUE COUNT LOW
         DC    AL1(&SYSLIST(5,2))  VALUE COUNT HIGH
         AGO   .KVRM110
.KVRM096 ANOP
         DC    AL1(&SYSLIST(5,1))  VALUE COUNT HIGH
.KVRM110 ANOP
         AIF   ('&SYSLIST(4)' NE '').KVRM120
         DC    X'00'               NO VALUE VALIDATION REQUESTED
         AGO   .KVRM160
.KVRM120 ANOP
         AIF   ('&SYSLIST(4)' NE 'ALPHA').KVRM130
         DC    X'01'               ALPHA VALIDATION REQUESTED
         AGO   .KVRM160
.KVRM130 ANOP
         AIF   ('&SYSLIST(4)' NE 'NUMERIC').KVRM140
         DC    X'02'               NUMERIC VALIDATION REQUESTED
         AGO   .KVRM160
.KVRM140 ANOP
         AIF   ('&SYSLIST(4)' NE 'ALPHANUM').KVRM150
         DC    X'03'               ALPHANUM VALIDATION REQUESTED
         AGO   .KVRM160
.KVRM150 ANOP
         MNOTE 8,'INVALID VALIDATION TYPE SPECIFIED  &TYPE'
.KVRM160 ANOP
         AIF   ('&FIELD1' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD2' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD3' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD4' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD5' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD6' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD7' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD8' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD9' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD10' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD11' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD12' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD13' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD14' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
         AIF   ('&FIELD15' EQ '' ).KVRM166
&KVVN    SETA  &KVVN+1
.KVRM166 ANOP
         DC    AL1(&KVVN)          COUNT OF FIELDS SPECIFIED
         DC    C'&KEYWORK'         REQUESTED KEYWORD
         AGO   .KVRM300
.KVRM180 ANOP
         AIF   ('&END' NE 'YES').KVRM190
         DC    X'FFFF'             END OF TABLE INDICATIOR
.KVRM190 ANOP
         MEXIT
.KVRM300 ANOP
         AIF   ('&FIELD1' EQ '').KVRM180
&CNTR1   SETA  1
&P1      SETC  '&FIELD1(1)'
&P2      SETC  '&FIELD1(2)'
&P3      SETC  '&FIELD1(3)'
&P4      SETC  '&FIELD1(4)'
         AGO   .KVRM500
.KVRM320 ANOP
         AIF   ('&FIELD2' EQ '').KVRM180
&CNTR1   SETA  2
&P1      SETC  '&FIELD2(1)'
&P2      SETC  '&FIELD2(2)'
&P3      SETC  '&FIELD2(3)'
&P4      SETC  '&FIELD2(4)'
         AGO   .KVRM500
.KVRM330 ANOP
         AIF   ('&FIELD3' EQ '').KVRM180
&CNTR1   SETA  3
&P1      SETC  '&FIELD3(1)'
&P2      SETC  '&FIELD3(2)'
&P3      SETC  '&FIELD3(3)'
&P4      SETC  '&FIELD3(4)'
         AGO   .KVRM500
.KVRM340 ANOP
         AIF   ('&FIELD4' EQ '').KVRM180
&CNTR1   SETA  4
&P1      SETC  '&FIELD4(1)'
&P2      SETC  '&FIELD4(2)'
&P3      SETC  '&FIELD4(3)'
&P4      SETC  '&FIELD4(4)'
         AGO   .KVRM500
.KVRM350 ANOP
         AIF   ('&FIELD5' EQ '').KVRM180
&CNTR1   SETA  5
&P1      SETC  '&FIELD5(1)'
&P2      SETC  '&FIELD5(2)'
&P3      SETC  '&FIELD5(3)'
&P4      SETC  '&FIELD5(4)'
         AGO   .KVRM500
.KVRM360 ANOP
         AIF   ('&FIELD6' EQ '').KVRM180
&CNTR1   SETA  6
&P1      SETC  '&FIELD6(1)'
&P2      SETC  '&FIELD6(2)'
&P3      SETC  '&FIELD6(3)'
&P4      SETC  '&FIELD6(4)'
         AGO   .KVRM500
.KVRM370 ANOP
         AIF   ('&FIELD7' EQ '').KVRM180
&CNTR1   SETA  7
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM380 ANOP
         AIF   ('&FIELD8' EQ '').KVRM180
&CNTR1   SETA  8
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM390 ANOP
         AIF   ('&FIELD9' EQ '').KVRM180
&CNTR1   SETA  9
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM3A0 ANOP
         AIF   ('&FIELD10' EQ '').KVRM180
&CNTR1   SETA  10
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM3B0 ANOP
         AIF   ('&FIELD11' EQ '').KVRM180
&CNTR1   SETA  11
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM3C0 ANOP
         AIF   ('&FIELD12' EQ '').KVRM180
&CNTR1   SETA  12
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM3D0 ANOP
         AIF   ('&FIELD13' EQ '').KVRM180
&CNTR1   SETA  13
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM3E0 ANOP
         AIF   ('&FIELD14' EQ '').KVRM180
&CNTR1   SETA  14
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM3F0 ANOP
         AIF   ('&FIELD15' EQ '').KVRM180
&CNTR1   SETA  15
&P1      SETC  '&FIELD7(1)'
&P2      SETC  '&FIELD7(2)'
&P3      SETC  '&FIELD7(3)'
&P4      SETC  '&FIELD7(4)'
         AGO   .KVRM500
.KVRM500 ANOP
         AIF   ('&P1' NE '').KVRM720
         DC    X'00'               NO VALUE IS SPECIFIED
         AGO   .KVRM730
.KVRM720 ANOP
&CNTR2   SETA  K'&P1
         DC    AL1(&CNTR2)         LENGTH OF VALUE SPECIFIED
.KVRM730 ANOP
         AIF   ('&P2' EQ '').KVRM900
         AIF   ('&P2' NE 'N').KVRM750
         DC    X'01'               N  OP CODE
         AGO   .KVRM800
.KVRM750 ANOP
         AIF   ('&P2' NE 'O').KVRM760
         DC    X'02'               O  OP CODE
         AGO   .KVRM800
.KVRM760 ANOP
         AIF   ('&P2' NE 'M').KVRM770
         DC    X'03'               M  OP CODE
         AGO   .KVRM800
.KVRM770 ANOP
         AIF   ('&P2' NE 'X').KVRM780
         DC    X'04'               X OP CODE
         AGO   .KVRM800
.KVRM780 ANOP
         MNOTE 8,'INVALID OP SPECIFIED IN FIELDN='
         MEXIT
.KVRM800 ANOP
         AIF   ('&P3' NE '').KVRM820
         MNOTE 8,'TO ADDR REQ AND NOT SPECIFIED IN FIELDN='
         MEXIT
.KVRM820 ANOP
         DC    SL2(&P3)            TO ADDRESS
         AIF   ('&P4' NE '').KVRM830
         MNOTE 8,'FROM ADDR REQ AND NOT SPECIFIED IN FIELDN='
         MEXIT
.KVRM830 ANOP
         DC    SL2(&P4)            FROM ADDRESS
         DC    AL2(L'&P3)          LENGTH OF TO ADDRESS
.KVRM834 ANOP
         AIF   ('&P1' NE '').KVRM840
         AGO   .KVRM950
.KVRM840 ANOP
         DC    C'&P1'              VALUE CONSTANT
         AGO   .KVRM950
.KVRM900 ANOP
         AIF   ('&P3' EQ '').KVRM920
         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'
         MEXIT
.KVRM920 ANOP
         AIF   ('&P4' EQ '').KVRM930
         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'
         MEXIT
.KVRM930 ANOP
         DC    X'00'               NO OP CODE
         DC    SL2(0)              NO TO ADDR
         DC    SL2(0)              NO FROM ADDR
         DC    SL2(0)              NO TO LENGTH
.KVRM950 ANOP
         AIF   (&CNTR1 EQ 1).KVRM320
         AIF   (&CNTR1 EQ 2).KVRM330
         AIF   (&CNTR1 EQ 3).KVRM340
         AIF   (&CNTR1 EQ 4).KVRM350
         AIF   (&CNTR1 EQ 5).KVRM360
         AIF   (&CNTR1 EQ 6).KVRM370
         AIF   (&CNTR1 EQ 7).KVRM380
         AIF   (&CNTR1 EQ 8).KVRM390
         AIF   (&CNTR1 EQ 9).KVRM3A0
         AIF   (&CNTR1 EQ 10).KVRM3B0
         AIF   (&CNTR1 EQ 11).KVRM3C0
         AIF   (&CNTR1 EQ 12).KVRM3D0
         AIF   (&CNTR1 EQ 13).KVRM3E0
         AIF   (&CNTR1 EQ 14).KVRM3F0
         AIF   (&CNTR1 EQ 15).KVRM180
         MEND
./ ADD NAME=MSGENT   0100-88137-88153-1457-00030-00030-00000-GIBSON
         MACRO
         MSGENT
*---------------------------------------------------------------------*
*                                                                     *
*        MESSAGE TABLE ENTRY DSECT                                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
MSGENT   DSECT
ENTLEN   DS    H                       LENGTH OF THIS ENTRY
ENTDESC  DS    XL2                     DSEC CODE
ENTROUT  DS    XL2                     ROUTE CODE
ENTFLAG  DS    XL1                     FLAGS
DESCFLG  EQU   B'10000000'             DESC CODE SPECIFIED
ROUTFLG  EQU   B'01000000'             ROUTE CODE SPECIFIED
CMMDFLG  EQU   B'00100000'             COMMAND SPECIFED
*        EQU   B'00010000'             UNUSED
JBNMFLG  EQU   B'00001000'             JOBNAME SPECIFIED
DELFLG   EQU   B'00000100'             DELETE SPECIFIED
LISTFLG  EQU   B'00000010'             LIST SPECIFIED
*        EQU   B'00000001'             UNUSED
ENTFLG2  DS    XL1                     FLAGS UNUSED
ENTJBNM  DS    CL8                     JOBNAME IF SPECIFIED
ENTHDRLN EQU   *-MSGENT                LENGTH OF FIXED HDR
ENTLID   DS    XL1                     MESSAGE LENGTH
ENTID    DS    CL127                   MESSAGE
         DS    XL1                     NUMBER OF COMMANDS
         DS    XL1                     COMMAND LENGTH
         DS    CL127                   COMMAND
         MEND
./ ADD NAME=WTOR     0100-88137-88153-1457-00130-00130-00000-GIBSON
//WTOR     JOB  TS,GIBSON,MSGCLASS=X,COND=(4,LT),REGION=4096K,
//         CLASS=Y
//ASMBL    EXEC ASMFCL,PARM.ASM='OBJ,NODECK',
//         PARM.LKED='XREF,NCAL,LIST'
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT2   DD SPACE=(CYL,(50,10))
//SYSUT3   DD SPACE=(CYL,(50,10))
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
***********************************************************************
*   THIS PROGRAM WAS WRITTEN TO TEST IEAVMXIT. IT WILL TAKE WHATEVER  *
*   MESSAGE IS SPECIFIED AS A PARM AND PUT IT OUT AS A WTO IF         *
*   PARM='WTO=MSG' IS SPECIFIED OR AS A WTOR IF                       *
*   PARM='WTOR=MSG' IS SPECIFIED.                                     *
*                                                                     *
*  FOLLOWING IS JCL USED TO INVOKE:                                   *
*  //SYSTEST  JOB  TS,GIBSON,MSGCLASS=X,CLASS=Y                       *
*  //TEST1    EXEC PGM=WTOR,PARM='WTOR=SYSTEM TESTING'                *
*  //STEPLIB  DD   DSN=GIBSON.LOADLIB,DISP=SHR                        *
***********************************************************************
         TITLE 'WTOR'
WTOR     CSECT                     BEGINING OF PROGRAM
         USING *,R12               SET UP BASE REG
         SAVE  (14,12),,WTOR..&SYSDATE       SAVE REGESTERS
         LR    R12,R15             SET UP ADDRESSABILITY
         LR    R2,R13              SAVE ADDR OF PREVIOUS SAVEAREA
         LA    R13,SAVEAREA        POINT TO CURRENT SAVEAREA
         ST    R13,8(R2)           LINK PREVIOUS SAVEAREA TO SAVEAREA
         ST    R2,4(R13)           LINK SAVEAREA TO PREVIOUS SAVEAREA
         L     R1,0(,R1)           LOAD ADDR OF PARM INTO R1
         CLC   0(2,R1),=H'0'       PARM LENGTH = 0?
         BE    INVPARM             YES, ISSUE INVALID PARM WTO
DOPARM   DS    0H
         CLC   0(2,R1),=H'5'       COMPARE LENGTH OF TO MAX LENGTH
         BL    INVPARM             INVALID PARM LENGTH
         CLC   =C'WTO=',2(R1)      WTO PARAM
         BE    DOWTO               YES, BRANCH TO PROCESS
         CLC   =C'WTOR=',2(R1)     WTOR PARAM
         BE    DOWTOR              YES, BRANCH TO PROCESS
         BNE   INVPARM             NO, INVALID PARAMTER
*
DOWTO    DS    0H
         LH    R2,0(,R1)
         SH    R2,=H'4'
         BNP   INVPARM
         CH    R2,=H'120'
         BH    INVPARM
         BCTR  R2,0
         LA    R3,6(,R1)
         EX    R2,MVCWTO
*MVCWTO  MVC   WTOL+4(*-*),0(R3)
         WTO   MF=(E,WTOL)
         B     RETURN
MVCWTOR  MVC   WTORL+12(*-*),0(R3)
MVCWTO   MVC   WTOL+4(*-*),0(R3)
****
DOWTOR   DS    0H
         LH    R2,0(,R1)
         SH    R2,=H'5'
         BNP   INVPARM
         CH    R2,=H'120'
         BH    INVPARM
         BCTR  R2,0
         LA    R3,7(,R1)
         EX    R2,MVCWTOR
*MVCWTOR MVC   WTORL+12(*-*),0(R3)
*MVCENT  MVC   ENTID(*-*),0(R3)
         MVI   WTORECB,0           CLEAR OUT ECB FOR REPLY
         WTOR  MF=(E,WTORL)
         WAIT  1,ECB=WTORECB       WAIT FOR OPERATOR TO REPLY
         B     RETURN
****
*
INVPARM  DS    0H
         WTO   'PARAMETER MISSING OR INVALLID, EXECUTION ENDS',        X
               ROUTCDE=(14),DESC=(7)
         B     RETURN
RETURN   DS    0H
         L     R13,SAVEAREA+4      RESTORE R13
         SLR   R15,R15
         RETURN (14,12),T,RC=(15)  RETURN TO MVS
         EJECT ,
*---------------------------------------------------------------------*
*        WORK AREA AND CONSTANTS                                      *
*---------------------------------------------------------------------*
         SPACE ,
SAVEAREA DS    18F                 SAVEAREA
WTORECB  DC    F'0'                ECB FOR WTOR
WTORRPLY DS    CL80                REPLY FOR WTOR
WTORL    WTOR  '                                                       X
                                                                       X
                   ',WTORRPLY,80,WTORECB,ROUTCDE=(14),DESC=(7),MF=L
WTOL     WTO   '                                                       X
                                                                       X
                   ',ROUTCDE=(14),DESC=(7),MF=L
         EJECT ,
*---------------------------------------------------------------------*
* REGISTER EQUATES                                                    *
*---------------------------------------------------------------------*
         SPACE ,
R0       EQU   0                       WORK REGISTER
R1       EQU   1                       ADDRESS OF SUPPLIED PARAMETERS
R2       EQU   2                       ADDRESS OF EXIT PARAMETERS
R3       EQU   3                       WORK REGISTER
R4       EQU   4                       WORK REGISTER
R5       EQU   5                       WORK REGISTER
R6       EQU   6                       WORK REGISTER
R7       EQU   7                       WORK REGISTER
R8       EQU   8                       WORK REGISTER
R9       EQU   9                       POINTER TO TABLE ENTRY
R10      EQU   10                      BASE REGISTER FOR WORK AREA
R11      EQU   11                      2ND BASE REGISTER
R12      EQU   12                      BASE REGISTER
R13      EQU   13                      SAVE AREA POINTER
R14      EQU   14                      RETURN ADDRESS
R15      EQU   15                      ENTRY ADDRESS
         EJECT ,
*---------------------------------------------------------------------*
* LIERTAL POOL                                                        *
*---------------------------------------------------------------------*
         SPACE ,
         LTORG ,
         END                     , END OF PROGRAM
//LKED.SYSLMOD DD DSN=GIBSON.LOADLIB,DISP=SHR
//LKED.SYSPRINT DD SYSOUT=*
//SYSIN    DD *
 ENTRY WTOR
 NAME  WTOR(R)
/*
