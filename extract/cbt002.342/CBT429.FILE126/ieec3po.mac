         TITLE 'BUILD R2D2 TABLE  -    IEEC3PO  '
         PRINT  GEN
*---------------------------------------------------------------------*
*                                                                     *
*        FUNCTION:  THIS PROGRAM BUILDS A TABLE IN CSA  FOR THE WTO   *
*              EXIT IEAVMXIT, WHICH INCLUDES IEECR2D2. IT RESPOND TO  *
*              A WTOR OR ISSUE COMMANDS KEYED OFF A WTO.              *
*                                                                     *
*        ENTRY:  IEEC3PO                                              *
*                                                                     *
*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *
*                                                                     *
*        INPUT:  NONE                                                 *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*    MACRO DEFINITIONS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&LABEL   ERRMSG   &RC=,&TXT1=,&TXT2=,&TXT3=,&MSGNUM=
         LCLA  &LTXT1,&LTXT2,&LTXT3
.*
.* CHECK PARAMETERS
.*
.RCCHK1  AIF   (T'&RC NE 'O').RCCHK9
         MNOTE 8,'* * * ERROR * * * RC NOT SPECIFIED'
         MEXIT
.RCCHK9  ANOP
.NMCHK1  AIF   (T'&MSGNUM NE 'O').NMCHK2
         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT SPECIFIED'
         MEXIT
.NMCHK2  AIF   (K'&MSGNUM EQ 4).NMCHK9
         MNOTE 8,'* * * ERROR * * * MESSAGE NUMBER NOT 5 CHARACTERS'
         MEXIT
.NMCHK9  ANOP
.TX1CHK1 AIF   (T'&TXT1 NE 'O').TX1CHK9
         MNOTE 8,'* * * ERROR * * * TXT1 NOT SPECIFIED'
         MEXIT
.TX1CHK9 ANOP
.TX2CHK1 AIF   (T'&TXT2 NE 'O').TX2CHK9
         AIF   (T'&TXT3 EQ 'O').TX2CHK9
         MNOTE 8,'* * * ERROR * * * TXT3 WAS SPECIFIED BUT NOT TXT2'
         MEXIT
.TX2CHK9 ANOP
.*
.* SET LENGTHS
.*
&LTXT1   SETA  K'&TXT1-2
&LTXT2   SETA  K'&TXT2-2
&LTXT3   SETA  K'&TXT3-2
.*
.* COMMAND
.*
&LABEL   DC   F'&RC'
         DC   CL5'&MSGNUM'
         DC   AL1(&LTXT1)
         DC   C&TXT1
         AIF   (T'&TXT2 EQ 'O').OUT
         DC   AL1(&LTXT2)
         DC   C&TXT2
         AIF   (T'&TXT3 EQ 'O').OUT
         DC   AL1(&LTXT3)
         DC   C&TXT3
.OUT     ANOP
         DC   AL1(0)
         MEND
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        START THE PROGRAM                                            *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
IEEC3PO  CSECT
         SAVE  (14,12),,'IEEC3PO,&SYSDATE,&SYSTIME'
         LR    R12,R15                 SAVE ENTRY ADRESS
         USING IEEC3PO,R12,R11         REAL BASE ADDRESS=R12
         LA    R11,2048(,R12)          SET UP ...
         LA    R11,2048(,R11)          ...    SECOND BASE REG
         SPACE ,
         GETMAIN R,LV=WKAREAL,SP=250   GET CORE FROM SP=250
         ST    R13,SAVE+4-WKAREA(,R1)  CHAIN ...
         ST    R1,8(,R13)              ...  SAVEAREAS
         LR    R10,R1                  PUT SAVE AREA ADDRESS INTO R13
         L     R1,24(,R13)             RELOAD PARM REG.
         USING WKAREA,R10              GET ADDRESSABILITY
         LA    R13,SAVE                LOAD SAVE AREA ADDRESS INTO R13
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        PROCESS PARM                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         L     R1,0(,R1)               POINT TO PARM
         CLC   0(2,R1),=H'0'           NO PARM SPECIFIED ?
         BE    DODCBS                  GO DO DCB S
         CLC   0(2,R1),=H'6'           6 CHARS ?
         BNE   DODCBS                  NO, GO DO DCB S
         CLC   =CL6'VERIFY',2(R1)      IS IT VERIFY ?
         BNE   DODCBS                  NO, BR TO DO DCBS
         OI    FLAGS3,TSTFLG           SET TEST FLAG
         B     DODCBS                  B DO DCB S
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SET UP DCB'S                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DODCBS   DS    0H
         MVC   INPUT(INPUTL),INPUTC        SET UP SYSIN DCB
         MVC   OUTPUT(OUTPUTL),OUTPUTC     SET UP SYSOUT DCB
         MVC   OPENIN(OPENINL),OPENINC     SET UP OPEN FOR SYSIN
         MVC   OPENOUT(OPENOUTL),OPENOUTC  SET UP OPEN FOR SYSOUT
         MVC   CLOSIN(CLOSINL),CLOSINC     SET UP CLOSE FOR SYSIN
         MVC   CLOSOUT(CLOSOUTL),CLOSOUTC  SET UP CLOSE FOR SYSOUT
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        GET INPUT                                                    *
*                                                                     *
*---------------------------------------------------------------------*
CMDGETIN DS    0H
         LA    R2,OUTPUT           POINT TO OUTPUT DCB
         OPEN  ((2)),MF=(E,OPENOUT) OPEN OUTPUT
         TM    OUTPUT+48,X'10'     DID OUTPUT OPEN
         BZ    OUTERR              NO - BRANCH TO PUT OUT ERROR MSG
         LA    R2,INPUT            POINT TO INPUT DCB
         OPEN  ((2)),MF=(E,OPENIN) OPEN INPUT
         TM    INPUT+48,X'10'      DID IT OPEN
         BZ    INERR               NO, BRANCH TO PUT OUT ERROR MSG
         ZAP   CMDCOUNT,=P'0'      CLEAR COUTER
         SPACE ,
CMDGET   DS    0H
         XC    COLCOUNT,COLCOUNT   CLEAR COL COUNT FOR CONTINUATIONS
         SPACE ,
CMDGET1  DS    0H
         CLI   EOD,X'FF'           REACHED END OF INPUT ?
         BE    MOVTAB              YES, BRANCH TO MOV TABLE TO CSA
         GET   INPUT               READ RECORD FROM SYSIN
         SPACE ,
CMDOUT   DS    0H
         MVI   OUTBUF,C' '         CLEAR OUTPUT...
         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ... BUFFER
         MVC   OUTCMD(80),0(R1)    MOVE CMD TO OUTPUT
         LR    R4,R1 SAVE INPUT RECORD POINTER
         PUT   OUTPUT,OUTBUF       PUT MSG TO OUTPUT FILE
         NI    FLAGS2,255-CONT     ASSUME NOT CONT AND CLEAR CONT FLAG
         CLI   71(R4),C' '         CONTINUATION ?
         BE    SKPSET              NO, SKIP SETTING CONT FLAG
         OI    FLAGS2,CONT         YES, SET CONT FLAG
         SPACE ,
SKPSET   DS    0H
         LH    R2,COLCOUNT         LOAD COL COUNT
         LA    R3,CMDTXT(R2)       POINT R3 INTO CMDTXT TO MOVE INPUT
         LA    R2,71(,R2)          LOAD NEW COLCOUNT INTO R2
         STH   R2,COLCOUNT         STORE NEW COL COUNT
         MVC   0(71,R3),0(R4)      MOVE INPUT INTO BUFFER
         C     R2,=F'1729'         OVER MAX ?
         BL    CONTOK1             NO, SKIP PUTTING OUT ERR MSG
         XC    ERRPRM1(8),ERRPRM1  PUT ...
         LA    R1,CONTERR1         ... OUT ...
         ST    R1,ERRPRM3          ...... ERROR ...
         LA    R1,ERRPRM1          ......... MESSAGE ...
         BAL   R14,ERRPUT
         SPACE ,
CONTOK1  DS    0H
         TM    FLAGS2,CONT         THIS A CONT ?
         BO    CMDGET1             YES, GET NEXT RECORD
         B     CALLSCAN            NO, BRANCH TO CALL SCAN ROUTINE
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CALL SCAN ROUTINE                                            *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CALLSCAN DS    0H
         LA    R4,CLRSTRT          CLEAR
         LA    R5,CLRLEN           STORAGE
         LA    R6,CLRSTRT-1        ...
         SLR   R7,R7               ...
         MVCL  R4,R6               ...
         SPACE ,
         AP    CMDCOUNT,=P'1'      ADD ONE TO CMD COUNT
         LA    R0,CMDBUF           GET ADDR OF CHAR STRING
         LA    R1,KEYTBL           KEYWORD TABLE ADDRESS
         CALL  KEYSCAN             SCAN
         STM   R0,R1,ERRPRM1       SAVE FOR POSSIBLE ERROR
         B     SCANERR(R15)        SET ERROR MSG
         SPACE 1
SCANERR  DS    0H
         B     CHKMSGID            NO ERRS BR TO CHK MSG ID SPECIFIED
         B     SCANER4             VALUE MISSING FOR KEYWORD
         B     SCANER8             INVALID KEYWORD
         B     SCANER12            TOO MANY/FEW VALUES FOR KEYWORD
         B     CMDGET              NULL INPUT
         B     SCANER20            INVALID VALUE FOR KEYWORD
         B     SCANER24            VALUE TOO LONG FOR KEYWORD
         B     SCANER28            KEYWORD SPECIFIED TWICE
         B     SCANER32            NUMERIC VALUE TOO HIGH
         B     SCANER36            KEYWORD SPECIFIED MUTUALLY EXC
         B     SCANER40            KEYWORD SPECIFIED TOO MANY TIMES
         B     SCANER44            VALUE SPECIFIED TWICE FOR KEYWORD
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SET AND PUT ERROR MSG                                        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
SCANER4  DS    0H
         LA    R1,ERRSCN4
         B     SCANER99
         SPACE 1
SCANER8  DS    0H
         LA    R1,ERRSCN8
         B     SCANER99
         SPACE 1
SCANER12 DS    0H
         LA    R1,ERRSCN12
         B     SCANER99
         SPACE 1
SCANER16 DS    0H
         LA    R1,ERRSCN16
         B     SCANER99
         SPACE 1
SCANER20 DS    0H
         LA    R1,ERRSCN20
         B     SCANER99
         SPACE 1
SCANER24 DS    0H
         LA    R1,ERRSCN24
         B     SCANER99
         SPACE 1
SCANER28 DS    0H
         LA    R1,ERRSCN28
         B     SCANER99
         SPACE 1
SCANER32 DS    0H
         LA    R1,ERRSCN32
         B     SCANER99
         SPACE 1
SCANER36 DS    0H
         LA    R1,ERRSCN36
         B     SCANER99
         SPACE 1
SCANER40 DS    0H
         LA    R1,ERRSCN40
         B     SCANER99
         SPACE 1
SCANER44 DS    0H
         LA    R1,ERRSCN44
         B     SCANER99
         SPACE 1
SCANER99 DS    0H
         ST    R1,ERRPRM3
         LA    R1,ERRPRM1
         BAL   R14,ERRPUT
         B     CMDGET
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        MAKE SURE MSG ID OR DELETE SPECIFIED                         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CHKMSGID DS    0H
         TM    FLAGS1,DELFLG       DELETE SPECIFIED ?
         BO    GOTID               YES, BR, ITS OK
         TM    FLAGS2,IDFLG        MESSAGE ID SPECIFIED ?
         BO    GOTID               YES, BR, ITS OK
         XC    ERRPRM1(8),ERRPRM1  PUT ...
         LA    R1,ERRID            ERR ...
         ST    R1,ERRPRM3          MSG ...
         LA    R1,ERRPRM1          ...
         BAL   R14,ERRPUT          ...
         B     CMDGET              ...
         SPACE ,
GOTID    DS    0H
         CLC   RETCODE,=F'4'       IS RETCODE GREATER THAN 4 ?
         BH    CMDGET              YES, GET NEXT, DONT SET TABLE
         B     MOVEENT             BR TO MOVE ENT INTO CMDBLK
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SET UP CMD BLOCK                                             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
MOVEENT  DS    0H
         LA    R2,ENTHDRLN         ADD HDR LEN TO TOTAL ENT LEN
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,MSGID+1          GET LEN OF MSGID
         LA    R2,1(R3,R2)         ADD TO TOTAL ENT LEN
         TM    FLAGS1,CMMDFLG      CMD SPECIFIED ?
         BZ    NOCMD               NO, SKIP ADDING CMD LEN
         L     R3,CMDLEN           LOAD CMD LEN
         LA    R2,1(R3,R2)         ADD TO TOTAL LEN
         L     R1,=A(CMBLKLEN-(CMBLK1ST-CMBLK)) GET MAX LEN
         CR    R2,R1               TOO HIGH ?
         BNH   NOCMD               NO, SKIP
         EX    R0,*                YES, ABEND
         SPACE ,
NOCMD    DS    0H
         L     R9,BLKPTRL          POINT TO LAST CMDBLK
         LTR   R9,R9               IS THERE ONE ?
         BZ    GETCMBLK            NO, GO GET ONE
         USING CMBLK,R9            SET ADDRESSABILITY
         L     R4,CMBLKNXT         POINT TO NXT BLK ENTRY
         LA    R4,0(R2,R4)         ADD ENTRY LEN
         C     R4,CMBLKEND         PAST END ?
         BL    SKIPGET             NO, SKIP GETTING NEW BLK
         SPACE ,
GETCMBLK DS    0H
         GETMAIN R,LV=CMBLKLEN,SP=250   GET CORE FROM SP=250
         LTR   R9,R9               IS THIS FORST BLK ?
         BNZ   NOTFIRST            NO, SKIP
         LR    R9,R1               LOAD POINTER TO NEW BLK
         ST    R9,BLKPTRF          STORE ADD IN FIRST BLK PTR
         XC    CMBLKFWD,CMBLKFWD   CLEAR FWD POINTER
         XC    CMBLKBCK,CMBLKBCK   CLEAR BACKWD POINTER
         B     SKPCHAIN            AND SKIP CHAINING
         SPACE ,
NOTFIRST DS    0H
         ST    R1,CMBLKFWD         CHAIN FWD
         ST    R9,CMBLKBCK-CMBLK(,R1) CHAIN BACK
         LR    R9,R1               POINT TO NEW BLK
         SPACE ,
SKPCHAIN DS    0H
         ST    R9,BLKPTRL          SAVE PTR TO LAST BLK
         L     R1,=A(CMBLKLEN)     GET LENGTH OF BLK
         LA    R1,0(R1,R9)         ADD TO START
         ST    R1,CMBLKEND         STORE END OF BLK
         LA    R4,CMBLK1ST         GET POINTER TO FISRT ENT
         ST    R4,CMBLKNXT         SAVE AS NEXT AVAILABLE ENT
         LA    R4,0(R2,R4)
         SPACE ,
SKIPGET  DS    0H
         L     R8,CMBLKNXT         GET POINTER TO NEXT AVAIL ENT
         ST    R4,CMBLKNXT         SAVE NEW PTR
         USING MSGENT,R8
         STH   R2,ENTLEN           STORE ENT LEN
         MVC   ENTDESC,DESCFLGS    MOVE DESC FLAGS
         MVC   ENTROUT,ROUTFLGS    MOVE ROUT FLAGS
         MVC   ENTFLAG,FLAGS1      MOVE FLAGS
         MVC   ENTJBNM,=CL8' '     CLEAR JOB NAME
         TM    FLAGS1,JBNMFLG      WAS JOBNAME SPECIFIED ?
         BNO   NOJBNM              NO, SKIP SETTING JOB NAME
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,JOBNAME+1        GET LENGTH OF JOBNAME
         BCTR  R3,0                LESS ONE FOR EX
         EX    R3,JOBNMMVC         MOVE JOBNAME
         SPACE ,
NOJBNM   DS    0H
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,MSGID+1          GET MSG ID LEN
         EX    R3,MSGIDMVC         MOV MSGID PLUS LEN
         TM    FLAGS1,CMMDFLG      WAS CMD SPECIFIED ?
         BZ    NOCMDMOV            NO, SKIP CMD MOV
         LA    R4,ENTLID+1(R3)     POINT TO AREA TO MOVE CMD
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,CMDNM            GET NUMBER OF CMDS
         STC   R3,0(,R4)           STORE
         LA    R4,1(,R4)           BUMP PTR UP ONE
         L     R5,CMDLEN           GET CMD LEN
         LA    R6,CMD1             POINT TO CMDS
         LR    R7,R5               SET LENGTH OF TARGET AREA
         MVCL  R4,R6               MOVE CMDS
         SPACE ,
NOCMDMOV DS    0H
         B     CMDGET
         SPACE ,
JOBNMMVC MVC   ENTJBNM(*-*),JOBNAME+2
MSGIDMVC MVC   ENTLID(*-*),MSGID+1
         DROP  R8
         DROP  R9
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        END OF DATA ROUTINE                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMDEOD   DS    0H
         MVI   EOD,X'FF'           SET EOD FLAG
         LA    R2,INPUT            POINT TO INPUT DCB
         CLOSE ((2)),MF=(E,CLOSIN) CLOSE INPUT
         TM    FLAGS2,CONT         CONTINUATION ON LAST CARD ?
         BNO   CMDEOD1             NO, SKIP
         XC    ERRPRM1(8),ERRPRM1  PUT ...
         LA    R1,CONTERR2         ERR ...
         ST    R1,ERRPRM3          MSG ...
         LA    R1,ERRPRM1          ...
         BAL   R14,ERRPUT          ...
         B     CALLSCAN            ...
         SPACE ,
CMDEOD1  DS    0H
         B     MOVTAB              BR, TO MOVE TABLE TO CSA
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        MOVE TABLE INTO CSA                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
MOVTAB   DS    0H
         TM    FLAGS3,TSTFLG       TEST FLAG ON
         BO    RETURN              YES, BRANCH TO RETURN
         CLC   RETCODE,=F'4'       RET CODE GREATER THAN 4 ?
         BH    RETURN              YES, ALL DONE
         TM    FLAGS1,DELFLG       DELETE REQUESTED ?
         BO    DELETE              YES, GO DO DELETE
         SLR   R0,R0               CLEAR R0 FOR TOTAL COUNT
         USING CMBLK,R4
         L     R4,BLKPTRF          POINT TO FIRST CMDBLK
         SPACE ,
CNTLP    DS    0H
         L     R5,CMBLKNXT         POINT R5 TO NEXT CMDBLK
         LA    R6,CMBLK1ST         POINT R6 TO FIRST ENTRY
         SR    R5,R6               GET LENGTH OF BLK
         AR    R0,R5               ADD TO TOTAL LEN
         L     R4,CMBLKFWD         POINT TO NEXT BLK
         LTR   R4,R4               IS THERE ONE ?
         BNZ   CNTLP               YES, LOOP
         DROP  R4
         LA    R6,C3POHDRL         GET LEN OF C3PO CSA TABLE HEADER
         AR    R0,R6               ADD TO TOTAL LEN
         LR    R2,R0               SAVE IN R2
         LR    R3,R0               AND R3
         GETMAIN R,LV=(2),SP=241 SP=241 GET CSA
         LR    R8,R1               PUT ADDR INTO R8
         USING C3POTABL,R8
         MVC   C3POID,=CL8'C3POTABL' SET C3PO ID
         L     R5,CVTPTR           POINT R5 TO CVT
         L     R5,CVTUSER-CVT(,R5) LOAD R5 FROM CVTUSER
         ST    R5,C3PONXT          CHAIN NEW TABLE IN FRONT OF OLD
         LA    R5,C3POENT          LOAD POINTER TO FISRT ENT
         ST    R5,C3PO1ST          ST POINTER TO FISRT ENT
         LA    R5,C3POTABL         LOAD PTR TO TABLE
         AR    R5,R3               ADD LEN OF TABLE
         ST    R5,C3POEND          STO PTR TO END OF TABLE
         ST    R3,C3POLEN          ST LEN OF TABLE
         XC    C3PORSV,C3PORSV     CLEAR RESV
         LA    R6,C3POENT          POINT TO FIRST ENT
         USING CMBLK,R3
         L     R3,BLKPTRF          LOAD ADDR OF FISRT CMD BLK
         SPACE ,
MOVLOOP  DS    0H
         LA    R4,CMBLK1ST         LOAD ADDR OF FIRST ENT IN CMD BLK
         L     R5,CMBLKNXT         LOAD POINTER TO NEXT AVAIL ENT
         SR    R5,R4               GET LEN OF CMD BLK ENTRIES
         LR    R7,R5               AND SET AS TARGET LEN
         MVCL  R6,R4               MOVE CMD ENTER INTO CSA
         L     R3,CMBLKFWD         POINT TO NEXT CMDBLK
         LTR   R3,R3               IS THERE ONE ?
         BNZ   MOVLOOP             YES, LOOP
         L     R4,CVTPTR               LOAD ADDRESS OF CVT
         USING CVT,R4
         L     R2,CVTUSER              LOAD OLD CONTENTS OF CVTUSER
         MODESET KEY=ZERO
         ST    R8,CVTUSER              SET PTR TO NEW C3PO TABLE
         DROP  R4
         MODESET KEY=NZERO
         B     RETURN                  RETURN
         DROP  R8
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        FREEMAIN OLD R2D2 TABLE                                      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DELETE   DS    0H
         L     R4,CVTPTR           GET POINTER TO ...
         L     R2,CVTUSER-CVT(,R4) ... C3PO TABLE
         USING C3POTABL,R2
         LR    R3,R2               SAVE POINTER
         SPACE ,
DELLOOP  DS    0H
         LTR   R2,R3               DOES TABLE EXIST ?
         BZ    DELLPEND            NO, ALL DONE
         L     R3,C3PONXT          YES, LOAD POINTER TO NEXT TABLE
         CLC   C3POID,=CL8'C3POTABL' IS IT AN R2D2 TABLE ?
         BNE   DELXIT              NO, EXIT SOMETHING NOT RIGHT
         LR    R1,R2               LOAD FREEMAIN ADDRESS
         L     R2,C3POLEN          LOAD FREEMAIN LENGTH
         DROP  R2
         LTR   R2,R2               IS LENGTH ZERO ?
         BZ    DELXIT              YES, DON'T FREE IT
         FREEMAIN R,A=(1),LV=(2),SP=241 DO FREEMAIN
         B     DELLOOP             LOOP TO FREE NEXT TABLE
         SPACE ,
DELLPEND DS    0H
         MODESET KEY=ZERO
         XC    CVTUSER-CVT(4,R4),CVTUSER-CVT(R4) CLEAR PTR IN CVT
         MODESET KEY=NZERO
         SPACE ,
DELXIT   DS    0H
         B     RETURN              RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO FREE UP           *
*        OUR GOTTEN CORE FROM SP=250                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
RETURN   DS    0H
         LA    R2,OUTPUT           POINT TO OUTPUT DCB
         CLOSE ((2)),MF=(E,CLOSOUT) CLOSE OUTPUT
         L     R9,BLKPTRF          GET POINTER TO FIRST CMD BLK
         SPACE ,
FREELP   DS    0H
         LTR   R9,R9               IS THER ONE ?
         BZ    SKIPFREE            NO, THEN DONT FREE IT
         USING CMBLK,R9
         LR    R1,R9               LOAD POINTER TO CMD BLK
         L     R9,CMBLKFWD         LOAD POINTER TO NEXT CMD BLK
         FREEMAIN R,A=(1),LV=CMBLKLEN,SP=250 DO FREEMAIN
         B     FREELP              LOOP
         SPACE 2
SKIPFREE DS    0H
         L     R2,RETCODE          LOAD RETURN CODE
         LR    R1,R13              GET AREA ADDRESS
         L     R13,SAVE+4          RELOAD SAVE AREA ADDRESS
         FREEMAIN R,A=(1),LV=WKAREAL,SP=250 DO FREEMAIN
         LR    R15,R2              LOAD RETCODE INTO R15
         RETURN (14,12),RC=(15)    RETURN
         DROP  R9
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        DISASTEROUS ERRORS                                           *
*        WTO ERROR MSG AND RETURN WITH CODE 12                        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
OUTERR   DS    0H
         WTO   'C3PO0901D ERROR OPENING OUTPUT FILE, EXECUTION ENDS',  X
               ROUTCDE=(12)
         MVC   RETCODE,=F'12'      SET ERROR CODE
         B     RETURN
         SPACE ,
INERR    DS    0H
         WTO   'C3PO0902D ERROR OPENING INPUT FILE, EXECUTION ENDS',   X
               ROUTCDE=(12)
         MVC   RETCODE,=F'12'      SET ERROR CODE
         B     RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        ERROR MESSAGE SUBROUTINE                                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
ERRPUT   DS    0H
         STM   R14,R12,SAVAREA2    SAVE REGISTERS
         L     R2,8(,R1)           LOAD POINTER TO ERR MSG BLK
         L     R3,0(,R2)           LOAD RETURN CODE
         LA    R4,4(,R2)           POINT TO MSG NUM
         LA    R2,9(,R2)           POINT TO FIRST ERR MSG TXT
         C     R3,RETCODE          IS RETCODE GREATER THAN CURNT ?
         BNH   ERRSKP              NO, SKIP RET CODE SET
         ST    R3,RETCODE          ST NEW RETCODE
         SPACE ,
ERRSKP   DS    0H
         MVI   OUTBUF,C' '         CLEAR OUTPUT BUFFER ...
         MVC   OUTBUF+1(L'OUTBUF-1),OUTBUF ...
         MVC   OUTMSG(4),=C'C3PO'  SET MSG HDR
         MVC   OUTMSG+4(4),0(R4)   SET MSG NUM
         MVI   OUTMSG+8,C'I'       SET MSG TYPE AS INFORMATIONAL
         C     R3,=F'4'            IS RETCODE < 4 ?
         BL    ERRSKP1             YES, SKIP
         MVI   OUTMSG+8,C'W'       SET MSG TYPE AS WARNING
         C     R3,=F'8'            IS RETCODE < 8 ?
         BL    ERRSKP1             YES, SKIP
         MVI   OUTMSG+8,C'E'       SET MSG TYPE AS ERROR
         C     R3,=F'12'           IS RETCODE < 12 ?
         BL    ERRSKP1             YES SKIP
         MVI   OUTMSG+8,C'D'       SET MSG TYPE AS DISASTOR
         SPACE ,
ERRSKP1  DS    0H
         SLR   R5,R5               CLEAR OFFSET
         LA    R6,OUTCMD           POINT TO OUTCMD
         SPACE ,
ERRLP    DS    0H
         ICM   R3,B'0001',0(R2)    LOAD TXT LEN INTO R3
         BZ    ERRPUTIT            IF ZERO DONE
         LA    R6,OUTCMD(R5)       LOAD POINTER INTO BUFFER
         BCTR  R3,0                BUMP LEN BACK ONE FOR EX
         EX    R3,ERRMVC1          MOVE TEXT
         LA    R3,1(,R3)           ADD BACK ONE
         LA    R5,0(R3,R5)         BUMP OFFSET
         LA    R2,1(R3,R2)         POINT TO NEXT TEXT STR
         ICM   R3,B'0001',0(R2)    LOAD LEN
         BZ    ERRPUTIT            DONE IF ZERO
         SPACE ,
         L     R7,0(,R1)           POINT TO FIRST DYNAMIC
         LA    R1,4(,R1)           POINT TO NEXT DYNAMIC
         LA    R8,8                LOAD MAX LEN
         LA    R4,ERRWORK          POINT TO ERR WORK
         SPACE ,
ERRLP2   DS    0H
         CLI   0(R7),C','          END OF STR ?
         BE    ERRSKP2             YES
         CLI   0(R7),C' '          END OF STR ?
         BE    ERRSKP2             YES
         CLI   0(R7),C')'          END OF STR ?
         BE    ERRSKP2             YES
         CLI   0(R7),C'='          END OF STR ?
         BE    ERRSKP2             YES
         MVC   0(1,R4),0(R7)       MOVE BYTE
         LA    R4,1(,R4)           BUMP TARGET POINTER
         LA    R7,1(,R7)           BUMP SOURCE POINTER
         BCT   R8,ERRLP2           LOOP
         SPACE ,
ERRSKP2  DS    0H
         LA    R4,8                LOAD MAX LEN
         SR    R4,R8               GET LEN OF STR
         BNP   ERRSKP3             NONE END
         LA    R6,OUTCMD(R5)       POINT INTO OUTCMD
         BCTR  R4,0                LESS ONE FOR EX
         EX    R4,ERRMVC2          MOVE STR
         LA    R4,1(,R4)           ADD BACK
         LA    R5,0(R4,R5)         SET OFFSET POINTER
         SPACE ,
ERRSKP3  DS    0H
         B     ERRLP               LOOP
         SPACE ,
ERRPUTIT DS    0H
         PUT   OUTPUT,OUTBUF       PUT STR
         LM    R14,R12,SAVAREA2    RELOAD REGS
         BR    R14                 RETURN
         SPACE ,
ERRMVC1  MVC   0(*-*,R6),1(R2)
ERRMVC2  MVC   0(*-*,R6),ERRWORK
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        ERROR MESSAGES                                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CONTERR1 ERRMSG RC=8,TXT1='MORE THAN 25 CONTINUATION CARDS',           X
               MSGNUM=0001
CONTERR2 ERRMSG RC=4,TXT1='CONTINUATION SPECIFIED ON LAST CARD',       X
               MSGNUM=0002
ERRSCN4  ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': NOT SPECIFIED',                 X
               MSGNUM=0003
ERRSCN8  ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': INVALID',                                       X
               MSGNUM=0004
ERRSCN12 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': TOO MANY OR TOO FEW VALUES SPECIFIED',          X
               MSGNUM=0005
ERRSCN16 ERRMSG RC=8,TXT1='LOGIC ERROR',                               X
               MSGNUM=0991
ERRSCN20 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': INVALID',                       X
               MSGNUM=0006
ERRSCN24 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': TOO LONG',                      X
               MSGNUM=0007
ERRSCN28 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': SPECIFIED TWICE',                               X
               MSGNUM=0008
ERRSCN32 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': GREATER THAN 16',               X
               MSGNUM=0009
ERRSCN36 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': MUTUALLY EXCLUSIVE WITH OTHER SPECIFIED KEYWORD'X
               ,MSGNUM=0010
ERRSCN40 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': SPECIFIED TOO MANY TIMES',                      X
               MSGNUM=0011
ERRSCN44 ERRMSG RC=8,TXT1='KEYWORD ',                                  X
               TXT2=': VALUE ',TXT3=': SPECIFIED TWICE',               X
               MSGNUM=0012
ERRID    ERRMSG RC=8,TXT1='KEYWORD ID: NOT SPECIFIED',                 X
               MSGNUM=0013
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        KEYWORD CHECK SUBROUTINES                                    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK MESSAGE ID                                             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
IDCHK    DS    0H
         SAVE  (14,12),,IDCHK      SAVE REGS
         TM    FLAGS2,IDFLG        ID ALREADY SPECIFIED ?
         BO    IDCRET28            YES, ERROR
         OI    FLAGS2,IDFLG        SET ID FLAG
         B     IDCRET0             BR TO RET CODE 0
         SPACE ,
IDCRET0  DS    0H
         SLR   R15,R15             CLEAR RET CODE
         B     IDCRET
         SPACE ,
IDCRET28 DS    0H
         LA    R15,28              SET RETCODE TO 28
         B     IDCRET
         SPACE ,
IDCRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK JOBNAME                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
JOBCHK   DS    0H
         SAVE  (14,12),,JOBCHK     SAVE REGS
         TM    FLAGS1,JBNMFLG      JOBNAME ALREADY SPECIFIED ?
         BO    JOBRET28            YES, ERROR
         OI    FLAGS1,JBNMFLG      SET JOBNAME FLAG
         B     JOBRET0             BR
         SPACE ,
JOBRET0  DS    0H
         SLR   R15,R15             SET RET CODE TO ZERO
         B     JOBRET
         SPACE ,
JOBRET28 DS   0H
         LA    R15,28              SET RETCODE TO 28
         B     JOBRET
         SPACE ,
JOBRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK ROUTE                                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
ROUCHK   DS    0H
         SAVE  (14,12),,ROUCHK     SAVE REGS
         TM    FLAGS1,ROUTFLG      ROUT ALREADY SPECIFIED ?
         BO    ROURET28            YES ERROR
         OI    FLAGS1,ROUTFLG      SET ROUT FLAG
         SPACE 1
         LR    R8,R0               POINT TO STR AREA
         SLR   R4,R4               CLEAR R4 FOR IC
         IC    R4,0(,R8)           GET NUMBER OF ENTRIES
         SLR   R5,R5               CLEAR R5
         SPACE 1
ROULP    DS    0H
         LA    R8,1(R5,R8)         POINT TO ROU PARAMETER
         LA    R3,1(,R8)           POINT R3 TO FIRST
         CLI   0(R8),X'02'         IS LEN > 2 ?
         BH    ROURET32            LESS ERROR
         ICM   R5,B'0001',0(R8)    LOAD LEN
         BZ    ROUNULL             END IF ZERO
         BCTR  R5,0                LESS ONE FOR EX
         EX    R5,ROUPACK          PACK IT
         LA    R5,1(,R5)           ADD BACK
         CVB   R2,WRKDWRD          CONVERT TO BIN
         C     R2,=F'16'           IS IT > 16 ?
         BH    ROURET32            YES, ERROR
         BCTR  R2,0                SUB ONE FOR SHIFT
         ICM   R6,B'1111',=X'00008000' SET "MASK"  ...
         SLR   R7,R7               ...
         SRL   R6,0(R2)            MOVE OVER ...
         SRDL  R6,8                ...
         SRL   R7,24               ...
         EX    R6,ROUTM1           ALREADY SPECIFIED ?
         BO    ROURET44            YES, ERROR
         EX    R7,ROUTM2           ALREADY SPECIFIED ?
         BO    ROURET44            YES, ERROR
         EX    R6,ROUOI1           SET BIT
         EX    R7,ROUOI2           SET BIT
         SPACE ,
ROUNULL  DS    0H
         BCT   R4,ROULP            LOOP
         SPACE 1
         B     ROURET0             ALL DONE
         SPACE ,
ROURET0  DS    0H
         SLR   R15,R15             SET RET CODE TO 1
         B     ROURET
         SPACE ,
ROURET28 DS    0H
         LA    R15,28              SET ERROR CODE
         B     ROURET
         SPACE ,
ROURET32 DS    0H
         LA    R15,32              SET ERROR CODE
         B     ROURET
         SPACE ,
ROURET44 DS    0H
         LA    R15,44              SET ERROR CODE
         B     ROURET
         SPACE ,
ROURET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         SPACE ,
ROUPACK  PACK  WRKDWRD(8),0(*-*,R3)
ROUTM1   TM    ROUTFLGS,*-*
ROUTM2   TM    ROUTFLGS+1,*-*
ROUOI1   OI    ROUTFLGS,*-*
ROUOI2   OI    ROUTFLGS+1,*-*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK DESC                                                   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DESCHK   DS    0H
         SAVE  (14,12),,DESCHK     SAVE REGS
         TM    FLAGS1,DESCFLG      DESC ALREADY SPECIFIED ?
         BO    DESRET28            YES, ERROR
         OI    FLAGS1,DESCFLG      SET DESC FLAG
         SPACE 1
         LR    R8,R0               POINT TO PARAM AREA
         SLR   R4,R4               CLEAR R4
         IC    R4,0(,R8)           LOAD NUMBER OF PARAMS
         SLR   R5,R5               CLEAR R5
         SPACE 1
DESLP    DS    0H
         LA    R8,1(R5,R8)         BUMP PARAM AREA POINTER
         LA    R3,1(,R8)           POINT R3 TO PARAM
         CLI   0(R8),X'02'         IS LEN > 2 ?
         BH    DESRET32            YES, ERROR
         ICM   R5,B'0001',0(R8)    LOAD LEN
         BZ    DESNULL             BR IF ZERO
         BCTR  R5,0                LESS ONE FOR EX
         EX    R5,DESPACK          PACK
         LA    R5,1(,R5)           ADD BACK
         CVB   R2,WRKDWRD          CONVERT
         C     R2,=F'16'           > 16 ?
         BH    DESRET32            YES, ERROR
         BCTR  R2,0                SUB ONE FOR MOVE
         ICM   R6,B'1111',=X'00008000' SET MASK ...
         SLR   R7,R7               ...
         SRL   R6,0(R2)            SHIFT
         SRDL  R6,8                ...
         SRL   R7,24               ...
         EX    R6,DESTM1           ALREADY ON ?
         BO    DESRET44            YES, ERROR
         EX    R7,DESTM2           ALREADY ON ?
         BO    DESRET44            YES, ERROR
         EX    R6,DESOI1           SET BIT
         EX    R7,DESOI2           SET BIT
         SPACE ,
DESNULL  DS    0H
         BCT   R4,DESLP            LOOP
         SPACE 1
         B     DESRET0             ALL DONE
         SPACE ,
DESRET0  DS    0H
         SLR   R15,R15             SET RETCODE TO ZERO
         B     DESRET
         SPACE ,
DESRET28 DS   0H
         LA    R15,28              SET RET CODE
         B     DESRET
         SPACE ,
DESRET32 DS   0H
         LA    R15,32              SET RET CODE
         B     DESRET
         SPACE ,
DESRET44 DS   0H
         LA    R15,44              SET RET CODE
         B     DESRET
         SPACE ,
DESRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         SPACE ,
DESPACK  PACK  WRKDWRD(8),0(*-*,R3)
DESTM1   TM    DESCFLGS,*-*
DESTM2   TM    DESCFLGS+1,*-*
DESOI1   OI    DESCFLGS,*-*
DESOI2   OI    DESCFLGS+1,*-*
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK COMMAND                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMDCHK   DS    0H
         SAVE  (14,12),,CMDCHK     SAVE REGS
         OI    FLAGS1,CMMDFLG      SET CMD FLAG
         LA    R2,CMD1             POINT TO CMD AREA
         LA    R3,8                MAX CMDS
         SLR   R1,R1               CLEAR R1
         SPACE ,
CMDLP    DS    0H
         CLI   0(R2),X'00'         ANY CMDS YET ?
         BE    CMDMVC              NO, SKIP
         IC    R1,0(,R2)           GET LEN
         LA    R2,1(R1,R2)         POINT TO NEXT CMD
         BCT   R3,CMDLP            LOOP
         B     CMDRET40            ERROR, TOO MANY
         SPACE ,
CMDMVC   DS    0H
         IC    R1,CMD+1            GET CMD LEN
         EX    R1,CMDCHMVC         MOVE CMD PLUS LEN
         L     R2,CMDLEN           LOAD TOTAL CMD LEN
         LA    R2,1(R1,R2)         ADD LEN OF CRNT CMD
         ST    R2,CMDLEN           ST CMDLEN
         SLR   R3,R3               CLEAR R3 FOR IC
         IC    R3,CMDNM            GET NUMBER OF CMDS
         LA    R3,1(,R3)           ADD ONE
         STC   R3,CMDNM            STORE
         B     CMDRET0             RETURN CODE 0
         SPACE ,
CMDRET0  DS    0H
         SLR   R15,R15             CLEAR RET CODE
         B     CMDRET
         SPACE ,
CMDRET40 DS   0H
         LA    R15,40              SET RET CODE
         B     CMDRET
         SPACE ,
CMDRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         SPACE ,
CMDCHMVC MVC   0(*-*,R2),CMD+1
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CHECK DELETE                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
DELCHK   DS    0H
         SAVE  (14,12),,DELCHK     SAVE REGS
         TM    FLAGS1,DELFLG       DEL ALREADY SET
         BO    DELRET28            YES, ERROR
         TM    FLAGS1,B'11111111'  ANYTHING ELSE SET
         BNZ   DELRET36            YES, ERROR
         OI    FLAGS1,DELFLG       SET DEL FLAG
         B     DELRET0             RETURN CODE 0
         SPACE ,
DELRET0  DS    0H
         SLR   R15,R15             CLEAR RET CODE
         B     DELRET
         SPACE ,
DELRET28 DS   0H
         LA    R15,28              SET RET CODE
         B     DELRET
         SPACE ,
DELRET36 DS   0H
         LA    R15,36              SET RET CODE
         B     DELRET
         SPACE ,
DELRET   DS    0H
         RETURN (14,12),RC=(15)    RETURN
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        KEYWORD TABLE                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
KEYTBL   KEYT  'DELETE',(DELCHK),,,(0,0)
         KEYT  'ID=',(IDCHK),MSGID,,,                                  X
               LEN=(1,120)
         KEYT  'JOBNAME=',(JOBCHK),JOBNAME,ALPHANUM,,                  X
               LEN=(1,8)
         KEYT  'ROUTCDE=',(ROUCHK),ROUTCDE,NUMERIC,(1,16),             X
               LEN=(1,2)
         KEYT  'DESC=',(DESCHK),DESC,NUMERIC,(1,16),                   X
               LEN=(1,2)
         KEYT  'CMD=',(CMDCHK),CMD,,,                                  X
               LEN=(1,120),                                            X
               END=YES
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        LITERAL POOL                                                 *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         LTORG ,
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*                CONSTANTS AND EQUATES                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        PATCH AREA                                                   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         DC    32X'0'
         EJECT ,
*                                                                     *
OUTPUTC  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X
               RECFM=FBA,LRECL=133,BLKSIZE=13300
OUTPUTL  EQU   *-OUTPUTC
INPUTC   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD
INPUTL   EQU   *-INPUTC
OPENINC  OPEN  (,),MF=L
OPENINL  EQU   *-OPENINC
OPENOUTC OPEN  (,(OUTPUT)),MF=L
OPENOUTL EQU   *-OPENOUTC
CLOSINC  CLOSE (,),MF=L
CLOSINL  EQU   *-CLOSINC
CLOSOUTC CLOSE (,),MF=L
CLOSOUTL EQU   *-CLOSOUTC
         TITLE 'DSECTS USED BY IEEC3PO'
*---------------------------------------------------------------------*
*                                                                     *
*        SYSTEM DSECTS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         PRINT OFF
         CVT   DSECT=YES
         PRINT ON
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        CSA TABLE DSECT                                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         C3POTABL
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        COMMAND BLOCK DSECT                                          *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMBLK    DSECT
CMBLKFWD DS    A
CMBLKBCK DS    A
CMBLKNXT DS    A
CMBLKEND DS    A
CMBLK1ST EQU   *
CMBLKLEN EQU   4096
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        WORK AREA DSECT                                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
WKAREA   DSECT
SAVE     DS    18F                     SAVE AREA
SAVAREA2 DS    18F                     SAVE AREA
CLRSTRT  EQU   *
MSGID    DS    CL122
ROUTCDE  DS    CL122
DESC     DS    CL122
JOBNAME  DS    CL10
CMD      DS    CL122
CMDLEN   DS    F
CMDNM    DS    XL1
CMD1     DS    8CL122
FLAGS1   DS    X'00'
*        BITS ARE DEFINED IN MESSAGE ENTRY DSECT IN ENTFLAG           *
FLAGS2   DS    X'00'
CONT     EQU   B'10000000'
IDFLG    EQU   B'01000000'
WRKDWRD  DS    D'0'
WRKWRD1  DS    F'0'
WRKWRD2  DS    F'0'
ROUTFLGS DS    XL2'0000'
DESCFLGS DS    XL2'0000'
CLRLEN   EQU   *-CLRSTRT
FLAGS3   DS    X'00'
TSTFLG   EQU   B'10000000'
ERRPRM1  DS    F
ERRPRM2  DS    F
ERRPRM3  DS    F
ERRWORK  DS    D
EOD      DS    X
BLKPTRF  DS    A
BLKPTRL  DS    A
RETCODE  DS    F
OUTBUF   DS    0CL133
OUTCC    DS    CL1
OUTMSG   DS    CL10
OUTCMD   DS    CL122
OPENIN   OPEN  (,),MF=L
OPENOUT  OPEN  (,(OUTPUT)),MF=L
CLOSIN   CLOSE (,),MF=L
CLOSOUT  CLOSE (,),MF=L
OUTPUT   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X
               RECFM=FBA,LRECL=133,BLKSIZE=13300
INPUT    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CMDEOD
CMDCOUNT DS    PL4
CMDBUF   DS    0H
COLCOUNT DS    H
CMDTXT   DS    CL1800
WKAREAL  EQU   *-WKAREA
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        MESSAGE TABLE ENTRY DSECT                                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         MSGENT
         END
