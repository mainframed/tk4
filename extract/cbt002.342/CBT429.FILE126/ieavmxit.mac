         TITLE 'IEAVMXIT  '
         PRINT  GEN
*---------------------------------------------------------------------*
*                                                                     *
*        FUNCTION:  THIS PROGRAM IS A COMMUNICATIONS TASK EXIT.       *
*              IT CAN MANIPULATE CONSOLE MESSAGES OR TRIGGER AN       *
*              EVENT BASED ON A CONSOLE MESSAGE BEING ISSUED.         *
*                                                                     *
*        ENTRY:  IEAVMXIT                                             *
*                                                                     *
*        EXIT:  RETURN TO CALLER, VIA REGISTER 14                     *
*                                                                     *
*        INPUT:  REGISTER 1 POINTS TO CTXT                            *
*                                                                     *
*                                                                     *
*  NOTES ON MACRO IEEMSG                                              *
*                                                                     *
* IEEMSG - BUILD AN ENTRY FOR WTO MSG TABLE                           *
*                                                                     *
*         THE IEEMSG MACRO INSTRUCTION IS USED TO BUILD AN ENTRY      *
*         FOR THE WTO MSG TABLE USED TO MODIFY ROUTING AND DESC       *
*         CODES FOR WTO MESSAGES, ISSUE COMMANDS AND RESOND TO        *
*         WTOR'S.                                                     *
*                                                                     *
*         THE IEEMSG IS WRITTEN AS FOLLOWS:                           *
*                                                                     *
*          ____________________________________________________       *
*         ×                                                    ×      *
*         × SYMBOL × IEEMSG   × ID="WTOMSGID"                  ×      *
*         ×        ×          × /ROUTCDE=("ROUTE CODES")/      ×      *
*         ×        ×          × /DESC=("DESCRIPTOR CODES")/    ×      *
*         ×        ×          × /CMD1="CMD"/                   ×      *
*         ×        ×          × /CMD2="CMD"/                   ×      *
*         ×        ×          × /CMD3="CMD"/                   ×      *
*         ×        ×          × /CMD4="CMD"/                   ×      *
*         ×        ×          × /CMD5="CMD"/                   ×      *
*         ×        ×          × /CMD6="CMD"/                   ×      *
*         ×        ×          × /CMD7="CMD"/                   ×      *
*         ×        ×          × /CMD8="CMD"/                   ×      *
*         ×        ×          × /CMD9="CMD"/                   ×      *
*         ×        ×          × /CMD10="CMD"/                  ×      *
*         ×        ×          × /JOBNAME="JOBNAME"/            ×      *
*          ____________________________________________________       *
*                                                                     *
*         SYMBOLS:                                                    *
*           SLASHES (/) ARE USED TO ENCLOSE OPTIONAL ELEMENTS         *
*           DOUBLE QUOTES (") ARE USED TO ENCLOSE ELEMENTS FOR WHICH  *
*           YOU CODE VALUES THAT YOU CHOSE                            *
*           OR SIGN (×) IS USED TO SEPARATE ALTERNATIVE ELEMENTS.     *
*                                                                     *
*         THE FOLLOWING DESCRIBES THE IEEMSG OPERANDS                 *
*           ID="WTOMSGID"                                             *
*             THE ID OPERAND SPECFIES THE WTO OR WTOR MESSAGES TO BE  *
*             ACTED UPON. THE LENGTH MUST BE GREATER THAN 2 AND LESS  *
*             THAN 125. THIS IS COMPARED TO THE BEGINNING OF EACH     *
*             WTO OR WTOR MESSAGE.                                    *
*                                                                     *
*           ROUTCDE=("ROUTE CODES")                                   *
*             THE ROUTCDE OPERAND SPECIFIES THE ROUTING CODES TO BE   *
*             ASSIGNED TO THE MESSAGE.                                *
*                                                                     *
*           DESC=("DESCRIPTOR CODES")                                 *
*             THE DESC OPERAND SPECIFIES THE DESCRIPTOR CODES TO BE   *
*             ASSIGNED TO THE MESSAGE.                                *
*                                                                     *
*           CMD1="CMD"                                                *
*           CMD2="CMD"                                                *
*           CMD3="CMD"                                                *
*           CMD4="CMD"                                                *
*           CMD5="CMD"                                                *
*           CMD6="CMD"                                                *
*           CMD7="CMD"                                                *
*           CMD8="CMD"                                                *
*           CMD9="CMD"                                                *
*           CMD10="CMD"                                               *
*             THE CMD OPERAND SPECIFIES THE COMMANDS TO BE ISSUED.    *
*             THE LENGTH MUST BE LESS THAN 120 .                      *
*             10 SEPARATE COMMANDS CAN BE SPECIFIED.                  *
*                                                                     *
*           JOBNAME="JOBNAME"                                         *
*             THE JOBNAME OPERAND SPECIFIES THE NAME OF THE JOB THAT  *
*             MUST BE ISSUEING THE WTO/WTOR FOR THIS ENTRY.           *
*             THE LENGTH MUST BE 8 CHARATCTERS OR LESS.               *
*                                                                     *
*                                                                     *
*         EXAMPLE 1                                                   *
*           OPERATION: CHANGE THE ROUTE CODES TO 0 SO MESSAGE WILL    *
*           NOT APPEAR ON THE CONSOLE ONLY IN THE LOG.                *
*                                                                     *
*           IEEMSG ID=NDP00005,ROUTCDE=0                              *
*                                                                     *
*         EXAMPLE 2                                                   *
*           OPERATION: CHANGE THE ROUTE CODES TO 2 AND THE DESC CODE  *
*           TO 4 SO THAT A NON-DEL MESSAGE WILL ROLL .                *
*                                                                     *
*           IEEMSG ID=IEE362A,ROUTCDE=(2),DESC=(4)                    *
*                                                                     *
*         EXAMPLE 3                                                   *
*           OPERATION: CHANGE THE ROUTE CODES SO MESSAGE WILL APPEAR  *
*           ON ALL CONSOLES.                                          *
*                                                                     *
*           IEEMSG ID=IEE362A,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11,12,13, *
*                 14,15,16)                                           *
*                                                                     *
*         EXAMPLE 4                                                   *
*           OPERATION: ISSUE COMMANDS 'S TSO' AND '$SLGN1' FOR        *
*                      MESSAGE IST020I.                               *
*                                                                     *
*           IEEMSG ID=IST020I,CMD1='S TSO',CMD2=$SLGN1                *
*                                                                     *
*         EXAMPLE 5                                                   *
*           OPERATION: ISSUE REPLY 'U' FOR MESSAGE IKT012D.           *
*                                                                     *
*           IEEMSG ID=IKT012D,CMD1='R XX,U'                           *
*                                                                     *
*                                                                     *
*        FILES:  NONE.                                                *
*                                                                     *
*        NOTES ON OPERATION:  THIS ROUTINE OPERATES AS A              *
*           COMMUNICATIONS TASK EXIT.                                 *
*           IT IS CAPABLE OF PERFORMING THE FOLLOWING FUNCTIONS:      *
*                                                                     *
*            . CHANGING ROUTING CODES ON MESSAGES SO THAT MESSAGES    *
*              CAN BE SENT TO DIFFERENT CONSOLES THAN THOSE           *
*              ORIGINALLY REQUESTED.                                  *
*                                                                     *
*            . CHANGING DESCRIPTOR CODES ON MESSAGES IN ORDER TO      *
*              KEEP MESSAGES FROM ROLLING OFF THE SCREEN.             *
*                                                                     *
*            . KEEPING MESSAGES OFF THE CONSOLE COMPLETELY BY         *
*              CHANGING THE ROUTING CODE TO ZERO                      *
*                                                                     *
*            . TRIGGERING AN ACTIVITY (I.E. START A TASK) IF A        *
*              SPECIFIC MESSAGE IS ISSUED.                            *
*                                                                     *
*            . REPLY TO 'WTORS' AUTOMATICALLY                         *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT ,
*---------------------------------------------------------------------*
*    MACRO DEFINITIONS                                                *
*---------------------------------------------------------------------*
         MACRO
&LABEL   IEEMSG   &ID=,&ROUTCDE=,&DESC=,&JOBNAME=,                     X
               &CMD1=,                                                 X
               &CMD2=,                                                 X
               &CMD3=,                                                 X
               &CMD4=,                                                 X
               &CMD5=,                                                 X
               &CMD6=,                                                 X
               &CMD7=,                                                 X
               &CMD8=,                                                 X
               &CMD9=,                                                 X
               &CMD10=
         LCLC  &DCODE,&RCODE,&FLG,&MSGID,&JBNM,&CRD
         LCLC  &CRDM(10)
         LCLA  &LCRDM(10)
         LCLA  &NUMCMD
         LCLA  &I,&N,&LID,&RCFLG,&DCFLG,&CMFLG,&RSFLG,&LCRD
         LCLA  &JBFLG
         LCLB  &CMDFLG
&DCODE   SETC  '0000000000000000'
&RCODE   SETC  '0000000000000000'
&FLG     SETC  '00000000'
&JBNM    SETC  '        '
&DCFLG   SETA  0
&RCFLG   SETA  1
&CMFLG   SETA  2
&JBFLG   SETA  4
&CMDFLG  SETB  0
.*
.* CHECK PARAMETERS
.*
.IDCHK1  AIF   (T'&ID NE 'O').IDCHK1A
         MNOTE 8,'* * * ERROR * * * ID NOT SPECIFIED'
         MEXIT
.IDCHK1A AIF   (K'&ID GE 3).IDCHK1B
         MNOTE 8,'* * * ERROR * * * ID LESS THAN 3 CHARACTERS'
         MEXIT
.IDCHK1B AIF   (K'&ID LE 125).IDCHK1C
         MNOTE 8,'* * * ERROR * * * ID GREATER THAN 125 CHARACTERS'
         MEXIT
.IDCHK1C ANOP
         AIF   (T'&CMD1 EQ 'O').IDCHK1E
&CMDFLG  SETB  1
&CRDM(1) SETC  '&CMD1'
         AIF   ('&CMD1'(1,1) NE '''' OR                                X
               '&CMD1'(K'&CMD1,1) NE '''').IDCK1D1
&CRDM(1) SETC  '&CMD1'(2,K'&CMD1-2)
.IDCK1D1 AIF   (K'&CRDM(1) LE 120).IDCHK1E
         MNOTE 8,'* * * ERROR * * * CMD1 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1E AIF   (T'&CMD2 EQ 'O').IDCHK1F
&CMDFLG  SETB  1
&CRDM(2) SETC  '&CMD2'
         AIF   ('&CMD2'(1,1) NE '''' OR                                X
               '&CMD2'(K'&CMD2,1) NE '''').IDCK1E1
&CRDM(2) SETC  '&CMD2'(2,K'&CMD2-2)
.IDCK1E1 AIF   (K'&CRDM(2) LE 120).IDCHK1F
         MNOTE 8,'* * * ERROR * * * CMD2 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1F AIF   (T'&CMD3 EQ 'O').IDCHK1G
&CMDFLG  SETB  1
&CRDM(3) SETC  '&CMD3'
         AIF   ('&CMD3'(1,1) NE '''' OR                                X
               '&CMD3'(K'&CMD3,1) NE '''').IDCK1F1
&CRDM(3) SETC  '&CMD3'(2,K'&CMD3-2)
.IDCK1F1 AIF   (K'&CRDM(3) LE 120).IDCHK1G
         MNOTE 8,'* * * ERROR * * * CMD3 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1G AIF   (T'&CMD4 EQ 'O').IDCHK1H
&CMDFLG  SETB  1
&CRDM(4) SETC  '&CMD4'
         AIF   ('&CMD4'(1,1) NE '''' OR                                X
               '&CMD4'(K'&CMD4,1) NE '''').IDCK1G1
&CRDM(4) SETC  '&CMD4'(2,K'&CMD4-2)
.IDCK1G1 AIF   (K'&CRDM(4) LE 120).IDCHK1H
         MNOTE 8,'* * * ERROR * * * CMD4 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1H AIF   (T'&CMD5 EQ 'O').IDCHK1I
&CMDFLG  SETB  1
&CRDM(5) SETC  '&CMD5'
         AIF   ('&CMD5'(1,1) NE '''' OR                                X
               '&CMD5'(K'&CMD5,1) NE '''').IDCK1H1
&CRDM(5) SETC  '&CMD5'(2,K'&CMD5-2)
.IDCK1H1 AIF   (K'&CRDM(5) LE 120).IDCHK1I
         MNOTE 8,'* * * ERROR * * * CMD5 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1I AIF   (T'&CMD6 EQ 'O').IDCHK1J
&CMDFLG  SETB  1
&CRDM(6) SETC  '&CMD6'
         AIF   ('&CMD6'(1,1) NE '''' OR                                X
               '&CMD6'(K'&CMD6,1) NE '''').IDCK1I1
&CRDM(6) SETC  '&CMD6'(2,K'&CMD6-2)
.IDCK1I1 AIF   (K'&CRDM(6) LE 120).IDCHK1J
         MNOTE 8,'* * * ERROR * * * CMD6 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1J AIF   (T'&CMD7 EQ 'O').IDCHK1K
&CMDFLG  SETB  1
&CRDM(7) SETC  '&CMD7'
         AIF   ('&CMD7'(1,1) NE '''' OR                                X
               '&CMD7'(K'&CMD7,1) NE '''').IDCK1J1
&CRDM(7) SETC  '&CMD7'(2,K'&CMD7-2)
.IDCK1J1 AIF   (K'&CRDM(7) LE 120).IDCHK1K
         MNOTE 8,'* * * ERROR * * * CMD7 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1K AIF   (T'&CMD8 EQ 'O').IDCHK1L
&CMDFLG  SETB  1
&CRDM(8) SETC  '&CMD8'
         AIF   ('&CMD8'(1,1) NE '''' OR                                X
               '&CMD8'(K'&CMD8,1) NE '''').IDCK1K1
&CRDM(8) SETC  '&CMD8'(2,K'&CMD8-2)
.IDCK1K1 AIF   (K'&CRDM(8) LE 120).IDCHK1L
         MNOTE 8,'* * * ERROR * * * CMD8 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1L AIF   (T'&CMD9 EQ 'O').IDCHK1M
&CMDFLG  SETB  1
&CRDM(9) SETC  '&CMD9'
         AIF   ('&CMD9'(1,1) NE '''' OR                                X
               '&CMD9'(K'&CMD9,1) NE '''').IDCK1L1
&CRDM(9) SETC  '&CMD9'(2,K'&CMD9-2)
.IDCK1L1 AIF   (K'&CRDM(9) LE 120).IDCHK1M
         MNOTE 8,'* * * ERROR * * * CMD9 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK1M AIF   (T'&CMD10 EQ 'O').IDCHK2
&CMDFLG  SETB  1
&CRDM(10) SETC '&CMD10'
         AIF   ('&CMD10'(1,1) NE '''' OR                               X
               '&CMD10'(K'&CMD10,1) NE '''').IDCK1M1
&CRDM(10) SETC '&CMD10'(2,K'&CMD10-2)
.IDCK1M1 AIF   (K'&CRDM(10) LE 120).IDCHK2
         MNOTE 8,'* * * ERROR * * * CMD10 GREATER THAN 120 CHARACTERS'
         MEXIT
.IDCHK2  ANOP
         AIF   (K'&JOBNAME LE 8).IDCHK99
         MNOTE 8,'* * * ERROR * * * JOBNAME GREATER THAN 8 CHARACTERS'
         MEXIT
.IDCHK99 ANOP
.*
.* DESCRIPTOR CODES
.*
.DCHK    AIF   (T'&DESC EQ 'O').RCHK
         AIF   (N'&DESC EQ 1 AND &DESC(1) EQ 0).DFLG
&I       SETA  1
.DLOOP   ANOP
&N       SETA  &DESC(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGND
         MNOTE 8,'&N IS INVALID DESCRIPTOR - IGNORED'
         AGO   .NXTD
.ASSIGND ANOP
&DCODE   SETC  '&DCODE'(1,&N-1).'1'.'&DCODE'(&N+1,16-&N)
.NXTD    AIF  (&I LE N'&DESC).DLOOP
.DFLG    ANOP
&FLG     SETC  '&FLG'(1,&DCFLG).'1'.'&FLG'(&DCFLG+2,8-&DCFLG+1)
.*
.* ROUTE CODES
.*
.RCHK    AIF   (T'&ROUTCDE EQ 'O').IDCHK
         AIF   (N'&ROUTCDE EQ 1 AND &ROUTCDE(1) EQ 0).RFLG
&I       SETA  1
.RLOOP   ANOP
&N       SETA  &ROUTCDE(&I)
&I       SETA  &I+1
         AIF   (&N GE 1 AND &N LE 16).ASSIGNR
         MNOTE 8,'&N IS INVALID ROUTE - IGNORED'
         AGO   .NXTR
.ASSIGNR ANOP
&RCODE   SETC  '&RCODE'(1,&N-1).'1'.'&RCODE'(&N+1,16-&N)
.NXTR    AIF   (&I LE N'&ROUTCDE).RLOOP
.RFLG    ANOP
&FLG     SETC  '&FLG'(1,&RCFLG).'1'.'&FLG'(&RCFLG+2,8-&RCFLG+1)
.*
.* MESSAGE ID
.*
.IDCHK   ANOP
&MSGID   SETC  '&ID'
         AIF   ('&MSGID'(1,1) NE '''' OR '&MSGID'(K'&ID,1) NE '''').ID2
&MSGID   SETC  '&MSGID'(2,K'&MSGID-2)
.ID2     ANOP
&LID     SETA  K'&MSGID
.*
.* COMMAND
.*
.CMCHK   AIF   (NOT &CMDFLG).JBNMCHK
&NUMCMD  SETA  0
&I       SETA  0
.CMLP    ANOP
&I       SETA  &I+1
&LCRDM(&I) SETA  0
         AIF   (K'&CRDM(&I) EQ 0).CMLPB
&LCRDM(&I) SETA  K'&CRDM(&I)
&NUMCMD  SETA  &NUMCMD+1
.CMLPB   AIF  (&I LT 10).CMLP
&FLG     SETC  '&FLG'(1,&CMFLG).'1'.'&FLG'(&CMFLG+2,8-&CMFLG+1)
.*
.* JOBNAME
.*
.JBNMCHK AIF   (T'&JOBNAME EQ 'O').ASSIGNC
&JBNM    SETC  '&JOBNAME'
&FLG     SETC  '&FLG'(1,&JBFLG).'1'.'&FLG'(&JBFLG+2,8-&JBFLG+1)
.*
.*
.*
.ASSIGNC ANOP
&LABEL   DS   0H
S&SYSNDX EQU  *
         DC   AL2(E&SYSNDX-S&SYSNDX)
         DC   BL2'&DCODE'
         DC   BL2'&RCODE'
         DC   BL1'&FLG'
         DC   BL1'00000000'
         DC   CL8'&JBNM'
         DC   AL1(&LID)
         DC   C'&MSGID'
         AIF  (NOT &CMDFLG).END
         DC   AL1(&NUMCMD)
&I       SETA  0
.BLP     ANOP
&I       SETA  &I+1
         AIF   (K'&CRDM(&I) EQ 0).BLPB
         DC   AL1(&LCRDM(&I))
         DC   C'&CRDM(&I)'
.BLPB    AIF  (&I LT 10).BLP
.END     ANOP
E&SYSNDX DS   0H
         MEND
         EJECT ,
*---------------------------------------------------------------------*
*        START THE PROGRAM                                            *
*---------------------------------------------------------------------*
         SPACE ,
         TITLE 'IEAVMXIT  WTO/WTOR EXIT'
IEAVMXIT CSECT
IEAVMXIT AMODE 31
IEAVMXIT RMODE ANY
         SAVE  (14,12),,'IEAVMXIT,&SYSDATE,&SYSTIME'
         LR    R12,R15                 SAVE ENTRY ADRESS
         USING IEAVMXIT,R12,R11        REAL BASE ADDRESS=R12
         LA    R11,2048(,R12)          SET UP ...
         LA    R11,2048(,R11)          ...    SECOND BASE REG
         SPACE ,
         L     R2,0(,R1)               SET ADDR TO CTXT DSECT
         USING CTXT,R2                 EST. ADDR TO CTXT DSECT
         L     R3,CTXTTXPJ             SET ADDR TO TEXT OF MAJOR LINE
         USING CTXTATTR,R3             EST. ADDRESSABILITY
         SPACE ,
         GETMAIN RU,LV=WKAREAL,SP=227,LOC=BELOW
         LR    R10,R1                  SAVE THE ADDRESS
         USING WKAREA,R10              GET ADDRESSABILITY
         ST    R13,SAVE+4              CHAIN ...
         LA    R1,SAVE                    ...
         ST    R1,8(,R13)              ...  SAVEAREAS
         LR    R13,R1                  PUT SAVE AREA ADDRESS INTO R13
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        TEST FOR COMTASK ASID AND IF SO EXIT                         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         USING PSA,0                   ADDRESS LOW CORE
         L     R4,CVTPTR               POINT TO CVT
         L     R1,CVTTCBP-CVT(,R4)     GET TCB POINTERS
         L     R1,12(,R1)              GET ASCB POINTER
         L     R4,CVTCUCB-CVT(,R4)     GET UCM ADDRESS
         LH    R4,UCMCTID-UCM(,R4)     GET COMTASK ASID
         LTR   R4,R4                   IS THERE ONE ?
         BNP   RETURN                  NO, RETURN
         CH    R4,ASCBASID-ASCB(,R1)   ARE WE COMING FROM COMTASK ?
         BE    RETURN                  YES, RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        TURN OFF ROUTE 14 REGARDLESS                                 *
*                                                                     *
*        THIS CODE IS USED SO ROUTE CODE 14 WILL APPEAR ONLY IN THE   *
*        LOG.                                                         *
*---------------------------------------------------------------------*
         SPACE ,
         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK
         USING CTXTROUT,R1
         TM    CTXTR002,CTXTR14        IS ROUTE CODE 14 ON ?
         BNO   ROUTE13                 NO, BRANCH
         NI    CTXTR002,X'FF'-CTXTR14  YES, TURN IT OFF
         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG
         EJECT ,
*---------------------------------------------------------------------*
*        DONT LOG ROUTE 13 REGARDLESS                                 *
*                                                                     *
*        THIS CODE IS USED SO ROUTE CODE 13 WILL NOT APPEAR  IN THE   *
*        LOG.                                                         *
*---------------------------------------------------------------------*
         SPACE ,
ROUTE13  DS    0H
         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK
         USING CTXTROUT,R1
         CLI   CTXTR002,CTXTR13        IS ONLY ROUTE 13 ON (2ND HALF)?
         BNE   SCANTBL                 NO, BRANCH
         CLI   CTXTR001,X'00'          IS ONLY ROUTE 13 ON (1ST HALF)?
         BNE   SCANTBL                 NO, BRANCH
         OI    CTXTRFB2,CTXTRNHC       YES, SET NO HARDCOPY FLAG
         DROP  R1
         EJECT ,
*---------------------------------------------------------------------*
*        SCAN TABLE                                                   *
*---------------------------------------------------------------------*
         SPACE ,
SCANTBL  DS    0H
         L     R1,CVTPTR               LOAD ADDRESS OF CVT
         L     R1,CVTTCBP-CVT(,R1)     GET POINTER TO ...
         L     R1,12(,R1)              ... ASCB
         USING ASCB,R1
         L     R7,ASCBJBNI             LOAD POINTER TO INIT JOBNAME
         LTR   R7,R7                   IS THERE AN INIT JOBNAME PTR ?
         BNZ   SCANTBL1                YES, USE IT
         L     R7,ASCBJBNS             LOAD STC JOBNAME POINTER
         LTR   R7,R7                   IS THERE AN STC JOBNAME PTR ?
         BNZ   SCANTBL1                YES, SKIP LOAD OF BLANK PTR
         LA    R7,=CL8' '              POINT TO BLANKS
SCANTBL1 DS    0H
         SLR   R4,R4                   CLEAR FOR ICM
         ICM   R4,B'0011',ASCBASID     LOAD ASID
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         SRDL  R4,4                    MOVE NYBBLE INTO R5
         SRL   R5,4                    MOVE OVER ONE NYBBLE
         ST    R5,CURASID              SAVE
         OC    CURASID,=X'F0F0F0F0'    CONVERT TO ZONED
         TR    CURASID,TRHEXTBL        TR 0-9,A-F
         MVC   CURJBNM(8),0(R7)        SAVE JOBNAME
         DROP  R1
         SPACE 2
         LA    R4,8                    MAX LJOBNAME LENGTH
         LA    R5,CURJBNM              POINT TO JOBNAME
SCANTBL2 DS    0H
         CLI   0(R5),C' '              FOUND THE END OF THE JOBNAME ?
         BE    SCANTBL3                YES, BRANCH TO STORE LENGTH
         LA    R5,1(,R5)               BUMP POINTER
         BCT   R4,SCANTBL2             LOOP TO FIND LENGTH
SCANTBL3 DS    0H
         LA    R5,8                    MAX LENGTH
         SR    R5,R4                   CALCULATE LENGTH
         STH   R5,CURJBNLN             SAVE JOBNAME LENGTH
         SPACE 2
         L     R1,CVTPTR               LOAD ADDRESS OF CVT
         LA    R5,CVTUSER-CVT(,R1)     LOAD ADDRESS OF CVTUSER
         USING C3POTABL,R5
         SPACE ,
         LM    R8,R9,TABLPRMS          POINT TO START & END OF TABLE
         USING MSGENT,R8               ADDRESS IT
SCANLP   DS    0H
         CR    R8,R9                   REACHED END OF TABLE ?
         BNL   SCANEND                 YES, EXIT LOOP
         TM    ENTFLAG,JBNMFLG         WAS JOBNAME SPECIFIED ?
         BNO   SCANIT                  NO, SKIP COMPARE OF JOBNAMES
         CLC   CURJBNM,ENTJBNM         COMPARE JOBNAMES
         BNE   SCANSKP                 SKIP ENTRY IF NOT EQUAL
SCANIT   DS    0H
         SLR   R1,R1                   CLEAR FOR IC
         ICM   R1,B'0001',ENTLID       GET LENGTH OF MESSAGE ID
         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)
         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE
         EX    R1,ENTCLC               COMPARE ID'S
         BE    GOTENT                  BRANCH IF MATCH
SCANSKP  DS    0H
         ICM   R1,B'0011',ENTLEN       GET LENGTH OF ENTRY
         BZ    RETURN                  IF ZERO EXIT (SHOULDN'T HAPPEN)
         LA    R8,0(R1,R8)             POINT TO NEXT ENTRY
         B     SCANLP                  LOOP
SCANEND  DS    0H
         SPACE ,
         L     R5,0(,R5)               POINT TO NEXT R2D2 TABLE
         LTR   R5,R5                   IS THERE ONE ?
         BZ    CHKPSWD                 NO, SO CHECK FOR PASSWORD
         CLC   C3POID,=CL8'C3POTABL'   DOES ID CHECK ?
         BNE   CHKPSWD                 NO, SO CHECK FOR PASSWORD
         LM    R8,R9,C3PO1ST           POINT TO START AND END OF TABLE
         LA    R5,C3PONXT              GET POINTER TO NEXT SEG.
         B     SCANLP                  LOOP TO SCAN TABLE
         SPACE ,
ENTCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        CHECK FOR PASSWORD MESSAGE                                   *
*---------------------------------------------------------------------*
         SPACE ,
CHKPSWD  DS    0H
         LA    R8,PSWDMSG              POINT TO PASSWORD MSG ENTRY
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,ENTLID               GET LENGTH OF MESSAGE ID
         BCTR  R1,0                    BUMP BACK ONE FOR EXECUTE
         EX    R1,PSWCLC               COMPARE ID'S
         BE    DOPSWD                  BRANCH IF MATCH
         B     RETURN                  NOT FOUND
         SPACE ,
PSWCLC   CLC   CTXTTMSG(*-*),ENTID     EXECUTED
         EJECT ,
*---------------------------------------------------------------------*
*        PROCESS   PASSWORD MESSAGE                                   *
*---------------------------------------------------------------------*
         SPACE ,
DOPSWD   DS    0H
         LA    R0,CTXTTMSG+128-51      POINT TO END OF SCAN
         LA    R7,CTXTTMSG+10          POINT TO POSSIBLE DSN FIELD
         LA    R9,61                   LENGTH OF MESSAGE
DOPSWDLP DS    0H
         CLC   0(6,R7),=CL6'DSNAME'    LOOK FOR DSNAME IN MESSAGE
         BE    GOTDSN                  FOUND IT
         LA    R7,1(,R7)               BUMP POINTER
         LA    R9,1(,R9)               BUMP POINTER
         CR    R7,R0                   REACHED END OF SCAN ?
         BL    DOPSWDLP                NO, LOOP
         B     RETURN                  RETURN
         SPACE ,
GOTDSN   DS    0H
         MVC   DSN(44),7(R7)           MOVE DSN
         LA    R0,PSWDRPLY             POINT TO FIELD FOR PASSWORD
         LA    R1,DSN                  POINT TO DSN FIELD
         SVC   252                     ASK FOR PASSWORD
         LTR   R15,R15                 DID I GET ONE
         BZ    MOVEPSWD                YES BR. TO MOVE ENTRY
         CLC   DSN(5),=CL5'UCAT.'      ASKING FOR UCAT PSWD ?
         BNE   RETURN                  NO, RETURN
         L     R1,PSATOLD              POINT TO ACTIVE TCB
         L     R1,TCBJSCB-TCB(,R1)     GET POINTER TO JSCB
         L     R1,JSCBACT-IEZJSCB(,R1) POINT TO ACTIVE JSCB FOR SSIB
         L     R1,JSCBSSIB-IEZJSCB(,R1) POINT TO SSIB
         L     R1,SSIBSUSE-SSIB(,R1)    POINT TO SJB
         L     R7,SJBJCT-SJB(,R1)       POINT TO JCT
         USING JCT,R7
         CLC   JCTROOMN(4),=CL4'PROD'  IS THIS A PRODUCTION JOB ?
         BNE   RETURN                  NO, RETURN
         DROP  R7
         MVC   PSWDRPLY(8),=CL8' '     BLANK OUT PSWDRPLY
         LA    R1,8                    LOAD LOOP COUNT
         LA    R7,DSN+5                LOAD START OF 2ND LVL QUAL
         LA    R4,PSWDRPLY             LOAD START OF PASSWORD REPLY
UCATLOOP DS    0H
         CLI   0(R7),C'.'              REACHED END OF QUALIFIER ?
         BE    MOVEPSWD                YES, CHECK FOR PRODUCTION JOB
         CLI   0(R7),C' '              REACHED END OF QUALIFIER ?
         BE    MOVEPSWD                YES, CHECK FOR PRODUCTION JOB
         MVC   0(1,R4),0(R7)           MOVE CHARACTER
         LA    R4,1(,R4)               BUMP TARGET POINTER
         LA    R7,1(,R7)               BUMP SOURCE POINTER
         BCT   R1,UCATLOOP             MOVE MAX OF 8 CHARS
MOVEPSWD DS    0H
         MVC   PSWDENT(PSWDMSGL),MSGENT MOVE ENTRY
         LA    R8,PSWDENT              POINT R8 TO NEW ENTRY
         STC   R9,ENTLID               SAVE MESSAGE LENGTH
         BCTR  R9,0                    LESS ONE FOR EX MVC
         EX    R9,MVCPWENT             MOVE MESSAGE
         LA    R9,1(,R9)               GET BACK LENGTH
         LA    R7,ENTID(R9)            POINT TO REPLY AREA
         MVI   0(R7),1                 MOVE IN NUMER OF "COMMANDS"
         MVI   1(R7),13                MOVE IN REPLY LENGTH
         MVC   2(L'REPLYKW,R7),REPLYKW MOVE IN REPLY KEY WORD
         MVC   7(8,R7),PSWDRPLY        MOVE IN PASSWORD
         B     GOTENT                  PROCESS AS REGULAR ENTRY
         SPACE ,
MVCPWENT MVC   ENTID(*-*),CTXTTMSG
         EJECT ,
*---------------------------------------------------------------------*
*        GOT TABLE ENTRY NOW PROCESS IT                               *
*---------------------------------------------------------------------*
         SPACE ,
GOTENT   DS    0H
         SPACE ,
CHKDESC  DS    0H
         TM    ENTFLAG,DESCFLG         DO WE WANT TO SET DESC. CODE
         BNO   CHKROUT                 NO, BRANCH TO CHECK NEXT FLAG
         L     R1,CTXTDCP              POINT TO DESC CODE BLOCK
         USING CTXTDESC,R1
         MVC   CTXTDESC-CTXTDESC(2,R1),ENTDESC     MOVE IN DESC
         OI    CTXTRFB1,CTXTRCDC       AND TURN ON DC CHANGED FLAG
         DROP  R1
         SPACE ,
CHKROUT  DS    0H
         TM    ENTFLAG,ROUTFLG         DO WE WANT TO SET ROUT. CODE
         BNO   CHKCMD                  NO, BRANCH TO CHECK NEXT FLAG
         L     R1,CTXTRCP              POINT TO ROUTE CODE BLOCK
         USING CTXTROUT,R1
         MVC   CTXTROUT-CTXTROUT(2,R1),ENTROUT     MOVE IN ROUT
         OI    CTXTRFB1,CTXTRCRC       AND TURN ON RC CHANGED FLAG
         DROP  R1
         SPACE ,
CHKCMD   DS    0H
         TM    ENTFLAG,CMMDFLG         ARE WE DOING A COMMAND ?
         BO    COMMAND                 YES, BRANCH TO DO COMMAND
         B     RETURN                  RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        SET UP TO ISSUE COMMAND                                      *
*---------------------------------------------------------------------*
         SPACE ,
COMMAND  EQU  *
         SLR   R5,R5                   CLEAR FOR IC
         IC    R5,ENTLID               GET LENGTH OF MESSAGE
         LA    R5,ENTID(R5)            POINT TO COMMANDS
         SLR   R4,R4                   CLEAR FOR IC
         ICM   R4,B'0001',0(R5)        GET NUMBER OF COMMANDS
         BZ    RETURN                  EXIT IF NONE
         LA    R5,1(,R5)               BUMP UP PAST NUMBER OF CMDS
CMDLOOP  DS    0H
         LA    R9,WTOAREA              POINT TO WTO AREA
         USING CMDDSECT,R9             USE IT
         MVI   WTOAREA,C' '            CLEAR ...
         MVC   WTOAREA+1(L'WTOAREA-1),WTOAREA ... WTOAREA
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,0(,R5)               GET LENGTH
         LTR   R1,R1                   ZERO LENGTH ?
         BZ    RETURN                  YES, LEAVE
         CH    R1,=AL2(L'WTOAREA-CWTOLEN)  TOO LARGE TO MOVE ?
         BH    RETURN                  YES, LEAVE
         SPACE ,
         BCTR  R1,0                    LESS ONE FOR EX
         EX    R1,$MVCCMD              MOVE CMD
         B     CMDEXSKP                SKIP OVER EXECUTED CODE
         SPACE
$MVCCMD  MVC   WTOAREA+4(*-*),1(R5)    EXECUTED
         SPACE
CMDEXSKP DS    0H
         LA    R1,1(,R1)               GET BACK REAL LENGTH
         SPACE ,
         LR    R0,R1                   AND SAVE IN R0
         MVC   CMDDSECT(CMDHDRLN),CMDWTO MOVE FIRST PART OF WTO COMMAND
         AH    R0,CMDWTO               ADD LEN OF WTO TO LEN OF CMD
         STH   R0,CMDLEN               STORE LENGTH OF COMMAND WTO
         LA    R1,CMDCMD(R1)           POINT PAST CMD
         MVC   0(CWTOLEN-CMDHDRLN,R1),CMDWTO+CMDHDRLN MOVE REST OF WTO
         SPACE
         CLC   CMDCMD(5),REPLYKW       REPLY REQUESTED ?
         BNE   CMDJBNSC                NO, BRANCH TO SCAN FOR JOBNAME
         TM    CTXTTFB1,CTXTTFWR       IS IT A WTOR ?
         BNO   RETERR1                 NO, BR TO ISSUE ERR MSG AND RET
         OI    CTXTRFB2,CTXTRHCO       SET TO HARDCOPY ONLY
         MVC   CMDRPNUM(L'CTXTRPID),CTXTRPID  MOVE IN REPLY NUM
         SPACE
CMDJBNSC DS    0H
         SLR   R7,R7                   CLEAR R7 FOR IC
         IC    R7,0(,R5)               GET LENGTH OF CMD
         S     R7,=A(L'JOBNKW-1)       GET LENGTH OF SEARCH
         BNP   CMDISSUE                SKIP SRCH IF NOT LONG ENOUGH
         LA    R1,CMDCMD               POINT TO CMD IN WTO
         SPACE ,
         DROP  R9
         SPACE ,
CMDSCNLP DS    0H
         CLC   0(8,R1),JOBNKW          SEARCH FOR JOB NAME KEYWORD
         BE    CMDMVJBN                MOVE IN JOBNAME
         LA    R1,1(,R1)               BUMP POINTER
         BCT   R7,CMDSCNLP             LOOP
         B     CMDISSUE                BR TO ISSUE CMD
         EJECT ,
*---------------------------------------------------------------------*
*        MOVE JOBNAME INTO COMMAND IF REQUESTED                       *
*---------------------------------------------------------------------*
         SPACE ,
CMDMVJBN DS    0H
         MVC   0(8,R1),CURJBNM         MOVE IN JOBNAME
         LA    R9,8(,R1)               POINT TO DISPLACE PLACE
         AH    R1,CURJBNLN             ADD LENGTH OF JOBNAME
         LA    R8,8                    MAX JOBNAME LENGTH
         SH    R8,CURJBNLN             AMOUNT TO DISPLACE REST OF WTO
         BNP   CMDMVJB2                SKIP IF NOTHING TO DISPLACE
         LA    R7,0(R8,R7)             GET AMOUNT TO MOVE
         LTR   R7,R7                   IS THERE ANY?
         BNP   CMDMVJB1                NO, SKIP MOVE
         BCTR  R7,0                    LESS ONE FOR EX
         EX    R7,$CMDMVC1             MOVE RIGHT
         B     CMDMVJB1
         SPACE
$CMDMVC1 MVC   0(*-*,R1),0(R9)         EXECUTED
         SPACE
CMDMVJB1 DS    0H
         LA    R9,WTOAREA              POINT TO WTO AREA
         USING CMDDSECT,R9             USE IT
         LH    R1,CMDLEN               LOAD LENGTH OF WTO
         SR    R1,R8                   LESS AMOUNT MOVED
         STH   R1,CMDLEN               STORE NEW LENGTH
CMDMVJB2 DS    0H
         B     CMDISSUE
         DROP  R9
         EJECT ,
*---------------------------------------------------------------------*
*        ISSUE COMMAND                                                *
*---------------------------------------------------------------------*
         SPACE ,
CMDISSUE DS    0H
         LA    R1,WTOAREA              POINT R1 TO COMMAND WTO
         SR    R0,R0                   SHOW COMMAND
         SVC   34                      ISSUE COMMAND
         SLR   R1,R1                   CLEAR FOR IC
         IC    R1,0(,R5)               GET LENGTH
         LA    R5,1(R1,R5)             POINT TO NEXT CMD
         BCT   R4,CMDLOOP              LOOP THROUGH COMMANDS
         SPACE ,
         B     RETURN                  BRANCH TO EXIT
         EJECT ,
CMDWTO   WTO   ' ',ROUTCDE=(1),DESC=(5),MF=L
CWTOLEN  EQU   *-CMDWTO
         EJECT ,
*---------------------------------------------------------------------*
*        ISSUE ERROR MESSAGE WTO                                      *
*---------------------------------------------------------------------*
         SPACE ,
RETERR1  DS    0H
         WTO   'R2D20001 REPLY REQUESTED AND MESSAGE IS NOT A WTOR'
         B     RETURN                  BRANCH TO RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        RETURN TO WHENCE WE CAME, JUST REMEMBER TO DO FREEMAIN       *
*---------------------------------------------------------------------*
         SPACE ,
RETURN   DS    0H
         LR    R1,R10                  GET AREA ADDRESS
         L     R13,SAVE+4              RELOAD SAVE AREA ADDRESS
         FREEMAIN RU,A=(1),LV=WKAREAL,SP=227
         LM    R14,R12,12(R13)         RELOAD REGISTERS
         SLR   R15,R15                 SET RETURN CODE
         BR    R14                     RETURN
         EJECT ,
*---------------------------------------------------------------------*
*        LITERAL POOL                                                 *
*---------------------------------------------------------------------*
         SPACE ,
         LTORG ,
         EJECT ,
*---------------------------------------------------------------------*
*        TABLE OF MESSAGE ID'S TO BE ACTED ON                         *
*---------------------------------------------------------------------*
         SPACE ,
TABLPRMS DC     A(MSGTABS),A(MSGTABE),A(0),A(0)
MSGTABS  DS     0H
         IEEMSG ID=IST020I,CMD1='S TSO',CMD2='$SLGN1;DQ'
MSGTABE  EQU    *
         DC     512X'0'
TABLEND  EQU    *
         EJECT ,
*---------------------------------------------------------------------*
*        "DUMMY" TABLE FOR PASSWORD MESSAGES                          *
*---------------------------------------------------------------------*
         SPACE ,
PSWDMSG  IEEMSG ID=IEC301A,CMD1='R XX,        '
PSWDMSGL EQU   *-PSWDMSG
         EJECT ,
*---------------------------------------------------------------------*
*                CONSTANTS                                            *
*---------------------------------------------------------------------*
         SPACE ,
REPLYKW  DC    CL5'R XX,'
JOBNKW   DC    CL8'&&JOBNAME'
ASIDKW   DC    CL8'&&ASID'
TRHEXTBL EQU   *-X'F0'
         DC    C'01234567'
         DC    C'89ABCDEF'
         EJECT ,
*---------------------------------------------------------------------*
*        PATCH AREA                                                   *
*---------------------------------------------------------------------*
         SPACE ,
         DC    32X'0'
         EJECT ,
*---------------------------------------------------------------------*
*                EQUATES                                              *
*---------------------------------------------------------------------*
         SPACE ,
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        COMMAND DSECT                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
CMDDSECT DSECT
CMDLEN   DS    AL2                     LENGTH OF COMMAND WTO
CMDMCS   DC    B'0000000000000000'     MCS FLAGS
CMDHDRLN EQU   *-CMDDSECT
CMDCMD   EQU   *                       COMMAND GOES HERE
CMDRPNUM EQU   *+2                     REPLYNUM GOES HERE
         EJECT ,
*---------------------------------------------------------------------*
*        CSA TABLE DSECT                                              *
*---------------------------------------------------------------------*
         SPACE ,
         C3POTABL
         EJECT ,
*---------------------------------------------------------------------*
*        MESSAGE TABLE ENTRY DSECT                                    *
*---------------------------------------------------------------------*
         SPACE ,
         MSGENT
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*        SYSTEM DSECTS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE ,
         PRINT ON
         CVT   DSECT=YES
         IHAPSA
         IHASDWA
         IHASRB
         IKJTCB
         IHAASVT
         IHAASCB
         IHARB
         IKJTSB
         IEECUCM FORMAT=NEW,DSECT=YES
         IEZJSCB
         IEFJSSIB
         IHAORE
         IHAWQE
         IEZVX100
         SPACE ,
         IFGRPL
         $HASPEQU
         $HFAME
         $BUFFER
         $PDDB PDDB DSECT
         $TQE
         $SJB
         $JCT
         PRINT ON
         EJECT ,
*---------------------------------------------------------------------*
*        WORK AREA DSECT                                              *
*---------------------------------------------------------------------*
         SPACE ,
WKAREA   DSECT
SAVE     DS    18F                     SAVE AREA
DSN      DS    CL44                    DSN FOR PASSWORD
CURJBNM  DS    CL8                     JOBNAME
CURJBNLN DS    H                       JOBNAME LENGTH
CURASID  DS    F                       ASID
PSWDENT  DS    CL(PSWDMSGL)
         DS    CL88                    ROOM TO EXPAND ENTRY
PSWDRPLY DS    CL8                     PASSWORD REPLY
WTOAREA  DS    CL128                   AREA FOR SVC 34
WKAREAL  EQU   *-WKAREA
         END
