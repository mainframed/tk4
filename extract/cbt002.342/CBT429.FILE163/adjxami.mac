//ADJXAMI JOB
//*
//*  ADJXAMI -
//*    A FRONT-END TO HASPAMI (IN HASPSSSM).  IT SCREENS ALL CARD
//*    IMAGES WRITTEN TO INTERNAL-READER DATASETS, IGNORING ALL
//*    THAT CONTAIN AN EXCLAMATION POINT ("!") IN COLUMN 1.
//*
//*    THIS LITTLE MOD IS REMARKABLY USEFUL.  YOU CAN COMMENT-OUT
//*    LINES OF JCL IN THE MIDDLE OF A CONTINUATION SEQUENCE:
//*        //A JOB 1,YOURNAME,
//*        !/  RESTART=STEPNAME,     <=== THIS CARD IMAGE IS IGNORED
//*        //  CLASS=S
//*    OR IN THE MIDDLE OF INSTREAM DATA:
//*        //SYSIN DD *
//*        ! SORT FIELDS=(1,4,CH,A)
//*          SORT FIELDS=(1,4,PD,A)
//*        /*
//*
//*  INSTALLATION -
//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS
//*    BELOW TO SUIT YOUR TASTE.  THE OUTPUT OF THE LINKEDIT STEP
//*    IS A MODIFIED HASPSSSM; YOU MUST INSERT THE FOLLOWING
//*    CONTROL STATEMENT IN YOUR JESPARMS DATASET TO ACTIVATE
//*    THE CODE:
//*
//*        HASPSSSM=HASPSSDA
//*
//*    YOU MAY ALSO WANT TO MODIFY THE "NAME" CONTROL STATEMENT
//*    TO MAKE YOUR LOAD MODULE NAME CONFORM TO LOCAL REQUIREMENTS.
//*
//*    THE CODE HAS BEEN TESTED UNDER JES2 1.3.6 AND 2.2.0.
//*
//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS
//             TLIB='SYS1.LPALIB',   <=== TARGET LOAD LIBRARY
//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER
//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER
//             LPALIB='SYS1.LPALIB', <=== CURRENT LOCATION OF HASPSSSM
//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS
//             SYSLIB='SYS1.MACLIB'  <=== NAME OF MACRO LIBRARY
//*                                       USE SYS1.MACLIB IF MVS-370
//*                                       USE SYS1.MODGEN IF MVS-XA
//*
//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK'
//STEPLIB  DD  DSN=&ALIB,DISP=SHR
//SYSTERM  DD  SYSOUT=&SOUT
//SYSPRINT DD  SYSOUT=&SOUT
//SYSLIB   DD  DSN=&SYSLIB,DISP=SHR
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSPUNCH DD  DSN=&&FRONT,UNIT=&SYSTS,DISP=(,PASS,DELETE),
//             SPACE=(TRK,(5,1),RLSE)
//*
//LKED    EXEC PGM=HEWL,COND=(0,NE),
//             PARM='LIST,MAP,XREF,RENT,REUS,REFR'
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)
//LPALIB   DD  DSN=&LPALIB,DISP=SHR
//SYSLMOD  DD  DSN=&TLIB,DISP=SHR
//FRONT    DD  DSN=&&FRONT,DISP=(OLD,DELETE)
//        PEND
//*
//        EXEC INSTALL
//ASM.SYSIN DD *
         TITLE 'DUDA "BANGS" SUPPORT - FRONT END TO HASPAMI'
***********************************************************************
*                                                                     *
*  THIS MODULE IMPLEMENTS SUPPORT FOR "BANGS".  IT REPLACES AN OLD    *
*  MOD TO HASPRDR.                                                    *
*                                                                     *
*  ALL CARD IMAGES WRITTEN TO AN INTERNAL READER DATASET ARE SCREENED *
*  FOR AN EXCLAMATION POINT ("!") IN COLUMN 1.  ALL SUCH CARDS ARE    *
*  IGNORED, I.E. THEY ARE NOT SUBMITTED FOR EXECUTION.                *
*                                                                     *
*  THIS LITTLE MOD IS REMARKABLY USEFUL.  YOU CAN COMMENT-OUT LINES   *
*  IN THE MIDDLE OF A CONTINUATION SEQUENCE:                          *
*      //A JOB 1,YOURNAME,                                            *
*      !/  RESTART=STEPNAME,      <=== THIS CARD IMAGE IS IGNORED     *
*      //  CLASS=S                                                    *
*  OR IN THE MIDDLE OF INSTREAM DATA:                                 *
*      //SYSIN DD *                                                   *
*      ! SORT FIELDS=(1,4,CH,A)                                       *
*        SORT FIELDS=(1,4,PD,A)                                       *
*      /*                                                             *
*                                                                     *
***********************************************************************
*                                                                     *
*  HISTORY -                                                          *
*                                                                     *
*  I FIRST IMPLEMENTED "BANG" SUPPRESSION IN IMSRJE, A *VERY* POOR    *
*  MAN'S SPF THAT I CO-AUTHORED (WITH JOHN MCCANN AND JERRY CALLEN)   *
*  IN 1974 FOR A VS/1 IMS SHOP.  WE SOON BECAME DEPENDENT ON THE      *
*  FEATURE, AND WHEN WE INSTALLED IMS-JDS (A FIELD DEVELOPED PROGRAM  *
*  THAT PROVIDED FULL-SCREEN TEXT EDITING AND JOB SUBMISSION), WE     *
*  REFITTED "BANG" SUPPORT TO IT.                                     *
*                                                                     *
*  WHEN WE DID THE MVS CONVERSION A COUPLE OF YEARS LATER AND GOT     *
*  REAL TSO, WE CONSIDERED BUILDING A SUBMIT EXIT TO HANDLE BANG      *
*  SUPPRESSION.  INSTEAD, DAVE PHILLIPS RE-WROTE IT AS A MODIFICATION *
*  TO HASPRDR.                                                        *
*                                                                     *
*  SINCE THEN, IBM HAS RESEQUENCED AND OVERHAULED HASPRDR MANY TIMES. *
*  MAINTAINING THIS MOD HAS GOTTEN TO BE A CONTINUOUS CHORE.  BAH.    *
*                                                                     *
*  I SHOT OFF MY MOUTH AND SAID I COULD IMPLEMENT BANGS WITHOUT       *
*  MODIFYING IBM CODE.  WHAT A MISTAKE THAT WAS.                      *
*                                                                     *
*  (WHY DO I CALL THEM BANGS?  BECAUSE A FRIEND IN 1974 WORKED AT     *
*  A GOVERNMENT INSTALLATION THAT RAN AN SDS SIGMA 7 (REMEMBER SDS?)  *
*  AND THEIR JCL STARTED WITH AN EXCLAMATION POINT.  HE CALLED THEM   *
*  "BANGS", AND SO I DID TOO.)                                        *
*                                                                     *
***********************************************************************
         EJECT ,
***********************************************************************
*                                                                     *
*  THIS CODE FRONT-ENDS HASPAMI, AND MUST BE LINK-EDITED INTO THE     *
*  JES2 SUBSYSTEM SUPPORT MODULE (HASPSSSM).                          *
*                                                                     *
*  HASPAMI GETS CONTROL FOR A VARIETY OF REASONS, BUT THE ONE WE ARE  *
*  INTERESTED IN IS WHEN A "PUT" RPL ADDRESSES AN INTERNAL READER     *
*  ACB.  FOR SUCH CASES, WE INSPECT THE USER DATA AREA, FIND OUT IF   *
*  IT STARTS WITH A BANG, AND RETURN TO THE USER WITHOUT DOING A      *
*  THING IF IT DOES.                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
*  AUTHOR -                                                           *
*    DAVID ANDREWS                              AUGUST, 1990          *
*    A. DUDA AND SONS, INC.                                           *
*    P.O. BOX 257                                                     *
*    OVIEDO, FL  32765                                                *
*    (407) 365-2153   FAX: (407) 365-2148                             *
*                                                                     *
***********************************************************************
*                                                                     *
*  REGISTERS AT ENTRY:                                                *
*    R0  = HASPAMI FUNCTION CODE                                      *
*    R1 -> RPL                                                        *
*    R14 = RETURN ADDRESS                                             *
*    R15 = ENTRY ADDRESS                                              *
*                                                                     *
***********************************************************************
         SPACE ,
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT ,
ADJXAMI  CSECT ,
         USING ADJXAMI,R15         TEMP'Y BASE
         B     ADJXSAVE            BRANCH AROUND ADCON AND ID
         DC    A(ADJSVC)           SVC 111 (HAM SVC) BRANCHES @HERE
         DC    C'ADJXAMI-&SYSDATE-&SYSTIME'
ADJXSAVE STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             R12 IS PROGRAM BASE
         DROP  R15                      "
         USING ADJXAMI,R12              "
         USING IFGRPL,R1           R1 IS RPL BASE
         SPACE ,
*
*  IS THIS A PUT OPERATION?
*
         CL    R0,=A(RPLPUT)       CHECK R0 FOR PUT REQUEST
         BNE   PASSTHRU            NO, PASS THRU TO REAL HASPAMI
         SPACE ,
*
*  IS THIS PUT OPERATION FOR AN INTERNAL READER ACB?
*
         L     R3,RPLDACB          GET ACB POINTER
         USING IFGACB,R3                "
         CLI   ACBID,ACBIDVAL      VALID ACB?
         BNE   PASSTHRU            NO, LET REAL HASPAMI HANDLE IT
         TM    ACBINRTN,ACBINR     IF ACB IS NOT FOR AN INTERNAL READER
         BZ    PASSTHRU            ... THEN PASS REQUEST TO HASPAMI
         SPACE ,
*
*  SEE IF USER AREA STARTS WITH A BANG.
*
         ICM   R2,B'1111',RPLRLEN  MORE THAN ZERO BYTES?
         BNH   PASSTHRU            NO, LET HASPAMI HANDLE IT
         L     R2,RPLAREA          R2 -> USER AREA
         LA    R2,0(,R2)                "
         CLI   0(R2),C'!'          COLUMN 1 A BANG?
         BNE   PASSTHRU            NO, PASS TO HASPAMI
         SPACE ,
*
*  HERE IS A BANG FOR US TO SUPPRESS!  DON'T ENTER THE REAL HASPAMI
*  CODE, JUST RETURN TO THE USER INDICATING THAT EVERYTHING WENT OKAY.
*
         STC   R0,RPLREQ           STORE REQUEST CODE INTO RPL
         TM    RPLOPT1,RPLASY      ASYNCHRONOUS RPL?
         BO    TOUSER              YES, DON'T SET RETURN CODE
         NC    RPLFDBK,=X'F000'    ZERO FEEDBACK FIELD IN RPL
         MVI   RPLCMPON,2          COMPID
         MVC   16(4,R13),=F'0'     ZERO R15 IN SAVEAREA
         LA    R2,RPLECB           POINT TO ECB
         TM    RPLOPT1,RPLECBSW    EXTERNAL ECB?
         BZ    ECBMERGE            NO, BRANCH
         L     R2,RPLECB           POINT TO EXTERNAL ECB
ECBMERGE MVI   0(R2),X'40'         MARK ECB "POSTED"
TOUSER   LM    R14,R12,12(R13)     RETURN TO CALLER
         BR    R14                      "
         SPACE ,
*
*  PASS THRU TO REAL HASPAMI, WE DIDN'T FIND ANYTHING INTERESTING HERE.
*
PASSTHRU L     R15,=V(HASPAMI)     GET HASPAMI ENTRY
         L     R14,12(,R13)        RESTORE REG 14
         LM    R0,R12,20(R13)      RESTORE REGS 0-12
         BR    R15                 BRANCH-ENTER HASPAMI CODE
         LTORG
         DROP ,
         TITLE 'DUDA "BANGS" SUPPORT - FRONT END TO HAM SVC'
***********************************************************************
*                                                                     *
*  THIS CODE GETS CONTROL EACH TIME SVC 111 (THE "HASP ACCESS         *
*  METHOD") SVC IS USED.                                              *
*                                                                     *
*  MUCH OF HASPAM CAN RUN IN USER KEY AND STATE, BUT WHENEVER         *
*  ANYTHING MAGIC HAS TO HAPPEN, HAMSVC IS GIVEN CONTROL IN           *
*  MAGIC STATE BY SVC 111.  BASICALLY, SVC 111 IS A "GET INTO         *
*  SUPERVISOR STATE KEY ZERO" SVC FOR USE BY JES.                     *
*                                                                     *
*  SVC 111 DOES AUTHORITY CHECKING BY BEING PASSED A DEB.  IT         *
*  DEBCHECKS IT TO MAKE SURE IT IS VALID AND THEN BRANCHES OFF        *
*  TO THE ADDRESS STORED IN DEBAPPAD.  THIS ADDRESS IS NORMALLY       *
*  THAT OF "HAMSVC" IN MODULE HASPAM, AND IS SET IN THE DEB BY        *
*  HOSOPEN.                                                           *
*                                                                     *
*  THE PROBLEM IS THAT HOSOPEN GETS THE ADDRESS OF HAMSVC FROM AN     *
*  ADCON LOCATED +4 BYTES INTO HASPAMI.  BECAUSE WE FRONT-END         *
*  HASPAMI, THE ADCON FETCHED WILL COME FROM +4 BYTES INTO *THIS*     *
*  MODULE - ADJXAMI.  AND I DON'T KNOW WHERE HAMSVC IS - IT'S NOT     *
*  AN EXTERNAL REFERENCE.                                             *
*                                                                     *
*  SO HERE'S WHAT WE DO: WE SET THE ADCON TO POINT HERE, WHEREUPON    *
*  AT RUN TIME WE FETCH THE ADCON FROM HASPAMI, AND DO THE BRANCH     *
*  OURSELVES.                                                         *
*                                                                     *
*  WE CAN ONLY FOOL WITH REGISTER 15.                                 *
*                                                                     *
***********************************************************************
         USING ADJSVC,R15
ADJSVC   L     R15,=V(HASPAMI)      POINT TO HASPAMI
         DROP  R15                 LOSE ADDRESSABILITY
         L     R15,4(,R15)         POINT TO HAMSVC
         BR    R15                 BRANCH ENTER HAMSVC
         LTORG ,
         SPACE ,
         PRINT NOGEN
         IFGACB ,                  ACB DSECT
ACBINR   EQU   X'04'               FROM SYS1.HASPSRC($MODULE)
         IFGRPL ,                  RPL DSECT
         END
/*
//LKED.SYSLIN   DD *
 CHANGE  HASPAMI(ADJXAMI)    CHANGE REFERENCES FROM HASPAMI TO ADJXAMI
 REPLACE HASPAM              DISCARD THE CHANGED HASPAM CONTROL SECTION
 INCLUDE LPALIB(HASPSSSM)      FROM <--THIS--< LOAD MODULE
 INCLUDE LPALIB(HASPSSSM)    INCLUDE THE ORIGINAL HASPAM CSECT
 INCLUDE FRONT               INCLUDE THE FRONT-END CODE ADJXAMI
 ENTRY HASPSSSM
 SETCODE AC(1)
 NAME HASPSSDA(R)            <=== CHANGE THIS NAME IF YOU LIKE
/*
