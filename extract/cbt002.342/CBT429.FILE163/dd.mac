//DD       JOB
//*
//*  DD -
//*    IS A TSO COMMAND THAT DISPLAYS DATASET ATTRIBUTES.
//*    IT DOESN'T REQUIRE THAT A DATASET BE CATALOGED, AND
//*    IT PROVIDES MORE INFORMATION FOR NONVSAM DATASETS
//*    (AND GENERATION DATA GROUPS) THAN LISTCAT DOES.
//*
//*  DDX -
//*    AN ALIAS FOR "DD".  IF THE THIRD CHARACTER OF THE TSO
//*    COMMAND NAME IS THE LETTER "X", THE COMMAND CLEARS
//*    THE 3270 SCREEN BEFORE DISPLAYING ANY INFORMATION.
//*    ALTHOUGH THIS SOUNDS LIKE A KLUGE, IT IS ACTUALLY A
//*    PRETTY USEFUL ONE.  I USE "DDX" ALL THE TIME.
//*
//*  INSTALLATION -
//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS
//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE
//*    COMMAND NAME AND ALIAS YOU WILL HAVE TO DOCTOR THE
//*    JOBSTREAM.  THERE IS CODE IN THE PROGRAM THAT DEPENDS
//*    ON THE COMMAND NAME BEING "DD" (NEAR SEQUENCE # 00227000)
//*
//*  BUGS -
//*    DD CALCULATES THE NUMBER OF RECORDS FOR FB/PS DATASETS.
//*    THE CALCULATION IS IN ERROR.  IF YOU FEEL LIKE FIXING
//*    THIS, BE MY GUEST, IT HAS IRRITATED ME FOR SOME TIME.
//*
//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS
//             LIB='SYS1.CMDLIB',    <=== TARGET LOAD LIBRARY
//             HELP='SYS1.HELP',     <=== HELP LIBRARY
//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS
//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER
//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER
//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME
//             MACLIB='SYS1.MACLIB', <=== MACLIB DATASET NAME
//             AMODGEN='SYS1.AMODGEN', <=== AMODGEN DATASET NAME
//             MODGEN='SYS1.MODGEN'  <=== MACRO LIBRARY NAME
//*                                       (USE SYS1.SMPMTS FOR MVS-370)
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  DSN=&HELP,DISP=SHR
//SYSUT2   DD  DSN=&HELP,DISP=SHR
//*
//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'
//STEPLIB  DD  DSN=&ALIB,DISP=SHR
//SYSTERM  DD  SYSOUT=&SOUT
//SYSPRINT DD  SYSOUT=&SOUT
//SYSLIB   DD  DSN=&MODGEN,DISP=SHR
//         DD  DSN=&SMPMTS,DISP=SHR
//         DD  DSN=&MACLIB,DISP=SHR
//         DD  DSN=&AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),
//             SPACE=(TRK,(5,1),RLSE)
//*
//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,RENT,REFR'
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)
//SYSLMOD  DD  DSN=&LIB,DISP=SHR
//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)
//         DD  DDNAME=SYSIN
//        PEND
//*
//        EXEC INSTALL
//IEBUPDTE.SYSIN DD *
./         ADD    NAME=DD,LIST=ALL
./         NUMBER NEW1=1000,INCR=1000
./         ALIAS  NAME=DDX
)F FUNCTION -
         -   THE DD COMMAND DISPLAYS INFORMATION ON AN OS
             DATASET.  AT A MINIMUM THE CATALOG INFORMATION IS
             DISPLAYED (VOLSER AND DEVICE TYPES) AND IF THE DATASET
             IS ON A MOUNTED DASD, DEVICE INFORMATION FROM THE
             DATASET'S DSCB IS DISPLAYED.

             AUTHOR -   DAVE PHILLIPS
                        A. DUDA AND SONS, INC.
                        P.O. BOX 257
                        OVIEDO, FL  32765

)X SYNTAX -
         DD 'DATASET-NAME'  PARTIAL OR
                            GENERATION(number) OR
                            VOLUME(name)

  DEFAULTS -  DATASET-NAME DEFAULTS TO TSO USERID PREFIX
  ALIAS    -  DDX  (DOES CLEAR COMMAND BEFORE DISPLAY)
  ABBREVIATIONS -  PARTIAL    ===> P
                   GENERATION ===> G
                   VOLUME     ===> V

)O OPERAND -
  'dataset-name'
         - SPECIFIES THE COMPLETE OR PARTIAL NAME OF THE DATA SET
           WHICH IS TO BE SAERCHED FOR.

))PARTIAL - SPECIFIES A PARTIAL DATA SET NAME SEARCH
))GENERATION(number)  - LISTS DATA SET' DSCB INFORMATION FOR THE
                        GENERATION LEVEL SPECIFIED.
))VOLUME(name) - SPECIFIES THE VOLUME NAME ON WHICH THE DATA SET
                 RESIDES.  IF A VOLUME NAME IS ENTERED, SYSALLDA IS
                 ASSUMED AS THE UNIT NAME; OTHERWISE, THE UNIT NAME
                 FROM THE CATALOG IS USED.

                 NOTE:  THIS PARAMETER SHOULD BE USED IF THE DATA SET
                 IS NOT CATALOGED OR IF THE CATALOG ENTRY IS NOT TO BE
                 USED.


  EXAMPLES:

dd 'men.dp.pub.lib'

DSN = MEN.DP.PUB.LIB
3380 - INTLIB
DSORG PO  RECFM U  BLKSIZE 11,476  LRECL 11,476
C- 7/25/88  KEYLEN 0  RKP 0  #EXTS 1
U- 8/19/88  CHANGED
ALLOC IN CYL  SEC 1  TOTAL 3 CYL  USED 1 CYL 4 TRK
EXTENTS  #   CCC HH     CCC HH
         1.  209 00  -  211 14    3 CYL

dd 'x.file22' p

CATALOG: CATALOG.USER
NON-VSAM ------ X.FILE225.DATA
NON-VSAM ------ X.FILE226.DATA
NON-VSAM ------ X.FILE227.PDS
NON-VSAM ------ X.FILE229.DATA

dd 'od.abrcat'

CATALOG: CATALOG.USER
NON-VSAM ------ OD.ABRCAT.G0631V00
NON-VSAM ------ OD.ABRCAT.G0632V00
NON-VSAM ------ OD.ABRCAT.G0633V00

dd 'od.abrcat' g(-1)

DSN = OD.ABRCAT.G0632V00
3380 - VSAM01
DSORG PS  RECFM VBS  BLKSIZE 23,476  LRECL 32,404
C- 8/18/88  KEYLEN 0  RKP 0  #EXTS 1
U- 8/18/88
ALLOC IN CYL  SEC 1  TOTAL 1 CYL  USED 3 TRK
EXTENTS  #   CCC HH     CCC HH
         1.  146 00  -  146 14    1 CYL

dd 'sys1.logrec' v(altres)

DSN = SYS1.LOGREC
3380 - ALTRES
DSORG PS  RECFM U  BLKSIZE 1,944  LRECL 0
C-11/09/86  KEYLEN 0  RKP 0  #EXTS 1
U- 6/08/88
ALLOC IN CYL  SEC 0  TOTAL 5 CYL  USED 5 CYL
EXTENTS  #   CCC HH     CCC HH
         1.  448 00  -  452 14    5 CYL
./        ENDUP
/*
//ASM.SYSIN DD *
DSINFO   TITLE 'DATASET INQUIRY FUNCTION                HOUSEKEEPING AN*
               D PARSE COMMAND BUFFER'
         SPACE 2
*
* FUNCTION -
*            THIS PROGRAM DISPLAYS INFORMATION ON A OS DATASET. AT A
*            MINIMUM THE CATALOG INFORMATION IS DISPLAYED (VOLSER AND
*            DEVICE TYPES) AND IF THE DATASET IS ON A MOUNTED DASD
*            DEVICE INFORMATION FROM THE DATASET'S DSCB IS DISPLAYED.
*
* AUTHOR -
*            DAVE PHILLIPS
*              A. DUDA AND SONS, INC.
*              P.O. BOX 257
*              OVIEDO, FL  32765
*
* CHANGES OCTOBER 1990 (DAVID ANDREWS) -
*            PROGRAM MODIFIED TO USE THE MVS UNIT VERIFICATION
*            SERVICE (IEFEB4UV) IN THE EVENT THAT THE DEVICE NAME
*            TABLE CANNOT BE LOCATED (DEVNAMET DISAPPEARED IN
*            MVS/XA).  ALSO REPLACED SOME CODE THAT SCANNED THE
*            UCB LOOKUP TABLE WITH OTHER CODE THAT USES IOSVSUCB
*            (THE UCB LOOKUP TABLE ALSO DISAPPEARED IN MVS/XA).
*
         SPACE
DSINFO   CSECT
         SPACE
         SAVE  (14,12),,DSINFO-&SYSDATE-&SYSTIME
         SPACE
         LR    R11,R15            LOAD FIRST BASE
         LA    R12,X'FFF'(,R11)   COMPUTE
         LA    R12,1(,R12)        SECOND BASE
         USING DSINFO,R11,R12
         LR    R6,R1              SAVE PARM
         SPACE
         LA    R0,CORESIZE
         GETMAIN R,LV=(0)         GET A WORK AREA
         ST    R13,4(,R1)         )
         ST    R1,8(,R13)         ) CHAIN SAVE AREAS
         LR    R13,R1             )
         USING CORE,R13
         SPACE 2
* BUILD ALL SERVICE ROUTINE PARAMETER BLOCKS & LISTS
         SPACE
         MVI   FLAGS,0
         USING CPPL,R6
         LA    R4,PPLSECT         -> PPL
         USING PPL,R4
         LA    R5,IOPLSECT        -> IOPL
         USING IOPL,R5
         L     R1,CPPLUPT         -> UPT
         L     R2,CPPLECT         -> ECT
         SR    R3,R3
         ST    R3,ECB             ZERO ECB
         LA    R3,ECB             -> ECB
         STM   R1,R3,PPLSECT      PUT ADDR OF UPT,ECT,ECB IN PPL
         STM   R1,R3,IOPLSECT     PUT ADDR OF UPT,ECT,ECB IN IOPL
         LA    R3,IOPB            -> PUTLINE PARM BLOCK
         ST    R3,IOPLIOPB        PUT IN IOPL
         MVC   PPLPCL,PCLADDR     MOVE PTR TO PCL TO PPL
         LA    R2,PARSBACK        -> PARSE ANSWER AREA
         ST    R2,PPLANS          IN PPL
         L     R1,CPPLCBUF        CBUF PTR IN PPL
         ST    R1,PPLCBUF
         CLI   6(R1),C' '         3RD CHAR OF CMD NAME BLANK ?
         BE    *+8                YES - MUST BE 'DD'
         OI    FLAGS,CLRSCN       NO  - MUST BE 'DDX'
         SPACE
         LH    R0,0(R1)           LENGTH OF CBUF
         LH    R1,2(R1)           OFFSET TO PARMS IN CBUF
         LA    R1,4(,R1)          ADJUST TO SAME SCALE AS LENGTH
         CR    R1,R0              PARAMETERS ???
         BL    DOPARSE            YES - PARSE THEM                     *
                                  NO - SET UP DEFAULT DSNAME
         L     R1,CPPLUPT         -> UPT
         SR    R0,R0              CLEAR FOR INSERT
         ICM   R0,B'0001',23(R1)  LENGTH OF PREFIX
         BZ    DOPARSE            NO PREFIX - PROMPT FOR DSNAME
         STH   R0,DSNLEN          LENGTH OF PREFIX IS LEN OF DSNAME
         MVI   DSNAME,C' '        BLANK OUT DSNAME FIELD
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DSNAME(7),16(R1)   GET PREFIX FROM UPT
         MVI   VOLSER,C' '        BLANK OUT VOLSER FIELD
         MVC   VOLSER+1(L'VOLSER-1),VOLSER
         OI    FLAGS,NOVOL        NO VOLSER SUPPLIED
         B     PARMDONE           ALL DONE
         SPACE
DOPARSE  SR    R1,R1
         ST    R1,PPLUWA          ZERO UWA PTR
         SPACE
         DROP  R4,R5,R6
         SPACE 2
* CALL PARSE SERVICE ROUTINE TO GET PARAMETERS
         SPACE
         CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)
         SPACE
         LTR   R15,R15            PARSE OK ?
         BZ    PARSEOK            YES
         SPACE
         CH    R15,=H'4'          USER PROFILE NOPROMPT ?
         BE    RETURN             YES - GO AWAY
         SPACE
         LA    R1,GFPARSE         ROUTINE ID FOR GENERAL FAIL
         B     GNRLFAIL           GET GENERAL FAIL TO DIAGNOSE ERROR
         TITLE 'DATASET INQUIRY FUNCTION                PROCESS PARMS R*
               ETURNED BY PARSE'
         SPACE 2
PARSEOK  L     R5,PARSBACK        -> PDL AREA
         USING IKJPARMD,R5
         SPACE
         MVI   DSNAME,C' '        BLANK OUT DSNAME FIELD
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         SPACE
         TM    DSNIN+6,X'80'      DSNAME SPECIFIED ?
         BO    GETDSN             YES
         SPACE
         OI    FLAGS,FILETYPE     REMEMBER WE HAVE FILE TYPE PARMS
         MVI   DDNAME,C' '        BLANK OUT DDNAME FIELD
         MVC   DDNAME+1(L'DDNAME-1),DDNAME
         L     R1,DSNIN+8         -> MEMBER
         LH    R2,DSNIN+12        MEMBER LENGTH
         LA    R3,DDNAME          -> AREA TO MOVE TO
         BCTR  R2,0               MINUS ONE FOR EX MVC
         EX    R2,MOVEPARM        GET DSN
*        MVC   0(*-*,R3),0(R1)
         B     PARMSET            DONE WITH PARMS
         SPACE
GETDSN   L     R1,DSNIN           -> DSNAME
         LH    R2,DSNIN+4         DSNAME LENGTH
         STH   R2,DSNLEN          SAVE IT
         LA    R3,DSNAME          -> AREA TO MOVE TO
         BCTR  R2,0               MINUS ONE FOR EX MVC
         EX    R2,MOVEPARM        GET DSN
*        MVC   0(*-*,R3),0(R1)
         SPACE
         CLI   PARTLKY+1,0        PARTIAL KEYWORD SPECIFIED ?
         BE    *+8                NOPE
         OI    FLAGS,PARTIAL      YES - REMEMBER THAT
         SPACE
         MVI   VOLSER,C' '        BLANK OUT VOLSER FIELD
         MVC   VOLSER+1(L'VOLSER-1),VOLSER
         SPACE
         OI    FLAGS,NOVOL        ASSUME NO VOLSER SPECIFIED
         SPACE
         TM    VOLIN+6,X'80'      IS A VOLSER PRESENT
         BZ    CHK4GEN            NOPE
         SPACE
         NI    FLAGS,X'FF'-NOVOL  HAVE A VOLSER - RESET FLAG
         SPACE
         L     R1,VOLIN           -> VOLSER
         LH    R2,VOLIN+4         LENGTH
         LA    R3,VOLSER          -> AREA FOR VOLSER
         BCTR  R2,0               MINUS ONE FOR EX
         EX    R2,MOVEPARM
*        MVC   0(*-*,R3),0(R1)
         SPACE
         B     PARMSET            DONE WITH PARMS
         SPACE
CHK4GEN  TM    GENIN+6,X'80'      IS A GENERATION NUMBER PRESENT
         BZ    PARMSET            NOPE
         OI    FLAGS,GDGDSN       REMEMBER THAT
         LH    R1,DSNLEN          LENGTH OF DSNAME
         LA    R1,9(,R1)          PLUS LENGTH OF .G0000V00
         STH   R1,DSNLEN
         L     R1,GENIN           -> GENERATION NUMBER
         LH    R2,GENIN+4         LENGTH
         CLI   0(R1),C'-'         RELATIVE GENERATION NUMBER ?
         BNE   ABSGEN             NO - ABSOLUTE GENERATION NUMBER
         LA    R3,DSNAME+1        -> DSNAME + 1
         AH    R3,DSNIN+4         -> AFTER DSNAME + 1
         BCTR  R2,0               MINUS ONE FOR EX
         EX    R2,MOVEPARM
*        MVC   0(*-*,R3),0(R1)
         SPACE
         LA    R3,DSNAME          -> DSNAME
         AH    R3,DSNIN+4         -> AFTER DSNAME
         MVI   0(R3),C'('         LEFT PAREN
         AH    R3,GENIN+4         -> END OF GENERATION NUMBER
         LA    R3,1(,R3)          -> AFTER GENERATION NUMBER
         MVI   0(R3),C')'         CLOSE PAREN
         B     PARMSET
         SPACE
ABSGEN   LA    R3,DSNAME          -> DSNAME
         AH    R3,DSNIN+4         -> PAST DSNAME
         MVC   0(9,R3),=C'.G0000V00'   MOVE IN GENERATION PATTERN
         LA    R4,4               COMPUTE OFFSET
         SR    R4,R2              TO MOVE GEN TO
         LA    R3,2(R4,R3)        -> SPOT TO MOVE GEN TO
         BCTR  R2,0               MINUS ONE FOR EX
         EX    R2,MOVEPARM
*        MVC   0(*-*,R3),0(R1)
         SPACE
         LA    R3,DSNAME          -> DSNAME
         AH    R3,DSNIN+4         -> PAST DSNAME
         CLC   0(9,R3),=C'.G0000V00'   WAS GENERATION NUMBER ZERO ?
         BNE   PARMSET            NO - OK
         MVI   0(R3),C' '         BLANK OUT .G0000V00
         MVC   1(8,R3),0(R3)
         MVC   0(3,R3),=C'(0)'    CHANGE TO RELATIVE GENERATION
         SPACE 2
         DROP  R5                 FINISHED WITH PDL
         SPACE 2
PARMSET  IKJRLSA PARSBACK          RELEASE PARSE STORAGE
         SPACE 2
PARMDONE BAL   LINK,SETBUFR       SETUP I/O BUFFER
         USING OUTRECD,OUTPTR     ESTABLISH OUTPUT BUFFER
         TITLE 'DATASET INQUIRY FUNCTION                EXTRACT VOLUME *
               AND UNIT FOR UNCATALOGED DATASETS'
         TM    FLAGS,GDGDSN       GENERATION NUMBER USED ???
         BO    DOLOCATE           USE LOCATE TO DECODE GDG NUMBER
         SPACE
         TM    FLAGS,NOVOL        NO VOLSER ?
         BO    GENLOC             DO GENERIC LOCATE FIRST
         SPACE
         TM    FLAGS,FILETYPE     FILE TYPE INPUT ?
         BO    SRCHFILE           LOOK UP FILE IN TIOT
         SPACE 2
* LOOK UP UCB FOR GIVEN VOLSER TO GET DEVICE TYPE
         SPACE
         MVC   LINE(6),=C'DSN = '          LABEL
         MVC   LINE+6(L'DSNAME),DSNAME     DISPLAY DSNAME
         LH    R1,DSNLEN                   LENGTH OF DSNAME
         LA    OUTPTR,LINE+6(R1)           -> END OF LINE
         BAL   LINK,NEWLINE                NEXT LINE
         SPACE
         L     R3,CVTPTR          -> CVT
         USING CVTMAP,R3
         XC    IOSVSWRK,IOSVSWRK  INITIALIZE SCAN WORKAREA     10/16/90
         LA    R1,IOSVSWRK        BUILD IOSVSUCB PARM LIST     10/16/90
         ST    R1,IOSVSPRM             "                       10/16/90
         LA    R1,IOSVSDEV             "                       10/16/90
         ST    R1,IOSVSPRM+4           "                       10/16/90
         LA    R1,IOSVSUCB             "                       10/16/90
         ST    R1,IOSVSPRM+8           "                       10/16/90
         OI    IOSVSPRM+8,X'80'        "                       10/16/90
         MVI   IOSVSDEV,UCB3DACC  DIRECT ACCESS ONLY           10/16/90
UCBLOOP  L     R15,CVTUCBSC       -> IOSVSUCB UCB SCAN RTN     10/16/90
         LA    R1,IOSVSPRM        -> IOSVSUCB PARAMETER LIST   10/16/90
         BALR  R14,R15            GET POINTER TO NEXT UCB      10/16/90
         LTR   R15,R15            ANYMORE UCBS?                10/16/90
         BNZ   OBTN4              NO, VOLUME NOT MOUNTED       10/16/90
         L     R2,IOSVSUCB        POINT TO UCB                 10/16/90
         USING UCB,R2                  "                       10/16/90
         AGO   .BYPASS1                                        10/16/90
         L     R3,CVTILK2         -> UCB ADDR TABLE
         DROP  R3
         SR    R2,R2
         USING UCB,R2
UCBLOOP  ICM   R2,B'0011',0(R3)   -> UCB
         LA    R3,2(,R3)          -> NEXT UCB PTR
         BZ    UCBLOOP            NEXT UCB IF NULL
         CL    R2,=X'0000FFFF'    END OF TABLE ?
         BE    OBTN4              YES - VOLUME NOT MOUNTED
         TM    UCBTBYT3,UCB3DACC  DASD ?
         BNO   UCBLOOP            NO
.BYPASS1 ANOP  ,                                               10/16/90
         CLC   VOLSER,UCBVOLI     THIS THE VOLUME ?
         BNE   UCBLOOP            NO
         DROP  R3                 FORGET ABOUT CVT             10/16/90
         SPACE
GOTUCB   MVC   DEVTYPE,UCBTYP+3   SAVE DEVICE TYPE
         L     R0,UCBTYP          DEVICE CODE
         LR    R1,OUTPTR          -> OUTPUT AREA
         BAL   LINK,UCBTRAN       GET DEVICE NAME
         MVI   1(R1),C'-'         JUST FOR LOOKS
         MVC   3(6,R1),VOLSER     WRITE OUT VOLSER
         LA    OUTPTR,9(R1)       -> PAST
         BAL   LINK,NEWLINE       WRITE OUT LINE
         B     OBTAIN             AND GO FETCH DSCB
         EJECT
* LOOK UP DDNAME IN TIOT TO GET DSNAME AND VOLSER
         SPACE
SRCHFILE L     R1,CVTPTR          -> CVT
         USING CVTMAP,R1
         L     R1,CVTTCBP         -> TCB WORDS
         L     R1,4(,R1)          -> TCB
         USING TCB,R1
         L     R1,TCBTIO          -> TIOT
         USING TIOT,R1
         LA    R3,TIOENTRY        -> FIRST DD ENTRY
         DROP  R1
         USING TIOENTRY,R3
         SR    R2,R2              CLEAR TIOT LENGTH REGISTER
         SPACE
DDLOOP   AR    R3,R2              -> NEXT DD ENTRY
         ICM   R2,1,TIOELNGH      LENGTH OF DD ENTRY
         BZ    NOFILE             YES - END OF TIOT
         CLC   DDNAME,TIOEDDNM    THIS OUR DDNAME ?
         BNE   DDLOOP             NOPE - LOOP
GOTDD    ICM   R2,B'0111',TIOEJFCB   -> JFCB
         BZ    BADFILE            NO JFCB
         MVC   DSNAME,16(R2)      GET DSNAME OUT OF JFCB
         LA    R1,L'DSNAME        -> STRING
         LA    R0,DSNAME          STRING LENGTH
         BAL   R14,CHOPSTR        DETERMINE LENGTH OF DSNAME
         STH   R0,DSNLEN          SAVE IT
         SPACE
         ICM   R2,B'0111',TIOEFSRT   -> UCB
         BZ    BADFILE            NO UCB - ERROR
         USING UCB,R2
         SPACE
         TM    UCBTBYT3,UCB3DACC  DASD ?
         BNO   BADFILE            NO - INVALID
         SPACE
         MVC   VOLSER,UCBVOLI     GET VOLSER
         MVC   DEVTYPE,UCBTYP+3   SAVE DEVICE TYPE
         SPACE
         MVC   LINE(7),=C'FILE = '         LABEL
         MVC   LINE+7(8),DDNAME            DISPLAY FILE NAME
         MVC   LINE+21(6),=C'DSN = '       LABEL
         MVC   LINE+27(L'DSNAME),DSNAME    DISPLAY DSNAME
         LA    OUTPTR,LINE+27+L'DSNAME     -> END OF LINE
         BAL   LINK,NEWLINE                NEXT LINE
         SPACE
         L     R0,UCBTYP          DEVICE CODE
         LR    R1,OUTPTR          -> OUTPUT AREA
         BAL   LINK,UCBTRAN       GET DEVICE NAME
         MVI   1(R1),C'-'         JUST FOR LOOKS
         MVC   3(6,R1),VOLSER     WRITE OUT VOLSER
         TM    UCBJBNR,UCBVRDEV   VIO UCB ?
         BNO   *+10               NO
         MVC   3(6,R1),=C'(VIO) ' YES - FLAG VOLUME AS VIO VOLUME
         LA    OUTPTR,9(R1)       -> PAST
         BAL   LINK,NEWLINE       WRITE OUT LINE
         B     OBTAIN             AND GO FETCH DSCB
         TITLE 'DATASET INQUIRY FUNCTION                GET CATALOG INF*
               ORMATION'
* DO A GENERIC LOCATE TO FULLY QUALIFY DATASET
         SPACE
GENLOC   L     R0,GLWKSIZE        SIZE OF GENERIC LOCATE WORKAREA
         GETMAIN R,LV=(0)         GET WORK AREA FOR GENERIC LOCATE
         ST    R1,GENWKA          WORK AREA PTR
         ST    R1,@GENWKA         KEEP OUR OWN COPY
         MVC   0(4,R1),GLWKHDR    HEADER FOR WORKAREA
         SPACE
         MVC   GENLPARM(4),GENLFLAG   FLAGS INDICATING FUNCTION
         LA    R2,DSNLENC         -> GENERIC KEY
         ST    R2,GENDSN
         XC    GENCAT,GENCAT      NO CATALOG DSNAME SUPPLIED
         XC    GENX1,GENX1        ZERO UNUSED WORDS
         SPACE
         LH    R3,DSNLEN          LENGTH OF DSNAME
         TM    FLAGS,PARTIAL      PARTIAL DSNAME SUPPLIED ?
         BO    PARTDSN            YES - DON'T ADD PERIOD TO END
         LA    R2,DSNAME(R3)      -> PAST END OF DSNAME
         MVI   0(R2),C'.'         ADD TRAILING PERIOD
         LA    R3,1(R3)           BUMP LENGTH
PARTDSN  STC   R3,DSNLENC         STORE IT FOR GENLOC
         SPACE
         LOCATE GENLPARM          DO GENERIC LOCATE
         SPACE
         OI    FLAGS,SINGDSN      ASSUME SINGLE DSNAME RETURNED
         L     R8,@GENWKA         -> GENLOC WORK AREA
         LTR   R15,R15            GENERIC LOCATE OK ?
         BZ    GENLOCOK           YES - USE IT
         SPACE
         CH    R15,=Y(X'2C')      WORK AREA FILLED UP ?
         BNE   BADGENL            NO
         SPACE
         MVC   LINE(L'FILLMSG),FILLMSG    OUTPUT
         LA    OUTPTR,LINE+L'FILLMSG      ERROR
         BAL   LINK,NEWLINE               MESSAGE
         LH    R2,GLWKMAXR        SET LENGTH USED SINCE IT'S NOT
         STH   R2,2(,R8)          RETURNED BY THIS PARTICULAR RC
         SPACE
GENLOCOK LH    R2,2(,R8)          NUMBER OF BYTES USED OF WORKAREA
         CH    R2,=Y(4+(45*2))    MORE THAN ONE DSN RETURNED ??
         BNH   ONEDSN             NOPE
         SPACE
* MORE THAN ONE DATASET RETURNED - SO JUST LIST THEM OUT
         SPACE
         NI    FLAGS,X'FF'-SINGDSN   RESET FLAG
         LA    R3,4(R8)           -> START OF DSNAMES
         LA    R4,45              INCREMENT
         LA    R5,0(R2,R8)        -> END OF DSNAMES
         BCTR  R5,0               -1 SO DO NOT TRIP ON EQUAL
         SPACE
DSNLOOP  DS    0H                 LOOP WRITING OUT DSNAMES
         SPACE
         CLI   0(R3),C'0'         CATALOG ENTRY ?
         BNE   GETTYP             NO - OTHER
         MVC   LINE(9),=C'CATALOG: '     YES - LABEL IT
         MVC   LINE+9(44),1(R3)          MOVE IN CATALOG NAME
         LA    OUTPTR,LINE+53            -> PAST
         LA    LINK,NXTDSN               RETURN ADDR
         B     NEWLINE                   WRITE IT OUT
         SPACE
GETTYP   LA    R1,TYPTABLE        -> TYPES OF ENTRIES FROM GENLOC
         LA    R2,TYPCNT          NUMBER OF TYPES IN TABLE
TYPLOOP  CLC   0(1,R3),0(R1)      IS THIS IT ?
         BE    GOTTYPE            YES
         LA    R1,1(,R1)          BUMP TO NEXT
         BCT   R2,TYPLOOP         KEEP TRYING
         SPACE
         MVC   LINE(15),=CL15'  -  UNKNOWN'   TELL'EM DON'T KNOW
         MVC   LINE(1),0(R3)      GET TYPE CHARACTER
         B     TYPDONE
         SPACE
GOTTYPE  LA    R1,TYPCNT          NUMBER OF ENTRIES IN TABLE
         SR    R1,R2              COMPUTE OFFSET
         MH    R1,=H'15'          TO DESCRIPTION
         LA    R1,TYPDESC(R1)     -> DESCRIPTION
         MVC   LINE(15),0(R1)     GET IT
         MVI   LINE+15,C' '       ADD BLANK TO SEPARATE FROM DSN
         SPACE
TYPDONE  MVC   LINE+16(44),1(R3)  MOVE IN DSNAME
         LA    R1,LINE+16         -> DSNAME
         LA    R0,44              LENGTH
         BAL   R14,CHOPSTR        TRIM TRAILING BLANKS
         LR    OUTPTR,R1          -> PAST
         BAL   LINK,NEWLINE       WRITE IT OUT
NXTDSN   BXLE  R3,R4,DSNLOOP      LOOP
         SPACE
         BAL   LINK,ENDLINE       FORCE A WRITE
         B     GENLDONE           ALL DONE
         SPACE 2
* JUST ONE DATASET (OR NONE) RETURNED - SET UP TO DO A NORMAL LOCATE
         SPACE
ONEDSN   CLI   49(R8),C' '        ANY DSNAME RETURNED ?
         BH    GOTADSN            YES - GET IT
         SPACE
BADGENL  LH    R3,DSNLEN          LENGTH OF DSNAME
         LA    R2,DSNAME(R3)      -> PAST END OF DSNAME
         MVI   0(R2),C' '         BLANK TRAILING PERIOD
         B     GENLDONE           DSN ALL SET NOW FOR NORMAL LOCATE
         SPACE
GOTADSN  MVC   DSNAME,50(R8)      YES - GET THE DSNAME
         SPACE 2
GENLDONE L     R0,GLWKSIZE        SIZE OF GENLOC WORKAREA
         FREEMAIN R,LV=(0),A=(8)  FREE IT
         SPACE
         TM    FLAGS,SINGDSN      DO WE HAVE JUST ONE DSNAME ?
         BNO   RETURN             NO - ALL DONE
         EJECT
* DO NORMAL LOCATE TO GET VOLUME AND DEVICE INFORMATION FOR DATASET
         SPACE
DOLOCATE LA    R3,DSNAME          -> DSNAME
         ST    R3,CAMLSTP2
         SR    R3,R3              NO CVOL PARM
         ST    R3,CAMLSTP3
         LA    R3,CAMAREA         -> CAMLST WORK AREA
         ST    R3,CAMLSTP4
         MVC   CAMLST,NAMECAM     CAMLST NAME FLAGS
         LOCATE CAMLST            GET THE VOLSER FOR DSN
         LR    R2,R15             SAVE LOCATE RC
         LR    R3,R0              SAVE POSSIBLE INDEX LEVEL
         SPACE
         LA    R1,DSNAME          -> STRING
         LA    R0,L'DSNAME        LENGTH OF STRING
         BAL   R14,CHOPSTR        DETERMINE LENGTH OF DSNAME
         STH   R0,DSNLEN          SAVE IT
         SPACE
         MVC   LINE(6),=C'DSN = '          LABEL
         MVC   LINE+6(L'DSNAME),DSNAME     DISPLAY DSNAME REGARDLESS
         LH    R1,DSNLEN                   LENGTH OF DSNAME
         LA    OUTPTR,LINE+6(R1)           -> END OF LINE
         BAL   LINK,NEWLINE                NEXT LINE
         SPACE
         LR    R0,R3              RESTORE POSSIBLE INDEX LEVEL
         LTR   R15,R2             LOCATE OK ??
         BNZ   BADLOC             NOPE
         EJECT
* WRITE OUT CATALOG INFORMATION - VOLSERS AND DEVICE TYPES
         SPACE
         LH    R2,VOLCNT          NUMBER OF VOLUMES DS IS ON
         CH    R2,=H'20'          OVER 20 ?
         BNE   *+8                NOPE - USE IT
         LH    R2,=H'20'          YES - USE MAX
         SPACE
         LA    R3,VOLENT          -> FIRST VOLUME ENTRY
         USING CATRECD,R3
         B     PUTDEVCD           PUT OUT DEVICE NAME FIRST
         SPACE
CATLOOP  C     R5,DEVCODE         DEVICE CODE CHANGED ???
         BE    DEVCSAME           NOPE - JUST PUT OUT VOLSER
         SPACE
PUTDEVCD L     R0,DEVCODE         PICK UP DEVICE CODE
         LR    R5,R0              SAVE FOR COMPARE
         LR    R1,OUTPTR          -> OUTPUT AREA
         BAL   LINK,UCBTRAN       GO GET DEVICE NAME
         MVI   1(R1),C'-'         LOOKS NICE
         LA    OUTPTR,3(R1)       -> NEXT FREE SPOT
         SPACE
DEVCSAME MVC   0(6,OUTPTR),CATVOL PUT OUT VOLSER
         LA    R0,6               LENGTH OF VOLSER
         LR    R1,OUTPTR          -> VOLSER
         BAL   R14,CHOPSTR        TRIM EXTRA BLANKS OFF VOLSER
         LR    OUTPTR,R1          UPDATE PTR
         LH    R0,DSEQNUM         DATASET SEQUENCE NUMBER
         CH    R0,=H'1'           OVER 1 ?
         BNH   NODSEQ             NOPE
         SPACE
         MVI   0(OUTPTR),C'('     PAREN TO INDICATE DS SEQ NUM
         LA    R1,1(OUTPTR)       -> POSTION FOR IT
         BAL   LINK,INSRTNUM      GO OUTPUT NUMBER
         MVC   0(2,R1),=C'),'     CLOSE PAREN & ADD TRAILING COMMA
         LA    OUTPTR,2(,R1)      -> NEXT FREE SPOT
         B     WASDSEQ            SKIP ADDING COMMA & PTR UPDATE
         SPACE
NODSEQ   MVI   0(OUTPTR),C','     AND A COMMA
         LA    OUTPTR,1(OUTPTR)   -> PAST
WASDSEQ  LA    R3,NEXTVOL         -> NEXT VOLUME ENTRY
         BCT   R2,CATLOOP         GET NEXT VOLUME
         SPACE
         BCTR  OUTPTR,0           BACK UP OVER LAST COMMA
         BAL   LINK,NEWLINE       NEXT LINE
         SPACE 2
         TITLE 'DATASET INQUIRY FUNCTION                GET DSCBS FOR D*
               ATASET'
         CLI   CAMAREA+4,UCB3DACC DASD DEVICE ???
         BNE   TPUT               NOPE
         SPACE
         MVC   VOLSER,CAMAREA+6   GET THE VOLSER FROM CATALOG
         MVC   DEVTYPE,CAMAREA+5  GET THE DEVICE TYPE FROM CATALOG
         SPACE
* OBTAIN ALL DSCBS FOR DATASET
         SPACE
OBTAIN   LA    R3,DSNAME          -> DSNAME
         ST    R3,CAMLSTP2
         LA    R3,VOLSER          -> VOLUME ID
         ST    R3,CAMLSTP3
         LA    R3,CAMAREA         -> AREA FOR F1 DSCB
         ST    R3,CAMLSTP4
         MVC   CAMLST,SRCHCAM     CAMLST SEARCH FLAGS
         OBTAIN CAMLST            GET THE DSCB FOR DATASET
         SPACE
         LTR   R15,R15            OBTAIN OK ???
         BNZ   BADOBTN            NOPE
         SPACE 2
         TM    DS1DSORG,X'80'     ISAM DATASET ??
         BNO   NOF2DSCB           NOPE
         SPACE
         LA    R3,DS1PTRDS        -> CCHHR OF FORMAT 2 DSCB
         ST    R3,CAMLSTP2
         LA    R3,VOLSER          -> VOLUME ID
         ST    R3,CAMLSTP3
         LA    R3,IECSDSF2        -> AREA FOR FORMAT 2 DSCB
         ST    R3,CAMLSTP4
         MVC   CAMLST,SEEKCAM     CAMLST SEEK FLAGS
         OBTAIN CAMLST            GET THE EXTENTS DSCB
         SPACE
         LTR   R15,R15            OBTAIN OK ???
         BNZ   BADOBTN            NOPE
         SPACE 2
NOF2DSCB CLI   DS1NOEPV,3         DATASET OVER 3 EXTENTS ??
         BNH   NOF3DSCB           NOPE - DON'T NEED F3 DSCB
         SPACE 2
         LA    R3,DS1PTRDS        -> CCHHR OF FORMAT 3 DSCB
         TM    DS1DSORG,X'80'     ISAM DATASET ??
         BNO   *+8                NOPE
         LA    R3,DS2PTRDS        -> CCHHR OF FORMAT 3 DSCB
         ST    R3,CAMLSTP2
         LA    R3,VOLSER          -> VOLUME ID
         ST    R3,CAMLSTP3
         LA    R3,IECSDSF3        -> AREA FOR FORMAT 3 DSCB
         ST    R3,CAMLSTP4
         MVC   CAMLST,SEEKCAM     CAMLST SEEK FLAGS
         OBTAIN CAMLST            GET THE EXTENTS DSCB
         SPACE
         LTR   R15,R15            OBTAIN OK ???
         BNZ   BADOBTN            NOPE
         SPACE
         OI    FLAGS,HAVEF3       INDICATE F3 DSCB READ
         SPACE
NOF3DSCB EQU   *                  BYPASS OBTAIN FOR F3 DSCB
         SPACE 2
         L     @DVCT,CVTPTR       -> CVT
         USING CVTMAP,@DVCT
         L     @DVCT,CVTZDTAB     -> DEVICE CHAR TABLE
         IC    R4,DEVTYPE         PICK UP LAST BYTE UCBTYPE FIELD
         LA    R0,X'0F'           MASK
         NR    R4,R0              BOTTOM 4 BITS UCBTYPE DEVICE FIELD
         IC    R4,0(R4,@DVCT)     PICK UP OFFSET TO DEV ENTRY
         AR    @DVCT,R4           -> DEVICE CHAR TABLE ENTRY
         USING DVCT,@DVCT
         LH    R1,DVCTRK          TRACKS PER CYLINDER
         ST    R1,TRKCYL          FOR SPACE CALCULATION
         ST    @DVCT,DVCTPTR      SAVE ADDRESS OF DVCT ENTRY
         DROP  @DVCT
         TITLE 'DATASET INQUIRY FUNCTION                GET DSORG,RECFM*
               ,BLKSIZE,LRECL,OPTCD AND PSWD'
         SPACE
* DSORG
         SPACE
         MVC   0(8,OUTPTR),=C'DSORG **' LABEL
         LR    R5,OUTPTR          SAVE OUTPTR
         LA    OUTPTR,8(OUTPTR)   -> PAST
         SR    R1,R1              CLEAR FOR INSERT
         ICM   R1,B'1100',DS1DSORG   PICK UP DSORG
         BZ    NODSORG               NONE
         LA    OUTPTR,6(R5)       BACK UP PTR TO DSORG VALUE AREA
         LA    R2,DSORGTBL        -> DSORGS
DSORGLP  LTR   R1,R1              TEST THAT TOP BIT
         BZ    NODSORG            ALL DONE
         BNM   NXTDSORG           BIT NOT SET
         MVC   0(2,OUTPTR),0(R2)  MOVE IN DSORG
         LA    OUTPTR,2(OUTPTR)   -> NEXT SPOT
NXTDSORG LA    R2,2(R2)           -> NEXT DSORG
         SLL   R1,1               MOVE NEXT BIT INTO SIGN BIT
         B     DSORGLP            AND TEST IT
NODSORG  LA    OUTPTR,2(OUTPTR)   -> NEXT FREE SPOT
         SPACE
* RECFM
         SPACE
         MVC   0(8,OUTPTR),=C'RECFM **' LABEL
         LR    R5,OUTPTR          SAVE OUTPTR
         LA    OUTPTR,8(OUTPTR)   -> PAST RECFM VALUE
         SR    R1,R1              CLEAR FOR INSERT
         ICM   R1,B'0001',DS1RECFM   PICK UP RECFM
         BZ    NORECFM               NONE
         LA    OUTPTR,6(R5)       BACK UP PTR TO RECFM VALUE AREA
         MVI   1(OUTPTR),C' '     IN CASE OF ONE-CHAR RECFM VALUE
         LA    R2,B'11000000'     MASK
         NR    R2,R1              GET THE RECFM F,V,U BITS
         BZ    DORECFM            NOT ANY
         SRL   R2,6               PUT AT BOTTOM
         IC    R0,RECFMTBL-1(R2)  PICK UP THE CORRECT RECFM
         STC   R0,0(,OUTPTR)      PUT IN OUTPUT LINE
         LA    OUTPTR,1(OUTPTR)   -> PAST
DORECFM  LA    R0,B'00111110'     MASK
         NR    R1,R0              ZERO F,V,U RECFM BITS
         LA    R2,RECFMTBL+3      -> REST OF RECFMS
         SLL   R1,26              PUT IN TOP BYTE REG
RECFMLP  LTR   R1,R1              TEST THAT TOP BIT
         BZ    NORECFM            ALL DONE
         BNM   NXTRECFM           BIT NOT SET
         MVC   0(1,OUTPTR),0(R2)  MOVE IN RECFM
         LA    OUTPTR,1(OUTPTR)   -> NEXT SPOT
NXTRECFM LA    R2,1(R2)           -> NEXT RECFM
         SLL   R1,1               MOVE NEXT BIT INTO SIGN BIT
         B     RECFMLP            AND TEST IT
NORECFM  LA    OUTPTR,2(OUTPTR)   -> NEXT AREA
         EJECT
         SPACE
* BLKSIZE
         SPACE
         MVC   0(8,OUTPTR),=C'BLKSIZE ' LABEL
         LA    R1,8(OUTPTR)       -> OUTPUT POSTION FOR BLKSIZE
         SLR   R0,R0              BLKSIZE
         ICM   R0,3,DS1BLKL            "
         BAL   LINK,INSRTNUM      OUTPUT IT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
* LRECL
         SPACE
         MVC   0(6,OUTPTR),=C'LRECL ' LABEL
         LA    R1,6(OUTPTR)       -> OUTPUT POSITION FOR LRECL
         SLR   R0,R0              LRECL
         ICM   R0,3,DS1LRECL           "
         BAL   LINK,INSRTNUM      OUTPUT IT
         LA    OUTPTR,2(,R1)      -> PAST LRECL
         SPACE 2
         TM    DS1DSORG+1,X'08'   A VSAM DATASET ???  (DSORG = AM)
         BO    TPUT               YES - ALL DONE
         SPACE 2
* OPTCD
         SPACE
         CLI   DS1OPTCD,0         ANY OPTCD ??
         BZ    NOOPTCD            NOPE
         SPACE
         MVC   0(6,OUTPTR),=C'OPTCD ' LABEL
         LA    OUTPTR,6(OUTPTR)   -> PAST
         SPACE
         TM    DS1DSORG,X'80'     ISAM ?
         BZ    *+12               NO
         LA    R2,ISAMOPT         -> ISAM OPTCD TABLE
         B     GOTAM
         TM    DS1DSORG,X'42'     BSAM OR BPAM ?
         BZ    *+12               NO
         LA    R2,BSAMOPT         -> BSAM OPTCD TABLE
         B     GOTAM
         TM    DS1DSORG,X'20'     BDAM ?
         BZ    NOAM               NO
         LA    R2,BDAMOPT         -> BDAM OPTCD TABLE
         B     GOTAM
         SPACE
NOAM     MVI   0(OUTPTR),C'?'     INDICATE OPTCD UNKNOWN
         LA    OUTPTR,1(,OUTPTR)  BUMP PAST
         SR    R4,R4
         ICM   R4,B'1000',DS1OPTCD    PICK UP OPTCD
         B     OPTCDHEX               PUT OUT OPTCD IN HEX
         SPACE
GOTAM    SR    R1,R1
         ICM   R1,B'1000',DS1OPTCD    PICK UP OPTCD
         LR    R4,R1              SAVE OPTCD FOR LATER CHECK
         ICM   R0,B'1000',0(R2)   SIGNIFICANT BIT MASK
         NR    R1,R0              KEEP JUST BITS THAT WE KNOW ABOUT
OPTCDLP  LTR   R1,R1              TEST THAT TOP BIT
         BZ    OPTCDCHK           ALL DONE
         BNM   NXTOPTCD           BIT NOT SET
         MVC   0(1,OUTPTR),1(R2)  MOVE IN OPTCD
         LA    OUTPTR,1(OUTPTR)   -> NEXT SPOT
NXTOPTCD LA    R2,1(R2)           -> NEXT OPTCD
         SLL   R1,1               MOVE NEXT BIT INTO SIGN BIT
         B     OPTCDLP            AND TEST IT
         SPACE 2
OPTCDCHK SR    R3,R3              LOAD R3 WITH
         ICM   R3,B'1000',=X'FF'  A ONE'S COMPLEMENT MASK
         XR    R3,R0              ONE'S COMPLEMENT OF OPTCD BIT MASK
         NR    R3,R4              LEAVE JUST UN-INTERPETED BITS
         BZ    OPTCDONE           ALL BITS INTERPETED
OPTCDHEX LA    OUTPTR,1(OUTPTR)   SKIP A SPACE
         MVC   0(3,OUTPTR),=C'(X'''      INDICATE HEX CONSTANT
         STCM  R4,B'1000',4(OUTPTR)      PUT DOWN OPTCD
         UNPK  3(1,OUTPTR),4(1,OUTPTR)   REVERSE BYTE ON LEFT
         NC    3(2,OUTPTR),HEXMASK       PUT WITHIN RANGE OF TR
         TR    3(2,OUTPTR),HEXTABLE      CONVERT TO HEX PRINTABLE
         MVC   5(2,OUTPTR),=C''')'       CLOSE QUOTE AND PAREN
         LA    OUTPTR,7(OUTPTR)   -> PAST
         SPACE
OPTCDONE LA    OUTPTR,2(OUTPTR)
         SPACE
NOOPTCD  DS    0H                 DONE WITH OPTCD
         SPACE
* PSWD
         SPACE
         TM    DS1DSIND,DS1IND10  DATASET PROTECTED ?
         BZ    TESTRACF           NOPE - CHECK FOR RACF DEFINED
         SPACE
         MVC   0(4,OUTPTR),=C'PSWD'
         TM    DS1DSIND,DS1IND04  R/W OR JUST WRITE ?
         BZ    PSWDRW             ITS R/W
         MVI   5(OUTPTR),C'W'
         LA    OUTPTR,6(OUTPTR)
         B     TESTRACF
PSWDRW   MVC   5(3,OUTPTR),=C'R/W'
         LA    OUTPTR,8(OUTPTR)
         SPACE
TESTRACF TM    DS1DSIND,DS1IND40  DATASET DEFINED TO RACF ?
         BZ    PSWDONE            NOPE
         TM    DS1DSIND,DS1IND10  DID DATASET HAVE A PSWD ?
         BO    PSWDLABL           YES - HAVE A LABEL
         MVC   0(9,OUTPTR),=C'PSWD RACF'
         LA    OUTPTR,9(OUTPTR)   -> NEXT AREA
         B     PSWDONE
PSWDLABL MVC   0(5,OUTPTR),=C',RACF' ADD RACF INDICATOR
         LA    OUTPTR,5(OUTPTR)   -> NEXT AREA
         SPACE 2
PSWDONE  BAL   LINK,NEWLINE       NEXT LINE
         TITLE 'DATASET INQUIRY FUNCTION                GET CREATE DATE*
               ,EXPIRE DATE,KEYLEN,RKP AND # EXTENTS'
         SPACE
* CREATION DATE
         SPACE
         MVC  0(2,OUTPTR),=C'C-'  LABEL
         LA   R0,2(OUTPTR)        -> CREATE DATE VALUE POSTION
         LA   OUTPTR,12(OUTPTR)   -> PAST CREATE DATE POSITION
         LA   R1,DS1CREDT         -> CREATE DATE
         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT
         SPACE
* EXPIRATION DATE
         SPACE
         OC   DS1EXPDT,DS1EXPDT   ANY EXPIRATION DATE ?
         BZ   NOEXPDT             NO - SKIP IT
         SPACE
         MVC  0(2,OUTPTR),=C'E-'  LABEL
         LA   R0,2(OUTPTR)        -> EXPIRATION DATE VALUE POSTION
         LA   OUTPTR,12(OUTPTR)   -> PAST EXPIRATION DATE POSITION
         LA   R1,DS1EXPDT         -> EXPIRATION DATE
         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT
NOEXPDT  EQU  *
         SPACE
* KEYLEN
         SPACE
         MVC   0(7,OUTPTR),=C'KEYLEN ' LABEL
         LA    R1,7(OUTPTR)       -> OUTPUT POSTION FOR KEYLEN
         SR    R0,R0              CLEAR FOR INSERT
         IC    R0,DS1KEYL         KEYLEN
         BAL   LINK,INSRTNUM      OUTPUT IT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
* RKP
         SPACE
         MVC   0(4,OUTPTR),=C'RKP ' LABEL
         LA    R1,4(OUTPTR)       -> OUTPUT POSITION FOR RKP
         SR    R0,R0              CLEAR FOR INSERT
         ICM   R0,B'0011',DS1RKP  RKP
         BAL   LINK,INSRTNUM      OUTPUT IT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
* NUMBER OF EXTENTS
         SPACE
         MVC   0(6,OUTPTR),=C'#EXTS ' LABEL
         LA    R1,6(OUTPTR)       -> OUTPUT POSTION FOR #EXTENTS
         SR    R0,R0              CLEAR FOR INSERT
         IC    R0,DS1NOEPV        #EXTENTS
         BAL   LINK,INSRTNUM      OUTPUT IT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
         CLI   DS1NOEPV,0         ZERO EXTENTS ???
         BE    TPUT               YES - ALL DONE
         SPACE
         TITLE 'DATASET INQUIRY FUNCTION                CALCULATE RECOR*
               D COUNT'
         SPACE
* RECORD COUNT
         SPACE
         TM    DS1DSORG,X'40'     DATASET PHYSICAL SEQUENTIAL ?
         BNO   NRECDCNT           NO GO
         IC    R1,DS1RECFM        RECFM
         LA    R0,B'11000000'     MASK
         NR    R1,R0              GET RECFM F,V,U BITS
         LA    R0,B'10000000'     VALUE OF RECFM = F
         CR    R1,R0              DATASET RECFM = F ?
         BNE   NRECDCNT           CAN'T DO IT
         ICM   R0,B'0011',DS1BLKL BLKSIZE ZERO ?
         BZ    NRECDCNT           YES - BYPASS # RECDS CALCULATION
         SPACE
         SLR   R4,R4              ASSUME # RECDS IS ZERO
         ICM   R0,B'0111',DS1LSTAR   LAST USED TTR ZERO ?
         BZ    NOTBLKED              YES - GO OUTPUT "RECDS 0"
         SPACE
         L     @DVCT,DVCTPTR      PICK ADDR OF DVCT ENTRY
         USING DVCT,@DVCT         ADDRESSABILITY
         SR    R4,R4
         IC    R4,DS1KEYL         KEYLENGTH
         SLR   R1,R1              BLKSIZE
         ICM   R1,3,DS1BLKL            "
         AR    R4,R1              + BLKSIZE = LOGICAL BLOCK SIZE
         LR    R1,R4              SAVE
         SPACE
         TM    DVCFLAGS,DVCFTOL   APPLY TOLERANCE FACTOR ??
         BNO   NOTOL1             NOPE
         SPACE
         MH    R4,DVCTOL          * TOLERANCE
         SRA   R4,DVCTSHFT        / 512 = BLOCKLEN (EXCLUDING OVERHEAD)
         SPACE
NOTOL1   TM    DVCFLAGS,DVC2BOV   SPLIT OVERHEAD VALUE ?
         BNO   SPLTOVHD           YES
         SPACE
         LH    R5,DVCOVHD         OVERHEAD PER BLOCK
         AR    R5,R4              PHYSICAL BLOCK LENGTH
         CLI   DS1KEYL,0          DATASET KEYED ?
         BNZ   KEYOVHD            YES, DON'T ADJUST BLOCK LENGTH
         SR    R0,R0              NEED TO TAKE OUT KEY OVERHEAD
         IC    R0,DVCOVNK         OVERHEAD REDUCTION IF NOT KEYED
         SR    R5,R0              PHYSICAL LENGTH OF NON-KEYED BLOCK
KEYOVHD  SLR   R3,R3              BYTES PER TRACK
         ICM   R3,3,DVCTRKLN           "
         SR    R2,R2              CLEAR FOR DIVIDE
         DR    R2,R5              R3 = BLOCKS / TRACK
         B     BLKSTRK            JOIN MAINLINE CODE AGAIN
         SPACE
SPLTOVHD EQU   *                  OVERHEAD DIFFERENT FOR LAST BLOCK
         SR    R5,R5
         IC    R5,DVCOVNLB        OVERHEAD IF NOT LAST BLOCK
         AR    R5,R4              PHYSICAL BLOCK LEN IF NOT LAST BLOCK
         SR    R6,R6
         IC    R6,DVCOVLB         OVERHEAD IF LAST BLOCK
         AR    R6,R1              PHYSICAL BLOCK LENGTH IF LAST BLOCK
         CLI   DS1KEYL,0          DATASET KEYED ??
         BNZ   KEYOVRHD           YES, DON'T ADJUST BLOCK LENGTHS
         SR    R0,R0              NEED TO TAKE OUT KEY OVERHEAD
         IC    R0,DVCOVNK         OVERHEAD REDUCTION IF NOT KEYED
         SR    R5,R0              PHYSICAL BLOCK LEN IF NOT LAST BLOCK
         SR    R6,R0              PHYSICAL BLOCK LENGTH IF LAST BLOCK
KEYOVRHD SLR   R3,R3              BYTES PER TRACK
         ICM   R3,3,DVCTRKLN           "
         SR    R3,R6              SUBTRACT LENGTH OF LAST BLOCK
         SR    R2,R2              CLEAR FOR DIVIDE
         DR    R2,R5              (BYTES/TRK-LENLASTBLK)  /  BLKLEN
         LA    R1,1               ADD ONE TO
         AR    R3,R1              ACCOUNT FOR LAST BLOCK
         SPACE
BLKSTRK  EQU   *                  R3 = BLKS/TRK, R5 = PHYSICAL BLKLEN
         LR    R6,R3              SAVE BLKS/TRK FOR MAX CHECK
         SR    R1,R1
         ICM   R1,B'0011',DS1LSTAR   NUMBER OF TRACKS IN DATASET
         MR    R2,R1              #TRKS  *  BLKS/TRK = #BLKS - LAST TRK
         SR    R0,R0
         IC    R0,DS1LSTAR+2      NUMBER OF BLOCKS ON LAST TRACK
         CR    R0,R6              MORE THAN CAN FIT ON A TRACK ?
         BNH   RECNUMOK           NOPE - AS IS
         LR    R0,R6              NO SET TO MAX
         STC   R6,DS1LSTAR+2      AND FIX TTR IN DSCB TOO
RECNUMOK AR    R3,R0              R3 = NUMBER OF BLOCKS IN DATASET
         LR    R4,R3              IN CASE DS IS NOT BLOCKED
         SPACE
         OC    DS1LRECL,DS1LRECL  LRECL ZERO ?
         BZ    NOTBLKED           YES - DS NOT BLOCKED
         CLC   DS1LRECL,DS1BLKL   OR EQUAL TO BLOCKSIZE ?
         BE    NOTBLKED           YES - DS NOT BLOCKED
         SPACE
         BCTR  R3,0               EXCLUDE LAST BLOCK (PROBABLY SHORT)
         SLR   R1,R1              BLKSIZE
         ICM   R1,3,DS1BLKL            "
         SLR   R2,R2              LRECL
         ICM   R2,3,DS1LRECL           "
         SR    R0,R0              CLEAR FOR DIVIDE
         DR    R0,R2              NUMBER OF LOGICAL RECORDS PER BLOCK
         MR    R0,R3              * (#BLOCKS IN DS -1) = # RECDS IN DS
         LR    R4,R1                                  (EXCEPT LAST BLK)
         SPACE
         SR    R1,R1
         IC    R1,DS1LSTAR+2      NUMBER OF BLOCKS ON LAST TRACK
         BCTR  R1,0               EXCLUDE LAST BLOCK
         MR    R0,R5              BYTES USED LAST TRK EXCEPT LAST BLK
         SLR   R3,R3              BYTES ON A TRACK
         ICM   R3,3,DVCTRKLN           "
         SR    R3,R1              - BYTES USED EXCEPT LAST BLOCK
         SH    R3,DS1TRBAL        - FREE BYTES ON LAST TRACK           *
                                  = PHYSICAL LENGTH OF LAST BLOCK
         SPACE
         TM    DVCFLAGS,DVC2BOV   SPLIT OVERHEAD VALUE ??
         BO    SNGLOVHD           NOPE
         SPACE
         SR    R0,R0
         IC    R0,DVCOVNLB        OVERHEAD NOT LAST BLOCK
         SR    R3,R0              ACCOUNT FOR OVERHEAD
         B     GOTOVHD
         SPACE
SNGLOVHD SH    R3,DVCOVHD         ACCOUNT FOR OVERHEAD PER BLOCK
         SPACE
GOTOVHD  CLI   DS1KEYL,0          DATASET KEYED ?
         BNZ   NKEYOVHD           YES - DON'T ADJUST
         SR    R0,R0
         IC    R0,DVCOVNK         NOT KEYED CONSTANT
         AR    R3,R0              ACCOUNT FOR DS NOT KEYED
NKEYOVHD TM    DVCFLAGS,DVCFTOL   APPLY TOLERANCE FACTOR ??
         BNO   NOTOL2             NOPE
         SPACE
         SLA   R3,DVCTSHFT        * 512
         LH    R1,DVCTOL          TOLERANCE
         SR    R2,R2              SET UP FOR DIVIDE
         DR    R2,R1              / TOLERANCE = LAST BLOCK LOG. LENGTH
         SPACE
NOTOL2   SLR   R1,R1              LRECL
         ICM   R1,3,DS1LRECL           "
         SR    R2,R2
         DR    R2,R1              LOGICAL RECORDS IN LAST BLOCK
         AR    R4,R3              ADD TO TOTAL
         SPACE
         DROP  @DVCT
         SPACE
NOTBLKED MVC   0(7,OUTPTR),=C'#RECDS '   LABEL
         LA    R1,7(,OUTPTR)         -> OUTPUT AREA FOR #RECDS
         LR    R0,R4                 NUMBER OF RECORDS IN DATASET
         BAL   LINK,INSRTNUM         OUTPUT IT
         LA    OUTPTR,2(R1)          -> NEXT AREA
         SPACE 2
NRECDCNT BAL   LINK,NEWLINE       NEXT LINE
         TITLE 'DATASET INQUIRY FUNCTION                GET ISAM STATIS*
               TICS'
         SPACE
         TM    DS1DSORG,X'80'     ISAM DATASET ?
         BNO   NOTISAM            NOPE
         SPACE
* PRIME RECORDS
         SPACE
         MVC   0(11,OUTPTR),=C'PRIME RECDS'
         LA    R1,12(,OUTPTR)     -> OUTPUT AREA
         L     R0,DS2PRCTR        NUM OF PRIME RECORDS
         BAL   LINK,INSRTNUM      WRITE IT OUT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
* DELETED RECORDS
         SPACE
         MVC   0(9,OUTPTR),=C'DEL RECDS'
         LA    R1,10(,OUTPTR)     -> OUTPUT AREA
         LH    R0,DS2TAGDT        NUM OF RECORDS TAGGED FOR DELETION
         BAL   LINK,INSRTNUM      WRITE IT OUT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
* OVERFLOW RECORDS
         SPACE
         MVC   0(9,OUTPTR),=C'OFL RECDS'
         LA    R1,10(,OUTPTR)     -> OUTPUT AREA
         LH    R0,DS2OVRCT        NUM OF RECORDS IN OVERFLOW AREA
         BAL   LINK,INSRTNUM      WRITE IT OUT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
* OVERFLOW REFERENCE COUNT
         SPACE
         MVC   0(7,OUTPTR),=C'OFL REF'
         LA    R1,8(,OUTPTR)      -> OUTPUT AREA
         SR    R0,R0
         ICM   R0,B'0111',DS2RORG3   NON-FIRST OVERFLOW REFERNCE COUNT
         BAL   LINK,INSRTNUM      WRITE IT OUT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
         BAL   LINK,NEWLINE       NEXT LINE
         SPACE
* INDEX SIZE IN BYTES
         SPACE
         MVC   0(11,OUTPTR),=C'INDEX BYTES'
         LA    R1,12(,OUTPTR)     -> OUTPUT AREA
         LH    R0,DS2NOBYT        NUM OF BYTES NEEDED FOR HIGH INDEX
         BAL   LINK,INSRTNUM      WRITE IT OUT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         EJECT
         SPACE
* OVERFLOW AREA REMAINING
         SPACE
         MVC   0(13,OUTPTR),=C'OFL AREA LEFT'
         LA    R1,14(,OUTPTR)     -> OUTPUT AREA
         LH    R0,DS2RORG2        NUM OF TRACKS REMAINING IN OFL AREA
         BAL   LINK,INSRTNUM      WRITE IT OUT
         MVC   1(3,R1),=C'TRK'    LABEL
         LA    R1,5(R1)           -> OUTPUT AREA
         LH    R0,DS2BYOVL        BYTES REMAINING ON OFL TRACK
         BAL   LINK,INSRTNUM      WRITE IT OUT
         MVC   1(5,R1),=C'BYTES'  LABEL
         LA    OUTPTR,8(R1)       -> NEXT AREA
         SPACE
* FULL CYLINDER OVERFLOW AREAS
         SPACE
         MVC   0(11,OUTPTR),=C'CYLOFL FULL'
         LA    R1,12(,OUTPTR)     -> OUTPUT AREA
         LH    R0,DS2RORG1        NUM OF FULL CYLINDER OVERFLOW AREAS
         BAL   LINK,INSRTNUM      WRITE IT OUT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
         BAL   LINK,NEWLINE       NEXT LINE
         SPACE 2
NOTISAM  DS    0H                 SKIP ISAM STATISTICS
         TITLE 'DATASET INQUIRY FUNCTION                GET ASM2/SU60 U*
               SAGE INFORMATION'
         SPACE
* LAST USE DATE
         SPACE
         CLC  ASM2UCNT,=F'0'      SHOULD BE A USE CNT OR LAST USE DATE
         BE   NOASM2              NO USAGE STATS AVAILABLE
         SPACE
         MVC  0(2,OUTPTR),=C'U-'  LABEL
         LA   R0,2(OUTPTR)        -> LAST USE DATE VALUE POSTION
         LA   OUTPTR,12(OUTPTR)   -> PAST LAST USE DATE POSITION
         LA   R1,ASM2UDAT         ASSUME OLD ASM2 (2.3) FORMAT
         CLI  DS1REFD,0           IS IT ?
         BE   *+8                 YEP
         LA   R1,DS1REFD          NO, POINT TO ASM2 2.4 USE DATE LOC
         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT
         SPACE
* MVS SU 60 CHANGE BIT
         SPACE
         CLC   DS1DSSN,VOLSER     IS VOLSER FIELD IN DSCB UNTOUCHED ?
         BNE   ISASM2             NO - WE SHOULD HAVE ASM2 STATS THEN
         TM    DS1DSIND,DS1IND02  HAS DATASET BEEN MODIFIED ?
         BZ    ASM2DONE           NOPE - ALL DONE
         MVC   0(7,OUTPTR),=C'CHANGED'   INDICATE DS HAS BEEN CHANGED
         LA    OUTPTR,9(,OUTPTR)  -> PAST
         B     ASM2DONE
ISASM2   DS    0H                 DSCB HAS ASM2 STATS
         SPACE
* LAST MODIFY DATE
         SPACE
         TM   ASM2MDAT+1,X'FE'    MODIFY DATE VALID ?
         BNZ  NOMDATE             NO - SKIP IT
         SPACE
         MVC  0(2,OUTPTR),=C'M-'  LABEL
         LA   R0,2(OUTPTR)        -> MOD DATE VALUE POSTION
         LA   OUTPTR,12(OUTPTR)   -> PAST MOD DATE POSITION
         LA   R1,ASM2MDAT         -> MOD DATE
         BAL  LINK,CNVTDATE       CONVERT DATE TO MM/DD/YY FORMAT
NOMDATE  EQU  *
         SPACE
* USE COUNT
         SPACE
         MVC   0(4,OUTPTR),=C'USE ' LABEL
         LA    R1,4(OUTPTR)       -> OUTPUT POSTION FOR USE COUNT
         L     R0,ASM2UCNT        ASSUME OLD ASM2 (2.3) FORMAT
         CLI   DS1REFD,0          IS IT ?
         BE    *+10               YES
         SR    R0,R0              NO, PICK UP NEW ASM2 2.4 USE COUNT
         ICM   R0,B'0111',ASM2USEC
         BAL   LINK,INSRTNUM      OUTPUT IT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         SPACE
* MODIFYING JOBNAME
         SPACE
         TM   ASM2MDAT+1,X'FE'    MODIFY DATE VALID ?
         BNZ  ASM2DONE            INVALID - NO MODIFYING JOB
         SPACE
         MVC   0(5,OUTPTR),=C'USER '  LABEL
         MVC   5(8,OUTPTR),ASM2MJOB   MODIFYING JOBNAME
         LA    OUTPTR,15(OUTPTR)  -> NEXT AREA
         SPACE 2
ASM2DONE BAL   LINK,NEWLINE       NEXT LINE
         SPACE
NOASM2   DS    0H                 BYPASS ASM2 STATS
         TITLE 'DATASET INQUIRY FUNCTION                GET ALLOCATION *
               TYPE AND SECONDARY AMOUNT'
         SPACE
* ALLOCATION TYPE
         SPACE
         MVC   0(9,OUTPTR),=C'ALLOC IN ' LABEL
         LA    OUTPTR,9(OUTPTR)   -> ALLOCATION TYPE VALUE POSITION
         TM    DS1SCALO,B'11000000'   TEST ALLOCATION TYPE
         BM    CHKALOC1               IN TRACKS OR BLOCKS
         BZ    INABSTR                IN ABSOLUTE TRACK
         MVC   0(3,OUTPTR),=C'CYL'    IN CYLINDERS
         LA    OUTPTR,3(OUTPTR)       BUMP POINTER
         B     CHKALOC2               CHECK THE BOTTOM 4 BITS
INABSTR  MVC   0(5,OUTPTR),=C'ABSTR'  IN ABSOLUTE TRACK
         LA    OUTPTR,5(OUTPTR)       BUMP POINTER
         B     CHKALOC2               CHECK NEXT SET OF BITS
CHKALOC1 TM    DS1SCALO,B'10000000'   CHECK IF ALLOCATED IN TRACKS
         BNO   INBLKS                 NO - IN BLOCKS
         MVC   0(3,OUTPTR),=C'TRK'    IN TRACKS
         LA    OUTPTR,3(OUTPTR)       BUMP POINTER
         B     CHKALOC2               CHECK NEXT BUNCHA BITS
INBLKS   MVC   0(3,OUTPTR),=C'BLK'    IN BLOCKS
         LA    OUTPTR,3(OUTPTR)       BUMP POINTER
         SPACE
CHKALOC2 TM    DS1SCALO,B'00001000'   CONTIG ?
         BNO   NOCONTIG               NOPE
         MVC   0(7,OUTPTR),=C',CONTIG' SAY SO
         LA    OUTPTR,7(OUTPTR)       BUMP POINTER
NOCONTIG TM    DS1SCALO,B'00000100'   MAXIMUM CONTIG EXTENT ON VOL ?
         BNO   NOMXIG                 NOPE
         MVC   0(5,OUTPTR),=C',MXIG'  WHAT A PIG
         LA    OUTPTR,5(OUTPTR)       BUMP POINTER
NOMXIG   TM    DS1SCALO,B'00000010'   5 BIG ONES ??
         BNO   NO5BIGYS               NOPE
         MVC   0(4,OUTPTR),=C',ALX'   ANOTHER HOG
         LA    OUTPTR,4(OUTPTR)       BUMP POINTER
NO5BIGYS TM    DS1SCALO,B'00000001'   ROUND ?
         BNO   NOROUND                NOPE
         MVC   0(6,OUTPTR),=C',ROUND' YEP
         LA    OUTPTR,6(OUTPTR)       BUMP POINTER
NOROUND  LA    OUTPTR,2(OUTPTR)   END OF ALLOCATION TYPE BITS
         SPACE 2
* SECONDARY ALLOCATION
         SPACE
         MVC   0(4,OUTPTR),=C'SEC ' LABEL
         LA    R1,4(OUTPTR)       -> OUTPUT POSITION FOR SEC ALLOC AMT
         SR    R0,R0              CLEAR FOR INSERT
         ICM   R0,B'0111',DS1SCALO+1    SEC ALLOC AMT
         BAL   LINK,INSRTNUM      OUTPUT IT
         LA    OUTPTR,2(R1)       -> NEXT AREA
         TITLE 'DATASET INQUIRY FUNCTION                GET TOTAL SPACE*
                ALLOCATED FOR DATASET'
         SPACE
* TOTAL ALLOCATION
         SPACE
         MVC   0(6,OUTPTR),=C'TOTAL ' LABEL
         LA    OUTPTR,6(OUTPTR)   -> PAST
         SR    R2,R2              CLEAR TRK COUNTER
         SR    R3,R3              CLEAR CYL COUNTER
         SPACE
         CLI   DS1NOEPV,0         ANY EXTENTS ?
         BE    EXTDONE            NOPE
         SPACE
         LA    R4,DS1EXT1         -> 1ST 3 EXTENTS IN F1 DSCB
         LA    R5,3               3 EXTENTS
         BAL   LINK,ADDEXT        ADD IT UP
         TM    FLAGS,HAVEF3       DO WE HAVE A F3 DSCB ?
         BNO   EXTDONE            NOPE
         SPACE
         LA    R4,DS3EXTNT        -> 1ST 4 EXTENTS IN F3 DSCB
         LA    R5,4               4 EXTENTS
         BAL   LINK,ADDEXT        ADD THEM IN
         LA    R4,DS3ADEXT        -> LAST 9 EXTENTS IN F3 DSCB
         LA    R5,9               9 EXTENTS
         LA    LINK,EXTDONE       FALL THRU TO ADDEXT
         SPACE
ADDEXT   EQU   *                  LOCAL SUBROUTINE TO ADD UP EXTENTS
         SR    R1,R1              CLEAR FOR
         SR    R0,R0              INSERTS
         CLI   0(R4),X'00'        EMPTY EXTENT ??
         BE    EXTDONE            YES, FINISHED
         ICM   R1,B'0011',6(R4)   HIGH CC
         ICM   R0,B'0011',2(R4)   LOW  CC
         SR    R1,R0              TOTAL CYL FOR THIS EXTENT
         AR    R3,R1              ADD TO TOTAL
         ICM   R1,B'0011',8(R4)   HIGH HH
         LA    R1,1(R1)           BUMP BY ONE
         ICM   R0,B'0011',4(R4)   LOW  HH
         SR    R1,R0              TOTAL TRK FOR THIS EXTENT
         AR    R2,R1              ADD TO TOTAL
         LA    R4,10(R4)          -> NEXT EXTENT
         BCT   R5,ADDEXT          GET REST IN THIS GROUP
         BR    LINK               RETURN
         SPACE 2
EXTDONE  EQU   *                  EXIT WHEN ALL EXTENTS ADDED UP
         LR    R1,R2              SAVE NUMBER OF TRACKS
         M     R2,TRKCYL          CONVERT CYLINDER COUNT TO TRACKS
         AR    R3,R1              ADD IN TRACKS FOR TOTAL SPACE IN TRKS
         D     R2,TRKCYL          GET CYLINDERS AND TRACKS
         SPACE
         BAL   R5,CYLTRK          WRITE OUT AMT IN CYLS AND TRKS
         TITLE 'DATASET INQUIRY FUNCTION                GET SPACE USED *
               IN DATASET'
         SPACE
* SPACE USED
         SPACE
         TM    DS1DSORG,X'80'     ISAM DATASET ??
         BO    SPCDONE            YES - SKIP
         SPACE
         MVC   0(5,OUTPTR),=C'USED ' LABEL
         LA    OUTPTR,5(OUTPTR)   -> PAST
         SR    R2,R2              CLEAR FOR INSERT
         ICM   R2,B'0011',DS1LSTAR  TT OF LAST BLOCK WRITTEN TTR
         CLI   DS1LSTAR+2,0       USED PART OF A TRACK ?
         BE    EVENTRK            NO
         LA    R2,1(R2)           YES - BUMP TRACK COUNT
EVENTRK  SR    R3,R3              ZERO CYL AMT IN CASE TRKS ONLY
         C     R2,TRKCYL          OVER A CYL ?
         BL    TRKOK              NO - SKIP CYLINDER AMT
         LR    R3,R2              BUILD 64-BIT
         SR    R2,R2              DIVIDEND FOR DIVIDE
         D     R2,TRKCYL          GET CYLINDERS AND TRACKS
TRKOK    LA    R5,SPCDONE         FALL THRU TO CYLTRK SUBROUTINE
         SPACE 2
CYLTRK   EQU   *                  LOCAL SUBR TO OUTPUT IN CYL AND TRKS
         LTR   R3,R3              ANY CYLINDERS ?
         BZ    TRKONLY            NOPE
         SPACE
         LR    R0,R3              NUMBER OF CYLINDERS
         LR    R1,OUTPTR          -> OUTPUT POSITION FOR CYLINDER AMT
         BAL   LINK,INSRTNUM      OUTPUT IT
         MVC   1(3,R1),=C'CYL'    ADD LABEL
         LA    OUTPTR,5(R1)       -> NEXT AREA
         SPACE
         LTR   R2,R2              DO WE NEED TO OUTPUT TRKS ?
         BNZ   TRKONLY            YES
         LA    OUTPTR,1(OUTPTR)   NO - PUT 2 SPACES AFTER CYL AMT
         BR    R5                 RETURN
         SPACE
TRKONLY  LR    R0,R2              NUMBER OF TRACKS
         LR    R1,OUTPTR          -> OUTPUT POSITION FOR TRACK AMT
         BAL   LINK,INSRTNUM      OUTPUT IT
         MVC   1(3,R1),=C'TRK'    ADD LABEL
         LA    OUTPTR,6(R1)       -> NEXT AREA
         BR    R5                 RETURN
         SPACE
SPCDONE  EQU   *
         TITLE 'DATASET INQUIRY FUNCTION                DESCRIBE EXTENT*
               S OF DATASET'
         SPACE
* EXTENT DESCRIPTIONS
         SPACE
         BAL   LINK,NEWLINE       ADVANCE TO NEXT LINE
         SPACE
         MVC   LINE(L'XTENTHDR),XTENTHDR  MOVE IN HEADER LINE
         LA    OUTPTR,LINE+L'XTENTHDR     -> END OF LINE
         BAL   LINK,NEWLINE               NEXT LINE
         SPACE
         LA    R4,DS1EXT1         -> 1ST 3 EXTENTS IN F1 DSCB
         LA    R5,3               3 EXTENTS
         BAL   R6,WRTEXT          WRITE THEM OUT
         TM    FLAGS,HAVEF3       DO WE HAVE A F3 DSCB ?
         BNO   DESCDONE           NOPE
         SPACE
         LA    R4,DS3EXTNT        -> 1ST 4 EXTENTS IN F3 DSCB
         LA    R5,4               4 EXTENTS
         BAL   R6,WRTEXT          OUTPUT THEM
         LA    R4,DS3ADEXT        -> LAST 9 EXTENTS IN F3 DSCB
         LA    R5,9               9 EXTENTS
         LA    R6,DESCDONE        FALL THRU TO WRTEXT
         SPACE
WRTEXT   EQU   *                  LOCAL SUBR TO WRITE OUT EXTENTS
DESCLOOP CLI   0(R4),X'00'        EMPTY EXTENT ??
         BE    DESCDONE           YES, FINISHED
         SPACE
         SR    R2,R2              CLEAR FOR INSERTS
         SPACE
         IC    R2,1(R4)           EXTENT NUMBER
         LA    R2,1(R2)           PUT IN RANGE 1-16
         CVD   R2,DBLWRD          DECIMAL
         MVC   EXTNUM,EXTMASK     EDIT MASK
         ED    EXTNUM,DBLWRD+6    CHARACTER
         SPACE
         ICM   R2,B'0011',2(R4)   LOW CC
         CVD   R2,DBLWRD          DECIMAL
         MVC   LOWCC,EXTMASK      EDIT MASK
         ED    LOWCC,DBLWRD+5     CHARACTER
         SPACE
         ICM   R2,B'0011',4(R4)   LOW HH
         CVD   R2,DBLWRD          DECIMAL
         OI    DBLWRD+7,X'0F'     FIX SIGN FOR UNPK
         UNPK  LOWHH,DBLWRD+6(2)  CHARACTER
         MVI   LOWHH,C' '         KILL LEADING ZERO
         SPACE
         ICM   R2,B'0011',6(R4)   HIGH CC
         CVD   R2,DBLWRD          DECIMAL
         MVC   HICC,EXTMASK       EDIT MASK
         ED    HICC,DBLWRD+5      CHARACTER
         SPACE
         ICM   R2,B'0011',8(R4)   HIGH HH
         CVD   R2,DBLWRD          DECIMAL
         OI    DBLWRD+7,X'0F'     FIX SIGN FOR UNPK
         UNPK  HIHH,DBLWRD+6(2)   CHARACTER
         MVI   HIHH,C' '          KILL LEADING ZERO
         SPACE
         MVI   LOWCC,C'.'         LOOKS
         MVI   HICC,C'-'          NICE
         SPACE
         SR    R1,R1              CLEAR FOR
         SR    R0,R0              INSERTS
         ICM   R1,B'0011',6(R4)   HIGH CC
         ICM   R0,B'0011',2(R4)   LOW  CC
         SR    R1,R0              TOTAL CYL FOR THIS EXTENT
         LR    R3,R1              GET SET FOR MULTIPLY
         M     R2,TRKCYL          CONVERT CYLINDER EXTENT TO TRACKS
         SPACE
         ICM   R1,B'0011',8(R4)   HIGH HH
         LA    R1,1(R1)           BUMP BY ONE
         ICM   R0,B'0011',4(R4)   LOW  HH
         SR    R1,R0              TOTAL TRK FOR THIS EXTENT
         AR    R3,R1              ADD TO CYLINDER EXTENT SPACE
         D     R2,TRKCYL          GET CYLINDERS AND TRACKS
         SPACE
         LA    R1,EXTSPC          -> OUTPUT POSITION FOR SPACE DESC
         SPACE
         LTR   R3,R3              ANY CYLINDERS ?
         BZ    TRKONLY2           NOPE
         SPACE
         LR    R0,R3              NUMBER OF CYLINDERS
         BAL   LINK,INSRTNUM      OUTPUT IT
         MVC   1(3,R1),=C'CYL'    ADD LABEL
         LA    R1,5(R1)           -> NEXT AREA
         SPACE
         LTR   R2,R2              DO WE NEED TO OUTPUT TRKS ?
         BZ    NXTDESC            NO
         SPACE
TRKONLY2 LR    R0,R2              NUMBER OF TRACKS
         BAL   LINK,INSRTNUM      OUTPUT IT
         MVC   1(3,R1),=C'TRK'    ADD LABEL
         LA    R1,4(R1)           -> NEXT AREA
         SPACE 2
NXTDESC  LR    OUTPTR,R1          -> END OF LINE
         BAL   LINK,NEWLINE       NEXT LINE
         LA    R4,10(R4)          -> NEXT EXTENT
         BCT   R5,DESCLOOP        GET REST IN THIS GROUP
         BR    R6                 RETURN
         SPACE 3
DESCDONE EQU   *                  EXIT WHEN ALL EXTENTS WRITTEN OUT
         TITLE 'DATASET INQUIRY FUNCTION                NORMAL EXIT'
TPUT     L     R1,@CLINE          -> CURRENT LINE
         LA    R1,8(,R1)          -> PAST PREFIX
         CR    R1,OUTPTR          ANYTHING ON CURRENT LINE ?
         BE    EMPTYLIN           NOPE
         SPACE
         BAL   LINK,NEWLINE       WRITE THE LAST LINE
         SPACE
EMPTYLIN BAL   LINK,ENDLINE       FLUSH OUT BUFFER
         SPACE
RETURN   LA    R1,CORE            -> WORKAREA
         LA    R0,CORESIZE        LENGTH
         L     R13,4(,R13)        GET OLD SAVE AREA
         SVC   10                 FREE WORKAREA
         SPACE
         SR    R15,R15            RETURN CODE ZERO
         RETURN (14,12),,RC=(15)  RETURN TO CALLER
         TITLE 'DATASET INQUIRY FUNCTION                ERROR EXITS'
         SPACE
BADLOC   CH    R15,=H'8'
         BL    LOCRC
         CH    R15,=H'20'
         BH    LOCRC
         B     *-4(R15)           DETERMINE RETURN CODE
         B     LOC8
         B     LOC12
         B     LOC16
         B     LOC20
         SPACE 2
LOC8     MVC   LINE(L'NOQUAL),NOQUAL    "QUALIFICATION DOESN'T EXIST"
         LA    OUTPTR,L'NOQUAL+2(OUTPTR)
         B     INDXLVL
         SPACE
LOC12    MVC   LINE(L'NEEDQUAL),NEEDQUAL  "INSUFFICIENT QUALIFICATION"
         LA    OUTPTR,L'NEEDQUAL+2(OUTPTR)
         B     INDXLVL
         SPACE
LOC16    MVC   LINE(L'OVERQUAL),OVERQUAL  "TOO MUCH QUALIFICATION"
         LA    OUTPTR,L'OVERQUAL+2(OUTPTR)
         B     INDXLVL
         SPACE
INDXLVL  LR    R2,R0                      SAVE R0
         BAL   LINK,NEWLINE               NEXT LINE
         MVC   LINE(L'INDXMSG),INDXMSG    "INDEX LEVEL "
         LA    R1,LINE+L'INDXMSG          -> AREA FOR LEVEL NUM
         LR    R0,R2                      INDEX LEVEL NUMBER
         BAL   LINK,INSRTNUM
         LA    OUTPTR,2(R1)               -> PAST
         B     TPUT
         SPACE
LOC20    MVC   LINE(L'BADDSN),BADDSN    "INVALID DSNAME"
         LA    OUTPTR,L'BADDSN+2(OUTPTR)
         B     TPUT
         SPACE
LOCRC    MVC   LINE(L'LOCHDR),LOCHDR    "LOCATE RETURN CODE XX"
         MVC   LINE+L'LOCHDR(L'RCMSG),RCMSG
         LR    R0,R15                     RETURN CODE
         LA    R1,LINE+L'LOCHDR+L'RCMSG   -> OUTPUT AREA
         BAL   LINK,INSRTNUM
         LA    OUTPTR,2(R1)               -> PAST
         B     TPUT
         EJECT
BADOBTN  CH    R15,=H'4'
         BL    OBTNRC
         CH    R15,=H'12'
         BH    OBTNRC
         B     *(R15)             DETERMINE RETURN CODE
         B     OBTN4
         B     OBTN8
         B     OBTN12
         SPACE 2
OBTN4    MVC   LINE(L'BADVOL1),BADVOL1  "VOLUME "
         MVC   LINE+L'BADVOL1(L'VOLSER),VOLSER
         LA    R1,LINE+L'BADVOL1        -> VOLSER STRING
         LA    R0,L'VOLSER              LENGTH
         BAL   R14,CHOPSTR              TRIM TRAILING BLANKS
         LR    OUTPTR,R1                -> PAST VOLSER
         MVC   LINE(L'BADVOL2),BADVOL2  " NOT MOUNTED"
         LA    OUTPTR,LINE+L'BADVOL2    -> PAST
         B     TPUT
         SPACE
OBTN8    MVC   LINE(L'BADDS),BADDS      "DATASET DOES NOT EXIST"
         LA    OUTPTR,L'BADDS+2(OUTPTR)
         B     TPUT
         SPACE
OBTN12   MVC   LINE(L'VTOCERR),VTOCERR  "I/O ERROR ON VTOC"
         LA    OUTPTR,L'VTOCERR+2(OUTPTR)
         B     TPUT
         SPACE
OBTNRC   MVC   LINE(L'OBTNHDR),OBTNHDR  "OBTAIN RETURN CODE XX"
         MVC   LINE+L'OBTNHDR(L'RCMSG),RCMSG
         LR    R0,R15                      RETURN CODE
         LA    R1,LINE+L'OBTNHDR+L'RCMSG   -> OUTPUT AREA
         BAL   LINK,INSRTNUM
         LA    OUTPTR,2(R1)                -> PAST
         B     TPUT
         EJECT
NOFILE   MVC   LINE(L'NOFILE1),NOFILE1  "FILE "
         MVC   LINE+L'NOFILE1(L'DDNAME),DDNAME
         LA    R1,LINE+L'NOFILE1        -> DDNAME STRING
         LA    R0,L'DDNAME              LENGTH
         BAL   R14,CHOPSTR              TRIM TRAILING BLANKS
         LR    OUTPTR,R1                -> PAST DDNAME
         MVC   LINE(L'NOFILE2),NOFILE2  " NOT FOUND"
         LA    OUTPTR,LINE+L'NOFILE2    -> PAST
         B     TPUT
         SPACE 2
BADFILE  MVC   LINE(L'BADFILE1),BADFILE1 "FILE "
         MVC   LINE+L'BADFILE1(L'DDNAME),DDNAME
         LA    R1,LINE+L'BADFILE1       -> DDNAME STRING
         LA    R0,L'DDNAME              LENGTH
         BAL   R14,CHOPSTR              TRIM TRAILING BLANKS
         LR    OUTPTR,R1                -> PAST DDNAME
         MVC   LINE(L'BADFILE2),BADFILE2 " IS NOT VALID FOR DD"
         LA    OUTPTR,LINE+L'BADFILE2   -> PAST
         B     TPUT
         EJECT
GNRLFAIL DS    0H                 CALL GENERAL FAIL
         SPACE
         XC    GFPARMS(GFLENGF),GFPARMS    INIT GENERAL FAIL PARM LIST
         SPACE
         ST    R15,GFRCODE        RETURN CODE IN PARM LIST
         STH   R1,GFCALLID        FAILING ROUTINE ID
         L     R1,4(,R13)         -> PREV SAVE AREA
         L     R1,24(,R1)         REG 1 IN PREV SAVE AREA (-> CPPL)
         ST    R1,GFCPPLP         -> CPPL FOR GENRL FAIL
         LA    R1,DSINFO+5        -> PROGRAM NAME
         ST    R1,GFPGMNP         FOR ERROR MSG
         LA    R1,6               LENGTH OF NAME
         STH   R1,GFPGMNL         FOR GENERAL FAIL
         SPACE
         LA    R1,ECB             -> DUMMY ECB
         ST    R1,GFECBP          FOR GENERAL FAIL TO GIVE TO PUTLINE
         SR    R1,R1
         ST    R1,ECB             CLEAR ECB
         SPACE
         LA    R1,GFPARMS         -> GENERAL FAIL PARMS
         ST    R1,GFPARMP         ADDR LIST FOR LINK
         SPACE
         LINK  EP=IKJEFF19,MF=(E,GFPARMP)  DIAGNOSE RETURN CODE
         SPACE
         LTR   R15,R15            GENERAL FAIL EXECUTE OK ?
         BZ    RETURN
         SPACE 2
         ABEND 100,DUMP           WHY ?
         TITLE 'DATASET INQUIRY FUNCTION                SUBROUTINES'
         SPACE
*
*  INPUT -  R0 = BINARY NUMBER
*           R1 -> OUTPUT AREA
*  OUTPUT - NUMBER IS OUTPUT LEFT JUSTIFIED WITH COMMA(S) AND LEADING
*           MINUS SIGN (IF NEGATIVE).  R0 WILL CONTAIN LENGTH OF CHAR
*           NUMBER AND R1 WILL POINT PAST THE NUMBER UPON RETURN.
*  NOTE   - A DECIMAL NUMBER MAY BE OUTPUT BY PLACING THE NUMBER IN
*           THE AREA "DBLWRD" AND USING "INSRTPAK" ENTRY.
*
INSRTNUM CVD   R0,DBLWRD          GET DECIMAL
INSRTPAK STM   R2,R3,28(R13)      SAVE WORK REGISTERS
         LR    R3,R1              PTR TO OUTPUT AREA
         SPACE
         MVC   EDITWK,EDITPAT     P'ZZZ,ZZZ,ZZZ,ZZZ,ZZ9'
         LA    R1,EDITWK+L'EDITWK-1   -> SIGNIFICANT DIGIT
         EDMK  EDITWK,DBLWRD      FORMAT NUMBER
         BNM   INSRTNTM           NO NEED TO ADD MINUS SIGN
         BCTR  R1,0               CHAR BEFORE SIG DIGIT
         MVI   0(R1),C'-'         LEADING MINUS SIGN
         SPACE
INSRTNTM LA    R2,EDITWK+L'EDITWK-1   -> LAST DIGIT
         SR    R2,R1              LENGTH TO MOVE - 1
         EX    R2,INSRTMVC        MOVE NUMBER TO OUTPUT AREA
         SPACE
         LA    R0,1(R2)           LENGTH OF NUMBER
         LA    R1,1(R2,R3)        -> PAST NUMBER
         SPACE
         LM    R2,R3,28(R13)      RESTORE REGISTERS
         BR    LINK               RETURN
         SPACE 2
INSRTMVC MVC   0(*-*,R3),0(R1)    LEFT JUSTIFY OUTPUT NUMBER
EDITPAT  DC    4X'2020206B',X'202120'  EDIT PATTERN
         EJECT
         SPACE
*
*  INPUT -  OUTPTR -> END OF CURRENT OUTPUT LINE
*
*  OUTPUT - OUTPTR IS UPDATED TO POINT TO NEXT FREE OUTPUT AREA.
*           POINTERS ARE SET UP FOR THE PUTLINE SERVICE ROUTINE.
*           IF IOAREA IS FULL THEN IT IS WRITTEN OUT.
*
*  ENTRY  - ENDLINE ENTRY POINT FLUSHES IO BUFFER WITHOUT
*           WRITING A LINE.
*
* USES   - @CLINE  ->  START OF CURRENT LINE
*          @PLINE  ->  START OF PREVIOUS LINE
*
         SPACE
NEWLINE  DS    0H                 ADVANCE TO NEXT OUTPUT LINE
         SPACE
         STM   R2,R3,SAVEREG      SAVE REGISTERS
         SPACE
         LA    OUTPTR,0(,OUTPTR)  CLEAR HIGH BYTE
         LR    R3,OUTPTR          -> START OF NEXT LINE
         L     R2,@CLINE          -> START OF CURRENT LINE
         ST    R3,0(,R2)          CHAIN TO NEXT LINE
         SPACE
         SR    R3,R2              LENGTH OF CURRENT LINE
         SH    R3,=H'4'           MINUS LENGTH OF CHAIN WORD
         STH   R3,4(,R2)          STORE LENGTH FOR PUTLINE
         SR    R3,R3              CLEAR
         STH   R3,6(,R2)          ZERO OFFSET VALUE
         SPACE
         ST    OUTPTR,@CLINE      SAVE PTR TO CURRENT LINE
         ST    R2,@PLINE          SAVE PTR TO PREVIOUS LINE
         LA    OUTPTR,8(,OUTPTR)  -> PAST PREFIX
         SPACE
         LA    R2,IOEND           -> END OF IOAREA
         CR    OUTPTR,R2          END OF AREA ?
         BL    NLRTN              NOPE
         B     BUFFLUSH           TIME TO WRITE I/O BUFFER
         SPACE
ENDLINE  STM   R2,R3,SAVEREG      ENTRY POINT TO FLUSH BUFFER
         SPACE
BUFFLUSH TM   FLAGS,CLRSCN        CLEAR SCREEN ???
         BNO  NOCLR               NOPE
         SPACE
         STLINENO LINE=1
         NI    FLAGS,X'FF'-CLRSCN     RESET FLAG
         SPACE
NOCLR    LA    R1,IOAREA+8        -> START OF I/O AREA DATA
         CR    R1,OUTPTR          ANYTHING TO WRITE ?
         BE    NLRTN              NOPE - SKIP IT
         SPACE
         L     R1,@PLINE          -> LAST LINE
         SR    R0,R0              CLEAR REGISTER
         ST    R0,0(,R1)          ZERO LAST CHAIN WORD TO TERMINATE
         SPACE
         PUTLINE OUTPUT=(IOAREA,MULTLIN,DATA),MF=(E,IOPLSECT)
         SPACE
         LTR   R15,R15            PUTLINE OK ?
         BZ    SETBUF2            YES - DONE
         LA    R1,GFPUTL          PUTLINE ERROR
         B     GNRLFAIL           GET GENERAL FAIL TO DIAGNOSE ERROR
         SPACE
SETBUFR  STM   R2,R3,SAVEREG      SETUP I/O BUFFER
SETBUF2  SR    R3,R3              ZERO SOURCE LENGTH
         ICM   R3,B'1000',=C' '   BLANK PAD CHAR
         LA    R1,LIOAREA         LENGTH OF IOAREA
         LA    R0,IOAREA          -> IO BUFFER
         MVCL  R0,R2              INITIALIZE IT TO BLANKS
         SPACE
         LA    R1,IOAREA          -> OUTPUT AREA
         ST    R1,@CLINE          SAVE ADDR FOR PUTLINE
         LA    OUTPTR,8(,R1)      -> FIRST FREE DATA BYTE
         SPACE
NLRTN    LM    R2,R3,SAVEREG      RESTORE REGISTERS
         BR    LINK               RETURN
         EJECT
         SPACE
*
* INPUT  -  R0 ->  OUTPUT AREA TO PLACE DATE IN FORM MM/DD/YY
*           R1 ->  JULIAN DATE IN FORM YDD  (BINARY)
* OUTPUT -  DATE IS CONVERTED TO GREGORIAN FORMAT.
*
CNVTDATE STM   R2,R5,28(R13)      SAVE WORK REGISTERS
         LR    R5,R0              -> OUTPUT AREA
         LR    R4,R1              -> YDD  (BINARY)
         LH    R2,1(R4)           NUM DAYS SINCE JAN 1
         TM    0(R4),X'03'        YEAR DIVISIBLE BY 4 ?
         BNZ   LEAPBYP            NOPE
         CH    R2,=H'60'          DOES LEAP YEAR AFFECT CUR DATE ?
         BL    LEAPBYP            NO - BEFORE FEB 29                   C
                                  YES - PAST FEB 29 NEEDS ADJUST
         BCTR  R2,0               FIX FOR EXTRA DAY
         SPACE
LEAPBYP  LA    R1,DAYSTBLE        -> JULIAN DATE TABLE
         LA    R3,12              NUMBER OF MONTHS
         SPACE
DAYSLOOP CH    R2,0(R1)           LESS THAN THIS MONTH ??
         BH    GOTMON             NO - WE HAVE A MONTH
         SH    R1,=H'2'           BACK UP A MONTH
         BCT   R3,DAYSLOOP
         SPACE
         MVC   0(8,R5),=CL8'??/??/??'   SHOULD NEVER FALL THRU
         B     CVTDATRT                 RETURN
         SPACE
GOTMON   SH    R2,0(R1)           CURRENT DAY OF MONTH
         SR    R1,R1              CLEAR FOR INSERT
         IC    R1,0(,R4)          PICK UP YEAR
         SPACE
*  R1 = YEAR   R2 = DAY   R3 = MONTH
         SPACE
         CVD   R1,DBLWRD          YEAR IN DECIMAL
         ZAP   DATEWK,DBLWRD      PUT IN YEAR
         CVD   R2,DBLWRD          DAY IN DECIMAL
         NI    DBLWRD+7,X'F0'     ZERO SIGN NIBBLE
         OC    DATEWK+1(2),DBLWRD+6    PUT IN DAY
         CVD   R3,DBLWRD          MONTH IN DECIMAL
         NI    DBLWRD+7,X'F0'     ZERO SIGN NIBBLE
         OC    DATEWK(2),DBLWRD+6 PUT IN MONTH
         MVC   EDITWK(10),DATEPAT MM/DD/YY
         ED    EDITWK(10),DATEWK  FORMAT DATE
         MVC   0(8,R5),EDITWK+2   MOVE TO OUTPUT AREA
         SPACE
CVTDATRT LM    R2,R5,28(R13)      RESTORE REGISTERS
         BR    LINK               RETURN
         SPACE 2
DATEPAT  DC    X'40202120612020612020'  DATE PATTERN  MM/DD/YY
         SPACE
         EJECT
*  FUNCTION -
*        THIS SUBROUTINE TRANSLATES THE UCBTYP FIELD INTO A
*        CHARACTER EBCDIC DEVICE NAME.  UPON ENTRY REGISTER ZERO
*        SHOULD CONTAIN THE UCBTYP FIELD. THE UNIT TYPE IS PLACED
*        AT THE ADDRESS POINTED TO BY REGISTER 1.
*  INPUT -
*        R0 =  UCBTYP FIELD
*        R1 -> OUTPUT AREA TO PLACE DEVICE NAME
*  OUTPUT -
*        R1 -> PAST END OF EBCDIC DEVICE NAME.
*
*  NOTES -
*        THE TRANSLATION IS MADE BY LOOKING UP THE UCBTYP IN THE
*        SYSTEM DEVNAMET TABLE, WHICH IS A LOAD MODULE KEPT IN THE
*        LINK PACK AREA.  THE ADDRESS OF THE DEVNAMET MODULE IS SAVED
*        TO AVOID A LINK-PACK SEARCH NEXT TIME THIS MODULE IS CALLED.
*
*        IN XA SYSTEMS, THE DEVICE NAME TABLE NO LONGER        10/16/90
*        EXISTS.  WHEN DEVNAMET CANNOT BE FOUND, TRANSLATION   10/16/90
*        IS PERFORMED VIA A CALL TO IEFEB4UV (MVS UNIT         10/16/90
*        VERIFICATION SERVICE).                                10/16/90
*
         SPACE 2
UCBTRAN  STM   R14,R12,12(R13)    SAVE REGISTERS
         LR    R2,R0              GET PARM
         N     R2,MASKTYPE        MASK OUT IOS-USED BITS IN UCBTYPE
         LR    R4,R1              SAVE OUTPUT AREA POINTER
         SPACE
         ICM   R5,B'1111',@DEVNAME DEVNAMET PREVIOUSLY FOUND?  10/16/90
         BP    HAVNAMET           YES - SKIP LPA SEARCH        10/16/90
         BM    UCBTRANX           PRIOR SEARCH FAILED, BRANCH  10/16/90
         SPACE
         L     R3,CVTPTR          GET ADDRESS OF CVT
         L     R15,CVTLPDSR-CVT(,R3) GET ADDR OF LPDE SEARCH ROUTINE
         LM    R0,R1,DEVNAMET     GET 'DEVNAMET' IN R0 & R1
         BALR  R14,R15            CALL IEAVVMSR - DESTROYS R6, R8 & R9
         B     GOTNAMET           +0 - DEVNAMET FOUND
         MVI   3(R4),C'1'         +4 - DEVNAMET NOT FOUND
         MVI   @DEVNAME,X'80'     REMEMBER DEVNAMET NOT THERE  10/16/90
         B     UCBTRANX           ERROR EXIT                   10/16/90
GOTNAMET DS    0H                 DEVNAMET LPDE FOUND
         LR    R1,R0              GET ADDRESS OF DEVNAMET LPDE
         L     R5,LPDENTP-LPDE(,R1) GET EP ADDRESS OF DEVNAMET
         LA    R5,0(,R5)          CLEAR BIT0 JUST IN CASE      10/16/90
         ST    R5,@DEVNAME        SAVE FOR FUTURE USE
HAVNAMET L     R15,0(,R5)         GET NUMBER OF ENTRIES
         LA    R5,4(,R5)          GET ADDRESS OF 1ST ENTRY
         SPACE
UCBTDEV  C     R2,8(,R5)          UCBTYP MATCH ?
         BE    UCBTGOT            YES - UCBTYP FOUND
         LA    R5,12(,R5)         NO - POINT TO NEXT ENTRY
         BCT   R15,UCBTDEV        LOOP UNTIL END
         SPACE
         MVI   3(R4),C'2'         INDICATE ERROR TYPE
         B     NONAMET            UCBTYP NOT FOUND
         SPACE
UCBTGOT  DS    0H                 UCBTYP FOUND IN DEVNAMET
         LA    R0,8               LENGTH OF DEVICE NAME
         LR    R1,R5              -> DEVICE NAME
         BAL   R14,CHOPSTR        CHOP OFF TRAILING BLANKS
         BNP   BLNKDEVC           ERROR - NAME IS ALL BLANKS
         SPACE
         LR    R1,R0              COPY LENGTH
         BCTR  R1,0               ADJUST LENGTH FOR EX
         EX    R1,MOVEDEVN        MOVE DEVICE NAME TO OUTPUT AREA
         LA    R4,1(R1,R4)        -> PAST
         SPACE
UCBTRETN LR    R1,R4              PASS POINTER BACK TO CALLER
         LM    R2,R12,28(R13)     RESTORE REGISTERS
         BR    LINK               RETURN
         SPACE ,                                               10/16/90
*                                                              10/16/90
*  DEVNAMET WAS NOT FOUND, WE MUST BE RUNNING ON AN XA         10/16/90
*  SYSTEM.  USE IEFEB4UV TO PROCESS WHATEVER PASSES FOR        10/16/90
*  THE DEVICE NAME TABLE THESE DAYS.                           10/16/90
*                                                              10/16/90
UCBTRANX XC    UNITABLE,UNITABLE  CLEAR UNIT TABLE             10/16/90
         ST    R2,UNITABLE+8      STORE UCBTYP FIELD           10/16/90
         LA    R5,UNITABLE        POINT TO UNIT TABLE          10/16/90
         ST    R5,IEFEBPRM        (WILL SOON BE UNIT NAME)     10/16/90
         LA    R1,=AL1(BIT2+BIT7,0)  POINT TO FLAGS            10/16/90
         ST    R1,IEFEBPRM+4           "                       10/16/90
         OI    IEFEBPRM+4,X'80'   SET VL BIT                   10/16/90
         LA    R1,IEFEBPRM        POINT TO PARAMETER LIST      10/16/90
         ST    R13,IEFEBSAV+4     PROVIDE A SAVE AREA          10/16/90
         LA    R13,IEFEBSAV            "                       10/16/90
         LINK  EP=IEFEB4UV        MUSH                         10/16/90
         L     R13,4(,R13)        RESTORE OLD SAVE AREA        10/16/90
         LTR   R15,R15            EVERYTHING OKAY?             10/16/90
         BZ    UCBTGOT            YES, GO MOVE AND TRUNCATE    10/16/90
         MVI   3(R4),C'4'         INDICATE TRANSLATION ERROR   10/16/90
         B     NONAMET            AND EXIT                     10/16/90
         SPACE ,
BLNKDEVC MVI   3(R4),C'3'         ERROR TYPE - DEVICE ALL BLANKS
         SPACE
NONAMET  MVC   0(3,R4),=C'ERR'    INDICATE UCBTRAN TRANSLATION ERROR
         MVC   4(3,R4),=C'(X'''
         UNPK  7(9,R4),20(5,R13)  CONVERT DEVTYPE TO HEX
         NC    7(8,R4),HEXMASK    PUT WITHIN RANGE OF TR
         TR    7(8,R4),HEXTABLE   CONVERT TO HEX PRINTABLE
         MVC   15(3,R4),=C''') '
         LA    R4,17(R4)          -> PAST
         B     UCBTRETN           RETURN
         SPACE
MOVEDEVN MVC   0(*-*,R4),0(R5)    MOVE DEVICE NAME TO OUTPUT AREA
         EJECT
         SPACE
*
*  INPUT -  R1 -> STRING
*           R0 = LENGTH OF STRING
*  OUTPUT - TRAILING BLANKS ARE CHOPPED OFF END OF STRING.
*           R1 -> FIRST BLANK AFTER STRING
*           R0 = NEW LENGTH OF STRING
*           CONDITION CODE IS SET ACCORDING TO VALUE OF R0.
*
*  NOTES:  THIS SUBROUTINE USES R14 INSTEAD OF LINK TO ALLOW
*          IT TO BE CALLED FROM OTHER SUBROUTINES.
*
CHOPSTR  LR    R15,R0             LENGTH OF STRING
         LA    R1,0(R15,R1)       -> PAST STRING
         BCTR  R1,0               -> LAST CHAR IN STRING
         SPACE
CHOPLOOP CLI   0(R1),C' '         BLANK ?
         BH    CHOPPED            NO - HIT SIGNIFICANT CHARACTER
         BCTR  R1,0               YES - CHOP IT
         BCT   R15,CHOPLOOP       LOOP TILL END OF STRING
         SPACE
CHOPPED  LTR   R0,R15             NEW LENGTH OF STRING   (ALSO SET CC)
         LA    R1,1(,R1)          -> FIRST BLANK AFTER STRING
         BR    R14                RETURN
         TITLE 'DATASET INQUIRY FUNCTION                CONSTANTS'
MOVEPARM MVC   0(*-*,R3),0(R1)    MOVE PARAMETERS FROM PDL
         SPACE
NAMECAM  CAMLST NAME,0,,0         FOR LOCATE MACRO
         ORG   NAMECAM+4          BACK UP OVER ADCONS
SRCHCAM  CAMLST SEARCH,0,0,0      FOR OBTAIN MACRO
         ORG   SRCHCAM+4          BACKUP OVER ADCONS
SEEKCAM  CAMLST SEEK,0,0,0        FOR OBTAIN MACRO
         ORG   SEEKCAM+4          BACK UP OVER ADCONS
         SPACE
         DC    Y(0,31,59,90,120,151,181,212,243,273,304,334) JAN-DEC
DAYSTBLE EQU   *-2                -> DECEMBER
         SPACE
PCLADDR  DC    A(PARMTAB)         -> PCL
         SPACE
         DS    0F
MASKTYPE DC    AL1(255,255-(UCBRR+UCBRVDEV+UCBVLPWR+UCBDVPWR),255,255) *
                                  MASK OUT BITS USED BY IOS IN UCBTYP
DEVNAMET DC    CL8'DEVNAMET'      MODULE NAME FOR LPDE SEARCH ROUTINE
         SPACE
GLWKSIZE DC    A(X'7FFC')         SIZE OF WORKAREA PASSED TO GENLOC
         SPACE
GLWKMAXR DC    Y((X'7FFC'-4)/45*45) LEN OF MAX POSSIBLE USED WORKAREA
         SPACE
GLWKHDR  DC    X'7FFC0004'        HEADER OF GENLOC WORKAREA
         SPACE
GENLFLAG DC    X'05'              CTGNAME+CTGGENLD = DSNAME GEN LOC
         DC    X'20'              CTGRCATN = RETURN CATALOG NAME
         DC    X'11'              CTGSUPLT+CTGAM0 = SUPER LOC AND
         DC    X'00'                                NOT A CAMLST
         EJECT
         PRINT NOGEN
PARMTAB  IKJPARM
DSNIN    IKJPOSIT DSNAME,USID,PROMPT='DSNAME'
VOLGENKY IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSUBF,ALIAS='VOLSER'
         IKJNAME 'GENERATION',SUBFLD=GENSUBF
PARTLKY  IKJKEYWD
         IKJNAME 'PARTIAL'
VOLSUBF  IKJSUBF
VOLIN    IKJIDENT 'VOLUME',MAXLNTH=6,PROMPT='VOLUME',                  *
               FIRST=ALPHA,OTHER=ALPHANUM
GENSUBF  IKJSUBF
GENIN    IKJIDENT 'GENERATION NUMBER',MAXLNTH=5,                       *
               FIRST=ANY,OTHER=NUMERIC,                                *
               VALIDCK=GENCHK,                                         *
               DEFAULT='0'
         IKJENDP
         SPACE
         PRINT GEN
         SPACE 2
GENCHK   DS    0H
         SAVE  (14,5),,GENCHK-&SYSDATE-&SYSTIME
         SPACE
         LR    R5,R15
         USING GENCHK,R5
         SPACE
         L     R2,0(,R1)          -> PDE FOR GENERATION NUMBER
         L     R3,0(,R2)          -> GENERATION NUMBER
         SPACE
         CLI   0(R3),C'0'         NUMERIC ?
         BL    TESTSIGN           NO, CHECK FOR MINUS
         CLI   0(R3),C'9'         NUMERIC ?
         BH    BADGEN             NO, INVALID GENERATION NUMBER
         LH    R0,4(,R2)          LENGTH OF PARAMETER
         CH    R0,=H'4'           OVER 4 DIGITS ?
         BH    BADGEN             YES - REJECT
         B     OKGEN              YES, OK
         SPACE
TESTSIGN CLI   0(R3),C'-'         MINUS SIGN ?
         BNE   BADGEN             NO, INVALID GENERATION NUMBER
         SPACE
OKGEN    SR    R15,R15
         B     GENRTN
BADGEN   LA    R15,4              TELL PARSE TO ISSUE ERROR MESSAGE
         SPACE
GENRTN   RETURN (14,5),,RC=(15)
         SPACE
         DROP  R5
         SPACE
DSORGTBL DC    C'ISPSDACX....POU GSTXTQ..AMTR....'  DSORG TABLE
RECFMTBL DC    C'VFUTBSAM'                          RECFM TABLE
BSAMOPT  DC    B'11111111',C'WUCHQZTJ'              OPTCD TABLES
BDAMOPT  DC    B'11111001',C'WTEFA..R'
ISAMOPT  DC    B'11111011',C'WUMIY.LR'
HEXTABLE DC    C'0123456789ABCDEF'                  HEX CONVERSION
HEXMASK  DC    8X'0F'                               HEX CONVERSION
         SPACE
EXTMASK  DC    X'402020202120'    EDIT MASK FOR EXTENT DESCRIPTIONS
XTENTHDR DC    C'EXTENTS  #   CCC HH     CCC HH'
         SPACE
TYPTABLE DC    C'ACDIPUXBGV'      TABLE OF TYPES RETURNED BY GENLOC
TYPCNT   EQU   *-TYPTABLE         NUM OF ENTRIES
         SPACE
TYPDESC  DC    CL15'NON-VSAM ------'
         DC    CL15'CLUSTER -------'
         DC    CL15'DATA ----------'
         DC    CL15'INDEX ---------'
         DC    CL15'PAGE SPACE ----'
         DC    CL15'USER CATALOG --'
         DC    CL15'ALIAS ---------'
         DC    CL15'GDG ENTRY------'
         DC    CL15'ALT INDEX -----'
         DC    CL15'VOLUME --------'
         SPACE
BADDSN   DC    C'*** INVALID DSNAME ***'
FILLMSG  DC    C'32K RETURN AREA FILLED - ONLY 728 DATASETS LISTED'
NOQUAL   DC    C'QUALIFICATION DOES NOT EXIST'
NEEDQUAL DC    C'INSUFFICIENT QUALIFICATION'
OVERQUAL DC    C'TOO MUCH QUALIFICATION'
INDXMSG  DC    C'INDEX LEVEL '
BADVOL1  DC    C'VOLUME '
BADVOL2  DC    C' NOT MOUNTED'
BADDS    DC    C'DATASET NOT ON VOLUME'
VTOCERR  DC    C'*** I/O ERROR WHILE READING VTOC, NOTIFY SYSTEMS ***'
LOCHDR   DC    C'LOCATE'
OBTNHDR  DC    C'OBTAIN'
RCMSG    DC    C' RETURN CODE '
NOFILE1  DC    C'FILE '
NOFILE2  DC    C' NOT FOUND'
BADFILE1 EQU   NOFILE1,L'NOFILE1
BADFILE2 DC    C' IS INVALID FOR DD'
         SPACE 2
         LTORG
         SPACE 2
         TITLE 'DATASET INQUIRY FUNCTION                EQUATES AND DSE*
               CTS'
         SPACE 3
R0       EQU   0                  WORK REGISTER
R1       EQU   1                  WORK REGISTER
R2       EQU   2                  WORK REGISTER
R3       EQU   3                  WORK REGISTER
R4       EQU   4                  WORK REGISTER
R5       EQU   5                  WORK REGISTER
R6       EQU   6                  WORK REGISTER
R7       EQU   7   ) DUAL         WORK REGISTER
@DVCT    EQU   7   ) DEFINITION   BASE REGISTER FOR DVCT DSECT
R8       EQU   8                  WORK REGISTER
R9       EQU   9   ) DUAL         WORK REGISTER
LINK     EQU   9   ) DEFINITION   LINKAGE REGISTER FOR SUBROUTINES
OUTPTR   EQU   10                 POINTER TO POSITION IN OUTPUT BUFFER
R11      EQU   11                 FIRST  BASE REGISTER FOR DSINFO CSECT
R12      EQU   12                 SECOND BASE REGISTER FOR DSINFO CSECT
R13      EQU   13                 BASE REGISTER FOR CORE DSECT
R14      EQU   14                 WORK REGISTER
R15      EQU   15                 WORK REGISTER
         EJECT
         IKJCPPL
CPPLLEN  EQU   *-CPPL
         SPACE 2
         IKJPPL
PPLLEN   EQU   *-PPL
         SPACE 2
         IKJIOPL
IOPLLEN  EQU   *-IOPL
         SPACE 2
         EJECT
         SPACE
         CVT   DSECT=YES,LIST=NO
         SPACE
         EJECT
         SPACE
         IHALPDE
         SPACE
         EJECT
         SPACE
         IKJTCB DSECT=YES,LIST=NO
         SPACE
         EJECT
         SPACE
TIOT     DSECT
         IEFTIOT1
         SPACE
         EJECT
         SPACE
UCB      DSECT
         IEFUCBOB LIST=NO
         EJECT
         SPACE 2
CORE     DSECT
         DS    18F
         SPACE
DBLWRD   DS    D
SAVEREG  DS    4F                 FOR SUBROUTINES
@CLINE   DS    F                  -> CURRENT OUTPUT LINE
@PLINE   DS    F                  -> PREVIOUS OUTPUT LINE
DVCTPTR  DS    F                  -> DVCT ENTRY
TRKCYL   DS    F                  NUMBER OF TRACKS PER CYLINDER
@DEVNAME DS    A                  -> DEVNAMET MODULE IN LPA
@GENWKA  DS    A                  -> ADDRESS OF GENLOC WORK AREA
DSNLEN   DS    H                  LENGTH OF DSNAME
         DS    H
         SPACE
IOPB     PUTLINE MF=L
PPLSECT  DS    0F                 PPL AREA
         DS    CL(PPLLEN)
IOPLSECT DS    0F                 IOPL AREA
         DS    CL(IOPLLEN)
ECB      DS    F                  ECB FOR PARSE
PARSBACK DS    F                  -> PARSE PDL
GFPARMP  DS    F                  -> GENERAL FAIL PARM BLOCK
         IKJEFFGF                 GENERAL FAIL PARM BLOCK
         EJECT
CAMLST   DS    F                  FLAG BYTES INDICATING FUNC OF CAMLST
CAMLSTP2 DS    A                  PARAMETER TWO OF CAMLST
CAMLSTP3 DS    A                  PARAMETER THREE OF CAMLST
CAMLSTP4 DS    A                  PARAMETER FOUR OF CAMLST
         SPACE
         ORG   CAMLST             REUSE SOME AREA
GENLPARM DS    F                  FLAGS INDICATING FUNCTION
GENDSN   DS    A                  -> GENERIC KEY
GENCAT   DS    A                  -> CATALOG DSNAME
GENWKA   DS    A                  -> WORK AREA
GENX1    DS    XL12               UNUSED PTRS
         ORG
         SPACE
         DS    0D
CAMAREA  DS    CL265              CAMLST WORK AREA
         ORG   CAMAREA
         DS    3CL140             RESERVE SPACE FOR 3 DSCB'S
         ORG   CAMAREA            LABELS FOR LOCATE INFO
VOLCNT   DS    H                  VOLUME SERIAL COUNT
VOLENT   EQU   *                  START OF VOLUME ENTRIES
         SPACE 2
         ORG   CAMAREA-44         BACK UP TO ELIMINATE 44 CHAR DSN
         IECSDSL1 (1,2,3)         GEN FMT 1,2 AND 3 DSCB LABELS
         SPACE 2
         ORG   IECSDSL1           START OF F1 DSCB
         DS    CL45
ASM2USEC DS    0XL3               NEW ASM2 (2.4) USE COUNT LOCATION
ASM2UDAT DS    XL3                LAST USE DATE (YDD)
ASM2MDAT DS    XL3                LAST MOD DATE (YDD)
         DS    CL11
ASM2MJOB DS    CL8                JOBNAME/USERID LAST MODIFIED DS
         DS    CL6
ASM2UCNT DS    XL4                USE COUNT
ASM2MTOD DS    XL2                TIME WHEN DS MODIFIED (HHMM)
         SPACE 3
         ORG
DSNLENC  DS    X                  LENGTH OF DSNAME FOR GENERIC LOCATE
DSNAME   DS    CL44               DSNAME
DDNAME   DS    CL8                DDNAME (IF FILE TYPE CAT)
VOLSER   DS    CL6                VOLSER OF DATASET
EDITWK   DS    CL19               FOR INSRTNUM SUBROUTINE
DATEWK   DS    CL4                FOR CNVTDATE SUBROUTINE
DEVTYPE  DS    X                  LAST BYTE OF UCBTYPE FIELD
FLAGS    DS    X
NOVOL    EQU   X'80'              NO VOLUME SERIAL SUPPLIED
GDGDSN   EQU   X'40'              GENERATION NUMBER SUPPLIED
HAVEF3   EQU   X'20'              FORMAT 3 DSCB HAS BEEN READ
CLRSCN   EQU   X'10'              CLEAR SCREEN REQUESTED
SINGDSN  EQU   X'08'              ONE DSNAME FROM GENERIC LOCATE
PARTIAL  EQU   X'04'              PARTIAL DSNAME SUPPLIED
FILETYPE EQU   X'02'              FILE TYPE INPUT
         SPACE
IOAREA   DS    25CL80
IOEND    EQU   *
LIOAREA  EQU   *-IOAREA           LENGTH OF IOAREA
         SPACE
         DS    CL80               BUFFER JUST IN CASE
         ORG   ,                                               10/16/90
IEFEBPRM DS    2F                 IEFEB4UV PARAMETER LIST      10/16/90
UNITABLE DS    CL12               IEFEB4UV UNIT TABLE          10/16/90
IEFEBSAV DS    18F                SAVE AREA FOR IEFEB4UV       10/16/90
         SPACE ,                                               10/16/90
IOSVSWRK DC    100X'00'           IOSVSUCB WORKAREA            10/16/90
IOSVSPRM DC    A(IOSVSWRK)         )                           10/16/90
         DC    A(IOSVSDEV)         ) MUST BE KEPT TOGETHER     10/16/90
         DC    X'80',AL3(IOSVSUCB) )                           10/16/90
IOSVSUCB DS    A                  UCB ADDRESS                  10/16/90
IOSVSDEV DC    AL1(UCB3DACC)      DASD DEVICE CLASS            10/16/90
         DS    0D                 ROUND UP TO DOUBLE WORD BOUNDRY
         SPACE
CORESIZE EQU   *-CORE
         SPACE 3
CATRECD  DSECT                    FORMAT FOR A VOLUME ENTRY ON CATALOG
DEVCODE  DS    CL4                UCB DEVICE TYPE FIELD
CATVOL   DS    CL6                SERIAL OF A VOLUME
DSEQNUM  DS    H                  DATASET SEQUENCE NUMBER
NEXTVOL  EQU   *                  NEXT VOLUME ENTRY
         SPACE 3
OUTRECD  DSECT                    OUTPUT FORMAT
LINE     DS    0C                 GEN PURPOSE LABEL
         SPACE
         DS    CL6                START OF EXTENT DESC OUTPUT LABELS
EXTNUM   DS    CL4                EXTENT NUMBER
LOWCC    DS    CL6                LOW CYL ADDR
LOWHH    DS    CL3                LOW HEAD ADDR
         DS    CL2
HICC     DS    CL6                HIGH CYL ADDR
HIHH     DS    CL3                HIGH HEAD ADDR
         DS    CL4
EXTSPC   DS    0C                 AREA FOR EXTENT SPACE DESC
         SPACE 2
         IHADVCT ,                DEVICE CHARACTERISTICS TABLE
*DVCT     DSECT                    DEVICE CHARACTERISTICS TABLE
*DVCCYL   DS    H                  NUMBER OF CYLINDERS PER VOLUME
*DVCTRK   DS    H                  NO OF TRACKS PER CYLINDER
*DVCTRKLN DS    H                  NO OF BYTES PER TRACK
*DVCOVHD  DS    0H                 OVERHEAD PER BLOCK
*DVCOVNLB DS    X                  OVERHEAD NOT LAST BLOCK
*DVCOVLB  DS    X                  OVERHEAD LAST BLOCK
*DVCOVNK  DS    X                  OVERHEAD DECREMENT NOT KEYED
*DVCFLAGS DS    X                  FLAG BYTE
*DVC2BOV  EQU   X'08'              SINGLE VALUE BLOCK OVERHEAD
*DVCFTOL  EQU   X'01'              APPLY TOLERANCE FACTOR
*DVCTOL   DS    H                  TOLERANCE FACTOR
*DVCTSHFT EQU   9                  SHIFT AMOUNT FOR TOLERANCE FACTOR
*DVCALT   DS    H                  NUMBER OF ALT TRACKS PER VOLUME
         SPACE ,                                               10/16/90
         IEZBITS ,                                             10/16/90
         SPACE 3
         END   DSINFO
/*
//LKED.SYSIN DD *
  ALIAS DDX
  NAME  DD(R)
/*
