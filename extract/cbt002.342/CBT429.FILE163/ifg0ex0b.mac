++ USERMOD (ADMX01A) /*

     IFG0EX0B -
       INSTALLATION DCB OPEN EXIT.  IT PROVIDES DEFAULT BLOCKSIZES
       FOR DISK AND TAPE DATASETS THAT DO NOT PROVIDE THEIR OWN.

     DATASETS SUPPORTED -
       DEVICE TYPE = DASD,TAPE OR NULLFILE
       DSORG = PS OR PO
       RECFM = F, FB, V, VB
       MACRF = NOT EXCP
       IF RECFM = F OR V THEN LRECL AND BLKSIZE MUST NOT BOTH BE ZERO
       IF RECFM = FB OR VB THEN LRECL MUST NOT BE ZERO, AND THE LRECL
         MUST BE LESS THAN THE CALCULATED BLKSIZE

     DEFAULTS -
       RECFM = F
       BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL
         IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO

       RECFM = V
       BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL+4
         IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO

       NULLFILE DATASETS ARE TREATED AS ABOVE - AS IF THEY WERE
         UNBLOCKED

       RECFM = FB
       TAPE DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 16384
       DASD DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 1/2 TRK
                                OR FULL TRK (IF 1/2 TRK TOO SMALL)

       RECFM = VB
       TAPE DATASETS: BLKSIZE = 16384
       DASD DATASETS: BLKSIZE = 1/2 TRK OR FULL TRK

       FOR CONCATENATED DATASETS:
       BLKSIZE WILL BE INCREASED TO THE LARGEST BLKSIZE OF THE
       CONCATENATION, ASSUMING THE BLKSIZES WERE ALL CALCULATED BY
       THIS ROUTINE.


                                                                */ .
++ VER (Z038) FMID(HDP2240).
++ JCLIN.
//IFG0EX0B JOB (9999,DBA,W811),D.ANDREWS,CLASS=S
//ASM     EXEC PGM=IEV90
//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR
//         DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSPUNCH DD  DSN=&&OBJECT(IFG0EX0B),DISP=SHR
//SYSIN    DD  DSN=SOURCE.SYSPGMS(IFG0EX0B),DISP=SHR
++ SRC (IFG0EX0B).
         MACRO
&NAME    SAVEAREA
         EJECT
***********************************************************************
*                                                                     *
*                  SAVE AREA EQUATES                                  *
*                                                                     *
***********************************************************************
         SPACE 3
SAVEWRD1 EQU    0 .            PL1 WORD
SAVELAST EQU    4 .            CHAIN POINTER TO LAST SAVE AREA
SAVENEXT EQU    8 .            CHAIN POINTER TO NEXT SAVE AREA
SAVER14  EQU   12 .            R14 SLOT
SAVER15  EQU   16 .            R15 SLOT
SAVER0   EQU   20 .            R0 SLOT
SAVER1   EQU   24 .            R1 SLOT
SAVER2   EQU   28 .            R2 SLOT
SAVER3   EQU   32 .            R3 SLOT
SAVER4   EQU   36 .            R4 SLOT
SAVER5   EQU   40 .            R5 SLOT
SAVER6   EQU   44 .            R6 SLOT
SAVER7   EQU   48 .            R7 SLOT
SAVER8   EQU   52 .            R8 SLOT
SAVER9   EQU   56 .            R9 SLOT
SAVER10  EQU   60 .            R10 SLOT
SAVER11  EQU   64 .            R11 SLOT
SAVER12  EQU   68 .            R12  SLOT
         MEND
         MACRO
&NAME    $ENTER &BASE=R12,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=NO,      +
               &CHAIN=YES,&DCTEST=NO,&USING=,&STORE=YES,&EQUSAVE=YES
.**********************************************************************
.*                                                                    *
.* $ENTER                                                             *
.*                                                                    *
.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *
.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *
.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *
.*                                                                    *
.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *
.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *
.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *
.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *
.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *
.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *
.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *
.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *
.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *
.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *
.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *
.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *
.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *
.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *
.*                REGISTER 3 IS R3).                                  *
.*                                                                    *
.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *
.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *
.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *
.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *
.*                THE ROUTINE HAS BEEN USED.                          *
.*                                                                    *
.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *
.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *
.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *
.*                THE PROGRAM MASK WILL BE UNALTERED.                 *
.*                                                                    *
.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *
.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *
.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *
.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *
.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *
.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *
.*                ***NOTE*** ASSEMBLY ERRORS WILL OCCUR IF AN INLINE  *
.*                SAVEAREA IS USED WITH THE USING= PARAMETER.         *
.*                                                                    *
.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *
.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *
.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *
.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *
.*                                                                    *
.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *
.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *
.*                                                                    *
.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *
.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *
.*                AN ENTRY STATEMENT WILL BE GENERATED.               *
.*                                                                    *
.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *
.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *
.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *
.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *
.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *
.*                                                                    *
.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *
.*                                   USING=                           *
.*                                   CSECT=NO                         *
.*                                   SAVE=SYM                         *
.*                                   RENT=LEN                         *
.*                                   SP=NUMBER                        *
.*                                   SPM=NO                           *
.*                                   CHAIN=NO                         *
.*                                   STORE=YES
.*                                                                    *
.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *
.*                         INSTRUCTION GENERATED.                     *
.*                                                                    *
.*                BASE   - THE REGISTERS TO BE USED AS BASE           *
.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *
.*                         REGISTER SPECIFIED WILL CONTAIN THE        *
.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *
.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *
.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *
.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *
.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *
.*                         R3 FOR REGISTER 3).                        *
.*
.*                USING  - SPECIFY THE BASE ADDRESS FROM WHICH THE    *
.*                         ASSEMBLER CAN COMPUTE DISPLACEMENTS.       *
.*                         IF NO USING IS SPECIFIED THEN &NAME WILL   *
.*                         BE USED.                                   *
.*                                                                    *
.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *
.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *
.*                         GENERATED.                                 *
.*                                                                    *
.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *
.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *
.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *
.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *
.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *
.*                         WORK AREA.                                 *
.*                                                                    *
.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *
.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *
.*                         AREA TO BE OBTAINED BY A GETMAIN.          *
.*                                                                    *
.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *
.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *
.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *
.*                                                                    *
.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *
.*                         NO TO BE ALTERED.                          *
.*                                                                    *
.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *
.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *
.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *
.*                         MODULES WHERE THE OVERHEAD OF              *
.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *
.*                                                                    *
.*                STORE  - STORE=NO SPECIFIES THAT A STORE MULTIPLE   *
.*                         OF THE REGISTERS NEED NOT BE DONE.         *
.*                         THIS CAN BE USED IF A PREVIOUS $ENTER MACRO*
.*                         SPECIFIED CHAIN=NO AND IT SAVED THE REGS   *
.*                         BUT DID NOT GET A NEW SAVE AREA.           *
.*                                                                    *
.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *
.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *
.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *
.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *
.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *
.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *
.*                THE MACRO WILL EXPAND.                              *
.*                                                                    *
.*                                                                    *
.* EXAMPLE        EX1      $ENTER                                     *
.*                                                                    *
.*                EX2      $ENTER CSECT=NO                            *
.*                                                                    *
.*                EX3      $ENTER BASE=(R3,R4,R5)                     *
.*                                                                    *
.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                NAME     TYPE  USE                                  *
.*                                                                    *
.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *
.*                               GENERATED TO PREVENT EQUIVALENCES    *
.*                               FROM BEING GENERATED FOR LATER USES. *
.*                                                                    *
.* MACROS USED                                                        *
.*                                                                    *
.*                GETMAIN                                             *
.*                                                                    *
.* UPDATE SUMMARY                                                     *
.*                                                                    *
.*      VERSION   DATE     CHANGE                                     *
.*                                                                    *
.*        003   04/29/76   CHAIN KEYWORD ADDED                        *
.*              08/04/82   USING KEYWORD ADDED      TPR *ADS*         *
.*              01/02/84   STORE KEYWORD ADDED      TPR *ADS*         *
.*              09/20/84   EQUSAVE KEYWORD ADDED    DWP *ADS*         *
.*                                                                    *
.*                                                                    *
.**********************************************************************
.*
         GBLA  &ENCOUNT
.*
         LCLA  &PARMNO,&REGNO
         LCLC  &REG,&CHAR,&LAST,&US,&TEMP,&ID,&FIRST
         LCLC  &LBL1,&LBL2,&LABEL
.*
&LBL1    SETC  'ENT&SYSNDX.A'
&LBL2    SETC  'ENT&SYSNDX.B'
.*
&ID      SETC  '&NAME'
         AIF   ('&NAME' NE '').CKCSECT
&ID      SETC  '$ENT&SYSNDX'
         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+
               D.'
.CKCSECT ANOP
&LABEL   SETC '&USING'
         AIF ('&USING' NE '').USENAME
&LABEL   SETC  '&ID'
.USENAME ANOP
         AIF   ('&CSECT' NE 'NO').CSECT
         AIF   ('&SYSECT' NE '').CKEQU
         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'
.CSECT   ANOP
         SPACE
&ID      CSECT
.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU
         SPACE
***********************************************************************
*                                                                     *
*                      REGISTER EQUIVALENCES                          *
*                                                                     *
***********************************************************************
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         AIF   ('&EQUSAVE' NE 'YES').NOSAVEQ
         SAVEAREA                    ,  SAVEAREA EQUATES
.NOSAVEQ ANOP
         SPACE 2
         AIF   ('&DCTEST' NE 'YES').NOBALI
         MNOTE '         #BALI'
         #BALI
.NOBALI  ANOP
.*
&ENCOUNT SETA  1
         SPACE
.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2
         AIF   ('&SYSECT' EQ '').CSECT2
.*-------ENTRY POINT
         ENTRY &ID
         USING &ID,R15                  DEFINE BASE REGISTER
&ID      B     14(R15)                  BRANCH AROUND ID
         DC    AL1(8)                   IDENTIFIER LENGTH
         DC    CL8'&ID'                 ENTRY POINT NAME
         DC    CL1' '                   SPACER
         AGO   .STREGS
.*-------CSECT
.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER
         B     28(0,R15)                BRANCH AROUND ID
         DC    AL1(23)                  IDENTIFIER LENGTH
         DC    CL8'&ID'                 CSECT NAME
         DC    CL1' '                   SPACER
         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY
         DC    CL1' '                   SPACER
         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY
.STREGS  ANOP
         AIF   ('&STORE' EQ 'NO').NOSTORE
         STM   R14,R12,12(R13)          SAVE REGISTERS
.NOSTORE ANOP
&PARMNO  SETA  1                        INITIALIZE COUNTER
.CKBASE  ANOP
&REG     SETC  '&BASE(&PARMNO)'(1,3)
         AIF   ('&REG'(1,1) NE 'R').SKIPBAS
&TEMP    SETC  '&REG'(2,2)
&REGNO   SETA  &TEMP
         AIF   (&REGNO LT 2).BADBASE
         AIF   (&REGNO GT 12).BADBASE
         AIF   (&REGNO NE 2).SETBASE
         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+
               ST INSTRUCTION WILL DESTROY CONTENTS.'
.SETBASE ANOP
         AIF   ('&FIRST' NE '').SETBAS2
         LA    &REG,&LABEL-&NAME.(R15)  LOAD BASE ADDRESS
&FIRST   SETC  '&REG'                   SAVE REGISTER
         AGO   .SETLAST
.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE
         LA    &REG,1(&REG)             ADD 1 MORE
.SETLAST ANOP
&LAST    SETC  '&REG'
&US      SETC  '&US.,&REG'
         AGO   .NEXTBAS
.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'
         AGO   .NEXTBAS
.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'
.NEXTBAS ANOP
&PARMNO  SETA  &PARMNO+1
         AIF   (&PARMNO LE N'&BASE).CKBASE
         DROP  R15                      DISCONTINUE R15 BASE
         USING &LABEL.&US               DEFINE BASE REGISTERS
.*-------SEE IF PROGRAM MASK IS TO BE SET
         AIF   ('&SPM' EQ 'NO').NOSPM
         LA    R15,15                   LOAD PGM MASK SETTING
         SLA   R15,24                   SHIFT TO BITS 4-7
         SPM   R15                      SET PGM MASK AND COND
.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE
         AIF   ('&RENT' NE '').GETMAIN
         LR    R15,R13                  SAVE OLD SAVEAREA ADDR
         AIF   ('&SAVE' NE '').LOADSAV
         CNOP  0,4                      FULL WORD ALIGNMENT
         BAL   R13,*+76                 LOAD SAVEAREA ADDR
         DC    18F'0'                   SAVE AREA
         AGO   .CHAIN
.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR
         AGO   .CHAIN
.*
.GETMAIN ANOP
         AIF   ('&DCTEST' NE 'YES').NODC1
         MNOTE '         $DCTEST R15,INDC=&LBL1'
         $DCTEST R15,INDC=&LBL1
.NODC1   ANOP
         MNOTE '         GETMAIN R,LV=&RENT,SP=&SP'
         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE
         AIF   ('&DCTEST' NE 'YES').NODC2
         MVI   3(R1),X'FF'              REMEMBER WE USED OS GETMAIN
         B     &LBL2
         MNOTE '&LBL1 #GETSTG TYPE=(USER,SHORT),PLIST=*,LEN=&RENT,INIT=X
               0,ADDR=(R1)'
&LBL1    #GETSTG TYPE=(USER,SHORT),PLIST=*,LEN=&RENT,INIT=0,ADDR=(R1)
         MVI   3(R1),X'00'              REMEMBER WE USED DC GETMAIN
&LBL2    DS    0H
.NODC2   ANOP
         LR    R15,R13                  SAVE OLD SAVEAREA ADDR
         LR    R13,R1                   LOAD STORAGE ADDRESS
         USING &SAVE,R13                DEFINE BASE REGISTER
         LM    R0,R1,20(R15)            RESTORE REG 0,1 CONTENTS
.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS
         ST    R13,8(R15)
.DONE    ANOP
         MEND
IFG0EX0B TITLE 'OPEN - INSTALLATION DCB EXIT            INITIALIZATION'
*
*  THIS IS THE INSTALLATION DCB OPEN EXIT. IT IS CALLED AFTER THE
*  USER'S DCB EXIT IS TAKEN.  ITS PURPOSE IS TO FILL IN DEFAULTS
*  FOR BLKSIZE OR LRECL IF THEY HAVE NOT BEEN SPECIFIED YET.
*
*  THESE DEFAULTS ARE ONLY FILLED IN IF THE DATASET PARAMETERS ARE:
*
*  DEVICE TYPE = DASD,TAPE OR NULLFILE
*  DSORG = PS OR PO
*  RECFM = F, FB, V, VB
*  MACRF = NOT EXCP
*  IF RECFM = F OR V THEN LRECL AND BLOCKSIZE MUST NOT BOTH BE ZERO
*  IF RECFM = FB OR VB THEN LRECL MUST NOT BE ZERO, AND THE LRECL
*     MUST BE LESS THAN THE CALCULATED BLOCKSIZE
*
*  THE DEFAULTS ARE:
*
*  RECFM = F
*  BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL
*  IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO
*
*  RECFM = V
*  BLKSIZE AND LRECL ARE SET SO THAT BLKSIZE = LRECL+4
*  IF ONE OF THEM (BUT NOT BOTH) IS NON-ZERO
*
*  NULLFILE DATASETS ARE TREATED AS ABOVE - AS IF THEY WERE UNBLOCKED.
*
*  RECFM = FB
*  TAPE DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 16384
*  DASD DATASETS: BLKSIZE = NEAREST MULTIPLE OF LRECL <= 1/2 TRACKSIZE
*                           OR FULL TRACKSIZE (IF 1/2 TRK TOO SMALL)
*
*  RECFM = VB
*  TAPE DATASETS: BLKSIZE = 16384
*  DASD DATASETS: BLKSIZE = 1/2 TRACKSIZE OR FULL TRACKSIZE
*
*  FOR CONCATENATED DATASETS:
*  BLKSIZE WILL BE INCREASED TO THE LARGEST BLKSIZE OF THE
*  CONCATENATION, ASSUMING THE BLKSIZES WERE ALL CALCULATED BY
*  THIS ROUTINE.
*
*  AUTHOR -
*    DAVE PHILLIPS
*    A. DUDA AND SONS, INC.
*    1975 W. BROADWAY / P.O. BOX 257
*    OVIEDO, FL  32765
*
         EJECT
IFG0EX0B $ENTER BASE=R12,CHAIN=NO
         SPACE
RTIOT    EQU   R7                  -> TIOT ENTRY
RJFCB    EQU   R8                  -> JFCB
RUCB     EQU   R9                  -> UCB
RDCB     EQU   R10                 -> DCB
OIEXLPTR EQU   R11                 -> PARM LIST FOR THIS EXIT
         LR    OIEXLPTR,R1         COPY PARM LIST
         USING OIEXL,OIEXLPTR
         L     RDCB,OIEXPDCB       -> PROTECTED COPY OF DCB
         USING IHADCB,RDCB
         L     RUCB,OIEXUCB        GET UCB ADDR
         USING UCBOB,RUCB
         L     RJFCB,OIEXJFCB      -> JFCB
         USING INFMJFCB,RJFCB
         TITLE 'OPEN - INSTALLATION DCB EXIT            FILL IN BLKSIZE*
               ,LRECL'
         SPACE
         TM    DCBDSORG,DCBDSGPS+DCBDSGPO  DSORG PS OR PO ?
         BZ    EXIT                NOPE
         TM    DCBRECFM,DCBRECL    RECFM V OR F ?
         BNM   EXIT                NOPE
*        TM    DCBMACRF,DCBMRECP   EXCP ?
*        BO    EXIT                YES - SKIP IT
         SPACE
         TM    JFCBMASK+4,JFCMNULL DUMMY DATASET ?
         BO    UNBLKED             YES - TREAT IT AS RECFM F OR V
         LTR   RUCB,RUCB           VALID UCB ADDR ?
         BZ    EXIT                NO? - FORGET IT
         TM    UCBDVCLS,UCB3TAPE+UCB3DACC    TAPE OR DISK DEVICE ?
         BZ    EXIT                NO - SKIP IT
         SPACE 2
         TM    DCBRECFM,DCBRECBR   BLOCKED RECDS ?
         BO    BLKED               YES - GO HANDLE
         SPACE
UNBLKED  TM    DCBRECFM,DCBRECF    RECFM = F ?
         BZ    RECV                NO - MUST BE VARIABLE
         SPACE
         LH    R0,DCBBLKSI         LOAD BLKSIZE
         LH    R1,DCBLRECL         LOAD LRECL
         LTR   R1,R1               LRECL ZERO ?
         BZ    RECFLR0             YES
         LTR   R0,R0               BLKSIZE ZERO ?
         BNZ   CKCONCAT            NO - LRECL,BLKSIZE ALREADY SET
         STH   R1,DCBBLKSI         SET BLKSIZE=LRECL
         B     SETUDCB             GO UPDATE USER'S DCB TOO
         SPACE
RECFLR0  LTR   R0,R0               BLKSIZE ZERO ?
         BZ    EXIT                EXIT SINCE BOTH LRECL,BLKSIZE ZERO
         STH   R0,DCBLRECL         SET LRECL=BLKSIZE
         B     SETUDCB             GO UPDATE USER'S DCB TOO
         SPACE
RECV     LH    R0,DCBBLKSI         LOAD BLKSIZE
         LH    R1,DCBLRECL         LOAD LRECL
         LTR   R1,R1               LRECL ZERO ?
         BZ    RECVLR0             YES
         LTR   R0,R0               BLKSIZE ZERO ?
         BNZ   CKCONCAT            NO - LRECL,BLKSIZE ALREADY SET
         LA    R1,4(,R1)           Z  - ADD 4 TO LRECL FOR BDW
         STH   R1,DCBBLKSI         AND SET BLKSIZE=LRECL+4
         B     SETUDCB             GO SET USER'S DCB
         SPACE
RECVLR0  LTR   R0,R0               BLKSIZE ZERO ?
         BZ    EXIT                YES - BOTH LRECL,BLKSIZE ZERO
         SH    R0,=H'4'            NO - SUBTRACT 4 FOR BDW
         STH   R0,DCBLRECL         AND SET LRECL=BLKSIZE-4
         B     SETUDCB             GO SET USER'S DCB
         EJECT
BLKED    ICM   R0,B'0011',DCBLRECL LRECL ZERO ?
         BZ    EXIT                YES - FORGET IT
         ICM   R0,B'0011',DCBBLKSI BLKSIZE FILLED IN ?
         BNZ   CKCONCAT            YES - GO CHECK FOR CONCAT DS
         SPACE
         BAL   R14,CALCBLK         GO CALCULATE BLKSIZE FOR BLKED DS
         B     *+8                 RET+0 - WE HAVE A BLOCK SIZE
         B     CKCONCAT            RET+4 - BLKSIZE NOT SET
         SPACE
         STH   R1,DCBBLKSI         SET BLOCK SIZE
         SPACE 2
SETUDCB  DS    0H                  COPY BLKSIZE,LRECL TO USER'S DCB
         LH    R0,DCBLRECL         FETCH NEW LRECL
         LH    R1,DCBBLKSI         FETCH NEW BLKSIZE
         L     RDCB,OIEXUDCB       -> USER'S DCB
         SPACE
         MODESET KEYADDR=OIEXUKEY,WORKREG=2  GET INTO USER'S KEY
         SPACE
         STH   R0,DCBLRECL         SET NEW LRECL
         STH   R1,DCBBLKSI         SET NEW BLKSIZE
         SPACE
         MODESET EXTKEY=ZERO       BACK TO KEY ZERO
         SPACE
         L     RDCB,OIEXPDCB       -> PROTECTED DCB AGAIN
         TITLE 'OPEN - INSTALLATION DCB EXIT            INCREASE BLKSIZ*
               E FOR CONCATENATED DATASETS'
CKCONCAT L     RTIOT,OIEXTIOT      -> TIOT ENTRY ADDRESS
         USING TIOENTRY,RTIOT      TIOT
         SLR   R1,R1               CLEAR FOR INSERT
         IC    R1,TIOELNGH         GET LENGTH OF ENTRY
         AR    RTIOT,R1            -> NEXT TIOT ENTRY
         CLI   TIOEDDNM,C' '       DDNAME BLANK ?
         BNE   EXIT                NOPE - ALL DONE
         SPACE
         LH    R5,DCBBLKSI         GET BLOCKSIZE
         LTR   R5,R5               ANY BLOCKSIZE ?
         BNP   EXIT                NOPE
         SPACE
CONCATLP SLR   RUCB,RUCB           CLEAR FOR INSERT
         ICM   RUCB,7,TIOEFSRT     GET UCB ADDR
         BZ    NEXTDD              NOT THERE? - FORGET IT
         TM    UCBDVCLS,UCB3TAPE+UCB3DACC    TAPE OR DISK DEVICE ?
         BZ    NEXTDD              NO - SKIP IT
         SPACE
         BAL   R14,CALCBLK         GO CALCULATE BLOCKSIZE
         B     CONCATBL            GOT A BLOCKSIZE
         B     NEXTDD              NOT POSSIBLE TO CALC BLOCKSIZE
         SPACE
CONCATBL CR    R1,R5               COMPARE NEW BLKSIZE AGAINST MAX
         BNH   NEXTDD              NOT A NEW HIGH
         LR    R5,R1               SET NEW HIGH
         SPACE
NEXTDD   SLR   R1,R1               CLEAR FOR INSERT
         ICM   R1,1,TIOELNGH       GET LENGTH OF ENTRY
         BZ    ENDTIOT
         AR    RTIOT,R1            -> NEXT TIOT ENTRY
         CLI   TIOEDDNM,C' '       DDNAME BLANK ?
         BE    CONCATLP            YES - KEEP CHECKING
         SPACE
ENDTIOT  CH    R5,DCBBLKSI         DID WE NEED TO INCREASE BLKSIZE ?
         BNH   EXIT                NOPE
         SPACE
         LR    R1,R5               COPY NEW LARGER BLKSIZE
         SH    R1,DCBBLKSI         FIGURE OUT AMOUNT WE INCREASED BY
         LH    R0,DCBBUFL          PICK UP BUFFER LENGTH
         AR    R1,R0               BUMP BUFL BY NEW LENGTH
         LTR   R0,R0               ANY BUFLEN SPECIFIED ?
         BZ    *+8                 NOPE - SKIP STORE
         STH   R1,DCBBUFL          YES - SET IT
         STH   R5,DCBBLKSI         YES - SET IT
         SPACE
         L     RDCB,OIEXUDCB       -> USER'S DCB
         MODESET KEYADDR=OIEXUKEY,WORKREG=2  GET INTO USER'S KEY
         SPACE
         LTR   R0,R0               ANY BUFLEN SPECIFIED ?
         BZ    *+8                 NOPE - SKIP STORE
         STH   R1,DCBBUFL          YES - SET IT
         STH   R5,DCBBLKSI         SET BLKSIZE IN USER'S DCB TOO
         SPACE
         MODESET EXTKEY=ZERO       BACK TO KEY ZERO
         SPACE
EXIT     SLR   R15,R15             SET RC=0 - JFCB NOT MODIFIED
         RETURN (14,12),,RC=(15)   RETURN
         TITLE 'OPEN - INSTALLATION DCB EXIT            SUBROUTINE TO C*
               ALCULATE BLOCKSIZE'
*
* FUNCTION -  THIS SUBROUTINE CALCULATES AN OPTIMAL BLKSIZE FOR A
*             GIVEN DEVICE TYPE.  FOR DISK DATASETS THIS IS SET
*             TO HALF-TRACK OR FULL-TRACK BLOCKING AND FOR TAPE
*             IT IS SET TO 16K.
*
* INPUT -     RUCB  ->  THE UCB FOR THE DEVICE
*             RDCB  ->  THE DCB FOR THE DATASET
*             R14   =   RETURN ADDR
*
* OUTPUT -    R1    =   CALCULATED BLOCKSIZE
*
* USES   -    R0,R1,R2,R3,R4
*
* NOTES -     THIS ROUTINE RETURNS TO R14 WHEN A BLKSIZE IS COMPUTED
*                          RETURNS TO R14+4 IF NOT
*
         SPACE
CALCBLK  TM    UCBDVCLS,UCB3TAPE   TAPE DEVICE ?
         BNO   DASD                NO
         SPACE
TAPE     LH    R1,=H'16384'        BLOCK TAPE AT 16K
         LR    R3,R1               COPY BLOCKSIZE FOR WORK
         TM    DCBRECFM,DCBRECV    RECFM=VB ?
         BNO   TAPEFB              NO - MUST BE FB
TAPEVB   SH    R3,=H'4'            TAKE OUT SPACE FOR BDW
         CH    R3,DCBLRECL         BLOCKSIZE < LRECL ?
         BL    4(,R14)             YES - FORGET IT
         BR    R14                 ITS OK - RETURN WITH BLKSIZE IN R1
TAPEFB   SLR   R0,R0               CLEAR FOR DIVIDE
         LH    R4,DCBLRECL         LRECL
         DR    R0,R4               DIVIDE BY LRECL
         LR    R1,R3               GET BLKSIZE
         SR    R1,R0               MAKE IT MULTIPLE OF LRECL
         BNP   4(,R14)             SKIP IF BLOCKSIZE < LRECL
         BR    R14                 RETURN WITH BLKSIZE IN R1
         EJECT
*
* DASD BLOCKSIZE CALCULATIONS:
*
* BLKSZ = (TRKSZ - (N-1)*OVHD.NL - OVHD.L + N*KEYADJ)
*         -------------------------------------------
*                     (N-1)*(TOL/512) + 1
*
*       KEYADJ = OVHD.NK   (NON-KEYED RECORDS)
*              = -KL       (KEYED RECORDS)
*
* WHERE:
*         BLKSZ      MAXIMUM BLOCKSIZE FOR A GIVEN BLOCKING FACTOR
*         N          NUMBER OF BLOCKS PER TRACK
*         TRKSZ      PHYSICAL SIZE OF TRACK
*         OVHD.NL    OVERHEAD IF NOT LAST BLOCK ON TRACK
*         OVHD.L     OVERHEAD IF LAST BLOCK ON TRACK
*         OVHD.NK    OVERHEAD REDUCTION IF DATASET NOT KEYED
*         KL         LENGTH OF KEYS
*         TOL        TOLERANCE FACTOR
*
* IF THERE IS NO TOLERANCE THEN THE DENOMINATOR REDUCES TO N.
*
*
*    THIS CODE COMPUTES THE BLOCKSIZE FOR HALF TRACK OR FULL
* TRACK BLOCKING.  IF THERE IS ANY TOLERANCE FACTOR THE
* CALCULATION IS BYPASSED.  CURRENTLY THE CODE IS OPTIMIZED FOR
* HALF TRACK CALCULATIONS.  AN ADJUSTMENT FACTOR IS ALSO COMPUTED
* FOR FULL TRACK BLOCKING.  IF THE GIVEN RECORD LENGTH WILL NOT
* FIT IN A HALF-TRACK BLOCK, THE BLKSIZE IS CHANGED TO FULL-TRACK
* BLOCKING.
*
DASD     L     R4,CVTPTR           -> CVT
         USING CVTMAP,R4
         L     R4,CVTZDTAB         -> DVCT INDEX
         USING DVCTI,R4
         LA    R1,DVCTYPMK         MASK FOR UNIT TYPE NUMBER
         N     R1,UCBTYP           PICK UP UNIT TYPE NUMBER
         IC    R1,DVCTIOFF(R1)     PICK UP OFFSET
         AR    R4,R1               -> DVCT ENTRY
         USING DVCT,R4
         TM    DVCFLAGS,DVCMODU    MODULO TYPE DEVICE ?
         BNO   DASDNMOD            NOPE
         L     R1,=F'11476'        3380 1/4 TRACK BLOCKING
         L     R4,=F'23476'        3380 1/2 TRACK BLOCKING
         SLR   R0,R0               CLEAR FOR INSERT
         ICM   R0,1,DCBKEYLE       PICK UP KEYLEN
         BZ    BLKCALCD            NO KEYS - JOIN MAINLINE CODE
         L     R1,=F'11240'        3380 1/4 TRACK BLOCKING W/KEY
         L     R4,=F'23240'        3380 1/2 TRACK BLOCKING W/KEY
         SR    R3,R0               TAKE OUT KEYLEN
         SR    R4,R0               TAKE OUT KEYLEN
         B     BLKCALCD            JOIN MAINLINE CODE TO MAKE MULTIPLE
         SPACE
DASDNMOD TM    DVCFLAGS,DVCFTOL    NEED TO APPLY TOLERANCE FACTOR ?
         BO    4(,R14)             YES - FORGET IT
         SPACE
* R0 = WORK REG
* R1 = TRACK SIZE
* R2 = FULL TRACK BLOCKING OVERHEAD ADJUSTMENT
* R4 = DVCT ENTRY ADDRESS
         SPACE
         LH    R1,DVCTRKLN         PICK UP PHYSICAL TRACK SIZE
         LH    R0,DVCOVHD          ASSUME 2 BYTE OVERHEAD
         LR    R2,R0               SAVE FOR FULL-TRACK ADJUST
         AR    R0,R0               * 2 BECAUSE TWO BLOCKS PER TRACK
         TM    DVCFLAGS,DVC2BOV    IS IT ?
         BO    SUBOVHD             YES
         SLR   R0,R0               CLEAR FOR INSERT
         IC    R0,DVCOVLB          OVERHEAD LAST BLOCK
         SR    R1,R0               SUBTRACT IT FROM TRACK SIZE
         IC    R0,DVCOVNLB         OVERHEAD NOT LAST BLOCK
         LR    R2,R0               SAVE FOR FULL-TRACK BLKING ADJ
SUBOVHD  SR    R1,R0               SUBTRACT OVERHEAD FROM TRACK SIZE
         SLR   R0,R0               CLEAR FOR INSERT
         ICM   R0,1,DCBKEYLE       PICK UP KEYLEN
         BZ    NOTKEYED            NO KEYS
         AR    R2,R0               ADD KEYLEN TO FULL-TRACK ADJ
         AR    R0,R0               KEYLEN * 2
         SR    R1,R0               SUBTRACT IT FROM TRACK SIZE
         B     KEYSDONE
NOTKEYED IC    R0,DVCOVNK          NOT KEYED OVERHEAD REDUCTION
         SR    R2,R0               SUB KEYED OVHD FROM FULL-TRK ADJ
         AR    R0,R0               * 2 BECAUSE TWO BLOCKS PER TRACK
         AR    R1,R0               TAKE OUT OVERHEAD FOR KEYS
         DROP  R4                  DONE WITH DVCT
         SPACE
* R0 = WORK REG
* R1 = ACTUAL BLOCKSIZE REQUIRED (AT EXIT)
* R2 = WORK REG
* R3 = HALF TRACK BLOCK SIZE
* R4 = FULL TRACK BLOCK SIZE
         SPACE
KEYSDONE LR    R4,R1               COPY LOGICAL TRACK SIZE
         SRA   R1,1                COMPUTE HALF-TRACK BLKSIZE
         AR    R4,R2               COMPUTE FULL-TRACK BLKSIZE
BLKCALCD LR    R3,R1               SAVE CALCULATED BLOCKSIZE
         TM    DCBRECFM,DCBRECV    RECFM=VB ?
         BNO   DASDFB              NO - MUST BE FB
DASDVB   SH    R3,=H'4'            TAKE OUT SPACE FOR BDW
         CH    R3,DCBLRECL         BLOCKSIZE > LRECL ?
         BNLR  R14                 YES - RETURN WITH BLKSIZE IN R1
         LR    R1,R4               NO  - TRY FULL-TRACK BLOCKING
         SH    R4,=H'4'            TAKE OUT SPACE FOR BDW
         CH    R4,DCBLRECL         BLOCKSIZE > LRECL ?
         BNLR  R14                 YES  - RETURN WITH BLKSIZE IN R1
         B     4(,R14)             NO   - CAN'T FIT LRECL ON THIS TRK
DASDFB   SLR   R0,R0               CLEAR FOR DIVIDE
         LH    R2,DCBLRECL         LRECL
         DR    R0,R2               DIVIDE BLKSIZE BY LRECL
         LR    R1,R3               GET CALCULATED HALF TRACK BLOCKSIZE
         SR    R1,R0               MAKE IT MULTIPLE OF LRECL
         BPR   R14                 RETURN WITH BLKSIZE IN R1
         SPACE
         LR    R1,R4               NOT ENOUGH - TRY FULL-TRACK BLOCKING
         SLR   R0,R0               CLEAR FOR DIVIDE
         LH    R2,DCBLRECL         LRECL
         DR    R0,R2               DIVIDE BLKSIZE BY LRECL
         LR    R1,R4               GET CALCULATED FULL TRACK BLOCKSIZE
         SR    R1,R0               MAKE IT MULTIPLE OF LRECL
         BPR   R14                 RETURN WITH BLKSIZE IN R1
         B     4(,R14)             CAN'T FIT LRECL ON THIS TRK
         TITLE 'OPEN - INSTALLATION DCB EXIT            CONSTANTS AND D*
               SECTS'
         SPACE
*
* CONSTANTS
*
         LTORG
         SPACE 2
         IECOIEXL
         SPACE 4
*
*****    JFCB EQUATES
*
JFCBUL   EQU   X'08' *                  USER LABEL BIT IN JFCBLTYP
JFCBH1   EQU   X'04' -                  HIARCHY EQUAL 1
* JFCBMASK+1
JFCMBFOF EQU   X'40' -                  ASCII BUFOFF MERGED JFCB TO DCB
* JFCBMASK+4
JFCMJMOD EQU   X'80' -                  JFCB MODIFIED, MUST WRITE BACK
JFCMDMOD EQU   X'40' -                  DSCB MODIFIED, MUST WRITE BACK
JFCMNULL EQU   X'20' -                  DUMMY, NULL DATA SET
JFCMBPAM EQU   X'10' -                  BPAM CONCATENATION
JFCMISAM EQU   X'08' -                  ISAM, BDAM PARALLEL MOUNT
JFCMPSWD EQU   X'04' -                  PASSWORD REQUIRED
JFCMABND EQU   X'02' -                  DELAYED OR BYPASSED ABEND
* JFCBMASK+5
DSTRYL0P EQU   X'A0' -                  NL SPECIFIED BUT SL MOUNTED
* JFCBMASK+6
JFCMNRPS EQU   X'20' -                  NOT DA RCD POSITION SENSING DEV
JFCMSDIR EQU   X'08' -                  DA USE SEARCH DIRECT CCW INDR
JFCMTRCE EQU   X'04' -                  DD DCB=DIAGNS=TRACE INDR
JFCMCTTR EQU   X'01' -                  RECATALOG DSCB VTOC TTR
* JFCBMASK+7
JFCMDSPM EQU   B'01000000'              SAVE OF JFCMOD BIT     @Z40JSGD
JFCMDSPO EQU   B'00100000'              SAVE OF JFCOUT BIT     @Z40JSGD
         SPACE 4
         PRINT NOGEN
         SPACE
         DCBD  DSORG=(PS,PO),DEVD=(DA,TA)
UCB      DSECT
         IEFUCBOB
TIOT     DSECT
         IEFTIOT1
JFCB     DSECT
         IEFJFCBN
         CVT   DSECT=YES
         IHADVCT DSECT=YES
         SPACE
         END
