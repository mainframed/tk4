//ADJX006C JOB
//*
//*  ADJX006C -
//*    A JES2 EXIT #6 (CONVERTER EXIT) WHICH PROVIDES DEFAULT MODEL
//*    DSCBS FOR NEW GENERATION DATASETS.
//*
//*    WHEN THIS EXIT DETECTS A DD STATEMENT FOR A NEW GENERATION
//*    DATASET, IT INSERTS A DEFAULT MODEL DSCB IN THE "DCB="
//*    PARAMETER IF ONE IS NOT ALREADY PRESENT.  NOTE THAT THIS
//*    MODIFICATION TO THE JCL DOES *NOT* APPEAR ON THE JCL LISTING.
//*
//*    THIS EXIT IS DESIGNED TO WORK IN CONJUNCTION WITH IFG0EX0B,
//*    ALSO INCLUDED IN THIS LIBRARY.
//*
//*  NOTA BENE -
//*    AFTER INSTALLATION OF THIS EXIT, EXISTING MODEL DSCBS WILL
//*    BE IGNORED BY THE SYSTEM UNLESS YOUR DD STATEMENTS EXPLICITLY
//*    REFER TO THEM BY NAME!
//*
//*  INSTALLATION -
//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS
//*    BELOW TO SUIT YOUR TASTE.  BECAUSE THIS IS A JES2 EXIT,
//*    YOU MUST ALSO INSERT THE FOLLOWING CONTROL STATEMENTS IN
//*    YOUR JESPARMS DATASET:
//*
//*        EXIT006  ROUTINE=(...,EXIT6C,...),ENABLE,TRACE=NO
//*        LOAD=ADJX006C
//*
//*    YOU SHOULD ALSO CHANGE THE GLOBAL VARIABLE "&MODEL" IN THE
//*    FRONT OF THE PROGRAM TO MATCH THE MODEL DSCB NAME YOU
//*    SPECIFIED BELOW.
//*
//*    FOR INSTALLATION ON MVS/370 SYSTEMS, DELETE THE REFERENCE
//*    TO THE "$PADDR" CONTROL BLOCK ON LINE 00238000 BELOW.
//*
//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS
//             LIB='SYS1.LINKLIB',   <=== TARGET LOAD LIBRARY
//             MBR=ADJX006C,         <=== LOAD MODULE NAME
//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER
//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER
//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS
//             MDUNIT=SYSDA,         <=== UNITNAME FOR MODEL DSCB
//             MDVOL=SYSRES,         <=== VOLSER FOR MODEL DSCB
//             MODEL='MODEL.DSCB',   <=== DEFAULT MODEL DSCB DSNAME
//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME
//             MACLIB='SYS1.MACLIB', <=== MACLIB DATASET NAME
//             AMODGEN='SYS1.AMODGEN', <=== AMODGEN DATASET NAME
//             HASPSRC='SYS1.HASPSRC', <=== HASPSRC DATASET NAME
//             MODGEN='SYS1.MODGEN'  <=== MODGEN DATASET NAME
//                                        (USE SYS1.SMPMTS IF MVS-370)
//*
//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK'
//*
//*  THE FOLLOWING MODEL DSCB SHOULD HAVE *NO* DCB ATTRIBUTES
//*  ASSOCIATED WITH IT.
//*
//MODEL    DD  DSN=&MODEL,DISP=(MOD,CATLG,CATLG),UNIT=&MDUNIT,
//             VOL=SER=&MDVOL,SPACE=(TRK,0)
//*
//STEPLIB  DD  DSN=&ALIB,DISP=SHR
//SYSTERM  DD  SYSOUT=&SOUT
//SYSPRINT DD  SYSOUT=&SOUT
//SYSLIB   DD  DSN=&MODGEN,DISP=SHR
//         DD  DSN=&SMPMTS,DISP=SHR
//         DD  DSN=&MACLIB,DISP=SHR
//         DD  DSN=&AMODGEN,DISP=SHR
//         DD  DSN=&HASPSRC,DISP=SHR
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),
//             SPACE=(TRK,(5,1),RLSE)
//*
//LKED    EXEC PGM=HEWL,COND=(0,NE),
//             PARM='LIST,MAP,XREF,RENT,REUS,REFR'
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)
//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR
//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)
//        PEND
//*
//        EXEC INSTALL
//ASM.SYSIN DD *
EXIT6C   TITLE 'PROVIDE MODEL DSCB FOR NEW GENERATION DATASETS'
         GBLC  &MODEL
&MODEL   SETC  'MODEL.DSCB'          <=== CHANGE THIS !
***********************************************************************
*                                                                     *
*  JCL CONVERTER EXIT                                                 *
*                                                                     *
*  THIS EXIT GETS CONTROL AFTER EACH JCL STATEMENT HAS BEEN CONVERTED *
*  INTO INTERNAL TEXT.  WE TAKE A LOOK AT EACH DD STATEMENT AND SEE   *
*  IF A NEW GENERATION DATASET IS BEING ALLOCATED.  IF SO, AND NO     *
*  MODEL DSCB IS SPECIFIED, THEN WE PROVIDE A DUMMY.                  *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*  THIS EXIT OBSOLETES A LOCAL MODIFICATION TO DCB RESOLUTION:        *
*  ++ USERMOD (AD0009A) /*                                            *
*                                                                     *
*        THE PURPOSE OF THIS MOD IS TO ALLOW ALLOCATION               *
*        TO PROCEDE WHEN A GDG DATASET HAS NO MODEL DSCB.             *
*                                                               */ .  *
*  ++ VER (Z038) FMID(EBB1102) PRE(UZ84276).                          *
*  ++ ZAP (IEFAB458) DISTLIB(AOSB3).                                  *
*   NAME IEFAB458                                                     *
*   VER  0302  58E0,B050     L   @14,@PC00001+8   RETURN-CODE - 4     *
*   VER  04BC  00000000,00000000,00000000,00000000                    *
*   VER  04CC  00000000,00000000                                      *
*   REP  0302  45F0,C49A     BAL R15,PATCHLOC     ENTER PATCH AREA    *
*   REP  04BC  58A0,B054     L   @10,@PC00001+12  GET PTR TO          *
*   REP  04C0  58A0,A000     L   @10,SIOTPTR(,@10) .SIOT              *
*   REP  04C4  9180,A03B     TM  SCTSGDGS(@10),X'80' SINGLE GDG?      *
*   REP  04C8  4710,C40E     BO  @RF00105         YES, ACCEPT IT      *
*   REP  04CC  58E0,B050     L   @14,@PC00001+8   **ZAPPED INSTR.**   *
*   REP  04D0  07FF          BR  R15              RETURN INLINE       *
*   IDRDATA  AD0009A                                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  REGISTER CONTENTS AT ENTRY ARE:                                    *
*                                                                     *
*        R0      =  0  INTERNAL TEXT IMAGE PRESENT                    *
*                =  4  END OF JOB REACHED                             *
*        R1      ->    4-WORD PARAMETER LIST                          *
*                          -> 16 BYTE WORK AREA                       *
*                          -> INTERNAL TEXT OR TO CONVERTER R/C       *
*                          -> DCT                                     *
*                          -> JCT                                     *
*        R2-R10          N/A                                          *
*        R11     ->    HCT                                            *
*        R12             N/A                                          *
*        R13     ->    OS-STYLE SAVE AREA                             *
*        R14     =     RETURN ADDRESS                                 *
*        R15     ->    PROGRAM ENTRY                                  *
*                                                                     *
*        RETURN CODE                                                  *
*                                                                     *
*        0       - CALL OTHER EXITS                                   *
*        4       - DO NOT CALL OTHER EXITS                            *
*        8       - BYPASS EXECUTION AND CANCEL THIS JOB               *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  INTERNAL TEXT HAS THE FOLLOWING FORMAT:                            *
*                                                                     *
*    JOB STATEMENTS:                                                  *
*                                                                     *
*      1 STRLTH - 2 BYTES BINARY, LENGTH OF ENTIRE TEXT INCLUDING     *
*           ITSELF                                                    *
*      1 STRINDCS - 1 BYTE FLAG, X'01' INDICATES JOB STMT             *
*      1 STRJINDC - 1 BYTE FLAG                                       *
*      1 STRJIND2 - 1 BYTE FLAG                                       *
*      1 STRJLABD - 1 BYTE FLAG                                       *
*      1 STRJKEY - VERB KEY ENTRIES BEGIN HERE UP TO END OF TEXT      *
*                                                                     *
*    EXEC STATEMENTS:                                                 *
*                                                                     *
*      1 STRLTH - 2 BYTES BINARY, LENGTH OF ENTIRE TEXT INCLUDING     *
*           ITSELF                                                    *
*      1 STRINDCS - 1 BYTE FLAG, X'02' INDICATES EXEC STMT            *
*      1 STREINDC - 1 BYTE FLAG                                       *
*      1 STREKEY - VERB KEY ENTRIES BEGIN HERE UP TO END OF TEXT      *
*                                                                     *
*    DD STATEMENTS:                                                   *
*                                                                     *
*      1 STRLTH - 2 BYTES BINARY, LENGTH OF ENTIRE TEXT INCLUDING     *
*           ITSELF                                                    *
*      1 STRINDCS - 1 BYTE FLAG, X'04' INDICATES DD STMT              *
*      1 STRDINDC - 1 BYTE FLAG                                       *
*      1 STRDKEY - VERB KEY ENTRIES BEGIN HERE UP TO END OF TEXT      *
*                                                                     *
*  VERB KEY ENTRIES CORRESPOND TO POSITIONAL AND KEYWORD PARAMETERS   *
*  ON THE ASSOCIATED STATEMENTS.  THE FORMAT OF A VERB KEY ENTRY IS:  *
*                                                                     *
*      1 VERBKEY - 1 BYTE BINARY, INDICATES PARAMETER TYPE.  SEE      *
*           MACRO "IEFVKEYS" IN SYS1.AMODGEN FOR SPECIFIC VERB KEYS.  *
*       2 NUMPARMS - 1 BYTE BINARY, NUMBER OF PARAMETERS ASSOCIATED   *
*           WITH THIS PARAMETER TYPE.                                 *
*       2 PARMS OCCURS "NUMPARMS" TIMES.                              *
*        3 SPFLAG - 1 BIT FLAG, IF ON INDICATES SUBPARAMETERS ARE     *
*           PRESENT.  IF OFF, SUBPARAMETERS ARE NOT PRESENT.          *
*                                                                     *
*  THE REMAINDER OF THE VERB KEY ENTRY IS DEPENDENT ON THE VALUE OF   *
*  SPFLAG.  IF SPFLAG IS OFF, THEN THE REMAINDER OF THE ENTRY IS:     *
*                                                                     *
*        3 PARMLEN - 7 BITS BINARY, INDICATES LENGTH OF ASSOCIATED    *
*            PARAMETER (VALUE 0 THROUGH 127).                         *
*        3 PARMVAL - "PARMLEM" BYTES OF CLEAR TEXT.                   *
*                                                                     *
*  IF THE SPFLAG IS ON, INDICATING SUBPARAMETERS, THE REMAINDER OF    *
*  THE VERB KEY ENTRY IS COMPOSED OF REPEATING SUBPARAMETERS:         *
*                                                                     *
*        3 SPCOUNT - 7 BITS BINARY, NUMBER OF SUBPARAMETERS.          *
*        3 SUBPARMS - OCCURS "SPCOUNT" TIMES.                         *
*         4 SPLENGTH - 1 BYTE BINARY, LENGTH OF SUBPARAMETER VALUE.   *
*         4 SPVAL - "SPLENGTH" BYTES OF CLEAR TEXT.                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  SUBPARAMETERS CANNOT THEMSELVES HAVE SUBPARAMETERS.  PARAMETERS    *
*  AND SUBPARAMETERS CAN HAVE ZERO LENGTH; WHEN A STEPNAME OR DDNAME  *
*  IS OMITTED FROM THE ORIGINAL JCL FOR EXAMPLE, THE INTERNAL TEXT    *
*  INDICATES A STEPNAME OR DDNAME OF ZERO BYTES.  OMITTED (BUT NOT    *
*  TRAILING) PARAMETERS ALSO ARE INDICATED WITH ZERO-LENGTH ENTRIES.  *
*                                                                     *
****                                                               ****
****   THIS INFORMATION IS NOT DEFINITIVE!  IT WAS DETERMINED BY   ****
****   INSPECTION AND STUDY OF THE CONVERTER/INTERPRETER LOGIC.    ****
****   IN PARTICULAR, THE DSECT NAMES GIVEN ABOVE DO NOT           ****
****   CORRESPOND TO THE NAMES IBM MAY HAVE ASSIGNED TO THE SAME   ****
****   FIELDS.  YOUR MILEAGE MAY VARY...                           ****
****                                                               ****
*                                                                     *
*        AUTHOR  -                                                    *
*                  DAVID ANDREWS                   APRIL 1990         *
*                  A. DUDA AND SONS, INC.                             *
*                  1975 W. BROADWAY  /  P.O. BOX 257                  *
*                  OVIEDO, FL  32765                                  *
*                  (407) 365-2153     FAX: (407) 365-2148             *
*                                                                     *
***********************************************************************
         SPACE ,
         PRINT OFF
         COPY $HASPGBL
         PRINT ON
         TITLE 'HASP CONTROL BLOCKS'
         PRINT NOGEN
ADJX006C $MODULE  ENVIRON=SUBTASK,                                     X
               $PCE,                                                   X
               $BUFFER,                                                X
               RPL,                                                    X
               $JCT,                                                   X
               $HASPEQU,                                               X
               $MIT,                                                   X
               $HCT,$PADDR,        <=== MVS/370 USERS DELETE "$PADDR"  X
               TEXT,                                                   X
               KEYS
         PRINT GEN
EXIT6C   $ENTRY BASE=R12
         SAVE  (14,12)             SAVE CALLERS' REGISTERS
         LR    R12,R15             ESTABLISH ADDRESSABILITY
*
*  TEST ENTRY CODE.
*
         LTR   R0,R0               IF NOT ENTERED FOR JCL, JUST RETURN
         BNZ   RETURN0                  "
         SPACE ,
*
*  EXAMINE THE INTERNAL TEXT SEGMENT PASSED TO US BY THE CONVERTER.
*  THROW AWAY ANY THAT AREN'T DD STATEMENTS.
*
         L     R8,4(,R1)           POINT TO INTERNAL TEXT IMAGE
         USING TEXT,R8                  "
         TM    STRINDCS,DDSTR      THIS A DD STATEMENT?
         BNO   RETURN0             NO, DON'T GET CONCERNED
         SPACE ,
*
*  DISREGARD AND DO NOT SCAN DD STATEMENTS ASSOCIATED WITH
*  SUBSYSTEM OR DUMMY DATASETS.
*
DD0      TM    STRDINDC,DTXDUMMY+DTXSYSIN+DTXSYOUT+DTXSUBSK
         BNZ   RETURN0
         SPACE ,
*
*  ACQUIRE A DYNAMIC WORK AREA
*
         GETMAIN R,LV=AREALEN      GETMAIN A LOCAL WORKAREA
         LR    R10,R1                   "
         USING WORKAREA,R10             "
         SPACE ,
*
*  INITIALIZE A COUPLE OF DATA AREAS THEREIN:
*    1.  FLAGS
*        GDS (X'80') SET IF THE DATASET NAME INDICATES A GDG
*        NEW (X'40') RESET IF DISPOSITION IS NOT NEW
*    2.  INSERT
*        A FULLWORD THAT POINTS TO THE DCBK FIELD OF THE DD STMT
*        IF ONE IS PRESENT.
*
         MVI   FLAGS,NEW           INITIALIZE FLAGS BYTE
         MVC   INSERT,=F'0'        ADDRESS WHERE INSERTION TAKES PLACE
         TITLE 'SCAN DD STATEMENT FOR VERB KEYS'
*
*  SCAN FOR A VERB KEY SPECIFYING ONE OF: DSNAME, DCB OR DISP.
*
         LH    R3,STRLTH           L'TEXT
         BCTR  R3,0                L'TEXT - 1
         LA    R1,STRDKEY          POINT TO VARIABLE AREA
         LA    R2,1                CONSTANT F'1'
         LA    R5,STRDKEY-TEXT-1   LENGTH SCANNED TO DATE
*
*  R5 CONTAINS THE OFFSET TO WHATEVER BYTE WE ARE CURRENTLY
*  EXAMINING IN THE TEXT STRING.  WE INCREMENT IT ONE AT A
*  TIME WITH A "BXH" INSTRUCTION; THE "BXH" CAUSES US TO
*  BRANCH TO "FREEAREA" IN THE EVENT THAT WE MISS THE "ENDK"
*  KEY FOR SOME REASON (THIS SHOULD NOT OCCUR).
*
DD01     SLR   R4,R4               CLEAR WORK REGISTER
         BXH   R5,R2,FREEAREA      POINT TO VERB KEY
         LA    R1,0(R5,R8)              "
         CLI   0(R1),DCBK          DCB PARAMETER?
         BE    DD10                YES, GO SEE IF MODEL DSCB PRESENT
         CLI   0(R1),ENDK          END OF INTERNAL TEXT?
         BE    DDEND               YES, GO ANALYZE
         CLI   0(R1),DSNAMEK       DSNAME PARAMETER?
         BE    DD20                YES, GO PROCESS DSNAME
         CLI   0(R1),DISPK         DISP PARAMETER?
         BE    DD30                YES, GO PROCESS DISP
         SPACE ,
*
*  FIND NEXT VERB KEY
*
DD01A    SLR   R6,R6               INITIALIZE CURRENT # OF ARGUMENTS
         SLR   R7,R7                    "     STACKED # OF ARGUMENTS
         SLR   R4,R4               INITIALIZE ARGUMENT LENGTH
         BXH   R5,R2,FREEAREA      R5 INDEXES NEXT BYTE IF THERE
         IC    R6,0(R5,R8)         SELECT NEXT BYTE (# OF ARGUMENTS)
DD02     LTR   R6,R6               # ARGUMENTS ZERO?
         BNZ   DD03                NO, GO PROCESS THE REMAINDER
         SLDL  R6,8                UNSTACK PRIOR ARGUMENT COUNT, IF ANY
         LTR   R6,R6               WAS IT ZERO TOO?
         BZ    DD01                YES, GO CHECK NEXT VERB KEY
DD03     BCTR  R6,0                DECREMENT ARGUMENT COUNT
         BXH   R5,R2,FREEAREA      FETCH ARGUMENT LENGTH
         LA    R1,0(R5,R8)              "
         ICM   R4,B'0001',0(R1)    IF GREATER THAN 127 THEN...
         BM    DD04                ... PROCESS SUBARGUMENTS
         AR    R5,R4               ADD ARGUMENT LENGTH TO INDEX
         B     DD02                PROCESS MORE ARGUMENTS
DD04     N     R4,=F'127'          SET R4 TO NUMBER OF SUBARGUMENTS
         SRDL  R6,8                REMEMBER PRIMARY ARGUMENT COUNT
         LR    R6,R4               GO PROCESS SUBARGUMENTS...
         B     DD02                ... INSTEAD OF PLAIN ARGUMENTS
         TITLE 'PROCESS DCB= VERB KEY'
*
*  A "DCB=" VERB KEY WAS DETECTED.  R1 POINTS TO THE FOLLOWING
*  STRUCTURE:
*    VERB KEY    (ONE BYTE)
*    # PARMS     (ONE BYTE, S.B. = 0 OR 1)
*    # SUBPARMS  (OPTIONAL, S.B. 1 IF #PARMS = 1)
*    L'PARM      (ONE BYTE)
*    MODEL       (MODEL DSCB FROM JCL, LENGTH SPECIFIED ABOVE)
*
*  THROW AWAY ANY DD STATEMENT THAT ALREADY HAS A MODEL DSCB SPECIFIED.
*  OTHERWISE REMEMBER THE ADDRESS OF THE DCBK VERB KEY.
*
DD10     CLI   1(R1),X'00'         ANY MODEL DSCB SPECIFIED?
         BNE   FREEAREA            YES, ABORT EXIT
         ST    R1,INSERT           REMEMBER DCBK ADDRESS
         B     DD01A               GO PROCESS REST OF KEYS
         TITLE 'PROCESS DSNAME= VERB KEY'
*
*  A "DSNAME=" VERB KEY WAS DETECTED.  R1 POINTS TO THE FOLLOWING
*  STRUCTURE:
*    VERB KEY    (ONE BYTE)
*    # PARMS     (ONE BYTE, S.B. = 1)
*    SPFLAG      (OPT) (ONE BIT FOLLOWED BY SEVEN BIT # SUBPARAMETERS)
*    L'PARM      (ONE BYTE, S.B. <= 44)
*    DSNAME      (WHICH LENGTH IS SPECIFIED ABOVE)
*
DD20     CLI   1(R1),X'01'         ONE DSNAME PARAMETER?
         BNE   DD20FU1             NO, CRASH AND BURN
         ICM   R4,B'0001',2(R1)    GET DSNAME LENGTH
         SPACE ,
*
*  R4 EITHER CONTAINS THE DSNAME LENGTH, OR THE NUMBER OF DSNAME
*  SUBPARAMETERS.  IN THE LATTER CASE, BIT 24 WILL BE SET AND
*  BITS 25-31 CONTAIN THE NUMBER OF SUBPARAMETERS.  YOU GET TWO
*  SUBPARAMETERS WHEN A MEMBER NAME OR RELATIVE GDS NUMBER IS
*  SPECIFIED IN PARENTHESES ON THE ORIGINAL JCL STATEMENT.  FOR
*  OUR PURPOSES HERE, WE ARE NOT INTERESTED IN DD STATEMENTS THAT
*  DO NOT HAVE A RELATIVE GDS NUMBER.
*
         BZ    DD20FU2             IF NO DSNAME THEN CRASH AND BURN
         BP    FREEAREA            IF NO SUBPARAMETERS THEN RETURN
         CH    R4,=AL2(X'82')      AT LEAST TWO SUBPARAMETERS?
         BL    FREEAREA            NO RELATIVE GDS PRESENT, RETURN
         ICM   R4,B'0001',3(R1)    GET DSNAME LENGTH
         BZ    FREEAREA            IT'S ZERO, RETURN W/O ACTION
         CLI   4(R1),C' '          BLANK OR AMPERSAND
         BE    FREEAREA              IMPLIES TEMPORARY DATASET
         CLI   4(R1),C'&&'           SO GET OUTTA HERE IF
         BE    FREEAREA              WE FIND EITHER ONE
         LA    R4,4(R4,R1)         POINT TO RELATIVE GENERATION LENGTH
         CLI   0(R4),X'01'         AT LEAST ONE BYTE HERE?
         BL    FREEAREA            NO, RETURN WITHOUT ACTION
         CLI   1(R4),C'+'          START WITH PLUS SIGN?
         BNE   FREEAREA            NO, RETURN WITHOUT ACTION
         OI    FLAGS,GDS           INDICATE THAT WE HAVE A +(N) GDS
         B     DD01A               PROCESS MORE VERB KEYS
         SPACE ,
DD20FU1  MVC   WTOAREA(D20FU1L),D20FU1  WRITE ERROR MESSAGE
         LA    R1,WTOAREA          ISSUE WTO SVC
         WTO   MF=(E,(1))               "
         B     FREEAREA
D20FU1   WTO   'ADJX069 JES2 EXIT #6C - DSNAME PARAMETER COUNT IS ZERO'*
               ,ROUTCDE=(2,10),DESC=3,MF=L
D20FU1L  EQU   *-D20FU1
         SPACE ,
DD20FU2  MVC   WTOAREA(D20FU2L),D20FU2  WRITE ERROR MESSAGE
         UNPK  WTOAREA+52(1),2(1,R1)    EXPLODE OFFENDING VALUE
         MVC   WTOAREA+53(1),2(R1)           "
         NC    WTOAREA+52(2),=X'0F0F0F0F0F0F0F0F'
         TR    WTOAREA+52(2),=X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
         LA    R1,WTOAREA          ISSUE WTO SVC
         WTO   MF=(E,(1))               "
         B     FREEAREA
D20FU2   WTO   'ADJX060 JES2 EXIT #6C - INVALID DSNAME LENGTH X''XX''',*
               ROUTCDE=(2,10),DESC=3,MF=L
D20FU2L  EQU   *-D20FU2
         TITLE 'PROCESS DISP= VERB KEY'
*
*  A "DISP=" VERB KEY WAS DETECTED.  R1 POINTS TO THE FOLLOWING
*  STRUCTURE:
*    VERB KEY    (ONE BYTE)
*    # PARMS     (ONE BYTE, S.B. > 0 AND < 4)
*    L'PARM      (ONE BYTE, S.B. <= 8)
*    DISP1       (WHICH LENGTH IS SPECIFIED ABOVE)
*    L'PARM      (ONE BYTE, S.B. <= 8)
*    DISP2       (WHICH LENGTH IS SPECIFIED ABOVE)
*    L'PARM      (ONE BYTE, S.B. <= 8)
*    DISP3       (WHICH LENGTH IS SPECIFIED ABOVE)
*
*  DETERMINE THE INITIAL DISPOSITION.
*
DD30     CLI   1(R1),X'00'         NUMBER OF PARMS > 0 ?
         BE    FREEAREA            NO, EXIT
         CLI   2(R1),X'00'         IS DISP1 LENGTH ZERO?
         BE    DD01A               YES, DEFAULT IS "NEW", GET MORE KEYS
         CLI   3(R1),C'N'          IS IT "NEW"?
         BE    DD01A               YES, BRANCH, PROCESS MORE KEYS
         CLI   3(R1),C'M'          IS IT "MOD"?
         BE    DD01A               YES, BRANCH, PROCESS MORE KEYS
         NI    FLAGS,255-NEW       TURN OFF "NEW" FLAG
         B     DD01A               GO PROCESS REST OF KEYS
         TITLE 'END OF DD STATEMENT'
*
*  WE'VE SCANNED OFF EVERYTHING WE NEED.  IF A RELATIVE GENERATION
*  NUMBER WAS PRESENT, AND THE DISPOSITION WAS "NEW" (OR WOULD
*  DEFAULT TO "NEW") AND NO MODEL DSCB IS PRESENT THEN INSERT ONE.
*
*  REGISTER 1 SHOULD POINT DIRECTLY AT THE "ENDK" KEY.
*
DDEND    TM    FLAGS,GDS+NEW       RELATIVE GDS NUMBER PRESENT?
         BNO   FREEAREA            NO, DON'T MODIFY THIS DD STMT
         SPACE ,
*
*  IF A DCB PARAMETER WAS LOCATED, THE DCBK ADDRESS IS STORED
*  AT LOCATION "INSERT".  INSERT A MODEL DSCB STRING AT THAT
*  POSITION IN THE INTERNAL TEXT.  NOTE THAT THE DCB VERB KEY
*  DOES NOT ALREADY CONTAIN A MODEL DSCB, BECAUSE WE CHECKED
*  FOR THAT EARLIER.
*
*  IF "INSERT" IS ZERO, THEN NO DCB VERB KEY IS IN THE TEXT.
*  INSERT A DCBK WITH A MODEL DSCB AT THE END OF THE TEXT.
*
         ICM   R2,B'1111',INSERT   GET DCBK ADDRESS
         BZ    ZINSERT             DCB WASN'T SPECIFIED - BRANCH
         LA    R2,1(,R2)           POINT JUST PAST DCBK
         LA    R15,MODELBLN-1(,R1) POINT TO DESTINATION
SHIFT    MVC   0(1,R15),0(R1)      SHIFT TEXT RIGHT
         BCTR  R15,0               DECREMENT DESTINATION POINTER
         BCTR  R1,0                DECREMENT SOURCE POINTER
         CR    R1,R2               ANYMORE TEXT?
         BH    SHIFT               YES, MOVE SOME MORE
         MVC   0(MODELBLN,R1),MODELB  INSERT MODEL.DSCB
         LH    R2,STRLTH           UPDATE TEXT LENGTH
         LA    R2,MODELALN-1(,R2)       "
         STH   R2,STRLTH                "
         B     FREEAREA            RETURN TO JES2
         SPACE ,
ZINSERT  MVC   0(MODELALN,R1),MODELA  APPEND DCBK AND MODEL.DSCB
         LH    R2,STRLTH           UPDATE TEXT LENGTH
         LA    R2,MODELALN-1(,R2)       "
         STH   R2,STRLTH                "
         B     FREEAREA            RETURN TO JES2
         SPACE ,
*
*  TEXT TO BE APPENDED TO END OF INTERNAL TEXT (REPLACES ENDK)
*
MODELA   DC    AL1(DCBK)           DCBK
         DC    X'01'               1 PARAMETER
         DC    AL1(L'MODELATX)     LENGTH OF DSNAME
MODELATX DC    C'&MODEL'
         DC    AL1(ENDK)           ENDK
MODELALN EQU   *-MODELA
         SPACE ,
*
*  TEXT TO BE INSERTED AFTER DCBK (REPLACES X'00')
*
MODELB   DC    X'01'               1 SUBPARAMETER
         DC    AL1(L'MODELBTX)     LENGTH OF DSNAME
MODELBTX DC    C'&MODEL'
MODELBLN EQU   *-MODELB
         TITLE 'RETURN TO JES2'
*
*  FREE THE WORKAREA, WE DON'T NEED IT ANYMORE.
*
FREEAREA FREEMAIN R,LV=AREALEN,A=(10)
         DROP  R8,R10
         SPACE ,
*
*  RETURN TO CALLER, RETURN CODE 0 INDICATES EXECUTE OTHER EXITS
*
RETURN0  RETURN (14,12),RC=0
         LTORG
         $MODEND
         TITLE 'LOCAL WORKAREA - EXISTS FOR THE LIFE OF THE CONVERTER'
WORKAREA DSECT
WTOAREA  DS    CL128               AREA FOR WTO LIST
INSERT   DS    F                   ADDRESS OF DCBK VERB KEY
FLAGS    DS    CL1                 FLAGS BYTE
GDS      EQU   X'80'                 DSNAME HAS A RELATIVE GENERATION
NEW      EQU   X'40'                 DISP=NEW
AREALEN  EQU   *-WORKAREA
         END
/*
