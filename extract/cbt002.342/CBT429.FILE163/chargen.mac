//CHARGEN JOB
//*
//*  CHARGEN -
//*    A BANNER PROGRAM THAT WAS FLOATING AROUND IN MY POSTGRADUATE
//*    DAYS A VERY LONG TIME AGO, CIRCA 1975.
//*
//*  INSTALLATION -
//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS
//*    BELOW TO SUIT YOUR TASTE.
//*
//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS
//             LIB='SYS1.LINKLIB',   <=== TARGET LOAD LIBRARY
//             MBR=CHARGEN,          <=== LOAD MODULE NAME
//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER
//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER
//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME
//             MACLIB='SYS1.MACLIB', <=== MACLIB DATASET NAME
//             SYSTS=SYSDA           <=== UNITNAME FOR WORK DATASETS
//*
//GENER   EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT2   DD  SYSOUT=&SOUT,DCB=(RECFM=FBA,LRECL=72,BLKSIZE=72)
//*
//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK',
//             COND=(0,NE)
//STEPLIB  DD  DSN=&ALIB,DISP=SHR
//SYSTERM  DD  SYSOUT=&SOUT
//SYSPRINT DD  SYSOUT=&SOUT
//SYSLIB   DD  DSN=&SMPMTS,DISP=SHR
//         DD  DSN=&MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),
//             SPACE=(TRK,(5,1),RLSE)
//*
//LKED    EXEC PGM=HEWL,COND=(0,NE),
//             PARM='LIST,MAP,XREF,NORENT'
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)
//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR
//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)
//        PEND
//*
//        EXEC INSTALL
//GENER.SYSIN DD *
   GENERATE MAXFLDS=1
   RECORD FIELD=(72)
/*
//GENER.SYSUT1 DD *
1          C H A R G E N   U S E R ' S   G U I D E
-
      DESCRIPTION
      -----------
      "CHARGEN" IS A POSTER PROGRAM. SPECIFICALLY, "CHARGEN" PRINTS
      LARGE REPRODUCTIONS OF EBCDIC CHARACTERS ACCEPTED FROM THE INPUT
      STREAM. THESE CHARACTERS USUALLY FORM WORDS AND/OR PHRASES.
      "CHARGEN" CAN REPRODUCE UPPER CASE AND LOWER CASE ALPHABETIC
      CHARACTERS, AS WELL AS NUMERALS AND MORE THAN 30 SPECIAL CHARAC-
      TERS. THERE ARE SEVERAL SPECIAL FEATURES OF CHARGEN WHICH ARE EX-
      PLAINED FULLY BELOW. IT IS RECOMMENDED THAT THIS DOCUMENT BE READ
      CAREFULLY BEFORE ANY ATTEMPT IS MADE TO USE "CHARGEN". FAILURE TO
      DO SO WILL LEAVE THE USER UNAWARE OF MANY OF THE EXTRA CONVENIEN-
      CES IN "CHARGEN", AND MAY ALSO LEAD TO UNEXPECTED AND UNWANTED
      RESULTS.
-     INVOKING CHARGEN
      -------- -------
      CHARGEN REQUIRES AN 18K REGION FOR EXECUTION. THE INPUT DATASET
      MUST BE LRECL=80, AND HAS THE DDNAME "SYSIN". THE OUTPUT DATASET
      IS NORMALLY A SYSOUT DATASET (RECFM=FBA, LRECL=133, BLKSIZE=133),
      WITH THE DDNAME "SYSPRINT". TYPICAL JCL WOULD BE:
0          //         JOB
           /*JOBPARM  PSS=NO,LINECT=0,LINES=9999,CPU=15,IO=0
           // EXEC PGM=CHARGEN
           //STEPLIB DD DSN=...,DISP=SHR
           //SYSIN DD *
                .
                .
                .
           /*
           //SYSPRINT DD SYSOUT=A
0     THE "JOBPARM" PARAMETERS MAY BE ABBREVIATED:
           /*JOBPARM  S=NO,K=0,L=9999,Z=15,Y=0
0     THE CPU (Z) VALUE MAY NEED TO BE INCREASED IF MORE THAN 150 CHAR-
      ACTERS ARE TO BE REPRODUCED. THE AVERAGE REPRODUCTION RATE IS
      10-15 CHARACTERS PER CPU SECOND. AT PEAK PERFORMANCE (DETERMINED
      BY THE CONTENTS OF THE INPUT STREAM), HOWEVER, THE REPRODUCTION
      RATE IS 15-20 CHARACTERS PER CPU SECOND.
1     CONTENTS OF THE INPUT STREAM
      -------- -- --- ----- ------
0     THE BACKGROUND CONTROL CHARACTER -
           CHARGEN MAY HAVE ANY NUMBER OF INPUT CARDS. COLUMN 1 ON EACH
           CARD IS RESERVED FOR THE BACKGROUND CONTROL CHARACTER. THIS
           CHARACTER IS THE CHARACTER WHICH IS USED AS THE BACKGROUND
           ON WHICH THE INPUT STREAM IS REPRODUCED. IF THE BACKGROUND
           CONTROL CHARACTER IS A BLANK, THE CHARACTER PATTERNS ARE
           CONSTRUCTED FROM THE EBCDIC CHARACTERS WHICH THE PATTERNS
           REPRESENT, OR FROM ANOTHER CHARACTER WHICH SHOWS UP BETTER
           ON PAPER. FOR EXAMPLE, "A" IS MADE FROM EBCDIC "A", "B" IS
           MADE FROM EBCDIC "B", AND "." IS MADE FROM EBCDIC "O". WHEN
           THE BACKGROUND CONTROL CHARACTER FOR ANY CARD IS NOT A
           BLANK, HOWEVER, "CHARGEN" WILL OPERATE IN "REVERSE IMAGE
           MODE" FOR THAT CARD. FOR EXAMPLE, IF COLUMN 1 CONTAINS A
           DOLLAR SIGN ("$"), THE OUTPUT WILL CONSIST OF SOLID DOLLAR
           SIGNS, WITH THE CHARACTER PATTERNS LEFT AS BLANK AREAS.
0          EXAMPLE:       NORMAL              REVERSE
0                                             $$$$$$$
                           AAA                $$   $$
                          A   A               $ $$$ $
                          A   A               $ $$$ $
                          AAAAA               $     $
                          A   A               $ $$$ $
                          A   A               $ $$$ $
                          A   A               $ $$$ $
                                              $$$$$$$
0          (NOTE: THE FIGURE ABOVE DOES NOT SHOW THE ACTUAL PATTERN
                SIZE OR SHAPE)
0          A BACKGROUND CONTROL CHARACTER IS ONLY EFFECTIVE FOR THE
           CHARACTERS ON THE SAME CARD. A NEW BACKGROUND CONTROL CHAR-
           ACTER IS OBTAINED FROM EACH CARD.
1     SPECIFYING THE INFORMATION TO BE REPRODUCED -
           THE ACTUAL CHARACTERS THAT ARE TO BE REPRODUCED MAY APPEAR
           IN COLUMNS 2-80 ON A CARD. THE REPRODUCTION OF A CARD WILL
           TERMINATE AT THE LAST NON-BLANK CHARACTER ON THE CARD. TO
           REPRODUCE NUMERALS OR UPPER CASE ALPHABETIC CHARACTERS, SIM-
           PLY CODE THEM DIRECTLY ON THE CARD. LOWER CASE ALPHABETIC
           CHARACTERS MAY BE CODED DIRECTLY ALSO (IE: FROM AN "ASIS"
           TSO DATASET), OR BY PRECEDING THE UPPER CASE EQUIVALENTS OF
           THE LOWER CASE CHARACTERS, WITH THE EBCDIC LOGICAL NOT("^").
           FOR EXAMPLE, TO REPRODUCE THE WORD "HELLO" WITH ALL BUT THE
           "H" IN LOWER CASE, CODE:  H^E^L^L^O . THE "^" IS NOT VALID
           FOR NUMERALS. IF IT IS USED WITH A NUMERAL, BOTH THE "^" AND
           THE NUMERAL WILL BE IGNORED. A "^" PRECEDING A LOWER CASE
           CHARACTER HAS NO EFFECT, AND THE CHARACTER WILL BE REPRO-
           DUCED AS IF THE "^" WAS NOT THERE. THE FOLLOWING SPECIAL
           CHARACTERS ARE AVAILABLE, AND MAY BE CODED DIRECTLY ON A
           CARD:
0                  (BLANK)                    -  (HYPHEN)
                Ö  (CENT)                     /  (SLASH)
                .  (PERIOD)                   ,  (COMMA)
                <  (LESS THAN)                %  (PERCENT)
                (  (LEFT PAREN)               >  (GREATER THAN)
                +  (PLUS SIGN)                ?  (QUESTION MARK)
                &  (AMPERSAND)                :  (COLON)
                !  (EXCLAMATION POINT)        #  (NUMBER SIGN)
                $  (DOLLAR SIGN)              @  (APIECE SIGN)
                *  (ASTERISK)                 '  (APOSTROPHE)
                )  (RIGHT PAREN)              =  (EQUAL SIGN)
                ;  (SEMI-COLON)               "  (OPEN QUOTE)
0          THE FOLLOWING SPECIAL CHARACTERS ARE AVAILABLE BY PRECEDING
           ANOTHER SPECIAL CHARACTER WITH "^":
0               LEFT ARROW                    ^<  (LESS THAN)
                LEFT BRACE                    ^(  (LEFT PAREN)
                VERTICAL BAR                  ^×  (VERTICAL BAR)
                PLAYBOY RABBIT                ^$  (DOLLAR SIGN)
                LARGE ASTERISK                ^*  (ASTERISK)
                RIGHT BRACE                   ^)  (RIGHT PAREN)
                LOGICAL NOT                   ^^  (LOGICAL NOT)
                REVERSE SLASH                 ^/  (SLASH)
                RIGHT ARROW                   ^>  (GREATER THAN)
                NOT EQUAL SIGN                ^=  (EQUAL)
                CLOSE QUOTE                   ^"  (OPEN QUOTE)
0          (NOTE: VERTICAL BAR IS GENERATED BY "^×" BECAUSE A "×" WITH-
           OUT THE "^" HAS A SPECIAL MEANING WHICH IS DESCRIBED LATER)
0          IF A "^" PRECEDES A SPECIAL CHARACTER WHICH DOES NOT HAVE A
           "^" COUNTERPART, THE "^" AND THE CHARACTER THAT FOLLOWS IT
           WILL BE IGNORED.
1     UNDERSCORING
           ANY CHARACTER(S) IN THE INPUT STREAM MAY BE UNDERSCORED WHEN
           THEY ARE REPRODUCED. SIMPLY PRECEDE THE CHARACTER(S) TO BE
           REPRODUCED WITH A "_" CHARACTER. FOR EXAMPLE:
0                         _1
                          _A
                          _^A
                          _$
                          _^$
                          _H_^E_^L_^L_^O
0          AN UNDERSCORE CHARACTER ALONE MAY BE GENERATED BY CODING
           "_ " (BLANK) IN THE INPUT STREAM. WHEN "CHARGEN" IS IN RE-
           VERSE IMAGE MODE, THE UNDERSCORES ARE ALSO REVERSED.
1     CONTROL WORDS
           CONTROL WORDS ARE 5 LETTER KEYWORDS WHICH APPEAR IN COLUMNS
           1-5 OF A CARD. THE REMAINDER OF THE CARD MUST BE BLANK. IF
           IT ISN'T, THE CARD WILL BE TREATED AS A NORMAL INPUT CARD.
           THE LAST FOUR CHARACTERS OF THE CONTROL WORD WILL BE REPRO-
           DUCED, AND THE FIRST CHARACTER OF THE CONTROL WORD WILL BE
           THE BACKGROUND CONTROL CHARACTER. SIMILAR ERRORS WILL RESULT
           IF YOU MISSPELL A CONTROL WORD. ANY CONTROL WORD MAY BE
           ISSUSED AS MANY TIMES AS DESIRED IN A SINGLE RUN. A CONTROL
           WORD REQUEST TO INVOKE A SPECIAL PROCESSING FACILITY WHICH
           HAS ALREADY BEEN INVOKED, WILL NOT CAUSE AN ERROR.
-          "EJECT" -
                IF A MESSAGE TO BE REPRODUCED REQUIRES MORE THAN ONE
                CARD, "CHARGEN" WILL ALLOW THIS AS LONG AS COLUMN 1 OF
                EACH CARD CONTAINS A BACKGROUND CONTROL CHARACTER. FOR
                EXAMPLE:
0                         *THI
                          *S IS A
                          * MESSA
                          *GE.
0               OCCASIONALLY, HOWEVER, YOU MAY WANT TO GENERATE SEVERAL
                MESSAGES IN ONE RUN. THE "EJECT" CONTROL WORD WILL
                CAUSE "CHARGEN" TO EJECT 1 PAGE IN ITS OUTPUT STREAM.
                FOR EXAMPLE:
0                         *THIS IS A MESSAGE.
                          EJECT
                          $THIS IS ANOTHER MESSAGE.
-          "LCASE" -
                THIS CONTROL WORD ONLY AFFECTS UPPER CASE ALPHABETIC
                CHARACTERS IN THE INPUT STREAM. AFTER YOU HAVE ISSUED
                THE "LCASE" COMMAND, ALL UPPER CASE ALPHABETIC INPUT
                WILL BE AUTOMATICALLY CONVERTED TO LOWER CASE. IF YOU
                WANT AN UPPER CASE CHARACTER WHILE IN "LCASE" MODE, YOU
                MAY PRECEDE THE CHARACTER WITH THE LOGICAL NOT ("^").
                FOR EXAMPLE:
0               H^E^L^L^O    IS THE SAME AS   LCASE
                                               ^HELLO
-          "UCASE" -
                REVERSES THE EFFECT OF THE "LCASE" COMMAND, AND RETURNS
                CASE CONVERSION TO NORMAL.
1          "ULINE" -
                THE "ULINE" CONTROL WORD DOES THE SAME THING FOR UNDER-
                SCORING, THAT "LCASE" DOES FOR CASE CONVERSION. AFTER
                YOU HAVE ISSUED THE "ULINE" COMMAND, ALL OUTPUT WILL BE
                UNDERSCORED. INDIVIDUAL UNDERSCORE SUPPRESSION MAY BE
                OBTAINED BY PRECEDING THE CHARACTER(S) WITH "_". FOR
                EXAMPLE:
0               _H_^E_^L_^L_^O T^H^E^R^E      IS THE SAME AS
0               ULINE
                 H^E^L^L^O_ _T_^H_^E_^R_^E
-          "NLINE" -
                REVERSES THE EFFECT OF "ULINE" AND RETURNS UNDERSCORE
                PROCESSING TO NORMAL.
0          WITH A KNOWLEDGE OF THE CONTROL WORDS, THE LAST EXAMPLE MAY
           BE CODED AS FOLLOWS:
0                         LCASE
                          ULINE
                           ^HELLO
                          NLINE
                           ^THERE
-     SPECIAL CONTROL SYMBOL "×" (VERTICAL BAR)
           THE VERTICAL BAR IS USED TO MARK THE END OF ONE CARD AND THE
           BEGINNING OF ANOTHER. LOGICALLY, THE FIRST CHARACTER AFTER A
           VERTICAL BAR IS A BACKGROUND CONTROL CHARACTER, OR THE FIRST
           CHARACTER OF A CONTROL WORD. THE LAST EXAMPLE COULD HAVE
           BEEN CODED AS FOLLOWS:
0                    LCASE×ULINE× ^HELLO×NLINE× ^THERE
0          OR IF YOU WANT THE WORD "THERE" TO BE IN REVERSE IMAGE, WITH
           A BACKGROUND OF "#":
0                    LCASE×ULINE× ^HELLO×NLINE×#^THERE
0          OBVIOUSLY, A VERTICAL BAR CAN BE USED TO ADD TRAILING
           BLANKS TO A MESSAGE, IE:   $HELLO        ×
1     RETURN CODES FROM "CHARGEN"
           0 - "CHARGEN" EXECUTED NORMALLY
0          4 - THERE WERE CHARACTERS IN THE INPUT STREAM WHICH COULD
               NOT BE REPRODUCED (IE:  ^5   OR   ^#)
0          8 - EITHER THE "SYSIN" OR THE "SYSPRINT" DD CARD IS MISSING.
               NO OUTPUT IS GENERATED.

-     * * *   E N D   O F   D O C U M E N T   * * *
/*
//ASM.SYSIN DD *
CHARGEN  TITLE '-  FLOATING CHARACTER GENERATOR'
*
*     RELEASE 0, APR 75
*         AUTHOR: UNKNOWN, OWNER: P. L. ARNETT
*         COMPILATION ERRORS CORRECTED: 3
*         EXECUTION AND LOGIC ERRORS  : TOO MANY TO COUNT
*
*     RELEASE 1, JUL 75
*         NEW AUTHOR AND OWNER: JAY ULLIUS
*         ORIGINAL PROGRAM DISCARDED
*         CHARACTER PATTERNS AND DECIPHERING ALGORITHM RETAINED
*         NEW MAIN ROUTINE WRITTEN
*
*         * * * THIS ONE WORKS * * *
*
*         1) REVERSE IMAGE FEATURE INSTALLED
*         2) ASTERISK AS END-OF-MESSAGE MARK, UNLESS MESSAGE USES FULL
*            80 BYTES OF INPUT RECORD
*
*     RELEASE 2, AUG 75
*         1) "EJECT" COMMAND INSTALLED
*         2) UNDERSCORING FEATURE INSTALLED
*
*     RELEASE 3, SEP 75
*         1) "UNDERLINE" / "NOUNDERLINE" COMMANDS INSTALLED
*         2) "LOWER CASE" / "UPPER CASE" COMMANDS INSTALLED
*         3) END-OF-MESSAGE MARK REMOVED; LAST NON-BLANK IS LAST CHAR
*            OF MESSAGE
*
*     RELEASE 4, OCT 75
*         1) VERTICAL BAR - OPTIONAL RECORD DELIMITER INSTALLED
*
*     RELEASE 5, DEC 75
*         1) CHARACTER SET EXPANDED BY 39 %, FROM 70 TO 97 CHARACTERS
*         2) # OF PUT/GET MACROS REDUCED BY INSTALLING A REUSABLE I/O
*            MODULE
*         3) RETURN CODE FACILITY INSTALLED FOR FLAGGING INPUT ERRORS
*            (CHARACTERS THAT CAN NOT BE REPRODUCED)
*
*     RELEASE 6, MAR 76
*         1) "UNDERLINE" COMMAND RENAMED TO "ULINE"
*         2) "NOUNDERLINE"               TO "NLINE"
*         3) "LOWER CASE"                TO "LCASE"
*         4) "UPPER CASE"                TO "UCASE"
*         5) MAIN ROUTINE OVERHAUL: PHASE 1
*             A) WORKAREA OBTAINED WITH "GETMAIN" MACRO INSTRUCTION
*             B) PATTERN LOCATING LOOP REPLACED WITH "TRT" INSTRUCTION
*
         EJECT
*
*     RELEASE 7, AUG 76
*         1) MAIN ROUTINE OVERHAUL: PHASE 2
*             A) COMMAND DETECTION AND EXECUTION ROUTINE RE-WRITTEN AND
*                CONDENSED, SINCE ALL COMMANDS ARE 5 BYTES LONG
*             B) PATTERN ADDRESS TABLE CONVERTED FROM RELOCATABLE
*                "A"-CONS, TO BASE/DISPLACEMENT "S"-CONS
*             C) "MISSING DD STATEMENT" DETECTION INSTALLED (NEW RC=8)
*             D) OPTIMIZATION OF REGISTER USAGE, TO PROVIDE ADDRESS-
*                ABILITY FOR FUTURE CHARACTER SET EXPANSION
*             D) REGISTER USAGE AND CHARACTER PATTERN DOCUMENTATION
*                WRITTEN AND INSTALLED
*
*         2) RESULTS OF OVERHAUL:
*             A) CORE REQUIREMENT REDUCED BY 2 KILOBYTES
*             B) LOAD MODULE SIZE REDUCED BY 3 KILOBYTES
*             C) EXECUTION SPEED AND EFFICIENCY IMPROVED BY 33%, FROM
*                10-15, TO 15-20 CHARACTERS REPRODUCED PER CPU SECOND
*
         EJECT
*
*     REGISTER USAGE
*     -------- -----
*     R8 THRU R12 ARE BASE REGISTERS FOR THE MAIN CSECT - "CHARGEN".
*        CURRENTLY, R11 AND R12 ARE NOT NEEDED, BUT THE ADDRESSABILITY
*        OF R8-R10 IS ALMOST EXHAUSTED; AND FUTURE PROGRAM MODIFICA-
*        TIONS, OR THE IMPLEMENTATION OF ADDITIONAL CHARACTER PATTERNS,
*        WILL PROBABLY MAKE USE OF THE EXTRA BASE REGISTERS.
*
*     R13 IS THE BASE REGISTER FOR THE DSECT, WHICH CONTAINS:
*        SAVEAREA, I/O WORKAREAS, A TRANSLATE TABLE, AND DEFAULT
*        CASE/UNDERSCORE FLAGS.
*
*     WE ALL KNOW ABOUT R14, R15, R0, AND R1.
*
*     R2 IS CLEARED EARLY IN THE PROGRAM. IT IS USED BY "IC", "TRT",
*        AND CONTAINS F'1' AS THE INCREMENT USED BY "BXH" INSTRUCTIONS.
*
*     R3 POINTS TO THE LAST NON-BLANK CHARACTER IN THE INPUT BUFFER.
*
*     R4 POINTS TO THE CHARACTER IN THE INPUT BUFFER, WHICH IS
*        CURRENTLY BEING ANALYZED OR REPRODUCED.
*
*     R5 IS A GENERAL WORK REGISTER. IT IS USED FOR LOOP COUNTERS, AND
*        AS THE RETURN REGISTER FROM "BAL" TO THE OUTPUT ROUTINE.
*
*     R6 IS ANOTHER WORK REGISTER, BUT IS USED PRIMARILY AS A POINTER
*        TO EACH ELEMENT, IN SUCCESSION, OF A CHARACTER PATTERN.
*
*     R7 CONTAINS THE ADDRESS, IN THE OUTPUT BUFFER, OF THE FIRST
*        USABLE (MODIFYABLE) BYTE. ALTERING THIS ADDRESS ALTERS THE
*        LEFT AND RIGHT MARGINS, ABOVE AND BELOW THE CHARACTERS THAT
*        ARE REPRODUCED. THIS INFORMATION MIGHT BE HANDY IF "CHARGEN"
*        IS USED ON A PRINTER WHICH IS NOT 132 CHARACTERS WIDE.
*        (NOTE: THE CHARACTERS PRODUCED BY "CHARGEN" WERE DESIGNED AT
*        EIGHT LINES PER INCH).
*
         EJECT
*
*     GENERAL REGISTER EQUATES
*
         SPACE
         MACRO
         EQUATES
         LCLA  &CTR
.LOOP    AIF   (&CTR EQ 16).END
R&CTR    EQU   &CTR
&CTR     SETA  &CTR+1
         AGO   .LOOP
.END     MEND
         SPACE 5
         EQUATES
         EJECT
*
*     INITIALIZATION
*
         SPACE
CHARGEN  CSECT
         STM   R14,R12,12(R13)    SAVE REGISTERS
         LR    R8,R15             LOAD BASE
         USING CHARGEN,R8,R9,R10,R11,R12    LOTS OF @ABILITY
         SPACE
         LA    R0,WORKLEN         SIZE OF WORKAREA
         GETMAIN  R,LV=(0)        GET WORKAREA
         SPACE
         ST    R13,4(,R1)         )
         ST    R1,8(,R13)         ) CHAIN SAVE AREAS
         LR    R13,R1             )
         USING WORKAREA,R13
         SPACE
         XR    R2,R2              CLEAR WORK REG
         SPACE
         OPEN  (OUT,OUTPUT,IN)    OPEN FILES
         SPACE
         TM    OUT+48,X'10'       IS FILE OPEN OK ???
         BZ    NODD               NOPE...DD STMT MISSING
         SPACE
         TM    IN+48,X'10'        IS FILE OPEN OK ???
         BZ    NODD               NOPE...DD STMT MISSING
         SPACE
         LM    R9,R12,BASES       LOAD CONTENTS OF BASE REGS
         SPACE
         MVI   CARD+80,C' '       FILL UNUSED PORTION OF CARD
         MVC   CARD+81(79),CARD+80     WITH BLANKS
         SPACE
         MVI   BLANKS,1           FILL "TRT" TABLE
         MVC   BLANKS+1(255),BLANKS    WITH X'01' S
         MVI   BLANKS+C' ',0      FOR "TRT"
         SPACE
         MVI   FLAGS,0            SET DEFAULTS
         SPACE
         LA    R7,OUTLINE+5       -> USABLE OUTPUT BUFFER
         SPACE
         BAL   R5,NEWPAGE         SKIP A PAGE
         EJECT
*
*     READ A CARD FROM "SYSIN"
*
         SPACE
SETUP    LA    R4,CARD            -> INPUT BUFFER
         SPACE
GETCARD  GET   IN,(R4)            QSAM I/O REQUEST
         SPACE 5
*
*     LOCATE LAST NON-BLANK CHARACTER IN INPUT BUFFER
*
         SPACE
         LA    R5,79              COUNTER FOR LOOP
         LA    R3,CARD+71         -> END OF INPUT BUFFER
         SPACE
TEST     CLI   0(R3),C' '         IS THIS A BLANK ???
         BNE   NEWCARD            NOPE...ALL DONE HERE...
         SPACE
         BCTR  R3,R0              FOUND BLANK...DECREMENT PTR
         BCT   R5,TEST            TRY NEXT CHARACTER
         B     GETCARD            CARD IS BLANK...GET ANOTHER
         SPACE 5
*
*     CHECK INPUT BUFFER FOR CONTROL WORD
*
         SPACE
NEWCARD  LA    R5,#CMDS           LOAD NUMBER OF CONTROL WORDS AVAIL
         LA    R6,CMDNAMES        -> CONTROL WORD LIST
LOOP     CLC   CARD(5),0(R6)      IS THIS A CONTROL WORD ???
         BE    FOUNDCMD           YES...GO MAKE ONE LAST TEST
         SPACE
         LA    R6,5(,R6)          -> NEXT CONTROL WORD NAME
         BCT   R5,LOOP            TEST NEXT CONTROL WORD
         B     FUNSTUF            NO CONTROL WORD...MAKE POSTER...
         SPACE
FOUNDCMD CLI   CARD+5,C'×'        END OF CONTROL WORD ???
         BE    DOCMD              YEP...GO "EX" IT
         SPACE
         TRT   CARD+5(67),BLANKS  END OF CONTROL WORD ???
         BNZ   FUNSTUF            NO...GO MAKE POSTER...
         EJECT
*
*     EXECUTE COMMAND FROM INPUT STREAM
*
         SPACE
DOCMD    SLL   R5,2               ADJUST OFFSET FOR "EX"
         EX    R0,CMDS-4(R5)      DO THE COMMAND
         SH    R3,HW6             ADJUST LENGTH OF CARD
         SPACE
         CR    R4,R3              MORE OF CARD LEFT ???
         BH    GETCARD            NOPE...GET ANOTHER...
         SPACE
         MVC   CARD,CARD+6        MOVE REMAINDER OF CARD
         B     NEWCARD            START OVER AGAIN
         SPACE 5
*
*     SET UP FILLER, AND THEN MAKE POSTER
*
         SPACE
FUNSTUF  MVI   FILLER,C' '        SINGLE SPACE CARRIAGE CONTROL
         MVC   1+FILLER,CARD      COPY BACKGROUND CHARACTER FROM INPUT
         MVC   FILLER+2(131),FILLER+1  PROPAGATE BACKGROUND
         SPACE 5
*
*     A NOTE ABOUT THE "BXH" INSTRUCTIONS THAT OCCUR IN THE FOLLOWING
*     CODE: AFTER R4 IS INCREMENTED BY R2, IF R4 IS GREATER THAN R3,
*     CONTROL IS PASSED TO "SETUP", AND A NEW CARD IS READ FROM SYSIN
*
         SPACE
*
*     CHECK FOR PSEUDO-NEW CARD, FROM VERTICAL BAR
*
         SPACE
GETCHAR  LA    R2,1               INCREMENT FOR "BXH"
         SPACE
         BXH   R4,R2,SETUP        -> PAST BACKGROUND CHARACTER
         SPACE
         CLI   0(R4),C'×'         CHECK FOR VERTICAL BAR
         BNE   CONTINUE           NO...
         SPACE
         BXH   R4,R2,SETUP        -> PSEUDO-NEW CARD
         SPACE
         MVC   CARD,0(R4)         MOVE IN PSEUDO-NEW CARD
         LA    R3,CARD(R3)        ADJUST THE LENGTH OF
         SR    R3,R4               THE NEW CARD
         LA    R4,CARD            -> NEW CARD
         B     NEWCARD            GO CHECK FOR CONTROL WORD...ETC...
         EJECT
*
*     DETECT AND PROCESS UNDERSCORE MODIFICATION REQUEST
*
         SPACE
CONTINUE CLI   0(R4),C'_'         REQUEST TO OVERRIDE DEFAULT ???
         BNE   DEFAULT1           NOPE...
         SPACE
         BXH   R4,R2,SETUP        -> PAST UNDERSCORE
         SPACE
         TM    FLAGS,B'01'        IS DEFAULT "UNDERLINE" ???
         BO    CASETEST           YEP...
         SPACE
         B     UNDRLINE           ADD UNDERSCORE TO CHARACTER
         SPACE
DEFAULT1 TM    FLAGS,B'01'        IS DEFAULT "NOUNDERLINE" ???
         BZ    CASETEST           YEP...
         SPACE
UNDRLINE MVC   FILLER+30(3),CARD+80    ADD REVERSE UNDERSCORE
         SPACE
         CLI   CARD,C' '          IN REVERSE IMAGE MODE ???
         BNE   CASETEST           YEP...
         SPACE
         MVC   FILLER+30(3),HHH   ADD NORMAL UNDERSCORE
         EJECT
*
*     DETECT AND PROCESS CASE MODIFICATION REQUEST
*
         SPACE
CASETEST CLI   0(R4),C'^'         REQUEST TO OVERRIDE DEFAULT ???
         BNE   DEFAULT2           NOPE...
         SPACE
         BXH   R4,R2,SETUP        -> PAST '^'
         SPACE
         TM    0(R4),X'80'        SPECIAL CHARACTER ???
         BZ    SWITCHIT           YEP...
         SPACE
         TM    0(R4),X'70'        NUMERAL ???
         BO    SWITCHIT           YEP...
         SPACE
         TM    FLAGS,B'10'        IS DEFAULT "LOWER CASE" ???
         BO    HUNTCHAR           YEP...
         SPACE
         B     SWITCHIT           GO SWITCH CASE
         SPACE
DEFAULT2 TM    0(R4),X'80'        SPECIAL CHARACTER ???
         BZ    HUNTCHAR           YEP...
         SPACE
         TM    0(R4),X'70'        NUMERAL ???
         BO    HUNTCHAR           YEP...
         SPACE
         TM    FLAGS,B'10'        DEFAULT IS "LOWER CASE" ???
         BZ    HUNTCHAR           NOPE...
         SPACE
SWITCHIT NI    0(R4),X'BF'        CHANGE CASE
         EJECT
*
*     LOCATE CHARACTER PATTERN
*
         SPACE
HUNTCHAR TRT   0(1,R4),@@         DO I KNOW HOW TO MAKE THIS ONE ???
         BNZ   BUILD              YEP...
         SPACE
         MVI   RC,4               NOPE...RC=4
         B     ERASE              ERASE UNDERSCORE
         SPACE
BUILD    LR    R6,R2              COPY RESULT BYTE FROM "TRT"
         SLL   R6,1               MULTIPLY BY 2
         LA    R6,ADDRLIST-2(R6)  -> S-CON FOR CHARACTER PATTERN
         MVC   LA+2(2),0(R6)      MODIFY "LA" INSTRUCTION
LA       LA    R6,*-*             -> CHARACTER PATTERN
         BCTR  R6,R0              BACKUP ONE BYTE
         SPACE
         CLI   CARD,C' '          REVERSE IMAGE REQUESTED ???
         BNE   REVERSE            YEP...
         SPACE
         MVC   PRNTCHAR(1),1(R6)  COPY "BUILD" CHAR
         MVC   PRNTCHAR+1(131),PRNTCHAR     PROPAGATE "BUILD" CHAR
         B     MAKELINE           GO CONSTRUCT A LINE (OR TWO)...
         SPACE
REVERSE  MVC   PRNTCHAR,PRNTCHAR-1     FILL FOR REVERSE IMAGE
         EJECT
*
*     BUILD AND PRINT CHARACTER...ONE LINE AT A TIME
*
         SPACE
MAKELINE BAL   R5,FILLRPUT        PUT A LINE OF FILLER
         BAL   R5,FILLRPUT        AND ANOTHER ONE
         SPACE
NEWLINE  MVC   OUTLINE,FILLER     INITIALIZE OUTPUT BUFFER
         SPACE
COPYSTUF LA    R6,2(,R6)          -> NEXT PATTERN ELEMENT
         SPACE
         CLI   0(R6),X'80'        REQUEST FOR BLANK LINE ???
         BE    PRINTOUT           YEP...
         SPACE
         MVC   PATTERN,0(R6)      COPY PATTERN ELEMENT
         NC    PATTERN,MASK       MASK OUT FLAG BITS
         MVC   3+MVC,PATTERN      MODIFY DISPLACEMENT IN "MVC"
         IC    R2,PATTERN+1       SNARF UP PRE-ADJUSTED LENGTH
         EX    R2,MVC             BUILD A CHARACTER SEGMENT
         SPACE
         TM    0(R6),X'80'        LAST SEGMENT IN CURRENT LINE ???
         BZ    COPYSTUF           NOPE...GET ANOTHER
         SPACE
PRINTOUT PUT   OUT,OUTLINE        PRINT A LINE
         SPACE
         TM    1(R6),X'80'        LAST LINE IN CHARACTER ???
         BZ    NEWLINE            NOPE...GO BUILD ANOTHER LINE
         SPACE
         BAL   R5,FILLRPUT        PUT A LINE OF FILLER
         BAL   R5,FILLRPUT        AND ONE MORE
         SPACE
ERASE    MVC   FILLER+30(3),FILLER+29  ERASE POSSIBLE UNDERSCORE
         B     GETCHAR            GET NEXT CHAR FROM INPUT STREAM
         EJECT
*
*     OUTPUT ROUTINE
*
         SPACE
NEWPAGE  MVI   FILLER+1,C' '      MOVE BLANKS TO FILLER
         MVC   FILLER+2(131),FILLER+1
         MVI   FILLER,C'1'        CARRIAGE CONTROL TO SKIP A PAGE
         SPACE
FILLRPUT PUT   OUT,FILLER         PRINT A FILLER, OR A PAGE
         SPACE
         BR    R5                 ALL DONE HERE...
         SPACE 5
*
*     END-OF-JOB ROUTINE
*
         SPACE
EOJ      BAL   R5,NEWPAGE         SKIP A PAGE
         BAL   R5,NEWPAGE         AND ONE MORE
         SPACE
         CLOSE (OUT,,IN)          CLOSE FILES
         SPACE
         LA    R15,0              LOAD RETURN CODE
         ORG   *-1
RC       DC    X'00'              RETURN CODE
         SPACE
BYEBYE   LA    R1,0(,R13)         COPY AND PURIFY WORKAREA ADDRESS
         L     R13,4(,R13)        -> OS SAVE AREA
         LA    R0,WORKLEN         SIZE OF WORKAREA
         SVC   10                 FREE WORKAREA
         SPACE
         L     R14,12(,R13)       RESTORE REGISTER 14
         LM    R0,R12,20(R13)     AND THE REST TOO
         BR    R14                BYE...
         SPACE 2
NODD     MVI   RC,8               RETURN CODE OF 8, DD STMT MISSING
         B     BYEBYE
         EJECT
*
*     EXECUTED INSTRUCTIONS
*
         SPACE
MVC      MVC   *-*(*-*,R7),PRNTCHAR
         SPACE 3
CMDS     EQU   *
         OI    FLAGS,B'01'        ULINE
         NI    FLAGS,B'10'        NLINE
         OI    FLAGS,B'10'        LCASE
         NI    FLAGS,B'01'        UCASE
         BAL   R5,NEWPAGE         EJECT
#CMDS    EQU   (*-CMDS)/4
         SPACE 5
*
*     CONSTANTS
*
         SPACE
HW6      DC    H'6'
MASK     DC    2X'7F'
BASES    DC    4A((*-BASES+4)*1024+CHARGEN)
HHH      DC    C'HHH'
         SPACE 3
CMDNAMES EQU   *
         DC    C'EJECT'
         DC    C'UCASE'
         DC    C'LCASE'
         DC    C'NLINE'
         DC    C'ULINE'
         EJECT
*
*     DATA CONTROL BLOCKS
*
         SPACE
         PRINT NOGEN
         SPACE 3
IN       DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=EOJ,LRECL=80
         SPACE 3
OUT      DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,BLKSIZE=133,X
               RECFM=FBA
         SPACE 5
*
*     DSECT DEFINITION
*
         SPACE
WORKAREA DSECT
         DS    18F
CARD     DS    2CL80
PRNTCHAR DS    CL132
OUTLINE  DS    CL133
FILLER   DS    CL133
PATTERN  DS    CL2
FLAGS    DS    X
BLANKS   DS    CL256
WORKLEN  EQU   *-WORKAREA
         SPACE 2
CHARGEN  CSECT
         EJECT
*
*     CHARACTER PATTERNS ARE LOCATED AS FOLLOWS:
*        THE CHARACTER IN THE INPUT BUFFER IS MODIFIED BY IMPLICIT
*        (DEFAULT), AND EXPLICIT ("^") CASE CONVERSION. THEN THE CHAR-
*        ACTER IS USED AS A SEARCH ARGUEMENT IN THE VARIABLE "@@" BY A
*        "TRT" INSTRUCTION. A VALID SEARCH ARGUEMENT RETURNS A NON-
*        ZERO CONDITION CODE, AND A FUNCTION BYTE WHICH IS MULTIPLIED
*        BY 2, AND BECOMES THE OFFSET IN "ADDRLIST(-2)" OF THE S-CON
*        FOR THE DESIRED CHARACTER'S PATTERN. THE S-CON IS INSERTED
*        INTO A "LA" INSTRUCTION, AND YOU CAN QUESS THE REST. IF THE
*        SEARCH ARGUEMENT IS NOT FOUND IN "@@" BY THE "TRT" INSTRUCTION
*        (CONDITION CODE IS 0), CHARGEN IGNORES THE CHARACTER, AND
*        CONTINUES PROCESSING WITH THE NEXT CHARACTER IN THE INPUT BUF-
*        FER. IF ANY SEARCH ARGUEMENTS HAVE BEEN FOUND TO BE INVALID,
*        CHARGEN WILL FLAG THIS WITH A RETURN CODE OF 4 AT TERMINATION.
*        IF NO INPUT ERRORS ARE DETECTED, THE RETURN CODE WILL BE ZERO.
*
         SPACE 5
ADDRLIST DC    S($ARROWL,$BRACEL,$VERTBAR,$RABBIT,$ASTRSK2,$BRACER)
         DC    S($NOT,$UNSLASH,$ARROWR,$NTEQUAL,$QUOTER,$BLANK,$CENT)
         DC    S($PERIOD,$LESS,$PARENL,$PLUS,$AMPRSND,$EXCLMPT,$DOLLAR)
         DC    S($ASTRSK,$PARENR,$SEMICOL,$HYPHEN,$SLASH,$COMMA)
         DC    S($PERCENT,$GREATER,$QUESTMK,$COLON,$NUMBER,$APIECE)
         DC    S($APOST,$EQUAL,$QUOTEL,@A,@B,@C,@D,@E,@F,@G,@H,@I,@J)
         DC    S(@K,@L,@M,@N,@O,@P,@Q,@R,@S,@T,@U,@V,@W,@X,@Y,@Z,@AA)
         DC    S(@BB,@CC,@DD,@EE,@FF,@GG,@HH,@II,@JJ,@KK,@LL,@MM,@NN)
         DC    S(@OO,@PP,@QQ,@RR,@SS,@TT,@UU,@VV,@WW,@XX,@YY,@ZZ,#0,#1)
         DC    S(#2,#3,#4,#5,#6,#7,#8,#9)
         SPACE 5
@@       DC    X'0000000000000000000000000102000300000000000000000000'
         DC    X'0004050600070008000000000000000000000000090000000000'
         DC    X'000000000000000000000A0B0C0000000000000000000D0E0F10'
         DC    X'1100120000000000000000001314151617001819000000000000'
         DC    X'0000001A1B001C1D000000000000000000001E1F202122230024'
         DC    X'25262728292A2B2C000000000000002D2E2F3031323334350000'
         DC    X'000000000000363738393A3B3C3D000000000000000000000000'
         DC    X'00000000000000000000003E3F40414243444546000000000000'
         DC    X'004748494A4B4C4D4E4F00000000000000005051525354555657'
         DC    X'00000000000058595A5B5C5D5E5F6061000000000000'
         EJECT
*
*     PATTERN FORMAT
*     ------- ------
*     EACH PATTERN CONTAINS THE FOLLOWING:
*        1) THE FIRST BYTE IS THE CHARACTER TO BE USED IN CONSTRUCTING
*           THE OUTPUT, WHEN IN NORMAL-IMAGE MODE. (IE: "A" IS THE
*           FIRST BYTE IN THE PATTERN FOR THE LETTER "A", SO THE LETTER
*           "A" WILL BE BUILT FROM THE EBCDIC CHARACTER "A".)
*        2) THE REMAINDER OF EACH PATTERN CONSISTS OF A VARIABLE NUMBER
*           OF TWO-BYTE ELEMENTS:
*
*                       BIT 0                        BITS 1-7
*     BYTE 1 "ON" INDICATES THAT THIS      THE OFFSET FROM THE ADDRESS
*            ELEMENT IS THE LAST ELEMENT   IN R7 WHERE THE RESULT OF
*            FOR THE CURRENT OUTPUT LINE.  THIS ELEMENT IS TO BE PLACED
*                                          (NOTE: IF THE OFFSET IS 0,
*                                          AND BIT 0 IS "ON", THE CUR-
*                                          RENT LINE WILL BE PRINTED,
*                                          WITHOUT CHECKING THE LENGTH
*                                          IN THE SECOND BYTE OF THE
*                                          ELEMENT).
*
*     BYTE 2 "ON" INDICATES THAT THIS      THE "LENGTH-1" (IN BYTES) OF
*            ELEMENT IS THE LAST ELEMENT   THE SEGMENT OF THE OUTPUT
*            IN THE PATTERN FOR THE CUR-   LINE GENERATED BY THIS ELE-
*            RENT CHARACTER.               MENT. (IE: A VALUE OF 25
*                                          GENERATES A SEGMENT 26 BYTES
*                                          LONG, AND A VALUE OF ZERO,
*                                          GENERATES 1 BYTE.)
*
         EJECT
*
*     PATTERNS FOR SPECIAL CHARACTERS CREATED VIA "^"
*
         SPACE
$ARROWL  DC    X'4CCD00CC02CB04CA06C908C80AC70CC60EC510C412C314C216C1'
         DC    X'18CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'
         DC    X'04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB84'
         SPACE
$BRACEL  DC    X'C2CC01CC01CB03CA05C909C60DC0193813CE133019D019291DD3'
         DC    X'1D241ADB1A2212E5122107F1072004F5041F03F7031F02F8021F'
         DC    X'01F9011F01F9011F00FA001F00FA80'
         SPACE
$VERTBAR DC    X'C8A451A451A451A4D1'
         SPACE
$RABBIT  DC    X'D7E904E706E409E20AE00CDE0D4003DC0E3E08DB0F3C0CD9103B'
         DC    X'0ED8103A10D7103913D6102B073913D5102B063815D4102C0538'
         DC    X'0D4A04D40F2D033204380D4A04D30F2D0332134A04D30E2D0332'
         DC    X'1DD20E2C04331CD20C2B06331CD10C2A08351BD10BB427B5242D'
         DC    X'02B1252D02B1232D03B2202D03B21F2E03B3272E03B32B2E03B4'
         DC    X'2D2F02B42F2F03B53030023517CE193614CF193810D1193E07D2'
         DC    X'19D617D915DD12E28D'
         SPACE
$ASTRSK2 DC    X'C1CA05C809C70BC60DC50FC50FC411C313C313C313C313C3132F'
         DC    X'094313E1092D0E4313DE0E2C124313DB122B154411D9152B1644'
         DC    X'11D8162B17450FD7172B18460DD6182C18460DD518AC41AD3FAE'
         DC    X'3DAF3BB039B235B431B72BBA25C019BA25B72BB431B235B039AF'
         DC    X'3BAE3DAD3FAC412C18460DD5182B18460DD6182B17450FD7172B'
         DC    X'164411D8162B154411D9152C124313DB122D0E4313DE0E2F0943'
         DC    X'13E109C313C313C313C313C313C411C411C50FC50FC60DC70BC8'
         DC    X'09CA85'
         SPACE
$BRACER  DC    X'C21F00FA001F00FA001F01F9011F01F9011F02F8021F03F70320'
         DC    X'04F5042107F1072212E512241ADB1A291DD31D3019D0193813CE'
         DC    X'13C019C60DC909CA05CB03CC01CC81'
         SPACE
$NOT     DC    X'C8CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'
         DC    X'04CB04CB04CB04CB04CB04CB04CB04BD12BD12BD12BD92'
         SPACE
$UNSLASH DC    X'E2F802F406F00AEC0CE80CE40CE00CDC0CD80DD40DD00BCC0DC9'
         DC    X'0CC50CC10CBE0CB90CB50DB10DAD0DAA0CA60CA30C9F0C9F089F'
         DC    X'059F81'
         SPACE
$ARROWR  DC    X'6ECB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'
         DC    X'04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04C118C2'
         DC    X'16C314C412C510C60EC70CC80AC908CA06CB04CC02CD80'
         SPACE
$NTEQUAL DC    X'D54604D0044604D00440004604D00440024604D00440034604D0'
         DC    X'04400AD0044109D0044307D0044505D0044606D0044608D004C6'
         DC    X'0E4604CC084604CD074604CF054604D0064604D0084604D00A46'
         DC    X'04D00A46045004D70346045004D9014604D0044604D0044604D0'
         DC    X'84'
         SPACE
$QUOTER  DC    X'D8F006EE0AED0C6100EC0E6202EA10E416E613E90FED09800080'
         DC    X'0080008000F006EE0AED0C6100EC0E6202EA10E416E613E90FED'
         DC    X'89'
         EJECT
*
*     PATTERNS FOR REGULAR SPECIAL CHARACTERS
*
         SPACE
$BLANK   DC    X'4080008000800080008000800080008000800080008000800080'
         DC    X'0080008000800080008000800080008000800080008000800080'
         DC    X'0080008000800080008080'
         SPACE
$CENT    DC    X'C3C312BE1CBC20BA24B828B62CB52E340DD70D3309DC092A0432'
         DC    X'07DE072A0EE0062A15E1052A1BE2052E1EE3043124E30431043E'
         DC    X'1FE3043104C6223104CC1F3203D41B3204DB143303E10E33045F'
         DC    X'06E9043404DD073504DB083605DB073805DC043A04DD01BC80'
         SPACE
$PERIOD  DC    X'D6A306A10AA00C9F0E9F0E9F0EA00CA10AA386'
         SPACE
$LESS    DC    X'4CCB04CB04CA06CA06C908C9084804CE044804CE044704CF0447'
         DC    X'04CF044604D0044604D0044504D1044504D1044404D2044404D2'
         DC    X'044304D3044304D3044204D4044204D4044104D5044104D50440'
         DC    X'04D6044004D684'
         SPACE
$PARENL  DC    X'D7BC21B72BB137AD3FAA452810E110250CE80C230AEC0A2108F0'
         DC    X'081F07F3071F02F882'
         SPACE
$PLUS    DC    X'D7CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04BE1EBE1EBE'
         DC    X'1EBE1ECB04CB04CB04CB04CB04CB04CB04CB04CB04CB84'
         SPACE
$AMPRSND DC    X'50B10BAD13AB18291DDD0D2820DA142624D8182526D51D240D3E'
         DC    X'0ED321230C410C510CEC09220B430A500BEF0721084513F10620'
         DC    X'074610F2062006480DF30520064A09F4051F064909F5051F0648'
         DC    X'0AF5051F06470CF5051F06460EF5051F0644084F05F5051F0643'
         DC    X'085006F5051F0642085106F5051F0641075206F40520053F0853'
         DC    X'06F30620063E085408F10721053C085509ED0A21063B08D62022'
         DC    X'073908D81D23083808DA1924093708DC15250B3508E10CA616A8'
         DC    X'13AA10AE11AD14AD132C08B60A2B08B9062A08BC02AB06AD02AE'
         DC    X'80'
         SPACE
$EXCLMPT DC    X'C52306DB14210ACB29200CC1361F0EB7421F0EB6441F0EB74220'
         DC    X'0CC136210ACB292306DB94'
         SPACE
$DOLLAR  DC    X'5B2C01DD0A2B02D9102A03D6152905D3192806D11E2708D02027'
         DC    X'07CF2226074E12EA0826074D11EC0725084D0FED0725074C0FEE'
         DC    X'0625074C0EEF059F5B9F5B9F5B9F5B2407490FF0052407480FF0'
         DC    X'052407480FF0052407470FF0059F5B9F5B9F5B9F5B25094410EE'
         DC    X'06250A4211ED06260A4012EC06270B3E13EC05280C3B15EA0628'
         DC    X'26EB042924EB032B22EC01AC1FAD1DAF1AB216B590'
         SPACE
$ASTRSK  DC    X'C1C603C505C407C309C309C20BC20BC20B3606420BD306350943'
         DC    X'09D109340C4309CF0C340D4407CE0D340E4407CD0EB525B623B7'
         DC    X'21B91DBB19C00FBB19B91DB721B623B525340E4407CD0E340D44'
         DC    X'07CE0D340C4309CF0C35094309D1093606420BD306C20BC20BC2'
         DC    X'0BC309C309C407C505C683'
         SPACE
$PARENR  DC    X'D71F02F8021F07F3072108F008230AEC0A250CE80C2810E110AA'
         DC    X'45AD3FB137B72BBCA1'
         SPACE
$SEMICOL DC    X'E22306CB06210AC90A200CC80C14001F0EC70E15021D10C70E17'
         DC    X'16C70E1913C80C1C0FC90A2009CB86'
         SPACE
$HYPHEN  DC    X'C8CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB'
         DC    X'04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB04CB84'
         SPACE
$SLASH   DC    X'E29F019F059F089F0CA30CA60CAA0CAD0DB10DB50DB90CBE0CC1'
         DC    X'0CC50CC90CCC0DD00BD40DD80DDC0CE00CE40CE80CEC0CF00AF4'
         DC    X'06F882'
         SPACE
$COMMA   DC    X'C3A306A10AA00C14009F0E15029D10971699139C0FA089'
         SPACE
$PERCENT DC    X'D7E208DF0EDC145A06EC065806EE065804F0045703F2035703F2'
         DC    X'035703F2035804F0041F015806EE061F055A06EC081F08DC181F'
         DC    X'0C5F0EF103230C6208F103260CF1032A0CF0032D0DF003310DF0'
         DC    X'03350DF003390CF0033E0CF003410CF003450CF003490CF1034C'
         DC    X'0DF103500BF103540DF203580DF2035C0CF203600CF303640CF4'
         DC    X'023408E811310EEC0D2E14F00A2C063E06F4062A064006F8022A'
         DC    X'04C2042903C4032903C4032903C4032A04C2042A06C0062C06BE'
         DC    X'06AE14B10EB488'
         SPACE
$GREATER DC    X'6ED6044004D6044004D5044104D5044104D4044204D4044204D3'
         DC    X'044304D3044304D2044404D2044404D1044504D1044504D00446'
         DC    X'04D0044604CF044704CF044704CE044804CE044804C908C908CA'
         DC    X'06CA06CB04CB84'
         SPACE
$QUESTMK DC    X'6FE407E20DE110E112E113E2136406EF07F106F30523063A05F4'
         DC    X'04210A370CF504200C3610F6031F0E3514F6041F0E3517F6041F'
         DC    X'0E3519F604200C351BF604210A360A470BF505230638054A0AF4'
         DC    X'064B0BF3074C0CF1094D0DEF0A4E10EB0ECF29D028D126D224D3'
         DC    X'22D51ED71AD916DD8E'
         SPACE
$COLON   DC    X'C32306CB06210AC90A200CC80C1F0EC70E1F0EC70E1F0EC70E20'
         DC    X'0CC80C210AC90A2306CB86'
         SPACE
$NUMBER  DC    X'7BBE04BE042803BE042807BE04280A3E04D7042A0C3E04D7042D'
         DC    X'0D3E04D7043111D704350DD704390CD7043E0CD7043E0FD7043E'
         DC    X'04450CD7043E04490CD7043E04CC0F3E04D00B3E04D40D3E04D7'
         DC    X'0E3E04D7113E045704E00C3E045704E40C3E045704E80828033E'
         DC    X'045704EC0428073E04D704280A3E04D7042A0C3E04D7042D0D3E'
         DC    X'04D7043111D704350DD704390CD7043E0BD7043E0ED7043E0445'
         DC    X'0CD7043E04490CD7043E04CC0F3E04D00B3E04D40D3E04D70E3E'
         DC    X'04D7113E045704E00C3E045704E40C3E045704E8085704EC04D7'
         DC    X'04D704D704D784'
         SPACE
$APIECE  DC    X'D6C30EBC1BB924B6293312CC14310FD30F300CDA0A2E0CDC0A2D'
         DC    X'0ADE0A2C09E1092C06E2082C05E3082B06450AE5072B06430FE6'
         DC    X'072B064313E7072B064216E8062A0642064E0CE9052A06410654'
         DC    X'07EA052A0641055506EB042A0641055606EB052A0542045705EC'
         DC    X'052A0542045805EC052A0542055805EC052A0543045904EC052B'
         DC    X'0444045A04EC052B0445035A04EC052B0446035A04EC052B0548'
         DC    X'045B03EC052C04470B5B03EC052C054618EC052C06421CEC042D'
         DC    X'0742084D10EB052E074107500CEB042F073F08EA0530083F06EA'
         DC    X'0432083F05E90533063F04E70634043F05E60636013F08E20941'
         DC    X'0ADC0EC227C325C71DCA14CA89'
         SPACE
$APOST   DC    X'C1F006EE0AED0C6100EC0E6202EA10E416E613E90FED89'
         SPACE
$EQUAL   DC    X'C54604D0044604D0044604D0044604D0044604D0044604D00446'
         DC    X'04D0044604D0044604D0044604D0044604D0044604D0044604D0'
         DC    X'044604D0044604D0044604D0044604D0044604D0044604D00446'
         DC    X'04D0044604D0044604D0044604D0044604D084'
         SPACE
$QUOTEL  DC    X'D8E509E30FE213E1166110F702610EFA00E20CE30AE506800080'
         DC    X'0080008000E509E30FE213E1166110F702610EFA00E20CE30AE5'
         DC    X'86'
         EJECT
*
*     PATTERNS FOR LOWER CASE ALPHABETIC CHARACTERS
*
         SPACE
@A       DC    X'C1AB08A710A5142318C805221AC60A211CC50D201EC50E200935'
         DC    X'09C50F1F083708C60E1F0738074804CF061F063906D0051F0639'
         DC    X'06D1041F063906D10420053905D10420053905D00521053805CF'
         DC    X'0622053705CE0723063506CB09A430A231A131A0319F319F2F9F'
         DC    X'2D9F299F069F049F039F82'
         SPACE
@B       DC    X'C21F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B26'
         DC    X'05C9052405CB052205CD052105CE052005CF052004D0041F05D0'
         DC    X'051F05D0051F05D0051F06CF061F07CE072008CC08200BC90B21'
         DC    X'0FC40FA230A32EA42CA628A824AB1EAF96'
         SPACE
@C       DC    X'C3B112AC1CAA20A824A628A42CA32E220DC50D2109CA092107CC'
         DC    X'072006CE062005CF051F05D0051F04D1041F04D1041F04D1041F'
         DC    X'04D1041F04D1042003D0042004D0042103CF042104CD062204CB'
         DC    X'072304C9082405C9072605CA042804CB01AA80'
         SPACE
@D       DC    X'C4AF16AB1EA824A628A42CA32EA230210FC40F200BC90B2008CC'
         DC    X'081F07CE071F06CF061F05D0051F05D0051F05D0052004D00420'
         DC    X'05CF052105CE052205CD0524054B05F60426054905F6049F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B9F5B9F5B9F049F84'
         SPACE
@E       DC    X'C5B112AC1CAA20A824A628A42CA32E220D3804C50D21093804CA'
         DC    X'0921073804CC0720063804CE0620053804CF051F053804D0051F'
         DC    X'043804D1041F043804D1041F043804D1041F043804D1041F0438'
         DC    X'04D00520033804CF0520043804CE0621033804CC0721043804CA'
         DC    X'0922043804C50D2304B8192405B8182605B8162804B8142A00B8'
         DC    X'12B810B88B'
         SPACE
@F       DC    X'C6D1041F04D1041F04D1049F4E9F529F559F579F589F599F5A9F'
         DC    X'5A1F045104F4061F045104F60451046A06F6045104680AF50551'
         DC    X'04E7135104E613E613E612E710E80CEA86'
         SPACE
@G       DC    X'C70D0ABC0B0A10B8130814B617070718052106B41B05071A10B3'
         DC    X'1D04061C10B21F03061D10B12102061C12B02302061C1FC80C01'
         DC    X'061B0F2D0ACC0801061A0E2E07CE0701061A0D2E05D005010619'
         DC    X'0E2E04D1040106190D2E04D1040106180E2E04D1040106180D2E'
         DC    X'04D1040107170D2E05D0050107160E2E07CE070207160D2F08CC'
         DC    X'080208150D2F0CC80C020A130FB023031EB121041DB220051BB3'
         DC    X'1F0619341B5102D704081536175103D6060A113813D10C0D0C3C'
         DC    X'0BD20BD30AD507D784'
         SPACE
@H       DC    X'C81F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B1F'
         DC    X'04C9051F04CB05CC05CD05CD06CE06CE06CE07CE07CD081F04CC'
         DC    X'091F04C90C9F369F359F359F349F339F319F2E9F2A9F049F84'
         SPACE
@I       DC    X'C91F04D1041F045104E5061F36E30A1F36E20C1F36E10E1F36E1'
         DC    X'0E1F36E10E1F36E20C1F36E30A1F36E5069F049F84'
         SPACE
@J       DC    X'D18806850B840D830E820F820F01048709010488068104810481'
         DC    X'050205D10402075104E5060352E30A0451E20C0550E10E064FE1'
         DC    X'0E084DE10E0B4AE20C0F46E30A1441E586'
         SPACE
@K       DC    X'D21F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B1F'
         DC    X'04BA091F04B80CB511B314B118AF1B2D15C6062A164706D1041F'
         DC    X'0428154906D1041F042516CA0B1F1ACC091F17CD081F15CF061F'
         DC    X'13D0051F10D1041F0ED1049F0C9F0A9F079F059F049F84'
         SPACE
@L       DC    X'D31F04F6041F04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B9F'
         DC    X'049F84'
         SPACE
@M       DC    X'D41F04D1041F04D1049F369F369F369F369F369F369F369F361F'
         DC    X'04C9051F04CB05CC05CD051F04CC071F04CB099F369F369F369F'
         DC    X'369F359F349F339F301F04C9051F04CB05CC05CD051F04CC071F'
         DC    X'04CB099F369F369F369F369F359F349F339F309F049F84'
         SPACE
@N       DC    X'D51F04D1041F04D1049F369F369F369F369F369F369F369F361F'
         DC    X'04C9051F04CB05CC05CD05CD06CE06CE06CE07CE07CD081F04CC'
         DC    X'091F04C90C9F369F359F359F349F339F319F2E9F2A9F049F84'
         SPACE
@O       DC    X'D6B112AC1CAA20A824A628A42CA32E220DC50D2109CA092107CC'
         DC    X'072006CE062005CF051F05D0051F04D1041F04D1041F04D1041F'
         DC    X'04D1041F05D0052005CF052006CE062107CC072109CA09220DC5'
         DC    X'0DA32EA42CA628A824AA20AC1CB192'
         SPACE
@P       DC    X'D70104D1040104D1048154815481548154815481548154815426'
         DC    X'05C9052405CB052205CD052105CE052005CF052004D0041F05D0'
         DC    X'051F05D0051F05D0051F06CF061F07CE072008CC08200BC90B21'
         DC    X'0FC40FA230A32EA42CA628A824AB1EAF96'
         SPACE
@Q       DC    X'D8AF16AB1EA824A628A42CA32EA230210FC40F200BC90B2008CC'
         DC    X'081F07CE071F06CF061F05D0051F05D0051F05D0052004D00420'
         DC    X'05CF052105CE052205CD052405CB052605C90581548154815481'
         DC    X'5481548154815481540104D1040104D184'
         SPACE
@R       DC    X'D91F04D1041F04D1049F369F369F369F369F369F369F369F361F'
         DC    X'04C5061F04C706C807C907CA07CB07CB08CC08CC08C60FC411C3'
         DC    X'12C213C213C212C212C310C40DC688'
         SPACE
@S       DC    X'E21F0DC1081F0DBE0E1F0DBC121F0DBA162208B9182107B81A21'
         DC    X'06B71C20063610CE062005360ED0041F05350ED1041F05350DD1'
         DC    X'041F04350DD1041F04350CD1041F04340DD1041F04340DD1041F'
         DC    X'04330DD0051F04330DCF051F05320ECE062004320DCD06200531'
         DC    X'0ECC072105300ECA0821062E10C80D221BC80D231AC80D2418C8'
         DC    X'0DA614A810AC89'
         SPACE
@T       DC    X'E3D104D104D104AA38A63CA43EA240A141A0429F439F431F0BD1'
         DC    X'041F09D1041F08D1042007D104A006A105A205A404A783'
         SPACE
@U       DC    X'E4D104D104AB2AA72EA431A233A134A035A0359F369F0C9F099F'
         DC    X'089F079F07A006A006A106A205A3052405D1042605D1049F369F'
         DC    X'369F369F369F369F369F369F369F049F84'
         SPACE
@V       DC    X'E5D104D104CE07CB0AC70EC312BF16BC19B81DB421B0252D20D1'
         DC    X'042920D104A520A1219F1FA218A511A90CAD0CB10CB40DB80D3C'
         DC    X'0DD104400DD104C411C80DCB0ACF06D104D104D184'
         SPACE
@W       DC    X'E6D104D104CE07CB0AC70EC312BF16BC19B81DB421B0252D20D1'
         DC    X'042920D104A520A1219F1FA218A511A90CAD0CB00DAD14A91CA5'
         DC    X'1FA1209F1EA218A511A90CAD0CB10CB40DB80D3C0DD104400DD1'
         DC    X'04C411C80DCB0ACF06D104D104D184'
         SPACE
@X       DC    X'E71F04D1041F04D1041F04D0051F04CE071F06CB0A1F08C90C1F'
         DC    X'0BC60F1F0DC4111F042608C1141F042808BF162A08BC192C08BA'
         DC    X'1B2E083816D104301BD104B217B016AD17AB161F04A81B1F04A6'
         DC    X'1F1F1BBF081F19C1081F164308D1041F144508D1041F114708D1'
         DC    X'041F0FCA0B1F0CCC091F0ACE071F07D0051F05D1041F04D1041F'
         DC    X'04D184'
         SPACE
@Y       DC    X'E80505D1040309D104020BCE07010DCB0A010DC70E010DC31202'
         DC    X'0BBF160309BC19050BB81D080CB4210B0CB0250F0C2D20D10412'
         DC    X'0D2920D104160DA5209A289E20A218A511A90CAD0CB10CB40DB8'
         DC    X'0D3C0DD104400DD104C411C80DCB0ACF06D104D104D184'
         SPACE
@Z       DC    X'E91F01C80D1F03C80D1F06C80D1F09CC091F0BCE071F0ED0051F'
         DC    X'11D0051F13D1041F16D1041F19D1041F1BD1041F042518D1041F'
         DC    X'042719D1041F042A18D1041F042D18D1041F042F19D1041F0432'
         DC    X'19D1041F043518D1041F04B71E1F04BA1B1F04BC191F04BF161F'
         DC    X'04C2131F05C4111F05C70E1F07CA0B1F09CD081F0DCF061F0DD2'
         DC    X'031F0DD580'
         EJECT
*
*     PATTERNS FOR UPPER CASE ALPHABETIC CHARACTERS
*
         SPACE
@AA      DC    X'C19F049F049F049F049F059F089F0C9F101F04A60C1F04AA0C1F'
         DC    X'04AD0D1F04B10DB50DB90CBB0E3B04C10C3B04C50C3B04C90C3B'
         DC    X'04CC0D3B04D00B3B04D40D3B04D80D3B04DC0C3B04E00C3B04E1'
         DC    X'0F3B04DE163B04DA1E3B04D6243B04D2263B04CE263B04CA263B'
         DC    X'04C7253B04C325BB29BB25B7261F04B3261F04AF261F04AB261F'
         DC    X'04A7279F2B9F279F239F1F9F1B9F189F149F109F0C9F089F059F'
         DC    X'049F049F049F84'
         SPACE
@BB      DC    X'C21F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'
         DC    X'041F045104F6041F045104F6041F045104F6041F045104F6041F'
         DC    X'045104F6041F045104F6041F045104F6041F045105F5051F0550'
         DC    X'06F5051F055006F5051F064F08F40620064E09F40620074D0BF3'
         DC    X'0620084C0EF10821084B10F00921094A13EE0A220A4818EB0D22'
         DC    X'0D450CD4232310410FD521242BD61F2529D71D2627D9192725DB'
         DC    X'152921DE0F2B1DE109AE18B290'
         SPACE
@CC      DC    X'C3C019BA25B62DB333B039AE3DAC41AA45A8492719DD152515E2'
         DC    X'122412E70E2310EB0B220EED0A210CF008210AF206200AF30620'
         DC    X'08F4051F08F5051F07F5051F06F6041F06F6041F05F6041F05F6'
         DC    X'041F05F6042004F5052104F5042105F4052204F3052304F10624'
         DC    X'04EF072604EC092804E80C2A04E8122C04E8122E05E8123105E8'
         DC    X'12B481'
         SPACE
@DD      DC    X'C41F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F6041F'
         DC    X'04F6041F04F6041F04F6041F05F5051F05F5051F06F4061F06F4'
         DC    X'062006F3062007F2072107F1072108F0082209EE09220CEB0C23'
         DC    X'0DE90D240FE60F2513E1132618DB18A849A947AB43AD3FAF3BB2'
         DC    X'35B52FB927BE9D'
         SPACE
@EE      DC    X'C51F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'
         DC    X'041F045104F6041F045104F6041F045104F6041F045104F6041F'
         DC    X'045104F6041F045104F6041F045104F6041F045104F6041F0451'
         DC    X'04F6041F045006F6041F044E0AF6041F044A12F6041F044A12F6'
         DC    X'041F044A12F6041F044A12F6041F04F6041F04F6041F05F5051F'
         DC    X'05F5051F07F3071F08F2081F0BEF0B1F12E8121F12E8121F12E8'
         DC    X'121F12E892'
         SPACE
@FF      DC    X'C61F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'
         DC    X'041F045104F6045104F6045104F6045104F6045104F6045104F6'
         DC    X'045104F6045104F6045104F6045006F6044E0AF6044A12F6044A'
         DC    X'12F6044A12F6044A12F604F604F604F505F505F307F208EF0BE8'
         DC    X'12E812E812E892'
         SPACE
@GG      DC    X'C7C019BA25B62DB333B039AE3DAC41AA45A8492719DD152515E2'
         DC    X'122412E70E2310EB0B220EED0A210CF008210AF206200AF30620'
         DC    X'08F4051F08F5051F07F5051F06F6041F06F6041F05F6041F05F6'
         DC    X'041F05F6041F054C04F50520054C04F50420064C04F40521074C'
         DC    X'04F30521094C04F106220B4C04EF07230F4C04EC09242CE80C25'
         DC    X'2BE8122729E8122828E8122A26E812AD23B11FB51BBE92'
         SPACE
@HH      DC    X'C81F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'
         DC    X'041F045104F604D104D104D104D104D104D104D104D104D104D1'
         DC    X'04D104D1041F045104F6041F045104F6041F045104F6041F0451'
         DC    X'04F6049F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B9F5B1F04F6041F'
         DC    X'04F6041F04F6041F04F684'
         SPACE
@II      DC    X'C91F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F684'
         SPACE
@JJ      DC    X'D1AD07A90DA611A414A316A217A118A1172006AA0D2005AB0B1F'
         DC    X'05AD079F049F049F049F049F059F05A0052006F6042008F60421'
         DC    X'09F604220BF604A357A456A555A654A753A951AB4FAE4CB347F6'
         DC    X'04F604F604F684'
         SPACE
@KK      DC    X'D21F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F044D08F6041F044A0DF6041F044712F6'
         DC    X'041F044417F604C21ABF1FBC23391DDA07361DDC07331DDE0730'
         DC    X'1DE0061F042E1DE1071F042B1DE3071F04281EE5061F04251EE6'
         DC    X'071F216807F6041F1E6A06F6041F1B6B07F6041F196D07F6041F'
         DC    X'16EF0B1F13F00A1F10F2081F0DF4061F0BF5051F08F6041F05F6'
         DC    X'041F04F6041F04F6049F049F84'
         SPACE
@LL      DC    X'D31F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F6049F'
         DC    X'049F049F049F049F049F049F049F049F049F049F049F049F049F'
         DC    X'049F049F049F059F059F079F089F0B9F129F129F129F92'
         SPACE
@MM      DC    X'D41F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B1F'
         DC    X'04E8121F04E2181F04DD1D1F04D822D228CD2DC731C231BD31B8'
         DC    X'31B330AD31A830A2319F2FA325A91AAF13B513BB13C113C713CD'
         DC    X'13D3131F04D9121F04DF121F04E5121F04EB0F9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F6'
         DC    X'84'
         SPACE
@NN      DC    X'D51F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B1F'
         DC    X'04EC0E1F04E9111F04E6141F04E416E119DE1CDC1CD91DD61DD3'
         DC    X'1DD01DCD1DCB1DC81DC51DC21DBF1DBD1DBA1DB71DB41DB21CAF'
         DC    X'1DAC1D291DF604261DF604241DF604211DF6049F5B9F5B9F5B9F'
         DC    X'5BF604F604F604F684'
         SPACE
@OO      DC    X'D6C019BA25B62DB333B039AE3DAC41AA45A8492715DD152512E2'
         DC    X'12240EE70E230BEB0B220AED0A2108F0082106F2062006F30620'
         DC    X'05F4051F05F5051F05F5051F04F6041F04F6041F04F6041F04F6'
         DC    X'041F05F5051F05F5052005F4052006F3052106F2062108F00822'
         DC    X'0AED0A230BEB0B240EE70E2512E2122715DD15A849AA45AC41AE'
         DC    X'3DB039B333B62DBA25C099'
         SPACE
@PP      DC    X'D71F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F045104F6041F045104F6041F045104F6'
         DC    X'041F045104F6045104F6045104F6045104F6045104F6045104F6'
         DC    X'045104F6045105F5055105F5055105F5055106F4065106F40652'
         DC    X'06F3065208F1085209F009530AEE0A530DEB0DD423D521D61FD7'
         DC    X'1DD919DB15DE0FE189'
         SPACE
@QQ      DC    X'D8C019BA25B62DB333B039AE3DAC41AA45A8492715DD152512E2'
         DC    X'12240EE70E230BEB0B220AED0A2108F0082106F2062006F30620'
         DC    X'05F4051F05F5051F05F5051F042802F6041F042904F6041F042A'
         DC    X'05F6041F042A06F6041F052908F5051F05280AF5052005270BF4'
         DC    X'052012F3062111F2062110F206220FED0A220EEB0B2111E70E20'
         DC    X'17E212201CDD159F529F501F0BAC411F0AAE3D2008B0392106B3'
         DC    X'332205B62D2404BA252702C099'
         SPACE
@RR      DC    X'D91F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F044D08F6041F044A0BF6041F04470EF6'
         DC    X'041F044411F6044213F6043F16F6043C19F604391CF604361FF6'
         DC    X'043322F604301D5105F5051F042E1D5105F5051F042B1D5105F5'
         DC    X'051F04281E5106F4061F04251E5106F4061F215206F3061F1E52'
         DC    X'08F1081F1B5209F0091F19530AEE0A1F16530DEB0D1F13D4231F'
         DC    X'10D5211F0DD61F1F0BD71D1F08D9191F05DB151F04DE0F1F04E1'
         DC    X'099F049F84'
         SPACE
@SS      DC    X'E29F129F121F12DA0F1F12D617230BD41B2309D21F2208D02322'
         DC    X'064F10EB0921064E0FEE0721054D0EF00620054C0EF20520044B'
         DC    X'0FF30520044B0EF4041F044A0FF5041F044A0EF5041F044A0EF6'
         DC    X'041F04490FF6041F04490FF6041F04480FF6041F04480FF6041F'
         DC    X'04470FF6041F05470FF6041F05460FF5051F064510F405200644'
         DC    X'10F30620074311F20621074112F00821083F13EE0922093D14EC'
         DC    X'0A230B3A16E80D242BE8122529E8122726E8122823E812AA1FAC'
         DC    X'1BAF16B28E'
         SPACE
@TT      DC    X'E3E812E812E812E812EF0BF208F307F505F505F604F604F604F6'
         DC    X'041F04F6041F04F6041F04F6041F04F6049F5B9F5B9F5B9F5B9F'
         DC    X'5B9F5B9F5B9F5B9F5B1F04F6041F04F6041F04F6041F04F604F6'
         DC    X'04F604F604F604F505F505F307F208EF0BE812E812E812E892'
         SPACE
@UU      DC    X'E4F604F604F604F604B941B347AF4BAD4DAB4FA951A753A555A4'
         DC    X'562314F6042211F604210FF604210DF604A00CA00AA0099F099F'
         DC    X'089F089F079F079F079F07A006A006A007A106A107A207A307A4'
         DC    X'082509F6042709F604290AF6042B0CF604AD4DAF4BB347B941F6'
         DC    X'04F604F604F684'
         SPACE
@VV      DC    X'E5F604F604F604F604F406EF0BEA10E614E119DD1DD822D426CF'
         DC    X'2BCB2F472AF604422AF6043D2BF604B92AB42AAF2BAB2BA62CA2'
         DC    X'2B9F2AA222A719AB10B00FB50FBA0FBE10C310C810CD10D11056'
         DC    X'10F6045B10F6046010F604E515EA10EF0BF307F604F604F604F6'
         DC    X'84'
         SPACE
@WW      DC    X'E6F604F604F604F604F406EF0BEA10E614E119DD1DD822D426CF'
         DC    X'2BCB2F472AF604422AF6043D2BF604B92AB42AAF2BAB2BA62CA2'
         DC    X'2B9F2AA222A719AB10B00FB50FBA0FBE10C211BD1BB924B42AAF'
         DC    X'2BAB2BA62CA22B9F2AA222A719AB10B00FB50FBA0FBE10C310C8'
         DC    X'10CD10D1105610F6045B10F6046010F604E515EA10EF0BF307F6'
         DC    X'04F604F604F684'
         SPACE
@XX      DC    X'E71F04F6041F04F6041F04F6041F04F6041F04F4061F04F1091F'
         DC    X'06EE0C1F09EB0F1F0BE8121F0EE5151F042709E3171F04290AE0'
         DC    X'1A1F042C09DD1D2F09DA203208571CF6043409541CF604370951'
         DC    X'1CF6043A084E1CF6043C09CB1CBF26C121C31CC01CBD1CBA1CB7'
         DC    X'21B427311DD4091F042E1DD7091F042B1DDA091F04281DDD081F'
         DC    X'04251DDF091F20E2091F1D6508F6041F1A6808F6041F176A09F6'
         DC    X'041F14ED0D1F12F00A1F0FF2081F0CF5051F09F6041F06F6041F'
         DC    X'04F6041F04F6041F04F6041F04F684'
         SPACE
@YY      DC    X'E8F604F604F604F604F307F00AED0DEA10E713E416E119DE1CDB'
         DC    X'1FD822551EF6041F04521EF6041F044F1EF6041F044C1EF6041F'
         DC    X'04C91E9F459F429F3F9F3C9F399F369F339F309F331F04CA0C1F'
         DC    X'04CD0C1F04D10C1F04D40CD80C5B0CF6045F0BF604620CF60466'
         DC    X'0CF604E911ED0DF00AF406F604F604F604F604F684'
         SPACE
@ZZ      DC    X'E91F01E8121F04E8121F07E8121F09E8121F0CEF0B1F0FF2081F'
         DC    X'12F3071F15F5051F18F5051F1BF6041F1EF6041F21F6041F0426'
         DC    X'1CF6041F04291CF6041F042B1DF6041F042E1DF6041F04311DF6'
         DC    X'041F04341DF6041F04371DF6041F043A1DF6041F043C1EF6041F'
         DC    X'043F1EF6041F04421EF6041F04451EF6041F04481EF6041F044B'
         DC    X'1EF6041F044E1EF6041F04511EF6041F04541EF6041F04D7231F'
         DC    X'04DA201F04DC1E1F04DF1B1F05E2181F05E5151F07E8121F08EB'
         DC    X'0F1F0BEE0C1F12F1091F12F4061F12F6041F12F981'
         EJECT
*
*     PATTERNS FOR NUMERIC CHARACTERS
*
         SPACE
#0       DC    X'F0BD1FB62DB235AF3BAC41AA45A849A64DA54F240FE60F230BEB'
         DC    X'0B2209EE092107F1072006F3062005F4051F05F5051F04F6041F'
         DC    X'04F6041F04F6041F04F6041F05F5052005F4052006F3062107F1'
         DC    X'072209EE09230BEB0B240FE60FA54FA64DA849AA45AC41AF3BB2'
         DC    X'35B62DBD9F'
         SPACE
#1       DC    X'F11F04E5001F04E5011F04E5031F04E5059F4C9F4E9F509F529F'
         DC    X'539F559F579F599F5B9F049F049F049F84'
         SPACE
#2       DC    X'F29F039F071F0AF2001F0DF1021F10F1031F12F0051F15F0061F'
         DC    X'17F1061F0E3008F2061F0E3208F3051F0E3408F4051F0E3608F5'
         DC    X'041F0E3808F5051F0E3909F6041F0E3A09F6041F0E3B0AF6041F'
         DC    X'0E3C0AF6041F0E3D0BF6041F0E3E0BF5051F0E3F0BF5051F0E40'
         DC    X'0CF4061F0E410DF3071F0E420DF2081F0E420FF0091F0E4310EE'
         DC    X'0B1F0E4411EC0C1F0E4514E8101F0EC6311F0EC72F1F0EC82D1F'
         DC    X'0ECA2A1F0FCC26220CCE22250AD01E2906D3172D03D70FB081'
         SPACE
#3       DC    X'F3A7032605F0012507F0022409EF052308EF062207EE082107EF'
         DC    X'082106F1072006F2062005F3061F05F4051F05F5041F04F6041F'
         DC    X'04F6041F04F6041F045100F6041F045002F6041F054F04F6041F'
         DC    X'054E06F5051F064D08F4061F074C0BF3061F084A0FF108200948'
         DC    X'13EF09200B451AEC0C210D420ED32421103E11D422222CD52023'
         DC    X'2AD61E2428D81B2526DA172722DD11291EE00BAB1AAE14B28B'
         SPACE
#4       DC    X'F4B201B204B206B208B20AB20CB20EB211B213B215B217320EC2'
         DC    X'09320EC409320EC609320EC80A320ECB09320ECD09320ECF0932'
         DC    X'0ED109320ED309320ED5091F04320ED70A1F04320EDA091F0432'
         DC    X'0EDC091F04320EDE099F4A9F4C9F4E9F519F539F559F579F599F'
         DC    X'5B1F04B20E1F04B20E1F04B20E1F04B28E'
         SPACE
#5       DC    X'F5A6012503CE032405CF0B2307CF152207D01D2107D026210651'
         DC    X'04DD1D20065105E71320055106EC0E20045205EC0E1F055206EC'
         DC    X'0E1F045206EC0E1F045206EC0E1F045207EC0E1F045108EC0E1F'
         DC    X'045108EC0E1F055108EC0E1F055009EC0E20055009EC0E20064F'
         DC    X'0AEC0E21064D0BEC0E21084B0DEC0E220A4810EC0E220F4413EC'
         DC    X'0E2333EC0E2431EC0E252FEC0E262DEC0E2829EC0E2A25EC0E2D'
         DC    X'20EC0E3019F00A3410F406F882'
         SPACE
#6       DC    X'F6B927B431B039AD3FAB43A947A74BA64DA45123104B05E61022'
         DC    X'0B4D05EC0B21094E05EF0921075004F10720065104F306200552'
         DC    X'04F4051F055304F5051F045304F5051F045305F6041F045305F6'
         DC    X'041F045305F6041F055305F60420055206F60420065107F60421'
         DC    X'075008F60421094E09F505220B4C0BF50423104511F4052431F3'
         DC    X'05262EF205272CF1062929F1052B25F2032D21F301B01BB491'
         SPACE
#7       DC    X'F7E802E806E909EA0CEB0FEC0EEC0EEC0EEC0EEC0EEC0EEC0EEC'
         DC    X'0E1F11EC0E1F19EC0E1F1FEC0E1F25EC0E1F2AEC0E1F2EEC0E1F'
         DC    X'32EC0E1F36EC0E1F3AEC0E1F3DEC0E411EEC0E4B17EC0E5212EC'
         DC    X'0E5710EC0E5C0EEC0EE119E515E911EC0EF00AF307F604F981'
         SPACE
#8       DC    X'F8B10DAD15AB1A291EDD0C2722D9142525D7192427D51D230D40'
         DC    X'0CD321220B4409D12421094707D0262107C92E20064B16ED0B20'
         DC    X'054C13F0091F054C11F2071F054B10F3061F044A10F4061F0449'
         DC    X'10F5051F04490FF6041F044810F6041F054710F6041F05470FF6'
         DC    X'041F06460FF5051F074511F40520084413F30620094216F20621'
         DC    X'0B401BEF09210E3D155509EB0C222FD620232DD71E242BD91A25'
         DC    X'28DB162724DE112920E10AAB1CAD17B18F'
         SPACE
#9       DC    X'F9D411CE1B2501CB212403C9252305C7292206C62C2205C52E21'
         DC    X'05C43120054311E6102004420BEC0B1F054209EF091F044108F1'
         DC    X'071F044107F3061F044106F4051F044105F5051F044105F6041F'
         DC    X'044105F6041F044105F6041F054204F6041F054204F505200543'
         DC    X'04F40520064404F30621074504F10721094605EF09220B4705EC'
         DC    X'0B23104905E610A451A64DA74BA947AB43AD3FB039B431B9A7'
         END
/*
