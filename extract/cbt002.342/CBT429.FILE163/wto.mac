//WTO      JOB
//*
//*  WTO WRITES A NON-DELETABLE MESSAGE ON THE OPERATOR'S CONSOLE.
//*
//*  INSTALLATION -
//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS
//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE
//*    COMMAND NAME YOU WILL HAVE TO CHANGE THE HELP TEXT
//*    AND THE SYSLMOD DD STATEMENT ACCORDINGLY.
//*
//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS
//             LIB='SYS1.CMDLIB',    <=== TARGET LOAD LIBRARY
//             HELP='SYS1.HELP',     <=== HELP LIBRARY
//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS
//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER
//             ALIB='SYS1.LINKLIB',  <=== LOCATION OF YOUR ASSEMBLER
//             SMPMTS='SYS1.SMPMTS', <=== SMPMTS DATASET NAME
//             MACLIB='SYS1.MACLIB'  <=== MACLIB DATASET NAME
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  DSN=&HELP,DISP=SHR
//SYSUT2   DD  DSN=&HELP,DISP=SHR
//*
//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'
//STEPLIB  DD  DSN=&ALIB,DISP=SHR
//SYSTERM  DD  SYSOUT=&SOUT
//SYSPRINT DD  SYSOUT=&SOUT
//SYSLIB   DD  DSN=&SMPMTS,DISP=SHR
//         DD  DSN=&MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,15)
//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,15)
//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,15)
//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),
//             SPACE=(TRK,5,RLSE)
//*
//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,RENT,REUS,REFR'
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)
//SYSLMOD  DD  DSN=&LIB(WTO),DISP=SHR
//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)
//        PEND
//*
//        EXEC INSTALL
//IEBUPDTE.SYSIN DD *
./         ADD    NAME=WTO,LIST=ALL
./         NUMBER NEW1=1000,INCR=1000
)F FUNCTION -
  THE 'WTO' COMMAND SENDS A MESSAGE TO THE OPERATOR CONSOLE.

  IT DIFFERS FROM THE 'SEND' COMMAND IN THAT THE TEXT OF THE
  MESSAGE IS HIGH-LIGHTED AND WILL NOT ROLL OFF THE SCREEN.
  IT USES THE EQUIVALENT OF ROUTCDE=(2),DESC=(2).

  EXAMPLE ===>  WTO  'IS ANYONE THERE ?????? '

)X SYNTAX -
      WTO 'message'

   REQUIRED - MESSAGE
   DEFAULTS - NONE

)O OPERANDS -
   message        -  THE TEXT OF THE MESSAGE UP TO 114 CHARACTERS.
./        ENDUP
/*
//ASM.SYSIN DD *
         MACRO
         REGS
         LCLA  &A
.LOOP    ANOP
R&A      EQU   &A
&A       SETA  &A+1
         AIF   (&A LE 15).LOOP
         MEND
         SPACE 2
         REGS
LINK     EQU   R11
         SPACE 2
WTO      CSECT
         SAVE  (14,12),,WTO-&SYSDATE-&SYSTIME
         LR    R12,R15
         USING WTO,R12
         LR    R6,R1              SAVE PARM
         SPACE
         LA    R0,CORESIZE        SIZE OF CORE NEEDED
         GETMAIN R,LV=(0)         GET IT
         ST    R1,8(,R13)         ) CHAIN
         ST    R13,4(,R1)         ) SAVE
         LR    R13,R1             ) AREAS
         USING CORE,R13
         SPACE
         L     R4,0(,R6)          -> CBUF
         LH    R3,0(R4)           LENGTH OF CBUF
         LH    R2,2(R4)           OFFSET TO PARMS IN CBUF
         LA    R2,4(,R2)          ADJUST TO SAME SCALE AS LENGTH
         CR    R2,R3              PARAMETERS ???
         BL    HAVEPARM           YES
         SPACE
         LA    R1,NEEDMSG         "MESSAGE REQUIRED"
         LA    R0,L'NEEDMSG       LENGTH
         SVC   93                 ISSUE ERROR MSG
         LA    R2,20              RETURN CODE
         B     RETURN             QUIT
         SPACE
HAVEPARM SR    R3,R2              LENGTH OF PARAMETERS
         LA    R0,L'STR
         CR    R3,R0              > L'STR ?
         BNH   LENOK              NOPE
         LR    R3,R0              YES, SET TO L'STR
         LA    R1,TRUNCMSG        -> "MESSAGE TRUNCATED"
         LA    R0,L'TRUNCMSG      LENGTH
         SVC   93                 ISSUE ERROR MSG
LENOK    LA    R2,0(R2,R4)        -> START OF PARMS
         MVI   STR,C' '           BLANK OUT STRING BUFFER
         MVC   STR+1(L'STR-1),STR
         BCTR  R3,0               ADJUST FOR EX
         EX    R3,MVCSTR          COPY PARMS INTO STRING
*        MVC   STR(*-*),0(R2)
         SPACE
         MVC   MCSFLAGS,WTOLIST+2 FILL IN MCS FLAGS
         LA    R1,5(,R3)          COMPUTE LENGTH FOR WTO PARM
         STH   R1,WTOLEN
         LA    R1,WTOPARM(R1)     -> AREA FOR DESC CODES
         MVC   0(4,R1),WTOLIST+5  MOVE IN DESCRIPTOR CODES
         WTO   MF=(E,WTOPARM)     THIS'LL WAKE'EM UP
         SPACE
         MVC   STR(L'IDMSG),IDMSG "MSG ID IS"
         LR    R0,R1              COPY ID NUMBER
         LR    R2,R1              ALSO PASS BACK AS RETURN CODE
         LA    R1,STR+L'IDMSG     -> AREA FOR NUMBER
         BAL   LINK,INSRTNUM      CONVERT NUMBER TO CHAR
         LR    R0,R1              -> END OF MSG
         LA    R1,STR             -> START OF MSG
         SR    R0,R1              LENGTH
         SVC   93                 WRITE MSG
         SPACE 2
RETURN   LA    R1,CORE            -> GETMAINED AREA
         LA    R0,CORESIZE        LENGTH GETMAINED AREA
         L     R13,4(,R13)        -> OLD SAVE AREA
         SVC   10                 FREE WORK AREA
         LR    R15,R2             SET RETURN CODE
         RETURN (14,12),,RC=(15)  RETURN
         SPACE
MVCSTR   MVC   STR(*-*),0(R2)     MOVE STRING
         SPACE 2
*
*  INPUT -  R0 = BINARY NUMBER
*           R1 -> OUTPUT AREA
*  OUTPUT - NUMBER IS OUTPUT LEFT JUSTIFIED WITH LEADING MINUS SIGN
*           (IF NEGATIVE).  R0 WILL CONTAIN LENGTH OF CHAR NUMBER AND
*           R1 WILL POINT PAST THE NUMBER UPON RETURN.
*  NOTE   - A DECIMAL NUMBER MAY BE OUTPUT BY PLACING THE NUMBER IN
*           THE AREA "DBLWRD" AND USING "INSRTPAK" ENTRY.
*
INSRTNUM CVD   R0,DBLWRD          GET DECIMAL
INSRTPAK STM   R2,R3,28(R13)      SAVE WORK REGISTERS
         LR    R3,R1              PTR TO OUTPUT AREA
         SPACE
         MVC   EDITWK,EDITPAT     P'ZZZZZZZZZZZZZZ9'
         LA    R1,EDITWK+L'EDITWK-1   -> SIGNIFICANT DIGIT
         EDMK  EDITWK,DBLWRD      FORMAT NUMBER
         BNM   INSRTNTM           NO NEED TO ADD MINUS SIGN
         BCTR  R1,0               CHAR BEFORE SIG DIGIT
         MVI   0(R1),C'-'         LEADING MINUS SIGN
         SPACE
INSRTNTM LA    R2,EDITWK+L'EDITWK-1   -> LAST DIGIT
         SR    R2,R1              LENGTH TO MOVE - 1
         EX    R2,INSRTMVC        MOVE NUMBER TO OUTPUT AREA
         SPACE
         LA    R0,1(R2)           LENGTH OF NUMBER
         LA    R1,1(R2,R3)        -> PAST NUMBER
         SPACE
         LM    R2,R3,28(R13)      RESTORE REGISTERS
         BR    LINK               RETURN
         SPACE 2
INSRTMVC MVC   0(*-*,R3),0(R1)    LEFT JUSTIFY OUTPUT NUMBER
EDITPAT  DC    4X'202020',X'202120'  EDIT PATTERN
         SPACE 4
WTOLIST  WTO   ' ',ROUTCDE=1,DESC=2,MF=L
         SPACE
NEEDMSG  DC    C'A MESSAGE IS REQUIRED'
TRUNCMSG DC    C'MESSAGE HAS BEEN TRUNCATED TO 115 CHARACTERS'
IDMSG    DC    C'MESSAGE ID IS '
         SPACE 2
         LTORG
         SPACE 2
CORE     DSECT
         DS    18F                SAVE AREA
         SPACE
DBLWRD   DS    D
WTOPARM  DS    0F                 WTO PARM LIST
WTOLEN   DS    H                  LENGTH
MCSFLAGS DS    H                  MCS FLAGS
STR      DS    CL115              MESSAGE AREA
         DS    XL4                SPACE FOR ROUTE CODES
EDITWK   DS    CL15               FOR INSRTNUM SUBROUTINE
         SPACE
         DS    0D                 ROUND TO DOUBLE WORD BOUNDARY
CORESIZE EQU   *-CORE             LENGTH OF GETMAINED AREA
         SPACE
         END   WTO
/*
