//DOM      JOB
//*
//*  DOM DELETES A NON-DELETABLE MESSAGE FROM THE OPERATOR'S
//*  CONSOLE.  IT IS THE COUNTERPART TO THE WTO COMMAND,
//*  WHICH WRITES NON-DELETABLE MESSAGES TO BEGIN WITH.
//*
//*  INSTALLATION -
//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS
//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE
//*    COMMAND NAME YOU WILL HAVE TO CHANGE THE HELP TEXT
//*    ACCORDINGLY.
//*
//INSTALL PROC SOUT=$,               <=== SYSOUT CLASS
//             LIB='SYS1.CMDLIB',    <=== TARGET LOAD LIBRARY
//             MACLIB='SYS1.MACLIB', <=== MACRO LIBRARY DSNAME
//             HELP='SYS1.HELP',     <=== HELP LIBRARY
//             MBR=DOM,              <=== MEMBER NAME
//             SYSTS=SYSDA,          <=== UNITNAME FOR WORK DATASETS
//             ASMBLR=IEV90,         <=== NAME OF YOUR ASSEMBLER
//             ALIB='SYS1.LINKLIB'   <=== LOCATION OF YOUR ASSEMBLER
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  DSN=&HELP,DISP=SHR
//SYSUT2   DD  DSN=&HELP,DISP=SHR
//*
//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'
//STEPLIB  DD  DSN=&ALIB,DISP=SHR
//SYSTERM  DD  SYSOUT=&SOUT
//SYSPRINT DD  SYSOUT=&SOUT
//SYSLIB   DD  DSN=&MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,15)
//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,15)
//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,15)
//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),
//             SPACE=(TRK,5,RLSE)
//*
//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,RENT,REUS,REFR'
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)
//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR
//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)
//        PEND
//*
//        EXEC INSTALL
//IEBUPDTE.SYSIN DD *
./         ADD    NAME=DOM,LIST=ALL
./         NUMBER NEW1=1000,INCR=1000
)F FUNCTION -
  THE 'DOM' COMMAND DELETES A MESSAGE OFF THE OPERATOR'S CONSOLE.

  IT CAN BE USED TO GET RID OF MESSAGES THAT WERE PREVIOUSLY
  ISSUED BY THE 'WTO' COMMAND.

  EXAMPLE ===>  DOM  4568

)X SYNTAX -
      DOM 'message id'

   REQUIRED - MESSAGE ID
   DEFAULTS - NONE

)O OPERANDS -
   message id     -  IDENTIFIES THE MESSAGE TO BE DELETED.  THIS
                     VALUE IS RETURNED BY THE 'WTO' COMMAND.
./        ENDUP
/*
//ASM.SYSIN DD *
         MACRO
         REGS
         LCLA  &A
.LOOP    ANOP
R&A      EQU   &A
&A       SETA  &A+1
         AIF   (&A LE 15).LOOP
         MEND
         SPACE 2
         REGS
LINK     EQU   R11
         SPACE 2
DOM      CSECT
         SAVE  (14,12),,DOM-&SYSDATE-&SYSTIME
         LR    R12,R15
         USING DOM,R12
         LR    R6,R1              SAVE PARM
         SPACE
         LA    R0,CORESIZE        SIZE OF CORE NEEDED
         GETMAIN R,LV=(0)         GET IT
         ST    R1,8(,R13)         ) CHAIN
         ST    R13,4(,R1)         ) SAVE
         LR    R13,R1             ) AREAS
         USING CORE,R13
         SPACE
         L     R4,0(,R6)          -> CBUF
         LH    R3,0(R4)           LENGTH OF CBUF
         LH    R2,2(R4)           OFFSET TO PARMS IN CBUF
         LA    R2,4(,R2)          ADJUST TO SAME SCALE AS LENGTH
         CR    R2,R3              PARAMETERS ???
         BL    HAVEPARM           YES
         SPACE
         LA    R1,NEEDID          "MESSAGE ID REQUIRED"
         LA    R0,L'NEEDID        LENGTH
         SVC   93                 ISSUE ERROR MSG
         LA    R2,20              RETURN CODE
         B     RETURN             QUIT
         SPACE
HAVEPARM SR    R3,R2              LENGTH OF PARAMETERS
         LA    R0,L'STR
         CR    R3,R0              > L'STR ?
         BNH   LENOK              NOPE
         LR    R3,R0              YES, SET TO L'STR
         LA    R1,LARGEMSG        -> "MESSAGE TO LARGE"
         LA    R0,L'LARGEMSG      LENGTH
         SVC   93                 ISSUE ERROR MSG
         LA    R2,20              RETURN CODE
         B     RETURN             QUIT
LENOK    LA    R2,0(R2,R4)        -> START OF PARMS
         MVC   STR,ZEROS          FILL WITH ZEROS
         LA    R1,L'STR           LENGTH OF WHOLE FIELD
         SR    R1,R3              COMPUTE OFFSET INTO FIELD
         LA    R1,STR(R1)         SO THAT VALUE IS RIGHT JUSTIFIED
         BCTR  R3,0               ADJUST LENGTH FOR EX
         EX    R3,MVCPARM         COPY PARMS RIGHT JUSTIFIED
*        MVC   0(*-*,R1),0(R2)
         SPACE
         MVC   STRCPY,ZEROS       FILL COPY FIELD WITH C'0'
         OC    STRCPY,STR         FILL IN SUPPOSED NUMERICS
         CLC   STR,STRCPY         IS PARM NUMERIC ?
         BNE   STRNONUM           NO - ERROR
         TRT   STR,NUMCHECK       IS PARM NUMERIC ?
         BZ    STRNUM             YES - OK
         SPACE
STRNONUM LA    R1,BADSTR          "INVALID MSG ID"
         LA    R0,L'BADSTR        LENGTH
         SVC   93                 WRITE MSG
         LA    R2,20              RETURN CODE
         B     RETURN             QUIT
         SPACE
STRNUM   PACK  DBLWRD,STR         CONVERT STR TO PACKED DECIMAL
         CVB   R4,DBLWRD          THEN TO BINARY
         SPACE
         DOM   MSG=(R4)           DELETE MSG
         LTR   R15,R15            OK ?
         BNZ   RETURN             NO - SKIP MSG
         SPACE
         MVC   MSG(L'IDMSG),IDMSG "MSG ID"
         LR    R0,R4              COPY ID NUMBER
         LA    R1,MSG+L'IDMSG     -> AREA FOR NUMBER
         BAL   LINK,INSRTNUM      CONVERT NUMBER TO CHAR
         MVC   0(L'DEL,R1),DEL    "IS DELETED"
         LA    R0,L'DEL(R1)       -> END OF MSG
         LA    R1,MSG             -> START OF MSG
         SR    R0,R1              LENGTH
         SVC   93                 WRITE MSG
         SLR   R2,R2              CLEAR RETURN CODE
         SPACE 2
RETURN   LA    R1,CORE            -> GETMAINED AREA
         LA    R0,CORESIZE        LENGTH GETMAINED AREA
         L     R13,4(,R13)        -> OLD SAVE AREA
         SVC   10                 FREE WORK AREA
         LR    R15,R2             SET RETURN CODE
         RETURN (14,12),,RC=(15)  RETURN
         SPACE
MVCPARM  MVC   0(*-*,R1),0(R2)    MOVE PARM
         SPACE 2
*
*  INPUT -  R0 = BINARY NUMBER
*           R1 -> OUTPUT AREA
*  OUTPUT - NUMBER IS OUTPUT LEFT JUSTIFIED WITH LEADING MINUS SIGN
*           (IF NEGATIVE).  R0 WILL CONTAIN LENGTH OF CHAR NUMBER AND
*           R1 WILL POINT PAST THE NUMBER UPON RETURN.
*  NOTE   - A DECIMAL NUMBER MAY BE OUTPUT BY PLACING THE NUMBER IN
*           THE AREA "DBLWRD" AND USING "INSRTPAK" ENTRY.
*
INSRTNUM CVD   R0,DBLWRD          GET DECIMAL
INSRTPAK STM   R2,R3,28(R13)      SAVE WORK REGISTERS
         LR    R3,R1              PTR TO OUTPUT AREA
         SPACE
         MVC   EDITWK,EDITPAT     P'ZZZZZZZZZZZZZZ9'
         LA    R1,EDITWK+L'EDITWK-1   -> SIGNIFICANT DIGIT
         EDMK  EDITWK,DBLWRD      FORMAT NUMBER
         BNM   INSRTNTM           NO NEED TO ADD MINUS SIGN
         BCTR  R1,0               CHAR BEFORE SIG DIGIT
         MVI   0(R1),C'-'         LEADING MINUS SIGN
         SPACE
INSRTNTM LA    R2,EDITWK+L'EDITWK-1   -> LAST DIGIT
         SR    R2,R1              LENGTH TO MOVE - 1
         EX    R2,INSRTMVC        MOVE NUMBER TO OUTPUT AREA
         SPACE
         LA    R0,1(R2)           LENGTH OF NUMBER
         LA    R1,1(R2,R3)        -> PAST NUMBER
         SPACE
         LM    R2,R3,28(R13)      RESTORE REGISTERS
         BR    LINK               RETURN
         SPACE 2
INSRTMVC MVC   0(*-*,R3),0(R1)    LEFT JUSTIFY OUTPUT NUMBER
EDITPAT  DC    4X'202020',X'202120'  EDIT PATTERN
         SPACE 2
NEEDID   DC    C'A MESSAGE ID IS REQUIRED'
LARGEMSG DC    C'MSG ID TOO LONG'
BADSTR   DC    C'MSG ID IS NOT NUMERIC'
IDMSG    DC    C'MESSAGE ID '
DEL      DC    C' HAS BEEN DELETED'
ZEROS    DC    C'000000'
NUMCHECK EQU   *-C'0'
         DC    10X'00',6X'FF'
         SPACE 2
         LTORG
         SPACE 2
CORE     DSECT
         DS    18F                SAVE AREA
         SPACE
DBLWRD   DS    D
STR      DS    CL6                AREA FOR NUMBER STRING
STRCPY   DS    CL6                COPY TO CHECK TO IF NUMERIC
MSG      DS    CL40               MESSAGE AREA
EDITWK   DS    CL15               FOR INSRTNUM SUBROUTINE
         SPACE
         DS    0D                 ROUND TO DOUBLE WORD BOUNDARY
CORESIZE EQU   *-CORE             LENGTH OF GETMAINED AREA
         SPACE
         END   DOM
/*
