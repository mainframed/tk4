//DA       JOB
//*
//*  DA -
//*
//*    THIS TSO COMMAND LISTS ALL JOBS IN THE SYSTEM AND THEIR
//*    TCB TIMES AND EXCP COUNTS.  IT USES TSO FULLSCREEN OUTPUT
//*    AND WILL NOT RUN IN BATCH.
//*
//*  INSTALLATION -
//*
//*    MODIFY THE JOB CARD ABOVE AND THE PROCEDURE DEFAULTS
//*    BELOW TO SUIT YOUR TASTE.  IF YOU WANT TO CHANGE THE
//*    COMMAND NAME, YOU WILL HAVE TO CHANGE HELP TEXT
//*    ACCORDINGLY.
//*
//*    THE PROGRAM IS REENTRANT AND CAN BE STORED IN THE LPA
//*    IF YOU DESIRE, BUT *NOT* ELPA.
//*
//INSTALL PROC SOUT=$,                <=== SYSOUT CLASS
//             LIB='SYS1.CMDLIB',     <=== TARGET LOAD LIBRARY (LPA OK)
//             MBR=DA,                <=== COMMAND NAME
//             HELP='SYS1.HELP',      <=== TARGET HELP LIBRARY
//             SYSTS=SYSDA,           <=== UNITNAME FOR WORK DATASETS
//             ASMBLR=IEV90,          <=== NAME OF YOUR ASSEMBLER
//             ALIB='SYS1.LINKLIB',   <=== LOCATION OF YOUR ASSEMBLER
//             SMPMTS='SYS1.SMPMTS',  <=== SMPMTS DATASET NAME
//             MACLIB='SYS1.MACLIB',  <=== MACLIB DATASET NAME
//             AMODGEN='SYS1.AMODGEN', <=== AMODGEN DATASET NAME
//             MODGEN='SYS1.MODGEN'   <=== MODGEN DATASET NAME
//*                                        (USE SYS1.SMPMTS IF MVS-370)
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  DSN=&HELP,DISP=SHR
//SYSUT2   DD  DSN=&HELP,DISP=SHR
//*
//ASM     EXEC PGM=&ASMBLR,REGION=2048K,PARM='NOOBJECT,DECK,NOALIGN'
//STEPLIB  DD  DSN=&ALIB,DISP=SHR
//SYSTERM  DD  SYSOUT=&SOUT
//SYSPRINT DD  SYSOUT=&SOUT
//SYSLIB   DD  DSN=&MODGEN,DISP=SHR
//         DD  DSN=&SMPMTS,DISP=SHR
//         DD  DSN=&MACLIB,DISP=SHR
//         DD  DSN=&AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT2   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSUT3   DD  UNIT=&SYSTS,SPACE=(TRK,(15,1))
//SYSPUNCH DD  DSN=&&SYSLIN,UNIT=&SYSTS,DISP=(,PASS,DELETE),
//             SPACE=(TRK,(5,1),RLSE)
//*
//LKED    EXEC PGM=HEWL,COND=(0,NE),PARM='LIST,MAP,XREF,RENT,REFR'
//SYSPRINT DD  SYSOUT=&SOUT
//SYSUT1   DD  UNIT=&SYSTS,SPACE=(TRK,5)
//SYSLMOD  DD  DSN=&LIB(&MBR),DISP=SHR
//SYSLIN   DD  DSN=&&SYSLIN,DISP=(OLD,DELETE)
//         DD  DDNAME=SYSIN
//        PEND
//*
//        EXEC INSTALL
//IEBUPDTE.SYSIN DD *
./         ADD    NAME=DA,LIST=ALL
./         NUMBER NEW1=1000,INCR=1000
)F FUNCTION -
             THIS COMMAND PRODUCES A "DISPLAY ACTIVE" LIST.

  AUTHOR -
             DAVE PHILLIPS
             A. DUDA AND SONS, INC.
             P.O. BOX 257
             OVIEDO, FL  32765

  OPERATION -
             DA RUNS AS A FULL-SCREEN 3270 COMMAND.  IT TAKES
             TWO SUBCOMMANDS: "F" AND "Z".  THE "F" SUBCOMMAND
             DISPLAYS THE NEXT FRAME IN THE DISPLAY, IF ANY.
             THE "Z" SUBCOMMAND SHUTS DOWN DA (PF3 AND PA1
             ALSO SHUT DOWN DA).

  OUTPUT -
             FOR EACH ADDRESS SPACE THE FOLLOWING IS DISPLAYED:
                JOB NAME
                ADDRESS SPACE ID
                STEP NAME
                PROCSTEP NAME
                # OF EXCPS TO DATE
                CPU TIME TO DATE
                SWAP STATUS
                REAL STORAGE CURRENTLY USED

)X SYNTAX -
      DA

)O OPERANDS - NONE
./        ENDUP
/*
//ASM.SYSIN DD *
         GBLC  &SYSSPLV                                        10/25/90
         MACRO
&NAME    RA    &POS,&CHAR=
&NAME    CALCSBA &POS,ORDER=RA,CHAR=&CHAR
         MEND
         MACRO
&NAME    CALCSBA &POS,&ORDER=,&CHAR=
         LCLA  &O,&L,&R
         LCLC  &TAB,&LC,&RC,&OR,&CH
.*
         AIF   ('&POS(1)' NE '').HAVEPOS
         MNOTE 8,'MISSING ROW/OFFSET SPECIFICATION'
         MEXIT
.HAVEPOS AIF   (N'&POS LE 2).OKNPOS
         MNOTE 8,'TOO MANY OPERANDS FOR ROW/COLUMN SPECIFICATION'
         MEXIT
.OKNPOS  AIF   ('&POS(2)' EQ '').OFFSET
.*
         AIF   (&POS(1) GE 1 AND &POS(1) LE 24).OKROW
         MNOTE 8,'ROW SPECIFICATION IS OUT OF BOUNDS'
         MEXIT
.OKROW   AIF   (&POS(2) GE 1 AND &POS(1) LE 80).OKCOL
         MNOTE 8,'COLUMN SPECIFICATION IS OUT OF BOUNDS'
         MEXIT
.OKCOL   ANOP
&O       SETA  (((&POS(1)-1)*80)+(&POS(2)-1))
         AGO   .GOTOFF
.OFFSET  ANOP
         AIF   (&POS(1) GE 1 AND &POS(1) LE 1919).OKOFF
         MNOTE 8,'OFFSET SPECIFICATION IS OUT OF BOUNDS'
         MEXIT
.OKOFF   ANOP
&O       SETA  &POS(1)
.*
.GOTOFF  ANOP
&TAB     SETC  ' ABCDEFGHIÖ.<(+×'.'&&'(1,1).'JKLMNOPQR!$*);^-/STUVWXYZ|*
               ,%_>?0123456789:#@''="'
&L       SETA  &O/64
&R       SETA  (&O-(&L*64))
&LC      SETC  '&TAB'(&L+1,1)
&RC      SETC  '&TAB'(&R+1,1)
.*
.CHKL1   AIF   ('&LC' NE '&&'(1,1)).CHKL2
&LC      SETC  '&&'
         AGO   .CHKR1
.CHKL2   AIF   ('&LC' NE '''').CHKR1
&LC      SETC  (2)''''
.*
.CHKR1   AIF   ('&RC' NE '&&'(1,1)).CHKR2
&RC      SETC  '&&'
         AGO   .GOTSBA
.CHKR2   AIF   ('&RC' NE '''').GOTSBA
&RC      SETC  (2)''''
.*
.GOTSBA  ANOP
.*
&OR      SETC  ''
         AIF   ('&ORDER' EQ 'SBA').GOTORD
&OR      SETC  ''
         AIF   ('&ORDER' EQ 'RA').GOTORD
&OR      SETC  ''
         AIF   ('&ORDER' EQ 'EUA').GOTORD
&OR      SETC  ''
         AIF   ('&ORDER' EQ '').GOTORD
         MNOTE 8,'ORDER ''&ORDER'' IS INVALID'
         MEXIT
.GOTORD  ANOP
.*
         AIF   (T'&CHAR EQ 'O').NOCHAR
         AIF   ('&CHAR'(1,1) EQ '''').CHARQ
         AIF   (K'&CHAR EQ 2).CHARHEX
&CH      SETC  '''&CHAR'''
         AGO   .CHAROK
.CHARQ   ANOP
&CH      SETC  '&CHAR'
.CHAROK  ANOP
&NAME    DC    C'&OR&LC&RC',C&CH
         MEXIT
.*
.CHARHEX ANOP
&NAME    DC    C'&OR&LC&RC',X'&CHAR'
         MEXIT
.*
.NOCHAR  ANOP
&NAME    DC    C'&OR&LC&RC'
         MEXIT
         MEND
         MACRO
&NAME    SBA   &POS
&NAME    CALCSBA &POS,ORDER=SBA
         MEND
         MACRO
&NAME    SF    &ATTRIB
         LCLA  &ARG                3270 ATTRIBUTE CHAR RESOLUTION     @
         LCLB  &PEN                ATTRB = DET                        @
         LCLB  &KEYED              ATTRB = UNPROT                     @
         LCLB  &IC                 ATTRB = IC                         @
         LCLB  &NUMERIC            NUMERIC FIELD INDICATOR
         LCLB  &X(10),&XON
         LCLA  &COUNT,&INDEX,&HIGH,&A,&B,&C                           @
         LCLA  &Y(10)
         LCLC  &ATRC
.*
.**********************************************************************
.*       COMPONENTS OF &X GLOBALS                                     *
.**********************************************************************
.*                                                                    *
.*               &X                         MEANING                   *
.*                                                                    *
.*                1                     ATTRB = ASKIP                 *
.*                2                     ATTRB = PROT                  *
.*                3                     ATTRB = UNPROT                *
.*                4                     ATTRB = NUM                   *
.*                5                     ATTRB = DET                   *
.*                6                     ATTRB = BRT                   *
.*                7                     ATTRB = DRK                   *
.*                8                     ATTRB = FSET                  *
.*                9                     ATTRB = IC                    *
.*               10                     ATTRB = NORM                  *
.*                                                                    *
.**********************************************************************
.*
.**********************************************************************
.*       ANALYZE SPECIFICATION OF ATTRB OPERAND                       *
.**********************************************************************
&ATRC    SETC  '
         AIF   (T'&ATTRIB EQ 'O').MDFATRB
.**********************************************************************
.*       ANALYZE ATTRB FOR ATTRIBUTE CHARACTER                        *
.**********************************************************************
.*
&INDEX   SETA  1
&HIGH    SETA  10
&IC      SETB  0                   INITIALIZE ATTRB = IC GLOBAL       @
&ARG     SETA  0                   INIT ATTRIBUTE CHAR RESOLUTION     @
         AIF   (T'&ATTRIB EQ 'O').ATRDF  IS ATTRB = NULL ?            @
.REPEAT  ANOP
&COUNT   SETA  &COUNT+1            BUMP THE COUNT BY 1.
         AIF   ('&ATTRIB(&INDEX)' EQ 'ASKIP').SETBIT           @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'PROT').SETBIT            @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'UNPROT').SETBIT          @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'NUM').SETBIT             @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'DET').SETBIT             @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'BRT').SETBIT             @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'DRK').SETBIT             @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'FSET').SETBIT            @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'IC').SETBIT              @BA49862
&COUNT   SETA  &COUNT+1                                        @BA49862
         AIF   ('&ATTRIB(&INDEX)' EQ 'NORM').SETBIT            @BA49862
.*DELETED BY APAR P49862                                       @BA49862
         AIF   (&COUNT LE &HIGH).REPEAT  CHECK FOR END OF LIST.
         AGO   .ATRE01             GO TO ATTRB PARAMETER ERROR        @
.CHEKIND ANOP                      CHECK INDEX ENTRY                  @
         AIF   (&INDEX EQ N'&ATTRIB).ATRLDUN  IS # PARMS EXCEEDED ?   @
&INDEX   SETA  &INDEX+1
&COUNT   SETA  0
         AGO   .REPEAT
.*
.*  SET X MATRIX FOR CHARACTER DISPLACEMENT.
.*
.SETBIT  ANOP
&XON     SETB  1                   SHEW SOME X HAS BEEN SET.
&X(&COUNT) SETB 1                  SHEW THIS ATTRIBUTE CHOSEN.
&Y(&COUNT) SETA &INDEX
         AGO   .CHEKIND
.ATRDF   ANOP                      DEFAULT ATTRIBUTE CHAR ENTRY       @
&X(1)    SETB  1                   SET ASKIP ON
&XON     SETB  1                   SHEW AN X BIT SET.
.*
.*  ANALYZE THE MATRIX
.*
.ATRLDUN ANOP                      ATTRIBUTE CHARACTER COMPLETION     @
         AIF   (&XON).ANALYSE      CHECK FOR ANY X SET.
&X(1)    SETB  1                   TAKE THE DEFAULT
.ANALYSE ANOP
&PEN     SETB  (&X(5))                  .. YES, SET ATTRB = DET ON    @
.*
.*  OUTPUT ANALYSIS.
.*
&A       SETA  1                   SET ATTRB = ASKIP                  @
&B       SETA  3                   SET ATTRB =UNPROT                  @
         AIF   (&X(1) AND &X(3)).ATRE02  IS ATTRB = ASKIP AND UNPROT ?@
&A       SETA  2                   SET ATTRB = PROT                   @
         AIF   (&X(2) AND &X(3)).ATRE02  IS ATTRB = PROT AND UNPROT ? @
&A       SETA  5                   SET ATTRB = DET                    @
&B       SETA  7                   SET ATTRB = DRK                    @
         AIF   (&X(5) AND &X(7)).ATRE02  IS ATTRB = DET AND DRK ?     @
&A       SETA  6                   SET ATTRB = BRT                    @
         AIF   (&X(6) AND &X(7)).ATRE02  IS ATTRB = BRT AND DRK ?     @
&B       SETA  10                  SET ATTRB = NORM                   @
         AIF   (&X(6) AND &X(10)).ATRE02  IS ATTRB = BRT AND NORM ?   @
&A       SETA  7                   SET ATTRB = DRK                    @
         AIF   (&X(7) AND &X(10)).ATRE02  IS ATTRB = DRK AND NORM ?   @
         AIF   (&X(1) AND &X(9)).ATRE03  IS ATTRB = ASKIP AND IC ?    @
         AIF   (&X(2) AND &X(9)).ATRE03  IS ATTRB = PROT AND IC ?     @
         AIF   (&X(2) AND &X(4)).ATRE04  IS ATTRB = PROT AND NUM ?    @
.*
.*
.*
.BITCALC ANOP
&NUMERIC SETB  (&X(4))             SET NUMERIC FIELD INDICATOR
&X(2)    SETB  (&X(1) OR &X(2))    PROT IF ASKIP.
&X(4)    SETB  (&X(1) OR &X(4))    NUM IF ASKIP
&X(5)    SETB  (&X(7) OR (&X(5) AND NOT &X(6))) SET IF DARK OR LGHT PEN
&X(6)    SETB  (&X(7) OR &X(6))    BRT IF DARK.
&IC      SETB  (&X(9))             IC IF REQUESTED
&ARG     SETA  (32*&X(2)+16*&X(4)+4*&X(5)+8*&X(6)+&X(8))
&KEYED   SETB  (&X(3))             FLAG AS KEYABLE IF UNPROTECTED.
.*
.**********************************************************************
.*       CONVERT THE BINARY ATTRB TO A VALID 3270 TRANSMITTABLE CHAR  *
.**********************************************************************
         AIF   (&ARG NE 16).MDFFA  IS ATTRB = & ?                     @
&ATRC    SETC  '&&'                .. YES, SET ATTRB = & GLOBAL       @
         AGO   .MDFATRB            GO TO ATTRIBUTE BYPASS             @
.MDFFA   ANOP                      .. NO, ATTRB = & BYPASS            @
         AIF   (&ARG NE 61).MDFFB  IS ATTRB = ' ?                     @
&ATRC    SETC  ''''''              .. YES, SET ATTRB = ' GLOBAL       @
         AGO   .MDFATRB            GO TO ATTRIBUTE BYPASS             @
.MDFFB   ANOP                      .. NO, ATTRB = ' BYPASS            @
&ATRC    SETC  ' ABCDEFGHIÖ.<(+× JKLMNOPQR!$*);^-/STUVWXYZ|,%_>?0123456*
               789:#@''="'(&ARG+1,1)  SUBSTRING FOR CORRECT CHARACTER @
.MDFATRB ANOP                      ATTRIBUTE BYPASS                   @
         AIF   (&IC).ADDIC
&NAME    DC    C'&ATRC'
         MEXIT
.ADDIC   ANOP
&NAME    DC    C'&ATRC.'
         MEXIT
.*
.*
.*
.ATRE01  ANOP                      ATTRB PARAMETER ERROR ENTRY        @
         MNOTE 4,'INVALID ATTRIBUTE PARAMETER IS SPECIFIED,'   @BA19555
         MNOTE *,'ATTRB = &ATTRIB(&INDEX) IS IGNORED.'                @
         AGO   .CHEKIND            GO TO CHECK INDEX                  @
.ATRE02  ANOP                      INCOMPATIBLE ATTRB OP ERROR        @
&A       SETA  &Y(&A)              SET PARAMETER INDEX VALUE
&B       SETA  &Y(&B)              SET PARAMETER INDEX VALUE
         MNOTE 4,'&ATTRIB(&A) AND &ATTRIB(&B) ARE INCOMPATIBLE PARAMETE*
               RS,'                                            @BA19555
         MNOTE *,'ATTRB = &ATTRIB(&A) IS IGNORED,'                    @
         MNOTE *,'ATTRB = &ATTRIB(&B) IS IGNORED,'                    @
         MNOTE *,'ATTRB = ASKIP IS ASSUMED BY DEFAULT.'               @
&X(1)    SETB  1                   ASKIP DEFAULT.
&C       SETA  2                   SET C FOR CLEARING X TABLE.
.ZEROX   ANOP
&X(&C)   SETB  0                   CLEAR
&C       SETA  &C+1                DOWN
         AIF   (&C LT 11).ZEROX    X TABLE.
         AGO   .BITCALC
.ATRE03  ANOP                      ATTRB = IC ERROR ENTRY             @
         MNOTE 4,'ATTRB = IC IS REQUESTED FOR PROTECTED FIELD' @BA19555
         AGO   .BITCALC
.ATRE04  ANOP                      ATTRB = PROT AND NUM ERROR         @
         MNOTE *,'ATTRB = PROT AND NUM ALSO IMPLIES THE ASKIP PARAMETER*
               .'                                                     @
         AGO   .BITCALC
         MEND
         MACRO
&NAME    WCC   &CTRL
         LCLA  &ARG                3270 WCC RESOLUTION                @
         LCLB  &BITS(6)            WRITE CONTROL CHARACTER BITS       @
         LCLA  &KOWNT              CONTROL PARAMETER COUNTER          @
         LCLB  &HONSW              NEW LINE & END OF MESSAGE BIT      @
         LCLC  &FUNC
.*
.**********************************************************************
.*       COMPONENTS OF &ARG GLOBAL                                    *
.**********************************************************************
.*                                                                    *
.*             &BITS       VALUE            MEANING                   *
.*                                                                    *
.*               1           32           CTRL = L64                  *
.*               1 & 2                    CTRL = L80                  *
.*               2           16           CTRL = L40                  *
.*               3            8           CTRL = PRINT                *
.*               4            4           CTRL = ALARM                *
.*               5            2           CTRL = FREEKB               *
.*               6            1           CTRL = FRSET                *
.*                                                                    *
.**********************************************************************
.*
&ARG     SETA  0                   INITIALIZE 3270 WCC RESOLUTION     @
&FUNC    SETC  '
&HONSW   SETB  0                   INITIALIZE NL AND EOM BIT          @
&BITS(1) SETB  0                   INIT 64 CHAR LINE LENGTH BIT       @
&BITS(2) SETB  0                   INIT 40 CHAR LINE LENGTH BIT       @
&BITS(3) SETB  0                   INITIALIZE 3270 PRINTER BIT        @
&BITS(4) SETB  0                   INITIALIZE 3270 ALARM BIT          @
&BITS(5) SETB  0                   INITIALIZE FREE KEYBOARD BIT       @
&BITS(6) SETB  0                   INIT MODIFIED DATA TAG RESET       @
.*
         AIF   (T'&CTRL EQ 'O').WCCEXT2  IS CTRL = NULL ?             @
.*
.**********************************************************************
.*       ANALYZE CTRL FOR WCC                                         *
.**********************************************************************
.WCCLOOP ANOP                      CTRL OPERAND LOOP ENTRY            @
&KOWNT   SETA  &KOWNT+1            INCREMENT NUMBER OF PARAMETERS     @
         AIF   (&KOWNT GT N'&CTRL).WCCEXIT  IS # OF PARMS EXCEEDED ?  @
         AIF   ('&CTRL(&KOWNT)' NE 'PRINT').WCCPRTB  IS CTRL = PRINT ?@
&BITS(3) SETB  1                   .. YES, SET CTRL = PRINT BIT       @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCPRTB ANOP                      .. NO, CTRL = PRINT BYPASS         @
         AIF   ('&CTRL(&KOWNT)' NE 'L80').WCCL80B  IS CTRL = L80 ?    @
         AIF   (&BITS(1) AND &BITS(2)).WCCLOOP  IS L80 PREV SPECIFIED ?
         AIF   (&BITS(1)).WCCE1    IS L64 PREVIOUSLY SPECIFIED ?      @
         AIF   (&BITS(2)).WCCE2    IS L40 PREVIOUSLY SPECIFIED ?      @
         AIF   (&HONSW).WCCE3      HONEOM PREVIOUSLY SPECIFIED ?      @
&BITS(1) SETB  1                   SET CTRL = L80 BITS                @
&BITS(2) SETB  1                   SET CTRL = L80 BITS                @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCL80B ANOP                      .. NO, CTRL = L80 BYPASS           @
         AIF   ('&CTRL(&KOWNT)' NE 'L64').WCCL64B  IS CTRL = L64 ?    @
         AIF   (&BITS(1) AND (NOT &BITS(2))).WCCLOOP  L64 PREV SPEC ? @
         AIF   (&BITS(1) AND &BITS(2)).WCCE1  IS L80 PREV SPECIFIED ? @
         AIF   (&BITS(2)).WCCE4    IS L40 PREVIOUSLY SPECIFIED ?      @
         AIF   (&HONSW).WCCE5      HONEOM PREVIOUSLY SPECIFIED ?      @
&BITS(1) SETB  1                   SET CTRL = L64 BIT                 @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCL64B ANOP                      .. NO, CTRL = L64 BYPASS           @
         AIF   ('&CTRL(&KOWNT)' NE 'L40').WCCL40B  IS CTRL = L40 ?    @
         AIF   (&BITS(2) AND (NOT &BITS(1))).WCCLOOP  L40 PREV SPEC ? @
         AIF   (&BITS(1) AND &BITS(2)).WCCE2  IS L80 PREV SPECIFIED ? @
         AIF   (&BITS(1)).WCCE4    IS L64 PREVIOUSLY SPECIFIED ?      @
         AIF   (&HONSW).WCCE6      HONEOM PREVIOUSLY SPECIFIED ?      @
&BITS(2) SETB  1                   SET CTRL = L40 BIT                 @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCL40B ANOP                      .. NO, CTRL = L40 BYPASS           @
         AIF   ('&CTRL(&KOWNT)' NE 'HONEOM').WCCEOMB  CTRL = HONEOM ? @
         AIF   (&HONSW).WCCLOOP    HONEOM PREVIOUSLY SPECIFIED ?      @
         AIF   (&BITS(1) AND &BITS(2)).WCCE3  IS L80 PREV SPECIFIED ? @
         AIF   (&BITS(1)).WCCE5    IS L64 PREVIOUSLY SPECIFIED ?      @
         AIF   (&BITS(2)).WCCE6    IS L40 PREVIOUSLY SPECIFIED ?      @
&HONSW   SETB  1                   SET CTRL = HONEOM BIT              @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCEOMB ANOP                      .. NO, CTRL = HONEOM BYPASS        @
         AIF   ('&CTRL(&KOWNT)' NE 'FREEKB').WCCFRKB  CTRL = FREEKB ? @
&BITS(5) SETB  1                   .. YES, SET CTRL = FREEKB BIT      @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCFRKB ANOP                      .. NO, CTRL = FREEKB BYPASS        @
         AIF   ('&CTRL(&KOWNT)' NE 'FRSET').WCCRSTB  IS CTRL = FRSET ?@
&BITS(6) SETB  1                   .. YES, SET CTRL = FRSET BIT       @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCRSTB ANOP                      .. NO, CTRL = FRSET BYPASS         @
         AIF   ('&CTRL(&KOWNT)' NE 'ALARM').WCCLRMB  IS CTRL = ALARM ?@
&BITS(4) SETB  1                   .. YES, SET CTRL = ALARM BIT       @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCLRMB ANOP                      .. NO, CTRL = ALARM BYPASS         @
         AIF   ('&CTRL(&KOWNT)' EQ 'PAGE').WCCLOOP  IS CTRL = PAGE ?  @
         AIF   ('&CTRL(&KOWNT)' EQ 'AUTOPAGE').WCCLOOP  AUTOPAGE ?    @
         AIF   ('&CTRL(&KOWNT)' EQ 'RETAIN').WCCLOOP  CTRL = RETAIN ? @
         AIF   ('&CTRL(&KOWNT)' EQ 'RELEASE').WCCLOOP  CTRL = RELEASE ?
         MNOTE 4,'INVALID WCC PARAMETER IS SPECIFIED,'         @BA19555
         MNOTE *,'WCC PARAMETER IS IGNORED.'                          @
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.WCCE1   ANOP                      CTRL = L80 AND L64 ERROR ENTRY     @
         MNOTE 4,'L80 AND L64 PARMS ARE INCONSISTENT,'         @BA19555
         MNOTE *,'L80 PARAMETER IS IGNORED,'                          @
         MNOTE *,'L64 PARAMETER IS IGNORED,'                          @
         AGO   .WCCE6A             GO TO CTRL = HONEOM DEFAULT        @
.WCCE2   ANOP                      CTRL = L80 AND L40 ERROR ENTRY     @
         MNOTE 4,'L80 AND L40 PARMS ARE INCONSISTENT,'         @BA19555
         MNOTE *,'L80 PARAMETER IS IGNORED,'                          @
         MNOTE *,'L40 PARAMETER IS IGNORED,'                          @
         AGO   .WCCE6A             GO TO CTRL = HONEOM DEFAULT        @
.WCCE3   ANOP                      CTRL = L80 AND HONEOM ERROR        @
         MNOTE 4,'L80 AND HONEOM PARMS NOT CONSISTENT,' @BA19555
         MNOTE *,'L80 PARAMETER IS IGNORED,'                          @
         AGO   .WCCE6A             GO TO CTRL = HONEOM DEFAULT        @
.WCCE4   ANOP                      CTRL = L64 AND L40 ERROR ENTRY     @
         MNOTE 4,'L64 AND L40 PARMS ARE INCONSISTENT,'         @BA19555
         MNOTE *,'L64 PARAMETER IS IGNORED,'                          @
         MNOTE *,'L40 PARAMETER IS IGNORED,'                          @
         AGO   .WCCE6A             GO TO CTRL = HONEOM DEFAULT        @
.WCCE5   ANOP                      CTRL = L64 AND HONEOM ERROR        @
         MNOTE 4,'L64 AND HONEOM PARMS NOT CONSISTENT,' @BA19555
         MNOTE *,'L64 PARAMETER IS IGNORED,'                          @
         AGO   .WCCE6A             GO TO CTRL = HONEOM DEFAULT        @
.WCCE6   ANOP                      CTRL = L40 AND HONEOM ERROR        @
         MNOTE 4,'L40 AND HONEOM PARMS NOT CONSISTENT,' @BA19555
         MNOTE *,'L40 PARAMETER IS IGNORED,'                          @
.WCCE6A  ANOP                      CTRL = HONEOM DEFAULT ENTRY        @
         MNOTE *,'HONEOM PARAMETER IS ASSUMED BY DEFAULT.'            @
&BITS(1) SETB  0
&BITS(2) SETB  0
         AGO   .WCCLOOP            GO TO CTRL OPERAND LOOP ENTRY      @
.*
.WCCEXIT ANOP                      WCC COMPLETION                     @
&ARG     SETA  &BITS(1)*32+&BITS(2)*16+&BITS(3)*8+&BITS(4)*4
&ARG     SETA  &ARG+&BITS(5)*2+&BITS(6)
.WCCEXT2 ANOP
.*
.*
.**********************************************************************
.*       CONVERT THE BINARY WCC TO A VALID 3270 TRANSMITTABLE CHARACTER
.**********************************************************************
         AIF   (&ARG NE 16).MDIFA  IS WCC = & ?                       @
&FUNC    SETC  '&&'                .. YES, SET WCC = & GLOBAL         @
         AGO   .MDIWCCB            GO TO WCC BYPASS                   @
.MDIFA   ANOP                      .. NO, WCC = & BYPASS              @
         AIF   (&ARG NE 61).MDIFB  IS WCC = ' ?                       @
&FUNC    SETC  ''''''              .. YES, SET WCC = ' GLOBAL         @
         AGO   .MDIWCCB            GO TO WCC BYPASS                   @
.MDIFB   ANOP                      .. NO, WCC = ' BYPASS              @
&FUNC    SETC  ' ABCDEFGHIÖ.<(+× JKLMNOPQR!$*);^-/STUVWXYZ|,%_>?0123456*
               789:#@''="'(&ARG+1,1) SUBSTR FOR CORRECT CHAR   @BCC5E01
.MDIWCCB ANOP                      WCC BYPASS                  @BCC5E01
.*
&NAME    DC    C'&FUNC'
         MEND                                                  @BCAD311
R0       EQU   00                 WORK REGISTER
R1       EQU   01                 WORK REGISTER
R2       EQU   02
R3       EQU   03                 TOTAL NUMBER OF ADDRESS SPACES
R4       EQU   04                 TOTAL INACTIVE INITIATORS
R5       EQU   05                 TOTAL INITIATORS
R6       EQU   06                 -> ASVT ENTRY
R7       EQU   07                 -> ASCB
R8       EQU   08                 -> CSCB / ASID
R9       EQU   09
R10      EQU   10
R11      EQU   11                 -> DATA AREA (DATD DSECT)
R12      EQU   12                 BASE REGISTER
R13      EQU   13                 -> SAVE AREA
R14      EQU   14                 LINKAGE REGISTER
R15      EQU   15                 RETURN CODE REGISTER
         TITLE 'DISPLAY ACTIVE TSO COMMAND'
DA       CSECT
DA       AMODE 31
DA       RMODE 24
         SAVE  (14,12),,DA-&SYSTIME-&SYSDATE
         BALR  R12,0                   LOAD BASE REGISTER
         USING *,R12                   CSECT ADDRESSABILITY
         L     R0,SIZDATD              SIZE OF WORK AREA
         GETMAIN R,LV=(0)              GET IT
         LR    R11,R1
         USING DATD,R11                ESTABLISH ADDRESSABILITY
         LM    R0,R1,20(R13)           RESTORE R0 AND R1 AS UPON ENTRY
         ST    R13,SAVEAREA+4          ) CHAIN
         ST    R11,8(,R13)             ) SAVE
         LR    R13,R11                 ) AREAS
         SPACE 2
         L     R15,CVTPTR              LOAD POINTER TO CVT
         USING CVTMAP,R15              ESTABLISH ADDRESSABILITY TO CVT
         L     R6,CVTASVT              LOAD POINTER TO ASVT
         DROP  R15                     DROP ADDRESSABILITY TO CVT
         L     R10,ASVTMAXU-ASVTPRFX(,R6) MAX # ADDRESS SPACES 10/31/90
         ST    R10,#ASVT                    "                  10/31/90
         LA    R6,ASVTENTY-ASVTPRFX(,R6) -> ASVT ENTRY, SKIP 1 10/31/90
         ST    R6,@ASVT                                        10/31/90
         STFSMODE ON,INITIAL=YES
         EJECT
START    DS    0H
         XC    LSCREEN,LSCREEN
         SR    R3,R3                   ZERO
         SR    R4,R4                   OUT
         SR    R5,R5                   COUNTERS
         L     R6,@ASVT                RESTORE ASVT            10/31/90
         L     R10,#ASVT               RESTORE ASVT COUNT      10/31/90
         XC    PAGE,PAGE               ZERO FLAGS
         LA    R0,HEADER
         LA    R1,LHEADER
         LA    R15,SCRNMGR             PUT OUT HEADER LINE
         BALR  R14,R15
         LA    R0,SCREEN
         A     R0,LSCREEN
         ST    R0,DASTART              START OF FIRST LINE
         EJECT
ASCBNEXT DS    0H
         MVI   LINE,C' '               BLANK OUT THE OUTPUT LINE
         MVC   LINE+1(L'LINE-1),LINE
         NI    FLAGS,X'FF'-STRTASK     RESET STARTED TASK FLAG
ASCBNXT  BCT   R10,ASCBNXT2            OUT OF ASCBS?           10/31/90
         B     LASTASCB                YES, GET OUT            10/31/90
ASCBNXT2 LA    R6,4(R6)                -> NEXT ASVT ENTRY      10/31/90
         ICM   R7,B'1111',0(R6)        -> ASCB IF ACTIVE       10/31/90
         BNH   ASCBNXT                 NOT ACTIVE, LOOP        10/31/90
         CLC   0(4,R7),ASCBWORD        ENSURE CONTROL BLOCK IS VALID
         BNE   ASCBNXT                 NO.....GO ON TO NEXT ASVT ENTRY
         SPACE
GOTASCB  L     R8,ASCBJBNS-ASCB(,R7)   -> CSCB+16 FOR STC      10/25/90
         TM    CHTRKID-8(R8),CHINITID  INITIATOR ?
         BNO   *+8                     NOPE
         LA    R5,1(R5)                COUNT TOTAL INITIATORS
         SPACE
CHKTYPE  L     R8,ASCBJBNI-ASCB(,R7)   -> JOBNAME FIELD        10/25/90
         LTR   R8,R8                   SEE IF POINTER IS ZERO
         BZ    STASK                   YES....SEE IF A STARTED TASK
BATCH    MVC   LINEJOBN,0(R8)          MOVE JOBNAME TO PRINT LINE
         B     GETSTEP                 GET STEPNAME AND PROCSTEP
         SPACE 1
STASK    DS    0H
         L     R8,ASCBJBNS-ASCB(,R7)   -> JOBNAME FIELD        10/25/90
         LTR   R8,R8                   SEE IF POINTER IS ZERO
         BZ    NOJOBN                  YES....NO JOBNAME
         MVC   LINEJOBN,0(R8)          MOVE JOBNAME TO PRINT LINE
         SR    R0,R0
         C     R0,ASCBTSB-ASCB(,R7)    TSB PTR ZERO ?          10/25/90
         BNE   GETSTEP                 NO - TSU (OFFSETS LIKE BATCH)
         OI    FLAGS,STRTASK           REMEMBER ITS A STARTED TASK
         SH    R8,=H'8'                ADJUST PTR SO SAME AS INIT JOB
         CLI   CHUNIT(R8),C'0'         ANY UNIT NAME ?
         BL    GETSTEP                 NOPE
         MVC   LINESTEP(3),CHUNIT(R8)  YES
         SPACE
GETSTEP  TM    CHTRKID(R8),CHINITID    INITIATOR ??
         BO    CNTINIT                 YES - COUNT'EM
         TM    CHTRKID(R8),CHTSID      TSO USER ??
         BNO   CHKSTEP                 NOPE
         CLI   CHCLS(R8),C' '          ANY PROCSTEP ?
         BNH   EDITASID                NOPE
         MVC   LINEPROC,CHCLS(R8)      GET IT
         SPACE
CHKSTEP  CLI   CHSTEP(R8),C' '         ANY STEPNAME ?
         BNH   NOSTEP                  NOPE
         MVC   LINESTEP,CHSTEP(R8)     GET IT
NOSTEP   CLI   CHPROCSN(R8),C' '       ANY PROCSTEP ?
         BNH   EDITASID                NOPE
         MVC   LINEPROC,CHPROCSN(R8)   AND PROCSTEP
         B     EDITASID                GO PUT OUT ASID
         SPACE
CNTINIT  LA    R4,1(R4)                COUNT THEM INITIATORS
         B     ASCBNEXT
         SPACE
NOJOBN   DS    0H
         MVC   LINEJOBN,NOJOB          MOVE '   *    ' TO PRINT LINE
         SPACE
EDITASID DS    0H
         UNPK  LINEASID(3),36(2,R7)    CONVERT ASID TO         10/30/90
         MVC   LINEASID+3(1),37(R7)      EXTERNAL HEX FORMAT   10/30/90
         NC    LINEASID(4),=X'0F0F0F0F'    (MAKE SHMUEL HAPPY  10/30/90
         TR    LINEASID(4),=C'0123456789ABCDEF'  .... AGAIN)   10/30/90
         SPACE
*        TM    FLAGS,STRTASK           A STARTED TASK ?        10/25/90
*        BO    SKIPEXCP                YES - NO EXCP COUNTS    10/25/90
         SPLEVEL TEST                  ASSEMBLED UNDER XA?     10/25/90
         AIF   ('&SYSSPLV' NE '1').IOSMXA                      10/25/90
         SLR   R0,R0                   CLEAR FOR ICM           10/30/90
         ICM   R0,B'0011',ASCBIOSM-ASCB(,R7) I/O SERV MEASURE  10/30/90
         L     R9,144(,R7)             ADDRESS OF OUCB
         L     R9,OUCBIOSM(,R9)        OUCB+108 (SMF EXCP COUNT)
         AR    R9,R0                   ADD I/O SERVICE MEASURE 10/30/90
         AGO   .IOSMERG                                        10/25/90
.IOSMXA  ANOP  ,                                               10/30/90
         L     R9,ASCBIOSC-ASCB(,R7)   I/O SERVICE MEASURE     10/30/90
.IOSMERG ANOP  ,                                               10/25/90
         CVD   R9,PACK                 CONVERT TO DECIMAL
         MVC   CHAR,EDMSK              FORMAT EXCP FOR PRINTING
         ED    CHAR,PACK+4
         MVC   LINEEXCP,CHAR           MOVE EXCP OVER FORMAT MASK
SKIPEXCP DS    0H                      BYPASS EXCP COUNT DISPLAY
         SPACE
         L     R0,64(,R7)              TCB TIMER (FIRST 4 BYTES)
         L     R1,68(,R7)              TCB TIMER (SECOND 4 BYTES)
         AL    R1,204(,R7)             ADD LOW WORD OF SRB TIME
         BC    12,*+8                  NO CARRY - SKIP THE INCREMENT
         AL    R0,=F'1'                CARRY - INCREMENT HIGH WORD
         AL    R0,200(,R7)             ADD HIGH WORD OF SRB TIME
         SRDA  R0,12                   SHIFT DOUBLEWORD SO THAT BIT 51
*                                      WILL EQUAL 1 MICROSECOND
         D     R0,CONSTANT             CHANGE MICROSECONDS INTO SECONDS
         CVD   R1,PACK                 ST THE SECONDS IN PACK
         MVC   CHAR,EDMSK2
         ED    CHAR,PACK+4
         MVC   LINECPU,CHAR
         SPACE 2
         L     R9,144(,R7)        ADDR OF OUCB
         TM    102(R7),X'04'      SWAPPED OUT?
         BZ    NOSWAP             NO, SKIP FLAG
         MVI   LINEST1,C'S'       INDICATE SAME
NOSWAP   TM    17(R9),X'80'       NON-SWAPPABLE?
         BZ    NOTNS              NO, SKIP FLAG
         MVI   LINEST1,C'N'       INDICATE SAME
NOTNS    TM    17(R9),X'04'       PRIVILEGED?
         BZ    NOTPRIV            NO, SKIP FLAG
         MVI   LINEST1,C'P'       INDICATE SAME
NOTPRIV  TM    21(R9),X'01'       DETECTED WAIT?
         BZ    NOTDETW            NO SKIP FLAG
         MVC   LINEST2,=C'DW'     INDICATE SAME
NOTDETW  TM    21(R9),X'80'       LONG WAIT?
         BZ    NOTLONG            NO SKIP FLAG
         MVC   LINEST2,=C'LW'     INDICATE SAME
NOTLONG  TM    21(R9),X'40'       TERMINAL INPUT
         BZ    NOTTI              NO SKIP FLAG
         MVC   LINEST2,=C'TI'     INDICATE SAME
NOTTI    TM    21(R9),X'20'       TERMINAL OUTPUT
         BZ    NOTTO              NO SKIP FLAG
         MVC   LINEST2,=C'TO'     INDICATE SAME
NOTTO    TM    21(R9),X'08'       ENQUEUE WAIT
         BZ    NOTENQ             NO SKIP FLAG
         MVC   LINEST2,=C'NQ'     INDICATE SAME
NOTENQ   EQU   *
         SPACE
         LH    R1,152(,R7)             GET REAL STORAGE FRAME CNT
         SLA   R1,2                    CONVERT IT TO K
         LTR   R1,R1                   ANY STORAGE ???
         BZ    SKIPSTOR                NOPE
         SPACE
         CVD   R1,PACK                 PRINT IT OUT
         MVC   CHAR,EDMSK
         ED    CHAR,PACK+4
         MVC   LINESTOR,CHAR+1
         MVI   LINEK,C'K'              ADD UNITS
SKIPSTOR DS    0H
         SPACE
PUTLINE  DS    0H
         LA    R0,LINE                 LOAD POINTER TO LINE
         LA    R1,L'LINE               LENGTH
         LA    R15,SCRNMGR
         BALR  R14,R15
         LA    R3,1(R3)                ADD 1 TO USER COUNT
         B     ASCBNEXT                GO ON TO NEXT ASVT ENTRY
         EJECT
**********************************************************************
*                                                                    *
*    LASTASCB --- WE HAVE COLLECTED ALL OUTPUT LINES INTO "SCREEN".  *
*              SINCE WE DO NOT HAVE AN INFINITELY LENGTHY SCREEN     *
*              WE MUST NOW DETERMINE WHICH PORTIONS OF THE "SCREEN"  *
*              BUFFER ARE TO BE TPUTED DEPENDING ON THE              *
*              CIRCUMSTANCES.  "LASTASCB" UPDATES THE NECESSARY      *
*              POINTERS AND FLAGS AND THEN CALLS "SCRNMGR" TO HANDLE *
*              ALL THE DIRTY WORK.                                   *
*                                                                    *
*     DASTART  --- ADDRESS OF FIRST LINE OF INDIVIDUAL JOB OUTPUT    *
*               SECTION OF SCREEN.  (WHERE *MASTER* BEGINS)          *
*     LSCREEN  --- LENGTH OF ALL DATA IN "SCREEN BUFFER".            *
*               THIS INCLUDES ALL 3270 CONTROL CHARACTERS FOR TPUT.  *
*     LDA      --- LENGTH FROM DASTART TO SCREEN+LSCREEN.            *
*     TPUTSTRT --- BEGINNING ADDRESS OF WHERE TO TPUT FROM           *
*     @ENDTPUT --- ENDING ADDRESS OF TPUT BUFFER                     *
*                                                                    *
**********************************************************************
         SPACE 2
LASTASCB DS    0H
         CVD   R3,PACK                 USER COUNT
         MVC   CHAR,EDMSK
         ED    CHAR,PACK+4
         MVC   LINE(4),CHAR+4
         MVC   LINE+4(L'USERS),USERS
         CVD   R4,PACK                 INACTIVE INITIATOR COUNT
         MVC   CHAR,EDMSK
         ED    CHAR,PACK+4
         MVC   LINE+5+L'USERS(4),CHAR+4
         MVC   LINE+9+L'USERS(L'INACT),INACT
         CVD   R5,PACK                 TOTAL INITIATOR COUNT
         MVC   CHAR,EDMSK
         ED    CHAR,PACK+4
         MVC   LINE+10+L'USERS+L'INACT(4),CHAR+4
         MVC   LINE+14+L'USERS+L'INACT(L'INITS),INITS
         L     R1,16                   R1-> CVT
         L     R1,X'25C'(1)            R1-> RMCT
         L     R1,X'4'(1)              R1-> CCT
         LH    R1,X'66'(1)             R1 = SRM CPU UTILIZATION
         CVD   R1,PACK
         MVC   CHAR,EDMSK
         ED    CHAR,PACK+4
         MVC   LINE+15+L'USERS+L'INACT+L'INITS(4),CHAR+4
         MVC   LINE+19+L'USERS+L'INACT+L'INITS(L'CPU),CPU
         SPACE
         LA    R0,LINE                 LOAD POINTER TO OUTPUT LINE
         LA    R1,L'LINE-1             LENGTH
         LA    R15,SCRNMGR             PUT OUT COUNT MESSAGE
         BALR  R14,R15
         OI    PAGE,ENDLINES
         L     R1,DASTART
         LA    R0,SCREEN
         A     R0,LSCREEN
         SR    R0,R1
         ST    R0,LDA
GOTREPLY TM    PAGE,MOREPAGE
         BNO   CHKPAGE
         OI    PAGE,NOTPAGE1
         L     R1,DASTART
         LA    R1,LINE19(R1)
         ST    R1,DASTART
         XI    PAGE,MOREPAGE
         EJECT
CHKPAGE  DS    0H
         SPACE
**********************************************************************
*                                                                    *
*   IF LDA IS LESS THAN OR EQUAL TO 20 THAN WE CAN FIT ALL 20 LINES  *
*   ON ONE PAGE. IF LDA IS GREATER THAN 20, THEN WE WILL ONLY PUT    *
*   19 LINES ON THE PAGE.  THIS IS SO THAT THE FINAL STATISTICS LINE *
*   IS NEVER ON A PAGE BY ITSELF.                                    *
*                                                                    *
**********************************************************************
         SPACE 3
         CLC   LDA,LINES20
         BNH   ONEPAGE
         OI    PAGE,MOREPAGE
         L     R2,LDA
         S     R2,LINES19
         ST    R2,LDA
         LA    R1,LINE19(,R1)
         ST    R1,@ENDTPUT             R1 STILL CONTAINS DASTART
         B     DOSCREEN
         SPACE 2
ONEPAGE  LA    R1,SCREEN
         A     R1,LSCREEN
         ST    R1,@ENDTPUT
         SPACE 2
DOSCREEN DS    0H
         LA    R15,SCRNMGR
         BALR  R14,R15
         LA    R1,RESPONSE
         LA    R0,L'RESPONSE
         ICM   R1,B'1000',=X'81'       TGET ASIS OPTIONS
         TGET  (1),(0),R
         CLI   RESPONSE,C'7'
         BE    START
         CLI   RESPONSE,C'3'
         BE    RETURN
         CLI   RESPONSE,C'C'
         BE    RETURN
         OI    RESPONSE+6,C' '
         CLI   RESPONSE+6,C'Z'
         BE    RETURN
         CLI   RESPONSE+6,C'E'         SAM GOLOB WANTS 'E'...  10/26/90
         BE    RETURN                  SO LET'S MAKE HIM HAPPY 10/26/90
         CLI   RESPONSE+6,C'Q'         MIGHT AS WELL THROW IN  10/26/90
         BE    RETURN                  'Q' TOO                 10/26/90
         TM    PAGE,MOREPAGE
         BNO   START
         CLI   RESPONSE+6,C'F'
         BE    GOTREPLY
         B     START
         SPACE
SCRNMGR  SAVE  (2,4),,*
         TM    PAGE,NOTHING            NOTHING SPECIAL?
         BM    MANAGER2                YES,,,GO TO SECOND LEVEL
         LA    R2,SCREEN
         A     R2,LSCREEN              NEXT AVAILABLE BYTE IN SCREEN
         LR    R3,R1                   MOVE AREAS OF EQUAL SIZE
         L     R4,LSCREEN              CURRENT LENGTH OF SCREEN
         AR    R4,R3                   UPDATE LENGTH
         ST    R4,LSCREEN              STORE IT BACK
         MVCL  R2,R0                   PUT IT INTO SCREEN BUFFER
         RETURN (2,4)                  RESTORE WORK REGISTERS
         EJECT
**********************************************************************
*                                                                    *
*   MANAGER2 --- IF THIS IS PAGE 1 THEN ALL CONTROL CHARACTERS ARE   *
*             ALREADY TAKEN CARE OF.  IF NOT THAN THEY MUST BE       *
*             INSERTED BEFORE DASTART AND ALL APPROPRIATE POINTERS   *
*             MUST BE UPDATED.  IF THIS IS THE CASE THAN THE UPPER   *
*             PORTION OF THE SCREEN IS NOT ERASED AND THUS NOT       *
*             RETRANSMITTED.  IF THERE IS MORE INFO THAN WILL FIT ON *
*             THIS SCREEN THAN AN "F" NEEDS TO BE INSERTED AT THE    *
*             BOTTOM OF THE SCREEN WITH THE MODIFIED DATA TAG        *
*             ALREADY SET.                                           *
*                                                                    *
**********************************************************************
         SPACE 2
MANAGER2 DS    0H
         TM    PAGE,NOTPAGE1           SEE IF SBA"S NEED TO BE FOUND
         BNO   ISPAGE1                 NO,,, BRANCH AROUND SBA ROUTINE
         SPACE
SETSBA   LA    R0,LSBA
         L     R1,DASTART
         SR    R1,R0                   BUFFER START FOR TPUT
         ST    R1,TPUTSTRT
         MVC   0(LSBA,R1),WCCDA        MOVE IT TO TPUT BUFFER
         TM    PAGE,MOREPAGE
         BNO   TPUTIT
         MVI   EFF2(R1),C'F'
         B     TPUTIT
         SPACE 3
ISPAGE1  LA    R1,SCREEN
         ST    R1,TPUTSTRT             START OF TPUT ADDRESS FOR 1 PAGE
         TM    PAGE,MOREPAGE
         BNO   TPUTIT
         MVI   EFF(R1),C'F'
         SPACE 3
TPUTIT   DS    0H
         L     R2,@ENDTPUT             END OF TPUT BUFFER
         L     R3,TPUTSTRT             START OF TPUT BUFFER
         SR    R2,R3                   LENGTH OF BUFFER
         TPUT  (3),(2),FULLSCR
         RETURN (1,3)                  RESTORE WORK REGISTERS
         EJECT
RETURN   DS    0H
         TPUT  NEWSCRN,L'NEWSCRN,FULLSCR        CLEAR SCREEN
         STFSMODE OFF
         L     R13,4(,R13)             RESTORE REGISTER 13
         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE OF
*                                      GETMAINED AREA
         FREEMAIN R,LV=(0),A=(11)      FREE GETMAINED AREA
         SPACE
         SR    R15,R15                 RC = 0
         RETURN (14,12),,RC=(15)
         EJECT
DATD     DSECT
         DS    0F
SAVEAREA DS    18F
DASTART  DS    F
LDA      DS    F
LSCREEN  DS    F
@ENDTPUT DS    F
TPUTSTRT DS    F
@ASVT    DS    F                                               10/31/90
#ASVT    DS    F                                               10/31/90
RESPONSE DS    CL80
PAGE     DS    X
MOREPAGE EQU   X'80'
NOTPAGE1 EQU   X'40'
ENDLINES EQU   X'20'
NOTHING  EQU   X'FF'
PACK     DS    D
CHAR     DS    CL9
FLAGS    DS    X
STRTASK  EQU   X'80'              CURRENT ASID IS A STARTED TASK
         SPACE 3
LINE     DS    CL80
         ORG   LINE
         DS    C
LINEJOBN DS    CL8
         DS    CL1                                             10/30/90
LINEASID DS    CL4                                             10/30/90
         DS    CL3                                             10/30/90
LINESTEP DS    CL8
         DS    CL2
LINEPROC DS    CL8
         DS    CL2
LINEEXCP DS    CL8
         DS    CL3
LINECPU  DS    CL9
         DS    CL3
LINEST1  DS    CL1
LINEST2  DS    CL2
         DS    CL2
LINESTOR DS    CL7
LINEK    DS    CL1
         SPACE
         ORG
         DS    0D
SCREEN   DS    CL32768             YOU CAN INCREASE THIS IF YOU LIKE
         DS    0D
ENDDATD  EQU   *
         EJECT
DA       CSECT
NEWSCRN  DC    X'27F1115D7E114040133C404000'  CLEAR SCREEN
HEADER   DC    X'27F5'                 ESCAPE 5
         WCC   (FREEKB,FRSET)          UNLOCK KEYBOARD AND RESET MDT'S
         SBA   (24,1)
         SF    (UNPROT,IC,FSET,BRT)
EFF      EQU   *-HEADER
         DC    C' '
         SBA   (1,1)
         SF    (PROT,BRT)
         DC    CL80' JOBNAME  ASID   STEPNAME  PROCSTEP     EXCPS    CP*
               U TIME   ST   REAL STG'
         SBA   (2,1)
         SF    (PROT,NORM)
LHEADER  EQU   *-HEADER
         SPACE 5
WCCDA    WCC   (FREEKB,FRSET)
         SBA   (24,1)
         SF    (UNPROT,IC,FSET,BRT)
EFF2     EQU   *-WCCDA
         DC    C' '
         SBA   (2,1)
         RA    (23,80),CHAR='  '
         SBA   (2,1)
         SF    (PROT,NORM)
LSBA     EQU   *-WCCDA
         SPACE 5
LINES19  DC    F'1680'
LINES20  DC    F'1760'
LINE19   EQU   1680
SIZDATD  DC    AL1(0)
         DC    AL3(ENDDATD-DATD)
CONSTANT DC    F'10000'
EDMSK    DC    XL8'4020202020202120'
EDMSK2   DC    XL9'4020202020214B2020'
USERS    DC    C' ADDRESS SPACES'
INACT    DC    C' INACTIVE'
INITS    DC    C' TOTAL INITIATORS'
CPU      DC    C'% CPU UTILIZATION'
ASCBWORD DC    C'ASCB'
NOJOB    DC    CL8'   **   '
         SPACE
         LTORG
         SPACE
*ASVTENTY EQU   528                                            10/31/90
*ASCBTSB  EQU   60                                             10/25/90
*ASCBJBNI EQU   172                                            10/25/90
*ASCBJBNS EQU   176                                            10/25/90
CHUNIT   EQU   16
CHTRKID  EQU   20
CHTSID   EQU   X'01'
CHINITID EQU   X'03'
CHCLS    EQU   8
CHSTEP   EQU   56
CHPROCSN EQU   24
OUCBIOSM EQU   108
         IHAASCB ,                 ADDRESS SPACE CONTROL BLOCK 10/25/90
         IHAASVT ,                 ADDRESS SPACE VECTOR TABLE  10/31/90
         SPACE 2
         CVT   DSECT=YES,LIST=NO
         END   DA
/*
