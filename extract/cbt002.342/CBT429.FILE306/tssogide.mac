1








                                TSSO User's Guide

                                   Version 1.5

                                  June 14, 1982




                 Written by Bill Godfrey, Planning Research Corporation

1


     1.  Function

         TSSO is a Subsystem for the MVS Operating System that allows
         many TSO commands to be entered on an operator console.
         The letters TSSO do not stand for anything but are
         used because they are close to "TSO" and have a double "S"
         for Sub-System.

     2.  Starting TSSO

         To start TSSO, enter the following command on a console:

            S TSSO

         If TSSO is was already started, the one you start will
         detect that situation, issue a message to that effect,
         and just go away.

         When TSSO startup is complete, it will issue the following
         message:

            & CONNECTED

         The ampersand (&) in front of the word 'CONNECTED' is the
         "Command Character".  This means that any commands you
         type in that are to be processed by TSSO must have this
         character as the first character in the line.  We have
         chosen the ampersand as the Command Character, and it will
         be used in all examples.  The character can be changed
         by a PARM field option in the TSSO JCL.

     3.  Entering a TSO command on a console.

         To enter a TSO command, type in an ampersand and then the
         TSO command.  For example:

            &LISTDS SYS1.HELP

         The results of the command will appear on the console
         from which the command was entered.

         If there are more than 30 lines of output, only the
         first 30 will appear on the console.  This restriction
         is to prevent system WTO buffers from filling up.

     4.  Stopping TSSO

         To stop TSSO,  enter the following command on a console:

            &LOGOFF
         or
            &P





1


         It is also safe to cancel TSSO, i.e.,

            C TSSO

         in which case an ESTAE exit will disconnect TSSO
         from the subsystem interface.

     5.  The PUTLINE restriction.

         Not all TSO commands can be used under TSSO.  Commands
         that write to the terminal using the TPUT macro will
         not generate any output to the console. Nor will commands
         that write to the terminal by an access method (using a DCB).
         Since SPF uses TPUT, it cannot be used.
         Only commands that use the PUTLINE macro will generate
         output that TSSO can show on the console.  Most of IBM's
         standard TSO commands use PUTLINE.

     6.  The Problem of Isolation

         Unfortunately there is an annoying limitation in the way
         TSSO currently works: each line you type in operates in
         almost complete isolation from any you typed in previously.
         This problem is best shown by example.  If you type in
         an EDIT command, you will not be in EDIT mode on the next
         line.  If you type in a PROFILE PREFIX(XXXX) command,
         your prefix will not be XXXX on the next line.
         Fortunately, if you type in an ALLOC command, the allocation
         will still be in effect for subsequent commands, so some
         degree of sequential processing can be achieved.

         Two TSO commands, STACK and EF, have been written to ease
         this isolation problem somewhat.

         The Internals section of this document gives a brief
         explanation of the reason this problem exists.

     7.  The STACK command

         The STACK command allows more than 1 command to be typed
         on a line. For example, to EDIT a data set and find
         the first line containing the string "ABC"

            &STACK EDIT 'USER.DATA' DATA;FIND /ABC/;LIST *

         The semicolon is used to separate the commands.  If you
         want to use a semicolon in a command, use two semicolons
         in a row. The STACK command will convert a pair of semi-
         colons to one semicolon and not treat it as a separator.

         The STACKL command is like STACK but also lists the commands,
         having the same effect as the LIST keyword of EXEC.





1


     8.  The EF command

         If you are going to be editing a data set many times
         it can get tiresome to have to type in the EDIT command
         and the data set name over and over again.
         That's why EF was written.  If you allocate to filename
         EDITFILE the data set you want to edit, the EF command
         will build an EDIT command containing the data set name
         and will append edit subcommands to that edit command.

         An example will show best how useful it is.  Lets say
         you want to edit data set 'USER.DATA'.

            &ALLOC FI(EDITFILE) DA(USER.DATA)

         List the first line.

            &EF LIST *

         The EF command above built the following TSO commands:
            EDIT 'USER.DATA' DATA OLD
            LIST *

         List the last line.

            &EF BOTTOM;LIST *

         The EF command above built the following TSO commands:
            EDIT 'USER.DATA' DATA OLD
            BOTTOM
            LIST *

         Find the first line that contains "ABC".

            &EF F /ABC/;LIST *

         Change that ABC to XYZ and save the change.

            &EF VERIFY;F /ABC/;C /ABC/XYZ/;SAVE

         Note that if you do not do the SAVE, the change will
         not be saved, even if you do a SAVE on the next EF
         because the next EF is not in the same EDIT mode
         as the previous EF.

         To edit a data set without sequence numbers (NONUM)
         use the EFN command instead of EF.










1


     9.  Continuation

         When typing in a long line of TSO commands, you can
         continue a line by ending the line with a hyphen.
         The next line you type in will be appended to the
         line that ended with a hyphen.  For example

            &listds sy-
            &s1.hel-
            &p

         is the same as

            &listds sys1.help

         The continuation lines must all be typed in on the
         same console.   If TSSO receives a command from any other
         console while continuation is in progress, the continuation
         will be lost and a warning message to that effect will
         be issued.

     10. Re-display

         TSSO alway has access to a file containing the output
         from the last TSO command processed.
         To re-display that output without re-running the command,
         type in the following:

         &L

         To redisplay the output on another console (such as a
         hard-copy printer for example), type in

         &L=n

         Where n is the Console I.D.

         Note: TSSO can tell when you are using the 'L' TSO command
         (the alias of LIST) by the fact that the "L" is followed by
         a space and then an operand.  For example,

         &L SYS1.PROCLIB(TSSO)

         Re-display is limited to a maximum of 30 lines of output,
         but there may be more than 30 lines saved for re-display.
         You can skip down past a specified number of lines and
         display up to 30 more lines. For example,

         &L+20     will list up to 30 lines starting at the 21st line.

         If you only want to re-display a specific number of lines,

         &L/2      will list only the first 2 lines.

         &L+6/1    will list only the 7th line.


1


     11. Internals

         This section, not required reading, briefly describes
         what goes on inside TSSO.

         TSSO runs as a subsystem under MVS.  Being a subsystem,
         it can run even if the primary subsystem (usually JES2
         or JES3) is not running.  This makes it a useful tool
         for repairing JES problems when JES will not start.

         Another advantage of being a subsystem is that it can
         look at every command that is typed in on operator
         consoles (or that is issued internally).  It ignores
         commands that do not begin with it's special "Command
         Character", and tells MVS that those commands that do
         begin with the Command Character are not errors.

         Each time TSSO sees one of its TSO commands typed in
         on a console, it invokes IKJEFT01, the IBM TSO Terminal
         Monitor Program, passing the TSO command in the PARM
         field.  Since TSSO is not in a TSO address space,
         IKJEFT01 sets up a background environment wherein it
         reads TSO commands from DDNAME SYSTSIN (which is DUMMY)
         and writes all PUTLINE output to DDNAME SYSTSPRT (which
         is a temporary DASD or VIO data set).  IKJEFT01 executes
         the command passed to it in the PARM field, and ends.
         Then TSSO reads all the data in the SYSTSPRT file and
         writes each line to the console that typed in the command.

         Since IKJEFT01 is invoked for each line typed in (except
         when continuation is used), things like EDIT and PROFILE
         do not stay in effect from one line to the next.

         Since TPUT's are no-ops in a background environment,
         SPF and other commands that use TPUT will not work
         under TSSO.

         Bear in mind if you get annoyed by the limitations of TSSO
         that the reason it was written was not to provide the function
         of using consoles as TSO terminals. It was written as an
         exercise in writing a subsystem, to see how the subsystem
         console monitoring feature works.  It turned out to be
         more useful than we expected.

         TSSO was written by Bill Godfrey, of Planning Research
         Corporation, Mclean, Virginia.

