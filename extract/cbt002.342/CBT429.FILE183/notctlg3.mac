//GILBERTN JOB (ACCT#),NOTCTLG3,
//*RESTART=EXECPROC.FROM,
// CLASS=A,MSGCLASS=X
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
***********************************************************************
*                                                                     *
*        REPLACEMENT FOR CZX3PSRC                                     *
*                                                                     *
*        1.  PREVENTS "NOT CATLG 2" CONDITIONS                        *
*        2.  VERIFY VSAM DATA SETS                                    *
*                                                                     *
*        WARNING: The detection of NOT CATLG 2 situations only        *
*        occurs when the program's own STEP name is "FROM".           *
*                                                                     *
***********************************************************************
NOTCTLG3 CSECT
NOTCTLG3 RMODE ANY
         SAVE  (14,12),,'GSF UTILITIES - NOTCTLG3 R201'
         BALR  R11,0
         USING *,R11
         L     R2,0(,R1)               PARM FROM JCL
         STORAGE OBTAIN,LENGTH=DYNL,BNDRY=PAGE ALLOCATE DYNAMIC STORAGE
         ST    R13,4(,R1)              SAVE SAVE AREA ADDRESS
         LR    R13,R1                  NEW SAVE AREA
         USING DYN,R13
         LA    R0,CATNAME              WORK AREA
         LA    R1,WORK26               WORK AREA
         STM   R0,R1,CTGPL1+8          ADDR OF CATALOG NAME, WORK AREA
         ST    R1,CTGPL6+12            ADDRESS OF WORK AREA
         ST    R1,CAML26+12            ADDRESS OF WORK AREA
*
*        PROCESS PARM (GET RETURN CODE VALUE IN BINARY)
*
         LH    R15,0(,R2)              PARM LENGTH
         BCTR  R15,0
         PACK  RETCODE,2(*-*,R2)       RETURN CODE
         EX    R15,*-6                 EXECUTE PACK INSTRUCTION
         CVB   R10,RETCODE             GET RETCODE, CHECK FOR A S0C7
*
         L     R1,X'021C'              MY TCB (PSATOLD-PSA)
         L     R4,TCBJSCB-TCB(,R1)     MY JSCB
         USING IEZJSCB,R4
         L     R5,JSCBJCT              GET JCT ADDRESS
         USING JCT,R5
         L     R6,JSCSCT               CURRENT STEP'S SCT PREFIX
         USING SCT,R6
**       CLC   =C'FROM ',SCTSCLPC      PROCSTEP
**       BE    LOOPSCT
         CLC   =C'FROM ',SCTSNAME      STEP=FROM?
         BNE   RETURN                  IT'S NOT THE RIGHT STEP, I QUIT
*LOOP
LOOPSCT  CLC   SCTSDPSA,JSCSCT+1       COND MUST REFER TO MY STEP
         BNE   NEXTSTEP                IT'S NOT THE CASE, TRY NEXT STEP
         CH    R10,SCTSDPCD            COND=(54,LT,FROM)
         BH    NEXTSTEP                STEP TO BE BYPASSED
         ICM   R1,B'0111',SCTFSIOT     PREFIX OF 1ST SIOT
         BZ    NEXTSTEP                NO MORE DDS, TRY NEXT SCT
*--LOOP
LOOPSIOT BAL   R9,SWAREQ               CONVERT SVA TO 31-BIT ADDRESS
         LR    R7,R1                   PASS SIOT ADDRESS
         USING SIOT,R7
         ICM   R1,B'0111',SCTPJFCB     JFCB PREFIX
         BAL   R9,SWAREQ               CONVERT SVA TO 31-BIT ADDRESS
         LR    R8,R1                   PASS JFCB ADDRESS
         USING JFCB,R8                 DSNAME FROM JFCB
         MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE
*
         TM    SCTSDISP,2              DISP=(,CATLG) ?
         BNO   VSAM00                  JUMP, DISP IS NOT CATLG
         TM    SCTSBYT3,4              DISP=NEW
         BO    DISPOK                  JUMP IF DISP=NEW
         TM    SCTSBYT3,2              DISP=MOD
         BNO   NEXTSIOT                EXIT IF NOT NEW OR MOD
DISPOK   TM    JFCBIND1,JFCGDG         CHECK FOR (+1)
         BO    NEXTSIOT                JUMP, THIS IS A GDG
         LOCATE CAML26
         LTR   R15,R15
         BNZ   NEXTSIOT                DATA SET NOT CATALOGED
         CLI   MSG2DSN,C' '            CHECK DSNAME
         BNE   NOTFIRST                NOT FIRST ERROR, JUMP
         WTO   MF=(E,BLANKLNE)         BLANK LINE
         WTO   MF=(E,BLANKLNE)         BLANK LINE
NOTFIRST MVC   MSG2STEP,SCTSNAME       STEPNAME
         MVC   MSG2DDN,SCTDDNAM        DDNAME
         MVC   MSG2DSN,JFCBDSNM        DSNAME
         WTO   MF=(E,MSG2)             ISSUE "ALREADY CATALOGED" MSG
         B     NEXTSIOT
*
*        SELECT VSAM DATA SETS
*
VSAM00   CLI   JFCDSRG2,JFCORGAM       AMP='AMORG' ON DD?
         BE    VSAM10                  YES, IT'S A VSAM DATA SET
         CLC   =C'PPV.',JFCBDSNM       /// FILTER
         BNE   NEXTSIOT                NOT VSAM, JUMP
*
VSAM10   LA    R1,VSTABLE              ADDRESS OF VSAM DSN TABLE
*--LOOP
VSAM20   ICM   R2,B'1111',0(R1)        PTR TO JFCBDSNM
         BZ    VSAM30                  END OF TABLE, QUIT
         CLC   JFCBDSNM,0(R2)          SAME DSN?
         BE    NEXTSIOT                YES, DSN PROCESSED ALREADY
         LA    R1,4(,R1)               BUMP UP TABLE POINTER
         B     VSAM20                  LOOP THRU VSAM TABLE
*----ENDLOOP
VSAM30   LA    R0,JFCBDSNM             ADDR OF DSNAME
         ST    R0,0(,R1)               ADD NEW ENTRY TO VSTABLE
         BAL   R9,VERIFY00             GO VERIFY THE VSAM DATA SET
*
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     NEXT SIOT'S PREFIX
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP
*--ENDLOOP
         DROP  R7,R8                   WERE SIOT, JFCB
NEXTSTEP ICM   R6,B'0111',SCTANSCT     NEXT SCT PREFIX
         BNZ   LOOPSCT                 PROCESS NEXT STEP
*ENDLOOP
ENDSCT   CLI   MSG2DSN,C' '            CHECK FOR AN ERROR
         BE    RETURN                  NO ERRORS, RETURN.
         WTO   MF=(E,BLANKLNE)         BLANK LINE
         WTO   MF=(E,BLANKLNE)         BLANK LINE
*
*        IF THE STEP IS AUTHORIZED, SET THE "JOB FAILED" BIT ON
*        IN THE JCT.  IF THE STEP ISN'T AUTHORIZED, ISSUE AN ABEND.
*        THE ADVANTAGE OF A "JOB FAILED" IS THAT COND=EVEN STEPS
*        ARE NOT EXECUTED.
*
         TM    JSCBOPTS,JSCBAUTH       TEST AUTHORIZATION
         BZ    ABEND88                 JUMP IF NOT AUTHORIZED.
         MODESET KEY=ZERO              CHANGE TO KEY 0
         OI    JCTJSTAT,INCMSTS        TURN ON "JOB FAILED" BIT
*
RETURN   LR    R1,R13                  PASS ADDR FOR FREEMAIN
         L     R13,4(,R13)
         STORAGE RELEASE,LENGTH=DYNL,ADDR=(1) FREE DYNAMIC STORAGE
         LR    R15,R10                 RETURN CODE FROM PARM
         RETURN (14,12),RC=(15)
ABEND88  ABEND 2088                    AT LEAST 1 CATALOGED DATA SET
***********************************************************************
*                                                                     *
*        SUB-ROUTINE USED TO ACCESS THE SWA MANAGER                   *
*                                                                     *
***********************************************************************
SWAREQ   ICM   R1,B'1000',16(0)        CLEAR FIRST BYTE
         TM    JCTSTAT2,JCTSWAUP       CHECK SWA PLACEMENT
         BZR   R9                      SWA BELOW, BYPASS SWAREQ
         LA    R2,WORK26               WORK AREA
         ST    R2,EPAPTR               STORE POINTER
         USING ZB505,R2
         XC    SWAEPAX,SWAEPAX         CLEAR 32 BYTES
         STCM  R1,B'0111',SWVA         STORE 3-BYTE SVA
         SWAREQ FCODE=RL,EPA=EPAPTR,MF=(E,SWAREQL1),UNAUTH=YES
         L     R1,SWBLKPTR             LOAD SWA CONTROL BLOCK ADDRESS
         SH    R1,=H'16'               SUBTRACT LENGTH OF PREFIX
         BR    R9
         DROP  R2,R5                   WERE ZB505, JCT
*---------------------------------------------------------------------*
*                                                                     *
*        WORK AREAS FOR NOT-CATLG 2 FUNCTION                          *
*                                                                     *
*---------------------------------------------------------------------*
BLANKLNE WTO   '****',ROUTCDE=14,MF=L  BLANK LINE FOR READABILITY
&STR     SETC  (44)' '
MSG2     WTO   '**** ALREADY CATALOGED: SSSSSSSS DDDDDDDD &STR',       X
               ROUTCDE=(11,14),MF=L
MSG2STEP EQU   MSG2+28+00,8            STEPNAME
MSG2DDN  EQU   MSG2+28+09,8            DDNAME
MSG2DSN  EQU   MSG2+28+18,44           DSNAME
CAML26   CAMLST NAME,DSNAME,,WORK26-WORK26
***********************************************************************
*                                                                     *
*        VERIFY A VSAM DATA SET IF IT NEEDS TO                        *
*                                                                     *
***********************************************************************
VERIFY00 MVI   CATNAME,C' '            LOCATE RETURNS THE CATALOG NAME
         MVC   WORK26(4),=Y(L'WORK26,0)  FORMAT WORK AREA HEADER
         LOCATE CTGPL1                 LISTCAT CATACB/NAMEDS/ENTIDNO
         LTR   R15,R15
         BNZ   VERIFY99                NOT CATALOGED, QUIT
         L     R15,CTGFLDA1+4          TCCC (TYPE, CI NUMBER)
         LA    R15,1(,R15)             CCC (CI NUMBER)
         L     R0,CTGFLDA2+4           AAAA (CAT ACB ADDRESS)
         STM   R15,R0,CTGPL6+4         STORE INTO CTGENT, CTGCAT
         LOCATE CTGPL6                 LISTCAT OPENIND/ENTNAME
         LTR   R15,R15
         BNZ   VERIFY99
         L     R1,CTGFLDA6+4           ADDRESS OF OPENIND
         CLI   0(R1),X'80'             CHECK OPENIND
         BNE   VERIFY99                DATA SET NOT OPEN
         L     R2,CTGFLDA7+4           ADDRESS OF DATA COMPONENT NAME
         LR    R14,R2                  POINT PAST NAME
VERIFYL1 LA    R14,1(,R14)             BUMP UP TO NEXT BYTE
         CLI   0(R14),C' '
         BNE   VERIFYL1                FIND FIRST BLANK AFTER NAME
         MVC   0(44,R14),CATNAME       CONCATENATE CATALOG NAME
         LR    R15,R14                 LENGTH OF COMPONENT NAME
VERIFYL2 LA    R15,1(,R15)             BUMP UP TO NEXT BYTE
         CLI   0(R15),C' '
         BNE   VERIFYL2                FIND FIRST BLANK AFTER NAME
         LR    R1,R15                  KEEP ADDR OF 1ST BLANK
         SR    R15,R14                 LENGTH OF CATALOG NAME
         SR    R14,R2                  LENGTH OF COMPONENT NAME
         LA    R3,4(R14,R15)           LENGTH OF RNAME
         STC   R3,0(,R1)               LENGTH OF RNAME
         STC   R14,1(,R1)              LENGTH OF COMPONENT NAME
         STC   R15,2(,R1)              LENGTH OF CATALOG NAME
         MVI   3(R1),C'O'              OPENED FOR OUTPUT
         GQSCAN AREA=(WORK26,L'WORK26), ADDR & LENGTH OF INFO RETURNED X
               REQLIM=1,               MAX NUM OF OWNERS TO BE RETURNEDX
               SCOPE=ALL,              ALL SYSTEMS IN GRS RING         X
               RESNAME=(QNAME1,(R2),(R3)),                             X
               MF=(E,GRSWORK)          WORK AREA
         LTR   R15,R15
         BZ    VERIFY99                DATA SET IS OPEN
         LA    R1,=A(S99RB+VL)
         SVC   99                      ALLOCATE VSAM DATA SET
         LTR   R15,R15
         BNZ   VERIFY99                DYNALLOC FAILED
         MVC   ACB1DDN,S99T1+6         MOVE SYS12345 DDNAME
         OPEN  ACB1,MODE=31            OPEN ACB FOR AUTOMATIC VERIFY
         CLOSE ACB1,MODE=31            CLOSE/FREE
VERIFY99 BR    R9                      GOBACK TO MAIN LOOP
QNAME1   DC    C'SYSVSAM '             QNAME FOR VSAM OPEN
*---------------------------------------------------------------------*
*                                                                     *
*        DYNAMIC ALLOCATION OF A VSAM DATA SET                        *
*                                                                     *
*---------------------------------------------------------------------*
S99RB    DC    A(X'14010000',0,S99TUPL,0,0)
S99TUPL  DC    A(S99T1,S99T2,S99T4+VL)
S99T1    DC    XL2'55,1,8',C'$$VERIFY' DDNAME
S99T2    DC    AL2(2,1,44),CL44' '     DSNAME
DSNAME   EQU   S99T2+6,44
S99T4    DC    AL2(4,1,1),X'08'        DISP=SHR
*---------------------------------------------------------------------*
*                                                                     *
*        CATALOG PARM LIST FOR LISTCAT (NAMEDS,CATACB)                *
*                                                                     *
*---------------------------------------------------------------------*
CTGPL1   DC    A(X'06408100',DSNAME,CATNAME-CATNAME,WORK26-WORK26)
         DC    X'2000',C' ',X'02'
         DC    A(0,0,CTGFL1,CTGFL2)
CTGFL1   DC    A(X'01000000',0,FLDNM1,0)
CTGFLDA1 DC    2A(0)
FLDNM1   DC    CL8'NAMEDS'             DATA/INDEX CI NUMBERS
CTGFL2   DC    A(X'01000000',0,FLDNM2,0)
CTGFLDA2 DC    2A(0)
FLDNM2   DC    CL8'CATACB'             ADDRESS OF CATALOG'S ACB
*---------------------------------------------------------------------*
*                                                                     *
*        CATALOG PARM LIST FOR LISTCAT (OPENIND/ENTNAME,HURBADS)      *
*                                                                     *
*---------------------------------------------------------------------*
CTGPL6   DC    A(X'00408100',*-*,*-*,WORK26-WORK26)
         DC    X'2000',C'D',X'03'
         DC    A(0,0,CTGFL6,CTGFL7,CTGFL8)
CTGFL6   DC    A(X'01000000',0,FLDNM6,0)
CTGFLDA6 DC    2A(0)
FLDNM6   DC    CL8'OPENIND'            OPEN INDICATOR
CTGFL7   DC    A(X'01000000',0,FLDNM7,0)
CTGFLDA7 DC    2A(0)
FLDNM7   DC    CL8'ENTNAME'            NAME OF ENTRY
CTGFL8   DC    A(X'01000000',0,FLDNM8,0)
CTGFLDA8 DC    2A(0)
FLDNM8   DC    CL8'HURBADS'            HIGH USED RBA
*---------------------------------------------------------------------*
*                                                                     *
*        ACB USED TO VERIFY VSAM DATA SETS                            *
*                                                                     *
*---------------------------------------------------------------------*
ACB1     ACB   DDNAME=$$VERIFY,MACRF=(ADR,SEQ,OUT)
ACB1DDN  EQU   ACB1+40,8               DDN POSITION IN ACB
*---------------------------------------------------------------------*
*                                                                     *
*        DYNAMIC STORAGE AREA                                         *
*                                                                     *
*---------------------------------------------------------------------*
DYN      DSECT
SAVEAREA DS    18F
RETCODE  DS    D
SWAREQL1 SWAREQ MF=L                   PARM LIST FOR SWAREQ
EPAPTR   DS    F                       POINTER TO EPA (ZB505)
CATNAME  DS    CL44                    CATALOG NAME
GRSWORK  GQSCAN MF=L
WORK26   DS    XL512                   SVC26
VSTABLE  DS    1000A(JFCBDSNM)         VSAM DSN TABLE
DYNL     EQU   (((*-DYN+4095)/4096)*4096)
*---------------------------------------------------------------------*
*                                                                     *
*        DSECTS FOR SWA/LSQA CONTROL BLOCKS                           *
*                                                                     *
*---------------------------------------------------------------------*
VL       EQU   X'80000000'
         YREGS                         SYS1.MACLIB
         IEFZB505 LOCEPAX=YES          EPA MAPPING FOR SWAREQ
         EJECT
         IEFJESCT TYPE=DSECT           JES CONTROL TABLE
         EJECT
         IKJTCB LIST=NO                SYS1.MODGEN
         EJECT
         IEZJSCB ,                     SYS1.AMODGEN
         EJECT
JCT      DSECT
         DS    XL16                    PREFIX
         IEFAJCTB ,                    SYS1.AMODGEN
         EJECT
SCT      DSECT
         DS    XL16                    PREFIX
         IEFASCTB ,                    SYS1.AMODGEN
         EJECT
SIOT     DSECT
         DS    XL16                    PREFIX
         IEFASIOT ,                    SYS1.AMODGEN
         EJECT
JFCB     DSECT
         DS    XL16                    PREFIX
         IEFJFCBN ,                    SYS1.AMODGEN
         CVT   LIST=NO,DSECT=YES       COMMUNICATION VECTOR TABLE
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MODGEN
//         DD DISP=SHR,DSN=SYS1.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//LKED    EXEC PGM=HEWL,PARM='MAP,AC=1',COND=(0,NE,ASMH)
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(CZX3PSRC)
//SYSPRINT DD SYSOUT=*
//*
//DD2## DD DISP=(MOD,DELETE),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//DD2   DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//DD3   DD DISP=(MOD,DELETE),DSN=GILBERT.NOTCTLG3,UNIT=3380,SPACE=(1,0)
//*
//PROC    PROC
//FROM    EXEC PGM=CZX3PSRC,PARM=54
//STEPLIB  DD DISP=SHR,DSN=GILBERT.LOAD
//ABNLTERM DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//*
//STEP53  EXEC PGM=IEFBR14,COND=(53,LT,FROM)
//DDCAT2 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//*
//STEP54  EXEC PGM=IEFBR14,COND=(54,LT,FROM)
//DDCAT2 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//*
//STEP55  EXEC PGM=IEFBR14,COND=(55,LT,FROM)
//DDCAT5 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG3,UNIT=3380,SPACE=(1,0)
//*
//STEP56  EXEC PGM=IEFBR14,COND=(56,LT,FROM)
//DD6A DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2(+1),UNIT=3380,SPACE=(1,0)
//DD6B DD DISP=(MOD,CATLG),DSN=GILBERT.NOTCTLG2(MM),
// UNIT=3380,SPACE=(1,0)
//VFY  DD DISP=SHR,DSN=PPV.VFY
//*
//STEP57  EXEC PGM=IEFBR14,COND=(57,LT,FROM)
//VFY  DD DISP=SHR,DSN=GILBERT.VFY2,AMP='AMORG'
//        PEND
//*
//EXECPROC EXEC PROC
