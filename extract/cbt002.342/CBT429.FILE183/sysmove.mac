//GILBERTM JOB (ACCT#),SYSMOVE,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
*PROCESS BATCH,USING(NOMAP,WARN(8))
***********************************************************************
*                                                                     *
* MODULE NAME = SYSMOVE                                               *
*                                                                     *
* DESCRIPTIVE NAME = Unload a PDS in IEHMOVE format                   *
*                                                                     *
* FUNCTION = The SYSMOVE program unloads a PDS to a sequential        *
*        data set in IEHMOVE format.  The resulting data set          *
*        (which is DSORG=PS,RECFM=FB,LRECL=80) can be written to      *
*        disk or tape, and later used as input to IEHMOVE to          *
*        reload the original PDS.                                     *
*                                                                     *
* STATUS = R403                                                       *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REUSABLE, RMODE 24, AMODE 24,                       *
*                 PROBLEM STATE, KEY 8                                *
*                                                                     *
* OPERATION = See Below                                               *
*                                                                     *
*        Sample invocation JCL:                                       *
*                                                                     *
*            //UNLOAD EXEC PGM=SYSMOVE                                *
*            //SYSPRINT DD SYSOUT=*                                   *
*            //SYSUT1   DD DSN=INPUT.PDS,DISP=SHR                     *
*            //SYSUT2   DD DSN=OUTPUT.FLAT,DISP=(,CATLG),             *
*            // UNIT=SYSDA,SPACE=(TRK,(50,50),RLSE)                   *
*                                                                     *
*        Notes:                                                       *
*                                                                     *
*          1. SYSMOVE is fully compatible with SMS (which is not the  *
*             case with IEHMOVE).                                     *
*                                                                     *
*          2. SYSMOVE imposes no restriction on the BLKSIZE of SYSUT2 *
*             which can be any multiple of 80 you choose.  However,   *
*             in order for IEHMOVE to reload it successfully, the     *
*             BLKSIZE of the unloaded data set must be 800.           *
*                                                                     *
*          3. SYSMOVE does not support NOTE lists (as created by the  *
*             linkage editor for load-modules in overlay format).     *
*                                                                     *
*          4. SYSMOVE can unload a full PDS or a single member.       *
*             If you want to unload several PDS's and/or selected     *
*             members, use the merge/selection capabilities of        *
*             IEBCOPY to create a temporary PDS, then run SYSMOVE     *
*             to unload it.                                           *
*                                                                     *
*          5. SYSMOVE is a convenient way to distribute a PDS         *
*             via a network; see "usage notes", below.                *
*                                                                     *
*          6. SYSMOVE can be used recursively to distribute several   *
*             PDSs as a single FB/80 file: unload each PDS with       *
*             SYSMOVE into a temporary FB/80, unload the temporary    *
*             PDS with SYSMOVE, and ship the resulting sequential     *
*             data set.  The receiver can use IEBGENER to copy each   *
*             member to a sequential data set and feed it to          *
*             IEHMOVE to reload each of the initial PDSs.             *
*                                                                     *
*          7. unloaded PDS's in IEHMOVE format can be processed       *
*             in CMS with the TAPEMAC and TAPPDS commands.            *
*                                                                     *
*                                                                     *
* ABENDS:     U0013 OPEN Failed, probably because a DD is missing     *
*                                                                     *
* USAGE NOTES: See below                                              *
*                                                                     *
*    Using SYSMOVE to distribute a PDS on PC diskettes.               *
*                                                                     *
*        SYSMOVE provides a convenient way to distribute a PDS via    *
*        PC diskette, using the following procedure:                  *
*                                                                     *
*          1. unload the PDS with SYSMOVE                             *
*                                                                     *
*          2. download the unloaded data set to a PC in EBCDIC        *
*             using the "RECEIVE" command:                            *
*                                                                     *
*                 RECEIVE pc_file_name unloaded_data_set_name         *
*                                                                     *
*          3. pack the PC file with PKZIP (or equivalent)             *
*                                                                     *
*          4. copy the packed file to a diskette                      *
*                                                                     *
*          5. send the diskette out; whoever you send it to           *
*             does not need SYSMOVE to process it.                    *
*                                                                     *
*       On the receiving MVS system, re-create the PDS as follows:    *
*                                                                     *
*          1. unpack the diskette file (if it's been packed)          *
*                                                                     *
*          2. upload the unpacked file in EBCDIC                      *
*             using the "SEND" command:                               *
*                                                                     *
*                 SEND pc_file_name unloaded_data_set_name            *
*                      recfm(fb) lrecl(80) blksize(800)               *
*                                                                     *
*          3. load the uploaded data set into a PDS                   *
*             using IEHMOVE:                                          *
*                                                                     *
*             //RELOAD EXEC PGM=IEHMOVE,PARM='POWER=4',REGION=2M      *
*             //SYSUT1 DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=nonsms       *
*             //DD1    DD DISP=SHR,DSN=GILBERT.UNLOAD   INPUT VOLUME  *
*             //DD2    DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=nonsms       *
*             //SYSPRINT DD SYSOUT=*                                  *
*                COPY      DSNAME=GILBERT.UNLOAD,                    X*
*                          TO=3380=nonsms,                           X*
*                          RENAME=GILBERT.MYPDS,                     X*
*                          CATLG                                      *
*                                                                     *
*       NOTE:  You may NOT specify SMS-managed volumes for either     *
*              SYSUT1 (work files) or the output volume (DD2 in       *
*              this example).  IEHMOVE uses SVC 32 (REALLOC), not     *
*              dynamic allocation, and SVC 32 does not support        *
*              SMS-managed volumes.                                   *
*                                                                     *
*CHANGE ACTIVITY                                                      *
*                                                                     *
*$401 Build DIRTABLE and process ALIAS entries like IEHMOVE:          *
*        1. If an ALIAS has no corresponding member, turn off         *
*           the ALIAS indicator in the directory entry                *
*        2. Do not write the data pointed to by ALIAS entries,        *
*           instead, write the directory entries immediately          *
*           after the corresponding main member's data.               *
*$402 Print number of records and bytes written to SYSUT2             *
*$403 If a member name is specified on SYSUT1, unload only this member*
***********************************************************************
&REL     SETC  '403'                   Current version/release
SYSMOVE  CSECT
         SAVE  (14,12),,'GSF UTILITIES - SYSMOVE R&REL'
         LR    R12,R15
         USING SYSMOVE,R12
         GETMAIN R,LV=DYNAML           GET DYNAMIC STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LA    R14,72(,R1)             CLEAR WORKING STORAGE
         LA    R15,DYNAML-72           CLEAR WORKING STORAGE
         SLR   R1,R1                   CLEAR WORKING STORAGE
         MVCL  R14,R0                  CLEAR WORKING STORAGE
         LM    R13,R1,8(R13)
         USING DYNAM,R13
         L     R2,0(,R1)               point to PARM field
*
         OPEN  MF=(E,OPENLIST)         OPEN DATA SETS
         LTR   R15,R15                 OPEN OK?
         BZ    TITLE1                  YES, JUMP
         ABEND 13,REASON=(15)       <- OPEN failed
***********************************************************************
*                                                                     *
*        Print the Title Line on SYSPRINT                             *
*                                                                     *
***********************************************************************
TITLE1   TIME  DEC                     get time, date
         STM   R0,R1,DWD               R0=HHMMSSHH,R1=00YYDDDF
         LH    R3,0(,R2)               parm length
         STRING '1GSF UTILITIES - SYSMOVE R&REL  ',                    X
               (DWD+4,P,YY/MM/DD),2X,        YY/MM/DD                  X
               (DWD+0,1,X),':',(DWD+1,1,X),  HH:MM                     X
               '  PARM=''',(2(R2),(R3)),'''',                          X
               INTO=LINE
         PUT   SYSPRINT,LINE           print title line
*
         LA    R0,JFCB1                JFCB IN DYNAMIC STORAGE
         STCM  R0,B'0111',EXL1+1       UPDATE EXIT LIST
         RDJFCB SYSUT2                 READ THE JFCB (SYSUT2)
         MVC   JFCB2,JFCB1             save the SYSUT2 JFCB
*
         RDJFCB MF=(E,OPENDIRL)        READ THE JFCB (SYSUT1)
*
*        Save the member name specified on the SYSUT1 DD
*
         MVI   UT1MBR,FF               no member
         TM    JFCBIND1,JFCPDS         member name specified on sysut1?
         BNO   PASS1                   no, jump
         NI    JFCBIND1,FF-JFCPDS      NO MEMBER
         MVC   UT1MBR,JFCBELNM         SAVE MEMBER NAME
***********************************************************************
*                                                                     *
*        READ THE DIRECTORY                                           *
*                                                                     *
*           1. READ SYSUT1 DIRECTORY                                  *
*           2. COUNT DIRECTORY ENTRIES                                *
*           3. COUNT DIRECTORY BLOCKS AFTER LOGICAL END OF DIRECTORY  *
*                                                                     *
***********************************************************************
PASS1    OPEN  MF=(E,OPENDIRL),TYPE=J  OPEN DIRECTORY
         USING PDS2,R6
*LOOP
PASS1A   BAL   R9,GETDIR            <- GET DIRECTORY ENTRY
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?
         BE    PASS1F                  YES, EXIT
         AL    R0,DIRTABLE             tally directory entry sizes
         ST    R0,DIRTABLE             tally directory entry sizes
         TM    PDS2INDC,PDS2ALIS       is this an alias?
         BO    PASS1AL                 yes, jump
         LA    R0,1                    COUNT MEMBERS
         AL    R0,MEMBERS              COUNT MEMBERS
         ST    R0,MEMBERS              COUNT MEMBERS
         B     PASS1A
PASS1AL  LA    R0,1                    COUNT ALIASES
         AL    R0,ALIASES              COUNT ALIASES
         ST    R0,ALIASES              COUNT ALIASES
         B     PASS1A
*ENDLOOP
*LOOP
PASS1F   GET   SYSUT1D              <- READ NEXT DIRECTORY BLOCK
         LTR   R1,R1                   PHYSICAL END OF DIRECTORY?
         BZ    PASS1EOD                YES, EXIT
         LA    R0,1                    COUNT DIRECTORY BLOCKS
         AL    R0,DIRBLKS              COUNT DIRECTORY BLOCKS
         ST    R0,DIRBLKS              COUNT DIRECTORY BLOCKS
         B     PASS1F
*ENDLOOP
PASS1EOD CLOSE MF=(E,OPENDIRL)         CLOSE DIRECTORY
***********************************************************************
*                                                                     *
*        WRITE HEADER RECORDS                                         *
*                                                                     *
*           1. read the JFCB and the F1-DSCB                          *
*           2. calculate the data set size                            *
*           3. write UNLOAD header records                            *
*                                                                     *
***********************************************************************
         LA    R0,78                   LENGTH OF HEADER RECORD
         LA    R1,HDR1REC              ADDR OF HEADER RECORD
         BAL   R9,WRITE                WRITE FIRST RECORD
         MVC   DS1DSNAM,JFCBDSNM       MOVE DSNAME
         MVC   DS1DSSN,JFCBVOLS        MOVE VOLSER
         OBTAIN CAML26                 READ F1-DSCB
         DEVTYPE DCBDDNAM-IHADCB+SYSUT1D,DVAREA,DEVTAB
*
         MVC   UNLDDIR,DIRBLKS+2       NUMBER OF DIRECTORY BLOCKS
         MVI   UNLDFLAG,X'40'          AVG BLK
         SLR   R1,R1
         ICM   R1,B'0011',DS1LSTAR     LAST TRACK USED
         LA    R1,1(,R1)               NUMBER OF TRACKS USED
         ST    R1,TRKSUSED             NUMBER OF TRACKS USED
         SLR   R2,R2
         ICM   R2,B'0011',DVATRKLN     TRACK LENGTH
         MR    R0,R2                   TRACKS * TRKLN
         STCM  R1,B'1111',UNLDSIZE     STORE RESULT
*
         TM    DS1SCALO,X'80'          ALLOC IN CYLINDERS OR TRACKS?
         BZ    HDR1DEVT                NO, SET SSIZ=0
         SLR   R1,R1
         ICM   R1,B'0111',DS1SCAL3     LOAD NO OF CYLS IN R1
         TM    DS1SCALO,X'40'          AVERAGE LENGTH?
         BZ    HDR1SQTY                NO, JUMP
         MH    R1,DVATRK               MULTIPLY BY NO OF CYL PER TRK
HDR1SQTY MR    R0,R2                   TRACKS * TRKLN
         STCM  R1,B'1111',UNLDSSIZ     SECONDARY SPACE IN BYTES
*
HDR1DEVT MVC   UNLDDEVT,DVAUCBTY       UCB TYPE
         LA    R0,HDR2LEN              LENGTH
         LA    R1,HDR2REC              BACK END
         BAL   R9,WRITE                WRITE RECORD SEGMENT
***********************************************************************
*                                                                     *
*        Print Characteristics of SYSUT1 & SYSUT2                     *
*                                                                     *
*          INPUT PDS:                                                 *
*            DSNAME=GILBERT.LOAD,VOL=3380=SYS157                      *
*            RECFM=U,LRECL=0,BLKSIZE=32760                            *
*            DIRECTORY_BLOCKS=11,MEMBERS=24,ALIASES=2                 *
*            TRACKS_USED=22,EXTENTS_ALLOCATED=2                       *
*                                                                     *
*          OUTPUT SDS:                                                *
*            DSNAME=GILBERT.UNLOAD,VOL=SER=STR319                     *
*            RECFM=FB,LRECL=80,BLKSIZE=800                            *
*            RECORDS=100,BYTES=8000                                   *
*                                                                     *
***********************************************************************
PRT10    STRING '0INPUT PDS:',INTO=LINE
         PUT   SYSPRINT,LINE           print message
         STRING '0  DSNAME=',(JFCBDSNM,,T),                            X
               ',VOL=SER=',(JFCBVOLS,6),                               X
               INTO=LINE
         MVC   UNITNAME+8,DVAUCBTY     move device type
         LINK  EP=IEFEB4UV,                                            X
               PARAM=(UNITNAME,        work area                       X
               =X'0100'),              function flags  "7"             X
               MF=(E,DWD),VL=1
         LTR   R15,R15                 OK?
         BNZ   PRT13                   no, jump
         LINK  EP=IEFEB4UV,                                            X
               PARAM=(UNITNAME,        work area                       X
               =X'2000'),              function flags  "2"             X
               MF=(E,DWD),VL=1
         LTR   R15,R15                 OK?
         BNZ   PRT13                   no, jump
         STRING '0  DSNAME=',(JFCBDSNM,,T),                            X
               ',VOL=',(UNITNAME,,T),'=',(JFCBVOLS,6),                 X
               INTO=LINE
PRT13    PUT   SYSPRINT,LINE           print message
         LA    R1,RECFM                RECFM for SYSUT1
         BAL   R14,#RECFM1             B'11111111' -> C'VBSA'
         STRING '   RECFM=',(RECFM,,T),                                X
               ',LRECL=',(DS1LRECL,H,L),                               X
               ',BLKSIZE=',(DS1BLKL,H,L),                              X
               INTO=LINE
         PUT   SYSPRINT,LINE           print message
         STRING '   Directory_blocks=',(DIRBLKS,F,L),                  X
               ',Members=',(MEMBERS,F,L),                              X
               ',Aliases=',(ALIASES,F,L),                              X
               INTO=LINE
         PUT   SYSPRINT,LINE           print message
         STRING '   Tracks_used=',(TRKSUSED,F,L),                      X
               ',Extents_allocated=',(DS1NOEPV,FL1,L),                 X
               INTO=LINE
         PUT   SYSPRINT,LINE           print message
*
         STRING '0OUTPUT SDS:',INTO=LINE
         PUT   SYSPRINT,LINE           print message
         STRING '0  DSNAME=',(JFCBDSNM-INFMJFCB+JFCB2,,L),             X
               ',VOL=SER=',(JFCBVOLS-INFMJFCB+JFCB2,,L),               X
               INTO=LINE
         PUT   SYSPRINT,LINE           print message
         LA    R1,RECFM                RECFM for SYSUT1
         BAL   R14,#RECFM1             B'11111111' -> C'VBSA'
         STRING '   RECFM=FB,LRECL=80',                                X
               ',BLKSIZE=',(DCBBLKSI-IHADCB+SYSUT2,H,L),               X
               INTO=LINE
         PUT   SYSPRINT,LINE           print message
***********************************************************************
*                                                                     *
*        BUILD TABLE OF DIRECTORY ENTRIES                             *
*                                                                     *
***********************************************************************
         LA    R0,1                    Room for X'FF' at end of table
         AL    R0,DIRTABLE             SIZE OF DIRECTORY ENTRIES
         GETMAIN RU,LV=(0),BNDRY=PAGE  GET STORAGE FOR DIRECTRY ENTRIES
         STM   R0,R1,DIRTABLE          len/addr of dir entries
         LR    R4,R1                   point to start of table
         OPEN  MF=(E,OPENDIRL)         re-open DIRECTORY
         MVI   DIRENTRY,FF             FIRST TIME SWITCH FOR "GETDIR"
*LOOP
BLDTBL1  BAL   R9,GETDIR            <- GET DIRECTORY ENTRY
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?
         BE    BLDTBL9                 YES, EXIT
         CLI   UT1MBR,FF               select a member ?
         BE    BLDTBL6                 no, jump
         CLC   PDS2NAME,JFCBELNM       IS IT MY MEMBER?
         BE    BLDTBL6                 yes, jump
BLDTBL5  ALR   R6,R0                   ignore this mbr
         B     BLDTBL1                 next directory entry
BLDTBL6  LR    R5,R0                   size of dir entry
         LR    R7,R0                   size of dir entry
         MVCL  R4,R6                   move directory entry to table
         B     BLDTBL1                 next directory entry
*ENDLOOP
BLDTBL9  MVI   0(R4),FF                mark end of table
         CLOSE MF=(E,OPENDIRL)         CLOSE DIRECTORY
         FREEPOOL SYSUT1D              FREE BUFFERS
         CL    R4,DIRTABLE+4           any member selected?
         BE    EOJ                     no, exit
***********************************************************************
*                                                                     *
*        Turn off ALIAS indicator in directory entries                *
*        for which no main member is present.                         *
*                                                                     *
***********************************************************************
UNALIAS  ICM   R0,B'1111',ALIASES      any ALIAS?
         BZ    GETMBR                  no, exit
         L     R6,DIRTABLE+4           first directory entry
*LOOP
UNALIAS1 TM    PDS2INDC,PDS2ALIS       is this an alias?
         BNO   UNALIAS8                no, ignore it
         L     R7,DIRTABLE+4           first directory entry
         USING PDS2,R7
*--loop
UNALIAS2 TM    PDS2INDC,PDS2ALIS       is this an alias?
         BO    UNALIAS3                yes, ignore it
         CLC   PDS2TTRP,PDS2TTRP-PDS2(R6)   main mbr of my alias?
         BE    UNALIAS8                yes, exit inner loop
UNALIAS3 LA    R14,PDS2LUSR            MASK
         N     R14,PDS2TTRP            SIZE OF USER DATA
         ALR   R14,R14                 size of user data in bytes
         LA    R7,PDS2USRD(R14)        NEXT DIRECTORY ENTRY
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?
         BNE   UNALIAS2                NO, NEXT MEMBER
*--endloop
         DROP  R7                      was PDS2 (local only)
         NI    PDS2INDC,FF-PDS2ALIS    turn off ALIAS indicator
*
UNALIAS8 LA    R14,PDS2LUSR            MASK
         N     R14,PDS2TTRP            size of user data in half-words
         ALR   R14,R14                 size of user data in bytes
         LA    R6,PDS2USRD(R14)        NEXT DIRECTORY ENTRY
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?
         BNE   UNALIAS1                NO, NEXT MEMBER
*ENDLOOP
***********************************************************************
*                                                                     *
*        PROCESS DIRECTORY ENTRIES AND MEMBER DATA                    *
*                                                                     *
*          1.  READ DIRECTORY ENTRIES FROM "DIRTABLE"                 *
*          2.  READ MEMBERS FROM DDN=SYSUT1 USING BPAM                *
*          3.  PASS RECORDS TO "WRITE" ROUTINE                        *
*          4.  Write ALIAS entry after corresponding main member      *
*                                                                     *
***********************************************************************
GETMBR   GETBUF SYSUT1M,(R3)           GET ADDR OF A BUFFER
         ST    R3,DECB1+12             UPDATE BUFFER ADDR IN DECB
         L     R6,DIRTABLE+4           first directory entry
*LOOP
GETMBR1  LA    R14,PDS2LUSR            MASK
         N     R14,PDS2TTRP            SIZE OF USER DATA
         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY
         TM    PDS2INDC,PDS2ALIS       is this an alias?
         BO    GETMBR9                 yes, ignore it
         STH   R0,DWD                  SIZE OF DIRECTORY ENTRY
         MVI   DWD+2,X'C8'             THIS IS A DIRECTORY ENTRY
         MVC   DWD+3(3),TTRN           TTRN OF PREVIOUS BLOCK
         LA    R0,2+1+3                LENGTH,FLAGS,TTR
         LA    R1,DWD                  002A,C8,00000A
         BAL   R9,WRITE                WRITE RECORD SEGMENT
         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY
         LA    R1,PDS2                 ADDR OF DIRECTORY ENTRY
         BAL   R9,WRITE                WRITE RECORD SEGMENT
         MVC   TTRN(3),8(R6)           TTR
         FIND  SYSUT1M,TTRN,C          POINT TO MEMBER
*--LOOP
GETMBR2  READ  DECB1,SF,SYSUT1M,*-*,'S'
         CHECK DECB1
         MVC   DWD(2),DCBLRECL-IHADCB+SYSUT1M
         MVI   DWD+2,X'E0'             DATA RECORD
         NOTE  SYSUT1M                 GET TTR
         STCM  R1,B'1110',DWD+3        SAVE TTR
         LA    R0,2+1+3                LENGTH,FLAGS,TTR
         LA    R1,DWD                  TTR
         BAL   R9,WRITE                WRITE RECORD SEGMENT
         LH    R0,DCBLRECL-IHADCB+SYSUT1M
         L     R1,DECB1+12             BUFFER ADDR IN DECB
         BAL   R9,WRITE                WRITE DATA
         B     GETMBR2                 NEXT BLOCK
*--ENDLOOP
*
*        Write ALIAS directory entries corresponding to the member
*        just written
*
GETMBR8  ICM   R0,B'1111',ALIASES      any ALIAS?
         BZ    GETMBR9                 no, jump
         L     R7,DIRTABLE+4           first directory entry
         USING PDS2,R7
*--LOOP
GETMBR8B LA    R14,PDS2LUSR            MASK
         N     R14,PDS2TTRP            SIZE OF USER DATA
         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY
         TM    PDS2INDC,PDS2ALIS       is this an alias?
         BNO   GETMBR8N                no, ignore it
         CLC   TTRN(3),PDS2TTRP        alias of member just written?
         BNE   GETMBR8N                no, ignore it
         STH   R0,DWD                  SIZE OF DIRECTORY ENTRY
         MVI   DWD+2,X'C8'             THIS IS A DIRECTORY ENTRY
         MVC   DWD+3(3),TTRN           TTRN OF PREVIOUS BLOCK
         LA    R0,2+1+3                LENGTH,FLAGS,TTR
         LA    R1,DWD                  002A,C8,00000A
         BAL   R9,WRITE                WRITE RECORD SEGMENT
         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY
         LA    R1,PDS2                 ADDR OF DIRECTORY ENTRY
         BAL   R9,WRITE                WRITE RECORD SEGMENT
         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY
GETMBR8N ALR   R7,R0                   NEXT DIRECTORY ENTRY
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?
         BNE   GETMBR8B                NO, NEXT MEMBER
*--ENDLOOP
         DROP  R7                      was PDS2 (local only)
*
GETMBR9  LA    R14,PDS2LUSR            MASK
         N     R14,PDS2TTRP            size of user data in half-words
         ALR   R14,R14                 size of user data in bytes
         LA    R6,PDS2USRD(R14)        NEXT DIRECTORY ENTRY
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?
         BNE   GETMBR1                 NO, NEXT MEMBER
*ENDLOOP
***********************************************************************
*                                                                     *
*        END OF DIRECTORY                                             *
*                                                                     *
*          1.  WRITE AN EOF RECORD                                    *
*          2.  CLOSE THE FILES                                        *
*          3.  CLEAN UP                                               *
*          4.  GOBACK                                                 *
*                                                                     *
***********************************************************************
EOJ      LA    R0,3                    L'TTR
         LA    R1,=X'0000,01'          LENGTH=0
         BAL   R9,WRITE                WRITE EOF RECORD
         LM    R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH
         SLR   R15,R15                 PADDING TO X'00'
         MVCL  R4,R14                  PAD LAST RECORD
*
LASTMSG  LA    R1,80                   LRECL of SYSUT2 data set
         M     R0,SEQNO                calculate number of bytes
         STRING '   Records=',(SEQNO,F,L),',Bytes=',((R1),,L),INTO=LINE
         PUT   SYSPRINT,LINE           print message
*
CLOSEALL CLOSE MF=(E,OPENLIST)         CLOSE ALL DATA SETS
         FREEPOOL SYSUT1M              FREE BUFFERS
         FREEPOOL SYSUT2               FREE BUFFERS
         FREEPOOL SYSPRINT             FREE BUFFERS
*
         LM    R0,R1,DIRTABLE          len/addr of dir entries
         FREEMAIN RU,LV=(0),A=(1)      free directory entry table
*
GOBACK   LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,LV=DYNAML,A=(1)    FREE DYNAMIC STORAGE
         RETURN (14,12),RC=00          GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        Read Directory Blocks from SYSUT1D and un-block them         *
*                                                                     *
*        Returns:                                                     *
*                                                                     *
*          R0 Length of the directory entry                           *
*          R6 Address of the directory entry (8X'FF' at EOF)          *
*                                                                     *
*---------------------------------------------------------------------*
GETDIR   ICM   R6,B'1111',DIRENTRY     CURRENT DIRECTORY ENTRY
         BP    GETDIR4                 NOT FIRST TIME, JUMP
*LOOP
GETDIR1  GET   SYSUT1D                 READ DIRECTORY BLOCK
         LA    R0,1                    COUNT DIRECTORY BLOCKS
         AL    R0,DIRBLKS              COUNT DIRECTORY BLOCKS
         ST    R0,DIRBLKS              COUNT DIRECTORY BLOCKS
         LA    R6,2(,R1)               FIRST ENTRY IN THIS BLOCK
         B     GETDIR9                 EXIT
*--LOOP
GETDIR4  LA    R14,PDS2LUSR            MASK
         N     R14,PDS2TTRP            SIZE OF USER DATA
         LA    R14,12(R14,R14)         SIZE OF DIRECTORY ENTRY
         L     R15,DCBRECAD-IHADCB+SYSUT1D  1ST BYTE OF CURR DIR BLK
         AH    R15,0(,R15)             LENGTH OF CURR DIR BLK
         BCTR  R15,0                   LIMIT FOR BXH
         BXH   R6,R14,GETDIR1          SIZE
*--ENDLOOP
GETDIR9  ST    R6,DIRENTRY             SAVE ADDR OF CURR DIR ENTRY
         LA    R14,PDS2LUSR            MASK
         N     R14,PDS2TTRP            SIZE OF USER DATA
         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY
         BR    R9
*---------------------------------------------------------------------*
*                                                                     *
*        Write Records to SYSUT2 in IEHMOVE format                    *
*                                                                     *
*---------------------------------------------------------------------*
WRITE    LR    R2,R1                   ADDRESS
         LR    R3,R0                   LENGTH
         LM    R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH
*LOOP
WRITE1   LTR   R5,R5                   ANY SPACE LEFT IN PREVIOUS RCD?
         BP    WRITE2                  YES, JUMP
         PUT   SYSUT2                  NO, LOCATE ANOTHER
         LA    R0,1                    BUMP SEQNO
         AL    R0,SEQNO                BUMP SEQNO
         ST    R0,SEQNO                BUMP SEQNO
         STH   R0,0(,R1)               BUMP SEQNO
         LA    R4,2(,R1)               ADDRESS
         LA    R5,78                   LENGTH
WRITE2   LR    R14,R4                  "TO" ADDR
         LR    R15,R5                  "TO" ADDR
         CLR   R15,R3                  INREC TOO BIG?
         BL    WRITE3                  NO, JUMP
         LR    R15,R3                  YES, TRUNCATE
WRITE3   ALR   R4,R15                  BUMP ADDR
         SLR   R5,R15                  DECREASE LENGTH
         MVCL  R14,R2                  FILL IN RECORD
         LTR   R3,R3                   INPUT RECORD ALL MOVED?
         BP    WRITE1                  NOT YET, KEEP ON MOVING
*ENDLOOP
         STM   R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH
WRITE99  BR    R9
*---------------------------------------------------------------------*
*                                                                     *
*        RECFM Edit Routine                                           *
*                                                                     *
*---------------------------------------------------------------------*
#RECFM1  MVC   RECFM,BLANKS            INITIALIZE RECFM AREA
         MVI   0(R1),C'U'
         TM    DS1RECFM,DS1RECFU       RECFM=U?
         BO    #RECFM2                 YES, JUMP
         MVI   0(R1),C'F'
         TM    DS1RECFM,DS1RECFF       RECFM=F?
         BO    #RECFM2                 YES, JUMP
         MVI   0(R1),C'V'
#RECFM2  TM    DS1RECFM,DS1RECFB       RECFM=.B ?
         BNO   #RECFM3                 NO, JUMP
         MVI   1(R1),C'B'              .B
         LA    R1,1(,R1)
#RECFM3  TM    DS1RECFM,DS1RECFS       RECFM=..S ?
         BNO   #RECFM4                 NO, JUMP
         MVI   1(R1),C'S'              ..S
         LA    R1,1(,R1)
#RECFM4  TM    DS1RECFM,DS1RECFA       RECFM=...A ?
         BNO   #RECFM5                 NO, JUMP
         MVI   1(R1),C'A'              ...A
#RECFM5  TM    DS1RECFM,DS1RECMC       RECFM=...M ?
         BNO   #RECFM6                 NO, JUMP
         MVI   1(R1),C'M'              ...M
#RECFM6  TM    DS1RECFM,DS1RECFT       RECFM=...T ?
         BNOR  R14                     NO, JUMP
         MVI   1(R1),C'T'              ...T
         BR    R14
***********************************************************************
*                                                                     *
*        DATA AREAS                                                   *
*                                                                     *
***********************************************************************
OPENLIST OPEN  (SYSUT1M,,SYSUT2,OUTPUT,SYSPRINT,OUTPUT),MF=L
OPENDIRL OPEN  (SYSUT1D),MF=L
SYSUT1D  DCB   DSORG=PS,MACRF=GL,DDNAME=SYSUT1,EODAD=ENDOFDIR,         X
               EXLST=EXL1,RECFM=U,BLKSIZE=256
EXL1     DC    A(X'87000000')          DCB EXIT LIST (SYSUT1)
ENDOFDIR SLR   R1,R1
         BR    R14
SYSUT1M  DCB   DSORG=PO,MACRF=R,DDNAME=SYSUT1,EODAD=GETMBR8,           X
               RECFM=U,BUFNO=1
SYSUT2   DCB   DSORG=PS,MACRF=PL,DDNAME=SYSUT2,                        X
               EXLST=EXL1,RECFM=FB,LRECL=80
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FBA,LRECL=121
CAML26   CAMLST SEARCH,DS1DSNAM,DS1DSSN,DS1FMTID
BLANKS   DC    CL(L'RECFM)' '
FF       EQU   X'FF'
*
*        HEADER RECORDS (IEHMVSSX/IEHMVSXY)
*
HDR1REC  DC    H'75',X'0E'             HEADER RECORD
         DC    C'THIS IS AN UNLOADED DATA SET PRODUCED BY',X'80'
         DC    C'THE IBM UTILITY, SYSMOVE.'
         DC    C'OMMBRLDWB'            WHATEVER
*
HDR2REC  DC    AL2(HDR2LEN-3)          L'DSCB1 + 57
         DC    X'00'                   NO FLAGS
         IECSDSL1 1                    F1-DSCB
UNLDDIR  DS    XL2                     DIRECTORY QUANTITY
UNLDFLAG DS    XL1                     UNLOAD CONTROL FLAG
UNLDSIZE DS    XL4                     PRIM ALLOC OF DS (IN BYTES)
UNLDSSIZ DS    XL4                     SEC ALLOCATION OF DS (IN BYTES)
UNLDSPAR DS    XL42                    UNUSED SPARE BYTES
UNLDDEVT DS    XL4                     FROM DEVICE TYPE
HDR2LEN  EQU   *-HDR2REC
*----------------------------------------------------------------------
*
*        DYNAMIC STORAGE AREA
*
*----------------------------------------------------------------------
DYNAM    DSECT
         DS    18F                     SAVE AREA
UT1MBR   DS    CL8                     SYSUT1 member
DWD      DS    D
UNITNAME DS    CL8,XL4,XL4,XL4,XL8     IEFEB4UV
DIRENTRY DS    A                       DIRECTORY ENTRY
DIRBLKS  DS    F                       NUMBER OF DIRECTORY BLOCKS
MEMBERS  DS    F                       NUMBER OF MEMBERS
ALIASES  DS    F                       NUMBER OF ALIASES
DIRTABLE DS    F,A                     addr/size of dir entry table
TRKSUSED DS    F                       NUMBER OF tracks used
CURRENT  DS    A,F                     OUTPUT ADDR, LENGTH
TTRN     DS    F                       TTRN OF FIRST/CURRENT BLOCK
SEQNO    DS    F                       SYSUT2 RECORD SEQUENCE NUMBER
RECFM    DS    C'VBSAMT'               Record Format
LINE     DS    CL121                   print line
         DS    0F                      ALIGN DVAREA
         IHADVA DSECT=NO               DEVTYPE AREA
         ORG   ,                       ALIGN DVAREA
JFCB1    DS    0F                      First JFCB for SYSUT1
         IEFJFCBN                      JFCB for SYSUT1
JFCB2    DS    XL(*-JFCB1)             JFCB for SYSUT2
DYNAML   EQU   *-DYNAM
*
         DCBD  DSORG=PS,DEVD=DA
*@@      IHAPDS DSECT=YES,PDSBLDL=NO
PDS2     DSECT
PDS2NAME DS    CL8                     member name
PDS2TTRP DS    XL3                     TTR
PDS2INDC DS    X                       flags, length of user data
PDS2ALIS EQU   X'80'                   ALIAS entry
PDS2LUSR EQU   X'1F'                   len of user data in half-words
PDS2USRD DS    0C                      start of user data
         YREGS
         STRING GENERATE               generate literals, routine
*----------------------------------------------------------------------
*
*        FORMAT OF IEHMOVE UNLOAD RECORDS (IEHMVSRA)
*
*    (FOR DOCUMENTATION ONLY, THIS DSECT IS NOT USED IN THE PROGRAM)
*
*----------------------------------------------------------------------
BUFFER   DSECT
         DC    H'1'                    RECORD SEQUENCE NUMBER
RECLEN   DC    H'75'                   RECORD LENGTH
RECTYPE  DC    X'0E'                   RECORD TYPE
RTYP_TTR   EQU X'80'                   3-BYTE TTR FOLLOWS
RTYP_PDS   EQU X'40'                   INPUT DATA SET IS A PDS
RTYP_DATA  EQU X'20'                   MEMBER DATA
RTYP_NOTE  EQU X'10'                   NOTE LIST
RTYP_DIR   EQU X'08'                   DIRECTORY ENTRY
RTYP_DMY   EQU X'04'                   DUMMY RECORD
RTYP_HDR   EQU X'02'                   HEADER RECORD
RTYP_EOF   EQU X'01'                   EOF RECORD
RECTTR   DS    XL3                     TTR OF THIS RECORD
RECDATA  DS    XL(BUFFER+800-*)        DATA
         END
//SYSPRINT DD SYSOUT=*
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=GILBERT.FILE183.PDS(STRING)
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//LKED    EXEC PGM=HEWL,PARM=REUS
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(SYSMOVE)
//SYSPRINT DD SYSOUT=*
//
//
//GO      EXEC PGM=LOADER,PARM=NOPRINT
//STEPLIB  DD DISP=SHR,DSN=GILBERT.LOAD
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD DISP=SHR,DSN=GILBERT.LOAD(BLK0)
//SYSUT2   DD DISP=SHR,DSN=GILBERT.X80,BLKSIZE=800
//SYSUDUMP DD SYSOUT=*
//
//*---------------------
//DEL12 EXEC PGM=IEFBR14
//DEL12 DD DSN=GILBERT.IEB12,DISP=(MOD,DELETE),SPACE=(1,0)
//DEL12 DD DSN=GILBERT.IEB12,DISP=(OLD,DELETE),VOL=REF=SYS1.PARMLIB
//RELOAD EXEC PGM=IEHMOVE,PARM='POWER=4'
//SYSUT1 DD DISP=SHR,DSN=SYS1.PARMLIB
//DD1    DD DISP=SHR,DSN=GILBERT.X80
//DD2    DD DISP=SHR,DSN=SYS1.PARMLIB
//SYSPRINT DD SYSOUT=*
     COPY      DSNAME=MVS0011.X80,                                     X
               TO=3380=TEST01,                                         X
               RENAME=IBMUSER.IEB12,                                   X
               CATLG
/*
//*---------------------
//CMPR    EXEC PGM=COMPAREX
//SYSUT1   DD DISP=SHR,DSN=GILBERT.IEB11
//SYSUT2   DD DISP=SHR,DSN=GILBERT.X80
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
