//GILBERTG JOB (ACCT#),IGX00GSF,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
**PROCESS BATCH,USING(NOMAP,WARN(8))
***********************************************************************
*                                                                     *
* MODULE NAME = IGX00GSF                                              *
*                                                                     *
* DESCRIPTIVE NAME = Authorization SVC routine for ShowMVS and STEPLIB*
*                                                                     *
* STATUS = R200                                                       *
*                                                                     *
* FUNCTION = This extended SVC routine (ESR) allows an un-authorized  *
*            program to switch to MODE=SUP.  Only programs that have  *
*            been registered and meet security requirements will      *
*            successfully be switched to MODE=SUP.                    *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* ENVIRONMENT = SEE BELOW                                             *
*                                                                     *
*    DEPENDENCIES: MVS/XA, MVS/ESA, OS/390                            *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 1K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                 APF AUTHORIZATION: NONE                             *
*                                                                     *
* OPERATION = SEE BELOW                                               *
*                                                                     *
*   IGX00GSF checks that its caller is registered and meets           *
*   security requirements.  If all of the tests are successful,       *
*   IGX00GSF sets the caller's PSW to supervisor mode.                *
*                                                                     *
* INSTALLATION = SEE BELOW                                            *
*                                                                     *
*   IGX00GSF must be installed in SYS1.LPALIB under the name          *
*   IGX00nnn where nnn is a number between 000 and the maximum        *
*   allowed for a type=3 ESR, which generally is 255.                 *
*   Of course, the number chosen must not conflict with any other     *
*   type-3 ESR in use on the system, keeping in mind that some        *
*   software products dynamically update the ESR table for their      *
*   own needs.  ShowMVS displays active and inactive ESR entries      *
*   and can be used to determine which numbers are available.         *
*                                                                     *
*   Since the ESR entry number is not fixed, programs such as         *
*   ShowMVS and STEPLIB that invoke it must determine the entry       *
*   number by scanning all active entries in the type-3 ESR table     *
*   for the proper signature.                                         *
*                                                                     *
* PARAMETERS = NONE                                                   *
*                                                                     *
* RETURN-CODES = SEE BELOW                                            *
*                                                                     *
*          0                    OK                                    *
*          8                    Caller not running under a PRB        *
*         12                    Unknown caller                        *
*         16                    Caller not from APF library           *
*         20                    Caller's prefix invalid               *
*         24                    Caller issued ESTAE                   *
*         28                    Caller invoked via XCTL               *
*         32                    Caller not RENT                       *
*         36                    SVC 109 not within caller's module    *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*  $200 Initial release for ShowMVS R618                              *
*                                                                     *
&REL     SETC  '200'
***********************************************************************
IGX00GSF CSECT
IGX00GSF RMODE ANY                 AMODE(31),RMODE(ANY)
*
RPRB     EQU   5
         USING RBBASIC,RPRB
RBASE    EQU   6
         USING BEGIN,RBASE
RCDE     EQU   7
R9       EQU   9
R10      EQU   10
R11      EQU   11
R14      EQU   14
R15      EQU   15
*
BEGIN    B     GETPRB              BRANCH AROUND EYE-CATCHER
         DC    C'IGX00GSF'         SIGNATURE
         DC    C' R&REL '          VVMM
*
*        POINT AT CALLER'S PRB
*
GETPRB   EQU   *
         L     RPRB,RBLINK         GET ADDRESS OF CALLER'S RB
         SH    RPRB,=AL2(RBBASIC-RBPRFX) POINT AT RB PREFIX
         USING RBPREFIX,RPRB
*
RC8      TM    RBSTAB,RBFTP        IS THIS A PRB ?
         BZ    RC12                YES, JUMP
         LA    R15,8               INDICATE NOT RUNNING UNDER A PRB
         BR    R14                 GOBACK
*
RC12     SLR   RCDE,RCDE
         ICM   RCDE,B'0111',RBCDE+1 GET CDE ADDRESS
         BZ    BADPGM              ERROR IF NO CDE (SYNCH, IRB)
         USING CDENTRY,RCDE
         TM    CDATTR,CDMIN        IS THIS ENTRY AN ALIAS ?
         BNO   *+8                 NO, JUMP
         L     RCDE,CDXLMJP        YES, GET ADDRESS OF MAJOR CDE
*
         CLC   CDNAME,=CL8'SHOWMVS' IS THIS A REGISTERED CALLER?
         BE    GOODPGM             YES, JUMP
         CLC   CDNAME,=CL8'STEPLIB' IS THIS A REGISTERED CALLER?
         BE    GOODPGM             YES, JUMP
*
BADPGM   EQU   *
         LA    R15,12              CALLED FROM UNKNOWN MODULE
         BR    R14                 GOBACK
GOODPGM  EQU   *
*
RC16     TM    CDATTR2,CDSYSLIB    IS MODULE FROM AUTHORIZED LIBRARY ?
         BO    RC20                YES, EXIT
         LA    R15,16              MODULE NOT FROM AUTHORIZED LIBRARY
         BR    R14                 GOBACK
*
*        CALLER MUST HAVE THE FOLLOWING PREFIX :
*
*                B     BEGIN-*(,R15)       +0
*                DC    A(0)                +4  UNUSED
*                DC    A(SVC109+2+VL)      +8  CHECKED BY IGX00GSF
*        BEGIN   SAVE
*                . . .
*        SVC109  SVC   109
*
RC20     L     R9,CDENTPT          CALLER'S EP ADDRESS (MAJOR CDE)
         CLC   RBOPSWA,8(R9)       ADDRESS OF SVC 109 MATCHES PREFIX?
         BE    RC24                YES, JUMP
         LA    R15,20              BAD MODULE PREFIX
         BR    R14                 GOBACK
*
RC24     TM    RBFLAGS1,RBSCB      IS ESTAE SET ?
         BNO   RC28                NO, JUMP
         LA    R15,24              CALLER HAS ISSUED ESTAE
         BR    R14                 GOBACK
*
RC28     TM    RBCDFLGS,RBCDXCTL   IS XCTL BIT ON ?
         BZ    RC32                NO, JUMP
         LA    R15,28              CALLER WAS INVOKED VIA XCTL
         BR    R14                 GOBACK
*
RC32     TM    CDATTR2,CDREN       IS CALLING MODULE REENTRANT ?
         BO    RC36                YES, JUMP
         LA    R15,32              CALLING MODULE NON REENTRANT
         BR    R14                 GOBACK
*
RC36     L     R9,RBOPSWA          ADDRESS OF SVC 109
         LA    R9,0(,R9)           CLEAN UP AMODE BIT
         LM    R10,R11,LPDEXTLN-LPDE+CDENTRY length,loadpt
         TM    CDATTRB,CDELPDE     IS THIS AN LPDE?
         BO    RC36OFFS            YES, JUMP
         L     R10,CDXLMJP         GET ADDRESS OF THE EXTENT LIST
         LM    R10,R11,XTLMSBLA-XTLST(R10) length,loadpt
         LA    R10,0(,R10)         zero end-of-extent-list indicator
RC36OFFS SLR   R9,R11              GET OFFSET TO SVC 109
         CH    R9,=H'8'            SVC 109 IN CALLER'S MODULE ?
         BNH   RC36ERR             NO, JUMP
         SH    R10,=H'8'           R10=length-8
         BNP   RC36ERR             length too small, error
         CLR   R9,R10              SVC 109 IN CALLER'S MODULE ?
         BL    RC40                YES, JUMP
RC36ERR  LA    R15,36              SVC 109 ADDR NOT IN CALLING MODULE
         BR    R14                 GOBACK
*
RC40     EQU   *                   RESERVED
*
*---------------------------------------------------------------------*
*        CALLER PASSED ALL THE TESTS: SWITCH PSW TO MODE=SUP          *
*---------------------------------------------------------------------*
*
         NI    RBOPSWB2,255-RBOPSWPS PROBLEM-STATE BIT OFF
         SR    R15,R15             INDICATE GOOD RETURN
         BR    R14                 RETURN
*
         PRINT NOGEN
PRINT    OPSYN ANOP
         IKJRB                     REQUEST BLOCK
         IHACDE                    CONTENTS DIRECTORY ENTRY
         IHALPDE                   LPA DIRECTORY ENTRY
         IHAXTLST                  EXTENT LIST
         END   BEGIN
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//LKED    EXEC PGM=IEWL,PARM=RENT
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSPRINT DD SYSOUT=*
//SYSLMOD  DD DISP=SHR,DSN=SYS2.LPALIB(IGX00000)
//
//
//*
//DELMLPA  EXEC PGM=LOADMLPA,PARM=(DELETE,IGX00000)
//*
//LOADMLPA EXEC PGM=LOADMLPA,PARM=(LOAD,IGX00000)
//STEPLIB  DD DISP=SHR,DSN=SYS2.LPALIB
//*
//ESR     EXEC PGM=SVCUPDTE,PARM=(109,IGX00000)
//SYSUDUMP DD SYSOUT=*
