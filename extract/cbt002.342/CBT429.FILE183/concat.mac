/*************************************************************** REXX */
/*                                                                    */
/* MODULE NAME = CONCAT                                               */
/*                                                                    */
/* DESCRIPTIVE NAME = Concatenate a data set to an existing DD        */
/*                                                                    */
/* STATUS = R401                                                      */
/*                                                                    */
/* FUNCTION = This REXX exec allows a TSO user to add a data set      */
/*            at the beginning or the end of a concatenation          */
/*            without having to know what libraries are currently     */
/*            allocated to the specified ddname.                      */
/*                                                                    */
/* AUTHOR   =  Gilbert Saint-flour <gsf@pobox.com>                    */
/*                                                                    */
/* DEPENDENCIES = TSO/E V2                                            */
/*                                                                    */
/* SYNTAX = See below                                                 */
/*                                                                    */
/*      CONCAT  DDNAME(ddname)                                        */
/*              DSNAME(dsname)                                        */
/*              BEFORE×AFTER×REMOVE                                   */
/*              DEBUG                                                 */
/*                                                                    */
/*   Default:   BEFORE                                                */
/*              DDNAME(SYSEXEC) DSNAME('userid.EXEC')                 */
/*                                                                    */
/*   Examples:                                                        */
/*                                                                    */
/*     Add the IBMUSER.CLIST data set at the beginning of the         */
/*     SYSPROC concatenation:                                         */
/*                                                                    */
/*       %CONCAT DD(SYSPROC) DS('IBMUSER.CLIST')                      */
/*                                                                    */
/*     Add the ISP.SISPEXEC data set at the end of the                */
/*     SYSEXEC concatenation:                                         */
/*                                                                    */
/*       %CONCAT DD(SYSEXEC) DS('ISP.SISPEXEC') AFTER                 */
/*                                                                    */
/*     Execute CONCAT from the SYS2.EXEC library and add SYS2.EXEC    */
/*     to the end of the SYSEXEC concatenation:                       */
/*                                                                    */
/*       EXEC 'SYS2.EXEC(CONCAT)' 'AFTER'                             */
/*                                                                    */
/* OPERATION = See below                                              */
/*                                                                    */
/*     If CONCAT is invoked without ddname and dsname parameters,     */
/*     defaults values are used as follows:                           */
/*                                                                    */
/*     o if CONCAT is invoked implicitely (from SYSEXEC or            */
/*       SYSPROC), the dsname defaults to prefix.EXEC and             */
/*       the ddname defaults to SYSEXEC.                              */
/*                                                                    */
/*     o if CONCAT is invoked via the EXEC command, the               */
/*       default dsname is the name of the library specified          */
/*       in the EXEC command and the default ddname is                */
/*       SYSEXEC if the dsname's low-level qualifier is EXEC;         */
/*       otherwise, the default ddname is SYSPROC.                    */
/*                                                                    */
/*     If the specified ddname is already allocated, CONCAT traps     */
/*     the output of the LISTALC command to retrieve the data set     */
/*     names currently allocated to the specified DD, builds an       */
/*     ALLOCATE command with the new dsname and the old dsnames,      */
/*     and executes it.  If CONCAT detects that the new data set      */
/*     is already allocated in the specified position, then a         */
/*     message is issued and no re-allocation takes place.            */
/*                                                                    */
/*     If the specified ddname is not currently allocated,            */
/*     CONCAT simply issues an ALLOCATE command.  If the ddname       */
/*     is SYSEXEC, CONCAT also issues an EXECUTIL SEARCHDD(YES)       */
/*     command to activate it.                                        */
/*                                                                    */
/*     CONCAT detects a situation where it is implicitely executed    */
/*     out of the SYSEXEC concatenation and the specified ddname is   */
/*     SYSEXEC; in this case, CONCAT uses the QUEUE command to add    */
/*     the ALLOCATE command to the TSO stack and prevent it from      */
/*     failing because SYSEXEC is open.  This technique works         */
/*     correctly if CONCAT is invoked at the READY prompt or under    */
/*     ISPF.  If CONCAT is invoked from a CLIST or REXX exec, the     */
/*     QUEUE'd ALLOCATE command will not execute until after the      */
/*     invoking CLIST or exec ends.  In practical terms, this means   */
/*     that if you intend to invoke CONCAT from a CLIST or REXX       */
/*     exec to add data sets to SYSEXEC, then consider placing        */
/*     CONCAT in the SYSPROC (rather than SYSEXEC) concatenation.     */
/*                                                                    */
/* CHANGES = See below                                                */
/*                                                                    */
/* $400 New packaging for the CBT tape                                */
/* $401 Add the REMOVE function                                       */
/*                                                                    */
/**********************************************************************/
ARG parm
 /*----------------------------------------------------------------*/
 /*                Check parm for DEBUG mode                       */
 /*----------------------------------------------------------------*/
PARSE SOURCE . . . ownddn owndsn  .     /* retrieve my own dsname */
i=WORDPOS('DEBUG',parm)                 /* search for DEBUG option */
IF i=0 THEN
  Debug=''                              /* debug mode is OFF */
ELSE
  parm=DELWORD(parm,i,1)                /* delete word DEBUG */
IF debug='DEBUG' THEN
  SAY 'ownddn='ownddn 'owndsn='owndsn debug,
      SYSVAR(SYSICMD) SYSVAR(SYSSCMD) SYSVAR(SYSPCMD)
 /*----------------------------------------------------------------*/
 /*            Add closing parenthesis at end of string            */
 /*----------------------------------------------------------------*/
IF parm\='' THEN DO
  p=WORD(Parm,WORDS(Parm))
  IF RIGHT(p,1)\=')' & POS('(',p)>1 THEN
    Parm=STRIP(Parm) ×× ')'
  END
 /*----------------------------------------------------------------*/
 /*               Process input parameters                         */
 /*----------------------------------------------------------------*/
Ddname='';Dsname='';Place=''
DO i=1 to WORDS(parm)
  p=TRANSLATE(WORD(parm,i))
  IF Debug='DEBUG' THEN SAY 'p='p 'parm='parm
  kwd=''
  IF RIGHT(p,1)=')' & POS('(',p)>1 THEN DO
    value=LEFT(p,LENGTH(p)-1)               /* remove right paren */
    PARSE VAR value kwd '(' value           /* extract key-word   */
    END
  SELECT
    WHEN ABBREV('DDNAME',kwd,2) THEN DO
      IF ddname\='' THEN SIGNAL Duplicate_keyword
      IF value='' × LENGTH(value)>8 THEN SIGNAL Invalid_value
      ddname=value
      END
    WHEN ABBREV('DSNAME',kwd,2) THEN DO
      IF dsname\='' THEN SIGNAL Duplicate_keyword
      IF value='' × LENGTH(value)>46 THEN SIGNAL Invalid_value
      dsname=value
      END
    WHEN ABBREV('BEFORE',p,1) × ABBREV('AFTER',p,1) × ,
         ABBREV('REMOVE',p,1)                       THEN DO
      IF Place\='' THEN SIGNAL Duplicate_keyword
      Place=LEFT(p,1)                /* B(efore) or A(fter)       */
      END
    OTHERWISE
      Say "Invalid argument:" kwd
  END
END
 /*----------------------------------------------------------------*/
 /*        Provide defaults when invoked with no arguments         */
 /*----------------------------------------------------------------*/
IF dsname='' & ddname='' THEN DO
  ddname='SYSEXEC'                /* default ddname */
  IF owndsn='?' THEN              /* implicit invocation */
    dsname="EXEC"                 /* prefix.EXEC */
  ELSE DO
    dsname="'"owndsn"'"           /* default dsname */
    IF RIGHT(owndsn,5)\='.EXEC' THEN
      ddname='SYSPROC'           /* default ddname */
    END
  END
IF dsname='' THEN SIGNAL Missing_dsname
IF ddname='' THEN SIGNAL Missing_ddname
IF place='' THEN place='B'
 /*----------------------------------------------------------------*/
 /*            Check that specified DSname is cataloged            */
 /*----------------------------------------------------------------*/
rc=LISTDSI(dsname)
IF rc>0 THEN SIGNAL Uncataloged_dsname
dsname="'"sysdsname"'"                 /* fully-qualified dsname */
 /*----------------------------------------------------------------*/
 /*     Issue ALLOCATE if this is a new ddname and not a REMOVE    */
 /*----------------------------------------------------------------*/
rc=LISTDSI(ddname 'FILE')
IF rc>0 & place\='R' THEN DO
  CALL TSO_command "ALLOCATE DD("ddname") DS("dsname") SHR"
  IF ddname='SYSEXEC' THEN
    CALL TSO_command "EXECUTIL SEARCHDD(YES)"
  EXIT rc
  END
 /*----------------------------------------------------------------*/
 /*            Retrieve current allocations                        */
 /*----------------------------------------------------------------*/
rc=OUTTRAP('LINE.')                          /* TRAP PUTLINE        */
"LISTALC STATUS"
rc=OUTTRAP('OFF')                            /* TRAP OFF            */
 /*----------------------------------------------------------------*/
 /*        Retrieve data sets currently allocated to &ddname       */
 /*----------------------------------------------------------------*/
Olddsn=''
DO I = 2 TO line.0
  dsn = LINE.I
  IF LEFT(dsn,9) = 'TERMFILE ' THEN ITERATE
  IF LEFT(dsn,9) = 'NULLFILE ' THEN ITERATE
  I = I+1                                /* skip one line          */
  tdd=STRIP(SUBSTR(Line.I,3,8))          /* extract ddname         */
  IF tdd \= '' THEN
    ddn = tdd                            /* save DDNAME            */
  IF ddn = ddname THEN DO
    olddsn = olddsn "'"dsn"'"
    IF debug='DEBUG' THEN
      SAY 'ddn='ddn 'dsn='dsn 'dsname='dsname 'olddsn='olddsn
    END
END /* WHILE I <= line.0 */
 /*----------------------------------------------------------------*/
 /*        Check if new dsname is already in the right place       */
 /*----------------------------------------------------------------*/
IF dsname=olddsn & place\='R' THEN
  CALL Already_inplace
i=WORDPOS(dsname,olddsn)                /* search for new dsname */
IF debug='DEBUG' THEN
  SAY 'i='i 'dsname='dsname 'olddsn='olddsn place
IF i>0 THEN DO
  IF (i=1 & place='B') × (i=WORDS(olddsn) & place='A') THEN
    CALL Already_inplace
  olddsn=DELWORD(olddsn,i,1)            /* remove dsname from list */
  END
ELSE
  IF place='R' THEN
    CALL Cannot_remove
IF debug='DEBUG' THEN
  SAY 'i='i 'dsname='dsname 'olddsn='olddsn place
 /*----------------------------------------------------------------*/
 /*        Issue new ALLOCATE command                              */
 /*----------------------------------------------------------------*/
CALL TSO_command "FREE DD("ddname")"   /* Free current allocation */
IF place='A' THEN
  dsn=STRIP(olddsn) dsname             /* place=AFTER            */
ELSE
  IF place='B' THEN
    dsn=dsname STRIP(olddsn)           /* place=BEFORE           */
  ELSE
    dsn=STRIP(olddsn)                  /* place=REMOVE           */

IF dsn\='' THEN DO
  cmd="ALLOCATE DD("ddname") DS("dsn") SHR REUSE"
  CALL TSO_command cmd                 /* issue ALLOCATE command */
  END
EXIT

 /*----------------------------------------------------------------*/
 /*           Error Routines                                       */
 /*----------------------------------------------------------------*/
Duplicate_keyword:
  IF kwd='' THEN kwd=p
  SAY 'Key-word' kwd 'has been specified more than once.'
  EXIT 8
Invalid_value:
  IF Value='' THEN
    SAY 'A null value is invalid for key-word' kwd
  ELSE
    SAY 'Value' value 'is invalid for key-word' kwd
  EXIT 8
Missing_dsname:
  SAY 'DSname missing or invalid.'
  EXIT 8
Missing_ddname:
  SAY 'DDname missing or invalid.'
  EXIT 8
Uncataloged_dsname:
  SAY 'Data set' dsname 'is not cataloged.'
  EXIT 8
Already_inplace:
  SAY 'Data set' dsname 'is already concatenated in the right position.'
  EXIT 4
Cannot_remove:
  SAY 'Data set' dsname 'cannot be removed, is not concatenated.'
  EXIT 8
TSO_command:
  ARG cmd
  IF ownddn='SYSEXEC' & ddname='SYSEXEC' THEN DO
    SAY 'STACK=>' cmd                  /* display command */
    QUEUE cmd                          /* place command on the stack */
    END
  ELSE DO
    SAY cmd                            /* display command */
    cmd                                /* execute command */
    IF debug='DEBUG' & rc>0 THEN
      SAY 'RC='rc 'Reason='sysreason sysmsglvl1 sysmsglvl2
    END
  RETURN
