//GILBERTM JOB (ACCT#),SHOWMVS,
// NOTIFY=&SYSUID,
// CLASS=A,
// MSGCLASS=X,
// REGION=40M,
// TIME=(7,30),PERFORM=1,
// LINES=50,                                                ESA V4 ONLY
// COND=(0,NE)
//*
//ASMH EXEC PGM=ASMA90,
// PARM=(OBJECT,NODECK,BATCH,NOESD,NORLD,NOXREF,SIZE(MAX-1M,ABOVE))
*PROCESS BATCH,USING(NOMAP,WARN(8))
***********************************************************************
*                                                                     *
*              SSSS  H   H  OOOOO  W   W  M   M  V   V   SSSS         *
*            S      H   H  O   O  W   W  MM MM  V   V  S              *
*            SSS   HHHHH  O   O  W W W  M M M  V   V   SSS            *
*              S  H   H  O   O  WW WW  M   M   V V       S            *
*         SSSS   H   H  OOOOO  W   W  M   M    V    SSSS              *
*                                                                     *
*     This program displays information obtained from various         *
*     control blocks of the MVS system on which it is run.            *
*     The information can be displayed under ISPF using EDIF or       *
*     BRIF, written to the TSO terminal using PUTLINE or to           *
*     a data set using QSAM.                                          *
*                                                                     *
*     SHOWMVS displays two different types of data:                   *
*                                                                     *
*       1. Data related to the MVS operating system:                  *
*                                                                     *
*          MVS LEVEL, DFP LEVEL, OSLVL FLAGS, JES2 LEVEL              *
*          IPL DATE, TIME, VOLSER, NUC-ID, CLPA, CVTUSER              *
*          Date and time of last CLPA                           (auth)*
*          Time Zone, Primary sub-system name and type                *
*          Software Level: TSO/E, ISPF, DSS, HSM, RACF, VTAM, SORT    *
*                          DSF, DB2, CICS, MQ Series                  *
*          Run-time Environments (CBL, PLI, FORTRAN, C/370, LE)       *
*          SMF Information: SID, JWT, data sets, exits                *
*          SMS Configuration:  SCDS, system names, last update        *
*          GRS Configuration                                          *
*          XCF Configuration                                    (auth)*
*          PATH data                                                  *
*          Coupling Facility Data                                     *
*          External Time Reference (ETR)                              *
*          Hardware configuration                                     *
*            Central Processing Complex Node Description (CPC ND)     *
*            On-line CPUs and storage                                 *
*            Performance (SU/sec, estimated MIPS)                     *
*            Service Processor data                                   *
*            I/O configuration Definition (IODF)                      *
*            LPAR configuration                                       *
*          VM host information                                  (auth)*
*          VIRTUAL STORAGE MAP (CSA, SQA, LPA, etc)                   *
*          SRM data (IPS/ICS/OPT, APG, etc)                           *
*          WLM data (MODE, ETC)                                       *
*          Resource Recovery Manager (RRS)                            *
*          Automatic Restart Manager (ARM)                            *
*          OPEN catalogs                                              *
*          PAGE data sets in use                                      *
*          Dump data sets status and dump options                     *
*          Dump data sets date, time and title                  (auth)*
*          Automatically-allocated dump data sets               (auth)*
*          DAE Parameters                                       (auth)*
*          GTF status and options                                     *
*          Initialization Parameters (IPA)                            *
*          Master JCL (IEEMSJCL)                                      *
*          Sub-system vector table with functions processed           *
*          Primary Sub-system JCL                               (auth)*
*          TSO PARMLIB data (IKJTSOxx)                                *
*          TSO Exits and Tables                                       *
*          TCAS parameters                                      (auth)*
*          RACF options, data sets and tables                         *
*          Address space usage:                                       *
*            Batch Jobs                                               *
*            TSO users                                                *
*            Started tasks                                            *
*          JES2 Initiators and corresponding jobs                     *
*          Link-list data sets, with creation date                    *
*          LPA-list data sets, with creation date                     *
*          List of authorized libraries                               *
*          Dynamic Exit Facility                                      *
*          Static system symbols                                      *
*          LLA parameters and managed libraries                 (auth)*
*          ACTIVE LPA QUEUE                                           *
*          SVC Table with name of the corresponding module            *
*          T1, T2, T3 and T6 ESR tables                               *
*          Linkage Index (LX) Table                             (auth)*
*          Program Properties Table (PPT)                       (auth)*
*          I/O Appendage Table                                        *
*          Resource Manager List (IEAVTRML)                           *
*          Device Classes and corresponding unit names                *
*          On-line devices, with unit-name, VOLSER, owning job,       *
*                use attribute, storage group                         *
*          System consoles, with status & Routcde list                *
*          Message Processing Facility (MPF)                          *
*          Command Prefix Table (CPFT)                                *
*          Device Allocation Defaults (ALLOCxx)                       *
*          Addresses of selected global control blocks                *
*                                                                     *
*       2. Data related to the current address space                  *
*                                                                     *
*          JCL information for current JOB/STEP                       *
*          RACF profile (from ACEE)                                   *
*          TSO profile (from PSCB & UPT)                              *
*          REXX environments, host cmd tables and func pkg directories*
*          Allocated Data sets (from TIOT, SWA, TCT)                  *
*          TCB tree and PRB chain                                     *
*          Attention Routines                                         *
*          Enhanced view of the JPAQ and Load-lists                   *
*          Recovery exits and timers                                  *
*          Addresses of selected local control blocks                 *
*                                                                     *
*       SHOWMVS can be invoked as a program, as a TSO command, or     *
*       as an edit macro and can run authorized or non-authorized.    *
*       Some of the displays are only produced when SHOWMVS runs      *
*       authorized.                                                   *
*       SHOWMVS should run in hard-copy mode under CICS.              *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*     Compatibility                                                   *
*                                                                     *
*       SHOWMVS supports MVS/XA 2.2, MVS/ESA 3.1.3, 4.1, 4.2,         *
*       4.2.2, 4.3, 5.1, 5.2 and 5.2.2, and OS/390 R1 through R5.     *
*       SHOWMVS assembles and executes in any of these environments.  *
*                                                                     *
*       At the object level, SHOWMVS is fully downward-compatible     *
*       and partially up-ward compatible.  This means the following:  *
*       If SHOWMVS has been assembled on an MVS system at level n,    *
*       it will be fully compatible with any older MVS system.        *
*       The same object code, however, will generally execute on      *
*       newer systems, but with reduced functionality.                *
*                                                                     *
*       For example, SHOWMVS assembled on an ESA 4.3 system and       *
*       running on an ESA 4.1 system will produce the same output     *
*       as if it had been assembled on an 4.1 system.  If the same    *
*       object executes on an ESA 5.2 system, however, it will not    *
*       produce the same output as if the same SHOWMVS source had     *
*       been assembled on the 5.2 system on which it is run.          *
*                                                                     *
*       If you intend to run SHOWMVS on different MVS levels,         *
*       make sure you assemble it on the most recent one.             *
*                                                                     *
*       SHOWMVS requires the following levels of the STRING macro:    *
*                                                                     *
*       o  R403 for MVS/XA (STRINGXA)                                 *
*       o  R505 for MVS/ESA and OS/390                                *
*                                                                     *
*       These two levels of STRING are not compatible.                *
*       SHOWMVS assembled with STRING R505 will not run on MVS/XA.    *
*       SHOWMVS assembled with STRINGXA will not run authorized       *
*               on MVS/ESA                                            *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*     Output Modes                                                    *
*                                                                     *
*       SHOWMVS provides five output modes.                           *
*                                                                     *
*       1. BROWSE (using BRIF)                                        *
*                                                                     *
*       This is the default mode when running in ISPF.                *
*                                                                     *
*       2. EDIT (using EDIF)                                          *
*                                                                     *
*       This mode is used when invoked in TSO on-line with ISPF via   *
*       PGM(SHOWMVS) PARM(EDIT) or CMD(SHOWMVS EDIT).                 *
*       Note that EDIT mode is actually VIEW, i.e there is no SAVE    *
*       capability (CREATE and REPLACE can be used to save the data,  *
*       EDIT macros can also be used).                                *
*                                                                     *
*       3. SHORT_PUTLINE
*                                                                     *
*       This is the default mode when running in TSO/E without ISPF.  *
*       In this mode, SHOWMVS clears the screen and produces the      *
*       first two displays (System Level and IPL)                     *
*                                                                     *
*       4. PUTLINE (using PUTLINE)                                    *
*                                                                     *
*       This mode is used under TSO when SHOWMVS is invoked as a      *
*       program with PARM(PUTLINE) or as a command with the PUTLINE   *
*       parameter.  This mode is useful if you want to use the        *
*       OUTTRAP function to process the output of SHOWMVS.            *
*                                                                     *
*       5. HARD-COPY (using QSAM)                                     *
*                                                                     *
*       In Hard-copy mode, SHOWMVS writes the output to a QSAM DCB    *
*       with RECFM=FBA,LRECL=121 instead of displaying it on the      *
*       terminal.  Hard-copy mode is automatically activated in the   *
*       following circumstances:                                      *
*                                                                     *
*         1. SHOWMVS runs outside of the TSO/E environment.           *
*            If no //SHOWMVS DD is present in the JCL, SHOWMVS        *
*            allocates one with SYSOUT=*.                             *
*                                                                     *
*         2. SHOWMVS runs in an on-line TSO/ISPF environment,         *
*            and a //SHOWMVS DD is currently allocated to the         *
*            TSO session.                                             *
*                                                                     *
*       SHOWMVS output is in lower case. If you want to print it      *
*       in upper case, you must invoke SHOWMVS with the CAPS          *
*       parameter.                                                    *
*                                                                     *
*    Dynamic Displays                                                 *
*                                                                     *
*       When MODE=BRIF is used, some of the displays produced by      *
*       SHOWMVS are dynamic, i.e. they are refreshed each time the    *
*       user hits the ENTER key or enters any of the scroll commands. *
*       The dynamic displays are:                                     *
*                                                                     *
*       o  GTF Status                                                 *
*       o  JES2 Initiators                                            *
*       o  On-line devices                                            *
*       o  CPU Time Used                                              *
*       o  Virtual Storage Usage                                      *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Assembly/link-edit information:                                  *
*                                                                     *
*         Environment:          MVS/XA 2.2 thru OS/390                *
*         Processor:            Assembler H V2 or HLASM               *
*         Non-IBM macro used:   STRING                                *
*         AMODE:                31                                    *
*         RMODE:                ANY                                   *
*         LKED Attributes:      RENT                                  *
*         Size of load-module:  64K                                   *
*         Authorization:        None required (see below)             *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    AUTHORIZED FUNCTIONS                                             *
*                                                                     *
*      The following displays are only produced if SHOWMVS is         *
*      authorized:                                                    *
*      o  Last CLPA                                                   *
*      o  VM Host                                                     *
*      o  WLM                                                         *
*      o  DUMP Title                                                  *
*      o  Automatic Dump Data sets                                    *
*      o  DAE                                                         *
*      o  Primary Sub-system                                          *
*      o  TCAS                                                        *
*      o  LLA                                                         *
*      o  LXinfo                                                      *
*      o  PPT                                                         *
*      o  XCF                                                         *
*                                                                     *
*      Whether SHOWMVS is authorized or not depends on how it has     *
*      been installed and in which environment it executes.           *
*                                                                     *
*      1. If SHOWMVS runs as an APF-authorized job step (authorized   *
*         library and AC=1), then it is authorized.                   *
*                                                                     *
*      2. If SHOWMVS is defined as an authorized TSO/E command or     *
*         program (e.g. in IKJTSOxx) and is invoked as such in a      *
*         batch or on-line TSO/E environment, then it is authorized.  *
*         Note that ISPF services are not available to authorized     *
*         TSO/E commands.                                             *
*                                                                     *
*      3. SHOWMVS is link-edited in such a way that it can take       *
*         advantage of the SDSF SVC.  All of the following condi-     *
*         tions must be met:                                          *
*                                                                     *
*         o The load-library is APF-authorized                        *
*                                                                     *
*         o The name of the load-module starts with "ISF"             *
*           (if you want to invoke it under the name "SHOWMVS",       *
*           define it as an alias)                                    *
*                                                                     *
*         o The load-module is marked RENT                            *
*                                                                     *
*         o SDSF V1R3, V1R4 or V1R5 is installed on the system        *
*                                                                     *
*         In this case, and in this case only, will SHOWMVS be        *
*         able to invoke BRIF (or EDIF) and access authorized         *
*         functions at the same time.                                 *
*                                                                     *
*    Note on SDSF V1R6:                                               *
*                                                                     *
*      Starting with HQX1600, the SDSF SVC checks the full name of    *
*      the invoker which *must* be ISFINIT; previous versions only    *
*      check the first three characters of the name.                  *
*                                                                     *
*      To use the SDSF V1R6 SVC with SHOWMVS, do as follows:          *
*                                                                     *
*      1. link SHOWMVS into an APF-authorized library under the       *
*         name ISFINIT; do not define SHOWMVS as an alias.            *
*                                                                     *
*      2. create a CLIST (or REXX EXEC) called SHOWMVS:               *
*                                                                     *
*           CALL '-dsname-(ISFINIT)'                                  *
*                                                                     *
*      3. invoke SHOWMVS by typing  TSO %SHOWMVS                      *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    Undocumented Interfaces                                          *
*                                                                     *
*    As SHOWMVS is enhanced to support additional functions,          *
*    it uses an increasing number of undocumented interfaces          *
*    and control blocks, many of them OCO.  This is required          *
*    to provide full support for recently introduced features,        *
*    such as Dynamic UCBs, CDE Extension, TSO/E tables, etc.          *
*                                                                     *
*    Besides the initial difficulty to understand them, which in      *
*    itself can be a source of problems, the format, contents, or     *
*    chaining method of undocumented control blocks may change in     *
*    future releases (or when PTFs are applied) and erroneous         *
*    results may occur (S0C4 is the most likely symptom).             *
*                                                                     *
***********************************************************************
*
&REL      SETC 'R625'                  Release number
&NUMLINES SETA 12000                   Max number of lines
&LINESIZE SETA 112                     Max line width
*
*$625 Prevent RC=4 messages when assembling with HLASM 1.3.0
*$624 Add minimal support for OS/390 R7 & R8
*     Add support for dynamic link-list in DOBLDL
*     ShowMVS now requires STRING R507
*$623 Add EXTRN OPSYN WXTRN for ILRASMVT in OS/390 V2R6
*     IHALLCB, IRAWMST and ISGGVT now supplied in MACLIB/MODGEN
*     Name of PVTMACS macro library changed to SHOWMVS.MACLIB
*     Calculate MIPS rating from SRM's SU/sec factor
*     Implement enhancements contributed by JWM:
*       Path Information
*       External Time Reference (ETR)
*     Implement enhancements contributed by DL:
*       Coupling Facility Data                                     $DL
*$622 Check for empty tables in IKJTSOnn
*     Display JESDSNID from JESCT extension                       @DMT
*     Show SMS volume status on current system                     @TR
*     Display TOKEN information for the current IODF              @JWM
*     Correct number of link-list extents
*     Retrieve ACF2 release from ACCVT (instead of ACF2RLSE)
*     Implement enhancements contributed by RS:
*       Run-time Library Services (RTLS)                           $RS
*       Resource Recovery Manager (RRS)                            $RS
*       Automatic Restart Manager (ARM)                            $RS
*$621 Major Changes
*       More support for OS/390 R4
*       Display IPL type: Cold, Quick, Warm
*       Change V=V Region display, support VRREGN=0
*       Detect the Relative-and-Immediate instruction set
*       Prevent CSV003I REQUESTED MODULE HASMPIT  NOT FOUND
*       List modules on the Dynamic LPA Queue
*$620 Major Changes
*       More support for OS/390 R3
*     Implement enhancements contributed by RS
*       Name/Token (System and Address-space)                      $RS
*       Added subpool defintion and attributes                     $RS
*       Cell Pools (Global and Local)                              $RS
*       Enhanced SVC-Table Display                                 $RS
*       Product Registration info in table format                  $RS
*       Added CDATTR3 for LPA/JPAQ/TCB                             $RS
*     Implement enhancements contributed by JWM
*       LNKLST set information (OS/390 R3)                        @JWM
*       Work Load Manager definitions                             @JWM
*$619 Major Changes
*       Initialization Parameter Area (OS/390 R2)
*       Product Enable/Disable (OS/390 R1)
*       Resource Manager List (IEAVTRML)
*       Display ranges in SMF NOTYPE, SSI codes, ROUTCDE
*     Implement enhancements contributed by RS                     @RS
*       Sysplex-Environment (auth)                                 @RS
*       Enhanced Command Prefix Table (CPFT)                       @RS
*       TCP/IP Version                                             @RS
*     Miscellaneous enhancements:
*       Check for dummy RDS (lost SMF data)
*       Fix ddname identification error in RTE display
*       Fix GETUNIT5 code to support UCBs above the 16M line
*       SSCT for primary sub-system doesn't have to be first
*$618 Major Changes
*       Move in-line DSECTs to the PVTMACS library
*       SHOWMVS must now be assembled with the PVTMACS library
*       Use IGX00GSF for authorization when available
*     Implement enhancements contributed by DL
*       SYS1.DUMP Support for dynamic allocation
*       WLM Workload Manager information (auth)
*       DYNEXIT Dynamic Exit Facility information (auth)
*       SYMBOLS Show static symbols
*     New Displays:
*       Run-time Environments (Cobol, PL/I, LE, etc)
*       Primary Sub-system
*       Date and time of last CLPA if IPL'd with CLPA=NO
*       Date, time and title of SYS1.DUMP data sets
*       TSO Exits and Tables
*       Device Allocation Defaults (ALLOCxx)
*       DAE Parameters (ADYSETxx)
*       Message Processing Facility (MPF)
*       Command Prefix Table (CPFT)
*     Miscellaneous enhancements:
*       Restructure the initialization code to improve robustness
*       Show dates in ISO-recommended format (yyyy-mm-dd)
*       Reactivate AUTH=ESR support for MVS/XA and REXX
*       VMDATA now shows correct CPU id (wrong addr in DIAG 218)
*       Version codes for more AMDAHL CPUs
*       Adjust size of IGDBCD if SSSA1RSN=5001
*       Issue DIAG 204 to obtain PR/SM Config data if RMF not available
*       Replace CDX scan with CSVQUERY macro
*       Make Virtual Storage Usage display dynamic
*       Improve CPU Usage display
*       Add new entries to CPU table: CMOS-3, Multiprise, P/390
*$617 Use protected work areas when authorized by the SDSF SVC
*     Recovery Exits and Timers (by TCB)
*     Minor changes in GRS and RACF displays
*     Display ACF2 version from ACF2RLSE module
*$616 Display CPC ND and CPC ID from HID
*     Check for MAN=NONE in SMF display
*     Correct VTAM version
*$615 Support for OS/390 R1 and DFSMS/MVS 1.3
*     New output modes: EDIT, PUTLINE and SHORT_PUTLINE
*     Default mode at TSO READY changed to SHORT_PUTLINE
*     Implement enhancements contributed by JWM:
*       SYSPLEX name, OpenMVS Status, ACF2, DB2+,
*       SMF exits, ETR status, Dump options, Console name
*       More TSO/E Tables, CDA date & time
*       Linkage Index (LX) Table (if authorized)
*     Implement enhancements suggested by MXT:
*       CPU model for 308X,4381,3090,5995,9021,9121,9221,9672
*       Service units per second (using RMCTADJC)
*       Remove % sign from LPAR weights (can exceed 100)
*       Status of the Automatic Cartridge Loader (ACL)
*       2-char names in TSO tables no longer missing from display
*       JES2 Initiators (refreshed when you press ENTER)
*     New Displays:
*       LLA parameters and dsnames (thanks to MSCH)
*       GRS Configuration
*       VM Data: Real CPU Id, User ID, CP level
*       GTF Status
*       I/O Appendage Table (IEAAPPxx)
*       TSO Attention Exits
*       Addresses of some local & global control blocks (CVT, ASCB etc)
*     Miscellaneous enhancements:
*       ICKDSF level (from ICKRELVL) and CICS level (from DFHCSVC)
*       Primary sub-system name and type
*       Time Zone (from CLOCKxx)
*       Use DS1LSTAR to determine status of SYS1.DUMP data set
*       Version Information from sub-systems that supply it
*       Enlarge YYMMDD field in preparation for 4-digit years
*       Message displayed on 3480 screen (e.g. K 020436)
*       Address-space type: Batch/TSO-batch/TSO-on-line
*       Initial LOGON command (from TSO/E LOGON screen)
*       CPU Time Used value refreshed when TSO user presses ENTER
*$514 Implement the JUL2DAYS date calculation routine.
*     SHOWMVS must now be compiled with the BATCH option.
*     Reduce size of code generated by the STATUS macro
*     Prevent S0C4 when ICHRIN03 header has invalid number of entries
*$513 Detect Top-secret's presence in pseudo RCVT
*     Minor changes to JOB card formatting routine
*     Locate DDname for JPAQ modules loaded from a PDSE
*     Split MIPS table into bipolar and CMOS using IBM numbers
*$512 Add support for MVS SP 5.1.0 and RACF 2.1.0
*     Add RACF GROUP on JOB card
*     Implement NEXTLLE routine, 1st load-list entry is now the oldest
*     Display IPLPARM & HSA data from SCCB
*     Expand BCD to support DFSMS/MVS 1.2 (HDZ11B0)
*     Inactivate ESPIE environment created by invoking pgm
*     Use EQUates from IEFZB4UV macro
*     Fix error in LPAR display when lowest CPU ID is zero
*$411 Master JCL (IEEMSJCL)
*     Hash-code name to access CDX
*     PR/SM config if ESA 4.3 with RMF active
*     Prevent S0C4 when accessing fetch-protected SSVT
*$410 Format JOB and EXEC statements
*     Storage Allocation Table (using TCTCORE and LDA)
*$409 SMS Configuration Data from BCD
*     PR/SM partition number (ESA 4.3)
*     I/O Configuration from CDA (ESA 4.1)
*     LOG Class, LOG limit, CSCB location
*     Flag MLPA/FLPA modules that make PLPA modules inaccessible.
*     Opening msg with pgm assembly information and exec auth status
*     Space allocated in common area (ESA 4.3)
*     Status of GFS Trace (ESA 3.1) and CSA/SQA Tracking (ESA 4.3)
*$408 Display REXX environments with Host cmd tbl & func packge dirs.
*     Fix LNK/LPA flagging in TIOT display
*     Convert DDname to data set name for JPAQ entries
*     Implement NEXTCDE routine, first JPAQ entry is now the oldest
*$407 Display REGION parameter and actual below/above sizes
*     Replace RB table with NEXTRB routine
*     Consider IEAVESVC as equivalent to IGCERROR (unused SVC)
*     Retrieve DDname associated with JPAQ entries from CDEX (ESA 4.3)
*$406 Move sub-routines to $FARRTNE LOCTR to save addressable space
*     Incorporate enhancements from CBT375.FILE453
*     - Memory Map
*     - Use old WMSTIPM field at offset X'9C' before ESA 313
*     - Get SYS1.DUMP information from RTCT/SDDSQ, remove catalog scan
*     - RACF data sets and tables
*     - add 25% to MIPS rating if it's an AMDAHL box
*$405 Add support for Dynamic UCBs (ESA V4), display RACF mod lvl
*$404 Sort TSU and JOB names, add support for 4-digit device numbers
*$403 may now be executed via the DFP LOADER (or the LOADGO command)
*$402 Issue LOCATE for *SMS* and *MCAT* volsers (dynamic APFTABLE)
*$401 Switch to APPL(ISR) if invoked with APPL(ISF)
*$400 Document Code with sample output, reorg paragraphs further
*     Reorg Code, remove SPLEVEL macro, set hard-copy lrecl to 121
*$392 Use OBR codes instead of MDR to determine 3380/3390 model type
*$391 Display the PPT (if authorized)
*$390 Implement SDSF SVC to get into MODE=SUP, if available
*$389 Add Dynamic APF support (ESA 4.3)
*$388 Reorg JES2 identification code
*$387 Fix XA compatibility bugs
*$386 Display 3390-9 device type
*$385 Support MVS/ESA 4.3, JES2 4.3, DFSMS/MVS
*$384 TSO PARMLIB data and authorization tables (IKJTSOxx)
*$383 Use NUCLKUP to find the address of IGCERROR
*$382 A few glitches corrected
*$381 TCAS data (only if APF-authorized)
*     System consoles, with status and route codes
*     RACF and TSO profiles (from ACEE, PSCB, UPT)
*     IDENTIFY removed, ATTACH now uses main entry point
*$380 Enhanced device status which is refreshed when you hit ENTER
*$373 Address space usage, active jobs, TSU, STC
*     Hardcopy gets title, gets converted to uppercase if PARM=CAPS
*$372 Display device class table and corresponding unit names
*     Display extent information for link-list data sets
*     Change register assignment and TRTPRINT build routine
*$371 Added a SNAP routine (and #SNAP macro) for debugging purposes
*     Moved Processor speed loop to sub-task
*$370 DISPLAY EXISTING SYS1.DUMP DATA SETS WITH FULL/EMPTY STATUS
*     DISPLAY RESOURCE MANAGER PARAMETERS (SRM)
*$364 FIXED RANDOM ABENDS (S0C4 & SA03) AND BRIF FAILURES
*$363 FIXED JES2 410 OFFSETS (WITH A LITTLE HELP FROM MY FRIEND SAM)
*$362 ESTIMATE PROCESSOR SPEED IN "MIPS", IMPROVE IPL DATE FORMAT
*$361 PREVENT S13E ABENDS
*
SHOWMVS  CSECT
SHOWMVS  RMODE ANY
         SAVE  (14,12),,'GSF UTILITIES - SHOWMVS &REL '
         BALR  R11,0
         USING *,R11
BASEADDR LTR   R1,R1                   SUB_TASK call ?
         BM    SUB_TASK                yes, go there
*
         BAL   R10,INITIAL             INITIALIZE THE ENVIRONMENT
         USING DYNAM,R13
INIT_R10_ADDR EQU *
         TM    INIT_DONE,L'INIT_DONE   VALID ISPF/BATCH ENVIRONMENT?
         BZ    GOBACK                  NO, QUIT
         BAL   R14,BLANK1              BLANK LINE AT THE TOP
*
         BAL   R14,SPLEVEL             MVS/SP & DFP LEVELS
         BAL   R14,IPLDATA             IPL DATE
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         BO    MAIN_BRIF               YES, SKIP THE REST
         BAL   R14,OPENMSG             Issue ISRZ001 message
         BAL   R14,PRODUCTS            TSO, SPF, DFDSS, HSM, RACF, VTAM
         BAL   R14,SORT                SORT ALIAS
         BAL   R14,SMFDATA             SMF DATA
         BAL   R14,SMSDATA             SMS Base Config Data
         BAL   R14,GRSDATA             GRS Configuration
         BAL   R14,HARDWARE            HARDWARE DATA
         BAL   R14,VMDATA              VM DATA
         BAL   R14,LPAR00              LPAR Configuration
         BAL   R14,MEMORY              VIRTUAL MEMORY MAP
         BAL   R14,XCFDATA             XCF Configuration
         BAL   R14,PATH00              Path Data
         BAL   R14,CFD00               Coupling Facility Data      +DL
         BAL   R14,ETR00               External Time Reference (ETR)
         BAL   R14,SRM00               SRM DATA
         BAL   R14,WLM00               WLM DATA                    $JWM
         BAL   R14,RRS00               Resource Recovery Manager    +RS
         BAL   R14,ARM00               Automatic Restart Manager   +RS
         BAL   R14,OPENCAT             OPEN CATALOGS
         BAL   R14,PAGEDS              PAGE DATA SETS
         BAL   R14,DUMPDS              DUMP DATA SETS
         BAL   R14,DAE00               DAE Parameters (ADYSETxx)
         BAL   R14,GTF00               GTF DATA
         BAL   R14,IPA000              Initialization Parameter Area
         BAL   R14,MSTJCL00            Master JCL (IEEMSJCL)       @411
         BAL   R14,SUBSYSTM            SUB-SYSTEMS
         BAL   R14,PRISUB00            Primary sub-system
         BAL   R14,TCAS00              TCAS data (APF)
         BAL   R14,IKJTSO00            TSO PARMLIB data (IKJTSOxx)
         BAL   R14,EXTAB00             TSO Exits and Tables
         BAL   R14,RACFDATA            RACF DATA                   @406
         BAL   R14,USERS               Active jobs, STC, TSU
         BAL   R14,JES2INIT            JES2 Initiators
         BAL   R14,LNKLST00            LNKLSTXX
         BAL   R14,LPALST00            LPALSTXX
         BAL   R14,APFLIST             APF LIST
         BAL   R14,DYNXIT              Dynamic Exits
         BAL   R14,SYMBOLS             System static symbols
         BAL   R14,LLALIST             LLA LIST
         BAL   R14,ATTACH           <- attach sub-task
         BAL   R14,LPAQ                ACTIVE LPA
         BAL   R14,SVCTABLE            SVC TABLE
         BAL   R14,LXINFO              Linkage Index info      JWMJUN96
         BAL   R14,PPT00               Program Properties Table (APF)
         BAL   R14,APP00               Appendage ID table (IEAAPPxx)
         BAL   R14,RML00               Resource Manager List (IEAVTRML)
         BAL   R14,PRED00              Product Enable/Disable
         BAL   R14,DEVICES             DEVICE CLASS & UNIT NAMES       X
                                       ON-LINE UNITS
         BAL   R14,CONSOLES            CONSOLES
         BAL   R14,CPFTAB00            Command Prefix Table
         BAL   R14,NTTAB00             Name/Token (SYSTEM)         $RS
         BAL   R14,ALLOC00             Allocation defaults
         BAL   R14,ADDR100             Addresses of Global control blks
*
*        Data from user's address space
*
         BAL   R14,JOBSTEP             JOB/STEP data
         BAL   R14,RACF00              RACF Profile
         BAL   R14,PROF00              TSO profile
         BAL   R14,REXX00              REXX Environment
         BAL   R14,TIOT00              TIOT
         BAL   R14,TREE                TCB TREE
         BAL   R14,ATTNX00             Attention exits
         BAL   R14,JPAQ                JPAQ
         BAL   R14,LOADLIST            LOAD LISTS
         BAL   R14,CELLPLOC            Local Cell Pools
         BAL   R14,TIMERS              Recovery and Timers
         BAL   R14,NTTAB50             Name/Token (LOCAL)          $RS
         BAL   R14,ADDR200             Addresses of Local control blks
         ICM   R0,B'1111',OLDPICA      did we issue ESPIE?
         BZ    MAIN_BRIF               no, jump
         ESPIE RESET,OLDPICA           Reset SPIE/ESPIE environment
MAIN_BRIF EQU  *
         BAL   R14,ATTACH           <- attach sub-task (again)
         BAL   R14,BRIF                START BROWSE MODE
GOBACK   EQU   *
         LM    R1,R2,LINE1PTR          start/length of line buffer
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    GOBACK7                 YES, JUMP
         LTR   R1,R1                   buffer allocated?
         BZ    GOBACK5                 NO, JUMP
         FREEMAIN RC,LV=(R2),A=(R1)    FREE DYNAMIC STORAGE
GOBACK5  EQU   *
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         LR    R1,R13                  ADDRESS OF DYNAMIC STORAGE AREA
         L     R13,4(,R13)
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE
         RETURN (14,12),RC=00
*
*        Free working-storage when AUTH=ESR
*
GOBACK7  LTR   R1,R1                   buffer allocated?
         BZ    GOBACK7B                NO, JUMP
         LR    R0,R2                   length for FREEMAIN
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
GOBACK7B LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         L     R1,UNPROTWK             unprotected work area
         FREEMAIN R,LV=(0),A=(1)
         LR    R1,R13                  ADDRESS OF DYNAMIC STORAGE AREA
         L     R13,4(,R13)
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
         SLR   R15,R15                 RC=00
         EXIT
*
*        CAUTION: If the previous instruction fails with an
*                 "Undefined Operation Code" message, check the SYSLIB
*                 concatenation: the SHOWMVS.MACLIB macros are missing.
*
         DS    0A(@STRING)
*
*        CAUTION: If the previous instruction fails with an
*                 "UNDEFINED SYMBOL" message, check the SYSLIB
*                 concatenation: the STRING macro is missing.
*
         TITLE 'SHOWMVS &REL - Define the CVT and DFA'
*---------------------------------------------------------------------*
*                                                                     *
*        Define the CVT (Comunication Vector Table)                   *
*                                                                     *
*        The CVTOSLVL flags are later tested to conditionally         *
*        invoke PPT scan and dynamic APF macros.                      *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  PRINT
         PRINT NOGEN
         CVT   PREFIX=YES,DSECT=YES,LIST=NO
CVT      EQU   CVTMAP                  IWMQUERY
*---------------------------------------------------------------------*
*                                                                     *
*        Define the DFA map (Data Facilities area).                   *
*                                                                     *
*        The DFP V3 version of this macro defines the                 *
*        DFASMS symbol.  The existence of DFASMS is                   *
*        tested in the DEVSTAT routine to generate                    *
*        SMS-dependent code and macros.                               *
*                                                                     *
*---------------------------------------------------------------------*
         IHADFA  DSECT=YES             DFP AREA
         POP   PRINT
SHOWMVS  CSECT                         ADDRESSABLE CODE
         TITLE 'SHOWMVS &REL - Internal Macro Instructions'
***********************************************************************
*                                                                     *
*        Internal Macro-instructions                                  *
*                                                                     *
***********************************************************************
         MACRO                                                    MACRO
&NAME    BEGIN_PROC &SAVE=YES,&KW=,&AUTH=NO                       MACRO
         GBLC  &ENDPROC                                           MACRO
&ENDPROC SETC  'PROC&SYSNDX'                                      MACRO
$LTORG   LOCTR                         ADDRESSABLE CODE           MACRO
&NAME    BAL   R15,BEGIN_PROC          Go To Bootstrap
         DC    AL2((&ENDPROC-BASEADDR)/2) demi-offset to far routine
&PCE     SETC  '&KW._PCE'
         AIF   ('&KW' EQ '').KW2
         AIF   (D'&PCE).KW2
&PCE     IKJKEYWD ,                                          &KW
         IKJNAME '&KW'                                       &KW
.KW2     ANOP                                                &KW
$FARRTNE LOCTR                         FAR ROUTINES               MACRO
         DC    0D'0',C'&NAME',0H'0'
         AIF   ('&SAVE' EQ 'NO').NOSAVE
         AIF   ('&SAVE' EQ 'STDSAVE').STDSAVE
&ENDPROC BALR  R12,0                   LOCAL BASE                 MACRO
         USING *,R12                                              MACRO
         LA    R15,PEND&SYSNDX         LOAD RETRY ADDRESS         MACRO
         STM   R14,R15,END_PROC        RETURN/RETRY ADDRESSES     MACRO
         AIF   ('&AUTH' NE 'YES').AUTH4                      &AUTH
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         BNOR  R14                     no, exit
.AUTH4   ANOP                                                &KW
         AIF   ('&KW' EQ '').KW4                             &KW
         BAL   R14,SECTION_SELECTION
         DC    AL2(&KW._PCE+1-IKJPARMD)
.KW4     ANOP                                                &KW
&ENDPROC SETC  'PEND&SYSNDX'           FOR END_PROC MACRO         MACRO
         MEXIT
.NOSAVE  ANOP
&ENDPROC DS    0H
         MEXIT
.STDSAVE ANOP
&ENDPROC STM   R14,R12,12(R13)         save registers
.MEND    MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    END_PROC ,                                               MACRO
         GBLC  &ENDPROC                                           MACRO
         AIF   (T'&NAME EQ 'O').END2                              MACRO
&NAME    EQU   *
.END2    ANOP                                                     MACRO
&ENDPROC L     R14,END_PROC            RETURN ADDR
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R14,R15
         DROP  R1,R2,R3,R4,R5,R6,R7,R12,R14,R15 RELEASE TEMP BASE REGS
         MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    macro
&NAME    XCALL &EP,&OPRNDS,&ERRET=,&VL=1,&LINKAGE=BALR            macro
         GBLB  &IHBSWA                                            macro
&IHBSWA  SETB  (&VL EQ 1)              VL=1                       macro
&NAME    LA    R1,TENWORDS             parm list
         IHBOPLST ,&OPRNDS,MF=(E,(1))                             macro
         AIF   ('&LINKAGE' EQ 'SYNCH').SYNCH                      macro
         AIF   ('&EP'(1,1) EQ '(').BALRREG                        macro
         L     R15,&EP                 EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.BALRREG LR    R15,&EP(1)              EP address
         BALR  R14,R15                 invoke routine
         AGO   .ERRET                                             macro
.SYNCH   SYNCH SYNCH_&EP,RESTORE=YES   invoke with TCB key        macro
.ERRET   AIF   (T'&ERRET EQ 'O').MEND                             macro
         LTR   R15,R15                 Any error?
         BNZ   &ERRET                  yes, jump
.MEND    MEND                                                     macro
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME    UCB_NAME &LEFT,&JES=NO                                   MACRO
&LAB     SETC  'IHB&SYSNDX'                                       MACRO
         AIF   ('&LEFT' EQ 'LEFT').LEFT                           MACRO
&NAME    MVI   UCB_NAME,C' '           first char is blank
         MVC   UCB_NAME+1(3),UCBNAME   3-character name
         AIF   (NOT D'CVTOSEXT).MEND   not ESA, quit              MACRO
         TM    HBB4410,L'HBB4410       UCB services available?
         BZ    &LAB.X                  no, jump
*        UCBDEVN DEVN=UCB_NAME         get UCB name (ESA V4 only)
         UCBDEVN DEVN=UCB_NAME         get UCB name (ESA V4 only)
&LAB.X   EQU   *
         MEXIT                                                    MACRO
.LEFT    ANOP                                                     MACRO
&NAME    MVC   UCB_NAME(3),UCBNAME     3-character name
         MVI   UCB_NAME+3,C' '         4th char is blank
         AIF   (NOT D'CVTOSEXT).MEND   not ESA, quit              MACRO
         AIF   ('&JES' NE 'YES').LEFT4                            MACRO
         CLC   =C'JES ',UCB_NAME       JES console?
         BE    &LAB.X                  yes, jump
.LEFT4   L     R1,CVTPTR               point at CVT
         TM    CVTDCB-CVTMAP(R1),CVTOSEXT  running on ESA?
         BZ    &LAB.X                  no, jump
*        UCBDEVN DEVN=UCB_NAME         get UCB name (ESA only)
         UCBDEVN DEVN=UCB_NAME         get UCB name (ESA only)
         CLI   UCB_NAME,C' '           3-char name?
         BNE   &LAB.X                  no, jump
         MVC   UCB_NAME(3),UCB_NAME+1  left justify
         MVI   UCB_NAME+3,C' '         4th char is blank
&LAB.X   EQU   *
.MEND    MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO                                                    MACRO
&NAME   #SNAP  &ADDR=(1),&LENGTH=(0)                              MACRO
&NAME    STM   R14,R3,SNAPREGS         save registers             MACRO
         IHBINNRA &ADDR,&LENGTH                                   MACRO
         BAL   R14,SNAP00           <- SNAP STORAGE               MACRO
         LM    R14,R3,SNAPREGS         restore registers          MACRO
.MEND    MEND                                                     MACRO
*---------------------------------------------------------------------*
         MACRO
&NAME   #STATUS &BYTE,&BIT,&MSG
         AIF   ('&BYTE'(1,3) EQ 'CVT' AND NOT D'&BIT).MEND
&NAME    TM    &BYTE,&BIT              check flag
         BAL   R14,$$STATUS            check CC, move, bump ptr
&N       SETA  K'&MSG-3
         DC    AL1(&N),C&MSG,0H'0'     Length,text,alignment
.MEND    MEND
*---------------------------------------------------------------------*
         MACRO
&NAME    VALIDATE &ADDR,&ERRET=
&NAME    MVI   RCVYSAVE,X'C4'          set flag for RECOVERY routine
         LA    R14,&ERRET              return address
         CLI   &ADDR,0                 CHECK ADDRESS (get S0C4)
         MVI   RCVYSAVE,0              reset flag
         MEND
         MACRO
        #SWITCH &NAME
         GBLA  &BSWITCHES
&BSWITCHES SETA &BSWITCHES+1
&O       SETA  (&BSWITCHES-1)/8        OFFSET
&L       SETA  &BSWITCHES-&O*8         REMAINDER
&STR(1)  SETA  128,64,32,16,8,4,2,1
&L       SETA  &STR(&L)                MASK
&NAME    EQU   SWITCHES+&O,&L
         MEND
*---------------------------------------------------------------------*
         TITLE 'SHOWMVS &REL - Initialise The Environment'
***********************************************************************
*                                                                     *
*        INITIALISATION                                               *
*                                                                     *
*          1. Allocate Key=8 work area                                *
*          2. invoke INIT600 to determine environment                 *
*          3. check for APF authorization                             *
*          4. check for ESR authorization                             *
*          5. re-invoke myself                                        *
*              IF AUTH=ESR and not alone in TCB                       *
*              OR running in ISPF under wrong application             *
*          6. If AUTH=ESR, allocate KEY=4,SP=230 work area            *
*                                                                     *
***********************************************************************
INITIAL  BEGIN_PROC SAVE=NO
         BALR  R12,0
         USING *,R12
INIT_R12_ADDR EQU *
*
*        Allocate small work area
*
         LA    R0,DYNAML               temp dynamic storage area
         GETMAIN R,LV=(0)              get small work area
         ST    R13,4(,R1)              chain save area
         ST    R1,8(,R13)              chain save area
         LM    R13,R1,8(R13)           chain save area
         USING DYNAM,R13
         LA    R14,DYNAM+72            clear storage
         LA    R15,DYNAML-72           clear storage
         SLR   R3,R3                   clear storage
         MVCL  R14,R2                  clear storage
         ST    R1,PARMADDR             SAVE PARM/CPPL ADDRESS
         ST    R13,UNPROTWK            save addr
         ST    R10,RDRTNR14            save return address
         L     R8,CVTPTR               CVT ADDRESS
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
         L     R9,PSATOLD-PSA          my TCB
         USING TCB,R9
*
         SYNCH INIT600,RESTORE=YES     Initialise working-storage
*
*        If I re-invoked myself in INIT600, exit now.
*
         LTR   R15,R15                 did I re-invoke myself ?
         BZ    INIT120                 no, continue
         LA    R0,DYNAML               temp dynamic storage area
         LR    R1,R13                  ADDR OF WORK AREA
         L     R13,4(,R13)             caller's save area
         FREEMAIN R,LV=(0),A=(1)       FREE SMALL WORK AREA
         LM    R2,R12,28(R13)          RESTORE CALLER'S R2-R12
         EXIT                          goback
*
*        Check for APF authorization
*
INIT120  TESTAUTH FCTN=1               CHECK APF STATUS
         LTR   R4,R15                  OK?
         BZ    INIT180                 yes, jump
*
*        Issue SVC 109 to switch to supervisor mode
*
         LH    R15,IGX00NNN            get extended SVC number
         LTR   R15,R15                 Auth ESR Available ?
         BM    INIT180                 NO, JUMP
*
         SLR   R0,R0                   OPTION CODE (ISFSVC)
         LA    R1,1                    OPTION CODE
SVC109   SVC   109                     TYPE-3 ESR
         LTR   R4,R15                  OK?
         BNZ   INIT180                 NO, JUMP
*
*  IGX00GSF/ISFSVC error codes (in R15)
*
*        BADOPT     4                  BAD OPTION PASSED TO SVC IN R1
*        NOTPRB     8                  CALLER NOT RUNNING UNDER A PRB
*        NOTSDS     12                 UNKNOWN CALLER
*        NOTALIB    16                 CALLER NOT FROM APF LIB
*        BADMOD     20                 MODULE PREFIX INVALID
*        BADSTAE    24                 CALLER ISSUED (E)STAE
*        BADXCTL    28                 CALLER ENTERED FROM XCTL
*        NOTREN     32                 CALLER NOT REENTRANT
*        BADADDR    36                 SVC NOT IN CALLER'S STORAGE
*
*        NOSVC109   109                IGX00GSF/ISFSVC not available
*
INIT140  BALR  R1,0
         LM    R10,R12,INIT_R10_R11_R12-*(R1) reload main base regs
         L     R9,PSATOLD-PSA          reload TCB address
         MODESET KEYADDR=TCBPKF,WORKREG=2 KEY=1 -> KEY=8 (ESR only)
         ICM   R0,B'1111',TCBTME       Active timer ?
         BNZ   INIT_NOT_ALONE          not alone, ABEND
         L     R5,TCBRBP               my PRB
         USING RBBASIC,R5
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         BNO   INIT_NOT_ALONE          not alone, ABEND
*
*        AUTH=ESR: allocate work area in KEY=4
*
INIT160  LR    R7,R13                  save addr of temp work-area
         L     R13,4(,R13)             caller's save area
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA
         SLR   R1,R1                   LOC=BELOW
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
         ST    R1,TCBUSER              save addr into TCBUSER
         MODESET KEYREG=(2)            switch back to TCB key
         ST    R1,8(,R13)              chain save area
         L     R2,24(,R13)             caller's R1
         MODESET EXTKEY=KEY4           KEY=4
         ST    R13,4(,R1)              chain save area
         LR    R13,R1                  work area
*
         MVC   OLDPKF,TCBPKF           save TCB key for MODESET
         MVI   PROTKEY,KEY4*16         own protection key
         OI    AUTHORIZED,L'AUTHORIZED REMEMBER I'M AUTHORIZED
         OI    AUTH_ESR,L'AUTH_ESR     AUTH=ESR
         ST    R2,PARMADDR             SAVE PARM/CPPL ADDRESS
         ST    R7,UNPROTWK             addr of unprotected save area
         LA    R0,DYNAML               length
         ST    R0,UNPROTWK+4           store length
         BAL   R14,EXECKEY0            execute next instruction in key0
         LH    R0,IGX00NNN-DYNAM(,R7)  get extended SVC number
         STH   R0,IGX00NNN             pass it to open msg
*
         L     R0,=A(LINESL)           LENGTH OF LINES BUFFER
         ST    R0,LINE1PTR+4           save length
         LA    R1,1                    LOC=ANY
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
         ST    R1,LINE1PTR             save addr
         SYNCH INIT600,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES,X
               MF=(E,SYNCHL)
*
*        Inactivate ESTAI exits
*
         ICM   R5,B'1111',TCBSTAB      First SCB
         BZ    INIT200                 no SCB, exit
         USING SCB,R5
*--loop
INIT168  BAL   R14,EXECKEY0            execute next instruction in key0
         OI    SCBFLGS3,SCBDUMMY       THIS SCB WILL NOT BE SCHEDULED
         ICM   R5,B'1111',SCBCHAIN     next SCB
         BNZ   INIT168                 loop through SCB chain
*--endloop
         B     INIT200                 continue
         DROP  R5                      SCB
*
INIT_NOT_ALONE LA R15,TCB              TCB address
         ABEND 1112,REASON=(15)  not alone in this task
*---------------------------------------------------------------------*
*                                                                     *
*        Allocate work areas in KEY=TCB                               *
*                                                                     *
*        This code is executed in two situations:                     *
*                                                                     *
*          1. SHOWMVS is APF authorized                               *
*          2. SHOWMVS is *not* authorized                             *
*                                                                     *
*---------------------------------------------------------------------*
INIT180  BALR  R1,0
         LM    R10,R12,INIT_R10_R11_R12-*(R1) reload main base regs
         L     R0,=A(LINESL)           LENGTH OF LINES BUFFER
         ST    R0,LINE1PTR+4           save length
         GETMAIN RU,LV=(0),BNDRY=PAGE
         ST    R1,LINE1PTR             save addr
         STC   R4,AUTH_RC              Authorization return code
         ST    R13,UNPROTWK            save addr
         LTR   R4,R4                   Authorized?
         BNZ   INIT190                 No, goback (MODE=PROB,KEY=TCB)
         OI    AUTHORIZED,L'AUTHORIZED REMEMBER I'M AUTHORIZED
         MODESET MODE=SUP              Switch to MODE=SUP
         L     R1,PSATOLD-PSA          MY TCB
         IC    R1,TCBPKF-TCB(,R1)      PSW KEY
         STC   R1,OLDPKF               save TCB key for MODESET
         STC   R1,PROTKEY              own protection key
         B     INIT200
*
*        IDENTIFY main entry point if invoked by the LOADER
*
INIT190  CLI   OWN_NAME,C'0'           IDENTIFY required?
         BL    INIT200                 no, jump
         L     R1,ISF$SHOW+4           own entry point
         IDENTIFY EPLOC=OWN_NAME,ENTRY=(R1)
*---------------------------------------------------------------------*
*                                                                     *
*        INITIALIZE THE ENVIRONMENT                                   *
*                                                                     *
*---------------------------------------------------------------------*
INIT200  EQU   *
*
*        BUILD A TRANSLATE TABLE FOR NON-PRINTABLE CHARACTERS
*
INIT210  MVI   TRTPRINT,C' '           PRINTABLE CHARACTERS
         MVC   TRTPRINT+1(255),TRTPRINT
         MVC   BLANKS,TRTPRINT         a bunch of blanks
         SLR   R15,R15
         SLR   R0,R0
         BAL   R1,INIT212
         DC    X'4A,7,5A,8,6A,6,7A,6'  Special characters
         DC    X'81,9,91,9,A2,8'       Lowercase
         DC    X'C1,9,D1,9,E2,8'       Uppercase
         DC    X'F0,A'                 Digits
         DC    X'00,0'                 end of table
*LOOP
INIT212  IC    R15,0(,R1)              FIRST BYTE
         IC    R0,1(,R1)               ITERATIONS
*--LOOP
INIT213  STC   R15,TRTPRINT(R15)       STORE X'4A' INTO TRTPRINT+X'4A'
         LA    R15,1(,R15)             BUMP INDEX
         BCT   R0,INIT213              NEXT CHARACTER
*--ENDLOOP
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE
         CLI   0(R1),0                 END OF TABLE?
         BNE   INIT212                 NEXT STRING
*ENDLOOP
         MVC   TRTDOTS,TRTPRINT        all spaces
         MVI   TRTDOTS+C' ',C'.'       change space to dot
         TR    TRTDOTS,TRTDOTS         change spaces to dots
         MVI   TRTDOTS+C' ',C' '       space remains space
*
         L     R10,LINE1PTR            First line
         USING LINE,R10
*
INIT220  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BZ    INIT230                 not TSO+ISPF, exit
         XCALL ISPLINK,                ISPF interface                  X
               (=C'ISREDIT',           ISPF FUNCTION                   X
               =F'5',                  length                          X
               =C'MACRO'),             Key-words                       X
               LINKAGE=SYNCH
INIT230  EQU   *
         OC    JCLPARM,BLANKS          CONVERT TO UPPERCASE
*
*        If PARM=CAPS, convert to uppercase
*
         CLC   =C'CAPS',JCLPARM        is it PARM=CAPS?
         BNE   INIT240                 no, jump
         OI    PARMCAPS,L'PARMCAPS     turn flag on
         OC    TRTPRINT+X'80'(48),BLANKS yes, convert to uppercase
*
*        Check for a //SHOWMVS DD
*
INIT240  DEVTYPE MY_DDN,WKCELL1        CHECK FOR "SHOWMVS" DD
         LTR   R15,R15                 DD allocated?
         BNZ   INIT242                 no, jump
         OI    HARDCOPY,L'HARDCOPY     yes, remember it's hardcopy
*---------------------------------------------------------------------*
*                                                                     *
*        Non-TSO mode                                                 *
*                                                                     *
*---------------------------------------------------------------------*
INIT242  TM    NON_TSO,L'NON_TSO       MODE=NON_TSO ?
         BNO   INIT250                 no, exit
         TM    HARDCOPY,L'HARDCOPY     //SHOWMVS allocated already?
         BO    INIT249                 yes, skip DYNALLOC
*
*        Allocate //SHOWMVS DD SYSOUT=*
*
         LA    R1,TENWORDS+4           WORK AREA ADDRESS
         XC    0(20,R1),0(R1)          CLEAR STORAGE
         MVI   0(R1),20                LENGTH
         MVI   1(R1),1                 VERB=ALLOC
         LA    R0,S99TXTPT             TEXT UNIT POINTERS
         ST    R0,8(,R1)               S99TUPTR
         ST    R1,TENWORDS             S99RBPTR
         OI    TENWORDS,X'80'          S99RBPTR
         LA    R1,TENWORDS             S99RBPTR
         DYNALLOC                      ALLOC SYSOUT=*,TERM=TS
         LTR   R15,R15                 DYNALLOC WENT OK?
         BNZ   INIT299                 NO, QUIT
         OI    HARDCOPY,L'HARDCOPY     yes, remember it's hardcopy
INIT249  EQU   *
         B     INIT260                 print title line
*
*        DYNALLOC stuff for //SHOWMVS DD
*
         CNOP  0,4
S99TXTPT DC    A(S99T1,S99T18+VL)      TEXT UNIT POINTERS
S99T1    DC    Y(1,1,L'MY_DDN)         DDN=SHOWMVS
MY_DDN   DC    CL8'SHOWMVS '           DDN=SHOWMVS
S99T18   DC    X'0018,0000'            SYSOUT=*
*---------------------------------------------------------------------*
*                                                                     *
*        TSO mode                                                     *
*                                                                     *
*---------------------------------------------------------------------*
INIT250  EQU   *
         CLC   =C'PUTLINE ',JCLPARM    PARM=PUTLINE?
         BNE   INIT251                 NO, EXIT
         OI    PUTLINE,L'PUTLINE       PUTLINE=ON
         NI    HARDCOPY,255-L'HARDCOPY HARDCOPY=OFF
         B     INIT260                 write title line
*
*        Determine output mode in the TSO/ISPF environment
*
INIT251  TM    HARDCOPY,L'HARDCOPY     hard-copy mode?
         BO    INIT260                 yes, write title
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         BZ    INIT255                 not TSO+ISPF, exit
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BZ    INIT255                 not TSO+ISPF, exit
         CLC   =C'SHORT_PUTLINE',JCLPARM is it PARM=SHORT_PUTLINE ?
         BE    INIT255                 yes, jump
         CLC   =C'EDIT',JCLPARM        is it PARM=EDIT?
         BE    INIT251E                yes, jump
         OI    BRIF_MODE,L'BRIF_MODE   NO, USE BRIF
         B     INIT290                 exit
INIT251E OI    EDIF_MODE,L'EDIF_MODE   NO, USE EDIF
         B     INIT290                 exit
*
*        Set SHORT_PUTLINE mode
*
INIT255  EQU   *
         OI    PUTLINE,L'PUTLINE       PUTLINE mode
         OI    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         BZ    INIT260                 no, do not clear the screen
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BO    INIT260                 yes, do not clear the screen
         STFSMODE ON,INITIAL=YES       CLEAR SCREEN
         STFSMODE OFF                  CLEAR SCREEN
*
*        Print Title line
*
INIT260  TIME  DEC
         STM   R0,R1,WKCELL1           HHMMSSHH,00YYDDDF
         STRING (TITLE,TITLE_L),INTO=LINE
         STRING (WKCELL1+4,P,YYYY-MM-DD),INTO=(LINE+60,20),            X
               2X,(WKCELL1,1,X),'.',(WKCELL1+1,1,X)
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BAL   R14,SPACE1          <== First line is title
*
*        Retrieve the address of IEFEB4UV in LPA
*
INIT290  BAL   R1,*+12                 br around CL8
         DC    C'IEFEB4UV'             device type scan rtne
         BAL   R14,LPASEARCH           GET ADDRESS OF IEFEB4UV ROUTINE
         ST    R15,IEFEB4UV            keep the address
*
*        establish the recovery environment
*
INIT295  EQU   *
         L     R2,=A(RECOVERY)         RECOVERY ROUTINE
         ESTAE (R2),                   RECOVERY ROUTINE                X
               CT,                     CREATE                          X
               PARAM=DYNAM,            PARAM FOR RECOVERY ROUTINE      X
               MF=(E,ESTAEL)
*
*        Inactivate any ESPIE environment created earlier
*        which could interfere with the trapping of my
*        own addressing and protection exceptions.
*
         ICM   R0,B'1111',TCBPIE       any ESPIE created earlier?
         BZ    ESPIE12                 no, exit
         TESTAUTH KEY=YES,STATE=YES,RBLEVEL=1    Check PSW key
         LTR   R15,R15                 running in mode=sup or key 0-7 ?
         BZ    ESPIE12                 yes, exit
         ESPIE SET,MF=(E,ESPIE11L)     Override existing PICA
         ST    R1,OLDPICA              Save its address for later
         B     ESPIE12
ESPIE11L ESPIE SET,ESPIE11X,PARAM=X'DEADBEEF',MF=L
ESPIE11X LR    R0,R1                   save addr of EPIE
         ICM   R1,B'1111',ESPIE11Z-ESPIE11X(R15)   get completion code
         ABEND (1)                     ABEND0C0
ESPIE11Z DC    X'80,0C0000'            S0C0 completion code
ESPIE12  EQU   *
*
         OI    INIT_DONE,L'INIT_DONE   initialization complete
*
INIT299  L     R14,INIT_R10_R11_R12    load return address
         BR    R14
INIT_R10_R11_R12 DC A(INIT_R10_ADDR,BASEADDR,INIT_R12_ADDR)
***********************************************************************
*                                                                     *
*        Initialize working storage.                                  *
*                                                                     *
*        This code is invoked twice, once to initialise the           *
*        unprotected work area and once again, when AUTH=ESR,         *
*        to initialise the protected work area.                       *
*                                                                     *
***********************************************************************
INIT600  EQU   *
         MVC   JSTCB,TCBJSTCB          THE JOB STEP TCB
         MVC   OLDPKF,TCBPKF           source key
         L     R1,CVTQLPAQ             first CDE on ALPAQ
         MVC   ALPACDE1,0(R1)          first CDE on ALPAQ
*
*        Move parm or command to JCLPARM
*
         ICM   R1,B'1111',PARMADDR     caller's R1
         BZ    INIT630                 zero, jump
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R2,0(,R1)               PARM/CPPL
         BAL   R14,EXECKEY0            execute next instr in key=0
         LH    R3,0(,R2)               length of parm or command
         LA    R4,2(,R2)               first byte of parm
         LTR   R2,R2                   INVOKED AS A PROGRAM?
         BM    INIT623M                YES, JUMP
*
         BAL   R14,EXECKEY0            execute next instr in key=0
         LH    R4,2(,R2)               LENGTH OF COMMAND NAME
         LA    R0,4(,R4)               OFFSET TO MESSSAGE TEXT
         SLR   R3,R0                   LENGTH OF MESSAGE TEXT
         LA    R4,4(R4,R2)             START OF MESSAGE TEXT
*
INIT623M MVC   JCLPARM,BLANKS          initialize parm area
         LA    R0,L'JCLPARM            length of "to" area
         CLR   R3,R0                   adjust length
         BNH   *+6                     adjust length
         LR    R3,R0                   adjust length
         IC    R15,OLDPKF              source key
         MVCK  JCLPARM(R3),0(R4),R15   Move data to working-storage
*
*        Check that the current PRB points at my entry point
*        and save my own name for ATTACH.
*
INIT630  L     R2,TCBRBP               Point to INIT600 PRB
         USING RBBASIC,R2
****     ICM   R2,B'0111',RBLINK+1     Point to SHOWMVS PRB
         L     R2,RBLINK               Point to SHOWMVS PRB
         TM    RBCDFLGS,RBCDSYNC       invoked via SYNCH?
         BO    INIT635                 yes, jump
         SLR   R3,R3
         ICM   R3,B'0111',RBCDE1       my own CDE or LPDE
         USING CDENTRY,R3
         L     R0,ISF$SHOW+4           A(SHOWMVS+VL)
         LA    R1,ISF$SHOW-SHOWMVS     offset to other entry point
         ALR   R1,R0                   A(ISF$SHOW+VL)
         CL    R0,CDENTPT              current PRB pointing at me?
         BE    INIT634                 yes, jump
         CL    R1,CDENTPT              current PRB pointing at me?
         BNE   INIT637                 no, jump
INIT634  TM    CDATTR,CDMIN            minor entry point?
         BNO   INIT634S                no, jump
         L     R3,CDXLMJP              YES, POINT TO MAJOR CDE/LPDE
 ORG INIT634 <<<<<<<<
INIT634S ST    R3,OWN_CDE              my own CDE or LPDE
         TM    CDATTR,CDREN            am I re-entrant?
         BNO   INIT637                 no, jump
         MVC   OWN_NAME,CDNAME         my own name
         B     INIT640                 exit
*
*        Invoked via SYNCH
*
INIT635  L     R1,RBGRS15              addr of my entry point (R15)
*
*        If I've been invoked via SYNCH or BALR,
*        IDENTIFY my entry point for ATTACH.
*
INIT637  LA    R1,0(,R1)               get rid of AMODE bit
         STRING ((R1),,X),INTO=OWN_NAME convert addr to EBCDIC
*---------------------------------------------------------------------*
*                                                                     *
*        Determine address-space type                                 *
*                                                                     *
*---------------------------------------------------------------------*
INIT640  MVC   ZSCREENW,=A(L'LINE)     default ISPF screen size
         L     R2,TCBJSCB              my JSCB
         USING IEZJSCB,R2
         ICM   R3,B'1111',JSCBPSCB     TSO PSCB
         BNZ   INIT645L                TSO, jump
INIT645N OI    NON_TSO,L'NON_TSO
         B     INIT680                 no TSO, no ISPF
INIT645L ST    R3,PSCB@                save PSCB address
         MVC   UPT@,PSCBUPT-PSCB(R3)   save ECT address
         L     R3,PSAAOLD-PSA          point at ASCB
         USING ASCB,R3
         L     R4,ASCBASXB             my ASXB
         L     R4,ASXBLWA-ASXB(,R4)    Logon Work Area
         ST    R4,LWA@                 save LWA address
         USING LWA,R4
         MVC   ECT@,LWAPECT            SAVE FOR PUTLINE
         ICM   R14,B'1111',ASCBTSB     check TSB address
         BNZ   INIT645T                TSO on-line, jump
INIT645B OI    TSO_BATCH,L'TSO_BATCH
         B     INIT645X
INIT645T OI    TSO_ON_LINE,L'TSO_ON_LINE
         GTSIZE ,                      get terminal size
         ST    R1,ZSCREENW             save screen width
         MVC   TSB@,ASCBTSB            save TSB address
INIT645X EQU   *
         DROP  R3,R4                   ASCB,LWA
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve ISPF variables                                      *
*                                                                     *
*---------------------------------------------------------------------*
         WXTRN ISPLNK,ISPQRY           make them optional
INIT650  ICM   R0,B'1111',=A(ISPQRY)   ISPLINK linked with us?
         BNZ   INIT652                 yes, do not load it
         LOAD  EP=ISPQRY,ERRET=INIT680   LOAD ISPQRY
INIT652  ST    R0,ISPQRY@              STORE THE ADDRESS
         SYNCH SYNCH_ISPQRY,RESTORE=YES invoke ISPQRY
         LTR   R15,R15                 running under ISPF?
         BNZ   INIT680                 no, exit
         OI    ISPF_AVAILABLE,L'ISPF_AVAILABLE
*
         ICM   R0,B'1111',=A(ISPLNK)   ISPLINK linked with us?
         BNZ   INIT653                 yes, do not load it
         LOAD  EP=ISPLINK              LOAD ISPLINK
INIT653  ST    R0,ISPLINK              save address
         SYNCH INIT660,RESTORE=YES
         CH    R15,=H'20'              ISPF really available?
         BL    INIT670                 yes, continue
         NI    ISPF_AVAILABLE,255-L'ISPF_AVAILABLE
         B     INIT680                 no, exit
*
*        This code always executes in key=8
*
INIT660  L     R13,UNPROTWK            Point at unprotected area
         ST    R0,ISPLINK              store A(ISPLINK)
         XCALL ISPLINK,                ISPF interface                  X
               (=C'CONTROL',           ISPF FUNCTION                   X
               =C'ERRORS',             Key-word                        X
               =C'RETURN'),            Key-word                        X
               ERRET=INIT669           invoked via REXX
*
         LA    R14,L'ZENVIR            LENGTH
         LA    R15,L'ZPDFREL           LENGTH
         LA    R0,L'ZAPPLID            LENGTH
         LA    R1,L'ZSCREENW           LENGTH
         STM   R14,R1,WORK256          LENGTH ARRAY
         XCALL ISPLINK,                                                X
               (=C'VCOPY',             ISPF SERVICE                    X
               VARLIST1,               Variable list                   X
               WORK256,                LENGTH ARRAY                    X
               ISPFVARS,               AREA ADDRESS                    X
               =C'MOVE')               MOVE MODE
         LA    R1,ISPFVARS             data returned by ISPF
INIT669  EXIT                          goback to SYNCH and INIT670
VARLIST1 DC    C'(ZENVIR ZPDFREL ZAPPLID ZSCREENW)',0H'0'
*
INIT670  LA    R14,L'ISPFVARS          length
         IC    R15,OLDPKF              source key
         MVCK  ISPFVARS(R14),0(R1),R15 Move data to protected storage
*
INIT671  CLI   ZPDFREL,C'P'            ZPDFREL variable exists?
         BE    INIT672                 yes, jump
         MVC   ZPDFREL,=C'PDF 3.1 '    no, use ISPF version
         MVC   ZPDFREL+4(3),ZENVIR+5   no, use ISPF version
*
INIT672  PACK  WKCELL3,ZSCREENW        convert to binary
         CVB   R0,WKCELL3              convert to binary
         CL    R0,=A(L'LINE)           too long?
         BL    *+8                     no, jump
         L     R0,=A(L'LINE)           yes, use line length
         ST    R0,ZSCREENW             save binary value
*
INIT674  MVC   NEWAPPL,=C'ISR '        convert to binary
         CLC   =C'ISF ',ZAPPLID        invoked under SDSF?
         BE    INIT679                 yes, JUMP
         CLC   =C'EPIC',ZAPPLID        invoked under EPIC/MVS?
         BE    INIT679                 yes, JUMP
         CLC   =C'SAR ',ZAPPLID        invoked under SAR?
         BE    INIT679                 yes, JUMP
         MVC   NEWAPPL,ZAPPLID         no, keep current APPLID
INIT679  EQU   *
*
*        Locate IGX00GSF module via the Type-3 SVC router table
*
INIT680  EQU   *
         TM    AUTHORIZED,L'AUTHORIZED
         BO    INIT690                 YES, EXIT
         MVI   IGX00NNN,X'FF'          IGX00NNN not available
         L     R1,CVTABEND             SECONDARY CVT
         L     R5,SCVTSVCT-SCVTSECT(,R1) START OF SVC TABLE
         USING SVCENTRY,R5
         L     R5,SVCENTRY+109*8       ADDR OF T3-ESR TABLE
         L     R1,SVCESRMX             get max ESR number
         LA    R0,1(,R1)               R0 = number of entries
         SLR   R1,R1                   init ctr
         LA    R5,SVCENTRY+8           SKIP HEADER
*loop
INIT681L L     R2,SVCEP                entry point
         CLC   =C'IGX00GSF',4(R2)      is this my own IGX00GSF ?
         BE    INIT685                 yes, exit loop
         LA    R5,SVCENTRY+8           NEXT SVC
         LA    R1,1(,R1)               count entries
         BCT   R0,INIT681L             try next SVC entry
*endloop
*
*        If IGX00GSF was not found, check that the SDSF SVC (IGX00011)
*        is in MLPA or PLPA
*
INIT684  EQU   *
         BAL   R1,*+12                 br around CL8
         DC    C'IGX00011'             ISFSVC
         BAL   R14,LPASEARCH           GET ADDRESS OF IGX00011 ROUTINE
         LTR   R1,R1                   CDE/LPDE located ?
         BZ    INIT690                 NO, EXIT
         LA    R1,11                   IGX00011
INIT685  EQU   *
         STH   R1,IGX00NNN             IGX00NNN available
*
*        Check that I'm alone in this TCB
*
INIT686  EQU   *
         L     R9,PSATOLD-PSA          my TCB
         USING TCB,R9
         L     R5,TCBRBP               my PRB (SYNCH)
         USING RBBASIC,R5
         L     R5,RBLINK               SHOWMVS PRB
         SLR   R6,R6
         ICM   R6,B'0111',RBCDE1       my CDE
         USING CDENTRY,R6
         TM    CDATTR2,CDSYSLIB        LOADED FROM AUTHORIZED LIBRARY ?
         BZ    INIT690                 no, exit
         ICM   R0,B'1111',TCBTME       Active timer ?
         BNZ   INIT687                 not alone, jump
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         BO    INIT690                 yes, jump
*
INIT687  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BO    INIT689                 YES, ATTACH
INIT688  EQU   *
         L     R1,PARMADDR             caller's PARM or CPPL
         ATTACH EPLOC=CDNAME,          my own name                     +
               SZERO=NO,               do not share SP0                +
               ECB=SUB_ECB1,           end of task ECB                 +
               SF=(E,ATTACHL)
         ST    R1,SUB_ECB1+4           save TCB address
         WAIT  ECB=SUB_ECB1            wait for sub-task completion
         DETACH SUB_ECB1+4             detach the sub-task
         LA    R15,12                  RC=12
         EXIT
*
*        ISPF
*
INIT689  EQU   *
         STRING 'CMD(',(OWN_NAME,,T),1X,(JCLPARM,,T),') MODE(FSCR)',   X
               INTO=WORK256
         CLC   NEWAPPL,ZAPPLID         APPLID=ISR?
         BE    INIT695                 yes, jump
         STRING (WORK256,,T),' NEWAPPL(',(NEWAPPL,,T),')',INTO=WORK256
         B     INIT695                 yes, jump
*
*        re-invoke myself
*
INIT690  EQU   *
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BZ    INIT699                 not TSO+ISPF, exit
         CLC   NEWAPPL,ZAPPLID         APPLID=ISR?
         BE    INIT699                 yes, jump
         STRING 'PGM(',(OWN_NAME,,T),') PARM(',(JCLPARM,,T),           X
               ') NEWAPPL(',(NEWAPPL,,T),')',INTO=WORK256
INIT695  EQU   *
         XCALL ISPLINK,                                                X
               (=C'SELECT',            ISPF SERVICE                    X
               =A(L'WORK256),          length                          X
               WORK256)                text
         LTR   R2,R15                  OK?
         BZ    INIT698                 yes, jump
         STRING 'SELECT Service failed at label INIT185, R15=',        X
               ((R2),,L),INTO=CSVDWORK
         TPUT  CSVDWORK,(R15)          issue error message
         TPUT  WORK256,256             issue error message
INIT698  EQU   *
         LA    R15,200(,R2)            auth failure code
         EXIT                          goback
INIT699  SLR   R15,R15                 RC=0
         EXIT                          goback
*---------------------------------------------------------------------*
*                                                                     *
*        Start key-word definitions for TSO Parse                     *
*                                                                     *
*---------------------------------------------------------------------*
PCLCSECT IKJPARM
PCLCSECT RMODE ANY
CAPS_PCE IKJKEYWD
         IKJNAME 'CAPS'
EDIT_PCE IKJKEYWD
         IKJNAME 'EDIT'
PUTLINE_PCE IKJKEYWD
         IKJNAME 'PUTLINE'
*
         TITLE 'SHOWMVS &REL - Operating System Level'
*---------------------------------------------------------------------*
*                                                                     *
*Operating System:                                                    *
*                                                                     *
*  OS/390 01.01.00         CVTOSLVL: FF E7 C4 00 00                   *
*                                                                     *
*  DFSMS/MVS 1.1.0         Licensed Components: hsm dss rmm           *
*                                                                     *
*  JES2 Level: OS 1.1.0    NJE Node: SYS1                             *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*Operating System:                                                    *
*                                                                     *
*  MVS/ESA 4.3.0           MVS/DFP  3.3.1       CVTOSLVL: FF 80 00 00 *
*                                                                     *
*  DFSMS/MVS 1.1.0         Licensed Components: hsm dss rmm           *
*                                                                     *
*  JES2 Level: SP 4.3.0    NJE Node: SYS1                             *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*Operating System:                                                    *
*                                                                     *
*  MVS/ESA 4.2.0       MVS/DFP  3.3.0       CVTOSLVL: FC 00 00 00 00  *
*                                                                     *
*  JES2 Level: SP 4.2.0    NJE Node: SYS1                             *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*Operating System:                                                    *
*                                                                     *
*  CVTPRODI: HBB2220  CVTPRODN: SP2.2.0  DFP LEVEL: 2.4.0  CVTDCB: 9B *
*                                                                     *
*---------------------------------------------------------------------*
SPLEVEL  BEGIN_PROC KW=SPLEVEL
         STRING 'Operating System:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R5,CVTJESCT             JES COMM TABLE
         USING JESCT,R5
         MVC   PRISUBNM,JESPJESN       NAME OF PRIMARY SUB-SYSTEM
         MVC   PRISUBTY,=C'JES2'       TYPE OF PRIMARY SUB-SYSTEM
         L     R7,CVTDFA               DATA FACILITIES AREA
         USING DFA,R7
         MVC   WKCELL1(6),=X'40204B204B20' ' X.X.X'
         ED    WKCELL1(6),DFAREL       X'3200'
*
*        MVS/SP1 OR MVS/SP2
*
SPLVL91  STRING '  CVTPRODI: ',CVTPRODI,'  CVTPRODN: ',CVTPRODN,       X
               '  DFP LEVEL:',(WKCELL1,6),                             X
               '   CVTDCB: ',(CVTDCB,1,X),                             X
               INTO=LINE
&MVSLEVEL SETC 'XA'                    MVS/SP
&DFPLEVEL SETC 'XA'                    DFP
&SMSLEVEL SETC 'NO'                    DFSMS/MVS
         AIF   (NOT D'DFASMS).DFPLVL3
&DFPLEVEL SETC '310'
         AIF   (NOT D'DFAPDSE).DFPLVL3
&DFPLEVEL SETC '320'
         AIF   (NOT D'DFAVOLSN).DFPLVL3
&DFPLEVEL SETC '330'
         AIF   (NOT D'DFADFSMS).DFPLVL3
&SMSLEVEL SETC '110'
         GBLC  &IHADFARELS                                      HDZ11C0
         AIF   ('&IHADFARELS' EQ '').DFPLVL3
&SMSLEVEL SETC '&IHADFARELS'
.DFPLVL3 ANOP
         AIF   (NOT D'CVTOSEXT).SPLVL99     MVS/XA MACLIB, JUMP
         TM    CVTDCB,CVTOSEXT         DO WE HAVE OSLVL?
         BNO   SPLVL99                 no, exit
*
*        MVS/ESA (SP3, SP4 OR SP5)
*
SPLVL31  STRING '  MVS/ESA ',(CVTPRODN+2,6),                           X
               '          MVS/DFP ',(WKCELL1,6),                       X
               '       CVTOSLVL: ',                                    X
               (CVTOSLV0,1,X),1X,(CVTOSLV1,1,X),1X,                    X
               (CVTOSLV2,1,X),1X,(CVTOSLV3,1,X),1X,                    X
               INTO=LINE
         OI    HBB3310,L'HBB3310       running on ESA
&MVSLEVEL SETC '310'
         AIF   (NOT D'CVTJ3313).SPLVL31S
         TM    CVTOSLV0,CVTJ3313       ESA 313?
         BZ    SPLVL31S                no, jump
         OI    JBB3313,L'JBB3313       keep it for later
&MVSLEVEL SETC '313'
         AIF   (NOT D'CVTH4410).SPLVL31S
         TM    CVTOSLV0,CVTH4410       ESA 4.1?
         BZ    SPLVL31S                no, jump
         OI    HBB4410,L'HBB4410       keep it for later
         L     R4,CVTECVT              -> ECVT
         USING ECVT,R4
         ST    R4,ECVT@                save addr for later
&MVSLEVEL SETC '410'
         AIF   (NOT D'CVTH4420).SPLVL31D
         TM    CVTOSLV0,CVTH4420       ESA 4.2?
         BZ    SPLVL31S                no, jump
         OI    HBB4420,L'HBB4420       keep it for later
&MVSLEVEL SETC '420'
         AIF   (NOT D'CVTJ4422).SPLVL31D
         TM    CVTOSLV0,CVTJ4422       ESA 4.2.2?
         BZ    SPLVL31S                no, jump
         OI    JBB4422,L'JBB4422       keep it for later
*
*        Make last page read-only
*
         LM    R2,R3,LINE1PTR          addr/len of lines buffer
         ALR   R2,R3                   first byte after buffer
         BCTR  R2,0                    last byte of last page
         PGSER R,PROTECT,A=(R2),EA=(R2)
&MVSLEVEL SETC '422'
.SPLVL31D ANOP
         AIF   (NOT D'CVTH4430).SPLVL31S
         TM    CVTOSLV1,CVTH4430       ESA 4.3?
         BZ    SPLVL31S                no, jump
         OI    HBB4430,L'HBB4430       keep it for later
         MVC   CSVT@,ECVTCSVT          CSV Table
&MVSLEVEL SETC '430'
         AIF   (NOT D'CVTH5510).SPLVL31S
         TM    CVTOSLV1,CVTH5510       ESA 5.1?
         BZ    SPLVL31S                no, jump
         OI    HBB5510,L'HBB5510       keep it for later
&MVSLEVEL SETC '510'
         AIF   (NOT D'CVTH5520).SPLVL31S
         TM    CVTOSLV1,CVTH5520       ESA 5.2?
         BZ    SPLVL31S                no, jump
         OI    HBB5520,L'HBB5520       keep it for later
&MVSLEVEL SETC '520'
         AIF   (NOT D'CVTJ5522).SPLVL31S
         TM    CVTOSLV1,CVTJ5522       ESA 5.2.2?
         BZ    SPLVL31S                no, jump
         OI    JBB5522,L'JBB5522       keep it for later
&MVSLEVEL SETC '522'
         AIF   (NOT D'CVTH6601).SPLVL31S
         TM    CVTOSLV1,CVTH6601       OS/390 R1?
         BZ    SPLVL31S                no, jump
         STRING 2X,(ECVTPNAM,,T),1X,   OS/390                          X
               ECVTPVER,'.',ECVTPREL,'.',ECVTPMOD,                     X
               9X,'CVTOSLVL: ',                                        X
               (CVTOSLV0,1,X),1X,(CVTOSLV1,1,X),1X,                    X
               (CVTOSLV2,1,X),1X,(CVTOSLV3,1,X),1X,                    X
               (CVTOSLV4,1,X),1X,(CVTOSLV5,1,X),1X,                    X
               (CVTOSLV6,1,X),1X,(CVTOSLV7,1,X),1X,                    X
               INTO=LINE
         OI    HBB6601,L'HBB6601       keep it for later
         L     R1,CVTLINK              SYS1.LINKLIB
         LOAD  EP=IFAEDLIS,DCB=(R1)    ENABLE/DISABLE LIST
         ST    R0,IFAEDLIS             SAVE EP ADDRESS
&MVSLEVEL SETC '601'
         AIF   (NOT D'CVTJ6602).SPLVL31S
         TM    CVTOSLV1,CVTJ6602       OS/390 R2?
         BZ    SPLVL31S                no, jump
         OI    JBB6602,L'JBB6602       keep it for later
&MVSLEVEL SETC '602'
         AIF   (NOT D'CVTH6603).SPLVL31S
         TM    CVTOSLV1,CVTH6603       OS/390 R3?
         BZ    SPLVL31S                no, jump
         OI    HBB6603,L'HBB6603       keep it for later
&MVSLEVEL SETC '603'
         AIF   (NOT D'CVTJ6604).SPLVL31S
         TM    CVTOSLV2,CVTJ6604       OS/390 R4?
         BZ    SPLVL31S                no, jump
         OI    JBB6604,L'JBB6604       keep it for later
         ICM   R0,B'1111',ECVTDLPF     first CDE on DLPAQ
         BZ    *+8                     zero, ignore
         ST    R0,ALPACDE1             first CDE on ALPAQ or DLPAQ
&MVSLEVEL SETC '604'
         AIF   (NOT D'CVTH6605).SPLVL31S
         TM    CVTOSLV2,CVTH6605       OS/390 R5?
         BZ    SPLVL31S                no, jump
         OI    HBB6605,L'HBB6605       keep it for later
&MVSLEVEL SETC '605'
         AIF   (NOT D'CVTH6606).SPLVL31S
         TM    CVTOSLV2,CVTH6606       OS/390 R6?
         BZ    SPLVL31S                no, jump
         OI    HBB6606,L'HBB6606       keep it for later
&MVSLEVEL SETC '606'
         AIF   (NOT D'CVTJ6607).SPLVL31S
         TM    CVTOSLV2,CVTJ6607       OS/390 R7?
         BZ    SPLVL31S                no, jump
         OI    JBB6607,L'JBB6607       keep it for later
&MVSLEVEL SETC '607'
         AIF   (NOT D'CVTH6608).SPLVL31S
         TM    CVTOSLV2,CVTH6608       OS/390 R8?
         BZ    SPLVL31S                no, jump
         OI    HBB6608,L'HBB6608       keep it for later
&MVSLEVEL SETC '608'
         AIF   (NOT D'CVTJ6609).SPLVL31S
         TM    CVTOSLV2,CVTJ6609       OS/390 R9?
         BZ    SPLVL31S                no, jump
         OI    JBB6609,L'JBB6609       keep it for later
&MVSLEVEL SETC '609'
.SPLVL31S ANOP
SPLVL31S BAL   R14,SPACE2              Double Space
*
*        DFSMS/MVS LEVEL (MVS/ESA ONLY)
*
         AIF   (NOT D'DFADFSMS).SMS1
         CLI   DFAPROD,DFADFSMS        DO WE HAVE DFSMS?
         BNE   SPLVL31X                NO, JUMP
         OI    JDZ1110,L'JDZ1110       remember DFSMS presence
         L     R2,CVTLINK              link-list DCB
         LOAD  EP=IGWASMS,DCB=(R2)     SMS callable service         +RS
         ST    R0,IGWASMS              SAVE EP ADDRESS              +RS
         LOAD  EP=IGWLSHR,DCB=(R2)     SMS callable service         +RS
         ST    R0,IGWLSHR              SAVE EP ADDRESS              +RS
         STRING '  DFSMS/MVS ',                                    @385X
               (DFAVER,FL1,L),'.',     VERS                        @385X
               (DFARLSE,FL1,L),'.',    REL                         @385X
               (DFAMOD,FL1,L),         MOD                         @385X
               INTO=LINE
         CLI   DFARLSE,2               1.2.0 ?
         BL    *+8                     no, jump
         OI    HDZ11B0,L'HDZ11B0       SET FLAG ON
         CLI   DFARLSE,3               1.3.0 ?
         BL    *+8                     no, jump
         OI    HDZ11C0,L'HDZ11C0       SET FLAG ON
         CLI   DFARLSE,4               1.4.0 ?
         BL    *+8                     no, jump
         OI    HDZ11D0,L'HDZ11D0       SET FLAG ON
         CLI   DFARLSE,5               1.5.0 ?
         BL    *+8                     no, jump
         OI    HDZ11E0,L'HDZ11E0       SET FLAG ON
*
*        Display Products Allowed to run (IGDDFPKG)
*
         TM    JBB6602,L'JBB6602       OS/390 R2?
         BO    SPLVL31T                yes, exit               DL9809
         TM    HBB6601,L'HBB6601       OS/390 R1?
         BZ    SPLVL31P                NO, JUMP
         CLI   DFALPKG,0               any bits set?
         BE    SPLVL31T                no, exit                DL9809
SPLVL31P EQU   *
         STRING (LINE,,T),9X,'Licensed Components: none',INTO=LINE
         LA    R1,LINE(R15)            point to end of text
         SH    R1,=H'4'                point to "none"
         TM    DFALPKG,DFAHSM          HSM allowed to run?
         BZ    *+4+6+4                 no, jump
         MVC   0(4,R1),=C'hsm '        yes, show it
         LA    R1,4(,R1)               bump pointer
         TM    DFALPKG,DFADSS          DSS allowed to run?
         BZ    *+4+6+4                 no, jump
         MVC   0(4,R1),=C'dss '        yes, show it
         LA    R1,4(,R1)               bump pointer
         TM    DFALPKG,DFARMM          RMM allowed to run?
         BZ    *+4+6+4                 no, jump
         MVC   0(4,R1),=C'rmm '        yes, show it
         LA    R1,4(,R1)               bump pointer
         AIF   (NOT D'DFAOPT).SPLVL31T                          HDZ11C0
         TM    DFALPKG,DFAOPT          SMS Optimizer allowed to run?
         BZ    *+4+6+4                 no, jump
         MVC   0(4,R1),=C'OPT '        yes, show it
         LA    R1,4(,R1)               bump pointer
         TM    DFALPKG,DFAADSM         ADSM allowed to run?
         BZ    *+4+6+4                 no, jump
         MVC   0(5,R1),=C'ADSM '       yes, show it
         LA    R1,5(,R1)               bump pointer
         TM    DFALPKG,DFASORT         DFSORT allowed to run?
         BZ    *+4+6                   no, jump
         MVC   0(5,R1),=C'SORT '       yes, show it
.SPLVL31T ANOP
SPLVL31T EQU   *                                               DL9809
         AIF   (NOT D'DFADYNL).SPLVL31U                        +RS0199
         TM    DFAFEAT4,DFADYNL        Dynamic linklist?       DL9809
         BNO   SPLVL31U                no, jump                DL9809
         STRING (LINE,,T),                                     DL9809  X
               9X,'Dynamic Linklist is supported',INTO=LINE    DL9809
.SPLVL31U ANOP                                                 +RS0199
         BAL   R14,SPACE1              Single Space
SPLVL31U EQU   *                                               DL9809
         AIF   (NOT D'DFADYLPA).SPLVL31Y                        HDZ11D0
         TM    DFAFEAT4,DFADYLPA       Dynamic LPA available?  DL9809
         BNO   SPLVL31V                no, jump                DL9809
         STRING 26X,'Dynamic LPA is available',INTO=LINE       DL9809
         BAL   R14,SPACE1              Single Space            DL9809
SPLVL31V EQU   *                                               DL9809
         TM    DFAFEAT4,DFAFORK        DFSMS loader fork?      DL9809
         BNO   SPLVL31Y                no, jump                DL9809
         STRING 26X,'DFSMS Loader Fork Exit is present',INTO=LINE DL98
         BAL   R14,SPACE1              Single Space                 +JM
.SPLVL31Y ANOP                                                  HDZ11D0
SPLVL31Y EQU   *
         BAL   R14,BLANK1              Double Space                 +JM
SPLVL31X EQU   *
.SMS1    ANOP
*
*        JES2 LEVEL (MVS/ESA ONLY)
*
SPLVL32J EQU   *
         L     R6,JESCTEXT             JESCT Extension
         USING JESPEXT,R6
*
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         BAL   R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15                 HASMHCCT module found?
         BNZ   SPLVL32K                NO, JUMP
         OI    SHASMIG,L'SHASMIG       SHASMIG available
SPLVL32K EQU   *
*
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*
*        Scan SSCT chain to locate the primary sub-system
*
*loop
SPLVL32L CLC   SSCTSNAM,PRISUBNM       is this the primary sub-system?
         BE    SPLVL32M                yes, exit loop
         ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         BNZ   SPLVL32L                check next sub-system
*endloop
         B     SPLVL32N                exit
SPLVL32M ST    R5,PRISUBCT             JSCVT for primary sub-system
         CLI   SSCTSSID,SSCTJES3       TYPE=JES3?
         BNE   SPLVL32N                no, jump
         MVI   PRISUBTY+3,C'3'         TYPE OF PRIMARY SUB-SYSTEM
SPLVL32N EQU   *
*
*        Retrieve JES version and NJE node using the SSVI interface.
*
         AIF   (NOT D'CVTH4430).SPLVL32X
         LA    R1,PRISUBNM             POINT AT SUB-SYSTEM NAME
         BAL   R14,GET_SSVI         <- get SSVI info
         LTR   R15,R15                 supported by this sub-system?
         BNZ   SPLVL32X                no, jump
         USING SSVI,R1
         LA    R2,SSVIVER1             start of data
         USING SSVIVDAT,R2
         LH    R0,SSVIVLEN             length
         LA    R3,SSVIDAT              START OF DATA
*loop
SPLVL32E CLC   =C',JES_NODE=',0(R3)    KEY-WORD FOUND?
         BE    SPLVL32F                YES, EXIT LOOP
         LA    R3,1(,R3)               NO, BUMP POINTER UP
         BCT   R0,SPLVL32E             KEEP ON SCANNING
*endloop
         B     SPLVL32X                NJE node not found
SPLVL32F LA    R4,10+1(,R3)            point at NJE node
         STRING 2X,PRISUBNM,           JES2                            X
               ' Level: ',SSVIVERS,    OS 1.1.0  or  SP 4.3.0          X
               '    NJE Node: ',((R4),8),                              X
               INTO=LINE
         AIF   (NOT D'CVTH5510).SPLVL32T
         STRING 2X,PRISUBNM,           JES2                            X
               ' Level: ',SSVIVERS,    OS 1.1.0  or  SP 4.3.0          X
               '    NJE Node: ',((R4),8),                              X
               '    DSNID: ',JESDSNID,                                 X
               INTO=LINE
.SPLVL32T ANOP
         B     SPLVL99                 exit
         DROP  R1,R2                   SSVI,SSVIVDAT
SPLVL32X EQU   *
.SPLVL32X ANOP
*
*        For versions of JES2 prior to HJE4430, retrieve
*        the product level and NJE node from the HCCT.
*
         L     R6,SSCTSUS2             A(HCCT)
         USING HCCT,R6
         BAL   R1,SPLVL35              BRANCH AROUND TABLE
         DC    X'008C'             +00 OFFSET TO CCTSSVT  (313)
         DC    X'010C'             +02 OFFSET TO CCTNDENM (313)
         DC    X'01F0'             +04 OFFSET TO CCTSNV   (313)
         DC    X'008C'             +00 OFFSET TO CCTSSVT  (410)
         DC    X'0120'             +02 OFFSET TO CCTNDENM (410)
         DC    X'021C'             +04 OFFSET TO CCTSNV   (410)
         DC    X'009C'             +00 OFFSET TO CCTSSVT  (420)
         DC    X'0130'             +02 OFFSET TO CCTNDENM (420)
         DC    X'0244'             +04 OFFSET TO CCTSNV   (420)
         DC    X'009C'             +00 OFFSET TO CCTSSVT  (430)
         DC    X'014C'             +02 OFFSET TO CCTNDENM (430)
         DC    X'0264'             +04 OFFSET TO CCTSNV   (430)
         DC    X'009C'             +00 OFFSET TO CCTSSVT  (510)
         DC    X'0150'             +02 OFFSET TO CCTNDENM (510)
         DC    X'028C'             +04 OFFSET TO CCTSNV   (510)
 ORG *-12 delete 430/510 offsets
         DC    X'0000'                 END OF TABLE
*LOOP
SPLVL35  LH    R2,0(,R1)               GET OFFSET TO SSVT ADDRESS
         LTR   R2,R2                   END OF TABLE?
         BZ    SPLVL98                 yes, exit loop
         LA    R2,HCCT(R2)             R2=>CCTSSVT (SSVT addr)
         CLC   SSCTSSVT,0(R2)          IS THIS MY JES2?
         BNE   SPLVL35N                NO, JUMP
         LH    R2,4(,R1)               GET OFFSET TO CCTSNV
         LA    R2,HCCT(R2)             R2=>CCTSNV (SUBSYS NAME)
         USING CCTSNV,R2
         CLC   PRISUBNM,CCTSNV         IS THIS MY JES2?
         BE    SPLVL36                 YES, EXIT LOOP
SPLVL35N LA    R1,2+2+2(,R1)           NEXT ENTRY
         B     SPLVL35                 TRY NEXT ENTRY IN TABLE
*ENDLOOP
SPLVL36  LH    R7,2(,R1)               GET OFFSET TO CCTNDENM
         ALR   R7,R6                   R7=>OWN NODE
         USING CCTNDENM,R7
         STRING 2X,PRISUBNM,' Level: ',CCTPVRSN,                       X
               '    NJE Node: ',CCTNDENM,                              X
               INTO=LINE
         MVI   PITHALT$,PITHALTA+PITHALT1
         CLI   CCTVRSN,CCTVR430        JES2 4.3?
         BNL   SPLVL99                 yes, exit
         MVI   PITHALT$,PITHALT42      no, use HJE4420 mask
         STRING 2X,PRISUBNM,' Level: ',CCTSSVS,                        X
               '    HASPSSSM: ',CCTSSSMN,' at ',(CCTSMBEG,,X),         X
               '    NJE Node: ',CCTNDENM,                              X
               INTO=LINE
         CLI   CCTSSSMN,C' '           IS THIS JES2 420?
         BNE   SPLVL99                 YES, JUMP
         STRING 2X,PRISUBNM,' Level: ',CCTSSVS,                        X
               '    NJE Node: ',CCTNDENM,                              X
               INTO=LINE
         B     SPLVL99
SPLVL98  STRING 2X,PRISUBNM,' Level: ','*unknown*',                    X
               ' CCTVRSN=',(CCTVRSN,FL1,R3Z),                          X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
        #SNAP ADDR=HCCT,LENGTH=32      Unknown JES2 Release
         DROP  R2,R5,R6,R7             SSCT, HCCT
.SPLVL99 ANOP
SPLVL99  TR    LINE,TRTPRINT           clean up non-printable
         BAL   R14,SPACE2              Double Space
         END_PROC
*
*        HASP Common Storage Communication Table
*
HCCT     DSECT
CCTVR430 EQU   5                   HCCT version equate (430)
CCTVR420 EQU   1                   HCCT version equate (420)
CCTVRSN  DS    AL1(CCTVR430)    00 CONTROL BLOCK VERSION
         DS    XL7              01 RESERVED FOR FUTURE USE
CCTSSSMN DS   0C'HASPSSSM'      08 HASPSSSM LOAD MODULE NAME (420)
CCTOFSTB DS    A                08 Address of offset table (430)
         DS    A                12 Reserved for future use
CCTSMBEG DS   0F                16 HASPSSSM/HASPAM START ADDR (420)
CCTPVRSN DS    C'SP 4.3.0'      16 SP V.R.M, product version (430)
*
CCTSNV   DSECT
CCTSSNM  DS    C'JES2'             NAME OF SUBSYSTEM
CCTSSVS  DS    C'430 '             VERSION, RELEASE, MOD
*
CCTNDE   DSECT
CCTNDENL DS    X'0'                Actual length of node name
CCTNDENM DS    C'POKVSSY2'         NODE NAME
         TITLE 'SHOWMVS &REL - Opening Message'
*---------------------------------------------------------------------*
*                                                                     *
*        Issue an opening message when running under ISPF             *
*                                                                     *
*---------------------------------------------------------------------*
OPENMSG  BEGIN_PROC
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BZ    OPENMSG9                no, exit
         TM    HARDCOPY,L'HARDCOPY     Hard-copy mode?
         BO    OPENMSG9                yes, exit
         TM    PUTLINE,L'PUTLINE       PUTLINE mode?
         BO    OPENMSG9                yes, exit
         STRING 'SHOWMVS &REL',INTO=LINE
         ST    R15,WKCELL1             save length
         XCALL ISPLINK,(=C'VREPLACE',=C'ZEDSMSG ',WKCELL1,LINE),       X
               LINKAGE=SYNCH           KEY=8
*
*        Using the official ASMH/HLASM distinction trick,
*        simulate the SYSVER and SYSDATC variables
*        of HLASM when assembled under ASMH
*
         LCLA  &ASMH_HLASM
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X
&SYSVER  SETC  'ASMH'
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
         AIF   ('&SYSDATC' LT '20500000').ASMH1X
&SYSDATC SETC  '19'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
.ASMH1X  ANOP
         AIF   ('&SYSVER' LT '1.3.0').HLASM3
         ACONTROL FLAG(NOPUSH)
.HLASM3  ANOP
         GBLC  &STRING_MACRO_VERSION
*
         AIF   ('&SMSLEVEL' EQ 'NO').SMSLVL2
         STRING 'REL=&REL &SYSDATC &SYSTIME',                          X
               ' MVS=&MVSLEVEL SMS=&SMSLEVEL',                         X
               ' HLASM=&SYSVER',                                       X
               ' STRING=R&STRING_MACRO_VERSION',                       X
               ' Switches=',(SWITCHES,,X),                             X
               ' Auth=Yes,ESR=IGX',(IGX00NNN,H,R5Z),                   X
               INTO=WORK256
         AGO   .SMSLVL3
.SMSLVL2 ANOP
         STRING 'REL=&REL &SYSDATC &SYSTIME',                          X
               ' MVS=&MVSLEVEL DFP=&DFPLEVEL',         NO DFSMS/MVS    X
               ' HLASM=&SYSVER',                                       X
               ' STRING=R&STRING_MACRO_VERSION',                       X
               ' Switches=',(SWITCHES,,X),                             X
               ' Auth=Yes,ESR=IGX',(IGX00NNN,H,R5Z),                   X
               INTO=WORK256
.SMSLVL3 ANOP
         LA    R1,WORK256-16(R15)      point at YES
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED ?
         BO    OPENMSG4                yes, jump
         STRING 'No,ESR=N/A',INTO=((R1),32)
         CLI   IGX00NNN,X'FF'          ESR available?
         BE    OPENMSG5                no, jump
         STRING 'No,ESR=IGX',(IGX00NNN,H,R5Z),                         X
               ',RC=',(AUTH_RC,FL1,L),                                 X
               INTO=((R1),32)
         B     OPENMSG5                continue
OPENMSG4 EQU   *
         TM    AUTH_ESR,L'AUTH_ESR     AUTH-ISF?
         BO    OPENMSG5                yes, jump
         STRING 'APF',INTO=((R1),32)   no, must be APF
OPENMSG5 EQU   *
*
*        Retrieve the dsname of the library I've been loaded from
*
         L     R1,OWN_CDE              own CDE
         L     R0,CDENTPT-CDENTRY(,R1) R0=EP ADDR
         BAL   R14,CSVDSN              get dsname
         LTR   R15,R15                 dsname found?
         BNZ   OPENMSG8                no, jump
         STRING (WORK256,,T),1X,((R1),44,T),'(',(OWN_NAME,,T),')',     X
               INTO=WORK256
*
OPENMSG8 XCALL ISPLINK,                                                X
               (=C'VREPLACE',=C'ZEDLMSG ',=A(L'WORK256),WORK256),      X
               LINKAGE=SYNCH           KEY=8
         XCALL ISPLINK,(=C'SETMSG ',=C'ISRZ000 '),                     X
               LINKAGE=SYNCH           KEY=8
OPENMSG9 END_PROC
         TITLE 'SHOWMVS &REL - Last IPL'
*---------------------------------------------------------------------*
*                                                                     *
*Last IPL:                                                            *
*                                                                     *
*  Date: Thursday 1989-12-16 (Yesterday) Time: 09.08 Julian: 1989.350 *
*  From: MVSRES/02E0  NUC Id: 1  Type: Warm Start  CVTUSER: 00C80000  *
*  Last Cold Start (CLPA):  1989-11-02   Time: 11.12.13               *
*  Last Quick Start (CVIO): 1989-12-03   Time: 12.13.14               *
*  SYSPLEX name: NSSPLEX   SYSPLEX ID: D1  OpenMVS available: YES     *
*  Timezone: E 01.00.00                                               *
*                                                                     *
*---------------------------------------------------------------------*
IPLDATA  BEGIN_PROC KW=IPL
         STRING 'Last IPL:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R6,CVTSMCA              SMF SMCA
         USING SMCABASE,R6
*
*        CALCULATE NUMBER OF DAYS SINCE LAST IPL
*
         TIME  DEC                     TODAY'S GMT DATE
         L     R15,=V(JUL2DAYS)        julian-days calc rtne
         BALR  R14,R15                 calc num of days since 1901.001
         LR    R2,R0                   save # of days
         L     R1,SMCAIDTE             IPL's YY.DDD
         L     R15,=V(JUL2DAYS)        julian-days calc rtne
         BALR  R14,R15                 calc num of days since 1901.001
         LR    R7,R1                   POINT TO DAY-OF-THE-WEEK
         STRING '(Today)',INTO=NEXTLINE
         SR    R2,R0                   R2 = days since IPL
         BZ    IPLDATA6                TODAY, JUMP
         STRING '(Yesterday)',INTO=NEXTLINE
         CH    R2,=H'1'                WAS IT YESTERDAY?
         BE    IPLDATA6                YES, JUMP
         STRING '(',((R2),,L0),' days ago)',INTO=NEXTLINE
*
*        CONVERT IPL TIME FROM BINARY TO HH:MM
*
IPLDATA6 EQU   *
         L     R1,SMCAITME             IPL TIME (BINARY)
         BAL   R14,BINTIME             convert time to HH MM SS
         ZAP   WKCELL1,SMCAIDTE        PACKED JULIAN DATE
         AP    WKCELL1,=P'1900000'     00YY -> 19YY
         STRING '  Date: ',((R7),9,T),1X,                              X
               (SMCAIDTE,P,YYYY-MM-DD),1X,(NEXTLINE,,T),               X
               '    Time: ',((R3),,R2Z),'.',((R2),,R2Z),               X
               '    Julian: ',(WKCELL1+4,2,X),'.',                     X
               (WKCELL1+6,P,R3Z),INTO=LINE
         BAL   R14,SPACE1          <== next line
*
         L     R7,CVTSYSAD             IPL UCB
         USING UCBOB,R7
         L     R3,CVTEXT2              CVT EXTENSION
         USING CVTXTNT2,R3
         L     R4,CVTASMVT             POINT TO ASM VECTOR TABLE
         USING ASMVT,R4
         LA    R5,=C'Warm '            warm start  (noCVIO,noCLPA)
         TM    ASMFLAG2,ASMWARM        Warm START ?
         BO    IPLDATA7                YES, JUMP
         LA    R5,=C'Quick'            quick start (CVIO,noCLPA)
         TM    ASMFLAG2,ASMQUICK       Quick START ?
         BO    IPLDATA7                YES, JUMP
         LA    R5,=C'Cold '            Cold start  (CVIO,CLPA)
IPLDATA7 EQU   *
         UCB_NAME LEFT                 get 4-character device number
         STRING  '  From: ',UCBVOLI,'/',UCB_NAME,                      X
               '    NUC Id: ',CVTNUCLS,                                X
               '    Type: ',((R5),5,T),' Start',                       X
               '    CVTUSER: ',(CVTUSER,,X),INTO=LINE
         BAL   R14,SPACE1
*
*        Reserve blank line for LASTCLPA routine in sub-task
*
         TM    HBB4410,L'HBB4410       ESA V4 ?
         BZ    IPLDATA8                NO, JUMP
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         BZ    IPLDATA8                NO, JUMP
         L     R1,ASMPART              POINT TO PAGE ACT REF TABLE
         LA    R1,PARTENTS-PART(,R1)   FIRST PART ENTRY (PLPA)
         L     R7,PAREUCBP-PARTENT(,R1) UCB address (PLPA)
         USING UCBOB,R7
         TM    UCBTBYT4,X'0E'          3380/3390?
         BNO   IPLDATA8                no, exit
         CLI   0(R5),C'C'              Cold START ?
         BE    IPLDATA8                yes, exit
         ST    R10,CLPALINE            save line addr for sub-task
         STRING '  ?',INTO=LINE        place-holder
         BAL   R14,SPACE1
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         CLI   0(R5),C'Q'              Quick START ?
         BE    IPLDATA8                YES, JUMP
         ST    R10,CVIOLINE            save line addr for sub-task
         STRING '  ?',INTO=LINE        place-holder
         BAL   R14,SPACE1
IPLDATA8 EQU   *
*
*        SYSPLEX name, ID, and OpenMVS status
*
         AIF   (NOT D'CVTH4410).ECVT99
         TM    HBB4410,L'HBB4410       running on ESA 4.1?
         BZ    ECVT99                  no, jump
         L     R4,CVTECVT              -> ECVT
         USING ECVT,R4                                         JWMJUN95
         LA    R7,=C'NO '              OpenMVS is down         JWMJUN95
         AIF   (NOT D'CVTH4430).ECVT43
         TM    HBB4430,L'HBB4430       running on ESA 4.3?
         BZ    ECVT43                  no, jump
         TM    ECVTOCVT,ECVTOMVS       Check for OpenMVS       JWMJUN95
         BZ    *+8                     No                      JWMJUN95
         LA    R7,=C'YES'              OpenMVS is up           JWMJUN95
.ECVT43  ANOP
ECVT43   STRING '  SYSPLEX name: ',ECVTSPLX,7X,                JWMJUN95X
               'OpenMVS available: ',((R7),3),                 JWMJUN95x
               INTO=LINE
         AIF   (NOT D'CVTH5510).ECVT98
         TM    HBB5510,L'HBB5510       running on ESA 5.1?
         BZ    ECVT99                  no, jump
         STRING '  SYSPLEX name: ',ECVTSPLX,2X,                JWMJUN95X
               'SYSPLEX ID: ',ECVTCLON,2X,                     JWMJUN95X
               'OpenMVS available: ',((R7),3),                 JWMJUN95x
               INTO=LINE
.ECVT98  ANOP
ECVT99   DS    0H
         BAL   R14,SPACE1                                      JWMJUN95
.ECVT99  ANOP
*
*        TIMEZONE from CLOCKxx
*
         MVI   WKCELL1,C'E'            east
         ICM   R1,B'1111',CVTTZ        difference between local and GMT
         BP    *+8                     positive difference
         MVI   WKCELL1,C'W'            negative (or zero)
         SLR   R0,R0
         LPR   R1,R1                   negative (or zero)
         SLDL  R0,20                   mult by 1048576
         D     R0,=F'10000'            difference in 1/100th of a sec.
         BAL   R14,BINTIME             convert time to HH MM SS
         STRING  '  Timezone: ',(WKCELL1,1),1X,   E/W                  X
               ((R3),,R2Z),'.',        HH                              X
               ((R2),,R2Z),'.',        MM                              X
               ((R1),,R2Z),            SS                              X
               INTO=LINE
         BAL   R14,SPACE1
*
         BAL   R14,BLANK1              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - Installed Software Products'
*---------------------------------------------------------------------*
*                                                                     *
*System Software:                                                     *
*                                                                     *
*  TSO/E Level:   2.4.0                                               *
*                                                                     *
*  DF/DSS Level:  2.5.0                                               *
*                                                                     *
*  DF/HSM Level:  2.6.0                                               *
*                                                                     *
*  ISPF Level:    3.5     PDF 3.5                                     *
*                                                                     *
*  RACF Level:    1.9                                                 *
*                                                                     *
*  ICKDSF Level:  1.16.0                                              *
*                                                                     *
*  VTAM Level:    3.4.1       VE341           00BFF288                *
*                                                                     *
*  DB2 Level:     5740XYR01   SSCTSNAM=DSN    Inactive                *
*                                                                     *
*  CICS Level:    2.1.2       DFHCSVC                                 *
*                                                                     *
*---------------------------------------------------------------------*
PRODUCTS BEGIN_PROC KW=PRODUCTS
         STRING 'System Software:',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        Retrieve the address of the ACF2 SSVT
*
         L     R4,CVTJESCT             JES COMM TABLE
         USING JESCT,R4
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*LOOP
ACF2CVT1 ICM   R6,B'1111',SSCTSSVT     SUB-SYSTEM VECTOR TABLE
         BZ    ACF2CVT2                INACTIVE SUB-SYSTEM
         USING SSVT,R6
         CLC   =C'ACF2',SSCTSNAM       IS THIS ACF2?
         BNE   ACF2CVT2                NO, JUMP
         MVC   ACF2CVT,SSCTSUSE        save ACCVT address
ACF2CVT2 ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         BNZ   ACF2CVT1
*ENDLOOP
         L     R7,CVTTVT               TSO VECTOR TABLE
         USING TSVT,R7
         PACK  WKCELL1,TSVTLREL        2-DIGIT RELEASE NUMBER
         STRING '  TSO/E Level:   ',TSVTLVER,'.',(WKCELL1,P,L0),'.',   X
               TSVTLMOD,INTO=LINE
         BAL   R14,SPACE2              Double Space
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BNO   DFDSS                   no, jump
         STRING '  ISPF Level:    ',(ZENVIR+5,3),                      X
               5X,ZPDFREL,INTO=LINE
         BAL   R14,SPACE2              Double Space
*
DFDSS    TM    JDZ1110,L'JDZ1110       DFSMS/MVS on the system?
         BO    RACFVM00                yes, skip DSS/HSM
         BAL   R0,DOBLDL1              issue BLDL
         DC    C'ADRRELVL'             DF/DSS
         LTR   R15,R15
         BNZ   DFDSS8                  NOT FOUND, JUMP
         BAL   R14,SAFELOAD            load ADRRELVL
         STRING '  DF/DSS Level:  ',(1(R1),FL1,L),'.',                 X
               (2(R1),FL1,L),'.',(3(R1),FL1,L),INTO=LINE
DFDSS8   BAL   R14,SPACE2              Double Space
*
         ICM   R7,B'1111',CVTHSM       HSM VECTOR TABLE
         BZ    RACFVM00
         USING MQCT,R7
         CLI   MQCTID,C'Q'             CHECK CB ID
         BNE   RACFVM00
         STRING '  DF/HSM Level: ',MQCTVER,'.',MQCTREL,'.',MQCTMOD,    X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*
RACFVM00 ICM   R7,B'1111',CVTRAC       RACF VECTOR TABLE
         BZ    RACFVM99
*405     IC    R7,RCVTVERS-RCVT(,R7)   X'04' MEANS 1.4
*405     LA    R7,X'11'(,R7)           X'08' MEANS 1.9
*405     LA    R1,X'00F0'              X'08' MEANS 1.9
*405     NR    R1,R7                   R1=VERSION#
*405     SRL   R1,004                  X'08' MEANS 1.9
*405     LA    R2,X'000F'              X'08' MEANS 1.9
*405     NR    R2,R7                   R2=RELEASE#
*405     STRING '  RACF Level:    ',((R1),,L),'.',((R2),,L),INTO=LINE
         USING RCVT,R7
         STRING '  RACF Level:    ',(RCVTVRMN,1),'.',(RCVTVRMN+1,2),   X
               '.',(RCVTVRMN+3,1),INTO=LINE
*
*        Flag ACF2 and TopSecret pseudo-RCVT
*
         CLC   RCVTID,=C'ACF2'         Is this ACF2?
         BE    RACFVM95                yes, jump
         CLC   RCVTID,=C'RTSS'         Is this Top-secret?
         BE    RACFVM97                yes, jump
*
*        Check if ACF2 is on the system when RACFID='RCVT'
*
         TM    RCVTSTAT,RCVTRNA        RACF Inactive?
         BO    RACFVM98                yes, exit
         CLI   RCVTDSNL,0              Is it really RACF?
         BNZ   RACFVM98                yes, exit
*
*        Locate ACF2 ACCVT
*
RACFVM95 EQU   *
         ICM   R5,B'1111',ACF2CVT      ACCVT
         BZ    RACFVM98                INACTIVE SUB-SYSTEM
         USING ACCVT,R5
         LA    R6,ACCVT-ACCPFXP        offset to prefix address
         LNR   R6,R6                   negative pointer
         L     R6,ACCVT(R6)            =A(ACPFX)
         USING ACCPFX,R6
         STRING (LINE,,T),16X,(ACCPIDS,13),    ACF2 6.1 9703           X
               INTO=LINE
         B     RACFVM98
*
*        Display Top-Secret level
*
RACFVM97 EQU   *
         STRING (LINE,,T),16X,'(Top-Secret)',INTO=LINE
RACFVM98 BAL   R14,SPACE2              Double Space
RACFVM99 EQU   *
         DROP  R4,R5,R6,R7
*
*        DSF level
*
ICKDSF   BAL   R0,DOBLDL1              issue BLDL
         DC    C'ICKRELVL'             EPNAME
         LTR   R15,R15
         BNZ   ICKDSF8                 NOT FOUND, JUMP
         BAL   R14,SAFELOAD            load ICKDSF
         STRING '  ICKDSF Level:  ',(1(R1),FL1,L),'.',                 X
               (2(R1),FL1,L),'.',(3(R1),FL1,L),INTO=LINE
         BAL   R14,SPACE2              Double Space
ICKDSF8  EQU   *
*
*        VTAM level
*
VTAM00   L     R3,PSAATCVT-PSA         ADDR OF VTAM CVT
         USING ATCVT,R3
         STRING (ATCVTLVL+2,1),'.',(ATCVTLVL+3,1),'.',(ATCVTLVL+4,1),  X
               INTO=WKCELL1
         OI    WKCELL1+4,C'0'          4.3.  ->  4.3.0
         CLC   =C'32',ATCVTLVL+2       VTAM 3.3 OR ABOVE ?
         BL    VTAM04                  YES, JUMP
         MVI   WKCELL1+4,C'0'          3.2.? ->  3.2.0
VTAM04   EQU   *
         STRING '  VTAM Level:    ',WKCELL1,4X,                        X
               ATCVTLVL,8X,            first 8 bytes of ATCVT          X
               (PSAATCVT-PSA,,X),      ADDR OF ATCVT                   X
               INTO=LINE
         TR    LINE,TRTPRINT           VTAM 3.2
         BAL   R14,SPACE2              Double Space
*
*        CICS level
*
CICS00   EQU   *
         BAL   R1,*+12                 br around CL8
         DC    C'DFHCSVC '             CICS SVC
         BAL   R14,LPASEARCH        <- search LPA
         LTR   R3,R0                   found?
         BZ    CICS99                  no, exit
         STRING '  CICS Level:    ',                                   X
               (22(R3),1),'.',(23(R3),1),'.',(24(R3),1),7X,   3.3.0    X
               'DFHCSVC',                                              X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
CICS99   EQU   *
*
*        DB2 level(s)
*
DB2SYS00 L     R1,CVTJESCT             JES COMM TABLE
         L     R5,JESSSCT-JESCT(,R1)   FIRST JSCVT
         USING SSCT,R5
         SLR   R4,R4                   no DB2 sub-system found
*LOOP
DB2SYS22 VALIDATE SSCT,ERRET=DB2SYS27  SSCT may be fetch-protected
         ICM   R6,B'1111',SSCTSUSE     DB2'S ERLY
         BZ    DB2SYS27                INACTIVE SUB-SYSTEM
         USING ERLY,R6
         VALIDATE ERLY,ERRET=DB2SYS27  SSCT may be fetch-protected
         CLC   =C'ERLY',ERLYCBID       IS THIS DB2?
         BNE   DB2SYS27                no, ignore for now
         LA    R4,=C'Inactive'                                 JWMFEB96
         ICM   R0,B'1111',ERLYSCOM     Pointer to SCOM         JWMFEB96
         BZ    DB2SYS24                No, jump                     +RS
         LA    R4,=C'Active  '         Yes                     JWMFEB96
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +RS
         BO    DB2SYS24                yes, don't call DSANALI     +RS
*------------------------------------------------------------*     +RS
*        Load DB2 CAF routine                                *     +RS
*------------------------------------------------------------*     +RS
         LA    R0,$DSNALI              module name                 +RS
         BAL   R14,DOBLDL1             issue BLDL (tasklib)        +RS
         LTR   R15,R15                 found?                      +RS
         BNZ   DB2SYS24                no, jump                    +RS
         LOAD  EPLOC=$DSNALI       Load the CAF service EP         +RS
         ST    R0,DSNALI           save the address                +RS
         ICM   R15,B'1111',DSNALI      load address of CAF         +RS
         BZ    DB2SYS24                  if zero leave             +RS
*------------------------------------------------------------*     +RS
*        Connect to Subsystem DB2 or MQ                      *     +RS
*        In case of tracing the requests, just add a         *     +RS
*        DD-Name for DSNTRACE SYSOUT=*                       *     +RS
*------------------------------------------------------------*     +RS
DB2SYS23 EQU   *                                                   +RS
         STRING 'CONNECT',INTO=DB2_REQ
         XCALL DSNALI,(DB2_REQ,SSCTSNAM,DB2_TECB,DB2_SECB,DB2_RIB,     X
               DB2_RET,DB2_RES)                                    +RS
         ICM   R7,B'1111',DB2_RIB      Rib-Pointer                 +RS
         BZ    DB2SYS24                  If zero leave             +RS
         USING RIB,R7                  tell assembly               +RS
         CLC   =C'RIB ',RIBEYEC        check Eyecatcher            +RS
         BNE   DB2SYS24                                            +RS
         STRING '  DB2 Level:     ',                                   X
               (RIBREL,1),'.',(RIBREL+1,1),'.',(RIBREL+2,1),4X,        X
               '   SSCTSNAM=',SSCTSNAM,                                X
               3X,((R4),8),            Active/Inactive                 X
               INTO=LINE                                           +RS
         STRING 'DISCONNECT',INTO=DB2_REQ
         XCALL DSNALI,(DB2_REQ,DB2_RET,DB2_RES)                    +RS
         CLC   =C'569513700',ERLYPROD  MQ Series?                  +RS
         BNE   DB2SYS26                no, jump                    +RS
         MVC   LINE+2(10),=C'MQ Series:'                           +RS
         B     DB2SYS26                                            +RS
$DSNALI  DC    C'DSNALI  '             CAF interface               +RS
DB2SYS24 EQU   *                                                   +RS
         STRING '  DB2 Level:     ',ERLYPROD,                  JWMJUN95X
               '   SSCTSNAM=',SSCTSNAM,                        JWMJUN95X
               3X,((R4),8),            Active/Inactive         JWMFEB96X
               INTO=LINE                                       JWMJUN95
         CLC   =C'569513700',ERLYPROD  MQ Series?
         BNE   DB2SYS26                no, jump
         MVC   LINE+2(10),=C'MQ Series:'
DB2SYS26 EQU   *
         BAL   R14,SPACE1              Single Space
DB2SYS27 EQU   *
         LA    R0,1                    count sub-systems
         AH    R0,SUBSYSNO             count sub-systems
         STH   R0,SUBSYSNO             count sub-systems
         ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         BNZ   DB2SYS22
*ENDLOOP
         LTR   R4,R4                   any DB2 system found?
         BZ    DB2SYS99                no, exit
         BAL   R14,BLANK1              Blank Line
DB2SYS99 EQU   *
*---------------------------------------------------------------------*
*                                                                     *
*        TCP/IP                                5655-HAL Version 3     *
*                                              5735-HAL Version 2     *
*---------------------------------------------------------------------*
TCPIP00  EQU   *                                                   @RS
         BAL   R1,*+12                 br around CL8               @RS
         DC    C'MVPTASK '             TCPIP                       @RS
         BAL   R14,LPASEARCH        <- search LPA                  @RS
         LTR   R3,R0                   found?                      @RS
         BZ    TCPIP99                 no, exit                    @RS
         STRING '  TCP/IP:',8X,                                        X
               (15(R3),6),' ',(58(R3),8),4X,        96.085  5655-HAL   X
               'MVPTASK',                                              X
               INTO=LINE                                           @RS
         BAL   R14,SPACE2              Double Space                @RS
TCPIP99  EQU   *                                                   @RS
*---------------------------------------------------------------------*
*                                                                     *
*Run-time Environments                                                *
*                                                                     *
*   Name         DDname    Dsname                                     *
*   OS/VS COBOL  ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*                -LNKLST-  COB2.V1R4M0.COB2LIB                        *
*   VS COBOL II  ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*                -LNKLST-  COB2.V1R4M0.COB2LIB                        *
*   PL/I         ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   FORTRAN      ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   C/370        ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   LE           ISPLLIB   CEE.V1R5M0.SCEERUN                         *
*   RTLS         n/a                                               +RS*
*                                                                     *
*---------------------------------------------------------------------*
RTE00    STRING '  Run-time Environments',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '    Name',9X,'DDname    Dsname',39X,'Module',INTO=LINE
         BAL   R14,SPACE1              Single Space
         BAL   R3,RTE11                branch around table
         DC    C'ILBOCOM ',C'OS/VS COBOL' VSCLLIB
         DC    C'IGZCTCO ',C'VS COBOL II' COB2LIB
         DC    C'IBMBCCLA',C'PL/I       ' PLILINK
         DC    C'AFBNAMEP',C'FORTRAN    ' VSF2FORT
         DC    C'EDCMSGT ',C'C/370      ' SEDC?
         DC    C'CEEBLRR ',C'LE         ' SCEERUN
         DC    C'PASRTLIB',C'PASCAL/VS  ' SAMPRUN2
         DC    C'RPGII   ',C'RPG II     ' RG1LOAD
         DC    C'EAGIVVER',C'REXX       ' SEAGLMD
         DC    C'LSCLDBCS',C'SAS/C      ' SISPSASC
         DC    X'00',0H'0'
*LOOP
RTE11    LR    R0,R3                   program name
         BAL   R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15                 found?
         BNZ   RTE13                   no, jump
         STRING 4X,(8(R3),11),2X,PDATA_DDN,2X,PDATA_DSN,1X,((R3),8),   X
               INTO=LINE
         TR    LINE,TRTPRINT
         B     RTE14
RTE13    EQU   *
         STRING 4X,(8(R3),11),'  n/a',52X,((R3),8),INTO=LINE
RTE14    EQU   *
         BAL   R14,SPACE1              Single Space
*
*        if found in tasklib, look for 2nd copy in linklib or lpa
*
         DEVTYPE PDATA_DDN,WKCELL1     check ddname
         LTR   R15,R15                 loaded from tasklib?
         BNZ   RTE19                   no, exit
         LR    R0,R3                   program name
         BAL   R14,DOBLDL2             issue BLDL (linklib)
         LTR   R15,R15                 found?
         BNZ   RTE19                   no, exit
         STRING 17X,PDATA_DDN,2X,PDATA_DSN,1X,((R3),8),INTO=LINE
         TR    LINE,TRTPRINT
         B     RTE18
*
RTE17    EQU   *                       MLPA/PLPA
         STRING 4X,(8(R3),11),2X,PDATA_DDN,47X,((R3),8),INTO=LINE
RTE18    EQU   *
         BAL   R14,SPACE1              Single Space
RTE19    EQU   *
         LA    R3,8+11(,R3)            next table entry
         CLI   0(R3),0                 end of table?
         BNE   RTE11                   no, loop
*ENDLOOP
*
*        Run-time Library Services (RTLS)
*
         AIF   (NOT D'CVTRTLS).RTE299  OS/390 R4 MACLIB            +RS
         TM    JBB6604,L'JBB6604       running on OS/390 2.4?
         BNO   RTE299                  No, exit
         BAL   R14,WORKADDR            32K work area
         ST    R0,ANSLEN               pass length                 +RS
         LR    R4,R1                   length is zero, for now     +RS
         USING RTAAHDR,R4                                          +RS
*
*        Find out how much storage is needed for the answer area   +RS
*
         CSVRTLS MF=(E,RTLS,COMPLETE),ANSAREA=RTAAHDR,                 X
               ANSLEN=ANSLEN,REQUEST=LIST,LISTTYPE=PHYSICAL,           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE                   +RS
         CLC   LRETCODE,=AL4(CSVRTLSRC_OK) OK?                     +RS
         BH    RTE293                  No, error                   +RS
*                                                                  +RS
*        Process information in answer area when RC=0              +RS
*                                                                  +RS
         ICM   R5,B'1111',RTAAHNUMPH   how many RTAAPH entries?    +RS
         BZ    RTE293                  zero, exit                  +RS
         L     R3,RTAAHFIRSTPHADDR     Get first entry             +RS
         USING RTAAPH,R3                                           +RS
*loop                                                              +RS
RTE240   DS    0H                      RTAAPH loop                 +RS
         STRING 4X,RTAAPHNAME,INTO=LINE Physical name              +RS
         L     R6,RTAAPHFIRSTDSADDR    get first DS entry          +RS
         USING RTAADS,R6                                           +RS
         ICM   R7,B'1111',RTAAPHNUMDS  how many DS entries?        +RS
         BNZ   RTE242                  a few, process them         +RS
         STRING 'DSName n/a',INTO=LINE+27 no entries               +RS
         BAL   R14,SPACE1              Single Space                +RS
         B     RTE245                                              +RS
*--loop                                                            +RS
RTE242   DS    0H                      DS loop                     +RS
         STRING RTAADSNAME,INTO=LINE+27                            +RS
         BAL   R14,SPACE1                                          +RS
         L     R6,RTAADSNEXTADDR       point to next DS            +RS
         BCT   R7,RTE242                                           +RS
*--endloop                                                         +RS
RTE245   DS    0H                                                  +RS
         L     R3,RTAAPHNEXTADDR       Get next RTAAPH             +RS
         BCT   R5,RTE240             Continue while there are more +RS
*endloop                                                           +RS
         B     RTE299                                              +RS
RTE293   DS    0H                                                  +RS
         CLC   LRETCODE,=AL4(CSVRTLSRC_WARN) warn?                 +RS
         BH    RTE298                  No, error                   +RS
         CLC   LRSNCODE,=AL4(CSVRTLSRSNLISTNOMATCHES) none?
         BNE   RTE298                  no
         STRING '    RTLS',9X,'is not managing any physical libraries',X
               INTO=LINE
         BAL   R14,SPACE1              Double Space                +RS
         B     RTE299                                              +RS
RTE298   DS    0H                                                  +RS
         STRING '    RTLS',9X,'RC: ',(LRETCODE,,X),    no RTLS         X
               ' RSN: ',(LRSNCODE,,X),INTO=LINE                    +RS
         BAL   R14,SPACE1              Double Space                +RS
RTE299   DS    0H
.RTE299  ANOP
         BAL   R14,BLANK1              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - Installed SORT Utility'
*---------------------------------------------------------------------*
*                                                                     *
*  SORT's true name is ICEMAN     (First 100 Bytes Follow)            *
*                                                                     *
*    D3C9C3C5 D5E2C5C4 40D4C1E3 C5D9C9C1 D3E24060   LICENSED MATERIAL *
*    40D7D9D6 D7C5D9E3 E840D6C6 40C9C2D4 40F5F7F4    PROPERTY OF IBM  *
*    F060E2D4 F1404DC3 5D40C3D6 D7E8D9C9 C7C8E340   0-SM1 (C) COPYRIG *
*    C9C2D440 C3D6D9D7 4B40F1F9 F7F36B40 F1F9F9F2   IBM CORP. 1973, 1 *
*    404DC35D 40C3D6D7 E8D9C9C7 C8E340E6 C1E3E2D6    (C) COPYRIGHT WA *
*                                                                     *
*---------------------------------------------------------------------*
SORT     BEGIN_PROC KW=PRODUCTS
         LA    R0,=CL8'SORT'           program name
         BAL   R14,DOBLDL3             issue BLDL (tasklib)
         LTR   R15,R15
         BNZ   SORT99                  NOT FOUND, JUMP
         BAL   R14,SAFELOAD            load SORT
         LR    R7,R1                   save load point
         STRING '  SORT loaded from ',                                 X
               'DDN(',(PDATA_DDN,,T),') ',                             X
               'DSN(''',(PDATA_DSN,,T),'(',(PDS2NAME,,T),')'')',       X
               INTO=LINE
         CLC   PDATA_DDN,MLPADDN       found in MLPA?
         BE    SORTLPA                 yes, jump
         CLC   PDATA_DDN,PLPADDN       found in PLPA?
         BNE   SORT40                  no, jump
SORTLPA  EQU   *
         STRING '  SORT loaded from ',                                 X
               'DDN(',(PDATA_DDN,,T),') ',                             X
               'PGM(',(PDS2NAME,,T),')',                               X
               INTO=LINE
*
SORT40   EQU     *
         BAL   R14,SPACE2              Double Space
*
*        Detect the ICEMAN eye-catcher (40 bytes at loadpt+X'120')
*
         CLC   PDS2NAME,X'120'(R7)     ICEMAN ?
         BNE   SORT41                  no, jump
         LA    R3,040/20               LOOP COUNTER (40 bytes)
         LA    R7,X'120'(R7)           skip copyright notice
         B     SORT42
*
*        DUMP THE FIRST 100 BYTES OF THE "SORT" FOR IDENTIFICATION
*
SORT41   EQU   *
         STRING '   (First 100 Bytes Follow)',INTO=LINE
         BAL   R14,SPACE2              Double Space
         LA    R3,100/20               LOOP COUNTER
SORT42   EQU   *
*LOOP
SORT42L  STRING 4X,((R7),4,X),1X,(4(R7),4,X),1X,(8(R7),4,X),1X,        X
               (12(R7),4,X),1X,(16(R7),4,X),3X,((R7),20),INTO=LINE
         TR    LINE,TRTPRINT           GET RID OF NON-PRINTABLE CHARS
         BAL   R14,SPACE1          <== next line
         LA    R7,020(,R7)             BUMP POINTER
         BCT   R3,SORT42L
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
SORT99   END_PROC
         TITLE 'SHOWMVS &REL - SMF Data'
*---------------------------------------------------------------------*
*                                                                     *
*SMF Data:                                                            *
*                                                                     *
*  Member(SMFPRM00)                                                   *
*    MAN(All) SID(P390) JWT(0030) MAXDORM(3000) STATUS(010000)        *
*                                                                     *
*  SYS1.MAN1                     DUMP REQUIRED    MVSRES         100% *
*  SYS1.MAN2                     ACTIVE           MVSRES          81% *
*  SYS1.MAN3                                      MVSRES           0% *
*                                                                     *
*  SYS   TYPE(1-13,15,17-39,41-59,61,64,70-255)                       *
*        EXITS(IEFUSI,IEFU83)                                         *
*                                                                     *
*---------------------------------------------------------------------*
SMFDATA  BEGIN_PROC KW=SMF
         STRING 'SMF Data:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R6,CVTSMCA              SMF SMCA
         USING SMCABASE,R6
         LA    R1,=C'None'             MAN=NONE
         TM    SMCAMISC,SMCAUSER+SMCAMAN Recording active?
         BZ    SMFDATA3                no, jump
         LA    R1,=C'All '             MAN=ALL
         BO    SMFDATA3                no, jump
         LA    R1,=C'User'             MAN=NONE
SMFDATA3 EQU   *
         L     R7,SMCAACTP             ACT address
         USING IEEMBACT,R7
         STRING '  Member(SMFPRM',ACTMEMID,')',INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '    MAN(',((R1),4,T),  MAN(All)                       X
               ') SID(',SMCASID,       SID(IPO1)                       X
               ') JWT(',SMCASJWT,      JWT(0030)                       X
               ') MAXDORM(',SMCASMDM,  MAXDORM(3000)                   X
               ') STATUS(',SMCASSTS,   STATUS(010000)                  X
               ')',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
         TM    SMCAMISC,SMCAUSER+SMCAMAN Recording active?
         BZ    SMF999                  no, exit
         ICM   R7,B'1111',SMCAFRDS     FIRST RDS
         BZ    SMF999                  SMF not active, exit
         USING IEEMBRDS,R7
*LOOP
SMFDS1   MVC   LINE,BLANKS             CLEAR LINE
         TM    RDSFLG2,RDSLOST         dummy RDS for lost data?
         BO    SMFDS6                  yes, jump
         TM    HBB5510,L'HBB5510       running on ESA 510?
         BZ    SMFDS14                 no, jump
         MVC   DSNAME,RDSNAME          SYS1.PROD.MAN%
         MVC   VOLSER,RDSVOLID         VOLSER
         L     R1,RDSNXTBL             NEXT BLOCK
         M     R0,=F'100'              CALCULATE PERCENTAGE USED
         D     R0,RDSCAPTY             CALCULATE PERCENTAGE USED
         B     SMFDS2                  yes, jump
SMFDS14  MVC   DSNAME(10),RDSNAME      C'SYS1.MAN% '          ->ESA 4.3
         MVC   VOLSER,RDSNAME+10       VOLSER                 ->ESA 4.3
         L     R1,RDSNXTBL-36          NEXT BLOCK
         M     R0,=F'100'              CALCULATE PERCENTAGE USED
         D     R0,RDSCAPTY-36          CALCULATE PERCENTAGE USED
SMFDS2   STRING ((R1),,R3B),'%',INTO=CATUNCAT
         TM    RDSFLG1,RDSREADY        READY?
         BO    *+10                    YES, BRANCH AROUND MVC
         MVC   DSNAME+30(6),=C'ACTIVE' THIS IS THE CURRENT DATA SET
         TM    RDSFLG1,RDSDUMP         DATA-SET FULL MSG ISSUED?
         BNO   *+10                    NO, BRANCH AROUND MVC
         MVC   DSNAME+30(13),=C'DUMP REQUIRED'
         B     SMFDS7
SMFDS6   EQU   *
         STRING '<Dummy RDS for Lost Data>',INTO=DSNAME
SMFDS7   EQU   *
         BAL   R14,SPACE1          <== next line
         CLC   SMCAFRDS,SMCALRDS       only one RDS ?
         BE    SMFDS8                  yes, exit
         L     R7,RDSNEXT              NEXT RDS IN CHAIN
         C     R7,SMCALRDS             IS THIS THE END OF THE CHAIN?
         BNE   SMFDS1                  NO, PROCESS NEXT DATA SET
*ENDLOOP
SMFDS8   EQU   *
         BAL   R14,BLANK1              BLANK LINE
         DROP  R7                      RDS
*
*        SMF records not written, by sub-system
*
         L     R3,SMCASSTP             SMF SELECTION CONTROL TABLE
         USING SST,R3                                          JWMFEB96
         LH    R4,SMCANSST             number of SST's
*LOOP
SMF201   CLI   SSTNAME,0               this SST in use?        JWMFEB96
         BZ    SMF249                  no, skip it
         LA    R0,256/8                BYTE LOOP
         LA    R1,0                    1st bit is TYPE(0)
         LA    R2,SSTRCDON             SELECTION BIT STRING
         BAL   R14,BITSTR              edit bit string
         STRING 2X,SSTNAME,'  TYPE(',(NEXTLINE,,T),')',INTO=LINE
*
*        Display exit table
*
         L     R2,SSTEXTAB             @ exit table            JWMFEB96
         USING EXITTAB,R2                                      JWMFEB96
         ICM   R5,B'1111',EXITNMBR     number of exits         JWMFEB96
         BZ    SMF248X                 no                      JWMFEB96
         BAL   R14,SPACE1              Single Space
         STRING 6X,'  EXITS(',INTO=LINE                        JWMFEB96
         LA    R2,EXITNTRY             @ first exit entry      JWMFEB96
         USING EXITNTRY,R2                                     JWMFEB96
SMF248B  DS    0H                                              JWMFEB96
         STRING (LINE,,L),(EXITNAME,,L),',',INTO=LINE          JWMFEB96
         LA    R2,EXITEND              skip this one           JWMFEB96
         BCT   R5,SMF248B                                      JWMFEB96
         LA    R15,LINE(R15)           get OFFSET ADDRESS      JWMFEB96
         BCTR  R15,0                                           JWMFEB96
         MVI   0(R15),C')'             CLOSE PARENTHESIS       JWMFEB96
SMF248X  BAL   R14,SPACE2              Double Space
SMF249   AH    R3,SMCALSST             bump SST pointer
         BCT   R4,SMF201               process next SST
*ENDLOOP
*
*        SMF Exits
*
         TM    HBB5510,L'HBB5510       running on ESA 510?
         BO    SMF269                  yes, jump
         L     R3,SMCASSTP             SMF SELECTION CONTROL TABLE
         USING SST,R3
         L     R2,SSTEXTAB             @ exit table
         USING EXITTAB,R2
         L     R4,EXITNMBR             NUMBER OF EXITS (8)
         USING EXITTAB,R2
         LA    R5,EXITNTRY             First exit (IEFU29)
         USING EXITNTRY,R5
         STRING '   Name     Address    Whatever   Status',            X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
*loop
SMF261   L     R6,EXITADDR             EP addr
         STRING 'Active',INTO=WKCELL1
         VALIDATE 0(R6),ERRET=SMF262
         CLC   =X'1BFF07FE',0(R6)      Dummy exit?
         BNE   SMF262                  no, jump
         MVC   WKCELL1(6),=C'Dummy '
SMF262   EQU   *
         STRING 3X,EXITNAME,1X,(EXITADDR,,X),3X,(EXITFLGS,,X),3X,      X
               WKCELL1,                Dummy/Active                    X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
         LA    R5,EXITEND              Next exit
         BCT   R4,SMF261               Next exit
*endloop
         BAL   R14,BLANK1              Blank line
SMF269   EQU   *
SMF999   END_PROC
         TITLE 'SHOWMVS &REL - SMS Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*SMS Configuration:                                                   *
*                                                                     *
*  Description: SMS CONFIGURATION FOR ESAPROD1 SYSTEM                 *
*                                                                     *
*  Last Update: IBMUSER   1991-04-23  12.23                           *
*        Flags: 00000000                                              *
*     Defaults: MANAGEMENT_CLASS(STANDARD)   UNIT(3380)               *
*               TRACK_SIZE(47476)   TRACKS/CYL(15)                    *
* System Names: IPO1                                                  *
*    SCDS Name: SMS.SCDS                                              *
*  PDSE-SHR   : Normal                                                *
*                                                                     *
*---------------------------------------------------------------------*
SMSDATA  BEGIN_PROC KW=SMS
         AIF   (NOT D'DFASMS).SMS2     NOT DFP V3, JUMP
         STRING 'SMS Configuration:',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
         L     R1,CVTJESCT             JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         ICM   R5,B'1111',JESSMSIB-JESPEXT(R1) SMS SSIB
         BZ    SMSB98                  SMS not active, exit
         MVC   IGDSSIVT,SSIBSUSE-SSIB(R5)
*
         BAL   R14,WORKADDR            LOCATE WORK AREA
         ST    R1,SMS_SSOB             save addr for IEFSSREQ calls
         OI    SMS_SSOB,X'80'          SSOB_PTR
         LR    R3,R1                   get addr of SMS work area
         USING SMS_WORK,R3
*
         LA    R4,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R4
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         ST    R5,SSOBSSIB             SMS SSIB
*
         LA    R5,SSSA_WRK             SSSA WORK AREA
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5
         LA    R0,SSSALN+SSSA1LN       LENGTH
         STH   R0,SSSALEN
         MVC   SSSAID,=C'SSSA'         SSSA
         MVI   SSSAVER+1,SSOBSSVR      VERSION
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER
*
         LH    R0,=Y(SMS_SUB_FUNCTION_WORK_AREA_LENGTH)
         ST    R0,SSSA1LEN             LENGTH OF WORK AREA
         LA    R6,SMS_SUB_FUNCTION_WORK_AREA
         ST    R6,SSSA1PTR             ADDR OF WORK AREA
         USING IGDBCD,R6
*
*        TYP=2: return base configuration mapped by IGDBCD
*
         MVI   SSSA1TYP,SSSA1CON       RETURN ACTIVE CONFIGURATION
         LA    R1,SMS_SSOB             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
         LTR   R1,R15                  SMS active?
         BNZ   SMSB95                  no, exit
         ICM   R0,B'1111',SSOBRETN     TEST RETURN CODE
         BZ    SMSB40                  OK, jump
*
*        If req failed with RSN=5001, retry with SSSA1LEN=SSSA1ALN
*
         CLC   SSSARSN,=A(SSSA1ISP)    insufficient storage?
         BNE   SMSB90                  no, exit
         MVC   SSSA1LEN,SSSA1ALN       yes, pass length needed
         LA    R1,SMS_SSOB             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
         LTR   R1,R15                  SMS active?
         BNZ   SMSB95                  no, exit
         ICM   R0,B'1111',SSOBRETN     TEST RETURN CODE
         BNZ   SMSB90                  bad, exit
*
SMSB40   EQU   *
         STRING '  Description: ',BCDFDESC,INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Last Update: ',BCDFUSER,2X,BCDFDATE,2X,BCDFTIME,    X
               INTO=LINE
         BAL   R14,SPACE1              next line
         STRING '        Flags: ',(BCDFLAGS,,X),INTO=LINE
         BAL   R14,SPACE1              next line
         OC    BCDMCNAM,BLANKS         00 -> 40
         STRING '     Defaults: MANAGEMENT_CLASS(',(BCDMCNAM,,T),')',  X
               '   UNIT(',(BCDDUNIT,,T),')',                           X
               INTO=LINE
         BAL   R14,SPACE1              next line
         STRING 14X,                                                   X
               ' TRACK_SIZE(',(BCDTRKSZ,F,L),')',                      X
               '   TRACKS/CYL(',(BCDCYLCP,F,L),')',                    X
               INTO=LINE
         BAL   R14,SPACE1              next line
*******  STRING '  Systm Names: ',(BCDFSYSN,8*8),INTO=LINE
         STRING ' System Names: ',INTO=LINE
         LA    R1,BCDFSYSN             1st system name
         LA    R2,1                    count systems
         LA    R3,8                    max no of system names
*loop
SMSB50   CLC   CVTSNAME,0(R1)          is this my own system?
         BNE   SMSB51                  no, jump
         STH   R2,OWNSMSSYS            yes, remember it
SMSB51   STRING (LINE,,T),1X,((R1),L'BCDFSYSN),INTO=LINE
         LA    R1,L'BCDFSYSN(,R1)      point to next system name
         LA    R2,1(,R2)               SYSN),INTO=LINE
         BCT   R3,SMSB50               loop through array
*endloop
         BAL   R14,SPACE1              next line
         STRING '    SCDS Name: ',BCDSCDSN,INTO=LINE
         BAL   R14,SPACE1              next line                    +RS
*
*        Determine status of PDSE Sharing
*
SMSB75   LA    R5,=CL8'n/a'            undetermined
         ICM   R6,B'1111',IGWLSHR      IGWLSHR module available?
         BZ    SMSB75F                 no, exit
         SYNCH SMSB75T,RESTORE=YES     CALL IGWLSHR in key=8
         LTR   R15,R15                 Test return code
         BNZ   SMSB75F                 bad rc, ignore
         CL    R1,=F'1'                Check status                 +RS
         BNE   SMSB75D                 no, jump                     +RS
         LA    R5,=CL8'Normal'         Normal Sharing
SMSB75D  CL    R1,=F'2'                Check status                 +RS
         BNE   SMSB75F                 no, jump                     +RS
         LA    R5,=CL8'Extended'       Extended Sharing
SMSB75F  STRING '  PDSE-SHR   : ',((R5),8),INTO=LINE
*****    BAL   R14,SPACE1              next line                    +RS
         B     SMSB75X                 exit
*
*        this code executes in key=8
*
SMSB75T  L     R13,UNPROTWK            Point at unprotected area
         XCALL (R6),                   IGWLSHR                         X
               (LRETCODE,              Returcode                       X
               LRSNCODE,               Reasoncode                      X
               WORK256+25,             Problemdata                     X
               =F'1',                  Input attr_selector             X
               =F'1',                  Input attr_array length         X
               WKCELL2)                Output attr_array            +RS
         L     R1,WKCELL2              return status index
         EXIT                                                       +RS
*
SMSB75X  EQU   *
****     BAL   R14,BLANK1              double space
*
*        Allocate an un-protected work area for the READ Routine
*
         L     R2,=A(SMS_WORK_LENGTH)
         GETMAIN RU,LV=(R2)            ALLOCATE SMS WORK AREA
         STM   R1,R2,SMS_SSOB          save addr for IEFSSREQ calls
         OI    SMS_SSOB,X'80'          SSOB_PTR
         B     SMSB99                  exit
*
SMSB90   STRING '  IEFSSREQ FAILED - ',                                X
               'R15=',((R1),,L),                                       X
               ' SSOBRETN=',(SSOBRETN,F,L),                            X
               ' SSSA1TYP=',(SSSA1TYP,FL1,L),                          X
               ' SSSASFN=',(SSSASFN,H,L),                              X
               ' SSSARSN=',(SSSARSN,F,L),                              X
               ' SSSA1LEN=',(SSSA1LEN,F,L),                            X
               ' SSSA1ALN=',(SSSA1ALN,F,L),                            X
               INTO=LINE
         B     SMSB98X                 exit
*
SMSB95   STRING '  SMS is not active on this system, R15=',((R1),,L),  X
               INTO=LINE
         B     SMSB98X                 exit
*
SMSB98   STRING '  SMS is not active on this system.',INTO=LINE
*
*        Clear SSOB ptr to prevent S0C4 in RDRTNE
*
SMSB98X  XC    SMS_SSOB,SMS_SSOB       clear SSOB pointer
*
SMSB99   BAL   R14,SPACE2              Double Space
*
.SMS2    ANOP
SMSD999  END_PROC
         TITLE 'SHOWMVS &REL - GRS Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*GRS Data                                                             *
*                                                                     *
*---------------------------------------------------------------------*
GRSDATA  BEGIN_PROC KW=GRS
         L     R6,CVTGVT               GVT (GRS Vector Table)
         USING GVT,R6
         STRING 'GRS Data',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Status: ',INTO=LINE
         LA    R4,LINE(R15)
        #STATUS GVTGRSOP,GVTSTART,'Start'
        #STATUS GVTGRSOP,GVTJOIN,'Join'
        #STATUS GVTGRSOP,GVTNONE,'None'
        #STATUS GVTGRSOP,GVTTRYJN,'TryJoin'
         STRING '    SYSNAME=',GVTSYSNM,INTO=((R4),NEXTLINE)
         BAL   R14,SPACE1              Single Space
         ICM   R5,B'1111',GVTJCNFD     addr of GRSCNFxx data
         BZ    GRSD90                  zero, exit
         USING GCC,R5
         STRING '  Member(',GCCMBRNM,')',INTO=LINE
         BAL   R14,SPACE1              Single Space
         SLR   R0,R0
         L     R1,GVTOLINT             Tolerance Time Interval
         D     R0,=F'1000'             milliseconds -> seconds
         STRING '    RESMIL(',(GCCRESMIL,F,L),')',                     X
               '    TOLINT(',((R1),,L),')',                            X
               '    ACCELSYS(',(GVTTHRS,H,L),')',                      X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
GRSD90   EQU   *
         BAL   R14,BLANK1              Double Space
GRSD99   END_PROC
         TITLE 'SHOWMVS &REL - Hardware Configuration'
*---------------------------------------------------------------------*
*                                                                     *
*Hardware Configuration:                                              *
*                                                                     *
*  Central Processing Complex Node Description:                       *
*                                                                     *
*    Type(009000) Model(942) Manufacturer(IBM) Plant(00) Seqno(0000...*
*                                                                     *
*  On-line Processors:                                                *
*                                                                     *
*    CPU 0 Serial: 027506 Version: D4  Model: 9021-942                *
*    CPU 1 Serial: 127506 Version: D4  Model: 9021-942                *
*                                                                     *
*  This system can deliver 2776 service units per second              *
*                                                                     *
*  Processor Speed: 188.8 MIPS    (Estimated using a BCTR loop)       *
*                                                                     *
*  CVTFLAGS: 7C C0 00 00  SVPRC CUSE MVPG OVER CSTR CMPSC CMPSH       *
*                                                                     *
*  On-line Real Storage: 90112K   Highest Real Storage Address: 90112K*
*                                                                     *
*    Expanded Storage: 65536K                                         *
*                                                                     *
*  Service Processor Data:                                            *
*                                                                     *
*    LOADPARM: 0E6A 00 M                LPAR: YES                     *
*                                                                     *
*  I/O Configuration Data:                                            *
*                                                                     *
*    IODF Data Set Name: SYS1.IODF00                                  *
*    IODF Configuration Id: PROD00  Date: 96/04/01  Time: 11:12:13    *
*      Update Count: 0                                                *
*    EDT ID: 00                                                       *
*    Flags: 10000000                                                  *
*                                                                     *
*---------------------------------------------------------------------*
HARDWARE BEGIN_PROC KW=HARDWARE
         STRING 'Hardware Configuration:',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*  Central Processing Complex Node Description:
*
*    Type(009000) Model(942) Manufacturer(IBM) Plant(00) Seqno(0000...
*
         L     R4,CVTHID               Host ID
         USING SHID,R4
         CLI   CPCND_FLAGS,0           HID Available?
         BE    HARD16X                 no, exit
         TM    CPCND_FLAGS,B'01000000'
         BZ    HARD16F
         TM    CPCND_FLAGS,B'10100000'
         BZ    HARD16X
HARD16F  EQU   *
         STRING '  Central Processing Complex Node Description:',      X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '    Type(',CPCND_TYPE,    3090                        X
               ') Model(',CPCND_MODEL,     40J                         X
               ') Manufacturer(',CPCND_MAN, IBM/AMH/HTC                X
               ') Plant(',CPCND_PLANT,     00                          X
               ') Seqno(',CPCND_SEQNO,')',                             X
               INTO=LINE
         TM    CPCID_FLAGS,B'10000000'
         BO    HARD16S
         STRING (LINE,,T),' Id(',(CPCID_MAP,,X),')',INTO=LINE
HARD16S  EQU   *
         BAL   R14,SPACE2              Double Space
HARD16X  EQU   *
*
*  On-line Processors:
*
*    CPU 0 Serial: 027506 Version: D4  Model: 9021-942
*    CPU 1 Serial: 127506 Version: D4  Model: 9021-942
*
         STRING '  On-line Processors:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         SLR   R6,R6                   NUMBER OF CPU'S ON-LINE
         L     R7,CVTPCCAT             PCCA VECTOR TABLE
         LA    R3,0016                 16 IS THE MAX NUMBER OF CPU'S
         MVC   WKCELL2,BLANKS          model code
*LOOP
HARDW1   ICM   R4,B'1111',0(R7)        PCCA
         BZ    HARDW4                  THIS CPU ACTIVE, JUMP
         USING PCCA,R4
         LA    R0,2                    EBCDIC VERSION CODE (2 BYTES)
         LA    R1,PCCACPID             EBCDIC VERSION CODE (2 BYTES)
         LA    R15,STIDP_VERSION       output area
         BAL   R14,X2B                 convert hex digits to binary
         IC    R0,STIDP_VERSION        version code (binary)
         BAL   R14,HARDCPU             convert 9021-C4 to 9021-941
         STRING '    CPU ',(PCCACPUA,H,L2),                            X
               '  Serial: ',(PCCACPID+2,6),                            X
               '  Version: ',(PCCACPID+0,2),                           X
               '  Model: ',(PCCACPID+8,4),                             X
               WKCELL2,                -742                            X
               INTO=LINE
         LA    R6,1(,R6)               COUNT ON-LINE CPU'S
         BAL   R14,SPACE1          <== next line
HARDW4   LA    R7,4(,R7)               BUMP PCCAT PTR
         BCT   R3,HARDW1
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
*
*        Service units per second (using RMCTADJC)
*
*        Source: IRARMCPU module in SYS1.NUCLEUS(IEAVNP10)
*
HARD20   L     R3,=F'16000000'         16,000,000
         M     R2,=F'10000'            10K
         L     R14,CVTOPCTP            RESOURCE MANAGER CONTROL TABLE
         D     R2,RMCTADJC-RMCT(,R14)  adjustment factor for CPU
         CVD   R3,WKCELL3              R3=SU*10000
         MVC   WORK256(11),=X'4020202020214B20202020' 99999.9999
         ED    WORK256(11),WKCELL3+3   EDIT
         STRING '  This system can deliver',(WORK256,11),              X
               ' service units per second',                            X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
* MIPS = (SU/sec / 48.5) * CPUno    (From T. Falissard's MIPSMVS exec)
         SLR   R2,R2
         D     R2,=F'485'              MIPS=SU/48.5
         MR    R2,R6                   mult by num of CPUs
         CVD   R3,WKCELL3              R3=MIPS*1000
         MVC   WORK256(9),=X'40202020214B202020' 9999.999
         ED    WORK256(9),WKCELL3+4
         STRING '  SRM MIPS:',(WORK256,9),'  (SU/sec) / 48.5',         X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        Place holder for processor speed (filled in by sub-task)
*
         LA    R5,LINE                 Addr of current line
         STM   R5,R6,CPUONLINE         save them for the sub-task
         BAL   R14,SPACE2              Double Space
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
*
*        Display CVTFLAGS (misc hardware features)
*
         STRING '  CVTFLAGS: ',(CVTFLAG1,,X),1X,(CVTFLAGS+1,1,X),      X
               1X,(CVTFLAGS+2,1,X),1X,(CVTFLAGS+3,1,X),                X
               INTO=LINE
         LA    R4,LINE+2(R15)          POINT PAST TEXT
        #STATUS CVTFLAG1,CVTRSMWD,'RSMWD'
        #STATUS CVTFLAG1,CVTSVPRC,'SVPRC'
        #STATUS CVTFLAG1,CVTCUSE,'CUSE'
        #STATUS CVTFLAG1,CVTMVPG,'MVPG'
        #STATUS CVTFLAG1,CVTOVER,'OVER'
        #STATUS CVTFLAG1,CVTCSTR,'CSTR'
        #STATUS CVTFLAG2,CVTCMPSC,'CMPSC'
        #STATUS CVTFLAG2,CVTCMPSH,'CMPSH'
        #STATUS CVTFLAG2,CVTSOPF,'SOPF'
         BAL   R14,SPACE2              Double Space
*
*        Detect availability of the Relative-and-Immediate
*        instruction set
*
HARD25   ESTAE HARD25R,CT              trap S0C1 if J not available
         J     *+4                     test jump instruction
         STRING '  Relative-and-Immediate Instruction Set is',         X
               ' available.',INTO=LINE
         J     HARD25X                 exit
*
HARD25R  LA    R15,HARD25RR-*(,R15)     retry address
         SETRP WKAREA=(1),RETADDR=(15),RC=4,     <== retry after S0C1  X
               FRESDWA=YES,RETREGS=YES,DUMP=NO
         BR    R14
*
HARD25RR STRING '  Relative-and-Immediate Instruction Set is',' not',  X
               ' available.',INTO=LINE
*
HARD25X  ESTAE 0                       delete J recovery
         BAL   R14,SPACE2              Double Space
*
*        REAL STORAGE
*
         LA    R1,0001
         AL    R1,CVTEORM              HI-ADDR
         SRL   R1,0010                 GET IT IN "K"
         STRING '  On-line Real Storage: ',(CVTRLSTG,F,L),'K',         X
               '   Highest Real Storage Address: ',((R1),,L),'K',      X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R3,CVTRCEP              RSM CTL & ENUM AREA
         L     R4,RCEESPL-RCE(,R3)     # OF Expanded STORAGE FRAMES
         SLL   R4,2                    CHANGE TO "K"
         STRING '      Expanded Storage: ',((R4),,L),'K',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
         TM    HBB4410,L'HBB4410       UCB services available?
         BZ    HARD99                  no, jump
*
*        Service Processor Data: IPLPARM and HSA
*
HARD30   ICM   R5,B'1111',CVTSCPIN     Service Call Control Block
         BZ    HARD39                  no, jump
         USING SCCB,R5
         STRING '  Service Processor Data:',INTO=LINE
         BAL   R14,SPACE2              double space
         LA    R1,=C'NO '              LPAR=NO
         TM    SCCBCON1,SCCBBFY        running under PR/SM?
         BNO   *+8                     no, jump
         LA    R1,=C'YES'              LPAR=YES
         AIF   (NOT D'CVTH4410).ETR41
         LA    R2,=C'YES'              ETR=YES                 JWMJUN95
         ICM   R0,B'1111',SCCBETR      ETR installed ?         JWMJUN95
         BNZ   *+8                     No                      JWMJUN95
.ETR41   LA    R2,=C'NO '              ETR=NO                  JWMJUN95
         ANOP
         STRING 6X,'LOADPARM: ',                                       X
               (SCCBPARM+0,4),1X,      addr of SYS1.IPLPARM            X
               (SCCBPARM+4,2),1X,      xx of LOADxx                    X
               (SCCBPARM+6,1),1X,      Message option   M P A          X
               (SCCBPARM+7,1),         NUC-ID                          X
               '    LPAR: ',((R1),3),  LPAR mode YES/NO                X
               '    ETR installed:  ',((R2),3),                JWMJUN95X
               INTO=LINE
         BAL   R14,SPACE2              double space
*
*        Hardware Storage Areas (HSA)
*
         LH    R2,SCCBNHSA             number of HSA's
         LTR   R2,R2                   any HSA used in this system?
         BZ    HARD39                  no, jump
         LH    R3,SCCBOHSA             offset to first HSA
         LA    R3,SCCB(R3)             change offset to address
         USING SCCBHSA,R3
         SLR   R4,R4                   HSA seqno
*loop
HARD36   LH    R1,SCCBHSSZ             HSA size (in 4K pages)
         SLL   R1,2                    make it in K
         STRING 12X,'HSA number: ',((R4),,R3B),                        X
               '    HSA size: ',((R1),,R5B),'K',                       X
               '    HSA Address: ',(SCCBAHSA,,X),                      X
               INTO=LINE
         BAL   R14,SPACE1              single space
         LA    R3,6(,R3)               next HSA entry
         LA    R4,1(,R4)               bump up seq no
         BCT   R2,HARD36               print next HSA
*endloop
         BAL   R14,BLANK1              double space
HARD39   EQU   *
         DROP  R5,R3                   SCCB,SCCBHSA
*
*        I/O Configuration data
*
         L     R5,CVTIXAVL             IOS COMM AREA
         L     R6,IOCIOVTP-IOCOM(,R5)  IOS Vector Table
         USING IOVT,R6
         L     R7,IOVTCDA              Config Data area
         USING CDA,R7
         CLC   =C'CDA ',CDACDA         is this a CDA?
         BNE   HARD49                  no, exit
HARD40   STRING '  I/O Configuration Data:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         TM    CDAFLAGS,CDAINACT       HCD in use?
         BO    HARD45                  NO, JUMP
         STRING '    IODF Data Set Name: ',CDAIODF,INTO=LINE
         BAL   R14,SPACE1              next line
         STRING '    IODF Configuration Id: ',CDACONID,                X
               '   Date: ',(CDALDATE,P,YYYY-MM-DD),            JWMMAY96X
               '   Time: ',(CDALTIME+0,1,X),'.',               JWMMAY96X
               (CDALTIME+1,1,X),'.',(CDALTIME+2,1,X),          JWMMAY96X
               INTO=LINE
         BAL   R14,SPACE1              next line
         STRING '      Update Count: ',(CDAUPDCT,H,L),INTO=LINE
         BAL   R14,SPACE1              next line
         STRING '    EDT ID: ',CDAEDTID,INTO=LINE
         BAL   R14,SPACE1              next line
         AIF   (NOT D'CVTH5510).HARD45                         JWMJAN98
         TM    HBB5510,L'HBB5510       running on ESA 5.1?     JWMJAN98
         BZ    HARD45                  no, jump                JWMJAN98
         STRING '    TOKEN: Processor : ',CDAPROCE,            JWMJAN98X
               '   Date: ',CDASDAT,                            JWMMAY96X
               '   Time: ',CDASTIM,                            JWMJAN98X
               INTO=LINE                                       JWMJAN98
         BAL   R14,SPACE1              next line               JWMJAN98
         STRING 11X,'Description: ',CDASDESC,INTO=LINE         JWMJAN98
         BAL   R14,SPACE1              next line               JWMJAN98
.HARD45  ANOP
HARD45   EQU   *
         STRING '    Flags: ',(CDAFLAGS,,X),INTO=LINE
         BAL   R14,SPACE2              Double Space
HARD49   EQU   *
*
HARD99   END_PROC
         TITLE 'SHOWMVS &REL - VM Data'
*---------------------------------------------------------------------*
*                                                                     *
*VM Data                                                              *
*                                                                     *
*  VM/ESA Release 2.0, Service Level 9207  USER(MVSPROD1)             *
*                                                                     *
*  Real CPU Serial: 027506 Version: D4 Model: 9021-942                *
*                                                                     *
*---------------------------------------------------------------------*
VMDATA   BEGIN_PROC KW=VM,AUTH=YES
         STIDP STIDP_WORKAREA          GET CPU ID
         CLI   STIDP_VERSION,X'FF'     VM GUEST?
         BNE   VMDATA9                 NO,EXIT
         STRING 'VM Data:',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        DIAG 000: Store Extended Identification
*
         PGSER R,FIX,A=WORK256,EA=WORK256+255,ECB=0 FIX PAGE
         SYSEVENT DONTSWAP             PGFIX/LRA
         LRA   R1,WORK256              LOAD REAL ADDRESS
         LA    R2,L'WORK256            length
         DIAG  R1,R2,X'0000'           store extended identification
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=WORK256,EA=WORK256+255,ECB=0 FREE PAGE
*
         LA    R3,WORK256              work area for diagnose
         USING VMDIAG,R3
         STRING 2X,(VMPRODNO,,T),      VM/ESA                          X
               ' Release ',(VMRELS,FL1,L),'.', Release 2.              X
               (VMMODLVL,FL1,L),              Release 2.0              X
               ', Service Level ',     service level                   X
               (VMSVCLVL,H,R4Z),       Service Level 9207              X
               '   User(',(VMUSERID,,T),')',                           X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
         MVC   STIDP_VERSION,VMCPUVER  CPU Version Code
*
*        DIAG 218: Get Real CPU ID (VM/ESA R2 and up)
*
         TM    VMBITMAP+1,X'C0'        VM/ESA R2?
         BNO   VMDATA3                 NO, SKIP DIAG 218
         PGSER R,FIX,A=STIDP_WORKAREA,EA=STIDP_WORKAREA+7,ECB=0 PGFIX
         SYSEVENT DONTSWAP             PGFIX/LRA
         LA    R1,0                    FUNCTION CODE
         LRA   R2,STIDP_WORKAREA       LOAD REAL ADDRESS
         DIAG  R1,R2,X'0218'           ISSUE STIDP DIAGNOSE
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=STIDP_WORKAREA,EA=STIDP_WORKAREA+7,ECB=0 PGFREE
VMDATA3  EQU   *
*
         MVC   WKCELL2,BLANKS          model code
         LA    R4,NEXTLINE             fake PCCA
         USING PCCA,R4
         IC    R0,STIDP_VERSION        CPU Version code
         BAL   R14,HARDCPU             convert 9021-C4 to 9021-941
         STRING '  Real CPU',                                          X
               '  Serial: ',(STIDP_SERIAL,,X),                         X
               '  Version: ',(STIDP_VERSION,,X),                       X
               '  Model: ',(STIDP_MODEL,,X),                           X
               WKCELL2,                -742                            X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
VMDATA9  END_PROC
*
*        Data returned by VM Diagnose 0
*
VMDIAG   DSECT
VMPRODNO DS    CL8'VM/ESA'             CP PROD NO
VMENVIR  DS    XL3                     VM Execution Environment
VMCPUVER DS    X'F8'                   Real CPU Version
VMMCEL   DS    XL2                     Machine Check Extended Logout
VMPROC   DS    H                       Processor addr
VMUSERID DS    CL8'MVSTEST'            CMS User
VMBITMAP DS    X'7FE0000000000000'     Feature map
VMTIMEZ  DS    X'FFFFD7C0'             Time zone difference in seconds
VMRELS   DS    FL1'2'                  VM Release
VMMODLVL DS    FL1'1'                  VM Mod level
VMSVCLVL DS    H'9207'                 VM service level
*
*        convert processor version code to model number
*
*        RE: IEAVNP10(IRARMCPU) in SYS1.NUCLEUS
*            Large Systems Performance Reference (SC28-1187)
*
HARDCPU  BEGIN_PROC SAVE=NO
         USING *,R15
         CLI   WKCELL2,C' '            first time?
         BNER  R14                     no, goback
         USING PCCA,R4
*
         BAL   R1,HARDCPU2
         DC    X'2003',Y(HARD2003-(*-2))
         DC    X'3081',Y(HARD308X-(*-2))
         DC    X'3083',Y(HARD308X-(*-2))
         DC    X'3084',Y(HARD308X-(*-2))
         DC    X'3090',Y(HARD3090-(*-2))
         DC    X'4381',Y(HARD4381-(*-2))
         DC    X'5995',Y(HARD5995-(*-2))     OAC
         DC    X'7490',Y(HARD7490-(*-2))
         DC    X'9021',Y(HARD9021-(*-2))
         DC    X'9121',Y(HARD9121-(*-2))
         DC    X'9221',Y(HARD9221-(*-2))
         DC    X'9672',Y(HARD9672-(*-2))
         DC    X'0400',Y(HARD0400-(*-2))
         DC    X'0500',Y(HARD0500-(*-2))
         DC    X'FF',0H'0'
*LOOP
HARDCPU2 CLC   CVTMDL,0(R1)            SAME MODEL TYPE?
         BE    HARDCPU4                YES, EXIT LOOP
         LA    R1,2+2(,R1)             NEXT TYPE
         CLI   0(R1),X'FF'             END OF TABLE?
         BNE   HARDCPU2                NOT YET
*ENDLOOP
         BR    R14                     MODEL-TYPE NOT FOUND
*
HARDCPU4 AH    R1,2(,R1)               Add OFFSET TO MODEL TABLE
*LOOP
HARDCPU5 CLM   R0,B'0001',0(R1)        SAME VERSION NUMBER?
         BE    HARDCPU6
         LA    R1,1+5(,R1)             NEXT TYPE
         CLI   0(R1),X'FF'             END OF TABLE?
         BNE   HARDCPU5                NOT YET
*ENDLOOP
         BR    R14                     VERSION NOT FOUND
HARDCPU6 MVI   WKCELL2,C'-'            move model code
         MVC   WKCELL2+1(5),1(R1)      move model code
         BR    R14
*
HARD2003 DC    X'01',C'115  '          Multiprise 2000      1996-09-10
         DC    X'02',C'125  '
         DC    X'03',C'135  '
         DC    X'0B',C'102  '
         DC    X'0C',C'103  '
         DC    X'0D',C'104  '
         DC    X'0E',C'105  '
         DC    X'0F',C'106  '
         DC    X'11',C'116  '
         DC    X'12',C'126  '
         DC    X'13',C'136  '
         DC    X'14',C'146  '
         DC    X'15',C'156  '
         DC    X'FF'
HARD308X DC    X'01',C'E    '
         DC    X'03',C'D    '
         DC    X'11',C'B    '
         DC    X'13',C'G    '
         DC    X'21',C'J    '
         DC    X'23',C'K    '
         DC    X'26',C'Q    '
         DC    X'53',C'G+   '
         DC    X'63',C'K+   '
         DC    X'66',C'Q+   '
         DC    X'81',C'EX   '
         DC    X'91',C'BX   '
         DC    X'93',C'GX   '
         DC    X'A1',C'JX   '
         DC    X'A3',C'KX   '
         DC    X'A6',C'QX   '
         DC    X'B1',C'CX   '
         DC    X'FF'
HARD3090 DC    X'01',C'120S '
         DC    X'02',C'150J '
         DC    X'03',C'120J '
         DC    X'05',C'150  '
         DC    X'06',C'150E '
         DC    X'08',C'280S '
         DC    X'10',C'180  '
         DC    X'11',C'180E '
         DC    X'12',C'180S '
         DC    X'13',C'180J '
         DC    X'14',C'150S '
         DC    X'15',C'170S '
         DC    X'16',C'250S '
         DC    X'17',C'170J '
         DC    X'18',C'280J '
         DC    X'19',C'100S '
         DC    X'20',C'200  '
         DC    X'21',C'200E '
         DC    X'22',C'200S '
         DC    X'23',C'200J '
         DC    X'25',C'250J '
         DC    X'31',C'300E '
         DC    X'32',C'300S '
         DC    X'33',C'300J '
         DC    X'34',C'380S '
         DC    X'35',C'380J '
         DC    X'40',C'400  '
         DC    X'41',C'400E '
         DC    X'42',C'400S '
         DC    X'43',C'400J '
         DC    X'50',C'500S '
         DC    X'51',C'500E '
         DC    X'52',C'500J '
         DC    X'55',C'110J '
         DC    X'56',C'120J '
         DC    X'57',C'150JX'
         DC    X'58',C'170JK'
         DC    X'59',C'250JX'
         DC    X'61',C'600E '
         DC    X'62',C'600S '
         DC    X'63',C'600J '
         DC    X'FF'
HARD4381 DC    X'00',C'2    '
         DC    X'01',C'3    '
         DC    X'02',C'1    '
         DC    X'03',C'13   '
         DC    X'04',C'14   '
         DC    X'05',C'24   '
         DC    X'06',C'11   '
         DC    X'07',C'23   '
         DC    X'08',C'12   '
         DC    X'09',C'21   '
         DC    X'0A',C'22   '
         DC    X'0D',C'90E  '
         DC    X'0B',C'91E  '
         DC    X'0C',C'92E  '
         DC    X'FF'
HARD5995 DC    X'00',C'350A '
         DC    X'28',C'500A '    firmware-level dependent
         DC    X'30',C'500A '    firmware-level dependent
         DC    X'20',C'700A '    MXT
         DC    X'40',C'790A '
         DC    X'60',C'1100A'
         DC    X'80',C'1400A'
         DC    X'01',C'3550M'    3550M
         DC    X'41',C'3550E'    3550M EPF
         DC    X'09',C'4550M'    4550M
         DC    X'49',C'4550E'    4550M EPF
         DC    X'11',C'6650M'    6650M
         DC    X'51',C'6650E'    6650M EPF
         DC    X'19',C'8650M'    8650M
         DC    X'59',C'8650E'    8650M EPF
         DC    X'C5',C'2570M'    2570M
         DC    X'C1',C'3570M'    3570M
         DC    X'C9',C'4570M'    4570M
         DC    X'8D',C'5570M'    5570M
         DC    X'B5',C'6570M'    6570M
         DC    X'F9',C'4670M'    4670M
         DC    X'E1',C'5670M'    5670M
         DC    X'D1',C'6670M'    6670M
         DC    X'F1',C'7670M'    7670M
         DC    X'D9',C'8670M'    8670M
         DC    X'AF',C'10670'    10670M
         DC    X'BB',C'12670'    12670M
         DC    X'13',C'535  '    Millenium
         DC    X'14',C'545  '    Millenium
         DC    X'15',C'555  '    Millenium
         DC    X'16',C'565  '    Millenium
         DC    X'17',C'575  '    Millenium
         DC    X'18',C'585  '    Millenium
         DC    X'FF'
HARD7490 DC    X'01',C'32M  '     MCA with 32MB memory            P390
         DC    X'03',C'64M  '     MCA with 32MB daughter-board
         DC    X'04',C'128M '     MCA with 96MB daughter-board
         DC    X'08',C'32M  '     PCI with 32MB memory
         DC    X'09',C'128M '     PCI with 128MB memory (64 Mbit DRAMs)
         DC    X'0A',C'128M-'     PCI with 128MB memory (16 Mbit DRAMs)
         DC    X'FF'
HARD9021 DC    X'28',C'500  '
         DC    X'38',C'580  '
         DC    X'39',C'330  '
         DC    X'45',C'620  '
         DC    X'49',C'340  '
         DC    X'65',C'720  '
         DC    X'A1',C'520  '
         DC    X'A2',C'640  '
         DC    X'A3',C'740  '
         DC    X'A4',C'820  '
         DC    X'A6',C'900  '
         DC    X'A7',C'660  '
         DC    X'B5',C'860  '
         DC    X'C1',C'711  '
         DC    X'C2',C'821  '
         DC    X'C3',C'831  '
         DC    X'C4',C'941  '
         DC    X'D2',C'822  '
         DC    X'D4',C'942  '
         DC    X'D5',C'952  '
         DC    X'D6',C'962  '
         DC    X'D7',C'972  '
         DC    X'D8',C'982  '
         DC    X'DA',C'9X2  '      ?
         DC    X'FF'
HARD9121 DC    X'A0',C'190  '
         DC    X'A1',C'210  '
         DC    X'A2',C'260  '
         DC    X'A3',C'320  '
         DC    X'A4',C'440  '
         DC    X'A5',C'480  '
         DC    X'A6',C'490  '
         DC    X'A7',C'570  '
         DC    X'A8',C'610  '
         DC    X'B0',C'180  '
         DC    X'F0',C'311  '
         DC    X'F3',C'411  '
         DC    X'F4',C'511  '
         DC    X'F5',C'521  '
         DC    X'F6',C'621  '
         DC    X'F7',C'622  '
         DC    X'F8',C'732  '
         DC    X'F9',C'742  '
         DC    X'FF'
HARD9221 DC    X'09',C'120  '
         DC    X'10',C'120  '
         DC    X'11',C'130  '
         DC    X'12',C'130  '
         DC    X'13',C'150  '
         DC    X'14',C'150  '
         DC    X'16',C'170  '
         DC    X'21',C'170  '
         DC    X'22',C'200  '
         DC    X'FF'
HARD9672 DC    X'06',C'R53  '   mesc
         DC    X'08',C'R63  '
         DC    X'09',C'R73  '   jwm
         DC    X'0A',C'R83  '
         DC    X'0C',C'RX3  '
         DC    X'1F',C'RA2  '
         DC    X'12',C'R12  '
         DC    X'13',C'R22  '
         DC    X'14',C'R32  '
         DC    X'15',C'R42  '
         DC    X'16',C'R52  '
         DC    X'18',C'R72  '
         DC    X'42',C'R11  '
         DC    X'43',C'R21  '
         DC    X'44',C'R31  '
         DC    X'45',C'R41  '
         DC    X'46',C'R51  '
         DC    X'47',C'R61  '
         DC    X'32',C'R11  ' SEC D57262
         DC    X'33',C'R21  ' SEC D57262
         DC    X'34',C'R31  ' SEC D57262
         DC    X'35',C'R41  ' SEC D57262
         DC    X'36',C'R51  ' SEC D57262
         DC    X'37',C'R61  ' SEC D57262
         DC    X'51',C'R14  ' CMOS-3
         DC    X'52',C'R24  ' CMOS-3
         DC    X'53',C'R34  ' CMOS-3
         DC    X'54',C'R44  ' CMOS-3
         DC    X'55',C'R54  ' CMOS-3 losa
         DC    X'56',C'R64  ' CMOS-3
         DC    X'57',C'R74  ' CMOS-3
         DC    X'58',C'R84  ' CMOS-3
         DC    X'59',C'R94  ' CMOS-3
         DC    X'5A',C'RX4  ' CMOS-3
         DC    X'5D',C'RC4  ' CMOS-3
         DC    X'5E',C'RB4  ' CMOS-3
         DC    X'5F',C'RA4  ' CMOS-3
         DC    X'71',C'R15  ' CMOS-4     6/1997
         DC    X'72',C'R25  ' CMOS-4     6/1997
         DC    X'73',C'R35  ' CMOS-4     6/1997  bost
         DC    X'74',C'R45  ' CMOS-4     6/1997
         DC    X'75',C'R55  ' CMOS-4     6/1997
         DC    X'76',C'R65  ' CMOS-4     6/1997
         DC    X'77',C'R75  ' CMOS-4     6/1997
         DC    X'78',C'R85  ' CMOS-4     6/1997
         DC    X'79',C'R95  ' CMOS-4     6/1997
         DC    X'FF'
HARD0400 DC    X'00',C'GS415' Amdahl Millennium Global Server
         DC    X'00',C'GS422'  Version codes are expected 1Q.97
         DC    X'00',C'GS425'
         DC    X'FF'
HARD0500 DC    X'13',C'GS535' Amdahl Millennium Global Server
         DC    X'14',C'GS545'
         DC    X'15',C'GS555'
         DC    X'16',C'GS565'
         DC    X'17',C'GS575'
         DC    X'18',C'GS585'
         DC    X'FF'
         DC    0H'0'
*---------------------------------------------------------------------*
*                                                                     *
*  PR/SM Partition Number: 3                                          *
*                                                                     *
*  LPAR Configuration as of 1994-06-20  13.19.34          01973000    *
*                                                                     *
*     LPAR    LPAR      WEIGHT  WEIGHT  WEIGHT  WEIGHT  WEIGHT        *
*      NO     NAME      CPU 0   CPU 1   CPU 2   CPU 3   CPU 4         *
*       1    MVSPROD1     80      80      80                          *
*       2    MVSTEST1     20      20      20                          *
*       0    PHYSICAL      0       0       0                          *
*                                                                     *
*---------------------------------------------------------------------*
LPAR00   BEGIN_PROC KW=LPAR
         MVI   FAILCODE,1              failure code
         ICM   R5,B'1111',CVTSCPIN     Service Call Control Block
         BZ    LPAR990                 no, exit
         MVI   FAILCODE,2              failure code
         USING SCCB,R5
         TM    SCCBCON1,SCCBBFY        running under PR/SM?
         BZ    LPAR990                 no, exit
*
*        Get partition number from CSD
*
         AIF   (NOT D'CVTH4430).LPAR19
         L     R4,CVTCSD               common system data area
         USING CSD,R4
         TM    HBB4430,L'HBB4430       running under ESA 4.3?
         BZ    LPAR19                  no, exit
         CLI   CSDPLPN,0               running under PR/SM?
         BE    LPAR19                  no, exit
         STRING '  PR/SM Partition Number: ',(CSDPLPN,FL1,L),          X
               INTO=LINE
         MVC   OWN_LPAR,CSDPLPN        save LPAR number for later
         BAL   R14,SPACE2              Double Space
LPAR19   EQU   *
.LPAR19  ANOP
*
*        PR/SM config table (ESA 4.2 with RMF)
*
         AIF   (NOT D'CVTH4420).LPAR999
         ICM   R5,B'1111',CVTMFCTL     GLOBAL SUPERVISOR TABLE
         BZ    LPAR25                  LOST, QUIT
         USING ERBSTGST,R5
         CLC   =C'STGS',STGSNAME       RIGHT CB ID?
         BNE   LPAR25                  LOST, QUIT
         ICM   R6,B'1111',STGSCPU      CPU DATA TABLE
         BNP   LPAR25                  LOST, QUIT
         USING ERBCPUDT,R6
         L     R7,CPUD204              LPAR CONFIGURATION TABLE
         TM    HBB4430,L'HBB4430       running under ESA 4.3?
         BO    *+8                     yes, jump
         L     R7,CPUD204$             LPAR CONFIG TABLE (RMF 4.2)
         DROP  R5,R6                   ERBSTGST,ERBCPUDT
         LTR   R7,R7                   VALID POINTER?
         BP    LPAR30                  yes, continue
         USING D204,R7
*
*        PR/SM config table (DIAG 204)
*
LPAR25   EQU   *
         MVI   FAILCODE,25             failure code
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         BNO   LPAR990                 no, exit
         BAL   R14,WORKADDR            LOCATE WORK AREA
         LR    R7,R1                   save addr
         PGSER R,FIX,A=D204,EA=D204+4095,ECB=0 PGFIX
         SYSEVENT DONTSWAP             PGFIX/LRA
         LRA   R2,D204                 LOAD REAL ADDRESS
         LA    R3,4                    FUNCTION CODE
         DIAG  R2,R3,X'0204'           ISSUE PR/SM DIAGNOSE
         SYSEVENT OKSWAP               undo DONTSWAP
         PGSER R,FREE,A=D204,EA=D204+4095,ECB=0 PGFIX
*
LPAR30   EQU   *
         AIF   (NOT D'CVTH4430).LPAR39
         LH    R3,D204OWNP             OFFSET TO OWN PARTITION
         LA    R3,D204(R3)             CHANGE OFFSET TO ADDRESS
         USING D204LPAR,R3
         TM    HBB4430,L'HBB4430       running under ESA 4.3?
         BZ    LPAR39                  no, jump
         MVI   FAILCODE,38             failure code
         CLC   D204LPNO,CSDPLPN        OWN PARTITION NUMBER
         BNE   LPAR990                 LOST, QUIT
         MVI   FAILCODE,39             failure code
         CLC   D204LPCP,CSDCPUOL+1     # OF CPU'S ONLINE IN MY LPAR
         BNE   LPAR990                 LOST, QUIT
         DROP  R3                      D204LPAR
LPAR39   EQU   *
.LPAR39  ANOP
*
         STCKSYNC TOD=WKCELL1          GET CURRENT TOD CLOCK VALUE
         MVI   FAILCODE,40             failure code
         CLC   WKCELL1(2),D204STCK     COMPARE YEAR/MONTH
         BNE   LPAR990                 LOST, QUIT
         LA    R1,D204STCK             pass TOD clock value
         BAL   R14,STCKCONV            convert TOD clock to decimal
         STRING '  LPAR Configuration as of ',                         X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),2X,        HH.MM.SS                        X
               10X,((R7),,X),          address of D204 area            X
               INTO=LINE
         BAL   R14,SPACE2           <- Double Space
*
*     Scan LPAR entries to build map of all physical CPU's
*
         LA    R3,L'D204HDR(,R7)       FIRST LPAR ENTRY
         USING D204LPAR,R3
*LOOP
LPAR511  SLR   R1,R1
         IC    R1,D204LPCP             # OF PROCESSORS FOR THIS LPAR
         MH    R1,=H'24'               size of all proc entries
         LA    R3,L'D204LPAR(R1,R3)    SKIP LPAR ENTRY
         CLI   D204LPNO,0              PHYSICAL entry ?
         BNE   LPAR511                 not yet, try next LPAR
*ENDLOOP
         MVC   PHYSICAL_LPAD,D204LPAD  addr of 1st CPU (0 or 1)
*
LPAR520  STRING '     LPAR    LPAR      ',INTO=LINE
         LA    R1,LINE(R15)            FIRST WORD "WEIGHT"
         LH    R2,PHYSICAL_LPAD        First CPU
         STRING '      NO     NAME      ',INTO=NEXTLINE
         LA    R3,NEXTLINE(R15)        FIRST "CPU n"
*LOOP
LPAR521  MVC   0(6,R1),=C'WEIGHT'      BUILD TITLE LINE
         LA    R1,08(,R1)              SKIP WORD "WEIGHT"
         STRING 'CPU ',((R2),,L),INTO=((R3),10)
         LA    R2,1(,R2)               BUMP CPU NO
         LA    R3,08(,R3)              NEXT CPU #
         LH    R0,D204PCCT             Max CPU ID
         AH    R0,PHYSICAL_LPAD        First CPU
         CLR   R2,R0                   end of table yet?
         BL    LPAR521                 NO, NEXT CPU NO
*ENDLOOP
         BAL   R14,SPACE1           <- NEXT LINE
         BAL   R14,SPACE1           <- NEXT LINE
*
         LA    R3,L'D204HDR(,R7)       FIRST LPAR ENTRY
*LOOP
LPAR541  LA    R2,D204LPNO             save addr of partition number
         STRING (D204LPNO,FL1,R8B),4X, LPAR NUMBER                     X
               D204LPNM,               LPAR NAME                       X
               INTO=LINE
         CLC   OWN_LPAR,D204LPNO       own LPAR?
         BNE   *+8                     no, jump
         MVI   LINE+8,C'<'             Flag own LPAR
         SLR   R0,R0
         ICM   R0,B'0001',D204LPCP     # OF PROCESSORS FOR THIS LPAR
         BZ    LPAR548                 NOT ACTIVE, IGNORE
         LA    R3,D204LPAD             FIRST PROCESSOR
         USING D204LPAD,R3
*--LOOP
LPAR545  LH    R1,D204LPAD             CPU ADDR
         SH    R1,PHYSICAL_LPAD        First CPU
         MH    R1,=H'8'                column width
         LA    R1,LINE+22(R1)          CHANGE OFFSET TO ADDRESS
         STRING (D204LPRS,H,R5B),INTO=((R1),10)
         CLI   D204LPRS,255            dedicated processor?
         BNE   *+10                    no, skip MVC
         MVC   0(5,R1),=C'  ded'       yes, show it
         LA    R3,24(,R3)              NEXT CPU ENTRY
         BCT   R0,LPAR545              NEXT CPU
*--ENDLOOP
         BAL   R14,SPACE1           <- NEXT LINE
         B     LPAR549
LPAR548  LA    R3,L'D204LPAR(,R3)      SKIP INACTIVE LPAR ENTRY
         BAL   R14,SPACE1           <- NEXT LINE
LPAR549  CLI   0(R2),0                 end of table?
         BNE   LPAR541                 not yet, keep on going
*ENDLOOP
         BAL   R14,BLANK1           <- blank line
         B     LPAR999                 exit
.LPAR999 ANOP
LPAR990  EQU   *                       LPAR config could not be gen'd
         STRING '  LPAR Configuration could not be accessed (code=',   X
               (FAILCODE,FL1,R3Z),')',INTO=LINE
         BAL   R14,SPACE2           <- Double space
LPAR999  END_PROC
         TITLE 'SHOWMVS &REL - Display Map of Virtual Memory'
*---------------------------------------------------------------------*
*                                                                     *
*Virtual Storage Map:                                                 *
*                                                                     *
*          Area   Start(hex)-End(hex)    Size(K)    Size(M)           *
*                                                                     *
*    PSA+System    00000000  00005000        20K        .0M           *
*    Region V=R    00005000  00024FFF       128K        .1M           *
*    Region V=V    00025000  009FFFFF     10092K       9.8M           *
*           CSA    00A00000  00C79FFF      2536K       2.4M           *
*          MLPA    00C7A000  00C7BFFF         8K        .0M           *
*          FLPA    00C7C000  00C84FFF        36K        .0M           *
*          PLPA    00C85000  00ED8FFF      2384K       2.3M           *
*           SQA    00ED9000  00FCFFFF       988K        .9M           *
*       Nucleus    00FD0000  00FFFFFF       192K        .1M           *
*        16M-line  ----------------------------------------           *
*    Nucl. Ext.    01000000  013D6FFF      3932K       3.8M           *
*      SQA EXT.    013D7000  01D77E64      9859K       9.6M           *
*     PLPA Ext.    01D78000  0342CFFF     23252K      22.7M           *
*     FLPA Ext.    0342D000  0342FFFF        12K        .0M           *
*     MLPA Ext.    00000000  00000000         0K        .0M           *
*      CSA Ext.    03430000  03FFFFFF     12096K      11.8M           *
*     Reg. Ext.    04000000  7FFFFFFF   2031616K    1984.0M           *
*                                                                     *
*  CSA space converted to SQA:        0K                              *
*  Common Area Space Available:    2248K  (CSA+SQA)                   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO                                               EU17 MACRO
         MEMORY_MAP &MSG,&START,&END,&SIZE,&ALLOC            EU17 MACRO
         AIF   (T'&START NE 'O').AA                          EU17 MACRO
         MNOTE 8,'--- Start Address missing '                EU17 MACRO
         AGO   .ZZ                                           EU17 MACRO
.AA      L     R1,&START               START ADDRESS         EU17 MACRO
         AIF   (T'&END EQ 'O').CC                            EU17 MACRO
         L     R2,&END                 END ADDRESS           EU17 MACRO
         AIF   (T'&SIZE NE 'O').BB                           EU17 MACRO
         LA    R0,1                    ONE BYTE              EU17 MACRO
         ALR   R0,R2                   END ADDRESS           EU17 MACRO
         SLR   R0,R1                   SIZE IN BYTES         EU17 MACRO
         AGO   .EE                                           EU17 MACRO
.BB      L     R0,&SIZE                SIZE IN BYTES         EU17 MACRO
         AGO   .EE                                           EU17 MACRO
.CC      AIF   (T'&SIZE NE 'O').DD                           EU17 MACRO
         MNOTE 8,'--- End Address and/or Size missing '      EU17 MACRO
         AGO   .ZZ                                           EU17 MACRO
.DD      L     R0,&SIZE                SIZE IN BYTES         EU17 MACRO
         LTR   R2,R0                   size=0?               EU17 MACRO
         BZ    *+4+2+2                 yes, EA=0 too         EU17 MACRO
         AR    R2,R1                   END ADDRESS           EU17 MACRO
         BCTR  R2,0                    END ADDRESS           EU17 MACRO
.EE      STM   R1,R2,TENWORDS          START-END ADDRESSES   EU17 MACRO
         BAL   R14,MEM_SUB             EDIT SIZE (KB AND MB) EU17 MACRO
&STR     SETC  '&MSG'(2,K'&MSG-2)                            EU17 MACRO
         STRING '    &STR  ',                                EU17 MACROX
               (TENWORDS,4,X),2X,(TENWORDS+4,4,X),2X,        EU17 MACROX
               WKCELL1,'K  ',WKCELL2,'M',INTO=LINE           EU17 MACRO
         AIF   (NOT D'CVTH4430).MEM59
         AIF   ('&ALLOC' EQ '').MEM59
&LABEL   SETC  'IHB&SYSNDX'
         TM    HBB4430,L'HBB4430       Running under ESA 4.3?
         BZ    &LABEL.X                no, jump
         L     R0,GDA_&ALLOC._ALLOC    allocation, in Bytes
         SRL   R0,10                   allocation, in Kilos
         STRING ((R0),,R9B),'K',INTO=(LINE+60,LINE+L'LINE)
&LABEL.X EQU   *
.MEM59   BAL   R14,SPACE1          <== NEXT LINE             EU17 MACRO
.ZZ      MEND                                                EU17 MACRO
MEMORY   BEGIN_PROC KW=MEMORY
         STRING 'Virtual Storage Map:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING 10X,'Area   Start(hex)-End(hex)    Size(K)    Size(M)',+
               INTO=LINE
         TM    HBB4430,L'HBB4430       Running under ESA 4.3?
         BZ    MEMORY22                no, exit
         STRING '   Used(K)',INTO=(LINE+60,LINE+L'LINE)
MEMORY22 BAL   R14,SPACE2              Double Space
         L     R7,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R7
         L     R6,CVTGDA               GLOBAL DATA AREA           EU17
         USING GDA,R6                                             EU17
         XC    TENWORDS,TENWORDS                                  EU17
         MEMORY_MAP 'PSA+System  ',TENWORDS,GDAVR                 EU17
         MEMORY_MAP 'Region V=R  ',GDAVR,,GDAVRSZ                 EU17
         L     R4,PSAAOLD-PSA          MY ASCB
         L     R5,ASCBLDA-ASCB(,R4)    MY LDA
         USING LDA,R5
         MEMORY_MAP 'Region V=V  ',LDASTRTA,,LDASIZA              621D
         MEMORY_MAP '       CSA  ',GDACSA,,GDACSASZ,CSA           EU17
         MEMORY_MAP '      MLPA  ',CVTMLPAS,CVTMLPAE              EU17
         MEMORY_MAP '      FLPA  ',CVTFLPAS,CVTFLPAE              EU17
         MEMORY_MAP '      PLPA  ',CVTPLPAS,CVTPLPAE              EU17
         MEMORY_MAP '       SQA  ',GDASQA,,GDASQASZ,SQA           EU17
         MEMORY_MAP '   Nucleus  ',CVTRWNS,=X'00FFFFFF'
         STRING 8X,'16M-line',2X,                                 EU17 X
               '----------------------------------------',INTO=LINE
         BAL   R14,SPACE1          <== next line                  EU17
         MEMORY_MAP 'Nucl. Ext.  ',=X'01000000',CVTERWNE
         MEMORY_MAP '  SQA EXT.  ',GDAESQA,,GDAESQAS,ESQA         EU17
         MEMORY_MAP ' PLPA Ext.  ',CVTEPLPS,CVTEPLPE              EU17
         MEMORY_MAP ' FLPA Ext.  ',CVTEFLPS,CVTEFLPE              EU17
         MEMORY_MAP ' MLPA Ext.  ',CVTEMLPS,CVTEMLPE              EU17
         MEMORY_MAP '  CSA Ext.  ',GDAECSA,,GDAECSAS,ECSA         EU17
         MEMORY_MAP ' Reg. Ext.  ',GDAEPVT,,GDAEPVTS              EU17
         BAL   R14,BLANK1              BLANK LINE                 EU17
*
         L     R1,GDACSACV             CSA space converted to SQA
         SRL   R1,10                   in kilobytes
         STRING '  CSA space converted to SQA: ',                      X
               ((R1),,R8B),'K',INTO=LINE
         BAL   R14,SPACE1          <== next line
         L     R1,GDACSARE             unallocated space in common area
         SRL   R1,10                   in kilobytes
         STRING '  Common Area Space Available: ',                     X
               ((R1),,R7B),'K  (CSA+SQA)',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
         TM    HBB3310,L'HBB3310       ESA?
         BZ    MEMORY47                no, jump
         MVC   WORK256(9),=C'OFFOFFOFF' init work area
         TM    GDAFLGS,GDAGFSTR        GFS Trace active?
         BZ    *+10                    no, jump
         MVC   WORK256+0(3),=C'ON '    yes, remember it
         TM    GDAFLGS,GDACSATR        CSA Tracking active?
         BZ    *+10                    no, jump
         MVC   WORK256+3(3),=C'ON '    yes, remember it
         TM    GDAFLGS,GDASQATR        SQA Tracking active?
         BZ    *+10                    no, jump
         MVC   WORK256+6(3),=C'ON '    yes, remember it
         STRING '  GFS Trace: ',(WORK256,3),                           X
               '   CSA Tracking: ',(WORK256+3,3),                      X
               '   SQA Tracking: ',(WORK256+6,3),                      X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
MEMORY47 EQU   *
*---------------------------------------------------------------------*
*        Sub-Pool description                                         *
*---------------------------------------------------------------------*
MEMORY51 EQU   *                                                   $RS
         STRING 'Subpools:',INTO=LINE                              $RS
         BAL   R14,SPACE2              Double Space                $RS
         STRING '  Number  Type     Owner  Fix FProt Back  Dref Key',  X
               ' DKey Aloc Free Conv Rpt Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  000-127 PVT/EPVT Task       FProt Below         ',  X
               ' TCB  Low  Free        0',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  128     Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  129     PVT/EPVT Job        FProt Any        Any',  X
               ' PSW  Low  Free      129 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  130     PVT/EPVT Job              Any        Any',  X
               ' PSW  Low  Free      130 Auth',INTO=LINE
         STRING '  131     PVT/EPVT Job        FProt Any        Any',  X
               ' PSW  Low  Free      131',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  132     PVT/EPVT Job              Any        Any',  X
               ' PSW  Low  Free      132',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  133-202 Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  203     ELSQA    Task             Any   Dref   0',  X
               '      High Free      203 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  204     ELSQA    Job              Any   Dref   0',  X
               '      High Free      204 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  205     ELSQA    Memory           Any   Dref   0',  X
               '      High           205 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  206-212 Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  213     ELSQA    Task       FProt Any   Dref   0',  X
               '      High Free      213 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  214     ELSQA    Job        FProt Any   Dref   0',  X
               '      High Free      214 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  215     ELSQA    Memory     Fprot Any   Dref   0',  X
               '      High           215 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  216-222 Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  223     ELSQA    Task   Fix FProt Any          0',  X
               '      High Free      223 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  224     ELSQA    Job    Fix FProt Any          0',  X
               '      High Free      224 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  225     ELSQA    Memory Fix FProt Any          0',  X
               '      High           225 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  226     SQA      None   Fix       Below        0',  X
               '      High      Conv 226 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  227     CSA/ECSA None   Fix FProt Below      Any',  X
               ' PSW  High           227 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  228     CSA/ECSA None   Fix       Below      Any',  X
               ' PSW  High           228 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  229     PVT/EPVT Task       FProt Below      Any',  X
               ' PSW  High Free      229 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  230     PVT/EPVT Task             Below      Any',  X
               ' PSW  High Free      230 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  231     CSA/ECSA None       FProt Below      Any',  X
               ' PSW  High           231 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  232     Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  233     L-/ELSQA Task   Fix       Any          0',  X
               '      High Free      253 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  234     L-/ELSQA Job    Fix       Any          0',  X
               '      High           254 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  235     L-/ELSQA Memory Fix       Any          0',  X
               '      High           255 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  236     PVT/EPVT Task             Any          1',  X
               '      High Free      236 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  237     PVT/EPVT Task             Any          1',  X
               '      High Free      237 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  238     Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  239     SQA/ESQA None   Fix FProt Any          0',  X
               '      High      Conv 237 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  240     PVT/EPVT Task       FProt Below         ',  X
               ' TCB  Low  Free        0 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  241     CSA/ECSA None             Below      Any',  X
               ' PSW  High Free      241 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  242-244 Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  245     SQA/ESQA None   Fix       Any          0',  X
               '      High           245 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  246     Undefined',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  247     ESQA     None       FProt Any   Dref   0',  X
               '      High      Conv 247 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  248     ESQA     None             Any   Dref   0',  X
               '      High      Conv 248 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  249     PVT/EPVT Job              Below      Any',  X
               ' PSW  High Free      249 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  250     PVT/EPVT Task       FProt Below         ',  X
               ' TCB  Low  Free        0 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  251     PVT/EPVT Job        FProt Below         ',  X
               ' TCB  Low  Free      251 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  252     PVT/EPVT Job              Below        0',  X
               '      Low  Free      252 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  253     L-/ELSQA Task   Fix       Any          0',  X
               '      High Free      253 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  254     L-/ELSQA Job    Fix       Any          0',  X
               '      High           254 Auth',INTO=LINE
         BAL   R14,SPACE1              Single Space                $RS
         STRING '  255     L-/ELSQA Memory Fix       Any          0',  X
               '      High           255 Auth',INTO=LINE
         BAL   R14,SPACE2              Double Space                $RS
*---------------------------------------------------------------------*
*                                                                     *
*Global Cellpools:                                                    *
*                                                                     *
*  PoolId   Ext  C-Size   P-Num   S-Num SPN Key TCB      Header       *
*  02003E00   1     216      21      20 239   0 00000000 DAE SYMPTOM Q*
*  020281C0   1      96      10      10 245   0 00000000 SYS1.DUMP DAT*
*                                                                     *
*---------------------------------------------------------------------*
         STRING 'Global Cellpools:',INTO=LINE                      $RS
         BAL   R14,SPACE2              Double Space                $RS
         STRING '  PoolId   Ext  C-Size   P-Num   S-Num SPN Key TCB',  X
               6X,'Header',INTO=LINE                               $RS
         BAL   R14,SPACE1              Single Space                $RS
         L     R4,GDAPPDFX             fixed PPD queue             $RS
         BAL   R7,CELLP100             display cell-pools          $RS
         L     R4,GDAPPDPG             pageable PPD queue          $RS
         BAL   R7,CELLP100             display cell-pools          $RS
         BAL   R14,BLANK1              BLANK LINE                  $RS
         B     MEMORY99
*---------------------------------------------------------------- EU17
* "MEM_SUB" routine => EDIT SIZE IN K-BYTES AND M-BYTES           EU17
*                      R14 - link register                        EU17
*---------------------------------------------------------------- EU17
MEM_SUB  LR    R5,R0                   size to compute Mb         EU17
         M     R4,=F'10'               multiply by 10             EU17
         SRDL  R4,20                   and divide by 1 Mb         EU17
         CVD   R5,WKCELL3              convert                    EU17
         MVC   WKCELL2,=XL8'4040202020214B20' mask                EU17
         ED    WKCELL2,WKCELL3+5       edit                       EU17
         SRA   R0,10                   size in Kb                 EU17
         CVD   R0,WKCELL3              convert                    EU17
         MVC   WKCELL1,=XL8'4020202020202120' mask                EU17
         ED    WKCELL1,WKCELL3+4       edit                       EU17
         BR    R14                     return                     EU17
MEMORY99 END_PROC                                                 EU17
         TITLE 'SHOWMVS &REL - SYSPLEX Information'                @RS
*---------------------------------------------------------------------*
*                                                                  @RS*
*XCF Data                                                          @RS*
*                                                                  @RS*
*  SysName=MVS1    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.14   Active                         @RS*
*                                                                  @RS*
*  SysName=MVS2    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.17   Active                         @RS*
*                                                                  @RS*
*  SysName=MVS3    Interval: Monitor= 90   Operator= 93            @RS*
*    Status: 1996-11-20  10.25.17   Active                         @RS*
*                                                                  @RS*
* SYSGRS    (3)                                                    @RS*
*   Member=MVS1               Created Systemname=MVS1    Status:   @RS*
*   Member=MVS2               Created Systemname=MVS2    Status:   @RS*
*   Member=MVS3               Created Systemname=MVS3    Status:   @RS*
* SYSIGW01  (3)                                                    @RS*
*   Member=IGWCLM01MVS1       Created Systemname=MVS1    Status:   @RS*
*   Member=IGWCLM01MVS2       Created Systemname=MVS2    Status:   @RS*
*   Member=IGWCLM01MVS3       Created Systemname=MVS3    Status:   @RS*
*                                                                  @RS*
* and so on                                                        @RS*
*---------------------------------------------------------------------*
XCFDATA  BEGIN_PROC KW=XCF,AUTH=YES                                @RS
         AIF   (NOT D'CVTH4410).XCFD99                             @RS
         TM    HBB4410,L'HBB4410       running on ESA 410?         @RS
         BNO   XCFD99                  no, quit                    @RS
         STRING 'XCF Data',INTO=LINE                               @RS
         BAL   R14,SPACE2              Double Space                @RS
         BAL   R14,WORKADDR            allocate XCF Answer Area    @RS
         LA    R0,QUAHLENG+QUASLENG*8  Length of Answer-Area
         TM    HBB5510,L'HBB5510       running on ESA 510?
         BNO   *+8                     no, jump
         LA    R0,QUAHLENG+QUASLENG*32 Length of Answer-Area (>5.1)
         STM   R0,R1,WKCELL1           store length                @RS
         LR    R5,R1                   remember getmained storage  @RS
         USING QUAHDR,R5               tell assembly               @RS
         IXCQUERY REQINFO=SYSPLEX,ANSAREA=QUAHDR,ANSLEN=WKCELL1,       X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         BNZ   XCFD90                  No, error                   @RS
         ICM   R7,B'1111',QUAH#REC     record counter              @RS
         BZ    XCFD99                  no record, quit             @RS
         L     R6,QUAHSGOF             get offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUASYS,R6               tell assembly               @RS
         CLC   QUAH#REM,=F'0'          got all records?            @RS
         BE    XCFD10                  yes, suppress info          @RS
         STRING 'Got ',(QUAH#REC,F,L),' records,miss ',(QUAH#REM,F,L), X
               '==> increase MAXSYSPLEX-variable',INTO=LINE        @RS
         BAL   R14,SPACE2              Double Space                @RS
*loop                                                              @RS
XCFD10   EQU   *                                                   @RS
         SLR   R0,R0                                               @RS
         L     R1,QUASINTV             Monitor Time Interval       @RS
         D     R0,=F'100'              hundred seconds -> seconds  @RS
         SLR   R2,R2                                               @RS
         L     R3,QUASOPIN             Operator Time Interval      @RS
         D     R2,=F'100'              hundred seconds -> seconds  @RS
         STRING '  SysName=',QUASNAME,                                 X
               'Interval: Monitor= ',((R1),,L),3X,                     X
               'Operator= ',((R3),,L),                                 X
               INTO=LINE                                           @RS
         BAL   R14,SPACE1              Single Space                @RS
         LA    R1,QUASSUTO             pass TOD clock value        @RS
         BAL   R14,STCKCONV            convert TOD clock to decimal@RS
         STRING '    Status: ',                                        X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE                                           @RS
         LA    R4,LINE+35                                          @RS
        #STATUS QUASSTAT,QUASACTV,'Active'                         @RS
        #STATUS QUASSTAT,QUASSUM,'Status missing'                  @RS
        #STATUS QUASSTAT,QUASSYPT,'Sysplex part.'                  @RS
        #STATUS QUASSTAT,QUASLOCL,'Single System'                  @RS
        #STATUS QUASSTAT,QUASCLUP,'Cleanup Prog.'                  @RS
         BAL   R14,SPACE2           <- Double Space                @RS
         LA    R6,QUASLENG(R6)         next entry                  @RS
         BCT   R7,XCFD10               do until count = 0          @RS
*endloop
XCFD20   EQU   *                                                   @RS
*
*        First query to get the number of groups
*
         IXCQUERY REQINFO=GROUP,ANSAREA=QUAHDR,ANSLEN=WKCELL1,         X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         CH    R15,=H'4'               Success? RC4 okay           @RS
         BH    XCFD90                  No, error                   @RS
         L     R1,QUAHTLEN             get total length needed     @RS
         LA    R2,QUAHDR(R1)           1st byte after data         @RS
         STM   R1,R2,WKCELL1           store length, nextaddr      @RS
*
*        next query to get the whole data
*
XCFD22   EQU   *                                                   @RS
         IXCQUERY REQINFO=GROUP,ANSAREA=QUAHDR,ANSLEN=WKCELL1,         X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         BNZ   XCFD90                  No, error                   @RS
         STRING '  Groups',INTO=LINE                               @RS
         BAL   R14,SPACE2              Double Space                @RS
         L     R6,QUAHSGOF             get offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUAGRP,R6               tell assembly               @RS
         L     R7,QUAH#REC             record counter              @RS
*loop                                                              @RS
XCFD30   EQU   *                                                   @RS
         STM   R5,R7,TENWORDS          save registers
         STRING 4X,QUAGNAME,'  (',(QUAG#MEM,F,L),')',INTO=LINE
         BAL   R14,SPACE1              Single Space                @RS
         LA    R1,QUAMLENG+32          length of member+32 user st @RS
         M     R0,QUAG#MEM             number of members
         LA    R1,QUAHLENG(,R1)        length of header
         ST    R1,WKCELL1              store length                @RS
         L     R5,WKCELL1+4            point past header           @RS
         IXCQUERY REQINFO=GROUP,GRPNAME=QUAGNAME,                      X
               ANSAREA=QUAHDR,ANSLEN=WKCELL1,                          X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   @RS
         LTR   R15,R15                 Success?                    @RS
         BNZ   XCFD90                  No, error                   @RS
         ICM   R7,B'1111',QUAH#REC     record counter              @RS
         BZ    XCFD50                  jump if null
         L     R6,QUAHSGOF             add offset                  @RS
         LA    R6,QUAHDR(R6)           point to the records        @RS
         USING QUAMEM,R6               tell assembly               @RS
*  loop                                                            @RS
XCFD40   EQU   *                                                   @RS
         STRING 6X,'Member=',QUAMNAME,                                 X
               INTO=LINE                                           @RS
         CLI   QUAMSTA1,QUAMSCRE       Created?
         BNE   *+10                    no, jump
         MVC   LINE+32(7),=C'Created'  yes, move word
         CLI   QUAMSTA1,QUAMSACT       Active?
         BNE   *+10                    no, jump
         MVC   LINE+32(6),=C'Active'   yes, move word
         CLI   QUAMSTA1,QUAMSQUI       Quiesced?
         BNE   *+10                    no, jump
         MVC   LINE+32(8),=C'Quiesced' yes, move word
         CLI   QUAMSTA1,QUAMSFLD       Failed?
         BNE   *+10                    no, jump
         MVC   LINE+32(6),=C'Failed'   yes, move word
         STRING 'Systemname=',QUAMSYS,                                 X
               INTO=(LINE+40,NEXTLINE)
         LA    R1,QUAMTOD              pass TOD clock value        @RS
         BAL   R14,STCKCONV            convert TOD clock to decimal@RS
         STRING '    Status: ',                                        X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=(LINE+60,NEXTLINE)
         BAL   R14,SPACE1              Single Space                @RS
         LA    R6,QUAMLENG+32(R6)      next entry                  @RS
         BCT   R7,XCFD40               do until count = 0          @RS
*  endloop                                                         @RS
XCFD50   EQU   *                                                   @RS
         LM    R5,R7,TENWORDS          restore register            @RS
         LA    R6,QUAGLENG(R6)         next entry                  @RS
         BCT   R7,XCFD30               do until count = 0          @RS
*endloop                                                           @RS
         BAL   R14,BLANK1              emty line                   @RS
         B     XCFD99                  end
XCFD90   STRING '  IXCQUERY (XCF) FAILED - ',                          X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(WKCELL1,F,L),                                 X
               INTO=LINE                                           @RS
         BAL   R14,SPACE2              Double Space                @RS
.XCFD99  ANOP
XCFD99   END_PROC                                                  @RS
         TITLE 'SHOWMVS &REL - XCF Path Data'                      +JM
*---------------------------------------------------------------------*
*                                                                     *
* Path data:                                                          *
*                                                                     *
* PATHIN   Type: CTC                                                  *
*       Local/Remote: Sysname D1/  Device 03C9/                       *
*       Status: Restarting (Unconnected)                              *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 0 *
*       Number of times max message limit reached: 0                  *
*                                                                     *
* PATHOUT  Type: CTC                                                  *
*       Local/Remote: Sysname D1/  Device 03CB/                       *
*       Status: Restarting (Unconnected)                              *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 0 *
*       Total number of signals sent: 0                               *
*       Current number of signals pending transfer: 0                 *
*       Number of signal requests satisfied while path not busy: 0    *
*       Number of signal requests satisfied by this path while busy: 0*
*       Transport Class name: DEFAULT                                 *
*                                                                     *
*   PATHIN   Type: LIST                                               *
*       Local/Remote: Sysname D1/D2                                   *
*       Status: Working                                               *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 3                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 24*
*       Number of times max message limit reached: 0                  *
*       Structure name: IXCPLEX_PATH2                                 *
*       Number of lists that remain available for use: 8              *
*       Number of other systems connected to this structure: 0        *
*       Number of list signalling paths started by this system: 0     *
*                                                                     *
* PATHOUT  Type: LIST                                                 *
*       Local/Remote: Sysname D1/D2                                   *
*       Status: Working                                               *
*       Path retry limit: 10  Current path retry count: 0             *
*       Cumulative number of restarts: 2                              *
*       Path max message limit: 750                                   *
*       Current number of 1K blocks of message buffer space in use: 28*
*       Total number of signals sent: 92448                           *
*       Current number of signals pending transfer: 0                 *
*       Number of signal requests satisfied while path not busy: 91673*
*       Number of signal requests satisfied by this path while busy: 7*
*       Transport Class name: DEFAULT                                 *
*       Structure name: IXCPLEX_PATH1                                 *
*       Number of lists that remain available for use: 9              *
*       Number of other systems connected to this structure: 0        *
*       Number of list signalling paths started by this system: 0     *
*                                                                     *
* Pending message data:                                               *
*                                                                     *
*   Device: 03CB                                                      *
*         Member token of message sending message: 020004A800000008   *
*         ASID of member sending message: 6 0006                      *
*         Home ASID that initiated message out request: 6 0006        *
*         Name of system that is target of message:                   *
*         Name of transport class: DEFAULT                            *
*         Device type: CTC  Address: 03CB                             *
*                                                                     *
* System entries data:                                                *
*                                                                     *
*   Outbound  System name: D2                                         *
*       Transport class: DEFAULT                                      *
*       * The following counts refer to this transport class          *
*       4 - Current number of paths in service                        *
*       0 - Number of times a no path condition occured               *
*       0 - Number of times a no buffer condition occured             *
*       3750 - Max number of 1K blocks of message buffer space permitt*
*       38 - Current number of 1K blocks of message buffer space in us*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*       956 - Length of longest message that fits the buffer size     *
*       * The following values may wrap                               *
*       11904536 - Messages sent whose length exceeded the bufer size *
*       5755056 - Number of messages sent whose length fit the buffer *
*       0 - Number of messages sent whose length was smaller than buff*
*       3997673 - Messages sent whose length exceeded the bufer size (*
*                                                                     *
*   Inbound   System name: D2                                         *
*       4 - Current number of paths in service                        *
*       0 - Number of times a no path condition occured               *
*       0 - Number of times a no buffer condition occured             *
*       3000 - Max number of 1K blocks of message buffer space permitt*
*       90 - Current number of 1K blocks of message buffer space in us*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*                                                                     *
*   Local     System name: D1                                         *
*       Transport class: DEFAULT                                      *
*       * The following counts refer to this transport class          *
*       0 - Number of times a no buffer condition occured             *
*       750 - Max number of 1K blocks of message buffer space permitte*
*       0 - Current number of 1K blocks of message buffer space in use*
*       750 - Customer defined maxmsg value. Default number of 1K bloc*
*       956 - Length of longest message that fits the buffer size     *
*       * The following values may wrap                               *
*       0 - Messages sent whose length exceeded the bufer size (trans *
*       913 - Number of messages sent whose length fit the buffer size*
*       0 - Number of messages sent whose length was smaller than buff*
*       0 - Messages sent whose length exceeded the bufer size (signia*
*                                                                     *
* Source/destination data:                                            *
*                                                                     *
*   System name: D2  Group name: SYSGRS  Member name: D2              *
*         Number of signals sent: 11533089                            *
*         Number of signals received: 4756585                         *
*                                                                     *
* and so on                                                           *
*                                                                     *
*---------------------------------------------------------------------*
PATH00   BEGIN_PROC KW=PATH,AUTH=YES                               +JM
         AIF   (NOT D'CVTH5520).PATH99
         TM    HBB5520,L'HBB5520       running on ESA 510?
         BNO   PATH99                  no, jump
         XC    ANSAREA,ANSAREA         Clear getmain area
         BAL   R14,WORKADDR            allocate XCF Answer Area
         LR    R3,R1                   remember getmained storage
         USING AMDAREA,R3              IXCYAMDA Answer area
         MVC   AMDATLEN,=F'1024'       try this length first
*
*        Find out how much storage is needed for the answer area
*
         IXCMG DATAAREA=AMDAREA,DATALEN=AMDATLEN,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,IXCMG,COMPLETE)
         CLC   LRETCODE,=F'4'          Return code 4?
         BL    PATH1000                less, ok
         BH    PATH9020                greater than, yes
         CLC   LRSNCODE,=F'4'          Return code 4?
         BNE   PATH9020                no.
         L     R2,AMDATLEN             Load length of answe area
         AR    R2,R2                   double it
*
*        Allocate a answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    PATH0004                yes, jump
         LR    R4,R2                   save the getmain length
         SR    R2,R2
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0            +JM
         GETMAIN RU,LV=(R4)            allocate PATH work area
         LR    R3,R1                   answer goes here
         ST    R4,AMDATLEN             Save length of answe area
         MODESET KEYREG=(2)            switch back to own key
         LR    R2,R4                   restore the getmain length
         B     PATH0008
PATH0004 DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
         LR    R3,R1                   answer goes here
         ST    R2,AMDATLEN             Save length of answe area
PATH0008 DS    0H
         STM   R1,R2,WLM_AREA          save addr and length
         SYSEVENT DONTSWAP             PGFIX/LRA
         SR    R2,R2
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0            +JM
*
*        Retrieve ICXMG information
*
         IXCMG DATAAREA=AMDAREA,DATALEN=AMDATLEN,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,                      X
               MF=(E,IXCMG,COMPLETE)
         MODESET KEYREG=(2)            switch back to own key
         SYSEVENT OKSWAP               undo DONTSWAP
         CLC   LRETCODE,=F'0'          Return code 0?
         BNE   PATH9030                No.
PATH1000 DS    0H
*        STRING 'XCF - Tuning and Capacity Planning Data',INTO=LINE
*        BAL   R14,SPACE2              Double Space
*#SNAP ADDR=AMDAREA,LENGTH=AMDAREA_LEN
         ICM   R5,B'1111',AMDA#PTH     Any path entries?
         BZ    PATH1098                no
         L     R4,AMDAOPTH             Offset to path entries
         AR    R4,R3                   Start of Path entries
         USING AMDPATH,R4              Path data entry
         STRING '  Path data:',INTO=LINE
         BAL   R14,SPACE2              double space
PATH1005 DS    0H
*#SNAP ADDR=AMDPATH,LENGTH=AMDPATH_LEN
         LA    R6,=CL7'PATHIN '              Inbound path
         TM    AMDPDIR,AMDPINB         Inbound path?
         BO    *+8                     yes
         LA    R6,=CL7'PATHOUT'        Outbound path
         LA    R1,=CL7'none'           none
         CLC   AMDPPHDT,=A(AMHDTNA)    Hardware type - n/a
         BE    PATH1010                yes
         LA    R1,=CL7'CTC '           CTC
         CLC   AMDPPHDT,=A(AMHDTCTC)   Hardware CTC (type 1)
         BE    PATH1010                yes
         LA    R1,=CL7'CF  '           CF
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware CF (type 2)
         BE    PATH1010                yes
         LA    R1,=CL7'LIST'           list
         CLC   AMDPPHDT,=A(AMHDTLST)   Hardware list w/n CF (type 3)
         BE    PATH1010                yes
         LA    R1,=CL7'unknown'        unknown
PATH1010 DS    0H
         STRING 4X,((R6),7),'  Type: ',((R1),7),                       X
               INTO=LINE
         BAL   R14,SPACE1              single space
         CLC   AMDPPHDT,=A(AMHDTCTC)   Hardware CTC (type 1)
         BNE   PATH1015                no
         STRING 10X,'Local/Remote: Sysname ',                          X
               (AMDPNAME,,L),'/',(AMDPONME,,L),                        X
               '  Device ',(AMDPDEV,,L),'/',(AMDPODEV,,L),             X
               INTO=LINE
         B     PATH1018
PATH1015 DS    0H
         STRING 10X,'Local/Remote: Sysname ',                          X
               (AMDPNAME,,L),'/',(AMDPONME,,L),                        X
               INTO=LINE
PATH1018 DS    0H
         BAL   R14,SPACE1              single space
         SR    R15,R15                 clear for IC
         BAL   R1,PATH1024
         DC    AL1(AMDPSTRT),CL15'Starting       '
         DC    AL1(AMDPREST),CL15'Restarting     '
         DC    AL1(AMDPWORK),CL15'Working        '
         DC    AL1(AMDPSTOP),CL15'Stopping       '
         DC    AL1(AMDPLINK),CL15'Not connected  '
         DC    AL1(AMDPNOP),CL15'Not operational'
         DC    AL1(AMDPFAIL),CL15'Stop failed.   '
         DC    AL1(AMDPRBLD),CL15'Rebuilding     '
         DC    X'00',0H'0'             end of table
PATH1023 TM    AMDPFLAG,*-*            check properties
PATH1024 DS    0H
         IC    R15,0(,R1)              pick up TM mask
         EX    R15,PATH1023            test status
         BO    PATH1035                jump if on
         LA    R1,16(,R1)              Skip entry
         CLI   0(R1),0                 end of table?
         BNE   PATH1024                not yet, loop
         BAL   R1,PATH1030
         DC    AL1(AMDPQSCG),CL15'Quiescing      '
         DC    AL1(AMDPQSCD),CL15'Quiesced       '
         DC    X'00',CL15'unknown        '
PATH1031 TM    AMDPSTA2,*-*            check properties
PATH1030 DS    0H
         IC    R15,0(,R1)              pick up TM mask
         EX    R15,PATH1031            test status
         BO    PATH1035                jump if on
         LA    R1,16(,R1)              Skip entry
         CLI   0(R1),0                 end of table?
         BNE   PATH1030                not yet, loop
PATH1035 DS    0H
         STRING 10X,'Status: ',(1(R1),15,T),INTO=LINE
         TM    AMDPFLAG,AMDPREST       Restarting
         BZ    PATH1040                no
         CLC   AMDPONME,BLANKS         remote system here
         BNE   PATH1040                yes
         CLC   AMDPODEV,BLANKS         remote device here
         BNE   PATH1040                yes
         STRING (LINE,,T),' (Unconnected)',INTO=LINE
PATH1040 DS    0H
         BAL   R14,SPACE1              single space
         STRING 10X,'Path retry limit: ',                              X
               (AMDPMRET,F,L),                                         X
               '  Current path retry count: ',(AMDP#RET,F,L),          X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Cumulative number of restarts: ',(AMDP#RST,F,L),  X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Path max message limit: ',                        X
               (AMDPMXMS,F,L),                                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware type CF (type 2)
         BE    PATH1050                yes
         STRING 10X,'Current number of 1K blocks of message buffer spacX
               e in use: ',(AMDP#USE,F,L),                             X
               INTO=LINE
         BAL   R14,SPACE1              single space
         TM    AMDPDIR,AMDPINB         Inbound path?
         BO    PATH1045                yes
         STRING 10X,'Total number of signals sent: ',(AMDP#SIG,F,L),   X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Current number of signals pending transfer: ',    X
               (AMDP#ACT,F,L),                                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of signal requests satisfied while path notX
                busy: ',                                               X
               (AMDP#SUS,F,L),                                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of signal requests satisfied by this path wX
               hile busy: ',(AMDP#APP,F,L),                            X
               INTO=LINE
         BAL   R14,SPACE1              single space
         B     PATH1050
PATH1045 DS    0H
         STRING 10X,'Number of times max message limit reached: ',     X
               (AMDP#IBR,F,L),                                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
PATH1050 DS    0H
         TM    AMDPDIR,AMDPOUTB        outbound path?
         BZ    PATH1055                no
         STRING 10X,'Transport Class name: ',AMDPTCN,INTO=LINE
         BAL   R14,SPACE1              single space
PATH1055 DS    0H
         CLC   AMDPPHDT,=A(AMHDTSTR)   Hardware type lower than 2
         BL    PATH1060                yes
         CLC   AMDPPHDT,=A(AMHDTLST)   Hardware type greater than 3
         BH    PATH1060                yes
         LA    R6,AMDPPHDD             Path hardware descriptor
         USING AMSTRHDD,R6
         STRING 10X,'Structure name: ',AMSTRNAM,                       X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of lists that remain available for use: ', X
               (AMSTR#AV,F,L),                                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of other systems connected to this structurX
               e: ',(AMSTR#OD,F,L),                                    X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of list signalling paths started by this syX
               stem: ',(AMSTR#LP,F,L),                                 X
               INTO=LINE
         BAL   R14,SPACE1              single space
         DROP  R6
PATH1060 DS    0H
         BAL   R14,BLANK1              double space
         AH    R4,AMDPLENT             skip this entry
         BCT   R5,PATH1005
         B     PATH2000
         DROP  R4
PATH1098 DS    0H
         STRING 10X,'No path data',INTO=LINE
         BAL   R14,SPACE2              double space
PATH2000 DS    0H
         ICM   R5,B'1111',AMDA#MPE     Any pending messages?
         BZ    PATH2098                no
         L     R4,AMDAOMPE             Offset to pending messages
         AR    R4,R3                   Start of Path entries
         USING AMDMPEND,R4             Pending messages entry
         STRING '  Pending message data:',INTO=LINE
         BAL   R14,SPACE2              double space
PATH2010 DS    0H
*#SNAP ADDR=AMDMPEND,LENGTH=AMDMPEND_LEN
         STRING '    Device: ',AMDMDEVN,INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Member token of message sending message: ',       X
               (AMDMTOKN,,X),INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'ASID of member sending message: ',                X
               (AMDMASID,H,L),1X,      ASID (decimal)                  X
               (AMDMASID,,X),          ASID (hex)                      X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Home ASID that initiated message out request: ',  X
               (AMDMHOME,H,L),1X,      ASID (decimal)                  X
               (AMDMHOME,,X),          ASID (hex)                      X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Name of system that is target of message: ',      X
               AMDMTSNM,                                               X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Name of transport class: ',                       X
               AMDMTCN,                                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
         CLC   AMDMPHDT,=A(AMHDTNA)    Hardware type - n/a
         BE    PATH2040                yes
         LA    R6,AMDMPHDD             Path hardware descriptor
         CLC   AMDMPHDT,=A(AMHDTCTC)   Hardware type CTC
         BE    PATH2020                yes
         CLC   AMDMPHDT,=A(AMHDTSTR)   Hardware type CF
         BE    PATH2030                yes
         CLC   AMDMPHDT,=A(AMHDTLST)   Hardware type list w/n CF
         BE    PATH2030                yes
PATH2020 DS    0H
         USING AMCTCHDD,R6
         STRING 10X,'Device type: CTC  Address: ',AMCTCDEV,INTO=LINE
         BAL   R14,SPACE1               single space
         B     PATH2040
         DROP  R6
PATH2030 DS    0H
         USING AMSTRHDD,R6
         STRING 10X,'Structure name: ',AMSTRNAM,                       X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of lists that remain available for use: ', X
               (AMSTR#AV,F,L),                                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of other systems connected to this structurX
               e: ',(AMSTR#AV,F,L),                                    X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'Number of list signalling paths started by this syX
               stem: ',(AMSTR#LP,F,L),                                 X
               INTO=LINE
         BAL   R14,SPACE1              single space
         DROP  R6
PATH2040 DS    0H
         BAL   R14,BLANK1              double space
         AH    R4,AMDMLENT             skip this entry
         BCT   R5,PATH2010
         B     PATH3000
         DROP  R4
PATH2098 DS    0H
         STRING 10X,'No pending messages',INTO=LINE
         BAL   R14,SPACE2              Double space
PATH3000 DS    0H
         ICM   R5,B'1111',AMDA#SYS     Any system entries?
         BZ    PATH3030                no
         L     R4,AMDAOSYS             Offset to system entries
         AR    R4,R3                   Start to system entries
         USING AMDSYS,R4               System entry
         STRING '  System entries data:',INTO=LINE
         BAL   R14,SPACE2              double space
PATH3005 DS     0H
*#SNAP ADDR=AMDSYS,LENGTH=AMDSYS_LEN
         LA    R1,=CL8'Inbound '
         TM    AMDSYDIR,AMDSYIN        Inbound
         BO    PATH3010                yes
         LA    R1,=CL8'Outbound'
         TM    AMDSYDIR,AMDSYOUT       Outbound
         BO    PATH3010                yes
         LA    R1,=CL8'Local   '
         TM    AMDSYDIR,AMDSYLCL       Local
         BO    PATH3010                yes
         LA    R1,=CL8'unknown '
PATH3010 DS    0H
         STRING 4X,((R1),8),'  System name: ',AMDSYNME,INTO=LINE
         BAL   R14,SPACE1              single space
         TM    AMDSYDIR,AMDSYIN        Inbound
         BO    PATH3015                yes
         STRING 10X,'Transport class: ',AMDSYTCN,                      X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'* The following counts refer to this transport claX
               ss',INTO=LINE
         BAL   R14,SPACE1              single space
PATH3015 DS    0H
         TM    AMDSYDIR,AMDSYLCL       Local
         BO    PATH3020               yes
         STRING 10X,(AMDSYPTH,F,L),                                    X
               ' - Current number of paths in service',                X
               INTO=LINE
         BAL   R14,SPACE1             single space
         STRING 10X,(AMDSYNOP,F,L),                                    X
               ' - Number of times a no path condition occured',       X
               INTO=LINE
         BAL   R14,SPACE1             single space
PATH3020 DS    0H                     outbound
         STRING 10X,(AMDSYBSY,F,L),                                    X
               ' - Number of times a no buffer condition occured',     X
               INTO=LINE
         BAL   R14,SPACE1             single space
         STRING 10X,(AMDSYMXB,F,L),                                    X
               ' - Max number of 1K blocks of message buffer space permx
               itted for system',                                      X
               INTO=LINE
         BAL   R14,SPACE1             single space
         STRING 10X,(AMDSYUSE,F,L),                                    X
               ' - Current number of 1K blocks of message buffer space X
               in use on system',                                      X
               INTO=LINE
         BAL   R14,SPACE1             single space
         STRING 10X,(AMDSYSMX,F,L),                                    X
               ' - Customer defined maxmsg value. Default number of 1K x
               blocks of message buffer space',                        X
               INTO=LINE
         BAL   R14,SPACE1             single space
         TM    AMDSYDIR,AMDSYIN        Inbound
         BO    PATH3025                yes
         STRING 10X,(AMDSYTCL,F,L),                                    X
               ' - Length of longest message that fits the buffer size'X
               ,INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,'* The following values may wrap',INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,(AMDSYBIG,F,L),                                    X
               ' - Messages sent whose length exceeded the bufer size (X
               trans class)',                                          X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,(AMDSYFIT,F,L),                                    X
               ' - Number of messages sent whose length fit the buffer X
               size',                                                  X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,(AMDSYSML,F,L),                                    X
               ' - Number of messages sent whose length was smaller thaX
               n buffer size',                                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING 10X,(AMDSYOVR,F,L),                                    X
               ' - Messages sent whose length exceeded the bufer size (X
               signal service)',                                       X
               INTO=LINE
         BAL   R14,SPACE1              single space
PATH3025 DS    0H
         BAL   R14,BLANK1              double space
         AH    R4,AMDSYLEN             skip this entry
         BCT   R5,PATH3005
         B     PATH4000
         DROP  R4
PATH3030 DS    0H
         STRING 10X,'No system entries',INTO=LINE
         BAL   R14,SPACE2              Double space
PATH4000 DS    0H
         ICM   R5,B'1111',AMDA#SD      Any source/destinations?
         BZ    PATH4098                no
         L     R4,AMDAOSD              Offset to source/destination
         AR    R4,R3                   Start of source/destination data
         USING AMDSD,R4                source/destination data entries
         STRING '  Source/destination data:',INTO=LINE
         BAL   R14,SPACE2              double space
         STRING 6X,'System      Group       Member              SignalsX
                   Signals',                                           X
               INTO=LINE                                        +JM0199
         BAL   R14,SPACE1              single space
         STRING 6X,'name        name        name                   SentX
                  Received',                                           X
               INTO=LINE                                        +JM0199
         BAL   R14,SPACE1              single space             +JM0199
PATH4010 DS     0H                                              +JM0199
         STRING 6X,AMDSSNAM,                                           X
               4X,AMDSGRP,                                             X
               4X,AMDSMEM,                                             X
               4X,(AMDSSCNT,F),                                        X
               4X,(AMDSRCNT,F),                                        X
               INTO=LINE                                        +JM0199
         BAL   R14,SPACE1              single space             +JM0199
         AH    R4,AMDSLENT             skip this entry          +JM0199
         BCT   R5,PATH4010                                      +JM0199
         BAL   R14,BLANK1              blank line               +JM0199
         B     PATH9000                                         +JM0199
         DROP  R4                                               +JM0199
PATH4098 DS    0H
         STRING 10X,'No source/destination entries',INTO=LINE
         BAL   R14,SPACE2              double space
PATH9000 DS    0H
         LM    R1,R2,WLM_AREA          load addr and length
         LTR   R1,R1                   did we do a getmain
         BZ    PATH99                  no
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    PATH9010                yes, jump
         LR    R4,R2                   save length
         SR    R2,R2                   clear for modset
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0
         FREEMAIN RU,LV=(R4),A=(R1)    free IXCM work area
         MODESET KEYREG=(2)            switch back to own key
         B     PATH99
PATH9010 DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES Free IXCM work area
         B     PATH99
PATH9020 DS    0H
         STRING '  IXCMG-1 FAILED - ',                                 X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(AMDATLEN,F,L),                                X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
         B     PATH99
PATH9030 DS    0H
         STRING '  IXCMG-2 FAILED - ',                                 X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(AMDATLEN,F,L),                                X
               INTO=LINE
         BAL   R14,SPACE2              double space
         B    PATH99
.PATH99  ANOP
PATH99   END_PROC
         TITLE 'SHOWMVS &REL - Coupling Facility Data'             +DL
*---------------------------------------------------------------------*
*                                                                  +DL*
*Coupling Facility Data                                            +DL*
*                                                                  +DL*
*   CFLevel supported by operating system: 4                       +DL*
*                                                                  +DL*
*   CFRM active policy data                                        +DL*
*                                                                  +DL*
*      Policy Name                : CFRMPOL0                       +DL*
*      Time of last update        : 1998-06-25   10.02.22          +DL*
*      Time policy was activated                                   +DL*
*         via operator command    : 1998-06-25   10.16.50          +DL*
*                                                                  +DL*
*   CFName: CFT101                                                 +DL*
*      Coupling Facility          : 009672.A10.HTC.01.000000000133 +DL*
*                                   Partition: 8      CPCID: 00    +DL*
*                                   Storage is volatile/nonvolatile+DL*
*      CF architected functional                                   +DL*
*         level                   : 2                              +DL*
*                                                                  +DL*
*      CF devices       CU number : 0FFA                           +DL*
*                   Device number : 0FEE                           +DL*
*                   Device number : 0FEF                           +DL*
*                                                                  +DL*
*      Total facility space size  : 59392 k                        +DL*
*      Total free space size      : 50176 k                        +DL*
*      Total dumping space size   : 4096 k                         +DL*
*      Storage increment size     : 256 k                          +DL*
*                                                                  +DL*
*      Structures                                                  +DL*
*                                                                  +DL*
*      StructureName     Type   Status    Size(k)  Max Size(k)  Min Si*
*                                                                     *
*      ISTGENERIC        List   Active      1024        2048         5*
*      DSNDB2M_GBP0      Cache  Rebuild     2048        3072         5*
*                                                                  +DL*
*---------------------------------------------------------------------*
CFD00    BEGIN_PROC KW=CFD,AUTH=YES                                +DL
         AIF   (NOT D'CVTH5520).CFD99                              +DL
         TM    HBB5520,L'HBB5520       running on ESA 520?         +DL
         BNO   CFD99                   no, quit                    +DL
         STRING 'Coupling Facility Data',INTO=LINE                 +DL
         BAL   R14,SPACE2              Double Space                +DL
         IXCQUERY REQINFO=COUPLE,CFLEVEL=XCFLEVEL                  +DL
         STRING '   CFLevel supported by operating system: ',      +DL X
               (XCFLEVEL,F,L),INTO=LINE                            +DL
         BAL   R14,SPACE2              Double Space                +DL
*        Allocate a work area for QUAHDR + QUACF                   +DL
         LA    R2,QUAHLENG+(QUAHLENG*32) Length of Anwer-Area
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +DL
         BO    CFD01                   yes, jump                   +DL
         GETMAIN RU,LV=(R2)                                        +DL
         B     CFD02                                               +DL
CFD01    DS    0H                                                  +DL
         LR    R0,R2                   Length of storage           +DL
         LA    R1,1                    LOC=ANY                     +DL
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES                +DL
CFD02    DS    0H                                                  +DL
         STM   R1,R2,QUACF_AREA        addr, length                +DL
         LR    R3,R1                   remember getmained storage  +DL
         USING QUAHDR,R3               tell assembly               +DL
         IXCQUERY REQINFO=CF,CFNAME=NO_CFNAME,                     +DL X
               ANSAREA=QUAHDR,ANSLEN=QUCF_LEN,                     +DL X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +DL
         CH    R0,=Y(QUAARSNNOCFRMDSN) No CFRM                     +XX
         BE    CFD97                   No                          +XX
*        LTR   R15,R15                 Success?                    +DL
*        BNZ   CFD90                   No, error                   +DL
*                                                                  +DL
         L     R4,QUAH#REC             number of QUACFs            +DL
         LTR   R4,R4                   is there a CF record        +DL
         BNZ   CFD05                   yes, skip                   +DL
         STRING '   No Coupling Facility entries were provided',   +DL X
               INTO=LINE                                           +DL
         B     CFD95                   nothing to do               +DL
CFD05    DS    0H                                                  +DL
         L     R4,QUAHSGOF             offset from QUAHDR to 1. REC+DL
         LA    R4,QUAHDR(R4)           point to first CF record    +DL
         USING QUACF,R4                tell assembly               +DL
         L     R2,QUAH#REC             record counter              +DL
         STRING '   CFRM active policy data',INTO=LINE             +DL
         BAL   R14,SPACE2              Double Space                +DL
         STRING '      Policy Name                : ',QUACFPOLNAME,    X
               INTO=LINE                                           +DL
         BAL   R14,SPACE1              Single Space                +DL
         LA    R1,QUACFUPDTIME         pass TOD clock value        +DL
         BAL   R14,STCKCONV            convert TOD clock to decimal+DL
         STRING '      Time of last update        : ',             +DL X
               STCKDATE,2X,            YYYY-MM-DD                  +DL X
               (STCKTIME,8),           HH.MM.SS                    +DL X
               INTO=LINE                                           +DL
         BAL   R14,SPACE1              Single Space                +DL
         STRING '      Time policy was activated   ',INTO=LINE     +DL
         BAL   R14,SPACE1              Single Space                +DL
         LA    R1,QUACFSETTIME         pass TOD clock value        +DL
         BAL   R14,STCKCONV            convert TOD clock to decimal+DL
         STRING '         via operator command    : ',                 X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE                                           +DL
         BAL   R14,SPACE2              Double Space                +DL
*loop                                  Loop through the CFs        +DL
CFD10    DS    0H                                                  +DL
         BAL   R14,WORKADDR            allocate XES Answer Area    +DL
         STM   R0,R1,WKCELL1           store length                +DL
         LR    R5,R1                   remember getmained storage  +DL
         USING IXLYAMDAREA,R5          tell assembly               +DL
         IXLMG DATAAREA=IXLYAMDAREA,DATALEN=WKCELL1,                   X
               CFNAME=QUACFNAME,HWSTATISTICS=YES,                      X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXLMGWK)    +DL
         LTR   R15,R15                 Success?                    +DL
         BNZ   CFD93                   No, error                   +DL
*
         STRING '   CFName: ',QUACFNAME,INTO=LINE               +DL0199
         BAL   R14,SPACE1              Single Space             +DL0199
         ICM   R6,B'1111',IXLYAMDAREA_CFENT@
         BNZ   CFD12     zero, if not connected from this system+DL0199
         USING IXLYAMDCF,R6            tell assembly               +DL
&X SETC 'The running system is not connected to this coupling facility'
         STRING 12X,'&X',INTO=LINE
         BAL   R14,SPACE2              Double Space             +DL0199
         B     CFD50                   try next entry           +DL0199
CFD12    DS    0H                                               +DL0199
         LA    R7,IXLYAMDCF_ND         addr of Hardware Node Descr.+DL
         USING NDE,R7                  tell assembly               +DL
         STRING '      Coupling Facility          : ',             +DL X
               NDETYPE,'.',NDEMODEL,'.',NDEMFG,'.',                +DL X
               NDEPLANT,'.',NDESEQUENCE,                           +DL X
               INTO=LINE                                           +DL
         BAL   R14,SPACE1              Single Space                +DL
         STRING 35X,'Partition: ',(NDEPARTITION,FL1,L),            +DL X
               6X,'CPCID: ',(NDECPCID,1,X),INTO=LINE               +DL
         BAL   R14,SPACE1              Single Space                +DL
         STRING 35X,'Storage is volatile ',INTO=LINE               +DL
         TM    IXLYAMDCF_FLAGS,IXLYAMDCF_VOLATILE volatile storage?+DL
         BO    CFD15                   yes, skip                   +DL
         STRING 'nonvolatile',INTO=LINE_CF_NV                      +DL
LINE_CF_NV    EQU LINE+46,11           nonvolatile storage         +DL
LINE_STR_TTY  EQU LINE+24,5            Structure Type              +DL
LINE_STR_STAT EQU LINE+31,7            Structure Status            +DL
LINE_STR_SIZE EQU LINE+40,7            Structure Size              +DL
LINE_STR_MXSZ EQU LINE+52,7            Structure Max Size          +DL
LINE_STR_MISZ EQU LINE+65,7            Structure Min Size          +DL
CFD15    DS    0H                                                  +DL
         BAL   R14,SPACE1              Single Space                +DL
         DROP  R7                                                  +DL
         STRING '      CF architected functional',INTO=LINE        +DL
         BAL   R14,SPACE1              Single Space                +DL
         STRING '         level                   : ',             +DL X
               (IXLYAMDCF_CFLEVEL,F,L),INTO=LINE                   +DL
         BAL   R14,SPACE2              Double Space                +DL
         STRING '      CF devices       CU number : ',             +DL X
               (IXLYAMDCF_CUID,2,X),INTO=LINE                      +DL
         L     R7,IXLYAMDCF_SC@        addr of first subchannel ent+DL
*loop                                  Loop through the SCs        +DL
CFD20    DS    0H                                                  +DL
         LTR   R7,R7                   is there a SC entry?        +DL
         BZ    CFD25                   no, skip                    +DL
         BAL   R14,SPACE1              Single Space                +DL
         USING IXLYAMDSC,R7                                        +DL
         STRING 19X,'Device number : ',(IXLYAMDSC_SCDEVICE,2,X),       X
               INTO=LINE
         L     R7,IXLYAMDSC_SCNEXT     addr of next STR entry      +DL
         B     CFD20                                               +DL
*endloop                               Loop through the SCs        +DL
         DROP  R7                                                  +DL
CFD25    DS    0H                                                  +DL
         BAL   R14,BLANK1              Double Space                +JM
         L     R1,IXLYAMDCF_TS         number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Total facility space size  : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BAL   R14,SPACE1              Single Space                +DL
         L     R1,IXLYAMDCF_FS         number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Total free space size      : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BAL   R14,SPACE1              Single Space                +DL
         L     R1,IXLYAMDCF_TDS        number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Total dumping space size   : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BAL   R14,SPACE1              Single Space                +DL
         XR    R1,R1                                               +DL
         LH    R1,IXLYAMDCF_STGI       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING '      Storage increment size     : ',             +DL X
               ((R1),,L),' k',INTO=LINE                            +DL
         BAL   R14,SPACE2              Double Space                +DL
         STRING 6X,'Structures',INTO=LINE                          +DL
         BAL   R14,SPACE2              Double Space                +DL
         L     R7,IXLYAMDCF_STR@       addr of first structure entr+DL
         STRING 6X,'StructureName     Type   Status    Size(k)  Max ', X
               'Size(k)  Min Size(k)',INTO=LINE                    +DL
         BAL   R14,SPACE2              Single Space                +DL
*loop                                  Loop through the STRs       +DL
CFD30    DS    0H
*        DROP  R7                                                  +JM
         LTR   R7,R7                   is there a STR entry?       +DL
         BZ    CFD50                   no, skip                    +DL
         CLI   0(R7),X'21'             list/lock structure?        +DL
         BE    CFD35                   yes                         +DL
         CLI   0(R7),X'22'             cache structure?            +DL
         BE    CFD40                   yes                         +DL
         STRING 6X,'Unknown CF Structure Type : ',((R7),1,X),      +DL X
               INTO=LINE                                           +DL
         BAL   R14,SPACE1              Single Space                +DL
CFD35    DS    0H
* list/lock structure                                              +DL
         USING IXLYAMDSTRL,R7                                      +DL
         STRING 6X,IXLYAMDSTRL_STRNAME,INTO=LINE                   +DL
         STRING 'List ',INTO=LINE_STR_TTY                          +DL
         CLI   IXLYAMDSTRL_TTY,IXLYAMDA_LIST list structure?       +DL
         BE    CFD36                   yes, skip                   +DL
         STRING 'Lock ',INTO=LINE_STR_TTY                          +DL
CFD36    DS    0H                                                  +DL
         STRING 'Active ',INTO=LINE_STR_STAT                       +DL
         AIF   (NOT D'CVTH6603).CFD37
         TM    IXLYAMDSTRL_TTY_STATUS,IXLYAMDSTRL_RBLDVALID        +DL
         BNO   CFD37                   STR rebuild indicat. not valid
         TM    IXLYAMDSTRL_RBLDSTATUS,IXLYAMDSTRL_STRINREBLD       +DL
         BNO   CFD37                   STR not in rebuild          +DL
         STRING 'Rebuild',INTO=LINE_STR_STAT                       +DL
CFD37    DS    0H                                                  +DL
.CFD37   ANOP
         L     R1,IXLYAMDSTRL_SS       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_SIZE                       +DL
         L     R1,IXLYAMDSTRL_MSS      number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MXSZ                       +DL
         L     R1,IXLYAMDSTRL_MINSS    number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MISZ                       +DL
         BAL   R14,SPACE1              Single Space                +DL
         L     R7,IXLYAMDSTRL_STRNEXT  addr of next STR entry      +DL
         B     CFD30                                               +DL
CFD40    DS    0H                                                  +DL
* cache structure                                                  +DL
         USING IXLYAMDSTRC,R7                                      +DL
         STRING 6X,IXLYAMDSTRC_STRNAME,INTO=LINE                   +DL
         STRING 'Cache',INTO=LINE_STR_TTY                          +DL
         STRING 'Active ',INTO=LINE_STR_STAT                       +DL
         AIF   (NOT D'CVTH6603).CFD47
         TM    IXLYAMDSTRC_TTY_STATUS,IXLYAMDSTRC_RBLDVALID        +DL
         BNO   CFD47                   STR rebuild indicat. not valid
         TM    IXLYAMDSTRC_RBLDSTATUS,IXLYAMDSTRC_STRINREBLD       +DL
         BNO   CFD47                   STR not in rebuild          +DL
         STRING 'Rebuild',INTO=LINE_STR_STAT                       +DL
CFD47    DS    0H                                                  +DL
.CFD47   ANOP
         L     R1,IXLYAMDSTRC_SS       number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_SIZE                       +DL
         L     R1,IXLYAMDSTRC_MSS      number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MXSZ                       +DL
         L     R1,IXLYAMDSTRC_MINSS    number of 4k blocks         +DL
         SLL   R1,2                    multiply by 4               +DL
         STRING ((R1),,R),INTO=LINE_STR_MISZ                       +DL
         BAL   R14,SPACE1              Single Space                +DL
         L     R7,IXLYAMDSTRC_STRNEXT  addr of next STR entry      +DL
         B     CFD30                                               +DL
*endloop                               Loop through the STRs       +DL
CFD50    DS    0H                                                  +DL
         BAL   R14,BLANK1              Double Space                +JM
         LA    R4,QUACFLENG(R4)        next entry                  +DL
         BCT   R2,CFD10                do until count = 0          +DL
         B     CFD97                                               +JM
*endloop                               Loop through the CFs        +DL
CFD90    STRING '  IXCQUERY FAILED - ',                            +DL X
               ' Returncode=',(LRETCODE,F,L),                      +DL X
               ' Reasoncode=',(LRSNCODE,F,L),                      +DL X
               ' Size=',(WKCELL1,F,L),                             +DL X
               INTO=LINE                                           +DL
         B     CFD95                                               +DL
CFD93    STRING '  IXLMG    FAILED - ',                            +DL X
               ' Returncode=',(LRETCODE,F,L),                      +DL X
               ' Reasoncode=',(LRSNCODE,F,L),                      +DL X
               ' Size=',(WKCELL1,F,L),                             +DL X
               INTO=LINE                                           +DL
CFD95    DS    0H                                                  +DL
         BAL   R14,SPACE2              Double Space                +XX
CFD97    DS    0H                                                  +XX
*        Free work area for QUAHDR + QUACF                         +DL
         LM    R1,R2,QUACF_AREA        addr,length                 +DL
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?                   +DL
         BO    CFD98                   yes, jump                   +DL
         FREEMAIN RU,LV=(R2),A=(R1)    free work area              +DL
         B     CFD99                                               +DL
CFD98    DS    0H                                                  +DL
         LR    R0,R2                   length for FREEMAIN         +DL
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES Free work area +DL
         B     CFD99                                               +DL
.CFD99   ANOP                                                      +DL
CFD99    END_PROC                                                  +DL
         TITLE 'SHOWMVS &REL - External Timer information'
*---------------------------------------------------------------------*
*                                                                     *
*External Time Reference (ETR) Data:                                  *
*                                                                     *
*  Synchronization Mode: ETR                                          *
*                                                                     *
*  Time of last update: 1998-11-15  20.18.05                          *
*                                                                     *
*  Port Information:                                                  *
*                                                                     *
*    The active port is tuned                                         *
*                                                                     *
*    ETR attached to a High Availability Configuration                *
*                                                                     *
*  CPC port 0: Operational  Enabled  Active                           *
*              Net id: 00  ETR id: 00  ETR Port: 04                   *
*                                                                     *
*  CPC port 1: Operational  Enabled                                   *
*              Net id: 00  ETR id: 01  ETR Port: 04                   *
*                                                                     *
*---------------------------------------------------------------------*
ETR00    BEGIN_PROC KW=ETR                                        +JWM
         AIF   (NOT D'CVTH6603).ETR99
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?
         BZ    ETR99                   no, exit
         LA    R5,TENWORDS             output area
         USING ETRI,R5
         ST    R5,WKCELL1
         IEAMETR OUTADDR=WKCELL1,MF=(E,ETRAREA,COMPLETE)
* 00     ETR status and port data was successfully obtained.
* 04     ETR status information is available, but port data is not.
* 08     No status or port data is available.
* 0C     The parameter list is not in the user's primary address space.
         CH    R15,=H'08'              Bad param list?
         BH    ETR99                   Yes
         ST    R15,WKCELL1             Save for later
         STRING 'External Time Reference (ETR) Data:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Synchronization Mode:',INTO=LINE
         LA    R4,LINE+1(R15)
         TM    ETRIIMAGE,ETRIETR       ETR mode?
         BZ    ETR01                   No.
         STRING (LINE,,T),' ETR',INTO=LINE
         B     ETR04
ETR01    DS    0H
         TM    ETRIIMAGE,ETRILOCAL     LOCAL
         BZ    ETR02                   No.
         STRING (LINE,,T),' LOCAL',INTO=LINE
         B     ETR04
ETR02    DS    0H
         TM    ETRIIMAGE,ETRISIMETR    SIMETR?
         BZ    ETR04                   No.
         STRING (LINE,,T),' SIMETR',INTO=LINE
ETR03    DS    0H
         TM    ETRIIMAGE,ETRINOTINSTALLED ETR installed?
         BZ    ETR04                   No.
         STRING (LINE,,T),' ETR not installed',INTO=LINE
ETR04    DS    0H
         BAL   R14,SPACE2              Double Space
         TM    ETRIIMAGE,ETRINOTINSTALLED ETR installed?
         BO    ETR99                   No.
         CLC   WKCELL1,=F'8'           Port info?
         BE    ETR10                   no
         TM    ETRIIMAGE,ETRISIMETR    SIMETR?
         BZ    ETR20                   No
         STRING '    SIMETR port id: ',(ETRISIMETRID,,X),INTO=LINE
         BAL   R14,SPACE2              Double space
         B     ETR20
ETR10    DS    0H
         STRING '  No status or port data is available',INTO=LINE
         BAL   R14,SPACE2              Double space
ETR20    DS    0H
         LA    R1,ETRITMSTMP           pass TOD clock value
         BAL   R14,STCKCONV            convert TOD clock to decimal
         STRING '  Time of last update: ',                             X
               STCKDATE,2X,            YYYY-MM-DD                      X
               (STCKTIME,8),           HH.MM.SS                        X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         CLC   WKCELL1,=F'4'           Port info?
         BH    ETR40
         STRING '  Port Information:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         TM    ETRIIMAGE,ETRITUNED     Tuned port
         BZ    ETR30                   No
         STRING '    The active port is tuned',INTO=LINE
         BAL   R14,SPACE2              Double space
ETR30    DS    0H
         TM    ETRIIMAGE,ETRICPLD      High Ava Config
         BZ    ETR40                   No
         STRING '    ETR attached to a High Availability Configuration'X
               ,INTO=LINE
         BAL   R14,SPACE2              Double space
ETR40    DS    0H
         STRING '  CPC port 0: ',INTO=LINE
         LA    R4,LINE+0(R15)
        #STATUS ETRIP0FLAGS,ETRIP0OPER,'Operational '
        #STATUS ETRIP0FLAGS,ETRIP0ENABLED,'Enabled '
        #STATUS ETRIP0FLAGS,ETRIP0ACTIVE,'Active'
         BAL   R14,SPACE1              Single Space
         STRING 14X,'Net id: ',(ETRIP0NETID,,X),                       X
               '  ETR id: ',(ETRIP0ETRID,,X),                          X
               '  ETR Port: ',(ETRIP0PORTN0,,X),INTO=LINE
         BAL   R14,SPACE2              Double space
         STRING '  CPC port 1: ',INTO=LINE
         LA    R4,LINE+0(R15)
        #STATUS ETRIP1FLAGS,ETRIP0OPER,'Operational '
        #STATUS ETRIP1FLAGS,ETRIP0ENABLED,'Enabled '
        #STATUS ETRIP1FLAGS,ETRIP0ACTIVE,'Active '
         BAL   R14,SPACE1              Single space
         STRING 14X,'Net id: ',(ETRIP1NETID,,X),                       X
               '  ETR id: ',(ETRIP1ETRID,,X),                          X
               '  ETR Port: ',(ETRIP1PORTN0,,X),INTO=LINE
         BAL   R14,SPACE2              Double space
.ETR99   ANOP
ETR99    END_PROC
         TITLE 'SHOWMVS &REL - Resource Manager Data (SRM)'
*---------------------------------------------------------------------*
*                                                                     *
*Resource Manager Data:                                               *
*                                                                     *
*  IPS: 00        ICS: 00        OPT: 00      SELTAPE: NEXT           *
*  CPU: 10.0      IOC: 10.0      SRB: 10.0        MSO:  3.0000        *
*                                                                     *
*     DMN   MIN   MAX   CMPL    RUA    INC    NSW   OUTU   TWSR   CIDX*
*                                                                     *
*      0    999   999      4     64      0      4      0    397   9999*
*      1     30    30      0      0      0      0      0      0      0*
*                                                                     *
*---------------------------------------------------------------------*
SRM00    BEGIN_PROC KW=SRM
         AIF   (NOT D'CVTH5510).SRM10
         LA    R3,BLANKS               dummy work area
         TM    HBB5510,L'HBB5510       running on ESA 510?
         BNO   SRM10                   no, jump
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   SRM10                   no, jump
         STRING 'Workload Manager Data:',INTO=LINE                 @522
         BAL   R14,SPACE2              BLANK LINE                  @522
         LA    R3,WORK256              get address of work area    @522
         USING SRMSTAT,R3              Establish addressability    @522
         PGSER R,FIX,A=SRMSTAT,EA=SRMSTAT,ECB=0                    @522
         LA    R1,SRMSTAT              load addr for SYSEVENT      @522
         LA    R0,SRMSTSIZ             Load real length of SRMSTAT @522
         STH   R0,SRMSTLEN             pass length                 @522
         SYSEVENT REQSRMST             Issue Requ. SRM status SYSEVENT
         PGSER R,FREE,A=SRMSTAT,EA=SRMSTAT                         @522
         TM    SRMSTFLG,SRMSTMDE       If ON - WLM compatibility mode
         BNO   SRM70                   OFF - WLM goal mode         @522
*WLM compatibility mode                                            @522
         STRING '  WLM is running in "COMPATIBILITY" mode',INTO=LINE
         BAL   R14,SPACE2              BLANK LINE                  @522
.SRM10   ANOP
SRM10    EQU   *
         L     R2,CVTOPCTP             RESOURCE MANAGER CONTROL TABLE
         USING RMCT,R2
         L     R5,RMCTRMPT             SRM PARAMETER TABLE
         USING RMPT,R5
         L     R6,RMCTICST             SRM ICS TABLE
         USING ICST,R6
         CLI   RMCTICST,X'7F'          goal mode?
         BNE   *+8                     no, jump
         LA    R6,BLANKS               no ICS table
         L     R7,RMCTWMST             SRM WORKLOAD MANAGER TABLE
         USING WMST,R7
         STRING 'Resource Manager Data:',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
         BAL   R1,SRM20
         DC    AL1(RMCTSLTN),C'NEXT  '
         DC    AL1(RMCTSLTR),C'RANDOM'
         DC    AL1(RMCTSLTL),C'LAST  '
         DC    AL1(RMCTSLTF),C'FIRST '
         DC    AL1(00000000),C'????? ',0H'0'
SRM20    BAL   R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+6)               0  LENGTH OF A TABLE ENTRY
         TM    RMCTTAPE,*-*         2  TEST SELTAPE OPTION
         STRING '  IPS: ',WMSTID,      IEAIPSXX                        X
               '        ICS: ',ICSTID, IEAICSXX                        X
               '        OPT: ',RMPTOPTN, IEAOPTXX                      X
               '      SELTAPE: ',(1(R1),6),                            X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage
         BAL   R14,SPACE1          <== next line
*
SRM26    STRING '  CPU: ',WMSTIPC,     CPU SERVICE COEFFICIENT         X
               '      IOC: ',WMSTIPI,  I/O SERVICE COEFFICIENT         X
               '      SRB: ',WMSTIPB,  SRB SERVICE COEFFICIENT         X
               '        MSO: ',WMSTIPM, MSO SERVICE COEFFICIENT        X
               INTO=LINE
         TM    HBB5510,L'HBB5510       running on ESA 510?
         BO    SRM26X                  yes, jump
         STRING '  CPU: ',WMSTIPC3,    CPU SERVICE COEFFICIENT         X
               '      IOC: ',WMSTIPI3, I/O SERVICE COEFFICIENT         X
               '      SRB: ',WMSTIPB3, SRB SERVICE COEFFICIENT         X
               '        MSO: ',WMSTIPM3, MSO SERVICE COEFFICIENT       X
               INTO=LINE
         TM    JBB3313,L'JBB3313       running on ESA 313?
         BO    SRM26X                  yes, jump
         STRING '  CPU: ',WMSTIPC3,    CPU SERVICE COEFFICIENT         X
               '      IOC: ',WMSTIPI3, I/O SERVICE COEFFICIENT         X
               '      SRB: ',WMSTIPB3, SRB SERVICE COEFFICIENT         X
               '        MSO: ',WMSTIPM2, MSO SERVICE COEFFICIENT       X
               INTO=LINE
SRM26X   BAL   R14,SPACE2              Double Space
*
*        Check for WLM mode (5.1)
*
         TM    RMCTFLGS,RMCTWLM        WLM mode?
         BO    SRM70                   yes, jump
*
*        CALCULATE LENGTH OF A DOMAIN TABLE ENTRY FROM FIRST ENTRY,
*        LAST ENTRY, AND NUMBER OF ENTRIES.   THIS SHOULD WORK IN
*        MVS/XA THROUGH MVS/ESA 4.3 (DMDT LENGTH WAS INCREASED IN
*        MVS/ESA 4.2).
*
         SLR   R0,R0
         L     R1,RMCTDMDE             LAST ENTRY IN DOMAIN TABLE
         SL    R1,RMCTDMDT             LENGTH OF DOMAIN TABLE
         LH    R14,RMCTDMNC            NUMBER OF DOMAINS IN DOMAIN TBLE
         BCTR  R14,0                   MINUS ONE FOR "DR"
         DR    R0,R14                  SIZE OF AN ENTRY IN DOMAIN TABLE
         LH    R6,RMCTDMNC             NUMBER OF DOMAINS IN DOMAIN TBLE
         L     R7,RMCTDMDT             FIRST ENTRY IN DOMAIN TABLE
         USING DMDT,R7
         STRING '     DMN   MIN    MAX   CMPL    RUA    INC    NSW',   X
               '   OUTU   TWSR   CIDX',                                X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*LOOP
SRM30    STRING (DMDTNO,FL1,R7B),(DMDTLO,H,R7B),(DMDTHI,H,R7B),        X
               (DMDTCMPL,H,R7B),(DMDTRUA,H,R7B),(DMDTINCU,H,R7B),      X
               (DMDTNSW,H,R7B),(DMDTOUTU,H,R7B),(DMDTTWSR,F,R7B),      X
               (DMDTCIDX,H,R7B),                                       X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         LA    R7,0(R1,R7)             INCREMENT
         BCT   R6,SRM30
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         B     SRM99
         TITLE 'SHOWMVS &REL - WorkLoad Manager Data'              +JM
*---------------------------------------------------------------------*
*                                                                     *
*Workload Manager Data:                                               *
*                                                                     *
*  WLM is running in "GOAL" mode                                      *
*                                                                     *
*    OPT parmlib member in use: IEAOPT00                              *
*                                                                     *
*    Active service policy name: PROD                                 *
*      Activated by Userid: IBMUSER                                   *
*    Service definition was installed by Userid: IBMUSER              *
*    Service definition was installed on system: D1                   *
*                                                                     *
*---------------------------------------------------------------------*
SRM70    EQU   *
         AIF   (NOT D'CVTH5510).SRM99
         STRING '  WLM is running in "GOAL" mode',INTO=LINE        @522
         BAL   R14,SPACE2              BLANK LINE                  @522
         STRING '    OPT parmlib member in use: ',SRMSTOPT,INTO=LINE
         CLC   =C'--',SRMSTOPT+6       Is an OPT member in use?    @522
         BNE   SRM73                   Yes                         @522
         STRING '    No OPT parmlib member in use',INTO=LINE       @522
SRM73    DS    0H                                                  @522
         BAL   R14,SPACE2          <== double space                @522
         STRING '    Active service policy name: ',SRMSTAPN,INTO=LINE
         BAL   R14,SPACE1          <== next line                   @522
         STRING '    Activated by Userid: ',SRMSTAPU,INTO=LINE     @522
         BAL   R14,SPACE1          <== next line                   @522
         STRING '    Service policy activation was initiated on ',     $
               'system: ',SRMSTAPS,INTO=LINE                       @522
         BAL   R14,SPACE1          <== next line                   @522
         STRING '    Installed service definition name at time of ',   $
               'policy activation: ',SRMSTADN,INTO=LINE            @522
         BAL   R14,SPACE1          <== next line                   @522
         STRING '    Service definition was installed by Userid: ',    $
               SRMSTADU,INTO=LINE                                  @522
         BAL   R14,SPACE1          <== next line                   @522
         STRING '    Service definition was installed on system: ',    $
               SRMSTADS,INTO=LINE                                  @522
         BAL   R14,SPACE2          <== double space                @522
.SRM99   ANOP
SRM99    END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Active WorkLoad Manager Data:                                        *
*                                                                     *
*  Service policy: PROD - Normal Production Policy                    *
*  Activated at: 1997-02-21 07.00.19 by userid: DN02241 on: D1        *
*  Definition extracted from: SYS1  description: SYS1 Definition      *
*             at: 1997-02-21 06.59.45 by userid: DN02241 on: D1       *
*                                                                     *
*  Service coefficients - CPU: 1.00  IOC: 1.00  MSO: 0  SRB: 1.00     *
*                                                                     *
*  Workloads defined: 9                                               *
*                                                                     *
*    ADR       ADR Workload                                           *
*    BATCH     Batch Workload                                         *
*    CICS      CICS Workload                                          *
*    DB2       DB2 Workload                                           *
*    IMS       IMS Workload                                           *
*    ONLINES   Production Online Workload                             *
*    STC       STC Workload                                           *
*    TSO       TSO Workload                                           *
*    SYSTEM    THE SYSTEM WORKLOAD                                    *
*                                                                     *
*    Service classes defined: 19                                      *
*                                                                     *
*      Service class: ADR_MUF   ADR MUF Regions                       *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 25                     *
*                                                                     *
*      Service class: BAT_HOT   Batch - Hot                           *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 20                     *
*                                                                     *
*      Service class: BAT_LOW   Batch - No-priority                   *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  Discretionary                                *
*                                                                     *
*      Service class: BAT_REG   Batch - Default                       *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              5   Execution velocity of 5                      *
*                                                                     *
*      Service class: BAT_WARM  Batch - Warm                          *
*          Associated with workload: BATCH                            *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              4   Execution velocity of 10                     *
*                                                                     *
*      Service class: CICS_REG  CICS Regions                          *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 30                     *
*                                                                     *
*      Service class: CICS_RSP  CICS Regions                          *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   90% Complete within 00.00.05.000             *
*                                                                     *
*      Service class: DB2_REGS  DB2 Regions                           *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 30                     *
*                                                                     *
*      Service class: IMS_CNTL  IMS Control Region                    *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 35                     *
*                                                                     *
*      Service class: IMS_REGS  IMS MSG Regions                       *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 30                     *
*                                                                     *
*      Service class: IMS_RSP   IMS Regions                           *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   90% Complete within 00.00.05.000             *
*                                                                     *
*      Service class: STC_HOT   Started Task - Hot                    *
*          Associated with workload: STC                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              1   Execution velocity of 40                     *
*                                                                     *
*      Service class: STC_REG   Started Task - Default                *
*          Associated with workload: STC                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              3   Execution velocity of 20                     *
*                                                                     *
*      Service class: STC_WARM  Started Task - Warm                   *
*          Associated with workload: STC                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              2   Execution velocity of 25                     *
*                                                                     *
*      Service class: TEST_TRN  Test/Trn Onlines                      *
*          Associated with workload: ONLINES                          *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1              4   Execution velocity of 20                     *
*                                                                     *
*      Service class: TSO       TSO Service Class                     *
*          Associated with workload: TSO                              *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1  1000        2   85% Complete within 00.00.01.000             *
*     2  1900        3   70% Complete within 00.00.05.000             *
*     3              4   Execution velocity of 20                     *
*                                                                     *
*      Service class: SYSTEM    HIGH PRIORITY SYSTEM WORK             *
*          Associated with workload: SYSTEM                           *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  System                                       *
*                                                                     *
*      Service class: SYSSTC    STARTED TASK DEFAULT                  *
*          Associated with workload: SYSTEM                           *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  System                                       *
*                                                                     *
*      Service class: SYSOTHER  UNCLASSIFIED WORK                     *
*          Associated with workload: SYSTEM                           *
*                                                                     *
*     #  Duration   Imp  Goal description                             *
*     -  --------    -   ----------------------------                 *
*     1                  System                                       *
*                                                                     *
*---------------------------------------------------------------------*
WLM00    BEGIN_PROC KW=WLM
         AIF   (NOT D'CVTH5520).WLM99
         TM    HBB5520,L'HBB5520       running on ESA 510?
         BNO   WLM99                   no, jump
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   WLM99                   no, jump
         XC    ANSLEN,ANSLEN           length is zero, for now
*
*        Find out how much storage is needed for the answer area
*
         IWMPQRY MF=(E,IWMPQRY,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN
         CH    R15,=Y(IWMRETCODEWARNING) Warning
         BH    WLM180                  No
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         BNE   WLM180                  no
         L     R2,QUERYLEN             load length of answer area
*
*        Allocate a work area for the WLM PQRY answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    WLM003                  yes, jump
         GETMAIN RU,LV=(R2)            allocate WLM work area
         B     WLM009
WLM003   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
WLM009   DS    0H
         STM   R1,R2,WLM_AREA          save addr and length
         LR    R3,R1                   answer goes here
*
*        Retrieve WLM information
*
         IWMPQRY MF=(E,IWMPQRY,COMPLETE),ANSAREA=(R3),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN
         AIF   (NOT D'CVTJ6604).WLM050 New responsecode V2R4       +RS
         CH    R15,=Y(IWMRETCODEWARNING)                           +RS
         BH    WLM160                                              +RS
         LTR   R0,R0                   default policy?            JWM98
         BE    WLM009X                 yes, jump                  JWM98
         CLM   R0,B'0011',=Y(IWMRSNCODEDEFAULTPOLICY)
         BNE   WLM160                                              +RS
         B     WLM009X                                             +RS
.WLM050  ANOP
         LTR   R15,R15                 did all go well
         BNZ   WLM160                  no
WLM009X  DS    0H                                                  +RS
         STRING 'Active WorkLoad Manager Data:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         USING SVPOLHD,R3              IWMPQRY Answer area
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDPO             Offset to service policy
         USING SVPOLSP,R4              Service policy information
         STRING '  Service policy: ',(SVPOLNSP,,L),' - ',SVPOLDSP,     X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         LA    R1,SVPOLTPA             activation time/date
         BAL   R14,STCKCONV            convert TOD clock to decimal
         STRING '  Activated at: ',STCKDATE,1X,(STCKTIME,8),           X
               ' by userid: ',(SVPOLIPU,,L),' on: ',SVPOLSNA,          X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         LA    R1,SVPOLTDI             service definition time/date
         BAL   R14,STCKCONV            convert TOD clock to decimal
         STRING '  Definition extracted from: ',(SVPOLIDN,,L),2X,      X
               'description: ',(SVPOLIDD,,L),                          X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING 13X,'at: ',STCKDATE,1X,(STCKTIME,8),                   X
               ' by userid: ',(SVPOLIDU,,L),' on: ',SVPOLIDS,          X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
         STRING '  Service coefficients - ',                           X
               'CPU: ',(SVPOLECP,,T),2X,'IOC: ',(SVPOLEIO,,T),2X,      X
               'MSO: ',(SVPOLEMS,,T),2X,'SRB: ',(SVPOLESR,,T),         X
               INTO=LINE
         BAL   R14,SPACE2          <== next line
         STRING '  Workloads defined: ',(SVPOLDWC,H,L),INTO=LINE
         BAL   R14,SPACE2          <== double space
         LH    R5,SVPOLDWC             number of entries
         LTR   R5,R5                   are any defined?
         BZ    WLM170                  no
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDWO             Offset to workload definition
         USING SVPOLWD,R4              Workload information
WLM010   DS    0H
         STRING 4X,SVPOLWNM,2X,SVPOLWDE,INTO=LINE
         BAL   R14,SPACE1          <== next line
         AH    R4,SVPOLDWL             next section
         BCT   R5,WLM010               loop
         BAL   R14,BLANK1          <== double space
         STRING 4X,'Service classes defined: ',(SVPOLDCC,H,L),         X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
         LH    R5,SVPOLDCC             number of entries
         LTR   R5,R5                   are any defined?
         BZ    WLM140                  no
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDCO             Offset to service class def's
         USING SVPOLCD,R4              Service class information
*LOOP
WLM020   DS    0H
         STRING 6X,'Service class: ',SVPOLCNM,2X,SVPOLCDE,             X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING 10X,'Associated with workload: ',SVPOLCWN,INTO=LINE
         BAL   R14,SPACE1          <== next line
         CLC   SVPOLCRN,BLANKS         any resource group tere?
         BE    WLM030                  no
         STRING 10X,'Associated resource group: ',SVPOLCRN,INTO=LINE
WLM030   DS    0H
         CLC   SVPOLCPN,=H'00'         Any service class period entries
         BNE   WLM040                  yes
         STRING '    No service class period entries are defined',     X
               INTO=LINE
         B     WLM130
WLM040   DS    0H
         BAL   R14,BLANK1              double space
         LA    R6,SVPOLCD              Start of Service Class          X
                                         definition section
         AL    R6,SVPOLCPO             Offset to service class period  X
                                         entries for this service class
         USING SVPOLPD,R6              Service class period information
         LA    R7,0                    entry counter
         STRING '     #  Duration   Imp  Goal description',INTO=LINE
         BAL   R14,SPACE1
         STRING '     -  --------    -   ----------------------------',X
               INTO=LINE
         BAL   R14,SPACE1
*-LOOP
WLM050   DS    0H
         LA    R7,1(,R7)               entry number plus 1
         STRING (SVPOLVAL,F,R9Z),INTO=WORK256
         TM    SVPOLTYP,SVPOLPRC       Percentile response time goal
         BZ    WLM070                  no
         CLC    SVPOLDUR,=F'0'         any duration
         BE     WLM060                 no
         STRING 4X,((R7),,R2B),2X,                                     X
               (SVPOLDUR,F,L5),4X,3X,  duration                        X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               (SVPOLPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,2),'.',                                      X
               (WORK256+2,2),'.',                                      X
               (WORK256+4,2),'.',                                      X
               (WORK256+6,3),                                          X
               INTO=LINE
         B     WLM120
WLM060   DS     0H
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               (SVPOLPER,H,R2B),'% Complete within ',                  X
               (WORK256+0,2),'.',                                      X
               (WORK256+2,2),'.',                                      X
               (WORK256+4,2),'.',                                      X
               (WORK256+6,3),                                          X
               INTO=LINE
         B     WLM120
WLM070   DS    0H
         TM    SVPOLTYP,SVPOLAVG       Average response time goal
         BZ    WLM080                  no
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               (SVPOLVAL,F,L),'% within ',                             X
               (WORK256+0,2),'.',                                      X
               (WORK256+2,2),'.',                                      X
               (WORK256+4,2),'.',                                      X
               (WORK256+6,3),                                          X
               INTO=LINE
         B     WLM120
WLM080   DS    0H
         TM    SVPOLTYP,SVPOLVEL       Velocity goal
         BZ    WLM090                  no
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               (SVPOLIMP,H,R1B),3X,    importance                      X
               'Execution velocity of ',(SVPOLVAL,F,L),                X
               INTO=LINE
         B     WLM120
WLM090   DS    0H
         TM    SVPOLTYP,SVPOLDSC       Discretionary goal
         BZ    WLM100                  no
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               1X,3X,                  importance                      X
               'Discretionary',                                        X
               INTO=LINE
         B     WLM120
WLM100   DS    0H
         TM    SVPOLTYP,SVPOLSTM       System goal
         BZ    WLM110                  no
         STRING 4X,((R7),,R2B),2X,                                     X
               9X,3X,                  duration place holder           X
               1X,3X,                  importance                      X
               'System',                                               X
               INTO=LINE
         B     WLM120
WLM110   DS    0H
         STRING ' Unknown SVPOLTYP ',(SVPOLTYP,,X),INTO=LINE
         B     WLM120
WLM120   DS    0H
         BAL   R14,SPACE1          <== next line
         AH    R6,SVPOLDZL             skip entry
         CH    R7,SVPOLCPN             number of entries
         BL    WLM050                  loop
*-ENDLOOP
WLM130   DS    0H
         BAL   R14,BLANK1              double space
         AH    R4,SVPOLDCL             next service class
         BCT   R5,WLM020               loop
*ENDLOOP
WLM140   DS    0H
         LH    R5,SVPOLDRC             number of entries
         LTR   R5,R5                   any report class entries
         BZ    WLM170                  no
         BAL   R14,BLANK1              double space
         LA    R4,SVPOLHD              Start of SVPO
         AL    R4,SVPOLDRO             Offset to report class
         USING SVPOLRD,R4
*LOOP
WLM150   DS    0H
         STRING '  Report class: ',SVPOLRNM,2X,SVPOLRDE,INTO=LINE
         BAL   R14,SPACE1          <== next line
         AH    R4,SVPOLDRL             next section
         BCT   R5,WLM150               loop
         BAL   R14,BLANK1              double space
         B     WLM170
*ENDLOOP
WLM160   DS    0H
         LR    R1,R15                  Save return code
         STRING '   IWMPQRY-1 FAILED - Returncode=',((R1),F,L),        X
               '  Reasoncode=',((R0),F,L),                             X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
WLM170   DS    0H
         LM    R1,R2,WLM_AREA          load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    WLM175                  yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area
         B     WLM200
WLM175   DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES Free WLM work area
         B     WLM200
WLM180   DS    0H
         LR    R1,R15                  Save return code
         STRING '   IWMPQRY-2 FAILED - Returncode=',((R1),F,L),        X
               '  Reasoncode=',((R0),F,L),                             X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
WLM200   DS    0H
         XC    ANSLEN,ANSLEN           length is zero, for now
*
*        Find out how much storage is needed for the answer area
*
         IWMCQRY MF=(E,IWMCQRY,COMPLETE),ANSAREA=ANSAREA,              X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN
         CH    R15,=Y(IWMRETCODEWARNING) Warning
         BH    WLM330                  no
         CLM   R0,B'0011',=Y(IWMRSNCODEOUTPUTAREATOOSMALL) too small
         BNE   WLM330                  no
         L     R2,QUERYLEN             load length of answer area
*
*        Allocate a work area for the WLM CQRY answer area
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    WLM203                  yes, jump
         GETMAIN RU,LV=(R2)            allocate WLM work area
         B     WLM209
WLM203   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
WLM209   DS    0H
         STM   R1,R2,WLM_AREA          save addr and length
         LR    R3,R1                   answer goes here
*
*        Retrieve WLM information
*
         IWMCQRY MF=(E,IWMCQRY,COMPLETE),ANSAREA=(R3),                 X
               ANSLEN=ANSLEN,QUERYLEN=QUERYLEN
         LTR   R15,R15                 did all go well
         BNZ   WLM300                  no
         USING SVDCRHDR,R3             IWMCQRY Answer area
         STRING '  Subsystem Types defined: ',(SVDCRSN,H,L),INTO=LINE
         BAL   R14,SPACE2          <== double space
         LH    R5,SVDCRSN              number of entries
         LTR   R5,R5                   are any defined?
         BZ    WLM222                  no
         LA    R4,SVDCRHDR             Start of SVD header
         AL    R4,SVDCRSO              Offset to subsystem definition
         USING SVDCRSST,R4             Subsystem information
*LOOP
WLM210   DS    0H
         STRING 4X,'Subsystem name: ',SVDCRSNM,INTO=LINE
         BAL   R14,SPACE2              <== double space
         STRING 6X,'--------Qualifier-------------',12X,'-------Class--X
               ------',INTO=LINE
         BAL   R14,SPACE1
         STRING 6X,'Type     Name     Start',20X,'Service   Report',   X
               INTO=LINE
         BAL   R14,SPACE1
         LA    R1,BLANKS
         TM    SVDCRSFL,SVDCRSCI       Default service class name
         BZ    *+8                     no
         LA    R1,SVDCRSCN             yes
         LA    R2,BLANKS
         TM    SVDCRSFL,SVDCRSPI       Default report class name
         BZ    *+8                     no
         LA    R2,SVDCRSPN             yes
         STRING 39X,'Defaults: ',((R1),8),3X,((R2),8),INTO=LINE
         BAL   R14,SPACE1
         LH    R7,SVDCRSRN             number of classification rules
         LTR   R7,R7                   zero
         BZ    WLM219                  yes
         LA    R6,SVDCRSST             start of section
         AL    R6,SVDCRSRO             to classification section
         USING SVDCRRUL,R6
         ST    R8,WKCELL1              save address of CVT
*-LOOP
WLM211   DS    0H
         BAL   R1,WLM212
         DC    AL1(SVDCRRTN),CL4'TN  ',CL4'TNG '
         DC    AL1(SVDCRRTC),CL4'TC  ',CL4'TCG '
         DC    AL1(SVDCRRUI),CL4'UI  ',CL4'UIG '
         DC    AL1(SVDCRRSN),CL4'SI  ',CL4'SIG '
         DC    AL1(SVDCRRNI),CL4'NET ',CL4'NETG'
         DC    AL1(SVDCRRLU),CL4'LU  ',CL4'LUG '
         DC    AL1(SVDCRRAC),CL4'AI  ',CL4'    '
         DC    AL1(SVDCRRSP),CL4'SPM ',CL4'    '
         DC    AL1(00),CL4'****',CL4'****'
*--LOOP
WLM212   DS    0H
         CLC   SVDCRRQT_BYTE1,0(R1)    found type
         BE    WLM213                  yes
         LA    R1,9(,R1)               skip this entry
         CLI   0(R1),X'00'             end of list
         BNE   WLM212                  no
*--ENDLOOP
WLM213   DS    0H
         TM    SVDCRRFL,SVDCRRGI       is it a group
         BZ    *+8                     no
         LA    R1,4(,R1)               over to the group
         LA    R2,BLANKS
         TM    SVDCRRFL,SVDCRRCI       Service class name specified
         BZ    *+8                     no
         LA    R2,SVDCRRCN             yes
         LA    R8,BLANKS
         TM    SVDCRRFL,SVDCRRPI       Report class name specified
         BZ    *+8                     no
         LA    R8,SVDCRRPN             yes
         STRING 3X,                                                    X
               (SVDCRRLV,H,R2B),1X,    nest level                      X
               (1(R1),4),5X,           type                            X
               SVDCRRQV,2X,            name                            X
               (SVDCRRSV,H,L0B),23X,   start                           X
               ((R2),8),2X,            service                         X
               ((R2),8),               report                          X
               INTO=LINE
         CLC   LINE+21(2),=C' 0'       Zero?
         BNE   *+10                    no
         MVC   LINE+21(2),BLANKS       blank it
         BAL   R14,SPACE1
         AH    R6,SVDCRRS              skip this entry
         BCT   R7,WLM211
*-ENDLOOP
         L     R8,WKCELL1              reload address of CVT
         BAL   R14,BLANK1              double space
         B     WLM220
*
WLM219   DS    0H
         BAL   R14,BLANK1              double space
         STRING 6X,'There are no classification rules',INTO=LINE
         BAL   R14,SPACE2
WLM220   DS    0H
         AH    R4,SVDCRSS              skip this entry
         BCT   R5,WLM210
*ENDLOOP
WLM222   DS    0H
         LH    R5,SVDCRGN              number of groups
         LTR   R5,R5                   are any defined?
         BZ    WLM298                  no
         STRING '    Group     Qualifier Name(s)',INTO=LINE
         BAL   R14,SPACE2              Double space
         LA    R4,SVDCRHDR             Start of SVPO
         AL    R4,SVDCRGO              Offset to group definition
         USING SVDCRGRP,R4             Group information
*LOOP
WLM225   DS    0H
         STRING 4X,SVDCRGRN,INTO=LINE
         LH    R7,SVDCRGVN             number of group values
         LTR   R7,R7                   zero
         BZ    WLM234                  yes
         LA    R6,SVDCRGRP             start of section
         AL    R6,SVDCRGVO             to Group values section
         USING SVDCRGVS,R6
*-LOOP
WLM226   DS    0H
         LA    R1,LINE+14
         LA    R2,1                    Init inter loop
*-LOOP
WLM227   DS    0H
         MVC   0(L'SVDCRGVV,R1),SVDCRGVV move the field
         LA    R1,L'SVDCRGVV+2(,R1)    skip this entry
         LA    R6,SVDCRGVS_LEN(,R6)    skip this entry
         CH    R2,=H'10'               Over count
         BE    WLM228                  Yes
         LA    R2,1(,R2)               Count plus 1
         BCT   R7,WLM227
         BAL   R14,SPACE1              Single Space
         B     WLM235
WLM228   DS    0H
         BAL   R14,SPACE1              Single space
         MVC   LINE,BLANKS             Blank Line
         BCT   R7,WLM226
         BAL   R14,BLANK1              Double Space
         B     WLM235
*-ENDLOOP
WLM234   DS    0H
         BAL   R14,SPACE1              Single space
         STRING 6X,'There are no Group Value entries defined',         X
               INTO=LINE
         BAL   R14,SPACE2
WLM235   DS    0H
         AH    R4,SVDCRGS              skip this entry
         BCT   R5,WLM225
         BAL   R14,BLANK1              Double Space
         B     WLM310
*ENDLOOP
WLM298   DS    0H
         STRING '  Classification Groups defined: ',                   X
               (SVDCRGN,H,L),INTO=LINE
         BAL   R14,SPACE2          <== double space
         B     WLM310
*
WLM300   DS    0H
         LR    R1,R15                  Save return code
         STRING '   IWMCQRY-1 FAILED - Returncode=',((R1),F,L),        X
               '  Reasoncode=',((R0),F,L),                             X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
WLM310   DS    0H
         LM    R1,R2,WLM_AREA          load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    WLM320                  yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free WLM work area
         B     WLM99
WLM320   DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES Free WLM work area
         B     WLM99
WLM330   DS    0H
         LR    R1,R15                  Save return code
         STRING '   IWMCQRY-2 FAILED - Returncode=',((R1),F,L),        X
               '  Reasoncode=',((R0),F,L),                             X
               INTO=LINE
         BAL   R14,SPACE2          <== double space
         B     WLM99
.WLM99   ANOP
WLM99    END_PROC
         TITLE 'SHOWMVS &REL - Resource Recovery Manager'
*---------------------------------------------------------------------*
*                                                                     *
*Resource Recovery Manager                                            *
*                                                                     *
* RRS-Name           Token (hex - char)   Version  Flags  State  Count*
* DSN.RRSPAS.IBM.DB25        l    0000D300   0000   0000      4      7*
* DSN.RRSATF.IBM.DB25        l    0000D300   0000   0000      4      7*
* DSN.RRSATF.IBM.DB26             00000000   0000   0000      6      7*
* DSN.RRSPAS.IBM.DB26             00000000   0000   0000      6      7*
*                                                                     *
*---------------------------------------------------------------------*
RRS00    BEGIN_PROC KW=RRS                                         +RS
         AIF   (NOT D'CVTH6603).RRS99  Resource Manager?           +RS
         TM    HBB6603,L'HBB6603       running on OS390 R3 ?       +RS
         BNO   RRS99                   no, jump                    +RS
RRS10    STRING 'Resource Recovery Manager',INTO=LINE              +RS
         BAL   R14,SPACE2                                          +RS
         BAL   R14,WORKADDR            LOCATE WORK AREA            +RS
         LR    R3,R1                   R3 = workarea               +RS
         ST    R3,ANSAREA              Put output at this address  +JM
         MVC   ANSLEN,=F'1024'                                     +RS
         ATRQUERY REQUEST=RMINFO,AREAADDR=ANSAREA,AREALEN=ANSLEN,  +JM X
               COUNT=QUERYLEN,RETCODE=LRETCODE,RSNCODE=LRSNCODE,       X
               MF=(E,ATRQUERYL,COMPLETE)
         CH    R0,=Y(ATRQUERY_RRS_NOT_ACTIVE) RRS active?          +RS
         BE    RRS80                   No                          +RS
         LTR   R15,R15                 Success?                    +RS
         BNZ   RRS90                   No, error                   +RS
         USING ATRFZRM,R3              tell assembly
         AIF   (NOT D'ATRFZRMVERSION).RRS55  OW29566 installed ?   +RS
         STRING '  RRS-Name',26X,'Token     (hex - char)',14X,         X
               'Version  Flags  State  Count',                         X
               INTO=LINE
         AGO   .RRS55A
.RRS55   ANOP
         STRING '  RRS-Name',26X,'Token     (hex - char)',16X,         X
               'Flags  State  Count',                                  X
               INTO=LINE
.RRS55A  ANOP
         BAL   R14,SPACE2              Double Space
RRS20    DS    0H                                                  +JM
         AIF   (NOT D'ATRFZRMVERSION).RRS56  OW29566 installed ?
         STRING 2X,ATRFZRMRMNAME,2X,                                   X
               ATRFZRMRMTOKEN,(ATRFZRMRMTOKEN,,X),7X,                  X
               (ATRFZRMVERSION,2,X),3X,                                X
               (ATRFZRMFLAGS,2,X),2X,                                  X
               (ATRFZRMRMSTATE,F,R5B),2X,                              X
               (QUERYLEN,F,R5B),                                       X
               INTO=LINE
         AGO   .RSS56A
.RRS56   ANOP
         STRING 2X,ATRFZRMRMNAME,2X,                                   X
               ATRFZRMRMTOKEN,(ATRFZRMRMTOKEN,,X),7X,                  X
               (ATRFZRMFLAGS,2,X),2X,                                  X
               (ATRFZRMRMSTATE,F,R5B),2X,                              X
               (QUERYLEN,F,R5B),                                       X
               INTO=LINE
.RSS56A  ANOP
         BAL   R14,SPACE1              Single Space                +JM
         ICM   R3,B'1111',ATRFZRMNEXT  any more                    +JM
         BNZ   RRS20                   yes                         +JM
         BAL   R14,BLANK1              Double Space
         B     RRS99                   end                         +JM
RRS80    STRING '  RRS is not active',INTO=LINE                    +RS
         B     RRS98                   end                         +RS
RRS90    STRING '  ATRQUERY FAILED - ',                                X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(ANSLEN,F,L),                                  X
               INTO=LINE                                           +RS
RRS98    BAL   R14,SPACE2              Double Space                +RS
.RRS99   ANOP                                                      +RS
RRS99    END_PROC
         TITLE 'SHOWMVS &REL - Automatic Restart Manager'
*---------------------------------------------------------------------*
*                                                                  +RS*
*ARM Data                                                          +RS*
*                                                                  +RS*
*  Element           Init-Sys Curr-Sys Clone Restart-Group    Jobname *
*---------------------------------------------------------------------*
ARM00    BEGIN_PROC KW=ARM,AUTH=YES                                +RS
         AIF   (NOT D'CVTH5520).ARMD99                             +RS
         TM    HBB5520,L'HBB5520       running on ESA 520?         +RS
         BNO   ARMD99                  no, quit                    +RS
         STRING 'ARM Data',INTO=LINE                               +RS
         BAL   R14,SPACE2              Double Space                +RS
         BAL   R14,WORKADDR            allocate XCF Answer Area    +RS
         LR    R5,R1                   remember getmained storage  +RS
         USING QUAHDR,R5               tell assembly               +RS
         MVC   ANSLEN,=F'1024'         try this length first       +RS
*
*        Find out how much storage is needed for the answer area
*
         IXCQUERY REQINFO=ARMS_ALLDATA,                                X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +RS
         CH    R0,=Y(QUAARSNNOARMDSN)  ARM dataset defined ?       +RS
         BE    ARMD80                  No                          +RS
         CH    R0,=Y(QUAARSNRECORDSREMAIN) Data to short
         BE    ARMD05                  No
         LTR   R15,R15                 Success?                    +RS
         BNZ   ARMD90                  No, error                   +RS
         B     ARMD15                  process data
ARMD05   DS    0H
*        Allocate a work area for the answer area and request the
*        data again
         MVI   WKCELL1,X'FF'           remember getmain
         L     R2,QUAHTLEN             How much is required        +JM
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    ARMD06                  yes, jump
         GETMAIN RU,LV=(R2)            allocate ARM work area
         B     ARMD10
ARMD06   DS    0H
         LR    R0,R2                   Length of storage
         LA    R1,1                    LOC=ANY
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
ARMD10   DS    0H
         STM   R1,R2,WLM_AREA          save addr and length
         LR    R5,R1                   remember getmained storage  +RS
         ST    R2,ANSLEN               Size of answer area         +JM
         IXCQUERY REQINFO=ARMS_ALLDATA,                                X
               ANSAREA=QUAHDR,ANSLEN=ANSLEN,                           X
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,IXCQRYWK)   +RS
         LTR   R15,R15                 Success?                    +RS
         BNZ   ARMD90                  No, error                   +RS
ARMD15   DS    0H
         ICM   R7,B'1111',QUAH#REC     record counter              +RS
         BZ    ARMD80                  no record, quit             +RS
         L     R6,QUAHSGOF             get offset                  +RS
         LA    R6,QUAHDR(R6)           point to the records        +RS
         USING QUAARMS,R6              tell assembly               +RS
         STRING '  Element',10X,'Init-Sys Curr-Sys Clone ',            X
               'Restart-Group    Jobname',INTO=LINE
         BAL   R14,SPACE1              Single Space                +RS
*loop
ARMD20   STRING 2X,QUAARMSELEMENT,1X,QUAARMSINITSYS,1X,                X
               QUAARMSCURRSYS,1X,QUAARMSINITCLONE,4X,                  X
               QUAARMSRESTARTGROUP,1X,QUAARMSJOBNAME,INTO=LINE     +RS
         BAL   R14,SPACE1                                          +RS
         LA    R6,QUAARMSLENG(R6)                                  +RS
         BCT   R7,ARMD20                                           +RS
*endloop
         B     ARMD98                                              +RS
ARMD80   STRING '  ARM-Dataset not defined',INTO=LINE              +RS
         B     ARMD97                  end                         +RS
ARMD90   STRING '  IXCQUERY (ARM) FAILED - ',                          X
               ' Returncode=',(LRETCODE,F,L),                          X
               ' Reasoncode=',(LRSNCODE,F,L),                          X
               ' Size=',(ANSLEN,F,L),                                  X
               INTO=LINE                                           +RS
ARMD97   BAL   R14,SPACE1              Single Space                +RS
ARMD98   BAL   R14,BLANK1              Blank line                  +RS
         CLI   WKCELL1,X'FF'           getmain done ?
         BNE   ARMD99
         LM    R1,R2,WLM_AREA          load addr and length
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    ARMD98_1                yes, jump
         FREEMAIN RU,LV=(R2),A=(R1)    free ARM work area
         B     ARMD99
ARMD98_1 DS    0H
         LR    R0,R2                   length for FREEMAIN
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES Free ARM work area
.ARMD99  ANOP                                                      +RS
ARMD99   END_PROC                                                  +RS
         TITLE 'SHOWMVS &REL - Open Catalogs'
*---------------------------------------------------------------------*
*                                                                     *
*Open Catalogs:                                                       *
*                                                                     *
*  SYS1.SYSTMCAT                                  MVSCAT   3380   4600*
*  ICF.USER.CATALOG                               MVSCAT   3380   0000*
*  UCAT.DB2                                       DB9001   3390   0100*
*                                                                     *
*---------------------------------------------------------------------*
OPENCAT  BEGIN_PROC KW=CATALOGS
         STRING 'Open Catalogs:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R5,CVTCBSP              AMCBS
         L     R6,CBSCAXCN-AMCBS(,R5)  FIRST IGGCAXWA IN CHAIN
         USING IGGCAXWA,R6
         ST    R10,APFTABLE            for SORT routine
*LOOP
OPENCAT2 MVC   LINE,BLANKS
         TM    HDZ11C0,L'HDZ11C0       DFSMS/MVS 1.3 ?
         BNO   OPENCAT2L               no, jump
         ICM   R7,B'1111',CAXREUCB     Real UCB (31-bit) ?
         BNZ   OPENCAT2X               yes, exit
OPENCAT2L EQU  *
         L     R7,CAXUCB               UCB ADDR
OPENCAT2X EQU  *
         USING UCBOB,R7
         BAL   R14,GETUNIT             GET UNITNAME
         MVC   DSNAME,CAXCNAM          DSNAME
         CLI   DSNAME,C' '             .
         BNE   *+8                     no, jump
         MVI   DSNAME,C'?'             yes, replace space with ?
         MVC   VOLSER,UCBVOLI          VOLSER
**       MVC   VOLSER,CAXVOLID         VOLSER (CRA)
         MVC   WKCELL1,BLANKS          reset MASTER
         TM    CAXFLGS,CAXMCT          master catalog?
         BZ    OPENCAT3                no, jump
         MVC   WKCELL1,=C'Master, '    first cat is master cat
         MVC   WKCELL2(1),DSNAME       save first char of DSN
         MVI   DSNAME,0                make sure MCAT ends up first
OPENCAT3 STRING UNITNAME,                                              X
               (WKCELL1,,T),           MASTER                          X
               'Flags=',(CAXFLGS,2,X),                                 X
               ',ACB=',(CAXACB+1,3,X),                                 X
               INTO=(DEVTYPE+10,NEXTLINE)
         BAL   R14,SPACE1          <== next line
         ICM   R6,B'1111',CAXCHN       NEXT CAXWA
         BNZ   OPENCAT2                PROCESS IF NOT END-OF-CHAIN
*ENDLOOP
         DROP  R6,R7                   IGGCAXWA, UCBOB
         LA    R2,APFTABLE             TABLE DESC
         BAL   R14,TRIZO               SORT BY DSN
         L     R1,APFTABLE             point to first line (MCAT)
         MVC   DSNAME-LINE(1,R1),WKCELL2 restore first char of DSN
         BAL   R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - Page Data Sets'
*---------------------------------------------------------------------*
*                                                                     *
*Page Data Sets:                                                      *
*                                                                     *
*  SYS2.PAG301.PLPA                               PAG301  PLPA     86%*
*  SYS2.PAG301.COMMON                             PAG301  COMMON   16%*
*  SYS1.PAG302.LOCAL                              PAG302  LOCAL    64%*
*                                                                     *
*---------------------------------------------------------------------*
PAGEDS   BEGIN_PROC KW=PAGE
         STRING 'Page Data Sets:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Data Set Name',34X,'Volser   Type     Used    Slots X
                Slots/cyl',INTO=LINE
         BAL   R14,SPACE1              <== next line
         L     R4,CVTASMVT             POINT TO ASM VECTOR TABLE
         L     R2,ASMPART-ASMVT(,R4)   POINT TO PAGE ACT REF TABLE
         USING PART,R2
         L     R5,PARTDSNL             POINT TO 1ST PAGE DSN
         LA    R6,PARTENTS             POINT TO 1ST PARTE
         USING PARTENT,R6
         L     R7,PARTSIZE             NUMBER OF PART ENTRIES
*LOOP
PAGEDS1  TM    PAREFLG1,PARENUSE       THIS PARTE IN USE?
         BO    PAGEDS8                 NO, SKIP IT
         MVC   LINE,BLANKS             BLANK LINE
         MVC   DSNAME,0(R5)            MOVE DSNAME
         L     R1,PAREUCBP             UCB ADDRESS
         MVC   VOLSER,UCBVOLI-UCBOB(R1)  VOLSER
         TM    PAREFLG1,PARENVIO       IS THIS A NON-VIO DATA SET?
         BZ    PAGEDS4                 NO, JUMP
         MVC   YYYYMMDD(6),=C'NONVIO'  YES, SHOW IT
*
PAGEDS4  BAL   R1,PAGEDS4B
         DC    AL1(PAREPLPA),C'PLPA  '
         DC    AL1(PARECOMM),C'COMMON'
         DC    AL1(PAREDPLX),C'DUPLEX'
         DC    AL1(PARELOCL),C'LOCAL '
         DC    AL1(00),0H'0'
PAGEDS4B BAL   R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+6)               0  LENGTH OF A TABLE ENTRY
         TM    PARETYPE,*-*         2  TEST LABEL TYPE FLAGS
         MVC   DEVTYPE(6),1(R1)     6  TYPE OF PAGE DATA SET
*
         L     R1,PARESZSL             GET TOTAL SIZE
         S     R1,PARESLTA             SLOTS AVAILABLE
         M     R0,=F'100'              CALCULATE PERCENTAGE USED
         D     R0,PARESZSL             CALCULATE PERCENTAGE USED
         L     R3,PAREPATP             Point to PAT            DL9809
         USING PAT,R3                                          DL9809
         STRING ((R1),,R3B),'%',                                       X
               (PARESZSL,F,R9B),       slots                           X
               (PATCYLSZ,H,R7B),       slots/cyl                       X
               INTO=(CATUNCAT,NEXTLINE)
         BAL   R14,SPACE1          <== next line
PAGEDS8  LA    R5,44(,R5)              NEXT DSN
         LA    R6,PARTELEN(,R6)        NEXT PARTE
         BCT   R7,PAGEDS1
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - Dump Data Sets and Options'
*---------------------------------------------------------------------*
*                                                                     *
*DUMP Data Sets and Options:                                          *
*                                                                     *
*  SYS1.DUMP00                                    MVSRES 911214  Full *
*    Date=1996-09-28 Time=07.11.52 Title=CICS DUMP: SYSTEM=CICSPROD   *
*  SYS1.DUMP01                                    MVSRES 911214  Empty*
*                                                                     *
*---------------------------------------------------------------------*
DUMPDS   BEGIN_PROC KW=DUMP
         STRING 'DUMP Data Sets and Options:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R4,CVTRTMCT             RTM CTL TABLE
         USING RTCT,R4
         ICM   R5,B'1111',RTCTSDDS     FIRST ENTRY IN SDDS Q
         BZ    DUMP30                  dynalloc, jump
         USING SDDSQ,R5
         LH    R6,RTCTSDDC             NUMBER OF ENTRIES IN SDDSQ
*LOOP
DUMP25   MVC   LINE,BLANKS
         STRING 'SYS1.DUMP',SDDSQDAN,INTO=DSNAME
         MVI   VOLSER,C'?'             $LOCATE required
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVC   CATUNCAT(5),=C'Empty'   set status
         TM    SDDSQFLG,SDDSQDDS       data set empty ?
         BZ    DUMP25N                 yes, jump
         MVI   CATUNCAT,C'%'           set status based on DS1LSTAR
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   DUMP25N                 no, jump
         BAL   R14,SPACE1          <== BUMP LINE PTR
         STRING '. (Date and title are being obtained)',INTO=LINE
DUMP25N  BAL   R14,SPACE1          <== BUMP LINE PTR
         L     R5,SDDSQFWD             next SDDSQ entry
         BCT   R6,DUMP25               process it
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         DROP  R5                      SDDSQ
*---------------------------------------------------------------------*
*                                                                     *
*  Automatic Allocation is active                                     *
*                                                                     *
*  DSNAME pattern: NSSLNSS.NSSFDUMP.&SYSNAME..D&LDATE..T&LTIME..S&SEQ.*
*                                                                     *
*  NSSLNSS.NSSFDUMP.D1.D961030.T005533.S00001     SMS445 951214  Full *
*    Date=1996-09-28 Time=07.11.52 Title=CICS DUMP: SYSTEM=CICSPROD   *
*                                                                     *
*---------------------------------------------------------------------*
DUMP30   EQU   *
         TM    HBB5520,L'HBB5520       ESA 5.2?
         BNO   DUMP40                  no, exit
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   DUMP40                  no, exit
         L     R5,RTCTRTSD             RTCT SDUMP Extension
         USING RTSD,R5
         BAL   R14,EXECKEY0            execute next instr in key=0
         ICM   R6,B'1111',RTSDXADR     SDRTX?
         BZ    DUMP40                  no, exit
         USING SDRTX,R6
         LA    R14,SDRTX_LENGTH        length
         SLR   R15,R15                 source key is zero
         MVCK  WORK256(R14),SDRTX,R15   Move line to buffer
         LA    R6,WORK256              un-protected SDRTX
*
*        DSNAME pattern
*
         XR    R1,R1                   Clear R1
         IC    R1,SDRTX_DSNPATL        Length of DSNAME pattern
         STRING '  DSNAME pattern: ',(SDRTX_DSNPAT,(R1)),INTO=LINE
         BAL   R14,SPACE2              BLANK LINE
*
*        Automatically-allocated DUMP data sets
*
         TM    SDRTXFLAGS,SDRTXFDYN    dynalloc active?
         BZ    DUMP40                  No, exit
         STRING '  Automatic Allocation is active',INTO=LINE
         BAL   R14,SPACE2              BLANK LINE
         ICM   R7,B'1111',SDRTX_SDDSQ1 First automatic SDDSQ
         BZ    DUMP39                  None, exit
         USING SDDSQ,R7
         SLR   R2,R2
         IC    R2,SDRTX_SDDSQ#         Load number of DUMPDS
*loop
DUMP35   MVC   LINE,BLANKS
         MVC   DSNAME,SDDSQDSN         move dsname
         MVI   VOLSER,C'?'             $LOCATE required
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVC   CATUNCAT(5),=C'Empty'   set status
         TM    SDDSQFLG,SDDSQDDS       data set empty ?
         BZ    DUMP35N                 yes, jump
         MVI   CATUNCAT,C'%'           set status based on DS1LSTAR
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   DUMP35N                 no, jump
         BAL   R14,SPACE1          <== BUMP LINE PTR
         STRING '. (Date and title are being obtained)',INTO=LINE
DUMP35N  BAL   R14,SPACE1          <== BUMP LINE PTR
         L     R7,SDDSQFWD             Next SDDSQ
         BCT   R2,DUMP35
*endloop
         BAL   R14,BLANK1              BLANK LINE
         B     DUMP40
DUMP39   DS    0H
         STRING 'No active Dump dataset(s) found',INTO=LINE
         BAL   R14,SPACE2              NEXT LINE
*---------------------------------------------------------------------*
*                                                                     *
*  SYSABEND SDATA=(LSQA,TRT,CB,ENQ,DM,IO,ERR),PDATA=(SA,REGS,LPA,JPA) *
*  SYSUDUMP SDATA=(TRT,CB,ENQ,DM,ERR),PDATA=(SA,REGS,LPA,JPA,PSW,SPLS)*
*  SYSMDUMP SDATA=(NUC,SQA,LSQA,SWA,TRT,RGN,LPA,CSA,SUM)              *
*     SDUMP SDATA=(APSA,NUC,SQA,LSQA,RGN,LPA,TRT,CSA,SWA,SUM,Q=Y)     *
*           TYPE=(XMEME)                                              *
*           BUFFERS=0K   MAXSPACE=500M   MSGTIME=99999 Minutes        *
*                                                                     *
*---------------------------------------------------------------------*
DUMP40   EQU   *
         STRING '  SYSABEND SDATA=(',INTO=LINE
         L     R0,=X'80000000'         first bit of first byte
         LA    R1,DUMPSDAT             SDATA parms             JWMJUN95
         LA    R2,RTCTSAO              SYSABEND options
         BAL   R3,DUMP80               edit SDATA options
         STRING ',PDATA=(',INTO=(1(R6),NEXTLINE)
         BAL   R3,DUMP80               edit PDATA options
         BAL   R14,SPACE1          <== next line
*
         STRING '  SYSUDUMP SDATA=(',INTO=LINE
         L     R0,=X'80000000'         first bit of first byte
         LA    R1,DUMPSDAT             SDATA parms             JWMJUN95
         LA    R2,RTCTSUO              SYSUDUMP options
         BAL   R3,DUMP80               edit SDATA options
         STRING ',PDATA=(',INTO=(1(R6),NEXTLINE)
         BAL   R3,DUMP80               edit PDATA options
         BAL   R14,SPACE1          <== next line
*
         L     R0,=X'80000000'         first bit
         LA    R1,DUMPMDMP             option table
         LA    R2,RTCTSYO              SYSMDUMP options
         STRING '  SYSMDUMP SDATA=(',INTO=LINE
         BAL   R3,DUMP80               edit options
         TM    RTCTMEX1,RTCTMXGR       GRSQ?                   JWMJUN95
         BZ    DUMP52                  NO                      JWMJUN95
         STRING ',GRSQ)',INTO=(0(R6),NEXTLINE)                 JWMJUN95
         LA    R6,5(,R6)               skip over to the )      JWMJUN95
DUMP52   DS    0H                                              JWMJUN95
         BAL   R14,SPACE1          <== next line
*
         L     R0,=X'80000000'         first bit
         LA    R1,DUMPSDMP             option table
         LA    R2,RTCTSDO              SVCDUMP options
         STRING '     SDUMP SDATA=(',INTO=LINE
         BAL   R3,DUMP80               edit options
         TM    RTCTEX1,RTCTMSTR        GRSQ?                   JWMJUN95
         BZ    DUMP60                  NO                      JWMJUN95
         STRING ',GRSQ)',INTO=(0(R6),NEXTLINE)                 JWMJUN95
         LA    R6,5(,R6)               skip over to the )      JWMJUN95
DUMP60   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTCPL         COUPLE?                 JWMJUN95
         BZ    DUMP61                  NO                      JWMJUN95
         STRING ',COUPLE)',INTO=(0(R6),NEXTLINE)               JWMJUN95
         LA    R6,7(,R6)               skip over to the )      JWMJUN95
DUMP61   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTXES         XESDATA                 JWMJUN95
         BZ    DUMP62                  NO                      JWMJUN95
         STRING ',XESDATA)',INTO=(0(R6),NEXTLINE)              JWMJUN95
         LA    R6,8(,R6)               skip over to the )      JWMJUN95
DUMP62   DS    0H                                              JWMJUN95
         TM    RTCTEX1,RTCTWLM         WLM                     JWMJUN95
         BZ    DUMP63                  NO                      JWMJUN95
         STRING ',WLM)',INTO=(0(R6),NEXTLINE)                  JWMJUN95
DUMP63   DS    0H                                              JWMJUN95
         LA    R6,8(,R6)               skip over to the )      JWMJUN95
         BAL   R14,SPACE1          <== next line               JWMJUN95
         STRING 11X,'TYPE=(',INTO=LINE                         JWMJUN95
         L     R0,=X'80000000'         first bit               JWMJUN95
         LA    R1,DUMPSTYP             XMEM/XMEME/NOLOCAL      JWMJUN95
         LA    R2,RTCTTYP1                                     JWMJUN95
         BAL   R3,DUMP80                                       JWMJUN95
         BAL   R14,SPACE1          <== next line               JWMJUN95
         STRING 11X,'BUFFERS=',(RTCTBUFV,F,L0),                JWMJUN95X
               'K   MAXSPACE=',(RTCTMXSP,F,L0),                JWMJUN95X
               'M   MSGTIME=',(RTCTMMTI,F,L0),' Minutes',      JWMJUN95X
               INTO=LINE                                       JWMJUN95
         BAL   R14,SPACE2              Double Space
         B     DUMP99
*
*        Sub-routine: Edit DUMP options
*
DUMP80   STRING (LINE,,T),INTO=LINE
         LA    R6,LINE(R15)            point past '('
*loop
DUMP81   LR    R15,R0                  point past ")"
         N     R15,0(,R2)              test bit
         BZ    DUMP82                  off, jump
         STRING (LINE,,T),((R1),8,T),',',INTO=LINE             JWMJUN95
         LA    R6,LINE(R15)            point past last ','
         BCTR  R6,0                    prepare to overlay ','
DUMP82   SRL   R0,1                    shift mask
         LA    R1,8(,R1)               next table entry        JWMJUN95
         CLI   0(R1),C'.'              end of table?
         BNE   DUMP81                  no, test next bit
*endloop
         MVI   0(R6),C')'              close paren
         L     R0,=X'00008000'         first bit of third byte
         LA    R1,DUMPPDAT             PDATA parms             JWMJUN95
         BR    R3
*                                                              JWMJUN95
DUMPSDAT DC    CL8'NUC     '           SDATA parms             JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'CB      '                                   JWMJUN95
         DC    CL8'ENQ     '                                   JWMJUN95
         DC    CL8'DM      '                                   JWMJUN95
         DC    CL8'IO      '                                   JWMJUN95
         DC    CL8'ERR     '                                   JWMJUN95
         DC    CL8'PCDATA  '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'NOSYM   '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPSTYP DC    CL8'XMEM    '                                   JWMJUN95
         DC    CL8'XMEME   '                                   JWMJUN95
         DC    CL8'NOLOCAL '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPMDMP DC    CL8'NUC     '           SYSMDUMP                JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'RGN     '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'CSA     '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'ALLNUC  '                                   JWMJUN95
         DC    CL8'NOSYM   '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*                                                              JWMJUN95
DUMPSDMP DC    CL8'ALLPSA  '           SVCDUMP                 JWMJUN95
         DC    CL8'CPSA    '                                   JWMJUN95
         DC    CL8'NUC     '                                   JWMJUN95
         DC    CL8'SQA     '                                   JWMJUN95
         DC    CL8'LSQA    '                                   JWMJUN95
         DC    CL8'RGN     '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'TRT     '                                   JWMJUN95
         DC    CL8'CSA     '                                   JWMJUN95
         DC    CL8'SWA     '                                   JWMJUN95
         DC    CL8'SUM     '                                   JWMJUN95
         DC    CL8'NOSUM   '                                   JWMJUN95
         DC    CL8'NOALLPSA'                                   JWMJUN95
         DC    CL8'NOSQA   '                                   JWMJUN95
         DC    CL8'ALLNUC  '                                   JWMJUN95
         DC    CL8'        '                                   JWMJUN95
         DC    CL8'Q=YES   '                                   JWMJUN95
         DC    CL8'Q=NO    '                                   JWMJUN95
         DC    CL1'.'                                          JWMJUN95
*
DUMPPDAT DC    CL8'SA      '                                   JWMJUN95
         DC    CL8'SAH     '                                   JWMJUN95
         DC    CL8'REGS    '                                   JWMJUN95
         DC    CL8'LPA     '                                   JWMJUN95
         DC    CL8'JPA     '                                   JWMJUN95
         DC    CL8'PSW     '                                   JWMJUN95
         DC    CL8'SPLS    '                                   JWMJUN95
         DC    CL8'SUBTASKS'                                   JWMJUN95
         DC    CL1'.',0H'0'                                    JWMJUN95
DUMP99   END_PROC
         TITLE 'SHOWMVS &REL - Dump Data Sets and Options'
*---------------------------------------------------------------------*
*                                                                     *
*DAE PArameters                                                       *
*                                                                     *
*  Member = ADYSET00                                                  *
*    Start                                                            *
*    Svcdump  = notify(3,30)  match  update  suppressall              *
*    Sysmdump = match  update  suppressall                            *
*    Records  = 400                                                   *
*    Dsn      = SYS1.DAE.SYSPLEX                                      *
*    Share    = dsn options                                           *
*    Global   = dsn options                                           *
*                                                                     *
*  Note. When SHARE(DSN) or SHARE(DSN,OPTIONS) is used,               *
*        the corresponding GLOBAL parameter is set.                   *
*                                                                     *
*  At the time DAE is started, any record older than 180 days, is     *
*  ignored.                                                           *
*    DSN(SYS1.DAE)                                                    *
*                                                                     *
*---------------------------------------------------------------------*
DAE00    BEGIN_PROC KW=DAE,AUTH=YES
         L     R4,CVTRTMCT             RTM CTL TABLE
         USING RTCT,R4
         STRING 'DAE Parameters',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R5,RTCTDSCA             DAE Com area
         BAL   R14,WORKADDR            temp work area
         LA    R14,DSCA_LENGTH         get length for MVCK
         SLR   R15,R15                 source key is KEY 0
         MVCK  0(R14,R1),0(R5),R15     Move DSCA to unprot storage
         LR    R5,R1                   unprot DSCA
         USING DSCA,R5
         LA    R6,DSCA+DSCA_LENGTH     unprot DFL
         USING DFLM,R6
         L     R1,DSCDFL               DAE Default Module (ADYDFLT)
         LA    R14,DFL_LENGTH          get length for MVCK
         SLR   R15,R15                 source key is KEY 0
         MVCK  DFLM(R14),0(R1),R15     Move DFL to unprot storage
         STRING '  Member = ',DFLPLMEM,INTO=LINE
         BAL   R14,SPACE1              Single Space
         TM    DFLDAEO,DFLSTRT         DAE started?
         BO    DAE10                   Yes
         LA    R4,=C'Globalstop'
         TM    DFLDAEO,DFLGSTP         Globalstop?
         BO    *+8                     Yes
         LA    R4,BLANKS               No
         STRING '    Stop ',((R4),10,T),INTO=LINE
         BAL   R14,SPACE2              Double Space
         B     DAE99
DAE10    DS    0H
         STRING '    Start',INTO=LINE
         BAL   R14,SPACE1
         MVI   WORK256,C' '            Move in the seed
         MVC   WORK256+1(255),WORK256  clear the work area
         LA    R1,WORK256
         TM    DFLSVC,DFLSVCM          Match?
         BZ    *+14                    No
         MVC   0(5,R1),=C'match'       SVCDUMP = match
         LA    R1,5+2(,R1)
         TM    DFLSVC,DFLSVCU          update?
         BZ    *+14                    No
         MVC   0(6,R1),=C'update'      SVCDUMP = update
         LA    R1,6+2(,R1)
* It can not be both Suppress and Suppressall
         TM    DFLSVC,DFLSVCA          suppressall?
         BZ    *+14                    No
         MVC   0(11,R1),=C'suppressall'
         B     *+18                    Yes
         TM    DFLSVC,DFLSVCS          suppress?
         BZ    *+10                    No
         MVC   0(8,R1),=C'suppress'
         STRING '    Svcdump  = notify(',                              X
               (DFLNOTDN,H,L),',',(DFLNOTTM,H,L),')  ',                X
               (WORK256,40,T),                                         X
               INTO=LINE
         BAL   R14,SPACE1
         MVI   WORK256,C' '            Move in the seed
         MVC   WORK256+1(255),WORK256  clear the work area
         LA    R1,WORK256
         TM    DFLSYSM,DFLSYSMM        Match?
         BZ    *+14                    No
         MVC   0(5,R1),=C'match'       SYSMDUMP = match
         LA    R1,5+2(,R1)
         TM    DFLSYSM,DFLSYSMU        update?
         BZ    *+14                    No
         MVC   0(6,R1),=C'update'      SYSMDUMP = update
         LA    R1,6+2(,R1)
* It can not be both Suppress and Suppressall
         TM    DFLSYSM,DFLSYSMA        suppressall?
         BZ    *+14                    No
         MVC   0(11,R1),=C'suppressall'
         B     *+18                    Yes
         TM    DFLSYSM,DFLSYSMS        suppress?
         BZ    *+10                    No
         MVC   0(8,R1),=C'suppress'
         STRING '    Sysmdump = ',                                     X
               (WORK256,40,T),                                         X
               INTO=LINE
         BAL   R14,SPACE1
         STRING '    Records  = ',(DFLRECNO,F,L),INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '    Dsn      = ',(DFLDSN,,L),INTO=LINE
         TM    DFLDAEO,DFLSHR+DFLSHRO  Share dsn or options
         BZ    DAE20                   NO.
         BAL   R14,SPACE1              Single Space
         LA    R1,=C'dsn'
         TM    DFLDAEO,DFLSHR          Share dsn?
         BO    *+8                     Yes
         LA    R1,BLANKS               No
         LA    R2,=C'options'
         TM    DFLDAEO,DFLSHRO         Share option?
         BO    *+8                     Yes
         LA    R2,BLANKS               No
         STRING '    Share    = ',((R1),3,T),1X,((R2),7,T),INTO=LINE
DAE20    DS    0H
         TM    DFLGLB,DFLGLBD+DFLGLBO  global dsn or options
         BZ    DAE30                   NO.
         BAL   R14,SPACE1              Single Space
         LA    R1,=C'dsn'
         TM    DFLGLB,DFLGLBD          Global dsn?
         BO    *+8                     Yes
         LA    R1,BLANKS               No
         LA    R2,=C'options'
         TM    DFLGLB,DFLGLBO          Global options?
         BO    *+8                     Yes
         LA    R2,BLANKS               No
         STRING '    Global   = ',((R1),3,T),1X,((R2),7,T),INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Note. When SHARE(DSN) or SHARE(DSN,OPTIONS) is used,X
               ',INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '        the corresponding GLOBAL parameter is set.',  X
               INTO=LINE
DAE30    DS    0H
         BAL   R14,SPACE2              Double Space
         STRING '  At the time DAE is started, any record older than ',X
               (DFLEXPIR,F,L),' days is ignored.',INTO=LINE
DAE90    DS    0H
         BAL   R14,SPACE2              Double Space
DAE99    END_PROC
         TITLE 'SHOWMVS &REL - GTF Data'
*---------------------------------------------------------------------*
*                                                                     *
*GTF Data                                                             *
*                                                                     *
*  GTF Active, TRACE=(USR,RNIO)                                       *
*                                                                     *
*---------------------------------------------------------------------*
GTF00    BEGIN_PROC KW=GTF
         STRING 'GTF Data',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '.GTF',INTO=LINE       trigger for the sub-task
         BAL   R14,SPACE2              Double Space
GTF99    END_PROC
         TITLE 'SHOWMVS &REL - Master JCL (IEEMSJCL)'
*---------------------------------------------------------------------*
*                                                                     *
*Initialisation Parameters                                            *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
IPA000   BEGIN_PROC KW=IPA
         AIF   (NOT D'CVTJ6602).IPA999
         TM    JBB6602,L'JBB6602       IPA available?
         BZ    IPA999                  no, exit
         STRING 'Initialization Parameters',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R3,CVTECVT              Load addr of ECVT
         L     R4,ECVTIPA-ECVT(,R3)    Init parm area
         USING IPA,R4
         TM    IPALFLAG,IPAJCLP        Master JCL came from PARMLIB ?
         BNO   *+8                     no, jump
         OI    MSTJCL_PARMLIB,L'MSTJCL_PARMLIB remember it for later
         STRING '  IPLPARM=',INTO=LINE,                                X
               IPAIODFU,1X,IPALOADS,1X,IPAPROMT,1X,IPANUCID
         BAL   R14,SPACE1              Single Space
         STRING '    IPLparm dsn=',(IPALPDSN,,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '  HWNAME=',(IPAHWNAM,,T),                             X
               ',LPARNAME=',(IPALPNAM,,T),                             X
               ',VMUSERID=',(IPAVMNAM,,T),                             X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '  IODF     ',(IPAIODF,,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '  NUCLEUS  ',(IPANUCID,,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '  SYSPARM  ',(IPASPARM,,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '  SYSCAT   ',(IPASCAT,,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '  IEASYM   ',(IPASYM,,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         STRING '  SYSPLEX  ',(IPAPLEX,,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         LH    R7,IPAPLNUM             number of PARMLIB images
         LA    R6,IPAPLIB              Start of PARMLIB images
         USING IPAPLIB,R6
*LOOP
IPA050   DS    0H
         STRING '  PARMLIB  ',(IPAPLIB,63,T),INTO=LINE
         BAL   R14,SPACE1              Single Space
         LA    R2,=C'YES'              In use=YES
         TM    IPAPLFLG,IPAPLUSE       in use?
         BO    *+8                     YES, JUMP
         LA    R2,=C'NO '              NO, In use=NO
         LA    R3,=C'YES'              Default=YES
         TM    IPAPLFLG,IPAPLDEF       Default?
         BO    *+8                     YES, JUMP
         LA    R3,=C'NO '              NO, Default=NO
         LA    R5,=C'YES'              Found in catalog=YES
         TM    IPAPLFLG,IPAPLCAT       Found in catalog?
         BO    *+8                     YES, JUMP
         LA    R5,=C'NO '              NO, Found in catalog=NO
         STRING 11X,'In use: ',((R2),3),2X,                            X
               'Default: ',((R3),3),2X,                                X
               'Found in catalog: ',((R5),3),                          X
               INTO=LINE
         TM    IPAPLFLG,IPAPLUSE       in use?
         BO    IPA150                  YES, JUMP
         LA    R3,=C'LOCATE failed'
         TM    IPAPLFLG,IPAPLLCF       Locate failed?
         BO    IPA100                  YES, JUMP
         LA    R3,=C'MOUNT failed '
         TM    IPAPLFLG,IPAPLMNF       Mount failed?
         BO    IPA100                  YES, JUMP
         LA    R3,=C'OPEN failed  '
         TM    IPAPLFLG,IPAPLOPF       OPEN failed?
         BZ    IPA150                  No, JUMP
IPA100   DS    0H
         STRING (LINE,,T),' (',((R3),13,T),')',INTO=LINE
IPA150   BAL   R14,SPACE1              Single Space
         LA    R6,64(,R6)              Skip this image
         BCT   R7,IPA050               loop through them
         DROP  R6
*ENDLOOP
         STRING '  NUCLST   ',(IPANUCL,,T),INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        display value of each initialization parameter
*
         BAL   R5,IPA301               Table
         DC    C'ALLOC   ',AL2(IPAALLOC-IPAPDESC)
         DC    C'APF     ',AL2(IPAAPF-IPAPDESC)
         DC    C'APG     ',AL2(IPAAPG-IPAPDESC)
         DC    C'BLDL    ',AL2(IPABLDL-IPAPDESC)
         DC    C'BLDLF   ',AL2(IPABLDLF-IPAPDESC)
         DC    C'CLOCK   ',AL2(IPACLOCK-IPAPDESC)
         DC    C'CLPA    ',AL2(IPACLPA-IPAPDESC)
         DC    C'CMB     ',AL2(IPACMB-IPAPDESC)
         DC    C'CMD     ',AL2(IPACMD-IPAPDESC)
         DC    C'CON     ',AL2(IPACON-IPAPDESC)
         DC    C'CONT    ',AL2(IPACONT-IPAPDESC)
         DC    C'COUPLE  ',AL2(IPACOUPL-IPAPDESC)
         DC    C'CPQE    ',AL2(IPACPQE-IPAPDESC)
         DC    C'CSA     ',AL2(IPACSA-IPAPDESC)
         DC    C'CSCBLOC ',AL2(IPACSCBL-IPAPDESC)
         DC    C'CVIO    ',AL2(IPACVIO-IPAPDESC)
         DC    C'DEVSUP  ',AL2(IPADEVSU-IPAPDESC)
         DC    C'DIAG    ',AL2(IPADIAG-IPAPDESC)
         DC    C'DUMP    ',AL2(IPADUMP-IPAPDESC)
         DC    C'DUPLEX  ',AL2(IPADUPLE-IPAPDESC)
         DC    C'EXIT    ',AL2(IPAEXIT-IPAPDESC)
         DC    C'FIX     ',AL2(IPAFIX-IPAPDESC)
         DC    C'GRS     ',AL2(IPAGRS-IPAPDESC)
         DC    C'GRSCNF  ',AL2(IPAGRSCN-IPAPDESC)
         DC    C'GRSRNL  ',AL2(IPAGRSRN-IPAPDESC)
         DC    C'ICS     ',AL2(IPAICS-IPAPDESC)
         DC    C'IOS     ',AL2(IPAIOS-IPAPDESC)
         DC    C'IPS     ',AL2(IPAIPS-IPAPDESC)
         DC    C'LNK     ',AL2(IPALNK-IPAPDESC)
         DC    C'LNKAUTH ',AL2(IPALNKAU-IPAPDESC)
         DC    C'LOGCLS  ',AL2(IPALOGCL-IPAPDESC)
         DC    C'LOGLMT  ',AL2(IPALOGLM-IPAPDESC)
         DC    C'LOGREC  ',AL2(IPALOGRE-IPAPDESC)
         DC    C'LPA     ',AL2(IPALPA-IPAPDESC)
         DC    C'MAXCAD  ',AL2(IPAMAXCA-IPAPDESC)
         DC    C'MAXUSER ',AL2(IPAMAXUS-IPAPDESC)
         DC    C'MLPA    ',AL2(IPAMLPA-IPAPDESC)
         DC    C'MSTRJCL ',AL2(IPAMSTRJ-IPAPDESC)
         DC    C'NONVIO  ',AL2(IPANONVI-IPAPDESC)
         DC    C'NSYSLX  ',AL2(IPANSYSL-IPAPDESC)
         DC    C'NUCMAP  ',AL2(IPANUCMA-IPAPDESC)
         AIF   (NOT D'CVTH6603).IPA300F OS/390 R3?
         DC    C'OMVS    ',AL2(IPAOMVS-IPAPDESC)
.IPA300F ANOP
         DC    C'OPI     ',AL2(IPAOPI-IPAPDESC)
         DC    C'OPT     ',AL2(IPAOPT-IPAPDESC)
         DC    C'PAGE-OP ',AL2(IPAPAGEO-IPAPDESC)
         DC    C'PAGE-SYS',AL2(IPAPAGEP-IPAPDESC)
         DC    C'PAGNUM  ',AL2(IPAPAGNU-IPAPDESC)
         DC    C'PAGTOTL ',AL2(IPAPAGTO-IPAPDESC)
         DC    C'PAK     ',AL2(IPAPAK-IPAPDESC)
         DC    C'PLEXCFG ',AL2(IPAPLEXC-IPAPDESC)
         DC    C'PRODP   ',AL2(IPAPRODP-IPAPDESC)
         DC    C'PROG    ',AL2(IPAPROG-IPAPDESC)
         DC    C'PURGE   ',AL2(IPAPURGE-IPAPDESC)
         DC    C'RDE     ',AL2(IPARDE-IPAPDESC)
         DC    C'REAL    ',AL2(IPAREAL-IPAPDESC)
         DC    C'RER     ',AL2(IPARER-IPAPDESC)
         DC    C'RSU     ',AL2(IPARSU-IPAPDESC)
         DC    C'RSVNONR ',AL2(IPARSVNO-IPAPDESC)
         DC    C'RSVSTRT ',AL2(IPARSVST-IPAPDESC)
         DC    C'SCH     ',AL2(IPASCH-IPAPDESC)
         DC    C'SMF     ',AL2(IPASMF-IPAPDESC)
         DC    C'SMS     ',AL2(IPASMS-IPAPDESC)
         DC    C'SQA     ',AL2(IPASQA-IPAPDESC)
         DC    C'SSN     ',AL2(IPASSN-IPAPDESC)
         DC    C'SVC     ',AL2(IPASVC-IPAPDESC)
         DC    C'SWAP    ',AL2(IPASWAP-IPAPDESC)
         DC    C'SYSNAME ',AL2(IPASYSNA-IPAPDESC)
         DC    C'SYSP    ',AL2(IPASYSP-IPAPDESC)
         DC    C'VAL     ',AL2(IPAVAL-IPAPDESC)
         DC    C'VIODSN  ',AL2(IPAVIODS-IPAPDESC)
         DC    C'VRREGN  ',AL2(IPAVRREG-IPAPDESC)
         AIF   (NOT D'CVTJ6604).IPA300X OS/390 R4?
         DC    C'RTLS    ',AL2(IPARTLSP-IPAPDESC)
.IPA300X ANOP
         DC    H'-1'                   end of table
*loop
IPA301   LH    R6,8(,R5)               offset to PDE
         LA    R6,IPAPDESC(R6)         point at PDE
         USING IPAPDE,R6
         ICM   R1,B'1111',IPAPDESA     storage address
         BZ    IPA339                  zero, ignore
         LH    R2,IPAPDESL             storage length
         STRING 2X,((R5),8,T),'=',((R1),(R2)),INTO=LINE
         BAL   R14,SPACE1              Single Space
IPA339   LA    R5,8+2(,R5)             next entry in IPA table
         CLI   0(R5),X'FF'             end of table?
         BNE   IPA301                  no, process next entry
*endloop
         BAL   R14,BLANK1              blank line
.IPA999  ANOP
IPA999   END_PROC
         TITLE 'SHOWMVS &REL - Master JCL (IEEMSJCL)'
*---------------------------------------------------------------------*
*                                                                     *
*Master JCL (IEEMSJCL)                                                *
*                                                                     *
*  //MSTJCL00 JOB MSGLEVEL=(0,0)                                      *
*  //         EXEC PGM=IEEMB860,DPRTY=(15,15)                         *
*  //STCINRDR DD SYSOUT=(A,INTRDR)                                    *
*  //PROCLIB  DD DSN=SYS1.PROCLIB,DISP=SHR                            *
*                                                                     *
*---------------------------------------------------------------------*
MSTJCL00 BEGIN_PROC KW=MASTERJCL
         MVC   WKCELL3,=C'IEEMSJCL'    default name for SP2/SP3
         TM    HBB4410,L'HBB4410       ESA V4 or up?
         BZ    MSTJCL12                no, jump
         TM    MSTJCL_PARMLIB,L'MSTJCL_PARMLIB master JCL in PARMLIB?
         BO    MSTJCL40                yes, jump
         MVC   WKCELL3,=C'MSTJCL00'    default name for SP4
         L     R4,CVTMSER              Master Sched Resident Data Area
         ICM   R5,B'1111',MSSCHED-BASE(R4) SCHEDULER NIP PARAMETER LIST
         BZ    MSTJCL12                zero, jump
         USING SNPL,R5
         CLI   SCHEDJCL,C' '           MSTRCL in PARMLIB ?     JWMMAY96
         BE    MSTJCL40                yes, exit               JWMMAY96
         CLI   SCHEDJCL,0              MSTRCL=NN specified?
         BE    MSTJCL12                no, jump
         MVC   WKCELL3+6(2),SCHEDJCL   MEMBER NAME SUFFIX
*
         TM    HBB5510,L'HBB5510       ESA 5.1 ?
         BNO   MSTJCL12                no, jump
         LA    R0,WKCELL3              program name
         BAL   R14,DOBLDL2             issue BLDL (linklib)
         LTR   R15,R15                 found?
         BNZ   MSTJCL40                no, exit
*
MSTJCL12 STRING 'Master JCL (',WKCELL3,')',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R1,CVTLINK              SYS1.LINKLIB
         LOAD  EPLOC=WKCELL3,DCB=(1),ERRET=MSTJCL99
         LR    R3,R0                   first line
         SLR   R4,R4
         LA    R5,4095                 mask for "NR"
         NR    R5,R1                   size in double words
         D     R4,=F'10'               size in lines
*loop
MSTJCL31 MVC   LINE,BLANKS             blank out the line
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         BNO   MSTJCL34                no, jump
         LA    R14,80                  length
         IC    R15,OLDPKF              source key
         MVCK  LINE+4(R14),0(R3),R15   Move line to buffer
         B     MSTJCL35                continue
MSTJCL34 MVC   LINE+4(80),0(R3)        move a line
MSTJCL35 BAL   R14,SPACE1              next line
         LA    R3,80(,R3)              next card image
         BCT   R5,MSTJCL31             print JCL stmts
*endloop
         BAL   R14,BLANK1              blank line
         DELETE EPLOC=WKCELL3          delete IEEMSJCL
         B     MSTJCL99                continue
*
*        Master JCL was loaded from PARMLIB
*
MSTJCL40 STRING 'Master JCL was loaded from PARMLIB',INTO=LINE
         BAL   R14,SPACE2              Double Space
         AIF   (NOT D'CVTH5510).MSTJCL99
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   MSTJCL99                no, exit
         TM    HBB5510,L'HBB5510       running on ESA 510?
         BZ    MSTJCL99                no, jump
         LA    R1,1                    asid of *MASTER* ASCB
         LOCASCB ASID=(1)              GET ADDR OF *MASTER* ASCB
         LTR   R2,R1                   VALID ASID?
         BNP   MSTJCL99                NO, JUMP
         USING ASCB,R2
*
*        Print *MASTER* JCL (ESA 5.1 only)
*
         L     R3,ASCBASSB             ASSB address
         USING ASSB,R3
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        MSTR address space              X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
         LAM   R4,R4,ALET1             POINT TO MSTR ADDRESS SPACE
         CPYA  R5,R4                   POINT TO MSTR ADDRESS SPACE
         CPYA  R6,R4                   POINT TO MSTR ADDRESS SPACE
         CPYA  R7,R4                   POINT TO MSTR ADDRESS SPACE
         SAC   512                     AR mode
         L     R4,ASCBXTCB             current JS TCB
         L     R4,TCBJSCB-TCB(,R4)     current JSCB
         USING IEZJSCB,R4
         L     R5,JSCDSABQ             DSAB QDB
         USING DSABQDB,R5
         CLC   =C'DSAB',DSQDBID        am I lost?
         BNE   MSTJCL90                yes, quit
         L     R5,DSQFRSTP             FIRST DSAB ON CHAIN
         USING DSAB,R5
         L     R6,JSCBCSCB             CSCB address
         USING CHAIN,R6
         STRING '  //',CHPROCSN,' EXEC PGM=',JSCBPGMN,INTO=LINE
         BAL   R14,SPACE1              Single Space
*loop
MSTJCL51 L     R6,DSABSIOT             get SIOT address
         USING INDMSIOT,R6
         TM    SIOTBYT5,SIOTWTRN       Is program name a writer?
         BZ    MSTJCL52                No
         CLC   SCTOUTNM,=C'INTRDR  '   Is writer name valid for sysout
         BNE   MSTJCL52                no
         STRING '  //',SCTDDNAM,' DD SYSOUT=(',SCTOUTPN,',INTRDR)',    X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
         B     MSTJCL54
MSTJCL52 EQU   *
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         USING INFMJFCB,R7
         STRING '  //',SCTDDNAM,' DD DSN=',(JFCBDSNM,,T),INTO=LINE
         TM    JFCBIND1,JFCPDS         DO WE HAVE A MEMBER NAME?
         BZ    MSTJCL53                NO, JUMP
         STRING (LINE,,T),'(',(JFCBELNM,,T),')',INTO=LINE
MSTJCL53 EQU   *
         STRING (LINE,,T),',VOL=SER=',JFCBVOLS,INTO=LINE
         BAL   R14,SPACE1              Single Space
MSTJCL54 ICM   R5,B'1111',DSABFCHN     NEXT DSAB
         BNZ   MSTJCL51                Not finished yet, keep on going
*endloop
MSTJCL90 BAL   R14,BLANK1              Blank line
         SAC   0                       AR mode OFF
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.MSTJCL99 ANOP
MSTJCL99 END_PROC
*
         TITLE 'SHOWMVS &REL - Sub-System Vector Table'
*---------------------------------------------------------------------*
*                                                                     *
*Sub-system Vector Table:                                             *
*                                                                     *
*  JES2 00C0D288 1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 53 54*
*       JES2     SP 4.3.0 HJE4430  ,JES_NODE='APL1    ',JES_MEMBERNAME*
*  MSTR 00C2EEB8 4 5 6 8 9 10 12 14 15 32 33 48 50 54 63 68 72 73     *
*       MASTER   SP4.3.0  HBB4430  ,DYNAMIC_OUTPUT='NO'               *
*  SMS  00C2E2F0 8 15 55                                              *
*                                                                     *
*---------------------------------------------------------------------*
SUBSYSTM BEGIN_PROC KW=SUBSYSTEMS
         L     R4,CVTJESCT             JES COMM TABLE
         USING JESCT,R4
         STRING 'Sub-system Vector Table (',                           X
               (SUBSYSNO,H,L),' entries)',                             X
               INTO=LINE
         CLC   JESNRSS,SUBSYSNO        EXACT COUNT?
         BE    SUBSYS07                YES, JUMP
         LA    R1,LINE(R15)            end of text
         BCTR  R1,0                    overlay ")"
         STRING ', JESNRSS=',(JESNRSS,H,L),')',INTO=((R1),NEXTLINE)
SUBSYS07 EQU   *
         BAL   R14,SPACE2              Double Space
         L     R5,JESSSCT              FIRST JSCVT
         USING SSCT,R5
*
         STRING '  Name SSCTSSVT Function codes',INTO=LINE
         BAL   R14,SPACE1          <== next line
*LOOP
SUBSYS22 MVC   NEXTLINE,BLANKS
         ICM   R6,B'1111',SSCTSSVT     SUB-SYSTEM VECTOR TABLE
         BZ    SUBSYS70                INACTIVE SUB-SYSTEM
         USING SSVT,R6
         VALIDATE SSVT,ERRET=SUBSYS66  validate SSVT address
         LA    R1,1                    FIRST FUNCTION CODE
         LA    R2,256                  MAX NUMBER OF FUNCTIONS
         BALR  R3,0                    FIRST TIME SWITCH
*--LOOP
SUBSYS31 LA    R14,SSVTFCOD-1(R1)      point at function code
         CLI   0(R14),0                THIS BYTE OFF?
         BZ    SUBSYS34                YES, JUMP
         LTR   R3,R3                   START OF A NEW RANGE?
         BNM   SUBSYS37                NO, IGNORE
         LR    R3,R1                   1ST CODE IN RANGE
         CLI   NEXTLINE,C' '           FIRST RANGE?
         BE    SUBSYS33                YES, JUMP
         STRING (NEXTLINE,,L),',',((R3),,L),INTO=NEXTLINE
         B     SUBSYS37
SUBSYS33 EQU   *                       FIRST RANGE
         STRING ((R3),,L),INTO=NEXTLINE
         B     SUBSYS37
SUBSYS34 EQU   *                       END OF RANGE
         LTR   R3,R3                   PREV CODE ON?
         BM    SUBSYS37                NO, IGNORE
         BCTR  R1,0                    PREVIOUS CODE (END OF RANGE)
         CLR   R3,R1                   SINGLE-CODE RANGE?
         BE    SUBSYS36                YES, JUMP
         STRING (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
SUBSYS36 EQU   *
         LA    R1,1(,R1)               UNDO PREVIOUS "BCTR R1,0"
         BALR  R3,0                    PREV CODE WAS OFF
SUBSYS37 EQU   *
         LA    R1,1(,R1)               BUMP CURRENT FUNCTION CODE
         BCT   R2,SUBSYS31             NOT YET, PROCESS NEXT BYTE
*--ENDLOOP
         LTR   R3,R3                   PREV CODE ON?
         BM    SUBSYS39                NO, EXIT
         BCTR  R1,0                    PREVIOUS CODE (END OF RANGE)
         CLR   R3,R1                   SINGLE-CODE RANGE?
         BE    SUBSYS39                YES, EXIT
         STRING (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
SUBSYS39 EQU   *
*--ENDLOOP
         B     SUBSYS70
SUBSYS66 STRING ' SSVT could not be accessed',INTO=NEXTLINE
SUBSYS70 STRING 2X,SSCTSNAM,1X,(SSCTSSVT,,X),1X,NEXTLINE,INTO=LINE
         BAL   R14,SPACE1          <== next line
*
*        Get Sub-system Version Information
*
         AIF   (NOT D'CVTH4430).SPLVL79
         LA    R1,SSCTSNAM             POINT AT SUB-SYSTEM NAME
         BAL   R14,GET_SSVI         <- get SSVI info
         LTR   R15,R15                 supported by this sub-system?
         BNZ   SUBSYS79                no, jump
         USING SSVI,R1
         LH    R2,SSVIFLEN             length of fixed-length header
         LA    R2,SSVI(R2)             start of data
         USING SSVIVDAT,R2
         LH    R0,SSVIVLEN             length
         STRING 7X,SSVICNAM,1X,                                        X
               SSVIVERS,1X,                                            X
               SSVIFMID,1X,                                            X
               (SSVIDAT,(R0)),                                         X
               INTO=LINE
         BAL   R14,SPACE1              BLANK LINE
.SPLVL79 ANOP
*
SUBSYS79 ICM   R5,B'1111',SSCTSCTA     NEXT SSCVT
         BNZ   SUBSYS22
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - Primary Sub-system'
*---------------------------------------------------------------------*
*                                                                     *
*Primary Sub-system                                                   *
*                                                                     *
*   Name(JES2)  ASID(0017)  Started(1996-11-10 19.32)                 *
*                                                                     *
*   //IEFPROC  EXEC PGM=HASJES20                                      *
*   //PROC00   DD DSN=SYS1.PROCLIB,VOL=SER=RES430                     *
*   //         DD DSN=SYS2.TEST.PROCLIB,VOL=SER=CATVOL                *
*   //         DD DSN=PROD.PROCLIB,VOL=SER=CATVOL                     *
*   //ALTPARM  DD DSN=SYS1.PARMLIB(JES2PARM),VOL=SER=CATVOL           *
*   //SYS00001 DD DSN=SYS1.HASPCKP1,VOL=SER=SPOOL1                    *
*   //$SPOOL1  DD DSN=SYS1.HASPACE,VOL=SER=SPOOL1                     *
*                                                                     *
*---------------------------------------------------------------------*
PRISUB00 BEGIN_PROC KW=PRISUB
         STRING 'Primary Sub-system',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING  '  Name(',(PRISUBNM,,T),')',INTO=LINE
         CLC   PRISUBNM,PRISUBTY       NAME=TYPE?
         BE    PRISUB10                YES, DON'T PRINT TWICE
         STRING (LINE,,T),'  Type(',(PRISUBTY,,T),')',INTO=LINE
*
*        Locate the ASCB
*
PRISUB10 LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
*loop
PRISUB11 LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R2,R1                   VALID ASID?
         BNP   PRISUB18                NO, JUMP
         USING ASCB,R2
         ICM   R1,B'1111',ASCBJBNI     JOBNAME
         BNZ   PRISUB18                yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS     START/MOUNT/LOGON
         CLI   4(R1),C' '              4-byte name?
         BNE   PRISUB18                no - CONTINUE
         CLC   PRISUBNM,0(R1)          is this my ASCB ?
         BE    PRISUB21                yes, exit
PRISUB18 LA    R4,1(,R4)               bump ASID
         BCT   R5,PRISUB11             next address space
*endloop
         BAL   R14,SPACE2              Double Space
         STRING '  ASCB could not be located',INTO=LINE
         BAL   R14,SPACE2              Double Space
         B     PRISUB99                exit
*
*        Display ASID, start-up date & time
*
PRISUB21 EQU   *
         STRING (LINE,,T),'  ASID(',(ASCBASID,,X),')',INTO=LINE
         AIF   (NOT D'CVTH4410).PRISUB22
         LA    R1,ASCBINTS             Start time in STCK format
         BAL   R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING (LINE,,T),'  Started(',STCKDATE,                       X
               1X,(STCKTIME,5),                                        X
               ')',INTO=LINE
.PRISUB22 ANOP
         BAL   R14,SPACE2              Double Space
*
*        Print JES JCL (ESA only)
*
         AIF   (NOT D'CVTOSEXT).PRISUB99
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   PRISUB99                no, exit
         L     R3,ASCBASSB             ASSB address
         USING ASSB,R3
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        JES2 address space              X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
         LAM   R4,R4,ALET1             POINT TO JES2 ADDRESS SPACE
         CPYA  R5,R4                   POINT TO JES2 ADDRESS SPACE
         CPYA  R6,R4                   POINT TO JES2 ADDRESS SPACE
         CPYA  R7,R4                   POINT TO JES2 ADDRESS SPACE
         SAC   512                     AR mode
         L     R4,ASCBXTCB             current JS TCB
         L     R4,TCBJSCB-TCB(,R4)     current JSCB
         USING IEZJSCB,R4
         L     R5,JSCDSABQ             DSAB QDB
         USING DSABQDB,R5
         CLC   =C'DSAB',DSQDBID        am I lost?
         BNE   PRISUB90                yes, quit
         L     R5,DSQFRSTP             FIRST DSAB ON CHAIN
         USING DSAB,R5
         L     R6,JSCBCSCB             CSCB address
         USING CHAIN,R6
         STRING '  //',CHPROCSN,' EXEC PGM=',JSCBPGMN,INTO=LINE
         BAL   R14,SPACE1              Single Space
*loop
PRISUB51 L     R6,DSABSIOT             get SIOT address
         USING INDMSIOT,R6
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         USING INFMJFCB,R7
         STRING '  //',SCTDDNAM,' DD DSN=',(JFCBDSNM,,T),INTO=LINE
         TM    JFCBIND1,JFCPDS         DO WE HAVE A MEMBER NAME?
         BZ    PRISUB56                NO, JUMP
         STRING (LINE,,T),'(',(JFCBELNM,,T),')',INTO=LINE
PRISUB56 EQU   *
         STRING (LINE,,T),',VOL=SER=',JFCBVOLS,INTO=LINE
         BAL   R14,SPACE1              Single Space
PRISUB59 ICM   R5,B'1111',DSABFCHN     NEXT DSAB
         BNZ   PRISUB51                Not finished yet, keep on going
*endloop
PRISUB90 BAL   R14,BLANK1              Blank line
         SAC   0                       AR mode OFF
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.PRISUB99 ANOP
PRISUB99 END_PROC
         TITLE 'SHOWMVS &REL - TCAS Data'
*---------------------------------------------------------------------*
*                             This display requires APF-authorization *
*                                                                     *
*TCAS parameters                                                      *
*                                                                     *
*  USERMAX: 250     RCONLIM: 10                                       *
*                                                                     *
*---------------------------------------------------------------------*
TCAS00   BEGIN_PROC KW=TCAS,AUTH=YES
         L     R6,CVTTCASP             Addr of TCAS parameters
         USING TCAST,R6
         STRING 'TCAS parameters',INTO=LINE
         BAL   R14,SPACE2              Double Space
         MODESET EXTKEY=VTAM,SAVEKEY=(2) switch to KEY=6
         LH    R4,TCASUMAX             Max users
         LH    R5,TCASRCON             Recon limit
         MODESET KEYREG=(2)            switch back to own key
         STRING '  USERMAX: ',((R4),,L8),                              X
               'RCONLIM: ',((R5),,L8),INTO=LINE
         BAL   R14,SPACE2              Double Space
TCAS99   END_PROC
         TITLE 'SHOWMVS &REL - TSO/E Parmlib Data'
*---------------------------------------------------------------------*
*                                                           TSO/E 1.4 *
*TSO Parmlib data                                                     *
*                                                                     *
*  Member(IKJTSO00)                                                   *
*                                                                     *
*  Authcmd  +                                                         *
*     Names ( +                                                       *
*         RECEIVE  TRANSMIT XMIT     LISTB    LISTBC   SEND +         *
*         ALTUSER  BLKUPD   CONNECT  CONSOLE  CONSOLE  DELDSD +       *
*         PARMLIB  LISTUSER SEARCH   TMONMVS  VLFNOTE  VLFNOTE  )     *
*                                                                     *
*  Authpgm  +                                                         *
*     Names ( +                                                       *
*         IEBCOPY  ICHUT100 ICHUT200 ICHUT400 IRRUT100 IRRUT200 +     *
*         IRRDSC00 ICHDSM00 OMEGAMON OBROUTR  OBSPFAU  DGA0TSO  )     *
*                                                                     *
*  Notbkgnd +                                                         *
*     Names ( +                                                       *
*         OPER     OPERATOR TERM     TERMINAL )                       *
*                                                                     *
*  Authtsf  +                                                         *
*     Names ( +                                                       *
*         IEBCOPY  IKJEFF76 )                                         *
*                                                                     *
*  Platpgm  +                                                         *
*     Names ( +                                                       *
*         IEFBR14  IKJEFF76 )                                         *
*                                                                     *
*  Platcmd  +                                                         *
*     Names ( +                                                       *
*         ALLOCATE ALLOC    ALTLIB   IKJADLIB ATTRIB   ATTR     CALL  *
*         IKJEFFCA SUBMIT   SUB      SYNC     TRANSMIT XMIT     )     *
*                                                                     *
*  Transrec  +                                                        *
*     Nodesmf ( +                                                     *
*              (*,*) +                                                *
*             ) +                                                     *
*     Spoolcl(B)   Sysout(*) +                                        *
*     Cipher(NO) +                                                    *
*     Outwarn(20000,20000)  Outlim(500000) +                          *
*     Vio(VIO     ) +                                                 *
*     Logsel(LOG     ) +                                              *
*     Logname(MISC   ) +                                              *
*     Usrctl(NAMES.TEXT                                 ) +           *
*     Sysctl(SYS1.USER.NAMES                             ) +          *
*     Daprefix(TUPREFIX)                                              *
*                                                                     *
*  Send +                                                             *
*     Opersend(ON) +                                                  *
*     Usersend(ON) +                                                  *
*     Save(ON) +                                                      *
*     Chkbrod(OFF) +                                                  *
*     Usebrod(ON) +                                                   *
*     Msgprotect(ON) +                                                *
*     Logname(BRODCAST) +                                             *
*     Sysplexshr(ON) +                                                *
*     Opersewait(ON)                                                  *
*                                                                     *
*  Help  +                                                            *
*     ENU( +                                                          *
*         SYS1.HELP )                                                 *
*                                                                     *
*  Console  +                                                         *
*     Initunum(1000)  Initsnum(1000)  Maxunum(10000)  Maxsnum(10000)  *
*                                                                     *
*  Test  +                                                            *
*     Tsocmd( +                                                       *
*         ) +                                                         *
*     Subcmd( +                                                       *
*           )                                                         *
*                                                                     *
*  Allocate  +                                                        *
*     default(SHR)                                                    *
*                                                                     *
*---------------------------------------------------------------------*
IKJTSO00 BEGIN_PROC KW=TSO
         L     R2,CVTTVT
         USING TSVT,R2
         CLC   =C'1040',TSVTTSOL       TSO/E 1.4 OR HIGHER?
         BH    IKJTSO99                NO, EXIT
         L     R3,TSVTTPVT             TSO/PARMLIB vector table
         USING TPVT,R3
         CLC   =C'TPVT',TPVT_ID        ARE WE LOST?
         BNE   IKJTSO99                YES, EXIT
         L     R4,TPVTCTLT             Control table
         USING CTLT,R4
         STRING 'TSO Parmlib data',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Member(',TPVT_MEM,')',INTO=LINE   (IKJTSOxx)
         CLC   =C'2060',TSVTTSOL       TSO/E 2.6 OR HIGHER?
         BNH   IKJTSO17                YES,JUMP
         STRING '  Member(',TPVT_MEM1,')',INTO=LINE  (IKJTSOxx)
IKJTSO17 EQU   *
         BAL   R14,SPACE2              Double Space
*
*        Auth tables
*
         CLC   =C'CTLT',CTLT_ID        ARE WE LOST?
         BNE   IKJTSO29                YES, EXIT
         LA    R5,CTLTTE2              A(IKJEFTE2)
         BAL   R7,IKJTSO20
         DC    C'Authcmd '             E2
         DC    C'Authpgm '             E8
         DC    C'Notbkgnd'             NS
         DC    C'Authtsf '             AP
         DC    H'-1'
*loop
IKJTSO20 STRING 2X,((R7),8),' +',INTO=LINE
         BAL   R14,SPACE1          <== yes, print it
         STRING '     Names ( +',INTO=LINE
         BAL   R14,SPACE1          <== next line
         MVC   LINE,BLANKS             blank out next line
         LA    R6,LINE                 first entry
         LH    R0,8(,R5)               # of entries
         LTR   R0,R0                   any entry in this table?
         BNP   IKJTSO27                no, exit
         L     R1,0(,R5)               start of table
         LA    R1,16(,R1)              skip table header
*--loop
IKJTSO21 CLI   11(R5),8                entry length is 8?
         BE    IKJTSO22                yes, jump
         LA    R1,2(,R1)               skip 2 bytes
IKJTSO22 CLI   0(R1),C' '              blank entry?
         BE    IKJTSO24                yes, jump
         LA    R14,9                   increment in print line
         LA    R15,LINE+70             end of line
         BXLE  R6,R14,IKJTSO23         this line full?
         MVI   0(R6),C'+'              continuation
         BAL   R14,SPACE1          <== yes, print it
         MVC   LINE,BLANKS             blank out next line
         LA    R6,LINE+9               continuation
IKJTSO23 MVC   0(8,R6),0(R1)           move name
IKJTSO24 LA    R1,8(,R1)               next entry
         BCT   R0,IKJTSO21             not finished yet, loop more
*--endloop
IKJTSO27 EQU   *
         MVI   9(R6),C')'              close parenthsis
         BAL   R14,SPACE2              Double Space
         LA    R5,CTLTTE8-CTLTTE2(,R5) next table
         LA    R7,8(,R7)               next name
         CLI   0(R7),X'FF'             last table processed?
         BL    IKJTSO20                not yet, process next one
*endloop
IKJTSO29 EQU   *
*
*        Platform Programs
*
         L     R4,TPVTPPVEC            Control table           JWMMAY96
         USING PPVE,R4                                         JWMMAY96
         CLC   =C'PPVE',PPVE_ID        ARE WE LOST?            JWMMAY96
         BNE   IKJTSO39                YES, EXIT               JWMMAY96
         STRING '  Platpgm  +',INTO=LINE                       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING '     Names ( +',INTO=LINE                     JWMMAY96
         BAL   R14,SPACE1          <== next line               JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R0,PPVE_COUNT           # of entries            JWMMAY96
         LA    R1,PPVE_ENTRY           start of table          JWMMAY96
*loop
IKJTSO32 CLI   0(R1),C' '              blank entry?            JWMMAY96
         BE    IKJTSO35                yes, jump               JWMMAY96
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BXLE  R6,R14,IKJTSO34         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BAL   R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO34 MVC   0(8,R6),0(R1)           move name               JWMMAY96
IKJTSO35 LA    R1,8(,R1)               length of an entry      JWMMAY96
         BCT   R0,IKJTSO32                                     JWMMAY96
*endloop
         MVI   9(R6),C')'              close parenthsis        JWMMAY96
         BAL   R14,SPACE2              Double Space            JWMMAY96
IKJTSO39 EQU   *
*
*        Platform Commands
*
         L     R4,TPVTFCVEC            Control table           JWMMAY96
         USING FCVE,R4                                         JWMMAY96
         CLC   =C'FCVE',FCVE_ID        ARE WE LOST?            JWMMAY96
         BNE   IKJTSO49                YES, EXIT               JWMMAY96
         STRING '  Platcmd  +',INTO=LINE                       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING '     Names ( +',INTO=LINE                     JWMMAY96
         BAL   R14,SPACE1          <== next line               JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R0,FCVE_COUNT           # of entries            JWMMAY96
         LA    R1,FCVE_ENTRY           start of table          JWMMAY96
*loop
IKJTSO42 CLI   0(R1),C' '              blank entry?            JWMMAY96
         BE    IKJTSO45                yes, jump               JWMMAY96
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BXLE  R6,R14,IKJTSO44         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BAL   R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO44 MVC   0(8,R6),0(R1)           move name               JWMMAY96
IKJTSO45 LA    R1,8(,R1)               length of an entry      JWMMAY96
         BCT   R0,IKJTSO42                                     JWMMAY96
*endloop
         MVI   9(R6),C')'              close parenthsis        JWMMAY96
         BAL   R14,SPACE2              Double Space            JWMMAY96
IKJTSO49 EQU   *
*
*        Transmit/Receive
*
         L     R4,TPVTXPRMD            Inmxparm table          JWMMAY96
         USING XPRM,R4                                         JWMMAY96
         CLC   =C'INMXPARM',XPRM_ID    ARE WE LOST?            JWMMAY96
         BNE   IKJTSO59                YES, EXIT               JWMMAY96
*
*        Reformat INMXPARM before HTE26D2 (OS/390 V2R4)
*
         CLC   TSVTTSOL,=C'2060'       HTE26D2 or above?
         BNL   IKJTSO50X               yes, exit
         BAL   R14,WORKADDR            get work area
         LH    R2,XPRM_LEN             length of old-format XPRM
         LA    R2,XPRM(R2)             convert length to end-address
         L     R7,XPRM_NJE_START       Start of nje/smf pairs
         STRING (XPRM,XPRM_VERS),      HEADER                          X
               X'01000000',            XPRM_VERS=1                     X
               (XPRM_WARN1-4,XPRM_SPOOLCL+1-4),                        X
               INTO=((R1),256)
         LR    R4,R1                   point base reg to new area
******** STH   R15,XPRM_LEN            STORE NEW LENGTH
IKJTSO50X EQU  *
*
         STRING '  Transrec  +',INTO=LINE                      JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Nodesmf ( +',INTO=LINE                     JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         L     R7,XPRM_NJE_START       Start of nje/smf pairs  JWMMAY96
         USING XPRM_NODE,R7                                    JWMMAY96
         LH    R0,XPRM_NJE#            Count of pairs          JWMMAY96
*loop
IKJTSO51 STRING 14X,'(',                                       JWMMAY96X
               (XPRM_NODE,,T),',',(XPRM_SMF,,T),') +',         JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,XPRM_NS_L(,R7)       Next pair               JWMMAY96
         BCT   R0,IKJTSO51             Skip to next pair       JWMMAY96
*endloop
         STRING 13X,') +',INTO=LINE                            JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         DROP  R7                                              JWMMAY96
         STRING 5X,'Spoolcl(',XPRM_SPOOLCL,                    JWMMAY96X
               ')   Sysout(',XPRM_SOUT,') +',INTO=LINE         JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'NO    '           Cipher(NO)              JWMMAY96
         TM    XPRM_SW,XPRM_CIPHER_NO Cipher - no?             JWMMAY96
         BO    IKJTSO52                YES, JUMP               JWMMAY96
         LA    R7,=C'YES   '           NO, Cipher(YES)         JWMMAY96
         TM    XPRM_SW,XPRM_CIPHER_YES Cipher - yes?           JWMMAY96
         BO    IKJTSO52                YES, JUMP               JWMMAY96
         LA    R7,=C'ALWAYS'           NO, Cipher(ALWAYS)      JWMMAY96
IKJTSO52 STRING 5X,'Cipher(',((R7),6,T),') +',INTO=LINE        JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Outwarn(',(XPRM_WARN1,F,L),',',            JWMMAYl5X
               (XPRM_WARN2,F,L),')',                           JWMMAY96X
               '  Outlim(',(XPRM_LIM,F,L),') +',INTO=LINE      JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         MVC   WORK256(L'XPRM_VIO_U),XPRM_VIO_U                JWMMAY96
         OC    WORK256(L'XPRM_VIO_U),BLANKS  X'00' -> X'40'    JWMMAY96
         STRING 5X,'Vio(',(WORK256,L'XPRM_VIO_U,T),') +',      JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Logsel(',(XPRM_LOGSEL,,T),INTO=LINE
         LA    R1,LINE(R15)            Point to end of text
         BCTR  R1,0                    Point to last char
         MVC   0(3,R1),=C') +'         LOGSEL(LOG. -> LOGSEL(LOG) +
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Logname(',                                 JWMMAY96X
               (XPRM_LOGNAME+1,L'XPRM_LOGNAME-1,T),            JWMMAY96X
               ') +',INTO=LINE                                 JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Usrctl(',(XPRM_USRCTL+1,L'XPRM_USRCTL-1,T),        X
               ') +',INTO=LINE                                 JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         MVC   WORK256(L'XPRM_SYSCTL),XPRM_SYSCTL              JWMMAY96
         OC    WORK256(L'XPRM_SYSCTL),BLANKS   X'00' -> X'40'  JWMMAY96
         STRING 5X,'Sysctl(',(WORK256,L'XPRM_SYSCTL,T),') +',  JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'USERID  '         DAPREFIX = USERID       JWMMAY96
         TM    XPRM_SW,XPRM_USERID     Is it true              JWMMAY96
         BO    IKJTSO56                YES, JUMP               JWMMAY96
         LA    R7,=C'TUPREFIX'         DAPREFIX = TUPREFIX     JWMMAY96
IKJTSO56 STRING 5X,'Daprefix(',((R7),8,T),')',INTO=LINE        JWMMAY96
         BAL   R14,SPACE2              Double Space            JWMMAY96
*
         L     R4,TPVTSEND             IKJEESCB table          JWMMAY96
         USING IKJEESCB,R4                                     JWMMAY96
         CLC   =C'IKJEESCB',EESCB_IDENTIFIER ARE WE LOST?      JWMMAY96
         BNE   IKJTSO59                YES, EXIT               JWMMAY96
         STRING '  Send +',INTO=LINE                           JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Opersend(ON)            JWMMAY96
         TM    EESCB_FLAGS_1,X'80'     This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Opersend(OFF)       JWMMAY96
         STRING 5X,'Opersend(',((R7),3,T),') +',INTO=LINE      JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Usersend(ON)            JWMMAY96
         TM    EESCB_FLAGS_1,X'40'     This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Usersend(OFF)       JWMMAY96
         STRING 5X,'Usersend(',((R7),3,T),') +',INTO=LINE      JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Save(ON)                JWMMAY96
         TM    EESCB_FLAGS_1,X'20'     This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Save(OFF)           JWMMAY96
         STRING 5X,'Save(',((R7),3,T),') +',INTO=LINE          JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Chkbrod(ON)             JWMMAY96
         TM    EESCB_FLAGS_1,X'10'     This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Chkbrod(OFF)        JWMMAY96
         STRING 5X,'Chkbrod(',((R7),3,T),') +',INTO=LINE       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Usebrod(ON)             JWMMAY96
         TM    EESCB_FLAGS_1,X'08'     This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Usebrod(OFF)        JWMMAY96
         STRING 5X,'Usebrod(',((R7),3,T),') +',INTO=LINE       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Msgprotect(ON)          JWMMAY96
         TM    EESCB_FLAGS_1,X'04'     This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Msgprotect(OFF)     JWMMAY96
         STRING 5X,'Msgprotect(',((R7),3,T),') +',INTO=LINE    JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,'Logname(',(EESCB_LOGNAME,,T),') +',        JWMMAY96x
               INTO=LINE                                       JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Sysplexshr(ON)          JWMMAY96
         TM    EESCB_FLAGS_1,X'02'     This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Sysplexshr(OFF)     JWMMAY96
         STRING 5X,'Sysplexshr(',((R7),3,T),') +',INTO=LINE    JWMMAY96
         BAL   R14,SPACE1              Single Space            JWMMAY96
         LA    R7,=C'ON '              Opersewait(ON)          JWMMAY96
         TM    EESCB_FLAGS_1+1,X'80'   This flag on ?          JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OFF'              NO, Opersewait(OFF)     JWMMAY96
         STRING 5X,'Opersewait(',((R7),3,T),')',INTO=LINE      JWMMAY96
*
         L     R4,TPVTHELP             IKJEFHCB table          JWMMAY96
         USING HELP,R4                                         JWMMAY96
         CLC   =C'IKJEFHCB',HELP_ID    ARE WE LOST?            JWMMAY96
         BNE   IKJTSO59                YES, EXIT               JWMMAY96
         BAL   R14,SPACE2              Double Space            JWMMAY96
         STRING '  Help  +',INTO=LINE                          JWMMAY96
         L     R7,HELP_LANG_CNT        Number of lang entries  JWMMAY96
         LA    R1,HELP_LANG_ENTRY      First lang entry        JWMMAY96
         USING HELP_LANG_ENTRY,R1                              JWMMAY96
*loop
IKJTSO57 BAL   R14,SPACE1              Single Space            JWMMAY96
         STRING 5X,HELP_LANG_TYPE,'( +',INTO=LINE              JWMMAY96
         SR    R0,R0                   clear work reg          JWMMAY96
         IC    R0,HELP_DSN_COUNT       Count of dsn's          JWMMAY96
         LA    R2,HELP_DSN_ENTRY                               JWMMAY96
         USING HELP_DSN_ENTRY,R2                               JWMMAY96
*--loop
IKJTSO58 BAL   R14,SPACE1              Single space            JWMMAY96
         MVC   WORK256(44),HELP_DSN    Move the dsn            JWMMAY96
         OC    WORK256(44),BLANKS      X'00' -> X'40'          JWMMAY96
         STRING 9X,(WORK256,44,T),' +',INTO=LINE               JWMMAY96
         LA    R2,HELP_END_ENTRY       Skip this entry         JWMMAY96
         BCT   R0,IKJTSO58             Next dsn                JWMMAY96
*--end loop
         LA    R15,LINE(R15)           end of dsm              JWMMAY96
         BCTR  R15,R0                                          JWMMAY96
         MVC   0(3,R15),=C') +'                                JWMMAY96
         L     R1,HELP_NEXT_LANG_ENTRY Next entry              JWMMAY96
         BCT   R7,IKJTSO57                                     JWMMAY96
*endloop
         MVI   2(R15),C' '             Remove last '+'         JWMMAY96
         BAL   R14,SPACE2              Double Space            JWMMAY96
         L     R4,TPVTCONSOLE          IKJCNPRM table          JWMMAY96
         USING CNPRM,R4                                        JWMMAY96
         CLC   =C'IKJCNPRM',CNPRM_ID   ARE WE LOST?            JWMMAY96
         BNE   IKJTSO59                YES, EXIT               JWMMAY96
         STRING '  Console  +',INTO=LINE                       JWMMAY96
         BAL   R14,SPACE1              Single space            JWMMAY96
         STRING 5X,                                            JWMMAY96X
               'Initunum(',(CNPRM_INITUNUM,F,L),')  ',         JWMMAY96X
               'Initsnum(',(CNPRM_INITSNUM,F,L),')  ',         JWMMAY96X
               'Maxunum(',(CNPRM_MAXUNUM,F,L),')  ',           JWMMAY96X
               'Maxsnum(',(CNPRM_MAXSNUM,F,L),')  ',           JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BAL   R14,SPACE2              Double space            JWMMAY96
IKJTSO59 EQU   *
*
*        TSO TEST
*
         L     R4,TPVTTEST             TPT table               JWMMAY96
         USING TPT,R4                                          JWMMAY96
         CLC   =C'TPT ',TPT_ID         ARE WE LOST?            JWMMAY96
         BNE   IKJTSO69                YES, EXIT               JWMMAY96
         STRING '  Test  +',INTO=LINE                          JWMMAY96
         BAL   R14,SPACE1              Single space            JWMMAY96
         STRING 5X,'Tsocmd( +',INTO=LINE                     JWMMAY96
         BAL   R14,SPACE1              Single space            JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R5,TPT_TCT_ENTRY        A(TCT table)            JWMMAY96
         USING TCT_TEST,R5                                     JWMMAY96
         CLC   =C'TCT ',TCT_ID         ARE WE LOST?            JWMMAY96
         BNE   IKJTSO69                YES, EXIT               JWMMAY96
         L     R0,TPT_TCT_LENGTH       Load length of C.B.     JWMMAY96
         SRL   R0,3                    Divide by 8             JWMMAY96
         LA    R1,TCT_TSOCMD                                   JWMMAY96
         USING TCT_TSOCMD,R1                                   JWMMAY96
*--loop
IKJTSO62 CLI   0(R1),C' '              blank entry?            JWMMAY96
         BE    IKJTSO65                yes, jump               JWMMAY96
         LA    R14,9                   increment in print line JWMMAY96
         LA    R15,LINE+70             end of line             JWMMAY96
         BXLE  R6,R14,IKJTSO64         this line full?         JWMMAY96
         MVI   0(R6),C'+'              continuation            JWMMAY96
         BAL   R14,SPACE1          <== yes, print it           JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE+9               continuation            JWMMAY96
IKJTSO64 MVC   0(8,R6),TCT_TSOCMD      move name               JWMMAY96
IKJTSO65 LA    R1,TCT_ENTRY_END        length of an entry      JWMMAY96
         BCT   R0,IKJTSO62                                     JWMMAY96
*--end loop
         MVC   9(3,R6),=C') +'         close parenthsis        JWMMAY96
         BAL   R14,SPACE1          <== yes, print it           JWMMAY96
         STRING 5X,'Subcmd( +',INTO=LINE                       JWMMAY96
         BAL   R14,SPACE1              Single space            JWMMAY96
         MVC   LINE,BLANKS             blank out next line     JWMMAY96
         LA    R6,LINE                 first entry             JWMMAY96
         L     R5,TPT_SCT_ENTRY        A(TCT table)            JWMMAY96
         USING SCT_TEST,R5                                     JWMMAY96
         CLC   =C'SCT ',SCT_ID         ARE WE LOST?            JWMMAY96
         BNE   IKJTSO69                YES, EXIT               JWMMAY96
         L     R0,TPT_SCT_LENGTH       Load length of C.B.     JWMMAY96
         SRL   R0,4                    Divide by 16            JWMMAY96
         LA    R1,SCT_SUBCMD                                   JWMMAY96
         USING SCT_SUBCMD,R1                                   JWMMAY96
*--loop
IKJTSO67 CLI   0(R1),C' '              blank entry?            JWMMAY96
         BE    IKJTSO68                yes, jump               JWMMAY96
         STRING 9X,'(',SCT_SUBCMD,' ',SCT_PGM,') +',           JWMMAY96X
               INTO=LINE                                       JWMMAY96
         BAL   R14,SPACE1              Single space            JWMMAY96
IKJTSO68 LA    R1,SCT_ENTRY_END        length of an entry      JWMMAY96
         BCT   R0,IKJTSO67                                     JWMMAY96
*--end loop
         STRING 11X,')',INTO=LINE                              JWMMAY96
         BAL   R14,SPACE2              Double space            JWMMAY96
IKJTSO69 EQU   *
*
*        Allocate Command
*
         L     R4,TPVTALPL             ALPL table              JWMMAY96
         USING ALPL,R4                                         JWMMAY96
         CLC   =C'ALPL',ALPL_ID        ARE WE LOST?            JWMMAY96
         BNE   IKJTSO79                YES, EXIT               JWMMAY96
         STRING '  Allocate  +',INTO=LINE                      JWMMAY96
         BAL   R14,SPACE1              Single space            JWMMAY96
         LA    R7,=C'SHR'              Opersewait(ON)          JWMMAY96
         TM    ALPL_FLAG,ALPL_SHR      Alloc(SHR) ?            JWMMAY96
         BO    *+8                     YES, JUMP               JWMMAY96
         LA    R7,=C'OLD'              NO, Opersewait(OFF)     JWMMAY96
         STRING 5X,'default(',((R7),3,T),')',INTO=LINE         JWMMAY96
         BAL   R14,SPACE2              Double space            JWMMAY96
IKJTSO79 EQU   *
*
IKJTSO99 END_PROC
         TITLE 'SHOWMVS &REL - TSO/E Exits and Tables'
*---------------------------------------------------------------------*
*                                                                     *
*TSO Exits and Tables                                                 *
*                                                                     *
*  Name      Type   Origin   Address                                  *
*  IKJEFTE2  Table  Steplib  80341234                                 *
*  IKJEFTE8  Table  Linklib  80341234                                 *
*  INMXZ21R  Exit   Parmlib  80341234                                 *
*  IRXTINIT  Exit   LPA      80341234                                 *
*                                                                     *
*---------------------------------------------------------------------*
EXTAB00  BEGIN_PROC KW=TSO
         L     R3,CVTTVT
         USING TSVT,R3
         CLC   =C'2020',TSVTTSOL       TSO/E 2.2 OR HIGHER?
         BH    EXTAB99                 NO, EXIT
         L     R4,TSVTETVP             EXIT/TABLE VECTOR
         USING EXTAB_VECT,R4
         CLC   =C'EXTV',EXTV_ID        am I lost?
         BNE   EXTAB99                 yes, exit
         L     R5,EXTV_ENTRY#          number of entries
         STRING 'TSO Exits and Tables',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Name      Type   Origin   Address',INTO=LINE
         BAL   R14,SPACE1              Single Space
*loop
EXTAB21  CLI   EXTV_FLAG1,0            This entry active?
         BE    EXTAB27                 no, ignore it
         LA    R6,=C'Table'            type
         CLC   =C'IKJEFT',EXTV_ENT_NAME is this a table?
         BE    *+8                     yes, jump
         LA    R6,=C'Exit '            type
         TM    EXTV_FLAG1,EXTV_FLAG1_LPA
         BNO   *+8
         LA    R7,=CL7'LPA'            Origin
         TM    EXTV_FLAG1,EXTV_FLAG1_LNKLST
         BNO   *+8
         LA    R7,=CL7'Linklib'        Origin
         TM    EXTV_FLAG1,EXTV_FLAG1_STEPLIB
         BNO   *+8
         LA    R7,=CL7'Steplib'        Origin
         STRING 2X,EXTV_ENT_NAME,2X,   name                            X
               ((R6),5),2X,            type                            X
               ((R7),7),1X,            origin                          X
               (EXTV_LOAD_ADDR,,X),    address                         X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
EXTAB27  EQU   *
         LA    R4,L'EXTV_ENT(,R4)      next entry
         BCT   R5,EXTAB21
*endloop
         BAL   R14,BLANK1              Blank line
EXTAB99  END_PROC
         TITLE 'SHOWMVS &REL - RACF Data'
*---------------------------------------------------------------------*
*                                                                     *
*RACF Data                                                            *
*                                                                     *
*  SYS1.RACF                            SYSCAT  Active Master Primary *
*  SYS1.UADS                            SYSCAT  TSO                   *
*                                                                     *
*  Password expires after 30 days;   ID revoked after 3 tries.        *
*                                                                     *
*  Started procedures table (ICHRIN03)                                *
*                                                                     *
*    JES2     MVSSTC   MVSID    / Privileged                          *
*    LLA      MVSSTC   MVSID    / Privileged                          *
*                                                                     *
*  Authorized program table (ICHAUTAP)                                *
*                                                                     *
*    AMASPZAP MVSSTC   MVSID    / Privileged                          *
*                                                                     *
*---------------------------------------------------------------------*
RACFDATA BEGIN_PROC KW=RACF
         L     R7,CVTRAC               RACF VECTOR TABLE
         USING RCVT,R7
         CLC   RCVTID,=C'RCVT'         Is this RACF?
         BNE   RACFD70                 no, prevent S0C4
         STRING 'RACF Data:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         TM    RCVTSTAT,RCVTRNA        inactive?
         BO    RACFD91                 no, active
         TM    RCVTFLGS,RCVTROFF       deactivated?
         BO    RACFD92                 yes, exit
RACFD10  L     R5,RCVTDSDT             DSN table
         USING DSDT,R5
         CLC   DSDTID,=C'DSDT'         Is this RACF?
         BNE   RACFD70                 no, prevent S0C4
         L     R2,DSDTNUM              number of table entries
         SLL   R2,1                    each consists of 2 entries
         CLI   DSDTVRSN,X'01'          Version 1?
         BE    RACFD16                 yes, jump
         LA    R6,DSDTENTY2            start of table               2.1
         B     RACFD21                 no, jump
RACFD16  LA    R6,DSDTENTY1            start of table               1.9
         USING DSDE,R6
*loop
RACFD21  L     R3,DSDERUCB             UCB pointer
         USING UCBOB,R3
         TM    DSDESTAT,DSDEACTV       Active?
         BNO   RACFD25                 no, ignore
         STRING 2X,DSDEDSN,1X,UCBVOLI,INTO=LINE
         LA    R4,LINE+2(R15)          status
        #STATUS DSDESTAT,DSDEACTV,'Active'
        #STATUS DSDESTAT,DSDEMSTR,'Master'
        #STATUS DSDESTAT,DSDEPRIM,'Primary'
         TM    DSDESTAT,DSDEPRIM       was primary?
         BO    *+L'*+6                 yes
         MVC   0(7,R4),=C'Back-up'     no, show it
         BAL   R14,SPACE1          <== yes, next line
RACFD25  EQU   *
         CLI   DSDTVRSN,X'01'          Version 1?
         BE    RACFD26                 yes, jump
         LA    R6,L'DSDENT2(,R6)       bump to next                2.1
         B     RACFD29
RACFD26  LA    R6,L'DSDENT1(,R6)       bump to next                1.9
RACFD29  BCT   R2,RACFD21
*endloop
         DROP  R5,R6                   DSDT,DSDE
RACFD30  CLI   RCVTUADS,0              TSO?
         BE    RACFD50                 no
         STRING 2X,RCVTUADS,1X,RCVTUVOL,INTO=LINE
         LA    R4,LINE+2(R15)          show it
         MVC   0(3,R4),=C'TSO'
         BAL   R14,SPACE2              Double Space
*
         STRING '  Passwords expire after ',(RCVTPINV,FL1,L),' days  ',X
               '(warning period is ',(RCVTWARN,FL1,L),' days)',        X
               INTO=LINE
         BAL   R14,SPACE1              next line
         STRING '  Number of password generations: ',(RCVTHIST,FL1,L6),X
               INTO=LINE
         BAL   R14,SPACE1              next line
         STRING '  ID revoked after ',(RCVTRVOK,FL1,L),' tries.',      X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        ICHRIN03 (Authorized procedures)
*        see SYS1.SAMPLIB(RACTABLE)
*
RACFD50  ICM   R5,B'1111',RCVTSPT      ICHRIN03 table
         BZ    RACFD60                 none
         LH    R6,0(,R5)               number of entries
         SLL   R6,17                   clear out format flag
         SRL   R6,17                   # of entries in low 15 bits
         LTR   R6,R6                   any entry in this table?
         BZ    RACFD60                 none, exit
         STRING '  Started procedures table (ICHRIN03)',INTO=LINE
         BAL   R14,SPACE2              Double Space
         LA    R3,2(,R5)               first entry
         SLR   R2,R2                   Initialize counter
*loop
RACFD51  LA    R2,1(,R2)               count entries
         STRING ((R2),,R6B),2X,(0(R3),8),1X,(8(R3),8),1X,(16(R3),8),   X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of garbage if hdr is bad
         TM    0(R5),X'80'             new format?
         BZ    RACFD52                 no, old
         LA    R4,LINE+1(R15)
         MVI   0(R4),C'/'
         LA    R4,2(R4)                status
        #STATUS 24(R3),BIT0,'Privileged'
        #STATUS 24(R3),BIT1,'Trusted'
RACFD52  BAL   R14,SPACE1          <== next line
         LA    R3,24(,R3)              next entry
         TM    0(R5),X'80'             new format?
         BZ    RACFD55                 no, old
         LA    R3,8(,R3)               yes
RACFD55  BCT   R6,RACFD51              loop if more
*endloop
         BAL   R14,BLANK1              blank line
*
RACFD60  ICM   R5,B'1111',RCVTAUTP     ICHAUTAB table
         BZ    RACFD99                 none
         USING RCATABLE,R5
         CLI   RCNAME,C' '             empty (last entry)?
         BE    RACFD99                 yes, none
         STRING '  Authorized program table (ICHAUTAP)',INTO=LINE
         BAL   R14,SPACE2              Double Space
         SLR   R2,R2                   Initialize counter
*loop
RACFD61  LA    R2,1(,R2)               count entries
         STRING ((R2),,R6B),2X,RCNAME,INTO=LINE
         TM    RCFLAGS,RCINIT+RCRSV    any flag on?
         BZ    RACFD62                 no, jump
         LA    R4,LINE+1(R15)          point past pgm name
         MVI   0(R4),C'/'              separator
         LA    R4,2(,R4)               authorization
        #STATUS RCFLAGS,RCINIT,'RACINIT'
        #STATUS RCFLAGS,RCRSV,'RACLIST'
RACFD62  LA    R5,RCATABLE+12          next entry
         BAL   R14,SPACE1          <== next line
         CLI   0(R5),C' '              last entry?
         BNE   RACFD61                 no
*endloop
         B     RACFD98
*
*        ACF2
*
RACFD70  CLC   RCVTID,=C'ACF2'         Is this ACF2?
         BNE   RACFD80                 no, jump
         B     RACFD99
*
*        TOP-Secret
*
RACFD80  CLC   RCVTID,=C'RTSS'         Is this Top-secret?
         BNE   RACFD99                 no, jump
         B     RACFD99
*
RACFD91  STRING '  RACF is inactive',INTO=LINE
         B     RACFD97
RACFD92  STRING '  RACF has been deactivated by a RVARY command',      X
               INTO=LINE
*
RACFD97  BAL   R14,SPACE1          <== next line
RACFD98  BAL   R14,BLANK1              blank line
RACFD99  END_PROC
*---------------------------------------------------------------------*
         TITLE 'SHOWMVS &REL - Address Space Usage'
*---------------------------------------------------------------------*
*                                                                     *
*Address Space Usage                                                  *
*                                                                     *
*                          Total         In use      Available        *
*                                                                     *
*  Address spaces            250             99            151        *
*    Started/SASI              5              0              5        *
*    Non-reusable              5              1              4        *
*             Bad             15                                      *
*                                                                     *
*---------------------------------------------------------------------*
USERS    BEGIN_PROC KW=USERS
         L     R6,CVTASVT
         USING ASVT,R6
         STRING 'Address Space Usage',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING 26X,'Total',9X,'In use',6X,'Available',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R1,ASVTMAXI             MAXUSER
         SL    R1,ASVTAAV              AVAILABLE
         STRING '  Address spaces',(ASVTMAXI,F,R15B),                  X
               ((R1),,R15B),(ASVTAAV,F,R15B),INTO=LINE
         BAL   R14,SPACE1          <== next line
         L     R1,ASVTSTRT             MAXUSER
         SL    R1,ASVTAST              AVAILABLE
         STRING '    Started/SASI',(ASVTSTRT,F,R15B),                  X
               ((R1),,R15B),(ASVTAST,F,R15B),INTO=LINE
         BAL   R14,SPACE1          <== next line
         L     R1,ASVTNONR             MAXUSER
         SL    R1,ASVTANR              AVAILABLE
         STRING '    Non-reusable',(ASVTNONR,F,R15B),                  X
               ((R1),,R15B),(ASVTANR,F,R15B),INTO=LINE
         BAL   R14,SPACE1          <== next line
*
*        Count "bad" address spaces                                @DHC
*
         L     R0,ASVTMAXU             number of ASVT slots
         SR    R1,R1
         LA    R2,ASVTENTY             point at first ASVT entry
         LA    R3,ASVTENTY             point at first ASVT entry
*loop
USERSL5  CLM   R2,B'0111',1(R3)        Master ASVT entry?
         BNE   USERSL5N                no, jump
         LA    R1,1(,R1)               yes, increment counter
USERSL5N LA    R3,4(,R3)               next ASVT entry
         BCT   R0,USERSL5              run the table
*endloop
         STRING '             Bad',((R1),,R15B),INTO=LINE
         BAL   R14,SPACE2              Double Space
         DROP  R6                      ASVT
*
*Active Jobs:
*
*  BACKUP12  BACKUP15
*
*TSO Users:
*
*  IBMUSER   SYSTEM1
*
*Started Tasks:
*
*  *MASTER*  PCAUTH    RASP      TRACE     XCFAS     GRS       SMXC
*  DUMPSRV   CONSOLE   ANTMAIN   ALLOCAS   SMF       VLF       LLA
*
         STRING 'Active Jobs:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         BAL   R14,WORKADDR            get work space
         LR    R2,R1                   addr of work area
         ST    R2,WKCELL1              save it for SORT8 rtne
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS11  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         BNP   USERS11N                NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         BZ    USERS11N                no - CONTINUE
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
         ST    R2,WKCELL1+4            save it for SORT8 rtne
         LA    R2,8(,R2)               bump addr in work area
USERS11N LA    R4,1(,R4)               bump ASID
         BCT   R5,USERS11              next address space
*endloop
         STRING '  (none)',INTO=LINE   set default value
         CL    R2,WKCELL1              any JOB found?
         BE    USERS19                 none, exit
         BAL   R14,SORT8            <- sort the names
         SLR   R2,R2                   first time switch
*loop
USERS13  BAL   R14,EOL                 check for end-of-line
         MVC   0(8,R2),0(R1)           move job name
         CL    R1,WKCELL1+4            last entry?
         LA    R1,8(,R1)               next name
         BNE   USERS13                 not finished yet
*endloop
USERS19  BAL   R14,SPACE2              Double Space
         LTR   R6,R6                   any JOB?
         BZ    USERS19X                no, exit
         STRING '# of active Jobs: ',((R6),,L),INTO=LINE       DL9809
         BAL   R14,SPACE2              Double Space            DL9809
USERS19X EQU   *
*
         STRING 'TSO Users:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         BAL   R14,WORKADDR            get work space
         LR    R2,R1                   addr of work area
         ST    R2,WKCELL1              save it for SORT8 rtne
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS21  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         BNP   USERS21N                NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         BNZ   USERS21N                yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         BZ    USERS21N                no - CONTINUE
         L     R14,ASCBOUCB-ASCB(,R15) point to OUCB
         TM    OUCBYFL-OUCB(R14),OUCBSTT+OUCBMNT  START OR MOUNT ?
         BNZ   USERS21N                YES, IGNORE
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
         ST    R2,WKCELL1+4            save it for SORT8 rtne
         LA    R2,8(,R2)               bump addr in work area
USERS21N LA    R4,1(,R4)               bump ASID
         BCT   R5,USERS21              next address space
*endloop
         STRING '  (none)',INTO=LINE   set default value
         CL    R2,WKCELL1              any TSU found?
         BE    USERS29                 none, exit
         BAL   R14,SORT8            <- sort the names
         SLR   R2,R2                   first time switch
*loop
USERS23  BAL   R14,EOL                 check for end-of-line
         MVC   0(8,R2),0(R1)           move job name
         CL    R1,WKCELL1+4            last entry?
         LA    R1,8(,R1)               next name
         BNE   USERS23                 not finished yet
*endloop
USERS29  BAL   R14,SPACE2              Double Space
         LTR   R6,R6                   any TSO user?
         BZ    USERS29X                no, exit
         STRING '# of TSO Users: ',((R6),,L),INTO=LINE         DL9809
         BAL   R14,SPACE2              Double Space            DL9809
USERS29X EQU   *
*
         STRING 'Started Tasks:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         SLR   R2,R2                   first time switch
         LA    R4,1                    first ASID
         L     R5,CVTASVT              point to ASVT
         L     R5,ASVTMAXU-ASVT(,R5)   max ASID
         SLR   R6,R6                   init counter
*loop
USERS31  LOCASCB ASID=(R4)             GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         BNP   USERS38                 NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         BNZ   USERS38                 yes - CONTINUE
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         L     R14,ASCBOUCB-ASCB(,R15) point to OUCB
         TM    OUCBYFL-OUCB(R14),OUCBSTT+OUCBMNT  START OR MOUNT ?
         BZ    USERS38                 NO, process
         BAL   R14,EOL                 check for end-of-line
         LA    R6,1(,R6)               increase counter        DL9809
         MVC   0(8,R2),0(R1)           move job name
USERS38  LA    R4,1(,R4)               bump ASID
         BCT   R5,USERS31              next address space
*endloop
         BAL   R14,SPACE2              Double Space
         STRING '# of Started Tasks: ',((R6),,L),INTO=LINE     DL9809
         BAL   R14,SPACE2              Double Space            DL9809
         B     USERS99
*
*        Sub-routine
*
EOL      LTR   R2,R2                   first time?
         BZ    EOL12                   yes, jump
         LA    R2,10(,R2)            BUMP TO 10 BYTES PAST WHERE WE ARE
         LA    R0,LINE                 first position
         AL    R0,ZSCREENW             last position in visible line
         SLR   R0,R2                   bytes left
         CH    R0,=H'8'                end of line reached yet?
         BNLR  R14                     no, exit
         BAL   R14,SPACE1          <== yes, next line
 ORG *-4            <==  R14 can't be disturbed
 LA R10,LINE+L'LINE <==  R14 can't be disturbed
EOL12    MVC   LINE,BLANKS             CLEAR OUT MSG AREA
         LA    R2,LINE+2               GET BEGINNING ADDR OF THE LINE
         BR    R14                     exit
USERS99  END_PROC
         TITLE 'SHOWMVS &REL - JES2 Initiators'
*---------------------------------------------------------------------*
*                                                                     *
*JES2 Initiators                                                      *
*                                                                     *
*  ID Status   Classes  Jobname  Stepname Procstep JobID    C UserID  *
*                                                                     *
*   1 Drained  BA                                                     *
*   2 Active   CA       IBMUSERI STEP1000 STEP0140 JOB07618 A IBMUSER *
*   3 Inactive CA                                                     *
*                                                                     *
*        This display tries to shield itself from instability in the  *
*        JES2 control block structure;  it relies on the IPCS mappings*
*        from SYS1.MIGLIB (or SYS1.SHASMIG) to obtain the offset and  *
*        length of HCCT, SJB and PIT fields.  This supposes that these*
*        mappings are at the same level as the primary JES.           *
*                                                                     *
*        If this display doesn't work, locate the SCANMODL CSECT      *
*        at the end of the SHOWMVS source and read the comments.      *
*                                                                     *
*---------------------------------------------------------------------*
JES2INIT BEGIN_PROC KW=INITIATORS
         AIF   (NOT D'CVTH4410).JES2I99
         TM    SHASMIG,L'SHASMIG       SHASMIG available ?
         BZ    JES2I99                 NO, EXIT
         TM    HBB4410,L'HBB4410       ESA V4 ?
         BZ    JES2I99                 NO, EXIT
         CLC   PRISUBTY,=C'JES2'       JES2-TYPE PRIMARY SUB-SYSTEM ?
         BNE   JES2I99                 NO, EXIT
         L     R5,CVTJESCT             JES COMM TABLE
         USING JESCT,R5
         ICM   R5,B'1111',PRISUBCT     JSCVT for primary sub-system
         BNP   JES2I99                 zero, exit
         USING SSCT,R5
         CLI   SSCTSSID,SSCTJES2       TYPE=JES2?
         BNE   JES2I99                 NO, EXIT
         L     R6,SSCTSUS2             A(HCCT)
         USING HCCT,R6
         LA    R0,=CL8'HASMHCCT'       MODEL NAME ($HCCT)
         LA    R1,=CL8'CCTPIT  '       FIELD NAME
         BAL   R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         BNZ   JES2I99                 NO, EXIT
         LH    R7,0(,R1)               get offset into R7
         L     R7,HCCT(R7)             HCCTPIT
         USING PIT,R7
         VALIDATE PIT,ERRET=JES2I99
         STRING PRISUBNM,' Initiators',INTO=LINE
         BAL   R14,SPACE2              Double Space
         LA    R0,=CL8'HASMSJB '       MODEL NAME ($SJB)
         LA    R1,=CL8'SJBCSCB '       FIELD NAME
         BAL   R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         BNZ   JES2I99                 NO, EXIT
         MVC   $SJBCSCB,0(R1)          save CSCB offset
         LA    R0,=CL8'HASMSJB '       MODEL NAME ($SJB)
         LA    R1,=CL8'SJBJCLAS'       FIELD NAME
         BAL   R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         BNZ   JES2I99                 NO, EXIT
         MVC   $SJBJCLAS,0(R1)         save Job Class offset
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)
         LA    R1,=CL8'PITPATID'       FIELD NAME
         BAL   R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         BNZ   JES2I99                 NO, EXIT
         MVC   $PITPATID(4),0(R1)      save partition ID offset & len
         LA    R0,=CL8'HASMPIT '       MODEL NAME ($PIT)
         LA    R1,=CL8'PITCLASS'       FIELD NAME
         BAL   R14,SCANMODL            get field offset
         LTR   R15,R15                 offset returned?
         BNZ   JES2I99                 NO, EXIT
         MVC   $PITCLASS(4),0(R1)      save classes offset & len
         STRING   '  ID   Status   Classes  Jobname  Stepname Procstep -
               JobID    C UserID   ASID ASIDx SYSName',INTO=LINE
         BAL   R14,SPACE2              Double Space
*loop
JES2I31  VALIDATE PIT,ERRET=JES2I99
         STRING '.PIT=',((R7),,R10Z),INTO=LINE
         BAL   R14,SPACE1              Single Space
         ICM   R7,B'1111',PITNEXT      next PIT
         BNZ   JES2I31                 loop
*endloop
         BAL   R14,BLANK1              BLANK LINE
.JES2I99 ANOP
JES2I99  END_PROC
         TITLE 'SHOWMVS &REL - Link-List'
*---------------------------------------------------------------------*
*                                                                     *
*Link-list:      45 Entries     LNKAUTH=LNKLST    73 extents open     *
*                                                                     *
*  SYS1.LINKLIB                                   SYSRES  930610  LNK *
*  SYS1.MIGLIB                                    SYSRES  930610  LNK *
*                                                                     *
*---------------------------------------------------------------------*
LNKLST00 BEGIN_PROC KW=LINKLIST
         AIF   (NOT D'CVTH6603).LNKLST10 DYNAMIC LNKLST?
         TM    CVTOSLV1,CVTJ6602       DYNAMIC LNKLST
         BZ    LNKLST10                no, jump
         L     R3,CVTECVT              -> ECVT
         USING ECVT,R3
         ICM   R3,B'1111',ECVTDLCB     -> DLCB Current LNKLST set
         BZ    LNKLST10                NO
         USING DLCB,R3
         L     R4,DLCBDCB@             SYS1.LINKLIB DCB
         ICM   R4,B'0111',DCBDEBA-IHADCB(R4) DEB ADDRESS
         USING DEBBASIC,R4
         LA    R1,LNKLST16             LNKLST/APFTAB
         TM    DEBFLGS1,DEBAPFIN       AUTH=LNKLST?
         BO    *+8                     YES, JUMP
         LA    R1,6(,R1)               NO, AUTH=APFTAB
         L     R7,DLCBLLT@             Link List Table
         USING LLT,R7
         STRING 'Link-list:  Set Name: ',(DLCBLNKLSTSETNAME,,L),       X
               (LLTCOUNT,F,R7B),' Entries     LNKAUTH=',((R1),6),      X
               (DEBNMEXT,FL1,R6B),' extents open',INTO=LINE
         DROP  R3,R4
         B     LNKLST20
LNKLST10 DS    0H
.LNKLST10 ANOP
*
         L     R4,CVTLINK              SYS1.LINKLIB DCB
         ICM   R4,B'0111',DCBDEBA-IHADCB(R4) DEB ADDRESS
         USING DEBBASIC,R4
         BAL   R1,*+4+6+6              br around literals
LNKLST16 DC    C'LNKLST'
         DC    C'APFTAB'
         TM    DEBFLGS1,DEBAPFIN       AUTH=LNKLST?
         BO    *+8                     YES, JUMP
         LA    R1,6(,R1)               NO, AUTH=APFTAB
         L     R7,CVTLLTA              LINK LIST TABLE
         USING LLT,R7
         STRING 'Link-list: ',(LLTCOUNT,F,R7B),' Entries     LNKAUTH=',X
               ((R1),6),(DEBNMEXT,FL1,R6B),' extents open',INTO=LINE
LNKLST20 DS    0H
         ST    R10,LINKXTNT            save line address for sub-task
         BAL   R14,SPACE2              Double Space
         STRING '  Data Set Name',34X,'Volser  Created',               X
               '   (LNK/LPA/APF)  Extents',                            X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         L     R3,LLTCOUNT             # OF ENTRIES
         LA    R4,LLTENTRY             LINK LIST TABLE ENTRY
         USING LLTENTRY,R4
         ST    R10,LNKTABLE            SAVE ADDR OF 1ST LINE
*LOOP
LNKLST41 MVC   LINE,BLANKS
         MVC   DSNAME,LLTDSN           MOVE DSNAME
         MVI   VOLSER,C'?'             $LOCATE REQUIRED
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         BAL   R14,SPACE1          <== next line
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         LA    R4,LLTNEXT              NEXT ENTRY
         BCT   R3,LNKLST41
*ENDLOOP
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         STM   R0,R1,LNKTABLE+4        LONGUEUR, DERNIER POSTE
         BAL   R14,BLANK1              BLANK LINE
*---------------------------------------------------------------------*
*                                                                     *
*        Dynamic Link-list                                            *
*                                                                     *
*---------------------------------------------------------------------*
         AIF   (NOT D'CVTH6603).LNKLST99 DYNAMIC LNKLST?
         TM    CVTOSLV1,CVTH6603       DYNAMIC LNKLST
         BZ    LNKLST99                no, jump
         BAL   R14,WORKADDR            get a temporary work area
         ST    R0,WKCELL1              Save length of work area
         LR    R2,R1
         USING DLAAHDR,R2
         CSVDYNL REQUEST=LIST,                                         X
               ANSAREA=DLAAHDR,                                        X
               ANSLEN=WKCELL1,                                         X
               USERINFO=YES,                                           X
               MF=(E,CSVDYNL)
         ICM   R15,15,DLAAH#REM        entries that were not returned?
         BNZ   LNKLST48                yes
         STRING 'LNKLST set information - Number of sets defined: ',   X
               (DLAAH#LS,F,L),INTO=LINE
         BAL   R14,SPACE2              Double Space
         ICM   R3,15,DLAAH#LS          Number of DLAALS entries
         BZ    LNKLST99                none
         L     R4,CVTASVT
         USING ASVT,R4
         L     R1,ASVTMAXI             maxuser
         SL    R1,ASVTAAV              available
         DROP  R4
         STH   R1,WKCELL1              save in use count
         L     R4,DLAAHFIRSTLSADDR     Address of first DLAALS
         USING DLAALS,R4
*loop
LNKLST43 DS    0H
         LA    R1,=C'NO '
         TM    DLAALSFLAGS,DLAALSINUSEBYLLA monitored by LLA?
         BZ    *+8
         LA    R1,=C'YES'
         LA    R5,=C'Defined '
         TM    DLAALSFLAGS,DLAALSCURRENT Current LNKLST?
         BZ    *+8
         LA    R5,=C'Current '
         TM    DLAALSFLAGS,DLAALSWASCURRENT Previous LNKLST?
         BZ    *+8
         LA    R5,=C'Previous'
         STRING '   LNKLST Set Name: ',(DLAALSNAME,,L),                X
               '  Seq#: ',(DLAALSLNKLSTSEQ#,F,L),                      X
               '  Monitored by LLA: ',((R1),3),                        X
               '  LNKLST status: ',((R5),8),                           X
               INTO=LINE
         BAL   R14,SPACE1              <== next line
         STRING 5X,'In use by ',(DLAALS#U,H,L),' address spaces',      X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         CLC   DLAALS#U,WKCELL1        are all using this LNKLST set
         BE    LNKLST47                yes
         ICM   R5,15,DLAALSFIRSTUADDR  first DLAAU for this DLAALS
         BZ    LNKLST47                zero, at end
         STRING 5X,'Jobname/Asids using this LNKLST set ',             X
               (DLAALSNAME,,L),INTO=LINE
         BAL   R14,SPACE1              <== next line
         USING DLAAU,R5
         LH    R6,DLAALS#U             number of DLAARU entries
*-loop
LNKLST44 DS    0H
         MVC   LINE,BLANKS             init the line
         LA    R1,(&LINESIZE-4)/16     max entries per line
*--loop
LNKLST45 DS    0H
         STRING (LINE,,L),4X,DLAAUJOBNAME,(DLAAUASID,H,R5B),           X
               INTO=LINE
         BCTR  R6,0                    number of DLAARU entries - 1
         LTR   R6,R6                   at end of DLAARUs
         BZ    LNKLST46                yes
         L     R5,DLAAUNEXTADDR        next DLAAU entry
         BCT   R1,LNKLST45             entries per line - 1
*--endloop
         BAL   R14,SPACE1              next line
         B     LNKLST44                repeat for next entry
*-endloop
LNKLST46 DS    0H
         BAL   R14,SPACE2              Double space
LNKLST47 DS    0H
         L     R4,DLAALSNEXTADDR       next DLAALS
         LTR   R4,R4                   another DLAALS
         BZ    LNKLST99                no
         BCT   R3,LNKLST43
*endloop
         B     LNKLST99
LNKLST48 DS    0H
         STRING ' LNKLST answer area is too small',INTO=LINE
         BAL   R14,SPACE1              next line
LNKLST99 DS    0H
.LNKLST99 ANOP
         END_PROC
         TITLE 'SHOWMVS &REL - LPA-List'
*---------------------------------------------------------------------*
*                                                                     *
*LPA list: 01D78000       10 Entries.                                 *
*                                                                     *
*  SYS1.LPALIB                                    ESA323  910610      *
*  ISF.V1R3M1.ISFLPA                              ESA323  910521  LPA *
*                                                                     *
*---------------------------------------------------------------------*
LPALST00 BEGIN_PROC KW=LPALIST
         TM    CVTDCB,CVTMVSE          XA/ESA?
         BZ    LPALST99                NO, JUMP
         L     R1,CVTSMEXT             STORAGE MAP EXTENSION
         L     R7,CVTEPLPS-CVTVSTGX(,R1)  LPA TABLE
         USING LLT,R7
         STRING 'LPA list: ',((R7),,X),                                X
               (LLTCOUNT,F,R9B),' Entries.',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R3,LLTCOUNT             # OF ENTRIES
         LA    R4,LLTENTRY             FIRST LPA LIST TABLE ENTRY
         USING LLTENTRY,R4
         ST    R10,LPATABLE            SAVE ADDR OF 1ST LINE
*LOOP
LPALST42 MVC   LINE,BLANKS
         MVC   DSNAME,LLTDSN           MOVE DSNAME TO UNPROTECTED STRGE
         MVI   VOLSER,C'?'             $LOCATE REQUIRED
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BAL   R14,SPACE1          <== next line
         LA    R4,LLTNEXT              NEXT ENTRY
         BCT   R3,LPALST42
*ENDLOOP
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         STM   R0,R1,LPATABLE+4        LONGUEUR, DERNIER POSTE
         BAL   R14,BLANK1              BLANK LINE
LPALST99 END_PROC
         TITLE 'SHOWMVS &REL - APF-List'
*---------------------------------------------------------------------*
*                                                                     *
*APF List:  Format(Static)  Entries(129)                              *
*                                                                     *
*  CICS210.LOADLIB1                              CICS21          UNCAT*
*  DSN220.DSNEXIT                                DB2SYS  900924       *
*  SYS1.LINKLIB                                  ESA430  930610  LNK  *
*                                                                     *
*---------------------------------------------------------------------*
APFLIST  BEGIN_PROC KW=APFLIST
         AIF   (NOT D'CVTDYAPF).APFL60
         TM    HBB4430,L'HBB4430       Dynamic APF present?
         BZ    APFL70                  no, use pre-ESA4.3 code
*
         CSVAPF REQUEST=QUERYFORMAT,   get dynamic/static format       X
               FORMAT=WKCELL1          answer addr
         MVC   WKCELL2,=C'Dynamic '    APF list is static
         CLI   WKCELL1,CSVAPFFORMATDYNAMIC
         BE    APFL25                  no, jump
         MVC   WKCELL2,=C'Static  '    APF list is static
*
APFL25   BAL   R14,WORKADDR            get storage for answer area
         STM   R0,R1,TENWORDS          save length, address
         LR    R2,R1                   pass addr
         USING APFHDR,R2
         CSVAPF REQUEST=LIST,          list auth libraries             X
               ANSAREA=(R2),           answer addr                     X
               ANSLEN=TENWORDS+0,      answer length                   X
               MF=(E,CSVAPF1)
         MVI   TENWORDS,X'FF'          no GETMAIN yet
         LTR   R1,R15                  OK?
         BZ    APFL30                  yes, jump
         CH    R15,=Y(CSVAPFRC_WARN)   warning?
         BNE   APFL54                  no, quit
         N     R0,=A(CSVAPFRSNCODEMASK)  clean up reason code
         CH    R0,=Y(CSVAPFRSNNOTALLDATARETURNED)
         BNE   APFL54                  no, quit
*
*        Allocate a larger work area
*
         L     R0,APFHTLEN             get required length
         GETMAIN RU,LV=(0),LOC=ANY
         STM   R0,R1,TENWORDS          save length, address
         LR    R2,R1                   pass addr
         CSVAPF REQUEST=LIST,          list auth libraries             X
               ANSAREA=(R2),           answer addr                     X
               ANSLEN=TENWORDS+0,      answer length                   X
               MF=(E,CSVAPF1)
         LTR   R1,R15                  OK?
         BNZ   APFL54                  no, quit
*
*        Print header
*
APFL30   L     R3,APFH#REC             number of APFE entries
         STRING 'APF list:   Format(',(WKCELL2,,T),')',                X
               '     Entries(',((R3),,L0),')',INTO=LINE
         BAL   R14,SPACE2              Double Space
         ST    R10,APFTABLE            SAVE ADDR OF 1ST LINE
         L     R7,APFHOFF              offset to first APFE
         LA    R7,APFHDR(R7)           change offset to addr
         USING APFE,R7
*loop
APFL33   MVC   LINE,BLANKS
         MVC   DSNAME,APFEDSNAME       MOVE DSNAME
         MVC   VOLSER,APFEVOLUME       MOVE VOLSER
         CLI   VOLSER,C'*'             *SMS* or *MCAT* ?
         BNE   APFL35                  no, jump
         MVI   VOLSER,C'?'             yes, request $LOCATE
APFL35   MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   CATUNCAT,C'?'           $LOCATE REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_REFD,C'?'          DS1REFD (last-referenced date)
         MVC   LINE_APFVOL,APFEVOLUME  MOVE VOLSER
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BAL   R14,SPACE1          <== next line
         AH    R7,APFELEN              next APFE
         BCT   R3,APFL33               next APFE
*endloop
APFL50   LA    R2,APFTABLE             APFTABLE DESCRIPTOR
         BAL   R14,TRIZO               SORT APFTABLE
         BAL   R14,BLANK1              BLANK LINE
         B     APFL55                  exit
*
APFL54   STRING '  Error from dynamic APF:   Retcode(',((R1),,L),')',  X
               '  Rsncode(X''',((R0),,X),''')',                        X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*
APFL55   CLI   TENWORDS,X'FF'          any GETMAIN done?
         BE    APFL99                  no, exit
         LM    R0,R1,TENWORDS          get length, address
         FREEMAIN RU,LV=(0),A=(1)      free work area
         B     APFL99
         DROP  R2,R7                   APFHDR,APFE
         AGO   .APFL70
*
*        check if it's dynamic APF and we can't support it
*
.APFL60  ANOP
APFL60   CLC   CVTAUTHL,=X'7FFFF001'   Dynamic APF in use?
         BNE   APFL70                  no, jump
         STRING '  This system uses Dynamic APF which ',               X
               'requires that SHOWMVS be assembled on a 4.3 ESA system.X
               ',INTO=LINE
         BAL   R14,SPACE2              Double Space
         B     APFL99                  exit
.APFL70  ANOP
*
*        Non-Dynamic APF (pre-ESA 4.3)
*
APFL70   L     R7,CVTAUTHL             APF TABLE
         LH    R3,0(,R7)               # OF ENTRIES
         STRING 'APF list: ',(CVTAUTHL,,X),                            X
               ((R3),,R9B),' Entries.',INTO=LINE
         BAL   R14,SPACE2              Double Space
         ST    R10,APFTABLE            SAVE ADDR OF 1ST LINE
*
*        Old format table (non-dynamic APF list)
*
*TABLE   DC    AL2(number of entries)
*        DC    AL1(L'VOLSER+L'DSNAME)
*VOLSER  DC    C'VOLSER'
*DSNAME  DC    C'data set name'
*
*LOOP
APFL75   MVC   LINE,BLANKS
         SLR   R1,R1
         IC    R1,2(,R7)               length of volser+dsname
         SH    R1,=H'6'                VOLSER LENGTH
         STRING (9(R7),(R1)),INTO=DSNAME MOVE DSNAME
         MVC   VOLSER,3(R7)            MOVE VOLSER
         MVI   YYYYMMDD,C'?'           $OBTAIN REQUIRED
         MVI   CATUNCAT,C'?'           $LOCATE REQUIRED
         MVI   LINE_APF,C'?'           LNK/LPA/APF STATUS
         MVI   LINE_REFD,C'?'          DS1REFD (last-referenced date)
         OI    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BAL   R14,SPACE1          <== next line
         LA    R7,7(R1,R7)             NEXT ENTRY
         BCT   R3,APFL75
*ENDLOOP
         LA    R2,APFTABLE             APFTABLE DESCRIPTOR
         BAL   R14,TRIZO               SORT APFTABLE
         BAL   R14,BLANK1              BLANK LINE
APFL99   END_PROC
         TITLE 'SHOWMVS &REL - Display Dynamic EXITs       '
*-----------------------------------------------------------------@522*
*                                                                     *
*Dynamic EXIT information                                             *
*                                                                     *
*  Exit name: SYS.IEFACTRT       AMODE:  31   Module entries:  1      *
*       Module name: ALVACTRT  Status: Active                         *
*                                                                     *
*---------------------------------------------------------------------*
DYNXIT   BEGIN_PROC KW=DYNEXIT,AUTH=YES
         AIF   (NOT D'CVTDYNEX).DYNXIT9
         TM    HBB5510,L'HBB5510       DYNEXIT support?
         BNO   DYNXIT99                no, exit
         STRING 'Dynamic EXIT information',INTO=LINE
         BAL   R14,SPACE2              BLANK LINE
         BAL   R14,WORKADDR            LOCATE WORK AREA
         ST    R0,SIZEEXAA             Save length of answer area
         ST    R1,EXAA@                Save address of answer area
*
DYNXIT10 DS    0H
         L     R4,EXAA@                Address of answer area
*        Issue the CSVDYNEX LIST request
         CSVDYNEX REQUEST=LIST,ANSAREA=(R4),ANSLEN=SIZEEXAA,           $
               RETCODE=LRETCODE,RSNCODE=LRSNCODE,MF=(E,CSVDYNEXL)
         CLC   LRETCODE,=A(CSVDYNEXRC_OK) Success?
         BNE   DYNXIT33                No, error
*        Process information in answer area when RC=0
         USING EXAAHDR,R4              EXAAHDR DSECT
         L     R5,EXAAH#REC            Find how many EXAAE entries
         LTR   R5,R5                   Are there any entries
         BZ    DYNXIT99                No, quit
         L     R4,EXAAHFIRST@          Get first entry
         USING EXAAE,R4                EXAAE DSECT
*LOOP
DYNXIT15 DS    0H                      EXAAE loop
*        Process information contained in EXAAE
         MVC   EXITAMOD(3),=C'n/a'
         CLI   EXAAEAMODE,EXAAEAMODE_31 AMODE 31?
         BNE   TAMODE24                No,
         MVC   EXITAMOD(3),=C' 31'
         B     AMODEOK
TAMODE24 CLI   EXAAEAMODE,EXAAEAMODE_24 AMODE 24?
         BNE   TAMODEDF                No,
         MVC   EXITAMOD(3),=C' 24'
         B     AMODEOK
TAMODEDF CLI   EXAAEAMODE,EXAAEAMODE_DEFINED AMODE defined
         BNE   AMODEOK                 No,
         MVC   EXITAMOD(3),=C'DEF'
AMODEOK  STRING '  Exit name: ',EXAAENAME,'  AMODE: ',EXITAMOD,        $
               '  Module entries: ',(EXAAE#ENT,FL2),INTO=LINE
         BAL   R14,SPACE1              Next Line
         LH    R7,EXAAE#ENT            Get number of EXAAM entries
         LTR   R7,R7                   Are there any routines ?
         BZ    DYNXIT17                No, move to end of EXAAE loop
         L     R6,EXAAEFIRSTENT@       Get first EXAAM
*--LOOP
DYNXIT16 DS    0H                      EXAAM loop
         USING EXAAM,R6                EXAAM DSECT
*        Process information contained in EXAAM
         MVC   EXITSTAT,=C'Active'     Set status active
         TM    EXAAMFLAGS,EXAAMACTIVE  Is it really active?
         BO    STATOK                  Yes
         MVC   EXITSTAT,BLANKS         No, remove text
STATOK   STRING '       Module name: ',EXAAMNAME,'  Status: ',         $
               EXITSTAT,INTO=LINE
         BAL   R14,SPACE1              Next Line
         L     R6,EXAAMNEXT@           Get next EXAAM
         DROP  R6                      EXAAM DSECT
         BCT   R7,DYNXIT16             Continue while there are more
*--ENDLOOP
DYNXIT17 DS    0H                      Bottom of EXAAE loop
         L     R4,EXAAENEXT@           Get next EXAAE
         BCT   R5,DYNXIT15             Continue while there are more
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         B     DYNXIT99                Skip error case
DYNXIT33 DS    0H                      Error return
         STRING 'DYNXIT: CSVDYNEX macro failed Retcode=',              X
               (LRETCODE,,X),' Reason=',(LRSNCODE,,X),                 X
               INTO=LINE
         BAL   R14,SPACE2              Double space
.DYNXIT9 ANOP
DYNXIT99 END_PROC
*
         AIF   (NOT D'CVTDYNEX).DYNXITX
         CSVEXAA                       List answer area
         CSVEXRET                      Return code information
.DYNXITX ANOP
         TITLE 'SHOWMVS &REL - System static symbols       '
*-----------------------------------------------------------------@522*
*                                                                     *
*System static symbols:                                               *
*                                                                     *
*  &SYSCLONE. = A0                                                    *
*  &SYSNAME.  = ALA0                                                  *
*  &SYSPLEX.  = DEALEI00                                              *
*                                                                     *
*---------------------------------------------------------------------*
SYMBOLS  BEGIN_PROC KW=SYMBOLS
         AIF   (NOT D'CVTH5520).SYM99
         TM    HBB5520,L'HBB5520       SYSPLEX support?
         BNO   SYMBOL99                no, jump
         STRING 'System static symbols:',INTO=LINE
         BAL   R14,SPACE2              BLANK LINE
         L     R3,CVTECVT              Load addr of ECVT
         USING ECVT,R3                  and establish addressability
         L     R3,ECVTSYMT         Load addr of the system symbol table
         USING SYMBT,R3                 and establish addressability
         SPACE
*--------------system-static-symbol-table-----------------------------*
* +0  |xxxx0003|                     - number of symbols              *
*---------------------------------------------------------------------*
* +4  |00000030|0000000A| &SYSCLONE. - offset/len of 1st symbol name  *
*---------------------------------------------------------------------*
* +C  |00000058|00000002| A0         - offset/len of 1st symbol value *
*---------------------------------------------------------------------*
* +14 |0000003A|00000009| &SYSNAME.  - offset/len of 2nd symbol name  *
*---------------------------------------------------------------------*
* +1C |0000004C|00000004| ALA0       - offset/len of 2nd symbol value *
*---------------------------------------------------------------------*
* +24 |00000043|00000009| &SYSPLEX.  - offset/len of 3rd symbol name  *
*---------------------------------------------------------------------*
* +2C |00000050|00000008| DEALEI00   - offset/len of 3rd symbol value *
*---------------------------------------------------------------------*
* ==> offsets to symbols from start of symbol area <==                *
*---------------------------------------------------------------------*
         SPACE
         LH    R0,SYMBTNUMBEROFSYMBOLS Load number of symbols
         LTR   R0,R0                   Are there any symbols?
         BZ    SYMBOL90                No, ...
         LA    R1,SYMBTTABLEENTRIES    Load addr of symbol table entry
         USING SYMBTE,R1                and establish addressability
*Loop
SYMBOL10 DS    0H
         LM    R4,R7,SYMBTETABLEENTRIES offset,length,offset,length
         LA    R4,SYMBTTABLEENTRIES(R4) change offset to address
         LA    R6,SYMBTTABLEENTRIES(R6) change offset to address
         STRING 2X,((R4),(R5)),' = ',((R6),(R7)),INTO=LINE
         BAL   R14,SPACE1          <== next line
         LA    R1,SYMBTE+SYMBTE_LEN    bump pointer
         BCT   R0,SYMBOL10
*ENDLOOP
         B     SYMBOL98
SYMBOL90 DS    0H
         STRING 'No symbols found',INTO=LINE
SYMBOL98 DS    0H
         BAL   R14,BLANK1          <== blank line
.SYM99   ANOP
SYMBOL99 END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*LLA Parameters                                                       *
*                                                                     *
*  Job name: LLA       Member: CSVLLA00    CSVLLIX1 called: NO        *
*                                                                     *
*  SYS1.CMDLIB                               SYSRES  Linklist  Freeze *
*                                                                     *
*---------------------------------------------------------------------*
LLALIST  BEGIN_PROC KW=LLALIST
         AIF   (NOT D'CVTOSEXT).LLAL999
         TM    HBB3310,L'HBB3310       ESA?
         BZ    LLAL999                 no, exit
         ICM   R4,B'1111',CVTLLCB      LLA Control Block
         BZ    LLAL999                 not active, exit
         USING LLCB,R4
         STRING 'LLA Parameters',INTO=LINE
         BAL   R14,SPACE2              double space
         LA    R1,=C'NO '
         TM    LLCBFLGS,LLCBX1OK       exit 1 called?
         BNO   *+8                     no, jump
         LA    R1,=C'YES'
         STRING '  Job name: ',LLCBNAME,                               X
               '  Member: CSVLLA',LLCBPARM,6X,                         X
               '  CSVLLIX1 called: ',((R1),3),                         X
               INTO=LINE
         BAL   R14,SPACE1              single space
*
*        retrieve LLDR and LLDS from SP 239 which is fetch-protected
*
         TM    AUTHORIZED,L'AUTHORIZED AM I AUTHORIZED?
         BNO   LLAL995                 no, exit
         L     R5,LLCBLLDR             get LLDR address
         USING LLDR,R5
         MODESET EXTKEY=ZERO           switch to KEY=ZERO
         CLC   =C'LLDR',LLDR           am I lost?
         BNE   LLAL990                 yes, exit
         L     R6,LLDRLLDS             get LLDS address
         USING LLDS,R6
         CLC   =C'LLDS',LLDS           am I lost?
         BNE   LLAL990                 yes, exit
         L     R7,LLDSNUM              number of LLDS entries
         LA    R1,=C'NO '
         TM    LLDSFLG1+1,X'80'        LNKLST a single entitiy ?
         BNO   *+8                     no, jump
         LA    R1,=C'YES'
         MODESET KEYADDR=PROTKEY,WORKREG=2
         STRING '  LNKLST treated as a single entity: ',((R1),3),      X
               INTO=LINE
         BAL   R14,SPACE1              single space
LLAL032  EQU   *
         BAL   R14,BLANK1              blank line
         DROP  R5                      LLDR
*
*        Retrieve data set information from LLA address space
*
         AIF   (NOT D'CVTOSEXT).LLAL039
         LTR   R7,R7                   number of LLDS entries
         BNP   LLAL990                 zero, exit
         L     R2,LLCBASCB             Load addr. of LLA's ASCB
         USING ASCB,R2
         L     R2,ASCBASSB             get LLA's ASSB address
         USING ASSB,R2
         ALESERV ADD,                                                  X
               STOKEN=ASSBSTKN,        LLA address space               X
               ALET=ALET1,             return ALET                     X
               CHKEAX=NO,                                              X
               MF=(E,ALESERV2)
*loop
LLAL044  BAL   R14,EXECKEY0            execute next instr in key=0
         ICM   R3,B'1111',LLDSLLLS     addr of LLLS
         BZ    LLAL044N                zero, ignore
         SAC   512                     AR mode on
         LAM   R3,R3,ALET1             POINT TO LLA ADDRESS SPACE
         USING LLLS,R3
         MVC   LINE,BLANKS             blank out current line
         MVC   DSNAME,LLLSDSN          move data set name
         MVC   VOLSER,LLLSVOL          move volume serial
         MVC   WKCELL1,LLLSTOD         TOD clock
         DROP  R3                      LLLS
         SAC   0                       AR mode off
         SLR   R0,R0                   key=0
         LA    R1,LLDSFLG4+1-LLDSFLG1  length
         MVCK  WORK256(R1),LLDSFLG1,R0 flags
         LA    R2,WORK256              copy of the flags
         USING LLDSFLG1,R2
         MVC   DEVTYPE,=C'Linklist'    linklist/private
         TM    LLDSFLG3,LLDSLNK        linklist?
         BO    *+10                    yes, jump
         MVC   DEVTYPE,=C'Private '    linklist/private
         MVC   CATUNCAT(8),=C'Nofreeze' Freeze/nofreeze
         TM    LLDSFLG4,LLDSFREZ       freeze?
         BZ    *+10                    no, jump
         MVC   CATUNCAT(8),=C'Freeze  ' Freeze/nofreeze
         STRING (LLDSFLG1,,X),1X,(LLDSFLG2,,X),1X,(LLDSFLG3,,X),1X,    X
               (LLDSFLG4,,X),INTO=(CATUNCAT+10,11)
         BAL   R14,SPACE1              bump line pointer
         DROP  R2                      Copy of LLDSFLG1 in WORK256
LLAL044N LA    R6,LLDSELEN(R6)         length of an LLDS entry
         BCT   R7,LLAL044              next LLDS entry
*endloop
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
.LLAL039 ANOP
LLAL990  MODESET KEYADDR=PROTKEY,WORKREG=2
LLAL995  BAL   R14,BLANK1              blank line
.LLAL999 ANOP
LLAL999  END_PROC
         TITLE 'SHOWMVS &REL - ATTACH The sub-task'
*---------------------------------------------------------------------*
*                                                                     *
*        ATTACH THE LOCATE/OBTAIN SUB-TASK                            *
*                                                                     *
*---------------------------------------------------------------------*
ATTACH   BEGIN_PROC
         TM    SUB_TASK_REQUESTED,L'SUB_TASK_REQUESTED
         BZ    ATTACH99                no, exit
         TM    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
         BO    ATTACH99                already attached
         TM    AUTHORIZED,L'AUTHORIZED authorized?
         BO    ATTACH4                 yes, jump
         LA    R1,DYNAM                PARM for sub task
         LNR   R1,R1                   make it negative
         ATTACH EPLOC=OWN_NAME,        my own name                     +
               ETXR=ETXR00,            end of task exit routine        +
               SF=(E,ATTACHL)
         ST    R1,SUB_ECB1+4           save TCB addr for DETACH
         B     ATTACH90
*
*        Attach sub-task with MODE=SUP if I'm authorized
*
ATTACH4  MODESET EXTKEY=ZERO           KEY=ZERO,MODE=SUP for SM=SUPV
         L     R9,PSATOLD-PSA          own TCB
         MVZ   TCBPKF,PROTKEY          KEY=4 is AUTH=ESR to ensure     +
                                       ETXR can POST ECB1.
         LA    R1,DYNAM                PARM for sub task
         LNR   R1,R1                   make it negative
         ATTACH EPLOC=OWN_NAME,        my own name                     +
               ETXR=ETXR00,            end of task exit routine        +
               SM=SUPV,                MODE=SUP                        +
               DISP=NO,                do not dispatch                 +
               SF=(E,ATTACHL)
         ST    R1,SUB_ECB1+4           save TCB addr for DETACH
         MVZ   TCBPKF,OLDPKF           reset key in OWN TCB
         LR    R9,R1                   pass TCB addr
         MVZ   TCBPKF,OLDPKF           KEY=8 in SUB-TASK TCB
         LA    R1,DYNAM                PARM for sub task
         ST    R1,TCBUSER              store into TCBUSER
         STATUS RESET,ND,(R9),(12),E   make task dispatchable
         MODESET KEYADDR=PROTKEY,WORKREG=2
         B     ATTACH90
*
*        End of task exit routine;
*        Invoked via an IRB under the main task's TCB.
*
         PUSH  USING
         DROP
ETXR00   LR    R2,R15                  local base reg
         USING TCB,R1
         USING ETXR00,R2
         ICM   R3,B'1111',TCBUSER      authorized?
         BNZ   ETXR20                  yes, jump
         L     R3,TCBFSA               point to subtask's FSA
         L     R3,0(,R3)               A(DYNAM)
ETXR20   EQU   *
         USING DYNAM,R3
         DETACH SUB_ECB1+4             detach sub-task
         POST  SUB_ECB1,0              post main task
         BR    R14                     exit
         POP   USING
*
ATTACH90 OI    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
ATTACH99 END_PROC
         TITLE 'SHOWMVS &REL - Active LPA Queue (MLPA/FLPA)'
*---------------------------------------------------------------------*
*                                                                     *
*Active LPA Queue:                                                    *
*                                                                     *
*   NAME     ENTPT    ATTRB SP ATTR  ATTR2  USE    MAJ-CDE   LENGTH   *
*                                                                     *
*   TMS193C  00C52B00   10  FC  B1    22    0001             000AD0   *
*   IFG0193C 00C52B00   10      B5    12           TMS193C            *
*   OMODVOL1 00C52B00   10      B5    12           TMS193C            *
*                                                                     *
*---------------------------------------------------------------------*
LPAQ     BEGIN_PROC KW=LPAQ
         ICM   R5,B'1111',ALPACDE1     First CDE on ALPAQ or DLPAQ
         BZ    LPAQ99                  Queue is empty, quit
         USING CDENTRY,R5
         STRING 'Active LPA Queue:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '   Name     EntPt   Attrb SP Attr Attr2 Attr3 Use ',  X
               ' Length Load-Pnt',                                     X
               ' PLPA  CDE   XTLST',                                   X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*LOOP
LPAQ21   ST    R5,WKCELL1              CDE addr
         CLI   CDATTR,0                last CDE on DLPAQ?
         BE    LPAQ29                  yes, ignore it
         L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         BO    LPAQ25                  JUMP IF THIS IS A MINOR CDE
         TM    CDATTR2,CDXLE           Do we have an extent list?
         BO    LPAQ23                  yes, jump
         LA    R6,NEXTLINE             no, point to dummy
         XC    NEXTLINE,NEXTLINE       all zeroes
         USING XTLST,R6
*
*        search the PLPA directory to detect those MLPA
*        modules that make PLPA modules unaccessible.
*
LPAQ23   STRING ' PLPA',INTO=WKCELL3   prime work area
         STM   R14,R12,12(R13)         save registers
         LM    R0,R1,CDNAME            EP NAME
         LA    R3,CVTMAP               required by LPDSR
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         B     LPAQ23X             +0  Found, jump
         MVC   WKCELL3,BLANKS      +4  Not found, reset PLPA indicator
LPAQ23X  LM    R14,R12,12(R13)         restore registers
*
LPAQ24   STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),2X,          X
               (CDSP,,X),2X,(CDATTR,,X),3X,(CDATTR2,,X),               x
               4X,(CDATTR3,1,X),3X,(CDUSE,,X),                         x
               1X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),                      X
               (WKCELL3,6),(WKCELL1+1,3,X),1X,(CDXLMJP+1,3,X),         X
               INTO=LINE
         B     LPAQ28
LPAQ25   STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),6X,          X
               (CDATTR,,X),3X,(CDATTR2,,X),4X,(CDATTR3,1,X),           X
               8X,CDNAME-CDENTRY(R6),13X,(WKCELL1+1,3,X),    CDE addr  X
               INTO=LINE
*
LPAQ28   BAL   R14,SPACE1          <== next line
LPAQ29   ICM   R5,B'1111',CDCHAIN      NEXT CDE ADDR
         BNZ   LPAQ21                  NO FINISHED YET, LOOP FURTHER
*ENDLOOP
LPAQ99   BAL   R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - SVC table'
*---------------------------------------------------------------------*
*                                                                     *
*SVC Table:                                                           *
*                                                                     *
*    0  00FE8790 N IECVEXCP  T1-8000        1  80FFAE52 N IEAVEWAT  T1*
*    2  80FF5B38 N IEAVEPST  T1-8000        3  81054090 N IGC003    T1*
*  216  82954830 P DFHCSVC   T3           217  80FF9712 -           T2*
*  218  835F7728 C *CSA      T2           219  80FF9712 -           T2*
*                                                                     *
*Type-3 ESR  (SVC 109 - Maximum 255 Entries)                          *
*                                                                     *
*    6  00FF9738 N IEAVESVC  T3             7  80DE9EA8 P IGX00007  T3*
*                                                                     *
*---------------------------------------------------------------------*
SVCTABLE BEGIN_PROC KW=SVCTABLE
         STRING 'SVC Table:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R5,CVTABEND             SECONDARY CVT
         USING SCVTSECT,R5
         NUCLKUP BYNAME,NAME='IGCERROR',ADDR=(0)
         ST    R0,IGCERROR             save addr of IGCERROR
         LA    R3,256/2                number of lines
         SLR   R4,R4                   SVC no
         L     R5,SCVTSVCT             START OF SVC TABLE
         USING SVCENTRY,R5
*LOOP
SVCTAB3  L     R1,SVCEP                SVC EP ADDR
         BAL   R14,CSVQUERY            GET EP NAME
         BAL   R7,SVCTYPE              DECODE TYPE
         LR    R0,R4                   SVC no
         BAL   R14,SCANTBL             find SVC name
         STRING (2(R1),(R2)),INTO=(WORK256+20,12)
         STRING ((R4),,R5B),           122                             X
               2X,(SVCEP,,X),          82345678                        X
               1X,EP10,                A IGC0012B                      X
               2X,(WORK256+20,12),     SVC122                          X
               2X,(WORK256,12),        T3-0000                         X
               INTO=LINE
         LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (ODD NUMBER)
         L     R1,SVCEP                SVC EP ADDR
         BAL   R14,CSVQUERY            GET EP NAME
         BAL   R7,SVCTYPE              DECODE TYPE
         LR    R0,R4                   SVC no
         BAL   R14,SCANTBL             find SVC name
         STRING (2(R1),(R2)),INTO=(WORK256+20,12)
         STRING ((R4),,R5B),           123                             X
               2X,(SVCEP,,X),          82345678                        X
               1X,EP10,                A IGC0012C                      X
               2X,(WORK256+20,12),     SVC122                          X
               2X,(WORK256,12),        T3-0000                         X
               INTO=(LINE+50,NEXTLINE)
         BAL   R14,SPACE1          <== next line
         LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
         BCT   R3,SVCTAB3
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         STRING '   LOCKS: 80-LOCAL 40-CMS 20-OPT 10-SALLOC 08-DISP',  X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        TYPE-X ESR ENTRIES
*
SVCESR1  BAL   R3,SVCESR2              BRANCH AROUND TABLE
         DC    AL2(116),C'1'           T1-ESR
         DC    AL2(122),C'2'           T2-ESR
         DC    AL2(109),C'3'           T3-ESR
         DC    AL2(137),C'6'           T6-ESR
*LOOP
SVCESR2  L     R1,CVTABEND             SECONDARY CVT
         L     R5,SCVTSVCT-SCVTSECT(,R1)  START OF SVC TABLE
         LH    R1,0(,R3)               GET SVC NUMBER
         SLL   R1,3                    MULT BY 8
         L     R5,0(R1,R5)             ADDR OF T3-ESR TABLE
         L     R0,SVCESRMX             GET MAX NUMBER OF ENTRIES
         ST    R0,WKCELL1              KEEP IT
         STRING 'Type-',(2(R3),1),' ESR  (SVC ',(0(R3),H,R3Z),         X
               ' - Maximum ',(SVCESRMX,F,L),' Entries)',INTO=LINE
         BAL   R14,SPACE2              Double Space
         SLR   R4,R4                   SVC no
         LA    R5,8(,R5)               SKIP HEADER
*--LOOP
SVCESR3  LR    R1,R5                   CURRENT ENTRY
         SH    R1,=H'16'               BACK UP 2 ENTRIES
         CLC   0(16,R1),0(R5)          SAME UNUSED ENTRIES?
         BE    SVCESR3P                YES, SKIP THEM
         L     R1,SVCEP                SVC EP ADDR
         BAL   R14,CSVQUERY            GET EP NAME
         BAL   R7,SVCTYPE              DECODE TYPE
         STRING ((R4),,R5B),2X,(SVCEP,,X),1X,EP10,2X,(WORK256,12),     X
               INTO=LINE
         LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (ODD NUMBER)
         CL    R4,WKCELL1              LAST NUMBER REACHED?
         BH    SVCESR3N                YES, EXIT LOOP
         L     R1,SVCEP                SVC EP ADDR
         BAL   R14,CSVQUERY            GET EP NAME
         BAL   R7,SVCTYPE              DECODE TYPE
         STRING ((R4),,R5B),2X,(SVCEP,,X),1X,EP10,2X,(WORK256,12),     X
               INTO=(LINE+40,NEXTLINE)
SVCESR3N BAL   R14,SPACE1          <== next line
         B     SVCESR3Q
SVCESR3P LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
SVCESR3Q LA    R4,1(,R4)               bump SVC no
         LA    R5,8(,R5)               NEXT SVC (EVEN)
         CL    R4,WKCELL1              LAST NUMBER REACHED?
         BNH   SVCESR3                 NO, KEEP LOOPING
*--ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         LA    R3,3(,R3)               NEXT ESR-TYPE TABLE ENTRY
         CLI   0(R3),0                 END OF TABLE?
         BE    SVCESR2                 NOT YET, DO IT AGAIN
*ENDLOOP
         B     SVCT99
*
*        Sub-routine: decode SVC type flags
*
SVCTYPE  MVC   WORK256(12),BLANKS      FORMAT OUTPUT FIELD
         MVC   WORK256(2),=C'T3'       FORMAT OUTPUT FIELD
         TM    SVCTP,SVCTP34           TYPE 3 (OR 4)
         BO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'2'          CHANGE TO T2
         TM    SVCTP,SVCTP2            TYPE 2?
         BO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'6'          CHANGE TO T6
         TM    SVCTP,SVCTP6            TYPE 6?
         BO    SVCTYPE2                YES, JUMP
         MVI   WORK256+1,C'1'          CHANGE TO T1
SVCTYPE2 TM    SVCTP,SVCAPF            APF REQUIRED?
         BNO   SVCTYPE3                NO, JUMP
         MVC   WORK256+2(4),=C'-APF'   YES, SHOW APF
SVCTYPE3 TM    SVCTP,SVCESR            ESR?
         BNO   SVCTYPE6                NO, JUMP
         MVC   WORK256+2(4),=C'-ESR'   YES, SHOW ESR
SVCTYPE6 CLI   SVCLOCKS,0              ANY LOCK REQUIRED?
         BE    SVCTYPE9                NO, JUMP
         STRING (WORK256,12,T),'-',(SVCLOCKS,,X),INTO=(WORK256,12)
SVCTYPE9 BR    R7
*
*----------------------------------------------------------------------
*        SCAN SVC/PCK TABLES
*----------------------------------------------------------------------
*
SCANTBL  LA    R1,SVCNAMES             SVC name table
         SLR   R2,R2
*LOOP
SCANTBL2 IC    R2,1(,R1)               PICK UP ENTRY LENGTH
         CLM   R0,B'0001',0(R1)        COMPARE SVC NUMBER WITH INTCODE
         BER   R14                     EQUAL, QUIT LOOP
         LA    R1,2(R2,R1)             BUMP TO NEXT ENTRY IN SVC TABLE
         CLI   0(R1),FF                END OF TABLE?
         BNE   SCANTBL2                NO, TRY NEXT ENTRY
*ENDLOOP
         LA    R1,BLANKS               unknown SVC
         LA    R2,1                    length=1
         BR    R14
*
         MACRO
&NAME    TABLE &FN
&I       SETA  2
&J       SETA  &FN
&NAME2   SETC  '&NAME'
.LOOP    AIF   (T'&SYSLIST(&I) EQ 'O').NEXT
         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').HH
&K       SETA  K'&SYSLIST(&I)
&NAME2   DC    AL1(&J,&K),C'&SYSLIST(&I)'
.HH      AIF   ('&SYSLIST(&I)'(1,1) NE '''').NEXT
&K       SETA  K'&SYSLIST(&I)-2
&NAME2   DC    AL1(&J,&K),C&SYSLIST(&I)
.NEXT    ANOP
&NAME2   SETC  ''
&I       SETA  &I+1
&J       SETA  &J+1
         AIF   (&I LE N'&SYSLIST).LOOP
         MEND
*
SVCNAMES TABLE 0,EXCP,WAIT,POST,EXIT,GETMAIN,FREEMAIN,LINK,XCTL,       X
               LOAD,DELETE,GETMAIN/FREEMAIN,TIME,SYNCH,ABEND,SPIE,     X
               ERREXCP,PURGE,RESTORE,BLDL/FIND,OPEN,CLOSE,STOW,        X
               'OPEN TYPE=J','CLOSE TYPE=T',DEVTYPE,TRKBAL,            X
               LOCATE/CATALOG,OBTAIN,CVOL,SCRATCH,RENAME,FEOV,REALLOC, X
               IOHALT,MGCR/QEDIT,WTO/WTOL,WTL,SEGLD/SEGWT,,LABEL,      X
               EXTRACT,IDENTIFY,ATTACH,CIRB,CHAP,OVLYBRCH,TTIMER,      X
               STIMER,DEQ,,,SNAP/SDUMP,RESTART,RELEX,DISABLE,EOV,      X
               ENQ/RESERVE,FREEDBUF,RELBUF/REQBUF,OLTEP,STAE/ESTAE,    X
               IKJEGS6A,DETACH,CHKPT,RDJFCB,,BTAMTEST,,                X
               SYNADAF/SYNADRLS,BSP,GSERV
         TABLE 79,STATUS,,SETPRT,,SMFWTM,GRAPHICS,DDRSWAP,ATLAS,DOM
         TABLE 91,VOLSTAT,TCBEXCP,TGET/TPUT,STCC,SYSEVENT,STAX,        X
               'TSO TEST',PROTECT,DYNALLOC,IKJEFFIB,,,XLATE,,IMGLIB,,  X
               MODESET,,'TYPE 3 ESR',DSTATUS,HASPSSSM,PGRLSE,PGFIX,    X
               EXCPVR,,'TYPE 1 ESR',DEBCHK,,TESTAUTH,                  X
               GETMAIN/FREEMAIN,VSAM,'TYPE 2 ESR',PURGEDEQ,,EVENTS
         TABLE 130,RACHECK,RACINIT,RACLIST,RACDEF
         TABLE 138,PGSER,CVAF,,,,CIPHER
         DC    X'FF',0D'0'             END OF TABLE
PCKTABLE TABLE 1,OPERATION,'PRIVILEGED OPERATION',EXECUTE,             X
               PROTECTION,ADDRESSING,SPECIFICATION,DATA,               X
               'FIXED-PT OVERFLOW','FIXED-PT DIVIDE',                  X
               'DECIMAL OVERFLOW','DECIMAL DIVIDE',                    X
               'EXPONENT OVERFLOW','EXPONENT UNDERFLOW',               X
               SIGNIFICANCE,'FLOATING-PT DIVIDE',                      X
               'SEGMENT TRANSLATION','PAGE TRANSLATION',               X
               'TRANSLATION SPECIFICATION','SPECIAL OPERATION'
         DC    X'FF',0D'0'             END OF TABLE
SVCT99   END_PROC
         TITLE 'SHOWMVS &REL - Linkage Index Info'             JWMJUN96
*---------------------------------------------------------------------*
*                                                                     *
* Linkage Index (LX) information:                                     *
*                                                                     *
*   LX number   Owned by ASID   Inuse Count   System LX   Dormant     *
*       0       0002 PCAUTH         FFFF           Yes        No      *
*                                                                     *
* Linkage Index (LX) entries - Max : 96   Free : 34                   *
* Free LX count - System : 5  Non-System : 4                          *
*                                                                     *
*---------------------------------------------------------------------*
LXINFO   BEGIN_PROC KW=LXINFO,AUTH=YES
         STRING 'Linkage Index (LX) information:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  LX number',3X,                                      X
               'Owned by ASID',3X,                                     X
               'Inuse Count',3X,                                       X
               'System LX',3X,                                         X
               'Dormant',                                              X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R3,CVTSVT               Get address of PSASVT
         USING SVT,R3
         L     R3,SVTXMD               Cross Memory Directory          X
                                         in PC/AUTH address space
         DROP  R3
*        R3 --> XMD in pcauth address space
         ESAR  R2                      Get current secondary asid
         STH   R2,WKCELL1              Save current secondary asid.
         AXSET AX==H'1'                Set auth
         LA    R2,2                    Get 'pcauth' asid
         SSAR  R2                      Set pcauth as secondary
* FIND XMD
         LA    R14,XMDLNTH             Set lenth of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         LA    R4,WORK256
         USING XMD,R4
* FIND LXAT
         L     R3,XMDLXAT              Address of LXAT
         LA    R14,L'LXATHDR           Set lenthg of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WKCELL2(R14),0(R3),R15  Copy data from secondary asid
         LA    R5,WKCELL2
         USING LXATHDR,R5
*
         XC    WKCELL3,WKCELL3         Clear out free system LX counter
         SR    R2,R2                   Clear LX counter
*LOOP
LXINFO10 DS    0H
         LA    R3,8(,R3)               Bump index up 8 bytes
         LA    R14,L'LXATINDX          Set length of receiveing field
         SR    R15,R15                 'from' key
         MVCP  WORK256(R14),0(R3),R15  Copy data from secondary asid
         DROP  R4
         USING LXATINDX,R4
         CLC   LXATINDX,LXINFOMK       See if it is free
         BE    LXINFO40                Yes
         TM    LXATFLGS,LXATOWND       Is this LX owned
         BZ    LXINFO40                No
         LOCASCB ASID=LXATASID         Get addr of ASCB
         LTR   R15,R1                  Valid ASID?
         BNP   LXINFO20                No, jump
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOBNAME
         BNZ   LXINFO30                Yes - continue
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) START/MOUNT/LOGON
         BNZ   LXINFO30                No - continue
LXINFO20 DS    0H
         LA    R1,BLANKS
LXINFO30 DS    0H
         LA    R6,=C'No '              Default No
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         BZ    *+8                     No
         LA    R6,=C'Yes'              Yes
         LA    R7,=C'No '              Default No
         TM    LXATFLGS,LXATDORM       Is this a dormant LX ?
         BZ    *+8                     No
         LA    R7,=C'Yes'              Yes
         STRING 3X,((R2),,R4B),7X,                                     X
               (LXATASID,,X),' ',((R1),8),7X,                          X
               (LXATBIND,,X),9X,                                       X
               ((R6),3),8X,                                            X
               ((R7),3),                                               X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
         B     LXINFO80
LXINFO40 DS    0H
         STRING 3X,((R2),,R4B),7X,'Free',INTO=LINE
         BAL   R14,SPACE1              Single Space
         TM    LXATFLGS,LXATSYS        Is this a SYSTEM LX ?
         BZ    LXINFO50                No
         LH    R1,WKCELL3              Reload reg
         LA    R1,1(,R1)               Free system LX count +1
         STH   R1,WKCELL3              Save for later
         B     LXINFO80
LXINFO50 DS    0H
         LH    R1,WKCELL3+2            Reload reg
         LA    R1,1(,R1)               Free non-system LX count +1
         STH   R1,WKCELL3+2            Svae for later
LXINFO80 DS    0H
         LA    R2,1(,R2)               System LX count +1
         CH    R2,LXATHILX             Below max
         BNH   LXINFO10                Yes
*ENDLOOP
*
         LH    R2,WKCELL1              Restore previous secondary -
         SSAR  R2                      Should be same as primary
         AXSET AX==H'0'                Reset auth
         BAL   R14,BLANK1              blank line
         STRING '  Highest LX : ',(LXATHILX,H,L),                      X
               '   Max system LX : ',(LXATMSLX,H,L),                   X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
         LH    R2,WKCELL3              Free System LX count
         LH    R3,WKCELL3+2            Free Non-System LX count
         STRING '  Free LX count - System : ',(WKCELL3,H,L),           X
               '  Non-System : ',(WKCELL3+2,H,L),                      X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
LXINFO99 DS    0H
         END_PROC
*
LXINFOMK DS    0XL(L'LXATINDX)
         DC    AL2(0)       LXATASID
         DC    AL2(0)       LXATBIND
         DC    AL2(0)       LXATETCT
         DC    AL1(LXATSYS) LXATFLGS
         DC    AL1(0)       LXATRSV2
*
         TITLE 'SHOWMVS &REL - Program Properties Table (PPT)'
*---------------------------------------------------------------------*
*                                                                     *
*Program Properties Table (PPT)   (requires authorization)            *
*                                                                     *
*  Addr(03DFF738)   Entries used(47)   Entries available(45)          *
*                                                                     *
*    PGMNAME(ISTINM01)    KEY(6) Nocancel Noswap SYST Pass            *
*    PGMNAME(IKTCAS00)    KEY(6) Nocancel Priv SYST                   *
*    PGMNAME(AHLGTF)      KEY(0) Nocancel Noswap SYST                 *
*                                                                     *
*---------------------------------------------------------------------*
PPT00    BEGIN_PROC KW=PPTLIST,AUTH=YES
         STRING 'Program Properties Table (PPT)',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R5,CVTJESCT
         USING JESCT,R5
         L     R6,JESPPT               PPT ADDRESS
         USING PPT,R6
*
         MODESET EXTKEY=ZERO        <- switch to KEY=0
         LH    R0,PPTUSED              number of PPT entries used
         LH    R1,PPTENTS              number of PPT entries
         SLR   R1,R0                   number of free PPT entries
         LH    R2,PPTENTS              number of PPT entries
         LH    R3,PPTHDRLN             length of PPT header
         LH    R4,PPTENTLN             length of a PPT entry
         MODESET KEYADDR=PROTKEY,WORKREG=14 switch back to KEY4/KEY8
         DROP  R6                      PPT
         STRING '  Address(',(JESPPT,,X),') ',                         X
               '  Entries_used(',((R0),,L),') ',                       X
               '  Entries_available(',((R1),,L),') ',INTO=LINE
         BAL   R14,SPACE2              Double Space
         AL    R3,JESPPT               point to first PPT entry
         USING PPTENTRY,R3
*LOOP
PPT21    SLR   R15,R15                 source key is KEY 0
         MVCK  WORK256(R4),0(R3),R15   Move PPTENTRY
         LA    R5,WORK256              copy of PPTENTRY
         USING PPTENTRY,R5
         CLI   PPTNAME,C' '            available entry?
         BNH   PPT28                   yes, ignore it
         STRING '    PGMNAME(',(PPTNAME,,T),')',INTO=LINE
         LA    R6,LINE+25              variable data
         TM    PPTBYTE1,PPTSKEY        is PPTKEY valid?
         BZ    PPT24                   no, jump
         SLR   R0,R0
         ICM   R0,B'1000',PPTKEY       KEY=F0000000
         SRL   R0,28                   KEY=0000000F
         STRING 'KEY(',((R0),,L),')',INTO=((R6),8)
         LA    R6,1(R15,R6)            variable data
PPT24    BAL   R1,PPT242
         DC    AL1(PPTNCNCL),C'Nocancel  '
         DC     AL1(PPTNSWP),C'Noswap    '
         DC     AL1(PPTPRIV),C'Priv      '
         DC    AL1(PPTSYSTK),C'SYST      '
         DC     AL1(PPTNDSI),C'Nodsi     '                     JWMMAY95
         DC    AL1(PPTNOPAS),C'Nopass    '                     JWMMAY95
         DC    X'00',0H'0'             end of table
PPT241TM TM    PPTBYTE1,*-*            check properties
*--LOOP
PPT242   IC    R15,0(,R1)              pick up TM mask
         EX    R15,PPT241TM            test UPT switch
         BZ    PPT246                  jump if off
         STRING (1(R1),10,T),INTO=((R6),10)
         LA    R6,1(R15,R6)            bump pointer
PPT246   LA    R1,1+10(,R1)
         CLI   0(R1),0                 end of table?
         BNE   PPT242                  not yet, loop
*--ENDLOOP
PPT25    BAL   R1,PPT252                                       JWMMAY95
         DC    AL1(PPT2LPU),C'Spref '                          JWMMAY95
         DC    AL1(PPT1LPU),C'Lpref '                          JWMMAY95
         DC    AL1(PPTN2LP),C'Nopref'                          JWMMAY95
         DC    X'00',0H'0'             end of table            JWMMAY95
PPT251TM TM    PPTPUBYT,*-*            check properties        JWMMAY95
*--LOOP
PPT252   IC    R15,0(,R1)              pick up TM mask         JWMMAY95
         EX    R15,PPT251TM            test UPT switch         JWMMAY95
         BZ    PPT256                  jump if off             JWMMAY95
         STRING (1(R1),06,T),INTO=((R6),06)                    JWMMAY95
         LA    R6,1(R15,R6)            bump pointer            JWMMAY95
PPT256   LA    R1,1+06(,R1)                                    JWMMAY95
         CLI   0(R1),0                 end of table?           JWMMAY95
         BNE   PPT252                  not yet, loop           JWMMAY95
*--ENDLOOP
         TM    PPTORIG,PPTDEFLT        PPT entry, default      JWMMAY95
         BZ    PPT271                  no                      JWMMAY95
         STRING '- Default',INTO=((R6),9)                      JWMMAY95
         B     PPT272                                          JWMMAY95
PPT271   STRING '- Parmlib',INTO=((R6),9)                      JWMMAY95
PPT272   DS    0H                                              JWMMAY95
         BAL   R14,SPACE1          <== yes, next line
PPT28    ALR   R3,R4                   Add length of a PPT entry
         BCT   R2,PPT21                loop thru table
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
PPT99    END_PROC
         TITLE 'SHOWMVS &REL - User I/O Appendages'
*---------------------------------------------------------------------*
*                                                                     *
*I/O Appendages                                                       *
*                                                                     *
*  EOE=(),SIO=(),PCI=(),CHE=(E4),ABE=(E4)                             *
*                                                                     *
*---------------------------------------------------------------------*
APP00    BEGIN_PROC KW=APPENDAGES
         L     R7,CVTAIDVT             Appendage ID Vector Table
         USING APPNMTBL,R7
         STRING 'I/O Appendages:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         BAL   R4,APP10                branch around table, set R5
         DC    C'EOESIOPCICHEABE',X'FF'
APP10    LA    R5,APPENTRY             first entry
         USING APPENTRY,R5
         MVC   LINE,BLANKS             init line
         MVI   LINE,C','               init line
*loop
APP11    STRING (LINE,,T),',',((R4),3),'=(',INTO=LINE
         LH    R2,APPCOUNT             get number of names
         LTR   R2,R2                   do we have any?
         BZ    APP17                   no, do next one
         LA    R3,APPNAMID-APPNMTBL(R7) point to APPNAMID
         AH    R3,APPOFFST             addr of 1st ID
*--loop
APP13    STRING (LINE,,T),((R3),2),',',INTO=LINE
         LA    R3,2(,R3)               next ID
         BCT   R2,APP13                process all IDs
*--endloop
         BCTR  R15,0
APP17    LA    R15,LINE(R15)           end of line
*        CLI   0(R15),C','             change last , to )
*        BNE   APP18                   change last , to )
*        BCTR  R15,0
APP18    MVI   0(R15),C')'             change last , to )
         LA    R5,L'APPENTRY(,R5)      next entry
         LA    R4,3(,R4)               next name
         CLI   0(R4),X'FF'             5 names processed?
         BNE   APP11                   no, do next one
*endloop
         MVC   LINE(2),BLANKS          remove ,,
         BAL   R14,SPACE2              Double Space
APP99    END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Resource Manager List (IEAVTRML)                                     *
*                                                                     *
*---------------------------------------------------------------------*
RML00    BEGIN_PROC KW=RML
         STRING 'Resource Manager List (IEAVTRML)',INTO=LINE
         BAL   R14,SPACE2              Double Space
         L     R3,CVTABEND             SECONDARY CVT
         L     R4,SCVTRG2B-SCVTSECT(,R3) 2ND ENTRY POINT IN IEAVTRG2
         L     R5,12(,R4)              IEAVTRML TABLE
         CLI   0(R5),0                 Any entries?
         BE    RML80                   no, exit
*loop
RML11    EQU   *
         STRING 2X,((R5),8),1X,(8(R5),4,X),INTO=LINE
         BAL   R14,SPACE1              Single Space
         LA    R5,12(,R5)              POINT TO NEXT TABLE ENTRY
         CLI   0(R5),0                 END OF TABLE?
         BNE   RML11                   No, print next entry
*endloop
         B     RML98
*
RML80    STRING '  (no entries)',INTO=LINE
         BAL   R14,SPACE1              Single Space
RML98    BAL   R14,BLANK1              BLANK LINE
RML99    END_PROC
         TITLE 'SHOWMVS &REL - Product Enable/Disable'
***********************************************************************
*                                                                     *
*Registered Products                                                  *
*                                                                     *
*  PRODUCT OWNER(IBM CORP)                                            *
*          NAME(OS/390)                                               *
*          ID(5645-001)                                               *
*          VERSION(01) RELEASE(01) MOD(00)                            *
*          FEATURENAME(JES2)                                          *
*          FLAGS(80)                                                  *
*          INSTANCES(1)                                               *
*                                                                     *
***********************************************************************
PRED00   BEGIN_PROC KW=PRED
         AIF   (NOT D'CVTPRDED).PRED99
         TM    CVTOSLV1,CVTPRDED       OS/390 ?
         BZ    PRED99                  no, exit
         BAL   R14,WORKADDR            GET ADDR OF A 32K WORK AREA
         ST    R0,WKCELL1              SAVE LENGTH
         LR    R4,R1                   SAVE ADDRESS
         USING EDAAHDR,R4
         XCALL IFAEDLIS,                                               X
               (=A(IFAEDLIS_TYPE_REGISTERED+IFAEDLIS_TYPE_STATE),      X
               =CL16'*',               PRODUCT OWNER                   X
               =CL16'*',               PRODUCT NAME                    X
               =CL16'*',               FEATURE NAME                    X
               =CL16'*',               PRODUCT ID                      X
               WKCELL1,                LENGTH OF ANSWER AREA           X
               EDAAHDR,                ANSWER AREA                     X
               WKCELL1+4)              RETURN CODE
         L     R5,EDAAHFIRSTRADDR      FIRST REGISTERED PRODUCT
         STRING 'Registered Products',INTO=LINE
         BAL   R14,SPACE2              DOUBLE SPACE
         BAL   R7,PRED20               EDIT ENTRIES
         L     R5,EDAAHFIRSTSADDR      FIRST UN-REGISTERED PRODUCT
         STRING 'Unregistered Products',INTO=LINE
         BAL   R14,SPACE2              DOUBLE SPACE
         BAL   R7,PRED20               EDIT ENTRIES
         B     PRED99                  exit
*---------------------------------------------------------------------*
*        PRINT PRODUCT DESCRIPTIONS                                   *
*---------------------------------------------------------------------*
PRED20   LTR   R5,R5                   ANY ENTRIES?
         BZR   R7                      NO, GOBACK
         USING EDAAE,R5
         STRING '  Product Owner    Name             ID       Ver ',   X
               'Rel Mod Feature-Name     Flags Instances',INTO=LINE
         BAL   R14,SPACE2              DOUBLE SPACE
*LOOP
PRED21   STRING 2X,(EDAAEPRODOWNER),1X,                                x
               (EDAAEPRODNAME),1X,                                     x
               (EDAAEPRODID),1X,                                       x
               (EDAAEPRODVERS),2X,                                     x
               (EDAAEPRODREL),2X,                                      x
               (EDAAEPRODMOD),2X,                                      x
               (EDAAEFEATURENAME),1X,                                  x
               (EDAAEFLAGS,,X),4X,                                     x
               (EDAAENUMINSTANCES,F,L),INTO=LINE
         BAL   R14,SPACE1              SINGLE SPACE
         ICM   R5,B'1111',EDAAENEXTADDR MORE PRODUCTS?
         BNZ   PRED21                  YES, LOOP
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         BR    R7                      goback
.PRED99  ANOP
PRED99   END_PROC
         TITLE 'SHOWMVS &REL - On-line Devices'
*---------------------------------------------------------------------*
*                                                                     *
*Device Class: TAPE                                                   *
*                                                                     *
*  Unit Names:      3490      3480      3400-5    CART      TAPE      *
*                                                                     *
*  UCBs:     32 (defined)      2 (on-line)                            *
*                                                                     *
*    CUA  UCBTYP    Unitname  Volser Status                           *
*                                                                     *
*    480  78048081  3490             Not-ready K 022917               *
*    391  78008080  3480      123456 Private J=NBQ0001B Not-ready     *
*                                                                     *
*Device Class: DASD                                                   *
*                                                                     *
*  Unit Names:      3390      3380      DISK      SYSDA               *
*                   VIO       SYSALLDA                                *
*                                                                     *
*  UCBs:    416 (defined)     65 (on-line)                            *
*                                                                     *
*    CUA  UCBTYP    Unitname  Volser  Status                          *
*                                                                     *
*    2C4  3010200E  3380K     STD008 SMS SG=STD3380  Enabled     85%  *
*    265  3010200E  3390      SYS430 Resident Private System          *
*                                                                     *
*---------------------------------------------------------------------*
DEVICES  BEGIN_PROC KW=DEVICES
         L     R3,CVTDCQA              GET DCQ ADDRESS
         L     R3,DCQFIRST-DCQ(,R3)    GET FIRST DCQ ADDRESS
         USING DCQELMNT,R3             DCQ element
*loop
DEV101   TM    HBB4410,L'HBB4410       UCB services available?
         BO    DEV101B                 yes, jump
         ICM   R0,B'0011',DCQUCBCT     any devices gen'd?
         BZ    DEV190                  no, exit
DEV101B  MVC   UNITNAME+18(1),DCQDEVCL Device class code
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              IEFEB4UV parm list              X
               =AL1(0,RETNNAME)),      return list of unit-names       X
               ERRET=DEV190            error, try next device class
         L     R4,UNITNAME+4           point to the returned work area
         ICM   R5,B'1111',4(R4)        get the number of unit-names
         BZ    DEV180                  none found, try next class
         STRING 'Device Class: ',DCQDEVNM,INTO=LINE
         BAL   R14,SPACE2              Double Space
         LA    R6,8(,R4)               first unit name
         STRING '  Unit Names:',INTO=LINE
         B     DEV122                  first time, jump
*--loop
DEV121   LA    R1,8                    length of an entry
         LNR   R1,R1                   make it negative
         A     R1,ZSCREENW             add screen width
         LA    R0,LINE(R1)             calculate last position
         CR    R2,R0                   end of line reached yet?
         BL    DEV124                  no, jump
         BAL   R14,SPACE1          <== yes, next line
         MVC   LINE,BLANKS             CLEAR OUT MSG AREA
DEV122   LA    R2,LINE+19              Point to beginning of line
*
DEV124   MVC   0(8,R2),0(R6)           MOVE UNITNAME TO BUFFER
         LA    R6,8(,R6)               GO TO NEXT UNIT NAMES (RETURNED)
         LA    R2,10(,R2)              Bump pointer in print line
         BCT   R5,DEV121               next unit name
*--endloop
         BAL   R14,SPACE2              Double Space
DEV180   L     R0,0(,R4)               get sub-pool and length
         L     R5,4(,R4)               save number of unit-names
         FREEMAIN R,A=(R4),LV=(R0)
         LTR   R5,R5                   any unit-name processed?
         BZ    DEV190                  none, try next class
*
*        Display on-line devices
*
         SLR   R2,R2                   UCB count
         SLR   R7,R7                   first time switch
*--loop
DEV201   BAL   R14,DEV800           <- get a UCB address
         LTR   R7,R7                   EOF?
         BZ    DEV220                  yes, exit
         USING UCBOB,R7
         TM    UCBSTAT,UCBONLI         THIS UNIT ONLINE?
         BNO   DEV201                  NO, IGNORE IT
         LA    R2,1(,R2)               count on-line devices
         B     DEV201                  next UCB
*--endloop
DEV220   STRING '  UCBs:',((R4),,R7B),' (defined)',                    X
               ((R2),,R7B),' (on-line)',INTO=LINE
         BAL   R14,SPACE2              Double Space
         LTR   R2,R2                   any on-line devices?
         BZ    DEV190                  no, exit
*
         STRING '   DEVN  UCBTYP    Unitname S Volser  Status',        X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         SLR   R7,R7                   first time switch
*--loop
DEV221   BAL   R14,DEV800           <- get a UCB address
         LTR   R7,R7                   EOF?
         BZ    DEV280                  yes, exit
         TM    UCBSTAT,UCBONLI         THIS UNIT ONLINE?
         BNO   DEV228                  NO, IGNORE IT
         BAL   R14,GETUNIT             GET UNITNAME
*
DEV227   UCB_NAME RIGHT                get 4-character device number
         STRING 3X,UCB_NAME,2X,(UCBTYP,4,X),2X,UNITNAME,INTO=LINE
         TM    UCBTBYT2,UCB2OPT2       SHARED?  X'20'
         BZ    DEV227S                 No, jump
         TM    UCBTBYT3,UCB3DACC       DASD?
         BZ    DEV227S                 No, jump
         LA    R1,LINE(R15)            point at 1st space
         MVI   1(R1),C'S'              flag this device with an S
DEV227S  EQU   *
         LTR   R6,R6                   ULUT available?
         BZ    DEV228S                 no, jump
         TM    ULUEFLGS-ULUENTRY(R6),ULUEDYN  Dynamic UCB?
         BZ    DEV228S                 no, jump
         MVI   LINE+3+L'UCB_NAME,C'.'  yes, mark it with a "."
DEV228S  STRING '.UCB=',((R7),,R10Z),INTO=LINE_UCB
LINE_UCB EQU   LINE+30,15              ucbaddr in line
         BAL   R14,SPACE1          <== next line
DEV228   B     DEV221                  Next UCB
*--endloop
DEV280   BAL   R14,BLANK1              BLANK LINE
*
DEV190   ICM   R3,B'1111',DCQCHAIN     NEXT DCQ ELEMENT
         BNZ   DEV101                  process it
*endloop
         B     DEV999                  exit
*
*        sub-routine: get address of next UCB
*
DEV800   TM    HBB4410,L'HBB4410       UCB services available?
         BO    DEV821                  yes, jump
*
*        Pre-HBB4410 code (uses DCQ)
*
DEV811   SLR   R6,R6                   ULUT not available
         LTR   R7,R7                   first time?
         BP    DEV818                  no, jump
         LH    R4,DCQUCBCT             number of UCBs defined
         L     R7,DCQUCBAD             addr of first UCB
         BR    R14
DEV818   L     R7,UCBNXUCB             addr of next UCB (zero if EOF)
         LTR   R7,R7                   EOF?
         BZR   R14                     yes, goback
         CLC   DCQDEVCL,UCBTBYT3       right device class?
         BER   R14                     yes, goback
         SLR   R7,R7                   no, EOF
         BR    R14
*
*        HBB4410 and up (uses ULUT)
*
DEV821   LTR   R7,R7                   first time?
         BP    DEV825                  no, jump
         L     R5,CVTIXAVL             IOCOM
         L     R5,IOCIOVTP-IOCOM(,R5)  IOS Vector Table
         L     R5,IOVTULUT-IOVT(,R5)   UCB look-up table
         USING ULUT,R5
         L     R1,ULUTUCBC             number of UCB look-up entries
         SLR   R4,R4                   UCB counter
         L     R6,ULUT1ST              first UCB look-up entry
         USING ULUENTRY,R6
*loop
DEV822   L     R7,ULUEUCBP             get ucb address
         CLC   DCQDEVCL,UCBTBYT3       right device class?
         BNE   DEV823                  no, ignore it
         LA    R4,1(,R4)               count UCB's in this class
DEV823   LA    R6,ULUENTRY+ULUELEN     next look-up entry
         BCT   R1,DEV822               count UCBs
*endloop
         L     R6,ULUT1ST              first UCB look-up entry
         B     DEV826
*loop
DEV825   LA    R6,ULUENTRY+ULUELEN     next look-up entry
         L     R1,ULUTUCBC             number of UCB look-up entries
         MH    R1,=Y(ULUELEN)          size of ULUT
         AL    R1,ULUT1ST              change offset to address
         CLR   R1,R6                   EOF?
         BH    DEV826                  no, jump
         SLR   R7,R7                   yes, zero UCB reg
         BR    R14                     and goback
DEV826   L     R7,ULUEUCBP             get ucb address
         CLC   DCQDEVCL,UCBTBYT3       right device class?
         BNE   DEV825                  no, ignore it
*endloop
         BR    R14                     yes, return it
*
DEV999   END_PROC
         TITLE 'SHOWMVS &REL - System Consoles (MCS)'
*---------------------------------------------------------------------*
*                                                                     *
*Consoles:                                                            *
*                                                                     *
*  LOG Class: L     LOG Limit: 999999     CSCBLOC=Below               *
*  RMAX: 99         CONSOL00      PFKTAB00      LOGON: Optional       *
*                                                                     *
*    ID   Name      Device   Status    Route Codes                    *
*    1    SYS1MAST  0040     Active    1,2,3,4,5,6,7,8,9,10,12,13,14  *
*    2    SYS2ALT   0041     Inactive                                 *
*    3    03        JES      Inactive                                 *
*    4    SYS2MAST  Sysplex  Inactive                                 *
*                                                                     *
* Message Processing Facility (MPF) entries                           *
*                                                                     *
*   Message id  MPF  Suppress  Retain  Auto  Token    Exit            *
*   .NO_ENTRY   00   No        Yes     No                             *
*   $ACF07902I  00   Yes       No      No                             *
*   IEF176I     00   No        No      No             WTOE176I        *
*   WER*        00   Yes       No      No                             *
*                                                                     *
* General wto user exit (IEAVMXIT) - active                           *
*                                                                     *
* Color Parameters and Attributes                                     *
*                                                                     *
*   Msg Type  MPF  Color   Hilight  Intensity                         *
*   URGATTN   DFL  RED     NONE     HIGH                              *
*   IMEDACTN  DFL  WHITE   NONE     HIGH                              *
*   OOLDATA   DFL  GREEN   NONE     NORM                              *
*                                                                     *
*---------------------------------------------------------------------*
CONSOLES BEGIN_PROC KW=CONSOLES
         STRING 'Consoles:',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        LOG Class: L    LOG Limit: 999999     CSCB=ABOVE
*
CONSOL10 L     R4,CVTMSER              Master Sched Res Data Area
         USING BASE,R4                 IEEBASEA
         STRING '  LOG Class: ',MSLOGCLS,                              X
               '     LOG Limit: ',(MSLOGLMT,FL3,L9),                   X
               INTO=LINE
         AIF   (NOT D'CVTH4410).CONSOL15
         TM    HBB4410,L'HBB4410       ESA V4?
         BZ    CONSOL15                no, jump
         LA    R2,LINE(R15)            end of text
         STRING '     CSCBLOC=BELOW',INTO=((R2),30)
         TM    BACHFLGS,BACSCBA        CSCB=ABOVE?
         BZ    CONSOL15                no, jump
         STRING '     CSCBLOC=ABOVE',INTO=((R2),30)
.CONSOL15 ANOP
CONSOL15 BAL   R14,SPACE2              Double Space
*
         L    R4,CVTCUCB               Unit Control Module (UCM)
         USING UCM,R4
*
         AIF   (NOT D'CVTH4410).CONSOL16                       JWMJUN95
         TM    HBB4410,L'HBB4410       running on ESA 410?     JWMJUN95
         BZ    CONSOL16                no, jump                JWMJUN95
         L     R5,UCMBFEXT                                     JWMJUN95
         USING UCMFEXTA,R5                                     JWMJUN95
         LA    R1,=C'Optional'                                 JWMNOV96
         TM    UCMFMISC,UCMFLOGR+UCMFLOGA Logon Optional       JWMNOV96
         BZ    *+20                    Yes                     JWMNOV96
         LA    R1,=C'Required'         Default required        JWMNOV96
         TM    UCMFMISC,UCMFLOGR       Logon Required          JWMNOV96
         BO    *+8                     Yes                     JWMNOV96
         LA    R1,=C'Auto    '         Logon Auto              JWMNOV96
         L     R5,UCMFPPTR                                     JWMJUN95
         USING UCMPEXTA,R5                                     JWMJUN95
         STRING '  RMAX: ',(UCMRMAX,F,L0),9X,                  JWMJUN95X
               'CONSOL',UCMPCNXX,6X,                           JWMJUN95X
               'PFKTAB',UCMPPFKM,6X,                           JWMNOV96X
               'LOGON: ',((R1),8),                             JWMNOV96X
               INTO=LINE                                       JWMJUN95
         BAL   R14,SPACE2                                      JWMJUN95
CONSOL16 DS    0H                                              JWMJUN95
.CONSOL16 ANOP                                                 JWMJUN95
         L     R5,UCMVDATA             1st UCME
         USING UCMLIST,R5              Individual device entry
*                    1234 12345678  1234567  12345678  123456789012345
         STRING '    ID   Name      Device   Status    Route Codes',   X
               INTO=LINE
         BAL   R14,SPACE1
*loop
CONS210  STRING (UCMID,FL1,L),INTO=WKCELL1 console ID
         L     R6,UCMFEXTP             addr of fixed extension
         USING UCMEFEXT,R6
         MVC   WKCELL2,BLANKS          NO NAME
         AIF   (NOT D'CVTH4410).CONS215                        JWMJUN95
         TM    HBB4410,L'HBB4410       ESA 4.1?                JWMJUN95
         BZ    CONS215                 no, jump                JWMJUN95
         MVC   WKCELL2,UCMEFCNM        name=IPO1MAST
CONS215  DS    0H                                              JWMJUN95
.CONS215 ANOP                                                  JWMJUN95
         MVC   WKCELL3,=C'Sysplex '    device=sysplex
         MVC   WKCELL4,=C'Inactive'    status=inact
         ICM   R7,B'1111',UCMUCB       associated UCB
         BZ    CONS220                 noUCB, must be SYSPLEX
         USING UCBOB,R7
         UCB_NAME LEFT,JES=YES         get 4-character device number
         STRING UCB_NAME,INTO=WKCELL3  device=041
CONS220  MVC   NEXTLINE,BLANKS         clear route codes
         TM    UCMATR,UCMUF            This console active?
         BZ    CONS270                 no, jump
         STRING 'Active',INTO=WKCELL4  status=active
         CLI   UCMEFRC,X'FF'           Routcde=ALL ?
         BNE   CONS240                 no, jump
         CLC   UCMEFRC+1(L'UCMEFRC-1),UCMEFRC
         BNE   CONS240                 no, jump
         STRING 'All',INTO=NEXTLINE    Routcde=all
         B     CONS270                 next UCM
CONS240  EQU   *
         LA    R0,L'UCMEFRC            BYTE LOOP
         LA    R1,1                    Route code (1-255)
         LA    R2,UCMEFRC              Routcde bit string
         BAL   R14,BITSTR              edit bit string
*
CONS270  STRING 4X,(WKCELL1,5),        console id                      X
               WKCELL2,2X,             name                            X
               WKCELL3,1X,             device                          X
               WKCELL4,2X,             status                          X
               NEXTLINE,               route-codes                     X
               INTO=LINE
CONS280  BAL   R14,SPACE1          <== next line
         LM    R14,R15,UCMVDATA+4      length(UCME) Last(UCME)
         BXLE  R5,R14,CONS210
*endloop
         BAL   R14,BLANK1              BLANK LINE
*
*        MPF Table (ESA 4.1 and above)
*
CONS400  L     R7,UCMBFEXT             Addr of Fixed Extension Base
         USING UCMFEXTA,R7
         ICM   R7,B'1111',UCMFMPFP     Addr of MPF Table
         BZ    CONS450                 Zero, No MPF table
         USING MPFT,R7
         SR    R1,R1
         ICM   R1,B'0111',MPFTSIZE     Size of MPF table
         BZ    CONS450                 Zero, no MPF table
         CLI   MPFTVRSN,MPFTS212       version 1 ?
         BE    CONS455                 yes, ignore
         STRING '  Message Processing Facility (MPF) entries',INTO=LINE
         BAL   R14,SPACE2
         STRING '    Message id  MPF  Suppress  Retain  Auto  Token',  X
               '    Exit',INTO=LINE
         BAL   R14,SPACE1
         LA    R6,MPFTSENP             Address of first specific entry
         LH    R0,MPFTNENS             Number of entries
         BAL   R1,CONS440              Format the generic entries
         LA    R6,MPFTGENP             Address of first generic entry
         LH    R0,MPFTNENG             Number of entries
         BAL   R1,CONS440              Format the generic entries
         B     CONS460
*
*        Sub-routine
*
CONS440  DS    0H
         LTR   R0,R0                   Number of entries
         BZR   R1                      Zero, exit
         ICM   R6,B'1111',0(R6)        Address of first entry
         BZR   R1                      Zero, exit
         USING MPFTENTY,R6
*loop
CONS441  DS    0H
*        Suppress message
         LA    R2,=C'Yes'              Suppress(yes)
         TM    MPFTEFLG,MPFSUPMS       Suppress message
         BO    *+8                     Yes, branch
         LA    R2,=C'No '              Suppress(no)
         TM    MPFTEFLG,MPFSUPA        Suppress All message
         BZ    *+8                     No, branch
         LA    R2,=C'All'              Suppress(all)
*        Retain message
         LA    R3,=C'Yes'              Retain(tes)
         TM    MPFTEFLG,MPFRETAN       Retain message
         BO    *+8                     Yes, branch
         LA    R3,=C'No '              Retain(no)
*        Automate message
         LA    R4,=C'Yes'              Auto(yes)
         TM    MPFTEFLG,MPFAUTO        Automation specified
         BO    *+8                     Yes, branch
         LA    R4,=C'No '              Auto(no)
*        format the message id
         MVC   WORK256(L'MPFMSGID),MPFMSGID move msgid to work area
         TM    MPFTEFLG,MPFTPREF          Generic message id
         BZ    CONS444                    No, branch
         LA    R5,WORK256                 Start of work area
         SR    R15,R15                    Clear work reg
         IC    R15,MPFTIDLN               Length of message id
         ALR   R5,R15                     Skip over
         MVI   0(R5),C'*'                 Indicate prefix msg
CONS444  DS    0H
         LA    R5,BLANKS                  default to blanks
         CLC   MPFEXNME,BLANKS            any exit here
         BE    CONS446                    no
         TM    MPFTEFLG,MPFXACTV          active
         BO    CONS446                    yes
         LA    R5,=C'abended  '           exit abended
         TM    MPFTEFLG,MPFABEND          abended
         BO    CONS446                    yes
         LA    R5,=C'not found'           exit not found
CONS446  DS    0H
         STRING 4X,(WORK256,L'MPFMSGID),  msgid                        X
               2X,MPFSUFFX,               MPF id                       X
               3X,((R2),3),               Suppress                     X
               7X,((R3),3),               Retain                       X
               5X,((R4),3),               Auto                         X
               3X,MPFAUTOT,               token                        X
               1X,MPFEXNME,               exit name                    X
               1X,((R5),9),               exit status                  X
               INTO=LINE
         TR    LINE,TRTPRINT           X'00' -> X'40'
         BAL   R14,SPACE1              Single space
         AH    R6,MPFTENLN             Skip this entry
         BCT   R0,CONS441              Repeat for next entry
*endloop
         BR    R1                      Return
*
CLRATTRT DS    0CL126                 Attribute table
         DC    CL8'URGATTN '
         DC    AL1(7)
         DC    CL8'IMEDACTN'
         DC    AL1(8)
         DC    CL8'EVETACTN'
         DC    AL1(8)
         DC    CL8'GENMSG  '
         DC    AL1(6)
         DC    CL8'PPMSG   '
         DC    AL1(5)
         DC    CL8'SELPEN  '
         DC    AL1(6)
         DC    CL8'INSTRERR'
         DC    AL1(8)
         DC    CL8'ENTRYARA'
         DC    AL1(8)
         DC    CL8'WARNLGEN'
         DC    AL1(8)
         DC    CL8'WARNRGEN'
         DC    AL1(8)
         DC    CL8'WARNRURG'
         DC    AL1(8)
         DC    CL8'OOLCNTL '
         DC    AL1(7)
         DC    CL8'OOLLABEL'
         DC    AL1(8)
         DC    CL8'OOLDATA '
         DC    AL1(7)
CLRATTR# EQU   (*-CLRATTRT)/9
*
CLRCOLRT DS    0CL49                  Color of message
         DC    CL6'BLUE  '
         DC    X'F1'
         DC    CL6'RED   '
         DC    X'F2'
         DC    CL6'PINK  '
         DC    X'F3'
         DC    CL6'GREEN '
         DC    X'F4'
         DC    CL6'TURQU '
         DC    X'F5'
         DC    CL6'YELLOW'
         DC    X'F6'
         DC    CL6'WHITE '
         DC    X'F7'
CLRCOLR# EQU   (*-CLRCOLRT)/7
*
CLRLITET DS    0CL28                 Highlight Table
         DC    CL6'NONE  '
         DC    X'00'
         DC    CL6'BLINK '
         DC    X'F1'
         DC    CL6'RE-VID'
         DC    X'F2'
         DC    CL6'UNDSCR'
         DC    X'F4'
CLRHIGH# EQU   (*-CLRLITET)/7
*
CLRINTT  DS    0CL10                 Intensity
         DC    CL4'NORM'
         DC    X'E4'
         DC    CL4'HIGH'
         DC    X'E8'
CLRINTT# EQU   (*-CLRINTT)/5
*
CONS450  DS    0H
         STRING ' MPF is inactive',INTO=LINE
         BAL   R14,SPACE1
         B     CONS460                 continue
*
CONS455  DS    0H
         STRING ' Unsupported MPF Table Format',INTO=LINE
         BAL   R14,SPACE1
*
*        IEAVMXIT Status
*
CONS460  DS    0H
         BAL   R14,BLANK1              Leave a blank line
         L     R4,CVTCUCB              Unit Control Module (UCM)
         USING UCM,R4
         L     R7,UCMBFEXT             Addr of Fixed Extension Base
         USING UCMFEXTA,R7
         LA    R1,=C'inactive'
         ICM   R6,B'1111',UCMGENXP     General wto user exit table
         BZ    CONS462                 No, branch
         USING GENX,R6
         LA    R1,=C'active   '
         TM    GENXFLGS,GENXACTV      Is it active
         BO    CONS462                Yes, branch
         LA    R1,=C'abended  '
CONS462  STRING '  General wto user exit (IEAVMXIT) - ',((R1),8),      X
               INTO=LINE
         BAL   R14,SPACE2             Double space
*
*        Color Parameters and Attributes
*
         L     R6,UCMFCLRA            Load color/highlighting          X
                                      attribute table
         USING CLRATT,R6
         STRING '  Color Parameters and Attributes',INTO=LINE
         BAL   R14,SPACE2             Double space
         STRING '    Msg Type  MPF  Color   Hilight  Intensity',       X
               INTO=LINE
         BAL   R14,SPACE1
         LA    R1,CLRATTRS            First set of Attributes
         LA    R2,CLRATTRT            Start of attribute table
         LA    R0,CLRATTR#            number of entries
*loop
CONS470  DS    0H
         LA    R3,CLRCOLRT            Start of color table
         LA    R7,CLRCOLR#            number of entries
*-loop
CONS472  CLC   0(1,R1),6(R3)          Is this the color
         BE    CONS474                yes
         LA    R3,7(,R3)              skip the entry
         BCT   R7,CONS472             repeat for next color
         LA    R3,=C'********'        oops
*-endloop
CONS474  LA    R4,CLRLITET            Start of hightlight table
         LA    R7,CLRHIGH#            number of entries
*-loop
CONS476  CLC   1(1,R1),6(R4)          Is this the highlight
         BE    CONS478                yes
         LA    R4,7(,R4)              skip the entry
         BCT   R7,CONS476             repeat to next highlight
         LA    R4,=C'********'        oops
*-endloop
CONS478  LA    R5,CLRINTT             Start of intensity table
         LA    R7,CLRINTT#            number of entries
*-loop
CONS480  CLC   2(1,R1),4(R5)          Is this the intensity
         BE    CONS482                yes
         LA    R5,5(,R5)              skip the entry
         BCT   R7,CONS480             repeat to next intensity
         LA    R5,=C'********'        oops
*-endloop
CONS482  STRING 4X,                                                    X
               ((R2),8),2X,           type                             X
               (3(R1),3),2X,          mpf member                       X
               ((R3),6),2X,           color                            X
               ((R4),6),3X,           hilight                          X
               ((R5),4),              intersity                        X
               INTO=LINE
         BAL   R14,SPACE1
         LA    R2,9(,R2)              Next attribute
         LA    R1,6(,R1)              Next set of attributes
         BCT   R0,CONS470
*endloop
         BAL   R14,BLANK1              BLANK LINE
*
CONSO999 END_PROC
         TITLE 'SHOWMVS &REL - Command Prefix Table (CPF)'         RS
*----------------------------------------------------------------------
*                                                                  @RS
*COmmand Prefix Table:                                             @RS
*                                                                  @RS
*  Prefix   Owner    System   Scope   Remove  Faildisp             @RS
*                                                                  @RS
*  $        JES2     AL10     System  NO      PURGE                @RS
*  RACF     RACF     AL10     Sysplex YES     SYSPRUGE             @RS
*                                                                  @RS
*----------------------------------------------------------------------
CPFTAB00 BEGIN_PROC                                                @RS
         AIF   (NOT D'CVTH4410).CPFTAB99
         TM    HBB4410,L'HBB4410       running under ESA 4.1?
         BZ    CPFTAB99                no, jump
         STRING 'Command Prefix Table:',INTO=LINE                  @RS
         BAL   R14,SPACE2              BLANK LINE                  @RS
*                                                                  @RS
*                Prefix   Owner    System  Scope   Remove Faildisp @RS
*                                                                  @RS
         STRING '  Prefix   Owner    System  Scope   Remove Faildisp', X
               INTO=LINE                                           @RS
         BAL   R14,SPACE2              BLANK LINE                  @RS
         L     R4,CVTCUCB              Unit Control Module (UCM)   @RS
         USING UCM,R4                                              @RS
         L     R5,UCMBFEXT             UCM fixed extension         @RS
         USING UCMFEXTA,R5             tell assembly               @RS
         L     R6,UCMCPFTA             CPF-Table                   @RS
         USING CPFT,R6                 tell assembly               @RS
         L     R7,CPFTNUME             number of entries           @RS
         LTR   R7,R7                   counter = 0                 @RS
         BZ    CPFTAB99                yes, no entries  jump       @RS
         A     R6,CPFT1ST              point to first entry        @RS
         USING CPFT_ENTRY,R6           tell assembly               @RS
*loop                                                              @RS
CPFTAB20 DS    0H                                                  @RS
         STRING 2X,CPFTPRFX,1X,CPFTOWNR,1X,CPFTSYS,                    X
               INTO=LINE                                           @RS
         LA    R4,LINE+28              Scope                       @RS
         MVC   0(6,R4),=C'System'      Default                     @RS
        #STATUS CPFTFLGS,CPFTSCOP,'Sysplex'                        @RS
         LA    R4,LINE+36              Scope                       @RS
         MVC   0(2,R4),=C'No'          Default                     @RS
        #STATUS CPFTFLGS,CPFTREMV,'Yes'                            @RS
         LA    R4,LINE+43              Scope                       @RS
         MVC   0(5,R4),=C'Purge'       Default                     @RS
        #STATUS CPFTFLGS,CPFTFDP1,'Syspurge'                       @RS
         BAL   R14,SPACE1              print                       @RS
         LA    R6,CPFT_ENTRY_LENGTH(R6)  next entry                @RS
         BCT   R7,CPFTAB20             do until count = 0          @RS
*endloop                                                           @RS
         BAL   R14,BLANK1              blank line                  @RS
.CPFTAB99 ANOP                                                     @RS
CPFTAB99 END_PROC                                                  @RS
         TITLE 'SHOWMVS &REL - Name/Token (NTT)          '         $RS
*----------------------------------------------------------------------
*                                                                  $RS
*  Name/Token Table:                                               $RS
*                                                                  $RS
*    Name            Token (char)      Token (hex)                 $RS
*    DSNLOGREC           &             020D5650 02000048 00000000  $RS
*    IBMJESXCFAS                       0A206578 00000000 00000000  $RS
*    BBM6CSCAMVCT      d               09843F80 00000000 00000000  $RS
*    TCPIPAOE 6                        099B2040 00000000 00000000  $RS
*----------------------------------------------------------------------
NTTAB00  BEGIN_PROC                                                $RS
         AIF   (NOT D'CVTJ4422).NTTAB49                            $RS
         TM    JBB4422,L'JBB4422       running under ESA 4.2.2 ?   $RS
         BZ    NTTAB49                 no, jump                    $RS
         L     R3,CVTECVT              Load addr of ECVT           $RS
         ICM   R4,B'1111',ECVTNTTP-ECVT(R3)   Name/Token
         BZ    NTTAB49                 yes, no entries  jump       $RS
         USING NTTH,R4                                             $RS
         STRING 'Name/Token Table ','(SYSTEM)',INTO=LINE
         BAL   R14,SPACE2              BLANK LINE                  $RS
         STRING '    Name',13X,'Token (char)     Token (hex)',         X
               23X,'ASID',INTO=LINE                                $RS
         BAL   R14,SPACE1              BLANK LINE                  $RS
         ICM   R5,B'1111',NTTHNTTF     First NTTE                  $RS
         BZ    NTTAB49                 yes, no entries  jump       $RS
         USING NTTE,R5                                             $RS
*loop                                                              $RS
NTTAB20  DS    0H                                                  $RS
         STRING 4X,NTTENAME,           name (char)                     X
               1X,NTTETOKN,            token (char)                    X
               1X,(NTTETOKN,8,X),      token (hex)                     X
               1X,(NTTETOKN+8,8,X),    token (hex)                     X
               1X,(NTTEASID,2,X),      ASID                            X
               INTO=LINE                                           $RS
         TR    LINE,TRTDOTS            convert non-printable to dots
         BAL   R14,SPACE1              single line                 $RS
         ICM   R5,B'1111',NTTENEXT     next entry                  $RS
         BNZ   NTTAB20                 jump if not zero            $RS
*endloop                                                           $RS
         BAL   R14,BLANK1              blank line                  $RS
.NTTAB49 ANOP                                                      $RS
NTTAB49  END_PROC                                                  $RS
         TITLE 'SHOWMVS &REL - Device Allocation Defaults (ALLOCxx)'
*---------------------------------------------------------------------*
*                                                                     *
*Allocation Defaults                                                  *
*                                                                     *
*  SPACE PRIMARY(4) SECONDARY(24) DIRECTORY(0)                        *
*        MEASURE(AVEBLK) RLSE PRIM_ORG(CONTIG)                        *
*        BLKLNGTH(8192) ROUND                                         *
*                                                                     *
*  UNIT NAME(SYSALLDA) UNITAFF(SYSALLDA)                              *
*                                                                     *
*  TIOT SIZE(64)                                                      *
*                                                                     *
*  SDSN_WAIT WAITALLOC(NO)                                            *
*                                                                     *
*  VOLUME_ENQ POLICY(WAIT)                                            *
*                                                                     *
*  VOLUME_MNT POLICY(WTOR)                                            *
*                                                                     *
*  SPEC_WAIT POLICY(WAITNOH)                                          *
*            MAXNWAIT(5) POLICYNW(CANCEL)                             *
*                                                                     *
*  ALLC_OFFLN POLICY(WAITNOH)                                         *
*             MAXNWAIT(5) POLICYNW(WTOR)                              *
*                                                                     *
*  CATLG_ERR FAIL_JOB(YES) ERRORMSG(YES)                              *
*                                                                     *
*---------------------------------------------------------------------*
ALLOC00  BEGIN_PROC KW=ALLOC
         STRING 'Allocation Defaults',INTO=LINE
         BAL   R14,SPACE2              double space
         L     R1,CVTJESCT             JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         L     R4,JESAB445-JESPEXT(R1) V(IEFAB445)
         USING IEFAB445,R4
         STRING '  SPACE ',                                            X
               'PRIMARY(',(DEFPQTY,FL3,L),') ',     primary qty        X
               'SECONDARY(',(DEFSQTY,FL3,L),') ',   secondary qty      X
               'DIRECTORY(',(DEFDQTY,FL3,L),') ',   dir blks           X
               INTO=LINE
         BAL   R14,SPACE1              single space
         MVC   NEXTLINE,BLANKS
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFFLG1,DEFTRK          track alloc?
         BZ    *+10                    no, jump
         MVC   WORK256(3),=C'TRK'
         TM    DEFFLG1,DEFCYL          cylinder alloc?
         BZ    *+10                    no, jump
         MVC   WORK256(3),=C'CYL'
         TM    DEFFLG1,DEFBLKLN        average block length
         BZ    *+10                    no, jump
         MVC   WORK256(6),=C'AVEBLK'   average blksize
         MVC   WORK256+10(4),=C'RLSE'
         TM    DEFFLG1,DEFRLSE         release unused space?
         BO    *+10                    yes, jump
         MVC   WORK256+10(6),=C'NORLSE'
         TM    DEFFLG1,DEFCONTG        contig
         BZ    *+10                    no, jump
         MVC   WORK256+20(6),=C'CONTIG'
         TM    DEFFLG1,DEFMIXG         mixg
         BZ    *+10                    no, jump
         MVC   WORK256+20(4),=C'MIXG'
         TM    DEFFLG1,DEFALX          alx
         BZ    *+10                    no, jump
         MVC   WORK256+20(3),=C'ALX'
         STRING 8X,                                                    X
               'MEASURE(',(WORK256,6,T),') ',      trk/cyl/aveblk      X
               (WORK256+10,6,T),                   rlse/norlse         X
               ' PRIM_ORG(',(WORK256+20,6,T),')',                      X
               INTO=LINE
         TM    DEFFLG1,DEFBLKLN        average block length
         BZ    ALLOC10                 no, jump
         BAL   R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         MVC   WORK256(5),=C'ROUND'
         TM    DEFFLG1,DEFROUND        round?
         BO    *+10                    Yes, jump
         MVC   WORK256(7),=C'NOROUND'
         STRING 8X,                                                    X
               'BLKLNGTH(',(DEFDRLH,FL3,L),') ',   blklngth            X
               (WORK256,7,T),                      round/noround       X
               INTO=LINE
ALLOC10  EQU   *
         BAL   R14,SPACE2              double space
         STRING '  UNIT NAME(',(DEFUNIT,,T),')',                       X
               INTO=LINE
         TM    JBB5522,L'JBB5522       HBB5522 ?
         BNO   ALLOC12                 no, jump
         STRING (LINE,,T),' UNITAFF(',(DEFAFFNM,,T),')',INTO=LINE
ALLOC12  EQU   *
         BAL   R14,SPACE2              double space
         TM    HBB4410,L'HBB4410       running on ESA 410?
         BNO   ALLOC99                 no, quit
         STRING '  TIOT SIZE(',(DEFTIOTS,FL1,L),')',INTO=LINE
         BAL   R14,SPACE2              double space
         LA    R2,=C'NO '
         TM    DEFFLG2,DEFSDSWT        sdsn_wait waitalloc((no)
         BZ    *+8                     no
         LA    R2,=C'YES'              yes
         STRING '  SDSN_WAIT WAITALLOC(',((R2),3,T),')',INTO=LINE
         BAL   R14,SPACE2              double space
         TM    DEFVOLS,DEFVOLUM        volume_enq policy(wtor)
         BZ    *+8                     no
         LA    R2,=C'WTOR  '
         TM    DEFVOLS,DEFVOLUW        volume_enq policy(wait)
         BZ    *+8                     no
         LA    R2,=C'WAIT  '
         TM    DEFVOLS,DEFVOLUC        volume_enq policy(cancel)
         BZ    *+8                     no
         LA    R2,=C'CANCEL'
         STRING '  VOLUME_ENQ POLICY(',((R2),6,T),')',INTO=LINE
         BAL   R14,SPACE2              double space
         TM    DEFMNTS,DEFMOUNC        volume_mnt policy(cancel)
         BZ    *+8                     no
         LA    R2,=C'CANCEL'
         TM    DEFMNTS,DEFMOUNT        volume_mnt policy(wtor)
         BZ    *+8                     no
         LA    R2,=C'WTOR  '
         STRING '  VOLUME_MNT POLICY(',((R2),6,T),')',INTO=LINE
         BAL   R14,SPACE2              double space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFSPCS,DEFSPCWS        spec_wait policy(wtor)
         BZ    *+10                    no
         MVC   WORK256(4),=C'WTOR'
         TM    DEFSPCS,DEFSPCWC        spec_wait policy(cancel)
         BZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFSPCS,DEFSPCWW        spec_wait policy(waitnoh)
         BZ    *+10                    no
         MVC   WORK256(7),=C'WAITNOH'
         TM    DEFSPCS,DEFSPCWH        spec_wait policy(waithold)
         BZ    *+10                    No
         MVC   WORK256(8),=C'WAITHOLD'
         STRING '  SPEC_WAIT POLICY(',                                 X
               (WORK256,8,T),')',   WTOR/CANCEL/WAITNOH/WAITHOLD       X
               INTO=LINE
         TM    DEFSPCS,DEFSPCWW+DEFSPCWH was it waitnoh or waithold
         BZ    ALLOC20                 No
         BAL   R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFSNWAI,DEFSNWC        policynw(cancel)
         BZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFSNWAI,DEFSNW         policynw(wtor)
         BZ    *+10                    no
         MVC   WORK256(4),=C'WTOR'     yes
         STRING 12X,                                                   X
               'MAXNWAIT(',(DEFSPMAX,FL1,L),') ',                      X
               'POLICYNW(',(WORK256,6,T),')',                          X
               INTO=LINE
ALLOC20  DS    0H
         BAL   R14,SPACE2              double space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFOFFS,DEFOFFLN        allc_offln policy(wtor)
         BZ    *+10                    no
         MVC   WORK256(4),=C'WTOR'
         TM    DEFOFFS,DEFOFFLC        allc_offln policy(cancel)
         BZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFOFFS,DEFOFFLW        allc_offln policy(waitnoh)
         BZ    *+10                    no
         MVC   WORK256(7),=C'WAITNOH'
         TM    DEFOFFS,DEFOFFLH        allc_offln policy(waithold)
         BZ    *+10                    no
         MVC   WORK256(8),=C'WAITHOLD'
         STRING '  ALLC_OFFLN POLICY(',                                X
               (WORK256,8,T),')',                                      X
               INTO=LINE
         TM    DEFOFFS,DEFOFFLH+DEFOFFLW was it WAITNOH or WAITHOLD
         BZ    ALLOC30
         BAL   R14,SPACE1              single space
         MVC   WORK256(L'BLANKS),BLANKS
         TM    DEFNWAIT,DEFNWC         policynw(cancel)
         BZ    *+10                    no
         MVC   WORK256(6),=C'CANCEL'
         TM    DEFNWAIT,DEFNW          policynw(wtor)
         BZ    *+10                    no
         MVC   WORK256(4),=C'WTOR'
         STRING 13X,                                                   X
               'MAXNWAIT(',(DEFAOMAX,FL1,L),') ',                      X
               'POLICYNW(',(WORK256,6,T),')',                          X
               INTO=LINE
ALLOC30  DS    0H
         BAL   R14,SPACE2              double space
         LA    R2,=C'YES'
         TM    DEFFLG2,DEFTERMJ        catlg_err fail_job(yes)
         BO    *+8                     yes
         LA    R2,=C'NO '              no
         LA    R3,=C'YES'
         TM    DEFFLG2,DEFWTOCF        catlg_err errormsg(yes)
         BO    *+8                     yes
         LA    R3,=C'NO '              no
         STRING '  CATLG_ERR FAIL_JOB(',((R2),3,T),                    X
               ') ERRORMSG(',((R3),3,T),')',                           X
               INTO=LINE
         BAL   R14,SPACE2              double space
ALLOC99  END_PROC
*
*        From that point on, drop R8 in END_PROC
*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R8,R12,R14,R15
         DROP  R1,R2,R3,R4,R5,R6,R7,R8,R12,R14,R15 RELSE TEMP BASE REGS
         MEND                                                     MACRO
         TITLE 'SHOWMVS &REL - Selected Global Control Blocks'
*---------------------------------------------------------------------*
*                                                                     *
*Addresses of selected global control-blocks                          *
*                                                                     *
*   CVT 00FD3E88  EXT1 00FD43D8  EXT2 00FD43E8  SCVT 00FD30B0         *
* JESCT 00FD46B0   EXT 00C29028  DACA 044F40C8  PCDP 044FF720         *
* ASMVT 00FDB330  PART 01C65070  SART 01C88FB0                        *
*  SMCA 80FB3E68  FRDS 00FA3E10  SSTP 00FB1D78                        *
* AMCBS 00FC3700   CAX 00BC4388   DFA 00FD2F94   GDA 00FD2F94         *
*  RMCT 01304020   CCT 01304150  DMDT 01CE1830  WMST 01CE1468         *
*   LLT 00FB02C0   LPA 01E1E000   APF 00FB0ED8                        *
*  ALPA 00F971C8  PLPD 00C3B000  SVCT 011751A8                        *
*  RCVT 00FBF0A8  DSDT 06108728 ACCVT 00000000                        *
*                                                                     *
*---------------------------------------------------------------------*
ADDR100  BEGIN_PROC KW=GLOBALADDRESSES
         STRING 'Addresses of selected global control-blocks',INTO=LINE
         BAL   R14,SPACE2              double space
         STRING '   CVT ',(CVTPTR,4,X),                                X
               '  EXT1 ',(CVTEXT1,,X), CVTXTNT1                        X
               '  EXT2 ',(CVTEXT2,,X), CVTXTNT2                        X
               '  SCVT ',(CVTABEND,,X),                                X
               '  ECVT ',(ECVT@,,X),                           HBB4410 X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTJESCT             JES control Table
         USING JESCT,R7
         STRING ' JESCT ',(CVTJESCT,,X),                               X
               '   EXT ',(JESCTEXT,,X),                                X
               '  DACA ',(JESDACA,,X),                                 X
               '  PCDP ',(JESPCDP,,X),                                 X
               '   PPT ',(JESPPT,,X),                                  X
               ' SSIVT ',(IGDSSIVT,,X),                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTASMVT             ASM VT
         USING ASMVT,R7
         STRING ' ASMVT ',(CVTASMVT,,X),                               X
               '  PART ',(ASMPART,,X),                                 X
               '  SART ',(ASMSART,,X),                                 X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING '  MSER ',(CVTMSER,,X),                                X
               '  SCCB ',(CVTSCPIN,,X),                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTSMCA              SMF SMCA
         USING SMCABASE,R7
         STRING '  SMCA ',(CVTSMCA,,X),                                X
               '  FRDS ',(SMCAFRDS,,X),                                X
               '  SSTP ',(SMCASSTP,,X),                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTCBSP              AMCBS
         USING AMCBS,R7
         STRING ' AMCBS ',(CVTCBSP,,X),                                X
               '   CAX ',(CBSCAXCN,,X),                                X
               '   DFA ',(CVTDFA,,X),                                  X
               '   GDA ',(CVTDFA,,X),                                  X
               '  STGX ',(CVTSMEXT,,X),                                X
               '   SVT ',(CVTSVT,,X),                                  X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTOPCTP             RESOURCE MANAGER CONTROL TABLE
         USING RMCT,R7
         STRING '  RMCT ',(CVTOPCTP,,X),                               X
               '   CCT ',(RMCTCCT,,X),                                 X
               '  DMDT ',(RMCTDMDT,,X),                                X
               '  WMST ',(RMCTWMST,,X),                                X
               '  ICST ',(RMCTICST,,X),                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R7
         STRING '   LLT ',(CVTLLTA,,X),                                X
               '   LPA ',(CVTEPLPS,,X),                                X
               '   APF ',(CVTAUTHL,,X),                                X
               '  CSVT ',(CSVT@,,X),                                   X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTABEND
         USING SCVTSECT,R7
         STRING '  ALPA ',(ALPACDE1,,X),  ALPAQ or DLPAQ               X
               '  PLPD ',(CVTLPDIA,,X),                                X
               '  SVCT ',(SCVTSVCT,,X),                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING '  VTAM ',(PSAATCVT-PSA,,X),                           X
               '  TCAS ',(CVTTCASP,,X),                                X
               '  TCAM ',(CVTAQAVT,,X),                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R2,CVTTVT
         USING TSVT,R2
         L     R3,TSVTTPVT             TSO/PARMLIB vector table
         USING TPVT,R3
         STRING '  TSVT ',(CVTTVT,,X),                                 X
               '  TPVT ',(TSVTTPVT,,X),                                X
               '  CTLT ',(TPVTCTLT,,X),                                X
               '  XPRM ',(TPVTXPRMD,,X),                               X
               INTO=LINE
         BAL   R14,SPACE1              single space
         L     R7,CVTRAC               RACF VECTOR TABLE
         USING RCVT,R7
         STRING '  RCVT ',(CVTRAC,,X),                                 X
               '  DSDT ',(RCVTDSDT,,X),                                X
               ' ACCVT ',(ACF2CVT,,X),                                 X
               INTO=LINE
         BAL   R14,SPACE1              single space
         BAL   R14,BLANK1              blank line
ADDR199  END_PROC
         TITLE 'SHOWMVS &REL - Current JOB/Step Data'
*---------------------------------------------------------------------*
*                                                                     *
*Current Job Step:                                                    *
*                                                                     *
*  //GILBERT  JOB (ACCT#),CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),          *
*  // TIME=(0,20),REGION=6144K,PERFORM=1,USER=IBMUSER,GROUP=SYSG2     *
*                                                                     *
*    Sub-System(JES2) JOB-Id(JOB03158) SWA(Above) BLP(No) Journal(No) *
*    Address-space type: Batch or STC (non-TSO)                       *
*    Job Start Date: 93/04/09  Time: 15H02M08                         *
*                                                                     *
*    CPU time used: 000H00M06S54                                      *
*                                                                     *
*  //LOADGO EXEC PGM=LOADER,TIME=(0,3),                               *
*  // PARM='NOPRINT'                                                  *
*                                                                     *
*    PERFORM(1)   DPRTY(X'10')                                        *
*    Step Start Date: 93/04/09  Time: 15H02M20                        *
*                                                                     *
*      CPU time  EXCP  Connect  TGET  TPUT   Service  Frames  Paging  *
*     0S789.416    32      658     0     0     43272     259      19  *
*                                                                     *
*  Virtual Storage Usage:                                             *
*                            Limit   In Use  Available  High-watermark*
*                                                                     *
*    User SPLS (Below)       4160K    1180K      2980K        1616K   *
*    Auth SPLS (Below)       6060K     580K      5480K         804K   *
*    User SPLS (Above)      32768K    4388K     28380K        4392K   *
*    Auth SPLS (Above)    1998848K   11448K   1987400K       12720K   *
*---------------------------------------------------------------------*
JOBSTEP  BEGIN_PROC KW=JOBJCL
         STRING 'Current Job Step:',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
         L     R9,PSATOLD              own TCB
         L     R4,TCBJSCB              job step control block
         USING IEZJSCB,R4
         L     R5,JSCBJCT              Job Control Table
         USING JCT,R5
         SLR   R7,R7
         ICM   R7,B'0111',JCTACTAD     SVA OF ACT
         USING IEFAACTB-16,R7
*
         STRING '  //',(JCTJNAME,,T),' JOB ',INTO=LINE
         MVI   WKCELL3,C' '            no comma
         MVI   WKCELL3+1,C'('          begin sub-list
         SLR   R3,R3
         ICM   R3,B'0001',ACTJNFLD     # OF ACCT FIELDS
         BZ    JOBS120                 no account information
         LA    R1,ACTJNFLD+1           first sub-parm
         SLR   R2,R2
*loop
JOBS114  ICM   R2,B'0001',0(R1)        size of sub-parm
         STRING (1(R1),(R2)),INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
         LA    R1,1(R2,R1)             skip current sub-field
         BCT   R3,JOBS114              next sub-field
*endloop
         LA    R15,LINE(R15)           last pos in line
         MVI   0(R15),C')'             close sub-list
         B     JOBS121
*
JOBS120  MVI   WKCELL3+1,C','          ACCT field missing
*
JOBS121  CLC   ACTPRGNM,BLANKS         do we have a PROGRAMMER'S NAME ?
         BE    JOBS122                 no, jump
         STRING (ACTPRGNM,,T),INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
*
JOBS122  CLI   JCTJCSMF,X'E0'          TSO user?
         BE    JOBS125                 yes, jump
         CLI   PRISUBTY+3,C'3'         JES3?                      DGA
         BE    JOBS125                 yes, jump                  DGA
         STRING 'CLASS=',JCTJCSMF,INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
*
JOBS125  STRING 'MSGCLASS=',JCTJMGPO,INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
*
JOBS130  STRING 'MSGLEVEL=(1,1)',INTO=WORK256
         TM    JCTJMGLV,INCMMGL1       MSGLEVEL=1 ?
         BO    JOBS133                 yes, jump
         MVI   WORK256+10,C'2'         MSGLEVEL=(2,1)
         TM    JCTJMGLV,INCMMGL2       MSGLEVEL=2 ?
         BO    JOBS133                 yes, jump
         MVI   WORK256+10,C'0'         MSGLEVEL=(0,1)
JOBS133  TM    JCTJMGLV,INCMALL        MSGLEVEL=(,1) ?
         BO    JOBS134                 yes, jump
         MVI   WORK256+12,C'0'         MSGLEVEL=(,0)
JOBS134  BAL   R14,JOBS155             append new text to current line
*
JOBS136  SLR   R6,R6
         ICM   R6,B'0111',JCTJCTX      SVA OF JCTX
         USING JCTX,R6
         L     R1,JCTXJTL              JOB TIME limit (HBB4410)
         TM    HBB4410,L'HBB4410       running on ESA 410?
         BO    JOBS136T                yes, jump
         SLR   R1,R1
         ICM   R1,B'0111',JCTJMRTL     JOB TIME limit (XA,ESA313)
JOBS136T LTR   R1,R1                   TIME=0 (TSO) ?
         BZ    JOBS140                 yes, exit
         SLR   R0,R0
         D     R0,=F'100'              get time in seconds
         SLR   R0,R0
         D     R0,=F'60'               get time in minutes
         STRING 'TIME=(',((R1),,L),',',((R0),,L),')',INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
*
JOBS140  L     R6,JSCSCT               Current step's SCT
         USING SCT,R6
         LH    R2,JCTEQREG             region parm from job card
         CH    R2,=H'16383'            region > 16M ?
         BE    JOBS146                 yes, jump
         CLM   R2,B'0111',SCTRGSZ      same as REGION on EXEC card ?
         BNE   JOBS147                 no, exit
JOBS146  ICM   R2,B'0111',SCTRGSZ      yes, use value from EXEC card
         STRING 'REGION=',((R2),,L),'K',INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
         BSM   R5,0                    make R5 negative
*
JOBS147  TM    JCTSTAT2,JCTPERFM       PERFORM specified on EXEC?
         BZ    JOBS149                 no, jump
         STRING 'PERFORM=',(SCTPRFMF,H,L),INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
         BSM   R6,0                    make R6 negative
*
JOBS149  L     R2,PSAAOLD-PSA          MY ASCB
         USING ASCB,R2
         L     R3,ASCBASXB             MY ASXB
         USING ASXB,R3
         STRING 'USER=',(ASXBUSER,,T),INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
         ICM   R3,B'1111',ASXBSENV     MY ACEE
         BNP   JOBS149Z                no RACF, exit
         USING ACEE,R3
         STRING 'GROUP=',(ACEEGRPN,,T),INTO=WORK256
         BAL   R14,JOBS155             append new text to current line
JOBS149Z BAL   R14,SPACE1          <== Single Space
*
*        //*MAIN CLASS=ABCDEF
*
         CLI   PRISUBTY+3,C'3'         JES3?                      DGA
         BNE   JOBS$J3X                No, continue               DGA
         L     R1,TCBTCT               -> TCT                     DGA
         L     R3,TCTLCTAD-SMFTCT(R1)  -> LCT                     DGA
         USING LCT,R3                                             DGA
         STRING '  //*MAIN CLASS=',LCTCLASS,INTO=LINE             DGA
         BAL   R14,SPACE1          <== Single space               DGA
JOBS$J3X EQU   *                                                  DGA
         BAL   R14,BLANK1          <== Double space after jobcard DGA
         B     JOBS162
*
*        append WORK256 to LINE
*
JOBS155  ST    R14,WKCELL3+4           save return address
         LTR   R0,R15                  save length
         BZ    JOBS155C                zero length, jump
         LA    R14,WORK256             FIRST POS
JOBS155L CLI   0(R14),C' '             imbedded space?
         BE    JOBS155Q                YES, EXIT
**MSGL   CLI   0(R14),C','             imbedded comma?
**MSGL   BE    JOBS155Q                YES, EXIT
         LA    R14,1(,R14)             BUMP POINTER
         BCT   R15,JOBS155L            SCAN AREA
         B     JOBS155C                YES, EXIT
JOBS155Q MVC   NEXTLINE,WORK256        move to work area
         STRING '''',(NEXTLINE,(R0)),'''',INTO=WORK256
         LR    R0,R15                  save length
JOBS155C STRING (LINE,,T),(WKCELL3,2,T),(WORK256,(R0)),',',            X
               INTO=NEXTLINE
         CL    R15,ZSCREENW            overflow?
         BH    JOBS155O                yes, jump
         STRING (LINE,,T),(WKCELL3,2,T),(WORK256,(R0)),INTO=LINE
         B     JOBS155X
JOBS155O STRING (LINE,,T),',',INTO=LINE
         BAL   R14,SPACE1          <== Single space
         STRING '  // ',(WORK256,(R0)),INTO=LINE
JOBS155X MVI   WKCELL3,C','            next parm needs a comma
         MVI   WKCELL3+1,C' '          next parm needs no space
         L     R14,WKCELL3+4           return address
         BR    R14
*
JOBS162  MVC   WKCELL1(5),=C'Below'    default placement for SWA
         TM    JCTSTAT2,JCTSWAUP       SWA above?
         BZ    JOBS163                 no, jump
         MVC   WKCELL1(5),=C'Above'    yes, remember it
JOBS163  MVC   WKCELL2(3),=C'No '      default
         TM    JCTSTAT2,JCTBLP         BLP authorized?
         BZ    JOBS164                 no, jump
         MVC   WKCELL2(3),=C'Yes'      yes, remember it
JOBS164  MVC   WKCELL3(3),=C'No '      default
         TM    JSCBJJSB,JSCBJNLF       Job Journaling active?
         BO    JOBS168                 no, jump
         MVC   WKCELL3(3),=C'Yes'      yes, remember it
JOBS168  L     R3,JSCBSSIB             point to the SSIB
         USING SSIB,R3
         STRING '    Sub-System(',SSIBSSNM,')',                        X
               '  JOB-Id(',SSIBJBID,')',                               X
               '  SWA(',(WKCELL1,5),')',     SWA(below/above)          X
               '  BLP(',(WKCELL2,3,T),')',     BLP(yes/no)             X
               '  Journal(',(WKCELL3,3,T),')', Job Journal (yes/no)    X
               '  ASID(X''',(ASCBASID,,X),''')',                       X
               INTO=LINE
         BAL   R14,SPACE1          <== Single space
*
*        Address-space type: Batch/TSO-batch/TSO-on-line
*
         TM    TSO_ON_LINE,L'TSO_ON_LINE
         BO    JOBS169T                yes, jump
         TM    TSO_BATCH,L'TSO_BATCH
         BO    JOBS169B                yes, jump
JOBS169N STRING '    Address-space type: ','Batch or STC (non-TSO)',   X
               INTO=LINE
         B     JOBS169
JOBS169T STRING '    Address-space type: ','TSO (on-line)',            X
               INTO=LINE
         B     JOBS169
JOBS169B STRING '    Address-space type: ','TSO (Batch)',              X
               INTO=LINE
JOBS169  BAL   R14,SPACE1          <== Single space
*
JOBS170  SLR   R1,R1
         ICM   R1,B'0111',JCTJMRJT     job start time (binary)
         BAL   R14,BINTIME             convert time to HH MM SS
         TM    HBB6603,L'HBB6603       OS/390 R3?
         BO    JOBS172                 yes, use Y2K date from JCTX
         ZAP   WKCELL1,JCTJMRJD        yydddF   (prior to HBB4430)
         ZAP   WKCELL2,JCTSSD          yydddF   (prior to HBB4430)
         B     JOBS173                 continue
JOBS172  EQU   *
         SLR   R14,R14
         ICM   R14,B'0111',JCTJCTX     SVA OF JCTX
         ZAP   WKCELL1,JCTXJMRD-JCTX(,R14) 0cyydddF (HBB4430 and up)
         ZAP   WKCELL2,JCTXSSD-JCTX(,R14) 0cyydddF (HBB4430 and up)
JOBS173  EQU   *
         STRING '    Job Start Date: ',(WKCELL1,P,YYYY-MM-DD),         X
               '  Time: ',((R3),,R2Z),'.',((R2),,R2Z),'.',((R1),,R2Z), X
               INTO=LINE
         BAL   R14,SPACE2          <== Double space
*
*        CPU time used (JOB)
*
JOBS180  TM    TSO_ON_LINE,L'TSO_ON_LINE on-line TSO user?
         BO    JOBS200                 YES, EXIT
         L     R1,ACTJTIME             Accumulated TCB time
         A     R1,JCTSRBT              Accumulated SRB time
         BZ    JOBS200                 zero, quit
         BAL   R14,BINTIME             convert time to HH MM SS
         STRING '    CPU time used: ',((R3),,R3Z),'H',((R2),,R2Z),'M', X
               ((R1),,R2Z),'S',((R0),,R2Z),                            X
               INTO=LINE
**           1X,(ACTJTIME,,X),1X,(JCTSRBT,,X),                       X
         BAL   R14,SPACE2          <== Double Space
*
*        //stepname EXEC PGM=program,REGION=1234K,TIME=(30,0)
*
JOBS200  SLR   R7,R7                   SCTX address
         ICM   R7,B'0111',SCTXBTTR     address of SCTX (SCT extension)
         USING SCTX,R7
         SLR   R0,R0
         ICM   R1,B'1111',SCTXSTL      step time limit (HBB4410)
         BNZ   *+8                     OK, jump
         ICM   R1,B'0111',SCTSTIME     step time limit (XA/ESA310)
         D     R0,=F'100'              get it in seconds
         SLR   R0,R0
         D     R0,=F'60'               get it in minutes
         STRING '  //',(SCTSNAME,,T),' EXEC PGM=',(SCTPGMNM,,T),       X
               ',TIME=(',((R1),,L),',',((R0),,L),')',                  X
               INTO=LINE
*
         LTR   R5,R5                   REGION specified on JOB card?
         BM    JOBS230                 yes, jump
         STRING (LINE,,T),',REGION=',(SCTRGSZ,FL3,L),'K',INTO=LINE
JOBS230  LH    R2,SCTNIUSL             max number of DD stmts
         SH    R2,SCTLALOC             minus # of godd DDs
         BZ    JOBS240                 zero, jump
         STRING (LINE,,T),',DYNAMNBR=',((R2),,L),INTO=LINE
JOBS240  EQU   *
         LTR   R6,R6                   PERFORM specified on JOB?
         BO    JOBS250                 yes, jump (JOB overrides EXEC)
         TM    SCTSDP,SCTEPRFM         PERFORM specified on EXEC?
         BZ    JOBS250                 no, jump
         STRING (LINE,,T),',PERFORM=',(SCTPRFMF,H,L),INTO=LINE
JOBS250  EQU   *
         SLR   R2,R2
         ICM   R2,B'0011',SCTSEXEC     PARM length
         BZ    JOBS270                 no PARM, jump
         STRING (LINE,,T),',',INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING '  // PARM=''',(SCTXPARM,(R2)),'''',                   X
               INTO=LINE
JOBS270  BAL   R14,SPACE2          <== Double Space
*
JOBS300  L     R6,PSAAOLD-PSA          ASCB
         USING ASCB,R6
         L     R7,ASCBOUCB             MY OUCB
         USING OUCB,R7
         STRING '    PERFORM(',(OUCBSPG,H,L),')',                      X
               '   DPRTY(X''',(ASCBDP,,X),''')',  dispatching priority X
               INTO=LINE
         BAL   R14,SPACE1          <== Single space
*
JOBS410  SLR   R1,R1
         ICM   R1,B'0111',JCTJMRSS     Step start time (binary)
         BAL   R14,BINTIME             convert time to HH MM SS
         STRING '    Step Start Date: ',(WKCELL2,P,YYYY-MM-DD),        X
               '  Time: ',((R3),,R2Z),'.',((R2),,R2Z),'.',((R1),,R2Z), X
               INTO=LINE
         BAL   R14,SPACE1          <== Single space
*
*        CPU TIME (STEP)
*
JOBS420  EQU   *
         BAL   R14,BLANK1              Blank Line
&STR     SETC  'CPU time     EXCP   Connect   TGET   TPUT    Service'
&STR     SETC  '&STR   Frames    Paging'
         STRING 11X,'&STR',INTO=LINE
         BAL   R14,SPACE1          <== Single space
         STRING '.CPUTIME',INTO=LINE   updated by RDRTNE
JOBS429X BAL   R14,SPACE2          <== Double Space
*
*        Storage Allocation Table
*
JOBS600  STRING '  Virtual Storage Usage:',INTO=LINE
         BAL   R14,SPACE2          <== Double Space
         STRING 30X,'Limit      In Use    Available    High-watermark',x
               INTO=LINE
         BAL   R14,SPACE2          <== Double Space
         STRING '.SPL00',INTO=LINE     Place-holder for RDRTNE
         BAL   R14,SPACE1          <== Single Space
         STRING '.SPL04',INTO=LINE     Place-holder for RDRTNE
         BAL   R14,SPACE1          <== Single Space
         STRING '.SPL08',INTO=LINE     Place-holder for RDRTNE
         BAL   R14,SPACE1          <== Single Space
         STRING '.SPL12',INTO=LINE     Place-holder for RDRTNE
         BAL   R14,SPACE2              Double Space
JOBSTP99 END_PROC
         TITLE 'SHOWMVS &REL - Current RACF Profile'
*---------------------------------------------------------------------*
*                                                                     *
*RACF Profile:                                                        *
*                                                                     *
*  User: IBMUSER   Group: SYSTEM    Terminal: L3270X21    Flags: 01 01*
*  UACC: None      Attributes: (none)                                 *
*  Name: John Doe                                                     *
*                                                                     *
*---------------------------------------------------------------------*
RACF00   BEGIN_PROC KW=JOBDATA
         L     R2,PSAAOLD-PSA          POINT TO MY ASCB.
         L     R2,ASCBASXB-ASCB(,R2)   POINT TO MY ASXB.
         L     R2,ASXBSENV-ASXB(,R2)   POINT TO MY ACEE.
         USING ACEE,R2
         TM    ACEEFLG1,ACEERACF       this user defined to RACF?
         BZ    RACF99                  no, quit
         STRING 'RACF Profile:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  User: ',ACEEUSRI,   RACF user                       X
               '  Group: ',ACEEGRPN,   Connect Group name              X
               '  Terminal: ',ACEETRID, terminal ID                    X
               '    Flags: ',(ACEEFLG1,,X),1X,(ACEEFLG2,,X),1X,        X
               (ACEEFLG3,,X),1X,(ACEEFLG4,,X),1X,                      X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         BAL   R1,RACF36               BRANCH AROUND TABLE
         DC    AL1(ACEEALTR),C'Alter  '
         DC    AL1(ACEECNTL),C'Control'
         DC    AL1(ACEEUPDT),C'Update '
         DC    AL1(ACEEREAD),C'Read   '
         DC    AL1(ACEENONE),C'None   '
         DC    AL1(00),0H'0'
RACF36   BAL   R14,SCAN_TM             SCAN TABLE
         DC    Y(1+7)                  SIZE OF A TABLE ENTRY
         TM    ACEEFLG2,*-*            Test RACF flag
         BO    RACF38                  NOT FOUND, JUMP AROUND "MVC"
         LA    R1,BLANKS               UACC is undetermined
RACF38   STRING '  UACC: ',(1(R1),7),'   Attributes:',                 X
               INTO=LINE
         LA    R4,LINE+1(R15)          authority level
        #STATUS ACEEFLG1,ACEESPEC,'Special'
        #STATUS ACEEFLG1,ACEEADSP,'ADSP'
        #STATUS ACEEFLG1,ACEEOPER,'Operations'
        #STATUS ACEEFLG1,ACEEAUDT,'Auditor'
        #STATUS ACEEFLG1,ACEELOGU,'Logged'
        #STATUS ACEEFLG1,ACEEPRIV,'Privileged'
      TM ACEEFLG1,ACEESPEC+ACEEADSP+ACEEOPER+ACEEAUDT+ACEELOGU+ACEEPRIV
         BNZ   RACF47                  at least one attribute, jump
         MVC   0(6,R4),=C'(none)'      show it
*             '  Application: ',ACEEAPLN,                             X
*             '  Surrogate UID: ',ACEESUID,                           X
RACF47   BAL   R14,SPACE1              Single Space
*
*        User name
*
         ICM   R1,B'1111',ACEEUNAM     addr of user name
         BZ    RACF50                  no name, exit
         SLR   R0,R0
         IC    R0,0(,R1)               pick up length+1
         BCTR  R0,0                    get name length
         STRING '  Name: ',(1(R1),(R0)),INTO=LINE
         BAL   R14,SPACE1              Single Space
*
*        Other Groups user can connect to
*
RACF50   ICM   R3,B'1111',ACEEFCGP     CGRP address
         BZ    RACF90                  zero, exit
         USING CGRP,R3
         SLR   R4,R4
         LH    R5,CGRPCORE+2           get length of CGRP table
         SH    R5,=AL2(CGRPENT-CGRP)   subtract prefix length
         D     R4,=A(L'CGRPENT)        calculate number of entries
         CH    R5,=H'1'                more than 1 entry?
         BNH   RACF90                  no, exit
         STRING '  Groups Available:',INTO=LINE
         LA    R4,CGRPENT              first entry
         USING CGRPENTD,R4
*loop
RACF52   STRING (LINE,,T),1X,CGRPNAME,INTO=LINE
         LA    R4,CGRPENTD+L'CGRPENT   next entry
         BCT   R5,RACF52
*endloop
         BAL   R14,SPACE1              Single Space
*
RACF90   BAL   R14,BLANK1              Blank line
RACF99   END_PROC
*
         TITLE 'SHOWMVS &REL - Current TSO Profile'
*---------------------------------------------------------------------*
*                                                                     *
*TSO Profile:                                                         *
*                                                                     *
*  Attributes: OPER ACCT SUBMIT                                       *
*  Unit: SYSALLDA   Dest: Local                                       *
*  Submit Hold Class: X  Submit Class: A  Msgclass: X  Sysout Class: Z*
*  Prompt Intercom Pause Msgid Nomode WTPMSG Norecover Prefix(IBMUSER)*
*  Command: EXEC (PDF41)                                              *
*                                                                     *
*---------------------------------------------------------------------*
PROF00   BEGIN_PROC KW=TSOPROFILE
         L     R5,TCBJSCB              point at JSCB
         USING IEZJSCB,R5
         ICM   R6,B'1111',JSCBPSCB     point at PSCB
         BZ    PROF99                  not a TSU, exit
         USING PSCB,R6
         STRING 'TSO Profile:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  Attributes:',INTO=LINE
         LA    R4,LINE+1(R15)          start of attribute list
        #STATUS PSCBATR1,PSCBCTRL,'OPER'
        #STATUS PSCBATR1,PSCBACCT,'ACCT'
        #STATUS PSCBATR1,PSCBJCL,'SUBMIT'
        #STATUS PSCBATR1,PSCBVMNT,'MOUNT'
        #STATUS PSCBATR1,PSCBCNAU,'CONSOLE'
         TM    PSCBATR1,PSCBCTRL+PSCBACCT+PSCBJCL+PSCBVMNT+PSCBCNAU
         BNZ   PROF12                  at least one attribute, jump
         MVC   0(6,R4),=C'(none)'      show it
*
PROF12   BAL   R14,SPACE1          <== next line
         MVC   WKCELL1,=C'Local   '    default destination
         CLI   PSCBDEST,0              any special dest?
         BE    PROF15                  no, jump
         MVC   WKCELL1,PSCBDEST        yes, use it
PROF15   STRING '  Unit: ',PSCBGPNM,'   Dest: ',WKCELL1,               X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING '  Submit Hold Class: ',PSCBSUBH,                      X
               '   Submit Class: ',PSCBSUBC,                           X
               '   Msgclass: ',PSCBSUBM,                               X
               '   Sysout Class: ',PSCBSOUT,                           X
               INTO=LINE
         TR    LINE,TRTPRINT           get rid of X'00' fields
         BAL   R14,SPACE1          <== next line
*
*        Display Profile options and DSN prefix from UPT
*
PROF31   L     R7,PSCBUPT              User profile table
         USING UPT,R7
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BNO   PROF31B                 no, jump
         LA    R14,UPT_LENGTH          length
         IC    R15,OLDPKF              source key
         MVCK  WORK256(R14),UPT,R15    Move line to buffer
         LA    R7,WORK256              copy of the UPT
PROF31B  EQU   *
         MVC   LINE,BLANKS             blank line
         LA    R4,LINE+2               start of options
         BAL   R1,PROF32
         DC    AL1(UPTNPRM),C'Noprompt  '
         DC    AL1(UPTNCOM),C'Nointercom'
         DC    AL1(UPTPAUS),C'Pause     '
         DC     AL1(UPTMID),C'Msgid     '
         DC    AL1(UPTMODE),C'Mode      '
         DC     AL1(UPTWTP),C'WTPMSG    '
         DC    AL1(UPTRCVR),C'Recover   '
         DC    X'00',0H'0'             end of table
PROF31TM TM    UPTSWS,*-*              check UPT switch
*loop
PROF32   IC    R15,0(,R1)              pick up TM mask
         EX    R15,PROF31TM            test UPT switch
         BO    PROF34                  jump if one
         CLI   1(R1),C'N'              NO-something?
         BE    PROF33                  yes, jump
         STRING 'No',(1(R1),10),INTO=((R4),10)
         TM    3(R4),X'40'             2nd letter (T in WTPMSG)
         BO    PROF36                  uppercase, leave it
         NI    2(R4),255-X'40'         lowercase
         B     PROF36
PROF33   STRING (1+2(R1),10-2,T),INTO=((R4),10)
         OI    0(R4),X'40'             uppercase
         B     PROF36
PROF34   STRING (1(R1),10,T),INTO=((R4),10)
*
PROF36   LA    R4,1(R15,R4)            bump pointer
         LA    R1,1+10(,R1)
         CLI   0(R1),0                 end of table?
         BNE   PROF32                  not yet, loop
*endloop
         SLR   R1,R1
         IC    R1,UPTPREFL             Prefix length
         STRING 'Prefix(',(UPTPREFX,(R1)),')',INTO=((R4),NEXTLINE)
         BAL   R14,SPACE1          <== next line
*
*        TSO command from TSO/E LOGON menu
*
         TM    TSO_ON_LINE,L'TSO_ON_LINE on-line TSO user?
         BNO   PROF98                  NO, EXIT
         L     R1,PSAAOLD-PSA          MY ASCB
         L     R1,ASCBASXB-ASCB(,R1)   MY ASXB
         ICM   R1,B'1111',ASXBLWA-ASXB(R1) LOGON WORK AREA
         BZ    PROF42                  not TSO, jump
         USING LWA,R1
         STRING '  Command: ',LWALGCMD,INTO=LINE
         BAL   R14,SPACE1          <== next line
PROF42   EQU   *
*
         TM    AUTHORIZED,L'AUTHORIZED Authorized?
         BNO   PROF98                  no, exit
         ICM   R4,B'1111',TSB@         addr of the TSB
         BZ    PROF98                  zero, exit
         USING TSB,R4
         BAL   R14,EXECKEY0            execute next instr in key=0
         ICM   R5,B'1111',TSBEXTNT     addr of the TSBX
         BZ    PROF98                  zero, exit
         USING TSBX,R5
         LA    R14,X'60'               VTAM key
         LA    R15,L'WKCELL1           length
         MVCK  WKCELL1(R15),TSBXLMOD,R14
         LA    R15,L'TSBXBIND          length
         MVCK  WORK256(R15),TSBXBIND,R14
         STRING '  Logmode: ',WKCELL1,INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING '  BIND_Data: ',                                       X
               (WORK256+00,4,X),1X,                                    X
               (WORK256+04,4,X),1X,                                    X
               (WORK256+08,4,X),1X,                                    X
               (WORK256+12,4,X),1X,                                    X
               (WORK256+16,4,X),1X,                                    X
               (WORK256+20,4,X),1X,                                    X
               (WORK256+24,4,X),1X,                                    X
               (WORK256+28,4,X),1X,                                    X
               (WORK256+32,4,X),                                       X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
PROF98   EQU   *
         BAL   R14,BLANK1              Double space
PROF99   END_PROC
         TITLE 'SHOWMVS &REL - Current REXX Environment'
*---------------------------------------------------------------------*
*                                                                     *
*REXX Environment:                                                    *
*                                                                     *
*  Environment(TSO/E)  Lang(ENU)  ENVBLOCK(03005C90)  TCB(9FC0D8)     *
*                                                                     *
*    Host Command Table (3 entries)                                   *
*                                                                     *
*        1   MVS       IRXSTAM                                        *
*        2   LINK      IRXSTAM                                        *
*        3   ATTACH    IRXSTAM                                        *
*                                                                     *
*    Function Package Directories                                     *
*                                                                     *
*      Type(System)  Name(IRXEFMVS)  Addr(04009000)  Entries(7)       *
*                                                                     *
*        1   SYSVAR    04027BC0  00000000                             *
*        2   SYSDSN    04027908  00000000                             *
*        3   LISTDSI   040270E8  00000000                             *
*        4   OUTTRAP   040261F0  00000000                             *
*        5   PROMPT    04025310  00000000                             *
*        6   MSG       04024BC0  00000000                             *
*        7   GETMSG    04020E50  00000000                             *
*                                                                     *
*---------------------------------------------------------------------*
REXX00   BEGIN_PROC KW=REXX
         STRING 'REXX Environment:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         LA    R1,=C'IRXANCHR'         REXX Environment Block
         BAL   R14,JPASEARCH           find it in my JPAQ
         LTR   R15,R15                 found?
         BNZ   REXX98                  no, exit
         LR    R3,R0                   A(IRXANCHR)
         USING ENVTABLE_HEADER,R3
         LA    R4,ENVTABLE_FIRST       first entry
         USING ENVTABLE_ENTRY,R4
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R5,ENVTABLE_USED        number of entries used
*loop
REXX21   BAL   R14,EXECKEY0            execute next instr in key=0
         ICM   R6,B'1111',ENVTABLE_ENTRY+00    A(ENVBLOCK)
         BNP   REXX28                  not used, jump
         USING ENVBLOCK,R6
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R7,ENVBLOCK_PARMBLOCK   addr of the PARMBLOCK
         USING PARMBLOCK,R7
         IC    R0,OLDPKF               source key
         LA    R1,L'PARMBLOCK_ADDRSPN
         MVCK  WKCELL1(R1),PARMBLOCK_ADDRSPN,R0
         LA    R1,L'PARMBLOCK_LANGUAGE
         MVCK  WKCELL2(R1),PARMBLOCK_LANGUAGE,R0
         LA    R1,3
         MVCK  WKCELL3(R1),ENVTABLE_ENTRY+29,R0
         STRING '  Environment(',(WKCELL1,L'PARMBLOCK_ADDRSPN,T),      X
               ')  Lang(',(WKCELL2,L'PARMBLOCK_LANGUAGE,T),            X
               ')  ENVBLOCK(',((R6),,X),                               X
               ')  PARMBLOCK(',((R7),,X),                              X
               ')  TCB(',(WKCELL3,3,X),')',                            X
               INTO=LINE
**        '  ENVBLOCK=',((R6),,X),' PARMBLOCK=',((R7),,X),        X
         BAL   R14,SPACE2              Double Space
*
*        Display Host Command Table
*
REXX30   BAL   R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_SUBCOMTB   addr of the SUBCOMTB header
         USING SUBCOMTB_HEADER,R1
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R2,SUBCOMTB_USED        SUBCOMTB entries used
         LA    R0,1                    counter
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R1,SUBCOMTB_FIRST       first SUBCOMTB entry
         USING SUBCOMTB_ENTRY,R1
         STRING 4X,'Host Command Table (',((R2),,L),' entries)',       X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         LTR   R2,R2                   any entry to print?
         BNP   REXX28                  none, jump
*--loop
REXX31   IC    R14,OLDPKF              source key
         LA    R15,8+8+16              length
         MVCK  WORK256(R15),0(R1),R14
         STRING ((R0),,R9B),3X,        seq#                            X
               (WORK256,8),2X,         sub-command name                X
               (WORK256+8,8),2X,       module                          X
               (WORK256+16,16),        ?                               X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
         AH    R0,=H'1'                counter
         LA    R1,32(,R1)              next function
         BCT   R2,REXX31
*--endloop
         BAL   R14,BLANK1              Double space
*
         STRING 4X,'Function Package Directories',                     X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         USING PACKTB_HEADER,R1
         LA    R1,PACKTB_USER_FIRST    First USER PACKTB entry
         MVC   WKCELL1,=C'User    '    function type
         BAL   R14,REXX61          <== function package directory
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         LA    R1,PACKTB_LOCAL_FIRST   First LOCAL PACKTB entry
         MVC   WKCELL1,=C'Local   '    function type
         BAL   R14,REXX61          <== function package directory
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R1,PARMBLOCK_PACKTB     addr of the PACKTB header
         LA    R1,PACKTB_SYSTEM_FIRST  First SYSTEM PACKTB entry
         MVC   WKCELL1,=C'System  '    function type
         BAL   R14,REXX61          <== function package directory
REXX28   LA    R4,ENVTABLE_NEXT        next ENVTABLE_ENTRY
         BCT   R5,REXX21               process it
*endloop
         BAL   R14,BLANK1              BLANK LINE
         B     REXX99
*
*        Display Functions
*
REXX61   STM   R14,R4,TENWORDS         save registers
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R0,ENVTABLE_ENTRY+28    point at TCB
         LR    R15,R0                  pass TCB address
         L     R0,TCBLLS-TCB(,R15)     first LLE
         STM   R15,R4,TENWORDS+4       save registers
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R3,0(,R1)               addr of 1st PACKTB entry
         USING PACKTB_ENTRY,R3
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R4,8(,R1)               number of PACKTB entries used
*loop
REXX62   IC    R0,OLDPKF               source key
         LA    R1,L'PACKTB_NAME        length
         MVCK  WKCELL2(R1),PACKTB_NAME,R0
         L     R1,TENWORDS+8           first LLE
         USING LLE,R1
*--loop
REXX63   L     R2,LLECDPT              point at CDE
         USING CDENTRY,R2
         CLC   CDNAME,WKCELL2          compare PACKTB_NAME
         BE    REXX64                  yes, exit loop
         ICM   R1,B'1111',LLECHN       next LLE
         BP    REXX63                  next LLE
*--endloop
         SLR   R1,R1                   not loaded under TCB
         SLR   R2,R2                   not loaded under TCB
         MVI   WKCELL3,255             no dsn available
         B     REXX64B
*
*        CDE/LPDE found for package
*
REXX64   L     R0,CDENTPT              R0=EP ADDR
         BAL   R14,CSVDSN              get dsname
         MVI   WKCELL3,255             no dsn available
         LTR   R15,R15                 dsname located?
         BNZ   *+8                     no, jump
         ST    R1,WKCELL3              yes, save dsname address
         L     R1,CDENTPT              entry point
         DROP  R1,R2                   LLE,CDENTRY
         LA    R1,0(,R1)               AMODE31 bit off
         BAL   R14,EXECKEY0            execute next instr in key=0
         L     R2,12(,R1)              number of entries
REXX64B  EQU   *
         STRING 6X,'Type(',(WKCELL1,,T),        USER/LOCAL/SYSTEM      X
               ')  Name(',(WKCELL2,,T),         name of load-module    X
               ')  Addr(',((R1),,X),            address of load module X
               ')  Entries(',((R2),,L),')',     number of entries      X
               INTO=LINE
         ICM   R0,B'1111',WKCELL3      get/test dsname address
         BNP   REXX64T                 no dsname, jump
         STRING (LINE,,T),'  DSN(',((R0),44,T),')',INTO=LINE
REXX64T  EQU   *
         BAL   R14,SPACE2              Double Space
         LA    R0,1                    counter
         LA    R1,24(,R1)              first entry
         LTR   R2,R2                   any entry to print?
         BNP   REXX68                  none, jump
*--loop
*TM AUTH_ESR,L'AUTH_ESR <<<<<<<<<<
*BO REXX99
REXX65   IC    R14,OLDPKF              source key
         LA    R15,8+4+4+16            length
         MVCK  WORK256(R15),0(R1),R14
         STRING ((R0),,R9B),3X,        seq#                            X
               (WORK256,8),2X,         function name                   X
               (WORK256+8,4,X),2X,     function address                X
               (WORK256+16,8),         EP name                         X
               (WORK256+24,8),         DD name                         X
               INTO=LINE
         TR    LINE,TRTPRINT           clean up non-printable
         BAL   R14,SPACE1          <== next line
         AH    R0,=H'1'                counter
         LA    R1,32(,R1)              next function
         BCT   R2,REXX65
*--endloop
         BAL   R14,BLANK1              BLANK LINE
REXX68   LA    R3,PACKTB_NEXT          next entry
         BCT   R4,REXX62
*endloop
REXX69   LM    R14,R4,TENWORDS         restore registers
         BR    R14
*
REXX98   STRING '  REXX is not active in this address space.',INTO=LINE
         BAL   R14,SPACE2              Double Space
*
REXX99   END_PROC
         IRXENVT                       REXX Environment Tble (IRXANCHR)
         IRXENVB                       REXX Environment Block
EQUX     OPSYN EQU
         MACRO
&N       EQU   &A,&B,&C
         AIF   ('&N' EQ 'SPSHARE').MEND
         AIF   (N'&SYSLIST GT 2).P3
         AIF   (N'&SYSLIST GT 1).P2
&N       EQUX  &A
         MEXIT
.P2      ANOP
&N       EQUX  &A,&B
         MEXIT
.P3      ANOP
&N       EQUX  &A,&B,&C
.MEND    MEND
         IRXPARMB DECLARE=YES          REXX Parameter Block
EQU      OPSYN EQUX
         IRXSUBCT                      REXX sub-command Table
         IRXPACKT                      REXX Function PAckage Table
         TITLE 'SHOWMVS &REL - Data Set Allocations (Current Step)'
*---------------------------------------------------------------------*
*                                                                     *
*TIOT:                                                                *
*                                                                     *
*  DDname  Disp Volser   EXCP Data Set Name                           *
*                                                                     *
*  ISPPROF  OLD TSO143    226 IBMUSER.ISPF.ISPPROF                    *
*  ISPCTL0  OLD VIO       640 SYS93351.T142134.RA000.IBMUSER.R0000026 *
*  SYSEXEC  SHR TSO202      4 IBMUSER.EXEC                            *
*                                                                     *
*---------------------------------------------------------------------*
TIOT00   BEGIN_PROC KW=TIOT
         STRING 'TIOT:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '  DDname  Disp Volser   EXCP Data Set Name',32X,      X
               'Device   DEVN Miscellaneous',INTO=LINE
LINE_VOL2 EQU  LINE+15,6               VOLSER   (TIOT DISPLAY)
LINE_DSN2 EQU  LINE+29,44              DSNAME   (TIOT DISPLAY)
         BAL   R14,SPACE2              Double Space
         L     R5,TCBTIO               TIOT
         USING TIOT1,R5
         ST    R10,TIOTLINES+0         First TIOT line
*LOOP
TIOT_GET CLI   TIOEDDNM,C' '           FREED DD?
         BL    TIOT_NXT                YES, JUMP
         LA    R6,TENWORDS+4           WORK AREA
         ST    R6,TENWORDS             WORK AREA
         USING ZB505,R6
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB
         SWAREQ FCODE=RL,EPA=TENWORDS,MF=(E,SWAREQL1),UNAUTH=YES
         L     R6,SWBLKPTR             31-BIT ADDRESS OF JFCB
         USING INFMJFCB,R6
         MVC   WKCELL1,BLANKS          CLEAR WORK AREA
         MVC   WKCELL2,BLANKS          CLEAR WORK AREA
         MVC   STATUS,BLANKS           CLEAR WORK AREA
         MVC   UNITNAME,BLANKS         CLEAR WORK AREA
         MVC   UCB_NAME,BLANKS         CLEAR WORK AREA
         MVC   VOLSER,=C'JES     '     SYSIN/SYSOUT
         SLR   R1,R1                   EXCP=0
         SLR   R7,R7                   NO UCB
         TM    TIOELINK,TIOESSDS       IS THIS A JES DATA SET?
         BO    TIOT61                  YES, JUMP
         MVC   VOLSER,=C'DUMMY   '     DUMMY DATA SET
         ICM   R7,B'0111',TIOEFSRT     UCB ADDRESS
         BZ    TIOT64                  NO UCB, SKIP TCT SCAN
         USING UCBOB,R7
         BAL   R14,GETUNIT         <== GET UNITNAME
         MVC   VOLSER,=C'VIO     '     UNIT=VIO
         TM    UCBOB,UCBVRDEV          IS THIS A VIO DATA SET?
         BO    TIOT41                  YES, JUMP
         MVC   VOLSER,JFCBVOLS         NO, MOVE FIRST VOLSER
*
TIOT41   BAL   R1,TIOT41B
         DC    AL1(JFCNEW),C'NEW'
         DC    AL1(JFCMOD),C'MOD'
         DC    AL1(JFCOLD+JFCSHARE),C'SHR'
         DC    AL1(JFCOLD),C'OLD'
         DC    X'00',0H'0'
TIOT41B  BAL   R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+3)               0  LENGTH OF A TABLE ENTRY
         TM    JFCBIND2,*-*         2  TEST DATA SET STATUS
         MVC   STATUS,1(R1)         6  DISP
*
         TM    UCBFL5,UCBSMS           SMS VOL?     X'20'
         BZ    TIOT46                  NO, JUMP
         MVC   WKCELL1(3),=C'SMS'      SMS-MANAGED
*
TIOT46   CLI   UCBTBYT3,UCB3TAPE       TAPE DEVICE?
         BNE   TIOT61                  NO, JUMP
         BAL   R1,TIOT46B
         DC    AL1(JFCBLTM),C'LTM'
         DC    AL1(JFCBLP),C'BLP'
         DC    AL1(JFCSUL),C'SUL'
         DC    AL1(JFCSUL+JFCBAL),C'AUL'
         DC    AL1(JFCBAL),C'AL '
         DC    AL1(JFCNSL),C'NSL'
         DC    AL1(JFCSL),C'SL '
         DC    AL1(JFCNL),C'NL '
         DC    X'00',0H'0'
TIOT46B  BAL   R14,SCAN_TM             CALL SCAN RTNE
         DC    Y(1+3)               0  LENGTH OF A TABLE ENTRY
         TM    JFCBLTYP,*-*         2  TEST LABEL TYPE FLAGS
*
         LH    R0,JFCBFLSQ             PICK UP FILE SEQUENCE NUMBER
         LTR   R0,R0                   LABEL=0?
         BNZ   TIOT46Y                 NO, JUMP
         LA    R0,0001                 YES, CHANGE TO LABEL=1
TIOT46Y  STRING ((R0),,L),',',(1(R1),3),INTO=WKCELL1
*
TIOT61   LA    R0,TIOENTRY             POINT TO CURRENT TIOT ENTRY
         SL    R0,TCBTIO               CHANGE ADDRESS TO OFFSET
         BAL   R14,EXCP00          <== GET EXCP COUNT IN R1
         STRING ((R1),,R6B),INTO=WKCELL2
         CL    R1,=F'100000'           OVER 100K?
         BL    TIOT64                  NO, JUMP
         SLR   R0,R0                   YES, DIVIDE BY 1000
         LA    R1,500(,R1)             YES, DIVIDE BY 1000
         D     R0,=F'1000'             YES, DIVIDE BY 1000
         STRING ((R1),,R4B),'K',INTO=WKCELL2
*
TIOT64   LTR   R7,R7                   do we have a UCB?
         BZ    TIOT_PRT                no, jump
         UCB_NAME RIGHT                get 4-character device number
TIOT_PRT STRING 2X,TIOEDDNM,1X,STATUS,1X,VOLSER,1X,(WKCELL2,7),        X
               JFCBDSNM,1X,UNITNAME,1X,UCB_NAME,1X,WKCELL1,            X
               INTO=LINE
         BAL   R14,SPACE1          <== next line
*
TIOT_NXT SLR   R0,R0                   PREPARE IC
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R5,R0                   BUMP UP TO NEXT ENTRY
         CLI   TIOELNGH,0              IS THIS THE END?
         BNZ   TIOT_GET                NOT YET, LOOP THROUGH TIOT
*ENDLOOP
         ST    R10,TIOTLINES+4         Last TIOT line
         BAL   R14,BLANK1              BLANK LINE
         END_PROC
         TITLE 'SHOWMVS &REL - TCB Tree and RB Chains (Current Step)'
*---------------------------------------------------------------------*
*                                                                     *
*TCB Tree and RB Chains:                                              *
*                                                                     *
*  TCB Address                    Program    IC  STAB  FLAGS1 CDFLGS  *
*                                                                     *
*  9FE240                         IEAVAR00   01  0083    42     00    *
*   9FDE88                        IEESB605   06  0082    02     00    *
*                                 IEFSD060   01  0003    42     00    *
*    9FD140            (JSTCB)    IKJEFT01   01  0083    42     00    *
*     9E9BE0                      IKJEFT02   01  0083    46     00    *
*      9E9790                     IKJEFT09   01  0083    42     00    *
*       9E95F8                    PDF        06  0082    00     00    *
*                                 ISPMAIN    01  0003    42     00    *
*        9C7718                   ISPTASK    06  0082    00     00    *
*                                 SHOWMVS    0C  0002    02     00    *
*        9E9280                   ISPTASK    06  0082    00     00    *
*                                 ISREDIT    01  0002    40     00    *
*   9FF1D8                        IEAVTSDT   78  0083    46     00    *
*                                                                     *
*---------------------------------------------------------------------*
TREE     BEGIN_PROC KW=TCBTREE
         L     R1,PSAAOLD-PSA          my ASCB
         L     R1,ASCBASXB-ASCB(,R1)   my ASXB
         L     R9,ASXBFTCB-ASXB(,R1)   First TCB (RCT)
         STRING 'TCB Tree and PRB Chains:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '    TCB Address',18X,INTO=LINE,                       X
               'Program    IC  STAB  FLAGS1 CDFLGS    DDname       DataX
                 Programs'
LINE_TCB_TREE  EQU LINE+30,&LINESIZE-30
LINE_TCB_TREE2 EQU LINE+80,&LINESIZE-80
         BAL   R14,SPACE2              Double Space
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
TREE100  STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
         STRING (BLANKS,4(R3)),(WKCELL1,3,X),INTO=LINE
         TM    TCBFLGS5,TCBFC          task ended already?
         BO    TREE288                 yes, next TCB
         SLR   R6,R6                   first time switch (NEXTRB)
         CL    R9,JSTCB                my job-step TCB?
         BNE   TREE200                 no, jump
         MVC   LINE_TCB_TREE-8(7),=C'(JSTCB)'  signal current JSTCB
*
*        PROCESS RB CHAIN
*--LOOP
TREE200  BAL   R14,NEXTRB              GET RB ADDRESS
         LTR   R6,R6                   eof?
         BZ    TREE290                 yes, exit
         USING RBPREFIX,R6
         CLI   RBSTAB1,RBFTPRB         IS THIS A PRB?
         BNE   TREE280                 NO, IGNORE IT
         TM    RBCDFLGS,RBCDSYNC       CHECK FLAGS
         BO    TREE260                 JUMP IF IT IS A SYNCH PRB
         BAL   R14,JLBDDN           <- retrieve tasklib ddname
TREE250  BAL   R14,TALLY            <- tally allocated storage
         STM   R0,R1,WKCELL3           data, programs
         ICM   R1,B'1111',RBCDE        POINT TO CDE/LPDE
         BNZ   TREE253                 there is a CDE, jump
         LA    R1,BLANKS               fake CDE
TREE253  STRING 3X,                                                    X
               CDNAME-CDENTRY(R1),3X,  PGM NAME                        X
               (RBWLIC+3,1,X),2X,      IC                              X
               (RBSTAB,2,X),4X,        STATUS BYTE                     X
               (RBFLAGS1,,X),5X,       Flags                           X
               (RBCDFLGS,,X),6X,       FLAGS                           X
               PDATA_DDN,              DDNAME OF TASKLIB               X
               (WKCELL3,F,R8B),'K',    storage (data)                  X
               (WKCELL3+4,F,R9B),'K',  storage (programs)              X
               INTO=LINE_TCB_TREE
         CLC   LINE(LINE_TCB_TREE-LINE),BLANKS 1st line for this TCB?
         BNE   TREE258                 yes, jump
         MVC   LINE_TCB_TREE2,BLANKS   no, clear storage tallies
TREE258  CL    R9,PSATOLD-PSA          is this my TCB?
         BNE   TREE270                 no, jump
         LA    R0,RBBASIC              point to basic section
         CL    R0,TCBRBP               is this my PRB?
         BNE   TREE270                 no, jump
         MVI   LINE+30+1,C'*'          yes, flag it
         B     TREE270
TREE260  MVC   WKCELL1,RBGRS15         PICK UP ENTRY POINT ADDRESS
         NI    WKCELL1+3,X'FE'         SET BIT 31 TO ZERO
         STRING 3X,                                                    X
               (WKCELL1,4,X),3X,       EP ADDRESS                      X
               (RBWLIC+3,1,X),2X,                                      X
               (RBSTAB,2,X),4X,        Flags                           X
               (RBFLAGS1,,X),5X,       Flags                           X
               (RBCDFLGS,,X),          Flags                           X
               INTO=LINE_TCB_TREE
*
TREE270  BAL   R14,SPACE1          <== NEXT LINE
         MVC   LINE,BLANKS             blank it out
TREE280  B     TREE200                 LOOP THROUGH RB TABLE
*--ENDLOOP
TREE288  STRING 3X,'Task Terminated',INTO=LINE_TCB_TREE
         BAL   R14,SPACE1          <== NEXT LINE
*
TREE290  BAL   R14,SCANTCB             GET NEXT TCB
         BNZ   TREE100                 PROCESS NEXT TCB
*ENDLOOP
         BAL   R14,BLANK1              BLANK LINE
         STRING '   STAB1: 00-PRB C0-SVRB 40-IRB 60-TIRB ',            X
               '08-WAITP 02-ATNXIT 01-PMSVRB',INTO=LINE
         BAL   R14,SPACE1          <== NEXT LINE
         STRING '   STAB2: 80-TCBNXT 40-FACTV 20-ATTN 10-ETXR ',       X
               '0C-IQETP 02-FDYN 01-ECBWT',INTO=LINE
         BAL   R14,SPACE1          <== NEXT LINE
         STRING '  FLAGS1: 80-SLOCK 40-XWAIT 20-ABEND 10-XWPRM ',      X
               '08-ASIR 04-LONGWT 02-SCB 01-SSSYN',INTO=LINE
         BAL   R14,SPACE1          <== NEXT LINE
         STRING '  CDFLGS: 80-NOCELL 20-CDATCH 10-CDSAVE ',            X
               '08-CDNODE 04-CDSYNC 02-CDXCTL 01-CDLOAD',INTO=LINE
         BAL   R14,SPACE2              Double Space
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        Tally storage allocated to current TCB                       *
*                                                                     *
*---------------------------------------------------------------------*
TALLY    BEGIN_PROC SAVE=STDSAVE
         BALR  R3,0
         USING *,R3
         SLR   R0,R0                   STORAGE ALLOCATED (DATA)
         SLR   R1,R1                   STORAGE ALLOCATED (PROGRAMS)
         ICM   R2,B'1111',TCBMSS       FIRST SUB-POOL FOR THIS TCB
         BZ    TALLY90                 no sub-pools, quit
         USING SPQE,R2
*LOOP
TALLY21  CL    R9,TCBJSTCB             Am I the JS TCB?
         BE    TALLY21L                yes, then I assume ownership
         CL    R9,SPQETCB              Do I own this subpool?
         BNE   TALLY29                 no, ignore it
TALLY21L L     R4,SPQESPQA             chain descriptors
         USING SPQA,R4
         LA    R5,3                    3 ENTRIES IN SPQA
*--LOOP
TALLY22  CL    R4,0(,R4)               EMPTY ENTRY?
         BE    TALLY25                 YES, EXIT
         L     R6,0(,R4)               FIRST/LAST DQE
         USING DQE,R6
*----LOOP
TALLY23  CLI   SPQEID,251              PROGRAM SUB-POOL?
         BE    TALLY23P                YES, JUMP
         CLI   SPQEID,252              PROGRAM SUB-POOL?
         BE    TALLY23P                YES, JUMP
         AL    R0,DQESIZE              ADD SIZE (DATA)
         B     TALLY23Q
TALLY23P AL    R1,DQESIZE              ADD SIZE (PROGRAMS)
TALLY23Q CL    R6,4(,R4)               LAST DQE ON THIS CHAIN?
         L     R6,DQENEXT
         BNE   TALLY23                 NO, PROCESS NEXT ONE
*----ENDLOOP
TALLY25  LA    R4,8(,R4)               NEXT ENTRY IN SPQA
         BCT   R5,TALLY22
*--ENDLOOP
TALLY29  ICM   R2,B'1111',SPQENEXT     NEXT SUBPOOL
         BNZ   TALLY21
*ENDLOOP
TALLY90  SRL   R0,10                   data bytes, in K
         SRL   R1,10                   program bytes, in K
         L     R14,12(,R13)
         LM    R2,R12,28(R13)
         BR    R14
         DROP  R2,R3,R4,R6             SPQE,*,SPQA,DQE
         TITLE 'SHOWMVS &REL - Attention exits'
*---------------------------------------------------------------------*
*                                                                     *
*Attention Exits                                                      *
*                                                                     *
*  Address     Module    Stat  Stat2                                  *
*                                                                     *
*  84560EE8    ISPMAIN    C3    C0                                    *
*  829FCCC8    IKJEFT03   03    C0                                    *
*  829ED40C    IKJEFT01   80    00                                    *
*                                                                     *
*---------------------------------------------------------------------*
ATTNX00  BEGIN_PROC KW=ATTENTIONEXITS
         L     R4,PSAAOLD-PSA          my ASCB
         USING ASCB,R4
         L     R4,ASCBASXB             my ASXB
         USING ASXB,R4
         ICM   R5,B'1111',ASXBRCTD     RCT DATA AREA
         BZ    ATTNX99                 ZERO, EXIT
         USING RCTD,R5
         ICM   R6,B'1111',RCTDTAXE     FIRST TAXE
         BZ    ATTNX99                 ZERO, EXIT
         USING TAXE,R6
         STRING 'Attention Exits',INTO=LINE
         BAL   R14,SPACE2              double space
         STRING '   Address     Module    Stat  Stat2   TCB      Parm',X
               INTO=LINE
         BAL   R14,SPACE2              double space
*loop
ATTNX21  L     R1,TAXEEXIT             EXIT ADDRESS
         BAL   R14,CSVQUERY            GET MODULE NAME
         MVI   EP10,C' '               CLEAR ORIGIN
         STRING 3X,(TAXEEXIT,,X),      EXIT ADDRESS                    X
               2X,EP10,                MODULE NAME                     X
               3X,(TAXESTAT,,X),       STATUS 1                        X
               4X,(TAXEST2,,X),        STATUS 2                        X
               4X,(TAXETCB+1,3,X),     TCB                             X
               4X,(TAXEPARM,,X),       Parm for exit rtne              X
               INTO=LINE
         BAL   R14,SPACE1
         ICM   R6,B'0111',TAXELNK      NEXT TAXE
         BNZ   ATTNX21                 NOT FINISHED YET
*endloop
         BAL   R14,BLANK1              BLANK LINE
ATTNX99  END_PROC
         TITLE 'SHOWMVS &REL - Job Pack Area Queue (JPAQ)'
*---------------------------------------------------------------------*
*                                                                     *
*JPAQ:                                                                *
*                                                                     *
*   NAME     ENTPT    ATTRB SP ATTR  ATTR2  USE    MAJ-CDE   LENGTH   *
*                                                                     *
*   ISF$SHOW 840BAA30   30  FC  31    22    0001             0055D0   *
*   SHOWMVS  840BAA30   30      35    02           ISF$SHOW           *
*                                                                     *
*---------------------------------------------------------------------*
JPAQ     BEGIN_PROC KW=JPAQ
         L     R8,CVTPTR               CVT ADDRESS
         SH    R8,=Y(CVTMAP-CVTFIX)    SUBTRACT PREFIX LENGTH
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
         L     R9,JSTCB                THE JOB STEP TCB
         STRING 'JPAQ:',INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '   Name     EntPt   Attrb Sp Attr Attr2 Attr3 Use ',  X
               ' Length Load-Pnt','  Data Set Name',                   X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         SLR   R5,R5                   first-time switch
*LOOP
JPAQ21   BAL   R14,NEXTCDE          <- get next CDE
         LTR   R5,R5                   end of JPAQ?
         BZ    JPAQ31                  yes, exit
         USING CDENTRY,R5
         L     R0,CDENTPT              R0=EP addr
         BAL   R14,CSVDSN           <- look for a CDEX
*
JPAQ22   L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         BO    JPAQ25                  JUMP IF THIS IS A MINOR CDE
         USING XTLST,R6
         STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),             X
               2X,(CDSP,,X),2X,(CDATTR,,X),3X,(CDATTR2,,X),            X
               4X,(CDATTR3,1,X),3X,(CDUSE,,X),                         X
               1X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),2X,((R1),44),         X
               INTO=LINE
         B     JPAQ29
JPAQ25   STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),             X
               6X,(CDATTR,,X),3X,(CDATTR2,,X),4X,(CDATTR3,1,X),        X
               4X,CDNAME-CDENTRY(R6),13X,((R1),44),                    X
               INTO=LINE
JPAQ29   BAL   R14,SPACE1          <== NEXT LINE
         B     JPAQ21                  LOOP THROUGH RB TABLE
*ENDLOOP
JPAQ31   BAL   R14,BLANK1              BLANK LINE
         STRING '   ATTRB: 80-EOM 40-IDENTY 20-DIRTY 10-CDEX ',        X
               '08-LPDE 04-GLOBAL 02-CONTAMINATION 01-RACF',           X
               INTO=LINE
         BAL   R14,SPACE1          <== NEXT LINE
         STRING '    ATTR: 80-NIP/MLPA 40-NIC 20-RENT 10-REUS ',       X
               '08-NREUS 04-MINOR 02-JPAQ 01-NOT_OL',                  X
               INTO=LINE
         BAL   R14,SPACE1          <== NEXT LINE
         STRING '   ATTR2: 80-SP0 40-REL 20-XLE 10-RLC ',              X
               '08-AMODE_ANY 04-OVLY 02-APFLIB 01-AC=1',               X
               INTO=LINE
         BAL   R14,SPACE1          <== NEXT LINE
         STRING '   Attr3: 80-OpMvsPath 40-PML',                       X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         END_PROC
         TITLE 'SHOWMVS &REL - Load Lists'
*---------------------------------------------------------------------*
*                                                                     *
*Load list:                                                           *
*                                                                     *
*  TCB: 9FC0D0   Program: IKJEFT01                                    *
*                                                                     *
*   IKJEFT02 8292D000   18  00  B1    22    0001   0001      0095E8   *
*   IKJEFT04 82937000   18  00  B1    22    0001   0001      008180   *
*                                                                     *
*---------------------------------------------------------------------*
LOADLIST BEGIN_PROC KW=LOADLIST
         L     R9,JSTCB                THE JOB STEP TCB
         STRING 'Load list:',INTO=LINE
         BAL   R14,SPACE1          <== next line
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
LOADL11  ICM   R0,B'1111',TCBLLS       load-list empty?
         BZ    LOADL80                 yes, skip this TCB
         BAL   R14,BLANK1
         LA    R5,BLANKS               dummy CDE
         TM    TCBFLGS5,TCBFC          task ended already?
         BO    LOADL41                 yes, skip CDE search
*
*        get name of current program
*
         L     R5,TCBRBP               TOP RB
         USING RBBASIC,R5
LOADL36  TM    RBCDFLGS,RBCDSYNC       THIS RB CREATED BY SYNCH?
         BO    LOADL36I                YES, JUMP
         TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?
         BNO   LOADL37                 NO, JUMP
LOADL36I ICM   R5,B'0111',RBLINK+1     POINT TO PREVIOUS RB
         B     LOADL36                 TEST SYNCH FLAG AGAIN
LOADL37  L     R5,RBCDE                POINT TO CDE/LPDE
         USING CDENTRY,R5
*
LOADL41  STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
*
         STRING '  TCB: ',(WKCELL1,3,X),'   Program: ',CDNAME,         X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
         STRING '   Name     EntPt    Attrb Sp Attr Attr2 Attr3  Use ',X
               '  SysCt      Length   Load-Pnt',                       X
               INTO=LINE
         BAL   R14,SPACE1              Single Space
*
*        display load-list
*
         SLR   R7,R7                   first time switch
*--LOOP
LOADL70  BAL   R14,NEXTLLE             FIND NEXT LLE
         LTR   R7,R7                   end of chain?
         BZ    LOADL80                 yes, exit
         USING LLE,R7
         STCM  R7,B'0111',WKCELL1      STORE LLE ADDR
         L     R5,LLECDPT              CDE PTR
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES
         BNO   LOADL72                 JUMP IF THIS IS A MAJOR CDE
         L     R5,CDXLMJP              POINT TO MAJOR CDE
LOADL72  L     R6,CDXLMJP              POINT TO XL
         USING XTLST,R6
         TM    CDATTRB,CDELPDE         CHECK ATTRIBUTES
         BO    LOADL75                 JUMP IF THIS IS A LPA MODULE
         STRING 3X,CDNAME,1X,(CDENTPT,,X),3X,(CDATTRB,,X),2X,          X
               (CDSP,,X),2X,(CDATTR,,X),4X,(CDATTR2,,X),4X,            X
               (CDATTR3,1,X),3X,(LLECOUNT,,X),3X,(LLESYSCT,,X),6X,     X
               (XTLMSBLN,,X),3X,(XTLMSBAD,,X),INTO=LINE
         B     LOADL79
         USING LPDE,R5
LOADL75  STRING 3X,LPDENAME,1X,(LPDENTP,,X),3X,(LPDEATTB,,X),2X,       X
               (LPDESP,,X),2X,(LPDEATTR,,X),4X,(LPDEATT2,,X),4X,       X
               (LPDEATT3,1,X),3X,(LLECOUNT,,X),3X,(LLESYSCT,,X),6X,    X
               (LPDEXTLN+1,3,X),3X,(LPDEXTAD,,X),INTO=LINE
LOADL79  BAL   R14,SPACE1          <== next line
         B     LOADL70                 LOOP THROUGH LOAD LIST
*--ENDLOOP
LOADL80  BAL   R14,SCANTCB             NEXT TCB IN TREE
         BNZ   LOADL11
*ENDLOOP
         BAL   R14,BLANK1              blank line
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Local Cellpools:                                                     *
*                                                                     *
*  PoolId   Ext  C-Size  P-Num  S-Num SPN Key TCB    Header           *
*  009C3000   1      80    101    102 237   0 9DEA98 CPOOL CELL POOL  *
*  7F732F00   2     208     60    118 237   0 9DEA98 SWA BLOCK POOL   *
*                                                                     *
*---------------------------------------------------------------------*
CELLPLOC BEGIN_PROC KW=TIMERS
         STRING 'Local Cellpools:',INTO=LINE                       $RS
         BAL   R14,SPACE2              Double Space                $RS
         L     R5,PSAAOLD-PSA          ASCB                        $RS
         L     R5,ASCBLDA-ASCB(,R5)    Local Data Area             $RS
         USING LDA,R5                                              $RS
         L     R4,LDAPPD               LDA PPD queue               $RS
         STRING '  PoolId   Ext  C-Size   P-Num   S-Num SPN Key TCB    X
               Header',INTO=LINE                                   $RS
         BAL   R14,SPACE1              NEXT LINE                   $RS
         BAL   R7,CELLP100             display cell-pools          $RS
         BAL   R14,BLANK1              BLANK LINE                  $RS
         END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*Recovery and Timers                                                  *
*                                                                     *
*  TCB: 9FC0D0   Program: ISPTASK                                     *
*                                                                     *
*   SCB(9FF4E0) TCB(9B3E88) Exit(82A3502C) PGM(IKJEFT0D) Key(80)      *
*               Parm(009E7AB8) Flgs1(96) Flgs2(80) Flgs3(00)          *
*   SCB(9FF510) RB(9AEF98) Exit(8224E9B0) PGM(IKJCMDRC) Key(80)       *
*               Parm(0000ABC4) Flgs1(16) Flgs2(80) Flgs3(01)          *
*   TQE(AD811D) Exit(00034788) PGM(FASTPATH) Date(19960821) Time(1855 *
*               Parm(00000000) Flgs(07) Flgs2(40) Flgs3(40) ID(000507 *
*   RPP(9F0680) RB(9B3B00) Exit(80034DE8) PGM(PROG24)                 *
*               Parm(00034DEC) Flag1(80) Mask(040000) PICA(00033010)  *
*                                                                     *
*---------------------------------------------------------------------*
TIMERS   BEGIN_PROC KW=TIMERS
         L     R9,JSTCB                THE JOB STEP TCB
         STRING 'Recovery and Timers',INTO=LINE
         BAL   R14,SPACE1          <== next line
         SLR   R3,R3                   INDENTATION INDEX
*LOOP
TIMER11  TM    TCBFLGS5,TCBFC          task ended already?
         BO    TIMER80                 yes, skip this TCB
         L     R0,TCBSTAB              First SCB
         O     R0,TCBPIE               First SCA
         O     R0,TCBTME               First TQE
         BZ    TIMER80                 no, skip this TCB
         BAL   R14,BLANK1
*
*        get name of current program
*
         L     R5,TCBRBP               TOP RB
         USING RBBASIC,R5
TIMER16  TM    RBCDFLGS,RBCDSYNC       THIS RB CREATED BY SYNCH?
         BO    TIMER16I                YES, JUMP
         TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?
         BNO   TIMER17                 NO, JUMP
TIMER16I ICM   R5,B'0111',RBLINK+1     POINT TO PREVIOUS RB
         B     TIMER16                 TEST SYNCH FLAG AGAIN
TIMER17  L     R5,RBCDE                POINT TO CDE/LPDE
         USING CDENTRY,R5
         STCM  R9,B'0111',WKCELL1      STORE TCB ADDR
         STRING '  TCB: ',(WKCELL1,3,X),'   Program: ',CDNAME,         X
               INTO=LINE
         BAL   R14,SPACE2              Double Space
*
*        STAE/ESTAE
*
         ICM   R5,B'1111',TCBSTAB      First SCB
         BZ    TIMER49                 no SCB, jump
         USING SCB,R5
*--loop
TIMER41  L     R6,SCBXPTR              SCB EXTENSION
         USING SCBX,R6
         STCM  R5,B'0111',WKCELL1      STORE SCB ADDR
         L     R1,SCBEXIT              EXIT ADDRESS
         BAL   R14,CSVQUERY            GET MODULE NAME
         TM    SCBFLGS1,SCBSTAI        STAI/ESTAI ?
         BO    TIMER44                 yes, jump
         STRING '    SCB(',(WKCELL1,3,X),                              X
               ') RB(',(SCBOWNRA,,X),  STAE/ESTAE                      X
               ') Exit(',(SCBEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Key(',(SCBPKEY,,X),                                  X
               ')',INTO=LINE
         B     TIMER45
TIMER44  STRING '    SCB(',(WKCELL1,3,X),                              X
               ') TCB(',(SCBOWNRA,,X), STAI/ESTAI                      X
               ') Exit(',(SCBEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Key(',(SCBPKEY,,X),                                  X
               ')',INTO=LINE
TIMER45  BAL   R14,SPACE1          <== next line
         STRING 16X,                                                   X
               'Parm(',(SCBXPARM,,X),                                  X
               ') Flgs1(',(SCBFLGS1,,X),                               X
               ') Flgs2(',(SCBFLGS2,,X),                               X
               ') Flgs3(',(SCBFLGS3,,X),                               X
               ')',INTO=LINE
         BAL   R14,SPACE1          <== next line
TIMER48  ICM   R5,B'1111',SCBCHAIN     next SCB
         BNZ   TIMER41                 loop through SCB chain
*--endloop
TIMER49  EQU   *
*
*        SPIE/ESPIE
*
         L     R5,TCBPIE               point at SCA
         TM    HBB6608,L'HBB6608       OS/390 R8?
         BO    *+8                     yes, use 31-bit addr
         ICM   R5,B'1000',CVTPTR       no, use 24-bit addr (TCBPIEA)
         LTR   R5,R5                   any SPIE/ESPIE here?
         BZ    TIMER59                 no, jump
         USING SCA,R5
         L     R6,SCARPPTR             Recovery PIE PICA
         USING RPP,R6
*loop
TIMER51  STCM  R6,B'0111',WKCELL1      STORE RPP ADDR
         TM    RPPFLAG1,RPPTYPE        ESPIE?
         BNO   TIMER54                 no, jump
         L     R1,RPPEXITA             EXIT ADDRESS
         BAL   R14,CSVQUERY            GET MODULE NAME
         STRING '    RPP(',(WKCELL1,3,X),                              X
               ') RB(',(RPPPRB+1,3,X),                                 X
               ') Exit(',(RPPEXITA,,X),                                X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ')',INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING 16X,                                                   X
               'Parm(',(RPPPARMA,,X),                                  X
               ') Flag1(',(RPPFLAG1,,X),                               X
               ') Mask(',(RPPITMK,3,X),                                X
               ') PICA(',(RPPPICA,,X),                                 X
               ') Token(',(RPPTOKEN,,X),                               X
               ')',INTO=LINE
         B     TIMER57
TIMER54  L     R5,RPPPICA              caller's PICA
         USING PICA,R5
         BAL   R14,EXECKEY0            execute next instr in key=0
         LM    R0,R1,PICA              load KEY8 PICA
         STM   R0,R1,WKCELL2           store PICA into work area
         LA    R5,WKCELL2              make PICA addressable
         TM    PICITMK1,PICAEXT        EXTENDED-FORMAT PICA?
         BO    *+8                     yes, jump
         MVI   PICITMK3,0              no, zero 3rd mask byte
         SLR   R1,R1
         ICM   R1,B'0111',PICEXITA     EXIT ADDRESS
         BAL   R14,CSVQUERY            GET MODULE NAME
         STRING '    RPP(',(WKCELL1,3,X),                              X
               ') RB(',(RPPPRB+1,3,X),                                 X
               ') Exit(',(PICEXITA,,X),                                X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') Mask(',(PICAITMK,3,X),                               X
               ') PICA(',(RPPPICA+1,3,X),                              X
               ') Token(',(RPPTOKEN,,X),                               X
               ')',INTO=LINE
TIMER57  BAL   R14,SPACE1          <== next line
TIMER58  ICM   R6,B'1111',RPPNPTR      next RPIEPICA
         BNZ   TIMER51                 loop through RPP chain
*endloop
TIMER59  EQU   *
*
*        Timers
*
         ICM   R5,B'1111',TCBTME       any timer here?
         BZ    TIMER69                 no, jump
         USING TQE,R5
*loop
TIMER61  STCM  R5,B'0111',WKCELL1      STORE TQE ADDR
         L     R1,TQEEXIT              EXIT ADDRESS
         BAL   R14,CSVQUERY            GET MODULE NAME
         MVI   EP10,C' '               CLEAR ORIGIN
         STRING 'Val(',(TQEVAL,8,X),   expiration time                 X
               INTO=NEXTLINE
         TM    HBB4410,L'HBB4410       ESA V4?
         BZ    TIMER64                 no, jump
         LA    R1,TQEVAL               pass TOD clock value
         BAL   R14,STCKCONV            convert TOD clock to decimal
         STRING 'Date(',STCKDATE,                                      X
               ') Time(',(STCKTIME,8),                                 X
               INTO=NEXTLINE
TIMER64  EQU   *
         STRING '    TQE(',(WKCELL1,3,X),                              X
               ') Exit(',(TQEEXIT,,X),                                 X
               ') PGM(',(EP10+2,L'EP10-2,T),                           X
               ') ',(NEXTLINE,,T),     expiration date and time        X
               ')',INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING 16X,                                                   X
               'Parm(',(TQEPARAM,,X),                                  X
               ') Flgs(',(TQEFLGS,,X),                                 X
               ') Flgs2(',(TQEFLGS2,,X),                               X
               ') Flgs3(',(TQEFLGS3,,X),                               X
               ') ID(',(TQEID,,X),                                     X
               ')',INTO=LINE
         BAL   R14,SPACE1          <== next line
         ICM   R5,B'1111',TQELINK      end of chain?
         BNZ   TIMER61                 no, loop
*endloop
TIMER69  EQU   *
TIMER80  BAL   R14,SCANTCB             NEXT TCB IN TREE
         BNZ   TIMER11
*ENDLOOP
         BAL   R14,BLANK1              blank line
TIMER99  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*  Name/Token Table:                                                  *
*                                                                     *
*    Name            Token (char)      Token (hex)                    *
*    DSNLOGREC           &             020D5650 02000048 00000000     *
*    IBMJESXCFAS                       0A206578 00000000 00000000     *
*    BBM6CSCAMVCT      d               09843F80 00000000 00000000     *
*    TCPIPAOE 6                        099B2040 00000000 00000000     *
*---------------------------------------------------------------------*
NTTAB50  BEGIN_PROC                                                $RS
         AIF   (NOT D'CVTJ4422).NTTAB99                            $RS
         TM    JBB4422,L'JBB4422       running under ESA 4.2.2 ?   $RS
         BZ    NTTAB99                 no, jump                    $RS
         L     R3,PSAAOLD-PSA          point at ASCB               $RS
         USING ASCB,R3                                             $RS
         L     R3,ASCBASSB             ASSB                        $RS
         USING ASSB,R3                                             $RS
         ICM   R4,B'1111',ASSBNTTP     Name/Token                  $RS
         BZ    NTTAB99                   no entries  jump          $RS
         USING NTTH,R4                                             $RS
         STRING 'Name/Token Table ','(LOCAL)',INTO=LINE
         BAL   R14,SPACE2              BLANK LINE                  $RS
         ICM   R5,B'1111',NTTHNTTF     First NTTE                  $RS
         BZ    NTTAB90                 yes, no entries  jump       $RS
         USING NTTE,R5                                             $RS
         STRING '    Name',13X,'Token (char)     Token (hex)',         X
               INTO=LINE
         BAL   R14,SPACE1              BLANK LINE                  $RS
*loop                                                              $RS
NTTAB70  DS    0H                                                  $RS
         STRING 4X,NTTENAME,           name (char)                     X
               1X,NTTETOKN,            token (char)                    X
               1X,(NTTETOKN,8,X),      token (hex)                     X
               1X,(NTTETOKN+8,8,X),    token (hex)                     X
               INTO=LINE                                           $RS
         TR    LINE,TRTDOTS            convert non-printable to dots
         BAL   R14,SPACE1              single line                 $RS
         ICM   R5,B'1111',NTTENEXT     next entry                  $RS
         BNZ   NTTAB70                 jump if not zero            $RS
*endloop                                                           $RS
         BAL   R14,BLANK1              blank line                  $RS
         B     NTTAB99                   no entries  jump          $RS
NTTAB90  STRING '  (none)',INTO=LINE
         BAL   R14,SPACE2              BLANK LINE                  $RS
.NTTAB99 ANOP                                                      $RS
NTTAB99  END_PROC                                                  $RS
*---------------------------------------------------------------------*
*                                                                     *
*Addresses of selected local control-blocks                           *
*                                                                     *
*  ASCB 00FA0280  ASSB 019EBA80  CSCB 044B1D90  ASXB 009FE038         *
*  OUCB 019EB8F8  OUXB 019B4A10  SSIB 009F1F00  JSAB 019AE5D8         *
*  JSCB 009FFBDC   JCT 009DB0E8  JCTX 009DB1A8   SCT 009DB328         *
*                                                                     *
*---------------------------------------------------------------------*
ADDR200  BEGIN_PROC KW=LOCALADDRESSES
         L     R9,PSATOLD-PSA          TCB
         L     R8,PSAAOLD-PSA          ASCB
         USING ASCB,R8
         STRING 'Addresses of selected local control-blocks',INTO=LINE
         BAL   R14,SPACE2              double space
         L     R7,ASCBASXB             ASXB
         USING ASXB,R7
         STRING '  ASCB ',(PSAAOLD-PSA,,X),                            X
               '  ASSB ',(ASCBASSB,,X),                                X
               '  CSCB ',(ASCBCSCB,,X),                                X
               '  ASXB ',(ASCBASXB,,X),                                X
               '  ACEE ',(ASXBSENV,,X),                                X
               INTO=LINE
         BAL   R14,SPACE1              single space
ADDR210  EQU   *
         L     R6,TCBJSCB              JSCB
         USING IEZJSCB,R6
         L     R5,ASCBASSB             ASSB
         USING ASSB,R5
         SLR   R4,R4
         TM    HBB4410,L'HBB4410       ESA V4?
         BZ    *+8                     no, jump
         L     R4,ASSBJSAB             yes, JSAB exists
         L     R3,JSCBSSIB             SSIB
         USING SSIB,R3
         STRING '  OUCB ',(ASCBOUCB,,X),                               X
               '  OUXB ',(ASCBOUXB,,X),                                X
               '  SSIB ',(JSCBSSIB,,X),                                X
               '  JSAB ',((R4),,X),                                    X
               '   TCT ',(TCBTCT,,X),                                  X
               '  $SJB ',(SSIBSUSE,,X), JES2 SJB                       X
               INTO=LINE
         BAL   R14,SPACE1              single space
ADDR220  EQU   *
         L     R5,PSCB@                Protected Step Control Block
         USING PSCB,R5
         STRING '   LWA ',(LWA@,,X),                                   X
               '   TSB ',(ASCBTSB,,X),                                 X
               '  PSCB ',(PSCB@,,X),                                   X
               '   UPT ',(UPT@,,X),                                    X
               '   ECT ',(ECT@,,X),                                    X
               '  RLGB ',(PSCBRLGB,,X),   RE-LOGON Buffer              X
               INTO=LINE
         BAL   R14,SPACE1              single space
ADDR230  EQU   *
         L     R8,TCBJSCB              JSCB
         USING IEZJSCB,R8
         L     R7,JSCBJCT              JCT prefix
         LA    R7,16(,R7)              skip prefix
         USING INJMJCT,R7
         L     R6,JSCSCT               SCT prefix
         LA    R6,16(,R6)              skip prefix
         USING INSMSCT,R6
         SLR   R5,R5
         ICM   R5,B'0111',JCTJCTX      JCT Extension
         LA    R5,16(,R5)              skip prefix
         SLR   R4,R4
         ICM   R4,B'0111',SCTXBTTR     SCT Extension
         LA    R4,16(,R4)              skip prefix
         STRING '  JSCB ',(TCBJSCB,,X),                                X
               '   JCT ',((R7),,X),                                    X
               '  JCTX ',((R5),,X),                                    X
               '   SCT ',((R6),,X),                                    X
               '  SCTX ',((R4),,X),                                    X
               INTO=LINE
         BAL   R14,SPACE1              single space
         STRING ' LINES ',(LINE1PTR,,X),                               X
               '   R13 ',((R13),,X),                                   X
               INTO=LINE
         BAL   R14,SPACE2              double space
ADDR240  EQU   *
ADDR299  END_PROC
         TITLE 'SHOWMVS &REL - BRIF Invocation Routine'
***********************************************************************
*                                                                     *
*        INVOKE ISPF/PDF "BRIF" SERVICE                               *
*                                                                     *
*          1. ATTACH the LOCATE/OBTAIN sub-task                       *
*                                                                     *
*          2. Invoke BRIF                       (ISPF mode only)      *
*                                                                     *
*          or                                                         *
*                                                                     *
*          2. Write out lines to //SHOWMVS DD   (Hard-copy mode only) *
*                                                                     *
***********************************************************************
BRIF     BEGIN_PROC
*
*        Calculate number of lines written to buffer
*
         LR    R1,R10                  LAST LINE
         SL    R1,LINE1PTR             SIZE
         SR    R0,R0
         D     R0,=A(L'LINE)           NUMBER OF LINES
         ST    R1,NUMLINES             FOR BRIF
*
*        free the unused part of the working-storage area.
*
         LA    R1,4095                 start of free space
         LA    R2,NEXTLINE(R1)         start of free space
         N     R2,=F'-4096'            round up to a page boundary
         LM    R3,R4,LINE1PTR          addr/length of lines buffer
         ALR   R3,R4                   END OF BUFFER
         SR    R3,R2                   LENGTH OF UNUSED STORAGE
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BO    BRIF211                 yes, jump
         FREEMAIN RU,A=(R2),LV=(R3)    FREE UNUSED STORAGE
         B     BRIF215                 yes, jump
BRIF211  LR    R0,R3                   length for FREEMAIN
         LR    R1,R2                   address for FREEMAIN
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES Free Unused Storage
*
BRIF215  EQU   *
         SL    R2,LINE1PTR             LENGTH OF STORAGE USED
         ST    R2,LINE1PTR+4           STORE IT FOR LAST FREEMAIN
*
         TM    BRIF_MODE,L'BRIF_MODE   PARM=BROWSE ?
         BO    BRIF240                 yes, jump
         BAL   R14,WAIT_FOR_SUB_TASK   wait until subtask completes
BRIF240  EQU   *
         SYNCH BRIF300,RESTORE=YES
*
*        Force the sub-task to terminate by freeing up the storage.
*        (the sub-task stops when it reaches an X'00' byte).
*
BRIF250  EQU   *
         TM    BRIF_MODE,L'BRIF_MODE   PARM=BROWSE ?
         BZ    BRIF255                 no, jump
         LM    R1,R2,LINE1PTR          addr/length
         ALR   R2,R1                   end addr + 1
         BCTR  R2,0                    last byte of dynamic strge area
         PGSER R,RELEASE,              RELEASE MEMORY                  X
               A=(R1),                 FROM                            X
               EA=(R2)                 TO
         BAL   R14,WAIT_FOR_SUB_TASK   wait until subtask completes
BRIF255  EQU   *
*
         LM    R1,R2,SMS_SSOB          Addr & len of SMS work area
         LTR   R1,R1                   SMS work area allocated?
         BZ    BRIF999                 no, exit
*****    LA    R1,0(,R1)               yes, get rid of VL bit
         FREEMAIN RU,LV=(R2),A=(R1)    FREE SMS WORK AREA
         B     BRIF999                 exit
*---------------------------------------------------------------------*
*
*        This code always executes KEY=TCB
*
*---------------------------------------------------------------------*
BRIF300  EQU   *
*
*        When AUTH=ESR, copy the protected Dynamic Storage Area to
*        the unprotected area.
*
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR?
         BNO   BRIF310                 NO, JUMP
         LM    R14,R15,UNPROTWK
         LR    R0,R13
         LR    R1,R15
         MVCL  R14,R0
         L     R13,UNPROTWK            Point at unprotected area
BRIF310  EQU   *
         LA    R0,RCVYSAVE             DIALOG DATA PTR
         ST    R0,RCVYSAVE             DIALOG DATA PTR
*
         TM    HARDCOPY,L'HARDCOPY     Is this a hardcopy run?
         BO    BRIF800                 YES, JUMP
*
         TM    EDIF_MODE,L'EDIF_MODE   MODE=EDIT ?
         BO    BRIF400                 yes, jump
*
         TM    PUTLINE,L'PUTLINE       MODE=PUTLINE?
         BO    BRIF500                 yes, jump
*
         MVC   WKCELL1,BLANKS          DEFAULT PANEL
         CLI   ZENVIR+5,C'4'           ISPF V4 ?
         BL    *+10                    NO, USE DEFAULT PANEL
         MVC   WKCELL1,=C'ISRBROBA'    ISPF V4
         XCALL ISPLINK,(=C'BRIF',      ISPF FUNCTION                   X
               TITLE,                  dsname                          X
               =C'F ',                 RECFM                           X
               =A(L'LINE),             LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               0,                      Command rtne addr               X
               RCVYSAVE,               PARM FOR READ ROUTINE           X
               WKCELL1)                PANEL (ISRBROBF/ISRBROBA)
         EXIT                          EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        EDIT mode: invoke EDIF                                       *
*                                                                     *
*---------------------------------------------------------------------*
BRIF400  EQU   *
         XCALL ISPLINK,(=C'EDIF',      ISPF FUNCTION                   X
               TITLE,                  DATA SET NAME                   X
               =C'TEXT    ',           PROFILE NAME                    X
               =C'F ',                 RECFM                           X
               =A(L'LINE),             LRECL                           X
               =A(RDRTNE),             READ ROUTINE                    X
               =A(WRITERTN),           WRITE ROUTINE                   X
               0,                      COMMAND EXIT                    X
               RCVYSAVE)               PARM FOR READ ROUTINE
         EXIT                          EXIT
*---------------------------------------------------------------------*
*        Dummy write routine for EDIF                                 *
*---------------------------------------------------------------------*
WRITERTN SAVE  (14,12),,WRITERTN
         RETURN (14,12),RC=16          I/O error
*---------------------------------------------------------------------*
*                                                                     *
*        PUTLINE Mode: Issue PUTLINE                                  *
*                                                                     *
*---------------------------------------------------------------------*
BRIF500  EQU   *
         MVI   SUB_ECB1,0
         STAX  STAX00,REPLACE=NO,USADDR=(R13),MF=(E,WASTAX)
         MVI   WASTAX,C'N'             stop flag
*
         TM    ISPF_AVAILABLE,L'ISPF_AVAILABLE
         BNO   BRIF510                 no ISPF, jump
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         BO    BRIF510                 yes, jump
         XCALL ISPLINK,                ISPF interface                  X
               (=C'CONTROL',           ISPF FUNCTION                   X
               =C'DISPLAY',            Key-word                        X
               =C'LINE',               Key-word                        X
               =F'1')                  Key-word
*LOOP
BRIF510  EQU   *
         XCALL =A(RDRTNE),             READ ROUTINE                    X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF590           end-of-data
         L     R10,WKCELL1             A(LINE)
         STRING ((R10),L'LINE,T),INTO=(IECSDSL1+4,L'LINE)
         LTR   R15,R15                 BLANK LINE?
         BNZ   BRIF517                 NO, JUMP
         TM    SHORT_PUTLINE,L'SHORT_PUTLINE SHORT_PUTLINE mode ?
         BZ    BRIF519                 no, skip blank lines
         LA    R15,1(,R15)             length=1
BRIF517  EQU   *
         LA    R4,4(,R15)              length+4
         SLL   R4,16                   R4=llll0000
         STCM  R4,B'1111',IECSDSL1     format header
         TR    IECSDSL1+4(L'LINE),TRTPRINT
*
         L     R2,UPT@                 UPT ADDRESS
         L     R3,ECT@                 ECT ADDRESS
         PUTLINE PARM=PUTLINEL,                                        X
               UPT=(R2),ECT=(R3),ECB=SUB_ECB1,                         X
               OUTPUT=(IECSDSL1,TERM,SINGLE,DATA),                     X
               MF=(E,TENWORDS)
BRIF519  CLI   WASTAX,C'Y'             ATTN received?
         BNE   BRIF510                 no, keep on PUTLINEing
*ENDLOOP
BRIF590  EQU   *
         STAX  ,                       cancel previous STAX
         EXIT                          EXIT
*
STAX00   L     R13,8(,R1)              ADDRESS OF WORK AREA
         MVI   WASTAX,C'Y'             stop flag
         BR    R14                     AND RETURN
*---------------------------------------------------------------------*
*                                                                     *
*        Hard-copy mode: write lines to //SHOWMVS DD                  *
*                                                                     *
*---------------------------------------------------------------------*
BRIF800  EQU   *
         GETMAIN R,LV=CODE24L          GET 24-BIT WORK AREA
         MVC   0(CODE24L,R1),CODE24    MOVE 24-BIT CODE MODEL
         LR    R7,R1
         USING CODE24,R7
         OPEN  DCB24,MF=(E,OPEN24)
         LA    R3,1                    LINE COUNT (for page eject)
*LOOP
BRIF810  EQU   *
         XCALL =A(RDRTNE),             BRIF READ ROUTINE               X
               (WKCELL1,               addr of record                  X
               =A(L'LINE),             LRECL                           X
               WKCELL2,                no RRN                          X
               RCVYSAVE),              DDATA                           X
               ERRET=BRIF890           end-of-data
         L     R1,WKCELL1              A(LINE)
         MVC   WORK256(L'LINE),0(R1)   move to un-protected storage
         TR    WORK256(L'LINE),TRTPRINT Get rid of garbage
         BASSM R2,R7                   EXECUTE 24-BIT CODE
         LR    R2,R1                   save record address
         LH    R1,DCBLRECL-IHADCB+DCB24   pick up LRECL
         STRING 1X,(WORK256,L'LINE),INTO=((R2),(R1))
         CLI   WORK256,C' '            IS THIS A NEW SECTION?
         BE    BRIF813                 NO, JUMP
         CH    R3,=H'6'                AT LEAST 6 LINES LEFT?
         BNH   BRIF814                 NO, NEW PAGE
BRIF813  BCT   R3,BRIF815              DECREMENT LINE COUNT
BRIF814  MVI   0(R2),C'1'              CTLASA
         LA    R3,060                  MAX LINES PER PAGE
BRIF815  B     BRIF810                 NEXT LINE
*ENDLOOP
BRIF890  CLOSE MF=(E,OPEN24)
         FREEPOOL DCB24
         FREEMAIN R,LV=CODE24L,A=(R7) FREE 24-BIT WORK AREA
         DROP  R7                      CODE24
         EXIT                          EXIT
*---------------------------------------------------------------------*
*        RMODE24 PUT Routine (hard-copy mode)                         *
*              Moved to RMODE24 work-area                             *
*              Invoked via BASSM R2,R7                                *
*---------------------------------------------------------------------*
         USING CODE24,R7
         CNOP  0,4
CODE24   LR    R14,R13                 31-BIT SAVE AREA
         LA    R13,SAVE24              24-BIT SAVE AREA
         ST    R14,4(,R13)             31-BIT SAVE AREA
         PUT   DCB24                   PUT LOCATE
         L     R13,4(,R13)             31-BIT SAVE AREA
         BSM   0,R2                    GOBACK WITH AMODE31
OPEN24   OPEN  (DCB24-DCB24,OUTPUT),MF=L
DCB24    DCB   DSORG=PS,MACRF=PL,DDNAME=SHOWMVS,                       X
               RECFM=FBA,LRECL=121
SAVE24   DS    18F                     24-bit Save area
CODE24L  EQU   *-CODE24                LENGTH OF DYNAMIC STORAGE AREA
         ORG   SAVE24                  save some space
         DROP  R7                      CODE24
*---------------------------------------------------------------------*
WAIT_FOR_SUB_TASK EQU *
         TM    SUB_TASK_ATTACHED,L'SUB_TASK_ATTACHED
         BNOR  R14                     NO, GOBACK
         WAIT  1,ECB=SUB_ECB1          wait until subtask completes
         BR    R14
BRIF999  END_PROC
*---------------------------------------------------------------------*
*                                                                     *
*        Allocate/Free dynamic storage in SP=230,KEY=4,TCB=myTCB      *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
STORAGE_SP230 BEGIN_PROC SAVE=NO
         DROP
         LR    R2,R0                   LENGTH
         LA    R3,0(,R1)               ADDR/LOC
         L     R4,PSATOLD-PSA          current TCB
         BALR  R6,0
         USING *,R6
         L     R7,PSAAOLD-PSA          MY ASCB
         MODESET EXTKEY=ZERO
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=ESRAUTH
         LA    R1,1                    literals not allowed here
         CLR   R3,R1                   check loc/addr
         BL    STOR230B                GETMAIN LOC=BELOW (R1=0)
         BE    STOR230A                GETMAIN LOC=ANY (R1=1)
*        BH    STOR230F                FREEMAIN (R1>1)
STOR230F FREEMAIN RU,                  REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               A=(R3),                 LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               BRANCH=YES
         B     STOR230X                exit
STOR230A GETMAIN RU,                   REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               LOC=ANY,                RMODE=31                        -
               BNDRY=PAGE,             page-aligned                    -
               BRANCH=YES
         B     STOR230X                exit
STOR230B GETMAIN RU,                   REGISTER, UNCOND                -
               LV=(R2),                LENGTH                          -
               SP=230,                 PRIVATE, HIGH, NOT FETCH PRTCTD -
               KEY=KEY4,               KEY=4                           -
               LOC=BELOW,              RMODE=24                        -
               BNDRY=PAGE,             page-aligned                    -
               BRANCH=YES
STOR230X LR    R3,R1                   save addr accross SETLOCK
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=ESRAUTH
         LR    R1,R3                   return address
         EXIT
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        Get Sub-system Version Information                           *
*                                                                     *
*---------------------------------------------------------------------*
         AIF   (NOT D'CVTH4430).GETSSVI9
GET_SSVI BEGIN_PROC SAVE=NO
         BAKR  R14,0
         BALR  R12,0
         USING *,R12
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         BNO   GETSSVI2                no, jump
         MODESET KEYADDR=OLDPKF,WORKREG=2 switch to KEY=8
         L     R13,UNPROTWK            addr of unprotected work area
         OI    AUTH_ESR,L'AUTH_ESR     AUTH=ESR
GETSSVI2 EQU   *
*----
         LA    R2,WORK256
         XC    0(256,R2),0(R2)         clear work area
         USING SSOB,R2
         ST    R2,SSOB+252             SSOB_PTR
         OI    SSOB+252,X'80'
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSVI     FUNCTION
*
         LA    R3,SSOB+SSOBHSIZ        SSIB
         ST    R3,SSOBSSIB             store SSIB addr into SSOB
         USING SSIB,R3
         MVC   SSIBID,=C'SSIB'         SSIB
         MVI   SSIBLEN+1,SSIBSIZE      SSIB length
         EREG  R1,R1                   reload Reg 1
         MVC   SSIBSSNM,0(R1)          SUB-SYSTEM NAME
*
         LA    R3,SSIB+SSIBSIZE        SSVI WORK AREA
         ST    R3,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING SSVI,R3
         MVI   SSVILEN,2               LENGTH=512
         MVI   SSVIVER,SSVICVER        VERSION
         MVC   SSVIID,=C'SSVI'         SSVI
         MVI   SSVIFLEN+1,SSVIFSIZ     LENGTH OF HEADER
         LA    R1,SSOB+252             SSOB_PTR
         IEFSSREQ
         LTR   R15,R15                 OK?
         BNZ   GETSSVI9                bad, exit
         LA    R1,SSVI                 return addr of SSVI
*---
         SLR   R3,R2                   offset to SSVI in work area
         TM    AUTH_ESR,L'AUTH_ESR     AUTH=ESR ?
         BNO   GETSSVI9                no, exit
         L     R13,PSATOLD-PSA         my TCB
         L     R13,TCBUSER-TCB(,R13)   protected work area
         MODESET EXTKEY=KEY4           switch to KEY=4
         LA    R4,L'WORK256            length
         IC    R5,OLDPKF               source key
         MVCK  WORK256(R4),0(R2),R5    Move line to buffer
         LA    R3,WORK256(R3)          change offset to address
         LA    R1,SSVI                 return addr of SSVI
GETSSVI9 PR
         DROP  R2,R3                   SSOB,SSVI
.GETSSVI9 ANOP
         TITLE 'SHOWMVS &REL - General-purpose Sub-Routines'
***********************************************************************
*                                                                     *
*        SUB-ROUTINES                                                 *
*                                                                     *
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
*        LPAQ/PLPA search routine                                     *
*                                                                     *
*        On entry:   R1 points to an 8-byte EP name                   *
*                                                                     *
*        On exit:    R0 contains the entry-point address (CDENTPT)    *
*                    R1 points to the CDE/LPDE (zero if not found)    *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
LPASEARCH BEGIN_PROC SAVE=STDSAVE
         DROP  R11                     used by IEALPDSR
         BALR  R2,0                    local base
         USING *,R2
         L     R3,CVTPTR               point to CVT
         USING CVTMAP,R3
*
*        search the ACTIVE LPA Q
*
         LA    R8,ALPACDE1             START OF ALPAQ or DLPAQ
         LR    R9,R1                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         B     LPASCH9             +0  FOUND, QUIT
*
*        search the PLPA directory
*
         LM    R0,R1,0(R9)             EP NAME
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         B     LPASCH8             +0  FOUND, QUIT
         SLR   R11,R11                 Not found
         SLR   R15,R15                 Not found
         B     LPASCH95                exit
*
LPASCH8  LR    R11,R8                  Pass LPDE address
*
LPASCH9  L     R15,CDENTPT-CDENTRY(,R11) entry point address
*
LPASCH95 L     R14,12(,R13)            Restore return address
         LR    R0,R15                  R0 = EP_address
         LR    R1,R11                  R1 = CDE_address
         LM    R2,R12,28(R13)          restore registers
         BR    R14                     goback
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        JPAQ search routine                                          *
*                                                                     *
*        On entry:   R1 points to an 8-byte EP name                   *
*                                                                     *
*        On exit:    R15 contains the return code (OK=0, not_found=4) *
*                    R0 contains the entry-point address (CDENTPT)    *
*                    R1 points to the CDE                             *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
JPASEARCH BEGIN_PROC SAVE=STDSAVE
         DROP
         BALR  R2,0                    local base
         USING *,R2
         L     R3,CVTPTR               point to CVT
         USING CVTMAP,R3
         L     R4,PSATOLD-PSA          point to TCB
         USING TCB,R4
         L     R4,TCBJSTCB             point to JS TCB
         LA    R8,TCBJPQ               START OF CDE CHAIN
         LR    R9,R1                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         B     JPASCH9             +0  FOUND, QUIT
*
*        Module not found in JPAQ
*
         LM    R14,R12,12(R13)         restore registers
         LA    R15,4                   R15=4 (not found)
         SLR   R0,R0                   zero EP_address
         SLR   R1,R1                   zero CDE_address
         BR    R14                     goback
*
*        Return CDE addr in R1 and EP addr in R0
*
JPASCH9  L     R14,12(,R13)            Restore return address
         SLR   R15,R15                 RC=00
         L     R0,CDENTPT-CDENTRY(,R11) entry point address
         LR    R1,R11                  R1 = CDE_address
         LM    R2,R12,28(R13)          restore registers
         BR    R14                     goback
         POP   USING
*---------------------------------------------------------------------*
*                                                                     *
*        Search a module in MLPA, PLPA, link-list and STEPLIB and     *
*        retrieve the dsname of the PDS from which it was loaded.     *
*                                                                     *
*          Input:  R0 points to EP name                               *
*                                                                     *
*          Output: PDS2NAME contains EP name                          *
*                  PDATA_DDN contains ddname                          *
*                  PDATA_DSN contains dsname                          *
*                                                                     *
*---------------------------------------------------------------------*
$LTORG   LOCTR
DOBLDL1  LR    R14,R0                  module name
         LA    R14,8(,R14)             return address
*
DOBLDL2  EQU   *
         L     R1,CVTPTR               LINKLIST DCB
         L     R1,CVTLINK-CVTMAP(,R1)  LINKLIST DCB
         B     DOBLDL10
*
DOBLDL3  SLR   R1,R1                   DCB=0 (search tasklibs)
         B     DOBLDL10
MLPADDN  DC    CL8'-MLPA-'
PLPADDN  DC    CL8'-PLPA-'
LINKDDN  DC    CL8'-LNKLST-'
*
DOBLDL10 BEGIN_PROC SAVE=NO
         STM   R14,R12,12(R13)         save regs
         L     R3,CVTPTR               point to CVT
         USING CVTMAP,R3
         LR    R4,R0                   module name
         LR    R5,R1                   DCB address
         BALR  R12,0
         USING *,R12
         MVC   PDATA_DSN,BLANKS        clear dsname
*
*        search the ACTIVE LPA Q
*
         MVC   PDATA_DDN,MLPADDN       DDN=-MLPA-
         PUSH  USING
         DROP  R11                     used by QCDSR
         LA    R8,ALPACDE1             START OF ALPAQ or DLPAQ
         LR    R9,R4                   Module name
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE
         BALR  R14,R15                 USES R0, R1, R8, R9, R11
         B     DOBLDL90            +0  FOUND, QUIT
         L     R11,64(,R13)        +4  reload main base reg
         POP   USING
*
*        Search the PLPA directory
*
         MVC   PDATA_DDN,PLPADDN       DDN=-PLPA-
         LM    R0,R1,0(R4)             EP NAME
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE
         BALR  R14,R15                 USES R6-R9
         B     DOBLDL90            +0  FOUND, QUIT
*
*        Search the tasklib directories (R5=0)
*        Search the linklist directory (R5=CVTLINK)
*
         MVC   PDATA_DDN,BLANKS        DDN=' '
         SYNCH SAFEBLDL,RESTORE=YES
         LTR   R15,R15                 OK?
         BNZ   DOBLDL99                no, exit
         STCM  R0,B'0011',PDS2CNCT     PDS2CNCT,PDS2LIBF
*
         MVC   PDATA_DDN,LINKDDN       module found in link-list
         LTR   R5,R5                   DCB=0 ?
         BNZ   DOBLDL80                no, found in linklist
         CLI   PDS2LIBF,PDS2LLNK       found in link-list?
         BE    DOBLDL80                yes, jump
*
*        found in tasklib - retrieve ddname
*
         SLR   R6,R6
         IC    R6,PDS2LIBF             TCB count
         BCTR  R6,0                    minus 1
         L     R9,PSATOLD-PSA          own TCB
*loop
DOBLDL47 BAL   R14,JLBDDN           <- retrieve tasklib ddname
         L     R9,TCBOTC-TCB(,R9)      previous TCB
         BCT   R6,DOBLDL47             get tasklib TCB
*endloop
*
*        retrieve dsname from JFCB<-SIOT<-DSAB
*
DOBLDL50 L     R9,JSTCB                own Job-step TCB
         L     R2,TCBJSCB-TCB(,R9)     current JSCB
         USING IEZJSCB,R2
         L     R2,JSCDSABQ             DSAB QDB
         USING DSABQDB,R2
         L     R2,DSQFRSTP             FIRST DSAB ON CHAIN
         USING DSAB,R2
*loop
DOBLDL56 L     R5,DSABSIOT             get SIOT address
         USING INDMSIOT,R5
         CLC   PDATA_DDN,SCTDDNAM      is it my ddname?
         BNE   DOBLDL59                No, try next DSAB
         SLR   R3,R3
         IC    R3,PDS2CNCT             pick-up concat#
*--loop
DOBLDL57 L     R5,DSABSIOT             get SIOT address
         L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT
         LTR   R3,R3                   concat # = zero ?
         BZ    DOBLDL88                yes, dsname found
         BCTR  R3,0                    decrement concat #
         ICM   R2,B'1111',DSABFCHN     NEXT DSAB
         BNZ   DOBLDL57                Not finished yet, keep on going
*--endloop
DOBLDL59 ICM   R2,B'1111',DSABFCHN     NEXT DSAB
         BNZ   DOBLDL56                Not finished yet, keep on going
*endloop
         B     DOBLDL90               The dsname could not be retrieved
*
*        find link-list dsname from LLT
*
DOBLDL80 SLR   R3,R3
         IC    R3,PDS2CNCT             pick-up concat#
         MH    R3,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT
         L     R14,CVTPTR              CVT address
         L     R15,CVTLLTA-CVTMAP(,R14) link-list table
         AIF   (NOT D'CVTH6603).DOBLDL85
         TM    HBB6603,L'HBB6603       OS/390 R3?
         BZ    DOBLDL85                no, jump
         L     R15,PSAAOLD-PSA         A(ASCB)
         L     R15,ASCBASSB-ASCB(,R15) A(ASSB)
         L     R15,ASSBDLCB-ASSB(,R15) A(DLCB)
         L     R15,DLCBLLT@-DLCB(,R15) A(LLT)
DOBLDL85 EQU   *
.DOBLDL85 ANOP
         LA    R7,LLTDSN-LLT(R3,R15)   change offset to address
*
DOBLDL88 MVC   PDATA_DSN,0(R7)         move dsname
*
DOBLDL90 SLR   R15,R15                 rc=0
         MVC   PDS2NAME,0(R4)          EPNAME for SAFELOAD
*
DOBLDL99 L     R14,12(,R13)            restore caller's regs
         LM    R2,R12,28(R13)          restore caller's regs
         BR    R14
*
*        Issue BLDL in TCB key to prevent S112-01 abend
*
SAFEBLDL L     R13,UNPROTWK            unprotected work-area
         MVC   CSVDWORK(2+2),=AL2(1,L'CSVDWORK)
         MVC   PDS2NAME,0(R4)          EPNAME
         BLDL  (R5),CSVDWORK           ISSUE BLDL
         ICM   R0,B'0011',PDS2CNCT     PDS2CNCT,PDS2LIBF
         EXIT
         DROPTEMP
*---------------------------------------------------------------------*
*                                                                     *
*        Load a module from a system or private library.              *
*                                                                     *
*        If the module is loaded from the link-list or from a         *
*        job/step/tasklib, then the first 512 bytes (from             *
*        load-point) are copied to WORK512.  This prevents S0C4-04    *
*        when the module is loaded into SP 251 and SHOWMVS running    *
*        key=4 is trying to access it.                                *
*                                                                     *
*          Input:  PDS2NAME contains module name                      *
*                  PDATA_DDN contains ddname                          *
*                                                                     *
*          Output: R1 points to first 512 bytes of module             *
*                  PDATA_DDN contains ddname                          *
*                                                                     *
*---------------------------------------------------------------------*
SAFELOAD BEGIN_PROC SAVE=STDSAVE
         BALR  R12,0
         USING *,R12
         SLR   R1,R1                   DCB=0
         CLI   PDATA_DDN,C'-'          system library ?
         BNE   SAFEL200                no, jump
         L     R1,CVTPTR               CVT
         L     R1,CVTLINK-CVTMAP(,R1)  DCB for SYS1.LINKLIB
SAFEL200 SYNCH SAFELOAD_LOAD,RESTORE=YES issue load
         LR    R2,R0                   save EP address
*
*        retrieve true name of the module if it was an alias
*
         L     R4,TCBLLS               POINT TO LAST LLE IN CHAIN
         USING LLE,R4
*LOOP
SAFEL221 L     R6,LLECDPT              CDE PTR
         USING CDENTRY,R6
         CLC   PDS2NAME,CDNAME         IS IT MY LLE?
         BE    SAFEL233                YES, JUMP
         ICM   R4,B'1111',LLECHN       CHECK FOR END OF CHAIN
         BNZ   SAFEL221                LOOP THROUGH LOAD LIST
*ENDLOOP
         B     SAFEL236                SOMETHING'S WRONG HERE
SAFEL233 TM    CDATTR,CDMIN            IS THIS A MINOR CDE?
         BNO   *+8                     NO, JUMP
         L     R6,CDXLMJP              YES, POINT TO MAJOR CDE/LPDE
SAFEL236 MVC   PDS2NAME,CDNAME         move name from CDE/LPDE
*
         CLC   PDATA_DDN,MLPADDN       -MLPA- ?
         BE    SAFEL900                yes, exit
         CLC   PDATA_DDN,PLPADDN       -PLPA- ?
         BE    SAFEL900                yes, exit
*
SAFEL300 CH    R1,=H'512'              max size
         BNH   *+8                     max size
         LA    R1,512                  max size
         IC    R15,OLDPKF              source key
         MVCK  WORK512(R1),0(R2),R15   move module to work area
         LA    R2,WORK512              return addr of work area
*
SAFEL900 SYNCH SAFELOAD_DELETE         delete the module
*
SAFEL999 L     R14,12(,R13)            restore caller's regs
         LR    R0,R7                   dsname
         LR    R1,R2                   EP address
         LM    R2,R12,28(R13)          restore caller's regs
         BR    R14
*
*        Issue LOAD macro in TCB key to avoid S306-0C
*
SAFELOAD_LOAD EQU *
         LA    R3,PDS2NAME             point at program name
         LR    R4,R1                   pass DCB address
         L     R13,UNPROTWK            point at unprotected work area
         XC    WORK256,WORK256         clear work area
         LOAD  EPLOC=(R3),             load the program                X
               DCB=(R4),               DCB address                     X
               LOADPT=WKCELL1,         return load-point address       X
               SF=(E,WORK256)
         CLC   =CL8'SORT',0(R3)        IS THIS SORT?
         BNE   *+8                     NO, USE ENTRY POINT
         L     R0,WKCELL1              USE LOAD-POINT FOR SORT
*
         SLL   R1,8                    clear AC(1) bit
         SRL   R1,5                    size in bytes
         ALR   R1,R0                   subtract load-point offset
         SL    R1,WKCELL1              subtract load-point offset
         LA    R1,0(,R1)               AMODE bit off
         BR    R14
SAFELOAD_DELETE EQU *
         DELETE EPLOC=PDS2NAME         delete the program
         BR    R14
         DROPTEMP
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve dsname that corresponds to a CDE (ESA 4.3)          *
*              On entry, R0 contains a 31-bit address                 *
*              On exit, R1 points to a dsname (if R15=0)              *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
CSVDSN   BEGIN_PROC SAVE=NO
         USING *,R15
         TM    HBB4430,L'HBB4430       ESA 4.3 ?
         BO    CSVD10                  yes, continue
         LA    R1,BLANKS               dsname=''
         LA    R15,4                   rc=not_supported
         BR    R14                     exit
CSVD10   BAKR  R14,0                   save regs
         AIF   (NOT D'CVTH4430).CSVD99
         BALR  R12,0
         USING *,R12
         ST    R0,CSVDWORK             entry-point address
*
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +
               INADDR=CSVDWORK,        ADDRESS                         +
               OUTEPNM=EP10+2,         RETURN EP NAME                  +
               OUTPDATA=PDATA,         PROVIDER DATA                   +
               OUTPID=PID,             PROVIDER ID                     +
               OUTEPTKN=MODTOKEN,      RETURN TOKEN                    +
               MF=(E,CSVQRYWK)         WORK AREA
         LTR   R2,R15                  pass return code
         BZ    CSVD17                  OK, continue
         STRING 'CSVQUERY Failed, R15=',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         B     CSVD99                  EXIT WITH R15>0
*
CSVD17   CLC   =C'PGMF',PID            LOADED FROM JOBLIB/STEPLIB?
         BNE   CSVD31                  no, jump
         OC    PDATA,PDATA             Any provider data returned?
         BZ    CSVD51                  no, quit
         LA    R2,X'000000FF'          mask for NR
         N     R2,PDATA_TTRN           load TTRN from Provider Data
         CLI   PDATA+1,X'01'           LOADED FROM -LNKLST- ?
         BE    CSVD44                  yes, jump
         B     CSVD61                  JOBLIB/STEPLIB/TASKLIB
*
*        get module's TTRN in linklist (PID=LLAF)
*
CSVD31   CLC   =C'LLAF',PID            LOADED FROM LINK-LIST?
         BNE   CSVD51                  NO, EXIT
         MVC   CSVDWORK,=AL2(1,L'CSVDWORK)
         MVC   PDS2NAME,EP10+2         EPNAME
         L     R1,CVTPTR               CVT address
         L     R1,CVTLINK-CVTMAP(,R1)  link-list DCB
         BLDL  (1),CSVDWORK            ISSUE BLDL (to LLA)
         LTR   R15,R15
         LA    R1,BLANKS               dsname=''
         BNZ   CSVD99                  NOT FOUND, QUIT
         IC    R2,PDS2CNCT             pick-up concat#
         MVC   PDATA_DDN,LINKDDN       move ddname
*
*        find link-list dsname from LLT
*
CSVD44   MH    R2,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT
         L     R3,CVTPTR               CVT address
         L     R3,CVTLLTA-CVTMAP(,R3)  link-list table
         LA    R1,LLTDSN-LLT(R2,R3)    change offset to address
         B     CSVD98                  exit
*
CSVD51   STRING 'PID(',(PID,,T),')',INTO=WORK44
         LA    R1,WORK44               message
         LA    R15,4                   RC=4
         B     CSVD99                  exit
*
*        Loaded from JOBLIB/STEPLIB/TASKLIB
*
CSVD61   TM    PDATA,X'80'             loaded from a PDSE?
         BZ    CSVD61L                 no, jump
         L     R3,PDATA_DDN+4          yes, get LFMD address
         MVC   PDATA_DDN,044(R3)       move true ddname
CSVD61L  L     R3,PSATOLD-PSA          TCB
         L     R3,TCBTIO-TCB(,R3)      TIOT
         USING TIOT1,R3
         SLR   R0,R0                   PREPARE IC
*LOOP
CSVD62   CLC   PDATA_DDN,TIOEDDNM      is this my ddname ?
         BE    CSVD65                  yes, exit loop
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         CLI   TIOELNGH,0              IS THIS THE END?
         BNZ   CSVD62                  NOT YET, LOOP THROUGH TIOT
*ENDLOOP
*        DDname has been freed (not found in TIOT)
*
         STRING (PDATA_DDN,,T),'+',((R2),,L),INTO=CSVDWORK
         LA    R1,CSVDWORK             message
         B     CSVD98                  exit
*
*        DDname found - Retrieve dsname from JFCB
*
CSVD65   LTR   R2,R2                   first data set in concat?
         BZ    CSVD66                  yes, exit
*loop
CSVD65L  IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY
         BCT   R2,CSVD65L              next concat#
*endloop
CSVD66   LA    R2,CSVDWORK+4           WORK AREA
         ST    R2,CSVDWORK             WORK AREA
         USING ZB505,R2
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB
         SWAREQ FCODE=RL,EPA=CSVDWORK,MF=(E,SWAREQL1),UNAUTH=YES
         L     R1,SWBLKPTR             31-BIT ADDRESS OF JFCB
CSVD98   SLR   R15,R15                 RC=0
.CSVD99  ANOP
CSVD99   PR
         POP   USING
*---------------------------------------------------------------------*
*        Sort APF-list table                                          *
*---------------------------------------------------------------------*
TRIZO    BEGIN_PROC SAVE=STDSAVE
         BALR  R15,0
         USING *,R15
         LA    R0,L'LINE               LONGUEUR D'UN POSTE
         LR    R1,R10                  A(NEXTLINE)
         SLR   R1,R0                   DERNIER POSTE DE LA TABLE
         CL    R1,0(,R2)               un seul poste?
         BER   R14                     oui, fini
         STM   R0,R1,4(R2)             LONGUEUR, DERNIER POSTE
*LOOP
TRIZO1   MVI   0(R13),0                ETAT INITIAL DE L'INDICATEUR
         L     R10,0(,R2)              DEBUT DE LA TABLE  N=1
         SLR   R1,R0                   LE DERNIER POSTE EST TRIE
*--LOOP
TRIZOC   CLC   DSNAME,DSNAME+L'LINE    (POSTE N) GT (POSTE N+1) ?
         BNH   TRIZOH                  SI NON, BRANCH
         XC    LINE,NEXTLINE           SI (POSTE N+1) LT (POSTE N)
         XC    NEXTLINE,LINE            INVERSER LES
         XC    LINE,NEXTLINE             DEUX POSTES.
         MVI   0(R13),8                NOTER LE DECLASSEMENT
TRIZOH   BXLE  R10,R0,TRIZOC           FAIRE N=N+1
*--ENDLOOP
TRIZON   CLI   0(R13),0                Y-A-T-IL EU UN DECLASSEMENT ?
         BNE   TRIZO1                  SI OUI, REFAIRE UN PASSAGE
*ENDLOOP
         LM    R14,R12,12(R13)
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*        Sort USERID and JOBname tables                               *
*                                                                     *
*              WKCELL1+00: First entry                                *
*              WKCELL1+04: Last entry                                 *
*---------------------------------------------------------------------*
SORT8    BEGIN_PROC SAVE=STDSAVE
         BALR  R15,0
         USING *,R15
         LA    R0,8                    length of an entry
         L     R1,WKCELL1+4            A(last_entry)
         CL    R1,WKCELL1              only one entry?
         BER   R14                     yes, goback
*LOOP
SORT8B   MVI   0(R13),0                ETAT INITIAL DE L'INDICATEUR
         L     R2,WKCELL1              DEBUT DE LA TABLE  N=1
         SLR   R1,R0                   LE DERNIER POSTE EST TRIE
*--LOOP
SORT8C   CLC   0(8,R2),8(R2)           (POSTE N) GT (POSTE N+1) ?
         BNH   SORT8H                  SI NON, BRANCH
         XC    0(8,R2),8(R2)           SI (POSTE N+1) LT (POSTE N)
         XC    8(8,R2),0(R2)            INVERSER LES
         XC    0(8,R2),8(R2)             DEUX POSTES.
         MVI   0(R13),8                NOTER LE DECLASSEMENT
SORT8H   BXLE  R2,R0,SORT8C            FAIRE N=N+1
*--ENDLOOP
SORT8N   CLI   0(R13),0                Y-A-T-IL EU UN DECLASSEMENT ?
         BNE   SORT8B                  SI OUI, REFAIRE UN PASSAGE
*ENDLOOP
         LM    R14,R12,12(R13)
         L     R1,WKCELL1              Point R1 to first entry
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        Cell-pool display sub-routine                                *
*                                                                     *
*---------------------------------------------------------------------*
CELLP100 BEGIN_PROC SAVE=NO
         LTR   R4,R4                   PPD=0?                      $RS
         BZR   R7                      yes, goback                 $RS
         USING PPD,R4                                              $RS
         BALR  R3,0                    LOCAL BASE
         USING *,R3
*loop                                                              $RS
CELLP111 EQU   *                                                   $RS
         ICM   R5,B'1111',PPDCPID      point to Cellpool-ID        $RS
         BZ    CELLP118                zero, ignore                $RS
         USING PPDIDENT,R5                                         $RS
         STRING '*Fetch protected*',INTO=WORK44
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?            $RS
         BO    CELLP112                Yes, Subpool-check          $RS
         VALIDATE PPDIDENT,ERRET=CELLP113 PPDIDENT maybe protected $RS
CELLP112 EQU   *                                                   $RS
         BAL   R14,EXECK0SS            execute MVC in key-zero     $RS
         MVC   WORK44(L'PPDIDEYE),PPDIDEYE maybe protected
CELLP113 EQU   *                                                   $RS
         LA    R0,1
         AL    R0,PPDINDX              Extents = PPDINDX+1         @RS
         ST    R0,TENWORDS
         STRING 2X,(PPDCPID,4,X),      CP ID                           X
               1X,(TENWORDS,F,R3B),    Extents                         X
               1X,(PPDCSIZE,F,R7B),    size                            X
               (PPDPCNT,F,R7B),        count                           X
               1X,(PPDSCNT,F,R7B),     secondary cell count            X
               1X,(PPDSP,FL1,R3B),     sub-pool                        X
               1X,(PPDKEY,FL1,R3B),    prot key                        X
               1X,(PPDTCB+1,3,X),      TCB                             X
               1X,(WORK44,L'PPDIDEYE), cell-pool ID                    X
               INTO=LINE                                           $RS
         BAL   R14,SPACE1              Single Space                $RS
CELLP118 EQU   *                                                   $RS
         ICM   R4,B'1111',PPDNEXT      another PPD?                $RS
         BNZ   CELLP111                yes, display it             $RS
*endloop                                                           $RS
         BR    R7                      goback
*---------------------------------------------------------------------*
*                                                                     *
*        BITSTR routine: edit bit string as 1,2-4,5,7,9-14            *
*                                                                     *
*          LA  R0,8                    number of bytes                *
*          LA  R1,1                    First bit is bit 1             *
*          LA  R2,=X'EA00EA00EA00EA03' bit string                     *
*          BAL R14,BITSTR              edit bit string                *
*                                                                     *
*---------------------------------------------------------------------*
BITSTR   BEGIN_PROC SAVE=NO
         STM   R14,R12,WORK256+32      SAVE WORK REGS
         BALR  R12,0                   LOCAL BASE
         USING *,R12
         MVC   NEXTLINE,BLANKS         CLEAR OUTPUT AREA
         BALR  R3,0                    FIRST TIME SWITCH
*--LOOP
BITSTR1  LA    R4,8                    BIT LOOP
         LA    R5,X'80'                BIT MASK
*----LOOP
BITSTR2  EX    R5,BITSTR9              EXECUTE "TM"
         BZ    BITSTR4                 THIS BIT OFF, JUMP
         LTR   R3,R3                   START OF A NEW RANGE?
         BNM   BITSTR7                 NO, IGNORE
         LR    R3,R1                   1ST BIT IN RANGE
         CLI   NEXTLINE,C' '           FIRST RANGE?
         BE    BITSTR3                 YES, JUMP
         STRING (NEXTLINE,,L),',',((R3),,L),INTO=NEXTLINE
         B     BITSTR7
BITSTR3  EQU   *                       FIRST RANGE
         STRING ((R3),,L),INTO=NEXTLINE
         B     BITSTR7
BITSTR4  EQU   *                       END OF RANGE
         LTR   R3,R3                   PREV BIT ON?
         BM    BITSTR7                 NO, IGNORE
         BCTR  R1,0                    PREVIOUS BIT (END OF RANGE)
         CLR   R3,R1                   SINGLE-BIT RANGE?
         BE    BITSTR6                 YES, JUMP
         STRING (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
BITSTR6  EQU   *
         LA    R1,1(,R1)               UNDO PREVIOUS "BCTR R1,0"
         BALR  R3,0                    PREV BIT WAS OFF
BITSTR7  EQU   *
         LA    R1,1(,R1)               BUMP CURRENT BIT NUMBER
         SRL   R5,1                    OFFSET MASK
         BCT   R4,BITSTR2
*----ENDLOOP
         LA    R2,1(,R2)               BUMP BYTE ADDRESS
         BCT   R0,BITSTR1              PROCESS NEXT 8 BITS
*--ENDLOOP
         LTR   R3,R3                   PREV BIT ON?
         BM    BITSTR9                 NO, EXIT
         BCTR  R1,0                    PREVIOUS BIT (END OF RANGE)
         CLR   R3,R1                   SINGLE-BIT RANGE?
         BE    BITSTR9                 YES, JUMP
         STRING (NEXTLINE,,L),'-',((R1),,L),INTO=NEXTLINE
BITSTR9  TM    0(R2),*-*               CHECK FOR RECORDING OFF
         LM    R14,R12,WORK256+32      RESTORE WORK REGS
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        LOCATE EPNAME FOR ADDR IN (R1)                               *
*                                                                     *
*        Entry:  R1 contains an address                               *
*                                                                     *
*        Exit:   EP10 contains the location and name of               *
*                the corresponding module.                            *
*                                                                     *
*---------------------------------------------------------------------*
CSVQUERY BEGIN_PROC SAVE=NO
         LA    R1,0(,R1)               CLEAN-UP AMODE BIT
         STM   R14,R3,TENWORDS         save registers
         BALR  R3,0
         USING *,R3
         MVC   EP10,BLANKS             clear work area
         CL    R1,IGCERROR             THIS SVC USED?
         BE    CSVQRY98                NO, GOBACK
         USING CVTFIX,R8
*
*        SCAN JPAQ
*
         L     R2,PSATOLD-PSA          MY TCB
         L     R2,TCBJSTCB-TCB(,R2)    JOB STEP TCB
         ICM   R2,B'1111',TCBJPQ-TCB(R2)  FIRST CDE ON JPA QUEUE
         BZ    CSVQRY20                EMPTY QUEUE, SKIP SEARCH
         USING CDENTRY,R2
         MVI   EP10,C'J'               Job Pack Area
*LOOP
CSVQRY11 TM    CDATTR2,CDXLE           IS THERE AN EXTENT LIST?
         BNO   CSVQRY12                NO, JUMP
         TM    CDATTR,CDNIC            this module being loaded?
         BO    CSVQRY12                yes, jump
         L     R14,CDXLMJP             EXTENT LIST
         USING XTLST,R14
         C     R1,XTLMSBAD             WITHIN BOUNDARIES?
         BL    CSVQRY12                NO, IGNORE
         L     R15,XTLMSBLA            LENGTH OF LOAD MOD
         LA    R15,0(,R15)             CLEAR HI-ORDER BIT
         A     R15,XTLMSBAD            ADD LOAD POINT ADDRESS
         CR    R1,R15                  WITHIN BOUNDARIES?
         BL    CSVQRY82                YES, PROCESS
CSVQRY12 ICM   R2,B'1111',CDCHAIN      NEXT CDE IN QUEUE
         BNZ   CSVQRY11                GOOD ADDR, PROCESS
*ENDLOOP
*
*        SCAN ACTIVE LPA QUEUE (MLPA/FLPA)
*
CSVQRY20 EQU   *
         ICM   R2,B'1111',ALPACDE1     First CDE on ALPAQ or DLPAQ
         BZ    CSVQRY40                EMPTY QUEUE, SKIP SEARCH
         USING CDENTRY,R2
         MVI   EP10,C'A'               ACTIVE LPA Q
*LOOP
CSVQRY21 L     R15,CDENTPT             ENTRY POINT
         LA    R15,0(,R15)             CLEAN UP AMODE BIT
         CR    R1,R15                  IS THIS MY ENTRY POINT?
         BE    CSVQRY82                MODULE FOUND, JUMP
         ICM   R2,B'1111',CDCHAIN      NEXT LPDE ADDR
         BNZ   CSVQRY21                NO FINISHED YET, LOOP FURTHER
*ENDLOOP
*        SCAN PAGEABLE LPA QUEUE (PLPA)
*
CSVQRY40 L     R2,CVTLPDIA             FIRST LPDE
         USING LPDE,R2
         MVI   EP10,C'P'               PAGEABLE LPA Q
*LOOP
CSVQRY41 L     R15,LPDENTP             ENTRY POINT
         LA    R15,0(,R15)             CLEAN UP AMODE BIT
         CR    R1,R15                  IS THIS MY ENTRY POINT?
         BE    CSVQRY82                MODULE FOUND, JUMP
         TM    LPDEATTR,LPDEMIN        MINOR LPDE?
         BO    CSVQRY42                YES, IGNORE
         LM    R15,R0,LPDEXTLN         LENGTH/LOAD ADDR
         CR    R0,R1
         BH    CSVQRY42                OUTSIDE BOUNDARIES, JUMP
         AR    R0,R15
         CR    R0,R1
         BH    CSVQRY82                MODULE FOUND, JUMP
CSVQRY42 LA    R2,LPDEXTAD+4           BUMP LPDE ADDR
         CLI   LPDENAME,X'FF'          END OF LPA DIRECTORY?
         BNE   CSVQRY41                NO, LOOP FURTHER
*ENDLOOP
*        Search Nucleus Map
*
         MVI   EP10,C'N'               NUCLEUS
         LA    R0,0(,R1)               pass address
         NUCLKUP BYADDR,ADDR=(0),NAME=EP10+2
         LTR   R15,R15                 FOUND?
         BNZ   CSVQRY60                no, jump
         CLC   =C'IEAVESVC',EP10+2     THIS SVC USED?              @407
         BE    CSVQRY98                NO, quit                    @407
         B     CSVQRY99                YES, exit                   @407
*
CSVQRY60 LM    R14,R1,TENWORDS         restore reg1
         L     R2,CVTSMEXT             STORAGE MAP EXTENSION
         USING CVTVSTGX,R2
*
CSVQRY61 MVC   EP10+2(8),=C'*FLPA   '  EP FOUND IN FIXED LPA
         MVI   EP10,C'F'               FIXED LPAQ
         CL    R1,CVTFLPAS             FLPA (BELOW)
         BL    CSVQRY62                NO, JUMP
         CL    R1,CVTFLPAE             END OF FLPA (BELOW)
         BL    CSVQRY99                YES, GOBACK
CSVQRY62 CL    R1,CVTEFLPS             FLPA (ABOVE)
         BL    CSVQRY63                NO, JUMP
         CL    R1,CVTEFLPE             END OF FLPA (ABOVE)
         BL    CSVQRY99                YES, GOBACK
*
CSVQRY63 MVC   EP10+2(5),=C'*MLPA'     EP FOUND IN FIXED LPA
         MVI   EP10,C'F'               MODIFIED LPAQ
         CL    R1,CVTMLPAS             MLPA (BELOW)
         BL    CSVQRY64                NO, JUMP
         CL    R1,CVTMLPAE             END OF MLPA (BELOW)
         BL    CSVQRY99                YES, GOBACK
CSVQRY64 CL    R1,CVTEMLPS             MLPA (ABOVE)
         BL    CSVQRY71                NO, JUMP
         CL    R1,CVTEMLPE             END OF MLPA (ABOVE)
         BL    CSVQRY99                YES, GOBACK
*
CSVQRY71 L     R2,CVTGDA               POINT TO GDA
         USING GDA,R2
         MVC   EP10+2(5),=C'*CSA '     EP FOUND IN CSA
         MVI   EP10,C'C'               CSA
         L     R0,GDACSA               CSA (BELOW)
         CLR   R1,R0                   WITHIN CSA?
         BL    CSVQRY72                NO, JUMP
         AL    R0,GDACSASZ             END OF CSA (BELOW)
         CLR   R1,R0                   WITHIN CSA?
         BL    CSVQRY99                YES, GOBACK
CSVQRY72 L     R0,GDAECSA              CSA (ABOVE)
         CLR   R1,R0                   WITHIN CSA?
         BL    CSVQRY73                NO, JUMP
         AL    R0,GDAECSAS             END OF CSA (ABOVE)
         CLR   R1,R0                   WITHIN CSA?
         BL    CSVQRY99                YES, GOBACK
*
CSVQRY73 MVC   EP10+2(5),=C'*SQA '     EP FOUND IN SQA
         MVI   EP10,C'C'               SQA
         L     R0,GDASQA               SQA (BELOW)
         CLR   R1,R0                   WITHIN SQA?
         BL    CSVQRY74                NO, JUMP
         AL    R0,GDASQASZ             END OF SQA (BELOW)
         CLR   R1,R0                   WITHIN SQA?
         BL    CSVQRY99                YES, GOBACK
CSVQRY74 L     R0,GDAESQA              SQA (ABOVE)
         CLR   R1,R0                   WITHIN SQA?
         BL    CSVQRY75                NO, JUMP
         AL    R0,GDAESQAS             END OF SQA (ABOVE)
         CLR   R1,R0                   WITHIN SQA?
         BL    CSVQRY99                YES, GOBACK
CSVQRY75 MVC   EP10,BLANKS             RETURN BLANK NAME
         B     CSVQRY99
*
         USING LPDE,R2
CSVQRY82 MVC   EP10+2(8),LPDENAME      PASS EP NAME
         B     CSVQRY99
*
CSVQRY98 MVC   EP10,BLANKS             This SVC is not used
         MVI   EP10,C'-'               This SVC is not used
*
CSVQRY99 LM    R14,R3,TENWORDS         restore registers
         BR    R14
         DROP  R2,R3,R8                LPDE, base, CVT
*---------------------------------------------------------------------*
*                                                                     *
*        CONVERT UCBTYP TO UNITNAME                                   *
*                                                                     *
*        Entry:  R7 contains the address of the UCB                   *
*                                                                     *
*        Exit:   UNITNAME contains the EBCDIC Unit name (e.g. 3380E)  *
*                                                                     *
*---------------------------------------------------------------------*
GETUNIT  BEGIN_PROC SAVE=NO
         STM   R14,R2,GETUREGS         SAVE registers
         BALR  R2,0
         USING *,R2
         USING UCBOB,R7
         MVC   UNITNAME+8,UCBTYP       move device type
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              work area                       X
               =AL1(CNVTLUV,0)),       convert dev type to LUV         X
               ERRET=GETUNIT8
         XCALL IEFEB4UV,                                               X
               (UNITNAME,              work area                       X
               =AL1(RETNUNIT,0)),      return unit name                X
               ERRET=GETUNIT8
         CLI   UCBTBYT3,UCB3DACC       DASD?
         BNE   GETUNIT9                NO, exit
*
*        3380/3390 subtype
*
         BAL   R1,GETUNIT5             BRANCH AROUND TABLE
         DC    X'1E',C'D '             DCEOBRDT      3380/3390
         DC    X'21',C'J '             DCEOBRDT      3380/3390
         DC    X'23',C'K '             DCEOBRDT      3380/3390
         DC    X'2E',C'E '             DCEOBRDT      3380/3390
         DC    X'26',C'-1'             DCEOBRDT      3380/3390
         DC    X'27',C'-2'             DCEOBRDT      3380/3390
         DC    X'24',C'-3'             DCEOBRDT      3380/3390
         DC    X'32',C'-9'             DCEOBRDT      3380/3390
         DC    AL1(00),0H'0'
*
GETUNIT5 LA    R15,UCBOB               pass UCB addr
         BAL   R14,GETCMEXT            get addr of common extension
         LTR   R15,R15                 UCB COMMON EXTENSION
         BZ    GETUNIT9                VIO, exit
         ICM   R15,B'1111',UCBCLEXT-UCBCMEXT(R15) Device class extnsion
         BZ    GETUNIT9                VIO, exit
         USING DCE,R15
         BALR  R14,0                   SCAN TABLE
*--loop
         CLC   DCEOBRDT,0(R1)          TEST 3380/3390 MODEL
         BNE   *+10                    not equal, skip "MVC"
         MVC   UNITNAME+4(2),1(R1)     MOVE 3380 TYPE (D/E/J/K)
         LA    R1,1+2(,R1)             next entry
         CLI   0(R1),0                 end of table?
         BNER  R14
*--endloop
         B     GETUNIT9                exit
         DROP  R15                     DCE
GETUNIT8 MVC   UNITNAME,BLANKS         CONVERSION DID NOT WORK
GETUNIT9 LM    R14,R2,GETUREGS         SAVE registers
         BR    R14
         DROP  R2,R7
*---------------------------------------------------------------------*
*                                                                     *
*        TCB tree scan routine                                        *
*                                                                     *
*        Entry:  R3 contains the indentation index                    *
*                R9 contains the address of the current TCB           *
*        Exit:   R3 contains the new indentation index                *
*                R9 contains the address of the next TCB              *
*                                                                     *
*---------------------------------------------------------------------*
SCANTCB  BEGIN_PROC SAVE=NO
         USING *,R15
         LR    R1,R9                   SAVE TCB ADDRESS
         L     R9,TCBLTC-TCB(,R9)      DAUGHTER
         LA    R3,1(,R3)               INDENTATION INDEX
*LOOP
SCANTCB2 LTR   R9,R9                   CHECK FOR END OF CHAIN
         BNZR  R14                     PASS VALID TCB ADDRESS
         L     R9,TCBNTC-TCB(,R1)      SISTER
         L     R1,TCBOTC-TCB(,R1)      MOTHER
         BCT   R3,SCANTCB2             INDENTATION INDEX
*ENDLOOP
         SR    R9,R9                   SET CC=0
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*                                                                     *
*        SCAN RB chain backwards (from oldest RB)                     *
*              Input:  R6 points to current RBPREFIX                  *
*                      R9 points to the TCB                           *
*              Output: R6 point to next RB                            *
*                                                                     *
*---------------------------------------------------------------------*
         USING RBPREFIX,R6
         USING TCB,R9
NEXTRB   BEGIN_PROC SAVE=NO
         USING *,R15
         LA    R0,RBBASIC              point to basic section
         SLR   R6,R6                   end of chain
         CL    R0,TCBRBP               end of chain?
         BER   R14                     yes, goback with R6=0
         ICM   R6,B'1111',TCBRBP       Point to top RB (most recent)
         BZR   R14                     no RB for this TCB, goback
*--LOOP
NEXTRB2  SH    R6,=Y(RBBASIC-RBPREFIX) POINT TO RBPREFIX
         CLM   R0,B'0111',RBLINK+1     is this the next RB?
         BER   R14                     yes, goback
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?
         BOR   R14                     yes, goback
         ICM   R6,B'0111',RBLINK+1     POINT TO PREVIOUS RB (OR TCB)
         BNZ   NEXTRB2                 next RB in chain
*--ENDLOOP
         SLR   R6,R6                   end of chain
         BR    R14                     yes, goback
         DROP  R6,R9                   RBPREFIX,TCB
*---------------------------------------------------------------------*
*                                                                     *
*        Scan JPAQ backwards (from oldest CDE)                        *
*              Input:  R5 points to current CDENTRY                   *
*              Output: R5 point to next CDE                           *
*                                                                     *
*---------------------------------------------------------------------*
         USING CDENTRY,R5
NEXTCDE  BEGIN_PROC SAVE=NO
         USING *,R15
         LR    R0,R5                   point to current CDE
         L     R5,PSATOLD-PSA          my TCB
         L     R5,TCBJSTCB-TCB(,R5)    job-step TCB
         L     R5,TCBJPQ-TCB(,R5)      Top CDE (most recent)
         LTR   R5,R5                   empty JPAQ?
         BZR   R14                     yes, goback with R5=0
*--LOOP
NEXTCDE2 CL    R0,CDCHAIN              is this the next RB?
         BER   R14                     yes, goback
         ICM   R5,B'1111',CDCHAIN      previous CDE
         BNZ   NEXTCDE2                not found yet, loop more
*--ENDLOOP
         BR    R14                     goback with R5=0
         DROP  R5                      CDENTRY
*---------------------------------------------------------------------*
*                                                                     *
*        Scan LOAD-LIST backwards (from oldest LLE)                   *
*              Input:  R7 points to current LLE                       *
*              Output: R7 point to next LLE                           *
*                                                                     *
*---------------------------------------------------------------------*
NEXTLLE  BEGIN_PROC SAVE=NO
         USING *,R15
         LR    R0,R7                   point to current LLE
         L     R7,TCBLLS-TCB(,R9)      Top LLE (most recent)
         LTR   R7,R7                   empty load list?
         BZR   R14                     yes, goback with R7=0
         USING LLE,R7
*--LOOP
NEXTLLE2 CL    R0,LLECHN               is this the next RB?
         BER   R14                     yes, goback
         ICM   R7,B'1111',LLECHN       previous LLE
         BNZ   NEXTLLE2                not found yet, loop more
*--ENDLOOP
         BR    R14                     goback with R7=0
         DROP  R7,R15                  LLE
*---------------------------------------------------------------------*
*                                                                     *
*        Retrieve the number of EXCPs for a given DDname              *
*                                                                     *
*        Entry:  R0 contains a TIOT offset                            *
*        Exit:   R1 contains the EXCP count (from the TCTDCTR field)  *
*                                                                     *
*---------------------------------------------------------------------*
EXCP00   BEGIN_PROC SAVE=STDSAVE
         BALR  R3,0                    Base reg
         USING *,R3
         L     R1,PSATOLD-PSA          MY TCB
         L     R1,TCBTCT-TCB(,R1)      TCBTCT
         L     R1,TCTIOTBL-SMFTCT(,R1) START OF I/O MEASUREMENT TABLE
         LA    R1,TCTIODSP-TCTTIOT(,R1) FIRST DD ENTRY
         USING TCTDCBTD,R1
*LOOP
EXCP11   CL    R0,TCTDCBTD             SAME TIOT OFFSET?
         BE    EXCP21                  YES, EXIT LOOP
         LA    R1,TCTDCBLE             NEXT LOOKUP TABLE ENTRY
         ICM   R15,B'1111',TCTDCBLE    END OF TABLE ?
         BNZ   EXCP11                  NOT YET, TRY NEXT DD ENTRY
*ENDLOOP
         SLR   R0,R0                   EXCP COUNT IS ZERO
         B     EXCP99
*
EXCP21   L     R1,TCTIOTSD             OFFSET IN I/O MEASURE. TABLE
         L     R15,PSATOLD-PSA         MY TCB
         L     R15,TCBTCT-TCB(,R15)    MY TCT
         A     R1,TCTIOTBL-SMFTCT(,R15) START OF I/O MEASUREMENT TABLE
         USING TCTDDENT,R1
         ICM   R0,B'1111',TCTDCTR      EXCP COUNT IN R0
EXCP99   LR    R1,R0                   EXCP COUNT IN R1 TOO
         LM    R2,R12,28(R13)
         BR    R14
         DROP  R1
*---------------------------------------------------------------------*
*        SNAP ROUTINE    R0=LENGTH,R1=ADDRESS                         *
*---------------------------------------------------------------------*
SNAP00   BEGIN_PROC SAVE=NO
         BALR  R3,0                    Base reg
         USING *,R3
         SLR   R15,R15                 offset=0000
         STM   R14,R15,SNAPREGS+24     return address
         STRING '0-3 ',(SNAPREGS+08,4,X),1X,(SNAPREGS+12,4,X),         X
               1X,(SNAPREGS+16,4,X),1X,(SNAPREGS+20,4,X),              X
               '  4-7 ',((R4),,X),1X,((R5),,X),                        X
               1X,((R6),,X),1X,((R7),,X),INTO=LINE
         BAL   R14,SPACE1          <== next line
         STRING '8-B ',((R8),,X),1X,((R9),,X),1X,((R10),,X),           X
               1X,((R11),,X),'  C-F ',((R12),,X),1X,((R13),,X),        X
               1X,(SNAPREGS+00,4,X),1X,(SNAPREGS+04,4,X),INTO=LINE
         BAL   R14,SPACE1          <== next line
*LOOP
SNAP11   L     R14,SNAPREGS+24         return address
         LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         STRING '  +',(SNAPREGS+30,2,X),1X,((R1),,X),3X,36X,'   *',    X
               16X,'*',INTO=LINE
         LA    R14,16                  # of bytes on a line
         AL    R14,SNAPREGS+28         increment offset
         ST    R14,SNAPREGS+28         increment offset
*
         LA    R14,16                  # of chars on a line
         CLR   R14,R0                  is this a short line?
         BL    *+6                     no, jump
         LR    R14,R0                  truncate last line
         BCTR  R14,0                   FOR EX
         EX    R14,*+4                 MOVE FIELD
         MVC   LINE+59(*-*),0(R1)      MOVE FIELD
         TR    LINE+59(16),TRTPRINT
*
         LA    R2,LINE+19              start of hex data
         BAL   R14,SNAP33              edit 4 bytes
         BAL   R14,SNAP33              edit 4 bytes
         LA    R2,1(,R2)               2-byte margin
         BAL   R14,SNAP33              edit 4 bytes
         BAL   R14,SNAP33              edit 4 bytes
         BAL   R14,SPACE1          <== next line
         B     SNAP11                  snap next line
*ENDLOOP
*
SNAP33   LTR   R0,R0                   # OF REMAINING BYTES
         BNPR  R14                     FINISHED, QUIT
         UNPK  0(9,R2),0(5,R1)         translate to hex
         L     R15,=A(@STRHEXT-240)    (from STRING macro)
         TR    0(8,R2),0(R15)          translate to hex
         SH    R0,=H'4'                decrement length
         LA    R1,4(,R1)               ptr in input area
         MVI   8(R2),C' '
         LA    R2,9(,R2)               ptr in output line
         BR    R14
$LTORG   LOCTR
         DROPTEMP
*---------------------------------------------------------------------*
*        BEGIN_PROC bootstrap                                         *
*---------------------------------------------------------------------*
BEGIN_PROC LH  R15,0(,R15)             demi-offset to far routine
         ALR   R15,R15                 offset to far routine
         ALR   R15,R11                 change offset to address
         BR    R15                     branch to far routine
*---------------------------------------------------------------------*
*        ISPF Bootstraps                                              *
*---------------------------------------------------------------------*
SYNCH_ISPQRY L R15,ISPQRY@             V(ISPQRY)
         L     R13,UNPROTWK            point R13 at unprotected area
         BR    R15                     go there
SYNCH_ISPLINK L R15,ISPLINK            V(ISPLINK)
         L     R13,UNPROTWK            point R13 at unprotected area
         BR    R15                     go there
*---------------------------------------------------------------------*
*        Bump line pointer                                            *
*---------------------------------------------------------------------*
SPACE2   LA    R10,LINE+L'LINE         Double Space
BLANK1   MVC   LINE,BLANKS             Blank Line
SPACE1   LA    R10,LINE+L'LINE         Next Line
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Pseudo-dsname passed to BRIF as a title.                     *
*                                                                     *
*        Note that BRIF truncates the dsname at the first blank,      *
*        which is why X'00' is used as a delimiter.                   *
*                                                                     *
*---------------------------------------------------------------------*
TITLE    DC    C'GSF',X'00',C'Utilities',X'006000'
         DC    C'ShowMVS',X'00',C'&REL ',0H'0'
TITLE_L  EQU   *-TITLE
*---------------------------------------------------------------------*
*        Check if this PROC should be executed                        *
*---------------------------------------------------------------------*
SECTION_SELECTION EQU *
         ICM   R15,B'1111',PARSE_ANSWER A(IKJPARMD)
         BNP   2(,R14)                 NO SELECTION, PROCESS
         AH    R15,0(,R14)             ADD OFFSET TO PCE
         CLI   0(R15),1                THIS SECTION SELECTED?
         BE    2(,R14)                 YES, PROCESS
         LM    R14,R15,END_PROC        RETURN/RETRY ADDRESSES
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*        Locate a 32K work-area at the end of the dynamic work space  *
*---------------------------------------------------------------------*
WORKADDR L     R0,=F'32768'            length of work area
         L     R1,LINE1PTR             addr of lines buffer
         AL    R1,LINE1PTR+4           length of lines buffer
         SLR   R1,R0                   offset to work-area
         XC    0(256,R1),0(R1)         CLEAR IT TO X'00'
         BR    R14
*---------------------------------------------------------------------*
*        Locate the UCB common extension (UCBCMEXT)                   *
*        using IOSCMXA in ESA 5.1 and above.                          *
*---------------------------------------------------------------------*
GETCMEXT LR    R0,R15                  save UCB address
         ICM   R15,B'0111',UCBEXTP-UCBOB(R15) UCB COMMON EXTENSION
         BZR   R14                     VIO, exit with R15=0
         AIF   (NOT D'CVTH5510).GETCMEXT8
         TM    HBB5510,L'HBB5510       ESA 5.1?
         BNO   GETCMEXT8               before ESA 5
         BAKR  R14,0
         ST    R0,IOSCMXA_UCBPTR       save UCB address
         IOSCMXA UCBPTR=IOSCMXA_UCBPTR,                                X
               UCBCXPTR=IOSCMXA_UCBCXPTR,                              X
               RETCODE=LRETCODE,                                       X
               RSNCODE=LRSNCODE,                                       X
               MF=(E,IOSCMXA_PARMLIST,COMPLETE)
         LTR   R15,R15                 ok?
         LA    R15,0                   zero address
         BNZ   GETCMEXT7               bad, exit
         L     R15,IOSCMXA_UCBCXPTR    A(UCBCMEXT)
GETCMEXT7 EQU  *
         EREG  R1,R1                   restore R1
         PR
GETCMEXT8 EQU  *
.GETCMEXT8 ANOP
         SRL   R0,24                   AABBCCDD -> 000000AA
         LTR   R0,R0                   24-BIT UCB ADDR?
         BZR   R14                     YES, EXIT WITH R15>0
         SLR   R15,R15                 UCB ABOVE, CVTH5510=0
         BR    R14                     GOBACK
*---------------------------------------------------------------------*
*        Retrieve the ddname of the tasklib DCB                       *
*---------------------------------------------------------------------*
JLBDDN   MVC   PDATA_DDN,BLANKS        TASKLIB DDNAME
         ICM   R1,B'1111',TCBJLB-TCB(R9) LOAD/TEST DCB ADDRESS
         BZR   R14                     NO TASKLIB, JUMP
         MVC   PDATA_DDN,LINKDDN       -LNKLST-
         L     R2,CVTPTR               POINT AT CVT
         CL    R1,CVTLINK-CVTMAP(,R2)  SYS1.LINKLIB
         BER   R14                     JUMP IF SYS1.LINKLIB DCB ADDR
         LR    R2,R14                  save return address
         BAL   R14,EXECKEY0            exec next instruction in key0
         LH    R1,DCBTIOT-IHADCB(,R1)  LOAD TIOT OFFSET
         A     R1,TCBTIO-TCB(,R9)      CHANGE OFFSET INTO AN ADDRESS
         MVC   PDATA_DDN,4(R1)         MOVE TASKLIB DDNAME
         BR    R2
*---------------------------------------------------------------------*
*        Execute an instruction in key=zero when AUTH=ESR             *
*---------------------------------------------------------------------*
EXECKEY0 TM    AUTHORIZED,L'AUTHORIZED Authorized?
         BNOR  R14                     no, goback
         MODESET EXTKEY=ZERO
         EX    0,0(,R14)               execute L/ICM instruction
         MODESET KEYADDR=PROTKEY,WORKREG=15 switch back to KEY4
         B     4(,R14)                 skip RX-type instruction
EXECK0SS TM    AUTHORIZED,L'AUTHORIZED Authorized?
         BNOR  R14                     no, goback
         MODESET EXTKEY=ZERO
         EX    0,0(,R14)               execute MVC instruction
         MODESET KEYADDR=PROTKEY,WORKREG=15 switch back to KEY4
         B     6(,R14)                 skip SS-type instruction
*---------------------------------------------------------------------*
*                                                                     *
*        Convert Hex digits to binary                                 *
*                                                                     *
*              R0:  number of EBCDIC bytes (mult of two)              *
*              R1:  addr of first input bytes (EBCDIC)                *
*              R15: addr of output area                               *
*                                                                     *
*---------------------------------------------------------------------*
*LOOP
X2B      SRL   R0,1                    DIVIDE COUNT BY TWO
X2BLOOP1 MVC   08(2,R13),0(R1)         MOVE 2 EBCDIC BYTES
         CLI   0(R1),C'0'              A-F ?
         BNL   X2BLOOP2                NO, JUMP
         NI    08(R13),X'0F'           A -> X'FA'
         TR    08(1,R13),=X'00,0A,0B,0C,0D,0E,0F'
X2BLOOP2 CLI   1(R1),C'0'              A-F ?
         BNL   X2BLOOP3                NO, JUMP
         NI    09(R13),X'0F'           A -> X'FA'
         TR    09(1,R13),=X'00,0A,0B,0C,0D,0E,0F'
X2BLOOP3 LA    R1,2(,R1)               NEXT PAIR OF INPUT BYTES
         MVO   0(1,R15),08(1,R13)      AA <- 0A05
         MVN   0(1,R15),09(R13)        A5 <- 0A05
         LA    R15,1(,R15)             NEXT OUTPUT BYTE
         BCT   R0,X2BLOOP1             NEXT PAIR OF INPUT BYTES
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Convert binary time to HH MM SS HH                           *
*                                                                     *
*---------------------------------------------------------------------*
BINTIME  SLR   R0,R0
         D     R0,=F'00360000'         GET HOURS
         LR    R3,R1                   HH
         LR    R1,R0                   REMAINDER
         SLR   R0,R0
         D     R0,=F'6000'             GET MINUTES IN R1
         LR    R2,R1                   MM
         LR    R1,R0                   REMAINDER
         SLR   R0,R0
         D     R0,=F'100'              GET SECONDS IN R1
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        Convert TOD clock to local time YYYYMMDD HHMMSSHH            *
*                                                                     *
*        This routine uses the STCKCONV macro which is only available *
*        in MVS/ESA 4.1 and above.  On older systems, use the STCK    *
*        conversion routine found in member LASTCLPA of CBT File 66.  *
*                                                                     *
*---------------------------------------------------------------------*
STCKCONV BAKR  R14,0
         AIF   (NOT D'CVTH4410).STCKC99
         MVC   STCKVAL,0(R1)           move TOD clock value
         AIF   (NOT D'CVTLDTO).STCKC49 OY45447 JBB4422
         TM    HBB4430,L'HBB4430       running under ESA 4.3?
         BZ    STCKC49                 no, jump
         CLI   NEXTLINE,C'.'           Processing dumps?
         BE    STCKC49                 Yes, do not adjust
         L     R15,CVTPTR              point at CVT
         L     R15,CVTEXT2-CVTMAP(,R15) point at CVT extension
         USING CVTXTNT2,R15
         LM    R0,R1,STCKVAL           GET TOD CLOCK VALUE
         AL    R0,CVTLDTO              ADD HI-ORDER WORD
         AL    R1,CVTLDTO+4            ADD LOW-ORDER WORD
         BC    12,*+8                  CARRY? BRANCH IF NOT
         AL    R0,=F'1'                ADD CARRY
         AIF   (NOT D'CVTLSO).STCKC48  OY61432 HBB4420
         SL    R0,CVTLSO               SUBTRACT HI-ORDER WORD
         SL    R1,CVTLSO+4             SUBTRACT LOW-ORDER WORD
         BC    3,*+6                   BORROW? BRANCH IF NOT
         BCTR  R0,0                    SUBTRACT THE BORROW
.STCKC48 DROP  R15                     CVTXTNT2
         STM   R0,R1,STCKVAL           SAVE FOR STCKCONV
STCKC49  EQU   *
.STCKC49 ANOP
         STCKCONV STCKVAL=STCKVAL,     INPUT VALUE (STCK)              X
               CONVVAL=TENWORDS+20,    OUTPUT (TIME/DATE)              X
               DATETYPE=YYYYMMDD,      RETURN DATE AS YYYYMMDD         X
               MF=(E,STCKCONVL)
         STRING                                                        X
               (TENWORDS+20+8,2,X),'-',  YYYY-                         X
               (TENWORDS+20+10,1,X),'-', YYYY-MM-                      X
               (TENWORDS+20+11,1,X),     YYYY-MM-DD                    X
               INTO=STCKDATE
         STRING (TENWORDS+20,1,X),'.',   YYYY-MM-DD  HH.               X
               (TENWORDS+20+1,1,X),'.',  YYYY-MM-DD  HH.MM.            X
               (TENWORDS+20+2,1,X),'.',  YYYY-MM-DD  HH.MM.SS          X
               (TENWORDS+20+3,1,X),      YYYY-MM-DD  HH.MM.SS.HH       X
               INTO=STCKTIME
.STCKC99 ANOP
         PR
*---------------------------------------------------------------------*
*        TABLE SCAN ROUTINE                                           *
*---------------------------------------------------------------------*
*LOOP
SCAN_TM  IC    R15,0(,R1)              PICK UP MASK FOR "TM"
         EX    R15,2(,R14)             EXECUTE TM UNSTRUCTION
         BO    6(,R14)                 FOUND, GOBACK
         AH    R1,0(,R14)              BUMP TABLE PTR
         CLI   0(R1),0                 END OF TABLE?
         BNE   SCAN_TM                 NEXT TABLE ENTRY
*ENDLOOP
         LA    R1,BLANKS               ALL BLANKS
         LTR   R1,R1                   SET CC TO 'Z'
         B     6(,R14)                 NOT FOUND, GOBACK
*---------------------------------------------------------------------*
*        move status flags                                            *
*---------------------------------------------------------------------*
         MVC   0(*-*,R4),1(R14)        execute MVC
$$STATUS LA    R15,0                   do not change CC
         IC    R15,0(,R14)             get length
         BZ    $$STATUS8               flag off, goback
         EX    R15,$$STATUS-6          execute MVC
         LA    R4,2(R15,R4)            bump pointer up
$$STATUS8 LA   R14,2(R15,R14)          return address
         CLI   0(R14),0                alignment byte?
         BNER  R14                     no, goback
         B     1(,R14)                 yes, skip it
*---------------------------------------------------------------------*
*        Retrieve field offset from HASMSDB & HASMBUFR (ESA V4)       *
*---------------------------------------------------------------------*
SCANMODL L     R15,=V(SCANMODL)        EXTERNAL ROUTINE
         TM    HBB4410,L'HBB4410       ESA V4 ?
         BZR   R14                     NO, GOBACK WITH R15<>0
         STM   R0,R1,TENWORDS          PARM LIST
         LA    R1,TENWORDS             PARM LIST
         BR    R15                     go to SCANMODL routine
*---------------------------------------------------------------------*
*        LE                                                           *
*---------------------------------------------------------------------*
CEEARLU  L     R12,PSATOLD-PSA
         L     R12,TCBCELAP-TCB(,R12)
         ICM   R12,B'1111',0(R12)
         BZR   R14
         ICM   R12,B'1111',0(R12)
         BZR   R14
         BR    R12                     returns R12=A(CAA)
         DROP
$FARRTNE LOCTR
         TITLE 'SHOWMVS &REL - Read Routine for BRIF and EDIF'
***********************************************************************
*                                                                     *
*        BRIF READ ROUTINE                                            *
*                                                                     *
*        This routine is invoked by BRIF and returns the address      *
*        of a record.  BRIF invokes it each time the line is          *
*        displayed on the screen, i.e when you scroll UP, DOWN,       *
*        LEFT, RIGHT, or simply hit ENTER.                            *
*                                                                     *
*        It also provides real-time status for on-line devices.       *
*                                                                     *
***********************************************************************
RDRTNE   SAVE  (14,12),,*
         BALR  R12,0
         USING *,R12
         L     R11,BASEREG             =A(BASEADDR)
         USING BASEADDR,R11
         LR    R14,R13                 caller's save area
         L     R13,12(,R1)             PTR TO DIALOG DATA AREA
         L     R13,0(,R13)             A(RCVYSAVE)
         ST    R14,4(,R13)             chain save areas
         ST    R13,8(,R14)             chain save areas
         USING RCVYSAVE,R13
         L     R4,08(,R1)              RELATIVE RECORD NUMBER
         L     R1,0(,R4)               LINE NUMBER REQUESTED BY BRIF
         TM    BRIF_MODE,L'BRIF_MODE   MODE=BROWSE?
         BO    RDRTNE06                YES, JUMP
         LA    R1,1                    NEXT LINE FOR EDIT, HARDCOPY
         AL    R1,CURRECNO             RECORD NUMBER
         ST    R1,CURRECNO             RECORD NUMBER
RDRTNE06 EQU   *
         C     R1,NUMLINES             CHECK FOR END OF DATA
         BH    RDRTNE8                 JUMP IF TOO BIG
         BCTR  R1,0                    DOWN BY 1
         M     R0,=A(L'LINE)           OFFSET TO LAST LINE
         LR    R10,R1                  PASS OFFSET
         AL    R10,LINE1PTR            CHANGE OFFSET TO ADDRESS
         USING LINE,R10
RDRTN10  CLC   =C'.UCB=',LINE_UCB      UCB line?
         BNE   RDRTN12                 no, jump
         BAL   R14,UCB200              yes, refresh
RDRTN12  EQU   *
         CLC   =C'.GTF',LINE           GTF Status line?
         BNE   RDRTN16                 no, jump
         BAL   R14,GTF200              yes, refresh
         LA    R10,WORK256             new line
RDRTN16  EQU   *
         CLC   =C'.PIT=',LINE          JES2 initiator?
         BNE   RDRTN24                 no, jump
         BAL   R14,JES2I200            yes, refresh
         LA    R10,WORK256             new line
RDRTN24  EQU   *
*
         CLC   =C'.CPUTIME',LINE       STEP CPU TIME?
         BNE   RDRTN34                 no, jump
         BAL   R14,CPUT420             yes, refresh
RDRTN34  EQU   *
         CLC   =C'.SPL',LINE           Storage Usage line?
         BNE   RDRTN35                 no, jump
         BAL   R14,SPL200              yes, refresh
RDRTN35  EQU   *
*
RDRTN70  L     R1,4(,R13)              BRIF save area
         L     R1,24(,R1)              BRIF parm-list
         L     R6,00(,R1)              RECORD DATA READ
         ST    R10,0(,R6)              PASS DATA ADDRESS
         TM    PARMCAPS,L'PARMCAPS     PARM=CAPS?
         BNO   *+10                    no, jump
         TR    LINE,TRTPRINT           yes, convert to uppercase
         L     R13,4(,R13)             BRIF save area
         RETURN (14,12),RC=0           GOBACK TO EDIT
*
*        END OF DATA - RETURN MAX LINE#
*
RDRTNE8  L     R1,4(,R13)              BRIF save area
         L     R1,24(,R1)              BRIF parm-list
         L     R4,08(,R1)              RELATIVE RECORD NUMBER
         L     R6,00(,R1)              RECORD DATA READ
         L     R1,NUMLINES             NUMBER OF LINES
         ST    R1,0(,R4)               PASS IT TO BRIF
         BCTR  R1,0                    DOWN BY 1
         M     R0,=A(L'LINE)           OFFSET TO LAST LINE
         LR    R10,R1                  PASS OFFSET
         AL    R10,LINE1PTR            CHANGE OFFSET TO ADDRESS
         ST    R10,0(,R6)              PASS DATA ADDRESS
         L     R13,4(,R13)             BRIF save area
         RETURN (14,12),RC=8
*
         MACRO                                                    MACRO
&NAME    DROPTEMP ,                                               MACRO
         USING PSA,R0,R1,R2,R3,R4,R5,R6,R7,R14,R15
         DROP  R1,R2,R3,R4,R5,R6,R7,R14,R15 RELEASE TEMP BASE REGS
         MEND                                                     MACRO
         TITLE 'SHOWMVS &REL - Refresh status for on-line devices'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh status for on-line devices                           *
*                                                                     *
*---------------------------------------------------------------------*
UCB200   ST    R14,RDRTNR14            save return address
         PACK  WKCELL1,LINE_UCB+5(10)  get address
         CVB   R7,WKCELL1              A(UCBOB)
         USING UCBOB,R7
*
         MVC   WORK256(LINE_UCB-LINE),LINE move first half of line
         LA    R10,WORK256             now point to modified line
         LA    R4,LINE_UCB             message area
         MVC   0(LINE+L'LINE-LINE_UCB,R4),BLANKS
*
*        show VOLSER (DASD/TAPE)
*
         CLI   UCBTBYT3,UCB3TAPE       TAPE?
         BE    UCB220                  YES, JUMP
         CLI   UCBTBYT3,UCB3DACC       DASD?
         BE    UCB220                  YES, JUMP
*
*        Check for a system console
*
         LA    R4,8(,R4)               skip volser slot
         CLI   UCBTBYT3,UCB3DISP       Display device (eg 3270) ?
         BNE   UCB250                  no, JUMP
        #STATUS UCBSTAT,UCBSYSR,'Console'
         B     UCB250                  skip TAPE/DASD section
*
*        TAPE/DASD section
*
UCB220   CLI   UCBVOLI,C' '            VALID VOLSER?
         BNH   UCB249                  NO, JUMP
         MVC   0(6,R4),UCBVOLI         VOLSER FOR TAPE/DASD
         LA    R4,8(,R4)               skip volser
         CLI   UCBTBYT3,UCB3DACC       DASD?
         BNE   UCB240                  NO, JUMP
        #STATUS UCBSTAT,UCBSYSR,'System'
         AIF   (NOT D'DFASMS).SMS4     NOT DFP V3, JUMP
*---------------------------------------------------------------------*
*                                                                     *
*        GET SMS status and storage group                             *
*                                                                     *
*        This section is only generated if you assemble the           *
*        program with a DFP V3 MACLIB.                                *
*                                                                     *
*---------------------------------------------------------------------*
         TM    UCBFL5,UCBSMS           SMS-managed volume?
         BZ    UCB240                  no, jump
         ICM   R3,B'1111',SMS_SSOB     point to the work area
         BZ    UCB240                  not allocated, quit
         USING SMS_WORK,R3
         XC    SMS_WORK(256),SMS_WORK  clear 256 bytes
*
         LA    R2,SSOB_WRK             POINT TO WORK AREA
         USING SSOB,R2
         MVI   SSOBLEN+1,SSOBHSIZ      SSOB length
         MVC   SSOBID,=C'SSOB'         SSOB
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION
         L     R1,CVTPTR               CVT
         L     R1,CVTJESCT-CVTMAP(,R1) JES COMM TABLE
         L     R1,JESCTEXT-JESCT(,R1)  JESCT Extension
         MVC   SSOBSSIB,JESSMSIB-JESPEXT(R1) SMS SSIB
*
         LA    R5,SSSA_WRK             SSSA WORK AREA
         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA
         USING IEFSSSA,R5
         LA    R0,SSSALN+SSSA1LN       LENGTH
         STH   R0,SSSALEN
         MVC   SSSAID,=C'SSSA'         SSSA
         MVI   SSSAVER+1,SSOBSSVR      VERSION
         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE
         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER
*
         MVI   SSSA1TYP,SSSA1VOL       GIVE VOLSER, GET VLD BACK
         MVI   SSSA1CNT+3,1            ONE CONSTRUCT PASSED
         MVI   SSSA1NML+1,L'UCBVOLI    LENGTH OF NAME
         MVC   SSSA1NAM(L'UCBVOLI),UCBVOLI  MOVE VOLUME SERIAL
*
         LH    R0,=Y(SMS_SUB_FUNCTION_WORK_AREA_LENGTH)
         ST    R0,SSSA1LEN             LENGTH OF WORK AREA
         LA    R6,SMS_SUB_FUNCTION_WORK_AREA
         ST    R6,SSSA1PTR             ADDR OF WORK AREA
         USING VLD,R6
*
*        CALL SMS TO GET A VLD (VOLUME RECORD DESCRIPTOR)
*
         LA    R1,SMS_SSOB             SSOB_PTR
         IEFSSREQ                  <== CALL SMS
         LTR   R15,R15                 SSI OK?
         BNZ   UCB240                  NO, jump
         ICM   R15,B'1111',SSOBRETN-SSOB+SSOB_WRK
         BNZ   UCB240                  bad, jump
         DROP  R3,R2,R5                SMS_WORK,SSSA
*
         LH    R1,VLDSGLEN             storage group length
         STRING 'SMS SG=',(VLDSTGRP,(R1)),INTO=((R4),NEXTLINE)
         LA    R15,1(R15,R4)           point past string (actual)
         LA    R4,16(,R4)              point past string (minimum)
         CLR   R4,R15                  SG longer than 8 chars?
         BH    *+6                     no, jump
         LR    R4,R15                  yes, adjust position
*
*        Locate the SMS status byte that corresponds to my own system
*
         LH    R2,OWNSMSSYS            yes, remember it
         LTR   R2,R2                   known?
         BZ    UCB235                  no, use 1st one
         BCTR  R2,0                    make it relative to zero
         SLL   R2,1                    mult by L'VLDNSTAT
UCB235   LA    R2,VLDSMSS(R2)          point at my own VLDSMSS
*
*        SMS volume status
*
         BAL   R1,UCB236               BRANCH AROUND TABLE
         DC    AL1(VLDENBL),C'Enabled     '
         DC     AL1(VLDQUI),C'Quiesced/all'
         DC    AL1(VLDQUIN),C'Quiesced/new'
         DC     AL1(VLDDIS),C'Disabled/all'
         DC    AL1(VLDDISN),C'Disabled/new'
         DC    AL1(00),0H'0'
*--loop
UCB236   CLC   0(L'VLDSMSS,R2),0(R1)   Test SMS status
***????  CLI   VLDSGST,*-*             Test SMS status on this system
         BNE   *+10                    not equal, skip "MVC"
         MVC   0(12,R4),1(R1)          move SMS status
         LA    R1,1+12(,R1)            bump pointer
         CLI   0(R1),0                 end of table?
         BNE   UCB236                  no, try next entry
*--endloop
         LA    R4,13(,R4)              point past status
*
*        display space used & size of largest free extent (LFE)
*
         ICM   R1,B'1111',VLDNTCPY     total capacity
         BZ    UCB260                  prevent S0C9
         S     R1,VLDNFREE             free space
         M     R0,=F'100'              space used * 100
         D     R0,VLDNTCPY             R1 = %USED
         STRING ((R1),,R5B),'% used',                                  X
               ' Largest_Free_Extent(',(VLDNLEXT,F,L),'Mb)',           X
               INTO=((R4),NEXTLINE)
         LA    R4,1(R15,R4)            point past string
         B     UCB260
         DROP  R6                      VLD
.SMS4    ANOP
*
*        VOLSER/MOUNT FOR TAPE, DASD
*
UCB240  #STATUS UCBSTAT,UCBPRES,'Resident'
        #STATUS UCBSTAT,UCBRESV,'Reserved'
        #STATUS UCBSTAB,UCBBPRV,'Private'
        #STATUS UCBSTAB,UCBBPUB,'Public'
        #STATUS UCBSTAB,UCBBSTR,'Storage'
*
*       #STATUS of Automatic Cartridge Loader (ACL)
*
         CLI   UCBTBYT3,UCB3TAPE       TAPE?
         BNE   UCB250                  no, JUMP
         TM    UCBTFL1,UCBCSL          ACL?
         BNO   UCB244X                 no, JUMP
         STRING 'ACL(YES)',INTO=((R4),NEXTLINE)
         TM    UCBTFL1,UCBCSLAC        ACL active?
         BNO   UCB244N                 no, JUMP
         STRING 'ACL(ACT)',INTO=((R4),NEXTLINE)
UCB244N  LA    R4,1(R15,R4)            point past text
UCB244X  EQU   *
*
*        Label type and position: LABEL=(nnn,SL)
*
         ICM   R0,B'1100',UCBFSEQ      fileseq=0?
         BZ    UCB250                  yes, JUMP
         STRING (UCBFSEQ,H,L),',',INTO=((R4),12)
         ALR   R4,R15                  point R4 past string
        #STATUS UCBSTAT,UCBDADI,'SL'
        #STATUS UCBTFL1,UCBNLTP,'NL'
        #STATUS UCBTFL1,UCBNSLTP,'NSL'
        #STATUS UCBTFL1,UCBBLP,'BLP'
        #STATUS UCBSTAB,UCBBSTR,'AL'
         B     UCB250
*
UCB249   LA    R4,8(,R4)               skip volser slot
*
*        SHOW OWNER OF NON-DASD DEVICE
*
UCB250   TM    UCBSTAT,UCBALOC         device allocated?
         BZ    UCB260                  no, jump
        #STATUS UCBSTAT,UCBALOC,'Allocated'
         LA    R15,UCBOB               pass first 8 bits of address
         BAL   R14,GETCMEXT            get addr of common extension
         LTR   R15,R15                 UCB COMMON EXTENSION
         BZ    UCB260                  zero, ignore
         LH    R1,UCBASID-UCBCMEXT(,R15) GET OWNER'S ASID
         LOCASCB ASID=(1)              GET ADDR OF OWNER'S ASCB
         LTR   R15,R1                  VALID ASID?
         BNP   UCB260                  NO, JUMP
         ICM   R1,B'1111',ASCBJBNI-ASCB(R15) JOB name present?
         BNZ   UCB257                  yes, use it
         ICM   R1,B'1111',ASCBJBNS-ASCB(R15) STC/MOUNT/LOGON
UCB257   MVC   0(2,R4),=C'J='          SMS storage group
         MVC   2(8,R4),0(R1)           JOB/STC/TSU name
         LA    R4,11(,R4)              point past string
*
UCB260  #STATUS UCBFLA,UCBNRY,'Not-ready'
        #STATUS UCBFLA,UCBBOX,'Boxed'
        #STATUS UCBFLA,UCBSTRT,'Busy'
****     DEV_STAT FLA,NOPTH,'No Path Available'
        #STATUS UCBFLC,UCBIVRS,'Intervention Required'
*
*        Show info from 3480 message display
*
UCB266   CLI   UCBTBYT3,UCB3TAPE       TAPE?
         BNE   UCB266X                 no, JUMP
         TM    UCBTFL2,UCBTPSF         3480?
         BNO   UCB266X                 no, jump
         SLR   R2,R2
         ICM   R2,B'0111',UCBXTNB      UCB below the line?
         BNZ   UCB266B                 yes, jump
         LA    R2,UCBXTNB+L'UCBXTNB    no, extension is contiguous
UCB266B  EQU   *
         USING UCBMT,R2
         MVC   WKCELL1(L'UCBSER),UCBSER
         TR    WKCELL1(L'UCBSER),TRTPRINT
         CLC   WKCELL1(L'UCBSER),UCBSER is volser printable?
         BNE   UCB266X                 no, ignore it
         TM    UCBMTFL1,UCBMTDSM+UCBMTKEP+UCBMTRET
         BZ    UCB266X                 all zero, jump
        #STATUS UCBMTFL1,UCBMTDSM,'D'  dismount
        #STATUS UCBMTFL1,UCBMTKEP,'K'  keep
        #STATUS UCBMTFL1,UCBMTRET,'R'  retain
         MVC   0(L'UCBSER,R4),UCBSER   previous volser
*
UCB266X  L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh Step CPU Time'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh Step Cpu Time (TSO On-Line Only)                     *
*                                                                     *
*        CPU Time Used: 001H12M07S197.542 (in microseconds)           *
*                                                                     *
*---------------------------------------------------------------------*
CPUT420  ST    R14,RDRTNR14            return address
         LA    R10,WORK256             new line
         L     R8,PSAAOLD-PSA          my ASCB
         USING ASCB,R8
         LM    R0,R1,ASCBEJST          GET ELAPSED JOB TCB TIME
         SRDL  R0,12                   IN MICRO-SECONDS
         LM    R14,R15,ASCBSRBT        GET ELAPSED SRB TIME
         SRDL  R14,12                  IN MICRO-SECONDS
         ALR   R1,R15                  ADD TCB AND SRB TIME
         BNO   *+8                     BRANCH IF NO OVERFLOW
         AL    R0,=F'1'                HANDLE CARRY
         AR    R0,R14                  add hi-order word
*
         D     R0,=F'1000'             time in thousands of a second
         LR    R4,R0                   save remaining micro-seconds
         SLR   R0,R0
         D     R0,=F'1000'             TIME IN SECOND
         LR    R3,R0                   SAVE REMAINING 1/1000
         SLR   R0,R0
         D     R0,=F'60'               TIME IN MINUTES
         LR    R2,R0                   SAVE REMAINING SECONDS
         SLR   R0,R0
         D     R0,=F'60'               TIME IN HOURS
         LA    R5,WORK256+100          work area
         STRING ((R1),,R3Z),'H',((R0),,R2Z),'M',((R2),,R2Z),           X
               'S',((R3),,R3Z),'.',((R4),,R3Z),INTO=((R5),17)
         LR    R0,R15                  length
         LR    R1,R5                   length
CPUT424  CLI   0(R1),C'0'              first significant digit?
         BH    CPUT425                 yes, jump
         LA    R1,1(,R1)               no, bump pointer
         BCT   R0,CPUT424              next character
CPUT425  EQU   *
         STRING 1X,INTO=((R5),(R1))    blank out zeroes
         L     R6,PSATOLD-PSA          MY TCB
         L     R6,TCBTCT-TCB(,R6)      SMFTCT
         USING SMFTCT,R6
         LA    R1,WKCELL1              12-byte work area
         SYSEVENT REQSERVC
         L     R3,ASCBOUXB             OUXB ADDRESS
         USING OUXB,R3
         L     R2,OUXBPIN              PAGE-IN COUNT
         A     R2,OUXBPOUT             + PAGE-OUT COUNT
         A     R2,OUXBCAPI             + COMMON PAGE-IN
         LH    R3,ASCBFMCT             Frame count (XA)
         AIF   (NOT D'CVTOSEXT).RAX1
         TM    HBB3310,L'HBB3310       ESA?
         BZ    *+12                    no, jump
         L     R3,ASCBRSME             RAX ADDRESS
         L     R3,RAXFMCT-RAX(,R3)     Frame count (ESA)
.RAX1    ANOP
         STRING 2X,((R5),17),          001H12M07S197.542 (microseconds)X
               (ASCBIOSC,F,R9B),       EXCP                            X
               (ASCBDCTI,F,R10B),      Connect                         X
               (TCTLIN,F,R7B),         TGET                            X
               (TCTLOUT,F,R7B),        TPUT                            X
               (WKCELL1,F,R11B),       Total Service                   X
               ((R3),,R9B),            Frame count                     X
               ((R2),,R10B),           Paging                          X
               INTO=LINE
         L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh GTF status'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh GTF status                                           *
*                                                                     *
*---------------------------------------------------------------------*
GTF200   ST    R14,RDRTNR14            return address
         L     R8,CVTPTR               CVT address
         USING CVTMAP,R8
         STRING '  GTF is not active on this system',                  X
               INTO=(WORK256,L'LINE)
         TM    CVTGTF,CVTGTFAV         ACTIVE?
         BNO   GTF299                  no, exit
GTF220   MVC   EP10,BLANKS             CLEAR WORK AREA
         TM    CVTGTFST,CVTUSR         TRACE=USR ?
         BNO   GTF221                  No, jump
         STRING (EP10,,T),',USR',INTO=EP10
GTF221   TM    CVTGTFST,CVTRNIO        TRACE=RNIO ?
         BNO   GTF222                  No, jump
         STRING (EP10,,T),',RNIO',INTO=EP10
GTF222   CLI   EP10,C' '               any trace active?
         BNE   GTF224                  yes, jump
         STRING ',none',INTO=EP10
GTF224   EQU   *
         STRING '  GTF Active, TRACE=(',(EP10+1,L'EP10-1,T),')',       X
               INTO=(WORK256,L'LINE)
GTF299   L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh GTF status'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh Storage Usage                                        *
*                                                                     *
*    User SPLS (Below)       4160K    1180K      2980K        1616K   *
*    Auth SPLS (Below)       6060K     580K      5480K         804K   *
*    User SPLS (Above)      32768K    4388K     28380K        4392K   *
*    Auth SPLS (Above)    1998848K   11448K   1987400K       12720K   *
*                                                                     *
*---------------------------------------------------------------------*
SPL200   ST    R14,RDRTNR14            return address
         L     R4,PSATOLD-PSA          TCB
         L     R5,TCBTCT-TCB(,R4)      SMF Timing Control Table
         USING SMFTCT,R5
         L     R6,TCTCRTBL             SMF Storage Control Table
         USING TCTCORE,R6
         L     R7,PSAAOLD-PSA          ASCB
         L     R7,ASCBLDA-ASCB(,R7)    Local Data Area
         USING LDA,R7
         PACK  WKCELL1,LINE+4(2)       LINE='.SPL00'
         LA    R10,WORK256             work area
         CVB   R15,WKCELL1             index into branch table
         B     *+4(R15)                branch to processing
         B     SPL230                  user below
         B     SPL240                  user above
         B     SPL250                  auth below
         B     SPL260                  auth above
*
SPL230   L     R0,LDALIMIT             LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDALOAL              user region current value
         SRL   R1,10                   BYTES -> KILOS
         LR    R2,R0                   LIMIT
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTLWM               high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    User SPLS (Below)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         B     SPL299
*
SPL240   L     R0,LDASIZA              SIZE OF PRIVATE AREA
         SL    R0,LDALIMIT             LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAHIAL              auth region current value
         SRL   R1,10                   BYTES -> KILOS
         LTR   R2,R0                   LIMIT
         BZ    *+6                     region>16M, jump
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTHWM               high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    Auth SPLS (Below)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         B     SPL299
*
SPL250   L     R0,LDAELIM              LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAELOAL             user region current value
         SRL   R1,10                   BYTES -> KILOS
         LR    R2,R0                   LIMIT
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTELWM              high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    User SPLS (Above)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
         B     SPL299
*
SPL260   L     R0,LDAESIZA             SIZE OF PRIVATE AREA
         SL    R0,LDAELIM              LIMIT
         SRL   R0,10                   BYTES -> KILOS
         L     R1,LDAEHIAL             auth region current value
         SRL   R1,10                   BYTES -> KILOS
         LTR   R2,R0                   LIMIT
         BZ    *+6                     region=0M, jump
         SLR   R2,R1                   AVAILABLE
         L     R3,TCTEHWM              high-watermark
         SRL   R3,10                   BYTES -> KILOS
         STRING '    Auth SPLS (Above)  ',                             X
               ((R0),,R11B),'K',       Limit                           X
               ((R1),,R11B),'K',       In-use                          X
               ((R2),,R12B),'K',       Available                       X
               ((R3),,R14B),'K',       High-watermark                  X
               INTO=LINE
SPL299   L     R14,RDRTNR14            return address
         BR    R14
         DROPTEMP                      RELEASE TEMP BASE REGS
         TITLE 'SHOWMVS &REL - Refresh status for JES2 Initiators'
*---------------------------------------------------------------------*
*                                                                     *
*        Refresh status for JES2 Initiators (ESA 4.1 and up)          *
*                                                                     *
*---------------------------------------------------------------------*
JES2I200 BAKR  R14,0
         AIF   (NOT D'CVTH4410).JES2I299
         BALR  R12,0
         USING *,R12
         PACK  WKCELL1,LINE+5(10)      get address
         CVB   R7,WKCELL1              convert to binary
         USING PIT,R7
         LA    R10,WORK256             now point to modified line
         LH    R0,$PITPATID+2          length of PITPATID field
         LH    R1,$PITPATID+0          offset to PITPATID field
         LA    R1,PIT(R1)              addr of PITPATID field
         STRING 2X,((R1),(R0)),INTO=WKCELL1
         LH    R0,$PITCLASS+2          length of PITCLASS field
         LH    R1,$PITCLASS+0          offset to PITCLASS field
         LA    R1,PIT(R1)              addr of PITCLASS field
         STRING ((R1),(R0)),INTO=WKCELL2
         STRING (WKCELL1,7),'Drained  ',WKCELL2,INTO=LINE
         L     R8,PITASCB              ASCB
         USING ASCB,R8
         LTR   R8,R8                   init active?
         BZ    JES2I290                no, exit
*
         L     R9,ASCBASSB             ASSB
         USING ASSB,R9
         L     R9,ASSBJSAB             JSAB
         USING JSAB,R9
         L     R2,PITSJB               SJB address
         USING SJB,R2
         LH    R15,$SJBJCLAS           get offset to job class
         LA    R1,SJB(R15)             change offset to address
         LH    R15,$SJBCSCB            get offset to CSCB address
         L     R2,SJB(R15)             get CSCB address
         USING CHAIN,R2
*
         IC    R5,PITHALT$             halt mask for my JES2
JES2I234TM TM  PITSTAT,*-*             HAS INIT BEEN HALTED ?
*
         MVC   WKCELL3,=C'Inactive'    INDICATE INITIATOR INACTIVE
         EX    R5,JES2I234TM           HAS INIT BEEN HALTED ?
         BZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Halted  '    INDICATE INITIATOR HALTED
         STRING (WKCELL1,7),WKCELL3,1X,                                X
               (WKCELL2,8),1X,         classes                         X
               47X,                    filler                          X
               (ASCBASID,H,R4B),1X,    ASID (decimal)                  X
               (ASCBASID,,X),1X,       ASID (hex)                      X
               INTO=LINE
*
         CLC   JSABJBNM,CHKEY          init busy?
         BNE   JES2I290                no, jump
*
JES2I235 MVC   WKCELL3,=C'Active  '    initialize status field
         EX    R5,JES2I234TM           HAS INIT BEEN HALTED ?
         BZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Halting '    INDICATE INITIATOR HALTING
*
         TM    PITSTAT,PITHOLDA+PITHOLD1 HAS INIT BEEN STOPPED ?
         BZ    *+10                    BRANCH IF NOT
         MVC   WKCELL3,=C'Draining'    INDICATE INITIATOR DRAINING
*
         STRING (WKCELL1,7),WKCELL3,1X,                                X
               (WKCELL2,8),1X,         classes                         X
               JSABJBNM,1X,            job name                        X
               CHSTEP,1X,              step name                       X
               CHPROCSN,1X,            proc-step name                  X
               JSABJBID,1X,            job ID                          X
               ((R1),1),1X,            job class                       X
               JSABUSID,               User ID                         X
               (ASCBASID,H,R5B),1X,    ASID (decimal)                  X
               (ASCBASID,,X),          ASID (hex)                      X
               INTO=LINE
         AIF   (NOT D'CVTH5520).JES2I290
         TM    HBB5520,L'HBB5520       SYSPLEX support?
         BNO   JES2I290                no, jump
         STRING (LINE,,T),2X,JSABGPNM, XCF Group name                  X
               INTO=LINE
.JES2I290 ANOP
JES2I290 TR    LINE,TRTPRINT           clean up non-printable
         DROP  R2,R7,R8,R9             CSCB,PIT,ASCB,JSAB
.JES2I299 ANOP
JES2I299 PR
*@@@     $PIT
PIT      DSECT                     HASP PARTITION INFORMATION TBL DSECT
PITNEXT  DS    A(PIT)              ADDRESS OF NEXT PIT
PITSJB   DS    V(SJB)              ADDRESS OF SJB FOR EXECUTING JOB
PITASCB  DS    V(ASCB)             Address of initiator's ASCB
PITJQOFF DS    V(JQE)              Offset of initiator's JQE
PITFLAGS DS    B                   PIT FLAG BYTE
PITSTAT  DS    B                   LOGICAL PARTITION STATUS BYTE
PITHOLDA EQU   B'10000000'         PIT is drained ($P I)
PITHOLD1 EQU   B'01000000'         PIT is drained ($P IN)
PITHOLDR EQU   B'00100000'         PIT is stopped              HJE4430
PITBUSY  EQU   B'00010000'         Partition busy indicator    HJE4430
PITHALT42 EQU  B'00011000'         PIT is halted               HJE4420
PITHALTA EQU   B'00001000'         PIT is halted ($Z I)        HJE4430
PITHALT1 EQU   B'00000100'         PIT is halted ($Z IN)       HJE4430
PITINIT  EQU   B'00000010'         OS initiator exists for PIT HJE4430
PITIDLE  EQU   B'00000001'         PIT 'Idle' message sent     HJE4430
*@@@     $SJB
SJB      DSECT
$FARRTNE LOCTR
         DROP
***********************************************************************
*                                                                     *
*        RECOVERY ROUTINE                                             *
*                                                                     *
***********************************************************************
RECOVERY LA    R15,0012                R15=12
         CR    R0,R15                  SDWA ALLOCATED?
         BALR  R15,0                   LOCAL BASE
         BNE   RCVY$200-*(,R15)        YES, JUMP
         SR    R15,R15                 SET RC=0 (IF R0=12)
         BR    R14                     RETURN TO EXIT PROLOG
RCVY$200 BALR  R15,0
         SAVE  (14,12),,'RECOVERY ROUTINE'
         BALR  R12,0
         USING *,R12
         LR    R8,R1
         USING SDWA,R8
         LR    R14,R13
         L     R13,SDWAPARM            =A(DYNAM)
         LA    R13,RCVYSAVE-DYNAM(,R13) =A(RCVYSAVE)
         ST    R14,4(,R13)
         ST    R13,8(,R14)
         USING RCVYSAVE,R13
         CLI   RCVYSAVE,X'C4'          abend in VALIDATE macro?
         BE    RCVY$800                yes, retry at R14 with R1=0
         DEVTYPE $NORETRY,RCVYSAVE+16  Check for //$NORETRY DD
         LTR   R15,R15                 //$NORETRY DD present in JCL?
         BZ    RCVY$999                yes, continue with abend
         AIF   (NOT D'CVTOSEXT).RCVY$233
         ICM   R0,B'1111',ALET1        cross-memory active?
         BZ    RCVY$233                no, jump
         ALESERV DELETE,ALET=ALET1,MF=(E,ALESERV2)
         XC    ALET1,ALET1             zero ALET for RCVY rtne
RCVY$233 EQU   *
.RCVY$233 ANOP
         ICM   R4,B'1111',RETRY        LOAD/TEST RETRY ADDRESS
         BNP   RCVY$999                NO RETRY, CONTINUE WITH ABEND
         MVI   RETRY,X'FF'             INVALIDATE RETRY ADDRESS
         LA    R0,CVTMAP-CVTFIX        LENGTH OF CVT PREFIX
         L     R1,CVTPTR               CVT ADDRESS
         SLR   R1,R0                   SUBTRACT PREFIX LENGTH
         ST    R1,SDWASR08             R8=CVTADDR
         MVC   SDWASR09,PSATOLD-PSA    R9=TCBADDR
         MVC   SDWASR11,BASEREG        R11 (BASE REG)
         MVC   SDWASR13,SDWAPARM       R13
         L     R13,4(,R13)             R/TM SAVE AREA
         SETRP WKAREA=(R8),RETADDR=(R4),RC=4,  <== RETRY               X
               FRESDWA=YES,RETREGS=YES,REGS=(14,12)
RCVY$800 MVI   RCVYSAVE,0              reset flag
         L     R4,SDWASR14             return addr is R14
         L     R13,4(,R13)             R/TM SAVE AREA
         SETRP WKAREA=(R8),RETADDR=(R4),RC=4,DUMP=NO,    <== RETRY     X
               FRESDWA=YES,RETREGS=YES,REGS=(14,12)
RCVY$999 L     R13,4(,R13)
         SETRP WKAREA=(R8),REGS=(14,12),RC=00
BASEREG  DC    A(BASEADDR)             BASE REGISTER FOR RECOVERY
$NORETRY DC    C'$NORETRY'             do not retry if ddname in JCL
         DROP
         TITLE 'SHOWMVS &REL - Sub-task'
***********************************************************************
*                                                                     *
*        Sub-task used for asynchronous access to catalogs and vtocs  *
*                                                                     *
*        This sub-task allows impatient users (like me) to see the    *
*        first screen without any delay while volume and vtoc         *
*        information (which require i/o) is obtained for the          *
*        link-list, lpa-list and apf-list displays.                   *
*                                                                     *
*        When the user scrolls to these screens (which takes a few    *
*        seconds), volume and vtoc information will have been obtained*
*        in the background, without the user having to wait.          *
*                                                                     *
*        If a speedy user chains a "find" command to the invocation   *
*        of this program (by issuing "tso showmvs;f lpa-list" for     *
*        example), then he/she will probably get a bunch of question  *
*        marks instead of volume and vtoc information (surprise,      *
*        surprise !!).  After a few seconds of hesitation, this user  *
*        is likely to hit "enter" or scroll (up or down) to see if    *
*        other bizarre things happen, which leaves enough time to the *
*        subtask to finish obtaining the information and replace the  *
*        question marks with pertinent data.                          *
*                                                                     *
***********************************************************************
         USING BASEADDR,R11            LTORG base
SUB_TASK BEGIN_PROC SAVE=NO
         L     R4,PSATOLD-PSA          my TCB
         USING TCB,R4
         USING LINE,R10
         BALR  R12,0                   Local base reg
         USING *,R12
         ICM   R6,B'1111',TCBUSER      authorized?
         BNZ   SUBT005                 yes, jump
         LPR   R6,R1                   A(DYNAM)
         ST    R6,0(,R13)              pass addr to ETXR
         B     SUBT006
         USING DYNAM,R6                main task's DYNAM
SUBT005  EQU   *
         CLC   TCBPKF,PROTKEY          KEY=4 ?
         BE    SUBT006                 no, jump
         MODESET KEYADDR=PROTKEY,WORKREG=2 switch to KEY4 if AUTH=ESR
         LA    R0,DYNAML               length of work-area
         SLR   R1,R1                   LOC=BELOW
         SYNCH STORAGE_SP230,STATE=SUPV,RESTORE=YES
         B     SUBT007
SUBT006  EQU   *
         LA    R0,DYNAML               length of work-area
         GETMAIN R,LV=(0)              work-area for sub-task
SUBT007  EQU   *
         DROP  R6                      main task's DYNAM
*
*        Copy the mother-task's work-area to the sub-task's
*
         LR    R13,R1                  Addr of "to" area
         USING DYNAM,R13               sub-task's DYNAM area
         LR    R14,R1                  Addr of "to" area
         LA    R15,DYNAML              length
         LR    R0,R6                   Addr of "from" area
         LA    R1,DYNAML               length
         MVCL  R14,R0                  move work-area
*
         L     R8,CVTPTR               CVT ADDRESS
         SH    R8,=AL2(CVTMAP-CVTFIX)  point at CVT prefix
         USING CVTFIX,R8               PERMANENT ASSIGNMENT
*
*        Estimate processor speed with a BCTR loop
*
         ICM   R10,B'1111',CPUONLINE   processor speed line
         BZ    SUBT060
         BAL   R15,SUBT043
         MVI   1(R2),X'01'             CHANGE R0,R2 TO R0,R1
         BR    R14
ONETENTH DC    FL4'10'                 TEN 1/100TH OF A SECOND
*
*        Multi-processor Effective Performance Tables
*
*                1   2  3  4  5  6  7  8  9  10    # of CPUs
MIPS9021 DC    H'100,95,91,86,84,80,78,76,74,71'   bipolar
MIPS9672 DC    H'100,83,67,67,60,56'               CMOS
*
SUBT043  STIMER TASK,(R15),BINTVL=ONETENTH
         SLR   R0,R0                   BCTR COUNT
         LA    R2,WKCELL1              WORK AREA
         MVC   WKCELL1(2),=X'0602'     MOVE BCTR R0,R2 INSTRUCTION
         BALR  R1,R2                   EXECUTE LOOP
         LPR   R15,R0                  NUMBER OF ITERATIONS
         CLI   CVTMDL,X'59'            is this an AMDAHL box?
         BNE   SUBT045                 no, jump
         LR    R0,R15                  add 25% if it's an AMDAHL
         SRL   R0,2                    add 25% if it's an AMDAHL
         ALR   R15,R0                  add 25% if it's an AMDAHL
*
SUBT045  L     R14,CPUONLINE+4         # of CPUs on-line
         MR    R14,R14                 iterations * #CPU
         L     R14,CPUONLINE+4         # of CPUs on-line
         ALR   R14,R14                 # of CPUs * 2
         LH    R0,MIPS9021-2(R14)      Effective performance factor
         CLI   CVTMDL,X'96'            CMOS processor?
         BNE   SUBT047                 no, jump
         LH    R0,MIPS9672-2(R14)      yes, use CMOS table
SUBT047  MR    R14,R0                  effective perf * 100
         D     R14,=F'1000000'         .1 MIPS
         CVD   R15,WKCELL1             .1 MIPS
         MVC   WORK256(7),=X'40202021204B20' 0999.9
         ED    WORK256(7),WKCELL1+5    0999.9
         STRING '  Processor Speed: ',(WORK256+2,5),                   X
               ' Million BCTR Instructions per Second.',               X
               INTO=LINE
*
*        LASTCLPA routine
*
SUBT060  L     R2,CVTASMVT             POINT TO ASM VECTOR TABLE
         L     R2,ASMPART-ASMVT(,R2)   POINT TO PAGE ACT REF TABLE
         LA    R3,PARTENTS-PART(,R2)   FIRST PART ENTRY
         USING PARTENT,R3
         L     R4,PAREPATP             ADDRESS OF PAT
         USING PAT,R4
*
*        Read the 1st record on the 1st track of the PLPA data set and
*        translate the "Quick Start" time-stamp at offset 32 (decimal).
*
         ICM   R10,B'1111',CVIOLINE    IPL with CLPA=NO  ?
         BZ    SUBT065                 NO, EXIT
         L     R0,PAREUCBP             UCB address
         LA    R1,PATCCHHB             CCHH of TPARTBLE
         SYNCH K0EXCP,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES, X
               MF=(E,SYNCHL)
         LTR   R15,R15                 EXCP went OK?
         BNZ   SUBT068                 no, issue error message
         LA    R1,WORK256+32           TPARTIME
         BAL   R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING '  Last Quick Start (CVIO) Date: ',STCKDATE,           X
               '   Time: ',(STCKTIME,8),                               X
               INTO=LINE
*
*        Read the 1st record on the 2nd track of the PLPA data set and
*        translate the "Cold Start" time-stamp at offset 24 (decimal).
*
*        Note that this routine only works on 3380 and 3390 DASD.
*        On a 3380, it reads the QSR which is record no 11.
*        On a 3390, it reads the EQSR which is record no 14.
*        The QSR and the EQSR have a similar format: both contain
*        the Cold Start time-stamp at offset 24.
*
SUBT065  ICM   R10,B'1111',CLPALINE    Quick Start?
         BZ    SUBT069                 NO, EXIT
         L     R1,PATCCHHB             CCHH of 1st track
         LA    R1,1(,R1)               change HH to HH+1
         ST    R1,WKCELL4              Store CCHH
         L     R0,PAREUCBP             UCB address
         LA    R1,WKCELL4              QSR (3380) or EQSR (3390)
         SYNCH K0EXCP,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES, X
               MF=(E,SYNCHL)
         LTR   R15,R15                 EXCP went OK?
         BNZ   SUBT068                 no, issue error message
         LA    R1,WORK256+24           QSRSYNCH
         BAL   R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING '  Last Cold Start (CLPA) Date: ',STCKDATE,            X
               '   Time: ',(STCKTIME,8),                               X
               INTO=LINE
         B     SUBT069
SUBT068  EQU   *
         STRING '  ** Error reading PLPA Data Set ** ',                X
               WORK256,INTO=LINE
SUBT069  EQU   *
         DROP  R3,R4                   PARTENT,PAT
*
         L     R10,LINE1PTR            First line
*
*        VOLSER
*LOOP
SUBT111  CLI   VOLSER,C'?'             VOLSER FOUND ALREADY?
         BNE   SUBT121                 YES, JUMP
         MVC   VOLSER,=C'??????'       NOT FOUND
         L     R14,=X'44,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              ENTRY NAME
         SLR   R0,R0                   NO CVOL PTR
         LA    R1,WORK256              WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         LOCATE CAMLST1                GET VOLSER FROM CATALOG
         LTR   R15,R15
         BNZ   SUBT121                 NOT FOUND (OR OTHER ERROR)
         MVC   VOLSER,WORK256+6        MOVE VOLSER
         CLI   CATUNCAT,C'?'           cat/uncat status requested?
         BNE   SUBT121                 no, jump
         MVI   CATUNCAT,C' '           CATALOGED=YES
*UNCAT=UNCAT
SUBT121  CLI   CATUNCAT,C'?'           CATALOG STATUS KNOWN ALREADY?
         BNE   SUBT141                 YES, JUMP
         MVC   CATUNCAT,=C'UNCAT'      MOVE STATUS
         L     R14,=X'44,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              ENTRY NAME
         SLR   R0,R0                   NO CVOL PTR
         LA    R1,WORK256              WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         LOCATE CAMLST1                GET VOLSER FROM CATALOG
         LTR   R15,R15
         BNZ   SUBT141                 NOT FOUND (OR OTHER ERROR)
         CLC   VOLSER,WORK256+6        SAME VOLSER?
         BNE   SUBT141                 NO, JUMP
         MVC   CATUNCAT,BLANKS         CATALOGED=YES
*
SUBT141  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         BNE   SUBT111                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 2: CROSS-REFERENCE LNK/LPA/APF TABLE ENTRIES
*
         L     R10,LINE1PTR            First line
*
*        UNCAT=APF
*LOOP
SUBT201  CLI   LINE_APF,C'?'           LNK/LPA/APF STATUS REQUIRED?
         BNE   SUBT209                 NO, JUMP
         LM    R15,R1,APFTABLE         APF TABLE
         BAL   R14,SUBT820             SCAN APFTABLE
         DC    C'APF '                 LITERAL
         MVC   LINE_APF,0(R1)          LITERAL OR SPACES
         CLI   LINE_LNK,C' '           UNCAT APFLST ENTRY?
         BNE   SUBT209                 YES, JUMP
*
*        LNK=LPA
*
         LM    R15,R1,LPATABLE         LPA TABLE
         BAL   R14,SUBT820             SCAN APFTABLE
         DC    C'LPA '                 LITERAL
         MVC   LINE_LPA,0(R1)          LITERAL OR SPACES
*
*        LPA=LNK
*
         LM    R15,R1,LNKTABLE         LNK TABLE
         BAL   R14,SUBT820             SCAN APFTABLE
         DC    C'LNK '                 LITERAL
         MVC   LINE_LNK,0(R1)          LITERAL OR SPACES
*
SUBT209  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         BNE   SUBT201                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 3: DETECT TIOT DATA SETS IN LPALST OR LNKLST
*
         ICM   R10,B'1111',TIOTLINES   First TIOT line
         BZ    SUBT400                 empty, exit
*
*        TIOT=LPA
*LOOP
SUBT301  LM    R15,R1,LPATABLE         LPA TABLE
         BAL   R14,SUBT830             SCAN APFTABLE
         DC    C'LPA '                 LITERAL
         STRING (LINE,,T),1X,((R1),4),INTO=LINE  append 'LPA' or blanks
*
*        TIOT=LNK
*
SUBT302  LM    R15,R1,LNKTABLE         LNK TABLE
         BAL   R14,SUBT830             SCAN APFTABLE
         DC    C'LNK '                 LITERAL
         STRING (LINE,,T),1X,((R1),4),INTO=LINE  append 'LNK' or blanks
*
SUBT309  LA    R10,LINE+L'LINE     <== NEXT LINE
         CL    R10,TIOTLINES+4         LAST LINE?
         BL    SUBT301                 NO, LOOP MORE
*ENDLOOP
*
*        PASS 4: READ F1-DSCB TO DISPLAY CREATION DATE
*                THIS PASS TAKES THE LONGEST AND IS DONE LAST
*
SUBT400  L     R10,LINE1PTR            First line
         SLR   R6,R6                   extent counter
*LOOP
SUBT401  CLI   YYYYMMDD,C'?'           DATE FOUND ALREADY?
         BNE   SUBT409                 YES, JUMP
         MVC   YYYYMMDD,BLANKS         BLANK OUT DATE FIELD
         CLC   VOLSER,=C'MIGRAT'       Has HSM migrated the data set?
         BE    SUBT408M                Yes, jump
         L     R14,=X'C1,00,00,00'     CAMLST FLAGS
         LA    R15,DSNAME              DATA SET NAME
         LA    R0,VOLSER               VOLUME SERIAL
         LA    R1,DS1FMTID             WORK AREA
         STM   R14,R1,CAMLST1          BUILD CAMLIST
         OBTAIN CAMLST1                READ F1-DSCB
         LTR   R15,R15
         BNZ   SUBT409                 NOT FOUND (OR OTHER ERROR)
         LA    R1,DS1CREDT             creation date: X'50,000B'
         BAL   R14,DSCBDATE            convert to X'00800011F'
         STRING (WKCELL1+4,P,YYYYMMDD),INTO=YYYYMMDD CONVERT DATE
         CLI   LINE_REFD,C'?'          last-referenced date needed?
         BNE   SUBT406                 no, jump
         LA    R1,DS1REFD              last-ref date: X'50,000B'
         BAL   R14,DSCBDATE            convert to X'00800011F'
         STRING (WKCELL1+4,P,YYYYMMDD),INTO=LINE_REFD CONVERT DATE
*
*        Check if the data set specified in the APF-list
*        with *SMS* is really an SMS-managed volume
*
         AIF   (NOT D'CVTDYAPF).SUBT406
         CLC   =C'*SMS*',LINE_APFVOL   APF entry for SMS-managed DS ?
         BNE   SUBT406                 no, jump
         XC    VOLSER,LINE_APFVOL      swap *SMS* and actual volser
         XC    LINE_APFVOL,VOLSER      swap *SMS* and actual volser
         XC    VOLSER,LINE_APFVOL      swap *SMS* and actual volser
         XC    WORK256,WORK256         clear work area
         LA    R2,WORK256              100-byte work area for UCBSCAN
         LA    R7,100(,R2)             48-byte UCB area
         UCBSCAN COPY,                                                 X
               VOLSER=LINE_APFVOL,     volser                          X
               DEVCLASS=DASD,          device class                    X
               DYNAMIC=YES,            DYNAMIC=NO & DYNAMIC=YES        X
               RANGE=ALL,              3-digit & 4-digit               X
               WORKAREA=(R2),          100-byte work area              X
               UCBAREA=(R7),           48-byte UCB area                X
               MF=(E,UCBSCANL,COMPLETE)
         LTR   R1,R15                  UCBSCAN OK?
         BNZ   SUBT406                 no, jump
         TM    UCBFL5-UCBOB(R7),UCBSMS SMS-managed volume?
         BO    SUBT406                 yes, jump
         STRING 'NOSMS',INTO=CATUNCAT  volume is not SMS-managed
.SUBT406 ANOP
SUBT406  EQU   *
         CL    R10,LNKTABLE+0          LINK-LIST?
         BL    SUBT407                 NO, JUMP
         CL    R10,LNKTABLE+8          LINK-LIST?
         BH    SUBT407                 NO, JUMP
         STRING (DS1NOEPV,FL1,R3B),INTO=(LINE+85,3)
         SLR   R0,R0
         IC    R0,DS1NOEPV
         ALR   R6,R0                   Tally allocated extents
*
SUBT407  CLI   CATUNCAT,C'%'           SYS1.DUMPxx ?
         BNE   SUBT409                 NO, JUMP
         MVC   CATUNCAT(5),=C'Empty'   NO, TELL IT
         ICM   R0,B'0011',DS1LSTAR     DATA SET FULL?
         BZ    SUBT409                 NO, JUMP
         MVC   CATUNCAT(5),=C'Full '   PRIME STATUS
         AIF   (NOT D'CVTH4410).SUBT408
*
*        Read dump title from sys1.dump data set
*
         TM    AUTHORIZED,L'AUTHORIZED am I authorized?
         BZ    SUBT409                 NO, JUMP
         CLI   NEXTLINE,C'.'           next line empty ?
         BNE   SUBT409                 NO, JUMP
         STRING '    Title=(none)',INTO=NEXTLINE
         UCBLOOK NOPIN,                do not pin the UCB              X
               VOLSER=VOLSER,          volume serial                   X
               UCBPTR=WKCELL2,         UCB addr                        X
               DYNAMIC=YES,            search static and dynamic UCBs  X
               MF=(E,WORK256,COMPLETE)
         LTR   R15,R15                 UCB located?
         BNZ   SUBT409                 NO, JUMP
         L     R0,WKCELL2              addr of the UCB
         LA    R1,DS1EXT1+2            CCHH of first track
         SYNCH K0EXCP,STATE=SUPV,KEYADDR=PROTKEY,AMODE=31,RESTORE=YES, X
               MF=(E,SYNCHL)
         LTR   R15,R15                 EXCP went OK?
         BNZ   SUBT409                 no, issue error message
         LA    R1,WORK256+188          time stamp at offset 188
         BAL   R14,STCKCONV            convert it to yyyymmddhhmmsshh
         STRING '    Date=',STCKDATE,                                  X
               ' Time=',(STCKTIME,8),                                  X
               ' Title=',(WORK256+88,100),                             X
               INTO=NEXTLINE
.SUBT408 ANOP
         B     SUBT409                 next data set
*
SUBT408M MVC   CATUNCAT,BLANKS         full/empty status unknown
         CLI   NEXTLINE,C'.'           next line empty ?
         BNE   SUBT409                 NO, JUMP
         STRING '    Data set has been migrated',INTO=NEXTLINE
*
SUBT409  LA    R10,LINE+L'LINE     <== NEXT LINE
         CLI   LINE,00                 LAST LINE?
         BNE   SUBT401                 NO, LOOP MORE
*ENDLOOP
         ICM   R10,B'1111',LINKXTNT    link-list hdr line
         BZ    SUBT799                 zero, jump
         STRING (LINE,,T),' (',((R6),,L),' allocated)',INTO=LINE
SUBT799  EXIT                          GOOD BYE
*---------------------------------------------------------------------*
*        Sub-routine: convert DS1CREDT to CVTDATE format              *
*---------------------------------------------------------------------*
DSCBDATE SLR   R0,R0
         ICM   R0,B'0001',0(R1)        CREATION YEAR
         CVD   R0,WKCELL1
         ICM   R0,B'0011',1(R1)        CREATION DAY
         SLR   R1,R1
         ICM   R1,B'0011',WKCELL1+6    ....YYYC
         SRL   R1,4                    ....0YYY
         CVD   R0,WKCELL1              0000DDDC
         STH   R1,WKCELL1+4            0YYYDDDC
         BR    R14
*---------------------------------------------------------------------*
*        Sub-routine: cross-reference LNK/LPA/APF table entries       *
*---------------------------------------------------------------------*
SUBT820  LTR   R15,R15                 TEST
         BZ    SUBT888                 TEST
*--LOOP
SUBT821  CLC   DSNAME,DSNAME-LINE(R15) MY DSNAME?
         BNE   SUBT824                 NO, JUMP
         CLC   VOLSER,VOLSER-LINE(R15) MY VOLSER?
         BE    SUBT888                 YES, QUIT
SUBT824  BXLE  R15,R0,SUBT821          NEXT ENTRY
*--ENDLOOP
         B     SUBT887
*---------------------------------------------------------------------*
*        Sub-routine: show LNK/LPA status for TIOT entries            *
*---------------------------------------------------------------------*
SUBT830  LTR   R15,R15                 TEST
         BZ    SUBT888                 TEST
*--LOOP
SUBT831  CLC   LINE_DSN2,DSNAME-LINE(R15) MY DSNAME?
         BNE   SUBT834                 NO, JUMP
         CLC   LINE_VOL2,VOLSER-LINE(R15) MY VOLSER?
         BE    SUBT888                 YES, QUIT
SUBT834  BXLE  R15,R0,SUBT831          NEXT ENTRY
*--ENDLOOP
SUBT887  LA    R1,BLANKS               APF=NO
         B     4(,R14)
SUBT888  LR    R1,R14                  APF=YES
         B     4(,R14)
*---------------------------------------------------------------------*
*                                                                     *
*        KEY=ZERO EXCP                                                *
*                                                                     *
*        Build DCB, DEB, IOB and channel program to read 256 bytes    *
*        of data using the UCB addr and CCHH passed by caller.        *
*        EXCP is issued in KEY=ZERO which requires no OPEN.           *
*                                                                     *
*        This code is used to read the following data sets:           *
*          1. PLPA paging data set (to get date of last CLPA)         *
*          2. SYS1.DUMPxx (to get dump title)                         *
*                                                                     *
*---------------------------------------------------------------------*
K0EXCP   L     R1,0(,R1)               load CCHH
         STM   R0,R1,WKCELL1           save UCB address and CCHH
         LA    R5,DCB_IOB_DEB          work area (DCB)
         USING IHADCB,R5
         MVI   DCBMACF1,X'D0'          MACRF=E
         MVI   DCBMACF2,X'08'          MACRF=E
         MVI   DCBOFLGS,DCBOFOPN       DCB is OPEN
*
         LA    R0,IOBSTDRD             IOB addr
         ST    R0,DCBIOBAD             store IOB addr into DCB
         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL flags
         LA    R0,WKCELL1              I/O ECB
         ST    R0,IOBECBPT             I/O ECB
         ST    R5,IOBDCBPT             STORE DCB ADDR INTO IOB
         STCM  R1,B'1111',IOBSEEK+3    Store CCHH into IOB
         MVI   IOBSEEK+7,1             R=1
*
         LA    R6,END_OF_IOB           work area (DEB)
         USING DEBAVT,R6
         LA    R14,CVTBRET             dummy appendage routine
         LR    R15,R14                 dummy appendage routine
         LR    R0,R14                  dummy appendage routine
         LR    R1,R14                  dummy appendage routine
         LR    R2,R14                  dummy appendage routine
         STM   R14,R2,DEBAVT           Appendage Vector Table
         MVI   DEBAMLNG,16             length of access method section
         MVI   DEBNMEXT,1              number of extents in DEBDASD
         ST    R5,DEBDCBAD             STORE DCB ADDR INTO DEB
         MVZ   DEBPROTG,PROTKEY        protection key into DEB
         OI    DEBDEBID,X'0F'          DEB identifier
         ST    R6,DEBAPPAD             addr of Appendage Vector Table
         MVI   DEBEXSCL,4              lngth of DASD section (16 bytes)
         LA    R0,DEBBASIC             DEB basic section
         ST    R0,DCBDEBAD             Store DEB addr into DCB
         ST    R9,DEBTCBAD             Store TCB addr into DEB
         LA    R7,DEBBASND             end of basic section
         USING DEBDASD,R7
         LM    R0,R1,WKCELL1           reload UCB address and CCHH
         ST    R0,DEBUCBAD             Store UCB address
         MVI   DEBDVMOD,X'58'          file mask: no write, no seek
         STCM  R1,B'1111',DEBSTRCC     store begin CCHH
         STCM  R1,B'1111',DEBENDCC     store end CCHH
         MVI   DEBNMTRK+1,1            single-track extent
         LA    R0,CCW2                 work area for CCWs
         ST    R0,IOBSTART             start of channel program
         LA    R14,IOBSEEK+3           seek addr
         LA    R15,5                   length of search arg
         LA    R0,CCW2                 search ccw
         LA    R1,1                    non-zero value
         LA    R2,WORK256              work-area
         LA    R3,L'WORK256            data length
         STM   R14,R3,CCW2             build CCW chain
         MVI   CCW2,X'31'              Command: search ID equal
         MVI   CCW2+4,X'40'            flags: CC
         MVI   CCW3,X'08'              Command: TIC
         MVI   CCW4,X'0E'              Command: Read data
         MVI   CCW4+4,X'20'            flags: SLI
         MVI   WKCELL1,0               clear ECB
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to KEY=0 for EXCP
         EXCP  IOBSTDRD                issue EXCP in key=0
         MODESET KEYREG=(2)            switch back to own key
         WAIT  1,ECB=WKCELL1           wait for completion
         SLR   R15,R15                 RC=0
         CLI   WKCELL1,X'7F'           read OK?
         BE    K0EXCP99                yes, exit
         STRING 'CC=',(WKCELL1,1,X),   ECB CC                          X
               ' CSW=',(IOBCSW,,X),                                    X
               ' UCB=',(DEBUCBAD+1,3,X),                               X
               ' CCHHR=',(IOBSEEK+3,5,X),                              X
               INTO=WORK256
K0EXCP99 EXIT
         DROP
         IKJENDP
*---------------------------------------------------------------------*
*        DESCRIPTION OF A PRINT LINE                                  *
*---------------------------------------------------------------------*
         DSECT
LINE     DS    CL&LINESIZE             CURRENT LINE
DSNAME    EQU  LINE+2,44
VOLSER    EQU  LINE+2+44+3,6
DEVTYPE   EQU  LINE+2+44+3+6+3,8
YYYYMMDD  EQU  LINE+2+44+3+6+2,8       YYYYMMDD
CATUNCAT  EQU  LINE+2+44+3+6+2+8+2,5   UNCAT
LINE_LNK  EQU  CATUNCAT+0,3            LNK
LINE_LPA  EQU  LINE_LNK+5,3            LPA
LINE_APF  EQU  LINE_LPA+5,3            APF
LINE_REFD EQU  LINE_APF+5,8            DS1REFD
LINE_APFVOL EQU LINE_REFD+10,6         APF Volume or SMS
NEXTLINE DS    CL(L'LINE)              NEXT LINE
*---------------------------------------------------------------------*
*        DYNAMIC STORAGE AREA (RMODE=ANY)
*---------------------------------------------------------------------*
DYNAM    DSECT                         DYNAMIC STORAGE AREA
         DS    18F                     SAVE AREA FOR MAINLINE
PARMADDR DS    A                       ADDR OF CALLER'S PARM OR CBUF
UNPROTWK DS    A,F                     addr of unprotected work area
RCVYSAVE DS    18F                     SAVE AREA FOR RECOVERY ROUTINE
SWITCHES DS    XL8                     various switches and flags
        #SWITCH INIT_DONE              INITIALIZATION DONE
        #SWITCH AUTHORIZED             Running Authorized
        #SWITCH AUTH_ESR               Authorized by IGX00GSF or ISFSVC
        #SWITCH PGM_INVOKED            invoked as a program (PARM)
        #SWITCH CMD_INVOKED            invoked as a TSO command (CPPL)
        #SWITCH NON_TSO                address-space type
        #SWITCH TSO_ON_LINE            address-space type
        #SWITCH TSO_BATCH              address-space type
        #SWITCH ISPF_AVAILABLE         ISPF services are available
        #SWITCH BRIF_MODE              output using BRIF
        #SWITCH EDIF_MODE              output using EDIF
        #SWITCH HARDCOPY               BRIF/HARDCOPY switch
        #SWITCH PUTLINE                PUTLINE
        #SWITCH SHORT_PUTLINE          SHORT_PUTLINE
        #SWITCH PARMCAPS               PARM=CAPS
        #SWITCH SUB_TASK_REQUESTED     ATTACH requested
        #SWITCH SUB_TASK_ATTACHED      ATTACH successful
        #SWITCH MSTJCL_PARMLIB         Master JCL in PARMLIB
        #SWITCH HBB3310                ESA 3.1
        #SWITCH JBB3313                ESA 3.1.3
        #SWITCH HBB4410                ESA 4.1
        #SWITCH HBB4420                ESA 4.2
        #SWITCH JBB4422                ESA 4.2.2
        #SWITCH HBB4430                ESA 4.3
        #SWITCH HBB5510                ESA 5.1
        #SWITCH HBB5520                ESA 5.2
        #SWITCH JBB5522                ESA 5.2.2
        #SWITCH HBB6601                OS/390 R1
        #SWITCH JBB6602                OS/390 R2
        #SWITCH HBB6603                OS/390 R3
        #SWITCH JBB6604                OS/390 R4
        #SWITCH HBB6605                OS/390 R5
        #SWITCH HBB6606                OS/390 R6
        #SWITCH JBB6607                OS/390 R7
        #SWITCH HBB6608                OS/390 R8
        #SWITCH JBB6609                OS/390 R9
        #SWITCH HBB6610                OS/390 R10
        #SWITCH JDZ1110                DFSMS/MVS is on the system
        #SWITCH HDZ11B0                DFSMS/MVS 1.2.0
        #SWITCH HDZ11C0                DFSMS/MVS 1.3.0
        #SWITCH HDZ11D0                DFSMS/MVS 1.4.0
        #SWITCH HDZ11E0                DFSMS/MVS 1.5.0
        #SWITCH SHASMIG                SYS1.SHASMIG available
*
WKCELL1  DS    D                       WORK AREA
WKCELL2  DS    D                       WORK AREA
WKCELL3  DS    D                       WORK AREA
WKCELL4  DS    D                       WORK AREA
TENWORDS DS    10F                     WORK AREA
PARSE_ANSWER DS A                      A(IKJPARMD)
OLDPICA  DS    A                       Old SPIE/ESPIE pointer
JSTCB    DS    A(TCB)                  ADDRESS OF THE JOB-STEP TCB
OWN_CDE  DS    A(CDENTRY)              my own CDE or LPDE
OWN_NAME DS    C'SHOWMVS '             my own name
PRISUBNM DS    C'JES2'                 name of primary sub-system
PRISUBTY DS    C'JES2'                 type of primary sub-system
PRISUBCT DS    A(SSCT)                 SSCT of primary sub-system
JES2ASCB DS    A(ASCB)                 addr of JES2's ASCB
ALPACDE1 DS    A(CDENTRY)              first CDE on ALPAQ or DLPAQ
JCLPARM  DS    CL16                    caller's parm
*
END_PROC DS    2A                      RETURN/RETRY ADDRESS
RETRY    EQU   END_PROC+4,4,C'A'       RETRY ADDRESS
RDRTNR14 DS    A(R14)                  RETURN ADDRESS
NUMLINES DS    F                       NUMBER OF LINES
CURRECNO DS    F                       current record number (EDIF)
IEFEB4UV DS    V(IEFEB4UV)             UNITNAME CONVERSION RTNE
ISPQRY@  DS    V(ISPQRY)               ISPF DIALOG INTERFACE
ISPLINK  DS    V(ISPLINK)              ISPF DIALOG INTERFACE
IGCERROR DS    V(IGCERROR)             Undefined SVC rtne
IGDSSIVT DS    V(IGDSSIVT)             SMS IVT
IFAEDLIS DS    V(IFAEDLIS)             Product Enable/Disable
IGWASMS  DS    V(IGWASMS)              SMS-Callable service         +RS
IGWLSHR  DS    V(IGWLSHR)              SMS-Callable service         +RS
ACF2CVT  DS    V(ACCVT)                ACF2 CVT
DSNALI   DS    V(DSNALI)               DB2-Interface                +RS
ECVT@    DS    V(ECVT)                 Addr of Extended CVT
CSVT@    DS    V(CSVT)                 Addr of CSVT
TSB@     DS    V(TSB)                  TSO TSB
ECT@     DS    V(ECT)                  TSO ECT
UPT@     DS    V(UPT)                  TSO UPT
LWA@     DS    V(LWA)                  TSO LWA
PSCB@    DS    V(PSCB)                 TSO PSCB
UNITNAME DS    CL8,XL4,XL4,XL4,XL8     IEFEB4UV
GETUREGS DS    A(R14,R15,R0,R1,R2)     save area
*
ZENVIR   DS    CL32'ISPF 3.2'          ISPF ENVIRONMENT
ZPDFREL  DS    C'PDF V3.2'             ISPF/PDF version
ZAPPLID  DS    C'1234'                 Current APPLID
ZSCREENW DS    F'80'                   current screen width (ISPF)
ISPFVARS EQU   ZENVIR,*-ZENVIR         for MVCK
*
NEWAPPL  DS    C'1234'                 Current APPLID
EP10     DS    CL10                    SVC TABLE
UCB_NAME DS    C'1234'                 4-character device number (ESA5)
STATUS   DS    C'OLD'                  DATA SET STATUS
OWNSMSSYS DS   H                       pos of own system in BCD array
SUBSYSNO DS    H                       number of sub-systems
DB2_TECB DS    F                       Dummy for Terminate ECB     +RS
DB2_SECB DS    F                       Dummy for Startup ECB       +RS
DB2_RIB  DS    F                       Release Information Block   +RS
DB2_RET  DS    F                       Release Information Block   +RS
DB2_RES  DS    F                       Release Information Block   +RS
DB2_REQ  DS    CL12                    Name of CAF service         +RS
IGX00NNN DS    H                       Extended SVC number
$SJBCSCB DS    H                       offset to CSCB addr in SJB
$SJBJCLAS DS   H                       offset to job class in SJB
$PITPATID DS   H,H                     offset/len of partition ID
$PITCLASS DS   H,H                     offset/len of classses
PHYSICAL_LPAD DS H                     addr of first CPU
OWN_LPAR DS    XL1                     LPAR # if running under PR/SM
AUTH_RC  DS    FL1                     R15 from SVC109
FAILCODE DS    FL1                     Failure code
KEY4     EQU   4
PITHALT$ DS    XL(L'PITSTAT)           PITHALTA+PITHALT1
BLDLDCB  DS    X                       LINKLIST/TASKLIB DCB
SWAREQL1 SWAREQ MF=L                   WORK AREA FOR SWAREQ
ATTACHL  ATTACH SF=L                   WORK AREA FOR ATTACH
SYNCHL   SYNCH MF=L                    WORK AREA FOR SYNCH
SNAPREGS DS    A(14,15,0,1,2,3,14,15)
TRTPRINT DS    XL256                   printable characters
TRTDOTS  DS    XL256                   printable characters
BLANKS   DS    CL(L'LINE)              A BUNCH OF BLANKS
SUB_ECB1 DS    F,A(TCB)                sub-task ECB
SMS_SSOB DS    A,F                     SSOB_WRK (SMS only)
LINE1PTR DS    A(LINES),F              addr/length of lines buffer
PROTKEY  DS    X                       KEY=4 if AUTH=ESR, else KEY=8
OLDPKF   DS    X                       copied from TCBPKF
CPUONLINE DS   A(LINE),F'100'          Number of cpu's on-line
CVIOLINE DS    A(LINE)                 IPL with CVIO=NO
CLPALINE DS    A(LINE)                 IPL with CLPA=NO
LNKTABLE DS    A(LINE,L'LINE,NEXTLINE) LNK-LIST
LPATABLE DS    A(LINE,L'LINE,NEXTLINE) LPA-LIST
APFTABLE DS    A(LINE,L'LINE,NEXTLINE) APF-LIST
LINKXTNT DS    A(LINE)                 link-list header line
TIOTLINES DS   A(LINE,LINE)            TIOT Display lines
*
BLDLWORK DS    0F,AL2(1,L'CSVDWORK)    prefix for BLDL
         IHAPDS DSECT=NO,PDSBLDL=YES   PDS Directory
CSVDWORK EQU   BLDLWORK,*-BLDLWORK     Work area for CSVDSN routine
*
STIDP_WORKAREA DS 0D                   STIPD output area
STIDP_VERSION DS X'D4'                 Version Code
STIDP_SERIAL DS 0X'123456'             Serial number
STIDP_LPARID DS X'01'                  LPAR ID
         DS    XL2                     last 2 bytes of serial number
STIDP_MODEL DS X'3090'                 Same as CVTMDL
         DS    X'0000'                 not used
*
ESTAEL   ESTAE MF=L
PUTLINEL PUTLINE MF=L
WASTAX   STAX  STAX00,REPLACE=NO,MF=L
STCKDATE DS    C'YYYY-MM-DD'
STCKTIME DS    C'HH.MM.SS.HH'
         AIF   (NOT D'CVTOSEXT).ESA4S
ALESERV2 ALESERV MF=L
ALET1    DS    1F                      ALET
         AIF   (NOT D'CVTH4410).ESA4S
STCKCONVL STCKCONV MF=L
STCKVAL  DS    D
         IXCQUERY MF=(L,IXCQRYWK)                                  @RS
SIZEEXAA DS    F                       Size of answer area
         AIF   (NOT D'CVTH4430).ESA4S
         CSVAPF MF=(L,CSVAPF1)
         AIF   (D'CVTJ6604).OW35877Q
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=2
         AGO   .OW35877X
.OW35877Q ANOP                     << parm-list is too short in JBB6604
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=MAX
.OW35877X ANOP
         UCBSCAN MF=(L,UCBSCANL)
         AIF   (NOT D'CVTH5510).ESA4S
IOSCMXA_UCBPTR DS A(UCBOB)
IOSCMXA_UCBCXPTR DS A(UCBCMEXT)
         IOSCMXA MF=(L,IOSCMXA_PARMLIST)
         AIF   (NOT D'CVTDYNEX).ESA4S
*      Data declarations for List information about all exits in system
EXAA@    DS    A                       Address of answer area
TEMPSIZE DS    F                       Temporary
MODLEN   EQU   40*EXAAM_LEN            Room for 40 routines' info's
EXLEN    EQU   20*EXAAE_LEN            Room for 20 exits' information
INITEXAA EQU   EXAAHDR_LEN+MODLEN+EXLEN Initial size of answer area
EXITSTAT DS    CL6                     EXIT status
EXITAMOD DS    CL3                     EXIT AMODE
         CSVDYNEX MF=(L,CSVDYNEXL)
         AIF   (NOT D'CVTH5520).ESA4S
         IWMCQRY MF=(L,IWMCQRY)
         IWMPQRY MF=(L,IWMPQRY)
         IXCMG MF=(L,IXCMG)                                        +JWM
         IXLMG MF=(L,IXLMGWK)                                      +DL
QUERYLEN DS    F
WLM_AREA DS    0F
ANSAREA  DS    A                       address of IWMPQRY out put
ANSLEN   DS    F                       length of IWMPQRY out put
QUACF_AREA DS  0F                      addr + len of QUAHDR & QUACF+DL
QUCF_ANS DS    A                       address of QUAHDR  out put  +DL
QUCF_LEN DS    F                       length of QUAHDR  out put   +DL
XCFLEVEL DS    F                       max CF operational level    +DL
         AIF   (NOT D'CVTPARMC).ESA4S  JBB6602
         IEFZPMAP DSECT=NO             Dynamic Parmlib
         AIF   (NOT D'CVTH6603).ESA4S  OS/390 R3?
         CSVDYNL MF=(L,CSVDYNL)
         ATRQUERY MF=(L,ATRQUERYL)
         IEAMETR MF=(L,ETRAREA)                                    +JWM
         AIF   (NOT D'CVTJ6604).ESA4S  OS/390 R4?                  +RS
         CSVRTLS MF=(L,RTLS)           CSVRTLS                     +RS
.ESA4S   ANOP
*
LRETCODE DS    F                       Return code
LRSNCODE DS    F                       Reason code
PDATA    DS    XL16
PDATA_DDN EQU PDATA+8,8,C'C'           DDNAME
PDATA_TTRN EQU PDATA+4,4,C'X'          TTRN
PID      DS    XL4
MODTOKEN DS    XL8
PDATA_DSN DS   CL44
         DS    0D
WORK512  DS    XL512                   512-BYTE WORK AREA
         ORG   WORK512
WORK256  DS    XL256,2D                265-BYTE WORK AREA
CAMLST1  CAMLST NAME,DSNAME,VOLSER,WORK256 LOCATE/OBTAIN
         IECSDSL1 1                    F1-DSCB
WORK44   DS    XL44                    PADDING FOR OBTAIN
         ORG   ,                       WORK512
*
DCB_IOB_DEB DS 0D
         DS    XL(END_OF_IOB-IHADCB)   DCB+IOB
         DS    XL(DEBBASND-DEBAVT)     DEB AVT+PREFIX+BASIC
         DS    XL(DEBDASDE-DEBDASD)    DEBDASD+CCW
CCW2     CCW   X'31',IOBSEEK+3,0,0     search CCW
CCW3     CCW   X'08',CCW2,0,1          TIC CCW
CCW4     CCW   X'0E',WORK256,0,256     read CCW
DYNAML   EQU   *-DYNAM                 LENGTH OF DYNAMIC STORAGE AREA
*---------------------------------------------------------------------*
LINES    DSECT
         DS    &NUMLINES.CL(L'LINE)    LINES FOR BRIF
         ORG   LINES+((*+4096-1-LINES)/4096)*4096
LINESL   EQU   *-LINES                 LENGTH OF LINES buffer
         PRINT NOGEN                   SAVE PAPER
PRINT    OPSYN ANOP                    SHUT'EM UP
EXTRN    OPSYN WXTRN                   ILRASMVT
         TITLE 'SHOWMVS &REL - Define MVS Control Blocks'
***********************************************************************
*                                                                     *
*                                                                     *
*        DEFINE MVS CONTROL-BLOCKS                                    *
*                                                                     *
*                                                                     *
***********************************************************************
         IHASDWA DSECT=YES,VRAMAP=NO   SDWA DSECT
         IHAPSA DSECT=YES              PREFIXED STORAGE AREA
         AIF   (NOT D'CVTH4430).HARD60X
         IHACSD DSECT=YES              Common System Data Area
         AIF   (NOT D'CVTJ6602).HARD60X
         IHAIPA DSECT=YES              Initialization Parameter Area
.HARD60X ANOP
         IHASCCB                       Service Call Control Block
         IARRCE                        RSM CTL & ENUM AREA
         IARRAX                        RSM addr spc block extension
         IHAGDA                        GLOBAL DATA AREA
         AIF   (D'GDACSATR).GDA42
GDACSATR EQU   X'08'                   CSA Tracking (ESA 4.3)
GDASQATR EQU   X'04'                   SQA Tracking (ESA 4.3)
         AIF   (D'GDAGFSTR).GDA42
GDAGFSTR EQU   X'20'                   GFS Tracking (ESA 3.1)
.GDA42   ANOP
         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT
         IHASVC                        SVC TABLE ENTRY
*-       IHAPCCAT DSECT=YES            PCCA TABLE
         IHAPCCA DSECT=YES             PHYSICAL CONFIG. COMM. AREA
APPNMTBL APPNMTBL                      APPENDAGE NAME TABLE
         IHALPDE                       LPA DIRECTORY ENTRY
*
         IEESMCA                       SMF Control Area
         IEEMBACT                      SMF Application Control Table
         IEEMBRDS                      SMF R? Data Sets
         IEEMBSST                      SMF Sub-system Table
*
RTCT     IHARTCT                       RTM CONTROL TABLE
SDDSQ    IHASDDSQ                      SDUMP DATA SET QUEUE
* In OS/390 R6 and R7, IHARTSD gives "continuation error" - see OW36979
RTSD     IHARTSD                       RTCT SDUMP Extension
SDRTX    IHASDRTX                      RTCT SDUMP Extension
DSCA     ADYDSCA                       DAE Com area
DFLM     ADYDFLM                       DAE Default Module (ADYDFLT)
*
ASMVT    ILRASMVT DSECT=YES            AUXILIARY STRGE MGR VECTOR TABLE
PART     ILRPART                       PAGING ACTIVITY REFERENCE TABLE
PAT      ILRPAT                        Page Allocation Table
*
         AMCBS                         ACCESS METHOD CB STRUCTURE
IGGCAXWA IGGCAXWA                      Catalog Work Area
*
         ISGGVT                        GRS Vector Table
         ISGGCC                        GRS Config table
         IEFJESCT                      JES VECTOR TABLE
         IEFJSCVT                      SUB-SYSTEM COMM. VECTOR TABLE
         IEFJSSVT                      SUB-SYSTEM VECTOR TABLE
IEFAB445 IEFZB445                      Device Allocation Defaults
DSABQDB  IEFZB4D5                      DSAB QUEUE DESCRIPTOR BLOCK
PPT      IEFZB610                      Program Properties Table
         IEFZB505 LOCEPAX=YES          EPA MAPPING FOR SWAREQ
         IEFZB4UV                      Parm mapping for IEFEB4UV
LCT      DSECT                         <--  TCTLCT
         IEFALLCT                      LINKAGE CONTROL TABLE
JCT      DSECT                         <--  JSCBJCT, LCTJCTAD
         DS    F,A,F,C'JCT '           PREFIX
JCTEQREG EQU   *+92,2,C'H'             REGION IN K (MAX VALUE IS 16383)
         IEFAJCTB                      JOB Control Table
         AIF   (D'JCTSWAUP).JCT2
JCTSISO  EQU   2                       JCTSTAT2, NEW WITH DFP 2.3
JCTSWAUP EQU   1                       JCTSTAT2, NEW WITH DFP 2.3
.JCT2    ANOP
         AIF   (D'JCTJMRTL).JCT3
JCTJMRTL EQU   INJMJCT+X'8C',3,C'F'    TIME limit (XA,ESA313)
.JCT3    ANOP
JCTX     DSECT                         <--  JCTJCTX
         DS    F,A,F,C'JCTX'           PREFIX
         IEFJCTX                       JCT Extension
         AIF   (D'JCTXJMRD).JCTX3
JCTXSSD  EQU   JCTXIN+X'58',4,C'P'     step start date  (HBB4430)
JCTXJMRD EQU   JCTXIN+X'5C',4,C'P'     job start date  (HBB4430)
         AIF   (D'JCTXJTL).JCTX3
JCTXJTL  EQU   JCTXIN+X'3C',4,C'F'     TIME limit (HBB4410)
.JCTX3   ANOP
SCT      DSECT
         DS    F,A,F,C'SCT '           PREFIX
         IEFASCTB                      Step Control Block
         AIF   (D'SCTSTIME).SCT2
SCTSTIME EQU   SCT+X'15',3,C'F'        step time limit (XA/ESA31)
.SCT2    ANOP
SCTX     DSECT
         DS    F,A,F,C'SCTX'           PREFIX
         IEFSCTX DSECT=NO              Step Control Block Extension
         AIF   (D'SCTXSTL).SCTX2
SCTXSTL  EQU   SCTX+X'7C',4,C'F'       step time limit (HBB4410)
.SCTX2   ANOP
*
         IHAASCB DSECT=YES             ADDRESS SPACE CONTROL BLOCK
         IHAASSB LIST=NO               ADDRESS SPACE SECONDARY BLOCK
         AIF   (D'ASSBJSAB).ASSB1
ASSBJSAB EQU   ASSB+X'A8'              JSAB POINTER (HBB4410)
.ASSB1   ANOP
         IHAASVT DSECT=YES             ADDRESS SPACE VECTOR TABLE
         IHAASXB DSECT=YES             Address Space Extension Block
         IHALDA                        Local Data Area
         IHAACEE                       Accessor Environment Element
         IRAOUCB DSECT=YES             SRM PARMS
         IHAOUXB DSECT=YES             SRM PARMS
         IEARCTD DSECT=YES             RCT Data Area
         IKJTCB DSECT=YES,LIST=NO      TASK CONTROL BLOCK
         AIF   (D'TCBCELAP).TCB2
TCBCELAP EQU   TCB+X'144',4,C'A'       LE Pointer
.TCB2    ANOP
         IHASTCB                       Secondary TCB
         IEFTCT                        SMF TCT
         IEZJSCB                       JOB STEP CONTROL BLOCK
         IEFJSSIB                      Sub-System Identification Block
         IHARD                         REGION DESCRIPTOR
         IHASPQE                       sub-pool queue element
         IHASPQA                       sub-pool queue element anchors
         IHADQE                        descriptor queue element
         IKJRB  DSECT=YES,LIST=NO      REQUEST BLOCK
         IHACDE                        CONTENTS DIRECTORY ENTRY
         IHALLE                        LOAD-LIST ELEMENT
         IHAXTLST                      EXTENT LIST
         IHASCB DSECT=YES              STAE CONTROL BLOCK
         IHASCA                        SPIE/ESPIE Control Area
*
         IKJPSCB                       PROTECTED STEP CONTROL BLOCK
         IKJTSB LIST=NO,EXT=YES        Terminal Status Block
         IKJCPPL                       Command Processor Parm List
.TSO1    AIF   (D'PSCBCNAU).TSO2
PSCBCNAU EQU   X'01'                   CONSOLE authority    (TSO/E 2.3)
.TSO2    IKJUPT                        User Profile Table
         AIF   (D'UPTPLANG).TSO3
UPTPLANG DS    CL3                     Primary language     (TSO/E 2.2)
UPTSLANG DS    CL3                     Secondary language   (TSO/E 2.2)
.TSO3    ANOP
UPT_LENGTH EQU *-UPT
         IKJTSVT                       TSO VECTOR TABLE
         AIF   (D'TSVTETVP).TSOE22
TSVTETVP EQU   TSVT+X'0C0',4,C'A'      V(ETVP)                  HTE21D2
.TSOE22  ANOP
*IKJEFLWA MACRO MISSING IN HTE25D2 - SEE OW17927 AND UW24933
         IKJEFLWA                      LOGON WORK AREA
         IKJTAXE                       TERMINAL ATTN EXIT ELEMENT
EXTAB_VECT IKJEXTAB                    EXIT/TABLE VECTOR
TPVT     IKJTPVT                       TSO PARMLIB vector table
CTLT     IKJCTLT                       TSO/E Control Table
PPVE     IKJEPPVE                      Platform Programs
FCVE     IKJEFCVE                      Platform Commands
XPRM     IKJXPRM                       INMXPARM Control Table
CNPRM    IKJCNPRM                      IKJCNPRM Control Table
HELP     IKJEFHCB                      HELP Control Table
         IKJEESCB                      SEND Parmlib Control Block
TPT      IKJTPT                        TSO/TEST Parameter Table
ALPL     IKJALPL                       ALLOC command defaults
*
         IEEBASEA DSECT                Master Sched Resident Data Area
         IEECUCM DSECT=YES             Unit Control Module
SNPL     IEEZB807                      SCHEDULER NIP PARAMETER LIST
MPFT     IEEZB809                      Message Processing Facility Tbl
GENX     IEEZB816                      GENERAL WTO USER EXIT TABLE
CPFT     IEEZB817                      Command Prefix Table
CLRATT   IEEVC102                      COLOR/HIGHLIGHTING ATTRIBUTE TBL
         IEFUCBOB LIST=NO,PREFIX=YES   UNIT CONTROL BLOCK
         AIF   (NOT D'CVTH5510).UCB3X
         ORG   UCB+X'1D0'
         IOSDUCBP                      UCB Prefix (HBB5510)
.UCB3X   ANOP
         IECDDCE                       DEVICE CLASS EXTENSION
         IECDIOCM                      IOCOM DSECT
         AIF   (D'IOCIOVTP).ESA41D
IOCIOVTP EQU   IOCOM+X'0D0',4,C'A'     V(IOVT)
.ESA41D  ANOP
IOVT     IOSDIOVT                      IOS Vector Table          ESA41
CDA      IOSDCDA                       Configuration Data Area
ULUT     IOSDULUT                      UCB Look-up Table         ESA41
         IOSDSHID                      System Host ID Mapping   OW13347
         ORG   SHID_CPCND+L'SHID_CPCND
*        CPCID is Central Processing Complex Identifier
CPCID_FLAGS DS X                       flags
CPCID_MAP   DS X                       CPC id
*
         IKTTCAST DSECT=YES            TCAS (a key 6 area)
* /*  OY66862 -- 94/07/25 - macro logic added in order to avoid      */
* /*                        acon undefined symbols for DSECT=YES     */
         IRARMCT DSECT=YES         RESOURCE MANAGER CONTROL TABLE
         AIF   (D'RMCTWLM).RMCT43
RMCTWLM  EQU   BIT7                    WLM mode active
.RMCT43  ANOP
         AIF   (NOT D'CVTH5510).RMCT51
         IRASRMST DSECT=YES        SRM Status Sysevent Parameter List
         AIF   (NOT D'CVTH5520).RMCT51
         IWMSVDCR
         IWMSVPCD
         IWMSVPOL
         IWMYCON
         AIF   (NOT D'CVTH6603).RMCT51 OS/390 R3?
         ATRFZQRY                      Resource Recovery Manager   +RS
         IHAETRI                       External Time Reference     +JWM
         AIF   (NOT D'CVTJ6604).RMCT51 OS/390 R4?
         CSVRTAA DSECT=YES             CSVRTAA answer-area         +RS
.RMCT51  ANOP
RMPT     IRARMPT                       SRM PARAM TABLE
WMST     IRAWMST                       WORKLOAD MGR SPECIFICATIONS TBLE
WMSTIPM2 EQU   WMST+X'9C',4            MSO SERVICE COEFF. (XA & ESA V3)
WMSTIPM3 EQU   WMST+X'50',8            MSO SERVICE COEFFICIENT (ESA V4)
WMSTIPC3 EQU   WMST+X'94',4            CPU SERVICE COEFFICIENT (ESA V4)
WMSTIPI3 EQU   WMST+X'98',4            I/O SERVICE COEFFICIENT (ESA V4)
WMSTIPB3 EQU   WMST+X'A0',4            SRB SERVICE COEFFICIENT (ESA V4)
ICST     IRAICST                       SRM ICS TABLE
DMDT     IRADMDT                       SRM DOMAIN TABLE
*
         DCBD  DSORG=PO,DEVD=DA        IHADCB
         IEZIOB DSECT=NO               I/O BLOCK
END_OF_IOB DS  0D
JFCB     DSECT
         IEFJFCBN LIST=NO              JOB FILE CONTROL BLOCK
SIOT     DSECT
         IEFASIOT                      Step Input Output Table
TIOT     DSECT
         IEFTIOT1                      TASK INPUT-OUTPUT TABLE
         IHADSAB                       DATA SET ASSOCIATION BLOCK
         IEZDEB LIST=NO                DATA EXTENT BLOCK
*---------------------------------------------------------------------*
         AIF   (NOT D'DFASMS).SMS9     NOT DFP V3, JUMP
         IEFJSSOB ,                    SSOB header
*SSSAK section doubly defined (pre-HDZ1110)
         IEFSSSA                       SSOB extension for SMS
*
*        Work area for SMS inquiries (pointed to by SMS_SSOB)
*
SMS_WORK DSECT
SSOB_WRK DS    XL(SSOBHSIZ)            SSOB
SSSA_WRK DS    XL(SSSALN+SSSA1LN)      SSSA (HDR)
         DS    0D
SMS_SUB_FUNCTION_WORK_AREA EQU *
SSSA_BCD DS    XL(BCD_TOTAL_LENGTH)    PREFIX+DEFINITION
         ORG   SMS_SUB_FUNCTION_WORK_AREA
SSSA_VLD DS    XL(VLD_TOTAL_LENGTH)    PREFIX+DEFINITION
         ORG
SMS_SUB_FUNCTION_WORK_AREA_LENGTH EQU *-SMS_SUB_FUNCTION_WORK_AREA
SMS_WORK_LENGTH EQU *-SMS_WORK
*
         IGDBCD                        Base configuration definition
         AIF   (D'BCDEND2).BCD3        BCDVER=3
BCD_TOTAL_LENGTH EQU L'BCDP+L'BCDEF                             HDZ11B0
         AGO   .BCD9
.BCD3    ANOP
BCD_TOTAL_LENGTH EQU (BCDEND-IGDBCD)+(BCDEND2-BCDSYSDT)         HDZ11C0
.BCD9    ANOP
         IGDVLD                        Volume record definition
         AIF   (D'VLDEND2).VLD3        VLDVER=3
VLD_TOTAL_LENGTH EQU L'VLDP+L'VLDEF                             HDZ11B0
         AGO   .VLD9
.VLD3    ANOP
VLD_TOTAL_LENGTH EQU (VLDEND-VLD)+(VLDEND2-VLDSYSDT)            HDZ11C0
.VLD9    ANOP
.SMS9    ANOP
         AIF   (NOT D'CVTOSEXT).END    NOT ESA, JUMP
CSCB     DSECT
         IEECHAIN                      COMMAND SCHEDULING CONTROL BLOCK
         AIF   (NOT D'CVTH4410).END    NOT ESA 4.1, JUMP
         IHAECVT DSECT=YES             Extended CVT
         IAZJSAB DSECT=YES             JOB Scheduler Address Space
         IXCYQUAA                      XCF-Answer Area             @RS
         AIF   (NOT D'CVTH4430).END    NOT ESA 4.3, JUMP
         CSVAPFAA DSECT=YES,LIST=NO    dynamic APF
         IEFSSVI DSECT=YES             sub-sys version information
         AIF   (NOT D'CVTH5510).END
         AIF   (NOT D'CVTH5520).END
         ASASYMBP DSECT=YES,SYMBP=NO,SYMBT=YES
         IXCYAMDA             XCF Accounting and Measurement Data Area
         IXLYAMDA                      Acct + Measurement Data Area +DL
         IXLYNDE                       Node descriptor              +DL
         AIF   (NOT D'CVTPRDED).END
         IFAEDIDF DSECT=YES            Product Enable/Disable
         AIF   (NOT D'CVTH6603).END    OS/390 R3?
         CSVDLCB TITLE=NO              dynamic link-list
         CSVDLAA                       dynamic link-list
.NODLCB  ANOP
.END     YREGS                         REGISTER EQUATES
*
ERLY     DSNDERLY                      DB2
RIB      DSNDRIB                       DB2/MQ                      +RS
*
ERBCOPY1 OPSYN ANOP                    Bypass Copyright Notice
ERBCPUDT ERBCPUDT                      CPU DATA TABLE (RMF)
ERBSTGST ERBSTGST                      GLOBAL SUPERVISOR TABLE (RMF)
         DIAG204                       Data from DIAGNOSE X'204'
*
RCVT     ICHPRCVT                      RACF CVT
DSDT     ICHPDSDT                      RACF Data Set table
RCATABLE ICHPAUTB                      AUTHORIZED RACF SVC CALLERS
CGRP     ICHPCGRP                      CONNECT GROUP NAME TABLE
*
LLCB     IHALLCB                       LLA
         IHALLCB3                      LLCB extension for ESA
LLDR     IHALLDR                       LLA
LLDS     IHALLDS                       LLA
LLLS     IHALLLS                       LLA
*
SVT      IHASVT                        SUPERVISOR VECTOR TABLE
XMD      IHAXMD                        PC-AUTH
LXAT     IHALXAT                       Linkage Index Allocation Table
NTTH     IHANTTE                       Name/Token                  $RS
PPD      IGVPPD                        Cellpools                   $RS
LLT      IHALLT DSECT=YES              LNKLST/LPALST tables
RPP      IHARPP                        Recovery PIE PICA
PICA     IHAPICA                       Program Interrupt Control Area
TQE      IHATQE                        TIMER QUEUE ELEMENT
DCQ      IHADCQ                        Device class table
MQCT     ARCQCT                        HSM Control Table
ATCVT    ISTATCVT                      VTAM
ACCVT    ACCVT DSECT=YES,PREFIX=YES    ACF2 CVT
         AIF   (D'CVTOSEXT).STRING_ESA
         STRING GENERATE               GENERATE LITERALS & SUB-RTNE
         AGO   .STRING_EXIT
.STRING_ESA ANOP
         STRING (GENERATE,AR_MODE)     GENERATE LITERALS & SUB-RTNE
.STRING_EXIT ANOP
***********************************************************************
*                                                                     *
*        Module Prologue, for the SDSF SVC.                           *
*                                                                     *
***********************************************************************
         CNOP  0,4
ISF$SHOW B     12(,R15)                   SDSF SVC AMODE31 prefix
         DC    A(SHOWMVS+VL)              SDSF SVC AMODE31 prefix
         DC    A(SVC109+2+VL)             SDSF SVC AMODE31 prefix
         L     R15,4(,R15)
         BR    R15
VL       EQU   X'80000000'
FF       EQU   X'FF'
         END   ISF$SHOW
         TITLE 'JUL2DAYS - Julian-to-days conversion routine'
***********************************************************************
*                                                                     *
*        Convert a packed julian date obtained from the TIME macro    *
*        to an integer that represents the number of days since       *
*        1900-12-31.                                                  *
*                                                                     *
*        Input: R1=YYYYDDDF    julian date from TIME macro            *
*                                                                     *
*                 The first byte of R1 is 00 for years 1900-1999      *
*                 and 01 for years 2000-2099.                         *
*                                                                     *
*        Output:  R15=day of the week (1=monday, 7=sunday)            *
*                                                                     *
*                 R0=number of days since 1900-12-31                  *
*                                                                     *
*                 R1=pointer to a 9-byte character string that        *
*                            represents the day of the week.          *
*                                                                     *
***********************************************************************
JUL2DAYS CSECT
JUL2DAYS RMODE ANY
         SAVE  (14,1),,*
         MVO   32(8,R13),24(2,R13)     00000YYY?
         OI    32+7(R13),X'0F'         00000YYYF
         CVB   R14,32(,R13)            R14=YEAR
         LA    R0,365                  number of days in a year
         LR    R1,R14                  R1=years since 1900
         MR    R0,R0                   years*365
         BCTR  R14,0                   R14=YEAR-1
         SRL   R14,2                   number of leap years since 1901
         AR    R14,R1                  NUMBER OF DAYS IN PREVIOUS YEARS
         XC    20(6,R13),20(R13)       zero YYYY in 00000000YYYYDDDF
         CVB   R0,20(,R13)             NUMBER OF DAYS THIS YEAR
         AR    R0,R14                  number of days since 1900-12-31
*
*        DETERMINE DAY OF THE WEEK
*
         SLR   R14,R14                 PREPARE DIVISION
         LR    R15,R0                  DAYS SINCE 1900-12-31
         BCTR  R15,0                   DAYS-1
         LA    R1,7                    NUMBER OF DAYS IN WEEK
         DR    R14,R1                  DIVIDE BY NUM OF DAYS IN WEEK
         LA    R15,1(,R14)             Day of the week (1=monday)
         BALR  R1,0                    local base
         USING *,R1
         MH    R14,JUL2D_H9            MULT BY LENGTH OF A TABLE ENTRY
         LA    R1,JUL2D_TD(R14)        POINT TO DAY-OF-THE-WEEK
         RETURN (14)                   goback
*
JUL2D_H9 DC    H'9'                    length of a table entry
JUL2D_TD DC    C'Monday   Tuesday  WednesdayThursday Friday   Saturday X
               Sunday    '
***********************************************************************
*                                                                     *
* MODULE NAME = SCANMODL                                              *
*                                                                     *
* DESCRIPTIVE NAME = RETRIEVE OFFSET & LENGTH OF A JES2 FIELD         *
*                                                                     *
* FUNCTION = THIS MODULE LOADS A MODEL FROM SYS1.MIGLIB AND RETURNS   *
*            THE OFFSET & LENGTH OF A FIELD.  IT IS USED TO WRITE     *
*            PROGRAMS THAT ACCESS JES2 CONTROL BLOCKS WITHOUT USING   *
*            HASPSRC AND CONSEQUENTLY, ARE RELEASE-INDEPENDENT.       *
*                                                                     *
* STATUS = R100                                                       *
*                                                                     *
* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        *
*                                                                     *
* INVOCATION = VIA CALL OR LINK                                       *
*                                                                     *
*          LINK EP=SCANMODL,PARAM=(=C'HASMSDB ',=C'SDBRECCT')         *
*          LH   R2,0(,R1)                 OFFSET                      *
*          LH   R3,2(,R1)                 LENGTH                      *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA V4.1                                      *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
* MODULE TYPE = PROCEDURE, (SUB-ROUTINE)                              *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, TCB KEY                              *
*                                                                     *
* OPERATION = See below                                               *
*                                                                     *
*        If your primary JES2 is not in sync with the HASMxxxx        *
*        modules in SYS1.MIGLIB or SYS1.SHASMIG, this routine         *
*        won't work.  To fix this, you can do the following:          *
*                                                                     *
*        1. Locate the following instruction:                         *
*             LOAD EPLOC=(R8),DCB=(R1),ERRET=RC12                     *
*           change it to:                                             *
*             LOAD EPLOC=(R8),DCB=0,ERRET=RC12                        *
*           then assemble and link SHOWMVS.                           *
*                                                                     *
*        2. Go to the MVS system where JES2 was installed (it should  *
*           have been installed under SMP/E).  Get the HASMHCCT,      *
*           HASMSJB and HASMPIT modules from SYS1.MIGLIB (or          *
*           SYS1.SHASMIG) on that system; they should be in sync with *
*           your primary JES2 (you can check that by BROWSEing them). *
*           Copy these modules to a STEPLIB or ISPLLIB library.       *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*   @100 INITIAL VERSION                                              *
*                                                                     *
***********************************************************************
SCANMODL CSECT
SCANMODL RMODE ANY
         BAKR  R14,0
         LR    R11,R15
         USING SCANMODL,R11
         LM    R8,R9,0(R1)             R8=HASMSDB,R9=SDBRECCT
         L     R1,16                   CVTPTR
         L     R1,8(,R1)               CVTLINK
         LOAD  EPLOC=(R8),DCB=(R1),ERRET=RC12
         LR    R4,R0                   IM$SDB
         USING HEADER,R4
         SLR   R1,R1
         IC    R1,HDROFFSET            OFFSET TO 1ST FIELD DESC
         LA    R5,HEADER(R1)           ADDR OF 1ST FIELD DESC
         USING FLDDESC,R5
*LOOP
LOOP5    CLC   FLDNAME,0(R9)           REQUESTED FIELD?
         BE    LOOP5X                  YES, EXIT
         LA    R5,FLD_NEXT             NEXT FIELD DESCRIPTOR
         CLI   FLDDESC,0               END OF MODEL?
         BNE   LOOP5                   NO, PROCESS NEXT FIELD
*ENDLOOP
         LA    R15,8                   RC=8  (FIELD NOT FOUND)
         PR
*
*        RETURN OFFSET AND LENGTH IN SAVEAREA+8
*
LOOP5X   LA    R1,8(,R13)              4-BYTE WORK AREA CALLER'S AMODE
         MVC   0(4,R1),FLDOFFSET       MOVE OFFSET & LENGTH
         SLR   R15,R15                 RC=0
         PR
*
RC12     LA    R15,12                  RC=12 (LOAD FAILED)
         PR
*@@      BLSQCBM                   CONTROL BLOCK MODEL USED BY BLSQFORM
HEADER   DSECT
HDRACRO  DS    CL8                     EBCDIC CB ACRONYM
HDRUTHDR DS    CL8'$HCCT'              OUTPUT HEADER
HDRMLVL  DS    CL8'HJE4430'            MAINTENANCE LEVEL
HDRCBLEN DS    FL2                     LENGTH OF CONTROL BLOCK
HDRAOFF  DS    FL2                     OFFSET TO ACRONYM
HDRALEN  DS    FL1                     LENGTH OF ACRONYM
HDRLLEN  DS    FL1                     LABEL LENGTH
HDRSCOL  DS    FL1                     START COLUMN OR LEFT MARGIN
HDRNCOL  DS    FL1                     NUMBER OF COLS BETWEEN LABELS
HDRFLAGS DS    XL1                     NUMBER OF COLS BETWEEN LABELS
HDROFFSET DS   FL1                     OFFSET TO 1ST FIELD DESC
HDRMODLVL DS   FL1                     MODEL LEVEL
          DS   X                       RESERVED
*
FLDDESC  DSECT
FLDNAME  DS    CL8                0    FIELD NAME
FLDFLAGS DS    X,X                8    FLAGS
FLDVIEW  DS    XL2               10    VIEW
FLDOFFSET DS   FL2               12    OFFSET
FLDLENGTH DS   FL2               14    LENGTH
FLD_NEXT EQU   *                 16
         YREGS
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//* to create the SHOWMVS.MACLIB library, execute FILE183.PDS(SHOWMACS)
//         DD DISP=SHR,DSN=GILBERT.SHOWMVS.MACLIB ShowMVS macros
//         DD DISP=SHR,DSN=GILBERT.FILE183.PDS    STRING macro
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,10),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//ISPLOAD  DD DISP=SHR,DSN=ISP.SISPLOAD(ISPLINK)
//TMPLINK  DD UNIT=VIO,SPACE=(CYL,(1,,1)),DISP=(,PASS),DSN=&&TMPLINK
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD
//*-------------------------------------------------------------------*
//*                                                                   *
//*       First test step (TSO Batch)                                 *
//*                                                                   *
//*-------------------------------------------------------------------*
//TMPLINK EXEC PGM=IEWL,PARM=RENT
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)
//SYSLMOD  DD DSN=&&TMPLINK(SHOWMVS),DISP=(OLD,PASS)
//SYSPRINT DD SYSOUT=*
//*
//TMPGO   EXEC PGM=IKJEFT01,TIME=(,30)
//STEPLIB  DD DSN=&&TMPLINK,DISP=(OLD,PASS)
//SYSTSIN  DD *
SHOWMVS /* SHORT_PUTLINE */
SHOWMVS PUTLINE
//SYSTSPRT DD SYSOUT=*
//ABNLTERM DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*,OUTLIM=20000
//*-------------------------------------------------------------------*
//*                                                                   *
//*       Second test step (Batch, Loader)                            *
//*                                                                   *
//*-------------------------------------------------------------------*
//LOADGO  EXEC PGM=LOADER,PARM=NOPRINT,TIME=(,30)
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SHOWMVS  DD SYSOUT=*
//ABNLTERM DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*,OUTLIM=20000
//*-------------------------------------------------------------------*
//*                                                                   *
//*       This is the link-edit step for SHOWMVS                      *
//*                                                                   *
//*-------------------------------------------------------------------*
//LKED    EXEC PGM=IEWL,PARM=(LIST,MAP,RENT)
//ISPLOAD  DD DISP=SHR,DSN=*.ASMH.ISPLOAD
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//         DD *
 ALIAS SHOWMVS
 INCLUDE ISPLOAD(ISPLINK)
 NAME ISF$SHOW(R)
//SYSPRINT DD SYSOUT=*
//SYSLMOD  DD DISP=SHR,DSN=*.ASMH.SYSLMOD
