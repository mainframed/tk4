//GILBERTD JOB (ACCT#),DEFGDGSR,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
***********************************************************************
*                                                                     *
* MODULE NAME = DEFGDGSR                                              *
*                                                                     *
* DESCRIPTIVE NAME = Define or Alter a GDG base                       *
*                                                                     *
* FUNCTION = The DEFGDGSR routine can be called by a program to       *
*            define, delete or alter the GDG limit in a GDG base.     *
*                                                                     *
* STATUS = R301                                                       *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = DFP V3 or above                                   *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
* MODULE TYPE = PROCEDURE, (Sub-Routine)                              *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REUSABLE, RMODE ANY, AMODE 31,                      *
*                 PROBLEM STATE, KEY 8                                *
*                                                                     *
* OPERATION = See Below                                               *
*                                                                     *
*        This subroutine may be called by a program to define GDGs.   *
*        It requires two parameters:                                  *
*                                                                     *
*        1. a 44-byte field, containing the dsname which must be      *
*           left-justified and padded with blanks.                    *
*                                                                     *
*        2. a 3-digit field, containing the number of generations     *
*           as an unpacked decimal number in the range 001 to 255.    *
*                                                                     *
*        Sample calling sequence:                                     *
*                                                                     *
*                 01 DSNAME PIC X(44) VALUE 'PAYROLL.MASTER'.         *
*                 01 GDGLIMIT PIC 999 VALUE 15.                       *
*                                                                     *
*            CALL 'DEFGDGSR' USING DSNAME, GDGLIMIT.                  *
*                                                                     *
*        A return code is passed in register 15.  a cobol calling     *
*        program may check the content of the "return-code" field,    *
*        a non-zero value indicating that an error has occured.       *
*                                                                     *
*        This sub-routine doesn't call IDCAMS, but directly           *
*        invokes the DFP catalog management services to perform       *
*        the following:                                               *
*                                                                     *
*        1. LISTCAT the entry to check if the GDG already exists      *
*           and, if this is the case, what the current limit is.      *
*           this request is equivalent to the IDCAMS command:         *
*              'LISTCAT MYDSN GDG ALL '.                              *
*                                                                     *
*        2. DELETE the existing GDG base if the limit is zero         *
*           This request is equivalent to the IDCAMS command:         *
*              'DELETE MYDSN GDG '.                                   *
*                                                                     *
*        3. ALTER the existing GDG base if the limit obtained by      *
*           LISTCAT is different from the value passed by the caller. *
*           This request is equivalent to the IDCAMS command:         *
*              'ALTER MYDSN LIMIT(nnn) SCRATCH GDG'.                  *
*                                                                     *
*        4. DEFINE a GDG with the SCRATCH option and the number       *
*           of generations passed in the second parameter.            *
*           This request is equivalent to the IDCAMS command:         *
*              'DEFINE GDG(NAME(MYDSN) LIMIT(GDGNB) SCRATCH)'.        *
*                                                                     *
*Programming Notes:                                                   *
*                                                                     *
*        DEFGDGSR is reusable, which means that it may be loaded      *
*        once and called multiple times in the same job step.         *
*                                                                     *
*        DEFGDGSR does not define a GDG in the following cases:       *
*                                                                     *
*        1. A '//NODEFGDG DD DUMMY' statement is present in the JCL   *
*           or the equivalent ALLOCATE command has been issued        *
*           under TSO, or                                             *
*                                                                     *
*        2. the first level qualifier of the dsname has not been      *
*           defined as an alias, or                                   *
*                                                                     *
*        3. the second parameter is zero.  In that case, if a GDG     *
*           base exists and is empty, it is deleted.                  *
*                                                                     *
*Change Log                                                           *
*                                                                     *
*$200 Set GDG base's owner to invoker's RACF user id                  *
*$301 Use ALTER instead of DELETE+DEFINE                              *
***********************************************************************
DEFGDGSR CSECT
DEFGDGSR RMODE ANY
         SAVE  (14,12),,'GSF Utilities - DEFGDGSR R301'
         LR    R12,R15
         USING DEFGDGSR,R12
         LM    R3,R4,0(R1)             GDGNAME, GDGLIMIT
         GETMAIN RU,LV=DYNL            GET DYNAMIC STORAGE AREA
         LR    R9,R1                   KEEP ITS ADDRESS
         USING DYN,R9
         DEVTYPE =C'NODEFGDG',WORK265  CHECK DDNAME
         LTR   R15,R15                 CHECK DEVTYPE RETURN CODE
         BZ    RETURN                  DD PRESENT, QUIT.
         LA    R14,DYN                 CLEAR DYNAMIC STORAGE
         LA    R15,DYNL                CLEAR DYNAMIC STORAGE
         SLR   R1,R1                   CLEAR DYNAMIC STORAGE
         MVCL  R14,R0                  CLEAR DYNAMIC STORAGE
*---------------------------------------------------------------------*
*        CHECK FOR AN EXISTING ALIAS                                  *
*---------------------------------------------------------------------*
P1ALIAS  MVI   WORK265+C'.',C'.'       BUILD TABLE FOR TRT
         TRT   0(9,R3),WORK265         FIND FIRST PERIOD
         BZ    RETURN                  ERROR IF NO PERIOD FOUND
         LR    R0,R3                   POINT TO GDG NAME
         SLR   R1,R0                   COMPUTE LENGTH OF 1ST QUALIFIER
         ICM   R1,B'1000',=C' '        PADDING CHARACTER
         LA    R14,CATNAME             "TO" FIELD
         ST    R14,LOCALIAS+4          UPDATE CAMLST
         ST    R14,CTGCAT              UPDATE CTGPL
         LA    R15,L'CATNAME           LENGTH
         MVCL  R14,R0                  MOVE ALIAS TO CATNAME FIELD
         LA    R0,WORK265              GET ADDRESS OF WORK AREA
         ST    R0,LOCALIAS+12          UPDATE CAMLST
         ST    R0,CTGWKA               UPDATE CTGPL
         LOCATE LOCALIAS               FIND UCAT NAME
         LTR   R15,R15                 CHECK SVC 26 RETURN CODE
         BNZ   RETURN                  NO ALIAS, QUIT.
*---------------------------------------------------------------------*
*        BUILD CTGFV                                                  *
*---------------------------------------------------------------------*
         PACK  DWD,0(3,R4)             PACK 3-DIGIT GDGLIMIT
         OI    DWD+7,X'0F'             PREVENT S0C7 IF ALL SPACES
         CVB   R0,DWD                  CONVERT TO BINARY, GET S0C7
         STC   R0,GDGLIMIT             KEEP GDG LIMIT
         LA    R1,GDGLIMIT             GDG LIMIT
         ST    R1,CTGFVLMT             SAVE ADDR INTO FVT
         LA    R1,GDGATTR              GDG ATTRIBUTES
         ST    R1,CTGFVGAT             SAVE ADDR INTO FVT
         MVI   CTGFVTYP,C'B'           ENTRY TYPE (GDG BASE)
         ST    R3,CTGFVENT             GDG NAME INTO CTGFVENT
*---------------------------------------------------------------------*
*        LISTCAT (RETRIEVE CURRENT GDG LIMIT)                         *
*---------------------------------------------------------------------*
P2LISTC  ST    R3,CTGENT               GDGNAME
         MVC   WORK265(4),=Y(L'WORK265,0) FORMAT WORK AREA HEADER
         MVI   CTGOPTNS,CTGLTCAT       FUNCTION = LISTCAT
         CATALOG CTGPL                 IS GDG DEFINED ALREADY?
         LTR   R15,R15                 CHECK SVC 26 RETURN CODE
         BNZ   P3ZERO                  GDG ISN'T DEFINED, GO DO IT.
         CLI   GDGLIMIT,0              GDGLIMIT=0?
         BE    P3DELETE                YES, ISSUE DELETE GDG
         L     R1,CTGFLPT              POINTER TO RETURNED GDGLIMIT
         CLC   GDGLIMIT,0(R1)          COMPARE WITH PASSED VALUE
         BE    RETURN                  GDG OK ALREADY, RETURN.
*---------------------------------------------------------------------*
*        ALTER IF GDG LIMIT IS DIFFERENT FROM THE ONE REQUESTED       *
*---------------------------------------------------------------------*
P3ALTER  MVI   CTGOPTNS,CTGALTER       ALTER
         LA    R0,CTGFV                ADDR OF CTGFV
         ST    R0,CTGFVT               STORE CTGFV ADDRESS INTO CTGPL
         MVI   CTGFVFL2,X'02'          CTGFVAPP   FVT APPENDIX PRESENT
         MVC   CTGFVID,=C'FVT '        EYE-CATCHER
         MVC   CTGFVERS,=H'1'          VERSION
         MVC   CTGFVLNA,=AL2(L'CTGFVXA) LENGTH OF FVT APPENDIX
         MVI   CTGFVFL3,X'20'          CTGFVALM   ALTER GDG LIMIT
         CATALOG CTGPL                 ALTER GDG LIMIT
         B     RETURN
*---------------------------------------------------------------------*
*        DELETE GDG                                                   *
*---------------------------------------------------------------------*
P3DELETE MVI   CTGOPTNS,CTGDELET       FUNCTION = DELETE
         CATALOG CTGPL                 DELETE EXISTING GDG
         LTR   R15,R15                 CHECK SVC 26 RETURN CODE
         BNZ   RETURN                  DELETE FAILED, RETURN
P3ZERO   CLI   GDGLIMIT,0              CHECK GDGLIMIT
         BE    RETURN                  QUIT IF GDGLIMIT=0
*---------------------------------------------------------------------*
*        RETRIEVE USERID FROM ACEE                                    *
*---------------------------------------------------------------------*
         L     R1,PSAAOLD-PSA          MY ASCB
         L     R1,ASCBASXB-ASCB(,R1)   MY ASXB
         L     R1,ASXBSENV-ASXB(,R1)   MY ACEE
         LTR   R1,R1
         BNP   P4DEFINE                NO ACEE, NO OWNER
         MVC   OWNERID,ACEEUSRI-ACEE(R1)  MY RACF USER ID
         LA    R0,CTGFL2               CTGFL FOR OWNER ID
         ST    R0,CTGFV+28             SET POINTER TO OWNER ID
*---------------------------------------------------------------------*
*        DEFINE GDG WITH SCRATCH OPTION.                              *
*---------------------------------------------------------------------*
P4DEFINE MVI   CTGOPTNS,CTGDEFIN       FUNCTION = DEFINE
         LA    R0,CTGFV                ADDR OF CTGFV
         ST    R0,CTGFVT               STORE CTGFV ADDRESS INTO CTGPL
         CATALOG CTGPL                 DEFINE GDG
*
RETURN   SAVE  15                      STORE RETURN CODE
         FREEMAIN RU,LV=DYNL,A=(R9)    FREE DYNAMIC STORAGE AREA
         RETURN (14,12)                RETURN, PASS RETURN CODE.
***********************************************************************
*                                                                     *
*        CATALOG MANAGEMENT CONTROL BLOCKS: CTGPL, CTGFL, CTGFV       *
*                                                                     *
***********************************************************************
CTGPL    DS    0F
CTGOPTN1 DC    AL1(CTGNAME+CTGCNAME)   FIRST OPTION BYTE:
CTGNAME  EQU   X'04'                     CTGENT POINTS TO ENTRY NAME
CTGCNAME EQU   X'02'                     CTGCAT POINTS TO CATALOG NAME
         DC    B'0'
CTGFUNC  DC    AL1(CTGCMS+CTGAM0)      CALLER-REQUESTED FUNCTION
CTGCMS   EQU   X'80'                     REQUEST IS IN CTGOPTNS
CTGAM0   EQU   X'01'                     OS/VS2 CTGPL, NOT A CAMLST
         DC    B'0'
CTGFVT   DS    0A(*-*)                 ADDRESS OF CTGFV FOR DEFINE
CTGENT   DC    A(*-*)                  ADDRESS OF ENTRY NAME
CTGCAT   DC    A(*-*)                  ADDRESS OF CATALOG DSNAME
CTGWKA   DC    A(*-*)                  ADDRESS OF CALLER'S WORK AREA
CTGOPTNS DC    AL1(CTGLTCAT)           REQUEST:
CTGLTCAT EQU   X'20' 0010 0...           LISTCAT
CTGALTER EQU   X'10' 0001 0...           ALTER
CTGDELET EQU   X'18' 0001 1...           DELETE
CTGDEFIN EQU   X'08' 0000 1...           DEFINE
         DC    B'0'
CTGTYPE  DC    C'B'                    TYPE OF CAT. RECORD (GDG BASE)
CTGNOFLD DC    FL1'1'                  NUMBER OF POINTERS IN CTGFIELD
CTGFDBK  DC    XL2'0'                  FEEDBACK AREA
CTGFBFLG DC    B'0'
         DC    X'00'                   ERROR CODE
CTGPSWD  DC    A(0)                    PASSWORD ADDRESS
CTGFIELD DC    A(CTGFL)                POINTER(S) TO CTGFL(S)
*
CTGFL    DS    0F                   +0 FIELD DESCRIPTOR
CTGFLDNO DC    FL1'1',5X'00'        +0 NUMBER OF FIELDS
CTGFLDNM DC    A(FLDNM1,0)          +8 PTR TO FIELD NAME
CTGFLNG  DC    F'0'                +16 LENGTH OF RETURNED DATA
CTGFLPT  DC    A(*-*)              +20 ADDRESS OF RETURNED DATA
*
FLDNM1   DC    C'GDGLIMIT'             FIELD NAME
GDGATTR  DC    B'01000000'             GDG ATTRIBUTES: SCRATCH, NOEMPTY
GDGLIMIT DC    FL1'0'                  BINARY GDG LIMIT
LOCALIAS CAMLST NAME,*-*,,*-*          LOCATE ALIAS
*
CTGFL2   DS    0F                   +0 FIELD DESCRIPTOR
         DC    FL1'1',5X'00'        +0 NUMBER OF FIELDS
         DC    A(FLDNM2,0)          +8 PTR TO FIELD NAME
         DC    F'8'                +16 LENGTH OF RETURNED DATA
CTGFL2PT DC    A(OWNERID)          +20 ADDRESS OF RETURNED DATA
*
FLDNM2   DC    C'OWNERID '             FIELD NAME
OWNERID  DC    C'XXXXXXXX'             VALUE
*---------------------------------------------------------------------*
*        DYNAMIC STORAGE, BASED WITH R9.                              *
*---------------------------------------------------------------------*
DYN      DSECT
CATNAME  DS    CL44' '                 CATALOG DSNAME
*
CTGFV    DS    0F,XL100
CTGFVTYP EQU   CTGFV,1,C'C'            ENTRY TYPE
CTGFVFL2 EQU   CTGFV+3,1,C'B'          FLAGS
CTGFVENT EQU   CTGFV+20,4,C'A'         ENTRY NAME
CTGFVLMT EQU   CTGFV+72,4,C'A'         GDG LIMIT
CTGFVGAT EQU   CTGFV+76,4,C'A'         GDG ATTRIBUTES
CTGFVXA  DS    XL40                    APPENDIX
CTGFVID  EQU   CTGFVXA,4,C'C'          EYE CATCHER
CTGFVERS EQU   CTGFVXA+4,2,C'H'        VERSION
CTGFVLNA EQU   CTGFVXA+6,2,C'H'        LENGTH
CTGFVFL3 EQU   CTGFVXA+8,2,C'B'        FLAGS
*
DWD      DS    D                       WORK
WORK265  DS    XL265                   WORK AREA FOR LISTCAT, DELETE.
DYNL     EQU   *-DYN
         PRINT NOGEN
         YREGS                         SYS1.MACLIB
         IHAPSA DSECT=YES
         IHAASCB DSECT=YES,LIST=NO
         IHAASXB
         IHAACEE
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//LKED    EXEC PGM=IEWL,PARM=REUS
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(DEFGDGSR)
