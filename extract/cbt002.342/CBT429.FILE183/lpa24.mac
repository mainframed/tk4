/*--------------------------------------------------------------------*\
×*                                                                    *×
×* MODULE NAME = LPA24                                                *×
×*                                                                    *×
×* DESCRIPTIVE NAME = Display PLPA usage below the 16MB line.         *×
×*                                                                    *×
×* STATUS = R100                                                      *×
×*                                                                    *×
×* FUNCTION = Scan the PLPA directory and display the size of         *×
×*            the RMODE=24 modules, along with the size used by       *×
×*            each system component, based on the first three         *×
×*            characters of module names.  This command can help      *×
×*            system administrators in their efforts to reduce        *×
×*            the size of the PLPA below the 16MB line.               *×
×*                                                                    *×
×* AUTHOR   =  Gilbert Saint-flour <gsf@pobox.com>                    *×
×*                                                                    *×
×* DEPENDENCIES = TSO/E V2                                            *×
×*                STEMVIEW routine R105 (optional)                    *×
×*                                                                    *×
×* SYNTAX   =  LPA24                                                  *×
×*               ALL   When the ALL option is specified, each         *×
×*                     module is displayed.  When ALL is not          *×
×*                     specified, only totals are displayed.          *×
×*                                                                    *×
×* Sample Output with ALL option:                                     *×
×*                                                                    *×
×*      Module   EntPt    Flags   Size LoadPt                         *×
×*      AMDUSRFE 00E3E040 B1 22   1808                                *×
×*      AMDUSRFF 00EBA000 B1 22  12720                                *×
×*          2 AMD modules:       14528                                *×
×*      ARCATTNW 00E0CBC0 B1 22   1320 E0CAD8                         *×
×*          1 ARC modules:        1320                                *×
×*       .  .  .  .  .  .  .  .  .  .  .  .  .                        *×
×*      SECLOADA 00CECDE8 B1 22    536                                *×
×*          1 SEC modules:         536                                *×
×*        All 307 modules:     1920272                                *×
×*                                                                    *×
\*--------------------------------------------------------------------*/
ARG parm
ispf=SYSVAR(SYSISPF)='ACTIVE'
IF ispf THEN
  'ISREDIT MACRO (parm)'
UPPER parm
IF parm\='' & parm\='ALL' THEN DO
  SAY 'Invalid parameter, must be ALL or blank'
  EXIT 20
  END
  /*----------------------------------------------------------------*\
  ×*          Retrieve RMODE=24 modules from PLPA directoty         *×
  \*----------------------------------------------------------------*/
SAY 'LPA24 1.00 - Scanning the PLPA directory.'
x=TIME('R')                            /* reset timer                 */
cvt = C2D(STORAGE(10,4))               /* CVT                 CVTPTR  */
lpde = C2D(STORAGE(D2X(cvt+361),3))    /* PLPA Directory      CVTLPDIR*/
n=0
DO FOREVER
  temp=STORAGE(D2X(lpde),40)
  PARSE VAR temp WITH 1 . 9 modnm 17 ep 21 maj 25 flgs 33 len 37 ldpt
  IF LEFT(modnm,1)='FF'X THEN LEAVE
  IF LEFT(ldpt,1)='00'X & LEFT(len,1)='00'X THEN DO
    PARSE VAR flgs WITH 1 . 5 attr 6 attr2 7 .
    n=n+1
    line.n = modnm C2X(ep) C2X(attr) C2X(attr2) RIGHT(c2d(len),6)
    IF RIGHT(ep,3)\=RIGHT(ldpt,3) THEN
      line.n = line.n C2X(RIGHT(ldpt,3)) /* entry-point \= load-point */
    END
  lpde=lpde+40
END
SAY 'End of PLPD scan; elapsed time:' TIME('R') 'seconds.'
SAY 'Number of RMODE=24 modules found:' n
CALL QSORT 1,n                         /* Sort the data lines         */
SAY 'End of SORT phase; elapsed time:' TIME('R') 'seconds.'
  /*----------------------------------------------------------------*\
  ×*            Add up module sizes by 3-char prefix                *×
  \*----------------------------------------------------------------*/
"MAKEBUF"
IF parm='ALL' THEN
  QUEUE 'Module   EntPt    Flags   Size LoadPt'
prefix=''
total=0
  DO i=1 TO n
    IF LEFT(line.i,3)\=prefix THEN DO
      IF prefix\='' THEN DO
        QUEUE RIGHT(i-j,5) prefix 'modules:' RIGHT(sum,11)
        total=total+sum                /* grand total                 */
        END
      prefix=LEFT(line.i,3)            /* 3-char module prefix        */
      j=i
      sum=0
      END
      sum=sum+WORD(line.i,5)
    IF parm='ALL' THEN
      QUEUE line.i
  END
QUEUE RIGHT(i-j,5) prefix 'modules:' RIGHT(sum,11)
QUEUE '  All' n      'modules:' RIGHT(total,11)
  /*----------------------------------------------------------------*\
  ×*                  Display the output                            *×
  \*----------------------------------------------------------------*/
IF ispf THEN DO
  SIGNAL ON SYNTAX                  /* in case STEMVIEW not available */
  CALL STEMVIEW 'VIEW',,,,'RMODE=24 Modules in PLPA'
  END
ELSE
  CALL DISPLAY                      /*    not running in ISPF         */

"DROPBUF"
EXIT

SYNTAX:                            /* STEMVIEW function not available */
  error=rc
  'ISPEXEC CONTROL DISPLAY LINE START(1)'
  SAY 'REXX error' error 'in line' sigl':' errortext(error)
  SAY sourceline(sigl)
  SAY ''

DISPLAY:  DO WHILE QUEUED()>0; PULL line; SAY line; END
  "DROPBUF"
  EXIT
  /*----------------------------------------------------------------*\
  ×*                      QuickSort Routine                         *×
  \*----------------------------------------------------------------*/
QSORT: PROCEDURE EXPOSE line.
  ARG l,r
  i = TRUNC((l + r) / 2)
  keep = line.i
  i = l
  j = r
  DO until i > j
    DO i = i WHILE line.i < keep; END
    DO j = j BY -1 WHILE keep < line.j; END
    IF i <= j THEN DO
      save = line.i
      line.i = line.j
      line.j = save
      i = i + 1
      j = j - 1
      END
  END
  IF j - l > r - i THEN DO
    IF i < r THEN
      CALL QSORT i,r
    IF l < j THEN
      CALL QSORT l,j
    END
  ELSE DO
    IF l < j THEN
      CALL QSORT l,j
    IF i < r THEN
      CALL QSORT i,r
    END
  RETURN
