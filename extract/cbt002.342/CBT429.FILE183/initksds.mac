//GILBERTI JOB (ACCT#),INITKSDS,
// NOTIFY=&SYSUID,
//*RESTART=GO,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
***********************************************************************
*                                                                     *
* MODULE NAME = INITKSDS                                              *
*                                                                     *
* DESCRIPTIVE NAME = Initialize a KSDS                                *
*                                                                     *
* FUNCTION = INITKSDS allows you to change a VSAM KSDS from "create"  *
*            mode to "non-create" mode.  INITKSDS may be invoked as   *
*            a TSO command, a batch program, or a subroutine.         *
*                                                                     *
* STATUS = R105                                                       *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA or OS/390                                 *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
* MODULE TYPE = PROCEDURE, (TSO Command Processor)                    *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 PROBLEM STATE, KEY 8                                *
*                                                                     *
* OPERATION = See Below                                               *
*                                                                     *
*        A KSDS is in create mode from the time it is DEFINEd         *
*        until a record is written into it.  If a program OPENs       *
*        for input, I-O or with STRNO=2 a KSDS in create mode,        *
*        OPEN fails with R15=8,ERROR=160.  "Create" mode is also      *
*        called "load" mode.                                          *
*                                                                     *
*        To change its status from "create" mode to "non-create"      *
*        mode, a KSDS must be OPEN'd for output, a record must be     *
*        written into it, then it must be CLOSEd.  From that point    *
*        on, the KSDS may be OPEN'd without restriction.              *
*                                                                     *
*        INITKSDS proceeds as follows:                                *
*                                                                     *
*        1. Dynamically ALLOCATE the data set with DISP=SHR           *
*           (unless the OLD key-word is specified in which case       *
*           DISP=OLD is used).                                        *
*                                                                     *
*        2. OPEN the data set for output (MACRF=OUT) and check        *
*           that it really is a KSDS                                  *
*                                                                     *
*        3. check that the KSDS contains no records                   *
*                                                                     *
*        4. WRITE a dummy record                                      *
*                                                                     *
*        5. CLOSE the data set                                        *
*                                                                     *
*        6. OPEN the data set again for I-O with MACRF=(IN,OUT)       *
*                                                                     *
*        7. DELETE the dummy record                                   *
*                                                                     *
*        8. CLOSE the data set and FREE it up                         *
*                                                                     *
*        If the RESET option is specified, INITKSDS proceeds          *
*        as follows:                                                  *
*                                                                     *
*        1. ALLOCATE the data set and OPENs it for I-O                *
*                                                                     *
*        2. DELETE all of the records, one by one                     *
*           (this can take a while if the KSDS is big)                *
*                                                                     *
*        3. CLOSE the data set (which is now empty and in             *
*           non-create mode).                                         *
*                                                                     *
* SYNTAX = See Below                                                  *
*                                                                     *
*        INITKSDS may be invoked as a TSO command using the           *
*        following syntax:                                            *
*                                                                     *
*            INITKSDS 'data-set-name'                                 *
*                      RESET/NORESET/ERASE/DELETE                     *
*                      SHR/OLD                                        *
*                                                                     *
*            'data-set-name' is the data set name of the KSDS.        *
*                                                                     *
*            'NORESET' specifies that the KSDS has just been          *
*            DEFINEd, contains no records, and must be converted to   *
*            "non-create" mode by adding/deleting a dummy record.     *
*            This is the default.                                     *
*                                                                     *
*            'RESET' specifies that the KSDS contains records and     *
*            that these records should be deleted.  RESET can be      *
*            used instead of DELETE/DEFINE/INITKSDS to create an      *
*            empty KSDS in non-create mode.  ERASE or DELETE are      *
*            equivalent to RESET.                                     *
*                                                                     *
*            'OLD' specifies that the data-set(s) should be           *
*            allocated with DISP=OLD instead of SHR, which is the     *
*            default.                                                 *
*                                                                     *
*        INITKSDS may be invoked as a batch program, using the        *
*        following JCL:                                               *
*                                                                     *
*            //MYJOB   JOB (ACCT#),'JOHN DOE', . . .                  *
*            //*                                                      *
*            //INITKSDS EXEC PGM=INITKSDS                             *
*            //INITKSDS  DD  DISP=SHR,DSN=my.new.vsam.ksds            *
*                                                                     *
*                                                                     *
*        INITKSDS may be also be invoked from an assembler program,   *
*        as follows:                                                  *
*                                                                     *
*                      LA    R1,MYACB                                 *
*                      LINK  EP=INITKSDS                              *
*            .  .  .  .  .  .  .  .  .  .                             *
*            MYACB     ACB   DDNAME=MYDDNAME,MACRF=(IN, . .           *
*                                                                     *
*          If the VSAM data set is allocated with FREE=CLOSE,         *
*          INITKSDS re-allocates it dynamically to initialize it.     *
*                                                                     *
* RETURN CODES                                                        *
*                                                                     *
*        RC=16    invalid PARM field                                  *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*   $102 INITKSDS may be invoked as a PGM with R1 pointing to an ACB  *
*   $103 Use alternate DDname when the data set has FREE=CLOSE        *
*   $104 Complete FREE=CLOSE enhancement, fix others errors.          *
*   $105 RESET/NORESET can now be specified in the JCL PARM           *
*                                                                     *
***********************************************************************
INITKSDS CSECT
INITKSDS RMODE ANY
         SAVE  (14,12),,'GSF UTILITIES - INITKSDS R105'
         LR    R12,R15                 BASE REGISTER
         USING INITKSDS,R12
***********************************************************************
*        ALLOCATE DYNAMIC STORAGE AREA                                *
***********************************************************************
         GETMAIN R,LV=DYNAML           ACQUIRE DYNAMIC STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LM    R13,R1,8(R13)
         USING DYNAM,R13
         LR    R11,R1                  POINT AT CPPL.
         USING CPPL,R11
         LA    R14,DYNAM+72            clear dynamic storage
         LA    R15,DYNAML-72           clear dynamic storage
         SLR   R1,R1                   clear dynamic storage
         MVCL  R14,R0                  clear dynamic storage
         MVC   IFGACB(MODELACB_LENGTH),MODELACB
         MVC   IFGRPL(MODELRPL_LENGTH),MODELRPL
         MVI   RESET,C'N'              DEFAULT IS 'NORESET'
         TM    CPPL,X'80'              AM I INVOKED AS A PROGRAM?
         BO    PGM00                   YES, JUMP
***********************************************************************
*        BUILD PARAMETER LIST FOR IKJEFF02                            *
***********************************************************************
         ST    R11,MTCPPLP             STORE CPPL ADDRESS IN MTPL
         LA    R0,MTCSECTP             MESSAGE SECTION
         ST    R0,MTPLPTR              STORE ADDR IN MTPL
         LA    R0,DYNECB               EVENT CONTROL BLOCK
         ST    R0,MTECBP               STORE ECB IN MTPL
         L     R0,=A(MSGCSECT)         MESSAGE CSECT
         ST    R0,MTCSECTP             STORE ECT IN PPL
         OI    MTSW1,MTPUTLSW          PUTLINE IS NEEDED
         OI    MTSW1,MTNHEXSW          XLATE TO DECIMAL
         OI    MTSW2,MTFMT             31-BIT PARM LIST
***********************************************************************
*        BUILD PARSE PARM LIST, CALL IKJPARS                          *
***********************************************************************
PARSE000 LA    R1,WORKAREA             POINT TO PPL
         USING PPL,R1                  SET UP ADDRESSABILITY TO PPL
         L     R0,CPPLUPT              USER PROFILE TABLE
         ST    R0,PPLUPT               STORE UPT ADDRESS IN PPL
         L     R0,CPPLECT              ENVIRONMENT CONTROL TABLE
         ST    R0,PPLECT               STORE ECT IN PPL
         LA    R0,DYNECB               EVENT CONTROL BLOCK
         ST    R0,PPLECB               STORE ECB IN PPL
         MVC   PPLPCL,=A(PCLCSECT)     STORE PCL ADDR INTO PPL
         LA    R0,WORD1                ANSWER AREA
         ST    R0,PPLANS               STORE ANSWER ADDRESS IN PPL
         L     R0,CPPLCBUF             COMMAND BUFFER
         ST    R0,PPLCBUF              STORE BUFFER ADDRESS IN PPL
         L     R15,CVTPTR              CVTPTR
         L     R15,CVTPARS-CVTMAP(,R15) address of IKJPARS
         SYNCH (R15)                   call IKJPARS
         LTR   R2,R15                  CHECK FOR ZERO PARSE RETURN
         BNZ   FINISH                  GO AWAY UPSET
         DROP  R1                      WAS PPL
***********************************************************************
*        PROCESS PARSED PARAMETERS                                    *
***********************************************************************
         MVI   PGMCMD,C'C'             MODE=CMD
         L     R8,WORD1                LOAD PDL ADDRESS
         USING IKJPARMD,R8             SET UP ADDRESSABILITY TO PDL
PARSE100 LA    R14,DSNAME              44-BYTE AREA
         LA    R15,L'DSNAME            GET LENGTH
         L     R0,DSNPCE               GET ADDRESS
         LH    R1,DSNPCE+4             ACTUAL LENGTH OF DSN
         ICM   R1,B'1000',=C' '        PADDING
         MVCL  R14,R0                  MOVE DATA SET NAME
PARSE200 MVC   STATUS(8),=AL2(DALSTATS,1,1,X'0800') DISP=SHR KEY
         CLI   STATPCE+1,2             CHECK FOR 2ND IKJPNAME
         BNE   PARSE300                JUMP IF NOT THE 2ND
         MVI   STATUS+6,X'01'          DISP=OLD KEY
PARSE300 EQU   *
         CLI   RSTPCE+1,2              CHECK FOR 2ND IKJPNAME
         BNE   PARSE999                JUMP IF NOT THE 2ND
         MVI   RESET,C'R'              2ND IS 'RESET'
         MVI   STATUS+6,X'01'          DISP=OLD KEY
PARSE999 IKJRLSA WORD1                 RELEASE PDL
         B     ALLOC000                allocate and open
***********************************************************************
*        INITKSDS IS INVOKED AS A PROGRAM                             *
***********************************************************************
PGM00    MVI   PGMCMD,C'P'             MODE=PGM
         CLC   ACBID,CPPL              R1 POINTS TO AN ACB?
         BE    PGM50                   yes, jump
*
*        Check PARM when invoked in a JCL step
*
         L     R2,CPPL                 parm address
         CLI   0(R2),0                 parm OK?
         BNE   BADPARM                 no, error
         CLI   1(R2),0                 PARM=''?
         BE    PGM21                   yes, continue
         CLI   1(R2),7                 PARM=NORESET?
         BNE   PGM15                   no, jump
         CLC   =C'NORESET',2(R2)       PARM=NORESET?
         BE    PGM21                   no, jump
PGM15    CLI   1(R2),5                 PARM=RESET?
         BNE   BADPARM                 no, bad parm
         CLC   =C'RESET',2(R2)         PARM=RESET?
         BNE   BADPARM                 no, bad parm
*
PGM20    MVI   RESET,C'R'              PARM='RESET'
PGM21    BAL   R14,GETDSN           <- retrieve dsname
         B     OPEN                    continue
***********************************************************************
*        INITKSDS was invoked as a sub-routine with                   *
*        the address of an ACB in R1                                  *
*                                                                     *
*        If the data set was allocated with FREE=CLOSE,               *
*        reallocate it for our own processing.                        *
***********************************************************************
PGM50    MVC  ACBDDNM,ACBDDNM-IFGACB+CPPL MOVE DDNAME FROM CALLER'S ACB
         BAL   R14,GETDSN           <- retrieve dsname
         LTR   R15,R15                 DD missing?
         BNZ   OPEN                    yes, fail
         L     R1,DSAB1                addr of the DSAB
         TM    DSABFLG2-DSAB(R1),DSABUNAL FREE=CLOSE?
         BZ    OPEN                    no, jump
***********************************************************************
*        Allocate the VSAM data set                                   *
***********************************************************************
ALLOC000 LA    R2,WORKAREA             S99RB
         ST    R2,DFS99RBP             S99RBPTR
         OI    DFS99RBP,X'80'          S99RBPND
         LA    R0,=AL1(0,DFSVC99)      PUTLINE ONLY, SVC99
         ST    R0,DFIDP                BUILD PARML FOR DAIRFAIL
         ST    R11,DFCPPLP             ADDR OF CPPL
*
         LA    R0,L'DSNAME             LENGTH OF INSERT           (1)
         ST    R0,MTLEN+00             LENGTH OF INSERT
         LA    R0,DSNAME               RETURN CODE
         ST    R0,MTADDR+00            ADDRESS OF INSERT
*
         USING S99RB,R2
         XC    S99RB(S99RBEND-S99RB),S99RB  CLEAR DYNALLOC WORK SPACE
         MVI   S99RBLN,S99RBEND-S99RB  RB LENGTH
         MVI   S99VERB,S99VRBAL        VERB IS "ALLOCATE"
         LA    R0,S99RBEND             END OF RB, START OF T.U. PTRS
         ST    R0,S99TXTPP             TEXT UNIT POINTERS
*
         OI    S99FLG11,S99NOCNV       DO NOT USE EXISTING DD
         OI    S99FLG11,S99NOMNT       DO NOT MOUNT VOLUMES
         LA    R14,TU55DDN             DDNAME TEXT UNIT
         MVC   0(6,R14),=AL2(DALRTDDN,1,L'DDNAME) RETURN DDNAME KEY
         LA    R15,TU02DSN             DSNAME TEXT UNIT
         MVC   0(6,R15),=AL2(DALDSNAM,1,L'DSNAME) DSNAME KEY
         LA    R0,STATUS               ADDRESS OF STATUS KEY
         LA    R1,TU57ORG              RETURN DSORG
         MVC   0(6,R1),=AL2(DALRTORG,1,L'DSORG)  DSORG
         STM   R14,R1,S99RBEND+00      FIRST TO THIRD TEXT UNIT PTRS
         OI    S99RBEND+12,X'80'       END OF LIST
*
         LA    R1,DFS99RBP             S99RBPTR
         DYNALLOC ,                    ISSUE SVC 99 (ALLOCATE)
         LTR   R15,R15
         BNZ   MSG99                   ALLOCATION FAILED, EXIT
         DROP  R2                      WAS S99RB
         CLC   DSORG,=AL2(ACBDORGA)    DSORG=VS?
         BNE   MSG99NVS                NOT A VSAM DATA SET
         MVC   ACBDDNM,DDNAME          MOVE THE RETURNED DDNAME
***********************************************************************
*        OPEN THE VSAM DATA SET                                       *
***********************************************************************
OPEN     LA    R2,IFGACB               POINT TO ACB
         ST    R2,OPENLIST             MAKE OPEN LIST
         ST    R2,RPLDACB              SET UP RPL
         MVI   OPENLIST,X'80'          FREE=CLOSE OPTION
         OPEN  MF=(E,OPENLIST)         OPEN THE ACB
         CH    R15,=H'4'               OPEN OK?
         BH    MSGOPEN                 NO, QUIT
*
         TESTCB ACB=(R2),ATRB=KSDS,    IS THIS A KSDS?                 X
               MF=(G,WORKAREA,TESTCBL)
         BNE   MSG99NVS                NOT A VSAM DATA SET
*
         SHOWCB ACB=(R2),AREA=(S,MAXRECNO),LENGTH=08,                  X
               FIELDS=(NLOGR,LRECL),MF=(G,WORKAREA,SHOWCBL)
***********************************************************************
*        PROCESS THE OPEN'D DATA SET                                  *
***********************************************************************
         L     R0,MAXLRECL             get lrecl
         ST    R0,RPLRLEN              RECORD LENGTH
         GETMAIN RU,LV=(0)             allocate record area
         ST    R0,RPLBUFL              BUFFER LENGTH
         ST    R1,RPLAREA              SET UP THE RPL
         ST    R1,RPLARG               SET UP THE RPL
         CLI   RESET,C'R'              OPTION RESET SPECIFIED?
         BE    RESET00                 YES, JUMP
***********************************************************************
*        ADD/DELETE A DUMMY RECORD
***********************************************************************
ADDDEL   ICM   R0,B'1111',MAXRECNO     DATA SET EMPTY?
         BNZ   MSGFULL                 NO, ERROR
         MVC   REQUEST,=C'PUT  '       SET REQUEST FOR MESSAGE
         PUT   RPL=IFGRPL              ADD A DUMMY RECORD
         LTR   R15,R15                 PUT OK?
         BNZ   MSGREQ                  NO, QUIT
ADDDEL9  CLOSE MF=(E,OPENLIST)         CLOSE THE ACB
         OPEN  MF=(E,OPENLIST)         RE-OPEN THE ACB
         LTR   R15,R15                 OPEN OK?
         BNZ   MSGOPEN                 NO, QUIT
***********************************************************************
*        PROCESS THE 'RESET' FUNCTION (DELETE ALL OF THE RECORDS      *
***********************************************************************
*LOOP
RESET00  MVC   REQUEST,=C'GET  '       SET REQUEST FOR MESSAGE
         OI    RPLOPT2,RPLUPD          OPTCD=UPD
         GET   RPL=IFGRPL              READ THE FIRST RECORD
         LTR   R15,R15                 GET OK?
         BNZ   MSGREQ                  NO, QUIT
RESET20  MVC   REQUEST,=C'ERASE'       SET REQUEST FOR MESSAGE
         ERASE RPL=IFGRPL              DELETE THE FIRST RECORD
         LTR   R15,R15                 ERASE OK?
         BNZ   MSGREQ                  NO, QUIT
         B     RESET00
*ENDLOOP
***********************************************************************
*        ISSUE MESSAGES                                               *
***********************************************************************
MSG99    MVC   MTMSGID,=C'99  '        DYNALLOC ERROR
         CLI   PGMCMD,C'P'             MODE=PGM ?
         BE    ISSUEMSG                YES, DO NOT CALL DAIRFAIL
         ST    R15,RETCODE             RETURN CODE
         LA    R0,RETCODE              RETURN CODE
         ST    R0,DFRCP                RETURN CODE
         LA    R0,=A(0)                NO ADDR FOR IKJEFF02
         ST    R0,DFJEFF02             RETURN CODE
         LA    R1,DFPARMS              DAIRFAIL PARM LIST
         LINK  EP=IKJEFF18             Call the DAIRFAIL routine
         LA    R2,12                   RETURN-CODE
         B     ISSUEMSG                ISSUE MESSAGE
*
MSG99NVS MVC   MTMSGID,=C'NVS '        NON-KSDS
         LA    R2,8                    RETURN-CODE = 8
         B     ISSUEMSG                ISSUE MESSAGE
*
MSGOPEN  MVC   MTMSGID,=C'OPEN'        "OPEN FAILED" MESSAGE
         ST    R15,RETCODE             RETURN CODE
*
         LA    R0,L'RETCODE            LENGTH OF INSERT           (2)
         ST    R0,MTLEN+08             LENGTH OF INSERT
         OI    MTHIGHL+08,X'80'        XLATE TO DECIMAL
         LA    R0,RETCODE              RETURN CODE
         ST    R0,MTADDR+08            ADDRESS OF INSERT
         LA    R2,12                   RETURN-CODE
         B     ISSUEMSG                ISSUE MESSAGE
*
MSGFULL  MVC   MTMSGID,=C'FULL'        NON-EMPTY
         LA    R2,12                   RETURN-CODE
         B     ISSUEMSG                ISSUE MESSAGE
*
MSGREQ   MVC   MTMSGID,=C'REQ '        "ERASE FAILED" MESSAGE
         ST    R15,RETCODE             RETURN CODE
*
         LA    R0,L'REQUEST            LENGTH OF INSERT           (1)
         ST    R0,MTLEN+00             LENGTH OF INSERT
         LA    R0,REQUEST              RETURN CODE
         ST    R0,MTADDR+00            ADDRESS OF INSERT
*
         LA    R0,L'DSNAME             LENGTH OF INSERT           (2)
         ST    R0,MTLEN+08             LENGTH OF INSERT
         LA    R0,DSNAME               RETURN CODE
         ST    R0,MTADDR+08            ADDRESS OF INSERT
*
         LA    R0,L'RPLFDBK            LENGTH OF INSERT           (3)
         ST    R0,MTLEN+16             LENGTH OF INSERT
         OI    MTHIGHL+16,X'80'        XLATE NUMERIC
         OI    MTSW1,MTHEXSW           XLATE TO HEX
         LA    R0,RPLFDBK              RETURN CODE
         ST    R0,MTADDR+16            ADDRESS OF INSERT
         LA    R2,12                   RETURN-CODE
         B     ISSUEMSG                ISSUE MESSAGE
***********************************************************************
*        End-of-file on VSAM data set                                 *
***********************************************************************
CLOSE    LTR   R15,R15                 CLOSE OK?
***      BNZ   MSGCLOS                 NO, QUIT
         MVC   MTMSGID,=C'00  '        INITKSDS SUCCESSFUL
         LA    R2,0                    RC=0
*
ISSUEMSG CLI   PGMCMD,C'P'             MODE=PGM ?
         BE    FINISH                  YES, IGNORE MESSAGE
         L     R15,CVTPTR              ADDR OF CVT
         L     R15,CVTEFF02-CVTMAP(,R15) ADDR OF IKJEFF02
         LA    R1,MTPARML              POINT TO PPL
         SYNCH (R15)                   CALL THE MESSAGE ISSUER
         B     FINISH                  GO AWAY UPSET
***********************************************************************
*        CLOSE THE ACB, CLEAN UP, RETURN.                             *
***********************************************************************
BADPARM  LA    R2,16                   RC=16: bad parm
*
FINISH   TM    ACBOFLGS,ACBOPEN        ACB OPEN?
         BZ    FINISH2                 NO, JUMP
         CLC   DSORG,=AL2(ACBDORGA)    DD allocated dynamically?
         BNE   FINISH1                 NO, JUMP
         OI    OPENLIST,X'20'          yes, FREE=CLOSE
FINISH1  CLOSE MF=(E,OPENLIST)         CLOSE/FREE
FINISH2  ICM   R1,B'1111',RPLAREA      buffer address
         BZ    FINISH8                 NO, JUMP
         L     R0,RPLBUFL              BUFFER LENGTH
         FREEMAIN RU,LV=(0),A=(1)      FREE RECORD AREA
FINISH8  LR    R1,R13                  ADDRESS OF DYNAMIC AREA
         L     R13,4(,R13)             CALLER'S SAVE AREA
         FREEMAIN RU,LV=DYNAML,A=(1)   FREE DYNAMIC STORAGE AREA
         LR    R15,R2                  PASS RETURN CODE
         RETURN (14,12),RC=(15)        GOBACK TO CALLER
***********************************************************************
*        Retrieve dsname from the JFCB                                *
***********************************************************************
GETDSN   BAKR  R14,0
         GETDSAB DDNAME=ACBDDNM,       get the DSAB address            +
               MF=(E,GETDSABL),        work area                       +
               DSABPTR=DSAB1           output area
         LTR   R15,R15                 DD missing?
         BNZ   GETDSN9                 yes, quit
         L     R2,DSAB1                A(DSAB)
         USING DSAB,R2
         LA    R3,WORKAREA             WORK AREA
         ST    R3,WORD1                STORE POINTER
         USING ZB505,R3
         XC    SWAEPAX,SWAEPAX         CLEAR 28 BYTES
         L     R1,DSABTIOT             TIOT entry
         MVC   SWVA,TIOEJFCB-TIOENTRY(R1) move SVA of the JFCB
         SWAREQ FCODE=RL,EPA=WORD1,MF=(E,SWAREQL1),UNAUTH=YES
         L     R1,SWBLKPTR             LOAD SWA CONTROL BLOCK ADDRESS
         MVC   DSNAME,0(R1)            move dsname from JFCB
GETDSN9  PR
         DROP  R2,R3                   DSAB,ZB505
***********************************************************************
*        MODEL CONTROL BLOCKS, MOVED TO DYNAMIC STORAGE               *
***********************************************************************
MODELACB ACB DDNAME=INITKSDS,MACRF=(ADR,SEQ,IN,OUT),EXLST=EXLST1
MODELACB_LENGTH EQU *-MODELACB
MODELRPL RPL ACB=*-*,OPTCD=(KEY,SEQ,MVE),AREA=*-*,AREALEN=*-*,ARG=*-*
MODELRPL_LENGTH EQU *-MODELRPL
EXLST1   EXLST EODAD=CLOSE
***********************************************************************
*        DEFINE MESSAGES TO BE ISSUED VIA IKJEFF02                    *
***********************************************************************
MSGCSECT IKJTSMSG ('MSG000 ',,' SUCCESSFULLY INITIALIZED.'),00
         IKJTSMSG ('MSG008 OPEN FAILED FOR ',,                         X
               ', RETURN CODE IS ',,'.'),OPEN
         IKJTSMSG ('MSG012 ',,' REQUEST FAILED FOR ',,                 X
               ', FDBK=',,'.'),REQ
         IKJTSMSG ('MSG021 ',,' IS NOT A VSAM KSDS.'),NVS
         IKJTSMSG ('MSG034 ',,' IS NOT AN EMPTY VSAM DATA SET.'),FULL
         IKJTSMSG ('MSG099 DYNALLOC FAILED FOR ',,'.'),99
         IKJTSMSG
***********************************************************************
*        DEFINE INPUT PARAMETERS FOR IKJPARS                          *
***********************************************************************
PCLCSECT IKJPARM
PCLCSECT RMODE ANY
DSNPCE   IKJPOSIT DSNAME,USID,PROMPT='DATA SET NAME'
RSTPCE   IKJKEYWD
         IKJNAME 'NORESET'
         IKJNAME 'RESET',ALIAS=('ERASE','DELETE')
STATPCE  IKJKEYWD
         IKJNAME 'SHR'
         IKJNAME 'OLD'
         IKJENDP
***********************************************************************
*        DYNAMIC STORAGE AREA                                         *
***********************************************************************
DYNAM    DSECT
         DS    18F                     SAVE AREA
WORD1    DS    F                       ANSWER AREA
DYNECB   DS    A                       ECB for parse, IKJEFF02
RETCODE  DS    F                       RETURN CODE
DSAB1    DS    A(DSAB)                 addr of the DSAB
PGMCMD   DS    C                       P=PGM C=CMD
RESET    DS    C                       R=RESET N=NORESET
*
STATUS   DS    AL2(DALSTATS,1,1,X'0800') STATUS KEY, SHR OR OLD
TU02DSN  DS    AL2(DALDSNAM,1,44)   +0 DATA SET NAME KEY
DSNAME   DS    CL44                 +6 DATA SET NAME
TU55DDN  DS    AL2(DALRTDDN,1,8)    +0 RETURN DDNAME
DDNAME   DS    C'SYS45678'          +6 DDNAME
TU57ORG  DS    AL2(DALRTORG,1,2)    +0 RETURN DSORG
DSORG    DS    X'0000'              +6 VDSORG
*
REQUEST  DS    C'ERASE'                VSAM REQUEST
MAXRECNO DS    F'12345678'          +0 MAX RECORD NUMBER       (SHOWCB)
MAXLRECL DS    F'32760'             +4 MAX LRECL               (SHOWCB)
         IKJEFFMT MTDSECT=NO,MTFORMAT=NEW
         IKJEFFDF DFDSECT=NO,DFDSEC2=NO
OPENLIST OPEN   IFGACB,MF=L            OPEN LIST
         IFGACB DSECT=NO
         IFGRPL DSECT=NO
         GETDSAB MF=(L,GETDSABL)       PARM LIST FOR GETDSAB
SWAREQL1 SWAREQ MF=L                   PARM LIST FOR SWAREQ
*
WORKAREA DS    0D                      All-purpose work area
         ORG   WORKAREA+PPL_LENGTH
         ORG   WORKAREA+L'SWAEPAX
         ORG   WORKAREA+(S99RBEND-S99RB)+4
         ORG   WORKAREA+TESTCBL
         ORG   WORKAREA+SHOWCBL
         ORG   ,                       high water-mark
DYNAML   EQU   *-DYNAM                 LENGTH OF WORK AREA
*
*              MACROS FROM SYS1.MACLIB
*
         IKJPPL                        PARSE PARAMETER LIST
PPL_LENGTH EQU *-PPL
         IKJCPPL                       COMMAND PROCESSOR PARM LIST
         IEFZB4D0                      DYNALLOC REQUEST BLOCK
         IEFZB4D2                      DYNALLOC TEXT UNIT KEYS
         IEFZB505 LOCEPAX=YES          EPA MAPPING FOR SWAREQ
         IEFJESCT TYPE=DSECT           JES CONTROL TABLE
         IEFTIOT1                      TIOT DSECT
         CVT DSECT=YES,LIST=NO
         IHADSAB                       DATA SET ASSOCIATION BLOCK
         YREGS                         REGISTER EQUATES
         END   INITKSDS
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,5)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//LKEDTEMP EXEC PGM=IEWL,PARM=(LIST,MAP,RENT)
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DSN=&&TEMPLOAD(INITKSDS),DISP=(,PASS),
// UNIT=VIO,SPACE=(TRK,(1,,1))
//SYSPRINT DD SYSOUT=*
//*
//GOPGM   EXEC PGM=INITKSDS
//STEPLIB  DD DSN=&&TEMPLOAD,DISP=(OLD,PASS)
//*NITKSDS DD SPACE=(TRK,100),RECORG=ES,LRECL=100
//INITKSDS DD SPACE=(TRK,100),RECORG=KS,KEYLEN=12,LRECL=100
//*
//GOCMD   EXEC PGM=IKJEFT01
//STEPLIB  DD DSN=&&TEMPLOAD,DISP=(OLD,PASS)
//SYSTSIN  DD *
DEF CL(NAME(CL)    IX)
REPRO ODS(CL) IFILE(STEPLIB) COUNT(1) REPLACE
INITKSDS CL RESET
INITKSDS CL NORESET
REPRO ODS(CL) IFILE(STEPLIB) COUNT(1)
INITKSDS CL
INITKSDS CL RESET
DELETE CL
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//ABNLIGNR DD DUMMY
//SYSUDUMP DD SYSOUT=*
//*
//ASMH2 EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
TESTPGM  CSECT
         BASR  12,0
         USING *,12
         LA    1,ACB1
         LINK  EP=INITKSDS
         SVC   3
ACB1     ACB   DDNAME=KSDS1
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//LKED2   EXEC PGM=IEWL
//SYSLIN   DD DSN=*.ASMH2.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DSN=&&TEMPLOAD(TESTPGM),DISP=(MOD,PASS)
//SYSPRINT DD SYSOUT=*
//*
//GO      EXEC PGM=TESTPGM,REGION=4M
//STEPLIB  DD DSN=&&TEMPLOAD,DISP=(OLD,PASS)
//KSDS1    DD SPACE=(TRK,100),RECORG=KS,KEYLEN=12,LRECL=100
//SYSDEBUG DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//*
//LKED    EXEC PGM=IEWL,PARM=(LIST,MAP,RENT)
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//SYSLMOD  DD DISP=SHR,DSN=GILBERT.LOAD(INITKSDS)
//SYSPRINT DD SYSOUT=*
