//GILBERTL JOB (ACCT#),PACKOFF,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//*
//*      UNPACK A FILE PACKED BY ISPF/PDF OR XEDIT
//*
//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)
UNPACK   CSECT
         SAVE  (14,12),,UNPK-PDF-XEDIT-&SYSDATE
         BALR  R12,0                   BASE REGISTER
         USING *,R12
         ST    R13,SAVEAREA+4          CALLER'S SAVE AREA
         LA    R13,SAVEAREA            MY OWN SAVE AREA
         OPEN  (SYSIN,,SYSPUNCH,OUTPUT)
         GET   SYSIN                   GET FIRST INPUT RECORD, SET R1
         MVI   TENWORDS+0,00           RESET PACKED/UNPACKED FLAG
         MVI   TENWORDS+1,C'F'         RECFM=F
         B     L1GET2                  PROCESS 1ST BLOCK
*LOOP
L1GET    GET   SYSIN                   GET INPUT RECORD, SET R1
L1GET2   MVC   TENWORDS+2(2),SYSIN+82  PASS BLOCK LENGTH
*
L1UNPK   LA    R0,TENWORDS             UNPACK WORK AREA
         L     R15,=A(PACKOFF)         UNPACK ROUTINE
         BALR  R14,R15             <== INVOKE "PACKOFF" ROUTINE
         LTR   R15,R15                 DO I NEED ANOTHER INPUT RECORD?
         BNZ   L1GET                   YES, GET ONE
         LR    R0,R1                   PASS ADDR OF UNPACKED RECORD
         PUT   SYSPUNCH,(0)            PRINT IT
         B     L1UNPK
*ENDLOOP
EOD1     CLOSE (SYSIN,,SYSPUNCH)
         FREEPOOL SYSIN                FREE BUFFERS
         FREEPOOL SYSPUNCH             FREE BUFFERS
         L     R13,4(,R13)             CALLER'S SAVE AREA
         RETURN (14,12),RC=00
***********************************************************************
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,EODAD=EOD1,RECFM=U
SYSPUNCH DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPUNCH,RECFM=FB,LRECL=80
SAVEAREA DS    9D
TENWORDS DS    10F
         YREGS                         REGISTER EQUATES
***********************************************************************
*
*        PACKOFF ROUTINE
*
***********************************************************************
PACKOFF  CSECT
         SAVE  (14,12),,*              SAVE REGISTERS
         BALR  R10,0                   ,
         USING *,R10                   ,
         LR    R9,R0                   WORK AREA
         USING UNPKWORK,R9             WORK AREA
*
*              #1.  C'U' UNPACKED FILE
*              #2.  C'P' RE-ENTRY (NEXT LINE REQUESTED)
*              #3.  C'P' RE-ENTRY (FORCED EXIT FOR NEW INPUT REC)
*              #4.  X'00' FIRST TIME
*
         CLI   UNPKWORK,C'U'           IS IT UNPACKED?
         BE    UNPK990                 YES, GOBACK                 (#1)
         L     R2,UNPKSAVE+4           CURRENT POS IN INPUT RECORD
         CLI   UNPKSAVE,X'FF'          FORCED EXIT?
         BE    UNPK110                 NO, BUILD NEXT RECORD       (#2)
         LA    R2,0(,R1)               PASS RCD ADDR, CLEAR HI-BIT
         LR    R3,R2                   PASS ADDR
         AH    R3,UNPKWORK+2           ADD RECORD LENGTH
         LM    R15,R1,UNPKSAVE         RESTORE R14, R0, R1
         STM   R2,R3,UNPKSAVE+4        BEGIN/END OF INREC
         CLI   UNPKWORK,0              FIRST TIME?
         BNER  R15                     NO, RESUME PROCESSING       (#3)
*
*        FIRST TIME - DETERMINE WHETHER THIS IS A PACKED FILE      (#4)
*
UNPK050  MVI   UNPKWORK,C'U'           SET "PACK OFF" FLAG
         MVI   UNPKSAVE,00             INIT "PACK OFF" RETURN CODE
         CLI   UNPKWORK+1,C'F'         RECFM=F?
         BNE   UNPK990                 NO, QUIT
***      CLC   0(8,R2),=X'0001,40,C6,0000,0050'
         CLI   0(R2),00                PACKED FILE?
         BNE   UNPK990                 PACK OFF, JUMP
         CLI   1(R2),1                 CHECK LEVEL
         BNE   UNPK990                 PACK OFF, JUMP
***      CLC   3(1,R2),UNPKWORK+1      COMPARE RECFM
***      BNE   UNPK990                 PACK OFF, JUMP
***      CLC   6(2,R2),UNPKWORK+2      COMPARE LRECL
***      BNE   UNPK990                 PACK OFF, JUMP
*
         MVI   UNPKWORK,C'P'           SET "PACK ON" FLAG
         MVC   UNPKWHDR,0(R2)          SAVE HEADER
         LA    R2,8(,R2)               FIRST CONTROL BYTE
*NEW INREC
UNPK110  ICM   R0,B'1111',UNPKW255+4   LOAD/TEST ADDR OF RECORD AREA
         BNZ   UNPK200                 ALREADY ALLOCATED, JUMP
         GETMAIN R,LV=255              GET A RECORD AREA
         STM   R0,R1,UNPKW255          SAVE LEN/ADDR OF RECORD AREA
         LR    R0,R1                   PASS ADDRESS
*--LOOP
UNPK200  CL    R2,UNPKSAVE+4+4         END OF LINE REACHED?
         BL    UNPK205                 NOT YET, JUMP
         BAL   R14,UNPK600             READ NEW INPUT RECORD
*
UNPK205  CLI   0(R2),X'FF'             END OF FILE OR MEMBER?
         BE    UNPK980                 YES, NEXT MEMBER OR EODAD
         TM    0(R2),X'80'             IS IT A STRING?
         BO    UNPK220                 YES, JUMP
         CLI   0(R2),X'7A'             IS IT A REPEATED CHARACTER?
         BE    UNPK230                 YES, JUMP
*SPACES
UNPK210  SLR   R1,R1
         IC    R1,0(,R2)               GET REPEAT FACTOR -1
         LA    R1,1(,R1)               LENGTH OF STRING
         SLR   R3,R3
         ICM   R3,B'1000',UNPKWHDR+2   PICK UP CHARACTER TO REPEAT
         LA    R2,1(,R2)               BUMP UP PTR IN INPUT RCD
         B     UNPK290                 MOVE SPACES
*STRING
UNPK220  LA    R15,X'0000007F'         MASK FOR "NR"
         IC    R1,0(,R2)               STRING LENGTH-1+X80
         NR    R1,R15                  STRING LENGTH-1
         LA    R1,1(,R1)               LENGTH OF STRING
         LA    R2,1(,R2)               SKIP OVER CONTROL BYTE
         L     R3,UNPKSAVE+4+4         1ST BYTE AFTER INREC
         SR    R3,R2                   LENGTH REMAINING IN INPUT RECORD
         BZ    UNPK220L                CTL BYTE IS LAST BYTE, RE-READ
         CR    R3,R1                   BYTES LEFT, STRING LENGTH
         BNL   UNPK290                 NOT BROKEN, MOVE FULL STRING
*BROKEN STRING
         XR    R1,R3                   SWAP "FROM" AND "TO" LENGTHS
         XR    R3,R1                   SWAP "FROM" AND "TO" LENGTHS
         XR    R1,R3                   SWAP "FROM" AND "TO" LENGTHS
         MVCL  R0,R2                   MOVE 1ST PART OF STRING
         LR    R1,R3                   NUMBER OF BYTES LEFT
UNPK220L BAL   R14,UNPK600             READ NEXT INREC
         LR    R3,R1                   REMAINING LENGTH
         B     UNPK290                 MOVE REST OF STRING
*ALLCHAR
UNPK230  L     R1,UNPKSAVE+4+4         1ST BYTE AFTER INREC
         SLR   R1,R2                   REMAINING LENGTH
         LA    R15,0002                PREPARE "CR"
         CR    R1,R15                  2 BYTES LEFT?
         BE    UNPK232                 YES, JUMP
         BH    UNPK233                 AT LEAST 3, JUMP
*SPLIT ALLCHAR (1)
UNPK231  BAL   R14,UNPK600             READ NEXT INREC
         SLR   R1,R1
         IC    R1,0(,R2)               GET REPEAT FACTOR
         LA    R2,1(,R2)               BUMP UP OVER REPEAT FACTOR
         B     UNPK240                 MOVE ALL CHARS TO OUTPUT RECORD
*SPLIT ALLCHAR (2)
UNPK232  SLR   R1,R1
         IC    R1,1(,R2)               GET REPEAT FACTOR
         BAL   R14,UNPK600             READ NEXT INREC
         B     UNPK240                 MOVE ALL CHARS TO OUTPUT RECORD
*ALLCHAR (3)
UNPK233  SLR   R1,R1
         IC    R1,1(,R2)               GET REPEAT FACTOR
         LA    R2,2(,R2)               BUMP UP OVER 7A02
*
UNPK240  LA    R1,1(,R1)               "TO" LENGTH
         LA    R3,0001                 MOVE JUST ONE BYTE
         ICM   R3,B'1000',0(R2)        INSERT PADDING CHARACTER
*
*     MOVE  STRING - R0=UNPKW255 R1=OUTLEN R2=INADDR   R3=INLEN+PADDING
*
UNPK290  MVCL  R0,R2                   MOVE CHARS TO UNPKW255
UNPK291  L     R1,UNPKW255+4           OUTPUT RECORD
         AH    R1,UNPKWHDR+6           LRECL
         CR    R0,R1                   EOL REACHED YET?
         BL    UNPK200                 NO, LOOP
*--ENDLOOP
         ST    R2,UNPKSAVE+4           CURRENT POS IN INPUT RECORD
         MVC   24(4,R13),UNPKW255+4    PASS ADDR OF UNPACKED RECORD
         MVI   UNPKSAVE,X'FF'          INVALIDATE ADDRESS
         RETURN (14,12),RC=0           NORMAL EXIT
*
*        FORCED EXIT (TO REQUEST NEXT INPUT RECORD)
*
UNPK600  LR    R15,R14                 SAVE RETURN ADDRESS
         STM   R15,R1,UNPKSAVE         SAVE R14, R0, R1
         RETURN (14,12),RC=4
UNPK980  MVI   UNPKSAVE,X'00'          INVALIDATE ADDRESS
         RETURN (14,12),RC=8           END OF FILE (X'FF')
*
*        "PACK OFF" EXIT (SENDS ALTERNATIVELY RC0 AND RC 4)
*
UNPK990  SLR   R15,R15                 INVALIDATE ADDRESS
         IC    R15,UNPKSAVE            PICK UP RETURN CODE
         XI    UNPKSAVE,X'04'          TOGGLE RETCODE
         RETURN (14,12),RC=(15)        "PACK OFF" EXIT
UNPKWORK DSECT
         DS    X'00'               +0  X'00' C'P' C'U'
         DS    C'F'                +1  RECORD FORMAT
         DS    H'80'               +2  LENGTH OF INPUT RECORD/BLOCK
UNPKW255 DS    F,A                 +4  LENGTH/ADDRESS OF RECORD AREA
UNPKWHDR DS    0XL8,X'0001,40,C6,0000,0050'
UNPKSAVE DS    A(R15,R0,R1)            FORCED EXIT
         DS    (UNPKWORK+32-*)X        MAX SIZE IS 8 WORDS
         END
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//*
//GO      EXEC PGM=LOADER,PARM=NOPRINT
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)
//*
//SYSIN    DD DISP=SHR,DSN=GILBERT.XEDIT,RECFM=U
//SYSPUNCH DD SYSOUT=*
