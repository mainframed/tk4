/*************************************************************** REXX */
/*                                                                    */
/* MODULE NAME = ROUTE                                                */
/*                                                                    */
/* DESCRIPTIVE NAME = ROUTE EDIT Macro for ISPF/PDF                   */
/*                                                                    */
/* STATUS = R615                                                      */
/*                                                                    */
/* FUNCTION = The ROUTE EDIT macro is used to obtain hard copy of     */
/*            the data currently being edited.  It is useful to       */
/*            print data that does not exist on disk in a printable   */
/*            form, such as packed data, data modified during the     */
/*            current EDIT session, or data only accessible via the   */
/*            EDIT Interface (EDIF).                                  */
/*                                                                    */
/* AUTHOR   =  Gilbert Saint-flour <gsf@pobox.com>                    */
/*                                                                    */
/* Dependencies = TSO/E V2                                            */
/*                ISPF/PDF V3 or ISPF V4                              */
/*                ROUTEPGM program R603 (optional)                    */
/*                Printer Default Attribute Table (must be customized)*/
/*                                                                    */
/* SYNTAX   =  ROUTE                                                  */
/*                 dest                  Destination                  */
/*                 first                 First line       .A          */
/*                 last                  Last line        .B          */
/*                 CCHAR                 Data contains carriage       */
/*                                       control characters           */
/*                 CLASS(class)          Class                        */
/*                 COPIES(copies)        Number of copies             */
/*                 DEST(dest)            Destination (alt)            */
/*                 FCB(FCB-name)         Name of the FCB              */
/*                 FORMS(forms-number)   Forms number                 */
/*                 HOLD/NOHOLD           HOLD/NOHOLD                  */
/*                 TITLE×NOTITLE         Print/Do-not-print header    */
/*                 PAGELEN(lines)        Number of lines per page     */
/*                 OUTDES(output-descriptor-name)                     */
/*                 PORTRAIT×LANDSCAPE    Print Format on Xerox 3700   */
/*                 WRITER(external-writer-name)                       */
/*                                                                    */
/* DEFAULTS                                                           */
/*                 CLASS(A)                                           */
/*                 NOCCHAR                                            */
/*                 NOHOLD                                             */
/*                 PAGELEN(60)                                        */
/*                 TITLE                                              */
/*                                                                    */
/* OPERANDS                                                           */
/*                                                                    */
/*           See ROUTEHLP panel for details.                          */
/*                                                                    */
/* EXAMPLES                                                           */
/*                                                                    */
/*   ROUTE R4                                                         */
/*                                                                    */
/*   ROUTE FLOOR1 COPIES(2) CCHAR                                     */
/*                                                                    */
/*   ROUTE XRX3700 .A .B CLASS(Q) COPIES(3) NOTITLE PORTRAIT CCHAR    */
/*                                                                    */
/* CHANGE ACTIVITY                                                    */
/*                                                                    */
/*  $602  IF dest='' & class\='' THEN dest='LOCAL'                    */
/*  $603  Range selection using line commands (C/CC or M/MM)          */
/*  $604  Implement the default class table to simplify customizing.  */
/*        Rewrite Parm Parsing routine.                               */
/*        Add OUTDES and LINECT parameters.                           */
/*        Print line numbers when NUMBER ON is in effect.             */
/*        Write documentation.                                        */
/*  $605  Convert a JES remote id to a standard format (i.e. RMTn)    */
/*        to make sure that if the user enters RM002 and the table    */
/*        contains RMT2, we'll get a match when we look it up.        */
/*  $606  Printer table expanded to contain multiple attributes.      */
/*        Add support for NODE, FORMS and FCB.                        */
/*  $607  Prevent truncation of last character when the NOASA option  */
/*        is specified or used as a default.                          */
/*        Change date format from 95/08/08 to 8AUG1995                */
/*  $608  Replace ROTATE key-word with PORTRAIT and LANDSCAPE         */
/*  $609  Correct various errors when user enters D/DD line commands  */
/*        Replace ASA keyword with CCHAR to support machine ctl chars.*/
/*  $610  Add support for the WRITER operand.                         */
/*        Change LINECT and HDR operands to PAGELEN and TITLE to      */
/*        look more like the PRINTDS command.                         */
/*  $611  Accept operands from outer macro.                           */
/*        Right parenthesis at end of command is optional.            */
/*  $612  Add support for the HOLD operand.                           */
/*        The destination may also be specified as DEST(dest).        */
/*  $613  Prevent error in Parse_Parm when invoked without parameters */
/*  $614  Move documentation to the ROUTEHLP panel.                   */
/*  $615  Download to a Workstation file using FILEXFER.              */
/*                                                                    */
/**********************************************************************/
Rel=R615                       /* Current release                     */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*                  Define Default Values                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
Default_Class='A'              /* Default CLASS                       */
Default_Dest='LOCAL'           /* DEST defaults to LOCAL              */
Default_Dest=''                /* User must specify DEST              */
Default_Forms=''               /* No special form required            */
Default_Node=''                /* Dest defined on this JES            */
Default_Pagelen=60             /* Lines per page                      */
Print_Line_Numbers='NO'        /* Do NOT print line numbers           */
Print_Line_Numbers='YES'       /* Print line numbers                  */
Routepgm='XYZ.LOAD'            /* Use ISPLLIB LIBDEF                  */
Routepgm='NO'                  /* Use the REXX stack and EXECIO       */
Routepgm='YES'                 /* Use the ROUTEPGM program            */
xdsn='ISPFCS.TEXT'             /* temp dsn for WS download            */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*                Printer Default Attribute Table                     */
/*                                                                    */
/*     This table defines default attributes for printers.            */
/*  It must be set up locally for every printer that requires default */
/*  attributes different from the values set in the Default_nnnnn     */
/*  variables above.  Hyphens must be used to indicate null values.   */
/*                                                                    */
/*  Note: for a JES2 remote, you must use the RMTn format (no leading */
/*        zeroes in the numeric portion).                             */
/*--------------------------------------------------------------------*/

 /*         PRINTER  NODE/NODE.DEST CLASS PAGELEN FORMS  FCB  MODE   */
printer.1 ="LOCAL    -                A     60    -       -    -      "
printer.2 ="DEVV     -                G     60    -       -    -      "
printer.3 ="ROSV     -                Q     60    -       -    -      "
printer.4 ="XRX3700  -                Q     60    -       -    P37    "
printer.5 ="ESG3700  DEVV             Q     60    -       -    P37    "
printer.6 ="SSG1     DEVV.SSG13287    Q     60    -       -    L37    "
printer.7 ="VSA      -                M     60    Z100    -    -      "
printer.11="RDGUISTS -                U     60    -       -    -      "
printer.12="RDGCMPRM -                U     60    -       -    -      "
printer.13="RDGPRGMR -                U     60    -       -    -      "
printer.17="RMT2     CHIC             U     60    -       -    -      "
printer.21="FLOOR1   A019.DSLASER5    A     60    STD     -    -      "
printer.22="FLOOR2   A019.U22         A     60    STD     -    -      "
printer.24="FLOOR4   A019.RMT2        A     60    4SH1    -    -      "
printer.30="GSFTEST  APL1             2     60    3PLY    8    -      "
Number_of_printers=30
  /*----------------------------------------------------------------*/
  /*     Initialise Variables used by the PARM parsing routine      */
  /*----------------------------------------------------------------*/
Cchar=''                                /* CCHAR                      */
Class=''                                /* SYSOUT class               */
Copies=''                               /* Number of copies           */
Dest=''                                 /* Destination                */
Forms=''                                /* Forms number               */
Fcb=''                                  /* FCB name                   */
Hold=''                                 /* HOLD/NOHOLD                */
Line1=''                                /* First Line (default is .ZF)*/
Line2=''                                /* Last Line (default is .ZL) */
Mode=''                                 /* Portrait/Landscape         */
Node=''                                 /* Routing Node               */
Outdes=''                               /* Output Descriptor          */
Pagelen=''                              /* Lines per page             */
Title=''                                /* TITLE/NOTITLE              */
Writer=''                               /* Name of external writer    */
  /*----------------------------------------------------------------*/
  /*              Invoke the PARM parsing routine                   */
  /*----------------------------------------------------------------*/
ADDRESS ISPEXEC;  "CONTROL ERRORS RETURN"
"ISREDIT MACRO (PARM) NOPROCESS"
IF rc>0 THEN
  SIGNAL Not_an_EDIT_macro

ARG Other_operands                      /* options from invoking EXEC */

CALL PARSE_PARM                         /* PARSE PARAMETERS           */
  /*----------------------------------------------------------------*/
  /*              Build the Title line (TITLE option)               */
  /*----------------------------------------------------------------*/
"ISREDIT (LRECL) = LRECL"         /*  MAX Line LENGTH                 */
IF Cchar \= 'CCHAR' THEN
  lrecl=lrecl+1
IF LEFT(Title,1)='T' THEN DO      /*  Set up header                   */
  "ISREDIT (DSNAME) = DATASET"; "ISREDIT (MEMBER) = MEMBER"
  IF member \= " " THEN    member = "("member")"
  Line = '1'USERID()" "SPACE(DATE(),0)" "TIME()" "dsname××member
  Line = JUSTIFY(TRANSLATE(Line),81)
  IF lrecl < LENGTH(line) THEN lrecl=LENGTH(line)
  END
  /*----------------------------------------------------------------*/
  /* If CCHAR option specified, determine CC type from first record */
  /*----------------------------------------------------------------*/
Recfm='F A'                       /*  Default control characters      */
IF Cchar='CCHAR' THEN DO
  "ISREDIT (L) = LINE" Line1      /*  Read first line                 */
  IF VERIFY(LEFT(L,1),' 0-+1')=1 THEN
    Recfm='F M'                   /*  Machine control characters      */
  END
  /*----------------------------------------------------------------*/
  /*                Allocate the SYSOUT data set                    */
  /*----------------------------------------------------------------*/
Alloc=Class Copies Dest Fcb Forms Hold Outdes Writer
Alloc=SPACE(Alloc,1) 'RECFM('Recfm') BLKSIZE('Lrecl')'
IF wsfn\='' THEN DO                         /* download to WS */
  alloc="DS("xdsn") OLD DELETE"
  RC=LISTDSI(xdsn 'NORECALL')
  IF RC>0 THEN DO
    IF RC=16 & SYSREASON=9 THEN             /* Migrated data set */
      "HDELETE" xdsn "WAIT"
    alloc="DS("xdsn") NEW CATALOG",
         "TRACKS SPACE(10 10) UNIT(SYSALLDA)",
         "DSORG(PS) RECFM(V B) LRECL(255)"
    END
  END
IF debug='DEBUG' THEN SAY Alloc
ADDRESS TSO,                      /*  Issue ALLOCATE Command  */
        "ALLOCATE DD(DDROUTE) REUSE" Alloc
IF rc>0 THEN EXIT 20              /*  ALLOCATE command failed */
  /*----------------------------------------------------------------*/
  /*                Write the title line                            */
  /*----------------------------------------------------------------*/
Titlelen='000'                    /*  number of lines in header       */
IF LEFT(Title,1)='T' THEN DO      /*  Write header                    */
  QUEUE Line;QUEUE ' ';QUEUE ' '
  Titlelen='003'                  /*  number of lines in header       */
  END
  /*----------------------------------------------------------------*/
  /*     Set the XEROX 3700 print mode: Landscape or Portrait       */
  /*----------------------------------------------------------------*/
IF Mode\='' THEN DO                /*  Rotate output                  */
  Udk='A1'X                        /*  Tilde=X'A1'                    */
  QUEUE ' ='××'UDK'××'='Udk' '     /*  User-defined key               */
  If Mode='L' THEN DO
    QUEUE ' 'Udk'+1XCP14-L'        /*  Mode(Landscape)                */
    QUEUE ' 'Udk'1 '
    END
  If Mode='P' THEN DO
    QUEUE ' 'Udk'+2Titan12iso-P'   /*  Mode(portrait)                 */
    QUEUE ' 'Udk'2 '
    END
  END
  /*----------------------------------------------------------------*/
  /*   If NUMBER mode is ON and global variable Print_line_numbers  */
  /*   is set to YES, change NUMBER mode to OFF.                    */
  /*----------------------------------------------------------------*/
"ISREDIT (NUMMODE,NUMTYPE) = NUMBER"   /* Query number mode info    */
IF Nummode='ON' & Print_Line_Numbers='YES' THEN
  'ISREDIT NUMBER = OFF'               /* Turn OFF number mode      */
  /*----------------------------------------------------------------*/
  /*                                                                */
  /*   Write data to DDROUTE.                                       */
  /*                                                                */
  /*   1. If the ROUTEPGM program is NOT available, then use QUEUE  */
  /*      and EXECIO for writing.                                   */
  /*                                                                */
  /*   2. If the ROUTEPGM program IS available, then invoke it to   */
  /*      speed things up.                                          */
  /*                                                                */
  /*----------------------------------------------------------------*/

IF routepgm='NO' THEN
  CALL stack_print                     /* ROUTEPGM is NOT available  */
ELSE
  CALL pgm_print                       /* ROUTEPGM is available      */

"ISREDIT NUMBER =" Nummode             /* Reset NUMBER mode          */
  /*----------------------------------------------------------------*/
  /*     Reset the XEROX 3700 printer to default print mode         */
  /*----------------------------------------------------------------*/
IF Mode\='' THEN                  /* reset printer to default mode  */
    QUEUE ' 'Udk'+X'
  /*----------------------------------------------------------------*/
  /*    Write lines out from the TSO stack to the output data set   */
  /*----------------------------------------------------------------*/
IF QUEUED() > 0 THEN DO
  QUEUE ''
  ADDRESS TSO "EXECIO * DISKW DDROUTE (FINIS"    /* WRITE lines       */
  END
  /*----------------------------------------------------------------*/
  /*            Download temp data set to the Workstation           */
  /*----------------------------------------------------------------*/
IF wsfn\='' THEN DO                            /* Download to WS ? */
  IF Debug='DEBUG' THEN
    SAY "FILEXFER HOST(xdsn) WS(wsfn) TO(WS) TEXT" xdsn wsfn
  "FILEXFER HOST(xdsn) WS(wsfn) TO(WS) TEXT"
  IF rc>0 THEN                                 /* FILEXFER error   */
    SIGNAL SETMSG
  i=line2-line1+1                               /* count lines copied */
  Zedsmsg = i "Lines Written"                    /* Short message    */
  Zedlmsg = "ROUTE "Rel": Your EDIT Data Set has been routed to" wsfn
  "SETMSG MSG(ISRZ001)"                          /* send the message */
  IF cmd = 'M' THEN                       /* if MM/MM range specified */
    'ISREDIT DELETE' Line1 Line2          /* delete the lines printed */
  ADDRESS TSO "FREE DD(DDROUTE) DELETE"    /* delete temp data set */
  EXIT
  END
  /*----------------------------------------------------------------*/
  /*            Issue completion message to terminal                */
  /*----------------------------------------------------------------*/
IF Pgmrc=0 THEN DO                               /* If COPY went OK  */
  i=line2-line1+1                               /* count lines copied */
  Zedsmsg = i "Lines Written"                    /* Short message    */
  Zedlmsg = "ROUTE "Rel": Your EDIT Data set has been routed to" Alloc
  "SETMSG MSG(ISRZ001)"                          /* send the message */
  IF cmd = 'M' THEN                       /* if MM/MM range specified */
    'ISREDIT DELETE' Line1 Line2          /* delete the lines printed */
  END
  /*----------------------------------------------------------------*/
  /*               Free up the output data set                      */
  /*----------------------------------------------------------------*/
ADDRESS TSO "FREE DD(DDROUTE)"        /* make output available to JES */
EXIT
/**********************************************************************/
/*                                                                    */
/*                    PROCESS INPUT PARAMETERS                        */
/*                                                                    */
/**********************************************************************/
PARSE_PARM:
  IF parm='?' THEN
    SIGNAL HELP_panel                         /* User requested HELP */

  'ISREDIT (LINE2) = LINENUM .ZLAST'          /* Last Line           */
  IF rc>0 × line2=0 THEN
    SIGNAL Empty_dataset                      /* No lines to print   */

  Debug=''
  Range1=''
  Range2=''
  Alphabetic=XRANGE('A','Z')
  Numeric='1234567890'
  Alphanumeric=Alphabetic××Numeric
  IF Other_operands\='' THEN            /* invoked from outer macro   */
    Parm=Parm Other_operands            /* add at end of command      */
  wsfn=''                               /* dest is NOT a wsfn         */
  /*----------------------------------------------------------------*/
  /*            Add closing parenthesis at end of string            */
  /*----------------------------------------------------------------*/
  IF parm\='' THEN DO
    p=WORD(Parm,WORDS(Parm))
    IF RIGHT(p,1)\=')' & POS('(',p)>1 THEN
      Parm=Parm××')'
  END
  /*----------------------------------------------------------------*/
  /*               Process input parameters                         */
  /*----------------------------------------------------------------*/
  DO i=1 to WORDS(parm)
    p=TRANSLATE(WORD(parm,i))
    IF Debug='DEBUG' THEN SAY 'p='p 'parm='parm
    kwd=''
    IF RIGHT(p,1)=')' & POS('(',p)>1 THEN DO
      value=LEFT(p,LENGTH(p)-1)               /* remove right paren */
      PARSE VAR value kwd '(' value           /* extract key-word   */
      END
    SELECT
      WHEN p='DEBUG'  THEN Debug=p            /* debugging */
      WHEN p='EXECIO' THEN Routepgm='NO'      /* debugging */
      WHEN LEFT(p,1) = '.' THEN DO
        If Range1='' THEN
          Range1=p
        ELSE DO
          IF Range2\='' THEN SIGNAL Duplicate_keyword
          Range2=p
          END
        END
      WHEN ABBREV('CCHAR',p,2) THEN
        IF Cchar='' THEN
          Cchar='CCHAR'
        ELSE
          SIGNAL Duplicate_keyword
      WHEN ABBREV('CLASS',kwd,2) THEN
        SELECT
          WHEN Class\='' THEN SIGNAL Duplicate_keyword
          WHEN LENGTH(value)\=1 THEN SIGNAL Invalid_value
          WHEN VERIFY(value,Alphanumeric) > 0 THEN SIGNAL Invalid_value
          OTHERWISE Class=value
        END
      WHEN ABBREV('COPIES',kwd,2) THEN
        SELECT
          WHEN Copies\='' THEN SIGNAL Duplicate_keyword
          WHEN VERIFY(value,Numeric) > 0 THEN SIGNAL Invalid_value
          WHEN value<1 × value>255 THEN SIGNAL Invalid_value
          OTHERWISE Copies='COPIES('value+0')'
        END
      WHEN ABBREV('DEST',kwd,2) THEN
        SELECT
          WHEN Dest\='' THEN SIGNAL Duplicate_keyword
          OTHERWISE Dest=Value
        END
      WHEN ABBREV('FCB',kwd,2) THEN
        SELECT
          WHEN Fcb\='' THEN SIGNAL Duplicate_keyword
          WHEN LENGTH(value)=0 THEN SIGNAL Invalid_value
          WHEN LENGTH(value)>4 THEN SIGNAL Invalid_value
          OTHERWISE Fcb='FCB('value')'
        END
      WHEN ABBREV('FORMS',kwd,2) THEN
        SELECT
          WHEN Forms\='' THEN SIGNAL Duplicate_keyword
          WHEN LENGTH(value)=0 THEN SIGNAL Invalid_value
          WHEN LENGTH(value)>4 THEN SIGNAL Invalid_value
          OTHERWISE Forms='FORMS('value')'
        END
      WHEN ABBREV('HOLD',p,2) THEN
        IF Hold='' THEN
          Hold='HOLD'
        ELSE
          SIGNAL Duplicate_keyword
      WHEN ABBREV('NOHOLD',p,3) THEN
        IF Hold='' THEN
          Hold='NOHOLD'
        ELSE
          SIGNAL Duplicate_keyword
      WHEN ABBREV('PAGELEN',kwd,2) THEN
        SELECT
          WHEN Pagelen\='' THEN SIGNAL Duplicate_keyword
          WHEN VERIFY(value,Numeric) > 0 THEN SIGNAL Invalid_value
          WHEN value<10 × value>255 THEN SIGNAL Invalid_value
          OTHERWISE Pagelen=value
        END
      WHEN ABBREV('PORTRAIT',p,4) × ABBREV('LANDSCAPE',p,4) THEN
        IF Mode='' THEN
          Mode=LEFT(p,1)                 /* P(ortrait) or L(andscape) */
        ELSE
          SIGNAL Duplicate_keyword
      WHEN ABBREV('OUTDES',kwd,4) THEN
        SELECT
          WHEN Outdes\='' THEN SIGNAL Duplicate_keyword
          WHEN LENGTH(value)=0 THEN SIGNAL Invalid_value
          WHEN LENGTH(value)>8 THEN SIGNAL Invalid_value
          WHEN VERIFY(value,Alphanumeric) > 0 THEN SIGNAL Invalid_value
          OTHERWISE Outdes='OUTDES('value')'
        END
      WHEN ABBREV('TITLE',p,3) × ABBREV('NOTITLE',p,5) THEN
        IF Title='' THEN
          Title=p
        ELSE
          SIGNAL Duplicate_keyword
      WHEN ABBREV('WRITER',kwd,2) THEN
        SELECT
          WHEN Writer\='' THEN SIGNAL Duplicate_keyword
          WHEN LENGTH(value)=0 THEN SIGNAL Invalid_value
          WHEN LENGTH(value)>8 THEN SIGNAL Invalid_value
          WHEN VERIFY(value,Alphanumeric) > 0 THEN SIGNAL Invalid_value
          OTHERWISE Writer='WRITER('value')'
        END
      OTHERWISE
        IF dest='' THEN
          dest=p
        ELSE
          SIGNAL Dest_multiple                /* too many DESTs      */
    END
  END

  /*    Check if the user selected a range by entering a line        */
  /*    command such as C, Cnn, CC/CC or M, Mnn, MM/MM. If it is     */
  /*    the case, set line1 and line2 to the first and last line     */
  /*    numbers, respectively.  If the user selected a range both    */
  /*    in the ROUTE command (such as ROUTE .X .Y) and in a line     */
  /*    command, issue an error message.                             */

  'ISREDIT PROCESS RANGE C M'
  SELECT
    WHEN rc=0 THEN DO
      'ISREDIT (CMD)   = RANGE_CMD'                /* get C or M  */
      IF range1\='' THEN SIGNAL Command_conflict
      "ISREDIT (LINE1) = LINENUM .ZFRANGE"         /* First line  */
      "ISREDIT (LINE2) = LINENUM .ZLRANGE"         /* Last line   */
      END
    WHEN rc=4 THEN DO
      CMD='C'
      IF Range1\='' THEN DO                       /* ROUTE .X .Y     */
        p=Range1
        "ISREDIT (LINE1) = LINENUM" Range1        /* LINENUM .X      */
        IF rc>0 THEN SIGNAL Invalid_label
        IF Range2='' THEN Range2='.ZLAST'          /*   DEFAULTS  */
        p=Range2
        "ISREDIT (LINE2) = LINENUM" Range2        /* LINENUM .Y      */
        IF rc>0 THEN SIGNAL Invalid_label
        IF Line2<Line1 THEN DO
          x=Line1; Line1=Line2; Line2=x           /* Swap labels     */
          END
        END
      ELSE DO
        Line1=1                                    /*   DEFAULTS  */
        "ISREDIT (LINE2) = LINENUM .ZLAST"         /*   DEFAULTS  */
        END
      END
    WHEN rc=20 THEN                       /* All lines deleted        */
      SIGNAL Empty_dataset                /* No lines to ROUTE        */
    OTHERWISE DO                          /* Line command conflict    */
      Pgmrc=RC                            /* Save ISREDIT Return code */
      IF zerrmsg\='' THEN
        'SETMSG MSG('zerrmsg')'           /* Edit has created message */
      EXIT Pgmrc
      END
  END
  /*----------------------------------------------------------------*/
  /*                  Assign default value for TITLE                */
  /*----------------------------------------------------------------*/
IF Title='' then                  /*  Default for Title is TITLE      */
  IF Cchar='CCHAR' then
     Title='NOTITLE'              /*  unless CCHAR has been           */
  ELSE
     Title='TITLE'                /*  specified                       */

IF Debug='DEBUG' THEN SAY dest','Class','Line1','Line2','Cchar','Mode
  /*----------------------------------------------------------------*/
  /*                 Assign default value for DEST                  */
  /*----------------------------------------------------------------*/
IF Dest='' THEN
  SELECT
    WHEN default_dest\='' THEN
      Dest=Default_dest                       /* use default value   */
    WHEN Class\='' THEN NOP                   /* CLASS(c) specified  */
    WHEN Outdes\='' THEN NOP                  /* OUTDES(x) specified */
    Otherwise
      SIGNAL Dest_missing                     /* dest is mandatory   */
  END
  /*----------------------------------------------------------------*/
  /*                 Check for a workstation file                   */
  /*----------------------------------------------------------------*/
IF LEFT(dest,1) = '/' × SUBSTR(dest,2,1) = ':' THEN DO
  'VGET (ZWSCON ZSCREEND ZPREFIX) SHARED'
  IF zwscon='' THEN SIGNAL Not_connected
  wsfn=dest
  Cchar='CCHAR'
  Pagelen=0
  END
  /*----------------------------------------------------------------*/
  /*                     Search Printer Table                       */
  /*----------------------------------------------------------------*/
n=VERIFY(REVERSE(dest),'0123456789')
IF n>0 & ABBREV('RMT',LEFT(dest,LENGTH(dest)-n+1)) THEN
  dest='RMT'RIGHT(dest,n-1)+0                 /* R002 -> RMT2        */

DO i=1 to Number_of_printers
  IF WORD(printer.i,1)=dest THEN DO
    IF WORD(printer.i,2)\='-' THEN Default_node=WORD(printer.i,2)
    IF WORD(printer.i,3)\='-' THEN Default_class=WORD(printer.i,3)
    IF WORD(printer.i,4)\='-' THEN Default_Pagelen=WORD(printer.i,4)
    IF Pagelen='' & WORD(printer.i,4)\='-' THEN
      Pagelen=WORD(printer.i,4)
    IF Forms='' & WORD(printer.i,5)\='-' THEN
      Forms='FORMS('WORD(printer.i,5)')'
    IF FCB='' & WORD(printer.i,6)\='-' THEN
      FCB='FCB('WORD(printer.i,6)')'
    LEAVE
  END
END

IF Default_node\='' THEN
  IF POS('.',Default_node)=0 THEN
    Dest= Default_node'.'dest                /* node=A019           */
  ELSE
    Dest=Default_node                        /* node=A019.RMT2      */
IF Dest\='' THEN
  Dest='DEST('dest')'

IF Class='' THEN
  IF Default_class='' THEN
    Class='SYSOUT'
  ELSE
    Class='SYSOUT('Default_class')'
ELSE
  Class='SYSOUT('Class')'

IF Pagelen='' then Pagelen=Default_Pagelen

RETURN
/**********************************************************************/
/*                                                                    */
/*              QUEUE the data lines to the TSO stack                 */
/*                                                                    */
/**********************************************************************/
Stack_print:
  ctlchr=' '
  IF Cchar='CCHAR' THEN
    DO WHILE (Line1 <= Line2)
      "ISREDIT (LINE) = LINE" Line1            /* GET CURRENT LINE */
      QUEUE Line
      Line1 = Line1+1                          /* NEXT LINE NUMBER */
    END
  ELSE
    DO WHILE (Line1 <= Line2)
      "ISREDIT (LINE) = LINE" Line1            /* GET CURRENT LINE */
      QUEUE ctlchr××Line
      Line1 = Line1+1                          /* NEXT LINE NUMBER */
      ctlchr=" ";Titlelen=Titlelen+1
      IF Titlelen>Pagelen THEN DO; CTLCHR="1"; Titlelen=001; END
    END
  Pgmrc=0                                  /* copy successful       */
RETURN
/**********************************************************************/
/*                                                                    */
/*              Invoke ROUTEPGM to write data lines                   */
/*                                                                    */
/**********************************************************************/
Pgm_print:
  Line1=RIGHT(Line1,6,'0')
  Line2=RIGHT(Line2,6,'0')
  IF Cchar='CCHAR' THEN
    PARM="DDROUTE,"Line1","Line2
  ELSE
    PARM="DDROUTE,"Line1","Line2","RIGHT(Pagelen,3,'0')","Titlelen

  IF QUEUED() > 0 THEN DO                          /* write title */
    QUEUE ''                                       /* write title */
    ADDRESS TSO "EXECIO * DISKW DDROUTE (FINIS"    /* write title */
    END                                            /* write title */

  IF LENGTH(routepgm) > 3 THEN DO
    p7=routepgm                            /* for ISPD014 message   */
    "LIBDEF ISPLLIB DATASET ID('"routepgm"')"
    IF rc>0 THEN                           /* ISPLLIB error         */
      SIGNAL SETMSG
    END

  "SELECT PGM(ROUTEPGM) PARM("parm")"      /* write the data lines  */
  Pgmrc=rc                                 /* save return code      */

  IF LENGTH(routepgm) > 3 THEN "LIBDEF ISPLLIB"

  SELECT
    WHEN Pgmrc=0 THEN NOP
    WHEN Pgmrc=8 THEN
      SAY "OPEN FAILED FOR DDN=DDROUTE, RC="Pgmrc
    WHEN Pgmrc=12 THEN
      SAY "INVALID PARM: '"parm"'"
    OTHERWISE
      SAY "ROUTEPGM.RC="Pgmrc "PARM='"parm"'"
    END
  RETURN
/**********************************************************************/
/*                      Exception Routines                            */
/**********************************************************************/
Not_an_EDIT_macro:
  Zedsmsg = "EDIT Macro Only"                  /* Short message    */
  Zedlmsg = "ROUTE may only be invoked as an EDIT macro"
  "SETMSG MSG(ISRZ001)"                        /* send the message */
  EXIT 8
HELP_panel:
  "DISPLAY PANEL(ROUTEHLP)"              /* Display HELP panel        */
  IF rc>8 THEN
    SIGNAL SETMSG                        /* HELP panel is missing     */
  EXIT
Empty_dataset:
  zedsmsg='Empty data set'
  zedlmsg='There are no lines to print'
  'SETMSG MSG(ISRZ001)'
  EXIT 12
Duplicate_keyword:
  IF kwd='' THEN kwd=p
  zerrsm='Duplicate Key-word'
  zerrlm='Key-word' kwd 'has been specified more than once.'
  SIGNAL Beep_msg
Invalid_value:
  zerrsm='Invalid Value'
  zerrlm='Value' value 'is invalid for key-word' kwd
  IF Value='' THEN
    zerrlm='A null value is invalid for key-word' kwd
  SIGNAL Beep_msg
Invalid_label:
  zerrsm='Probable label error'
  zerrlm=p 'recognized as invalid or undefined label.'
  SIGNAL Beep_msg
Command_conflict:
  zerrsm='Command Conflict'
  zerrlm='"'cmd'" conflicts with range specification; blank it out.'
  SIGNAL Beep_msg
Dest_missing:
  zerrsm='Destination missing'
  zerrlm='The output destination has not been specified.'
  SIGNAL Beep_msg
Dest_multiple:
  zerrsm='Multiple Destinations'
  zerrlm=p 'recognized as duplicate destination.'
  SIGNAL Beep_msg
Not_connected:
  zerrsm='Not Connected'
  zerrlm='A connection must be established with the work-station',
         'before this command is entered.'
  SIGNAL Beep_msg
Beep_msg:
  zerralrm='YES'                  /*   ALARM=YES                      */
  zerrhm='ROUTEHLP'               /*   HELP Panel                     */
  'SETMSG MSG(ISRZ002)'           /*   Issue error message            */
  EXIT 20
SETMSG:
  IF zerrmsg\='' THEN 'SETMSG MSG('zerrmsg')'
  EXIT 20
